{"ver":"0.1","info":{"id":"ft2SDw","date":"1627828138","viewed":74,"name":"Triangle effect","username":"fazias","description":"just triangles that appear and disappear\nedit: fixed the lighting of the triangle to closer what I expect\nFurther edit... slightly closer but not yet what I want + sneaky fade in\nAdded the suggested abs before pow, thanks @FabriceNeyret2","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["triangle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// signed distance to a 2D triangle from iq\nfloat sdTriangle( in vec2 p, in vec2 p0, in vec2 p1, in vec2 p2 )\n{\n\tvec2 e0 = p1 - p0;\n\tvec2 e1 = p2 - p1;\n\tvec2 e2 = p0 - p2;\n\n\tvec2 v0 = p - p0;\n\tvec2 v1 = p - p1;\n\tvec2 v2 = p - p2;\n\n\tvec2 pq0 = v0 - e0*clamp( dot(v0,e0)/dot(e0,e0), 0.0, 1.0 );\n\tvec2 pq1 = v1 - e1*clamp( dot(v1,e1)/dot(e1,e1), 0.0, 1.0 );\n\tvec2 pq2 = v2 - e2*clamp( dot(v2,e2)/dot(e2,e2), 0.0, 1.0 );\n    \n    float s = e0.x*e2.y - e0.y*e2.x;\n    vec2 d = min( min( vec2( dot( pq0, pq0 ), s*(v0.x*e0.y-v0.y*e0.x) ),\n                       vec2( dot( pq1, pq1 ), s*(v1.x*e1.y-v1.y*e1.x) )),\n                       vec2( dot( pq2, pq2 ), s*(v2.x*e2.y-v2.y*e2.x) ));\n\n\treturn -sqrt(d.x)*sign(d.y);\n}\n\n// Smooth HSV to RGB conversion from iq\nvec3 hsv2rgb_smooth( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n\trgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0*fragCoord.xy-iResolution.xy)/iResolution.y;\n    vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n\tp *= 1.5;\n    m *= 1.5;\n    \n    float tis = 3.f; // triangle initial size\n    vec2 sv1 = vec2(1.6*tis,-tis);\n    vec2 sv2 = vec2(-1.6*tis, -tis);\n    vec2 sv3 = vec2(0.0, tis);\n    \n    vec2 animationCircle = vec2(cos(iTime)*1.4, sin(iTime)-0.4);\n    \n    vec3 col;\n    col = vec3(0.0);\n    float triMul = 1.5f;\n    float animationLength = 12.f;//seconds\n    for (int k = 0; k < 12; k++) {\n        float localTime = iTime + float(k*7)/animationLength*1.5f;\n        //localTime = float(k)/animationLength;\n        //localTime = 6.f + float(k);\n        if (localTime > animationLength)\n            localTime -= float(int(localTime) / int(animationLength))*animationLength;\n        float at = localTime / animationLength;\n        // which part of up/down animation here\n        //vec2 th = vec2(0.f, sin(at*3.0f+0.1f)*4.f-4.0f);\n        vec2 th = vec2(0.f, sin(at*3.0f+0.6f)*4.2f-4.0f);\n        \n        float tpmul = clamp((animationLength*triMul - localTime*triMul)*0.04f, 0.f, 1.f);\n        float tis = 10.f; // triangle initial size\n        vec2 v1 = sv1 * tpmul;\n        vec2 v2 = sv2 * tpmul;\n        vec2 v3 = sv3 * tpmul;\n        \n        float d = sdTriangle( p, v1+th, v2+th, v3+th );\n        float timeMul = float(k) * 0.5f+float(k+1);\n        //localTime = iTime + float(k*6);\n        vec2 animationCircle = vec2(cos(localTime+timeMul), sin(localTime+timeMul)-0.1f)*3.f;\n\n        if (d > 0.f && d < 0.01f)\n        {\n            float closest = 1.f-distance(animationCircle+th,p)/2.f;\n            //col += vec3(1.0)*closest;\n            //closest = 1.f;\n            // sneaky fade-in!\n            closest *= smoothstep(localTime, 0.f, 1.f);\n            col += hsv2rgb_smooth(vec3(float(k)*0.1, 0.5, clamp(pow(abs(closest), 6.f), 0.f, 1.f)));\n            //col += hsv2rgb_smooth(vec3(float(k)*0.1, 0.5, smoothstep(closest, 0.f, 1.f)));\n            //col += pow(hsv2rgb_smooth(vec3(float(k)*0.1, 0.5, 1))*closest,vec3(4));\n        }\n    }\n\t/*\n    col *= 1.0 - exp(-2.0*abs(d));\n\tcol *= 0.8 + 0.2*cos(120.0*d);\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.02,abs(d)) );\n\n    if( iMouse.z>0.001 )\n    {\n    d = sdTriangle(m, v1, v2, v3 );\n    col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, abs(length(p-m)-abs(d))-0.0025));\n    col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, length(p-m)-0.015));\n    }*/\n\n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}