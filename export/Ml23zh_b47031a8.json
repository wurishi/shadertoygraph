{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"#define PI 3.1415926\n\n#define t iTime\n#define r iResolution.xy\n#define c fragCoord\n#define v vec2(0.,1.)\n\nfloat box( in vec3 _p )\n{\n    vec3 d = abs( _p ) - v.yyy*.1;\n    return min( max( d.x, max( d.y, d.z ) ), 0. ) + length( max( d, 0. ) );\n}\n\nfloat scene( in vec3 _p )\n{\n    vec3 p = _p;\n    p.z -= t*.4;\n    vec3 rep = v.yyy*.7;\n    p += rep/2.;\n    p = mod( p+rep/2., rep )-rep/2.;\n    float theta = exp( -mod( t, 4. )*4. )*PI;\n    p.xy = mat2( cos(theta), -sin(theta), sin(theta), cos(theta) ) * p.xy;\n    p.yz = mat2( cos(theta), -sin(theta), sin(theta), cos(theta) ) * p.yz;\n    return box( p );\n}\n\nvec3 sceneNormal( in vec3 _p, in float _d )\n{\n    vec2 d = v*_d;\n    return normalize( vec3(\n        scene( _p+d.yxx ) - scene( _p-d.yxx ),\n        scene( _p+d.xyx ) - scene( _p-d.xyx ),\n        scene( _p+d.xxy ) - scene( _p-d.xxy )\n    ) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (c*2.-r)/r.x;\n    float amp = iMouse.y/r.y;\n    float angle = iMouse.x/r.x*PI/2.;\n    \n    vec3 camPos = vec3( 1.*sin(angle), 0., 1.*cos(angle) );\n    vec3 camCen = v.yxx*sin( t )*.1 + v.xyx*sin( t*.73 )*.1;\n    vec3 camDir = normalize( camCen - camPos );\n    vec3 camAir = v.xyx;\n    vec3 camSid = cross( camDir, camAir );\n    vec3 camTop = cross( camSid, camDir );\n    \n    // ortho is here\n    camPos = camPos + p.x*camSid*amp*length( camPos ) + p.y*camTop*amp*length( camPos );\n    vec3 rayDir = normalize( p.x*camSid*( 1.-amp ) + p.y*camTop*( 1.-amp ) + camDir );\n    \n    float dist = 1E3;\n    float rayLen = 0.;\n    vec3 rayPos = camPos;\n    for( int i=0; i<32; i++ )\n    {\n        dist = scene( rayPos );\n        rayLen += dist;\n        rayPos = camPos + rayDir*rayLen;\n        if( abs( dist ) < 1E-3 || 1E2 < rayLen ){ break; }\n    }\n    \n    vec3 col = v.xxx;\n    if( dist < 1E-2 )\n    {\n        col = vec3( dot( vec3( .2, .3, .7 ), sceneNormal( rayPos, 1E-3 ) ) );\n    }\n    \n\tfragColor = vec4( col, 1. );\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"Ml23zh","date":"1427012693","viewed":291,"name":"20150322_orthoTest","username":"FMS_Cat","description":"ortho is likely to traffic accident\nmouse x : turn\nmouse y : perspective - ortho","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["2d","raymarching","ortho"],"hasliked":0,"parentid":"","parentname":""}}