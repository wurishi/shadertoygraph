{"ver":"0.1","info":{"id":"lfSBR1","date":"1724630179","viewed":12,"name":"primeiroShader3d","username":"jonasmarcosdiasrocha","description":"trabalho de computacao grafica - Jonas Marcos Dias Rocha","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["trabalhocomputacaografica"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform float iGlobalTime; \n\nfloat sphere(vec3 p, float r) {\n    return length(p) - r;\n}\n\n\nvec3 getLight(vec3 pos, vec3 normal, vec3 viewDir) {\n    vec3 lightPos = vec3(2.0, 2.0, 5.0); \n    vec3 lightColor = vec3(1.0, 1.0, 1.0); \n    vec3 ambient = 0.1 * lightColor; \n    vec3 lightDir = normalize(lightPos - pos);\n    \n    float diff = max(dot(normal, lightDir), 0.0);\n    vec3 diffuse = diff * lightColor;\n    \n    vec3 reflectDir = reflect(-lightDir, normal);\n    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32.0);\n    vec3 specular = spec * lightColor;\n    \n    return ambient + diffuse + specular;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    \n    vec2 uv = fragCoord / iResolution.xy;\n    \n    \n    vec3 ro = vec3(0.0, 0.0, -5.0);\n    vec3 rd = normalize(vec3(uv * 2.0 - 1.0, 1.0)); \n    \n    float t = sphere(ro + rd * 5.0, 1.0);\n    \n    if (t > 0.0) {\n        vec3 pos = ro + rd * t; \n        vec3 normal = normalize(pos); \n        \n        vec3 viewDir = normalize(ro - pos);\n        vec3 light = getLight(pos, normal, viewDir);\n        \n        float fresnel = pow(1.0 - max(dot(viewDir, normal), 0.0), 3.0) * 0.8;\n        \n        vec3 color = mix(vec3(0.0, 1.0, 0.0), vec3(0.0, 0.5, 0.0), fresnel); // Cor verde transl√∫cida\n        \n        vec3 translucentColor = (1.0 - fresnel) * color;\n        \n        fragColor = vec4(light * translucentColor, 1.0);\n    } else {\n        fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    }\n}\n","name":"Image","description":"","type":"image"}]}