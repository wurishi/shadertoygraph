{"ver":"0.1","info":{"id":"4scSz4","date":"1457825772","viewed":2745,"name":"Shader Lesson #2, functions","username":"hubbe","description":"Function plotter, demonstrates a bunch of the builtin functions.","likes":28,"published":1,"flags":0,"usePreview":0,"tags":["educational"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Plot a function, and a background grid.\n\nhighp float pi = 3.14159265;\n\n// Fom -2 to 2\nhighp float scale = 4.0;\n\n// This is the function that we want to plot.\nfloat f(highp float x) {\n    // Uncomment one line at a time to see what the function does.\n    \n    // return x;\n    // return x - 1.0;\n    // return x *x;\n    // return min(x, 0.0);\n    // return max(x, 0.0);\n    // return sqrt(x);\n    // return abs(x);\n    // return sign(x);\n    // return floor(x);\n    // return fract(x);\n    // return clamp(x, -1.0, 1.0);\n    // return step(1.0, x);\n    // return mod(x, 1.0);\n    // return 1.0/x;\n    // return sin(pi * x);\n    // return cos(pi * x);\n    // return log(x);\n    // return exp(x);\n    return sin(sin(iTime) * 10.0 + sin(x) * 3.0 * x);\n}\n\n// Transform an vec2 onscreen coordinate (0.0-1.0) to a coordinate that\n// we want to plot the function for. (+/- scale*2)\nvec2 p2v(vec2 pos) {\n    pos -= vec2(0.5 * iResolution.x/iResolution.y, 0.5);\n    pos *= scale;\n    return pos;\n}\n\n// Evaluate the function, return 1 if we're above the line.\nfloat t(vec2 pos) {\n    pos = p2v(pos);\n    if(f(pos.x) > pos.y) {\n        return 1.0;\n    } else {\n        return 0.0;\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.yy;\n    int cnt = 0;\n    int max_cnt = 0;\n    // 81-point subsampling\n    for (float x = -1.0; x <= 1.0; x += 0.25) {\n        for (float y = -1.0; y <= 1.0; y += 0.25) {\n            max_cnt ++;\n            if (1.0 == t((fragCoord.xy + vec2(x, y)) / iResolution.yy))\n                cnt ++;\n        }\n    }\n    if (cnt > max_cnt / 2) cnt = max_cnt - cnt;\n    \n    float color = float(cnt) * 2.0 / float(max_cnt);\n\tfloat bg = 0.0;\n    vec2 v = p2v(uv);\n\tif (abs(v.x) < scale/iResolution.x || abs(v.y) < scale/iResolution.y) {\n      bg = 0.0;\n    } else {\n\t    vec2 grid = step(mod(v, vec2(2.0, 2.0)), vec2(1.0, 1.0));\n    \tif (grid.x == grid.y) {\n          bg = 0.3;\n        } else {\n          bg = 0.4;\n        }\n    }\n    color = mix(bg, 1.0, color); \n    fragColor = vec4(color, color, color, 1.0);\n}","name":"Image","description":"","type":"image"}]}