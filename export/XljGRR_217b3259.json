{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"texture","id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"// Your uniforms\nconst vec4\tAMBIENT = vec4(.15, .25, .35, 1);\nconst float NORMAL_STRENGTH = 3.0;\nconst float NORMAL_ECART = 5.0;\n\nconst float LIGHT_RADIUS = 500.0;\nconst vec4  LIGHT_COLOR = vec4(.5, 1, .75, 1.0);\nconst float LIGHT_MULTIPLY = 2.0; // How strong it is. 1 = 100% at center. (Too dim)\n\nfloat avgColor(vec4 color)\n{\n    float avg = color.r * .22 + color.g * .75 + color.b * .03;\n    avg = pow(avg, 3.0);\n    avg = 1.0 - pow(1.0 - avg, 20.0);\n    return avg;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 lightPos = vec3(\n        sin(iTime) * iResolution.x * .3 + iResolution.x * .5, \n        cos(iTime) * iResolution.y * .3 + iResolution.y * .5, \n        100.0);\n    vec3 pixelPos = vec3(gl_FragCoord.xy, 0.0);\n    \n\tvec4 diffuse = texture(iChannel0, fragCoord.xy / iResolution.xy);\n    \n    // Calculate normal\n    vec3 normal = vec3(0.0, 0.0, 1.0);\n    float avg = avgColor(diffuse);\n    float avgx = avgColor(texture(iChannel0, (fragCoord.xy + vec2(1, 0)) / iResolution.xy));\n    float avgy = avgColor(texture(iChannel0, (fragCoord.xy + vec2(0, 1)) / iResolution.xy));\n    normal.x = (avg - avgx) * NORMAL_STRENGTH;\n    normal.y = (avg - avgy) * NORMAL_STRENGTH;\n    normal = normalize(normal);\n    \n    //diffuse = vec4(1.0, 1.0, 1.0, 1.0);\n\n    // Calculate attenuation\n    vec3 lightDir = lightPos - pixelPos;\n    float dist = distance(lightPos, pixelPos);\n    lightDir /= dist; // Normalize\n    float attenuation = 1.0 - (dist / LIGHT_RADIUS);\n    attenuation = clamp(attenuation, 0.0, 1.0);\n    attenuation = pow(attenuation, 1.5);\n    attenuation *= dot(lightDir, normal);\n    \n    // Calculate light dot with normal\n    float dt = dot(lightDir, normal);\n    attenuation *= clamp(dt, 0.0, 1.0);\n    \n    // Output accumulation of ambient + light\n\tfragColor = //vec4(avg, avg, avg, 1);\n        diffuse * AMBIENT+\n        diffuse * LIGHT_COLOR * attenuation * LIGHT_MULTIPLY;\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XljGRR","date":"1426626913","viewed":276,"name":"Simple Light with Radius","username":"daivuk","description":"Light example with radius (Finite falloff)","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["lightradius"],"hasliked":0,"parentid":"","parentname":""}}