{"ver":"0.1","info":{"id":"XcSGDm","date":"1704269710","viewed":22,"name":"phind: ai fractal test","username":"AIFunnyTests","description":"ai fractal test","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fractal","ai","phind"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define mandelbulbEPOCHS 100\n#define raymarchEPOCHS 100\n#define epsilon 0.00001\n\n#define MAX_ITERATIONS 2\n\n// Function to compute the distance to the Menger Sponge\nfloat mengerSponge(vec3 p, out float z) {\n   float d = 1.0;\n   vec3 a = abs(p);\n   z = 0.0;\n   for (int i = 0; i < MAX_ITERATIONS; ++i) {\n       d = min(d, max(max(a.x, a.y), a.z) - 0.5);\n       a = 1.0 - abs((a - 0.5) * 3.0 - 1.5);\n       z += exp(0.01*length(a));\n   }\n   return d;\n}\n\n//reference: https://www.shadertoy.com/view/ll2GD3\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvec3 raymarchMandelbulb(vec3 o, vec3 d) {\n   vec3 color = vec3(1.0);\n   float t = 0.0;\n   for(int i = 0; i < raymarchEPOCHS; i++) {\n       vec3 c = o + d * t;\n       float z;\n       float dist = mengerSponge(c, z);\n       if(abs(dist) < epsilon) {\n           color = pal(z, vec3(0.5, 0.4, 1.0), vec3(0.8, 0.4, 0.1), vec3(0.1, 0.1, 0.8), vec3(1.0, 1.0, 1.0));\n           break;\n       }\n       t += dist;\n   }\n   return color;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   // Get the normalized screen coordinates (from -1 to 1)\n   vec2 uv = gl_FragCoord.xy / iResolution.xy * 2.0 - 1.0;\n\n   // Calculate aspect ratio\n   float aspect = iResolution.x / iResolution.y;\n\n   // Create a camera matrix\n   mat3 cam = mat3(\n      1.0, 0.0, 0.0,\n      0.0, 1.0, 0.0,\n      0.0, 0.0, 1.0\n   );\n\n   // Calculate the ray direction\n   vec3 dir = normalize(vec3(uv * vec2(aspect, 1.0), 1.0));\n\n   // Rotate the ray direction around the Mandelbulb\n   float time = iTime * 0.5;\n   float angle = time * 0.5;\n   mat3 rot = mat3(cos(angle), 0.0, sin(angle), 0.0, 1.0, 0.0, -sin(angle), 0.0, cos(angle));\n   dir = normalize(rot * dir);\n\n   // Set the origin to the camera position\n   vec3 origin = vec3(0.0, 0.0, 0.0);\n   dir.z += time;\n\n   // Now you can use 'origin' and 'dir' in your raymarching function\n   vec3 col = raymarchMandelbulb(origin, dir);\n\n   // Output to screen\n   fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}