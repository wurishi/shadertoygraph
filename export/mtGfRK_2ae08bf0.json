{"ver":"0.1","info":{"id":"mtGfRK","date":"1702263227","viewed":186,"name":"Christmas tree lights effect","username":"afrhu","description":"Trying a Christmas tree lights effect, based upon a similar shader by Tetane","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["christmas","lights"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    // Origin in the middle\n    // Aspect ratio corrected\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    \n\n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    //Black background color\n    vec3 col = vec3(0.0);\n    \n    //Add a star\n    vec2 pos_star = vec2(0.0,0.32);//vertical offset\n    //if (distance(uv, pos_star) < 0.1){\n    //    col = vec3(1.0);\n    //}\n    //Make light effect\n    float d = distance(uv, pos_star);\n    float intensity = 1.0/200.0;\n    //col = vec3(intensity/d);\n    //Add flare effect\n    float factor = 80000.0;\n    vec2 uv_flare = uv-pos_star;\n    //horizontal*vertical\n    //inverse\n    //non-negative\n    //col += max(1.0 - abs(factor*uv_flare.x*uv_flare.y),0.0);\n    \n    //Tree lights\n    \n    \n    //Normalize coordinates for positions\n    vec2 xy_s = iResolution.xy/iResolution.x;\n    //Correct aspect ration and invert vertical\n    vec2 uv_s = vec2(fragCoord.x, iResolution.y-fragCoord.y)/iResolution.x;\n    \n    float phase = 0.0;\n    \n    //Add multiple phases\n    for (float j = 0.0; j < 2.0; j+=0.25){\n    \n        phase = j;\n        //spiral\n        float n = 60.0; //number of lights per spiral\n\n        // Create lights iteratively\n        for (float i = 0.0; i < n; i++){\n\n            //Apply sin dependant of i\n            //Apply increasing sin\n            //Rotate\n            //Add a phase\n\n            float a = 0.35*i+0.1*iTime+phase*3.141592;\n            float x = 0.003*i*sin(a)+xy_s.x*0.5;\n            float y = xy_s.y*i/n*0.7+0.1;\n            vec2 pos = vec2(x,y);\n\n            //if (distance(uv_s,pos) < 0.001){\n            //    col = vec3(1.0);\n            //}\n\n            //make them lights\n            float intensity = 1.0/7000.0;\n            float d = distance(uv_s, pos);\n            //Make lights in background dimmer\n            col += intensity/d*max(0.2,cos(a)+0.5);\n        }\n    }\n    //col += uv_s.x;\n    \n    //Add color from default shader\n    col *= 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    \n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}