{"ver":"0.1","info":{"id":"3lBXDw","date":"1565993780","viewed":137,"name":"LiveCodingPractice003(45min)","username":"Hirai_worthless","description":"bubble","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float PI = 3.14159265;\nmat2 genRot(float v){\n\treturn mat2(cos(v),-sin(v),sin(v),cos(v));\n}\nfloat rand(float p){\n\treturn sin(p) * 3. + cos(p) / 2. + sin(p/2.) * 2.;\n}\nvec2 pmod(vec2 p, float c){\n    p *= genRot(PI/c);\n    float r = length(p);\n\tfloat at = atan(p.y/p.x);\n    at = mod(at , PI * 2./c);\n    p = vec2(cos(at) * r,sin(at) * r);\n    p *= genRot(-PI/c);\n    return p;\n}\nfloat map(vec3 p){\n    float rc = 0.25 + abs(floor(rand(p.x + iTime/4.) * 5.) + floor(rand(p.y + iTime/4.) * 5.) + floor(rand(p.z + iTime/4.) * 5.)) * 0.015;\n    float sp = length(p - vec3(0.,0.,iTime)) - rc * 2.;\n    p.z = (fract(p.z/2. + 0.5)-0.5 ) * 2.;\n        p.xy = pmod(p.xy,4.);\n        p.x -= 4.;\n    p.xy = pmod(p.xy,8.);\n    float r = 0.25 + abs(floor(rand(p.x + iTime) * 5.) + floor(rand(p.y + iTime) * 5.) + floor(rand(p.z + iTime) * 5.)) * 0.015;\n\tfloat sps = length(p - vec3(3.,0.,0.)) - r;\n    return min(sp,sps);\n}\n\nvec3 getNormal(vec3 p){\n\tvec3 x = dFdx(p);\n    vec3 y = dFdy(p);\n    return normalize(cross(x,y));\n}\n\nvec4 trace(vec3 o,vec3 r){\n\tvec4 res;\n    float t = 0.;\n    for(int i = 0; i < 64; i++){\n    \tvec3 p = o + r * t;\n        float d = map(p);\n        t += d * 0.5;\n    }\n    vec3 n = getNormal(o + r * t);\n    return vec4(n,t);\n\n}\nvec3 cam(){\n\tvec3 c = vec3(2. * sin(iTime),2. * -cos(iTime),-2.5 + iTime);\n    return c;\n}\nvec3 ray(vec2 uv,float z) {\n\tvec3 r = normalize(vec3(uv,z));\n    r.yz *= genRot(-PI/4.);\n    r.xz *= genRot(-PI/4.);\n    r.xy *= genRot(iTime);\n    return r;\n}\nvec3 getCol(vec3 o,vec3 r,vec4 data){\n\tfloat t = data.w;\n    vec3 n = data.xyz;\n    vec3 bc = vec3(1. - dot(n,r));\n    vec3 p = o + r * t;\n    vec3 ccol;\n    float at = atan(p.y / p.x) * 2.;\n    ccol.x = sin(at + iTime + p.z) / 2. + 0.5;\n    ccol.y = sin(at + iTime + p.z + PI * 2. /3.) / 2. + 0.5;\n    ccol.z = sin(at + iTime + p.z + PI * 4. / 3.) / 2. + 0.5;\n    bc *= ccol;\n    float fog = 1./(1. + t * t * 0.015);\n    vec3 col = mix(bc,vec3(0.),1. - fog);\n    return col;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord.xy * 2. - iResolution.xy)/iResolution.y;\n    vec3 o = cam();\n    vec3 r = ray(uv,1.5 * sin(iTime));\n    vec4 data = trace(o,r);\n    vec3 col = getCol(o,r,data);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}