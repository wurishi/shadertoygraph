{"ver":"0.1","info":{"id":"ttXGR4","date":"1555717387","viewed":556,"name":"whys and hows of shirley jones 5","username":"elenzil","description":"displacing texture feedback by the gradient of the distance to the mandelbrot.\nusing IQ's mandelbrot distance math without even trying to understand it. thanks, IQ!\nmouse Y = fade from video to static \"dry\" input","likes":5,"published":3,"flags":32,"usePreview":0,"tags":["mandelbrot","distance","shirley","jones"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\ndisplacing texture feedback by the gradient of the distance to the mandelbrot.\nusing IQ's mandelbrot distance math without even trying to understand it. thanks, IQ!\nmouse Y = fade from video to static \"dry\" input\n*/\n\nvoid mainImage(out vec4 RGBA, in vec2 XY) {\n    vec2 UV = XY / iResolution.xy;\n    RGBA = vec4(texture(iChannel0, UV).rgb, 1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nconst float numIters = 200.0;\nconst vec2  unitX    = vec2(1.0, 0.0);\n\nvec2 complexMul(in vec2 A, in vec2 B) {\n  return vec2((A.x * B.x) - (A.y * B.y), (A.x * B.y) + (A.y * B.x));\n}\n\n// adapted from IQ\n// https://iquilezles.org/articles/distancefractals\nfloat mandelDist(vec2 c)\n{\n    vec2  z = vec2(0.0, 0.0);\n    vec2 dz = vec2(0.0, 0.0);\n    \n    float m2;\n    for (float n = 0.0; n < numIters; ++n) {\n        dz = 2.0 * complexMul(z, dz) + unitX;\n        z  = complexMul(z, z) + c;\n\n        m2 = dot(z, z);\n\t\tif (m2 > 1.0e10) {\n        \tbreak;\n\t\t}\n    }\n    \n    // distance estimation: G/|G'|\n    return sqrt(m2 / dot(dz, dz)) * 0.5 * log(m2);\n}\n\nvoid mainImage(out vec4 RGBA, in vec2 XY) {\n    float smallWay = min(iResolution.x, iResolution.y);\n    vec2 uv = (XY * 2.0 - iResolution.xy)/smallWay;\n    \n    float t = iTime * -0.1;\n\tfloat c = cos(t);\n    float s = sin(t);\n    uv *= mat2(c, s, -s, c);\n    \n    // todo: how to linearize 'zoom' over time.\n    uv /= 1.0 + 900.0 * pow(0.5 + 0.5 * cos(t * 1.1), 2.0);\n    uv -= vec2(0.7435, -0.1315);\n    \n    float dist = mandelDist(uv);\n    dist = pow(dist, 0.1);\n    \n    vec3 col = vec3(dist);\n\n    RGBA = vec4(col,1.0);\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage(out vec4 RGBA, in vec2 XY) {\n    \n    vec2 UV = XY/iResolution.xy;\n    \n    if (iFrame < 3) {\n        RGBA = texture(iChannel1, UV);\n        return;\n    }\n    \n    // get the gradient of the distance to the MSet\n    // and displace the texture by it.\n    \n    float gradPoint = texture(iChannel0, UV).r;\n    vec2 grad = vec2(dFdx(gradPoint), dFdy(gradPoint));\n \n    // normalizing turned out to make the image a lot less precise\n    // but a let less noisy.\n    grad = grad * 0.01 + normalize(grad) * 0.001;\n    \n    grad *= -12.0;\n    \n    float t = iTime * 0.13;\n    float c = cos(t);\n    float s = sin(t);\n    grad *= mat2(c, s, -s, c);\n    \n\n    vec3 wet1 = texture(iChannel2, UV + grad).rgb;\n    vec3 wet2 = texture(iChannel2, UV - grad).rgb;\n    vec3 dry1 = texture(iChannel1, UV       ).rgb;\n    vec3 dry2 = texture(iChannel3, UV       ).rgb;\n    vec3 dry = mix(dry1, dry2, iMouse.y / iResolution.y);\n    wet1.r *= 0.5;\n    wet2.b *= 0.5;\n    vec3 wet  = (wet1 + wet2);\n    wet.g  *= 0.5;\n    wet.rb /= 1.5;\n    wet *= 2.0 - (length(fwidth(gradPoint)) + 10.0) / 10.0;\n    \n    float mixAmt = 0.05;\n//    if (iFrame % 120 * 4 == 0) {\n//        mixAmt = 1.0;\n//    }\n    \n    RGBA = vec4(mix(wet, dry, mixAmt), 1.0);\n}","name":"Buffer B","description":"","type":"buffer"}]}