{"ver":"0.1","info":{"id":"wsGSDm","date":"1574429032","viewed":346,"name":"Pong : Origins (Ultimate)","username":"cedricl","description":"Use arrows to play. First to reach 15 wins.\nPlease provide feedback.","likes":12,"published":1,"flags":48,"usePreview":0,"tags":["game","crt","pong"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Final display & post-processes\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy + vec2(.0025*sin(iTime*.37)*sin(iTime*.49), .0015*sin(iTime*1.49));\n    uv.x = (uv.x-.5) / cos(Roundness*abs(uv.y - .5)) + .5;\n    uv.y = (uv.y-.5) / cos(Roundness*abs(uv.x - .5)) + .5;\n    uv.x = (uv.x+HNOISE_AMOUNT * Rnd(iTime + .1*uv.y) * abs(uv.x - .5)-.5)*1.3 + .5;\n    float TopGlitch = Rnd(iTime)*(1./(200.*(1.-uv.y)+1.));\n    vec2 uv2 = uv + vec2(.0015,0.006)*(smoothstep(.4, .52, sin(2.5*uv.y-.13*iTime))) + vec2(.02*TopGlitch,.0);\n    fragColor = max(vec4(.15)+.005*Rnd(.01*uv.x)+.03*Rnd(uv.x), texture(iChannel0, uv2)) * (.01*sin(iTime*23.37)*sin(iTime*27.37)+.95);\n    fragColor -= .006*(smoothstep(.5, .52, sin(2.5*uv.y-.13*iTime))) + .2*TopGlitch;\n    fragColor += GHOST_AMOUNT * (.3-texture(iChannel0, uv2 - vec2(GHOST_DIST, 0.)));\n    fragColor *= smoothstep(.0, BorderSharpness, .5 - abs(uv.x - .5)) * smoothstep(0., BorderSharpness, .5 - abs(uv.y - .5));\n    fragColor *= mix(pow(abs(sin(uv.y*ScanH*3.14159)), 1.2), 1., ScanDep);\n    fragColor *= pow(1. - length(uv-vec2(.5)), Vignetting);  \n    fragColor = fragColor*1.8 + BLUR_CURVE_AMOUT*texture(iChannel1, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"const int KEY_UP    = 38;\nconst int KEY_DOWN  = 40;\n\n#define VAR_HW 0.005\n#define VAR_POS_SPD (VAR_HW * 1.)\n#define VAR_BALL (VAR_HW * 3.)\n#define VAR_SCORE (VAR_HW * 5.)\n\n#define WW 0.014\n#define WW2 (WW*0.5)\n#define VY 0.01\n#define BALL_SPD vec2(0.01, 0.004)\n#define RKT_SZ 5.\n#define RKT_MARGIN 4.\n\n#define HNOISE_AMOUNT 0.0015\n#define Roundness .7\n#define BorderSharpness .006\n#define ScanH 160.\n#define ScanH_Inv (1./ScanH)\n#define ScanDep 0.8\n#define Vignetting .7\n#define GHOST_AMOUNT 0.05\n#define GHOST_DIST 0.006\n#define BLUR_R 80.8\n#define BLUR_SMP 12.\n#define BLUR_CURVE_POW 1.2\n#define BLUR_CURVE_AMOUT .5\n\nfloat Rnd(float In) { return fract(sin(In * 37549.66654368976) + sin(In * 375.4567)); }\nvec4 GetVar(sampler2D t, float Address) { return texture(t, vec2(Address, 0.5) ); }\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// game logic\n#define SUB_PASSES 5.\n#define DT (60.*iTimeDelta/SUB_PASSES)\nbool DoSetVar(vec2 uv, float Ad) { return abs(uv.x - Ad) < VAR_HW; }\nvoid LimitY(inout float y, inout float vy, float limit) { y = clamp(y, 0., limit); if(y < 0. || y > limit) vy = 0.; }\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 ball = GetVar(iChannel1, VAR_BALL); // xy:pos zw:spd\n    vec4 score = GetVar(iChannel1, VAR_SCORE); // x:player y:AI z:timer w:respawn side\n    vec4 pos_spd = GetVar(iChannel1, VAR_POS_SPD); // x:player_Y y:AI_Y z:player_VY w:AI_VY    \n    pos_spd.z = clamp(pos_spd.z*0.8 + 0.003 * (texelFetch(iChannel0, ivec2(KEY_DOWN, 0), 0) - texelFetch(iChannel0, ivec2(KEY_UP, 0), 0)).x, -VY, VY);\n    pos_spd.w = clamp(pos_spd.w*0.8 + 0.1 * clamp(ball.y - pos_spd.y, -1., 1.), -VY, VY);\n    \n    for(float i = 0.; i < SUB_PASSES; i += 1.)\n    {\n        pos_spd.xy += DT*pos_spd.zw;\n        float YLimit = iResolution.y / iResolution.x;\n        LimitY(pos_spd.x, pos_spd.z, YLimit);\n        LimitY(pos_spd.y, pos_spd.w, YLimit);\n        if(ball.w == 0.) { ball.w = 1.5*BALL_SPD.y*cos(3.14*Rnd(iTime)); ball.xy = vec2(score.w, .5*YLimit); pos_spd.xy = vec2(.5*YLimit); } // init\n        if(ball.z == 0.) ball.z = -BALL_SPD.x*sign(score.w-.5);\n        if(score.z > 0.) { ball.zw = vec2(0.); score.z -= iTimeDelta/SUB_PASSES; }\n        else if(score.y >= 15. || score.x >= 15.) score.xy = vec2(0.);\n        if(ball.x <= RKT_MARGIN*WW+WW2 && ball.x >= RKT_MARGIN*WW-WW2 && abs(ball.y - pos_spd.x) < RKT_SZ*WW2) { ball.z = BALL_SPD.x; ball.w += .5*pos_spd.z; }\n        else if(ball.x < 0.) { ball.zw = vec2(0.); score.yz += 1.; score.w = 0.2; }\n        if(ball.x >= 1.-RKT_MARGIN*WW-WW2 && ball.x <= 1.-RKT_MARGIN*WW+WW2 && abs(ball.y - pos_spd.y) < RKT_SZ*WW2) { ball.z = -BALL_SPD.x; ball.w += .5*pos_spd.w;}\n        else if(ball.x >= 1.) { ball.zw = vec2(0.); score.xz += 1.; score.w = 0.8; }\n        if(ball.y <= 0.) ball.wy *= vec2(-1., 0.);\n        else if(ball.y >= YLimit) { ball.wy *= -1.; ball.y = YLimit;}\n        ball.xy += DT*ball.zw;\n    }\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    if(DoSetVar(uv, VAR_POS_SPD))  \tfragColor = pos_spd;\n    if(DoSetVar(uv, VAR_BALL))  \tfragColor = ball;\n    if(DoSetVar(uv, VAR_SCORE))  \tfragColor = score;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"// game render\nfloat Flash(float Score) { return step(15., Score)*clamp(1000.*sin(25.*iTime), 0., 1.); }\nvoid DB(inout vec4 Col, vec2 UV, vec2 Pos, vec2 Sz) { Col = max(Col, vec4(min((Sz.x*WW2-abs(UV.x - Pos.x)), (Sz.y*WW2-abs(UV.y - Pos.y)) )*300.0)); }\nvoid DDigit(inout vec4 Col, vec2 UV, vec2 Pos, int Digit)\n{\n\tint bmp[10] = int[10](0x7b6f, 0x4924, 0x73e7, 0x79e7, 0x49ed, 0x79cf, 0x7bcf, 0x4927, 0x7bef, 0x79ef);\n\tfor(int i = 0; i < 15; i++) if(((bmp[Digit]>>i)&1) != 0) DB(Col, UV, Pos+.8*vec2(WW*float(i%3),WW*float(i/3)), vec2(1.2));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = .3*texture(iChannel2, uv);\n    float YLimit = iResolution.y / iResolution.x;\n    uv.y = (1. - uv.y) * YLimit;\n    vec4 PPos = GetVar(iChannel1, VAR_POS_SPD);\n    vec4 Ball = GetVar(iChannel1, VAR_BALL); // xy:pos zw:spd    \n    vec4 Score = GetVar(iChannel1, VAR_SCORE); \n    DB(fragColor, uv, vec2(RKT_MARGIN*WW, PPos.x), vec2(1.,RKT_SZ)); // Player\n    DB(fragColor, uv, vec2(1.-RKT_MARGIN*WW, PPos.y), vec2(1.,RKT_SZ)); // AI\n    DB(fragColor, uv, Ball.xy, vec2(.8)); // Ball\n    DDigit(fragColor, uv, vec2(.5-WW*13., .1 - Flash(Score.x)), int(mod(Score.x, 10.)));\n    if(Score.x >= 10.) DDigit(fragColor, uv, vec2(0.5-WW*17., .1 - Flash(Score.x)), 1);\n    DDigit(fragColor, uv, vec2(.5+WW*12., .1 - Flash(Score.y)), int(mod(Score.y, 10.)));\n    if(Score.y >= 10.) DDigit(fragColor, uv, vec2(0.5+WW*8., .1 - Flash(Score.y)), 1);\n    fragColor = min(vec4(1.), max(fragColor, vec4(min((.5*WW2-abs(uv.x-.5)), (.5*YLimit-abs(uv.y-.5*YLimit)) )*200. * step(.4,fract(uv.y*60.*YLimit))))); \n}","name":"Buffer D","description":"","type":"buffer"},{"inputs":[{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"// blur\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 col = vec4(0);\n    vec2 unit = 1.0 / iResolution.xy;\n    float count = 0.0;\n    for(float x = -BLUR_R; x < BLUR_R; x += (BLUR_R/BLUR_SMP))\n    {\n        float weight = pow(BLUR_R - abs(x), BLUR_CURVE_POW);\n        col += texture(iChannel0, uv + vec2(uv.x * unit.x, x * unit.y) ) * weight;\n        count += weight;\n    }\n\n    fragColor = col / count;\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// blur\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 col = vec4(0);\n    vec2 unit = 1.0 / iResolution.xy;\n    float count = 0.0;\n    for(float x = -BLUR_R; x < BLUR_R; x += (BLUR_R/BLUR_SMP))\n    {\n        float weight = pow(BLUR_R - abs(x), BLUR_CURVE_POW);\n        col += texture(iChannel0, uv + vec2(x * unit.x, uv.y * unit.y) ) * weight;\n        count += weight;\n    }\n\n    fragColor = col / count;\n}","name":"Buffer B","description":"","type":"buffer"}]}