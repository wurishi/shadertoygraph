{"ver":"0.1","info":{"id":"lcKXRW","date":"1714892742","viewed":86,"name":"bae #004 ~ Malddiply","username":"BretHudson","description":"A bunch of pluses and crosses","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["cross"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// kudos to IQ for signed distance functions\n// https://iquilezles.org/articles/distfunctions2d/\n\nfloat sdCross( in vec2 p, in vec2 b, float r ) \n{\n    p = abs(p); p = (p.y>p.x) ? p.yx : p.xy;\n    vec2  q = p - b;\n    float k = max(q.y,q.x);\n    vec2  w = (k>0.0) ? q : vec2(b.y-p.x,-k);\n    return sign(k)*length(max(w,0.0)) + r;\n}\n\nfloat sdRoundedX( in vec2 p, in float w, in float r )\n{\n    p = abs(p);\n    return length(p-min(p.x+p.y,w)*0.5) - r;\n}\n\n// kudos to https://www.ronja-tutorials.com/post/035-2d-sdf-combination/\nvec2 rotate(in vec2 p, in float rot)\n{\n    float PI = 3.14159;\n    float angle = rot * PI * 2.0 * -1.0;\n    float sine = sin(angle);\n    float cosine = cos(angle);\n    return vec2(cosine * p.x + sine * p.y, cosine * p.y - sine * p.x);\n}\n\nvec3 palette(in float t)\n{\n    vec3 a = vec3(0.731, 1.098, 0.192);\n    vec3 b = vec3(0.358, 1.090, 0.657);\n    vec3 c = vec3(1.077, 0.360, 0.328);\n    vec3 d = vec3(0.965, 2.265, 0.837);\n    return a + b * cos(6.28318 * (c * t + d));\n}\n\nfloat edge(in float d, in float a, in float b)\n{\n    return 1.0 - smoothstep(a, b, d);\n}\n\nfloat circles = 6.0;\n\nfloat lerp(in float a, in float b, in float t)\n{\n    return a * (1.0 - t) + b * t;\n}\n\nfloat renderShapeAnim(in vec2 pos, in float size, in float rotation, in float tOffset)\n{\n    float t = (iTime + tOffset);\n    \n    float edgeR = 0.0;\n    float pulse = sin(t) * 0.5 + 0.5;\n    \n    vec2 aPos = rotate(pos, t * 0.3 + rotation);\n    vec2 bPos = rotate(pos, rotation);\n    float shapeA = sdRoundedX(aPos, size, size / 5.0);    \n    float shapeB = sdRoundedX(bPos, size, size / 5.0);\n    \n    float d = lerp(shapeA, shapeB, pulse);\n    d = edge(d, edgeR, edgeR + 0.2 * (size / 3.0));\n    \n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.x;\n    vec2 uv0 = uv;\n    \n    float d = renderShapeAnim(uv, 0.3, 0.0, 0.0);\n    \n    for (float i = 1.0; i < 5.0; i++)\n    {\n        uv = fract(uv * 1.75) - 0.5;\n        float size = 0.27 - i * 0.03;\n        float rot = i * 0.125;\n        float tOffset = i * -0.85;\n        float opacity = 1.1 / (i + 1.0);\n        d = max(d, renderShapeAnim(uv, size, rot, tOffset) * opacity);\n    }\n\n    vec3 color = vec3(d, d * 0.8, 0.2);\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}