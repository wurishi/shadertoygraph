{"ver":"0.1","info":{"id":"mtdXDs","date":"1685885787","viewed":84,"name":"Circles simple test","username":"BaldPolnareff","description":"just a test","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["circles","uv"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\n    vec2 uv = (fragCoord * 2. - iResolution.xy) / iResolution.y; // -1 to 1 centered UVs\n\n    vec2 uv0 = uv; // copying original UVs for later\n    vec3 finalColor = vec3(uv.x, uv.y, 0.); // initialize final color to 0 \n\n    \n    float circle = 2.1*length(finalColor);\n    for (float i = 10.2; i < 11.1; i++){\n        circle = 1.2*sin(pow(smoothstep(pow(fract(circle * i / 2.1), 2.2), 1.5, .65*circle), 1.) + .9 * iTime); \n        fragColor = .2 * vec4(.2 * i * circle + sin(iTime *.1), .4 * i * circle, i/20. * circle, 1.0); \n        // adding distortion with noise\n        vec3 distortion = .3 * (vec3(uv * 1.2, iTime * 0.2));\n        fragColor = vec4(fragColor.xyz + 2.*distortion.x + 2.*distortion.y, 1.0);\n    }\n\n}","name":"Image","description":"","type":"image"}]}