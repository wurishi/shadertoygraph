{"ver":"0.1","info":{"id":"7tKGzD","date":"1652696005","viewed":239,"name":"denoise","username":"silvertakana","description":"denoise","likes":8,"published":1,"flags":32,"usePreview":0,"tags":["denoise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 getDiff(vec3 c1, vec3 c2){\n    return abs(c1-c2);\n}\nfloat avg(vec3 c){\n    return (c.r + c.g + c.b)/3.f;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 pixel1 = texture(iChannel1, uv).rgb;\n    vec3 col = pixel1;\n    if(abs(fragCoord.x - iMouse.x) < 2.f)\n        col = vec3(0.f);\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec3 getDiff(vec3 c1, vec3 c2){\n    return abs(c1-c2);\n}\nfloat avg(vec3 c){\n    return (c.r + c.g + c.b)/3.f;\n}\nvec3 hash32(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 pixel1 = texture(iChannel0, uv).rgb;\n    vec3 pixel2 = vec3(texture(iChannel1, uv*1.0f + 0.f * vec2(sin(iTime), cos(iTime))).r);\n    //pixel2 = hash32(uv*1000.f);\n    vec3 col = pixel1;\n    if(avg(pixel2) < 0.5f){\n        col = vec3(-0.f);\n    }\n    if(mod(fragCoord.x,2.f) > 1.f || mod(fragCoord.y,2.f) > 1.f)\n    {\n        //col = vec3(-0.f);\n    }\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"vec3 getDiff(vec3 c1, vec3 c2){\n    return abs(c1-c2);\n}\nfloat avg(vec3 c){\n    return (c.r + c.g + c.b)/3.f;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 pixel1 = texture(iChannel0, uv).rgb;\n    vec3 pixel2 = texture(iChannel1, uv).rgb;\n    vec3 col = mix(pixel1, pixel2, 0.2f);\n    //col = pixel2;\n    if(avg(pixel1) < threshold){\n        vec3 sur[4];\n        float pixelMove = 1.f;\n        float e = pixelMove/iResolution.x;\n        float e2 = pixelMove/iResolution.y;\n        sur[0] = vec3(texture(iChannel1, uv + vec2(e,0.f)));\n        sur[1] = vec3(texture(iChannel1, uv + vec2(-e,0.f)));\n        sur[2] = vec3(texture(iChannel1, uv + vec2(0.f,e2)));\n        sur[3] = vec3(texture(iChannel1, uv + vec2(0.f,-e2)));\n        vec3 sum = vec3(0.f);\n        float counter=0.f;\n        for(int i = 0;i < 4; i++){\n            if(avg(sur[i]) > threshold){\n                sum+=sur[i];\n                counter++;\n            }\n        }\n        \n        sum/=counter;\n        col = sum;\n    }\n    if(fragCoord.x > iMouse.x){\n       col = pixel1;\n    }\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"float threshold = 0.0001f;\n#define PI 3.14159265359","name":"Common","description":"","type":"common"}]}