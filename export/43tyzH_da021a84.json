{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"video","id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"channel":1,"type":"video","id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"code":"// conf\n#define COLOR_MODE 0\n#define MOVE_MODE 1\n#define PULSE_MODE 0\n\n#define INVERT_RATE 3.5\n\n// const\n#define PI (3.14159)\n\n// code\nvec4 mainImage2(in vec2 uv, float angleMul, float angleOff, float dotCount, float dotSize, float nGroups, float gID) {\n    // Scale uv by dotCount to get a denser or sparser grid:\n    vec2 scaledUV = uv * dotCount;\n\n    // Find the nearest integer lattice point:\n    vec2 cell = floor(scaledUV + 0.5); \n    // Convert cell back to world coordinates for the dot position:\n    vec2 dotPos = (cell / dotCount);\n\n    float cellIndex = mod((cell.x + cell.y), nGroups);\n    if (cellIndex != gID) return vec4(0.0);\n\n    float dist = length(uv - dotPos);\n    \n    vec2 unuv = vec2(uv.x/(iResolution.x/iResolution.y), uv.y);\n    unuv = (unuv+1.)/2.; // undo resolution scaling\n    vec3 texC = texture(iChannel0, unuv).rgb;\n    texC += texture(iChannel1, unuv).rgb;\n    texC /= 2.;\n\n    // Use smoothstep to create a soft-edged dot:\n#if COLOR_MODE\n    float intensity = smoothstep(dotSize, dotSize * 0.8, dist);\n    return vec4(vec3(intensity)*texC, 1.0);\n#else\n    dotSize *= dot(texC.rgb, vec3(1./3.));\n    float intensity = smoothstep(dotSize, dotSize * 0.8, dist);\n    return vec4(vec3(intensity), 1.0);\n#endif\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord.xy / iResolution.xy) * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;  // Adjust for aspect ratio\n    \n    float time = iTime;\n    float moveSpeed = 3.;\n    float moveDist = 0.1;\n\n    vec2 off;\n#if MOVE_MODE\n    off = vec2(sin(time*moveSpeed), cos(time*moveSpeed))*moveDist;\n    //if (fract(time/INVERT_RATE*2.)<0.1) off = vec2(0.);\n#endif\n    vec2 m = (iMouse.z>0.) ? (iMouse.xy / iResolution.xy) * 2.0 - 1.0 : off;\n\n    float dotCount = 20.;\n    float dotSize = 0.025;\n#if PULSE_MODE\n    dotSize = mix(0.01,.025, (sin(time/2.)+1.)/2.);\n#endif\n    float nGroups = 4.;\n    vec3 col = vec3(0.0);\n    col += mainImage2(uv + m,               -1.5, 0.0, dotCount, dotSize, nGroups, 0.0).rgb;\n    col += mainImage2(uv + m * vec2(1.0,-1.0), 1.0,  0.0, dotCount, dotSize, nGroups, 1.0).rgb;\n    col += mainImage2(uv + m * vec2(-1.0,1.0), -1.0, 0.0, dotCount, dotSize, nGroups, 2.0).rgb;\n    col += mainImage2(uv + m * vec2(-1.0,-1.0),1.5,  0.0, dotCount, dotSize, nGroups, 3.0).rgb;\n\n    if (mod(time, INVERT_RATE*2.) > INVERT_RATE) col = 1.-col;\n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"43tyzH","date":"1734734698","viewed":37,"name":"cestgrid","username":"bombblob","description":"moving dots contain an image\n\ndots move when you click","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["postprocessing","illusion"],"hasliked":0,"parentid":"","parentname":""}}