{"ver":"0.1","info":{"id":"lXlcD4","date":"1726209329","viewed":38,"name":"Spirals of Chaos - Dynamic Chaos","username":"madrune","description":"A procedural shader generating dynamic spirals with pulsing colors, chromatic aberration, and smooth circular gradients. Inspired by the beauty of fractals and signed distance functions.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["chaos","dynamic","pulsing","alphablending"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// \"Spirals of Chaos - Dynamic Chaos\"\n// Author: Master Of CP (assisted by Guardian Of Debug)\n// Date: September 2024\n// Special thanks to: Matt Taylor (ACES tone mapping) and Inigo Quilez (signed distance functions and blending)\n\n#define TIME        iTime\n#define RESOLUTION  iResolution\n\n#define ROT(a)      mat2(cos(a), sin(a), -sin(a), cos(a))\n\nconst float \n  pi        = acos(-1.),\n  tau       = 2. * pi,\n  planeDist = 0.5,\n  furthest  = 16.0,\n  fadeFrom  = 8.0,\n  chaosFactor = 3.0,\n  pulseSpeed = 0.3;  // Time-based pulsing\n\nconst vec2 \n  pathA = vec2(0.31, 0.41),\n  pathB = vec2(1.0, sqrt(0.5));\n\nconst vec4 \n  U = vec4(0, 1, 2, 3);\n\nfloat dynamicRotation(float z) {\n    return sin(TIME * 0.5 + z * 2.0) * chaosFactor;\n}\n\nvec3 offset(float z) {\n  return vec3(pathB * sin(pathA * z * chaosFactor), z);\n}\n\nvec3 doffset(float z) {\n  return vec3(pathA * pathB * cos(pathA * z * chaosFactor), 1.0);\n}\n\nvec3 ddoffset(float z) {\n  return vec3(-pathA * pathA * pathB * sin(pathA * z * chaosFactor), 0.0);\n}\n\n// Generate noise for distortions\nfloat noise(vec2 p) {\n    return fract(sin(dot(p.xy, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\n// Create a star pattern with more points for complexity\nfloat starPattern(vec2 p, float r, float sm, int numPoints) {\n    p = -p;\n    float angle = tau / float(numPoints);  // Cast `numPoints` to `float` here\n    for (int i = 0; i < numPoints; ++i) {\n        // Cast `i` to `float` so it's compatible with `cos` and `sin`\n        vec2 k = vec2(cos(float(i) * angle), sin(float(i) * angle));\n        p -= 2.0 * max(dot(k, p), 0.0) * k;\n    }\n    return length(p) - r;\n}\n\n// Increase color modulation with time and a larger palette\nvec3 palette(float n, float time) {\n  return 0.5 + 0.5 * sin(vec3(0., 1., 2.) * chaosFactor + n + time * 2.0);\n}\n\n// Alpha blending function\nvec4 alphaBlend(vec4 back, vec4 front) {\n  float w = front.w + back.w * (1.0 - front.w);\n  vec3 xyz = (front.xyz * front.w + back.xyz * back.w * (1.0 - front.w)) / w;\n  return w > 0.0 ? vec4(xyz, w) : vec4(0.0);\n}\n\nvec4 plane(vec3 ro, vec3 rd, vec3 pp, vec3 npp, float pd, vec3 cp, vec3 off, float n) {\n  float aa = 3. * pd * distance(pp.xy, npp.xy);\n  vec4 col = vec4(0.);\n  vec2 p2 = pp.xy;\n  p2 -= offset(pp.z).xy;\n  vec2 doff = ddoffset(pp.z).xz;\n  vec2 ddoff = doffset(pp.z).xz;\n  float dd = dot(doff, ddoff);\n  p2 *= ROT(dd * pi * 5.0);\n\n  // More complex star with 7 points\n  float d0 = starPattern(p2, 0.45, 0.2, 7) - 0.02;\n  float d1 = d0 - 0.01;\n  float d2 = length(p2);\n  const float colp = pi * 100.;\n  float colaa = aa * 200.;\n\n  // Add dynamic noise to colors\n  float dynamicNoise = noise(pp.xy * 5.0 + TIME * 0.3);\n  \n  // Time-based pulsing for brightness\n  float pulse = sin(TIME * pulseSpeed + d2 * 10.0) * 0.5 + 0.5;\n\n  // Color modulation with more dynamic behavior\n  col.xyz = palette(0.5 * n + 2.0 * d2, TIME) * mix(0.5 / (d2 * d2), 1.0, smoothstep(-0.5 + colaa, 0.5 + colaa, sin(d2 * colp))) / max(3.0 * d2 * d2, 1E-1);\n  \n  // Apply the pulse effect\n  col.xyz *= pulse;\n\n  // Introduce chromatic aberration for a glitchy effect\n  col.xyz.r += 0.1 * sin(d2 * 10.0 + TIME * 0.3);\n  col.xyz.g += 0.05 * cos(d2 * 15.0 + TIME * 0.5);\n  col.xyz.b += 0.03 * sin(d2 * 8.0 + TIME * 0.2);\n\n  // Glowing effect on the star edges\n  col.xyz = mix(col.xyz, vec3(2.0), smoothstep(aa, -aa, d1)); \n\n  col.w = smoothstep(aa, -aa, -d0);\n  return col;\n}\n\nvec3 color(vec3 ww, vec3 uu, vec3 vv, vec3 ro, vec2 p) {\n  float lp = length(p);\n  vec2 np = p + 1. / RESOLUTION.xy;\n  float rdd = 2.0 - 0.25;\n\n  vec3 rd = normalize(p.x * uu + p.y * vv + rdd * ww);\n  vec3 nrd = normalize(np.x * uu + np.y * vv + rdd * ww);\n\n  float nz = floor(ro.z / planeDist);\n\n  vec4 acol = vec4(0.0);\n\n  vec3 aro = ro;\n  float apd = 0.0;\n\n  for (float i = 1.0; i <= furthest; ++i) {\n    if (acol.w > 0.95) break;\n    float pz = planeDist * nz + planeDist * i;\n\n    float lpd = (pz - aro.z) / rd.z;\n    float npd = (pz - aro.z) / nrd.z;\n    float cpd = (pz - aro.z) / ww.z;\n\n    vec3 pp = aro + rd * lpd;\n    vec3 npp = aro + nrd * npd;\n    vec3 cp = aro + ww * cpd;\n\n    apd += lpd;\n\n    vec3 off = offset(pp.z);\n\n    float dz = pp.z - ro.z;\n    float fadeIn = smoothstep(planeDist * furthest, planeDist * fadeFrom, dz);\n    float fadeOut = smoothstep(0., planeDist * 0.1, dz);\n    float fadeOutRI = smoothstep(0., planeDist * 1.0, dz);\n\n    float ri = mix(1.0, 0.9, fadeOutRI * fadeIn);\n\n    vec4 pcol = plane(ro, rd, pp, npp, apd, cp, off, nz + i);\n\n    pcol.w *= fadeOut * fadeIn;\n    acol = alphaBlend(pcol, acol);\n    aro = pp;\n  }\n\n  return acol.xyz * acol.w;\n}\nvec3 aces_approx(vec3 v) {\n    v = max(v, 0.0);\n    v *= 0.6;\n    float a = 2.51;\n    float b = 0.03;\n    float c = 2.43;\n    float d = 0.59;\n    float e = 0.14;\n    return clamp((v * (a * v + b)) / (v * (c * v + d) + e), 0.0, 1.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 r = RESOLUTION.xy, q = fragCoord / r, pp = -1.0 + 2.0 * q, p = pp;\n  p.x *= r.x / r.y;\n\n  float tm = planeDist * TIME;\n\n  vec3 ro = offset(tm);\n  vec3 dro = doffset(tm);\n  vec3 ddro = ddoffset(tm);\n\n  vec3 ww = normalize(dro);\n  vec3 uu = normalize(cross(U.xyx + ddro, ww));\n  vec3 vv = cross(ww, uu);\n  \n  vec3 col = color(ww, uu, vv, ro, p);  // col is vec3 here\n  col = aces_approx(col);               // Apply tone mapping (vec3 in, vec3 out)\n  col = sqrt(col);                      // Apply gamma correction\n  fragColor = vec4(col, 1);             // Convert vec3 to vec4 for fragment output\n}","name":"Image","description":"","type":"image"}]}