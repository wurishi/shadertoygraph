{"ver":"0.1","info":{"id":"7tscW7","date":"1648138828","viewed":314,"name":"Particules","username":"jjuarezbellais","description":"particules","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["ati"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//https://www.youtube.com/watch?v=3CycKKJiwis&list=PLGmrMu-IwbguU_nY2egTFmlg691DN7uE5&index=19\n#define S(a,b,t) smoothstep(a,b,t)\nfloat rand(vec2 co)\n{\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\nfloat distLine(vec2 p, vec2 a, vec2 b){\n    vec2 pa = p-a;\n    vec2 ba =b-a;\n    float t = clamp(dot(pa, ba)/dot(ba, ba), 0.0, 1.0);\n    return length(pa - ba*t);\n\n}\nfloat n21(vec2 p){\n    p=fract(p*vec2(233.34, 851.73));\n    p += dot(p, p+23.45);\n    return fract(p.x*p.y);\n}\n\nvec2 n22(vec2 p){\n    float n= n21(p);\n    return vec2(n, n21(p+n));\n}\n\nvec2 getPos(vec2 id, vec2 offs){\n    \n\n    //randomize le mouvement\n    vec2 n = n22(id + offs)*iTime;\n    \n    //bouge x et y\n    //float x= sin(iTime*n.x);\n    //float y = cos(iTime*n.y);\n    \n    return offs + sin(n)*0.4;\n\n}\nfloat Line(vec2 p, vec2 a, vec2 b){\n    float d= distLine(p, a, b);\n    float m = S(0.03, 0.01, d);\n    float d2 = length(a-b);\n    m*= S(1.2, 0.8, d2)*0.5 + S(0.05, 0.03, abs(d2 - 0.75)) ;\n    return m;\n    \n}\nfloat layer(vec2 uv){\n    float m = 0.01;\n\n    vec2 gv = fract(uv)-0.5;\n    vec2 id = floor(uv);\n    \n    //fait bouger les balles dans le temps\n    //vec2 p = getPos(id);\n    \n    //bulle dans chaque case\n    //float d = length(gv-p);\n    //m = S(0.1, 0.05, d);\n    \n    vec2 p[9];\n    \n    int i=0;\n    \n    for(float y=-1.0; y<=1.0; y++){\n        for(float x=-1.0; x<=1.0; x++){\n            p[i++] = getPos(id, vec2(x,y));\n            \n        }\n    }\n    \n    float t =iTime*2.0;\n    \n    for(int i=0; i<9; i++){\n        m+= Line(gv, p[4], p[i]);\n        \n        vec2 j = (p[i]-gv)*18.0;\n        float sparkle = 1.0/dot(j, j);\n        \n        m+= sparkle*(sin(t+fract(p[i].x)*10.)*0.5+0.5) ;\n    }\n    \n    m+= Line(gv, p[1], p[3]);\n    m+= Line(gv, p[1], p[5]);\n    m+= Line(gv, p[7], p[3]);\n    m+= Line(gv, p[7], p[5]);\n    \n    return m;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    vec2 uv2 = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    vec2 mouse = (iMouse.xy/iResolution.xy)-0.5;\n    //float d = distLine(uv, vec2(0), vec2(1));\n    \n    \n    //taille grille\n    uv *= 1.1;\n    \n    float m = 0.0;\n    float t = iTime*0.1;\n    \n    float s = sin(t);\n    float c=cos(t);\n    mat2 rot=mat2(c, -s, s, c);\n    float rand= sin(2.0)*sin(10.0);\n    mat2 rot2 = mat2(cos(iTime*rand), -sin(iTime*rand),sin(iTime*rand),cos(iTime*rand));\n    \n    uv2 *= rot2;\n    float gradient = (uv2.x+uv2.y);\n    uv *= rot*1.2;\n    \n    mouse *= rot;\n    for( float i=0.; i<1.0; i+=1.0/4.0){\n        float z = fract(i+t);\n        float size = mix(10.0, 0.5,z);\n        float fade = S(0.,0.2,z)*S(1., .8,z);\n        m += layer(uv*size+i*20.+mouse)*fade;\n    }\n    \n    \n    vec3 base = sin(t*5.0*vec3(0.345, 0.456, 0.657))*0.4 + 0.6;\n    vec3 col = m*base;\n    col-= (gradient)*base;\n    \n    //col.rg=id*0.2;\n    \n    //affichage grille rouge\n    /*if(gv.x>0.48 || gv.y>0.48){\n        col = vec3(1,0,0);\n    }*/\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}