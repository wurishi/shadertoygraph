{"ver":"0.1","info":{"id":"3sSyD3","date":"1587394106","viewed":301,"name":"Water Condensation on Glass","username":"D4v1D","description":"one of my first GLSL studies, based on Warping - procedural 4 (inspired by https://www.shadertoy.com/view/MdSXzz)","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["procedural","water","condensation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// based and inspired by Warping - procedural 4 (https://www.shadertoy.com/view/MdSXzz - by inigo quilez - iq/2014)\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// it's WORK IN PROGRESS!!\n\nconst mat2 m = mat2(0.81,0.60,-.9,.8);\nfloat hash( vec2 p ) { float h = dot(p,vec2(127.1,311.7)); return -1.0 + 2.0*fract(sin(h)*43758.5453123); }\n\nfloat noise( in vec2 p) \n{   vec2 i = floor(p);\n    vec2 f = fract(p);\n\tvec2 u = f*f*(3.0-2.0*f);\n    return mix(mix( hash( i + vec2(0.0,0.0) ), \n                     hash( i + vec2(1.0,0.0) ), u.x),\n                mix( hash( i + vec2(0.0,1.0) ), \n                     hash( i + vec2(1.0,1.0) ), u.x), u.y); }\n\nfloat fbm( vec2 p )\n{   float f = 0.0;\n    f += 0.30 * noise( p ); p = m*p*2.00;\n \tf *= 0.700  + noise( p ); p = m*p*1.00;\n    f *= 0.1250 + noise( p ); p = m*p*2.00;\n    f += 0.1725 * noise( p );\n    return f/0.9375; }\n\nvec2 fbm2( in vec2 p )\n{return vec2( fbm(p.yx), fbm(p.xy) );}\n\nvec3 map( vec2 p )\n{   p *= 0.7;\n    float f = dot( fbm2( 1.0*(0.24*iTime - p + fbm2(-0.05*iTime+2.0*(p / fbm2(5.0*p)))) ), vec2(1.0,-1.0) ); // condensa\n    float bl = smoothstep(-0.8, 0.8, f );\n    float ti = smoothstep(0.0,1.0, fbm(p) );\n    return mix( mix( vec3(0.1,0.0,.2),\n                     vec3(1.0,1.0,0.0), ti ), \n                     vec3(1.0,1.0,1.0), bl );   }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   vec2 p = (-iResolution.xy+2.0*fragCoord.xy)/iResolution.y;\n    float e = 0.0045;\n    vec3 colc = map(e-p);\n    float gc = dot(colc,vec3(0.333));\n    vec3 cola = map(p + vec2(e,0.0)); \n    float ga = dot(cola,vec3(0.333));\n    vec3 colb = map(p + vec2(0.0,e));\n    float gb = dot(colb,vec3(0.333));\n    vec3 col = colc;\n    col += vec3(0.1,0.1,.11)*1.0*abs(1.0*gc-ga-gb); // defines color for highlight in outlines/border\n    vec2 q = -fragCoord.xy/iResolution.xy; // this traces screen coordinates;\n    col *= pow(16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y),0.1);  // vignetting\n    fragColor = vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"}]}