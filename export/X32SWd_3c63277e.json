{"ver":"0.1","info":{"id":"X32SWd","date":"1711739061","viewed":43,"name":"Hitsuono_Dithering","username":"Hitsuono","description":"Basic dithering study.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["dithering"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xdf3zn","filepath":"/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","previewfilepath":"/media/ap/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","type":"texture","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"int bayer_n = 4;\nmat4 bayer_matrix = mat4(\n    -0.5,       0,  -0.375,   0.125,\n    0.25,   -0.25,   0.375, - 0.125,\n    -0.3125,  0.1875, -0.4375,  0.0625,\n    0.4375, -0.0625,  0.3125, -0.1875\n);\n\nvec4 closestCol(int N, vec4 col){\n    return round(col * float(N))/float(N);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    const int N = 1;\n    float r = 1. / float(N);\n    vec4 col = texture(iChannel0, uv);\n    \n    // Bayer texture\n    //vec2 bayerCoord = vec2(int(fragCoord.x)%bayer_n, int(fragCoord.y)%bayer_n);\n    //fragColor= texture(iChannel1, bayerCoord); \n    //col += 1.*(texture(iChannel1, vec2(int(fragCoord.x)%bayer_n, int(fragCoord.y)%bayer_n)).r);\n    \n    // According to the original algorithm:\n    col += r*(bayer_matrix[int(fragCoord.x)%bayer_n][int(fragCoord.y)%bayer_n]);\n    col = closestCol(N, col);\n    \n    // More pixelated version. It is binary but with parameters that allow for \n    // more customization of the algorithm\n    //float v = 2.;\n    //float b = 2.3;\n    //float c = 0.05;\n    //col += v*(bayer_matrix[int(fragCoord.x)%bayer_n][int(fragCoord.y)%bayer_n]);\n    //col = round(col / b + c);\n\n    fragColor = col;\n}","name":"Image","description":"","type":"image"}]}