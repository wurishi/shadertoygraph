{"ver":"0.1","info":{"id":"tsSyRR","date":"1585934627","viewed":120,"name":"white grid","username":"zilog","description":"superstudio fake vr","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["grid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float N = 10.0; // grid\n\nfloat IsGridLine(vec2 fragCoord)\n{\n\t// Define the size we want each grid square in pixels\n\tvec2 vPixelsPerGridSquare = vec2(N, N);\n\t\n\t// fragCoord is an input to the shader, it defines the pixel co-ordinate of the current pixel\n\tvec2 vScreenPixelCoordinate = fragCoord.xy;\n\t\n\t// Get a value in the range 0->1 based on where we are in each grid square\n\t// fract() returns the fractional part of the value and throws away the whole number part\n\t// This helpfully wraps numbers around in the 0->1 range\n\tvec2 vGridSquareCoords = fract(vScreenPixelCoordinate / vPixelsPerGridSquare);\n\t\n\t// Convert the 0->1 co-ordinates of where we are within the grid square\n\t// back into pixel co-ordinates within the grid square \n\tvec2 vGridSquarePixelCoords = vGridSquareCoords * vPixelsPerGridSquare;\n\n\t// step() returns 0.0 if the second parmeter is less than the first, 1.0 otherwise\n\t// so we get 1.0 if we are on a grid line, 0.0 otherwise\n\tvec2 vIsGridLine = step(vGridSquarePixelCoords, vec2(1.0));\n\t\n\t// Combine the x and y gridlines by taking the maximum of the two values\n\tfloat fIsGridLine = max(vIsGridLine.x, vIsGridLine.y);\n\n\t// return the result\n\treturn fIsGridLine;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec3 res = vec3(1.0);\n\n\tres = res - IsGridLine(fragCoord);\n\tfragColor = vec4(res, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}