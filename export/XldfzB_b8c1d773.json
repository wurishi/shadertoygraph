{"ver":"0.1","info":{"id":"XldfzB","date":"1540112193","viewed":100,"name":"Short RGB Perlin (v2)","username":"dust","description":"Last Perlin shader I wrote was mostly broken; this has similar effects to that, but with working noise.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["procedural","2d","noise","perlinnoise","perlin","symmetry"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Adjustable palette tones\n#define PALETTE_TONE_A vec3(0.25f, 0.5f, 1.0f)\n#define PALETTE_TONE_B vec3(1.0f)\n\n// Slow, high-quality 2D hash adapted from nimitz's\n// WebGL2 hash collection\n// (https://www.shadertoy.com/view/Xt3cDn)\nvec2 hash22(uvec2 p)\n{\n    const uint PRIME32_2 = 2246822519U, PRIME32_3 = 3266489917U;\n\tconst uint PRIME32_4 = 668265263U, PRIME32_5 = 374761393U;\n    uint h32 = p.y + PRIME32_5 + p.x*PRIME32_3;\n    h32 = PRIME32_4*((h32 << 17) | (h32 >> (32 - 17))); //Initial testing suggests this line could be omitted for extra perf\n    h32 = PRIME32_2*(h32^(h32 >> 15));\n    h32 = PRIME32_3*(h32^(h32 >> 13));\n    h32 = h32^(h32 >> 16);\n    uvec2 rz = uvec2(h32, h32*48271U);\n    return vec2(rz.xy & uvec2(0x7fffffffU)) / float(0x7fffffff);\n}\n\n// Specialty Perlin ease-in/out function\nvec2 soften(vec2 t)\n{\n    vec2 t3 = t * t * t;\n    vec2 t4 = t3 * t;\n    vec2 t5 = t4 * t;\n    return 6.0f * t5 - \n           15.0f * t4 +\n           10.0f * t3;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalized + mirrored pixel coordinates\n    vec2 uv = fragCoord / iResolution.xy;\n    uv = abs(uv - vec2(0.5f));\n    \n    // Pixel + cell skew, renormalization to (0...[cellSize])\n    float skew = 1.0f + 0.1f * sin(iTime);\n    float uvLen = length(uv);\n    float cellSize = (0.03125f / (1.4f - uvLen * skew)) * 1.4f;\n    uv *= vec2(1.0f) + (texture(iChannel0, uv * vec2(skew)).rg * 0.08f * uvLen);\n    uv /= cellSize;\n        \n    // Find corner coordinates\n    vec4 lwrUpr = vec4(floor(uv), ceil(uv)); \n    mat4x2 crnrs = mat4x2(lwrUpr.xw, lwrUpr.zw,\n                          lwrUpr.xy, lwrUpr.zy);\n    \n    // Generate gradients at each corner\n    mat4x2 dirs = mat4x2(hash22(uvec2(floatBitsToUint(crnrs[0]))),\n                         hash22(uvec2(floatBitsToUint(crnrs[1]))),\n                         hash22(uvec2(floatBitsToUint(crnrs[2]))),\n                         hash22(uvec2(floatBitsToUint(crnrs[3]))));\n    \n    // Shift gradients into [-1...0...1]\n    dirs *= 2.0f;\n    dirs -= mat4x2(vec2(1.0f), vec2(1.0f), \n                   vec2(1.0f), vec2(1.0f));\n    \n    // Normalize\n    dirs[0] = normalize(dirs[0]);\n    dirs[1] = normalize(dirs[1]);\n    dirs[2] = normalize(dirs[2]);\n    dirs[3] = normalize(dirs[3]);\n    \n    // Find per-cell pixel offset\n    vec2 offs = mod(uv, 1.0f);\n    \n    // Compute gradient weights for each corner; take each offset relative\n    // to corners on the square in-line\n    vec4 values = vec4(dot(dirs[0], (offs - vec2(0.0f, 1.0f))),\n                       dot(dirs[1], (offs - vec2(1.0f))),\n                       dot(dirs[2], (offs - vec2(0.0f))),\n                       dot(dirs[3], (offs - vec2(1.0f, 0.0f))));\n    \n    // Smoothly interpolate values, then cache\n    vec2 softXY = soften(offs);\n    float sel = mix(mix(values.z, \n                        values.w, softXY.x),\n                    mix(values.x, \n                        values.y, softXY.x),\n                    softXY.y);\n    \n    // Use interpolated values to blend between palette colors\n    vec3 rgb = mix(PALETTE_TONE_A,\n                   PALETTE_TONE_B,\n                   abs(sel));\n    \n    // Output to screen\n    fragColor = vec4(rgb, 1.0);\n}","name":"Image","description":"","type":"image"}]}