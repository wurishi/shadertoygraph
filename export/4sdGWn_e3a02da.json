{"ver":"0.1","info":{"id":"4sdGWn","date":"1450499821","viewed":341,"name":"bump map lighting","username":"public_int_i","description":"some bump mapping, inspired by shanes realistic looking bump shaders","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["lighting","map","bump"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"//Ethan Shulman 2015\n\n\nstruct Material {\n    vec3 diffuse, specular;\n    float metallic, roughness;\n};\n\nvec3 textureSample(in vec2 p) {\n    vec2 uv = p;\n    for (int i = 0; i < 3; i++) {\n        float t = iTime*.02+float(i);\n        uv = abs(uv)*mat2(sin(t),cos(t),-cos(t),sin(t));\n        uv = mod(uv*2.,2.)-1.;\n    }\n        \n    return mix(texture(iChannel0,p*3.+iTime*.02).xyz, texture(iChannel0, p*3.).xyz,\n               \t\ttexture(iChannel0,p*.4+cos(vec2(iTime*.05,iTime*.083))).x);\n}\n\nfloat height(in vec2 p) {\n    return textureSample(p).x;\n}\n\nvec3 normal(in vec2 p) {\n    const vec2 NE = vec2(.01,0.);\n    return normalize(vec3( height(p+NE)-height(p-NE),\n                          1.,\n                           height(p+NE.yx)-height(p-NE.yx) ));\n}\n\n\nMaterial material(in vec2 p) {\n    vec3 tex = textureSample(p);\n    return Material( tex,\n                     min(tex*2., .8),\n                     .4,\n                     .7);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy - .5;\n    vec3 rd = normalize(vec3(uv*2.,-1.).xzy);\n    \n    const int nLights = 1;\n    vec3 lightDirs[nLights],\n         lightColors[nLights];\n  \n    lightDirs[0] = normalize(vec3(sin(iTime)*3.,1.,cos(iTime)*3.));\n    lightColors[0] = vec3(0.);\n    \n    \n    vec3 norm = normal(uv);\n    Material mat = material(uv);\n    \n    vec3 refl = reflect(rd,norm);\n    float fres = (1.-max(0., dot(rd,norm)))*max(0., .5-mat.metallic)+mat.metallic;\n    \n    vec3 c = vec3(0.);\n    //ambient\n    vec3 sum = vec3(0.), lastDir = vec3(0.);\n    for (int i = 1; i < 8; i++) {\n        vec3 nDir = norm+cos(refl.yzx*64.*float(i)*94.234-lastDir*32.534+float(i)*1.7234)*.234+cos(lastDir.yzx*float(i)*151.324)*.234;\n        sum += texture(iChannel1, normalize(nDir)).xyz;\n        lastDir += cos(nDir.yzx*112.123)*32.234;\n    }\n    c += (1.-mat.metallic)*mat.diffuse*(sum/7.);\n    vec3 reflSum = texture(iChannel1, refl).xyz, lastDir2;\n    for (int i = 1; i < 10; i++) {\n        if (float(i)/10. > mat.roughness) break;\n        vec3 nDir = refl+cos(cos(refl.yzx/float(i)*324.234)*234.+cos(lastDir2.yzx*float(i)*421.324)*127.34)*mat.roughness*.234;\n        reflSum += texture(iChannel1, normalize(nDir)).xyz;\n        lastDir2 += nDir*11.234;\n    }\n    c += fres*mat.specular*(reflSum/(floor(mat.roughness*10.)+1.));//texture(iChannel1, refl).xyz;\n    \n    //lights\n    for (int i = 0; i < nLights; i++) {\n        c += (1.-mat.metallic)*max(0., dot(lightDirs[i], norm))*mat.diffuse*lightColors[i];\n    \t\n        float spec = pow(max(0., dot(refl,-lightDirs[i])), 10.+(1.-mat.roughness)*84.);\n        c += fres*spec*mat.specular*lightColors[i];\n    }\n    \n    fragColor = vec4(c, 1.);\n}","name":"","description":"","type":"image"}]}