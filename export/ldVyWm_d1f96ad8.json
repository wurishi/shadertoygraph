{"ver":"0.1","info":{"id":"ldVyWm","date":"1522329423","viewed":92,"name":"Euler line ","username":"PiechureQ","description":"euler line\n","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["geometry"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//https://en.wikipedia.org/wiki/Euler_line\n//I've only implemented centroid and orthocenter of this triangle to create this line\n\nfloat a(vec2 A, vec2 B){ \n\treturn (B.y - A.y) / (B.x - A.x);   \n}\n\nfloat b(vec2 A, vec2 B){\n    return ((A.y * B.x) - (A.x * B.y)) / (B.x - A.x);\n}\n\nfloat perA(vec2 A, vec2 B){\n\treturn -1.0 / a(A, B);    \n}\n\nfloat perB(vec2 A, vec2 B, vec2 C){\n\treturn C.y - perA(A,B) * C.x;\n}\n\nvec2 weightCenter(vec2 A, vec2 B, vec2 C){\n\treturn vec2((A.x + B.x + C.x) / 3.0, (A.y + B.y + C.y) / 3.0);   \n}\n\nvec2 orthoCenter(vec2 A, vec2 B, vec2 C){\n    float x = (perB(A, C, B) - perB(A, B, C)) / (perA(A,B) - perA(A,C));\n    float y = (perA(A, B) * x) + perB(A, B, C); \n\treturn vec2(x, y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = 10.0 * (fragCoord - .5  * iResolution.xy)/iResolution.y;\n    float x = uv.x;\n    float y = uv.y;\n    float time = iTime * .4;\n    vec3 col = 0.5 + 0.5*cos(iTime + (uv.xyx / 5.0)+vec3(0,2,4)) / 2.0;\n    \n    //triangle vertices coordinates\n    vec2 A = vec2(-4.0, -2.0);\n    vec2 B = vec2(4.0, -1.0);\n    vec2 C = vec2(2.0, 2.0);\n    \n    //animation\n    A.x += sin(time) * 4.;\n    A.y += sin(time);\n    B += sin(time) * 2.;\n    C.x += sin(time) * 3.0;\n    C.y += sin(time) + 1.0;\n    \n    vec2 center = weightCenter(A, B, C);\n    vec2 ortho = orthoCenter(A, B, C);\n   \n    if(y < a(ortho, center) * x + b(ortho, center))\n        col *= 0.3;\n    else\n        col *= 0.8;\n    \n    if(!(y < a(A, B)*x + b(A,B) || y > a(A, C)*x + b(A, C) || y > a(C, B)*x + b(C, B)))\n    \tcol = 0.5 + 0.5*cos(uv.xyx / 2.0+vec3(0,2,4));\n    \n    if(abs(a(ortho, center) * x + b(ortho, center) - y) < 0.02)\n        col = vec3(0.0);\n    \n    //uncomment to see centroid \n\t//if(pow(x - center.x, 2.0) + pow(y - center.y, 2.0) < 0.003)\n   \t//\tcol = vec3(1.0, 0.0, 0.0);\n    //uncomment to see othocenter\n    //if(pow(x - ortho.x, 2.0) + pow(y - ortho.y, 2.0) < 0.003)\n   \t//\tcol = vec3(0.0);\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}