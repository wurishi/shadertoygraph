{"ver":"0.1","info":{"id":"3dtSR7","date":"1571687851","viewed":81,"name":"Mandelbrot [WIP]","username":"Hendiadyoin","description":"A Simple Mandelbrot Zoom\nPlay With The Scale And Offset To Find Interseting Patterns (Still searching for myself)\nIf Needed Increase Or Decrease The STEP an MAX Values for Better Performance or Accuracy\nAdjust Coloring if needed.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SCALE 1./(iTime)\n#define OFFSET vec2(.27,0)\n#define MAX 1000.\n#define STEPS 1000\n//  Function from IÃ±igo Quiles\n//  https://www.shadertoy.com/view/MsS3Wc\nvec3 hsb2rgb( in vec3 c ){\n    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),\n                             6.0)-3.0)-1.0,\n                     0.0,\n                     1.0 );\n    rgb = rgb*rgb*(3.0-2.0*rgb);\n    return c.z * mix(vec3(1.0), rgb, c.y);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -.5 to .5)\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    uv *= SCALE;\n    uv+= OFFSET;\n    vec2 z = vec2(0);\n    vec3 col = vec3(0);\n    \n    for(int i=0;i<STEPS;i++){\n        //mandelbrot agorithm\n    \tz.xy = vec2(\n        \t(z.x*z.x-z.y*z.y),\n            (2.*z.x*z.y)\n        ) + uv;\n        \n        //breakcondition\n        if(length(z)>MAX){\n            //coloring\n            float p = float(i)/MAX*10.;\n            float mult = 1./sqrt(sqrt(SCALE));\n            float hue = clamp(0.,1.,p*mult);\n        \tcol = hsb2rgb(vec3(hue,1,1));\n            break;\n        }\n    }\n    \n\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}