{"ver":"0.1","info":{"id":"Ds2cRW","date":"1687469944","viewed":66,"name":"Perl","username":"Oxys","description":"Perlin noise on repetitive pattern","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["perlin","cos","bnw"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//\tClassic Perlin 2D Noise\n//\tby Stefan Gustavson\n//\nvec2 fade(vec2 t){return t*t*t*(t*(t*6.-15.)+10.);}\n\nvec4 permute(vec4 x,float seed){\n    return mod(((x*34.)+1.+seed)*x,289.);\n}\n\nfloat cnoise(vec2 P,float seed){\n    vec4 Pi=floor(P.xyxy)+vec4(0.,0.,1.,1.);\n    vec4 Pf=fract(P.xyxy)-vec4(0.,0.,1.,1.);\n    Pi=mod(Pi,289.);// To avoid truncation effects in permutation\n    vec4 ix=Pi.xzxz;\n    vec4 iy=Pi.yyww;\n    vec4 fx=Pf.xzxz;\n    vec4 fy=Pf.yyww;\n    vec4 i=permute(permute(ix,seed)+iy,seed);\n    vec4 gx=2.*fract(i*.0243902439)-1.;// 1/41 = 0.024...\n    vec4 gy=abs(gx)-.5;\n    vec4 tx=floor(gx+.5);\n    gx=gx-tx;\n    vec2 g00=vec2(gx.x,gy.x);\n    vec2 g10=vec2(gx.y,gy.y);\n    vec2 g01=vec2(gx.z,gy.z);\n    vec2 g11=vec2(gx.w,gy.w);\n    vec4 norm=1.79284291400159-.85373472095314*\n    vec4(dot(g00,g00),dot(g01,g01),dot(g10,g10),dot(g11,g11));\n    g00*=norm.x;\n    g01*=norm.y;\n    g10*=norm.z;\n    g11*=norm.w;\n    float n00=dot(g00,vec2(fx.x,fy.x));\n    float n10=dot(g10,vec2(fx.y,fy.y));\n    float n01=dot(g01,vec2(fx.z,fy.z));\n    float n11=dot(g11,vec2(fx.w,fy.w));\n    vec2 fade_xy=fade(Pf.xy);\n    vec2 n_x=mix(vec2(n00,n01),vec2(n10,n11),fade_xy.x);\n    float n_xy=mix(n_x.x,n_x.y,fade_xy.y);\n    return 2.3*n_xy;\n}\n\nfloat cdistance(vec2 a,vec2 b){\n    return sqrt(pow(a.x-b.x,2.)+pow(a.y-b.y,2.));\n}\n\nvec2 centerImage(vec2 uv){\n    if(iResolution.x<iResolution.y){\n        uv=(uv*2.-iResolution.xy)/iResolution.x;\n    }\n    else{\n        uv=(uv*2.-iResolution.xy)/iResolution.y;\n    }\n    return uv;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv=fragCoord.xy;\n    uv=2.5*centerImage(uv);\n    uv*=cnoise(uv,1.)+cnoise(uv+vec2(0.6*iTime),1.);\n    \n    float d=10.*cos(-0.1*iTime+10.*cdistance(uv,vec2(0.)));\n    d=smoothstep(.5,.6,d);\n    \n    fragColor=vec4(d,d,d,1.);\n}\n","name":"Image","description":"","type":"image"}]}