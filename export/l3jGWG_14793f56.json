{"ver":"0.1","info":{"id":"l3jGWG","date":"1708830164","viewed":74,"name":"raytracing with camera movement","username":"badatcode123","description":"LESGOOOO","likes":1,"published":1,"flags":48,"usePreview":0,"tags":["raytracer","cameramovement"],"hasliked":0,"parentid":"MXX3zS","parentname":"raytracer working lesgo"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"struct ray\n{\n  vec3 dir;\n  vec3 origin;\n  vec3 color;\n};\nstruct sphere\n{\n  vec3 pos;\n  float r;\n  vec3 col;\n};\nvoid ray_sphere(in vec3 ro,in vec3 rd,in vec3 ce,in float r,out float t,out bool hit)\n{\n  vec3 a = ro-ce;\n  float b = 2.0*dot(rd,a);\n  float c = dot(a,a)-r*r;\n  float discrim = b*b-4.0*c;\n  hit = discrim >=0.0;\n  if (hit)\n  {\n    t = -(b+b)-2.0*sqrt(c)/2.0;\n    hit = t>0.0;\n  }\n}\n\nvoid check_int(in vec3 ro,vec3 rd,out float t,bool hit)\n{\n  ray_sphere(ro,rd,vec3(0,0,0),25.0,t,hit);\n}\n\nvoid shoot_ray(in vec3 ro,in vec3 rd,in int bounces, out vec3 col)\n{\n   ray ray;\n   ray.dir = rd;\n   ray.origin = ro;\n   ray.color = vec3(1.0);\n   bool hit;\n   int i;\n   for (i=0;i < bounces;i++)\n   {\n      float int_dist = 500.0;\n      hit = false;\n      float t;\n      ray_sphere(ray.origin,ray.dir,vec3(0,0,0),25.0,t,hit);\n      col = vec3(float(hit));\n   }\n\n}\nvoid rotate(vec3 pos, vec3 dir, out vec3 outpos)\n{\n   outpos.z = pos.y*sin(dir.x)+pos.z*cos(dir.x);\n   outpos.x = pos.x*cos(dir.y)+outpos.z*sin(dir.y);\n   outpos.y = pos.y*cos(dir.x)-pos.z*sin(dir.x);\n   outpos.z = outpos.z*cos(dir.y)-pos.x*sin(dir.y);\n}\nvoid get_pixl_col(out vec3 col,vec2 coord,int bounces,vec2 cam_dir,vec3 cam_pos)\n{\n   vec3 outpos;\n   rotate(normalize(vec3(coord,350)),vec3(cam_dir,0),outpos);\n   shoot_ray(cam_pos,normalize(outpos),bounces,col);\n}\n\nvoid move_cam(out vec2 mouse_pos,out vec3 cam_pos)\n{\n   mouse_pos = texture(iChannel0,vec2(10.0,10.0)).xy;\n   cam_pos = texture(iChannel0, vec2(0.0, 0.0)).xyz;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int bounce = 1;\n    vec2 coord = fragCoord-(iResolution.xy/2.0);\n    vec3 col;\n    vec3 cam_pos = vec3(0,0,-100);\n    vec2 mouse_pos;\n    move_cam(mouse_pos,cam_pos);\n    get_pixl_col(col,coord,1,mouse_pos,cam_pos);\n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define W 87\n#define S 83\n#define A 65\n#define D 68\nvec3 col;\n\nfloat key(in int keynum)\n{\n   return float(texelFetch(iChannel0,ivec2(keynum,0),0).x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 cam_pos = texelFetch(iChannel1,ivec2(0,0),0).xyz;\n    if (iFrame <= 1)\n    {\n      if (fragCoord.x <= 1.0)\n      {\n        col = vec3(0.0,0.0,-100.0);\n      }\n      else\n      {\n        vec2 mouse_pos = vec2(0.0,0.0);\n        col = vec3(mouse_pos,0.0);\n      }\n    }\n    else\n    {\n      vec2 mouse_pos = (iMouse.yx-(iResolution.yx/2.0))/150.0;\n      mouse_pos.x *= -1.0;\n      if (fragCoord.x <= 1.0)\n      {      \n        cam_pos.x -= ((key(S)-key(W))*sin(mouse_pos.y)+(key(A)-key(D))*cos(mouse_pos.y))*15.0;\n        cam_pos.z += ((key(A)-key(D))*sin(mouse_pos.y)-(key(S)-key(W))*cos(mouse_pos.y))*15.0;\n        col = cam_pos;\n      }\n      else\n      {\n        col = vec3(mouse_pos,0.0);\n      }\n     }\n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}