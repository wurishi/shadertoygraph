{"ver":"0.1","info":{"id":"tll3WB","date":"1557557439","viewed":213,"name":"glassball","username":"MonterMan","description":"Some light transmission experiment","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["raymarch","glass"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","previewfilepath":"/media/ap/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define GLASS_IOR 1.5\n#define AIR_IOR 1.0\n#define FOV 45.0\n\nfloat fresnel(in float R0, in float cos_theta)\n{\n    return R0 + (1.0 - R0)*pow(1.0 - max(0.0, cos_theta), 5.0);\n}\n\nfloat map(in vec3 p)\n{\n    return length(p) - 1.0;\n}\n\nvec3 map_n(in vec3 p)\n{\n    vec2 e = vec2(0, 0.001);\n    return normalize(vec3(map(p + e.yxx), map(p + e.xyx), map(p + e.xxy)) - map(p));\n}\n\nvec3 rayIntersect(in vec3 ro, in vec3 rd, bool inside, out bool hit_out)\n{\n    float t = 0.001;\n    for (int i = 0; i < 256; ++i)\n    {\n        if (t > 20.0) break;\n        \n        float d = inside? -map(ro + t*rd): map(ro + t*rd);\n        if (d < 0.001)\n        {\n            hit_out = true;\n            return ro + t*rd;\n        }\n        t += d;\n    }\n    \n    hit_out = false;\n    return vec3(0);\n}\n\nvec3 rayTrace(in vec3 ro, in vec3 rd)\n{\n    bool hit = false;\n    vec3 hitp = rayIntersect(ro, rd, false, hit);\n    if (hit)\n    {\n        vec3 normal = map_n(hitp);\n        vec3 view = normalize(ro - hitp);\n        \n        // fresnel\n        float R0 = (AIR_IOR - GLASS_IOR)/(GLASS_IOR + AIR_IOR);\n        R0 = R0*R0;\n        float reflection_F = fresnel(R0, dot(normal, view));\n        \n        // reflection\n        vec3 reflection = texture(iChannel0, reflect(rd, normal)).rgb;\n        \n        // interior ray trace\n        vec3 interior_ro = hitp - 0.01*normal;\n        vec3 interior_rd = refract(rd, normal, AIR_IOR/GLASS_IOR);\n        float refraction_F = fresnel(R0, dot(-normal, interior_rd));\n        vec3 interior_hitp = rayIntersect(interior_ro, interior_rd, true, hit);\n      \t\n        // refraction\n        vec3 interior_normal = map_n(interior_hitp);\n        vec3 outgoing_rd = refract(interior_rd, -interior_normal, GLASS_IOR/AIR_IOR);\n        vec3 refraction = texture(iChannel0, outgoing_rd).rgb;\n        \n        // initial fresnel\n        float F2 = fresnel(R0, dot(interior_normal, outgoing_rd));\n        \n        return reflection_F*reflection + (1.0 - F2)*(1.0 - refraction_F)*refraction;\n    }\n    else\n    {\n        return texture(iChannel0, rd).rgb;\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = 2.0 * uv - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    float t = 0.3*iTime;\n\tvec3 ro = 3.2*vec3(sin(t), 0.0, cos(t));\n    vec3 at = vec3(0);\n    vec3 cam_z = normalize(at - ro);\n    vec3 cam_x = normalize(cross(vec3(0, 1, 0), cam_z));\n    vec3 cam_y = cross(cam_z, cam_x);\n    float cam_zdist = 1.0 / tan(radians(0.5*FOV));\n    vec3 rd = normalize(cam_x * uv.x + cam_y * uv.y + cam_zdist * cam_z);\n    \n    vec3 col = rayTrace(ro, rd);\n    col = pow(col, vec3(1.0/2.2));\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}