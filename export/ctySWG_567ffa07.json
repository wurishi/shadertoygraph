{"ver":"0.1","info":{"id":"ctySWG","date":"1686318032","viewed":55,"name":"Neat Oscillating Pattern","username":"Torchlink","description":"Just a little test","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["beginner","pattern","oscillating"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 palette( in float t )\n{\n    vec3 a = vec3(0.498, 0.828, 0.448);\n    vec3 b = vec3(0.828, 0.208, 0.198);\n    vec3 c = vec3(0.188, 0.668, 0.667);\n    vec3 d = vec3(1.148, 0.428, -0.512);\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat sdHexagon( in vec2 p, in float r )\n{\n    const vec3 k = vec3(-0.866025404,0.5,0.577350269);\n    p = abs(p);\n    p -= 2.0*min(dot(k.xy,p),0.0)*k.xy;\n    p -= vec2(clamp(p.x, -k.z*r, k.z*r), r);\n    return length(p)*sign(p.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.0);\n    \n    for(float i = 0.0; i < 2.0; i++) {\n        uv = fract(uv * 1.4565) - 0.5;\n\n        float d = sdHexagon(uv, 1.1) * exp(-length(uv0 * 1.1) * sin(iTime)*0.4);\n\n        vec3 col = palette(length(uv0) + i*0.356 + iTime*.1);\n\n        d = sin(d*8. + -iTime*1.1 + iTime *2.)/8.;\n        d = abs(d);\n\n        d = pow(0.012 / d, 1.6);\n\n        finalColor += col * d;\n    }\n\n    fragColor = vec4(finalColor,1.0);\n}","name":"Image","description":"","type":"image"}]}