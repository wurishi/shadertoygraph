{"ver":"0.1","info":{"id":"ldy3Wz","date":"1453982294","viewed":525,"name":"pixelate-graphicstlv","username":"benraziel","description":"pixelate a video using a post-process shader","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["workshop"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// License: Public Domain\n\nvec3 sampleVideo(vec2 uv)\n{\n    return texture(iChannel0, uv).rgb;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t// set the block size on the x and y axes\t\n    vec2 BLOCK_SIZE = vec2(10.0, 10.0) / iResolution.xy;\n    \n    // calculate uv space coordinates (between 0.0 .. 1.0)\n    vec2 uvOriginal = fragCoord.xy / iResolution.xy;\n\t\n    // \"pixelate\" the uv coordinates, by performing a floor() function.\n    // this makes all the pixels in the block sample their color from the same positiokn\n    vec2 uvPixels = vec2(0.0, 0.0);\n    uvPixels.x = floor(uvOriginal.x / BLOCK_SIZE.x) * BLOCK_SIZE.x;\n    uvPixels.y = floor(uvOriginal.y / BLOCK_SIZE.y) * BLOCK_SIZE.y;\n    \n    vec2 uvToSample = vec2(0.0, 0.0);\n    \n    // right side of the screen - display a pixelated version\n    if (uvOriginal.x > 0.5) {\n    \tuvToSample = uvPixels;\t\t    \n    }\n    else { // left side of the screen - display pixelate version\n     \tuvToSample = uvOriginal;   \n    }\n    \n    vec3 videoColor = sampleVideo(uvToSample); \n    \n    fragColor = vec4(videoColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}