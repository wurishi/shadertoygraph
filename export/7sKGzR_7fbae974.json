{"ver":"0.1","info":{"id":"7sKGzR","date":"1630993592","viewed":210,"name":"polarSmoothFold2","username":"gaz","description":"fold","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["fold"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI acos(-1.0)\n#define TAU PI*2.0\n\nfloat TEST;\n\nvec3 COLOR()\n{\n  return mix(vec3(0,1,0),vec3(0,0,1),TEST*.5+.5);\n}\n\nvec2 polarMod(vec2 p, float n)\n{\n    float a = mod(atan(p.y,p.x),TAU/n)-PI/n;\n    TEST=a;\n    return vec2(sin(a),cos(a))*length(p);\n}\n\n// The idea of using a triangle wave was inspired by this\n// https://www.shadertoy.com/view/NdS3Dh\nvec2 polarFold(vec2 p,float n)\n{\n  n*=0.5;\n  float a = asin(sin(atan(p.x,p.y)*n))/n;\n  TEST=a;\n  return vec2(sin(a),cos(a))*length(p);\n}\n\nvec2 polarSmoothFold(vec2 p, float n, float k)\n{\n  n*=0.5;\n  float a = asin(sin(atan(p.x,p.y)*n)/(k+1.0))/n;\n  TEST=a;\n  return vec2(sin(a),cos(a))*length(p);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor=vec4(0);\n    vec2 p=(fragCoord.xy*2.-iResolution.xy)/iResolution.y;\n    p*=5.;\n    \n    vec2 q=p;\n    q=polarSmoothFold(q,6.,0.02);\n    q.y-=3.;\n    fragColor.xyz+=smoothstep(.1,.0, abs(q.y)-.3)*COLOR();  \n\n    q=p;\n    q=polarFold(q,6.);\n    q.y-=2.;\n    fragColor.xyz+=smoothstep(.1,.0, abs(q.y)-.3)*COLOR();  \n    \n    q=p;\n    q=polarMod(q,6.);\n    q.y-=1.;\n    fragColor.xyz+=smoothstep(.1,.0, abs(q.y)-.3)*COLOR();\n    \n    // triangle wave\n    q=p;\n    q.y-= 2.5;\n    q.y -= asin(sin(q.x+iTime*3.));\n    fragColor.xyz+=smoothstep(.1,.0, abs(q.y));\n\n    // smooth triangle wave\n    // I learned from TaterGFX on Twitter\n    // https://twitter.com/TaterGFX/status/1435091474207621125\n    q=p;\n    q.y-= -2.5;\n    float k=0.02;\n    q.y -= asin(sin(q.x+iTime*3.)/(k+1.0));\n    fragColor.xyz+=smoothstep(.1,.0, abs(q.y));\n\n}","name":"Image","description":"","type":"image"}]}