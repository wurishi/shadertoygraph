{"ver":"0.1","info":{"id":"XfdcR7","date":"1730409775","viewed":73,"name":"Random Dot Spawner v0","username":"8InfinityTaco8","description":"This spawns random dots within a bounding box. gonna make a fork of this to spawn dots or objects within a signed distance function to allow for different shapes and contours. ","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["noise","random","particles","hash","bound"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float random(vec2 st) {\n    return fract(sin(dot(st.xy, vec2(12.9898,78.233))) * 43758.5453123);\n}\n\n#define DOT_SPACING 30.0   // Increase for more space between dots\n#define DOT_SIZE 0.3       // Dot radius (0.0 to 1.0)\n#define SPAWN_WIDTH 0.5    // Width of spawn area (0.0 to 1.0)\n#define SPAWN_HEIGHT 0.3   // Height of spawn area (0.0 to 1.0)\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Improved centering and scaling\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    \n    // Calculate the grid size in UV space\n    float gridSize = 1.0 / DOT_SPACING;\n    \n    // Calculate spawn area boundaries in grid space\n    vec2 spawnMin = vec2(-SPAWN_WIDTH, -SPAWN_HEIGHT);\n    vec2 spawnMax = vec2(SPAWN_WIDTH, SPAWN_HEIGHT);\n    \n    // Get cell center position\n    vec2 cell = floor(uv * DOT_SPACING);\n    vec2 cell_center = (cell + 0.5) / DOT_SPACING;\n    \n    //spawn point validation using step\n    vec2 d = step(abs(cell_center), spawnMax);\n    bool validSpawnPoint = d.x > 0.0 && d.y > 0.0;\n    \n    // Calculate distance from current pixel to cell center\n    float dist = length(uv - cell_center);\n    \n    // Generate random value for this cell\n    float rnd = random(cell);\n    \n    // Only draw dot if random value is above threshold and cell is valid\n    float dot_visible = (rnd > 0.5 && validSpawnPoint) ? 1.0 : 0.0;\n    \n    // Anti-aliasing using smoothstep\n    // Blur is set to pixel width for smooth edges\n    float dot = dot_visible * smoothstep(\n        1.5/iResolution.y,  // Blur amount (pixel width)\n        0.0, \n        dist - DOT_SIZE / DOT_SPACING\n    );\n    \n    fragColor = vec4(vec3(dot), 1.0);\n}","name":"Image","description":"","type":"image"}]}