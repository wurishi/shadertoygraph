{"ver":"0.1","info":{"id":"NtcGRS","date":"1636214022","viewed":60,"name":"Geometric Disc (Circle)","username":"devkkv","description":"Geometric disc (circle) shader based on this tutorial by The Cherno:\nhttps://www.youtube.com/watch?v=xf7Y988cPRk","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["learning"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n* Geometric disc (circle) shader based on this tutorial by The Cherno:\n* https://www.youtube.com/watch?v=xf7Y988cPRk\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Input\n    vec4 color = vec4(1.0, 0.5, 0.5, 1.0);\n    float fill = 1.f;\n    \n    // Change fill over time\n    // fill = (sin(iTime) + 1.0) * 0.5;\n    \n    // blend defines the distance of the edge color lerp\n    // used to avoid jittering on the edge\n    float blend = 3.0 / iResolution.x;\n\n    // Normalize coordinates\n    vec2 uv = fragCoord / iResolution.xy;\n    uv -= vec2(0.5f);\n    float aspectRatio = iResolution.x / iResolution.y;\n    uv.x *= aspectRatio;\n    \n    // Calculate distance do disc center\n    // Center of the image -> 1.0\n    // Center of the disc -> 0.0\n    // Outer Edge of the disc -> fill * 0.5 + blend\n    float distance = length(uv);\n    float distanceToEdge = (distance - 0.5) * 2.0;\n    float distanceToDiscCenter = abs(distanceToEdge + blend + fill * 0.5);\n    \n    // Interpolate color between 0.0 and 1.0 based on distance, fill and blend values\n    float colorFactor = 1.0 - clamp((distanceToDiscCenter - fill * 0.5) / blend, 0.0, 1.0);\n    \n    fragColor = color * colorFactor;\n}","name":"Image","description":"","type":"image"}]}