{"ver":"0.1","info":{"id":"43SXD1","date":"1710508803","viewed":102,"name":"Clock, Real Time","username":"nisoniso","description":"clock","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["clock"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvec2 rotate(vec2 v, float a) {\n    a = radians(a);\n    float s = sin(a);\n    float c = cos(a);\n    return vec2(v.x * c - v.y * s, v.x * s + v.y * c);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    // Normalized pixel coordinates\n    vec2 uv = fragCoord/iResolution.xy;\n     uv = (uv - 0.5) * vec2(iResolution.x / iResolution.y, 1.0);\n\n    // get time\n    float mils = fract(iDate.w);\n    float secs = mod( floor(iDate.w),        60.0 );\n    float mins = mod( floor(iDate.w/60.0),   60.0 );\n    float hours = mod( floor(iDate.w/3600.0), 24.0 );\n\n    float r = length( uv ); // distance from the center\n\t  float a = atan( uv.y, uv.x )+3.1415926; // angle from the center\n    vec3 col = vec3(0.5, 0.5, 0.5) + 0.5 * ( 1. - r); // background color and the gradient\n\n    // The background of the clock\n    if(r < 0.4) {\n      float angle = a * 10.0;\n      float d = 0.5 * r;\n      float x = d * cos(angle);\n      float y = d * sin(angle);\n      float spiral = 0.5 + 0.5 * cos( 10.0 * atan( y, x ) );\n      col = mix( col, vec3(0.3, 0.3, 0.5), 0.5 * (1.0 - spiral) );\n    }\n\n    // Minutes and minutes shadow\n    vec2 uv_minutes = uv;\n    vec2 uv_minutes_shadow = uv_minutes;\n    float angle =  mins * 90.0 / 15.0 - 90.;\n    uv_minutes = rotate(uv_minutes, angle);\n    uv_minutes_shadow = rotate(uv_minutes_shadow, angle + 1.5);\n    if (abs( uv_minutes.y ) < 0.005\n      && uv_minutes.x > 0.0 && uv_minutes.x < 0.3) col = vec3(0, 0, 0);\n    if(abs( uv_minutes_shadow.y ) < 0.005\n      && uv_minutes_shadow.x > 0. && uv_minutes_shadow.x < 0.3) {\n        col *= vec3(0.5); \n    }\n\n    // Hours and hours shadow\n    vec2 uv_hours = uv;\n    vec2 uv_hours_shadow = uv_hours;\n    angle =  hours * 90.0 / 3.0 - 90.;\n    uv_hours = rotate(uv_hours, angle);\n    uv_hours_shadow = rotate(uv_hours_shadow, angle + 1.5);\n    if (abs( uv_hours.y ) < 0.005\n      && uv_hours.x > 0.0 && uv_hours.x < 0.25) {\n        col = vec3(0);\n      }\n    if(abs( uv_hours_shadow.y ) < 0.005\n      && uv_hours_shadow.x > 0. && uv_hours_shadow.x < 0.25) {\n        col *= vec3(0.5); \n    }\n\n  \n    // Seconds and seconds shadow\n    vec2 uv_seconds = uv;\n    vec2 uv_seconds_shadow = uv_seconds;\n    secs = secs + mils;\n    angle =  secs * 90.0 / 15.0 - 90.0;\n    uv_seconds = rotate(uv_seconds, angle);\n    uv_seconds_shadow = rotate(uv_seconds_shadow, angle + 1.5);\n\n    if (abs( uv_seconds.y ) < 0.005\n      && uv_seconds.x > 0.0 && uv_seconds.x < 0.35) {\n        col = vec3(0.7, 0.0, 0.0);\n    }\n    if(abs( uv_seconds_shadow.y ) < 0.005\n      && uv_seconds_shadow.x > 0. && uv_seconds_shadow.x < 0.35) {\n        col *= vec3(0.75); \n    }\n\n\n    \n    // the 15 minutes marks\n    for (int i = 0; i < 4; i++) {\n      float angle = float(i) * 3.1415926 / 2.0;\n      vec2 p = vec2( cos(angle), sin(angle) );\n      float d = abs( dot( p, uv ) );\n      if (d < 0.003 && r > 0.41 && r < 0.45) col = vec3(0.0, 0.0, 0.0);\n    }\n\n    // the 5 minutes marks\n    for (int i = 0; i < 12; i++) {\n      float angle = float(i) * 3.1415926 / 6.0;\n      vec2 p = vec2( cos(angle), sin(angle) );\n      float d = abs( dot( p, uv ) );\n      if (d < 0.002 && r > 0.43 && r < 0.45) col = vec3(0.0, 0.0, 0.0);\n    }\n\n    // the minutes marks\n    for (int i = 0; i < 60; i++) {\n      float angle = float(i) * 3.1415926 / 30.0;\n      vec2 p = vec2( cos(angle), sin(angle) );\n      float d = abs( dot( p, uv ) );\n      if (d < 0.001 && r > 0.44 && r < 0.45) col = vec3(0.0, 0.0, 0.0);\n    }\n\n\n    // To make whole baclground darker\n    col *= 1.0 - 0.7 * r;\n\n    // The center of the clock\n    if( r < 0.015 ) col = vec3(0.0, 0.0, 0.0);\n    if( r < 0.01 ) col = vec3(1.0, 1.0, 1.0);\n    if( r < 0.01 ) col = vec3(0.5 + 0.5 * cos( 10.0 * a ), 0.5 + 0.5 * cos( 10.0 * a + 3.1415926 / 2.0 ), 0.5 + 0.5 * cos( 10.0 * a + 3.1415926 ) );\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}