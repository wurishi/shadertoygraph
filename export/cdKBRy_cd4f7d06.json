{"ver":"0.1","info":{"id":"cdKBRy","date":"1698938320","viewed":29,"name":"Linear floating circles","username":"BAKON","description":"@teraxtech","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["circles"],"hasliked":0,"parentid":"DdVfzG","parentname":"Floating circles"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n//Circle\nfloat sdfCircle(vec2 uv, float r, vec2 offset) {\n    return length(uv-offset) - r;\n}\n\n//return <x,y> from polar coordinates\nvec2 polarCoord(float r, float theta){\n    return vec2(sin(theta)*r,cos(theta)*r);\n}\n\n//Main Function\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n  vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n  \n  const int AmountOfSpheres = 12;\n  \n  const float PI = 3.1415296;\n  \n  float col = 0.0;\n  \n  for(int i = 0; i< AmountOfSpheres; i++){\n      vec2 circlePosition = polarCoord(0.2+0.1*smoothstep(0.8,1.0,sin(iTime*8.0 + PI*float(2*i)/float(AmountOfSpheres))),iTime*0.0 + PI*float(2*i)/float(AmountOfSpheres));\n  \n      col+=smoothstep(0.0,0.01,-sdfCircle(uv,0.04,circlePosition))*(float(i/3)*0.3+0.1);\n  }\n  \n  fragColor = vec4(col, col, col*abs(sin(iTime)), 1.0);\n \n}\n","name":"Image","description":"","type":"image"}]}