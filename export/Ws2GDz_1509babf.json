{"ver":"0.1","info":{"id":"Ws2GDz","date":"1563405336","viewed":87,"name":"adgadgdag","username":"theepicsnail","description":"adgadgadg","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["adgadgadg"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define EPS .001\n#define STEPS 120\n#define FAR_CLIP 100.0\nvec2 cossin(float f){ return vec2(cos(f), sin(f)); }\nvec2 rotate(vec2 xy, float f) {\n    vec2 cs = cossin(f);\n    return mat2x2(cs.x, -cs.y, cs.y, cs.x) * xy;\n}\n\n\n\nstruct SDF_RESULT {\n    vec4 params;\n    float best_dist;\n    int id;\n} sdf_result;\n\nstruct CAST_RESULT {\n    vec3 ro;\n    vec3 rd;\n    vec3 end;\n    float total_dist;\n    bool hit;\n} cast_result;\n\nbool update(float dist) {\n    if(dist < sdf_result.best_dist) {\n        sdf_result.best_dist = dist;\n        return true;\n    }\n    return false;\n}\n\n\nfloat sdf(vec3 pos) {\n    sdf_result.best_dist = FAR_CLIP;\n    sdf_result.id = -1;\n    \n    \n    vec3 center = vec3(cossin(iTime)*.2,.5);\n    if(update(length(pos-center) - .1)) {\n        sdf_result.id = 1;\n        sdf_result.params.xyz = center - pos; \n    }\n    \n    \n    \n    vec3 p = pos - vec3(0,-1,2);\n    float r = length(p.xy)-2.0;\n  \tvec2 q = vec2(r,p.z);\n    if(update(length(q)-.1)) {\n        sdf_result.id = 2;\n        sdf_result.params.x = atan(p.y, p.x)/6.28318;\n        sdf_result.params.y = atan(q.y, q.x)/6.28318;\n        sdf_result.params.z = 0.0;\n        sdf_result.params.w = 0.0;\n    }\n    \n    \n    \n    if(update(1.0+pos.y)) {\n        sdf_result.id = 0;\n        sdf_result.params.xyz=pos.xyz;\n    }\n    \n    \n    return sdf_result.best_dist;\n}\nvec2 eps = vec2(EPS, 0);\nvec3 sdf_normal(vec3 pos) {\n    return normalize(vec3(\n        sdf(pos - eps.xyy)-sdf(pos + eps.xyy),\n        sdf(pos - eps.yxy)-sdf(pos + eps.yxy),\n        sdf(pos - eps.yyx)-sdf(pos + eps.yyx)));\n}\n\n\nvec3 color() {\n    switch(sdf_result.id) {\n        case 0: return texture(iChannel1, sdf_result.params.xz * vec2(.5, 0.50)).xyz;\n        case 1: return vec3(0,0,0) + fract(sdf_result.params.xzy);\n        case 2: return texture(iChannel0, sdf_result.params.xy * vec2(3.14, 0.50)).xyz;\n        case 3: return vec3(0,1,1);\n    }\n    return vec3(1,1,1);\n}\n\nvec3 lighting() {\n    // if(cast_result.hit) return vec3(1); return vec3(0);\n    \n    \n    \n    float f = cast_result.total_dist/FAR_CLIP;\n    vec3 n = sdf_normal(cast_result.end);\n    return vec3(1.0-sqrt(f)) * dot(cast_result.rd, n);\n}\n\nvoid cast_ray(vec3 ro, vec3 rd) {\n    \n    cast_result.ro = ro;\n    cast_result.rd = rd;\n    cast_result.hit = false;\n    \n    vec3 pos = ro;\n    float total_dist = 0.0;\n    for(int i = 0 ; i < STEPS ; i ++) {\n        float dist = sdf(pos);\n        if(dist < eps.x) {\n            cast_result.hit = true;\n        \tbreak;\n        }\n        \n        total_dist += dist;\n        pos += dist * rd;\n        \n        if(total_dist > FAR_CLIP) {\n            total_dist = FAR_CLIP;\n            break;\n        }\n    }   \n    \n    cast_result.total_dist = total_dist;\n    cast_result.end = pos;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord*2.0-iResolution.xy)/iResolution.y;\n    vec2 mouse = (iMouse.xy*2.0-iResolution.xy)/iResolution.y;\n \t\n    vec3 ro = vec3(0, 0, -.5);\n    vec3 rd = normalize(vec3(uv, 1.8));\n    rd.yz = rotate(rd.yz, mouse.y);\n    rd.xz = rotate(rd.xz, mouse.x);\n    \n    cast_ray(ro, rd);\n    \n    \n    fragColor.rgb = color() * lighting();\n    \n    \n}","name":"Image","description":"","type":"image"}]}