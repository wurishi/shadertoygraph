{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"cubemap","id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"code":"// srtuss, 2013\n// My very first raymarching experience! :)\n// Big thanks to IQ for his awesome articles!\n\n\nvec2 rotate(vec2 k,float t)\n{\n\treturn vec2(cos(t) * k.x - sin(t) * k.y, sin(t) * k.x + cos(t) * k.y);\n}\n\nfloat hexagon(vec3 p, vec2 h)\n{\n    vec3 q = abs(p);\n    return max(q.z - h.y, max(q.x + q.y * 0.57735, q.y * 1.1547) - h.x);\n}\n\nfloat scene(vec3 pi)\n{\n\t// twist the wires\n\tfloat a = sin(pi.z * 0.3) * 2.0;\n\tvec3 pr = vec3(rotate(pi.xy, a), pi.z);\n\t\n\t// move individual wires\n\tvec3 id = floor(pr);\n\tpr.z += sin(id.x * 10.0 + id.y * 20.0) * iTime * 2.0;\n\t\n\t// calculate distance\n\tvec3 p = fract(pr);\n\tp -= 0.5;\n\t\n\t// this makes hollow wires\n\t//return max(hexagon(p, vec2(0.3, slices)), -hexagon(p, vec2(0.2, slices + 0.05)));\n    float slices = cos(iTime * 0.8) * 0.3 + 0.4;\n\t\n\treturn hexagon(p, vec2(0.3, slices));\n}\n\nvec3 norm(vec3 p)\n{\n\t// the normal is simply the gradient of the volume\n\tvec4 dim = vec4(1, 1, 1, 0) * 0.01;\n\tvec3 n;\n\tn.x = scene(p - dim.xww) - scene(p + dim.xww);\n\tn.y = scene(p - dim.wyw) - scene(p + dim.wyw);\n\tn.z = scene(p - dim.wwz) - scene(p + dim.wwz);\n\treturn normalize(n);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 pos = fragCoord.xy / iResolution.xy;\n\tvec2 p = -1.0 + 2.0 * pos;\n\tvec3 dir = normalize(vec3(p * vec2(1.77, 1.0), 1.0));\n\t\n\t// camera\n\tdir.zx = rotate(dir.zx, sin(iTime * 0.5) * 0.4);\n\tdir.xy = rotate(dir.xy, iTime * 0.2);\n\tvec3 ray = vec3(0.0, 0.0, 0.0 - iTime * 0.9);\n\t\n\t// raymarching\n\tfloat t = 0.0;\n\tfor(int i = 0; i < 90; i ++)\n\t{\n\t\tfloat k = scene(ray + dir * t);\n\t\tt += k * 0.75;\n\t}\n\tvec3 hit = ray + dir * t;\n\t\n\t// fog\n\tfloat fogFact = clamp(exp(-distance(ray, hit) * 0.3), 0.0, 1.0);\n\t\n\tif(fogFact < 0.05)\n\t{\n\t\tfragColor = vec4(0.0, 0.0, 0.0, 1.0);\n\t\treturn;\n\t}\n\t\n\t// diffuse & specular light\n\tvec3 sun = normalize(vec3(0.1, 1.0, 0.2));\n\tvec3 n = norm(hit);\n\tvec3 ref = reflect(normalize(hit - ray), n);\n\tfloat diff = dot(n, sun);\n\tfloat spec = pow(max(dot(ref, sun), 0.0), 32.0);\n\tvec3 col = mix(vec3(0.0, 0.7, 0.9), vec3(0.0, 0.1, 0.2), diff);\n\t\n\t// enviroment map\n\tcol += texture(iChannel0, ref).xyz * 0.2;\n\tcol = fogFact * (col + spec);\n\t\n\t// iq's vignetting\n\tcol *= 0.1 + 0.8 * pow(16.0 * pos.x * pos.y * (1.0 - pos.x) * (1.0 - pos.y), 0.1);\n\t\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MdXGDr","date":"1367274176","viewed":1894,"name":"Data Transfer","username":"srtuss","description":"fun with GLSL","likes":58,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","ribbons","hexagon"],"hasliked":0,"parentid":"","parentname":""}}