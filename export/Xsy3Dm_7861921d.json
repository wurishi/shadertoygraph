{"ver":"0.1","info":{"id":"Xsy3Dm","date":"1454701776","viewed":5314,"name":"Ha'tak arrival","username":"pmjo","description":"My first gpu generated scene using distance fields. Incomplete and quite slow since not optimized at all.","likes":28,"published":1,"flags":0,"usePreview":0,"tags":["distancefields","pyramids"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Initial camera settings\n\nvec3 cp = vec3(4.2, 2.8, 2.9); // Camera position\nvec3 ct = vec3(1.0, 0.8, 0.0); // Camera target\n\n#define ROTATE_CAMERA 1\n\n// Initial light settings\n\nvec4 ac = vec4(0.2, 0.2, 0.2, 1.0); // Ambient color\nvec4 lc = vec4(1.0, 0.88, 0.54, 1.0); // Light color\nvec3 lp = vec3(4.0, 1.5, -3.5); // Light position\n\n#define USE_LIGHT_RADIUS 1\n\nfloat lr = 12.0; // Light radius\n\n// Rendering settings\n\nconst int mx = 64; // Max steps\nconst float pr = 0.001; // Precision\nconst float np = 0.01; // View frustum near plane\nconst float fp = 16.0; // View frustum far plane\nvec3 sc = vec3(0.74, 0.90, 1.0); // Sky color\n\n// Helpers\n\nconst vec2 e = vec2(0.0, 0.008); // Swizzle helper for normal calculation\n\n// Distance functions\n\nvec2 u(vec2 a, vec2 b)\n{\n    return (a.x < b.x) ? a : b;\n}\n\nfloat dfb(vec3 p, vec3 s)\n{\n    vec3 d = abs(p) - s;\n    return min(max(d.x, max(d.y, d.z)), 0.0) + length(max(d, 0.0));\n}\n\nfloat dfs(vec3 p, float r)\n{\n    return length(p) - r;\n}\n\nvec3 rp(vec3 p, vec3 s)\n{\n    return mod(p, s) - 0.5 * s;\n}\n\nfloat dfd(vec3 p)\n{\n    float s1 = length(p - cp);\n    float s2 = length(p);\n    float m1 = 1.0 - clamp(s1 / 12.0, 0.0, 1.0);\n    float m2 = clamp(s2 / 8.0, 0.0, 2.0);\n\n    float a = sin(p.x * 0.5) * 0.25 + sin(p.z * 1.5) * 0.1;\n    float b = sin(p.z * 3.0 + p.x * 2.0) * 0.05;\n    float c = sin(p.z * 40.0 * p.y + p.x * 20.0 * p.y) * 0.004;\n    float d = sin(p.z * p.y * p.x * 80.0) * 0.005;\n\n    return p.y + (a * m2 + b * m2 + c * m1 + d * m1);\n}\n\nfloat dfp(vec3 p, float s)\n{\n    float a = dfb(p, vec3(s, 0.05 * s, s));\n    float b = dfb(p + vec3(0.0, -s, 0.0), vec3(s, s, s));\n\n    float ab = mix(a, b, 0.52); \n\n    return ab;\n}\n\nfloat dfp1(vec3 p) {\n    float a = dfp(p + vec3(-2.2, 0.5, 4.5), 1.5);\n    float b = step(abs(sin(p.y * 30.0)), 0.5) * 0.015;\n\n    return a + b;\n}\n\nfloat dfp2(vec3 p) {\n    float a = dfp(p + vec3(0.0, 0.3, 0.0), 2.0);\n    float b = step(abs(sin(p.y * 35.0)), 0.5) * 0.015;\n    float c = dfb(p - vec3(1.8, 0.03, 0.0), vec3(0.2, 0.1, 0.1));\n    float d = dfb(p - vec3(2.0, 0.02, 0.0), vec3(0.03, 0.08, 0.04));\n\n    a = min(a + b, max(-d, c));\n\n    return a;\n}\n\nfloat dfss(vec3 p, float s)\n{\n    float aa = dfb(p, vec3(s, 0.05 * s, s));\n    float bb = dfb(p + vec3(0.0, -s, 0.0), vec3(s, s, s));\n    float c = dfb(p + vec3(0.0, 0.18, 0.0), vec3(s * 1.1, 0.22 * s, s * 1.1));\n    float d = dfb(p + vec3(0.0, -0.25, 0.0), vec3(s * 0.915, 0.066 * s, s * 0.915));\n    float e = dfb(p + vec3(0.0, -1.78, 0.0), vec3(s * 0.22, 0.016 * s, s * 0.22));\n\n    float a = mix(aa, bb, 0.5);\n\n    float x = mod(p.x * 40.0, 2.0) * 0.002 + mod(p.z * 40.0, 2.0) * 0.002;\n    float x2 = mod(floor(p.x * 10.0), 2.0) * 0.005 + mod(floor(p.z * 10.0), 2.0) * 0.005;\n\n    a = max(-c, min(min(a + x, d + x2), e + x2));\n\n    float b = dfs(p, s * 0.8);\n\n    return max(-b, a);\n}\n\nvec2 df(vec3 p)\n{\n    vec2 a = vec2(dfd(p), 0.0);\n    vec2 b = vec2(min(dfp1(p), dfp1(p + vec3(8.0, 0.2, -6.0))), 1.0);\n    vec2 c = vec2(dfp2(p), 1.0);\n\n    float t0 = 0.08;\n    float t1 = -5.0;\n    float t = 1.0;\n\n    if(iTime < 10.0) {\n        t = sin(iTime * 0.15);   \n    }\n\n    vec2 d = vec2(dfss(p + vec3(0.0, mix(t1, t0, t), 0.0), 2.04), 2.0);\n\n    vec2 r = u(u(u(a, b), c), d);\n\n    return r;\n}\n\n// Rendering\n\nvec3 cn(vec3 p)\n{\n    return normalize(vec3(df(p + e.yxx).x - df(p - e.yxx).x, df(p + e.xyx).x - df(p - e.xyx).x, df(p + e.xxy).x - df(p - e.xxy).x));\n}\n\nfloat ss(vec3 ro, vec3 rd, float mint, float tmax) // thanks iq\n{\n    float res = 1.0;\n    float t = mint;\n\n    for(int i=0; i<16; i++)\n    {\n        float h = df(ro + rd * t).x;\n        res = min(res, 8.0 * h / t);\n        t += clamp(h, 0.02, 0.10);\n        \n        if(h < 0.001 || t > tmax)\n        {\n            break;\n        }\n    }\n\n    return clamp(res, 0.0, 1.0);\n}\n\nfloat ao(vec3 p, vec3 n)  // thanks iq\n{\n    float s = 0.01;\n    float t = s;\n    float oc = 0.0;\n\n    for(int i=0; i<9; i++)\n    {\n        float d = df(p + n * t).x;\n        oc += t - d;\n        t += s;\n    }\n\n    return clamp(oc, 0.0, 1.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    #if ROTATE_CAMERA\n    float s = 0.02;\n    float l = length(ct.xz - cp.xz) + 0.5;\n    cp.x = sin(iTime * s + 1.0) * l;\n    cp.z = cos(iTime * s + 1.0) * l;\n    #endif\n\n    vec3 wu = vec3(0.0, 1.0, 0.0);\n    vec3 cd = normalize(ct - cp);\n    vec3 cr = normalize(cross(wu, cd));\n    vec3 cu = normalize(cross(cd, cr));\n\n    vec2 uv = gl_FragCoord.xy * 2.0 / iResolution.xy - 1.0;\n    uv.y *= iResolution.y / iResolution.x;\n\n    vec4 bc = vec4(mix(vec3(1.0), sc, gl_FragCoord.y / iResolution.y * 0.5), 1.0);\n    vec4 c = bc;\n    vec3 rd = normalize(cd + cr * uv.x + cu * uv.y);\n    float t = np;\n    bool h = false;\n    vec3 p;\n    vec2 d;\n\n    for(int i=0; i<mx; i++)\n    {\n        p = cp + rd * t;\n        d = df(p);\n\n        if((d.x < pr) || (i == (mx - 1)))\n        {\n            h = true;\n\n            break;\n        }\n        else\n        {\n            t += d.x;\n\n            if(t > fp)\n            {\n                break;\n            }\n        }\n    }\n    \n    if(h)\n    {\n\t\tvec3 ld = lp - p;\n\n        vec3 n = cn(p);\n\n        float dl = max(0.0, dot(n, normalize(ld)));\n\n        vec4 mc = vec4(0.5, 0.5, 0.5, 1.0);\n        float s = 0.0;\n\n        if(d.y == 1.0)\n        {\n            mc = vec4(0.82, 0.66, 0.34, 1.0);\n        }\n        else if(d.y == 2.0)\n        {\n            s = pow(dl, 32.0); \n\n            mc = vec4(0.6, 0.6, 0.6, 1.0);   \n        }\n        else {\n            mc = vec4(0.82, 0.66, 0.34, 1.0);\n        }\n\n        #if USE_LIGHT_RADIUS\n        vec3 r = ld / lr;\n        float a = max(0.0, 1.0 - dot(r, r));\n        c = mc * (ac + lc * (dl + s) * a);\n        #else\n        c = mc * (ac + lc * (dl + s));\n        #endif\n\n        c *= ss(p, lp, 0.02, 2.5);\n        c -= ao(p, n) * 0.4;\n\n        c = mix(c, bc, 1.0 - exp(-0.01 * t * t));   \n    }\n\n    fragColor = c;\n}","name":"Image","description":"","type":"image"}]}