{"ver":"0.1","info":{"id":"mtt3DS","date":"1683121845","viewed":80,"name":"pink slime layers","username":"jakecariello","description":"mmm","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["parallax","metaball","pink","slime","layer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n//uniform vec2 iResolution;\n//uniform float iTime;\n//uniform vec2 iMouse;\n\n\n#define PI 3.141592653589793\n#define S(a, b, x) smoothstep(a, b, x)\n#define ZOOM 5.\n#define Vi 2.0 // potential (v) at which color gradients start\n#define Vf 1.9 // potential (v) at which color gradients end\n#define POW 1. // potential decay\n#define V_FACTOR 2.3 // potential multiplier\n#define NOISE_TIME_FACTOR 0.09\n#define NOISE_XY_FACTOR .7\n#define NOISE_MAG 1.8\n#define LAYER_COUNT 10.\n#define T_SCALE .04\n\n\nconst vec2 offsetPosition = vec2(0);\nconst vec3 backgroundColor = vec3(1);\nconst bool noiseFade = false;\n\n\nstruct MBAnimationParams {\n    float radius;\n    float rate;\n    vec2 phase;\n};\nconst int MB_COUNT = 4;\nconst MBAnimationParams MBs[MB_COUNT] = MBAnimationParams[](\n    MBAnimationParams(1.2, 1./3., vec2(5., 1.5)),\n    MBAnimationParams(1.4, 1.3/3., vec2(3., 4.5)),\n    MBAnimationParams(1.6, 1.5/3., vec2(4., 6.)),\n    MBAnimationParams(1.8, 1.7/3., vec2(2., 9.))\n);\n\nvec4 v4(float val) {\n    return vec4(val, val, val, val);\n}\n\nvec3 v3(float val) {\n    return vec3(val, val, val);\n}\n\nfloat rand21(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvec2 rand12(float n) {\n    return vec2(\n        rand21(vec2(n, pow(n, 0.))),\n        rand21(vec2(n, pow(n, 1.)))\n    );\n}\n\n\n// Classic Perlin 3D Noise \n// by Stefan Gustavson\n//\nvec4 permute(vec4 x) {\n    return mod(((x*34.)+1.)*x, 289.);\n}\n\nvec4 taylorInvSqrt(vec4 r) {\n    return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec3 fade(vec3 t) {\n    return t*t*t*(t*(t*6.-15.)+10.);\n}\n\nfloat cnoise(vec3 P) {\n    vec3 Pi0 = floor(P); // Integer part for indexing\n    vec3 Pi1 = Pi0 + vec3(1.); // Integer part + 1\n    Pi0 = mod(Pi0, 289.);\n    Pi1 = mod(Pi1, 289.);\n    vec3 Pf0 = fract(P); // Fractional part for interpolation\n    vec3 Pf1 = Pf0 - vec3(1.); // Fractional part - 1.\n    vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n    vec4 iy = vec4(Pi0.yy, Pi1.yy);\n    vec4 iz0 = Pi0.zzzz;\n    vec4 iz1 = Pi1.zzzz;\n\n    vec4 ixy = permute(permute(ix) + iy);\n    vec4 ixy0 = permute(ixy + iz0);\n    vec4 ixy1 = permute(ixy + iz1);\n\n    vec4 gx0 = ixy0 / 7.;\n    vec4 gy0 = fract(floor(gx0) / 7.) - 0.5;\n    gx0 = fract(gx0);\n    vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n    vec4 sz0 = step(gz0, vec4(0.));\n    gx0 -= sz0 * (step(0., gx0) - 0.5);\n    gy0 -= sz0 * (step(0., gy0) - 0.5);\n\n    vec4 gx1 = ixy1 / 7.;\n    vec4 gy1 = fract(floor(gx1) / 7.) - 0.5;\n    gx1 = fract(gx1);\n    vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n    vec4 sz1 = step(gz1, vec4(0.));\n    gx1 -= sz1 * (step(0., gx1) - 0.5);\n    gy1 -= sz1 * (step(0., gy1) - 0.5);\n\n    vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n    vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n    vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n    vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n    vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n    vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n    vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n    vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n    vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n    g000 *= norm0.x;\n    g010 *= norm0.y;\n    g100 *= norm0.z;\n    g110 *= norm0.w;\n    vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n    g001 *= norm1.x;\n    g011 *= norm1.y;\n    g101 *= norm1.z;\n    g111 *= norm1.w;\n\n    float n000 = dot(g000, Pf0);\n    float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n    float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n    float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n    float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n    float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n    float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n    float n111 = dot(g111, Pf1);\n\n    vec3 fade_xyz = fade(Pf0);\n    vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n    vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n    float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); \n    return 2.2 * n_xyz;\n}\n\n// End of Perlin Noise Code\n\nvec4 slime(float time, vec2 uv, vec2 globalUV, vec2 mouseUV, vec4 inColor) {\n    float v = 0.;\t\n    for (int i = 0; i < MB_COUNT; i += 1) {\n        MBAnimationParams mb = MBs[i];\n        \n        // animation\n        vec2 c = mb.radius * sin( time*mb.rate + mb.phase);\n        \n        // potential\n        v += V_FACTOR / (float(MB_COUNT + 1) * pow(S(0., 1., length(uv - c)), POW));\n    }\n    \n    //v += V_FACTOR / (float(MB_COUNT + 1) * pow(S(0., 1., length(uv - uvMouse)), POW));\n    \n    v += cnoise(vec3(-mouseUV + uv * NOISE_XY_FACTOR, time * NOISE_TIME_FACTOR)) * NOISE_MAG;\n\n    if (noiseFade) {\n        float vFadeX = 1.; //S(.5, .3, abs(globalUV.x - .5)); //S(ZOOM, .9 * ZOOM, abs(uv.x));\n        float vFadeY = S(.5, .3, abs(globalUV.y - .5));\n        float vFade =  vFadeX * vFadeY;\n        v *= vFade;\n    }\n\n    vec4[] colors = vec4[](\n        vec4(.20, .97, 1., 1.), // 0: off-white\n        vec4(.8, 1., 1., 1.), // 1: blue\n        vec4(.8, .7, 1., 1.), // 2: purple\n        vec4(.2, .2, .6, 1.), // 3: dark blue\n\n        vec4(.72, .78, .74, 1.), // 4: light greenish gray\n        vec4(vec3(0), 1), // 5: black\n        vec4(.094, .211, .125, 1.), // 6: dark green\n        vec4(vec3(.6), 1.), // 7: gray\n        vec4(backgroundColor, 1.), // 8: backgroundColor\n        vec4(0.), // 9: clear\n        vec4(1., .6, 1., 1.) // 10: pink\n    );\n\n    \n    vec4 lowFNoise = mix(\n        colors[10],\n        colors[5],\n        cnoise(vec3(-mouseUV + uv * NOISE_XY_FACTOR, time * NOISE_TIME_FACTOR))\n    );\n    vec4 highFNoise = mix(\n        colors[10],\n        colors[0],\n        cnoise(vec3(-mouseUV + uv * NOISE_XY_FACTOR * 2., time * NOISE_TIME_FACTOR))\n    );\n\n    vec4 specCol = mix(lowFNoise, highFNoise, .2);\n\n\n    // color\n    float R = Vi;\n    return mix(\n        // inside metaball\n        mix(\n            mix(\n                specCol,//colors[4],\n                colors[10],\n                S(Vi, mix(Vi, Vf, .2), v)\n            ),\n            colors[5],\n            S(mix(Vi, Vf, .50), mix(Vi, Vf, .5 + 10. * fwidth(v)), v)\n        ),\n        // outside metaball\n        colors[9], // clear\n        S(mix(Vi, Vf, .65), mix(Vi, Vf, .9), v)\n    );\n}\n\nvec2 layerFromI(vec2 uv, float i) {\n    return  (uv + (i + 1.) * rand12(i + 1.));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 globalUV = fragCoord / iResolution.xy;\n    vec2 uv = 2. * ZOOM * (fragCoord - (iResolution.xy / 2.)) / iResolution.x;\n    vec2 uvMouse = 2. * ZOOM * (iMouse.xy - (iResolution.xy / 2.)) / iResolution.x;\n\n    fragColor = vec4(0);\n    \n    vec2 uvOffset = vec2(\n        2. * sin(iTime / 2.),\n        -iTime / 2.\n    );\n\n     for (int i = 0; i < int(LAYER_COUNT); i += 1) {\n        vec4 rawColor = slime(iTime + float(i) * 999., uvOffset + (float(i) / 3. + 1.) * (uv + float(i + 1) * rand12(float(i + 1))), globalUV, layerFromI(uvMouse, float(i)), fragColor);\n        vec4 fogColor = mix(rawColor, vec4(backgroundColor, 1.), smoothstep(0., float(LAYER_COUNT),float(i)));\n        vec4 filteredColor = mix(fogColor, fragColor, smoothstep(0., 1., pow(fragColor.a, 2.)));\n\n        fragColor = filteredColor;\n    }\n}\n","name":"Image","description":"","type":"image"}]}