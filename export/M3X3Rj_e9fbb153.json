{"ver":"0.1","info":{"id":"M3X3Rj","date":"1707672565","viewed":114,"name":"Raymarching colorful 3D metaball","username":"csblo","description":"Raymarchiing a colorful metaball in 3D","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["3d","color","metaball"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 screenUV(vec2 uv)\n{\n    vec2 scale = uv / iResolution.x * 2.;\n    return vec2(scale.x - 1., scale.y - 0.5);\n}\n\n// comment this function and uncomment function below if you want meta-diamonds\nfloat sdf_meta_sphere(vec3 p, vec3 pos, float r) {\n    return sqrt(r) / length(p-pos);\n}\n\n\n/*\n// meta-diamond\nfloat sdf_meta_sphere(vec3 p, vec3 pos, float r) {\n    vec3 a = p - pos;\n    return sqrt(r) / (abs(a.x) + abs(a.y) + abs(a.z)) : \n}\n*/\n\n// scene\nfloat f(vec3 p) {\n    float th = iTime * 5.;\n    mat3x3 rot = mat3x3(cos(th), -sin(th), 0, sin(th), cos(th), 0, 0, 0, 1);\n    vec3 pos0 = vec3(0. + sin(iTime*2.)*2.5,0.,6. ) * rot;\n    vec3 pos1 = vec3(0. - sin(iTime*5.)*1.5,0.,6. ) * rot;\n    float sc0 = sdf_meta_sphere(p, pos0, 1.);\n    float sc1 = sdf_meta_sphere(p, pos1, 1.);\n    return sc0 + sc1;\n}\n\n// compute normal at p for sdf function f\nvec3 calcNormal( in vec3 p )\n{\n    const float eps = 0.0001;\n    const vec2 h = vec2(eps,0);\n    return normalize( vec3(f(p+h.xyy) - f(p-h.xyy),\n                           f(p+h.yxy) - f(p-h.yxy),\n                           f(p+h.yyx) - f(p-h.yyx) ) );\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = screenUV(fragCoord);\n\n    // ray dir\n    vec3 d = vec3(uv, 1.);\n    \n    // background color\n    vec3 col = vec3(0.1,0.1,0.1);\n    \n    for (float t = 0.; t < 7.; t+=.1) {\n        // advance ray\n        vec3 p = d * t;\n\n        float m = f(p);\n        \n        // surface found\n        if (m >= 1.) {\n            // find surface point position\n            float delta = m - 1.;\n            vec3 sp = p - normalize(p)*delta;\n            vec3 cn = calcNormal(sp);\n                        \n            // compute light power\n            float l = clamp(dot(cn, vec3(-1.,1.0,1.0)),0.,1.);\n            // create a mix colored light (mixed according to power)\n            vec3 cl = mix(vec3(1.,.8,.9), vec3(0.6,.2,.0), (l + .4) * .6);\n            // compute metaball final color\n            col = mix(vec3(.4,.8,.2), vec3(.2,.8,.4), p) * cl;\n            break;\n        }\n        \n    }\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}