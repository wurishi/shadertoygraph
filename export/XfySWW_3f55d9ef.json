{"ver":"0.1","info":{"id":"XfySWW","date":"1715144249","viewed":196,"name":"Saint seiya ‚ôêÔ∏è","username":"walter023","description":"practicing this karate  https://www.youtube.com/watch?v=KGJUl8Teipk moving suff around and see what happen üôà","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["neons"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// IQ\nvec3 palette(in float t) {\n  vec3 a = vec3(0.500, 0.500, 0.500);\n  vec3 b = vec3(0.500, 0.500, 0.500);\n  vec3 c = vec3(1.000, 1.000, 1.000);\n  vec3 d = vec3(0.000, 0.333, 0.667);\n  return a + b * cos(6.28318 * (c * t + d));\n}\nmat2 rot2D(float angle) {\n  float s = sin(angle);\n  float c = cos(angle);\n  return mat2(c, -s, s, c);\n}\nfloat distLine(vec2 p, vec2 a, vec2 b) {\n  vec2 pa = p - a;\n  vec2 ba = b - a;\n  float t = clamp((dot(pa, ba) / dot(ba, ba)), 0.0, 1.0);\n  return length(pa - ba * t);\n}\nfloat line(vec2 p, vec2 a, vec2 b) {\n  float d = distLine(p, a, b);\n  float l = smoothstep(0.015, 0.001, d);\n  float d2 = length(a - b);\n  l *= smoothstep(1., 0.1, d2) * .01 + smoothstep(.5, .3, abs(d2 - .55));\n  return l;\n}\n\nvec2 random2(vec2 p) {\n  return fract(sin(vec2(dot(p, vec2(127.1, 311.7)), dot(p, vec2(269.5, 183.3)))) * 43758.5453);\n}\n\nvec2 animatePoint(vec2 i_st, vec2 neighbor) {\n  vec2 rand = random2(i_st + neighbor);\n  float x = cos(iTime * rand.x);\n  float y = sin(iTime * rand.y);\n  return neighbor + vec2(x, y) * .5;\n}\n\nvec3 constellation(vec2 st) {\n  st *= 3.5;\n  vec3 color = vec3(0.0);\n  vec2 f_st = fract(st) - 0.5, i_st = floor(st), points[9];\n  int i = 0;\n  \n  for(int y = -1; y <= 1; y++) {\n    for(int x = -1; x <= 1; x++) {\n      vec2 neighbor = vec2(float(x), float(y));\n      points[i++] = animatePoint(i_st, neighbor);\n    }\n  }\n\n  for(int i = 0; i < 9; i++) {\n    color += line(f_st, points[4], points[i]);\n    vec2 j = (points[i] - f_st);\n    float sparkle = (.002 / dot(j, j));\n      color += sparkle * fract(points[i].y + iTime * .5);\n  }\n  color += line(f_st, points[1], points[3]);\n  color += line(f_st, points[1], points[5]);\n  color += line(f_st, points[7], points[3]);\n  color += line(f_st, points[7], points[5]);\n  return color;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 st = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n  float m = 0.0, t = iTime * .1;\n  st *= rot2D(t);\n  vec3 finalColor = vec3(0.0);\n  for(float i = 0.0; i <= 1.0; i += 1.0 / 4.0) {\n    float z = fract(i + t);\n    float size = mix(0.0, 7.0, z);\n    float fadeIn = smoothstep(.9, 0.0, z);\n    finalColor += constellation(st * size + i * 12.0) * fadeIn * palette(i + length(st));\n  }\n  fragColor = vec4(finalColor, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}