{"ver":"0.1","info":{"id":"Nddcz7","date":"1653927651","viewed":99,"name":"numbers in a spiral","username":"Bluebone","description":"find the place of a number in a rectangular spiral","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["numberspiral"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Hash Functions Origin: https://www.shadertoy.com/view/4djSRW\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 uv=ivec2(fragCoord);\n    vec3 col;\n    //texelFetch(Buffer,int vec,int lod).rgb\n    col+=texelFetch(iChannel0, uv, 0 ).rgb;\n    \n    // Output to screen\n    col=1.0-(1.0/(col*col*14.0+1.0));\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv=fragCoord/iResolution.xy;\n    float zoom=13.0;\n    vec2 uv2=(fragCoord*2.0-iResolution.xy)/iResolution.y*zoom;\n    vec3 col=vec3(texture(iChannel0,uv).rgb*0.999);\n    vec2 spiralp;\n    float[]len1=float[](5.0,15.9);\n    int imax=len1.length();\n    for(int i=0;i<imax;i++){\n        //once\n        float intervall=floor(iTime/len1[i]);\n        //intervall\n        vec2 pos=uv2-(hash21(float(i+21)*2.345+intervall*6.445)-0.5)*vec2(zoom*3.0,zoom*1.5);\n        vec2 at=hash21(float(i+12)*2.142+intervall*8.949);\n        float angle=at.x*1440.0;\n        float throttle=at.y*4.0+1.0;\n        float speed=throttle;\n        float len=len1[i]*throttle;\n        //spiral\n        float r=fract(iTime*speed/len);\n        float number=(0.5-abs(r-0.5))*2.0*len;\n        if(r<0.5)spiralp=rot(pos,angle)-spiral(number);\n        else     spiralp=rot(pos,angle)+spiral(number)-spiral(len)*2.0;\n        vec3 hue=normalize(hash31(float(i+45)*12.341+intervall*12.141));\n        float spiral=clamp((0.002*throttle)/pow(length(spiralp),1.1),0.0001,0.05);\n        spiral+=clamp((0.001*throttle)/pow(length(spiralp),2.0),0.0001,1.0);\n        col*=max(1.0-spiral*0.9,0.9);\n        col+=spiral*hue;\n    }\n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define pi 3.15159\nvec2 rot(vec2 p,float r){\n    r=r*pi/180.0;\n    return vec2(p.x*cos(r)+p.y*sin(r),p.y*cos(r)-p.x*sin(r));\n}\nvec2 hash21(float p)\n{\n\tvec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n\tp3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\nvec3 hash31(float p)\n{\n\tvec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n\tp3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\nvec2 spiral(float n){\n    //coords\n    float a       =ceil(sqrt(ceil(n))*2.0);\n    float b       =a-2.0;\n    float quadrant=mod(b,4.0);\n    float tiles   =ceil((a-1.0)/2.0);\n    float dist    =ceil(b/4.0);\n    float maximum =pow(dist*2.0+1.0,2.0);\n    //conditions\n    float top   =max(1.0-abs(0.0-quadrant),0.0);\n    float right =max(1.0-abs(1.0-quadrant),0.0);\n    float bottom=max(1.0-abs(2.0-quadrant),0.0);\n    float left  =max(1.0-abs(3.0-quadrant),0.0);\n    vec2 p;\n    p=top *vec2(n-maximum+tiles-dist,dist)+\n    right *vec2(dist,maximum-(tiles+2.0)-(tiles+1.0)*2.0-tiles+dist-1.0-n)+\n    bottom*vec2(maximum-tiles*2.0-(tiles+1.0)+dist-n,-dist)+\n    left  *vec2(-dist,n-maximum+(tiles+1.0)+tiles-dist);\n    return p;\n}","name":"Common","description":"","type":"common"}]}