{"ver":"0.1","info":{"id":"WtlBD4","date":"1596746344","viewed":111,"name":"fork-Fight Club End Scene","username":"jorge2017a1","description":"Sonido--Sound","likes":3,"published":1,"flags":8,"usePreview":0,"tags":["sound","forkfightclubendscene"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// --- access to the image of ascii code c\n//#define C(c) U.x-=.5; T+= U.x<.0||U.x>1.||U.y<0.||U.y>1. ?vec4(0): texture( iChannel3, U/16. + fract( vec2(c, 15-c/16) / 16.))\n//#define C(c) U.x-=.5; T+= U.x<.0||U.x>1.||U.y<0.||U.y>1. ?vec4(0): textureLod( iChannel3, U/16. + fract( vec2(c, 15-c/16) / 16.), \\\n//                                                                               log2(length(fwidth(U/16.*iResolution.xy))) )\n  #define C(c) U.x-=.5; T+= U.x<.0||U.x>1.||U.y<0.||U.y>1. ?vec4(0): textureGrad(iChannel3, U/16. + fract( vec2(c, 15-c/16) / 16.), dFdx(U/16.),dFdy(U/16.) )\n#define initMsg vec4 T = vec4(0)\n#define endMsg  return length(T.yz)==0. ? 0. : T.x\n\nfloat message(vec2 U) { // to alter in the icon with the alter message\n    vec4 T = vec4(0);   // or: initMsg;\n    C(83);C(111);C(117);C(110);C(100);C(32);C(105);C(110);C(115);C(105);C(100);C(101); // message \"Sound inside\"\n    return length(T.yz)==0. ? -1. : T.x; // or: endMsg;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    //  if (iResolution.y<200.) to display only in the icon \n    if (iResolution.y<2000.)\n    {\n        float c=message((fragCoord/iResolution.y-vec2(.1,.2))*8.);\n        if(c>=0.)\n        {\n            fragColor=vec4(c*2.0);\n            return;\n        }\n    }\n\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = vec4(uv,0.5+0.5*sin(iTime),1.0);\n\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//MOdificado por jorge2017a1\n//Referencia de sonido\n//https://www.shadertoy.com/view/ltlXzl .....Creado por movAX13h en 2015-08-09\n\n\n// by srtuss\n\nfloat n2f(float n)\n{return 440.0*pow(2.0,n/12.0);}\nfloat sine(float ph)\n{return sin(ph*6.283185307179586476925286766559);}\nfloat shns(float x)\n{return fract(sin(floor(x * 4000.0)) * 29919.0) - 0.5;}\nfloat hpns(float x, float h)\n{return (shns(x + h) - shns(x - h));}\nfloat adsr(float x, float a, float d)\n{return smoothstep(0.0, a, x) * exp(max(x - a, 0.0) * -d);}\nfloat adsr(float x, float a, float d, float g)\n{return smoothstep(0.0, a, x) * smoothstep(a + d + g, a + g, x);}\nfloat ade(float x, float a, float e, float g)\n{return smoothstep(0.0, a, x) * exp(max(x - (a + g), 0.0) * -e);}\nfloat pwm(float t, float v)\n{\n    float s = 0.001;\n    t = fract(t);\n    return smoothstep(v,  v + s, t) * smoothstep(1.0, 1.0 - s, t) - 0.5;\n}\n\nfloat nse(float x)\n{\n    float x2 = x;\n    return texture(iChannel0, vec2(x2 / 256.0, x * 0.01), -100.0).x - 0.5;\n}\n\nvec2 expl(float x, vec2 pan, float seed)\n{\n    float dist = fract(seed * 27623.5978623) * 0.5;\n    float dist2 = fract(seed * 2723.5978623);\n    \n    float ps = 0.2;\n    float verb = adsr(x - 0.1, 0.1, 3.0);\n    float xp = exp(-x / ps) * ps;\n    ps = 0.9;\n    float xp2 = mix(1.0, exp(-x / ps) * ps * 1.0, step(0.5, dist2));\n    vec2 v = nse(xp * 100.0 + seed) * (adsr(x, 0.01, 4.0) + verb * 0.2) * 2.0 * pan.xy;\n    v += nse(x * xp2 * 500.0 - seed) * (adsr(x, 0.1, 4.0) + verb * 0.2) * pan.yx;\n    v += sin(v * (dist2 * 5.0)) * dist2 * 0.3;\n    v += nse(x * 1340.0 + seed * 2.0) * (adsr(x, 0.1, 50.0) + verb * 0.3) * 0.5 * pan.xy;\n    v = (smoothstep(-1.0 + dist, 1.0 - dist, v) - 0.5) * exp(-dist * 1.0);\n    return v;\n}\n\n/*\nt - time\npan - finetune direction of sound origin (1,1 = center)\npitch - change pitch/size of explosion (1 = default)\nnr - number of subsequent explosions (sort of)\ndel - delay between subsequent explosions\nvari - maximum random variation in delay (0 = no variation)\n*/\nvec2 explseq(float t, vec2 pan, float pitch, float nr, float del, float vari)\n{\n    float rp = del;\n    vec2 v = vec2(0.0);\n    float tb = t;\n    float sd = floor(tb / rp);\n    v += expl(max(fract(tb / rp) * rp, tb - nr * rp) * pitch - fract(sd * 19623.232) * vari, pan, sd) * step(0.0, tb);\n    tb = (t - rp * 0.5);\n    sd = floor(tb / rp);\n    v += expl(max(fract(tb / rp) * rp, tb - nr * rp) * pitch - fract(sd * 290.1233) * vari, pan, -sd) * step(0.0, tb);\n    return v;\n}\n\n\nfloat gtsV0(float x, float tf)\n{\n    float ro = 1.0;\n    return sine(x) * 0.2 + sine(x * 2.0) * 0.7 * exp(tf * -1.0 * ro) + sine(x * 3.002) * 0.4 * exp(tf * -2.0 * ro);\n}\n\nfloat gts(float x, float tf)\n{\n    float ro = 1.0;\n    return sine(x*5.0)+sine(x*2.0)   ;\n}\n\n\n\n#define GTMUL adsr(tf, 0.01, 0.85, 0.12) * step(0.0, tt)\n\nconst float tbt = 60.0 / 160.0;\nconst float tbr = tbt * 4.0;\n\nfloat riff(float time)\n{\n    float v = 0.0;\n    \n    time = mod(time, tbr * 4.0);\n    \n    float tf, tt;\n    // G#5\n    tt = time;\n    tf = max(mod(tt, tbt * 2.0), max(tt - tbr * 1.5, 0.0));\n    v += gts(time * n2f(-5.0), tf) * GTMUL;\n    \n    // D#5 short\n    tt = time - tbr * 1.001;\n    tf = max(mod(tt, tbt * 2.0), max(tt - tbr * 1.5, 0.0));\n    v += gts(time * n2f(-6.0), tf) * GTMUL * 0.5;\n    \n    // D#5\n    tt = time - tbr * 2.0;\n    tf = max(mod(tt, tbt * 2.0), max(tt - tbr * 0.5, 0.0));\n    v += gts(time * n2f(-6.0), tf) * GTMUL;\n    \n    // E5\n    tt = time - tbt;\n    tf = max(mod(tt, tbt * 2.0), max(tt - tbr * 2.5, 0.0));\n    v += gts(time * n2f(-1.0), tf) * GTMUL;\n    \n    \n    // E5\n    tt = time - tbr * 3.0;\n    tf = max(mod(tt, tbt * 1.0), max(tt - tbr * 0.5, 0.0));\n    v += gts(time * n2f(-5.0), tf) * GTMUL;\n    \n    // D#5\n    tt = time - tbr * 3.0 - tbt * 1.5;\n    tf = tt;\n    v += gts(time * n2f(-6.0), tf) * GTMUL;\n    \n    // A4 short\n    tt = time - tbr * 3.02;\n    tf = max(mod(tt, tbt * 2.0), max(tt - tbr * 0.5, 0.0));\n    v += gts(time * n2f(-12.0), tf) * GTMUL * 0.5;\n    \n    \n    \n    v = sin(v * (1.1 + 0.4 * cos(time * 4.0)));\n    \n    \n    \n    \n    v = smoothstep(-0.25, 0.25, v);\n    \n    return v;\n}\n\nfloat sub(float t)\n{\n    t = mod(t, tbr * 4.0);\n\n    float f = n2f(5.0);\n     f =( f+n2f(-5.0))*0.5;\n     f =( f+n2f(-2.5))*0.65;\n    \n    \n    \n    float ph = t * f * 0.25;\n    return (sine(ph) + sine(ph * 1.03) * 0.3) * adsr(mod(t, tbr), 0.1, 0.1, tbr * 0.85);\n}\n\nfloat riffhp(float t)\n{\n    float h = 0.0001 + sin(t) * 0.00005;\n    return riff(t + h) - riff(t - h);\n}\n\nfloat echos(float t)\n{\n    return riffhp(t);\n}\n\nvec2 echochn(float t)\n{\n    vec2 v = vec2(0.0);\n    float to = 0.0;\n    float ea = 1.0;\n    vec2 pan = vec2(1.0, 0.5);\n    \n    vec2 of = vec2(1.002, 1.0);\n    \n    float deltime = (60.0 / 160.0) * 4.0 / 3.0;\n    \n    for(int i = 0; i < 1; i++)\n    {\n    \tv += vec2(echos(t - to + of.x), echos(t - to + of.y)) * pan * ea;\n        ea *= 1.2;\n        to += deltime;\n        of = of.yx;\n        pan = pan.yx;\n    }\n    return v;\n}\n\nvec2 mainSound( in int samp,float time)\n{\n    \n    float t =mod( time,10.0); //repetir\n    \n    vec2 v = \texplseq(t - 1.0, vec2(1.8, 0.4), 0.6, -1.0, 0.5,   0.1) * 1.0;\n    \n    t = mod(time,12.0) ;\n    \n    vec2 m = echochn(t);\n    m += vec2(sub(t) * 3.5);\n    m *= 0.2;\n    \n    \n    v += m*smoothstep(-0.1, 2.0, t)*smoothstep(10.0, 5.0, t);\n    \n    return vec2(v);\n}","name":"Sound","description":"","type":"sound"}]}