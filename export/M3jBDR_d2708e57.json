{"ver":"0.1","info":{"id":"M3jBDR","date":"1729406241","viewed":78,"name":"tank2","username":"tommyangl","description":"tank","likes":0,"published":1,"flags":48,"usePreview":0,"tags":["tank"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdXGzr","filepath":"/media/a/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg","previewfilepath":"/media/ap/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nSurface map(vec3 p) {\n  // floor\n  vec3 floorColor = texture(iChannel1,p.xz*.2).rgb*2.;\n  Surface co = sdFloor(p, floorColor,0); // co - closest object\n  // extract data\n  float th = texelFetch(iChannel0,ivec2(0),0).x;\n  float tankth = texelFetch(iChannel0,ivec2(0),0).y;\n  vec3 offset = texelFetch(iChannel0,ivec2(0,1),0).rgb;\n  vec3 tankcolor =texture(iChannel2,((p-vec3(0.,0.5,0)+offset)*rotateY(th+tankth)).xz*.2).rgb*.6+vec3(0,0.2,0);\n  vec3 tankNPCcolor = texture(iChannel2,p.xz*.2).rgb*.6+vec3(0,0.2,0);\n  vec3 missilePos = vec3(texelFetch(iChannel0,ivec2(0,2),0));\n  float rotateUp = texelFetch(iChannel0,ivec2(0,3),0).w;\n  // explosion\n  if (length(-vec3(0.,0.5,0.)-vec3(0.,0.5,0)+offset-missilePos) < 1.5)\n  {\n      co = Union(co, sdSphere(p, 1.7, texture(iChannel3,p.xz*.7).rgb*.6*vec3(2.9,0,0), identity(),1));\n  }\n  // TANK (NPC)\n  co = Union(co, sdRoundBox(p-vec3(0,0.5,0), vec3(0.7,0.3,0.5),0.1,tankNPCcolor, identity(), 2));\n  co = Union(co, sdRoundBox(p-vec3(0.,0,0), vec3(1.,0.5,0.8),0.2,tankNPCcolor,identity(), 2));   \n  co = Union(co, sdCylinder(p-vec3(0.,0.625,0), 1., 0.09, tankNPCcolor, identity()*rotateZ(PI/2.),vec3(0.0,0.4,0),2));\n  // TANK\n  co = Union(co, sdRoundBox(p-vec3(0.,0.5,0)+offset, vec3(0.7,0.3,0.5),0.1,tankcolor, rotateY(th+tankth), 2));\n  co = Union(co, sdRoundBox(p-vec3(0.,0,0)+offset, vec3(1.,0.5,0.8),0.2,tankcolor, rotateY(tankth), 2));   \n  co = Union(co, sdCylinder(p-vec3(0.,0.625,0)+offset, 1., 0.12, tankcolor, rotateY(th+tankth)*rotateZ(PI/2.)*rotateZ(rotateUp),vec3(0.0,0.4,0),2));\n  // XYZ lines\n  co = Union(co, sdLine(p, 2., 0.03, vec3(0,1,0), identity(),3));\n  co = Union(co, sdLine(p, 2., 0.03, vec3(0,0,1), rotateX(PI/2.),3));\n  co = Union(co, sdLine(p, 2., 0.03, vec3(1,0,0), rotateZ(PI/2.),3));\n  // missile\n  co = Union(co, sdSphere(p-vec3(0.,0.5,0)+offset-missilePos, 0.07, vec3(1,0.6,0.2), rotateY(th+tankth)*rotateZ(rotateUp),1));\n  \n  return co;\n}\nSurface rayMarch(vec3 ro, vec3 rd, float start, float end) {\n  float depth = start;\n  Surface co; // closest object\n  for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n    vec3 p = ro + depth * rd;\n    co = map(p);\n    depth += co.sd;\n    if (co.sd < PRECISION || depth > end) break;\n  }\n  co.sd = depth;\n  return co;\n}\n\nvec3 calcNormal(in vec3 p) {\n    vec2 e = vec2(1, -1) * EPSILON;\n    return normalize(\n      e.xyy * map(p + e.xyy).sd +\n      e.yyx * map(p + e.yyx).sd +\n      e.yxy * map(p + e.yxy).sd +\n      e.xxx * map(p + e.xxx).sd);\n}\n\nvec3 render(vec3 ro,vec3 rd, vec2 uv)\n{\n  \n  vec3 backgroundColor = vec3(0.835, 1, 1);\n  Surface co = rayMarch(ro, rd, MIN_DIST, MAX_DIST); // closest object\n  vec3 col = vec3(0);\n  \n  if (co.sd > MAX_DIST) \n  {\n    col = backgroundColor; // ray didn't hit anything\n  } \n  else \n  { \n    if (co.id == 0) return co.col*0.3+backgroundColor * .1; // disable shining floor\n    \n    vec3 p = ro + rd * co.sd; // point on cube or floor we discovered from ray marching\n    vec3 normal = calcNormal(p);\n    vec3 lightPosition = vec3(0, 50, -10);\n    vec3 lightDirection = normalize(lightPosition - p);\n\n    float dif = clamp(dot(normal, lightDirection), 0.1, 1.); // diffuse reflection\n\n    col = dif * co.col+ backgroundColor * .1; // Add a bit of background color to the diffuse color\n  }\n  return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n  vec2 mouseUV = iMouse.xy/iResolution.xy;\n  // start camera animation\n  if (mouseUV == vec2(0)) \n  {\n      mouseUV = vec2(0.5,0.5);\n      mouseUV = vec2(abs(sin(iTime*0.1+1.)),abs(cos(iTime*0.1+1.)));\n  }\n  vec3 lp = vec3(0, 0, 0) - texelFetch(iChannel0,ivec2(0,1),0).rgb;; // lookat point (tank position)\n  vec3 ro = vec3(0, 1, 0); // ray origin that represents camera position\n  \n  // camera rotation\n  float cameraRadius = 7.;\n  ro.yz = ro.yz * cameraRadius * rotate2d(mix(-PI/2.,0.,mouseUV.y));\n  ro.xz = ro.xz * rotate2d(mix(-PI, PI, mouseUV.x)) + vec2(lp.x, lp.z);\n\n  vec3 rd = camera(ro, lp)* normalize(vec3(uv, -1)); // ray direction\n  vec3 col = render(ro,rd,uv);\n  \n\n  // Output to screen\n  fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Constants\nconst int MAX_MARCHING_STEPS = 255;\nconst float MIN_DIST = 0.0;\nconst float MAX_DIST = 100.0;\nconst float PRECISION = 0.001;\nconst float EPSILON = 0.0005;\nconst float PI = 3.14159265359;\nmat3 camera(vec3 cameraPos, vec3 lookAtPoint) {\n    vec3 cd = normalize(lookAtPoint - cameraPos); // camera direction\n    vec3 cr = normalize(cross(vec3(0, 1, 0), cd)); // camera right\n    vec3 cu = normalize(cross(cd, cr)); // camera up\n\n    return mat3(-cr, cu, -cd);\n}\nstruct Surface {\n    float sd; // signed distance value\n    vec3 col; // color\n    int id;\n};\n// Rotate around a circular path\nmat2 rotate2d(float theta) {\n  float s = sin(theta), c = cos(theta);\n  return mat2(c, -s, s, c);\n}\n\n// Rotation matrix around the X axis.\nmat3 rotateX(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(1, 0, 0),\n        vec3(0, c, -s),\n        vec3(0, s, c)\n    );\n}\n\n// Rotation matrix around the Y axis.\nmat3 rotateY(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, 0, s),\n        vec3(0, 1, 0),\n        vec3(-s, 0, c)\n    );\n}\n\n// Rotation matrix around the Z axis.\nmat3 rotateZ(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, -s, 0),\n        vec3(s, c, 0),\n        vec3(0, 0, 1)\n    );\n}\n\n// Identity matrix.\nmat3 identity() {\n    return mat3(\n        vec3(1, 0, 0),\n        vec3(0, 1, 0),\n        vec3(0, 0, 1)\n    );\n}\n// SHAPES\nSurface sdCylinder( vec3 p, float h, float r, vec3 col, mat3 transform,vec3 pivot, int id )\n{\n  p=p*transform - pivot;\n  vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(r,h);\n  float dd = min(max(d.x,d.y),0.0) + length(max(d,0.0));\n  return Surface(dd,col,id);\n}\nSurface sdLine( vec3 p, float h, float r, vec3 col, mat3 transform, int id )\n{\n  p*=transform;\n  p.y -= clamp( p.y, 0.0, h );\n  float d =length( p ) - r;\n  return Surface(d,col,id);\n}\nSurface sdBox( vec3 p, vec3 b, vec3 col, mat3 transform,int id)\n{\n  p*=transform; // apply transformation matrix\n  vec3 q = abs(p) - b;\n  float d = length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n  return Surface(d, col,id);\n}\nSurface sdRoundBox( vec3 p, vec3 b, float r, vec3 col, mat3 transform, int id )\n{\n  vec3 q = abs(p*transform) - b + r;\n  float d = length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;\n  return Surface(d, col, id);\n}\n\nSurface sdFloor(vec3 p, vec3 col,int id) {\n  float d = p.y;\n  return Surface(d, col, id);\n}\nSurface sdSphere( vec3 p, float s, vec3 col, mat3 transform, int id )\n{\n  \n  float d = length(p*transform-vec3(0.5,0.125,0.))-s;\n  return Surface(d,col,id);\n}\n//\nSurface Union(Surface obj1, Surface obj2) {\n  if (obj2.sd < obj1.sd) return obj2;\n  return obj1;\n}\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec4 control()\n{\n    vec2 left = texelFetch(iChannel0, ivec2(37, 0), 0).x * vec2(-1., 0.);\n    vec2 right = texelFetch(iChannel0, ivec2(39, 0), 0).x * vec2(1., 0.);\n    vec2 upW = texelFetch(iChannel0, ivec2(87, 0), 0).x * vec2(-1., 0.);\n    vec2 downS = texelFetch(iChannel0, ivec2(83, 0), 0).x * vec2(1., 0.);\n    vec2 leftA = texelFetch(iChannel0, ivec2(65, 0), 0).x * vec2(-1., 0.);\n    vec2 rightD = texelFetch(iChannel0, ivec2(68, 0), 0).x * vec2(1., 0.);\n    vec2 arrowUp = texelFetch(iChannel0, ivec2(38, 0), 0).x * vec2(1., 0.);\n    vec2 arrowDown = texelFetch(iChannel0, ivec2(40, 0), 0).x * vec2(-1., 0.);\n\n    vec2 shot = texelFetch(iChannel0, ivec2(13, 0), 0).x * vec2(1., 0.);\n    return vec4((left + right).x,(upW+downS).x,(leftA+rightD).x,shot);\n}\nfloat arrowcontrol()\n{\n    vec2 arrowUp = texelFetch(iChannel0, ivec2(38, 0), 0).x * vec2(1., 0.);\n    vec2 arrowDown = texelFetch(iChannel0, ivec2(40, 0), 0).x * vec2(-1., 0.);\n    return (arrowUp+arrowDown).x;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    float isShooting = texelFetch(iChannel1,ivec2(0,1),0).w;\n    vec3 missilePos = texelFetch(iChannel1,ivec2(0,2),0).xyz;\n    float rotateAngle = texelFetch(iChannel1,ivec2(0),0).x;\n    float rotateTankAngl = texelFetch(iChannel1, ivec2(0),0).y;\n    vec3 position = texelFetch(iChannel1,ivec2(0,1),0).rgb;\n    float rotateUp = texelFetch(iChannel1,ivec2(0,3),0).w;\n    vec3 velocity = texelFetch(iChannel1,ivec2(0,3),0).rgb;\n    if (iFrame == 0)\n    {\n        isShooting = 0.;\n        position = vec3(-4,0,0);\n        velocity = vec3(15,0,0);\n    }\n        \n    \n        \n    if ((control().w) == 1.)\n    {\n        velocity = vec3(15,0,0);\n        missilePos = vec3(0);\n        isShooting = 1.;\n        //velocity = velocity *rotateZ(-rotateUp)*rotateY(-rotateAngle-rotateTankAngl)*iTimeDelta;\n        velocity = 1.0*normalize(position) * 25.;\n    }\n    \n    if( isShooting == 1.)\n    {\n        \n        missilePos+=velocity*iTimeDelta;\n        \n        velocity.y -= 9.81*iTimeDelta;\n    }\n    else \n    {\n       // velocity = vec3(5,0,0);\n        missilePos = vec3(0);\n    }\n    if (length(missilePos - position) > 1000.)\n    {\n        isShooting = 0.;\n        missilePos = vec3(0);\n        \n    }\n    rotateAngle+=control().x/100.;\n    rotateTankAngl+=control().z/50.;\n    rotateUp+=arrowcontrol()/50.;\n    position += vec3(vec2(0.1,0)*rotate2d(rotateTankAngl),0).xzy*control().y; \n    if (ivec2(fragCoord) == ivec2(0))\n        fragColor = vec4(rotateAngle,rotateTankAngl,vec2(0));\n    else if (ivec2(fragCoord) == ivec2(0,1))\n        fragColor = vec4(position,isShooting);\n    else if (ivec2(fragCoord) == ivec2(0,2))\n        fragColor = vec4(missilePos,0);\n    else if (ivec2(fragCoord) == ivec2(0,3))\n        fragColor = vec4(velocity,rotateUp);\n    //fragColor = vec4(rotateAngle,rotateTankAngl,vec2(0));\n}","name":"Buffer A","description":"","type":"buffer"}]}