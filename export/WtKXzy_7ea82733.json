{"ver":"0.1","info":{"id":"WtKXzy","date":"1583352104","viewed":149,"name":"tilted plane effect","username":"alarch","description":"tilted plane, inspired from https://www.youtube.com/watch?v=phSU7bjYsgY\n\nBasically same as tunnel effect, but origo is off-screen and angle is not used for v coord.","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["tiltedplane"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SCALE 0.1\n//#define ROTATE\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n     uv.y += -1.4;\n     uv.x += -0.7;\n     uv *= iResolution.xy  / iResolution.y;\n\n    #ifdef ROTATE\n    uv *= mat2(sin(iTime * 0.1), cos(iTime * 0.1), -cos(iTime * 0.1), sin(iTime * 0.1));\n    #endif\n    \n    float d = 1./abs(uv.y); //depth  \n    \n    float movement = 1.0;// sin(iTime/8.0);\n           \n    if(uv.y < 0.0)\n    {\n    \tfragColor = texture(iChannel0, \n                            0.5-vec2(\n                                mod(SCALE*uv.x*d+movement,1.0),\n                                mod(-abs(iTime/10.0)+SCALE*(1.0/uv.y),1.0)\n                  \t\t\t\t)\n                            , 1.0);\n    }\n    else\n    {\n        fragColor = vec4(0.0);\n    }\n    \n   //fragColor *= abs(uv.y); // dark by x-axis\n\t\n}\n\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define LINEWIDTH 0.03\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 col = vec3(1.0); // 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    uv += -0.5;\n \n    uv *= iResolution.xy  / iResolution.y;\n    \n    float foo = mod(uv.x+(LINEWIDTH/2.0), 0.1);\n    \n    float bar = mod(uv.y+(LINEWIDTH/2.0), 0.1);\n    \n    if(foo < LINEWIDTH)\n        col = vec3(0.0);\n   \n    if(bar < LINEWIDTH)\n        col = vec3(0.0);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}