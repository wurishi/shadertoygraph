{"ver":"0.1","info":{"id":"llt3zs","date":"1471056105","viewed":1301,"name":"Asteroid Flight","username":"jackdavenport","description":"Fly through a field of asteroids! Also has VR support with Google Cardboard!\n\nControls:\nMouse to look around (PC Only)\nLeft Click or Google Cardboard Button: Fly","likes":3,"published":3,"flags":33,"usePreview":0,"tags":["space","vr","cardboard","rock","flight","asteroid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsX3Rn","filepath":"/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","previewfilepath":"/media/ap/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdXGzr","filepath":"/media/a/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg","previewfilepath":"/media/ap/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_ITER 256\n#define MAX_DIST 50.\n\n#define EPSILON .001\n\nvec2 rot2D(vec2 p, float angle) {\n    angle = radians(angle);\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat2(c,s,-s,c)*p;\n}\n\nfloat dstScene(vec3 p) {\n \n    vec3 q = mod(p, 9.) - 4.5;\n    q.xy = rot2D(q.xy, (iTime*.1+p.x)*45.);\n    \n    vec2 uv = mod(asin(normalize(q).xy) / 3.14159 + .5, 1.);\n    float d = texture(iChannel1, uv*1.).x * .1 * sin(p.x*4.)*2.;\n    return length(q)-1.-d;\n    \n}\n\nfloat raymarch(vec3 ori, vec3 dir) {\n \n    float t = 0.;\n    for(int i = 0; i < MAX_ITER; i++) {\n    \tvec3  p = ori + dir * t;\n        float d = dstScene(p);\n        if(d < EPSILON || t > MAX_DIST)\n            break;\n        t += d * .75;\n    }\n    return t;\n    \n}\n\nvec3 calcNormal(vec3 p) {\n \n    vec2 e = vec2(EPSILON,0.);\n    vec3 n = vec3(dstScene(p+e.xyy)-dstScene(p-e.xyy),\n                  dstScene(p+e.yxy)-dstScene(p-e.yxy),\n                  dstScene(p+e.yyx)-dstScene(p-e.yyx));\n    return normalize(n);\n    \n}\n\nvec3 calcLighting(vec3 col, vec3 ro, vec3 p, vec3 n, vec3 r, float sp) {\n \n    vec3 lv = ro - p;\n    vec3 ld = normalize(lv);\n    \n    float d = max(dot(ld,n),0.);\n    float s = 0.;\n    \n    float atten = 1.-smoothstep(3., 25., length(lv));\n    d *= atten;\n    \n    if(raymarch(p+ld*.1,ld) < length(lv))\n        d = 0.;\n    \n    if(d > 0. && sp > 0.)\n        s = pow(max(dot(ld,r),0.),sp) * atten;\n    \n    return col*d+s;\n    \n}\n\nvec3 shade(vec3 ori, vec3 dir) {\n \n    float  t = raymarch(ori, dir);\n    vec3 col = vec3(0.);\n    \n    if(t < MAX_DIST) {\n     \n        vec3 p = ori + dir * t;\n        vec3 n = calcNormal(p);\n        vec3 r = normalize(reflect(dir,n));\n        \n        vec2 uv = mod(asin(n.xy)/3.14159+.5,1.);\n        col = texture(iChannel2, uv).xxx*vec3(1.,.5,0.);\n        \n        col = calcLighting(col, ori, p, n, r, 20.);\n        \n    }\n    \n    float fog = smoothstep(2., 45., t);\n    col = mix(col, vec3(.1,.1,.1), fog);\n    \n    return col;\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord - iResolution.xy * .5) / iResolution.y;\n\t\n    vec3 ori = texture(iChannel0, vec2(.5,.5)).xyz;\n    vec3 dir = vec3(uv, 1.);\n    \n    vec2   m = ((iMouse.xy - iResolution.xy * .5) / iResolution.y) * vec2(180.,90.);\n    dir.yz = rot2D(dir.yz, m.y); dir.xz = rot2D(dir.xz, m.x);\n    \n    fragColor.xyz = shade(ori, normalize(dir));\n    fragColor.w   = 1.;\n}\n\nvoid mainVR(out vec4 fc, in vec2 fp, in vec3 ro, in vec3 rd) {\n \n    ro += texture(iChannel0, vec2(.5,.5)).xyz;\n    rd  = normalize(rd);\n    \n    fc.xyz = shade(ro,rd);\n    fc.w   = 1.;\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define MOVE_SPEED 7.5\n\nvec2 rot2D(vec2 p, float angle) {\n    angle = radians(angle);\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat2(c,s,-s,c)*p;\n}\n\nvoid mainVR(out vec4 fc, in vec2 fp, in vec3 ro, in vec3 rd) {\n\tvec3 pos = texture(iChannel0, vec2(.5,.5)).xyz;\n    if(iFrame == 0) {\n    \tpos = vec3(0.,0.,-3.);\n    }\n    if(iMouse.z > 0.) {\n    \tpos += normalize(rd) * MOVE_SPEED * iTimeDelta;\n    }\n    fc = vec4(pos,1.);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2  uv = (fragCoord - iResolution.xy * .5) / iResolution.y;\n    vec3 dir = vec3(uv, 1.);\n    vec2   m = ((iMouse.xy - iResolution.xy * .5) / iResolution.y) * vec2(180.,90.);\n    dir.yz = rot2D(dir.yz, m.y); dir.xz = rot2D(dir.xz, m.x);\n    mainVR(fragColor, fragCoord, vec3(0.), normalize(dir));\n}","name":"Buf A","description":"","type":"buffer"}]}