{"ver":"0.1","info":{"id":"DllBzl","date":"1693339045","viewed":105,"name":"Oncinha","username":"Elsio","description":"desc","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["tag"],"hasliked":0,"parentid":"mlXfz8","parentname":"Giroides"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define rot(a)   mat2 (cos(a+vec4(0,11,33,0)))                   \n#define T iTime\n\n\nvec3 cor;\nfloat M(vec3 p){\n    float d = dot(cos(p), sin(p.yzx)) + 1.3;\n    \n    vec3 q = p * 9.;\n    float k = dot(cos(q), sin(q.yzx)) + .1;\n    \n    vec3 cor1 = vec3(217,193,136)/255.; \n    vec3 cor2 = vec3(67,47,31)/255.; \n    vec3 cor3 = vec3(148,108,65)/255.; \n    \n    cor = mix(cor1, cor2, k * 1.1 + .75) ;\n    cor = mix(cor, cor3, abs(k * .45) + .3);\n    \n    return  d;\n}\n\nvoid mainImage(out vec4 O, vec2 u){\n    float T  = iTime * 4., \n          a  = T * .04, \n          PI = 3.14;\n          \n    vec3  R = iResolution,\n    \n          // scrool z\n          p = vec3(0, 0, sin(a) * 12. - 1.),\n          \n          // normalize(vec3(uv, 1));\n          D = normalize(vec3(u, R.y) - .5 * R);\n                    \n    \n    // rotate camera\n    D.yz *= rot(cos(3. * a));\n    D.zx *= rot(sin(2. * a));\n                  \n\t\n    \n    // raymarching, uh!\n    float f = 25., s = f, i, d;          \n    for(; i++ < 4e2 && d < f && s > .025;  p += s * D)\n        s = .5 * M(p),\n        d += s;\n\n    \n    \n    \n    \n    \n    // plot\n    O *= 0.; \n    \n    \n    if(d < f) {\n        // normals\n        vec3 e = vec3(.1, 0,0),\n             n = vec3( M(p-e.xyy),\n                       M(p-e.yxy),\n                       M(p-e.yyx));\n                       \n             n = normalize(M(p) - n);\n                       \n        // reflection               \n        vec3 r = reflect(D, n);\n                                \n                     \n        // color  \n        vec4 C = vec4(cor,0);\n        \n        O = C \n           // difuse\n           + .05 \n            * smoothstep( -.1, .1  , dot(p,r)/length(p) + 1.) \n            * smoothstep(-1.1,  1.1, dot(r, vec3(.58))) \n            * clamp(dot(n, D) + 1., 0., 1.)\n            \n           // specular\n           + (\n               dot(\n                   r, \n                   normalize(\n                       vec3(\n                           sin(T*.5),\n                           cos(T*.5),\n                           -1\n                       )\n                   )\n               ) + .5\n             ) * .3 - .2;\n        \n        // gama\n        O = pow(O, 1.5 - C * 1.1);\n        O = pow(O, vec4(1.1));\n        O *= 1. - d/f;\n    }\n}\n\n/*\n    relateds\n    \n    https://www.shadertoy.com/view/DllBzl\n    https://www.shadertoy.com/view/mdSBWy\n    https://www.shadertoy.com/view/mssBzs\n    https://www.shadertoy.com/view/cdBfRd\n    https://www.shadertoy.com/view/cdBfDy\n    https://www.shadertoy.com/view/mdBBWt\n    https://www.shadertoy.com/view/dlXBRH\n    https://www.shadertoy.com/view/ctlBzX\n    https://www.shadertoy.com/view/dlXBzB\n    https://www.shadertoy.com/view/ddXBz7\n    https://www.shadertoy.com/view/dtfBR4\n    https://www.shadertoy.com/view/clfBRr    \n    https://www.shadertoy.com/view/DdXBW8\n    https://www.shadertoy.com/view/DssBDn\n\n*/","name":"Image","description":"","type":"image"}]}