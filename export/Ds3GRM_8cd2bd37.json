{"ver":"0.1","info":{"id":"Ds3GRM","date":"1677065769","viewed":87,"name":"linear Gradient","username":"itan","description":"implementation of linear gradient of two colors in a given angle","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["2d","lineargradient"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float lineSegment( vec2 uv, vec2 a, vec2 b, float thick) \n{\n    vec2 ba = b - a;\n    vec2 pa = uv - a;\n    float h = clamp(dot(pa, ba) / dot(ba, ba), 0., 1.);\n    float smoothBlur = 1. /400.0;\n    return smoothstep(thick+ smoothBlur, thick, length(pa - h * ba));\n}\n\nvec2 lineProjection(vec2 p, float m)\n{\n    float c = p.y + p.x / m;\n    vec2 res;\n    res.x = c * m / (1. + m * m);\n    res.y = m * res.x;\n    return res;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    uv = (uv - .5) * 2.;\n\n    float angle = iTime + 0.0001;\n    float m = tan(angle);\n    float _m = -1.0 / m;\n    \n    float r = min(1.41421, sqrt(m * m + 1.));\n    vec2 p0 = vec2(r * cos(angle), r * sin(angle));\n    vec2 p1 = -p0;\n    \n    vec2 p = vec2(.4);\n    vec2 p_ = lineProjection(p,m);\n\n    vec2 uv_ = lineProjection(uv,m);\n    float t = length(p0 - uv_) /length(p0 - p1);\n    t = smoothstep(.0, 1.0, t);\n\n    vec3 red = vec3(1.0, 0.0, 0.0);    \n    vec3 green = vec3(0.0, 1., 0.0);\n    vec3 col = red * t + green * (1. - t) ;\n     col += red * lineSegment(uv, p0, p1, 0.005)+ green * lineSegment(uv, p, p_, 0.005);\n    fragColor = vec4(col,1.0);\n    fragColor.xyz = pow(fragColor.xyz, vec3(1.0/2.2));\n}","name":"Image","description":"","type":"image"}]}