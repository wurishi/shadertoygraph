{"ver":"0.1","info":{"id":"MddfW2","date":"1526862660","viewed":89,"name":"FBMs by IQ","username":"lhog","description":"https://iquilezles.org/articles/warp/warp.htm","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fbm"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float M_PI = 3.14159265358979323846;\n\nfloat rand(vec2 c){\n\treturn fract(sin(dot(c.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat pnoise(vec2 p){\n\tvec2 ij = floor(p);\n\tvec2 xy = fract(p);\n\t//xy = 3.*xy*xy-2.*xy*xy*xy;\n\t//xy = .5*(1.-cos(M_PI*xy));\n\tfloat a = rand((ij+vec2(0.,0.)));\n\tfloat b = rand((ij+vec2(1.,0.)));\n\tfloat c = rand((ij+vec2(0.,1.)));\n\tfloat d = rand((ij+vec2(1.,1.)));\n\tfloat x1 = mix(a, b, xy.x);\n\tfloat x2 = mix(c, d, xy.x);\n\treturn mix(x1, x2, xy.y);\n}\n\n#define mynoise(p) pnoise(p)\n\nfloat fbm(vec2 P, int octaves, float lacunarity, float gain)\n{\n    float sum = 0.0;\n    float amp = 1.0;\n    vec2 pp = P;\n     \n    int i;\n     \n    for(i = 0; i < octaves; i+=1)\n    {\n        amp *= gain; \n        sum += amp * mynoise(pp);\n        pp *= lacunarity;\n    }\n    return sum; \n}\n\nconst float lacunarity = 6.0;\nconst float gain = 0.5;\nconst int octaves = 2;\n\n#define FBM(p) fbm( p, octaves, lacunarity, gain )\n#define time iTime * 0.1 \n\nfloat pattern1( in vec2 p )\n{\n    return FBM(p);\n}\n\nfloat pattern2( in vec2 p )\n{\n    vec2 q = vec2( FBM( p + vec2(0.0,0.0) + time),\n                   FBM( p + vec2(5.2,1.3) ) - time);\n\n    return FBM( p + 4.0*q  );\n}\n\nfloat pattern3( in vec2 p )\n{\n    vec2 q = vec2( FBM( p + vec2(0.0,0.0) + time),\n                  FBM( p + vec2(5.2,1.3) - time) );\n\n    vec2 r = vec2( FBM( p + 4.0*q + vec2(1.7,9.2) + time ),\n                  FBM( p + 4.0*q + vec2(8.3,2.8) - time ) );\n\n    return FBM( p + 4.0*r );\n}\n\nvec3 firePalette(float i, float exposure){\n\n    float T = 1400. + 1300.*i; // Temperature range (in Kelvin).\n    vec3 L = vec3(7.4, 5.6, 4.4); // Red, green, blue wavelengths (in hundreds of nanometers).\n    L = pow(L,vec3(5.0)) * (exp(1.43876719683e5/(T*L))-1.0);\n    return 1.0-exp(-exposure*1e8/L); // Exposure level. Set to \"50.\" For \"70,\" change the \"5\" to a \"7,\" etc.\n}\n\n#define UVMUL 8.0;\nvec3 fancyCol = vec3(0.45, 0.1, 0.02);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy * UVMUL;\n    //float n = mynoise(uv);\n\n   \n    float n = pattern3(uv);\n    float edge = float(any(lessThan(fract(uv), vec2(0.03))));\n    \n    //vec3 col = fancyCol / n;\n    //col = pow(col, vec3(1.6));\n    \n    //vec3 col = firePalette(0.25, 5.0)/n;\n    vec3 col = firePalette(0.4, 5.0) / pattern3(uv);\n    \n    col += vec3(edge, edge, edge);\n    fragColor = vec4(col, 1.0);\n    \n}","name":"Image","description":"","type":"image"}]}