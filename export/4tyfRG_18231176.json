{"ver":"0.1","info":{"id":"4tyfRG","date":"1542843357","viewed":190,"name":"My Noise Library","username":"feiss","description":"noises and perlin functions in 1d, 2d and 3d","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["noise","perlin"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SEED 19.1252\n\nfloat noise(float t) {\n\treturn fract(sin(t*114343. + SEED) * 2256.);\n}\n\nfloat noise(vec2 uv) {\n\treturn fract(sin(uv.x*13423. + uv.y*14244. + SEED) * 422344.);\n}\n\nfloat noise(vec3 uv) {\n\treturn fract(sin(uv.x*123243. + uv.y*424. + uv.z*642. + SEED) * 1524.);\n}\n\nfloat smoothNoise(vec2 uv, float frec){\n    vec2 luv = smoothstep(0.0, 1.0, fract(uv * frec));\n    vec2 id = floor(uv * frec);\n    float bl = noise(id);\n    float br = noise(id + vec2(1.0, 0.0));\n    float tl = noise(id + vec2(0.0, 1.0));\n    float tr = noise(id + vec2(1.0, 1.0));\n\tfloat a = mix(bl, br, luv.x);\n\tfloat b = mix(tl, tr, luv.x);\n    return mix(a, b, luv.y);\n}\n\nfloat smoothNoise(vec3 uvw, float frec){\n    vec3 luvw = vec3(smoothstep(0.0, 1.0, fract(uvw.xy * frec)), fract(uvw.z * frec)); \n    vec3 id = floor(uvw * frec);\n    float blt = noise(id);\n    float brt = noise(id + vec3(1.0, 0.0, 0.0));\n    float tlt = noise(id + vec3(0.0, 1.0, 0.0));\n    float trt = noise(id + vec3(1.0, 1.0, 0.0));\n\n    float blb = noise(id + vec3(0.0, 0.0, 1.0));\n    float brb = noise(id + vec3(1.0, 0.0, 1.0));\n    float tlb = noise(id + vec3(0.0, 1.0, 1.0));\n    float trb = noise(id + vec3(1.0, 1.0, 1.0));\n    \n\tfloat a = mix(blt, brt, luvw.x);\n\tfloat b = mix(tlt, trt, luvw.x);\n\tfloat c = mix(a, b, luvw.y);\n\n  \tfloat d = mix(blb, brb, luvw.x);\n\tfloat e = mix(tlb, trb, luvw.x);\n\tfloat f = mix(d, e, luvw.y);\n\n    return mix(c, f, luvw.z);\n}\n\n\nfloat perlin(vec2 uv, int octaves, float frec, float frecMult){\n    float c = smoothNoise(uv, frec);\n    float ampMult = 1.0;\n    float ampAccum = 1.0;\n    for (int i = 1; i < octaves; i++){\n \t\tfrec *= frecMult;\n        ampMult *= 0.5;\n        ampAccum += ampMult;\n        c += smoothNoise(uv, frec) * ampMult;\n    }\n    return c / ampAccum;\n}\n\n\nfloat perlin(vec3 uvw, int octaves, float frec, float frecMult){\n    float c = smoothNoise(uvw, frec);\n    float ampMult = 1.0;\n    float ampAccum = 1.0;\n    for (int i = 1; i < octaves; i++){\n \t\tfrec *= frecMult;\n        ampMult *= 0.5;\n        ampAccum += ampMult;\n        c += smoothNoise(uvw, frec) * ampMult;\n    }\n    return c / ampAccum;\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 col = vec3(perlin(vec3(uv, iTime / 2.0), 8, 3.0, 2.0) - noise(uv)*0.02);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}