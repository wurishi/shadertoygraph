{"ver":"0.1","info":{"id":"4ltGWl","date":"1472403050","viewed":2094,"name":"HG vs Schlick Phase Function","username":"nlguillemot","description":"Side-by-side comparison of Henyey-Greenstein phase function and its Schlick phase function approximation.\nHold left-click to tweak the preferred scattering direction parameter.\nTop: Henyey-Greenstein\nBottom: Shlick","likes":31,"published":1,"flags":0,"usePreview":0,"tags":["henyeygreensteinshlickphasefunction"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define M_PI 3.14159265359\n\n// Equations from http://patapom.com/topics/Revision2013/Revision%202013%20-%20Real-time%20Volumetric%20Rendering%20Course%20Notes.pdf\n\nfloat HenyeyGreenstein(float g, float costh)\n{\n    return (1.0 - g * g) / (4.0 * M_PI * pow(1.0 + g * g - 2.0 * g * costh, 3.0/2.0));\n}\n\nfloat Schlick(float k, float costh)\n{\n    return (1.0 - k * k) / (4.0 * M_PI * pow(1.0 - k * costh, 2.0));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // compute \"g\"/\"k\" from mouse X coordinate\n    float g = iMouse.x * 2.0 / iResolution.x - 1.0;\n    \n    // fake a mouse position to make a better icon for shadertoy\n    if (iMouse.xy == vec2(0.0))\n        g = 0.7;\n    \n    // This parameter conversion makes Schlick approximately match HG.\n    float k = 1.55*g - 0.55*g*g*g;\n    \n    // make position from -1 to 1 in x and y, with (0,0) in the center of the screen.\n    vec2 pos = fragCoord * 2.0 / iResolution.xy - vec2(1.0);\n    \n    // implement the split-screen effect\n    if (fragCoord.y >= iResolution.y / 2.0)\n        pos.y = (pos.y - 0.5) * 2.0;\n    else\n        pos.y = (pos.y + 0.5) * 2.0;\n    \n    // compute cos(theta) used as input to Phase Function\n    // = dot((1,0), pos) / (length((1,0)) * length(pos))\n    // = dot((1,0), pos) / length(pos)\n\tfloat costh = pos.x / length(pos);\n    \n    // compute Phase Function\n    float p;\n    if (fragCoord.y >= iResolution.y / 2.0)\n        p = HenyeyGreenstein(g, costh);\n    else\n        p = Schlick(k, costh);\n    \n    // convert to a color\n    vec4 color = vec4(vec3(p),1.0);\n    \n    // gamma-correct it\n    color.rgb = pow(color.rgb, vec3(1.0/2.2));\n    \n    // render it        \n    fragColor = color;\n}","name":"Image","description":"","type":"image"}]}