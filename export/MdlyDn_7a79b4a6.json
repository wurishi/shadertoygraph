{"ver":"0.1","info":{"id":"MdlyDn","date":"1545319288","viewed":132,"name":"Koleidoskopic Distance","username":"gPlatl","description":"Show 2d koleidoskopic projection distance.    mouse.x -> changes leave count","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["2d","distance","koleidoskop"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//----------------------------------------------------------\n// KoleidoskopicDistance.glsl\n// Show 2d koleidoskopic projection distance.    \n// mouse.x -> changes leave count\n// Based on:   \n//  Flower-DF:         https://www.shadertoy.com/view/MldXRN\n//  Ellipse-Distance:  https://www.shadertoy.com/view/4sS3zz\n//----------------------------------------------------------\n\nconst float TWO_PI  = 6.28318530718;\n\n//----------------------------------------------------------\nfloat sdKoleidoskopic(vec2 pos, int N) // calculate distance\n{\n    float st = sin(iTime*0.4);\n\tfloat ka = atan(pos.x, pos.y) / TWO_PI * float(N);\n    return length(pos) - mix(0.6, 0.5+st,abs(fract(ka)-.5));\n}\n//----------------------------------------------------------\nvec3 distanceColors (in float d)         // d=distance \n{\n  vec3 color = vec3(0.1, 0.4, 0.7);      // inner color\n  color = vec3(1.0) - sign(d)*color;     // + outer color\n  color *= 1.0 - exp(-2.0*abs(d));       // distance darken\n  color *= 0.8 + 0.2*cos(120.0*abs(d));  // distance lines \n  color = mix(color, vec3(1.0), 1.-smoothstep(0.0,0.02,abs(d)));  //white frame\n  return color;  \n}\n//----------------------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord*2.0 -iResolution.xy) / iResolution.y;\n    \n    int leaves = 10 - int (10.*iMouse.x / iResolution);\n    \n    float d = sdKoleidoskopic (uv, leaves);    \n\n    fragColor = vec4(distanceColors(d),1);\n}","name":"Image","description":"","type":"image"}]}