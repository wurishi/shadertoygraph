{"ver":"0.1","info":{"id":"XlVBW1","date":"1542403465","viewed":720,"name":"bluenoise zoom","username":"FabriceNeyret2","description":"Spectrally best possible zoom extrapolation is done using Sinc filter.\nFinite filter: use Lanczos version.\n-> bluenoise vs whitenoise Sinc reconstruction. (you can also try with image textures)\nclick: filter on/off","likes":9,"published":3,"flags":0,"usePreview":0,"tags":["bluenoise","sinc","reconstruction"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define Width      5.                            // filter radius \n#define scale      8.                            // zoom\n#define S          1.                            // recons scale\n#define Filter(x)  Lanczos(x)\n\n#define sinc(x)    sin(PI*(x)) / (1e-30+PI*(x))\n#define Sinc(x)    sinc((x)/S)                           // Sinc\n#define Lanczos(x) sinc((x)/S) * sinc((x)/W)             // Lanczos\n#define Hann(x)    sinc((x)/S) * (.5+.5* cos(PI*(x)/W) ) // Hann\n#define PI         3.14159265359\n\nvec2 R;\n\nvec4 T(vec2 U) {\n    //return vec4(mod(floor(U),16.)==U-U); // test: impulse response\n    return ( U.x<R.x/2. ? texelFetch(iChannel0, ivec2(mod(U,iChannelResolution[0].y)),0)\n                        : texelFetch(iChannel1, ivec2(mod(U,iChannelResolution[1].y)),0)\n           )\n#if 1             // 1: grey  0: color\n        .xxxx\n#endif\n        ;\n}\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    O-=O;\n    R = iResolution.xy; \n    if (U.x-.5==R.x/2.) { O.r++; return; } // separator\n    float W = sign(U.y/R.y-.5)!=sign(iMouse.z-1.) ? Width : 0.5; // filter size\n    U /= scale; R /= scale;\n    \n    float t=0.;\n    for (float y=-W; y<W; y++) {           // convolution\n        for (float x=-W; x<W; x++) {\n            vec2 P = ceil(U+vec2(x,y)), F = U-P,\n            W = Filter(F);                 // reconstruction filter\n            O += W.x*W.y* ( T(P) - .5);\n            t += W.x*W.y;\n        }\n    }\n    O = .5 + 1.*O/t;                       // scale intensity\n  //O = O.x>1.? vec4(1,0,0,0) :O.x<0.? vec4(0,0,1,0) : O; // show overshoots\n    O = sqrt(O);                           // to sRGB\n}","name":"Image","description":"","type":"image"}]}