{"ver":"0.1","info":{"id":"ttcXD2","date":"1581711084","viewed":227,"name":"Multi-sampling Motion blur 3D","username":"winlandiano","description":"A moving ball in 3D space. Motion blurred by averaging the multi-sampling of past 24 frames.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["motionblur","multisampling"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2020 Ridge/winlandiano\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// A moving ball in 3D space. Motion blurred by averaging the multi-sampling of past 24 frames.\n\n#define BACKGROUND vec3(0, 0.17, 0.19)\n#define SAMPLE_COUNT 24.\n#define DIRECTIONAL_LIGHT_TYPE 51\n\n#define INF 10000000000.0f\n#define PI 3.141592653589793\n\nstruct Ray {\n    vec3 origin;\n    vec3 direction;\n};\n\nstruct Camera {\n    vec3 position;\n};\n\nstruct LightSource {\n    vec3 position;\n    float intensity;\n    vec3 color;\n    int type;\n};\n    \nstruct Intersection {\n    vec4 P;\n    vec3 N;\n    vec3 V;\n};\n\nfloat SphereIntersect(Ray r, vec3 center, float radius) {\n    // geometric method\n    vec3 L = center - r.origin;\n    float d = length(L);\n    float d2 = d * d;\n    float cos_theta = dot(normalize(L), r.direction);\n    float cos_theta2 = cos_theta * cos_theta;\n    if (cos_theta <= 0.) {\n        return INF;\n    }\n    float sin_theta2 = 1. - cos_theta2;\n    float r2 = radius * radius;\n    float intersect_half2 = r2 - d2 * sin_theta2;\n    if (intersect_half2 < 0.) {\n        return INF;\n    }\n    float center_project_dist = d * cos_theta;\n    float intersect_half = sqrt(intersect_half2);\n    float t0 = center_project_dist - intersect_half;\n    if (t0 < 0.) {\n        return center_project_dist + intersect_half;\n    } else {\n        return t0;\n    }\n}\n\n// ----------------  shading technics  ----------------\nvec3 Lambertian(vec3 N, LightSource light) {\n    return clamp(light.color * light.intensity * dot(N, -light.position), 0., 1.) + vec3(0.1);\n}\n\n// ----------------  shading technics ends  ----------------\nvec3 Render(Ray r, float time, LightSource light) {\n    vec3 col = vec3(0);\n\n    float angle = PI * cos(time) * 4.;\n    vec3 center = vec3(cos(angle), 0, 3. + sin(angle));\n    const float radius = 0.5;\n\n    float t_min = SphereIntersect(r, center, radius);\n\n    // only directional light\n    if (t_min < INF) {\n        vec4 P = vec4(r.origin + r.direction * t_min, 1.);\n        vec3 N = normalize(P.xyz - center);\n        col += Lambertian(N, light);\n    } else {\n        col = BACKGROUND;\n    }\n    return col;\n}\n\nCamera camera;\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - .5 * iResolution.xy) / iResolution.y;\n\n    // Setup scene\n    LightSource light = LightSource(normalize(vec3(-1, -1, 1)), 1., vec3(1, 1, 1), DIRECTIONAL_LIGHT_TYPE);\n    camera = Camera(vec3(0, 0, 0));\n\n    Ray r = Ray(camera.position, normalize(vec3(uv, 1)));\n\tvec3 col = vec3(0);\n    float dt = iTimeDelta / 10.;\n    for (float time = iTime - dt * SAMPLE_COUNT; time <= iTime; time += dt) {\n        col += Render(r, time, light);\n    }\n    col /= SAMPLE_COUNT;\n\n    fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"}]}