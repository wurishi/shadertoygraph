{"ver":"0.1","info":{"id":"wsf3DX","date":"1547840178","viewed":71,"name":"tesdty","username":"Frankie_ST","description":"zsfdghdfz","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n\nfloat Circle(vec2 uv, vec2 pos , float r, float blur){\n    float d = length(uv  - pos);\n    \n    return smoothstep(r, r - blur, d);\n}\n\nfloat gearEmpty(vec2 uv, vec2 pos, float scale, float blur){\n \tuv -= pos;\n    uv *= rotate2d(3.0 + iTime);\n    uv /= scale;\n    float a = atan(uv.x, uv.y);\n    \n    float r = length(uv)*2.0;\n    \n    float f = smoothstep(-.5,1., cos(a*10.))*0.2+0.5;\n    float step1 = smoothstep(f - blur,f,r);\n    float step2 = smoothstep(f,f+blur,r);;\n    return step1 - step2;\n}\n\nfloat gearFull(vec2 uv, vec2 pos, float scale, float blur){\n \tuv -= pos;\n    uv *= rotate2d(3.0 + iTime);\n    uv /= scale;\n    float a = atan(uv.x, uv.y);\n    \n    float r = length(uv);\n    \n    float f = smoothstep(-.5,1., cos(a*10.))*0.2+0.5;    \n    return 1.0 -smoothstep(f,f+blur,r);;\n}\n\nfloat gearFull(vec2 uv, vec2 pos, float scale, float high, float blur){\n \tuv -= pos;\n    //uv *= rotate2d(3.0 + iTime);\n    uv /= scale;\n    float a = atan(uv.x, uv.y);\n    \n    float r = length(uv);\n    \n    float f = smoothstep(-.5,1., cos(a*10.))*0.2 * high +0.5;    \n    return 1.0 -smoothstep(f,f+blur,r);;\n}\n\nfloat plot (vec2 uv, float pct){    \n  return  smoothstep( pct-0.01, pct, uv.y) -\n          smoothstep( pct, pct+0.01, uv.y);\n}\n\nfloat cosLine(vec2 uv, float pct){\n    uv *= 2.;\n    uv.y -= smoothstep(-0.8, 1.,cos(uv.x*20.0)) * 0.2 ;\n    return plot(uv, pct);\n}\n\nfloat Smiley(vec2 uv, vec2 p, float size, float blur){\n    uv -= p;    \n    uv /= size;\n    float mouth = Circle(vec2(uv.x, uv.y / sin(iTime)), vec2(0.), .3, blur);\n    mouth-= Circle(vec2(uv.x, uv.y / abs(sin(iTime))), vec2(0., .1), .3, blur);\n    \n    float mask = Circle(uv, vec2(.0), .4, blur);\n    mask -= Circle(uv, vec2(-.13, .2), .07, blur);\n    mask -= Circle(uv, vec2(.13, .2), .07, blur);   \n   \n    \n    if(uv.y < 0.05)\n       mask -= mouth;\n    return mask;\n}\n\nfloat Band(float t, float start, float end, float blur){\n \tfloat step1 = smoothstep(start - blur, start + blur, t);\n    float step2 = smoothstep(end + blur, end - blur, t);\n    return step1 * step2;\n}\n\nfloat Rect(vec2 uv, float left, float right, float bottom, float top, float blur){\n\tfloat band1 = Band(uv.x, left, right, blur);\n    float band2 = Band(uv.y, bottom, top, blur);\n    return band1 * band2;\n}\n\nfloat Line(vec2 uv, vec2 begin, vec2 end, float width, float blur){\n    uv -= begin;\n \tvec2 div = end - begin;\n    uv *= rotate2d(atan(div.x, div.y));\n    float d = length(div);\n    return Rect(uv, - width/2., width/2., .0, d, blur);        \n}\n\nfloat Wheel(vec2 uv, vec2 pos, float scale, float blur){\n    //gearFull((uv-pos)*rotate2d(3.0 + iTime), vec2(.0), scale, .5, blur)\n \tfloat result = gearFull(uv, pos, scale, .2, blur) - Circle(uv, pos, .45 * scale, blur);\n    for(int i = 0; i < 12; i++)\n        result += Line(uv, pos, vec2(pos.x, pos.y + 0.45* scale) * rotate2d(float(i)*3.14 * 2./12.), .01, blur/5.); \n    return result;\n}\nfloat GearChain(vec2 uv, vec2 pos, float scale, float blur){\n    float result = gearFull(uv, pos, scale, .5, blur) - Circle(uv, pos, .15 * scale, blur);\n    return result;\n}\n\nfloat Chain(vec2 uv){\n    float result = (Circle(uv, vec2(-.1,-.25) , .09, .001) - Circle(uv, vec2(-.1,-.25) , .086, .001))*\n        (1.0 - Circle(uv, vec2(-.15,-.25) , .09, .001));\n    result += Circle(uv, vec2(-.4, -.2) , .03, .001) - Circle(uv, vec2(-.4, -.2) , .026, .001);\n    result *= (1.0 - Circle(uv, vec2(-.38, -.205) , .03, .001));\n    result += Line(uv, vec2(-.1, -.162), vec2(-.4, -.173), .004, .001);\n    result += Line(uv, vec2(-.12, -.335), vec2(-.4, -.23), .004, .001);\n    return result;\n}\n\nfloat Rama(vec2 uv){\n \tfloat result = Line(uv, vec2(-.4, -.2), vec2(-.1,-.25), .02, .001);\n    result += Line(uv, vec2(-.1, .0), vec2(-.4, -.2), .02, .001);\n    result += Line(uv, vec2(-.1, -.25), vec2(-.1, .05), .02, .001);\n    result += Line(uv, vec2(.4, -.2), vec2(.35, .15), .02, .001);\n    result += Line(uv, vec2(-.1, -.25), vec2(.35, .08), .02, .001);\n    result += Line(uv, vec2(-.1, .0), vec2(.35, .08), .02, .001);\n    result += Line(uv, vec2(.3, .13), vec2(.4, .18), .02, .001);\n    result += Line(uv, vec2(-.15, .05), vec2(.0, .05), .02, .001);\n    return result;\n}\n\nvec3 Vechicle(vec2 uv, vec2 pos, float scale, float blur){\n    uv -= pos;\n    uv /= scale;\n    vec2 w_pos1 = vec2(-.4, -.2), w_pos2 = vec2(.4, -.2);\n    \n    float wls = Wheel((uv-w_pos1)*rotate2d(iTime), vec2(.0, .0), .38, .01) +  \n        Wheel((uv-w_pos2)*rotate2d(iTime), vec2(.0, .0), .38, .01);\n        \n    float smile = Smiley(uv, vec2(.0, .3), .2, .01);\n        \n    float rama = Rama(uv);\n    float g_chain1 = GearChain((uv-vec2(-.1, -.25))*rotate2d(iTime), vec2(.0, .0), .15, .01);\n    float g_chain2 = GearChain((uv-vec2(-.4, -.2))*rotate2d(iTime), vec2(.0, .0), .05, .01);\n    float chain = Chain(uv);\n    \n    vec3 result = vec3(1., .0, 1.) * wls*(1.0 - rama);\n    result += vec3(.0, .0, 1.) * rama;\n    result += vec3(1., 1., 1.) * g_chain1;\n    result *= 1.0 - g_chain2;\n    result += vec3(1., 1., 1.) * g_chain2;\n    result *= 1.0 - chain;\n    result += vec3(1., .0, .0) * chain;\n    //result -= vec3(.0, .0, 1.) * (wls*rama);\n    \n    return result;\n}\n\n\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\tuv -= 0.5;\n    uv.x *= iResolution.x / iResolution.y;\n    float d = length(uv);\n    \n    //float smile = Smiley(uv, vec2(-.45, -.1), .5, .01);\n    float smile = Smiley(uv, vec2(-.0, .25), .15, .01);   \n    \n    \n    vec3 result = vec3(1., 1., 1.) * smile;\n    //vec3 result = vec3(1., .0, 1.) * cl;\n    result += Vechicle(uv, vec2(.0), .5, .01);\n    //result += vec3(1., .0, 1.) * line;\n     \n    // Output to screen\n    fragColor = vec4(result,1.);\n}","name":"Image","description":"","type":"image"}]}