{"ver":"0.1","info":{"id":"Mcf3Wf","date":"1703655481","viewed":147,"name":"radial blur buffer loop","username":"ChunderFPV","description":"Quick and dirty radial blur.\n\nAlso, just for the hell of it here's a hexagonal tile version: https://www.shadertoy.com/view/Mff3Ds","likes":22,"published":1,"flags":32,"usePreview":1,"tags":["2d","blur","radial","ball","disco","buffer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// copy/past this code into your image tab with your shader code in buffer A\n// make sure that filter: mipmap is selected in iChannel0\n// if you're shader looks funky you may need to clamp the output in \n// buffer A: clamp( c, vec3(0), vec3(1) )\n\nvoid mainImage( out vec4 C, in vec2 U )\n{\n    vec2 R = iResolution.xy,\n         u = U/R;\n    \n    vec3 c = texture(iChannel0, u).rgb; // buffer A\n    c *= c;\n    \n    float l = 50.,  // loop size\n          j = 1./l, // increment size\n          d = 1.,   // blur direction (-1 for inward blur)\n          aa = length((U+U-R)/R.y*2.), // mipmap aa\n          i = j, b = j, k;\n    \n    for (; i<=1.; i+=j)\n        k = sqrt(i), // scale brightness\n        c += texture(iChannel0, mix(u, vec2(.5), d-sqrt(i)*d), aa).rgb*k*b;\n    \n    C = vec4(c + c*c, 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define H(v) (cos(radians(vec3(0, 60, 120))+(v)*6.2832)*.5+.5)  // hue\nvoid mainImage( out vec4 C, in vec2 U )\n{\n    float s = 15., // scale\n          t = iTime/60.,\n          pi2 = 6.2832,\n          p;\n    \n    vec2 R = iResolution.xy,\n         m = (iMouse.xy-R/2.)/R.y*s, // mouse\n         u = (U-R/2.)/R.y*s, // coords\n         g;\n    \n    if (iMouse.z < 1.) m = 2.*vec2(sin(t*pi2)*2., sin(t*pi2*2.)); // fig-8 movement\n    \n    u /= 1.-dot(u, u)/s; // transform\n    u -= m; // move coords with mouse\n    \n    g = abs(mod(u, 1.)-.5)*1.5; // form grid\n    p = .7*min(1., length(fwidth(u))/length(u-round(u))); // form points\n    \n    vec3 c = H( pow(length(round(u)), 2.)*t ) // color pattern\n           * min(g.x, g.y); // square tile\n    c += (p*p + p*c); // add points\n    c /= max(1., pow(length(u+m), 2.)/30.); // darken\n    c += c*texture(iChannel0, u).rgb; // texture\n    C = vec4(c, 1);\n}","name":"Buffer A","description":"","type":"buffer"}]}