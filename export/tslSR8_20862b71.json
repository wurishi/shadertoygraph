{"ver":"0.1","info":{"id":"tslSR8","date":"1550618835","viewed":179,"name":"WHY IS THIS FREQUENCY ESCALATING","username":"QM","description":"I can not explain why the sound is like it is... ever escalating. do you hear it as well?\n\ndoes anyone have a tip to explain this weird sound..? u get a beer at Revision from me (Team210)","likes":4,"published":1,"flags":8,"usePreview":0,"tags":["weird","problem"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.yy*4.;\n\n    float freq0 = 400.;\n    float time = uv.x;\n    float freq_mod = 1. + .5*sin(6.2831*time);\n    float d = sin(6.2831 * freq0 * freq_mod * time)*.3;\n    \n\td = abs(uv.y-freq_mod)-.02;\n    \n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\tcol = mix(vec3(0.),col,smoothstep(1.5/iResolution.y, -1.5/iResolution.y, d));\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"float E1(float x)\n{\n    if(x==0.)\n        return 0.;\n    else\n        return -log(x) - .0577 + x -.25*x*x + .552*x*x*x - .01*x*x*x*x;\n}\n\n//float F(float x){return 1. + .3333*x + .1*x*x * .0238*x*x*x + .0046*x*x*x*x;}\nfloat F(float x){return 1. + .33*x;}\n\nvec2 mainSound( in int samp, float time )\n{\n    //THIS IS STUNNING ME. sin(x) should be in [-1; 1] FOR ALL X\n    float freq_mod = 1. + .5 * sin(6.2831*time);\n\n    // therefore, freq_mod should be in [.5; 1.5]. right?\n    \n    // yet, the frequency of this sound does not stay between [200; 600] Hz.\n    // it is escalating without end. how come?\n\n    float freq0 = 55.;\n\n    float shitty_phase = 6.2831 * freq0 * freq_mod * time;\n\n    // THIS SUCKS (SUCKED)\n    //return vec2( sin(shitty_phase)*.3 );\n\n    \n    // with great helpful input from rory:618\n    // trying different sliding moves: linear, quadratic, exponential\n    \n    float lambda = log(2.)/12.;\n    float delta_note = 24.;\n    float ld = lambda * delta_note;\n    float slide_time = 1.; // in seconds\n    float slide_proc = min(time, slide_time)/slide_time;\n\n    float lin_phase = 6.2831 * freq0 * exp(ld) * slide_time/ld * (1.-exp(-ld*slide_proc));\n\n    float sqr_ = (1.-slide_proc)*(1.-slide_proc);\n    float quad_phase = 6.2831 * freq0 * slide_time * (F(ld) - (1.-slide_proc)*F(ld*sqr_));\n\n    float gamma = 5.;\n    float exp_phase = 6.2831 * freq0 * slide_time/gamma * (E1(ld)-E1(ld*exp(-gamma*slide_proc)));\n    \n    //float phase = lin_phase;\n    float phase = quad_phase;\n    //float phase = exp_phase;\n    \n//    if(time > slide_time) phase += 6.2831 * freq0 * time;\n    if(time >= slide_time)\n        phase += 6.2381 * mod(freq0 * time,1.);\n    \n    return vec2( (sign(sin(phase))+sign(sin(phase*.97)))*.15 );\n\n    // Thank you so much. This clarified a lot!\n    // I have confirmed this effect on at least two machines. I am out of ideas.\n    // - QM\n}","name":"Sound","description":"","type":"sound"}]}