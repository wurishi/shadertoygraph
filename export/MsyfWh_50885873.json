{"ver":"0.1","info":{"id":"MsyfWh","date":"1528548732","viewed":246,"name":"Roses are blue","username":"Flopine","description":"Roses are red\nViolets are blue\nShaders are cool\nI like to swim in pools","likes":15,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","flower","glow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Code by Flopine\n// Thanks to wsmind, leon, lsdlive, lamogui and XT95 for teaching me <3 cookie collective rulz\n\n\n#define ITER 64.\n#define PI 3.141592\n#define MAT_LIANE 0.\n#define MAT_FLOWER 1.\n\nvec2 moda (vec2 p, float per)\n{\n   float a = atan(p.y, p.x);\n    float l = length(p);\n    a = mod(a-per/2.,per)-per/2.;\n    return vec2(cos(a),sin(a))*l;\n}\n\n// iq's palette https://iquilezles.org/articles/palettes\nvec3 palette (float t, vec3 a, vec3 b, vec3 c, vec3 d)\n{return a+b*cos(2.*PI*(c*t+d));}\n\nvec2 mo (vec2 p, vec2 d)\n{\n    p.x = abs(p.x)-d.x;\n    p.y = abs(p.y) - d.y;\n    if (p.y>p.x) p.xy = p.yx;\n    return p;\n}\n\nmat2 rot (float a)\n{return mat2(cos(a),sin(a),-sin(a),cos(a));}\n\nfloat stmin (float a, float b, float k, float n)\n{\n    float st = k/n;\n    float u = b-k;\n    return min(min(a,b), 0.5 * (u+a+abs(mod(u-a+st, 2.*st)-st)));\n}\n\nvec2 path(float t) \n{\n\tfloat a = sin(t*.2 + 1.5), b = sin(t*.2);\n\treturn vec2(a*2., a*b);\n}\n\nfloat sphe (vec3 p, float r)\n{return length(p)-r;}\n\nfloat od ( vec3 p, float d)\n{return dot(p, normalize(sign(p)))-d;}\n\nfloat cyl(vec2 p, float r)\n{return length(p)-r;}\n\nfloat prim1 (vec3 p)\n{\n    float r = .8;\n    float s = sphe(p,r);\n    for (int i = 0; i < 5; i++)\n    {\n        r -= 0.15;\n     \tp.y += r*2.;\n        float b = length(max(abs(p)-vec3(0.5),0.));\n        s = min(min(s, sphe(p,r)),b);\n    }\n    return s;\n}\n\nfloat prim2 (vec3 p)\n{\n\t\n    float o = od(p, 1.2);\n    p.xz *= rot(iTime);\n    p.xy = mo(p.xy, vec2(2.));\n    p.yz = moda(p.yz, 2.*PI/5.);\n    p.y -= 2.;\n    return stmin(prim1(p), o, 0.5, 5.);\n}\n\nvec2 flower(vec3 p)\n{ \n    p.xy = moda(p.xy, 2.*PI/5.);\n    p.x -= 2.;\n    return vec2(prim2(p), MAT_FLOWER); \n}\n\nvec2 liane (vec3 p)\n{\n    p.yx = moda(p.yx, 2.*PI/7.);\n    p.y -= 7.*(sin(iTime*0.5)+1.*0.4);\n    p.x += sin(p.y+iTime*2.);\n    return vec2(cyl(p.xz, 1.- abs(p.y)*0.15), MAT_LIANE);\n}\n\nvec2 mat_min(vec2 a, vec2 b)\n{\n    if (a.x < b.x) return a;\n    else return b;\n}\n\nfloat g = 0.;\n\nvec2 SDF (vec3 p)\n{\n    float per = 30.;\n\n    p.xz = mod(p.xz-per/2., per) -per/2.;\n    p.yz *= rot(PI/2.);\n    vec2 f = flower(p);\n    p.z -= 1.5;\n\t\n    vec2 d = mat_min(liane(p), f);\n    // glow from lsdlive, originally from balkhan : https://www.shadertoy.com/view/4t2yW1\n    g += 0.01/(0.01+d.x*d.x);\n    \n    return d;\n}\n\n////////////////////////////////////////////////////////////////////\n// CAMERA\nvec3 getcam (vec3 eye, vec3 lookat, vec2 uv, float fov)\n{\n    vec3 forward = normalize(lookat-eye);\n    vec3 right = cross(vec3(0.,1.,0.),forward);\n    vec3 up = cross(forward, right);\n    return normalize(forward*fov+right*uv.x+up*uv.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = 2.*(fragCoord/iResolution.xy)-1.;\n\tuv.x *= iResolution.x/iResolution.y;\n    \n    vec3 ro = vec3(2.,10.,-5.+iTime*5.); vec3 p = ro;\n    vec3 target = vec3(0.,0., 1.+iTime*5.);\n    vec3 dir = getcam(ro, target,uv,0.4);\n    \n    float shad = 0.;\n    vec3 c = vec3(0.);\n    \n    vec3 back = palette(length(uv),\n                       vec3(0.5),\n                       vec3(0.5),\n                       vec3(0.08),\n                       vec3(0.5,0.1,0.7));\n    \n    for (float i = 0.; i<ITER; i++)\n    {\n    \tvec2 d = SDF(p);\n        if (d.x < 0.001)\n        {\n            shad = i/ITER;\n            if (d.y == MAT_LIANE) c = vec3(1.-shad)*palette(i,\n                                                     vec3(0.2,0.8,0.2),\n                                                     vec3(0.5),\n                                                     vec3(0.04),\n                                                     vec3(0.5));\n            \n            if (d.y == MAT_FLOWER) c = vec3(1.-shad)*palette(p.z,\n                                                     vec3(0.6,0.1,0.2),\n                                                     vec3(0.9),\n                                                     vec3(0.05),\n                                                     vec3(0.1,0.2,0.3));\n            break;\n        }\n        p+= d.x * dir *0.3;\n    }\n\n    float t = length(ro-p);\n    c = mix(c,vec3(0.2,0.,0.1), 1.-exp(-0.001*t*t))+(g*length(uv)*0.02);\n\n    // Output to screen\n    fragColor = vec4(c,1.0);\n}","name":"Image","description":"","type":"image"}]}