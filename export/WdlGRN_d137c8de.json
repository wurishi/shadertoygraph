{"ver":"0.1","info":{"id":"WdlGRN","date":"1545207334","viewed":492,"name":"wangrenzhu","username":"wangrenzhu","description":"TestAudio for spectrum","likes":12,"published":1,"flags":4,"usePreview":0,"tags":["audio","wangrenzhu"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdXGRr","filepath":"/presets/mic.png","previewfilepath":"/presets/mic.png","type":"mic","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// by Nikos Papadopoulos, 4rknova / 2014\n// Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// Coloring function is based on DXRob's Aura Shader:\n// https://www.shadertoy.com/view/lsXXDj\n\n#define PI  3.14159265359\n#define EPS .001\n\n#define CIRCLE_RADIUS .5\n#define CIRCLE_GLOW   .1\n#define SAMPLE_SCALE  .2\n\nfloat hash(vec2 p)\n{\n    return fract(sin(dot(p,vec2(127.1,311.7))) * 43758.5453123);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // 1. Calculate the uv coordinates in [-1, 1] xy space.\n\tvec2  uv = fragCoord.xy / iResolution.xy * 2. - 1.;\n    \n    // 2. Sample the audio stream.\n    // Calculate the polar coordinates based on uv value.\n    // Atan will return a value in the range of [-1, 1] so\n    // we need to transform back to [0, 1] before sampling.\n    float x = atan(-uv.x, -uv.y) / PI;\n    // The samples are not going to seamlessly merge on the edges\n    // so what we are going to do to make it nicer is display them\n    // twice and invert the sampling order for the second repetition.\n    x = (x < 0. ? 1. + x : 1. - x);\n    vec3  s = texture(iChannel0, vec2(x, .25)).xyz * SAMPLE_SCALE;\n        \n    // 3. Define the geometry.\n    // Correct the uv coordinates with regards to the aspect\n    // ratio to calculate correct circle radius.\n    vec2  cv = uv * vec2(iResolution.x / iResolution.y, 1.);\n    float ds = length(cv);\n         \n    // 4. Calculate the pixel color.\n    float sr = (ds - s.x) / CIRCLE_RADIUS;\n    float cl = (1. - sqrt(abs(1. - sr))) / sr + CIRCLE_GLOW;\n\n    // 5. PostFX\n    vec3 col = cl * vec3(abs(cos(iTime)), .5 + uv.x * uv.y, ds - uv.y);\n    float grain = hash(hash(uv) * cv * iTime) * .05;\n    float fade  = smoothstep(EPS, 2., iTime);\n\n    fragColor = vec4((col + grain) * fade, 1);\n}","name":"Image","description":"","type":"image"}]}