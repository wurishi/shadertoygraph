{"ver":"0.1","info":{"id":"ctXcR2","date":"1691556179","viewed":29,"name":"Random Cube","username":"AntonJeva","description":"a cube with holes.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["shader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST 0.01\n\n#define SPHERE_SPEED .45\n#define SPHERE_SPACING 167.\n#define SPHERE_ORBIT 4.85\n#define SPHERE_ORBIT_RATIO .01\n#define SPHERE_RADIUS 1.3\n#define SPHERE_COUNT 15.\n\n#define COLOR_SPEED .47\n#define COLOR_SPACING 780.\n#define COLOR_ORBIT 5.7\n#define COLOR_ORBIT_RATIO .01\n\n#define CUBE_SPEED .12\n#define CUBE_SPEED_RATIO 1.1\n#define CUBE_SCALE 5.\n\n#define ORIGIN vec3(-4,1.33,22)\n\n#define SHOW_COLOR_SPHERES false\n#define FILL_HOLES false\n#define COLOR_SIZE 13\n\nconst vec3 Colors[COLOR_SIZE] = vec3[COLOR_SIZE](\n    vec3(.9,.11,.12),\n    vec3(.85,.31,.12),\n    vec3(.75,.61,.17),\n    vec3(.61,.75,.11),\n    vec3(.31,.85,.12),\n    vec3(.11,.9,.22),\n    vec3(.11,.85,.38),\n    vec3(.10,.75,.67),\n    vec3(.10,.61,.85),\n    vec3(.09,.31,.9),\n    vec3(.11,.11,.91),\n    vec3(.31,.11,.85),\n    vec3(.67,.10,.76)\n);\n\nmat2 Rot(float a) {\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat dPoint(vec3 p) {\n    return length(p);\n}\n\nfloat dSphere(vec3 p, float s) {\n    return length(p) - s;\n}\n\nfloat dBox(vec3 p, vec3 s) {\n    return length(max(abs(p)-s, 0.));\n}\n\nvec3 ShpereOffset(float t) {\n    return vec3(sin(t), sin(t*SPHERE_ORBIT_RATIO), cos(t));\n}\n\nfloat GetDist(vec3 p) {\n    //origin\n    vec3 o = p-ORIGIN;\n    \n    //box\n    vec3 bp = o;\t\t\n    bp.xz *= Rot(iTime*CUBE_SPEED);\t\n    bp.xy *= Rot(iTime*CUBE_SPEED*CUBE_SPEED_RATIO);\n    float db = dBox(bp, vec3(CUBE_SCALE));\n    \n    //spheres\n    float sd = 1000.;\n    for (float i = 0.; i < SPHERE_COUNT; i++) {\n        vec3 sp = o-ShpereOffset(\n                i*SPHERE_SPACING+iTime*SPHERE_SPEED\n                )*SPHERE_ORBIT;\n        \n        float newDist = dSphere(sp, SPHERE_RADIUS);\n        sd = min(sd,newDist);\n    }\n    \n    //color points\n    float dP = 1000.;\n    if (SHOW_COLOR_SPHERES) {\n        for (int i = 0; i < COLOR_SIZE; i++) {\n            vec3 sp = p-ORIGIN-ShpereOffset(\n                    float(i)*COLOR_SPACING+iTime*COLOR_SPEED\n                    )*COLOR_ORBIT;\n\n            dP = min(dSphere(sp, .5),dP);\n        }\n    }\n    \n    //negative\n    if (!FILL_HOLES) db = max(db, -sd);\n    \n    return min(db,dP);\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || dS<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nfloat GetLight(vec3 p) {\n    vec3 lightPos = vec3(1, 7, -1);\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l), 0., 1.);\n    float d = RayMarch(p+n*SURF_DIST*2., l);\n    if(d<length(lightPos-p)) dif *= .1;\n    \n    return dif;\n}\n\nvec3 GetPosCol(vec3 p) {\n    float dist[COLOR_SIZE]; \n    \n    for (int i = 0; i < COLOR_SIZE; i++) {\n        vec3 sp = p-ORIGIN-ShpereOffset(\n                float(i)*COLOR_SPACING+iTime*COLOR_SPEED\n                )*COLOR_ORBIT;\n        \n        dist[i] = dPoint(sp);\n    }\n    \n    float total_length = 0.;\n    for (int i = 0; i < COLOR_SIZE; i++) {\n        total_length += dist[i]*dist[i];\n    }\n    \n    vec3 r = vec3(0.);\n    \n    for (int i = 0; i < COLOR_SIZE; i++) {\n        r += pow(dist[i] / pow(total_length, .38), 10.) * Colors[i] ;\n    }\n    \n    return r;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0);\n    \n    vec3 ro = vec3(.5, 8, 0);\n    vec3 rd = normalize(vec3(uv.x-.25, uv.y-.35, 1));\n\n    float d = RayMarch(ro, rd);\n    \n    vec3 p = ro + rd * d;\n    \n    float dif = GetLight(p);\n    col = vec3(dif);\n    col *= GetPosCol(p);\n    \n    col = pow(col, vec3(.4545));\t// gamma correction\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}