{"ver":"0.1","info":{"id":"clXSzB","date":"1674937039","viewed":87,"name":"trippin through the noise cube","username":"RandoMissilannya","description":"Adding some color to my take on The Book of Shaders Truchet Tiles example","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["noise","triangles"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rr","filepath":"/media/a/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin","previewfilepath":"/media/ap/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin","type":"volume","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define M_PI 3.14159265358979323846\n#define rot(a)      mat2( cos(a), -sin(a), sin(a), cos(a) )\n#define noise_step (1./32.)\n#define half_noise_step (noise_step*.5)\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  \n  vec3 st = vec3(fragCoord.xy / iResolution.xy, 1.);\n  float aspect = iResolution.x / iResolution.y;\n  \n  // grid height\n  float grid_y=10.;\n  \n  //grid width based on window size\n  vec2 grid = vec2(grid_y*aspect,grid_y);\n  \n  // int steps based on grid size\n  vec2 grid_index=floor(st.xy*grid.xy);\n\n  // 0 to <1. within every grid step\n  st.xy = fract(st.xy * grid.xy);\n  \n  //\n  // alternate 90 degree diagonal rotation every grid step\n  // start even rows with rotation\n  // creates diamond-like pattern from triangles\n  //\n  \n  float angle = 0.;\n  float x_offset=0.;\n  // every even row start rotated\n  if(int(mod(float(grid_index.y),2.))==0)\n  {\n      x_offset=1.;\n  }\n  \n  // rotate every other rect\n  if(int(mod(float(grid_index.x+x_offset),2.))==0)\n  {\n     angle=M_PI*0.5;\n  } \n \n  // translate middle of line(.5,.5) to (0,0)\n  st.xy -= 0.5;  \n  st.xy *= rot(angle);\n  //translate back\n  st.xy += 0.5;\n  \n  //\n  // get color from grid position.\n  // animate z index\n  //\n  vec3 rd=vec3(grid_index.xy*noise_step,\n               mod(iTime*.003,1.0));\n              \n  vec4 color1 = vec4(texture(iChannel0, rd).rgb,1.);\n  \n  //get neighboring color from noise cube\n  rd.x+=half_noise_step;\n  vec4 color2 = vec4(texture(iChannel0, rd).rgb,1.);\n\n  // split rect along the diagonal\n  float split_rect = step(st.x, st.y);\n  fragColor = mix(color1, color2, split_rect);\n}\n","name":"Image","description":"","type":"image"}]}