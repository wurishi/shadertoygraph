{"ver":"0.1","info":{"id":"3dfSRr","date":"1550400452","viewed":90,"name":"triangularNoiseACID","username":"skandix","description":"A C I D ","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["acid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n#define TAU PI*2\n\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float fTime = iTime * PI;\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 colors = vec3(tanh(fTime),sinh(fTime),0);\n    \n    float Speed = tanh(sin(uv.y)+(cos(uv.x)));\n    float e0 = -1.5;\n    float interpolation = -100.5;\n    \n    vec3 bg = cos(colors);\n\t\n    uv = rotate2d((PI*fTime)*uv.x) * uv;    \n    vec3 yNoise = vec3(tan(fTime*Speed*uv.x)*smoothstep(e0, uv.y, interpolation));\n    vec3 xNoise = vec3(tan(fTime-Speed*uv.y)/smoothstep(e0, uv.x, interpolation));\n    \n    vec3 noise = vec3(yNoise + xNoise)*fTime;\n    \n    vec3 composition = vec3(bg * noise * tanh(iTime));\n   \n    // Output to screene\n    fragColor = vec4(composition,tanh(iTime));\n}\n","name":"Image","description":"","type":"image"}]}