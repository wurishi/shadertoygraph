{"ver":"0.1","info":{"id":"X3tXzM","date":"1718830165","viewed":82,"name":"logistic map","username":"hexagon8899","description":"logistic map","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["logisticmap"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_X 4.\n#define MIN_X 3.5\n#define MAX_Y 1.\n#define MIN_Y 0.\n\n#define AA 16.\n#define ITERS 1000\n#define MIN_ITERS 100\n\n#define DRAWDIST 1./iResolution.x*(MAX_Y-MIN_Y)\n\nfloat map (vec2 uv) {\n    float x = uv.x;\n    float r = 0.5;\n    float value = 1.;\n    \n    // early escape, remove if you want to see values outside the range 0<x<4 and 0<r<1\n    if (uv.y > uv.x / 4. + DRAWDIST) {return 1.;}\n    if (uv.x > 2. && uv.y < uv.x*uv.x/4.*(1.-uv.x/4.)-DRAWDIST ) {return 1.;}\n   \n    for (int i = 0; i < ITERS; i++) {\n        r = x*r*(1.-r);\n        if (i > MIN_ITERS && abs(r-uv.y)<DRAWDIST) {value *= 0.90;}\n    }\n    return value;\n}\n\n\nvoid mainImage( out vec4 col, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x = MIN_X+(MAX_X-MIN_X)*uv.x;\n    uv.y = MIN_Y+(MAX_Y-MIN_Y)*uv.y;\n    col = vec4(0,0,0,1);\n    \n    for (float dx = 0.; dx < AA; dx++) {\n        col.xyz += map(uv + vec2(dx, 0) / AA / iResolution.x * (MAX_X-MIN_X)) / AA;\n    }\n}","name":"Image","description":"","type":"image"}]}