{"ver":"0.1","info":{"id":"DtKGWw","date":"1684118577","viewed":93,"name":"one uv arrow","username":"bythesword","description":"one uv arrow","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// copy form https://www.shadertoy.com/view/wsVfzc\n#define GRID_SCALE .5\n#define CELL_SCALE 1.0\n#define VECTOR_SCALE .15\n\n\n// direction and normal for x and y (-1 to 1)\n// exp:xy1,xy2,xy3\nvec2 xy1=vec2(1.,1.);\nvec2 xy2=vec2(-1.,-1.);\nvec2 xy3=vec2(-.5,-1.);\n\n\nfloat sdIsosceles(in vec2 p, in float b, in float h) {\n    p.x = abs(p.x);\n    float q = clamp((b - p.x + p.y) / (b + h), 0.0, 1.0);\n    vec2 re = vec2(p.x - b + b * q, p.y - h * q);\n    vec2 be = vec2(p.x - b * min(p.x / b, 1.0), p.y);\n    return sqrt(min(dot(re, re), dot(be, be))) * sign(p.x + (p.y - h) * b / h * sign(p.y));\n}\n\nfloat sdVerticalLine(in vec2 p, in float h) {\n    return length(vec2(p.x, p.y - h * clamp(p.y / h, 0.0, 1.0)));\n}\n\nfloat sdVectorArrow(in vec2 p, in vec2 v) {\n    float m = length(v);\n    vec2 n = v / m;\n    p = vec2(dot(p, n.yx * vec2(1.0, -1.0)), dot(p, n));\n    return min(sdVerticalLine(p, m), sdIsosceles(p - vec2(0.0, m), 0.1, 0.15));\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n   \n    float unit = 2. / iResolution.y / GRID_SCALE;\n    \n    // here is xy3 or othre vec2()\n    float vector = sdVectorArrow(uv, xy3*.3);\n    fragColor = vec4(smoothstep(unit, 0.0, vector));\n}","name":"Image","description":"","type":"image"}]}