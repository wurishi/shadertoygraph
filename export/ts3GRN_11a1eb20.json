{"ver":"0.1","info":{"id":"ts3GRN","date":"1567992330","viewed":153,"name":"Blobs 2","username":"vitasa","description":"Created a blob effect using metaballs in close proximity. Feedback always appreciated.\n\nNote: Overlay another blob using mouse position x","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2blobs"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// based on https://www.shadertoy.com/view/4lKXzd\n\nconst float numOfBalls = 10.;\t\t\t\t\t\t\t\t\t\t// number of balls\nconst float distanceTraveled = 1.5;\nconst float speed = .8;\t\t\t\t\t\t\t\t\t\t\t\t// speed of effect\nconst float rotationSpeed = .5;\n\nfloat metaballs(vec2 uv, float time) {\t\t\t\t\t\t\t\t\t\n    float size = .9;\t\t\t\t\t\t\t\t\t\t\t\t// base size\n    const float startIndex = numOfBalls;\n\tconst float endIndex = numOfBalls * 2.;\n    \n    for(float i = startIndex; i < endIndex; i++) {\t\t\t\t\t// create x number of balls\t\t\t\t\t\t\t\t\t\t\t// get rads for control point\n        float radius = distanceTraveled * sin(time + i * 2.);\t\t// calculate radius\n        vec2 ball = radius * vec2(sin(i), cos(i));\t\t\t\t\t// ball position\n\t\tsize += 1. / pow(i, distance(uv, ball));\t\t\t\t\t// metaball calculation\n    }\n    return size;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float rotationAngle = iTime * rotationSpeed;\n\tmat2 rotation = mat2(cos(rotationAngle), -sin(rotationAngle), \n                         sin(rotationAngle),  cos(rotationAngle));\n    \n    float time = iTime * speed;\t\t\t\t\t\t\t\t\t\t// assigning time\n    vec2 R = iResolution.xy;\n    vec2 uv = (2. * fragCoord - R) / R.y;\t\t\t\t\t\t\t// center coordinates\n\tuv *= 5.; \t\t\t\t\t\t\t\t\t\t\t\t\t\t// zoom out    \n    uv *= rotation;\n    float blob = metaballs(uv, time);\t\t\t\t\t\t\t\t// creating the blob\n    float blob2 = metaballs(uv, time + 1.);\t\t\t\t\t\t\t// offset blob\n    \n    float mouseX = iMouse.x;\n    \n    if (iMouse.x == 0.) {\n    \tmouseX = (sin(iTime * 2.) / 2. + .5) * iResolution.x; \n    }\n    \n    blob = smoothstep(1., 1. + 3./R.y, blob);\t\t\t\t\t\t// Anti Aliasing based on resolution\t\t\n    blob2 = smoothstep(1., 1. + 3./R.y, blob2);\n    \n    vec3 col = vec3(.8, .2, .2);\t\t\t\t\t\t\t\t\t// color of blob\t\t\t\t\t\n    vec3 col2 = vec3(.2, .8, .2) * mouseX / iResolution.x;\n    \n    vec3 b1 = blob * col;\t\t\t\t\t\t\t\t\t\t\t\n    vec3 b2 = blob2 * col2;\n    vec3 final = max (b1, b2);\t\t\t\t\t\t\t\t\t\t// combining the color with the effect\n    fragColor = vec4(final, 1); \t\t\t\t\t\t\t\t\t// ouput\n}","name":"Image","description":"","type":"image"}]}