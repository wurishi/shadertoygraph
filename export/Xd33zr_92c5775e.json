{"ver":"0.1","info":{"id":"Xd33zr","date":"1447631146","viewed":181,"name":"Air Glider","username":"jameswilddev","description":"Hipster comment about Kirby Air Ride\nWas meant to be something else, ended up here.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["skyroad"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"// NDC, expanded to match the aspect ratio.\nvec2 aspectNdc;\n\n#define BUILDING_SIDE_GAPS 2.0\n#define BUILDING_WIDTH 0.25\n#define CHECKER_DENSITY 4.0\n\n#define SEA_LEVEL -8.0\n\nvec2 onPlane() {\n    float dist = abs(aspectNdc.x) / BUILDING_SIDE_GAPS;\n    \n    return vec2((1.0 / abs(dist)) + fract((iTime * 0.3) / 1.0) * 1.0, aspectNdc.y / (dist));\n}\n\nfloat onPlaneX() {\n    float dist = abs(aspectNdc.x) / BUILDING_SIDE_GAPS;\n    \n    return (1.0 / abs(dist)) + ((iTime * 0.3) / 1.0) * 1.0;\n}\n\nfloat trueBuildingId() {\n    float temp = floor(onPlaneX() - BUILDING_WIDTH);\n    return temp;\n}\n\nfloat buildingTop() {\n    return ceil(sin(trueBuildingId() * 101.0) * 8.0 + 8.0);\n}\n\nfloat buildingBottom() {\n    return floor(sin(trueBuildingId() * 131.0) * 8.0 - 8.0);\n}\n\nfloat buildingLocation() {\n    return onPlane().x / 1.0;\n}\n\nfloat buildingId() {\n    return floor(buildingLocation());\n}\n\nfloat withinBuilding() {\n    return fract(buildingLocation());\n}\n\nbool onSideOfBuilding() {\n    return withinBuilding() > BUILDING_WIDTH;\n}\n\nvec3 checker(vec2 uv) {\n    uv = fract(uv);\n    return uv.x > 0.5 != uv.y > 0.5 ? vec3(1.0, 1.0, 0.6) : vec3(0.6, 0.6, 1.0);\n}\n\nvec2 checkerFront() {\n    vec2 offset = aspectNdc;\n\treturn CHECKER_DENSITY*(offset * ((buildingId() + 1.0) - fract(iTime * 0.3)));\n}\n\nvec2 checkerSide() {\n    return onPlane() * CHECKER_DENSITY;\n}\n\nbool onFrontOfBuilding() {\n    return abs(checkerFront().x) > (BUILDING_SIDE_GAPS * CHECKER_DENSITY)+ (CHECKER_DENSITY * BUILDING_WIDTH);\n}\n\n#define SKY_ZENITH vec3(0.1, 0.3, 0.6)\n#define SKY_HORIZON vec3(0.8, 0.8, 1.0)\n\nvec3 sky() {\n    return mix(SKY_ZENITH, SKY_HORIZON, 1.0 / (1.0 + abs(aspectNdc.y * 3.0)));\n}\n\n#define CHECKER_SIDE_COLOR 1.0\n#define CHECKER_FRONT_COLOR 0.6\n#define SEA_REFLECTION_COLOR vec3(0.6, 0.7, 0.8)\n#define SEA_BASE_COLOR vec3(0.05, 0.1, 0.12)\n\nvec3 color() {    \n    vec2 uv = onSideOfBuilding() ? checkerFront() : checkerSide();\n    \n    bool inSky = (onFrontOfBuilding() && onSideOfBuilding()) || uv.y > buildingTop() || uv.y < buildingBottom();\n    vec3 preColor = inSky? sky() : mix(checker(uv) * (onSideOfBuilding() ? CHECKER_SIDE_COLOR : CHECKER_FRONT_COLOR), sky(), 1.0 / (abs(aspectNdc.x * 5.0) + 1.0));\n    return preColor;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\taspectNdc = (fragCoord.xy - (iResolution.xy / 2.0)) / (min(iResolution.x, iResolution.y) / 2.0);\n    \n    \n    \n\tfragColor = vec4(pow(color(), vec3(1.0 / 2.2)), 1.0);\n}","name":"","description":"","type":"image"}]}