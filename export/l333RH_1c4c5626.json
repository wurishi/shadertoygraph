{"ver":"0.1","info":{"id":"l333RH","date":"1732077463","viewed":109,"name":"Cell crystals","username":"fishy","description":"each unset pixel randomly samples a neighbor, then modulates the color by a random amount","likes":14,"published":3,"flags":32,"usePreview":0,"tags":["a"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define saturate(x) clamp(x, 0.0, 1.0)\n\nvec4 cubic(float v)\n{\n    vec4 n = vec4(1.0, 2.0, 3.0, 4.0) - v;\n    vec4 s = n * n * n;\n    float x = s.x;\n    float y = s.y - 4.0 * s.x;\n    float z = s.z - 4.0 * s.y + 6.0 * s.x;\n    float w = 6.0 - x - y - z;\n    return vec4(x, y, z, w) * (1.0/6.0);\n}\n\nvec4 textureBc(sampler2D sampler, vec2 texCoords, int lod)\n{\n\n   vec2 texSize = vec2(textureSize(sampler, lod));\n   vec2 invTexSize = 1.0 / texSize;\n   \n   texCoords = texCoords * texSize - 0.5;\n\n   \n    vec2 fxy = fract(texCoords);\n    texCoords -= fxy;\n\n    vec4 xcubic = cubic(fxy.x);\n    vec4 ycubic = cubic(fxy.y);\n\n    vec4 c = texCoords.xxyy + vec2 (-0.5, +1.5).xyxy;\n    \n    vec4 s = vec4(xcubic.xz + xcubic.yw, ycubic.xz + ycubic.yw);\n    vec4 offset = c + vec4 (xcubic.yw, ycubic.yw) / s;\n    \n    offset *= invTexSize.xxyy;\n    \n    vec4 sample0 = textureLod(sampler, offset.xz, float(lod));\n    vec4 sample1 = textureLod(sampler, offset.yz, float(lod));\n    vec4 sample2 = textureLod(sampler, offset.xw, float(lod));\n    vec4 sample3 = textureLod(sampler, offset.yw, float(lod));\n\n    float sx = s.x / (s.x + s.y);\n    float sy = s.z / (s.z + s.w);\n\n    return mix(mix(sample3, sample2, sx), mix(sample1, sample0, sx), sy);\n}\n\nvec3 hsv2rgb(vec3 c) {\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 c = texture(iChannel0, fragCoord / iResolution.xy);\n    fragColor.rgb = hsv2rgb(c.rgb) * exp(-c.a * 2.0) * 1.8;\n    if (c.a < 0.001)\n    {\n        //c = textureBc(iChannel0, fragCoord / iResolution.xy, 5);\n        for (int i = 1; i < 16; i++)\n        {\n            vec4 s = textureBc(iChannel0, fragCoord / iResolution.xy, i);\n            c.rgb += hsv2rgb(s.rgb) * exp(-s.a * 2.0) * exp2(-float(i)*0.2);\n        }\n        fragColor.rgb = c.rgb;\n    }\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//#define EIGHT_WAY\n\n#define EMPTY (vec4(0.0))\n\nconst ivec2[] offsets = ivec2[](\n#ifdef EIGHT_WAY\n    ivec2(-1,   1),\n    ivec2(-1,   0),\n    ivec2(-1,  -1),\n    ivec2( 0,   1),\n    ivec2( 0,   0),\n    ivec2( 0,  -1),\n    ivec2( 1,   1),\n    ivec2( 1,   0),\n    ivec2( 1,  -1)\n#else\n    ivec2(-1, 0),\n    ivec2( 1, 0),\n    ivec2(0, -1),\n    ivec2(0,  1)\n#endif\n);\n\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n}\n\nvec4 mutate(vec4 c, vec2 coord)\n{\n    c.rgb += vec3(0.02, 0.02, 0.02) * (hash33(vec3(coord, iDate.w) + 1.0) - 0.5);\n    c.a += 0.001;\n    return c;\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord)\n{\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec2 mo = (iMouse.xy * 2.0 - iResolution.xy) / iResolution.y;\n    bool mPressed = iMouse.z > 0.001;\n    ivec2 c = ivec2(fragCoord);\n    if (iFrame == 0)\n    {\n        // Initialize\n        fragColor = EMPTY;\n        if (hash33(vec3(fragCoord, iDate.w)).b < 0.001 && hash33(vec3(fragCoord, iDate.w) + 100000.0).b < exp(-length(uv*8.0)))\n        {\n            fragColor = vec4(hash33(vec3(fragCoord, iDate.w) + 100000.0).r, 0.5, 0.5, 0.001);\n            //fragColor = vec4(0.5, 0.5, 0.5, 0.001);\n        }\n    }\n    else\n    {\n        vec4 myColor = texelFetch(iChannel0, c, 0);\n        if (myColor.w < 0.001)\n        {\n            ivec2 o1 = offsets[int(hash33(vec3(fragCoord, iDate.w)).r * float(offsets.length()))];\n            vec4 sampledColor = texelFetch(iChannel0, c + o1, 0);\n            if (sampledColor.w > 0.00)\n            {\n                fragColor = mutate(sampledColor, fragCoord);\n            }\n            else\n            {\n                fragColor = myColor;\n                            if (hash33(vec3(fragCoord, iDate.w)).b < 0.0001 && hash33(vec3(fragCoord, iDate.w) + 100000.0).b < exp(-distance(uv, mo)*32.0) && mPressed)\n                {\n                    fragColor = vec4(hash33(vec3(fragCoord, iDate.w) + 100000.0).r, 0.5, 0.5, 0.001);\n                }\n            }\n        }\n        else\n        {\n            fragColor = myColor;\n        }\n    }\n}\n","name":"Buffer A","description":"","type":"buffer"}]}