{"ver":"0.1","info":{"id":"Mf2cWw","date":"1722440767","viewed":34,"name":"Two Vertical Light Sources","username":"Rainforest_25","description":"hw for 3D scene\nreference: https://www.shadertoy.com/view/4tc3Wf","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fbm","light"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3Rr","filepath":"/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","previewfilepath":"/media/ap/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define VOLUME_SAMPLES 64\n\nstruct Hit { vec3 p; vec3 n; int id; };\n\nHit intersectSphere(vec3 ori, vec3 dir, vec3 p, float r) {\n    float a = dot(dir, dir), b = 2. * dot(dir, ori - p), c = dot(ori - p, ori - p) - (r * r);\n    float d = (b * b) - 4. * a * c;\n    float l = (-b - sqrt(d)) / (2. * a);\n    \n    vec3 pos = ori + dir * l;\n    return Hit(pos, normalize(pos - p), (d >= 0. && l >= 0.) ? 0 : -1);\n}\n\nHit intersect(vec3 ori, vec3 dir) {\n    return intersectSphere(ori, dir, vec3(0.), 1.);\n}\n\nvec3 getPrimaryLightVector(vec3 p) {\n    return vec3(10. * cos(iTime), 0., 10. * sin(iTime)) - p;\n}\n\nvec3 getSecondaryLightVector(vec3 p) {\n    return vec3(0., 10. * cos(iTime), 10. * sin(iTime)) - p;\n}\n\nmat3 m = mat3( 0.00,  0.80,  0.60,\n              -0.80,  0.36, -0.48,\n              -0.60, -0.48,  0.64 );\n\nfloat hash(float n) {\n    return fract(sin(n) * 43758.5453);\n}\n\nfloat noise(in vec3 x) {\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n    f = f * f * (3.0 - 2.0 * f);\n    float n = p.x + p.y * 57.0 + 113.0 * p.z;\n    float res = mix(mix(mix(hash(n + 0.0), hash(n + 1.0), f.x),\n                        mix(hash(n + 57.0), hash(n + 58.0), f.x), f.y),\n                    mix(mix(hash(n + 113.0), hash(n + 114.0), f.x),\n                        mix(hash(n + 170.0), hash(n + 171.0), f.x), f.y), f.z);\n    return res;\n}\n\nfloat fbm(vec3 p) {\n    float f;\n    f  = 0.5000 * noise(p); p = m * p * 2.02;\n    f += 0.2500 * noise(p); p = m * p * 2.03;\n    f += 0.1250 * noise(p);\n    return f;\n}\n\nvec3 calcScatter(vec3 ori, vec3 dir, Hit hit, vec2 fc) {\n    vec3 sum = vec3(0.);\n    float maxDst = min(5., distance(ori, hit.p));\n    float weight = 1. / float(VOLUME_SAMPLES);\n    float stepAm = maxDst * weight;\n    vec3 p = ori;\n    \n    p += dir * (noise(vec3(2. * fc, iTime)) * .075);\n    for(int i = 0; i < VOLUME_SAMPLES; i++) {\n        vec3 lv = getPrimaryLightVector(p);\n        vec3 ld = normalize(lv);\n        Hit sh = intersect(p, ld);\n        if(sh.id < 0) {\n            sum += fbm(p + vec3(iTime, 0., iTime * .2));\n        }\n        p += dir * stepAm;\n    }\n    \n    return sum * weight * .5;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - iResolution.xy * .5) / iResolution.y;\n    \n    vec3 ori = vec3(0., 0., -4.);\n    vec3 dir = vec3(uv, 1.);\n    dir = normalize(dir);\n    \n    vec3 col = vec3(0.);\n    Hit hit = intersect(ori, dir);\n    if(hit.id == 0) {\n        vec3 lv1 = getPrimaryLightVector(hit.p);\n        vec3 ld1 = normalize(lv1);\n        vec3 r1 = normalize(reflect(dir, hit.n));\n        vec2 uv = asin(hit.n.xy) / 3.14159 + .5;\n        \n        vec3 tx = texture(iChannel0, uv).xyz;\n        float d1 = max(dot(ld1, hit.n), 0.);\n        float s1 = pow(max(dot(ld1, r1), 0.), 20. + 40. * tx.z);\n        col += tx * (.15 + d1) + s1;\n        \n        vec3 lv2 = getSecondaryLightVector(hit.p);\n        vec3 ld2 = normalize(lv2);\n        vec3 r2 = normalize(reflect(dir, hit.n));\n        float d2 = max(dot(ld2, hit.n), 0.);\n        float s2 = pow(max(dot(ld2, r2), 0.), 20. + 40. * tx.z);\n        col += tx * (.15 + d2) + s2;\n    }\n    \n    col += calcScatter(ori, dir, hit, fragCoord);\n    \n    vec3 lv1 = getPrimaryLightVector(ori);\n    vec3 ld1 = normalize(lv1);\n    float s1 = 1.;\n    if(intersect(ori, ld1).id > -1) {\n        s1 = 0.;\n    }\n    col += pow(max(dot(dir, ld1), 0.), 90.) * s1;\n    \n    vec3 lv2 = getSecondaryLightVector(ori);\n    vec3 ld2 = normalize(lv2);\n    float s2 = 1.;\n    if(intersect(ori, ld2).id > -1) {\n        s2 = 0.;\n    }\n    col += pow(max(dot(dir, ld2), 0.), 90.) * s2;\n    \n    fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"}]}