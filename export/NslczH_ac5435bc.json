{"ver":"0.1","info":{"id":"NslczH","date":"1641726895","viewed":106,"name":"VideoSlideEffect","username":"SadTShaders","description":"This is shader of video effect. Whole shader is branchless.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["video"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TIME_CONTROLL\n\n//this function is not in shadertoy api, but is free in modern hardware\nfloat sat(float x)\n{\n    return clamp(x, 0.0, 1.0);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n//region prensentation, this is only for controlling fade amount\n    \n    \n    float fadeAmount = iMouse.x /  iResolution.x;\n    //correction for screen edges\n    fadeAmount = sat(fadeAmount*1.2 - 0.1);\n    \n    #ifdef TIME_CONTROLL\n        float sinTime = (sin(iTime*0.7));\n        fadeAmount = smoothstep(0.0,1.0,sinTime) * 0.6;\n\t#endif\n    \n//endregion prensentation  \n    \n    \n\tvec2 flippedUV = fragCoord.xy / iResolution.xy;\n    vec2 uv = vec2(flippedUV.x,  1.0 - flippedUV.y);\n    \n    //gradient for making mask of black rectangle\n    float gradient = min(flippedUV.y , uv.y) * 2.0;\n    \n    float squareMask = gradient -(1.0 - fadeAmount);\n    squareMask = 1.0 - sat(999999999.0 * squareMask);\n   \n    float fadeDirection = clamp((uv.y - 0.5) * 9999999999.0f,-1.0, 1.0);\n    uv.y -= fadeAmount * fadeDirection *0.5;\n    \n    vec4 tex = texture(iChannel0, uv);\n        \n\tfragColor =  vec4(tex.rgb,1.0) * squareMask;\n}\n","name":"Image","description":"","type":"image"}]}