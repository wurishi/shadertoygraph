{"ver":"0.1","info":{"id":"MXjBD3","date":"1730043713","viewed":36,"name":"rolling soccer","username":"grevel","description":"a cheap, 2d animation of a rolling soccer ball","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["effect","animation","ball","football","soccer","rolling"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/NtBSRV\nconst mat2x3 SCREEN_TO_TRIANGLE = mat2x3(1.0, 0.5, -0.5, 0.0, sqrt(.75), sqrt(.75));\nconst mat2 HEX_TO_SCREEN = mat2(2.0, 0.0, -1.0, sqrt(3.0));\n\nfloat patchMask(vec2 uv) {\n    vec3 tri = SCREEN_TO_TRIANGLE * uv;\n    vec3 cell = ceil( tri );\n    vec2 hex = floor( (cell.y + cell.xz) / 3. );    \n    return 1.0 - mod(hex.x + hex.y, 2.0) * mod(hex.y, 2.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float aspect = iResolution.x / iResolution.y;\n\n    float size = 0.08;\n    vec2 ball = vec2(0.4*sin(iTime)+0.5, 0.4/aspect*cos(iTime*3.0)+0.5/aspect);\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xx;\n\n\n    float dist = length(uv - ball);\n\n    float edgeMask = step(abs(dist-size), 0.01);\n    float innerMask = step(dist, size);\n\n    vec3 col = vec3(0.7, 1.0, 0.5);\n    if(innerMask > 0.5) {\n        col = vec3(patchMask((uv - 2.0*ball)*40.0));\n    }\n    if(edgeMask > 0.5) {\n        col = vec3(0.0);\n    }\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}