{"ver":"0.1","info":{"id":"lXscDM","date":"1726785840","viewed":32,"name":"Raymarching in 2D","username":"Sabiri","description":"Simple visualization of the raymarching algorithm in 2D space, use the mouse to drag the ray march starting point around","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define MAX 1.3\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy - 0.5;\n    uv.x *= iResolution.x/iResolution.y; // Fix the stretching in the x axis by multiplying it by the aspect ratio\n\n    vec2 mous = vec2((iMouse.x/iResolution.x - 0.5)*iResolution.x/iResolution.y,\n                    iMouse.y/iResolution.y - 0.5);\n\n    vec2 raydir = vec2(1., sin(iTime));\n\n    vec2 circle1 = mous;\n    // Add some circles if you wish\n    vec2 circle2 = vec2(0.,0.);\n    vec2 circle3 = vec2(0.2,-0.3);\n    vec2 circle4 = vec2(0.2, 0.2);\n    vec2 circle5 = vec2(-0.2, 0.2);\n    vec2 circle6 = vec2(-0.3, 0.2);\n\n    vec2 circles[5];\n\n    circles[0] = circle2;\n    circles[1] = circle3;\n    circles[2] = circle4;\n    circles[3] = circle5;\n    circles[4] = circle6;\n  \n    vec3 col = vec3(1.);\n\n    float r = 0.06;\n    vec2 pos = mous;\n    \n\n    for (int j = 0; j < 30; j++) // Step a certain amount of steps\n    {\n        float d = 1.;\n        // Loop through the circles and check their sdf\n        for (int i = 0 ; i < 5; i++)\n        {\n            col *= vec3(smoothstep(r, r,length(uv - circles[i])));\n        \n            d = min(d, length(pos - circles[i]) - r);\n        }\n        if (length(uv - pos) < 0.01)        \n            col *= vec3(smoothstep(d, d,length(uv - pos))) * vec3(1.,1.,0.);\n        if (d < 0.001 || d > MAX)\n        {\n            break;\n        }\n        \n        col *= vec3(smoothstep(d, d,length(uv - pos))) + vec3(1.,0.,0.);\n        \n        pos = pos + vec2(normalize(raydir)*d); // Step to the next iteration point by the sdf distance \n     }\n    \n    uv -= mous;\n\n    // Output to screen\n    fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"}]}