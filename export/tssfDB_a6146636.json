{"ver":"0.1","info":{"id":"tssfDB","date":"1589033540","viewed":349,"name":"Orientation Aligned Bilateral","username":"mbeytekin","description":"Orientation Aligned Bilateral Filter\n\nImplemented from ShaderX7 book. Try with videos and other textures. \n","likes":8,"published":1,"flags":32,"usePreview":1,"tags":["filter","post","flow","based","bilateral","structure","tensor"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"///  Orientation-aligned bilateral filter\n\n///  Source Image >> Buffer A\n\nconst float sigma_d=6.; // Lower sigma_d >> Sharper Result\nconst float sigma_r=0.55; // Lower sigma_r >> Sharper Result\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n     vec2 uv =fragCoord.xy/iResolution.xy;\n    \n    if (fragCoord.x < iMouse.x)\n\t{\n\t\tfragColor = texture(iChannel0, uv);\t\n\t} else {\n    \n    \n\tfloat twoSigmaD2 = 2.0 * sigma_d * sigma_d;\n   float twoSigmaR2 = 2.0 * sigma_r * sigma_r;\n  \n   vec2 t = texture(iChannel1, uv).xy;\n   vec2 dir =t.xy;\n   vec2 dabs = abs(dir);\n   float ds = 1.0 / ((dabs.x > dabs.y)? dabs.x : dabs.y);\n   dir /= iResolution.xy;\n   \n       vec3 center = texture(iChannel0, uv).rgb;\n\t   vec3 sum = center;\n\t   float norm = 1.0;\n\t   float halfWidth = 2.0 * sigma_d;\n\t   for (float d = ds; d <= halfWidth; d += ds)\n\t   {          \n\t\t   vec3 c0 = texture(iChannel0, uv + d * dir).rgb;\n\t\t   vec3 c1 = texture(iChannel0, uv - d * dir).rgb;\n\t\t   float e0 = length(c0 - center);\n\t\t   float e1 = length(c1 - center);\n\t\t   float kerneld = exp( - d *d / twoSigmaD2 );\n\t\t   float kernele0 = exp( - e0 *e0 / twoSigmaR2 );\n\t\t   float kernele1 = exp( - e1 *e1 / twoSigmaR2 );\n\t\t   norm += kerneld * kernele0;\n\t\t   norm += kerneld * kernele1;\n\t\t   sum += kerneld * kernele0 * c0;\n\t\t   sum += kerneld * kernele1 * c1;\n\t   }\n\t   sum /= norm;\n\t   fragColor = vec4(sum, 1.0);\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/// SOURCE IMAGE\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv=fragCoord.xy/iResolution.xy;\n    fragColor=texture(iChannel0,uv);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"/// STRUCTURE TENSOR\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 src_size = iResolution.xy;\n    vec2 uv = fragCoord/src_size;\n    vec2 d = 1.0 / src_size;\n\n    vec3 c = texture(iChannel0, uv).xyz;\n    vec3 u = (\n           -1.0 * texture(iChannel0, uv + vec2(-d.x, -d.y)).xyz +\n           -2.0 * texture(iChannel0, uv + vec2(-d.x,  0.0)).xyz + \n           -1.0 * texture(iChannel0, uv + vec2(-d.x,  d.y)).xyz +\n           +1.0 * texture(iChannel0, uv + vec2( d.x, -d.y)).xyz +\n           +2.0 * texture(iChannel0, uv + vec2( d.x,  0.0)).xyz + \n           +1.0 * texture(iChannel0, uv + vec2( d.x,  d.y)).xyz\n           ) / 4.0;\n\n    vec3 v = (\n           -1.0 * texture(iChannel0, uv + vec2(-d.x, -d.y)).xyz + \n           -2.0 * texture(iChannel0, uv + vec2( 0.0, -d.y)).xyz + \n           -1.0 * texture(iChannel0, uv + vec2( d.x, -d.y)).xyz +\n           +1.0 * texture(iChannel0, uv + vec2(-d.x,  d.y)).xyz +\n           +2.0 * texture(iChannel0, uv + vec2( 0.0,  d.y)).xyz + \n           +1.0 * texture(iChannel0, uv + vec2( d.x,  d.y)).xyz\n           ) / 4.0;\n    \n\t   fragColor = vec4(vec3(dot(u.xyz, u.xyz),\n\t   dot(v.xyz, v.xyz),\n\t   dot(u.xyz, v.xyz)), 1.0);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"///Smoothing the structure in the horizontal direction\n \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n      ivec2 uv = ivec2(gl_FragCoord.xy); \n  fragColor = vec4(vec3(1.0/16.0 * texelFetch(iChannel0, uv + ivec2(0, -2), 0).xyz + \n  4.0/16.0 * texelFetch(iChannel0, uv + ivec2(0, -1), 0).xyz + \n  6.0/16.0 * texelFetch(iChannel0, uv + ivec2(0, 0), 0).xyz + \n  4.0/16.0 * texelFetch(iChannel0, uv + ivec2(0, 1), 0).xyz + \n  1.0/16.0 * texelFetch(iChannel0, uv + ivec2(0, 2), 0).xyz ), 1.0); \n\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"///\n///  Smoothing the structure in the vertical direction and calculation of the flow field\n///\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n       ivec2 uv = ivec2(gl_FragCoord.xy);\n       vec3 g = vec3(1.0/16.0 * texelFetch(iChannel0, uv + ivec2(-2, 0), 0).xyz +\n\t   4.0/16.0 * texelFetch(iChannel0, uv + ivec2(-1, 0), 0).xyz +\n\t   6.0/16.0 * texelFetch(iChannel0, uv + ivec2( 0, 0), 0).xyz + \n\t   4.0/16.0 * texelFetch(iChannel0, uv + ivec2( 1, 0), 0).xyz +\n\t   1.0/16.0 * texelFetch(iChannel0, uv + ivec2( 2, 0), 0).xyz);\n\t   float lambda1 = 0.5 * (g.y + g.x +sqrt(g.y*g.y - 2.0*g.x*g.y + g.x*g.x + 4.0*g.z*g.z));\n       vec2 d = vec2(g.x - lambda1, g.z);\n\t   \n       fragColor = (length(d) > 0.0)?   vec4(normalize(d), sqrt(lambda1), 1.0) : vec4(0.0, 1.0, 0.0, 1.0);\n}","name":"Buffer D","description":"","type":"buffer"}]}