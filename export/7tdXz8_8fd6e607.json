{"ver":"0.1","info":{"id":"7tdXz8","date":"1638735747","viewed":144,"name":"Foggy Hills","username":"do","description":"fog","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["scatter"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Foggy Hills\n//2021\n//do\n\nconst int seed = 12434;\n#define EPS .0001\n\nfloat hash(float p) {\n    return fract(sin(p) * 4358.5453);\n}\n\nfloat hash(vec2 p) {\n   return fract(sin(dot(p.xy,vec2(12.9898,78.233)))*4358.5353);\n}\n\nvec2 mod289(vec2 p) { return p - floor(p * (1. / 289.)) * 289.; }\nvec3 mod289(vec3 p) { return p - floor(p * (1. / 289.)) * 289.; }\nvec3 permute(vec3 p) { return mod289(((p * 34.) + 1.) * p); } \n\nfloat ns2(vec2 p) {\n\n    const float k1 = (3. - sqrt(3.))/6.;\n    const float k2 = .5 * (sqrt(3.) -1.);\n    const float k3 = -.5773;\n    const float k4 = 1./41.;\n\n    const vec4 c = vec4(k1,k2,k3,k4);\n    \n    vec2 i = floor(p + dot(p,c.yy));\n    vec2 x0 = p - i + dot(i,c.xx);\n  \n    vec2 i1;\n    i1 = (x0.x > x0.y) ? vec2(1.,0.) : vec2(0.,1.);\n    vec4 x12 = x0.xyxy + c.xxzz;\n    x12.xy -= i1;\n\n    i = mod289(i);\n    \n    vec3 p1 = permute(permute(i.y + vec3(0.,i1.y,1.))\n        + i.x + vec3(0.,i1.x,1.));\n  \n    p1 = permute(mod289(p1 + vec3(float(seed))));\n\n    vec3 m = max(.5 - \n    vec3(dot(x0,x0),dot(x12.xy,x12.xy),dot(x12.zw,x12.zw)),0.);\n    m = m * m; \n    m = m * m;\n\n    vec3 x = fract(p1 * c.www) - 1.;\n    vec3 h = abs(x) - .5;\n    vec3 ox = floor(x + .5);\n    vec3 a0 = x - ox; \n    m *= 1.792842 - 0.853734 * (a0 * a0 + h * h);\n     \n    vec3 g;\n    g.x = a0.x * x0.x + h.x * x0.y;\n    g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n    return 130. * dot(m,g);\n}\n\nfloat f(vec2 x) {\n\n    float f = 0.;\n\n    for(int i = 1; i < 8; i++) {\n\n    float e = pow(2.,float(i));\n    float s = (1./e);\n    f += ns2(x*e)*s;   \n    }    \n\n    return f * .5 + .5;\n}\n\nfloat f2(vec3 p) {\n    float h = f(p.xz);\n    return h;\n}\n\nvec3 fmCol(float t,vec3 a,vec3 b,vec3 c,vec3 d) {\n    \n    return a + b * cos( (radians(180.)*2.0) * (c * t + d));\n}\n\nmat2 rot(float a) {\n\n    float c = cos(a);\n    float s = sin(a);\n    \n    return mat2(c,-s,s,c);\n}\n\nvec2 scene(vec3 p) {\n\n    vec2 res = vec2(1.,0.);\n\n    vec3 q = p;    \n    vec2 l = vec2(p.y-f(p.xz+.5)*.25,45.);\n\n    res = l;\n    return res;\n\n}\n\nvec2 rayScene(vec3 ro,vec3 rd) {\n    \n    float d = -1.0;\n    float s = 0.;\n    float e = 100.;  \n\n    for(int i = 0; i < 164; i++) {\n\n        vec3 p = ro + s * rd;\n        vec2 dist = scene(p);\n   \n        if(dist.x < EPS || e <  dist.x ) { break; }\n        s += dist.x;\n        d = dist.y;\n\n        }\n \n        if(e < s) { d = -1.0; }\n        return vec2(s,d);\n\n}\n\nvec3 scatter(vec3 col,float distance,float density,vec3 rd,vec3 ld) {\n    float fog  = 1. - exp(-distance * density);\n    float light = max(dot(rd,ld),0.);\n    vec3 fog_col = mix(vec3(.5,.6,.7),vec3(.6,.5,.1),pow(light,8.));\n    return mix(col,fog_col,fog);\n}\n\nvec3 calcNormal(vec3 p,float d) {\n    vec3 e = vec3(EPS*d,0.,0.);\n    return normalize(vec3(f2(p-e.xyy)-f2(p+e.xyy),\n                     2.*e.x,\n                     vec3(f2(p-e.yxx)-f2(p+e.yxx))));  \n    \n}\n\nvec3 rayCamDir(vec2 uv,vec3 camPosition,vec3 camTarget,float fPersp) {\n\n     vec3 camForward = normalize(camTarget - camPosition);\n     vec3 camRight = normalize(cross(vec3(0.0,1.0,0.0),camForward));\n     vec3 camUp = normalize(cross(camForward,camRight));\n\n\n     vec3 vDir = normalize(uv.x * camRight + \n                 uv.y * camUp + camForward * fPersp);  \n\n     return vDir;\n}\n\nvec3 render(vec3 ro,vec3 rd) {\n \nvec2 d = rayScene(ro, rd);\n\nvec3 col = vec3(1.);\n\nif(d.y >= 0.) {\n\nvec3 p = ro + rd * d.x;\nvec3 n = calcNormal(p,d.x);\nvec3 l = normalize(vec3(-2.,.05,-5.5));\n     l.xz *= rot(-2.5+sin(iTime*.05)-3.3);\n\nvec3 h = normalize(l - rd);\nvec3 r = reflect(rd,n);\n\nfloat amb = sqrt(clamp(0.5 + 0.5 * n.y,0.0,1.0));\nfloat dif = clamp(dot(n,l),0.0,1.0);\n\nfloat spe = pow(clamp(dot(n,h),0.0,1.0),16.) * dif * (.04 + 0.9 * pow(clamp(1. + dot(h,rd),0.,1.),5.));\n\nfloat ind = clamp(dot(n,normalize(h*vec3(-1.,0.,1.))),0.,1.);\n\nfloat fre = pow(clamp(1. + dot(n,rd),0.0,1.0),2.0);\nfloat ref = smoothstep(-.2,.2,r.y);\nvec3 linear = vec3(0.);\n\nlinear += .005* dif * vec3(.25);\nlinear += .001* amb * vec3(0.02,0.4,0.1);\n\ncol = col * linear * spe * ind;\n\nvec3 c = scatter(col,.5,d.x*d.x,rd,l);\ncol = mix(col,vec3(1.)+c*12.,1.-exp(-.25*d.x*d.x*d.x));\n}\n\nreturn col;\n}\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord) {\n \nvec3 color = vec3(0.);\n\nvec3 cam_tar = vec3(0.);\nvec3 cam_pos = vec3(0.,.25,1.);\n\nvec2 uv = (2. * fragCoord.xy - iResolution.xy) / iResolution.y; \n\nvec3 dir = rayCamDir(uv,cam_pos,cam_tar,1.); \ncolor = render(cam_pos,dir);  \ncolor = pow(color,vec3(.4545));      \nfragColor = vec4(color,1.0);\n\n}\n","name":"Image","description":"","type":"image"}]}