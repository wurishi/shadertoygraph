{"ver":"0.1","info":{"id":"fsVfWc","date":"1658933595","viewed":99,"name":"Maze generator","username":"maze_maze","description":"A simple maze generator\nYou can change the scale of maze in Common","likes":7,"published":1,"flags":32,"usePreview":0,"tags":["procedural","noise","generator","hash","maze","labyrinth"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define read(P) texelFetch(iChannel0, P, 0)\n\n// A simple maze generator\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    ivec2 uv = ivec2(fragCoord) / SCALE;\n    ivec2 uv2 = ivec2(uv) / 2;\n    ivec2 cell = uv & 1;\n    if (\n        (cell.x | cell.y) == 0 && // If current cell is a connection between tunnels\n        read(uv2).a == 1.         // And the cell is generated\n    ) {\n        fragColor = vec4(1);\n    } else if ((cell.x & cell.y) == 0) {\n        if (cell.x == 1) { // If the tunnel is on the x axis\n            if (read((uv + ivec2(-1, 0)) / 2).x == 1.) { // If the cell on the left points to the right\n                fragColor = vec4(1);\n            }\n            if (read((uv + ivec2(1, 0)) / 2).x == -1.) { // If the cell on the right points to the left\n                fragColor = vec4(1);\n            }\n        } else { // If the tunnel is on the y axis\n            if (read((uv + ivec2(0, 1)) / 2).y == -1.) { // If the cell above points upwards\n                fragColor = vec4(1);\n            }\n            if (read((uv + ivec2(0, -1)) / 2).y == 1.) { // If the cell below points downwards\n                fragColor = vec4(1);\n            }\n        }\n    } else {\n        fragColor = vec4(0);\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Noise function from my other post https://www.shadertoy.com/view/fdKBDV\n#define noise3D(P) float((P.x * 676769 ^ P.y * 53769 ^ P.z * 24869) * 676769) * 4.656613e-10\n#define read(P) texelFetch(iChannel0, P, 0)\n\n// This thing generates random tunnel directions\n// If the cell has something, it will then create child on one of four side\n// And the child that is created stores (in what direction the parent is)\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    ivec2 uv = ivec2(fragCoord);\n    ivec3 uv3 = ivec3(uv, iFrame + int(iDate.w));\n    fragColor = vec4(0);\n    if (iFrame == 0) {\n        if ((uv.x | uv.y) == 0) {\n            fragColor = vec4(0, 0, 0, 1);\n        }\n    } else {\n        ivec2 uvf = uv * SCALE * 2;\n        ivec2 res = ivec2(iResolution.xy) - 1;\n        if (uvf.x > res.x || uvf.y > res.y) { // If the cell is out of the visible range\n            fragColor = vec4(0);\n        } else {\n            vec4 lastColor = read(uv);\n            if (lastColor.a == 1.) { // If the cell is already difined\n                fragColor = lastColor; // Do nothing\n            } else {\n                int rand = int(abs(noise3D(uv3)) * 4.); // Random direction\n                // Check all four sides of the cell\n                // If there is a cell and if the random direction matches the side direction\n                // Then save the direction to that cell (aka the parent)\n                if (read(uv + ivec2(-1, 0)).a == 1. && rand == 0) {\n                    fragColor = vec4(-1, 0, 0, 1);\n                }\n                if (read(uv + ivec2(0, -1)).a == 1. && rand == 1) {\n                    fragColor = vec4(0, -1, 0, 1);\n                }\n                if (read(uv + ivec2(1, 0)).a == 1. && rand == 2) {\n                    fragColor = vec4(1, 0, 0, 1);\n                }\n                if (read(uv + ivec2(0, 1)).a == 1. && rand == 3) {\n                    fragColor = vec4(0, 1, 0, 1);\n                }\n            }\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"const int SCALE = 6;","name":"Common","description":"","type":"common"}]}