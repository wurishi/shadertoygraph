{"ver":"0.1","info":{"id":"tsfcWN","date":"1584892892","viewed":256,"name":"泰森多边形 Voronoi","username":"ywqy","description":"泰森多边形","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["voronoi"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//learn from https://thebookofshaders.com/12/?lan=ch\n//Then learn from https://iquilezles.org/articles/voronoilines\n\n#define ANIMATE\n\nvec2 random2( vec2 p ) {\n    return fract(sin(\n        vec2(dot(p,vec2(127.1,311.7)),\n             dot(p,vec2(269.5,183.3)))\n    )*43758.5453);\n}\n\nvec3 voronoi(in vec2 uv) {\n    \n\t//整数小数分离\n    //Tile the space\n    vec2 i_uv = floor(uv);\n    vec2 f_uv = fract(uv);\n    \n    //----------------------------------\n    // 通道一：常规网格噪声\n    // first pass: regular vornoi\n    //----------------------------------\n    \n    //最短向量，最近邻居\n    vec2 minVector, nearNeighbor;\n    \n    //最短距离\n    float minDistance = 8.0;\n    \n    for (int y = -1; y <= 1; y++) {\n        for (int x = -1; x <= 1; x++) {\n        \t//当前邻居\n            //Neigbor place in the grid\n            vec2 curNeighbor = vec2(float(x), float(y));\n            \n            //获取邻居的随机点\n            //Random position from current + neighbor place in the grid\n            vec2 neighborPoint = random2(i_uv + curNeighbor);\n            \n            #ifdef ANIMATE\n            neighborPoint = 0.5 + .5*sin(iTime + 3.14159 * neighborPoint);\n            #endif\n            \n            //像素点到邻居随机点的距离\n            //Vector from the pixel to point\n            vec2 curVector = curNeighbor + neighborPoint - f_uv;\n            \n            //计算长度\n            //calculate distance\n            float curDistance = dot(curVector, curVector);\n            \n            //滤出最短距离，邻居，向量\n            if(curDistance < minDistance) {\n            \tminDistance = curDistance;\n                minVector = curVector;\n                nearNeighbor = curNeighbor;\n            }\n        }\n    }\n    \n    //----------------------------------\n    // 通道二：边界距离\n    // second pass: distance to borders\n    //----------------------------------\n    \n    minDistance = 8.0;\n    for (int y = -2; y <= 2; y++) {\n        for (int x = -2; x <= 2; x++) { \n        \t//最近邻居的邻居\n            //Neighbor'Neighbor\n            vec2 curNeighbor = nearNeighbor + vec2(float(x), float(y));\n            \n            vec2 neighborPoint = random2(i_uv + curNeighbor);\n            \n            #ifdef ANIMATE\n            neighborPoint = 0.5 + .5*sin(iTime + 3.14159 * neighborPoint);\n            #endif\n            \n            vec2 curVector = curNeighbor + neighborPoint - f_uv;\n            \n            //排除自相交\n            if(dot(minVector - curVector, minVector - curVector)>0.00001)\n            \t//像素在最近点和次近点的比值\n                minDistance = min(minDistance, \n                         dot(0.5 * (minVector + curVector),\n                             normalize(curVector - minVector)\n                            ));\n            \n        }\n    }\n    \n    return vec3(minDistance, minVector);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = fragCoord/iResolution.xx;\n    \n    vec3 c = voronoi( 8.0*uv );\n\n    //画等值线\n    //Show isolines\n    vec3 addColor= vec3(0.3, .6, 0.6);\n    vec3 color = c.x * (.5 + .5*sin(32.0*c.x))*vec3(1.0);\n    \n    //画边界\n    //Draw broders\n    color = mix(addColor, color, smoothstep(.04, .07, c.x));\n    \n    //画细胞中心\n    //Draw cell center\n    float dd = length(c.yz);\n\tcolor = mix(addColor, color, smoothstep(0.0, 0.12, dd) );\n    color += addColor * (1.0-smoothstep( 0.0, 0.04, dd));\n    \n    \n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}