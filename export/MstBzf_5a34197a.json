{"ver":"0.1","info":{"id":"MstBzf","date":"1526258510","viewed":843,"name":"Smooth value noise fade","username":"Tezza48","description":"using fractal value noise to fade between two images.","likes":19,"published":1,"flags":0,"usePreview":0,"tags":["noise","transition","fade","value"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3Rr","filepath":"/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","previewfilepath":"/media/ap/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float seed = 16.0;\nfloat sinNoise(vec2 uv)\n{\n    return fract(abs(sin(uv.x * 180.0 + uv.y * 3077.0) * 53703.27));\n}\n\nfloat valueNoise(vec2 uv, float scale)\n{\n    vec2 luv = fract(uv * scale);\n    vec2 luvs = smoothstep(0.0, 1.0, fract(uv * scale));\n    vec2 id = floor(uv * scale);\n    float tl = sinNoise(id + vec2(0.0, 1.0));\n    float tr = sinNoise(id + vec2(1.0, 1.0));\n    float t = mix(tl, tr, luvs.x);\n    \n    float bl = sinNoise(id + vec2(0.0, 0.0));\n    float br = sinNoise(id + vec2(1.0, 0.0));\n    float b = mix(bl, br, luvs.x);\n    \n    return mix(b, t, luvs.y) * 2.0 - 1.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    uv.y /= iResolution.x/iResolution.y;\n    \n    float sinN = sinNoise(uv);\n    \n    float scale = 4.0;\n    \n\tfloat fractValue = 0.0;\n    float amp = 1.0;\n    for(int i = 0; i < 16; i++)\n    {\n    \tfractValue += valueNoise(uv, float(i + 1) * scale) * amp;\n        amp /= 2.0;\n    }\n    \n    fractValue /= 2.0;\n    fractValue += 0.5;\n    \n    float time = mix(-0.5, 1.0, cos(iTime)/2.0 +0.5);\n    //time = 1.0;\n    float cutoff = smoothstep(time+ 0.1, time- 0.1, fractValue);\n    \n    vec4 col = mix(texture(iChannel0, uv), texture(iChannel1, uv), cutoff);\n\n    // Output to screen\n    fragColor = vec4(col);\n}","name":"Image","description":"","type":"image"}]}