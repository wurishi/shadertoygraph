{"ver":"0.1","info":{"id":"sdjXR1","date":"1623748386","viewed":83,"name":"Kaleidoscopical","username":"jellejanwil","description":"Kaleidoscope effect using.","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["kaleidoscope"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv = ((rotMat(iTime * 0.1) * uv) + 1.0) / 2.0;\n    fragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGRr","filepath":"/media/a/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","previewfilepath":"/media/ap/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","type":"music","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define PI 3.1415926535897932384626433832795\n\n//COOL TEXTURES\n\n// landscape:\n// gShaderToy.SetTexture(0, {mSrc:'https://iso.500px.com/wp-content/uploads/2014/07/big-one.jpg', mType:'texture', mID:1, mSampler:{ filter: 'mipmap', wrap: 'repeat', vflip:'true', srgb:'false', internal:'byte' }});\n// https://unsplash.com/photos/czDvRp5V2b0\n\nvec3 determineTriangleAxis(float x, float y)\n{\n    if (x>= 0.0 && y>=0.0){\n        if (x>y) {\n            //return 6;\n            return vec3(1.0, 0, 0);\n        }else {\n            //return 5;\n            return vec3(.5, .5, 1.0);\n        }\n    }else if (x>= 0.0 && y < 0.0){\n        if (x>abs(y)) {\n            //return 7;\n            return vec3(0.5,-0.5, 1.0);\n\n        }else {\n            //return 0;\n            return vec3(0.0, -1.0, 0.0);\n        }\n    }else if (x< 0.0 && y>= 0.0){\n        if (abs(x)>y) {\n            //return 3;\n            return vec3(-0.5, 0.5, 1.0);\n        }else {\n            //return 4;\n            return vec3(0, 1.0, 0);\n        }\n    }else {\n        if (abs(x)>abs(y)) {\n            //return 2;\n            return vec3(-1.0, 0, 0);\n        }else {\n            //return 1;\n            return vec3(-0.5,-0.5, 1.0);\n        }\n    }\n}\n\n\nvec2 reflectPoint(vec2 p){\n    // Point must be aligned with triangle 0\n    vec2 pp = rotMat(-(1.0/8.0)*PI) * p;\n    pp = vec2(-pp.x, pp.y);\n    pp = rotMat((1.0/8.0)*PI) * pp;\n    return pp;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = (fragCoord/iResolution.xy) * 2.0 - 1.0;\n    \n    // Kaleidoscope effect\n    // left side of target triangle\n    vec2 tls = vec2(0,-1);\n\n    // pixel belongs to the triangle that has this left axis.\n    vec3 triangle = determineTriangleAxis(uv.x,uv.y);\n    vec2 ta = normalize(triangle.xy);\n    \n    float cosa = dot(ta, tls) / (length(ta)*length(tls));\n    float sina = sqrt(1.0 - pow(cosa, 2.0));\n    \n    // rotation matrix\n    mat2 mat;\n    mat[0] = vec2(ta.x*tls.x + ta.y * tls.y, ta.x*tls.y - tls.x * ta.y);\n    mat[1] = vec2(tls.x * ta.y - ta.x * tls.y, ta.x*tls.x + ta.y * tls.y);\n    \n    vec2 tuv = mat * uv;\n    \n    if (triangle.z > 0.0) {\n        tuv = reflectPoint(tuv);\n    }\n    \n    // Other parameters\n    float speed = 0.02;\n    float scale = 0.8;\n    float mval = smoothstep(0.1,1.0,(sin(texture(iChannel1, vec2(0)).x * 0.3) + 1.0) * 0.2);\n    \n    vec2 mouseOffset = iMouse.xy / iResolution.xy;\n    vec2 musicOffset = vec2(0);\n    //musicOffset = smoothstep(0.55,2.0,vec2(texture(iChannel1, vec2(0)).x)) * exp2(-3.0);;\n    vec2 offset = mouseOffset + musicOffset.xy;\n    \n    tuv = tuv * scale + iTime * speed + offset;\n    \n    vec4 col = texture(iChannel0, vec2(tuv.x+ iTime * speed + cos(mval * 2.0 * PI) * 0.2, tuv.y+ iTime * speed + sin(mval * 2.0 * PI) * 0.2));\n    // Output to screen\n    // Seperate color channels\n    col.b = texture(iChannel0, vec2(tuv.x+ iTime * speed + cos(mval * 2.0 * PI) * 0.2 + mval * 0.08, tuv.y+ iTime * speed + sin(mval * 2.0 * PI) * 0.2 + mval * 0.08)).b;\n    fragColor = col;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"mat2 rotMat(float angle){\n    return mat2(vec2(cos(angle),sin(angle)), vec2(-sin(angle),cos(angle)));\n}","name":"Common","description":"","type":"common"}]}