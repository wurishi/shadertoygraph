{"ver":"0.1","info":{"id":"ltGGDD","date":"1474630787","viewed":727,"name":"Simple Gamma Corrected Gradient","username":"felixfaire","description":"A simple illustration of mixing colours with and without gamma correction. Not an exciting shader but maybe a useful reference for other people understanding this for the first time.","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["example","simple","gradient","gamma","gammacorrection"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// A completely trivial shader that illustrates mixing colours\n// with and without gamma correction. The top bar is with gamma correction\n// the bottom bar is without gamma correction.\n\n// Thinking about dark to light brightnesses like \n// low to high audio frequencies in comparison to perceptual brightness\n// and perceptual pitch of musical scales respectively really helped \n// me understand the concept of gamma correction.\n\n// For more info about gamma see\n// http://blog.johnnovak.net/2016/09/21/what-every-coder-should-know-about-gamma/\n\n\nconst float GAMMA = 2.2;\n\nvec3 gammaMix( vec3 a, vec3 b, float t, float gamma )\n{\n    // Scale the input to perceptually linear brightness\n    // assuming a and b are in srgb space\n\tvec3 aG = pow( a, vec3( gamma ) );\t\n\tvec3 bG = pow( b, vec3( gamma ) );\n    \n    // Mix the colours in linear space\n    vec3 linearMix = mix( aG, bG, t );\n\t\n    // Scale the mixed value back to sRGB space \n\treturn pow( linearMix, vec3( 1.0 / gamma ) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\n    // Choose two random starting colours (assuming srgb space)\n\tvec3 col1 = vec3( 0.0, 0.0, 1.0 );\n\tvec3 col2 = vec3( 0.0, 1.0, 0.0 );\n\t\n\tvec3 col = vec3( 0.0 );\n\t\n\tif (uv.y > 0.5)\n        col = gammaMix( col1, col2, uv.x, GAMMA ); // Gamma corrected colour mix\n\telse\n\t\tcol = mix( col1, col2, uv.x );\t\t\t   // Normal colour mix\n\t\n\tfloat barWidth = 0.1;\n\tcol *= smoothstep( barWidth, barWidth - 0.001, abs( uv.y - 0.5 ) );\n\n \tfragColor = vec4( col, 1.0 );\n}\n","name":"Image","description":"","type":"image"}]}