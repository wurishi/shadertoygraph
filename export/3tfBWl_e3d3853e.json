{"ver":"0.1","info":{"id":"3tfBWl","date":"1598000699","viewed":109,"name":"Deeper Zoom Mandelbrot","username":"Ben1152000","description":"Used deeper zoom concept from: https://www.shadertoy.com/view/3l2Xz3\nand shading technique based on distance from: https://www.shadertoy.com/view/lsX3W4","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["fractal","mandelbrot","zoom"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TAU 6.28318\n#define NUM_COLOR 50.0\n#define MAX_ITER 600\n#define ZOOM_RATE 1.5\n#define ORIGIN vec2(-0.05026782, 0.6721055)\n#define ORIGIN_SMALL vec2(1e-16, -1.5e-19)\n#define SHADE 12.5\n\nstruct iterdist {\n    int iter;\n    float dist;\n};\n\niterdist mandelbrot( vec4 c, int iterations ) {\n    // non-const iterations makes a cool growy animation\n    vec4 z = vec4(0);\n    vec2 dz = vec2(0);\n    iterdist i;\n    for (i.iter = 0; i.iter < iterations; i.iter++) {\n        dz = 2.0*vec2(z.x*dz.x-z.y*dz.y, z.x*dz.y + z.y*dz.x) + vec2(1.0,0.0);\n        z.zw = vec2(z.z*z.z - z.w*z.w, z.z*z.w*2.0) \n            + 2.0 * vec2(z.x*z.z - z.y*z.w, z.x*z.w + z.y*z.z);\n        z.xy = vec2(z.x*z.x - z.y*z.y, z.x*z.y*2.0);\n        z += c;\n        if (length(z) >= 4.0) {\n            i.dist = 0.5*sqrt(dot(z,z)/dot(dz,dz))*log(dot(z,z));\n            return i;\n        }\n        // Hack to allow for deeper zoom: https://www.shadertoy.com/view/3l2Xz3\n        if (length(z.zw) / length(z.xy) > 0.01) { // 0.01 seems about right\n            z.xy = z.xy + z.zw;\n            z.zw = vec2(0.0);\n        }\n    }\n    i.iter = -1;\n    i.dist = 0.0;\n    return i;\n}\n\nvec3 color( int i ) {\n    return 0.5 + 0.5*cos(2.7+(mod(float(i), NUM_COLOR) / NUM_COLOR)*TAU + vec3(0.0,.6,1.0));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 coord = (2.0*fragCoord - iResolution.xy) * pow(ZOOM_RATE, -iTime) / iResolution.y;\n    iterdist i = mandelbrot(vec4(ORIGIN, coord + ORIGIN_SMALL), 2 + int(5.0 * iTime * ZOOM_RATE));\n    float shade = min(i.dist / pow(ZOOM_RATE, -(SHADE + iTime)), 1.0);\n    fragColor = vec4(sqrt(color(i.iter) * float(i.iter >= 0) * shade), 1.0);\n}","name":"Image","description":"","type":"image"}]}