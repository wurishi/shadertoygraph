{"ver":"0.1","info":{"id":"XXBBWh","date":"1729355985","viewed":82,"name":"Flood-fill","username":"untodesu","description":"Click a mouse button to place a randomly-colored seed on the screen.\n\nUses https://www.shadertoy.com/view/ltB3zD to figure out seed colors","likes":0,"published":3,"flags":32,"usePreview":0,"tags":["floodfill"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texture(iChannel0, fragCoord / iResolution.xy);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define CL vec4(1.0, 0.0, 0.0, 1.0)\n#define CR vec4(0.0, 1.0, 0.0, 1.0)\n\nconst float PHI = 1.61803398874989484820459; // Φ = Golden Ratio \n\n// Gold Noise ©2015 dcerisano@standard3d.com\n// - based on the Golden Ratio\n// - uniform normalized distribution\n// - fastest static noise generator function (also runs at low precision)\n// - use with indicated fractional seeding method\n// https://www.shadertoy.com/view/ltB3zD\nfloat gold_noise(in vec2 xy, in float seed)\n{\n    return fract(tan(distance(xy*PHI, xy)*seed)*xy.x);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    if(iMouse.z > 0.0|| iMouse.w > 0.0) {\n        if(distance(iMouse.xy, fragCoord) == 1.0) {\n            if(sign(iMouse.w) > 0.0) {\n                fragColor.x = gold_noise(iMouse.xy, iTime);\n                fragColor.z = gold_noise(iMouse.yx, iTime);\n                fragColor.y = gold_noise(iMouse.xx, iTime);\n                fragColor.w = 1.0;\n                return;\n            }\n        }\n    }\n\n    vec4 cols[5];\n    cols[0] = texture(iChannel0, vec2(fragCoord.x + 1.0, fragCoord.y) / iResolution.xy);\n    cols[1] = texture(iChannel0, vec2(fragCoord.x - 1.0, fragCoord.y) / iResolution.xy);\n    cols[2] = texture(iChannel0, vec2(fragCoord.x, fragCoord.y + 1.0) / iResolution.xy);\n    cols[3] = texture(iChannel0, vec2(fragCoord.x, fragCoord.y - 1.0) / iResolution.xy);\n    cols[4] = texture(iChannel0, fragCoord.xy / iResolution.xy);\n    \n    if(cols[4].a > 0.0) {\n        fragColor = cols[4];\n        fragColor.a -= 1.0 / 2.0;\n        fragColor.rgb *= step(0.0, fragColor.a);\n        return;\n    }\n    \n    if(cols[4].a < 0.0) {\n        fragColor = vec4(0.0, 0.0, 0.0, 0.0);\n        return;\n    }\n\n    for(int i = 0; i < 4; ++i) {\n        if(cols[i].a > 0.95) {\n            fragColor = cols[i];\n            fragColor.a = 1.0;\n            return;\n        }\n    }\n\n    fragColor = vec4(0.0, 0.0, 0.0, 0.0);\n}\n","name":"Buffer A","description":"","type":"buffer"}]}