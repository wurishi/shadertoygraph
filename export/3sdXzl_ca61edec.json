{"ver":"0.1","info":{"id":"3sdXzl","date":"1572641164","viewed":67,"name":"GPR-200-01 - The Checkerboard","username":"adel_talhouk","description":"Modify the floats at the top to change the number of rows and columns","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["checkerboard"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Rows and columns\nfloat numOfRows = 10.0;\t\t\t\t//Modify this\nfloat numOfColumns = 15.0;\t\t\t//Modify this\n\n//Square coordinates\nvec2 maxSquareCoordinates = vec2(0.2,0.2);\nvec2 minSquareCoordinates = vec2(0.1,0.1);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    //Colours\n    vec3 white = vec3(1.0,1.0,1.0);\n    vec3 black = vec3(0.0,0.0,0.0);\n\n    //Display\n    vec3 coloursToDisplay = vec3(1.0,1.0,1.0);\n    vec4 display;\n    \n    //Length and width step functions\n    float lengthStepFunction = step(maxSquareCoordinates.x, uv.x) - step(minSquareCoordinates.x, uv.x);\n    float widthStepFunction = step(maxSquareCoordinates.y, uv.y) - step(minSquareCoordinates.y, uv.y);\n    \n    //Multiply the uv x and y values by rows and columns\n    uv.x *= numOfColumns;\n    uv.y *= numOfRows;\n    uv = floor(uv);\n        \n   \t//Logic to draw the pattern\n    if(mod(uv.x, 2.0) == 0.0)\t//Alternate patterns on the uv.x using mod\n    {\n        if(mod(uv.y, 2.0) == 0.0)\t//Alternate patterns on uv.y\n       \t\tcoloursToDisplay = black * (lengthStepFunction * widthStepFunction);\t//Black tiles\n        else\n            coloursToDisplay += white * (lengthStepFunction * widthStepFunction);\t//White tiles\n    }\n\t   else\t//odd\n    {\n        //Alternate patterns on the uv.y\n        if(mod(uv.y, 2.0) == 0.0)\t//Even result of mod\n       \t\tcoloursToDisplay += white * (lengthStepFunction * widthStepFunction);\t//White tiles\n        else\t//Odd result\n            coloursToDisplay = black * (lengthStepFunction * widthStepFunction);\t//Black tiles\n    }\n    \n    //Aspect ratio\n    float aspectRatio = iResolution.y/iResolution.x;\n    uv.y *= aspectRatio;\n    \n    //Update display\n    display = vec4(coloursToDisplay, 1.0);\n\n    // Output to screen\n    fragColor = display;\n}","name":"Image","description":"","type":"image"}]}