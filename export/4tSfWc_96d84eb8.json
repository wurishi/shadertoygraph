{"ver":"0.1","info":{"id":"4tSfWc","date":"1517339869","viewed":151,"name":"Array_Clock","username":"marzinp","description":"Newbie experiment: I needed help! How can I randomly pick one object from this shader? Thanks to FabriceNeyret and Iapafoto, it works now!","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["distance"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat rand(vec2 f)  {\nreturn fract(sin(dot(f , vec2(14.9898,floor(iDate.w)+78.233))) * 43758.5453);\n}\n//Simple raymarching sandbox with camera\n\n//Raymarching Distance Fields\n//About https://iquilezles.org/articles/raymarchingdf\n//Also known as Sphere Tracing\n\n//Util Start\nvec2 ObjUnion(in vec2 obj0,in vec2 obj1){\n  if (obj0.x<obj1.x)\n  \treturn obj0;\n  else\n  \treturn obj1;\n}\n//Util End\n\n//Scene Start\n//IQs RoundBox (try other objects https://iquilezles.org/articles/distfunctions)\nvec2 obj1(in vec3 p,float f){\n  return vec2(f*length(max(abs(p/f)-vec3(1.0),0.0))-.25-sin(3.0*p.x/f)*sin(3.0*p.y/f)*sin(3.0*p.z/f)*.4,1.0);\n}\nvec2 sphere(in vec3 p,float f){\n  return vec2(f*length(p/f)-1.0,1.0);\n}\nfloat torus( vec3 p, vec2 t)\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\n//repeated object\nvec2 opRepVar( vec3 p, vec3 c,float f)\n{\n   vec3 q = mod(p,c)-0.5*c;\n    float id = rand(floor(p.xy/c.xy)+1.23*floor(p.yz/c.yz)+3782.1*floor(p.zx/c.zx));\n    return id<.33 ? obj1(q,f) :\n           id <.66 ? vec2(torus(q,vec2(1.5,.5)),f) :\n           sphere(q,f);\n}\n\n//Scene End\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n  vec2 vPos=-1.0+2.0*gl_FragCoord.xy/iResolution.xy;\n\n  //Camera animation\n  vec3 vuv=vec3(0,1,0);//Change camere up vector here\n  vec3 vrp=vec3(0,0,0); //Change camere view here\n  vec3 prp=vec3(-sin(.1*iTime)*8.0,2.5,cos(.1*iTime)*8.0); //Change camera path position here\n\n  //Camera setup\n  vec3 vpn=normalize(vrp-prp);\n  vec3 u=normalize(cross(vuv,vpn));\n  vec3 v=cross(vpn,u);\n  vec3 vcv=(prp+vpn);\n  vec3 scrCoord=vcv+vPos.x*u*iResolution.x/iResolution.y+vPos.y*v;\n  vec3 scp=normalize(scrCoord-prp);\n\n  //Raymarching\n  const vec3 e=vec3(.1,0,0);\n  const float maxd=60.0; //Max depth\n\n  vec2 s=vec2(0.1,0.0);\n  vec3 c,p,n;\n\tc=vec3(1.0,0.5,0.2);\n  float f=1.0;\n\tvec3 ecart=vec3(9.0);\n \tfloat dia=1.0;\n  for(int i=0;i<256;i++){\n    if (abs(s.x)<.01||f>maxd) break;\n    f+=s.x;\n    p=prp+scp*f;\n    s=opRepVar(p,ecart,dia);\n  }\n  if (f<maxd){\n\tc=vec3(rand(floor(p.xy/9.0)),rand(floor(p.xz/9.0)),rand(floor(p.yz/9.0)));\n    n=normalize(\n      vec3(s.x-opRepVar(p-e.xyy,ecart,dia).x,\n           s.x-opRepVar(p-e.yxy,ecart,dia).x,\n           s.x-opRepVar(p-e.yyx,ecart,dia).x));\n    float b=dot(n,normalize(prp-p));\n    fragColor=vec4((b*c+pow(b,8.0))*(1.0-f*.01),1.0);//simple phong LightPosition=CameraPosition\n  }\n  else fragColor=vec4(0,0,0,1); //background color\n}\n","name":"Image","description":"","type":"image"}]}