{"ver":"0.1","info":{"id":"lsScDm","date":"1492343206","viewed":447,"name":"Moon glint","username":"WAHa_06x36","description":"A background effect for a game. Extremely fake moonlight glinting off waves.","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["water","impressionism"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\n\nvec4 snoise(vec3 v){ \n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //  x0 = x0 - 0. + 0.0 * C \n  vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n  vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n  vec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n// Permutations\n  i = mod(i, 289.0 ); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients\n// ( N*N points uniformly over a square, mapped onto an octahedron.)\n  float n_ = 1.0/7.0; // N=7\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z *ns.z);  //  mod(p,N*N)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n\t\n// Mix final noise value\nvec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n    vec4 m2 = m * m;\n    vec4 m4 = m2 * m2;\n\n    vec4 pdotx = vec4(dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3));\n\n    vec4 temp = m2 * m * pdotx;\n    vec3 grad = -8.0 * (temp.x * x0 + temp.y * x1 + temp.z * x2 + temp.w * x3);\n    grad += m4.x * p0 + m4.y * p1 + m4.z * p2 + m4.w * p3;\n \n    return 42.0 * vec4(grad, dot(m4, pdotx));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tfloat time = iTime;\n\tvec2 p = (2.0 * fragCoord.xy - iResolution.xy) / max(iResolution.x,iResolution.y);\n\tvec3 position = vec3(p.x, p.y, 0.0) * 6.0 + vec3(0.0, time * 0.3, 0.0);\n\tvec3 worldpos = vec3(p.x, p.y, 0.0) * 80.0 + vec3(0.0, 0.0, -100.0);\n\tvec3 campos = vec3(0.0, 0.0, 16.7);\n\n\tvec3 averageLightIntensity=vec3(0.7,0.8,1.0)*150.0;\n\n\tvec3 waterpos=position*3.0;\n\tconst float scrunch=4.0;\n\tconst float choppiness=0.05;\n\tconst float speed=0.7;\n\tvec4 noisy=snoise(vec3(waterpos.x,waterpos.y*scrunch,speed*time));\n\n\tvec3 V=-worldpos-campos;\n\tvec3 n=normalize(vec3(0.0,0.0,1.0)+choppiness*vec3(noisy.x/scrunch,noisy.y,0.0));\n\tvec3 v=normalize(V);\n\tvec3 L=vec3(0.0,0.0,1.0);\n\tvec3 r=-reflect(L,n);\n\n\tfloat RdotV=max(dot(r,v),0.0);\n\tvec3 specular=vec3(0.01)*pow(RdotV,500.0);\n\n\tvec3 light=specular*averageLightIntensity;\n\n\tfragColor=vec4(light,1.0); // No gamma correction for extra drama.\n}","name":"Image","description":"","type":"image"}]}