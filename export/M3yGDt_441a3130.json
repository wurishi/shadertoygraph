{"ver":"0.1","info":{"id":"M3yGDt","date":"1718387727","viewed":47,"name":"Basic BRDF Visualizer","username":"thoren","description":"Visualizer framework for various BRDFs (Lambert, Phong, and a version of Cook-Torrance included).\n\nMove the light around the scene, and a contour is drawn showing the intensity of the reflected light off the \"surface\" on the bottom of the screen.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["brdf","debug","pbr","viz"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SCALE 300.0\n\nfloat distance2(vec2 a, vec2 b) {\n    return dot(a-b,a-b);\n}\n\nvec4 CompositeOver(vec4 base, vec4 over) {\n    vec3 rgb = (1. - over.a) * base.rgb + over.a * over.rgb;\n    return vec4(rgb, over.a + (1.-over.a) * base.a);\n}\n\nvec4 DrawLight(vec2 fragCoord, vec2 location, float radius) {\n    float r2 = radius*radius;\n    if (distance2(location, fragCoord) < r2) {\n        return vec4(0.9, 0.9, 0.0, 1.0);\n    } else {\n        return vec4(0.0);\n    }\n}\n\nvec4 DrawContour(vec2 fragCoord, vec2 center, float radius, vec3 color) {\n    float d = distance(fragCoord, center);\n    if (abs(d - radius) < 2.0) {\n        return vec4(color,1.0);\n    } else {\n        return vec4(color,0.0);\n    }\n}\n\nfloat Lambert(vec3 n, vec3 l, vec3 v) {\n    return dot(l, n);\n}\n\nfloat Phong(vec3 n, vec3 l, vec3 v) {\n    float a = 130.0;\n    vec3 r = reflect(-l, n);\n    \n    return Lambert(n,l,v) + max(0.0, pow(dot(r,v), a));\n}\n\nfloat DBlinnPhong(vec3 n, vec3 l, vec3 v) {\n    float a = 0.09;\n    float p = (2.0/(a*a) - 2.0);\n    vec3 h = normalize(l+v);\n    return (1.0/(3.1416*a*a)) * pow(dot(n,h), p);\n}\n\nfloat GCookTorrance(vec3 n, vec3 l, vec3 v) {\n    vec3 h = normalize(l+v);\n    float a = (2.0 * dot(h,n) * dot(n,v)) / dot(v,h);\n    float b = (2.0 * dot(h,n) * dot(n,l)) / dot(v,h);\n    return min(1.0, min(a,b));\n}\n\nfloat Fresnel(vec3 n, vec3 l, vec3 v) {\n    vec3 h = normalize(l+v);\n    float ior = 1.5;\n    float f0 = ((ior-1.)*(ior-1.))/((ior+1.)*(ior+1.));\n    return f0 + (1.0 - f0) * pow(1.0 - dot(v,h), 5.0);\n}\n\nfloat CookTorrance(vec3 n, vec3 l, vec3 v) {\n    float rd = 1.0;\n    \n    float d = DBlinnPhong(n,l,v);\n    float g = GCookTorrance(n,l,v);\n    float f = Fresnel(n,l,v);\n    float rs = (d*g*f)/(4.0*dot(n,l)*dot(n,v));\n    \n    float s = 0.5;\n    return dot(n,l) * ((1.-s)*rd + s*rs);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 lightPos = vec3(iMouse.xy / iResolution.xy, 0.0);\n    vec3 surfacePos = vec3(0.5, 0.0, 0.0);\n    vec3 normal = vec3(0.0, 1.0, 0.0);\n    vec3 eye = vec3(fragCoord / iResolution.xy, 0.0);\n    vec3 v = normalize(eye - surfacePos);\n    vec3 l = normalize(lightPos - surfacePos);\n    \n    float lamb = Lambert(normal, l, v);\n    float pho = Phong(normal, l, v);\n    float ct = CookTorrance(normal, l, v);\n\n    // Output to screen\n    fragColor = vec4(1.0);\n    fragColor = CompositeOver(fragColor, DrawContour(fragCoord, vec2(0.5,0.0) * iResolution.xy, lamb * SCALE, vec3(0.1,0.1,0.8)));\n    fragColor = CompositeOver(fragColor, DrawContour(fragCoord, vec2(0.5,0.0) * iResolution.xy, pho * SCALE, vec3(0.1,0.8,0.1)));\n    fragColor = CompositeOver(fragColor, DrawContour(fragCoord, vec2(0.5,0.0) * iResolution.xy, ct * SCALE, vec3(0.8,0.1,0.1)));\n    fragColor = CompositeOver(fragColor, DrawLight(fragCoord, iMouse.xy, 6.0));\n}","name":"Image","description":"","type":"image"}]}