{"ver":"0.1","info":{"id":"7dVczm","date":"1654642780","viewed":135,"name":"ani barrel distortion and c aber","username":"BubbleSorter","description":"screwing around with animorphic barrel distortion and some bad experiments in animorphic chromatic aberation.\n","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["distortion","barrel"],"hasliked":0,"parentid":"MlSXR3","parentname":"Barrel Distortion tutorial"},"renderpass":[{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"#define DISTORTION_ON 1\n#define CHROMATIC_ABERATION_ON 1\n#define REFRAME 2\n#define AnoFactor (2.49f)\n#define ChromaticAberationX (0.001f)\n#define ChromaticAberationY (ChromaticAberationX*0.25f)\n\n\n\n#if 0\n#define Distort brownConradyDistortion\n#define DistortionAmount0X  (0.00)\n#define DistortionAmount0Y  (0.0)\n#define DistortionAmount1X  (0.00)\n#define DistortionAmount1Y  (0.00)\n\n#define DistortionXScale  (1.0)\n\nvec2 brownConradyDistortion(vec2 uv)\n{\n    // positive values of K1 give barrel distortion, negative give pincushion\n    vec2 barrelDistortion0 = vec2(DistortionAmount0X,DistortionAmount0Y);\n    vec2 barrelDistortion1 = vec2(DistortionAmount1X,DistortionAmount1Y);\n\n    // K2 in text books\n    float r2 = uv.x*uv.x + uv.y*uv.y;\n    uv*=(1.0 + barrelDistortion0 * r2 + barrelDistortion1 * r2 * r2);\n    \n    // tangential distortion (due to off center lens elements)\n    // is not modeled in this function, but if it was, the terms would go here\n    return uv;\n}\n\n#elif 1\n#define Distort brownConradyDistortionv2\n#define VerticalCurvyness   (0.0f)\n#define VerticalBulge         (1.0f)\n\n#define HorizontalCurvyness   (0.1f)\n#define HorizontalBulge   (2.0f)\n\nvec2 brownConradyDistortionv2(vec2 uv)\n{\n    float DistortionAmount1X = VerticalCurvyness;\n    float DistortionAmount0X = VerticalCurvyness*VerticalBulge;\n\n    float DistortionAmount1Y = HorizontalCurvyness;\n    float DistortionAmount0Y = HorizontalCurvyness * HorizontalBulge;\n\n    // positive values of K1 give barrel distortion, negative give pincushion\n    vec2 barrelDistortion0 = vec2(DistortionAmount0X,DistortionAmount0Y);\n    vec2 barrelDistortion1 = vec2(DistortionAmount1X,DistortionAmount1Y);\n\n    // K2 in text books\n    float r2 = uv.x*uv.x + uv.y*uv.y;\n    uv*=(1.0 + barrelDistortion0 * r2 + barrelDistortion1 * r2 * r2);\n    \n    // tangential distortion (due to off center lens elements)\n    // is not modeled in this function, but if it was, the terms would go here\n    return uv;\n}\n\n#define DistortionXScale  (1.0)\n#else\n#define Distort easyBarrelDistortion\n#define DistortionAmount  (1.4)\n#define DistortionXScale  (0.15)\n// some shaders implement barrel distortion like this, but it's more expensive\n// by far\nvec2 easyBarrelDistortion(vec2 uv)\n{\n    float demoScale = 1.1;\n    uv *= demoScale;\n    float th = atan(uv.x, uv.y);\n    float barrelDistortion = DistortionAmount0X;\n    float r = pow(sqrt(uv.x*uv.x + uv.y*uv.y), barrelDistortion);\n    uv.x = r * sin(th);\n    uv.y = r * cos(th);\n    return uv;\n}\n\n#endif\n\n\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    //uv.y = 1.0 - uv.y;\n    uv = uv * 2.0 - 1.0;\n\n    \n\n#if DISTORTION_ON\n    vec2 lerpFactor = vec2(mix(1.0,DistortionXScale,AnoFactor/2.5),1.0f);\n    vec2 newUV = Distort(uv);\n    uv = mix(uv,newUV,lerpFactor);\n\n    #if REFRAME == 0\n        vec2 Extreme = vec2(1.0f,1.0f);\n    #elif REFRAME == 1   \n        vec2 BottomExtreme = Distort(vec2(0.0,1.0f));\n        vec2 RightExtreme = Distort(vec2(1.0f,0.0f));\n        vec2 Extreme = mix (vec2(1.0f,1.0f),vec2(RightExtreme.x,BottomExtreme.y),lerpFactor);\n    #else\n        vec2 Extreme = Distort(vec2(1.0f,1.0f));\n        Extreme = mix(vec2(1.0f,1.0f),Extreme,lerpFactor);\n    #endif\n    \n    uv/=Extreme;\n#endif\n\n    vec2 uvForward = uv * vec2(ChromaticAberationX,ChromaticAberationY);\n    vec2 uvRight = vec2( -uvForward.y, uvForward.x);\n    vec2 redOffset =   vec2(-1.0f,-0.5f);\n    vec2 greenOffset = vec2(-1.0f,0.5f);\n    vec2 blueOffset = vec2(1.0f,0.0f);\n    vec2 redUV = uv + uvForward*redOffset.x + uvRight*redOffset.y;\n    vec2 greenUV = uv + uvForward*greenOffset.x + uvRight*greenOffset.y;\n    vec2 blueUV = uv + uvForward*blueOffset.x + uvRight*blueOffset.y;\n\n\n    uv = 0.5 * (uv + 1.0);\n    redUV = 0.5 * (redUV + 1.0);\n    greenUV = 0.5 * (greenUV + 1.0);\n    blueUV = 0.5 * (blueUV + 1.0);\n    if (uv.x < 0.0f || uv.x > 1.0f || uv.y < 0.0f || uv.y > 1.0f)\n        fragColor = vec4(0.0f,0.0f,0.0f, 0.0f);\n     else\n     {\n#if !CHROMATIC_ABERATION_ON\n        vec4 frag0 = texture(iChannel0,uv);\n         vec4 frag1 = texture(iChannel1,uv);\n        vec4 frag1NoCA = frag1;\n\n#else\n        vec4 frag0r =texture(iChannel0,redUV);\n        vec4 frag0g =texture(iChannel0,greenUV);\n        vec4 frag0b =texture(iChannel0,blueUV);\n        vec4 frag0 = vec4(frag0r.r,frag0g.g,frag0b.b,1.0f);\n        vec4 frag1r =texture(iChannel1,redUV);\n        vec4 frag1g =texture(iChannel1,greenUV);\n        vec4 frag1b =texture(iChannel1,blueUV);\n        vec4 frag1 = vec4(frag1r.r,frag1g.g,frag1b.b,1.0f);\n        vec4 frag1NoCA = texture(iChannel1,uv);\n#endif\n         vec3 diff = vec3(0.0f,1.0f,0.0f)-frag1NoCA.rgb;\n         float dist = sqrt(dot(diff,diff));\n         fragColor =dist > 0.75f ? frag1:frag0;\n\n      }\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv*=20.0f;\n    int x = int(uv.x);\n    int y = int(uv.y);\n    x = x%2;\n    y = (y+1)%2;\n    if (x == y)\n        fragColor = vec4(1.0,1.0,1.0,1.0);\n    else\n        fragColor = vec4(0.0f,0.0f,0.0f,1.0f);\n}","name":"Buffer A","description":"","type":"buffer"}]}