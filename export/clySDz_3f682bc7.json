{"ver":"0.1","info":{"id":"clySDz","date":"1686027055","viewed":61,"name":"Will's mandelbrot shader","username":"manuwill","description":"self explanatory","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["coolgood"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n#define PI  3.1415926535897932384\n\n    // Define zoom and pan values\n    float zoom = pow(1.4, -iTime); // example zoom level, change this to zoom in/out exponentially\n    vec2 pan = vec2(-1.188888888, .1888888); // pan to a specific point in the fractal\n\n    // Pixel coordinates\n    vec2 xy = 2.0 * (fragCoord - iResolution.xy / 2.0) / iResolution.y;\n\n    // Apply pan and zoom\n    vec2 c = pan + zoom * xy;\n\n    // Initialize the complex numbers z and c\n    vec2 z = vec2(0.0, 0.0);\n\n    // Scale the maximum number of iterations with the zoom level (more zoom, more iterations)\n    float maxIter = 200.0 * log(.5 / zoom);\n\n    float n = 0.0;\n\n    // Initialize the trap\n    float trap = 1e8;  // Very large initial value\n\n    // The main loop\n    for (float i = 0.0; i < maxIter; i++)\n    {\n        if (dot(z, z) > 100.0)\n            break;\n\n        // z^2 + c\n        z = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + c;\n\n        // Update the trap (minimum distance to the origin)\n        trap = min(trap, length(z));\n\n        n++;\n    }\n\n    // Use smooth coloring\n    if (n < maxIter) {\n        float log_zn = log(dot(z, z)) / 2.0;\n        float nu = log(log_zn / log(2.0)) / log(2.0);\n        n = n + 1.0 - nu;\n    }\n\n    // Convert n to a color with a color gradient\n    float normIter = n / maxIter;\n    float r = 0.5 + 0.5 * cos(3.0 + normIter * 2.0 * PI + trap);\n    float g = 0.5 + 0.5 * cos(3.0 + normIter * 2.0 * PI + 2.0 * PI / 3.0 + trap); // Phase shifted by 2/3 PI\n    float b = 0.5 + 0.5 * cos(3.0 + normIter * 2.0 * PI + 4.0 * PI / 3.0 + trap); // Phase shifted by 4/3 PI\n    vec3 color = vec3(r, g, b);\n\n    // Output to screen\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}