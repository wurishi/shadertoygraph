{"ver":"0.1","info":{"id":"Xc3fDX","date":"1733524291","viewed":84,"name":"Inercia 2024 livecoding","username":"illus0r","description":"Inercia 2024 livecoding","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["livecoding"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define F float\n#define V vec2\n#define W vec3\n#define L length\n#define N normalize\n#define S(x) sin(x + 2.0 * sin(x + 4.0 * sin(x)))\n#define rot(a) mat2(cos(a), -sin(a), sin(a), cos(a))\n#define bg (vec4(0.2, 0.2, 0.5, 1.0) * 0.6)\n\nF bo(W p){\n    W sz = W(0.6, 0.5, 0.7);\n    p = abs(p);\n    p -= sz;\n    return max(p.x, max(p.y, p.z)) * 0.6;\n}\n\nF sdf(W p) {\n    p.z -= 3.0;\n\n    p.yz *= rot(-1.0 + 0.2 * S(iTime * 0.2));\n    p.xz *= rot(3.0 * S(iTime * 0.01));\n\n    p.y += iTime + 2.1 * S(iTime * 0.1);\n\n    F str = L(abs(abs(abs(abs(abs(p.xz) - 2.4) - 0.9) - 0.4) - 0.16) - 0.03) - 0.01;\n\n    F f = 2.0;\n    p.y = sin(p.y * f + iTime) / f;\n\n    p.xz *= rot(0.1 * iTime);\n    p.xy *= rot(0.1 * iTime * 0.618);\n    F b1 = bo(p + 0.2);\n    F b2 = bo(p - 0.2);\n    b1 = abs(b1) - 0.1;\n    b2 = abs(b2) - 0.06;\n    F z = L(V(b1, b2)) - 0.06;\n\n    p.xz *= rot(iTime * 0.1);\n    p.xy *= rot(iTime * 0.16);\n    F k = 1.0 + 0.3 * sin(p.y + iTime);\n    F b = bo(p * k) / k;\n    b = abs(b) - 0.06 + 0.05 * S(p.x * 3.0);\n    F beam = L(V(z, b)) - 0.03;\n    return min(str, beam);\n}\n\nvec3 normal(vec3 p) {\n    float d = sdf(p);\n    vec2 e = vec2(0.0, 0.01);\n    return normalize(vec3(d - sdf(p - e.yxx), d - sdf(p - e.xyx), d - sdf(p - e.xxy)));\n}\n    \n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    F tx = 0.0;\n\n    fragColor = vec4(0.0);\n    vec2 uv = fragCoord / iResolution.xy;\n    uv -= 0.5;\n    uv /= vec2(iResolution.y / iResolution.x, 1.0);\n\n    F i = 0.0, d = 0.0, e = 1.0;\n    W p, P, rd = N(W(uv, 1.0 + 0.01 * sin(L(uv) * 111.0)));\n    for (; i++ < 99.0 && e > 0.0001;) {\n        p = rd * d;\n        d += e = sdf(p);\n    }\n    if (d < 18.0 && i < 99.0) {\n        W n = normal(p);\n        W l = N(W(1.0, 1.0, -1.0));\n        fragColor += dot(n, l) * 0.5 + 0.5;\n        fragColor *= sdf(p + n * 0.3) / 0.3;\n        fragColor += smoothstep(0.9, 0.91, pow(dot(reflect(rd, n), l) * 0.5 + 0.5, 10.0));\n        fragColor = mix(fragColor, bg, smoothstep(10.0, 31.0, d));\n    } else {\n        fragColor = bg;\n    }\n\n    fragColor.a = 1.0;\n}\n","name":"Image","description":"","type":"image"}]}