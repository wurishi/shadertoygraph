{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"// By Morgan McGuire @morgan3d, http://graphicscodex.com\n// Reuse permitted under the BSD license.\n\nfloat square(float s) { return s * s; }\nvec3 square(vec3 s) { return s * s; }\n\nvec3 hueGradient(float t) {\n    vec3 p = abs(fract(t + vec3(1.0, 2.0 / 3.0, 1.0 / 3.0)) * 6.0 - 3.0);\n\treturn (clamp(p - 1.0, 0.0, 1.0));\n}\n\n\nvec3 techGradient(float t) {\n\treturn pow(vec3(t + 0.01), vec3(120.0, 10.0, 180.0));\n}\n\n\nvec3 fireGradient(float t) {\n\treturn max(pow(vec3(min(t * 1.02, 1.0)), vec3(1.7, 25.0, 100.0)), \n\t\t\t   vec3(0.06 * pow(max(1.0 - abs(t - 0.35), 0.0), 5.0)));\n}\n\n\t\nvec3 desertGradient(float t) {\n\tfloat s = sqrt(clamp(1.0 - (t - 0.4) / 0.6, 0.0, 1.0));\n\tvec3 sky = sqrt(mix(vec3(1, 1, 1), vec3(0, 0.8, 1.0), smoothstep(0.4, 0.9, t)) * vec3(s, s, 1.0));\n\tvec3 land = mix(vec3(0.7, 0.3, 0.0), vec3(0.85, 0.75 + max(0.8 - t * 20.0, 0.0), 0.5), square(t / 0.4));\n\treturn clamp((t > 0.4) ? sky : land, 0.0, 1.0) * clamp(1.5 * (1.0 - abs(t - 0.4)), 0.0, 1.0);\n}\n\n\nvec3 electricGradient(float t) {\n\treturn clamp( vec3(t * 8.0 - 6.3, square(smoothstep(0.6, 0.9, t)), pow(t, 3.0) * 1.7), 0.0, 1.0);\t\n}\n\n\nvec3 neonGradient(float t) {\n\treturn clamp(vec3(t * 1.3 + 0.1, square(abs(0.43 - t) * 1.7), (1.0 - t) * 1.7), 0.0, 1.0);\n}\n\n\nvec3 heatmapGradient(float t) {\n\treturn clamp((pow(t, 1.5) * 0.8 + 0.2) * vec3(smoothstep(0.0, 0.35, t) + t * 0.5, smoothstep(0.5, 1.0, t), max(1.0 - t * 1.7, t * 7.0 - 6.0)), 0.0, 1.0);\n}\n\n\nvec3 rainbowGradient(float t) {\n\tvec3 c = 1.0 - pow(abs(vec3(t) - vec3(0.65, 0.5, 0.2)) * vec3(3.0, 3.0, 5.0), vec3(1.5, 1.3, 1.7));\n\tc.r = max((0.15 - square(abs(t - 0.04) * 5.0)), c.r);\n\tc.g = (t < 0.5) ? smoothstep(0.04, 0.45, t) : c.g;\n\treturn clamp(c, 0.0, 1.0);\n}\n\n\nvec3 brightnessGradient(float t) {\n\treturn vec3(t * t);\n}\n\n\nvec3 grayscaleGradient(float t) {\n\treturn vec3(t);\n}\n\n\nvec3 stripeGradient(float t) {\n\treturn vec3(mod(floor(t * 32.0), 2.0) * 0.2 + 0.8);\n}\n\n\nvec3 ansiGradient(float t) {\n\treturn mod(floor(t * vec3(8.0, 4.0, 2.0)), 2.0);\n}\n\n\nvec2 fragCoord;\nvec4 fragColor;\n\nvoid showAll(vec2 coord) {\n\tfloat numPalettes = 12.0;\n\t\n\tfloat t = coord.x / iResolution.x;\n\t// Break up mach bands\n\tfloat j = t + (fract(sin(coord.y * 7.5e2 + fragCoord.x * 6.4) * 1e2) - 0.5) * 0.005;\n\tfloat i = numPalettes * coord.y / iResolution.y;\n\t\n\tif (mod(coord.y, iResolution.y / numPalettes) < max(iResolution.y / 100.0, 3.0)) {\n\t\tfragColor.rgb = vec3(0.0);\n\t} else if (i > 11.0) {\n\t\tfragColor.rgb = hueGradient(t);\n\t} else if (i > 10.0) {\n\t\tfragColor.rgb = techGradient(t);\n\t} else if (i > 9.0) {\n\t\tfragColor.rgb = fireGradient(t);\n\t} else if (i > 8.0) {\n\t\tfragColor.rgb = desertGradient(t);\n\t} else if (i > 7.0) {\n\t\tfragColor.rgb = electricGradient(j);\n\t} else if (i > 6.0) {\n\t\tfragColor.rgb = neonGradient(j);\n\t} else if (i > 5.0) {\n\t\tfragColor.rgb = heatmapGradient(j);\n\t} else if (i > 4.0) {\n\t\tfragColor.rgb = rainbowGradient(j);\n\t} else if (i > 3.0) {\n\t\tfragColor.rgb = brightnessGradient(j);\n\t} else if (i > 2.0) {\n\t\tfragColor.rgb = grayscaleGradient(j);\n\t} else if (i > 1.0) {\n\t\tfragColor.rgb = stripeGradient(t);\n\t} else {\n\t\tfragColor.rgb = ansiGradient(t);\n\t}\n\t\n\t// Show in gamma 2.2 space, since I use these for visualization\n\t// in 3D scenes.\n\tfragColor.rgb = pow(fragColor.rgb, vec3(1.0 / 2.2));\n}\n\n\nvoid mainImage(out vec4 oFragColor, in vec2 iFragCoord) {\n    fragCoord = iFragCoord;\n\tshowAll(mod(fragCoord.xy + \n\t\t\t\tvec2(0.0, sin(iTime * 8.0 + fragCoord.x * 0.02) * 100.0 * float(max(sin(iTime), 0.0))), \n\t\t\tiResolution.xy));\n    oFragColor = fragColor;\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4dsSzr","date":"1395977677","viewed":3840,"name":"1D Gradients","username":"morgan3d","description":"A dictionary of color functions useful for applying as shading functions, visualizations, and falloff curves.","likes":61,"published":1,"flags":0,"usePreview":0,"tags":["colors","palette","rainbow"],"hasliked":0,"parentid":"","parentname":""}}