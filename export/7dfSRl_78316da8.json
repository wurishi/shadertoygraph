{"ver":"0.1","info":{"id":"7dfSRl","date":"1619029328","viewed":93,"name":" 319.2_alexandrov_v0v3","username":"locko","description":"Homework for computer graphic.\nМягкие тени \n• Анти-алиасинг \n• Ambient Occlusion \nЗдание - Г.З. МГУ","likes":0,"published":1,"flags":96,"usePreview":0,"tags":["cmc"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"MtsSzS","filepath":"https://soundcloud.com/danielestebanbejarano/mistery-music","previewfilepath":"https://soundcloud.com/danielestebanbejarano/mistery-music","type":"musicstream","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv) / float(iFrame + 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4sfGRr","filepath":"/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","previewfilepath":"/media/ap/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","type":"volume","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3Rr","filepath":"/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","previewfilepath":"/media/ap/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float INF = 1e10;\nconst vec3 CAMERA_POS = vec3(0, 1.5, -6);\n\nconst vec3 LIGHT1_POS = vec3(-3, 1.5, 5);\nconst float LIGHT1_RADIUS = 0.5;\nconst vec3 LIGHT1_COLOR = vec3(1,0,0);\n\nconst vec3 LIGHT2_POS = vec3(1, 1, 1);\nconst float LIGHT2_RADIUS = 0.2;\nconst vec3 LIGHT2_COLOR = vec3(0,0.7,0.8);\n\nvec3 randDir;\n\nconst int EMISSION  = 0;\nconst int DIFFUSE = 1;\nconst int REFLECTION = 2;\nconst int REFRACTION = 3;\nconst float GLASS_N = 1.5;\nconst float AIR_N = 1.0;\n\n\nfloat tracePlane(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.2 - pos.y) / dir.y;\n    if(t <= 0.0) {\n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    if(dot(worldPos.xz,worldPos.xz) >= 120.0)\n    {\n        return INF;\n    }\n    normal = vec3(0, 1, 0);\n    return t;\n}\n\nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal) {\n    float a = dot(dir, dir);\n    float b = dot(pos, dir);\n    float c = dot(pos, pos) - r * r;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    float t = -b - sqrt(D);\n    if (t > 0.0) {\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    t = -b + sqrt(D);\n    if(t < 0.0) {\n        return INF;\n    }\n    normal = normalize(pos + t * dir);\n    return t;\n}\n\n\nfloat traceCylinder(vec3 pos, vec3 dir, out vec3 normal){\n    float t = (-1.0 - pos.y) / dir.y;\n    if(t <= 0.0) {\n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    if(dot(worldPos.xz,worldPos.xz) < 1.0) {\n        normal = vec3(0,1,0);\n        return t;\n    }\n    \n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - 1.0;\n    float D = b*b - a*c;\n    if (D < 0.0) {\n        return INF;\n    }\n    t = (-b - sqrt(D)) / a;\n    if (t > 0.0) {\n        worldPos = t * dir + pos;\n        if (worldPos.y <= -1.0) {\n            normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n            return t;\n        }\n    }\n    t = (-b + sqrt(D)) / a;\n    if (t < 0.0) {\n        return INF;\n    }\n    worldPos = t * dir + pos;\n    if (worldPos.y <= -1.0) {\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    }\n    return INF;\n    \n}\n\nbool isOccluded(vec3 pos, vec3 target) {\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n    \n    vec3 sphNorm;\n    float sphT = traceSphere(pos, dir, 1.0, sphNorm);\n    if (sphT < dist)\n        return true;\n    vec3 cylNorm;\n    float cylT = traceCylinder(pos, dir, cylNorm);\n    return (cylT < dist);\n}\n\nvec3 computeLight(vec3 pos, vec3 color, vec3 normal) {\n    vec3 toLight1 = LIGHT1_POS - pos;\n    float distSq1 = dot(toLight1, toLight1);\n    float att1 = isOccluded(pos, LIGHT1_POS + randDir * LIGHT1_RADIUS) ? 0.0 : 20.0f / distSq1;\n    \n    vec3 toLight2 = LIGHT2_POS - pos;\n    float distSq2 = dot(toLight2, toLight2);\n    float att2 = isOccluded(pos, LIGHT2_POS + randDir * LIGHT2_RADIUS) ? 0.0 : 10.0f / distSq2;\n    \n    return color * (\n        max(0.0, dot(normal, normalize(toLight1))) * att1 * LIGHT1_COLOR\n        + max(0.0, dot(normal, normalize(toLight2))) * att2 * LIGHT2_COLOR\n        + texture(iChannel1, normal).rgb * 0.5\n        );\n}\n\n\nvec3 refraction(vec3 v, vec3 normal, float n1, float n2) {\n    if (dot(v, normal) < 0.0){\n        normal = -normal;\n    }\n    float cosA = dot(v, normal);\n    float sinA = sqrt(1.0 - cosA*cosA);\n    vec3 tang = normalize(v - cosA*normal);\n    float sinB = (sinA * n1) / n2 ;\n    if (sinB > 1.0) {\n        return reflect(v, normal);\n    }\n    float cosB = sqrt(1.0 - sinB * sinB);\n    return (tang * sinB + normal * cosB);\n}\n\n\nfloat fogSdf(vec3 pos){\n    return length(pos) - 0.8;\n}\n\nfloat BeerLambert(float absorptionCoefficient, float distanceTraveled){\n    return exp(-absorptionCoefficient * distanceTraveled);\n}\n\nvec4 sampleFog(vec3 pos, vec3 dir){\n    float t = fogSdf(pos);\n    float opacity = 1.0;\n    float absorption = 10.0;\n    float totalAbs = 5.0;\n    float MARCH_SIZE = 0.01;\n    for (int i = 0; i < 50; ++i) {\n        vec3 curPos = pos + (float(i) * MARCH_SIZE + t) * dir;\n        float sdf = fogSdf(curPos);\n        if (sdf < 0.0) {\n            float prevOpacity = opacity;\n            opacity *= BeerLambert(absorption * (\n            texture(iChannel3, curPos * 0.2).x\n            + texture(iChannel3, curPos * 0.4).x\n            + texture(iChannel3, curPos * 0.8).x\n            + texture(iChannel3, curPos * 1.6).x\n            ) * 0.25 * abs(sdf), MARCH_SIZE);\n            float absorptionLastStep = prevOpacity - opacity;\n            totalAbs += absorptionLastStep;\n        }\n    }\n    return vec4(vec3(0.55, 0.09, 0.36) * totalAbs, 1.0 - opacity);\n}\n\n\nfloat pow2(float x) {\n    return x*x;\n}\n\n\nfloat rand(float frame) {\n    return fract(sin(dot(vec3(frame), vec3(12.9898, 78.233, 45.5432))) * 43758.5453);\n}\n\nfloat traceBlock(float x, float y, float z, vec3 pos, vec3 dir, out vec3 normal) {\n    vec3 worldPos;\n    float blockT = INF;\n    \n    \n    float t = (x - pos.x) / dir.x;\n    if (t < blockT && t > 0.0) {\n        worldPos = t * dir + pos;\n        if (abs(worldPos.y) < y && abs(worldPos.z) < z) {\n            normal = vec3(1, 0, 0);\n            blockT = t;\n        }\n    }\n    \n    t = (-x - pos.x) / dir.x;\n    if (t < blockT && t > 0.0) {\n        worldPos = t * dir + pos;\n        if (abs(worldPos.y) < y && abs(worldPos.z) < z) {\n            normal = vec3(-1, 0, 0);\n            blockT = t;\n        }\n    }\n    \n    t = (y - pos.y) / dir.y;\n    if (t < blockT && t > 0.0) {\n        worldPos = t * dir + pos;\n        if (abs(worldPos.x) < x && abs(worldPos.z) < z) {\n            normal = vec3(0, 1, 0);\n            blockT = t;\n        }\n    }\n    \n    t = (-y - pos.y) / dir.y;\n    if (t < blockT && t > 0.0) {\n        worldPos = t * dir + pos;\n        if (abs(worldPos.x) < x && abs(worldPos.z) < z) {\n            normal = vec3(0, -1, 0);\n            blockT = t;\n        }\n    }\n    \n    t = (z - pos.z) / dir.z;\n    if (t < blockT && t > 0.0) {\n        worldPos = t * dir + pos;\n        if (abs(worldPos.y) < y && abs(worldPos.x) < x) {\n            normal = vec3(0, 0, 1);\n            blockT = t;\n        }\n    }\n    \n    t = (-z - pos.z) / dir.z;\n    if (t < blockT && t > 0.0) {\n        vec3 worldPos = t * dir + pos;\n        if (abs(worldPos.y) < y && abs(worldPos.x) < x) {\n            normal = vec3(0, 0, -1);\n            blockT = t;\n        }\n    }\n    return blockT;\n}\n\nfloat drawMCU(vec3 curPos, vec3 curDir, out vec3 normal, float t, out float nEnter, out int materialType, inout vec3 colorMult, vec3 randVals){\n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N + GLASS_N);\n    \n    vec3 blockNormal;\n    float blockT = traceBlock(0.1, 0.35, 0.1, curPos - vec3(0, 0, 0), curDir, blockNormal);\n    if (blockT < t) {\n        t = blockT;\n        normal = blockNormal;\n        if (randVals.x  < GLASS_R)\n                materialType = REFLECTION;\n        else {\n            colorMult = vec3(0, 0.5, 0.5);\n            materialType = REFRACTION;\n            nEnter = GLASS_N;\n        }\n    }\n        \n    blockT = traceBlock(0.2, 0.1, 0.05, curPos - vec3(-0.25, -0.25, 0), curDir, blockNormal);\n    if (blockT < t) {\n        t = blockT;\n        normal = blockNormal;\n        if (randVals.x  < GLASS_R)\n                materialType = REFLECTION;\n        else {\n            colorMult = vec3(0, 0.5, 0.5);\n            materialType = REFRACTION;\n            nEnter = GLASS_N;\n        }\n    }\n\n    blockT = traceBlock(0.2, 0.1, 0.05, curPos - vec3(0.25, -0.25, 0), curDir, blockNormal);\n    if (blockT < t) {\n        t = blockT;\n        normal = blockNormal;\n        if (randVals.x  < GLASS_R)\n            materialType = REFLECTION;\n        else {\n           colorMult = vec3(0, 0.5, 0.5);\n           materialType = REFRACTION;\n           nEnter = GLASS_N;\n        }\n    }\n    \n    blockT = traceBlock(0.075, 0.125, 0.15, curPos - vec3(-0.35, -0.05, 0), curDir, blockNormal);\n    if (blockT < t) {\n        t = blockT;\n        normal = blockNormal;\n        if (randVals.x  < GLASS_R)\n            materialType = REFLECTION;\n        else {\n            colorMult = vec3(0, 0.5, 0.5);\n            materialType = REFRACTION;\n            nEnter = GLASS_N;\n        }\n    }\n\n    blockT = traceBlock(0.075, 0.125, 0.15, curPos - vec3(0.35, -0.05, 0), curDir, blockNormal);\n    if (blockT < t) {\n        t = blockT;\n        normal = blockNormal;\n        if (randVals.x  < GLASS_R)\n            materialType = REFLECTION;\n        else {\n            colorMult = vec3(0, 0.5, 0.5);\n            materialType = REFRACTION;\n            nEnter = GLASS_N;\n        }\n    }\n\n    blockT = traceBlock(0.05, 0.075, 0.05, curPos - vec3(0, 0.4, 0), curDir, blockNormal);\n    if (blockT < t) {\n        t = blockT;\n        normal = blockNormal;\n        if (randVals.x  < GLASS_R)\n            materialType = REFLECTION;\n        else {\n            colorMult = vec3(0, 0.5, 0.5);\n            materialType = REFRACTION;\n            nEnter = GLASS_N;\n        }\n    }\n\n    blockT = traceBlock(0.025, 0.15, 0.025, curPos - vec3(0, 0.5, 0), curDir, blockNormal);\n    if (blockT < t) {\n        t = blockT;\n        normal = blockNormal;\n        if (randVals.x  < GLASS_R)\n            materialType = REFLECTION;\n        else {\n            colorMult = vec3(0, 0.5, 0.5);\n            materialType = REFRACTION;\n            nEnter = GLASS_N;\n        }\n    }\n        \n    blockT = traceBlock(0.04, 0.125, 0.05, curPos - vec3(-0.36, 0.1, 0), curDir, blockNormal);\n    if (blockT < t) {\n        t = blockT;\n        normal = blockNormal;\n        if (randVals.x  < GLASS_R)\n            materialType = REFLECTION;\n        else {\n            colorMult = vec3(0, 0.5, 0.5);\n            materialType = REFRACTION;\n            nEnter = GLASS_N;\n        }\n    }\n        \n    blockT = traceBlock(0.04, 0.125, 0.05, curPos - vec3(0.36, 0.1, 0), curDir, blockNormal);\n    if (blockT < t) {\n        t = blockT;\n        normal = blockNormal;\n        if (randVals.x  < GLASS_R)\n            materialType = REFLECTION;\n        else {\n            colorMult = vec3(0, 0.5, 0.5);\n            materialType = REFRACTION;\n            nEnter = GLASS_N;\n        }\n    }\n        \n    return t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec3 randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    randDir = normalize(randVals - 0.5);\n    vec2 uv = (fragCoord - iResolution.xy*0.5 + (randVals.xy - 0.5) * 2.0) / iResolution.x;\n    vec3 front = normalize(-CAMERA_POS);\n    vec3 up = vec3(0,1,0);\n    vec3 right = normalize(cross(front, up));\n    up = normalize(cross(right, front));\n    vec3 viewVec = normalize(front + right * uv.x + up * uv.y);\n    \n    vec3 curPos = CAMERA_POS;\n    vec3 curDir = viewVec;\n\n    float n1 = AIR_N;\n    float n2 = GLASS_N;\n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N + GLASS_N);\n    float DIAMOND_R = pow2(AIR_N - 2.5) / pow2(AIR_N + 2.5);\n\n    vec3 colorMult = vec3(1, 1, 1);\n    float mult = 1.0;\n    \n    for(int i = 0; i < 10; i++) {\n        float t = INF;\n        int materialType;\n        vec3 color;\n        vec3 normal;\n        float nEnter = AIR_N;\n        \n        vec3 planeNorm;\n        float planeT = tracePlane(curPos, curDir, planeNorm);\n        if (planeT < t){\n            t = planeT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel0, worldPos.xz * 0.15).rgb;\n            normal = planeNorm;\n            if (randVals.x < 0.3) {\n                materialType = REFLECTION;\n            } else {\n                materialType = DIFFUSE;\n            }\n        }\n        \n        vec3 l1Norm;\n        float light1T = traceSphere(curPos - LIGHT1_POS, curDir, LIGHT1_RADIUS, l1Norm);\n        if (light1T < t){\n            t = light1T;\n            materialType = EMISSION;\n            color = LIGHT1_COLOR;\n            normal = l1Norm;\n        }\n        \n        vec3 l2Norm;\n        float light2T = traceSphere(curPos - LIGHT2_POS, curDir, LIGHT2_RADIUS, l2Norm);\n        if (light2T < t){\n            t = light2T;\n            materialType = EMISSION;\n            color = LIGHT2_COLOR;\n            normal = l2Norm;\n        }\n        \n        vec3 sphNorm;\n        float sphT = traceSphere(curPos, curDir, 1.0, sphNorm);\n        if (sphT < t){\n            t = sphT;\n            normal = sphNorm;\n           vec3 worldPos = t * curDir + curPos;\n           if (randVals.x < GLASS_R ) {\n                materialType = REFLECTION;\n            } else if (randVals.x < GLASS_R * 18.0) {\n                vec3 worldPos = t * curDir + curPos;\n                materialType = EMISSION;\n                vec4 fog = sampleFog(worldPos, viewVec);\n                color = fog.rgb * fog.a * mult;\n                mult *= 1.0 - fog.a;\n            } else {\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = AIR_N;\n                } else {\n                    nEnter = GLASS_N;\n                }\n            }\n        }\n        \n        vec3 CylNorm;\n        float CylT = traceCylinder(curPos, curDir, CylNorm);\n        if (CylT < t) {\n            t = CylT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel2, worldPos.xz * worldPos.y).rgb;\n            normal = CylNorm;\n        }\n        \n        t = drawMCU(curPos, curDir, normal, t,nEnter, materialType,colorMult, randVals);\n        \n        if (t != INF) {\n            vec3 worldPos = t * curDir + curPos;\n            fragColor = texture(iChannel0, worldPos.xz);\n            if (materialType == EMISSION) {\n                fragColor.rgb = color * colorMult;\n                break;\n            } else if(materialType == DIFFUSE) {\n                fragColor.rgb = computeLight(worldPos, color, normal) * colorMult;\n                break;\n            } else if(materialType == REFLECTION){\n                \n                curDir = reflect(curDir, normal);\n                curPos = worldPos + curDir*1e-5;\n            } else if(materialType == REFRACTION) {\n                curDir = refraction(curDir, normal, n1, nEnter);\n                curPos = worldPos + curDir*1e-3;\n                n1 = nEnter;\n            }\n        } else {\n            fragColor.rgb = texture(iChannel1, curDir).rgb * colorMult;\n            break;\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv) + texture(iChannel1, uv);\n}","name":"Buffer B","description":"","type":"buffer"}]}