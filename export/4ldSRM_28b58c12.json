{"ver":"0.1","info":{"id":"4ldSRM","date":"1478724490","viewed":268,"name":"TorusKnot","username":"dila","description":"Pretty standard computer graphics scene https://en.wikipedia.org/wiki/Torus_knot","likes":14,"published":1,"flags":0,"usePreview":0,"tags":["raymarch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 rot(float x)\n{\n\treturn mat2(cos(x), sin(x), -sin(x), cos(x));\n}\n\nvec3 mpos = vec3(0.0);\n\nfloat map(vec3 p)\n{\n    p = p.yxz;\n    \n    float d = 1000.0;\n\n    const int n = 2;\n    for (int i = 0; i < n; ++i) {\n    \n        vec3 q = p;\n        \n        float fi = float(i) / float(n) * 3.14159 * 2.0;\n        \n        q = q.zyx;\n\n        float a = 1.0, b = 0.5, c = 8.0;\n        q.xy = vec2(atan(q.y, q.x) / 3.14159 * a, length(q.xy));\n        float tmp = q.x;\n        q.x = (fract(q.x / b) - 0.5) * b;\n        q.y -= c;\n\n        q = q.zyx;\n\n        q.x += cos(tmp * 3.14159 * 4.0 + fi) * 2.0;\n        q.y += sin(tmp * 3.14159 * 4.0 + fi) * 2.0;\n\n        float k = length(q.xy) - 1.5;\n\n        d = min(d, k);\n    }\n    \n    return d;\n}\n\nvec3 normal(vec3 p)\n{\n\tvec3 o = vec3(0.01, 0.0, 0.0);\n    return normalize(vec3(map(p+o.xyy) - map(p-o.xyy),\n                          map(p+o.yxy) - map(p-o.yxy),\n                          map(p+o.yyx) - map(p-o.yyx)));\n}\n\nfloat trace(vec3 o, vec3 r)\n{\n\tfloat t = 0.0;\n    for (int i = 0; i < 32; ++i) {\n        t += map(o + r * t) * 0.75;\n    }\n    \n    return t;\n}\n\nvec3 _texture(sampler2D channel, vec3 p)\n{\n    vec3 ta = texture(channel, p.xy).xyz;\n    vec3 tb = texture(channel, p.xz).xyz;\n    vec3 tc = texture(channel, p.yz).xyz;\n    return (ta * ta + tb * tb + tc * tc) / 3.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 o = vec3(0.0, 0.0, -18.0);\n    vec3 r = normalize(vec3(uv, 1.2));\n    \n    float el = -0.7 + sin(iTime) * 0.25;\n    o.yz *= rot(el);\n    r.yz *= rot(el);\n    \n    o.xz *= rot(iTime);\n    r.xz *= rot(iTime);\n\n    float t = trace(o, r);\n    vec3 w = o + r * t;\n    vec3 sn = normal(w);\n    float fd = map(w);\n    \n    vec3 lsrc = vec3(0.0, 16.0, 0.0);\n    vec3 ldel = w - lsrc;\n    float ldist = length(ldel);\n    ldel /= ldist;\n    float lt = trace(lsrc + sn * 0.1, ldel);\n    float lm = max(dot(ldel, -sn), 0.0);\n    lm /= 1.0 + ldist * ldist * 0.001;\n    if (lt < ldist) {\n        lm *= 0.0;\n    }\n    \n    vec3 lit = vec3(lm);\n    lit += (0.5+0.5*sn.y) * vec3(1.0, 0.5, 0.25) * 0.5;\n    \n    float fres = abs(dot(r, -sn));\n    fres = 1.0 - pow(fres, 4.0);\n    \n    float fog = 1.0 / (1.0 + t * t * 0.01);\n    float ao = map(w + sn * 1.2); /* thanks aiekick */\n\n    vec3 ref = reflect(r, sn);\n\n    vec3 fc = vec3(0.0);\n    if (t < 30.0) {\n    \tvec3 tex = _texture(iChannel0, w * 0.1);\n    \tvec3 cub = texture(iChannel1, ref).xyz;\n        fc = (tex + cub * fres) * lit * ao;\n    } else {\n        fc = texture(iChannel1, -r).xyz;\n    }\n    \n\tfragColor = vec4(sqrt(fc), 1.0);\n}","name":"Image","description":"","type":"image"}]}