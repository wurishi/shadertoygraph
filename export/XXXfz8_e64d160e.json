{"ver":"0.1","info":{"id":"XXXfz8","date":"1727982489","viewed":37,"name":"Assignment 3s","username":"CByrne","description":"Create a cool animated procedural texture in a fragment shader using UV coordinates and math!","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["assignment"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// I wanted to originally make a vortex inspired by balatro's background but ended up getting lost lol\n\nconst float FREQ = 5.0;\nconst float SPEED = 3.0;\nconst float AMP = 0.1;\nconst vec3 RED_COLOR = vec3(0.9, 0.0, 0.2);\nconst vec3 BLUE_COLOR = vec3(0.1, 0.2, 0.7);\n\n//generic rotation formula taken from https://www.shadertoy.com/view/Mss3Wf\nvec2 rot(vec2 uv,float a){\n\treturn vec2(uv.x*cos(a)-uv.y*sin(a),uv.y*cos(a)+uv.x*sin(a));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = uv * 2.0 - 1.0; // -1 to 1\n    uv.x *= iResolution.x/iResolution.y; //account for aspect ratio\n    \n    uv=rot(uv,iTime);  // rotates the uv\n\n    vec2 center = vec2(0.0, 0.2); // makes a \"center\" for the circle to spin\n      \n    float y = abs(sin(uv.x * (FREQ + 1.0) + iTime * SPEED) * (AMP * 2.0) + 0.0 + sin(uv.x*(FREQ + 10.0))*(AMP * 1.0));\n    // the waves on the circle\n    \n    \n    float d = smoothstep(y,y+0.1,uv.y); //adds the waves from Y and puts it on the circle\n        \n    \n    d += distance(uv,center); // makes the circle a circle\n\n    d = smoothstep(0.5, 0.9, d); // smoothes out the endes\n  \n\n    // Output to screen\n    fragColor = vec4(d,d,d,1.0);\n    fragColor = vec4(mix(BLUE_COLOR, RED_COLOR, d),1.0);\n    \n    \n}","name":"Image","description":"","type":"image"}]}