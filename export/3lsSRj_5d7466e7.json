{"ver":"0.1","info":{"id":"3lsSRj","date":"1563548493","viewed":265,"name":"Cube Labyrinth v3","username":"96logda","description":"An another version of my Cube Labyrinth shader.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["cubes","mengersponge","labyrinth","proceduralgenerated"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Copyright (c) 2019-07-13 - 2019-07-19 by Angelo Logahd\n//Portfolio: https://angelologahd.wixsite.com/portfolio\n//Based on https://iquilezles.org/articles/menger\n\n//My other versions\n//Version 1: https://www.shadertoy.com/view/3tXXzB\n//Version 2: https://www.shadertoy.com/view/wlfXzB\n\n#define true\t\t\t\t1\n#define false\t\t\t\t0\n\n#define PI 3.14\n\n#define saturate(x) \t\tclamp(x, 0.0, 1.0)\n\n#define MENGER_ITERATIONS\t2\n#define SOFT_SHADOW_STEPS \t32\n\n#define INTERSECT_STEPS\t\t150\n#define INTERSECT_MIN_DIST\t0.0002\n#define INTERSECT_MAX_DIST\t50.0\n\n#define MOVING_BRICKS\t\tfalse\n\n\nvec2 rotate2D(vec2 p, float angle)\n{\n    float sRot = sin(angle);\n    float cRot = cos(angle);\n    return p * cRot + p.yx * sRot * vec2(-1.0, 1.0);\n}\n\nfloat sdUnitBox(vec3 p)\n{\n    vec3 d = abs(p) - vec3(1.0);\n    return min(max(d.x, max(d.y, d.z)), 0.0) + length(max(d, 0.0));\n}\n\nvec4 map(in vec3 p)\n{\n    p.xz = mod(p.xz + 5.0, 2.0) - 1.0;\n    p.y  = mod(p.y + 1.0, 2.0) - 1.0;\n    \n    float d = sdUnitBox(p);\n    vec4 res = vec4(d, 1.0, 0.0, 0.0);\n\t\n    float s = 1.5;\n    for(int i = 0; i < MENGER_ITERATIONS; ++i)\n    {\t \n        #if MOVING_BRICKS\n\t\tp.x += iTime * 0.05;\n\t    #endif\n        \n        vec3 a = mod(p * s, 2.0) - 1.0;\n        s *= 11.0;\n        vec3 r = abs(1.0 - 6.0 * abs(a));\n        float da = max(r.x, r.y);\n        float db = max(r.y, r.z);\n        float dc = max(r.z, r.x);\n        float c = (min(da, min(db, dc)) - 1.0) / s;\n\n        if(c > d)\n        {\n            d = c;\n            res = vec4(d, min(res.y, 0.2 * da * db * dc), 0.0, 1.0);\n        }\n    }\n    \n    return res;\n}\n\nvec4 intersect(in vec3 ro, in vec3 rd)\n{\n    float t = 0.0;\n    vec4 res = vec4(-1.0);\n    vec4 h = vec4(1.0);\n    for (int i = 0; i < INTERSECT_STEPS; ++i)\n    {\n\t\tif(h.x < INTERSECT_MIN_DIST || t > INTERSECT_MAX_DIST) \n\t\t{\n\t    \tbreak;\n\t\t}\n\t\n        h = map(ro + rd * t);\n        res = vec4(t, h.yzw);\n        t += h.x;\n    }\n\n    if (t > INTERSECT_MAX_DIST) \n    {\n\t\tres = vec4(-1.0);\n    }\n    \n    return res;\n}\n\nfloat softshadow(in vec3 ro, in vec3 rd)\n{\n    float res = 1.0;\n    float t = 0.0;\n    for (int i = 0; i < SOFT_SHADOW_STEPS; ++i)\n    {\n\t\tvec3 pos = ro + rd * t;\n        float h = map(pos).x;\n        res = min(res, float(SOFT_SHADOW_STEPS) * h / t);\n        if(res < 0.101)\n\t\t{\n            break;\n\t\t}\n        t += clamp(h, 0.01, 0.2);\n    }\n    return saturate(res);\n}\n\nvec3 calcNormal(in vec3 pos)\n{\n    vec3 eps = vec3(0.001, 0.0, 0.0);\n    vec3 n;\n    n.x = map(pos + eps.xyy).x - map(pos - eps.xyy).x;\n    n.y = map(pos + eps.yxy).x - map(pos - eps.yxy).x;\n    n.z = map(pos + eps.yyx).x - map(pos - eps.yyx).x;\n    return normalize(n);\n}\n\nvec3 render(in vec3 ro, in vec3 rd, float intensity)\n{\n    vec3 color = vec3(0.5);\n    vec4 res = intersect(ro,rd);\n    if(res.x > 0.0)\n    {\n        const vec3 light1 = vec3(0.5, 0.5, -0.5);\n\t\t\n\t\tvec3 pos = ro + res.x * rd;\n\t\n        vec3 baseColor = vec3(0.0, 0.4, 0.6); //vec3(saturate(sin(iTime * 0.5)), saturate(cos(iTime * 0.3)), saturate(sin(iTime * 0.4)));\n\t\tvec3 ambient = vec3(0.2) * baseColor;\n\t\t\n\t\tvec3 normal = calcNormal(pos);\n\t\tvec3 reflection = reflect(rd, normal);\n\t\n\t\tfloat occ = res.y;\n\t\tfloat shadow1 = softshadow(pos + 0.001 * normal, light1);\n\t\n\t\tvec3 diffuse = baseColor * shadow1 * occ;\n\t\t\n\t\tcolor = diffuse + ambient;\t\t\n\t\tcolor += 0.8 * smoothstep(0.0, 0.1, reflection.y) * softshadow(pos + 0.01 * normal, reflection);\n    }\n\n    return pow(color * intensity, vec3(0.4545));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) \n{\n    vec2 p = 2.0 * (fragCoord.xy / iResolution.xy) - 1.0;\n    p.x *= iResolution.x / iResolution.y;\n\t\n    // camera\n    vec3 ro = vec3(8.75, 0.9, -0.0);\n    #if !MOVING_BRICKS\n    ro.x -= 0.1 * iTime;\n    #endif\n    vec3 ww = normalize(vec3(0.0) - ro);\n    ww.xz = rotate2D(ww.xz, iMouse.x * 2.0 * PI);\n    vec3 uu = normalize(cross(vec3(0.0, 1.0, 0.0), ww));\n    vec3 vv = normalize(cross(ww, uu));\n    vec3 rd = normalize(p.x * uu + p.y * vv + 2.0 * ww);\n\n    vec3 color = render(ro + vec3(0.0, -1.0, 0.0), rd, 1.0);\n    \n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}