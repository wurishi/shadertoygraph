{"ver":"0.1","info":{"id":"WlK3Wd","date":"1580198347","viewed":84,"name":"interference 2 buffers combined","username":"alarch","description":"Combining two different buffers for interference effect.","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["interference","buffer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{ \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Output to screen\n    fragColor = texture(iChannel0,uv,1.0);\n    fragColor += texture(iChannel1,uv,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \n    vec2 pos1 = vec2(0.0+sin(iTime)/4.0,0.0);\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    uv -= 0.5; // set center/origo to vec2(0.0,0.0);\n    \n    uv.x *= iResolution.x/iResolution.y; // Aspect ratio\n    \n    if(mod(distance(uv, pos1),0.05) > 0.025)\n    {\n        vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n        fragColor = vec4(col, 1.0);\n    }\n    else\n        fragColor = vec4(0.0);\n    \n \n    \n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 pos2 = vec2(0.2*cos(iTime),-0.2*sin(iTime));\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    uv -= 0.5; // set center/origo to vec2(0.0,0.0);\n    \n    uv.x *= iResolution.x/iResolution.y; // Aspect ratio\n    \n    // Draw the second thing of top of first.\n    if(mod(distance(uv, pos2),0.05) > 0.025)\n    {\n        vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n        fragColor = vec4(col, 1.0);\n    }\n    else\n        fragColor = vec4(0.0);\n}","name":"Buffer B","description":"","type":"buffer"}]}