{"ver":"0.1","info":{"id":"wl2BWV","date":"1599926042","viewed":351,"name":"maya pyramid + forest","username":"FabriceNeyret2","description":"reference: \n[img]https://static.boredpanda.com/blog/wp-content/uploads/2020/09/real-life-old-photos-then-now-15-5f5b5a1616b90__700.jpg[/img]\n\nNote that my anti-banding tricks doesn't work here, due to the heap of discontinuities.","likes":17,"published":3,"flags":16,"usePreview":0,"tags":["raytracing","raymarching","temple","pyramid","maya","inca"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// forest-variant of https://shadertoy.com/view/tlSfDK\n\n#define rot(a)      mat2( cos( a + vec4(0,33,11,0)) )\n#define sfloor(x) ( floor(x-pix/2.) + max( 0., 1.-fract(-x+pix/2.) / pix ) ) // https://www.shadertoy.com/view/tsyXzV \n#define hash2x3(p)  fract(sin((p)*mat3x2(127.1,311.7,  269.5,183.3,  113.5,271.9))*43758.5453123) // https://www.shadertoy.com/view/llySRh\n\nfloat pix, s;                                         // a: material id\n\nfloat map( vec3 p ) {\n    float t,a; vec3 q = p;\n    q.xy = abs(q.xy), a = max(q.x,q.y),               // --- pyramid\n    t = max( (a==q.x?q.y:q.x) -2. ,                   // slopes sides\n             a/1.3 + clamp(q.z,0.,9.) -9.25 ),        // slopes top \n    t = max( t, q.z-7.),                              // top end\n    t = min( t, a + clamp(sfloor(q.z),0.,7.) - 9.),   // grades \n    t = max( t,-max(min(q.x,q.y)-.5,abs(q.z-7.5)-.5)),// doors\n    t = max( t, q.z-9.);                              // top end\n    s = q.z;                                          // --- forest. floor, then trees\n    q = .03*sin(15.*p); p += q.x+q.y+q.z;             // distortion\n    for (int k=0; k<9; k++) {                         // Worley-like dot structure\n        vec2 d = vec2(k%3-1,k/3-1);                   // seek for closest dot in 9x9 cells around\n        s = min(s, length( hash2x3(floor(p.xy)+d)           // random dot(cell)\n                          - vec3(fract(p.xy)-d,p.z) ) -.5); // raypos rel to cur cell\n    }\n    return min(t,s);\n}\n\nvoid mainImage(out vec4 O, vec2 u) {\n     vec2  R = iResolution.xy,\n         U = ( 2.*u - R ) / R.y;                      // normalized centered coords\n    pix = .5; // 100./R.y;\n    float t = iTime, _t = 1.+.5*sin(.2*(t+5.)), \n          c = 0.;                                     // color (pseudo-shading), delta per iteration\n    vec3  D = normalize( vec3(U,-2) ),                // ray direction. z = field of view = zoom\n          p = vec3(0,0,25), q;                        // ray origin, then current point on ray\n    D.yz *= rot(_t); D.xy *= rot(.3*t);               // rotate camera\n    p.yz *= rot(_t); p.xy *= rot(.3*t);\n\n    for ( ; c < 50. && t > .01 ; c++ )                // march scene\n        q = p, _t=t,\n        t = map(q),                                   // distance to objects\n        p += .5*t*D;                                  // sphere-tracing step\n    \n    c = 1. - c/50.;                                   // pseudo-lighting\n    O = t==s ? vec4(0,.2,0,1)*(.7+.3*p.z)             // coloring. forest\n             : vec4(1,.8,.6,1);                       //           temple\n    O = pow( c*O, vec4(1./2.2) );                     // to sRGB\n}\n","name":"Image","description":"","type":"image"}]}