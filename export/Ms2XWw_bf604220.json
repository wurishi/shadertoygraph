{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    fragColor = vec4(0.0,0.0,0.0,0.0);\n    int bitz[8];\n    bitz[0] = 1; bitz[1] = 2; bitz[2] = 4; bitz[3] = 8; bitz[4] = 16; bitz[5] = 32; bitz[6] = 64; bitz[7] = 128;\n    \n    int message[105];\n    message[0] = 0; //hacky\n    message[1] = 248; message[2] = 30; message[3] = 19; message[4] = 19; message[5] = 30; message[6] = 248; \n    message[7] = 0; message[8] = 60; message[9] = 102; message[10] = 195; message[11] = 129; message[12] = 195;\n    message[13] = 66; message[14] = 0; message[15] = 129; message[16] = 153; message[17] = 153; message[18] = 153;\n    message[19] = 219; message[20] = 126; message[21] = 0; message[22] = 1; message[23] = 1; message[24] = 255;\n    message[25] = 255; message[26] = 1; message[27] = 1; message[28] = 0; message[29] = 132; message[30] = 134;\n    message[31] = 131; message[32] = 255; message[33] = 255; message[34] = 128; message[35] = 0; message[36] = 255;\n    message[37] = 7; message[38] = 30; message[39] = 120; message[40] = 224; message[41] = 255;\n    message[42] = 0; message[43] = 255; message[44] = 153; message[45] = 153; message[46] = 153; message[47] = 153;\n    message[48] = 129; message[49] = 0; message[50] = 0; message[51] = 0; message[52] = 0; message[53] = 0; \n    message[54] = 0;message[55] = 0; message[56] = 0; message[57] = 63; message[58] = 224; message[59] = 124; \n    message[60] = 124; message[61] = 224; message[62] = 63; message[63] = 0; message[64] = 248; message[65] = 30; \n    message[66] = 19; message[67] = 19; message[68] = 30; message[69] = 248; message[70] = 0; message[71] = 132; \n    message[72] = 142; message[73] = 155; message[74] = 217; message[75] = 113; message[76] = 113; message[77] = 0; \n    message[78] = 0; message[79] = 0;  message[80] = 0; message[81] = 0; message[82] = 0; message[83] = 0; \n    message[84] = 0; message[85] = 255; message[86] = 153; message[87] = 153; message[88] = 153; message[89] = 153;\n    message[90] = 129; message[91] = 0; message[92] = 255; message[93] = 17; message[94] = 17; message[95] = 59;\n    message[96] = 110; message[97] = 196; message[98] = 0;message[99] = 255; message[100] = 153; message[101] = 153; \n    message[102] = 153; message[103] = 153; message[104] = 129;\n\t\n    \n    const float speed = 130.0;\n    const int msgLen = 105;\n   \t\n    const float squares = 8.0;\n    const float height = 70.0;\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n\tvec4 rainbow = vec4(uv,0.5+0.5*sin(iTime),1.0);\n    vec4 rainbow2 = vec4(0.5+0.5*sin(iTime),uv,1.0);\n\t\n    float offset = (iResolution.y/2.0) + (sin((iTime*2.0)+fragCoord.x/180.0)*height);\n    float a = (sin((iTime)+fragCoord.x/360.0) * height)+offset;\n    float b = (sin((iTime+1.57)+fragCoord.x/360.0) * height)+offset;\n    float c = (sin((iTime+3.14)+fragCoord.x/360.0) * height)+offset;\n    float d = (sin((iTime+4.71)+fragCoord.x/360.0) * height)+offset;\n    float squareHeight;\n    float squareWidth = (height*1.5) / squares;\n    int xP;\n    int yP;\n    int temp;\n    float space = (squareWidth * 7.0);\n\tfloat scrollPos = mod(iTime*speed,(space + iResolution.x + (float(msgLen)*squareWidth)));\n    \n    \n \n     if ((fragCoord.y > a) &&   (fragCoord.y < b))\n     {\n          \n         squareHeight = (b-a)/squares;\n         yP = int((fragCoord.y - a) / squareHeight);\n         xP = int((fragCoord.x - iResolution.x + (scrollPos)) / squareWidth);\n         for (int arr = 0; arr < msgLen; arr++)\n         {\n             if (arr == xP)\n             {\n              \ttemp = message[arr];\n                 break;\n             }\n         }\n         for (int inc = 0; inc < 8; inc++)\n         {\n         \tif (inc != yP)\n            {\n                if (temp >= bitz[7-inc])\n                {\n                temp -= bitz[7-inc];\n                }\n            }\n            else if (temp >= bitz[7-inc])\n            {\n              fragColor = rainbow2;\n               break;\n            }\n            \n         }\n         \n        \n     }\n    \n   \n     if ((fragCoord.y > b) &&   (fragCoord.y < c))\n     {\n         \n      squareHeight = (c-b)/squares;\n         yP = int((fragCoord.y - b) / squareHeight);\n         xP = int((fragCoord.x - iResolution.x + (scrollPos)) / squareWidth);\n         for (int arr = 0; arr < msgLen; arr++)\n         {\n             if (arr == xP)\n             {\n              \ttemp = message[arr];\n                 break;\n             }\n         }\n         for (int inc = 0; inc < 8; inc++)\n         {\n         \tif (inc != yP)\n            {\n                if (temp >= bitz[7-inc])\n                {\n                temp -= bitz[7-inc];\n                }\n            }\n            else if (temp >= bitz[7-inc])\n            {\n              fragColor = rainbow;\n               break;\n            }\n            \n         }\n         \n     }\n    \n    \n     if ((fragCoord.y > c) &&   (fragCoord.y < d))\n     {\n         \n      squareHeight = (d-c)/squares;\n         yP = int((fragCoord.y - c) / squareHeight);\n         xP = int((fragCoord.x - iResolution.x +(scrollPos)) / squareWidth);\n         for (int arr = 0; arr < msgLen; arr++)\n         {\n             if (arr == xP)\n             {\n              \ttemp = message[arr];\n                 break;\n             }\n         }\n         for (int inc = 0; inc < 8; inc++)\n         {\n         \tif (inc != yP)\n            {\n                if (temp >= bitz[7-inc])\n                {\n                temp -= bitz[7-inc];\n                }\n            }\n            else if (temp >= bitz[7-inc])\n            {\n              fragColor = rainbow2;\n               break;\n            }\n            \n         }\n         \n     }\n    \n    \n     if ((fragCoord.y > d) &&   (fragCoord.y < a))\n     {\n         \n     squareHeight = (a-d)/squares;\n         yP = int((fragCoord.y - d) / squareHeight);\n         xP = int((fragCoord.x - iResolution.x + (scrollPos)) / squareWidth);\n         for (int arr = 0; arr < msgLen; arr++)\n         {\n             if (arr == xP)\n             {\n              \ttemp = message[arr];\n                 break;\n             }\n         }\n         for (int inc = 0; inc < 8; inc++)\n         {\n         \tif (inc != yP)\n            {\n                if (temp >= bitz[7-inc])\n                {\n                temp -= bitz[7-inc];\n                }\n            }\n            else if (temp >= bitz[7-inc])\n            {\n              fragColor = rainbow;\n               break;\n            }\n            \n         }\n     }\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"Ms2XWw","date":"1412966488","viewed":1131,"name":"Twist Scroller","username":"ac3t1ne","description":"Greetz!","likes":15,"published":1,"flags":0,"usePreview":0,"tags":["2d","retro","amiga","ac3t1ne","scroller"],"hasliked":0,"parentid":"","parentname":""}}