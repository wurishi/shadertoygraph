{"ver":"0.1","info":{"id":"tdsBRn","date":"1588951687","viewed":157,"name":"cis561_hw09_HeterogeneousMedia","username":"sireesha98","description":"heterogeneous participating medium","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["hw"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Heavily Inspired by: https://www.shadertoy.com/view/XslGRr\n\nvec3 sundir = normalize( vec3(0.0,1.0,-5.0) );\n\nstruct Ray {\n    vec3 origin;\n     vec3 dir;\n};\n\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\tf = f*f*(3.0-2.0*f);\n\n\tvec2 uv = (p.xy+vec2(37.0,239.0)*p.z) + f.xy;\n    vec2 rg = textureLod(iChannel0,(uv+0.5)/256.0,0.0).yx;   \n\treturn -1.0+2.0*mix( rg.x, rg.y, f.z );\n}\n\nfloat map4( in vec3 p )\n{\n\tvec3 q = p - vec3(0.0,0.1,1.0)* 0.3 *iTime;\n\tfloat f;\n    f  = 0.50000*noise( q ); q = q*2.02;\n    f += 0.25000*noise( q ); q = q*2.03;\n    f += 0.12500*noise( q ); q = q*2.01;\n    f += 0.06250*noise( q );\n\treturn clamp( 1.5 - p.y - 2.0 + 1.75*f, 0.0, 1.0 );\n}\nfloat map3( in vec3 p )\n{\n\tvec3 q = p - vec3(0.0,0.1,1.0) * 0.3 *iTime;\n\tfloat f;\n    f  = 0.50000*noise( q ); q = q*2.02;\n    f += 0.25000*noise( q ); q = q*2.03;\n    f += 0.12500*noise( q );\n\treturn clamp( 1.5 - p.y - 2.0 + 1.75*f, 0.0, 1.0 );\n}\nfloat map2( in vec3 p )\n{\n\tvec3 q = p - vec3(0.0,0.1,1.0)* 0.3 *iTime;\n\tfloat f;\n    f  = 0.5*noise( q ); q = q*2.02;\n    f += 0.25*noise( q );;\n\treturn clamp( 1.5 - p.y - 2.0 + 1.75*f, 0.0, 1.0 );\n}\n\n\nvec4 integrate( in vec4 sum, in float dif, in float den, in vec3 bgcol, in float t )\n{\n    //Adding Light \n    vec3 lin = vec3(0.65,0.7,0.75)*1.4 + vec3(1.0, 0.6, 0.3)*dif;        \n    vec4 col = vec4( mix( vec3(1.0,0.35,0.4), vec3(0.65,0.3,0.35), den ), den );\n    col.xyz *= lin;\n    col.xyz = mix( col.xyz, bgcol, 1.0-exp(-0.003*t*t) );\n    col.w *= 0.4;\n    return  col * (1.0-sum.a);\n}\n\n\n#define MARCH(STEPS,MAPLOD)\\\nfor(int i=0; i<STEPS; i++)\\\n{\\\n   vec3 pos = ro + t*rd;\\\n   if( pos.y<-3.0 || pos.y>2.0 || sum.a>0.99 ) break;\\\n   float den = MAPLOD( pos );\\\n   if( den>0.01 )\\\n   {\\\n     float dif = clamp((den - MAPLOD(pos+0.3*sundir))/0.6, 0.0, 1.0 );\\\n     vec3  lin = vec3(0.65,0.7,0.75)*1.4 + vec3(1.0,0.6,0.3)*dif;\\\n     vec4  col = vec4( mix( vec3(1.0,0.95,0.8), vec3(0.25,0.3,0.35), den ), den );\\\n     col.xyz *= lin;\\\n     col.xyz = mix( col.xyz, bgcol, 1.0-exp(-0.003*t*t) );\\\n     col.w *= 0.4;\\\n     \\\n     col.rgb *= col.a;\\\n    sum += col*(1.0-sum.a);\\\n   }\\\n   t += max(0.05,0.02*t);\\\n}\n\nvec4 raymarch( in vec3 ro, in vec3 rd, in vec3 bgcol, in ivec2 px )\n{\n\tvec4 sum = vec4(0.0);\n\n\tfloat t = 0.0;//0.05*texelFetch( iChannel0, px&255, 0 ).x;\n\n    MARCH(30,map4);\n    MARCH(30,map3);\n    MARCH(30,map2);\n\n    return clamp( sum, 0.0, 1.0 );\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvec4 render( in vec3 ro, in vec3 rd, in ivec2 px )\n{\n    //Background Color   \n\tfloat sun = clamp( dot(sundir,rd), 0.0, 3.0 );\n\tvec3 col = vec3(0.6,0.47,0.55) - rd.y*0.2*vec3(0.7,0.5,1.0) + 0.15 *0.75;\n\tcol += 0.2*vec3(1.0,.6,0.1)*pow( sun, 5.0 );\n\n    //Clouds    \n    vec4 res = raymarch( ro, rd, col, px );\n    col = col * (1.0-res.w) + res.xyz;\n    \n    //Sun glare    \n\tcol += vec3(1.0,0.4,0.2)*pow( sun, 6.0 );\n    return vec4( col, 1.0 );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (2.0 * fragCoord-iResolution.xy)/iResolution.y;\n    vec2 m =  vec2(0., 0.);\n    // camera\n    Ray ray;\n    ray.origin = normalize(vec3(1.0, 1.0, 1.0));\n\tvec3 ta = vec3(0.0, 0.5, 0.0);\n    mat3 ca = setCamera( ray.origin, ta, 0.0 );\n    // ray\n    ray.dir = ca * normalize( vec3(p.xy,1.5));   \n    fragColor = render( ray.origin, ray.dir, ivec2(fragCoord-0.5) );\n}\n","name":"Image","description":"","type":"image"}]}