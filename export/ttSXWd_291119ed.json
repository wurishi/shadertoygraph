{"ver":"0.1","info":{"id":"ttSXWd","date":"1567499406","viewed":224,"name":"Vortex Field","username":"magician0809","description":"Vortex Field","likes":6,"published":1,"flags":32,"usePreview":0,"tags":["field","vortex"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n//Buffer A: field\n//Buffer B: particle\n//Buffer C: trail\n\nfloat Power(vec2 field, float dens)\n{\n    float p = length(field);\n    p = fract(p * dens);\n    p = smoothstep(0.0, 0.05, p) * smoothstep(0.1, 0.05, p);\n    return p;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float aspect = iResolution.x / iResolution.y;\n    \n    uv.x *= aspect;\n    vec2 field = VortexField(uv, iTime).xy * 0.4;\n    field *= 1.0 - Power(field, 10.);\n    fragColor = vec4(field, 0., 1.0);\n    uv.x /= aspect;\n    fragColor += texture(iChannel0, uv).x;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float aspect = iResolution.x / iResolution.y;\n    \n    vec2 p;\n    if (iFrame <= 10)\n    {\n        p = uv;\n        fragColor.zw = p;\n    }\n    else\n    {\n        //const float dt = 8.33333e-4;\n        const float dt = 1.0 / 60.0;\n        \n        p = texture(iChannel0, uv).xy;\n        fragColor.zw = p;\n        \n        p.x *= aspect;\n        vec2 field = VortexField(p, iTime) * .2;\n        p += field * dt;\n        p.x /= aspect;\n    }\n    \n    fragColor.xy = p;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"\n#define COL 36\n#define ROW 20\n#define DW (1.0 / float(COL))\n#define DH (1.0 / float(ROW))\n\nfloat lnsegDist2(vec2 uv, vec2 p, vec2 d)\n{\n    vec2 q = uv - p;\n    float lp = dot(q, d) / dot(d, d);\n    lp = clamp(lp, 0.0, 1.0);\n    q -= lp * d;\n    return dot(q, q);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float aspect = iResolution.x / iResolution.y;\n    float px = 1.0/iResolution.y;\n    float lineWidth = px * 2.0;\n    \n    float pcol = 0.0;\n    \n    for (int ix = 0; ix < COL; ix++)\n    {\n        for (int iy = 0; iy < ROW; iy++)\n        {\n            vec2 puv;\n            puv.x = DW * (float(ix) + 0.5);\n            puv.y = DH * (float(iy) + 0.5);\n            \n            vec4 pp = texture(iChannel0, puv);\n            float dist2 = lnsegDist2(uv , pp.xy, pp.zw-pp.xy);\n            pcol += smoothstep(lineWidth, 0., sqrt(dist2));\n        }\n    }\n    \n    float lastPcol = texture(iChannel1, uv).x * 0.98;\n    pcol = max(pcol, lastPcol);\n    \n    pcol = clamp(pcol, 0.0, 1.0);\n    fragColor.x = pcol;\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"\n//https://www.shadertoy.com/view/ldc3RB\nvec2 hash22(vec2 p)\n{\n    p = vec2( dot(p,vec2(127.1,311.7)),\n\t\t\t  dot(p,vec2(269.5,183.3)));\n    \n    return -1.0 + 2.0 * fract(sin(p)*43758.5453123);\n}\nfloat simplex_noise(vec2 p)\n{\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n    \n    vec2 i = floor(p + (p.x + p.y) * K1);\n    \n    vec2 a = p - (i - (i.x + i.y) * K2);\n    vec2 o = (a.x < a.y) ? vec2(0.0, 1.0) : vec2(1.0, 0.0);\n    vec2 b = a - (o - K2);\n    vec2 c = a - (1.0 - 2.0 * K2);\n    \n    vec3 h = max(0.5 - vec3(dot(a, a), dot(b, b), dot(c, c)), 0.0);\n    vec3 n = h * h * h * h * vec3(dot(a, hash22(i)), dot(b, hash22(i + o)), dot(c, hash22(i + 1.0)));\n    \n    return dot(vec3(70.0, 70.0, 70.0), n);\n}\n\n\n\nvec2 Field2D(vec2 uv, vec2 pos, float intensity)\n{\n    const vec3 up = vec3(0.0, 0.0, 1.0);\n    vec2 dp = uv - pos;\n    float a = intensity / (dot(dp, dp) + 1.0);\n    \n    vec2 v = cross(vec3(dp, 0.0), up).xy;\n    v = normalize(v) * a;\n    return v;\n}\n\n\nvec2 VortexField(vec2 uv, float time)\n{\n    time *= 0.3;\n    \n    vec2 field = vec2(0.0);\n    \n    field += Field2D(uv, vec2(0.3, 0.3), cos(time));\n    //field += Field2D(uv, vec2(0.7, 0.3), cos(time+0.78));\n    field += Field2D(uv, vec2(1.1, 0.3), cos(time+1.57));\n    //field += Field2D(uv, vec2(1.5, 0.3), cos(time+2.35));\n    \n    //field += Field2D(uv, vec2(0.3, 0.7), cos(time+3.14));\n    field += Field2D(uv, vec2(0.7, 0.7), cos(time+3.92));\n    //field += Field2D(uv, vec2(1.1, 0.7), cos(time+4.71));\n    field += Field2D(uv, vec2(1.5, 0.7), cos(time+5.49));\n    \n    field *= simplex_noise(uv * 2. + time * 0.1) * 1. + 1.0;\n    \n    return field;\n}\n","name":"Common","description":"","type":"common"}]}