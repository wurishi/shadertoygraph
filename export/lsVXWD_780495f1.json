{"ver":"0.1","info":{"id":"lsVXWD","date":"1464700210","viewed":1854,"name":"Water's Edge","username":"vochsel","description":"Based on this months calender artwork in the office... Not heavily optimized yet...","likes":41,"published":1,"flags":0,"usePreview":0,"tags":["raymarch","cube","water","ocean"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dX3zn","filepath":"/media/a/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png","previewfilepath":"/media/ap/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define EPS 0.001\n#define MAX_ITR 100\n#define MAX_DIS 100.0\n\n#define WATER_SPEED 1.\n#define WATER_SCALE 1.\n#define ROTATE_SPEED 1.0\n\n#define rgb(r, g, b) vec3(float(r)/255., float(g)/255., float(b)/255.)\n\n//Distance Functions\nfloat sd_sph(vec3 p, float r) { return length(p) - r; }\nfloat sd_box( vec3 p, vec3 b ) { vec3 d = abs(p) - b; return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0)); }\n\nfloat sdPlane( vec3 p, vec4 n )\n{\n  // n must be normalized\n  return dot(p,n.xyz) + n.w;\n}\n\n//Distance Map\nfloat map(vec3 p, vec2 sc)\n{\n    float t = iTime*0.1*ROTATE_SPEED;\n    float sic = sin(t);\n    float coc = cos(t);\n    \n    mat2 m = mat2(sic, coc, -coc, sic);\n    p.xz *= m;\n        \n    float l = cos(length(p*2.0));\n    vec2 u = vec2(l, sc.y);\n    vec2 um = u*0.3;\n    um.x += iTime*0.1*WATER_SPEED;\n    um.y += -iTime*0.025*WATER_SPEED;\n    um.x += (um.y)*2.0;    \n    float a1 = texture(iChannel0, (p.yz * .4 + um)*WATER_SCALE).x;\n    float a2 = texture(iChannel0, (p.zx * .4 + um)*WATER_SCALE).x;\n    float a3 = texture(iChannel0, (p.xy * .4 + um)*WATER_SCALE).x;\n    \n    float t1 = a1 + a2 + a3;\n    t1 /= 15.0*WATER_SCALE;\n    \n    float b1 = texture(iChannel0, (p.yz * 1. + u)*WATER_SCALE).x;\n    float b2 = texture(iChannel0, (p.zx * 1. + u)*WATER_SCALE).x;\n    float b3 = texture(iChannel0, (p.xy * 1. + u)*WATER_SCALE).x;\n    \n    float t2 = b1 + b2 + b3;\n    t2 /= 15.0*WATER_SCALE;\n    \n    float comb = t1*0.4 + t2*0.1*(1.0-t1);\n    \n    return sd_box(p, vec3(1., 1., 1.)) + comb;\n}\n\n//Lighting Utils\nfloat fresnel(float bias, float scale, float power, vec3 I, vec3 N)\n{\n    return bias + scale * pow(1.0 + dot(I, N), power);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float t = iTime*0.1;\n    vec3 col = vec3(1.-length(uv-vec2(0.5))*.5);\n    \n    //Marching Setup\n    vec2 d = 1.-2.*uv;\n    d.x *= iResolution.x / iResolution.y;\n \t   \n    float tdist = 0.;\n    float dist  = EPS;\n    \n    vec3 campos = vec3(-4., -3.5, -4.);\n    //campos = vec3(sin(t) * 2.0, -1.0, cos(t) * 2.0)*4.;\n    vec3 pos = campos;\n    \n    vec3 camDir = normalize(-campos);\n    vec3 camRig = normalize(cross(vec3(0, 1, 0), campos));\n    vec3 camUp = cross(camDir, camRig);\n    \n    vec2 screenPos = -.25 + .5 * uv;\n    screenPos.x *= iResolution.x / iResolution.y;\n    \n    vec3 raydir = normalize(camRig * screenPos.x + camUp * screenPos.y + camDir);\n    raydir.y += 0.02;\n    \n    //Raymarching\n    for(int i = 0; i < MAX_ITR; i++)\n    {\n        if(dist < EPS || dist > MAX_DIS)\n\t\t\tbreak;\n        dist = map(pos, uv);\n        tdist += dist;\n        pos += dist * raydir;\n    }\n    //Shading\n    if(dist < EPS)\n    {\n     \tvec3  lig = normalize(vec3(-1., -2, -2.5))*0.8;\n    \tvec2 eps = vec2(0.0, EPS);\n        vec3 normal = normalize(vec3(\n            map(pos + eps.yxx, uv) - map(pos - eps.yxx, uv),\n            map(pos + eps.xyx, uv) - map(pos - eps.xyx, uv),\n            map(pos + eps.xxy, uv) - map(pos - eps.xxy, uv)\n       \t));\n        float diffuse = max(0.0, dot(lig, normal)) / 1.0;\n        float specular = pow(diffuse, 256.);   \n\n        vec3 I = normalize(pos - campos);\n        float R = fresnel(0.2, 1.4, 2.0, I, normal);\n        \n        vec3 r = texture(iChannel1, reflect(raydir, normal)).rgb;\n        col = vec3(diffuse * rgb(84, 118, 145) + specular*0.1 + r*0.1 + R*0.5);\n    }\n    \n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}