{"ver":"0.1","info":{"id":"3lSyRd","date":"1595022328","viewed":229,"name":"Test Circle 1","username":"UrbanFlame","description":"Simple circle with random colors\nTrying to understand how shader works","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define RandomF(x) 0.5+0.5*cos(x)\n\nfloat remap(float value, float inMin, float inMax, float outMin, float outMax)\n{\n \treturn outMin + (value - inMin) * (outMax - outMin) / (inMax - inMin) ;  \n}\n\nfloat remap(float value, float inMin, float inMax)\n{\n    return (value - inMin) * 1.0 / (inMax - inMin) ;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Created total color vec and setting to white for background\n    vec3 col = vec3(1.0, 1.0, 1.0);\n    float circleRadius = 1.0;\n \n    float xCircle = remap(uv.x, 0.0, 1.0, -1.0, 1.0) * iResolution.x / iResolution.y;    \n    float yCircle = remap(uv.y, 0.0, 1.0, -1.0, 1.0) ;\n    float sumCirclePoints = pow(xCircle, 2.0) + pow(yCircle, 2.0);\n    float powCircleRadius = pow(circleRadius, 2.0);\n    \n    if (sumCirclePoints <= powCircleRadius)\n    {\n        float linesFrequency = 3.0;\n        float colorValue = RandomF(uv.x * iTime * linesFrequency);\n     \tcol = vec3(uv.xyx * colorValue);\n        \n        //Adding alpha near to circle borders\n        //float distanceToCenter = distance(vec2(uv.x * iResolution.x / iResolution.y, uv.y)\n        //                                  , vec2(0.5 * iResolution.x / iResolution.y, 0.5));\n       \t\n        float distanceToCenter = sumCirclePoints / powCircleRadius;\n        col = mix(col, vec3(1.0, 1.0, 1.0), distanceToCenter);\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}