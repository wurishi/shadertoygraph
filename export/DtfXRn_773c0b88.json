{"ver":"0.1","info":{"id":"DtfXRn","date":"1674171293","viewed":82,"name":"Aliasing explainer","username":"jean80it","description":"aliasing","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["aliasing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926\n\n#define sqr(x) (x * x)\n\nvec2 rotate(vec2 p, float a)\n{\n    mat2 r = mat2(\n        cos(a), sin(a),\n        -sin(a), cos(a)\n        );\n        \n    return p * r;\n}\n\nvec2 translate(vec2 p, vec2 newPos)\n{\n    return p - newPos;\n}\n\nfloat sdRect(vec2 p, vec2 size) \n{\n    vec2 d = abs(p) - size / 2.0;\n    return max(d.x, d.y);\n}\n\nfloat combineSdUnion(inout float sd1, float sd2)\n{\n    sd1 = min(sd1, sd2);\n    return sd1;\n}\n\nvec4 drawSd(float d, inout vec4 prevCol, vec4 newCol, float aaTransitionWidth)\n{\n    prevCol = mix(prevCol, newCol, smoothstep(aaTransitionWidth, 0.0, d));\n    return prevCol;\n}\n\nvec4 drawSd(float d, inout vec4 prevCol, vec4 newCol, float mask, float aaTransitionWidth)\n{\n    prevCol = mix(prevCol, newCol, clamp(mask, 0.0, 1.0) * smoothstep(aaTransitionWidth, 0.0, d));\n    return prevCol;\n}\n\n\nfloat sdEllipse(vec2 p, vec2 r)\n{\n    return length(p * r.x / r) - r.x;\n}\n\nfloat sdOutline(float sd, float thickness)\n{\n    return abs(sd) - thickness * 0.5;\n}\n\nfloat sdTriangleIsosceles( in vec2 p, in vec2 q )\n{\n    p.x = abs(p.x);\n    vec2 a = p - q*clamp( dot(p,q)/dot(q,q), 0.0, 1.0 );\n    vec2 b = p - q*vec2( clamp( p.x/q.x, 0.0, 1.0 ), 1.0 );\n    float s = -sign( q.y );\n    vec2 d = min( vec2( dot(a,a), s*(p.x*q.y-p.y*q.x) ),\n                  vec2( dot(b,b), s*(p.y-q.y)  ));\n    return -sqrt(d.x)*sign(d.y);\n}\n\nfloat sdVector(in vec2 p, in float len, in float thickness, in float appPointR, vec2 arrowHeadSize)\n{\n    vec2 arrowLineSize = vec2(thickness, len);\n    float c = sdRect(p - vec2(0.0, (arrowLineSize.y - arrowHeadSize.y) / 2.0), arrowLineSize - vec2(0.0, arrowHeadSize.y));\n    c = min(c, sdEllipse(p, vec2(appPointR)));\n    c = min(c, sdTriangleIsosceles(p - vec2(0.0, arrowLineSize.y), vec2(arrowHeadSize.x, -arrowHeadSize.y)));\n    \n    return c;\n}\n\nfloat sdCosWave(vec2 p, float frequency, float amplitude, float initialPhase, float thickness)\n{\n    return min(abs(p.y - cos(p.x / frequency + initialPhase) * amplitude) - thickness * 0.5,\n                abs(p.y - cos((p.x - thickness * 0.5) / frequency + initialPhase) * amplitude) - thickness * 0.5);\n}\n\nfloat sdSinWave(vec2 p, float frequency, float amplitude, float initialPhase, float thickness)\n{\n    return min(abs(p.y - sin(p.x / frequency + initialPhase) * amplitude) - thickness * 0.5,\n                abs(p.y - sin((p.x - thickness * 0.5) / frequency + initialPhase) * amplitude) - thickness * 0.5);\n}\n\nfloat sdHLine(vec2 p, float thickness)\n{\n    return abs(p.y) - thickness * 0.5; \n}\n\nfloat sdVLine(vec2 p, float thickness)\n{\n    return abs(p.x) - thickness * 0.5; \n}\n\nvec4 hFade()\n{\n    return vec4(0);\n}\n\nfloat timeMask(float time, float tFrom, float tTo, float transitionTime)\n{\n    if (time >= tTo + transitionTime)\n        return 0.0;\n    \n    if (time >= tTo)\n        return smoothstep(tTo + transitionTime, tTo, time);\n    \n    if (time >= tFrom)\n        return 1.0;\n    \n    if (time >= tFrom - transitionTime)\n        return smoothstep(tFrom - transitionTime, tFrom, time);\n        \n    // time < tFrom - transitionTime\n    return 0.0;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy / iResolution.y;\n    vec2 center = vec2(iResolution.x / iResolution.y / 2.0, 0.5);\n    float aaTransitionWidth = 1.0 / (min(iResolution.x, iResolution.y)) * 2.0;\n    \n    float thickness = 0.003;\n    \n    float period1 = 0.05;\n    float period2 = period1 * 3.0;\n    \n    // animation:\n    float timeK = 0.4;\n    float vertLinesDotsDenseMask =  timeMask(timeK * iTime, 5.0, 9.0, 1.5);\n    float vertLinesDotsSparseMask = timeMask(timeK * iTime, 11.0, 100.0, 1.5);\n    float lowerWavHiFreqMask =      timeMask(timeK * iTime, 7.0, 8.0, 1.5);\n    float lowerWavLoFreqMask =      timeMask(timeK * iTime, 14.0, 100.0, 1.5);\n    \n    \n    // background gradient\n    vec4 c = sqrt(mix(sqr(vec4(0.25, 0.2, 0.1, 1.0)), sqr(vec4(0.1, 0.22, 0.3, 1.0)), clamp(uv.y + uv.x / 2.0, 0.0, 1.0)));\n    \n    // upper hi freq wave\n    drawSd(sdCosWave(translate(uv, vec2(center.x, 0.75)), period1, 0.1, 0.0, thickness), c, vec4(1.0), 0.5 - sqr(abs(uv.x - center.x) * 0.9), aaTransitionWidth);\n    \n    // lower hi freq wave\n    drawSd(sdCosWave(translate(uv, vec2(center.x, 0.25)), period1, 0.1, 0.0, thickness), c, vec4(1.0), (0.5 - sqr(abs(uv.x - center.x) * 0.9)) * lowerWavHiFreqMask, aaTransitionWidth);\n    \n    // lower low freq wave (alias)\n    drawSd(sdCosWave(translate(uv, vec2(center.x, 0.25)), period2, 0.1, 0.0, thickness), c, vec4(1.0), (0.5 - sqr(abs(uv.x - center.x) * 0.9)) * lowerWavLoFreqMask, aaTransitionWidth);\n    \n    \n    \n    for (int i = 0; i < 7; ++i)\n    {\n        float xPos = center.x - (((4.5 - float(i) * 1.5) / 2.0) * PI * 0.005 / period1);\n        \n        drawSd(sdVLine(translate(uv, vec2(xPos, 0)), thickness), c, vec4(1.0), vertLinesDotsSparseMask, aaTransitionWidth);\n    \n        float wavVal = cos(float(i - 1) * PI * 0.125 / period1) * 0.1;\n        \n        drawSd(sdEllipse(translate(uv, vec2(xPos, 0.75 - wavVal)), vec2(0.01, 0.01)), c, vec4(1.0, 0.0, 0.0, 1.0), vertLinesDotsSparseMask, aaTransitionWidth);\n        drawSd(sdEllipse(translate(uv, vec2(xPos, 0.25 - wavVal)), vec2(0.01, 0.01)), c, vec4(1.0, 0.0, 0.0, 1.0), vertLinesDotsSparseMask, aaTransitionWidth);\n    }\n    \n    \n    for (int i = 0; i < 19; ++i)\n    {\n        float xPos = center.x - (((4.5 - float(i) * 0.5) / 2.0) * PI * 0.005 / period1);\n        \n        drawSd(sdVLine(translate(uv, vec2(xPos, 0.0)), thickness), c, vec4(1.0), vertLinesDotsDenseMask, aaTransitionWidth);\n    \n        \n        float wavVal = cos(float(i - 3) * PI * 0.125 / period1) * 0.1;\n        \n        drawSd(sdEllipse(translate(uv, vec2(xPos, 0.75 - wavVal)), vec2(0.01, 0.01)), c, vec4(1.0, 0.0, 0.0, 1.0), vertLinesDotsDenseMask, aaTransitionWidth);\n        drawSd(sdEllipse(translate(uv, vec2(xPos, 0.25 - wavVal)), vec2(0.01, 0.01)), c, vec4(1.0, 0.0, 0.0, 1.0), vertLinesDotsDenseMask, aaTransitionWidth);\n    }\n    \n    \n    \n    fragColor = c;\n}\n\n\n\n\n\n\n","name":"Image","description":"","type":"image"}]}