{"ver":"0.1","info":{"id":"lXlyD2","date":"1727739795","viewed":22,"name":"Ray Marching: Operations","username":"arminkz","description":"Union, Intersection, Blend, ....","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float FOV = 45.;\n\n//Math\n\nconst float PI = 3.14159265358979323846;\nconst float INV_PI = 0.31830988618379067154; \nconst float DEG_TO_RAD = PI / 180.0;\n\n\n// SDF for Primitive Shapes\n\nfloat sdSphere( vec3 p, float s )\n{\n    return length(p)-s;\n}\n\n\nfloat sdBox( vec3 p, vec3 b )\n{\n    vec3 d = abs(p) - b;\n    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\n\n\n\n// Boolean Operations\n\nfloat opUnion( float d1, float d2 )\n{\n\treturn min(d1,d2);\n}\n\n\nfloat opSmoothUnion( float d1, float d2, float k )\n{\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h);\n}\n\n\n\n// World creation using primitives\n\nfloat map_the_world(in vec3 p)\n{\n    float sphere_0 = sdSphere(p - vec3(-.7,0.,0.) , 1.0);\n    float sphere_1 = sdSphere(p - vec3( .7,0.,0.) , 1.0);\n    \n    float box_1 = sdBox(p - vec3(0.,0.,0.) , vec3(.7,1.,.7));\n    return opSmoothUnion(sphere_0, sphere_1, .35);\n}\n\n\n\n\nvec3 calculate_normal(in vec3 p)\n{\n    const vec3 small_step = vec3(0.001, 0.0, 0.0);\n\n    float gradient_x = map_the_world(p + small_step.xyy) - map_the_world(p - small_step.xyy);\n    float gradient_y = map_the_world(p + small_step.yxy) - map_the_world(p - small_step.yxy);\n    float gradient_z = map_the_world(p + small_step.yyx) - map_the_world(p - small_step.yyx);\n\n    vec3 normal = vec3(gradient_x, gradient_y, gradient_z);\n\n    return normalize(normal);\n}\n\n\nvec3 ray_dir(vec2 uv, float fov) {\n    //ortho camera\n    return normalize( vec3(uv, 1.0) );\n    \n    //perspective camera (TODO)\n    float cot_half_fov = tan( ( 90.0 - fov * 0.5 ) * DEG_TO_RAD );\n    float z = uv.y * 0.5 * cot_half_fov;\n    return normalize( vec3( uv, z ) );\n}\n\n\nvec3 ray_march(in vec3 ro, in vec3 rd)\n{\n    float total_distance_traveled = 0.0;\n    const int NUMBER_OF_STEPS = 32;\n    const float MINIMUM_HIT_DISTANCE = 0.001;\n    const float MAXIMUM_TRACE_DISTANCE = 1000.0;\n\n    for (int i = 0; i < NUMBER_OF_STEPS; ++i)\n    {\n        vec3 current_position = ro + total_distance_traveled * rd;\n\n        float distance_to_closest = map_the_world(current_position);\n\n        if (distance_to_closest < MINIMUM_HIT_DISTANCE) \n        {\n            vec3 normal = calculate_normal(current_position);\n            vec3 light_position = vec3(2.0, -5.0, 3.0);\n            vec3 direction_to_light = normalize(current_position - light_position);\n\n            float diffuse_intensity = max(0.0, dot(normal, direction_to_light));\n\n            return vec3(1.0, 1.0, 0.0) * diffuse_intensity;\n        }\n\n        if (total_distance_traveled > MAXIMUM_TRACE_DISTANCE)\n        {\n            break;\n        }\n        total_distance_traveled += distance_to_closest;\n    }\n    return vec3(.8);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - .5*iResolution.xy)/iResolution.y;\n    \n    vec3 camera_pos = vec3(0.0, 0.0, -5.0);\n    vec3 ro = camera_pos;\n    vec3 rd = ray_dir(uv, FOV);\n    \n    vec3 shaded_color = ray_march(ro, rd);\n    \n    fragColor = vec4(shaded_color,1.0);\n}","name":"Image","description":"","type":"image"}]}