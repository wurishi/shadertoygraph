{"ver":"0.1","info":{"id":"msBXDm","date":"1670392038","viewed":258,"name":"20221207_acid","username":"0b5vr","description":"haha","likes":6,"published":1,"flags":8,"usePreview":0,"tags":["audio","acid","synth","303"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 uv = fragCoord / iResolution.xy;\n\n  float audio = 0.5 * renderMusic( iTime + 0.01 * uv.x ).x;\n  float dAudio = abs( dFdx( audio ) );\n\n  float shape = linearstep( 2.0 / iResolution.y, 0.0, abs( uv.y - 0.5 - audio ) - 0.5 * dAudio );\n  fragColor = vec4( vec3( shape ), 1.0 );\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec2 mainSound( int samp, float _ ) {\n  float time = float( samp % int( 8.0 * BEAT2TIME * iSampleRate ) ) / iSampleRate;\n  return renderMusic( time );\n}\n","name":"Sound","description":"","type":"sound"},{"inputs":[],"outputs":[],"code":"// == macros =======================================================================================\n#define saturate(i) clamp(i, 0.,1.)\n#define linearstep(a,b,t) saturate(((t)-(a))/((b)-(a)))\n#define p2f(i) (pow(2.,((i)-69.)/12.)*440.)\n#define fs(i) fract(sin(114.514*i)*1919.810)\n\n// == mixing =======================================================================================\nconst float KICK_AMP = 0.5;\nconst float HIHAT_AMP = 0.3;\nconst float ACID_AMP = 0.3;\n\n// == acid knobs ===================================================================================\nconst float CUTOFF = 74.0; // in midi note\nconst float CUTOFF_ENV = 24.0; // in midi note\nconst float CUTOFF_ATTACK = 0.02; // in second\nconst float RESONANCE = 0.7; // [0 - 1]\nconst bool DISTORT = true;\nconst float DISTORT_GAIN = 20.0; // in voltage\nconst float SLIDE_TIME = 0.06;\n\n// == pattern ======================================================================================\n// The Prodigy Claustrophobic Sting pattern, why not\nconst float BPM = 155.0;\nconst int STEPS = 8;\n\nconst float SEQ_PITCH[16] = float[](\n  54.0, 42.0, 66.0, 42.0,\n  66.0, 42.0, 54.0, 53.0,\n  54.0, 42.0, 66.0, 42.0,\n  66.0, 42.0, 54.0, 53.0\n);\n\nconst float SEQ_LENGTH[16] = float[](\n  0.0, 1.7, 0.0, 1.0,\n  2.0, 0.0, 1.0, 1.7,\n  0.0, 1.7, 0.0, 1.0,\n  2.0, 0.0, 1.0, 1.7\n);\n\nconst int SEQ_SLIDE[16] = int[](\n  1, 0, 1, 0,\n  0, 1, 0, 0,\n  1, 0, 1, 0,\n  0, 1, 0, 0\n);\n\nconst float SEQ_ACCENT[16] = float[](\n  0.0, 0.0, 0.0, 0.0,\n  0.0, 0.0, 1.0, 1.0,\n  0.0, 0.0, 0.0, 0.0,\n  0.0, 0.0, 1.0, 1.0\n);\n\n// == constants ====================================================================================\nconst float BEAT2TIME = 60.0 / BPM;\nconst float TIME2BEAT = BPM / 60.0;\nconst float PI = acos( -1.0 );\nconst float TAU = 2.0 * PI;\nconst float LN2 = 0.69314718056;\n\n// == functions ====================================================================================\nmat2 rotate2D( float t ) {\n  float c = cos( t ), s = sin( t );\n  return mat2( c, s, -s, c );\n}\n\n/**\n * Generate an array of sinewaves which makes a dissonance\n * and it sounds like a 808 hihat \"metal\" oscillator\n */\nvec2 shotgun( float phase, float spread ) {\n  vec2 sum = vec2( 0.0 );\n\n  for( int i = 0; i < 64; i ++ ) {\n    float fi = float( i );\n    float dice = fs( fi );\n\n    float partial = exp2( spread * dice );\n\n    sum += vec2( sin( TAU * phase * partial + fi ) ) * rotate2D( TAU * fs( dice ) );\n  }\n\n  return sum / 64.0;\n}\n\n/**\n * Create glided phase using two pitches\n *\n * See: https://scrapbox.io/0b5vr/%E3%82%B0%E3%83%A9%E3%82%A4%E3%83%89%E3%82%92%E7%A9%8D%E5%88%86\n */\nfloat glidephase( float t, float t1, float p0, float p1 ) {\n  if ( p0 == p1 ) {\n    return p2f( p0 ) * t;\n  }\n\n  float m0 = ( p0 - 69.0 ) / 12.0;\n  float m1 = ( p1 - 69.0 ) / 12.0;\n  float b = ( m1 - m0 ) / t1;\n\n  return (\n    + p2f( p0 ) * ( pow( 2.0, b * min( t, t1 ) ) - 1.0 ) / b / LN2\n    + max( 0.0, t - t1 ) * p2f( p1 )\n  );\n}\n\n/**\n * Generate saw wave with 4 pole ladder filter using additive synthesis\n *\n * https://scrapbox.io/0b5vr/LPF%E3%81%AE%E5%91%A8%E6%B3%A2%E6%95%B0%E7%89%B9%E6%80%A7\n */\nvec2 filterSaw( float freq, float phase, float cutoff, float reso ) {\n  vec2 sum = vec2( 0.0 );\n\n  for ( int i = 1; i <= 96; i ++ ) {\n    float fi = float( i );\n    float freqp = freq * fi;\n    float omega = freqp / cutoff;\n    float omegaSq = omega * omega;\n\n    float a = 4.0 * reso + omegaSq * omegaSq - 6.0 * omegaSq + 1.0;\n    float b = 4.0 * omega * ( omegaSq - 1.0 );\n    float r = 1.0 / sqrt( a * a + b * b );\n    float phi = atan( a, b );\n\n    sum += 0.66 * sin( fi * phase * TAU - phi ) / fi * r;\n  }\n\n  return sum;\n}\n\n// == main =========================================================================================\nvec2 renderMusic( float time ) {\n  vec2 dest = vec2( 0.0 );\n\n  // kick\n  {\n    float t = mod( time, BEAT2TIME );\n\n    float env = exp( -20.0 * max( 0.0, t - 0.1 ) );\n\n    float baseFreq = 60.0;\n    float sweepTime = 0.03;\n    float phase = 60.0 * ( t - 0.12 * exp( -30.0 * t ) );\n\n    float wave = env * tanh( 1.5 * sin( TAU * phase ) );\n\n    float zcross = smoothstep( 0.0, 0.0002, t ) * smoothstep( 0.0, 0.01, BEAT2TIME - t );\n    dest += KICK_AMP * zcross * wave;\n  }\n\n  // hihat\n  {\n    float t = mod( time, 0.25 * BEAT2TIME );\n\n    float env = exp( -50.0 * t );\n\n    dest += HIHAT_AMP * env * tanh( 5.0 * shotgun( 5000.0 * t, 2.0 ) );\n  }\n\n  // acid\n  {\n    float t = mod( time, 0.25 * BEAT2TIME );\n    float st = floor( time / ( 0.25 * BEAT2TIME ) );\n    st = mod( st, float( STEPS ) );\n    int ist = int( st );\n\n    int slide = SEQ_SLIDE[ ist ];\n    int istSlided = ( ist + STEPS - slide ) % STEPS;\n    float tSlided = ( t + float( slide ) * ( 0.25 * BEAT2TIME ) );\n\n    float l = SEQ_LENGTH[ istSlided ] * 0.25 * BEAT2TIME;\n\n    float pitch = SEQ_PITCH[ ist ];\n    float freq = p2f( pitch );\n    float phase = tSlided * freq;\n\n    if ( slide > 0 ) {\n      float p0 = SEQ_PITCH[ ( ist + STEPS - 1 ) % STEPS ];\n      float freq0 = p2f( p0 );\n      freq = p2f( mix( p0, pitch, saturate( t / SLIDE_TIME ) ) );\n      phase = 0.25 * BEAT2TIME * freq0 + glidephase( t, SLIDE_TIME, p0, pitch );\n    }\n\n    float accent = SEQ_ACCENT[ istSlided ];\n    float env = mix(\n      exp( -8.0 * tSlided ),\n      1.3 * exp( -15.0 * tSlided ),\n      accent\n    ) * smoothstep( 0.0, CUTOFF_ATTACK, tSlided );\n\n    float cutoff = p2f( CUTOFF + CUTOFF_ENV * env );\n    vec2 wave = env * filterSaw( freq, phase, cutoff, RESONANCE );\n\n    if ( DISTORT ) {\n      wave = tanh( wave * DISTORT_GAIN );\n    }\n\n    float zcross = smoothstep( 0.0, 0.001, tSlided ) * smoothstep( 0.0, 0.01, l - tSlided );\n    dest += ACID_AMP * zcross * wave;\n  }\n\n  return dest;\n}\n","name":"Common","description":"","type":"common"}]}