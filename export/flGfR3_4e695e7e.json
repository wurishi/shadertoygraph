{"ver":"0.1","info":{"id":"flGfR3","date":"1664890716","viewed":339,"name":"Twitch tiles","username":"Trixelized","description":"For a Twitch integration experiment","likes":14,"published":3,"flags":0,"usePreview":0,"tags":["twitch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float hash12(vec2 p) {\n    vec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nmat2 rotate2d(float a) {\n    return mat2(cos(a),-sin(a),\n    sin(a),cos(a));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord/iResolution.xy - 0.5;\n    uv.x *= (iResolution.x / iResolution.y);\n    uv = rotate2d(radians(45.0)) * uv;\n    float tile_mul = 5.0 + sin(iTime * 0.2);\n    uv.x += (1.0/tile_mul) * smoothstep(0.0, 0.75, sin(iTime * 0.5 + floor(uv.y * tile_mul) * 0.5));\n    vec2 tile_uv = fract(uv * tile_mul);\n    vec2 tile_pos = floor(uv * tile_mul);\n    vec3 col = vec3(0.5, 0.1, 1.0);\n    col *= 1.2 - 0.4 * mix(hash12(tile_pos), hash12(tile_pos + 0.2), 0.5 + (tile_uv.x + tile_uv.y)/2.0);\n    col += 0.25 * pow(2.0 * length(tile_uv.y - 0.5) * abs(cos(iTime * 0.5 + floor(uv.y * tile_mul) * 0.5)), 5.0);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}