{"ver":"0.1","info":{"id":"ttlXDN","date":"1570234698","viewed":707,"name":"Waterfall flow 2","username":"clay","description":"An attempt at recreating the waterfall from http://www-evasion.imag.fr/Publications/2001/PN01/\nAny suggestions to get it closer would be welcome!","likes":16,"published":1,"flags":0,"usePreview":0,"tags":["perlin","waterfall","flownoise","neyret"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float get_mask(vec2 uv) {\n    uv.y *= 4.;\n    uv.y -= 1.;\n    uv.x *= .6;\n    uv.x *= pow(uv.y, .15);\n    uv.x = abs(uv.x);\n\treturn (smoothstep(0.65, 1., uv.x) * step(0., uv.y));\n}\n\nfloat fbm(vec3 p, inout vec3 gradient) {\n\t// Initial values\n\tfloat value = 0.;\n\tfloat amplitude = .3;\n\tfloat frequency = 1.;\n\tfloat rotation = 1.5;\n\tvec3 grad;\n\t// Loop of octaves\n\tfor (int i = 0; i < 4; i++) {\n        value += amplitude * snoise(frequency*p - gradient, grad, iTime*rotation);\n\t\tgrad.z = 0.;\n\t\tgradient += amplitude*grad*.3;\n        frequency *= 2.;\n\t\tamplitude *= .5;\n\t\trotation *= 2.;\n\t}\n\treturn value;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x = uv.x*2.-1.;\n    uv.x *= iResolution.x / iResolution.y; \n    \n   \tfloat mask = get_mask(uv);\n        \n    vec3 background = texture(iChannel0, uv).rgb;\n    \n    vec3 p = vec3(uv, 0.);\n    p.x *= pow(p.y, .3);\n    p.y = pow(p.y, .5);\n\n    vec3 gradient = vec3(0.);\n    float noise = fbm(p + vec3(0., iTime*.6, 0.), gradient);\n    noise = noise*.5+.5;\n    \n    vec3 col = vec3(0.);\n    col = mix(vec3(noise)*vec3(0.6, .6, .9)*2., background, mask);\n        \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define PI 3.14159265359\n\n// alternate the direction of rotation along a checker pattern\n#define CHECKERED\n\n\nmat2 rot(float angle) {\n    return mat2(cos(angle), -sin(angle),\n                sin(angle), cos(angle));\n}\n\nfloat checkersign(vec2 uv) {\n#ifdef CHECKERED\n    uv = floor(uv);\n    return sign(mod(uv.x + uv.y, 2.) - .5);\n#else\n    return 1.;\n#endif\n}\n\n\n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\n// https://github.com/ashima/webgl-noise/blob/master/src/noise3Dgrad.glsl\n// modified to allow for rotation \nfloat snoise(vec3 v, out vec3 gradient, float time)\n{\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289(i); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n    \n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n    \n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// add rotation\n  x0.xy *= rot(time*checkersign(a0.xy));\n  x1.xy *= rot(time*checkersign(a0.zw));\n  x2.xy *= rot(time*checkersign(a1.xy));\n  x3.xy *= rot(time*checkersign(a1.zw));\n    \n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  vec4 m2 = m * m;\n  vec4 m4 = m2 * m2;\n  vec4 pdotx = vec4(dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3));\n\n// Determine noise gradient\n  vec4 temp = m2 * m * pdotx;\n  gradient = -8.0 * (temp.x * x0 + temp.y * x1 + temp.z * x2 + temp.w * x3);\n  gradient += m4.x * p0 + m4.y * p1 + m4.z * p2 + m4.w * p3;\n  gradient *= 42.0;\n\n  return 42.0 * dot(m4, pdotx);\n}","name":"Common","description":"","type":"common"}]}