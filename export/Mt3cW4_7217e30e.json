{"ver":"0.1","info":{"id":"Mt3cW4","date":"1532599148","viewed":198,"name":"Basic Voronoi, from tutorial","username":"hascheidl","description":"Copy of the first approach by @The_ArtOfCode, shown at https://www.youtube.com/watch?v=l-07BXzNdPw\n","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["voronoi"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n * Voronoi visualization\n * Copy of the first approach by @The_ArtOfCode, shown at https://www.youtube.com/watch?v=l-07BXzNdPw\n * \n * 27.07.2018\n */\nvec2 N22(vec2 p) {\n    vec3 a = fract(p.xyx*vec3(123.34,234.34,345.65));\n    a += dot(a, a+34.45);\n    return fract(vec2(a.x*a.y, a.y * a.z));\n    \n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    float ar = iResolution.x/iResolution.y;\n    vec2 uv = (2. * fragCoord - iResolution.xy)/iResolution.y;\n    \n    float m = 0.;\n    float t = iTime;\n    float minDist = 100.;\n    \n    for(float i=1.; i<=10.; i++) {\n     vec2 n = N22(vec2(i));   \n        vec2 p = sin(n*t);\n        p.x *= ar; //aspect ratio\n        \n        float d = length(uv-p);\n        m+= smoothstep(.02, .01,d);\n        \n        if(d<minDist) {\n         minDist = d;   \n            \n        }\n    }\n\n    // Time varying pixel color\n    vec3 col = vec3(minDist);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}