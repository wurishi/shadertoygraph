{"ver":"0.1","info":{"id":"Xd33Dl","date":"1452635065","viewed":2375,"name":"lens: bokeh blur, circular 3pass","username":"hornet","description":"Triple circular blur, stolen from @and 's GDC talk about Dead Space 3 ( http://www.gdcvault.com/play/1017718/Rendering-Tricks-in-Dead-Space / https://archive.org/details/GDC2013Andreev )\n...blur-sizes for second and third pass probably needs tweaking.","likes":39,"published":1,"flags":32,"usePreview":0,"tags":["blur","lens","filter","dof","bokeh"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    //fragColor = texture( iChannel0, uv, -10.0 ); return; //DEBUG\n    //fragColor = texture( iChannel1, uv, -10.0 ); return; //DEBUG\n    fragColor = texture( iChannel2, uv, -10.0 );\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsX3Rn","filepath":"/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","previewfilepath":"/media/ap/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const vec2 blurdir = vec2( 1.0, 0.0 );\n\nconst float blurdist_px = 8.0;\nconst int NUM_SAMPLES = 6;\n\nconst float THRESHOLD = 0.1;\nconst float MULT = 2.0;\n\nvec3 srgb2lin(vec3 c) { return c*c; }\nvec3 lin2srgb(vec3 c) { return sqrt(c); }\n\n//note: uniform pdf rand [0;1[\nfloat hash12n(vec2 p)\n{\n\tp  = fract(p * vec2(5.3987, 5.4421));\n    p += dot(p.yx, p.xy + vec2(21.5351, 14.3137));\n\treturn fract(p.x * p.y * 95.4307);\n}\n\nvec4 pattern( vec2 p )\n{\n    float aspect = iResolution.x/iResolution.y;\n    float p0 = step(abs(p.x-0.125), 0.01) * step(abs(p.y-0.27), 0.01);\n    float p1 = step( length( p-vec2(0.125, 0.45) ), 0.025 );\n    \n    float p2_0 = step( length( p-vec2(0.08, 0.14) ), 0.0125 );\n    float p2_1 = step( length( p-vec2(0.16, 0.125) ), 0.0125 );\n    float p2_2 = step( length( p-vec2(0.1, 0.07) ), 0.0125 );\n    float p2 = max(p2_0, max(p2_1,p2_2));\n    \n    return vec4( max( p0, max(p1,p2) ) );\n}\n\nvec3 sampletex( vec2 uv )\n{\n    float t = fract( 0.1*iTime );\n    if ( t < 1.0/3.0)\n    \treturn srgb2lin( texture( iChannel0, uv, -10.0 ).rgb );\n    else if ( t < 2.0/3.0 )\n        return srgb2lin( texture( iChannel1, uv, -10.0 ).rgb );\n    else\n\t    return srgb2lin( texture( iChannel2, uv, -10.0 ).rgb );    \n}\n\nvec3 genimg( vec2 suv, vec2 p )\n{\n    if ( suv.x < 0.25 )\n        return pattern( p ).rgb;\n    else\n    {\n        vec3 smpl = (sampletex(p) - THRESHOLD) / (1.0-THRESHOLD);\n        //sumcol += smpl;\n        return smpl*smpl; //wtf\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragCoord += 25.0 * vec2( cos(iTime), sin(iTime ) );\n    \n    vec2 suv = fragCoord / iResolution.xy; \n    vec2 uv = fragCoord / iResolution.xx;\n\n    float blurdist = (iMouse.z>0.5) ? 32.0 * iMouse.x/iResolution.x : blurdist_px;\n   \n    float da = 6.283 / float(NUM_SAMPLES);\n    float a = da * hash12n(uv+fract(iTime));\n\n    vec3 sumcol = vec3(0.0);\n    for (int i=0;i<NUM_SAMPLES;++i)\n    {\n        vec2 ofs = vec2( cos(a), sin(a) ) / iResolution.x * blurdist;\n        vec2 p = uv + ofs;\n\n \t\tsumcol += genimg( suv, p );\n        \n        a += da;\n    }\n    sumcol /= float(NUM_SAMPLES);\n    sumcol = max( sumcol, 0.0 );\n    \n    fragColor = vec4( lin2srgb( sumcol * MULT ), 1.0 );\n}\n","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"const vec2 blurdir = vec2( 1.0, 0.0 );\n\nconst float blurdist_px = 8.0;\nconst int NUM_SAMPLES = 6;\n\nvec3 srgb2lin(vec3 c) { return c*c; }\nvec3 lin2srgb(vec3 c) { return sqrt(c); }\n\n//note: uniform pdf rand [0;1[\nfloat hash12n(vec2 p)\n{\n\tp  = fract(p * vec2(5.3987, 5.4421));\n    p += dot(p.yx, p.xy + vec2(21.5351, 14.3137));\n\treturn fract(p.x * p.y * 95.4307);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n\n    float blur_r = (iMouse.z>0.5) ? 32.0 * iMouse.x/iResolution.x : blurdist_px;\n    blur_r *= sqrt(2.0); //empiric constant...\n    \n    float da = 6.283 / float(NUM_SAMPLES);\n    float a = da * hash12n(uv+fract(iTime)+1.337);\n    \n    vec3 sumcol = vec3(0.0);\n    for (int i=0;i<NUM_SAMPLES;++i)\n    {\n        vec2 ofs = vec2( cos(a), sin(a) ) / iResolution.xy * blur_r;\n        vec2 p = uv + ofs;\n       \tsumcol += srgb2lin(texture(iChannel0, p, -10.0).rgb);\n        a += da;\n    }\n    sumcol /= float(NUM_SAMPLES);\n    sumcol = max( sumcol, 0.0 );\n    \n    fragColor = vec4( lin2srgb( sumcol ), 1.0 );\n}\n","name":"Buf B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"const vec2 blurdir = vec2( 1.0, 0.0 );\n\nconst float blurdist_px = 8.0;\nconst int NUM_SAMPLES = 6;\n\nvec3 srgb2lin(vec3 c) { return c*c; }\nvec3 lin2srgb(vec3 c) { return sqrt(c); }\n\n//note: uniform pdf rand [0;1[\nfloat hash12n(vec2 p)\n{\n\tp  = fract(p * vec2(5.3987, 5.4421));\n    p += dot(p.yx, p.xy + vec2(21.5351, 14.3137));\n\treturn fract(p.x * p.y * 95.4307);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n\n    float blur_r = (iMouse.z>0.5) ? 32.0 * iMouse.x/iResolution.x : blurdist_px;\n    blur_r *= 2.0; //empiric constant...\n    \n    float da = 6.283 / float(NUM_SAMPLES);\n    float a = da * hash12n(uv+fract(iTime) + 4.2);\n    \n    \n    vec3 sumcol = vec3(0.0);\n    for (int i=0;i<NUM_SAMPLES;++i)\n    {\n        vec2 ofs = vec2( cos(a), sin(a) ) / iResolution.xy * blur_r;\n        vec2 p = uv + ofs;\n       \tsumcol += srgb2lin(texture(iChannel0, p, -10.0).rgb);\n        a += da;\n    }\n    sumcol /= float(NUM_SAMPLES);\n    sumcol = max( sumcol, 0.0 );\n    \n    fragColor = vec4( lin2srgb( sumcol ), 1.0 );\n}\n","name":"Buf C","description":"","type":"buffer"}]}