{"ver":"0.1","info":{"id":"MtByzh","date":"1507355737","viewed":158,"name":"Dance floor(?)","username":"Torumu106","description":"strange soild is dancing.\nI used Raymarching","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","shader","dance"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float PI = 3.1415926535;\nvec3 col = vec3(1.0, 1.0, 1.0);\nint stop = 0;\nbool needshadow = true;\nvec3 stoppos = vec3(0.0);\nbool needlight = true;\nfloat smin( float a, float b, float k )\n{\n    float res = exp( -k*a ) + exp( -k*b );\n    return -log( res )/k;\n}\nfloat map(vec3 p){\n    float d = length(max(abs(p) - vec3(1.0),0.0));\n    \n    vec3 p1 = p;\n    float the = iTime / 2.1;\n    p1.xz *= mat2(cos(the), -sin(the), sin(the), cos(the));\n    d = smin(d, length(p1 - vec3(1.2,1.2,1.2)) - 0.7 +sin(iTime*3.5*PI)*0.2, 3.0);\n    d = smin(d, length(p1 - vec3(-1.2,1.2,1.2)) - 0.7 +sin(iTime*3.5*PI)*0.2, 3.0);\n    d = smin(d, length(p1 - vec3(1.2,1.2,-1.2)) - 0.7 +sin(iTime*3.5*PI)*0.2, 3.0);\n    d = smin(d, length(p1 - vec3(-1.2,1.2,-1.2)) - 0.7 +sin(iTime*3.5*PI)*0.2, 3.0);\n    if(d < 0.01) col= vec3(0.0, 1.0, 1.0);\n    \n    vec3 p2 = (fract((p + vec3(iTime * 5.0, 0, 0.0))  * 0.2) - 0.5) / 0.2;\n    float d1 = max( abs(length(p) - 36.0) - 0.05, length(p2) - 1.0);\n    if(d1 < 0.01){\n        needlight = false;\n        col = vec3(1.0, 0.0, 0.8);\n    }\n    d = min(d, d1);\n    \n    float plane = dot(p,vec3(0.0, 1.0, 0.0)) + 1.0;\n    if(plane < 0.01 && length(p) > 39.0){\n    \tcol = vec3(0.6, 0.4, 0.8) + vec3(0.85, 1.0, 0.5) * max(0.0, (50.0 - length(vec2(80.0) - vec2(abs(p.x), abs(p.z)))) / 45.0);\n    }\n    d = min(d, plane);\n    \n    float pole = length(vec2(p.x, p.z) - vec2(80.0)) - 3.0;\n    pole = min(pole, length(vec2(p.x, p.z) - vec2(-80.0)) - 3.0);\n    pole = min(pole, length(vec2(p.x, p.z) - vec2(-80.0, 80.0)) - 3.0);\n    pole = min(pole, length(vec2(p.x, p.z) - vec2(80.0, -80.0)) - 3.0);\n    \n    if(pole < 0.01){\n        needlight = false;\n        needshadow = false;\n    \tcol = vec3(0.85, 1.0, 0.5);\n    }\n    d = min(d, pole);\n    \n    return d;\n}\nvec3 grad(vec3 p) {\n    vec2 d = vec2(0.0, 0.001);\n\tfloat dFx = map(p + d.yxx) - map(p - d.yxx);\n\tfloat dFy = map(p + d.xyx) - map(p - d.xyx);\n\tfloat dFz = map(p + d.xxy) - map(p - d.xxy);\n\treturn normalize(vec3(dFx, dFy, dFz));\n}\nfloat trace(vec3 o, vec3 r){\n\tfloat t = 0.0;\n    vec3 p;\n    for(int i = 0; i < 256; ++i){\n    \tp = o + r * t;\n        float d = map(p);\n        if(d < 0.01){\n            stop = 1;\n        \tbreak;\n        }\n        t += d * 0.9;\n    }\n    stoppos = p;\n    return t;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    vec3 r = normalize(vec3(uv - vec2(0.0, PI / 5.0), 1.0));\n    \n    float the = iTime / PI;\n    vec3 o = vec3(0.0,10.0, -10.0);\n    r.xz *= mat2(cos(the), -sin(the), sin(the), cos(the));\n    o.xz *= mat2(cos(the), -sin(the), sin(the), cos(the));\n    \n    float t = trace(o, r);\n    float light = 1.0;\n    int stopp = stop;\n    if(stop == 1 && needlight){\n    \tvec3 nor = grad(stoppos);\n        light = 0.6 * max(dot(nor, vec3(1.0,0.8,0.4)), 0.0) + 0.3;\n        stop = 0;\n        vec3 col1 = col;\n        trace(stoppos + nor * 0.02, normalize(vec3(1.0,0.7,0.4)));\n        if(stop == 1){\n            if(needshadow){\n                light = 0.1;\n            }\n            col = col1;\n        }\n    }\n    if(stopp == 0){\n    \tcol = vec3(0.2, 0.375, 0.75);\n    }\n    \n    vec3 fc = vec3(light) * col;\n    fragColor = vec4(fc,1.0);\n}","name":"Image","description":"","type":"image"}]}