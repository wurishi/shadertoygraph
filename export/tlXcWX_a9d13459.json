{"ver":"0.1","info":{"id":"tlXcWX","date":"1593219723","viewed":72,"name":"hmmmmmmmmmm","username":"lunar","description":"some left over demo scene stuff","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raytracing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float hash1(float f) { return fract(sin(f)*63584.3728); }\nfloat hash2(vec2 f) { return hash1(dot(f,vec2(17.43, 54.35))); }\nfloat hash3(vec3 f) { return hash1(dot(f,vec3(17.43, 54.35, 79.82))); }\n\nvoid box3(vec3 o, vec3 r, vec3 s, out float l, out vec3 n) {\n  vec3 Ds = sign(r), vl = (Ds*s - o) / r;\n  l = min(vl.x, min(vl.y, vl.z));\n  if (vl.x == l) {\n    n = - Ds.x * vec3(1., 0., 0.);\n  } else if (vl.y == l) {\n    n = - Ds.y * vec3(0., 1., 0.);\n  } else {\n    n = - Ds.z * vec3(0., 0., 1.);\n  }\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n  \tuv -= 0.5;\n  \tuv *= vec2(iResolution.x / iResolution.y, 1);\n    \n    vec2 m = iMouse.xy/iResolution.xy;\n    vec3 ro = 4.0*normalize(vec3(sin(3.0*m.x), 0.4*m.y, cos(3.0*m.x)));\n\tvec3 ta = vec3(0., 0., 1.);\n    mat3 ca = setCamera( ro, ta, 0. );\n\n  \tfloat t = iTime;\n    \n  \tfloat seed = t + dot(uv, vec2(23.,17.));\n  \tvec3 C = vec3(0.);\n  \tvec3 S = vec3(12., 4., 12.) + .01;\n  \n    const int NS = 8;\n    for (int s = 0; s < NS; ++s) {\n        seed = fract(seed + float(s));\n        vec3 O = vec3(0., 0., 0.), D = ca * normalize(vec3(uv, -1.));\n\n        vec3 kc = vec3(1.);\n        for (int b = 0; b < 4; ++b) {\n            seed += fract(float(b));\n            float M = 0., l = 0.;\n            vec3 N, P = O;\n\n            // Room box\n            box3(O, D, S, l, N);\n            P = O + D * l;\n\n            vec3 me = vec3(0.), ma=vec3(.1);\n            float mr = 1.;\n\n            // me = sin(t)*vec3(0.5, 0.5, 0.5);\n\n            if (N.y < .0) \n                me = step(fract(.5 * P.x), .5) \n                \t* step(fract(.5 * P.z), .5) \n                \t* vec3(1. + .2 * sin(200.*t));\n\n            vec3 c = floor(P * 3.);\n            float rnd = hash3(c);\n\n            mr = .01 + .8 * smoothstep(.9, .4, rnd);\n\n            C += kc * me;\n            kc *= ma;\n\n            O = P + N * .001;\n            D = normalize(mix(\n                reflect(D, N),\n                vec3(hash1(seed+=P.y), hash1(seed+=P.z), hash1(seed+=P.x)) - .5,\n                mr)\n            );\n\n            D *= sign(dot(N, D));\n        }\n    }\n\n    C /= float(NS);\n\n    // Output to screen\n    fragColor = vec4(sqrt(C),1.0);\n}","name":"Image","description":"","type":"image"}]}