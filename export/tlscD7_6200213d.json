{"ver":"0.1","info":{"id":"tlscD7","date":"1592277001","viewed":104,"name":"1st ray-sphere intersection","username":"bipinoli","description":"Learning shaders by following tutorials from \"The art of code\" on youtube","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["learningshaders"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float remap01(float a, float b, float t) {\n \treturn clamp((t-a)/(b-a), 0., 1.);   \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\tuv -= .5;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    // ray and camera system\n    vec3 ro = vec3(0.,0., -2.);\n    vec3 rd = normalize(vec3(uv.x, uv.y, 2.));\n    \n    // sphere\n    float r = 1.;\n    vec3 sphereCenter = vec3(0., 0., 3.);\n    \n    // intersection points t1, t2\n    // t = point at ray which is at the shortest distance from the\n    // center of sphere i.e where normal touches\n    float col = 0.;\n    \n    float t = dot(sphereCenter-ro, rd); // a*b*cosx / b = a*cosx\n    vec3 p = ro + t*rd;\n    float perp = length(sphereCenter - p);\n    if (perp < r) {\n    \tfloat base = sqrt(r*r - perp*perp);\n        float t1 = t - base;\n        float t2 = t + base;\n        \n        col = remap01(0., r, perp);\n        col = pow(col, 4.);\n    }\n    \n    fragColor = vec4(vec3(col),1.0);\n}","name":"Image","description":"","type":"image"}]}