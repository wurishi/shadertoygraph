{"ver":"0.1","info":{"id":"mlscDB","date":"1691732062","viewed":42,"name":"Waves31","username":"andydevs","description":"Using multiple sines for generating waves","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fourier"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float colPeriod = 21.0;\nconst float colSpread =  5.0;\nconst float lumPeriod = 13.0;\nconst float lumScale  =  0.6;\n\nstruct wave {\n    float a;\n    float d;\n    float f;\n    float s;\n};\n\nwave[] waves = wave[](\n    wave( 1.000, -33.5,   1.0,   0.905),\n    wave( 0.887,  25.3,   1.1,   0.346),\n    wave( 0.738,  53.2,   1.4,   0.413),\n    wave( 0.606, -22.3,   1.7,   0.710),\n    wave( 0.512,  48.5,   2.0,   0.733),\n    wave( 0.427, -77.2,   2.3,   0.920),\n    wave( 0.371, -56.0,   2.7,   0.424),\n    wave( 0.287, -60.5,   3.5,   0.625),\n    wave( 0.224, -54.9,   4.5,   0.523),\n    wave( 0.182,  20.1,   5.5,   0.900),\n    wave( 0.148,  -5.1,   6.7,   0.119),\n    wave( 0.123,  -6.0,   8.1,   0.682),\n    wave( 0.097,  80.5,  10.4,   0.650),\n    wave( 0.084,  56.4,  11.9,   0.585),\n    wave( 0.073,  40.0,  13.8,   0.873),\n    wave( 0.059,  77.9,  17.1,   0.364)\n);\n\nwave[] colWaves = wave[](\n    wave( 1.000,   9.0,   1.0,   0.764),\n    wave( 0.860, -35.9,   1.2,   0.300),\n    wave( 0.688,  29.8,   1.5,   0.369),\n    wave( 0.581,  68.6,   1.7,   0.353),\n    wave( 0.514,  -1.9,   1.9,   0.560),\n    wave( 0.431, -26.8,   2.3,   0.717),\n    wave( 0.357,  49.7,   2.8,   0.972),\n    wave( 0.291,   9.7,   3.4,   0.211),\n    wave( 0.243,  62.1,   4.1,   0.917),\n    wave( 0.212,  36.0,   4.7,   0.238),\n    wave( 0.172,  70.4,   5.8,   0.901),\n    wave( 0.154,  45.9,   6.5,   0.429),\n    wave( 0.136, -45.7,   7.3,   0.938),\n    wave( 0.123,  -8.7,   8.2,   0.448),\n    wave( 0.095, -63.6,  10.6,   0.100),\n    wave( 0.076, -28.2,  13.1,   0.619)\n);\n\nfloat purSinFunc(float t, float P) {\n    return 0.5*(1.0 + sin(t / P));\n}\n\nfloat waveFunc(wave w, vec2 uv, float t) {\n    float dr = radians(w.d);\n    vec3 params = w.f * vec3(cos(dr), sin(dr), w.s);\n    vec3 inp = vec3(uv, t);\n    float sinus = sin(dot(params, inp));\n    return w.a*exp(sinus - 1.0);\n}\n\nfloat multiWave(vec2 uv, float time) {\n    // For normalization\n    float maxPeak = 0.0;\n    for (int i = 0; i < waves.length(); ++i) {\n        maxPeak += waves[i].a;\n    }\n    \n    // Multi wave sum\n    float res = 0.0;\n    for (int i = 0; i < waves.length(); ++i) {\n        res += waveFunc(waves[i], uv*10.0, time);\n    }\n    \n    // Return normalization\n    return res / maxPeak;\n}\n\n\nfloat multiColorWave(vec2 uv, float time) {\n    // For normalization\n    float maxPeak = 0.0;\n    for (int i = 0; i < colWaves.length(); ++i) {\n        maxPeak += colWaves[i].a;\n    }\n    \n    // Multi wave sum\n    float res = 0.0;\n    for (int i = 0; i < colWaves.length(); ++i) {\n        res += waveFunc(colWaves[i], uv*10.0, time);\n    }\n    \n    // Return normalization\n    return res / maxPeak;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float u = purSinFunc(iTime, lumPeriod)*lumScale + (1.0 - lumScale)/2.0;\n    float c = multiColorWave(uv, iTime);\n\n    // Time varying pixel color\n    float w = multiWave(uv, iTime);\n    vec3 col = colorMap1D(w + colSpread*c + iTime/colPeriod);\n    float lum = 0.05/abs(w - u);\n\n    // Output to screen\n    fragColor = vec4(col*lum,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define PI 3.1415926535897932\n\nvec3 colorMap1D(float arg) {\n    vec3 freqs = vec3(0.75, 1.15, -0.75);\n    vec3 phases = vec3(0, 1.2, 4.0);    \n    return 0.5*(1.0 + cos(arg*freqs + phases));\n}","name":"Common","description":"","type":"common"}]}