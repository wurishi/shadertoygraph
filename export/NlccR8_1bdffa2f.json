{"ver":"0.1","info":{"id":"NlccR8","date":"1659193297","viewed":466,"name":"Cheap edge-preserving smoothing ","username":"luckyballa","description":"a bit glitchy, but quite fast and easy\n\nideas from: \nhttp://vcg.isti.cnr.it/Publications/2012/BCCS12/j.1467-8659.2011.02078.x.pdf\n\ncompare with:\nhttps://www.shadertoy.com/view/4dfGDH\nhttps://www.shadertoy.com/view/3dd3Wr","likes":9,"published":1,"flags":0,"usePreview":1,"tags":["blur","filter","random","montecarlo","smooth","denoise","bilateral"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define STEPS 16\n#define DIFF 4.0\n#define RADIUS 16.0\n\n#define pi 3.14159265359\n#define pi2 2.0 * pi\n\nuint hash(inout uint x) {\n    x ^= x >> 16;\n    x *= 0x7feb352dU;\n    x ^= x >> 15;\n    x *= 0x846ca68bU;\n    x ^= x >> 16;\n    \n    return x;\n}\n\n//https://www.shadertoy.com/view/WsBBR3 \nfloat randomFloat(inout uint state) {\n    return float(hash(state)) / 4294967296.0;\n} \n\nvec2 randomDir(inout uint state) {\n    float z = randomFloat(state) * 2.0 - 1.0;\n    float a = randomFloat(state) * pi2;\n    float r = sqrt(1.0f - z * z);\n    float x = r * cos(a);\n    float y = r * sin(a);\n    return vec2(x, y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 m = iMouse.xy / iResolution.xy;\n    if(m.x <= 0.0 &&  m.y <= 0.0) m.x = .5;\n\n    vec2 radius = (RADIUS / iResolution.xy);\n    float diff = DIFF / 255.0;\n    vec3 pixel = texture(iChannel0, uv).xyz;                  \n    vec3 result = vec3(0.0, 0.0, 0.0);\n    float totalWeight = 0.0;\n    uint seed = uint(54321);\n\n\n    for(int i = 0; i < STEPS; i++) {\n        vec2 dir = randomDir(seed).xy * radius;\n        vec3 randomPixel = texture(iChannel0, uv + dir).xyz;\n        vec3 delta = randomPixel - pixel;\n        float weight = exp(-dot(delta, delta) / diff);\n        result += randomPixel * weight;\n        totalWeight += weight;\n    }\n    \n    \n    result = result / totalWeight;    \n    fragColor = vec4( m.x > uv.x ? pixel : result, 1.0);  \n    fragColor += step(abs(m.x - uv.x), 0.001);\n}\n   ","name":"Image","description":"","type":"image"}]}