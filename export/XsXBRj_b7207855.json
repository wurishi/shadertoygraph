{"ver":"0.1","info":{"id":"XsXBRj","date":"1496995239","viewed":120,"name":"Gradients","username":"Anaghir","description":"Colorful gradients","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["gradient"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n#define PI2 6.28318530718\t\n\nvec4 Colors[] = vec4[](\n\tvec4(1,0,0,1),\n\tvec4(0,1,0,1),\n\tvec4(0,0,1,1),\n\tvec4(1,0,1,1),\n\tvec4(1,1,0,1)\n);\n//--------\nvec4 conical(in vec2 fragCoord, in vec2 res){\n  fragCoord -= iMouse.xy;\n  fragCoord /= res; \n  float a = 5. * ( atan(fragCoord.y, fragCoord.x)/PI2 + .5 );\n  uint i = uint(a);\n\n  return  mix( Colors[(i + 5U) % 5U],  Colors[(i+1U) % 5U], fract(a) );\n}\n//--------\nvec4 horizontal(in vec2 fragCoord, in vec2 res){\n   fragCoord -= iMouse.xy;\n   fragCoord /= res; \n   float a = 5. + (fragCoord.x * 5.);\n   uint i = uint(a);\n\n   return mix( Colors[(i + 5U) % 5U],  Colors[(i+1U) % 5U], fract(a) );\n}\n//--------\nvec4 vertical(in vec2 fragCoord, in vec2 res){\n   fragCoord -= iMouse.xy;\n   fragCoord /= res; \n   float a = 5. + (fragCoord.y * 5.);\n   uint i = uint(a);\n\n   return mix( Colors[(i + 5U) % 5U],  Colors[(i+1U) % 5U], fract(a) );\n}\n//--------\nvec4 diagonal(in vec2 fragCoord, in vec2 res){\n   fragCoord -= iMouse.xy;\n   fragCoord /= res; \n   float a = 5. + ((fragCoord.x * 5.) - (fragCoord.y * 5.)) / 2.;\n   uint i = uint(a);\n\n   return mix( Colors[(i + 5U) % 5U],  Colors[(i+1U) % 5U], fract(a) );\n}\n//--------\nvec4 func(in float iF, in vec2 fragCoord, in vec2 res){\n    if(iF==0.) return conical(fragCoord, res);\n    if(iF==1.) return horizontal(fragCoord, res);\n    if(iF==2.) return vertical(fragCoord, res);\n    if(iF==3.) return diagonal(fragCoord, res);\n}\n// grid handling by ollj https://www.shadertoy.com/view/ls2cDt --------\nvec2 gridSize=vec2(2,2);\n//--------\nvec3 getCell(vec2 s,vec2 h){\n\tvec2 c=floor(h*gridSize/s);\n \treturn vec3(c.x,c.y,(gridSize.y-1.-c.y)*gridSize.x+c.x);\n}\n//--------\nvec3 getSmallCells(vec2 s,vec2 h){\n\tvec3 c=getCell(s,h);\n    vec2 g=s/gridSize;\n    float r=g.x/g.y;\n\tvec2 u = PI*((2.*h-g)/g.y - 2.*vec2(c.x*r,c.y));\n    return vec3(c.z,u);\n}\n//--------\nfloat EncID(vec2 s, vec2 h, vec2 sz) // encode id from coord // s:screenSize / h:pixelCoord / sz=gridSize\n{\n    float cx = floor(h.x/(s.x/sz.x));\n    float cy = floor(h.y/(s.y/sz.y));\n    return cy*sz.x+cx;\n}\n//--------\nvoid mainImage( out vec4 Out, in vec2 fragCoord ){\n    vec2 s = iResolution.xy;\n    vec2 g = fragCoord.xy;\n    vec2 uv = (2.*g-s)/s.y;\n    vec2 m = iMouse.xy;\n  \tvec3 c=iMouse.z>0.? vec3(getCell(s, iMouse.xy).z,PI*(2.*fragCoord-s)/(s.y)):getSmallCells(s,fragCoord);\n\n    vec2 res = s / gridSize;\n    if(iMouse.z>0.) \n    {\n        c.x = EncID(s,m,gridSize);\n        c.yz = g;\n        res = iResolution.xy;\n    }\n    \n \tOut = func(c.x,c.yz, res);\n}\n//--------\n","name":"Image","description":"","type":"image"}]}