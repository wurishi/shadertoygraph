{"ver":"0.1","info":{"id":"WsKcDz","date":"1602608839","viewed":299,"name":"INKTtober - Flower","username":"Flopine","description":"Seventh day of the Inktober challenge! For 2020 I'm using the Inkt-Tober list: https://twitter.com/Trish_Argh/status/1304878524797419525","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["3d","animation","glitch","isometric","undertale","inktober"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan and slerpy for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  https://twitter.com/CookieDemoparty\n\n\n#define PI acos(-1.)\n#define TAU 6.283185\n\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n#define lrep(p,c,l) p=p-c*clamp(round(p/c),-l,l)\n#define moda(p,rep) float a=mod(atan(p.y,p.x),TAU/rep)-(TAU/rep)*0.5;p=vec2(cos(a),sin(a))*length(p) \n\n#define dt(speed) fract(iTime*speed)\n#define switanim(speed) floor(sin(dt(speed)*TAU)+1.)\n\nstruct obj\n{\n    float d;\n    vec3 color;\n};\n\nobj minobj (obj a, obj b)\n{\n    if (a.d < b.d) return a;\n    else return b;\n}\n    \nfloat box (vec3 p, vec3 c)\n{return length(max(abs(p)-c,0.));}\n\nfloat cyl (vec3 p, float r, float h)\n{return max(length(p.xy)-r, abs(p.z)-h);}\n\nobj ground (vec3 p)\n{\n    vec2 id = round(p.xz/.5)-.5;\n    lrep(p.xz, 0.5,5.);\n    float d = box(p,vec3(.2));\n    \n    return obj(d,clamp(vec3(length(id*0.4)*0.8,1.,length(id*0.1)),0.,1.));\n}\n\nfloat line (vec2 uv, vec2 a, vec2 b, float r, bool s)\n{\n    vec2 pa = uv - a, ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    if (s) return length(pa - ba*h) - r;\n    else return length(pa - ba*h) - r*h*0.5; \n}\n\nfloat face (vec2 uv)\n{\n    vec2 uu = uv;\n    uv.x = abs(uv.x) -0.5;\n    uv.y -= 0.3; \n    float m = smoothstep(0.2,0.22,length(uv))+(1.-smoothstep(0.05,0.06, length(uv+vec2(0.,0.1))));\n    \n    uv = uu;\n    uv.y -= uv.x*uv.x*0.5;\n    float b = smoothstep(0.06,0.08,line(uv,vec2(-.5,-0.5),vec2(.5,-0.5),0.3,true));\n    m *= b;\n    \n    uv.y += 0.5;\n    uv.y = abs(uv.y)+0.05;\n    uv.x = abs(abs(abs(uv.x)-0.4)-.2)-0.1;\n    float d =  smoothstep(0.01,0.011, line(uv,vec2(0.,0.1),vec2(0.,0.42), 0.15,false));\n    m += (1.-d);\n    \n    return clamp(m,0.,1.);\n}\n\nobj flowey (vec3 p)\n{\n    float sy = 1.;\n    float sxz = 1./sy;\n    vec3 new_size = vec3(sxz,sy,sxz);\n    p *= new_size;  \n    p.y -= 0.9;\n    \n    vec3 pp = p;\n    \n    p.x += sin(p.y*3.)*0.1;\n    float sd = cyl(p.xzy, 0.08-p.y*0.05, 0.8);\n    obj stem = obj(sd,vec3(0.1,0.8,0.2)); \n    \n    p = pp;\n    p.y -= 1.;\n    p.x += 0.3;\n    p.xy *= rot(PI/4.);\n    vec2 puv = p.xz*rot(-PI/2.); \n    float ps = cyl(p.xzy, 0.3,length(p.xz*0.3)*0.2);\n    vec3 pcol = (switanim(1.) <= 0.) ? vec3(1.)*face(puv*3.5):vec3(1.);\n    obj pistil = obj(ps, pcol);\n    \n    moda(p.xz,6.);\n    p.x -= 0.49;\n    float pes = box(p,vec3(0.2,0.03-p.x*0.25,0.1-sin(p.x*TAU*2.)*0.05));\n    obj petal = obj(pes,vec3(0.9,0.7,0.));\n    \n    obj flowey = minobj(stem,pistil);\n    flowey = minobj(flowey,petal);\n    \n    flowey.d /= length(new_size);\n    \n    return flowey;\n}  \n\nobj SDF (vec3 p)\n{\n    p.yz *= rot(-atan(1./sqrt(2.)));\n    p.xz *= rot(PI/4.);\n\t\n    obj scene = ground(p);\n    scene = minobj(scene, flowey(p));\n    return scene;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n\n    float detail = sin(dt(1.)*TAU)*70.-75.;\n    uv.y = floor(uv.y*detail)/detail;\n    \n    vec3 ro = vec3(uv*2.8,-50.), rd = vec3(0.,0.005,1.), p = ro, col = vec3(0.);\n    bool hit = false;\n    float shad; obj O;\n    for (float i=0.; i<64.;i++)\n    {\n        O = SDF(p);\n        if (O.d<0.001)\n        {\n            hit = true; shad = i/64.; break;\n        }\n        p += O.d*rd;\n    }\n\n    if (hit)\n    {\n        col = O.color;\n        col *= (1.-shad);\n    }\n    \n    fragColor = vec4(sqrt(col),1.0);\n}","name":"Image","description":"","type":"image"}]}