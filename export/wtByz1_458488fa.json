{"ver":"0.1","info":{"id":"wtByz1","date":"1593704315","viewed":198,"name":"golden ratio sphere","username":"madware","description":"spherical variant of a shader https://www.shadertoy.com/view/ttSyz1","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["goldenratio"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define NUM_SAMPLES 256.0\n#define USE_GOLDEN_RATIO\n\nfloat circle(in vec2 uv, in vec2 p, in float rad)\n{\n    vec2 puv = uv - p;\n    float rsquare = rad*rad;\n    return smoothstep(rsquare + 0.000005, rsquare - 0.000005, dot(puv, puv));\n}\n\nmat3 rotateAroundY(float a)\n{\n    float cs = cos(a);\n    float sn = sin(a);\n    return\n        mat3( cs, 0.0, -sn,\n              sn, 0.0,  cs,\n             0.0, 1.0, 0.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float pi = radians(180.0);\n    float aspect = iResolution.y / iResolution.x;\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.y *= aspect;\n\n    vec3 col = vec3(.5, .5, .5);\n    \n    mat3 rot = rotateAroundY(iTime / 3.0);\n    \n    for(float i = 0.0; i < NUM_SAMPLES; i += 1.0) {\n        float phi = acos(1.0 - 2.0 * (i + 0.5) / NUM_SAMPLES);\n        #ifdef USE_GOLDEN_RATIO\n            float theta = pi * (1.0 + sqrt(5.0)) * i;\n        #else\n            float theta = pi / 0.931 * i; // some interesting random ratio\n        #endif\n        float sphi = sin(phi);\n        vec3 p = vec3(\n            sphi * cos(theta), \n            sphi * sin(theta),\n            cos(phi)\n        );\n        p = rot * p;\n        p *= aspect / 2.0;\n        vec3 clr = vec3(1.0, 1.0, 1.0) * (1.0 - (p.z + 0.5) * 0.5);\n        p += vec3(0.5, 0.5 * aspect, 0.5);\n        float plot = circle(uv, p.xy, 0.0025);\n        col = mix(col, clr, plot * 0.75);\n    }\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}