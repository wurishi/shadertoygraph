{"ver":"0.1","info":{"id":"cdlcRf","date":"1687052050","viewed":329,"name":"Xor's Fast Sort 2D","username":"Xor","description":"Here's my first attempt at a pixel-sorting algorithm. Sorts just the red and green channels","likes":9,"published":1,"flags":32,"usePreview":0,"tags":["colors","pixel","sort"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n    Algorithim in Buffer A\n*/\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 texel = 1.0 / iResolution.xy;\n    vec2 uv = fragCoord * texel;\n\n    fragColor = texture(iChannel0,uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/*\n    This, but in 2 axes similatenously: https://www.shadertoy.com/view/cdlyzX\n    Sorts in powers of 2: 1, 2, 4, 8... up past resolution\n    Every other frame flips between positive or negative sorting\n    Takes 38 frames at 1080p.\n*/\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 res = iResolution.xy;\n    vec2 texel = 1.0 / res;\n    vec2 uv = fragCoord * texel;\n    \n    vec4 tex = texture(iChannel1,fragCoord*texel);\n    \n    int rate = int(iFrameRate);\n    int steps = int(log2(res));\n    int f = ((iFrame % (rate*4))-steps);\n    \n    float off = float(1<<steps-f/4%steps)-1.0;\n    vec2 o = off * sign(mod(fragCoord+float(f),2.0)-1.0);\n    \n    vec2 p0 = fragCoord;\n    vec2 p1 = mod(vec2(fragCoord.x+o.x,fragCoord.y), res);\n    vec2 p2 = mod(vec2(fragCoord.x,fragCoord.y+o.y), res);\n    \n    vec4 sort0 = texture(iChannel0, p0 * texel);\n    vec4 sort1 = texture(iChannel0, p1 * texel);\n    vec4 sort2 = texture(iChannel0, p2 * texel);\n    \n    vec4 col = (sort0 - sort1).r * (p0-p1).x>0.? sort0: sort1;\n    col =      (col   - sort2).g * (p0-p2).y>0.? col  : sort2;\n    \n    fragColor = f<0? tex : col;\n}","name":"Buffer A","description":"","type":"buffer"}]}