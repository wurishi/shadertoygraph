{"ver":"0.1","info":{"id":"mlscz8","date":"1690430558","viewed":1445,"name":"2-Tap flow with less shifting","username":"Suslik","description":"A demo for the flowmaps section of my ExileCon 2023 talk","likes":14,"published":1,"flags":0,"usePreview":0,"tags":["tiling","texturing","bombing"],"hasliked":0,"parentid":"WdVGWG","parentname":"Fix mip texture tiling 2 taps"},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float layersCount = 5.0;\nconst float pi = 3.141592f;\n\n\nstruct InterpNodes2\n{\n    vec2 seeds;\n    vec2 weights;\n    vec2 phases;\n};\n\nInterpNodes2 GetNoiseInterpNodes(float smoothNoise)\n{\n    vec2 globalPhases = vec2(smoothNoise * 0.5) + vec2(0.5, 0.0);\n    vec2 phases = fract(globalPhases);\n    vec2 seeds = floor(globalPhases) * 2.0 + vec2(0.0, 1.0);\n    vec2 weights = min(phases, vec2(1.0f) - phases) * 2.0;\n    return InterpNodes2(seeds, weights, phases);\n}\n\nvec2 GetVelocity(vec2 pos)\n{\n    float aspect = iResolution.y / iResolution.x;\n    vec2 diff0 = pos - vec2(0.2, 0.5 * aspect);\n    vec2 diff1 = pos - vec2(0.8, 0.5 * aspect);\n    \n    float charge0 = -0.0005;\n    float charge1 = -0.0005;\n    \n    float eps = 0.01;\n    return \n        normalize(diff0) * charge0 / (dot(diff0, diff0) + eps) +\n        normalize(diff1) * charge1 / (dot(diff1, diff1) + eps);\n}\n\nvec3 hash33( vec3 p )\n{\n\tp = vec3( dot(p,vec3(127.1,311.7, 74.7)),\n\t\t\t  dot(p,vec3(269.5,183.3,246.1)),\n\t\t\t  dot(p,vec3(113.5,271.9,124.6)));\n\n\treturn fract(sin(p)*43758.5453123);\n}\n\nvec4 GetTextureSample(vec2 pos, float freq, float seed)\n{\n    vec3 hash = hash33(vec3(seed, 0.0, 0.0));\n    float ang = hash.x * 2.0 * pi;\n    mat2 rotation = mat2(cos(ang), sin(ang), -sin(ang), cos(ang));\n    \n    vec2 uv = rotation * pos * freq + hash.yz;\n    return texture(iChannel0, uv);\n}\n\nvec3 hsv2rgb( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.x;\n    \n    float texFreq = 10.0;\n    float tileFreq = 20.0;\n    \n    fragColor = vec4(0.0f);\n    \n    float phaseNoise = 0.0f;\n    if(fragCoord.x < iResolution.x / 2.0f)\n    {\n        phaseNoise = 2.0f * (texture(iChannel1, uv * 0.05f).r - 0.5f);\n    }\n    int harmonicsCount = 2;\n    if(fragCoord.y < iResolution.y / 2.0f)\n    {\n        harmonicsCount = 1;\n    }\n    InterpNodes2 interpNodes = GetNoiseInterpNodes(phaseNoise + iTime);\n    interpNodes.phases -= vec2(phaseNoise * 0.5f); //this compensates for warping when phase noise interferes with velocity\n    float moment2 = 0.0;\n    for(int i = 0; i < harmonicsCount; i++)\n    {\n        float weight = interpNodes.weights[i];\n        moment2 += weight * weight;\n        fragColor += GetTextureSample(uv + GetVelocity(uv) * (interpNodes.phases[i] - 0.5f) * 2.0f, texFreq, interpNodes.seeds[i]) * weight;\n    } \n}","name":"Image","description":"","type":"image"}]}