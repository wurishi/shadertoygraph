{"ver":"0.1","info":{"id":"XcdGzS","date":"1711996289","viewed":121,"name":"Path Draw","username":"incre_ment","description":"A simple animation using the line and circle SDFs.","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["sdf","line","circle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define rotation(angle) mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n\nfloat PI = 3.14159;\nfloat TAU = 2.*3.14159;\n\n// line SDF learned from IQ.\nfloat lineSeg( in vec2 p, in vec2 pointA, in vec2 pointB )\n{\n    vec2 ba = pointB - pointA;\n    vec2 pa = p - pointA;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length(pa-h*ba);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec2 uv = ( fragCoord - .5* iResolution.xy ) /iResolution.y;\n   vec3 col = vec3(0.);\n   \n   float tt = fract(.2*iTime);\n   \n   // Try different values here for different variations.\n   float numPts = 5.;\n\n   for (float i = 0.; i < numPts; i++){\n     float offset = TAU*(tt+i/numPts);\n     \n     // rotate uv space, calculate SDFs, rotate back.\n     uv *= rotation(i*TAU/numPts);\n     float ls = lineSeg(uv, vec2(0.,.35*sin(offset)), vec2(0,-.35)) - .055;\n     float cc = length(uv - vec2(0.,.35*sin(offset))) - .055;\n     float ls2 = lineSeg(uv, vec2(0.,.35*sin(offset)), vec2(0,-.35));   \n     uv *= rotation(-i*TAU/numPts);\n     \n     col += .0018/abs(ls);\n     col += .001/ls2;\n     \n     float w = 2./iResolution.y;\n \n     // Two different options, here.  I like both.\n     // col += .002/abs(cc);\n     col += smoothstep(w,-w,cc);\n   }\n   fragColor = vec4(col,1.0);\n} ","name":"Image","description":"","type":"image"}]}