{"ver":"0.1","info":{"id":"lXdSDl","date":"1719896794","viewed":73,"name":"Burn-Dissolve Shader w/ Outlines","username":"Mirza","description":"Dissolve shader tutorial example with edge warping, burn, and outlines.\nBased off FFX-2 opening menu credits dissolve.\n\n> https://x.com/TheMirzaBeig/status/1807700999970189645","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["shader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Author: Mirza Beig\n\n// https://x.com/TheMirzaBeig\n// https://www.youtube.com/@MirzaBeig\n\n// Feel free to use this however you want.\n// Modify, learn from it, copy-paste, etc...\n\n// Make sure to click the viewport and move your mouse left/right across the screen.\n\n// Variables use descriptive names- things should be self-explanatory for the most part.\n// Compact version (which I made after): https://www.shadertoy.com/view/43yXRz\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalized pixel coordinates [0.0, 1.0].\n    \n    vec2 uv = fragCoord / iResolution.xy;\n        \n    // Normalized mouse coordinates [0.0, 1.0].\n    \n    vec2 mouse = iMouse.xy / iResolution.xy;\n    \n    // 1. Noise.\n    \n    float noiseScale = 0.5;    \n    vec2 noiseUV = uv * noiseScale;\n    \n    vec2 noiseUVAnimation = vec2(0.01, 0.02) * iTime;\n    \n    noiseUV -= noiseUVAnimation;\n    \n    float noise = texture(iChannel1, noiseUV).r;\n    \n    // 2. Step/cutoff (generate mask[s]).\n    \n    float binaryNoiseMaskOutlineWidth = 0.05;\n    \n    float edgeBurn = 0.4;\n    float edgeDistortion = 0.2;\n    \n    // Cutoff range is [-outlineWidth, 1.0].\n    \n    float noiseCutoff = mix(-edgeBurn, 1.0, mouse.x);    \n    float binaryNoiseMask = clamp(step(noiseCutoff, noise), 0.0, 1.0);\n    \n    float binaryNoiseMaskSmaller = step(noiseCutoff + binaryNoiseMaskOutlineWidth, noise);    \n    float binaryNoiseMaskOutline = clamp(binaryNoiseMask - binaryNoiseMaskSmaller, 0.0, 1.0);\n        \n    float epsilon = 0.1; // Gradient radius.\n    \n    vec2 noiseGradient = vec2(\n    \n        texture(iChannel1, noiseUV + vec2(epsilon, 0.0)).r - texture(iChannel1, noiseUV - vec2(epsilon, 0.0)).r,\n        texture(iChannel1, noiseUV + vec2(0.0, epsilon)).r - texture(iChannel1, noiseUV - vec2(0.0, epsilon)).r\n    );\n    \n    \n    float edgeBurnMask = 1.0 - smoothstep(noiseCutoff + edgeBurn, 0.0, noise);\n    float edgeDistortionMask = smoothstep(clamp(noiseCutoff + edgeDistortion, 0.0, 1.0), 0.0, noise);\n    \n    vec2 edgeDistortionUV = noiseGradient * edgeDistortionMask;\n        \n    // 3. Alpha.    \n    \n    vec4 textureColour = texture(iChannel0, uv - edgeDistortionUV);\n    \n    textureColour.rgb *= edgeBurnMask;\n    float outputAlpha = textureColour.a * binaryNoiseMask;\n        \n    // No alpha on Shadertoy.\n    // Apply alpha to RGB, which will darken it.\n    \n    vec3 outputRGB = textureColour.rgb * outputAlpha; \n    \n    // Output.\n    \n    vec3 outlineColour = vec3(1.0, 0.8, 0.0);\n    \n    outputRGB = mix(outputRGB, outlineColour, binaryNoiseMaskOutline);\n    vec4 outputColour = vec4(outputRGB, outputAlpha);    \n        \n    fragColor = outputColour;\n}","name":"Image","description":"","type":"image"}]}