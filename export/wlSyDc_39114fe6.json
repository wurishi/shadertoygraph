{"ver":"0.1","info":{"id":"wlSyDc","date":"1595545643","viewed":64,"name":"roof tiles?","username":"miko3k","description":"procedurel roof tiles","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["procedural","texture","pattern","sinewave","tiles"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n#define PERIOD 0.3\n\nfloat rand2(vec2 co) { return fract(sin(dot(co, vec2(12.9898,78.233))) * 43758.5453); }\nvec3 rand23(vec2 x)\n{\n\tvec3 y = vec3(\n      dot(x,vec2(127.1,311.7)),\n\t\t\tdot(x,vec2(269.5,183.3)),\n\t\t\tdot(x,vec2(113.5,271.9))\n  );\n\n\treturn fract(sin(y)*43758.5453123);\n}\n\nfloat edge(float thickness, float value) {\n    return 1.0-smoothstep(0.0,thickness/2.0,value)+smoothstep(1.0-thickness/2.0,1.0,value);\n}\n\n\nvec4 oneTile(vec2 where, vec2 which) {\n    float baseColor = rand2(which);\n    float start = PERIOD-abs(sin(where.x*PI))*PERIOD;\n    \n    float blackH = edge(0.1, where.x);\n    float colorH = 1.0 - blackH;\n    float colorV = smoothstep(start+0.1, start+0.2, where.y);\n    float visiblity = smoothstep(start, start+0.1, where.y);\n    \n    vec3 color = vec3(1.0,0.2,0.2)+rand23(which)*0.2;\n    \n    return vec4(\n        color * colorH * colorV,\n        visiblity\n    );\n    \n\n    \n}\n\n\nvec4 tiledTiles(vec2 uv) {\n    float oddRow = step(1.0, mod(uv.y, 2.0));\n    uv.x += oddRow * 0.5;\n\n    vec2 where = fract(uv);\n    vec2 which = floor(uv);\n    \n    vec2 underWhere = vec2(\n        fract(where.x+0.5),\n        1.0 + where.y\n    );\n    vec2 underWhich = vec2(\n        which.x + 1.0 - step(where.x, 0.5) - oddRow,\n        which.y - 1.0\n    );\n    \n    vec4 a = oneTile(where, which); \n    vec4 b = oneTile(underWhere, underWhich); \n    \n    return vec4(a.a)*a + (1.0-a.a)*b;\n    \n}\n\nvec4 untiledTiles(vec2 uv) { \n    uv.y /= 2.0;\n    \n    vec2 where = fract(uv);\n    vec2 which = floor(uv);\n    where.y *= 2.0;\n    return oneTile(where, which);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.y;\n    uv *= 1.0 + sin(iTime) * 0.2;\n    uv += iTime/6.0;\n    uv *= 5.0;\n    \n    fragColor = tiledTiles(uv);\n\n}\n","name":"Image","description":"","type":"image"}]}