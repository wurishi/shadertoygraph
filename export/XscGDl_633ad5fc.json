{"ver":"0.1","info":{"id":"XscGDl","date":"1452630709","viewed":179,"name":"fractal[wip]","username":"stduhpf","description":"wip\nfirst time I use orbit traps\n\nupdate: now with my monte carlo anti aliasing","likes":5,"published":1,"flags":32,"usePreview":0,"tags":["2d","fractal","orbittraps"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Check Buf A to see and edit the code :)\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = vec4(texture(iChannel0,uv));\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define ratio .97\n\nconst int n = 128;// number of iterations\n\n\nvec2 mulc(vec2 a, vec2 b)\n{\n return vec2(a.x*b.x-a.y*b.y,a.x*b.y+a.y*b.x);   \n}\n\nfloat manathdist(vec2 a, vec2 b)\n{\n return abs(a.x-b.x)+abs(a.y-b.y);\n}\n\nfloat chessdist (vec2 a, vec2 b)\n{\n return max(abs(a.x-b.x),abs(a.y-b.y));\n}\nfloat hash( float n )\n{\n    return (fract(sin(n)*43758.5453)-.5);\n}\nfloat scale=1.;\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor=texture(iChannel0,fragCoord/iResolution.xy)*ratio;\n       fragCoord.xy+=vec2(hash(iDate.w+fragCoord.x),hash(fragCoord.y-iDate.w));\n\n    float mx = max(iResolution.x,iResolution.y);\n\tvec2 uv = fragCoord.xy / mx;\n    vec2 um = iMouse.xy / mx;\n \n    \n    vec2 c = (uv*4.- vec2(2.,1.1))/*/(iTime*iTime)+vec2(-.747,.2101) */; //replace uv with um for julia set\n    vec2 piege=(um*4.- vec2(2,1.1))*scale ;\n    vec2 z = (uv*4.- vec2(2.,1.1));\n    float j =0.;\n    float dist = 100.;\n    for (int i=0;i<n;i++)\n    {\n        z = mulc(z,z)+c;\n        if((z.x*z.x+z.y*z.y)>4.)j=float(i);\n\t\t\n        \n        //Orbit traps\n        \n        float trap = distance(z,piege);      //first orbit trap\n        //float trap = manathdist(z,piege);      //in mannathan geometry\n         //float trap = chessdist(z,piege);      //in chessboard geometry\n        //float trap = sqrt(dot(z,piege)); //other orbit trap.look wierd with the default fragColor\n        //float trap = (normalize(z-piege).x); // another\n        \n        \n        if(trap<dist)dist=trap;\n    }\n    // use with the second trap\n  /*  \n    if(dist<=.1)dist=1.;\n    else dist=0.;\n  */  \n    //colors\n    vec4 color=vec4(0.);\n\tcolor =vec4((2.-length(c))*vec3(sin(10.4*dist),sin(10.*dist),sin(9.6*dist)),1.0);\n    //color =  vec4(dist);\n    //color = vec4(sin(10.*dist)+.25*cos(10.*dist),cos(10.*dist),.5*sin(10.*dist),1.);\n    fragColor += (1.-ratio)*clamp(color,0.,1.);\n}","name":"Buf A","description":"","type":"buffer"}]}