{"ver":"0.1","info":{"id":"Xcccz8","date":"1730210185","viewed":82,"name":"combination of three","username":"nayk","description":"source from glslsandbox","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["cube","sphere","rotate","hexagon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define rot(a) mat2(cos(a), sin(a), -sin(a), cos(a))\n#define time iTime\n#define resolution iResolution.xy\nfloat sdHexagon(in vec2 p, in float r) {\n\tconst vec3 k = vec3(-0.866025404, 0.5, 0.577350269);\n\tp = abs(p);\n\tp -= 2.0 * min(dot(k.xy, p), 0.0) * k.xy;\n\tp -= vec2(clamp(p.x, -k.z * r, k.z * r), r);\n\treturn length(p) * sign(p.y);\n}\n\nfloat map(vec3 p) {\n\tfloat sdf2d = sdHexagon(p.xy, 0.8);\n\treturn sdHexagon(vec2(sdf2d, p.z), 0.3);\n}\n#define rot(a) mat2(cos(a), sin(a), -sin(a), cos(a))\n#define EPS 0.0001\n\nvec3 lightDir = normalize(vec3(4.,4., 1));\n\nfloat dRing(vec3 p, float exR, float inR, float thick){\n\tp.xz*=rot(iTime);\n\tfloat sdf2d = abs(length(p.xy)-exR)-inR;\n\tfloat d = abs(p.z)-thick;\n\treturn max(sdf2d, d);\n}\nfloat map3(vec3 p){\n\tfloat j = 0.25;\n   vec3 p2=p;\n    vec3 p3=p;\n\tp.xz*=rot(iTime);\n    p2.xz*=rot(iTime*0.7);\n        p3.xz*=rot(iTime*0.4);\n\tfloat ring1 = dRing(p, .9, .1, .1);\n\tfloat ring2 = dRing(p2, .6, .1, .1);\n\tfloat ring3 = dRing(-p3, .3, .1, .1);\n\treturn min(ring1, min(ring2, ring3));\n}\n\nvec3 getNormal(vec3 p){\n\treturn normalize(vec3(\n\t\tmap(p)-map(vec3(p.x-EPS, p.yz)),\n\t\tmap(p)-map(vec3(p.x, p.y-EPS, p.z)),\n\t\tmap(p)-map(vec3(p.xy, p.z-EPS))\n\t\t));\n}\n#define rot(a) mat2(cos(a), sin(a), -sin(a), cos(a))\n#define sabs(p) sqrt(p * p + 1e-2)\n\nvec2 sfold(vec2 p) {\n\tvec2 v = normalize(vec2(1, -1));\n\tfloat g = dot(p, v);\n\treturn p - (g - sabs(g)) * v;\n}\n\nfloat map5(vec3 p, vec3 b, float e) {\n\tp.xy *= rot(time * 0.5);\n\tp.xz *= rot(time * 0.5);\n\tp.yz *= rot(time * 0.5);\n\tp = abs(p)-b;\n\tvec3 q = abs(p+e)-e;\n\treturn min(min(\n\t\tlength(max(vec3(p.x,q.y,q.z),0.0))+min(max(p.x,max(q.y,q.z)),0.0),\n\t\tlength(max(vec3(q.x,p.y,q.z),0.0))+min(max(q.x,max(p.y,q.z)),0.0)),\n\t\tlength(max(vec3(q.x,q.y,p.z),0.0))+min(max(q.x,max(q.y,p.z)),0.0));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = (gl_FragCoord.xy - 0.5 * resolution) / resolution.y;\n\tvec3 rd = normalize(vec3(uv, 1));\n\tfloat screenZ = 3.0;\n\tvec3 p = vec3(0, 0, -screenZ);\n\tfor (int i = 1; i < 100; i++) {\n\t\tfloat d = map(p);\n\t\tp += rd * d;\n\t\tif (d < 0.001) {\n\t\t\tfragColor = vec4(vec3(screenZ / float(i)), 1);\n\t\t}\n        \n\t}\n    vec2 uv3 = (gl_FragCoord.xy - 0.5 * resolution) / resolution.y;\n\tvec3 rd3 = normalize(vec3(uv3, 1));\n\tfloat screenZ3 = 3.0;\n\tvec3 p3 = vec3(0, 0, -screenZ3);\n\tfor (int i = 1; i < 50; i++) {\n\t\tfloat d3 = map5(p3,vec3(1.),0.1);\n\t\tp3 += rd3 * d3;\n\t\tif (d3 < 0.001) {\n\t\t\tfragColor = vec4(vec3(screenZ3 / float(i)), 1);\n\t\t\tbreak;\n\t\t}\n\t}\n    \n    vec2 uv2 = (gl_FragCoord.xy*2.-resolution.xy)/min(resolution.x, resolution.y);\n\tvec3 col2 = vec3(0.1,0,2.);\n\tvec3 ro2 = vec3(0.,5,5.);\n\tvec3 rd2 = normalize(vec3(uv2, 0)-ro2);\n\tvec3 cur2 = ro2;\n\n\tfor(int i = 0; i <99;i++){\n\t\tfloat d2 = map3(cur2);\n\t\tif(d2< EPS){\n\t\t\tvec3 normal2 = getNormal(cur2);\n\t\t\tcol2 = vec3(5.6, .68, .8);\n\t\t\tcol2+= dot(normal2, lightDir)+vec3(.1);\n\t\t}\n\t\tcur2 += rd2*d2;\n\t}\n    \tfragColor*= vec4(col2, 1);\n}\n","name":"Image","description":"","type":"image"}]}