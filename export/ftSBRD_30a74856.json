{"ver":"0.1","info":{"id":"ftSBRD","date":"1651823237","viewed":65,"name":"Flower Shape","username":"YUIT","description":"Some simple shape transition","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["2d","flower","procedual"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Use mouse to change shape\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = texelFetch(iChannel0, ivec2(fragCoord), 0).rgb;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define USE_ADD 1\n#define USE_SUB 0\n#define USE_DIV 0\n#define USE_MUL 0\n\n#define PI 3.1415926\n\nfloat sdfSphere(vec2 p, float r)\n{\n    return length(p)-r;\n}\n\nvec2 polarToCartisian(float r, float theta)\n{\n    return vec2(r*cos(radians(theta)), r*sin(radians(theta)));\n}\n\nvec2 cartisianToPolar(vec2 p)\n{\n    return vec2(sqrt(dot(p,p)), atan(p.y,p.x));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy - .5;\n    uv.x*=iResolution.x/iResolution.y;\n    uv *= 2.;\n    float sph = 1.-smoothstep(0.01, 0.91, sdfSphere(uv, 0.01));\n    float theta = atan(uv.y,uv.x);\n    vec2 coord = polarToCartisian(abs(sin(floor(iMouse.y/iResolution.y*5.)*theta+PI*iTime*0.15)), theta);\n    coord = cartisianToPolar(coord);\n    float g = coord.x-sqrt(dot(uv,uv));\n    float val = mix(\n        min(sph, g),\n        max(sph, g),\n        iMouse.x/iResolution.x\n    );\n/*\n#if USE_ADD || USE_SUB || USE_MUL || USE_DIV\n    val = max(sph,g)\n#elif USE_ADD\n    +min(sph,g);\n#elif USE_SUB    \n    -min(sph,g);\n#elif USE_MUL\n    *min(sph,g);\n#elif USE_DIV\n    /min(sph,g);\n#endif\n*/\n    vec3 col = vec3(val);\n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}