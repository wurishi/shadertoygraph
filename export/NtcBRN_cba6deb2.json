{"ver":"0.1","info":{"id":"NtcBRN","date":"1662720272","viewed":97,"name":"Balls and Light","username":"Renslay","description":"A normal mapping of balls with Phong reflection. Left click anywhere to change the position of the light source.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["normalmapping","phongreflection"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n#define BALLNUM 8\n\nvec3 calcNorm(vec2 p, float[BALLNUM] rs, vec2[BALLNUM] cs)\n{\n    float z0 = 0.0;\n    vec3 norm0 = vec3(0.0, 0.0, 1.0);\n    for (int i = 0; i < BALLNUM; ++i)\n    {\n        float r = rs[i];\n        vec2 c = cs[i];\n        if (distance(p, c) <= r)\n        {\n            float z = sqrt(r*r - (p.x-c.x)*(p.x-c.x) - (p.y-c.y)*(p.y-c.y));\n            if (z > z0)\n            {\n                z0 = z;\n                norm0 = normalize(vec3(p-c, z));\n            }\n        }\n    }\n    return norm0;\n}\n\nfloat angle(vec3 v1, vec3 v2)\n{\n    return clamp(dot(v1, v2), 0.0, 1.0);\n}\n\nbool isBall(vec2 p, float[BALLNUM] rs, vec2[BALLNUM] cs)\n{\n    for (int i = 0; i < BALLNUM; ++i)\n    {\n        if (distance(p, cs[i]) <= rs[i])\n            return true;\n    }\n    return false;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // light parameters\n    vec2 mouse = (2.0*iMouse.xy - iResolution.xy) / iResolution.y;\n    vec3 lightPos = vec3(mouse.x, mouse.y, 1.0);\n    if(iMouse.z > 0.0)\n        lightPos = vec3(mouse.x, mouse.y, 1.0);\n        \n    float lightRad = 0.05;\n    vec3 camDir = normalize(vec3(0.0, 0.0, 1.0));\n    \n    vec3 ballColor = vec3(0.8, 0.8, 1.0);\n    vec3 bgrColor = vec3(1.0, 1.0, 1.0);\n    vec3 lightColor = vec3(1.0, 1.0, 0.7);\n        \n    // ball parameters\n    float fx = 6.0*PI;\n    float fy = 6.0;\n    vec2[BALLNUM] ballPoss;\n    float[BALLNUM] ballRadii;\n    for (int i = 0; i < BALLNUM; ++i)\n    {\n        float d = float(i) / 2.0;\n        ballPoss[i] = vec2(0.8*cos((iTime+d)*2.0*PI/fx), 0.8*cos((iTime+d)*2.0*PI/fy));\n        ballRadii[i] = 0.1 + float(i)*0.01;\n    }\n    \n    // material constants\n    float ka = 1.0;\n    float kd = 0.5;\n    float ks = 0.3;\n    float a = 5.0;\n    \n    // source intensity\n    float ia = 0.2;\n    float id = 1.0;\n    float is = 1.0;\n    \n    // normalized pixel coordinates (from -1 to 1)\n    vec2 pos = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n    \n    // light calculations\n    vec3 lightDir = normalize(lightPos - vec3(pos, 0.0));\n    vec3 norm = calcNorm(pos, ballRadii, ballPoss);\n    vec3 reflectDir = 2.0 * angle(lightDir, norm) * norm - lightDir;\n    \n    float ambientLight = ka * ia;\n    float diffuseLight = kd * angle(lightDir, norm) * id;\n    float specularLight = ks * pow(angle(reflectDir, camDir), a) * is;\n    float sumLight = ambientLight + diffuseLight + specularLight;\n    \n    vec3 color = isBall(pos, ballRadii, ballPoss) ? ballColor : bgrColor;\n    \n    // output to screen\n    if (distance(pos, lightPos.xy) < lightRad)\n        fragColor = vec4(lightColor, 1.0);\n    else\n        fragColor = vec4(sumLight * color,1.0);\n}","name":"Image","description":"","type":"image"}]}