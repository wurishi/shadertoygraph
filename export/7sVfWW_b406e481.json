{"ver":"0.1","info":{"id":"7sVfWW","date":"1658404291","viewed":125,"name":"rgb color circles","username":"Mojomajor","description":" some glowing morphing circles ","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["circlesrgb"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define time iTime *.5\n#define tau 6.2831853\n\nstruct Setting {\n  float thickness;\n  float clampmin;\n  float clampmax;\n};\nSetting stThin = Setting(0.01, 0.01, 0.99);\nSetting stFull = Setting(0.04, 0.01, 0.99);\nSetting stDunno = Setting(0.001, 0.0004, 0.99);\n\n    \nfloat random (in vec2 _st) {\n            return 1.;sin(time);fract(sin(dot(_st.xy,\n                                vec2(12.9898*sin(time),78.233)))*\n                43758.5453123);\n        }\nfloat noise (in vec2 _st) {\n            vec2 i = floor(_st);\n            vec2 f = fract(_st);\n\n            // Four corners in 2D of a tile\n            float a = random(i);\n            float b = random(i + vec2(1.0, 0.0));\n            float c = random(i + vec2(0.0, 1.0));\n            float d = random(i + vec2(1.0, 1.0));\n\n            vec2 u = f * f * (3.0 - 2.0 * f);\n\n            return mix(a, b, u.x) +\n                    (c - a)* u.y * (1.0 - u.x) +\n                    (d - b) * u.x * u.y;\n        }\nmat2 makem2(in float theta){float c = cos(theta);float s = sin(theta);return mat2(c,-s,s,c);}\nfloat fbm(in vec2 p)\n{\t\n\tfloat z=2.;\n\tfloat rz = 0.;\n\tvec2 bp = p;\n\tfor (float i= 1.;i < 6.;i++)\n\t{\n\t\trz+= abs((noise(p)-0.5)*2.)/z;\n\t\tz = z*2.;\n\t\tp = p*2.;\n\t}\n\treturn rz;\n}\n\nfloat dualfbm(in vec2 p)\n{\n    //get two rotated fbm calls and displace the domain\n\tvec2 p2 = p*.1;\n\tvec2 basis = vec2(fbm(p2-time*1.2),fbm(p2+time*1.38));\n\tbasis = (basis-.5)*.2;\n\tp += basis;\n\t\n\t//coloring\n\treturn fbm(p*makem2(time*0.2));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    Setting stDefault = stDunno;//stThin;\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    // center 0\n    uv.x -= 0.25;\n    //uv*=10.;\n    //uv.y -= 0.25;\n    // aspect fix\n    uv.x *= iResolution.x/iResolution.y;\n    float _sin1 = sin(time)*0.5+0.5;\n    float _cos1 = cos(time)*0.5+0.5;\n\n    // polar coordinates\n    vec2 st = vec2(atan(uv.x,uv.y*fbm(uv)), length(uv));\n    \n    vec2 coord = uv*fbm(uv);//mix(st,uv,_sin1*_cos1);\n    vec3 color = vec3(.0);\n    vec2 translate = vec2(-0.5);\n    coord += translate;\n\n    color.r += abs(0.1 + length(coord) - 0.6 * abs(sin(time * 0.9 / 12.0)));\n    color.g += abs(0.1 + length(coord*sin(time)) - 0.6 * abs(sin(time * 0.6 / 4.0)));\n    color.b += abs(0.1 + length(coord*cos(time)) - 0.6 * abs(sin(time * 0.3 / 9.0)));\n\n    color.r=clamp(color.r,stDefault.clampmin,stDefault.clampmax);\n    color.g=clamp(color.g,stDefault.clampmin,stDefault.clampmax);\n    color.b=clamp(color.b,stDefault.clampmin,stDefault.clampmax);\n    vec3 col = 0.5001 + 0.5*cos(time*2.+uv.xyx+vec3(.0,2.,4.));\n    \n    color.rgb *= col;\n    fragColor = vec4(stDefault.thickness / color, 1.0);\n}","name":"Image","description":"","type":"image"}]}