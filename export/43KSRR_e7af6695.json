{"ver":"0.1","info":{"id":"43KSRR","date":"1723906687","viewed":40,"name":"Image Shift ","username":"mantoljak","description":"imageshift","likes":0,"published":1,"flags":2,"usePreview":0,"tags":["imageshift"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Marko Antoljak\n// Simple Image Shift (Animated and Static)\n\nconst float SHIFT_STRENGTH = 2.0;\nconst float SHIFT_RANGE = 0.003; // range in animation, use also for static \n\n// animation\nconst bool ANIMATED = true;\nconst float ANIMATION_SPEED = 0.5;\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    // Calculate time modulation based on the ANIMATED flag\n    float timeModulation = ANIMATED ? sin(iTime * ANIMATION_SPEED) * SHIFT_RANGE : SHIFT_RANGE;\n    vec2 shift = vec2(timeModulation, timeModulation) * SHIFT_STRENGTH;\n    \n    // Sample the original image\n    vec3 colorOriginal = texture(iChannel0, uv).rgb;\n    \n    // Sample the shifted images\n    vec3 colorShift1 = texture(iChannel0, uv + shift).rgb;\n    vec3 colorShift2 = texture(iChannel0, uv - shift).rgb;\n    \n    // Blend the original and shifted images\n    vec3 finalColor = (colorOriginal + colorShift1 + colorShift2) / 3.0;\n    \n    fragColor = vec4(finalColor, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}