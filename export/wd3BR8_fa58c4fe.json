{"ver":"0.1","info":{"id":"wd3BR8","date":"1604324624","viewed":272,"name":"Stylized 2D Flame.","username":"Ruzzyr","description":"A stylized flame. One evening worth of work. Inspired by the effects in the game Pyre. There is nothing mathematically amazing here and it is not optimized. Just tried to fit it into a few hours + achieve a certain artistic quality.","likes":5,"published":1,"flags":96,"usePreview":0,"tags":["flame","stylized","everyday","pyre"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n    //fragColor = fragColor + 0.2*mix(mix(vec4(0.24,0.43,0.5,1.), vec4(0.15,0.32,0.39, 1.)*0.1 ,  length(fragCoord.xy / iResolution.xy - 0.5)), fragColor, 1.-step(fragColor.r + fragColor.g + fragColor.b, 0.001));\n\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"MlS3Dd","filepath":"https://soundcloud.com/zaramoth/pyre-original-soundtrack-will-of-the-scribes","previewfilepath":"https://soundcloud.com/zaramoth/pyre-original-soundtrack-will-of-the-scribes","type":"musicstream","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float size = 50.;\nfloat flameSpeed = -7.;\n\nfloat pi = 3.1415;\nfloat sides = 11.;\nvec3 corlors1[5] = vec3[]\n(\n    vec3(0.698, 0.121, 0.121),   \n    vec3(0, 0, 0.274),\n    vec3(0.254, 0.160, 0.352),\n    vec3(0),\n    vec3(0.325, 0.203, 0.427)\n\n);\nvec3 corlors2[5] = vec3[]\n(\n    vec3(0.992, 0.733, 0.176),   \n    vec3(0.109, 0.709, 0.878),\n    vec3(0.184, 0.027, 0.262),\n    vec3(0.752, 0.141, 0.145),\n    vec3(0)\n\n);\nvec3 corlorsRim1[5] = vec3[]\n(\n    vec3(1),   \n    vec3(0.125, 0.003, 0.133),\n    vec3(0),\n    vec3(0.325, 0.203, 0.427),\n    vec3(0.992, 0.733, 0.176)\n\n);\nvec3 corlorsRim2[5] = vec3[]\n(\n    vec3(0.101, 0.164, 0.423),   \n    vec3(0.435, 0, 0),\n    vec3(0.941, 0.796, 0.207),\n    vec3(0.992, 0.733, 0.176),\n    vec3(0.698, 0.121, 0.121)\n\n);\nfloat rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv -= 0.5;\n    uv.x *= iResolution.x/iResolution.y ;\n    uv *= size*2.;\n    float time = iTime*flameSpeed;\n\n    float powerPercentY = 0.05+smoothstep(0., 1., fragCoord.y/ iResolution.y);\n\n    vec4 offset0 = (texture(iChannel0, uv*0.0001 + vec2(iTime*0.01)))*2. - 1.;\n    uv += offset0.xy*vec2(uv.y*0.01, 0.25);\n    vec3 finalColor = vec3(0);\n    //uv.x += pow(powerPercentY,2.)*size*2.*sin(log(powerPercentY*pi*7.)+iTime)*cos(log(powerPercentY*pi*5.)+iTime);\n\tvec4 music = texture(iChannel2, vec2(0.0, 0.0));\n    for (float flameIndex = 1.; flameIndex < 1.8; flameIndex = flameIndex + 0.2)\n    {\n        vec4 offset1 = (texture(iChannel0, 0.1*fragCoord.xy / iResolution.xy + 0.15*powerPercentY + time*0.01 + vec2(flameIndex*3.)) - 0.5)*4.*powerPercentY;  \n        vec4 perlinNoise = (texture(iChannel0, fragCoord.xy*0.4 / iResolution.xy + vec2(iTime*0.5 + flameIndex*3.))*5. + 0.3);\n\n        vec2 uvLoc = uv; \n        uvLoc.x *= (0.2-exp(powerPercentY*2.+ (offset1.y - 0.5)*0.1))*1.3 + 0.2;\n        uvLoc.x += offset1.x*0.2*size ;\n\n        vec2 oUv = uvLoc;\n        uvLoc.y -= 6. + (-flameIndex*8.);\n        uvLoc.y *= 0.6*perlinNoise.y*4.;\n        uvLoc.y -= (-flameIndex*8.);\n        //uvLoc += offset1.xy*3.;\n        int index = int((flameIndex-1.)*5.);\n\n        float roation = pi/2.;  \n        \n        float s = sin(roation), c =cos(roation);\n        oUv = vec2(uvLoc.x*c - uvLoc.y*s, uvLoc.x*s + c);\n        \n        //uvLoc.y += size*0.02*flameIndex+1.;\n        // Angle and radius from the current pixel\n        float a = atan(oUv.x,oUv.y)+pi;\n        float r = pi*(flameIndex* offset1.x)/float(sides);\n    \t//uv.x += pow(powerPercentY,2.)*size*sin(log(powerPercentY*pi*7.)*offset1.z*(i+1.)+iTime );\n\n        // offset from centre\n        float distanceFunction = length(oUv);\n        float shapeFunction = (cos(floor(.5+a/r)*r-a)*distanceFunction*flameIndex)-1.5*size/(1.+flameIndex);\n        vec3 colorInside = mix(corlors1[index%5], corlors2[index%5] , powerPercentY);\n        vec3 colorRim = mix(corlorsRim1[index%5], corlorsRim2[index%5], powerPercentY);\n        vec3 color = mix(colorInside, colorRim, smoothstep(0., 0.05, shapeFunction + size *(0.008 + 0.04*powerPercentY)));\n        color = mix(color, vec3(0.), smoothstep(0.,0.05, shapeFunction));\n        finalColor = mix(color, finalColor, smoothstep(0.,0.05, shapeFunction))*1.1;\n    }\n    \n    //fragColor = mix(mix(vec4(0.24,0.43,0.5,1.), vec4(0.15,0.32,0.39, 1.)*0.1 ,  length(fragCoord.xy / iResolution.xy - 0.5)), vec4(finalColor, 1.), 1.-step(finalColor.r + finalColor.g + finalColor.b, 0.0001));\n    fragColor = vec4(finalColor, 1.);\n    uv = fragCoord.xy/iResolution.xy;\n    fragColor = fragColor*0.7 + texture(iChannel1, uv/(1.05) + vec2(0.025, - 0.001))*vec4(0.7, 0.3, 1., 0.)*music*(0.2+powerPercentY);\n}","name":"Buffer A","description":"","type":"buffer"}]}