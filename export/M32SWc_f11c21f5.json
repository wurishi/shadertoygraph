{"ver":"0.1","info":{"id":"M32SWc","date":"1711167577","viewed":30,"name":"SS019 0","username":"ShadowStar019","description":"0","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["0"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.141592653589793238462643383279502884197169399375105820f\n\nstruct HSL {\n    float hue;\n    float saturation;\n    float lightness;\n};\n\nstruct RGB {\n    float red;\n    float green;\n    float blue;\n};\n\nfloat mapValue(float value, float inputMinimum, float inputMaximum, float outputMinimum, float outputMaximum);\nfloat restrictRadians(float value);\nRGB HSLToRGB(HSL value);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 pos;\n    float aspectRatio = iResolution.y / iResolution.x;\n\n    pos.x = mapValue(fragCoord.x, 0.0f, iResolution.x, -1.0f / aspectRatio, 1.0f / aspectRatio);\n    pos.y = mapValue(fragCoord.y, 0.0f, iResolution.y, -1.0f, 1.0f);\n    \n    float period = 4.0f;\n    \n    float hue = mapValue(restrictRadians(atan(pos.y, pos.x) + (iTime / period * 0.5f) * (2.0f * PI)), -PI, PI, 0.0f, 1.0f);\n    float saturation = 1.0f;\n    float maxLightness = mapValue(sin((iTime / period) * (2.0f * PI)), -1.0f, 1.0f, 0.0f, 1.0f);\n    float distance = clamp(sqrt(pow(pos.x, 2.0f) + pow(pos.y, 2.0f)), 0.0f, 1.0f);\n    float lightness = mapValue(distance, 0.0f, 1.0f, maxLightness, 0.0f);\n\n    HSL hslColor = HSL(hue, saturation, lightness);\n    RGB color = HSLToRGB(hslColor);\n    \n    fragColor = vec4(color.red, color.green, color.blue, 1.0f);\n}\n\nfloat mapValue(float value, float inputMinimum, float inputMaximum, float outputMinimum, float outputMaximum) {\n    return ((value - inputMinimum) * (outputMaximum - outputMinimum)) / (inputMaximum - inputMinimum) + outputMinimum;\n}\n\nfloat restrictRadians(float value) {\n    return value - ((2.0f * PI) * floor( (value + PI) / (2.0f * PI) ));\n}\n\nRGB HSLToRGB(HSL value) {\n    float hue = value.hue;\n    float saturation = value.saturation;\n    float lightness = value.lightness;\n\n    float chroma = (1.0f - abs(2.0f * lightness - 1.0f)) * saturation;\n    \n    float huePrime = hue * 6.0f;\n    float x = chroma * (1.0f - abs(mod(huePrime, 2.0f) - 1.0f));\n    \n    \n    RGB temp;\n    if (huePrime >= 0.0f && huePrime < 1.0f)\n        temp = RGB(chroma, x, 0.0f);\n    else if (huePrime >= 1.0f && huePrime < 2.0f)\n        temp = RGB(x, chroma, 0.0f);\n    else if (huePrime >= 2.0f && huePrime < 3.0f)\n        temp = RGB(0.0f, chroma, x);\n    else if (huePrime >= 3.0f && huePrime < 4.0f)\n        temp = RGB(0.0f, x, chroma);\n    else if (huePrime >= 4.0f && huePrime < 5.0f)\n        temp = RGB(x, 0.0f, chroma);\n    else if (huePrime >= 5.0f && huePrime < 6.0f)\n        temp = RGB(chroma, 0.0f, x);\n    else\n        temp = RGB(0.0f, 0.0f, 0.0f);\n        \n    float m = lightness - (chroma / 2.0f);\n    \n    RGB result = RGB(temp.red + m, temp.green + m, temp.blue + m);\n    return result;\n}","name":"Image","description":"","type":"image"}]}