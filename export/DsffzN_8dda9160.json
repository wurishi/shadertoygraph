{"ver":"0.1","info":{"id":"DsffzN","date":"1688495999","viewed":61,"name":"not a clue","username":"Ronush","description":"absolutely puzzled about what is going on on the screen...","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nfloat smin( float a, float b )\n{\n\tfloat k=1.;\n    float res = exp2( -k*a ) + exp2( -k*b );\n    return -log2( res )/k;\n}\n\n\nfloat sdSphere(vec3 p, vec3 c, float r){\n\tfloat sphere = (length(p-c)-r);\n\treturn sphere;\n}\nfloat sdCapsule( vec3 p, float h, float r )\n{\n  p.y -= clamp( p.y, 0.0, h );\n  return length( p ) - r;\n}\n\nfloat sdBox( vec3 p, vec3 r)\n{\n  p=abs(p)-r;\n  return max(max(p.x, p.y), p.z);\n}\n\n\n//global variables\nfloat g1=0.; vec3 np, bp;\nvec3 ld = vec3(0, 0, -1);\n\n\nvec2 getDist(vec3 p){\n\tvec2 h, t=vec2(sdCapsule(p, 3., 1.), 5);\n    \n\tt.x = max(-sdBox(abs(p-vec3(0, 1.5, 0))-vec3(0, 0.7, 0), vec3(2, 0.5, 2)), t.x);\n     \n    t.x = max(sdBox(p, vec3(0.75, 50, 0.75)), t.x);\n    h = vec2(sdCapsule(p, 40., 0.2), 0);\n    \n    h.x = min(sdBox(p, vec3(15, 0.25-(length(p)-10.), 0.25)), h.x);\n    \n    t = (t.x<h.x)?t:h;\n    h=vec2(sdCapsule(p, 4., 0.5), 1);\n    t = (t.x<h.x)?t:h;\n    h=vec2(sdBox(p, vec3(0.05, 10, 0.3)), 1); \n    g1 +=0.1/(0.05+h.x*h.x*1.);\n    t = (t.x<h.x)?t:h;\n    t.x*=0.5;\n\treturn t;\n\t\n}\n\nmat2 r2(float r){return mat2(cos(r), sin(r), -sin(r), cos(r));}\nvec2 map(vec3 p)\n{\n    float tt=mod(iTime,100.);\n    p.xy*=r2(tt+sin(p.z*0.2+tt*5.)*0.2);\n    np=p;\n    float s = sin(p.z*0.1+tt*2.-5.)*0.1;\n    //float s = 1.;\n    for(int i=0; i<7; i++){\n        np = abs(np)-vec3(4.-4.*s, 0, max(4.*s, 0.6));\n        np.xy*=r2(0.4+s);\n        np.xz*=r2(0.3+s);\n    }\n    vec2 h, t=getDist(np);\n\n    bp = np; bp.xy*=r2(1.);\n    h = getDist(abs(bp*0.5+1.)-vec3(3, -1, 0));\n    h.x*=1.5;\n    t = (t.x<h.x)?t:h;\n    return t;\n}\n\n\nfloat RayMarch(vec3 ro, vec3 rd){\n\t\n\tfloat dO = 0.;\n\tfloat dS = 0.;\n\t\n\tfor (int i=0; i<100; i++) {\n\t\tvec3 p = ro+rd*dO;\n\t\tdS = map(p).x;\n\t\tdO+=dS;\n\t\tif (dS<0.1) break;\n        dO+=map(p).x;\n\t}\n\treturn dO;\n}\n\nvec3 getNormal(vec3 p){\n\tfloat d0 = map(p).x;\n\tvec2 e = vec2(0.00, 0.0001);\n\tvec3 d1 = vec3(\n\t\tmap(p-e.yxx).x,\n\t\tmap(p-e.xyx).x,\n\t\tmap(p-e.xxy).x);\n\tvec3 n = normalize(d0-d1);\n\t\n\t\n\t\n\treturn n;\n}\nfloat Diffuse(vec3 p){\n    vec3 normal = getNormal(p);\n    float dif = max(0., dot(normal, ld));\n    return dif;\n}\n\nfloat ambientOcc(vec3 p, float dist){\n    \n    float aor = dist/50.; // ambient occ range\n    vec3 normal = getNormal(p);\n    float ao=exp2(-2.*pow(max(0.,1.-map(p+normal*aor).x/aor),2.));\n    return ao;\n}\n\n\nfloat GetLight(vec3 p){\n\tvec3 lightpos = vec3(-3, -2, -10);\n\tvec3 n = getNormal(p);\n\tvec3 d = normalize(lightpos-p);\n\tfloat strength = (dot(n, d))+.7;\n\treturn strength;\n    //return 1.;\n}\nfloat noise(vec3 p){//Noise function stolen from Virgil who stole it from Shane who I assume understands this shit, unlike me who is too busy throwing toilet paper at my math teacher's house\n  vec3 ip=floor(p),s=vec3(7,157,113);\n  p-=ip; vec4 h=vec4(0,s.yz,s.y+s.z)+dot(ip,s);\n  p=p*p*(3.-2.*p);\n  h=mix(fract(sin(h)*43758.5),fract(sin(h+s.x)*43758.5),p.x);\n  h.xy=mix(h.xz,h.yw,p.y);\n  return mix(h.x,h.y,p.z);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float tt=iTime;\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv=(fragCoord.xy/iResolution.xy-0.5)/vec2(iResolution.y/iResolution.x,1);\n    \n    vec3 ro = vec3(0, 0, sin(tt/2.)*15.);\n    vec3 cw=normalize(vec3(0)-ro);\n\t//vec3 cw = normalize(vec3(0, 1, 0)-ro);\n\tvec3 cu = normalize(cross(cw, vec3(0, 1, 0)));\n\tvec3 cv = normalize(cross(cw, cu));\n\tvec3 rd = mat3(cu, cv, cw)*normalize(vec3(-uv, 0.5));\n    \n    \n    \n \n    vec3 col = vec3(0);\n    float d = RayMarch(ro, rd);\n    vec3 p = ro+rd*d;\n    vec3 normal = getNormal(p);\n    float basecol = map(p).y;\n    vec3 firstcol;\n    if (basecol == 5.) firstcol = vec3(1., 0., 0.);\n    if (basecol == 0.) firstcol = vec3(0.2, 0.2, 0.2);\n    if (basecol == 1.) firstcol = vec3(1., 1., 1.);\n    col = vec3(GetLight(p)*firstcol);\n    //col = vec3(n);\n    \n    \n    \n    float spo=exp(1.+3.*noise(np/vec3(.1,.2,.4)));\n    vec3 sss = vec3(1.5)*smoothstep(0., 1., map(p+ld*0.4).x/0.4); //sub surface scattering\n    vec3 specular = vec3(1.)*pow(max(dot(reflect(-ld, normal), -rd), 0.), spo); //specular\n    float fr=pow(1.+dot(normal,rd),4.); //fresnel\n    \n\tfloat dif = Diffuse(p);\n    float ao =ambientOcc(p, d)*0.8+0.2;\n    col *=sss;\n    col*=dif;\n    //col*=specular;\n    //col*=ao;\n    \n\tvec3 fog = vec3(.04)*(1.-(length(uv)-.2));\n    col=mix(col,fog,1.-exp(-.0001*d*d*d));//Fog\n    \n    \n    \n    \n    \n    col+=g1*0.01;\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}