{"ver":"0.1","info":{"id":"slByWz","date":"1649459872","viewed":88,"name":"MultiangleMirror2","username":"Uffe55","description":"Box1 is mirrored through the zy-plane of box2 in box3","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["mirror","rotation","imouse"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n#define PI2 = 6.28318\n#define PI = 3.14159\n\n\n                    \n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\n// Mirror point A through the yz plane of M (mirror)\nvec3 MirrorPoint(vec3 A, vec3 M, float ang){\n\n vec3 normal = vec3(1.0,0.0,0.0);\n normal.xz *= Rot(-ang);\n float t = dot(normal,A-M);\n return A - 2.0 * t * normal;\n\n}\n  // Mirror point A through the yz plane of M (mirror)\nvec3 MirrorPointVec(vec3 A, vec3 M, vec3  ang){\n\n vec3 normal = vec3(1.0,0.0,0.0);\n normal.xz *= Rot(-ang.x);\n normal.yz *= Rot(-ang.y);\n //To do\n //insert rotation xy\n \n float t = dot(normal,A-M);\n return A - 2.0 * t * normal;\n\n}\n  \n  \n\nvec3 MirrorAngles(vec3 a, vec3 b){\n\nfloat aa,bb,cc;\n\naa = a.x - 2.0 * (a.x-b.x);\nbb = a.y - 2.0 * (a.y-b.y);\ncc = a.z - 2.0 * (a.z-b.z);\nreturn vec3(aa,-bb,cc);\n\n}\n\nfloat sdBoxes(vec3 p , vec3 s, vec3 pos,vec3 angles){\n\n    p = p+pos;\n    p.xz *= Rot(angles.x);\n    p.yz *= Rot(angles.y);\n    p.xy *= Rot(angles.z);\n    p = abs(p)-s;  \n    return length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nfloat sdSceen(vec3 p, vec3 s)\n{\n    vec3 pos[3] ;\n    pos[0] = vec3(-2.5,0.,0.);\n    pos[1] = vec3(0.0,0.0,0.);\n    pos[2] = vec3(0.,0.,0.);\n\n    vec3 ang[3] ;\n    ang[0] = vec3( iTime*0.8, iTime * 0.3, iTime* 0.52);\n    ang[1] = vec3(iTime*0.15, 0., 0.);\n    ang[2] = vec3(0., 0., 0.);\n  \n    float d ;\n    float dist=100.0;\n \n    pos[2] =  MirrorPointVec(pos[0],pos[1],ang[1]);\n    ang[2] =  MirrorAngles(ang[0], ang[1]);\n    \n  \n    for(int i=0;i<3;i++)\n    {\n       d= sdBoxes(p , s, pos[i], ang[i]);\n       dist= min(d,dist);\n    }\n    return dist;\n}\n\n\n\nfloat GetDist(vec3 p) {\n    \n    return sdSceen(p,vec3(.05, 0.4, 1.3));\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n\n    vec3 ro = vec3(0, 3, -14.);\n    ro.yz *= Rot(-m.y*3.+1.2);\n    ro.xz *= Rot(-m.x*6.2831);\n    \n    vec3 rd = GetRayDir(uv, ro, vec3(0,0.,0), 2.0);\n    vec3 col = vec3(0.3,0.4,0.6); \n   \n    float d = RayMarch(ro, rd);\n\n    if(d<MAX_DIST) {\n        vec3 p = ro + rd * d;\n        vec3 n = GetNormal(p);\n        float dif = dot(n, normalize(vec3(2,6,1)))*.5+.5;\n        col = vec3(dif);       \n   }\n   \n    fragColor = vec4(col,1.0);\n\n}","name":"Image","description":"","type":"image"}]}