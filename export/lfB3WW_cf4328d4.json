{"ver":"0.1","info":{"id":"lfB3WW","date":"1704585737","viewed":33,"name":"ChatGPT attempt at cube","username":"OneMoth","description":"this is the result of a long conversation with chat gpt on drawing lines shapes and dimensions","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["ai"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Set the resolution\n    vec2 resolution = iResolution.xy;\n\n    // Normalize coordinates\n    vec2 uv = fragCoord / resolution;\n\n    // Set background color\n    vec3 backgroundColor = vec3(0.0, 0.0, 0.0);\n\n    // Set cube color\n    vec3 cubeColor = vec3(1.0, 1.0, 1.0);\n\n    // Set cube parameters\n    vec3 cubeCenter = vec3(0.5, 0.5, 0.5);\n    float cubeSize = 1.0;\n\n    // Time variable for animation\n    float time = iTime;\n\n    // Create 3D cube with X-axis and Y-axis rotation animation\n    vec3 cubeUV = vec3(uv, 0.0);\n    cubeUV -= cubeCenter;\n\n    float rotationAngleX = time; // Adjust the X-axis rotation speed by changing the multiplier\n    float rotationAngleY = time * 0.7; // Adjust the Y-axis rotation speed by changing the multiplier\n\n    // Apply rotation around the X-axis\n    cubeUV.yz = mat2(cos(rotationAngleX), -sin(rotationAngleX), sin(rotationAngleX), cos(rotationAngleX)) * cubeUV.yz;\n\n    // Apply rotation around the Y-axis\n    cubeUV.xz = mat2(cos(rotationAngleY), -sin(rotationAngleY), sin(rotationAngleY), cos(rotationAngleY)) * cubeUV.xz;\n\n    cubeUV.xy /= cubeSize / 2.0;\n\n    float edge = cubeSize * 0.5;\n    float cubeMask = smoothstep(-0.01, 0.01, edge - abs(cubeUV.x)) * smoothstep(-0.01, 0.01, edge - abs(cubeUV.y));\n\n    // Combine cube and background colors\n    vec3 finalColor = mix(backgroundColor, cubeColor, cubeMask);\n\n    // Output the final color\n    fragColor = vec4(finalColor, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}