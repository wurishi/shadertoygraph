{"ver":"0.1","info":{"id":"WtBcR3","date":"1594950830","viewed":79,"name":"Polygon - distance - yzh","username":"ZhihongYe","description":"Distance to an arbitrary polygon, based on [url]https://www.shadertoy.com/view/WdSGRd[/url]","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","sdf","distance","polygon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of \"Polygon - distance\" by iq. https://shadertoy.com/view/wdBXRW\n// 2020-07-16 12:54:04\n\n// The MIT License\n// Copyright © 2019 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Distance to a regular pentagon, without trigonometric functions. \n//\n// List of some other 2D distances:\n//\n// Circle:               https://www.shadertoy.com/view/3ltSW2\n// Segment:              https://www.shadertoy.com/view/3tdSDj\n// Triangle:             https://www.shadertoy.com/view/XsXSz4\n// Isosceles Triangle:   https://www.shadertoy.com/view/MldcD7\n// Regular Triangle:     https://www.shadertoy.com/view/Xl2yDW\n// Regular Pentagon:     https://www.shadertoy.com/view/llVyWW\n// Regular Octogon:      https://www.shadertoy.com/view/llGfDG\n// Rounded Rectangle:    https://www.shadertoy.com/view/4llXD7\n// Rhombus:              https://www.shadertoy.com/view/XdXcRB\n// Trapezoid:            https://www.shadertoy.com/view/MlycD3\n// Polygon:              https://www.shadertoy.com/view/wdBXRW\n// Hexagram:             https://www.shadertoy.com/view/tt23RR\n// Regular Star:         https://www.shadertoy.com/view/3tSGDy\n// Star5:                https://www.shadertoy.com/view/wlcGzB\n// Ellipse 1:            https://www.shadertoy.com/view/4sS3zz\n// Ellipse 2:            https://www.shadertoy.com/view/4lsXDN\n// Quadratic Bezier:     https://www.shadertoy.com/view/MlKcDD\n// Uneven Capsule:       https://www.shadertoy.com/view/4lcBWn\n// Vesica:               https://www.shadertoy.com/view/XtVfRW\n// Cross:                https://www.shadertoy.com/view/XtGfzw\n// Pie:                  https://www.shadertoy.com/view/3l23RK\n// Arc:                  https://www.shadertoy.com/view/wl23RK\n// Horseshoe:            https://www.shadertoy.com/view/WlSGW1\n// Parabola:             https://www.shadertoy.com/view/ws3GD7\n// Parabola Segment:     https://www.shadertoy.com/view/3lSczz\n// Rounded X:            https://www.shadertoy.com/view/3dKSDc\n// Joint:                https://www.shadertoy.com/view/WldGWM\n// Simple Egg:           https://www.shadertoy.com/view/Wdjfz3\n//\n// and many more here:   https://iquilezles.org/articles/distfunctions2d\n\n\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat cross2d( in vec2 v0, in vec2 v1) { return v0.x*v1.y - v0.y*v1.x; }\n\nconst int N = 20;\n\nfloat sdPoly( in vec2[N] v, in vec2 p )\n{\n    const int num = v.length();\n    float d = dot(p-v[0],p-v[0]);\n    float s = 1.0;\n    for( int i=0, j=num-1; i<num; j=i, i++ )\n    {\n        // distance\n        vec2 e = v[j] - v[i];\n        vec2 w =    p - v[i];\n        vec2 b = w - e*clamp( dot(w,e)/dot(e,e), 0.0, 1.0 );\n        d = min( d, dot(b,b) );\n\n        // winding number from http://geomalgorithms.com/a03-_inclusion.html\n        bvec3 cond = bvec3( p.y>=v[i].y, p.y<v[j].y, e.x*w.y>e.y*w.x );\n        if( all(cond) || all(not(cond)) ) s*=-1.0;  \n    }\n    \n    return s*sqrt(d);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = fragCoord.xy;\n    p.y = iResolution.y - p.y;\n    \n\tvec2 v0 = vec2(61.0,100.0);\n\tvec2 v1 = vec2(83.0,83.0);\n\tvec2 v2 = vec2(113.0,74.0);\n\tvec2 v3 = vec2(140.0,71.0);\n    vec2 v4 = vec2(171.0,74.0);\n    vec2 v5 = vec2(199.0,81.0);\n    vec2 v6 = vec2(222.0,72.0);\n    vec2 v7 = vec2(244.0,72.0);\n    vec2 v8 = vec2(271.0,76.0);\n    vec2 v9 = vec2(292.0,86.0);\n    vec2 v10 = vec2(314.0,99.0);\n    vec2 v11 = vec2(300.0,130.0);\n    vec2 v12 = vec2(274.0,146.0);\n    vec2 v13 = vec2(253.0,153.0);\n    vec2 v14 = vec2(232.0,155.0);\n    vec2 v15 = vec2(200.0,160.0);\n    vec2 v16 = vec2(170.0,156.0);\n    vec2 v17 = vec2(138.0,150.0);\n    vec2 v18 = vec2(114.0,139.0);\n    vec2 v19 = vec2(84.0,121.0);\n    \n    // add more points\n    vec2[] poly = vec2[](v0,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13\n                    ,v14,v15,v16,v17,v18,v19);\n   \n    \n\tfloat d = sdPoly(poly, p );\n    //模糊半径=sqrt(25.0)\n    //腐蚀程度=sqrt(abs(-1.0))\n\tvec3 col = vec3(smoothstep(25.0,-1.0,d));\n    //vec3 col = vec3(1.0) - sign(d)*vec3(0.1,0.4,0.7);\n\t//col *= 1.0 - exp(-4.0*abs(d));\n\t//col *= 0.8 + 0.2*cos(140.0*d);\n\t//col = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.015,abs(d)) );\n    \n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}