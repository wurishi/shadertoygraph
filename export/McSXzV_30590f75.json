{"ver":"0.1","info":{"id":"McSXzV","date":"1706544973","viewed":74,"name":"Vagalumes (hexagonal)","username":"Elsio","description":"pequena variação, com túneis melhores","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["voxel","hexagon","dda","cave"],"hasliked":0,"parentid":"lcjSDD","parentname":"Hexagonal DDA without filigrane"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define t iTime * 8.\n#define RESOLUTION 3.\n#define HS      vec2[](vec2(0, 1), vec2(1, .5), vec2(1, -.5))\n#define HEX     vec3(.866, 1, 1.75).xzy\n#define camPath(z) path(z, .13, .15, 1.3, 1.)  \n#define pat2(z) path(z, .2, .1, 6.2, 4.2)  \n#define pat3(z) path(z, .03, .12, 5.2, 6.2)\n#define path(z, a, b, c, d) vec3(z, cos((z) * a) * c, sin((z) * b) * d)\n#define vagal1 pat2(t + 25. + cos(t * .1 + 2.) * 10.)\n#define vagal2 pat3(t + 25. + cos(t * .1 + 4.) * 10.)\n#define vagal3 camPath(t + 25. + cos(t * .1) * 10.)\n\nvec2 deb;\n\nfloat map(vec3 p){\n    float a = length(p.yz - camPath(p.x).yz) * 4.;\n    float b = length(p.yz - pat2(p.x).yz) * 1.8;\n    float c = length(p.yz - pat3(p.x).yz) * 1.7;\n    float tun = 7. - min(a, min(b, c));\n    \n    float e = length(p - vagal1) - .5,\n          f = length(p - vagal2) - 1.,\n          g = length(p - vagal3) - .3,\n          d = min(e, min(f, g));\n    \n    deb = vec2(step(tun, d), \n              d == e ?  1. :\n                  d == f ?  2. : 3.\n          );\n    return min(tun, d);\n} \n\nvoid mainImage(out vec4 o, vec2 u) {\n    float i, z;\n    vec3  R = iResolution, norm, p, d,\n         ro = camPath(t),\n         cp = vec3(0, 1, 0),\n         fw = normalize(camPath(t + 1.) - ro),\n         cu = normalize(cross(fw, cp)),\n         cv =          (cross(cu, fw)),\n         D  = mat3(cu, cv, fw) * vec3((u - .5 * R.xy) / R.y, 1.8),\n         rl = abs(D);\n     vec2 k;\n    //  -------------------------------------------------\n    \n    ro *= RESOLUTION;\n    \n    p = round(ro / HEX);\n    p.xz +=                            // nearestHexCell\n        mod(\n            p.xz + vec2(0, step(2., mod(p.x + 1., 4.)))\n            , 2.);\n\n    vec3 vol;\n    while(i++ < 130.) {\n        \n        \n        if(map(p * HEX / RESOLUTION) < 0.){\n            if(deb.x > .5) break;\n            vol += (deb.y == 1.? vec3(1,0,0) :\n                       deb.y == 2.? vec3(0,1,0) :vec3(0,0,1)) * .4;\n        }\n        \n        \n        vec3 q = ro - p * HEX;\n        d = vec3(1000);\n        \n        int j;\n        vec2 f,\n             h = (D * HEX).xz,\n             g = (q * HEX).xz;\n        \n        while(j++ < HS.length())      \n            k = HS[j - 1],            \n            f = sign(dot(k, h)) * k,                 \n            z = (1. - dot(f, g)) / dot(f, h), \n            z < d.y ? d = vec3(f.x, z, f.y) : d;\n                \n        z = (.5 * HEX / abs(D) - ro / D + p * HEX / D).y;\n        \n        norm = d.y < z ? z = d.y, vec3(1, 0, 1) : vec3(0, 1, 0);     \n        \n       p += norm *= vec3(d.x * 2., sign(D.y), d.z * 2.);\n    }\n    \n    o.rgb = (26./z - .1) * (norm * .02 + .2) + vol * vec3(1);\n}\n\n\n\n\n\n\n\n\n\n\n","name":"Image","description":"","type":"image"}]}