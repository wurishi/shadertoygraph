{"ver":"0.1","info":{"id":"3sySz3","date":"1578405025","viewed":253,"name":"Textured Branch","username":"nr4","description":"Textured branch as shown in Unsafe by Team210 at Under Construction 2k19.\nYoutube: [url]https://www.youtube.com/watch?v=-Ci49Szvguk&feature=youtu.be[/url]\nPouet: [url]https://www.pouet.net/prod.php?which=84414[/url]","likes":23,"published":1,"flags":32,"usePreview":0,"tags":["texture","demoscene","branch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* Textured Branch as shown in Unsafe by Team210 at Under Construction 2k19\n * Copyright (C) 2019 Alexander Kraus <nr4@z10.info>\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\nconst float fsaa = 64.;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = vec3(0.);\n    float bound = sqrt(fsaa)-1.;\n   \tfor(float i = -.5*bound; i<=.5*bound; i+=1.)\n        for(float j=-.5*bound; j<=.5*bound; j+=1.)\n        {\n     \t\tcol += texture(iChannel0, fragCoord/iResolution.xy+vec2(i,j)*mix(3.,20.,2.*abs(fragCoord.y/iResolution.y-.5))*exp(-abs(1.e-2*length(fragCoord.xy)/iResolution.y-.5))/max(bound, 1.)/iResolution.xy).xyz;\n        }\n    col /= fsaa;\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/* Textured Branch as shown in Unsafe by Team210 at Under Construction 2k19\n * Copyright (C) 2019 Alexander Kraus <nr4@z10.info>\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\nconst float pi = acos(-1.);\nconst vec3 c = vec3(1.,0.,-1.);\n\nvoid rand(in vec2 x, out float n)\n{\n    x += 400.;\n    n = fract(sin(dot(sign(x)*abs(x) ,vec2(12.9898,78.233)))*43758.5453);\n}\n\nvoid lfnoise(in vec2 t, out float n)\n{\n    vec2 i = floor(t);\n    t = fract(t);\n    t = smoothstep(c.yy, c.xx, t);\n    vec2 v1, v2;\n    rand(i, v1.x);\n    rand(i+c.xy, v1.y);\n    rand(i+c.yx, v2.x);\n    rand(i+c.xx, v2.y);\n    v1 = c.zz+2.*mix(v1, v2, t.y);\n    n = mix(v1.x, v1.y, t.x);\n}\n\nvoid mfnoise(in vec2 x, in float d, in float b, in float e, out float n)\n{\n    n = 0.;\n    float a = 1., nf = 0., buf;\n    for(float f = d; f<b; f *= 2.)\n    {\n        lfnoise(f*x, buf);\n        n += a*buf;\n        a *= e;\n        nf += 1.;\n    }\n    n *= (1.-e)/(1.-pow(e, nf));\n}\n\nvoid background(in vec2 uv, out vec3 col)\n{\n    float n;\n    lfnoise(1.4*vec2(2.,1.)*uv, n);\n    col = mix(vec3(0.33,0.49,0.32), vec3(0.18,0.20,0.13), .5+.5*n);\n    lfnoise(1.1*vec2(3.,2.)*uv-1337., n);\n    col = mix(col, vec3(0.24,0.38,0.30), .5+.5*n);\n  \tlfnoise(1.1*vec2(6.,1.)*uv, n);\n    col = mix(col, vec3(0.11,0.09,0.06), clamp(.2-.2*n,0.,1.));\n    \n    mfnoise(uv, 4.,400., .25, n);\n    col = mix(col, 2.*col*col, (.5+.5*n));\n}\n\nvoid add(in vec2 sda, in vec2 sdb, out vec2 sdf)\n{\n    sdf = (sda.x<sdb.x)?sda:sdb;\n}\n\nvoid scene(in vec3 x, out vec2 sdf)\n{\n    x.x += .1*iTime;\n    \n    // Branch\n    float r = .25;\n    vec2 dx;\n    lfnoise(x.x*c.xx, dx.x);\n    lfnoise(1.3*x.x*c.xx+1337., dx.y);\n    \n    float n;\n    mfnoise(vec2(1.,4.)*vec2(atan(x.y,x.z),x.x), 5.,500., .55, n);\n    r += .02*abs(n*n);\n    \n    sdf = vec2(length(x.yz-vec2(.2,.1)*dx)-r, 0.);\n}\n\nvoid normal(in vec3 x, out vec3 n, in float dx)\n{\n    vec2 s, na;\n    \n    scene(x,s);\n    scene(x+dx*c.xyy, na);\n    n.x = na.x;\n    scene(x+dx*c.yxy, na);\n    n.y = na.x;\n    scene(x+dx*c.yyx, na);\n    n.z = na.x;\n    n = normalize(n-s.x);\n}\n\nvoid branch_texture(in vec2 uv, out vec3 col)\n{\n    uv.y += .1*iTime;\n    float n;\n    mfnoise(vec2(1.,3.)*uv, 5.,500., .85, n);\n    col = mix(vec3(0.16,0.15,0.17), c.xxx, abs(n));\n    \n    n = .5+.5*n;\n    col = mix(col, vec3(0.21,0.14,0.11), clamp(abs(n*n),0.,1.));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.yy,\n        s;\n    vec3 o0 = .75*c.yyx+.3*c.yzy,\n        o = o0,\n        r = c.xyy,\n        t = c.yyy, \n        u = cross(normalize(t-o),-r),\n        dir,\n        n, \n        x,\n        c1 = c.yyy,\n        l,\n        col = c.yyy;\n    int N = 450,\n        i;\n    float d;\n    \n    t = uv.x * r + uv.y * u;\n    dir = normalize(t-o);\n    \n    background(uv, col);\n\n    // Raymarch branch\n    for(i = 0; i<N; ++i)\n    {\n        x = o + d * dir;\n        scene(x,s);\n        if(abs(s.x) < 1.e-4) break;\n        if(x.z < -.1) \n        {\n            i = N;\n            break;\n        }\n        d += s.x;\n    }\n    \n    if(i<N)\n    {\n        normal(x, n, 5.e-4);\n        l = normalize(c.yyx);\n      \n        if(s.y == 0.) // Branch\n        {\n            // Determine texture coordinates\n            float r = .25;\n            vec2 dx;\n            lfnoise((x.x+.1*iTime)*c.xx, dx.x);\n            lfnoise(1.3*(x.x+.1*iTime)*c.xx+1337., dx.y);\n\n            vec2 texcoord = x.yz - vec2(.2,.1)*dx;\n            texcoord = vec2(atan(texcoord.y, texcoord.x), x.x);\n            \n            branch_texture(texcoord, col);\n            col = .1*col \n                + .2*col*dot(l, n)\n                + 1.4*col*pow(abs(dot(reflect(l,n),dir)),2.);\n            \n        }\n        else if(s.y == 1.) // Shroom\n        {\n            col = vec3(0.87,0.27,0.34);\n            col = .1*col \n                + .2*col*dot(l, n)\n                + 1.4*col*pow(abs(dot(reflect(l,n),dir)),2.);\n        }\n    }\n    \n    fragColor = vec4(clamp(col,0.,1.),1.);\n}\n\n","name":"Buffer A","description":"","type":"buffer"}]}