{"ver":"0.1","info":{"id":"tlcfzH","date":"1612225739","viewed":118,"name":"Wave Noise Fork","username":"TEttinger","description":"Wave Noise - a simple wave based noise based on extremely simplified Gabor kernel. Performs similar to Gradient Noise, but slower than Value Noise. It provides however some flexibility in the look, and may be fast when implemented in CPU-side code.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["procedural","2d","noise"],"hasliked":0,"parentid":"tldSRj","parentname":"Noise - wave - 2D"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2020 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Fork of original work here: https://www.shadertoy.com/view/tldSRj\n// Changes are marked with \"CHANGED:\", as requested but not required by the above license.\n\n// A wave based noise, similar to gabor and all its variants but much\n// simplified, originially explored in shadertoy by user robobo1221\n// in this shader: https://www.shadertoy.com/view/wttSRj\n//\n// It is comparable in speed to traditional gradient noise (if the\n// architecture supports fast sin/cos, like GPUs do anyways), but\n// slower than value noise of course. The advantage is that it's\n// infinitely derivable. It can also be easily animated by moving\n// the waves over time or rotating the gradients, which is fun.\n//\n// But the main advantage is that it can generate a wormy look, as\n// in robobo1221's original shader, by changing the constant in \n// line 57 to be closer to 1.75 .\n\n// Value    Noise 2D, Derivatives: https://www.shadertoy.com/view/4dXBRH\n// Gradient Noise 2D, Derivatives: https://www.shadertoy.com/view/XdXBRH\n// Value    Noise 3D, Derivatives: https://www.shadertoy.com/view/XsXfRH\n// Gradient Noise 3D, Derivatives: https://www.shadertoy.com/view/4dffRH\n// Value    Noise 2D             : https://www.shadertoy.com/view/lsf3WH\n// Value    Noise 3D             : https://www.shadertoy.com/view/4sfGzS\n// Gradient Noise 2D             : https://www.shadertoy.com/view/XdXGW8\n// Gradient Noise 3D             : https://www.shadertoy.com/view/Xsl3Dl\n// Simplex  Noise 2D             : https://www.shadertoy.com/view/Msf3WH\n// Wave     Noise 2D             : https://www.shadertoy.com/view/tldSRj\n\n//// CHANGED: sway() added as an experiment.\n// Like sin() but repeats every 2.0 instead of 2.0*pi, and almost as smooth.\n// This is mostly here so CPU versions of this can be a bit faster.\n// Using a sin()-based technique is probably better if only targeting GPUs.\nfloat sway(float x)\n{\n    float f = fract(x);\n    return (f*f*(12.0-8.0*f) - 2.0) * (floor(fract(x*0.5)*2.0) - 0.5);\n}\n//// CHANGED: more sway() so this can be used in place of sin(vec2)\nvec2 sway(vec2 p)\n{\n    vec2 f = fract(p);\n    return (f*f*(12.0-8.0*f) - 2.0) * (floor(fract(p*0.5)*2.0) - 0.5);\n}\n\n//// CHANGED: the hash is slightly different here.\n//// Wave noise seems to be very sensitive to the hash used.\n// You should replace this hash by one that you like and meets\n// your needs. This one is here just as example and should not\n// be used in production.\n//vec2 g( vec2 n ) { return sin(n.x*n.y*vec2(12., 17.)+vec2(1.,2.)); }\n//vec2 g( vec2 n ) { return sin(n.x*n.y*vec2(12.5, 17.125)+vec2(2.25,1.375)+n); }\n//vec2 g( vec2 n ) { return sway(n.x*n.y*vec2(12.618, 17.793)+vec2(2.341,1.733)*n); }\n//vec2 g( vec2 n ) { return sway((vec2(1.618, 1.793)+n.xy)*(vec2(2.733, 2.341)-n.yx)); }\nvec2 g( vec2 n ) { return sin((vec2(1.618, 1.793)+n.xy)*(vec2(2.733, 2.341)-n.yx)); }\n//vec2 g( vec2 n ) { return sin(n.x*n.y+vec2(0,1.571)); } // if you want the gradients to lay on a circle\n\n//// CHANGED: uses sway() instead of sin(), and so doesn't need to adjust inputs by pi.\nfloat noise(vec2 p)\n{\n    vec2 i = floor(p);\n\tvec2 f = fract(p);\n    //// Uncomment the line below to see worm-y shapes. Adjust 1.75 as desired.\n    //p *= 1.75;\n    f = f*f*(3.0-2.0*f);\n    return mix(mix(sway(dot(p,g(i+vec2(0,0)))),\n               \t   sway(dot(p,g(i+vec2(1,0)))),f.x),\n               mix(sway(dot(p,g(i+vec2(0,1)))),\n               \t   sway(dot(p,g(i+vec2(1,1)))),f.x),f.y);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n//// CHANGED: to allow seeing a larger area of the noise,\n//// this doesn't zoom when you full-screen. You can change\n//// the divisor to iResolution.xy instead of 256.0 if you\n//// instead want to zoom in with full-screen mode.\n    vec2 p = fragCoord.xy / 256.0;// / iResolution.xy;\n\n\tvec2 uv = p*vec2(iResolution.x/iResolution.y,1.0);\n\n    float f = 0.0;\n\n//// CHANGED: instead of hard-coding 0.2 or 0.5 as the cutoff\n//// for where to draw one octave or four octaves, the line\n//// position is stored here.\n    float line = 0.5 * iResolution.x;\n\t\n    // left: noise\t\n\tif( fragCoord.x<line )\n\t{\n\t\tf = noise( 24.0*uv );\n\t}\n    // right: fractal noise (4 octaves)\n    else\t\n\t{\n\t\tuv *= 8.0;\n        mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\n\t\tf  = 0.5000*noise( uv ); uv = m*uv;\n\t\tf += 0.2500*noise( uv ); uv = m*uv;\n\t\tf += 0.1250*noise( uv ); uv = m*uv;\n\t\tf += 0.0625*noise( uv ); //uv = m*uv;\n\t}\n\n\tf = 0.5 + 0.5*f;\n//// CHANGED: screen position is handled differently here.\n    f *= smoothstep( 0.0, 1.0, abs(fragCoord.x-line) );\t\n\t\n\tfragColor = vec4( f, f, f, 1.0 );\n}","name":"Image","description":"","type":"image"}]}