{"ver":"0.1","info":{"id":"Mc33RH","date":"1712142775","viewed":64,"name":"Mitosis and waves","username":"nicoeps","description":"For a course assignment.\nSimple shader for experiments with diffusion, waves, or reaction-diffusion. Mitosis and wave equation.\n","likes":5,"published":1,"flags":32,"usePreview":0,"tags":["procedural","wave","simulation","water","diffusion","physics","reaction","mitosis"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 grad(ivec2 p) {\n    // Compute the gradient of the. channel used for shading\n    ivec2 delta = ivec2(1, 0);\n    vec2 g;\n    if (p.x < int(iResolution.x / 2.0)) {\n        g = vec2(texelFetch(iChannel0, p + delta.xy, 0).y\n               - texelFetch(iChannel0, p - delta.xy, 0).y,\n                 texelFetch(iChannel0, p + delta.yx, 0).y\n               - texelFetch(iChannel0, p - delta.yx, 0).y);\n    } else {\n        g = vec2(texelFetch(iChannel0, p + delta.xy, 0).w\n               - texelFetch(iChannel0, p - delta.xy, 0).w,\n                 texelFetch(iChannel0, p + delta.yx, 0).w\n               - texelFetch(iChannel0, p - delta.yx, 0).w);\n    }\n    return g / 2.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    ivec2 p = ivec2(fragCoord);\n    \n    vec2 g = grad(p);\n    vec3 t1 = vec3(1,0,20.0*g.x);\n    vec3 t2 = vec3(0,1,20.0*g.y);\n    vec3 N = normalize(cross(t1,t2));\n    vec3 L = normalize(vec3(1,3,5));\n    float illum = (0.4+0.4*smoothstep(0.97,0.98, dot(N,L)) + 0.2 * max(0.0, dot(N,L)));\n\n    vec2 substance = 2.0*texelFetch(iChannel0, p, 0).yz;\n\n    // Output to screen\n    if (uv.x < 0.5) {\n        fragColor = illum*vec4(0.3, 0.7, 0.5,0.0) + (1.0-substance.x)*vec4(0.6,0.4,0.1, 0.0);\n    } else {\n        vec4 col = illum*vec4(0.3, 0.5, 0.7,0.0) + (1.0-substance.y)*vec4(0.1,0.4,0.6, 0.0);\n        fragColor = mix(col, texture(iChannel1, uv+g), 0.7);\n    }\n    //fragColor = vec4(1.0)-vec4(1.0,0.8,0.6,0.0)*texelFetch(iChannel0, p, 0).w;Q\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Suggested time step\nfloat dt = 0.25;\n\n/* Wave simulation constants */\nfloat d = 0.999;\nfloat c = 1.4;\n\n\n/* Mitosis */\nfloat Da = 1.0;\nfloat Db = 0.5;\nfloat k = 0.0649;\nfloat f = 0.0367;\n\n\n/* Coral Growth *//*\nfloat Da = 1.0;\nfloat Db = 0.5;\nfloat k = 0.062;\nfloat f = 0.0545;*/","name":"Common","description":"","type":"common"},{"inputs":[{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec4 lap(ivec2 p) {\n    // Compute the Laplacian of all four elements of iChannel0\n    ivec3 delta = ivec3(1, -1, 0);\n    /*vec4 lap = texelFetch(iChannel0, p + delta.xz, 0)\n             + texelFetch(iChannel0, p + delta.yz, 0)\n             + texelFetch(iChannel0, p + delta.zx, 0)\n             + texelFetch(iChannel0, p + delta.zy, 0)\n             - 4.0*texelFetch(iChannel0, p, 0);*/\n    vec4 lap = (texelFetch(iChannel0, p + delta.xz, 0)\n             +  texelFetch(iChannel0, p + delta.yz, 0)\n             +  texelFetch(iChannel0, p + delta.zx, 0)\n             +  texelFetch(iChannel0, p + delta.zy, 0))*0.5\n             + (texelFetch(iChannel0, p + delta.xx, 0)\n             +  texelFetch(iChannel0, p + delta.xy, 0)\n             +  texelFetch(iChannel0, p + delta.yx, 0)\n             +  texelFetch(iChannel0, p + delta.yy, 0))*0.25\n             -  texelFetch(iChannel0, p, 0)*3.0;\n    return lap;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 p = ivec2(fragCoord);\n    \n    vec4 v = texelFetch(iChannel0, p, 0);\n    vec4 l = lap(p);\n    vec4 e = vec4(1, -1, 0, 0);\n    \n    vec2 ab = v.xy + (vec2(Da, Db) * l.xy + e.yx*v.x*v.y*v.y + e.xy*vec2(f*(1.0 - v.x), (k + f)*v.y)) * dt;\n    ab = min(ab, e.xx);\n    \n    float s = v.z*d + d * c*c * l.w * dt;\n    float h = v.w + s * dt;\n    \n    mat2 M = mat2(0.5, 0.0, 0.0, 0.1);\n    \n    vec2 V = (fragCoord - 0.5) - iMouse.zw;\n    if (iMouse.z > 0.0) e.w = 1.0;\n    if (iFrame < 1) {\n        fragColor = vec4(0.0,0,0,0);\n    } else {\n        fragColor = exp(-dot(V,M*V))*e.zwzz + exp(-0.05*dot(V,V))*e.zzzw + vec4(ab, s, h);\n    }\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"vec4 lap(ivec2 p) {\n    // Compute the Laplacian of all four elements of iChannel0\n    ivec3 delta = ivec3(1, -1, 0);\n    /*vec4 lap = texelFetch(iChannel0, p + delta.xz, 0)\n             + texelFetch(iChannel0, p + delta.yz, 0)\n             + texelFetch(iChannel0, p + delta.zx, 0)\n             + texelFetch(iChannel0, p + delta.zy, 0)\n             - 4.0*texelFetch(iChannel0, p, 0);*/\n    vec4 lap = (texelFetch(iChannel0, p + delta.xz, 0)\n             +  texelFetch(iChannel0, p + delta.yz, 0)\n             +  texelFetch(iChannel0, p + delta.zx, 0)\n             +  texelFetch(iChannel0, p + delta.zy, 0))*0.5\n             + (texelFetch(iChannel0, p + delta.xx, 0)\n             +  texelFetch(iChannel0, p + delta.xy, 0)\n             +  texelFetch(iChannel0, p + delta.yx, 0)\n             +  texelFetch(iChannel0, p + delta.yy, 0))*0.25\n             -  texelFetch(iChannel0, p, 0)*3.0;\n    return lap;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 p = ivec2(fragCoord);\n    \n    vec4 v = texelFetch(iChannel0, p, 0);\n    vec4 l = lap(p);\n    vec4 e = vec4(1, -1, 0, 0);\n    \n    vec2 ab = v.xy + (vec2(Da, Db) * l.xy + e.yx*v.x*v.y*v.y + e.xy*vec2(f*(1.0 - v.x), (k + f)*v.y)) * dt;\n    ab = min(ab, e.xx);\n    \n    float s = v.z*d + d * c*c * l.w * dt;\n    float h = v.w + s * dt;\n    \n    mat2 M = mat2(0.5, 0.0, 0.0, 0.1);\n    \n    vec2 V = (fragCoord - 0.5) - iMouse.zw;\n    if (iMouse.z > 0.0) e.w = 1.0;\n    if (iFrame < 1) {\n        fragColor = vec4(0.0,0,0,0);\n    } else {\n        fragColor = exp(-dot(V,M*V))*e.zwzz + exp(-0.05*dot(V,V))*e.zzzw + vec4(ab, s, h);\n    }\n}\n","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"vec4 lap(ivec2 p) {\n    // Compute the Laplacian of all four elements of iChannel0\n    ivec3 delta = ivec3(1, -1, 0);\n    /*vec4 lap = texelFetch(iChannel0, p + delta.xz, 0)\n             + texelFetch(iChannel0, p + delta.yz, 0)\n             + texelFetch(iChannel0, p + delta.zx, 0)\n             + texelFetch(iChannel0, p + delta.zy, 0)\n             - 4.0*texelFetch(iChannel0, p, 0);*/\n    vec4 lap = (texelFetch(iChannel0, p + delta.xz, 0)\n             +  texelFetch(iChannel0, p + delta.yz, 0)\n             +  texelFetch(iChannel0, p + delta.zx, 0)\n             +  texelFetch(iChannel0, p + delta.zy, 0))*0.5\n             + (texelFetch(iChannel0, p + delta.xx, 0)\n             +  texelFetch(iChannel0, p + delta.xy, 0)\n             +  texelFetch(iChannel0, p + delta.yx, 0)\n             +  texelFetch(iChannel0, p + delta.yy, 0))*0.25\n             -  texelFetch(iChannel0, p, 0)*3.0;\n    return lap;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 p = ivec2(fragCoord);\n    \n    vec4 v = texelFetch(iChannel0, p, 0);\n    vec4 l = lap(p);\n    vec4 e = vec4(1, -1, 0, 0);\n    \n    vec2 ab = v.xy + (vec2(Da, Db) * l.xy + e.yx*v.x*v.y*v.y + e.xy*vec2(f*(1.0 - v.x), (k + f)*v.y)) * dt;\n    ab = min(ab, e.xx);\n    \n    float s = v.z*d + d * c*c * l.w * dt;\n    float h = v.w + s * dt;\n    \n    mat2 M = mat2(0.5, 0.0, 0.0, 0.1);\n    \n    vec2 V = (fragCoord - 0.5) - iMouse.zw;\n    if (iMouse.z > 0.0) e.w = 1.0;\n    if (iFrame < 1) {\n        fragColor = vec4(0.0,0,0,0);\n    } else {\n        fragColor = exp(-dot(V,M*V))*e.zwzz + exp(-0.05*dot(V,V))*e.zzzw + vec4(ab, s, h);\n    }\n}\n","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"vec4 lap(ivec2 p) {\n    // Compute the Laplacian of all four elements of iChannel0\n    ivec3 delta = ivec3(1, -1, 0);\n    /*vec4 lap = texelFetch(iChannel0, p + delta.xz, 0)\n             + texelFetch(iChannel0, p + delta.yz, 0)\n             + texelFetch(iChannel0, p + delta.zx, 0)\n             + texelFetch(iChannel0, p + delta.zy, 0)\n             - 4.0*texelFetch(iChannel0, p, 0);*/\n    vec4 lap = (texelFetch(iChannel0, p + delta.xz, 0)\n             +  texelFetch(iChannel0, p + delta.yz, 0)\n             +  texelFetch(iChannel0, p + delta.zx, 0)\n             +  texelFetch(iChannel0, p + delta.zy, 0))*0.5\n             + (texelFetch(iChannel0, p + delta.xx, 0)\n             +  texelFetch(iChannel0, p + delta.xy, 0)\n             +  texelFetch(iChannel0, p + delta.yx, 0)\n             +  texelFetch(iChannel0, p + delta.yy, 0))*0.25\n             -  texelFetch(iChannel0, p, 0)*3.0;\n    return lap;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 p = ivec2(fragCoord);\n    \n    vec4 v = texelFetch(iChannel0, p, 0);\n    vec4 l = lap(p);\n    vec4 e = vec4(1, -1, 0, 0);\n    \n    vec2 ab = v.xy + (vec2(Da, Db) * l.xy + e.yx*v.x*v.y*v.y + e.xy*vec2(f*(1.0 - v.x), (k + f)*v.y)) * dt;\n    ab = min(ab, e.xx);\n    \n    float s = v.z*d + d * c*c * l.w * dt;\n    float h = v.w + s * dt;\n    \n    mat2 M = mat2(0.5, 0.0, 0.0, 0.1);\n    \n    vec2 V = (fragCoord - 0.5) - iMouse.zw;\n    if (iMouse.z > 0.0) e.w = 1.0;\n    if (iFrame < 1) {\n        fragColor = vec4(0.0,0,0,0);\n    } else {\n        fragColor = exp(-dot(V,M*V))*e.zwzz + exp(-0.05*dot(V,V))*e.zzzw + vec4(ab, s, h);\n    }\n}\n","name":"Buffer D","description":"","type":"buffer"}]}