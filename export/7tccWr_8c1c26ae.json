{"ver":"0.1","info":{"id":"7tccWr","date":"1659574548","viewed":271,"name":"faster than light 2","username":"Carandiru","description":"Fork of \"Faster than light\" by Carandiru\nFork of \"Waves of information\" by CoolerZ. https://shadertoy.com/view/Wd3Bz8","likes":2,"published":3,"flags":32,"usePreview":0,"tags":["waves","physics","cherenkov"],"hasliked":0,"parentid":"WsGBRW","parentname":"faster than light"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of \"Waves of information\" by CoolerZ. https://shadertoy.com/view/Wd3Bz8\n// 2020-11-29 03:26:02\n\n// Fork of \"Faster than light\" by Carandiru\n\n#define SPEED (0.1f*iTime*GOLDEN_RATIO)\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 luv = fragCoord/iResolution.xy;\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n\n    float background3 = electricfield(uv, iTime, SPEED);\n    float background2 = textureLod(iChannel0, luv, 0.0f).r;\n    float background1 = textureLod(iChannel0, luv, 0.0f).r;\n    float background0 = textureLod(iChannel0, luv, 0.0f).r;\n    \n    float background = background0 * background1;\n    background += background0 * background2;\n    background += background0 * background3;\n    background += background3;\n    background += background0 * background1 * background2 * background3;\n    \n    vec3 col = inferno(background) * 0.5f + inferno(background*background) * 0.5f;\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// https://www.shadertoy.com/view/WlfXRN\n\nvec3 inferno(float t) {\n\n    const vec3 c0 = vec3(0.0002189403691192265, 0.001651004631001012, -0.01948089843709184);\n    const vec3 c1 = vec3(0.1065134194856116, 0.5639564367884091, 3.932712388889277);\n    const vec3 c2 = vec3(11.60249308247187, -3.972853965665698, -15.9423941062914);\n    const vec3 c3 = vec3(-41.70399613139459, 17.43639888205313, 44.35414519872813);\n    const vec3 c4 = vec3(77.162935699427, -33.40235894210092, -81.80730925738993);\n    const vec3 c5 = vec3(-71.31942824499214, 32.62606426397723, 73.20951985803202);\n    const vec3 c6 = vec3(25.13112622477341, -12.24266895238567, -23.07032500287172);\n\n    return c0+t*(c1+t*(c2+t*(c3+t*(c4+t*(c5+t*c6)))));\n\n}\n\n#define STEP .25\n#define XLIM 1.\n#define YLIM 1.\n\n#define GOLDEN_RATIO (1.61803398874989484820)\n#define PI (3.14159265358979323846)\n#define sq(a) (a*a)\n\nfloat cherenkov_radiation(out float b, in float h, in float dt)\n{\n    const float c = 299792458.0f;  // universal constant for speed of light in a vacuum (m/s)\n    const float n = 1.33f; // refraction index of water\n    const float e = 10e9f; // total energy emitted\n    const float q = 48e5f; // energy in a particle\n    \n    // n = refraction index of medium\n    // c/n < v < c  : speed of particle is greater than speed of light\n    //\t\t\t\t  in the medium, but still less than the speed of light in a vacuum\n    // B = v/c\t\t: speed of particle in medium / speed of light\n    // cos = 1/(nB) : angle of emission\n    \n    // (modified) frank-tamm formula\n    // sq(d) * e      sq(q)                sq(c)\n    // ---------  =  -------  *  1 -  --------------- \n    //     d           4pi             sq(v) * sq(n)\n    \n    //                sq(q) * (sq(n)*sq(v) - sq(c))\n    //     d       = -------------------------------\n    //                  4 * e * pi * sq(n) * sq(v)\n    \n    float v = c/n;\n    v += (h) * v * dt;\n    v = min(v, c);\n    \n    b = (1.0f / (n * (v / c)));\n    \n    float d;\n    d = sq(q) * (sq(n)*sq(v) - sq(c));\n    d /= 4.0f * e * PI * sq(n) * sq(v);\n    \n    return (d);\n}\n\nfloat circ(vec2 p) {\n    const float r = .1;\n    return length(p)-r;\n}\n\nfloat linearstep(float edge0, float edge1, float x)\n{\n    return clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0);\n}\n\nfloat oracle(vec2 p, float t) {\n    float dist = circ(p+vec2(cos(t),sin(t)));\n    return linearstep(1.0, 0.0, dist);\n}\n\nfloat electricfield(vec2 p, float t, float s) {\n    float velocity = length(p) * t;\n    float acc = 0.;\n    float count = 0.;\n    for(float y = -YLIM; y <= YLIM; y+=STEP) {\n        for(float x = -XLIM; x <= XLIM; x+=STEP) {\n            vec2 q = vec2(x, y);\n            float d = length(p - q);\n            \n            float angle;\n        \tfloat rad = cherenkov_radiation(angle, d, STEP);\n            \n            float delay = rad/velocity;\n            acc += oracle(q, t*s+delay*GOLDEN_RATIO)/angle;\n            ++count;\n        }\n    }\n    return acc/count;\n}","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define SPEED (0.01f*GOLDEN_RATIO)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n\n    float background = electricfield(uv, iTime, SPEED);\n    \n    fragColor = vec4(background);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"XsXGR8","channel":0}],"code":"#define SPEED (0.1f*GOLDEN_RATIO)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n\n    float background = electricfield(uv, iTime, SPEED);\n    \n    fragColor = vec4(background);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"4sXGR8","channel":0}],"code":"#define SPEED (1.0f*GOLDEN_RATIO)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n\n    float background = electricfield(uv, iTime, SPEED);\n    \n    fragColor = vec4(background);\n}","name":"Buffer C","description":"","type":"buffer"}]}