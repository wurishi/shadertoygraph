{"ver":"0.1","info":{"id":"lsKfDK","date":"1530694571","viewed":319,"name":"raindrops 2D topview","username":"Draedrus","description":"raindrops","likes":1,"published":1,"flags":96,"usePreview":0,"tags":["raindrops"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdSXzt","filepath":"https://soundcloud.com/relaxationradiobeats/relaxing-rain-sound-no-music#t=0:5","previewfilepath":"https://soundcloud.com/relaxationradiobeats/relaxing-rain-sound-no-music#t=0:5","type":"musicstream","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 mv = 2.0*(iMouse.xy/iResolution.xy-0.5);\n\tvec2 inUV = texture(iChannel0, uv).rg;\n\tvec2 inUV2 = texture(iChannel0, uv+vec2(0.01, 0.0)).rg;\n\tvec2 inUV3 = texture(iChannel0, uv+vec2(0.0, 0.01)).rg;\n    vec3 col = texture(iChannel1, inUV).rgb;\n                         \n    vec3 N = normalize(vec3(inUV2.x-inUV.x, 0.025, inUV3.y-inUV.y));\n           \n    //float NoV = dot(N, normalize(vec3(mv.x, 1.0, mv.y)));\n    float NoV = dot(N, normalize(vec3(0.0, 1.0, 0.0)));\n\tcol *= max(0.0, NoV);\n    //float s = max(0.0, NoV);\n    \n    //col += s*0.2;\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n    //fragColor = vec4(max(0.0, NoV), max(0.0, NoV), max(0.0, NoV),1.0);\n    //fragColor = vec4(N, 1.0);\n    //fragColor = vec4(inUV2, 0.0, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// I just took the gold_noise from there in shadertoy and did the rest from scratch\n\n\n// Gold Noise Â©2017-2018 dcerisano@standard3d.com\n// - based on the Golden Ratio, PI and the Square Root of Two\n// - superior distribution\n// - fastest noise generator function\n// - works with all chipsets (including low precision)\n\nprecision lowp    float;\n\nfloat PHI = 1.61803398874989484820459 * 00000.1; // Golden Ratio   \nfloat PI  = 3.14159265358979323846264 * 00000.1; // PI\nfloat SQ2 = 1.41421356237309504880169 * 10000.0; // Square Root of Two\n\nfloat gold_noise(in vec2 coordinate, in float seed){\n    return fract(sin(dot(coordinate*(seed+PHI), vec2(PHI, PI)))*SQ2);\n}\n\n// procedural droplets shader\n\n#define CYCLE 0.1*length(sectorid)\n#define CYCLE_T_DROP 0.5\n#define CYCLE_T(t) ((fract(t*iTime)<CYCLE_T_DROP)?0.0:1.0)\n#define TIME(t)\tfract(t*iTime)\n\nconst float nSectors = 8.0; // 8 is good, 16 is too much, I tried 12 and liked it\n\n#define CYCLE_UV \\\nvec2(gold_noise(uv, floor(iTime*CYCLE)), \\\n     gold_noise(uv, floor(iTime*CYCLE)) \\\n     )\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 uvsector = fract(uv*nSectors);\n    vec2 sectorid = floor(uv*nSectors);\n    \n    float fDrop = CYCLE_T(CYCLE);\n    \n\t/*vec2 roffset = vec2(\n        gold_noise(sectorid+(1.0-fDrop)*CYCLE_UV, sectorid.x),\n        gold_noise(sectorid+(1.0-fDrop)*CYCLE_UV, sectorid.y)\n    );*/\n    vec2 roffset = vec2(\n        gold_noise(sectorid, floor(iTime*CYCLE)),\n        gold_noise(sectorid, floor(iTime*CYCLE))\n    );\n    \n    uvsector -= roffset;\n\n    float l=length(uvsector)*nSectors;\n\n    float v = sin(\n       (l*l-fDrop*iTime*5.0)\n    \t)/(l*(TIME(CYCLE)+1.0))\n    ;\n    \n    vec2 uvsampcy = uv+vec2(cos(iTime), sin(iTime));\n    \n    vec2 globalwateroffsetuv = \n        texture(iChannel0, uv+0.02*uvsampcy).rg*0.08; // 0.08\n    vec2 uvOut = uv+fDrop*v*0.01+globalwateroffsetuv;\n\n    // Output to screen\n    fragColor = vec4(uvOut, 0.0,1.0);\n}","name":"Buf A","description":"","type":"buffer"}]}