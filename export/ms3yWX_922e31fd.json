{"ver":"0.1","info":{"id":"ms3yWX","date":"1695562306","viewed":39,"name":"value noise^2 (for terrain)","username":"18smith111","description":"looking at what a squared perlin/noise function would look like to investigate how it would affect terrain synthesis~\n(when deriving terrain from a basis of perlin noise)\n","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["test","terrain","perlin","squared"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Hash function\nfloat hash(vec2 p) \n{\n\n    vec2 tr = fract(p * vec2(12.9898, 78.233));\n    \n    float LargePrime = 522627.26253;\n    float sum = tr.x+tr.y;\n    \n    return fract( sin(sum)*LargePrime );\n    \n}\n\n// Perlin noise function\nfloat SimpleNoise(vec2 p,float scale) \n{\n    p*=scale;\n    \n    vec2 i = floor(p);\n    vec2 f = fract(p);\n\n    // Calculate the gradients at the corners of the cell\n    float topLeft = hash(i);\n    float topRight = hash(i + vec2(1.0, 0.0));\n    float bottomLeft = hash(i + vec2(0.0, 1.0));\n    float bottomRight = hash(i + vec2(1.0, 1.0));\n\n    // Interpolate along x-axis\n    float v1 = mix(topLeft, topRight, f.x);\n    float v2 = mix(bottomLeft, bottomRight, f.x);\n\n    // Interpolate along y-axis\n    return mix(v1, v2, f.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n    float t = iTime/2.0;\n    \n    float f = SimpleNoise(uv,60.0+t)*SimpleNoise(uv,10.0+t);\n    \n    vec3 col = vec3(f*1.3, f*1.24, f);\n\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}