{"ver":"0.1","info":{"id":"DdXfR7","date":"1688558012","viewed":35,"name":"Boxes in and out v.2","username":"darch","description":"take two of: https://www.shadertoy.com/view/cdffzM","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["2d","rectangle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926538\nmat2 rotate(float a) {\n    return mat2(cos(a), -sin(a), sin(a), cos(a));\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    float box = length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n    return 1.-step(0.005, abs(box)); // added outline and white on black\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - iResolution.xy*0.5) /iResolution.y;\n    vec3 col = vec3(0.0);\n    \n    //uv *= rotate(PI/4.); // rotate 45 degrees \n    \n    float spd = iTime * 0.25; // animation speed\n\n    vec2 s = vec2(0.1); // size of square\n    float minS = 0.1; // minimum size\n    s *= abs(vec2(sin(spd),cos(spd))); // animate all boxes\n    float d = sdBox(uv, s + minS); \n\n    s += vec2(.1, .2); // offset for rectangle\n    s *= abs(vec2(sin(spd),cos(spd))); // animate rectangles\n    d += sdBox(uv, s + minS);\n    d += sdBox(uv, s.yx + minS); // swizzle yx for 2nd rectangle\n    \n    col = vec3(d);\n    \n    // Adding some colors\n    col.rg = uv*rotate(spd) + abs(sin(spd)*0.5);\n    //col.rg = smoothstep(0.4,0.6, col.rg);\n    col.b = d;\n    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}