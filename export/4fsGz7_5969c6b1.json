{"ver":"0.1","info":{"id":"4fsGz7","date":"1702905576","viewed":23,"name":"Metaballs in grid","username":"karakure178","description":"Metaballs were represented by blurring circles arranged in a grid.","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["circle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    vec4 tex = texture(iChannel1,uv);\n    \n    \n    if(float(tex) == 0.0){\n        fragColor = tex;\n    }else{\n        fragColor = vec4(col,1.0);\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float circle(in vec2 _st, in float _radius){\n    vec2 l = _st-vec2(0.5);\n    return 1.-smoothstep(_radius-(_radius*0.01),\n                         _radius+(_radius*0.01),\n                         dot(l,l)*4.0);\n}\n\n\n// 参考:https://thebookofshaders.com/08/\n// https://qiita.com/7CIT/items/cd2eef52c1902dfd773d\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv *= 10.0;\n    uv = fract(uv);\n    vec3 color = vec3(circle(uv,0.5));\n    \n    \n    vec2 st = fragCoord/iResolution.xy;\n    vec3 color2 = vec3(0.0);\n    vec2 translate = vec2(cos(iTime),sin(iTime));\n    st += translate*0.35;    \n    color2 += vec3(circle(st,0.1));\n\n    vec3 color3 = color+color2;// 加算\n    //vec3 color3 = color+color2;// 乗算\n\n    fragColor = vec4(color3,1.0);\n}\n\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// 参考:https://www.shadertoy.com/view/Xltfzj\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float Pi = 6.28318530718; // Pi*2\n    \n\n    float Directions = 16.0; // BLUR DIRECTIONS (Default 16.0 - More is better but slower)\n    float Quality = 20.0; // BLUR QUALITY (Default 4.0 - More is better but slower)\n    float Size = 20.0; // BLUR SIZE (Radius)\n   \n    vec2 Radius = Size/iResolution.xy;\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 Color = texture(iChannel0, uv);\n    \n    for( float d=0.0; d<Pi; d+=Pi/Directions)\n    {\n\t\tfor(float i=1.0/Quality; i<=1.0; i+=1.0/Quality)\n        {\n\t\t\tColor += texture( iChannel0, uv+vec2(cos(d),sin(d))*Radius*i);\t\t\n        }\n    }\n    \n    Color /= Quality * Directions - 15.0;\n    float c = step(0.3, float(Color));\n    fragColor =  vec4(c, c, c, 1.0);\n    //fragColor =  Color;// ブラー確認用\n\n}","name":"Buffer B","description":"","type":"buffer"}]}