{"ver":"0.1","info":{"id":"clsfzB","date":"1696526716","viewed":37,"name":"Sam's Julia Set Test","username":"samkhorner","description":"Progression of a quadratic polynomial variant of the julia set.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 colourGradient[15] = vec3[15](vec3(0.098,0.027,0.102),vec3(0.035,0.004,0.184),vec3(0.016,0.016,0.286),vec3(0.0,0.027,0.392),vec3(0.047,0.173,0.541),vec3(0.094,0.322,0.694),vec3(0.224,0.49,0.82),vec3(0.525,0.71,0.898),vec3(0.827,0.925,0.973),vec3(0.945,0.914,0.749),vec3(0.973,0.788,0.373),vec3(1.0,0.667,0.0),vec3(0.8,0.502,0.0),vec3(0.6,0.341,0.0),vec3(0.416,0.204,0.012)); \nfloat pi = 3.14159;\n\nvec2 zSquared(in vec2 z, in float n){\n    // Where x is real and y is imaginary\n    vec2 result = vec2(0,0);\n    result.x = pow(pow(z.x, 2.) + pow(z.y, 2.), n / 2.) * cos(n * atan(z.y, z.x));\n    result.y = pow(pow(z.x, 2.) + pow(z.y, 2.), n / 2.) * sin(n * atan(z.y, z.x));\n    return result;\n}\n\nvec3 juliaSet( in vec2 z, in int df, in float n, in float a) {\n    vec2 c = vec2(0.7885 * cos(a), 0.7885 * sin(a));\n    int i = 0;// Number of iterations\n    float dist = 10e5f;\n    float r = sqrt(n * n) + n;\n    // Iterations < max && |z| < 2\n    while(i < df && z.x * z.x + z.y * z.y <= r * r){\n        z = zSquared(z, n) + c;\n        i += 1;\n        dist = min(dist, length(z));\n    }\n    vec3 colA = colourGradient[15 - int(clamp(sqrt(dist),0.,1.) * 15. - 1.)-2];\n    vec3 colB = colourGradient[15 - int(clamp(sqrt(dist),0.,1.) * 15. - 1.)-1];\n    float interp = clamp(sqrt(dist),0.,1.) * 15. - 1. - float(int(clamp(sqrt(dist),0.,1.) * 15. - 1.));\n    return mix(colB, colA, interp);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord/iResolution.xy);\n    uv.x *= iResolution.x/iResolution.y;\n    \n    // Ensures the correct scale\n    uv.x = uv.x * 2.5 - 2.25;\n    uv.y = uv.y * 2.5 - 1.25;\n\n    vec3 col = juliaSet(uv,50,2., iTime / 5.);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}