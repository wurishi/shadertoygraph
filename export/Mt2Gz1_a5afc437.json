{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"texture","id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"//quantity of cells\n#define N 8.0\n\nvec2 rd(in vec2 p) {\n\treturn texture(iChannel0, (p + 0.5)/256.0, -100.0 ).xy;\n}\n\nfloat voronoi(in vec2 x) {\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n    \n    float res = 8.0;\n    \n    for(int i = -1; i <= 1; i++) {\n        for(int j = -1; j <= 1; j++) {\n        \tvec2 b = vec2(i, j);\n            vec2 r = vec2(b) + (0.5 + 0.5 * cos(iTime + 8.0*rd(p + b))) - f;\n            float d = dot(r, r);\n            \n            res = min(d, res);\n        }\n    }\n    \n    return sqrt(res);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfloat c = voronoi(N * uv);\n    fragColor = vec4(vec3(c),1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"Mt2Gz1","date":"1427058651","viewed":217,"name":"Smooth Voronoi Test","username":"Nihilus","description":"Smooth Voronoi Test, need to learn a lot more for a good implementation.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["voronoi"],"hasliked":0,"parentid":"","parentname":""}}