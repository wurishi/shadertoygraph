{"ver":"0.1","info":{"id":"WtfXzX","date":"1563661736","viewed":491,"name":"Probability Map Rotated Rect","username":"paniq","description":"plotting the probability of point-intersecting an arbitrarily oriented rectangle","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["map","square","probability"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 rotate(vec2 v, float a) {\n    float s = sin(a); float c = cos(a);\n    return vec2(\n        c * v.x - s * v.y,\n        s * v.x + c * v.y\n\t\t);\n}\n\nfloat rect(vec2 p) {\n#if 1\n    p = abs(p) - vec2(0.7,mix(0.01,0.7,sin(iTime)*0.5+0.5));\n    return step(max(p.x,p.y), 0.0);\n#else\n    // shape that when rotated produces an approximate gaussian\n    // thanks to sean barrett for this\n    float d = length(p);\n    float width = exp(-d*d)*d*2.0;\n    return abs(p.y) < width/2.0 ? 1.0 : 0.0;    \n#endif\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = uv*2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    uv *= 2.0;\n    \n    const int N = 127;\n    float d = 0.0;\n    for (int i = 0; i < N; ++i) {\n        vec2 p = rotate(uv, radians(float(i)*360.0/float(N)));\n        d += rect(p);\n    }\n    d /= float(N);\n    // Output to screen\n    fragColor = vec4(mix(vec3(0.0,0.0,1.0),vec3(1.0,0.0,0.0),d),1.0);\n}","name":"Image","description":"","type":"image"}]}