{"ver":"0.1","info":{"id":"ctSGR3","date":"1673572342","viewed":115,"name":"Rainbow clouds 2","username":"ianertson","description":"Some raymarching,\nPan around using the mouse.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["clouds","rainbow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sfGzn","filepath":"/media/a/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png","previewfilepath":"/media/ap/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3Rr","filepath":"/media/a/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin","previewfilepath":"/media/ap/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin","type":"volume","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define NEAR -1.2\n\n\nfloat cubeNoise(vec3 p) {\n    p *= 0.33;\n    vec3 rgb = texture(iChannel1, p).rgb;\n    vec3 rgb2 = texture(iChannel1, p*rgb).rgb;\n    rgb2 *= textureLod(iChannel1, (p+rgb)/32.0, 0.0).r;\n    \n    rgb = mix(rgb, rgb2, clamp01(1.1*smoothstep(0.0, 1.0, rgb2.x)));\n    \n    \n    \n    return mix(rgb.r, rgb.g, smoothstep(0.0, 1.0, rgb.b));\n}\n\n\nfloat sdf(vec3 p) {\n    float T = iTime*0.25;\n    float n0 = cubeNoise(p);//perlin_get3d(p, 5.0, 2, 73191);\n    \n    \n    float x = cubeNoise((p*0.1+n0)*0.01)*1.6;\n    float y = cubeNoise((p*x-n0)*0.01)*1.6;\n    float z = cubeNoise((p*0.1-atan(x, y))*0.01)*1.6;\n    \n    vec3 off = vec3(cos(T+n0), sin(T+n0), cos((T+n0)+2.415));\n    float n = cubeNoise(p+off);//perlin_get3d(p+off, 5.0, 2, 92154);\n    return (1.5 - length(p*vec3(0.3*x,1.0*y,0.3*z)) + n*0.7) * 0.3;\n}\n\nfloat getNoise(vec2 p) {\n    vec2 id = floor(p);\n    vec2 lv = smoothstep(0.0, 1.0, fract(p));\n    int seed = 223;\n    \n    float a = float(noise2(int(id.x), int(id.y), seed)) / 256.0;\n    float b = float(noise2(int(id.x)+1, int(id.y)+0, seed)) / 256.0;\n    float c = mix(a, b, lv.x);\n    \n    float d = float(noise2(int(id.x)+0, int(id.y)+1, seed)) / 256.0;\n    float e = float(noise2(int(id.x)+1, int(id.y)+1, seed)) / 256.0;\n    float f = mix(d, e, lv.x);\n    \n    float v = mix(c, f, lv.y);\n    \n    return v;\n    \n}\n\nvec3 getColor(vec3 p) {\n    p *= 1.6;\n    float x = getNoise(vec2(p.x, p.z));\n    float y = getNoise(vec2(p.y, p.z));\n    float z = getNoise(vec2(p.x, p.y));\n    \n    float a = cubeNoise(p*vec3(x, y, z)*0.01);\n    float b = cubeNoise(p-vec3(y, x, z)*0.01);\n    float c = cubeNoise(p+vec3(x, z, y)*0.01);\n    \n    vec3 col = vec3(x, y, z);\n    vec3 col2 = vec3(a, b, c);\n    col = (col+col2)/2.0;\n    return col*1.6;\n}\n\n\nbool march(in vec3 origin,\n    in vec3 dir,\n    inout float depth,\n    inout vec3 normal,\n    inout vec3 pos,\n    inout vec3 color\n) {\n    pos = origin;\n    color = vec3(0.0);\n    int steps = 64;\n    const int light_steps = 3;\n    \n    float absorb = 62.025;\n    float far = 39.0;\n    float stepSize = far/float(steps);\n    float trans = 1.0;\n    vec3 cloudColor = vec3(0.9, 0.9, 0.8);\n    \n    float lightFar= 2.0231;\n    float LightStepSize = lightFar/float(light_steps);\n    vec3 sun_dir = normalize(vec3(0.0, 0.1, 0.0));\n    vec3 sun_col = vec3 (1.0, 0.7, 0.5);\n    \n    for (int i = 0; i < steps; i++) {\n        depth = sdf(pos);\n        vec3 curColor = getColor(pos);\n        \n        if (length(curColor) <= 0.01) break;\n        \n        if (depth > 0.0) {\n            float density = depth / float(steps);\n            float opacity = density * absorb;\n            \n            trans *= 1.0 - opacity; \n        \tif (trans <= 0.01) break;\n            \n            float nextTrans = 1.0;\n            for (int j=0; j<light_steps; j++)\n            {\n                vec3 lightPos = pos + sun_dir*LightStepSize*float(j);\n            \tfloat lightDepth = sdf(lightPos);\n                if (lightDepth > 0.0)\n                {\n                    float lightDensity = lightDepth/float(steps);\n                    float lightOpacity = lightDensity * absorb; \n                \tnextTrans *= 1.0 - lightOpacity;\n                    if (nextTrans<=0.02) break;\n                }\n            }\n            \n            color += (cloudColor*opacity*trans*curColor)+(depth*0.06);\n        }\n        \n        pos += dir*stepSize;\n        \n    }\n    \n\n    color *= color;\n    color = clamp(color, 0.0, 0.9996);\n    return depth > 0.001;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 p = (2.0*fragCoord -iResolution.xy)/iResolution.y;\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    \n    Ray ray;\n    vec3 lookDir = vec3(0.0, 0.33, -1.0);\n    vec3 offset = 0.5*vec3(cos(iTime*0.1), sin(iTime*0.1), cos(iTime*0.1));\n    \n    lookDir += offset;\n    \n    if (iMouse.z > 0.001) {\n        float rx = (iMouse.x-iResolution.x*0.5) / iResolution.x;\n        float ry = (iMouse.y-iResolution.y*0.5) / iResolution.y;\n        \n        vec4 qx = makeQuat(rx*3.14, vec3(1.0, 0.0, 0.0));\n        vec4 qy = makeQuat(ry*3.14, vec3(0.0, 1.0, 0.0));\n        \n        lookDir = qx.xyz+qy.xyz;\n        lookDir.z = -1.0;\n        \n        \n      \n    }\n    \n    lookDir.y = clamp(lookDir.y, -0.11, 0.33);\n    lookDir = normalize(lookDir);\n    \n    vec2 res = iResolution.xy;\n    float fov = 45.0;\n    float near = NEAR;\n    float far = 400.0;\n    \n    getPrimaryRay(\n        vec3(0.0, 1.5, -6.0),\n        fragCoord.xy,\n        res,\n        lookDir,\n        fov,\n        near,\n        far,\n        ray\n    ); \n    \n    float depth = 0.0;\n    vec3 normal = vec3(0.0);\n    vec3 pos = ray.orig;\n    vec3 color = vec3(0.0);\n    \n    bool hit = march(ray.orig,\n        ray.dir,\n        depth,\n        normal,\n        pos,\n        color\n    );\n    \n    float mag = float(hit)+length(color);\n    float imag = max(0.0, 1.0 - mag);\n    \n    vec3 cubeDir = camera(ray.orig, ray.dir) * normalize(vec3(p, -1.0));// * normalize(vec3(uv, -1.0));\n    \n    vec3 bg = texture(iChannel0, normalize(cubeDir)*-1.0).rgb;\n    \n    color = mix(color, bg, 0.5*smoothstep(0.0, 1.0, imag));\n    \n    color += (color*luma(color))*0.89;\n    color = aces(color);\n    color = gammaCorrect(color, 1.5);\n    //color = unreal(color);\n    \n\n    // Output to screen\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"int HASH[256] = int[256](\n    208, 34,  231, 213, 32,  248, 233, 56,  161, 78,  24,  140, 71,  48,  140,\n    254, 245, 255, 247, 247, 40,  185, 248, 251, 245, 28,  124, 204, 204, 76,\n    36,  1,   107, 28,  234, 163, 202, 224, 245, 128, 167, 204, 9,   92,  217,\n    54,  239, 174, 173, 102, 193, 189, 190, 121, 100, 108, 167, 44,  43,  77,\n    180, 204, 8,   81,  70,  223, 11,  38,  24,  254, 210, 210, 177, 32,  81,\n    195, 243, 125, 8,   169, 112, 32,  97,  53,  195, 13,  203, 9,   47,  104,\n    125, 117, 114, 124, 165, 203, 181, 235, 193, 206, 70,  180, 174, 0,   167,\n    181, 41,  164, 30,  116, 127, 198, 245, 146, 87,  224, 149, 206, 57,  4,\n    192, 210, 65,  210, 129, 240, 178, 105, 228, 108, 245, 148, 140, 40,  35,\n    195, 38,  58,  65,  207, 215, 253, 65,  85,  208, 76,  62,  3,   237, 55,\n    89,  232, 50,  217, 64,  244, 157, 199, 121, 252, 90,  17,  212, 203, 149,\n    152, 140, 187, 234, 177, 73,  174, 193, 100, 192, 143, 97,  53,  145, 135,\n    19,  103, 13,  90,  135, 151, 199, 91,  239, 247, 33,  39,  145, 101, 120,\n    99,  3,   186, 86,  99,  41,  237, 203, 111, 79,  220, 135, 158, 42,  30,\n    154, 120, 67,  87,  167, 135, 176, 183, 191, 253, 115, 184, 21,  233, 58,\n    129, 233, 142, 39,  128, 211, 118, 137, 139, 255, 114, 20,  218, 113, 154,\n    27,  127, 246, 250, 1,   8,   198, 250, 209, 92,  222, 173, 21,  88,  102,\n    219);\n\nint noise2(int x, int y, int seed) {\n  int yindex = (y + seed) % 256;\n  if (yindex < 0) yindex += 256;\n  int xindex = (HASH[yindex] + x) % 256;\n  if (xindex < 0) xindex += 256;\n  return HASH[xindex];\n}\n\nfloat lin_inter(float x, float y, float s) {\n  return x + s * (y - x);\n}\n\nfloat smooth_inter(float x, float y, float s) {\n  return lin_inter(x, y, s * s * (3. - 2. * s));\n}\n\nfloat noise2d(float x, float y, int seed) {\n  int x_int = int(floor(x));\n  int y_int = int(floor(y));\n  float x_frac = float(x - float(x_int));\n  float y_frac = y - float(y_int);\n  int s = noise2(x_int, y_int, seed);\n  int t = noise2(x_int + 1, y_int, seed);\n  int u = noise2(x_int, y_int + 1, seed);\n  int v = noise2(x_int + 1, y_int + 1, seed);\n  float low = smooth_inter(float(s), float(t), float(x_frac));\n  float high = smooth_inter(float(u), float(v), float(x_frac));\n  return smooth_inter(float(low), float(high), float(y_frac));\n}\n\n\n\nfloat perlin_get2d(vec2 p, float freq, int depth, int seed) {\n  depth = min(depth, 8); // too slow otherwise\n  float xa = p.x * freq;\n  float ya = p.y * freq;\n  float amp = 1.0;\n  float fin = 0.;\n  float div = 0.0;\n  for (int i = 0; i < depth; i++) {\n    div += 256. * amp;\n    fin += noise2d(xa, ya, seed) * amp;\n    amp /= 2.;\n    xa *= 2.;\n    ya *= 2.;\n  }\n  return clamp(fin / div, -1.0, 1.0);\n}\n\nfloat perlin_get3d(vec3 p, float freq, int depth, int seed) {\n\n    float a = perlin_get2d(vec2(p.x, p.z), freq, depth, seed);\n    float b = perlin_get2d(vec2(p.y, p.z), freq, depth, seed);\n    float c = perlin_get2d(vec2(p.x, p.y), freq, depth, seed);\n    \n    return (a+b+c)/3.0;\n   \n}\n\nfloat perlin_get2d(vec2 p, float freq, float depth, float seed) {\n  return perlin_get2d(p, freq, int(depth), int(seed));\n}\n\nvec3 perlin_vec3(vec2 p, float freq, int depth, int seed) {\n  float x = perlin_get2d(p, freq, depth, seed);\n  float y = perlin_get2d(p, freq, depth, int(seed+int(freq)));\n  float z = perlin_get2d(p, freq, depth, int(seed+int(ceil(freq))+int(ceil(freq))));\n  \n  return vec3(x, y, z);\n}\n\nstruct RayResult {\n    vec3 point;\n    vec3 normal;\n    float dist;\n    vec2 uv;\n};\n\nstruct Ray {\n    vec3 dir;\n    vec3 orig;\n    RayResult result;\n};\n\nstruct Light {\n    vec3 pos;\n    float strength;\n    vec3 color;\n};\n\nmat4 proj(float fovy,\n                      float aspect,\n                      float nearZ,\n                      float farZ) {\n                      \n   \n  mat4 dest = mat4(0.0);\n  float f  = 1.0f / tan(fovy * 0.5f);\n  float fn = 1.0f / (nearZ - farZ);\n\n  dest[0][0] = f / aspect;\n  dest[1][1] = f;\n  dest[2][2] =-farZ * fn;\n  dest[2][3] = 1.0f;\n  dest[3][2] = nearZ * farZ * fn;\n  return dest;\n    \n}\n\nmat4 look(vec3 eye, vec3 center, vec3 up) {\nmat4 dest = mat4(0.0);\n  vec3 f = vec3(0.0); vec3 u = vec3(0.0); vec3 s = vec3(0.0);\n\n  f = normalize(center - eye);\n\ns = cross(up, f);\n  u = cross(f, s);\n\n  dest[0][0] = s[0];\n  dest[0][1] = u[0];\n  dest[0][2] = f[0];\n  dest[1][0] = s[1];\n  dest[1][1] = u[1];\n  dest[1][2] = f[1];\n  dest[2][0] = s[2];\n  dest[2][1] = u[2];\n  dest[2][2] = f[2];\n  dest[3][0] =-dot(s, eye);\n  dest[3][1] =-dot(u, eye);\n  dest[3][2] =-dot(f, eye);\n  dest[0][3] = dest[1][3] = dest[2][3] = 0.0f;\n  dest[3][3] = 1.0f;\n  \n  return dest;\n}\n\n\n\nvoid getPrimaryRay(\n    vec3 origin,\n    vec2 coord,\n    vec2 res,\n    vec3 lookDir,\n    float fov,\n    float near,\n    float far,\n    inout Ray ray\n) {\n    float x = coord.x;\n    float y = coord.y;\n    float w = res.x;\n    float h = res.y;\n    \n    float aspect = w / h;\n\n   // vec3 origin = vec3(0.0, 0.0, 1.0);\n   \n    mat4 projection = proj(radians(fov), aspect, near, far);\n    mat4 view = look(lookDir, vec3(0.0), vec3(0, 1, 0));\n    mat4 iprojection = inverse(projection * view);\n    \n    float ray_x = ((x - w / 2.0)) / w;\n    float ray_y = ((y - h / 2.0)) / h;\n    \n    vec2 pos = vec2(ray_x, ray_y);\n    \n    ray.orig = origin;\n    vec4 dir = vec4(pos/0.5, 1.0, 1.0);\n    dir = iprojection * dir;\n    \n    ray.dir = normalize(dir.xyz);\n\n\n}\n\nvec4 matQuat(mat3 m) {\n  float trace, r, rinv;\n  vec4 dest = vec4(0.0);\n\n  /* it seems using like m12 instead of m[1][2] causes extra instructions */\n\n  trace = m[0][0] + m[1][1] + m[2][2];\n  if (trace >= 0.0f) {\n    r       = sqrt(1.0f + trace);\n    rinv    = 0.5f / r;\n\n    dest[0] = rinv * (m[1][2] - m[2][1]);\n    dest[1] = rinv * (m[2][0] - m[0][2]);\n    dest[2] = rinv * (m[0][1] - m[1][0]);\n    dest[3] = r    * 0.5f;\n  } else if (m[0][0] >= m[1][1] && m[0][0] >= m[2][2]) {\n    r       = sqrt(1.0f - m[1][1] - m[2][2] + m[0][0]);\n    rinv    = 0.5f / r;\n\n    dest[0] = r    * 0.5f;\n    dest[1] = rinv * (m[0][1] + m[1][0]);\n    dest[2] = rinv * (m[0][2] + m[2][0]);\n    dest[3] = rinv * (m[1][2] - m[2][1]);\n  } else if (m[1][1] >= m[2][2]) {\n    r       = sqrt(1.0f - m[0][0] - m[2][2] + m[1][1]);\n    rinv    = 0.5f / r;\n\n    dest[0] = rinv * (m[0][1] + m[1][0]);\n    dest[1] = r    * 0.5f;\n    dest[2] = rinv * (m[1][2] + m[2][1]);\n    dest[3] = rinv * (m[2][0] - m[0][2]);\n  } else {\n    r       = sqrt(1.0f - m[0][0] - m[1][1] + m[2][2]);\n    rinv    = 0.5f / r;\n\n    dest[0] = rinv * (m[0][2] + m[2][0]);\n    dest[1] = rinv * (m[1][2] + m[2][1]);\n    dest[2] = r    * 0.5f;\n    dest[3] = rinv * (m[0][1] - m[1][0]);\n  }\n  \n  return dest;\n}\n\n\nvec4 quatFor(vec3 dir, vec3 up) {\n    mat3 m = mat3(vec3(0.0), vec3(0.0), normalize(dir)*-1.0);\n    \n    m[0] = normalize(cross(up, m[2]));\n    m[1] = cross(m[2], m[0]);\n    \n    return matQuat(m);\n    \n    \n}\n\nvec4 makeQuat( float angle, vec3 axis) {\n  vec3 k;\n  float a, c, s;\n  vec4 q = vec4(0.0);\n\n  a = angle * 0.5f;\n  c = cos(a);\n  s = sin(a);\n\n  k = normalize(axis);\n\n  q[0] = s * k[0];\n  q[1] = s * k[1];\n  q[2] = s * k[2];\n  q[3] = c;\n  \n  return q;\n}\n\nmat3 camera(vec3 cameraPos, vec3 lookAtPoint) {\n\tvec3 cd = normalize(lookAtPoint - cameraPos);\n\tvec3 cr = normalize(cross(vec3(0, 1, 0), cd));\n\tvec3 cu = normalize(cross(cd, cr));\n\t\n\treturn mat3(-cr, cu, -cd);\n}\n\nfloat clamp01(float v) { return clamp(v, 0.0, 1.0); }\nvec3 clamp01(vec3 v) { return vec3(clamp01(v.x), clamp01(v.y), clamp01(v.z)); }\n\n\nfloat luma(vec3 color) {\n  return dot(color, vec3(0.299, 0.587, 0.114));\n}\n\nvec3 unreal(vec3 x) {\n  return x / (x + 0.155) * 1.019;\n}\n\nvec3 aces(vec3 x) {\n  const float a = 2.51;\n  const float b = 0.03;\n  const float c = 2.43;\n  const float d = 0.59;\n  const float e = 0.14;\n  return clamp((x * (a * x + b)) / (x * (c * x + d) + e), 0.0, 1.0);\n}\n\nvec3 gammaCorrect(vec3 color, float gamma) {\n  return pow(color, vec3(1.0 / gamma));\n}\n\nvec3 toLinear(vec3 sRGB)\n{\n    bvec3 cutoff = lessThan(sRGB, vec3(0.04045));\n    vec3 higher = pow((sRGB + vec3(0.055))/vec3(1.055), vec3(2.4));\n    vec3 lower = sRGB/vec3(12.92);\n\n    return mix(higher, lower, cutoff);\n}\n\nvec3 fromLinear(vec3 linearRGB)\n{\n    bvec3 cutoff = lessThan(linearRGB, vec3(0.0031308));\n    vec3 higher = vec3(1.055)*pow(linearRGB, vec3(1.0/2.4)) - vec3(0.055);\n    vec3 lower = linearRGB * vec3(12.92);\n\n    return mix(higher, lower, cutoff);\n}\n","name":"Common","description":"","type":"common"}]}