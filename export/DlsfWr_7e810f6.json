{"ver":"0.1","info":{"id":"DlsfWr","date":"1696709830","viewed":75,"name":"Starfield_Practice","username":"IrrelevantTuna","description":"Starfield","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["stars"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define NUM_LAYERS 8.\nmat2 Rot(float a){\n       float s=sin(a), c=cos(a);\n       return mat2(c, -s, s, c);\n}\n\nfloat Star (vec2 uv, float flare){\n  float d = length(uv);\n    float m = .05/d;//creates first star\n    \n    float rays = max(0., 1.-abs(uv.x*uv.y*1000.)); //creates rays from star\n    m += rays*flare;\n    uv *= Rot(3.1415/4.);\n    \n    float rays1 = max(0., 1.-abs(uv.x*uv.y*1000.)); //creates rays from star at 45 degrees\n    m += rays1*.3*flare;\n    \n    m*=smoothstep(1., .2, d);\n    return m;\n    \n    }\n    \nfloat Hash21(vec2 p){//create pseudorandom number generator\n    p = fract(p*vec2(123.34, 456.21));\n    p += dot(p, p+45.32);\n    return fract(p.x*p.y);\n}\nvec3 StarLayer(vec2 uv) {\n vec3 col = vec3(0); //sets background to black\n    \n    vec2 gv = fract(uv) -.5; //divides into 9x9 grid\n    vec2 id = floor(uv);//creates id from integer component of each grid square\n    \n        for (int y=-1; y<=1; y++){\n            for(int x=-1; x<=1; x++){\n            vec2 offs = vec2(x, y);\n            \n            float n = Hash21(id+offs); //creates random number 0->1\n            float size = fract(n*345.32);\n            float star = Star(gv-offs-vec2(n, fract(n*34.))+.5, smoothstep(.9, 1., size)); //adds star to random point in box\n            vec3 color = sin(vec3(.2,.3,.9)*fract(n*2345.2)*123.2)*.5+.5;\n            color = color*vec3(.5,0.1,.5);\n            star *= sin(iTime * .03 + n * 6.2831)*.5 +.5; \n            col += star * size * color;\n            }\n        }\n        return col;\n    \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;//normalize box coordinates\n    vec2 M = (iMouse.xy-iResolution.xy*.5)/iResolution.y;\n    \n    float t = iTime*.002;\n    uv += M * .4;\n    uv *= Rot(t);\n    \n    vec3 col = vec3(0);\n    \n    for (float i=0.; i<1.; i+=1./NUM_LAYERS){\n        float depth = fract(i+t);\n        float scale = mix(20., .5, depth);\n        float fade = depth*smoothstep(1., .9, depth) ;\n        col += StarLayer(uv*scale+i*453.2-M)*fade;\n        \n    }\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}