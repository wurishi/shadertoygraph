{"ver":"0.1","info":{"id":"XtSBWh","date":"1515459863","viewed":415,"name":"7/2018","username":"rimina","description":"This shader is part of my daily shader challenge.\n\nToday I tried out ambient occlusion method from https://www.shadertoy.com/view/4sdGWN . I'm not quite sure if I got it working right with deformed marched plane. But at least the outcome looks nice.","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["landscape","dailyshader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define STEPS 64\n#define FAR 60.0\n#define EPSILON 0.5/iResolution.x\n\n#define HASHSCALE1 0.1031\n\nconst float PI = 3.14159265359;\n\n//Distance functions and helpper functions from Mercury's SDF library\n//http://mercury.sexy/hg_sdf/\n\n// Sign function that doesn't return 0\nfloat sgn(float x) {\n\treturn (x < 0.0)?-1.0:1.0;\n}\n\n\n// Plane with normal n (n is normalized) at some distance from the origin\nfloat fPlane(vec3 p, vec3 n, float distanceFromOrigin) {\n\treturn dot(p, n) + distanceFromOrigin;\n}\n\n// 3D noise function (IQ)\nfloat noise(vec3 p){\n\tvec3 ip = floor(p);\n    p -= ip;\n    vec3 s = vec3(7.0,157.0,113.0);\n    vec4 h = vec4(0.0, s.yz, s.y+s.z)+dot(ip, s);\n    p = p*p*(3.0-2.0*p);\n    h = mix(fract(sin(h)*43758.5), fract(sin(h+s.x)*43758.5), p.x);\n    h.xy = mix(h.xz, h.yw, p.y);\n    return mix(h.x, h.y, p.z);\n}\n\nfloat dist(vec3 p){\n    float plane = fPlane(p, vec3(0.0, 1.0, 0.0), 1.0)-\n        smoothstep(0.0, 1.0, noise(p*(sqrt(5.0)*0.5 + 0.5)*0.2+iTime*0.25));\n    return plane;\n}\n\nvec3 normals(vec3 p){\n    vec3 eps = vec3(0.001, 0.0, 0.0);\n    return normalize(vec3(\n        dist(p+eps.xyy)-dist(p-eps.xyy),\n        dist(p+eps.yxy)-dist(p-eps.yxy),\n        dist(p+eps.yyx)-dist(p-eps.yyx)\n    ));\n}\n\n//Ambient occlusion method from https://www.shadertoy.com/view/4sdGWN\n//Random number [0:1] without sine\nfloat hash(float p){\n\tvec3 p3  = fract(vec3(p) * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec3 randomSphereDir(vec2 rnd){\n\tfloat s = rnd.x*PI*2.;\n\tfloat t = rnd.y*2.-1.;\n\treturn vec3(sin(s), cos(s), t) / sqrt(1.0 + t * t);\n}\nvec3 randomHemisphereDir(vec3 dir, float i){\n\tvec3 v = randomSphereDir( vec2(hash(i+1.), hash(i+2.)) );\n\treturn v * sign(dot(v, dir));\n}\n\nfloat ambientOcclusion( in vec3 p, in vec3 n, in float maxDist, in float falloff ){\n\tconst int nbIte = 32;\n    const float nbIteInv = 1./float(nbIte);\n    const float rad = 1.-1.*nbIteInv; //Hemispherical factor (self occlusion correction)\n    \n\tfloat ao = 0.0;\n    \n    for( int i=0; i<nbIte; i++ )\n    {\n        float l = hash(float(i))*maxDist;\n        vec3 rd = normalize(n+randomHemisphereDir(n, l )*rad)*l; // mix direction with the normal\n        \t\t\t\t\t\t\t\t\t\t\t\t\t    // for self occlusion problems!\n        \n        ao += (l - max(dist( p + rd ),0.)) / maxDist * falloff;\n    }\n\t\n    return clamp( 1.-ao*nbIteInv, 0., 1.);\n}\n\n\n\n//Fog introduced in https://iquilezles.org/articles/fog\nvec3 fog(vec3 col, vec3 p, vec3 ro, vec3 rd, vec3 ld){\n    float dist = length(p-ro);\n\tfloat sunAmount = max( dot( rd, ld ), 0.0 );\n\tfloat fogAmount = 1.0 - exp( -dist*0.015);\n\tvec3  fogColor = mix(vec3(0.2, 0.4, 0.5), vec3(0.64, 0.62, 0.6), pow(sunAmount, 2.0));\n    return mix(col, fogColor, fogAmount);\n}\n\nvec3 shade(vec3 p){\n    \n    vec3 n = normals(p);\n    vec3 col = vec3(0.6, 0.4, 0.64);\n    col *= ambientOcclusion(p, n, 4.0, 1.0);\n    col *= ambientOcclusion(p+vec3(EPSILON, 0.0, 0.0), n, 8.0, 1.0);\n    \n    return col;\n}\n\n\n//Enhanced sphere tracing algorithm introduced by Mercury\nfloat march(vec3 ro, vec3 rd){\n    float t = 0.001;\n    float step = 0.0;\n\n    float omega = 1.0;//muista testata eri arvoilla! [1,2]\n    float prev_radius = 0.0;\n\n    float candidate_t = t;\n    float candidate_error = 1000.0;\n    float sg = sgn(dist(ro));\n\n    vec3 p = vec3(0.0);\n\n\tfor(int i = 0; i < STEPS; ++i){\n\t\tp = rd*t+ro;\n\t\tfloat sg_radius = sg*dist(p);\n\t\tfloat radius = abs(sg_radius);\n\t\tstep = sg_radius;\n\t\tbool fail = omega > 1. && (radius+prev_radius) < step;\n\t\tif(fail){\n\t\t\tstep -= omega * step;\n\t\t\tomega = 1.;\n\t\t}\n\t\telse{\n\t\t\tstep = sg_radius*omega;\n\t\t}\n\t\tprev_radius = radius;\n\t\tfloat error = radius/t;\n\n\t\tif(!fail && error < candidate_error){\n\t\t\tcandidate_t = t;\n\t\t\tcandidate_error = error;\n\t\t}\n\n\t\tif(!fail && error < EPSILON || t > FAR){\n\t\t\tbreak;\n\t\t}\n\t\tt += step;\n\t}\n    //discontinuity reduction\n    float er = candidate_error;\n    for(int j = 0; j < 6; ++j){\n        float radius = abs(sg*dist(p));\n        p += rd*(radius-er);\n        t = length(p-ro);\n        er = radius/t;\n\n        if(er < candidate_error){\n            candidate_t = t;\n            candidate_error = er;\n        }\n    }\n\tif(t <= FAR || candidate_error <= EPSILON){\n\t\tt = candidate_t;\n\t}\n\treturn t;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 q = -1.0+2.0*uv;\n    q.x *= iResolution.x/iResolution.y;\n    \n    vec3 ro = vec3(0.0, 1.5, -3.0);\n    vec3 rt = vec3(0.0, 1.25, 3.0);\n    \n    vec3 z = normalize(rt-ro);\n    vec3 x = normalize(cross(z, vec3(0.0, 1.0, 0.0)));\n    vec3 y = normalize(cross(x, z));\n    \n    vec3 rd = mat3(x, y, z)*vec3(q, radians(90.0));\n    vec3 ld = z;\n    \n    float t = march(ro, rd);\n    vec3 p = ro+rd*t;\n\n    vec3 col = vec3(0.0);\n    if(t <= FAR && t > EPSILON){\n        col = shade(p);\n\t}\n    \n    col = smoothstep(-0.1, 1.2, fog(col, p, ro, rd, ld));\n    \n    col = pow(smoothstep(0.08, 1.1, col)*smoothstep(0.8, 0.005*0.799,\n        distance(uv, vec2(0.5))*(0.8 + 0.005)), 1.0/vec3(2.2));\n    \n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}