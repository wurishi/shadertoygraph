{"ver":"0.1","info":{"id":"XtV3Wm","date":"1474990947","viewed":477,"name":"demosplash2016-cxw-03","username":"cxw","description":"Part 03: distance, clips, and compositing effects\nIntro to democoding using ShaderToy\nBy cxw/Incline - Demosplash 2016","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["tutorial","demoparty"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"precision highp int;precision highp float;\n\n// YOU WANT THIS: pages 3 and 4 of \n// https://www.khronos.org/files/webgl/webgl-reference-card-1_0.pdf\n\nvec4 do_color(in float time, in vec2 coords)\n{\n    float whereami = \n        50.0*distance(vec2(0.5),coords) - 10.0*time;\n    //  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^   ^^^^^^^^^\n    //          frequency terms           phase terms\n    //\n    //  ^^^^ how many rings (50/2pi)      ^^^^ how fast they move (2pi/peak)\n    //\n    //       ^^^^^^^^^^^^^^^^^^^^^^^^^^ radial pattern\n    return vec4(0.0,0.0,\n                0.5+0.5*sin(whereami),  // render in the blue channel\n                1.0);\n} //do_color\n\nfloat do_window(in float time, in float x)\n{\n    float window_pos = abs(0.5*sin(time));\n        // from 0 to 0.5 and back, over and over again\n    return step(window_pos,  x);\n    //          ^^^^^^^^^^ > ^  => 0.0 else 1.0\n} //do_window\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t = iTime;\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 scene_color = do_color(t, uv);\n    float window =  1.0;    \n        // or how about this?  (cxw: reset time first)\n        // do_window(t, uv.x);\n    fragColor = scene_color * window;\n} //mainImage\n\n// vi: set ts=4 sts=4 sw=4 et ai: //\n\n","name":"Image","description":"","type":"image"}]}