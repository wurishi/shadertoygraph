{"ver":"0.1","info":{"id":"tdByzd","date":"1587163194","viewed":303,"name":"Sorting: (2^N)-1 comb network","username":"metalim","description":"Trying to do comb sorting network, using odd-even test to select paired direction.\nGets fast to \"nearly sorted\". Sorting by luminosity, right side shows how sorted array is.\n","likes":3,"published":3,"flags":48,"usePreview":0,"tags":["sort","sorting","parallel"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n\n==================== Sorting series ====================\n\nhttps://www.shadertoy.com/view/tsByzt - odd-even sorting network (aka parallel bubble sort).\nhttps://www.shadertoy.com/view/tsBczt - odd-even horizontal-vertical experiment.\nhttps://www.shadertoy.com/view/tdByzd - (2^N)-1 comb sorting network.\nhttps://www.shadertoy.com/view/tsScWG - Leonardo comb sorting network.\n\nPress 'R' to Reset.\nHold 'D' or hold left mouse button to check neighbour Difference. To see how much sorted it is.\n\n*/\n\nint D(vec2 p, float n) {\n    int i=int(p.y), b=int(exp2(floor(30.-p.x-n*3.)));\n    i = ( p.x<0.||p.x>3.? 0:\n    i==5? 972980223: i==4? 690407533: i==3? 704642687: i==2? 696556137:i==1? 972881535: 0 )/b;\n \treturn i-i/2*2;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    if (iMouse.z>0. && iMouse.x<fragCoord.x || iMouse.z<=0. && uv.x>.5+.3*sin(iTime*.5) || texelFetch(iChannel1,ivec2(68,0),0).r>0.)\n        fragColor = lum(texelFetch(iChannel0,ivec2(fragCoord),0)) < lum(texelFetch(iChannel0,ivec2(fragCoord)-ivec2(1,0),0)) ? vec4(0.) : vec4(1.);\n    else\n\t    fragColor = texelFetch(iChannel0,ivec2(fragCoord),0);\n\n    // sorting set number\n    vec2 i = fragCoord / 10.;\n    int size = int(iResolution.x)*int(iResolution.y);\n    int s1 = int(log2(float(size)));\n    int steps = s1*s1;\n    int set = iFrame/steps%6;\n    if ((i.x-=1.)<3. && i.y<7.) { fragColor += vec4(D(i,float(set))); }\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// common\n\nvec4 get(int index)\n{\n    return get(index, iChannel0, iResolution);\n}\n\nvec4 compareAndSwap(int i, int j, int isSecond, int size)\n{\n    return compareAndSwap(i, j, isSecond, size, iChannel0, iResolution);\n}\n\n/////////////////////////////////////////////////////////////////////////\n// sorting\n\n#define max_step_power 17\n#define large_cycle 15\n#define small_cycle 7\n\nvec4 update(int i, int size, int frame)\n{\n    // Selected distances: (2^N)-1, ... 63, 31, 15, 7, 3, 1, with cycles.\n    // All distances are odd, because we select odd-even pairs.\n\n    int isSecond = (i+frame)%2;\n    int k = frame/large_cycle - frame%small_cycle;\n    int dist = (((1<<max_step_power)-1)>>k)|1;\n    int j = i + dist*(1 - isSecond*2);\n\n    return compareAndSwap(i, j, isSecond, size);\n}\n\n/////////////////////////////////////////////////////////////////////////\n// common\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int size = int(iResolution.x)*int(iResolution.y);\n    int s1 = int(log2(float(size)));\n    int steps = s1*s1;\n    \n    if (iFrame%steps==0 || get(0,iChannel2,iResolution).xy != iResolution.xy || texelFetch(iChannel3,ivec2(82,0),0).r>0.)\n    {\n        int index = int(fragCoord.x)+int(iResolution.x)*int(fragCoord.y);\n        \n\n        int set = iFrame/steps%6;\n        if (set==0)\n        {\n            // horizontal split, only 4 values\n            fragColor = vec4(float(int(fragCoord.x)*4/int(iResolution.x))/4.);\n        }\n        else if (set==1)\n        {\n            // reversed\n            fragColor = vec4(float(size-index-1)/float(size));\n        }\n        else if (set==2)\n        {\n            // color gradient\n\t        fragColor = vec4(1.-fragCoord.y/iResolution.y, 1.-fragCoord.x/iResolution.x, fragCoord.y/iResolution.y, 0.);\n        }\n        else if (set==3)\n        {\n            // all sorted, but last element moved to front.\n            fragColor = vec4(float((index+size-1)%size)/float(size));\n        }\n        else if (set==4)\n        {\n            // even are sorted, odd are reversed\n            if (index%2==0)\n\t            fragColor = vec4(0.,float(index)/float(size),0.,0.);\n            else\n                fragColor = vec4(float(size-index-1)/float(size),0.,0.,0.);\n        }\n        else\n        {\n            // London texture\n        \tfragColor = vec4(init(iChannel1, fragCoord/iResolution.xy).rgb,0.);\n        }\n        fragColor.a = 0.; // frame number\n    }\n    else\n    {\n        int index = int(fragCoord.x)+int(iResolution.x)*int(fragCoord.y);\n        int frame = int(texelFetch(iChannel0,ivec2(fragCoord),0).a*256.);\n        fragColor = update(index, int(iResolution.x)*int(iResolution.y), frame);\n    \tfragColor.a = float(frame+1)/256.;\n    }\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(iResolution,0.);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"//#define BW\n\nvec4 get(int index, sampler2D chan, vec3 res) {\n    ivec2 p;\n    p.x = index%int(res.x);\n    p.y = index/int(res.x);\n    return texelFetch(chan,p,0);\n}\n\nfloat lum(vec4 c)\n{\n    return dot(c.rgb*vec3(0.3,0.59,0.11),vec3(1.));\n}\n\nvec4 bw(vec4 col)\n{\n    col.r = (col.r+col.g+col.b)/3.;\n    return col.rrra;\n}\n\nvec4 init(sampler2D chan, vec2 uv)\n{\n    vec4 col = texture(chan, uv);\n#ifdef BW\n    return bw(col);\n#else\n    return col;\n#endif\n}\n\nbool isSorted(vec4 a, vec4 b)\n{\n    return lum(a) <= lum(b);\n}\n\nvec4 compareAndSwap(int i, int j, int isSecond, int size, sampler2D chan, vec3 res)\n{\n    vec4 a = get(i, chan, res);\n\tif (j<0 || j>=size) return a;\n    vec4 b = get(j, chan, res);\n\n    if (isSecond!=0)\n    {\n        // note we have to keep the order of comparison, or we will lose pixels!\n        // as we can have less(a,b)==less(b,a), both false.\n        if (isSorted(b,a)) return a;\n        return b;\n    }\n    if (isSorted(a,b)) return a;\n    return b;\n}\n\n","name":"Common","description":"","type":"common"}]}