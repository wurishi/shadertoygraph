{"ver":"0.1","info":{"id":"M3ScDR","date":"1727134743","viewed":10,"name":"Square jumping","username":"Elsio","description":"jump","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["square","jump"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define t iTime\n#define PI acos(-1.)\n#define TAU (2. * PI)\n#define TRAU 3. * PI / 2.\n#define r iResolution.xy\n\nvec2 quad(vec2 p) {\n    float d = atan(p.y, p.x),\n          k = 4.; // square\n    \n    d = cos((mod(k * (d + t) + PI, TAU) - PI) / k);\n    return vec2(\n               smoothstep(9. / r.y, 0., abs(length(p) - 1.)), \n               smoothstep(0., 9. / r.y, \n                   sqrt(2.) / 2. - d * length(p)));\n}\n\nvoid mainImage(out vec4 o, vec2 u) {\n    o *= 0.;\n    u = 2. * (u + u - r) / r.y;\n    u.y += 1.;\n    \n    float h = 2.2873;\n          \n    o.bg += quad(u);\n    \n    //u.y -= cos((mod(t * 4., TAU) - PI) / 4.)  *  2.;\n    //u.y -= cos(( fract(t * 4. / TAU) * TAU - PI ) / 4. )  *  2.;\n    u.y -= cos(  fract(t * .63662) * h - h / 2.) + 1.;\n    \n    \n    u.y = -u.y;\n    o.rg += quad(u);\n}","name":"Image","description":"","type":"image"}]}