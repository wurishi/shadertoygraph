{"ver":"0.1","info":{"id":"wsGBWw","date":"1607262654","viewed":212,"name":"dok @ Shader Royale #2","username":"dok","description":"Shader coded live on stream for Shader Royale #2, on 4/12/2020\n","likes":7,"published":1,"flags":4,"usePreview":0,"tags":["halftone"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdXGRr","filepath":"/presets/mic.png","previewfilepath":"/presets/mic.png","type":"mic","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* shadertoy glue */\n#define fGlobalTime iTime\n#define texFFTIntegrated iChannel0\n#define texFFTSmoothed iChannel0\n#define v2Resolution iResolution\nvec4 _texture(sampler2D t, float x) { return texture(t, vec2(x,0.0)); }\n#define texture _texture\n#define Texture texture\n#define main(x) mainImage(out vec4 out_color, in vec2 fragCoord)\n\n/* bonzomatic source */\n\n#define PI2 (2.0*3.1416)\n\n#define vol 0.05\n\nmat2 rot2(float a) {return mat2(cos(a), -sin(a), sin(a), cos(a));}\n\nfloat ht(vec2 uv, float a, float v)\n{\n        uv *= 10.0;\n        uv *= rot2(a);\n        uv.x += 0.5 * floor(uv.y);\n        return step(length(fract(uv) - 0.5), v / 2.0);\n}\n\nvoid main(void)\n{\n        vec2 UV = (gl_FragCoord.xy - 0.5 * v2Resolution.xy) / v2Resolution.y;\n        vec3 col = vec3(0);\n        vec2 uv = UV;\n        vec2 sc = uv;\n        vec2 pv = uv;\n        vec2 tv = uv;\n        vec2 cv=  uv;\n                vec2 dv = uv;\n        float circle = length(cv) - fGlobalTime + texture(texFFTIntegrated, 0.01).r * 100.0 * vol;\n        float dist_2 = 1.5 * sin(fGlobalTime / 100.0) * tan(fGlobalTime * 0.5);\n        for (float i = 0.0; i < 10.0; i++) {\n                float a = PI2 * (i/10.0);\n                cv.x += dist_2 * sin(fGlobalTime + a);\n                cv.y += dist_2 * cos(fGlobalTime + a);\n        circle = min(circle,\n        length(cv) - fGlobalTime + texture(texFFTIntegrated, 0.01).r * 100.0 * vol\n        );\n        }\n\n        float dist = 1.5;\n        tv.x += 0.001 * tan(fGlobalTime);\n        tv.x += dist * sin(fGlobalTime);\n        tv.y += dist * cos(fGlobalTime);\n\n        /* zoom */\n        uv *= mix(0.5, 2.0, 0.5 + 0.5 * sin(fGlobalTime / 10.0));\n        /* roto */\n        uv *= rot2(0.0025 * fGlobalTime);\n\n        float speed  = fGlobalTime / 10.0;\n        uv.y += 0.05 * sin(uv.x * 1.0 * PI2+ speed);\n        uv.y = fract(uv.y * 10.0);\n        col.r = ht(uv, PI2 * sin(fGlobalTime / 10.0), 0.5 * uv.y);\n\n        col.rgb = col.rrr;\n        float lsize = 10.0 * (0.5 + 0.5 * sin(fGlobalTime / 10.0));\n        col.rgb *= step(mix(0.4, 0.4, 0.5 + 0.5 * sin(vol * texture(texFFTIntegrated, 0.01).r)), fract(length(tv * lsize)));\n\n        /* invert */\n        if (fract(circle) < 0.5)\n                col.rgb = col.rgb;\n        else\n                col.rgb = 1.0 - col.rrr;\n\n        /* wash */\n        if ((texture(texFFTIntegrated, 0.01).r * vol) > 0.8)\n                col.rgb = 1.0 - col.rgb;\n\n        vec2 off;\n        off.x += dist * sin(fGlobalTime / 10.0);\n        off.y += dist * cos(fGlobalTime / 10.0);\n\n//      sc = vec2(length(sc), atan(sc.x,sc.y)/PI2));\n        if (ht(sc+off, 0.0, length(sc) + mix(0.0, 0.5, texture(texFFTSmoothed, 0.02).r * vol)) > 0.5)\n                col = 1.0 - col;\n\n        out_color = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}