{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"const float eps = 0.001;\n\nfloat norm(vec3 v)\n{\n    return pow(pow(abs(v.x), 12.0) + pow(abs(v.y), 12.0) + pow(abs(v.z), 12.0), 1.0 / 12.0);\n}\n    \nfloat f(vec3 p)\n{\n    vec3 cube = p;\n    \n    cube.y += 0.35;\n    \n    cube.x = mod(cube.x, 1.0) - 0.5;\n    cube.z = mod(cube.z, 1.0) - 0.5;\n    \n    \n    return min\n    (\n        norm(cube) - 0.25 + sin(16.0 * p.x + 4.0 * iTime) / 128.0 + cos(16.0 * p.z + 4.0 * iTime) / 128.0,\n        p.y + 0.7\n    );\n}\n\nvec3 df(vec3 p)\n{\n    float f0 = f(p);\n\n    return normalize(vec3\n    (\n        f(p + vec3(eps, 0.0, 0.0)) - f0,\n        f(p + vec3(0.0, eps, 0.0)) - f0,\n        f(p + vec3(0.0, 0.0, eps)) - f0\n    ) / eps);\n}\n\nvec3 solve(vec3 start, vec3 dir)\n{\n    vec3 p;\n    float t1;\n    float t2 = 0.0;\n    \n    for(int n = 0; n < 128; ++n)\n    {\n        p = start + t2 * dir;\n        t1 = t2;\n        t2 += f(p);\n        \n        if(t2 - t1 < eps)\n        {\n            break;\n        }\n    }\n    \n    return (t2 - t1 < eps) ? p : vec3(0.0, 0.0, 0.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 light = vec3(2.0 * sin(iTime), 0.25, 1.0 + iTime / 4.0 + 2.0 * cos(iTime));\n    \n\tvec2 uv = fragCoord.xy / iResolution.xx - vec2(0.5, 0.5 * iResolution.y / iResolution.x);\n    \n    vec3 c = vec3(0, 0, 0);\n\n    vec3 start = vec3(0.0, 0.5, 0.0 + iTime / 4.0);\n    vec3 d = normalize(vec3(uv + vec2(0.0, 0.5), 0.375 + iTime / 4.0) - start);\n    vec3 dir;\n    \n    dir.x = d.x;\n    dir.y = d.y * cos(0.65) - d.z * sin(0.65);\n    dir.z = d.y * sin(0.65) + d.z * cos(0.65);\n    \n    for(float i = 0.0; i < 3.0; ++i)\n    {\n        vec3 p = solve(start, dir);\n        \n        if(dot(p, p) > 0.0)\n    \t{\n            vec3 normal = df(p);\n            vec3 incident = p - start;\n            vec3 reflected = normalize(reflect(incident, normal));\n            \n            vec3 s = solve(light, normalize(p - light));\n            \n            if(length(s - p) < 32.0 * eps)\n            {\n            \tc += (normal + vec3(1.0, 0.25, 1.0)) * clamp(dot(normalize(light - p), normal) / length(light - p), 0.0, 1.0) / exp(i);\n            }\n            \n            dir = reflected;\n            start = p + dir * 16.0 * eps;\n\t    }\n    }\n\n\tfragColor = vec4(c * (sin(fragCoord.y * 2.0) + 2.0) / 3.0, 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"lts3zs","date":"1424534635","viewed":275,"name":"Plastic reflecting cubes","username":"den","description":"Yea yea just another stupid raymarching and also slow as hell","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","reflections"],"hasliked":0,"parentid":"","parentname":""}}