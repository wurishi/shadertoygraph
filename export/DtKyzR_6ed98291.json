{"ver":"0.1","info":{"id":"DtKyzR","date":"1699890912","viewed":104,"name":"Hexagram 3D","username":"Efim","description":"used https://www.shadertoy.com/view/mtdyD2 as a short template. Thanks FabriceNeyret2!","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["sdf","short"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//used https://www.shadertoy.com/view/mtdyD2 as a short template\n\n#define rot2(a)      mat2(cos(a+vec4(0,11,33,0)))                 // rotation\n\nvec3 S = vec3(3,2,0);                                             // knot parameter\n\n\n//https://www.shadertoy.com/view/tt23RR\nfloat sdHexagram( in vec2 p, in float r )\n{\n    const vec4 k = vec4(-0.5,0.86602540378,0.57735026919,1.73205080757);\n    \n    p = abs(p);\n    p -= 2.0*min(dot(k.xy,p),0.0)*k.xy;\n    p -= 2.0*min(dot(k.yx,p),0.0)*k.yx;\n    p -= vec2(clamp(p.x,r*k.z,r*k.w),r);\n    return length(p)*sign(p.y);\n}\n\n//Extrussion\n//https://www.shadertoy.com/view/4lyfzw\nfloat sdHexagram3( in vec3 p, in float h, in float r )\n{\n    float d = sdHexagram(p.xy, r);\n    vec2 w = vec2( d, abs(p.z) - h );\n    return min(max(w.x,w.y),0.0) + length(max(w,0.0)) - 0.05;\n}\n\nfloat sdf(vec3 pos) {\n    return sdHexagram3(pos, 0.15, 0.35);\n\n}\n\nvoid mainImage(out vec4 O, vec2 U)\n{\n    float t=9.,r;\n    vec3  R = iResolution, e = vec3(1e-3,0,0), N,\n          D = normalize(vec3(U+U, -18.*R.y) - R),          // ray direction\n          p = vec3(0,0,15), q,                             // marching point along ray \n          C = iMouse.z > 0. ? 8.*iMouse.xyz/R -4.             // camera control\n                          : 3.* cos(.3*iTime + vec3(0,11,0)); // demo mode\n       // S = ceil( vec3( 5.*iTime+vec2(1,0),0)   );\n    \n    p.yz *= rot2(-C.y),                                    // rotations\n    p.xz *= rot2(-C.x-1.57),\n    D.yz *= rot2(-C.y),                              \n    D.xz *= rot2(-C.x-1.57);\n    for ( O=vec4(1); O.x > 0. && t > .01; O-=.01 )         // march scene\n        q = p, \n        t = min(t, sdf(q) ),                               // soleno√Ød\n        p += .5*t*D;                                       // step forward = dist to obj    \n    \n    N = vec3( sdf(q+e), sdf(q+e.yxy), sdf(q+e.yyx) ) - t ; // normal\n    O.x < 0. ? O = .5*texture(iChannel0, D) :              // uncomment to display environment \n    O *= O*O*O*3.* texture(iChannel0, reflect(D,N/length(N) ) ); // reflect of environment map\n}\n\n","name":"Image","description":"","type":"image"}]}