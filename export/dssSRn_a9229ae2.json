{"ver":"0.1","info":{"id":"dssSRn","date":"1668475974","viewed":119,"name":"[phreax] nuclear rainbow","username":"phreax","description":"Playing around with logpolar coordinates\n\nGreat write up here: https://www.osar.fr/notes/logspherical/","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","neon","logpolar"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* Creative Commons Licence Attribution-NonCommercial-ShareAlike \n   phreax 2021\n*/\n\n#define PI 3.141592\n#define SIN(x) (sin(x)*.5+.5)\n#define PALETTE 0\n\n\nfloat tt, g_mat;\nfloat g_gl = 0.;\n\n// from \"Palettes\" by iq. https://shadertoy.com/view/ll2GD3\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvec3 getPal(int id, float t) {\n\n    id = id % 7;\n\n    vec3          col = pal( t, vec3(.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.0,-0.33,0.33) );\n    if( id == 1 ) col = pal( t, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.0,0.10,0.20) );\n    if( id == 2 ) col = pal( t, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.3,0.20,0.20) );\n    if( id == 3 ) col = pal( t, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,0.5),vec3(0.8,0.90,0.30) );\n    if( id == 4 ) col = pal( t, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,0.7,0.4),vec3(0.0,0.15,0.20) );\n    if( id == 5 ) col = pal( t, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(2.0,1.0,0.0),vec3(0.5,0.20,0.25) );\n    if( id == 6 ) col = pal( t, vec3(0.8,0.5,0.4),vec3(0.2,0.4,0.2),vec3(2.0,1.0,1.0),vec3(0.0,0.25,0.25) );\n    \n    return vec3(col);\n}\n\nmat2 rot2(float a) { return mat2(cos(a), sin(a), -sin(a), cos(a)); }\n\n\n// by Nusan\nfloat curve(float t, float d) {\n  t/=d;\n  return mix(floor(t), floor(t)+1., pow(smoothstep(0.,1.,fract(t)), 10.));\n}\n\nfloat box(vec3 p, vec3 r) {\n    vec3 d = abs(p) - r;\n    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat rect( vec2 p, vec2 b, float r ) {\n    vec2 d = abs(p) - (b - r);\n    return length(max(d, 0.)) + min(max(d.x, d.y), 0.) - r;\n}\n\nvec3 transform(vec3 p) {\n\n    float a = PI*.5 + iTime;\n    p.xz *= rot2(a);\n    p.xy *= rot2(a);\n    \n    return p;\n}\n\n\nvec3 repeat(inout vec3 p, vec3 size) {\n\tvec3 c = floor((p + size*0.5)/size);\n\tp = mod(p + size*0.5, size) - size*0.5;\n\treturn c;\n}\n\nfloat map(vec3 p) {\n\n    vec3 bp = p;\n    p.yz *= rot2(PI*.25);\n    \n    p.z = abs(p.z) - 2.5;\n\n    p.z = abs(p.z) + 2.5;\n   // p.xy *= rot2(PI*.9+ .2*tt);\n  //  p.xz *= rot2(PI*.9);\n  //  p.z -= 1.;\n    \n    // map to log-spherical\n    float r = length(p);\n    p = vec3(log(r),\n             acos(p.z / r),\n             atan(p.y, p.x));\n   \n\n    float shrink = 1./abs(p.y-PI) + 1./abs(p.y) - 1./PI;\n    \n    float density = 20.;\n    float scale = floor(density)/PI;\n    p *= scale;\n    \n    p.x -= tt;\n\n    p.y -= 0.7;\n    \n    vec3 q = p;\n    //p = fract(p*.5) * 2. - 1.;\n    \n    vec3 id = repeat(p, vec3(1.9, 1, 1.));\n\n\n    p.yz *= rot2(.25*PI);\n    p.x *= shrink;\n     \n   // p.x = abs(p.x) - .5;\n  \n    g_mat = bp.y*.6+id.x;\n    \n    float w = 0.015;\n    float d = length(p.xz) - w;\n    d = min(d, length(p.xy) - w);\n    \n    d *= r/(scale*shrink);\n\n    return d*.7;\n}\n\n// from iq\nfloat softshadow( in vec3 ro, in vec3 rd, float mint, float maxt, float k )\n{\n    float res = 1.0;\n    float ph = 1e20;\n    for( float t=mint; t<maxt; )\n    {\n        float h = map(ro + rd*t);\n        if( h<0.001 )\n            return 0.0;\n        float y = h*h/(2.0*ph);\n        float d = sqrt(h*h-y*y);\n        res = min( res, k*d/max(0.0,t-y) );\n        ph = h;\n        t += h;\n    }\n    return res;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    \n    vec3 ro = vec3(0, .5, -4.),\n         rd = normalize(vec3(uv, .7)),\n         lp = vec3(0.,2., -15);\n         \n    vec3 p = ro;\n    vec3 col;\n    \n    float t, d = 0.1;\n    \n    tt = iTime;\n    \n    float mat = 0.,\n          gl  = 0.;\n    \n    for(float i=.0; i<100.; i++) {\n    \n        d = map(p);\n        mat = g_mat;\n        gl = g_gl;\n        \n        if(d < 0.0001 || t > 5.) break;\n        \n        t += d;\n        p += rd*d;\n    }\n    vec2 e = vec2(0.0035, -0.0035);\n     \n    vec3 al = vec3(1.000,0.357,0.078);\n    vec3 bg = vec3(0.651,0.827,0.910);\n    if(d < 0.001) {\n         vec3 n = normalize( e.xyy*map(p+e.xyy) + e.yyx*map(p+e.yyx) +\n                            e.yxy*map(p+e.yxy) + e.xxx*map(p+e.xxx));\n        \n       \n        vec3 l = normalize(lp-p);\n        float dif = max(dot(n, l), .0);\n        float spe = pow(max(dot(reflect(-rd, n), -l), .0),40.);\n        \n        float sss = smoothstep(0., 1., map(p + l * .4)) / .4;\n        //float shd = softshadow(p, l, 0.01, 2., 15.0);\n\n        al = getPal(PALETTE, mat*.2);\n        col +=  .7*al*dif + .1*spe +  + .3*al*sss + .8*al;\n        col *= 1.4;\n\n     \n    } else {\n        col += bg*mix(.5, 1., (1.2-pow(dot(uv, uv), .8)));\n    }\n    \n    col *= mix(.3, .8, (1.3-pow(dot(uv, uv), .8))); // vignette\n    col = pow(col, vec3(.45)); // gamma\n    \n    // Output to screen\n    fragColor = vec4(col, 1.0 - t * 0.3);\n}","name":"Image","description":"","type":"image"}]}