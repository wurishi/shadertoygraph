{"ver":"0.1","info":{"id":"ttfSz2","date":"1563546988","viewed":432,"name":"RayMarchingBand004: TunnelWave.","username":"Hirai_worthless","description":"RayMarchingBand004","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 path(float z){\n    float x = sin(z) + 2.0 * cos(z * 0.3) - 1.5 * sin(z * 0.12345);\n    float y = cos(z) + 1.5 * sin(z * 0.3) + 2.0 * cos(z * 0.12345);\n    return vec2(x,y);\n}\n\nfloat map(vec3 p){\n\t//p = fract(p/2.0) * 6.0 - 3.0;\n    vec2 o = path(p.z) / 4.0;\n\tfloat tBase = max(-length(p.xy - o) + 1.0 \n                      //* (1.0 + sin(p.z) * 0.5)\n                      ,length(p.xy - o) - 1.2 \n                      //* (1.0 + sin(p.z) * 0.5)\n                     );\n    float tdonut = max(-length(p.xy - o) + 0.5\n                      ,length(p.xy - o) - 0.6 \n                     );\n    tdonut = max(tdonut,abs(fract(p.z) - 0.5));\n    float tTube1 = length(p.xy - o + vec2(0.3,0.3)) - 0.025;\n    float tTube2 = length(p.xy - o + vec2(0.5,0.2)) - 0.025;\n    float tTube3 = length(p.xy - o + vec2(0.2,0.5)) - 0.025;    \n    float tTube4 = length(p.xy - o + vec2(-0.3,-0.3)) - 0.025;\n    float tTube5 = length(p.xy - o + vec2(-0.5,-0.2)) - 0.025;\n    float tTube6 = length(p.xy - o + vec2(-0.2,-0.5)) - 0.025;\n    float tTube = min(min(tTube1,tTube2),tTube3);\n    tTube = min(min(tTube,tTube4),min(tTube5,tTube6));\n\n    float bound = 2.0;\n    float tSplit = (fract(p.z)-0.5);\n    tSplit = min(tSplit, abs((p.x - o.x))-0.15);\n    tSplit = min(tSplit, abs((p.y - o.y))-0.15);\n\n    return min(min(max(tBase,-tSplit),tdonut),tTube);\n}\nconst float EPS = 0.001;\nvec3 getNormal(vec3 p) {\n    return normalize(vec3(\n        map(p + vec3(EPS, 0.0, 0.0)) - map(p + vec3(-EPS,  0.0,  0.0)),\n        map(p + vec3(0.0, EPS, 0.0)) - map(p + vec3( 0.0, -EPS,  0.0)),\n        map(p + vec3(0.0, 0.0, EPS)) - map(p + vec3( 0.0,  0.0, -EPS))\n    ));\n}\n\nvec4 trace (vec3 o, vec3 r){\n\tfloat t = 0.0;\n    vec3 p = vec3(0.0,0.0,0.0);\n    \n    for(int i = 0; i < 32; ++i){\n        p = o + r * t;\n        float d = map(p);\n        t += d * 0.5;\n    }\n    return vec4(getNormal(p),t);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    float PI = 3.14159265;\n    vec2 uv = fragCoord.xy /iResolution.xy;\n\tuv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    vec3 r = normalize(vec3(uv,0.5));\n\n    float z = iTime * 4.0 ;\n    \n    r.xy *= mat2( sin(iTime),cos(iTime),\n    \t\t\t\t-cos(iTime),sin(iTime));\n\tvec2 a = path(z);\n    vec3 o = vec3(a / 4.0,z);\n    vec4 data = trace(o,r);\n    float t = data.w;\n    float fog = 1.0 / (1.0 + t * t * 0.3);\n    vec3 fc = mix(vec3(0.5 - data.x,0.5 -data.y,0.5-data.z),vec3(0),1.0 - fog);\n\tfc = vec3(fog);\n    // Output to screen\n    fragColor = vec4(fc,1.0);\n}","name":"Image","description":"","type":"image"}]}