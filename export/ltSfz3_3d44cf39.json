{"ver":"0.1","info":{"id":"ltSfz3","date":"1516657945","viewed":139,"name":"20/2018","username":"rimina","description":"This shader is part of my daily shader challenge. Today I continued exploring path tracing. I took the scene from my previous shader (https://www.shadertoy.com/view/MtjBWh). Thanks to fizzer for help with BRDF!","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["pathtracing","dailyshader","sdfgeometry"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Simple path tracer. I used Iq's great article as a tutorial for this.\n//https://iquilezles.org/articles/simplepathtracing\n\n#define STEPS 50\n#define FAR 60.0\n#define EPSILON 0.5/iResolution.x\n#define PI 3.14159265359\n\n#define BOUNCES 3\n#define SAMPLES 10.0\n\n#define FOG_COLOR vec3(0.65, 0.7, 0.8)\n#define SUN_COLOR vec3(0.8, 0.75, 0.7)\n\n//Hash method from https://www.shadertoy.com/view/4djSRW\n//#define HASHSCALE3 vec3(.1031, .1030, .0973)\n#define HASHSCALE3 vec3(443.897, 441.423, 437.195)\n\nvec2 hash23(vec3 p3){\n\tp3 = fract(p3 * HASHSCALE3);\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\nvec2 hash21(float p){\n\tvec3 p3 = fract(vec3(p) * HASHSCALE3);\n\tp3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\n//from http://amietia.com/lambertnotangent.html\nvec3 lambertNoTangent(vec3 normal, vec2 uv){\n   float theta = 6.283185 * uv.x;\n   uv.y = 2.0 * uv.y - 1.0;\n   vec3 spherePoint = vec3(sqrt(1.0 - uv.y * uv.y) * vec2(cos(theta), sin(theta)), uv.y);\n   return normalize(normal + spherePoint);\n}\n\n//Distance functions from Mercury's SDF library\n//http://mercury.sexy/hg_sdf/\n\n// Maximum/minumum elements of a vector\nfloat vmax3(vec3 v) {\n\treturn max(max(v.x, v.y), v.z);\n}\n\nfloat fSphere(vec3 p, float r) {\n\treturn length(p) - r;\n}\n\n// Plane with normal n (n is normalized) at some distance from the origin\nfloat fPlane(vec3 p, vec3 n, float distanceFromOrigin) {\n\treturn dot(p, n) + distanceFromOrigin;\n}\n\n// Cheap Box: distance to corners is overestimated\nfloat fBoxCheap(vec3 p, vec3 b) { //cheap box\n\treturn vmax3(abs(p) - b);\n}\n\n// Box: correct distance to corners\nfloat fBox(vec3 p, vec3 b) {\n\tvec3 d = abs(p) - b;\n\treturn length(max(d, vec3(0))) + vmax3(min(d, vec3(0)));\n}\n\n// Repeat space along one axis. Use like this to repeat along the x axis:\n// <float cell = pMod1(p.x,5);> - using the return value is optional.\nfloat pMod1(inout float p, float size) {\n\tfloat halfsize = size*0.5;\n\tfloat c = floor((p + halfsize)/size);\n\tp = mod(p + halfsize, size) - halfsize;\n\treturn c;\n}\n\n// Repeat in two dimensions\nvec2 pMod2(inout vec2 p, vec2 size) {\n\tvec2 c = floor((p + size*0.5)/size);\n\tp = mod(p + size*0.5,size) - size*0.5;\n\treturn c;\n}\n\n// Repeat around the origin by a fixed angle.\n// For easier use, num of repetitions is use to specify the angle.\nfloat pModPolar(inout vec2 p, float repetitions) {\n\tfloat angle = 2.0*PI/repetitions;\n\tfloat a = atan(p.y, p.x) + angle/2.0;\n\tfloat r = length(p);\n\tfloat c = floor(a/angle);\n\ta = mod(a,angle) - angle/2.0;\n\tp = vec2(cos(a), sin(a))*r;\n\t// For an odd number of repetitions, fix cell index of the cell in -x direction\n\t// (cell index would be e.g. -5 and 5 in the two halves of the cell):\n\tif (abs(c) >= (repetitions/2.0)) c = abs(c);\n\treturn c;\n}\n\n// Rotate around a coordinate axis (i.e. in a plane perpendicular to that axis) by angle <a>.\n// Read like this: R(p.xz, a) rotates \"x towards z\".\n// This is fast if <a> is a compile-time constant and slower (but still practical) if not.\nvoid pR(inout vec2 p, float a){\n\tp = cos(a)*p + sin(a)*vec2(p.y, -p.x);\n}\n\n// Shortcut for 45-degrees rotation\nvoid pR45(inout vec2 p) {\n\tp = (p + vec2(p.y, -p.x))*sqrt(0.5);\n}\n\n// The \"Columns\" flavour makes n-1 circular columns at a 45 degree angle:\nfloat fOpUnionColumns(float a, float b, float r, float n) {\n\tif ((a < r) && (b < r)) {\n\t\tvec2 p = vec2(a, b);\n\t\tfloat columnradius = r*sqrt(2.0)/((n-1.0)*2.0+sqrt(2.0));\n\t\tpR45(p);\n\t\tp.x -= sqrt(2.0)/2.0*r;\n\t\tp.x += columnradius*sqrt(2.0);\n\t\tif (mod(n,2.0) == 1.0) {\n\t\t\tp.y += columnradius;\n\t\t}\n\t\t// At this point, we have turned 45 degrees and moved at a point on the\n\t\t// diagonal that we want to place the columns on.\n\t\t// Now, repeat the domain along this direction and place a circle.\n\t\tpMod1(p.y, columnradius*2.0);\n\t\tfloat result = length(p) - columnradius;\n\t\tresult = min(result, p.x);\n\t\tresult = min(result, a);\n\t\treturn min(result, b);\n\t} else {\n\t\treturn min(a, b);\n\t}\n}\n\n// first object gets a v-shaped engraving where it intersect the second\nfloat fOpEngrave(float a, float b, float r) {\n\treturn max(a, (a + r - abs(b))*sqrt(0.5));\n}\n\n\nvec2 dist(vec3 p){\n    float flr = fPlane(p, vec3(0.0, 1.0, 0.0), 2.0);\n    float ball = fSphere(p-vec3(0.0, 2.0, 0.0), 1.5);\n    \n    vec3 disp = vec3(20.0, 0.0, 0.0);\n    vec3 pp = p;\n    \n    float index = pModPolar(pp.xz, disp.x);\n    pp -= disp;\n    pMod2(pp.xz, vec2(5.0, 4.0));\n    float box = fBox(pp, vec3(1.0, 1.5, 1.0));\n    float sphere = fSphere(pp-vec3(0.0, 1.0, 0.0), 1.0);\n    \n    float field = fOpEngrave(box, sphere, 0.5);\n    \n    float scene = fOpUnionColumns(flr, fOpUnionColumns(field, ball, 0.5, 3.0), 1.0, 4.0);\n    \n    float id = 0.0;\n    if(ball < flr && ball < field || \n      sphere < flr && sphere < ball && sphere < box){\n        id = 1.0;\n    }\n    else if(flr < ball && flr < field){\n        id = 2.0;\n    }\n    \n    return vec2(scene, id);\n}\n\nvec3 normals(vec3 p){\n    vec3 eps = vec3(EPSILON, 0.0, 0.0);\n    return normalize(vec3(\n        dist(p+eps.xyy).x-dist(p-eps.xyy).x,\n        dist(p+eps.yxy).x-dist(p-eps.yxy).x,\n        dist(p+eps.yyx).x-dist(p-eps.yyx).x\n    ));\n}\n\n//Enhanced sphere tracing algorithm introduced by Mercury\n\n// Sign function that doesn't return 0\nfloat sgn(float x) {\n\treturn (x < 0.0)?-1.0:1.0;\n}\n\nvec2 march(vec3 ro, vec3 rd){\n    float t = 0.001;//EPSILON;\n    float step = 0.0;\n\n    float omega = 1.3;//muista testata eri arvoilla! [1,2]\n    float prev_radius = 0.0;\n\n    float candidate_t = t;\n    float candidate_error = 1000.0;\n    float sg = sgn(dist(ro).x);\n\n    vec3 p = vec3(0.0);\n\n\tfor(int i = 0; i < STEPS; ++i){\n\t\tp = rd*t+ro;\n\t\tfloat sg_radius = sg*dist(p).x;\n\t\tfloat radius = abs(sg_radius);\n\t\tstep = sg_radius;\n\t\tbool fail = omega > 1. && (radius+prev_radius) < step;\n\t\tif(fail){\n\t\t\tstep -= omega * step;\n\t\t\tomega = 1.;\n\t\t}\n\t\telse{\n\t\t\tstep = sg_radius*omega;\n\t\t}\n\t\tprev_radius = radius;\n\t\tfloat error = radius/t;\n\n\t\tif(!fail && error < candidate_error){\n\t\t\tcandidate_t = t;\n\t\t\tcandidate_error = error;\n\t\t}\n\n\t\tif(!fail && error < EPSILON || t > FAR){\n\t\t\tbreak;\n\t\t}\n\t\tt += step;\n\t}\n    //discontinuity reduction\n    float er = candidate_error;\n    for(int j = 0; j < 6; ++j){\n        float radius = abs(sg*dist(p).x);\n        p += rd*(radius-er);\n        t = length(p-ro);\n        er = radius/t;\n\n        if(er < candidate_error){\n            candidate_t = t;\n            candidate_error = er;\n        }\n    }\n\tif(t <= FAR || candidate_error <= EPSILON){\n\t\tt = candidate_t;\n\t}\n    \n    p = ro+rd*t;\n    float id = dist(p).y;\n    \n\treturn vec2(t, id);\n}\n\nvec3 light(vec3 p, vec3 rd, vec3 ld){\n    vec3 n = normals(p);\n    float lambertian = max(dot(n, ld), 0.0);\n    \n    return SUN_COLOR+lambertian*FOG_COLOR;\n}\n\nvec3 color(float obj){\n    vec3 base = vec3(0.0);\n    if(obj == 0.0){\n        base = vec3(0.45, 0.45, 0.42);\n    }\n    else if(obj == 1.0){\n        base = vec3(0.75, 0.65, 0.55);\n    }\n    else if(obj == 2.0){\n        base = vec3(0.4, 0.4, 0.45);\n    }\n    return base;\n}\n\n\nvec3 render(vec3 o, vec3 d, vec3 rt, vec2 uv){\n    vec3 ro = o;\n    vec3 rd = d;\n    vec3 ld = (rt-ro)/distance(ro, rt);\n    vec3 ld2 = (rt-vec3(0.0, -2.0, 6.0))/distance(vec3(0.0, -2.0, 6.0), rt);\n    \n    vec3 tcol = vec3(0.0);\n    vec3 fcol = vec3(1.0);\n    \n    for(int i = 0; i < BOUNCES; ++i){\n        vec2 t = march(ro, rd);\n        vec3 p = ro+rd*t.x;\n        if(t.y < 0.0 || t.x > FAR){\n            fcol = FOG_COLOR;\n            tcol += fcol;\n            break;\n        }\n        vec3 scol = color(t.y);\n        vec3 dcol = light(p, rd, ld);\n        dcol += light(p, rd, ld2);\n        dcol *=0.5;\n        fcol *= scol;\n        tcol += fcol * dcol;\n        \n        vec3 n = normals(p);\n        \n        ro = p+(n*0.2);\n        rd = lambertNoTangent(n, hash23(vec3(uv, float(i)+iTime*0.01)));\n        \n        \n    }\n    \n    return tcol;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 q = -1.0+2.0*uv;\n    q.x *= iResolution.x/iResolution.y;\n    \n    //vec3 ro = vec3(5.0*sin(iTime*0.5), 2.0, 5.0*cos(iTime*0.5));\n    //vec3 rt = vec3(0.0, 0.5, 0.0);\n    \n    vec3 ro = vec3(10.0*cos(iTime*0.1), 3.5+sin(iTime*0.05), 12.0*sin(iTime*0.1));\n    vec3 rt = vec3(0.0, 2.5, 0.0);\n    \n    vec3 z = normalize(rt-ro);\n    vec3 x = normalize(cross(z, vec3(0.0, 1.0, 0.0)));\n    vec3 y = normalize(cross(x, z));\n    //vec3 rd = normalize(mat3(x, y, z)*vec3(q, radians(90.0)));\n    \n    vec3 color = vec3(0.0);//render(ro, rd, rt);\n    \n    \n    for(float i = 0.0; i < SAMPLES; ++i){\n    \tvec3 rd = normalize(mat3(x, y, z)*vec3(q, radians(90.0)));\n    \tcolor += render(ro, rd, rt, uv);\n    }\n    color /= SAMPLES;\n    \n    //color = smoothstep(0.0, 1.1, color);\n    \n     //Vigenting\n    float vigentOffset = 0.005;\n    float darkness = 0.4;\n\tfloat dist = distance(uv, vec2( 0.5 ));\n\tcolor *= smoothstep(0.8, vigentOffset * 0.799, dist *( darkness + vigentOffset ));\n    \n    color = pow(color, 1.0/vec3(1.7));\n\tfragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}