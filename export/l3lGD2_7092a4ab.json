{"ver":"0.1","info":{"id":"l3lGD2","date":"1707955539","viewed":50,"name":"Gris Pause Menu Constellation","username":"essaar","description":"inspired by the pause menu from the game Gris and the shader by glk7","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","sdf","gris"],"hasliked":0,"parentid":"MXs3W2","parentname":"Gris Pause Menu"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 rotate(vec2 uv, float th) {\n  return mat2(cos(th), sin(th), -sin(th), cos(th)) * uv;\n}\n\nfloat sdCircle( in vec2 p , in float r, in float thickness, in vec2 offset, in float speed)\n{\n    p = rotate(p,iTime*speed);\n    p -= offset;\n    return smoothstep(0.0001,thickness,abs(length(p)-r));\n}\n\nfloat sdFilledCircle( in vec2 p , in float r, in vec2 offset, in float thickness, in float speed)\n{\n    p = rotate(p,iTime*speed);\n    p -= offset;\n    return smoothstep(0.001,thickness,(length(p)-r));\n}\n\n\nfloat sdDashedCircle( in vec2 p , in float r, in vec2 offset, in float thickness, in float segmentLength, in float speed, in float animSpeed)\n{\n    p = rotate(p,iTime*speed);\n    p-=offset;\n    \n    vec2 vec_01 = vec2(sin(iTime*animSpeed),cos(iTime*animSpeed));\n    float angle = acos(dot(normalize(p), normalize(vec_01)));\n    \n    angle = mod(angle,segmentLength * 2.0);\n\n    if(angle<=segmentLength/3.)\n       return smoothstep(0.0001,thickness,abs(length(p)-r));\n\n    return 1.;\n}\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b, in float segmentLength )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    float dist = mod(length(pa),segmentLength);\n    if(dist<=segmentLength/3.)\n        return length( pa - ba*h );\n    return 1.;\n}\n\nfloat sdDashedSquare(in vec2 uv, in float sideLen, in float segmentLength, in float thickness){\n\n    //uv = rotate(uv,iTime*animSpeed);\n\n    vec2 a = vec2(sideLen/2.);\n    vec2 b = vec2(sideLen/2.,- sideLen/2.);\n    vec2 c = vec2(- sideLen/2.);\n    vec2 d = vec2(- sideLen/2.,sideLen/2.);\n\n    float line1 = sdSegment(uv, a, b, segmentLength);\n    float line2 = sdSegment(uv, b, c, segmentLength);\n    float line3 = sdSegment(uv, c, d, segmentLength);\n    float line4 = sdSegment(uv, d, a, segmentLength);\n    \n    float val = mix(0.,1.,smoothstep(0.,0.0001,line1-thickness));\n    val = mix(0.,val,smoothstep(0.,0.0001,line2-thickness));\n    val = mix(0.,val,smoothstep(0.,0.0001,line3-thickness));\n    val = mix(0.,val,smoothstep(0.,0.0001,line4-thickness));\n     \n    return val;\n}\n\nvec3 drawScene(vec2 uv) {\n  vec3 col = vec3(0.);\n\n  float i = .013;\n  float speed = 0.07;\n  \n  \n  float centerC1 = sdCircle(uv, 0.017, 0.0015, vec2(0.), 0.);\n  float centerC2 = sdCircle(uv, 0.022, 0.0015, vec2(0.), 0.);\n  float centerC3 = sdDashedCircle(uv, 0.042-i, vec2(0.), 0.0015, 0.1, 0., -speed);\n  float centerC4 = sdCircle(uv, 0.065-i, 0.002, vec2(0.), 0.);\n  float centerC5 = sdCircle(uv, 0.075-i, 0.005, vec2(0.), 0.);\n  float centerC6 = sdDashedCircle(uv, 0.085-i, vec2(0.), 0.0015, 0.045, 0., speed);\n  \n  i = 0.04;\n  \n  float midC1 = sdCircle(uv, 0.2-i, 0.003, vec2(0.), 0.);\n  float midC2 = sdCircle(uv, 0.2105-i, 0.0012, vec2(0.), 0.);\n  float midC3 = sdDashedCircle(uv, 0.24-i, vec2(0.), 0.0015, 0.015, 0., -speed);\n  float midC4 = sdCircle(uv, 0.25-i, 0.0012, vec2(0.), 0.);\n  float midC5 = sdCircle(uv, 0.29-i, 0.003, vec2(0.), 0.);\n  float midC6 = sdCircle(uv, 0.38, 0.0012, vec2(0.), 0.);\n  float midC7 = sdCircle(uv, 0.42, 0.007, vec2(0.), 0.);\n  \n  float outerC1 = sdCircle(uv, 0.6, 0.005, vec2(0.), 0.);\n  float outerC2 = sdDashedCircle(uv, 0.65, vec2(0.), 0.0015, 0.006, 0., speed);\n  float outerC3 = sdCircle(uv, 0.78, 0.0015, vec2(0.), 0.);\n  float outerC4 = sdCircle(uv, 0.8, 0.007, vec2(0.), 0.);\n  float outerC5 = sdCircle(uv, 0.845, 0.0015, vec2(0.), 0.);\n  \n  float sq1 = sdDashedSquare(uv, 0.59, 0.008, 0.0006);\n  float sq2 = sdDashedSquare(rotate(uv, 0.79), 0.59, 0.008, 0.0006);\n  \n\n  float celC1 = sdFilledCircle(uv, 0.006, vec2(0.29-i,0.), 0.0015, 0.1);\n  float celC2 = sdCircle(uv, 0.015, 0.001, vec2(0.29-i,0.), 0.1);\n  \n  vec2 uv_ = rotate(uv, 0.59);\n  float celC3 = sdFilledCircle(uv_, 0.002, vec2(0.38,0.), 0.0015, 0.2);\n  float celC4 = sdCircle(uv_, 0.008, 0.001, vec2(0.38,0.), 0.2);\n  float celC5 = sdCircle(uv_, 0.012, 0.001, vec2(0.38,0.), 0.2);\n  \n  float celC6 = sdFilledCircle(uv, 0.008, vec2(-0.42,0.), 0.0015, 0.);\n  float celC7 = sdCircle(uv, 0.018, 0.001, vec2(-0.42,0.), 0.);\n  float celC8 = sdCircle(uv, 0.022, 0.001, vec2(-0.42,0.), 0.);\n  float celC9 = sdCircle(uv, 0.026, 0.001, vec2(-0.42,0.), 0.);\n  float celC10 = sdCircle(uv, 0.03, 0.001, vec2(-0.42,0.), 0.);\n  float celC11 = sdDashedCircle(uv, 0.034, vec2(-0.42,0.), 0.0015, 0.1, 0., 1.3);\n  \n  uv_ = rotate(uv, -2.29);\n  float celC12 = sdFilledCircle(uv_, 0.012, vec2(0.6,0.), 0.0015, speed);\n  float celC13 = sdCircle(uv_, 0.018, 0.001, vec2(0.6,0.), speed);\n  float celC14 = sdCircle(uv_, 0.022, 0.001, vec2(0.6,0.), speed);\n  float celC15 = sdCircle(uv_, 0.033, 0.001, vec2(0.6,0.), speed);\n  float celC16 = sdFilledCircle(rotate(uv_,iTime*speed)-vec2(0.6,0.), 0.004, vec2(0.033,0.), 0.0015, 0.5);\n  \n  float celC17 = sdFilledCircle(uv, 0.008, vec2(0.845,0.), 0.0015, speed);\n  float celC18 = sdDashedCircle(uv, 0.014, vec2(0.845,0.), 0.0015, 0.2, speed, 1.3);\n  float celC19 = sdCircle(uv, 0.032, 0.001, vec2(0.845,0.), speed);\n  float celC20 = sdFilledCircle(rotate(uv,iTime*speed)-vec2(0.845,0.), 0.0015, vec2(0.032,0.), 0.0015, 0.5);\n  float celC21 = sdCircle(rotate(uv,iTime*speed)-vec2(0.845,0.), 0.008, 0.001, vec2(0.032,0.), 0.5);\n  \n \n  \n  col = mix(vec3(1.), col,sq1);\n  col = mix(vec3(1.), col,sq2);\n  \n  col = mix(vec3(1.), col,centerC1);\n  col = mix(vec3(1.), col,centerC2);\n  col = mix(vec3(1.), col,centerC3);\n  col = mix(vec3(1.), col,centerC4);\n  col = mix(vec3(1.), col,centerC5);\n  col = mix(vec3(1.), col,centerC6);\n  \n  col = mix(vec3(1.), col,midC1);\n  col = mix(vec3(1.), col,midC2);\n  col = mix(vec3(1.), col,midC3);\n  col = mix(vec3(1.), col,midC4);\n  col = mix(vec3(1.), col,midC5);\n  col = mix(vec3(1.), col,midC6);\n  col = mix(vec3(1.), col,midC7);\n  \n  col = mix(vec3(1.), col,outerC1);\n  col = mix(vec3(1.), col,outerC2);\n  col = mix(vec3(1.), col,outerC3);\n  col = mix(vec3(1.), col,outerC4);\n  col = mix(vec3(1.), col,outerC5);\n  \n  col = mix(vec3(1.), col,celC1);\n  col = mix(vec3(1.), col,celC2);\n  \n  col = mix(vec3(1.), col,celC3);\n  col = mix(vec3(1.), col,celC4);\n  col = mix(vec3(1.), col,celC5);\n  \n  col = mix(vec3(1.), col,celC6);\n  col = mix(vec3(1.), col,celC7);\n  col = mix(vec3(1.), col,celC8);\n  col = mix(vec3(1.), col,celC9);\n  col = mix(vec3(1.), col,celC10);\n  col = mix(vec3(1.), col,celC11);\n  \n  col = mix(vec3(1.), col,celC12);\n  col = mix(vec3(1.), col,celC13);\n  col = mix(vec3(1.), col,celC14);\n  col = mix(vec3(1.), col,celC15);\n  col = mix(vec3(1.), col,celC16);\n  \n  col = mix(vec3(1.), col,celC17);\n  col = mix(vec3(1.), col,celC18);\n  col = mix(vec3(1.), col,celC19);\n  col = mix(vec3(1.), col,celC20);\n  col = mix(vec3(1.), col,celC21);\n\n    \n  return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = fragCoord/iResolution.xy; // <0, 1>\n  uv -= 0.5; // <-0.5,0.5>\n  uv.x *= iResolution.x/iResolution.y; // fix aspect ratio\n\n  vec3 col = drawScene(uv);\n\n  // Output to screen\n  fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}