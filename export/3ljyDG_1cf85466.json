{"ver":"0.1","info":{"id":"3ljyDG","date":"1595262654","viewed":346,"name":"SleepyToonBin","username":"SleepyRon","description":"Cleaned up video processor example based off basic toon shader example: https://www.shadertoy.com/view/XtXcDS","likes":6,"published":1,"flags":2,"usePreview":0,"tags":["paint","toon","input","hypno","master","sleepy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// OG Shader: https://www.shadertoy.com/view/XtXcDS\n\nconst mat3 yuv_2_rgb = mat3(1.0, 1.0, 1.0,\n                            0.0, -0.39465, 2.03211,\n                            1.13983, -0.58060, 0.0);\n\nconst mat3 rgb_2_yuv = mat3(0.299, -0.14713, 0.615,\n                            0.587, -0.28886, -0.51499,\n                            0.114, 0.436, -0.10001);\n\nfloat edge(vec2 uv, float stepsize) {\n\tfloat x = length(\n                     texture(iChannel0, uv - vec2(stepsize, 0.0)).rgb -\n                     texture(iChannel0, uv + vec2(stepsize, 0.0)).rgb);\n    \n\tfloat y = length(\n                     texture(iChannel0, uv - vec2(0.0, stepsize)).rgb -\n                     texture(iChannel0, uv + vec2(0.0, stepsize)).rgb);\n    return (x + y) / stepsize;\n}\n\n\nvec3 color_quantize_yuv(in vec3 color) {\n    const float yuv_step = 0.1;\n \tvec3 yuv = rgb_2_yuv * color;\n    yuv.x = 0.2 + 0.8 * yuv.x;\n    vec3 quantized =\n        vec3(0.1 * (0.2 + round(10.0 * yuv.x)),\n             0.125 * (0.25 * sign(yuv.yz) + round(8.0 * yuv.yz)));\n    return yuv_2_rgb * quantized;\n}\n\nvec3 orangize(in vec3 col) {\n     mat3 blowout = mat3(1.87583893, 0.96308725, 0.,\n       0.96308725, 1.17416107, 0.,\n       0.        , 0.        , 0.5);\n    vec3 cent = vec3(0.47968451, \n                     0.450743, \n                     0.45227517) + 0.2;\n   \n    \n    vec3 dir = blowout * (col - cent);\n    \n    vec3 maxes = (step(vec3(0.0), dir) - col)/dir;\n    \n    float amount = min(maxes.x, min(maxes.y, maxes.z));\n    \n    return col + dir * 0.5 * amount;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float edgesize = 2.0 / min(iResolution.x, iResolution.y);\n    float edge_modulate =\n        smoothstep(30.0, 15.0, 0.4 * edge(uv, edgesize));\n    vec3 color = orangize(color_quantize_yuv(texture(iChannel0, uv).rgb));\n    vec3 line_color = vec3(0.1);\n\tfragColor = vec4(mix(line_color, color, edge_modulate),1.0);\n}","name":"Image","description":"","type":"image"}]}