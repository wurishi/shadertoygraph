{"ver":"0.1","info":{"id":"Mf3Bz7","date":"1732871236","viewed":31,"name":"Simple Battery UI","username":"Chango","description":"Simple Battery UI,use nowBattery[0,1] states percent charge state;\nNotice the display error with real battery Contidion at //!!!","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["ui","battery"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define HFrameWidth 0.6\n#define HFrameHeight 0.3\n#define FrameThick 0.05\n#define OverallColor vec3(0.15,0.89,0.94)\n#define Space1 0.05\n#define Space2 0.05\n#define CellNum 5\n#define BatteryDisplayErrorAccept 0.05\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float canvasWidth = iResolution.x/iResolution.y;\n    vec2 p = fragCoord/iResolution.y;\n    vec2 canvasCenter = vec2(canvasWidth*0.5,0.5);\n\n    //Shape\n    //Frame\n    float re = SDFBox(p,canvasCenter,vec2(HFrameWidth,HFrameHeight));\n    float cutBox = SDFBox(p,canvasCenter,vec2(HFrameWidth-FrameThick,HFrameHeight-FrameThick));\n    re = max(re,-cutBox);\n    \n    //Cell\n    float cellWidth = (2.*HFrameWidth-2.*FrameThick-2.*Space1-(float(CellNum)-1.)*Space2)/float(CellNum);\n    float cellHeight = 2.*HFrameHeight-2.*FrameThick-2.*Space1;\n    vec2 cellCenter0=canvasCenter+vec2(-HFrameWidth+FrameThick+Space1+0.5*cellWidth,0.);\n    \n    //Battery\n    float nowBattery = 0.5*(1.+sin(iTime));\n    \n    for(int i=0;i<CellNum;i++)\n    {\n        //!!!\n        float realBatteryOfCell = float(i+1)/float(CellNum)-BatteryDisplayErrorAccept;\n        if(nowBattery<realBatteryOfCell)\n        {\n            break;\n        }\n        vec2 cellCenter = cellCenter0+vec2(float(i)*(Space2+cellWidth),0.);\n        float cell = SDFBox(p,cellCenter,vec2(0.5*cellWidth,0.5*cellHeight));\n        re = min(re,cell);\n    }\n    \n    \n    //Color\n    vec3 col = vec3(0.,0.,0.);\n    if(re<0.)\n    {\n        col = OverallColor;\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"float SDFBox(vec2 p, vec2 center, vec2 bound)\n{\n\tvec2 q = abs(p - center) - bound;\n\treturn length(max(q, 0.0)) + min(max(q.x, q.y), 0.0);\n}","name":"Common","description":"","type":"common"}]}