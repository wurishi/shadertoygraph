{"ver":"0.1","info":{"id":"ssVGWG","date":"1632237013","viewed":74,"name":"Basic 2D Circle Animation","username":"yonng","description":"Just for reviewing my knowledge of the shadertoy, back now :), hope to develop and test more and more shaders in the future.\n\nThanks for the great tutorial: https://inspirnathan.com/posts/48-shadertoy-tutorial-part-2/","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["2d","basic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 sdfcircle(vec2 uv, vec2 offset, float r)\n{\n    float x = uv.x - offset.x;\n    float y = uv.y - offset.y;\n    \n    float d = length(vec2(x,y)) - r;\n    \n    return d>0.? vec3(1.) : 0.5 + 0.5 * cos(iTime + uv.xyx + vec3(0,2,4));\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;   // texture uv, because of using canvas, so it is very simple\n\n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    //0.5 is the threshold and uv.x is the input value \n    //vec3 col_2 = vec3(step(0.5, uv),0.); \n    \n    uv -= .5;\n    uv.x *= iResolution.x / iResolution.y;   //stretched together\n    vec2 offset = vec2(sin(iTime*2.)*.23, cos(iTime*2.)*.23);\n    vec3 col_3 = sdfcircle(uv, offset, .15);   //shift the uv to obtain the circle to appear in the center\n    // Output to screen\n    fragColor = vec4(col_3, 1.0);\n}","name":"Image","description":"","type":"image"}]}