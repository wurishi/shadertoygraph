{"ver":"0.1","info":{"id":"NdtXzs","date":"1644325801","viewed":163,"name":"Gooey Voronoi","username":"oalpha","description":"Experimenting with voronoi patterns.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["voronoi"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define i_3 vec3(1., 0., 0.)\n#define j_3 vec3(0., 1., 0.)\n#define k_3 vec3(0., 0., 1.)\n\nfloat randomA (ivec2 st) {\n    return fract(sin(dot(vec2(st),\n                         vec2(84.8746,95.457)))*\n        43758.5453123);\n}\n\nfloat randomA (vec2 st) {\n    return fract(sin(dot(st,\n                         vec2(84.8746,95.457)))*\n        43758.5453123);\n}\n\nfloat randomA (vec3 st) {\n    return fract(sin(dot(st,\n                         vec3(84.8746,95.457,47.6345)))*\n        43758.5453123);\n}\n\nfloat randomB (ivec2 st) {\n    return fract(sin(dot(vec2(st),\n                         vec2(59.6845,49.856)))*\n        57494.9578445);\n}\n\nfloat randomB (vec2 st) {\n    return fract(sin(dot(st,\n                         vec2(59.6845,49.856)))*\n        57494.9578445);\n}\n\nfloat randomB (vec3 st) {\n    return fract(sin(dot(st,\n                         vec3(59.6845,49.856,84.3647)))*\n        57494.9578445);\n}\n\nfloat randomC (ivec2 st) {\n    return fract(sin(dot(vec2(st),\n                         vec2(27.8352,31.853)))*\n        83425.735442);\n}\n\nfloat randomC (vec2 st) {\n    return fract(sin(dot(st,\n                         vec2(27.8352,31.853)))*\n        83425.735442);\n}\n\nfloat randomC (vec3 st) {\n    return fract(sin(dot(st,\n                         vec3(27.8352,31.853,15.5734)))*\n        83425.735442);\n}\n\nvec2 random2f( ivec2 seed )\n{\n    return vec2(randomA(vec2(seed)), randomB(vec2(seed)));\n}\n\nvec2 random2f( ivec3 seed )\n{\n    return vec2(randomA(vec3(seed)), randomB(vec3(seed)));\n}\n\nvec2 random2f( vec2 seed )\n{\n    return vec2(randomA(seed), randomB(seed));\n}\n\nvec2 random2f( vec3 seed )\n{\n    return vec2(randomA(seed), randomB(seed));\n}\n\nvec3 random3f( ivec2 seed )\n{\n    return vec3(randomA(vec2(seed)), randomB(vec2(seed)), randomC(vec2(seed)));\n}\n\nvec3 random3f( ivec3 seed )\n{\n    return vec3(randomA(vec3(seed)), randomB(vec3(seed)), randomC(vec3(seed)));\n}\n\nvec3 random3f( vec2 seed )\n{\n    return vec3(randomA(seed), randomB(seed), randomC(seed));\n}\n\nvec3 random3f( vec3 seed )\n{\n    return vec3(randomA(seed), randomB(seed), randomC(seed));\n}\n\nfloat sum_e(vec3 v) {return dot(v, vec3(1.0));}\nivec3 sortD(vec3 v_) {\n    vec3 v = v_;\n    ivec3 s = ivec3(1,2,3);\n    for(int i = 1; i < 3; i++) {\n        bool m = true;\n        for(int j = i; j > 0 && m; j--) {\n            if(v[j] > v[j - 1]) {\n                float f = v[j];\n                v[j] = v[j - 1];\n                v[j - 1] = f;\n                int k = s[j];\n                s[j] = s[j - 1];\n                s[j - 1] = k;\n            }\n            else m = false;\n        }\n    }\n    return s;\n}\nfloat tetrahedron(vec3 a, vec3 b, vec3 c, vec3 d) {\n    vec3 B = b - a, C = c - a, D = d - a;\n    //return abs(triple(B, C, D)) / 6.0;\n    mat3 P = mat3(B, C, D);\n    return determinant(P);\n}\nfloat curve5(float a) {return a * a * a * (10.0 + a * (6.0 * a - 15.0));}\nmat3 rotX(float a) {\n    float c = cos(a), s = sin(a);\n    return mat3(\n         1.0,  0.0,  0.0,\n         0.0,    c,   -s,\n         0.0,    s,    c\n    );\n}\nmat3 rotY(float a) {\n    float c = cos(a), s = sin(a);\n    return mat3(\n           c,  0.0,    s,\n         0.0,  1.0,  0.0,\n          -s,  0.0,    c\n    );\n}\nmat3 rotZ(float a) {\n    float c = cos(a), s = sin(a);\n    return mat3(\n           c,  -s, 0.0,\n           s,   c, 0.0,\n         0.0, 0.0, 1.0\n    );\n}\nmat3 euler_zyx(vec3 a) {return rotX(a.x) * rotY(a.y) * rotZ(a.z);}\n#define PI2 6.283185307179586476925286766559\nvec3  randRot(vec3  v) {return euler_zyx(random3f(v) * PI2) * i_3;}\nfloat simplexGradient(vec3 p) {\n    /*\n    const float skew = 1. / 3.;\n    const float unskew = .5 / 3.;\n    \n    vec3 P = p + sum_e(p) * skew;\n    vec3 L = floor(P);\n    vec3 f = fract(P);\n    ivec3 o = sortD(f);\n    vec3[4] c;\n    c[0] = L;\n    c[3] = L + 1.0;\n    c[1] = c[0] + (o.x == 1 ? i_3 : o.x == 2 ? j_3 : k_3);\n    c[2] = c[1] + (o.y == 1 ? i_3 : o.y == 2 ? j_3 : k_3);\n    for(int i = 0; i < 4; i++) c[i] -= sum_e(c[i]) * unskew;\n    float V = tetrahedron(c[0], c[1], c[2], c[3]);\n    float[] w = float[4](\n        curve5(tetrahedron(   p, c[1], c[2], c[3]) / V),\n        curve5(tetrahedron(c[0],    p, c[2], c[3]) / V),\n        curve5(tetrahedron(c[0], c[1],    p, c[3]) / V),\n        curve5(tetrahedron(c[0], c[1], c[2],    p) / V)\n    );\n    vec3[4] g, D;\n    float[4] v;\n    float ns = 0., ws = 0.;\n    for(int i = 0; i < 4; i++) {\n        g[i] = randRot(c[i]);\n        D[i] = p - c[i];\n        v[i] = dot(g[i], D[i]);\n        ns += v[i] * w[i];\n        ws += w[i];\n    }\n    return ns / ws;\n    */\n    return randomA(p);\n}\n\nfloat smin( float a, float b, float k )\n{\n    float res = exp2( -k*a ) + exp2( -k*b );\n    return -log2( res )/k;\n}\n\nstruct voronoiData {\n    vec4 d4, d8;\n    vec4 b4, b8;\n    vec4 B4, B8;\n    vec4 sb4, sb8;\n    vec4 sB4, sB8;\n    ivec2 i1;\n    ivec2 i2;\n    ivec2 i3;\n    ivec2 i4;\n    ivec2 i5;\n    ivec2 i6;\n    ivec2 i7;\n    ivec2 i8;\n    vec2 r1;\n    vec2 r2;\n    vec2 r3;\n    vec2 r4;\n    vec2 r5;\n    vec2 r6;\n    vec2 r7;\n    vec2 r8;\n    vec3 c1, C1;\n    vec3 c2, C2;\n    vec3 c3, C3;\n    vec3 c4, C4;\n    vec3 c5, C5;\n    vec3 c6, C6;\n    vec3 c7, C7;\n    vec3 c8, C8;\n    vec3 c;\n};\n\nvoid voronoi(in vec3 x, in int L, in float k, out voronoiData data)\n{\n    ivec2 p = ivec2(floor( vec2(x) ));\n    vec2  f = fract( vec2(x) );\n\n    data.d4 = vec4( 8.0 );\n    data.d8 = vec4( 8.0 );\n    //for( int k=-2; k<=2; k++ )\n    for( int j=-3; j<=3; j++ )\n    for( int i=-3; i<=3; i++ )\n    {\n        ivec2 b = ivec2(i, j);\n        //vec2 rp = vec2(simplexGradient(vec3(p + b, x.z)), simplexGradient(vec3(p + b - 100, x.z)));\n        vec2 rp = vec2(randomA(vec3(p + b, x.z)), randomA(vec3(p + b - 100, x.z)));\n        rp = rp * 3. - 1.;\n        vec2  r = vec2(b) - f + rp;\n        float d = dot(r, r);\n\n        if( d < data.d4.x )\n        {\n            data.d8.w = data.d8.z;\n            data.d8.z = data.d8.y;\n            data.d8.y = data.d8.x;\n            data.d8.x = data.d4.w;\n            data.d4.w = data.d4.z;\n            data.d4.z = data.d4.y;\n            data.d4.y = data.d4.x;\n            data.d4.x = d;\n            \n            data.i8 = data.i7;\n            data.i7 = data.i6;\n            data.i6 = data.i5;\n            data.i5 = data.i4;\n            data.i4 = data.i3;\n            data.i3 = data.i2;\n            data.i2 = data.i1;\n            data.i1 = b;\n            \n            data.r8 = data.r7;\n            data.r7 = data.r6;\n            data.r6 = data.r5;\n            data.r5 = data.r4;\n            data.r4 = data.r3;\n            data.r3 = data.r2;\n            data.r2 = data.r1;\n            data.r1 = r;\n        }\n        else if( d < data.d4.y )\n        {\n            data.d8.w = data.d8.z;\n            data.d8.z = data.d8.y;\n            data.d8.y = data.d8.x;\n            data.d8.x = data.d4.w;\n            data.d4.w = data.d4.z;\n            data.d4.z = data.d4.y;\n            data.d4.y = d;\n            \n            data.i8 = data.i7;\n            data.i7 = data.i6;\n            data.i6 = data.i5;\n            data.i5 = data.i4;\n            data.i4 = data.i3;\n            data.i3 = data.i2;\n            data.i2 = b;\n            \n            data.r8 = data.r7;\n            data.r7 = data.r6;\n            data.r6 = data.r5;\n            data.r5 = data.r4;\n            data.r4 = data.r3;\n            data.r3 = data.r2;\n            data.r2 = r;\n        }\n        else if( d < data.d4.z )\n        {\n            data.d8.w = data.d8.z;\n            data.d8.z = data.d8.y;\n            data.d8.y = data.d8.x;\n            data.d8.x = data.d4.w;\n            data.d4.w = data.d4.z;\n            data.d4.z = d;\n            \n            data.i8 = data.i7;\n            data.i7 = data.i6;\n            data.i6 = data.i5;\n            data.i5 = data.i4;\n            data.i4 = data.i3;\n            data.i3 = b;\n            \n            data.r8 = data.r7;\n            data.r7 = data.r6;\n            data.r6 = data.r5;\n            data.r5 = data.r4;\n            data.r4 = data.r3;\n            data.r3 = r;\n        }\n        else if( d < data.d4.w )\n        {\n            data.d8.w = data.d8.z;\n            data.d8.z = data.d8.y;\n            data.d8.y = data.d8.x;\n            data.d8.x = data.d4.w;\n            data.d4.w = d;\n            \n            data.i8 = data.i7;\n            data.i7 = data.i6;\n            data.i6 = data.i5;\n            data.i5 = data.i4;\n            data.i4 = b;\n            \n            data.r8 = data.r7;\n            data.r7 = data.r6;\n            data.r6 = data.r5;\n            data.r5 = data.r4;\n            data.r4 = r;\n        }\n        else if( d < data.d8.x )\n        {\n            data.d8.w = data.d8.z;\n            data.d8.z = data.d8.y;\n            data.d8.y = data.d8.x;\n            data.d8.x = d;\n            \n            data.i8 = data.i7;\n            data.i7 = data.i6;\n            data.i6 = data.i5;\n            data.i5 = b;\n            \n            data.r8 = data.r7;\n            data.r7 = data.r6;\n            data.r6 = data.r5;\n            data.r5 = r;\n        }\n        else if( d < data.d8.y )\n        {\n            data.d8.w = data.d8.z;\n            data.d8.z = data.d8.y;\n            data.d8.y = d;\n            \n            data.i8 = data.i7;\n            data.i7 = data.i6;\n            data.i6 = b;\n            \n            data.r8 = data.r7;\n            data.r7 = data.r6;\n            data.r6 = r;\n        }\n        else if( d < data.d8.z )\n        {\n            data.d8.w = data.d8.z;\n            data.d8.z = d;\n            \n            data.i8 = data.i7;\n            data.i7 = b;\n            \n            data.r8 = data.r7;\n            data.r7 = r;\n        }\n        else if( d < data.d8.w )\n        {\n            data.d8.w = d;\n            \n            data.i8 = b;\n            \n            data.r8 = r;\n        }\n    }\n\n    data.b4 = vec4(8.);\n    data.b8 = vec4(8.);\n    data.B4 = vec4(8.);\n    data.B8 = vec4(8.);\n    data.sb4 = vec4(0.);\n    data.sb8 = vec4(0.);\n    data.sB4 = vec4(0.);\n    data.sB8 = vec4(0.);\n    //for( int k=-2; k<=2; k++ )\n    for( int j=-4; j<=4; j++ )\n    for( int i=-4; i<=4; i++ )\n    {\n        if(i == 0 && j == 0) continue;\n        ivec2 b = data.i1 + ivec2(i, j);\n        //vec2 rp = vec2(simplexGradient(vec3(p + b, x.z)), simplexGradient(vec3(p + b - 100, x.z)));\n        vec2 rp = vec2(randomA(vec3(p + b, x.z)), randomA(vec3(p + b - 100, x.z)));\n        rp = rp * 3. - 1.;\n        vec2  r = vec2(b) - f + rp;\n        \n        float d = dot(0.5*(data.r1+r), normalize(r-data.r1));\n        data.b4.x = min( data.b4.x, d );\n        data.B4.x = min( data.B4.x, d );\n        data.B4.y = min( data.B4.y, d );\n        data.B4.z = min( data.B4.z, d );\n        data.B4.w = min( data.B4.w, d );\n        data.B8.x = min( data.B8.x, d );\n        data.B8.y = min( data.B8.y, d );\n        data.B8.z = min( data.B8.z, d );\n        data.B8.w = min( data.B8.w, d );\n        data.sb4.x += exp2(-k*d);\n        data.sB4.x += exp2(-k*d);\n        data.sB4.y += exp2(-k*d);\n        data.sB4.z += exp2(-k*d);\n        data.sB4.w += exp2(-k*d);\n        data.sB8.x += exp2(-k*d);\n        data.sB8.y += exp2(-k*d);\n        data.sB8.z += exp2(-k*d);\n        data.sB8.w += exp2(-k*d);\n        \n        if(all(equal(b, data.i2))) continue;\n        d = dot(0.5*(data.r2+r), normalize(r-data.r2));\n        data.b4.y = min( data.b4.y, d );\n        data.B4.y = min( data.B4.y, d );\n        data.B4.z = min( data.B4.z, d );\n        data.B4.w = min( data.B4.w, d );\n        data.B8.x = min( data.B8.x, d );\n        data.B8.y = min( data.B8.y, d );\n        data.B8.z = min( data.B8.z, d );\n        data.B8.w = min( data.B8.w, d );\n        data.sb4.y += exp2(-k*d);\n        data.sB4.y += exp2(-k*d);\n        data.sB4.z += exp2(-k*d);\n        data.sB4.w += exp2(-k*d);\n        data.sB8.x += exp2(-k*d);\n        data.sB8.y += exp2(-k*d);\n        data.sB8.z += exp2(-k*d);\n        data.sB8.w += exp2(-k*d);\n        \n        if(all(equal(b, data.i3))) continue;\n        d = dot(0.5*(data.r3+r), normalize(r-data.r3));\n        data.b4.z = min( data.b4.z, d );\n        data.B4.z = min( data.B4.z, d );\n        data.B4.w = min( data.B4.w, d );\n        data.B8.x = min( data.B8.x, d );\n        data.B8.y = min( data.B8.y, d );\n        data.B8.z = min( data.B8.z, d );\n        data.B8.w = min( data.B8.w, d );\n        data.sb4.z += exp2(-k*d);\n        data.sB4.z += exp2(-k*d);\n        data.sB4.w += exp2(-k*d);\n        data.sB8.x += exp2(-k*d);\n        data.sB8.y += exp2(-k*d);\n        data.sB8.z += exp2(-k*d);\n        data.sB8.w += exp2(-k*d);\n        \n        if(all(equal(b, data.i4))) continue;\n        d = dot(0.5*(data.r4+r), normalize(r-data.r4));\n        data.b4.w = min( data.b4.w, d );\n        data.B4.w = min( data.B4.w, d );\n        data.B8.x = min( data.B8.x, d );\n        data.B8.y = min( data.B8.y, d );\n        data.B8.z = min( data.B8.z, d );\n        data.B8.w = min( data.B8.w, d );\n        data.sb4.w += exp2(-k*d);\n        data.sB4.w += exp2(-k*d);\n        data.sB8.x += exp2(-k*d);\n        data.sB8.y += exp2(-k*d);\n        data.sB8.z += exp2(-k*d);\n        data.sB8.w += exp2(-k*d);\n        \n        if(all(equal(b, data.i5))) continue;\n        d = dot(0.5*(data.r5+r), normalize(r-data.r5));\n        data.b8.x = min( data.b8.x, d );\n        data.B8.x = min( data.B8.x, d );\n        data.B8.y = min( data.B8.y, d );\n        data.B8.z = min( data.B8.z, d );\n        data.B8.w = min( data.B8.w, d );\n        data.sb8.x += exp2(-k*d);\n        data.sB8.x += exp2(-k*d);\n        data.sB8.y += exp2(-k*d);\n        data.sB8.z += exp2(-k*d);\n        data.sB8.w += exp2(-k*d);\n        \n        if(all(equal(b, data.i6))) continue;\n        d = dot(0.5*(data.r6+r), normalize(r-data.r6));\n        data.b8.y = min( data.b8.y, d );\n        data.B8.y = min( data.B8.y, d );\n        data.B8.z = min( data.B8.z, d );\n        data.B8.w = min( data.B8.w, d );\n        data.sb8.y += exp2(-k*d);\n        data.sB8.y += exp2(-k*d);\n        data.sB8.z += exp2(-k*d);\n        data.sB8.w += exp2(-k*d);\n        \n        if(all(equal(b, data.i7))) continue;\n        d = dot(0.5*(data.r7+r), normalize(r-data.r7));\n        data.b8.z = min( data.b8.z, d );\n        data.B8.z = min( data.B8.z, d );\n        data.B8.w = min( data.B8.w, d );\n        data.sb8.z += exp2(-k*d);\n        data.sB8.z += exp2(-k*d);\n        data.sB8.w += exp2(-k*d);\n        \n        if(all(equal(b, data.i8))) continue;\n        d = dot(0.5*(data.r8+r), normalize(r-data.r8));\n        data.b8.w = min( data.b8.w, d );\n        data.B8.w = min( data.B8.w, d );\n        data.sb8.w += exp2(-k*d);\n        data.sB8.w += exp2(-k*d);\n    }\n\n    data.d4 = sqrt( data.d4 );\n    data.d8 = sqrt( data.d8 );\n    data.sb4 = -log2(data.sb4)/k;\n    data.sb8 = -log2(data.sb4)/k;\n    data.sB4 = -log2(data.sb4)/k;\n    data.sB8 = -log2(data.sb4)/k;\n    \n    {\n        data.i1 = p + data.i1;\n        data.i2 = p + data.i2;\n        data.i3 = p + data.i3;\n        data.i4 = p + data.i4;\n        data.i5 = p + data.i5;\n        data.i6 = p + data.i6;\n        data.i7 = p + data.i7;\n        data.i8 = p + data.i8;\n\n        ivec2 i1 = data.i1 *     1, I1 = i1;\n        ivec2 i2 = data.i2 *     4, I2 = I1 + i2;\n        ivec2 i3 = data.i3 *    16, I3 = I2 + i3;\n        ivec2 i4 = data.i4 *    64, I4 = I3 + i4;\n        ivec2 i5 = data.i5 *   256, I5 = I4 + i5;\n        ivec2 i6 = data.i6 *  1024, I6 = I5 + i6;\n        ivec2 i7 = data.i7 *  4096, I7 = I6 + i7;\n        ivec2 i8 = data.i8 * 16384, I8 = I7 + i8;\n\n        data.c1 = random3f(i1);\n        data.c2 = random3f(i2);\n        data.c3 = random3f(i3);\n        data.c4 = random3f(i4);\n        data.c5 = random3f(i5);\n        data.c6 = random3f(i6);\n        data.c7 = random3f(i7);\n        data.c8 = random3f(i8);\n\n        data.C1 = random3f(I1);\n        data.C2 = random3f(I2);\n        data.C3 = random3f(I3);\n        data.C4 = random3f(I4);\n        data.C5 = random3f(I5);\n        data.C6 = random3f(I6);\n        data.C7 = random3f(I7);\n        data.C8 = random3f(I8);\n\n        data.c = data.c1;\n        if(L > 1) data.c = mix(data.C2, data.c, .5);\n        if(L > 2) data.c = mix(data.C3, data.c, .9);\n        if(L > 3) data.c = mix(data.C4, data.c, .95);\n        if(L > 4) data.c = mix(data.C5, data.c, .95);\n        if(L > 5) data.c = mix(data.C6, data.c, .975);\n        if(L > 6) data.c = mix(data.C7, data.c, .975);\n        if(L > 7) data.c = mix(data.C8, data.c, .975);\n\n        //if(L == 1) data.c = data.C1;\n        //if(L == 2) data.c = data.C2;\n        //if(L == 3) data.c = data.C3;\n        //if(L == 4) data.c = data.C4;\n        //if(L == 5) data.c = data.C5;\n        //if(L == 6) data.c = data.C6;\n        //if(L == 7) data.c = data.C7;\n        //if(L == 8) data.c = data.C8;\n    }\n}\n\nstruct voronoiData3 {\n    vec4 d4, d8;\n    vec4 b4, b8;\n    vec4 B4, B8;\n    vec4 sb4, sb8;\n    vec4 sB4, sB8;\n    ivec3 i1;\n    ivec3 i2;\n    ivec3 i3;\n    ivec3 i4;\n    ivec3 i5;\n    ivec3 i6;\n    ivec3 i7;\n    ivec3 i8;\n    vec3 r1;\n    vec3 r2;\n    vec3 r3;\n    vec3 r4;\n    vec3 r5;\n    vec3 r6;\n    vec3 r7;\n    vec3 r8;\n    vec3 c1, C1;\n    vec3 c2, C2;\n    vec3 c3, C3;\n    vec3 c4, C4;\n    vec3 c5, C5;\n    vec3 c6, C6;\n    vec3 c7, C7;\n    vec3 c8, C8;\n    vec3 c;\n};\n\nvoid voronoi3(in vec3 x, in int L, in float K, out voronoiData3 data)\n{\n    ivec3 p = ivec3(floor(x));\n    vec3  f = fract(x);\n\n    data.d4 = vec4( 8.0 );\n    data.d8 = vec4( 8.0 );\n    //for( int k=-2; k<=2; k++ )\n    for( int k=-3; k<=3; k++ )\n    for( int j=-3; j<=3; j++ )\n    for( int i=-3; i<=3; i++ )\n    {\n        ivec3 b = ivec3(i, j, k);\n        vec3 rp = vec3(random3f(vec3(p + b)));\n        rp = rp * 3. - 1.;\n        vec3  r = vec3(b) - f + rp;\n        float d = dot(r, r);\n\n        if( d < data.d4.x )\n        {\n            data.d8.w = data.d8.z;\n            data.d8.z = data.d8.y;\n            data.d8.y = data.d8.x;\n            data.d8.x = data.d4.w;\n            data.d4.w = data.d4.z;\n            data.d4.z = data.d4.y;\n            data.d4.y = data.d4.x;\n            data.d4.x = d;\n            \n            data.i8 = data.i7;\n            data.i7 = data.i6;\n            data.i6 = data.i5;\n            data.i5 = data.i4;\n            data.i4 = data.i3;\n            data.i3 = data.i2;\n            data.i2 = data.i1;\n            data.i1 = b;\n            \n            data.r8 = data.r7;\n            data.r7 = data.r6;\n            data.r6 = data.r5;\n            data.r5 = data.r4;\n            data.r4 = data.r3;\n            data.r3 = data.r2;\n            data.r2 = data.r1;\n            data.r1 = r;\n        }\n        else if( d < data.d4.y )\n        {\n            data.d8.w = data.d8.z;\n            data.d8.z = data.d8.y;\n            data.d8.y = data.d8.x;\n            data.d8.x = data.d4.w;\n            data.d4.w = data.d4.z;\n            data.d4.z = data.d4.y;\n            data.d4.y = d;\n            \n            data.i8 = data.i7;\n            data.i7 = data.i6;\n            data.i6 = data.i5;\n            data.i5 = data.i4;\n            data.i4 = data.i3;\n            data.i3 = data.i2;\n            data.i2 = b;\n            \n            data.r8 = data.r7;\n            data.r7 = data.r6;\n            data.r6 = data.r5;\n            data.r5 = data.r4;\n            data.r4 = data.r3;\n            data.r3 = data.r2;\n            data.r2 = r;\n        }\n        else if( d < data.d4.z )\n        {\n            data.d8.w = data.d8.z;\n            data.d8.z = data.d8.y;\n            data.d8.y = data.d8.x;\n            data.d8.x = data.d4.w;\n            data.d4.w = data.d4.z;\n            data.d4.z = d;\n            \n            data.i8 = data.i7;\n            data.i7 = data.i6;\n            data.i6 = data.i5;\n            data.i5 = data.i4;\n            data.i4 = data.i3;\n            data.i3 = b;\n            \n            data.r8 = data.r7;\n            data.r7 = data.r6;\n            data.r6 = data.r5;\n            data.r5 = data.r4;\n            data.r4 = data.r3;\n            data.r3 = r;\n        }\n        else if( d < data.d4.w )\n        {\n            data.d8.w = data.d8.z;\n            data.d8.z = data.d8.y;\n            data.d8.y = data.d8.x;\n            data.d8.x = data.d4.w;\n            data.d4.w = d;\n            \n            data.i8 = data.i7;\n            data.i7 = data.i6;\n            data.i6 = data.i5;\n            data.i5 = data.i4;\n            data.i4 = b;\n            \n            data.r8 = data.r7;\n            data.r7 = data.r6;\n            data.r6 = data.r5;\n            data.r5 = data.r4;\n            data.r4 = r;\n        }\n        else if( d < data.d8.x )\n        {\n            data.d8.w = data.d8.z;\n            data.d8.z = data.d8.y;\n            data.d8.y = data.d8.x;\n            data.d8.x = d;\n            \n            data.i8 = data.i7;\n            data.i7 = data.i6;\n            data.i6 = data.i5;\n            data.i5 = b;\n            \n            data.r8 = data.r7;\n            data.r7 = data.r6;\n            data.r6 = data.r5;\n            data.r5 = r;\n        }\n        else if( d < data.d8.y )\n        {\n            data.d8.w = data.d8.z;\n            data.d8.z = data.d8.y;\n            data.d8.y = d;\n            \n            data.i8 = data.i7;\n            data.i7 = data.i6;\n            data.i6 = b;\n            \n            data.r8 = data.r7;\n            data.r7 = data.r6;\n            data.r6 = r;\n        }\n        else if( d < data.d8.z )\n        {\n            data.d8.w = data.d8.z;\n            data.d8.z = d;\n            \n            data.i8 = data.i7;\n            data.i7 = b;\n            \n            data.r8 = data.r7;\n            data.r7 = r;\n        }\n        else if( d < data.d8.w )\n        {\n            data.d8.w = d;\n            \n            data.i8 = b;\n            \n            data.r8 = r;\n        }\n    }\n\n    data.b4 = vec4(8.);\n    data.b8 = vec4(8.);\n    data.B4 = vec4(8.);\n    data.B8 = vec4(8.);\n    data.sb4 = vec4(0.);\n    data.sb8 = vec4(0.);\n    data.sB4 = vec4(0.);\n    data.sB8 = vec4(0.);\n    for( int k=-4; k<=4; k++ )\n    for( int j=-4; j<=4; j++ )\n    for( int i=-4; i<=4; i++ )\n    {\n        if(i == 0 && j == 0 && k == 0) continue;\n        ivec3 b = data.i1 + ivec3(i, j, k);\n        vec3 rp = vec3(random3f(vec3(p + b)));\n        rp = rp * 3. - 1.;\n        vec3  r = vec3(b) - f + rp;\n        \n        float d = dot(0.5*(data.r1+r), normalize(r-data.r1));\n        data.b4.x = min( data.b4.x, d );\n        data.B4.x = min( data.B4.x, d );\n        data.B4.y = min( data.B4.y, d );\n        data.B4.z = min( data.B4.z, d );\n        data.B4.w = min( data.B4.w, d );\n        data.B8.x = min( data.B8.x, d );\n        data.B8.y = min( data.B8.y, d );\n        data.B8.z = min( data.B8.z, d );\n        data.B8.w = min( data.B8.w, d );\n        data.sb4.x += exp2(-K*d);\n        data.sB4.x += exp2(-K*d);\n        data.sB4.y += exp2(-K*d);\n        data.sB4.z += exp2(-K*d);\n        data.sB4.w += exp2(-K*d);\n        data.sB8.x += exp2(-K*d);\n        data.sB8.y += exp2(-K*d);\n        data.sB8.z += exp2(-K*d);\n        data.sB8.w += exp2(-K*d);\n        \n        if(all(equal(b, data.i2))) continue;\n        d = dot(0.5*(data.r2+r), normalize(r-data.r2));\n        data.b4.y = min( data.b4.y, d );\n        data.B4.y = min( data.B4.y, d );\n        data.B4.z = min( data.B4.z, d );\n        data.B4.w = min( data.B4.w, d );\n        data.B8.x = min( data.B8.x, d );\n        data.B8.y = min( data.B8.y, d );\n        data.B8.z = min( data.B8.z, d );\n        data.B8.w = min( data.B8.w, d );\n        data.sb4.y += exp2(-K*d);\n        data.sB4.y += exp2(-K*d);\n        data.sB4.z += exp2(-K*d);\n        data.sB4.w += exp2(-K*d);\n        data.sB8.x += exp2(-K*d);\n        data.sB8.y += exp2(-K*d);\n        data.sB8.z += exp2(-K*d);\n        data.sB8.w += exp2(-K*d);\n        \n        if(all(equal(b, data.i3))) continue;\n        d = dot(0.5*(data.r3+r), normalize(r-data.r3));\n        data.b4.z = min( data.b4.z, d );\n        data.B4.z = min( data.B4.z, d );\n        data.B4.w = min( data.B4.w, d );\n        data.B8.x = min( data.B8.x, d );\n        data.B8.y = min( data.B8.y, d );\n        data.B8.z = min( data.B8.z, d );\n        data.B8.w = min( data.B8.w, d );\n        data.sb4.z += exp2(-K*d);\n        data.sB4.z += exp2(-K*d);\n        data.sB4.w += exp2(-K*d);\n        data.sB8.x += exp2(-K*d);\n        data.sB8.y += exp2(-K*d);\n        data.sB8.z += exp2(-K*d);\n        data.sB8.w += exp2(-K*d);\n        \n        if(all(equal(b, data.i4))) continue;\n        d = dot(0.5*(data.r4+r), normalize(r-data.r4));\n        data.b4.w = min( data.b4.w, d );\n        data.B4.w = min( data.B4.w, d );\n        data.B8.x = min( data.B8.x, d );\n        data.B8.y = min( data.B8.y, d );\n        data.B8.z = min( data.B8.z, d );\n        data.B8.w = min( data.B8.w, d );\n        data.sb4.w += exp2(-K*d);\n        data.sB4.w += exp2(-K*d);\n        data.sB8.x += exp2(-K*d);\n        data.sB8.y += exp2(-K*d);\n        data.sB8.z += exp2(-K*d);\n        data.sB8.w += exp2(-K*d);\n        \n        if(all(equal(b, data.i5))) continue;\n        d = dot(0.5*(data.r5+r), normalize(r-data.r5));\n        data.b8.x = min( data.b8.x, d );\n        data.B8.x = min( data.B8.x, d );\n        data.B8.y = min( data.B8.y, d );\n        data.B8.z = min( data.B8.z, d );\n        data.B8.w = min( data.B8.w, d );\n        data.sb8.x += exp2(-K*d);\n        data.sB8.x += exp2(-K*d);\n        data.sB8.y += exp2(-K*d);\n        data.sB8.z += exp2(-K*d);\n        data.sB8.w += exp2(-K*d);\n        \n        if(all(equal(b, data.i6))) continue;\n        d = dot(0.5*(data.r6+r), normalize(r-data.r6));\n        data.b8.y = min( data.b8.y, d );\n        data.B8.y = min( data.B8.y, d );\n        data.B8.z = min( data.B8.z, d );\n        data.B8.w = min( data.B8.w, d );\n        data.sb8.y += exp2(-K*d);\n        data.sB8.y += exp2(-K*d);\n        data.sB8.z += exp2(-K*d);\n        data.sB8.w += exp2(-K*d);\n        \n        if(all(equal(b, data.i7))) continue;\n        d = dot(0.5*(data.r7+r), normalize(r-data.r7));\n        data.b8.z = min( data.b8.z, d );\n        data.B8.z = min( data.B8.z, d );\n        data.B8.w = min( data.B8.w, d );\n        data.sb8.z += exp2(-K*d);\n        data.sB8.z += exp2(-K*d);\n        data.sB8.w += exp2(-K*d);\n        \n        if(all(equal(b, data.i8))) continue;\n        d = dot(0.5*(data.r8+r), normalize(r-data.r8));\n        data.b8.w = min( data.b8.w, d );\n        data.B8.w = min( data.B8.w, d );\n        data.sb8.w += exp2(-K*d);\n        data.sB8.w += exp2(-K*d);\n    }\n\n    data.d4 = sqrt( data.d4 );\n    data.d8 = sqrt( data.d8 );\n    data.sb4 = -log2(data.sb4)/K;\n    data.sb8 = -log2(data.sb4)/K;\n    data.sB4 = -log2(data.sb4)/K;\n    data.sB8 = -log2(data.sb4)/K;\n    \n    {\n        data.i1 = p + data.i1;\n        data.i2 = p + data.i2;\n        data.i3 = p + data.i3;\n        data.i4 = p + data.i4;\n        data.i5 = p + data.i5;\n        data.i6 = p + data.i6;\n        data.i7 = p + data.i7;\n        data.i8 = p + data.i8;\n\n        ivec3 i1 = data.i1 *     1, I1 = i1;\n        ivec3 i2 = data.i2 *     4, I2 = I1 + i2;\n        ivec3 i3 = data.i3 *    16, I3 = I2 + i3;\n        ivec3 i4 = data.i4 *    64, I4 = I3 + i4;\n        ivec3 i5 = data.i5 *   256, I5 = I4 + i5;\n        ivec3 i6 = data.i6 *  1024, I6 = I5 + i6;\n        ivec3 i7 = data.i7 *  4096, I7 = I6 + i7;\n        ivec3 i8 = data.i8 * 16384, I8 = I7 + i8;\n\n        data.c1 = random3f(i1);\n        data.c2 = random3f(i2);\n        data.c3 = random3f(i3);\n        data.c4 = random3f(i4);\n        data.c5 = random3f(i5);\n        data.c6 = random3f(i6);\n        data.c7 = random3f(i7);\n        data.c8 = random3f(i8);\n\n        data.C1 = random3f(I1);\n        data.C2 = random3f(I2);\n        data.C3 = random3f(I3);\n        data.C4 = random3f(I4);\n        data.C5 = random3f(I5);\n        data.C6 = random3f(I6);\n        data.C7 = random3f(I7);\n        data.C8 = random3f(I8);\n\n        data.c = data.c1;\n        if(L > 1) data.c = mix(data.C2, data.c, .5);\n        if(L > 2) data.c = mix(data.C3, data.c, .9);\n        if(L > 3) data.c = mix(data.C4, data.c, .95);\n        if(L > 4) data.c = mix(data.C5, data.c, .95);\n        if(L > 5) data.c = mix(data.C6, data.c, .975);\n        if(L > 6) data.c = mix(data.C7, data.c, .975);\n        if(L > 7) data.c = mix(data.C8, data.c, .975);\n\n        //if(L == 1) data.c = data.C1;\n        //if(L == 2) data.c = data.C2;\n        //if(L == 3) data.c = data.C3;\n        //if(L == 4) data.c = data.C4;\n        //if(L == 5) data.c = data.C5;\n        //if(L == 6) data.c = data.C6;\n        //if(L == 7) data.c = data.C7;\n        //if(L == 8) data.c = data.C8;\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.y;\n\n    // Time varying pixel color\n    vec3 col = .5 + .5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    col = vec3(randomC(ivec2(fragCoord.xy)));\n    col = random3f(ivec2(fragCoord.xy));\n    \n    float S = 4.;\n    float timeRate = .1;\n    //timeRate = 0.;\n    float t = iTime * timeRate;\n    vec3 p = vec3(uv * S, t);\n    \n    fragColor = vec4(0.);\n    const int R = 1, R2 = R * R;\n    const float fR2 = float(R2);\n    for(int ix = 1 - R; ix < R; ix += 2)\n    for(int iy = 1 - R; iy < R; iy += 2) {\n    ivec2 i = ivec2(ix, iy);\n    vec2 shift = vec2(i) / fR2;\n    shift /= iResolution.y;\n    vec3 P = vec3(p.xy + shift, p.z);\n    \n    //voronoiData data;\n    //voronoi(P, 2, 32., data);\n    voronoiData3 data;\n    voronoi3(P, 2, 32., data);\n    \n    vec2 g2 = fract(uv * S);\n    float g = min(g2.x, g2.y);\n    float gridD  = 1. - smoothstep(0., .02, g);\n    float cell   = 1. - smoothstep(.04, .05, data.d4.x);\n    float border1 = 1. - smoothstep(.005, .010, data.b4.x);\n    float border2 = 1. - smoothstep(.001, .005, data.b4.y);\n    float border3 = 1. - smoothstep(.001, .003, data.b4.z);\n    float border4 = 1. - smoothstep(.001, .003, data.b4.w);\n    float border5 = 1. - smoothstep(.001, .003, data.b8.x);\n    float border6 = 1. - smoothstep(.001, .003, data.b8.y);\n    float border7 = 1. - smoothstep(.001, .003, data.b8.z);\n    float border8 = 1. - smoothstep(.001, .003, data.b8.w);\n    float Border1 = 1. - smoothstep(.005, .010, data.B4.x);\n    float Border2 = 1. - smoothstep(.003, .005, data.B4.y);\n    float Border3 = 1. - smoothstep(.001, .003, data.B4.z);\n    float Border4 = 1. - smoothstep(.001, .003, data.B4.w);\n    float Border5 = 1. - smoothstep(.001, .003, data.B8.x);\n    float Border6 = 1. - smoothstep(.001, .003, data.B8.y);\n    float Border7 = 1. - smoothstep(.001, .003, data.B8.z);\n    float Border8 = 1. - smoothstep(.001, .003, data.B8.w);\n    float sborder1 = 1. - smoothstep(.020, .025, data.sb4.x);\n    float sborder2 = 1. - smoothstep(.000, .010, data.sb4.y);\n    float sborder3 = 1. - smoothstep(.001, .003, data.sb4.z);\n    float sborder4 = 1. - smoothstep(.001, .003, data.sb4.w);\n    float sborder5 = 1. - smoothstep(.001, .003, data.sb8.x);\n    float sborder6 = 1. - smoothstep(.001, .003, data.sb8.y);\n    float sborder7 = 1. - smoothstep(.001, .003, data.sb8.z);\n    float sborder8 = 1. - smoothstep(.001, .003, data.sb8.w);\n    float sBorder1 = 1. - smoothstep(.005, .010, data.sB4.x);\n    float sBorder2 = 1. - smoothstep(.010, .020, data.sB4.y);\n    float sBorder3 = 1. - smoothstep(.001, .003, data.sB4.z);\n    float sBorder4 = 1. - smoothstep(.001, .003, data.sB4.w);\n    float sBorder5 = 1. - smoothstep(.001, .003, data.sB8.x);\n    float sBorder6 = 1. - smoothstep(.001, .003, data.sB8.y);\n    float sBorder7 = 1. - smoothstep(.001, .003, data.sB8.z);\n    float sBorder8 = 1. - smoothstep(.001, .003, data.sB8.w);\n    \n    col = vec3(data.B8.w * 4.);\n    \n    col = data.c * .75 + .25;\n    //col = data.c * .125;\n    col = col * (data.d4.y * .5 + .5);\n    //col = col * (data.B4.z * 2. + .5);\n    //col = vec3(data.d4.x);\n    //col = vec3(data.d4.y - .2);\n    //col = vec3(data.d4.z - .4);\n    //col = vec3(data.d4.w - .5);\n    //col = vec3(data.d8.x - .6);\n    //col = vec3(data.d8.y - .7);\n    //col = vec3(data.d8.z - .8);\n    //col = vec3(data.d8.w - .9);\n    \n    col = mix(col, vec3(data.c1), cell);\n    col = mix(col, vec3(1.), sborder2);\n    col = mix(col, vec3(0.), sborder1);\n    //col = mix(col, vec3(0.), border2 * .5);\n    //col = mix(col, vec3(0.), border3 * .25);\n    //col = mix(col, vec3(0.), border4 * .125);\n    //col = mix(col, vec3(0.), border5 * .0625);\n    //col = mix(col, vec3(0.), border6 * .03125);\n    //col = mix(col, vec3(0.), border7 * .015625);\n    //col = mix(col, vec3(0.), border8 * .0078125);\n    //col = mix(col, vec3(0.), gridD);\n    \n    //col = vec3(border1 + sborder1 * .5);\n    \n    fragColor += vec4(col, 1.) / fR2;\n    }\n\n    // Output to screen\n    //fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"}]}