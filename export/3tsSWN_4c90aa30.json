{"ver":"0.1","info":{"id":"3tsSWN","date":"1562959555","viewed":217,"name":"3D Julia Set Slow Loader","username":"Veggiebob","description":"A slow loader for more detailed 3D Julia set fractals","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["3d","fractal","julia"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sfGzn","filepath":"/media/a/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png","previewfilepath":"/media/ap/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_ITERS 18\n#define MAX_STEPS 5000\nvec3 sq3 (vec3 v) {\n    return vec3(\n        v.x*v.x-v.y*v.y-v.z*v.z,\n        2.*v.x*v.y,\n        2.*v.x*v.z\n    );\n}\nfloat squishy (float x) {\n    return x*x*x;\n}\nfloat julia (vec3 p, vec3 c) {\n    vec3 k = p;\n    for(int i = 0; i<MAX_ITERS; i++) {\n        k = sq3(k) + c;\n        if(length(k)>10.) return 1.-squishy(float(i)/float(MAX_ITERS));\n    }\n    return -0.001;\n}\nvec2 rotate2D (vec2 p, float angle){\n    return vec2(p.x*cos(angle)-p.y*sin(angle), p.y*cos(angle)+p.x*sin(angle));\\\n}\nfloat sdf (vec3 p) {\n  \tvec3 r = p;\n    r.xz = rotate2D(r.xz, iTime*0.3);\n    r.yz = rotate2D(r.yz, iTime*0.1);\n    float t = 15.23;\n    return julia(p,\n                 \n                 vec3(sin(t*0.3)*0.7, cos(t*0.4)*0.7, 0.1)\n                     //vec3(sin(iTime*0.3)*0.7, cos(iTime*0.4)*0.7, 0.1)\n    );\n    //return length(p)-1.;\n}\nvec4 trace (vec3 o, vec3 r) {\n    vec3 p = o;\n    float t = 0.;\n    float s;\n    int i;\n    for(i = 0; i<MAX_STEPS; i++) {\n        p = o+r*t;\n        s = sdf(p);\n        t+=s*0.0005;\n\t\tif(t>10.) break;\n    }\n    return vec4(p, float(i));\n}\nconst float E = 0.01;\nvec3 estimateNormal (vec3 p) {\n    return normalize(vec3(\n        sdf(vec3(p.x+E, p.y, p.z))-sdf(vec3(p.x-E, p.y, p.z)),\n        sdf(vec3(p.x, p.y+E, p.z))-sdf(vec3(p.x, p.y-E, p.z)),\n        sdf(vec3(p.x, p.y, p.z+E))-sdf(vec3(p.x, p.y, p.z-E))\n    ));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if(abs(mod(float(iFrame)*4., iResolution.y)-fragCoord.y)<6.) {\n        // Normalized pixel coordinates (from 0 to 1)\n        vec2 uv = fragCoord/iResolution.xy;\n        uv-=0.5;\n        vec2 mouse = iMouse.xy/iResolution.xy;\n        mouse-=0.5;\n        float aspect = iResolution.y/iResolution.x;\n        uv.x/=aspect;\n        mouse.x/=aspect;\n        vec3 cam = vec3(0., 0., -2.);\n        vec3 ray = normalize(vec3(uv.xy*1.3, 1.));\n\n        vec3 rot = vec3(mouse.y*5., -mouse.x*3., 0.);\n\n        cam.xz = rotate2D(cam.xz, rot.y);\n        ray.xz = rotate2D(ray.xz, rot.y);\n\n        cam.zy = rotate2D(cam.zy, rot.x);\n        ray.zy = rotate2D(ray.zy, rot.x);\n\n\n        vec4 t = trace(cam, ray);\n        vec3 e = t.xyz;\n        vec3 light = vec3(0., 0., -5.);\n        vec3 toLight = normalize(light-e);\n        vec3 norm = estimateNormal(e);\n        float diffuse = max(0.,dot(toLight, norm))*0.8;\n        vec3 refl = reflect(ray, norm);\n        float specular = pow(max(0.0, dot(refl, toLight)), 4.0)*0.5;\n        float d = length(e-cam);\n        float fog = 1.0 / (1.0 + d*d*0.5);\n\n        vec3 col = vec3(1.);//texture(iChannel0, refl).rgb*1.+0.8;\n        //col -= pow(t.w/float(MAX_STEPS), 2.)*0.5;//ao\n        col *= (diffuse+specular)+0.1;//other light\n        col *= fog;\n\n        // Output to screen\n        fragColor = vec4(col,1.0);\n    } else {\n        fragColor = vec2(1.,sin(iTime)).xyyy;\n        discard;\n    }\n}","name":"Image","description":"","type":"image"}]}