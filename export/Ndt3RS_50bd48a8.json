{"ver":"0.1","info":{"id":"Ndt3RS","date":"1630067586","viewed":72,"name":"project stochastics round 1","username":"Dusty","description":"a shuffling function","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["experiment"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// a shuffling function, \n// that approximates an ideal noise generator to a high degree (*), \n// over all possible floating-point keys\n//\n// efficiency is the secondary consideration\n//\n// (*) visual artifact free over regular latices, non-repeating\n//\n// this strategy seems ok for the 2D case - not observing correlations\n// the transforms of both the key and hash value are each bijective\n//\n// quick update to improve survey \"camera\", added a single mixing op\n// and ... color ...\nfloat stochastics(uint h, vec2 key)\n{  \n  uvec2 k = uvec2(floatBitsToUint(key.x), floatBitsToUint(key.y));\n  k *= 0xCC2BFE9Du; k ^= (k >> 16);\n  h += k.x; h *= 0xCC2BFE9Du; h ^= (h >> 16); \n  h += k.y; h *= 0xCC2BFE9Du; h ^= (h >> 16);\n  h *= 0xCC2BFE9Du; h ^= (h >> 16);\n  return float((h * 0xCC2BFE9Du) & 0xffffffu) * (1.0 / float(0x1000000));\n}\n\nfloat stochastics(vec2 key)\n{\n  return stochastics(0u, key);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = floor(fragCoord + 100.0 * vec2(cos(0.1 * sqrt(iTime)), sin(0.1 * sqrt(iTime))) * iTime);\n    float r = stochastics(0u, p);\n    float g = stochastics(1u, p);\n    float b = stochastics(2u, p);\n    fragColor = vec4(r,g,b,1.0);\n}","name":"Image","description":"","type":"image"}]}