{"ver":"0.1","info":{"id":"Xdt3Dn","date":"1449012999","viewed":239,"name":"SunflowerTransformWithGaps","username":"jt","description":"Tweaking the sunflower-transform [url]https://www.shadertoy.com/view/Mdd3R7[/url] to resemble the vogel-distribution more closely by skipping patches. (Although now it doesn't fill the plane anymore)","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["spiral","sunflower","loopless","coordinatetransformation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"// Sunflower Transform With Gaps - written 2015-12-01 by Jakob Thomsen\n// (a modification of https://www.shadertoy.com/view/Mdd3R7\n//  skipping patches to resemble the vogel-distribution more closely)\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nfloat circ(vec2 v)\n{\n    return 1. - smoothstep(.4, .5, length(fract(v)-.5));\n}\n\nvoid mainImage( out vec4 O, vec2 I )\n{\n    float b = sqrt(2.);\n\tvec2 R = iResolution.xy; \n    I = mix(8., 64., (0.5+0.5*cos(iTime*.1))) * (I+I-R)/R.y;\n    //I = mix(8., 64., (0.5+0.5*cos(iTime*.1))) * (I+I-(I=iResolution.xy))/I.y; // NOT COMPATIBLE\n\n    //I = vec2(0, length(I)) + fract( atan(I.y, I.x) / 2./3.1415926 );\n    I = vec2(0, length(I)) + atan(I.y, I.x) / 6.283; // Thanks to FabriceNeyret2 for optimizations!\n    float Q = I.x = ceil(I.y) - I.x;\n    I.x *= b;\n    float q = fract(I.x);\n    I.x *= I.x;\n\n    //O = vec4(fract(I),0,1) * step(q,(.5/b)/Q);\n    O = vec4(circ(I)) * step(q,(.5/b)/Q);\n}\n","name":"","description":"","type":"image"}]}