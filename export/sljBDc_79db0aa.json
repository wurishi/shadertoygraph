{"ver":"0.1","info":{"id":"sljBDc","date":"1652868250","viewed":130,"name":"Galactic Paint","username":"fuzzmoon","description":"Flickering Stars and color driven with with gradient noise","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["space","background","stars","ambient"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Based on Flickering Stars\n////https://www.shadertoy.com/view/NtsBzB\n\n// 3D Gradient noise from: https://www.shadertoy.com/view/Xsl3Dl\nvec3 hash( vec3 p ) // replace this by something better\n{\n\tp = vec3( dot(p,vec3(127.1,311.7, 74.7)),\n\t\t\t  dot(p,vec3(269.5,183.3,246.1)),\n\t\t\t  dot(p,vec3(113.5,271.9,124.6)));\n\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\nfloat noise( in vec3 p )\n{\n    vec3 i = floor( p );\n    vec3 f = fract( p );\n\t\n\tvec3 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( mix( dot( hash( i + vec3(0.0,0.0,0.0) ), f - vec3(0.0,0.0,0.0) ), \n                          dot( hash( i + vec3(1.0,0.0,0.0) ), f - vec3(1.0,0.0,0.0) ), u.x),\n                     mix( dot( hash( i + vec3(0.0,1.0,0.0) ), f - vec3(0.0,1.0,0.0) ), \n                          dot( hash( i + vec3(1.0,1.0,0.0) ), f - vec3(1.0,1.0,0.0) ), u.x), u.y),\n                mix( mix( dot( hash( i + vec3(0.0,0.0,1.0) ), f - vec3(0.0,0.0,1.0) ), \n                          dot( hash( i + vec3(1.0,0.0,1.0) ), f - vec3(1.0,0.0,1.0) ), u.x),\n                     mix( dot( hash( i + vec3(0.0,1.0,1.0) ), f - vec3(0.0,1.0,1.0) ), \n                          dot( hash( i + vec3(1.0,1.0,1.0) ), f - vec3(1.0,1.0,1.0) ), u.x), u.y), u.z );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //normalized device coordinates from -1 to 1\n    vec2 uv = (fragCoord-iResolution.xy-.5)/iResolution.y;\n    uv *= .5;\n    //time value\n    float t = iTime *.4;\n    float h = noise(vec3(uv*2.,t));\n    float n = noise(vec3(uv*2.,t*2.));\n    \n    \n    //star code from ////https://www.shadertoy.com/view/NtsBzB\n    vec3 stars_direction = normalize(vec3(uv * 2.0f - 1.0f, 1.0f)); \n\tfloat stars_threshold = 6.0f; // modifies the number of stars that are visible\n\tfloat stars_exposure = 500.0f; // modifies the overall strength of the stars\n    float stars = pow(clamp(noise(stars_direction * 200.0f), 0.0f+n, 1.0f), stars_threshold) * stars_exposure;\n\tstars *= mix(0.2, 1.4, n); // time based flickering\n\t\n    \n\n    // Time varying pixel color\n    vec3 col = 0.75 + 0.5*cos(t+uv.yxx+vec3(7.*n,2.*h,1.7308));\n\n    // Output to screen\n    fragColor = vec4(col*stars,1.0);\n}","name":"Image","description":"","type":"image"}]}