{"ver":"0.1","info":{"id":"cttcRf","date":"1699494240","viewed":87,"name":"Moon by Longinus","username":"Longinus","description":"Trying to mimic some moon.","likes":8,"published":1,"flags":32,"usePreview":1,"tags":["moon","crater"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 boxblur(in vec2 fragCoord){\n    vec4 sum = vec4(0);\n    for(int i=-1;i<2;i++){\n        for(int j=-1; j<2; j++){\n            sum+=texture(iChannel0, (fragCoord+vec2(i,j))/iResolution.xy);\n        }\n    }\n    return sum/9.;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = boxblur(fragCoord);//texture(iChannel0, fragCoord/iResolution.xy);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define MAX_STEPS 128\n#define MAX_DIST 50.\n#define SURF_DIST .01\nconst float M_PI2 = 3.14159265359*2.0;\nconst float M_PI6 = 3.14159265359/6.0;\nconst float M_PI3 = 3.14159265359/3.0;\nconst float sqrt32 = 2.0/sqrt(3.0);\nconst float sr = sqrt(3.0)/2.0;\nconst vec2 rat = vec2(1.0,sr);\n\n\n// From https://www.shadertoy.com/view/4djSRW\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\n\nfloat hash(vec2 v) { return dot(v,vec2(1., -1178.65)); }\nfloat rnd(float x) { return fract(sin(234.56*x)); }\nvec3 rnd3(float x) { return vec3(rnd(x),rnd(x+.1),rnd(x+.2)); }\n\nfloat noiseAngle(float angle){\n    float segments = 64.;\n    float value = segments*mod(angle,M_PI2)/M_PI2;\n    float afloor= floor(value);\n    float aceil = ceil(value);\n    float a = rnd(afloor);\n    float b = rnd(aceil);\n    return mix(a,b, fract(value));\n}\n\nfloat HexagonCircles(vec2 uv){\n    vec2 uv2 = (uv)/rat;\n    float height = 0.0;\n    vec2 uv3 = uv2-vec2(0.5,0.75);\n    vec2 hexas = uv3+vec2(floor(uv3.y)*0.5,1.0);      \n    vec2 c = uv3+vec2(1.0,1.0)-fract(hexas);\n    vec2 seed = floor(hexas);\n    vec3 offset = rnd3(seed.y*23.4+seed.x*6.47);\n    float n = hash(floor(hexas));\n    float radius = 0.125*(rnd(n)*0.5+1.0);\n    vec2 dv = (c-uv2)*rat+offset.zx*(0.5-radius);\n    float d = length(dv);\n    float angle = atan(dv.y,dv.x);\n    float radius2 = radius*(1.0+0.2*offset.z*noiseAngle(angle));\n    float slopeUp = d/radius2;\n    float slopeDown = (radius2-(d-radius2))/radius2;\n    float dHeight = d<radius2?slopeUp*slopeUp:max(slopeDown*slopeDown,0.5);\n    height = radius2*2.>d?dHeight:0.5;\n    return (min(max(0.0,height),1.0)*2.)-1.0;\n}\n\n\nfloat Craters(vec2 uv){\n    float sum=0.0;\n    float times = 1.;\n    for(int i=0; i< int(times*2.);i++){\n        sum +=HexagonCircles((uv+vec2(1.,1)*float(i))*2.)/(times*4.);\n    }\n    \n    for(int i=0; i< int(times);i++){\n        sum +=HexagonCircles(uv+vec2(1,1)*float(i))/(times*2.);\n    }\n    sum += HexagonCircles((uv+vec2(3.,3))/2.0)/4.;\n    sum += HexagonCircles(uv/2.0)/3.;\n    sum += HexagonCircles(uv/4.0)/2.;\n    //sum += HexagonCircles(uv/16.0)/1.5;\n    return sum;\n}\n\nfloat Moon(vec2 uv) {\n    float craters=Craters(uv);\n    return 1.0-craters+0.5;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat GetDist(vec3 p) {\n    vec4 s = vec4(0, 0, 6, 2.);\n    \n    float sphereDist = length(p-s.xyz)-s.w;\n    float d = sphereDist;\n    if(d>SURF_DIST){\n        return d;\n    }\n    \n    vec3 q = abs(p) - vec3(1.0);\n    float dist = 1.0/(length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0));\n    vec3 poOnCube = normalize(p-s.xyz)*dist*20.;\n    float craters = 0.01*((\n    Moon(poOnCube.xy)*abs(poOnCube.z)\n    +Moon(poOnCube.xz)*abs(poOnCube.y))\n    +Moon(poOnCube.yz)*abs(poOnCube.x));\n   \n    return d+craters;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n    float dO = 0.;\n    \n    for (int i = 0; i < MAX_STEPS; i++) {\n        vec3 p = ro + rd * dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if (dO > MAX_DIST || dS < SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    float d = GetDist(p);\n    vec2 e = vec2(.01, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx)\n    );\n    \n    return normalize(n);\n}\n\nfloat GetLight(vec3 p) {\n    vec3 lightPos = vec3(0, 5, 6);\n    lightPos.xz += vec2(sin(iTime*0.2)*20., cos(iTime*0.2)*20.);\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l), 0.0, 1.);\n    float d = RayMarch(p+n*SURF_DIST*2., l);\n    if (d < length(lightPos-p)) {\n        dif *= .1;\n    }\n    \n    return dif;\n}\n\n\nvec4 draw(in vec2 fragCoord){\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    \n    vec3 col = vec3(0);\n    \n    //vec3 ro = vec3(0, 0, 0);\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1));\n    float a = iTime*0.08;\n    vec3 ro = vec3(0,0,5)+10.*vec3(sin(a),0,cos(a));\n    float b = a+0.5*3.14159;\n    mat3 rot = mat3(sin(-b),0,-cos(-b),\n                    0,1,0,\n                    cos(-b),0,sin(-b));\n    rd = rot*rd;\n    float d = RayMarch(ro, rd);\n    vec3 p = ro + rd * d;\n    float dif = GetLight(p);\n    col = vec3(0.9,0.86,0.82)*(dif+ (d>MAX_DIST?0.:0.01));\n    return vec4(col, 1.0);\n}\n\nvec4 superDraw(in vec2 fragCoord){\n    int ss=3;\n    vec4 sum= vec4(0);\n    vec2 st=vec2(1./float(ss));\n    for(int i=0;i<ss;i++){\n        for(int j=0; j<ss; j++){\n            sum+=draw((fragCoord+vec2(i,j)*st));\n        }\n    }\n\n    return sum/float(ss*ss);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    \n    fragColor = superDraw(fragCoord);\n}","name":"Buffer A","description":"","type":"buffer"}]}