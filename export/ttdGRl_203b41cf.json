{"ver":"0.1","info":{"id":"ttdGRl","date":"1577290654","viewed":49,"name":"cuartov4","username":"jorge2017a1","description":"cuartov4","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["cuartov4"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n\n\n\n\nconst int CInf = 1;\nconst int CSup = 2;\nconst int CDer = 3;\nconst int CIzq = 4;\nconst int CAtras = 5;\nconst int CPlane = 6;\nconst int CLight = 7;\nconst int CSky = 8;\nconst int CPlane2 =9;\n\n#define PI 3.14159\n\nstruct TObj\n{\n    float tipo;\n    float dist;\n};\n    \n\nTObj mObj;\nvec3 glpRoRd;\nvec3 gcol;\n\n#define offset1 4.7\n#define offset2 4.6\n\n\n//Torus function\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n//Sphere function\nfloat sdSphere( vec3 p, float s1 )\n{\n   vec4 s = vec4(0, s1, 9, s1);\n   return  length(p-s.xyz)-s.w;   \n}\n//Box function\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return length(max(d,0.0))\n         + min(max(d.x,max(d.y,d.z)),0.0); // remove this line for an only partially signed sdf \n}\n//Triprism function\nfloat sdTriPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n    return max(q.z-h.y,max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5);\n}\n//Cone function\nfloat sdCone( vec3 p, vec2 c )\n{\n    // c must be normalized\n    float q = length(p.xy);\n    return dot(c,vec2(q,p.z));\n}\n\n///--------------------------------------------\n///por iQ;\n\n\n// signed distance to a pyramid of base 1x1 and height h\nfloat sdPyramid( in vec3 p, in float h )\n{\n    float m2 = h*h + 0.25;\n    \n    // symmetry\n    p.xz = abs(p.xz); // do p=abs(p) instead for double pyramid\n    p.xz = (p.z>p.x) ? p.zx : p.xz;\n    p.xz -= 0.5;\n\t\n    // project into face plane (2D)\n    vec3 q = vec3( p.z, h*p.y-0.5*p.x, h*p.x+0.5*p.y);\n        \n    float s = max(-q.x,0.0);\n    float t = clamp( (q.y-0.5*q.x)/(m2+0.25), 0.0, 1.0 );\n    \n    float a = m2*(q.x+s)*(q.x+s) + q.y*q.y;\n\tfloat b = m2*(q.x+0.5*t)*(q.x+0.5*t) + (q.y-m2*t)*(q.y-m2*t);\n    \n    float d2 = max(-q.y,q.x*m2+q.y*0.5) < 0.0 ? 0.0 : min(a,b);\n    \n    // recover 3D and scale, and add sign\n    return sqrt( (d2+q.z*q.z)/m2 ) * sign(max(q.z,-p.y));;\n}\n\n\n\n\n\n\nfloat intersectSDF(float distA, float distB) {\n    return max(distA, distB);\n}\n\nfloat unionSDF(float distA, float distB) {\n    return min(distA, distB);\n}\n\nfloat differenceSDF(float distA, float distB) {\n    return max(distA, -distB);\n}\n\n\nvec2 opU(vec2 d1, vec2 d2 ) {\n  vec2 resp;\n    if (d1.x < d2.x){ \n        resp = d1;\n    }\n    else\n    {\n        resp = d2;\n    }\n     \n   return resp; \n}\n\nvec3 rotate_y(vec3 v, float angle)\n{\n\tfloat ca = cos(angle); float sa = sin(angle);\n\treturn v*mat3(\n\t\t+ca, +.0, -sa,\n\t\t+.0,+1.0, +.0,\n\t\t+sa, +.0, +ca);\n}\n\nvec3 rotate_x(vec3 v, float angle)\n{\n\tfloat ca = cos(angle); \n    float sa = sin(angle);\n    \n\treturn v*mat3(\n\t\t+1.0, +.0, +.0,\n\t\t+.0, +ca, -sa,\n\t\t+.0, +sa, +ca);\n}\n\n\n\nvec3 rotate_z(vec3 v, float angle)\n{\n    float ca = cos(angle);\n    float sa = sin(angle);\n\n    return v*mat3(\n        ca, sa, 0.0,\n        -sa, ca, 0.0,\n        0.0, 0.0, 1.0);\n}\n\n\nmat3 getViewMatrix(in vec3 cameraPos, in vec3 targetPos)\n{\n    vec3 w = normalize(targetPos - cameraPos);\n    vec3 up = vec3(0,1,0);\n    vec3 u = normalize(cross(w, up));\n    vec3 v = normalize(cross(u,w));\n    return mat3(u,v,w);\n}\n\n\n\n///----------------------------------------------\n\nvec3 getSphereColor(int i)\n{\n    \n    float m;\n        \n\tswitch(i)\n    {\n    case 0:\n        return vec3(85./255., 205./255., 252./255.);\n    case 1:\n        //return vec3(247./255., 168./255.,  184./255.);\n        return vec3(1, 0.5, 0);\n    case 2:\n        return vec3(1.0, 1.0, 1.0);\n    case 3:\n        return vec3(247./255., 168./255.,  184./255.); \n    case 4:\n        //return vec3(85./255., 205./255., 252./255.);\n        return vec3(0, 1, 1);\n        \n    case 5:\n        return vec3(85./255., 205./255., 252./255.);\n    case 6:\n        //return vec3(247./255., 168./255.,  184./255.);\n        return  vec3(0.5, 0.8, 0.9);\n        \n    case 7:\n        return vec3(1.0, 1.0, 1.0);\n    case 8:\n        //return vec3(247./255., 168./255.,  184./255.); \n        //return vec3(55./255., 30./255.,  255./255.); \n        return vec3(0.425, 0.56, 0.9); \n    case 9:\n        //return vec3(85./255., 205./255., 252./255.); \n        return vec3(0.5, 0.6, 0.6); \n    case 10:\n        return vec3(0.0, 1.0, 0.0);\n    \n    case -1:\n        return gcol;\n        \n    } \n}\n//-------------------------------------------------\n\n// Create infinite copies of an object -  https://iquilezles.org/articles/distfunctions\nvec2 opRep( in vec2 p, in float s )\n{\n    return mod(p+s*0.5,s)-s*0.5;\n}\n\n\n\n//Floor Color (checkerboard)\nvec3 obj0_c(in vec3 p){\n if (fract(p.x*.15)>.5)\n   if (fract(p.z*.15)>.5)\n     return vec3(0.6,0.3,0.7);\n   else\n     return vec3(0.7,0.3,0.3);\n else\n   if (fract(p.z*.15)>.5)\n     return vec3(0.55,0.4,0.5);\n   else\n     \treturn vec3(0.8,0.5,0.8);\n}\n\n\nfloat GetDist(vec3 p  ) {\t\n\n \t\n    \n    float d;\n    float dif1;\n    float dif2;\n    \n    d=999.9;\n    float planeDist = p.y;\n    \n   vec3 pp;\n    pp=p;\n    \n \n    \n    vec2 res;\n    res = vec2(9999, 0);\n    \n    \n    \n    \n    \n    \n    \n     if (res.x < planeDist)\n      { res.x = res.x;     \t} \n    else\n        { \n          res.x = planeDist;\n        if (planeDist > 0.5 )\n          { res=vec2(res.x,CSky); }\n        else\n         { \n    \t\t        \n            vec3 coltmp=obj0_c(p);\n            //coltmp=-coltmp\n            res=vec2(res.x, -1);\n            gcol= coltmp;\n         } \n     } \n    \n    \n    \n    \n    \n    \n    p.z=p.z-5.0;\n    \n    float bxp1=sdBox(p-vec3(4,0.0,3),vec3(7,0,5));  //piso xz\n    float bxp2=sdBox(p-vec3(4,0.0,3),vec3(0,8,5));  //pared yz\n    float bxp3=sdBox(p-vec3(4,0.0,3),vec3(7,8,0));   //xy (frente o atra)\n    \n    float bxp4=sdBox(p-vec3(-3,0.0,3),vec3(0,8,5));  //pared yz izq\n    float bxp5=sdBox(p-vec3(11,0.0,3),vec3(0,8,5));  //pared yz der\n    \n \n    \n    float bxp2ch=sdBox(p-vec3(4,4,2.5),vec3(0.1,2,2.0));  //pared yz\n    float bxp3ch=sdBox(p-vec3(-1,0.0,-2),vec3(2,2,0));   //xy (frente o atra)\n    float bxp4ch=sdBox(p-vec3(0.5,6.5,-2),vec3(3.5,0.5,0));   //xy (frente o atra)\n    \n    \n    \n     res=opU(res, vec2(bxp1,6));\n    \n    //float difp2=differenceSDF(bxp2,bxp2ch);\n    float difp2=differenceSDF(bxp2,bxp2ch);\n        \n    //res=opU(res, vec2(bxp2,9));\n    res=opU(res, vec2(difp2,9));\n    \n    res=opU(res, vec2(bxp3,2));\n    res=opU(res, vec2(bxp4,3));  //rosa\n    res=opU(res, vec2(bxp5,1));  //naranja\n    \n    res=opU(res, vec2(bxp3ch,1));  \n    res=opU(res, vec2(bxp4ch,1));  \n    \n    \n    \n    d = res.x;\n    mObj.dist = res.x;\n    mObj.tipo = res.y;\n        \n    return d;\n}\n\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.2;\n    //Determines size of shadow\n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || dS<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    //Texture of white and black in image\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\n\n\nfloat GetLight(vec3 p) {\n    vec3 lightPos = vec3(0, 5, 6);\n    //Determine movement of light ex. shadow and light direction and diffusion\n    lightPos.xz += vec2(sin(iTime), cos(iTime)*2.);\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l), 0., 1.);\n    float d = RayMarch(p+n*SURF_DIST*2., l );\n    if(d<length(lightPos-p)) dif *= .1;\n    \n    return dif;\n}\n\n\nfloat GetLightv2(vec3 p) {\n    vec3 lightPos = vec3(0, 5, 6);\n    //Determine movement of light ex. shadow and light direction and diffusion\n    lightPos.xz += vec2(1, 2);\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l), 0., 1.);\n    float d = RayMarch(p+n*SURF_DIST*2., l );\n    if(d<length(lightPos-p)) dif *= .1;\n    \n    return dif;\n}\n\n\n\n\n\nfloat max3(float a, float b, float c)//returns the maximum of 3 values\n{\n\treturn max(a,max(b,c));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \n    \n  vec2 q = fragCoord.xy/iResolution.xy;\n  vec2 p = -1.0+2.0*q;\n  p.x *= iResolution.x/iResolution.y;\n  vec2 mo = iMouse.xy/iResolution.xy;\n\n  // camera\n  float camFactorX = mix(0.0, mo.x, clamp(iMouse.z, 0.0, 1.0));\n  float camFactorY = mix(0.0, mo.y, clamp(iMouse.z, 0.0, 1.0));\n  float zoom = 3.2 * 0.6 - 3.2 * camFactorY + 2.5*clamp(iMouse.z, 0.0, 1.0);\n  float ang = PI*1.2 + 2.0*PI*camFactorX;\n  //vec3 ro = vec3( zoom*cos(ang), 0.5, zoom*sin(ang) );\n  \n  vec3 ro = vec3(0.0,3.0,-15.);\n    \n  vec3 ta = vec3( 0.0, 1.0, -1.0 );\n\n  // camera tx\n  vec3 cw = normalize( ta-ro );\n  vec3 cp = vec3( 0.0, 1.0, 0.0 );\n  vec3 cu = normalize( cross(cw,cp) );\n  vec3 cv = normalize( cross(cu,cw) );\n  vec3 rd = normalize( p.x*cu + p.y*cv + 2.5*cw );\n\n    vec3 rLuz=vec3(-10.5, 6.5, 40.5);\n    vec3 rLuz3=vec3(15.5, 10.5, 40.5);\n    \n    vec3 col = vec3(0);\n    TObj Obj;\n   \n    float d = RayMarch(ro, rd);\n    Obj=mObj;\n    \n    \n    \n    //vec3 prord = (ro + rd * d ); \n    vec3 prord = (ro + rd * d ); \n    glpRoRd=prord;\n   \n    \n    vec3 pluz=(rLuz + rd * d );\n    vec3 pluz3=(rLuz3 + rd * d );\n    \n   \n    float dif = GetLight(prord);\n    \n    float dif2 = abs(1.0- GetLight(pluz));\n    float dif3 = abs(1.0- GetLight(pluz3));\n    \n    vec3 colobj;\n    \n    colobj=getSphereColor(int( Obj.tipo));\n     \n    vec3 nor = GetNormal(prord);\n    float difi = clamp( dot(nor,vec3(0.7,0.6,0.4)), 0.0, 1.0 );\n    float ambi = 0.5 + 0.5*dot(nor,vec3(0.0,0.8,0.6));\n    vec3 coli = vec3(0.2,0.3,0.4)*ambi+ vec3(0.8,0.7,0.5)*difi;\n   \n    dif=(dif+dif2+dif3)/2.5;  \n    col = (vec3(dif)*colobj+coli)/2.0;\n    \n    fragColor = vec4(col,1.0);\n    //Background color is white\n}\n","name":"Image","description":"","type":"image"}]}