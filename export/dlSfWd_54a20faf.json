{"ver":"0.1","info":{"id":"dlSfWd","date":"1694622355","viewed":41,"name":"Flower Exercise","username":"rachellin","description":"Try to match the given flower patterns!\n\nBrownie points: how do you change the color of the flower from the center?","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["circle"],"hasliked":0,"parentid":"NsVBzy","parentname":"Flower puzzle"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/**\n * @author rah, inspired by jonobr1 / http://jonobr1.com/\n */\n\n/* \n * Output circle colors at given center pos and radius\n */\nvec4 circle(vec2 uv, vec2 center, float radius, vec3 color)\n{\n    // Get distance of point from center, get difference from given radius\n\tfloat d = length(center - uv) - radius;\n\tfloat t = clamp(d, 0.0, 1.0);\n    \n    // If point is smaller than radius, set color alpha to 1, otherwise 0\n\treturn vec4(color, 1.0 - t);\n}\n\nvec4 pulsingFlower(vec2 uv, vec2 center, float radius, vec3 color)\n{\n    // Get point normalized from center of the screen\n    vec2 p = (2.0 * uv-iResolution.xy);\n    // angle of the point\n    float a = atan(p.x,p.y);\n\n    // scale the radius\n    float r = length(p) * 0.75f;\n    // interesting discontinuity\n    float x = cos(a * 20.0f);\n    //x += sin(a * 10.0f) * 0.5f;\n    radius -= x * 100.0f * bias(sin(iTime), 0.2);\n\n    // Get distance of point from center, get difference from given radius\n    float d = length(center - uv) - radius;\n    float t = clamp(d, 0.0, 1.0);\n\n    // If point is smaller than radius, set color alpha to 1, otherwise 0\n    return vec4(color, 1.0 - t);\n\n}\n\nfloat triangle_wave(float x, float freq, float amplitude) {\n    return abs(mod((x * freq), amplitude) - (0.5 * amplitude));\n}\n\nvec4 spinningFlower(vec2 uv, vec2 center, float radius, vec3 color)\n{\n    // Get point normalized from center of the screen\n    vec2 p = (2.0 * uv-iResolution.xy);\n    p = rotatePoint2d(p, vec2(0.0, 0.0), iTime);\n\n    // angle of the point\n    float a = atan(p.x,p.y);\n    \n    // discontinuity\n    float x = triangle_wave(a, 0.79, 1.f); // triangle wave\n    radius -= x * 350.0f * bias(sin(iTime), 0.5);\n\n    // Get distance of point from center, get difference from given radius\n    float d = length(center - uv) - radius;\n    float t = clamp(d, 0.0, 1.0);\n\n    // If point is smaller than radius, set color alpha to 1, otherwise 0\n    return vec4(color, 1.0 - t);\n}\n\nvec4 customFlower(vec2 uv, vec2 center, float radius, vec3 color)\n{\n    // Get point normalized from center of the screen\n    vec2 p = (2.0 * uv-iResolution.xy);\n    p = rotatePoint2d(p, vec2(0.0, 0.0), iTime);\n\n    // angle of the point\n    float a = atan(p.x,p.y);\n    \n    // discontinuity\n    float x1 = triangle_wave(a, 0.79, 1.f); // triangle wave\n    float r1 = x1 * 350.0f * bias(sin(iTime), 0.5);\n    \n    float x2 = cos(a * 10.0f);\n    float r2 = x2 * 90.0f * bias(cos(iTime), 0.5);\n    \n    float x3 = tan(a * 10.0f);\n    float r3 = x3 * 90.0f * bias(sin(iTime), 0.25);\n\n    // Get distance of point from center, get difference from given radius\n    float d = length(center - uv) - (radius - r1 - r2 - r3);\n    float t = clamp(d, 0.0, 1.0);\n\n    // If point is smaller than radius, set color alpha to 1, otherwise 0\n    return vec4(color, 1.0 - t);\n}\n\nvec4 customFlowerInner(vec2 uv, vec2 center, float radius, vec3 color)\n{\n    // Get point normalized from center of the screen\n    vec2 p = (2.0 * uv-iResolution.xy);\n    p = rotatePoint2d(p, vec2(0.0, 0.0), iTime);\n    // angle of the point\n    float a = atan(p.x,p.y);\n    \n    radius /= 3.f;\n\n    // interesting discontinuity\n    float x = tan(a * 5.0f);\n    radius -= x * 15.0f * bias(sin(iTime), 0.65);\n\n    // Get distance of point from center, get difference from given radius\n    float d = length(center - uv) - radius;\n    float t = clamp(d, 0.0, 1.0);\n\n    // If point is smaller than radius, set color alpha to 1, otherwise 0\n    return vec4(color, 1.0 - t);\n\n}\n\n\nfloat computeRadius(vec2 uv)\n{\n    float radius = 0.25 * iResolution.y;\n    \n    // Centered uv\n    vec2 uvCenter = (2.0f * uv - iResolution.xy);\n    // Get pixel angle around the center\n    float a = atan(uvCenter.x,uvCenter.y);\n    return radius;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n\tvec2 uv = fragCoord.xy;\n\tvec2 center = iResolution.xy * 0.5;\n\tfloat radius = computeRadius(uv);\n    \n    vec3 red = rgb(225.0, 50.0, 70.0);\n    vec3 light_blue = rgb(181.0, 196.0, 230.0);\n    vec3 pink1 = rgb(255.0, 217.0, 228.0);\n    vec3 pink2 = rgb(240.0, 189.0, 204.0);\n    \n    vec3 light_green = rgb(213.0, 245.0, 171.0);\n    vec3 med_green = rgb(112.0, 171.0, 34.0);\n    vec3 dark_green = rgb(60.0, 105.0, 0.0);\n    \n    // Background layer\n\tvec4 layer1 = vec4(light_blue, 1.0);\n\t\n\t// Circle/ flowers\n\t\n    \n    //vec4 layer2 = circle(uv, center, radius, red);\n    //vec4 layer2 = pulsingFlower(uv, center, radius, yellow);\n\t//vec4 layer2 = spinningFlower(uv, center, radius, red);\n    vec4 layer2 = customFlower(uv, center, radius, pink1);\n    vec4 layer3 = customFlowerInner(uv, center, radius, pink2);\n\t\n\t// Blend the two\n\tfragColor = mix(layer1, layer2, layer2.a);\n    fragColor = mix(fragColor, layer3, layer3.a);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/*\n * Toolbox functions! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n */ \nfloat bias(float t, float b) {\n    return (t / ((((1.0/b) - 2.0)*(1.0 - t))+1.0));\n}\n\n/*\n * Basic Utilities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n */\n\n\n/* \n * Rotate an input point about some center by angle\n */\nvec2 rotatePoint2d(vec2 uv, vec2 center, float angle)\n{\n    vec2 rotatedPoint = vec2(uv.x - center.x, uv.y - center.y);\n    float newX = cos(angle) * rotatedPoint.x - sin(angle) * rotatedPoint.y;\n    rotatedPoint.y = sin(angle) * rotatedPoint.x + cos(angle) * rotatedPoint.y;\n    rotatedPoint.x = newX;\n    return rotatedPoint;\n}\n\n/*\n * Make a vec3 color from rgb values [0, 255]\n */\nvec3 rgb(float r, float g, float b)\n{\n\treturn vec3(r / 255.0, g / 255.0, b / 255.0);\n}\n","name":"Common","description":"","type":"common"}]}