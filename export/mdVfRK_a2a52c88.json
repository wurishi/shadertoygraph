{"ver":"0.1","info":{"id":"mdVfRK","date":"1698417963","viewed":92,"name":"Projectors","username":"FFFFFFear1","description":"Just a variation of trianglies","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["learning"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define float2x2 mat2\n\nfloat _speedColor = -.3;\nfloat _count = 15.;\nfloat _angleOffset = 45.;\nfloat _sides = 3.;\nfloat _glow = 0.009;\nfloat _angleMltiplayer = 8.;\nfloat _triangleSize = .0;\n\nvec2 _offset = vec2(0.01, 0.01);\nvec2 _uvColor = vec2(0.0);\n\nvec3 colorPalette( float t)\n{\n    vec3 a = vec3(0.468, 1.048, 1.108);\n    vec3 b = vec3(-0.312, 1.500, 0.448);\n    vec3 c = vec3(-0.732, 0.328, -.328);\n    vec3 d = vec3(-2.542, 0.118, -.48);\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat2x2 getRotationMatrix(float theta) {\n    float s = sin(theta);\n    float c = cos(theta);\n    return float2x2(c,-s,s,c);\n}\n\nfloat triangle(vec2 point, float height)\n{\n    float k = sqrt(_sides);\n    point.x = abs(point.x) - height;\n    point.y = point.y + height  / k;\n    if (point.x + k * point.y > 0.) \n    {\n        point = vec2(point.x - k * point.y, -k * point.x - point.y) / 2.;\n    }\n    return abs(point.y);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (fragCoord*2. - iResolution.xy)/iResolution.y;\n    vec2 uvColor = uv;\n    uv = getRotationMatrix(-3.14159/9.)*uv - vec2(0, iTime/10.);\n    vec3 finalColor = vec3(0);\n\n    \n    float angle;\n    vec2 offset;\n      \n    for (float i = 0.; i < _count; i++) \n    {\n        uv = fract(uv) -.5;\n    \n        float2x2 rotateMat = getRotationMatrix(angle * _angleMltiplayer);\n        \n        float newTriangle = triangle(rotateMat * uv, _triangleSize) / exp(triangle(uvColor, _triangleSize));\n        vec3 color = colorPalette(triangle(uvColor, .04) + i + iTime * _speedColor);\n        \n        newTriangle = pow(_glow / sin(newTriangle), 2.05);\n        \n        finalColor += newTriangle * color;\n      \n        angle += _angleOffset;\n        offset += _offset * i;\n    }\n    \n    fragColor = vec4(finalColor, 1.);\n}","name":"Image","description":"","type":"image"}]}