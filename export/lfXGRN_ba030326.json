{"ver":"0.1","info":{"id":"lfXGRN","date":"1702810359","viewed":38,"name":"Rainbow_Flower","username":"gPlatl","description":"koleidiskopic variant of \"color.flow\"\n\ninput: mouse.x -> changes leave count","likes":10,"published":1,"flags":64,"usePreview":0,"tags":["2d","colorful","flower","distance","rainbow","koleidoskop"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"ldd3RX","filepath":"https://soundcloud.com/skaven252/looking-back","previewfilepath":"https://soundcloud.com/skaven252/looking-back","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of \"color.flow\" by yozic. https://shadertoy.com/view/DddGDs\n//----------------------------------------------------------\n// Rainbow_Flower.glsl https://www.shadertoy.com/view/lfXGRN\n// Show 2d koleidoskopic rainbow flower\n// input: mouse.x -> changes leave count\n// Tags:  2d, colorful, distance, flower, koleidoskop, rainbow\n//----------------------------------------------------------\n\n#define PI 3.14159265359\n#define TWO_PI 2. * PI\n#define ITERATIONS 33.\n\nvoid Koleidoscope(inout vec2 uv, float ka)\n{\n  float angle = abs (mod (atan (uv.x, uv.y), 2.0 * ka) - ka) + 0.01*iTime;\n  uv = length(uv) * vec2(cos(angle), sin(angle));\n}\n\nvec4 k_orb(vec2 uv, float size, vec2 position, vec3 color, float contrast) \n{\n  return pow(vec4(size / length(uv + position) * color, 1.), vec4(contrast));\n}\n\nvec3 k_rainbow(float progress, float stretch, float offset) \n{\n  return vec3(cos(vec3(-2, 0, -1) * TWO_PI / 3. + TWO_PI * (progress * stretch) + offset) * 0.5 + 0.5);\n}\n\n// counter clockwise rotation matrix: pos*= [ca, sa, -sa, ca]\nmat2 k_rotate2d(float angle) \n{ float ca = cos(angle);\n  float sa = sin(angle);\n  return mat2(ca, sa, -sa, ca);\n}\n\n#define R iResolution\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) \n{\n  vec2 uv = (2.0 * fragCoord.xy - R.xy) / R.y;  // y: -1.0 .. 1.0\n  uv *= 0.08;\n  uv /= dot(uv, uv);\n\n  vec2 mp = iMouse.xy / R.xy;\n  float sideCount = 1.0 + round(mp.y * 11.0);\n  if (sideCount == 1.0) sideCount = 5.0;\n  Koleidoscope (uv, PI / sideCount);\n\n  uv *= k_rotate2d(0.0321*iTime); \n  fragColor = vec4(0.);\n  \n  float s = 0.3;\n  for (float i = 0.; i < ITERATIONS; i++)\n  {\n    uv.x += s*1.5 * cos(0.53 * uv.y);\n    uv.y += s*0.84 * cos(0.42 * uv.x + iTime);\n    vec3 color = k_rainbow(i / (ITERATIONS * 25.0), sin(iTime*0.5+uv.y*0.15)*4., iTime*0.5);\n    fragColor += k_orb(uv, 2.2, vec2(0, 0), color, 0.7);\n  }\n  fragColor.xyz = 1. - abs(1.-log(abs(fragColor.xyz)));\n  fragColor.xyz = sqrt(fragColor.xyz);\n}\n","name":"Image","description":"","type":"image"}]}