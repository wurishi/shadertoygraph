{"ver":"0.1","info":{"id":"WtXcRs","date":"1592753620","viewed":710,"name":"Atlas Bloom","username":"rayferric","description":"High performance Atlas Bloom\n • Packs all scene mipmaps to a single atlas, which is then blurred and mixed with the background.\n • Utilizes flexible, two-pass gaussian blur approximation.\n • Doesn't depend on hardcoded tile coordinates.","likes":11,"published":1,"flags":32,"usePreview":0,"tags":["blur","bloom","glow","atlas"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define BLOOM_LEVELS   5\n#define BLOOM_STRENGTH 1.0\n#define BLOOM_FALLOFF  0.667\n\nvec3 readBloomTile(in sampler2D tex, in vec2 coord, in float lod) {\n    // Calculate those values to compute both tile transform and sampling bounds\n    float offset = 1.0 - exp2(1.0 - lod);\n    float width = exp2(-lod);\n    \n    // Inverse atlas transform\n    coord *= width; // /= exp2(lod)\n    coord += offset;\n    \n    // The single-texel margin is needed to account for linear atlas filtering issues\n    // Can be removed if set to nearest, but the bloom will look blocky and awful\n    // The bounding without margin is not needed at all, so both shall be removed together\n    vec2 bounds = vec2(offset, offset + width);\n    vec2 texelSize = 1.0 / vec2(textureSize(tex, 0));\n    float margin = max(texelSize.x, texelSize.y);\n    bounds.x += margin;\n    bounds.y -= margin;\n    coord = clamp(coord, bounds.x, bounds.y);\n    \n    return texture(tex, coord).xyz;\n}\n\nvec3 getBloom(in sampler2D tex, in vec2 coord) {\n    float weight = 1.0;\n        \n    vec4 color = vec4(0.0);\n    for(int i = 1; i <= BLOOM_LEVELS; i++) {\n    \tcolor.xyz += readBloomTile(tex, coord, float(i)) * weight;\n        color.w   += weight;\n        \n        weight *= BLOOM_FALLOFF;\n    }\n    return color.xyz / color.w;\n}\n\nvec3 tonemapACES(in vec3 color) {\n    float a = 2.51;\n    float b = 0.03;\n    float c = 2.43;\n    float d = 0.59;\n    float e = 0.14;\n    return clamp((color * (a * color + b)) / (color * (c * color + d) + e), 0.0, 1.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    fragColor.xyz  = texture(iChannel0, uv).xyz;\n    fragColor.xyz += getBloom(iChannel1, uv) * BLOOM_STRENGTH;\n    \n    fragColor.xyz  = tonemapACES(fragColor.xyz);\n    fragColor.xyz  = pow(fragColor.xyz, vec3(1.0 / 2.2));\n    \n    fragColor.w    = 1.0;\n    \n    // fragColor = texture(iChannel1, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xsf3Rn","filepath":"/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","previewfilepath":"/media/ap/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float getCircle(in vec2 uv, in vec2 pos, in float radius) {\n    return 1.0 - smoothstep(radius, radius + 0.01, distance(uv, pos));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    float ratio = iResolution.x / iResolution.y;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= ratio;\n    \n    // fragColor      = texture(iChannel0, uv);\n    // fragColor.xyz *= fragColor.w;\n    // fragColor.xyz  = pow(fragColor.xyz, vec3(2.2));\n    // fragColor.w    = 1.0;\n    // return;\n    \n    vec2 mouse = iMouse.xy / iResolution.xy;\n    if(mouse == vec2(0.0))mouse = vec2(0.5);\n    \n    float time = iTime;\n    if(time == 0.0)time = 2.31;\n    \n    fragColor.xyz  = vec3(0.0);\n    fragColor.xyz += vec3(1.0, 0.3, 0.1) * getCircle(uv, (mouse * 2.0 - 1.0) * vec2(ratio, 1.0), 0.15);\n    fragColor.xyz += vec3(0.3, 1.0, 0.1) * getCircle(uv, vec2(sin(time), cos(time * 2.0)), 0.3);\n    fragColor.xyz += vec3(0.1, 0.3, 1.0) * getCircle(uv, vec2(cos(time * 2.0), sin(time)), 0.1);\n    fragColor.xyz += vec3(0.7, 0.1, 0.7) * getCircle(uv, vec2(sin(time * 2.0), cos(time)), 0.2);\n    fragColor.w    = 1.0;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"#define BLOOM_LEVELS 5\n#define BLOOM_THRESHOLD 0.25\n\nfloat luma(in vec3 color) {\n\treturn dot(color, vec3(0.299, 0.587, 0.114));\n}\n\nvec3 writeBloomTile(in sampler2D tex, in vec2 coord, in float lod) {\n    // Transform the tile to \"atlas space\"\n    coord -= 1.0 - exp2(1.0 - lod);\n    coord *= exp2(lod);\n    \n    // Saturate the coord\n    if(any(greaterThanEqual(vec2(0.0), coord)))return vec3(0.0);\n    if(any(greaterThanEqual(coord, vec2(1.0))))return vec3(0.0);\n    \n    // Apply threshold\n    vec3 color = textureLod(tex, coord, lod).xyz;\n    return luma(color) < BLOOM_THRESHOLD ? vec3(0.0) : color;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    fragColor.xyz = vec3(0.0);\n    \n    for(int i = 1; i <= BLOOM_LEVELS; i++) {\n    \tfragColor.xyz += writeBloomTile(iChannel0, uv, float(i));\n    }\n    \n    fragColor.w = 1.0;\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"#define BLOOM_QUALITY 9 // 3 - Low; 5 - Normal; 7 - High; 9 - Ultra\n\nvec3 textureBlur(in sampler2D tex, in vec2 coord, in int size) {\n    vec2 texelSize = 1.0 / vec2(textureSize(tex, 0));\n    \n    float lod = ceil(-log2(1.0 - coord.x));\n    \n    vec2 tileCoord = coord;\n    tileCoord -= 1.0 - exp2(1.0 - lod);\n    tileCoord *= exp2(lod);\n    \n    // Saturate the coord\n    if(any(greaterThanEqual(vec2(0.0), tileCoord)))return vec3(0.0);\n    if(any(greaterThanEqual(tileCoord, vec2(1.0))))return vec3(0.0);\n    \n    float maxLength = length(vec2(size));\n    \n    vec4 color = vec4(0.0);\n    for(int i = -size; i <= size; i++) {\n        vec2 offset = vec2(i, 0);\n        float weight = 1.0 - smoothstep(0.0, 1.0, sqrt(length(offset) / maxLength));\n\n        vec2 sampleCoord = coord + texelSize * offset;\n\n        color.xyz += texture(tex, sampleCoord).xyz * weight;\n        color.w   += weight;\n    }\n    return color.xyz / color.w;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    fragColor.xyz = textureBlur(iChannel0, uv, BLOOM_QUALITY);\n    fragColor.w   = 1.0;\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"#define BLOOM_QUALITY 9 // 3 - Low; 5 - Normal; 7 - High; 9 - Ultra\n\nvec3 textureBlur(in sampler2D tex, in vec2 coord, in int size) {\n    vec2 texelSize = 1.0 / vec2(textureSize(tex, 0));\n    \n    float lod = ceil(-log2(1.0 - coord.x));\n    \n    vec2 tileCoord = coord;\n    tileCoord -= 1.0 - exp2(1.0 - lod);\n    tileCoord *= exp2(lod);\n    \n    // Saturate the coord\n    if(any(greaterThanEqual(vec2(0.0), tileCoord)))return vec3(0.0);\n    if(any(greaterThanEqual(tileCoord, vec2(1.0))))return vec3(0.0);\n    \n    float maxLength = length(vec2(size));\n    \n    vec4 color = vec4(0.0);\n    for(int i = -size; i <= size; i++) {\n        vec2 offset = vec2(0, i);\n        float weight = 1.0 - smoothstep(0.0, 1.0, sqrt(length(offset) / maxLength));\n\n        vec2 sampleCoord = coord + texelSize * offset;\n\n        color.xyz += texture(tex, sampleCoord).xyz * weight;\n        color.w   += weight;\n    }\n    return color.xyz / color.w;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    fragColor.xyz = textureBlur(iChannel0, uv, BLOOM_QUALITY);\n    fragColor.w   = 1.0;\n}","name":"Buffer D","description":"","type":"buffer"}]}