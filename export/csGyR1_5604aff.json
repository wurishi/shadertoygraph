{"ver":"0.1","info":{"id":"csGyR1","date":"1697842089","viewed":150,"name":"image matrices","username":"Carandiru","description":"research with regular matrices, however being used as if they were cooperative matrices.","likes":2,"published":3,"flags":32,"usePreview":0,"tags":["convolution","tiling","matrix"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define R iResolution.xy\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/R;\n    \n    vec4 data = textureLod(iChannel0, uv, 0.0f);\n    \n    uint flags = uint(data.z * 15.0f);\n    \n    bool valid = bool(flags & (1u << 0u));\n    bool left_side = bool(flags & (1u << 1u));\n    bool right_side = bool(flags & (1u << 2u));\n    bool seperator = !left_side && !right_side;\n       \n    vec3 color = vec3(0.0f);\n    \n    color = data.ggg;\n    \n    if (left_side && mod(iTime, 6.0f) >= 4.5f) {\n        color = data.rrr;\n    }\n    /*\n    if (right_side && !valid) {\n        \n        float t = smoothstep(0.0f, 1.0f, sin(iTime * pi * phi) * 0.5f + 0.5f);\n        \n        if ((uv.x-phi*t) > uv.y*iphi) {\n            float left = textureLod(iChannel0, uv - vec2(0.5f, 0.0f), 0.0f).g;\n\n            float difference = abs(data.g - left);\n           \n            color = (difference * float(uint(fragCoord.y) & 1u)) * mix(vec3(0), vec3( 1.0f / (sqrt(t) + t*t + t*t*t + t*t*t*t + t*t*t*t*t),0,0), data.a);\n        }\n    }\n    */\n    color.g += float( seperator );\n    \n    fragColor = vec4(pow((color), vec3(1.0f/2.2f)),1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n\n#define matIndex(offset) \\\n    uvec2(floor((vec2(offset) * 0.5f + 0.5f) * 2.0f + 0.5f)) \\\n\nmat3 matIdentity()\n{\n    mat3 a = mat3(0);\n    \n    a[0][0] = a[1][1] = a[2][2] = 1.0f;\n    \n    return(a);\n}\n\nmat3 matLoad(in float value)\n{\n    mat3 a;\n    \n    a[0] = a[1] = a[2] = vec3(value);\n    \n    return(a);\n}\nmat3 matLoad(in vec3 row)\n{\n    mat3 a;\n    \n    a[0] = a[1] = a[2] = row;\n    \n    return(a);\n}\nmat3 matLoad(in vec3 row0, in vec3 row1, in vec3 row2)\n{\n    mat3 a;\n    \n    a[0] = row0;\n    a[1] = row1;\n    a[2] = row2;\n    \n    return(a);\n}\nmat3 matLoad(in sampler2D src, in vec2 uv)\n{\n    mat3 a;\n    uvec2 index;\n    \n    index = matIndex(ivec2(-1,-1));\n    a[index.x][index.y] = textureLodOffset(src, uv, 0.0f, ivec2(-1,-1)).x;\n    \n    index = matIndex(ivec2( 0,-1));\n    a[index.x][index.y] = textureLodOffset(src, uv, 0.0f, ivec2( 0,-1)).x;\n\n    index = matIndex(ivec2( 1,-1));\n    a[index.x][index.y] = textureLodOffset(src, uv, 0.0f, ivec2( 1,-1)).x;\n    \n    index = matIndex(ivec2(-1, 0));\n    a[index.x][index.y] = textureLodOffset(src, uv, 0.0f, ivec2(-1, 0)).x;\n    \n    index = matIndex(ivec2( 0, 0));\n    a[index.x][index.y] = textureLodOffset(src, uv, 0.0f, ivec2( 0, 0)).x;\n\n    index = matIndex(ivec2( 1, 0));\n    a[index.x][index.y] = textureLodOffset(src, uv, 0.0f, ivec2( 1, 0)).x;\n    \n    index = matIndex(ivec2(-1, 1));\n    a[index.x][index.y] = textureLodOffset(src, uv, 0.0f, ivec2(-1, 1)).x;\n    \n    index = matIndex(ivec2( 0, 1));\n    a[index.x][index.y] = textureLodOffset(src, uv, 0.0f, ivec2( 0, 1)).x;\n\n    index = matIndex(ivec2( 1, 1));\n    a[index.x][index.y] = textureLodOffset(src, uv, 0.0f, ivec2( 1, 1)).x;\n    \n    return(a);\n}\nmat3 matSweep(in sampler2D src, in vec2 uv) // returns forward sweep, for backward sweep, negate the matrix.\n{\n    mat3 a = mat3(0);\n    uvec2 index;\n    \n    index = matIndex(ivec2(-1, 0));\n    a[index.x][index.y] = textureLodOffset(src, uv, 0.0f, ivec2(-1, 0)).x;\n    \n    index = matIndex(ivec2( 1, 0));\n    a[index.x][index.y] = textureLodOffset(src, uv, 0.0f, ivec2( 1, 0)).x;\n\n    index = matIndex(ivec2( 0,-1));\n    a[index.x][index.y] = textureLodOffset(src, uv, 0.0f, ivec2( 0,-1)).x;\n    \n    index = matIndex(ivec2( 0, 1));\n    a[index.x][index.y] = textureLodOffset(src, uv, 0.0f, ivec2( 0, 1)).x;\n    \n    return(a);\n}\nmat3 matSweepDiagonal(in sampler2D src, in vec2 uv) // returns forward sweep, for backward sweep, negate the matrix.\n{\n    mat3 a = mat3(0);\n    uvec2 index;\n    \n    index = matIndex(ivec2(-1,-1));\n    a[index.x][index.y] = textureLodOffset(src, uv, 0.0f, ivec2(-1,-1)).x;\n    \n    index = matIndex(ivec2( 1,-1));\n    a[index.x][index.y] = textureLodOffset(src, uv, 0.0f, ivec2( 1,-1)).x;\n\n    index = matIndex(ivec2(-1, 1));\n    a[index.x][index.y] = textureLodOffset(src, uv, 0.0f, ivec2(-1, 1)).x;\n    \n    index = matIndex(ivec2( 1, 1));\n    a[index.x][index.y] = textureLodOffset(src, uv, 0.0f, ivec2( 1, 1)).x;\n    \n    return(a);\n}\n\nvec2 rotate( in vec2 p, in float angle )\n{\n\t#define c_ x\n\t#define s_ y\n\tvec2 cossin = vec2(cos(angle), sin(angle));\n\treturn( vec2(fma(p.x, cossin.c_, p.y * cossin.s_), fma(p.x, -cossin.s_, p.y * cossin.c_)) );\n\n\t#undef c_\n\t#undef s_\n}\nvec2 rotate_pixel(in vec2 uv, in float angle, in float resolution) \n{\n    vec2 rotateUV = rotate(uv, angle);\n    rotateUV = floor(rotateUV * resolution) / resolution;\n    rotateUV = rotate(rotateUV, -angle);\n    \n    return( rotateUV );\n}\n\n#define R iResolution.xy\n#define separation (1.0f / R.x)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord + 0.5f)/iResolution.xy;\n    uv = 2.0f * uv - 1.0f;\n        \n    bvec2 side = bvec2(uv.x < -separation, uv.x > separation);\n    uv = mix(uv - vec2(0, 1.0f), uv - 1.0f, side.yy);\n    \n    // last\n    uv.x *= iResolution.x / iResolution.y;\n    uv += uv / 3.0f;\n    uv *= 0.1f; \n    \n    mat3 r = mat3(0), o = matLoad(iChannel1, uv);\n    uint iReset = uint(textureLod(iChannel0, (fragCoord + 0.5f)/R, 0.0f).w);\n        \n    if ( iFrame < 8 || side.x ) {\n       r = o;\n       iReset = uint(iFrame);\n    }\n    else if ( /*0 == (iFrame & 1) &&*/ side.y ) {\n    \n       if (0 == (iFrame & 511)) {\n           r = o;\n           iReset = uint(iFrame);\n       }\n       else {\n           float step_offset = min(1.0f, 1.5f*float(uint(iFrame) - iReset));\n           uv = (fragCoord + (vec2(float(!bool(iFrame & 1))) * 2.0f - 1.0f) * step_offset)/R;\n           r = matLoad(iChannel0, uv);\n       }\n    }\n    else {\n       fragColor = textureLod(iChannel0, (fragCoord + 0.5f)/R, 0.0f);\n       return;\n    }\n    \n    float validated = 0.0f, final_minimum = 0.0f;\n\n    if (side.x) { // ground truth\n        \n        float mini = 1.0f;\n        \n        for(uint y = 0u; y < 3u; ++y) {\n        \n            for(uint x = 0u; x < 3u; ++x) {\n\n                mini = min(mini, r[x][y]);\n            }\n        }\n        \n        final_minimum = mini;\n    }\n    else if (side.y) { // optimization\n\n       mat3 a, b, sweep, final_result;\n#define rr final_result\n\n       // \"faux cooperative matrix parallel matrix multiply\"\n\n       // this computes the min !!!!\n       sweep = matSweep(iChannel0, uv);\n\n       a = fma(sweep, r, r);\n       b = fma(-sweep, r, a);\n       \n       rr = b;\n       //sweep = matSweepDiagonal(iChannel0, uv);\n\n       //a = fma(sweep, r, b);\n       //rr = fma(-sweep, r, a);\n       \n       // this computes the min !!!!\n        \n        \n       // validate\n       float mini_sum = 1.0f, mini = 1.0f;;\n             \n       uvec2 min_indices = uvec2(1,1);\n       \n       for(uint y = 0u; y < 3u; ++y) {\n        \n            for(uint x = 0u; x < 3u; ++x) {\n\n                if (rr[x][y] <= mini_sum) {\n                    mini_sum = rr[x][y];\n                    min_indices = uvec2(x,y);\n                }\n                                \n                mini = min(mini, o[x][y]);\n\n            }\n        }\n        \n        final_minimum = rr[min_indices.x][min_indices.y];\n        validated = abs(mini - final_minimum); \n    }\n    \n    fragColor = vec4(final_minimum, final_minimum,\n                     float((uint(side.y) << 2u) | (uint(side.x) << 1u) | (uint(bool(validated < 0.05f)) << 0u)) / 15.0f,\n                     float(iReset));\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define phi (1.61803398874989484820)\n#define iphi (0.61803398874989484820)\n#define pi (3.14159265358979323846)\n#define pi2 (2.0 * pi)\n#define fma(a,b,c) (a*b+c)\n\n\n\n// text //\n\n// vxlmono\n\t\t   // Font Size: 7x6px\n\t\t   // offset = ascii_code(character) - ascii_code(' ')\n\t\t   // data = vxlmono[lut[offset]]\n\nconst ivec2 font_size = ivec2(7, 6);\n\nconst int data[] = int[](\n\t\t0x00,0x00,0x00,0x00,0x00,0x00, // Character 0x20 (32: ' ')\n\t0x3F,0x27,0x27,0x3F,0x27,0x3F, // Character 0x21 (33: '!')\n\t0x3F,0x3F,0x3F,0x3F,0x3F,0x3F, // Character 0x22 (34: '\"')\n\t0x00,0x3F,0x3F,0x3F,0x3F,0x3F, // Character 0x23 (35: '#')\n\t0x33,0x21,0x3D,0x27,0x21,0x33, // Character 0x24 (36: '$')\n\t0x3F,0x2D,0x37,0x3B,0x2D,0x3F, // Character 0x25 (37: '%')\n\t0x00,0x00,0x3F,0x3F,0x3F,0x3F, // Character 0x26 (38: '&')\n\t0x00,0x00,0x00,0x3F,0x3F,0x3F, // Character 0x27 (39: ''')\n\t0x00,0x00,0x00,0x00,0x3F,0x3F, // Character 0x28 (40: '(')\n\t0x00,0x00,0x00,0x00,0x00,0x3F, // Character 0x29 (41: ')')\n\t0x00,0x00,0x0A,0x04,0x0A,0x00, // Character 0x2a (42: '*')\n\t0x00,0x00,0x04,0x0E,0x04,0x00, // Character 0x2b (43: '+')\n\t0x00,0x00,0x00,0x00,0x02,0x02, // Character 0x2c (44: ',')\n\t0x00,0x00,0x00,0x0E,0x00,0x00, // Character 0x2d (45: '-')\n\t0x00,0x00,0x00,0x00,0x02,0x00, // Character 0x2e (46: '.')\n\t0x00,0x10,0x08,0x04,0x02,0x00, // Character 0x2f (47: '/')\n\t0x3F,0x23,0x2D,0x2D,0x31,0x3F, // Character 0x30 (48: '0')\n\t0x3F,0x27,0x2F,0x2F,0x2F,0x3F, // Character 0x31 (49: '1')\n\t0x3F,0x21,0x2F,0x39,0x21,0x3F, // Character 0x32 (50: '2')\n\t0x3F,0x21,0x2F,0x27,0x21,0x3F, // Character 0x33 (51: '3')\n\t0x3F,0x2D,0x2D,0x21,0x2F,0x3F, // Character 0x34 (52: '4')\n\t0x3F,0x21,0x3D,0x27,0x21,0x3F, // Character 0x35 (53: '5')\n\t0x3F,0x21,0x3D,0x21,0x21,0x3F, // Character 0x36 (54: '6')\n\t0x3F,0x21,0x2F,0x2F,0x2F,0x3F, // Character 0x37 (55: '7')\n\t0x3F,0x31,0x25,0x29,0x23,0x3F, // Character 0x38 (56: '8')\n\t0x3F,0x21,0x2D,0x21,0x2F,0x3F, // Character 0x39 (57: '9')\n\t0x00,0x00,0x02,0x00,0x02,0x00, // Character 0x3a (58: ':')\n\t0x1F,0x1F,0x1F,0x1F,0x1F,0x1F, // Character 0x3b (59: ';')\n\t0x0F,0x0F,0x0F,0x0F,0x0F,0x0F, // Character 0x3c (60: '<')\n\t0x00,0x00,0x0E,0x00,0x0E,0x00, // Character 0x3d (61: '=')\n\t0x07,0x07,0x07,0x07,0x07,0x07, // Character 0x3e (62: '>')\n\t0x3F,0x21,0x25,0x3F,0x27,0x3F, // Character 0x3f (63: '?')\n\t0x3F,0x27,0x2F,0x2D,0x21,0x3F, // Character 0x40 (64: '@')\n\t0x00,0x07,0x09,0x0F,0x09,0x00, // Character 0x41 (65: 'A')\n\t0x00,0x0F,0x07,0x09,0x0F,0x00, // Character 0x42 (66: 'B')\n\t0x00,0x0F,0x01,0x01,0x0F,0x00, // Character 0x43 (67: 'C')\n\t0x00,0x07,0x09,0x09,0x07,0x00, // Character 0x44 (68: 'D')\n\t0x00,0x0F,0x03,0x01,0x0F,0x00, // Character 0x45 (69: 'E')\n\t0x00,0x0F,0x01,0x07,0x01,0x00, // Character 0x46 (70: 'F')\n\t0x00,0x0F,0x01,0x0D,0x0F,0x00, // Character 0x47 (71: 'G')\n\t0x00,0x09,0x09,0x0F,0x09,0x00, // Character 0x48 (72: 'H')\n\t0x00,0x03,0x03,0x00,0x03,0x00, // Character 0x49 (73: 'I')\n\t0x00,0x08,0x08,0x08,0x0F,0x00, // Character 0x4a (74: 'J')\n\t0x00,0x0D,0x03,0x07,0x0D,0x00, // Character 0x4b (75: 'K')\n\t0x00,0x01,0x01,0x01,0x0F,0x00, // Character 0x4c (76: 'L')\n\t0x00,0x1B,0x15,0x11,0x11,0x00, // Character 0x4d (77: 'M')\n\t0x00,0x0F,0x09,0x09,0x09,0x00, // Character 0x4e (78: 'N')\n\t0x00,0x07,0x09,0x09,0x06,0x00, // Character 0x4f (79: 'O')\n\t0x00,0x0F,0x09,0x0F,0x01,0x00, // Character 0x50 (80: 'P')\n\t0x00,0x07,0x09,0x0D,0x0E,0x00, // Character 0x51 (81: 'Q')\n\t0x00,0x0F,0x09,0x07,0x0D,0x00, // Character 0x52 (82: 'R')\n\t0x00,0x0F,0x01,0x0C,0x0F,0x00, // Character 0x53 (83: 'S')\n\t0x00,0x1F,0x04,0x04,0x04,0x00, // Character 0x54 (84: 'T')\n\t0x00,0x09,0x09,0x09,0x0F,0x00, // Character 0x55 (85: 'U')\n\t0x00,0x09,0x09,0x02,0x06,0x00, // Character 0x56 (86: 'V')\n\t0x00,0x11,0x11,0x15,0x1B,0x00, // Character 0x57 (87: 'W')\n\t0x00,0x0D,0x05,0x0A,0x0B,0x00, // Character 0x58 (88: 'X')\n\t0x00,0x11,0x1B,0x04,0x04,0x00, // Character 0x59 (89: 'Y')\n\t0x00,0x0F,0x0C,0x03,0x0F,0x00, // Character 0x5a (90: 'Z')\n\t0x07,0x01,0x01,0x01,0x01,0x07, // Character 0x5b (91: '[')\n\t0x03,0x03,0x03,0x03,0x03,0x03, // Character 0x5c (92: '\\')\n\t0x07,0x04,0x04,0x04,0x04,0x07, // Character 0x5d (93: ']')\n\t0x01,0x01,0x01,0x01,0x01,0x01, // Character 0x5e (94: '^')\n\t0x7F,0x5D,0x6B,0x77,0x7F,0x7F, // Character 0x5f (95: '_')\n\t0x7F,0x7F,0x5D,0x6B,0x77,0x7F, // Character 0x60 (96: '`')\n\t0x3F,0x31,0x2D,0x21,0x2D,0x3F, // Character 0x61 (97: 'a')\n\t0x3F,0x21,0x31,0x2D,0x21,0x3F, // Character 0x62 (98: 'b')\n\t0x3F,0x21,0x3D,0x3D,0x21,0x3F, // Character 0x63 (99: 'c')\n\t0x3F,0x31,0x2D,0x2D,0x31,0x3F, // Character 0x64 (100: 'd')\n\t0x3F,0x21,0x39,0x3D,0x21,0x3F, // Character 0x65 (101: 'e')\n\t0x3F,0x21,0x3D,0x31,0x3D,0x3F, // Character 0x66 (102: 'f')\n\t0x3F,0x21,0x3D,0x25,0x21,0x3F, // Character 0x67 (103: 'g')\n\t0x3F,0x2D,0x2D,0x21,0x2D,0x3F, // Character 0x68 (104: 'h')\n\t0x3F,0x33,0x33,0x3F,0x33,0x3F, // Character 0x69 (105: 'i')\n\t0x3F,0x2F,0x2F,0x2F,0x21,0x3F, // Character 0x6a (106: 'j')\n\t0x3F,0x25,0x39,0x31,0x25,0x3F, // Character 0x6b (107: 'k')\n\t0x3F,0x3D,0x3D,0x3D,0x21,0x3F, // Character 0x6c (108: 'l')\n\t0x7F,0x49,0x55,0x5D,0x5D,0x7F, // Character 0x6d (109: 'm')\n\t0x3F,0x21,0x2D,0x2D,0x2D,0x3F, // Character 0x6e (110: 'n')\n\t0x3F,0x31,0x2D,0x2D,0x33,0x3F, // Character 0x6f (111: 'o')\n\t0x3F,0x21,0x2D,0x21,0x3D,0x3F, // Character 0x70 (112: 'p')\n\t0x3F,0x31,0x2D,0x25,0x23,0x3F, // Character 0x71 (113: 'q')\n\t0x3F,0x21,0x2D,0x31,0x25,0x3F, // Character 0x72 (114: 'r')\n\t0x3F,0x21,0x3D,0x27,0x21,0x3F, // Character 0x73 (115: 's')\n\t0x7F,0x41,0x77,0x77,0x77,0x7F, // Character 0x74 (116: 't')\n\t0x3F,0x2D,0x2D,0x2D,0x21,0x3F, // Character 0x75 (117: 'u')\n\t0x3F,0x2D,0x2D,0x3B,0x33,0x3F, // Character 0x76 (118: 'v')\n\t0x7F,0x5D,0x5D,0x55,0x49,0x7F, // Character 0x77 (119: 'w')\n\t0x3F,0x25,0x35,0x2B,0x29,0x3F, // Character 0x78 (120: 'x')\n\t0x7F,0x5D,0x49,0x77,0x77,0x7F, // Character 0x79 (121: 'y')\n\t0x3F,0x21,0x27,0x39,0x21,0x3F, // Character 0x7a (122: 'z')\n\t0x7F,0x4D,0x4D,0x4D,0x4D,0x7F, // Character 0x7b (123: '{')\n\t0x7F,0x59,0x59,0x59,0x59,0x7F, // Character 0x7c (124: '|')\n\t0x7F,0x4B,0x4B,0x4B,0x4B,0x7F, // Character 0x7d (125: '}')\n\t0x7F,0x7F,0x7F,0x5D,0x6B,0x77 // Character 0x7e (126: '~')\n\t);\n\n\nconst int lut[] = int[](\n\t\t0, // Character 0x20 (32: ' ')\n\t\t6, // Character 0x21 (33: '!')\n\t\t12, // Character 0x22 (34: '\"')\n\t\t18, // Character 0x23 (35: '#')\n\t\t24, // Character 0x24 (36: '$')\n\t\t30, // Character 0x25 (37: '%')\n\t\t36, // Character 0x26 (38: '&')\n\t\t42, // Character 0x27 (39: ''')\n\t\t48, // Character 0x28 (40: '(')\n\t\t54, // Character 0x29 (41: ')')\n\t\t60, // Character 0x2a (42: '*')\n\t\t66, // Character 0x2b (43: '+')\n\t\t72, // Character 0x2c (44: ',')\n\t\t78, // Character 0x2d (45: '-')\n\t\t84, // Character 0x2e (46: '.')\n\t\t90, // Character 0x2f (47: '/')\n\t\t96, // Character 0x30 (48: '0')\n\t\t102, // Character 0x31 (49: '1')\n\t\t108, // Character 0x32 (50: '2')\n\t\t114, // Character 0x33 (51: '3')\n\t\t120, // Character 0x34 (52: '4')\n\t\t126, // Character 0x35 (53: '5')\n\t\t132, // Character 0x36 (54: '6')\n\t\t138, // Character 0x37 (55: '7')\n\t\t144, // Character 0x38 (56: '8')\n\t\t150, // Character 0x39 (57: '9')\n\t\t156, // Character 0x3a (58: ':')\n\t\t162, // Character 0x3b (59: ';')\n\t\t168, // Character 0x3c (60: '<')\n\t\t174, // Character 0x3d (61: '=')\n\t\t180, // Character 0x3e (62: '>')\n\t\t186, // Character 0x3f (63: '?')\n\t\t192, // Character 0x40 (64: '@')\n\t\t198, // Character 0x41 (65: 'A')\n\t\t204, // Character 0x42 (66: 'B')\n\t\t210, // Character 0x43 (67: 'C')\n\t\t216, // Character 0x44 (68: 'D')\n\t\t222, // Character 0x45 (69: 'E')\n\t\t228, // Character 0x46 (70: 'F')\n\t\t234, // Character 0x47 (71: 'G')\n\t\t240, // Character 0x48 (72: 'H')\n\t\t246, // Character 0x49 (73: 'I')\n\t\t252, // Character 0x4a (74: 'J')\n\t\t258, // Character 0x4b (75: 'K')\n\t\t264, // Character 0x4c (76: 'L')\n\t\t270, // Character 0x4d (77: 'M')\n\t\t276, // Character 0x4e (78: 'N')\n\t\t282, // Character 0x4f (79: 'O')\n\t\t288, // Character 0x50 (80: 'P')\n\t\t294, // Character 0x51 (81: 'Q')\n\t\t300, // Character 0x52 (82: 'R')\n\t\t306, // Character 0x53 (83: 'S')\n\t\t312, // Character 0x54 (84: 'T')\n\t\t318, // Character 0x55 (85: 'U')\n\t\t324, // Character 0x56 (86: 'V')\n\t\t330, // Character 0x57 (87: 'W')\n\t\t336, // Character 0x58 (88: 'X')\n\t\t342, // Character 0x59 (89: 'Y')\n\t\t348, // Character 0x5a (90: 'Z')\n\t\t354, // Character 0x5b (91: '[')\n\t\t360, // Character 0x5c (92: '\\')\n\t\t366, // Character 0x5d (93: ']')\n\t\t372, // Character 0x5e (94: '^')\n\t\t378, // Character 0x5f (95: '_')\n\t\t384, // Character 0x60 (96: '`')\n\t\t390, // Character 0x61 (97: 'a')\n\t\t396, // Character 0x62 (98: 'b')\n\t\t402, // Character 0x63 (99: 'c')\n\t\t408, // Character 0x64 (100: 'd')\n\t\t414, // Character 0x65 (101: 'e')\n\t\t420, // Character 0x66 (102: 'f')\n\t\t426, // Character 0x67 (103: 'g')\n\t\t432, // Character 0x68 (104: 'h')\n\t\t438, // Character 0x69 (105: 'i')\n\t\t444, // Character 0x6a (106: 'j')\n\t\t450, // Character 0x6b (107: 'k')\n\t\t456, // Character 0x6c (108: 'l')\n\t\t462, // Character 0x6d (109: 'm')\n\t\t468, // Character 0x6e (110: 'n')\n\t\t474, // Character 0x6f (111: 'o')\n\t\t480, // Character 0x70 (112: 'p')\n\t\t486, // Character 0x71 (113: 'q')\n\t\t492, // Character 0x72 (114: 'r')\n\t\t498, // Character 0x73 (115: 's')\n\t\t504, // Character 0x74 (116: 't')\n\t\t510, // Character 0x75 (117: 'u')\n\t\t516, // Character 0x76 (118: 'v')\n\t\t522, // Character 0x77 (119: 'w')\n\t\t528, // Character 0x78 (120: 'x')\n\t\t534, // Character 0x79 (121: 'y')\n\t\t540, // Character 0x7a (122: 'z')\n\t\t546, // Character 0x7b (123: '{')\n\t\t552, // Character 0x7c (124: '|')\n\t\t558, // Character 0x7d (125: '}')\n\t\t564 // Character 0x7e (126: '~')\n\t);\n    \n#define space 32        // ' '\n#define exclaim 33      // '!'\n#define quote 34        // '\"'\n#define hashtag 35      // '#'       \n#define dollar 36       // '$'\n#define perc 37         // '%'\n#define amp 38          // '&'\n#define single_quote 39 // '''\n#define cleft 40        // '('\n#define cright 41       // ')'       \n#define star 42         // '*'\n#define plus 43         // '+'\n#define comma 44        // ','\n#define minus 45        // '-'\n#define period 46       // '.'\n#define fwslash 47      // '/'       \n#define zero 48         // '0'\n#define one 49          // '1'\n#define two 50          // '2'\n#define three 51        // '3'\n#define four 52         // '4'\n#define five 53         // '5'       \n#define size 54         // '6'\n#define seven 55        // '7'\n#define eight 56        // '8'\n#define nine 57         // '9'\n#define colon 58        // ':'\n#define semi_colon 59   // ';'       \n#define lessthan 60     // '<'\n#define equal 61        // '='\n#define greaterthan 62  // '>'\n#define question 63     // '?'\n#define at 64           // '@'\n#define hi_A 65         // 'A'\n#define hi_B 66         // 'B'       \n#define hi_C 67         // 'C'\n#define hi_D 68         // 'D'\n#define hi_E 69         // 'E'\n#define hi_F 70         // 'F'       \n#define hi_G 71         // 'G'\n#define hi_H 72         // 'H'\n#define hi_I 73         // 'I'\n#define hi_J 74         // 'J'       \n#define hi_K 75         // 'K'\n#define hi_L 76         // 'L'\n#define hi_M 77         // 'M'\n#define hi_N 78         // 'N'       \n#define hi_O 79         // 'O'\n#define hi_P 80         // 'P'\n#define hi_Q 81         // 'Q'\n#define hi_R 82         // 'R'       \n#define hi_S 83         // 'S'\n#define hi_T 84         // 'T'\n#define hi_U 85         // 'U'\n#define hi_V 86         // 'V'       \n#define hi_W 87         // 'W'\n#define hi_X 88         // 'X'\n#define hi_Y 89         // 'Y'\n#define hi_Z 90         // 'Z'       \n#define lbrkt 91        // '['   \n#define bkslash 92      // '\\'\n#define rbrkt 93        // ']'   \n#define hat 94          // '^'   \n#define under 95        // '_'\n#define ting 96         // '`' \n#define lo_a 97         // 'a'\n#define lo_b 98         // 'b'\n#define lo_c 99         // 'c'\n#define lo_d 100        // 'd'       \n#define lo_e 101        // 'e'\n#define lo_f 102        // 'f'\n#define lo_g 103        // 'g'\n#define lo_h 104        // 'h'\n#define lo_i 105        // 'i'\n#define lo_j 106        // 'j'       \n#define lo_k 107        // 'k'\n#define lo_l 108        // 'l'\n#define lo_m 109        // 'm'\n#define lo_n 110        // 'n'\n#define lo_o 111        // 'o'\n#define lo_p 112        // 'p'       \n#define lo_q 113        // 'q'\n#define lo_r 114        // 'r'\n#define lo_s 115        // 's'\n#define lo_t 116        // 't'\n#define lo_u 117        // 'u'\n#define lo_v 118        // 'v'       \n#define lo_w 119        // 'w'\n#define lo_x 120        // 'x'\n#define lo_y 121        // 'y'\n#define lo_z 122        // 'z'\n#define lcurly 123      // '{'\n#define rcurly 124      // '}'\n#define wall 125        // '|'\n#define tilda 126       // '~'\n\n#define RES iResolution.xy\n\nvoid draw_character(inout float text_out, in vec2 location, in vec2 uv, int character, in vec2 R)\n{\n    int base = character - 32;\n    \n    ivec2 diff = ivec2(floor(uv * R - location * R));\n    \n    if ( all(greaterThanEqual(diff, ivec2(0))) && all(lessThan(diff, font_size)) ) {\n        ivec2 offset = clamp(diff, ivec2(0), font_size - 1);\n        text_out += float(bool( (data[lut[base] + ((font_size.y - 1) - offset.y)] & (1 << offset.x)) ));   \n    }\n}\n\n#define draw_string(text_out, location, uv, characters, res) for (int i = 0 ; i < characters.length() ; ++i) { draw_character(text_out, (location * res + vec2(i * (font_size.x), 0)) / res, uv, characters[i], res); }\n\nvoid draw_number(inout float text_out, in vec2 location, in vec2 uv, float number, in vec2 R)\n{\n    const uint digits = 6u; // maximum integer part digits, also maximum fractional digits\n    uint ipart = uint(floor(abs(number)));\n    \n    // integer part\n    uint values[digits] = uint[digits](0u,0u,0u,0u,0u,0u);\n    uint i = 0u;\n    while(0u != ipart) {\n        uint ivalue = (ipart % 10u);\n        ipart = ipart / 10u;\n        \n        values[i] = ivalue;\n        ++i;\n    }\n    \n    bool leading = true;\n    int p = int(digits) - 1;\n    i = 0u;\n    while(p >= 0) {\n        \n        if (0u == values[p] && leading) {\n            --p;\n            continue;\n        }\n            \n        draw_character(text_out, (location * R + vec2(i * uint(font_size.x), 0)) / R, uv, int(uint(zero) + values[p]), R);\n        ++i;\n        --p;\n        leading = false;\n    }\n    \n    if (leading) {\n        draw_character(text_out, (location * R + vec2(i * uint(font_size.x), 0)) / R, uv, zero, R);\n        ++i;\n    }\n    \n    // point\n    draw_character(text_out, (location * R + vec2(i * uint(font_size.x), 0)) / R, uv, period, R);\n    ++i;\n    \n    float fpart = fract(abs(number));\n    float period_offset = float(font_size.x) * 0.5f;\n    \n    // fractional part\n    p = int(digits);\n    while(0 != p) {\n        fpart = fpart * 10.0f;\n        ipart = uint(floor(abs(fpart)));\n        uint ivalue = (ipart % 10u);\n        \n        draw_character(text_out, (location * R + vec2(i * uint(font_size.x), 0) + vec2(-period_offset, 0)) / R, uv, int(uint(zero) + ivalue), R);\n        ++i;\n        --p;\n    }\n}\n\n// text //\n","name":"Common","description":"","type":"common"}]}