{"ver":"0.1","info":{"id":"NdcGDN","date":"1629797911","viewed":45,"name":"Simple Barycentric Coordinates","username":"wylm","description":"Simple application for Barycentric Coordinates.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["barycentriccoordinates"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The triangle UI is base on https://iquilezles.org/articles/distfunctions\n\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat dot2( in vec3 v ) { return dot(v,v); }\nfloat ndot( in vec2 a, in vec2 b ) { return a.x*b.x - a.y*b.y; }\n\nfloat udTriangle( vec3 p, vec3 a, vec3 b, vec3 c )\n{\n  vec3 ba = b - a; vec3 pa = p - a;\n  vec3 cb = c - b; vec3 pb = p - b;\n  vec3 ac = a - c; vec3 pc = p - c;\n  vec3 nor = cross( ba, ac );\n\n  return sqrt(\n    (sign(dot(cross(ba,nor),pa)) +\n     sign(dot(cross(cb,nor),pb)) +\n     sign(dot(cross(ac,nor),pc))<2.0)\n     ?\n     min( min(\n     dot2(ba*clamp(dot(ba,pa)/dot2(ba),0.0,1.0)-pa),\n     dot2(cb*clamp(dot(cb,pb)/dot2(cb),0.0,1.0)-pb) ),\n     dot2(ac*clamp(dot(ac,pc)/dot2(ac),0.0,1.0)-pc) )\n     :\n     dot(nor,pa)*dot(nor,pa)/dot2(nor) );\n}\n\n\nvec3 caculate_col(vec3 p, vec3 pos_a, vec3 pos_b, vec3 pos_c, \n                    vec3 col_a, vec3 col_b, vec3 col_c){\n    float alpha = (-(p.x-pos_b.x)*(pos_c.y-pos_b.y) + (p.y-pos_b.y)*(pos_c.x-pos_b.x))/(-(pos_a.x-pos_b.x)*(pos_c.y-pos_b.y)+(pos_a.y-pos_b.y)*(pos_c.x-pos_b.x));\n    float beta = (-(p.x-pos_c.x)*(pos_a.y-pos_c.y) + (p.y-pos_c.y)*(pos_a.x-pos_c.x))/(-(pos_b.x-pos_c.x)*(pos_a.y-pos_c.y)+(pos_b.y-pos_c.y)*(pos_a.x-pos_c.x));\n    float gamma = 1. - alpha - beta;\n    \n    return alpha*col_a + beta*col_b + gamma*col_c;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec3 pos_a = vec3(0.25, 0.5,0.);\n    vec3 pos_b = vec3(0.5, 0.75,0.);\n    vec3 pos_c = vec3(0.75, 0.25,0.);\n    \n    vec3 col_a = vec3(1.,0.,0.);\n    vec3 col_b = vec3(0.,1.,0.);\n    vec3 col_c = vec3(0.,0.,1.);\n    \n    float d = udTriangle(vec3(uv.xy,0.),pos_a,pos_b,pos_c);\n    \n    vec3 col = vec3(0.);\n    \n    if(d > 0.){\n        col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    }else{\n        col = caculate_col(vec3(uv.xy,0.),pos_a,pos_b,pos_c,col_a,col_b,col_c);\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}