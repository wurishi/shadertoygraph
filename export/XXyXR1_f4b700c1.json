{"ver":"0.1","info":{"id":"XXyXR1","date":"1721141756","viewed":16,"name":"Redcoff's Mandelbrot set","username":"redcoff","description":"Simple shader for experimenting with mandelbrot set.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = 4.0*fragCoord/iResolution.xx;\n    uv -= vec2(2.0,2.0*iResolution.y/iResolution.x);\n    \n    \n    //uv *= iTime / 100.;\n    //uv.x += iTime / 100.;\n\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    float zoom = (0.2 + 0.2 * sin(iTime/8.));\n    vec2 scaleCenter = vec2(0.37);\n    uv = (uv - scaleCenter) * zoom + scaleCenter;\n    \n    int maxIteration = 100;\n    //maxIteration = int(iTime*10.0);\n    int currentIteration = 0;\n    \n    vec2 z = vec2(0.0,0.0);\n    vec2 c = uv; // complex number is the coordinates\n    \n    // Run iterations\n    int i;\n    for (i = 0; i <= maxIteration; i++)\n    {\n        z = vec2(z.x * z.x - z.y * z.y, 2.0*z.x*z.y) + c;\n        if (length(z) > 2.0)\n        { \n            break; \n        }\n    }\n    \n\n    vec3 col;\n    if (i == maxIteration)\n    {\n        col = vec3(0.0);\n    }\n    else \n    {\n        col = vec3(float(i)/float(maxIteration));\n    }\n\n\n \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}