{"ver":"0.1","info":{"id":"wdf3WX","date":"1547624899","viewed":90,"name":"baUncEyyY","username":"winstonrenatan","description":"WowwwW Bouncey","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["circle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n\n//Circle function\nfloat Circle (vec2 uv, float blur, float rad) {\n    float d = length(uv);\n    float circle = smoothstep(rad, rad-blur, d);\n    return circle;\n}\n\n//Circle function using dots (point)\nfloat CircleLine(vec2 uv, float radi, int dotsNum){\n    float x = uv.x;\n    float y = uv.y;\n    float circDots=0.0, len=0.1, thick=0.001;\n    \n    radi /= float(dotsNum);\n    \n    for (int i=0; i<dotsNum; i++) {\n        float theta = 2.0*PI*float(i) / float(dotsNum);\n        x += radi*cos(theta);\n        y += radi*sin(theta);\n        circDots += Circle(vec2(x,y-0.1), 0.001, 0.005);\n    }\n    return circDots;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    uv -= 0.5;\n    uv.x *= iResolution.x/iResolution.y;\n    float c = 0.0;\n    vec2 pos; vec3 col;\n    \n    float x = uv.x; float y = uv.y;\n    y += 0.5;\n    \n    float gravity = 9.807, h = 1.0;\t\t//gravity and initial height\n    float t = sqrt(1.5*h/gravity);\t\t\n    float Vo = 0.0;\t\t\t\t\t\t//Initial velocity\n    float Vt = Vo+gravity*t;\t\t\t//Velocity\n    \n    h = abs(Vt*(sin(iTime)*(1.0/iTime)));\t//Height that will be reduced\n    c = CircleLine(vec2(x,y-h), 0.25, 80);\t//Circle location\n    \n    //Output to screen\n    col = vec3(1.0, 0.5, 0.8)*c;\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}