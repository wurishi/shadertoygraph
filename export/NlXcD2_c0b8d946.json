{"ver":"0.1","info":{"id":"NlXcD2","date":"1648734792","viewed":217,"name":"Simple Clover Path","username":"SnoopethDuckDuck","description":"Example using this function (sort of):\nhttps://www.desmos.com/calculator/vvlvvxr7yi\n\nI'm sure it could be condensed a bit","likes":4,"published":3,"flags":48,"usePreview":0,"tags":["cellularautomata"],"hasliked":0,"parentid":"Ns2XRh","parentname":"Tree automata"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 pal(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d) {\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float x = texelFetch( iChannel0, ivec2(fragCoord), 0 ).x;\n    vec3 e = vec3(0.5);\n    vec3 col = x * pal(0.15 + x, e, e, e, 0.2 * vec3(0,1,2)/3.);\n    col = sqrt(col);\n    col = vec3(1,0.8,0.8) - col;\n\n    // Visual of function on graph\n    // (if I wasn't lazy I'd do a y axis too + track particles motion with both axes)\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    uv *= 2.;\n    float s = step(uv.y + 1., 0.5 * fn(uv.x + 0.1 * iTime));\n    col += 0.08 * s;\n\n    fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    vec3 col = texelFetch( iChannel0, ivec2(fragCoord), 0 ).rgb;\n\n    float t = 0.1 * iTime;\n    \n    // Is more correct without smoothstep\n    // (smoothstep doesnt smooth [0,0.5] lines or [0.5,1] lines properly)\n    vec2 p = 0.6 * vec2(smoothstep(0., 1., fn(t)), \n                        smoothstep(0., 1., fn(t + 0.25)));\n    //p = 0.6 * vec2(fn(t), fn(t+0.25));\n    p -= 0.3;\n\n    float d = length(uv - p);\n    float s = 0.1 * exp(2.5 - 50. * d);\n    \n    col *= 0.99;\n    col += s;\n    col = clamp(col, 0., 1.);\n\n    fragColor = vec4( col, 0.0 );\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"// Click through each value here:\n// https://www.desmos.com/calculator/vvlvvxr7yi\nfloat fn(float x) {\n    // Restrict to [0,1] interval\n    float f = fract(x);\n    \n    // Triangle wave\n    float g = 2. * abs(f - 0.5);\n    \n    // Path of a square equation\n    float h = 2. * clamp(g, 0.25 ,0.75) - 0.5;\n    \n    // Use k for reflecting parts in y = 0.5\n    float k = step(0.5, f); //f for clover, h for in-out\n    \n    // Little square path equation\n    float l = min(0.5, 1. - 2. * abs(h - 0.5));\n    \n    // Triangles\n    float s = max(0., 0.5 - 4. * abs(fract(2. * x - 0.5) -0.5));\n    \n    // Flip half of little square equation, looks like a jagged h\n    float j = mix(l, 1. - l, k);\n    \n    // Remove triangles from j where j=1, add triangles where j=0\n    return abs(j - s);\n}","name":"Common","description":"","type":"common"}]}