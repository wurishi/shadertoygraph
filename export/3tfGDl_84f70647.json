{"ver":"0.1","info":{"id":"3tfGDl","date":"1557965497","viewed":86,"name":"move pix","username":"mxm","description":"move pix","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["movepix"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    /*vec2 uv = fragCoord/iResolution.xy;\n    vec2 uvO = uv;\n    uv.x *= iResolution.x/iResolution.y;\n    uv.x -= iResolution.x/iResolution.y/2.-.5;\n\n    vec3 dispMap = texture(iChannel1, uvO).rgb / 50.;\n    \n    vec2 uvDisp = vec2(uvO.x + dispMap.r, uvO.y + dispMap.g);\n    vec3 col = texture(iChannel0, uvDisp).rgb;\n\n    //col = dispMap;\n    fragColor = vec4(col,1.0);*/\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    //uv.x *= iResolution.x/iResolution.y;\n    //uv.x -= iResolution.x/iResolution.y/2.-.5;\n    \n    vec3 coral = vec3(250./255., 90./255.,92./255.);\n\n    vec3 dispMap = texture(iChannel1, uv).rgb / 300.;\n    \n    vec3 blob = texture(iChannel3, uv).rgb;\n    \n    vec2 uvDisp = vec2(uv.x + dispMap.r, uv.y + dispMap.g);\n    vec3 col = vec3(1.);\n    col.r = texture(iChannel2, vec2(uv.x+dispMap.r, uv.y-dispMap.r)).r;\n    col.g = texture(iChannel2, vec2(uv.x-dispMap.r, uv.y-dispMap.r)).g;\n    col.b = texture(iChannel2, vec2(uv.x-dispMap.r, uv.y+dispMap.r)).b;\n    \n    \n    vec3 outCol = blob + (1.-col);\n    \n    fragColor = vec4(1.-outCol,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 uvO = uv;\n    uv.x *= iResolution.x/iResolution.y;\n    uv.x -= iResolution.x/iResolution.y/2.-.5;\n    vec2 mousePos = vec2(iMouse.x/iResolution.x*iResolution.x/iResolution.y-iResolution.x/iResolution.y/2.+.5, iMouse.y/iResolution.y);\n\n    vec3 col = texture(iChannel0, uvO).rgb;\n    \n    col.r += (1.-smoothstep(.0, .2,distance(vec2(mousePos.x, mousePos.y), uv)));\n    //col.g += (1.-smoothstep(.0, .2,distance(vec2(iMouse.x/iResolution.x, iMouse.y/iResolution.y), vec2(uv.x*.9, uv.y*.9))));\n    \n    col *= 0.99;\n    \n    col = vec3(max(.5, col.r));\n    \n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"XsXGR8","channel":0}],"code":"vec3 rect(in vec3 col, in vec3 bgCol, in vec2 pos, in vec2 size, in vec2 uv) {\n    \n    vec2 pre = vec2(size.x/50., size.y/50.);\n    pre.x = max(0.002, pre.x);\n    pre.y = max(0.002, pre.y);\n    pre.x = 0.002;\n    pre.y = 0.002;\n\t\n    float inside = smoothstep(pos.x-size.x/2., (pos.x-size.x/2.)+pre.x,uv.x);\n    \n    inside += smoothstep(pos.x+size.x/2.+pre.x, pos.x+size.x/2.,uv.x);\n    \n    inside += smoothstep(pos.y-size.y/2., (pos.y-size.y/2.)+pre.y,uv.y);\n    inside += smoothstep(pos.y+size.y/2.+pre.y, pos.y+size.y/2.,uv.y);\n    \n    inside -= 3.;\n    \n    inside = max(0., inside);\n    \n    return mix(bgCol, col, inside);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x *= iResolution.x/iResolution.y;\n    uv.x -= iResolution.x/iResolution.y/2.-.5;\n    \n    vec3 col = vec3(1.);\n    \n    //vec3 copyCol = vec3(250./255., 90./255.,92./255.);\n    vec3 copyCol = vec3(0.);\n    \n    col = rect(copyCol, col, vec2(-.25, .5), vec2(.1, .7), uv);\n    col = rect(copyCol, col, vec2(.05, .5), vec2(.1, .7), uv);\n    col = rect(copyCol, col, vec2(.35, .5), vec2(.1, .7), uv);\n    col = rect(copyCol, col, vec2(.65, .5), vec2(.1, .7), uv);\n    col = rect(copyCol, col, vec2(.95, .5), vec2(.1, .7), uv);\n    col = rect(copyCol, col, vec2(1.25, .5), vec2(.1, .7), uv);\n    \n    col = rect(copyCol, col, vec2(.5, .5), vec2(.9, .1), uv);\n    \n    fragColor = vec4(col,1.0);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"4sXGR8","channel":0}],"code":"//\n// Description : Array and textureless GLSL 2D/3D/4D simplex \n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : stegu\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//               https://github.com/stegu/webgl-noise\n// \n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v)\n  { \n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289(i); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n  }\n\nvec2 p1 = vec2(0.9, 0.5);\nvec2 p2 = vec2(0.7, 0.7);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec3 coral = vec3(250./255., 90./255.,92./255.);\n    vec2 mousePos = vec2(iMouse.x/iResolution.x*iResolution.x/iResolution.y-iResolution.x/iResolution.y/2.+.5, iMouse.y/iResolution.y);\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x = uv.x*iResolution.x/iResolution.y - 0.5;\n\n    float noise = snoise(vec3(uv.x, uv.y, iTime/10.));\n    uv.x += noise/5.;\n    \n    p1.x += mousePos.x*.2;\n    p1.y += mousePos.y*.2;\n    \n    float col = distance(p1, uv);\n    col *= distance(p2, uv);\n    \n    col = 1.-smoothstep(.3,.31, col);\n\n    vec3 outCol = vec3(col) * (1.-coral);\n    fragColor = vec4(outCol,1.0);\n}","name":"Buffer C","description":"","type":"buffer"}]}