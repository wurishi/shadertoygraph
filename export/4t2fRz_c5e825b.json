{"ver":"0.1","info":{"id":"4t2fRz","date":"1514325674","viewed":4278,"name":"Procedural film grain","username":"luluco250","description":"Nice and smooth.\n\n","likes":34,"published":3,"flags":0,"usePreview":0,"tags":["2d","noise","filter","random","film","grain"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Feel free to steal this :^)\n// Consider it MIT licensed, you can link to this page if you want to.\n\n#define SHOW_NOISE 0\n#define SRGB 0\n// 0: Addition, 1: Screen, 2: Overlay, 3: Soft Light, 4: Lighten-Only\n#define BLEND_MODE 0\n#define SPEED 2.0\n#define INTENSITY 0.075\n// What gray level noise should tend to.\n#define MEAN 0.0\n// Controls the contrast/variance of noise.\n#define VARIANCE 0.5\n\nvec3 channel_mix(vec3 a, vec3 b, vec3 w) {\n    return vec3(mix(a.r, b.r, w.r), mix(a.g, b.g, w.g), mix(a.b, b.b, w.b));\n}\n\nfloat gaussian(float z, float u, float o) {\n    return (1.0 / (o * sqrt(2.0 * 3.1415))) * exp(-(((z - u) * (z - u)) / (2.0 * (o * o))));\n}\n\nvec3 madd(vec3 a, vec3 b, float w) {\n    return a + a * b * w;\n}\n\nvec3 screen(vec3 a, vec3 b, float w) {\n    return mix(a, vec3(1.0) - (vec3(1.0) - a) * (vec3(1.0) - b), w);\n}\n\nvec3 overlay(vec3 a, vec3 b, float w) {\n    return mix(a, channel_mix(\n        2.0 * a * b,\n        vec3(1.0) - 2.0 * (vec3(1.0) - a) * (vec3(1.0) - b),\n        step(vec3(0.5), a)\n    ), w);\n}\n\nvec3 soft_light(vec3 a, vec3 b, float w) {\n    return mix(a, pow(a, pow(vec3(2.0), 2.0 * (vec3(0.5) - b))), w);\n}\n\nvoid mainImage(out vec4 color, vec2 coord) {\n    vec2 ps = vec2(1.0) / iResolution.xy;\n    vec2 uv = coord * ps;\n    color = texture(iChannel0, uv);\n    #if SRGB\n    color = pow(color, vec4(2.2));\n    #endif\n    \n    float t = iTime * float(SPEED);\n    float seed = dot(uv, vec2(12.9898, 78.233));\n    float noise = fract(sin(seed) * 43758.5453 + t);\n    noise = gaussian(noise, float(MEAN), float(VARIANCE) * float(VARIANCE));\n    \n    #if SHOW_NOISE\n    color = vec4(noise);\n    #else    \n    // Ignore these mouse stuff if you're porting this\n    // and just use an arbitrary intensity value.\n    float w = float(INTENSITY);\n    if (iMouse.z > 0.0) {\n        w = iMouse.y * ps.y;\n        w *= step(coord.x, iMouse.x);\n    }\n\t\n    vec3 grain = vec3(noise) * (1.0 - color.rgb);\n    \n    #if BLEND_MODE == 0\n    color.rgb += grain * w;\n    #elif BLEND_MODE == 1\n    color.rgb = screen(color.rgb, grain, w);\n    #elif BLEND_MODE == 2\n    color.rgb = overlay(color.rgb, grain, w);\n    #elif BLEND_MODE == 3\n    color.rgb = soft_light(color.rgb, grain, w);\n    #elif BLEND_MODE == 4\n    color.rgb = max(color.rgb, grain * w);\n    #endif\n        \n    #if SRGB\n    color = pow(color, vec4(1.0 / 2.2));\n    #endif\n    #endif\n}\n","name":"Image","description":"","type":"image"}]}