{"ver":"0.1","info":{"id":"XtKGDd","date":"1477592383","viewed":264,"name":"grass plane rendering","username":"public_int_i","description":"trying to draw repeating strands, a crude unoptimised test.\n\nmouse x controls density\nmouse y controls height","likes":5,"published":1,"flags":32,"usePreview":0,"tags":["plane","repeating","strand"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Ethan Alexander Shulman 2016\n\n//mouse x controls density\n//mouse y controls height\n\n//Image - smudges Buf A color/depth in plane normal direction\n\n\n\nvec2 rot2d(vec2 p, float a) {\n    return p*mat2(sin(a),cos(a),-cos(a),sin(a));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    //camera ray\n    vec3 rd = normalize(vec3((fragCoord*2.-iResolution.xy)/iResolution.x, 1.)),\n         rp = vec3(0.,2.,0.);\n    \n    //spin camera\n    rd.xy = rot2d(rd.xy,iTime*0.1);\n    \n    //grass height controlled by mouse y\n    float grassHeight = (1.-iMouse.y/iResolution.y)*64.;\n    \n    //mirrored y-axis aligned plane distance\n    float s = (rp.y/abs(rd.y));\n    \n    //screen space smudge\n    vec4 ss = vec4(0.);\n    vec2 ssm = rot2d(vec2(0.,sign(rd.y)),-iTime*0.1)/iResolution.xy;\n    for (int i = 0; i < 64; i++) {\n        if (float(i) > grassHeight) break;\n        \n        vec4 ts = texture(iChannel0, uv);\n        ss = mix(ss,ts,\n                step(1e-4,ts.w)*step(ss.w,ts.w)*step(ss.x,ts.x));\n        uv += ssm;\n    }\n    \n    \n\tfragColor = ss*vec4(.3,1.,.14,1.);//tint grass color\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//Ethan Alexander Shulman 2016\n\n//Buf A - renders color/depth of repeating points texture on plane\n\n\nfloat grassDensity = .5;\n\n\n#define points(sp) clamp((texture(iChannel0,sp).x-grassDensity)*(1./(1.-grassDensity)),0.,1.)\n\n\nvec2 rot2d(vec2 p, float a) {\n    return p*mat2(sin(a),cos(a),-cos(a),sin(a));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //camera ray\n    vec3 rd = normalize(vec3((fragCoord*2.-iResolution.xy)/iResolution.x, 1.)),\n         rp = vec3(0.,2.,0.);\n    \n    //spin camera\n    rd.xy = rot2d(rd.xy,iTime*0.1);\n    \n    //control grass density\n    grassDensity = iMouse.x/iResolution.x;\n    \n    //mirrored y-axis aligned plane\n    float s = (rp.y/abs(rd.y));\n    rp += rd*s;\n    \n    //moving forward\n    rp.z += iTime*0.5;\n    \n    //repeating points\n    float p = points(rp.xz*0.15);\n    fragColor = vec2(p/max(s*0.1-1.,1.),\n                     step(1e-4,p)*s).xxxy;\n}","name":"Buf A","description":"","type":"buffer"}]}