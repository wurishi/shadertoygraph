{"ver":"0.1","info":{"id":"dd2Sz3","date":"1670657336","viewed":114,"name":"ChatGPT box","username":"Impossible","description":"Test to get ChatGPT to write a shader for a raymarched box.  Modified this one slightly also to fix aspect ratio and increase steps","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarch","chatgpt"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized device coordinates\n    vec2 uv = (fragCoord/iResolution.xy - vec2(0.5,0.5));\n    uv.x *= iResolution.x/iResolution.y;\n    \n    // The camera is at (0, 0, 3)\n    vec3 camera = vec3(0, 0, 3);\n\n    // The ray direction is the normal\n    vec3 ray = normalize(vec3(uv, -1.0));\n\n    // The box has dimensions (1, 1, 1) and is centered at (0, 0, 0)\n    vec3 min = vec3(-0.5, -0.5, -0.5);\n    vec3 max = vec3( 0.5,  0.5,  0.5);\n\n    // Raymarch the box\n    float t = 0.0;\n    for (int i = 0; i < 512; i++)\n    {\n        vec3 pos = camera + t * ray;\n        if (all(greaterThanEqual(pos, min)) && all(lessThanEqual(pos, max)))\n        {\n            // We hit the box, so calculate the normal\n            vec3 normal;\n            normal.x = step(pos.x, min.x) - step(pos.x, max.x);\n            normal.y = step(pos.y, min.y) - step(pos.y, max.y);\n            normal.z = step(pos.z, min.z) - step(pos.z, max.z);\n            normal = normalize(normal);\n\n            // Calculate the lighting\n            vec3 light = normalize(vec3(-1, -1, -1));\n            float diffuse = dot(normal, light);\n\n            // Set the color of the box\n            fragColor = vec4(diffuse, 0.5 * diffuse, 0.0, 1.0);\n            return;\n        }\n        t += 0.01;\n    }\n\n    // We didn't hit the box, so set the color to black\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n}","name":"Image","description":"","type":"image"}]}