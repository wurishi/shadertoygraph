{"ver":"0.1","info":{"id":"7sSfDV","date":"1647254203","viewed":115,"name":"Arcs - Dummies ","username":"raoul","description":"in my series for dummies since I am one ..\nreuse of this shader \nhttps://www.shadertoy.com/view/sdSfWV\nthanks to al-ro for this clue ..\nthe goal is pretty straightforward draw an arc from an minAngle to an maxAngle ","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["arcsdummies"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define PI 3.14159265359\n\n//angleMin 0. to 2* PI angleMax the same .. 2PI its the whole circle\nvec3 DrawArc(vec2 uv, float dist, float r, float angleMin , float angleMax){\n\n // Starting angle\n    \n    angleMin +=sin(iTime) *mod(iTime,2.*PI);\n    angleMax +=sin(iTime) * mod(iTime, 2.*PI); \n      \n    float angle = atan(uv.y, uv.x) + PI;\n    \n    // Within last 10% of the radius limit and between min and max angle\n    bool inArc = (dist < r ) && (angle < angleMax && angle > angleMin);\n    \n    vec3 col = vec3(inArc ? 1.0 : 0.0);\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5; \n    uv.x *= iResolution.x / iResolution.y;\n    float r = 0.2;\n    float dist = length(vec2(uv.x, uv.y));\n    \n    //if its in the right angle i multiply with color \n   vec3 blueArc = DrawArc(uv, dist, r,0., 0.5*PI)*vec3(0.2,0.2,0.7); \n   vec3 pinkArc = DrawArc(uv, dist, r,0.5* PI, PI)*vec3(0.7,0.2,0.7) ; \n   vec3 yellowArc = DrawArc(uv, dist, r,PI,3./2.* PI)*vec3(0.7,0.7,0.2);\n   vec3 greenArc = DrawArc(uv, dist, r,1.5* PI,2.* PI)*vec3(0.2,0.7,0.2);\n    \n    // add the value together \n    fragColor = vec4(blueArc +  pinkArc+ yellowArc + greenArc ,1.0);\n}","name":"Image","description":"","type":"image"}]}