{"ver":"0.1","info":{"id":"fdSSWh","date":"1620077386","viewed":133,"name":" Little Dark Age","username":"obaum101","description":"Projet en Techniques de Programmation","likes":1,"published":1,"flags":64,"usePreview":0,"tags":["circles"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"llfSRj","filepath":"https://soundcloud.com/pimimi/little-dark-age","previewfilepath":"https://soundcloud.com/pimimi/little-dark-age","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// NB : L'animation suit le rythme d'une musique ( Replay s'il n'y a pas de son )\n// Fin de l'animation vers 26 secs\n\n// Fonction disque prit du PDF du cours\nvec4 disk(vec2 uv, vec2 center, float radius, vec4 color) {\n    float dist = step(length(center - uv), radius);\n    return vec4(dist, dist, dist, 1.0)*color;\n}\n\n// Fonction permettant de créer les grilles\nvec4 grid(vec2 coord,vec2 gridSize){\n    vec2 gridCoord = fract(coord / gridSize) * gridSize;\n    vec2 isALine = step(gridCoord, vec2(12.0)); \n    float color = max(isALine.x, isALine.y);\n    return vec4(color,0.0, 0.0, 0.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 gridSize;\n    vec2 coord = fragCoord.xy;\n    // Dimensions des grilles qui varient en fonction du temps\n    gridSize = vec2(15.0+2.0*iTime, 15.0+2.0*iTime);\n    fragColor = grid(coord,gridSize)+vec4(-iTime/3.5,0.0,iTime/3.5,0.0);;\n    \n    if(iTime>3.12){\n    // Effet de multiplication de grilles en utilisant le modulo\n    gridSize = vec2(log(mod(iTime+0.5,1.45))+45.0, 45.0);\n    fragColor = grid(coord,gridSize);\n    }\n    \n    // Lorsqu'on dépasse ce temps\n    if(iTime>9.0)\n    {\n    // Attribution d'une couleur qui change en fonction du temps\n    // ( + disparition des grilles )\n    fragColor=vec4(0.0,sin(iTime),cos(iTime),1.0);\n    }\n    \n    if(iTime>10.5){     \n        // Remplacement de la taille des grilles\n        gridSize = vec2(15.0+iTime,15.0+iTime/2.0);\n        \n        // Rotation de la grille\n        float rotation = iTime; \n        coord = mat2( -cos(rotation),\n             sin(rotation),\n             sin(rotation),\n             cos(rotation)) * coord; // Rotation \n                fragColor += grid(coord,gridSize);\n    }\n\n    if(iTime>14.8){\n    // On réaffiche les grilles\n     fragColor = grid(coord,gridSize);\n     fragColor += vec4(sin(iTime),0.0,cos(iTime),0.0);\n    \n    // Affichage des cercles\n    // Positionnement des cercles au centre de l'écran\n    vec2 uv = fragCoord/(iResolution.xy);\n    vec2 uvCenter = vec2(0.5,0.5);\n    // Vitesse d'agrandissement du cercle\n    float vitessecercle = 3.0;\n    // Création de plusieurs cercles\n    vec4 c1 = disk(uv,uvCenter,mod(iTime*vitessecercle,2.2),vec4(0.2,0.4,0.1,1.0));\n    vec4 c2 = disk(uv,uvCenter,mod(iTime*vitessecercle+0.5,2.2),vec4(0.4,0.3,0.2,1.0));\n    fragColor = mix(fragColor,mix(c1,c2,0.5),0.7);\n    }\n}","name":"Image","description":"","type":"image"}]}