{"ver":"0.1","info":{"id":"DdB3Wt","date":"1668294714","viewed":119,"name":"voronoi gavr","username":"gavroche","description":"voronoi after the tuto of the book of shaders","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["voronoi","skull"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14\nvec2 random (vec2 st) {\n    return vec2(fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123),fract(cos(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123));\n}\n\nfloat length_(vec2 uv, vec2 st, float N){\n    \n    return pow(pow(abs(uv.x-st.x), N) + pow(abs(uv.y-st.y), N), 1./N);\n}\n\nfloat voronoi(vec2 uv){\n    float min_dist = 100.;\n    float dist = 0.;\n    for(float i =-1.;i<2.;i++){\n        for(float j =-1.;j<2.;j++){\n            vec2 point_random = random(floor(uv)+vec2(i,j));\n            point_random=0.5+0.5*sin(iTime+point_random*124.15);\n            dist = length_(fract(uv), vec2(i,j)+point_random,3.);\n            if (dist<min_dist){\n                min_dist = dist;\n            }\n        }\n    }\n    return min_dist;\n}\n\n\nvec3 hsb2rgb( in vec3 c ){\n    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),\n                             6.0)-3.0)-1.0,\n                     0.0,\n                     1.0 );\n    rgb = rgb*rgb*(3.0-2.0*rgb);\n    return c.z * mix( vec3(1.0), rgb, c.y);\n}\nfloat circle(in vec2 uv, in vec2 center, in float radius){\n    \n    return 1.-smoothstep(0., 0.01, length(uv-center)-radius);\n}\n\nfloat new_box(in vec2 st, in vec2 center, in vec2 size){\n    vec2 begin = center-size/2.;\n    vec2 box =  smoothstep(vec2(1.)-begin-size,vec2(1.)- begin-size+vec2(0.01), vec2(1.)-st);\n    box *= smoothstep(begin, begin+vec2(0.01),st);\n    return box.x*box.y;\n\n}\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\nfloat square(in vec2 uv, in vec2 center, in float size, float power){\n    return 1.-smoothstep(0.,0.01,length_(center,uv, power)-size);\n}\n\n\n\nvec3 crane(vec2 uv, vec3 col){\n    uv.x = -abs(uv.x);\n    col+=square(uv*rotate2d(6.*PI/16.), vec2(0.1,0.3)*rotate2d(6.*PI/16.),0.61,2.4)+square(uv*rotate2d(6.*PI/16.), vec2(-0.1,0.3)*rotate2d(6.*PI/16.),0.61,2.3);//haut crane\n    col+=square(uv, vec2(0.,-0.3),0.5,2.5);//bas crane\n    //yeux\n    col*=1.-smoothstep(0.,1.,square(uv*rotate2d(-PI/16.), vec2(-0.2,0.1)*rotate2d(-PI/16.),0.35,2.9)*square(uv*rotate2d(PI/7.),vec2(-0.3,0.2)*rotate2d(PI/7.),0.25,2.7));\n    //nez\n    col*=1.-smoothstep(0.,1.,square(uv,vec2(-0.47,-0.15), 0.45,4.)*square(uv*rotate2d(1.8*PI/3.), vec2(0.,-0.15)*rotate2d(1.8*PI/3.), 0.12,2.5));\n    //machoire\n    col*=1.-smoothstep(0.,1.,new_box(uv*rotate2d(1.4*PI/4.),vec2(-0.22,-0.35)*rotate2d(1.4*PI/4.),vec2(0.4))*new_box(uv,vec2(-0.43,-0.4),vec2(0.3,0.4))*\n            new_box(uv*rotate2d(3.2*PI/5.),vec2(-0.43,-0.44)*rotate2d(3.2*PI/5.),vec2(0.2,0.4)));\n    int nb_dents = 3;\n    float f_dents= float(nb_dents);\n    \n    for(int i =0; i<nb_dents;i++){\n        \n        col*=1.-smoothstep(0.,1.,new_box(uv*rotate2d(PI/4.), vec2(-0.3+float(i)*0.11,-0.6+abs(f_dents-(float(i)-0.5)*2.)*0.02)*rotate2d(PI/4.),vec2(0.23,0.3))*\n            new_box(uv, vec2(-0.27+float(i)*0.11,-0.5+abs(f_dents-(float(i)-0.5)*2.)*0.02),vec2(0.12,0.15)));\n        col+=3.*new_box(uv*rotate2d(PI/4.), vec2(-0.3+float(i)*0.11,-0.6+abs(f_dents-(float(i)-0.5)*2.)*0.02)*rotate2d(PI/4.),vec2(0.2,0.28))*\n            new_box(uv, vec2(-0.27+float(i)*0.11,-0.5+abs(f_dents-(float(i)-0.5)*2.)*0.02),vec2(0.09,0.13));\n            \n        col*=1.-smoothstep(0.,1.,new_box(uv*rotate2d(3.*PI/4.), vec2(-0.3+float(i)*0.11,-0.53+abs(f_dents-(float(i)-0.5)*2.)*0.02)*rotate2d(3.*PI/4.),vec2(0.23,0.3))*\n             new_box(uv, vec2(-0.27+float(i)*0.11,-0.68+abs(f_dents-(float(i)-0.5)*2.)*0.02),vec2(0.12,0.25)));\n        \n       col+=3.*new_box(uv*rotate2d(3.*PI/4.), vec2(-0.3+float(i)*0.11,-0.53+abs(f_dents-(float(i)-0.5)*2.)*0.02)*rotate2d(3.*PI/4.),vec2(0.2,0.28))*\n            new_box(uv, vec2(-0.27+float(i)*0.11,-0.68+abs(f_dents-(float(i)-0.5)*2.)*0.02),vec2(0.09,0.23));\n    }//dents\n    return col;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = ( 2.*fragCoord.xy - iResolution.xy ) / iResolution.y;\n    //float on_tempo = mod(iTime/4.,1.);\n    uv = uv*1.*rotate2d(PI/8.*iTime);\n    \n    vec2 uv2 = uv;\n    uv = abs(uv);\n    vec2 st = uv*2.;\n    \n    uv*=3.;\n    vec3 col = vec3(0.);\n    //col+=random(floor(uv));\n    \n    col+=pow(voronoi(uv), sin(iTime)*2.5+3.5)*hsb2rgb(vec3(sin(iTime)*0.5+0.5,0.8,0.5));\n    col+=pow(voronoi(st), cos(iTime)*2.5+3.5)*hsb2rgb(vec3(cos(iTime)*0.5+0.5,0.8,0.5))*0.8;\n    col+=pow(voronoi(st*2.+vec2(0.2)), sin(iTime)*2.5+3.5)*hsb2rgb(vec3(cos(iTime+0.4)*0.5+0.5,0.8,0.5))*0.6;\n    col = 0.9*col+5.*col*min(crane(uv2,col),0.1);\n    \n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}