{"ver":"0.1","info":{"id":"dsscRM","date":"1686679879","viewed":77,"name":"Intro to art coding","username":"BrandonS","description":"Code following the \"An Introduction to Shader Art Coding\" youtube video by kisimisu.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["learning"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.141592654\n\n// cosine based palette, 4 vec3 params\nvec3 paletteParams( in float t, in vec3[4] colors )\n{\n    float speed = 0.4;\n    return colors[0] + colors[1]*cos( 6.28318*(colors[2]*(t*speed)+colors[3]) );\n}\n\n\n\n// cosine based palette, 4 vec3 params\nvec3 palette( in float t )\n{\n    vec3 a = vec3(0.660, 0.560, 0.680);\n    vec3 b = vec3(0.718, 0.438, 0.720);\n    vec3 c = vec3(0.520, 0.800, 0.520);\n    vec3 d = vec3(-0.430, -0.397, -0.083);\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\n\nvec3[] pinkBlueGreen = vec3[] (\n    vec3(0.660, 0.560, 0.680), \n    vec3(-3.142, 0.438, 0.720), \n    vec3(1.858, 1.978, 0.520), \n    vec3(-0.430, -0.397, -0.083)\n);\n\nvec3[] blueWhiteRed = vec3[](\n        vec3(0.660, 0.560, 0.680),\n        vec3(0.718, 0.438, 0.720),\n        vec3(0.520, 0.800, 0.520),\n        vec3(-0.430, -0.397, -0.083)\n        ); // Initial intensities of colors\n\nvec3[] blackWhite = vec3[](\nvec3(0.500, 0.500, 0.500),\n         vec3(0.500, 0.500, 0.500),\n         vec3(1.000, 1.000, 1.000),\n         vec3(0.000, 0.000, 0.000)\n);\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec2 uv = (fragCoord *2.0 - iResolution.xy) / iResolution.y;\n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.0);\n    \n    \n    for(float i = 0.0; i < 4.0; i++){\n        uv = fract(uv*2.2) - 0.5;\n\n        float d = (length(uv) *exp(-length(uv0))) + cos(iTime/4.+PI) + 2.;\n        vec3 col = paletteParams(length(uv0)+ i*5. + iTime,blueWhiteRed);\n        //vec3 col = vec3(abs(uv.x));\n\n        d = sin(d*8. +iTime)/8.;\n        d = abs(d);\n        d = pow(0.01/d,2.);\n\n        //vec3 col = vec3(step(0.0,uv.x),0.,0.);\n        finalColor += col *= d;\n    }\n    \n    \n    fragColor = vec4(finalColor,1.0);\n\n}\n\n\n\n\n\n\n/* Old Main\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec2 uv = ((fragCoord*2.0 - iResolution.xy)/iResolution.y);\n    //uv.x *= iResolution.x/iResolution.y;\n    uv *= uv *2.0;\n    \n    uv = fract(uv);\n    uv -=0.5;\n    \n    float d = length(uv);\n    float circleRadius = 0.2;\n    float numOfCircles = 9.;\n    \n    float circle = 0.;\n    \n    circle = sin(d*numOfCircles +iTime) / numOfCircles; // Use sin to get variance from -1 to 1\n    circle = abs(circle); // Hollow Out the center of the circles\n    \n    circle = smoothstep(0.0,circleRadius,circle); // Refine the border of the circles\n    \n    circle = 0.02/circle; // High saturation close to the border with steep drop off. WIthout this it gets fat and even distributed.\n    vec3 color = palette(iTime,pinkBlueGreen);\n    color *= circle; // Multiply by our calculated distance from center to produce more vibrant colors at the edges.\n    \n    fragColor =  vec4(color, 1.0);\n    //fragColor = vec4(uv, 0.0,1.0);\n\n}\n*/","name":"Image","description":"","type":"image"}]}