{"ver":"0.1","info":{"id":"lf2SDc","date":"1706924787","viewed":194,"name":"PathTracer-2024-02-03","username":"banni","description":"Trying to learn path tracing from Raytrcing in one weekend and casual path tracer from demoFox :)","likes":8,"published":1,"flags":32,"usePreview":0,"tags":["raymarching","pathtracer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define MAX_T 20.0f\nconst float c_pi = 3.14159265359f;\nconst float c_twopi = 2.0f * c_pi;\n\n//copied from https://www.shadertoy.com/view/tsBBWW\nuint wang_hash(inout uint seed)\n{\n    seed = uint(seed ^ uint(61)) ^ uint(seed >> uint(16));\n    seed *= uint(9);\n    seed = seed ^ (seed >> 4);\n    seed *= uint(0x27d4eb2d);\n    seed = seed ^ (seed >> 15);\n    return seed;\n}\n\n//copied from https://www.shadertoy.com/view/tsBBWW\nfloat RandomFloat01(inout uint state)\n{\n    return float(wang_hash(state)) / 4294967296.0;\n}\n\n//copied from https://www.shadertoy.com/view/tsBBWW\nvec3 RandomUnitVector(inout uint state)\n{\n    float z = RandomFloat01(state) * 2.0f - 1.0f;\n    float a = RandomFloat01(state) * c_twopi;\n    float r = sqrt(1.0f - z * z);\n    float x = r * cos(a);\n    float y = r * sin(a);\n    return vec3(x, y, z);\n}\n\n\nstruct Hitinfo\n{\n    float t;\n    vec3 n;\n    vec3 albedo;\n    vec3 emissive;\n    float smoothness;\n};\n\n//Inigo's box sdf - https://iquilezles.org/articles/distfunctions/\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat map(vec3 p, inout Hitinfo i)\n{\n    vec3 q = p;\n    q.x = abs(q.x);\n    float d = length(q - vec3(.5,.25,0)) - .3;\n    if ( d < .001)\n    {\n        i.emissive = vec3(0);\n        i.albedo = vec3(.1, .1, .1);\n        i.smoothness = 1.f;\n        return d;\n    }\n    vec3 q2 = p;\n    q2.y = abs(q2.y + .2);\n    float d2 = q2.y;\n    if (d2 < .001)\n    {\n        i.emissive = vec3(0);\n        i.albedo = vec3(1.1, 1.5, 1.1);\n        i.smoothness = .3;\n        return d2;\n    }\n    \n    float wh = 10.;\n    float d3 = sdBox(p - vec3(0,20,0), vec3(wh * 2.,.1,wh));\n    \n    if (d3 < .001)\n    {\n        i.emissive = vec3(55,.3,.3);\n        i.albedo = i.emissive;\n        i.smoothness = 0.;\n        return d3;\n    }\n    \n    return min(d, min(d2,d3));\n}\n\nvec3 calcNormal(vec3 p)\n{\n    vec2 e = vec2(.001, .0);\n    Hitinfo i;\n    return normalize(\n        vec3(\n            map(p + e.xyy, i) - map(p - e.xyy, i),\n            map(p + e.yxy, i) - map(p - e.yxy, i),\n            map(p + e.yyx, i) - map(p - e.yyx, i)\n        )\n    );\n}\n\nvoid RayIntersect(vec3 ro, vec3 rd, inout Hitinfo info)\n{\n    for(float t = .01; t < 50.0;)\n    {\n        vec3 p = ro + rd * t;\n        float d = map(p, info);\n        if (d < .001)\n        {\n            info.t = t;\n            info.n = calcNormal(p);\n            return;\n        }\n        t += d;\n    }\n}\n\nvec3 GetRayColor(vec3 ro, vec3 rd, inout uint rngState)\n{\n    vec3 col = vec3(0);\n    vec3 throughPut = vec3(1.);\n    vec3 rayOrigin = ro;\n    vec3 rayDirection = rd;\n    for(int rb = 0; rb < 10; ++rb)\n    {\n        Hitinfo i;\n        i.t = -1.0f;\n        RayIntersect(rayOrigin, rayDirection, i);\n        if(i.t < 0.0f)\n        {\n            col += texture(iChannel1, rayDirection).rgb * throughPut * .01;   \n            break;\n        }\n        rayOrigin = rayOrigin + rayDirection * i.t + i.n * .001;\n        vec3 r1 = normalize(i.n + RandomUnitVector(rngState));\n        vec3 r2 = reflect(rayDirection, i.n);\n        rayDirection = mix(r1, r2, i.smoothness);\n        col += i.emissive * throughPut * 1000.;\n        throughPut *= i.albedo;\n    }\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    uint rngState = uint(uint(fragCoord.x) * uint(1973) + uint(fragCoord.y) * uint(9277) + uint(iFrame) * uint(26699)) | uint(1);\n    vec2 uv = (2.0f * fragCoord.xy - iResolution.xy) / iResolution.y;\n    \n    vec3 camOrigin = vec3(0,1,-3);\n    \n    vec3 ro = camOrigin;\n    vec3 rd = normalize(vec3(uv, 2.0f) - vec3(0,.5, .0));\n    vec3 col = GetRayColor(ro, rd, rngState);\n    col = pow(col, vec3(.4545));\n    col /= col + 1.;\n    \n    vec3 lastFrameColor = texture(iChannel0, fragCoord / iResolution.xy).rgb;\n    col = mix(lastFrameColor, col, 1.0f / float(iFrame+1));\n    fragColor = vec4(col, 1.0f);\n    \n}","name":"Buffer A","description":"","type":"buffer"}]}