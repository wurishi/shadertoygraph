{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"/* Compiled with Shaderforth: https://github.com/daeken/Shaderforth\nimport[ distance-2d ]\n\n:globals\n\t@vec3 uniform =iResolution\n\t@float uniform =iTime\n;\n\n:m time iTime ;\n\n: distance ( p:vec2 -> float )\n\t[ time sin time cos ] .01 * =look\n\t[\n\t\tp .6 circle\n\t\tp [ -.2 -.2 ] + .1 time 50 * sin .01 * + circle\n\t\tp [ .2 -.2 ] + .1 time 35 * sin .01 * + circle\n\t\tp [ -.2 -.2 ] look + + .02 time sin .01 * abs + circle\n\t\tp [ .2 -.2 ] look + + .02 circle\n\t\t$[-.25:+.25:.025] /{ ( i )\n\t\t\tp [ i .3 i 4 * cos abs .1 * .1 - time sin * + ] + .1 circle\n\t\t} union\n\t] /abs union\n;\n\niResolution frag->position =p\n\n&distance p gradient =d\n\t\td 150 * abs\n\t\td neg 150 * 0 1 clamp\n\t- abs\n\t0 1\nclamp =val\n\tval [ 0 0 0 ] *\n \t[ 1 1 1 ]\n\tval\nmix ->fragcolor\n*/\n\nfloat distancef(vec2 p) {\n\tvec2 look = vec2(sin(iTime), cos(iTime)) * .01;\n\treturn min(min(min(min(min(abs(length(p) - .6), abs(length(p + vec2(-.2, -.2)) - (.1 + sin(iTime * 50.) * .01))), abs(length(p + vec2(.2, -.2)) - (.1 + sin(iTime * 35.) * .01))), abs(length(p + vec2(-.2, -.2) + look) - (.02 + abs(sin(iTime) * .01)))), abs(length(p + vec2(.2, -.2) + look) - .02)), abs(min(min(min(min(min(min(min(min(min(min(min(min(min(min(min(min(min(min(min(min(length(p + vec2(-.25, .3 + (abs(cos(-1.00)) * .1 - .1) * sin(iTime))) - .1, length(p + vec2(-.225, .3 + (abs(cos(-.900)) * .1 - .1) * sin(iTime))) - .1), length(p + vec2(-.200, .3 + (abs(cos(-.800)) * .1 - .1) * sin(iTime))) - .1), length(p + vec2(-.175, .3 + (abs(cos(-.700)) * .1 - .1) * sin(iTime))) - .1), length(p + vec2(-.150, .3 + (abs(cos(-.600)) * .1 - .1) * sin(iTime))) - .1), length(p + vec2(-.125, .3 + (abs(cos(-.500)) * .1 - .1) * sin(iTime))) - .1), length(p + vec2(-.100, .3 + (abs(cos(-.400)) * .1 - .1) * sin(iTime))) - .1), length(p + vec2(-.075, .3 + (abs(cos(-.300)) * .1 - .1) * sin(iTime))) - .1), length(p + vec2(-.050, .3 + (abs(cos(-.200)) * .1 - .1) * sin(iTime))) - .1), length(p + vec2(-.025, .3 + (abs(cos(-.100)) * .1 - .1) * sin(iTime))) - .1), length(p + vec2(0., .3 + (abs(cos(0.)) * .1 - .1) * sin(iTime))) - .1), length(p + vec2(.025, .3 + (abs(cos(.100)) * .1 - .1) * sin(iTime))) - .1), length(p + vec2(.050, .3 + (abs(cos(.200)) * .1 - .1) * sin(iTime))) - .1), length(p + vec2(.075, .3 + (abs(cos(.300)) * .1 - .1) * sin(iTime))) - .1), length(p + vec2(.100, .3 + (abs(cos(.400)) * .1 - .1) * sin(iTime))) - .1), length(p + vec2(.125, .3 + (abs(cos(.500)) * .1 - .1) * sin(iTime))) - .1), length(p + vec2(.150, .3 + (abs(cos(.600)) * .1 - .1) * sin(iTime))) - .1), length(p + vec2(.175, .3 + (abs(cos(.700)) * .1 - .1) * sin(iTime))) - .1), length(p + vec2(.200, .3 + (abs(cos(.800)) * .1 - .1) * sin(iTime))) - .1), length(p + vec2(.225, .3 + (abs(cos(.900)) * .1 - .1) * sin(iTime))) - .1), length(p + vec2(.250, .3 + (abs(cos(1.000)) * .1 - .1) * sin(iTime))) - .1)));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 p = (fragCoord.xy / iResolution.xy * 2. - 1.) * vec2(iResolution.x / iResolution.y, 1.);\n\tvec2 h = vec2(.00001, 0.);\n\tfloat d = distancef(p) / abs(length(vec2(distancef(p + h) - distancef(p - h), distancef(p + h.yx) - distancef(p - h.yx)) / (2. * h.x)));\n\tfloat val = clamp(abs(abs(d * 150.) - clamp(-d * 150., 0., 1.)), 0., 1.);\n\tfragColor = vec4(mix(val * vec3(0., 0., 0.), vec3(1., 1., 1.), val), 1.);\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MlX3R7","date":"1419909048","viewed":152,"name":"Bad Trip","username":"daeken","description":"Boredom led to making a smiley face.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["shaderforth"],"hasliked":0,"parentid":"","parentname":""}}