{"ver":"0.1","info":{"id":"3lfSDM","date":"1563088302","viewed":1266,"name":"GPU Gems 3 Gaussian blur","username":"andrewmcwatters","description":"A two-pass Gaussian blur as described in \"GPU Gems 3\" Chapter 40, Example 40-1., Ken Turkowski, Adobe Systems, Nvidia.","likes":6,"published":1,"flags":32,"usePreview":1,"tags":["gaussianblur"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// See: https://developer.nvidia.com/gpugems/GPUGems3/gpugems3_ch40.html\nconst float sigma   = 20.0;             // Gaussian sigma\nconst int   support = int(sigma * 3.0); // int(sigma * 3.0) truncation\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 loc   = fragCoord/iResolution.xy;         // center pixel cooordinate\n    vec2 dir   = vec2( 0.0, 1.0 / iResolution.y ); // horiz=(1.0, 0.0), vert=(0.0, 1.0)\n\tvec4 acc   = vec4( 0.0 );                      // accumulator\n\tfloat norm = 0.0;\n\tfor (int i = -support; i <= support; i++) {\n\t\tfloat coeff = exp(-0.5 * float(i) * float(i) / (sigma * sigma));\n\t\tacc += (texture(iChannel0, loc + float(i) * dir)) * coeff;\n\t\tnorm += coeff;\n\t}\n\tacc *= 1.0/norm;                               // normalize for unity gain\n\n    // Output to screen\n    fragColor = acc;\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// See: https://developer.nvidia.com/gpugems/GPUGems3/gpugems3_ch40.html\nconst float sigma   = 20.0;             // Gaussian sigma\nconst int   support = int(sigma * 3.0); // int(sigma * 3.0) truncation\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 loc   = fragCoord/iResolution.xy;         // center pixel cooordinate\n    vec2 dir   = vec2( 1.0 / iResolution.x, 0.0 ); // horiz=(1.0, 0.0), vert=(0.0, 1.0)\n\tvec4 acc   = vec4( 0.0 );                      // accumulator\n\tfloat norm = 0.0;\n\tfor (int i = -support; i <= support; i++) {\n\t\tfloat coeff = exp(-0.5 * float(i) * float(i) / (sigma * sigma));\n\t\tacc += (texture(iChannel0, loc + float(i) * dir)) * coeff;\n\t\tnorm += coeff;\n\t}\n\tacc *= 1.0/norm;                               // normalize for unity gain\n\n    // Output to screen\n    fragColor = acc;\n}\n","name":"Buf A","description":"","type":"buffer"}]}