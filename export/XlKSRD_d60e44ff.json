{"ver":"0.1","info":{"id":"XlKSRD","date":"1483318116","viewed":134,"name":"GR - A Noise Wave","username":"bradleygriffith","description":"noise wave","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["noisewave"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265358\n\n//  `rand` and `noise` taken from \n//  http://thebookofshaders.com/\nfloat rand (in float _x) {\n    return fract(sin(_x)*1e4);\n}\n\nfloat noise (in float _x) {\n    float i = floor(_x);\n    float f = fract(_x);\n    float u = f * f * (3.0 - 2.0 * f);\n    return mix(rand(i), rand(i + 1.0), u);\n}\n\nfloat noiseWave(vec2 uv, float y, float height, float volatility, bool animate) {\n    float x = uv.x;\n    if (animate) {\n    \tx += iTime * 0.25;\n    }\n    \n    // Define wave \n    float variance = (height / 2.0) * -1.0;\n \tvariance += noise(x * PI * volatility) * height;\n    \n    // Adjust y\n    y += variance;\n    \n    return smoothstep(y, y + 0.007, uv.y);\n}\n\nvec4 noiseWaveLine(vec2 uv, float y, float height, float width, float volatility) {\n\t// Define line constraints\n\tfloat h = width / 2.0;\n    float top = y + h;\n    float bottom = y - h;\n    \n    float topWave = noiseWave(uv, top, height, volatility, true);\n    float bottomWave = noiseWave(uv, bottom, height, volatility, true);\n    \n    return vec4(bottomWave - topWave);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float p = 1.0 / iResolution.y; // 1 pixel.\n\t\n    float y = 0.5;\n    if (iMouse.z > 0.0) {\n        y = iMouse.y / iResolution.y;\n    }\n    \n    float height = 100.0 * p; // Normalized by multiplying against p.\n    float width = 2.0 * p; // Normalized by multiplying against p.\n\tfloat volatility = 5.0;\n\n    fragColor = vec4(noiseWaveLine(uv, y, height, width, volatility));\n}","name":"Image","description":"","type":"image"}]}