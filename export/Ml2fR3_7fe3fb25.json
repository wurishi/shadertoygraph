{"ver":"0.1","info":{"id":"Ml2fR3","date":"1516752175","viewed":331,"name":"21/2018","username":"rimina","description":"This shader is part of my daily shader experiment. I continued my path tracing experiments today and I ended up testing all the ways to broke it. Then I accompanied the broken thing with glitches. Just because I can.","likes":6,"published":1,"flags":32,"usePreview":0,"tags":["pathtracing","glitchy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//The glitch method is modified from three.js post processing examples\n//Original version by alteredq\n//https://github.com/mrdoob/three.js/blob/dev/examples/js/postprocessing/GlitchPass.js\n\n#define PI 3.14159265\n\n//Hash method from https://www.shadertoy.com/view/4djSRW\n//#define HASHSCALE1 443.8975\n#define HASHSCALE1 .1031\nfloat hash12(vec2 p){\n\tvec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat randf(){\n    float time = iTime*0.1;\n    return mod(4.0,sin(time*time)+1.0)*0.75;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n    int on = 1;//should we apply the glitch ?\n    float amount = randf()*0.005;\n    float angle = (PI*randf())/(2.0*PI)-PI;\n    float seed = randf();\n    float seed_x = 0.5*randf()-0.5;\n    float seed_y = (0.3*randf()/0.6)-0.3;\n    float distortion_x = randf()*iResolution.x;\n    float distortion_y = randf()*iResolution.y;\n    float col_s = 0.3;\n\n\n    if(on != 0){\n\n        vec2 p = uv;\n        float xs = floor(fragCoord.x / 0.5);\n        float ys = floor(fragCoord.y / 0.5);\n        //based on staffantans glitch shader for unity https://github.com/staffantan/unityglitch\n        vec4 normal = texture(iChannel0, p*seed*seed);\n        if(p.y<distortion_x+col_s && p.y>distortion_x-col_s*seed) {\n            if(seed_x >0.0){\n                p.y = 1. - (p.y + distortion_y);\n            }\n            else {\n                p.y = distortion_y;\n            }\n        }\n        if(p.x<distortion_y+col_s && p.x>distortion_y-col_s*seed) {\n            if(seed_y>0.){\n                p.x=distortion_x;\n            }\n            else {\n                p.x = 1. - (p.x + distortion_x);\n            }\n        }\n        p.x+=normal.x*seed_x*(seed/5.);\n        p.y+=normal.y*seed_y*(seed/5.);\n        //base from RGB shift shader\n        //vec2 offset = amount * vec2( cos(angle), sin(angle));\n        //vec4 cr = texture(iChannel0, p + offset);\n        //vec4 cga = texture(iChannel0, p);\n        //vec4 cb = texture(iChannel0, p - offset);\n        fragColor = texture(iChannel0, p);//vec4(cr.r, cga.g, cb.b, cga.a);\n        //add noise\n        vec4 snow = 200.*amount*vec4(hash12(vec2(xs * seed,ys * seed*50.))*0.2);\n        fragColor = fragColor+ snow;\n    }\n    else {\n        fragColor = texture(iChannel0, uv);\n    }\n    \n        \n     //Vigenting\n    float vigentOffset = 0.005;\n    float darkness = 0.8;\n\tfloat dist = distance(uv, vec2( 0.5 ));\n\tfragColor.rgb *= smoothstep(0.8, vigentOffset * 0.799, dist *( darkness + vigentOffset ));\n    \n    fragColor.rgb = pow(fragColor.rgb, 1.0/vec3(2.2));\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//Simple path tracer. I used Iq's great article as a tutorial for this.\n//https://iquilezles.org/articles/simplepathtracing\n\n#define STEPS 28\n#define FAR 60.0\n#define EPSILON 0.01\n#define PIXELR 0.5/iResolution.x\n#define PI 3.14159265359\n\n#define BOUNCES 12\n#define SAMPLES 1.0\n\n//Hash method from https://www.shadertoy.com/view/4djSRW\n//#define HASHSCALE3 vec3(.1031, .1030, .0973)\n#define HASHSCALE3 vec3(443.897, 441.423, 437.195)\nvec2 hash23(vec3 p3){\n\tp3 = fract(p3 * HASHSCALE3);\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\nvec2 hash21(float p){\n\tvec3 p3 = fract(vec3(p) * HASHSCALE3);\n\tp3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\n//from http://amietia.com/lambertnotangent.html\nvec3 lambertNoTangent(vec3 normal, vec2 uv){\n   float theta = 6.283185 * uv.x;\n   uv.y = 2.0 * uv.y - 1.0;\n   vec3 spherePoint = vec3(sqrt(1.0 - uv.y * uv.y) * vec2(cos(theta), sin(theta)), uv.y);\n   return normalize(normal + spherePoint);\n}\n\n//Distance functions from Mercury's SDF library\n//http://mercury.sexy/hg_sdf/\n\n// Maximum/minumum elements of a vector\nfloat vmax3(vec3 v) {\n\treturn max(max(v.x, v.y), v.z);\n}\n\nfloat fSphere(vec3 p, float r) {\n\treturn length(p) - r;\n}\n\n// Box: correct distance to corners\nfloat fBox(vec3 p, vec3 b) {\n\tvec3 d = abs(p) - b;\n\treturn length(max(d, vec3(0))) + vmax3(min(d, vec3(0)));\n}\n\nvec2 dist(vec3 p){\n    \n    float ball = fSphere(p-vec3(-3.0, -2.5, 0.0), 1.5);\n    float cube = fBox(p-vec3(3.0, -2.0, 0.0), vec3(1.0, 2.0, 2.0));\n    float box = -fBox(p, vec3(8.0, 4.0, 8.0));\n    \n    float scene = min(ball, min(cube,box));\n\n    float id = 0.0;\n    if(ball < cube && ball < box){\n        id = 1.0;\n    }\n    else if(cube < ball && cube < box){\n        id = 2.0;\n    }\n    \n    return vec2(scene, id);\n}\n\nvec3 normals(vec3 p){\n    vec3 eps = vec3(EPSILON, 0.0, 0.0);\n    return normalize(vec3(\n        dist(p+eps.xyy).x-dist(p-eps.xyy).x,\n        dist(p+eps.yxy).x-dist(p-eps.yxy).x,\n        dist(p+eps.yyx).x-dist(p-eps.yyx).x\n    ));\n}\n\n//Enhanced sphere tracing algorithm introduced by Mercury\n\n// Sign function that doesn't return 0\nfloat sgn(float x) {\n\treturn (x < 0.0)?-1.0:1.0;\n}\n\nvec2 march(vec3 ro, vec3 rd){\n    float t = 0.001;//EPSILON;\n    float step = 0.0;\n\n    float omega = 1.0;//muista testata eri arvoilla! [1,2]\n    float prev_radius = 0.0;\n\n    float candidate_t = t;\n    float candidate_error = 1000.0;\n    float sg = sgn(dist(ro).x);\n\n    vec3 p = vec3(0.0);\n\n\tfor(int i = 0; i < STEPS; ++i){\n\t\tp = rd*t+ro;\n\t\tfloat sg_radius = sg*dist(p).x;\n\t\tfloat radius = abs(sg_radius);\n\t\tstep = sg_radius;\n\t\tbool fail = omega > 1. && (radius+prev_radius) < step;\n\t\tif(fail){\n\t\t\tstep -= omega * step;\n\t\t\tomega = 1.;\n\t\t}\n\t\telse{\n\t\t\tstep = sg_radius*omega;\n\t\t}\n\t\tprev_radius = radius;\n\t\tfloat error = radius/t;\n\n\t\tif(!fail && error < candidate_error){\n\t\t\tcandidate_t = t;\n\t\t\tcandidate_error = error;\n\t\t}\n\n\t\tif(!fail && error < PIXELR || t > FAR){\n\t\t\tbreak;\n\t\t}\n\t\tt += step;\n\t}\n    //discontinuity reduction\n    float er = candidate_error;\n    for(int j = 0; j < 6; ++j){\n        float radius = abs(sg*dist(p).x);\n        p += rd*(radius-er);\n        t = length(p-ro);\n        er = radius/t;\n\n        if(er < candidate_error){\n            candidate_t = t;\n            candidate_error = er;\n        }\n    }\n\tif(t <= FAR || candidate_error <= PIXELR){\n\t\tt = candidate_t;\n\t}\n    \n    p = ro+rd*t;\n    float id = dist(p).y;\n    \n\treturn vec2(t, id);\n}\n\nfloat marchShadow(vec3 ro, vec3 rd){\n    float t = 0.0;\n    vec3 p = ro;\n    float s = 1.0;\n    for(int i = 0; i < 32; ++i){\n        float d = dist(p).x;\n        p += rd*d;\n        t += d;\n        \n        if(d < EPSILON){\n            s = 0.0;\n            break;\n        }\n    }\n    return s;\n}\n\nvec3 color(float obj){\n    vec3 base = vec3(0.0);\n    if(obj == 0.0){\n        base = vec3(0.8);\n    }\n    else if(obj == 1.0){\n        base = vec3(0.8, 0.2, 0.6);\n    }\n    else if(obj == 2.0){\n        base = vec3(0.2, 0.6, 0.9);\n    }\n    return base;\n}\n\nvec3 render(vec3 o, vec3 d, vec3 rt, vec2 uv){\n    vec3 ro = o;\n    vec3 rd = d;\n    \n    vec3 tcol = vec3(0.0);\n    vec3 fcol = vec3(1.0);\n    \n    vec3 ld = normalize(rt-o);\n    \n    for(int i = 0; i < BOUNCES; ++i){\n        vec2 t = march(ro, rd);\n        vec3 p = ro+rd*t.x;\n        if(t.y < 0.0 || t.x > FAR){\n            tcol = vec3(0.0);\n            break;\n        }\n        \n        vec3 n = normals(p);\n        \n        vec3 scol = color(t.y);\n        vec3 dcol = vec3(0.8)+max(dot(n, ld), 0.0);\n        dcol *= (marchShadow(p+n*0.02, ld)+vec3(0.0, 0.0, 0.03));\n        \n        fcol *= scol;\n        tcol += fcol * dcol;\n        \n        ro = p+(n*0.02);\n        rd = lambertNoTangent(n, hash21(float(i)));\n    }\n    \n    return tcol;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 q = -1.0+2.0*uv;\n    q.x *= iResolution.x/iResolution.y;\n\n    vec3 ro = vec3(6.0*cos(iTime*0.1), 1.0+sin(iTime*0.05), 6.0*sin(iTime*0.15));\n    vec3 rt = vec3(0.0, -0.5, 0.0);\n    \n    vec3 z = normalize(rt-ro);\n    vec3 x = normalize(cross(z, vec3(0.0, 1.0, 0.0)));\n    vec3 y = normalize(cross(x, z));\n    vec3 color = vec3(0.0);\n    \n    for(float i = 0.0; i < SAMPLES; ++i){\n    \tvec3 rd = normalize(mat3(x, y, z)*vec3(q, radians(60.0)));\n    \tcolor += render(ro, rd, rt, uv);\n    }\n    color /= SAMPLES;\n    color = smoothstep(0.1, 0.8, color);\n\n\tfragColor = vec4(color, 1.0);\n}","name":"Buf A","description":"","type":"buffer"}]}