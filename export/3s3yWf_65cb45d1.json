{"ver":"0.1","info":{"id":"3s3yWf","date":"1601837191","viewed":218,"name":"Metaballs oldschool","username":"GCScholar","description":"Metaballs old school effect. \n\n(Not too sure that this is the way it was achieved back in the days :/ )","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["oldschool","metaballs","metaball","meta","blob","ball","old","school","metablob"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float drawCircle(vec2 U, vec2 P, float r) \n{\t\n\treturn smoothstep(0.0, length(U - P), r);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 U = (2.0*fragCoord - iResolution.xy)/iResolution.y;\n    \n    \n    vec2 pos[10];\n    float r[10];\n    \n    float a, b, A, B, delta; // Lissajous parameters\n    \n    float t = iTime/2.;\n    for(int i=2; i<10; i++)\n    {\n        float s = 1.0/(mod(float(i),5.)*3.0);\n        a = float(i+2); b = float(i+1); A = 1.1*(sin(t))+0.5; B = 0.6*(cos(t))+0.5; delta = PI/2.0;\n        \n    \tpos[i] = vec2(A*sin(a*t*s+delta), B*cos(b*t*s)); \t\n    \tr[i] = 0.5*s;\n        \n        fragColor += vec4(drawCircle(U, pos[i], r[i]));\n    }\n    \n    fragColor = min(fragColor, 0.8);\n    fragColor = smoothstep(0.3, 0.4, fragColor);\n\n    vec3 col = vec3(abs(sin(iTime)), 1.0, 0.5);\n    //col = hsl2rgb(col);\n    fragColor *= 0.9*vec4(col,1.0);\n    \n    // Apply gamma correction\n    fragColor = vec4(pow(fragColor.xyz, vec3(0.4545)),1.0);  \n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define PI 3.14\n\n// Random numbers, tnx https://www.shadertoy.com/view/MsKGWz\nfloat random(vec2 p)\n{\n    vec2 r = vec2(\n        23.14069263277926, \n         2.665144142690225 \n    );\n    return fract(cos(mod(12345678.0, 256.0*dot(p,r))));\n}\n  \n// HSL <-> RGB color conversion, tnx https://www.shadertoy.com/view/XljGzV\nvec3 hsl2rgb( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n    return c.z + c.y * (rgb-0.5)*(1.0-abs(2.0*c.z-1.0));\n}\n\nvec3 rgb2hsl( in vec3 c ){\n  float h = 0.0;\n\tfloat s = 0.0;\n\tfloat l = 0.0;\n\tfloat r = c.r;\n\tfloat g = c.g;\n\tfloat b = c.b;\n\tfloat cMin = min( r, min( g, b ) );\n\tfloat cMax = max( r, max( g, b ) );\n\n\tl = ( cMax + cMin ) / 2.0;\n\tif ( cMax > cMin ) {\n\t\tfloat cDelta = cMax - cMin;\n        \n        //s = l < .05 ? cDelta / ( cMax + cMin ) : cDelta / ( 2.0 - ( cMax + cMin ) ); Original\n\t\ts = l < .0 ? cDelta / ( cMax + cMin ) : cDelta / ( 2.0 - ( cMax + cMin ) );\n        \n\t\tif ( r == cMax ) {\n\t\t\th = ( g - b ) / cDelta;\n\t\t} else if ( g == cMax ) {\n\t\t\th = 2.0 + ( b - r ) / cDelta;\n\t\t} else {\n\t\t\th = 4.0 + ( r - g ) / cDelta;\n\t\t}\n\n\t\tif ( h < 0.0) {\n\t\t\th += 6.0;\n\t\t}\n\t\th = h / 6.0;\n\t}\n\treturn vec3( h, s, l );\n}","name":"Common","description":"","type":"common"}]}