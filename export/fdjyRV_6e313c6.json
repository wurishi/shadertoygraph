{"ver":"0.1","info":{"id":"fdjyRV","date":"1643799603","viewed":651,"name":"paint with swirls ( div free )","username":"FabriceNeyret2","description":"paint with mouse. click and drag, or just click.\nSwirl paint preserves the volume everywhere ( divergence free ).\n\nnote that the distortion is done on the uv field.  \nTextures or curves are mapped on  the field afterward.","likes":41,"published":3,"flags":32,"usePreview":0,"tags":["swirl","distortion","vortex","uvmap","vorticity","divergencefree","viamapping"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// === applies the uv field to a texture =================\n\n//#define fwidth(v) length(vec2(dFdx(v),dFdy(v)))\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    u = T(u).xy;                    // distorted uv field\n    O = texture( iChannel1, u );    // apply map\n    \n    float v = length(u-.5);         // apply circle\n    O = mix( O, vec4(1,0,0,0), smoothstep( 1.5, 0.,  abs(v-.3)/fwidth(v) ) );\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// === distort the uv field ====================\n\n#define ortho(D)   vec2( -(D).y, (D).x )              // vec ortho to D\n#define S(D)       ortho(D) / max( dot(D,D) , 1e-3 )  // irrotational swirl\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    O = T(u);                                         // previous state\n    if ( u== vec2(.5) )                               // previous mouse pos\n      { if ( T(0).xy != iMouse.xy ) O = vec4(iMouse.xy,T(0).xy); return; } \n      \n    vec2 U = u / R.y,\n         M = iMouse.xy / R.y,\n         d = .1* normalize( ortho( iMouse.xy - T(0).zw +1e-5 )), // swirl pair axis\n         V = S(U-M+d) - S(U-M-d);                     // swirl pair irrotational field\n\n    if (iMouse.z > 0.)                                // if click, swirl\n        O = texture( iChannel0, ( U + .1*V/60. ) *R.y/R );\n    \n    if ( iFrame < 1 ) O = vec4(u/R,0,0);              // init uv field\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define R      iResolution.xy\n#define T(U)   texelFetch( iChannel0, ivec2(U), 0 )","name":"Common","description":"","type":"common"}]}