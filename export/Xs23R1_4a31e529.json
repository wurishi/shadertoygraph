{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"/* created by okanovic dragan (abstract algorithm) */\n\n#define time iTime\n//#define SHADING\t// turn shading on/off\n//#define SHADOWS\t// turn shadows on/off, works only if shading is enabled\n\n//----------------------------------------------------------------------\nfloat sdSphere( vec3 p, float s ) {\n  return length(p)-s;\n}\nfloat sdPlane( vec3 p ) {\n    return p.y;\n}\nfloat sdCube( vec3 p, float a ) {\n  return length(max(abs(p) - vec3(a),0.0));\n}\nfloat opU( float d1, float d2 ) {\n    return (d1<d2) ? d1 : d2;\n}\nfloat smin( float a, float b) {\n    float k=3.1;\n    float res = exp( -k*a ) + exp( -k*b );\n    return -log( res )/k;\n    k = 0.9;\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\nfloat rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\nfloat map( in vec3 pos ) {\n#define REPEAT 4.\n\tfloat r = rand(vec2(ceil(.2*pos.x), ceil(.2*pos.z)));\n    pos.x = mod(pos.x, REPEAT) - .5*REPEAT;\n    pos.z = mod(pos.z, REPEAT) - .5*REPEAT;\n    return opU( smin( sdPlane(pos), sdCube(pos-vec3( 0.0, 0.5, 0.0), 0.5 ) ),\n\t\t\t    sdSphere(pos-vec3(0,cos(40.*r+3.*time)*.5+2.5,0.), .5));\n}\n//----------------------------------------------------------------------\nvec2 castRay( in vec3 ro, in vec3 rd, in float maxd ) {\n    float precis = 0.001;   // when to call a hit\n    float h=precis*2.0;     // how much to move along the ray\n    float t = 0.0;          // moved already\n    vec2 m = vec2(-1.0);    // color/uv, depends on use, here - uv\n    vec3 pos = vec3(0.0);   // 3d position\n    float mf = 0.0;\n    for( int i=0; i<60; i++ )\n    {\n        if( abs(h)<precis||t>maxd ) continue;  // voila\n        t += h;                 //  move\n        pos = ro+rd*t;          // update current 3d position\n        h = map( pos );         // get de\n        mf += 1.;\n    }\n    \n    // it was a good day :)\n    return vec2( t, mf );\n}\n#ifdef SHADING\n#ifdef SHADOW\n// approximate shadow :: https://iquilezles.org/articles/rmshadows\nfloat softshadow( in vec3 ro, in vec3 rd, in float mint, in float maxt, in float k )\n{\n    float res = 1.0;\n    float t = mint;\n    for( int i=0; i<60; i++ )\n    {\n        if( t<maxt )\n        {\n            float h = map( ro + rd*t );\n            res = min( res, k*h/t );\n            t += 0.02;\n        }\n    }\n    return clamp( res, 0.0, 1.0 );\n}\n#endif\n\n\n// approximate normal :: http://code4k.blogspot.com/2009/10/potatro-and-raymarching-story-of.html\nvec3 calcNormal( in vec3 pos )\n{\n    vec3 eps = vec3( 0.001, 0.0, 0.0 );\n    vec3 nor = vec3(\n        map(pos+eps.xyy) - map(pos-eps.xyy),\n        map(pos+eps.yxy) - map(pos-eps.yxy),\n        map(pos+eps.yyx) - map(pos-eps.yyx) );\n    return normalize(nor);\n}\n// ambient occlussion\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n    float totao = 0.0;\n    float sca = 1.0;\n    for( int aoi=0; aoi<5; aoi++ )\n    {\n        float hr = 0.01 + 0.05*float(aoi);\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos );\n        totao += -(dd-hr)*sca;\n        sca *= 0.75;\n    }\n    return clamp( 1.0 - 4.0*totao, 0.0, 1.0 );\n}\n#endif\n// brdf thingy\nvec3 render( in vec3 ro, in vec3 rd )\n{ \n    vec3 col = vec3(0.0);\n    vec2 res = castRay(ro,rd,20.0);\n    float t = res.x;\n    float mf = res.y;\n    vec3 pos = ro + t*rd;\n#ifdef SHADING\n    vec3 nor = calcNormal( pos );\n    float ao = calcAO( pos, nor );\n#endif\n    //col = step(t, 20.)*vec3(1., (60.-mf)/60., 0.);\n\tcol = step(t, 20.)*vec3((mf)/60.);\n\n#ifdef SHADING\n    vec3 lig = normalize( vec3(-0.6, 0.7, -0.5) );  // light direction (0., 1., 0.)\n    float amb = clamp( 0.5+0.5*nor.y, 0.0, 1.0 );\n    float dif = clamp( dot( nor, lig ), 0.0, 1.0 );\n    float bac = clamp( dot( nor, normalize(vec3(-lig.x,0.0,-lig.z))), 0.0, 1.0 )*clamp( 1.0-pos.y,0.0,1.0);\n\n    float sh = 1.0;\n\n#ifdef SHADOWS\n    if( dif>0.02 ) { sh = softshadow( pos, lig, 0.02, 10.0, 7.0 ); dif *= sh; }\n#endif\n\n    vec3 brdf = vec3(0.0);\n    brdf += 0.20*amb*vec3(0.10,0.11,0.13)*ao;\n    brdf += 0.20*bac*vec3(0.15,0.15,0.15)*ao;\n    brdf += 1.20*dif*vec3(1.00,0.90,0.70);\n\n    float pp = clamp( dot( reflect(rd,nor), lig ), 0.0, 1.0 );\n    float spe = sh*pow(pp,16.0);\n    float fre = ao*pow( clamp(1.0+dot(nor,rd),0.0,1.0), 2.0 );\n\n    col = col*brdf + /*vec3(1.0)*col*spe +*/ 0.2*fre*(0.5+0.5*col);\n#endif\n\n    col *= exp( -0.01*t*t );\n\n    return vec3( clamp(col,0.0,1.0) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 q = fragCoord.xy/iResolution.xy;\n    vec2 p = -1.0+2.0*q;\n    p.x *= iResolution.x/iResolution.y;\n    \n    float time = 5.0 + 4.*iTime + 20.0*iMouse.x/iResolution.x;\n\n    // camera   \n    vec3 ro = vec3( 7.*cos(0.2*time),\n                    1.3,\n                    7.*sin(0.2*time) );     // camera position aka ray origin\n\n    vec3 ta = vec3( 0.0, 1.2, 0.0 );        // camera look-at position\n    \n    // camera tx\n    vec3 eye = normalize( ta-ro );                      // eye vector\n    vec3 cp = vec3( 0.0, 1.0, 0.0 );                    // \"up\" vector\n    vec3 hor = normalize( cross(eye, cp) );             // horizontal vector\n    vec3 up = normalize( cross(hor, eye) );             // up vector\n    vec3 rd = normalize( p.x*hor + p.y*up + 2.5*eye );  // ray direction\n    \n    // main thing\n    vec3 col = sqrt(render( ro, rd ));\n    \n    // vignette\n    col *= 0.2 + 0.8*pow( 16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.1 );\n\n    // ta-da!\n    fragColor=vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"Xs23R1","date":"1392563239","viewed":221,"name":"Other world","username":"Abstract_Algorithm","description":"more white - more raymarching steps<br>\nmore black - less steps","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["distancefield","counter"],"hasliked":0,"parentid":"","parentname":""}}