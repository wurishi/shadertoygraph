{"ver":"0.1","info":{"id":"sttSDB","date":"1639735468","viewed":301,"name":"nahkd's Bloom Effect","username":"nahkd123","description":"Shader that applies bloom effect. Colors are encoded using tanh() function and decoded with atanh() function. Values that's larger than 1 will gives bloom effect","likes":5,"published":3,"flags":32,"usePreview":0,"tags":["postprocessing","bloom"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Post processing\n// Set the speed to something lower to increase quality\n#define SPEED 6\n\nvec4 emitAt(vec2 uv) {\n    vec4 channelColor = clamp(atanh(texture(iChannel0, uv)), 0.0, 3.0);\n    vec4 baseColor = clamp(channelColor, 0.0, 1.0);\n    return channelColor - baseColor * 0.87;\n}\n\nvec4 blurH(vec2 fragCoord, int radiusPx) {\n    float mul = 1. / float(radiusPx);\n    vec4 result = emitAt(fragCoord/iResolution.xy) * mul;\n    for (int i = 1; i < radiusPx; i += SPEED) {\n        result += emitAt((fragCoord + vec2(i, 0))/iResolution.xy) * mul * float(SPEED) * 0.5;\n        result += emitAt((fragCoord + vec2(-i, 0))/iResolution.xy) * mul * float(SPEED) * 0.5;\n    }\n    return result;\n}\nvec4 blurAll(vec2 fragCoord, int radiusPx) {\n    float mul = 1. / float(radiusPx);\n    vec4 result = blurH(fragCoord, radiusPx) * mul;\n    for (int i = 1; i < radiusPx; i += SPEED) {\n        result += blurH(fragCoord + vec2(0, i), radiusPx) * mul * float(SPEED) * 0.5;\n        result += blurH(fragCoord + vec2(0, -i), radiusPx) * mul * float(SPEED) * 0.5;\n    }\n    return result;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 channelColor = clamp(atanh(texture(iChannel0, uv)), 0.0, 2.0);\n    vec4 baseColor = clamp(channelColor, 0.0, 1.0);\n    \n    fragColor = baseColor + blurAll(fragCoord, 50);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec4 pixelAt(vec2 uv) {\n    vec4 color = texture(iChannel0, uv);\n    \n    // Sliding window\n    float p = (cos(iTime) + 1.0) / 2.0;\n    if (p >= uv.x - 0.02 && p <= uv.x + 0.02) return vec4(0);\n    else if (p <= uv.x) return color;\n\n    if (uv.y > 0.97) return vec4(1, 0, 0, 1);\n    if (color.r > 0.8 || color.g > 0.8 || color.b > 0.8) return color * 20.0;\n    return color;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    fragColor = tanh(pixelAt(uv));\n}\n","name":"Buffer A","description":"","type":"buffer"}]}