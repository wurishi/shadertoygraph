{"ver":"0.1","info":{"id":"4ftyDN","date":"1730675155","viewed":74,"name":"Temporal pixel dither v1","username":"Cotterzz","description":"Tracks the RGB channels of each pixel over time and assign one of the limited palette colours, so the average RGB output is the same\nLeft is temporal only, right is spatial and temporal\nClick to round up and prevent near white/black flashing.","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["dithering","8colourpalette"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainB1(out vec4 color, in vec2 coord) {\n    vec4 colA = texture(iChannel0, coord/iResolution.xy);\n    vec4 colB = texelFetch(iChannel1, ivec2(coord), 0);\n    if(iMouse.z>0.){\n        colA = thresh(colA);\n    }\n    vec3 colx = colA.rgb+colB.rgb;\n    if(colx.r>=1.){color.r = 1.0;} else {color.r = 0.;}\n    if(colx.g>=1.){color.g = 1.0;} else {color.g = 0.;}\n    if(colx.b>=1.){color.b = 1.0;} else {color.b = 0.;}\n}\n\nvoid mainB2(out vec4 color, in vec2 coord) {\n    bool xodd = true; if (mod(coord.x, 2.) < 1.){xodd = false;}\n    bool yodd = true; if (mod(coord.y, 2.) < 1.){yodd = false;}\n    vec2 coords[4];\n    int current = 0;\n    coords[0] = coord;\n    coords[1] = coord;\n    coords[2] = coord;\n    coords[3] = coord;\n    if(yodd&&xodd){\n        coords[1].x += 1.;\n        coords[2].x += 1.;\n        coords[2].y += 1.;\n        coords[3].y += 1.;\n    } else if(yodd){\n        current = 1;\n        coords[0].x -= 1.;\n        coords[2].y += 1.;\n        coords[3].y += 1.;\n        coords[3].x -= 1.;\n    } else if(xodd){\n        current = 3;\n        coords[0].y -= 1.;\n        coords[1].y -= 1.;\n        coords[1].x += 1.;\n        coords[2].x += 1.;\n    } else {\n        current = 2;\n        coords[0].y -= 1.;\n        coords[0].x -= 1.;\n        coords[1].y -= 1.;\n        coords[3].x -= 1.;\n    }\n    vec4 cols[4];\n    cols[0] = texture(iChannel0, coords[0]/iResolution.xy);\n    cols[1] = texture(iChannel0, coords[1]/iResolution.xy);\n    cols[2] = texture(iChannel0, coords[2]/iResolution.xy);\n    cols[3] = texture(iChannel0, coords[3]/iResolution.xy);\n    \n    if(iMouse.z>0.){\n        cols[0] = thresh(cols[0]);\n        cols[1] = thresh(cols[1]);\n        cols[2] = thresh(cols[2]);\n        cols[3] = thresh(cols[3]);\n    }\n\n    vec4 colB = texelFetch(iChannel1, ivec2(coords[current]), 0);\n    \n    vec4 outputs[4];\n    \n    outputs[0] = getunits(cols[0]+colB);\n    outputs[1] = getunits(cols[1]+getrem(cols[0]+colB));\n    outputs[2] = getunits(cols[2]+getrem(cols[1]+getrem(cols[0]+colB)));\n    outputs[3] = getunits(cols[3]+getrem(cols[2]+getrem(cols[1]+getrem(cols[0]+colB))));\n    \n    color = outputs[current];\n    color.a = 1.;\n\n}\n\nvoid mainImage(out vec4 color, in vec2 coord) {\n    if(coord.x<iResolution.x/2.){\n        mainB1(color, coord);\n    }else{\n        mainB2(color, coord);\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainA1(out vec4 color, in vec2 coord) {    \n    vec4 colA = texture(iChannel0, coord/iResolution.xy);\n    vec4 colB = texelFetch(iChannel1, ivec2(coord), 0);\n    if(iMouse.z>0.){\n        colA = thresh(colA);\n    }\n    vec3 colx = colA.rgb+colB.rgb;\n    color.r = mod(colx.r, 1.);\n    color.b = mod(colx.b, 1.);\n    color.g = mod(colx.g, 1.);\n}\n\nvoid mainA2(out vec4 color, in vec2 coord) {\n    bool xodd = true; if (mod(coord.x, 2.) < 1.){xodd = false;}\n    bool yodd = true; if (mod(coord.y, 2.) < 1.){yodd = false;}\n    vec2 coords[4];\n    int current = 0;\n    coords[0] = coord;\n    coords[1] = coord;\n    coords[2] = coord;\n    coords[3] = coord;\n    if(yodd&&xodd){\n        coords[1].x += 1.;\n        coords[2].x += 1.;\n        coords[2].y += 1.;\n        coords[3].y += 1.;\n    } else if(yodd){\n        current = 1;\n        coords[0].x -= 1.;\n        coords[2].y += 1.;\n        coords[3].y += 1.;\n        coords[3].x -= 1.;\n    } else if(xodd){\n        current = 3;\n        coords[0].y -= 1.;\n        coords[1].y -= 1.;\n        coords[1].x += 1.;\n        coords[2].x += 1.;\n    } else {\n        current = 2;\n        coords[0].y -= 1.;\n        coords[0].x -= 1.;\n        coords[1].y -= 1.;\n        coords[3].x -= 1.;\n    }\n    vec4 cols[4];\n    cols[0] = texture(iChannel0, coords[0]/iResolution.xy);\n    cols[1] = texture(iChannel0, coords[1]/iResolution.xy);\n    cols[2] = texture(iChannel0, coords[2]/iResolution.xy);\n    cols[3] = texture(iChannel0, coords[3]/iResolution.xy);\n    \n    if(iMouse.z>0.){\n        cols[0] = thresh(cols[0]);\n        cols[1] = thresh(cols[1]);\n        cols[2] = thresh(cols[2]);\n        cols[3] = thresh(cols[3]);\n    }\n    \n    vec4 colB = texelFetch(iChannel1, ivec2(coords[current]), 0);\n    \n    vec4 outputs[4];\n    \n    outputs[0] = getunits(cols[0]+colB);\n    outputs[1] = getunits(cols[1]+getrem(cols[0]+colB));\n    outputs[2] = getunits(cols[2]+getrem(cols[1]+getrem(cols[0]+colB)));\n    outputs[3] = getunits(cols[3]+getrem(cols[2]+getrem(cols[1]+getrem(cols[0]+colB))));\n    \n    color = getrem(cols[3]+getrem(cols[2]+getrem(cols[1]+getrem(cols[0]+colB))));\n\n    color.a=1.;\n}\n\nvoid mainImage(out vec4 color, in vec2 coord) {\n    if(coord.x<iResolution.x/2.){\n        mainA1(color, coord);\n    }else{\n        mainA2(color, coord);\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"vec4 thresh(in vec4 col){\n        float t = 0.07;\n        float tu = 0.92;\n        if(col.r<t&&col.g<t&&col.b<t){col=vec4(0.,0.,0.,1.);}\n        if(col.r>tu&&col.g>tu&&col.b>tu){col=vec4(1.,1.,1.,1.);}\n        return col;\n}\n\nvec4 getunits(in vec4 col){\n    vec4 ocol = vec4(1.);\n    if(col.r>=1.){ocol.r = 1.0;} else {ocol.r = 0.;}\n    if(col.g>=1.){ocol.g = 1.0;} else {ocol.g = 0.;}\n    if(col.b>=1.){ocol.b = 1.0;} else {ocol.b = 0.;}\n    return ocol;\n}\n\nvec4 getrem(in vec4 col){\n    vec4 ocol = vec4(1.);\n    ocol.r = mod(col.r, 1.);\n    ocol.b = mod(col.b, 1.);\n    ocol.g = mod(col.g, 1.);\n    return ocol;\n}","name":"Common","description":"","type":"common"}]}