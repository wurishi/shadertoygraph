{"ver":"0.1","info":{"id":"WdlyR4","date":"1584996118","viewed":241,"name":"State example","username":"beyond","description":"Testbed for a shader state. Not meant to be nice candy gfx.\n\nBuffer A initializes itself on frame#0, otherwise it runs N-body on itself\nImage takes particles from Buffer A and renders them.\n\nMouse down shows velocity vector as well.","likes":6,"published":1,"flags":32,"usePreview":0,"tags":["state","nbody"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 getParticle(int i)\n{\n    // read from myself\n    return texelFetch(iChannel0, ivec2(i, 0), 0);\n}\n\nvec3 getColor(float t)\n{\n    float r = (sin(t*2.0+3.0)+1.0)/2.0;\n    float g = (cos(t*7.0)+1.0)/2.0;\n    float b = 1.0-(r+g)/2.0;\n    return 0.7*vec3(r,g,b);\n}\n\nfloat distanceLine(vec2 a, vec2 b, vec2 p)\n{\n    vec2 AB = b-a;\n    vec2 AP = p-a;\n    float proj = dot(AB,AP)/dot(AB,AB);\n    if (proj>=0. && proj<=1.)\n    {\n        vec2 pm = a+proj*AB;\n        return length(p-pm);\n    }\n    return min( length(p-a), length(p-b));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    //   and centered at origin\n    vec2 uv = fragCoord/iResolution.xy - vec2(0.5,0.5);\n    // Aspect ratio\n    uv.y *= iResolution.y/iResolution.x;\n\n    uv.xy *= 30.0; // zoom out\n\n    vec3 color = vec3(0.0,0.0,0.0);\n    float mind = 1000.;\n    int closei = 0;\n    float velocityColor = 0.;\n\tfor(int i=0; i<NOPARTICLES; i++)\n    {\n        float k = 1.+float(i);\n        float mass = 1. + 1./(k*k);\n        \n        vec2 p = getParticle(i).xy;\n        vec2 v = getParticle(i).zw;\n        float d = distance(uv,p);\n        if (d<mind) { mind = d; closei = i; }\n        if (d<0.15*mass) color += getColor(float(i));\n        if (distanceLine(p, p+v*1., uv)<0.02)\n            velocityColor = 0.05;\n    }\n    if (iMouse.z>0.) {\n        // voronoi color\n        color += 0.55*getColor(float(closei))/(1.f+mind);\n        color += vec3(1,1,1)*velocityColor;\n    }\n    \n    // Output to screen\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec4 getParticle(int i)\n{\n    // read from the buffer\n    return texelFetch(iChannel0, ivec2(i, 0), 0);\n}\n\nfloat rand(vec2 co){\n    float realRandom = iDate.w;\n    return fract(sin(realRandom+dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453) -0.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // only use the first n entries in the buffer\n    if (fragCoord.x < float(NOPARTICLES))\n    {\n        // initilize on the first frame\n    \tif (iFrame==0)\n        {\n            float dist = 5.+4.*rand(fragCoord.yx);\n            float angle = 2.*3.1415926*rand(fragCoord.xy);\n            vec2 pos = dist*vec2(cos(angle),sin(angle));\n            fragColor = vec4(pos, vec2(0,0));                                                     \n        }\n        else\n        {\n            // Simulate the n bodies\n            //   Using s = s0 + v0*t + 0.5*a*t^2\n            int index = int(fragCoord.x);\n            \n            vec4 p = getParticle(index);\n            vec2 a = vec2(0.0,0.0);\n         \tfor (int i=0; i<NOPARTICLES; i++)\n            {\n                float k = 1.+float(i);\n                float mass = 1. + 10./(k*k);\n                if (i==index) continue; // ignore \"yourself\"\n                vec2 p2 = getParticle(i).xy;\n                vec2 d = p2-p.xy;\n                float dist2 = d.x*d.x+d.y*d.y;\n                a += mass*normalize(d)/(1.0+dist2); // don't blow up\n            }\n\n            // new position is calculated as\n            //   new velocity = velocity + acelleration*dt/2\n            //   new position = position + velocity*dt\n            p.zw += 0.5*a*iTimeDelta; // velocity update\n            p.xy += p.zw*iTimeDelta;  // position update\n            fragColor=p;\n        }\n    }\n    else fragColor = vec4(0.0,0.0,0.0,0.0);\n    // out fragColor is written into buffer A\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"// State Example\n// By Theo Engell - 2020\n// \n// Tiny example of how to setup an iterative state.\n// \"Buffer A\" runs first, doing the setup and simulation\n// \"Image\" runs second, visualisation of the particles\n//\n// Buffer A \n//   Sets up the particles on frame#0\n//   Simulates N body otherwise, reading from itself\n//   Buffer is setup as\n//     .xy - particle position\n//     .zw - particle velocity\n//\n// Image\n//   Draws all the particles from Buffer A in a simple loop\n//   Position is taken from Buffer A's xy\n//   Color is generated from index in buffer\n\n\n// Since we're all lazy coders we like to have \n//   one define only.\n#define NOPARTICLES 50","name":"Common","description":"","type":"common"}]}