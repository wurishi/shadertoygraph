{"ver":"0.1","info":{"id":"WdtcRM","date":"1601171022","viewed":243,"name":"Roag's Glossy Pathtracer","username":"ROAG99","description":"Following tutorial here: https://blog.demofox.org/2020/06/06/casual-shadertoy-path-tracing-2-image-improvement-and-glossy-reflections/\n\nHere we implement AA, sRGB, Tone Mapping, Exposure, Glossy Reflections.","likes":7,"published":1,"flags":48,"usePreview":0,"tags":["pathtracing","glossyreflections"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float c_exposure = 1.0f;\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec3 color = texture(iChannel0, fragCoord / iResolution.xy).rgb;\n    \n    // apply exposure (how long the shutter is open)\n    color *= c_exposure;\n    \n    // convert unbounded HDR colour range to SDR colour range\n    color = ACESFilm(color);\n    \n    // convert from linear to sRGB for display\n    color = LinearToSRGB(color);\n    \n    fragColor = vec4(color, 1.0f);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","previewfilepath":"/media/ap/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"struct hit\n{\n \tfloat dist;\n    vec3 normal;\n};\n    \n// The minimum distance a ray must travel before we consider an intersection\n// this is to prevent a ray from intersecting a surface it just bounced off of.\nconst float c_minimumRayHitTime = 0.1f;\n\n// the farthest we look for ray hits\nconst float c_superFar = 10000.0f;\nconst float c_FOVDegrees = 90.0f;\n// after a hit, it moves the ray this far along the normal away from the surface.\n// Helps precent incorrect intersections when rays bounec off of objects.\nconst float c_rayPosNormalNudge = 0.01f;\nconst int c_numBounces = 8;\nconst float c_pi = 3.14159f;\nconst float c_twopi = 2.0f * c_pi;\n\nstruct SMaterialInfo\n{\n    vec3 albedo;\n    vec3 emissive;\n    float percentageSpecular;\n    float roughness;\n    vec3 reflectionColor;\n};\n        \nstruct SRayHitInfo\n{\n    float dist;\n    vec3 normal;\n    SMaterialInfo material;    \n};\n    \nfloat ScalarTriple(vec3 u, vec3 v, vec3 w)\n{\n    return dot(cross(u,v), w);\n}\n\nuint wang_hash(inout uint seed)\n{\n    seed = uint(seed ^ uint(61)) ^ uint(seed >> uint(16));\n    seed *= uint(9);\n    seed = seed ^ (seed >> uint(4));\n    seed *= uint(0x27d4eb2d);\n    seed = seed ^ (seed >> 15);\n    return seed;\n}\n\nfloat RandomFloat01(inout uint state)\n{\n    return float(wang_hash(state)) / 4294967296.0;\n}\n\nvec3 RandomUnitVector(inout uint state)\n{\n    float z = RandomFloat01(state) * 2.0f - 1.0f;\n    float a = RandomFloat01(state) * c_twopi;\n    float r = sqrt(1.0f - z * z);\n    float x = r * cos(a);\n    float y = r * sin(a);\n    return vec3(x, y, z);\n}\n\nbool TestQuadTrace(in vec3 rayPos, in vec3 rayDir, inout SRayHitInfo info, in vec3 a, in vec3 b, in vec3 c, in vec3 d)\n{\n    // calculate normal and flip vertices order if needed\n    vec3 normal = normalize(cross(c-a, c-b));\n    if (dot(normal, rayDir) > 0.0f)\n    {\n        normal *= -1.0f;\n        \n\t\tvec3 temp = d;\n        d = a;\n        a = temp;\n        \n        temp = b;\n        b = c;\n        c = temp;\n    }\n    \n    vec3 p = rayPos;\n    vec3 q = rayPos + rayDir;\n    vec3 pq = q - p;\n    vec3 pa = a - p;\n    vec3 pb = b - p;\n    vec3 pc = c - p;\n    \n    // determine which triangle to test against by testing against diagonal first\n    vec3 m = cross(pc, pq);\n    float v = dot(pa, m);\n    vec3 intersectPos;\n    if (v >= 0.0f)\n    {\n        // test against triangle a,b,c\n        float u = -dot(pb, m);\n        if (u < 0.0f) return false;\n        float w = ScalarTriple(pq, pb, pa);\n        if (w < 0.0f) return false;\n        float denom = 1.0f / (u+v+w);\n        u*=denom;\n        v*=denom;\n        w*=denom;\n        intersectPos = u*a+v*b+w*c;\n    }\n    else\n    {\n        vec3 pd = d - p;\n        float u = dot(pd, m);\n        if (u < 0.0f) return false;\n        float w = ScalarTriple(pq, pa, pd);\n        if (w < 0.0f) return false;\n        v = -v;\n        float denom = 1.0f / (u+v+w);\n        u*=denom;\n        v*=denom;\n        w*=denom;\n        intersectPos = u*a+v*d+w*c;\n    }\n    \n    float dist;\n    if (abs(rayDir.x) > 0.1f)\n    {\n        dist = (intersectPos.x - rayPos.x) / rayDir.x;\n    }\n    else if (abs(rayDir.y) > 0.1f)\n    {\n        dist = (intersectPos.y - rayPos.y) / rayDir.y;\n    }\n    else\n    {\n        dist = (intersectPos.z - rayPos.z) / rayDir.z;\n    }\n    \n\tif (dist > c_minimumRayHitTime && dist < info.dist)\n    {\n        info.dist = dist;        \n        info.normal = normal;        \n        return true;\n    }    \n    \n    return false;\n}\n\n\nbool TestSphereTrace(in vec3 rayPos, in vec3 rayDir, inout SRayHitInfo info, in vec4 sphere)\n{\n\t//get the vector from the center of this sphere to where the ray begins.\n\tvec3 m = rayPos - sphere.xyz;\n\n    //get the dot product of the above vector and the ray's vector\n\tfloat b = dot(m, rayDir);\n\n\tfloat c = dot(m, m) - sphere.w * sphere.w;\n\n\t//exit if r's origin outside s (c > 0) and r pointing away from s (b > 0)\n\tif(c > 0.0 && b > 0.0)\n\t\treturn false;\n\n\t//calculate discriminant\n\tfloat discr = b * b - c;\n\n\t//a negative discriminant corresponds to ray missing sphere\n\tif(discr < 0.0)\n\t\treturn false;\n    \n\t//ray now found to intersect sphere, compute smallest t value of intersection\n    bool fromInside = false;\n\tfloat dist = -b - sqrt(discr);\n    if (dist < 0.0f)\n    {\n        fromInside = true;\n        dist = -b + sqrt(discr);\n    }\n    \n\tif (dist > c_minimumRayHitTime && dist < info.dist)\n    {\n        info.dist = dist;        \n        info.normal = normalize((rayPos+rayDir*dist) - sphere.xyz) * (fromInside ? -1.0f : 1.0f);\n        return true;\n    }\n    \n    return false;\n}\n\n// assets\nvoid CornelCube(in vec3 rayPos, in vec3 rayDir, inout SRayHitInfo hitInfo){\n    // Cornel Box\n    float cubeSize = 8.0f;\n    float backwardZ = 25.0f;\n    float forwardZ = backwardZ - cubeSize;\n    {\n        vec3 A = vec3(-cubeSize, -cubeSize, backwardZ);\n        vec3 B = vec3(cubeSize, -cubeSize, backwardZ);\n        vec3 C = vec3(cubeSize, cubeSize, backwardZ);\n        vec3 D = vec3(-cubeSize, cubeSize, backwardZ);\n        if (TestQuadTrace(rayPos, rayDir, hitInfo, A, B, C, D))\n        {\n            hitInfo.material.albedo = vec3(0.7f, 0.7f, 0.7f);\n            hitInfo.material.emissive = vec3(0.0f, 0.0f, 0.0f);\n        }\n    }\n    {\n        vec3 A = vec3(-8.0f, -8.0f, forwardZ);\n        vec3 B = vec3(-8.0f, -8.0f, backwardZ);\n        vec3 C = vec3(-8.0f, 8.0f, backwardZ);\n        vec3 D = vec3(-8.0f, 8.0f, forwardZ);\n        if (TestQuadTrace(rayPos, rayDir, hitInfo, A, B, C, D))\n        {\n            hitInfo.material.albedo = vec3(0.7f, 0.1f, 0.2f);\n            hitInfo.material.emissive = vec3(0.0f, 0.0f, 0.0f);\n        }\n    }\n    {\n        vec3 A = vec3(8.0f, -8.0f, backwardZ);\n        vec3 B = vec3(8.0f, -8.0f, forwardZ);\n        vec3 C = vec3(8.0f, 8.0f, forwardZ);\n        vec3 D = vec3(8.0f, 8.0f, backwardZ);\n        if (TestQuadTrace(rayPos, rayDir, hitInfo, A, B, C, D))\n        {\n            hitInfo.material.albedo = vec3(0.2f, 0.8f, 0.2f);\n            hitInfo.material.emissive = vec3(0.0f, 0.0f, 0.0f);\n        }\n    }    \n    {\n        vec3 A = vec3(-8.0f, 8.0f, backwardZ);\n        vec3 B = vec3(-8.0f, 8.0f, forwardZ);\n        vec3 C = vec3(8.0f, 8.0f, forwardZ);\n        vec3 D = vec3(8.0f, 8.0f, backwardZ);\n        if (TestQuadTrace(rayPos, rayDir, hitInfo, A, B, C, D))\n        {\n            hitInfo.material.albedo = vec3(0.3f, 0.3f, 0.3f);\n            hitInfo.material.emissive = vec3(0.0f, 0.0f, 0.0f);\n        }\n    }\n    {\n        vec3 A = vec3(8.0f, -8.0f, backwardZ);\n        vec3 B = vec3(8.0f, -8.0f, forwardZ);\n        vec3 C = vec3(-8.0f, -8.0f, forwardZ);\n        vec3 D = vec3(-8.0f, -8.0f, backwardZ);\n        if (TestQuadTrace(rayPos, rayDir, hitInfo, A, B, C, D))\n        {\n            hitInfo.material.albedo = vec3(0.3f, 0.3f, 0.3f);\n            hitInfo.material.emissive = vec3(0.0f, 0.0f, 0.0f);\n        }\n    }\n    \n    // light\n    {\n        vec3 A = vec3(-3.0f, 7.99f, backwardZ-2.0f);\n        vec3 B = vec3(-3.0f, 7.99f, forwardZ+2.0f);\n        vec3 C = vec3(3.0f, 7.99f, forwardZ+2.0f);\n        vec3 D = vec3(3.0f, 7.99f, backwardZ-2.0f);\n        if (TestQuadTrace(rayPos, rayDir, hitInfo, A, B, C, D))\n        {\n            hitInfo.material.albedo = vec3(0.3f, 0.3f, 0.3f);\n            hitInfo.material.emissive = vec3(1.0f, 1.0f, 1.0f) * 10.0f;\n        }\n    }\n}\n\nvoid MetalBallSeries(in vec3 rayPos, in vec3 rayDir, inout SRayHitInfo hitInfo)\n{\n    if(TestSphereTrace(rayPos, rayDir, hitInfo, vec4(-5.0f, 0.0f, 24.0f, 1.0f)))\n    {\n        hitInfo.material.albedo = vec3(1.0f, 1.0f, 1.0f);\n        hitInfo.material.emissive = vec3(0.0f, 0.0f, 0.0f);\n        hitInfo.material.percentageSpecular = 1.0f;\n        hitInfo.material.roughness = 0.0f;\n        hitInfo.material.reflectionColor = vec3(0.6f, 0.6f, 0.6f);\n    }\n    if(TestSphereTrace(rayPos, rayDir, hitInfo, vec4(-2.5f, 0.0f, 24.0f, 1.0f)))\n    {\n        hitInfo.material.albedo = vec3(1.0f, 1.0f, 1.0f);\n        hitInfo.material.emissive = vec3(0.0f, 0.0f, 0.0f);\n        hitInfo.material.percentageSpecular = 1.0f;\n        hitInfo.material.roughness = 0.25f;\n        hitInfo.material.reflectionColor = vec3(0.6f, 0.6f, 0.6f);\n    }\n    if(TestSphereTrace(rayPos, rayDir, hitInfo, vec4(0.0f, 0.0f, 24.0f, 1.0f)))\n    {\n        hitInfo.material.albedo = vec3(1.0f, 1.0f, 1.0f);\n        hitInfo.material.emissive = vec3(0.0f, 0.0f, 0.0f);\n        hitInfo.material.percentageSpecular = 1.0f;\n        hitInfo.material.roughness = 0.5f;\n        hitInfo.material.reflectionColor = vec3(0.6f, 0.6f, 0.6f);\n    }\n    if(TestSphereTrace(rayPos, rayDir, hitInfo, vec4(2.5f, 0.0f, 24.0f, 1.0f)))\n    {\n        hitInfo.material.albedo = vec3(1.0f, 1.0f, 1.0f);\n        hitInfo.material.emissive = vec3(0.0f, 0.0f, 0.0f);\n        hitInfo.material.percentageSpecular = 1.0f;\n        hitInfo.material.roughness = 0.75f;\n        hitInfo.material.reflectionColor = vec3(0.6f, 0.6f, 0.6f);\n    }\n    if(TestSphereTrace(rayPos, rayDir, hitInfo, vec4(5.0f, 0.0f, 24.0f, 1.0f)))\n    {\n        hitInfo.material.albedo = vec3(1.0f, 1.0f, 1.0f);\n        hitInfo.material.emissive = vec3(0.0f, 0.0f, 0.0f);\n        hitInfo.material.percentageSpecular = 1.0f;\n        hitInfo.material.roughness = 1.0f;\n        hitInfo.material.reflectionColor = vec3(0.6f, 0.6f, 0.6f);\n    }\n}\n\nvoid TestSceneTrace(in vec3 rayPos, in vec3 rayDir, inout SRayHitInfo hitInfo)\n{\n    CornelCube(rayPos, rayDir, hitInfo);\n    MetalBallSeries(rayPos, rayDir, hitInfo);\n    \n    if(TestSphereTrace(rayPos, rayDir, hitInfo, vec4(5.0f, -5.9f, 20.0f, 2.0f)))\n    {\n        hitInfo.material.albedo = vec3(0.8f, 0.8f, 0.8f);\n        hitInfo.material.emissive = vec3(0.0f, 0.0f, 0.0f);\n        hitInfo.material.percentageSpecular = 0.0f;        \n    }\n    if(TestSphereTrace(rayPos, rayDir, hitInfo, vec4(0.0f, -5.9f, 20.0f, 2.0f)))\n    {\n        hitInfo.material.albedo = vec3(0.8f, 0.4f, 0.5f);\n        hitInfo.material.emissive = vec3(0.0f, 0.0f, 0.0f);\n        hitInfo.material.percentageSpecular = 0.3f;\n        hitInfo.material.roughness = 0.2f;\n        hitInfo.material.reflectionColor = vec3(0.8f, 0.4f, 0.5f);\n    }\n    if(TestSphereTrace(rayPos, rayDir, hitInfo, vec4(-5.0f, -5.9f, 20.0f, 2.0f)))\n    {\n        hitInfo.material.albedo = vec3(0.8f, 0.8f, 0.4f);\n        hitInfo.material.emissive = vec3(0.0f, 0.0f, 0.0f);\n        hitInfo.material.percentageSpecular =  0.2f;\n        hitInfo.material.roughness = 0.3f;\n        hitInfo.material.reflectionColor = vec3(0.8f, 0.8f, 0.4f);\n    }\n}\n\nvec3 GetColorForRay(in vec3 startRayPos, in vec3 startRayDir, inout uint rngState)\n{\n    // initialize\n    vec3 ret = vec3(0.0f, 0.0f, 0.0f);\n    vec3 throughput = vec3(1.0f, 1.0f, 1.0f);\n    vec3 rayPos = startRayPos;\n    vec3 rayDir = startRayDir;\n    \n    for (int bounceIndex = 0; bounceIndex <= c_numBounces; ++bounceIndex)\n    {\n        // get specular number\n        float spec = RandomFloat01(rngState);\n        \n        // shoot a ray into the world\n        SRayHitInfo hitInfo;\n        hitInfo.dist = c_superFar;\n        TestSceneTrace(rayPos, rayDir, hitInfo);\n        \n        // if the ray missed, we are done\n        if (hitInfo.dist == c_superFar)\n        {\n            ret += SRGBToLinear(texture(iChannel1, rayDir).rgb) * throughput;\n            break;\n        }\n        \n        // update position of the ray\n        rayPos = (rayPos + rayDir * hitInfo.dist) + (hitInfo.normal * c_rayPosNormalNudge);\n        \n        // Update ray direction\n        if (hitInfo.material.percentageSpecular > spec)\n        {\n            vec3 reflectedRayDir = reflect(rayDir, hitInfo.normal);\n            vec3 dullRayDir = hitInfo.normal + RandomUnitVector(rngState);\n            \n            // compute roughness influence\n            if (hitInfo.material.roughness > 0.0f && hitInfo.material.roughness < 1.0f)\n            {\n                float r = pow(hitInfo.material.roughness, 2.0f);\n                rayDir = normalize(mix(reflectedRayDir, dullRayDir, r));\n        \t}\n            else if (hitInfo.material.roughness == 1.0f)\n            {\n                rayDir = normalize(hitInfo.normal + RandomUnitVector(rngState));\n            }\n            else if (hitInfo.material.roughness == 0.0f)\n            {\n                rayDir = normalize(reflect(rayDir, hitInfo.normal));\n            }\n            \n            // update colour multiplier\n        \tthroughput *= hitInfo.material.reflectionColor;\n        \t\n            // Russian Roulette\n            // As the throughput gets smaller, the ray is more liekly to get terminated early.\n            // Survivors have ther value boosted to make up for fewer samples being in the average.\n            float p = max(throughput.r, max(throughput.g, throughput.b));\n            if (RandomFloat01(rngState) > p)\n                break;\n            \n            throughput *= 1.0f / p;\n        }\n        else\n        {\n        \trayDir = normalize(hitInfo.normal + RandomUnitVector(rngState));\n            \n            // update colour multiplier\n        \tthroughput *= hitInfo.material.albedo;\n            \n            float p = max(throughput.r, max(throughput.g, throughput.b));\n            if (RandomFloat01(rngState) > p)\n                break;\n            \n            throughput *= 1.0f / p;\n        }\n        \n        // add in emissive lighting\n        ret += hitInfo.material.emissive * throughput;\n    }\n    \n    //return pixel colour\n    return ret;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    //initialize a random number state based on frag coord and frame\n    uint rngState = uint(uint(fragCoord.x) * uint(1973) + uint(fragCoord.y) * uint(9277) + uint(iFrame) * uint(26699)) | uint(1);\n    \n    // calculate camera distance\n    float cameraDistance = 1.0f / tan(c_FOVDegrees * 0.5f * c_pi / 180.0f);\n    \n    // ray starts at the camera position (the origin)\n    vec3 rayPosition = vec3(0.0f, 0.0f, 0.0f);\n    \n    // calculate subpixel camera jitter for anti aliasing\n    vec2 jitter = vec2(RandomFloat01(rngState), RandomFloat01(rngState)) - 0.5f;\n    \n    // calculate coordinates of the ray target on the imaginary pixel plane.\n    // -1 to +1 on x, y axis. 1 unit away on the z axis\n    vec3 rayTarget = vec3(((fragCoord+jitter)/iResolution.xy) * 2.0f - 1.0f, cameraDistance);\n    \n    float aspectRatio = iResolution.x/iResolution.y;\n    rayTarget.y /= aspectRatio;\n    \n    // calculate a normalized vector for the ray direction\n    // it's pointing from the ray position to the ray target\n    vec3 rayDir = normalize(rayTarget - rayPosition);\n    \n    // raytrace for this pixel\n    vec3 color = GetColorForRay(rayPosition, rayDir, rngState);\n    \n    // see if space was pressed. If so we want to restart our render.\n    // This is useful for when we go fullscreen for a bigger image\n    bool spacePressed = (texture(iChannel2, vec2(32.5f/256.0f, 0.25f)).x > 0.1f);\n    \n    // average the frames together\n    vec4 lastFrameColor = texture(iChannel0, fragCoord / iResolution.xy);\n    float blend = (lastFrameColor.a == 0.0f || spacePressed ? 1.0f : 1.0f / (1.0f + (1.0f / lastFrameColor.a)));\n    color = mix(lastFrameColor.rgb, color, blend);\n\n    // show the result\n    fragColor = vec4(color, blend);    \n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"vec3 LessThan(vec3 f, float value)\n{\n    return vec3(\n        (f.x < value) ? 1.0f : 0.0f,\n        (f.y < value) ? 1.0f : 0.0f,\n        (f.z < value) ? 1.0f : 0.0f\n    );\n}\n\nvec3 LinearToSRGB(vec3 rgb)\n{\n    rgb = clamp(rgb, 0.0f, 1.0f);\n    \n    return mix(\n        pow(rgb, vec3(1.0f / 2.4f))* 1.055f - 0.055f,\n        rgb * 12.92f,\n        LessThan(rgb, 0.0031308f)\n    );\n}\n\nvec3 SRGBToLinear(vec3 rgb)\n{\n    rgb = clamp(rgb, 0.0f, 1.0f);\n    \n    return mix(\n        pow(((rgb + 0.055f) / 1.055f), vec3(2.4f)),\n        rgb / 12.92f,\n        LessThan(rgb, 0.04045f)\n    );\n}\n\n// ACES tone mapping curve fit to go from HDR to LDR\n//https://knarkowicz.wordpress.com/2016/01/06/aces-filmic-tone-mapping-curve/\nvec3 ACESFilm(vec3 x)\n{\n    float a = 2.51f;\n    float b = 0.03f;\n    float c = 2.43f;\n    float d = 0.59f;\n    float e = 0.14f;\n    return clamp((x*(a*x + b)) / (x*(c*x + d) + e), 0.0f, 1.0f);\n}","name":"Common","description":"","type":"common"}]}