{"ver":"0.1","info":{"id":"dlSczG","date":"1691912824","viewed":99,"name":"Perspective Projection Toy","username":"Leslie","description":"透视投影矩阵的简单实现","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["3d","projection","rasterization","perspective"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// line SDF\nfloat line(vec2 p, vec2 a, vec2 b){\n    vec2 ab = b-a;\n    vec2 ap = p-a;\n\n    float h = clamp(dot(ab, ap)/dot(ab,ab), 0., 1.);\n    vec2 hp = ap-h*ab;\n    return length(hp);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float scale = min(iResolution.x, iResolution.y);\n    vec4 uv = vec4((2.*fragCoord-iResolution.xy)/scale, 0., 1.);\n    float n = 1.; // near plane distance\n    float z;\n\n    vec4 l1p1 = vec4(-1., -1., 0., 1.); // line1 p1\n    vec4 l1p2 = vec4(1., -1., 9., 1.); // line2 p2\n\n    vec4 l2p1 = vec4(-1., 1., 0., 1.); // line2 p1\n    vec4 l2p2 = vec4(1., 1., 9., 1.); // line2 p2\n\n    // define l1p2's perspective projection matrix\n    z = l1p2.z;\n    mat4 m2 = mat4(\n        n, 0., 0., 0.,\n        0., n, 0., 0.,\n        0., 0., z+n, 0.,\n        0., 0., 0., z+n\n    );\n\n    // define l2p2's perspective projection matrix\n    z = l2p2.z;\n    mat4 m3 = mat4(\n        n, 0., 0., 0.,\n        0., n, 0., 0.,\n        0., 0., z+n, 0.,\n        0., 0., 0., z+n\n    );\n\n    // project l1p2\n    l1p2 = m2*l1p2;\n    l1p2 /= l1p2.w;\n\n    // project l2p2\n    l2p2 = m3*l2p2;\n    l2p2 /= l2p2.w;\n\n    float d1 = line(uv.xy, l1p1.xy, l1p2.xy);\n    float d2 = line(uv.xy, l2p1.xy, l2p2.xy);\n    float clr = float(d1<0.01 || d2<0.01);\n    \n    fragColor = vec4(vec3(clr), 1.);\n\n}\n","name":"Image","description":"","type":"image"}]}