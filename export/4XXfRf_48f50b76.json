{"ver":"0.1","info":{"id":"4XXfRf","date":"1728810989","viewed":125,"name":"UV Sphere Made of Points","username":"rcmz","description":"UV sphere made of points\nMouse controls the camera","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["sphere","points","uvsphere"],"hasliked":0,"parentid":"43fBRf","parentname":"2D Interferometry Pinhole Camera"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float pi = 3.14159265358979;\n\nfloat mapRange(float x, float fromMin, float fromMax, float toMin, float toMax) {\n    return (x - fromMin) / (fromMax - fromMin) * (toMax - toMin) + toMin;\n}\n\nmat3 rotMatX(float a) {\n    return mat3(1, 0, 0, 0, cos(a), sin(a), 0, -sin(a), cos(a));\n}\n\nmat3 rotMatY(float a) {\n    return mat3(cos(a), 0, -sin(a), 0, 1, 0, sin(a), 0, cos(a));\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    uv = uv * 2.-1.;\n    uv.x *= iResolution.x / iResolution.y;\n    float l = 0.;\n    \n    const float r = 0.7;\n    const float I = 200.;\n    const float J = 10.;\n    \n    for (int k = 0; k < 2; k++)\n    for (float i = 0.; i < I; i++)\n    for (float j = 0.; j < J; j++) {\n        vec3 p;\n        \n        if (k == 0) {\n            float t = i/I * pi*2.;\n            float a = j/J * pi;\n            p = rotMatY(a) * vec3(cos(t), sin(t), 0) * r;\n        } else {\n            float t = i/I * pi*2.;\n            float h = j/J * 2.-1.;\n            float w = sqrt(cos(h * pi/2.));\n            p = vec3(cos(t) * w, h, sin(t) * w) * r;\n        }\n        \n        vec2 c = (iMouse.xy / iResolution.xy) * 2.-1.;\n        p = rotMatX(c.y) * rotMatY(-c.x) * p + vec3(0, 0, 1);\n        l += distance(p.xy, uv) < 0.005 && p.z > 0. ? mapRange(p.z, 0., 2.5, 1., 0.) : 0.;\n    }\n\n    fragColor.rgb = vec3(l);\n}","name":"Image","description":"","type":"image"}]}