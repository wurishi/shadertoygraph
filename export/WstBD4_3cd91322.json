{"ver":"0.1","info":{"id":"WstBD4","date":"1605212848","viewed":466,"name":"Coiled 15 puzzle game","username":"FabriceNeyret2","description":"mouse control cam.      SPACE+click cell next to void tile to swap.    reset = new game.\n\nref: [url]https://www.youtube.com/watch?v=rfAEgxNEOrQ[/url]\n[img]https://i.imgur.com/H3bgCS7.png[/img]\n\nSomething suspicious in my camera geometry...\n","likes":13,"published":3,"flags":48,"usePreview":0,"tags":["game","cylinder","short","taquin","reproduction","15puzzle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// === manage display ==============================================================\n\nvec4 char(vec2 p, int c) {                     // === draw character   https://www.shadertoy.com/view/llySRh\n    vec2 dFdx = dFdx(p/16.), dFdy = dFdy(p/16.);\n    if (p.x<.0|| p.x>1. || p.y<0.|| p.y>1.) return vec4(0,0,0,1e5);\n\treturn textureGrad( iChannel3, p/16. + fract( vec2(c, 15-c/16) / 16. ), dFdx, dFdy );\n}\n\nvoid mainImage(out vec4 O, vec2 U) {           // === display puzzle \n    cam0(iTime);                                                     // this stupidely can't be done in common\n    vec2 r = raytrace( cam1(U) );               \n    O-=O;\n    if ( r==vec2(0) ) return;                                        // no hit\n#define bord(d)  O += 1.5 - abs(d)/.03\n    float m = abs ( Amax(r) -2.06 );\n    if ( m <.04  && (r.y>-2. || r.x > -.95 )&& (r.y<2. || r.x < .95 ) )// draw border\n        { bord(m); return; }\n\n    // --- 15-puzzle space: display as usual -------------------------------------\n\n    vec2 P = floor(r+=2.), D;                                        // cell number\n // O = vec4((1.+P)/6.,0,0); return;\n    if      (P==vec2(0,-1)) P = vec2(3);                             // bridge\n    else if (P==vec2(3, 4)) P = vec2(0);\n    else if (P==vec2(1,-1)) bord(r.x-1.06);                          // draw bridge border\n    else if (P==vec2(2, 4)) bord(r.x-2.94);\n    int n = int( T1(P).x );                                          // tile id\n    float t = ( iTime - T1(P).z ) / .5, d = T1(P).w;\n    if ( t < 1. )                                                    // tile swap anip\n        D = vec2( mod(d,3.)-1., floor(d/3.)-1. ),                    //   slide dir\n        n = int( T1(P)[fract(r*D)[ D.x==0.? 1 : 0 ] > t ? 1 : 0 ] ), //   side-dependent id\n        r += (1.-t)* D;                                              //   slide\n    r = fract(r)*2. - 1.;                                            // pos in tile\n    float c = 0.;\n    if ( n> 0 ) \n        c = max( char(r+.5,48+n%10).x, n > 9 ? char(r+.5+vec2(.5,0),49).x : 0. ),\n        O +=   clamp(1.-( Amax(r) - .93 )/.05,0.,1.) * (1.-c)        // display id\n             * vec4(.5,.5,1,0) * _shad;                              // color & shading\n // if ( T(0).xy == P ) O.r++;                                       // cur tile in red\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// === manage shape raytrace, used for rendering & picking ==========================\n\n#define T(U)      texelFetch(iChannel0, ivec2(U), 0 )\n#define T1(U)     texelFetch(iChannel1, ivec2(U), 0 )\n#define Amax(v)   max( abs(v).x, abs(v).y )\n#define rot(a)    mat2( cos(a+vec4(0,11,33,0)) )                 // rotation                  \n#define R         iResolution\nvec2 CAM;                                                        // camera\n#define cam0(t)   CAM = length(iMouse.xy) > 10. ? T(8).xy -.5: vec2(8,6)/1e2*cos(t+vec2(0,11))\n#define cam1(U)   vec3( U+U, -3.5*R.y ) - R                      //  stupidely can't be done in raytrace\n\nvec3 _hit; float _shad;\nvec2 raytrace(vec3 U) {\n    vec3  p = vec3(0,0,50), D = normalize(U), q;                 // ray start & direction                             \n    vec2  M = 8.*CAM;                                            // stupidely can't call cam in common\n    \n        p.yz *= rot( .5 - M.y ), D.yz *= rot( .5 - M.y ),        // rotations\n        p.xz *= rot( 2. - M.x ), D.xz *= rot( 2. - M.x );\n    \n    // --- ray ( P = C+kD ) - cylinder (O,Z,r) intersection: ------------------\n    //    | OP - (OP.Z)Z | = r   → |OP|² - (OP.Z)² = r² -> second degree polynom in k\n    float a = 1. - D.z*D.z, b = dot(p,D) - p.z*D.z, c = dot(p,p) - p.z*p.z - 25.,\n          d = b*b - a*c, k, T=.925;\n\n    if ( d < 0. ) return vec2(0);                                // miss cylinder\n    \n#define getHit(sgn) {                                       \\\n      k = (-b sgn sqrt(d) ) / a;                            \\\n      q = p + k* D;                                         \\\n      s = 5.63* atan(q.y,q.x);   /* 4.77 */                 \\\n   /* r = vec2(s-q.z,s+q.z),             */                 \\\n      r = vec2(s,q.z)* mat2(cos(T+vec4(0,33,11,0))) *1.41,  \\\n      s = Amax(r);                                          \\\n      E = 6.28* 5.63* cos(T+vec2(0,11)) *1.41, /* bridge */ \\\n      s = min( s, Amax(r+E) );                              \\\n      s = min( s, Amax(r-E) );                              \\\n    }\n    float s; vec2 r,E;\n    getHit(-);                                                   // front\n    if ( s > 21. ) getHit(+);                                    // back\n    if ( s > 21. ) return vec2(0);                               // miss (sides)\n\n // q.xz  *= rot( -(2. - M.x) ), q.yz *= rot( -(.5 - M.y) );     // back to screen space\n // _hit = q;                                                    // return hit point and view-shading\n    _shad = abs( dot(q.xy,D.xy) / 5. );\n    return r/10.;                                                // coordinates on puzzle or 0\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// === manage camera and tile picking =========================================\n// (8,8)  xy : persistant normalized mouse.xy\n// (0,0)  xy : persistant clicked tile or -1.       w: currently clicked (down event)\n\n#define keyClicked(a) ( texelFetch(iChannel3,ivec2(a,0),0).x > 0.)\n#define H(p)            fract(sin( (p) * vec2(12.9898, 78.233) ) * 43758.5453) // https://www.shadertoy.com/view/llySRh\n    \nvoid mainImage( out vec4 O, vec2 U )\n{\n    if ( U == vec2(9.5) ) { O = iMouse ; return; }              // memo mouse motion (for panning )\n    if ( U == vec2(8.5) ) { O = keyClicked(32) || T(9).z < 0. ? T(8) : T(8)+( iMouse - T(9) )/R.xyzz ; return; } // tune camera\n    if ( U != vec2(.5) )    discard;\n    if ( iFrame < 1 )     { O = vec4(-1); return; }             // init: no cell selected\n    bool demo = length(iMouse.xy)<10.  &&  iFrame%30 < 1 ;      // demo mode\n    if ( ! demo &&\n       ( ! keyClicked(32) || iMouse.z <= 0. )) { O = T(0); O.w = 0.; return; } // not clicking a tile\n    \n                                         // --- picking of tile clicked by mouse\n    cam0(iTime);                                                // this stupidely can't be done in common\n    vec2 r = demo ? 4.* H(iTime) - 2.\n                  : raytrace( cam1(iMouse.xy) ), a;             // picking at mouse pos\n    \n    O.xy = r==vec2(0) ? vec2(-1) : floor(r+2.);                 // return tile coord or -1\n // O.z  = 1. + O.x + 4.*O.y;                                   // tile id (unused)\n    O.w  = 1.;                                                  // currently clicked (down event)\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// === manage usual 15 Puzzle game =====================================\n// 4x4 tiles (i,j)  x: cell id or 0   y: previous value  \n//                  z: time of click  w: move direction [-1,1]² encoded as 0..8\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    if ( max(U.x,U.y) > 4. ) discard;\n    O = T(U);                                              // restore state\n    U -= .5;\n    \n    if (iFrame < 1)                                        // initial set: shuffle \n        O.x = float( ( int( iDate.w + U.x + 4.*U.y )^11)*331 % 16 ), O.z = -9.; \n    \n    vec4 C = T1(0);                                        // clicked tile\n    if ( C.x < 0. || C.w < 1. ) return;                    // no one\n    \n    float n = T(C.xy).x;                                   // current tile id\n    vec2 A,D = vec2(0), E = vec2(1,0), S;\n    if      ( O.x == 0. ) {                                // we are on void tile \n        D = U - C.xy;                                      // if clicked tile is nearby (A.x+A.y=1)\n        if ( U==vec2(3) && C.xy==vec2(0) ) D = vec2(0,-1); //   bridge case\n        if ( U==vec2(0) && C.xy==vec2(3) ) D = vec2(0, 1);                        \n        S = vec2( n, 0 );                                  //   move C to void\n    }\n    else if ( O.x == n ) {                                 // we are on clicked tile\n        D.x =   U.x>0. && T(U-E   ).x==0. ? -1.            // if void tile is nearby (A.x+A.y=1)\n              : U.x<3. && T(U+E   ).x==0. ?  1. : 0.;\n        D.y =   U.y>0. && T(U-E.yx).x==0. ? -1.\n              : U.y<3. && T(U+E.yx).x==0. ?  1. : 0.;\n        if ( U==vec2(0) && T(3).x==0. ) D = vec2(0,-1);    //   bridge case\n        if ( U==vec2(3) && T(0).x==0. ) D = vec2(0, 1);                                \n        S = vec2( 0, n  );                                 //   move void to C \n    }\n    A = abs(D);\n    if  ( A.x+A.y==1. )                                    // move if nearby\n         D++, O = vec4( S, iTime, D.x+3.*D.y ); \n}","name":"Buffer B","description":"","type":"buffer"}]}