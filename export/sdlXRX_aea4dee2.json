{"ver":"0.1","info":{"id":"sdlXRX","date":"1618984683","viewed":63,"name":"Starfield space background","username":"qzole","description":"Simple space background, use mouse to pan the view.\n\nSome other interesting starfield / space shadertoys:\nhttps://www.shadertoy.com/view/tst3WS\n","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["noise","random","space","stars","starfield"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SHOW_GRID 0\n#define ENABLE_LAYER_1 1\n#define ENABLE_LAYER_2 1\n#define ENABLE_LAYER_3 1\n#define STAR_FALLOFF_START 0.1\n#define DIM_MULTIPLIER 0.4\n#define OFFSET_STAR_POSITION 1\n#define SHOW_HOW_BAD_THE_RANDOM_IS 0\n\n#define PI 3.14159265359\n\nfloat random(in vec2 st)\n{\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))\n                * 43758.5453123);\n}\n\nfloat random(in float v)\n{\n    return fract(sin(v) * 43758.5453123);\n}\n\nmat2 rotate2d(float angle){\n    return mat2(cos(angle),-sin(angle),\n                sin(angle),cos(angle));\n}\n\nfloat starfield(vec2 p, float cellSize, float minStarSize, float maxStarSize)\n{\n    p /= cellSize;\n    vec2 i = floor(p);\n    \n    vec2 rsv = rotate2d(0.3245 * PI) * i; // random source vector\n#if SHOW_HOW_BAD_THE_RANDOM_IS\n    rsv = i; // to display how bad our random() is...\n#endif\n    float rs = (rsv.x + rsv.y) * 179.9765; // random source\n    \n    vec2 starPosition = vec2(0.5);\n#if OFFSET_STAR_POSITION   \n    vec2 offset = vec2(random(rs * 7.56), random(rs * 4.23)) - vec2(0.5);\n    offset *= 1.0 - ((maxStarSize * 1.05) / cellSize);\n    starPosition += offset;\n#endif\n       \n    float radius = (minStarSize + random(rs) * maxStarSize) / cellSize;\n    vec2 f = fract(p);\n    float d = 1.0 - smoothstep(STAR_FALLOFF_START * radius, radius, distance(f, starPosition));\n    \n    float v = random(i) * d;\n#if SHOW_GRID\n    vec2 bl = 1.0 - smoothstep(vec2(0.99 / cellSize), vec2(1.01 / cellSize), f);\n    v += (bl.x + bl.y) * 0.25;\n#endif\n    return v;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n   \n    vec3 col = vec3(0.0);\n\n#if ENABLE_LAYER_1\n    vec2 p1 = fragCoord + iMouse.xy;\n    col += vec3(starfield(p1, 30.0, 1.5, 1.7));\n#endif\n    \n#if ENABLE_LAYER_2\n    vec2 p2 = rotate2d(0.4745 * PI) * (fragCoord + 0.925 * iMouse.xy + vec2(0.23, 0.67));\n    col += vec3(starfield(p2, 17.0, 1.2, 1.4));\n#endif\n\n#if ENABLE_LAYER_3\n    vec2 p3 = rotate2d(0.2745 * PI) * (fragCoord + 0.875 * iMouse.xy + vec2(0.63, 0.47));\n    col += vec3(starfield(p3, 11.0, 0.9, 1.0));\n#endif\n    \n    col *= DIM_MULTIPLIER;\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}