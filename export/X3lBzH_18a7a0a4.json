{"ver":"0.1","info":{"id":"X3lBzH","date":"1728042398","viewed":17,"name":"CwT op muziek","username":"sjoerd","description":"muziek","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["muziek"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Medialab Creative Technology - Sjoerd Schoenmakers\n// Tutorials gebruikt\n    // https://www.youtube.com/watch?v=khblXafu7iA&list=WL&index=7\n    // https://iquilezles.org/articles/distfunctions/\n\nfloat sdSphere(vec3 p, float r)\n{\n    return length(p) - r;\n}\n\nfloat sdBox(vec3 p, vec3 b)\n{\n    vec3 q = abs(p) - b;\n    return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0);\n}\n\nfloat sdPyramid(vec3 p, float h)\n{\n  float m2 = h*h + 0.25;\n    \n  p.xz = abs(p.xz);\n  p.xz = (p.z>p.x) ? p.zx : p.xz;\n  p.xz -= 0.5;\n\n  vec3 q = vec3( p.z, h*p.y - 0.5*p.x, h*p.x + 0.5*p.y);\n   \n  float s = max(-q.x,0.0);\n  float t = clamp( (q.y-0.5*p.z)/(m2+0.25), 0.0, 1.0 );\n    \n  float a = m2*(q.x+s)*(q.x+s) + q.y*q.y;\n  float b = m2*(q.x+0.5*t)*(q.x+0.5*t) + (q.y-m2*t)*(q.y-m2*t);\n    \n  float d2 = min(q.y,-q.x*m2-q.y*0.5) > 0.0 ? 0.0 : min(a,b);\n    \n  return sqrt( (d2+q.z*q.z)/m2 ) * sign(max(q.z,-p.y));\n}\n\nfloat map(vec3 p)\n{\n    float time = 0.0;\n    float flashPeriod = 0.48;\n    float flashDuration = 0.1;\n    float flash = mod(iTime, flashPeriod);\n    if (flash < flashDuration)\n    {\n        time = 0.1;\n    }\n    \n    float sphereY = cos(iTime - 4.0);\n    float sphereZ = sin(iTime - 4.0);\n    vec3 spherePos = vec3(-sin(iTime + 2.0) / 2.0 + 2.0, sphereY, sphereZ);\n    float sphere = sdSphere(p - spherePos, 0.7 + time);\n    \n    vec3 boxPos = vec3(sin(iTime) * 1.5 + 0.5, sin(iTime) + 1.0, sin(iTime) * 1.5 + 0.5);\n    float box = sdBox(p - boxPos, vec3(0.75) + time);\n    \n    vec3 pyramidPos = vec3(-1.0 - 3.0 * sin(iTime + 5.5), -1.0, -0.4 + 0.7 * sin(iTime + 5.5));\n    float pyramid = sdPyramid(p - pyramidPos, 1.0 + time);\n    \n    float ground = p.y + 1.5;\n    \n    float combined = min(sphere, box); // Combineer bol en kubus\n    combined = min(combined, pyramid);  // Voeg de piramide toe\n    return min(combined, ground);       // Voeg de grond toe\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    \n    //initialization\n    vec3 RO = vec3(0.0, 0.0, -3.0);\n    float focalLength = 1.0;\n    vec3 RD = normalize(vec3(uv * focalLength, 1.0));\n    float t = 0.0;\n    \n    //flashing background\n    vec3 col = vec3(1.0, 0.0, 0.0);\n    float flashPeriod = 0.48;\n    float flashDuration = 0.1;\n    float flash = mod(iTime, flashPeriod);\n    if (flash < flashDuration)\n    {\n        col = vec3(1.0);\n    }\n    \n    //raymarching\n    for(int i = 0; i < 80; i++)\n    {\n        vec3 p = RO + RD * t;\n        float d = map(p);\n        t += d;\n        if(d < 0.001 || d > 100.0){break;}\n    }\n    \n    float sub = max(0.0, 1.0 - t * 0.2);\n    col -= vec3(0.6* sub, 0.6 * sub, 0.8 * sub);\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}