{"ver":"0.1","info":{"id":"DtVBDm","date":"1702162185","viewed":31,"name":"random triangular grid circles","username":"jt","description":"Random-sized circles on a triangular grid.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["circles","grid","triangle","random","triangular","loopless"],"hasliked":0,"parentid":"mstcW4","parentname":"debugging triangular coordinates"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/DtVBDm random triangular grid circles, 2023 by jt\n\n// Random-sized circles on a triangular grid.\n\n// tags: circles, grid, triangle, random, triangular, loopless\n\n// The MIT License\n// Copyright (c) 2023 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfloat hash13(vec3 p3) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n\tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.zyx + 31.32);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n// cubic <-> triangle lift/project matrix\nmat2x3 T =\n    mat2x3\n    (\n        normalize(vec3(-1,+1, 0)),\n        normalize(vec3(-1,-1,+2))\n    );\n\nfloat random_triangular_grid_circles(vec3 p)\n{\n    ivec3 tile = ivec3(floor(p));\n    bool flip = tile.x + tile.y + tile.z != 0;\n    vec3 l = fract(p);\n    ivec3 o0 = flip ? ivec3(0,1,1) : ivec3(1,0,0);\n    ivec3 o1 = flip ? ivec3(1,0,1) : ivec3(0,1,0);\n    ivec3 o2 = flip ? ivec3(1,1,0) : ivec3(0,0,1);\n    ivec3 c0 = tile+o0;\n    ivec3 c1 = tile+o1;\n    ivec3 c2 = tile+o2;\n    float r0 = hash13(vec3(c0));\n    float r1 = hash13(vec3(c1));\n    float r2 = hash13(vec3(c2));\n\n    vec3 d =\n        vec3\n        (\n            sqrt(3.0)*length(l-vec3(o0))-r0,\n            sqrt(3.0)*length(l-vec3(o1))-r1,\n            sqrt(3.0)*length(l-vec3(o2))-r2\n        )\n        *\n        4.0;\n    return min(min(d.x,d.y),d.z);\n}\n\n#define scale (3.0*sqrt(3.0)/sqrt(2.0))\n\nvoid mainImage(out vec4 o, vec2 I)\n{\n    vec2 R = iResolution.xy;\n    I = (2. * I - R) / R.y; // mind aspect ratio\n\n    vec3 p = T*I*scale + 1.0/3.0;\n\n    float d = smoothstep(0.0,30.0*scale/R.y, abs(random_triangular_grid_circles(p)-1.0));\n    o = vec4(d,d,d,1);\n    o = sqrt(o); // gamma\n}\n","name":"Image","description":"","type":"image"}]}