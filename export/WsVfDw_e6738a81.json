{"ver":"0.1","info":{"id":"WsVfDw","date":"1607295169","viewed":70,"name":"Creation by Silexars - In Rust","username":"DGriffin91","description":"Ported to Rust from <https://www.shadertoy.com/view/XsXXDn>\nrust-gpu -> spirv -> glsl\nhttps://github.com/EmbarkStudios/rust-gpu\nhttps://github.com/KhronosGroup/SPIRV-Cross\n\nSee on SHADEred: https://shadered.org/view?s=SAu6alOR2z\n\n\n","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["rust"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//! Ported to Rust from <https://www.shadertoy.com/view/XsXXDn>\n//!\n//! Original comment:\n//! ```glsl\n//! // http://www.pouet.net/prod.php?which=57245\n//! // If you intend to reuse this shader, please add credits to 'Danilo Guanabara'\n//! ```\n\n/*\nuse spirv_std::glam::{vec2, vec4, Vec2, Vec3, Vec3Swizzles, Vec4};\n\n// Note: This cfg is incorrect on its surface, it really should be \"are we compiling with std\", but\n// we tie #[no_std] above to the same condition, so it's fine.\n\n#[cfg(target_arch = \"spirv\")]\nuse spirv_std::num_traits::Float;\npub struct Inputs {\n    pub resolution: Vec3,\n    pub time: f32,\n}\n\npub trait FloatExt {\n    fn rem_euclid(self, rhs: Self) -> Self;\n}\n\nimpl FloatExt for f32 {\n    fn rem_euclid(self, rhs: f32) -> f32 {\n        let r = self % rhs;\n        if r < 0.0 {\n            r + rhs.abs()\n        } else {\n            r\n        }\n    }\n}\n\npub trait VecExt {\n    fn rem_euclid(self, m: f32) -> Self;\n}\n\nimpl VecExt for Vec2 {\n    fn rem_euclid(self, m: f32) -> Vec2 {\n        Vec2::new(self.x.rem_euclid(m), self.y.rem_euclid(m))\n    }\n}\n\nimpl Inputs {\n    pub fn main_image(&self, frag_color: &mut Vec4, frag_coord: Vec2) {\n        let mut c: [f32; 3] = [0.0, 0.0, 0.0];\n        let mut l = 0.0;\n        let mut z = self.time;\n        let mut i = 0;\n        while i < 3 {\n            let mut p = frag_coord / self.resolution.xy();\n            let mut uv = p;\n            p -= Vec2::splat(0.5);\n            p.x *= self.resolution.x / self.resolution.y;\n            z += 0.07;\n            l = p.length();\n            uv += p / l * (z.sin() + 1.0) * (l * 9.0 - z * 2.0).sin().abs();\n            c[i] = 0.01 / (uv.rem_euclid(1.0) - Vec2::splat(0.5)).abs().length();\n            i += 1;\n        }\n        *frag_color = vec4(c[0] / l, c[1] / l, c[2] / l, self.time);\n    }\n}\n*/\n\n#define t iTime\n#define r iResolution.xy\n\nstruct f32_vec3_Vec3\n{\n    float x;\n    float y;\n    float z;\n};\n\nstruct for_r_unsafe_fn\n{\n    int empty_struct_member;\n};\n\nfloat _79;\nvec2 _80;\nvec4 _81;\nf32_vec3_Vec3 _82;\n\nfloat _f32_as_shadertoys_shaders_creation_by_silexars_FloatExt_rem_euclid(float _83, float _84)\n{\n    float _86 = _83 - _84 * trunc(_83 / _84);\n    float _93;\n    float _94;\n    if (_86 < 0.0)\n    {\n        float _91 = abs(_84);\n        _93 = _91;\n        _94 = _86 + _91;\n    }\n    else\n    {\n        _93 = _79;\n        _94 = _86;\n    }\n    return _94;\n}\n\nvoid _glam_f32_vec2_Vec2_as_shadertoys_shaders_creation_by_silexars_VecExt_rem_euclid(inout vec2 _480, vec2 _481, float _482)\n{\n    _480.x = _f32_as_shadertoys_shaders_creation_by_silexars_FloatExt_rem_euclid(_481.x, _482);\n    _480.y = _f32_as_shadertoys_shaders_creation_by_silexars_FloatExt_rem_euclid(_481.y, _482);\n}\n\nvoid _shadertoys_shaders_creation_by_silexars_Inputs_main_image(inout vec4 _96, vec2 _97)\n{\n    float _99[3];\n    _99[0u] = 0.0;\n    _99[1u] = 0.0;\n    _99[2u] = 0.0;\n    vec2 _115;\n    vec2 _117;\n    vec2 _135;\n    vec2 _137;\n    vec2 _141;\n    vec2 _143;\n    vec2 _145;\n    vec2 _147;\n    vec2 _149;\n    vec2 _151;\n    vec2 _153;\n    vec2 _155;\n    vec2 _157;\n    vec2 _159;\n    vec2 _161;\n    vec2 _163;\n    vec2 _165;\n    vec2 _167;\n    vec2 _169;\n    vec2 _171;\n    vec2 _173;\n    vec2 _175;\n    vec2 _177;\n    vec2 _179;\n    vec2 _181;\n    vec2 _183;\n    _115 = _80;\n    _117 = _80;\n    _135 = _80;\n    _137 = _80;\n    _141 = _80;\n    _143 = _80;\n    _145 = _80;\n    _147 = _80;\n    _149 = _80;\n    _151 = _80;\n    _153 = _80;\n    _155 = _80;\n    _157 = _80;\n    _159 = _80;\n    _161 = _80;\n    _163 = _80;\n    _165 = _80;\n    _167 = _80;\n    _169 = _80;\n    _171 = _80;\n    _173 = _80;\n    _175 = _80;\n    _177 = _80;\n    _179 = _80;\n    _181 = _80;\n    _183 = _80;\n    vec2 _101;\n    float _111;\n    float _114;\n    vec2 _116;\n    vec2 _118;\n    float _120;\n    float _122;\n    float _124;\n    float _126;\n    float _128;\n    float _130;\n    float _132;\n    float _134;\n    vec2 _136;\n    vec2 _138;\n    float _140;\n    vec2 _142;\n    vec2 _144;\n    vec2 _146;\n    vec2 _148;\n    vec2 _150;\n    vec2 _152;\n    vec2 _154;\n    vec2 _156;\n    vec2 _158;\n    vec2 _160;\n    vec2 _162;\n    vec2 _164;\n    vec2 _166;\n    vec2 _168;\n    vec2 _170;\n    vec2 _172;\n    vec2 _174;\n    vec2 _176;\n    vec2 _178;\n    vec2 _180;\n    vec2 _182;\n    vec2 _184;\n    uint _186;\n    float _188;\n    float _190;\n    bool _192;\n    float _110;\n    float _113;\n    float _119;\n    float _121;\n    float _123;\n    float _125;\n    float _127;\n    float _129;\n    float _131;\n    float _133;\n    float _139;\n    uint _185 = 0u;\n    float _187 = t;\n    float _189 = 0.0;\n    bool _191 = true;\n    for (; _191; _110 = _111, _113 = _114, _115 = _116, _117 = _118, _119 = _120, _121 = _122, _123 = _124, _125 = _126, _127 = _128, _129 = _130, _131 = _132, _133 = _134, _135 = _136, _137 = _138, _139 = _140, _141 = _142, _143 = _144, _145 = _146, _147 = _148, _149 = _150, _151 = _152, _153 = _154, _155 = _156, _157 = _158, _159 = _160, _161 = _162, _163 = _164, _165 = _166, _167 = _168, _169 = _170, _171 = _172, _173 = _174, _175 = _176, _177 = _178, _179 = _180, _181 = _182, _183 = _184, _185 = _186, _187 = _188, _189 = _190, _191 = _192)\n    {\n        if (_185 < 3u)\n        {\n            vec2 _205 = _179;\n            _205.x = r.x;\n            vec2 _206 = _205;\n            _206.y = r.y;\n            vec2 _213 = _183;\n            _213.x = _97.x / _206.x;\n            vec2 _214 = _213;\n            _214.y = _97.y / _206.y;\n            vec2 _215 = _173;\n            _215.x = 0.5;\n            vec2 _216 = _215;\n            _216.y = 0.5;\n            vec2 _220 = _214;\n            _220.x = _214.x - _216.x;\n            vec2 _224 = _220;\n            _224.y = _220.y - _216.y;\n            vec2 _234 = _224;\n            _234.x = _224.x * (r.x / r.y);\n            float _235 = _187 + 0.070000000298023223876953125;\n            float _242 = (_234.x * _234.x) + (_234.y * _234.y);\n            float _243 = sqrt(_242);\n            vec2 _248 = _167;\n            _248.x = _234.x / _243;\n            vec2 _249 = _248;\n            _249.y = _234.y / _243;\n            float _250 = sin(_235);\n            float _251 = _250 + 1.0;\n            vec2 _256 = _163;\n            _256.x = _249.x * _251;\n            vec2 _257 = _256;\n            _257.y = _249.y * _251;\n            float _261 = sin((_243 * 9.0) - (_235 * 2.0));\n            float _262 = abs(_261);\n            vec2 _267 = _159;\n            _267.x = _257.x * _262;\n            vec2 _268 = _267;\n            _268.y = _257.y * _262;\n            vec2 _272 = _214;\n            _272.x = _214.x + _268.x;\n            vec2 _276 = _272;\n            _276.y = _272.y + _268.y;\n            vec2 _102 = _276;\n            _glam_f32_vec2_Vec2_as_shadertoys_shaders_creation_by_silexars_VecExt_rem_euclid(_101, _102, 1.0);\n            vec2 _279 = _153;\n            _279.x = 0.5;\n            vec2 _280 = _279;\n            _280.y = 0.5;\n            vec2 _287 = _151;\n            _287.x = _101.x - _280.x;\n            vec2 _288 = _287;\n            _288.y = _101.y - _280.y;\n            float _290 = abs(_288.x);\n            float _292 = abs(_288.y);\n            vec2 _293 = _145;\n            _293.x = _290;\n            vec2 _294 = _293;\n            _294.y = _292;\n            float _301 = (_294.x * _294.x) + (_294.y * _294.y);\n            float _302 = sqrt(_301);\n            uint _316;\n            bool _317;\n            if (_185 < 3u)\n            {\n                _99[_185] = 0.00999999977648258209228515625 / _302;\n                _316 = _185 + 1u;\n                _317 = true;\n            }\n            else\n            {\n                for (bool _312 = true; _312; _312 = true)\n                {\n                }\n            }\n            _111 = _302;\n            _114 = _301;\n            _116 = _294;\n            _118 = _294;\n            _120 = _302;\n            _122 = _292;\n            _124 = _290;\n            _126 = _262;\n            _128 = _261;\n            _130 = _250;\n            _132 = _243;\n            _134 = _242;\n            _136 = _234;\n            _138 = _234;\n            _140 = _243;\n            _142 = _294;\n            _144 = _288;\n            _146 = _294;\n            _148 = _280;\n            _150 = _101;\n            _152 = _288;\n            _154 = _280;\n            _156 = _268;\n            _158 = _257;\n            _160 = _268;\n            _162 = _249;\n            _164 = _257;\n            _166 = _234;\n            _168 = _249;\n            _170 = _234;\n            _172 = _216;\n            _174 = _216;\n            _176 = _206;\n            _178 = _97;\n            _180 = _206;\n            _182 = _276;\n            _184 = _234;\n            _186 = _316;\n            _188 = _235;\n            _190 = _243;\n            _192 = _317;\n        }\n        else\n        {\n            vec4 _329 = _81;\n            _329.x = _99[0u] / _189;\n            vec4 _330 = _329;\n            _330.y = _99[1u] / _189;\n            vec4 _331 = _330;\n            _331.z = _99[2u] / _189;\n            vec4 _332 = _331;\n            _332.w = t;\n            _96 = _332;\n            return;\n        }\n    }\n}\n\nvoid _glam_f32_vec4_Vec4_as_core_convert_Into_glam_f32_vec3_Vec3_into(inout f32_vec3_Vec3 _470, vec4 _471)\n{\n    _470.x = _471.x;\n    _470.y = _471.y;\n    _470.z = _471.z;\n}\n\nvoid mainImage(out vec4 _333, in vec2 _335)\n{\n    f32_vec3_Vec3 _337;\n    _337.x = float(r.x) / 1.0;\n    _337.y = float(r.y) / 1.0;\n    _337.z = 0.0;\n    float _359 = _335.x;\n    float _362 = _359 / _337.x;\n    float _371 = _335.y;\n    float _374 = _371 / _337.y;\n    _335.x -= _337.x * trunc(_335.x / _337.x);\n    _335.y = _337.y - (_335.y - _337.y * trunc(_335.y / _337.y));\n    vec4 _338 = vec4(0.0);\n    if (((((_374 > uintBitsToFloat(1333788671u)) ? 4294967295u : ((!(_374 >= uintBitsToFloat(0u))) ? 0u : uint(_374))) * 1u) + ((_362 > uintBitsToFloat(1333788671u)) ? 4294967295u : ((!(_362 >= uintBitsToFloat(0u))) ? 0u : uint(_362)))) == 0u)\n    {\n        f32_vec3_Vec3 _340;\n        _340 = _337;\n        vec2 _343 = _335;\n        _shadertoys_shaders_creation_by_silexars_Inputs_main_image(_338, _343);\n    }\n    else\n    {\n    }\n    vec4 _344 = _338;\n    f32_vec3_Vec3 _342;\n    _glam_f32_vec4_Vec4_as_core_convert_Into_glam_f32_vec3_Vec3_into(_342, _344);\n    _333.x = _342.x;\n    _333.y = _342.y;\n    _333.z = _342.z;\n    _333.w = _338.w;\n}\n","name":"Image","description":"","type":"image"}]}