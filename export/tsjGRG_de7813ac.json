{"ver":"0.1","info":{"id":"tsjGRG","date":"1549219296","viewed":856,"name":"kaleidoscope city","username":"Kushulain","description":"Fractal formula taken from paulofalcao https://www.shadertoy.com/view/Mss3Wf\nUse mouse to change point of view.\nI added some mystic SHA256 singing.","likes":34,"published":1,"flags":64,"usePreview":0,"tags":["fractal","ray","marching","city"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Mlf3DH","filepath":"https://soundcloud.com/kushulain/shant-du-sha-v2","previewfilepath":"https://soundcloud.com/kushulain/shant-du-sha-v2","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define steps 10\n#define camDist 30.\n\nmat2 rz2(float a){float c=cos(a),s=sin(a);return mat2(c,s,-s,c);}\n\n//float rayDist = 1000.0;\nfloat dist = 1000.0;\nvec3 rayColor = vec3(0.0,0.0,0.0);\nvec3 ro;\n\nfloat fog = 0.;\n\n\nfloat sphere(vec3 ray,vec3 pos, float radius)\n{\n    return length(ray-pos) - radius;\n}\n\nfloat cylinder(vec3 ray,vec3 pos, float radius, float height)\n{\n    return max(length(ray.xy-pos.xy) - radius, abs(ray.z-pos.z)-height);\n}\n\nfloat cube(vec3 ray, vec3 pos, float size)\n{\n    ray = abs(ray-pos) - size;\n    return max(max(ray.x,ray.y),ray.z);\n}\n\nfloat line(vec3 ray, vec3 pos, float size)\n{\n    ray = abs(ray-pos) - size;\n    return max(ray.z,ray.y);\n}\n\nfloat box(vec3 ray, vec3 pos, vec3 size)\n{\n    ray = abs(ray-pos) - size;\n    return max(max(ray.x,ray.y),ray.z);\n}\n\nvec3 Spherize(vec3 pos)\n{\n    vec3 result = vec3(0.,0.,0.);\n    result.x = atan(normalize(pos.xy)).y * 10.0;\n    result.y = atan(normalize(pos.zx)).y * 10.0;\n    result.z = (2.*length(pos))-15.;\n    result.xy += 10.;\n    return result;\n}\n\nvec3 FractalSpace(vec3 pos)\n{\n    pos *= 0.1;\n    \n    float height = length(pos) * 10.0;\n    float s=3.;\n\tfor(int i=0;i<steps;i++){\n\t\tpos.xy=abs(pos).xy-s; \n        pos.xy *= rz2(0.1*iTime);\n        //pos.xz *= rz2(2.8+iTime*0.23); //PLEASE DO NOT UNCOMMENT ME\n\t\ts=s/1.3;\n\t}\n    \n    return pos;\n}\n\nfloat map(vec3 pos)\n{\n    float rayDist = 0.;\n    \n    //pos = Spherize(pos);\n    \n    pos = FractalSpace(pos);\n    pos += .05;\n    \n    vec3 pos1 = pos;\n    pos1.x = abs(pos.x);\n    vec3 pos2 = pos;\n    \n    pos.xy = abs(pos.xy);\n    \n    \n    //ground\n    rayDist = box(pos,vec3(0.0,0.0,-0.1),vec3(2.,10.0,0.1));\n    \n    //roads\n    rayDist = max(rayDist,-box(pos,vec3(0.0,0.0,0.0),vec3(0.02,10.0,0.002)));\n    rayDist = max(rayDist,-box(pos,vec3(0.0,0.0,0.0),vec3(10.,0.02,0.002)));\n    \n    rayDist = max(rayDist,-box(pos,vec3(0.15,0.0,0.0),vec3(0.01,10.0,0.002)));\n    rayDist = max(rayDist,-box(pos,vec3(0.0,0.15,0.0),vec3(10.,0.01,0.002)));\n    \n    \n    \n    //Paris building\n    /*vec3 b1 = pos;\n    b1.xy -= vec2(0.22,0.08);\n    b1 = abs(b1);\n    rayDist = min(rayDist,box(b1,vec3(0.,0.,0.0),vec3(0.05,0.05,0.05)));\n    rayDist = max(rayDist,-box(b1,vec3(0.0,0.0,0.05),vec3(0.02,0.02,0.05)));\n    \n    vec3 bev1 = b1;\n    bev1 -= vec3(0.04,0.06,0.062);\n    bev1.yz *= rz2(2.);\n    rayDist = max(rayDist,-box(bev1,vec3(0.0),vec3(0.02,0.02,0.02)));\n    \n    vec3 bev2 = b1;\n    bev2 -= vec3(0.057,0.03,0.062);\n    bev2.xz *= rz2(2.1);\n    rayDist = max(rayDist,-box(bev2,vec3(0.0),vec3(0.02,0.022,0.02)));*/\n    \n    \n    \n    //Paris building\n    vec3 b1 = pos;\n    b1.xy -= vec2(0.22,0.08);\n    b1 = abs(b1);\n    float XYsize =  max(0.,.5*pos.z-0.02);\n    float Zsize =  max(0.,0.4*max(b1.x,b1.y)-0.01);\n    rayDist = min(rayDist,box(b1,vec3(0.,0.,0.0),vec3(0.05-XYsize,0.05-XYsize,0.06-Zsize)));\n    rayDist = max(rayDist,-box(b1,vec3(0.0,0.0,0.05),vec3(0.02+XYsize,0.02+XYsize,0.05)));\n    \n    rayDist = min(rayDist,box(b1,vec3(0.02,0.04,0.046),vec3(0.005,0.009,0.008)));\n    rayDist = min(rayDist,box(b1,vec3(0.04,0.01,0.05),vec3(0.005,0.001,0.008)));\n    \n    b1.xy *= 0.56;\n    b1 = abs(b1-0.02);\n    rayDist = max(rayDist,-box(b1,vec3(0.01,0.01,0.01),vec3(0.003,0.003,0.008)));\n    \n    //Garden walls\n    vec3 b0 = pos1;\n    b0.xy -= 0.08;\n    rayDist = min(rayDist,box(b0,vec3(0.,0.,0.005),vec3(0.05,0.05,0.005)));\n    rayDist = max(rayDist,-box(b0,vec3(0.,0.,0.006),vec3(0.048,0.048,0.005)));\n    \n    //Garden trees\n    float noise = 1.+0.1*length(sin(pos*2000.0))+0.2*length(sin(pos*900.0)); \n    \n    b0.xy = abs(b0.xy);\n    b0.xy -= 0.02;\n    b0.xy = abs(b0.xy);\n    b0 -= vec3(0.01,0.01,0.02);\n    rayDist = min(rayDist,cylinder(b0,vec3(0.,0.,-0.01),0.001,0.006));\n    b0*=noise;\n    rayDist = min(rayDist,sphere(b0,vec3(0.),0.008));\n\n    //big building\n    vec3 b2 = pos;\n    b2.xy -= 0.22;\n    //b2.xy -= vec2(0.22,-0.08);\n    b2 = abs(b2);\n    rayDist = min(rayDist,box(b2,vec3(0.,0.,0.0),vec3(0.05,0.05,0.1)));\n    rayDist = min(rayDist,box(b2,vec3(0.,0.,0.05),vec3(0.04,0.04,0.1)));\n    //rayDist = min(rayDist,box(b0,vec3(0.,0.,0.006),vec3(0.048,0.048,0.005)));\n    \n    //parking\n    vec3 b3 = pos2;\n    b3.xy -= vec2(0.08,0.-0.08);\n    b3 = abs(b3);\n    rayDist = min(rayDist,box(b3,vec3(0.,0.,0.033),vec3(0.05,0.05,0.033)));\n    rayDist = max(rayDist,-box(b3,vec3(0.,0.0,0.064),vec3(0.049,0.049,0.006)));\n    rayDist = min(rayDist,box(b3,vec3(0.,0.,0.02),vec3(0.051,0.051,0.002)));\n    rayDist = min(rayDist,box(b3,vec3(0.,0.,0.04),vec3(0.051,0.051,0.002)));\n    rayDist = max(rayDist,-box(b3,vec3(0.022,0.,0.033),vec3(0.01,0.051,0.003)));\n    rayDist = max(rayDist,-box(b3,vec3(0.,0.022,0.033),vec3(0.051,0.01,0.003)));\n    rayDist = max(rayDist,-box(b3,vec3(0.022,0.,0.053),vec3(0.01,0.051,0.003)));\n    rayDist = max(rayDist,-box(b3,vec3(0.,0.022,0.053),vec3(0.051,0.01,0.003)));\n    \n    //square\n    vec3 b4 = pos2;\n    b4.xy -= vec2(0.08,0.-0.22);\n    b4 = abs(b4);\n    rayDist = min(rayDist,box(b4,vec3(0.,0.,0.003),vec3(0.05,0.05,0.003)));\n    rayDist = max(rayDist,-box(b4,vec3(0.,0.,0.004),vec3(0.049,0.049,0.004)));\n    rayDist = max(rayDist,-box(b4,vec3(0.,0.,0.004),vec3(0.051,0.01,0.004)));\n    rayDist = max(rayDist,-box(b4,vec3(0.,0.,0.004),vec3(0.01,0.051,0.004)));\n    \n    vec3 cone = b4;\n    vec3 stairs = b4;\n    \n    rayDist = min(rayDist,cylinder(b4,vec3(0.,0.,0.015),0.015,0.006));\n    \n    cone.xy += (cone.z-0.021);\n    rayDist = min(rayDist,cylinder(cone,vec3(0.,0.,0.027),0.015,0.006));\n    \n    stairs.xy += floor(stairs.z * 800.0)/800.0;\n    rayDist = min(rayDist,box(stairs,vec3(0.018,0.018,0.0),vec3(0.01,0.01,0.01)));\n    rayDist = min(rayDist,box(stairs,vec3(0.00,0.0,0.01),vec3(0.01,0.01,0.02)));\n    \n    \n    //Business building\n    vec3 b5 = pos2;\n    b5.xy -= vec2(-0.08,0.-0.22);\n    b5.xy *= 1.+2.0*floor(b5.z * 50.0)/50.0;\n    b5.xy *= rz2(b5.z);\n    rayDist = min(rayDist,box(b5,vec3(0.,0.,0.15),vec3(0.05,0.05,0.15)));\n    \n    fog = pos.z;\n    \n    return rayDist;\n    \n}\nvec4 GetSampleColor(vec2 uv)\n{\n    ro = vec3(0.,0.,-camDist);\n    vec3 rd = normalize(vec3(uv.x,uv.y,1.)) * 7.;\n    \n    rd.yz *= rz2(3.14+1.6*iMouse.y / iResolution.y);\n    rd.xy *= rz2(3.1*iMouse.x / iResolution.y);\n    ro.yz *= rz2(3.14+1.6*iMouse.y / iResolution.y);\n    ro.xy *= rz2(3.1*iMouse.x / iResolution.y);\n    \n    vec3 mp=ro;\n    \n    int i;\n    for (i=0;i<120;i++){\n        dist = map(mp);\n        //if(abs(rayDist)<mix(0.0001,0.1,(mp.z+camDist)*0.005))\n        if(abs(dist)<0.0001)\n            break;\n        mp+=rd*dist;\n    }\n    \n    float ma=1.-float(i)/120.;\n    \n    return vec4(mp,ma);\n}\n\nvec3 GetNormal(vec3 pos, float posDist)\n{\n    vec2 e = vec2(0.002,0.) * length(pos-ro);\n    return normalize(vec3(map(pos+e.xyy) - posDist, map(pos+e.yxy) - posDist, map(pos+e.yyx) - posDist));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-iResolution.xy*0.5)/iResolution.yy;\n\n    \n    vec4 pos = GetSampleColor(uv);\n    float height = fog;\n    //vec4 posX = GetSampleColor(vec2(uv.x+dFdx(uv).x*0.8,uv.y));\n    //vec4 posY = GetSampleColor(vec2(uv.x,uv.y+dFdy(uv).y*0.8));\n    \n    //vec3 normal = normalize(cross(normalize(posY.xyz-pos.xyz),normalize(posX.xyz-pos.xyz)));\n    vec3 normal = GetNormal(pos.xyz,dist);\n    \n    //cam direction (screen space)\n    //vec3 cp = vec3(0.,0.,-1);\n    \n    vec3 lightPOV = vec3(1.,-1.,1.);\n    vec3 lightPOV2 = vec3(-1.,-1.,1.);\n    \n    pos.w *= pos.w;\n    \n    //diffuse\n    vec3 finalCol = max(0.,dot(normal,lightPOV)) * vec3(0.,.5,1.);\n    finalCol +=  max(0.,dot(normal,lightPOV2)) * vec3(1.,.5,0.);\n    finalCol *= 0.8;\n    \n    vec3 fogCol = vec3(1.,0.8,0.7);\n    float rayLgth = length(pos.xyz-ro) * 0.005;\n    //finalCol *= vec3(pow(rayLgth,1.));\n    finalCol = mix(finalCol*pos.w,fogCol,rayLgth);\n    //finalCol += fogCol*rayLgth;\n    //finalCol += (1.-finalCol)*pow(max(0.,1.-fog),20.)*0.2 * (1.-pos.z*0.01);\n    if (height < 0.0 && pos.w > 0.1)\n    \tfinalCol *= 0.5;\n    \n    \n    fragColor = vec4(finalCol,1.0);\n}","name":"Image","description":"","type":"image"}]}