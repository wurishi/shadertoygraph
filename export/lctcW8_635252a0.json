{"ver":"0.1","info":{"id":"lctcW8","date":"1730595446","viewed":97,"name":"asymmetric blocks overlay layers","username":"jt","description":"Attempt to create more varied asymmetric blocks.\nBasic idea: create two layers of asymmetric blocks\n(aka odd tiles, irregular blocks, random rectangles,\n random-blocks-by-alternating-double-T-crossings)\nand combine the ids by color = hash34(vec4(id0,id1))","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["random","t","xor","double","block","overlay","difference","combine","layer","interleave","alternating","irregular","asymmetric"],"hasliked":0,"parentid":"mdcBR2","parentname":"asymmetric blocks compactified"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/lctcW8 asymmetric blocks overlay layers, 2024 by jt\n// based on https://www.shadertoy.com/view/mdcBR2 asymmetric blocks compactified\n\n// Attempt to create more varied asymmetric blocks.\n// Basic idea: create two layers of asymmetric blocks\n// (aka odd tiles, irregular blocks, random rectangles,\n//  random-blocks-by-alternating-double-T-crossings)\n// and combine the ids by xor or interleave bitwise or\n// simply do color = hash34(vec4(id0,id1)).\n\n// Click to show underlying grid.\n\n// playlist: https://www.shadertoy.com/playlist/cXsXRM double-t-crossing-checker-tiling\n\n// tags: random, t, xor, double, block, overlay, difference, combine, layer, interleave, alternating, irregular, asymmetric\n\n// The MIT License\n// Copyright (c) 2024 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\nfloat hash12(vec2 p) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n    vec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat hash13(vec3 p3) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n    p3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.zyx + 31.32);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec3 hash32(vec2 p) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n    vec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\n\nvec4 hash44(vec4 p4) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n    p4 = fract(p4 * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}\n\n// resolution of underlying grid\n#define RESEXP 3\n#define RES (1<<RESEXP)\n#define RESMASK (RES-1)\n\nint ihash(ivec2 v, int seed)\n{\n//return ivec2(0); // verify grid alignment\n    //return int(float(RES)*hash12(vec2(v)*123.45));\n    return int(float(RES)*hash13(vec3(v,seed)*123.45));\n}\n\n// https://www.shadertoy.com/view/DtjyWD integer division - rounding down\nivec2 div_floor(ivec2 a, int b) // vector version thanks to Fabrice\n{\n    ivec2  S = (sign(abs(a*b))-sign(a*b))/2; // 0 if a*b >= 0\n    return S * ((1 - abs(a)) / abs(b) - 1)+(1-S)*(a / b); // emulates ()?:\n}\n\n// this implementation avoids operator % for stability on windows XXX differs from original at 0 ? XXX\nivec2 mod_positive(ivec2 a, int b)\n{\n    return a - div_floor(a, b) * b;\n}\n\nstruct block\n{\n    ivec4 minmax;\n    ivec2 id;\n};\n\nint block_hash(ivec2 tile, int x, int y, bool choose, bool mirror, int seed)\n{\n    ivec2 d = (mirror?ivec2(y, x):ivec2(x, y));\n    //return int(ihash(ivec2(tile+d)*2+int(choose), seed) % int(RES))+(choose?d.y:d.x)*RES; // XXX windows: % breaks on negative XXX\n    return int(ihash(ivec2(tile+d)*2+int(choose), seed) & RESMASK)+(choose?d.y:d.x)*RES; // this should be windoze-proof\n}\n\n// Inspired by https://www.shadertoy.com/view/Ws3GRs Asymmetric Blocks by Shane,\n// and also by https://www.shadertoy.com/view/tsVGRz Oddtiles (optimized) by stb.\n// Checkerboard tiling of alternating (horizontal vs. vertical) (double-T-) crossings.\n// Returns minimum, maximum, id.\n// Severely compactified/crunched version.\nblock blocks_layout(ivec2 p, int seed) // https://www.shadertoy.com/view/mdcBR2 asymmetric blocks compactified by jt\n{\n    ivec2 tile = div_floor(p, RES); // global coordinates of tile\n    ivec2 local = p - tile * RES;\n\n    //bool flip = (tile.x % 2) != (tile.y % 2); // XXX breaks on windows XXX\n    bool flip = (tile.x & 1) != (tile.y & 1); // true: vertical line goes through, false: horizontal line goes through\n    //flip = !flip; // \"dual\" pattern (i.e. T-crossings flipped)\n\n    // | identity\n    // NW N NE\n    //  W C E\n    // SW S SE\n\n    // - transposed (NOTE: y-coordinate up but matrix y-index down!)\n    // SE W NE\n    //  N C S\n    // SW E NW\n\n    if(flip) // horizontal line goes through: swap vertical with horizontal\n    {\n        local = local.yx;\n    }\n\n    // vertical line goes through (on flip transpose for horizontal line)\n\n    //                 c\n    //   +-+---------+---+-------+\n    //   | |         |   |       |\n    //   | |         |   #-------+ d\n    // d +-#-#-------+---M       |\n    //   |   |       |   |       |\n    //   +---+-------+---+-------+\n    //   |   |       |   |       |\n    //   |   m-------+---#---#---+\n    //   +---#       |       |   |\n    //   |   |       |       |   |\n    //   +---+-------+-------+---+\n\n    int c = block_hash(tile, 0, 0, flip, flip, seed); // offset of central line\n\n    int x = 1-int(local.x < c); // [0,1]\n    int X = 2*x-1; // [-1,+1]\n\n    int d = block_hash(tile, X, 0,!flip, flip, seed); // offset of branching line\n\n    int y = 1-int(local.y < d); // [0,1]\n    int Y = 2*y-1; // [-1,+1]\n\n    ivec4 minmax =\n        ivec4\n        (\n            // block corner in (0,0) tile\n            c,\n            d,\n            // block corner in (X,Y) tile\n            block_hash(tile,X,Y, flip, flip, seed),\n            block_hash(tile,0,Y,!flip, flip, seed)\n        );\n\n    if(flip) tile = tile.yx;\n\n    minmax += tile.xyxy * RES;\n\n    ivec2 id = tile + ivec2(x,y);\n\n    if(flip) // horizontal line goes through: unswap vertical with horizontal\n    {\n        minmax = minmax.yxwz;\n        id = id.yx;\n    }\n\n    // fix order of min/max corners NOTE: defer division by 2 because center & extend could be half-integers!\n    ivec2 center2 = minmax.xy+minmax.zw;\n    ivec2 extent2 = abs(minmax.xy-minmax.zw);\n\n    minmax.xy = (center2-extent2)/2;\n    minmax.zw = (center2+extent2)/2;\n\n    return block(minmax, id);\n}\n\n#define scale (float(RES*3))\n\nvoid mainImage(out vec4 fragColor, in vec2 p)\n{\n    vec2 R = iResolution.xy;\n    p = (2.0 * p - R) / R.y;\n    vec2 m = iMouse.xy;\n    m = (2.0 * m - R) / R.y;\n\n    block b0 = blocks_layout(ivec2(floor(p*scale)), 0);\n    block b1 = blocks_layout(ivec2(floor(p*scale)), 1);\n    //block b0 = blocks_layout(ivec2(floor(p*scale)), +int(floor(iTime)));\n    //block b1 = blocks_layout(ivec2(floor(p*scale)), -int(floor(iTime)));\n\n    //vec3 color = hash32(vec2(b0.id)*123.456+1.0);\n    vec3 color = hash44(vec4(vec2(b0.id)*123.456+1.0,vec2(b1.id)*123.456+1.0)).xyz;\n    if(true)\n    {\n        // differences between pixel-position and corners\n        vec2 q0 = p-vec2(b0.minmax.xy)/scale;\n        vec2 q1 = p-vec2(b0.minmax.zw)/scale;\n\n        // visualize edges\n        color = min(color, vec3(smoothstep(0.005, 0.01,+q0.x)));\n        color = min(color, vec3(smoothstep(0.005, 0.01,+q0.y)));\n        color = min(color, vec3(smoothstep(0.005, 0.01,-q1.x)));\n        color = min(color, vec3(smoothstep(0.005, 0.01,-q1.y)));\n    }\n    if(true)\n    {\n        // differences between pixel-position and corners\n        vec2 q0 = p-vec2(b1.minmax.xy)/scale;\n        vec2 q1 = p-vec2(b1.minmax.zw)/scale;\n\n        // visualize edges\n        color = min(color, vec3(smoothstep(0.005, 0.01,+q0.x)));\n        color = min(color, vec3(smoothstep(0.005, 0.01,+q0.y)));\n        color = min(color, vec3(smoothstep(0.005, 0.01,-q1.x)));\n        color = min(color, vec3(smoothstep(0.005, 0.01,-q1.y)));\n    }\n    //vec3 color = vec3((b.id.x^b.id.y)&1);\n    if(iMouse.z > 0.0)\n    {\n        vec2 r = p*scale/2.0;\n        float pi = 3.1415926;\n        color *= mix(0.5, 1.0, step(0.0, sin(r.x*pi*2.0)*sin(r.y*pi*2.0)));\n        vec2 q = fract(p*scale/float(RES));\n        q = step(0.01, q);\n        //color = min(color, vec3(min(q.x, q.y)));\n        color = max(color, vec3(1.0-min(q.x, q.y)));\n    }\n\n    color = sqrt(color);\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}