{"ver":"0.1","info":{"id":"WtKyR1","date":"1610494530","viewed":405,"name":"man speaks","username":"regis","description":"man ","likes":4,"published":1,"flags":2,"usePreview":0,"tags":["3d","raymarch","man"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 tpos = vec4(0.0, 0.0, 0.0, 0.0);\nfloat angle_tpos;\nbool done = false;\nfloat dist = 0.0;\n\nmat2 Rot(float a){float s = sin(a);float c = cos(a);return mat2(c, -s, s, c);}\nmat3 RotX(float a){float s = sin(a);float c = cos(a);return mat3(1., .0, .0, .0, c, -s, .0, s, c);}\nmat3 RotY(float a){float s = sin(a);float c = cos(a);return mat3(c, .0, s, .0, 1., .0, -s, .0, c);}\nmat3 RotZ(float a){float s = sin(a);float c = cos(a);return mat3(c, -s, .0, s, c, .0, .0, .0, 1.);}\n\n\nfloat opExtrusion(in vec3 p, in float d, in float h) {\n    // d is the distance to the 2D shape using the x and y components of p\n    vec2 w = vec2(d, abs(p.z) - h);\n    return min(max(w.x, w.y), 0.0) + length(max(w, 0.0));\n}\n\n/*\nvec4 opElongate( in vec3 p, in vec3 h )\n{\n    //return vec4( p-clamp(p,-h,h), 0.0 ); // faster, but produces zero in the interior elongated box\n    \n    vec3 q = abs(p)-h;\n    return vec4( max(q,0.0), min(max(q.x,max(q.y,q.z)),0.0) );\n}*/\n\n\nvec3 opTwist(in vec3 p, in float t) {\n    float c = cos(t * p.y);\n    float s = sin(t * p.y);\n    mat2 m = mat2(c, -s, s, c);\n    return vec3(m * p.xz, p.y);\n}\n\n// from iq\nfloat Noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n  \tf = f*f*(3.0-2.0*f);\n  \tvec2 uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;\n  \tvec2 rg = textureLod( iChannel0, (uv+0.5)/256.0, 0.0).yx;\n  \treturn mix( rg.x, rg.y, f.z );\n}\n\n// ref https://www.shadertoy.com/view/Xs33Df\nfloat Noise3D(in vec3 p){\n    const vec3 s = vec3(7, 157, 113);\n\tvec3 ip = floor(p); // Unique unit cell ID.\n    vec4 h = vec4(0., s.yz, s.y + s.z) + dot(ip, s);\n\tp -= ip; // Cell's fractional component.\n    p = p*p*(3. - 2.*p);\n    h = mix(fract(sin(h)*43758.5453), fract(sin(h + s.x)*43758.5453), p.x);\n    h.xy = mix(h.xz, h.yw, p.y);\n    return mix(h.x, h.y, p.z); // Range: [0, 1].\n\t\n}\n\nvec2 hash( vec2 p )\n{\n\tp = vec2( dot(p,vec2(127.1,311.7)),\n\t\t\t dot(p,vec2(269.5,183.3)) );\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise( in vec2 p )\n{\n\tconst float K1 = 0.366025404; // (sqrt(3)-1)/2;\n\tconst float K2 = 0.211324865; // (3-sqrt(3))/6;\n\t\n\tvec2 i = floor( p + (p.x+p.y)*K1 );\n\t\n\tvec2 a = p - i + (i.x+i.y)*K2;\n\tvec2 o = (a.x>a.y) ? vec2(1.0,0.0) : vec2(0.0,1.0);\n\tvec2 b = a - o + K2;\n\tvec2 c = a - 1.0 + 2.0*K2;\n\t\n\tvec3 h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\t\n\tvec3 n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n\t\n\treturn dot( n, vec3(70.0) );\n}\n/*\nfloat sdEllipsoid( vec3 p, vec3 r )\n{\n  float k0 = length(p/r);\n  float k1 = length(p/(r*r));\n  return k0*(k0-1.0)/k1;\n}*/\n\nfloat sdCylinder(vec3 p, vec3 a, vec3 b, float r) {\n\tvec3 ab = b-a;\n    vec3 ap = p-a;\n    \n    float t = dot(ab, ap) / dot(ab, ab);\n    //t = clamp(t, 0., 1.);\n    \n    vec3 c = a + t*ab;\n    \n    float x = length(p-c)-r;\n    float y = (abs(t-.5)-.5)*length(ab);\n    float e = length(max(vec2(x, y), 0.));\n    float i = min(max(x, y), 0.)-0.1;\n    \n    return e+i;\n}\n\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n{\n  vec3 q = abs(p) - b;\n  return -(length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r);\n}\n\nfloat Box(vec3 p, vec3 sc, float r){\n    return length(max(abs(p)-sc, 0.))-r;\n}\n\nfloat Box2(vec3 p, vec3 sc, float r, float an){\n    an = 80.0;\n    vec3 cs = vec3(cos(an*3.1415/180.0), sin(an*3.1415/180.0),cos(an*3.1415/180.0));\n    float c2 = length(cs);\n    \n    float a = length(max( abs(p)-(sc)  , 0.0)) - r;\n    float b = length(max(abs(p)-vec3(1.0, 2.0, 1.0), 0.));\n    return a;\n}\n\nfloat Capsule(vec3 p, vec3 sc, float r){\n    vec3 cs = vec3(cos(90.0*3.1415/180.0), sin(90.0*3.1415/180.0),cos(90.0*3.1415/180.0));  \n    float a = length(max( abs(p)- (sc*cs)  , 0.0)) - r;\n    return a;\n}\n\nfloat opRep( in vec3 p, in vec3 c, vec3 sc, float r )\n{\n    vec3 q = mod(p+0.5*c,c)-0.5*c;\n    return Box( q, sc, r );\n}\n\nfloat opRepS( in vec3 p, in vec3 c, vec4 pos )\n{\n    vec3 q = mod(p+0.5*c,c)-0.5*c;\n    return length(q) - pos.w;\n}\n\nfloat Plane(vec3 p, vec3 n, float h){\n\n    return dot(p, n) + h;\n}\n\nvec3 add_tpos(vec3 tp){\n    return vec3(tp.x+tpos.x, tp.y+tpos.y, tp.z+tpos.z);\n    \n}\n\nvec3 rot_y(vec3 tp, float a){\n    tp.xz *= Rot(a);\n    return tp;\n\n}\n\nfloat noi(vec3 p){ \n  vec3 f=floor(p),s=vec3(7,157,113);\n  p-=f; vec4 h=vec4(0,s.yz,s.y+s.z)+dot(f,s);;\n  p=p*p*(3.-2.*p);\n  h=mix(fract(sin(h)*43758.5),fract(sin(h+s.x)*43758.5),p.x);\n  h.xy=mix(h.xz,h.yw,p.y);\n  return mix(h.x,h.y,p.z);  \n}\n\nfloat fbm(vec2 uv)\n{\n\tfloat f;\n\tmat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\n\tf  = 0.5000*noise( uv ); uv = m*uv;\n\tf += 0.2500*noise( uv ); uv = m*uv;\n\tf += 0.1250*noise( uv ); uv = m*uv;\n\tf += 0.0625*noise( uv ); uv = m*uv;\n\tf = 0.5 + 0.5*f;\n\treturn f;\n}\n\nvec4 eyel = vec4(-0.7,6.5, 3.75,0.3);\nvec4 eyer = vec4(0.7 ,6.5, 3.75, 0.3);\nvec2 sourcl = vec2(-0.7, 7.5);\nvec2 sourcr = vec2(0.7, 7.5);\n\nvec2 GetDist(vec3 p, vec2 uv){\n\n\n    vec4 s = eyel;\n    vec4 s2 = eyer;\n    \n    vec4 head = vec4(0.0, 6.0, 7.0, 3.);\n    \n    \n    vec2 d=vec2(0.0);;\n    float pd = dot(p, vec3(0.0, 1.0, 0.0));\n    \n     //#e2b1a8\n     \n    pd = p.y;\n   \n    //s.z += iTime;\n    //s.y += mod(iTime, 3.0);\n    vec3 sp = (p)-s.xyz;\n    //sp.xz *= Rot(iTime);\n    float sd = length((sp))-s.w;\n       \n       \n    \n    vec3 sp2 = (p)-s2.xyz;\n    //sp2.y += sin(iTime)*0.1;\n    float sd2 = length((sp2))-s2.w;\n    \n    \n    vec3 sph = (p)-head.xyz;\n    //sp2.y += sin(iTime)*0.1;\n    float sdh = length((sph))-head.w;\n    \n    vec3 bhead = p - vec3(0.0, 4.5, 5.0);\n    float sbhd = sdEllipsoid(bhead, vec3(2.5, 2.0, 3.0));\n    \n    \n    \n    vec4 tel = vec4(-0.8, 6.75, 3.35, 0.5);\n    vec3 tepl = p - tel.xyz;\n    float stepld = length(tepl)-tel.w;\n    \n    vec4 ter = vec4(0.8, 6.75, 3.35, 0.5);\n    vec3 tepr = p - ter.xyz;\n    float steprd = length(tepr)-ter.w;\n    \n    vec3 pn = p - vec3(0.0, 6.3-mod(iTime*0.1 ,0.1), 3.5);\n    pn *= RotX(-50.0*3.1415/180.0);\n    float snose = sdCone(pn, vec2(cos(77.*3.1415/180.0), sin(77.*3.1415/180.0)), 1.2, 0.2);\n    \n    vec4 stn1 = vec4(-.15, 5.65,2.3, 0.1);\n    sp2 = p-stn1.xyz;\n    float sdtn1 = length((sp2))-stn1.w;\n    \n    stn1 = vec4(.15, 5.65,2.3, 0.1);\n    sp2 = p-stn1.xyz;\n    float sdtn2 = length((sp2))-stn1.w;\n    \n    vec3 bouche = p - vec3(0.0, 4.9, 2.0);\n    float sbchd = sdEllipsoid(bouche, vec3(0.5, clamp(mod(iTime*0.3, 0.2), 0.1, 0.2), 0.5));\n    \n    pn = p - vec3(0.0, 5.9, 3.15);\n    pn *= RotX(-35.0*3.1415/180.0);\n    float sbec = sdCone(pn, vec2(cos(75.*3.1415/180.0), sin(75.*3.1415/180.0)), 1.2, 0.15);\n    \n    vec3 snp = p - vec3(0.0, 3.0, 3.0);\n    vec3 a = vec3(0.0, 3.0, 3.0);\n    vec3 b = vec3(0.0, 3.0, 1.0);\n    \n    vec2 se = sdSegment(p, vec3(0,2.5,3.00),  vec3(0.0,0.,3.) );\n    float sneckd = se.x-s.y*0.2;\n    //d = smax(d,-d2,0.04);\n    \n    vec3 cap = p - vec3(0.0, 4.0, 4.5);\n    cap.y += sin(cap.y+mod(iTime*0.2, 0.2));\n    float scap = sdEllipsoid(cap, vec3(3.5, 4.5, 3.5));\n    \n    vec3 spbc = p - vec3(0.0, 5.0, 5.5);\n    float sdbct = Box(spbc, vec3(5.0,5.0, 5.0), 0.0);\n    \n     cap = p - vec3(0.0, 4.0, 4.0);\n     cap.y += sin(cap.y+mod(iTime*0.2, 0.2));\n    float scap2 = sdEllipsoid(cap, vec3(3.2, 4.2, 3.2));\n    \n    float cut = smax(scap, -sdbct, 0.1);\n    cut = smax(cut, -scap2, 0.1);\n    \n    //\n    cap = p - vec3(-0.7, 6.5, 3.75);\n    float scapel = sdEllipsoid(cap, vec3(0.4, 0.4, 0.4));\n    \n    spbc = p - vec3(-0.7, 5.15, 3.75);\n    spbc.y -= mod(iTime, 0.5);\n    float sdbct2 = Box(spbc, vec3(1.0, 1.0, 1.0), 0.0);\n    \n    float cute = smax(scapel, -sdbct2, 0.4);\n    \n    cap = p - vec3(0.7, 6.5, 3.75);\n    scapel = sdEllipsoid(cap, vec3(0.4, 0.4, 0.4));\n    \n     spbc = p - vec3(0.7, 5.15, 3.75);\n     spbc.y -= mod(iTime, 0.5);\n     sdbct2 = Box(spbc, vec3(1.0, 1.0, 1.0), 0.0);\n    \n    float cute2 = smax(scapel, -sdbct2, 0.4);\n    \n    \n    float dhead = smin(sdh, sbhd, 2.0);\n    dhead = smax(dhead, -stepld, 0.5);\n    dhead = smax(dhead, -steprd, 0.5);\n    dhead = smin(dhead, snose, 0.1);\n    dhead = smax(dhead, -sdtn1, 0.1);\n    dhead = smax(dhead, -sdtn2, 0.1); \n    dhead = smax(dhead, -sbchd, 0.1); \n    dhead = smin(dhead, sbec, 0.1);\n    dhead = smin(dhead, sneckd, 0.3);\n             \n    float e = mod(iTime, 5.);\n    if(e >= 4.5){\n        dhead = smin(dhead, cute, 0.1);\n        dhead = smin(dhead, cute2, 0.1);\n    \n    }\n    \n     \n      d.x = sd;\n      d.y = -1.0;\n      \n       \n       if(sd2 < d.x)\n       {\n           d.x = sd2;\n          d.y = -2.0;\n       }\n       \n      if(dhead < d.x){\n          d.x = dhead;\n          d.y = 3.0;\n       }\n      /* if(scapel < d.x){\n          d.x = scapel;\n          d.y = 3.0;\n       }\n       if(sdbct2 < d.x){\n          d.x = sdbct2;\n          d.y = 1.0;\n       }*/\n       /*float e = mod(iTime, 5.);\n       if(e >= 4.){\n           if(cute < d.x){\n              d.x = cute;\n              d.y = 3.0;\n           }\n           if(cute2 < d.x){\n              d.x = cute2;\n              d.y = 3.0;\n           }\n       }*/\n      /* if(scap < d.x){\n          d.x = scap;\n          d.y = 3.0;\n       }*/\n       if(cut < d.x){\n          d.x = cut;\n          d.y = 1.0;\n       }\n       /*if(sdbct < d.x){\n          d.x = sdbct;\n          d.y = 3.0;\n       }\n       \n        /*if(stepld < d.x){\n          d.x = stepld;\n          d.y = 4.0;\n       }*/\n       \n       /*if(sbhd < d.x){\n          d.x = sbhd;\n          d.y = 4.0;\n       }*/\n           \n     /* if(pd < d.x){\n          d.x = pd;\n          d.y = 2.0;\n       }  */   \n       \n           \n     \n    return d;\n    \n    \n}\n\nvec3 RayMarch2(vec3 eye, vec3 viewRayDirection, vec2 uv){\n    vec3 t = vec3(0.);\n    float max = -100000.0;\n    vec2 dd;\n    float depth = 0.0, end = 10.0;\n    for (int i = 0; i < 100; i++) {\n        t.yz = GetDist(eye + t.x * viewRayDirection, uv).xy;\n        \n                    \n        if (t.y < 0.01)break;\n                \n        t.x += t.y;\n        \n        if (t.x >= 1000.0)break;\n        \n    }\n    if (t.x >= 1000.0)t.x = -1.0;\n    \n    return t;\n\n\n}\n\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = GetDist( aopos , vec2(1.0)).y;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\nvec3 GetLightM(vec3 p, vec2 uv, vec3 lg, out vec3 n, vec3 ro, vec3 rd){\n    vec3 lightpos = lg;\n    //lightpos.xz += vec2(sin(iTime), cos(iTime));\n    vec3 l = normalize(lightpos-p);\n    \n    vec2 d = GetDist(p, uv);\n    vec2 e = vec2(0.01, 0);\n    \n    \n    \n    \n    n = d.x - vec3(\n        GetDist(p-e.xyy, uv).x,\n        GetDist(p-e.yxy, uv).x,\n        GetDist(p-e.yyx, uv).x);\n\n\n    n = normalize(n);\n        \n    \n    float occ = calcAO(p, n);\n            \n    float dif = clamp(dot(n, l), .0, 1.);\n    dif += occ*0.3;\n \n    vec3 dd = RayMarch2(p+n*.01, l, uv);\n    p = ro + reflect(n, l) * dd.x;\n    \n        \n     \n    return vec3(dif);\n\n}\nvec3 lightDir = normalize( vec3(0.5,0.6,0.) );\nconst mat2 m2 = mat2( 0.60, -0.80, 0.80, 0.60 );\n//ref: https://www.shadertoy.com/view/Msdfz8\nvec3 Cloud(vec3 bgCol,vec3 ro,vec3 rd,vec3 cloudCol,float spd)\n{\n    vec3 col = bgCol;\n    float t = iTime * 0.15* spd;\n    vec2 sc = ro.xz + rd.xz*((3.)*40000.0-ro.y)/rd.y;\n    vec2 p = 0.00002*sc;\n    float f = 0.0;\n  \tfloat s = 0.5;\n  \tfloat sum =0.;\n  \tfor(int i=0;i<5;i++){\n    \tp += t;t *=1.5;\n    \tf += s*textureLod( iChannel0, p/256.0, 0.0).x; p = m2*p*2.02;\n    \tsum+= s;s*=0.6;\n  \t}\n    float val = f/sum; \n    col = mix( col, cloudCol, smoothstep(0.5,0.8,val) );\n    return col;\n}\nvec3 RayMarchCloud(vec3 ro,vec3 rd){\n    vec3 col = vec3(0.0,0.0,0.0);  \n    float sundot = clamp(dot(rd,lightDir),0.0,1.0);\n    \n     // sky      \n    col = vec3(0.2,0.5,0.85)*1.1 - rd.y*rd.y*0.5;\n    col = mix( col, 0.85*vec3(0.7,0.75,0.85), pow( 1.0-max(rd.y,0.0), 4.0 ) );\n    // sun\n    col += 0.25*vec3(1.0,0.7,0.4)*pow( sundot,5.0 );\n    col += 0.25*vec3(1.0,0.8,0.6)*pow( sundot,64.0 );\n    col += 0.4*vec3(1.0,0.8,0.6)*pow( sundot,512.0 );\n    // clouds\n    col = Cloud(col,ro,rd,vec3(1.0,0.95,1.0),1.);\n            // .\n    col = mix( col, 1.5*vec3(0.0,0.5,1.0), pow( 1.0-max(rd.y,0.0), 16.0 ) );\n    return col;\n}\n\n\nvec3 Eye(vec3 p, vec4 sp, vec2 uv){\n\n    vec3 col = vec3(1.0);\n    vec2 pp = p.xy-sp.xy;\n    float r = sqrt(dot(pp, pp));\n    float a = atan(pp.y, pp.x);\n\n    float ss = 0.5+0.5*sin(5.0*iTime);\n    float anim = 1.0 + 0.1*ss*clamp(r, 0.0, 1.0);\n    r*=anim;\n\n    if(length(p.xy-sp.xy) < .2){\n\n        col =  vec3(0.0, 0.3, 0.4);\n\n        float f = fbm(5.0*pp);\n        col = mix(col, vec3(0.2, 0.5, 0.4), f);\n\n        f = 1. - smoothstep(0.1, 0.15, r);\n        col = mix(col, texture(iChannel1, uv).rgb, f);\n\n        /*a += fbm(20.0*pp)*0.05;\n\n        f = smoothstep(0.15, 0.2, fbm(vec2(6.0*r, 20.0*a)) );\n        col = mix(col, vec3(1.0), f);\n\n        f = smoothstep(0.4, 0.9, fbm(vec2(10.0*r, 15.0*a)) );\n        col *= 1.0-0.5*f;\n\n        f = smoothstep(0.6, 0.8, r);\n        col *= 1.0 - 0.5*f;\n\n        f = smoothstep(0.2, 0.25, r);\n        col *= f;\n\n        f = 1.0-smoothstep(0.0, 0.5, length(pp - vec2(0.24, 0.2)) );\n        col += vec3(1.0, 0.9, 0.8)*f*0.9;\n\n        f = smoothstep(0.7, 0.8, r);\n        col = mix(col, vec3(1.0), f);*/\n\n    }\n    \n    return col;\n\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5;\n    uv /= vec2(iResolution.y / iResolution.x, 1);\n    // Time varying pixel color\n    vec3 col = vec3(0.0);\n    vec3 lightpos = vec3(0.0, 6., 0.);\n    \n    //iMouse.xy / iResolution.xy\n    vec3 lookat = vec3((iMouse.x/iResolution.x)*100.0, (iMouse.y/iResolution.y)*100.0, 30.0);//vec3(0.0, 1.5, 0.0);\n    vec3 ro = vec3(0, 7.0, -4.);\n    /*ro.z += iTime;//mod(iTime, 20.0)-4.;\n    lightpos.z += iTime;\n    lookat.z += iTime;\n    /*if(ro.z > 3.0){\n        ro.z = 3.0;\n        \n    }*/\n    \n    \n    float zoom = 1.0;    \n    vec3 f = normalize(lookat-ro),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f, r),\n        c = ro + f * zoom,\n        i = c + uv.x * r + uv.y * u,\n        rd = normalize(i-ro);\n        \n    \n        \n     vec3 t;\n     float dO, dif, dif2, dif3, difT;\n     vec3 p;\n     \n  \n     \n     t = RayMarch2(ro, rd, uv);\n     p = ro + rd * t.x;\n     \n    float alpha = 1.0;\n    vec3 n1, n2, n3, np;\n    \n  \n   vec3 diff2 = GetLightM(p, uv, lightpos, n1, ro, rd);\n    \n    //vec3 ph = phongIllumination(vec3(1.0), vec3(dif), vec3(1.0, 1.0, 0.0), 50.0, p, ro, uv, np);\n    \n     if(t.x > 0.0){\n         \n         \n         \n     \n     \n         \n         \n         if(t.z == 0.0){\n             //col = ph * vec3(0.0, 1.0, 0.0);\n         }\n         else if(t.z == 1.0){\n             col = diff2* vec3(1.0, 1.0, 1.0);\n         }\n         else if(t.z == 2.0){\n         \n             \n             col = diff2*vec3(.9, .9, .9);\n             \n         \n             alpha = 1.0;\n             \n             \n             \n             \n         }\n         else if(t.z == -1.0){\n             \n             vec4 sp = eyel;\n             \n             col = Eye(p, sp, uv+0.5)*diff2;\n             \n         }\n         else if(t.z == -2.0){\n             \n             vec4 sp = eyer;\n             \n             col = Eye(p, sp, uv+0.5)*diff2;\n             \n         }\n         else if(t.z == 3.0){\n            \n             col = diff2*vec3(0.88, 0.69, 0.65);\n             float f = smoothstep(0.5, 1., fbm(p.xy*25.0));\n             col =mix(col,  texture(iChannel0, vec2(fbm(p.xy*25.0)) ).rgb*0.2, f)  ;\n             \n             //#e2b1a8\n             vec2 sl = sourcl;\n             sl.y -= 0.4; \n             sl.x -= 0.4;\n             float a = 1.0;\n             \n             vec2 q = p.xy - sl;\n             \n             for(int i = 0;i < 10;i++){\n                 \n                 if(length(q) < 0.1){\n                     col = vec3(0.0)+noise(q.xy*2.0)*0.5;\n\n                 }\n                 float n = sl.x;\n                 sl.xy *= Rot(-a*3.1415/180.0);\n                 sl.x =  n+0.1;\n                 a += 0.1;\n                 q = p.xy - sl;\n                 \n             }\n             \n             \n             sl = sourcr;\n             sl.y -= 0.3; \n             sl.x -= 0.4;\n             a = 1.0;\n             \n             q = p.xy - sl;\n             \n             for(int i = 0;i < 10;i++){\n                 \n                 if(length(q) < 0.1){\n                     col = vec3(0.0)+noise(q.xy*2.0)*0.5;\n\n                 }\n                 float n = sl.x;\n                 sl.xy *= Rot(-a*3.1415/180.0);\n                 sl.x = n+0.1;\n                 a += 0.1;\n                 q = p.xy - sl;\n                 \n             }\n             \n                          \n             \n         \n         \n         }\n         else if(t.z == 4.0){\n             \n             col = diff2*vec3(1.0, 1.0, 0.0);\n             \n         }\n         else if(t.z == 5.0){\n            \n             \n             float NdotL = max( 0., dot( n1, lightpos-p ) );\n             float SpecularColor = 0.5;\n            SpecularColor = SpecularColor + ( 1. - SpecularColor ) * pow( ( 1. - NdotL ),2. );\n             \n             col = vec3(0.0, 0.8, 1.0) + SpecularColor*0.0001;\n             col = mix(col, diff2 * vec3(0.0, 0.8, 1.0), smoothstep(.0, 0.9, diff2));\n             \n             \n             //col =  diff2*vec3(1.0, 0.0, 1.0);\n             \n         }\n         \n        /* vec2 j = uv*3.0;\n         j.x += 0.0;\n         j.y += .1;\n         float sparkle = 1./dot(j,j);\n                \n         col += diff2*(sparkle*sin(mod(iTime*10.0, 3.1415))*0.01) ;\n    */\n       \n         \n         \n         \n     }\n     else\n     {\n         col = RayMarchCloud( ro, rd);\n     }\n    \n   \n    // Output to screen\n    fragColor = vec4((col),alpha);\n}\n\n\n\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Created by inigo quilez - iq/2020\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\n// Basic utility functions (sdfs, noises, shaping functions)\n// and also the camera setup which is shaded between the\n// background rendering code (\"Buffer A\" tab) and the character\n// rendering code (\"Image\" tab)\n\n\n\n// https://iquilezles.org/articles/smin\nfloat smin( float a, float b, float k )\n{\n    float h = max(k-abs(a-b),0.0);\n    return min(a, b) - h*h*0.25/k;\n}\n\n// https://iquilezles.org/articles/smin\nfloat smax( float a, float b, float k )\n{\n    k *= 1.4;\n    float h = max(k-abs(a-b),0.0);\n    return max(a, b) + h*h*h/(6.0*k*k);\n}\n\n// https://iquilezles.org/articles/smin\nfloat smin3( float a, float b, float k )\n{\n    k *= 1.4;\n    float h = max(k-abs(a-b),0.0);\n    return min(a, b) - h*h*h/(6.0*k*k);\n}\n\nfloat sclamp(in float x, in float a, in float b )\n{\n    float k = 0.1;\n\treturn smax(smin(x,b,k),a,k);\n}\n\n// https://iquilezles.org/articles/distfunctions\nfloat opOnion( in float sdf, in float thickness )\n{\n    return abs(sdf)-thickness;\n}\n\n// https://iquilezles.org/articles/distfunctions\nfloat opRepLim( in float p, in float s, in float lima, in float limb )\n{\n    return p-s*clamp(round(p/s),lima,limb);\n}\n\n\nfloat det( vec2 a, vec2 b ) { return a.x*b.y-b.x*a.y; }\nfloat ndot(vec2 a, vec2 b ) { return a.x*b.x-a.y*b.y; }\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat dot2( in vec3 v ) { return dot(v,v); }\n\n\n// https://iquilezles.org/articles/distfunctions\nfloat sdTorus( in vec3 p, in float ra, in float rb )\n{\n    return length( vec2(length(p.xz)-ra,p.y) )-rb;\n}\n\n// https://iquilezles.org/articles/distfunctions\nfloat sdCappedTorus(in vec3 p, in vec2 sc, in float ra, in float rb)\n{\n    p.x = abs(p.x);\n    float k = (sc.y*p.x>sc.x*p.z) ? dot(p.xz,sc) : length(p.xz);\n    return sqrt( dot(p,p) + ra*ra - 2.0*ra*k ) - rb;\n}\n\n// https://iquilezles.org/articles/distfunctions\nfloat sdSphere( in vec3 p, in float r ) \n{\n    return length(p)-r;\n}\n\n// https://iquilezles.org/articles/distfunctions\nfloat sdEllipsoid( in vec3 p, in vec3 r ) \n{\n    float k0 = length(p/r);\n    float k1 = length(p/(r*r));\n    return k0*(k0-1.0)/k1;\n}\n\n// https://iquilezles.org/articles/distfunctions\nfloat sdBox( in vec3 p, in vec3 b )\n{\n    vec3 d = abs(p) - b;\n    return min( max(max(d.x,d.y),d.z),0.0) + length(max(d,0.0));\n}\n\n// https://iquilezles.org/articles/distfunctions\nfloat sdArc( in vec2 p, in vec2 scb, in float ra )\n{\n    p.x = abs(p.x);\n    float k = (scb.y*p.x>scb.x*p.y) ? dot(p.xy,scb) : length(p.xy);\n    return sqrt( dot(p,p) + ra*ra - 2.0*ra*k );\n}\n\n#if 1\n// http://research.microsoft.com/en-us/um/people/hoppe/ravg.pdf\n// { dist, t, y (above the plane of the curve, x (away from curve in the plane of the curve))\nvec4 sdBezier( vec3 p, vec3 va, vec3 vb, vec3 vc )\n{\n  vec3 w = normalize( cross( vc-vb, va-vb ) );\n  vec3 u = normalize( vc-vb );\n  vec3 v =          ( cross( w, u ) );\n  //----  \n  vec2 m = vec2( dot(va-vb,u), dot(va-vb,v) );\n  vec2 n = vec2( dot(vc-vb,u), dot(vc-vb,v) );\n  vec3 q = vec3( dot( p-vb,u), dot( p-vb,v), dot(p-vb,w) );\n  //----  \n  float mn = det(m,n);\n  float mq = det(m,q.xy);\n  float nq = det(n,q.xy);\n  //----  \n  vec2  g = (nq+mq+mn)*n + (nq+mq-mn)*m;\n  float f = (nq-mq+mn)*(nq-mq+mn) + 4.0*mq*nq;\n  vec2  z = 0.5*f*vec2(-g.y,g.x)/dot(g,g);\n//float t = clamp(0.5+0.5*(det(z,m+n)+mq+nq)/mn, 0.0 ,1.0 );\n  float t = clamp(0.5+0.5*(det(z-q.xy,m+n))/mn, 0.0 ,1.0 );\n  vec2 cp = m*(1.0-t)*(1.0-t) + n*t*t - q.xy;\n  //----  \n  float d2 = dot(cp,cp);\n  return vec4(sqrt(d2+q.z*q.z), t, q.z, -sign(f)*sqrt(d2) );\n}\n#else\nfloat det( vec3 a, vec3 b, in vec3 v ) { return dot(v,cross(a,b)); }\n\n// my adaptation to 3d of http://research.microsoft.com/en-us/um/people/hoppe/ravg.pdf\n// { dist, t, y (above the plane of the curve, x (away from curve in the plane of the curve))\nvec4 sdBezier( vec3 p, vec3 b0, vec3 b1, vec3 b2 )\n{\n    b0 -= p;\n    b1 -= p;\n    b2 -= p;\n    \n    vec3  d21 = b2-b1;\n    vec3  d10 = b1-b0;\n    vec3  d20 = (b2-b0)*0.5;\n\n    vec3  n = normalize(cross(d10,d21));\n\n    float a = det(b0,b2,n);\n    float b = det(b1,b0,n);\n    float d = det(b2,b1,n);\n    vec3  g = b*d21 + d*d10 + a*d20;\n\tfloat f = a*a*0.25-b*d;\n\n    vec3  z = cross(b0,n) + f*g/dot(g,g);\n    float t = clamp( dot(z,d10-d20)/(a+b+d), 0.0 ,1.0 );\n    vec3 q = mix(mix(b0,b1,t), mix(b1,b2,t),t);\n    \n    float k = dot(q,n);\n    return vec4(length(q),t,-k,-sign(f)*length(q-n*k));\n}\n#endif\n\n// https://iquilezles.org/articles/distfunctions\nvec2 sdSegment(vec3 p, vec3 a, vec3 b)\n{\n    vec3 pa = p-a, ba = b-a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn vec2( length( pa - ba*h ), h );\n}\n\n// https://iquilezles.org/articles/distfunctions\nvec2 sdSegmentOri(vec2 p, vec2 b)\n{\n\tfloat h = clamp( dot(p,b)/dot(b,b), 0.0, 1.0 );\n\treturn vec2( length( p - b*h ), h );\n}\n\n// https://iquilezles.org/articles/distfunctions\nfloat sdFakeRoundCone(vec3 p, float b, float r1, float r2)\n{\n    float h = clamp( p.y/b, 0.0, 1.0 );\n    p.y -= b*h;\n\treturn length(p) - mix(r1,r2,h);\n}\n\n// https://iquilezles.org/articles/distfunctions\n/*float sdCone( in vec3 p, in vec2 c )\n{\n  vec2 q = vec2( length(p.xz), p.y );\n\n  vec2 a = q - c*clamp( (q.x*c.x+q.y*c.y)/dot(c,c), 0.0, 1.0 );\n  vec2 b = q - c*vec2( clamp( q.x/c.x, 0.0, 1.0 ), 1.0 );\n  \n  float s = -sign( c.y );\n  vec2 d = min( vec2( dot( a, a ), s*(q.x*c.y-q.y*c.x) ),\n\t\t\t    vec2( dot( b, b ), s*(q.y-c.y)  ));\n  return -sqrt(d.x)*sign(d.y);\n}*/\n\nfloat sdCone( in vec3 p, in vec2 c, float h , float r)\n{\n  // c is the sin/cos of the angle, h is height\n  // Alternatively pass q instead of (c,h),\n  // which is the point at the base in 2D\n  vec2 q = h*vec2(c.x/c.y,-1.0);\n    \n  vec2 w = vec2( length(p.xz), p.y );\n  vec2 a = w - q*clamp( dot(w,q)/dot(q,q), 0.0, 1.0 );\n  vec2 b = w - q*vec2( clamp( w.x/q.x, 0.0, 1.0 ), 1.0 );\n  float k = sign( q.y );\n  float d = min(dot( a, a ),dot(b, b));\n  float s = max( k*(w.x*q.y-w.y*q.x),k*(w.y-q.y)  );\n  return sqrt(d)*sign(s)-r;\n}\n\n\n// https://iquilezles.org/articles/distfunctions\nfloat sdRhombus(vec3 p, float la, float lb, float h, float ra)\n{\n    p = abs(p);\n    vec2 b = vec2(la,lb);\n    float f = clamp( (ndot(b,b-2.0*p.xz))/dot(b,b), -1.0, 1.0 );\n\tvec2 q = vec2(length(p.xz-0.5*b*vec2(1.0-f,1.0+f))*sign(p.x*b.y+p.z*b.x-b.x*b.y)-ra, p.y-h);\n    return min(max(q.x,q.y),0.0) + length(max(q,0.0));\n}\n\n// https://iquilezles.org/articles/distfunctions\nvec4 opElongate( in vec3 p, in vec3 h )\n{\n    vec3 q = abs(p)-h;\n    return vec4( max(q,0.0), min(max(q.x,max(q.y,q.z)),0.0) );\n}\n//-----------------------------------------------\n\n// ray-infinite-cylinder intersection\nvec2 iCylinderY( in vec3 ro, in vec3 rd, in float rad )\n{\n\tvec3 oc = ro;\n    float a = dot( rd.xz, rd.xz );\n\tfloat b = dot( oc.xz, rd.xz );\n\tfloat c = dot( oc.xz, oc.xz ) - rad*rad;\n\tfloat h = b*b - a*c;\n\tif( h<0.0 ) return vec2(-1.0);\n    h = sqrt(h);\n\treturn vec2(-b-h,-b+h)/a;\n}\n\n// ray-infinite-cone intersection\nvec2 iConeY(in vec3 ro, in vec3 rd, in float k )\n{\n\tfloat a = dot(rd.xz,rd.xz) - k*rd.y*rd.y;\n    float b = dot(ro.xz,rd.xz) - k*ro.y*rd.y;\n    float c = dot(ro.xz,ro.xz) - k*ro.y*ro.y; \n        \n    float h = b*b-a*c;\n    if( h<0.0 ) return vec2(-1.0);\n    h = sqrt(h);\n    return vec2(-b-h,-b+h)/a;\n}\n\n//-----------------------------------------------\n\nfloat linearstep(float a, float b, in float x )\n{\n    return clamp( (x-a)/(b-a), 0.0, 1.0 );\n}\n\nvec2 rot( in vec2 p, in float an )\n{\n    float cc = cos(an);\n    float ss = sin(an);\n    return mat2(cc,-ss,ss,cc)*p;\n}\n\nfloat expSustainedImpulse( float t, float f, float k )\n{\n    return smoothstep(0.0,f,t)*1.1 - 0.1*exp2(-k*max(t-f,0.0));\n}","name":"Common","description":"","type":"common"}]}