{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"music","id":"4dfGzn","filepath":"/media/a/ec8a6ea755d34600547a5353f21f0a453f9f55ff95514383b2d80b8d71283eda.mp3","sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"code":"mat4 rotateY(in float a)\n{\n   float cosa = cos(a);\n   float sena = sin(a);\n   return mat4( cosa, 0.0, -sena, 0.0,\n               0.0  , 1.0, 0.0, 0.0,\n               sena , 0.0, cosa , 0.0\t,\n               0.0  , 0.0, 0.0 , 1.0\t);\n}\n\nmat4 rotateX(in float a)\n{\n   float cosa = cos(a);\n   float sena = sin(a);\n   return mat4( 1.0, 0.0, 0.0, 0.0,\n             0.0,\tcosa , sena, 0.0,\n             0.0, -sena , cosa , 0.0,\n             0.0  , 0.0, 0.0 , 1.0\t);\n}\n\nmat4 rotateZ(in float a)\n{\n   float cosa = cos(a);\n   float sena = sin(a);\n   return mat4( cosa ,sena , 0.0,  0.0,\n                -sena, cosa, 0.0,   0.0,\n             \t0.0\t ,0.0  , 1.0,  0.0,\n             \t0.0  ,0.0  , 0.0,  1.0\t);\n}\n\n\n    \nbool intersectPlane(in vec3 o, in vec3 d, in vec3 p, in vec3 n, out float t)\n{\n\tfloat dotP=dot(d, n);\n\tif(abs(dotP)<0.001)\n\t\treturn false;\n\tt=-(dot(o,n)-dot(p,n))/dotP;\n\tif(t>0.0)\n        return true;\n\treturn false;\n}\n    \n\nfloat freq(in vec2 p)\n{\n    //im not sure if the histogram which appears on the display actually matches to output.\n    return texture(iChannel0, fract(vec2((p.x  + p.y) / (64.0 * 64.0), 0.0))).g;\n}\n\n\nvec3 camera(in vec3 dir)\n{\n    vec3 cam =  dir;\n   \n        \n    vec2 m = iMouse.xy;\n    m /= iResolution.xy;\n   \n    mat4 rotY = rotateY(-(m.x * 4.0 - 2.0));\n    mat4 rotX = rotateX(m.y * 4.0 - 2.0);\n\n\n    cam = normalize(vec3(rotY *rotX *  vec4(cam, 0.0))); \n    \n   return cam;\n}\n\n#define EPSILON 0.001\nbool rayAABB(in vec3 o, in vec3 d, in vec3 m, in vec3 p, out float t, out vec3 n)\n{\n    vec3 mins = p - m;\n    vec3 maxs = p + m;\n    vec3 tmin = (mins - o)/d;\n    vec3 tmax = (maxs - o)/d;\n    //swap min and max\n    if(tmax.x < tmin.x)\n    {\n        float aux = tmax.x;\n        tmax.x = tmin.x;     \n        tmin.x = aux;\n    }\n    if(tmax.y < tmin.y)\n    {\n        float aux = tmax.y;\n        tmax.y = tmin.y;     \n        tmin.y = aux;\n    }\n    if(tmax.z < tmin.z)\n    {\n        float aux = tmax.z;\n        tmax.z = tmin.z;     \n        tmin.z = aux;\n    }\n    \n    float t0 = tmin.x;\n    float t1 = tmax.x;\n       \n\n    \n    if((t0 > tmax.y) || (tmin.y > t1))\n        return false;\n   \tif (tmin.y > t0)\n        t0 = tmin.y;   \n    \n   \n    \n    if (tmax.y < t1)\n       t1 = tmax.y;\n    \n \n    if ((t0 > tmax.z) || (tmin.z > t1))\n        return false;\n    if (tmin.z > t0)\n    \t   t0 = tmin.z;   \n    \n\n    if (tmax.z < t1)\n        t1 = tmax.z;\n    \n    //if ((t0 > r.tmax) || (t0 < r.tmin)) return false;\n   \t/* if (r.tmin < tmin) r.tmin = tmin;\n    if (r.tmax > tmax) r.tmax = tmax;*/  \n  \t\n    \n    t = min(t0, t1);\n    \n    //get the normal\n    vec3 cp = t * d + o;\n    if(abs(cp.x - mins.x) < EPSILON)\n        n = vec3(-1.0, 0.0, 0.0);\n    else if(abs(cp.x - maxs.x) < EPSILON)\n        n = vec3(1.0, 0.0, 0.0);\n    else if(abs(cp.y - mins.y) < EPSILON)\n        n = vec3(0.0, -1.0, 0.0);\n    else if(abs(cp.y - maxs.y) < EPSILON)\n        n = vec3(0.0, 1.0, 0.0);\n    else if(abs(cp.z - mins.z) < EPSILON)\n        n = vec3(0.0, 0.0, -1.0);\n    else if(abs(cp.z - maxs.z) < EPSILON)\n        n = vec3(0.0, 0.0, 1.0);\n    \n    \n    return true;\n}\n#define WORLD_ROWS\t16\n#define WORLD_COLUMNS 16\n//#define SEP 0.0\n#define SCALEXZ 80.0\nconst float fh = -100.0;\nconst vec4 skyColor = vec4(0.0, 0.0, 0.7, 1.0);\nconst vec4 floorColor = vec4(0.7, 0.2, 0.1, 1.0);\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 ss = uv * 2.0 - vec2(1.0);//from 1.0 to -1.0\n\tss.y*= iResolution.y / iResolution.x;//aspect ratio\n\t\n   \t//vec3 o = vec3(0.0, sin(iTime * 1.1) * 1.0 + 2.0 ,-iTime * 2.0);\n    //vec3 o = vec3(0.0,0.0 ,400.0 * 2.0);\n \tvec3 lp = vec3(1600.0 * sin(iTime * 0.2), 100.0, 1600.0 * cos(iTime * 0.2));\n    vec3 o = vec3(800.0 * sin(iTime * 1.0) , 1200.0 , 800.0* cos(iTime * 1.0 ));\n    vec3 d = normalize(vec3(ss.x , ss.y , -1.0));\n    d = camera(d);\n    //float SEP = 20.0 * cos(iTime * freq(vec2(iTime, 0.0)));\n    float SEP = 200.0 * cos(iTime * 0.3) + 200.0;\n    vec3 fp = vec3(0.0, fh, 0.0);\n    vec4 color = skyColor * ss.y;//sky color\n\tfloat mint = 8000.0;\n    bool col = false;\n    float tmin;\n    float t;\n    vec3 n;\n    vec3 m = vec3(SCALEXZ,160.0,SCALEXZ);\n    vec3 p = vec3(float(-WORLD_ROWS / 2) * (SCALEXZ + SEP) * 2.0, fh,\n                  SEP * 4.0 * float(-WORLD_COLUMNS / 2));\n\tvec3 auxn;\n    vec3 cp;\n    \n    for(int i = 0; i < WORLD_ROWS; ++i)\n    {\n        p.x += (SCALEXZ + SEP) * 2.0;\n        p.z = (SCALEXZ + SEP) * 4.0 * float(-WORLD_COLUMNS / 2);\n        for(int j = 0; j < WORLD_COLUMNS; ++j)\n        {\n        \tp.z += (SCALEXZ + SEP) * 2.0;\n           \tfloat f = freq(p.xz);\n           \tp.y = fh + 4.0 * 160.0 * f;\n            m.y = 4.0 * 160.0 * f;\n            if(rayAABB(o,d,m,p,t,auxn) && t > 0.0 && (t < tmin || !col))\n            {\n                cp = (t ) * d +o;\n             \tcolor = mix(vec4(1.0, 0.1, 0.1, 1.0), vec4(0.1, 0.9, 0.2, 1.0), smoothstep(0.0, 1.0, fract(f)));\n   \t\t\t\tcolor =\t\tmix(vec4(0.9, 0.1, 0.7, 1.0), color, smoothstep(0.0, 1.0, fract(f - 0.5)));\n               tmin = t;\n                n = auxn ;\n             \tcol = true;   \n               // color = vec4(0.0, 0.8, 0.0, 1.0);\n               // tmin =\tmin(t, tmin);\n            }\n        }\n    }\n   \tif(col)\n    {\n        //phong shading\n        float diff = dot(n, normalize(lp - tmin * d + o)) * 1.3;\n        \n        color = diff * color;\n    }\n    //check floor\n    else\n    {\n        if(intersectPlane(o, d, fp, vec3(0.0,1.0, 0.0), t))\n        \tcolor = mix(floorColor, skyColor * ss.y, smoothstep(0.0, 6.0, (t / (4000.0) ))); \n        \n    }\n    \n   \tfragColor = color;\n\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"lsBXRV","date":"1413761539","viewed":213,"name":"Claustrophoby","username":"bolt304","description":"Some try using sound as input. A good way to have an epileptic attack. I should use some domain repetition for next one (none of my shaders seem fast enough), but right now my approaches are too naive","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["aabbraymarch"],"hasliked":0,"parentid":"","parentname":""}}