{"ver":"0.1","info":{"id":"MlGczt","date":"1537315240","viewed":194,"name":"Homestuck Aspect Life","username":"dahart","description":"Homestuck Aspect Life. Use mouse to scrub time.\nInspired by https://www.reddit.com/r/homestuck/comments/7gzgos/life_pixel_art/","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["2d","animation","life","pixelart","aspect","homestuck","feferi","glbgolyb","yokcos"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// https://www.reddit.com/r/homestuck/comments/7gzgos/life_pixel_art/ (found via https://www.reddit.com/user/yokcos700/posts?sort=top)\n// https://g.redditmedia.com/wsQ2RZgpaaI7gJ6iN1qSvxvE9PgloyPJ6sycUDtNhM0.gif?fm=mp4&mp4-fragmented=false&s=fe1f38884e7c869d01de06e032900290\n// https://www.reddit.com/r/PixelArt/comments/7j0h0t/homestuck_aspects_oc/\n// http://mspaintadventures.wikia.com/wiki/Aspect\n// http://mspaintadventures.wikia.com/wiki/Aspect?file=ZodiacAspects.png\n\nconst vec3 white  = vec3(1., 1., 1.);\nconst vec3 yellow = vec3(1., 1., .7);\nconst vec3 red    = vec3(.9, .1, .1);\nconst vec3 blue   = vec3(0., .2, .9);\nconst vec3 black  = vec3(0., 0., 0.);\n\nconst vec3 green   = vec3(.4, .8, .3);\nconst vec3 brown   = vec3(1., .6, .2)*.4;\n\n//#define PIXELATE\n\n// val is [0..1]. steps is output resolution. offset is the dither value (constant, rand, pwm, etc.)\nfloat dither(float val, float steps, float offset) {\n    return floor(val * steps + offset) / steps;\n}\n\n// leaves... or tentacles? bwahahaha\nvec4 lifeBGleaf(vec2 uv, vec3 layerColor, float time, float dx, float lx, float nLeaves, int ro) {\n    vec4 color = vec4(0.);\n    float tId = floor(uv.y * nLeaves);\n    float yMid = (tId + .5) / nLeaves;\n    \n    vec4 rnd = texelFetch(iChannel0, ivec2(tId, 3+ro), 0);\n    float amp = mix(.1, .5, rnd.x) * .5 / nLeaves;\n    float freq = uv.x*mix(.25, 2., rnd.y);\n    float y = yMid + rnd.z*.25/nLeaves + amp * .5 * sin(2.*tau*(freq+rnd.a+time*rnd.z*.5));\n    float l = mix(.15, .35, rnd.y);\n    float w = .02 * S(lx-l, lx-l/2., uv.x);\n    if (uv.x < lx) {\n        float d = abs(uv.y - y) - w;\n        if (d < dx) color = comp(color, premult(layerColor, S(0., -dx, d)));\n    }\n    return color;\n}\n\nvec4 lifeBG(vec2 uv, vec3 layerColor, float time, float dx, float lx, float nLeaves, int ro) {\n    vec4 color = vec4(0.);\n\n    // dither\n    const float n = 2.;\n    const float width = .3;\n    float nw = .015;\n    float dId = floor((uv.x+.5) / nw);\n    float dPWM = fract(dId / 4.);\n    float brightness = S(lx-width, lx, uv.x);\n    float db = dither(brightness, n-1., dPWM);\n    color = comp(color, premult(layerColor, db));\n\n    vec2 luv = vec2(uv.x, uv.y + .01 * sin(time*2.*tau));\n    color = comp(color, lifeBGleaf(luv, layerColor, time, dx, lx, nLeaves, ro));\n\n    luv = vec2(uv.x, uv.y + .5/nLeaves + .01 * cos(time*2.*tau));\n    color = comp(color, lifeBGleaf(luv, layerColor, time, dx, lx, nLeaves, ro+4));\n\n    return color;\n}\n\nvec4 lifeGl_bgolyb(vec2 uv, float time, float dx) {\n    vec4 color = vec4(0.);\n    \n    vec2 guv = uv;\n    // move Gl'bgolyb\n    guv.y += .01 * sin(time*2.*tau); \n    // shape Gl'bgolyb\n    guv.y += .02 * L(.6, .9, uv.x);\n    guv.y = .5 + (1.+.2*L(.8,1.05,uv.x))*(guv.y-.5);\n    guv.y = .5 + (1.+.2*L(.55,.75,uv.x))*(guv.y-.5);\n    \n    float d = sdFatLine2(guv, vec3(.7, .5, .08), vec3(1.1, .5, .15));\n    \n    if (d < dx) {\n        const float edgeWidth = .01;\n        float edgie = S(-edgeWidth-dx, -edgeWidth, d);\n        vec3 rgb = mix(mix(yellow*.9, brown, .5), brown, edgie);\n        color = comp(color, premult(rgb, S(0., -dx, d)));\n        \n        if (guv.y < .5+dx && guv.y > .43-dx && guv.x > .63) {\n            float dribbleY = mix(.43, .49, texture(iChannel0, vec2(guv.x/2., .51)).r);\n            color = comp(color, premult(brown, S(.5, .5-dx, guv.y)*S(dribbleY, dribbleY+dx*2., guv.y)));\n        }\n        \n        // shadow\n        float y = .42;\n        if (guv.y < y+dx) {\n            color = comp(color, premult(brown, S(y, y-dx, guv.y)*S(0., -dx, d)));\n        }\n        \n        // highlight\n        y = .55;\n        float hw = .02 * texture(iChannel0, vec2(guv.x/5., .2)).g * S(.7, .9, guv.x);\n        float hw1 = -.04 - hw;\n        float hw2 = -.04 + hw;\n        if (guv.y > .5 && d > hw1 && d < hw2) {\n            color = comp(color, premult(mix(yellow*.9, brown, .25), S(hw1, hw1+dx, d) * S(hw2, hw2-dx, d) ));\n        }\n        \n    }\n\treturn color;\n}\n\nvec4 lifeBubbles(vec2 uv, vec2 pos, vec3 edgeColor, float time, float dx) {\n    vec4 color = vec4(0.);\n    const float rad = .05;\n    const float travel = .3;\n    const float wiggle = .01;\n    const float pop = 1.25;\n    \n    if (uv.x < pos.x-pop*rad-wiggle || \n        uv.x > pos.x+pop*rad+wiggle || \n        uv.y < pos.y-pop*rad        || \n        uv.y > pos.y+pop*rad+travel) \n    {\n        return color;\n    }\n    \n    //color += .2; // show bounds\n    \n    vec2 center = vec2(pos.x+wiggle*sin(tau*time*2.), pos.y+travel*time);\n    vec2 relpos = uv - center;\n    bool doSpec = true;\n    if (time > .95) {\n        float a = d2a(relpos);\n        relpos /= pop*(.2 + .5*sin(a*7.) + .5*(time-.95)/.05);\n        doSpec = false;\n    }\n    float d = sdCircle(relpos, rad);\n    if (d < dx) {\n        const float edgeWidth = .01;\n        float edgie = S(-edgeWidth-dx, -edgeWidth, d);\n        vec4 rgba = mix(premult(edgeColor, .1), premult(edgeColor, 1.), edgie*S(0., -dx, d));        \n        color = comp(color, rgba);\n        if (doSpec) {       \n            float specD = sdCircle(uv - (center + .25*rad*vec2(-1.,1.)), rad/3.);\n            if (specD < dx) color = comp(color, premult(white, S(0., -4.*dx, specD)));\n        }\n    }\n    return color;\n}\n\nvec4 lifeSymbol(vec2 uv, float time, float dx)  {\n    vec4 color = vec4(0.);\n    \n    const float edgeWidth = .01;\n    \n    const vec3[] pts = vec3[16](\n        vec3(.40, .080, .075),\n        vec3(.55, .080, .080),\n        vec3(.65, .160, .075),\n        vec3(.68, .350, .070),\n        vec3(.60, .500, .055),\n        vec3(.47, .610, .050),\n        vec3(.42, .710, .040),\n        vec3(.44, .800, .038),\n        vec3(.49, .830, .036),\n        vec3(.53, .815, .033),\n        vec3(.54, .780, .030),\n        vec3(.53, .740, .023),\n        vec3(.50, .700, .010),\n        v30,v30,v30\n    );\n    const int npts = 13;\n\n    Hit hit = calcCurveHit(uv, npts, pts);\n    hit.dBound = sdSubtract(hit.dBound, sdBox2(uv - vec2(.36, .09), vec2(0.04, 0.08) ));\n    hit.dBound = sdSubtract(hit.dBound, sdBox2(uv - vec2(.53, .02), vec2(0.15, 0.03) ));\n    \n    if (hit.dBound > dx && uv.y < .55 && uv.y > .15 && uv.x < .55) {\n        const vec3[] pts2 = vec3[16](\n            vec3(.40, .220, .034),\n            vec3(.48, .220, .034),\n            vec3(.51, .250, .034),\n            vec3(.51, .295, .034),\n            vec3(.48, .320, .034),\n            vec3(.44, .318, .034),\n            vec3(.40, .310, .034),\n            vec3(.33, .320, .032),\n            vec3(.29, .390, .030),\n            vec3(.30, .470, .025),\n            vec3(.35, .550, .000),\n            v30,v30,v30,v30,v30\n        );\n        const int npts2 = 11;\n\n        hit = calcCurveHit(uv, npts2, pts2);\n        hit.dBound = sdSubtract(hit.dBound, sdBox2(uv - vec2(.38, .22), vec2(0.02, 0.04) ));\n    }\n    \n    if (hit.dBound < dx) {\n        float alpha = S(0., -dx, hit.dBound);\n        float edgie = S(-edgeWidth-dx, -edgeWidth, hit.dBound);\n        //vec3 lightDir = normalize(vec3(cos(5.*iTime), sin(5.*iTime), -.85));\n        vec3 lightDir = normalize(vec3(1.5, -1., -.02));\n        vec3 normal = calcCurveRoundNormal(uv, hit);\n        float dl = dot(normal, lightDir);\n        float ds = pow(max(0., -dot(normal, normalize(vec3(.25, -.2, -.5)))), 20.); \n        //dx = fwidth(dl);\n\n        float diff = S(.1, -.1, dl);\n        color = comp(color, premult(mix(mix(green*.6, green, diff), brown, edgie), alpha));\n        color = comp(color, premult(white, ds*(1.-edgie)));\n    }\n\n    return color;\n}\n\n\nvec4 lifeFeferi(vec2 uv, float time, float dx) {\n    vec4 color = vec4(0.);\n    vec2 huv = vec2(mirror(uv.x), uv.y);\n\n    if (huv.y > .28 || huv.x < .18 || huv.x > .36) return color;\n    //color += .1; // show bound\n\n    float x = unlerp(.125, .27, huv.y);\n    huv.x -= .02*(1.-x*x);\n    \n    float d = sdFatLine2(huv, vec3(.3, -.01, .05), vec3(.2, .25, .02));\n    if (d < dx) color = comp(color, premult(white*.3, S(0., -dx, d)));\n    return color;\n}\n\n\nvec4 Life( vec2 uv, float time, float dx ) {\n    float r = length(uv);\n\t//float dx = fwidth(r)*1.5;\n    \n    float phaseTime = fract(time);\n    float phaseTimeEaseOut = sqrt(1.-sqr(1.-phaseTime));\n    float phaseTimeEaseOutFast = sqrt(1.-sqr(1.-min(phaseTime/.5, 1.)));\n        \n    // background\n    vec4 color = vec4(yellow*.9, 1.);//nop.yyyy;\n    //color = comp(color, bg(uv, mix(yellow*.9, brown, uv.x), phaseTime, dx));\n    \n    color = comp(color, lifeBG(uv, mix(yellow*.9, brown, .25), time, dx, 0.45, 3., 0));\n    color = comp(color, lifeBG(uv, mix(yellow*.9, brown, .50), time, dx, 0.70, 5., 1));\n    color = comp(color, lifeBG(uv, mix(yellow*.9, brown, .75), time, dx, 0.85, 4., 2));\n    color = comp(color, lifeBG(uv, mix(yellow*.9, brown, 1.0), time, dx, 1.05, 3., 3));\n    \n    float btime = fract(1.5*time);\n    color = comp(color, lifeBubbles(uv, vec2(.15, 0.), mix(yellow*.9, brown, .25), btime, dx));\n    btime = fract(1.2*(time+.5));\n    color = comp(color, lifeBubbles(uv, vec2(.85, .6), mix(yellow*.9, brown, 1.), btime, dx));\n    \n    color = comp( color, lifeGl_bgolyb( uv, phaseTime, dx) );\n    \n    // symbol\n    if (uv.x > .22 && uv.x < .71 && uv.y < .88) {\n\t    vec2 luv = vec2(uv.x+.04, uv.y+.01*sin(4.*iTime));\n    \tcolor = comp(color, lifeSymbol(luv, phaseTime, dx));\n    \t//color += .1; // show bound\n    }\n    \n    color = comp(color, lifeFeferi(uv, phaseTime, dx));\n\n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float margin = .5 * (iResolution.x - iResolution.y);\n\tvec2 uv = (fragCoord.xy - X*margin) / iResolution.yy;\n    float dx = fwidth(length(uv)) * 1.5;\n\n    float mouseU = (iMouse.x - margin) / (iResolution.x - 2.*margin);\n    float time = iTime + mouseU;\n    \n#ifdef PIXELATE\n    uv = floor(uv * 64.) / 64.;\n    time = floor(time * 16.) / 16.;\n#endif // PIXELATE\n\n    fragColor = vec4(0.);\n    if (uv.x >= 0.0 && uv.x <= 1.0) fragColor = Life(uv, time, dx);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"\n#define S(a,b,t) smoothstep(a,b,t)\n#define H(a,b,t) (step(a,t)*(1.-step(b,t)))\n#define unlerp(a,b,t) ((t-a)/(b-a))\n#define v30 vec3(0.)\n\n// lump between a and b. \n// returns 0 when t is outside [a,b]\n// returns 1 at t=(a+b)/2.\n// smoothstep from center to either end (t==a, t==b)\nfloat L(float a, float b, float t) {\n    float u = unlerp(a, b, t);\n    return S(0., 1., 2.*u) * S(0., 1., 2. - u*2.);\n}\n\n// take [0, 1], return [0, .5] + [.5, 0]\nfloat mirror(float x) { return .5-abs(x-.5); }\n\nfloat N(float t) {\n\treturn fract(sin(t*10234.324)*123423.23512);\n}\n\n// remove r from n, i.e., project n onto plane with normal r\nvec3 remove(vec3 n, vec3 r) {\n    return n - r * dot(n, r) / dot(r, r);\n}\nvec2 remove(vec2 n, vec2 r) {\n    return n - r * dot(n, r) / dot(r, r);\n}\n\nvec2 rot90(vec2 v) {\n    return vec2(v.y, -v.x);\n}\n\nconst vec2 X = vec2(1., 0.);\nconst vec3 nop = vec3(-1., 0., 1.);\nconst float pi = 4. * atan(1.); //3.14159265358979323;\nconst float tau = 8. * atan(1.); //2. * pi;\nconst float maxFloat = intBitsToFloat(0x7f7fffff);\n\nvec4 premult(vec4 color) {\n    return vec4(color.rgb * color.a, color.a);\n}\n\nvec4 premult(vec3 rgb, float alpha) {\n    return vec4(rgb * alpha, alpha);\n}\n\nvec4 comp(vec4 bg, vec4 fg) {\n    return fg + bg * (1. - fg.a);\n}\n    \nvec4 comp(vec4 bg, vec3 fg, float a) {\n    return vec4(fg + bg.rgb * (1. - a), bg.a + a);\n}\n    \nvec3 comp(vec3 bg, vec3 fg, float a) {\n    return fg + bg * (1. - a);\n}\n\n//https://www.shadertoy.com/view/ltXSDB\n// Solve cubic equation for roots\nvec3 solveCubic(float a, float b, float c)\n{\n    float p = b - a*a / 3., p3 = p*p*p;\n    float q = a * (2.*a*a - 9.*b) / 27. + c;\n    float d = q*q + 4.*p3 / 27.;\n    float offset = -a / 3.;\n    if(d >= 0.) { \n        float z = sqrt(d);\n        vec2 x = (vec2(z, -z) - q) / 2.;\n        vec2 uv = sign(x)*pow(abs(x), vec2(1./3.));\n        return vec3(offset + uv.x + uv.y);\n    }\n    float v = acos(-sqrt(-27. / p3) * q / 2.) / 3.;\n    float m = cos(v), n = sin(v)*1.732050808;//sqrt(3.);\n    return vec3(m + m, -n - m, n - m) * sqrt(-p / 3.) + offset;\n}\n\n// Test if point p crosses line (a, b), returns sign of result\nfloat testCross(vec2 a, vec2 b, vec2 p) {\n    return sign((b.y-a.y) * (p.x-a.x) - (b.x-a.x) * (p.y-a.y));\n}\n\n// Determine which side we're on (using barycentric parameterization)\nfloat signBezier(vec2 A, vec2 B, vec2 C, vec2 p)\n{ \n    vec2 a = C - A, b = B - A, c = p - A;\n    vec2 bary = vec2(c.x*b.y-b.x*c.y,a.x*c.y-c.x*a.y) / (a.x*b.y-b.x*a.y);\n    vec2 d = vec2(bary.y * 0.5, 0.0) + 1.0 - bary.x - bary.y;\n    return mix(sign(d.x * d.x - d.y), mix(-1.0, 1.0, \n        step(testCross(A, B, p) * testCross(B, C, p), 0.0)),\n        step((d.x - d.y), 0.0)) * testCross(A, C, B);\n}\n\n//https://www.shadertoy.com/view/ltXSDB\n// Find the signed distance from a point to a bezier curve\n// returns a vec4: (dist to boundary, dist to curve, sign, parameter [0-1])\nvec4 sdBezier(vec2 p, vec3 A, vec3 B, vec3 C)\n{    \n    //B = (4.0 * B - A - C) / 2.0;\n    // handle instability when B is midpoint between A and C\n    //B = vec3(mix(B.xy + vec2(1e-4), B.xy, abs(sign(B.xy * 2.0 - A.xy - C.xy))), B.z);\n    \n    vec3 a = B - A;\n    vec3 b = A - B * 2.0 + C;\n    vec3 c = a * 2.0;\n    vec2 d = A.xy - p;\n    \n    vec3 k = vec3(3.*dot(a.xy,b.xy),2.*dot(a.xy,a.xy)+dot(d.xy,b.xy),dot(d.xy,a.xy)) / dot(b.xy,b.xy);      \n    vec3 t = clamp(solveCubic(k.x, k.y, k.z), 0., 1.);\n    vec3 it = vec3(1.0) - t;\n\n    vec3 pos0 = A + (c + b*t.x)*t.x;\n    vec3 pos1 = A + (c + b*t.y)*t.y;\n    vec3 pos2 = A + (c + b*t.z)*t.z;\n\n    float dis0 = length(pos0.xy - p) - pos0.z;\n    float dis1 = length(pos1.xy - p) - pos1.z;\n    float dis2 = length(pos2.xy - p) - pos2.z;\n    \n\tfloat minT = t.x;\n    vec3 minP = pos0;\n\tfloat minDis = dis0;\n\tif (dis1 < minDis) { minDis = dis1; minT = t.y; minP = pos1; }\n\tif (dis2 < minDis) { minDis = dis2; minT = t.z; minP = pos2; }\n            \n    return vec4(minDis, minDis + minP.z, signBezier(A.xy, B.xy, C.xy, p), minT);\n}\n\nfloat sdBezierMin2(vec2 p, vec3 a, vec3 b, vec3 c, float dist) {\n    vec4 d = sdBezier(p, a, b, c);\n    if (d.x < dist) return d.x;\n    else return dist;\n}\n\nvec4 sdBezierMin2(vec4 d, vec2 p, vec3 a, vec3 b, vec3 c) {\n    vec4 e = sdBezier(p, a, b, c);\n    if (d.x < e.x) e = d;\n    return e;\n}\n\nfloat sdBezier2(vec2 p, vec3 a, vec3 b, vec3 c) {\n    vec4 d = sdBezier(p, a, b, c);\n    return d.x;\n}\n\n// returns a vec4: (dist to boundary, dist to curve, sign, parameter [0-1])\nvec4 sdCurve(vec2 p, int n, vec3[16] pts) {\n    int nn = n - 1;\n    vec4 d = vec4(maxFloat);    \n    vec3 pp1 = mix(pts[0], pts[1], -0.001), pp2;\n    float oofn = 1. / (float(n));\n    vec4 e;\n    for (int i = 0; i < nn; i++) {\n        pp2 = .5 * (pts[i] + pts[i+1]);\n        e = sdBezier(p, pp1, pts[i], pp2);\n        pp1 = pp2;\n        if (e.x < d.x) d = vec4(e.xyz, (e.w+float(i))*oofn);\n    }\n    pp2 = pts[nn];\n    e = sdBezier(p, pp1, pts[nn], pp2);\n    if (e.x < d.x) d = vec4(e.xyz, (e.w+float(nn))*oofn);\n\n    // signBezier fails on the first & last segments, here's a patch\n    if (d.w <= oofn) {\n        d.z = dot(p - pts[0].xy, rot90( pts[0].xy - pts[1].xy ) ) < 0. ? 1. : -1.;\n    }\n    else if (d.w >= 1.-oofn) {\n    \td.z = dot(p - pts[nn].xy, rot90( pts[nn-1].xy - pts[nn].xy ) ) < 0. ? 1. : -1.;\n    }\n\n    return d;\n}\n\nvec4 sdCurveSeg(vec4 d, vec2 p, int n, int i, vec3 a, vec3 b, vec3 c) {\n    vec4 e = sdBezier(p, a, b, c);\n    if (e.x < d.x) {\n        e = vec4(e.xyz, (e.w+float(i))/float(n+1));\n    }\n    else e = d;\n    return e;\n}\n\nvec4 sdCurveMid(vec4 d, vec2 p, int n, int i, vec3 a, vec3 b, vec3 c) {\n    vec4 e = sdBezier(p, mix(a,b,.5), b, mix(b,c,.5));\n    if (e.x < d.x) {\n        e = vec4(e.xyz, (e.w+float(i))/float(n));\n    }\n    else e = d;\n    return e;\n}\n\nvec4 sdCurveBgn(vec4 d, vec2 p, int n, int i, vec3 a, vec3 b, vec3 c) {\n    vec4 e = sdBezier(p, a, a, mix(a,b,.5));\n    if (e.x < d.x) {\n        e = vec4(e.xyz, (e.w+float(i))/float(n));\n        // signBezier fails on the first & last segments, here's a patch\n        e.z = dot(p - a.xy, rot90( a.xy - b.xy ) ) < 0. ? 1. : -1.;\n    }\n    else e = d;\n    \n    e = sdCurveMid(e, p, n, i+1, a, b, c);\n    \n    return e;\n}\n\nvec4 sdCurveEnd(vec4 d, vec2 p, int n, int i, vec3 a, vec3 b, vec3 c) {\n    vec4 e = sdBezier(p, mix(b,c,.5), c, c);\n    if (e.x < d.x) {\n        e = vec4(e.xyz, (e.w+float(i+1))/float(n));\n        // signBezier fails on the first & last segments, here's a patch\n        e.z = dot(p - c.xy, rot90( b.xy - c.xy ) ) < 0. ? 1. : -1.;\n    }\n    else e = d;\n    \n    e = sdCurveMid(e, p, n, i, a, b, c);\n    \n    return e;\n}\n\n// 2 output vectors: curvePoint, curveTangent\nvoid evalBezier(float t, vec2 a, vec2 b, vec2 c, out vec2 curvePoint, out vec2 curveTangent) {\n    t = clamp(t, 0., 1.);\n    curvePoint = mix(mix(a, b, t), mix(b, c, t), t);\n    curveTangent = 2. * (( a + c - 2. * b ) * t + ( b - a ));\n}\n\n// 2 output vectors: curvePoint, curveTangent\nvoid evalCurve(float t, int n, vec3[16] pts, out vec2 curvePoint, out vec2 curveTangent) {\n    float nt = clamp(t, 0.0001, .9999) * float(n);\n    int j = int(nt);\n    int i = max(0, j - 1);\n    int k = min(n-1, j + 1);\n    float tSegment = nt - float(j);\n    \n    vec2 a = pts[i].xy;\n    vec2 b = pts[j].xy;\n    vec2 c = pts[k].xy;\n    \n    a = mix(a, b, .5);\n    c = mix(b, c, .5);\n    \n    curvePoint = mix(mix(a, b, tSegment), mix(b, c, tSegment), tSegment);\n  \tvec2 ba = b-a;\n   \tcurveTangent = 2. * (( c - b - ba ) * tSegment + ( ba ));\n}\n\nstruct Hit {\n    float dBound;\n    float dCurve;\n    float sign;\n    vec2 pos;\n    vec2 tangent;\n    vec3 normal;\n    vec2 uv;\n};\n\n// vec4 d is the same format as return from sdBezier: vec4( dBound, dCurve, sign, param )\nvec2 calcBezierUv(float dBound, float dCurve, float sign, float param) {\n    return vec2(param, .5 + .5 * sign * dCurve / (abs(dBound) + dCurve));\n}\n\nHit calcBezierHit(vec2 uv, vec3 a, vec3 b, vec3 c) {\n    Hit hit;\n    vec4 d = sdBezier(uv, a, b, c);\n    hit.dBound = d.x;\n    hit.dCurve = d.y;\n    hit.sign = d.z;\n    hit.uv = calcBezierUv(d.x, d.y, d.z, d.w);\n    evalBezier(d.w, a.xy, b.xy, c.xy, hit.pos, hit.tangent);\n    float z = sin(hit.uv.y * pi);\n    hit.normal = normalize(vec3( (1.-z)*normalize(uv - hit.pos), .25*z));\n    return hit;\n}\n\nHit calcCurveHit(vec2 uv, int n, vec3[16] pts) {\n    Hit hit;\n    vec4 d = sdCurve(uv, n, pts);\n    hit.dBound = d.x;\n    hit.dCurve = d.y;\n    hit.sign = d.z;\n    hit.uv = calcBezierUv(d.x, d.y, d.z, d.w);\n    evalCurve(d.w, n, pts, hit.pos, hit.tangent);\n    float z = sin(hit.uv.y * pi);\n    hit.normal = normalize(vec3( (1.-z)*normalize(uv - hit.pos), .25*z));\n    return hit;\n}\n\nvec3 calcCurveRoundNormal(vec2 uv, Hit hit) {\n    float z = sin(hit.uv.y * pi);\n    return normalize(vec3( (1.-z)*normalize(uv - hit.pos), .25*z));\n}\n\nvec3 calcCurveTentNormal(vec2 uv, Hit hit) {\n    float z = abs(hit.uv.y);\n    return normalize(vec3( (1.-z)*normalize(uv - hit.pos), .25*z));\n}\n\n// a & b are two points w/ radius. a.xy = 2d point, a.z = radius\n// u=along curve v=perpendicular\n// bend should be [0,1], usually small like .1\n// bendWidth default should be .5. Increase for a smoother bend.\nfloat sdBentLine(vec2 p, vec3 a, vec3 b, float bend, float bendWidth /*, out float distToCurve, out vec2 uv*/) {\n    vec2 d = b.xy - a.xy;\n    \n    vec2 pd = p - a.xy;\n    float t = dot(pd, d) / dot(d, d);\n    t = min(1., max(0., t));\n    vec2 cp = a.xy + t * d;\n    cp += bend*rot90(d)*L(.5-bendWidth, .5+bendWidth, t);\n    \n    vec2 n = p - cp;\n    float distToCurve = length(n); // optionally output this\n    \n    // remember a.z & b.z are radius\n    float cr = mix(a.z, b.z, t);\n    float v = .5 + .5 * dot(vec2(-pd.y, pd.x), normalize(d)) / cr;\n    vec2 uv = vec2(t, v); // optionally output this\n\n    float distToBoundary = distToCurve - cr;\n    return distToBoundary;\n}\n\n// a & b are two points w/ radius. a.xy = 2d point, a.z = radius\n// u=along curve v=perpendicular\nfloat sdFatLine2All(vec2 p, vec3 a, vec3 b, out float distToCurve, out vec2 uv) {\n    vec2 d = b.xy - a.xy;\n    vec2 pd = p - a.xy;\n    float t = dot(pd, d) / dot(d, d);\n    t = min(1.0, max(0.0, t));\n    vec2 cp = a.xy + t * d;\n    \n    vec2 n = p - cp;\n    distToCurve = length(n);\n    \n    // remember a.z & b.z are radius\n    float cr = mix(a.z, b.z, t);\n    float v = .5 + .5 * dot(vec2(-pd.y, pd.x), normalize(d)) / cr;\n    uv = vec2(t, v);\n\n    float distToBoundary = distToCurve - cr;\n    \n    return distToBoundary;\n}\n\nfloat sdFatLine2(vec2 p, vec3 a, vec3 b)\n{\n    float dummy_dc;\n    vec2 dummy_uv;\n    return sdFatLine2All(p, a, b, dummy_dc, dummy_uv);\n}\n\nmat2 rot(float a)\n{\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\treturn mat2(c, s, -s, c);\n}\n\nfloat remap(float v, float min1, float max1, float min2, float max2) {\n    return min2 + (max2 - min2) * (v - min1) / (max1 - min1);\n}\n\nfloat bias(float x, float b) { return pow(x,log(b)/log(0.5)); }\n\nfloat gain(float x, float g) { return (x<0.5) ? bias(2.*x,1.-g)/2. : 1. - bias(2.-2.*x,1.-g)/2.; }\n\nfloat aaFloor(float x) {\n    float dx = 2. * length(vec2(dFdx(x), dFdy(x)));\n    float fx = fract(x), idx = 1. - dx;\n    return (fx < idx) ? x - fx : remap(fx, idx, 1., x-fx, x);\n}\n\nfloat aaFract(float x) {\n    float dx = 2. * length(vec2(dFdx(x), dFdy(x)));\n    float fx = fract(x), idx = 1. - dx;\n    return (fx < idx) ? fx : remap(fx, idx, 1., fx, 0.);\n}\n\nfloat stairs(float x, float steps) {\n    return floor(x * steps) / steps;\n}\n\nfloat stairs2(float x, float steps) {\n    return round(x * steps) / steps;\n}\n\nfloat escalator(float x, float steps, float time) {\n    float dx = 1. / steps;\n    x = remap(x, 0., 1., -dx/2., 1.+dx/2.) + dx/2.;\n    float ex = (x - time*dx) * steps;\n    float ey = (aaFloor(ex) + time) * dx;\n    return clamp(ey, 0., 1.);\n}\n\nvec2 escalatorId(float x, float steps, float time) {\n    float dx = 1. / steps;\n    x = remap(x, 0., 1., -dx/2., 1.+dx/2.) + dx/2.;\n    float ex = (x - time*dx) * steps;\n    float id = floor(ex);\n    float ey = (aaFloor(ex) + time) * dx;\n    return vec2(clamp(ey, 0., 1.), id);\n}\n\nfloat saw(float x) {\n    float mx = mod(x,1.);\n    return 2. * min(mx, 1.-mx);\n}\n\nfloat dline(vec2 p, vec2 lp, vec2 ld) {\n    return dot(p-lp, ld);\n}\n\nfloat sqr(float x) { return x*x; }\n\nfloat d2a (vec2 d) {\n    return atan(d.y, d.x);\n}\n\nvec2 a2d (float a) {\n    return vec2(cos(a), sin(a));\n}\n\nfloat sdEdgeNormal(vec2 x, vec2 p, vec2 normal) {\n    return dot(x-p, normal);\n}\n\nfloat sdEdgePoints(vec2 x, vec2 p1, vec2 p2) {\n    return dot(x-p1, normalize(rot90(p2 - p1)));\n}\n\n\n// lots of distance functions from IQ\n// https://iquilezles.org/articles/distfunctions\n\nfloat sdBox3( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat sdBox2( vec2 p, vec2 b )\n{\n  vec2 d = abs(p) - b;\n  return min(max(d.x,d.y),0.) + length(max(d,0.));\n}\n\nfloat udRoundBox( vec2 p, vec2 b, float r )\n{\n  return length(max(abs(p)-b,0.0))-r;\n}\n\nfloat udBox( vec2 p, vec2 b )\n{\n  return length(max(abs(p)-b,0.0));\n}\n\nfloat sdCircle( vec2 p, float s )\n{\n  return length(p)-s;\n}\n\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h ) - r;\n}\n\nfloat sdCapsule2All( vec2 p, vec2 a, vec2 b, float r, out float distToCenter, out vec2 uv, out vec2 pCenter )\n{\n    vec2 pa = p - a, ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    distToCenter = length( pa - ba*h );\n    float distToBoundary = distToCenter - r;\n    return distToBoundary;\n}\n\nfloat sdCapsule2( vec2 p, vec2 a, vec2 b, float r )\n{\n    vec2 dummy_pc, dummy_uv;\n    float dummy_dc;\n    return sdCapsule2All(p, a, b, r, dummy_dc, dummy_uv, dummy_pc);\n}\n\n// https://iquilezles.org/articles/smin\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\n// d1 minus d2\nfloat sdSubtract( float d1, float d2 )\n{\n    return max(d1, -d2);\n}\n\n// d1 union d2\nfloat sdUnion( float d1, float d2 )\n{\n    return min(d1, d2);\n}\n","name":"Common","description":"","type":"common"}]}