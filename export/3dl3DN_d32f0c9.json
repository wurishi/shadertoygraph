{"ver":"0.1","info":{"id":"3dl3DN","date":"1546330694","viewed":607,"name":"black body emission","username":"16807","description":"x axis is temperature from freezing to the melting point of steel\nthis is a physically accurate reproduction, output units are in watts/m^2\nRGB color channel wavelengths are mostly arbitrary. ","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["physics","blackbody","emission","radiation","colorscale"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nconst float PI = 3.14159265358979323846264338327950288419716939937510;\nconst float SPEED_OF_LIGHT = 299792458.; // METER / SECOND\nconst float BOLTZMANN_CONSTANT = 1.3806485279e-23; // * JOULE / KELVIN;\nconst float STEPHAN_BOLTZMANN_CONSTANT = 5.670373e-8; // * WATT / (METER*METER* KELVIN*KELVIN*KELVIN*KELVIN);\nconst float PLANCK_CONSTANT = 6.62607004e-34; //* JOULE * SECOND;\n\n// see Lawson 2004, \"The Blackbody Fraction, Infinite Series and Spreadsheets\"\n// we only do a single iteration with n=1, because it doesn't have a noticeable effect on output\nfloat solve_black_body_fraction_below_wavelength(float wavelength, float temperature){ \n\tconst float iterations = 2.;\n\tconst float h = PLANCK_CONSTANT;\n\tconst float k = BOLTZMANN_CONSTANT;\n\tconst float c = SPEED_OF_LIGHT;\n\n\tfloat L = wavelength;\n\tfloat T = temperature;\n\n\tfloat C2 = h*c/k;\n\tfloat z = C2 / (L*T);\n\t\n\treturn 15.*(z*z*z + 3.*z*z + 6.*z + 6.) * exp(-z)/(PI*PI*PI*PI);\n}\nfloat solve_black_body_fraction_between_wavelengths(float lo, float hi, float temperature){\n\treturn \tsolve_black_body_fraction_below_wavelength(hi, temperature) - \n\t\t\tsolve_black_body_fraction_below_wavelength(lo, temperature);\n}\n// This calculates the radiation (in watts/m^2) that's emitted \n// by a single object using the Stephan-Boltzmann equation\nfloat get_black_body_emissive_flux(float temperature){\n    float T = temperature;\n    return STEPHAN_BOLTZMANN_CONSTANT * T*T*T*T;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 a = fragCoord.xy / iResolution.xy;\n    float T = a.x*1370.+273.15; // from freezing to the melting point of steel\n    float I = get_black_body_emissive_flux(T); // WATT/(METER*METER)\n    vec3 color = I * vec3(\n      solve_black_body_fraction_between_wavelengths(600e-9, 700e-9, T),\n      solve_black_body_fraction_between_wavelengths(500e-9, 600e-9, T),\n      solve_black_body_fraction_between_wavelengths(400e-9, 500e-9, T)\n    );\n    color = 1.0 - exp2( color * -1.0f ); // simple tonemap\n    color = pow( color, vec3(1.0/2.2) );\n    fragColor = vec4(color, 1.);\n}","name":"Image","description":"","type":"image"}]}