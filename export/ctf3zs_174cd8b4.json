{"ver":"0.1","info":{"id":"ctf3zs","date":"1672217298","viewed":164,"name":"Sobel by Mellos","username":"mellos","description":"Sobel","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["sobel"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat pi = 3.1415;\nfloat Thickness = 0.0;\n\nfloat sdPie( in vec2 p, in vec2 c, in float r )\n{\n    p.x = abs(p.x);\n    float l = length(p) - r;\n\tfloat m = length(p - c*clamp(dot(p,c),0.0,r) );\n    return max(l,m*sign(c.y*p.x-c.x*p.y));\n}\n\nvec3 GetmainImage(in vec2 fragCoord)\n{  \n    vec2 p = fragCoord.xy;\n    return texture(iChannel0, p / iResolution.xy).xyz;\n}\n\nvec3 samplef(const int x, const int y, in vec2 fragCoord)\n{\n\treturn GetmainImage(fragCoord + vec2(x, y));\n}\n\n// Sobel Kernel - Horizontal\n// -1 -2 -1\n//  0  0  0\n//  1  2  1\n\n// Sobel Kernel - Horizontal\n// -1  0  1\n// -2  0  2\n// -1  0  1\n\nfloat Sobel(in vec2 fragCoord)\n{\n\tfloat hc =\n    (samplef(-1,-1, fragCoord) *  1. +\n    samplef( 0,-1, fragCoord) *  2. +\n    samplef( 1,-1, fragCoord) *  1. +\n    samplef(-1, 1, fragCoord) * -1. +\n    samplef( 0, 1, fragCoord) * -2. + \n    samplef( 1, 1, fragCoord) * -1.).x;\t\t\n\n    float vc =\n    (samplef(-1,-1, fragCoord) *  -1. +\n    samplef(-1, 0, fragCoord) *  -2. +\n    samplef(-1, 1, fragCoord) *  -1. +\n    samplef( 1,-1, fragCoord) * 1. +\n    samplef( 1, 0, fragCoord) * 2. +\n    samplef( 1, 1, fragCoord) * 1.).x;\n    \n    if (hc < 0.f)\n        hc = -hc;\n    if (vc < 0.f)\n        vc = -vc;  \n        \n    float ret = hc + vc;\n    ret = clamp(ret, 0.f, 1.f);\n        \n\treturn ret;\n}\n\n#define NORMAL 1\n#define EDGE_ONLY 2\n#define EDGE_WITH_SOURCE 3\n\nint STATUS = EDGE_WITH_SOURCE;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 edgeColor = vec3(1., 0.0, 0.0);\n\n    if (STATUS == 1)\n    {\n        vec3 r = GetmainImage(fragCoord);\n        fragColor = vec4(r, 0.f);\n    }\n    else if (STATUS == 2)\n    {\n        float edge = Sobel(fragCoord);\n        fragColor = vec4(edgeColor * edge, 0.f);\n    }\n    else if (STATUS == 3)\n    {\n        vec3 r = GetmainImage(fragCoord);\n        float dege = Sobel(fragCoord);\n        fragColor = vec4(r + dege * edgeColor, 0.);\n    }\n}","name":"Image","description":"","type":"image"}]}