{"ver":"0.1","info":{"id":"mddfRH","date":"1697218935","viewed":63,"name":"Precalculated terrain thingy","username":"DwayneBrah","description":"Precalculated terrain thingy.\n\nDesparately trying to invent a new super-efficient z-depth finder for a heightmap. Not really successful if you want real perspective!","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["terrain","map","heightmap","height","land","precalculated"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec4 col_a = texture(iChannel0, uv);\n    vec4 col_b = texture(iChannel1, uv);\n    vec4 col_d = texture(iChannel3, uv);\n    \n    float debug_h  = 0.80;\n    \n    \n    if (uv.y >  debug_h && uv.x >  0.5) {\n        fragColor = col_a;\n            if (uv.y <  debug_h + (1.0 - debug_h)/2.0) {\n\n                fragColor.r = (col_a.g-0.0)*1.0;\n                fragColor.g = (col_a.g-0.0)*1.0;\n                fragColor.b = (col_a.g-0.0)*1.0;\n\n            };\n    } else {\n        fragColor = col_b;\n    };\n    \n    fragColor += col_d;\n    \n    \n    \n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// 0: Use gradient noise (slower)\n// 1: Use value noise\n\n\n\n#define USE_VALUE_NOISE 1\n\n#if USE_VALUE_NOISE\n\n// Value noise - https://www.shadertoy.com/view/lsf3WH\nfloat hash(vec2 p) {\n    p  = 50.0*fract( p*0.3183099 + vec2(0.71,0.113));\n    return -1.0+2.0*fract( p.x*p.y*(p.x+p.y) );\n}\n\nfloat noise( in vec2 p ) {\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n\tvec2 u = f*f*(3.0-2.0*f);\n    return .5+.5*mix( mix( hash( i + vec2(0.0,0.0) ), \n                     hash( i + vec2(1.0,0.0) ), u.x),\n                mix( hash( i + vec2(0.0,1.0) ), \n                     hash( i + vec2(1.0,1.0) ), u.x), u.y);\n}\n\n#else\n\n\n#endif\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define SC (250.0)\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    float pix_y = 1.0 / iResolution.y;    \n    float pix_x = 1.0 / iResolution.x;    \n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float progress = pix_y * float(iFrame);\n    int px = int((1.0-uv.y)/pix_y);\n    \n    \n    \n    vec4 col_a = texture(iChannel0, uv*vec2(0.5, 1.0));\n    vec4 col_a_scroll = texture(iChannel0, uv + vec2(0.0, pix_y));\n    \n    float h = col_a.r;\n    \n    fragColor = col_a_scroll;\n    if (px == 0) {\n        \n        vec2 uv_noise = uv + vec2(0.0, iTime * 0.08);\n        float height = -0.1;\n        \n        uv_noise *= 4.00; // SCALE\n        \n        uv_noise *= 6.33;\n        height += noise(uv_noise*04.00)*0.015;\n        uv_noise *= 0.50;\n        height += noise(uv_noise)*0.9;\n        \n        height *= 1.0; // Height SCALE\n        \n        height -= 0.03;\n        \n        height = clamp(height, 0.1, 1.0);\n\n        fragColor = vec4(height, 0.0, 0.0, 1.0);\n        \n    };\n    \n    \n    if (px == 1) {\n        \n        float slope = 0.01;\n        int start = 1;\n        int rows = 100;\n        \n        float start_y = uv.y + (float(px+start)*pix_y);\n        float end_y = start_y + (float(px+rows+start)*pix_y);\n\n        float y_point = 0.0;\n        float steps = 0.0;\n        float found_height = -100.0;\n        for ( float y_check = start_y; y_check <= end_y; y_check += pix_y) {\n\n            steps += 1.0;\n\n            vec4 col_check = texture(iChannel0, vec2(uv.x, 0.0-y_check));\n\n            \n            float sightline_height = steps*slope;\n            float ground_height = col_check.r - sightline_height;\n\n            if (ground_height > 0.0 ) {\n \n                     found_height = ground_height;\n                     y_point = steps;\n \n            };\n\n        };        \n        \n        fragColor.g = y_point * 0.01;\n        \n    };\n\n}\n\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    float pix_y = 1.0 / iResolution.y;    \n    float pix_x = 1.0 / iResolution.x;    \n    float progress = pix_y * float(iFrame);\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    //uv.x *= 0.30;\n    //uv.y *= 0.60;\n    //uv.x *= 0.5 + fragCoord.y*0.001;\n    \n    vec4 col_a = texture(iChannel0, uv);//*vec2(1.00, 1.0));\n    float displace_y = pix_y * ((col_a.g*100.00));\n    \n    displace_y *= 1.0;\n    \n    vec2 t_uv = uv-vec2(0.0, displace_y);\n    \n    \n    \n    vec4 col_a_offset = texture(iChannel0, t_uv);\n    float h = col_a_offset.r;\n\n    \n    float slope_dist = 3.0;\n    vec4 col_a_offset_right = texture(iChannel0, t_uv + vec2(slope_dist*pix_x, 0.0));\n    vec4 col_a_offset_bottom = texture(iChannel0, t_uv + vec2(0.0 ,slope_dist*pix_y));\n\n    float shader = 0.0;\n    shader += (col_a_offset_right.r - h) * 0.5;\n    shader -= (col_a_offset_bottom.r - h) * 0.5;\n    shader *= 20.00;\n    shader = clamp(shader, -0.20, 0.2); \n    \n    vec4 land_color = (vec4(0.5,0.5,0.5,1.0))*0.9;\n\n    \n    \n    fragColor = land_color*0.86;\n    \n    bool show_checkers = false;\n    if (mod(t_uv.x, 0.05) > 0.025) {\n        show_checkers = !show_checkers;\n    }\n    if (mod(t_uv.y+progress, 0.05) > 0.025) {\n        show_checkers = !show_checkers;\n    };\n    if (show_checkers && false) {\n        fragColor = land_color;\n    };\n    \n    \n    \n    \n    vec4 t_offset = texture(iChannel2, vec2(t_uv.x, t_uv.y+progress)*2.2);\n    \n\n    // COLORING\n    \n    /*\n    // grass\n    vec4 grass_color = vec4(0.0,0.29,0.0,1.0);\n    float nearness_grass = 0.20 / abs(h+0.2); \n    nearness_grass *= nearness_grass;\n    fragColor -= 0.55 * nearness_grass;\n    fragColor += grass_color * nearness_grass;\n    */\n\n\n    fragColor += (t_offset.g*0.90);// * h*h*5.0;\n    \n    // Beach\n    vec4 beach_color = vec4(0.6,0.60,0.45,1.0)*0.60;\n    float nearness_water = 0.08 / abs(h); \n    nearness_water *= nearness_water*nearness_water;\n    nearness_water = clamp(nearness_water, 0.0, 0.20)*5.0;\n    \n\n    \n    \n    fragColor = mix(fragColor, beach_color,  nearness_water);\n    fragColor += beach_color * nearness_water;\n    fragColor *= vec4(shader,shader,shader,1.0)*2.0 + 0.5;\n\n    // WATER\n    if (h == 0.1) {\n        fragColor *= 0.10;\n        fragColor += vec4(0.1,0.3,0.5,1.0)*0.23;\n\n    };\n    \n    \n    \n    if (t_uv.y < 0.0) {\n        fragColor *= 0.03;\n    };\n        \n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"XdfGR8","channel":0}],"code":"void join(inout float a, float b)\n{\n    a = min(a, b);\n}\n\nvoid subt(inout float a, float b)\n{\n    a = max(a, -b);\n}\n\nfloat box(vec2 p, vec2 s)\n{\n    return max((abs(p)-s).x,(abs(p)-s).y);\n}\n\nfloat digit(vec2 p, int d)\n{\n    #define join(a) join(r, a)\n    #define subt(a) subt(r, a)\n    float r = 100000000.0;\n    switch(d)\n    {\n        case(0):\n            join(box(p, vec2(0.1, 0.15)));\n            subt(box(p, vec2(0.05, 0.1)));\n            break;\n        case(1):\n            join(box(p, vec2(0.025, 0.15)));\n            break;\n        case(2):\n            join(box(p, vec2(0.1, 0.15)));\n            subt(box(p-vec2(0.15, -0.06), vec2(0.2, 0.035)));\n            subt(box(p-vec2(-0.15, 0.06), vec2(0.2, 0.035)));\n            break;\n        case(3):\n            join(box(p, vec2(0.1, 0.15)));\n            subt(box(p-vec2(-0.15, -0.06), vec2(0.2, 0.035)));\n            subt(box(p-vec2(-0.15, 0.06), vec2(0.2, 0.035)));\n            break;\n        case(4):\n            join(box(p-vec2(0.075, 0.0), vec2(0.025, 0.15)));\n            join(box(p-vec2(0.0, 0.05), vec2(0.1, 0.1)));\n            subt(box(p-vec2(0.0, 0.09), vec2(0.05, 0.085)));\n            break;\n        case(5):\n            join(box(p, vec2(0.1, 0.15)));\n            subt(box(p-vec2(0.15, 0.06), vec2(0.2, 0.035)));\n            subt(box(p-vec2(-0.15,-0.06), vec2(0.2, 0.035)));\n            break;\n        case(6):\n            p = -p;\n            join(box(p-vec2(0.075, 0.0), vec2(0.025, 0.15)));\n            join(box(p-vec2(0.0, 0.05), vec2(0.1, 0.1)));\n            subt(box(p-vec2(0.0, 0.05), vec2(0.05, 0.05)));\n            break;\n        case(7):\n            join(box(p-vec2(0.0), vec2(0.1, 0.15)));\n            subt(box(p-vec2(-0.05), vec2(0.1, 0.15)));\n            break;\n        case(8):\n            join(box(p-vec2(0.0), vec2(0.1, 0.15)));\n            subt(box(p-vec2(0.0, 0.05), vec2(0.05, 0.05)));\n            subt(box(p-vec2(0.0, -0.05), vec2(0.05, 0.05)));\n            join(box(p-vec2(0.0), vec2(0.1, 0.025)));\n            break;\n        case(9):\n            join(box(p-vec2(0.075, 0.0), vec2(0.025, 0.15)));\n            join(box(p-vec2(0.0, 0.05), vec2(0.1, 0.1)));\n            subt(box(p-vec2(0.0, 0.05), vec2(0.05, 0.05)));\n            break;\n    }\n    return r;\n}\n\nfloat getDig(float num, float d)\n{\n    float a = floor(num/pow(10., d));\n    return a - floor(a/10.)*10.;\n}\n\nfloat print(vec2 p, float num, float spacing)\n{\n    float r = 10000.0;\n    int fig = int(ceil(log2(num) / 3.32192809489)); // log base 10 of x equals log base 2 of x divided by log base 2 of 10\n    for(int i = 0; i < fig; i++)\n    {\n        int di = int(getDig(num, float(i)));\n        join(digit(p+vec2(i, 0)*spacing, di));\n    }\n    return r;\n}\n\nvec3 printFR(vec2 p)\n{\n    return 1.-vec3(step(0., print((p-vec2(0.474, 0.25))*9., iFrameRate, 0.3)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 mouse = (iMouse.x == 0.0? vec2(0.0) : iMouse.xy/iResolution.xy-0.5)*vec2(1., iResolution.y/iResolution.x);\n    vec2 uv = (fragCoord/iResolution.xy-0.5)*vec2(1., iResolution.y/iResolution.x);\n\n    // Time varying pixel color\n    //int d = int(getDig(143., 0.0));\n    //vec3 col = vec3(step(0., digit(uv, d))-0.1*step(0., box(uv, vec2(0.1, 0.15))));\n    vec3 col = printFR(uv);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Buffer D","description":"","type":"buffer"}]}