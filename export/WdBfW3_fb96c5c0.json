{"ver":"0.1","info":{"id":"WdBfW3","date":"1590930538","viewed":73,"name":"First Raymarch!","username":"PhilBurt","description":"This is the first raymarch I have ever done! Super exited! Learned from the Art of Code.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define MAXSTEPS 100\n#define MAXDIST 100.\n#define SURFDIST .01\n\nfloat GetDist(vec3 p){\n\n\tvec4 s1 = vec4(0, 4, 19, 4);\n    vec4 s2 = vec4(10, 4.2, 10, 4.2);\n    vec4 s3 = vec4(-8, 5, 6, 5);\n    \n    float sphereDist1 = length(p - s1.xyz) - s1.w;\n    float sphereDist2 = length(p - s2.xyz) - s2.w;\n    float sphereDist3 = length(p - s3.xyz) - s3.w;\n    float planeDist = p.y;\n    \n    float d = min(min(min(sphereDist1, planeDist), sphereDist2), sphereDist3);\n    return d;\n\n}\n\n\nfloat RayMarch(vec3 ro, vec3 rd){\n\n\tfloat dO = 0.;\n        \n        for(int i = 0; i < MAXSTEPS; i++){\n        \n        \tvec3 p = ro + rd * dO;\n            float dS = GetDist(p);\n            dO += dS;\n            if(dO > MAXDIST || dS < SURFDIST){\n            \n            \t\n            \n            }\n        \n        }\n        \n\treturn dO;\n\n}\n\n\nvec3 GetNormal(vec3 p){\n\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.01, 0);\n    \n    vec3 n = d - vec3(\n    \tGetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n\t\n    return normalize(n);\n    \n}\n\nfloat GetLight(vec3 p){\n\n\tvec3 lightPos = vec3(0, 1, 6);\n    \n    lightPos.xz += vec2(sin(iTime), cos(iTime)) * 2.;\n    \n    vec3 l = normalize(lightPos - p);\n    vec3 n = GetNormal(p);\n\n    float dif = clamp(dot(n, l), 0., 1.);\n    \n    float d = RayMarch(p+n*SURFDIST * 2., l);\n    if(d<length(lightPos - p )) dif *= .2;\n    \n    return dif;\n    \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy) / iResolution.y;\n\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    vec3 ro = vec3(0, 1, 0);\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1));\n    \n    float d = RayMarch(ro, rd);\n    \n    vec3 p = ro + rd * d;\n    \n    float dif = GetLight(p);\n    \n    col = vec3(dif);\n    \n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}