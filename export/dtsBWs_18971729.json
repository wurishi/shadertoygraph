{"ver":"0.1","info":{"id":"dtsBWs","date":"1693743323","viewed":251,"name":"random walk 2","username":"FabriceNeyret2","description":" random walk with simple cellular automata. Color = initial uv.\nCollisions are avoided with a simple trick ( otherwise markers would vanish over time) : only horiz/vertic motion on even/odd frame, same random direction along the same line.","likes":18,"published":3,"flags":32,"usePreview":0,"tags":["2tweets","short","cellularautomata"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"M O = sqrt(T(u)); \n// if (u.y<5.) O = vec4( u.x/R.x < textureLod(iChannel0,vec2(.5),99.).w ); // shows propotion of dots\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define H(u) fract(1e4*sin(dot(u+iTime,vec2(71.3,-93.7))))            // random\nM\n    O = T(u);\n    vec2  e = vec2(1,0), d,D, U = u/R; \n // float H;\n    if (iFrame<1) { O = H(u) < .1 ? vec4( U, 1.-.7*length(U), 1 ) : O-O; return; } // .w: random seeds .rgb: color gradient\n    if (iFrame<2) { (T(u+e)+T(u+e.yx)+T(u+1.)).w > 0.? O-=O :O; return; } // neighbors forbidden\n\n    O-=O; // O.rgb +=.5; // O.rgb += 1.-vec3(U, 1.-.7*length(U));     // background color\n    \n // for (int k; k<9; k++ )                                            // check neiborhood\n    for (int k=1; k<9; k+=2 )                                         // (cross is sufficient )\n // for (int h=int(9.*H(u+.5)),k=h; k<h+9; k++ )                      // avoid order bias\n        d = vec2(k%3,k/3%3) - 1.,                                     // local neighbor direction\n     // H = H(u+d), D = H<.5 ? e : e.yx, fract(H*2.)<.5 ? D = -D : D, // random move from there\n        D = iFrame%2<1 ? e : e.yx, H(mod(u+d,R)[1-(iFrame%2)]+d-d)<.5 ? D = -D : D, \n        D==-d ? O += T(u+d) : O;                                      // comming here â†’ pull color\n     // D==-d && T(u+d).w > 0. ? O = T(u+d) : O;                      // ( avoid collisions to mix colors )\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define R iResolution.xy//\n#define T(U) texelFetch( iChannel0, ivec2(U+R) % ivec2(R), 0 )       //\n#define M void mainImage( out vec4 O, vec2 u ) {\n","name":"Common","description":"","type":"common"}]}