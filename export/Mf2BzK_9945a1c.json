{"ver":"0.1","info":{"id":"Mf2BzK","date":"1725219995","viewed":29,"name":"Inhale the Colors","username":"SirShart","description":"Breath in","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["trippycolorspulsatingpsychedelic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalize pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n    uv = uv * 2.0 - 1.0;  // Adjust to range [-1, 1]\n\n    // Correct for aspect ratio\n    float aspect = iResolution.x / iResolution.y;\n    uv.x *= aspect;\n\n    // Time variable for animation\n    float time = iTime * 0.7;\n\n    // Asymmetric distortion and kaleidoscopic twist\n    float angle = atan(uv.y, uv.x) + sin(time + length(uv)) * 0.5;\n    float radius = length(uv) * (1.0 + 0.5 * sin(time * 3.0 + length(uv)));\n    uv = vec2(cos(angle), sin(angle)) * radius;\n\n    // Hyperboloid parameters with time-based dynamics\n    float k = 2.0 + sin(time * 2.0 + radius) * 0.5;  // Dynamic width control\n    float a = 1.0;\n    float b = 1.0;\n\n    // Calculate the z-value based on the hyperboloid equation\n    float x2 = uv.x * uv.x;\n    float y2 = uv.y * uv.y;\n    float z = sqrt(abs((x2 - k * y2) / (a * a - k * b * b)));\n\n    // Generate a psychedelic color pattern with stronger variations\n    vec3 baseColor = vec3(0.5 + 0.5 * cos(6.28318 * (z + time)),\n                          0.5 + 0.5 * cos(6.28318 * (z + time * 1.3 + 2.0 / 3.0)),\n                          0.5 + 0.5 * cos(6.28318 * (z + time * 1.7 + 4.0 / 3.0)));\n\n    // Add chaotic swirl distortions for asymmetry\n    angle = atan(uv.y, uv.x) + time * 1.5 + cos(length(uv) * 10.0);\n    radius = length(uv) * (1.0 + 0.3 * sin(time * 5.0 + radius));\n    vec2 swirl = vec2(cos(angle), sin(angle)) * radius;\n\n    // Combine base color with the asymmetric swirl distortion\n    vec3 color = baseColor * vec3(0.8 + 0.2 * sin(10.0 * swirl.x), \n                                  0.8 + 0.2 * sin(10.0 * swirl.y), \n                                  0.8 + 0.2 * sin(10.0 * swirl.x + swirl.y));\n\n    // Apply color inversion with more chaotic regions\n    if (mod(floor(10.0 * z + sin(time * 3.0) * 5.0), 2.0) == 0.0) {\n        color = 1.0 - color;  // Invert colors\n    }\n\n    // Intensify the pulsating glow for a stronger effect\n    float glow = exp(-20.0 * z) * (0.5 + 0.5 * sin(time * 10.0));\n    color += vec3(1.0, 0.8, 0.3) * glow;\n\n    // Final output color\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}