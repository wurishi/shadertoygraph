{"ver":"0.1","info":{"id":"4ctcz4","date":"1730323608","viewed":53,"name":"small shaders collection","username":"Kolya142","description":"used:\nmy shaders\n0, m1 - https://www.shadertoy.com/view/wtdSzX\n5, m6 - https://www.shadertoy.com/view/MtSBDc\n6, m7 - https://www.shadertoy.com/view/ltBXDd\n7, m8 - https://www.shadertoy.com/view/XtjfDy\n8, m9 - https://www.shadertoy.com/view/lslBz7","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["minimal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#ifdef FLAT_TOP_HEXAGON\nconst vec2 s = vec2(1.7320508, 1);\n#else\nconst vec2 s = vec2(1, 1.7320508);\n#endif\n\n#define m  *= mat2( cos( vec4(0,33,55,0) + t*//\n#define M  ( s.xz m.4)), s.xy m.3)) ,                        \\\n               length(s + sin(t*.7))                         \\\n             * log( length(s) + 1. )                         \\\n             + sin( sin(sin(s+=s+t).y+s).z + s ).x * .5 - 1. \\\n           )\n// Test for shorter starfield. \n// see also https://www.shadertoy.com/results?query=starfield&sort=newest\n// This one is based on texture advection, quadtree and procedural stars.\n\nfloat D=8., Z=3.;               // D: duration of advection layers, Z: zoom factor\n\n#define R(U,d) fract( 1e4* sin( U*mat2(1234,-53,457,-17)+d ) )\n\nfloat M1(vec2 U, float t) {           // --- texture layer // https://www.shadertoy.com/view/wtdSzX\n// vec2 iU = ceil(U/=exp2(t-8.)),              // quadtree cell Id - infinite zoom\n   vec2 iU = ceil(U/=exp2(t-8.)*D/(3.+t)),     // quadtree cell Id - with perspective\n          P = .2+.6*R(iU,0.);                  // 1 star position per cell\n    float r = 9.* R(iU,1.).x;                  // radius + proba of star ( = P(r<1) )\n\treturn r > 1. ? 1. :   length( P - fract(U) ) * 8./(1.+5.*r) ;\n}\n\n#define V vec3\nmat2 m5559 = mat2(8,6,-6,8);\nfloat h1,s1,t1,x1,p1,d1,v1;\nV q1,z1,w1;\n#define g1 (abs(sin(q1+sin(q1.z)))+sin(sin(q1.xz*=m5559*.1).y+q1)).x\nfloat n1(V p1){\n    for(p1*=.1,s1=.8,t1=.9; (s1/=.4)<4e3; p1+=t1) q1=p1,t1-=g1/s1, p1.xz*=m5559*.21;\n    return 3.-exp(t1);}\nvoid m9(out vec4 O, vec2 u){      // https://www.shadertoy.com/view/lslBz7              \n    for(d1=p1=x1=0.; d1++<2e2 && p1/5e3<=x1; p1+=x1=z1.y+n1(z1)) \t\t\t\t\t\t\t\t\t\n        q1=V(0,0,v1=iTime)*.2,                                                            \n        z1=V(0,-.8*g1,v1)+\t\t\t\t\t\t\t\t\t\t\t\t                    \n        p1*normalize(V(u.x,u.y*.3,2)/iResolution-V(sin(v1*.2)+1.,.2,0));     \t\t\t\t\n    O.rgb = d1/5e2+.1+.1*log(p1)\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n                -dot(V(w1.z=.01),                                                        \n                     normalize(V(n1(z1-w1.zyx),                                            \n                                 x1 = n1(z1),                                              \n                                 n1(z1-w1)-n1(z1.zyx*11.)/5e2)                               \n                               -x1))                                                     \n                *n1(z1.zyx*6.)*V(5,10,15);}\n\nvoid m8(out vec4 O, vec2 u) {  // https://www.shadertoy.com/view/XtjfDy\n    vec2 U = u+u - iResolution.xy;\n    float T = 6.2832, l = length(U) / 30., L = ceil(l) * 6.,\n          a = atan(U.x,U.y) - iTime * 2.*(fract(1e4*sin(L))-.5);\n    O = .6 + .4* cos( floor(fract(a/T)*L) + vec4(0,23,21,0) )\n        - max(0., 9.* max( cos(T*l), cos(a*L) ) - 8. ); }\n\nvoid m7( out vec4 o,  vec2 U ) // https://www.shadertoy.com/view/ltBXDd\n{\n    o -= o;\n    U = U / iResolution.y - .5;\n\n    // --- prepare the timings and weightings of the 3  texture layers\n\n    vec3 P = vec3(-1,0,1)/3., T,\n         t = fract( iTime/D + P +.5 )-.5,  // layer time\n         w = .5+.5*cos(6.28*t);                  // layer weight\n    t = t*D+Z;  \n    \n    // --- prepare the 3 texture layers\n\n    T.x = M1(U,t.x),  T.y = M1(-U,t.y),  T.z = M1(U.yx,t.z); // avoid using same U for all layers\n    //T = sin(100.*U.x/exp2(t3))+sin(100.*U.y/exp2(t3));  // try this for obvious pattern\n    T = .03/(T*T);\n\n    // --- texture advection: cyclical weighted  sum\n\n    o += dot(w,T);\n    // o.rgb = w*T;             // try this alternative to see the 3 layers of texture advection\n}\n\nvoid m6(out vec4 o, vec2 u){ // https://www.shadertoy.com/view/MtSBDc\n    vec3 p,s,O,R = iResolution;\n    for( float t = iTime, d = 2.5, r;\n         R.z++ < 7.;\n         o.xyz = O = max(O+.7-r*.28,O)\n                   * ( vec3(.1,.3,.4) - vec3(10,5,6)*(M-r)/4. )\n       )\n        s = p = vec3( (u - .5*R.xy ) / R.y * d, 5.-d ),\n        d += min( r = M, 1. ),\n        s = p + .1;\n}\n\n\nfloat hash21(vec2 p)\n{\n    return fract(sin(dot(p, vec2(141.13, 289.97)))*43758.5453);\n}\nfloat hex(in vec2 p)\n{    \n    p = abs(p);\n    \n    #ifdef FLAT_TOP_HEXAGON\n    return max(dot(p, s*.5), p.y); // Hexagon.\n    #else\n    return max(dot(p, s*.5), p.x); // Hexagon.\n    #endif    \n}\n\nvec4 getHex(vec2 p)\n{    \n    \n    #ifdef FLAT_TOP_HEXAGON\n    vec4 hC = floor(vec4(p, p - vec2(1, .5))/s.xyxy) + .5;\n    #else\n    vec4 hC = floor(vec4(p, p - vec2(.5, 1))/s.xyxy) + .5;\n    #endif\n    vec4 h = vec4(p - hC.xy*s, p - (hC.zw + .5)*s);\n    return dot(h.xy, h.xy) < dot(h.zw, h.zw) \n        ? vec4(h.xy, hC.xy) \n        : vec4(h.zw, hC.zw + .5);\n}\n\nvoid m1(out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec2 u = (fragCoord - iResolution.xy*.5)/iResolution.y;\n    vec4 h = getHex(u*5. + s.yx*iTime/2.);\n    \n    float eDist = hex(h.xy);\n\n    vec3 col = mix(vec3(1.), vec3(0), smoothstep(0., .03, eDist - .5 + .04));    \n    fragColor = vec4(col, 1);    \n}\n\nvoid m2( out vec4 O, vec2 U )\n{\n    /*\n        155 chars by me\n        131 chars by SnoopethDuckDuck\n        128 chars by me\n    */\n    O.xyz = iResolution;\n    U = (U+U-O.xy)/O.y;\n    U.x-=9.;\n    U += sin(iTime + U.yx /*- vec2(0,9)*/) / 4.;  \n    O -= O-sin(U *= 50.).x * cos(U.y);\n}\nvoid m3(out vec4 O, vec2 U) {\n  vec2 R = iResolution.xy, b;\n  U = ( U+U - R ) / R.y;\n  b.x=1./length(U)+iTime;\n  b.y=atan(U.y,abs(U.x))/3.14;\n  O += min(1.,3.-b.x+iTime);\n  O *= texture(iChannel0,b.xy);\n}\nvoid m4(out vec4 O, vec2 U) {\n  vec2 R = iResolution.xy;\n  U = ( U + U - R ) / R.y;\n      U.x -= .5;\n  vec3 d = normalize(vec3(U, 1.)),o;int i;\n  for(; length(o-vec3(2.*sin(iTime), 0, 3.))<4.||i>256; O+=.1 ){\n    o+=d;\n    i++;\n    }\n}\nvoid m5(out vec4 O, vec2 U) {\n  vec2 R = iResolution.xy, z;\n  U = ( U + U - R ) / R.y;\n      U.x -= .5;\n  for(; dot(z,z)+O.x<7.; O += .02 )\n    z = mat2( z, -z.y, z ) * z + U;\n}\nfloat digit(vec2 uv, int digit, vec2 p) { \n    uv -= p;\n    if (uv.x > 1. || uv.y > 1. || uv.x < .0 || uv.y < .0) return .0;\n    int char = 0xc0+int(mod(float(digit), 10.));\n    uv /= 16.;\n    float d = mod(float(char)/16., 1.);\n    uv.x += d;\n    uv.y += (float(char)/16.-d)/16.;\n    return texture(iChannel3, uv).r;\n}\nvoid mainImage( out vec4 fc, in vec2 fg )\n{\n    float t = (iMouse.x/iResolution.x)*9.;\n    if (iMouse.z == 0.) {\n        t = mod(iTime, 9.);\n    }\n    if (t < 1.) {\n        m1(fc, fg);\n    }\n    else if (t < 2.) {\n        m2(fc, fg);\n    }\n    else if (t < 3.) {\n        m3(fc, fg);\n    }\n    else if (t < 4.) {\n        m4(fc, fg);\n    }\n    else if (t < 5.) {\n        m5(fc, fg);\n    }\n    else if (t < 6.) {\n        m6(fc, fg);\n    }\n    else if (t < 7.) {\n        m7(fc, fg);\n    }\n    else if (t < 8.) {\n        m8(fc, fg);\n    }\n    else if (t < 9.) {\n        m9(fc, fg);\n    }\n    if (digit(fg/iResolution.xy*10., int(t)/10, vec2(0)) > .5) {\n        fc = vec4(1., 0., 0., 0.);\n    }\n    if (digit(fg/iResolution.xy*10., int(t)%10, vec2(.4, 0)) > .5) {\n        fc = vec4(1., 0., 0., 0.);\n    }\n}","name":"Image","description":"","type":"image"}]}