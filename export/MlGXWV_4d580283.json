{"ver":"0.1","info":{"id":"MlGXWV","date":"1485924823","viewed":124,"name":"Blur Into Sharp Reveal","username":"full_tilt","description":"displays a blurred texture background with a circular window to a sharpened texture that can be moved with the mouse","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["filters"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// filter & sample functions riginally by Nikos Papadopoulos, 4rknova / 2015\n// Heavily modified by Dr. Sajid Farooq, 2016\n\n\n/* \n\tI modified filter & sample even further to support mutiple channels\n*/\n\nfloat radius = 0.1;\n\nmat3 blur = mat3(\n 0.111, 0.111, 0.111, // first column (not row!)\n 0.111, 0.111, 0.111, // second column\n 0.111, 0.111, 0.111 // third column\n);\n\n\nmat3 sharpen = mat3(\n 0., -1, 0.0, // first column (not row!)\n -1, 5, -1, // second column\n 0., -1, 0.0 // third column\n);\n\nvec3 sample(const int x, const int y, in vec2 fragCoord, sampler2D channel, const int cIndex)\n{\n vec2 uv = fragCoord.xy / iResolution.xy;\n    \n //getting around constant bracket rule :(\n for (int i = 0; i < 4; i++)\n     if (i == cIndex)\n     {\n     \tuv *= iChannelResolution[i].xy;\n        uv = (uv + vec2(x, y)) / iChannelResolution[i].xy;\n     }\n \n return texture(channel, uv).xyz;\n}\n\nvec3 filter(in vec2 fragCoord, mat3 kernel, sampler2D channel, const int cIndex)\n{\n vec3 sum = sample(-1, -1, fragCoord, channel, cIndex) * kernel[0][0]\n + sample(-1, 0, fragCoord, channel, cIndex) * kernel[0][1]\n + sample(-1, 1, fragCoord, channel, cIndex) * kernel[0][2]\n + sample( 0, -1, fragCoord, channel, cIndex) * kernel[1][0]\n + sample( 0, 0, fragCoord, channel, cIndex) * kernel[1][1]\n + sample( 0, 1, fragCoord, channel, cIndex) * kernel[1][2]\n + sample( 1, -1, fragCoord, channel, cIndex) * kernel[2][0]\n + sample( 1, 0, fragCoord, channel, cIndex) * kernel[2][1]\n + sample( 1, 1, fragCoord, channel, cIndex) * kernel[2][2];\n \n return sum;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 finalColor;\n    \n    // circle\n    vec2 shapeUV = uv;\n    shapeUV.y *= iResolution.y / iResolution.x;\n    vec2 mousePos = iMouse.xy / iResolution.xx;\n    \n    float dist = length(mousePos - shapeUV);\n    if (dist <= radius)\n    {\n     \tfinalColor = filter(fragCoord.xy, sharpen, iChannel1, 1);\n    }\n    else\n        finalColor = filter(fragCoord.xy, blur, iChannel0, 0);\n    \n    \n    fragColor = vec4(finalColor, 1.0);\n    \n    \n}","name":"Image","description":"","type":"image"}]}