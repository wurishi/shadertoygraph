{"ver":"0.1","info":{"id":"NtKXzy","date":"1640928477","viewed":96,"name":"Fractalizing Circles","username":"spenceryonce","description":"Started with a simple circle and did my favorite function fract to make circles everwhere. To make it animated, we can simply change the uvs based on a sine wave including both xy from our uvs which gives us nice forms. You can also make nice lines.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fractal","waves","circles","simple","sine","trippy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float circle(vec2 uv){\n    return smoothstep(0.01,0.02,uv.y*uv.y+uv.x*uv.x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/iResolution.y;\n    uv.x -= 0.9;\n    uv.y -= 0.5;\n    uv = fract(uv*20.);\n    uv.x -= 0.5;\n    uv.y -= 0.5;\n    \n    uv *= sin(iTime*uv.x*uv.y)*4.0;\n    \n    vec3 col = vec3(0.0,1.0,1.0);\n    \n    float y = circle(uv);\n    \n    col -= y;\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}