{"ver":"0.1","info":{"id":"ltjGRm","date":"1427984539","viewed":211,"name":"basic primitives","username":"cnc","description":"just playing around and trying to get my head around simple things like drawing lines, circles, rings, ... really only beginner stuff","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["2d","clock","red"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3Rn","filepath":"/media/a/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","previewfilepath":"/media/ap/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"#define NUM_FREQBLOCKS 200\n\nconst float PI             = 3.14159265359;\nconst float PI90           = PI / 2.0;\nconst float PI360          = PI * 2.0;\n\nstruct fftSample\n{\n    float blockNumber;\n    float amplitude;\n};\n\nfloat distToLine( vec2 p1, vec2 p2, vec2 p )\n{\n    vec2 lineDir  = p2 - p1;\n  \tvec2 perpDir  = vec2(lineDir.y, -lineDir.x);\n  \treturn abs( dot(normalize(perpDir), p1 - p ) );\n}\n\nvec4 drawRadialBlur( vec2 center,\n                     vec2 current,\n                     float radius,\n                     vec4 color,\n                     bool inverse)\n{\n    float l = length( current - center );\n    \n    if( l <= radius )\n    {\n        if( !inverse )\n        \treturn color * (1.0 - smoothstep(0.0,radius,l));\n        else\n            return color * smoothstep(0.0,radius,l);\n    }\n    \n    return vec4(0,0,0,0);\n}\n\nvec4 drawLine( vec2  start, \n               vec2  end, \n               vec2  current, \n               vec4  color,\n               float width )\n{\n    float d = distToLine( start, end, current );\n    \n    vec2 line = vec2( end - start );\n    vec2 p    = vec2( current - start );\n    \n    float l  = length(line);\n    float lp = length(p);\n    \n    color *= 1.0 - smoothstep( (width/2.0)*0.65, width/2.0, d );\n    color *= 1.0 - smoothstep( l*0.99, l, lp );\n    color *= 1.0 - step(0.0, -dot(line,p) );\n    \n    return color;\n}\n\nvec4 drawCircle( vec2  center,\n                 vec2  current,\n                 float radius,\n                 vec4  color )\n{\n    float l = length( current - center );\n    \n    if( l <= radius )\n    {\n    \tfloat factor    = radius * 0.001;\n    \treturn color * ( 1.0 - smoothstep( radius*(1.0-factor), radius, l ) );\n    }\n    return vec4(0,0,0,0);\n}\n\nvec4 drawRing( vec2  center,\n               vec2  current,\n               float radius,\n               float width,  // in %\n               vec4  color )\n{\n    float l = length( current - center );\n    \n    if( l<=radius )\n    {\n    \tfloat innerEdge = radius - (radius * width);\n    \tfloat factor    = radius * 0.005;\n    \n   \t\tcolor *= (1.0 - smoothstep( radius-factor, radius, l ));\n    \tcolor *= smoothstep( innerEdge-factor, innerEdge, l);\n        \n        return color;\n    }\n    \n    return vec4(0,0,0,0);\n}\n\nvec4 drawSample( fftSample s, vec2 current )\n{\n    float h = s.amplitude * (iResolution.y);\n    vec4 color = s.amplitude * vec4(1.0,0.0,0.0,1.0);\n    \n    color.r += (smoothstep( 0.2, 0.3, s.amplitude )*0.1);    \n    color.g *= 1.0 - smoothstep( h*0.9, h, current.y );\n    color += smoothstep( 0.0, h, h-current.y );\n    return color;\n}\n\nvec2 angleToVec( float angle )\n{\n    return vec2( cos(angle), sin(angle) );\n}\n\nfloat noise(vec2 co)\n{\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 center  = iResolution.xy  / 2.0;\n    vec2 center2 = vec2( center.x, center.y - iResolution.y / 3.0 / 2.0 );\n    \n    float indicatorLength = iResolution.y   / 3.0;\n    float indicatorWidth  = iResolution.x   / 100.0;\n    float ringWidth       = iResolution.x   / 100.0;\n    float circleRadius    = indicatorLength / 8.0;\n    float blockWidth      = iResolution.x   / float(NUM_FREQBLOCKS);\n    \n    float l = length( fragCoord-center );\n     \n    vec2 endHrs     = (angleToVec( -(iDate.w/3600.0)      * (PI360/12.0)   + PI90 ) * indicatorLength * 0.5 );\n    vec2 endMins    = (angleToVec( -(iDate.w/60.0)        * (PI360/60.0)   + PI90 ) * indicatorLength * 0.8 );\n    vec2 endSeconds = (angleToVec( -mod(iDate.w,60.0)     * (PI360/60.0)   + PI90 ) * indicatorLength * 0.9 );\n    vec2 endMillis  = (angleToVec( -fract(iDate.w)*1000.0 * (PI360/1000.0) + PI90 ) * indicatorLength * 0.1);\n    \n    vec4 color = vec4(1.0,1.0,1.0,1.0);\n    \n    fragColor  = vec4(0.08, 0.08, 0.08,1.0);  \n    fragColor *= sin(noise(fragCoord)) * 0.5;\n    \n    if( l <= indicatorLength ) // only needed for the clock\n    {\n    \tfragColor -= drawRadialBlur( center, fragCoord, indicatorLength*0.92, vec4(0.41,0.21,0.11,0.9), true );\n    \tfragColor += drawLine( center, center + endHrs,     fragCoord, color, indicatorWidth );\n    \tfragColor += drawLine( center, center + endMins,    fragCoord, color, indicatorWidth );\n    \tfragColor += drawLine( center, center + endSeconds, fragCoord, color, indicatorWidth );\n        \n    \tfragColor += drawRing(   center, fragCoord,  indicatorLength, 0.08, color );\n    \tfragColor += drawCircle( center, fragCoord,  circleRadius, vec4(1,1,1,1) );\n        \n    \tfragColor += drawCircle( center2, fragCoord, circleRadius, vec4(0.3,0.3,0.3,1.0) );        \n    \tfragColor += drawRing(   center2, fragCoord, circleRadius, 0.2, vec4(1,1,1,1) );\n    \n    \tfragColor -= drawLine(   center2, center2 + endMillis, fragCoord, color, indicatorWidth / 5.0 );    \n        fragColor += drawRadialBlur( center2, fragCoord, circleRadius, vec4(1.0,0.0,0.0,1.0), true );\n        fragColor += drawCircle( center2, fragCoord, circleRadius*0.2, vec4(1,1,1,1) );\n    }\n    \n    // create pixel coordinates\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \t\n    fftSample s;\n    s.blockNumber = fragCoord.x / float(NUM_FREQBLOCKS);\n    s.amplitude   = texture( iChannel0, vec2(uv.x, 0.25) ).x; \n        \n    fragColor += drawSample( s, fragCoord );\n}","name":"","description":"","type":"image"}]}