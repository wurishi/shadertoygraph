{"ver":"0.1","info":{"id":"mstBDN","date":"1697197734","viewed":23,"name":"RayCasting AVA","username":"ai22m030","description":"Raycasting","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raycasting"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Rotation matrix around the X axis.\nmat3 rotateX(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(1, 0, 0),\n        vec3(0, c, -s),\n        vec3(0, s, c)\n    );\n}\n\n// Rotation matrix around the Y axis.\nmat3 rotateY(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, 0, s),\n        vec3(0, 1, 0),\n        vec3(-s, 0, c)\n    );\n}\n\n// Rotation matrix around the Z axis.\nmat3 rotateZ(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, -s, 0),\n        vec3(s, c, 0),\n        vec3(0, 0, 1)\n    );\n}\n\n// Identity matrix.\nmat3 identity() {\n    return mat3(\n        vec3(1, 0, 0),\n        vec3(0, 1, 0),\n        vec3(0, 0, 1)\n    );\n}\n\nconst int MAX_MARCHING_STEPS = 255;\nconst float MIN_DIST = 0.0;\nconst float MAX_DIST = 100.0;\nconst float PRECISION = 0.001;\n\nstruct Surface {\n    float sd; // signed distance value\n    vec3 col; // color\n};\n\nSurface sdBox( vec3 p, vec3 b, vec3 offset, vec3 col, mat3 transform)\n{\n  p = (p - offset) * transform - vec3(3, 0, 0); // Move the cube as it is rotating\n  vec3 q = abs(p) - b;\n  float d = length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n  return Surface(d, col);\n}\n\n\nSurface sdFloor(vec3 p, vec3 col) {\n  float d = p.y + 1.;\n  return Surface(d, col);\n}\n\nSurface minWithColor(Surface obj1, Surface obj2) {\n  if (obj2.sd < obj1.sd) return obj2;\n  return obj1;\n}\n\nSurface sdSphere(vec3 p, float r, vec3 offset, vec3 col )\n{\n  float d = length(p - offset) - r;\n  return Surface(d, col);\n}\n\nSurface sdScene(vec3 p) {\n    vec3 floorColor = vec3(1. + 0.7*mod(floor(p.x) + floor(p.z), 2.0));\n    Surface co = sdFloor(p, floorColor);\n    co = minWithColor(co, sdBox(p, vec3(1), vec3(-1, 0.5, -4), vec3(1, 0, 0), identity())); \n    co = minWithColor(co, sdSphere(p, 1., vec3(-2.5, 0, -2), vec3(0, .8, .8))); // Blaue Kugel\n    return co;\n}\n\nfloat shadowRay(vec3 ro, vec3 rd) {\n    float depth = MIN_DIST;\n    for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n        vec3 p = ro + depth * rd;\n        float h = sdScene(p).sd;\n        if (h < PRECISION) return 0.0;\n        depth += h;\n        if (depth > MAX_DIST) break;\n    }\n    return 1.0;\n}\nSurface rayMarch(vec3 ro, vec3 rd, float start, float end) {\n  float depth = start;\n  Surface co; // closest object\n\n  for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n    vec3 p = ro + depth * rd;\n    co = sdScene(p);\n    depth += co.sd;\n    if (co.sd < PRECISION || depth > end) break;\n  }\n  \n  co.sd = depth;\n  \n  return co;\n}\n\nvec3 calcNormal(in vec3 p) {\n    vec2 e = vec2(1.0, -1.0) * 0.0005; // epsilon\n    return normalize(\n      e.xyy * sdScene(p + e.xyy).sd +\n      e.yyx * sdScene(p + e.yyx).sd +\n      e.yxy * sdScene(p + e.yxy).sd +\n      e.xxx * sdScene(p + e.xxx).sd);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n  vec3 backgroundColor = vec3(0.835, 1, 1);\n\n  vec3 col = vec3(0);\n  vec3 ro = vec3(0, 0, 3); // ray origin that represents camera position\n  vec3 rd = normalize(vec3(uv, -1)); // ray direction\n\n  Surface co = rayMarch(ro, rd, MIN_DIST, MAX_DIST); // closest object\n\n  if (co.sd > MAX_DIST) {\n        col = backgroundColor;\n    } else {\n        vec3 p = ro + rd * co.sd;\n        vec3 normal = calcNormal(p);\n\n        float rotationSpeed = 0.5;  \n        float radius = 5.0;\n        vec3 lightPosition = vec3(\n            radius * cos(iTime * rotationSpeed), \n            2, \n            radius * sin(iTime * rotationSpeed)\n        );\n        vec3 lightDirection = normalize(lightPosition - p);\n        vec3 shadowRayDir = normalize(lightPosition - p);\n        float sh = shadowRay(p + normal * PRECISION * 2.0, shadowRayDir); // Shadow information\n\n        float dif = clamp(dot(normal, lightDirection), 0.3, 1.);\n        col = dif * co.col * sh + backgroundColor * .2; \n    }\n\n    fragColor = vec4(col, 1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}