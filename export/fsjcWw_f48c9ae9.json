{"ver":"0.1","info":{"id":"fsjcWw","date":"1643647319","viewed":86,"name":"Gravity Colored Direction","username":"GDur","description":"This shader calculates the force of gravity at each point/pixel of this texture.\nThe force is dependent on the position and mass of particles.\nThe denser the \"rings\" are, the stronger the gravity.\nEach pixel color indicates the direction of the force.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["gravity","heatmap","colorencodeddirection"],"hasliked":0,"parentid":"fsSyDW","parentname":"Gravity Heatmap"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TWO_PI 6.28318530718\n#define PI 3.1415\n\n//  Function from IÃ±igo Quiles\n//  https://www.shadertoy.com/view/MsS3Wc\nvec3 hsb2rgb(in vec3 c) {\n  vec3 rgb = clamp(abs(mod(c.x * 6.0 + vec3(0.0, 4.0, 2.0),\n        6.0) - 3.0) - 1.0,\n    0.0,\n    1.0);\n  rgb = rgb * rgb * (3.0 - 2.0 * rgb);\n  return c.z * mix(vec3(1.0), rgb, c.y);\n}\n\nvec3 calculateGravityIntensity(in vec2 fragCoord, vec3[3] planets)\n{\n  // planet xy = coords\n  // planet z = mass\n\n  //float gravitationForce = 0.0;\n  vec2 diffVectorAdded = vec2(0.0, 0.0);\n  for (int i = 0; i < 3; i++) {\n    vec3 p = planets[i];\n    vec2 diffVector = (p.xy - fragCoord);\n    float magnitudeSquared = length(diffVector);\n    // magnitude could be 0. Division by 0 is \"infinity\".\n    // magnitudeSquared += 200.4;\n    float gravitationForce = (0.0001 * p.z) / (magnitudeSquared * magnitudeSquared);\n\n    diffVectorAdded += normalize(diffVector) * (-gravitationForce * 1.0);\n  }\n  // diffVectorAdded = normalize(diffVectorAdded);\n\n  return vec3((diffVectorAdded.xy), length(diffVectorAdded));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n  float radius = length(iResolution.xy);\n  float massMultiplicator = radius * radius;\n\n  float sinT = 200.0 * sin(iTime / 8.0);\n  float cosT = 200.0 * cos(iTime / 8.0);\n\n  vec3 planets[3];\n\n  planets[0] = vec3(\n    iResolution.xy / 2.0,\n    50.0 * massMultiplicator\n  );\n  planets[1] = vec3(\n    iResolution.x / 2.0 + sinT * 2.0,\n    iResolution.y / 2.0 + cosT * 2.0,\n    10.0 * massMultiplicator\n  );\n  planets[2] = vec3(\n    iResolution.x / 2.0 - sinT * 4.0,\n    iResolution.y / 2.0,\n    14.0 * massMultiplicator\n  );\n  \n  vec3 gVec = calculateGravityIntensity(fragCoord, planets);\n  float degree = atan(gVec.y, gVec.x) / (TWO_PI);\n  vec3 color = hsb2rgb(\n    vec3(\n      degree,\n      cos(gVec.z) / 2.0 + .5,\n      1.0)\n  );\n  fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}