{"ver":"0.1","info":{"id":"WllcR4","date":"1616089716","viewed":77,"name":"GenNoiseWindows","username":"legavroche","description":"Exercises for testing noise","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float Threshold(vec3 col, float threshold)\n{\n    if (col.r < threshold)\n    {\n     \treturn 0.0f;\n    }\n    return 1.0f;\n}\n\nfloat Random(float t)\n{\n \treturn fract(sin(t) * 1e4);   \n}\n\n// Returns a pseudorandom value from [0,1]\nfloat Random(vec2 uv)\n{    \n\treturn fract(sin(dot(uv, vec2(12.313, 53.34))) * 100000.0f);\n    //return fract(sin(dot(uv, vec2(12.313, 53.34))) * 10000.0f);\n}\n\n//Gradient of rows/column\nvec3 GradientColor(float x, float y)\n{\n\treturn vec3(\n        x,\n        y,\n        1.0f\n   \t);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 grid = vec2(100.0f, 50.0f);    \n    vec2 ipos = uv * grid;      \n   \t\n    float shiftFactor = iTime * 20.0f * Random(floor(ipos.y))*0.5f + 0.5f;\n    if (mod(floor(ipos.y), 2.0f) == 0.0f)\n    \tipos.x -= shiftFactor;\n    else\n    \tipos.x += shiftFactor;\n    \n    ipos.x -= shiftFactor;\n    \n    ipos = floor(ipos);\n            \n    vec3 col = vec3(Random(ipos));\n    col = vec3(Threshold(col, 0.3f));\n   \n    // generate margins\n    vec2 fpos = fract(uv * grid);\n    \n    col *= step(0.2f, fpos.y);    \n    \n    float pctX = smoothstep(0.5f-0.005f, 0.5f, uv.x) - smoothstep(0.5f, 0.5f+0.005f, uv.x);\n    float pctY = smoothstep(0.5f-0.01f, 0.5f, uv.y) - smoothstep(0.5f, 0.5f+0.01f, uv.y);\n    \n    //col *= GradientColor(uv.x, uv.y);\n    // Diff color for each window  \n    if (uv.x < 0.5f && uv.y > 0.5f)\n    {\n      \tcol *= vec3(1.0f, 0.5f, 0.5f);\n    }\n    else if (uv.x < 0.5f && uv.y < 0.5f)\n    {\n       \tcol *= vec3(0.5f, 0.5f, 1.0f);\n    }\n    else if (uv.x > 0.5f && uv.y < 0.5f)\n    {\n       \tcol *= vec3(1.0f, 1.0f, 0.5f);\n    }\n    else if (uv.x > 0.5f && uv.y > 0.5f)\n    {\n       \tcol *= vec3(0.5f, 1.0f, 0.5f);\n    }\n    \n    col = (1.0f-pctX)*col;\n    col *= (1.0f-pctY)*col;\n   \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}