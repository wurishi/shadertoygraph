{"ver":"0.1","info":{"id":"NssBWn","date":"1644715203","viewed":236,"name":"exploding icons","username":"Carandiru","description":"exploding icons","likes":4,"published":3,"flags":32,"usePreview":0,"tags":["explosion"],"hasliked":0,"parentid":"XtKXWz","parentname":"Archillect v2"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// playing with https://www.shadertoy.com/view/4dfSWs and https://www.shadertoy.com/view/XtKXWz\n#define pixel 7.0\n\n#define dur 5.0\n#define spd 1.0\n\n#define explosion_force 25.0\n\nvec2 rand(vec2 v)\n{\n    return vec2(fract(sin(dot(v.xy ,vec2(12.9898,78.233))) * 43758.5453),\n                fract(cos(dot(v.yx ,vec2(31.6245,22.723))) * 63412.9227)) - 0.5;\n}\n\nvec3 explode(vec2 p, float t, in float blast)\n{\n    t = t * 0.5f;\n    \n\tp = floor(p / vec2(pixel));\n\t\n    vec2 r = rand(p);\n\tvec2 delta = 2.0*r * vec2(blast*0.25f*t, 1.0) - vec2(0.0, t*0.981);\n    \n\tp -= blast*delta*t;\n    \n\treturn textureLod(iChannel0, p/vec2(256.0, 32.0), 0.0).rgb;\n}\n\n// Intensity of the image is faded around the edges\nfloat edgeIntensity(vec2 uv)\n{\n\tfloat edgeIntensityX = 1.0;\n    if( uv.x < 0.1)\n    {\n    \tedgeIntensityX = 0.7 + 0.3*(uv.x/0.1);\n    }\n    else if( uv.x > 0.90)   \n    {\n    \tedgeIntensityX = 0.7 + 0.3*((1.0-uv.x)/0.1);\n    }\n        \n    float edgeIntensityY = 1.0;\n    if( uv.y < 0.15)\n    {\n    \tedgeIntensityY = 0.6 + 0.4*(uv.y/0.15);\n    }\n    else if( uv.y > 0.85)   \n    {\n    \tedgeIntensityY = 0.6 + 0.4*((1.0-uv.y)/0.15);\n    }        \n    return edgeIntensityX*edgeIntensityY;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec2 uv = fragCoord / iResolution.xy;\n   \tuv.y /= iResolution.x/iResolution.y;\n    \n    vec2 p = uv + vec2(0.05f,-0.2f);\n    p *= iResolution.xy * 1.5f;\n    \n    vec3 explosion = vec3(0);\n    \n    float t = iTime;\n    float blast = mix(1.0, explosion_force, clamp((t)/10.0f, 0.0f, 1.0f));\n    if (t < 8.0f) {\n       blast = 0.0f;\n    }\n    \n    t = spd*t;\n    \n    explosion = explode(p, mod(t, dur), blast);\n\n    explosion = mix(explosion, explode(p, mod(t, dur), blast * (1.0f + explosion.x)), 0.5);\n    explosion = mix(explosion, explode(p, mod(t, dur), blast * (1.0f + explosion.y)), 0.5);\n    explosion = mix(explosion, explode(p, mod(t, dur), blast * (1.0f + explosion.z)), 0.5);\n\n    if (t < 10.0f) {\n       explosion += explode(p, mod(t, dur), 0.0f);\n    }\n    \n    const vec3 good_color = vec3(239./255.,6./255.,105./255.);\n    \n    vec3 color = mix(vec3(1,0,0), good_color, explosion);\n    \n    p = floor(p / vec2(pixel));\n    float grid = textureLod(iChannel1, (p + vec2(0.5f, 36.0f))/vec2(242.0, 64.0), 0.0).r;\n    \n    color += mix(vec3(1,0,0), good_color, grid);\n    \n    color.r = 0.0f;\n    color += 0.5f * good_color * grid + 0.9f * good_color * explosion;\n    color *= good_color;\n    \n    color *= edgeIntensity(uv);\n    color = color + color * color * 0.1f;\n\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// playing with https://www.shadertoy.com/view/4dfSWs and https://www.shadertoy.com/view/XtKXWz\n\n#define RADIUS 0.5\n#define AB_SCALE 0.75\n\nfloat diskColor(in vec2 uv, vec2 offset)\n{\n    uv = uv - smoothstep(0.01,2.0,texture(iChannel0, (uv*1.0 - vec2(iTime /3.0,0)) + offset).r) * 0.20;\n    \n    float d = length(uv) - RADIUS;\n    return smoothstep(0.01,0.02,d);\n}\n\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec2 uv = 2.0f * fragCoord / iResolution.xy - 1.0f;\n   \tuv.y /= iResolution.x/iResolution.y;\n    \n    vec3 color = vec3(0);\n    color += vec3(1, 0, 0)*diskColor(uv, vec2(0, 0.02) * AB_SCALE);\n    color += vec3(0, 1, 0)*diskColor(uv, vec2(0.01, 0.01) * AB_SCALE);\n    color += vec3(0, 0, 1)*diskColor(uv, vec2(0.02, 0) * AB_SCALE);\n\n    float shade = 1.0f - dot(color, LUMA);\n\n    fragColor = vec4(shade);\n}\n\n\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define LUMA vec3(0.2126f, 0.7152f, 0.0722f)","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// Get uv of the plane for laser texture\nvec2 planeProjection(in vec2 uv)\n{\n\tvec3 eye = vec3(0.0, -0.7, 0.9);\n    float viewPortZ = 0.5;\n    float viewPortH = 2.0;\n    float viewPortW = viewPortH * iResolution.x / iResolution.y;\n    vec2 center = vec2(viewPortW/2.0, viewPortH/2.0);\n    \n    vec2 dir = (vec2(uv.x*viewPortW, uv.y*viewPortH) - center) / viewPortZ; // (dx,dy) per unit of z \n    \n    \n    // Intersecting (x,z) plane in y=0.0\n    float zIntersect = eye.y / dir.y;\n    float xIntersect = zIntersect * dir.x;\n            \n    vec2 planeUv = vec2(xIntersect, zIntersect);\n\n    if(planeUv.y > 1.0)\n    {\n    \tplaneUv.y = -1.0 + planeUv.y - (iTime*0.5f) - 8.0f;\n    }\n    \n    return planeUv;\n}\nfloat gridTexture(in vec2 uv)\n{\n    if(uv.y < 0.0)\n    {\n    \treturn 0.0;\n    }\n    float thickness = 0.1;\n\tfloat speed = 4.0;\n    \n    float xPhase = mod(6.0*uv.x-speed*iTime*0.5f, 1.0);\n    float yPhase = mod(6.0*uv.y+speed*iTime, 1.0);\n            \n    float xIntensity = max(0.0, 1.0-abs(0.5-xPhase)/thickness);\n    float yIntensity = max(0.0, 1.0-abs(0.5-yPhase)/thickness);\n    \n\treturn (yIntensity+xIntensity);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n   \tuv.y /= iResolution.x/iResolution.y;\n    \n    vec2 planeUv = planeProjection(uv);\n    float shade = gridTexture(planeUv+vec2(iTime/3.5,0.0));\n    \n    fragColor = vec4(vec3(shade),1.0);\n}","name":"Buffer B","description":"","type":"buffer"}]}