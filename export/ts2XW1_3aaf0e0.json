{"ver":"0.1","info":{"id":"ts2XW1","date":"1593727662","viewed":68,"name":"create a camera ","username":"eclypse","description":"create a camera ","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["camera"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float DistLine(vec3 ro, vec3 rd, vec3 p) {\n\treturn length(cross(p-ro, rd))/length(rd);\n}\n\nfloat DrawPoint(vec3 ro, vec3 rd, vec3 p) {\n\tfloat d = DistLine(ro, rd, p);\n    d = smoothstep(.06, .05, d);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\t\n    float t = iTime;\n\tvec2 uv = ( fragCoord.xy / iResolution.xy );\n\t\n\tuv -= .5;\n\t\n\tuv.x *= iResolution.x / iResolution.y;\n\t\n\tvec3 ro = vec3(3. * sin(t), 0., -3. * cos(t));\n    \n    float zoom = 1.;\n    \n    vec3 lookAt = vec3(.5);\n    \n    vec3 f = normalize(lookAt - ro);\n    vec3 r = cross(vec3(0., 1., 0.), f);\n    vec3 u = cross(f, r);\n    \n    vec3 c = ro + f * zoom;\n    vec3 i = c + uv.x * r + uv.y * u;\n    vec3 rd = i - ro;\n    \n    \n\t\n\tvec3 p = vec3(sin(t), 0., 3. + cos(t));\n\t\n\tfloat d = 0.;\n    \n    d += DrawPoint(ro, rd, vec3(0., 0., 0.));\n    d += DrawPoint(ro, rd, vec3(0., 0., 1.));\n    d += DrawPoint(ro, rd, vec3(0., 1., 0.));\n    d += DrawPoint(ro, rd, vec3(0., 1., 1.));\n    d += DrawPoint(ro, rd, vec3(1., 0., 0.));\n    d += DrawPoint(ro, rd, vec3(1., 0., 1.));\n    d += DrawPoint(ro, rd, vec3(1., 1., 0.));\n    d += DrawPoint(ro, rd, vec3(1., 1., 1.));\n    \n\t\n\tfragColor = vec4(d);\n}","name":"Image","description":"","type":"image"}]}