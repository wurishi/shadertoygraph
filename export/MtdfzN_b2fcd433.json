{"ver":"0.1","info":{"id":"MtdfzN","date":"1538918864","viewed":133,"name":"Nature.1 Through a Black Hole","username":"tqle","description":"Nature Projects, experiment #1. Spacetime distorted by going through a blackhole","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["nature"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//define functions, as to not be redundant \n#define repeat(v, r) (mod(v, r)-r/2.)\n//constructurs, similar to that of a class in Java\nstruct Shape{\n  float dist;\n  vec4 color;\n};\n\n//parametize vec2 -> randomize float\nfloat random(vec2 v) {\n  return fract(sin(dot(v*0.1, vec2(324.654, 156.546)))*46556.2);\n}\n//rotating distance of objects\nmat2 rot(float a) {\n  float r = sin(pow(a, 1.3));\n  float f = sin(a);\n  return mat2(r, f, sin(-f), r);\n}\n//* Shapes *//\nfloat pole(vec2 v, float r) {\n  return length(v) - r;\n}\nfloat sphere(vec3 v, float r) {\n  return length(v) - r;\n}\nfloat box(vec3 v, float r, float m) {\n  return max(length(v.xy) - r, abs(v.z) - m);\n}\n//* Mixers *//\nfloat mixColors(float r, float v, float z) {\n  return clamp(0.2 + 0.8 *(v - r) / z, cos(iTime), 1.);\n}\nfloat mixShapes(float v, float f, float r) {\n  float z = mixColors(v, f, r);\n  return mix(f, v, z) - r * z * (1. - z);\n}\n//changing definition of plar coordinates\nfloat pModPolar(inout vec2 v, float r){\n  float f = 6.28318 / r;\n  float z = atan(v.y, v.x) + f * 0.5;\n  float m = floor(z/f);\n  z = mod(z, f) - f * 0.5;\n  v = vec2(cos(z), sin(z)) * length(v);\n  return m;\n}\n//creating vines, return a Shape object, as designed\nShape vines(vec3 c){\n  Shape shape;\n  float vine;\n  shape.dist = 1000.; // Draw Distance\n  shape.color = vec4(atan(iTime)); // Initial Color\n\n  // Shape Attributes\n  float twist = 11. * sin(iTime) + 9.5; // Vine Repeat\n  float vineOffset = 2.; // Leaf Offset\n\n\n  // Stems\n  vec3 i = c;\n    i.xz *= rot(c.y * 0.1 + iTime * 0.1);\n    float detail = pModPolar(i.xz, pow(twist, 1.1)); \n    float x = mix(0., 1., mod(detail, cos(iTime)*exp(iTime)/pow(iTime, 3.))); // Small Ripples\n    i.x -= vineOffset; // Offset Stems\n  \tfloat stemWidth = 0.25;\n  \tvine = pole(i.xz, stemWidth + 0.02 * sin(i.y * x + atan(iTime)));\n\t\n  //mixing color, time-dependent\n  float mixVal = mixColors(sin(iTime), cos(iTime), atan(iTime));\n  vec4 color = vec4(mixVal, .75, atan(iTime)/(mod(exp(iTime), pow(iTime, 3.))), mixVal);\n\n  shape.dist = vine;\n  shape.color = color;\n\n  return shape; //return a shape\n}\n\n\nShape map(vec3 c){\n  Shape vines = vines(c);\n  return vines;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  //remapping coordinate system \n  vec2 v = (fragCoord.xy-0.5 * iResolution.xy) / iResolution.y;\n\n  //setting camera positioning \n  vec3 cam = vec3(0., 0., -10.);\n  vec3 f = normalize(vec3(v, 1.));\n  vec3 scene = cam;\n  fragColor = vec4(0.);\n\n  // Ray Marcher\n  for(float z = 0.1 ; z <= 1.; z += 0.03){\n    Shape c = map(scene); // Calc SDF\n    if(c.dist < 0.01){\n      fragColor = c.color*(1.-z); // Hit  - invert pixels\n      break;\n    }\n    scene += f * c.dist;\n\n\n  }\n}\n","name":"Image","description":"","type":"image"}]}