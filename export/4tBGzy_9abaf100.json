{"ver":"0.1","info":{"id":"4tBGzy","date":"1429804485","viewed":155,"name":"testShaderTsuba","username":"Tsubaki","description":"test","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"// Rotation ------------------------------------------------------------\n \n// Rotation around y axis\n// v : Vector\n// a : Angle\nvec3 rotate(in vec3 v,in float a)\n{\n    return vec3(v.x*cos(a)+v.z*sin(a),v.y,-v.x*sin(a)+v.z*cos(a));\n}\n\n// Noise ------------------------------------------------------------\n\nconst mat3 m = mat3( 0.00,  0.80,  0.60,\n                    -0.80,  0.36, -0.48,\n                    -0.60, -0.48,  0.64 );\n\n \nfloat hash( float n ) { return fract(sin(n)*43758.5453123); }\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n\t\n    float n = p.x + p.y*157.0 + 113.0*p.z;\n    return mix(mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\n                   mix( hash(n+157.0), hash(n+158.0),f.x),f.y),\n               mix(mix( hash(n+113.0), hash(n+114.0),f.x),\n                   mix( hash(n+270.0), hash(n+271.0),f.x),f.y),f.z);\n}\n \n//fonction de bruit sur 4 octaves\nfloat bruit(in vec3 p, in float frequence)\n{\n    float f;\n    vec3 q = frequence*p;\n    f  = 0.7000*noise( q ); q = m*q*2.01;\n    f += 0.2500*noise( q ); q = m*q*2.02;\n    f += 0.1250*noise( q ); q = m*q*2.03;\n    f += 0.0625*noise( q ); q = m*q*2.01;\n    f /= 0.5+0.25+0.125+0.0625;\n    return f;\n}\n\n// Couleur ------------------------------------------------------------\nconst vec3 red=vec3(0.4,0.137,0.047);\nconst vec3 yellow=vec3(0.808,0.443,0.0549);\nconst vec3 blue=vec3(0.0,0.0,1.0);\nconst vec3 black = vec3(0.0,0.0,0.0);\nconst vec3 white = vec3(1.0,1.0,1.0);\nconst vec3 grey = vec3(0.5,0.5,0.5);\nconst vec3 greyWhite = vec3(0.7,0.7,0.7);\nconst vec3 grey2 = vec3(0.2,0.2,0.2);\nconst vec3 salmon = vec3(0.835,0.611,0.482);\nconst vec3 redSalmon = vec3(1,0.611,0.482); \nconst vec3 bleuCiel = vec3(0.0,0.4,1.0);\nconst vec3 bois1 = vec3(252.0/255.0, 221.0/255.0, 175.0/255.0);\nconst vec3 bois2 = vec3(0.674, 0.560, 0.388);\nconst vec3 green = vec3(0.0,0.8,0.0);\nconst vec3 darkGreen = vec3(0.0,0.3,0.0);\n\n// Texture ------------------------------------------------------------\n// Simple color\n// p : Point on object\n// n : Normal at point\nvec3 color(in vec3 p,in vec3 n)\n{\n    return salmon;\n}\n\nvec3 rouille(in vec3 p,in vec3 n)\n{\n    float f = bruit(p, 10.0);\n    float seuil=0.65;\n\tif(f > seuil)\n    {\n        return mix(red,yellow,(f-seuil)/(1.0-seuil));\n    }\n    else\n    {\n        return mix(grey2,grey,f/seuil);\n    }   \n}\n\nvec3 granite(in vec3 p, in vec3 n)\n{\n    float f = bruit(p, 100.0);\n    float g = bruit(p, 50.0);\n    \n    float seuilGrey2 = 0.62;\n    float seuilGrey = 0.5;\n    \n    if (f > seuilGrey2)\n    {\n        if(g> seuilGrey)\n        {\n            return grey2; \n        }\n    \telse\n        {\n        \treturn grey;\n        }\n    } else {\n    \treturn mix(redSalmon,salmon, f);    \n    }   \n}\n\nvec3 boisIrregulier(in vec3 p, in vec3 n)\n{\n    float noiseValue = 0.8*noise(3.0*p);\n    noiseValue += 0.2*noise(10.0*p);\n    \n    vec3 pa=p-vec3(1.0,1.0,1.0);\n    \n    float val=pow(mod(8.0*(sqrt(dot(pa,pa))*0.9+noiseValue*0.1),1.0),2.0);\n    float v=0.6*(1.0+cos(val));\n    return mix(bois2,bois1,v);\n}\n\nvec3 bois(in vec3 p, in vec3 n)\n{\n    vec3 pa=p-vec3(1.0,1.0,1.0);\n    float v=0.6*(1.0+cos(pow(mod(10.0*sqrt(dot(pa,pa)),1.0),2.0)));\n    return mix(bois2,bois1,v);\n}\n\nvec3 marbre(in vec3 p, in vec3 n)\n{\n    float f = bruit(p, 8.0);\n    float seuil=0.6;\n    \n    if(f > seuil)\n    {\n        return mix(grey,white,f);\n    }\n    else if (f > seuil-0.03)\n    {\n        return grey;\n    }\n    else \n    {\n        return mix(grey,white,2.0*seuil-f);\n    }\n}\n\nvec3 terre(in vec3 p, in vec3 n)\n{\n    \n    float f = bruit(p, 5.0);\n    float seuil=0.65;\n\tif(f > seuil)\n    {\n        return mix(darkGreen,green,(f-seuil)/(1.0-seuil));\n    }\n    else\n    {\n        return bleuCiel;\n    }   \n}\n\nvec3 terreNuage(in vec3 p, in vec3 n)\n{\n    float f = bruit(p, 3.5);\n    float seuil = 0.55;\n    if(f < seuil)\n    {\n        return terre(p,n);\n    }\n    else\n    {\n        return mix(terre(p,n),white,(f-seuil)/(1.0-seuil));\n    }\n}\n\n// Color sine wave\nvec3 sine(in vec3 p,in vec3 n)\n{\n    vec3 pa=p-vec3(1.0,1.0,1.0);\n    float v=0.6*(1.0+cos(500.0*sqrt(dot(pa,pa))));\n    return mix(red,yellow,v);\n}\n \n// Objects --------------------------------------------------------------\n \n// Intersection between a ray and a sphere\n// o : Ray origin\n// d : Ray direction\n// c : Center of sphere\n// r : Radius\n// t : Intersection depth\n// n : Normal at intersection point\nbool sphere(in vec3 o,in vec3 d,in vec3 c,in float r,out float t,out vec3 n)\n{\n    vec3 oc = o-c;\n   \n    float b=dot(d,oc);\n    float k = dot(oc,oc)-r*r;\n    t=b*b-k;\n      \n    if (t<=0.0) return false;\n   \n    t=-b-sqrt(t);\n    if (t<0.0) return false;\n   \n    // Normal\n    n=(o+t*d-c)/r;\n \n   return true;\n}\n \n// Lighting -------------------------------------------------------------\n \n// Background color\n// r : Ray direction\nvec3 background(in vec3 r)\n{\n    return mix(vec3(0.2, 0.3, 0.4), vec3(0.7, 0.8, 1.0), r.y*0.5+0.5);\n}\n \n// p : Point on object\n// n : normal at point\nvec3 shade(in vec3 p,in vec3 n)\n{\n    // Point light\n    const vec3 lightPos = vec3(1.0, 1.0,-5.0);\n    const vec3 lightColor = vec3(0.95, 0.95,0.95);\n \n    vec3 l = normalize(lightPos - p);\n \n    // Not even Phong shading, use weighted cosine instead for smooth transitions\n    float diff = 0.5*(1.0+dot(n, l)*dot(n, l));\n \n    // Change call to Texture there : apply either color() or sine() or checker() or whatever texture you wish\n    vec3 c = 0.2*background(n)+0.8*terreNuage(p,n)*diff*lightColor;\n \n    return c;\n}\n \n// Vignetting    \n// c : Color\n// p : Point in screen space\nvec4 Vignetting(in vec4 c,in vec2 p)\n{\n    return c * ( 0.5 + 0.5*pow( (p.x+1.0)*(p.y+1.0)*(p.x-1.0)*(p.y-1.0), 0.1 ) );\n}\n\n\n// Main -----------------------------------------------------------------\n \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 xy = -1.0 + 2.0*fragCoord.xy/iResolution.xy;\n    vec2 uv = xy * vec2(iResolution.x/iResolution.y, 1.0);\n   \n    // Ray origin and direction\n    vec3 o = vec3(0.0, 0.0, -2.0);\n    vec3 d = normalize(vec3(uv, 1.0));\n               \n    o=rotate(o,0.5*iTime);\n    d=rotate(d,0.5*iTime);\n   \n    vec3 n;\n    float t;\n   \n    // Default background color\n    fragColor=vec4(background(d),1.0);\n    if (sphere(o, d, vec3(0.0, 0.0, 0.0), 1.0, t, n))\n    {         \n        fragColor = vec4( mix(background(d), shade(o+d*t,n), step(0.0, t)), 1.0 );\n    }\n    fragColor=Vignetting(fragColor,xy);\n}","name":"","description":"","type":"image"}]}