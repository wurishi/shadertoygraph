{"ver":"0.1","info":{"id":"4XXGzl","date":"1707803991","viewed":79,"name":"Moiré Remap function","username":"zadkielmodeler","description":"Conical gradient with 6x frequency combined with 2x frequency Radial Gradient via moiré remapping.\n","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["gradient","cone","moir","remapping","frequency","remap","conical"],"hasliked":0,"parentid":"M3l3RX","parentname":"Frequency Function"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI acos(-1.0)\n//Licence: Do what you want with this, but give me a shout out if you use it.\n\n//This is a recreation of something I did in SpiralGraphics Genetica a long time ago.\n\n\n\nfloat conicalGradient(vec2 uv) {\n\n    vec2 center = vec2(0,0);\n    uv -= 0.5;\n    uv *= 2.0;\n    uv.x *= iResolution.x / iResolution.y;\n    vec2 offset = uv - center;\n    return atan(-offset.y, -offset.x) / (2.0 * PI) + 0.5;\n}\n\nfloat radialGradient(vec2 uv) {\n\n    vec2 center = vec2(0,0);\n    uv -= 0.5;\n    uv *= 2.0;\n    uv.x *= iResolution.x / iResolution.y;\n    vec2 offset = uv - center;\n    return length(offset);\n}\n\n\n\nfloat applyFrequency(float value, float frequency, float amplitude) {\n    return sin(value * frequency) * amplitude;\n}\n\n\nvec3 conicalColor (vec2 uv)\n{\n    float conical = conicalGradient(uv);\n\n    vec3 col = vec3(1.0-conical,0,0);\n    return col;\n}\n\nvec3 radialColor (vec2 uv)\n{\n    float radial = radialGradient(uv);\n\n    vec3 col = vec3(1.0-radial,0,0);\n    return col;\n}\n\n\n\n\n//frequncy similar to genetica's frequency function\nvec3 frequency(float gradient, float frequency, float amplitude, float phase) {\n\n \n    // Apply the frequency effect\n    float freqEffect = applyFrequency((gradient * 2.0 * PI) + phase, frequency, amplitude);\n    \n    // Mixing the conical gradient with the frequency effect\n    // The 0.5 offsets the sine wave to only get positive values\n    float combined = 0.5 + 0.5 * freqEffect;\n\n    vec3 col = vec3(1.0 - combined, 0, 0);\n    return col;\n}\n\nfloat moire(vec2 uv, float time, float angleOffset, float rotationSpeed)\n{\n\n    // Convert cartesian to polar coordinates\n    float angle = atan(uv.y, uv.x);\n    float radius = length(uv);\n    \n    float ringQuantity = 1.;\n    float radialGrowthSpeed =  1.0;\n\n    // Function to create the moiré pattern\n    float moire = sin(6.0 * (angle + angleOffset) + rotationSpeed * time) * cos(ringQuantity * radius - radialGrowthSpeed * time);\n\n    return moire;\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    //vec2 tileduv = tile(uv);\n\n    vec3 color = conicalColor(uv);\n    vec3 color1 = radialColor(uv);\n        \n    color = frequency(color.r, 6.0, 1.0, 0.79);\n    color1 = frequency(color1.r, 2.0, 1.0, iTime/2.0);\n    \n    vec2 newUv = vec2(color.r,color1.r);\n    float moire = moire(newUv, 1.0 ,0.0, 1.0);\n    \n    vec3 color2 = vec3(1.0,0.0,0.0);\n    // Combine the moire pattern with the color gradient\n    float remapped= 0.5 + 0.5 * moire;\n    \n    color2.r = remapped;\n\n    \n    \n    // Output to screen\n    fragColor = vec4(color2,1.0);\n}","name":"Image","description":"","type":"image"}]}