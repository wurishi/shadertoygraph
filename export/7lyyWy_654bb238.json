{"ver":"0.1","info":{"id":"7lyyWy","date":"1662128574","viewed":57,"name":"ShaderPrac_02_rotatetilepattern","username":"AstridV","description":"RotateTilePattern","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d","math","rotate","pattern"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//  I learned this from www.thebookofshaders.com\n//  Don't use this for comertial\n//  I share this just for learning like a homework\n\n#define PI 3.14159265359\n\nvec2 tile (vec2 uv, float zoom)\n{\n    uv *= zoom;\n    \n    return fract(uv);\n}\n\nvec2 rotate2D (vec2 uv, float angle)\n{\n    uv -= .5;\n    uv = mat2(cos(angle), -sin(angle),\n                sin(angle), cos(angle)) * uv;\n    //uv += .5;\n    \n    return uv;\n}\n\nvec2 rotatetile (vec2 uv)\n{\n    uv *= 2.;  //Subdivide\n    \n    float index = 0.0;\n    index += step(1., mod(uv.x, 2.));\n    index += step(1., mod(uv.y, 2.)) * 2.;\n    \n    uv = fract(uv);\n    \n    if (index == 1.)\n    {uv = rotate2D(uv, PI * .5);}\n    else if (index == 2.)\n    {uv = rotate2D(uv, PI * -.5);}\n    else if (index == 3.)\n    {uv = rotate2D(uv, PI);}\n    else \n    {uv = rotate2D(uv, 0.);}\n    \n    return uv;\n}\n\nvoid mainImage ( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = vec2(uv.x, 1. - uv.y);\n\n    // Time varying pixel color\n    vec3 col = vec3(0.0);\n    \n    uv = tile(uv, 3.);\n    uv = rotatetile(uv);\n    uv = rotate2D(uv, PI * iTime * .25);\n    \n    //Composite\n    col = vec3(step(uv.x, uv.y));\n    //col = vec3(uv, 0.0);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}