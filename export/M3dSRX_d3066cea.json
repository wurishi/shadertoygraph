{"ver":"0.1","info":{"id":"M3dSRX","date":"1719846267","viewed":52,"name":"grid circle lookaround spin","username":"HaleyHalcyon","description":"jjsasa","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["asasasa"],"hasliked":0,"parentid":"l3tXz2","parentname":"grid circle rings look around"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define HEX(x) vec3((ivec3(x)>>ivec3(16,8,0))&255)/255.\nvec3 colormap(int x) {\n    const vec3[6] c = vec3[](\n    HEX(0x009be8),\n    HEX(0x540abd),\n    HEX(0xeb0072),\n    HEX(0xd96b07),\n    HEX(0xfff100),\n    HEX(0x27b92d)\n    );\n    \n    return c[x % 6];\n}\n\nconst int[256] r = int[](41, 81, 213, 195, 45, 22, 101, 188, 120, 176, 244, 238, 118, 116, 206, 84, 51, 50, 35, 193, 10, 194, 0, 154, 61, 251, 58, 198, 237, 95, 6, 200, 160, 105, 223, 112, 192, 145, 172, 204, 125, 29, 121, 88, 7, 170, 30, 226, 180, 123, 127, 104, 217, 33, 1, 236, 59, 67, 138, 135, 16, 75, 114, 185, 27, 233, 219, 32, 15, 252, 122, 163, 103, 5, 239, 174, 76, 78, 109, 115, 28, 43, 246, 197, 25, 202, 224, 34, 148, 131, 186, 214, 20, 222, 221, 178, 73, 149, 2, 47, 126, 80, 216, 128, 9, 79, 24, 162, 191, 129, 231, 124, 140, 100, 65, 166, 161, 234, 196, 23, 225, 36, 158, 168, 52, 169, 167, 228, 44, 53, 241, 107, 136, 220, 146, 201, 209, 42, 240, 153, 77, 72, 31, 171, 189, 179, 199, 132, 130, 94, 64, 39, 190, 93, 159, 96, 141, 210, 71, 99, 90, 60, 13, 207, 82, 3, 137, 12, 249, 142, 218, 147, 63, 83, 187, 8, 48, 98, 205, 134, 17, 92, 26, 46, 55, 232, 235, 111, 11, 203, 212, 133, 245, 37, 85, 87, 86, 66, 155, 113, 255, 208, 40, 106, 248, 74, 156, 97, 143, 152, 144, 227, 56, 242, 57, 177, 117, 38, 182, 89, 18, 54, 165, 119, 164, 175, 19, 102, 14, 173, 62, 108, 4, 247, 250, 184, 243, 70, 150, 139, 254, 157, 110, 229, 91, 215, 49, 69, 183, 211, 21, 181, 68, 253, 151, 230);\nconst float turn = acos(-1.) * 2.;\nvec2 fourway(int x) {\n    x %= 4;\n    return vec2(\n        int(x == 0) - int(x == 2),\n        int(x == 1) - int(x == 3)\n    );\n}\n\nint randi(int x) {\n    return r[x & 255];\n}\n\nfloat randr(int x, int i) {\n    return float(randi(x) % i);\n}\n\nfloat randf(int x) {\n    return float(randi(x)) / 255.0;\n}\n\nfloat reverseLerp(float x, float minV, float maxV) {\n    return clamp(\n        (x - minV) / (maxV - minV)\n    , 0.0, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (2. * fragCoord - iResolution.xy) / iResolution.y;\n    float t = fract(iTime / 10.0);\n    float tilt = -80.0 * turn / 360.0;\n    tilt *= 1. + -2. * (reverseLerp(\n        t, 0.4, 0.5\n    ) - reverseLerp(\n        t, 0.9, 1.0\n    )) + 0.06 * sin(t * turn * 1.0);\n    vec2 tiltCS = vec2(cos(tilt), sin(tilt));\n    uv *= mat2x2(\n        tiltCS.x, tiltCS.y,\n        -tiltCS.y, tiltCS.x\n    );\n    uv *= 3.0 - 1.4 * cos(turn * t * 2.);\n\n    vec2 uvI = round(uv);\n    vec2 uvF = uv - uvI;\n    int gridID = int(uvI.x * 7.0 + uvI.y * 17.0) & 255;\n    float tGrid = fract(t * 2. + 0.16 * (randf(\n        t < 0.5\n            ? gridID + 98\n            : gridID + 121\n        ) - 0.5));\n    \n    vec2 uvCirc = uvF\n        + 0.38 * (\n            fourway(randi(\n                t < .5 ? gridID * 9 : gridID * 10\n            ))\n            * smoothstep(0.4, 0.3, tGrid)\n            + fourway(randi(\n                t < .5 ? gridID * 11 + 14 : gridID * 12 + 32\n            ))\n            * smoothstep(0.25, 0.35, tGrid)\n            * smoothstep(0.65, 0.55, tGrid)\n            + fourway(randi(\n                t < .5 ? gridID * 11 + 189 : gridID * 13 + 95\n            ))\n            * smoothstep(0.5, 0.6, tGrid)\n        )\n        * smoothstep(0.15, 0.25, fract(t * 2.))\n        * smoothstep(0.8, 0.7, fract(t * 2.));\n    \n    float v = smoothstep(-0.16, 0.16, abs(fract(\n        length(uvCirc) * (\n            4.0 + randf(gridID) * 4.0\n        ) + t * (\n            1.0 + 3.0 * randr(gridID, 4)\n        ) + 3.0 * sin(turn * (\n            t * 2. + randf(gridID * 13)\n        )) + 1.0 * sin(turn * (\n            t * (3.0 + randr(gridID * 14, 3)) + randf(gridID * 24)\n        ))\n    ) - 0.5) - 0.25);\n    v *= smoothstep(0.45, 0.40, abs(uvF.x))\n      *  smoothstep(0.45, 0.40, abs(uvF.y))\n    ;\n    // no grayscale, gif export\n    //v = step(0.5, v);\n    int stepTime = int(ceil(reverseLerp(\n        fract(t * 2.0), 0.8, 1.0\n    ) * 12.0));\n    vec3 col = v * colormap(\n        randi(\n            ( t < 0.5\n                ? gridID * 5 + 3\n                : gridID * 13 + 4\n            ) +\n            randi(stepTime * 4) * stepTime\n        )\n    );\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}