{"ver":"0.1","info":{"id":"WslBzr","date":"1587611940","viewed":46,"name":"Cornell_Box_Ambient_Occlusion","username":"meanjeekim","description":"ambient occlusion","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["ambientocclusion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define RAY_STEPS 256\n\nconst int AO_SAMPLES = 256;\nconst float AO_DIST = 0.15;\nconst float FIVETAP_K = 2.0;\n\nconst float FOVY = 3.141569 * 0.25;\n\nstruct Intersection {\n    float t;\n    vec3 p;\n    vec3 color;\n    int object;\n};\n    \nvoid coordinateSystem(const vec3 v1, out vec3 v2, out vec3 v3) {\n    \n    if (abs(v1.x) > abs(v1.y)) {\n        v2 = vec3(-v1.z, 0, v1.x) / length(v1.xz);\n    }\n    else {\n        v2 = vec3(0, v1.z, -v1.y) / length(v1.yz);\n    }\n    v3 = cross(v1, v2);\n}\n    \nvec3 rotateY(vec3 p, float a) {\n    return vec3(cos(a) * p.x + sin(a) * p.z, p.y, -sin(a) * p.x + cos(a) * p.z);\n}\n\n//sphere sdf\nfloat sphere(vec3 p, float r, vec3 c) {\n \treturn distance(p, c) - r;   \n}\n\n//box sdf\nfloat box(vec3 p, vec3 b) {\n    return length(max(abs(p) - b, 0.0));\n}\n\n//plane sdf\nfloat plane(vec3 p, vec4 n) {\n    return dot(p, n.xyz) + n.w;\n}\n\n#define LIGHT_POS vec3(0., 7.45, 0.)\n#define BACK_WALL_SDF plane(pos, vec4(0.0, 0.0, -1.0, 5.0))\n#define LEFT_WALL_SDF plane(pos, vec4(1.0, 0.0, 0.0, 5.0))\n#define RIGHT_WALL_SDF plane(pos, vec4(-1.0, 0.0, 0.0, 5.0))\n#define CEILING_SDF plane(pos, vec4(0.0, -1.0, 0.0, 7.5))\n#define FLOOR_SDF plane(pos, vec4(0.0, 1.0, 0.0, 2.0))\n#define TALL_BOX_SDF box(rotateY(pos + vec3(2, 0, -3), 27.5 * 3.14159 / 180.0), vec3(1., 2., 1.))\n#define SMALL_BOX_SDF box(rotateY(pos + vec3(-2, 1, -0.75), -17.5 * 3.14159 / 180.0), vec3(1., 1., 1.))\n\n#define BACK_WALL 0\n#define LEFT_WALL 1\n#define RIGHT_WALL 2\n#define CEILING 3\n#define FLOOR 4\n#define TALL_BOX 5\n#define SMALL_BOX 6\n\nvoid testScene(vec3 pos, out float t, out int obj) {\n    t = BACK_WALL_SDF;\n    obj = BACK_WALL;\n\n    float t2;\n    if ((t2 = LEFT_WALL_SDF) < t) {\n        t = t2;\n        obj = LEFT_WALL;\n    }\n    if ((t2 = RIGHT_WALL_SDF) < t) {\n        t = t2;\n        obj = RIGHT_WALL;\n    }\n    if ((t2 = CEILING_SDF) < t) {\n        t = t2;\n        obj = CEILING;\n    }\n    if ((t2 = FLOOR_SDF) < t) {\n        t = t2;\n        obj = FLOOR;\n    }\n    if ((t2 = TALL_BOX_SDF) < t) {\n        t = t2;\n        obj = TALL_BOX;\n    }\n    if ((t2 = SMALL_BOX_SDF) < t) {\n        t = t2;\n        obj = SMALL_BOX;\n    }\n}\n\nfloat testScene(vec3 pos) {\n \tfloat t = BACK_WALL_SDF;\n    \n    float t2;\n    \n    t = min(t, LEFT_WALL_SDF);\n    t = min(t, RIGHT_WALL_SDF);\n    t = min(t, CEILING_SDF);\n    t = min(t, FLOOR_SDF);\n    t = min(t, TALL_BOX_SDF);\n    t = min(t, SMALL_BOX_SDF);\n    \n    return t;\n}\n    \n\nvec3 computeNormal(vec3 pos) {\n    vec3 epsilon = vec3(0.0, 0.001, 0.0);\n    return normalize(vec3(testScene(pos + epsilon.yxx) - testScene(pos - epsilon.yxx),\n                          testScene(pos + epsilon.xyx) - testScene(pos - epsilon.xyx),\n                          testScene(pos + epsilon.xxy) - testScene(pos - epsilon.xxy))\n                     );\n}\n\nvoid march(vec3 origin, vec3 dir, out float t, out int hitObj, vec3 lightPos) {\n \tt = 0.001;\n    for (int i = 0; i < RAY_STEPS; ++i) {\n        vec3 pos = origin + t * dir;\n        float m;\n        testScene(pos, m, hitObj);\n        if (m < 0.01) {\n            return;\n        }\n        t += m;\n    }\n    t = -1.0;\n    hitObj = -1;\n}\n\nvec3 computeMaterial(int hitObj, vec3 p, vec3 n, vec3 lightVec, vec3 view) {\n    float t;\n    float lambert = dot(lightVec, n);\n    vec3 mat = vec3(0., 0., 0.);\n    \n    switch(hitObj) {\n        case BACK_WALL:\n        mat = vec3(0.9, 0.9, 0.9);\n        break;\n        case LEFT_WALL:\n        mat = vec3(1., 0., 0.);\n        break;\n        case RIGHT_WALL:\n        mat = vec3(0., 1., 0.);\n        break;\n        case CEILING:\n        mat = vec3(0.9, 0.9, 0.9);\n        break;\n        case FLOOR:\n        mat = vec3(0.9, 0.9, 0.9);\n        break;\n        case TALL_BOX:\n        mat = vec3(1., 1., 1.);\n        break;\n        case SMALL_BOX:\n        mat = vec3(0.8, 0.8, 0.8);\n        break;\n        case -1:\n        mat = vec3(0., 0., 0.);\n    }\n    return mat * lambert;\n}\n\nvec2 random2(vec3 p) {\n    return fract(sin(vec2(p.x, p.x + 1.0)) * vec2(43758.5453123, 22578.1459123));\n}\n\nfloat computeAO(vec3 p, vec3 n, float dist) {\n    float aoSum = 0.0;\n    // Sample a few points in the hemisphere around n at p\n    vec3 t, b;\n    // Make a tangent and bitangent vector\n    coordinateSystem(n, t, b);\n    for(int i = 0; i < AO_SAMPLES; ++i) {\n        // Generate a pair of random [0, 1] floats\n        vec2 xi = random2(p + float(i) * 203.1);\n        // Convert the xi pair to a vector in the hemisphere\n        float len = sqrt(xi.y);\n        float rx = len * cos(6.2831 * xi.x);\n        float ry = len * sin(6.2831 * xi.x);\n        float rz = sqrt(1.0 - xi.y); // z = sqrt(1 - x*x - y*y)\n        vec3 dir = vec3(rx * t + ry * b + rz * n);\n        aoSum += step(0.0, testScene(p + dir * dist));\n    }\n    return aoSum / float(AO_SAMPLES);\n}\n\nfloat fiveTapAO(vec3 p, vec3 n, float k) {\n    float aoSum = 0.0;\n    for(float i = 0.0; i < 5.0; ++i) {\n        float coeff = 1.0 / pow(2.0, i);\n        aoSum += coeff * (i * AO_DIST - testScene(p + n * i * AO_DIST));\n    }\n    return 1.0 - k * aoSum;\n}\n\nIntersection sdf3D (vec3 dir, vec3 eye, vec3 lightPos) {\n    float t;\n    int hitObj;\n    march(eye, dir, t, hitObj, lightPos);\n    vec3 isect = eye + t * dir;\n    \n    vec3 nor = computeNormal(isect);\n    vec3 lightDir = normalize(lightPos - isect); \n    \n    vec3 surfaceColor = computeMaterial(hitObj, isect, nor, lightDir, normalize(eye - isect));\n    if (hitObj == -1) {\n        surfaceColor = vec3(0., 0., 0.);\n    }\n    \n    // five tap\n    float ao = fiveTapAO(isect, nor, FIVETAP_K);\n    \n    // both\n    surfaceColor *= ao;\n    \n    return Intersection(t, isect, surfaceColor, hitObj);\n}\n\n\n// returns direction of ray\nvec3 rayCast(vec3 eye, vec3 ref, vec2 ndc) {\n \tvec3 F = ref - eye;\n    vec3 R = normalize(cross(F, vec3(0, 1, 0)));\n    vec3 U = normalize(cross(R, F));\n    \n    vec3 V = U * length(F) * tan(FOVY * 0.5);\n    vec3 H = R * length(F) * tan(FOVY * 0.5) * float(iResolution.x) / iResolution.y;\n    \n    vec3 p = ref + ndc.x * H + ndc.y * V;\n    \n    vec3 ray = normalize(p - eye);\n    ray.x *= -1.; // flip x-axis\n    return ray;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\tuv = uv * 2.0 - vec2(1.0, 1.0);\n    \n    vec3 eye = vec3(0, 5, -15);\n    vec3 ref = vec3(0, 3, 0);\n    \n    vec3 rayDir = rayCast(eye, ref, uv);\n    \n    Intersection isect = sdf3D(rayDir, eye, LIGHT_POS);\n    fragColor = vec4(isect.color, 1.);\n}","name":"Buffer A","description":"","type":"buffer"}]}