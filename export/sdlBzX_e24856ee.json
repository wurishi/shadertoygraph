{"ver":"0.1","info":{"id":"sdlBzX","date":"1646450088","viewed":188,"name":"Fractal rope fork: cables","username":"c0rymcg","description":"A tweak of this: https://www.shadertoy.com/view/fsXcRS\nI altered some of the logic of the fractal ropes and built more conventional cables instead. \nIt's a satisfying shape.\n\nCredit for all the cleverness goes to SnoopethDuckDuck","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","chrome","rope","cable"],"hasliked":0,"parentid":"fsXcRS","parentname":"Even More Fractal Rope"},"renderpass":[{"inputs":[{"id":"4sX3zn","filepath":"/media/a/0681c014f6c88c356cf9c0394ffe015acc94ec1474924855f45d22c3e70b5785.png","previewfilepath":"/media/ap/0681c014f6c88c356cf9c0394ffe015acc94ec1474924855f45d22c3e70b5785.png","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\n#define MAX_STEPS 400\n#define MAX_DIST 50.\n#define SURF_DIST .001\n\n#define S smoothstep\n#define T iTime\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nvec2 rotate(vec2 p, float theta){\n    float s=sin(theta), c=cos(theta);\n    return mat2(c, -s, s, c)*p;\n}\n\nfloat GetDist(vec3 p) {\n    vec2 uv = p.xz;\n   \n    \n    float theta = 2.;\n    bool flip = false;\n    uv = rotate(uv,-0.5*p.y);\n    \n    float m = 0.65;\n    float n = 5.;\n    \n    for (float i = 0.; i < n; i++) {\n     \n        theta -= 3.5*(i+1.)*(p.y+iTime*0.5) ;\n        \n        uv = uv-vec2(m)*sign(uv);\n        uv = rotate(uv, theta*(flip?1.:-1.));\n        \n        m *= 0.4;\n        flip=!flip;\n    }\n\n    float d = length(uv) - 0.02;\n    \n    //trim the rope edges here\n    //d = max(p.y, d);\n    \n    \n    return 0.5 * d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n#define AA 2\nvec3 aacol=vec3(0);\n    for (int aax=0; aax<AA; aax++){\n    for (int aay=0; aay<AA; aay++){\n        vec2 uv = (fragCoord + vec2(aax,aay)/float(AA))/iResolution.xx;\n        uv -= 0.5;\n    \n        vec2 m = iMouse.xy/iResolution.xy;\n        float l = 0.5 + 0.5 * thc(3., 0.5 * iTime);\n        float r = mix(0.01, 5.5, 1.-l);\n        float time = 0.45 * iTime;\n        \n        vec3 ro = vec3(r * cos(time), mix(6., -3., 1.-l) + 0. * iTime, r * sin(time));\n        vec3 rd = GetRayDir(uv, ro, vec3(0,mix(0., -3., 1.-l),0), 2.);\n        vec3 col = vec3(0);\n   \n        float d = RayMarch(ro, rd);\n\n        if(d<MAX_DIST) {\n            vec3 p = ro + rd * d;\n            vec3 n = GetNormal(p);\n            vec3 r = reflect(rd, n);\n            float ambient = .3;\n            float difPower = .4;\n            float dif = max(dot(n, normalize(vec3(1,2,3))), 0.);\n    \n            col = vec3(dif*difPower + ambient);\n            col *= texture(iChannel0,r).rgb;\n            col *= 1. + r.y;//+ p.y;\n            col = clamp(col, 0., 1.);\n            \n            vec3 e = vec3(1.);\n            col *= pal(r.y, e, e, e, 0.35 * vec3(0.,0.33,0.66));\n        }\n\n        col = pow(col, vec3(.4545));\t// gamma correction\n        col = mix(col, vec3(0.),smoothstep(0.,1.,d/MAX_DIST));//fog\n        aacol+=col/float(AA*AA);\n    }}\n    fragColor = vec4(aacol,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define pi 3.14159\n\nfloat thc(float a, float b) {\n    return tanh(a * cos(b)) / tanh(a);\n}\n\nfloat ths(float a, float b) {\n    return tanh(a * sin(b)) / tanh(a);\n}\n\nvec2 thc(float a, vec2 b) {\n    return tanh(a * cos(b)) / tanh(a);\n}\n\nvec2 ths(float a, vec2 b) {\n    return tanh(a * sin(b)) / tanh(a);\n}\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat h21 (vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nfloat mlength(vec2 uv) {\n    return max(abs(uv.x), abs(uv.y));\n}\n\n","name":"Common","description":"","type":"common"}]}