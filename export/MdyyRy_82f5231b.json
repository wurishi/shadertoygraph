{"ver":"0.1","info":{"id":"MdyyRy","date":"1522497202","viewed":278,"name":"Satellite","username":"hamtarodeluxe","description":"My second shader :)","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["2d","sin"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define M_PI 3.14159\nvec3 circle(vec2 uv,float r,vec2 pos,float rBlur,float value){\n    vec3 col;\n    float l = length(uv-pos);\n    col= vec3(smoothstep(r,r-rBlur,l))*((0.2+value)); \n    return col;    \n}\n\nvec2 normalizeCoords(vec2 coords,float prop){\n    vec2 vecOut;\n    vecOut = ((coords/iResolution.xy)-0.5);\n    vecOut.x*=prop;\n    return vecOut;\n}         \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    float prop = iResolution.x/iResolution.y;\n    vec2 uv = normalizeCoords(fragCoord.xy,prop);\n    //vec2 mousePos=normalizeCoords(iMouse.xy,prop); idea for a fun mouse input ?\n    vec3 col;\n    float rSpeed=0.5;\n\tfloat d =0.3 +0.06*sin(iTime*rSpeed);\n    float speed = 3.;\n    \n    vec3 background= circle (uv,d*1.5,vec2(0.),d*5.,1.);\n    background.xyz+=vec3(0.05,0.,0.15);\n\t \n    background*=circle (uv,1.5,vec2(0.),1.4,1.);;\n    \n    vec3 planet = 1.-circle(uv, d*0.7,vec2 (0),0.02,1.);\n    \n    for (float i=1.;i<25.;i++){\n        \n    \tfloat offset=.2;\n     \tfloat st = speed*iTime;\n        \n        // co is similar to the cos that define x coordinate\n        // but with some offset and remap to use as a radius factor\n\t\tfloat co=(cos(st+offset*i*1.5+M_PI*.5)+1.)/2.;\n        \n        float x=d*cos(st+offset*i*1.5);\n        float y=d*sin(st*0.6+offset*i*0.9);\n        \n        vec2 pos=vec2 (x,y);\n        \n        float r;\n         \n        r=0.02*co*co+0.0045*i; \n        \n        float a=1.-0.09*(20.-i);\n\n        vec3 colCircle=circle(uv, r,pos,0.03,co);\n        vec3 colCircle2=circle(uv, r,pos,0.3,co);\n        \n        colCircle.x/=(2.*a);\n        colCircle.y*=0.5;\n        \n        vec3 colCircleTot=(colCircle+colCircle2*a)*a;\n        \n        if(co<0.5)colCircleTot*=planet;\n        \n        \n        col = max (col,colCircleTot);\n        \n    }\n   \tcol+=background*planet;  \n    \n    // Output to screen\n    fragColor = vec4(col,1);\n    \n}\n\n\n\n","name":"Image","description":"","type":"image"}]}