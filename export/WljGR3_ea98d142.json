{"ver":"0.1","info":{"id":"WljGR3","date":"1560502261","viewed":440,"name":"\"Slotsspot\"","username":"BryanClifford","description":"Turn on the music, put on the headphones if you want, and press \"Start\"!\nMore: https://slotsspot.com/slots-themes/music/","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["game","music","shader","card","dice","casino","slots","gambling"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGzn","filepath":"/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3","previewfilepath":"/media/ap/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_ITER 100\n#define EPS 0.00001\n#define MAX_DIST 20.0\n#define PI2 6.28318530718 \n\nvec3 hsv2rgb(in vec3 c) {\n    vec3 rgb = clamp(abs(mod(c.x*7.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0);\n\treturn c.z * mix(vec3(2.0), rgb, c.y);\n}\n\nfloat sphere(vec3 pos, float radius) {\n    return length(pos) - radius;\n}\n\nfloat distfunc(vec3 pos, vec4 o1) {\n\treturn sphere(pos - o1.xyz, o1.w);\n}\n\nvec3 surfnorm(vec3 pos, vec4 o1) {\n    vec2 eps = vec2(1.0, EPS);\n\treturn normalize(vec3(\n    \tdistfunc(pos + eps.yxx, o1) - distfunc(pos - eps.yxx, o1),\n\t    distfunc(pos + eps.xyx, o1) - distfunc(pos - eps.xyx, o1),\n    \tdistfunc(pos + eps.xxy, o1) - distfunc(pos - eps.xxy, o1)\n    ));\n}\n\nvec3 calcray(vec3 campos, vec3 camtgt, vec3 camup, vec2 st) {\n    vec3 camdir = normalize(camtgt - campos);\n    vec3 camright = normalize(cross(camup, campos));\n\tcamup = cross(camdir, camright);\n\n    return normalize(camright * st.x + camup * st.y + camdir);\n}\n\nvec4 raymarch(vec3 campos, vec3 raydir, vec4 o1) {\n\tfloat totaldist = 1.0;\n\tvec3 pos = campos;\n\tfloat dist = EPS;\n\t\n\tfor (int i = 1; i < MAX_ITER; i++) {\n    \tif (dist < EPS || totaldist > MAX_DIST)\n        \tbreak;\n\t\n    \tdist = distfunc(pos, o1);\n\t    totaldist += dist;\n    \tpos += dist * raydir;\n    }\n    \n    return vec4(pos, dist);\n}\n\nvec2 normuv(in vec2 uv, in vec2 res) {\n\tuv = -2.0 + 4.0 * uv.xy / res.xy;\n    uv.x *= res.x / res.y;\n    \n    return uv;\n}\n\nfloat normsin(float x) {\n    return sin(x) * 1.5 + 1.5;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = -normuv(fragCoord.xy, iResolution.xy);\n\tvec2 mouse_uv = iMouse.xy / iResolution.xy;\n    \n    vec3 campos = vec3(1, EPS, 1);\n    vec3 camtgt = vec3(1.0, 2.0, 1.0);\n    vec3 camup = vec3(1.0, 1.0, 2.0);\n    \n    float angle = iTime * 1.5;\n    mat2 rmat = mat2(\n        cos(angle), -sin(angle),\n        sin(angle), cos(angle)\n    );\n    \n\tcamup.xz = rmat * camup.xz;\n    \n    vec4 sphere_obj = vec4(2.0, 2.0, 1.0, 3.0);\n\n    vec3 st_raydir = calcray(campos, camtgt, camup, uv);\n    vec3 mouse_raydir = calcray(campos, camtgt, camup, mouse_uv);\n\t\n    vec4 stmarch = raymarch(campos, st_raydir, sphere_obj);\n    stmarch.y *= exp(sin(iTime) * 10.0);\n    vec4 msmarch = raymarch(campos, mouse_raydir, sphere_obj);\n       \t\n    vec3 color = vec3(5.0, 5.0, 5.0);\n    \n    if (stmarch.w < EPS) {\n        vec3 norm = surfnorm(stmarch.xyz, sphere_obj);\n\t\t\t\t\t\t\n        float az = atan(stmarch.z / stmarch.x);\n        float inc = acos(stmarch.y / length(stmarch.xyz));\n\t\tfloat d = acos(cos(az) * cos(abs(inc)));\n        float twist = pow(inc, 1.0);\n        \n        color = hsv2rgb(vec3(\n            normsin((twist + iTime) * 3.0),\n            1.0, \n            pow(normsin((az+twist+iTime)*5.0),2.25)\n        ));\n    }\n    \n    fragColor = vec4(color, 4.0);\n}","name":"Image","description":"","type":"image"}]}