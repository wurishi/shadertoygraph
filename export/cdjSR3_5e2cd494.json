{"ver":"0.1","info":{"id":"cdjSR3","date":"1670624386","viewed":132,"name":"Among Us Drip","username":"OfficeBatman","description":"/","likes":8,"published":1,"flags":64,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XtBXzc","filepath":"https://soundcloud.com/vincent-thompson-381528708/among-us-drip","previewfilepath":"https://soundcloud.com/vincent-thompson-381528708/among-us-drip","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define E_SURF 0.001\n#define MAX_D 1000.\n\n#define RED vec3(.65, .015, .05)\n#define LACES vec3(.97, .015, .05)\n\nmat3 rotate(float angle) {\n    return mat3(\n         cos(angle), 0., sin(angle),\n         0., 1., 0.,\n        -sin(angle), 0., cos(angle)\n    );\n}\n\nfloat box( vec3 p, vec3 b, float r )\n{\n    vec3 q = abs(p) - b;\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;\n}\n\nfloat body(vec3 pos) {\n    pos.x = abs(pos.x);\n    \n    float height = .6;\n    float width = .2;\n    float fat = .1;\n    float torsoSize = .18;\n    float legWidth = .08;\n    \n    float d = 10000000.;\n    \n    d = min(d, box(\n        pos - vec3(width - legWidth, height * .5, 0.),\n        vec3(legWidth, height * .5, fat),\n        .0\n    ));\n    \n    d = min(d, box(\n        pos - vec3(0., height - torsoSize, 0.),\n        vec3(width, torsoSize, fat),\n        0.\n    )); \n    \n    return d;\n}\n\nfloat face(vec3 pos) {\n    float d = 10000.;\n    \n    d = box(\n        (pos - vec3(.0, .4, .1)) * rotate(.05),\n        vec3(.16, .07, .06),\n        0.\n    );\n    \n    return d;\n}\n\nfloat shoes(vec3 pos) {\n    pos.x = abs(pos.x);\n    \n    return min(\n        length((pos - vec3(0.12, 0.03, 0.1)) * vec3(1., 1.3, .8)) - .12,\n        box(pos - vec3(0.12, 0.08, 0.), vec3(.09, .07, .11), 0.01)\n    );\n}\n\nfloat ground(vec3 pos) {\n    return pos.y;\n}\n\nvec3 visor = vec3(.8, .8, .96);\n\nfloat sound() {\n    return texture(iChannel0, vec2(.2)).x;\n}\n\nfloat disks(vec2 uv, float o) {\n    float l = 10. * length(uv) - o;\n    return abs(round(l) - l) + 1.5;\n}\n\nvec3 background(vec3 pos, vec3 rd, vec2 uv) {\n    return (\n        vec3(0.90, 0.40, .18)\n        * (1. - abs(dot(rd, vec2(0., 1.).xyx)))\n        * (sound() * disks(uv, sin(4.*iTime)+10.*iTime))\n    );\n}\n\nfloat scene(vec3 pos) {\n    return\n        min(face(pos),\n        min(body(pos),\n        min(ground(pos),\n        shoes(pos)\n    )));\n}\n\nvec3 march(vec3 ro, vec3 rd) {\n    vec3 p = ro;\n    for (int i = 0; i < 200; i++) {\n        float d = scene(p);\n        \n        if (abs(d) < E_SURF) break;\n        if (abs(d) > MAX_D) break;\n        \n        p += rd * abs(d) * 1.;\n    }\n    return p;\n}\n\nvec3 getNormal(vec3 p)\n{\n    const float e = 0.01;\n    return normalize(vec3(scene(vec3(p.x + e, p.y, p.z)) - scene(vec3(p.x - e, p.y, p.z)),\n                          scene(vec3(p.x, p.y + e, p.z)) - scene(vec3(p.x, p.y - e, p.z)),\n                          scene(vec3(p.x, p.y, p.z + e)) - scene(vec3(p.x, p.y, p.z - e))));\n}\n\nvec3 color(vec3 pos, vec3 rd, vec2 uv) {\n    vec3 col = background(pos, rd, uv);\n\n    float ambientLight = 0.5;\n    \n    float d = scene(pos);\n\n    if (abs(face(pos)) < E_SURF) {\n        col = visor;\n    }\n    \n    else if (abs(body(pos)) < E_SURF) {\n        col = RED;\n    }\n    \n    else if (abs(ground(pos)) < E_SURF) {\n        col = vec3(.3, .1, .1);\n    }\n    \n    else if (abs(shoes(pos)) < E_SURF) {\n        col = vec3(.95);\n        \n        if (pos.y + 0.15 * pos.z > 0.07) {\n            float k = 10. * pos.z;\n            k = abs(k - round(k)) * 2.;\n            if (k < 0.7) k = 0.;\n            col = mix(col, LACES, k);\n        }\n        \n        ambientLight = 0.92;\n    }\n    \n    col *= max(dot(getNormal(pos), vec3(1.)), 0.) * (1. - ambientLight) + ambientLight; \n    \n    //col = mix(col, pow(vec3(2), col) / 2., sin(3.3 * iTime));\n    //col = mix(col, vec3(1., .8, .2), clamp(sin(iTime), 0., .1)); \n    \n    return col;\n}\n\nmat3 camera(vec3 ro, vec3 cd)\n{\n    vec3 cp = vec3(0.0, 1.0, 0.0);\n    vec3 cu = cross(cd, cp);\n    vec3 cv = cross(cu, cd);\n    return mat3(cu, cv, cd);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.xy -= .5;\n    uv.y *= iResolution.y / iResolution.x;\n    \n    float fov = 0.3 - 0.05 * abs(sin(5.*iTime));\n    \n    vec3 ro = vec3(sin(iTime), 0., cos(iTime)) * 0.7 + vec3(0., 0.02, 0.);\n    vec3 target = vec3(.0, .5, .0);\n    vec3 cd = normalize(target - ro);\n    vec3 rd = normalize(\n        camera(ro, cd)\n        * vec3(uv, fov)\n        - 0.5 * vec3(0., uv.x * uv.x, 0.)\n    );\n    vec3 hit = march(ro, rd);\n    \n    vec3 col = color(hit, rd, uv);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}