{"ver":"0.1","info":{"id":"ldVyDw","date":"1522304377","viewed":754,"name":"Interactive Voronoi Diagram","username":"Ark","description":"Mouse Press: add a point\n→ Mouse Drag: move the point\n→ Mouse Release: set the point\n\nRestart time to clear :)","likes":12,"published":1,"flags":32,"usePreview":0,"tags":["voronoi"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define DRAW_EDGE\n\nvec3 hue(float t) {\n\treturn sin(vec3(-1.0,0.0,1.0)*(2.0*PI/3.0) + t*2.0*PI)*0.5+0.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec4 data = texture(iChannel0, fragCoord.xy/iResolution.xy);\n    \n    float d = data.x;\n    vec3 col = hue(data.y) + (rand(data.y)*0.4 - 0.2);\n    float r = smoothstep(data.z, 0.0, 0.004)*0.2 + 0.8;\n    \n    col += 1.0 - smoothstep(d, 0.0, 0.004);\n    #ifdef DRAW_EDGE\n    col *= r;\n    #endif\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define PI 3.14159265258979\n\nfloat rand(float x) {\n    return fract(sin(x * 12.9898) * 43758.5453123);\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Mouse Events & iResolution\n\nfloat read(int t){\n    return texelFetch(iChannel0, ivec2(t, 0), 0).x;\n}\n\nvoid _write(int t, float v, inout vec4 fragColor,in vec2 fragCoord){\n    if(ivec2(t, 0) == ivec2(fragCoord)) {\n        fragColor = vec4(v);\n    }\n}\n#define write(t, v) _write(t, v, fragColor, fragCoord)\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {    \n    \n    write(0, iMouse.z>0.0 ? 1.0 : -1.0); // isPressed\n    write(1, read(0)<0.0 && iMouse.z>0.0 ? 1.0 : -1.0); // justPressed\n    write(2, read(0)>0.0 && iMouse.z<0.0 ? 1.0 : -1.0); // justReleased\n    \n    // pressCount\n    if (iFrame == 0) {\n        write(3, 0.0);\n    } else if (read(0)<0.0 && iMouse.z>0.0) {\n        write(3, read(3) + 1.0);\n    } else {\n        write(3, read(3));\n    }\n    \n    write(4, iResolution.x);\n    write(5, iResolution.y);\n    write(6, iFrame==0 ? iResolution.x : read(4));\n    write(7, iFrame==0 ? iResolution.y : read(5));\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"float read(int t){\n    return texelFetch(iChannel1, ivec2(t, 0), 0).x;\n}\nbool justReleased() {\n    return read(2)>0.0;\n}\nfloat pressCount() {\n    return read(3);\n}\nbool screenChanged() {\n    return iResolution.xy != vec2(read(6), read(7));;\n}\n\nvec2 uv(vec2 coord) {\n    return coord / 256.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    if(iFrame==0 || screenChanged()) {\n        fragColor.x = 10.0;\n        fragColor.y = 0.0;\n        fragColor.z = 10.0;\n        return;\n    }\n    \n    vec4 preData = texture(iChannel0, fragCoord.xy/iResolution.xy);\n    fragColor = preData;\n    \n    float minDist = preData.x;\n    float minR;\n    \n    float minDiff = preData.z;\n    \n    if (justReleased()) {\n        float dist = distance(uv(fragCoord), uv(iMouse.xy));\n        minDiff = min(minDiff, abs(dist - minDist));\n        if (dist < minDist) {\n            minDiff = minDist - dist;\n            minDist = dist;\n            minR = rand(pressCount());\n        }\n    }\n\n    if (minDist < preData.x) {\n    \tfragColor.x = minDist;\n    \tfragColor.y = minR;\n    \tfragColor.z = minDiff;\n    }\n    if (minDiff < preData.z) {\n    \tfragColor.z = minDiff;\n    }\n}","name":"Buf B","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"float read(int t){\n    return texelFetch(iChannel1, ivec2(t, 0), 0).x;\n}\nbool isPressed() {\n    return read(0)>0.0;\n}\nfloat pressCount() {\n    return read(3);\n}\n\nvec2 uv(vec2 coord) {\n    return coord / 256.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    if(iFrame==0) {\n        fragColor.x = 10.0;\n        fragColor.y = 0.0;\n        fragColor.z = 10.0;\n        return;\n    }\n    \n    vec4 preData = texture(iChannel0, fragCoord.xy/iResolution.xy);\n    fragColor = preData;\n    \n    float minDist = preData.x;\n    float minR;\n    \n    float minDiff = preData.z;\n    \n    if (isPressed()) {\n        float dist = distance(uv(fragCoord), uv(iMouse.xy));\n        minDiff = min(minDiff, abs(dist - minDist));\n        if (dist < minDist) {\n            minDiff = minDist - dist;\n            minDist = dist;\n            minR = rand(pressCount());\n        }\n    }\n\n    if (minDist < preData.x) {\n    \tfragColor.x = minDist;\n    \tfragColor.y = minR;\n    \tfragColor.z = minDiff;\n    }\n    if (minDiff < preData.z) {\n    \tfragColor.z = minDiff;\n    }\n}","name":"Buf C","description":"","type":"buffer"}]}