{"ver":"0.1","info":{"id":"wldGRN","date":"1575825565","viewed":216,"name":"Animated checkerboard","username":"vlams1","description":"Stylized animated background","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["background","stylized"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Multi sample anti alias sample count\n#define MS 4\n\nmat2 r(float a) { //Rotate\n    float s = sin(radians(a));\n    float c = cos(radians(a));\n    return mat2(c,-s,s,c);\n}\n\nvec4 tiles(vec2 uv) { //Image\n    float f = .3; //Calculate factor\n    if (mod(round(uv.x+clamp(sin(iTime*1.5)*8.,-1.,1.)),2.) == 1. && mod(round(uv.y),2.) == 1.) f = .6;\n    if (mod(round(uv.y+clamp(cos(iTime*1.5)*8.,-1.,1.)),2.) == 1. && mod(round(uv.x),2.) == 1.) f = 1.;\n    vec3 col = vec3(0.4,0.1,0.8) * f; //Return color multiplied by factor\n    return vec4(col,1.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) { //Main\n    vec2 uv = fragCoord/iResolution.xy; //Calculate screen UVs\n    uv.x *= iResolution.x / iResolution.y; //Extend Horizontal UVs to account for aspect ratio\n    uv *= r(-20.); //Tilt - Scroll - Zoom\n    uv -= vec2(iTime*2.,iTime) * .05;\n    uv *= 10.;\n    vec4 c; //Multisample\n    for (int i; i < MS; i++) c += tiles(uv + (vec2(10,0) / iResolution.xy) * r(float(i)/float(MS)*360.));\n    fragColor = c / float(MS);\n}","name":"Image","description":"","type":"image"}]}