{"ver":"0.1","info":{"id":"DtBfDD","date":"1694028614","viewed":67,"name":"cosmos fly","username":"nayk","description":"sky universe galaxy cosmos","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["skyuniversegalaxycosmos"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* original somewhere on the shader toy*/\n/* no copyright\nLord Jesus*/\n\n\nvec3 hsv(float h, float s, float v) {\n\tvec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n\tvec3 p = abs(fract(vec3(h) + K.xyz) * 6.0 - K.www);\n\treturn v * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), s);\n}\n\n\nvec3 pattern( in vec2 uv )\n{\n    vec3 col = vec3(0.6);\n    col += 0.4*smoothstep(-0.01,0.01,cos(uv.x*0.5)*cos(uv.y*0.5)); \n    col *= smoothstep(-1.0,-0.98,cos(uv.x))*smoothstep(-1.0,-0.98,cos(uv.y));\n    return col;\n}\n\n#define AA 3\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy / iResolution.xy) - .5;\n\tfloat t = iTime * .1 + ((.25 + .05 * sin(iTime * .1))/(length(uv.xy) + 1.07)) * 2.2;\n\tfloat si = sin(t);\n\tfloat co = cos(t);\n     \n    float aspect = iResolution.x / iResolution.y;\n    \n    uv = uv * 1.5 ; // to [-1:1] range\n    uv.y *= aspect;\n    \n    float aaa = 1.0 - length(uv);\n    \n\n    float ttt = sin(iTime * 1.) *0.5 + 0.5;\n    float spherizeAmount = mix(2.1, 2.1, ttt);\n\n    \n    //do spherize approximation\n    aaa = pow(aaa, spherizeAmount);\n    \n    \n    vec2 p = (2.0 * fragCoord.xy - iResolution.xy) / min(iResolution.x, iResolution.y);\n\tvec3 v = vec3(p, 1.0 - length(p) * 0.2);\n\n\tfloat ta = iTime * 0.1;\n\tmat3 m=mat3(\n\t\t0.0,1.0,0.0,\n\t\t-sin(ta),0.0,cos(ta),\n\t\tcos(ta),0.0,sin(ta));\n\t\n\n\tfloat a = (atan(v.y, v.x) / 3.141592 / 2.0 + 0.5);\n\tfloat slice = floor(a * 1000.0);\n\tfloat phase = rand(vec2(slice, 0.0));\n\tfloat dist = rand(vec2(slice, 1.0)) * 3.0;\n\tfloat hue = rand(vec2(slice, 2.0));\nfloat an = 0.5*iTime;\n\tfloat z = dist / length(v.xy) * v.z;\n\tfloat Z = mod(z + phase + iTime * 0.6, 1.0);\n\tfloat d = sqrt(z * z + dist * dist);\n\n\tfloat c = exp(-Z * 20.0 + 0.3) / (d * d + 1.0);\n\n    vec2 cPos = -1.0 + 2.0 * fragCoord.xy / iResolution.xy;\n    \n    \n\tfloat cLength = length(cPos);\n\n     vec2 trs = vec2(cos(iTime), sin(iTime))*3.5;\n        cPos.xy*=trs;\n    \n\tmat2 ma = mat2(co, si, -si, co);\n\n\tfloat v1, v2, v3;\n\tv1 = v2 = v3 = 0.0;\n\t\n\tfloat s = 0.0;\n\tfor (int i = 0; i < 90; i++)\n\t{\n\t\tvec3 p = s * vec3(uv*ma, 0.);\n\tvec3 p2 = s * vec3(uv, 0.0);\n    \n    \tp.xy+= (cPos/cLength)*cos(cLength*10.0+iTime*1.0) * 0.03;\n\t\tp += vec3(1.22+sin(iTime * 1.13), 1.3+sin(iTime), s - 1.5 - sin(iTime * .13) * .1);\n        \tp2 += vec3(.1, .2, s - 0.5 - cos(iTime * 1.13) * .1);\n       \n\t\tfor (int i = 0; i < 10; i++)\tp = abs(p) / dot(p,p) - 0.500;\n\t\tv1 += dot(p,p2) * .0015 * (1.8 + cos(length(uv.xy * 1.0) + .5  - iTime * .2));\n\t\tv2 += dot(p,p) * .0013 * (1.5 + sin(length(uv.xy * 2.5) + 1.2 - iTime * .3));\n\t\tv3 += length(p.xy*20.) * .0003;\n\t\ts  += 0.075;\n\t}\n\t\n\tfloat dl = length(uv);\n\tv1 *= smoothstep(.5, 0., dl);\n\tv2 *= smoothstep(2., .0, dl);\n\tv3 *= smoothstep(.9, dl, dl);\n\t\n\tvec3 col = vec3( v3 * (5.5*v1 + sin(iTime * .2) * .4),\n\t\t\t\t\t(v1 + v3) * .3,\n\t\t\t\t\t v2) + smoothstep(0.2, .0, dl) * .85 + smoothstep(.0, .6, v3) * .3;\n                     \n                     fragColor=vec4(min(pow(abs(col), vec3(1.2)), 1.0), 1.0);\n\nfragColor+= vec4(hsv(hue, 0.6 * (1.0 - clamp(2.0 * c - 1.0, 0.0, 1.0)), clamp(2.0 * c, 0.0, 1.0)), 1.0);\n\t\n    \t\n}","name":"Image","description":"","type":"image"}]}