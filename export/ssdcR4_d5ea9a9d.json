{"ver":"0.1","info":{"id":"ssdcR4","date":"1653106701","viewed":236,"name":"diamond squares ","username":"Carandiru","description":"seed corners, diamond step, square step, diamond step, square step\n\noriginal input on the left\ndiamond squares filtered on the right","likes":3,"published":3,"flags":32,"usePreview":0,"tags":["square","diamond","algorithm"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// diamond squares algorithm\n// reconstruction / filter     ~100s\n\n// (left) the input is in buffer a, checkerboarding overlay done on purpose\n// (right) the output after algo\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 color = vec3(0);\n    \n    // \"square step\"\n    color += textureLodOffset(iChannel0, uv, 0.0f, ivec2(-1,-2)).rgb;\n    color += textureLodOffset(iChannel0, uv, 0.0f, ivec2( 1,-2)).rgb;\n    color += textureLodOffset(iChannel0, uv, 0.0f, ivec2(-1, 2)).rgb;\n    color += textureLodOffset(iChannel0, uv, 0.0f, ivec2( 1, 2)).rgb;\n    \n    color += textureLodOffset(iChannel0, uv, 0.0f, ivec2(-2,-1)).rgb;\n    color += textureLodOffset(iChannel0, uv, 0.0f, ivec2( 2,-1)).rgb;\n    color += textureLodOffset(iChannel0, uv, 0.0f, ivec2(-2, 1)).rgb;\n    color += textureLodOffset(iChannel0, uv, 0.0f, ivec2( 2, 1)).rgb;\n    \n    color += textureLodOffset(iChannel0, uv, 0.0f, ivec2( 0,-1)).rgb;\n    color += textureLodOffset(iChannel0, uv, 0.0f, ivec2( 0, 1)).rgb;\n    color += textureLodOffset(iChannel0, uv, 0.0f, ivec2(-1, 0)).rgb;\n    color += textureLodOffset(iChannel0, uv, 0.0f, ivec2( 1, 0)).rgb;\n    \n    \n    if (uv.x < 0.5f) {\n        // original \n        color = textureLod(iChannel1, uv, 0.0f).rgb;\n    }\n    else if (uv.x > 0.5f) {\n        color = color / 12.0f;\n    }\n    else {\n        color = vec3(0);\n    }\n    \n    // Output to screen\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 color = vec3(0); // 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    uint pattern = uint(iTime * 1.333f) + 1u;\n    \n    color = textureLod(iChannel0, uv, 0.0f).rgb;\n    \n    color = mix(vec3(0), color, \n                float((uint(fragCoord.x - color.r) & pattern) ^ (uint(fragCoord.y + color.b) & pattern)));\n    \n    // Output to screen\n    fragColor = vec4(1.0f - color,1.0); // inverted color easier to visualize\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 color = vec3(0);\n    \n    // \"seed corners\" / first \"diamond step\"\n    color += textureLodOffset(iChannel0, uv, 0.0f, ivec2(-2,-2)).rgb;\n    color += textureLodOffset(iChannel0, uv, 0.0f, ivec2(-2, 2)).rgb;\n    color += textureLodOffset(iChannel0, uv, 0.0f, ivec2( 2,-2)).rgb;\n    color += textureLodOffset(iChannel0, uv, 0.0f, ivec2( 2, 2)).rgb;\n    \n    // Output to screen\n    fragColor = vec4(color * 0.25f,1.0);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 color = vec3(0);\n    \n    // \"square step\"\n    color += textureLodOffset(iChannel0, uv, 0.0f, ivec2( 0,-2)).rgb;\n    color += textureLodOffset(iChannel0, uv, 0.0f, ivec2( 0, 2)).rgb;\n    color += textureLodOffset(iChannel0, uv, 0.0f, ivec2(-2, 0)).rgb;\n    color += textureLodOffset(iChannel0, uv, 0.0f, ivec2( 2, 0)).rgb;\n    \n    // Output to screen\n    fragColor = vec4(color * 0.25f,1.0);\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 color = vec3(0);\n    \n    // \"diamond step\"\n    color += textureLodOffset(iChannel0, uv, 0.0f, ivec2(-1,-1)).rgb;\n    color += textureLodOffset(iChannel0, uv, 0.0f, ivec2(-1, 1)).rgb;\n    color += textureLodOffset(iChannel0, uv, 0.0f, ivec2( 1,-1)).rgb;\n    color += textureLodOffset(iChannel0, uv, 0.0f, ivec2( 1, 1)).rgb;\n    \n    // Output to screen\n    fragColor = vec4(color * 0.25f,1.0);\n}","name":"Buffer D","description":"","type":"buffer"}]}