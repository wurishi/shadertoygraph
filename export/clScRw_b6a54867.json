{"ver":"0.1","info":{"id":"clScRw","date":"1691575520","viewed":34,"name":"stars on circle","username":"Efim","description":"stars by SDF function\nhttps://iquilezles.org/articles/distfunctions2d/","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["circle","star"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n//https://iquilezles.org/articles/distfunctions2d/\nvec4 segment(vec2 p, float n)\n{\n    vec4 res = vec4(0.0, 0.0, 0.0, 0.0);\n    float l = length(p);\n    float fi = atan(p.y, p.x)*n;  //remark FabriceNeyret2\n    /*\n    float fi = asin(abs(p.y)/l);\n   \n    if (p.y > 0.0 && p.x < 0.0)\n        fi = PI - fi;\n    if (p.y < 0.0 && p.x < 0.0)\n        fi = fi + PI;    \n    if (p.y < 0.0 && p.x > 0.0)\n        fi = -fi + 2.0 * PI;    \n    fi += (2.0 * PI);\n    fi *= n;\n    */\n    \n    \n    float k = fi /(2.0 * PI);\n    res.w = (1.0 - fract(k)) * 2.0 * PI / n;\n    k = ceil(k); \n    fi = k * 2.0 * PI / n;\n    res.x = fi;\n    res.z = k;\n    \n    k-=1.0;\n    fi = k * 2.0 * PI / n;\n    res.y = fi;\n    \n    return res;\n}\n\nfloat sdStar( vec2 p, float r, float n)\n{\n    vec4 sg = segment(p, n);\n    float r1 = 0.0;\n    float r2 = 0.0;\n    if (mod(sg.z, 2.0) <= 1.0)\n    {\n        r1 = r;\n        r2 = r/2.0;\n    }\n    else\n    {\n        r1 = r/2.0;\n        r2 = r;\n    }\n    float h1 = r1 * sin(sg.w);\n    float h2 = r2 * sin(2.0*PI/n - sg.w);\n    vec2 v1 = vec2(r1 * cos(2.0*PI/n), r1 * sin(2.0*PI/n));\n    vec2 v2 = vec2(r2, 0.0);\n    vec2 v3 = v2 - v1;\n    v3 *= h1 / (h1 + h2);\n    vec2 v4 = v1 + v3;\n    return length(p) - length(v4);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float r1 = 0.15;  //radius star\n    float r2 = 0.8;  //radius orbit\n    float n = 11.0;   //count star\n    float n2 = 8.0;  //count of rays  of star\n    \n    \n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec3 col = vec3(0.5, 0.5, 1.0);\n    vec3 startcol = vec3(1.0, 1.0, 0.0);\n    vec2 uv = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 p = uv * mat2(cos(iTime), -sin(iTime), sin(iTime), cos(iTime));\n   \n    //vec2 p = uv;\n    vec4 sg = segment(p, n);\n    \n    vec2 p1 = p - vec2(r2 * cos(sg.x), r2 * sin(sg.x));\n    p1 = p1 * mat2(cos(2.0*iTime), -sin(2.0*iTime), sin(2.0*iTime), cos(2.0*iTime));\n    \n    \n    float d = sdStar(p1, r1, n2);\n    float pst = step(d, 0.0);\n    \n    p1 = p - vec2(r2 * cos(sg.y), r2 * sin(sg.y));\n    p1 = p1 *mat2(cos(2.0*iTime), -sin(2.0*iTime), sin(2.0*iTime), cos(2.0*iTime));\n    \n    d = sdStar(p1, r1, n2);\n    pst += step(d, 0.0);\n    \n    col = mix(col, startcol, pst);\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}