{"ver":"0.1","info":{"id":"DdXfRr","date":"1688377952","viewed":112,"name":"Simple Earth Shader","username":"Jasp444","description":"Simple earth shader.","likes":7,"published":1,"flags":32,"usePreview":1,"tags":["planet"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 col = vec4(0.);\n    \n    #define ITERATIONS 60\n    for (int i = 0; i < ITERATIONS; i++) {\n        float angle = float(i) / 2.;\n        float radius = float(i) * 1.1;\n        vec2 offset = (vec2(sin(angle), cos(angle)) \n                       * radius) / iResolution.xy;\n        vec4 adding = texture(iChannel0, uv + offset);\n        adding.g /= 1.5;\n        col += adding / (0.04 * float(i) + 1.0);\n    }\n    col /= float(ITERATIONS);\n    col *= 4.;\n    col = clamp(col, 0., 0.2);\n    col += texture(iChannel0, uv);\n    fragColor = col + vec4(0.02);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4df3Rr","filepath":"/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","previewfilepath":"/media/ap/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float PI = 3.15159;\n\nvec3 sphericalToCart(float theta, float phi) {\n    vec3 ret = vec3(sin(theta) * cos(phi),\n                    sin(theta) * sin(phi),\n                    cos(theta));\n    return normalize(ret);\n}\n\nfloat edge(float x) {\n    float y = x * 2. - 1.;\n    return -y * y + 1.;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\n    vec3 lightSource = vec3(iMouse.x / iResolution.x, \n                            1.5 + iMouse.y / iResolution.y,\n                            1.5);\n\n    vec3 col = vec3(0.);\n    vec2 uv = fragCoord / iResolution.xy;\n\n    vec2 scaledPos = (fragCoord - vec2(iResolution.x - iResolution.y, 0) / 2.) / iResolution.yy;\n    vec2 center = vec2(0.5);\n\n    vec3 atmosphereLight = vec3(22., 198., 252.) / 255.;\n    vec3 atmosphereShadow = vec3(-2., -2., 20.) / 255.;\n\n    \n    vec2 distToCenter = scaledPos - center;\n    float d = length(distToCenter);\n\n    float r = 0.3;\n\n    float theta = cos(d / r * PI / 2.) * PI;\n    float phi = atan(distToCenter.x, distToCenter.y);\n\n    vec3 normal = sphericalToCart(theta, phi);\n\n    float angleFromSun = acos(dot(normal, lightSource) /\n                         (length(normal) * length(lightSource))) / PI;\n\n    float angleFromSunSquared = angleFromSun * angleFromSun;\n\n    col = mix(atmosphereShadow, atmosphereLight, angleFromSunSquared);\n\n    float edgeness = sqrt(clamp(theta, 0., 2. * PI) + 2.0);\n\n    float cloudSpeed = 0.015;\n    float landSpeed = 0.0035;\n\n    vec2 offsetC = vec2(iTime * cloudSpeed, 0.);\n    vec2 offsetL = vec2(iTime * landSpeed, 0.);\n\n    float landness = texture(iChannel1, distToCenter / edgeness + offsetL).r * theta / PI;\n\n    float land = clamp(landness * 1.1 - 0.5, 0., 0.2) * 20.;\n    land = clamp(land, 0., 1.) / 12.;\n\n    col -= land;\n\n    float specular = clamp(angleFromSunSquared - 0.70, 0., 1.) * 1.5;\n    specular *= (1. - land * 10.);\n\n    col = mix(col, vec3(1.), specular);\n\n    float hardShadow = clamp(0.3 - angleFromSun, 0., 0.1) / 2.;\n    col -= hardShadow * 2.;\n    \n    float terminator = edge(clamp(0., 0.6, hardShadow) * 19.) / 23.;\n    col = mix(col, vec3(1., 0.1, 0.), terminator);\n\n    float cloud = texture(iChannel0, distToCenter *3. / edgeness + offsetC).r * theta / PI;\n    cloud *= 0.8;\n    col += vec3(cloud);\n\n    vec2 cloudShadowOffset = vec2(0.025, 0.006) * angleFromSunSquared;\n    float cloudShadow = texture(iChannel0, distToCenter * 3. / edgeness + offsetC + cloudShadowOffset).r * theta / PI;\n    cloudShadow *= 1. - cloud;\n    cloudShadow *= 0.1;\n    col -= cloudShadow;\n\n    float falloff = 200.;\n    float opacity = 1. - clamp((d - r) * falloff, 0., 1.);\n\n    col *= opacity;\n\n    fragColor = vec4(col * vec3(1.05, 0.8, 1.0) + vec3(0.1 * opacity), 1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}