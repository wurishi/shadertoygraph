{"ver":"0.1","info":{"id":"mscGz8","date":"1676960674","viewed":150,"name":"Glossy Glass","username":"jiangyiheng","description":"Glossy Glass with random sampling","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["blur"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define HASHSCALE 443.8975\n#define ITERATION 15\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * HASHSCALE);\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract(vec2((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y));\n}\n// https://registry.khronos.org/OpenGL-Refpages/gl4/html/bitCount.xhtml\n// Use GLSL bitCount if available\nint bitCount(int x) {\n    int count = 0;\n    for (int i = 0; i < 24; ++i)\n        count += (x >> i) & 1;\n    return count;\n}\nvec2 getPos(vec2 uv, vec2 scale, float seed) {\n    vec2 hash = hash22(hash22(uv + vec2(seed, seed)));\n    ivec2 ihash = ivec2(hash * float(0xFFFFFF));\n    vec2 offset = scale * (float(bitCount(ihash.x) + bitCount(ihash.y)) - 32.0) / 24.0;\n    return uv + normalize(hash) * offset;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 scale = 1.0 / iResolution.xy;\n    scale *= 48.0;\n    \n    vec4 col = vec4(0.0,0.0,0.0,0.0);\n    \n    for (int i = 0; i < ITERATION; ++i)\n        col     += texture(iChannel0, getPos(uv, scale, float(i)));\n    fragColor = col / float(ITERATION);\n}","name":"Image","description":"","type":"image"}]}