{"ver":"0.1","info":{"id":"Ds3XzX","date":"1680145942","viewed":49,"name":"comp2","username":"Mr_Steve","description":"composition of various shapes","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["ring","box","dashedline"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define green vec3(0.0667, 0.9176, 0.549)\n#define yellow vec3(0.9843, 1.0, 0.0157)\n#define PI 3.14159265359\n#define TWO_PI 6.28318530718\n\n// dot product ring\nfloat ring(in vec2 st, in float radius){\n    vec2 dist = st-vec2(0.5);\n    float d;\n    d = smoothstep(radius-(radius*0.0),\n                         radius+(radius*0.01),\n                         dot(dist,dist)*4.0);\n    float d1;\n    d1 = 1.-smoothstep(radius-(radius*0.0),\n                         radius+(radius*0.05),\n                         dot(dist,dist)*4.0);\n    return d*d1;\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nmat2 scale(vec2 _scale){\n    return mat2(_scale.x,0.0,\n                0.0,_scale.y);\n}\n\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n\nfloat udSegment( in vec2 p, in vec2 a, in vec2 b, in float filled, \n  float gap, float offset ){\n    vec2 ba = b-a;\n    vec2 pa = p-a;\n    float h =clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    \n    // Here's where the magic happens\n    h -= offset;\n    float s = floor(h / (filled + gap)) * (filled + gap);\n    h = s + clamp(h - s, gap * 0.5, gap * 0.5 + filled);\n    h += offset;\n    \n    return length(pa-h*ba);\n}\n\nfloat polyMaker(vec2 st, int N){\n      float d = 0.0;\n     // Angle and radius from the current pixel\n  float a = atan(st.x,st.y)+PI;\n  float r = TWO_PI/float(N);\n\n  // Shaping function that modulate the distance\n  return d = cos(floor(.5+a/r)*r-a)*length(st);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n  // basics and vec3 col background\n  vec2 uv = fragCoord.xy/iResolution.xy;\n  vec3 col = vec3(0.0);\n\n  // circles\n  col = vec3(ring(uv,0.3))*green;\n  col += vec3(ring(uv,0.1));\n  col += vec3(ring(uv,abs(sin(iTime*0.75)*0.4)))*green;\n  col += vec3(ring(uv,0.7));\n\n  // boxes\n  float box = sdBox(uv-vec2(0.05,0.2),vec2(0.001,0.12));\n  col += vec3(1.0-smoothstep(0.001,0.002,box))*yellow;\n  float box1 = sdBox(uv-vec2(0.08,0.23),vec2(0.01,0.15));\n  col += vec3(1.0-smoothstep(0.001,0.002,box1))*yellow;\n  float box2 = sdBox(uv-vec2(0.11,0.22),vec2(0.01,0.14));\n  col += vec3(1.0-smoothstep(0.001,0.002,box2))*yellow;\n  float box3 = sdBox(uv-vec2(0.14,0.2),vec2(0.01,0.12));\n  col += vec3(1.0-smoothstep(0.001,0.002,box3))*yellow;\n  float box4 = sdBox(uv-vec2(0.17,0.23),vec2(0.01,0.15));\n  col += vec3(1.0-smoothstep(0.001,0.002,box4))*yellow;\n\n  // lines\n  // move space from the center to the vec2(0.0)\n  uv -= vec2(0.5);\n  // rotate the space\n  uv = rotate2d(-PI*0.25)*uv;\n  // move it back to the original place\n  uv += vec2(0.5);\n  float dline = udSegment( uv-vec2(0.2,-0.5), vec2(0.0,0.0), \n    vec2(0.0,2.0), 0.0125, 0.01, 0.0 );\n  col += vec3(1.0-smoothstep(0.001,0.002,dline))*green;\n  uv -= vec2(0.5);\n  uv = rotate2d(-PI*0.15)*uv;\n  uv += vec2(0.5);\n  float dline2 = udSegment( uv-vec2(0.35,-0.5), vec2(0.0,0.0), \n    vec2(0.0,2.0), 0.0125, 0.01, 0.0 );\n  col += vec3(1.0-smoothstep(0.001,0.002,dline2))*green;\n  uv -= vec2(0.5);\n  uv = rotate2d(-PI*0.6)*uv;\n  uv += vec2(0.5);\n  float dline3 = udSegment( uv-vec2(0.35,-0.5), vec2(0.0,0.0), \n    vec2(0.0,2.0), 0.025, 0.02, sin(0.5*iTime)*0.2);\n  col += vec3(1.0-smoothstep(0.001,0.002,dline3))*vec3(1.0,0.0,0.0);\n  \n  // Output to screen\n  fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}