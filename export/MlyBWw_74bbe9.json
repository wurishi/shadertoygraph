{"ver":"0.1","info":{"id":"MlyBWw","date":"1542916004","viewed":100,"name":"Raymarching Sandbox","username":"Jamie_Pendergast","description":":)","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["sda"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 rotation(float theta)\n{\n    return mat2(cos(iTime),-sin(iTime),sin(iTime),cos(iTime));\n}\n\nfloat sdfunion(float t, float t2)\n{\n    return min(t,t2);\n}\n\nvec2 map(vec3 p)\n{\n    \n   \tvec3 d = abs(p) - vec3(0.25);\n    float sphere = length(p) - max((0.2 + 0.2 * sin(iTime)),0.1);\n   \t\n    \n    \n    float box = \n    length(vec3(\n        \tmax(d.x,0.0),\n            max(d.y,0.0),\n            max(d.z,0.0)\n            ));\n    \n\treturn vec2(box,length(p) * 100.);\n}\n\nvec3 normal(vec3 p)\n{\n    vec3 eps = vec3(0.001,0.0,0.0);\n    return normalize(vec3(\n    \tmap(p - eps.xyy).x - map(p + eps.xyy).x,\n        map(p - eps.yxy).x - map(p + eps.yxy).x,\n        map(p - eps.yyx).x - map(p + eps.yyx).x\n    ));\n}\n\nvec3 render(vec3 ro, vec3 rd)\n{\n    float t;\n    vec3 p;\n    vec2 m = vec2(0.);\n    \n\tfor(int i = 0; i < 1000; ++i)\n    {\n        p = ro + rd * t;\n        vec2 ta = map(p);\n        if(ta.x > 100.) return vec3(rd.z);\n        m = ta;\n        t += ta.x;\n    }\n    \n    vec3 nor = normal(p);\n    vec3 base = vec3(sin(m.y),sin(m.y * 2.),sin(m.y * 8.));\n    vec3 light = normalize(vec3(0.,-1.,1.));\n    float l = dot(nor,light);\n    l = max(l,0.1);\n    return base * l;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = -1.0 + 2.0 * fragCoord/iResolution.xy;\n\tuv.x *= iResolution.x / iResolution.y;\n     \n    vec3 ro = vec3(0.,0.2,-1.);\n    vec3 rd = normalize(vec3(uv,1.));\n   \n    // Output to screen\n    fragColor = vec4(render(ro,rd),1.);\n}","name":"Image","description":"","type":"image"}]}