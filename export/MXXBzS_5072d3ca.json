{"ver":"0.1","info":{"id":"MXXBzS","date":"1728521098","viewed":21,"name":"Saturanus CRT Intel HD ready","username":"DerShade","description":"Discrete blocks. Minecraftizer can be removed from code, to get the continuum display.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["3d","noise","space","parametric","flight","minecraftized"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// super cheap volumetric display.\n// i'm doing this to find a way to create the volumetric space for \n// slow machines. at least 30 fps FullHD. the use case is uknown yet.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord)\n{    \n    float a,r,g,b,x,y,z,mx,my,mz,xx,yy,zz,sy,sm,crt,l=32.; // l >= 2 quality iter. sort of.\n    a  = iTime/13.;                                        // rotangle orbitualis\n    mx = sin(a+3.14)*30.;                                  // x movement\n    my = (sin(iTime/5.)*7.);                               // y movement\n    mz = cos(a+3.14)*(sin(iTime/20.)*31.+31.);             // z movement\n    int tx = int(fragCoord.x), ty = int(fragCoord.y);      // bitwise friendly coords\n    for(float f=0.;f<l;f+=1.){                             // iterations loop     \n    zz = f*2.+(sin(fragCoord.x*1223.*                      // f can be layers distance. \n           (cos(fragCoord.y/142.)*                         // akward noise of z  \n            sin(fragCoord.x*411.))*\n            mod(iTime,3.)))*2.;                            // multiplied at the end = more depth \n    xx = (fragCoord.x/iResolution.x-0.5)*                  // coords -0.5 to 0.5\n         (iResolution.x/iResolution.y)*zz;                 // aspect r.   \n    yy = (fragCoord.y/iResolution.y-0.5)*zz;\n      \n    z =  cos(a)*(zz)-sin(a)*(xx);                          // y rot\n    x =  sin(a)*(zz)+cos(a)*(xx); \n    y =  yy;\n        \n    x+=mx;y+=my;z+=mz;                                     // add movements\n    \n    x=floor(x); // the world minecraftizer WM #32768 v.12.9 beta. (c)1973                      \n    y=floor(y); // can be commented or deleted\n    z=floor(z);\n    \n    sy = (x*x+y*y+z*z)*0.05;                   // (a parametric planet sphere) * (scale of it)\n    sm = ((x+22.)*(x+22.)+z*z+y*y)*0.1;        // the same thing xmoved for the moon\n    sm = float(sm<0.3&&f>0.);                  // size of the moon \n    \n    crt = float((tx&1^ty&1)+(ty%3)+1)+ (1.+(r+g+b)/30.); // checkerboard on 3 lines fade\n                                                         // first time observed at TIC-80\n    \n    // color distrib. by cut off a radius of the sphere. || of the ring\n    b += float(sy>5. && sy<5.5 || sy>6. &&sy<16.&&y>-.5&&y<.5 &&f>0.);  \n    r += float(sy<5.           || sy>10.&&sy<18.&&y>-.5&&y<.5 &&f>0.)+sm*3.;\n    g += float(sy>2. && sy<5.5 || sy>12.&&sy<20.&&y>-.5&&y<.5 &&f>0.);\n    }\n    // Out\n    fragColor = vec4(crt*(r/l),crt*(g/l),crt*(b/l),1.0);   \n}","name":"Image","description":"","type":"image"}]}