{"ver":"0.1","info":{"id":"4cX3RB","date":"1708275095","viewed":122,"name":"StarField_Tut","username":"Lana","description":"my code based on the Art of Code - starfield tutorial.\n","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// Starffield - Lana\n//\n#define NUM_LAYERS 7.\n\n// 2D Rotation Matrix\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat Star(vec2 uv, float flare){\n    //find the middle of screen\n    float d = length(uv);\n    float m = .05/d; // no smoothstep\n    //float m = .032/d; // no smoothstep\n    //make star flares\n    float rays = max (0., .24-abs(uv.x*uv.y*1200.));\n    m +=rays*flare;\n    // pie 180\n    // /4 = 45 degree rotation\n    uv *= Rot(3.1415/4.);\n    rays = max(0., 1.-abs(uv.x*uv.y*1200.));\n    m +=rays*.3*flare;\n    // m *= smoothstep(.64, .2, d);\n    //\n    m *= smoothstep(1., .2, d);\n\n    return m;\n}\n// random number generator\n\nfloat Hash21(vec2 p) {\n    p = fract(p*vec2(123.34, 456.21));\n    p += dot(p, p+45.32);\n    return fract(p.x*p.y);\n}\n\nvec3 StarLayer(vec2 uv){\n     vec3 col = vec3(0);\n    // create boxes\n    vec2 gv = fract(uv)-.5;\n    vec2 id = floor(uv);\n\n    for(int y=-1;y<=1;y++){\n        for(int x=-1;x<=1;x++) {\n            vec2 offs = vec2(x, y);\n\n            float n = Hash21(id+offs); // random between 0 and 1\n            float size = fract(n*345.32);\n            // sizes of stars that makes flares\n            float star = Star(gv-offs-vec2(n, fract(n*34.))+.5,smoothstep(.8, 1.,size)*.6);\n\n            // COLORS\n            vec3 color = sin(vec3(.2, .3, .9)*fract(n*2345.2)*123.2)*.5+.5;\n            // MAIN COLORS\n            color = color*vec3(1., .25, 1.+size);\n\n\n            //vec3 color = sin(vec3(.25, .5, 1.)*fract(n*2345.2)*123.2)*.5+.5;\n            //color = color*vec3(1., .6, 1.+size);\n\n            star *= sin(iTime*3.+n*2345.2)*.5+.5;\n            col += star*size*color;\n\n            }\n    }\n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    // speed\n    float t = iTime*.025;\n    vec2 M = (iMouse.xy-iResolution.xy*.5)/iResolution.y;\n    // mouse\n    //uv += M*4.;\n    // rotate\n    uv *= Rot(t);\n\n    vec3 col = vec3(0);\n\n    for(float i=0.; i<1.; i+=1./NUM_LAYERS){\n        float depth = fract(i+t);\n        float scale = mix(20., .5, depth);\n        float fade = depth*smoothstep(1., .9, depth);\n\n        col += StarLayer(uv*scale+i*453.2-M)*fade;\n\n    }\n    //\n\n      //\n\n    // Output to screen\n    fragColor = vec4(col, 0.1);\n}\n","name":"Image","description":"","type":"image"}]}