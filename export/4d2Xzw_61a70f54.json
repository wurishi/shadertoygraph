{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"texture","id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}},{"channel":1,"type":"texture","id":"4df3Rr","filepath":"/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}},{"channel":2,"type":"texture","id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"// Bokeh disc.\n// by David Hoskins.\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// The Golden Angle is (3.-sqrt(5.0))*PI radians, which doesn't precompiled for some reason.\n// The compiler is a dunce I tells-ya!!\n#define GOLDEN_ANGLE 2.3999632\n\n#define ITERATIONS 150\n\nmat2 rot = mat2(cos(GOLDEN_ANGLE), sin(GOLDEN_ANGLE), -sin(GOLDEN_ANGLE), cos(GOLDEN_ANGLE));\n\n//-------------------------------------------------------------------------------------------\nvec3 Bokeh(sampler2D tex, vec2 uv, float radius)\n{\n\tvec3 acc = vec3(0), div = acc;\n    float r = 1.;\n    vec2 vangle = vec2(0.0,radius*.01 / sqrt(float(ITERATIONS)));\n    \n\tfor (int j = 0; j < ITERATIONS; j++)\n    {  \n        // the approx increase in the scale of sqrt(0, 1, 2, 3...)\n        r += 1. / r;\n\t    vangle = rot * vangle;\n        vec3 col = texture(tex, uv + (r-1.) * vangle).xyz; /// ... Sample the image\n        col = col * col *1.8; // ... Contrast it for better highlights - leave this out elsewhere.\n\t\tvec3 bokeh = pow(col, vec3(4));\n\t\tacc += col * bokeh;\n\t\tdiv += bokeh;\n\t}\n\treturn acc / div;\n}\n\n//-------------------------------------------------------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.x; //... with correct aspect ratio\n    \n    float time = mod(iTime*.2 +.25, 3.0);\n    \n\tfloat rad = .8 - .8*cos(time * 6.283);\n    if (iMouse.w >= 1.0)\n    {\n    \trad = (iMouse.x/iResolution.x)*3.0;\n\n    }\n    \n    if (time < 1.0)\n    {        \n\t\tfragColor = vec4(Bokeh(iChannel0, uv, rad), 1.0);\n    }else\n    if (time < 2.0)\n    {\n        fragColor = vec4(Bokeh(iChannel1, uv, rad), 1.0);    \n    }else\n    {\n\t\tfragColor = vec4(Bokeh(iChannel2, uv, rad), 1.0);\n    }\n    \n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4d2Xzw","date":"1410362903","viewed":14931,"name":"Bokeh disc","username":"Dave_Hoskins","description":"Uses evenly distributed samples from this idea:- http://blog.marmakoide.org/?p=1 with a few changes, like not using square roots.\nUpdate: Removed trig from the loop.\n","likes":270,"published":3,"flags":0,"usePreview":0,"tags":["2d","blur","bokeh"],"hasliked":0,"parentid":"","parentname":""}}