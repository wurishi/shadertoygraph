{"ver":"0.1","info":{"id":"wtKSWw","date":"1583149719","viewed":434,"name":"Color grading LUT","username":"budsan","description":"Color grading with LUT.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["colorgrading"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xdf3zn","filepath":"/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","previewfilepath":"/media/ap/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","type":"texture","channel":2,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// You can get the LUT here: https://www.shadertoy.com/view/3lVSzK\n// Apply to the LUT any color transformation with Photoshop or Gimp and save it.\n// Apply the color granding LUT to iChannel1.\n\n// Samples:\n// gShaderToy.SetTexture(1, {mSrc:'https://dl.dropboxusercontent.com/s/r229el0l1cn7cu2/vanilla.png?dl=0', mType:'texture', mID:1, mSampler:{ filter: 'linear', wrap: 'clamp', vflip:'true', srgb:'false', internal:'byte' }});\n// gShaderToy.SetTexture(1, {mSrc:'https://dl.dropboxusercontent.com/s/lw8fic9oxn6wq5r/noir.png?dl=0', mType:'texture', mID:1, mSampler:{ filter: 'linear', wrap: 'clamp', vflip:'true', srgb:'false', internal:'byte' }});\n// gShaderToy.SetTexture(1, {mSrc:'https://dl.dropboxusercontent.com/s/va5tofex8h1l2b3/night.png?dl=0', mType:'texture', mID:1, mSampler:{ filter: 'linear', wrap: 'clamp', vflip:'true', srgb:'false', internal:'byte' }});\n// gShaderToy.SetTexture(1, {mSrc:'https://dl.dropboxusercontent.com/s/tbacu48l4p1cart/csimiami.png?dl=0', mType:'texture', mID:1, mSampler:{ filter: 'linear', wrap: 'clamp', vflip:'true', srgb:'false', internal:'byte' }});\n// gShaderToy.SetTexture(1, {mSrc:'https://dl.dropboxusercontent.com/s/mtmdefsfe9a9xoe/alien.png?dl=0', mType:'texture', mID:1, mSampler:{ filter: 'linear', wrap: 'clamp', vflip:'true', srgb:'false', internal:'byte' }});\n// gShaderToy.SetTexture(1, {mSrc:'https://dl.dropboxusercontent.com/s/egew0xwrcigga9h/redvelvet.png?dl=0', mType:'texture', mID:1, mSampler:{ filter: 'linear', wrap: 'clamp', vflip:'true', srgb:'false', internal:'byte' }});\n\n// Tutorial to load samples: https://www.shadertoy.com/view/lsGGDd\n\n//You can also use \"Shadertoy Custom Texures\" extension to try your own LUTs:\n//https://chrome.google.com/webstore/detail/shadertoy-custom-texures/jgeibpcndpjboeebilehgbpkopkgkjda\n//https://addons.mozilla.org/es/firefox/addon/shadertoy-custom-texures/\n\n\n//#define DEBUG_SLIDER\n//#define ENABLE_DIFF\n\n#define ENABLE_DITHER\n#define CHANNEL_DEPTH 256.0\n\n#define LUT_ROWS 8.0 // LUT64\n#define LUT_SIZE (LUT_ROWS * LUT_ROWS)\n#define LUT_PADDING (1.0 / LUT_SIZE)\n\nvec2 LUT_UV(float red, float green, float blue_slice)\n{\n    float row;\n    float col = modf(min(blue_slice, LUT_SIZE - 1.0) / LUT_ROWS, row); \n    return vec2\n    (\n        (col           ) + ((  red * (1.0 - 2.0 * LUT_PADDING) + LUT_PADDING) / LUT_ROWS),\n        (row / LUT_ROWS) + ((green * (1.0 - 2.0 * LUT_PADDING) + LUT_PADDING) / LUT_ROWS)\n    );\n}\n\nvec4 LUT_Color(vec4 color)\n{\n    // The palette is an RGB cube. It takes 2 samples for the blue channel.  \n    float slice;\n    float slice_weight = modf(color.b * (LUT_SIZE - 1.f), slice);\n    vec4 slice_color1 = textureLod(iChannel1, LUT_UV(color.r, color.g, slice + 0.0), 0.0);\n    vec4 slice_color2 = textureLod(iChannel1, LUT_UV(color.r, color.g, slice + 1.0), 0.0);\n    \n    return vec4(mix(slice_color1, slice_color2, slice_weight).rgb, color.a);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 color = texture(iChannel0, uv);\n    vec4 finalColor = LUT_Color(color);\n    \n#ifdef ENABLE_DITHER\n    float dither = texture(iChannel2, fragCoord.xy / 8.0).x;\n    vec3 dcolor = finalColor.rgb * CHANNEL_DEPTH;\n    finalColor = vec4((floor(dcolor) + step(dither, fract(dcolor))) / CHANNEL_DEPTH, finalColor.a);\n#endif\n    \n#ifdef DEBUG_SLIDER\n#ifdef ENABLE_DIFF\n    finalColor = abs(finalColor - color) * 128.0;\n#endif\n    fragColor = mix(finalColor, color, step(iMouse.x, fragCoord.x));\n#else\n    fragColor = finalColor; \n#endif\n}","name":"Image","description":"","type":"image"}]}