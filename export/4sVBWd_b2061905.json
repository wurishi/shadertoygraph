{"ver":"0.1","info":{"id":"4sVBWd","date":"1531082211","viewed":1473,"name":"Electric Fence","username":"MadEqua","description":"Winner of the July 2018 ShaderToy compo from Graphics Programming Discord. Hexagons never disappoint.","likes":31,"published":3,"flags":0,"usePreview":0,"tags":["hexagon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.141593;\nconst float TWO_PI = PI * 2.0;\n\nfloat rand(float v) {\n    return fract(sin(v) * 5364.54367);\n}\n\nfloat noise(float v){\n    float i = floor(v);\n    float f = fract(v);   \n    float a = rand(i);\n    float b = rand(i + 1.0);                   \n    return mix(a, b, smoothstep(0.0, 1.0, f));\n}\n\nvec2 rotate2D(float angle, vec2 uv) {\n    return mat2(cos(angle), -sin(angle), sin(angle), cos(angle)) * uv;\n}\n\nfloat hex(vec2 p, float thickness) {\n    p.x *= 0.57735 * 2.0;\n\tp.y += mod(floor(p.x), 2.0) * 0.5;\n\tp = abs((mod(p, 1.0) - 0.5));\n    float sm = thickness * 0.5;\n\treturn smoothstep(thickness + sm, thickness - sm, abs(max(p.x * 1.5 + p.y, p.y * 2.0) - 1.0));\n}\n\nvec3 pallete() {\n    vec3 ORANGE = vec3(0.7, 0.3, 0.1);\n\tvec3 BROWN = vec3(0.5, 0.35, 0.2);\n    vec3 PURPLE = vec3(0.6, 0.2, 0.5);\n    vec3 RED = vec3(0.7, 0.1, 0.2);\n    vec3 c1 = mix(ORANGE, PURPLE, noise(iTime * 0.55 + 185.43));\n    vec3 c2 = mix(BROWN, RED, noise(iTime * 0.45 + 1485.34));\n    return mix(c1, c2, noise(iTime * 0.5 + 432.63));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 uv = (fragCoord - iResolution.xy * 0.5) / iResolution.y;\n    uv = rotate2D((noise(iTime * 0.05 + 534.453) - 0.5) * TWO_PI, uv);\n    \n    float tiles = sin(iTime * 0.5 + 12.5) * 6.0 + 9.0;\n    int LAYERS = 6;\n    \n    vec3 pal = pallete();\n    vec3 col = pal * 0.6;\n    \n    float scaleAnim = 0.15 * sin(iTime * 1.3 + 4324.0) + 0.2;\n    vec2 cameraAnim = (vec2(noise(iTime * 0.15 + 123.25), noise(iTime * 0.2 + 1544.123)) - 0.5) * 10.0;\n\n    float scale = 1.0;\n    for(int i = 1; i <= LAYERS; ++i) {\n        float thicknessAnim = 0.08 * sin(0.9 * iTime + float(i) * 0.6) + 0.1;\n        \n        float h = hex((scale * uv * tiles) + cameraAnim, thicknessAnim);\n        vec3 c = float(i) * pal * h;\n        \n        c *= mix(0.9, -noise(iTime * 0.5 + 1515.11) * 0.6, step(0.5, float(i % 2)));\n        c += mix(0.2, -0.2, hex(5.0 * uv, 0.6)) * h;\n   \n      \tcol += (1.0 - length(uv)) * c;\n        scale -= scaleAnim / float(LAYERS);\n    }\n           \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}