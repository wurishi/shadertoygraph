{"ver":"0.1","info":{"id":"ttXfWB","date":"1597595768","viewed":121,"name":"#001 - Some rings doing the same","username":"Deadtotem","description":"This code is original based on \"RayMarching starting point\" by Martijn Steinrucken aka BigWings/CountFrolic, and modified by me for study purposes only. ","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","torus","rings"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// This code is original based on \"RayMarching starting point\" \n// by Martijn Steinrucken aka BigWings/CountFrolic - 2020\n// modified by me, for study only.\n\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n#define S smoothstep\n\nvec3 Bg(vec3 rd){\n    float k = rd.x*.5+.5;\n    vec3 col =  mix(vec3(.2, .1, .1), vec3(.2, .5, 1) * sin(iTime*.12), k);\n    return col;\n}\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat Hash21(vec2 p) {\n    p = fract(p*vec2(123.34,233.53));\n    p += dot(p, p+23.234);\n    return fract(p.x*p.y);\n}\n\nfloat sdBox2d(vec2 p, vec2 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, p.y), 0.);\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\nfloat GetDist(vec3 p) {\n    float r1 = 1.7;\n    float r2=.3;\n    vec2 cp = vec2(length(p.xz)-r1, p.y);\n    float a = atan(p.x, p.z);\n    cp *=Rot(a * 5.5 + iTime);\n    cp.y = abs(cp.y)-.6;\n    cp.y = abs(cp.y)-.13;\n    float d = length(cp)-r2;\n    d = sdBox2d(cp, vec2(.4, .2 *(sin(3.*a)*.5+.5))) -.1;\n    d += sdSphere( vec3(cp, .1), -.02);\n    return d * .208;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.; \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.01, 0);\n    vec3 n = d - vec3(GetDist(p-e.xyy),GetDist(p-e.yxy),GetDist(p-e.yyx));  \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;  \n    vec3 col = vec3(0);\n    vec3 ro = vec3(0, 3, -3);\n    ro.yz *= Rot(-m.y*3.14+1.);\n    ro.xz *= Rot(-m.x*6.2831);\n    vec3 rd = GetRayDir(uv, ro, vec3(0), 1.);\n    col += Bg(rd);\n    float d = RayMarch(ro, rd);\n    if(d<MAX_DIST) {\n    \tvec3 p = ro + rd * d;\n    \tvec3 n = GetNormal(p);\n        vec3 r = reflect(rd, n); //reflection rayDir to Normal\n        float spec = pow(max(0., r.y), 20.); //Specular adding\n    \tfloat dif = dot(n, normalize(vec3(1,2,3)))*.5+.5;\n        vec3 colChan0 = texture(iChannel0, vec2(n.x, n.y)).rgb;\n        col = mix(Bg(r), vec3(dif) * pow(colChan0.rbb,vec3(.65)), .55) + spec ;\n\n    }\n    \n    col = pow(col, vec3(.4545));\t// gamma correction\n    \n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}