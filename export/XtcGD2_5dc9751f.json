{"ver":"0.1","info":{"id":"XtcGD2","date":"1471531202","viewed":1673,"name":"Belousov-Zhabotinsky Reaction","username":"cornusammonis","description":"A very simple model of the Belousov-Zhabotinsky chemical reaction. It takes about 10 seconds for the reaction's distinctive pattern to appear. Reset with spacebar.","likes":29,"published":3,"flags":48,"usePreview":1,"tags":["paper","rock","reaction","scissors","belousov","zhabotinsky"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texture(iChannel0, fragCoord.xy / iResolution.xy);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/*\n\tSee: A Simple Model of the Belousov-Zhabotinsky Reaction From First Principles\n\tby Alasdair Turner http://discovery.ucl.ac.uk/17241/1/17241.pdf\n*/\n\n#define TIMESTEP 0.01\n\nbool reset() {\n    return texture(iChannel3, vec2(32.5/256.0, 0.5) ).x > 0.5;\n}\n\n#define T(d) n += texture(iChannel0, fract(vUv+d)).xyz;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 vUv = fragCoord.xy / iResolution.xy;\n    vec4 t = vec4(1. / iResolution.xy, -1. / iResolution.y, 0.0);\n    vec3 p = texture(iChannel0, vUv).xyz;\n    vec3 n = vec3(0);\n    \n    // shorthand for summing the values over all 8 neighbors\n    T(t.wy) T(t.xy) T(t.xw) T(t.xz) T(t.wz) T(-t.xy) T(-t.xw) T(-t.xz)\n    \n    // this line encodes the rules\n    vec3 result = p + TIMESTEP * vec3(n.z - n.y, n.x - n.z, n.y - n.x);\n\n    // initialize with noise\n    if(p.xyz == vec3(0) || reset()) {\n        fragColor = texture(iChannel1, vUv);\n    } else {\n        fragColor = vec4(clamp(result, 0.0, 1.0), 0.0);\n    }\n    \n}","name":"Buf A","description":"","type":"buffer"}]}