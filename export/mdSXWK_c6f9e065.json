{"ver":"0.1","info":{"id":"mdSXWK","date":"1670877759","viewed":365,"name":"20221213_cosine on complex plane","username":"0b5vr","description":"haha","likes":26,"published":1,"flags":0,"usePreview":0,"tags":["3d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define saturate(x) clamp(x,0.,1.)\n#define linearstep(a,b,t) saturate(((t)-(a))/((b)-(a)))\n\nconst float RANGE_RE = 100.0;\nconst float RANGE_IM = 4.0;\nconst float SCALE = 0.25;\nconst int PLANES = 128;\nconst float BRIGHTNESS = 0.5;\n\nconst float PI = acos( -1.0 );\nconst float TAU = 2.0 * PI;\n\nmat2 rotate2D( float t ) {\n  float c = cos( t ), s = sin( t );\n  return mat2( c, s, -s, c );\n}\n\nmat3 orthBas( vec3 z ) {\n  z = normalize( z );\n  vec3 up = abs( z.y ) < 0.999 ? vec3( 0, 1, 0 ) : vec3( 0, 0, 1 );\n  vec3 x = normalize( cross( up, z ) );\n  return mat3( x, cross( z, x ), z );\n}\n\nfloat isectPlane( vec3 ro, vec3 rd, vec3 n ) {\n  return -dot( ro, n ) / dot( rd, n );\n}\n\nfloat graphFunc( vec2 z ) {\n  return ( exp( z.y ) * cos( z.x ) + exp( -z.y ) * cos( -z.x ) ) / 2.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 uv = fragCoord / iResolution.xy;\n  vec2 p = uv * 2.0 - 1.0;\n  p.x *= iResolution.x / iResolution.y;\n\n  vec3 co = vec3( 0.0, 3.0, 11.0 );\n  co.zx *= rotate2D( 0.2 * iTime );\n  vec3 ct = vec3( 0.0, 0.0, 0.0 );\n  mat3 cb = orthBas( normalize( co - ct ) );\n\n  vec3 ro = co;\n  vec3 rd = cb * normalize( vec3( p, -2.0 ) );\n  \n  vec3 col = vec3( 0.0 );\n  \n  for ( int i = 0; i < PLANES; i ++ ) {\n    float planeZ = mix( -RANGE_IM, RANGE_IM, float( i ) / float( PLANES - 1 ) );\n    \n    vec3 rot = ro - vec3( 0.0, 0.0, planeZ );\n    vec3 n = vec3( 0.0, 0.0, sign( rd.z ) );\n    float isect = isectPlane( rot, rd, n );\n\n    if ( 0.0 < isect ) {\n      vec3 rp = ro + rd * isect;\n      float dv = length( vec2( dFdx( rp.y ), dFdy( rp.y ) ) );\n      float y = SCALE * graphFunc( rp.xz );\n\n      vec3 color = 0.5 + 0.5 * sin( 1.8 * tanh( 0.3 * y ) + vec3( 0.0, 2.0, 3.0 ) );\n      color *= exp( -0.1 * isect ); // fog\n      color *= linearstep( 0.01, 0.0, abs( rp.x ) - RANGE_RE ); // mask\n      float dy = length( vec2( dFdx( y ), dFdy( y ) ) );\n      float v = linearstep( dv, 0.0, abs( rp.y - y ) - 0.5 * dy );\n      col += BRIGHTNESS * color * v;\n    }\n  }\n  \n  fragColor = vec4( col, 1.0 );\n}\n","name":"Image","description":"","type":"image"}]}