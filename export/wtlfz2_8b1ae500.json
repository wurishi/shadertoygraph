{"ver":"0.1","info":{"id":"wtlfz2","date":"1597269675","viewed":620,"name":"fastinvsmoothstep (test anim)","username":"iradicator","description":"fastinvsmoothstep comparison for different animations (fade, scale and translation).\nThis demo shows slow and fast animations to highlight differences.\n\nFor full information:\nhttps://iradicator.com/fast-inverse-smoothstep/","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fast","animation","function","smoothstep"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// \n// For more details, check out my blog post: \n// https://iradicator.com/fast-inverse-smoothstep/\n//\n// fastinvsmoothstep implementation: https://www.shadertoy.com/view/wtXfzS\n// fastinvsmoothstep-based animations: https://www.shadertoy.com/view/wtlfz2\n//\n\n#define IS_SECOND_UPDATE_STEP 0\n#define IS_TWO_ADDITIONAL_UPDATE_STEPS 0\n\n#define IS_SIN_TIME 0\n#define IS_CONSTANT_TIME 0\n\n#define EPSILON 0.00001\n\nfloat invsmoothstep(in float y)\n{\n    return 0.5 - sin(asin(1.0-2.0*y)/3.0);\n}\n\nfloat fastinvsmoothstep1(in float y)\n{\n  float yn = 2.0*y-1.0;\n  float t = 0.45*yn;\n  t -= (t*(4.0*t*t-3.0)+yn) / (12.0*t*t-3.0);\n#if IS_SECOND_UPDATE_STEP\n  t -= (t*(4.0*t*t-3.0)+yn) / (12.0*t*t-3.0-EPSILON);\n#endif\n#if IS_TWO_ADDITIONAL_UPDATE_STEPS\n  t -= (t*(4.0*t*t-3.0)+yn) / (12.0*t*t-3.0-EPSILON);\n  t -= (t*(4.0*t*t-3.0)+yn) / (12.0*t*t-3.0-EPSILON);\n#endif\n  return t + 0.5;     \n}\n\nfloat fastinvsmoothstep2(in float y)\n{\n  float yn = 2.0*y-1.0;\n  float t = 0.5*abs(yn)*yn*yn*yn;\n  t -= (t*(4.0*t*t-3.0)+yn) / (12.0*t*t-3.0-EPSILON);\n#if IS_SECOND_UPDATE_STEP\n  t -= (t*(4.0*t*t-3.0)+yn) / (12.0*t*t-3.0-EPSILON);\n#endif\n#if IS_TWO_ADDITIONAL_UPDATE_STEPS\n  t -= (t*(4.0*t*t-3.0)+yn) / (12.0*t*t-3.0-EPSILON);\n  t -= (t*(4.0*t*t-3.0)+yn) / (12.0*t*t-3.0-EPSILON);\n#endif\n    return t + 0.5;     \n}\n\nfloat fastinvsmoothstep3(in float y)\n{\n  float yn = 2.0*y-1.0;\n  float t = -0.25*yn*yn*yn;\n  t -= (t*(4.0*t*t-3.0)+yn) / (12.0*t*t-3.0);\n#if IS_SECOND_UPDATE_STEP\n  t -= (t*(4.0*t*t-3.0)+yn) / (12.0*t*t-3.0-EPSILON);\n#endif\n#if IS_TWO_ADDITIONAL_UPDATE_STEPS\n  t -= (t*(4.0*t*t-3.0)+yn) / (12.0*t*t-3.0-EPSILON);\n  t -= (t*(4.0*t*t-3.0)+yn) / (12.0*t*t-3.0-EPSILON);\n#endif\n  return t + 0.5;     \n}\n\nfloat fastinvsmoothstep4(in float y)\n{\n  float yn = 2.0*y-1.0;\n  float absyn3 = abs(yn)*yn*yn;\n  float t = 0.45*yn+0.5*yn*(absyn3*absyn3-0.9*absyn3);\n  t -= (t*(4.0*t*t-3.0)+yn) / (12.0*t*t-3.0-EPSILON);\n#if IS_SECOND_UPDATE_STEP\n  t -= (t*(4.0*t*t-3.0)+yn) / (12.0*t*t-3.0-EPSILON);\n#endif\n#if IS_TWO_ADDITIONAL_UPDATE_STEPS\n  t -= (t*(4.0*t*t-3.0)+yn) / (12.0*t*t-3.0-EPSILON);\n  t -= (t*(4.0*t*t-3.0)+yn) / (12.0*t*t-3.0-EPSILON);\n#endif\n  return t + 0.5;     \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    vec2 uv = fragCoord/iResolution.xy;\n    uv = 2.0*uv - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    uv *= 1.1;\n    \n    vec3 col = vec3(0.004, 0.002,0.0);\n\n#if !IS_SIN_TIME\n    float t1 = abs(2.0*fract(0.005*iTime)-1.0);\n    float t2 = abs(2.0*fract(0.500*iTime)-1.0);\n#else\n    float t1 = 0.5 + 0.5*sin(0.05*iTime);\n    float t2 = 0.5 + 0.5*sin(5.00*iTime);\n#endif    \n#if IS_CONSTANT_TIME\n    t1 = t2 = 0.0;\n#endif\n    \n    vec2 o0 = vec2(-0.4,2.0*invsmoothstep(t1)-1.0);\n    vec2 o1 = vec2(-0.2,2.0*fastinvsmoothstep1(t1)-1.0);\n    vec2 o2 = vec2( 0.0,2.0*fastinvsmoothstep2(t1)-1.0);\n    vec2 o3 = vec2( 0.2,2.0*fastinvsmoothstep3(t1)-1.0);\n    vec2 o4 = vec2( 0.4,2.0*fastinvsmoothstep4(t1)-1.0);\n\n    vec2 u0 = vec2( 0.6,2.0*invsmoothstep(t2)-1.0);\n    vec2 u1 = vec2( 0.8,2.0*fastinvsmoothstep1(t2)-1.0);\n    vec2 u2 = vec2( 1.0,2.0*fastinvsmoothstep2(t2)-1.0);\n    vec2 u3 = vec2( 1.2,2.0*fastinvsmoothstep3(t2)-1.0);\n    vec2 u4 = vec2( 1.4,2.0*fastinvsmoothstep4(t2)-1.0);\n\n    vec2 c0 = vec2(-1.4,0.6);\n    vec2 c1 = vec2(-1.2,0.6);\n    vec2 c2 = vec2(-1.0,0.6);\n    vec2 c3 = vec2(-0.8,0.6);\n    vec2 c4 = vec2(-0.6,0.6);\n\n    vec2 a0 = vec2(-1.4,0.4);\n    vec2 a1 = vec2(-1.2,0.4);\n    vec2 a2 = vec2(-1.0,0.4);\n    vec2 a3 = vec2(-0.8,0.4);\n    vec2 a4 = vec2(-0.6,0.4);\n\n    vec2 b0 = vec2(-1.4,-0.6);\n    vec2 b1 = vec2(-1.2,-0.6);\n    vec2 b2 = vec2(-1.0,-0.6);\n    vec2 b3 = vec2(-0.8,-0.6);\n    vec2 b4 = vec2(-0.6,-0.6);\n\n    vec2 d0 = vec2(-1.4,-0.4);\n    vec2 d1 = vec2(-1.2,-0.4);\n    vec2 d2 = vec2(-1.0,-0.4);\n    vec2 d3 = vec2(-0.8,-0.4);\n    vec2 d4 = vec2(-0.6,-0.4);\n        \n\tif (abs(o0.y - uv.y) <= 0.1)\n    \tcol += smoothstep(vec3(1.0),vec3(0.0),vec3(abs(o0.y - uv.y)/0.05));    \n\n    if (length(uv - o0) < 0.1)\n        col = vec3(0.1,0.1,0.4);    \n    if (length(uv - o1) < 0.1)\n        col = vec3(0.2,0.2,0.0);    \n    if (length(uv - o2) < 0.1)\n        col = vec3(0.7,0.2,0.2);\n    if (length(uv - o3) < 0.1)\n        col = vec3(0.2,0.5,0.6);\n    if (length(uv - o4) < 0.1)\n        col = vec3(0.1,0.7,0.2);\n\n    if (length(uv - u0) < 0.1)\n        col = vec3(0.1,0.1,0.4);    \n    if (length(uv - u1) < 0.1)\n        col = vec3(0.2,0.2,0.0);\n    if (length(uv - u2) < 0.1)\n        col = vec3(0.7,0.2,0.2);\n    if (length(uv - u3) < 0.1)\n        col = vec3(0.2,0.5,0.5);\n    if (length(uv - u4) < 0.1)\n        col = vec3(0.1,0.7,0.2);    \n   \n    if (length(uv - c0) < 0.1)\n        col = mix(col, vec3(0.1,0.1,0.4), invsmoothstep(t1));\n    if (length(uv - c1) < 0.1)\n        col = mix(col, vec3(0.2,0.2,0.0), fastinvsmoothstep1(t1));\n    if (length(uv - c2) < 0.1)\n        col = mix(col, vec3(0.7,0.2,0.2), fastinvsmoothstep2(t1));\n    if (length(uv - c3) < 0.1)\n        col = mix(col, vec3(0.2,0.5,0.5), fastinvsmoothstep3(t1));\n    if (length(uv - c4) < 0.1)\n        col = mix(col, vec3(0.1,0.7,0.2), fastinvsmoothstep4(t1));\n    \n    if (length(uv - a0) < 0.1)\n        col = mix(col, vec3(0.1,0.1,0.4), invsmoothstep(t2));\n    if (length(uv - a1) < 0.1)\n        col = mix(col, vec3(0.2,0.2,0.0), fastinvsmoothstep1(t2));\n    if (length(uv - a2) < 0.1)\n        col = mix(col, vec3(0.7,0.2,0.2), fastinvsmoothstep2(t2));\n    if (length(uv - a3) < 0.1)\n        col = mix(col, vec3(0.2,0.5,0.5), fastinvsmoothstep3(t2));\n    if (length(uv - a4) < 0.1)\n        col = mix(col, vec3(0.1,0.7,0.2), fastinvsmoothstep4(t2));\n\n    if (length(uv - b0) < 0.1 * (2.0* invsmoothstep(t1)-1.0))\n        col = vec3(0.1,0.1,0.4);\n    if (length(uv - b1) < 0.1 * (2.0*fastinvsmoothstep1(t1)-1.0))\n        col = vec3(0.2,0.2,0.0);\n    if (length(uv - b2) < 0.1 * (2.0*fastinvsmoothstep2(t1)-1.0))\n        col = vec3(0.7,0.2,0.2);\n    if (length(uv - b3) < 0.1 * (2.0*fastinvsmoothstep3(t1)-1.0))\n        col = vec3(0.2,0.5,0.5);\n    if (length(uv - b4) < 0.1 * (2.0*fastinvsmoothstep4(t1)-1.0))\n        col = vec3(0.1,0.7,0.2);\n\n    if (length(uv - d0) < 0.1 * (2.0* invsmoothstep(t2)-1.0))\n        col = vec3(0.1,0.1,0.4);\n    if (length(uv - d1) < 0.1 * (2.0*fastinvsmoothstep1(t2)-1.0))\n        col = vec3(0.2,0.2,0.0);\n    if (length(uv - d2) < 0.1 * (2.0*fastinvsmoothstep2(t2)-1.0))\n        col = vec3(0.7,0.2,0.2);\n    if (length(uv - d3) < 0.1 * (2.0*fastinvsmoothstep3(t2)-1.0))\n        col = vec3(0.2,0.5,0.5);\n    if (length(uv - d4) < 0.1 * (2.0*fastinvsmoothstep4(t2)-1.0))\n        col = vec3(0.1,0.7,0.2);\n        \n    col = pow(col,vec3(1.0/2.2));\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}