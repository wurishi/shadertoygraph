{"ver":"0.1","info":{"id":"flsGzn","date":"1621434473","viewed":226,"name":"animated tiling ","username":"FabriceNeyret2","description":".","likes":12,"published":3,"flags":0,"usePreview":0,"tags":["2d","tiling","short"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 O, vec2 u )\n{\n    vec2 R = iResolution.xy,S,\n         U = 6.*u/R.y;\n\n    ivec2 I = ivec2(U); bool b = (I.x+I.y)%2 < 1;\n    U = 2.* fract( U ) - 1.;\n    \n    float h = 1.41*fract(iTime/2.),\n          c = 1., p = 9./R.y; \n    if (h>.707) U=U.yx, h=1.41-h;                          // 2nd half of the animation\n    \n    U *= mat2(cos( asin(h) + 1.57*vec4(0,1,-1,0) ));       // rotation\n    U = abs( U.x*U.y > 0. ? c=.5, U : vec2(-U.y,U.x) );    // 4-fold symmetry + c = checker coloring\n    if (b) c = 1.5-c;\n    \n    if (u.x < R.x/2.)                                      // draw contours\n        S =  smoothstep( 2.*p, 0., abs(U-h ) ),\n        O = vec4(   S.y\n                 +( U.y<h ? S.x : 0. )\n                );\n    else                                                   // draw regions\n        S =  smoothstep( p, -p, h-U ),\n        O =  vec4(       S.y * c\n                   + (1.-S.y)*S.x * (1.5-c)\n               //  + (1.-S.x)*(1.-S.y)* ( b ? .5 : 1. )*(h)\n                 );\n}","name":"Image","description":"","type":"image"}]}