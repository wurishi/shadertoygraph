{"ver":"0.1","info":{"id":"Xl23Dz","date":"1428248180","viewed":622,"name":"The Tender Cut [TV]","username":"jimmikaelkael","description":"This shader is based on a screenshot of the video game \"The Tender Cut\" with the permission of the authors.\nYou can toggle colors using 'C' key, sit down and watch TV using 'W' key.\nMore infos on the game: http://thetendercut.info/","likes":20,"published":1,"flags":16,"usePreview":0,"tags":["tv","chair","cut","room","tender","television"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n#define ID_NONE         -1.0\n#define ID_FLOOR         0.01\n#define ID_CEILING       0.02\n#define ID_WALL_BACK     0.03\n#define ID_WALL_FRONT    0.04\n#define ID_WALL_LEFT     0.05\n#define ID_WALL_RIGHT    0.06\n#define ID_BASEBOARD_XY  0.07\n#define ID_BASEBOARD_YZ  0.08\n#define ID_CARPET        0.09\n#define ID_CARPET_B      0.10\n#define ID_TV_0          0.11  // tv wood body\n#define ID_TV_1          0.12  // tv wood borders\n#define ID_TV_2          0.13  // tv hp\n#define ID_TV_3          0.14  // tv tube\n#define ID_TV_4          0.15  // tv screen\n#define ID_TV_5          0.16  // tv btn\n#define ID_TV_6          0.17  // tv pot black\n#define ID_TV_7          0.18  // tv pot white\n#define ID_CHAIR_0       0.19  // chair wood\n#define ID_CHAIR_1       0.20  // chair seat\n\n#define KEY_C            67\n#define KEY_W            87\n\nfloat noise3d(in vec3 x) {\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n    f = f * f * (3.0 - 2.0 * f);\n    vec2 uv = (p.xy + vec2(37.0, 17.0) * p.z) + f.xy;\n    vec2 rg = texture(iChannel1, (uv + 0.5) / 256.0, -100.0).yx;\n    return mix(rg.x, rg.y, f.z);\n}\n\nfloat fBm3d(in vec3 p) {\n    float sum = 0.0;\n    float amp = 1.0;\n    for(int i = 0; i < 4; i++) {\n        sum += amp * noise3d(p);\n        amp *= 0.5;\n        p *= 2.0;\n    }\n    return sum;\n}\n\nfloat sdBox(in vec3 p, in vec3 b)\n{\n    vec3 d = abs(p) - b;\n    return min(max(d.x, max(d.y, d.z)), 0.0) + length(max(d, 0.0));\n}\n\nfloat udRoundBox(in vec3 p, in vec3 b, float r)\n{\n    return length(max(abs(p) - b, 0.0)) - r;\n}\n\nfloat sdSphere(in vec3 p, float s)\n{\n    return length(p) - s;\n}\n\nfloat sdCapsule(in vec3 p, in vec3 a, in vec3 b, float r)\n{\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n    return length(pa - ba * h) - r;\n}\n\nfloat sdCappedCylinder(in vec3 p, in vec2 h )\n{\n    vec2 d = abs(vec2(length(p.xz), p.y)) - h;\n    return min(max(d.x, d.y), 0.0) + length(max(d, 0.0));\n}\n\nvec3 rotateY(in vec3 p, float an)\n{\n    float c = cos(an);\n    float s = sin(an);\n    return vec3(c * p.x + s * p.z, p.y, -s * p.x + c * p.z);\n}\n\nvec3 rotateZ(in vec3 p, float an)\n{\n    float c = cos(an);\n    float s = sin(an);\n    return vec3(c * p.x - s * p.y, s * p.x + c * p.y, p.z);\n}\n\n/*\nvec2 mapChair(in vec3 p)\n{\n    float d1 = sdBox(p + vec3(3.0, -2.0, 4.5), vec3(1.8, 3.1, 0.5));\n    float d2 = max(-d1, sdBox(p + vec3(3.0, -2.5, 4.5), vec3(2.1, 2.9, 0.2)));\n    float d3 = sdBox(p + vec3(3.0, -2.0, 8.5), vec3(1.8, 3.1, 0.5));\n    float d4 = max(-d3, sdBox(p + vec3(3.0, -2.5, 8.5), vec3(2.1, 2.9, 0.2)));\n    float d5 = sdBox(p + vec3(1.05, -2.0, 6.5), vec3(0.5, 4.3, 1.8));\n    float d6 = max(-d5, sdBox(p + vec3(1.05, -2.5, 6.5), vec3(0.2, 4.1, 2.2)));\n    vec3 size = vec3(2.0, 0.075, 0.075);\n    float d7 = sdBox(p + vec3(3.0, -4.35, 4.5), size);\n    float d8 = sdBox(p + vec3(3.0, -4.35, 8.5), size);\n    float d9 = sdBox(p + vec3(1.05, -4.35, 6.5), vec3(0.075, 0.075, 2.0));\n    float d10 = sdBox(p + vec3(1.05, -5.35, 6.5), vec3(0.075, 0.075, 2.0));\n    size = vec3(0.075, 1.0, 0.075);\n    d1 = sdBox(p + vec3(2.35, -4.25, 4.5), size);\n    d3 = sdBox(p + vec3(3.65, -4.25, 4.5), size);\n    d5 = sdBox(p + vec3(2.35, -4.25, 8.5), size);\n    float d11 = sdBox(p + vec3(3.65, -4.25, 8.5), size);\n    size = vec3(0.075, 1.75, 0.075);\n    float d12 = sdBox(p + vec3(1.05, -4.75, 5.85), size);\n    float d13 = sdBox(p + vec3(1.05, -4.75, 7.25), size);\n    vec2 res = vec2(ID_CHAIR_0, min(d13, min(d12, min(d11, min(d5, min(d3, min(d1, min(d10, min(d9, min(d8, min(d7, min(d6, min(d4, min(d2, sdBox(p + vec3(3.0, -3.25, 6.5), vec3(2.1, 0.2, 2.2))))))))))))))));\n    vec2 obj = vec2(ID_CHAIR_1, udRoundBox(p + vec3(3.05, -3.26, 6.5), vec3(1.8, 0.2, 1.8), 0.025));\n    if (obj.y < res.y) res = obj;\n    return res;\n}\n*/\nvec2 map(in vec3 p)\n{\n    // hit object ID is stored in res.x, distance to object is in res.y\n\n    float rot90 = 6.2831 / 4.0;\n\n    // walls mapping\n    vec2 res = vec2(ID_FLOOR, sdBox(p + vec3(0.0, 1.0, 0.0), vec3(15.0, 1.0, 17.0)));\n    //vec2 obj = vec2(ID_CEILING, sdBox(p + vec3(0.0, -17.0, 0.0), vec3(15.0, 0.0, 17.0)));\n    //if (obj.y < res.y) res = obj;\n    //obj = vec2(ID_WALL_BACK, sdBox(p + vec3(-10.5, 0.0, 0.0), vec3(0.5, 17.0, 17.0)));\n    //if (obj.y < res.y) res = obj;\n    vec2 obj = vec2(ID_WALL_FRONT, sdBox(p + vec3(15.0, 0.0, 0.0), vec3(0.0, 17.0, 17.0)));\n    if (obj.y < res.y) res = obj;\n    obj = vec2(ID_WALL_LEFT, sdBox(p + vec3(0.0, 0.0, 15.0), vec3(15.0, 17.0, 0.0)));\n    if (obj.y < res.y) res = obj;\n    //obj = vec2(ID_WALL_RIGHT, sdBox(p + vec3(0.0, 0.0, -17.0), vec3(15.0, 17.0, 0.0)));\n    //if (obj.y < res.y) res = obj;\n\n    // baseboards mapping\n    vec3 size = vec3(17.0, 0.65, 0.065);\n    obj = vec2(ID_BASEBOARD_YZ, sdBox(p + vec3(0.0, 0.0, 15.0), size));\n    if (obj.y < res.y) res = obj;\n    //obj = vec2(ID_BASEBOARD_YZ, sdBox(p + vec3(0.0, 0.0, -17.0), size));\n    //if (obj.y < res.y) res = obj;\n    obj = vec2(ID_BASEBOARD_XY, sdBox(rotateY(p + vec3(15.0, 0.0, 0.0), rot90), size));\n    if (obj.y < res.y) res = obj;\n    //obj = vec2(ID_BASEBOARD_XY, sdBox(rotateY(p + vec3(-10.0, 0.0, 0.0), rot90), size));\n    //if (obj.y < res.y) res = obj;\n\n    // carpet mapping\n    if (res.x == ID_FLOOR) {\n        obj = vec2(ID_CARPET_B, udRoundBox(rotateY(p + vec3(2.0, 0.0, -2.0), -2.0), vec3(8.0, 0.05, 7.0), 0.15));\n        if (obj.y < res.y) res = obj;\n        obj = vec2(ID_CARPET, sdBox(rotateY(p + vec3(2.0 - 0.075, 0.0, -2.0 + 0.025), -2.0), vec3(7.925, 0.25, 6.925)));\n        if (obj.y < res.y) res = obj;\n    }\n\n    // tv mapping\n    vec3 sizeTV = vec3(3.0, 9.0, 3.0);\n    float d1 = sdBox(p + vec3(15.0, 0.0, 6.0), vec3(7.0, 13.0, 2.5));\n    float d2 = udRoundBox(p + vec3(15.0, 0.0, 6.0), vec3(5.0, 1.2, 1.5), 0.5);\n    float d3 = udRoundBox(p + vec3(12.0, -3.5, 6.0), vec3(1.0, 0.5, 1.5), 0.5);\n    size = vec3(4.0, 1.0, 0.08);\n    float d4 = sdBox(p + vec3(15.0, -3.5, 6.0), size);\n    float d5 = sdBox(p + vec3(15.0, -3.5, 5.6), size);\n    float d6 = sdBox(p + vec3(15.0, -3.5, 6.4), size);\n    float d7 = udRoundBox(p + vec3(12.0, -7.25, 6.0), vec3(1.0, 0.61, 1.2), 1.0);\n    obj = vec2(ID_TV_0, max(-d7, min(d6, min(d5, min(d4, max(-d3, max(-d2, max(d1, udRoundBox(p + vec3(15.0, 0.0, 6.0), sizeTV, 1.0)))))))));\n    if (obj.y < res.y) res = obj;\n    d1 = sdBox(p + vec3(15.18, 0.25, 3.5), vec3(7.0, 13.0, 0.2));\n    size = vec3(0.1, 1.0, 1.0);\n    d2 = sdBox(p + vec3(12.8, -3.5, 4.0), size);\n    d3 = sdBox(p + vec3(13.2, -3.5, 4.0), size);\n    d4 = max(-d3, max(-d2, max(d1, udRoundBox(p + vec3(15.18, 0.25, 3.5), sizeTV, 1.0))));\n    d5 = sdBox(p + vec3(15.18, 0.25, 8.5), vec3(7.0, 13.0, 0.2));\n    //d6 = sdBox(p + vec3(12.8, -3.5, 8.0), size);\n    //d7 = sdBox(p + vec3(13.2, -3.5, 8.0), size);\n    //obj = vec2(ID_TV_1, min(d4, max(-d7, max(-d6, max(d5, udRoundBox(p + vec3(15.18, 0.25, 8.5), sizeTV, 1.0))))));\n    obj = vec2(ID_TV_1, min(d4, max(d5, udRoundBox(p + vec3(15.18, 0.25, 8.5), sizeTV, 1.0))));\n    if (obj.y < res.y) res = obj;\n    d1 = sdBox(p + vec3(8.25, -3.5, 6.0), sizeTV);\n    obj = vec2(ID_TV_2, max(-d1, udRoundBox(p + vec3(12.0, -3.5, 6.0), vec3(1.0, 0.5, 1.5), 0.5)));\n    if (obj.y < res.y) res = obj;\n    d1 = sdBox(p + vec3(7.85, -7.25, 6.0), sizeTV);\n    d2 = udRoundBox(p + vec3(12.0, -7.25, 6.0), vec3(1.0, 0.6, 1.175), 1.0);\n    obj = vec2(ID_TV_3, max(-d2, max(-d1, udRoundBox(p + vec3(12.0, -7.25, 6.0), vec3(1.0, 0.7, 1.25), 1.0))));\n    if (obj.y < res.y) res = obj;\n    obj = vec2(ID_TV_4, udRoundBox(p + vec3(12.75, -7.25, 6.0), vec3(1.0, 1.05, 1.75), 0.5));\n    if (obj.y < res.y) res = obj;\n    d1 = sdCappedCylinder(rotateZ(p + vec3(11.25, -5.0, 6.25), rot90), vec2(0.12, 0.425));\n    obj = vec2(ID_TV_5, min(d1, sdCappedCylinder(rotateZ(p + vec3(11.25, -5.0, 5.75), rot90), vec2(0.12, 0.325))));\n    if (obj.y < res.y) res = obj;\n    vec2 sizePot = vec2(0.3, 0.4);\n    d1 = sdCappedCylinder(rotateZ(p + vec3(11.25, -5.0, 4.0), rot90), sizePot);\n    d2 = sdCappedCylinder(rotateZ(p + vec3(11.25, -5.0, 8.0), rot90), sizePot);\n    d3 = sdBox(p + vec3(10.425, -5.0, 4.0), vec3(0.25));\n    d4 = sdSphere(p + vec3(10.84, -5.0, 8.0), 0.25);\n    d5 = sdBox(p + vec3(10.425, -5.0, 8.0), vec3(0.25));  \n    d6 = sdCappedCylinder(rotateZ(p + vec3(10.675, -5.0, 4.0), rot90), vec2(0.175, 0.01));\n    d7 = sdCappedCylinder(rotateZ(p + vec3(10.675, -5.0, 8.0), rot90), vec2(0.175, 0.01));\n    float rot = 6.2831 / 3.428;\n    float d8 = sdBox(rotateZ(p + vec3(10.8, -5.2, 4.0), rot), vec3(0.08, 0.1, 0.04));\n    float d9 = sdBox(rotateZ(p + vec3(10.8, -5.2, 8.0), rot), vec3(0.08, 0.1, 0.04));\n    obj = vec2(ID_TV_6, min(d9, min(d8, min(d7, min(d6, max(-d5, min(d4, max(-d3, min(d2, min(d1, sdSphere(p + vec3(10.84, -5.0, 4.0), 0.25)))))))))));\n    if (obj.y < res.y) res = obj;\n    sizePot = vec2(0.29, 0.01);\n    d1 = sdCappedCylinder(rotateZ(p + vec3(10.84, -5.0, 4.0), rot90), sizePot);\n    d2 = sdCappedCylinder(rotateZ(p + vec3(10.675, -5.0, 4.0), rot90), vec2(0.2, 0.01));\n    d3 = sdCappedCylinder(rotateZ(p + vec3(10.675, -5.0, 8.0), rot90), vec2(0.2, 0.01));\n    obj = vec2(ID_TV_7, min(d3, min(d2, min(d1, sdCappedCylinder(rotateZ(p + vec3(10.84, -5.0, 8.0), rot90), sizePot)))));\n    if (obj.y < res.y) res = obj;\n\n    // chair mapping\n    d1 = sdBox(p + vec3(3.0, -2.0, 4.5), vec3(1.8, 3.1, 0.5));\n    d2 = max(-d1, sdBox(p + vec3(3.0, -2.5, 4.5), vec3(2.1, 2.9, 0.2)));\n    d3 = sdBox(p + vec3(3.0, -2.0, 8.5), vec3(1.8, 3.1, 0.5));\n    d4 = max(-d3, sdBox(p + vec3(3.0, -2.5, 8.5), vec3(2.1, 2.9, 0.2)));\n    d5 = sdBox(p + vec3(1.05, -2.0, 6.5), vec3(0.5, 4.3, 1.8));\n    d6 = max(-d5, sdBox(p + vec3(1.05, -2.5, 6.5), vec3(0.2, 4.1, 2.2)));\n    size = vec3(2.0, 0.075, 0.075);\n    d7 = sdBox(p + vec3(3.0, -4.35, 4.5), size);\n    d8 = sdBox(p + vec3(3.0, -4.35, 8.5), size);\n    d9 = sdBox(p + vec3(1.05, -4.35, 6.5), vec3(0.075, 0.075, 2.0));\n    float d10 = sdBox(p + vec3(1.05, -5.35, 6.5), vec3(0.075, 0.075, 2.0));\n    size = vec3(0.075, 1.0, 0.075);\n    d1 = sdBox(p + vec3(2.35, -4.25, 4.5), size);\n    d3 = sdBox(p + vec3(3.65, -4.25, 4.5), size);\n    d5 = sdBox(p + vec3(2.35, -4.25, 8.5), size);\n    float d11 = sdBox(p + vec3(3.65, -4.25, 8.5), size);\n    size = vec3(0.075, 1.75, 0.075);\n    float d12 = sdBox(p + vec3(1.05, -4.75, 5.85), size);\n    //float d13 = sdBox(p + vec3(1.05, -4.75, 7.25), size);\n    //obj = vec2(ID_CHAIR_0, min(d13, min(d12, min(d11, min(d5, min(d3, min(d1, min(d10, min(d9, min(d8, min(d7, min(d6, min(d4, min(d2, sdBox(p + vec3(3.0, -3.25, 6.5), vec3(2.1, 0.2, 2.2))))))))))))))));\n    obj = vec2(ID_CHAIR_0, min(d9, min(d8, min(d7, min(d6, min(d4, min(d2, sdBox(p + vec3(3.0, -3.25, 6.5), vec3(2.1, 0.2, 2.2)))))))));\n    if (obj.y < res.y) res = obj;\n    obj = vec2(ID_CHAIR_0, min(d12, min(d11, min(d5, min(d3, min(d1, min(d10, sdBox(p + vec3(1.05, -4.75, 7.25), size))))))));\n    if (obj.y < res.y) res = obj;   \n    obj = vec2(ID_CHAIR_1, udRoundBox(p + vec3(3.05, -3.26, 6.5), vec3(1.8, 0.2, 1.8), 0.025));\n    if (obj.y < res.y) res = obj;\n    //obj = mapChair(p);\n    //if (obj.y * 0.95 < res.y) res = obj;\n\n    // floor bumps\n    if (res.x == ID_FLOOR)\n    {\n        if (p.x < 9.85 && p.x > -14.85 && p.z < 16.85 && p.z > -14.85)\n            res.y += 0.1 * texture(iChannel0, 0.1875 * p.xz).x;\n    }\n\n    return res;\n}\n\nvec2 raymarchScene(in vec3 ro, in vec3 rd, in float tmin, in float tmax)\n{\n    vec3 res = vec3(ID_NONE);\n    float t = tmin;\n    for (int i = 0; i < 90; i++)\n    {\n        vec3 p = ro + rd * t;\n        res = vec3(map(p), t);\n        float d = res.y;\n        if (d < (0.0001 * t) || t > tmax)\n            break;\n        t += 0.75 * d;\n    }\n    return res.xz;\n}\n\nvec3 getNormal(in vec3 p)\n{\n    vec2 eps = vec2(0.0001, 0.0);\n    return normalize(vec3(map(p + eps.xyy).y - map(p - eps.xyy).y,\n                          map(p + eps.yxy).y - map(p - eps.yxy).y,\n                          map(p + eps.yyx).y - map(p - eps.yyx).y));\n}\n\nvec3 getBump(in vec3 p, float e) {\n    vec2 eps = vec2(e, 0.0);\n    return normalize(vec3(fBm3d(p + eps.xyy) - fBm3d(p - eps.xyy),\n                          fBm3d(p + eps.yxy) - fBm3d(p - eps.yxy),\n                          fBm3d(p + eps.yyx) - fBm3d(p - eps.yyx)));\n}\n\nfloat raymarchAO(in vec3 ro, in vec3 rd, float tmin)\n{\n    float ao = 0.0;\n    for (float i = 0.0; i < 5.0; i++)\n    {\n        float t = tmin + pow(i / 5.0, 2.0);\n        vec3 p = ro + rd * t;\n        float d = map(p).y;\n        ao += max(0.0, t - 0.5 * d - 0.05);\n    }\n    return 1.0 - 0.15 * ao;\n}\n\nbool toggleKey(int key)\n{\n\treturn texture(iChannel3, vec2((float(key) + 0.5) / 256.0, 0.75)).x > 0.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (-iResolution.xy + 2.0 * fragCoord.xy) / iResolution.y;\n\n    vec3 eye = vec3(4.0, 6.25, -6.0);\n    if (!toggleKey(KEY_W)) {\n        eye = vec3(0.0 + sin(iTime * 0.25) * 0.5, 8.0, 1.0 + cos(iTime * 0.05) * 0.5);\n    }\n    //vec2 rot = 6.2831 * (vec2(-0.625, 0.035) + vec2(1.0, 0.15) * (iMouse.xy - iResolution.xy * 0.25) / iResolution.x);\n    vec2 rot = 6.2831 * vec2(0.125, 0.035);\n    eye.yz = cos(rot.y) * eye.yz + sin(rot.y) * eye.zy * vec2(-1.0, 1.0);\n    eye.xz = cos(rot.x) * eye.xz + sin(rot.x) * eye.zx * vec2(1.0, -1.0);\n\n    vec3 ro = eye;\n    vec3 ta = vec3(0.0, 7.0, 0.0);\n    if (toggleKey(KEY_W)) {\n        ta = vec3(-1.0, 7.35, -6.0);\n    }\n\n    vec3 cw = normalize(ta - ro);\n    vec3 cu = normalize(cross(vec3(0.0, 1.0, 0.0), cw));\n    vec3 cv = normalize(cross(cw, cu));\n    mat3 cam = mat3(cu, cv, cw);\n\n    float l = 2.5;\n    if (!toggleKey(KEY_W)) {\n        l = 2.0 + sin(iTime * 0.1) * 0.35;\n    }\n    \n    vec3 rd = cam * normalize(vec3(p.xy, l));\n\n    vec3 col = vec3(0.0);\n\n    float tmin = 0.5;\n    float tmax = 25.0;\n    vec2 obj = raymarchScene(ro, rd, tmin, tmax);\n    float id = obj.x;\n    if (id > ID_NONE)\n    {\n        float t = obj.y;\n        vec3 pos = ro + rd * t;\n        vec3 nor = getNormal(pos);\n\n        if (id == ID_FLOOR)\n        {\n            float n = 0.025 * fBm3d(1.5 * pos);\n            col = vec3(0.3, 0.25, 0.2) - n;\n            col = mix(col, texture(iChannel0, 0.1875 * pos.xz).xyz, 0.15);\n            col += 0.1 * mod(floor(0.5 * pos.z + n * 0.5), 2.0) * vec3(0.075);\n            col = mix(col - 0.035, col, smoothstep(0.025, 0.035, mod(pos.z + n, 2.0)));           \n        }\n        /*else if (id == ID_CEILING)\n        {\n            float n = 0.015 * fBm3d(1.5 * pos);\n            col = vec3(0.5, 0.45, 0.35) + 0.04 - n;\n        }*/\n        else if (/*id == ID_WALL_BACK ||*/ id == ID_WALL_FRONT)\n        {\n            float n = 0.015 * fBm3d(1.5 * pos);\n            col = vec3(0.5, 0.45, 0.35) + n;\n            float s = smoothstep(1.0, 0.0, pos.y - 14.0);\n            col = mix(col + 0.01, mix(col, texture(iChannel0, 0.125 * pos.xz).xyz, 0.05), s);\n            col = mix(col, mix(col - 0.035, col, smoothstep(0.025, 0.06, mod(1.8 * pos.z + n * 2.0, 2.0))), s);\n            if (pos.y > 13.5 && pos.y < 14.5)\n            {\n                col = vec3(0.5, 0.45, 0.35) - 0.04 + n;\n            }\n        }\n        else if (id == ID_WALL_LEFT /*|| id == ID_WALL_RIGHT*/)\n        {\n            float n = 0.015 * fBm3d(1.5 * pos);\n            col = vec3(0.5, 0.45, 0.35) + n;\n            float s = smoothstep(1.0, 0.0, pos.y - 14.0);\n            col = mix(col + 0.01, mix(col, texture(iChannel0, 0.125 * pos.xz).xyz, 0.05), s);\n            col = mix(col, mix(col - 0.035, col, smoothstep(0.025, 0.06, mod(1.8 * pos.x + n * 2.0, 2.0))), s);\n            if (pos.y > 13.5 && pos.y < 14.5)\n            {\n                col = vec3(0.5, 0.45, 0.35) - 0.04 + n;\n            }          \n        }\n        else if (id == ID_BASEBOARD_XY)\n        {\n            float n = 0.075 * fBm3d(1.5 * pos);\n            col = mix(vec3(0.4, 0.35, 0.3), texture(iChannel0, (0.5 * pos.xy) + n).xyz, 0.4);\n        }\n        else if (id == ID_BASEBOARD_YZ)\n        {\n            float n = 0.075 * fBm3d(1.5 * pos);\n            col = mix(vec3(0.4, 0.35, 0.3), texture(iChannel0, (0.5 * pos.zy) + n).xyz, 0.4);\n        }\n        else if (id == ID_CARPET_B)\n        {\n            col = vec3(0.45, 0.4, 0.35);\n            col = mix(col, texture(iChannel0, 0.125 * pos.xz).xyz, 0.2);\n        }        \n        else if (id == ID_CARPET)\n        {\n            float n = 0.5 * fBm3d(0.25 * pos);\n            col = vec3(0.45, 0.4, 0.35) - n * 0.15;\n            nor = normalize(nor - 0.5 * getBump(256.0 * pos, 0.1));\n            col -= 0.05 * mod(floor(0.25 * (-pos.x + pos.z) + n), 2.0);           \n        }\n        else if (id == ID_TV_0)\n        {\n            float n = 0.075 * fBm3d(1.5 * pos);\n            col = vec3(0.2, 0.16, 0.1) - n;\n            col = mix(col, texture(iChannel0, (0.1875 * pos.yz)).xyz, 0.25);\n        }\n        else if (id == ID_TV_1)\n        {\n            float n = 0.075 * fBm3d(1.5 * pos);\n            col = vec3(0.2, 0.16, 0.1) - n;\n            col = mix(col, texture(iChannel0, (0.1875 * pos.yx)).xyz, 0.25);\n        }\n        else if (id == ID_TV_2)\n        {\n            col = vec3(0.0);\n            col = mix(col, 0.25 * texture(iChannel1, pos.yz).xyz, 0.8);\n            col = mix(vec3(0.2), col, smoothstep(0.0, 0.15, mod(8.0 * (pos.z + 0.25), 2.0)));\n        }\n        else if (id == ID_TV_3 || id == ID_TV_5 || id == ID_TV_7)\n        {\n            col = vec3(0.5, 0.4, 0.3);\n        }\n        else if (id == ID_TV_4)\n        {\n            col = texture(iChannel2, vec2(0.22, 0.3) * (pos.zy + vec2(8.25, -5.6))).xyz;\n            col = pow(clamp(col, 0.0, 1.0), vec3(1.8));\n        }\n        else if (id == ID_TV_6)\n        {\n            col = vec3(0.1);\n        }\n        else if (id == ID_CHAIR_0)\n        {\n            float n = 0.05 * fBm3d(1.5 * pos);\n            col = vec3(0.2, 0.16, 0.1) - n;\n            col = mix(col, texture(iChannel0, (0.1875 * pos.yx) + n).xyz, 0.25);\n        }\n        else if (id == ID_CHAIR_1)\n        {\n            float n = 0.15 * fBm3d(1.5 * pos);\n            col = vec3(0.6, 0.5, 0.4) + n;\n            col -= 0.25 * mod(floor(4.0 * (pos.x + pos.z)), 2.0);\n            nor = normalize(nor - 0.05 * getBump(256.0 * pos, 0.1));\n        }\n\n        float occ = clamp(raymarchAO(pos, nor, tmin), 0.0, 1.0);\n        col *= occ;\n\n        // tv light\n        vec3 lightPos = vec3(-17.0, 7.25, -6.0);\n        vec3 lDir = normalize(lightPos - pos);\n        float lDist = length(lightPos - pos);\n        float tvLight = 0.0 + max(0.0, dot(nor, lDir));\n        vec3 lightColor = 1.25 * vec3(0.15, 0.2, 0.25);\n        vec3 speColor = vec3(0.0);\n        \n        if (id != ID_TV_0 && id != ID_TV_1 && id != ID_TV_2 && id != ID_TV_3\n         && id != ID_TV_5 && id != ID_TV_6 && id != ID_TV_7\n         && id != ID_CHAIR_0 && id != ID_CHAIR_1)\n        {       \n            tvLight = smoothstep(0.0, 3.0, pos.x + 11.0);\n        }\n        if ((iChannelTime[2] > 28.25 && iChannelTime[2] < 29.5) ||\n            (iChannelTime[2] > 17.0 && iChannelTime[2] < 17.1) ||\n            (iChannelTime[2] >= 0.0 && iChannelTime[2] < 0.1))\n            tvLight *= 0.5;\n\n        if (id == ID_CHAIR_0 || id == ID_CHAIR_1)\n        {\n            tvLight *= 6.0;\n        }\n        else if (id == ID_TV_3 || id == ID_TV_5 || id == ID_TV_6 || id == ID_TV_7)\n        {\n            vec3 h = normalize(-rd + lDir);\n            float spe = pow(clamp(dot(h, nor), 0.0, 1.0), 16.0);\n            speColor = vec3(4.0 * spe * tvLight);\n        }\n\n        lightColor += tvLight * vec3(0.5) * (10.0 / lDist);\n\n        if (id != ID_TV_4)\n            col *= lightColor + speColor;\n\n        if (!toggleKey(KEY_C)) {\n            col = vec3(dot(col, vec3(0.2126, 0.7152, 0.0722)));\n        }\n        \n    }\n\n    // vignetting\n    vec2 q = fragCoord.xy / iResolution.xy * 2.0 - 1.0;\n    col *= 1.0 - 0.5 * pow(length(q * q * q), 2.0);\n    fragColor = vec4(col, 1.0);\n}","name":"","description":"","type":"image"}]}