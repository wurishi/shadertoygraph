{"ver":"0.1","info":{"id":"MdGcD1","date":"1521801838","viewed":513,"name":"Blades","username":"dr2","description":"All done with magnets :)","likes":4,"published":3,"flags":0,"usePreview":0,"tags":["geometry","movement"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// \"Blades\" by dr2 - 2018\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat PrSphDf (vec3 p, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrTorusDf (vec3 p, float ri, float rc);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2D (vec2 q, float a);\n\nvec3 qHit;\nfloat tCur, dstFar;\nint idObj;\nconst float pi = 3.14159;\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d, t, w;\n  dMin = dstFar;\n  q = p;\n  d = PrSphDf (q, 0.1);\n  DMINQ (4);\n  for (int k = 0; k < 3; k ++) {\n    q = p;\n    if (k == 1) q.xy = Rot2D (q.xy, 0.5 * pi);\n    else if (k == 2) q.yz = Rot2D (q.yz, -0.5 * pi);\n    d = PrTorusDf (q.xzy, 0.04, 2.);\n    DMINQ (4);\n    t = 1.5 * tCur;\n    if (k == 1) t += (2./3.) * pi;\n    else if (k == 2) t += (4./3.) * pi;\n    q.xz = Rot2D (q.xz, t);\n    w = q.x + 0.5 * abs (q.z) + 0.07;\n    d = max (max (PrCylDf (q.xzy, 1.93, 0.03 * (0.1 + 0.9 * min (1., -10. * w))), w),\n       0.2 - length (q.xz + vec2 (1.2, 0.)));\n    DMINQ (k + 1);\n  }\n  return 0.6 * dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 250; j ++) {\n    d = ObjDf (ro + rd * dHit);\n    if (d < 0.0005 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.0001, -0.0001);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nvec2 BlkHit (vec3 ro, vec3 rd)\n{\n  vec3 v, tm, tp, u, qnBlk;\n  vec2 qBlk;\n  float dn, df;\n  if (rd.x == 0.) rd.x = 0.001;\n  if (rd.y == 0.) rd.y = 0.001;\n  if (rd.z == 0.) rd.z = 0.001;\n  v = ro / rd;\n  tp = 32. / abs (rd) - v;\n  tm = - tp - 2. * v;\n  dn = max (max (tm.x, tm.y), tm.z);\n  df = min (min (tp.x, tp.y), tp.z);\n  if (df > 0. && dn < df) {\n    qnBlk = - sign (rd) * step (tm.zxy, tm) * step (tm.yzx, tm);\n    u = (v + dn) * rd;\n    qBlk = vec2 (dot (u.zxy, qnBlk), dot (u.yzx, qnBlk));\n  }\n  return qBlk;\n}\n\nvec3 BgCol (vec3 rd)\n{\n  return vec3 (0.9, 0.9, 1.) * (0.2 + 0.2 * (rd.y + 1.) * (rd.y + 1.));\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 ltPos[4], ltCol[4], ltDir, dfSumC, spSumC, col, vn;\n  vec2 qBlk;\n  float dstObj, dfSum, spSum, at, t;\n  ltPos[0] = 5. * vec3 (1., 1., 1.);\n  ltPos[1] = 5. * vec3 (-1., 1., -1.);\n  ltPos[2] = 5. * vec3 (1., -1., -1.);\n  ltPos[3] = 5. * vec3 (-1., -1., 1.);\n  t = 0.4 * tCur;\n  for (int k = 0; k < 4; k ++) {\n    ltPos[k].xy = Rot2D (ltPos[k].xy, t);\n    ltPos[k].yz = Rot2D (ltPos[k].yz, t);\n    ltPos[k].zx = Rot2D (ltPos[k].zx, t);\n  }\n  ltCol[0] = vec3 (1., 1., 0.3);\n  ltCol[1] = vec3 (1., 0.3, 0.3);\n  ltCol[2] = ltCol[1].zxy;\n  ltCol[3] = ltCol[1].yzx;\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    if (idObj == 1) col = ltCol[0];\n    else if (idObj == 2) col = ltCol[1];\n    else if (idObj == 3) col = ltCol[2];\n    else if (idObj == 4) col = ltCol[3];\n    if (idObj < 4) {\n      qBlk = step (0.1, mod (0.6 * BlkHit (ro, reflect (rd, vn)) + 0.1/2., 1.));\n      col4 = vec4 (col, 0.5) * mix (0.5 * mix (1., 0.7 + 0.3 * qBlk.x * qBlk.y,\n         1. - smoothstep (0.5, 0.7, - dot (rd, vn))), 1., \n         0.5 + 0.5 * SmoothBump (0.3, 0.7, 0.01, mod (4. * length (qHit.xz), 1.)));\n    } else col4 = vec4 (col * (0.9 + 0.1 * SmoothBump (0.25, 0.75, 0.1,\n       mod (128. * atan (qHit.z, qHit.x) / pi, 1.))), 0.5);\n    dfSum = 0.;\n    spSum = 0.;\n    dfSumC = vec3 (0.);\n    spSumC = vec3 (0.);\n    for (int k = 0; k < 4; k ++) {\n      ltDir = normalize (ltPos[k]);\n      at = smoothstep (0.7, 0.8, dot (normalize (ltPos[k] - ro), ltDir));\n      t = at * max (dot (vn, ltDir), 0.);\n      dfSum += t;\n      dfSumC += ltCol[k] * t;\n      t = at * pow (max (dot (normalize (ltDir - rd), vn), 0.), 64.);\n      spSum += t;\n      spSumC += ltCol[k] * t;\n    }\n    col = mix (col4.rgb * (0.05 + 0.7 * dfSum) + 0.1 * spSum,\n       0.05 + 0.5 * dfSumC + 0.1 * spSumC, col4.a);\n  } else {\n    col = BgCol (rd);\n    qBlk = step (0.1, mod (0.5 * BlkHit (ro, rd) + 0.1/2., 1.));\n    col *= 0.95 + 0.05 * qBlk.x * qBlk.y;\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv, uvs, ori, ca, sa;\n  float el, az;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uvs = uv;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  az = 0.1 * pi;\n  el = -0.1 * pi;\n  if (mPtr.z > 0.) {\n    az += 3. * pi * mPtr.x;\n    el += 1.5 * pi * mPtr.y;\n  } else {\n    az += 0.03 * pi * tCur;\n    el += 0.2 * pi * sin (0.04 * pi * tCur);\n  }\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  ro = vuMat * vec3 (0., 0., -8.);\n  rd = vuMat * normalize (vec3 (uv, 3.5));\n  dstFar = 25.;\n  col = ShowScene (ro, rd);\n  uvs *= uvs * uvs;\n  col *= mix (0.8, 1., pow (1. - 0.5 * length (uvs * uvs), 4.));\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrTorusDf (vec3 p, float ri, float rc)\n{\n  return length (vec2 (length (p.xy) - rc, p.z)) - ri;\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n","name":"Image","description":"","type":"image"}]}