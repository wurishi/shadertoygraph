{"ver":"0.1","info":{"id":"wltyWH","date":"1610603052","viewed":224,"name":"voronoi from aoc","username":"wnu","description":"fun usage of art of code's voronoi tutorial","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["voronoi","worley"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926538\n\nvec2 N22(vec2 p){\n    vec3 a = fract(p.xyx*vec3(123.34,234.34,345.65));\n    a += dot(a,a+34.45);\n    return fract(vec2(a.x*a.y,a.y*a.z));\n\n}\n\nvec3 hsl2rgb( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n    return c.z + c.y * (rgb-0.5)*(1.0-abs(2.0*c.z-1.0));\n}\n\nfloat aafract(float x) {    // --- antialiased fract\n    float v = fract(x),\n          w = fwidth(x);    // NB: x must not be discontinuous or factor discont out\n    return v < 1.-w ? v/(1.-w) : (1.-v)/w; // replace right step by down slope (-> chainsaw is continuous).\n            // shortened slope : added downslope near v=1 \n} \n\n//aafract from https://www.shadertoy.com/view/wtjGzt\n\nfloat random3 (in vec3 _st) {\n    return fract(sin(dot(_st,\n                         vec3(12.9898,78.233,123.24647)))*\n      43758.5453123);\n}\n\nfloat noise3 (in vec3 _st) {\n    vec3 i = floor(_st);\n    vec3 fr = fract(_st);\n\n    // Four corners in 2D of a tile\n    float a = random3(i);\n    float b = random3(i + vec3(1.0, 0.0, 0.0));\n    float c = random3(i + vec3(0.0, 1.0, 0.0));\n    float d = random3(i + vec3(1.0, 1.0, 0.0));\n    \n    float e = random3(i + vec3(0.0, 0.0, 1.0));\n    float f = random3(i + vec3(1.0, 0.0, 1.0));\n    float g = random3(i + vec3(0.0, 1.0, 1.0));\n    float h = random3(i + vec3(1.0, 1.0, 1.0));\n\n    vec3 u = fr * fr * (3.0 - 2.0 * fr);\n    \n    float bf = mix(a,b,u.x);\n    float bb = mix(c,d,u.x);\n    \n    float bot = mix(bf,bb,u.y);\n    \n    float tf = mix(e,f,u.x);\n    float tb = mix(g,h,u.x);\n    \n    float top = mix(tf,tb,u.y); \n\n    return mix(bot,top,u.z);\n}\n\n#define NUM_OCTAVES 4\n\nfloat fbm3 ( in vec3 _st) {\n    float v = 0.0;\n    float a = 0.5;\n    vec3 shift = vec3(100.0);\n    float offset = 0.;\n    for (int i = 0; i < NUM_OCTAVES; ++i) {\n        //v += a * sin((_st.y + _st.x+ _st.y)*10.)*1.5;\n        offset += a*2.5/1.5;\n        v += a * noise3(_st)*2.5;\n        _st = _st * 2. + shift;\n        a *= 0.5;\n    }\n    return v/offset;\n}\n\nfloat voronoi(vec2 uv){\n    uv*=3.;\n    float minDist = 100.;\n    float t = iTime;\n        \n    vec2 gv = fract(uv)-.5;\n    vec2 id = floor(uv);\n    for(float y=-1.;y<=1.;y++){\n        for(float x = -1.;x<=1.;x++){\n            vec2 offs = vec2(x,y);\n            vec2 n = N22(id + offs);\n            vec2 p = offs + sin(n*t)*.5;\n\n            float d = length(gv-p);\n\n            if(d<minDist){\n                minDist = d;\n            }\n\n        }\n    }\n    \n    return minDist;\n\n}\n\nfloat smoosh(float a){\n    float b = atanh((a-0.5)*2.)/10.+0.5;\n    return b;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 R = iResolution.xy;\n    vec2 uv = (2.*fragCoord-R.xy)/R.y;\n    uv = (2.*fragCoord-R.xy)/512.;\n\n    float m = 0.;\n    float t =iTime;\n \n    float minDist = 100.01;\n    vec3 oCol = vec3(1.);\n    if(false){\n    for(float i = 0.;i<50.;i++){\n        vec2 n = N22(vec2(i+1.));\n        vec2 n2 = N22(vec2(i*40.));\n        vec2 p = sin(n*t);\n        p.x *= R.x/R.y;\n         \n        float d = length(uv-p);\n        m += smoothstep(.02,0.01,d);\n        \n        if(d<minDist){\n            minDist = d;\n            oCol = vec3(n.x,n2.x,n2.y);\n        }\n         \n    }\n    }else{\n        uv*=1.6;\n        \n        vec2 gv = fract(uv)-.5;\n        vec2 id = floor(uv);\n        for(float y=-1.;y<=1.;y++){\n            for(float x = -1.;x<=1.;x++){\n                vec2 offs = vec2(x,y);\n                vec2 n = N22(id + offs);\n                vec2 n2 = N22((id + offs)*40.);\n                vec2 p = offs + sin(n*t+n2)*.5;\n                \n                float d = length(gv-p) + voronoi(vec2(uv.xy*1.+n.xy))*2.;\n                \n                if(d<minDist){\n                    minDist = d;\n                    oCol = vec3(n.x,n2.x,n2.y)*0.8+0.2; //for some reason sometimes n and n2 are all 0 making oCol 0...;\n                }\n                \n            }\n        }\n    }\n    \n    //float val = minDist;\n    float val = aafract(minDist*4.);\n    float v2 = floor(minDist*4.)/4.;\n    \n    vec3 hslCol = hsl2rgb(vec3(abs(sin(v2*PI+iTime/5.))/3.+iTime/10.,0.32,0.5));\n \n    vec3 col = vec3(val);\n    //col *= oCol;\n    //col *= vec3(0.5,0.8,0.7)*v2; //could feed v2 into a hsl function lots of fun posibilities\n    col *= hslCol;\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}