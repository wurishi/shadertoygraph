{"ver":"0.1","info":{"id":"lsBfD3","date":"1502440124","viewed":132,"name":"Technicolor Flow","username":"trevolution","description":"A multicolor pattern that flows and pulses with the sound","likes":3,"published":1,"flags":64,"usePreview":0,"tags":["2d","audio"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"MsXSD2","filepath":"https://soundcloud.com/com-truise/ternary","previewfilepath":"https://soundcloud.com/com-truise/ternary","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265358979323846\n\nvec4 hsv2rgb(float c) {\n  vec4 p = abs( fract( c + vec4(3,2,1,0)/3. ) * 6. - 3.);\n  return  clamp(p - 1., 0., 1.);\n}\n\nvec2 rotate2D(vec2 _st, float _angle) {\n\t_st -= 0.5;\n    _st = mat2(cos(_angle), -sin(_angle),\n               sin(_angle), cos(_angle)) * _st;\n    _st += 0.5;\n    return _st;\n}\n\nvec2 flip(vec2 _st) {\n    //_st -= 5.0;\n\t_st = mat2(-1.0,1.0, _st.x, _st.y) * _st;\n    \n    return _st;\n}\n\nvec2 tile(vec2 _st, float _zoom) {\n\t_st *= _zoom;\n    return fract(_st);\n}\n\nvec2 rotateTilePattern(vec2 _st) {\n\t// scale coordinate system to 2x2\n    _st *= 2.0;\n    \n    // give each cell an index number according to its position\n    float index = 0.0;\n    index += step(1., mod(_st.x, 2.0));\n    index += step(1., mod(_st.y, 2.0)) * 2.0;\n    \n    // make each cell between 0.0 and 1.0\n    _st = fract(_st);\n    \n    // rotate each cell according to the index\n    if (index == 0.0) {\n    \t_st = rotate2D(_st, PI);\n    }\n    if (index == 1.0) {\n    \t// rotate cell 1 by 90 degrees\n        _st = rotate2D(_st, -PI*.5);\n    } else if (index == 2.0) {\n    \t// rotate cell 2 by -90 degrees\n        _st = rotate2D(_st, PI*.5);\n    } else if (index == 3.0) {\n    \t// rotate cell 3 by 180 degrees\n        _st = rotate2D(_st, PI*.005);\n    }\n    \n    return _st;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    uv = tile(uv,1.0);\n    uv = rotateTilePattern(uv);\n    \n    uv *= sin(uv.x+uv.y*iTime*2.);\n    \n    vec4 sound = texture(iChannel0,vec2(uv.y*uv.x,0.125));\n    \n    float getWeird = sin(sound.x*cos(26.0));\n    float getMoreWeird = cos(sound.y*sin(13.0));\n    \n    float hue = (iTime * 0.01 - getWeird);\n    \n\tfragColor = .6 - getMoreWeird * hsv2rgb(hue);\n}","name":"Image","description":"","type":"image"}]}