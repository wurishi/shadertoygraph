{"ver":"0.1","info":{"id":"43XBWn","date":"1728222500","viewed":12,"name":"tatami tiling spiral","username":"jt","description":"A square tiled with tatamis with ids 0,1,2,3... spiralling outwards: dominos / \"dimers\" in a spiral around a central monomino / \"monomer\".\n","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["spiral","square","tiling","ulam","tatami","domino","dimer","2x1","monomer","monomino","1x1","1x2"],"hasliked":0,"parentid":"clGcDd","parentname":"simple tatami square"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/43XBWn tatami tiling spiral, 2024 by jt\n// related pattern: https://www.shadertoy.com/view/clGcDd simple tatami square\n\n// A square tiled with tatamis with ids 0,1,2,3... spiralling outwards:\n// dominos / \"dimers\" in a spiral around a central monomino / \"monomer\"\n\n// The underlying spiral is basically a https://en.wikipedia.org/wiki/Ulam_spiral\n// with index right-shifted by one to join adjacent monominos to dominos.\n// (Depending on an additional offset spiral starts with monomino or domino.)\n\n// If I understand correctly the combination of 1x1 and 2x1 (\"monomer\"/\"monomino\"? and \"dimer\"/\"domino\") is (sometimes?) called Tatami-tiling.\n// Some articles about tatami-tilings:\n// https://www.kurims.kyoto-u.ac.jp/~kyodo/kokyuroku/contents/pdf/1691-01.pdf\n// https://arxiv.org/pdf/1103.3309\n// https://www.emis.de/journals/EJC/Volume_18/PDF/v18i1p109.pdf\n// https://webhome.cs.uvic.ca/~ruskey/Publications/Tatami/TatamiDraftSubmitted.pdf\n// https://mathoverflow.net/questions/103165/monomer-dimer-tatami-tilings-need-better-relationships-with-other-math-summary\n// Possibly also in: Knuth, The Art of Computer Programming, Volume 4A Combinatorial Algorithms, Part 1\n// (and in general some tiling articles can be found in https://www.combinatorics.org/ )\n\n// tags: spiral, square, tiling, ulam, tatami, domino, dimer, 2x1, monomer, monomino, 1x1, 1x2\n\n// The MIT License\n// Copyright (c) 2024 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvec3 hash32(vec2 p) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n    vec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\n\nint quad_spiral(ivec2 t)\n{\n    t++; // center tatami square\n    int n = 2*max(abs(t.x),abs(t.y)); // diameter\n    //return n*n + ((abs(t.x) > abs(t.y) ? t.x < 0 : t.y < 0)?+1:-1)*(n + t.x - t.y); // square spiral id\n    //return (n*n + ((abs(t.x) > abs(t.y) ? t.x < 0 : t.y < 0)?+1:-1)*(n + t.x - t.y)+0)>>1; // simple tatami square id (pre-increment coordinates to center)\n    return (n*n + ((abs(t.x) > abs(t.y) ? t.x < 0 : t.y < 0)?+1:-1)*(n + t.x - t.y)+1)>>1; // tatami spiral id (with central 1x1 tile)\n}\n\nbool edge(vec2 I)\n{\n    float e = 0.1;\n    int a = quad_spiral(ivec2(floor(I-e)));\n    int b = quad_spiral(ivec2(floor(I+e)));\n    return a != b;\n}\n\nvoid mainImage(out vec4 o, in vec2 I)\n{\n    vec2 R = iResolution.xy;\n    I = (I + I - R) / R.y;\n    vec3 c = vec3(0);\n    if(all(lessThan(abs(I), vec2(1))))\n    {\n        I *= 10.0;\n        ivec2 t = ivec2(floor(I));\n        int id = quad_spiral(t);\n        c = hash32(vec2(id+1)*123.456);\n        //c = vec3(id)/220.0;\n        if(edge(I)) c *= 0.0;\n    }\n\n    o = vec4(c, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}