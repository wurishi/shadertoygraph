{"ver":"0.1","info":{"id":"4cGGRz","date":"1712303734","viewed":111,"name":"Platonic Circle Packing bicolor","username":"DrHow","description":"Circle packings from platonic solids","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","circlepacking"],"hasliked":0,"parentid":"7dcXWs","parentname":"Platonic circle packings"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI               3.141592653\n\nconst float a = 3.;\nconst float b = 5.;\nvec3 bcolor = vec3(5., 39., 175.)/256.;\nvec3 fcolor = vec3(256., 256., 256.)/256.;\nfloat tmTotal;\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    float d1 = cos(PI/a);\n    float d2 = cos(PI/b);\n    vec2 z = 2.*fragCoord/iResolution.xy*d1 + vec2(-d1, 0.);\n    z.x *= iResolution.x / iResolution.y;\n    z = (z-vec2(0., d1)) * sqrt(5.) + vec2(0., d1);\n    float scale = 1.;\n    vec3 col;\n    if (abs(length(z) - 1.) < .01 || abs(z.x) < .01 || abs(z.x+d2)<.01 || abs(z.y-d1)<.01)\n        col=vec3(1., 0., 0.);\n    int iter = int(mod(iTime / 2., 10.));\n    //int iter = 50;\n    for (int i = 0; i < iter; i++) {\n        if (z.x > 0.) z = vec2(-z.x, z.y);\n        if (z.x + d2 < 0.) z = vec2(-2.*d2-z.x, z.y);\n        if (z.y > d1) z = vec2(z.x, 2.*d1-z.y);\n        float q = dot(z,z);\n        if (q < 1.) { z /= q; scale /= q;}\n    }\n    float bright = 1. - exp(-iResolution.y*abs(z.y)/scale);\n    col += bcolor*(bright) + fcolor*(1.0-bright);\n    fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"}]}