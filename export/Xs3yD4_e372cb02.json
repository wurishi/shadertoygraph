{"ver":"0.1","info":{"id":"Xs3yD4","date":"1518795650","viewed":277,"name":"Schwarzschild Radius","username":"metabog","description":"Use mouse to change mass/radius.\n\nTried to plug in some of the maths for surface gravity, schwarzhild radius/event horizon, etc and see what comes out. Surface gravity decreases at the horizon as the mass increases, which is kind of weird. ","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["blackhole","gravity"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//newtonian simulation of gravitational force + schwarzschild radius/black hole event horizon formation\n//Click/drag mouse in 2d to set mass vs radius and see the schwarzschild radius (black zone) vs\n//the body (white zone)\n//When the schwarzschild radius exceeds the radius of the body (i.e. all the mass is inside) \n//a black hole is formed.\n\n//starfield code from https://www.shadertoy.com/view/Md2SR3\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// Return random noise in the range [0.0, 1.0], as a function of x.\nfloat Noise2d( in vec2 x )\n{\n    float xhash = cos( x.x * 37.0 );\n    float yhash = cos( x.y * 57.0 );\n    return fract( 415.92653 * ( xhash + yhash ) );\n}\n\n// Convert Noise2d() into a \"star field\" by stomping everthing below fThreshhold to zero.\nfloat NoisyStarField( in vec2 vSamplePos, float fThreshhold )\n{\n    float StarVal = Noise2d( vSamplePos );\n    if ( StarVal >= fThreshhold )\n        StarVal = pow( (StarVal - fThreshhold)/(1.0 - fThreshhold), 6.0 );\n    else\n        StarVal = 0.0;\n    return StarVal;\n}\n\n// Stabilize NoisyStarField() by only sampling at integer values.\nfloat StableStarField( in vec2 vSamplePos, float fThreshhold )\n{\n    // Linear interpolation between four samples.\n    // Note: This approach has some visual artifacts.\n    // There must be a better way to \"anti alias\" the star field.\n    float fractX = fract( vSamplePos.x );\n    float fractY = fract( vSamplePos.y );\n    vec2 floorSample = floor( vSamplePos );    \n    float v1 = NoisyStarField( floorSample, fThreshhold );\n    float v2 = NoisyStarField( floorSample + vec2( 0.0, 1.0 ), fThreshhold );\n    float v3 = NoisyStarField( floorSample + vec2( 1.0, 0.0 ), fThreshhold );\n    float v4 = NoisyStarField( floorSample + vec2( 1.0, 1.0 ), fThreshhold );\n\n    float StarVal =   v1 * ( 1.0 - fractX ) * ( 1.0 - fractY )\n        \t\t\t+ v2 * ( 1.0 - fractX ) * fractY\n        \t\t\t+ v3 * fractX * ( 1.0 - fractY )\n        \t\t\t+ v4 * fractX * fractY;\n\treturn StarVal;\n}\n\n\nconst vec2 centre = vec2(0.0,0.0);\nconst float G = 0.00001;\nfloat gravscale = 0.1;\nconst float schwarzschild_squisher = 0.001;\nbool circle(vec2 read, vec2 c, float rad)\n{\n    return length(read-c)<rad;\n}\n\nfloat computegrav(vec2 coord, vec2 centre, float radius, float mass)\n{\n    float grav = 0.0;\n    \n    if(abs(coord.x-centre.x)>radius)\n    {\n    \tfloat invsq = mass/pow((coord.x-centre.x),2.0f);\n        grav = invsq;\n    }\n    else\n    {\n        float invsq = (mass/pow(radius,3.0))*abs(coord.x-centre.x);\n        grav = invsq;\n    }\n    \n    return G*grav;\n}\n\nfloat computegrav2d(vec2 coord, vec2 centre, float radius, float mass)\n{\n    float grav = 0.0;\n    \n    if(length(coord-centre)>radius)\n    {\n    \tfloat invsq = mass/pow(length(coord-centre),2.0f);\n        grav = invsq;\n    }\n    else\n    {\n        float invsq = (mass/pow(radius,3.0))*length(coord-centre);\n        grav = invsq;\n    }\n    \n    return G*grav;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec3 vColor = vec3( 0.1, 0.2, 0.4 ) * fragCoord.y / iResolution.y;\n\n    \n    float radius = iMouse.x>0.0f?sqrt(iMouse.x/iResolution.x)*0.4:0.15;\n    float mass =  iMouse.y>0.0?(iMouse.y/iResolution.y)*20000.0:10000.0;\n\n    vec2 coord = uv;\n    coord.x*= iResolution.x /iResolution.y;\n    coord -= vec2((iResolution.x /iResolution.y)*0.5, 0.5);\n       \n    float schwarzschild = 2.0*mass*G;\n    \n    //collapse into a black hole!\n    bool is_schwarzschild = radius<schwarzschild;\n     if(is_schwarzschild)\n        radius = 0.0;\n    \n    float grav = computegrav(coord, centre, radius, mass);\n    \n    float val = circle(coord,centre,radius)?1.0f:0.0;\n\n    float graph = uv.y<grav*gravscale?1.0:0.0;\n    vec4 graphcol = graph*vec4(0.5,0.1,0.9,1.0)*0.6;\n    if(abs(coord.x-centre.x)<schwarzschild && is_schwarzschild)\n    {\n        graphcol += vec4(0.1);\n    }\n    \n    float StarFieldThreshhold = 0.97;\n\n    // starfield distortion, it just looks cool\n    {\n        //surface gravity\n        float surf = computegrav2d(coord, centre, radius, mass);\n        vec2 disto = normalize(coord-centre)*surf;\n   \t \tfloat xRate = 0.2;\n    \tfloat yRate = 0.2;\n    \tvec2 vSamplePos = (coord-disto)*200.0 + vec2( xRate * float( iFrame ), yRate * float( iFrame ) );\n\t\tfloat StarVal = StableStarField( vSamplePos, StarFieldThreshhold );\n    \n    \tfragColor = vec4(vColor + vec3(StarVal*4.0),1.0); //bg\n        fragColor += vec4(surf*0.1);\n    }\n    \n    fragColor += vec4(val) + graphcol;\n    \n    if(circle(coord, centre, schwarzschild))\n        fragColor = vec4(0.0);\n}","name":"Image","description":"","type":"image"}]}