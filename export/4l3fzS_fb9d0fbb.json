{"ver":"0.1","info":{"id":"4l3fzS","date":"1540153939","viewed":511,"name":"Tile zoom","username":"AntoineC","description":"Infinite zoom on morphing tiles.","likes":31,"published":1,"flags":0,"usePreview":0,"tags":["2d","loop","minimalist"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Infinite zoom on morphing tiles.\n// Recreation of a bees & bombs animation\n// https://beesandbombs.tumblr.com/post/179092048114/grids\n\n#define Pi     3.14159265359\n#define Tau    6.28318530718\n#define Rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n#define Rot45  Rot(Pi/4.0)\n\n\n#define TileCount 7.0\n#define Duration 6.0\n\n\n// IQâ€™s Exact signed distance of a rectangle\nfloat RectangleSd(vec2 p, float size)\n{\n    vec2 d = abs(p)-vec2(size);\n    return length(max(d, vec2(0))) + min(max(d.x, d.y), 0.0);\n}\n\n\nfloat Phase(vec2 uvi, vec2 uvf, float t)\n{\n    vec2 uv = (uvi + vec2(0.5))/TileCount + (uvf+1.0)/(2.0*TileCount);\n    return smoothstep(0.6, 0.0, (atan(-uv.x, -uv.y) + Pi)/Tau-1.6*t+0.6);\n}\n\n\nfloat Tile(vec2 uv, vec2 uvi, float eps, float t, float zoom)\n{\n    // Square:\n    float sq = RectangleSd(uv, 1.0);\n   \n    // Corner diamonds:\n    float cdt = min(t, 0.75)/0.75;\n    float cds = sqrt(2.0*0.5*0.5);\n    float cd = RectangleSd(Rot45*(uv-vec2(-1.,-1.)), cds*Phase(uvi,vec2(-1.,-1.),cdt));\n    cd = min(  RectangleSd(Rot45*(uv-vec2( 1.,-1.)), cds*Phase(uvi,vec2( 1.,-1.),cdt)), cd);\n    cd = min(  RectangleSd(Rot45*(uv-vec2( 1., 1.)), cds*Phase(uvi,vec2( 1., 1.),cdt)), cd);\n    cd = min(  RectangleSd(Rot45*(uv-vec2(-1., 1.)), cds*Phase(uvi,vec2(-1., 1.),cdt)), cd);\n\n    // Side squares:\n    float sst = max(t-0.25, 0.0)/0.75;\n    float sss = 0.5;\n    float ss = RectangleSd(uv-vec2(-1., 0.), sss*Phase(uvi,vec2(-1., 0.),sst));\n    ss = min(  RectangleSd(uv-vec2( 1., 0.), sss*Phase(uvi,vec2( 1., 0.),sst)), ss);\n    ss = min(  RectangleSd(uv-vec2( 0., 1.), sss*Phase(uvi,vec2( 0., 1.),sst)), ss);\n    ss = min(  RectangleSd(uv-vec2( 0.,-1.), sss*Phase(uvi,vec2( 0.,-1.),sst)), ss);\n    \n    // Combine:\n    float sd = sq;\n    sd = min(max(sd, -cd), cd);\n    sd = min(max(sd, -ss), ss);\n \n    // Stroke:\n    float width = 14.0/(zoom*450.0);\n    return smoothstep(width, (width+eps), abs(sd));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized coordinates:\n    float eps = 1.0/iResolution.y;\n    vec2  uv  = eps*(fragCoord - 0.5*iResolution.xy);\n\tfloat t   = fract(iTime / Duration);\n\n    // Zoom:\n    float zoom = pow(2.0, t);\n    uv /= zoom;\n    eps /= zoom;\n    \n    // Tiling:\n    vec2 uvf, uvi;\n    uv = uv*TileCount - vec2(0.5);\n    uvi = floor(uv);\n    uvf = 2.0*fract(uv)-1.0;\n    eps *= 2.0*TileCount;\n\n    // Render tile:\n    float c = 0.95*Tile(uvf, uvi, eps, fract(t), zoom);\n    \n    // Output to screen\n    fragColor = vec4(vec3(pow(c,0.45)),1.0);\n}","name":"Image","description":"","type":"image"}]}