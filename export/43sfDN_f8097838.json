{"ver":"0.1","info":{"id":"43sfDN","date":"1728475725","viewed":23,"name":"2D Interactive Canvas Template","username":"Bingle","description":"A simple 2D boilerplate with keyboard / mouse controls for panning and zooming.","likes":0,"published":3,"flags":48,"usePreview":0,"tags":["2d","mouse","template","keyboard"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 pxToUv(vec2 px,vec4 viewport){\n    return (px-iResolution.xy*0.5)/iResolution.y*viewport.z+viewport.xy;\n}\n\nvec2 uvToPx(vec2 uv,vec4 viewport){\n    return ((uv-viewport.xy)/viewport.z*iResolution.y)+iResolution.xy*0.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec4 viewport = texelFetch(iChannel0,COORD_VIEWPORT,0);\n    vec2 uv = pxToUv(fragCoord,viewport);\n    \n    // Example code - draws a grid, some math functions, and a texture\n    vec3 col = vec3(0.0);\n    \n    // Grid\n    vec2 gridTestPoint = pxToUv(fragCoord+vec2(ceil(iResolution.y/600.0),ceil(iResolution.y/600.0)),viewport);\n    float gridSize = pow(2.0,round(log2(0.15*viewport.z)));\n    if (mod(uv.x,gridSize)>mod(gridTestPoint.x,gridSize)){\n        col+=vec3(0.25);\n    }\n    if (mod(uv.y,gridSize)>mod(gridTestPoint.y,gridSize)){\n        col+=vec3(0.25);\n    }\n    \n    // Functions\n    if (abs(uv.y-sin(uv.x))<viewport.z/iResolution.y){\n        col = vec3(1.0,0.0,0.0);\n    }\n    if (abs(length(uv)-cos(5.0*atan(uv.y,uv.x))*0.5-1.0)<viewport.z/iResolution.y){\n        col = vec3(0.0,1.0,0.0);\n    }\n    \n    // Texture\n    vec2 texCoords = (uv+vec2(8.0,4.5))/vec2(6.0,4.0);\n    if (texCoords.x>0.0 && texCoords.y > 0.0 && texCoords.x < 1.0 && texCoords.y < 1.0){\n        col = texture(iChannel1,texCoords).rgb;\n    }\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 data, in vec2 fragCoord ){\n    ivec2 iCoord = ivec2(fragCoord);\n    data = vec4(0.0);\n    \n    if (iCoord == COORD_VIEWPORT){ // Viewport data\n        data = texelFetch(iChannel0,COORD_VIEWPORT,0);\n        \n        // Init\n        if (iFrame==0){\n            data = vec4(0.0,0.0,10.0,0.0);\n        }\n        \n        // Keyboard Panning\n        if (KEY(65)){\n            data.x-=data.z*iTimeDelta;\n        }\n        if (KEY(68)){\n            data.x+=data.z*iTimeDelta;\n        }\n        if (KEY(83)){\n            data.y-=data.z*iTimeDelta;\n        }\n        if (KEY(87)){\n            data.y+=data.z*iTimeDelta;\n        }\n        \n        // Mouse panning\n        #ifdef MOUSE_PANNING\n        vec4 prevMouse = texelFetch(iChannel0,COORD_MOUSE,0);\n        if (iMouse.z > 0.0 && prevMouse.z > 0.0){\n            data.xy += (prevMouse.xy-iMouse.xy)/iResolution.y*data.z;\n        }\n        #endif\n        \n        // Zoom\n        if (KEY(38)){\n            data.z*=pow(0.5,iTimeDelta);\n        }\n        if (KEY(40)){\n            data.z/=pow(0.5,iTimeDelta);\n        }\n    }\n    \n    #ifdef MOUSE_PANNING\n    if (iCoord == COORD_MOUSE){ // Previous frame's mouse data (for determining difference in position)\n        data = iMouse;\n    }\n    #endif\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"// Data storage coordinates\n#define COORD_VIEWPORT ivec2(0,0)\n#define COORD_MOUSE ivec2(0,1)\n\n// Toggle options\n#define MOUSE_PANNING\n\n// Helper functions\n#define KEY(n) texelFetch(iChannel1,ivec2(n,0),0).r>0.5\n\n// Is writing one-liner functions in the preprocessor actually any more efficient than\n// just using a proper function? Wouldn't the compiler probably just expand out the\n// function call anyway? I'm not super confident on the details of optimizing stuff...\n","name":"Common","description":"","type":"common"}]}