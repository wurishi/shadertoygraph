{"ver":"0.1","info":{"id":"7dfXWN","date":"1618761486","viewed":124,"name":"313_ivanov_v3v2","username":"maximus3","description":"CG_2021 hw2","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["cg2021"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    // vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv) / float(iFrame + 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"struct SphereObj {\n    vec3 pos;\n    float radius;\n    vec3 color;\n};\n\nconst float INF = 1e10;\nconst float EPS = 1e-5;\nconst vec3 CAMERA_POS = vec3(2, 2, -10);\n\nconst float OBJ_RADIUS = 2.0;\n\nconst float PLANE_Y_POS = -OBJ_RADIUS - 0.4;\n\nconst float GLASS_N = 1.5;\nconst float AIR_N = 1.0;\nconst float DIAMOND_N = 2.5;\n\nvec3 randDir;\n\n\nSphereObj lights[2] = SphereObj[2](\n    SphereObj(vec3(-3, 3, -1.5), 0.5, vec3(0.5, 2, 1)),\n    SphereObj(vec3(1.4, 0.8, 3), 0.25, vec3(1.5, 1.5, 0))\n);\n\n\nSphereObj sphereIn[5] = SphereObj[5](\n    SphereObj(vec3(0, 0, 0), 0.25, vec3(1, 0.5, 0.75)),\n    SphereObj(vec3(0.75, 0.5, 0), 0.25, vec3(1, 0.5, 0.3)),\n    SphereObj(vec3(0, -0.7, 0.35), 0.25, vec3(0.1, 0.8, 0.2)),\n    SphereObj(vec3(0.2, 0.8, 0), 0.25, vec3(0.6, 1, 0.9)),\n    SphereObj(vec3(-0.75, -0.3, 0), 0.25, vec3(0.6, 1, 1))\n);\n\n\n// Materials\nconst int EMISSION = 0;\nconst int DIFFUSE = 1;\nconst int REFLECTION = 2;\nconst int REFRACTION = 3;\n\n\nfloat pow2(float x) {\n    return x * x;\n}\n\n\nfloat traceTriangle(vec3 pos, vec3 dir, out vec3 normal, vec3 coord_0, vec3 coord_1, vec3 coord_2) {\n    vec3 dist1 = coord_1 - coord_0;\n    vec3 dist2 = coord_2 - coord_0;\n    vec3 dist_pos = pos - coord_0;\n    \n    vec3 v_1 = cross(dist1, dist2);\n    vec3 v_2 = cross(dist_pos, dir);\n    \n    float d = 1.0 / dot(dir, v_1);\n    \n    if (d < EPS && d > -EPS) {\n        return INF;\n    }\n    \n    vec3 res = vec3(\n        d * dot(-v_1, dist_pos),\n        d * dot(-v_2, dist2),\n        d * dot(v_2, dist1)  \n    );\n    \n    if (res.y < 0.0 || res.z < 0.0 || (res.y + res.z) > 1.0) {\n        return INF;\n    }\n    \n    normal = normalize(cross(dist1, dist2));\n    if (dot(normal, dir) > 0.0) {\n        normal = normalize(cross(dist2, dist1));\n    }\n    \n    if (res.x < 0.0) {\n        return INF;\n    }\n    \n    return res.x;\n}\n\n\n// Плоскость, для которой y == -1\n// (CAMERA_POS + t * viewVec).y == -1\nfloat tracePlane(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (PLANE_Y_POS - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) >= 50.0) {\n        return INF;\n    }\n    normal = vec3(0, 1, 0);\n    return t;\n}\n\n\n// dot(pos + t * dir, pos + t * dir) == r * r\nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal) {\n    float b = dot(pos, dir);\n    float D = b * b - (dot(pos, pos) - r * r);\n    if (D < 0.0) {\n        return INF;\n    }\n    float t = -b - sqrt(D);\n    if (t > 0.0) {\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    t = -b + sqrt(D);\n    if (t < 0.0) {\n        return INF;\n    }\n    normal = normalize(pos + t * dir);\n    return t;\n}\n\n\nfloat traceCylinder(vec3 pos, vec3 dir, out vec3 normal, float obj_h) {\n    const float R = 0.8f;\n    float objPlaneT = (obj_h - pos.y) / dir.y;\n    if (objPlaneT < 0.0) {\n        return INF;\n    }\n    vec3 worldPos = objPlaneT * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) < R * R) {\n        normal = vec3(0, 1, 0);\n        return objPlaneT;\n    }\n    \n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - R * R;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;  // LEFT AND RIGHT\n    }\n    \n    float t = (-b - sqrt(D)) / a;\n    if (t > 0.0) {\n        worldPos = t * dir + pos;\n        if (worldPos.y <= obj_h && worldPos.y >= PLANE_Y_POS) {\n            normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n            return t;\n        }\n    }\n    \n    t = (-b + sqrt(D)) / a;\n    if (t > 0.0) {\n        worldPos = t * dir + pos;\n        if (worldPos.y <= obj_h && worldPos.y >= PLANE_Y_POS) {\n            normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n            return t;\n        }\n    }\n    return INF;\n}\n\n\nfloat traceOct(vec3 pos, vec3 dir, float r, out vec3 normal) {\n    vec3 coords[6] = vec3[6](\n        vec3(-r, 0, 0),\n        vec3(0, -r, 0),\n        vec3(r, 0, 0),\n        vec3(0, r, 0),\n        vec3(0, 0, r),\n        vec3(0, 0, -r)\n    );\n    \n    vec3 trCoords[8] = vec3[8] (\n        vec3(0, 1, 4),\n        vec3(1, 2, 4),\n        vec3(2, 3, 4),\n        vec3(3, 0, 4),\n        vec3(0, 1, 5),\n        vec3(1, 2, 5),\n        vec3(2, 3, 5),\n        vec3(3, 0, 5)\n    );\n    \n    float t = INF;\n    \n    for (int i = 0; i < 8; i++) {\n        vec3 curNormal;\n        float curT = traceTriangle(pos, dir, curNormal, coords[int(trCoords[i].x)], coords[int(trCoords[i].y)], coords[int(trCoords[i].z)]);\n        if (curT < t) {\n            t = curT;\n            normal = curNormal;\n        }\n    }\n    \n    return t;\n}\n\n\nfloat traceObject(vec3 pos, vec3 dir, float h_from_0, out vec3 normal) {\n\n    // SPHERE\n    //return traceSphere(pos, dir, h_from_0, normal);\n    \n    // Octahedron\n    return traceOct(pos, dir, h_from_0, normal);\n}\n\n\nbool isOccluded(vec3 pos, vec3 target) {\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n    \n    vec3 objNorm;\n    float objT = traceObject(pos, dir, OBJ_RADIUS, objNorm);\n    if (objT < dist)\n        return true;\n    vec3 cylNorm;\n    float cylT = traceCylinder(pos, dir, cylNorm, -OBJ_RADIUS);\n    return (cylT < dist);\n}\n\n\nvec3 computeLight(vec3 pos, vec3 color, vec3 normal) {\n    vec3 res = texture(iChannel1, normal).rgb * 0.3;\n\n    for (int i = 0; i < lights.length(); i++) {\n        vec3 toLight = lights[i].pos - pos;\n        float distSq = dot(toLight, toLight);\n        float att = isOccluded(pos, lights[i].pos + randDir * lights[i].radius) ? 0.0 : 18.0f / distSq;\n        res += max(0.0, dot(normal, normalize(toLight))) * att * lights[i].color;\n    }\n    \n    return color * res;\n}\n\n\nvec3 refraction(vec3 v, vec3 normal, float n1, float n2) {\n    if (dot(v, normal) < 0.0) {\n        normal = -normal;\n    }\n    float cosA = dot(v, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3 tang = normalize(v - cosA * normal);\n    \n    float sinB = sinA / n2 * n1;\n    float cosB = sqrt(1.0 - sinB * sinB);\n    return sinB * tang + cosB * normal;\n}\n\n\nfloat rand(float frame) {\n    return fract(sin( dot(vec3(frame), vec3(12.9898,78.233,45.5432) )) * 43758.5453);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec3 randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    randDir = normalize(randVals - 0.5);\n\n    // Coords from -0.5 to 0.5\n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (randVals.xy - 0.5) * 2.0)/iResolution.x;\n    \n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N + GLASS_N);\n    float DIAMOND_R = pow2(DIAMOND_N - GLASS_N) / pow2(DIAMOND_N + GLASS_N);\n    \n    // STATIC    \n    #if 0\n    float r_cam = sqrt(pow2(CAMERA_POS.x) + pow2(CAMERA_POS.z));\n    float phi = sin(iTime / 10.0) * 3.14;\n    vec3 cur_camera_pos = vec3(r_cam * cos(phi), CAMERA_POS.y, r_cam * sin(phi));\n    #else\n    vec3 cur_camera_pos = CAMERA_POS;\n    #endif\n    \n    \n    // Camera\n    vec3 front = normalize(-cur_camera_pos);\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = normalize(cross(front, up));\n    up = normalize(cross(right, front));\n    \n    // Направление камеры для каждого пикселя\n    vec3 viewVec = normalize(front + right * uv.x + up * uv.y);\n    \n    vec3 curPos = cur_camera_pos;\n    vec3 curDir = viewVec;\n    \n    float n1 = AIR_N;\n    \n    vec3 colorMult = vec3(1, 1, 1);\n    \n    for (int i = 0; i < 10; i++) {\n        float t = INF; //Like distance from cam to obj\n        int materialType;\n        vec3 color;\n        vec3 normal;\n        float nEnter = AIR_N;\n        \n        vec3 planeNorm;\n        float planeT = tracePlane(curPos, curDir, planeNorm);\n        if (planeT < t) {\n            t = planeT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel0, worldPos.xz * 0.2).rgb;\n            normal = planeNorm;\n            if (randVals.y < 0.2) {\n                materialType = REFLECTION;\n            }\n        }\n        \n        for (int i = 0; i < lights.length(); i++) {\n            vec3 lightNorm;\n            float lightT = traceSphere(curPos - lights[i].pos, curDir, lights[i].radius, lightNorm);\n            if (lightT < t) {\n                t = lightT;\n                materialType = EMISSION;\n                color = lights[i].color;\n                normal = lightNorm;\n            }\n        }\n        \n        vec3 objNorm;\n        float objT = traceObject(curPos, curDir, OBJ_RADIUS, objNorm);\n        if (objT < t) {\n            t = objT;\n            normal = objNorm;\n            \n            if (randVals.x < GLASS_R * 5.0) {\n                materialType = REFLECTION;\n            } else {\n                materialType = REFRACTION;\n                colorMult *= vec3(0.8, 0.8, 0.9);\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = AIR_N;\n                } else {\n                    nEnter = GLASS_N;\n                }\n            }  // if (randVals.x < GLASS_R)\n        }\n        \n        for (int i = 0; i < sphereIn.length(); i++) {\n            vec3 sphNorm;\n            float sphInT = traceSphere(curPos - sphereIn[i].pos, curDir, sphereIn[i].radius, sphNorm);\n            if (sphInT < t) {\n                normal = sphNorm;\n                if (randVals.x < DIAMOND_R) {\n                    materialType = REFLECTION;\n                } else {\n                    colorMult *= sphereIn[i].color;\n                    materialType = REFRACTION;\n                    if (dot(curDir, normal) > 0.0) {\n                        nEnter = GLASS_N;\n                    } else {\n                        nEnter = DIAMOND_N;\n                    }\n                }\n            }\n        }\n        \n        vec3 cylNorm;\n        float cylT = traceCylinder(curPos, curDir, cylNorm, -OBJ_RADIUS);\n        if (cylT < t) {\n            t = cylT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel2, worldPos.xz * worldPos.y).rgb;\n            normal = cylNorm;\n        }\n        \n        if (t != INF) {\n            vec3 worldPos = t * curDir + curPos;\n            fragColor = texture(iChannel0, worldPos.xz);\n            if (materialType == EMISSION) {\n                fragColor.rgb = color * colorMult;\n                break;  // не отражаются\n            } else if (materialType == DIFFUSE) {\n                fragColor.rgb = computeLight(worldPos, color, normal) * colorMult;\n                break;\n            } else if (materialType == REFLECTION) {\n                curDir = reflect(curDir, normal);\n                curPos = worldPos + curDir * EPS;                \n            } else if (materialType == REFRACTION) {\n                curDir = refraction(curDir, normal, n1, nEnter);\n                curPos = worldPos + curDir * EPS;\n                n1 = nEnter;\n            }\n        } else {\n            fragColor.rgb = texture(iChannel1, curDir).rgb * colorMult;\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv) + texture(iChannel1, uv);\n}","name":"Buffer B","description":"","type":"buffer"}]}