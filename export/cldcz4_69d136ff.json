{"ver":"0.1","info":{"id":"cldcz4","date":"1698950213","viewed":106,"name":"Ocular Harpsichord","username":"misha","description":"See sound as colors!\n\nReplace the Soundcloud texture in iChannel0 of Buffer A to explore different songs or change it to microphone.","likes":1,"published":3,"flags":96,"usePreview":0,"tags":["microphone"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 freqRGB = texture(iChannel0,vec2(0.5,0.5)).rgb;\n    vec4 barOverlay = texture(iChannel1,uv);\n\n    // Set the output color (fill the entire texture)\n    fragColor = vec4(mix(freqRGB,barOverlay.rgb,barOverlay.a),1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Ms3Gzj","filepath":"https://soundcloud.com/stagedoorpro/gustav-mahler-symphony-no-3-dm-brazilian-symphonic-orchestra","previewfilepath":"https://soundcloud.com/stagedoorpro/gustav-mahler-symphony-no-3-dm-brazilian-symphonic-orchestra","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float resolutionX = iResolution.x;\n    \n    float wavelength = mapWavelength(fragCoord.x / resolutionX);\n    \n    // Fetch the spectrum color\n    float spectrum = texture(iChannel0, vec2(fragCoord.x / resolutionX, 0.25 )).x;\n    \n    // Get the CIE XYZ color matching functions\n    vec3 cieXYZ = cieColorMatchingFunction(wavelength);\n    \n    // Output the product of spectrum and CIE functions\n    fragColor = vec4(cieXYZ * spectrum, spectrum);\n}\n\n// https://soundcloud.com/cure88200/440hz_sine_wave\n// https://soundcloud.com/lindstedt/55-110-220-440-hz-sine-wave\n// https://soundcloud.com/stagedoorpro/gustav-mahler-symphony-no-3-dm-brazilian-symphonic-orchestra\n// https://soundcloud.com/keno-leon-58106006/sinewavetonescale\n// https://soundcloud.com/manoo-cher/c-major-scale\n// https://soundcloud.com/bradingrao/c-major-scale-flute\n// https://soundcloud.com/kenzaisounds/shepard-tone","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"// Approximation of CIE 1931 color matching functions\nvec3 cieColorMatchingFunction(float wavelength) {\n    float x, y, z;\n\n    // xBar approximation\n    x = exp(-pow((wavelength - 595.8) / 33.33, 2.0));\n\n    // yBar approximation\n    y = exp(-pow((wavelength - 556.3) / 31.38, 2.0));\n\n    // zBar approximation\n    z = exp(-pow((wavelength - 449.8) / 36.06, 2.0));\n\n    return vec3(x, y, z);\n}\n\nvec3 convertXYZtoRGB(vec3 XYZ) {\n    // Convert XYZ to linear RGB (simplified D65 white point and sRGB primaries)\n    mat3 XYZ_to_RGB = mat3( 3.2406, -1.5372, -0.4986,\n                           -0.9689,  1.8758,  0.0415,\n                            0.0557, -0.2040,  1.0570);\n    vec3 linearRGB = XYZ_to_RGB * XYZ;\n\n    // Gamma correction for sRGB\n    vec3 gammaCorrectedRGB = pow(linearRGB, vec3(1.0 / 2.2));\n    \n    return gammaCorrectedRGB;\n}\n\nfloat mapWavelength(float x) {\n    // Assuming the spectrum's wavelengths are linearly mapped to [380, 780] nm\n    // return 420.0 + x*(720.0 - 420.0);\n    return 420.0 + log2(x+1.0)*(720.0 - 420.0);\n    //return 420.0 + mod(log2(x+1.0) * 1234.0, (700.0 - 420.0));\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float resolution = 512.0;\n    vec3 XYZ = vec3(0.0);\n\n    // Sum the results from Buffer A\n    for (float i = 0.0; i < 1.0; i+=1.0/resolution) {\n        XYZ += texture(iChannel0, vec2(i, 0.5)).xyz;\n    }\n\n    // Normalize the XYZ values (assuming equal energy white point)\n    XYZ /= resolution;\n    \n    XYZ *= 2.0;\n\n    // Convert XYZ to linear RGB and apply gamma correction (as before)\n    vec3 RGB = convertXYZtoRGB(XYZ);\n\n    // Set the output color (fill the entire texture)\n    fragColor = vec4(RGB, 1.0);\n}\n","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec4 XYZ = texture(iChannel0, vec2(uv.x, 0.25 ));\n    \n    vec3 RGB = convertXYZtoRGB(XYZ.xyz);\n    \n    fragColor = vec4(RGB,float(XYZ.w > (uv.y * 2.0)));\n}","name":"Buffer C","description":"","type":"buffer"}]}