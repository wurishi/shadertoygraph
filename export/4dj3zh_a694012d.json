{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"#ifdef GL_ES\n#endif\n\n//uniform float time;\n//uniform vec2 iMouse;\n//uniform vec2 iResolution;\n\n\nvec4 col;\nfloat pixelPower;\nconst float powerTreshold = 2.5;\nconst int numberOfMetaballs = 3;\nconst float lineSize = 1000.0;\nfloat norm;\nvec2 fragCoord;\n\nvec3 ColorOfMetaball(int metaballNumber)\n{\n\tvec3 metaColor = vec3(0.0);\n\t\n\tif(metaballNumber == 0)\n\t{\n\t\tmetaColor = vec3(0.0, 1.0, 0.0);\n\t}\n\telse if(metaballNumber == 1)\n\t{\n\t\tmetaColor = vec3(0.0, 0.0, 1.0);\t\n\t}\n\telse if(metaballNumber == 2)\n\t{\n\t\tmetaColor = vec3(1.0, 0.0, 0.0);\t\n\t}\n\t\n\treturn metaColor;\n}\n\nvec2 PositionOfMetaball(int metaballNumber)\n{\n\tvec2 metaPos = vec2(0.0);\n\t\n\tif(metaballNumber == 0)\n\t{\n\t\tmetaPos = vec2(0.5);\t\n\t}\n\telse if(metaballNumber == 1)\n\t{\n\t\tmetaPos = iMouse.xy / iResolution.xy;\n\t}\n\telse if(metaballNumber == 2)\n\t{\n\t\tmetaPos = iMouse.xy / iResolution.xy;\n\t\tmetaPos /= 1.5;\n\t}\n    \n    metaPos.x = metaPos.x * (iResolution.x / iResolution.y);\n\t\n\treturn metaPos;\n}\n\nfloat RadiusOfMetaball(int metaballNumber)\n{\n\tfloat radius = 0.0;\n\t\n\tif(metaballNumber == 0)\n\t{\n\t\tradius = 0.25;\t\n\t}\n\telse if(metaballNumber == 1)\n\t{\n\t\tradius = 0.25;\n\t}\n\telse if(metaballNumber == 2)\n\t{\n\t\tradius = 0.25;\t\n\t}\n\t\n\treturn radius;\n}\n\n//float norm;\n\nfloat Norm(float num)\n{\n\t//float norm = 0.9;\n\tfloat res = pow(num, norm);\n\treturn res;\t\n}\n\nfloat SquareDistanceToMetaball(int metaballNumber)\n{\n\tvec2 metaPos = PositionOfMetaball(metaballNumber);\n\tvec2 pixelPos = fragCoord.xy / iResolution.xy;\n    pixelPos.x = pixelPos.x * iResolution.x / iResolution.y;\n\tvec2 distanceVector = pixelPos - PositionOfMetaball(metaballNumber);\n\tdistanceVector = vec2(abs(distanceVector.x), abs(distanceVector.y));\t\n\tfloat normDistance = Norm(distanceVector.x) + Norm(distanceVector.y);\n\t\n\treturn normDistance;\n}\n\nfloat PowerOfMetaball(int metaballNumber)\n{\n\tfloat power = 0.0;\n\t\n\tfloat radius = RadiusOfMetaball(metaballNumber);\n\tfloat squareDistance = SquareDistanceToMetaball(metaballNumber);\n\t\n\t\n\tpower = Norm(radius) / squareDistance;\n\t\n\treturn power;\n}\n\nvec3 CalculateColor(float maxPower)\n{\n\tvec3 val = vec3(0.0);\n\t\t\t\t\t\n\tfor(int i = 0; i < numberOfMetaballs; i++)\n\t{\n\t\tval += ColorOfMetaball(i) * (PowerOfMetaball(i) / maxPower);\n\t}\n\t\n\treturn val;\n}\n\nvoid Metaballs()\n{\n\tvec3 val;\n\tpixelPower = 0.0;\n\tcol = vec4(0.0);\n\tint powerMeta = 0;\n\tfloat maxPower = 0.0;\n\tfor(int i = 0; i < numberOfMetaballs; i++)\n\t{\n\t\tfloat power = PowerOfMetaball(i);\n\t\tpixelPower \t+= power;\n\t\t/*\n\t\tif(power > 1.0)\n\t\t{\n\t\t\tpower = 1.0;\t\n\t\t}\n\t\t*/\n\t\tif(maxPower < power)\n\t\t{\n\t\t\tmaxPower = power;\n\t\t\tpowerMeta = i;\n\t\t}\n\t\tpower *= RadiusOfMetaball(i);\n\t\t\n\t\t//val += ColorOfMetaball(i) * power;\n\t}\n\t\n\tval = CalculateColor(maxPower);\n\t\n\tif(pixelPower < powerTreshold || pixelPower > powerTreshold + Norm(lineSize))\n\t{\n\t\tval = vec3(0.0);\n\t}\n\t\n\tcol = vec4(val, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 iFragCoord ) \n{\n        fragCoord = iFragCoord;\n\tnorm = 2.0;//mod(iTime, 5.0);\n\tMetaballs();\n\t//col = vec4(iMouse.xy / iResolution.xy, 0.0, 1.0);\n\tfragColor = col;\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4dj3zh","date":"1383692492","viewed":5209,"name":"2D Color Metaballs","username":"Helpfully","description":"Metaball implementation in 2D with color\n\nJust click & drag your mouse on the image.","likes":27,"published":1,"flags":0,"usePreview":0,"tags":["2d","metaball"],"hasliked":0,"parentid":"","parentname":""}}