{"ver":"0.1","info":{"id":"7sGcWd","date":"1655816725","viewed":55,"name":"Floating Trigonometry ","username":"Homyth","description":"Visualization of cos, sin and tan graphs","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["sin","cos","graph","frequency","tangent","trigonometry"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    // Normalized uv (from -0.5 to 0.5)\n    vec2 uvN = uv - 0.5f;\n    \n    \n    float time = iTime * 10.0f;  // Increase the coef if you want to make the flow faster\n    float frequency = uv.x * 30.0f; // Increase if you want to increase frequency\n    float iteration = frequency + time; // Makes the graph flow\n    float limit = uvN.y * 8.0f; // Min max limits of the graph\n    float lineWidth = 0.04f; //Line width of the graph   \n    \n    float GraphCos = abs(-1.0f * cos(iteration)+limit) - lineWidth;\n    float GraphSin = abs(-1.0f * sin(iteration)+limit) - lineWidth; \n    float GraphTan = abs(-1.0f * tan(iteration)+limit) - lineWidth; \n    \n    float GraphCosDraw = smoothstep(0.0, 1.0, GraphCos / fwidth(GraphCos));\n    float GraphSinDraw = smoothstep(0.0, 1.0, GraphSin / fwidth(GraphSin));\n    float GraphTanDraw = smoothstep(0.0, 1.0, GraphTan / fwidth(GraphTan));\n    \n    vec4 MaskCosGraph = vec4(vec3(GraphCosDraw),1.0);\n    vec4 MaskSinGraph = vec4(vec3(GraphSinDraw),1.0);\n    vec4 MaskTanGraph = vec4(vec3(GraphTanDraw),1.0);\n    \n    vec4 NegMaskCosGraph = -1.0 * (MaskCosGraph - 1.0);\n    vec4 NegMaskSinGraph = -1.0 * (MaskSinGraph - 1.0);\n    vec4 NegMaskTanGraph = -1.0 * (MaskTanGraph - 1.0);\n    \n    vec4 background    = vec4(.9, .9, .9, 1.0);\n    vec4 drawColorCos  = vec4(.8, .0, .0, 1.0);\n    vec4 drawColorSin  = vec4(.0, .9, .0, 1.0);\n    vec4 drawColorTan  = vec4(.0, .0, .9, 1.0);\n       \n       \n    vec4 ColorCos = (background * MaskCosGraph) + (drawColorCos * NegMaskCosGraph);\n    vec4 ColorSin = (background * MaskSinGraph) + (drawColorSin * NegMaskSinGraph);\n    vec4 ColorTan = (background * MaskTanGraph) + (drawColorTan * NegMaskTanGraph);\n    \n    vec4 DrawCosSin    = (ColorCos   * MaskSinGraph) + (drawColorSin * NegMaskSinGraph);\n    vec4 DrawCosSinTan = (DrawCosSin * MaskTanGraph) + (drawColorTan * NegMaskTanGraph);\n    \n    fragColor = DrawCosSinTan;\n    \n    //fragColor =  vec4(GraphCosDraw,0.0, 0.0, 1.0);\n    //fragColor =  vec4(0.0,GraphSinDraw, 0.0, 1.0);\n    //fragColor =  vec4(0.0,0.0, GraphTanDraw, 1.0);\n}","name":"Image","description":"","type":"image"}]}