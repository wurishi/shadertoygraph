{"ver":"0.1","info":{"id":"WdyfRm","date":"1606769688","viewed":113,"name":"Paper snowflake","username":"maximkamalov","description":"A paper snowflake with two vesica cuts.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","sdf","snowflake","paper"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Applies to:\n// - sd*() functions and code for stripes, Copyright © 2018 Inigo Quilez\n// - the rest of the code, Copyright © 2020 Maxim Kamalov\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n#define PI (22./7.)\n\n// Rotation using complex numbers.\n// Can be optimized but I like understandable version more.\nvec2 rotate(in vec2 vector, in float angle) {\n    vec2 rotator = vec2(cos(angle), sin(angle));\n    return vec2(\n        vector.x * rotator.x - vector.y * rotator.y,\n        vector.x * rotator.y + vector.y * rotator.x);\n}\n\n// Signed distance to a 2D triangle.\nfloat sdTriangleIsosceles( in vec2 p, in vec2 q )\n{\n    p.x = abs(p.x);\n\tvec2 a = p - q*clamp( dot(p,q)/dot(q,q), 0.0, 1.0 );\n    vec2 b = p - q*vec2( clamp( p.x/q.x, 0.0, 1.0 ), 1.0 );\n    float k = sign( q.y );\n    float d = min(dot( a, a ),dot(b, b));\n    float s = max( k*(p.x*q.y-p.y*q.x),k*(p.y-q.y)  );\n\treturn sqrt(d)*sign(s);\n}\n\nfloat sdVesica(vec2 p, float r, float d)\n{\n    p = abs(p);\n    float b = sqrt(r*r-d*d);\n    return ((p.y-b)*d>p.x*b) ? length(p-vec2(0.0,b))\n                             : length(p-vec2(-d,0.0))-r;\n}\n\n// More convinient version.\nfloat sdVesica2(vec2 p, float height, float ratio)\n{\n    return sdVesica(p, height, height * (1. - ratio));\n}   \n\n#define RPT 6.0\n\nfloat add(float d1, float d2) { return min(d1, d2); }\nfloat remove(float d1, float d2) { return max(d1, -d2); }\n\nfloat snowflakeSegment(in vec2 p, in float r, in vec2 mouse)\n{\n    float aTriangle = PI / RPT;\n    float aPeriod = aTriangle * 2.;\n    \n    vec2 tri = vec2(r * tan(aTriangle / 2.), r); // width, height\n    \n    float dTri = sdTriangleIsosceles( p, tri );\n    float d = dTri;\n    \n    // Cut 1.\n    float dVes1 = sdVesica2(\n        rotate(p + vec2(-.25, -.75), -.5),\n        1. + .75 * mouse.y,\n        .1 + .1 * mouse.x);\n    \n    d = remove(d, dVes1);\n    \n    // Cut 2.\n    float dVes2 = sdVesica2(\n        rotate(p + vec2(.125, -.5), -.5),\n        .5,\n        .25);\n    \n    d = remove(d, dVes2);\n    \n    return d;\n}\n\n#define DEBUG 0.0\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // y is [-1, 1], x is [-1, 1] * aspect ratio\n\tvec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 mouse = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n    \n    p *= 1.25;\n    \n    float aTriangle = PI / RPT;\n    float aPeriod = aTriangle * 2.;\n    \n    float d = snowflakeSegment(p, 1.0, mouse);\n    \n    for (int i = 0; i < int(RPT); i++)\n    {\n    \tp = rotate(p, aPeriod);\n        d = min(d, snowflakeSegment(p, 1.0, mouse));\n    }\n    \n    p *= vec2(-1., 1.);\n    p = rotate(p, aPeriod / 2.);\n    \n    for (int i = 0; i < int(RPT * (1. - DEBUG)); i++)\n    {\n        p = rotate(p, aPeriod);\n        d = min(d, snowflakeSegment(p, 1.0, mouse));\n    }\n    \n    vec3 col = vec3(1.0) - sign(d)*vec3(0.1,0.4,0.7);\n\tcol *= 1.0 - exp(-2.0*abs(d));\n\tcol *= 0.8 + 0.2*cos(140.0*d);\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.02,abs(d)) );\n\n\tfragColor = vec4(col*1.2,1.0);\n}\n","name":"Image","description":"","type":"image"}]}