{"ver":"0.1","info":{"id":"4llfz7","date":"1511448817","viewed":195,"name":"Ray Marching: Question","username":"maqflp","description":"Dear ShaderToy community. I am preparing ShaderToy Workshop and two questions appeared.. I would be happy to receive some feedback as comments (questions in the shader) - Thank you for your time! :)","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["question","workshop"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Dear All,\n// I am preparing material for shader/raymarching workshop (both here in Wroclaw and at MAGFest).\n// This is the code for basic raymarcher that I want to use as a starting point for people that\n// want to work on their own creations (we want to make hackaton-like event).\n// \n// The key point will be to introduce newbies into this field also by doing CSG ray marching.\n// I have two questions, anyone have some time to help me to improve that?\n//\n// 1) I would be happy to receive some feedback if something may be done better than here\n// (there is so much research done already that I may have missed something important here).\n// 2) I have specific question too. Is there any better option to choose materials than copying \n// whole distance function as I've done here? I feel I miss some simple idea here..\n//\n// I appreciate your time & feedback\n// we may do it much better together :-)\n//\n// maq/floppy, Wroclaw 23.XI.2017\n\n\n// surface - distance function\nfloat plane(vec3 r)\n{\n\treturn r.y;\n}\n// sphere - distance function\nfloat sphere(vec3 r, float R)\n{ \n    return length(r) - R; \n}\n\n//  distance from the scene\nfloat dist(vec3 r)\n{\n\tfloat d1 = plane(r);\n    float d2 = sphere(r+ vec3(-0.8-(iMouse.x)/iResolution.x,0.0-iMouse.y/iResolution.y,4.2), 0.5);\t\n    float d = min(d1,d2);\n    return d;\n}\n// material\nint mat(vec3 r)\n{\n\tfloat d1 = plane(r);\n    float d2 = sphere(r+ vec3(-0.8-(iMouse.x)/iResolution.x,0.0-iMouse.y/iResolution.y,4.2), 0.5);\t\n    if(d1<d2) return 1;\n    if(d2<d1) return 2;\n    return 0;\n}\n\n// shadow is just sum of distances from the scene while marching towards light (l)\nfloat shadow(vec3 p, vec3 l, float d)\n{\n\tfloat o=0.0;\n\tfor (int i=12; i > 0; i--) \n\t{\n\t\to += dist( p+l*float(i)*d );\n\t}\n\treturn clamp(o, 0.0, 1.0);\n}\n\n// normal vector\n// http://www.pouet.net/topic.php?which=7920&page=10 by rear\nvec3 normal(vec3 p)\n{\n\t#define dr 1e-4\n\tvec3 drx = vec3(dr,0,0);\n\tvec3 dry = vec3(0,dr,0);\n\tvec3 drz = vec3(0,0,dr);\n\treturn ( vec3( dist(p+drx), dist(p+dry), dist(p+drz) ) - dist(p)) / dr;\n}\n\n#define ITER 290\t\n#define EPS 0.00001\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n\tvec2 r = (fragCoord.xy / iResolution.xy);\n\tr.x*=(iResolution.x/iResolution.y);\t\n\t\t\n    // get ray\n\tvec3 camera = vec3(1.0,2.2,1.0);\n\tvec3 p = vec3(r.x, r.y+1.0, -1.0);\n\tvec3 dir = normalize(p-camera);\n\t\n    // ray marching\n    float d;\n\tfor(int i=0; i<ITER; i++)\n\t{\n\t\td = dist( p );\n\t\tif(d < EPS)\n\t\t    break;\n\t\tp = p + dir * d;\n\t}\n\n    int m = mat(p);\n    vec3 materialcolor=vec3(0);\n    if(m==1) materialcolor = vec3(.6,.6,.6);\n    if(m==2) materialcolor = vec3(.8,.2,.0);\n        \n    // normal vector\n\tvec3 n = normal(p);\n\t\n    // light\n\tvec3 lightpos = vec3(1.2, 4.2, -0.5);\n\tfloat light = 1.0 + 0.01*(dot(n,lightpos));\n\tvec3 lightdir = normalize(lightpos-p);\n\t\t\n    // use soft shadows\n\tlight *= shadow(p, lightdir, 0.01);\n\t\t\n\tvec3 color = vec3(light);\n\tfragColor = vec4(materialcolor*color,1.0);\n}\n","name":"Image","description":"","type":"image"}]}