{"ver":"0.1","info":{"id":"fsffWN","date":"1647565496","viewed":98,"name":"2D Audio Visualizer V2","username":"Polygon","description":"Fork of https://www.shadertoy.com/view/4tfcW7\n\nThis one has a type of cubic interpolation, which is a huge improvement in my opinion.\n\nMusic by yours truly :)","likes":3,"published":1,"flags":64,"usePreview":0,"tags":["2d","audio","soundcloud"],"hasliked":0,"parentid":"4tfcW7","parentname":"2D Audio Visualizer"},"renderpass":[{"inputs":[{"id":"Xl2Szz","filepath":"https://soundcloud.com/plygon/intuition","previewfilepath":"https://soundcloud.com/plygon/intuition","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float tf(float x) {\n    return (pow(2., x + 1.));\n}\n\nfloat s(float x) {return x*x;}\n\nfloat cubicInterp(float x, float y_m1, float y_0, float y_1, float y_2) {\n    float a = 2.*y_1 + y_m1 - 0.5*(y_2 + 5. * y_0);\n    float b = 0.5*(y_2 - 3.*y_1 + 3.*y_0 - y_m1);\n    return y_0 + 0.5*(y_1 - y_m1) * x + a * x*x + b * x*x*x;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    float fracY = fract(8. * uv.y - .5);\n    \n    float xCoord = floor(tf(uv.x + floor(8. * uv.y - 1.5)));\n    float prevRow = \n        cubicInterp(\n            fract(tf(uv.x + floor(8. * uv.y - 1.5))),\n            texture(iChannel0, vec2((xCoord - 1.) / 512., 0.)).x,\n            texture(iChannel0, vec2((xCoord - 0.) / 512., 0.)).x,\n            texture(iChannel0, vec2((xCoord + 1.) / 512., 0.)).x,\n            texture(iChannel0, vec2((xCoord + 2.) / 512., 0.)).x\n    );\n    \n    xCoord = floor(tf(uv.x + floor(8. * uv.y - 0.5)));\n    float currentRow = cubicInterp(\n        fract(tf(uv.x + floor(8. * uv.y - 0.5))),\n        texture(iChannel0, vec2((xCoord - 1.) / 512., 0.)).x,\n        texture(iChannel0, vec2((xCoord - 0.) / 512., 0.)).x,\n        texture(iChannel0, vec2((xCoord + 1.) / 512., 0.)).x,\n        texture(iChannel0, vec2((xCoord + 2.) / 512., 0.)).x\n    );\n    \n    xCoord = floor(tf(uv.x + floor(8. * uv.y + 0.5)));\n    float nextRow = cubicInterp(\n        fract(tf(uv.x + floor(8. * uv.y + 0.5))),\n        texture(iChannel0, vec2((xCoord - 1.) / 512., 0.)).x,\n        texture(iChannel0, vec2((xCoord - 0.) / 512., 0.)).x,\n        texture(iChannel0, vec2((xCoord + 1.) / 512., 0.)).x,\n        texture(iChannel0, vec2((xCoord + 2.) / 512., 0.)).x\n    );\n    \n    xCoord = floor(tf(uv.x + floor(8. * uv.y + 1.5)));\n    float nextStill = cubicInterp(\n        fract(tf(uv.x + floor(8. * uv.y + 1.5))),\n        texture(iChannel0, vec2((xCoord - 1.) / 512., 0.)).x,\n        texture(iChannel0, vec2((xCoord - 0.) / 512., 0.)).x,\n        texture(iChannel0, vec2((xCoord + 1.) / 512., 0.)).x,\n        texture(iChannel0, vec2((xCoord + 2.) / 512., 0.)).x\n    );\n    \n    //float prevRow = texture(iChannel0, vec2(tf(uv.x + floor(8. * uv.y - 1.5)) / 512., 0.)).x;\n    //float currentRow = texture(iChannel0, vec2(tf(uv.x + floor(8. * uv.y - .5)) / 512., 0.)).x;\n    //float nextRow = texture(iChannel0, vec2(tf(uv.x + floor(8. * uv.y + .5)) / 512., 0.)).x;\n    //float nextStill = texture(iChannel0, vec2(tf(uv.x + floor(8. * uv.y + 1.5)) / 512., 0.)).x;\n    \n    float brightness = cubicInterp(\n        fracY,\n        prevRow,\n        currentRow,\n        nextRow,\n        nextStill\n    );\n    \n    fragColor = vec4(s(brightness));\n    //fragColor = vec4(s(texelFetch(iChannel0, ivec2(tf(uv.x + floor(8. * uv.y)), 0), 0).x));\n    \n    //Uncomment the last line to remove smoothing.\n}","name":"Image","description":"","type":"image"}]}