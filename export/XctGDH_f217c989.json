{"ver":"0.1","info":{"id":"XctGDH","date":"1711725528","viewed":46,"name":"ahmTp3","username":"kaibene","description":"ombre et fonction","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["aaaaaa"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Modeling - 2024.02.06\n// Eric Galin\n\n// Rotation matrix around z axis\n// a : Angle\nmat3 Rz(float a)\n{\n  float sa=sin(a);float ca=cos(a);\n  return mat3(ca,sa,0.,-sa,ca,0.,0.,0.,1.);\n}\n\nstruct Ray {\nvec3 ro; // Ray origin\nvec3 rd; // Direction\n};\n\n// Compute a point on the ray\n// ray : Ray\n// t   : depth\nvec3 Point(Ray ray,float t)\n{\n  return ray.ro+t*ray.rd;\n}\n\n// Compute the ray\n//     m : Mouse position\n//     p : Pixel\nRay CreateRay(vec2 m,vec2 p)\n{\n  float a=3.*3.14*m.x; \n  float le=3.5;\n  \n  // Origin\n  vec3 ro=vec3(35.,0.,10.)*Rz(a);\n  \n  // Target point\n  vec3 ta=vec3(0.,0.,3.);\n  \n  // Orthonormal frame\n  vec3 w=normalize(ta-ro);\n  vec3 u=normalize(cross(w,vec3(0.,0.,1.)));\n  vec3 v=normalize(cross(u,w));\n  vec3 rd=normalize(p.x*u+p.y*v+le*w);\n  return Ray(ro,rd);\n}\n\n// Primitives\n\n// Sphere\n// p : point\n// c : center of skeleton\n// r : radius\nfloat Sphere(vec3 p,vec3 c,float r)\n{\n  return length(p-c)-r;\n}\n\n// Plane\n// p : point\n// c : center of skeleton\n// n : Normal\nfloat Plane(vec3 p,vec3 c,vec3 n)\n{\n  return dot(p-c,n);\n}\n\n// Operators\n\n// Union\n// a,b : field function of left and right sub-trees\nfloat Union(float a,float b)\n{\n  return min(a,b);\n}\n\n// Union, extension to four sub-trees\n// a,b,c : field function of left and right sub-trees\nfloat Union(float a,float b,float c,float d)\n{\n  return min(min(a,b),min(c,d));\n}\n\n// Difference\n// a,b : field function of left and right sub-trees\nfloat Difference(float a,float b)\n{\n  return max(a,-b);\n}\n\n// Cube\nfloat Cube(vec3 p, vec3 c, vec3 s)\n{\n    vec3 d = abs(p - c) - s / 2.0;\n    return length(max(d, 0.0)) + min(max(d.x, max(d.y, d.z)), 0.0);\n}\n\n// Cylinder\nfloat Cylinder(vec3 p, vec3 c, float r, float h)\n{\n    vec2 d = abs(vec2(length(p.xz - c.xz), p.y - c.y)) - vec2(r, h);\n    return min(max(d.x, d.y), 0.0) + length(max(d, 0.0));\n}\n\n// Fonction pour créer le robot\nfloat createRobot(vec3 p)\n{\n    // Corps principal du robot (Cube) - placé au-dessus du plan\n    float body = Cube(p, vec3(0.0, 10.0, 0.0), vec3(2.5, 5.0, 2.5));\n\n    // Tête du robot (Sphere)\n    float head = Sphere(p, vec3(0.0, 14.0, 0.0), 1.0);\n\n    // Cou du robot (Cylinder)\n    float neck = Cylinder(p, vec3(0.0, 12.0, 0.0), 0.5, 1.0);\n\n    // Bras gauche (Cylinder)\n    float leftArm = Cylinder(p, vec3(-2.5, 11.0, 0.0), 0.5, 4.0);\n\n    // Bras droit (Cylinder)\n    float rightArm = Cylinder(p, vec3(2.5, 11.0, 0.0), 0.5, 4.0);\n\n    // Jambe gauche (Cylinder)\n    float leftLeg = Cylinder(p, vec3(-1.5, 6.0, 0.0), 0.5, 5.0);\n\n    // Jambe droite (Cylinder)\n    float rightLeg = Cylinder(p, vec3(1.5, 6.0, 0.0), 0.5, 5.0);\n\n    // Assemblage des différentes parties du robot\n    float robot = Union(body, head);\n    robot = Union(robot, neck);\n    robot = Union(robot, leftArm);\n    robot = Union(robot, rightArm);\n    robot = Union(robot, leftLeg);\n    robot = Union(robot, rightLeg);\n\n    return robot;\n}\n\n\n\nfloat object(vec3 p)\n{\n    float v = Sphere(p, vec3(3.0, 0.0, 6.0), 0.0);\n\n    v = Union(v, Sphere(p, vec3(0.0, 2.0, 3.0), 0.0));\n\n    \n\n    float robot = createRobot(p); // Appel de la fonction createRobot\n    v = Union(v, robot); // Ajout du robot à la scène\n\n    v = Union(v, Plane(p, vec3(0.0, 0.0, -1.0), vec3(0.0, 0.0, 1.0)));\n\n    return v;\n}\n\n\n\n// Analysis of the scalar field\n\nconst int Steps=200;// Number of steps\nconst float Epsilon=.01;// Marching epsilon\n\n// Object normal\n// p : point\nvec3 ObjectNormal(vec3 p)\n{\n  const float eps=.001;\n  vec3 n;\n  float v=object(p);\n  n.x=object(vec3(p.x+eps,p.y,p.z))-v;\n  n.y=object(vec3(p.x,p.y+eps,p.z))-v;\n  n.z=object(vec3(p.x,p.y,p.z+eps))-v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\n// ray : Ray \n// e : Maximum distance\n// h : hit\n// s : Number of steps\nfloat SphereTrace(Ray ray,float e,out bool h,out int s)\n{\n  h=false;\n  \n  // Start at the origin\n  float t=0.;\n  \n  for(int i=0;i<Steps;i++)\n  {\n    s=i;\n    vec3 p=Point(ray,t);\n    float v=object(p);\n    // Hit object\n    if(v<0.)\n    {\n      h=true;\n      break;\n    }\n    // Move along ray\n    t+=max(Epsilon,v);\n    // Escape marched too far away\n    if(t>e)\n    {\n      break;\n    }\n  }\n  return t;\n}\n\n// Lighting\n\n// Background color\n// d : Ray direction\nvec3 Background(vec3 d)\n{\n  return mix(vec3(.45,.55,.99),vec3(.65,.69,.99),d.z*.5+.5);\n}\n\n// Shading and lighting\n// p : Point\n// n : Normal at point\n// e : Eye direction\nvec3 Shade(vec3 p,vec3 n,vec3 e)\n{\n  // Point light\n  const vec3 lp=vec3(5.,10.,30.);\n  \n  // Light direction to point light\n  vec3 l=normalize(lp-p);\n  \n  // Ambient color\n  vec3 ambient=.25+.25*Background(n);\n  \n  // Shadow computation\n  float shadow=1.0;\n  // Phong diffuse\n  vec3 diffuse=.35*clamp(dot(n,l),0.,1.)*vec3(1.,1.,1.);\n  \n  // Specular\n  vec3 r=reflect(e,n);\n  vec3 specular=.15*pow(clamp(dot(r,l),0.,1.),35.)*vec3(1.,1.,1.);\n  vec3 c=ambient+shadow*(diffuse+specular);\n  return c;\n}\n\n// Ombres dures, fonction Shadow\nfloat Shadow(vec3 p, vec3 n, vec3 lp) {\n    Ray shadowRay;\n    shadowRay.ro = p + n * Epsilon; // Décalage de l'origine légèrement pour éviter l'auto-occultation\n    shadowRay.rd = normalize(lp - p);\n    \n    bool hit;\n    int s;\n    float t = SphereTrace(shadowRay, length(lp - p), hit, s);\n    \n    if (hit && t < length(lp - p)) {\n        return 0.0; // Le point est dans l'ombre\n    } else {\n        return 1.0; // Le point est éclairé par la lumière ponctuelle\n    }\n}\n\n// Image\nvoid mainImage(out vec4 color, in vec2 pxy)  \n{\n    // Pixel\n    vec2 pixel = (-iResolution.xy + 2.0 * pxy) / iResolution.y;\n\n    // Mouse\n    vec2 m = iMouse.xy / iResolution.xy;\n\n    // Camera\n    Ray ray = CreateRay(m, pixel);\n\n    // Hit and number of steps\n    bool hit;\n    int s;\n\n    // Trace ray\n    float t = SphereTrace(ray, 75.0, hit, s);\n\n    // Shade background\n    vec3 rgb = Background(ray.rd);\n\n    if (hit)\n    {\n        // Position\n        vec3 p = Point(ray, t);\n\n        // Compute normal\n        vec3 n = ObjectNormal(p);\n\n        // Position de la lumière\n        vec3 lp = vec3(5.0, 10.0, 5.0); // Exemple de position de la lumière ponctuelle\n\n        // Ombre dure\n        float shadow = Shadow(p, n, lp);\n\n        // Shade object with light and shadow\n        rgb = Shade(p, n, ray.rd) * shadow;\n    }\n\n    color = vec4(rgb, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}