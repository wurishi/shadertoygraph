{"ver":"0.1","info":{"id":"ltfcDf","date":"1506645857","viewed":129,"name":"Be A Fan Boi","username":"isak","description":"My first little thingy that is ray marched and that I want to share. I'm a raymarch noobie, but I physics a bit.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarch","yellow","fan"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define EPSILON 0.005\n#define N_EPSILON 0.05\n#define PI 3.14159265358979323846\n\n#define ez vec3(0.0, 0.0, 1.0)\n\nmat2 rot(float a) {\n    float c = cos(a); float s = sin(a);\n    return mat2(c, s, -s, c);\n}\n\n\nfloat blade(vec3 p, float a){\n    \n    p.xy *= rot(a); \n    p.xz *= rot(-clamp(0.3 + 0.03*p.y*p.y, 0.3, 0.6));\n    \n    float psy = p.y - 3.0;\n    float ppy = p.y - 1.0;\n    \n    \n    float xs = clamp(0.4 + -0.04*psy*psy, -1.5, 1.0);\n    float xp = clamp( 2.0 + 0.02*ppy*ppy,  1.0, 2.5);\n    \n    \n    return length(p - vec3(clamp(p.x, -2.0*xs, xp),\n                           clamp(p.y, -3.0, 3.0 - 0.1*p.x*p.x),\n                           0.0\n                           )) - 0.1;\n}\n\nfloat centre(vec3 p){\n    float rad = 2.5;\n    float len = 0.7;\n    vec2 d = abs(vec2(length(p.xy/rad), p.z/len) ) - 1.0 ;\n  \treturn min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n\nfloat concav(vec3 p){\n    float rad = 2.3;\n    float len = 0.7;\n    vec2 d = abs(vec2(length(p.xy/rad), p.z/len) ) - 1.0 ;\n  \treturn min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n\nfloat d_sphere(vec3 p, vec3 pos, float r){\n    return length(p - pos) - r;\n}\n\nfloat sceneSDF(vec3 p){\n    \n    p.z += 10.0;\n    \n    p.xz *= rot(iTime);\n    p.xy *= rot(2.6*iTime);\n    \n    float a = 2.0*PI/7.0;\n    mat2 R = rot(a);\n \n    vec2 O1 = vec2(0.0, -3.5);\n    vec2 O2 = R*O1;\n    vec2 O3 = R*O2;\n    vec2 O4 = R*O3;\n    vec2 O5 = R*O4;\n    vec2 O6 = R*O5;\n    vec2 O7 = R*O6;\n    \n    \n    float z_pos = 0.0;\n    \n    float d = min( \n        \t\t   min( blade(p + vec3(O1, z_pos), 0.0*a),\n                        blade(p + vec3(O2, z_pos), 1.0*a)) , \n                   min( blade(p + vec3(O3, z_pos), 2.0*a),\n                        blade(p + vec3(O4, z_pos), 3.0*a)));\n    \n    \t  d = min( min( d,\n                       \tblade(p + vec3(O5, z_pos), 4.0*a)),\n                   min( blade(p + vec3(O6, z_pos), 5.0*a),\n           \t\t\t\tblade(p + vec3(O7, z_pos), 6.0*a)));\n                       \n    d =  min(d,centre(p + vec3(0.0, 0.0, 0.7 + z_pos)));\n    \n    d = max(d, -concav(p + vec3(0.0, 0.0, 1.0 + z_pos)));\n    \n    vec2 p1 = vec2(0.2, 0.2);\n    vec2 p2 = rot(2.0*PI/3.0)*p1;\n    vec2 p3 = rot(2.0*PI/3.0)*p2;\n    \n    float d_logo = min(\n        \t\t\t\tmin( length(p + vec3(p1, 0.0 + z_pos)) - 0.2,\n                             length(p + vec3(p2, 0.0 + z_pos)) - 0.2),\n                             length(p + vec3(p3, 0.0 + z_pos)) - 0.2);\n    \n    d = max(d, - d_logo);\n    \n    return d;\n    \n}\n\n\n\n\nvec3 estimateNormal(vec3 p) {\n    return normalize(vec3(\n        sceneSDF(vec3(p.x + N_EPSILON, p.y, p.z)) - sceneSDF(vec3(p.x - N_EPSILON, p.y, p.z)),\n        sceneSDF(vec3(p.x, p.y + N_EPSILON, p.z)) - sceneSDF(vec3(p.x, p.y - N_EPSILON, p.z)),\n        sceneSDF(vec3(p.x, p.y, p.z  + N_EPSILON)) - sceneSDF(vec3(p.x, p.y, p.z - N_EPSILON))\n    ));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    \n\tvec2 uv = fragCoord.xy - 0.5*iResolution.xy;\n    uv *= 2.0/iResolution.y;\n    \n    uv *= 4.0;\n    \n    float fov = PI/20.0;\n    vec3 cam_pos = vec3(0.0, 0.0, 1.0*(1.0 + 1.0/tan(fov)));\n    \n    vec3 ray = cam_pos;\n    vec3 dir = normalize(vec3(uv.xy, 0.0) - cam_pos);\n    \n    vec3 light = normalize(vec3(0.5, 0.5, 1.0));\n    \n    float shade = 0.0;\n    float shade_1 = 0.0;\n    for (int i = 0; i < MAX_STEPS; i++){\n        \n        float dist = sceneSDF(ray);\n        \n        if ( dist < EPSILON ) {\n            \n            vec3 n = estimateNormal(ray);\n            float soft = dot(light,n);\n            float soft_s = soft - 1.0;\n            shade += 0.8*soft;\n            shade += clamp(exp(-soft*soft*10.0), 0.0, 1.0);\n            shade += clamp(exp(-soft_s*soft_s*10000.0), 0.0, 1.0);\n            \n            break;\n        }\n        else if ( length(ray) > 30.0 )\n            break;\n        ray += 0.71*dir*dist;\n    }\n    \n    \n    \n\tfragColor = vec4(1.0, 0.9, 0.0, 0.0)*shade;\n\n}","name":"Image","description":"","type":"image"}]}