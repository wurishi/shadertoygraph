{"ver":"0.1","info":{"id":"DdyGDz","date":"1678373293","viewed":28,"name":"Mandelbrot - Pavel","username":"0x706a","description":"Mandelbrot fractal","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// samples per pixel\nconst int samples = 100;\n\nfloat rand(float co) { return fract(sin(co*(91.3458)) * 47453.5453); }\n\n// implement multistop gradient\nvec4 customMix(float value) {\n    // define stops\n    const int num_stops = 4;\n    float stops[32];\n    vec4 colors[32];\n    stops[0] = 0.0;\n    stops[1] = 0.33;\n    stops[2] = 0.66;\n    stops[3] = 1.0;\n    colors[0] = vec4(255, 169, 231, 255.0);\n    colors[1] = vec4(127, 44, 203, 255.0);\n    colors[2] = vec4(65, 67, 97, 255.0);\n    colors[3] = vec4(42, 45, 67, 255.0);\n    for(int i = 0; i < 4; i++) {\n        colors[i] /= 255.0;\n    }\n    \n    if(stops[1] >= value) {\n        float weight = value / stops[1];\n        return mix(colors[0], colors[1], weight);\n    }\n    for(int i = 1; i < num_stops; i++) {\n        if(stops[i - 1] <= value && stops[i] >= value) {\n            float weight = (value - stops[i - 1]) / (stops[i] - stops[i - 1]);\n            return mix(colors[i - 1], colors[i], weight);\n        }\n    }\n    return vec4(1.0, 1.0, 1.0, 1.0);\n\n}\n\n// heart of mandelbrot set\nint loop(vec2 c, int maxIters) {\n    vec2 z = vec2(0.0, 0.0);\n    for(int i = 0; i < maxIters; i++) {\n        if(z.x * z.x + z.y * z.y > float(maxIters * maxIters * maxIters)) {\n            return i;\n        }\n        z = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + c;\n    }\n    return maxIters;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (y from -1 to 1)\n    vec2 uv = fragCoord/iResolution.y;\n    uv = uv * 2.0 - iResolution.xy / iResolution.y;\n    \n    float zoom = pow(2.0, iTime);\n    int maxIters = int(40.0 * pow(iTime + 1.0, 0.8));\n    \n    // zoom and translate uv\n    vec2 center = vec2(-1.786440164999, -0.000000395682);\n    uv = center + uv / zoom;\n    \n    // max sample offset\n    vec2 epsilon = 1.0 / iResolution.xy / zoom;\n\n    // get average of x samples\n    int sum = 0;\n    for(int i = 0; i < samples; i++) {\n        vec2 offset = vec2(rand(float(i)), rand(float(i))) * epsilon;\n        vec2 currentSample = uv + offset;\n        sum += loop(currentSample, maxIters);\n    }\n    \n    // normalize iteration count from 0 to 1\n    float value = pow(float(sum) / float(maxIters) / float(samples), 2.0);\n    // convert value to color from custom gradient\n    fragColor = customMix(value);\n}","name":"Image","description":"","type":"image"}]}