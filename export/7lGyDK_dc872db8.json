{"ver":"0.1","info":{"id":"7lGyDK","date":"1662205709","viewed":99,"name":"Shaded Mandelbrot","username":"slashrawr","description":"Mandelbrot fractal with shading.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["fractal","mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"int max_iterations = 100;\nfloat infinity_test = 16.;\nbool zoom_in = true;\nvec3 palette[5];\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    palette[0] = vec3(86, 44, 44)/255.;\n    palette[1] = vec3(242, 84, 45)/255.;\n    palette[2] = vec3(245, 223, 187)/255.;\n    palette[3] = vec3(14, 149, 148)/255.;\n    palette[4] = vec3(18, 116, 117)/255.;\n    \n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    \n    vec3 col = vec3(.8);\n    float zoom = iTime*.02*(float(iFrame)*0.1);\n    vec2 offset = vec2(.7115, .25);\n    \n    if (!zoom_in)\n    {\n        zoom = .45;\n        offset = vec2(0);\n        \n    }\n    float a = (uv.x-(offset.x*zoom))/zoom;\n    float b = (uv.y+(offset.y*zoom))/zoom;\n    float ca = a;\n    float cb = b;\n    float ab = 0.;\n    \n    float iteration = 0.;\n    \n    for (int i = 0; i < max_iterations; i++)\n    {\n        float next_a = pow(a,2.)-pow(b,2.);\n        float next_b = 2.0*a*b;\n        \n        a = next_a+ca;\n        b = next_b+cb;\n        ab = abs(a+b);\n       \n        if (ab > infinity_test)\n            break;\n        \n        iteration++;\n    }\n    \n    int palette_no = int(mod(iteration, 5.));\n    col = palette[palette_no] * ab/infinity_test*.2;\n    \n    //debugging - centre of screen\n    //col *= smoothstep(abs(uv.x),0.,.001);\n    //col *= smoothstep(abs(uv.y),0.,.001);\n\n    fragColor = vec4(col,1.);\n}","name":"Image","description":"","type":"image"}]}