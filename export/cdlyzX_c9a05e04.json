{"ver":"0.1","info":{"id":"cdlyzX","date":"1687050682","viewed":530,"name":"Xor's Fast Sort","username":"Xor","description":"Here's my first attempt at a pixel-sorting algorithm","likes":13,"published":1,"flags":32,"usePreview":1,"tags":["sort"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n    Algorithim in Buffer A\n*/\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 texel = 1.0 / iResolution.xy;\n    vec2 uv = fragCoord * texel;\n\n    fragColor = texture(iChannel0,uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/*\n    Sorts in powers of 2: 1, 2, 4, 8... up to the resolution\n    Every other frame flips between positive or negative sorting\n    Takes 38 frames at 1080p.\n*/\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 res = iResolution.xy;\n    vec2 texel = 1.0 / res;\n    vec2 uv = fragCoord * texel;\n    \n    vec4 tex = texture(iChannel1,fragCoord*texel);\n    \n    int rate = int(iFrameRate);\n    int steps = int(log2(res));\n    int f = (iFrame % (rate*4))-steps;\n    \n    float off = float(1<<steps-(f/4%steps))-1.0;\n    off *= sign(mod(fragCoord.x+float(f),2.0)-1.0);\n    \n    vec2 p0 = fragCoord.xy;\n    vec2 p1 = mod(vec2(fragCoord.x+off,fragCoord.y), res);\n    \n    vec4 sort0 = texture(iChannel0, p0 * texel);\n    vec4 sort1 = texture(iChannel0, p1 * texel);\n    \n    vec4 col = (length(sort0) - length(sort1))*(p0-p1).x<0.? sort0 : sort1;\n    fragColor = f<0? tex : col;\n}","name":"Buffer A","description":"","type":"buffer"}]}