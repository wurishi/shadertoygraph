{"ver":"0.1","info":{"id":"dsByWm","date":"1687867516","viewed":127,"name":"JFA Splash","username":"kastorp","description":"at each iteration, travel half distance from the previous border  to the closest point","likes":18,"published":1,"flags":32,"usePreview":0,"tags":["sdf","jfa"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//JFA Splash by Kastorp\n\n#define T(p) texture(iChannel1, (p) / iResolution.xy)\nvoid mainImage(out vec4 o, vec2 fc)\n{\n    \n\tvec4 seed = T(fc);\n    vec3 color = 0.5 + 0.5*cos(seed.z/float(NIters)*20.+vec3(0,2,4));\n    \n    if(seed.z==1. && length(fc-seed.xy)<.5)color*=0.;\n    o = vec4(pow(color, vec3(.45)), 1);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define R iResolution.xy\nbool filled(vec2 p){\n    \n#ifdef HMAZE    \n    return hmaze((p-R/2.)/R.y*10.+2.5);\n#else\n#ifdef MAZE\n    return maze((p-R*.5)/R.y);\n#else\n    float d=1e5; \n    for(float k=0.;k<200.;k++){\n        d=min(d,length(p-hash21(k+iTime)*R)-R.y/80.);\n    }  \n    d=max(d,-length(p-R/2.)+R.y/40.);\n    return d<0.;\n#endif\n#endif\n}\n\n        \nvoid mainImage(out vec4 O, vec2 fc) // fragCoord\n{\n   \n    int f = iFrame %(maxSteps*NIters*2);\n    vec4 t = texelFetch(iChannel0,ivec2(fc),0);\n    if( f==0  ){\n        //INIT\n        O=  filled(fc) ? vec4(fc,1,1):vec4(-1);;      \n    } \n    else if(f==maxSteps &&t.w==0.){\n        //FIRST ITERATION\n        vec4 seed = texelFetch(iChannel0,ivec2(R/2.),0);\n        float d =length(R/2.- seed.xy);\n        if(length(fc-R/2.)<=d*.5 && t.w==0.) O=vec4(fc,2,1);    \n    }\n    else if(f%maxSteps==0 && f/maxSteps<NIters  &&t.w==0.){\n        //OTHER ITERATIONS\n        if(t.z>=2. && t.w==0.) O=vec4(fc,f/maxSteps+1,2);\n    \n    }\n    else {    \n        //JFA CYCLE\n        int level =  maxSteps - f%maxSteps -1 ;\n        vec4 best = vec4(-1);\n        float bestd2 = 1e10,\n            w = float(1 << level);   \n        for (float y = -w; y <= w; y += w)\n        for (float x = -w; x <= w; x += w) {\n            vec2 c=fc+vec2(x,y);\n            vec4 seed = texelFetch(iChannel0,ivec2(c),0);\n                   \n            if (min(seed.x,seed.y)>0.){ \n                float d2 = dot(seed.xy - fc,seed.xy - fc);\n               if (bestd2 *(best.z>=2.? 1.:RATIO) > d2 *(seed.z>=2.? 1.:RATIO)) {\n                    bestd2 = d2;\n                    best = seed;\n                    if(d2>.5) best.w=0.;else best.w=1.;\n                }\n            }\n        }\n        O=best;\n    }  \n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 O, in vec2 I )\n{\n    O=vec4(1);\n    int f = iFrame %maxSteps;\n    if(f==0) O=texelFetch(iChannel0,ivec2(I),0);\n    else O=texelFetch(iChannel1,ivec2(I),0);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"//#define MAZE  //uncomment to apply quad maze\n#define HMAZE //uncomment to apply hex maze\n\nconst float RATIO=1.; // try 5. or .2\nconst int maxSteps = 12,\n#ifdef HMAZE\n          NIters=150;\n#else\n#ifdef MAZE\n          NIters=300;\n#else     \n          NIters=24;     \n#endif\n#endif\n\n//  Hash without Sine\nvec2 hash21(float p)\n{\n\tvec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n\tp3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n#define TILESIZE 8.0\n//https://www.shadertoy.com/view/ld23DW\nbool maze( in vec2 p )\n{   \n    p=p*mat2(1,-1,1,1)*TILESIZE*10.;\n    if(length(p)<TILESIZE*.7-1.) return false;\n\tvec2 s = floor(p/TILESIZE);\n\tfloat d = sin(514.32*(sin(s.x*494.65+s.y*132.55)+cos(s.x*243.43+s.y*553.65)));\n\tp = mod(p,TILESIZE);\n\td=  (d >= 0.0) ? (p.x-p.y): (p.x+p.y-TILESIZE);\n\tif(min(abs(p.x-TILESIZE*.5),abs(p.y-TILESIZE*.5))>TILESIZE*.5-1.)return true;\n\treturn abs(d) <1. ;\n}\n\n#define TAU 6.2832\nmat2 rot(float a) { return mat2(cos(a),sin(a),-sin(a),cos(a));}\n//xy=center, z=orientation\nvec3 tri(vec2 uv){ \n    const mat2 sk = mat2(2./sqrt(3.),0,1./sqrt(3.),1),ski = inverse(sk); float d=1./6.;\n    float sd =step(fract(uv*sk).x ,fract(uv*sk).y)*2.-1.;\n    vec2  c = floor(uv*sk) +vec2(.5) + sd*d*vec2(-1,1) ;c*=ski;\n    return vec3(c,sd);\n}\n\nbool hmaze(vec2 uv){\n\n    vec3 t = tri(uv);\n    float r = floor(hash12(t.xy)*6.); //random rotation \n\n    float tk=.05;\n    float d=1e5;\n    uv = t.xy+ (uv-t.xy)*rot(TAU/3.*(r));\n    \n    if(r>=3.){\n        for(int i=0;i<3;i++){\n            d=min(d,max((uv.x-t.x)*t.z,abs(t.y-uv.y)-tk));\n            uv = t.xy+ (uv-t.xy)*rot(TAU/3.);        \n        }\n    }else{\n        uv = t.xy+ (uv-t.xy)*rot(-TAU/4.);\n         d=min(d,abs(t.y-uv.y+.25/sqrt(3.)*t.z) -tk);  \n         d=min(d,length(uv-t.xy+vec2(0,.5/sqrt(3.))*t.z)-tk);\n    }\n    d=max(d,length(uv-t.xy)-.3);\n    return d<.02;\n }\n \n ","name":"Common","description":"","type":"common"}]}