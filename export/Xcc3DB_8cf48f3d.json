{"ver":"0.1","info":{"id":"Xcc3DB","date":"1712062796","viewed":66,"name":"prak2/","username":"la","description":"ЦФА","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["iuyghtf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"bool rtCube(mat4 trans, vec3 o, vec3 d, out float t, out vec3 n){\nmat4 inv = inverse(trans);\nvec3 op = (inv * vec4(o, 1.0)).xyz;\nvec3 od = (inv * vec4(d, 0.0)).xyz;\nvec3 t0 = (vec3(1.0) - op) / od;\nvec3 t1 = (vec3(-1.0) - op) / od;\nvec3 tmin = min(t0, t1);\nvec3 tmax = max(t0, t1);\nfloat fmin = max(tmin.x, max(tmin.y, tmin.z));\nfloat fmax = min(tmax.x, min(tmax.y, tmax.z));\nif (fmin == t0.x) n = vec3(+1.0, 0.0, 0.0);\nelse if (fmin == t1.x) n = vec3(-1.0, 0.0, 0.0);\nelse if (fmin == t0.y) n = vec3(0.0, +1.0, 0.0);\nelse if (fmin == t1.y) n = vec3(0.0, -1.0, 0.0);\nelse if (fmin == t0.z) n = vec3(0.0, 0.0, +1.0);\nelse if (fmin == t1.z) n = vec3(0.0, 0.0, -1.0);\nn = (trans * vec4(n, 0.0)).xyz;\nt = fmin;\nreturn fmax >= fmin;\n}\nmat4 mRotateY(float angle, float sc, vec3 t)\n{\nfloat c = cos(angle) * sc;\nfloat s = sin(angle) * sc;\n\nreturn mat4(\nc, 0, s, 0,\n0, sc, 0, 0,\n-s, 0, c, 0,\nt.x, t.y, t.z, 1);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\nvec2 resolution = iResolution.xy;    \nfloat aspect = iResolution.x / iResolution.y;\nvec2 uv = fragCoord.xy / iResolution.yy;\nfloat time = iTime;\nvec2 circle1 = vec2(0.5 + 0.3 * cos(time), 0.5 + 0.3 * sin(time));\nvec2 circle2 = vec2(0.8 + 0.2 * cos(2.0 * time), 0.8 + 0.2 * sin(2.0 * time)); \nvec2 circle3 = vec2(0.4 + 0.5 * cos(3.0 * time), 0.5 + 0.1 * sin(3.0 * time));\nvec2 circle4 = vec2(0.7 + 0.1 * cos(3.0 * time), 0.5 + 0.1 * sin(3.0 * time)); \nvec3 ro = vec3(0.0, 4.0, -12.0);\nvec3 rd = normalize(vec3(uv - vec2(0.5 * aspect, 0.5), 1.0));\nvec3 color1 = vec3(sin(18.0*time + fragCoord.x * 0.2) , 0.1,1.);\nvec3 color2 = vec3 (cos(18.0 *time + fragCoord.x *0.2), 0.8,1.);\nvec3 color3 = vec3(circle3.x, circle3.y, 2.);\nvec3 color4 = vec3(circle4.y, circle4.y, 0.1); \nfloat distance1 = length(fragCoord - resolution * circle1);\nfloat distance2 = length(fragCoord - resolution * circle2);\nfloat distance3 = length(fragCoord - resolution * circle3);\nfloat distance4 = length(fragCoord - resolution * circle4);\n   float circleRadius = .1 * resolution.x;\n   vec3 backgroundColor = 0.6 + 0.1* cos(18.0 *time + fragCoord.xxx * 0.1 + length(fragCoord.xx) * 0.1);\n    vec3 finalColor = backgroundColor;\n\n    if (distance1 < circleRadius) {\n        finalColor = color1;\n    }\n     if (distance2 < circleRadius) {\n        finalColor = color2;\n    }\n\n    if (distance3 < circleRadius) {\n        finalColor = color3;\n    }\n      if (distance4 < circleRadius) {\n        finalColor = color4;\n    }\n\nmat4 m = mRotateY(iTime, 1.5, vec3(0.0, 1.5, 0.0)); \nfloat rt;\nvec3 rn;\nif (rtCube(m, ro, rd, rt, rn)) {\nfragColor = vec4(0.5, 0.5, 0.5, 1.0); \n} else {\nfragColor = vec4(0.0, 0.3, 0.0, 1.0); \n fragColor = vec4(finalColor, 4.0);\n}\n}","name":"Image","description":"","type":"image"}]}