{"ver":"0.1","info":{"id":"tlBGWG","date":"1560884064","viewed":325,"name":"Flamethrower Flat","username":"GabrieleGiuseppini","description":"Experiments for the Flamethrower tool.\n\nNote: the noise is discontinuous at theta=1 because the shader requires a noise resolution lower than the one provided.\n\nTo be used in Floating Sandbox (https://gamejolt.com/games/floating-sandbox/353572).","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["fire"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265358979323844\n\nfloat GetNoise(vec2 uv) // -> (0.25, 0.75)\n{\n    float n = (texture(iChannel0, uv).r - 0.5) * 0.5;\n    n += (texture(iChannel0, uv * 2.0).r - 0.5) * 0.5 * 0.5;\n    //n += (texture(iChannel0, uv * 3.0).r - 0.5) * 0.5 * 0.5;\n    \n    return n + 0.5;\n}\n\n// -----------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv -= vec2(0.5); // (x=[-0.5, 0.5], y=[-0.5, 0.5])\n    uv.y /= (iResolution.x / iResolution.y); // obey aspect ratio\n    \n    float paramTime = iTime;\n    \n    ////////////////////////////////////////\n    \n    //\n    // Transform to polar coordinates\n    //\n    \n    // (r, a) (r=[0.0, 1.0], a=[0.0, 1.0 CCW from W])\n    uv = vec2(\n        length(uv) / sqrt(0.5), \n        (atan(uv.y, uv.x) / (2.0 * PI) + 0.5));\n    \n    // Scale radius to better fit in quad\n    uv.x *= 1.2;\n    \n    \n    //\n    // Flame time\n    //\n    \n    #define FlameSpeed 0.2\n    float flameTime = paramTime * FlameSpeed;\n    \n    \n    //\n    // Get noise for this fragment (in polar coordinates) and time\n    //\n    \n    #define NoiseResolution 0.5\n    float fragmentNoise = GetNoise(uv * vec2(NoiseResolution / 2.0, NoiseResolution) + vec2(-flameTime, 0.0));\n        \n    \n    //\n    // Randomize radius based on noise and radius\n    //\n    \n    float variationR = (fragmentNoise - 0.5);\n\n    // Straighten the flame at the center and make full turbulence outside\n    variationR *= smoothstep(0.05, 0.4, uv.x);\n    \n    // Scale variation\n    variationR *= 0.65;\n    \n    // Randomize!\n    uv.x += variationR;\n    \n    \n    \n    //\n    // Calculate brightness\n    //\n    \n    float radius1 = uv.x;\n    \n    // Focus (compress dynamics)\n    float radius2 = smoothstep(0.2, 0.35, radius1);\n    \n    float brightness = 1.0 - radius2;\n\n    \n    //\n    // Emit\n    //\n    \n    vec3 col1 = mix(vec3(1.0, 1.0, 1.0), vec3(1.0, 1.0, 0.6), smoothstep(0.1, 0.2, radius1));\n    col1 = mix(col1, vec3(1.0, 0.4, 0.1), smoothstep(0.18, 0.25, radius1));\n\n    // Blend with background\n    float alpha = brightness;\n    \n    fragColor = mix(vec4(1.0), vec4(col1, 1.0), alpha);\n}","name":"Image","description":"","type":"image"}]}