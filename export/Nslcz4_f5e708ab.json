{"ver":"0.1","info":{"id":"Nslcz4","date":"1644779048","viewed":37,"name":"ProjetShadertoyTncy","username":"Steson","description":"Projet Tncy","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["projetshadertoy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float FARAWAY=1e30;\nconst float EPSILON=1e-3;\nconst float PI=3.1415;\n\nstruct Camera {\n    vec3 Obs;\n    vec3 View;\n    vec3 Up;\n    vec3 Horiz;\n    float H;\n    float W;\n    float z;\n};\n\nstruct Ray {\n    vec3 Origin;\n    vec3 Dir;\n};\n\nCamera camera(in vec3 Obs, in vec3 LookAt, in float aperture) {\n   Camera C;\n   C.Obs = Obs;\n   C.View = normalize(LookAt - Obs);\n   C.Horiz = normalize(cross(vec3(0.0, 0.0, 1.0), C.View));\n   C.Up = cross(C.View, C.Horiz);\n   C.W = float(iResolution.x);\n   C.H = float(iResolution.y);\n   C.z = (C.H/2.0) / tan((aperture * 3.1415 / 180.0) / 2.0);\n   return C;\n}\n\nRay launch(in Camera C, in vec2 XY) {\n   return Ray(\n      C.Obs,\n      C.z*C.View+(XY.x-C.W/2.0)*C.Horiz+(XY.y-C.H/2.0)*C.Up \n   );\n}\n\nstruct Sphere {\n   vec3 Center;\n   float R;\n};\n\nstruct Material {\n    vec3 Kd; // diffuse color\n    vec3 Ke; // emissive color\n};\n\nMaterial diffuse(in vec3 Kd) {\n   return Material(Kd, vec3(0.0, 0.0, 0.0));\n}\n\nMaterial light(in vec3 Ke) {\n   return Material(vec3(0.0, 0.0, 0.0), Ke);\n}\n\nstruct Object {\n   Sphere sphere;\n   Material material;\n};\n\nObject scene[8];\n\nvoid init_scene() {\n\n   float beta = float(iFrame)/30.0 + 1.0;\n   float s = sin(beta);\n   float c = cos(beta);\n   \n   vec3 cen = vec3(0.0,0.0,0.0);\n   scene[0] = Object(\n      Sphere(cen,0.35), \n      diffuse(vec3(1.0, 1.0, 0.0))\n   );\n   \n   float v_2 = 2.;\n   vec3 moving_center_2 = vec3((sin(v_2*iTime)-cos(v_2*iTime))*0.7+cen.x, (sin(v_2*iTime)+cos(v_2*iTime))*0.7+cen.y, cen.z);\n   scene[1] = Object(\n      Sphere(moving_center_2,0.2), \n      diffuse(vec3(0.0, 0.0, 1.0))\n   );\n   \n   float v_3 = 3.;\n   vec3 moving_center_3 = vec3((sin(v_3*iTime)-cos(v_3*iTime))*0.2+moving_center_2.x, (sin(v_3*iTime)+cos(v_3*iTime))*0.2+moving_center_2.y, moving_center_2.z);\n   scene[2] = Object(\n      Sphere(moving_center_3,0.05), \n      diffuse(vec3(cos(iTime)*0.5, sin(iTime)*0.5, 0.5))\n   );\n   \n   scene[3] = Object(\n      Sphere(vec3(1.0, 1.0, (c+s)*1.0),0.02),\n      light(vec3(1.0, 1.0, 1.0)) \n   );\n   \n   scene[4] = Object(\n      Sphere(vec3((c-s)*1.0, 1.0, (c+s)*1.0),0.02),\n      light(vec3(1.0, 1.0, 1.0)) \n   );\n   \n   scene[5] = Object(\n      Sphere(vec3(0.0, 0.0, -10000.0),9000.0), \n      diffuse(vec3(0.0, 2.0, 1.0))\n   );\n\n\n}\n\nbool intersect_sphere(in Ray R, in Sphere S, out float t) {\n   vec3 CO = R.Origin - S.Center;\n   float a = dot(R.Dir, R.Dir);\n   float b = 2.0*dot(R.Dir, CO);\n   float c = dot(CO, CO) - S.R*S.R;\n   float delta = b*b - 4.0*a*c;\n   if(delta < 0.0) {\n      return false;\n   }\n   t = (-b-sqrt(delta)) / (2.0*a);\n   return true;\n}\n\nbool shadow(in Ray R) {\n   for(int i=0; i<scene.length(); ++i) {\n        float t;\n        if(\n          scene[i].material.Ke == vec3(0.0, 0.0, 0.0) &&\n          intersect_sphere(R, scene[i].sphere, t) &&\n          t > EPSILON && t < 1.0\n        ) {\n          return true;\n        }\n    }\n    return false;\n}\n \nvec3 lighting(in vec3 P, in vec3 N, in Material material) {\n   if(material.Ke != vec3(0.0, 0.0, 0.0)) {\n      return material.Ke;\n   }  \n\n   vec3 result = vec3(0.0, 0.0, 0.0);\n\n   for(int i=0; i<scene.length(); ++i) {\n      if(scene[i].material.Ke != vec3(0.0, 0.0, 0.0)) {\n         Ray R2 = Ray(P, scene[i].sphere.Center);\n         if(!shadow(R2)){\n           vec3 E = scene[i].sphere.Center - P;\n           float lamb = max(0.0, dot(E,N) / length(E));\n           result += lamb * material.Kd * scene[i].material.Ke;\n         }\n       }\n   }\n\n   return result;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n   \n    vec2 uv = 2.0*fragCoord/iResolution.xy -1.0;\n    uv.y /= iResolution.x/iResolution.y;\n    \n   float c = cos(iTime);\n   float s = sin(iTime);\n\n   init_scene();\n \n   Camera C = camera(\n       vec3(c+3.,3.,3.),\n       vec3(0.1, 0.1, 0.1),\n       50.0       \n   );\n   Ray R = launch(C, fragCoord);\n   \n   \n   fragColor = texture(iChannel0,uv);\n\n   const float FARAWAY=1e30; \n   float t = FARAWAY;\n\n   vec3 P;  // Point courant\n   vec3 N;  // Normale\n   Material material; // Couleur\n\n   for(int i=0; i<scene.length(); ++i) {\n       float cur_t;\n       if(\n          intersect_sphere(R, scene[i].sphere, cur_t) \n          && cur_t < t\n       ) {\n           t = cur_t;\n           P = R.Origin + t*R.Dir;\n           N = normalize(P - scene[i].sphere.Center);\n           material = scene[i].material;\n       } \n   }\n\n   if(t != FARAWAY) {\n      fragColor.rgb = lighting(P,N,material);\n   }\n\n}\n","name":"Image","description":"","type":"image"}]}