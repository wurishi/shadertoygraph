{"ver":"0.1","info":{"id":"4f3GWr","date":"1711542357","viewed":36,"name":"compositing digital images","username":"cesor","description":"test env about image compositing, reference from Compositing Digital Images - Thomas Porter & Tom Duff.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["2d","compositing","tool"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n    Compositing Digital Images - Thomas Porter & Tom Duff\n    https://keithp.com/~keithp/porterduff/p253-porter.pdf\n\n    1 - c1 only\n    2 - c2 only\n    3 - c1 over c2\n    4 - c2 over c1\n    5 - c1 in c2\n    6 - c2 in c1\n    7 - c1 out c2\n    8 - c2 out c1\n    9 - c1 atop c2\n    10 - c2 atop c1\n    11 - c1 xor c2\n    \n**/\n#define TYPE 3\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.xy;\n    \n    float a1 = step(uv.x-uv.y, 0.);\n    float a2 = 1.-step(uv.x+uv.y, 0.);\n    vec3 c1 = vec3(.2, .5, 1.)*a1; // blue\n    vec3 c2 = vec3(1., .2, .5)*a2; // red\n    \n#if TYPE == 1\n    // c1\n    a1 = a1; a2 = 0.;\n#elif TYPE == 2\n    // c2\n    a1 = 0.; a2 = a2;\n#elif TYPE == 3\n    // c1 over c2\n    a1 = a1; a2 = 1.-a1;\n#elif TYPE == 4\n    // c2 over c1\n    a1 = 1.-a2; a2 = a2;\n#elif TYPE == 5\n    // c1 in c2\n    a1 = a2; a2 = 0.;\n#elif TYPE == 6\n    // c2 in c1\n    a2 = a1; a1 = 0.;\n#elif TYPE == 7\n    // c1 out c2\n    a1 = 1.-a2; a2 = 0.;\n#elif TYPE == 8\n    // c2 out c1;\n    a2 = 1.-a1; a1 = 0.;\n#elif TYPE == 9\n    // c1 atop c2\n    float t = a1;\n    a1 = a2; a2 = 1.-t;\n#elif TYPE == 10\n    // c2 atop c1\n    float t = a1;\n    a1 = 1.-a2; a2 = t;\n#elif TYPE == 11\n    // c1 xor c2\n    float t = a1;\n    a1 = 1.-a2; a2 = 1.-t;\n#endif\n\n    vec3 col = a1*c1+a2*c2;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}