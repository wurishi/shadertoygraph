{"ver":"0.1","info":{"id":"Nl2BDh","date":"1666650627","viewed":46,"name":"Phasors","username":"jean80it","description":"Shows how a phasor works to encode a wave","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["phasors"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// This shader is part of several I wrote to create animations\n// to support a presentation about Quantum Electrodynamics.\n// it is not supposed to be \"proof\" for anything, but to provide \n// good visualization of some concepts to help intuition.\n\n\n#define PI 3.1415926\n\n#define sqr(x) (x * x)\n\nvec2 rotate(vec2 p, float a)\n{\n    mat2 r = mat2(\n        cos(a), sin(a),\n        -sin(a), cos(a)\n        );\n        \n    return p * r;\n}\n\nvec2 translate(vec2 p, vec2 newPos)\n{\n    return p - newPos;\n}\n\nfloat sdRect(vec2 p, vec2 size) \n{\n    vec2 d = abs(p) - size / 2.0;\n    return max(d.x, d.y);\n}\n\nfloat combineSdUnion(inout float sd1, float sd2)\n{\n    sd1 = min(sd1, sd2);\n    return sd1;\n}\n\nvec4 drawSd(float d, inout vec4 prevCol, vec4 newCol, float aaTransitionWidth)\n{\n    prevCol = mix(prevCol, newCol, smoothstep(aaTransitionWidth, 0.0, d));\n    return prevCol;\n}\n\nvec4 drawSd(float d, inout vec4 prevCol, vec4 newCol, float mask, float aaTransitionWidth)\n{\n    prevCol = mix(prevCol, newCol, clamp(mask, 0.0, 1.0) * smoothstep(aaTransitionWidth, 0.0, d));\n    return prevCol;\n}\n\n\nfloat sdEllipse(vec2 p, vec2 r)\n{\n    return length(p * r.x / r) - r.x;\n}\n\nfloat sdOutline(float sd, float thickness)\n{\n    return abs(sd) - thickness * 0.5;\n}\n\nfloat sdTriangleIsosceles( in vec2 p, in vec2 q )\n{\n    p.x = abs(p.x);\n    vec2 a = p - q*clamp( dot(p,q)/dot(q,q), 0.0, 1.0 );\n    vec2 b = p - q*vec2( clamp( p.x/q.x, 0.0, 1.0 ), 1.0 );\n    float s = -sign( q.y );\n    vec2 d = min( vec2( dot(a,a), s*(p.x*q.y-p.y*q.x) ),\n                  vec2( dot(b,b), s*(p.y-q.y)  ));\n    return -sqrt(d.x)*sign(d.y);\n}\n\nfloat sdVector(in vec2 p, in float len, in float thickness, in float appPointR, vec2 arrowHeadSize)\n{\n    vec2 arrowLineSize = vec2(thickness, len);\n    float c = sdRect(p - vec2(0.0, (arrowLineSize.y - arrowHeadSize.y) / 2.0), arrowLineSize - vec2(0.0, arrowHeadSize.y));\n    c = min(c, sdEllipse(p, vec2(appPointR)));\n    c = min(c, sdTriangleIsosceles(p - vec2(0.0, arrowLineSize.y), vec2(arrowHeadSize.x, -arrowHeadSize.y)));\n    \n    return c;\n}\n\nfloat sdCosWave(vec2 p, float frequency, float amplitude, float initialPhase, float thickness)\n{\n    return min(abs(p.y - cos(p.x / frequency + initialPhase) * amplitude) - thickness * 0.5,\n                abs(p.y - cos((p.x - thickness * 0.5) / frequency + initialPhase) * amplitude) - thickness * 0.5);\n}\n\nfloat sdSinWave(vec2 p, float frequency, float amplitude, float initialPhase, float thickness)\n{\n    return min(abs(p.y - sin(p.x / frequency + initialPhase) * amplitude) - thickness * 0.5,\n                abs(p.y - sin((p.x - thickness * 0.5) / frequency + initialPhase) * amplitude) - thickness * 0.5);\n}\n\nfloat sdHLine(vec2 p, float thickness)\n{\n    return abs(p.y) - thickness * 0.5; \n}\n\nfloat sdVLine(vec2 p, float thickness)\n{\n    return abs(p.x) - thickness * 0.5; \n}\n\nvec4 hFade()\n{\n    return vec4(0);\n}\n\nvoid drawPhasorDiagram(vec2 p, inout vec4 color, float aaTransitionWidth, float frequency, float amplitude, float currentPhase, float thickness)\n{\n    vec2 phasorHOffs = vec2(-0.5, 0.0);\n    \n    float appPointR = thickness * 2.0;\n    vec2 arrowHeadSize = thickness * vec2(4, 8);\n    \n    \n    drawSd(sdOutline(sdEllipse(translate(p, phasorHOffs),  vec2(amplitude)), thickness), color, vec4(1.0), aaTransitionWidth);\n    drawSd(sdSinWave(translate(p, vec2(0.0, 0.0)), 1.0 / frequency, amplitude, currentPhase + PI * 0.5, thickness), color, vec4(1.0, 0.0, 1.0, 1.0), p.x + 0.3, aaTransitionWidth * 2.0);\n    drawSd(sdHLine(translate(p, vec2(0.0, amplitude * cos(currentPhase))), thickness), color, vec4(1.0), 0.5, aaTransitionWidth);\n    drawSd(sdVLine(translate(p, vec2(0.0, 0.0)), thickness), color, vec4(1.0), 0.5, aaTransitionWidth);\n    drawSd(sdEllipse(translate(p, vec2(0.0, amplitude * cos(currentPhase))), vec2(0.01)), color, vec4(1.0), aaTransitionWidth);\n    drawSd(sdVector(rotate(translate(p, phasorHOffs), currentPhase), amplitude, thickness, appPointR, arrowHeadSize), color, vec4(1.0, 1.0, 0.0, 1.0), aaTransitionWidth);\n    \n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy / iResolution.y;\n    vec2 center = vec2(iResolution.x / iResolution.y / 2.0, 0.5);\n    float aaTransitionWidth = 1.0 / (min(iResolution.x, iResolution.y)) * 2.0;\n    \n    float frequency = 1.5;\n    float frequency2 = 8.0;\n    float initPhase = 0.0;\n    float amplitude = 0.1 + 0.05 * (sin(iTime * 0.8) + 1.0);\n    float currentPhase = iTime * frequency + initPhase;\n    float currentPhase2 = iTime * frequency2 + initPhase;\n    \n    float thickness = 0.003;\n    \n    // background gradient\n    vec4 c = clamp(sqrt(mix(sqr(vec4(0.25, 0.2, 0.1, 1.0)), sqr(vec4(0.1, 0.22, 0.3, 1.0)), clamp(uv.y + uv.x / 2.0, 0.0, 1.0))), 0.0, 1.0);\n    \n    \n    vec2 phasorHOffs = vec2(-0.5, 0.0);\n    \n    \n    drawPhasorDiagram(translate(uv, center + vec2(0.0, 0.25)), c, aaTransitionWidth, frequency, amplitude, currentPhase, thickness);\n    drawPhasorDiagram(translate(uv, center + vec2(0.0, -0.25)), c, aaTransitionWidth, frequency2, amplitude, currentPhase2, thickness);\n    fragColor = c;\n}\n\n\n\n\n\n\n","name":"Image","description":"","type":"image"}]}