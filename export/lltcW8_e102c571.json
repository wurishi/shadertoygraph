{"ver":"0.1","info":{"id":"lltcW8","date":"1532466417","viewed":427,"name":"Ice Cold","username":"VoidChicken","description":"An antialiased ice cube that has the intent of not crashing your computer. If it did, that would be *cold*","likes":11,"published":1,"flags":32,"usePreview":0,"tags":["3d","reflection","raymarch","refraction","raytrace","ice"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sfGzn","filepath":"/media/a/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png","previewfilepath":"/media/ap/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png","type":"cubemap","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3Rr","filepath":"/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","previewfilepath":"/media/ap/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    \n    vec2 v = 1.0/iChannelResolution[0].xy;\n    \n    vec4 b = texture(iChannel0, uv)/2.;\n    b+= texture(iChannel0, uv+vec2(v.x, 0))/16.;\n    b+= texture(iChannel0, uv-vec2(v.x, 0))/16.;\n    b+= texture(iChannel0, uv+vec2(0, v.y))/16.;\n    b+= texture(iChannel0, uv-vec2(0, v.y))/16.;\n    \n    b+= texture(iChannel0, uv+vec2(v.x, v.y))/32.;\n    b+= texture(iChannel0, uv+vec2(v.x, -v.y))/32.;\n    b+= texture(iChannel0, uv+vec2(-v.x, v.y))/32.;\n    b+= texture(iChannel0, uv+vec2(-v.x, -v.y))/32.;\n\n    fragColor = b*clamp(1.2-length(uv*2.-1.)/sqrt(2.),0.,1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4sfGzn","filepath":"/media/a/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png","previewfilepath":"/media/ap/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png","type":"cubemap","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3Rr","filepath":"/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","previewfilepath":"/media/ap/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n\nmat3 rot(vec3 axis, float angle)\n{\n    axis = normalize(axis);\n    float s = sin(angle);\n    float c = cos(angle);\n    float oc = 1.0 - c;\n    \n    return mat3(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,\n                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s, \n                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c\n              );\n}\n\nfloat schlickFresnel(vec3 i, vec3 n, float ior)\n{\n    float r0 = pow((1.-ior)/(1.+ior),2.);\n    float r = r0 + (1.-r0)*pow(1.-cos(mix(acos(-1.),0.,dot(n,i)/2.+.5)),5.);\n    return r;\n}\n\nfloat hash(vec3 p) \n{\n    p  = fract( p*0.3183099+.1 );\n\tp *= 17.0;\n    return fract( p.x*p.y*p.z*(p.x+p.y+p.z) );\n}\n\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n\t\n    return mix(mix(mix( hash(p+vec3(0,0,0)), \n                        hash(p+vec3(1,0,0)),f.x),\n                   mix( hash(p+vec3(0,1,0)), \n                        hash(p+vec3(1,1,0)),f.x),f.y),\n               mix(mix( hash(p+vec3(0,0,1)), \n                        hash(p+vec3(1,0,1)),f.x),\n                   mix( hash(p+vec3(0,1,1)), \n                        hash(p+vec3(1,1,1)),f.x),f.y),f.z);\n}\n\nfloat map(vec3 p)\n{\n\treturn length(max(abs(p)-1.,0.))-(noise(p*5.))/10.;    \n}\n\nvec3 calcNormal( in vec3 x )\n{\n    vec2 e = vec2( .1, 0.0 );\n    return normalize( vec3( map(x+e.xyy) - map(x-e.xyy),\n                            map(x+e.yxy) - map(x-e.yxy),\n                            map(x+e.yyx) - map(x-e.yyx) ) );\n}\n\n\nfloat mapi(vec3 p)\n{\n\treturn p.y-texture(iChannel3,p.xz/5.).r-1.5;\n}\n\nvec3 calcNormali( in vec3 x )\n{\n    vec2 e = vec2( .1, 0.0 );\n    return normalize( vec3( mapi(x+e.xyy) - mapi(x-e.xyy),\n                            mapi(x+e.yxy) - mapi(x-e.yxy),\n                            mapi(x+e.yyx) - mapi(x-e.yyx) ) );\n}\n\n\nfloat trace(vec3 o,vec3 d){\n    float t=0.0;\n\tfor(int i=0;i<64;i++)    \n    {\n        if (t>15.)break;\n     \tt+=map(o+d*t);   \n    }\n    return t;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 m = iMouse.xy;\n    if (iMouse.w<=0.)\n    {\n    \tm=vec2(fract(iTime/30.)*iResolution.x,iResolution.y/2.);    \n    }\n    vec2 uv = fragCoord/iResolution.xy;\n\tvec3 rd = vec3(uv*2.-1.,1);\n    rd=normalize(rd);\n    rd.x*=iResolution.x/iResolution.y;\n    float rt = -m.x/iResolution.x*acos(-1.)*4.;\n    float rtY = clamp(m.y/iResolution.y*acos(-1.)-acos(-1.)/2.,0.,acos(-1.));\n    mat3 mtx=  rot(vec3(0,1,0),rt)*rot(vec3(1,0,0),-rtY);\n    rd=mtx*rd;\n    vec3 ro = rot(vec3(0,1,0),rt+acos(-1.))*rot(vec3(1,0,0),rtY)*vec3(0,0,(acos(-1.)+min((m.y/iResolution.y*acos(-1.)-acos(-1.)/2.),0.))*1.3);\n    \n    \n    \n    vec3 col = texture(iChannel0,rd).rgb;\n\n    float t = trace(ro, rd);\n    vec3 h = ro+rd*t;\n    \n    if (map(h)<.1)\n    {\n        vec3 n = calcNormal(h);\n        \n        float f = schlickFresnel(rd,-n,1.309);\n        \n        col=mix(texture(iChannel0, refract(rd,n,1.309)).rgb*vec3(1,1.1,1.3),texture(iChannel0,reflect(rd,n)).rgb*vec3(1,1.05,1.1),f);\n    \t\n    }\n    \n    float dy = ro.y+1.;\n    \n    float tp = dy/-rd.y;\n    \n    if (tp>0.&&(tp<t||map(h)>.1))\n    {\n        \n        float t2 = 0.;\n        vec3 td = rd*vec3(1,-1,1);\n        vec3 th = ro+rd*tp;\n        t2=trace(th,td);\n        vec3 c = vec3(0);\n        float m=0.;\n        if ((m=map(th+td*t2))<.1)\n        {\n            vec3 n = calcNormal(th+td*t2);\n        \n            float f = schlickFresnel(td,-n,1.309);\n\n            c=mix(texture(iChannel0, refract(td,n,1.309)).rgb*vec3(1,1.1,1.3),texture(iChannel0,reflect(td,n)).rgb*vec3(1,1.05,1.1),f);\n\n        }\n        \n        float ao = clamp(map(th+vec3(0,1,0)/2.)/.05,.3,1.);\n        \n        //texture(iChannel0,rd*vec3(1,-1,1)\n        float ice = 1.-clamp(dot(th.xz,th.xz)/10.,0.,1.);\n        vec3 gt = mix(texture(iChannel1,th.xz/5.).rrr,texture(iChannel3,th.xz/5.).rrr*vec3(1,1.1,1.3),ice);\n        vec3 n = vec3(0,1,0);\n        vec3 iceNormal = calcNormali(th);\n        n=mix(n,iceNormal,ice/2.);\n    \tcol=mix(gt,mix(c,mix(texture(iChannel0,n).rgb,texture(iChannel2,n).rgb,texture(iChannel1,th.xz/5.).r),clamp(m-.1,0.,1.)),mix(.1+ice*.1,1.,schlickFresnel(-rd,n,1.5)));    \n    \tcol=mix(col,texture(iChannel0,rd).rgb,clamp(tp/50.,0.,1.))*ao;\n    }\n    \n    \n    vec3 reds = vec3(1,0,.05);\n    vec3 greens = vec3(0,1,.08);\n    vec3 blues = vec3(0,0,1);\n    \n  \tcol=reds*col.r+greens*col.g+blues*col.b;  \n  \n    fragColor = pow(vec4(col,1.0),vec4(1./1.3));\n    \n    fragColor *= clamp(iTime,0.,1.);\n}","name":"Buf A","description":"","type":"buffer"}]}