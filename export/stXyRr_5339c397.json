{"ver":"0.1","info":{"id":"stXyRr","date":"1647474271","viewed":235,"name":"Shattered Visualizer (EPILEPTIC)","username":"MrHAX00","description":"This is what I was trying to do initially before I accidentally ended up making a fractal while messing around with some parameters  (https://www.shadertoy.com/view/sdBfWt be aware its even more flashing than this one lol)","likes":8,"published":1,"flags":64,"usePreview":0,"tags":["visualizer","songvisualizer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XtlSDf","filepath":"https://soundcloud.com/zeropage/second-wave-remix-2?in=yuri_x/sets/white-lab-soundtracks&utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing","previewfilepath":"https://soundcloud.com/zeropage/second-wave-remix-2?in=yuri_x/sets/white-lab-soundtracks&utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define DrawArch(Volume, Distance) smoothstep(Volume + .01, Volume - .01, Distance - .0125) - smoothstep(Volume + .01, Volume - .01, Distance + .0125)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float Zoom = 0.;\n    \n    for (int Type = 0; Type <= 1; Type++) {\n        for (int i = 0; i <= 20; i++) {\n            float Loudness = texelFetch(iChannel0, ivec2(i, Type), 0).x;\n            if (Loudness > Zoom) {\n                Zoom = Loudness;\n            }\n        }\n    }\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    float AspectRatio = iResolution.x / iResolution.y;\n    uv.x *= AspectRatio;\n    uv -= vec2(AspectRatio * .5, .5);\n    uv *= Zoom;\n    uv *= 2.;\n    //Rotation is from https://www.shadertoy.com/view/XlsGWf\n    float Rotate = mod(Zoom, 2.) * pi;\n    mat2 m = mat2(cos(Rotate), -sin(Rotate), sin(Rotate), cos(Rotate));\n   \tuv = m * uv;\n\n    float Distance = length(uv);\n    float Angle = .5 - (acos(dot(vec2(1., 0.), uv / Distance)) / pi) * .5;\n    \n    if (uv.y <= 0.) {\n        Angle = .5 - Angle + .5;\n    }\n    \n    vec3 Color;\n    float Fetched = texelFetch(iChannel0, ivec2(floor(Angle * 20.) * 25.7, 0.), 0).x;\n    float Temp = (iTime + texelFetch(iChannel0, ivec2(floor(Angle * 20.) * 25.7, 1.), 0).x + Angle * 2.) * pi;\n    vec3 Apply = vec3(cos(Temp + pi * .333333) * .5 + .5, cos(Temp + pi * .666666) * .5 + .5, -cos(Temp) * .5 + .5);\n    \n    if (Distance > Fetched)  {\n        for (float i = 0.; i <= 1.; i += .1) {\n            float Arch = DrawArch(Fetched + log(1. + i), Distance);\n\n            if (Arch > 0.) {\n                Color += Apply * (1. - i);\n                break;\n            }\n        }\n    } else {\n        for (float i = 0.; i <= Fetched; i += .1) {\n            float Arch = DrawArch(Fetched - log(1. + i), Distance);\n\n            if (Arch > 0.) {\n                Color += Apply * (1. - i);\n                break;\n            }\n        }\n    }\n    \n    Fetched += 1.;\n    if (Distance < Fetched) {\n        Distance = (Distance / Fetched) * Zoom;\n        Color = Color * (1. - Distance) + Apply * Distance;\n    } else {\n        Distance = (1. - (Fetched - Distance)) * Zoom;\n        Color = Color * (1. - Distance) + Apply * Distance;\n    }\n    fragColor = vec4(Color, 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define pi 3.14159","name":"Common","description":"","type":"common"}]}