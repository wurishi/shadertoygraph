{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"////////////////////////////////////////////////////////////////////////////////\n// some extra operators for our GA\n//\n// - all defined here instead of a header to allow dumping of code straight in\n// to Processing, http://www.shadertoy.com, http://glsl.heroku.com etc.\n////////////////////////////////////////////////////////////////////////////////\n\n// basic operands for addition, subtraction,\n// multiplication and division\nfloat add(float a, float b) { return a + b; }\nfloat sub(float a, float b) { return a - b; }\nfloat div(float a, float b) { return a / b; }\nfloat mul(float a, float b) { return a * b; }\n\n// the following are operators that perform boolean operations\n// > 0.5 is true < 0.5 is false\n\n// converts a boolean to a float - 1. for True 0. for false\nfloat btof(bool b) { return b ? 1. : 0.; }\n\n// converts a float to a boolean\nbool ftob(float f) { return fract(abs(f)) > 0.5; }\n\n// not for floats\nfloat fnot(float f) { return 1.0 - f; }\n\n// less than and greater than\nfloat lt(float a, float b) { return btof(a < b); }\nfloat gt(float a, float b) { return btof(a > b); }\n\n// if, then, else\nfloat iff(float f, float then, float els) { return f > 0.5 ? then : els; }\n\n// and, or, xor\nfloat and(float a, float b) { return btof(ftob(a) && ftob(b)); }\nfloat or (float a, float b) { return btof(ftob(a) || ftob(b)); }\nfloat xor(float a, float b) { return btof(ftob(a) ^^ ftob(b)); }\n\n// ors, ands, xors, less than and greater than's  that return one of\n// there incoming values instead of just on or off\nfloat anda(float a, float b) { return ftob(a) && ftob(b) ? a : 0.; }\nfloat andb(float a, float b) { return ftob(a) && ftob(b) ? b : 0.; }\nfloat ora (float a, float b) { return ftob(a) || ftob(b) ? a : 0.; }\nfloat orb (float a, float b) { return ftob(a) || ftob(b) ? b : 0.; }\nfloat xora(float a, float b) { return ftob(a) ^^ ftob(b) ? a : 0.; }\nfloat xorb(float a, float b) { return ftob(a) ^^ ftob(b) ? b : 0.; }\nfloat lta (float a, float b) { return a < b ? a : 0.; }\nfloat ltb (float a, float b) { return a < b ? b : 0.; }\nfloat gta (float a, float b) { return a > b ? a : 0.; }\nfloat gtb (float a, float b) { return a > b ? b : 0.; }\n\n// unipolar versions of bipolar functions\nfloat unisin(float f) { return sin(f) * 0.5 + 0.5; }\nfloat unicos(float f) { return cos(f) * 0.5 + 0.5; }\nfloat unitan(float f) { return tan(f) * 0.5 + 0.5; }\nfloat uniasin(float f) { return asin(f) * 0.5 + 0.5; }\nfloat uniacos(float f) { return acos(f) * 0.5 + 0.5; }\nfloat uniatan(float f) { return atan(f) * 0.5 + 0.5; }\n\n////////////////////////////////////////////////////////////////////////////////\n// the actual shader code starts here\n////////////////////////////////////////////////////////////////////////////////\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // normalize x and y values\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n    // get how long shader has been running\n    float t = iTime * 3.;\n\n    // move and scale viewport\n    float x = uv.x * 50. - 25.5;\n    float y = uv.y * 5. - 2.5;\n\n\t\n    ////////////////////////////////////////////////////////////////////////////\n    // function generated by GA\n    ////////////////////////////////////////////////////////////////////////////\n \tfloat v= smoothstep(xorb(clamp(abs(x), smoothstep(xora(t, y), t, mul(t, t)), gt(sub(t, y), clamp(t, t, t))), xor(gta(y, log(x)), clamp(t, sqrt(x), mod(y, y)))), iff(pow(mix(sqrt(t), gtb(x, x), unisin(t)), y), x, log2(min(clamp(x, t, t), uniacos(x)))), mix(y, unicos(x), iff(gtb(lt(x, y), clamp(x, t, y)), mul(lta(x, y), iff(t, x, t)), mix(gtb(y, y), orb(x, y), mix(t, x, y)))));\n    // output our function\n    fragColor = vec4(v, v, v, 1.0);\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"lslSRN","date":"1397925183","viewed":147,"name":"floop","username":"triss","description":"randomly generated function","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["generated"],"hasliked":0,"parentid":"","parentname":""}}