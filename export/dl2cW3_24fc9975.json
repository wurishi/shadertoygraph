{"ver":"0.1","info":{"id":"dl2cW3","date":"1692891300","viewed":49,"name":"Multiframe","username":"tancredi","description":"A temporal multiframe test","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["multiframe"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // remapping on [0,1]x[0,1]\n    vec2 uv = fragCoord/iResolution.xy;\n\n    fragColor = mix(\n        readBuffer(getFrame(uv,0.)),\n        readBuffer(uv),\n        smoothstep(-.3,.3,sin(iTime * 3.14 * .2))\n    );\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec4 currentFrame(vec2 uv) {\n    // uv in [0,1]x[0,1]\n    uv = (uv - .5) * ratio;\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    // just an effect depending on frameIx\n    uv.x -= ratio.x*.5*sin(iTime*3.14);\n    float c = smoothstep(-eps, eps, length(uv) - .3);\n\n    col = mix(1.-col, col, 1.-c);\n    return vec4(col,1.0);\n}\n\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // setting global variable ratio\n    ratio = iResolution.xy/iResolution.y;\n\n    // remapping on [0,1]x[0,1]\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec2 uv_f = frameCoords(uv);\n    float frameIx = frameIndex(uv);\n\n    \n    // frame stack push\n    if (frameIx > 0.) {\n        fragColor = readBuffer(getFrame(uv_f,frameIx-1.));\n    } else {\n        fragColor = currentFrame(uv_f);\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define N 4.\n#define eps .005\n\n#define readBuffer(v) texture(iChannel0, v)\n\nvec2 ratio;\n\nvec2 getFrame(vec2 uv, float index) {\n    float iy = floor(index/N);\n    float ix = index-iy*N;\n    uv = uv / N;\n    return uv + vec2(ix,iy) / N;\n}\n\nfloat frameIndex(vec2 uv) {\n    vec2 index = floor(uv * N);\n    return index.y*N + index.x;\n}\n\nvec2 frameCoords(vec2 uv) {\n    //return (fract(uv * N) - .5)*ratio;\n    return fract(uv * N);\n}\n","name":"Common","description":"","type":"common"}]}