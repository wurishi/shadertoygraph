{"ver":"0.1","info":{"id":"4fVGWK","date":"1713287400","viewed":70,"name":"Spectral to RGB visualization","username":"nestor","description":"Left to right: 400 to 700 wl range\nRows:\n1) L = Spectral Power Distribution (edit w/ mouse)\n2) f = RGB Spectral Sensitivity Curve of a sensor\n3) f*L = RGB response to the spectrum (per wl)\n4) integral of f*L for all wavelengths = RGB perceived by the cam","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["visualization","spectral"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Visualization of Spectrum -> RGB conversions by an RGB response curve\n// Click and move mouse to change the spectrum\n\n// Left to right: 400 to 700 nm wl range\n// Rows:\n// 1) L = Spectral Power Distribution -> this would be, e.g., the output of a spectral renderer\n// 2) f = RGB Spectral Sensitivity Curve of a camera\n// 3) f*L = RGB response to the spectrum (per wl)\n// 4) integral of f*L for all wavelengths = RGB perceived by the camera\n// Try setting V=2 below to see the discretization of the integral in two additional rows\n\n// Interesting stuff: \n// If you click near the top, the spectrum will be smoother\n// and the integral, easier to approximate, so (4) and (6: see below) \n// will be very similar even for low <SAMPLES> count.\n// However, clicking near the bottom makes the spectrum\n// more peaked, which is more difficult to approximate with few samples\n\n\n// V:\n// 0 -> show only rows (1) to (3)\n// 1 -> show 1-4 rows\n// 2 -> add two rows showing the discretization:\n//      - 5) sampling L*f at SAMPLES bands\n//      - 6) sum of the boxes in (5). This is equal to the integral when SAMPLES is large enough (Riemann sum)\n#define V 2\n\n\n// Uses the human ciexyz curve instead of the camera function\n// (and then converts to srgb for display)\n#define XYZ\n\n// Number of spectral samples for (5) and (6). Converges quickly:\n#define SAMPLES 5\n\n// Number of spectral samples for (4). Converges quickly (for this L and f):\n#define REF_SAMPLES 32\n\n\n// Enable to modify the response instead of the spectrum:\n//#define ANIMATE_RESPONSE\n//#define MOUSE_RESPONSE\n\n\n#ifndef ANIMATE_RESPONSE\n    // Comment or pause to stop changing the SPD:\n    #define ANIMATE\n#endif\n\n#define GAMMA\nconst float EXP = 2.; // only for (4)\n\n// when enabled, converts to RGB before multiplying \n// with the spectrum and integrating: this gives different results\n//#define PRECONVERT_XYZ\n\n#ifdef XYZ\nconst vec2 WL_RANGE_cmf = CIEXYZ_SPAN;\nconst int N_WLS = CIEXYZ_SAMPLES;\n#else\nconst vec2 WL_RANGE_cmf = CAM_WL_RANGE;\nconst int N_WLS = N_RESPONSE;\n#endif\n\n\nconst vec2 WL_RANGE = vec2(400.0, 700.0);\n\n\n// ---------------------------------- Spectrum ----------------------------------\n// A spectral power distribution, e.g. what a spectral renderer would output per wavelength\n// wl -> Irradiance\n// In this case, it uses the noise function above to return a smooth random spectrum that \n// Depends on the mouse position, but it could be any other function\nfloat spd(float u) {\n#ifndef MOUSE_RESPONSE\n    vec2 mouse = 25.0*vec2(iMouse.xy / iResolution.y);\n#else\n    vec2 mouse = vec2(0.);\n#endif\n#ifdef ANIMATE\n    mouse += iTime;\n#endif\n    float v = 1.*value_noise(vec2(4.0*u-mouse));\n    \n    return pow(v+0.15,(0.75-0.7*iMouse.y/iResolution.y)*20.);\n    \n    //u = 1.-u;\n    //return u*u; // this example gives a nice blue\n}\n\n// ------------------------ Spectral Sensitivity Function ----------------------------------\n// Also known as sensor response curve, etc.\n\n#ifndef XYZ\n// Sample the response function (in Common)\n// given wl in [400,700]\n// Returns RGB response\nvec3 sensitivity(float wl) {\n    float extent = WL_RANGE_cmf.y-WL_RANGE_cmf.x;\n    float i_float = (wl-WL_RANGE_cmf.x)/extent; // 0 to 1\n    \n    #ifdef ANIMATE_RESPONSE\n    // These options are much slower\n    // I think its bc without them, the response is known at compile time\n    i_float = mix(i_float, 0.8*i_float, 0.5+0.5*cos(iTime*.6));\n    #endif\n    #ifdef MOUSE_RESPONSE\n    i_float = mix(i_float, 0.8*i_float, iMouse.x/iResolution.x);\n    #endif\n    //i_float *= 0.8;\n    \n    int i = int(floor(i_float * float(N_WLS))); // 0 to length\n    \n    \n    // linear interp between the two neighboring ones:\n    float t = fract(i_float * float(N_WLS));\n    return mix(response[i],response[i+1],t); // Note: should take more care with the i+1!\n}\n#else\n// This version uses the xyz curve instead\nvec3 sensitivity(float wl) {\n    float extent = WL_RANGE_cmf.y-WL_RANGE_cmf.x;\n    float i_float = (wl-WL_RANGE_cmf.x)/extent; // 0 to 1\n    \n    int i = int(floor(i_float * float(N_WLS))); // 0 to length\n    \n    // linear interp between the two neighboring ones:\n    float t = fract(i_float * float(N_WLS));\n    #ifdef PRECONVERT_XYZ\n    // Wrong results\n    return xyz2srgb(mix(ciexyz[i],ciexyz[i+1],t));\n    #else\n    return (mix(ciexyz[i],ciexyz[i+1],t));\n    #endif\n}\n\n#endif\n\n// ------------------------ Integration ----------------------------------\n// Integrates L*f using <samples> uniform samples\nvec3 integrate(int samples, vec2 range) {\n    vec3 col = vec3(0.);\n    for (int i=0;i<samples;i++) {\n        float x = (float(i)+0.5)/float(samples); // important to center the samples if using few\n        float wl = mix(range.x, range.y, x);\n\n        float s = spd(x);\n        vec3 r = sensitivity(wl);\n\n        col += r*s;\n    }\n    col /= float(samples);\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col = vec3(0.0);\n\n    float wl = mix(WL_RANGE.x, WL_RANGE.y, uv.x);\n    \n#if V == 0\n    \n    if (uv.y > 0.66) {\n        col = vec3(spd(uv.x));\n    }\n    else if (uv.y>0.33) {\n        col = 1.0*sensitivity(wl);\n    }\n    else {\n        col = 1.0*sensitivity(wl);\n        col *= vec3(spd(uv.x));\n    }\n\n#elif V == 1\n    if (uv.y > 0.75) {\n        col = vec3(spd(uv.x));\n    }\n    else if (uv.y>0.5) {\n        col = sensitivity(wl);\n        \n    }\n    else if (uv.y>0.25) {\n        col = 1.0*sensitivity(wl);\n        col *= vec3(spd(uv.x));\n        \n    }\n    else {\n        col = integrate(SAMPLES, WL_RANGE);\n        col = 1.0 - exp(-col * EXP);\n    }\n#else\n    if (uv.y > 0.75) {\n        col = vec3(spd(uv.x));\n    }\n    else if (uv.y>0.5) {\n        col = sensitivity(wl);\n        \n    }\n    else if (uv.y>0.375) {\n        // Continuous f*L (response to the spectrum, per wl)\n        col = 1.0*sensitivity(wl);\n        col *= vec3(spd(uv.x));\n        \n    }\n    else if (uv.y>0.25) {\n        col = integrate(REF_SAMPLES, WL_RANGE);\n        col = 1.0 - exp(-col * EXP);\n        \n    }\n    else if (uv.y>0.125) {\n        // Show discretization\n        \n        float x = uv.x;\n        //x = 0.5/float(SAMPLES-1)+(floor(x*float(SAMPLES)))/float(SAMPLES+1);\n        x = (0.5+floor(x*float(SAMPLES)))/float(SAMPLES);\n        \n        wl = mix(WL_RANGE.x, WL_RANGE.y, x);\n\n        float s = spd(x);\n        vec3 r = sensitivity(wl);\n\n        col = r*s;\n    }\n    else {\n        // integral using less samples\n        col = integrate(SAMPLES, WL_RANGE);\n        col = 1.0 - exp(-col * EXP);\n    }\n\n\n#endif\n    #ifdef XYZ\n    // Convert the xyz colors to rgb\n    #ifndef PRECONVERT_XYZ\n    col = xyz2srgb(col); // (Note: first row shouldnt be converted, but its barely noticeable)\n    #endif\n    \n    #endif\n\n    // Gamma ? \n    #ifdef GAMMA\n    //col = col/(1.0+col); // reinhard is too desaturated\n    col = clamp(gamma_correct(col), 0.0, 1.0);\n    #endif\n    \n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"\n// ---------------------------------- NOISE ----------------------------------\n\n// Noise functions from XorDev https://www.shadertoy.com/view/DdBGDh\n\n//Typical pseudo-random hash (white noise)\nfloat hash1(vec2 p)\n{\n    //Generate a pseudo random number from 'p'.\n    return fract(sin(p.x*0.129898 + p.y*0.78233) * 43758.5453);\n}\n//Standard value noise\nfloat value_noise(vec2 p)\n{\n    //Cell (whole number) coordinates\n    vec2 cell = floor(p);\n    //Sub-cell (fractional) coordinates\n    vec2 sub = p - cell;\n    //Cubic interpolation (use sub for linear interpolation)\n    vec2 cube = sub*sub*(3.-2.*sub);\n    //Offset vector\n    const vec2 off = vec2(0,1); \n\n    //Sample cell corners and interpolate between them.\n    return mix( mix(hash1(cell+off.xx), hash1(cell+off.yx), cube.x),\n                mix(hash1(cell+off.xy), hash1(cell+off.yy), cube.x), cube.y);\n}\n// ---------------------------------- end NOISE ----------------------------------\n\n\nvec3 gamma_correct(vec3 linear_srgb)\n{\n    vec3 a = 12.92 * linear_srgb;\n    vec3 b = 1.055 * pow(linear_srgb, vec3(1.0 / 2.4)) - 0.055;\n    vec3 c = step(vec3(0.0031308), linear_srgb);\n    return mix(a, b, c);\n}\n\n\n// ------------------------------ Sensor response curve -------------------------------\n// RGB Response per wavelength (beautiful implementation):\n\n// Canon A2200\n\nconst int N_RESPONSE = 301;\nconst vec3 response[N_RESPONSE] = vec3[](\n    vec3(0.0094923,\t0.030999,\t0.030999),\n    vec3(0.00945942,\t0.0316734,\t0.035251),\n    vec3(0.00942654,\t0.0323478,\t0.039503),\n    vec3(0.00939366,\t0.0330222,\t0.043755),\n    vec3(0.00936078,\t0.0336966,\t0.048007),\n    vec3(0.0093279,\t0.034371,\t0.052259),\n    vec3(0.01072192,\t0.0400582,\t0.0593772),\n    vec3(0.01211594,\t0.0457454,\t0.0664954),\n    vec3(0.01350996,\t0.0514326,\t0.0736136),\n    vec3(0.01490398,\t0.0571198,\t0.0807318),\n    vec3(0.016298,\t0.062807,\t0.08785),\n    vec3(0.0226966,\t0.0756456,\t0.142908),\n    vec3(0.0290952,\t0.0884842,\t0.197966),\n    vec3(0.0354938,\t0.1013228,\t0.253024),\n    vec3(0.0418924,\t0.1141614,\t0.308082),\n    vec3(0.048291,\t0.127,\t0.36314),\n    vec3(0.0518274,\t0.135548,\t0.409612),\n    vec3(0.0553638,\t0.144096,\t0.456084),\n    vec3(0.0589002,\t0.152644,\t0.502556),\n    vec3(0.0624366,\t0.161192,\t0.549028),\n    vec3(0.065973,\t0.16974,\t0.5955),\n    vec3(0.065936,\t0.173992,\t0.610488),\n    vec3(0.065899,\t0.178244,\t0.625476),\n    vec3(0.065862,\t0.182496,\t0.640464),\n    vec3(0.065825,\t0.186748,\t0.655452),\n    vec3(0.065788,\t0.191,\t0.67044),\n    vec3(0.0650314,\t0.195252,\t0.682562),\n    vec3(0.0642748,\t0.199504,\t0.694684),\n    vec3(0.0635182,\t0.203756,\t0.706806),\n    vec3(0.0627616,\t0.208008,\t0.718928),\n    vec3(0.062005,\t0.21226,\t0.73105),\n    vec3(0.0612484,\t0.215802,\t0.741746),\n    vec3(0.0604918,\t0.219344,\t0.752442),\n    vec3(0.0597352,\t0.222886,\t0.763138),\n    vec3(0.0589786,\t0.226428,\t0.773834),\n    vec3(0.058222,\t0.22997,\t0.78453),\n    vec3(0.0574696,\t0.235652,\t0.79093),\n    vec3(0.0567172,\t0.241334,\t0.79733),\n    vec3(0.0559648,\t0.247016,\t0.80373),\n    vec3(0.0552124,\t0.252698,\t0.81013),\n    vec3(0.05446,\t0.25838,\t0.81653),\n    vec3(0.0537034,\t0.262636,\t0.8215),\n    vec3(0.0529468,\t0.266892,\t0.82647),\n    vec3(0.0521902,\t0.271148,\t0.83144),\n    vec3(0.0514336,\t0.275404,\t0.83641),\n    vec3(0.050677,\t0.27966,\t0.84138),\n    vec3(0.0499204,\t0.284628,\t0.844202),\n    vec3(0.0491638,\t0.289596,\t0.847024),\n    vec3(0.0484072,\t0.294564,\t0.849846),\n    vec3(0.0476506,\t0.299532,\t0.852668),\n    vec3(0.046894,\t0.3045,\t0.85549),\n    vec3(0.0461414,\t0.310188,\t0.85688),\n    vec3(0.0453888,\t0.315876,\t0.85827),\n    vec3(0.0446362,\t0.321564,\t0.85966),\n    vec3(0.0438836,\t0.327252,\t0.86105),\n    vec3(0.043131,\t0.33294,\t0.86244),\n    vec3(0.0423744,\t0.341484,\t0.862402),\n    vec3(0.0416178,\t0.350028,\t0.862364),\n    vec3(0.0408612,\t0.358572,\t0.862326),\n    vec3(0.0401046,\t0.367116,\t0.862288),\n    vec3(0.039348,\t0.37566,\t0.86225),\n    vec3(0.0385914,\t0.388498,\t0.857916),\n    vec3(0.0378348,\t0.401336,\t0.853582),\n    vec3(0.0370782,\t0.414174,\t0.849248),\n    vec3(0.0363216,\t0.427012,\t0.844914),\n    vec3(0.035565,\t0.43985,\t0.84058),\n    vec3(0.035528,\t0.45627,\t0.837678),\n    vec3(0.035491,\t0.47269,\t0.834776),\n    vec3(0.035454,\t0.48911,\t0.831874),\n    vec3(0.035417,\t0.50553,\t0.828972),\n    vec3(0.03538,\t0.52195,\t0.82607),\n    vec3(0.0360544,\t0.528352,\t0.820304),\n    vec3(0.0367288,\t0.534754,\t0.814538),\n    vec3(0.0374032,\t0.541156,\t0.808772),\n    vec3(0.0380776,\t0.547558,\t0.803006),\n    vec3(0.038752,\t0.55396,\t0.79724),\n    vec3(0.038711,\t0.557498,\t0.790048),\n    vec3(0.03867,\t0.561036,\t0.782856),\n    vec3(0.038629,\t0.564574,\t0.775664),\n    vec3(0.038588,\t0.568112,\t0.768472),\n    vec3(0.038547,\t0.57165,\t0.76128),\n    vec3(0.0392256,\t0.575186,\t0.744066),\n    vec3(0.0399042,\t0.578722,\t0.726852),\n    vec3(0.0405828,\t0.582258,\t0.709638),\n    vec3(0.0412614,\t0.585794,\t0.692424),\n    vec3(0.04194,\t0.58933,\t0.67521),\n    vec3(0.0418988,\t0.59144,\t0.65585),\n    vec3(0.0418576,\t0.59355,\t0.63649),\n    vec3(0.0418164,\t0.59566,\t0.61713),\n    vec3(0.0417752,\t0.59777,\t0.59777),\n    vec3(0.041734,\t0.59988,\t0.57841),\n    vec3(0.0424084,\t0.611286,\t0.563344),\n    vec3(0.0430828,\t0.622692,\t0.548278),\n    vec3(0.0437572,\t0.634098,\t0.533212),\n    vec3(0.0444316,\t0.645504,\t0.518146),\n    vec3(0.045106,\t0.65691,\t0.50308),\n    vec3(0.045069,\t0.667606,\t0.485866),\n    vec3(0.045032,\t0.678302,\t0.468652),\n    vec3(0.044995,\t0.688998,\t0.451438),\n    vec3(0.044958,\t0.699694,\t0.434224),\n    vec3(0.044921,\t0.71039,\t0.41701),\n    vec3(0.0455954,\t0.72609,\t0.401228),\n    vec3(0.0462698,\t0.74179,\t0.385446),\n    vec3(0.0469442,\t0.75749,\t0.369664),\n    vec3(0.0476186,\t0.77319,\t0.353882),\n    vec3(0.048293,\t0.78889,\t0.3381),\n    vec3(0.051114,\t0.801732,\t0.32518),\n    vec3(0.053935,\t0.814574,\t0.31226),\n    vec3(0.056756,\t0.827416,\t0.29934),\n    vec3(0.059577,\t0.840258,\t0.28642),\n    vec3(0.062398,\t0.8531,\t0.2735),\n    vec3(0.0645076,\t0.868086,\t0.26344),\n    vec3(0.0666172,\t0.883072,\t0.25338),\n    vec3(0.0687268,\t0.898058,\t0.24332),\n    vec3(0.0708364,\t0.913044,\t0.23326),\n    vec3(0.072946,\t0.92803,\t0.2232),\n    vec3(0.074336,\t0.93801,\t0.213858),\n    vec3(0.075726,\t0.94799,\t0.204516),\n    vec3(0.077116,\t0.95797,\t0.195174),\n    vec3(0.078506,\t0.96795,\t0.185832),\n    vec3(0.079896,\t0.97793,\t0.17649),\n    vec3(0.081286,\t0.97932,\t0.17001),\n    vec3(0.082676,\t0.98071,\t0.16353),\n    vec3(0.084066,\t0.9821,\t0.15705),\n    vec3(0.085456,\t0.98349,\t0.15057),\n    vec3(0.086846,\t0.98488,\t0.14409),\n    vec3(0.0875244,\t0.984842,\t0.13976),\n    vec3(0.0882028,\t0.984804,\t0.13543),\n    vec3(0.0888812,\t0.984766,\t0.1311),\n    vec3(0.0895596,\t0.984728,\t0.12677),\n    vec3(0.090238,\t0.98469,\t0.12244),\n    vec3(0.0880504,\t0.983218,\t0.11882),\n    vec3(0.0858628,\t0.981746,\t0.1152),\n    vec3(0.0836752,\t0.980274,\t0.11158),\n    vec3(0.0814876,\t0.978802,\t0.10796),\n    vec3(0.0793,\t0.97733,\t0.10434),\n    vec3(0.0763968,\t0.975858,\t0.1014374),\n    vec3(0.0734936,\t0.974386,\t0.0985348),\n    vec3(0.0705904,\t0.972914,\t0.0956322),\n    vec3(0.0676872,\t0.971442,\t0.0927296),\n    vec3(0.064784,\t0.96997,\t0.089827),\n    vec3(0.063312,\t0.96492,\t0.086928),\n    vec3(0.06184,\t0.95987,\t0.084029),\n    vec3(0.060368,\t0.95482,\t0.08113),\n    vec3(0.058896,\t0.94977,\t0.078231),\n    vec3(0.057424,\t0.94472,\t0.075332),\n    vec3(0.0566714,\t0.938244,\t0.0717134),\n    vec3(0.0559188,\t0.931768,\t0.0680948),\n    vec3(0.0551662,\t0.925292,\t0.0644762),\n    vec3(0.0544136,\t0.918816,\t0.0608576),\n    vec3(0.053661,\t0.91234,\t0.057239),\n    vec3(0.0529044,\t0.904428,\t0.0529048),\n    vec3(0.0521478,\t0.896516,\t0.0485706),\n    vec3(0.0513912,\t0.888604,\t0.0442364),\n    vec3(0.0506346,\t0.880692,\t0.0399022),\n    vec3(0.049878,\t0.87278,\t0.035568),\n    vec3(0.0519834,\t0.86773,\t0.0319492),\n    vec3(0.0540888,\t0.86268,\t0.0283304),\n    vec3(0.0561942,\t0.85763,\t0.0247116),\n    vec3(0.0582996,\t0.85258,\t0.0210928),\n    vec3(0.060405,\t0.84753,\t0.017474),\n    vec3(0.0617992,\t0.842482,\t0.0167216),\n    vec3(0.0631934,\t0.837434,\t0.0159692),\n    vec3(0.0645876,\t0.832386,\t0.0152168),\n    vec3(0.0659818,\t0.827338,\t0.0144644),\n    vec3(0.067376,\t0.82229,\t0.013712),\n    vec3(0.0737744,\t0.814378,\t0.0136708),\n    vec3(0.0801728,\t0.806466,\t0.0136296),\n    vec3(0.0865712,\t0.798554,\t0.0135884),\n    vec3(0.0929696,\t0.790642,\t0.0135472),\n    vec3(0.099368,\t0.78273,\t0.013506),\n    vec3(0.1315284,\t0.767666,\t0.0141806),\n    vec3(0.1636888,\t0.752602,\t0.0148552),\n    vec3(0.1958492,\t0.737538,\t0.0155298),\n    vec3(0.2280096,\t0.722474,\t0.0162044),\n    vec3(0.26017,\t0.70741,\t0.016879),\n    vec3(0.299488,\t0.696636,\t0.016842),\n    vec3(0.338806,\t0.685862,\t0.016805),\n    vec3(0.378124,\t0.675088,\t0.016768),\n    vec3(0.417442,\t0.664314,\t0.016731),\n    vec3(0.45676,\t0.65354,\t0.016694),\n    vec3(0.486774,\t0.644198,\t0.0166528),\n    vec3(0.516788,\t0.634856,\t0.0166116),\n    vec3(0.546802,\t0.625514,\t0.0165704),\n    vec3(0.576816,\t0.616172,\t0.0165292),\n    vec3(0.60683,\t0.60683,\t0.016488),\n    vec3(0.63613,\t0.596772,\t0.016447),\n    vec3(0.66543,\t0.586714,\t0.016406),\n    vec3(0.69473,\t0.576656,\t0.016365),\n    vec3(0.72403,\t0.566598,\t0.016324),\n    vec3(0.75333,\t0.55654,\t0.016283),\n    vec3(0.767598,\t0.539326,\t0.016246),\n    vec3(0.781866,\t0.522112,\t0.016209),\n    vec3(0.796134,\t0.504898,\t0.016172),\n    vec3(0.810402,\t0.487684,\t0.016135),\n    vec3(0.82467,\t0.47047,\t0.016098),\n    vec3(0.824634,\t0.453256,\t0.0160568),\n    vec3(0.824598,\t0.436042,\t0.0160156),\n    vec3(0.824562,\t0.418828,\t0.0159744),\n    vec3(0.824526,\t0.401614,\t0.0159332),\n    vec3(0.82449,\t0.3844,\t0.015892),\n    vec3(0.82087,\t0.37148,\t0.015851),\n    vec3(0.81725,\t0.35856,\t0.01581),\n    vec3(0.81363,\t0.34564,\t0.015769),\n    vec3(0.81001,\t0.33272,\t0.015728),\n    vec3(0.80639,\t0.3198,\t0.015687),\n    vec3(0.798478,\t0.307596,\t0.01565),\n    vec3(0.790566,\t0.295392,\t0.015613),\n    vec3(0.782654,\t0.283188,\t0.015576),\n    vec3(0.774742,\t0.270984,\t0.015539),\n    vec3(0.76683,\t0.25878,\t0.015502),\n    vec3(0.76035,\t0.252302,\t0.015461),\n    vec3(0.75387,\t0.245824,\t0.01542),\n    vec3(0.74739,\t0.239346,\t0.015379),\n    vec3(0.74091,\t0.232868,\t0.015338),\n    vec3(0.73443,\t0.22639,\t0.015297),\n    vec3(0.728664,\t0.21991,\t0.0152558),\n    vec3(0.722898,\t0.21343,\t0.0152146),\n    vec3(0.717132,\t0.20695,\t0.0151734),\n    vec3(0.711366,\t0.20047,\t0.0151322),\n    vec3(0.7056,\t0.19399,\t0.015091),\n    vec3(0.703418,\t0.18894,\t0.015054),\n    vec3(0.701236,\t0.18389,\t0.015017),\n    vec3(0.699054,\t0.17884,\t0.01498),\n    vec3(0.696872,\t0.17379,\t0.014943),\n    vec3(0.69469,\t0.16874,\t0.014906),\n    vec3(0.691786,\t0.165122,\t0.0155804),\n    vec3(0.688882,\t0.161504,\t0.0162548),\n    vec3(0.685978,\t0.157886,\t0.0169292),\n    vec3(0.683074,\t0.154268,\t0.0176036),\n    vec3(0.68017,\t0.15065,\t0.018278),\n    vec3(0.676552,\t0.147036,\t0.0189524),\n    vec3(0.672934,\t0.143422,\t0.0196268),\n    vec3(0.669316,\t0.139808,\t0.0203012),\n    vec3(0.665698,\t0.136194,\t0.0209756),\n    vec3(0.66208,\t0.13258,\t0.02165),\n    vec3(0.659896,\t0.130392,\t0.0223286),\n    vec3(0.657712,\t0.128204,\t0.0230072),\n    vec3(0.655528,\t0.126016,\t0.0236858),\n    vec3(0.653344,\t0.123828,\t0.0243644),\n    vec3(0.65116,\t0.12164,\t0.025043),\n    vec3(0.646826,\t0.119452,\t0.025002),\n    vec3(0.642492,\t0.117264,\t0.024961),\n    vec3(0.638158,\t0.115076,\t0.02492),\n    vec3(0.633824,\t0.112888,\t0.024879),\n    vec3(0.62949,\t0.1107,\t0.024838),\n    vec3(0.626586,\t0.1077968,\t0.0255124),\n    vec3(0.623682,\t0.1048936,\t0.0261868),\n    vec3(0.620778,\t0.1019904,\t0.0268612),\n    vec3(0.617874,\t0.0990872,\t0.0275356),\n    vec3(0.61497,\t0.096184,\t0.02821),\n    vec3(0.58631,\t0.0925694,\t0.028173),\n    vec3(0.55765,\t0.0889548,\t0.028136),\n    vec3(0.52899,\t0.0853402,\t0.028099),\n    vec3(0.50033,\t0.0817256,\t0.028062),\n    vec3(0.47167,\t0.078111,\t0.028025),\n    vec3(0.443008,\t0.0737768,\t0.02440628),\n    vec3(0.414346,\t0.0694426,\t0.02078756),\n    vec3(0.385684,\t0.0651084,\t0.01716884),\n    vec3(0.357022,\t0.0607742,\t0.01355012),\n    vec3(0.32836,\t0.05644,\t0.0099314),\n    vec3(0.299698,\t0.0499592,\t0.00794512),\n    vec3(0.271036,\t0.0434784,\t0.00595884),\n    vec3(0.242374,\t0.0369976,\t0.00397256),\n    vec3(0.213712,\t0.0305168,\t0.00198628),\n    vec3(0.18505,\t0.024036,\t0.0),\n    vec3(0.1599654,\t0.024036,\t0.00047308),\n    vec3(0.1348808,\t0.024036,\t0.00094616),\n    vec3(0.1097962,\t0.024036,\t0.00141924),\n    vec3(0.0847116,\t0.024036,\t0.00189232),\n    vec3(0.059627,\t0.024036,\t0.0023654),\n    vec3(0.0552928,\t0.024036,\t0.00304392),\n    vec3(0.0509586,\t0.024036,\t0.00372244),\n    vec3(0.0466244,\t0.024036,\t0.00440096),\n    vec3(0.0422902,\t0.024036,\t0.00507948),\n    vec3(0.037956,\t0.024036,\t0.005758),\n    vec3(0.0350528,\t0.024036,\t0.005758),\n    vec3(0.0321496,\t0.024036,\t0.005758),\n    vec3(0.0292464,\t0.024036,\t0.005758),\n    vec3(0.0263432,\t0.024036,\t0.005758),\n    vec3(0.02344,\t0.024036,\t0.005758),\n    vec3(0.02344,\t0.024036,\t0.005758),\n    vec3(0.02344,\t0.024036,\t0.005758),\n    vec3(0.02344,\t0.024036,\t0.005758),\n    vec3(0.02344,\t0.024036,\t0.005758),\n    vec3(0.02344,\t0.024036,\t0.005758),\n    vec3(0.02344,\t0.024036,\t0.005758),\n    vec3(0.02344,\t0.024036,\t0.005758),\n    vec3(0.02344,\t0.024036,\t0.005758),\n    vec3(0.02344,\t0.024036,\t0.005758),\n    vec3(0.02344,\t0.024036,\t0.005758),\n    vec3(0.02344,\t0.024036,\t0.005758),\n    vec3(0.02344,\t0.024036,\t0.005758),\n    vec3(0.02344,\t0.024036,\t0.005758),\n    vec3(0.02344,\t0.024036,\t0.005758),\n    vec3(0.02344,\t0.024036,\t0.005758),\n    vec3(0.02344,\t0.024036,\t0.005758),\n    vec3(0.02344,\t0.024036,\t0.005758),\n    vec3(0.02344,\t0.024036,\t0.005758),\n    vec3(0.02344,\t0.024036,\t0.005758),\n    vec3(0.02344,\t0.024036,\t0.005758)\n);\nconst vec2 CAM_WL_RANGE = vec2(400.0,700.0);\n\n\n// -------------------- CIE XYZ 2006 ----------------------------\n\n// Source http://cvrl.ioo.ucl.ac.uk/index.htm:\n\nconst vec2 CIEXYZ_SPAN = vec2(380.0, 830.0);\nconst int CIEXYZ_SAMPLES = 89;\nconst vec3 ciexyz[CIEXYZ_SAMPLES] = vec3[](\n    vec3(3.769647E-03,4.146161E-04,1.847260E-02),\n    vec3(9.382967E-03,1.059646E-03,4.609784E-02),\n    vec3(2.214302E-02,2.452194E-03,1.096090E-01),\n    vec3(4.742986E-02,4.971717E-03,2.369246E-01),\n    vec3(8.953803E-02,9.079860E-03,4.508369E-01),\n    vec3(1.446214E-01,1.429377E-02,7.378822E-01),\n    vec3(2.035729E-01,2.027369E-02,1.051821E+00),\n    vec3(2.488523E-01,2.612106E-02,1.305008E+00),\n    vec3(2.918246E-01,3.319038E-02,1.552826E+00),\n    vec3(3.227087E-01,4.157940E-02,1.748280E+00),\n    vec3(3.482554E-01,5.033657E-02,1.917479E+00),\n    vec3(3.418483E-01,5.743393E-02,1.918437E+00),\n    vec3(3.224637E-01,6.472352E-02,1.848545E+00),\n    vec3(2.826646E-01,7.238339E-02,1.664439E+00),\n    vec3(2.485254E-01,8.514816E-02,1.522157E+00),\n    vec3(2.219781E-01,1.060145E-01,1.428440E+00),\n    vec3(1.806905E-01,1.298957E-01,1.250610E+00),\n    vec3(1.291920E-01,1.535066E-01,9.991789E-01),\n    vec3(8.182895E-02,1.788048E-01,7.552379E-01),\n    vec3(4.600865E-02,2.064828E-01,5.617313E-01),\n    vec3(2.083981E-02,2.379160E-01,4.099313E-01),\n    vec3(7.097731E-03,2.850680E-01,3.105939E-01),\n    vec3(2.461588E-03,3.483536E-01,2.376753E-01),\n    vec3(3.649178E-03,4.277595E-01,1.720018E-01),\n    vec3(1.556989E-02,5.204972E-01,1.176796E-01),\n    vec3(4.315171E-02,6.206256E-01,8.283548E-02),\n    vec3(7.962917E-02,7.180890E-01,5.650407E-02),\n    vec3(1.268468E-01,7.946448E-01,3.751912E-02),\n    vec3(1.818026E-01,8.575799E-01,2.438164E-02),\n    vec3(2.405015E-01,9.071347E-01,1.566174E-02),\n    vec3(3.098117E-01,9.544675E-01,9.846470E-03),\n    vec3(3.804244E-01,9.814106E-01,6.131421E-03),\n    vec3(4.494206E-01,9.890228E-01,3.790291E-03),\n    vec3(5.280233E-01,9.994608E-01,2.327186E-03),\n    vec3(6.133784E-01,9.967737E-01,1.432128E-03),\n    vec3(7.016774E-01,9.902549E-01,8.822531E-04),\n    vec3(7.967750E-01,9.732611E-01,5.452416E-04),\n    vec3(8.853376E-01,9.424569E-01,3.386739E-04),\n    vec3(9.638388E-01,8.963613E-01,2.117772E-04),\n    vec3(1.051011E+00,8.587203E-01,1.335031E-04),\n    vec3(1.109767E+00,8.115868E-01,8.494468E-05),\n    vec3(1.143620E+00,7.544785E-01,5.460706E-05),\n    vec3(1.151033E+00,6.918553E-01,3.549661E-05),\n    vec3(1.134757E+00,6.270066E-01,2.334738E-05),\n    vec3(1.083928E+00,5.583746E-01,1.554631E-05),\n    vec3(1.007344E+00,4.895950E-01,1.048387E-05),\n    vec3(9.142877E-01,4.229897E-01,0.000000E+00),\n    vec3(8.135565E-01,3.609245E-01,0.000000E+00),\n    vec3(6.924717E-01,2.980865E-01,0.000000E+00),\n    vec3(5.755410E-01,2.416902E-01,0.000000E+00),\n    vec3(4.731224E-01,1.943124E-01,0.000000E+00),\n    vec3(3.844986E-01,1.547397E-01,0.000000E+00),\n    vec3(2.997374E-01,1.193120E-01,0.000000E+00),\n    vec3(2.277792E-01,8.979594E-02,0.000000E+00),\n    vec3(1.707914E-01,6.671045E-02,0.000000E+00),\n    vec3(1.263808E-01,4.899699E-02,0.000000E+00),\n    vec3(9.224597E-02,3.559982E-02,0.000000E+00),\n    vec3(6.639960E-02,2.554223E-02,0.000000E+00),\n    vec3(4.710606E-02,1.807939E-02,0.000000E+00),\n    vec3(3.292138E-02,1.261573E-02,0.000000E+00),\n    vec3(2.262306E-02,8.661284E-03,0.000000E+00),\n    vec3(1.575417E-02,6.027677E-03,0.000000E+00),\n    vec3(1.096778E-02,4.195941E-03,0.000000E+00),\n    vec3(7.608750E-03,2.910864E-03,0.000000E+00),\n    vec3(5.214608E-03,1.995557E-03,0.000000E+00),\n    vec3(3.569452E-03,1.367022E-03,0.000000E+00),\n    vec3(2.464821E-03,9.447269E-04,0.000000E+00),\n    vec3(1.703876E-03,6.537050E-04,0.000000E+00),\n    vec3(1.186238E-03,4.555970E-04,0.000000E+00),\n    vec3(8.269535E-04,3.179738E-04,0.000000E+00),\n    vec3(5.758303E-04,2.217445E-04,0.000000E+00),\n    vec3(4.058303E-04,1.565566E-04,0.000000E+00),\n    vec3(2.856577E-04,1.103928E-04,0.000000E+00),\n    vec3(2.021853E-04,7.827442E-05,0.000000E+00),\n    vec3(1.438270E-04,5.578862E-05,0.000000E+00),\n    vec3(1.024685E-04,3.981884E-05,0.000000E+00),\n    vec3(7.347551E-05,2.860175E-05,0.000000E+00),\n    vec3(5.259870E-05,2.051259E-05,0.000000E+00),\n    vec3(3.806114E-05,1.487243E-05,0.000000E+00),\n    vec3(2.758222E-05,1.080001E-05,0.000000E+00),\n    vec3(2.004122E-05,7.863920E-06,0.000000E+00),\n    vec3(1.458792E-05,5.736935E-06,0.000000E+00),\n    vec3(1.068141E-05,4.211597E-06,0.000000E+00),\n    vec3(7.857521E-06,3.106561E-06,0.000000E+00),\n    vec3(5.768284E-06,2.286786E-06,0.000000E+00),\n    vec3(4.259166E-06,1.693147E-06,0.000000E+00),\n    vec3(3.167765E-06,1.262556E-06,0.000000E+00),\n    vec3(2.358723E-06,9.422514E-07,0.000000E+00),\n    vec3(1.762465E-06,7.053860E-07,0.000000E+00)\n);\n\n\nvec3 xyz2srgb(vec3 xyz) {\n    // From https://github.com/tobspr/GLSL-Color-Spaces\n    const mat3 XYZ_2_RGB = (mat3(\n         3.2404542,-0.9692660, 0.0556434,\n        -1.5371385, 1.8760108,-0.2040259,\n        -0.4985314, 0.0415560, 1.0572252\n    ));\n    return XYZ_2_RGB * xyz;\n}\n\n","name":"Common","description":"","type":"common"}]}