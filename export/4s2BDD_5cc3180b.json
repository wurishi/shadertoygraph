{"ver":"0.1","info":{"id":"4s2BDD","date":"1500528091","viewed":106,"name":"Pass Right","username":"ethanbee","description":"Attempt at approximating pass-right dithering in a shader. Every frame, it adds the quantization error from the pixel to the left.","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["dither","buffer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// main\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    //vec2 pxoffset = vec2(mod(iTime, 10.)*-30., 0.);\n    vec2 pxoffset = vec2(0.);\n    vec2 uv2 = (fragCoord.xy - pxoffset) / iResolution.xy;\n    vec3 c = texture(iChannel0, uv2).xyz;\n    \n\tc = step(vec3(0.5), c);\n\t\n    fragColor = vec4(c.rgb,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// buf A\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n        \n    vec3 firstFrameImg = texture(iChannel3, uv).xyz;\n    vec3 bufBcolor = texture(iChannel1, uv).xyz;;\n    vec3 c;\n    // Imprint image periodically\n    float frameIndex = mod(float(iFrame),200.);\n    if (  frameIndex == 1. ) {\n        bufBcolor = firstFrameImg;\n        \n    }\n    \n\t// Copy Buffer B into Buffer A\n    fragColor = vec4(bufBcolor.rrr,1.0);\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// buf b\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    //float pxIndex = mod(iTime, 100.);\n    float pxIndex = (1.) ;\n    vec2 lastuv = vec2((fragCoord.x - pxIndex), fragCoord.y) / iResolution.xy;\n    \n    vec3 a = texture(iChannel0, uv).xyz;\n    vec3 am1 = texture(iChannel0, lastuv).xyz;\n\n    vec3 err;\n    if (step(.5, am1.r) > .5){\n    \terr = vec3(1.) - am1;\n    } else {\n    \terr = vec3(0.) - am1;\n    }\n    \n    err *= 0.05; // tamp down a bit (inexact)\n    vec3 o;\n    \n    o = a + err;\n    //o = err ;\n    \n    fragColor = vec4(o.rgb,1.0);\n}","name":"Buf B","description":"","type":"buffer"}]}