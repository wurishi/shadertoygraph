{"ver":"0.1","info":{"id":"DsyfWc","date":"1698692124","viewed":95,"name":"triangles and stars","username":"nayk","description":"stars,galaxy, illusion,copy past","likes":9,"published":1,"flags":1,"usePreview":0,"tags":["galaxy","illusion","stars","copypast"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* https://www.shadertoy.com/view/3sj3DV  https://www.shadertoy.com/view/lt3XRM and stars https://www.shadertoy.com/view/lslyR */\n#define iterations 17\n#define formuparam 0.53\n\n#define volsteps 20\n#define stepsize 0.1\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.000 \n\n#define brightness 0.0015\n#define darkmatter 0.300\n#define distfading 0.730\n#define saturation 0.850\n\n#define ENABLE_ANTIALIAS\n\n#define PI2 6.28318530718\n#define NUMTRI 21\n\nconst float TWO_PI = 6.28;\nconst float PI = 3.14;\n\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),sin(_angle),cos(_angle));\n}\n\nmat2 scale(vec2 _scale){\n    return mat2(_scale.x,0.0,0.0,_scale.y);\n}\n\n\nvec4 drawShape(vec2 uv, vec2 position, int sides,float size, vec3 color) {\n\tuv -= vec2(position.x,position.y);\n    // Angle from current pixel\n  \tfloat a = atan(uv.x,uv.y)+PI;\n    // radius from current pixel\n \tfloat r = 2.0*PI/float(sides);\n  \t// modulate the distance\n  \tfloat d = cos(floor(.5+a/r)*r-a)*length(uv);\n\t//define the edges, and make smooth\n  \tvec4 shape = vec4(smoothstep(size+.01,size,d));\n  \t//color the shape\n    shape.rgb*=color;\n\treturn shape;\n}\n\nfloat triangle(in vec2 uv, float size, float rotation)\n{\n    float crot = cos(rotation);\n    float srot = sin(rotation);\n    uv = vec2(dot(uv, vec2(crot, -srot)), dot(uv, vec2(srot, crot)));\n   \n    float dist = max(max(-2.0 * uv.y, uv.y - uv.x * sqrt(3.0)), uv.y + uv.x * sqrt(3.0)); // Equilateral Tri.\n    \n    if(dist > size)\n        return 0.0;\n    else\n        return 1.0;\n}\n\nfloat evaluate(in vec2 uv, float scaledTime)\n{\n    float value = 0.0;\n    for(int i=0; i<NUMTRI; ++i)\n    {\n        float fi = float(i);\n        float rotDir = mod(fi, 2.0) * 2.0 - 1.0;\n        float tridelay = fi * 0.05;\n        float time = smoothstep(tridelay, tridelay + 1.0, scaledTime) * PI2 / 3.0;\n    \tvalue += triangle(uv, fi * 0.025, time * rotDir);\n    }\n\n    return mod(value, 2.0);\n}\n\nfloat sampleImage(in vec2 uv, float scaledTime, float pixSize)\n{\n    float sampleValue;\n\n \n    sampleValue  = evaluate(uv + vec2(-0.375, 0.125) * pixSize, scaledTime);\n    sampleValue += evaluate(uv + vec2(0.125, 0.375) * pixSize, scaledTime);\n    sampleValue += evaluate(uv + vec2(0.375, -0.125) * pixSize, scaledTime);\n    sampleValue += evaluate(uv + vec2(-0.125, -0.375) * pixSize, scaledTime);\n   \tsampleValue /= 4.0;\n\n    \n    return sampleValue;\n}\n\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 ro, in vec3 rd )\n{\n\t//get coords and direction\n\tvec3 dir=rd;\n\tvec3 from=ro;\n\t\n\t//volumetric rendering\n\tfloat s=0.1,fade=1.;\n\tvec3 v=vec3(0.);\n\tfor (int r=0; r<volsteps; r++) {\n\t\tvec3 p=from+s*dir*.5;\n\t\tp = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\n\t\tfloat pa,a=pa=0.;\n\t\tfor (int i=0; i<iterations; i++) { \n\t\t\tp=abs(p)/dot(p,p)-formuparam; // the magic formula\n\t\t\ta+=abs(length(p)-pa); // absolute sum of average change\n\t\t\tpa=length(p);\n\t\t}\n\t\tfloat dm=max(0.,darkmatter-a*a*.001); //dark matter\n\t\ta*=a*a; // add contrast\n\t\tif (r>6) fade*=1.-dm; // dark matter, don't render near\n\t\t//v+=vec3(dm,dm*.5,0.);\n\t\tv+=fade;\n\t\tv+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\n\t\tfade*=distfading; // distance fading\n\t\ts+=stepsize;\n\t}\n\tv=mix(vec3(length(v)),v,saturation); //color adjust\n\tfragColor = vec4(v*.03,1.);\t\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t//get coords and direction\n\tvec2 uv=fragCoord.xy/iResolution.xy-.5;\n\tuv.y*=iResolution.y/iResolution.x;\n\tvec3 dir=vec3(uv*zoom,iTime*0.005);\n\tfloat time=iTime*speed+.25;\n\n\tfloat pixSize = 1.0 / iResolution.y;// assume wider than tall\n\t uv = vec2(0.5) - fragCoord.xy * pixSize; \n    uv.x -= (iResolution.y - iResolution.x) / iResolution.y * 0.5;\n\tuv.y += 0.08;// move stuff up a bit\n    \n    \n    float scaledTime = mod(iTime, 16.0) * 0.2;\n    \n    float value = sampleImage(uv, scaledTime, pixSize);\n  \n  vec2 res = iResolution.xy;\n    \n    \n    \n    uv+= rotate2d(iTime) * uv;\n    \n    //background color\n   \tvec4 background = vec4(0.0);\n  \t\n    // draw shapes\n    float pathRadius = 1.0;\n    float numberToPlot = 30.0;\n    vec4 shapes = vec4(0.0);\n    \n    for(float i=0.0;i<TWO_PI;i+=TWO_PI/numberToPlot){\n    \tuv = rotate2d(iTime*.1) * uv+ i*.1;\n        uv = scale( vec2(sin(iTime - cos(i*iTime*.2))*.1 + 1.)) * uv;\n    \tvec3 color = vec3(.3,.5*sin(i),.9);\n  \t\tint sides = 3;\n        float size = .05;\n    \tvec2 position = vec2(cos(i+iTime*.5),sin(i+iTime));\n        position*=pathRadius * sin(iTime);\n    \tvec4 shape = drawShape(uv,position,sides,size,color);    \n    \t\n    \tshapes += shape;\n    }  \n    \n    \n    fragColor= vec4(value,value,value, 1.0);\n    fragColor= mix(background, shapes, shapes.a);\n\tfloat a1=.5+iMouse.x/iResolution.x*2.;\n\tfloat a2=.8+iMouse.y/iResolution.y*2.;\n\tmat2 rot1=mat2(cos(a1),sin(a1),-sin(a1),cos(a1));\n\tmat2 rot2=mat2(cos(a2),sin(a2),-sin(a2),cos(a2));\n\tdir.xz*=rot1;\n\tdir.xy*=rot2;\n    fragColor+= vec4(value,value,value, 1.0);\n\tvec3 from=vec3(1.,.5,0.5)+ fragColor.xyz;\n\tfrom+=vec3(time*2.,time,-2.);\n\tfrom.xz*=rot1;\n\tfrom.xy*=rot2;\n\t\n\tmainVR(fragColor, fragCoord, from, dir);\n      \n    \n}\n","name":"Image","description":"","type":"image"}]}