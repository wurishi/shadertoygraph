{"ver":"0.1","info":{"id":"ddXSWH","date":"1668924505","viewed":104,"name":"stars from natron plugins","username":"axiomgraph","description":"stars","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["stars"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//\n//\n//                          MMMMMMMMMMMMMMMMMMMMMMMMMMMM\n//                        MM.                          .MM\n//                       MM.  .MMMMMMMMMMMMMMMMMMMMMM.  .MM\n//                      MM.  .MMMMMMMMMMMMMMMMMMMMMMMM.  .MM\n//                     MM.  .MMMM        MMMMMMM    MMM.  .MM\n//                    MM.  .MMM           MMMMMM     MMM.  .MM\n//                   MM.  .MmM              MMMM      MMM.  .MM\n//                  MM.  .MMM                 MM       MMM.  .MM\n//                 MM.  .MMM                   M        MMM.  .MM\n//                MM.  .MMM                              MMM.  .MM\n//                 MM.  .MMM                            MMM.  .MM\n//                  MM.  .MMM       M                  MMM.  .MM\n//                   MM.  .MMM      MM                MMM.  .MM\n//                    MM.  .MMM     MMM              MMM.  .MM\n//                     MM.  .MMM    MMMM            MMM.  .MM\n//                      MM.  .MMMMMMMMMMMMMMMMMMMMMMMM.  .MM\n//                       MM.  .MMMMMMMMMMMMMMMMMMMMMM.  .MM\n//                        MM.                          .MM\n//                          MMMMMMMMMMMMMMMMMMMMMMMMMMMM\n//\n//\n//\n//\n// Adaptation pour Natron par F. Fernandez\n// Code original : crok_stars Matchbox pour Autodesk Flame\n\n// Adapted to Natron by F.Fernandez\n// Original code : crok_stars Matchbox for Autodesk Flame\n\n float Speed = 1.0; // Speed : (speed), min=-1000.0, max=1000.0\n float Density = 10.0; // Density : (density), min=0.0, max=10.0\n float Brightness = 1.0; // Brightness : (brightness) min=0.0, max=10.0\n float Seed = 6.5; // Seed : (seed), min=3.0, max=100.0\n\nfloat time = 100.0 *.08 * 1.0;\n\n#define PI  3.141592\n\n// Random number implementation found at: lumina.sourceforge.net/Tutorials/Noise.html\nfloat rand(vec2 co){\n\treturn fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\n// Formulas stars \n// http://www.fractalforums.com/new-theories-and-research/very-simple-formula-for-fractal-patterns/\nfloat Stars(vec3 p) {\n\tvec3 pos=p;\n\tp+=vec3(1.35,1.54,1.23);\n\tp*=.3;\n\tfor (int i=0; i<22; i++) {\n\t\tp.xyz=abs(p.xyz);\n\t\tp=p/dot(p,p);\n\t\tp=p*1.-vec3(.9*Seed*0.1);\n\t}\n\treturn pow(length(p),1.3*Brightness)*.004*(Density+0.75);\n}\n\nfloat random(float p) {\n  return fract(sin(p)*10000. );\n}\n\nfloat noise(vec2 p) {\n  return random(p.x + p.y*10000.);\n}\n\nvec2 sw(vec2 p) {return vec2( floor(p.x) , floor(p.y) );}\nvec2 se(vec2 p) {return vec2( ceil(p.x)  , floor(p.y) );}\nvec2 nw(vec2 p) {return vec2( floor(p.x) , ceil(p.y)  );}\nvec2 ne(vec2 p) {return vec2( ceil(p.x)  , ceil(p.y)  );}\n\nfloat smoothNoise(vec2 p) {\n  vec2 inter = smoothstep(0., 1., fract(p));\n  float s = mix(noise(sw(p)), noise(se(p)), inter.x);\n  float n = mix(noise(nw(p)), noise(ne(p)), inter.x);\n  return mix(s, n, inter.y);\n  return noise(nw(p));\n}\n\nfloat movingNoise(vec2 p) {\n  float total = 0.0;\n  total += smoothNoise(p     - time);\n  total += smoothNoise(p*2.  + time) / 2.;\n  total += smoothNoise(p*4.  - time) / 4.;\n  total /= 1. + 1./2. + 1./4.;\n  return total;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tuv.y*=iResolution.y/iResolution.x;\n\tvec3 dir=normalize(vec3(uv*.5,1.));\n\tvec3 col=vec3(0.);\n\tcol+=vec3(max(0.,.5*Stars(dir*10.)));\n\t\n\tfloat noise = movingNoise(uv* 500. *sin(65.0001));\n\n\tfragColor = vec4(col * noise,1.0);\n}","name":"Image","description":"","type":"image"}]}