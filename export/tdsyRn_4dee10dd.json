{"ver":"0.1","info":{"id":"tdsyRn","date":"1584031854","viewed":120,"name":"hazy moon","username":"tono","description":"a night with a hazy moon.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define FAR 20.\n#define AA 1\n\nfloat t,depth;\nvec3 cp = vec3(0.,-4.,-15.);\n\nvec2 rot(vec2 p,float a){return vec2(mat2( cos(a),sin(a),-sin(a),cos(a))*p );}\nfloat bo(vec3 p,vec3 s){p = abs(p) - s;return max(max(p.x,p.y),p.z);}\nfloat rand(vec2 p){return fract(sin(dot(p,vec2(127.1,317.2))));}\n\n\n//https://www.shadertoy.com/view/XsX3zB\n//---------------------------------------------------------\nvec3 random3(vec3 c) {\n    float j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n    vec3 r;\n    r.z = fract(512.0*j);\n    j *= .125;\n    r.x = fract(512.0*j);\n    j *= .125;\n    r.y = fract(512.0*j);\n    return r-0.5;\n}\n\n/* skew constants for 3d simplex functions */\nconst float F3 =  0.3333333;\nconst float G3 =  0.1666667;\n\n/* 3d simplex noise */\nfloat simplex3d(vec3 p) {\n    /* 1. find current tetrahedron T and it's four vertices */\n    /* s, s+i1, s+i2, s+1.0 - absolute skewed (integer) coordinates of T vertices */\n    /* x, x1, x2, x3 - unskewed coordinates of p relative to each of T vertices*/\n\n    /* calculate s and x */\n    vec3 s = floor(p + dot(p, vec3(F3,F3,F3)));\n    vec3 x = p - s + dot(s, vec3(G3,G3,G3));\n\n    /* calculate i1 and i2 */\n    vec3 e = step(vec3(0.,0.,0.), x - x.yzx);\n    vec3 i1 = e*(1.0 - e.zxy);\n    vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\n    /* x1, x2, x3 */\n    vec3 x1 = x - i1 + G3;\n    vec3 x2 = x - i2 + 2.0*G3;\n    vec3 x3 = x - 1.0 + 3.0*G3;\n\n    /* 2. find four surflets and store them in d */\n    vec4 w, d;\n\n    /* calculate surflet weights */\n    w.x = dot(x, x);\n    w.y = dot(x1, x1);\n    w.z = dot(x2, x2);\n    w.w = dot(x3, x3);\n\n    /* w fades from 0.6 at the center of the surflet to 0.0 at the margin */\n    w = max(0.6 - w, 0.0);\n\n    /* calculate surflet components */\n    d.x = dot(random3(s), x);\n    d.y = dot(random3(s + i1), x1);\n    d.z = dot(random3(s + i2), x2);\n    d.w = dot(random3(s + 1.0), x3);\n\n    /* multiply d by w^4 */\n    w *= w;\n    w *= w;\n    d *= w;\n\n    /* 3. return the sum of the four surflets */\n    return dot(d, vec4(52.0,52.0,52.0,52.0));\n}\n//---------------------------------------------------------\n\nfloat noise (vec3 st) \n{\n    float f = 0.;\n    vec3 q = st;\n    for(int i = 1 ;i < 3;i++){\n        f += simplex3d(q)/pow(2.,float(i));\n        q = q * (2.0+float(i)/100.);\n    }\n    return f;\n}\n\nvec2 map(vec3 p)\n{\n    vec2 d = vec2(0.);\n    vec2 area = floor((p.xz)/(.8));\n    p.xz = mod(p.xz,(.8 ))-(.8)/2.;\n    \n    //p.y += wave(area ,time) ;\n    for(int i = 1; i< 5; i++)\n    {\n        p.y += pow( sin(area.x + t) * cos(area.y + t) ,2.);\n        area = rot(area,acos(-1.)/3.);\n        area += .8 * 60.;\n        area = floor(area /(float(i ) *2.) );\n    }\n    float s = bo(p,vec3(.25,cos(length(p.xz)*1.3),.25));\n    //s = length(p)-.5;\n    d.x = s *.1;\n    return d;\n}\n\nvec2 march(vec3 p,vec3 rd)\n{\n    depth = 0.;\n    vec2 d = vec2(.0);\n    for(int i = 0; i <128; i++)\n    {\n        d = map(p + rd * depth);\n        if(abs(d.x) < 0.00001 || d.x > FAR){break;}\n        depth += d.x;\n    }\n     if(d.x > FAR){d.x = -1.;}\n    return d;\n}\n\nvoid moon(out vec3 color,in vec3 cp,in vec3 rd)\n{\n    color += clamp( pow(  mix( 1.,.5 - noise((cp + rd) * 18. + vec3(0.8,1.7,0.6) * (t + sin(t))/5. ) ,.5),1.5 ),0.,1. );\n}\n\nvoid scene(out vec3 ocolor,in vec2 fragcoord)\n{\n    vec2 p = (fragcoord.xy * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n\t\n    \n    vec3 target = vec3(0.,-7.,0.);\n    vec3 cd = normalize(target - cp);\n    vec3 cs = normalize(cross(vec3(0.,1.,0.),cd));\n    vec3 cu = normalize(cross(cs,cd));\n    \n    float fov = 2. + dot(p,p) * .3;\n    vec3 rd = normalize(cs * p.x + cu * p.y + cd * fov);\n    vec3 skycolor = vec3(.2,.4,.8);\n    vec3 color = skycolor;\n    //vec3(0.5,0.4,-1.)\n    \n    vec3 moonpos = vec3(p.x,p.y - .7,depth);\n    vec3 light = normalize(vec3(.0,.3,.0) - mix(rd , moonpos,0.01));\n    \n   // light.xz = rot(light.xz,sin(time) );\n    vec2 d = vec2(-1.);\n    skycolor += (1. - pow( length(moonpos.xy + cos(moonpos.xy*200.)),2.) )/3.;\n    \n    if(length(moonpos.xy) < .125)\n    {\n        moon(color,cp,rd);\n        color = mix(color,skycolor,pow( length(moonpos.xy) * 8.,6. ) );\n    }else{\n    \td = march(cp,rd);\n    }\n    if(d.x > 0.)\n    {\n        vec2 e = vec2(0.0001,0.);\n        vec3 pos = depth * rd + cp;\n    \tvec3 N = -normalize(map(pos).x - vec3(map(pos - e.xyy).x,map(pos - e.yxy).x,map(pos - e.yyx).x));\n        color = vec3(0.,.5,1.);\n        float dif = pow( max(0.,dot(light,N))*.5+.5,2. );\n        float sp = pow(max(0.,dot(normalize(light + rd),N)),150.);\n        color =color * dif + sp * vec3(1.,1.,1.);\n        \n    }\n    ocolor += mix(color,skycolor,1.-exp(-.000001 *depth * depth* depth));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    t = iTime/2.;\n    depth = 55.;\n    vec3 color = vec3(0.);\n    for(int i = 0;i < AA;i++ )\n    {\n        for(int j = 0; j < AA;j++)\n        {\n            vec2 d = vec2(float(i),float(j)) - vec2(float(i),float(j))/2.;\n            d /= float(AA);\n            scene(color,gl_FragCoord.xy + d);\n        }\n    }\n    color /= float(AA * AA);\n    \n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}