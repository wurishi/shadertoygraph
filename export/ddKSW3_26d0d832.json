{"ver":"0.1","info":{"id":"ddKSW3","date":"1681914984","viewed":106,"name":"MyMandelbulb","username":"DamDC","description":".","likes":7,"published":1,"flags":48,"usePreview":0,"tags":["mandelbulb"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Use KEY UP and KEY DOWN to zoom/dezoom\n// Use KEY RIGHT and KEY LEFT to increase/decrease the degree of the polynomial\n// Use mousse to move arround\n\n\n// polynomial degree\nfloat deg;\n\n\n// https://iquilezles.org/articles/mandelbulb/\nfloat map(in vec3 p, out vec4 col)\n{\n    vec3 z = p;\n\tfloat dz = 1.0;\n    // square of the magnitude of z \n    float m2 = dot(z,z);\n\n    vec4 orbitTrap = vec4(abs(z), m2);\n\n\tfor(int i=0; i<8 && m2 < 4.0; i++)\n    {   \n        // dz = p*z^(p-1)*dz\n\t\tdz = deg*pow(m2,(deg-1.0)/2.0)*dz + 1.0;\n      \n        // extract sperical coordinate\n        float r = length(z);\n        float phi = deg*acos(z.y/r);\n        float theta = deg*atan(z.x, z.z);\n        \n        // z = z^p+c\n        z = pow(r,deg) * vec3(sin(phi)*sin(theta), cos(phi), sin(phi)*cos(theta)) + p;\n\n        orbitTrap = min(orbitTrap, vec4(abs(z),m2));\n\n        m2 = dot(z,z);\n    }\n    col = vec4(m2, orbitTrap.yzw);\n\n    // distance estimation using Hubbard-Douady potential\n    return 0.25*log(m2)*sqrt(m2)/dz;\n}\n\n\n\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal(in vec3 pos)\n{\n    vec4 tmp;\n    const float ep = 0.0001;\n    vec2 e = vec2(1.0,-1.0)*0.5773;\n    return normalize(e.xyy*map( pos + e.xyy*ep, tmp) + \n\t\t\t\t\t e.yyx*map( pos + e.yyx*ep, tmp) + \n\t\t\t\t\t e.yxy*map( pos + e.yxy*ep, tmp) + \n\t\t\t\t\t e.xxx*map( pos + e.xxx*ep, tmp));\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat calcSoftshadow(in vec3 ro, in vec3 rd, float tmin, float tmax, const float k)\n{\n    vec4 tmp;\n\tfloat res = 1.0;\n    float t = tmin;\n    for(int i=0; i<50; i++)\n    {\n\t\tfloat h = map(ro + rd*t, tmp);\n        res = min(res, k*h/t);\n        t += clamp(h, 0.02, 0.20);\n        if(res<0.005 || t>tmax) break;\n    }\n    return clamp(res, 0.0, 1.0);\n    \n}\n\nvec3 localRay;\nvoid CamPolar(out vec3 pos, out vec3 ray, in vec3 origin, in vec2 rotation, in float distance, in float zoom, in vec2 fragCoord)\n{\n\t// get rotation coefficients\n\tvec2 c = vec2(cos(rotation.x),cos(rotation.y));\n\tvec4 s;\n\ts.xy = vec2(sin(rotation.x),sin(rotation.y)); // worth testing if this is faster as sin or sqrt(1.0-cos);\n\ts.zw = -s.xy;\n\n\t// ray in view space\n\tray.xy = fragCoord.xy - iResolution.xy*.5;\n\tray.z = iResolution.y*zoom;\n\tray = normalize(ray);\n\tlocalRay = ray;\n\t\n\t// rotate ray\n\tray.yz = ray.yz*c.xx + ray.zy*s.zx;\n\tray.xz = ray.xz*c.yy + ray.zx*s.yw;\n\t\n\t// position camera\n\tpos = origin - distance*vec3(c.x*s.y,s.z,c.x*c.y);\n}\n\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n   deg = texelFetch(iChannel0, ivec2(0,0),0).x;\n   float zoom = texelFetch(iChannel0, ivec2(0,0),0).y;\n    \n   vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y; \n\n   // Camera\n   vec3 ro, rd;\n   vec2 camRot = vec2(.5,.5)+vec2(-.35,4.5)*(iMouse.yx/iResolution.yx);\n   camRot.x *= 16.0;\n   camRot.y *= 2.0;\n   CamPolar(ro, rd, vec3(0.0), camRot, 3.0, zoom, fragCoord);\n\n\n   vec3 skyColor = vec3(0.714,0.800,0.945) - 0.3 * fragCoord.y/iResolution.y;\n   vec3 col = skyColor;\n   const vec3 light = normalize(vec3(1.0,0.8,-0.2));\n   const vec3 lightColor = vec3(0.988,0.914,0.310);\n   \n   const float tmax = 5.0;\n   vec4 resCol;\n   \n   // Raymarching \n   float t = 0.0;\n   for (int i=0; i<256; i++)\n   {\n\tvec3 p = ro + t*rd;\n\tfloat h = map(p, resCol);\n    \n\tif( h<(0.0005*t) || t>tmax ) break;\n\tt += h;\n   }\n   \n\n\n  // Shading\n   if (t<tmax)\n   {\n    vec3 pos = ro + t*rd;\n    vec3 nor = calcNormal(pos);       \n\n    vec3 hal = normalize(light-rd);\n    float dif = clamp(dot(nor,light),0.0,1.0);\n    float sha = calcSoftshadow( pos, light, 0.001, 1.0, 16.0);\n    float spe1 = pow( clamp(dot(nor,hal),0.0,1.0), 32.0 )*dif*(0.04+0.96*pow(clamp(1.0-dot(hal,light),0.0,1.0),5.0));\n\n    vec3 materialColor = vec3(0.01);\n\tmaterialColor = mix(materialColor, vec3(0.10,0.20,0.30), clamp(resCol.y,0.0,1.0));\n\tmaterialColor = mix(materialColor, vec3(0.02,0.10,0.30), clamp(resCol.z*resCol.z,0.0,1.0));\n    materialColor = mix(materialColor, vec3(0.30,0.10,0.02), clamp(pow(resCol.w,8.0),0.0,1.0));\n\n    \n    vec3 coeff = 6.0*lightColor*dif*sha + 0.25;\n    \n    col = materialColor * coeff;\n    col = sqrt(col);\n    col += spe1*4.0;\n   }\n   else\n   {\n       // sun\n       col += 0.7 * smoothstep(0.95, 1.0, dot(rd, light)) * lightColor;\n   }\n   \n   \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const int KEY_LEFT  = 37;\nconst int KEY_UP    = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN  = 40;\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    float deg = texelFetch(iChannel1, ivec2(0,0), 0).x;\n    float zoom = texelFetch(iChannel1, ivec2(0,0), 0).y;\n    \n    // default values\n    if(iFrame == 0) {\n        deg =8.0;\n        zoom = 1.0;\n    }\n    \n    // Reading input\n   if (texelFetch(iChannel0, ivec2(KEY_RIGHT, 0), 0).r > 0.0)\n       deg += 0.025;\n   if (texelFetch(iChannel0, ivec2(KEY_LEFT, 0), 0).r > 0.0)\n       deg -= 0.025;\n   if (texelFetch(iChannel0, ivec2(KEY_UP, 0), 0).r > 0.0)\n       zoom *= 1.05;\n   if (texelFetch(iChannel0, ivec2(KEY_DOWN, 0), 0).r > 0.0)\n       zoom *= 0.95;\n       \n    fragColor = vec4(deg,zoom, 0.0, 0.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}