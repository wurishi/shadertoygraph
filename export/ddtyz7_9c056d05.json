{"ver":"0.1","info":{"id":"ddtyz7","date":"1694894703","viewed":57,"name":"Koch Fractal Shader X","username":"Domenic3000","description":"Koch Fractal","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal","koch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 Rot(float a) {\n    float s = sin(a), c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\nvec2 N(float angle) {\n    return vec2(sin(angle), cos(angle));\n}\n\nvec3 pallete ( float t ){\nvec3 a = vec3(0.000,0.000,0.000);\nvec3 b = vec3(0.533,0.435,0.925);\nvec3 c = vec3(0.306,0.192,0.192);\nvec3 d = vec3(0.000,0.000,0.000);\nreturn a+b*cos( 6.28318 * (c*t+d));\n}\n\n// Helper function to convert RGB to HSV\nvec3 rgb2hsv(vec3 c) {\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n    \n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\n// Helper function to convert HSV to RGB\nvec3 hsv2rgb(vec3 c) {\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n// Adjust Brightness, Contrast, Hue, Saturation\nvec3 adjustBCSH(vec3 col, float brightness, float contrast, float hue, float saturation) {\n    // Adjust brightness\n    col = col + brightness;\n\n    // Adjust contrast\n    col = (col - 0.5) * contrast + 0.5;\n\n    // Convert to HSV for hue and saturation adjustments\n    vec3 hsv = rgb2hsv(col);\n\n    // Adjust hue\n    hsv.x = fract(hsv.x + hue);\n\n    // Adjust saturation\n    hsv.y *= saturation;\n\n    // Convert back to RGB\n    col = hsv2rgb(hsv);\n    \n    return col;\n}\n\nvec3 brightnessFilter(vec3 color, float threshold) {\n    float brightness = dot(color, vec3(0.299, 0.587, 0.114));\n    return mix(vec3(0.0), color, step(threshold, brightness));\n}\n\nvec3 blur(vec2 uv, vec3 col, vec2 direction) {\n    vec3 result = vec3(0.0);\n    float weight = 1.0 / 9.0;  // For 3x3 kernel\n    for(int x = -1; x <= 1; ++x) {\n        for(int y = -1; y <= 1; ++y) {\n            vec2 offset = vec2(x,y) * direction;\n            result += brightnessFilter(col, 0.8) * weight;\n        }\n    }\n    return result;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    uv *= Rot(iTime*.01);\n    uv+=vec2(0.450, 0.48);\n    uv*= 1.05;\n    uv = 1.*fract(uv)-.0;\n    uv = vec2(uv.x-.5, uv.y-.5);\n    vec3 col = vec3(0);\n    \n    uv.x = abs(uv.x);\n    uv.y += tan((5./6.)*3.14159)*.5;\n    vec2 n = N((5./6.)*3.14159);\n    float d = dot(uv-vec2(.5, 0), n);\n    uv -= n*max(0., d) *2.;\n\n    n = N((2./3.)*3.14159);\n    float scale = 1.;\n    uv.x += .5;\n    for(float i=0.; i<6.; i++) {\n        uv *= 3.;\n        scale *= 3.;\n        uv.x -= 1.5;\n        \n        uv.x = abs(uv.x);\n        uv.x -= .5;\n        uv -= n*min(0., dot(uv, n)) *2.;\n        col += smoothstep(0.0, 2.0, (pallete(length(uv) + i*.4 + iTime).rgb)-.25);\n    }\n    col = clamp(col, 0.0, 1.0);\n    float brightness = 0.05;  // Example value, adjust as needed\n    float contrast = 1.6;    // Example value, adjust as needed\n    float hue = 0.025*iTime;         // Example value, adjust as needed\n    float saturation = 0.8;  // Example value, adjust as needed\n    \n    // Extract bright parts\n    vec3 brightParts = brightnessFilter(col, 0.7);\n    \n    // Blur the bright parts in two passes (X and Y directions)\n    vec3 horizontalBlur = blur(uv, col, vec2(1.5 / iResolution.x, 0.0));\n    vec3 verticalBlur = blur(uv, col, vec2(0.0, 1.5 / iResolution.y));\n    \n    // Combining the two blur directions\n    vec3 finalBlur = 0.5 * (horizontalBlur + verticalBlur);  \n    \n    // Composite the original image and the bloom\n    col = col + finalBlur;\n    col = adjustBCSH(col, brightness, contrast, hue, saturation);\n    col = adjustBCSH(col, brightness, contrast, hue, saturation);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}