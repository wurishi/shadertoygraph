{"ver":"0.1","info":{"id":"lflcR7","date":"1720966982","viewed":40,"name":"Colorful clouds","username":"Reversion","description":"This shader is for a course, Fragment Shader Art (course code: ARTS1308) in ShanghaiTech University as hw8.\n","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d","noise","clouds"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// This shader is for a course, Fragment Shader Art (course code: ARTS1308) \n//      in ShanghaiTech University as hw8.\n// Reference: https://www.shadertoy.com/view/XlsXDB by miloszmaki\n\n#define saturate(x) clamp(x,0.,1.)\n#define rgb(r,g,b) (vec3(r,g,b)/255.)\n\nfloat rand(float x) { return fract(sin(x) * 71.); }\n \nfloat rand(vec2 x) { return rand(dot(x, vec2(13., 15.))); }\n\nfloat noise(vec2 x)\n{\n    vec2 i = floor(x);\n    vec2 f = x - i;\n    f *= f*(3.-2.*f);\n    return mix(mix(rand(i), rand(i+vec2(1,0)), f.x),\n               mix(rand(i+vec2(0,1)), rand(i+vec2(1,1)), f.x), f.y);\n}\n\nfloat fbm(vec2 x)\n{\n    float r = 0.0, s = 1.0, w = 1.0;\n    for (int i=0; i<5; i++)\n    {\n        s *= 2.0;\n        w *= 0.5;\n        r += w * noise(s * x);\n    }\n    return r;\n}\n\nfloat cloud(vec2 uv, float scalex, float scaley, float density, float sharpness, float speed)\n{\n    return pow(saturate(fbm(vec2(scalex,scaley)*(uv+vec2(speed,0)*(iTime+47.)))-(1.0-density)), 1.0-sharpness);\n}\n\nvec3 render(vec2 uv)\n{\n\n    vec3 color = mix(rgb(255,212,166), rgb(204,235,255), uv.y);\n\n    // clouds\n    vec3 cl1 = mix(rgb(151,138,153), rgb(166,191,224),uv.y);\n    float d1 = mix(0.9,0.1,pow(uv.y, 0.7));\n    color = mix(color, cl1, cloud(uv,2.,8.,d1,0.4,0.04));\n    color = mix(color, vec3(0.9), 8.*cloud(uv,1.,1.,0.9,2.0,0.02) * cloud(uv,2.,5.,0.6,0.15,0.01)*uv.y);\n    color = mix(color, vec3(0.8), 5.*cloud(uv,12.,15.,0.9,0.0,0.03) * cloud(uv,2.,8.,0.5,0.0,0.02)*uv.y);\n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv.x -= 0.5;\n    uv.x *= iResolution.x / iResolution.y;\n       \n\tfragColor = vec4(render(uv),1.0);\n}","name":"Image","description":"","type":"image"}]}