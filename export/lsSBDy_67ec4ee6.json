{"ver":"0.1","info":{"id":"lsSBDy","date":"1502215669","viewed":223,"name":"3d noise deform","username":"yumcyawiz","description":".","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 colormap(float x) {\n    float r = clamp(8.0 / 3.0 * x, 0.0, 1.0);\n    float g = clamp(8.0 / 3.0 * x - 1.0, 0.0, 1.0);\n    float b = clamp(4.0 * x - 3.0, 0.0, 1.0);\n    return vec4(r, g, b, 1.0);\n}\n\n\nfloat mod289(float x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 mod289(vec4 x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 perm(vec4 x){return mod289(((x * 34.0) + 1.0) * x);}\n\nfloat noise(vec3 p){\n    vec3 a = floor(p);\n    vec3 d = p - a;\n    d = d * d * (3.0 - 2.0 * d);\n\n    vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);\n    vec4 k1 = perm(b.xyxy);\n    vec4 k2 = perm(k1.xyxy + b.zzww);\n\n    vec4 c = k2 + a.zzzz;\n    vec4 k3 = perm(c);\n    vec4 k4 = perm(c + 1.0);\n\n    vec4 o1 = fract(k3 * (1.0 / 41.0));\n    vec4 o2 = fract(k4 * (1.0 / 41.0));\n\n    vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);\n    vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);\n\n    return o4.y * d.y + o4.x * (1.0 - d.y);\n}\n\n\nfloat fbm(vec3 p) {\n    float r = 0.0;\n    float amp = 1.0;\n    float freq = 1.0;\n    for(int i = 1; i <= 3; i++) {\n        r += amp * noise(freq * p);\n        freq *= pow(2.0, float(i));\n        amp *= pow(2.0, -float(i));\n    }\n    return r;\n}\n\n\nfloat sdSphere(vec3 p, float r) {\n    return length(p) - r;\n}\nfloat udBox( vec3 p, vec3 b )\n{\n  return length(max(abs(p)-b,0.0));\n}\nfloat sdPlane(vec3 p, vec4 n) {\n    return dot(p, n.xyz) + n.w;\n}\nfloat DF(vec3 p) {\n    float d = sdPlane(p, vec4(0, 1, 0, 1));\n    float r = fbm(p + vec3(iTime) + fbm(4.0*p + fbm(4.0*p + vec3(0, iTime, 0))));\n    return max(sdSphere(p, 1.0), r - 0.9);\n}\n\n\nstruct Ray {\n    bool hit;\n    vec3 hitPos;\n    vec3 hitNormal;\n    int steps;\n    float t;\n};\nconst int maxSteps = 30;\nRay trace(vec3 from, vec3 rayDir) {\n    bool hit = false;\n    vec3 hitPos = vec3(0);\n    vec3 hitNormal = vec3(0);\n    int steps = 0;\n    float t = 0.0;\n    for(int i = 0; i < maxSteps; i++) {\n        vec3 p = from + t*rayDir;\n        float d = DF(p);\n        if(d < 0.001) {\n            hit = true;\n            hitPos = p;\n            hitNormal = vec3(0);\n            steps = i;\n            break;\n        }\n        t += d;\n    }\n    return Ray(hit, hitPos, hitNormal, steps, t);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.0*fragCoord.xy - iResolution.xy)/iResolution.y;\n    \n    vec3 camPos = vec3(0, 0, -2);\n    vec3 camFront = vec3(0, 0, 1);\n    vec3 camRight = cross(vec3(0, 1, 0), camFront);\n    vec3 camUp = cross(camRight, camFront);\n    vec3 rayDir = normalize(camFront + uv.x*camRight + uv.y*camUp);\n    \n    Ray tr = trace(camPos, rayDir);\n    vec3 color = vec3(0);\n    if(tr.hit) {\n        float sAO = 1.0 - float(tr.steps)/float(maxSteps);\n        color = sAO * colormap(sAO).xyz;\n    }\n    \n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}