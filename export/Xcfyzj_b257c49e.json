{"ver":"0.1","info":{"id":"Xcfyzj","date":"1721291015","viewed":36,"name":"Appearing and Disappearing ","username":"OFFmind","description":"Simple and nice effect for view appearing/disappearing. Can be used in messaging apps for deletion of the message or in other cases where you want the view nicely appear or disappear","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["noise","android","view"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MULT 3. \n\nfloat rand(vec2 c){\n    return fract(sin(dot(c.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat noise(vec2 p){\n    float unit = 0.02;\n    vec2 ij = floor(p/unit);\n    vec2 xy = mod(p,unit)/unit;\n    xy = .5*(1.-cos(3.1415*xy));\n    float a = rand((ij+vec2(0.,0.)));\n    float b = rand((ij+vec2(1.,0.)));\n    float c = rand((ij+vec2(0.,1.)));\n    float d = rand((ij+vec2(1.,1.)));\n    float x1 = mix(a, b, xy.x);\n    float x2 = mix(c, d, xy.x);\n    return mix(x1, x2, xy.y);\n}\n\nvec3 GetCheckerBg(in vec2 uv) {\n    float time = iTime * 0.2;\n    vec2 rv = uv;\n    \n    vec3 checker = fract(rv*5.).x > 0.5 ? vec3(.04)*MULT : vec3(.01)*MULT;\n    return checker += fract(rv*5.).y > 0.5 ? vec3(.04)*MULT : vec3(.01)*MULT;\n}\n\nfloat GetDissapearFactor() {\n    // Define the duration of each phase\n    float phaseDuration = 1.0;  // 1 second for each phase\n    float totalCycleTime = phaseDuration * 4.0;  // Total cycle time is 4 seconds\n\n    // Calculate the time within the current cycle\n    float cycleTime = mod(iTime, totalCycleTime);\n\n    float dissapearFactor;\n\n    if (cycleTime < phaseDuration) {\n        // Rising phase (0 to 1)\n        dissapearFactor = cycleTime / phaseDuration;\n    } else if (cycleTime < 2.0 * phaseDuration) {\n        // High pause phase (1)\n        dissapearFactor = 1.0;\n    } else if (cycleTime < 3.0 * phaseDuration) {\n        // Falling phase (1 to 0)\n        dissapearFactor = 1.0 - (cycleTime - 2.0 * phaseDuration) / phaseDuration;\n    } else {\n        // Low pause phase (0)\n        dissapearFactor = 0.0;\n    }\n    \n    return dissapearFactor;\n\n}\n \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy - .5;\n    uv.x *= iResolution.x/iResolution.y;\n    uv *= 2.;\n    \n    vec2 sv = uv;\n    \n    float dissapearFactor = GetDissapearFactor();// sin((2.0 * 3.14159265 / 3.0) * iTime) * 0.5 + 0.5;\n\n    uv *= (1.-dissapearFactor*0.1)-(length(uv*dissapearFactor))*.3;\n    \n    float noiseStage = 0.2;\n    \n    vec4 image = texture(iChannel0, uv+.5);\n    if(abs(uv.x)>0.5 || abs(uv.y)>0.5) {\n        image = vec4(0.);\n    }\n    \n    float borders = smoothstep(.5,0.5-0.2*dissapearFactor,length(uv.x))* smoothstep(.5,0.5-0.2*dissapearFactor,length(uv.y));\n    \n    float n =step((dissapearFactor),noise(uv));\n \n    vec3 col = image.rgb*n;\n    \n    float alpha = (1.-dissapearFactor);\n    if(dissapearFactor==0.) {\n        alpha = 1.;\n    }\n    \n    vec3 alphaCol = vec3(alpha);\n    \n    vec3 finlcol = mix(col,vec3(1.)*n*borders,dissapearFactor*dissapearFactor);\n    \n    vec3 col2 = mix(GetCheckerBg(sv),finlcol,n*borders);\n    \n    fragColor = vec4(col2,1.0);\n}","name":"Image","description":"","type":"image"}]}