{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"cubemap","id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"code":"#define GraphicDetail 70\n\nfloat hash(float x)\n{\n\treturn fract(21654.6512 * sin(385.51 * x));\n}\n\nvec2 rotate(vec2 p, float a)\n{\n\treturn vec2(p.x * cos(a) - p.y * sin(a), p.x * sin(a) + p.y * cos(a));\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) +\n         length(max(d,0.0));\n}\n\nfloat sdCylinder( vec3 p, vec3 c )\n{\n  return length(p.xz-c.xy)-c.z;\n}\n\nfloat sdCylinder(vec3 p, vec4 c)\n{\n\treturn max(length(p.xz-c.xy)-c.z,abs(p.y) - c.w);\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\nfloat scene(vec3 p)\n{\n\tvec2 mouse = iMouse.xy / iResolution.xy;\n\tmouse = mouse * 2.0 -1.0;\n\tmouse.x *=  iResolution.x / iResolution.y;\n\t\n\tif(mouse.x  < -0.99 && mouse.y < -0.99)\n\t\tmouse  = vec2(-0.7,0.2);\n\t\n\tp.yz = rotate(p.yz, -mouse.y * 2.0);\t\n\tp.xz = rotate(p.xz, -mouse.x * 2.0);\n\t\n\tfloat ayz = atan(p.y, p.z);\n\tfloat azx = atan(p.z, p.x);\t\n\tfloat axy = atan(p.x, p.y);\t\n\tfloat l = length(p);\n\t\n\treturn length(p) - 1.0 + 0.1 * pow(texture( iChannel0, -1.0 * p ).y,0.15);\n}\n\nvec3 normal(vec3 p)\n{\n\tfloat c = scene(p);\n\tvec3 delta;\n\tvec2 h = vec2(0.01, 0.0);\n\tdelta.x = scene(p + h.xyy) - c;\n\tdelta.y = scene(p + h.yxy) - c;\n\tdelta.z = scene(p + h.yyx) - c;\n\treturn normalize(delta);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tuv = uv * 2.0 -1.0;\n\tuv.x *= iResolution.x / iResolution.y;\n\t\n\tvec2 mouse = iMouse.xy / iResolution.xy;\n\tmouse = mouse * 2.0 -1.0;\n\tmouse.x *=  iResolution.x / iResolution.y;\n\t\n\t\n\tif(mouse.x  < -0.99 && mouse.y < -0.99)\n\t\tmouse  = vec2(-0.7,0.2);\t\n\t\n\tvec3 eye = vec3(0.0,0.0,-0.0);\n\tvec3 dir = normalize(vec3(uv,1.77));\n\t\t\n\tvec3 ray = eye; \n\tfloat d = 1.0;\n\t\n\tfor(int i = 0; i < GraphicDetail;i++)\n\t{\t\n\t\tif (abs(d) < 0.001 || ray.z > float(GraphicDetail))\n\t\t{\t\t\n\t\t\tcontinue;\n\t\t}\t\n\t\t\n\t\td = scene(ray);\n\t\t\t\t\n\t\tray += dir * 0.7 * d;\n\t}\n\t\n\t//Color\n\tvec3 col = vec3(1.0); \n\tvec3 sun = normalize(vec3(0.2, 1.0, -0.3));\n\t\n\tif(distance(eye, ray) < 70.0)\n\t{\n\t\tvec3 nml = normal(ray);\t\t\n\t\tvec3 ref = reflect(dir, nml);\n\t\t\n\t\tfloat diff = dot(ref, sun) * 0.6 + 0.4;\n\n\t\tfloat spec = dot(ref, sun);\n\t\tspec = pow(max(spec, 0.0), 32.0);\n\t\t\n\t\t\n\t\tray.yz = rotate(ray.yz, -mouse.y * 2.0);\t\n\t\tray.xz = rotate(ray.xz, -mouse.x * 2.0);\n\t\t\n\t\t//col = texture( iChannel0, -1.0 * ray ).xyz;\n\t\t//col = vec3(0.0, 0.5, 1.0);\n\t\tcol = col * diff + spec;\n\t\t\n\t\t\n\t\tcol =  col * texture( iChannel0, -1.0 * ray ).xyz;\n\t}\n\t\n\tfragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4ssGDB","date":"1378642288","viewed":596,"name":"Raymarch Cube","username":"asti","description":"I donÂ´t have much time, so I decided to post this version.\nYou can move with the mouse","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["3d","distancefield","raymarch","cubemap"],"hasliked":0,"parentid":"","parentname":""}}