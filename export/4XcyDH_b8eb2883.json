{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"// truchets list https://www.shadertoy.com/playlist/mcSSzG\n\n#define h21(p) fract(sin(dot(p, vec2(83.34,126.534 + floor(0. * t / 4.)))) * 127.23)\n#define t iTime\n#define pi acos(-1.)\n#define TAU (2.* pi)\n\n#define V(i, j) (h21(vec2(i, j)) > .5)\n\n#define atual     V(q.x, q.y)\n#define up        V(q.x     , q.y + 1.)\n#define upRight   V(q.x + 1., q.y + 1.) \n#define upLeft    V(q.x - 1., q.y + 1.) \n#define left      V(q.x - 1., q.y     )\n#define right     V(q.x + 1., q.y     )\n#define downLeft  V(q.x - 1., q.y - 1.)\n#define down      V(q.x     , q.y - 1.)\n#define downRight V(q.x + 1., q.y - 1.)\n\nbool Ponta(vec2 q){\n    return\n        atual && (!downLeft && down && left || !upRight && up && right) ||\n        !atual && (!up && upLeft && !left || downRight && !down &&  !right);\n}\n\nbool rect1(vec2 q){\n    return   \n       up        &&\n       left      &&\n       right     &&\n       down      &&\n       !downLeft &&\n       !upRight;\n}\n\nbool rect2(vec2 q){\n    return   \n       !up      &&\n       !left    &&\n       !right   &&\n       !down    &&\n       upLeft   &&\n       downRight;\n}\n\nbool Square(vec2 q){\n    return \n    \n    atual && (\n                 !down && !right && downRight \n               ||\n                 !up && upLeft && !left        \n             )\n           \n           ||\n           \n   !atual && (\n                 down && left && !downLeft\n               ||\n                 up && right && !upRight\n             )        \n    ;\n}\n\n// -------------------------------------------\n// -- derivados ------------------------------\n\nbool Sep(vec2 q){\n    return \n        rect1(q) && !atual || rect2(q) && atual;\n}\n\nbool Urna(vec2 q){\n    return \n        rect1(q) && atual || rect2(q) && !atual;\n}\n\nbool hellen1(vec2 q){\n    return \n        //Ponta(q) && \n        //!Square(q) && \n        !Sep(q) &&\n     (\n        !atual &&\n        left &&\n        down &&\n        up &&\n        right\n\n      ||\n        atual &&\n        !left &&\n        !down &&\n        !up &&\n        !right\n     )   \n    ;\n}\n\nbool vela(vec2 q){\n    return \n        !atual && !up && !left && !right && !down &&(\n            upLeft && !downRight\n          ||  \n            downRight && !upLeft\n        )\n        \n      ||  \n        atual && up && left && right && down && (          \n            !upRight && downLeft\n          ||  \n            !downLeft && upRight\n        )\n    ;\n}\n\nbool hellen(vec2 q){\n    return (\n        atual && !downLeft && !upRight && (\n            up && right \n\n          ||\n\n            left && down \n        )\n\n          ||\n\n        !atual && upLeft && downRight && (\n            !up && \n            !left\n\n          ||\n            !right && \n            !down \n        )\n    ) && ! Urna(q)\n\n    ;\n}\n\nbool Redsquare(vec2 q){\n    return \n        Square(q) && (\n            !downLeft &&\n            !upRight && \n            down != left &&\n            up != right\n            \n          ||\n            upLeft   && \n            downRight && \n            down != right &&\n            up != left\n        )\n        ;\n}\n\n// -------------------------------------------\n\nvoid mainImage(out vec4 o, vec2 u) {\n    vec2 k, q, p, \n         r = iResolution.xy;\n    \n    float i, d, coin, move = 3.;\n    \n    o *= 0.;\n    u = 20. * (u - r / 2.) / r.y \n            * mat2(cos(pi/4. + vec4(0, 0, 22, 0))) \n                + t * move + 36.;\n    p = u;\n    q = floor(p);\n    p = fract(p) - .5;\n    \n    o += (1. - length(p)) * .5 ; // bg\n    \n    vec4 c1 = vec4(0);\n    \n    \n    if(Square(q)) c1 = vec4(0, 1, 0, 0);\n    if(Urna(q)) c1 = vec4(0, 0, 1, 0);\n    if(Sep(q)) c1 = vec4(0, .35, 0, 0);;\n    if(Ponta(q)) c1 += .5;\n   \n    bool v = vela(q);\n    if(v) c1 = vec4(1);\n    if(hellen(q)) c1 = vec4(.5, .5, 0, 0);\n    \n    if(Redsquare(q)) c1 = vec4(1, 0, 0, 0);\n    \n    \n    if(cos(h21(q) * 6.3 + t) < 0.)\n        v = false;\n              \n    // flip truchet\n    coin = h21(q) > .5 ? 1. : -1.;\n    \n    o = mix(o, \n            c1, \n            smoothstep((v ? 125. : 2.) / r.y, 0., \n                abs(p.x - coin * p.y) - .12));\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4XcyDH","date":"1734990226","viewed":38,"name":"Square truchet - caotic groping","username":"Elsio","description":"ideias?","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["truchet","fill","filigrane","filigranefree"],"hasliked":0,"parentid":"XXcyD8","parentname":"Truchet study #424 square detect"}}