{"ver":"0.1","info":{"id":"sslcDM","date":"1642202478","viewed":170,"name":"Bouncy Plane","username":"Angramme","description":"really basic sound based animation","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["music","bounce","plane"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGzn","filepath":"/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3","previewfilepath":"/media/ap/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define time iTime\n\n#define EPS .001\n#define MAXDIST 100.\n#define BACKGROUND vec3(0.05, 0.03, 0.01)\n\n#define ATone 0.0370;\n\nfloat FrequencyToTexture(float Frequency){\n    return Frequency/440.*ATone;\n}\nfloat AmpAt(float freq){\n    return .5*(\n        texture(iChannel0,vec2(FrequencyToTexture(freq),.25)).x +\n        texture(iChannel0,vec2(FrequencyToTexture(freq-200.),.25)).x);\n}\n\nfloat dist(vec3 pos){\n    //float sp = distance(pos, vec3(0, 0, 0))-.2 - .5*AmpAt(1000.);\n    \n    float amp =\n        AmpAt(20.+20000.*(exp((pos.x+1.5)*.33)-1.)/exp(1.)) + \n        AmpAt(20.+20000.*(exp((pos.z+1.5)*.33)-1.)/exp(1.));\n    //float pl = pos.y+.3 + sin(pos.x*8.+time)*.1 - cos(pos.z*4.+time*.73)*.12;\n    float pl = pos.y+1.4- amp*.55 + cos(pos.y*20.)*.1;\n    \n    return pl;\n}\n\n\nfloat march(vec3 o, vec3 d){\n    float t = 0.0;\n    while(true){\n        vec3 c = o + t*d;\n        float d = dist(c);\n        t += d;\n        if(d<EPS)break;\n        if(t>MAXDIST)break;\n    }\n    return t;\n}\n\nvec3 grad(vec3 p){\n    return (vec3(\n        dist(p+vec3(EPS, 0, 0)),\n        dist(p+vec3(0, EPS, 0)),\n        dist(p+vec3(0, 0, EPS))\n    )-dist(p))/EPS;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-iResolution.xy*.5)/iResolution.y;\n    vec3 col = vec3(0);\n    \n    float A = iMouse.x/iResolution.x*2.*3.14159265359;\n    vec3 O = vec3(0., 1.1, 4);\n    vec3 D = normalize(vec3(uv.x, uv.y-.6, -1));\n    \n    float de = march(O, D);\n    vec3 p = O + de*D;\n    vec3 N = grad(p);\n    float sh = march(p+N*(EPS+.001), normalize(vec3(2, 2, 1.)));\n    \n    if(de < MAXDIST && abs(p.x) < 1.5 && abs(p.z) < 1.5 && sh > MAXDIST){\n        col = N*1.4;\n        //vec3 RD = -reflect(-D, N);\n        //float re = march(p+N*(EPS+.0001), RD);\n        //col += (1.-dot(-D, N))*.45*grad(p+re*RD);\n        float tr = min(.2+dot(-D, N), 1.);\n        col = tr*col + (1.-tr)*BACKGROUND; \n    }else\n        col = BACKGROUND;\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}