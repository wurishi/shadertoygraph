{"ver":"0.1","info":{"id":"7tcyWn","date":"1659819087","viewed":127,"name":"territory","username":"arkanon","description":"country wars simulator i guess\ncontrols:\nspace - toggle blur\na - toggle brightness based on density\nb - toggle colors\nc - toggle borders\nd - reset","likes":3,"published":1,"flags":48,"usePreview":0,"tags":["test","fluid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":2,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 edgedet(vec2 pos) { // find the contrast in each axis\n    vec2 k = vec2(0);\n    return k;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 ocol = texture(iChannel2, fragCoord/iResolution.xy);\n    vec4 col = ocol;\n    if (texelFetch(iChannel1, ivec2(32, 2), 0).r == 0.0) {\n        fragColor = texture(iChannel0, fragCoord/iResolution.xy);\n    }\n    else {\n        float diff = 0.0;\n        vec4 newcol = col;\n        float sum = 1.0;\n        for (int i = 0; i < blur; i++) {\n            float angle = rand31(fragCoord.xyx+iTime*float(i)) * 2.0 - 1.0;\n            angle *= PI;\n            float dist = rand31(fragCoord.yxy+iTime)*10.0+1.0;\n            float d2 = 1.0 / (dist * 0.25 + 0.75);\n            vec2 dir = vec2(cos(angle),sin(angle));\n            vec4 other = texture(iChannel2, (fragCoord+dir*dist)/iResolution.xy);\n            vec3 d = abs(other.rgb-ocol.rgb);\n            if (dot(d,d) < 0.07) {\n                diff += d2;\n            }\n            col += other * d2;\n            sum += d2;\n        }\n        col /= sum;\n        diff /= sum;\n        fragColor = col;\n    }\n    \n    if (texelFetch(iChannel1, ivec2(66, 2), 0).r == 1.0) {\n        fragColor.rgb = vec3(0.7);\n    }\n    if (texelFetch(iChannel1, ivec2(65, 2), 0).r == 0.0) {\n        fragColor.rgb *= fragColor.w;\n    }\n    if (texelFetch(iChannel1, ivec2(67, 2), 0).r == 1.0) {\n        int nums = 0;\n        for (int i = -1; i < 2; i++) {\n            for (int j = -1; j < 2; j++) {\n                vec4 k = texture(iChannel2, (fragCoord+vec2(i,j))/iResolution.xy);\n                if (k.rgb == vec3(0)) nums++;\n            }\n        }\n        if (nums >= 4) {\n            fragColor = vec4(0.0,0.0,0.0,1.0);\n        }\n    }\n    fragColor.w = 1.0;\n    //fragColor = vec4(rand3(vec3(fragCoord,0)),1);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define PI 3.14159265358979\n#define blur 96\n#define salt iDate.w*0.001\n\n//source: https://www.shadertoy.com/view/3djyWW + adaptation\n#define FK(k) floatBitsToInt(cos(k))^floatBitsToInt(k)\nfloat hash(float a, float b) {\n    int x = FK(a); int y = FK(b);\n    return float((x*x+y)*(y*y-x)+x)/2.14e9;\n}\n#if 0\nvec4 rand34(vec3 pos) {\n    vec4 p = vec4(\n         dot(pos,vec3(823.1,893.6, 54.9)+salt),\n         dot(pos,vec3(903.8,123.4,628.7)+salt),\n         dot(pos,vec3(238.5,931.2,793.9)+salt),\n         dot(pos,vec3(901.6,495.8,843.1)+salt)\n    );\n\n\treturn fract(sin(p)*43758.5453123);\n}\nvec3 rand3(vec3 pos) {\n    vec3 p = vec3(\n         dot(pos,vec3(127.1,311.7, 74.7)+salt),\n         dot(pos,vec3(269.5,183.3,246.1)+salt),\n         dot(pos,vec3(113.5,271.9,124.6)+salt)\n    );\n\n\treturn fract(sin(p)*43758.5453123);\n}\nvec2 rand32(vec3 pos) {\n    vec2 p = vec2(\n         dot(pos,vec3(893.2,892.3, 87.1)),\n         dot(pos,vec3(165.8,493.7,126.2))\n    );\n\n\treturn fract(sin(p)*18934.128921);\n}\nfloat rand31(vec3 pos) {\n    return fract(sin(dot(pos, vec3(129.239,1892.2189,1902.8539)))*48321.2813);\n}\n#else\nvec4 rand34(vec3 pos) {\n    float a = hash(pos.x+pos.y+pos.z,pos.x+pos.z);\n    float b = hash(pos.y+a,a);\n    float c = hash(b,pos.z+b);\n    float d = hash(c+b,pos.x+c);\n    a = hash(b, c);\n\n\treturn fract(vec4(a,b,c,d));\n}\nvec3 rand3(vec3 pos) {\n    float a = hash(pos.y, pos.x+pos.z);\n    float b = hash(pos.y,a);\n    float c = hash(a,b);\n    a = hash(c, b - a);\n\n\treturn fract(vec3(a,b,c));\n}\nvec2 rand32(vec3 pos) {\n    float a = hash(pos.x+pos.y+pos.z, pos.z);\n    float b = hash(pos.y+a+pos.z, a);\n    a = hash(a, b);\n    \n\treturn fract(vec2(a,b));\n}\nfloat rand31(vec3 pos) {\n    float a = hash(pos.x+pos.y+pos.z,pos.z);\n    a = hash(a, pos.x);\n    return fract(a);\n}\n#endif","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 k = vec2(1)/iResolution.xy;\n    vec4 col = texture(iChannel0,fragCoord*k);\n    vec3 vec = vec3(fragCoord * 0.01, fract(iDate.w) * 5.0);\n    if (iFrame < 15 || iTime < 0.5 || texelFetch(iChannel1, ivec2(69, 0), 0).r > 0.5) {\n        col = rand34(vec);\n        fragColor = col;\n        return;\n    }\n    else {\n        float angle = rand31(col.rgb+vec) * 2.0 - 1.0;\n        angle *= PI;\n        vec2 dir = vec2(cos(angle),sin(angle))*2.0;\n        vec2 dirB = dir * 4.0;\n        vec4 other = texture(iChannel0, (fragCoord+dir)*k);\n        vec4 otherB = texture(iChannel0, (fragCoord+dirB)*k);\n        float neww = other.w - col.w;\n        vec3 diff = abs(other.rgb - col.rgb);\n        if (col.rgb == vec3(0)) {\n            col = other;\n            if (otherB.rgb == vec3(0) && rand31(vec*0.4) < 0.01) { // still zero? why not make our own colony (but not always)\n                col.rgb = rand3(vec);\n                col.w = 1.0;\n            }\n        }\n        if (dot(col.rgb, col.rgb) < 0.005) {\n            col.rgb = vec3(0);\n        }\n        if (dot(diff, diff) < 0.02) {\n            col.w += 0.003;\n        }\n        else {\n            if (neww > 0.0) {\n                col = other;\n                neww += col.w * 0.7;\n            }\n            col.w = abs(neww);\n        }\n        if (other.w < 0.08) col.w += 0.08 - other.w;\n        if (rand31(vec)<0.05) {\n            col.w += 0.05;\n        }\n        if (iMouse.zw == iMouse.xy) {\n            diff = abs(col.rgb - texelFetch(iChannel0, ivec2(iMouse.xy), 0).rgb);\n            if (dot(diff, diff) < 0.01) {\n                col.w += 0.4;\n            }\n        }\n        if (rand31(vec3(iDate.w + 1.824)) < 0.005) {\n            vec2 p = rand32(vec3(iDate.w+4.102));\n            vec3 c = texture(iChannel0, p).rgb;\n            vec3 d = abs(col.rgb - c);\n            float diff = dot(d,d);\n            if (rand31(vec3(2.14+iDate.w)) < 0.2) {\n                diff = 0.1 - diff;\n            }\n            if (diff > 0.05) {\n                float n = rand31(vec3(iDate.w + 1.346));\n                col.w *= abs(n);\n            }\n        }\n        if (col.w > 1.0) col.w = 1.0;\n        if (col.w <= 0.0) col.rgb = vec3(0.0);\n        col.rgb = fract(col.rgb);\n    }\n    fragColor = col;\n    if (rand31(vec3(iDate.w+1.234)) < 0.05) {\n        vec2 rev = rand32(vec3(iDate.w+1.123))*iResolution.xy;\n        rev -= fragCoord;\n        if (dot(rev, rev)<25.0)\n            fragColor = vec4((rand3(vec3(iDate.w+1.345)) * 2.0 - 1.0), 60.0);\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 ocol = texture(iChannel0, fragCoord/iResolution.xy);\n    vec4 col = ocol;\n    \n    if (texelFetch(iChannel1, ivec2(67, 2), 0).r == 1.0) {\n        float diff = 0.0;\n        float sum = 1.0;\n        for (int i = 0; i < blur; i++) {\n            float angle = rand31(fragCoord.xyx+iTime*float(i)) * 2.0 - 1.0;\n            angle *= PI;\n            float dist = rand31(fragCoord.yxy+iTime)*10.0+1.0;\n            float d2 = 1.0 / (dist * 0.25 + 0.75);\n            vec2 dir = vec2(cos(angle),sin(angle));\n            vec4 other = texture(iChannel0, (fragCoord+dir*dist)/iResolution.xy);\n            vec3 d = abs(other.rgb-ocol.rgb);\n            if (dot(d,d) > 0.07) {\n                diff += d2;\n            }\n            sum += d2;\n        }\n        diff /= sum;\n        if (diff>0.4) {\n            col = vec4(vec3(0),1);\n        }\n    }\n    fragColor = col;\n}","name":"Buffer B","description":"","type":"buffer"}]}