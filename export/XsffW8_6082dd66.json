{"ver":"0.1","info":{"id":"XsffW8","date":"1495802839","viewed":100,"name":"Naive grid","username":"etale_cohomology","description":"Fork of https://www.shadertoy.com/view/4tS3Rm","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["grid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of https://www.shadertoy.com/view/4tS3Rm\n\n#define N_TILES_Y 2.\n#define THICKNESS .008\n\nfloat draw_grid(vec2 uv){\n    vec2 dif  = fract(uv * vec2(N_TILES_Y));\n    vec2 grid_2D = floor(dif + vec2(THICKNESS * N_TILES_Y));\n    return floor(grid_2D.x + grid_2D.y);\n\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec2 uv = (2. * fragCoord - iResolution.xy) / iResolution.y;\n\n    // Rotation: left-multiplication by a unit complex-number!\n    uv = mat2(cos(iTime), -sin(iTime), sin(iTime), cos(iTime)) * uv;\n\n    float grid = draw_grid(uv);\n    fragColor.rgb = vec3(grid);\n}\n","name":"Image","description":"","type":"image"}]}