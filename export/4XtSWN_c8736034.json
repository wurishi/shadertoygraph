{"ver":"0.1","info":{"id":"4XtSWN","date":"1719052102","viewed":32,"name":"Bottom of the pool","username":"selimsheta","description":"water","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["sumofsines"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Colors\nvec3 lightColor = vec3(0.6882, 0.6423, 0.3374);\nvec3 waterColor = vec3(0, 0.7616, 0.6481);\nvec3 ambiColor = vec3(0.5243, 0, 0.8515);\n\n// Position and scaling\nvec2 center = vec2(-2.5,-0.75);\nfloat scale = 0.5;\n\n// Lighting\nvec3 lightPos = vec3(5, 2, 5.0);\nfloat obsHeight = 1.0;\nfloat roughness = 0.5;\nfloat ambient = 0.25;\nfloat diffuseFalloff = 10.0;\nfloat specularFalloff = 400.0;\n\n// Waves\nconst int numWaves = 10;\nfloat wavelengths[] = float[](1.0, 0.2, 0.3, 0.5, 0.6, 0.7, 0.8, 0.9, 1.2, 1.1);\nfloat exponent = 0.8;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float sumAmplitudes = 0.0;\n    for (int i = 0; i < numWaves; i++){\n        float amplitude = wavelengths[i];\n        sumAmplitudes += amplitude;\n    }\n    \n    vec2 uv = ((2.0 * fragCoord - iResolution.xy) / iResolution.y - center)/scale;\n    float d = length(uv);\n    \n    float sumSines = 0.0; // sum of sine waves\n    float gFactor = 0.0; // for calculating the derivative\n    for (int i = 0; i < numWaves; i++){\n        float amplitude = wavelengths[i]/sumAmplitudes;\n        float frequency = 1.0/wavelengths[i];\n        float speed = sqrt(wavelengths[i]);\n        sumSines += amplitude*(0.5+0.5*sin(6.28318*frequency*d-iTime*speed));\n        gFactor += (amplitude*frequency*cos(6.28318*frequency*d-iTime*speed));\n    }\n    \n    \n    float f = exp(-exponent*d);\n    float fp = -exponent*exp(-exponent*d);\n    float g = sumSines;\n    float gp = gFactor*3.14159/d;\n    \n    // Intersection with the surface\n    vec3 intersection = vec3(uv,f*g);\n    \n    // Surface normal at the intersection\n    float derivative = f*gp+fp*g;\n    vec3 normal = vec3(-uv*derivative, 1.0);\n    normal = normal/length(normal);\n    \n    vec3 rayStart = vec3(uv,obsHeight);\n    vec3 wo = (rayStart-intersection)/length(rayStart-intersection); // vector towards camera\n    vec3 wi = (lightPos-intersection)/length(lightPos-intersection); // vector towards light\n    vec3 reflection = -wi-2.0*dot(-wi,normal)*normal;\n    \n    float diffuse = pow(max(0.0,dot(normal,wi)),diffuseFalloff);\n    float specular = pow(max(0.0,dot(reflection,wo)),specularFalloff);\n    \n    float diffuseMult = sqrt(roughness)*(diffuseFalloff+1.0)/2.0;\n    float specularMult = sqrt(1.0-roughness)*(specularFalloff+1.0)/2.0;\n    \n    vec3 color = ambient*ambiColor + diffuseMult*diffuse*waterColor + specularMult*specular*lightColor;\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}