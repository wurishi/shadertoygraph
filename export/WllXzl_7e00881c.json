{"ver":"0.1","info":{"id":"WllXzl","date":"1563933157","viewed":480,"name":"Blocky tile","username":"ParaBellum","description":"Implementing ambient occlusion in 2d","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["2d","light","ambientocclusion","tile"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float r2D(vec2 p)\n{\n    return fract(sin(dot(p, vec2(32.91, 54.28)))*96516.4172);\n}\n\nfloat pattern(vec2 p, float s)\n{\n    vec2 i = floor(p*s);\n    return r2D(i);\n}\n\nvec3 normals(vec2 p, float s, float h)\n{\n    float pixel = 1./iResolution.y;\n    vec2 e = vec2(pixel, 0.);\n    return normalize(\n        vec3(\n            (pattern(p-e.xy, s)-h)/e.x,\n            (pattern(p-e.yx, s)-h)/e.x,\n            1.));\n}\n\n#define samples 16\n#define num_steps 6\n#define PI 3.141592\n#define radius 12.\n\nfloat ambient_occlusion(vec2 p, float h, vec3 n, float s)\n{\n    float ao = 0.;\n    float pixel = 1./iResolution.y;\n    vec3 origin = vec3(p, h);\n    for (int i = 0; i < samples; i++)\n    {\n        float angle = float(i)*PI/float(samples);\n        vec2 dir = vec2(cos(angle), sin(angle));\n        for (int j = 1; j <= num_steps; j++)\n        {\n            vec2 point = p+float(j)*pixel*dir*radius;\n            float r = pattern(point, s);\n            vec3 current = vec3(point, r);\n            vec3 dir_curr = current - origin;\n            float dir = dot(normalize(dir_curr), n);\n            if (dir < 0.)\n                break;\n            if (dir > 0.)\n            {\n                ao += length(dir_curr)/float(j);\n                break;\n            }\n        }\n    }\n    ao /= float(samples);\n    return ao;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.y;\n    \n    float s = 6.;\n    float h = pattern(uv, s);\n    vec3 n = normals(uv, s, h);\n    float ao = 1.-ambient_occlusion(uv, h, n, s);\n   \t\n    float t = iTime;\n    vec3 ld = normalize(vec3(cos(t), sin(t), .5)*3.-vec3(uv, h));\n    float diff = max(dot(n, ld), 0.);\n    float l = diff*ao;\n    \n    vec3 col = vec3(0.);\n    col += l*mix(vec3(1.), vec3(0.0, .6, .8), h);\n\n    fragColor = vec4(sqrt(clamp(col, 0., 1.)),1.0);\n}","name":"Image","description":"","type":"image"}]}