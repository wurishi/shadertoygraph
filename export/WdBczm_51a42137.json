{"ver":"0.1","info":{"id":"WdBczm","date":"1586360095","viewed":79,"name":"Projectile_motion","username":"bhuwan0000","description":"projectile motion","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["ball","motion","projectile"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float circle(vec2 st, vec2 cent, float r)\n{\n    st.x *= iResolution.x/iResolution.y;\n    float d = length(st-cent);\n    d = d<r?1.0:0.0;\n    return d;\n}\n\nfloat plot(vec2 st, float pct){\n    \n  return  smoothstep( pct-0.04, pct, st.y) -\n          smoothstep( pct, pct+0.02, st.y);\n}\n\nvec2 get_disp(vec2 p, vec2 v, vec2 a, float t)\n{\n    \n    return p + v*t + 0.5*a*t*t;\n}\n\nfloat get_time_of_flight(float h, float m_vel, float a, float th)\n{\n    float T1 = (-m_vel*sin(th) - sqrt( ( pow(m_vel*sin(th),2.0) - 2.0*a*h) ))/a;//(2.0*Vin*sin(th))/abs(ag);\n    float T2 = (-m_vel*sin(th) + sqrt( ( pow(m_vel*sin(th),2.0) - 2.0*a*h) ))/a;\n    float T = max(T1, T2);\n    return T;\n}\n\nfloat get_range(float m_vel, float th, float t) //horizontal range\n{\n \treturn m_vel*cos(th)*t;\n}\n\nfloat get_max_h(float m_vel, float a, float th)\n{\n    float h_max = (m_vel*m_vel*sin(th)*sin(th) )/(2.0*a);\n    return h_max;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv *= 7.0;\n    vec3 col =vec3(0.0);\n\t\n    //physics\n    float g = -9.8; // acc due to gravity\n    float m = 2.0; //mass\n    float ag = m*g;\n    float t = iTime;\n    float th = radians(50.0); //angle of projectile\n    float m_vel = 12.0; //mag of velocity\n    vec2 vel = vec2( m_vel*cos(th), m_vel*sin(th) );\n    float h = 0.0;\n    float Tf = get_time_of_flight(h, m_vel, ag, th);\n    t = mod(t, Tf+0.5);\n    \n    //x,y displacement in projectile motion\n    vec2 p = vec2(0.0, h); //init pos of the ball\n    vec2 pos = get_disp(p, vel, vec2(0.0, ag), t); //pos after the throw\n    \n    float Vfin = m_vel*sin(th) + ag*t;\n    float d_x =  pos.x; //m_vel*t*sin(th) + 0.5*(ag*t*t) + h;\n \t\n    float d_y = pos.y; //(m_vel*t*cos(th));\n    \n    //different things:P\n    float T = sqrt((2.*h)/abs(ag)); // for horizontal throw\n    float range = get_range(m_vel, th, Tf);\n\tfloat h_max = get_max_h(m_vel, abs(ag), th);\n    \n    if (t>=Tf)\n    {\n        d_y = 0.0;\n        d_x = range;\n\n        \n    }\n    \n    float rad = 0.4;\n    vec2 cent = vec2(d_x+rad, d_y+rad);\n    float cir = circle(uv, cent, rad);\n    \n    //vec2 d_y_plot = get_disp(p, vel, vec2(0.0, ag), uv.x);\n    //float plot_proj = plot(uv, d_y_plot.y);\n    \n    // Output to screen\n    vec3 bg = vec3(0.8);\n    col = bg*(1.-cir)+(vec3(0.7, 0.4, 0.1)*cir);\n    //col -= plot_proj;\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}