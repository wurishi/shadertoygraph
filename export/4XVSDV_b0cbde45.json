{"ver":"0.1","info":{"id":"4XVSDV","date":"1720517381","viewed":160,"name":"Mandelbrot galaxy","username":"zhangrm","description":"A rotating mendabrot galaxy.\nref:https://www.shadertoy.com/view/wtdSzS\n    https://www.shadertoy.com/view/ltVBRc\n","likes":7,"published":1,"flags":32,"usePreview":0,"tags":["fractal","mandelbrot","rotate"],"hasliked":0,"parentid":"ltVBRc","parentname":"rotation of mandelbrot"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n    vec3 col = texture(iChannel2, uv).xyz;\n  \n    float offset = 0.02;\n    float offset_speed = .3 * iTime;\n    vec2 sunpos = vec2(0.5 + offset * sin(offset_speed), 0.5 + offset * cos(offset_speed));\n\n    vec3 shine = col;\n    float radi = 1.0;\n    int anz = 4; \n\n    for (int n = 1; n <= anz; n++) {\n        vec2 newUV = (uv - sunpos) * radi + sunpos;\n        shine += 0.6 / float(anz) * texture(iChannel2, newUV).xyz; \n        radi -= 0.675 / float(anz);\n    }\n    \n    col = max(shine, col); \n\n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define maxiter 250\n#define m1 1.0\n#define m2 0.9\n#define r1 0.5\n#define r2 0.5\n#define v1 0.5\n#define v2 0.95\n\nfloat Hash21(vec2 p) {\n    vec3 a = fract(p.xyx * vec3(123.34, 234.34, 345.65));\n    a += dot(a, a + 34.45);\n    return fract(a.y * a.z * a.x);\n}\n\nvec2 Hash22(vec2 p) {\n    vec2 a = fract(p.xy * vec2(13.34, 24.34));\n    a += dot(a, a + 34.45);\n    vec2 b = fract(p.xy * vec2(78.86, 134.21));\n    b += dot(b, b + 113.45);\n    return vec2(fract(a.x * a.y), fract(b.x * b.y));\n}\n\nfloat Dist(vec2 a, vec2 b) {\n    return sqrt(pow(a.x - b.x, 2.0) + pow(a.y - b.y, 2.0));\n}\n\nfloat backstarsf(vec2 UV, float mult) {\n    float backstars = 0.0;\n    vec2 backstarsuv = UV;\n    backstarsuv.y *= -1.0;\n    backstarsuv *= mult;\n    vec2 gv = fract(backstarsuv) - 0.5;\n    vec2 id = floor(backstarsuv);\n    vec2 hash = Hash22(id);\n    vec2 circlepos = hash;\n    float circle = Dist(vec2(gv), circlepos);\n    float circler = 0.05;\n    float star;\n    if (circle < circler) {\n        star = smoothstep(circler, circler - 0.05, circle);\n        backstars += star;\n    }\n    return backstars;\n}\n\nvoid rotate(inout vec2 vertex, float rads) {\n    mat2 tmat = mat2(cos(rads), -sin(rads), sin(rads), cos(rads));\n    vertex.xy = vertex.xy * tmat;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    rotate(uv, 0.35 * iTime);\n    vec2 z = vec2(0.0, 0.0);\n    float p = 0.0;\n    float dist = 0.0;\n    float x1 = tan(iTime * v1) * r1;\n    float y1 = sin(iTime * v1) * r1;\n    float x2 = tan(iTime * v2) * r2;\n    float y2 = sin(iTime * v2) * r2;\n    for (int i = 0; i < maxiter; ++i) {\n        z *= 2.0; \n        z = mat2(z, -z.y, z.x) * z + uv;\n        p = m1 / sqrt((z.x - x1) * (z.x - x1) + (z.y - y1) * (z.y - y1)) +\n            m2 / sqrt((z.x - x2) * (z.x - x2) + (z.y - y2) * (z.y - y2));\n        dist = max(dist, p);\n    }\n    dist *= 0.0059;\n    vec3 color = vec3(dist / 0.2, dist * dist / 0.03, dist / 0.112);\n\n    float time = iTime;\n    float backstars1 = backstarsf(uv + 0.1 * time + 123.0, 50.0) * 1.0;\n    float backstars2 = backstarsf(uv + 0.12 * time + 321.0, 20.0) * 1.0;\n    float backstars3 = backstarsf(uv + 0.14 * time + 12.0, 10.0) * 1.0;\n    float backstars4 = backstarsf(uv + 0.16 * time + 233.0, 7.0) * 1.0;\n    float backstars = backstars1 + backstars2 + backstars3 + backstars4;\n    color += vec3(backstars);\n\n    fragColor = vec4(color, 1.0);\n}\n","name":"Buffer A","description":"","type":"buffer"}]}