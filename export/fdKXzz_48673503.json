{"ver":"0.1","info":{"id":"fdKXzz","date":"1634273106","viewed":74,"name":"jneen - proportional keyboard","username":"jneen","description":"it's a keyboard that displays the fft","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fft","keyboard"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGzn","filepath":"/media/a/894a09f482fb9b2822c093630fc37f0ce6cfec02b652e4e341323e4b6e4a4543.mp3","previewfilepath":"/media/ap/894a09f482fb9b2822c093630fc37f0ce6cfec02b652e4e341323e4b6e4a4543.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//#define t (iTime*.7)\n#define ntri(x) abs(fract(x)-.5)\n#define PI acos(-1.)\n#define TAU (2.*PI)\n\n\nfloat OCT=8.;//#define OCT 8.\nfloat KEYS=96.;\n//#define KEYS (OCT*12.)\n#define nsin(X) (.5+.5*sin(TAU*X))\n\nfloat sfft(float note) {\n  float tx = 4.*55./48000.*pow(2.,note);\n  //float t= texture(iChannel0,vec2(440./24000.*pow(2.,OCT*x),.25)).r;\n  float t = texture(iChannel0,vec2(tx,0.)).r;\n  return max(t*t-.2,0.)/TAU;\n}\n#define note(X) (floor((X)*KEYS)/KEYS)\n\n\nmat2 rot(float T) { float s=sin(T),c=cos(T); return mat2(c,s,-s,c); }\n\n\nint NAT_PER=7;\nint ACC_PER=5;\n\n// x [0,1]\n// x*OCT [0,7]\n// fract(x*OCT);\n\n\n\nfloat natnote(float x) {\n  x *= OCT;\n  float octave = floor(x);\n  float dist = fract(x+10.);//add 10 to avoid negative mod problems\n  float idx = floor(dist*7.);\n  float note = floor(idx*2.-step(1.5,idx)-step(4.5,idx));\n  return (octave+note/12.);\n}\n\nfloat accnote(float x) {\n  x *= OCT;\n  float nat=natnote(x);\n  float octave = floor(x);\n  float dist = fract(x+10.);\n  float idx = round(dist*7.);\n  float var = abs(idx-(dist*7.));\n  float note = floor(idx*2.-1.-step(2.5,idx));\n  note *= 1.-float(idx==2.);\n  note *= 1.-float(idx==5.);\n  note *= step(var,.3);\n\n\n  return note==0.?0.:(octave+note/12.);\n}\n\n#define GAP .2\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uu = fragCoord/iResolution.xy;\n\n  vec2 uv=uu-.5;\n  uv.x*=iResolution.x/iResolution.y;\n  float nn = natnote(uu.x);//, step(.93,uu.y));\n  float an = accnote(uu.x);\n  vec3 natbar=step(.9,uu.y)*mix(vec3(1), vec3(.1,.9,.3),10.*sfft(nn));\n  \n  natbar *= step(GAP,fract(OCT*7.*uu.x+GAP/2.));\n  vec3 accbar=step(.9,uu.y)*mix(vec3(1), vec3(.1,.9,.3),10.*sfft(an));\n\n  vec3 C=an>0.?mix(accbar,natbar,step(uu.y,.92)):natbar;\n\n  // Output to screen\n  fragColor = vec4(C,1.0);\n    \n    \n}","name":"Image","description":"","type":"image"}]}