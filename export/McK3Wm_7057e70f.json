{"ver":"0.1","info":{"id":"McK3Wm","date":"1712867138","viewed":41,"name":"shadertoy prak2","username":"Deminsas","description":"prak2","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["sigmashader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float omega2 = -1.;\nconst float omega1 = 2.;\nvec3 box1[9] = vec3[](vec3(0.8, 0.5, -0.5),\n                      vec3(0.2, 0.2, 0.2), \n                      vec3(0.2, 0.2, -0.2),\n                      vec3(0.2, -0.2, 0.2),\n                      vec3(0.2, -0.2, -0.2),\n                      vec3(-0.2, 0.2, 0.2),\n                      vec3(-0.2, 0.2, -0.2),\n                      vec3(-0.2, -0.2, 0.2),\n                      vec3(-0.2, -0.2, -0.2));\nvec3 box2[9] = vec3[](vec3(0.3, 0.5, -0.5),\n                      vec3(0.6, 0.2, 0.2), \n                      vec3(0.2, 0.2, -0.2),\n                      vec3(0.05, -0.2, 0.1),\n                      vec3(0.2, -0.2, -0.2),\n                      vec3(-0.3, 0.5, 0.2),\n                      vec3(-0.2, 0.2, -0.4),\n                      vec3(-0.1, -0.34, 0.2),\n                      vec3(-0.2, -0.12, -0.2));\nvec4 colAr1[6] = vec4[](vec4(1.0, 0.0, 0.0, 1.), \n                        vec4(0.0, 1.0, 0.0, 1.), \n                        vec4(0.0, 0.0, 1.0, 1.), \n                        vec4(1.0, 1.0, 0.0, 1.), \n                        vec4(0.0, 1.0, 1.0, 1.), \n                        vec4(1.0, 0.0, 1.0, 1.));\nvec4 colAr2[12] = vec4[](vec4(0.8, 0.0, 0.2, 1.),\n                         vec4(0.8, 0.0, 0.0, 1.), \n                         vec4(0.2, 0.8, 0.0, 1.),\n                         vec4(0.0, 0.8, 0.0, 1.),\n                         vec4(0.0, 0.2, 0.8, 1.),\n                         vec4(0.0, 0.0, 0.8, 1.),\n                         vec4(0.6, 0.6, 0.2, 1.),\n                         vec4(0.6, 0.6, 0.0, 1.),\n                         vec4(0.2, 0.6, 0.6, 1.),\n                         vec4(0.0, 0.6, 0.6, 1.),\n                         vec4(0.6, 0.2, 0.6, 1.),\n                         vec4(0.6, 0.0, 0.6, 1.));\nvec3 plain1[6] = vec3[](vec3(1.5, 0.2, -0.1), \n                        vec3(0.1, 0.3, 0.),\n                        vec3(0.3, 0.2, 0.),\n                        vec3(0.2, -0.2, 0.),\n                        vec3(-0.2, -0.1, 0.),\n                        vec3(-0.2, 0.3, 0.));\nvec3 plain2[6] = vec3[](vec3(1.2, 0.2, -0.2), \n                        vec3(0.1, 0.3, 0.),\n                        vec3(0.3, 0.2, 0.),\n                        vec3(0.2, -0.2, 0.),\n                        vec3(-0.2, -0.1, 0.),\n                        vec3(-0.2, 0.3, 0.));\nvec4 BGcol = vec4(0., 0., 0., 0.5); // Цвет фона\n\nmat3 xrot(float phi) {\n    return mat3(1., 0., 0.,\n                0., cos(phi), -sin(phi),\n                0., sin(phi), cos(phi));\n}\nmat3 yrot(float phi) {\n    return mat3(cos(phi), 0., sin(phi),\n                0., 1., 0.,\n                -sin(phi), 0., cos(phi));\n}\nmat3 zrot(float phi) {\n    return mat3(cos(phi), sin(phi), 0.,\n                -sin(phi), cos(phi), 0.,\n                0., 0., 1.);            \n}\nbool pointInPolygonBox(vec2 testPoint, vec3 faces[24], int num, int nvert) {\n    int i, j = 0;\n    bool c = false;\n  for (i = 0, j = nvert-1; i < nvert; j = i++) {\n    if (((faces[num+i].y > testPoint.y) != (faces[num+j].y > testPoint.y)) &&\n     (testPoint.x < (faces[num+j].x-faces[num+i].x) * (testPoint.y-faces[num+i].y) / (faces[num+j].y-faces[num+i].y) + faces[num+i].x))\n       c = !c;\n  }\n  return c;\n}\nbool pointInPolygonTrig(vec2 testPoint, vec3 faces[36], int num, int nvert) {\n    int i, j = 0;\n    bool c = false;\n  for (i = 0, j = nvert-1; i < nvert; j = i++) {\n    if (((faces[num+i].y > testPoint.y) != (faces[num+j].y > testPoint.y)) &&\n     (testPoint.x < (faces[num+j].x-faces[num+i].x) * (testPoint.y-faces[num+i].y) / (faces[num+j].y-faces[num+i].y) + faces[num+i].x))\n       c = !c;\n  }\n  return c;\n}\nbool pointInPolygon(vec2 testPoint, vec3 faces[5]) {\n    int i, j = 0;\n    int nvert = 5;\n    bool c = false;\n  for (i = 0, j = nvert-1; i < nvert; j = i++) {\n    if (((faces[i].y > testPoint.y) != (faces[j].y > testPoint.y)) &&\n     (testPoint.x < (faces[j].x-faces[i].x) * (testPoint.y-faces[i].y) / (faces[j].y-faces[i].y) + faces[i].x))\n       c = !c;\n  }\n  return c;\n}\nvec4 doColor(vec4 c1, vec4 c2){\n  return c2;\n}\n\n\nfloat BoxSqr(vec3 cor[9], vec4 cols[6], vec2 p, inout float zz, inout vec4 color[1], float time) {\n    vec3 cent = cor[0];\n    vec3 faces[24] = vec3[](cor[6], cor[5], cor[1], cor[2], //синяя\n                            cor[2], cor[1], cor[3], cor[4],\n                            cor[4], cor[3], cor[7], cor[8],\n                            cor[8], cor[7], cor[5], cor[6],\n                            cor[2], cor[4], cor[8], cor[6],\n                            cor[3], cor[1], cor[5], cor[7]);\n    for (int i = 0; i < 6; i++) {\n        for (int j = 0; j < 4; j++) {\n        faces[i*4 + j] = cent + faces[i*4 + j]*zrot(omega1*time)*xrot(omega1*time)*yrot(omega1*time);\n        }\n    }\n    for (int i = 0; i < 6; i++) {\n        if (pointInPolygonBox(p, faces, i*4, 4)) {\n            vec3 v0 = faces[i*4];\n            vec3 v1 = faces[i*4+1];\n            vec3 v2 = faces[i*4+2];\n            vec3 zline = vec3(0., 0., 1.);\n            vec3 normal = normalize(cross(v1 - v0, v2 - v0));\n            float t = dot(normal, (v0 - vec3(p, 0.))) / dot(normal, zline);\n            vec3 intersection = vec3(p, 0.) + t * zline;\n            float z = intersection.z;\n            if (z > zz) {zz = z; color[0] = doColor(color[0], cols[i]);}\n            }\n        }\n    return zz;\n}\nfloat BoxTrig(vec3 cor[9], vec4 cols[12], vec2 p, inout float zz, inout vec4 color[1], float time) {\n    vec3 cent = cor[0];\n    vec3 faces[36] = vec3[](cor[6], cor[5], cor[1], cor[1], cor[2], cor[6],\n                            cor[2], cor[1], cor[3], cor[3], cor[4], cor[2],\n                            cor[4], cor[3], cor[7], cor[7], cor[8], cor[4],\n                            cor[8], cor[7], cor[5], cor[5], cor[6], cor[8],\n                            cor[2], cor[4], cor[8], cor[8], cor[6], cor[2],\n                            cor[3], cor[1], cor[5], cor[5], cor[7], cor[3]);\n    for (int i = 0; i < 12; i++) {\n        for (int j = 0; j < 3; j++) {\n        faces[i*3 + j] = cent + faces[i*3 + j]*zrot(omega2*time)*xrot(omega2*time)*yrot(omega2*time);\n        }\n    }\n    for (int i = 0; i < 12; i++) {\n        if (pointInPolygonTrig(p, faces, i*3, 3)) {\n            vec3 v0 = faces[i*3];\n            vec3 v1 = faces[i*3+1];\n            vec3 v2 = faces[i*3+2];\n            vec3 zline = vec3(0., 0., 1.);\n            vec3 normal = normalize(cross(v1 - v0, v2 - v0));\n            float t = dot(normal, (v0 - vec3(p, 0.))) / dot(normal, zline);\n            vec3 intersection = vec3(p, 0.) + t * zline;\n            float z = intersection.z;\n            if (z > zz) {zz = z; color[0] = doColor(color[0], cols[i]);}\n            }\n        }\n    return zz;\n}\nfloat Sphere(vec3 c, float r, vec2 p, inout float zz, inout vec4 color[1], float time ) {\n    float zsqrd = (r)*(r) - (c.x-p.x)*(c.x-p.x) - (c.y-p.y)*(c.y-p.y);\n    if (zsqrd < 0.) {return zz;}\n    zsqrd = sqrt(zsqrd);\n    float z = c.z + zsqrd;\n    if (z > zz) {zz = z;\n        color[0] = vec4(sin(300.*z), sin(300.*z), 0., 1.0);}\n    return zz;\n}\nfloat Plain(vec3 cor[6], vec4 cols, vec2 p, inout float zz, inout vec4 color[1], float time) {\n    vec3 cent = cor[0];\n    vec3 face[5] = vec3[](cent+cor[1],cent+cor[2],cent+cor[3],cent+cor[4],cent+cor[5]);\n    if (pointInPolygon(p, face)) {\n        vec3 v0 = face[0];\n        vec3 v1 = face[1];\n        vec3 v2 = face[2];\n        vec3 zline = vec3(0., 0., 1.);\n        vec3 normal = normalize(cross(v1 - v0, v2 - v0));\n        float t = dot(normal, (v0 - vec3(p, 0.))) / dot(normal, zline);\n        vec3 intersection = vec3(p, 0.) + t * zline;\n        float z = intersection.z;\n        if (z > zz) {zz = z; color[0] = doColor(color[0], cols);}}\n    return zz;  \n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec4 col[] = vec4[](BGcol);\n    float zValue = -9999.9;\n    vec2 pos = fragCoord/iResolution.y;\n    zValue = BoxSqr(box1, colAr1, pos, zValue, col, iTime);\n    zValue = BoxTrig(box2, colAr2, pos, zValue, col, iTime);\n    zValue = Sphere(vec3(1.3+0.1*sin(0.5*iTime), 0.7, -0.5), 0.25, pos, zValue, col, iTime);\n    plain1[0] = plain1[0] + vec3(0.07*cos(0.6*iTime), 0.03*cos(0.6*iTime), 0.);\n    zValue = Plain(plain1, vec4(0.5, 0., 0.6, 1.), pos, zValue, col, iTime);\n    plain2[0] = plain2[0] + vec3(0., 0., 0.1*cos(0.6*iTime));\n    zValue = Plain(plain2, vec4(0.2, 0.3, 0., 1.), pos, zValue, col, iTime);\n    fragColor = col[0];\n}\n","name":"Image","description":"","type":"image"}]}