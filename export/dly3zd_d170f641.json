{"ver":"0.1","info":{"id":"dly3zd","date":"1684459082","viewed":116,"name":"Regular polygon interpolation","username":"Larbagar","description":"Interpolates between shapes by doing a weighted average between their SDFs.","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["polygon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926535897932384626433832795\n\nfloat polygonDist(int sides, vec2 point){\n    float dist = -point.x;\n    for(int side = 1; side < sides; side++){\n        float angle = PI + 2.*PI*float(side)/float(sides);\n        dist = max(dist, dot(point, vec2(cos(angle), sin(angle))));\n    }\n    dist /= cos(float(PI/float(sides)));\n    return dist;\n}\n\nvec2 componentToPolar(vec2 point){\n    return vec2(length(point), atan(point.y, point.x));\n}\n\nvec2 polarToComponent(vec2 polar){\n    return polar.x*vec2(cos(polar.y), sin(polar.y));\n}\n\nvec2 rotatePoint(vec2 point, float angle){\n    return polarToComponent(componentToPolar(point) + vec2(0., angle));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord*2. - iResolution.xy)/iResolution.y;\n    \n    float weight = smoothstep(-0.1, 0.1, sin(iTime));\n    //float weight = sin(iTime)/2.+.5;\n    float shape =\n        polygonDist(3, rotatePoint(uv, -iTime/4.))*weight +\n        polygonDist(4, rotatePoint(uv, -iTime/2.))*(1. - weight);\n    \n    float col = 0.;\n    col += smoothstep(1., 0.95, shape);\n    //col -= shape;\n    fragColor = vec4(vec3(col), 1.0);\n}","name":"Image","description":"","type":"image"}]}