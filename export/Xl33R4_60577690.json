{"ver":"0.1","info":{"id":"Xl33R4","date":"1468065448","viewed":196,"name":"just rtrace dat spheres! v3","username":"pyBlob","description":"based on: https://www.shadertoy.com/view/ltdGzH\nfinal version at: https://www.shadertoy.com/view/MltGRH\n\nfilter to nearest (= no bias)\nremoved uv\nshorter names\ncamera matrix direct\n\n1200!\nshorter checker pattern\nfloat/vector macros\n","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raytrace","challenge","sizecoding","sh16a"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define checker(v) mod(floor(v.x)+floor(v.y),2.0) == 0.0\n#define sat(x) clamp(x, 0.0, 1.0)\n#define F float\n#define L(x) for (F x=-2.0 ; x<3.0 ; x++)\n#define U normalize\n#define R iResolution\n#define D vec3\n#define S vec2\n\nF INF = 1e5, b, r, pt, k = 0.1;\nS p, V = S(0.0, 1.0);\nD ro, rd, col, fin, nor, hit, lig, x, q;\n\n#define merge(t,a) if (t > 0.0 && t < pt) pt=t,hit=ro+rd*pt,nor=a,col=\n\nvoid trace()\n{\n    pt = INF;\n    \n    merge(\n        -ro.y / rd.y,\n        V.xyx\n    )\n        D(\n            checker(hit.xz) ?\n            0.4 :\n            0.5 *\n            texture(\n                iChannel0,\n                0.1*hit.xz + S(3.7,1.7) / 25.6\n            ).y\n        ) *\n        (\n            max( abs(hit.x), abs(hit.z) ) < 1.5 ?\n            smoothstep(\n\t            0.0,\n    \t        0.5,\n        \t    length(mod(hit.xz+0.5,1.0)-0.5)\n        \t) :\n            1.0\n        );\n    \n    L(i)\n        L(j)\n    \t{\n            r = checker(S(i,j)) ? 0.4 : 0.25,\n            q = ro - D(i,r,j),\n            b = dot(q, rd);\n            merge(\n                -b -\n                sqrt(\n                    b*b -\n                    dot(q, q) +\n                    r*r\n                ),\n                U(q+rd*pt)\n            )\n                V.yxx + floor(k) * D(-0.08, 0.03, 0.06);\n            k+=0.5;\n        }\n}\n\nvoid mainImage( out vec4 f, S e )\n{\n\tF time = 5.0;\n    //F time = 0.1 * iTime;\n\n\t// eye position\n    ro = D(\n        3.0*cos(time),\n        2.0,\n        3.0*sin(time)\n    );\n    \n    // ray direction\n    D cw = U(\n        -0.2 * V.xyx // look at position\n        - ro\n    ),\n    cu = U(D( -cw.z, 0.0, cw.x ));\n    \n\tp = e.xy - 0.5*R.xy;\n    rd = U(cu*p.x + cross(cu, cw)*p.y + cw*R.y);\n\n    // render\n    col = D(0.7, 0.9, 1.0) + rd.y*D(0.8);\n    \n    trace();\n    if (pt != INF)\n    {   \n        // shade\n        \n        lig = U( D(-0.6, 0.7, -0.5) );\n        \n        F\n            dif = sat(dot( nor, lig )),\n        \tamb = 0.5+0.5*nor.y,\n        \tspc = pow(sat( dot(reflect(rd,nor), lig )), 16.0);\n\n        fin = col;\n        \n        ro = hit+0.01*lig;\n        rd = lig;\n        trace();\n\n        fin =\n            (pt > 2.5 ? dif : 0.0) *\n            (fin * D(1.20,1.02,0.66) + spc) +\n            fin * D(0.25,0.35,0.5) * amb;\n    }\n    \n    f = vec4(sqrt(fin), 1.0);\n}\n","name":"Image","description":"","type":"image"}]}