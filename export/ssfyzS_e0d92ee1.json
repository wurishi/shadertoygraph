{"ver":"0.1","info":{"id":"ssfyzS","date":"1642277024","viewed":66,"name":"JKW Basic ray marcher","username":"joskwanten","description":"Just a basic ray marcher with two animating spheres","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarcherwithspheres"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .01\n\nfloat getDist(vec3 p) {\n    float h = 1. + (1. + sin(3. * iTime)) / 2.;\n    vec4 s1 = vec4(2. * sin(iTime), 3, 6. + cos(iTime), .6);\n    vec4 s2 = vec4(2. * cos(iTime), 1.5, 6. + sin(iTime), .7);\n    \n    float sphereDist1 = length(p - s1.xyz) - s1.w;\n    float sphereDist2 = length(p - s2.xyz) - s2.w;\n    \n    float planeDist = p.y;\n    \n    float d = min(min(sphereDist1, planeDist), sphereDist2);\n    \n    return d;\n\n}\n\nfloat rayMarch(vec3 ro, vec3 rd) {\n    float d0 = 0.;\n    for (int i = 0; i < MAX_STEPS; i++) {\n        vec3 p = ro + rd * d0;\n        float dS = getDist(p);\n        d0 += dS;\n        if (d0 > MAX_DIST || d0 < SURF_DIST) {\n            break;\n        }    \n    }    \n    \n    return d0;\n}\n\nvec3 getNormal(vec3 p) {\n\n    float d = getDist(p);\n    vec2 e = vec2(.01, 0);\n    \n    vec3 n = d - vec3(\n        getDist(p - e.xyy),\n        getDist(p - e.yxy),\n        getDist(p - e.yyx));\n    \n    return normalize(n);\n}\n   \n\nfloat getLight(vec3 p) {\n    vec3 lightPos= vec3(4, 5, 1);\n    vec3 l = normalize(lightPos - p);\n    vec3 n = getNormal(p);\n    float dif = clamp(dot(n, l), 0., 1.);\n    float d = rayMarch(p + n * SURF_DIST * 2., l);\n    if (d < length(lightPos - p)) dif *= .3;\n    return dif;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - .5 * iResolution.xy) /iResolution.y;\n\n    // Time varying pixel color\n    vec3 col = vec3(0);\n    \n    // Camera\n    vec3 ro = vec3(0, 1, 0);\n    \n    // Ray direction\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1));\n    \n    float d = rayMarch(ro, rd);\n    vec3 p = ro + rd * d;\n    \n    float dif = getLight(p);\n    \n    //col = getNormal(p);\n    col = vec3(dif);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}