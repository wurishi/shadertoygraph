{"ver":"0.1","info":{"id":"Xfdyzl","date":"1731030789","viewed":127,"name":"Semiregular 3 3 4 3 4","username":"Elsio","description":"\"Archimedean tessellations\"\n\ntô curtindo a vibe das tesselações. Já vi que tem sete outros pela frente para estudar. \n","likes":14,"published":1,"flags":32,"usePreview":0,"tags":["pattern","tile","extrude","snub","semiregular","archimedean","33434"],"hasliked":0,"parentid":"DllSWB","parentname":"Semi-regular 3,3,4,3,4 Extrusion"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// dof from @Lz\n// https://www.shadertoy.com/view/l3jBzG\n\n#define TFC(CRD) texelFetch(iChannel0, ivec2(CRD),0)\n#define TEX(UV)  texture(iChannel0, UV)\n#define MAX_KRN_SIZE 3.\n\nfloat hash(float s) {\n    return fract(5313.235 * mod(s, .78182) * mod(s, .1242));\n}\n\nfloat hash(vec3 p) {\n    return fract(sin(dot(p, vec3(12.6547, 765.3648, 78.653))) * 43749.535);\n}\n\nvec3 dofSimple(float _dist, vec3 _col, in ivec2 frag, vec2 _uv) {\n    float krnSize = floor(smoothstep(0., 1., _dist) * MAX_KRN_SIZE);\n    vec3 scol;\n    float sw = 0.;\n    float w = 0.;\n    \n    for(int i = - int(krnSize); i <= int(krnSize); i ++) {\n        \n        for(int j = - int(krnSize); j <= int(krnSize); j ++) {\n            vec4 ncol = TFC(frag + ivec2(i, j));\n            w = 1.;\n            sw += w;\n            scol += w * ncol.rgb;\n        }\n    }\n    scol /= sw;\n    return scol;\n}\n\nvoid mainImage(out vec4 o, vec2 u) {\n    vec2 uv = u / iResolution.xy;\n    vec4 col;\n    col = texture(iChannel0, u.xy / iResolution.xy);\n    col.rgb = dofSimple(col.w * 6., col.rgb, ivec2(u), uv);\n    o = vec4(col);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define rot(a) mat2(cos(a + vec4(0, 11, 33, 0)))\n#define h21(p) fract(sin(dot(p, vec2(117.619, 57.623))) * 43758.5453)\n#define PI acos(-1.)\n#define FAR 140.\n\nvec2 ID;\nfloat H;\n\nfloat distLineS(vec2 p, vec2 a, vec2 b) {\n    b -= a;\n    return dot(p - a, vec2(-b.y, b.x) / length(b));\n}\n\nfloat opExtrusion(float sdf, float pz, float h) {\n    vec2 w = vec2(sdf, abs(pz) - h);\n    return min(max(w.x, w.y), 0.) + length(max(w, 0.));\n}\n\nfloat box(vec2 p, float b, float sm){\n    p = abs(p) - b + sm;\n    return min(max(p.x, p.y), 0.) + length(max(p, 0.)) - sm;\n}\n\nfloat hMap(vec2 p, float t) {\n    return tanh(cos(t * 1.2 + p.x) * sin(t * 2.3 + p.y) * 4. - 3.9) * .5 + .5;\n}\n\n\n\nfloat piece(vec2 q, vec3 p, vec2 id, float dm, int i, int s, out float h){\n    float d, b = box(q, dm - .04, .08);\n          h = hMap(id, iTime) * 2.;\n          \n    if(s == 0) \n        b = h21(id) < .35 ? max(b, -b - .2) : b; // holes\n    \n    else {\n        float corte;\n\n        if(i == 1) \n            corte = distLineS(q, vec2(-1, 1), vec2(1, -1));\n\n        else \n            corte = distLineS(q, vec2(0), vec2(1));\n\n        b = max(b, float(s) * corte + .03); // slice\n    }\n    \n    d = opExtrusion(b, p.z + h / 2., h / 2.);\n    return d + b * .3;\n}\n\n\nfloat map(vec3 p) {\n    float d = 1e5;\n    float ang = (tanh(cos(iTime * 1.3) * 22. + 15.) + 1.) * 3.14 / 24.;\n    float dim = 1. / (cos(ang) * 2.);\n    float dim2 = dim * cos(ang * 2.);\n   \n    #define V(i) (vec2(i > 1, i == 1 || i == 2) * 2. - 1.)\n    \n    for(int i; i < 4; i++) {\n        vec2 q = p.xy;\n        vec2 id = floor(q / 2. - V(i) / 4.) * 2. + V(i) / 2. + 1.;\n        q -= id;\n        \n        vec2 qA = q * rot(ang),\n             qB = q * rot(-ang);\n             \n        vec2 qr = vec2(\n                      i == 0 || i == 3 ? qA.x : qB.x, \n                      i < 2            ? qA.y : qB.y\n                  );\n                  \n        float dm = (i & 1) == 0  ? dim : dim2;\n        \n        vec2 tOffs = i == 1 || i == 2 ? vec2(1) : vec2(-1, 1);\n        \n        float d3, d3B, h, h2, h3;\n        \n        if(i == 0 || i == 2) \n            d3 = piece(qr, p, id + tOffs, dm, i, 0, h);\n        \n        else {\n            d3B = piece(qr, p, id + tOffs + .8, dm, i, 1, h2);\n            d3 = piece(qr, p, id + tOffs, dm, i, -1, h3);\n            \n            id += tOffs / 4.;            \n            \n            if(d3B < d3) {\n                id -= tOffs / 2.;\n                d3 = d3B;\n                h2 = h3;\n            }\n        }\n        \n        if(d3 < d) {\n            d = d3;\n            ID = id;\n            H = h2;\n        }\n    }\n    \n    float fl = -p.z;\n    if(fl < d) ID = vec2(.5);\n    return min(fl, d);\n}\n\nfloat march(vec3 ro, vec3 rd) {\n    float t, d;\n    for(int i; i < 196; i ++) {\n        d = map(ro + rd * t);\n        \n        if(abs(d) < .01 || t > FAR) break;\n        t += d * .7;\n    }\n    return min(t, FAR);\n}\n\nvec3 normal(vec3 p) {\n    vec3 e = vec3(.01, 0, 0);\n    vec3 v = vec3(\n                 map(p - e.xyy),\n                 map(p - e.yxy),\n                 map(p - e.yyx)\n             ) - map(p);\n    return normalize(-v);\n}\n\nvoid mainImage(out vec4 o, vec2 u) {\n    vec3 R = iResolution,\n         D = normalize(vec3((u - R.xy / 2.) / R.y, 2. + cos(iTime * .3))),\n         p = vec3(0, iTime * 2., -8.);\n    \n    D.yz *= rot(.7 + tanh(cos(iTime * .4) * 15. - 14.) * .5);\n    D.xy *= rot(tanh(cos(iTime * .1) * 19. - 17.) * .5);\n    \n    float d = march(p, D);\n    vec2 id = ID;\n    o = vec4(0);\n    \n    if(d < FAR) {\n        vec3 p = p + d * D,\n             n = normal(p);\n             \n        o = vec4(n * .2 + .4, 1) * (H * 1.6 + .6) \n                * vec4(h21(id + .1), h21(id + .2), h21(id + .3), 1);\n    }\n    \n    o.w = d / FAR;\n}","name":"Buffer A","description":"","type":"buffer"}]}