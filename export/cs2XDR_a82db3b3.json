{"ver":"0.1","info":{"id":"cs2XDR","date":"1670170413","viewed":53,"name":"rotating shapes","username":"ChGrenier","description":"math function for rotating shapes","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["rotating","shape"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy - 0.5;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    float theta = atan(uv.x, uv.y);\n    float rho = sqrt(length(uv));\n\n\n    theta += 0.4*iTime;\n    \n    float col1 = sin(48.*rho*(0.5*cos(0.2*iTime)+0.5))*sin(6.*theta) + sin(24.*rho);\n    float col2 = sin(48.*rho*(0.5*cos(0.2*iTime)+0.5))*sin(6.*theta) * sin(24.*rho);\n    \n    float col = (0.5*cos(0.2*iTime)+0.5)*col1 + (-0.5*cos(0.2*iTime)+0.5)*col2;\n    \n    col = smoothstep(0.1, 0.4, col);\n\n    // Output to screen\n    fragColor = vec4(vec3(col),1.0);\n}","name":"Image","description":"","type":"image"}]}