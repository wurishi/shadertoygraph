{"ver":"0.1","info":{"id":"csGfRd","date":"1698507948","viewed":35,"name":"draw plots cylinder and 2dpixel","username":"chenxianming","description":"draw plots cylinder and 2d pixel","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["plots"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define Y iResolution\n#define rot( r ) mat2(cos(r), sin(r), -sin(r), cos(r) )\n\nvec2 path1[3] = vec2[]( vec2( 4, 0. ), vec2( 0., 0. ), vec2( 8, 0. ) ); // vec2( -1., -.5 ), vec2( 0.0, 0.5 ), vec2( 1., -.5 )\n\nfloat getPath( vec2[3] path, vec2 uv ){\n    return path[0].x * pow( uv.x, 2. ) + path[0].y * pow( uv.y, 2. ) + path[1].x * uv.x * uv.y + path[1].y * uv.x + path[2].x * uv.y + path[2].y;\n}\n\nfloat df( vec3 p ){\n    p.x -= getPath(path1, p.xy);\n    \n    return max(\n      length( p.xz ) - .1,\n      abs( p.y ) - 1. );\n}\n\nvoid mainImage( out vec4 U, in vec2 V )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 u = ( V * 2. - Y.xy ) / Y.y;\n    \n    vec3 c, p, o = vec3( 0., 0., -1. ), r = vec3( u, 1. );\n    float t, d, i;\n    for( ; i < 64.; i++ )\n        p = o + r * t,\n        d = df( p ),\n        t += d;\n    \n    if( d < 1e-3 )\n        c = vec3( 1. ); // raymarching [ -1, 1 ] bezier\n        \n    c += smoothstep( .0, getPath( path1, u ), .01 ); // 2d\n\n    // Output to screen\n    U = vec4(c,1.0);\n}","name":"Image","description":"","type":"image"}]}