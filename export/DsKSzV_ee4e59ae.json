{"ver":"0.1","info":{"id":"DsKSzV","date":"1681325963","viewed":179,"name":"Landscape Of Frequencies","username":"QuantumSuper","description":"Learning buffers.\nA sound visualization with buffered frequency spectrum history, some colors, and symmetry.\n\n- use with audio in iChannel0 of Buffer A -","likes":1,"published":3,"flags":96,"usePreview":0,"tags":["music","buffer","spectrogram"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Landscape Of Frequencies 0.21.230412 by QuantumSuper\n// sound visualization with buffered frequency spectrum history\n// \n// - use with audio in iChannel0 of Buffer A -\n\nvoid mainImage( out vec4 c, in vec2 p ){ \n    float s = .2+.3*cos(.133*iTime);\n    p = abs(s-p/iResolution.xy)+s; //define & warp space  \n    c = texture(iChannel1, p);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Mdd3zn","filepath":"https://soundcloud.com/tontoepferei/drift","previewfilepath":"https://soundcloud.com/tontoepferei/drift","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// BUFFER A (0.2) of Landscape Of Frequencies by QuantumSuper\n// reading iChannel1 & overlaying it on Buffer B\n// \n// - use with audio in iChannel0 of Buffer A -\n\nvoid mainImage( out vec4 c, in vec2 p ){\n    p /= iResolution.xy; \n    c = vec4( clamp( texelFetch(iChannel0,ivec2(int(1023.*abs(p.x-.5)),0),0).x-p.y ,.0,1.) ); //spectrum\n    c *= 3. * abs( vec4(sin(.2*iTime),sin(.4*iTime),sin(.8*iTime),0) + abs(p.x-.5) ); //color\n    c += vec4(.996,.994,.998,1) * smoothstep(.8, 0., length(c)) * texture(iChannel1,p); //history\n    c.a = 1.; // ?mandatory\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// BUFFER B (0.2) of Landscape Of Frequencies by QuantumSuper\n// reading Buffer A, resizing & shifting image\n// \n// - use with audio in iChannel0 of Buffer A -\n\nvoid mainImage( out vec4 c, in vec2 p ){\n    c = texture(iChannel0, fract(p/iResolution.xy/.995)-vec2(.0025+.002*sin(.8*iTime),.004+.0005*sin(.5*iTime)) ); //move background\n}","name":"Buffer B","description":"","type":"buffer"}]}