{"ver":"0.1","info":{"id":"MtycWc","date":"1538635256","viewed":480,"name":"PRNG/HASH/Noise","username":"Balage","description":"This is a demonstration of my integer random generator with uniform distribution.\n For more info visit: https://merlin3d.wordpress.com/2018/10/04/correlated-multi-jittered-sampling-on-gpu/\n","likes":8,"published":1,"flags":40,"usePreview":0,"tags":["noise","random","prng","integer","rng","uniformd"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nuvec4 histogram(in vec2 fragCoord, uvec4 seed)\n{\n    uvec2 uRes = uvec2(iResolution);\n    uvec2 uFragCoord = uvec2(fragCoord);\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uint buckets = uint(iResolution.y) / VALUES_PER_BIN;\n    uint b = uint(fragCoord.y) / VALUES_PER_BIN;\n    uint bucketLo = RANGE * b / buckets;\n    uint bucketHi = RANGE * (b + 1u) / buckets;\n    \n    uvec4 sum = uvec4(0u);\n    for (uint i = 0u; i < HIST_SAMPLES; ++i)\n    {\n        sum += uvec4(texture(iChannel1, vec2(float(i) / iResolution.x, uv.y)));\n    }\n    \n    sum = 3u * sum / HIST_SAMPLES / 2u;\n    \n    return uvec4(\n        uFragCoord.x < sum.x,\n        uFragCoord.x < sum.y,\n        uFragCoord.x < sum.z,\n        uFragCoord.x < sum.w);\n    \n\n//    vec2 uv = fragCoord.xy / iResolution.xy;\n//    return texture(iChannel1, uv);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uvec2 iuv = uvec2(fragCoord.xy);\n    uvec2 ufragCoord = uvec2(fragCoord.xy);\n    uvec2 umouse = uvec2(iMouse.xy);\n\n    uvec4 seed = Seed(fragCoord, iResolution, iTime);\n    \n    vec4 v4 = (1.0 / (float(RANGE) - 1.0)) * vec4(Rand(uvec4(seed), uvec4(RANGE)));\n    vec4 direct = vec4(v4.x, v4.y, v4.z, 1.0);\n\tvec4 average = texture(iChannel0, uv);\n//    vec4 hist = vec4(histogram(fragCoord.xy * vec2(1.0, 1.0) - iResolution.xy * vec2(0.6666, 1.0), seed));\n    vec4 hist = vec4(histogram(fragCoord - iResolution.xy * vec2(0.666, 0.0), seed));\n    fragColor = mix(direct, mix(average, hist, vec4(uv.x > 0.6666)), vec4(uv.x > 0.3333));\n//    fragColor = hist;\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n// Running average\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uvec2 iuv = uvec2(fragCoord.xy);\n    uvec2 ufragCoord = uvec2(fragCoord.xy);\n    uvec2 umouse = uvec2(iMouse.xy);\n    float fseed = fragCoord.x + fragCoord.y * iResolution.x + 1.0 + mod(iTime, 16.0f) * iResolution.x * iResolution.y;\n    uint seed = uint(fseed);\n    \n    uint range = 13160u;\n    vec4 v4 = (1.0 / (float(range) - 1.0)) * vec4(Rand(uvec4(seed), uvec4(range)));\n\t\n \tvec4 oldFrag = texture(iChannel0, uv);\n    float rate = 0.002;\n    \n    fragColor = rate * vec4(v4.x, v4.y, v4.z, 1.0f) + (1.0 - rate) * oldFrag;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"\n// This is a demonstration of my integer random generator with uniform distribution.\n// The left pane shows random RGB pixels.\n// The middle is a running average of the same pixel values, demonstrating the long-term uniformity.\n// The third pane is an RGB histogram of the generated values, also for showing the uniform distribution of the generated values.\n\n// https://merlin3d.wordpress.com/2018/10/04/correlated-multi-jittered-sampling-on-gpu/\n\n#define RANGE 256u\t// arbitrary number in [0..6556]\n#define HIST_SAMPLES (uint(iResolution.x) / 4u)\n#define VALUES_PER_BIN 310u\n\n// Generate an unsigned integer random vector in the range of [0..range-1]^3 \n// with uniform distribution from a linear seed using mixing functions.\n// Maximum valid value of range is 65535.\nuvec4 Rand(uvec4 seed, uvec4 range)\n{\n    seed ^= uvec4(seed.x >> 19, seed.y >> 19, seed.z >> 13, seed.w >> 19);\n    seed *= uvec4(1619700021, 3466831627, 923620057, 3466831627);\n    seed ^= uvec4(seed.x >> 16, seed.y >> 12, seed.z >> 18, seed.w >> 17);\n    seed *= uvec4(175973783, 2388179301, 3077236438, 2388179301);\n    seed ^= uvec4(seed.x >> 15, seed.y >> 17, seed.z >> 18, seed.w >> 18);\n    \n    uvec4 f = seed & uvec4(0x0000ffff);\n    uvec4 f2 = seed >> 16;\n    return (range * f + (seed % range)) >> 16;    \n}\n\nuvec4 Seed(in vec2 fragCoord, in vec3 iResolution, in float iTime)\n{\n    float fseed = fragCoord.x + fragCoord.y * iResolution.x + 1.0 + mod(iTime, 16.0f) * iResolution.x * iResolution.y;\n    return uvec4(fseed);\n}","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[{"id":"XsXGR8","channel":0}],"code":"\nuvec4 histogram(in vec2 fragCoord, uvec4 seed)\n{\n    uvec2 uRes = uvec2(iResolution);\n    uvec2 uFragCoord = uvec2(fragCoord);\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uint buckets = uint(ceil(iResolution.y / float(VALUES_PER_BIN)));\n    uint b = uint(fragCoord.y) / VALUES_PER_BIN;\n    uint bucketLo = RANGE * b / buckets;\n    uint bucketHi = RANGE * (b + 1u) / buckets;\n    \n    uvec4 sum = uvec4(0u);\n\n    for (uint i = 0u; i < HIST_SAMPLES; ++i)\n    {\n        uvec4 r = Rand(uvec4(i * uint(iResolution.x * iResolution.y) + seed), uvec4(RANGE));\n        sum.x += uint(r.x >= bucketLo && r.x < bucketHi);\n        sum.y += uint(r.y >= bucketLo && r.y < bucketHi);\n        sum.z += uint(r.z >= bucketLo && r.z < bucketHi);\n        sum.w += uint(r.w >= bucketLo && r.w < bucketHi);            \n    }\n    return sum;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tuvec4 seed = Seed(fragCoord, iResolution, iTime);\n\tfragColor = vec4(histogram(fragCoord.xy, seed));\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"// Note that after a few hundred seconds of running, the generated sound gets \"whirring\", then it stops. \n// It is probably due to FP errors, but it needs to be examined furhter.\n\nvec2 mainSound( in int samp, float time )\n{\n    uvec4 seed = uvec4(time * 44000.0);\n    \n    vec4 v4 = 1.0 / 65536.0 * vec4(Rand(uvec4(seed), uvec4(65536))) - 0.5;\n    return v4.xy;\n}","name":"Sound","description":"","type":"sound"}]}