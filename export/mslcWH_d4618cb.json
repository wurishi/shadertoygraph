{"ver":"0.1","info":{"id":"mslcWH","date":"1686786144","viewed":70,"name":"Game of Life Cellular Automata a","username":"tomato","description":"It's a basic game of life, implemented in the form of a fragment shader, using Buffer A to store the previous generation and passing life information through the blue channel\n\nfollowed along with https://www.youtube.com/watch?v=xh61Ol2X4GA&ab_channel=TheA","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec4 col = texture(iChannel0, uv / SCALE);\n    fragColor = vec4(col);    \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define BRUSH_SIZE 5.\n#define SLOW 10\n\nint get_neighbors(ivec2 p) {\n    int num = 0;\n        for (int x = -1; x < 2; x++)\n            for (int y = -1; y < 2; y++) {\n                if (x==0 && y==0) continue;\n                num += texelFetch(iChannel1, p + ivec2(x, y), 0).r > 0.5 ? 1 : 0;\n            }\n    return num;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //vec2 scale_factor = iResolution.xy / vec2(ROWS, COLS);\n    vec2 uv = fragCoord/iResolution.xy;\n    //vec2 uv = fragCoord/vec2(ROWS, COLS);\n    vec4 col = vec4(0);\n    \n    if (iFrame < 10) // initial\n        col = texture(iChannel0, uv);\n    else if (iFrame % SLOW != 0) // wait\n        col = texture(iChannel1, uv);\n    else { // do life\n        bool alive = texelFetch(iChannel1, ivec2(fragCoord), 0).r > .5;\n        int num = get_neighbors(ivec2(fragCoord));\n        \n        float next = (alive && num == 2 || num == 3) ? 1.: 0.;\n        \n        col = vec4(next);\n    }\n    \n    if (iMouse.z > 0.5 && length(iMouse.xy / SCALE - fragCoord.xy) < BRUSH_SIZE)\n        col = vec4(1.);\n    \n    fragColor = col;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define SCALE 3.0","name":"Common","description":"","type":"common"}]}