{"ver":"0.1","info":{"id":"3l2cD3","date":"1595553375","viewed":118,"name":"correct perlin noise in 3d","username":"CoolerZ","description":"Correct implementation of perlin noise in 3d.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["noise","perlin"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nBased on http://staffwww.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf\nThe pdf gives details and code for both perlin and simplex noise in Java.\n*/\n#define A .5\n#define F 1.\n\nconst vec3[] grad = vec3[](\n    vec3(1,1,0),vec3(-1,1,0),vec3(1,-1,0),vec3(-1,-1,0),\n\tvec3(1,0,1),vec3(-1,0,1),vec3(1,0,-1),vec3(-1,0,-1),\n\tvec3(0,1,1),vec3(0,-1,1),vec3(0,1,-1),vec3(0,-1,-1)\n);\n\nconst int perm[] = int[](151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208,89,18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180,151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208,89,18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180);\n\nvec3 fade(vec3 x)\n{\n    return x*x*x*(x*(x*6.-15.)+10.);\n}\n\nint hash(ivec3 XYZ)\n{\n    return perm[XYZ.x+perm[XYZ.y+perm[XYZ.z]]]%12;\n}\n\nfloat perlin3d(vec3 xyz)\n{\n    ivec3 XYZ = ivec3(floor(xyz)) & 0xFF;\n    xyz = fract(xyz);\n\n    int gi000 = hash(XYZ);\n    int gi001 = hash(XYZ + ivec3(0,0,1));\n    int gi010 = hash(XYZ + ivec3(0,1,0));\n    int gi011 = hash(XYZ + ivec3(0,1,1));\n    int gi100 = hash(XYZ + ivec3(1,0,0));\n    int gi101 = hash(XYZ + ivec3(1,0,1));\n    int gi110 = hash(XYZ + ivec3(1,1,0));\n    int gi111 = hash(XYZ + ivec3(1,1,1));\n\n    float n000 = dot(grad[gi000],xyz);\n    float n001 = dot(grad[gi001],xyz+vec3( 0., 0.,-1.));\n    float n010 = dot(grad[gi010],xyz+vec3( 0.,-1., 0.));\n    float n011 = dot(grad[gi011],xyz+vec3( 0.,-1.,-1.));\n    float n100 = dot(grad[gi100],xyz+vec3(-1., 0., 0.));\n    float n101 = dot(grad[gi101],xyz+vec3(-1., 0.,-1.));\n    float n110 = dot(grad[gi110],xyz+vec3(-1.,-1., 0.));\n    float n111 = dot(grad[gi111],xyz+vec3(-1.,-1.,-1.));\n\n    vec3 uvw = fade(xyz);\n\n    float nx00 = mix(n000, n100, uvw.x);\n    float nx01 = mix(n001, n101, uvw.x);\n    float nx10 = mix(n010, n110, uvw.x);\n    float nx11 = mix(n011, n111, uvw.x);\n\n    float nxy0 = mix(nx00, nx10, uvw.y);\n    float nxy1 = mix(nx01, nx11, uvw.y);\n\n    return mix(nxy0, nxy1, uvw.z);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5)/(iResolution.xy-1.);\n    uv = 2.*uv-1.;\n    uv.x *= iResolution.x/iResolution.y;\n\n    vec3 pos = vec3(uv*8., iTime);\n    // vec3 col = vec3(perlin3d(pos));\n\n    float x0 = A*perlin3d(pos*F);\n    float x1 = A*A*perlin3d(pos*F*2.);\n    float x2 = A*A*A*perlin3d(pos*F*4.);\n    float x3 = A*A*A*A*perlin3d(pos*F*8.);\n    float x4 = A*A*A*A*A*perlin3d(pos*F*16.);\n\n    vec3 col = vec3(4.*(x0 + x1 + x2 + x3 + x4));\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}