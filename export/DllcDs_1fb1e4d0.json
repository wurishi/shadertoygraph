{"ver":"0.1","info":{"id":"DllcDs","date":"1691368639","viewed":198,"name":"SDF Writer w/ JFA","username":"fenix","description":"Computing a 2D signed distance field per-pixel via jump flood algorithm. Higher paint calls work well for faster update. Interactive-only: use mouse to draw a shape.\n\n* mouse to draw *\n* space to reset *","likes":13,"published":3,"flags":48,"usePreview":0,"tags":["2d","mouse","interactive","sdf","flood","jump","codegolf","multipass","jfa"],"hasliked":0,"parentid":"dd2fWV","parentname":"SDF Writer"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// ---------------------------------------------------------------------------------------\n//\tCreated by fenix in 2023\n//\tLicense Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n//\n//  Following up on my earlier shader that used a poorer algorithm, I wanted to at least\n//  implement the jump flood algorithm as recommended by MysteryPancake. I'm hoping to\n//  come up with a more compelling demonstration for JFA, since the experiece of this\n//  shader is captured with the very simple algorithm here in MysteryPancake's\n//\n//      Drawable SDF - Distance 2D     https://shadertoy.com/view/Dls3RS\n//\n//  There are some much cooler JFA shaders than this one already. I recommend:\n//\n//      Van Damme - Distance           https://shadertoy.com/view/Wl3fWX\n//      JFA Voronoi Video Filter       https://shadertoy.com/view/4sy3W3\n//\n//  Implementation-wise, there's not much to say. Each pixel in buffer A holds the\n//  address of the closest zero-distance pixel in xy.  I spent more time on the init\n//  calculation than the actual JFA step.\n// ---------------------------------------------------------------------------------------\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    O.x = D(T(u).xy, u);\n    \n    O = mix( vec4(1), vec4(.9,.6,.3,0) // iq's standard SDF distance visualization\n\t                     * (1. - exp(-6.*abs(O.x * .002)))\n\t                     * (.8 + .2*cos(O.x * .3)), smoothstep(0., 3.,O.x) );\n                         \n    vec2 c = (vec2(sin(iTime * .3), cos(iTime)) * .45 + .5) * iResolution.xy; // circle center\n    O = mix(O, vec4(1, 1, 0, 1), smoothstep(3., 0., abs(D(c, u) - D(T(c).xy, c)))); // render circle\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// ---------------------------------------------------------------------------------------\n//   XY coordinates hold the location of nearest zero-distance (drawn-on) pixel\n// ---------------------------------------------------------------------------------------\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec3 R = iResolution, m = iMouse.xyz;\n    \n    if (max(u.x, u.y) < 1.)\n        O = vec4(0, 0, 0, R.x * R.y); // resolution stored in lower left corner\n    else if (iFrame == 0 || // bootstrap\n        T(vec2(0)).w != R.x * R.y || // detect resolution changes\n        texelFetch(iChannel3,ivec2(32,0),0).x > 0.) // support keyboard \"space\" reset)\n    {\n        vec2 c = (sign(u - .5 * R.xy) * .5 + .5) * R.xy, // closest corner\n             a = vec2(u.x, c.y), // closest top/bottom wall\n             b = vec2(c.x, u.y); // closest side wall\n             \n        O.xy = D(u, a) < D(u, b) ? a : b;\n    }\n    else\n    {\n        // support drawing with mouse\n        O = m.z > 0. && D(m.xy, u) < R.y * .005 ? u.xyyy : T(u);\n        \n        // search nearby cells for new shorter path\n        for (int x = -1; x <= 1; ++x)\n        for (int y = -1; y <= 1; ++y)\n        {\n            vec2 a = T(u + exp2(float(iFrame % 8)) * vec2(x, y)).xy;\n            O.xy = D(u, a) < D(O.xy, u) ? a : O.xy; // when we find a shorter path, update our root\n        }\n    }\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define T(u) texelFetch(iChannel0, ivec2(u), 0)\n#define D distance","name":"Common","description":"","type":"common"}]}