{"ver":"0.1","info":{"id":"lcySDD","date":"1715276578","viewed":25,"name":"Eggy","username":"DasBooter","description":"egg!","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["egg"],"hasliked":0,"parentid":"XftXR4","parentname":"Isovalues Vorple "},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat sdRoundedBox( in vec2 p, in vec2 b, in vec4 r )\n{\n    r.xy = (p.x>0.0)?r.xy : r.zw;\n    r.x  = (p.y>0.0)?r.x  : r.y;\n    vec2 q = abs(p)-b+r.x;\n    return min(max(q.x,q.y),0.0) + length(max(q,0.0)) - r.x;\n}\n\n\n// --- noise from procedural pseudo-Perlin (better but not so nice derivatives) ---------\n                    // ( adapted from IQ )\n\nfloat noise3( vec3 x ) {\n    vec3 p = floor(x),f = fract(x);\n\n    f = f*f*(3.-2.*f);  // or smoothstep     // to make derivative continuous at borders\n\n#define hash3(p)  fract(sin(1e3*dot(p,vec3(1,57,-13.7)))*4375.5453)        // rand\n    \n    return mix( mix(mix( hash3(p+vec3(0,0,0)), hash3(p+vec3(1,0,0)),f.x),       // triilinear interp\n                    mix( hash3(p+vec3(0,1,0)), hash3(p+vec3(1,1,0)),f.x),f.y),\n                mix(mix( hash3(p+vec3(0,0,1)), hash3(p+vec3(1,0,1)),f.x),       \n                    mix( hash3(p+vec3(0,1,1)), hash3(p+vec3(1,1,1)),f.x),f.y), f.z);\n}\n\n#define noise(x) (noise3(x)+noise3(x+11.5)) / 2. // pseudoperlin improvement from foxes idea\n\nvoid mainImage(out vec4 O, vec2 U ) // ------------ draw isovalues\n{\n    float t = float(int(iTime) % 100) + iTime - float(floor(iTime)); //mod cause noise breaks at high values\n\tvec2 p = (2.0*U-iResolution.xy)/min(iResolution.x,iResolution.y) - vec2(.3,0);\n    //animation\n    p += vec2(sin(t)+(cos(t)*cos(t)),0) / 3.0;\n    vec2 p2 = p + vec2(sin(t- 0.5)+(cos(t -0.5)*cos(t - 0.5)),0) / 8.0;\n\n    //background \n    float n = noise(vec3(6.0*p+vec2(3,3)*20.0 , t));\n    vec3 col = (n>0.5) ? vec3(0.9,0.6,0.3): vec3(0.88,0.62,0.34);\n\n    //pan handle\n    float d = sdRoundedBox(p + vec2(1.,0.),vec2(.8,.15),vec4(.1));\n    col = (d>0.) ? col: vec3(-d);\n    \n    //pan\n    d = (length(p));\n    col = (d<.99) ? vec3(0.05) : col;\n    col = (d<0.95) ? vec3(d - .8) : col;\n\n    //egg white\n    n = noise(vec3(p2*3.0, t)) / 6.0;\n\td = pow(length(p2),8.)-(n-.01);\n    col = (d>0.0) ? col : vec3(1.2 - abs(d) * .1 - pow(length(p2),2.) * .4  - n * .8);\n    \n    //bubbles in egg white\n    n = noise(vec3(p2 * 30.,t)) / 5.0;\n    n += noise(vec3((p2 + sin(t)) * 50.,t)) / 8.0;\n    n = (n-.255);\n    col = d<0.0 && n > .0 ? vec3(0.7+n*30.): col;\n\n    //egg yellow\n    n = noise(vec3(U*4.3/min(iResolution.x,iResolution.y), t)) / 10.0;\n    d = pow(length(p2),3.4)-(n/8.);\n    col = (d>0.0) ? col : vec3(vec2(0.9 - length(p2*.3) + d),0.0);\n    \n    O = vec4(col,1.); \n\n}","name":"Image","description":"","type":"image"}]}