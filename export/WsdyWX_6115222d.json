{"ver":"0.1","info":{"id":"WsdyWX","date":"1601911299","viewed":335,"name":"Lens distortion effect (WebCam)","username":"GCScholar","description":"Click and move the mouse to move the lens. ","likes":3,"published":1,"flags":2,"usePreview":0,"tags":["oldschool","distortion","lens","old","school"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define FOCAL_LENGTH\t1.0\n#define OBJECT_DISTANCE 0.6\n#define LENS_HEIGHT\t\t1.6\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 U = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    \n    vec2 U_lensCenter;\n    vec2 lensCenter;\n    if(iMouse.w != 0.0) \n    {\n    \tU_lensCenter = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n     \tlensCenter = iMouse.xy/iResolution.xy;\n    }\n    else \n    {\n    \tU_lensCenter = vec2(0.0, 0.0);\n     \tlensCenter = vec2(0.5, 0.5);\n    }\n    \n    if(length(U-U_lensCenter) < LENS_HEIGHT) \n    {\n    \t// Compute the new coordinates distorted from the lens\n    \tU -= U_lensCenter;\n        U.x = tan(asin(U.x/FOCAL_LENGTH*0.5))*OBJECT_DISTANCE*2.;\n    \tU.y = tan(asin(U.y/FOCAL_LENGTH*0.5))*OBJECT_DISTANCE*2.;\n        U += U_lensCenter;\n        \n        // U to UV\n        vec2 uv = (((U*iResolution.y)+iResolution.xy)/2.0) / iResolution.xy;\n        fragColor = texture(iChannel0, uv);\n    }\n    else \n   {\t\n        vec2 uv = fragCoord/iResolution.xy;\n      fragColor = texture(iChannel0,uv);\n    }\n}","name":"Image","description":"","type":"image"}]}