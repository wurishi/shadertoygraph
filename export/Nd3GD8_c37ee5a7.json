{"ver":"0.1","info":{"id":"Nd3GD8","date":"1629631800","viewed":176,"name":"Infinite Bridges","username":"Koulatko","description":"Another domain repetition thingy","likes":11,"published":1,"flags":48,"usePreview":0,"tags":["procedural","3d","raytracing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3Rr","filepath":"/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","previewfilepath":"/media/ap/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nvec4 ray_grid(vec3 ro, vec3 rd, out int obj_id){\n    const float epsilon = 0.0001;\n    float depth = 0.0;\n    float stepsize = 1.0;\n    //Could use some optimization (stop marching through empty space)\n    for(int i = 0; i < 50; i++){\n        vec3 p = fract(ro + (depth)*rd);\n        vec3 F = floor(ro + depth*rd);\n        \n        \n        vec4 hashpx = hash42(2.0*F.xy+vec2(1.0, 0.0));\n        vec4 hashnx = hash42(2.0*F.xy-vec2(1.0, 0.0));\n        vec4 hashpy = hash42(2.0*F.xy+vec2(0.0, 1.0));\n        vec4 hashny = hash42(2.0*F.xy-vec2(0.0, 1.0));\n\n\n        float rad = 0.1;\n\n        vec4 brg = vec4(hashpx.z, hashnx.z, hashpy.z, hashny.z);\n\n        vec4 h;\n        vec4 h1;\n        int obj_id_tmp;\n        float p_width = 0.2;\n        \n        if(hashpx.y > 0.9){\n            h1 = ray_sphere(ro-vec3(F.xy, 0.0)-vec3(0.5, 0.5, 0.18), rd, 0.08);\n            if(h1.w > 0.0 && (h1.w < h.w || h.w <= 0.0)){\n                h = h1;\n                obj_id_tmp = 3;\n            }\n        }\n        \n        \n        h1 = ray_box(ro-vec3(F.xy, 0.0)-vec3(0.5, 0.5, 0.0), rd, vec3(p_width, p_width, 0.1));\n        if(h1.w > 0.0 && (h1.w < h.w || h.w <= 0.0)){\n            h = h1;\n            obj_id_tmp = 1;\n        }\n\n        for(int i = 0; i < 4; i++){//Vomit-inducing code but who cares :P\n            vec2 off[4] = vec2[](vec2(1.0, 0.0), vec2(-1.0, 0.0), vec2(0.0, 1.0), vec2(0.0, -1.0));\n\n            if(brg[i] > 0.5){\n                \n                h1 = ray_box(ro-vec3(F.xy, 0.0)-vec3(0.5+0.5*off[i], 0.02), rd, vec3(0.1+0.2*abs(off[i]), 0.06));\n\n                if(h1.w > 0.0 && (h1.w < h.w || h.w <= 0.0)){\n                    h = h1;\n                    obj_id_tmp = 1;\n                }\n            } else\n            if(ray_boundbox(ro-vec3(F.xy, 0.16)-vec3(0.5+(p_width-0.01)*off[i], 0.0), rd, vec3(0.01+0.19*abs(off[i].yx), 0.08)) ) {\n                \n                \n                \n                h1 = ray_box(ro-vec3(F.xy, 0.22)-vec3(0.5+(p_width-0.01)*off[i], 0.0), rd, vec3(0.01+0.19*abs(off[i].yx), 0.01));\n                \n                \n\n                \n                if(h1.w > 0.0 && (h1.w < h.w || h.w <= 0.0)){\n                    h = h1;\n                    obj_id_tmp = 2;\n                }\n                \n                for(int j = 0; j < 4; j++){\n                    \n                    vec2 poff = off[i].yx;\n                    float fj = (float(j)+0.5)/4.0;\n                    vec3 p1 = vec3(0.5+(p_width-0.01)*off[i] + 0.2*(-1.0+2.0*fj)*poff, 0.15);\n                    vec3 s1 = vec3(0.008, 0.008, 0.075);\n                    h1 = ray_box(ro-vec3(F.xy, 0.0)-p1, rd, s1);\n\n                    if(h1.w > 0.0 && (h1.w < h.w || h.w <= 0.0)){\n                        h = h1;\n                        obj_id_tmp = 2;\n                    }\n                }\n            \n            }\n        }\n\n\n        if(h.w > 0.0){obj_id = obj_id_tmp; return h;};\n        \n        \n        vec3 o = 1.0 - max(vec3(0.0), sign(-rd));\n        float q1 = min(\n            -(p.x-o.x)/rd.x,\n            -(p.y-o.y)/rd.y\n            );\n        \n        depth += q1+epsilon;\n    }\n    return vec4(0.0);\n}\n\nvec4 ray_scene(vec3 ro, vec3 rd, out int obj_id){\n    vec4 h;\n    vec4 h1;\n    \n    h1 = ray_grid(ro/8.0, rd, obj_id);\n    if(h1.w > 0.0 && (h1.w < h.w || h.w <= 0.0)){\n        h = h1;\n        h.w *= 8.0;\n    }\n    \n    /*h1 = ray_sphere(ro, rd, 1.0);\n    if(h1.w > 0.0 && (h1.w < h.w || h.w <= 0.0)){\n        h = h1;\n    }*/\n    \n    return h;\n}\n\nvec3 triplanar(sampler2D tex, vec3 p, vec3 d){\n    vec3 X = texture(tex, p.yz).xyz;\n    vec3 Y = texture(tex, p.xz).xyz;\n    vec3 Z = texture(tex, p.xy).xyz;\n    \n    vec3 w = abs(d);\n    w /= dot(w, vec3(1.0));\n    \n    return w.x*X + w.y*Y + w.z*Z;\n    \n    return mat3(X,Y,Z)*w;\n}\n\nvec3 sky(vec3 rd, bool indirect){\n\n    float z = rd.z*0.5+0.5;\n    \n    vec3 o = (z*z*z*z)*vec3(0.4, 0.6, 0.9);\n    \n    vec3 L = normalize(vec3(1.0, 0.4, 1.0));\n    if(!indirect) o += min(1.0, 0.005/(1.0-dot(rd, L)));\n    return o;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec2 ss = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n\n    vec3 ro = texelFetch(iChannel3, ivec2(0,0), 0).xyz;\n    \n    vec4 camera_angle_texel = texelFetch(iChannel3, ivec2(1,0), 0);\n    float pitch = camera_angle_texel.y;\n    float yaw = camera_angle_texel.x;\n    \n    vec3 right = vec3(sin(yaw), -cos(yaw), 0.0);\n    vec3 up = vec3(-cos(yaw)*sin(pitch), -sin(yaw)*sin(pitch), cos(pitch));\n    vec3 forward = vec3(cos(yaw)*cos(pitch), sin(yaw)*cos(pitch), sin(pitch));\n\n    vec3 rd = normalize(right*ss.x + up*ss.y + forward);\n    \n    int o_id;\n    vec4 h = ray_scene(ro, rd, o_id);\n    \n    vec3 col;\n    if(h.w > 0.0){\n        vec3 L = normalize(vec3(1.0, 0.4, 1.0));\n        vec3 N = h.xyz;\n        \n        vec3 illum = vec3(0.15, 0.2, 0.3);\n        \n        int trashi;\n        vec4 shadow_cast = ray_scene(ro+h.w*rd+0.001*N, L, trashi);\n        if(shadow_cast.w <= 0.0){\n            illum += vec3(1.5, 1.4, 1.3)*max(0.0, dot(N, L));\n        }\n        \n        vec3 tex = pow(triplanar(iChannel0, (ro+h.w*rd), h.xyz), vec3(2.2));\n        \n        if(o_id < 3) tex = tex.zyx;\n        if(o_id == 3) tex = tex.xzy;\n        \n        col = illum*tex;\n    }\n    \n    col = mix(col, sky(rd, h.w > 0.0), h.w <= 0.0 ? vec3(1.0) : vec3(1.0)-exp(-0.03*vec3(0.4, 0.5, 0.6)*h.w));\n    \n    col = pow(col, vec3(1.0/2.2));\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    //W = 87\n    //S = 83\n    //D = 68\n    //A = 65\n    //space = 32\n    //shift = 16\n    \n    //0,0 = camera pos\n    //1,0 = camera_euler\n    \n    bool is_start = iFrame == 0;\n    \n    ivec2 fc = ivec2(fragCoord);\n    vec4 cv = texelFetch(iChannel0, fc, 0);\n    vec4 nv = cv;\n    if(fc == ivec2(0,0)){ //Camera motion\n    \n        if(is_start){ //Init\n            fragColor = vec4(2.0, 0.0, 4.5, 0.0);\n            return;\n        }\n        \n        vec4 camera_angle_texel = texelFetch(iChannel0, ivec2(1,0), 0); //Geometry\n        float pitch = camera_angle_texel.y;\n        float yaw = camera_angle_texel.x;\n        \n        vec3 off;\n        \n        float W = texelFetch(iChannel1, ivec2(87, 0), 0).x;\n        float S = texelFetch(iChannel1, ivec2(83, 0), 0).x;\n        float A = texelFetch(iChannel1, ivec2(65, 0), 0).x;\n        float D = texelFetch(iChannel1, ivec2(68, 0), 0).x;\n        float space = texelFetch(iChannel1, ivec2(32, 0), 0).x;\n        float shift = texelFetch(iChannel1, ivec2(16, 0), 0).x;\n        \n        float F = texelFetch(iChannel1, ivec2(70, 0), 0).x;\n        \n        vec3 hor_forward = vec3(cos(yaw), sin(yaw), 0.0); \n        vec3 hor_right = vec3(sin(yaw), -cos(yaw), 0.0);\n        \n        float spd = 4.1;\n        if(F > 0.0) spd *= 2.0;\n        if(W > 0.0){\n            nv.xyz += spd*iTimeDelta*hor_forward;\n        }\n        if(S > 0.0){\n           nv.xyz -= spd*iTimeDelta*hor_forward;\n        }\n        if(A > 0.0){\n            nv.xyz -= spd*iTimeDelta*hor_right;\n        }\n        if(D > 0.0){\n            nv.xyz += spd*iTimeDelta*hor_right;\n        }\n        if(space > 0.0){\n            nv.z += spd*iTimeDelta;\n        }\n        if(shift > 0.0){\n            nv.z -= spd*iTimeDelta;\n        }\n    }\n    \n    //0 - increment per-frame, smoother\n    //1 - increment relative to last click, time-stable but stutters\n    \n    int mouse_mode = 0;\n    \n    \n    if(fc == ivec2(1,0)){\n        if(is_start){\n            fragColor = vec4(0.0, 0.0, 0.0, 0.0);\n            return;\n        }\n        vec4 old_mouse = texelFetch(iChannel0, ivec2(2,0), 0);\n        vec4 anchor = texelFetch(iChannel0, ivec2(2,1), 0);\n        \n        if(old_mouse.z > 0.0){\n            if(mouse_mode == 0){\n                nv.xy = cv.xy - 1.5*vec2(1.0,-1.0)*(iMouse.xy - old_mouse.xy)/iResolution.y;\n                nv.x = mod(nv.x, 2.0*PI);\n                nv.y = clamp(nv.y, -0.5*PI, 0.5*PI);\n            }\n            if(mouse_mode == 1){\n                nv.xy = anchor.xy + 0.01*vec2(-1.0, 1.0)*(iMouse.xy - old_mouse.xy);\n            }\n            \n        }\n        \n    }\n    if(fc == ivec2(2,0)){\n        if(mouse_mode == 0){\n            nv = iMouse;\n        }\n        if(mouse_mode == 1){\n            if(iMouse.z != cv.z) nv = iMouse;\n        }\n    }\n    if(fc == ivec2(2,1)){\n        if(mouse_mode == 1){\n            vec4 old_mouse = texelFetch(iChannel0, ivec2(2,0), 0);\n            if(iMouse.z != old_mouse.z) nv = texelFetch(iChannel0, ivec2(1,0), 0);\n        }\n    }\n    \n    fragColor = nv;\n    \n    \n}\n","name":"Buffer D","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define PI 3.14159265358979\n\n\n\n\nvec4 ray_plane(vec3 ro, vec3 rd, vec4 plane){\n    float a = dot(plane.xyz, rd);\n    float b = dot(plane.xyz, ro) - plane.w;\n    return vec4(plane.xyz, -b/a);\n}\n\nvec4 ray_sphere(vec3 ro, vec3 rd, float r){\n    float b = -dot(ro, rd);\n    float c = dot(ro, ro) - r*r;\n    float d = b*b-c;\n    if(d < 0.0) return vec4(-1.0);\n    float h = sqrt(d);\n    float t = b < h ? b+h : b-h;\n    return vec4((ro+t*rd)/r, t);\n}\n\nvec4 ray_box(vec3 ro, vec3 rd, vec3 S){\n    vec3 c = -ro/rd;\n    vec3 d = S/abs(rd);\n    \n    vec3 N = c-d;\n    vec3 F = c+d;\n    \n    float tN = max(N.x, max(N.y, N.z));\n    float tF = min(F.x, min(F.y, F.z));\n    \n    if(tN > tF) return vec4(-1.0);\n    float t = tN > 0.0 ? tN : tF;\n    vec3 nrm = -sign(rd)*vec3(\n    N.x == tN ? 1.0 : 0.0,\n    N.y == tN ? 1.0 : 0.0,\n    N.z == tN ? 1.0 : 0.0\n    );\n    return vec4(nrm, t);\n}\n\nbool ray_boundbox(vec3 ro, vec3 rd, vec3 S){\n    vec3 c = -ro/rd;\n    vec3 d = S/abs(rd);\n    \n    vec3 N = c-d;\n    vec3 F = c+d;\n    \n    float tN = max(N.x, max(N.y, N.z));\n    float tF = min(F.x, min(F.y, F.z));\n    \n    return tN < tF && (tN > 0.0 || tF > 0.0);\n}\n\n\n\n//https://github.com/mattatz/ShibuyaCrowd/blob/master/source/shaders/common/quaternion.glsl\n//https://twistedpairdevelopment.wordpress.com/2013/02/11/rotating-a-vector-by-a-quaternion-in-glsl/\nvec4 qmul(vec4 q1, vec4 q2){\n\treturn vec4(\n\t\tq2.xyz * q1.w + q1.xyz * q2.w + cross(q1.xyz, q2.xyz),\n\t\tq1.w * q2.w - dot(q1.xyz, q2.xyz)\n\t);\n}\n\nvec3 rotate_vector(vec4 q, vec3 v){\n    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);\n}\n\nvec4 axis_angle_to_quat(vec4 a){\n    return vec4(a.xyz*sin(a.w/2.0), cos(a.w/2.0));\n}\n\nvec4 quat_to_axis_angle(vec4 q){\n    vec3 axis = normalize(q.xyz);\n    float angle = acos(q.w)*2.0;\n    return vec4(axis, angle);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// Hash without Sine\n// MIT License...\n/* Copyright (c)2014 David Hoskins.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.*/\n\n//----------------------------------------------------------------------------------------\n//  1 out, 1 in...\nfloat hash11(float p)\n{\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\n//----------------------------------------------------------------------------------------\n//  1 out, 2 in...\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n//----------------------------------------------------------------------------------------\n//  1 out, 3 in...\nfloat hash13(vec3 p3)\n{\n\tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.zyx + 31.32);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n//----------------------------------------------------------------------------------------\n//  2 out, 1 in...\nvec2 hash21(float p)\n{\n\tvec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n\tp3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\n//----------------------------------------------------------------------------------------\n///  2 out, 2 in...\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\n//----------------------------------------------------------------------------------------\n///  2 out, 3 in...\nvec2 hash23(vec3 p3)\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\n//----------------------------------------------------------------------------------------\n//  3 out, 1 in...\nvec3 hash31(float p)\n{\n   vec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n   p3 += dot(p3, p3.yzx+33.33);\n   return fract((p3.xxy+p3.yzz)*p3.zyx); \n}\n\n\n//----------------------------------------------------------------------------------------\n///  3 out, 2 in...\nvec3 hash32(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\n\n//----------------------------------------------------------------------------------------\n///  3 out, 3 in...\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n\n}\n\n//----------------------------------------------------------------------------------------\n// 4 out, 1 in...\nvec4 hash41(float p)\n{\n\tvec4 p4 = fract(vec4(p) * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n    \n}\n\n//----------------------------------------------------------------------------------------\n// 4 out, 2 in...\nvec4 hash42(vec2 p)\n{\n\tvec4 p4 = fract(vec4(p.xyxy) * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n\n}\n\n//----------------------------------------------------------------------------------------\n// 4 out, 3 in...\nvec4 hash43(vec3 p)\n{\n\tvec4 p4 = fract(vec4(p.xyzx)  * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}\n\n//----------------------------------------------------------------------------------------\n// 4 out, 4 in...\nvec4 hash44(vec4 p4)\n{\n\tp4 = fract(p4  * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}","name":"Common","description":"","type":"common"}]}