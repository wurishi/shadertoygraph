{"ver":"0.1","info":{"id":"MtVSRz","date":"1482607382","viewed":265,"name":"Triangle Flash","username":"ptrgags","description":"Trying out hexagonal coordinates for the first time after viewing this tutorial by FabriceNeyret2 -- https://www.shadertoy.com/view/4dKXR3","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["2d","triangle","rgb","hexgrid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415\n#define center (iResolution.xy / 2.0)\n\n//Skew space 60° to make diamonds\nconst mat2 DIAMOND = mat2(\n\t1.0, 0.0,\n\t//-cot(60°), csc(60°)\n    -1.0 / tan(PI / 3.0), 1.0 / sin(PI / 3.0)\n);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //Centered UV coordinates accounting for aspect ratio\n\tvec2 uv = (fragCoord.xy - center) / iResolution.y;\n    \n    //Scale of the triangles in the grid\n    float num_cells = 10.0;\n    \n    //Transform into a diamond tiling\n    uv = num_cells * DIAMOND * uv;\n    \n    //Convert to hex coordinates\n    vec3 hex = vec3(uv, 1.0 - uv.x - uv.y);\n    \n    //Divide into cells\n    vec3 hex_cell = floor(hex);\n    \n    //Make steps of color in each of the three hex axes. Shift radially in time.\n    vec3 shifted_cells = hex_cell / num_cells + 2.0 * iTime;\n    //Make the animation loop around\n    vec3 cell_color = 1.0 - mod(shifted_cells, 0.4 * num_cells);\n    \n    //Display\n    fragColor = vec4(cell_color, 1.0);\n}","name":"Image","description":"","type":"image"}]}