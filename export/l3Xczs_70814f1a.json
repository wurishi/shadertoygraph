{"ver":"0.1","info":{"id":"l3Xczs","date":"1726558865","viewed":10,"name":"antonkrynitsyn_003","username":"antonkrynitsyn","description":"test","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"l3fczl","parentname":"antonkrynitsyn_001"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2[] points = vec2[](\n    vec2(0.1, 0.5),\n    vec2(0.2, 0.7),\n    vec2(0.1, 0.9),\n    vec2(0.8, 0.5),\n    vec2(0.4, 0.9)\n);\nfloat[] speeds = float[](\n    1.0,\n    0.1,\n    0.5,\n    0.3,\n    0.2\n);\n\nfloat speedCoef = 0.1;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n     \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float colors[points.length()];\n    float color = 0.0;\n    \n    float bitSpeedCoef = 0.2;\n    float bitCoef = max(0.0, sin(iTime*10.0*bitSpeedCoef) - 0.6) * 2.5;\n    //float bitCoef = 1.0;\n    \n    for (int i = 0; i < points.length(); i++) {\n        vec2 point = points[i];\n        float speed = speeds[i];\n        vec2 pointMoved1 = mod(point + vec2(iTime*speed*speedCoef, iTime*speed*speedCoef), vec2(1.0, 1.0));\n        vec2 pointMoved = mix(vec2(-0.2, -0.2), vec2(1.2, 1.2), pointMoved1);\n        vec2 pointInPixels = pointMoved * iResolution.xy;\n        float dist = distance(pointInPixels, fragCoord);\n        float minSide = min(iResolution.x, iResolution.y);\n        float circleRadius = minSide * (0.70 + bitCoef*0.2);\n\n        bool isInsideCircle = dist < circleRadius;\n\n\n        vec4 black = vec4(0.0, 0.0, 0.0 ,1.0);\n\n        if (isInsideCircle) {\n            float distRelative = dist / circleRadius;\n            float a = distRelative;\n            \n            \n            if (false && 0.1 < distRelative && distRelative < 0.2) {\n                \n                float b = -1.0 * pow(a, 1.2)+ 1.0;\n\n                vec4 col = vec4(b, b, b, 1.0);\n                color = max(b, color);\n                //fragColor = mix(col, black, 0.0);\n            } else if (distRelative > 0.3) {\n                float t1 = (distRelative - 0.3) / 0.7;\n                float t2 = pow(0.1, 4.0 * t1)*0.18;\n                float t = t2;\n                color += t;\n            } else if (distRelative < 0.3) {\n                float t1 = (0.3 - distRelative) / 0.3;\n                float t2 = pow(0.1, 4.0 * t1)*0.8;\n                float t = t2;\n                color += t;\n            }\n            \n        } else {\n\n        }\n    }\n    float b = clamp(color*5.0, 0.0, 1.0);\n    fragColor = vec4(b, b, b, 1.0);\n    \n    \n\n    // Time varying pixel color\n    \n\n    // Output to screen  \n}\n\n","name":"Image","description":"","type":"image"}]}