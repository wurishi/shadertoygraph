{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"#define A  0.0\n#define B  (iMouse.z <= 0.0 ? 0.25 : iMouse.y / iResolution.y - 0.5)\n#define C  0.0\n\n#define DA (B - A)\n#define DB (C - B)\n\n#define EDGE   0.005\n#define SMOOTH 0.0025\n\n// F(x,y)\nfloat F ( in vec2 coords )\n{\n    //return length(coords - vec2(1.0,0.0));   \n    //return length(coords);\n    float T = coords.x;\n    return\n        (A * (1.0-T) * (1.0-T)) + \n        (B * 2.0 * (1.0-T) * T) +\n        (C * T * T) -\n        coords.y;\n}\n\n/*\n// gradiant function for finding G for a generic function when you can't\n// get it analytically using partial derivatives.  We could do\n// partial derivatives of F above, but I'm being lazy.\nvec2 Grad( in vec2 coords )\n{\n    vec2 h = vec2( 0.01, 0.0 );\n    return vec2( F(coords+h.xy) - F(coords-h.xy),\n                 F(coords+h.yx) - F(coords-h.yx) ) / (2.0*h.x);\n}\n*/\n\n// doing a proper gradient function finally!\nvec2 Grad( in vec2 coords )\n{\n    float T = coords.x;\n    float S = (1.0-T);\n    float DF = DA * S + DB * T;\n        \n    return vec2 (\n        2.0*DF,\n        -1.0\n    );\n}      \n\n// signed distance function for F(x,y)\nfloat SDF( in vec2 coords )\n{\n    float v = F(coords);\n    vec2  g = Grad(coords);\n    return abs(v)/length(g);\n}\n\n// signed distance function for Circle, for control points\nfloat SDFCircle( in vec2 coords, in vec2 offset )\n{\n    coords -= offset;\n    float v = coords.x * coords.x + coords.y * coords.y - EDGE*EDGE;\n    vec2  g = vec2(2.0 * coords.x, 2.0 * coords.y);\n    return v/length(g); \n}\n\n//-----------------------------------------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n    float aspectRatio = iResolution.x / iResolution.y;\n    vec2 percent = ((fragCoord.xy / iResolution.xy) - vec2(0.25,0.5));\n    percent.x *= aspectRatio;\n\n    vec3 color = vec3(1.0,1.0,1.0);\n    float dist = SDFCircle(percent, vec2(0.0,A));\n\tif (dist < EDGE + SMOOTH)\n    {\n        dist = max(dist, 0.0);\n        dist = smoothstep(EDGE,EDGE + SMOOTH,dist);\n        color *= mix(vec3(1.0,0.0,0.0),vec3(1.0,1.0,1.0),dist);\n    }\n    \n    dist = SDFCircle(percent, vec2(0.5,B));\n\tif (dist < EDGE + SMOOTH)\n    {\n        dist = max(dist, 0.0);\n        dist = smoothstep(EDGE,EDGE + SMOOTH,dist);\n        color *= mix(vec3(0.0,1.0,0.0),vec3(1.0,1.0,1.0),dist);\n    }    \n    \n    dist = SDFCircle(percent, vec2(1.0,C));\n\tif (dist < EDGE + SMOOTH)\n    {\n        dist = max(dist, 0.0);\n        dist = smoothstep(EDGE,EDGE + SMOOTH,dist);\n        color *= mix(vec3(0.0,0.0,1.0),vec3(1.0,1.0,1.0),dist);\n    }    \n    \n    dist = SDF(percent);\n    if (dist < EDGE + SMOOTH)\n    {\n        dist = smoothstep(EDGE - SMOOTH,EDGE + SMOOTH,dist);\n        color *= (percent.x >= 0.0 && percent.x <= 1.0) ? vec3(dist) : vec3(0.95);\n    }\n       \n\tfragColor = vec4(color,1.0);\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"Xd2SR1","date":"1409079116","viewed":666,"name":"1D Quadratic Bezier","username":"demofox","description":"Use mouse to control the green control point.\nA quadratic bezier curve is defined as: P = A * (1-T)^2 + B * 2 * (1-T) * T + C * T ^2\nWhat if A,B,C are scalars?  You get a nice quadtratic f(x) function that has 3 control points.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["2d","bezier"],"hasliked":0,"parentid":"","parentname":""}}