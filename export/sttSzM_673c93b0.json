{"ver":"0.1","info":{"id":"sttSzM","date":"1643034954","viewed":96,"name":"Game-of-life","username":"AVKOR","description":"Conway game of life from https://www.youtube.com/watch?v=xh61Ol2X4GA","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["gameoflife"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n        \n    vec3 col = texture(iChannel0, uv).rgb;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Shows how to use the mouse input (only left button supported):\n//\n//      iMouse.xy  = mouse position during last button down\n//  abs(iMouse.zw) = mouse position during last button click\n// sign(iMouse.z)  = button is down\n// sign(iMouse.w)  = button is clicked\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 r = (2.*fragCoord - iResolution.xy)/iResolution.x;\n    vec2 r0 = vec2(0);\n    vec2 m  = (2.*iMouse.xy - iResolution.xy)/iResolution.x;\n\n    vec3 color;\n    vec3 texure_color = texture(iChannel0, fragCoord/iResolution.xy).rgb;\n\n    if(iFrame == 0)\n    {\n        // initialisation\n#if (REGION_TYPE == 1 || REGION_TYPE == 2)\n        // rectangular or ellisoidal region\n        color = texure_color*float(is_inside(r-r0, SIZE));\n#else\n        color = texure_color;\n#endif\n    }\n    else if(sign(iMouse.w) > 0. && is_inside(r-m, MOUSE_SIZE)){\n        // add new area applied by mouse\n        color = texure_color;\n    }\n    else if (iFrame % SKIP_FRAMES == 0){\n        // run game of life\n        color = vec3(is_cell_alive(iChannel1, ivec2(fragCoord), ivec2(iResolution)));\n    }\n    else{\n        color = texelFetch(iChannel1, ivec2(fragCoord), 0).rgb;\n    }\n\n    fragColor = vec4(color, 1.);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define SKIP_FRAMES 5\n\n// full space region\n//#define REGION_TYPE 0\n// rectangular region\n//#define REGION_TYPE 1\n// circular region\n#define REGION_TYPE 2\n// region size\n#define SIZE vec2(0.5,0.3)\n\n#define MOUSE_SIZE vec2(0.05,0.05)\n\n#define M_PI 3.14159265358979323846264338327950288\n\n\n\nbool is_in_retangle(vec2 uv, vec2 size){\n    return all(lessThanEqual(abs(uv/size), vec2(1)));\n}\n\nbool is_in_ellipse(vec2 uv, vec2 size){\n    return length(uv/size) < 1.;\n}\n\nbool is_inside(vec2 uv, vec2 size){\n#if (REGION_TYPE == 1)\n    // rectangular region\n    return is_in_retangle(uv, size);\n//#elif (REGION_TYPE == 2)\n#else\n    // circular region\n    return is_in_ellipse(uv, size);\n#endif\n}\n\n\n// periodic conditions\nivec2 periodic(ivec2 coords, ivec2 boards){\n    if(coords.x <= 0)\n        coords.x += boards.x;\n    if(coords.x >= boards.x)\n        coords.x -= boards.x;\n    if(coords.y <= 0)\n        coords.y += boards.y;\n    if(coords.y >= boards.y)\n        coords.y -= boards.y;\n    return coords;\n}\n\n// get number of neighbors for a cell\nconst float l0 = 0.5;\nint GetNeighbors(sampler2D channel, ivec2 coords, ivec2 boards){\n    int neighbors = 0;\n    for(int x = -1; x <=1; x++)\n    for(int y = -1; y <=1; y++)\n    if(x != 0 || y != 0)\n        if(texelFetch(channel, periodic(coords + ivec2(x, y), boards), 0).r > l0)\n            neighbors++;\n    return neighbors;\n}\n\n\n// check if cell is alive\nbool is_cell_alive(sampler2D channel, ivec2 coords, ivec2 boards){\n    bool alive = texelFetch(channel, coords, 0).r > l0;\n\n    int neighbors = GetNeighbors(channel, coords, boards);\n\n    return (alive && (neighbors == 2 || neighbors == 3)) || (!alive && neighbors == 3);\n\n}\n\n","name":"Common","description":"","type":"common"}]}