{"ver":"0.1","info":{"id":"flXGW2","date":"1622820628","viewed":65,"name":"Gooey Goo","username":"trashy","description":"Based on https://thebookofshaders.com/11/\n\nThis shader simply mixes two 2d noises","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["noise","goo"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// 2D Random\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n            vec2(12.9898,78.233)))\n                * 43758.5453123);\n}\n\n// 2D Noise based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    // Smooth Interpolation\n\n    // Cubic Hermine Curve.  Same as SmoothStep()\n    vec2 u = f*f*(3.0-2.0*f);\n    // u = smoothstep(0.,1.,f);\n\n    // Mix 4 coorners percentages\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\n// https://gist.github.com/companje/29408948f1e8be54dd5733a74ca49bb9\nfloat map(float value, float min1, float max1, float min2, float max2) {\n    return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 st = fragCoord/iResolution.xy;\n\n    vec2 stc = st - vec2(0.5);\n\n    // Scale the coordinate system to see\n    // some noise in action\n    vec2 pos = vec2(stc*vec2(\n        map(sin(iTime/2.0), -1.0, 1.0, 8.0, 12.0), \n        map(cos(iTime/2.0), -1.0, 1.0, 4.0, 8.0)\n    ) + vec2(0.0, -iTime));\n\n    // Use the noise function\n    float n = noise(pos);\n\n    //ALLES KLAR WIR SPIELEN DEN SELBEN SONG NOCH MAL!!1\n    // Scale the coordinate system to see\n    // some noise in action\n    vec2 pos2 = vec2(stc*vec2(\n        map(sin(iTime/3.0), -1.0, 1.0, 12.0, 18.0), \n        map(cos(iTime/3.0), -1.0, 1.0, 4.0, 8.0)\n    ) + vec2(0.0, -iTime/4.0));\n\n    // Use the noise function\n    n += noise(pos2) * map(sin(iTime/4.0), -1.0, 1.0, 0.1, 0.9);\n    //n = mix(n, noise(pos2), map(sin(u_time/4.0), -1.0, 1.0, 0.0, 1.0));\n\n    //n = smoothstep(0.2, 0.2 + abs(sin(u_time/4.0)*0.6), n);\n    //float squeeze = map(sin(iTime), -1.0, 1.0, 0.0001, 0.05);\n    float squeeze = map(smoothstep(0.0, 1.0, st.y), 0.0, 1.0, 0.0001, 0.1);\n    n = smoothstep(0.5-squeeze, 0.5+squeeze, n);\n\n    float g = n*1.4;\n    float b = n*1.1;\n\n    fragColor = vec4(vec3(n, g, b), 1.0);\n}","name":"Image","description":"","type":"image"}]}