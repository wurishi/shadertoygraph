{"ver":"0.1","info":{"id":"dljGR3","date":"1703004240","viewed":37,"name":"Hextoy","username":"KaleyGoode","description":"Basic demo of hexagon array with optional lines to play with","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["example","basic","hexagon","array","hex","minimal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define   pi  3.14159\n#define  tau  2.*pi\n#define  rt3  1.732\n#define sin60 sin(tau/6.)\n\nconst vec2 s = vec2(1.,rt3); // Aspect ratio of regular hexagons (& equilateral triangles)\n\nvoid mainImage(out vec4 O, in vec2 u) {\n  vec2 a = u/iResolution.xy,     // Unit interval[0,1] (u,v) coordinates\n       p = 5.*u/iResolution.y + s.yx*iTime/6.; // Add scrolling\n  vec4 hC = floor(vec4(p, p-vec2(.5, 1))/s.xyxy) + .5,\n       h = vec4(p - hC.xy*s, p - (hC.zw + .5)*s);\n  h = dot(h.xy, h.xy)<dot(h.zw, h.zw) ? vec4(h.xy, hC.xy) : vec4(h.zw, hC.zw + .5);\n  p = abs(h.xy);\n  float e = max(p.x*.5 + p.y*sin60, p.x), // Edge distance\n        c = dot(h.xy, h.xy), // Relative squared distance from the center.\n        t = fract(sin(dot(h.zw, vec2(141.13, 289.97)))*43758.5453), // a UID for each hex\n        r = sin(tau*t + iTime)*.5 + .5; // [0,1] Animating the UID for the blinking\n// Uncomment the following lines individually for different effects\n// All but the first will work in combinations:\n//  t *=    smoothstep(0., .03, e- .46); // Chickenwire\n  t *= mix(a.y, 5.*t*(e-2.*c), .7);  // Flowers\n//  t *= 1.-smoothstep(0., .03, e- .46); // Outlined hex array\n//  t *= max(1.25 - e*2., 0.); // Ice crystals\n//  t *= max(1.25 - c*4., 0.); // Honeycomb (circles in hex array)\n  t *= smoothstep(0., .01, r-.678); // Blinking\n//  t *= dot(sin(u*6. - cos(u*3. + iTime)), vec2(.4/2.)) + .4; // Morph shadows\n  t *= 4.*dot(a, 1.-a); // Vignette (darker canvas edges)\n  O = vec4(t,t,t,1.);\n}\n","name":"Image","description":"","type":"image"}]}