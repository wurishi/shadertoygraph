{"ver":"0.1","info":{"id":"4ldGzn","date":"1467673058","viewed":95,"name":"L3 - Gr","username":"bradleygriffith","description":"L3","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["shader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 baseSample = texture(iChannel0, uv);\n    \n    \n    \n    \n    \n    \n    \n    const int bleedWeight = 9;\n    float floatBleedWeight = float(bleedWeight);\n    \n    vec4 darkestSample = baseSample;\n    vec2 stepUv = vec2(0.0);\n    vec4 stepSample = vec4(0.0);\n    \n    float stepOffsetX = 0.0;\n    float stepOffsetY = 0.0;\n    float stepOffset = 0.0;\n    \n    \n    for (int x = -bleedWeight; x <= bleedWeight; x++)\n    {\n        for (int y = -bleedWeight; y <= bleedWeight; y++)\n        {\t\n            stepUv = vec2(float(x), float(y)) / iResolution.xy;\n\n            stepSample = texture(iChannel0, (uv + stepUv));\n            \n            //stepOffsetX = smoothstep(-0.15, 0.85, ((floatBleedWeight - abs(float(x))) / floatBleedWeight));\n            //stepOffsetY = smoothstep(-0.15, 0.85, ((floatBleedWeight - abs(float(y))) / floatBleedWeight));\n            \n            stepOffsetX = (floatBleedWeight - abs(float(x))) / floatBleedWeight;\n            stepOffsetY = (floatBleedWeight - abs(float(y))) / floatBleedWeight;\n            stepOffset = (stepOffsetX + stepOffsetY) / 2.0;\n            \n        \tdarkestSample = min(darkestSample, mix(baseSample, stepSample, stepOffset));\n        } \n    }\n\n    \n    \n    \n    \n    \n    \n\n    float time = iTime / 2.0;\n    float heatDistanceScale = 8.0; // Larger equates to smaller spread\n    \n    \n    \n    // Create heat points\n    // --------------------------------\n    \n    // Define 3 heat points\n    float heatPoint1X = (0.5 + sin(time * 1.05) / 4.0);\n    float heatPoint1Y = (0.5 - cos(time * 2.5) / 4.0);\n    vec2 heatPoint1Uv = vec2(heatPoint1X, heatPoint1Y);\n    \n    float heatPoint2X = (0.5 + sin(time * 1.0) / 4.0);\n    float heatPoint2Y = (0.5 - cos(time * 2.0) / 4.0);\n    vec2 heatPoint2Uv = vec2(heatPoint2X, heatPoint2Y);\n    \n    float heatPoint3X = (0.5 + sin(time * 3.0) / 4.0);\n    float heatPoint3Y = (0.5 - cos(time * 0.5) / 4.0);\n    vec2 heatPoint3Uv = vec2(heatPoint3X, heatPoint3Y);\n    \n    // Calculate distances from current UV and combine\n    float heatPoint1Dist = distance(uv, heatPoint1Uv);\n    float heatPoint2Dist = distance(uv, heatPoint2Uv);\n    float heatPoint3Dist = distance(uv, heatPoint3Uv);\n    float combinedDist = (heatPoint1Dist * heatPoint2Dist * heatPoint3Dist);\n\t\n    // Invert and scale\n    float amount = 1.0 - smoothstep(0.125, 0.625, combinedDist * heatDistanceScale);\n\n\tfragColor = mix(baseSample, darkestSample, amount);//texture(iChannel0, uv);\n\n    \n    \n    //fragColor = darkestSample;\n    //fragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"}]}