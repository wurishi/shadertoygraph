{"ver":"0.1","info":{"id":"NdlcWj","date":"1642709661","viewed":131,"name":"Basic 2D Lighting Test","username":"KOTOB","description":"First shader. Checks the distance from a certain \"light\" position, and sets the brightness based on that. Cubes just increase or decrease the light value. Sine is used for the glowing effect. syntax differences between glsl and other languages annoy me :(","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["lighting"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float timeColor = abs(sin(iTime));\n    float timeColor2 = cos(iTime);\n    float timeColor3 = sin(iTime*-1.0);\n    \n    vec2 lightPos = vec2(iMouse.x,iMouse.y);\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    //points on cube, bottom left to top right?\n    vec4 cube = vec4(0,100,600,200);\n    vec4 cube2 = vec4(200,0,300,400);\n    vec4 cubeBG = vec4(0,0, 1000, 1000);\n    vec4 cubes[] = vec4[3](cube, cube2, cubeBG);\n    \n    float cubeZ[] = float[3](0.2,0.5,0.2);\n    \n    float sat = 2.0;\n    \n    float colVal = (distance(fragCoord.xy, lightPos.xy)/300.0);\n    \n    for(int i=0;i<3;++i)\n    {\n      if(fragCoord.x > cubes[i].x && fragCoord.x < cubes[i].z && fragCoord.y > cubes[i].y && fragCoord.y < cubes[i].w)\n        {\n            colVal = colVal - cubeZ[i];\n        }\n    }\n    colVal = colVal / sat;\n    colVal = colVal *-1.0;\n    \n    \n    \n    // Output to screen\n    fragColor = vec4(colVal*timeColor,colVal*timeColor,colVal*timeColor,1.0);\n}","name":"Image","description":"","type":"image"}]}