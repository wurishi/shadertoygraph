{"ver":"0.1","info":{"id":"fsjyRW","date":"1643169724","viewed":104,"name":"Blender_Noise_3d","username":"mj__u","description":"Blender's noise 3d implementation with distortion and roughness","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define FLOORFRAC(x,x_int,x_fract){float x_floor=floor(x);x_int=int(x_floor);x_fract=x-x_floor;}\n\n#define rot(x,k)(((x)<<(k))|((x)>>(32-(k))))\n\n#define final(a,b,c)\\\n{\\\n  c^=b;\\\n  c-=rot(b,14);\\\n  a^=c;\\\n  a-=rot(c,11);\\\n  b^=a;\\\n  b-=rot(a,25);\\\n  c^=b;\\\n  c-=rot(b,16);\\\n  a^=c;\\\n  a-=rot(c,4);\\\n  b^=a;\\\n  b-=rot(a,14);\\\n  c^=b;\\\n  c-=rot(b,24);\\\n}\nuint hash_uint2(uint kx,uint ky)\n{\n  uint a,b,c;\n  a=b=c=0xdeadbeefu+(2u<<2u)+13u;\n  \n  b+=ky;\n  a+=kx;\n  final(a,b,c);\n  \n  return c;\n}\nfloat hash_uint2_to_float(uint kx,uint ky)\n{\n  return float(hash_uint2(kx,ky))/float(0xFFFFFFFFu);\n}\nfloat hash_vec2_to_float(vec2 k)\n{\n  return hash_uint2_to_float(floatBitsToUint(k.x),floatBitsToUint(k.y));\n}\n\nvec3 random_vec3_offset(float seed)\n{\n  return vec3(100.+hash_vec2_to_float(vec2(seed,0.))*100.,\n  100.+hash_vec2_to_float(vec2(seed,1.))*100.,\n  100.+hash_vec2_to_float(vec2(seed,2.))*100.);\n}\nfloat fade(float t)\n{\n  return t*t*t*(t*(t*6.-15.)+10.);\n}\nuint hash_uint3(uint kx,uint ky,uint kz)\n{\n  uint a,b,c;\n  a=b=c=0xdeadbeefu+(3u<<2u)+13u;\n  \n  c+=kz;\n  b+=ky;\n  a+=kx;\n  final(a,b,c);\n  \n  return c;\n}\n\nuint hash_int3(int kx,int ky,int kz)\n{\n  return hash_uint3(uint(kx),uint(ky),uint(kz));\n}\nfloat negate_if(float value,uint condition)\n{\n  return(condition!=0u)?-value:value;\n}\nfloat noise_grad(uint hash,float x,float y,float z)\n{\n  uint h=hash&15u;\n  float u=h<8u?x:y;\n  float vt=((h==12u)||(h==14u))?x:z;\n  float v=h<4u?y:vt;\n  return negate_if(u,h&1u)+negate_if(v,h&2u);\n}\nfloat tri_mix(float v0,\n  float v1,\n  float v2,\n  float v3,\n  float v4,\n  float v5,\n  float v6,\n  float v7,\n  float x,\n  float y,\nfloat z)\n{\n  float x1=1.-x;\n  float y1=1.-y;\n  float z1=1.-z;\n  return z1*(y1*(v0*x1+v1*x)+y*(v2*x1+v3*x))+\n  z*(y1*(v4*x1+v5*x)+y*(v6*x1+v7*x));\n}\n\nfloat noise_perlin(vec3 vec)\n{\n  int X,Y,Z;\n  float fx,fy,fz;\n  \n  FLOORFRAC(vec.x,X,fx);\n  FLOORFRAC(vec.y,Y,fy);\n  FLOORFRAC(vec.z,Z,fz);\n  \n  float u=fade(fx);\n  float v=fade(fy);\n  float w=fade(fz);\n  \n  float r=tri_mix(noise_grad(hash_int3(X,Y,Z),fx,fy,fz),\n  noise_grad(hash_int3(X+1,Y,Z),fx-1.,fy,fz),\n  noise_grad(hash_int3(X,Y+1,Z),fx,fy-1.,fz),\n  noise_grad(hash_int3(X+1,Y+1,Z),fx-1.,fy-1.,fz),\n  noise_grad(hash_int3(X,Y,Z+1),fx,fy,fz-1.),\n  noise_grad(hash_int3(X+1,Y,Z+1),fx-1.,fy,fz-1.),\n  noise_grad(hash_int3(X,Y+1,Z+1),fx,fy-1.,fz-1.),\n  noise_grad(hash_int3(X+1,Y+1,Z+1),fx-1.,fy-1.,fz-1.),\n  u,\n  v,\nw);\n\nreturn r;\n}\n\nfloat noise_scale3(float result)\n{\nreturn .9820*result;\n}\n\nfloat snoise(vec3 p)\n{\nfloat r=noise_perlin(p);\nreturn(isinf(r))?0.:noise_scale3(r);\n}\n\nfloat noise(vec3 p)\n{\nreturn .5*snoise(p)+.5;\n}\n\nfloat fractal_noise(vec3 p,float octaves,float roughness)\n{\nfloat fscale=1.;\nfloat amp=1.;\nfloat maxamp=0.;\nfloat sum=0.;\noctaves=clamp(octaves,0.,15.);\nint n=int(octaves);\nfor(int i=0;i<=n;i++){\n  float t=noise(fscale*p);\n  sum+=t*amp;\n  maxamp+=amp;\n  amp*=clamp(roughness,0.,1.);\n  fscale*=2.;\n}\nfloat rmd=octaves-floor(octaves);\nif(rmd!=0.){\n  float t=noise(fscale*p);\n  float sum2=sum+t*amp;\n  sum/=maxamp;\n  sum2/=maxamp+amp;\n  return(1.-rmd)*sum+rmd*sum2;\n}\nelse{\n  return sum/maxamp;\n}\n}\nvoid node_noise_texture_3d(vec3 co,\nfloat w,\nfloat scale,\nfloat detail,\nfloat roughness,\nfloat distortion,\nout float value,\nout vec4 color)\n{\nvec3 p=co*scale;\nif(distortion!=0.){\n  p+=vec3(snoise(p+random_vec3_offset(0.))*distortion,\n  snoise(p+random_vec3_offset(1.))*distortion,\n  snoise(p+random_vec3_offset(2.))*distortion);\n}\n\nvalue=fractal_noise(p,detail,roughness);\ncolor=vec4(value,\n  fractal_noise(p+random_vec3_offset(3.),detail,roughness),\n  fractal_noise(p+random_vec3_offset(4.),detail,roughness),\n1.);\n}\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord)\n{\nfloat value;\nvec4 color;\nvec2 uv=fragCoord/iResolution.xy*10.;\n\nnode_noise_texture_3d(vec3(uv,1.),1.,1.,16.,.24,3.,value,color);\n\n\n// Output to screen\nfragColor=vec4(color);\n}","name":"Image","description":"","type":"image"}]}