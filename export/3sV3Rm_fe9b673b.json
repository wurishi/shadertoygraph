{"ver":"0.1","info":{"id":"3sV3Rm","date":"1571293503","viewed":70,"name":"Cantor Set","username":"nurof3n","description":"Ok","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["fractal","cantor"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 tile(vec2 uv) {\n\tuv *= 3.;\n    uv = fract(uv);  \n    return uv;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float aspect = iResolution.x/iResolution.y;\n    vec2 tiling = vec2(aspect, 1.);\n    uv.x *= aspect;\n    uv.x -= (aspect - 1.) / 2.;\n    \n \n    vec3 color = vec3(0.0);\n    \n    if(uv.x > 1. || uv.x < .0)\n        color = vec3(.3, .5, .1);\n    else\n    {\n        uv *= 1.1;\n        uv -= .05;\n        if(uv.x > 1. || uv.x < .0 || uv.y > 1. || uv.y < .0)\n        \tcolor = vec3(1.);\n        else\n            for(float i = 0.; i < 4.; ++i) {\n\n                vec3 color1 = vec3(step(1./3., uv.x) - step(2./3., uv.x));\n                vec3 color2 = vec3(step(1./3., uv.y) - step(2./3., uv.y));\n\n                color = max(color1, color2);\n\n                if(color == vec3(1.))\n                    break;\n\n                float pas = floor((fract(iTime*.2) * 4.));\n                if(i == pas)\n                    break;\n\n                uv = tile(uv);\n            }\n    }\n    \n    \n    fragColor = vec4(color, 1.0);\n    \n}","name":"Image","description":"","type":"image"}]}