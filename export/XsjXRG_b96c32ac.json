{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"mat3 xrotate(float t) {\n\treturn mat3(1.0, 0.0, 0.0,\n                0.0, cos(t), -sin(t),\n                0.0, sin(t), cos(t));\n}\n\nmat3 yrotate(float t) {\n\treturn mat3(cos(t), 0.0, -sin(t),\n                0.0, 1.0, 0.0,\n                sin(t), 0.0, cos(t));\n}\n\nmat3 zrotate(float t) {\n    return mat3(cos(t), -sin(t), 0.0,\n                sin(t), cos(t), 0.0,\n                0.0, 0.0, 1.0);\n}\n\nfloat sphereDistance(vec3 pos) {\n\treturn length(pos) - 0.6;   \n}\n\nfloat cubeDistance(vec3 pos) {\n\tvec3 clamped = clamp(pos, -0.5, 0.5);\n    return length(pos - clamped);\n}\n\nfloat planeDistance(vec3 pos) {\n\tvec3 origin = vec3(0.0, -0.5, 0.0);\n    vec3 normal = vec3(0.0, 1.0, 0.0);\n    vec3 delta = pos - origin;\n    float prod = dot(delta, normal);\n    return prod;\n}\n\nfloat combinedDistance(vec3 pos) {\n    pos *= xrotate(0.5) * yrotate(iTime);\n    \n    float cube = cubeDistance(pos);\n    \n    float sphere = sphereDistance(pos);\n    \n\tfloat x = max(cube - sphere, cube);\n    \n\treturn min(x, planeDistance(pos));\n}\n\nfloat aoc(vec3 origin, vec3 ray) {\n    float delta = 0.1;\n    const int samples = 6;\n    float r = 0.0;\n    for (int i = 1; i <= samples; ++i) {\n        float t = delta * float(i);\n     \tvec3 pos = origin + ray * t;\n        float dist = combinedDistance(pos);\n        float len = abs(t - dist);\n        r += len * pow(2.0, -float(i));\n    }\n    return r;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = fragCoord.xy / iResolution.xy * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 origin = vec3(0.0, 0.0, -2.0);\n    vec3 ray = normalize(vec3(uv, 1.0));\n    \n    float t = 0.0;\n    \n    for (int i = 0; i < 64; ++i) {\n        vec3 pos = origin + ray * t;\n        float d = combinedDistance(pos);\n        if (d < 0.0) {\n         \tbreak;   \n        }\n        t += d;\n    }\n    \n    vec3 worldPos = origin + ray * t;\n    \n    float shade = 1.0 - aoc(worldPos, -ray);\n    \n    shade = pow(max(shade, 0.0), 8.0);\n    \n    float fog = 1.0 / (1.0 + t);\n    \n    float col = shade * fog;\n    \n\tfragColor = vec4(col, col, col, 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XsjXRG","date":"1413225686","viewed":526,"name":"AocTest","username":"dila","description":"Testing ambient occlusion.","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["raymarchambientocclusion"],"hasliked":0,"parentid":"","parentname":""}}