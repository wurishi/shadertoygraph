{"ver":"0.1","info":{"id":"NsyGDm","date":"1631744566","viewed":188,"name":"Noita sand falling everything","username":"Devon7925","description":"parallelized falling everything simulation inspired by Noita\nclick+drag + key to edit:\nnothing - rock\nA - smoke\nS - liquid\nD - sand\nF - mercury\nG - gold powder\nH - wood\nJ - fire\nK - coal\nL - steam \nZ - methane\nX - oil\nspace - air/remove","likes":5,"published":1,"flags":48,"usePreview":0,"tags":["sand","noita","fallingeverything"],"hasliked":0,"parentid":"3tKfzR","parentname":"SandSim"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float rand(float n){return fract(sin(n) * 43758.5453123);}\nfloat rand(vec2 n) { \n\treturn fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\nfloat noise(float p){\n\tfloat fl = floor(p);\n  float fc = fract(p);\n\treturn mix(rand(fl), rand(fl + 1.0), fc);\n}\n\t\nfloat noise(vec2 n) {\n\tconst vec2 d = vec2(0.0, 1.0);\n  vec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\n\treturn mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\n}\n\nfloat mod289(float x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 mod289(vec4 x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 perm(vec4 x){return mod289(((x * 34.0) + 1.0) * x);}\n\nfloat noise(vec3 p){\n    vec3 a = floor(p);\n    vec3 d = p - a;\n    d = d * d * (3.0 - 2.0 * d);\n\n    vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);\n    vec4 k1 = perm(b.xyxy);\n    vec4 k2 = perm(k1.xyxy + b.zzww);\n\n    vec4 c = k2 + a.zzzz;\n    vec4 k3 = perm(c);\n    vec4 k4 = perm(c + 1.0);\n\n    vec4 o1 = fract(k3 * (1.0 / 41.0));\n    vec4 o2 = fract(k4 * (1.0 / 41.0));\n\n    vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);\n    vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);\n\n    return o4.y * d.y + o4.x * (1.0 - d.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float id = texture( iChannel0, fragCoord.xy / iResolution.xy ).x;\n    fragColor = vec4(id, 0.0, id, 1.0);\n    if(id == SMOKE){\n        float v = noise(vec3(fragCoord.x, fragCoord.y, iTime))*0.3+0.6;\n        fragColor = vec4(v, v, v, 1.0);\n    }\n    else if(id == STEAM){\n        float v = noise(vec3(fragCoord.x, fragCoord.y, iTime))*0.2+0.7;\n        fragColor = vec4(v, v, v+0.1, 1.0);\n    }\n    else if(id == FIRE7) fragColor = vec4(1.0, 0.8, 0.8, 1.0);\n    else if(id == FIRE6) fragColor = vec4(1.0, 0.7, 0.7, 1.0);\n    else if(id == FIRE5) fragColor = vec4(1.0, 0.5, 0.5, 1.0);\n    else if(id == FIRE4) fragColor = vec4(1.0, 0.4, 0.4, 1.0);\n    else if(id == FIRE3) fragColor = vec4(1.0, 0.2, 0.2, 1.0);\n    else if(id == FIRE2) fragColor = vec4(1.0, 0.0, 0.0, 1.0);\n    else if(id == FIRE1) fragColor = vec4(0.5, 0.5, 1.0, 1.0);\n    else if(id == METHANE) fragColor = vec4(0.2, 0.0, 0.0, 1.0);\n    else if(id == AIR) fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    else if(id == WATER) {\n        float v = noise(vec3(fragCoord.x/3.0, fragCoord.y/3.0, iTime))*0.3+0.1;\n        fragColor = vec4(v, v, 1.0, 1.0);\n    }\n    else if(id == OIL) {\n        float v = noise(vec3(fragCoord.x/3.0, fragCoord.y/3.0, iTime))*0.1+0.2;\n        fragColor = vec4(0.5, v, v, 1.0);\n    }\n    else if(id == SAND){\n        float v = noise(vec2(fragCoord.x/3.0, fragCoord.y/3.0))*0.4+0.9;\n        fragColor = vec4(0.8588*v, 0.7647*v, 0.6392*v, 1.0);\n    }\n    else if(id == COAL) fragColor = vec4(0.2, 0.2, 0.2, 1.0);\n    else if(id == MERCURY) fragColor = vec4(0.5, 0.5, 0.5, 1.0);\n    else if(id == GOLD) {\n        float v = noise(vec2(fragCoord.x/2.0, fragCoord.y/2.0))*0.4+0.9;\n        fragColor = vec4(0.8549*v, 0.6471*v, 0.1255*v, 1.0);\n    }\n    else if(id == WOOD){\n        float v = noise(fragCoord);\n        fragColor = (1.0-v)*vec4(0.4471, 0.5, 0.1686, 1.0)+v*vec4(0.4471, 0.25, 0.1686, 1.0);\n    }\n    else if(id == ROCK) {\n        float v = noise(fragCoord)*0.2+0.1;\n        fragColor = vec4(v, v, v, 1.0);\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Keyboard constants definition\nconst int KEY_SPACE = 32;\nconst int KEY_LEFT  = 37;\nconst int KEY_UP    = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN  = 40;\nconst int KEY_A     = 65;\nconst int KEY_B     = 66;\nconst int KEY_C     = 67;\nconst int KEY_D     = 68;\nconst int KEY_E     = 69;\nconst int KEY_F     = 70;\nconst int KEY_G     = 71;\nconst int KEY_H     = 72;\nconst int KEY_I     = 73;\nconst int KEY_J     = 74;\nconst int KEY_K     = 75;\nconst int KEY_L     = 76;\nconst int KEY_M     = 77;\nconst int KEY_N     = 78;\nconst int KEY_O     = 79;\nconst int KEY_P     = 80;\nconst int KEY_Q     = 81;\nconst int KEY_R     = 82;\nconst int KEY_S     = 83;\nconst int KEY_T     = 84;\nconst int KEY_U     = 85;\nconst int KEY_V     = 86;\nconst int KEY_W     = 87;\nconst int KEY_X     = 88;\nconst int KEY_Y     = 89;\nconst int KEY_Z     = 90;\nconst int KEY_COMMA = 188;\nconst int KEY_PER   = 190;\n\nconst int powder = 1;\nconst int solid = 2;\nconst int fluid = 3;\n\nint type_check(in float id){\n    if(id == SMOKE) return fluid;\n    if(id == STEAM) return fluid;\n    if(id == FIRE7) return fluid;\n    if(id == FIRE6) return fluid;\n    if(id == FIRE5) return fluid;\n    if(id == FIRE4) return fluid;\n    if(id == FIRE3) return fluid;\n    if(id == FIRE2) return fluid;\n    if(id == FIRE1) return fluid;\n    if(id == AIR) return fluid;\n    if(id == WATER) return fluid;\n    if(id == SAND) return powder;\n    if(id == COAL) return powder;\n    if(id == MERCURY) return fluid;\n    if(id == GOLD) return powder;\n    if(id == ROCK) return solid;\n    if(id == WOOD) return solid;\n    return fluid;\n}\n\nfloat computeMovement(in vec2 fragCoord)\n{\n    float left2_under  = texelFetch(iChannel0, ivec2(fragCoord.xy) + ivec2(-2, -1), 0).x;\n    float left_under   = texelFetch(iChannel0, ivec2(fragCoord.xy) + ivec2(-1, -1), 0).x;\n    float under        = texelFetch(iChannel0, ivec2(fragCoord.xy) + ivec2( 0, -1), 0).x;\n    float right_under  = texelFetch(iChannel0, ivec2(fragCoord.xy) + ivec2( 1, -1), 0).x;\n    float right2_under = texelFetch(iChannel0, ivec2(fragCoord.xy) + ivec2( 2, -1), 0).x;\n    \n    float left2  = texelFetch(iChannel0, ivec2(fragCoord.xy) + ivec2(-2, 0), 0).x;\n    float left   = texelFetch(iChannel0, ivec2(fragCoord.xy) + ivec2(-1, 0), 0).x;\n    float id     = texelFetch(iChannel0, ivec2(fragCoord.xy) + ivec2( 0, 0), 0).x;\n    float right  = texelFetch(iChannel0, ivec2(fragCoord.xy) + ivec2( 1, 0), 0).x;\n    float right2 = texelFetch(iChannel0, ivec2(fragCoord.xy) + ivec2( 2, 0), 0).x;\n    \n    float left2_over  = texelFetch(iChannel0, ivec2(fragCoord.xy) + ivec2(-2, 1), 0).x;\n    float left_over   = texelFetch(iChannel0, ivec2(fragCoord.xy) + ivec2(-1, 1), 0).x;\n    float over        = texelFetch(iChannel0, ivec2(fragCoord.xy) + ivec2( 0, 1), 0).x;\n    float right_over  = texelFetch(iChannel0, ivec2(fragCoord.xy) + ivec2( 1, 1), 0).x;\n    float right2_over = texelFetch(iChannel0, ivec2(fragCoord.xy) + ivec2( 2, 1), 0).x;\n    \n    if(fragCoord.y <= 1.0){\n        left2_under = 10.0;\n        left_under = 10.0;\n        under = 10.0;\n        right_under = 10.0;\n        right2_under = 10.0;\n    }\n    \n    if(iFrame%2 == int(fragCoord.y)%2){\n        if(type_check(over) == solid) return id; \n        \n        if(over > id) return over;\n        else if(left_over > id && left >= left_over && type_check(left_over) != solid) return left_over;\n        else if(right_over > id && right >= right_over && (right2 >= right_over || right2_over >= right_over) && type_check(right_over) != solid) return right_over;\n    }else{\n        if(type_check(id) == solid) return id;\n        \n        if(under < id) return under;\n        else if(right_under < id && right <= right_under) return right_under;\n        else if(left_under < id && left <= left_under && !(left2_over > left && left2 >= left2_over && type_check(left2_over) != solid)) return left_under;\n    }\n    \n    bool no_move = under >= id && left_over <= id && over <= id && right_over <= id && (left_under >= id || left > left_under) && (right_under >= id || right > right_under) && over <= id;\n    if(no_move)\n        if(int(fragCoord.y)%2 == 0){\n            if(iFrame%2 == int(fragCoord.x)%2){\n                if(type_check(right) != fluid) return id;\n                bool right_no_move = right_under >= right \n                    && over <= right && right_over <= right && right2_over <= right \n                    && (under >= right) && (right2_under >= right || right2 >= right2_under) && right_over <= right;\n                if(right_no_move && right > id) return right;\n            }else{\n                if(type_check(id) != fluid) return id;\n                bool left_no_move = left_under >= left \n                    && left2_over <= left && left_over <= left && over <= left \n                    && (under >= left) && (left2_under >= left || left2 >= left2_under) && left_over <= left;\n                if(left_no_move && left < id) return left;\n            }\n        }else{\n            if(iFrame%2 == int(fragCoord.x)%2){\n                if(type_check(left) != fluid) return id;\n                bool left_no_move = left_under >= left \n                    && left2_over <= left && left_over <= left && over <= left \n                    && (under >= left) && (left2_under >= left || left2 >= left2_under) && left_over <= left;\n               if(left_no_move && left > id) return left;\n            }else{\n                if(type_check(id) != fluid) return id;\n                bool right_no_move = right_under >= right \n                    && over <= right && right_over <= right && right2_over <= right \n                    && (under >= right) && (right2_under >= right || right2 >= right2_under) && right_over <= right;\n                if(right_no_move && right < id) return right;\n            }\n        }\n    return id;\n}\n\nbool is_fire(in float id){\n    return id == FIRE1 || id == FIRE2 || id == FIRE3 || id == FIRE4 || id == FIRE5 || id == FIRE6 || id==FIRE7;\n}\n\nfloat computeReactions(in vec2 fragCoord, in float id)\n{\n    float left2_under  = texelFetch(iChannel0, ivec2(fragCoord.xy) + ivec2(-2, -1), 0).x;\n    float left_under   = texelFetch(iChannel0, ivec2(fragCoord.xy) + ivec2(-1, -1), 0).x;\n    float under        = texelFetch(iChannel0, ivec2(fragCoord.xy) + ivec2( 0, -1), 0).x;\n    float right_under  = texelFetch(iChannel0, ivec2(fragCoord.xy) + ivec2( 1, -1), 0).x;\n    float right2_under = texelFetch(iChannel0, ivec2(fragCoord.xy) + ivec2( 2, -1), 0).x;\n    \n    float left2  = texelFetch(iChannel0, ivec2(fragCoord.xy) + ivec2(-2, 0), 0).x;\n    float left   = texelFetch(iChannel0, ivec2(fragCoord.xy) + ivec2(-1, 0), 0).x;\n    \n    float right  = texelFetch(iChannel0, ivec2(fragCoord.xy) + ivec2( 1, 0), 0).x;\n    float right2 = texelFetch(iChannel0, ivec2(fragCoord.xy) + ivec2( 2, 0), 0).x;\n    \n    float left2_over  = texelFetch(iChannel0, ivec2(fragCoord.xy) + ivec2(-2, 1), 0).x;\n    float left_over   = texelFetch(iChannel0, ivec2(fragCoord.xy) + ivec2(-1, 1), 0).x;\n    float over        = texelFetch(iChannel0, ivec2(fragCoord.xy) + ivec2( 0, 1), 0).x;\n    float right_over  = texelFetch(iChannel0, ivec2(fragCoord.xy) + ivec2( 1, 1), 0).x;\n    float right2_over = texelFetch(iChannel0, ivec2(fragCoord.xy) + ivec2( 2, 1), 0).x;\n    \n    if(fragCoord.y <= 1.0){\n        left2_under = 10.0;\n        left_under = 10.0;\n        under = 10.0;\n        right_under = 10.0;\n        right2_under = 10.0;\n    }\n    \n    if(id == STEAM \n        && (left_over < id || type_check(left_over) == solid) && (over < id || type_check(over) == solid) && (right_over < id || type_check(right_over) == solid)\n        && left == STEAM && right == STEAM\n        && left_under == STEAM && under == STEAM && right_under == STEAM ) return WATER;\n    if((id == WOOD || id == COAL || id == METHANE || id == OIL) \n        && (is_fire(right) || is_fire(left) || is_fire(under) || is_fire(over)) \n        && (right==AIR || right_under==AIR || right_over == AIR || left==AIR || left_under==AIR || left_over == AIR || under==AIR)) return FIRE1;\n    if(id == FIRE1) return FIRE2;\n    if(id == FIRE2) return FIRE3;\n    if(id == FIRE3) return FIRE4;\n    if(id == FIRE4) return FIRE5;\n    if(id == FIRE5) return FIRE6;\n    if(id == FIRE6) return FIRE7;\n    if(id == FIRE7) return SMOKE;\n    if(id == WATER && (is_fire(left) || is_fire(over) || is_fire(right) || is_fire(under))) return STEAM;\n    \n    return id;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    float id = computeMovement(fragCoord.xy);\n    id = computeReactions(fragCoord.xy, id);\n\n    if(iMouse.z > 0.0)\n    {\n        float dist = distance(iMouse.xy, fragCoord.xy);\n        if(dist <= 10.0){\n            if(texelFetch(iChannel1, ivec2(KEY_SPACE, 0), 0).x > 0.0)\n                id = AIR;\n            else if(texelFetch(iChannel1, ivec2(KEY_A, 0), 0).x > 0.0)\n                id = SMOKE;\n            else if(texelFetch(iChannel1, ivec2(KEY_S, 0), 0).x > 0.0)\n                id = WATER;\n            else if(texelFetch(iChannel1, ivec2(KEY_D, 0), 0).x > 0.0)\n                id = SAND;\n            else if(texelFetch(iChannel1, ivec2(KEY_F, 0), 0).x > 0.0)\n                id = MERCURY;\n            else if(texelFetch(iChannel1, ivec2(KEY_G, 0), 0).x > 0.0)\n                id = GOLD;\n            else if(texelFetch(iChannel1, ivec2(KEY_H, 0), 0).x > 0.0)\n                id = WOOD;\n            else if(texelFetch(iChannel1, ivec2(KEY_J, 0), 0).x > 0.0)\n                id = FIRE1;\n            else if(texelFetch(iChannel1, ivec2(KEY_K, 0), 0).x > 0.0)\n                id = COAL;\n            else if(texelFetch(iChannel1, ivec2(KEY_L, 0), 0).x > 0.0)\n                id = STEAM;\n            else if(texelFetch(iChannel1, ivec2(KEY_Z, 0), 0).x > 0.0)\n                id = METHANE;\n            else if(texelFetch(iChannel1, ivec2(KEY_X, 0), 0).x > 0.0)\n                id = OIL;\n            else\n                id = ROCK;\n        }\n    }\n    if(id == 0.0) id = 0.1;\n    fragColor = vec4(id, 0.0, 0.0, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"const float SMOKE = 0.01;\nconst float STEAM = 0.02;\nconst float FIRE7 = 0.03;\nconst float FIRE6 = 0.04;\nconst float FIRE5 = 0.05;\nconst float FIRE4 = 0.06;\nconst float FIRE3 = 0.07;\nconst float FIRE2 = 0.08;\nconst float FIRE1 = 0.09;\nconst float METHANE = 0.095;\nconst float AIR = 0.1;\nconst float WATER = 0.5;\nconst float OIL = 0.6;\nconst float SAND = 0.75;\nconst float COAL = 0.8;\nconst float MERCURY = 0.9;\nconst float GOLD = 0.95;\nconst float WOOD = 0.99;\nconst float ROCK = 1.0;","name":"Common","description":"","type":"common"}]}