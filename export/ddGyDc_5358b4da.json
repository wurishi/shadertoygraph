{"ver":"0.1","info":{"id":"ddGyDc","date":"1696682133","viewed":92,"name":"Dodecahedron (SDF)","username":"TheTurk","description":"Distance function (exact) for a regular dodecahedron (circumradius = 1) .\nOther 3D distance functions:\n[url]https://www.shadertoy.com/playlist/73lfR7[/url]","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["3d","distancefield","sdf","distance","dodecahedron","pyramid","polyhedron","platonic","primitive","regular"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float dodecahedron(vec3 position, float radius, float cornerRadius) {\n    position = abs(position);\n    radius -= cornerRadius;\n    float phi = (1.0 + sqrt(5.0)) * 0.5;\n    float a = 1.0 / sqrt(3.0) * radius;\n    float b = 1.0 / sqrt(3.0) * radius * (phi - 1.0);\n    vec3 n1 = vec3(0.0, phi, 1.0) / sqrt(phi + 2.0);\n    vec3 n2 = vec3(phi + 2.0, phi - 1.0, -1.0) / sqrt(4.0 * phi + 8.0); \n    vec3 n3 = vec3(phi, 1.0, 0.0) / sqrt(phi + 2.0);\n    vec3 n4 = vec3(-1.0, phi, 3.0 - phi) / sqrt(12.0 - 4.0 * phi);\n    vec3 p1 = position - vec3(0.0, a, 0.0);\n    float h1 = dot(p1 - vec3(a, 0.0, a), n1);\n    float m1 = dot(p1 - vec3(a, 0.0, a), n2);\n    vec3 d1 = p1 - clamp(p1 - n1 * h1 - n2 * max(m1, 0.0), vec3(0.0), vec3(a, b, a)); \n    float h2 = dot(p1 - vec3(a, 0.0, a), n3);\n    float m2 = dot(p1 - vec3(a, 0.0, a), n4);\n    vec3 d2 = p1 - clamp(p1 - n3 * h2 - n4 * max(m2, 0.0), vec3(b, 0.0, 0.0), vec3(a, b, a));\n    vec3 p2 = (position - vec3(a, 0.0, 0.0)).zxy;\n    float h3 = dot(p2 - vec3(a, 0.0, a), n1);\n    float m3 = dot(p2 - vec3(a, 0.0, a), n2);\n    vec3 d3 = p2 - clamp(p2 - n1 * h3 - n2 * max(m3, 0.0), vec3(0.0), vec3(a, b, a)); \n    float h4 = dot(p2 - vec3(a, 0.0, a), n3);\n    float m4 = dot(p2 - vec3(a, 0.0, a), n4);\n    vec3 d4 = p2 - clamp(p2 - n3 * h4 - n4 * max(m4, 0.0), vec3(b, 0.0, 0.0), vec3(a, b, a));\n    vec3 p3 = (position - vec3(0.0, 0.0, a)).yzx;\n    float h5 = dot(p3 - vec3(a, 0.0, a), n1);\n    float m5 = dot(p3 - vec3(a, 0.0, a), n2);\n    vec3 d5 = p3 - clamp(p3 - n1 * h5 - n2 * max(m5, 0.0), vec3(0.0), vec3(a, b, a)); \n    float h6 = dot(p3 - vec3(a, 0.0, a), n3);\n    float m6 = dot(p3 - vec3(a, 0.0, a), n4);\n    vec3 d6 = p3 - clamp(p3 - n3 * h6 - n4 * max(m6, 0.0), vec3(b, 0.0, 0.0), vec3(a, b, a));\n    float d = sqrt(min(min(min(min(min(dot(d1, d1), dot(d2, d2)), dot(d3, d3)), dot(d4, d4)), dot(d5, d5)), dot(d6, d6)));\n    float s = max(max(max(max(max(h1, h2), h3), h4), h5), h6);\n    return (s < 0.0 ? -d : d) - cornerRadius;\n}\n\nmat3 lookAtMatrix(vec3 from, vec3 to) {\n    vec3 forward = normalize(to - from);\n    vec3 right = normalize(cross(forward, vec3(0.0, 1.0, 0.0)));\n    vec3 up = cross(right, forward);\n    return mat3(right, up, forward);\n}\n\nfloat sdf(vec3 position) { \n    float radius = sqrt(3.0) * 0.25;\n    float cornerRadius = 0.01;\n    return dodecahedron(position, radius, cornerRadius);\n}\n\nvec3 normal(vec3 position) {\n    float epsilon = 0.001;\n    vec3 gradient = vec3(\n        sdf(position + vec3(epsilon, 0, 0)) - sdf(position + vec3(-epsilon, 0, 0)),\n        sdf(position + vec3(0, epsilon, 0)) - sdf(position + vec3(0, -epsilon, 0)),\n        sdf(position + vec3(0, 0, epsilon)) - sdf(position + vec3(0, 0, -epsilon))\n    );\n    return normalize(gradient);\n}\n\nfloat raycast(vec3 rayOrigin, vec3 rayDirection) {\n    int stepCount = 128;\n    float maximumDistance = 5.0;\n    float t = 0.0;\n    for (int i = 0; i < stepCount; i++) {\n        if (t > maximumDistance) {\n            break;\n        }\n        vec3 currentPosition = rayOrigin + rayDirection * t;\n        float d = sdf(currentPosition);\n        if (d < 0.0001) {\n            return t;\n        }\n        t += d;\n    }\n    return 0.0;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\tfloat angle = 0.5 * (iTime + 5.0);\n\tvec3 rayOrigin = vec3(1.0 * cos(angle), 0.5, 1.0 * sin(angle));\n    vec3 targetPosition = vec3(0.0);\n    mat3 cameraTransform = lookAtMatrix(rayOrigin, targetPosition);\n    vec3 result = vec3(0.0);\n    ivec2 sampleCount = ivec2(3.0, 3.0);\n    for (int y = 0; y < sampleCount.y; y++) {\n        for (int x = 0; x < sampleCount.x; x++) {\n            vec2 uv = fragCoord + (vec2(float(x), float(y)) / vec2(sampleCount) - 0.5);\n            uv = uv / iResolution.xy;\n            uv = (uv * 2.0) - 1.0;\n            uv.x *= iResolution.x / iResolution.y;\n            vec3 rayDirection = normalize(vec3(uv, 1.5));\n            rayDirection = cameraTransform * rayDirection;\n            float t = raycast(rayOrigin, rayDirection);\n            vec3 color = vec3(0.0);\n            if (t > 0.0) {\n                // same style that Inigo Quilez uses in his shaders\n                vec3 position = rayOrigin + rayDirection * t;\n                vec3 lightDirection = vec3(0.57735);\n                vec3 n = normal(position);\n                float diffuseAngle = max(dot(n, lightDirection), 0.0);\n                // diffuse\n                color = vec3(0.8, 0.7, 0.5) * diffuseAngle;\n                // ambient\n                color += vec3(0.2, 0.3, 0.4) * ((n.y + 1.0) * 0.5);\n            }\n            // gamma        \n            color = sqrt(color);\n            result += color;\n        }\n    }\n    result /= float(sampleCount.x * sampleCount.y);\n\tfragColor = vec4(result, 1.0);\n}","name":"Image","description":"","type":"image"}]}