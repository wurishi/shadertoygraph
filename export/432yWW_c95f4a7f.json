{"ver":"0.1","info":{"id":"432yWW","date":"1727281206","viewed":31,"name":"attempt at a possibly faster sin","username":"dottedboxguy","description":"a 5th order polynomial approximation of a sine, coming from a kaze emanuar video about it.\ni doubt it's accurate enough for actual trig calc, but if you wanna make realtime art with sines, go with it. especially for FBM stuff","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["sin","cos","sine","trig"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define pi 3.14159265358979323\n\nfloat sstep(float init_x){\n    float x = clamp(init_x,-1.,1.);\n    x = abs(x);\n    return sign(init_x)*(x*(2.-x));\n}\n\nfloat triwave(float x){\n    return abs(fract(x)-.5)*2.;\n}\n\n//green line\n//turns out this is the exact same as the one glsl implemented, i found it to be ever so slightly faster but it's very much within margin of error\nfloat fastsin5(float x){\n    //const float n = 1.57079632679; //pi/2\n    const float c5 = 0.00740306120839;\n    //const float c5 = ((1.+((4.*n-5.))/2.)-n)/(n*n*n*n*n);\n    const float c3 = 0.165538780475;\n    //const float c3 = ((4.*n)-5.)/(2.*n*n*n);\n    x = triwave(x)-.5;\n    x *= pi;\n    float x2 = x*x;\n    float x3 = x2*x;\n    float x5 = x3*x2;\n    return c5*x5-c3*x3+x;\n}\n\n//WIP, im feeling really sick rn so i don't have the will to finish it tonight\nfloat fastsin4(float x){\n    const float a = -1.22401;\n    float fx = fract(x)-.5;\n    x = abs(fx)*2.*sign(fract(4.*x)-.5);\n    float x2 = x*x;\n    float x4 = x2*x2*a;\n    return a*x2+x4+1.;\n}\n\nfloat benchmarkfastsin(float x){\n    float a = 0.;\n    float thing = 0.;\n    while (a<1000.){\n        thing *= fastsin5(a+x);\n        a += 1.3;\n    }\n    return thing;\n}\n\nfloat benchmarksin(float x){\n    float a = 0.;\n    float thing = 0.;\n    while (a<1000.){\n        thing *= sin(a+x);\n        a += 1.3;\n    }\n    return thing;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv-=.5;\n    uv*=10.;\n    vec3 col =vec3(0.);\n    \n    \n    float a = benchmarkfastsin(uv.x+iTime);\n    \n    float y = fastsin5(uv.x);\n    col += vec3(.0, .7, .0)*sstep(iResolution.y/30.*(uv.y-y)+1.)*sstep(iResolution.y/30.*(y-uv.y)+1.);\n    \n    y = fastsin4(uv.x);\n    col += vec3(.0, .0, .7)*sstep(iResolution.y/30.*(uv.y-y)+1.)*sstep(iResolution.y/30.*(y-uv.y)+1.);\n    \n    fragColor = vec4(col, fastsin5(a));\n}","name":"Image","description":"","type":"image"}]}