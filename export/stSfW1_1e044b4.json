{"ver":"0.1","info":{"id":"stSfW1","date":"1652114339","viewed":114,"name":"blocky texture filtering","username":"KeyJ","description":"Like nearest-neighbor filtering, but antialiased.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["texture","filter"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","previewfilepath":"/media/ap/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// blocky texture filtering\n//\n// Renders each texel as an antialiased block\n// by perturbing the texture coordinate that's\n// passed into the bilinear filter.\n//\n// There are almost certainly easier ways\n// to do this, but this one works fine.\n\n\nconst vec2 TexRes = vec2(64.0, 64.0);\n\nvec2 sampleBlocky(vec2 p) {\n    vec2 d = TexRes * vec2(dFdx(p.x), dFdy(p.y));\n    p *= TexRes;\n    vec2 fA = p - 0.5 * d, iA = floor(fA);\n    vec2 fB = p + 0.5 * d, iB = floor(fB);\n    return (iA + (iB - iA) * (fB - iB) / d + 0.5) / TexRes;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 p = fragCoord / iResolution.xy;\n    p -= vec2(.5, .5);\n    p.x *= 0.6 - 0.5 * cos(iTime * 0.1);\n    p.y *= 0.6 - 0.5 * sin(iTime * 0.1);\n    p += vec2(.5, .5);\n\n    fragColor = texture(iChannel0, sampleBlocky(p));\n}\n","name":"Image","description":"","type":"image"}]}