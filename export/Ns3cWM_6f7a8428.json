{"ver":"0.1","info":{"id":"Ns3cWM","date":"1653499993","viewed":86,"name":"Colors with f(x,y) maths","username":"TotoShampoin","description":"I always loved to do this kinda render, and it is only today I realize I can use shadertoy for instantaneous results... Welp!\n\nIf you have a better, more optimized way to perform what I do in val2col, I'm all ears!\nEDIT: Thank you iq","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["math","colors","rainbow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define scale 120.\n\n//#define calculus(x,y) (cos(x) * y * 5. + sin(y) * x * 5.)\n//#define calculus(x,y) (pow(x, 2.) + pow(y, 2.))\n//#define calculus(x,y) (pow(x, 2.) - pow(y, 2.))\n//#define calculus(x,y) (x * y)\n#define calculus(x,y) ((pow(x,2.) - pow(y,3.))/4.)\n\n\n//vec3 val2col(int val) {\n//    while(val<0) val += 360;\n//    int v = val % 360;\n//    float c = float(v % 60) / 59.;\n//    if(v >= 300) return vec3(1.  , 0.  , 1.-c);\n//    if(v >= 240) return vec3(   c, 0.  , 1.  );\n//    if(v >= 180) return vec3(0.  , 1.-c, 1.  );\n//    if(v >= 120) return vec3(0.  , 1.  ,    c);\n//    if(v >=  60) return vec3(1.-c, 1.  , 0.  );\n//                 return vec3(1.  ,    c, 0.  );\n//}\n\n// Thank you iq\nvec3 val2col( float val )\n{\n     return clamp(abs(mod(val/60.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0,0.0,1.0);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord / iResolution.xy - vec2(.5)) * scale;\n    uv.x *= iResolution.x/iResolution.y;\n\n    // Time varying pixel color\n    float col = calculus(uv.x, uv.y) + iTime * 180.;\n\n    // Output to screen\n    fragColor = vec4(val2col(col),1.0);\n}","name":"Image","description":"","type":"image"}]}