{"ver":"0.1","info":{"id":"l3lSDn","date":"1709384675","viewed":43,"name":"z flattening bug","username":"rubix","description":"idk why z flattening doesn't work","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["bug"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define t iTime\nmat2 r2d(float a) { float c = cos(a), s = sin(a); return mat2(c, -s, s, c); }\n\nfloat sdSphere(vec3 p, float r) { return length(p) - r; }\n\nfloat map(vec3 p) {\n\n    //p.x*=1.15+0.15*sin(t*12.); // flattening on x : ok\n    //p.y*=1.15+0.15*cos(t*10.); // flattening on y : ok\n    p.z*=1.15+0.15*sin(t);    // flattening on z : the normal loses its z, and the shape disappears\n\n    return sdSphere(p, .8);\n}\nvec3 norm(vec3 p) { vec2 e = vec2(.0001, 0.);\n    return normalize(\n        vec3(map(p+e.xyy),map(p+e.yxy),map(p+e.yyx)) -\n        vec3(map(p-e.xyy),map(p-e.yxy),map(p-e.yyx)) );\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.x;\n    vec3 ro = vec3(0., 0., 5.);\n    vec3 rd = vec3(uv, -1.);\n    vec3 p = ro;\n    vec3 col;\n    float d;\n    for (int i = 0; i < 50; i++) {\n        d = map(p);\n        if (d < 0.001) {\n            vec3 n = norm(p);\n            col = n;\n            break;\n        }\n        p += rd * d;\n    }\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}