{"ver":"0.1","info":{"id":"XtVfzK","date":"1543194109","viewed":252,"name":"Polar space","username":"Polytope","description":"Visualizing polar coordinates and cartesian coordinates","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["2d","space","polarcoordinates"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265\n#define TWO_PI 6.283185307179586476925286766559\n\nvec3 orange = vec3(0.8, 0.4, 0.2);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy*2.-1.;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    float r = length(uv);\n    float a = atan(uv.y,uv.x);\n    vec2 pc = vec2(r,a/TWO_PI*8.-.175);\n    float t = (sin(iTime*2.)+1.)*.5;\n    \n    vec2 st = mix(uv,pc,t);\n    \n    st = fract(st*3.)*2.-1.;\n    \n    float c = smoothstep(.4,.0,min(abs(st.xy*2.).x,abs(st.xy*2.).y));\n    \n    vec3 col = vec3(0.);\n    col.bgr += 1.-c*orange;\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}