{"ver":"0.1","info":{"id":"NsdBDN","date":"1656505520","viewed":127,"name":"Reflective Fractal Sphere","username":"snolot","description":"This is a variation of my previous shader https://www.shadertoy.com/view/NdcBWN","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","fractal","sdf"],"hasliked":0,"parentid":"NdcBWN","parentname":"Reflective Fractal"},"renderpass":[{"inputs":[{"id":"4dX3zn","filepath":"/media/a/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png","previewfilepath":"/media/ap/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define ZERO_TRICK max(0, -iFrame)\n#define PI 3.14159265\n#define ITERATIONS 96\n#define dmin 0.001\n#define tmax 20.\n#define ROT(a)          mat2(cos(a), sin(a), -sin(a), cos(a))\n\nvec2 iSphere( in vec3 ro, in vec3 rd, in vec4 sph )\n{\n\tvec3 oc = ro - sph.xyz;\n\tfloat b = dot( oc, rd );\n\tfloat c = dot( oc, oc ) - sph.w*sph.w;\n\tfloat h = b*b - c;\n\tif( h<0.0 ) return vec2(-1.0);\n\th = sqrt(h);\n\treturn vec2(-b-h, -b+h );\n}\n\nfloat box(vec3 p, vec3 b) {\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat pmin(float a, float b, float k) {\n  float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n  return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat pmax(float a, float b, float k) {\n  return -pmin(-a, -b, k);\n}\n\nvec3 pmin(vec3 a, vec3 b, float k) {\n  vec3 h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n  return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nvec3 pabs(vec3 a, float k) {\n  return -pmin(a, -a, k);\n}\n\nfloat glow  = 0.0;\nfloat glow2  = 0.0;\n\nfloat map(vec3 p){\n\n    p.xy *= ROT(iTime*0.3);\n    p.yz *= ROT(iTime*0.4);\n    \n\tfloat s=3.;\n\tp=abs(p);\n    vec3  p0 = p *.9;\n    \n    for (float i=0.; i<4.; i++){\n        p = 2.-pabs(p,.12);\n        \n    \tfloat g=-4.5*clamp(.46*max(1.6/dot(p,p),.7),.0,1.2);\n    \tp*=g;\n    \tp+=p0;\n        s*=g;\n\t}\n    \n\ts=abs(s);\n\tfloat a=3.8;\n\tp-=clamp(p,-a,a);\n    \n    glow += 0.001 / max(0.0125,length(p));\n    glow2 =  1. +max(0.005,length(p)) ;\n    \n\treturn length(p)/s;\n\t\n}\n\nfloat trace(vec3 ro, vec3 rd){\n    float d = 0.;\n    float t = 0.;\n\n    \n    for(int i=0; i<ITERATIONS; i++){\n       d = map(ro + rd * t);\n       \n       if(d < dmin || t > tmax) break;\n       \n       t += d;\n    }\n    \n    return t;\n}\n\nfloat get_ao(vec3 p, vec3 n)\n{\n    float r = 0.0, w = 1.0, d;\n    for(float i=1.0; i<5.0+1.1; i++)\n    {\n        d = i/5.0;\n        r += w*(d - map(p + n*d));\n        w *= 0.5;\n    }\n    return 1.0-clamp(r,0.0,1.0);\n}\n\n\nvec3 get_normal(vec3 p) {\n\tconst vec2 e = vec2(0.002, 0);\n\treturn normalize(vec3(map(p + e.xyy)-map(p - e.xyy), \n                          map(p + e.yxy)-map(p - e.yxy),\t\n                          map(p + e.yyx)-map(p - e.yyx)));\n}\n\n\n\nfloat softshadow( in vec3 ro, in vec3 rd, float k )\n{\n    float res = 1.0;\n    float t = 0.01;\n\tfloat h = 1.0;\n    for( int i=0; i<24; i++ )\n    {\n        h = map(ro + rd*t);\n        res = min( res, k*h/t );\n        if( res<0.001 )break;\n        t += clamp( h, 0.01, 2. );\n    }\n    return clamp(res,0.,1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    \n    vec2 uv = (fragCoord* 2.0 - iResolution.xy) / iResolution.y;\n    vec3 ro = vec3(0,0,8.5);\n    vec3 rd = normalize(vec3(uv,-2.0));\n    vec3 col = vec3(0.3,0.3,0.6) * .3;\n    \n    vec2 seg = iSphere( ro, rd, vec4(0.0,0.0,0.0,2.5) );\n    \n\tif( seg.x>0.0 )\n\t{\n        float d = trace(ro,rd);\n        \n    //if(d < tmax ){\n        vec3 p = ro + rd * d;\n   \n        vec3 n = get_normal(p);      \n\t\tvec3 lightPos=vec3(10);\n    \tvec3 li = lightPos - p;\n\t\tfloat len = length( li );\n\t\tli /= len;\n        float amb=0.5+0.5*n.y;\n\t\tfloat dif = clamp(dot(n, li), 0.4, 1.0);\n        float ao = get_ao(p,n);\n        float shd = softshadow(ro,rd,.5);\n        \n        vec3 refl = reflect(rd,n);\n        vec3 rf = texture(iChannel0, refl).xyz;\n        \n        float spe = max(0.0, pow(clamp(dot(lightPos, reflect(rd, n)), 0.0, 1.0), 5.0)); \n        \n        col=vec3(0.3,0.3,0.6) * dif * amb * ao* ao;\n        col += vec3(0.3, 0.5, 0.9) * glow * ao ;\n        col += vec3(spe * .3) * ao;\n        \n        col += rf * .35;\n        \n        if(length(p)< 2.23)\n            col *=  glow2 ;\n    }\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}