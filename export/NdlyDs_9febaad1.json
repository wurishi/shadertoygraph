{"ver":"0.1","info":{"id":"NdlyDs","date":"1642957304","viewed":267,"name":"Gohu font (8x14)","username":"fpsunflower","description":"Yet another stab at font rendering without textures. Font data is from the gohu 14px font. I tried to make the code relatively small (101 lines) with decent character coverage and number support.\n","likes":19,"published":1,"flags":0,"usePreview":1,"tags":["font"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Gohu font rendering.  https://font.gohu.org/\n// Each glyph is 8x14 pixels, but one column is always blank and so are two pixels\n// of the next column. That leaves 7x14-2=96 bits per glyph, which fits nicely in a uvec3.\n// The code is meant to be easy to copy/paste into other shaders.\n\n// gohu font start\n#define _EXCLAM TXT(p,uvec3(         0,    458240,         0)); // '!'\n#define _QUOTE  TXT(p,uvec3( 939524096,         0,       224)); // '\"'\n#define _SHARP  TXT(p,uvec3(4161339428,4286615583,  37751041)); // '#'\n#define _DOLLAR TXT(p,uvec3( 272908430, 287309585, 236995649)); // '$'\n#define _PRCENT TXT(p,uvec3(1354842114,2349123596, 268476610)); // '%'\n#define _AMP    TXT(p,uvec3(2956722176, 344207888, 285227201)); // '&'\n#define _TICK   TXT(p,uvec3(         0,      7680,         0)); // '''\n#define _LPAREN TXT(p,uvec3(1612578816,   8913944,         4)); // '('\n#define _RPAREN TXT(p,uvec3( 134217728,2248672320,      7681)); // ')'\n#define _TIMES  TXT(p,uvec3(    655428, 268695553,  71305728)); // '*'\n#define _PLUS   TXT(p,uvec3(    262160, 268695553,  16778240)); // '+'\n#define _COMMA  TXT(p,uvec3(         0,    917592,         0)); // ','\n#define _MINUS  TXT(p,uvec3(    262144, 268451841,  16778240)); // '-'\n#define _PERIOD TXT(p,uvec3(         0,    393240,         0)); // '.'\n#define _FSLASH TXT(p,uvec3(  12582912, 201375756,    786624)); // '/'\n#define _0      TXT(p,uvec3( 272596992, 151274514, 266355009)); // '0'\n#define _1      TXT(p,uvec3(1073872896,4278192128,         1)); // '1'\n#define _2      TXT(p,uvec3( 274825216, 285508628, 274743873)); // '2'\n#define _3      TXT(p,uvec3( 270565376, 285492240, 249578561)); // '3'\n#define _4      TXT(p,uvec3(2148270080, 570462210,  33587136)); // '4'\n#define _5      TXT(p,uvec3(2418262016, 151266320, 252723777)); // '5'\n#define _6      TXT(p,uvec3(2420080640, 151266320, 251675201)); // '6'\n#define _7      TXT(p,uvec3( 268451840, 822543360,   3146560)); // '7'\n#define _8      TXT(p,uvec3( 272334848, 285492241, 249578561)); // '8'\n#define _9      TXT(p,uvec3( 268664832, 285492241, 132129857)); // '9'\n#define _COLON  TXT(p,uvec3(         0,2349215744,         1)); // ':'\n#define _SCOLON TXT(p,uvec3(3221225472,    929880,         0)); // ';'\n#define _LT     TXT(p,uvec3(    524288,  67248133,     32897)); // '<'\n#define _EQ     TXT(p,uvec3(1074855936,1140920324,  71307520)); // '='\n#define _GT     TXT(p,uvec3(1082163200,1342316560,      2048)); // '>'\n#define _QMARK  TXT(p,uvec3( 134234112, 277250560,   7340576)); // '?'\n#define _AT     TXT(p,uvec3(3359645951,1116015123, 401623201)); // '@'\n#define _A      TXT(p,uvec3( 276791296, 285230081, 534774848)); // 'A'\n#define _B      TXT(p,uvec3( 276807680, 285492241, 249578561)); // 'B'\n#define _C      TXT(p,uvec3( 272596992,  17040400, 136331329)); // 'C'\n#define _D      TXT(p,uvec3( 276807680,  17040400, 130031745)); // 'D'\n#define _E      TXT(p,uvec3( 276807680, 285492241, 269500481)); // 'E'\n#define _F      TXT(p,uvec3( 276807680, 285230081,   1048640)); // 'F'\n#define _G      TXT(p,uvec3( 272596992, 285475856, 253772865)); // 'G'\n#define _H      TXT(p,uvec3(   8372224, 268451841, 535823360)); // 'H'\n#define _I      TXT(p,uvec3( 268435456,  17300496,         1)); // 'I'\n#define _J      TXT(p,uvec3(   3145728,    262160, 267403265)); // 'J'\n#define _K      TXT(p,uvec3(   8372224,1140891649, 269492352)); // 'K'\n#define _L      TXT(p,uvec3(   8372224,    262160, 268451841)); // 'L'\n#define _M      TXT(p,uvec3(1073775103,  67133440, 535822464)); // 'M'\n#define _N      TXT(p,uvec3(1618984960,1610637312, 535846912)); // 'N'\n#define _O      TXT(p,uvec3( 272596992,  17040400, 266354753)); // 'O'\n#define _P      TXT(p,uvec3( 276807680, 285230081,  14681152)); // 'P'\n#define _Q      TXT(p,uvec3( 272596992,1627653136, 937435201)); // 'Q'\n#define _R      TXT(p,uvec3( 276807680, 822100993, 417338432)); // 'R'\n#define _S      TXT(p,uvec3( 270761984, 285492241, 236995649)); // 'S'\n#define _T      TXT(p,uvec3( 268451841,  17300480,   1048640)); // 'T'\n#define _U      TXT(p,uvec3(   4177920,    262160, 267403265)); // 'U'\n#define _V      TXT(p,uvec3(    245760,2147876871,  15735809)); // 'V'\n#define _W      TXT(p,uvec3(   7340095, 536899586,  66088960)); // 'W'\n#define _X      TXT(p,uvec3(3227566080, 268451846, 405805824)); // 'X'\n#define _Y      TXT(p,uvec3(    196611, 268926977,   3146496)); // 'Y'\n#define _Z      TXT(p,uvec3( 275791872, 151274514, 271597889)); // 'Z'\n#define _LBRKET TXT(p,uvec3(         0,   9436672,     32802)); // '['\n#define _BSLASH TXT(p,uvec3( 805318656, 805318656, 805318656)); // '\\'\n#define _RBRKET TXT(p,uvec3( 134217728,4287103520,         3)); // ']'\n#define _CARET  TXT(p,uvec3( 268468224,  16777728,       128)); // '^'\n#define _UNDER  TXT(p,uvec3(   8389120,    524320, 536903682)); // '_'\n#define _BTICK  TXT(p,uvec3( 268443648,      2048,         0)); // '`'\n#define _a      TXT(p,uvec3(1077411840, 335826961, 528491777)); // 'a'\n#define _b      TXT(p,uvec3(2155864064,  67375120, 260063489)); // 'b'\n#define _c      TXT(p,uvec3(1077805056,  67375120, 142622977)); // 'c'\n#define _d      TXT(p,uvec3(1077805056,  67375120, 536355073)); // 'd'\n#define _e      TXT(p,uvec3(1077805056, 604278802, 327174401)); // 'e'\n#define _f      TXT(p,uvec3(4026531840, 142615071,       544)); // 'f'\n#define _g      TXT(p,uvec3(1077805056,  69472400,2143428873)); // 'g'\n#define _h      TXT(p,uvec3(2155864064,  67112960, 528482560)); // 'h'\n#define _i      TXT(p,uvec3(1073807360,    521728,     16385)); // 'i'\n#define _j      TXT(p,uvec3(  33554432,4255125632,         7)); // 'j'\n#define _k      TXT(p,uvec3(   8380416,1342210050, 268444160)); // 'k'\n#define _l      TXT(p,uvec3( 134217728,    261632, 268451841)); // 'l'\n#define _m      TXT(p,uvec3(1073807868,  67629056, 528482560)); // 'm'\n#define _n      TXT(p,uvec3(1082064896,  67112960, 528482560)); // 'n'\n#define _o      TXT(p,uvec3(1077805056,  67375120, 260063489)); // 'o'\n#define _p      TXT(p,uvec3(2214526976,  67375120, 260063489)); // 'p'\n#define _q      TXT(p,uvec3(1077805056,  67375120,4290781441)); // 'q'\n#define _r      TXT(p,uvec3(2155806720,  67112960,   8388864)); // 'r'\n#define _s      TXT(p,uvec3(1078329344, 604278802, 201345281)); // 's'\n#define _t      TXT(p,uvec3(1073741824,  67370496,     16641)); // 't'\n#define _u      TXT(p,uvec3(   4128768,    262160, 532684801)); // 'u'\n#define _v      TXT(p,uvec3(    458752,2147876870,  29366273)); // 'v'\n#define _w      TXT(p,uvec3(   6291580,1073790980, 130048000)); // 'w'\n#define _x      TXT(p,uvec3(   6488064, 536903685, 415241216)); // 'x'\n#define _y      TXT(p,uvec3(   4128768,   2359440,2143428617)); // 'y'\n#define _z      TXT(p,uvec3(1080098816, 335843348, 272646913)); // 'z'\n#define _LCURL  TXT(p,uvec3(    524320,   9403394,1074331684)); // '{'\n#define _PIPE   TXT(p,uvec3(         0,   2096640,         0)); // '|'\n#define _RCURL  TXT(p,uvec3( 151003136,3742368320,  33556483)); // '}'\n#define _TILDE  TXT(p,uvec3(2147614768, 536887296,  25167872)); // '~'\n#define _        CURSOR.x+=8;\n#define _NEWLINE CURSOR=ivec2(CURSOR_START.x, CURSOR.y-14);\n#define NUM(value) _NUM(p,value);\nvec3 TXT_COL=vec3(0.0); ivec2 CURSOR_START = ivec2(0), CURSOR = ivec2(0);\nvoid TXT(vec2 p, uvec3 g){_ int x=int(p.x)-CURSOR.x,y=CURSOR.y-int(p.y),b=x*14+y-16;if(x>0&&x<8&&y>=0&&y<14&&b>=0)TXT_COL+=vec3((g[b/32]>>(b&31))&1u); }\nvoid _NUM(vec2 p, float n){if(n<0.){_MINUS n=-n;}for (int i=6,k=100000000,m=int(round(n*100.0));i>-3;i--,k/=10){int d=m>=k||i<=0?int(m/k)%10:-1;\nif(i==-1)_PERIOD if(d==0)_0 if(d==1)_1 if(d==2)_2 if(d==3)_3 if(d==4)_4 if(d==5)_5 if(d==6)_6 if(d==7)_7 if(d==8)_8 if(d==9)_9 if(i==0&&(m%100)==0)break;}}\n// gohu font end\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  CURSOR_START = CURSOR = ivec2(4, int(iResolution.y)/2 - 14);\n  vec2 p = fragCoord * 0.5;\n  // basic text\n  _H _e _l _l _o _ _W _o _r _l _d _EXCLAM _NEWLINE _NEWLINE\n  _T _h _e _ _q _u _i _c _k _ _b _r _o _w _n _ _f _o _x _ _j _u _m _p _s _\n  _o _v _e _r _ _t _h _e _ _l _a _z _y _ _d _o _g _PERIOD _NEWLINE\n  _NEWLINE\n  // display all glyphs\n  _A _B _C _D _E _F _G _H _I _J _K _L _M _N _O _P _Q _R _S _T _U _V _W _X _Y _Z _NEWLINE\n  _a _b _c _d _e _f _g _h _i _j _k _l _m _n _o _p _q _r _s _t _u _v _w _x _y _z _NEWLINE\n  _BTICK _1 _2 _3 _4 _5 _6 _7 _8 _9 _0 _MINUS _EQ _LBRKET _RBRKET _BSLASH _SCOLON _TICK\n  _COMMA _PERIOD _FSLASH _NEWLINE\n  _TILDE _EXCLAM _AT _SHARP _DOLLAR _PRCENT _CARET _AMP _TIMES _LPAREN _RPAREN _UNDER _PLUS _LCURL _RCURL _PIPE\n  _COLON _QUOTE _LT _GT _QMARK _NEWLINE\n  _NEWLINE _NEWLINE\n  // example of drawing dynamic content\n  _i _M _o _u _s _e _ _ _ _ _ _ _EQ _ _LPAREN NUM(iMouse.x) _COMMA _ NUM(iMouse.y) _RPAREN _NEWLINE\n  _i _T _i _m _e _  _  _  _  _  _ _ _EQ _ NUM(iTime) _NEWLINE\n  _i _R _e _s _o _l _u _t _i _o _n _ _EQ _ NUM(iResolution.x) _ _x _ NUM(iResolution.y)\n  // output to screen  \n  fragColor = vec4(mix(vec3(.2,.2,.2),vec3(.1,.8,.1),TXT_COL),1.0);\n}","name":"Image","description":"","type":"image"}]}