{"ver":"0.1","info":{"id":"MtfcRs","date":"1505970720","viewed":117,"name":"Cosine Pallette","username":"jgkling","description":"Quick visualization for cosine pallettes for testing purposes: https://iquilezles.org/articles/palettes/palettes.htm","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["procedural"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float palette( in float a, in float b, in float c, in float d, in float x ) {\n    return a + b * cos(6.28318 * (c * x + d));\n}\n\n/*\n// IQ cool distance estimation: https://iquilezles.org/articles/distance\nfloat grad( in vec2 p, in float a, in float b, in float c, in float d, in float x ) {\n    float h = 0.01;\n    return (palette(a, b, c, d, x + h) - palette(a, b, c, d, x - h)) / (2.0 * h);\n}\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = fragCoord.xy / iResolution.xy;\n    \n    float r = palette(0.5, 0.5, 1.0, 0.0,  p.x);\n    float g = palette(0.5, 0.5, 1.0, 0.33, p.x);\n    float b = palette(0.5, 0.5, 1.0, 0.67, p.x);\n    \n    // Render each individual color component\n    if (length(p.y - r * 0.5f - 0.22f) < 0.01f)\n    {\n        fragColor = vec4(1.f, 0.f, 0.f, 1.f);\n        return;\n    }\n    \n    if (length(p.y - g * 0.5f - 0.25f) < 0.01f)\n    {\n        fragColor = vec4(0.f, 1.f, 0.f, 1.f);\n        return;\n    }\n    \n    if (length(p.y - b * 0.5f - 0.28f) < 0.01f)\n    {\n        fragColor = vec4(0.f, 0.f, 1.f, 1.f);\n        return;\n    }\n    \n    if(length(p.y - 0.5f) < 0.4f)\n    {\n        fragColor = vec4(r, g, b, 1.0);\n    }\n}","name":"Image","description":"","type":"image"}]}