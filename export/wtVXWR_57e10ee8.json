{"ver":"0.1","info":{"id":"wtVXWR","date":"1600462665","viewed":129,"name":"Draw functions","username":"GCScholar","description":"Drawing math functions example","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["function","drawfunctions"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Draw a function\n// The functions are scaled or translated so they fit better in the viewport\n\n//#define f(x) sin(6. * x)      // The sin function scaled along the x-axis to make it more visible\n//#define f(x) x                // A line\n//#define f(x) log(x)           // Logarithm\n//#define f(x) exp(x - 1.) - 1. // Exponential function translated on the x and y axes\n#define f(x) smoothstep(-1., 1., x)\n\n\n// Draw a circular point P with a radius of r\n#define drawPoint(P, r) smoothstep( r/iResolution.y, 0., abs(length(U - P)))\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalizing coordinates: the center of the screen is (0,0)\n    //  and the coordinates range from -1 to 1 along the y axis\n\tvec2 U = ( 2. * fragCoord - iResolution.xy ) / iResolution.y;\n        \n    // The position of the point to be drawn\n    vec2 P = vec2 (U.x, f(U.x));\n    \t\n    float thickness = 10.;\n    \n    // Could use this ...\n    // f += drawPoint(P, thickness);\n    // fragColor = vec4(f);\n    \n    // ... but this is simpler \n\tfloat f = length(U - P);      \n\tfragColor = vec4( 1. - f / (thickness/iResolution.y) );\n}","name":"Image","description":"","type":"image"}]}