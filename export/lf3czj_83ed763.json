{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"/*\n    First shader ever\n    \n    I recently discovered shadertoy, and I'm like a kid who discovered the existence of a parallel world in his closet <3\n    \n    I know there is probably a lot of math tricks to do the same with fewer code but :\n    - I'm not a maths expert\n    - I wanted the code to stay quite understable (that's also the reason I commented a lot)\n    \n    But, if you want to share your tricks to optimize, or just for the love of code, you're welcome :)\n    \n*/\n#define SECTION_WIDTH 0.1\n#define ZOOM_SPEED 0.2\n#define SPIN_RADIUS 0.1\n#define SPIN_SPEED 0.5\n#define PI 3.14159\n\n\n// Draws \"iso circles\" at center \"uv\", more or less faded by \"coef\" value\nfloat iso_circles(vec2 uv, float coef) \n{\n    // Length of vector from the drawn pixel to the center of uv\n    float c = length(uv);\n     \n    // m is a time varying value, used to vary the width of the \"iso circles\"\n    float m = 2.0 + sin(iTime) * 0.5;\n    \n    // Fades the value of c every two sections, and offsets them by a time varying value\n    if (mod(c - iTime * ZOOM_SPEED, SECTION_WIDTH) > SECTION_WIDTH / m) c *= 0.8;\n    \n    // Color intensity (between 0 and 1), faded by the \"coef\" value (supposedly between 0 and 1 too)\n    return c * coef;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    // Then from -0.5 to 0.5\n    uv -= 0.5;\n    // Then aspect ratioed\n    uv.x *= iResolution.x / iResolution.y;\n\n    // Let's memorise uv before we modify it, in \"center\" variable\n    vec2 center = uv;\n    \n    // Now we want to draw 3 \"iso circles\" : one for the red components, the two others for the green and the blue ones\n    \n    // We want the circles to spin along the center of the screen with a pi / 3 offset, but with a time varying radius\n    float radius = SPIN_RADIUS + SPIN_RADIUS * 0.5 + sin(iTime);\n\n    // So we start with a black color, and we'll add the 3 color components separately\n    vec3 col = vec3(0);\n    \n    // Red circles\n    // Spins the center along a circle of radius SPIN_RADIUS, screen centered\n    uv.x = center.x + radius * cos(iTime * SPIN_SPEED);\n    uv.y = center.y + radius * sin(iTime * SPIN_SPEED);\n    \n    // Then draws the \"iso circles\" with a time varying fading value\n    col.r = iso_circles(uv, 0.7 + 0.5 * sin(iTime * SPIN_SPEED));\n    \n    // Red circles\n    // Same as before, but with a pi / 3 offest\n    uv.x = center.x + radius * cos(iTime * SPIN_SPEED + PI / 3.0);\n    uv.y = center.y + radius * sin(iTime * SPIN_SPEED + PI / 3.0);\n    \n    col.g = iso_circles(uv, 0.7 + 0.5 * sin(iTime * SPIN_SPEED + PI  / 3.0));\n\n    // Blue circles\n    // Same as before, but with a -pi / 3 offest\n    uv.x = center.x + radius * cos(iTime * SPIN_SPEED - PI / 3.0);\n    uv.y = center.y + radius * sin(iTime * SPIN_SPEED - PI / 3.0);\n    \n    col.b = iso_circles(uv, 0.7 + 0.5 * sin(iTime * SPIN_SPEED - PI / 3.0));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"lf3czj","date":"1734009627","viewed":36,"name":"Moving iso circles","username":"HasturFr","description":"Moving circles, moving radius, moving everything just to have fun and learn.\n\nI know this is quite lame compared to the demomakers stuff we can see here, but my purpose was to learn.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["circles","simple","n00b","learning"],"hasliked":0,"parentid":"","parentname":""}}