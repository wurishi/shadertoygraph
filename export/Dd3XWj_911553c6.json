{"ver":"0.1","info":{"id":"Dd3XWj","date":"1680396015","viewed":58,"name":"srgb gamma comparison","username":"danielsturk","description":"linear vs srgb2.2 vs srgb2.4 lerp","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["encoding"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// top    = gamma of 1\n// middle = gamma of 2.2\n// bottom = gamma 2.4\n// gamma of 1 always looks bleached because it's so far from\n// your monitor's gamma that it isn't close to linear color blending\n// many image editing tools use a gamma of 1 unfortunately\n\nfloat saturate(float x) {\n    return min(max(x, 0.), 1.);\n}\n\nfloat euclideanMod(float x, float m) {\n    // return mod((mod(x, m) + m), m);\n    return fract(x / m) * m;\n}\n\nfloat hsv_helper(float peak, float hue) {\n    float dist = hue - peak;\n    dist = euclideanMod(dist + 3., 6.) - 3.;\n    return saturate(2. - abs(dist));\n}\n\n// hue must be between 0 and 1, can't wrap\nvec3 hsvToRgb(float h, float s, float v) {\n    // calc hue\n    h *= 6.;\n    vec3 color = vec3(\n        hsv_helper(0., h),\n        hsv_helper(2., h),\n        hsv_helper(4., h)\n    );\n    // calc saturation\n    color += (1. - color) * (1. - s);\n    // calc value\n    color *= v;\n    return color;\n}\n\n/*\nvec3 rgbToHsv(vec3 rgb) {\n    float v = max(max(r, g), b);\n    float s = 1. - (min(min(r, g), b) / v);\n    rgb *= 1. / v; // undo value\n    rgb (1. - rgb)\n}\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec3 a = vec3(1,0,0);\n    vec3 b = vec3(.0,1.,0);\n    \n    float gamma = 1.;\n    if(uv.y < 2. / 3.) {\n        gamma = uv.y < (1. / 3.) ? 2.2 : 2.;\n    }\n    \n    a = pow(a, vec3(1. / gamma));\n    b = pow(b, vec3(1. / gamma));\n    vec3 c = mix(a, b, uv.x);\n    c = pow(c, vec3(gamma));\n    \n    fragColor = vec4(c, 1);\n}","name":"Image","description":"","type":"image"}]}