{"ver":"0.1","info":{"id":"3sGXRd","date":"1574768550","viewed":77,"name":"Levy c curve","username":"1337_shader","description":"it's a Levy c curve","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["fractal","levyccurve"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord/iResolution.xy;\n    \n    vec4 data = texture( iChannel0, p );\n    \n    float f = data.y;\n    float e = data.y;\n    //vec3 col = mod(e /vec3(0.01,1,.001), 1./e*e);\n    \n    vec3 g =data.xyz;\n fragColor = vec4(g,1);   \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define time iTime\nfloat hash( float itime){\n\treturn fract(sin(itime)*987.654321); \n}\n//make true for levy curve \n// make false for dragon curve\n bool levy = true;\n\n\nvec2 f1(vec2 z,float r,float a)\n{\n\nreturn mat2(r*cos(a),r*sin(a),-r*sin(a),r*cos(a))*z + vec2(0.,1.);\n}\n\n\n\n\nvec2 f2(vec2 z,float r, float a)\n{\nreturn mat2(-r*cos(a),-r*sin(a),r*sin(a),-r*cos(a))*z + vec2(0.,1.);\n}\n\nvec2 f3(vec2 z)\n{\nreturn mat2(1.,0.,0.,1.)*z;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n     \n    float use;\n   \n    if(levy){use = -1.;}\n    else if(levy == false){use = 1.;}\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n   \n    \n    vec4 data = texture( iChannel0, uv );\n    \n    vec2 c = uv;\n    \n    uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n     uv *= 4.;\n    \n   uv.y+=0.3;\n    uv.x+=0.18;\n        uv.y += 1.;\n    \n    \n    if( iFrame==0 || int(levy) != int(data.w) ) {data = vec4(0.); }\n\n       float d = data.y;\n   \n    float e = data.y;\n    \n    \n\tfloat i =0.;\n    \n      float p = hash(iTime + fragCoord.x*113.1 + fragCoord.y*7.3 );\n    \n\n    \n    vec2 z = vec2(0);\n    \n    float eps = 1./iResolution.y*4.;\n  \n    float re = .7;\n    float angle = radians(45.);\n    float angle2 = -radians(45.);\n    \n    for(i = 0.; i <100.;i++)\n  {\n vec2 oz = z;\n   p = abs(fract( p + cos(p*6283.1) ));\n   \n      if(p >= 0.5){z= f2(z,use*re,angle);}\n     else  if(p<= 0.5){z= f1(z,re,angle2);}\n \n      \n   \n      \n      \n      if(i < 32.) continue;\n              float r = length(uv-z);\n      \n    \n      \n     \n        d  = max(d , 1.0-smoothstep( 0.5*eps, 1.0*eps, r ) );\n      \n      \n      \n  }\n    \n    \n    \n    \n  \n    vec3 col =vec3(0,d,0);\n\n    // Output to screen\n    fragColor = vec4(col,int(levy));\n}","name":"Buffer A","description":"","type":"buffer"}]}