{"ver":"0.1","info":{"id":"flf3WS","date":"1622683515","viewed":174,"name":"Worley noise 1D __","username":"Envy24","description":"worley, noise, random, cellular","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["noise","random","worley","cellular"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* playlist: https://www.shadertoy.com/playlist/sXfSDS */\n\n/*  \n    Returns hash in range [0.0; 1.0].\n*/\nfloat sample1DHashUI32(uint value)\n{\n    // Pick some enthropy source values.\n    // Try different values.\n    const uint enthropy0 = 12345u;\n    const uint enthropy1 = 67890u;\n\n    // Calculate hash.\n\tvalue += enthropy1;\n\tvalue *= 445593459u;\n\tvalue ^= enthropy0;\n\n    // 1.0f / 4294967295.0f = 2.32830644e-10\n    \n    return float(value * value * value) * 2.32830644e-10;\n}\n\nfloat WorleyNoise1D(float u)\n{\n    // Fractial part.\n    float fractU = u - floor(u);\n\n    // Integer part.\n    u = floor(u);\n\n    float minDistance = 3.40282347e+37f; // FL_MAX = 3.40282347e+38f\n\n    for (float y = -1.0f; y < 2.0f; y += 1.0f)\n    {\n        for (float x = -1.0f; x < 2.0f; x += 1.0f)\n        {\n            // Pseudorandom sample coordinates in corresponding cell.\n            float xSample = x + sample1DHashUI32(uint(u + x));\n\n            // Distance from pixel to pseudorandom sample.\n            //float _distance = \n                //sqrt((fractU - xSample) * (fractU - xSample));\n                \n            float _distance = \n                (fractU - xSample) * (fractU - xSample);\n\n            // Mistance from pixel to pseudorandom sample.\n            minDistance = min(minDistance, _distance);\n        }\n    }\n\n    return minDistance;\n}\n\nfloat fbm_noise(float x)\n{\n    float val = WorleyNoise1D(x) * 0.5f;\n          val += WorleyNoise1D(x * 2.054f) * 0.45f;\n          val += WorleyNoise1D(x * 4.554f) * 0.125f;\n    return val-0.25;\n}\n\nfloat dfdx(float x)\n{\n    const float dx = 0.01;\n    return (fbm_noise(x+dx) - fbm_noise(x-dx)) / (2.*dx);\n}\n\n#define MOUSE_OFFSET ( iMouse.z > 0. ? iMouse.xy - iResolution.xy * 0.5 : vec2(0) )\nvec2 map_to_centered_ndc(in vec2 SC, in float scale, in vec2 origin, in bool mouse_drag)\n{\n    vec2 M = MOUSE_OFFSET * (mouse_drag == true ? 1. : 0.);\n    return ((2. * (SC - M) - iResolution.xy) / iResolution.y) * scale + origin;\n}\n\nfloat diskSDF_L2(in vec2 NDC, in vec2 C, in float r) { return length(C - NDC)-r; }\n\nvoid mainImage( out vec4 O, in vec2 SC )\n{\n#define R                         ( iResolution )\n#define UNIT                      (  4.0 / R.y  )\n#define SMAA(x)                   ( smoothstep(UNIT, 0., x) )\n\n    vec2 NDC = map_to_centered_ndc(SC, 1., vec2(0., 0.), true);\n\n    vec3 color = vec3(1);\n    \n    float x = NDC.x + iTime * 0.5,\n          fx = fbm_noise(x),\n          deriv = dfdx(x),\n          explicit_sdf_approx = NDC.y - fx,\n          dsdx = sqrt(1.0 + deriv * deriv); // arclength change over argument change\n          \n          color = mix( color, vec3(0,0,0), SMAA(abs(explicit_sdf_approx) / dsdx) );\n          color = mix( color, vec3(1,0,1), SMAA(diskSDF_L2(NDC, vec2(0., fbm_noise(iTime*0.5)), 2.*UNIT)) ); \n    \n    O = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}