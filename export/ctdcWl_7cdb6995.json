{"ver":"0.1","info":{"id":"ctdcWl","date":"1708106764","viewed":84,"name":"DarkMatter02 : Sadness","username":"Makio64","description":"Further research focused on minimizing large movements while deepening the darkness, creating a more subdued and intense experience.","likes":5,"published":1,"flags":64,"usePreview":0,"tags":["water","snoise","soft","sad","darkmatter"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"MsdGDS","filepath":"https://soundcloud.com/starfallrecs/slowing-down","previewfilepath":"https://soundcloud.com/starfallrecs/slowing-down","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// By David Ronai / @Makio64\n// BlackMatter2 : mix different shader idea to get this result\n\n//------------------------------------------------------------------ VISUAL QUALITY\n#define RAYMARCHING_STEP 23\n#define RAYMARCHING_JUMP 1.\nconst float PI = 3.14159265359;\nconst float PI2 = 6.28318530718;\n\nfloat snoise(in vec2 v);\nlowp float snoise(in mediump vec3 v);\n\nvec3 orbit(float phi, float theta, float radius){\n\treturn vec3(\n\t\tradius * sin( phi ) * cos( theta ),\n\t\tradius * cos( phi ),\n\t\tradius * sin( phi ) * sin( theta )\n\t);\n}\n\n//------------------------------------------------------------------  SIGNED PRIMITIVES\n//http://mercury.sexy/hg_sdf/\n#define saturate(x) clamp(x, 0., 1.)\nfloat fSphere(vec3 p, float r) {\n\treturn length(p) - r;\n}\n\n//------------------------------------------------------------------ MAP\nfloat map( in vec3 pos ) {\n    float time = iTime * 3. ;\n    vec3 q = pos + snoise(pos/10.+iTime*.5);\n    \n    vec2 u = pos.xy*0.2;\n    vec2 um = u*0.3;\n    um.x += iTime*0.1;\n    um.y += -iTime*0.025;\n\n    float h   = texture(iChannel2, um).x;\t\t//Non twisted height\n    um.x += (um.y)*2.0;\n    \n    float hlg = texture(iChannel2, um).x;\t\t//Large details\n    float hfn = texture(iChannel2, u).x;\t\t//Fine details\n   \n    float disp = hlg*0.4 + hfn*0.1*(1.0-hlg);\t//Accumulative displacement\n\n    float d = fSphere(q+disp*.2,30.);\n    return d;\n}\n\n//------------------------------------------------------------------ RAYMARCHING\nfloat castRay( in vec3 ro, in vec3 rd, inout float depth )\n{\n\tfloat t = 15.0;\n\tfloat res;\n\tfor( int i=0; i<RAYMARCHING_STEP; i++ )\n\t{\n\t\tvec3 pos = ro+rd*t;\n\t\tres = map( pos );\n\t\tif( res < 0.01 || t > 150. ) break;\n\t\tt += res*RAYMARCHING_JUMP;\n\t\tdepth += 1./float(RAYMARCHING_STEP);\n\t}\n\treturn t;\n}\n\nvec3 calcNormal(vec3 p) {\n\tfloat eps = 0.001;\n\tconst vec3 v1 = vec3( 1.0,-1.0,-1.0);\n\tconst vec3 v2 = vec3(-1.0,-1.0, 1.0);\n\tconst vec3 v3 = vec3(-1.0, 1.0,-1.0);\n\tconst vec3 v4 = vec3( 1.0, 1.0, 1.0);\n\treturn normalize( v1 * map( p + v1*eps ) +\n\t\t\t\t\t  v2 * map( p + v2*eps ) +\n\t\t\t\t\t  v3 * map( p + v3*eps ) +\n\t\t\t\t\t  v4 * map( p + v4*eps ) );\n}\n\n//------------------------------------------------------------------ POSTEFFECTS\nvec3 postEffects( in vec3 col, in vec2 uv )\n{    \n\t//vignetting\n\tcol *= 0.5+0.6*pow( 16.0*uv.x*uv.y*(1.0-uv.x)*(1.0-uv.y), 0.8 );\n    //noise\n    col -= snoise((uv*3.+iTime)*1000.)*.1;\n\treturn col;\n}\n\nvec3 addLight(in vec3 lpos, inout vec3 col, in vec3 pos, in vec3 nor, in vec3 rd, in float thi){\n\tvec3 ldir = normalize(lpos-pos);\n\tfloat latt = pow( length(lpos-pos)*.03, .5 );\n    float trans =  pow( clamp( max(0.,dot(-rd, -ldir+nor)), 0., 1.), 1.) + 1.;\n\tcol += vec3(.3,.3,.1) * (trans/latt)*thi;\n    return col;\n   \n}\n\n//------------------------------------------------------------------ RENDER\n\nvec3 render( in vec3 ro, in vec3 rd, in vec2 uv )\n{\n\tfloat depth = 0.;\n\tfloat t = castRay(ro,rd,depth);\n    \n\tvec3 pos = ro + t * rd;\n\tvec3 nor = calcNormal(pos);\n\n    // lighting        \n    vec3 lig = vec3(-0.6, 0.7, -0.5);\n    vec3 ref = reflect( rd, nor );\n    float fre = pow( clamp(1.0+dot(nor,rd),0.0,1.0), 2.0 );\n    float specular = pow(clamp( dot( ref, lig ), 0.0, 1.0 ),16.0);\n    vec3 r = texture(iChannel1, ref).rgb;\n\n    float sound = texture( iChannel0, vec2( 0.01, .7 ) ).x;\n\n\tvec3 bg = vec3(0.1) + uv.y*vec3(.1,.0,.4);\t\n    vec3 col = bg;\n    if(t<40.){\n        col += specular * .4; \n        col += r*.25;\n        col -= dot(nor,rd)*sin(nor.y*10.)*.1;\n    }\n\treturn col*vec3(1.1,  0.91, 0.52);\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n\treturn mat3( cu, cv, cw );\n}\n\n\n//------------------------------------------------------------------ MAIN\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 p = -1. + 2. * uv;\n    p.x *= iResolution.x / iResolution.y;\n    \n    //Camera\n\tfloat radius = 50.;\n\tvec3 ro = orbit(PI/2.-.4 ,PI/2.+ iTime*.2,radius);\n\tvec3 ta  = vec3(0.);\n\tmat3 ca = setCamera( ro, ta, 0. );\n\tvec3 rd = ca * normalize( vec3(p.xy,1.) );\n\n\t// Raymarching\n\tvec3 color = render( ro, rd, uv );\n\tcolor = postEffects( color, fragCoord.xy / iResolution.xy );\n\tfragColor = vec4(color,1.0);\n}\n\n//----------- FIN\n\n#define X .211324865405187\n#define Y .36602540378443\nvec3 permute(in vec3 x) { return mod( x*x*34.+x, 289.); }\nfloat snoise(in vec2 v) {\n  lowp vec2 i = floor((v.x+v.y)*.36602540378443 + v),\n      x0 = (i.x+i.y)*.211324865405187 + v - i,\n       j = step(x0.yx, x0),\n      x1 = x0 - j + .211324865405187, \n      x3 = x0 - .577350269189626; \n  i = mod(i,289.);\n  lowp vec3 p = permute( permute( i.y + vec3(0, j.y, 1 ))+ i.x + vec3(0, j.x, 1 )   ),\n       m = max( .5 - vec3(dot(x0,x0), dot(x1,x1), dot(x3,x3)), 0.),\n       x = fract(p * .024390243902439) * 2. - 1.,\n       h = abs(x) - .5,\n      a0 = x - floor(x + .5);\n  return .5 + 65. * dot( pow(m,vec3(4.))*(- 0.85373472095314*( a0*a0 + h*h )+1.79284291400159 ), a0 * vec3(x0.x,x1.x,x3.x) + h * vec3(x0.y,x1.y,x3.y));\n}\n\n// Optimized AshimaSimplexNoise by @makio64 https://www.shadertoy.com/view/Xd3GRf\nlowp vec4 permute(in lowp vec4 x){return mod(x*x*34.+x,289.);}\nlowp float snoise(in mediump vec3 v){\n  const lowp vec2 C = vec2(0.16666666666,0.33333333333);\n  const lowp vec4 D = vec4(0,.5,1,2);\n  lowp vec3 i  = floor(C.y*(v.x+v.y+v.z) + v);\n  lowp vec3 x0 = C.x*(i.x+i.y+i.z) + (v - i);\n  lowp vec3 g = step(x0.yzx, x0);\n  lowp vec3 l = (1. - g).zxy;\n  lowp vec3 i1 = min( g, l );\n  lowp vec3 i2 = max( g, l );\n  lowp vec3 x1 = x0 - i1 + C.x;\n  lowp vec3 x2 = x0 - i2 + C.y;\n  lowp vec3 x3 = x0 - D.yyy;\n  i = mod(i,289.);\n  lowp vec4 p = permute( permute( permute(\n\t  i.z + vec4(0., i1.z, i2.z, 1.))\n\t+ i.y + vec4(0., i1.y, i2.y, 1.))\n\t+ i.x + vec4(0., i1.x, i2.x, 1.));\n  lowp vec3 ns = .142857142857 * D.wyz - D.xzx;\n  lowp vec4 j = -49. * floor(p * ns.z * ns.z) + p;\n  lowp vec4 x_ = floor(j * ns.z);\n  lowp vec4 x = x_ * ns.x + ns.yyyy;\n  lowp vec4 y = floor(j - 7. * x_ ) * ns.x + ns.yyyy;\n  lowp vec4 h = 1. - abs(x) - abs(y);\n  lowp vec4 b0 = vec4( x.xy, y.xy );\n  lowp vec4 b1 = vec4( x.zw, y.zw );\n  lowp vec4 sh = -step(h, vec4(0));\n  lowp vec4 a0 = b0.xzyw + (floor(b0)*2.+ 1.).xzyw*sh.xxyy;\n  lowp vec4 a1 = b1.xzyw + (floor(b1)*2.+ 1.).xzyw*sh.zzww;\n  lowp vec3 p0 = vec3(a0.xy,h.x);\n  lowp vec3 p1 = vec3(a0.zw,h.y);\n  lowp vec3 p2 = vec3(a1.xy,h.z);\n  lowp vec3 p3 = vec3(a1.zw,h.w);\n  lowp vec4 norm = inversesqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n  lowp vec4 m = max(.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.);\n  return .5 + 12. * dot( m * m * m, vec4( dot(p0,x0), dot(p1,x1),dot(p2,x2), dot(p3,x3) ) );\n}","name":"Image","description":"","type":"image"}]}