{"ver":"0.1","info":{"id":"lfXcRs","date":"1724276814","viewed":52,"name":"AARBF - Particles Shadowed","username":"natevm","description":"Sample code for implementing \"attribute aware\" radial basis functions, as described in this paper:\nhttps://www.sci.utah.edu/publications/Mor2023a/AARBF.pdf\n\n","likes":9,"published":1,"flags":0,"usePreview":1,"tags":["volume","particles","point","range","rbf","query","aarbf"],"hasliked":0,"parentid":"lflyzj","parentname":"AARBF - Particles (Range Query)"},"renderpass":[{"inputs":[{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright © 2024 Nate Morrical\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// The code below shows how to implement the AA-RBF interpolant from this paper:\n// https://www.sci.utah.edu/publications/Mor2023a/AARBF.pdf\n// The bulk of the method is in the \"interpolate\" function below\n\n// More point containment queries here: https://www.shadertoy.com/playlist/fXdfzX\n\n#if HW_PERFORMANCE==0\n#define NUM_PARTICLES 8    \n#define NUM_STEPS 8\n#else\n#define NUM_PARTICLES 16    \n#define NUM_STEPS 64    \n#endif\n\n\n#define DENSITY 4.0\n#define RADIUS .5\n\n#define EXPOSURE 1.5 \n\n\n// Attribute colormap\nvec3 viridis(float t) {\n    t = clamp(t, 0.0, 1.0);\n    \n    const vec3 c0 = vec3(0.2777273272234177, 0.005407344544966578, 0.3340998053353061);\n    const vec3 c1 = vec3(0.1050930431085774, 1.404613529898575, 1.384590162594685);\n    const vec3 c2 = vec3(-0.3308618287255563, 0.214847559468213, 0.09509516302823659);\n    const vec3 c3 = vec3(-4.634230498983486, -5.799100973351585, -19.33244095627987);\n    const vec3 c4 = vec3(6.228269936347081, 14.17993336680509, 56.69055260068105);\n    const vec3 c5 = vec3(4.776384997670288, -13.74514537774601, -65.35303263337234);\n    const vec3 c6 = vec3(-5.435455855934631, 4.645852612178535, 26.3124352495832);\n\n    vec3 srgb = c0+t*(c1+t*(c2+t*(c3+t*(c4+t*(c5+t*c6)))));\n    return pow(srgb, vec3(2.2));\n}\n\n// Density transfer function\nfloat densityMap(float phi) {\n    if (phi < .1) return 0.0;\n    return clamp((phi - .1)/.9, 0.0, 1.0);\n}\n\n// Evaluates the RBF \"φ^\" (from Eq. 1)\nfloat evaluateRBF(vec3 x, float r, vec3 p, float sigma) {\n    return exp(-.5 * pow((distance(x, p) * sigma) / r, 2.f));\n}\n\n// Tests if a point at the location \"x\" is within range of the query point.\n// Used to determine the piecewise \"φ\" (from Eq. 2.)\nbool inRange(vec3 x, float r, vec3 p) {\n    vec3 d = p - x;\n    if (dot(d,d) < r*r) return true;\n    return false;\n}\n\n// Particle positions, with \"y\" up and data values stored in \"w\" \nvec4 interpolate(vec3 P, in vec4 v[NUM_PARTICLES]) {    \n    // The accumulated density value \"Φ\" (from Eq. 3)\n    float phiSum = 0.0; \n    \n    // The accumulated density-weighted color value, ∑ θ*φ (in Eq. 4)\n    vec3 thetaSum = vec3(0.0); \n        \n    for (int i = 0; i < NUM_PARTICLES; ++i) {\n        float t = float(i) / float(NUM_PARTICLES);\n        float r = RADIUS * (.5 + .5 * t);\n        if (inRange(v[i].xyz, r, P)) {\n            float phi = evaluateRBF(v[i].xyz, r, P, 3.f); //1.0;\n            vec3 theta = viridis(v[i].w);\n            \n            phiSum += phi;\n            thetaSum += theta * phi;\n        }\n    }\n    \n    // If no particles were in range, return a background field value\n    if (phiSum == 0.0) return vec4(0.0);\n\n    // Return weighted average color \"Θ\" (From Eq. 4) in the XYZ and \n    // the transformed density value (explained at end of sec 3.1.3) in W.\n    return vec4(thetaSum / phiSum, densityMap(phiSum));\n}\n\n\n//-----------------------------------------------------------------------------\n// Utils\n//-----------------------------------------------------------------------------\n\nvec4 over(vec4 a, vec4 b) {\n  vec4 result;\n  result.a = a.a + b.a * (1.f - a.a);\n  if (result.a == 0.f)\n    return a; // avoid NaN\n  result.rgb = (a.rgb * a.a + b.rgb * b.a * (1.f - a.a)) / result.a;\n  return result;\n}\n\nstruct ProjectionResult\n{\n    float area;      // probably all we care about is the area\n    vec2  center;    // but i'm outputing all the information \n    vec2  axisA;     // for debugging and illustration purposes\n    vec2  axisB;\n    // implicit ellipse f(x,y) = a·x² + b·x·y + c·y² + d·x + e·y + f = 0 */\n\tfloat a, b, c, d, e, f; \n};\n\nProjectionResult projectSphere( /* sphere        */ in vec4 sph, \n\t\t\t\t                /* camera matrix */ in mat4 cam,\n\t\t\t\t\t\t\t    /* projection    */ in float fle )\n{\n    // transform to camera space\t\n\tvec3  o = (cam*vec4(sph.xyz,1.0)).xyz;\n\t\n    float r2 = sph.w*sph.w;\n\tfloat z2 = o.z*o.z;\t\n\tfloat l2 = dot(o,o);\n\t\n\tfloat area = -3.141593*fle*fle*r2*sqrt(abs((l2-r2)/(r2-z2)))/(r2-z2);\n\t\n\t//return area;\n\t\n\t\n    //-- debug stuff ---\n\n\t\n\t// axis\n\tvec2 axa = fle*sqrt(-r2*(r2-l2)/((l2-z2)*(r2-z2)*(r2-z2)))*vec2( o.x,o.y);\n\tvec2 axb = fle*sqrt(-r2*(r2-l2)/((l2-z2)*(r2-z2)*(r2-l2)))*vec2(-o.y,o.x);\n\n    //area = length(axa)*length(axb)*3.141593;\t\n\t\n\t// center\n\tvec2  cen = fle*o.z*o.xy/(z2-r2);\n\n\treturn ProjectionResult( area, cen, axa, axb, \n                     /* a */ r2 - o.y*o.y - z2,\n                     /* b */ 2.0*o.x*o.y,\n                     /* c */ r2 - o.x*o.x - z2,\n                     /* d */ 2.0*o.x*o.z*fle,\n                     /* e */ 2.0*o.y*o.z*fle,\n                     /* f */ (r2-l2+z2)*fle*fle );\n\t\n}\n\nfloat iPlane( in vec3 ro, in vec3 rd )\n{\n    return (-1.0 - ro.y)/rd.y;\n}\n\n#define M_2PI 6.2831853071795865f\n#define M_GRC 0.61803398875f\n\n// Vertex positions for the element\n\n//-----------------------------------------------------------------------------\n// Main functions\n//-----------------------------------------------------------------------------\n\nvec4[NUM_PARTICLES] CreateParticles() {\n    float time = iTime;\n    const float angle_offset = M_2PI / 4.0;\n    float speed = 0.2;\n    float dist = .3 + .6 * pow(sin(time * speed * 2.0), 2.0);\n    \n    vec4[NUM_PARTICLES] particles;\n\n    // Borrowed from here : https://www.shadertoy.com/view/MssXDn\n    for(int i=0;i<NUM_PARTICLES;i++)\n\t{\n\t\tfloat t=float(i)/float(NUM_PARTICLES);\n\t\tfloat a=t*M_2PI+iTime*speed;\n\n\t\tvec3 pos=vec3(sin(a)+2.0*sin(2.0*a),cos(a)-2.0*cos(2.0*a),-sin(3.0*a));//*0.01;\n\n\t\tfloat a1=speed*iTime;\n\t\tpos.yz*=mat2(cos(a1),-sin(a1),sin(a1),cos(a1));\n        pos *= dist * .5;\n        \n        //float a2=0.1;\n\t\t//pos.yz*=mat2(cos(a2),-sin(a2),sin(a2),cos(a2))* 2.0;\n        \n        particles[i].xyz = pos;\n        particles[i].w = .5 + .5 * cos(t * M_2PI); //cos(time * .05);\n    }\n    \n    return particles;\n        \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (-iResolution.xy + 2.0*fragCoord.xy) / iResolution.y;\n\t\n\tfloat fov = 2.5;\n\t\n    \n    float an = (iMouse.z > 0.0) ? /*0.25*iTime +*/ 6.283185*iMouse.x/iResolution.x : 0.0;\n\tvec3 ro = vec3( 3.0*cos(an), 0.0, 3.0*sin(an) );\n    vec3 ta = vec3( 0.0, -0.1, 0.0 );\n\tvec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\tvec3 rd = normalize( p.x*uu + p.y*vv + fov*ww );\n\tmat4 cam = mat4( uu.x, uu.y, uu.z, 0.0,\n\t\t\t\t\t vv.x, vv.y, vv.z, 0.0,\n\t\t\t\t\t ww.x, ww.y, ww.z, 0.0,\n\t\t\t\t\t -dot(uu,ro), -dot(vv,ro), -dot(ww,ro), 1.0 );\n    \n    vec2 q = fragCoord.xy / iResolution.xy;\n    vec2 v = -1.0 + 2.0*q;\n    v.x *= iResolution.x/ iResolution.y;\n           \n    \n    // create particles    \n    vec4[NUM_PARTICLES] particles = CreateParticles();\n    \n\tvec4 col = vec4(.0);\n\t\n    float startRayOffset = 0.0f;\n    int frame = iFrame % 64;\n        \n    // blue noise \n    // (inspired by the STBN used in section 3.3.)\n    startRayOffset = texture(iChannel0, fragCoord / 1024.0f).r;\n    startRayOffset = fract(startRayOffset + float(frame) * M_GRC);\n\t\n\t\n\tfloat zMin         = 2.0;\n    float zMax         = 5.0;\n\tfloat step         = (zMax - zMin) / float(NUM_STEPS);\n    vec3 x             = ro + rd * zMin + rd * step * startRayOffset;    \n\tint zer = int(min(iTime, 0.)); // Hack to force loop unrolling.\n    for(int i = zer; i < NUM_STEPS; i++)\n\t{\n        vec4 value = interpolate(x, particles);\n        \n        // Colormapped value and a hardcoded optical density\n        vec3 rgb = value.rgb * EXPOSURE;\n        float density = value.a * DENSITY;\n        float rho = 1.0 - exp(-density * step);\n        col = over(col, vec4(rgb, rho));\n        if (col.a > .95) break;\n\n        x += rd*step;\n\t}\n    \n    \n    float tmin = 1e10;\n    vec3 nor;\n    float occ = 1.0;\n    \n    float t1 = iPlane( ro, rd );\n    //int hitSph = -1;\n    if( t1>0.0 )\n    {\n        tmin = t1;\n        vec3 pos = ro + t1*rd;\n        nor = vec3(0.0,1.0,0.0);\n    }\n    \n    vec3 bgcol = vec3(0.01);\n    vec3 lig = normalize( vec3(0.6,0.3,0.4) );\n    \n    if( tmin<1000.0 )\n    {\n        vec3 pos = ro + tmin*rd;\n\n        bgcol = vec3(1.0);\n        bgcol *= clamp( dot(nor,lig), 0.0, 1.0 );\n        \n        \n        vec4 shadowCol = vec4(0.0);\n        \n        float zMin         = .1;\n        float zMax         = 5.0;\n        float step         = (zMax - zMin) / float(NUM_STEPS);\n        vec3 x             = pos;\n        int zer = int(min(iTime, 0.)); // Hack to force loop unrolling.\n        for(int i = zer; i < NUM_STEPS; i++)\n        {\n            vec4 value = interpolate(x, particles);\n\n            // Colormapped value and a hardcoded optical density\n            vec3 rgb = value.rgb * EXPOSURE;\n            float density = value.a * DENSITY;\n            float rho = 1.0 - exp(-density * step);\n            shadowCol = over(shadowCol, vec4(rgb, rho));\n            if (shadowCol.a > .95) break;\n\n            x += lig*step;\n        }\n        \n        bgcol *= (1.0 - shadowCol.w);        \n        bgcol *= exp( -0.05*tmin ) + vec3(.01);\n        bgcol = max(bgcol, vec3(.01));\n    }\n    \n    //-------------------------------------------------------\n    for( int i=0; i<NUM_PARTICLES; i++ )\n\t{\n        float t = float(i) / float(NUM_PARTICLES);\n        float r = RADIUS * (.5 + .5 * t);\n        vec4 sph = vec4(particles[i].xyz, r); \n        ProjectionResult res = projectSphere( sph, cam, fov );\n        res.area *= iResolution.y*iResolution.y*0.25;\n        if( res.area>0.0 )\n        {\n        \tfloat showMaths = smoothstep( -0.5, 0.5, cos(0.1*6.2831*iTime) );\n            float f = res.a*p.x*p.x + res.b*p.x*p.y + res.c*p.y*p.y + res.d*p.x + res.e*p.y + res.f;\n            vec2  g = 2.0*vec2(res.a,res.c)*p.xy + res.b*p.yx + vec2(res.d,res.e);                   \n            float d = abs(f)/length(g);\n            bgcol.rgb = mix( bgcol.rgb, vec3(1.0,0.0,0.0), showMaths*(1.0-smoothstep(0.00,0.01, d)));\n        }\n    }\n    //-------------------------------------------------------\n    \n         \n    // Composite over a background\n    col = over(col, vec4(bgcol*(1.0-0.2*length(v)), 1.0));\n\n    col.rgb = pow(col.rgb, vec3(1.0/2.2));\n    \n    // cheap dithering\n    col.rgb += sin(fragCoord.x*114.0)*sin(fragCoord.y*211.1)/512.0;\n    \n    \n    \n\n    fragColor = col;\n\n}\n","name":"Image","description":"","type":"image"}]}