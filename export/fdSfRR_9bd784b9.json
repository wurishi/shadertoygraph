{"ver":"0.1","info":{"id":"fdSfRR","date":"1645632495","viewed":129,"name":"Motion illusion","username":"joohwankim","description":"illusion to test effects on motion.","likes":1,"published":1,"flags":16,"usePreview":0,"tags":["illusion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Animated motion. Change motion_direction to change between vertical/horizontal motion.\n// Hold down space bar to enable manual motion (move squares with mouse dragging).\n// Set drawReferenceLines to true to show reference lines.\n\nconst int SPACE = 32;\n\nfloat distanceToSegment( vec2 a, vec2 b, vec2 p )\n{\n\tvec2 pa = p - a, ba = b - a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Parameters\n    float speed = 10.0f;\n    int motion_direction = 0; // 0: vertical, 1: horizontal\n    float motion_size = 0.2;\n    int box_count = 7;\n    vec2 size = vec2(6.0f, 0.5f) * iResolution.x / 400.0f;\n    float background_lum = 0.1f;\n    int motion_mode = 0; // 0: animated, 1: manual\n    vec3 ref_col = vec3(0.8, 0.2, 0.2);\n    float t;\n    float distToFixStart, distToFixEnd;\n    bool drawReferenceLines = false;\n\n    // Mouse related\n    bool isMouseDown = iMouse.z > 0.; // is the button pressed\n    // iMouse.zw values are negative if the mouse button is not pressed.\n    vec2 mouseDragStart = iMouse.zw * (isMouseDown ? vec2(1.0,-1.0) : vec2(-1.0,-1.0));\n    //vec2 mouseDragStart = iMouse.zw;\n    vec2 displacement;\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Blank background\n    vec3 col = vec3(background_lum);\n    \n    // Toggle motion mode based on space press\n    if (texelFetch( iChannel0, ivec2(SPACE,0), 0 ).x > 0.0)\n    {\n        motion_mode = 1; // manual mode if SPACE is pressed\n        displacement = iMouse.xy - mouseDragStart.xy;\n    }\n    else\n    {\n        motion_mode = 0; // animated mode if SPACE unpressed\n    }\n\n    if (motion_mode == 0) // if animated. Support drawing fixation points/lines\n    {\n        t = iTime;\n    }\n    else // if manual\n    {\n        t = 0.0;\n    }\n\n    // Draw reference points/lines\n    if (drawReferenceLines) {\n        float d = distanceToSegment(vec2(0.0, 0.5), vec2(1.0,0.5), uv);\n        if (d < 0.0005) {\n            col = ref_col;\n        }\n        d = distanceToSegment(vec2(0.5, 0.0), vec2(0.5,1.0), uv);\n        if (d < 0.0005) {\n            col = ref_col;\n        }\n    }\n\n    // Draw boxes\n    for(int i = 0; i < box_count; i++)\n    {\n        float lum = mix(1.0, 0.0, float(i)/float(box_count-1));\n        float x, y;\n        \n        // default position\n        if (motion_direction == 0) // vertical motion configuration\n        {\n            y = (iResolution.y * 0.5);\n            x = mix(iResolution.x * 0.3, iResolution.x * 0.7,  float(i)/float(box_count-1));\n        }\n\n        if (motion_direction == 1) // horizontal motion configuration\n        {\n            y = mix(iResolution.y * 0.15, iResolution.y * 0.85,  float(i)/float(box_count-1));\n            x = (iResolution.x * 0.5);\n        }\n        \n        if (motion_mode == 0) // Animated\n        {\n            if (motion_direction == 0) // vertical motion\n            {\n                y += (iResolution.y * 0.35) * sin(t * speed) * motion_size;\n            }\n\n            if (motion_direction == 1) // horizontal motion\n            {\n                x += (iResolution.x * 0.2) * sin(t * speed) * motion_size;\n            }\n        }\n        else if (motion_mode == 1) // Manual\n        {\n            if (isMouseDown){\n                x += displacement.x;\n                y += displacement.y;\n            }\n        }\n\n        if(abs(fragCoord.x - x) < size.x && abs(fragCoord.y - y) < size.y)\n        {\n            col = vec3(lum);\n        }\n        \n    }    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}