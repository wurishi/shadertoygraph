{"ver":"0.1","info":{"id":"MsyyDy","date":"1523134443","viewed":494,"name":"Black and White Blobiscope","username":"chao_mu","description":"A step at making art that doesn't just lead to mixing two video channels.","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["psychedelic","symmetry"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SPEED 0.5\n#define SHAPES 20.\n#define SHARPNESS 2.5\n\n// Multiple the result of this function call to rotate the coordinates by the given angle.\n#define rotate(angle) mat2(cos(angle),-sin(angle), sin(angle),cos(angle));\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // -1 to 1\n    vec2 uv = ( 2.*fragCoord - iResolution.xy ) / iResolution.y;\n    \n    \n    float mask = 0.;\n    for (float i=0.; i < 6.; i += 1.) {\n    \tuv *= rotate(iTime / 10.)\n            \n        float dx = length(uv.x);\n        float dy = length(uv.y);\n\n        mask += sin((dx - (iTime * float(SPEED))) * SHAPES) * SHARPNESS;\n        mask += sin((dy - (iTime * float(SPEED))) * SHAPES / 2.) * SHARPNESS;\n\n    }\n    \n    // Time varying pixel color\n    vec3 col = vec3(mask);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}