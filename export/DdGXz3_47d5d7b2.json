{"ver":"0.1","info":{"id":"DdGXz3","date":"1681351888","viewed":67,"name":"Voronoi dots ","username":"joezen","description":"Fun dot pattern courtesy of chatgpt","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["voronoi"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Calculate the distance between two points\nfloat dist(vec2 a, vec2 b) {\n    return length(a - b);\n}\n\n// Generate a random float value based on the input coordinates\nfloat random(vec2 st) {\n    return fract(sin(dot(st.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\n// Generate a Voronoi pattern\nvec2 voronoi(vec2 uv) {\n    vec2 cell = floor(uv);\n    vec2 fractional = fract(uv);\n    float minDist = 1.0;\n    vec2 closest;\n    for (int x = -1; x <= 1; x++) {\n        for (int y = -1; y <= 1; y++) {\n            vec2 offset = vec2(float(x), float(y));\n            vec2 candidate = cell + offset + random(offset + cell);\n            float dist = length(candidate - uv);\n            if (dist < minDist) {\n                minDist = dist;\n                closest = candidate;\n            }\n        }\n    }\n    return closest;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.y;\n    \n    // Scale the Voronoi pattern\n    uv *= 16.0;\n    \n    // Time varying parameter\n    float t = iTime * 0.5;\n    \n    // Get the Voronoi pattern\n    vec2 pattern = voronoi(uv);\n    \n    // Calculate the distance to the nearest cell\n    float distToCell = dist(uv, pattern);\n    \n    // Color the Voronoi pattern using a color gradient\n    vec3 colorA = vec3(0.1, 0.5, 0.8);\n    vec3 colorB = vec3(0.8, 0.1, 0.5);\n    vec3 colorC = vec3(0.1, 0.8, 0.5);\n    \n    vec3 color = mix(colorA, colorB, smoothstep(0.0, 0.1, distToCell));\n    color = mix(color, colorC, smoothstep(0.1, 0.2, distToCell));\n    \n    // Apply a time-varying color shift\n    color *= vec3(0.5 * sin(t) + 0.5, 0.5 * sin(t + 2.0) + 0.5, 0.5 * sin(t + 4.0) + 0.5);\n    \n    // Output the final color\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}