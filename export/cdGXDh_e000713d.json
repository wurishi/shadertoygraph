{"ver":"0.1","info":{"id":"cdGXDh","date":"1680984504","viewed":93,"name":"Spectrum Rays","username":"joezen","description":"ðŸ’¿ðŸ’¿ðŸ’¿ðŸ’¿ðŸ’¿ðŸ’¿ðŸ’¿ ","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["gradient"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalize the pixel coordinates (0.0 - 1.0)\n    vec2 uv = fragCoord / iResolution.xy;\n\n    // Center the coordinates\n    uv = uv * .850 - 1.0;\n\n    // Aspect ratio correction\n    uv.x *= iResolution.x / iResolution.y;\n\n    // Rotate the coordinates based on time\n    float rotationSpeed = .15;\n    float angleOffset = iTime * rotationSpeed;\n    mat2 rotationMatrix = mat2(cos(angleOffset), -sin(angleOffset), sin(angleOffset), cos(angleOffset));\n    uv = rotationMatrix * uv;\n\n    // Polar coordinates\n    float angle = atan(uv.y, uv.x);\n    float radius = length(uv);\n\n    // Animate the grooves\n    float tunnelLength = .025;\n    float timeOffset = iTime * 0.025;\n    float z = mod(radius + timeOffset, tunnelLength);\n\n    // Create color based on the distance and angle\n    vec3 color = vec3(.5 * sin(angle * 5.0) + 0.5, 0.5 * cos(angle * 5.0) + 0.5, z / tunnelLength);\n\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}