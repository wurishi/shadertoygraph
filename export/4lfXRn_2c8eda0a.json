{"ver":"0.1","info":{"id":"4lfXRn","date":"1433873731","viewed":163,"name":"Box Frames 2","username":"Justaway","description":"Box frames with cubemap background.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"mat3 rotX(float a);\nmat3 rotY(float a);\nmat3 rotZ(float a);\nmat3 rot(vec3 z,float a);\nfloat dist(vec3 p);\nvec3 normal(vec3 p);\nvec3 myRefract(vec3 i, vec3 n, float r);\n\nmat3 rotX(float a)\n{\n\tfloat c=cos(a);\n\tfloat s=sin(a);\n\treturn mat3(1.0,0.0,0.0,0.0,c,-s,0.0,s,c);\n}\n\nmat3 rotY(float a)\n{\n\tfloat c=cos(a);\n\tfloat s=sin(a);\n\treturn mat3(c,0.0,s,0.0,1.0,0.0,-s,0.0,c);\n}\n\nmat3 rotZ(float a)\n{\n\tfloat c=cos(a);\n\tfloat s=sin(a);\n\treturn mat3(c,-s,0.0,s,c,0.0,0.0,0.0,1.0);\n}\n\nmat3 rot(vec3 z,float a)\n{\n\tfloat c=cos(a);\n\tfloat s=sin(a);\n\tfloat ic=1.0-c;\n\treturn mat3(\n\t\tic*z.x*z.x+c,ic*z.x*z.y-z.z*s,ic*z.z*z.x+z.y*s,\n\t\tic*z.x*z.y+z.z*s,ic*z.y*z.y+c,ic*z.y*z.z-z.x*s,\n\t\tic*z.z*z.x-z.y*s,ic*z.y*z.z+z.x*s,ic*z.z*z.z+c);\n}\n\nfloat dist(vec3 p)\n{\n    float r,r2,d1,d2;\n    float d = 100.0;\n    vec3 pt;\n    \n    r = 0.2;\n    r2 = 0.2;\n    \n    for(int i = 0; i < 5; i++)\n    {\n        pt = rotX(iTime/float(i))*p;\n        pt *= rotZ(iTime/float(i));\n        d1 = max(abs(pt.x),max(abs(pt.y),abs(pt.z))) - r;\n        d2 = max(abs(pt.x),abs(pt.y))-r+r2;\n        d2 = min(d2,max(abs(pt.y),abs(pt.z))-r+r2);\n        d2 = min(d2,max(abs(pt.z),abs(pt.x))-r+r2);\n        d = min(d,max(d1,-d2));\n        r += 0.3;\n    }\n    \n    return d;\n}\n\nvec3 normal(vec3 p, float d)\n{\n    vec3 s=vec3(0.1,0.0,0.0);\n    return normalize(vec3(\n        dist(p+s.xyy-d),\n        dist(p+s.yxy-d),\n        dist(p+s.yyx-d)));\n}\n\nvec3 myRefract(vec3 i, vec3 n, vec3 r)\n{\n    float d = abs(dot(i,n));\n    return normalize(i+n*abs(dot(i,n))*0.1);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    /*screen coordinates (sc)*/\n\tvec2 sc = vec2(fragCoord.x-0.5*iResolution.x,fragCoord.y-0.5*iResolution.y);\n    sc /= iResolution.xy;\n    sc.x *= iResolution.x/iResolution.y;\n    \n    /*calculate vectors for raymarching*/\n    vec3 upVec = vec3(0.0,-1.0,0.0);/*up vector is on y-axis*/\n    vec3 lookPos = vec3(0.0,0.0,0.0); /*eye looking at origin*/\n    vec3 eyePos = vec3(0.0,0.0,-5.0); /*eye offset on z-axis*/\n    \n    /*animate camera*/\n    eyePos *= rotX(sin(0.1*iTime));\n    eyePos *= rotY(sin(0.2*iTime));\n    \n    vec3 rayVec = normalize(lookPos - eyePos); /*direction of ray*/\n    \n    /*calculate a vector pointing directly to the left of the eye*/\n    vec3 leftVec = normalize(cross(upVec,rayVec));\n    /*calculate the up for the eye*/\n    vec3 eyeUpVec = normalize(cross(rayVec,leftVec));\n    \n    rayVec *= rot(eyeUpVec,sc.x*0.8);\n    rayVec *= rot(leftVec,sc.y*0.8);\n    \n    /*march ray*/\n    float d;\n    float marchLen;\n    vec3 rayPos = eyePos;\n    float attenuation = 0.95;\n    vec4 color = vec4(0.95,1.0,0.95,1.0);\n    bool hit = false;\n    for(int i = 0; i < 50; i++)\n    {\n        d = dist(rayPos);\n        if(d < 0.0 && hit == false)\n        {\n            hit = true;\n            vec3 n = normal(rayPos, d);\n            rayVec = refract(rayVec, n, 1.0/1.5);\n            attenuation *= abs(dot(rayVec,n));\n        }\n        else if(d > 0.0 && hit == true)\n        {\n            hit = false;\n            vec3 n = normal(rayPos, d);\n            rayVec = refract(rayVec, -n, 1.0/1.5);\n            attenuation *= abs(dot(rayVec,n));\n        }\n        marchLen = max(0.001,abs(d));\n        rayPos += rayVec*marchLen;\n    }\n    \n    \n\tfragColor = texture(iChannel0,rayVec)*attenuation;\n\n}","name":"","description":"","type":"image"}]}