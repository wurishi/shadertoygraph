{"ver":"0.1","info":{"id":"stsXRB","date":"1626005473","viewed":141,"name":"Marching Bands","username":"Taron","description":"Sampling into a noise volume can yield rather beautiful mistakes...\nUse Mouse to look around!","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","bad","fractalnoise","volumn","lousy"],"hasliked":0,"parentid":"NtfXRB","parentname":"Blobby Cavern"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define OCT 2\n#define DEPTH 8.\nfloat hash(vec3 p)\n{\n\tp  = fract(p * .1337);\n    p += dot(p, p.zyx + 37.36);\n    return fract((p.x + p.y) * p.z);\n}\nfloat noise(in vec3 p) {\n    vec3 i = floor(p);\n    vec3 f = fract(p);  \n    vec3 u = smoothstep(0.,1.,f);\n    \n    vec2 oo = vec2(1.,0.);\n    \n    return mix(mix(mix(hash(i+oo.yyy),hash(i+oo.xyy),u.x),\n                   mix(hash(i+oo.yxy),hash(i+oo.xxy),u.x),u.y),\n               mix(mix(hash(i+oo.yyx),hash(i+oo.xyx),u.x),\n                   mix(hash(i+oo.yxx),hash(i+oo.xxx),u.x),u.y),u.z);\n}\n\nfloat turb(vec3 p, float noiseThreshold, float noiseSoftness, int oct, float dist)\n{\n    float r = 0.0,\n          w = 1.0, \n          s = 1.0,\n          d = 0.0;\n    for (int i=0; i<oct; i++)\n    {\n         r += w * noise(p);\n         d += w;\n         w *= 0.573;\n         p *= 1.677;\n     }\n    r = abs(-1.+2.*r/d);\n    return smoothstep(noiseThreshold,noiseSoftness+noiseThreshold,r)+(.1-dist);\n}\n\nfloat march(vec3 cp, vec3 cd){\n\tfloat dp=.25;\n    vec3 sp = cd*dp;\n    vec3 p = cp+sp;\n    float d = 1.;\n    float r = 1.;\n    int cnt = 0;\n    while(cnt<20 && d<DEPTH){\n        r = turb(p, .001, .125, OCT, min(.1,d-1.));\n        d +=r*dp+.1;\n        p +=r*sp+.1;\n        if(r<0.01){\n            d+=r/0.01 *2.;\n            break;\n        }\n\n        cnt++;\n    } \n    return d;\n}\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fC )\n{\n    vec2 uv = (fC.xy - iResolution.xy*.5)/iResolution.y;\n    vec2 ms = iMouse.xy/iResolution.xy * 6.28;\n\n    vec3 camera = vec3(0.);\n    vec3 target = vec3(uv*(.5+.5*dot(uv,uv)),.25);\n    target.yz *= Rot(-ms.y+sin(iTime*.25));\n    target.xy *= Rot(-ms.x+cos(iTime*.5));\n     \n    vec3 cdir = normalize(camera-target);\n   \n    vec3 p = camera-vec3(0.,0.,iTime*.25);\n    \n    float slow = iTime*.25;\n    vec3 kal = vec3(sin(slow+3.14),sin(slow*.91+1.95),sin(slow*.87+.45));\n    vec3 col = mix(vec3(1.85*turb(target, .417, .02, OCT+1,.1)),.5+.5*kal,march(p,cdir)/DEPTH*1.5);\n\n    col *=mix(vec3(1.),vec3(.75,.15,.01), dot(uv, uv));\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}