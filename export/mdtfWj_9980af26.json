{"ver":"0.1","info":{"id":"mdtfWj","date":"1697680494","viewed":60,"name":"Schrodinger Equation Simulatior","username":"Lexxaro","description":"Simulates 1D quantum particle according to the SchrÃ¶dinger equation.\n The top part is a graph of the pdf of the particle's position with hue being the phase, whereas the bottom part displays the potential function.\nSadly it's pretty unstable.","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["simulation","1d","physics","quantum","numerical","schrodinger"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.14159265359f;\n\n// Smooth HSV to RGB conversion\nvec3 hsv2rgb_smooth(vec3 c) {\n    vec3 rgb = clamp(abs(mod(c.x * 6.0f + vec3(0.0f, 4.0f, 2.0f), 6.0f) - 3.0f) - 1.0f, 0.0f, 1.0f);\n\trgb = rgb * rgb * (3.0f - 2.0f * rgb); // cubic smoothing\t\n\treturn c.z * mix( vec3(1.0f), rgb, c.y);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 psi = texture(iChannel0, uv).xy;\n    \n    float pdf = psi.x * psi.x + psi.y * psi.y;\n    \n    float constraint_potential = texture(iChannel0, uv).z;\n    \n    vec3 color;\n    if (uv.y > 0.2f) {\n        if (5.0f * (uv.y - 0.2f) < pdf) {\n        float hue = atan(psi.y, psi.x) / (2.0f * PI);\n        color = hsv2rgb_smooth(vec3(hue, 1.0f, 1.0f));\n        }\n    }\n    else {\n        if (5000.0f * (uv.y) < constraint_potential) {\n        color = vec3(1.0f);\n        }     \n    }\n    fragColor = vec4(color, 1.0f);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float PI = 3.14159265359f;\nconst float hbar = 1.0f; //1.0545718176461565e-34f;\n\nconst float x_min = 0.0f;\nconst float x_max = 10.0f;\n    \nconst float particle_mass = 1.0f;\nconst float sim_speed = 0.001f;\n\nfloat potential_func(float x) {\n    //return 0.5f * 4.0f * PI * PI * particle_mass * pow((x - 5.0f), 2.0f);\n    return (x > 6.0f && x < 6.5f) ? 1080.0f : 0.0f;\n}\n\n\nvec2 complex_mult(vec2 a, vec2 b) {\n    float real = a.x * b.x - a.y * b.y;\n    float imag = a.x * b.y + a.y * b.x;\n    return vec2(real, imag);\n}\n\nvec2 complex_exp(vec2 complex) {\n    float real = cos(complex.y);\n    float imag = sin(complex.y);\n    return exp(complex.x) * vec2(real, imag);\n}\n\nvec2 gaussian_wave_packet(float x, float center, float width, float wavenumber) {\n    float a = sqrt(1.0f / (width * sqrt(PI)));\n    float b = x - center;\n    float c = exp(-b * b / (2.0f * width * width));\n    vec2 d = complex_exp(vec2(0.0f, wavenumber * x));\n    return a * c * d;\n}\n\nvec2 RHS_schrodinger(vec2 psi_left, vec2 psi, vec2 psi_right, float dx, float mass, float constraint_pot) {\n    float a = 0.5f * hbar / (mass * dx * dx);\n    vec2 b = (1.0f * psi_left - 2.0f * psi + 1.0f * psi_right);\n    vec2 c = constraint_pot * psi / hbar;\n    return complex_mult(vec2(0, 1), (a * b - c));\n}\n\nvec2 sim_step(float dt, vec2 psi_left, vec2 psi, vec2 psi_right, float dx, float mass, float constraint_pot) {\n    // Runge-Kutta algorithm (rk6)\n    vec2 k1 = dt * RHS_schrodinger(\n    psi_left, \n    psi, \n    psi_right, \n    dx, mass, constraint_pot);\n    \n    vec2 add2 = 1.0f/3.0f * k1;\n    vec2 k2 = dt * RHS_schrodinger(\n    psi_left + add2, \n    psi + add2, \n    psi_right + add2, \n    dx, mass, constraint_pot);\n    \n    vec2 add3 = 2.0f/3.0f * k2;\n    vec2 k3 = dt * RHS_schrodinger(\n    psi_left + add3, \n    psi + add3, \n    psi_right + add3, \n    dx, mass, constraint_pot);\n      \n    vec2 add4 = 1.0f/12.0f*k1 + 1.0f/3.0f*k2 - 1.0f/12.0f*k3;\n    vec2 k4 = dt * RHS_schrodinger(\n    psi_left + add4, \n    psi + add4, \n    psi_right + add4, \n    dx, mass, constraint_pot);\n    \n    vec2 add5 = -1.0f/16.0f*k1 + 9.0f/8.0f*k2 - 3.0f/16.0f*k3 - 3.0f/8.0f*k4;\n    vec2 k5 = dt * RHS_schrodinger(\n    psi_left + add5, \n    psi + add5, \n    psi_right + add5, \n    dx, mass, constraint_pot);\n    \n    vec2 add6 = 9.0f/8.0f*k2 - 3.0f/8.0f*k3 - 3.0f/4.0f*k4 + 0.5f*k5;\n    vec2 k6 = dt * RHS_schrodinger(\n    psi_left + add5, \n    psi + add5, \n    psi_right + add5, \n    dx, mass, constraint_pot);\n    \n    vec2 add7 = 9.0f/44.0f*k1 - 9.0f/11.0f*k2 + 63.0f/44.0f*k3 + 18.0f/11.0f*k4 - 16.0f/11.0f*k6;\n    vec2 k7 = dt * RHS_schrodinger(\n    psi_left + add5, \n    psi + add5, \n    psi_right + add5, \n    dx, mass, constraint_pot);\n\n    vec2 k = (11.0f*(k1 + k7) + 81.0f*(k3 + k4) - 32.0f*(k5 + k6)) / 120.0;\n        \n    return psi + k;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 uv_dx = vec2(1.61803398875f, 0) / iResolution.xy;\n    \n    vec2 sim_coords = uv;\n    sim_coords.x = sim_coords.x * (x_max - x_min) + x_min;\n    float sim_dx = (x_max - x_min) * uv_dx.x;\n    \n    float constraint_potential = potential_func(sim_coords.x);\n   \n    vec2 psi;\n    if (iFrame == 0) {\n        psi = gaussian_wave_packet(sim_coords.x, 4.2f, 0.7f, 50.0f);\n    }\n    else {\n        float sim_dt = iTimeDelta * sim_speed / 5.0f;\n        \n        vec2 psi_0_lllll = texture(iChannel0, uv - 5.0f * uv_dx).xy;\n        vec2 psi_0_llll = texture(iChannel0, uv - 4.0f * uv_dx).xy;\n        vec2 psi_0_lll = texture(iChannel0, uv - 3.0f * uv_dx).xy;\n        vec2 psi_0_ll = texture(iChannel0, uv - 2.0f * uv_dx).xy;\n        vec2 psi_0_l = texture(iChannel0, uv - uv_dx).xy;\n        vec2 psi_0 = texture(iChannel0, uv).xy;\n        vec2 psi_0_r = texture(iChannel0, uv + uv_dx).xy;\n        vec2 psi_0_rr = texture(iChannel0, uv + 2.0f * uv_dx).xy;\n        vec2 psi_0_rrr = texture(iChannel0, uv + 3.0f * uv_dx).xy;\n        vec2 psi_0_rrrr = texture(iChannel0, uv + 4.0f * uv_dx).xy;\n        vec2 psi_0_rrrrr = texture(iChannel0, uv + 5.0f * uv_dx).xy;\n        \n        vec2 psi_1_llll = sim_step(sim_dt, \n        psi_0_lllll, psi_0_llll, psi_0_lll, \n        sim_dx, particle_mass, constraint_potential);\n        vec2 psi_1_lll = sim_step(sim_dt, \n        psi_0_llll, psi_0_lll, psi_0_ll, \n        sim_dx, particle_mass, constraint_potential);\n        vec2 psi_1_ll = sim_step(sim_dt, \n        psi_0_lll, psi_0_ll, psi_0_l, \n        sim_dx, particle_mass, constraint_potential);\n        vec2 psi_1_l = sim_step(sim_dt, \n        psi_0_ll, psi_0_l, psi_0, \n        sim_dx, particle_mass, constraint_potential);\n        vec2 psi_1 = sim_step(sim_dt, \n        psi_0_l, psi_0, psi_0_r, \n        sim_dx, particle_mass, constraint_potential);\n        vec2 psi_1_r = sim_step(sim_dt, \n        psi_0, psi_0_r, psi_0_rr, \n        sim_dx, particle_mass, constraint_potential);\n        vec2 psi_1_rr = sim_step(sim_dt, \n        psi_0_r, psi_0_rr, psi_0_rrr, \n        sim_dx, particle_mass, constraint_potential);\n        vec2 psi_1_rrr = sim_step(sim_dt, \n        psi_0_rr, psi_0_rrr, psi_0_rrrr, \n        sim_dx, particle_mass, constraint_potential);\n        vec2 psi_1_rrrr = sim_step(sim_dt, \n        psi_0_rrr, psi_0_rrrr, psi_0_rrrrr, \n        sim_dx, particle_mass, constraint_potential);\n        \n        vec2 psi_2_lll = sim_step(sim_dt, \n        psi_1_llll, psi_1_lll, psi_1_ll, \n        sim_dx, particle_mass, constraint_potential);\n        vec2 psi_2_ll = sim_step(sim_dt, \n        psi_1_lll, psi_1_ll, psi_1_l, \n        sim_dx, particle_mass, constraint_potential);\n        vec2 psi_2_l = sim_step(sim_dt, \n        psi_1_ll, psi_1_l, psi_1, \n        sim_dx, particle_mass, constraint_potential);\n        vec2 psi_2 = sim_step(sim_dt, \n        psi_1_l, psi_1, psi_1_r, \n        sim_dx, particle_mass, constraint_potential);\n        vec2 psi_2_r = sim_step(sim_dt, \n        psi_1, psi_1_r, psi_1_rr, \n        sim_dx, particle_mass, constraint_potential);\n        vec2 psi_2_rr = sim_step(sim_dt, \n        psi_1_r, psi_1_rr, psi_1_rrr, \n        sim_dx, particle_mass, constraint_potential);\n        vec2 psi_2_rrr = sim_step(sim_dt, \n        psi_1_rr, psi_1_rrr, psi_1_rrrr, \n        sim_dx, particle_mass, constraint_potential);\n        \n        vec2 psi_3_ll = sim_step(sim_dt, \n        psi_2_lll, psi_2_ll, psi_2_l, \n        sim_dx, particle_mass, constraint_potential);\n        vec2 psi_3_l = sim_step(sim_dt, \n        psi_2_ll, psi_2_l, psi_2, \n        sim_dx, particle_mass, constraint_potential);\n        vec2 psi_3 = sim_step(sim_dt, \n        psi_2_l, psi_2, psi_2_r, \n        sim_dx, particle_mass, constraint_potential);\n        vec2 psi_3_r = sim_step(sim_dt, \n        psi_2, psi_2_r, psi_2_rr, \n        sim_dx, particle_mass, constraint_potential);\n        vec2 psi_3_rr = sim_step(sim_dt, \n        psi_2_r, psi_2_rr, psi_2_rrr, \n        sim_dx, particle_mass, constraint_potential);\n        \n        vec2 psi_4_l = sim_step(sim_dt, \n        psi_3_ll, psi_3_l, psi_3, \n        sim_dx, particle_mass, constraint_potential);\n        vec2 psi_4 = sim_step(sim_dt, \n        psi_3_l, psi_3, psi_3_r, \n        sim_dx, particle_mass, constraint_potential);\n        vec2 psi_4_r = sim_step(sim_dt, \n        psi_3, psi_3_r, psi_3_rr, \n        sim_dx, particle_mass, constraint_potential);\n        \n        psi = sim_step(sim_dt, \n        psi_4_l, psi_4, psi_4_r, \n        sim_dx, particle_mass, constraint_potential);\n    }\n    \n    fragColor = vec4(psi, constraint_potential, 1.0f);\n}","name":"Buffer A","description":"","type":"buffer"}]}