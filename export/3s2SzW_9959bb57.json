{"ver":"0.1","info":{"id":"3s2SzW","date":"1553092663","viewed":663,"name":"Simple Page Peel Effect","username":"droozle","description":"Quick'n'dirty page peeling effect. Not meant to impress, so be gentle.","likes":19,"published":1,"flags":0,"usePreview":1,"tags":["2d","page","turn","peel"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 aspect = vec2( iResolution.x / iResolution.y, 1.0 );\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Define the fold.\n    vec2 origin = vec2( 0.6 + 0.4 * sin( iTime * 0.2 ), 0.5 + 0.5 * cos( iTime * 0.13 ) ) * aspect;\n    vec2 normal = normalize( vec2( 1.0, 2.0 * sin( iTime * 0.3 ) ) * aspect );\n\n    // Sample texture.\n    vec3 col = texture( iChannel0, uv ).rgb; // Front color.\n    \n    // Check on which side the pixel lies.\n    vec2 pt = uv * aspect - origin;\n    float side = dot( pt, normal );\n    if( side > 0.0 ) {\n        col *= 0.25; // Background color (peeled off).        \n            \n        float shadow = smoothstep( 0.0, 0.05, side );\n        col = mix( col * 0.6, col, shadow );\n    }\n    else {\n        // Find the mirror pixel.\n        pt = ( uv * aspect - 2.0 * side * normal ) / aspect;\n        \n        // Check if we're still inside the image bounds.\n        if( pt.x >= 0.0 && pt.x < 1.0 && pt.y >= 0.0 && pt.y < 1.0 ) {\n            vec4 back = texture( iChannel0, pt ); // Back color.\n            back.rgb = back.rgb * 0.25 + 0.75;\n            \n            float shadow = smoothstep( 0.0, 0.2, -side );\n            back.rgb = mix( back.rgb * 0.2, back.rgb, shadow );\n            \n            // Support for transparency.\n            col = mix( col, back.rgb, back.a );\n        }\n    }\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}