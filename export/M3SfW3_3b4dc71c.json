{"ver":"0.1","info":{"id":"M3SfW3","date":"1729988262","viewed":58,"name":"Kernels for circular bokeh blur","username":"Gariam","description":"Pre-computed kernels with varying number of points.\nEvenly distributed in a -1, 1 range.\n\nI'm putting them here for ease of access.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["blur","circle","bokeh","kernel","samples","precomputed"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//16, 22, 25, 43, 49, 71\n#define kernelSize 25\n\n#if kernelSize == 71\n#define KERNEL vec2(0.0,0.0),vec2(0.2758621,0.0),vec2(0.1719972,0.21567768),vec2(-0.061385095,0.26894566),vec2(-0.24854316,0.1196921),vec2(-0.24854316,-0.11969208),vec2(-0.061384983,-0.2689457),vec2(0.17199717,-0.21567771),vec2(0.51724136,0),vec2(0.46601835,0.22442262),vec2(0.32249472,0.40439558),vec2(0.11509705,0.50427306),vec2(-0.11509704,0.50427306),vec2(-0.3224948,0.40439552),vec2(-0.46601835,0.22442265),vec2(-0.51724136,0.0),vec2(-0.46601835,-0.22442262),vec2(-0.32249463,-0.40439564),vec2(-0.11509683,-0.5042731),vec2(0.11509732,-0.504273),vec2(0.32249466,-0.40439564),vec2(0.46601835,-0.22442262),vec2(0.7586207,0.0),vec2(0.7249173,0.22360738),vec2(0.6268018,0.4273463),vec2(0.47299224,0.59311354),vec2(0.27715522,0.7061801),vec2(0.056691725,0.75649947),vec2(-0.168809,0.7396005),vec2(-0.3793104,0.65698475),vec2(-0.55610836,0.51599306),vec2(-0.6834936,0.32915324),vec2(-0.7501475,0.113066405),vec2(-0.7501475,-0.11306671),vec2(-0.6834936,-0.32915318),vec2(-0.5561083,-0.5159932),vec2(-0.37931028,-0.6569848),vec2(-0.16880904,-0.7396005),vec2(0.056691945,-0.7564994),vec2(0.2771556,-0.7061799),vec2(0.47299215,-0.59311366),vec2(0.62680185,-0.4273462),vec2(0.72491735,-0.22360711),vec2(1.0,0.0),vec2(0.9749279,0.22252093),vec2(0.90096885,0.43388376),vec2(0.7818315,0.6234898),vec2(0.6234898,0.7818315),vec2(0.43388364,0.9009689),vec2(0.22252098,0.9749279),vec2(0.0,1.0),vec2(-0.22252095,0.9749279),vec2(-0.43388385,0.90096885),vec2(-0.62349,0.7818314),vec2(-0.7818317,0.62348956),vec2(-0.90096885,0.43388382),vec2(-0.9749279,0.22252093),vec2(-1.0,0.0),vec2(-0.9749279,-0.22252087),vec2(-0.90096885,-0.43388376),vec2(-0.7818314,-0.6234899),vec2(-0.6234896,-0.7818316),vec2(-0.43388346,-0.900969),vec2(-0.22252055,-0.974928),vec2(0.0,-1.0),vec2(0.2225215,-0.9749278),vec2(0.4338835,-0.90096897),vec2(0.6234897,-0.7818316),vec2(0.78183144,-0.62348986),vec2(0.90096885,-0.43388376),vec2(0.9749279,-0.22252086)\n#elif kernelSize == 49\n#define KERNEL vec2(0.0,0.0),vec2(0.3636364,0.0),vec2(0.6818182,0.0),vec2(1.0,0.0),vec2(-0.3636364,0.0),vec2(-0.6818182,0.0),vec2(-1.0,0.0),vec2(0.0,0.3636364),vec2(0.0,0.6818182),vec2(0.0,1.0),vec2(0.0,-0.3636364),vec2(0.0,-0.6818182),vec2(0.0,-1.0),vec2(0.2571297,0.2571297),vec2(-0.2571297,0.2571297),vec2(0.2571297,-0.2571297),vec2(-0.2571297,-0.2571297),vec2(0.4821183,0.4821183),vec2(-0.4821183,0.4821183),vec2(0.4821183,-0.4821183),vec2(-0.4821183,-0.4821183),vec2(0.7071068,0.7071068),vec2(-0.7071068,0.7071068),vec2(0.7071068,-0.7071068),vec2(-0.7071068,-0.7071068),vec2(0.2609205,0.6299179),vec2(-0.2609205,0.6299179),vec2(0.2609205,-0.6299179),vec2(-0.2609205,-0.6299179),vec2(0.6299179,0.2609205),vec2(-0.6299179,0.2609205),vec2(0.6299179,-0.2609205),vec2(-0.6299179,-0.2609205),vec2(0.9659258,0.258819),vec2(-0.9659258,0.258819),vec2(0.9659258,-0.258819),vec2(-0.9659258,-0.258819),vec2(0.258819,0.9659258),vec2(-0.258819,0.9659258),vec2(0.258819,-0.9659258),vec2(-0.258819,-0.9659258),vec2(0.5,0.8660253),vec2(-0.5,0.8660253),vec2(0.5,-0.8660253),vec2(-0.5,-0.8660253),vec2(0.8660253,0.5),vec2(-0.8660253,0.5),vec2(0.8660253,-0.5),vec2(-0.8660253,-0.5)\n#elif kernelSize == 43\n#define KERNEL vec2(0.0,0.0),vec2(0.36363637,0.0),vec2(0.22672357,0.28430238),vec2(-0.08091671,0.35451925),vec2(-0.32762504,0.15777594),vec2(-0.32762504,-0.15777591),vec2(-0.08091656,-0.35451928),vec2(0.22672352,-0.2843024),vec2(0.6818182,0),vec2(0.614297,0.29582983),vec2(0.42510667,0.5330669),vec2(0.15171885,0.6647236),vec2(-0.15171883,0.6647236),vec2(-0.4251068,0.53306687),vec2(-0.614297,0.29582986),vec2(-0.6818182,0.0),vec2(-0.614297,-0.29582983),vec2(-0.42510656,-0.53306705),vec2(-0.15171856,-0.66472363),vec2(0.1517192,-0.6647235),vec2(0.4251066,-0.53306705),vec2(0.614297,-0.29582983),vec2(1.0,0.0),vec2(0.9555728,0.2947552),vec2(0.82623875,0.5633201),vec2(0.6234898,0.7818315),vec2(0.36534098,0.93087375),vec2(0.07473,0.9972038),vec2(-0.22252095,0.9749279),vec2(-0.50000006,0.8660254),vec2(-0.73305196,0.6801727),vec2(-0.90096885,0.43388382),vec2(-0.98883086,0.14904208),vec2(-0.9888308,-0.14904249),vec2(-0.90096885,-0.43388376),vec2(-0.73305184,-0.6801728),vec2(-0.4999999,-0.86602545),vec2(-0.222521,-0.9749279),vec2(0.07473029,-0.99720377),vec2(0.36534148,-0.9308736),vec2(0.6234897,-0.7818316),vec2(0.8262388,-0.56332),vec2(0.9555729,-0.29475483)\n#elif kernelSize == 25\n#define KERNEL vec2(0.0,0.0),vec2(0.53535,0.0),vec2(1.0,0.0),vec2(-0.53535,0.0),vec2(-1.0,0.0),vec2(0.0,0.53535),vec2(0.0,1.0),vec2(0.0,-0.53535),vec2(0.0,-1.0),vec2(0.3785496,0.3785496),vec2(-0.3785496,0.3785496),vec2(0.3785496,-0.3785496),vec2(-0.3785496,-0.3785496),vec2(0.7071068,0.7071068),vec2(-0.7071068,0.7071068),vec2(0.7071068,-0.7071068),vec2(-0.7071068,-0.7071068),vec2(0.9238796,0.3826832),vec2(-0.9238796,0.3826832),vec2(0.9238796,-0.3826832),vec2(-0.9238796,-0.3826832),vec2(0.3826832,0.9238796),vec2(-0.3826832,0.9238796),vec2(0.3826832,-0.9238796),vec2(-0.3826832,-0.9238796)\n#elif kernelSize == 22\n#define KERNEL vec2(0.0,0.0),vec2(0.53333336,0.0),vec2(0.3325279,0.4169768),vec2(-0.11867785,0.5199616),vec2(-0.48051673,0.2314047),vec2(-0.48051673,-0.23140468),vec2(-0.11867763,-0.51996166),vec2(0.33252785,-0.4169769),vec2(1.0,0.0),vec2(0.90096885,0.43388376),vec2(0.6234898,0.7818315),vec2(0.22252098,0.9749279),vec2(-0.22252095,0.9749279),vec2(-0.62349,0.7818314),vec2(-0.90096885,0.43388382),vec2(-1.0,0.0),vec2(-0.90096885,-0.43388376),vec2(-0.6234896,-0.7818316),vec2(-0.22252055,-0.974928),vec2(0.2225215,-0.9749278),vec2(0.6234897,-0.7818316),vec2(0.90096885,-0.43388376)\n#elif kernelSize == 16\n#define KERNEL vec2(0.0,0.0),vec2(0.54545456,0.0),vec2(0.16855472,0.5187581),vec2(-0.44128203,0.3206101),vec2(-0.44128197,-0.3206102),vec2(0.1685548,-0.5187581),vec2(1.0,0.0),vec2(0.809017,0.58778524),vec2(0.30901697,0.95105654),vec2(-0.30901703,0.9510565),vec2(-0.80901706,0.5877852),vec2(-1.0,0.0),vec2(-0.80901694,-0.58778536),vec2(-0.30901664,-0.9510566),vec2(0.30901712,-0.9510565),vec2(0.80901694,-0.5877853)\n#endif\n\nconst vec2 kernel[] = vec2[](KERNEL);\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    float pixelSize = 3.0 / iResolution.y;\n    vec2 uv = vec2((fragCoord.x - 0.5 * iResolution.x) * pixelSize, fragCoord.y * pixelSize - 1.5);\n    \n    vec3 col = vec3(0.0);\n    vec2 dif;\n    for (int i = 0; i < kernelSize; i++){\n        dif = uv - kernel[i];\n        col.rgb += smoothstep(0.0, pixelSize, 0.007 - dot(dif, dif));\n    }\n\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}