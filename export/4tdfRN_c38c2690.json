{"ver":"0.1","info":{"id":"4tdfRN","date":"1538838134","viewed":79,"name":"Nature Project-Tree","username":"cake7914","description":"A gnarled tree that opens and closes trunk + cool pulsing leaves ","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["trees"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define repeat(v, r) (mod(v, r)-r/2.) //easy repeat function\n\nstruct Shape{\n  float dist;\n  vec4 color;\n};\n\n\n    \n//=======================\n// Utility Functions\n//=======================\nfloat random(vec2 v) { //gets a \"random\" value\n  return fract(sin(dot(v*0.1, vec2(324.654, 156.546)))*46556.2);\n}\n\nmat2 rot(float a){ // rotate function\n  float r = cos(a);\n  float f = sin(a);\n  return mat2(r, f, -f, r);\n}\n\n\nfloat pole(vec2 v, float r){ //draws a pole\n  return length(v)-r;\n}\nfloat sphere(vec3 v, float r){ //draws a sphere\n  return length(v)-r;\n}\nfloat box(vec3 v, float r, float m) { //draws a box\n  return max(length(v.xy)-r, abs(v.z)-m);\n}\n\n\n\nfloat mixColors(float r, float v, float z){ //mixes the color together\n  return clamp(0.5+0.5*(v-r)/z, 0., 1.);\n}\n\nfloat mixShapes(float v, float f, float r){ // mixes the shapes together\n  float z = mixColors(v, f, r);\n  return mix(f,v,z)-r*z*(1.-z);\n}\n\nfloat pModPolar(inout vec2 v, float r){\n  float f = 6.28318/r;\n  float z = atan(v.y, v.x)+f*0.5;\n  float m = floor(z/f);\n  z = mod(z, f)-f*0.5;\n  v = vec2(cos(z), sin(z))*length(v);\n  return m;\n}\n//=======================\n\nShape vines(vec3 c){\n  Shape shape;\n  float vine;\n  shape.dist = 1000.; // Draw Distance\n  shape.color = vec4(1.); // Initial Color\n\n  // Shape Attributes\n  float twist = 20.; // Vine Repeat \n  float vineOffset = 4.; // Leaf Offset\n\n\n\t//vineOffset += cos(iTime*0.5)*1.;\n\n  // Stems\n  vec3 i = c;\n    i.zx *= rot(c.y*0.1+iTime*0.25);\n    i.x = abs(i.x)-5.; //mirrors it\n    i.x = abs(i.x)-5.; //mirrors it again\n    i.x = abs(i.x)-5.; //mirrors it again, gnarled tree look\n\n    float detail = pModPolar(i.xz, twist); \n    \n    float x = mix(-6., 7., mod(detail, 10.));//  Ripples\n    //float x = mix(0., 1., pModPolar(i.xy, 10.)); \n    \n    \n    i.x -= vineOffset; // Offset Stems\n  \tfloat stemWidth = 0.5;\n  \tvine = pole(i.xz, stemWidth+0.02*sin(i.y*x)); //makes vines\n\n\n  vec4 color = vec4(0.9, 0.5, 0.5, 1.); //trunk color\n    \n    float pattern = cos(sin(c.z*10.));//cos(sin(c.y*2.));\n\n  shape.dist = vine;\n  shape.color = color;\n  shape.color /= pattern; //adds in pattern\n\n  return shape;\n}\n\n\nShape orb(vec3 c){\n  Shape shape;\n  float orb;\n  shape.dist = 1000.; // Draw Distance\n  shape.color = vec4(1.); // Initial Color\n\n  // Stems\n  vec3 i = c;\n    //i.xy *= rot(iTime); //rotate around clockwise\n    //i.yz *= rot(iTime); //rotate into/out of screen\n    i.x = repeat(i.x, 10.); //repeat on the x axis 10 apart\n    i.y = repeat(i.y, 10.); // repeat on the y axis 10 apart\n    //i.x = abs(i.x)-0.5;\n    //i.x = abs(i.x)-0.5;\n    orb = sphere(i, sin(iTime*5.)+2.*1.5); // orb size, fluctuates \n    \n\n  vec4 color = vec4(.3, 0.8, 0.4, 1.); //orbs color\n\n  shape.dist = orb;\n  shape.color = color;\n\n  return shape;\n}\n\n\nShape map(vec3 c){\n  Shape vines = vines(c);\n  Shape orbs = orb(c);\n    \n  float df = mixShapes(vines.dist, orbs.dist, 1.);\n  vines.dist = df;\n    \n  vines.color = mix(vines.color, \n                    orbs.color*5., \n                    mixColors(orbs.dist, vines.dist, 1.)); //mix colors \n\n  return vines;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 v = (fragCoord.xy-0.5 * iResolution.xy) / iResolution.y;\n\n  \n  vec3 cam = vec3(0., 0., -75.); //zoom out in the z\n  vec3 f = normalize(vec3(v, 1.));\n  vec3 scene = cam;\n  fragColor = vec4(.1, .6, .9, 1.); // background color = sky\n\n  // Ray Marcher\n  for(float z = 0.1 ; z <= 1.; z += 0.05){\n    Shape c = map(scene); // Calc SDF\n    if(c.dist < 0.01){\n      fragColor = c.color*(.5-z); // Hit  - invert pixels, darker color shading\n      f += smoothstep(0., 0.1, length(v));\n      break;\n    }\n    scene += f * c.dist;\n\n\n  }\n}","name":"Image","description":"","type":"image"}]}