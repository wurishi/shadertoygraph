{"ver":"0.1","info":{"id":"7lVfRW","date":"1664195488","viewed":183,"name":"render string of text","username":"jt","description":"Renders (alpha & border) a string of text given by an array of (ascii-)code into a given rectangle.\nContrary to my previous attempts this uses the distance-field of the text-texture for better quality,\nfrom https://www.shadertoy.com/view/MsSfzc by Klems.","likes":3,"published":1,"flags":0,"usePreview":1,"tags":["text","distance","string","ascii","render","chars","char"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/7lVfRW render string of text by jt\n\n// Font generator by otaviogood https://github.com/otaviogood/shader_fontgen/blob/master/codepage_gen.html\n// Text rendering originally from https://www.shadertoy.com/view/MsSfzc [SH17C] Anisotropic Filtering by Klems\n// Rewritten for readability & usability.\n// Renders (alpha & border) a string of text given by an array of (ascii-)code into a given rectangle.\n\n// This work is licenced under a CC0 1.0 Universal License\n// https://creativecommons.org/publicdomain/zero/1.0/\n\n// tags: ascii, char, chars, distance, render, string, text\n\n// define letter codes for convenience https://en.wikipedia.org/wiki/ASCII\n// texture index (here ASCII but could change depending on texture)\n#define SPACE 32\n#define EXCLAMATION 33\n#define DOUBLEQUOTES 34\n#define HASH 35\n#define COMMA 44\n#define POINT 46\n\n#define A  65\n#define B  66\n#define C  67\n#define D  68\n#define E  69\n#define F  70\n#define G  71\n#define H  72\n#define I  73\n#define J  74\n#define K  75\n#define L  76\n#define M  77\n#define N  78\n#define O  79\n#define P  80\n#define Q  81\n#define R  82\n#define S  83\n#define T  84\n#define U  85\n#define V  86\n#define W  87\n#define X  88\n#define Y  89\n#define Z  90\n\n#define a  97\n#define b  98\n#define c  99\n#define d 100\n#define e 101\n#define f 102\n#define g 103\n#define h 104\n#define i 105\n#define j 106\n#define k 107\n#define l 108\n#define m 109\n#define n 110\n#define o 111\n#define p 112\n#define q 113\n#define r 114\n#define s 115\n#define t 116\n#define u 117\n#define v 118\n#define w 119\n#define x 120\n#define y 121\n#define z 122\n\n//const int[] string = int[](H,e,l,l,o,COMMA,W,o,r,l,d,EXCLAMATION);\nconst int[] string = int[](J,u,s,t,SPACE,a,n,o,t,h,e,r,SPACE,G,L,S,L,SPACE,t,e,x,t,SPACE,r,e,n,d,e,r,e,r,COMMA,SPACE,e,x,p,l,o,i,t,i,n,g,SPACE,HASH,d,e,f,i,n,e,s,SPACE,f,o,r,SPACE,c,o,n,v,e,n,i,e,n,t,SPACE,DOUBLEQUOTES,s,t,r,i,n,g,DOUBLEQUOTES,SPACE,r,e,p,r,e,s,e,n,t,a,t,i,o,n,POINT);\n\n// undefine letter codes so one-letter variables can be used again\n#undef SPACE\n#undef EXCLAMATION\n#undef DOUBLEQUOTES\n#undef HASH\n#undef COMMA\n#undef POINT\n\n#undef A\n#undef B\n#undef C\n#undef D\n#undef E\n#undef F\n#undef G\n#undef H\n#undef I\n#undef J\n#undef K\n#undef L\n#undef M\n#undef N\n#undef O\n#undef P\n#undef Q\n#undef R\n#undef S\n#undef T\n#undef U\n#undef V\n#undef W\n#undef X\n#undef Y\n#undef Z\n\n#undef a\n#undef b\n#undef c\n#undef d\n#undef e\n#undef f\n#undef g\n#undef h\n#undef i\n#undef j\n#undef k\n#undef l\n#undef m\n#undef n\n#undef o\n#undef p\n#undef q\n#undef r\n#undef s\n#undef t\n#undef u\n#undef v\n#undef w\n#undef x\n#undef y\n#undef z\n\n#define WIDTH 23\n#define HEIGHT (string.length()/WIDTH)\n\nvec4 text(vec2 pixelpos, vec2 start, vec2 end)\n{\n    pixelpos = (pixelpos - start) / (end - start);\n    pixelpos.x *= float(WIDTH);\n    pixelpos.y *= float(HEIGHT);\n\n    float alias = length(fwidth(pixelpos)) * 0.5; // (I don't understand this line)\n    ivec2 tile = ivec2(floor(pixelpos));\n    tile.y = HEIGHT - 1 - tile.y;\n    vec2 local = fract(pixelpos);\n    local.x = (local.x * 0.5 + 0.25); // skip gaps between chars\n    local.y = (local.y * 0.75 + 0.125); // skip gaps between chars\n    vec3 color = vec3(0);\n    float opacity = 0.0;\n    if(tile.x >= 0 && tile.x < WIDTH && tile.y >= 0 && tile.y < HEIGHT)\n    {\n        int char = string[tile.x + WIDTH * tile.y];\n        int column = char & 0xf;\n        int row = 15 - (char >> 4);\n        float dist = texture(iChannel0, ((vec2(column, row) + local) * 64.0) / 1024.0).w;\n        float border = 0.05; // must be a positive value\n        opacity = smoothstep(+alias,-alias, dist - 0.5 - border);\n        color += smoothstep(+alias,-alias, dist - 0.5);\n    }\n\n    return vec4(color, opacity);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    //vec2 uv = 2.0 * fragCoord.xy / iResolution.xy - 1.0;\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n    {\n        vec4 string = text(uv, vec2(0.25, 0.4), vec2(0.75, 0.6));\n        fragColor.rgb = mix(vec3(0, 0, 0.5), string.rgb, string.a);\n    }\n\n    fragColor.rgb = pow(fragColor.rgb, vec3(1.0 / 2.2));\n}\n","name":"Image","description":"","type":"image"}]}