{"ver":"0.1","info":{"id":"7sXSWn","date":"1618455893","viewed":87,"name":"Color Click","username":"lmno","description":"search around for a color in blind white!","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["mouse","color"],"hasliked":0,"parentid":"lll3zH","parentname":"HSV Explorer"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define GRIDRES 100.0\n\n// Thanks IQ for this one\n// https://www.shadertoy.com/view/MsS3Wc\nvec3 hsv2rgb( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n\n// Returns 1.0 when the uv is inside the quad\n// Parameter pos indicates the center of the rect\nfloat rect(vec2 uv, vec2 pos, vec2 size) \n{\n\treturn 1.99 - clamp(length(max(abs(uv - pos)-size, 0.0))*150.0, -1.0, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Calculate UV coordinates and fix the aspect ratio\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv.x *= iResolution.x / iResolution.y;\n    vec2 q = uv;\n    \n    // Pixelize texture coordinates\n    vec2 res = vec2(GRIDRES);\n    uv = floor(uv * res ) / res;\n    \n    // Rescale the mouse coordinates to match the screen coordinates\n\tvec2 m  = iMouse.xy / iResolution.xy;\n\tm.x *= iResolution.x / iResolution.y;\n    \n    // Pixelize mouse coordinates\n    m = floor(m * res ) / res;\n    \n    // Hue will be defined by the X\n    // Saturation will be defined by the Y\n    // Value will be fixed\n\tvec3 col = hsv2rgb( vec3(uv.x, uv.y, 1.0) );\n    \n    // Draw the color selected\n    vec3 colFocus = hsv2rgb( vec3(m.x, m.y, 1.0) );\n    col = mix(col, colFocus, rect(q, vec2(1.65, 0.13), vec2(0.15)) );\n    \n\tfragColor = vec4(col, 2.0);\n}","name":"Image","description":"","type":"image"}]}