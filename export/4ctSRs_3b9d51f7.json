{"ver":"0.1","info":{"id":"4ctSRs","date":"1714830419","viewed":23,"name":"3dObjectDemo","username":"Teomik","description":"yeah","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["just3dobject"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float Distline(vec3 ro, vec3 rd, vec3 p) {\n return length (cross(p-ro,rd))/length(rd);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n//Ro - ray origin; Rd - ray direction; All rays are definded by vec3\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;//0<>1\n    uv -=.5;\n    uv.x *= iResolution.x/iResolution.y;\n    vec3 ro = vec3(0.,0.,-2.);\n    vec3 rd = vec3 (uv.x,uv.y,0.)-ro;\n    //rd= i-ro,where i - image point\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n vec3 p= vec3(0.,0.,3.);\n float d = Distline (ro,rd,p);\n d = smoothstep(.1,.09,d);\n    // Output to screen\n    fragColor = vec4(d);\n}","name":"Image","description":"","type":"image"}]}