{"ver":"0.1","info":{"id":"ss23zz","date":"1631413372","viewed":204,"name":"Simple 2D Beach Waves","username":"dysangel","description":"This is a simple idea that I first had probably 23 years ago and never got around to trying. Thought it would be a fun practice shader.","likes":5,"published":1,"flags":96,"usePreview":0,"tags":["2d","waves","beach"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XllXW2","filepath":"https://soundcloud.com/mnc-sounds/beach-waves","previewfilepath":"https://soundcloud.com/mnc-sounds/beach-waves","type":"musicstream","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define LOW_FREQ 0.5\n#define MED_FREQ 1.\n#define HIGH_FREQ 4.\n\n#define LOW_AMP 0.1\n#define MED_AMP 0.01\n#define HIGH_AMP 0.005\n\n#define MIN_LINE_HEIGHT 0.1\n#define MAX_LINE_HEIGHT 0.5\n#define LINE_WIDTH 0.06\n\n#define WAVE_SPEED 0.5\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float amplitude =   (sin((uv.x + iTime) * LOW_FREQ) * LOW_AMP) +\n                        (sin((uv.x + iTime) * MED_FREQ) * MED_AMP) +\n                        (sin((uv.x + iTime) * HIGH_FREQ) * HIGH_AMP);\n                        \n    float position = ((sin(iTime * WAVE_SPEED) + 0.5) * (MAX_LINE_HEIGHT - MIN_LINE_HEIGHT)) + MIN_LINE_HEIGHT;\n    \n    float amplitude2 =   (sin((uv.x + iTime + 0.5) * LOW_FREQ) * LOW_AMP) +\n                        (sin((uv.x + iTime + 0.5) * MED_FREQ) * MED_AMP) +\n                        (sin((uv.x + iTime + 0.5) * HIGH_FREQ) * HIGH_AMP);\n\n    float position2 = ((sin(iTime * WAVE_SPEED + 3.0) + 0.5) * (MAX_LINE_HEIGHT - MIN_LINE_HEIGHT)) + MIN_LINE_HEIGHT;\n    \n    float line_width = (sin((fragCoord.x*0.03+sin(iTime)*10.+iTime*5.)*0.05)*0.01 + (fragCoord.y * 0.00015)) + LINE_WIDTH;\n    \n    if ((uv.y >= (amplitude + position) && uv.y <= (amplitude + position + line_width*0.5)) ||\n        (uv.y >= (amplitude2 + position2) && uv.y <= (amplitude2 + position2 + line_width*0.5))) {\n        fragColor = vec4(uv.y * 1.0, uv.y * 1.0, uv.y * 1.0,1.0) * 0.18;\n    }\n    \n    float residuals = (sin(fragCoord.x*0.0001+(iTime*500.)*0.15+.8));\n    \n    residuals = clamp(residuals,0.9,.99);\n    \n    fragColor = fragColor + (texture(iChannel0, uv).rgba * residuals);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"#define LOW_FREQ 0.5\n#define MED_FREQ 1.\n#define HIGH_FREQ 4.\n\n#define LOW_AMP 0.1\n#define MED_AMP 0.01\n#define HIGH_AMP 0.005\n\n#define MIN_LINE_HEIGHT 0.1\n#define MAX_LINE_HEIGHT 0.51\n#define LINE_WIDTH 0.06\n\n#define WAVE_SPEED 0.5\n\nfloat seed = 0.;\nfloat rand() { return fract(sin(seed+(iTime))*43758.5453123); }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float amplitude =   (sin((uv.x + iTime) * LOW_FREQ) * LOW_AMP) +\n                        (sin((uv.x + iTime) * MED_FREQ) * MED_AMP) +\n                        (sin((uv.x + iTime) * HIGH_FREQ) * HIGH_AMP);\n                        \n    float position = ((sin(iTime * WAVE_SPEED) + 0.5) * (MAX_LINE_HEIGHT - MIN_LINE_HEIGHT)) + MIN_LINE_HEIGHT;\n    \n    float amplitude2 =   (sin((uv.x + iTime + 0.5) * LOW_FREQ) * LOW_AMP) +\n                        (sin((uv.x + iTime + 0.5) * MED_FREQ) * MED_AMP) +\n                        (sin((uv.x + iTime + 0.5) * HIGH_FREQ) * HIGH_AMP);\n\n    float position2 = ((sin(iTime * WAVE_SPEED + 3.0) + 0.5) * (MAX_LINE_HEIGHT - MIN_LINE_HEIGHT)) + MIN_LINE_HEIGHT;\n    \n    if (uv.y < (amplitude + position) || uv.y < (amplitude2 + position2)) {\n        float color = texture(iChannel1, uv*(sin((iTime*(0.35))+uv.x*0.02)*0.025+1.)*(sin(iTime*0.1+uv.y)*0.15+1.)*.7).x * 0.5;\n        float color2 = texture(iChannel1, uv*(sin((iTime*(0.3))+(uv.x*0.5) + 0.75)*0.025+1.5)*(1.-sin(iTime*0.01-uv.y)*0.15+1.5)*0.5).x;\n        color2 *= color2;\n        fragColor = vec4(color+color2*color*color,color+color2,color+color2+(0.1*sin(iTime*0.05+uv.y)),1.0);\n    }\n    else {\n        float color = texture(iChannel0, uv*(sin(uv.x)*0.08+1.)*(sin(uv.y)*0.5+1.)*7.).x;\n        fragColor = vec4(color*1.0,color*1.0,color*0.8,1.0);\n    }\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"#define LOW_FREQ 0.5\n#define MED_FREQ 1.\n#define HIGH_FREQ 3.\n\n#define LOW_AMP 0.1\n#define MED_AMP 0.05\n#define HIGH_AMP 0.003\n\n#define MIN_LINE_HEIGHT 0.1\n#define MAX_LINE_HEIGHT 0.5\n#define LINE_WIDTH 0.01\n\n#define WAVE_SPEED 0.5\n\nfloat seed = 0.;\nfloat rand() { return fract(sin(seed+(iTime))*43758.5453123); }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = 1. - fragCoord/iResolution.xy;\n    \n    fragColor = (texture(iChannel0, uv).rgba * 1.0) + (texture(iChannel1, uv).rgba * 1.0);\n}","name":"Buffer C","description":"","type":"buffer"}]}