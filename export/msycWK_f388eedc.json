{"ver":"0.1","info":{"id":"msycWK","date":"1696616657","viewed":42,"name":"Random Pipes DTD","username":"bailesdtd","description":"Pipes, definitely inspired by something I saw on here. Couldn't find it though.","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["2d","noise","pipes"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define HPI (3.14159*0.5)\n#define rot2(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n\n//https://www.shadertoy.com/view/WttXWX -- FabriceNeyret2\n#define hashi(x)   lowbias32(x)\n#define hash(x)  ( float( hashi(x) ) / float( 0xffffffffU ) )\n#define tofloat(x) ( float(x) / float( 0xffffffffU ) )\nuint lowbias32(uint x) {\n    x ^= x >> 16;\n    x *= 0x7feb352dU;\n    x ^= x >> 15;\n    x *= 0x846ca68bU;\n    x ^= x >> 16;\n    return x;\n}\n\nfloat straightAngle(vec2 p, float r, float s) {\n    vec2 D = abs(p)-vec2(1);\n    float l = length(max(D,0.0)) + min(max(D.x,D.y),0.0);\n    return max(abs(abs(p.y)-r*0.5)-s,l);\n}\nfloat rightAngle(vec2 p, float r,float s) {\n    vec2  d = vec2(max(-1.0-p,r+p)),\n          D = abs(p)-vec2(1); \n    float b = length(max(d,0.0)) + min(max(d.x,d.y),0.0),\n          l = length(max(D,0.0)) + min(max(D.x,D.y),0.0),\n          c = max((r*0.5)-b, b-(1.5*r));\n    c = abs(c)-s;      \n    c = max(c,l);\n    return c;\n}\n\nfloat crossAngle(vec2 p, float r,float s) {\n    p = -abs(p);\n    vec2  d = vec2(max(-1.0-p,r+p)),\n          D = abs(p)-vec2(1); \n    float b = length(max(d,0.0)) + min(max(d.x,d.y),0.0),\n          l = length(max(D,0.0)) + min(max(D.x,D.y),0.0),\n          c = (r*0.5)-b;\n          //b-(1.5*r);\n    c = abs(c)-s;      \n    c = max(c,l);\n    return c;\n}\nfloat threeAngle(vec2 p, float r,float s) {\n    p.y = -abs(p.y);\n    vec2  d = vec2(max(-1.0-p,r+p)),\n          D = abs(p)-vec2(1); \n    float b = length(max(d,0.0)) + min(max(d.x,d.y),0.0),\n          l = length(max(D,0.0)) + min(max(D.x,D.y),0.0),\n          c = max((r*0.5)-b, b-(1.5*r));\n    c = abs(c)-s;      \n    c = max(c,l);\n    return c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    float t = 0.75*(iTime / HPI);\n    vec2 uv = (2.0*fragCoord)/iResolution.y-iTime*0.2;\n\n    float n = 8.0;\n    \n    uvec2 i = uvec2(mod(floor(uv*n*0.5),512.0));\n    vec2  f = fract(mod(uv*n*0.5,n))*2.0-1.0;\n    \n    \n    uint ih = hashi( i.x + hashi(i.y) );\n    uint ih2 = hashi(ih);\n    float hh = tofloat(ih);\n    float hh2 = tofloat(ih2);\n    \n    \n    float y = hh2<0.5?1.0:-1.0;\n    float b = smoothstep(0.0,1.0,smoothstep(0.0,1.0,fract(t)))*HPI; \n    float o = floor(t)*HPI;\n    f *= rot2(y*o+y*b);\n    \n    float r = 0.5;\n    float j = 0.08;\n    float c = 0.0;\n    int s = int(floor(hh*4.0));\n    if(s==0){\n        c = straightAngle(f,r,j);\n    }else if(s==1){\n        c = rightAngle(f,r,j);\n    }else if(s==2){\n        c = crossAngle(f,r,j);\n    }else if(s==3){\n        c = threeAngle(f,r,j);\n    }\n    \n    c = smoothstep(0.0,0.01,c);\n    vec3 col = mix(vec3(hh,-1,hh2)*0.5+0.5,vec3(0),c);\n    fragColor = vec4(col,1);\n}","name":"Image","description":"","type":"image"}]}