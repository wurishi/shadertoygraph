{"ver":"0.1","info":{"id":"4XlcRH","date":"1725845652","viewed":10,"name":"trig waves","username":"hyunjeong","description":"sine and cosine shifting over each other. sine is shifting down, and cosine is shifting right","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["graph"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 palette( float t ){\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.00, 0.33, 0.67);\n//    0.5, 0.5, 0.5\t\t0.5, 0.5, 0.5\t2.0, 1.0, 0.0\t0.50, 0.20, 0.25\n\n    return a + b*cos( 6.28318*(c*t+d));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1), then undid stretching\n    vec2 uv = fragCoord/iResolution.xy*2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    //signed distance function of an elliptic curve\n    vec2 p = uv;\n    float l= (sin(p.x) - p.y);\n    \n    float m = (cos((p.x - iTime)) - p.y);\n    \n    \n    //plugging in the distance from the curve to the palette function\n    vec3 col = palette(l);\n   \n    //brings some of the far out squares back to 0 periodically\n    l = sin(l*7. - iTime)/7.;\n    \n    m = sin(m*7. - iTime)/7.;\n\n    //absolute value so black is only on the square\n    l = 8.*abs(l)*abs(m);\n    \n    //step function for cutoff\n    l = smoothstep(0.0,0.1, l);\n    \n    // inverting color\n    l = 0.05/l;\n\n    col *= l;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}