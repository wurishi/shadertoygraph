{"ver":"0.1","info":{"id":"cslfDM","date":"1688813985","viewed":62,"name":"Gothic1","username":"JJorr","description":"A simple gothic fractal shader","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fractal","gothic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdHexagon( in vec2 p, in float r )\n{\n    const vec3 k = vec3(-0.866025404,0.5,0.577350269);\n    p = abs(p);\n    p -= 2.0*min(dot(k.xy,p),0.0)*k.xy;\n    p -= vec2(clamp(p.x, -k.z*r, k.z*r), r);\n    return length(p)*sign(p.y);\n}\n\nvec3 palette( float t){\n    vec3 a = vec3(-0.342, -0.342, 0.000);\n    vec3 b = vec3(1.258, 1.348, 1.078);\n    vec3 c = vec3(1.000, 1.000, 1.000);\n    vec3 d = vec3(2.558, 2.338, 2.488);\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.0);\n    \n    for (float i = 0.0; i < 10.0; i++){\n        //uv = fract(uv * (sin(i/iTime))) - 0.5;\n        uv = fract(uv * 1.5) - 0.5;\n\n\n        float d = length(uv) * exp(-length(uv0));\n        float d0 = length(uv0);\n\n        d = sdHexagon(uv,d0/1.8);\n        vec3 col = palette(d0 + iTime*(i/3.3));\n        d = sin(d*10.0+(iTime/2.0))/10.0;\n\n\n\n        //d = abs(d);\n        d = 0.02 / d;\n\n        finalColor += d;\n    }\n    //d= smoothstep(0.0,0.03,d);\n    // Output to screen\n    fragColor = vec4(finalColor,1.0);\n}","name":"Image","description":"","type":"image"}]}