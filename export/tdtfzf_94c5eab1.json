{"ver":"0.1","info":{"id":"tdtfzf","date":"1606265520","viewed":320,"name":"NAND strand","username":"paniq","description":"For a description of how this shader works, see the comment in \"Image\"","likes":5,"published":3,"flags":32,"usePreview":0,"tags":["nand","strand"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n\nNAND strand\n\nEach pixel on the field represents a logical NAND cell with two tendrils \n(kind of like a neuron with two dendrites). The tendrils sample two \nrandom neighboring fields for their bit value, which are then input into\na NAND operation.\n\nAccording to the NAND rules, a cell is active when the result of the \noperation is 1, and inactive otherwise (which is when both inputs are 1). \n\nTo ensure connectivity, a cell starts extending its tendrils in random \ndirections when it is inactive, hoping to find signals.\n\nBut when a cell is active all the time, it retracts its tendrils in a \nstraight line back to the cell to reduce connectivity. \n\nIn the beginning, tendrils are placed at a random point close to the \ncell. The maximum max-norm radius is scaled from 1 to 8 pixels from left \nto right.\n\nWere the field rendered as it is, it would be constantly flickering \nbetween black and white, which is quite unpleasant to look at. Therefore \nwe alternate the visualized buffer in Buffer B to get a coherent \nvisualization.\n\nI picked NAND as the operator because it is logically universal; a \ncombination of NAND circuitry is capable of representing every other \nlogical operation (AND, OR, XOR, NOT), and I was speculating on \n\"accidental\" complexity forming in this setup. Which happened.\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord) {\n    vec4 a = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    fragColor = vec4(vec3(a.x), 1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec2 hash22(vec2 p) {\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nvec2 hash23(vec3 p3)\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nvec2 modcoord(vec2 p) {\n    return mod(p + iChannelResolution[0].xy, iChannelResolution[0].xy);\n}\n\nfloat nand(float a, float b) {\n    // A NAND B\n    a = a * 2.0 - 1.0;\n    b = b * 2.0 - 1.0;\n    float result = 1.0 - (1.0 + a) * (1.0 + b) /2.0;\n    return result * 0.5 + 0.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    if (iFrame == 0) {    \n        vec2 uv = fragCoord / iResolution.xy;\n        \n        vec2 h = fragCoord + (hash22(fragCoord) * 2.0 - 1.0) * mix(1.0, 8.0, uv.x*uv.x);\n        \n\t\tfragColor = vec4((uv.x < 0.5)?hash22(fragCoord).x:0.0, h, 0.0);\n    } else {\n        vec4 col1 = texelFetch(iChannel0, ivec2(fragCoord), 0);\n\t\tvec4 col2 = texelFetch(iChannel0, ivec2(modcoord(col1.yz)), 0);\n\t\tvec4 col3 = texelFetch(iChannel0, ivec2(modcoord(col2.yz)), 0);\n        \n        col1.x = nand(col2.x, col3.x);\n        \n        if (col1.x < 0.01) {\n        \t// search\n            col1.yz += 0.1 * (hash23(vec3(col1.yz, iFrame)) * 2.0 - 1.0);\n        } else if ((col2.x + col3.x) > 1.0) {\n        \t// retract\n            vec2 n = normalize(fragCoord - col1.yz);\n            col1.yz += 0.01 * n;\n        }\n        \n        fragColor = vec4(col1.x, col1.yz, 0.0);\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 a = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    vec4 b = texelFetch(iChannel1, ivec2(fragCoord), 0);\n    fragColor = ((iFrame % 2 == 0)?a:b);\n}","name":"Buffer B","description":"","type":"buffer"}]}