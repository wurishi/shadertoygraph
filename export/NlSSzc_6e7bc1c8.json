{"ver":"0.1","info":{"id":"NlSSzc","date":"1628191449","viewed":247,"name":"archee's asteroids with HDR","username":"JamesGriffin","description":"This is nearly all the work of archee, but with an added HDR / bloom component in an attempt to recreate the analogue brightness of the original Asteroids.","likes":6,"published":1,"flags":40,"usePreview":0,"tags":["2d","oldschool","animation","bloom","hdr","asteroids"],"hasliked":0,"parentid":"4l2GzR","parentname":"[nv15] asteroids - space wraps"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Gaussian blur of Buffer B in horizontal direction resulting in spherical blur\n// of Buffer A, code is highly edited version of Seven's https://www.shadertoy.com/view/lsXGWn\n\n\nconst float intensity = 7.0;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec4 sum = vec4(0);\n   vec2 texcoord = fragCoord.xy/iResolution.xy;\n   float blur_size = 1.0 / iResolution.x;\n\n   // Nine samples\n   sum += texture(iChannel1, vec2(texcoord.x - 4.0*blur_size, texcoord.y)) * 0.05;\n   sum += texture(iChannel1, vec2(texcoord.x - 3.0*blur_size, texcoord.y)) * 0.09;\n   sum += texture(iChannel1, vec2(texcoord.x - 2.0*blur_size, texcoord.y)) * 0.12;\n   sum += texture(iChannel1, vec2(texcoord.x - blur_size, texcoord.y)) * 0.15;\n   sum += texture(iChannel1, vec2(texcoord.x, texcoord.y)) * 0.16;\n   sum += texture(iChannel1, vec2(texcoord.x + blur_size, texcoord.y)) * 0.15;\n   sum += texture(iChannel1, vec2(texcoord.x + 2.0*blur_size, texcoord.y)) * 0.12;\n   sum += texture(iChannel1, vec2(texcoord.x + 3.0*blur_size, texcoord.y)) * 0.09;\n   sum += texture(iChannel1, vec2(texcoord.x + 4.0*blur_size, texcoord.y)) * 0.05;\n\t\n   //increase blur with intensity!\n   fragColor = sum*intensity + 2.5 * texture(iChannel0, texcoord);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"XsfGRr","channel":0}],"code":"float noize(float t)\n{\n    return fract(sin(t*3314.9)*342.0);\n}\nfloat res;\n\nvoid explosionSound(float time)\n{\n    if (time<0.5 && time>0.0) { // explosion sound\n        float freq = 1000.0 * (1.0-time*2.0);\n        float freqintegrated = 1000.0 * (-time*time*1.0+time);\n        res += noize(float(int(freqintegrated))) ;\n//        res += fract(freqintegrated)>0.5 ? -0.2 : 0.2;\n    }\n}\n\nvoid shootSound(float time)\n{\n    float freq = 2000.0 * (1.0-time*16.0);\n    if (time<0.0) return;\n    if (freq<0.0) return;\n    float freqintegrated = 2000.0*(  time*time*-8.0 + time);\n    res += fract(freqintegrated)>0.5 ? -0.2 : 0.2;\n}\n\nfloat deathtime = 41.4;\nvec2 exploc;\nfloat exptime=-99.0;\nfloat time;\n\nvoid explosion(vec2 location,float t)\n{\n    if (t<time && t>exptime)\n    {\n        exptime = t;\n        exploc = location;\n    }\n}\n\nvoid movingasteroid(float shape,vec2 vel,float explodetime,float die0,float die1)\n{\n    if (explodetime<time) \n    {\n        explosion(vec2(0.0,0.0),explodetime);\n        explosion(vec2(0.0,0.0),die1);\n        explosion(vec2(0.0,0.0),die0);\n    }\n}\n\n\n#define endtime (deathtime+5.0)\nvec2 mainSound( in int samp,float time2)\n{\n    res = 0.0;\n    time = time2;\n    \n    time = mod(time,4.0+endtime*1.25);\n    if (time>endtime)\n    {\n        if (time>2.0+endtime)\n        {\n            time = max(endtime - (time-2.0-endtime)*4.0,0.0);\n            \n        }\n        else\n            time = endtime;\n    }\n    \n\n    float lt = fract(time*5.0)/5.0;\n    if (fract(time+0.4)<0.6 && time>3.0 && time<deathtime) shootSound(lt-0.0);\n    \n//    shootSound(time-2.0);\n/*    explosionSound(time-0.0);\n    explosionSound(time-1.0);*/\n    \n \n    // explosion sound timing\n    movingasteroid(0.0, vec2(0.1,0.1), 5.7,27.0,18.0); // red\n    movingasteroid(1.0, vec2(-0.07,-0.1), 4.5,39.5,9.5); // purple\n    movingasteroid(2.0, vec2(-0.09,0.05), 6.6,99.4,23.0); // white\n    explosion(vec2(0.0,0.0),deathtime);\n    \n    explosionSound(time-exptime);\n    \n    return vec2( res );\n}","name":"Sound","description":"","type":"sound"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Code taken from archee's asteroids demo https://www.shadertoy.com/view/4l2GzR\n// Edited slightly to mute some colours, see all lines with base_intensity constant\n\nvec2 sp;\nvec3 color;\nconst float pi = 3.14159265359;\n#define  linethickness (2.0/iResolution.x)\nfloat time;\nconst float aspect = 16.0/9.0;\nconst float base_intensity = 0.3;\n\nfloat noize(float x)\n{\n    return fract(sin(x*9342.0)*1435.0);\n}\nfloat noize2(float x)\n{\n    return fract(cos(x*932.0)*2435.0);\n}\nvec2 noize2d(float x)\n{\n    return vec2(noize(x),noize2(x));\n}\n\nvoid draw(float aaval,vec3 color2)\n{\n    color = max(color,color2*aaval);\n//    color = (color2-color)*aaval;\n}\n\n    \nvoid asteroid(vec2 pos,float rot,float size,float shape)\n{\n \tvec2 rp = (fract((sp-pos)*vec2(1.0,aspect)+vec2(0.5,0.5)   )-vec2(0.5,0.5))/vec2(1.0,aspect);\n    \n   if ( length(rp) > size) return; // bounding disk does wonder to FPS\n    \n    float angle = fract(atan( (rp).x, (rp).y )/pi/2.0+rot);\n    float rad = (clamp(sin(angle*pi*7.0)*2.0,-1.0,1.0)+4.0)/10.0 +\n        (clamp(sin(angle*pi*(12.0)+shape)*2.0,-1.0,1.0)+4.0)/10.0;\n    \n    rad *= size;\n    float dist = length(rp);\n    \n    float aaval = 1.0-abs(dist-rad)/linethickness;\n    \n    draw(aaval,vec3(base_intensity,shape>1.0?base_intensity:0.0,shape>0.0?base_intensity:0.0));\n}\n\nvec3 linecolor;\nvoid line(vec2 a,vec2 b)\n{\n    vec2 s = (fract((sp-a)*vec2(1.0,aspect)+vec2(0.5,0.5))-vec2(0.5,0.5))/vec2(1.0,aspect)+a;\n    if ( dot(b-a,s-a) < 0.0 || dot(b-a,s-a)>dot(b-a,b-a)  ) return;\n    float aaval = (1.0-(abs( (a.x-b.x)*(s.y-a.y)-(a.y-b.y)*(s.x-a.x)  )/linethickness/length(a-b)*2.0));\n    draw(aaval,linecolor);\n}\n\nvec2 rotate(vec2 pos,float rot)\n{\n    return vec2( cos(rot)*pos.x + sin(rot)*pos.y, cos(rot)*pos.y - sin(rot)*pos.x);\n}\n\n\nfloat rotvel0;\nfloat rot0;\nvec2 pos0;\nvec2 vel0;\nfloat timeleft;\nfloat currentaccel;\n\n\nvoid ship(vec2 pos,float rot,float size)\n{\n    line(pos+rotate(vec2(0,1.0),rot)*size,pos+rotate(vec2(0.5,-0.3)*size,rot));\n    line(pos+rotate(vec2(0,1.0),rot)*size,pos+rotate(vec2(-0.5,-0.3)*size,rot));\n    line(pos+rotate(vec2(0.5,-0.1),rot)*size,pos+rotate(vec2(-0.5,-0.1)*size,rot));\n\t\n    linecolor = vec3(1.0,1.0,0.0);\n    if (currentaccel!=0.0 && fract(time*8.0)<0.5)\n    {\n    line(pos+rotate(vec2(0,-1.0),rot)*size,pos+rotate(vec2(0.25,-0.2)*size,rot));\n    line(pos+rotate(vec2(0,-1.0),rot)*size,pos+rotate(vec2(-0.25,-0.2)*size,rot));\n    }\n    \n    \n}\n\nfloat timepast;\nvoid move(float accel,float rotaccel,float t)\n{\n    timepast += t;\n    if (timeleft<t) t = timeleft;\n    if (timeleft<0.01) return;\n    \n\n/*    float dd = 0.01;\n   vec2 pos0d =  (\n       (vec2(sin(rot0+rotvel0*(t-dd)),cos(rot0+rotvel0*(t-dd)))-vec2(sin(rot0),cos(rot0)))*accel/rotvel0/rotvel0\n        + pos0 + (vel0-vec2(cos(rot0),-sin(rot0))*accel/rotvel0 )*(t-dd));*/\n    \n   pos0 =  (\n       (vec2(sin(rot0+rotvel0*t),cos(rot0+rotvel0*t))-vec2(sin(rot0),cos(rot0)))*accel/rotvel0/rotvel0\n       + pos0 + (vel0-vec2(cos(rot0),-sin(rot0))*accel/rotvel0 )*t);\n\n//    vel0 = (pos0-pos0d)/dd;\n  vel0 = (vel0-vec2(cos(rot0)-cos(rot0+rotvel0*t),-sin(rot0)+sin(rot0+rotvel0*t))*accel/rotvel0 );\n    \n   rot0 =  rot0 + rotvel0*t + rotaccel*t*t*0.5;\n    rotvel0 = rotvel0 + rotaccel*t;\n    \n    timeleft -= t;\n    currentaccel = accel;\n}\n\nvoid  shipmove(float t)\n{\n\t pos0 = vec2(0.5,0.3); // START POS\n\t vel0 = vec2(0.0,0.0);\n    rot0=0.0;\n    rotvel0 = 0.1;\n    timeleft = t;\n    timepast = 0.0;\n\n    move(0.0,-1.0,2.0); // turn left\n    \n    move(-0.15,0.0,0.5); // accel\n    \n    move(0.0,1.0,3.0);  // turn right for 2.3 secs\n    \n    move(0.0,0.0,1.5); // do nothing\n    move(-0.15,0.0,1.4); // accel\n    \n    move(0.0,0.0,2.0); // do nothing\n    move(0.0,-1.0,1.8); // turn left\n    move(-0.15,0.0,1.4); // accel\n\n    move(0.0,0.0,17.0-timepast); // do nothing\n    move(-0.15,0.0,2.0); // accel\n    move(0.0,0.0,2.0); // do nothing\n    move(-0.15,0.0,2.4); // accel\n    \n    move(0.0,1.0,2.9);  \n    move(0.0,0.0,30.0-timepast); // do nothing\n    move(-0.15,0.0,4.0); // accel\n    move(0.0,-1.0,3.5);  \n    move(-0.15,0.0,3.0); // accel\n    \n    move(0.0,0.0,9999.0);\n    \n}\n\nfloat deathtime = 41.4;\n\nvec2 exploc;\nfloat exptime=-99.0;\n\nvoid explosion(vec2 location,float t)\n{\n    if (t<time && t>exptime)\n    {\n        exptime = t;\n        exploc = location;\n    }\n}\n\nvoid bullet(float phase)\n{\n    float shottime = fract(time+phase);\n    float timeofshot = time-shottime;\n   if (timeofshot<3.0 || timeofshot>deathtime) return;\n    \n\tshipmove(timeofshot);\n    \n    float bulletspeed = 0.35;\n    float bulletlength = 0.025;\n    vec2 shotdir = vec2(sin(rot0),cos(rot0));\n    pos0 += (vel0+shotdir*bulletspeed)*shottime + shotdir*0.03;\n    line(pos0,pos0+shotdir*bulletlength);\n    \n}\n\nvoid movingasteroid(float shape,vec2 vel,float explodetime,float die0,float die1)\n{\n    float rotvel = 0.1-fract(shape*0.31)*0.2;\n    float size = 0.05;\n    vec2 pos = vel*time;\n    if (explodetime<time) \n    {\n        explosion(vel*explodetime,explodetime);\n        \n        size *= 0.71;\n        pos += vec2(0.05,0.02)*(time-explodetime);\n\t\tif (die1>time) asteroid(pos,-0.2*(time-explodetime),size,shape);        \n        \n        explosion(vel*die1 + vec2(0.05,0.02)*(die1-explodetime),die1);\n        \n        pos += vec2(0.05,0.02)*(time-explodetime)*-2.0;\n        \n        explosion(vel*die0 + -vec2(0.05,0.02)*(die0-explodetime),die0);\n    }\n    if (die0>time) asteroid(pos,time*rotvel+0.1*(time-explodetime),size,shape);\n}\n\nvoid drawexplosion()\n{\n    if (exptime+0.5<time) return;\n    \n    float ltime = time-exptime;\n    float maxrad = 0.16*ltime+0.05;\n    \n    if (maxrad<length((fract((sp-exploc)*vec2(1.0,aspect)+vec2(0.5,0.5)   )-vec2(0.5,0.5))/vec2(1.0,aspect))) return;\n        \n    for(float a=0.0;a<6.2;a+=0.5)\n    {\n        vec2 dir=vec2(cos(a),sin(a));\n    \tfloat expspeed = 0.13+sin(a*5.0)*0.02;\n        line(exploc+dir*ltime*expspeed,exploc+dir*(ltime*expspeed+0.04));\n    }\n    \n}\n\n\n#define endtime (deathtime+5.0)\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    time = iTime+0.0;\n    \n    time = mod(time,4.0+endtime*1.25);\n    if (time>endtime)\n    {\n        if (time>2.0+endtime)\n        {\n            time = max(endtime - (time-2.0-endtime)*4.0,0.0);\n            \n        }\n        else\n            time = endtime;\n    }\n    \n    color = vec3(0,0,0);\n\tsp = fragCoord.xy / iResolution.xy;\n    sp.y /= aspect;\n \n    \n    shipmove(time);\n\n\tlinecolor = vec3(base_intensity);    \n    if (time<deathtime) ship(pos0,rot0,0.05);\n\n    linecolor = vec3(1.0,1.0,1.0);    \n    bullet(0.0);\n    bullet(0.2);\n    bullet(0.4);\n  \n\tlinecolor = vec3(base_intensity);  \n    movingasteroid(0.0, vec2(0.1,0.1), 5.7,27.0,18.0); // red\n    movingasteroid(1.0, vec2(-0.07,-0.1), 4.5,39.5,9.5); // purple\n    movingasteroid(2.0, vec2(-0.09,0.05), 6.6,99.4,23.0); // white\n    \n    shipmove(deathtime);\n    explosion(pos0,deathtime);\n    \n    linecolor = vec3(1.0,1.0,0.0);\n    drawexplosion();\n    \n\tfragColor = vec4(color.x,color.y,color.z,0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// Gaussian blur of Buffer A in vertical direction, code is highly edited version\n// of Seven's https://www.shadertoy.com/view/lsXGWn\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec4 sum = vec4(0);\n   vec2 texcoord = fragCoord.xy/iResolution.xy;\n   float blur_size = 1.0 / iResolution.y;\n      \n   // take nine samples\n   sum += texture(iChannel0, vec2(texcoord.x, texcoord.y - 4.0*blur_size)) * 0.05;\n   sum += texture(iChannel0, vec2(texcoord.x, texcoord.y - 3.0*blur_size)) * 0.09;\n   sum += texture(iChannel0, vec2(texcoord.x, texcoord.y - 2.0*blur_size)) * 0.12;\n   sum += texture(iChannel0, vec2(texcoord.x, texcoord.y - 1.0*blur_size)) * 0.15;\n   sum += texture(iChannel0, vec2(texcoord.x, texcoord.y + 0.0*blur_size)) * 0.16;\n   sum += texture(iChannel0, vec2(texcoord.x, texcoord.y + 1.0*blur_size)) * 0.15;\n   sum += texture(iChannel0, vec2(texcoord.x, texcoord.y + 2.0*blur_size)) * 0.12;\n   sum += texture(iChannel0, vec2(texcoord.x, texcoord.y + 3.0*blur_size)) * 0.09;\n   sum += texture(iChannel0, vec2(texcoord.x, texcoord.y + 4.0*blur_size)) * 0.05;\n\n   fragColor = sum;\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"// Buffer A with a non-linear brightness\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 texcoord = fragCoord.xy/iResolution.xy;\n  \n  vec4 local_value = texture(iChannel0, texcoord);\n  float brightness = 0.21 * local_value.r + 0.72 * local_value.g + 0.07 * local_value.b;\n  \n  fragColor = brightness * local_value; \n}","name":"Buffer C","description":"","type":"buffer"}]}