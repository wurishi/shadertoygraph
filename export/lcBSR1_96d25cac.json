{"ver":"0.1","info":{"id":"lcBSR1","date":"1706020524","viewed":20,"name":"Twin Synchronized Dancecones","username":"PG_TG","description":"Description","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["tag"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*------------------------------\n  TWIN SYNCHRONIZED DANCECONES\n------------------------------*/\n\n#define PI acos(-1.0)\n\n// CIRCLE FUNCTION\nvec4 circle(vec2 uv, vec2 pos, float rad, vec3 col, bool edg, float smt) {\n    float value = distance(pos, uv);\n\n    if (edg) // Smooth edges mode\n        value = smoothstep(value, value + smt, rad);\n    else     // Hard edges mode\n        value = step(value, rad);\n    \n    return vec4(col, 1. - value);\n}\n\n// ROTATION FUNCTION\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle), -sin(_angle),\n                sin(_angle), cos(_angle));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Secondary UV for vignette\n    vec2 uv2 = uv;\n    uv2 *= 1.0 - uv2.yx;\n\n    // Aspect Ratio Fix\n    uv = uv * 2. - 1.;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    // UV Movement\n    uv *= rotate2d(iTime/2.);\n    uv *= 4.0 + cos(iTime/10.);\n    \n    // Draw circle stacks\n    vec4 background, foreground;\n    background = vec4(1., 0., 0., 1.0);\n    for(float i = 0.; i <= 64.; i += 1.) {\n\n        //LEFT CIRCLES\n        foreground = circle(\n            uv,\n            vec2(sin(iTime + PI/24. * i) * 2.0 - 6.0, cos(iTime + PI/24. * i) * 2.0),\n            16.0 - i * 0.25,\n            vec3(1. - i * 0.025),\n            false,\n            1.0\n        );\n        background = mix(foreground, background, foreground.a);\n        foreground = circle(\n            uv,\n            vec2(sin(iTime + PI/24. * i) * 2.0 - 6.0, cos(iTime + PI/24. * i) * 2.0),\n            15.95 - i * 0.25,\n            vec3(i * 0.025),\n            false,\n            1.0\n        );\n        foreground.xyz = vec3(foreground.x * 0.66, foreground.y * 0.85, foreground.z);\n        background = mix(foreground, background, foreground.a);\n\n        //RIGHT CIRCLES\n        foreground = circle(\n            uv,\n            vec2(-sin(iTime + PI/24. * i) * 2.0 + 6.0, -cos(iTime + PI/24. * i) * 2.0),\n            16.0 - i * 0.25,\n            vec3(i * 0.025),\n            false,\n            1.0\n        );\n        foreground.xyz = vec3(foreground.x * 0.66, foreground.y * 0.85, foreground.z);\n        background = mix(foreground, background, foreground.a);\n        foreground = circle(\n            uv,\n            vec2(-sin(iTime + PI/24. * i) * 2.0 + 6.0, -cos(iTime + PI/24. * i) * 2.0),\n            15.95 - i * 0.25,\n            vec3(1. - i * 0.025),\n            false,\n            1.0\n        );\n        background = mix(foreground, background, foreground.a);\n    }\n\n    // Vignette Layer\n    float vig = uv2.x * uv2.y * 32.;\n    vig = pow(vig, 0.66);\n    foreground = vec4(vig);\n    \n    // Output to screen\n    fragColor = mix(foreground, background, foreground.a);\n}","name":"Image","description":"","type":"image"}]}