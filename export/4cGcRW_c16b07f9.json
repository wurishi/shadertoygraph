{"ver":"0.1","info":{"id":"4cGcRW","date":"1731520944","viewed":56,"name":"TP IMAGE -V2","username":"elisa88","description":"TP dans le cadre de l'UE Informatique Graphique","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["billeetcylindrequitournent"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// Modeling\n// Eric Galin\n\n// RATOANDROMANANA Iavosoa P2108878\n// AIT BELKACEM ELISA P2414123\n\nstruct Ray{\n    vec3 o;// Origin\n    vec3 d;// Direction\n};\n\nstruct Val {\n  float v; // Signed distance\n  int c; // Cost\n};\n\n// Compute point on ray\n// ray : The ray\n//   t : Distance\nvec3 Point(Ray ray,float t)\n{\n    return ray.o+t*ray.d;\n}\n\n// Random direction in a hemisphere\n// seed : Integer seed, from 0 to N\n//    n : Direction of the hemisphere\nvec3 Hemisphere(int seed,vec3 n)\n{\n    float a=fract(sin(176.19*float(seed)));// Uniform randoms\n    float b=fract(sin(164.19*float(seed)));\n    \n    float u=2.*3.1415*a;// Random angle\n    float v=acos(2.*b-1.);// Arccosine distribution to compensate at poles\n    \n    vec3 d=vec3(cos(u)*cos(v),sin(u)*cos(v),sin(v));// Direction\n    if(dot(d,n)<0.){d=-d;}// Hemisphere\n    \n    return d;\n}\n\n// Camera -------------------------------------------------------------------------------\n\n// Rotation matrix around z axis\n// a : Angle\nmat3 Rz(float a)\n{\n  float sa=sin(a);float ca=cos(a);\n  return mat3(ca,sa,0.,-sa,ca,0.,0.,0.,1.);\n}\n\n// Compute the ray\n//      m : Mouse position\n//      p : Pixel\nRay CreateRay(vec2 m,vec2 p)\n{\n  float a=3.*3.14*m.x;\n  float le=3.5;\n  \n  // Origin\n  vec3 ro=vec3(37.,0.,15.);\n  ro*=Rz(a);\n  \n  // Target point\n  vec3 ta=vec3(0.,0.,1.);\n  \n  // Orthonormal frame\n  vec3 w=normalize(ta-ro);\n  vec3 u=normalize(cross(w,vec3(0.,0.,1.)));\n  vec3 v=normalize(cross(u,w));\n  vec3 rd=normalize(p.x*u+p.y*v+le*w);\n  return Ray(ro,rd);\n}\n\n// Primitives -------------------------------------------------------------------------------\n\n// Sphere\n// p : point\n// c : center of skeleton\n// r : radius\nVal Sphere(vec3 p,vec3 c,float r)\n{\n  return Val(length(p-c)-r,1);\n}\n\n\n// Cylinder\n// p : point\n// c : center of skeleton\n// r : radius\n// h : height\nVal Cylinder(vec3 p, vec3 c, float r, float h) {\n    vec2 d = vec2(length(p.xz - c.xz), p.y - c.y); // Project to 2D\n    return Val(max(d.x - r, abs(d.y) - h * 0.5), 1); // Use a distance function for cylinder\n}\n\n\n// Plane \n// p : point\nVal Plane(vec3 p, vec3 n, vec3 o)\n{\n    return Val(dot((p-o),n),1);\n}\n\n\n// Operators\n\n// Union\n// a,b : field function of left and right sub-trees\nVal Union(Val a,Val b)\n{\n  return Val(min(a.v,b.v),a.c+b.c+1);\n}\n\n// Intersection\n// a,b : field function of left and right sub-trees\nVal Intersection(Val a, Val b)\n{\n    return Val(max(a.v,b.v),a.c+b.c+1);\n}\n\n//Différence\n// a,b : field function of left and right sub-trees\nVal Difference(Val a, Val b){\n    return Val(max(a.v,b.v),-(a.c+b.c+1));\n}\n\n// Boite\n// p: point\n// size: length of the sides\n// normX, normY, normZ: norm of the x, y and z axis\nVal Boite(vec3 p, vec3 size, vec3 normX, vec3 normY, vec3 normZ){\n    Val plan1 = Plane(p,normZ, normZ * size.z);\n    Val plan2 = Intersection(plan1, Plane(p, -normZ, -normZ * size.z));\n    Val plan3 = Intersection(plan2, Plane(p, normY, normY * size.y));\n    Val plan4 = Intersection(plan3, Plane(p, -normY, -normY * size.y));\n    Val plan5 = Intersection(plan4, Plane(p, normX, normX * size.x));\n    Val plan6 = Intersection(plan5, Plane(p, -normX, -normX * size.x));\n    return plan6;\n}\n\n// Rotation on the Z axis\n// p: point\n// theta: angle of rotation\nvec3 rotateZ(vec3 p, float angle) {\n  float s = sin(angle);\n  float c = cos(angle);\n\n  return mat3(\n    c, s, 0.0,\n    -s, c, 0.0,\n    0.0, 0.0, 1.0\n  ) * p;\n}\n\n// Rotation on the X axis\n// p: point\n// theta: angle of rotation\nvec3 rotateX(vec3 p,float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(1, 0, 0),\n        vec3(0, c, -s),\n        vec3(0, s, c)\n    ) * p;\n}\n\n// Rotation on the Y axis\n// p: point\n// theta: angle of rotation\nvec3 rotateY(vec3 p,float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, 0, s),\n        vec3(0, 1, 0),\n        vec3(-s, 0, c)\n    )* p;\n}\n// Noise deformation\n// p: point\nfloat noise(vec3 p) {\n    return sin(p.x * 2.0 + iTime) * cos(p.y * 1.0 + iTime);\n}\n\nfloat noise2(vec3 p){\n    return sin(p.x + p.y + p.z);\n}\n\nvec3 deformWithNoise(vec3 p) {\n    float n = noise(p);\n    p.x += n * 0.3;  \n    p.y += n * 0.3;  \n    p.z += n * 0.3;  \n    return p;\n}\n\n// Fractional Brownian Motion\n//p: point\n// layers:layers of noise\n// dec: decrementation of the amplitude\n// inc: incrementatin of the frequency\nfloat Brownian(vec3 p, int layers, float dec, float inc) {\n    float total = 0.0;\n    float frequency = 1.0;\n    float amplitude = 1.0;\n    float maxAmplitude = 0.0;\n\n    for (int i = 0; i < layers; i++) {\n        total += noise2(p * frequency) * amplitude;\n\n        maxAmplitude += amplitude;\n\n        frequency *= inc;\n        amplitude *= dec; \n    }\n\n    return total / maxAmplitude;  \n}\n\n// Wood texture\n//p: point\nvec3 wood(vec3 p) {\n    float noiseValue = Brownian(p, 5, 0.5, 2.0);\n\n    p.y += noiseValue * 0.1;\n\n    return p;\n}\n\n\n\n\n// Potential field of the object\n// p : point\n\nVal object(vec3 p)\n{\n    \n\n    // Déformation du point avec bruit et bois\n    vec3 rotZ = rotateZ(p, iTime); // Utilisation du point original sans homothétie\n    vec3 rotX = rotateX(p, iTime);\n    vec3 rotY = rotateY(p, iTime);\n    vec3 deformation = deformWithNoise(rotZ);\n    vec3 wood_text = wood(rotY);\n\n    // Déplacement des objets pour éviter les superpositions\n    Val v = Boite(deformation, vec3(3., 3., 3.), vec3(1., 0., 0.), vec3(0., 1., 0.), vec3(0., 0., 1.));\n    Val v2 = Boite(p, vec3(2., 2., 3.), vec3(1., 0., 0.), vec3(0., 3., 0.), vec3(0., 0., 3.));\n\n    // Déplacer les objets pour éviter qu'ils ne se chevauchent\n    Val s = Sphere(wood_text, vec3(6., 0., 0.), 3.);  // Sphère déplacée\n    Val cyl = Cylinder(wood_text, vec3(0.0, 5.0, 5.0), 1.0, 3.0); // Cylindre déplacé\n\n    // Appliquer les unions et ajuster les objets\n    v = Union(s, v);\n    v = Union(v, v2);\n    v = Union(v, cyl); // Union avec le cylindre déplacé\n\n    return v;\n}\n\n\n// Analysis of the scalar field -----------------------------------------------------------------\n\nconst int Steps=200;// Number of steps\nconst float Epsilon=.01;// Marching epsilon\n\n// Object normal\n// p : point\nvec3 ObjectNormal(vec3 p)\n{\n  const float eps=.001;\n  vec3 n;\n  Val val=object(p);\n  float v=val.v;\n  n.x=object(vec3(p.x+eps,p.y,p.z)).v-v;\n  n.y=object(vec3(p.x,p.y+eps,p.z)).v-v;\n  n.z=object(vec3(p.x,p.y,p.z+eps)).v-v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\n// ray : The ray\n//   e : Maximum distance\n//   h : hit\n//   s : Number of steps\n//   c : cost\nbool SphereTrace(Ray ray,float e,out float t,out int s,out int c)\n{\n  bool h=false;\n  \n  // Start at the origin\n  t=0.0;\n  c=0;\n  \n  for(int i=0;i<Steps;i++)\n  {\n    s=i;\n    vec3 p=Point(ray,t);\n    Val val=object(p);\n    float v=val.v;\n    c+=val.c;\n    // Hit object\n    if(v<0.)\n    {\n      h=true;\n      break;\n    }\n    // Move along ray\n    t+=max(Epsilon,v);\n    // Escape marched too far away\n    if(t>e)\n    {\n      break;\n    }\n  }\n  return h;\n}\n\n// Lighting -------------------------------------------------------------------------------\n\n// Background color\n// ray : Ray \nvec3 background(Ray ray)\n{\n  return mix(vec3(.45,.55,.99),vec3(.65,.69,.99),ray.d.z*.5+.5);\n}\n\n// Shadowing\n// p : Point\n// n : Normal\n// l : Light direction\nfloat Shadow(vec3 p,vec3 n,vec3 l)\n{\n  float t;\n  int s;\n  int c;\n  bool hit=SphereTrace(Ray(p+Epsilon*n,l),100.,t,s,c);\n  if(!hit)\n  {\n    return 1.;\n  }\n  return 0.;\n}\n\n// Shading and lighting\n//   p : Point\n//   n : Normal at point\n// eye : Eye direction\nvec3 Shade(vec3 p,vec3 n,Ray eye)\n{\n  // Point light\n  const vec3 lp=vec3(5.,10.,25.);\n  \n  // Light direction to point light\n  vec3 l=normalize(lp-p);\n  \n  // Ambient color\n  vec3 ambient=.25+.25*background(Ray(p,n));\n  \n  // Shadow computation\n  float shadow=Shadow(p,n,l);\n  \n  // Phong diffuse\n  vec3 diffuse=.35*clamp(dot(n,l),0.,1.)*vec3(1.,1.,1.);\n  \n  // Specular\n  vec3 r=reflect(eye.d,n);\n  vec3 specular=.15*pow(clamp(dot(r,l),0.,1.),35.)*vec3(1.,1.,1.);\n  vec3 c=ambient+shadow*(diffuse+specular);\n  return c;\n}\n\n// Shading according to the number of steps in sphere tracing\n// n : Number of steps\nvec3 ShadeSteps(int n,int m)\n{\n  float t=float(n)/(float(m));\n  return.5+mix(vec3(.05,.05,.5),vec3(.65,.39,.65),t);\n}\n\n\n\n\n// Image\nvoid mainImage(out vec4 color,in vec2 pxy)\n{  \n  // Convert pixel coordinates\n    vec2 pixel=(-iResolution.xy+2.*pxy)/iResolution.y;\n\n  // Mouse\n  vec2 m=iMouse.xy/iResolution.xy;\n  \n  // Camera\n  Ray ray=CreateRay(m,pixel);\n  \n  // Trace ray\n  \n  // Hit and number of steps\n  float t=0.0;\n  int s=0;\n  int c;\n  bool hit=SphereTrace(ray,100.,t,s,c);\n  \n  // Shade background\n  vec3 rgb=background(ray);\n  \n  if(hit)\n  {\n    // Position\n    vec3 p=Point(ray,t);\n    \n    // Compute normal\n    vec3 n=ObjectNormal(p);\n    \n    // Shade object with light\n    rgb=Shade(p,n,ray);\n  }\n  \n  // Uncomment this line to shade image with false colors representing the number of steps\n    //rgb=ShadeSteps(s,Steps);\n  \n   // Uncomment this line to shade cost\n  //rgb=ShadeSteps(c,500);\n  color=vec4(rgb,1.);\n}\n\n","name":"Image","description":"","type":"image"}]}