{"ver":"0.1","info":{"id":"mlj3Wd","date":"1674148387","viewed":291,"name":"Distance and direction from edge","username":"MysteryPancake","description":"Very useful edge properties for different applications. Mouse controls radius :)\nFrom top to bottom: direction relative to interior, direction relative to edge, distance from edge, distance from interior","likes":14,"published":3,"flags":0,"usePreview":0,"tags":["2d","chroma","sdf","distort","greenscreen","distance","edge","normal","chromakey","matte","compositing","direction"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float TAU = 6.28318530;\n\nfloat getAlpha(vec3 col) {\n    const vec3 green = vec3(0.0, 1.0, 0.0);\n    return step(0.7, distance(col, green));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\n    const float dirSteps = 64.0;\n    \n    // Control radius with mouse\n    float radius = iMouse.z > 0.0 ? iMouse.x / iResolution.x * 64.0 : sin(iTime * 4.0) * 8.0 + 16.0;\n    \n    vec2 uv = fragCoord / iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n    float alpha = getAlpha(fragColor.rgb);\n    \n    // Correct aspect ratio\n    vec2 aspect = 1.0 / vec2(textureSize(iChannel0, 0));\n    \n    // STEP 1: Find average direction away from edge\n    \n    vec2 dirAvg = vec2(0.0);\n    bool interior = false;\n    \n    for (float i = 0.0; i < TAU; i += TAU / dirSteps) {\n        // Move in a circle to find edges within radius\n        vec2 dir = vec2(sin(i), cos(i));\n        vec4 col = texture(iChannel0, uv + dir * aspect * radius);\n        \n        // Edge was found, accumulate for average\n        float neighbor = getAlpha(col.rgb);\n        if (alpha != neighbor) {\n            dirAvg += dir;\n            interior = alpha > neighbor;\n        }\n    }\n    \n    // No edges within radius\n    if (length(dirAvg) <= 0.0) {\n        vec3 bg = uv.y < 0.5 ? vec3(0.5) : vec3(0.5, 0.5, 1.0);\n        fragColor.rgb = mix(bg, fragColor.rgb, alpha);\n        return;\n    }\n    \n    // Calculate average direction\n    dirAvg = normalize(dirAvg);\n\n    // STEP 2: Raycast in average direction until an edge is hit\n    \n    float dist = radius * 0.5;\n    float move = dist * 0.5;\n    // Binary search works better than linear search\n    for (int i = 0; i < 8; i++, move *= 0.5) {\n        vec4 col = texture(iChannel0, uv + dirAvg * aspect * dist);\n        dist += alpha != getAlpha(col.rgb) ? -move : move;\n    }\n    \n    // STEP 3: Calculate distance and direction from interior\n    \n    vec2 interiorDir = interior ? dirAvg : -dirAvg;\n    float interiorDist = interior ? radius - dist : dist + radius;\n\n    if (uv.y > 0.75) {\n        // Direction relative to interior (range -1 to 1)\n        fragColor.rgb = vec3(interiorDir * 0.5 + 0.5, 1.0);\n    } else if (uv.y > 0.5) {\n        // Direction relative to edge (range -1 to 1)\n        fragColor.rgb = vec3(dirAvg * 0.5 + 0.5, 1.0);\n    } else if (uv.y > 0.25) {\n        // Distance from edge\n        fragColor.rgb = vec3(dist / radius);\n    } else {\n        // Distance from interior\n        fragColor.rgb = vec3(interiorDist / radius * 0.5);\n    }\n}","name":"Image","description":"","type":"image"}]}