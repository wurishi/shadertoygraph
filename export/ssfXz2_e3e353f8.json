{"ver":"0.1","info":{"id":"ssfXz2","date":"1618864612","viewed":55,"name":"Titova_Lyubov_313","username":"NocTQx","description":"Титова Любовь, 313 группа\nv1v0","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["firecube"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    fragColor = texture(iChannel0, uv) / float(iFrame + 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const vec3 FIREBALL_ANIM = vec3(0.0, -3.0, 1.5);\n\nconst vec3 CAMERA_POS = vec3(3, 2.7, -6);\n\n\nconst vec3 LIGHT1_POS = vec3(2, 1.74, 3);\nconst float LIGHT1_RADIUS = 0.3;\nconst vec3 LIGHT1_COLOR = vec3(1, 0, 1);\n\nconst vec3 LIGHT2_POS = vec3(-2, 1, 0.5);\nconst float LIGHT2_RADIUS = 0.2;\nconst vec3 LIGHT2_COLOR = vec3(0, 0, 1);\nvec3 randDir;\n\nconst float INF = 1e10;\nconst float NOISE_AMP = 0.06;\nconst float NOISE_FREQ = 4.0;\nconst float TABLE_RAD = 30.0;\nconst int MARCH_STEPS = 3;\nconst int NOISE_STEPS = 10;\n\n\nstruct Sphere {\n    vec3 pos;\n    vec3 color;\n    float radius;\n    float atten;\n};\nSphere Fireball = Sphere(vec3(0.0), vec3(0.0), 0.5, 0.0);\n\n\nconst vec3 cube0 = vec3(-1.0, -0.9, -1.0);\nconst vec3 cube1 = vec3(1.0, -0.9, -1.0);\nconst vec3 cube2 = vec3(-1.0, -0.9, 1.0); \nconst vec3 cube3 = vec3(1.0, -0.9, 1.0);\nconst vec3 cube4 = vec3(-1.0, 0.9, -1.0); \nconst vec3 cube5 = vec3(1.0, 0.9, -1.0); \nconst vec3 cube6 = vec3(-1.0, 0.9, 1.0); \nconst vec3 cube7 = vec3(1.0, 0.9, 1.0); \n\nstruct planeCube {\n    vec3[4] p;\n};\n\nconst planeCube p1 = planeCube(vec3[4](cube0, cube1, cube3, cube2));\nconst planeCube p2 = planeCube(vec3[4](cube0, cube4, cube6, cube2));\nconst planeCube p3 = planeCube(vec3[4](cube1, cube5, cube4, cube0));\nconst planeCube p4 = planeCube(vec3[4](cube4, cube5, cube7, cube6));\nconst planeCube p5 = planeCube(vec3[4](cube3, cube6, cube7, cube3));\nconst planeCube p6 = planeCube(vec3[4](cube3, cube7, cube5, cube1));\n\nconst planeCube[] p = planeCube[6](p1, p2, p3, p4, p5, p6);\n\n\nfloat tracePlane(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.2 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    \n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) >= 100.0) {\n        return INF;\n    }\n    normal = vec3(0, 1, 0);\n    return t;\n}\n\nfloat traceCubePlane(vec3 pos, vec3 dir, vec3[4] s, out vec3 normal) {\n\tnormal = normalize(cross(s[3] - s[0], s[1] - s[0]));\n    float d = dot(normal, dir);\n    if (abs(d) <  0.0001f) {\n        return INF;\n    }\n    float t = dot(s[0] - pos, normal) / d;\n    if (t < 0.0){\n    \treturn INF;\n    }\n\n    vec3 worldPos = pos + dir * t;\n    float r1 = dot(cross(s[0] - worldPos, s[1] - worldPos), normal);\n    float r2 = dot(cross(s[1] - worldPos, s[2] - worldPos), normal);\n    float r3 = dot(cross(s[2] - worldPos, s[3] - worldPos), normal);\n    float r4 = dot(cross(s[3] - worldPos, s[0] - worldPos), normal);\n    if ((r1 * r2 > 0.0) && (r2 * r3 > 0.0) && (r3 * r4 > 0.0)) {\n        return t;\n    }\n    return INF;\n}\n\nfloat traceCube(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = INF;\n    vec3 tmp_n;\n    for (int i = 0; i < p.length(); i++) {\n        float curT = traceCubePlane(pos, dir, p[i].p, tmp_n);\n        if ( curT < t) {\n            t = curT;\n            normal = tmp_n;\n        }\n    }\n    return t;\n}\n\nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal) {\n\n    float a = dot(dir, dir);\n    float b = dot(pos, dir);\n    float c = dot(pos, pos) - r * r;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    float t = -b - sqrt(D);\n    if (t > 0.0) {\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    t = -b + sqrt(D);\n    if (t < 0.0) {\n        return INF;\n    }\n    normal = normalize(pos + t * dir);\n    return t;\n}\nfloat traceCylinder(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.0 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) < 1.5) {\n        normal = vec3(0, 1, 0);\n        return t;\n    }\n    \n    // dot(pos + t * dir, pos + t * dir) == r * r;\n    // dot(pos, pos) + 2 * t * dot(pos, dir) + t * t * dot(dir, dir) == r * r\n    // t * t + 2.0 * t * dot(pos, dir) + dot(pos, pos) - r * r == 0\n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - 1.5;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    t = (-b - sqrt(D)) / a;\n    if (t > 0.0) {\n        worldPos = t * dir + pos;\n        if (worldPos.y <= -1.0) {\n            normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n            return t;\n        }\n    }\n    t = (-b + sqrt(D)) / a;\n    if (t <= 0.0) {\n        return INF;\n    }\n    worldPos = t * dir + pos;\n    if (worldPos.y <= -1.0) {\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    }\n    return INF;\n}\nvec3 refraction(vec3 v, vec3 normal, float n1, float n2) {\n    if (dot(v, normal) < 0.0) {\n        normal = -normal;\n    }\n    float cosA = dot(v, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3 tang = normalize(v - cosA * normal);\n    float sinB = sinA / n2 * n1;\n    float cosB = sqrt(1.0 - sinB * sinB);\n    return sinB * tang + cosB * normal;\n}\n\nbool isOccluded(vec3 pos, vec3 target) {\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n    \n    vec3 cubeNrm;\n    float cubeT = traceCube(pos, dir, cubeNrm);\n    if (cubeT < dist) \n       return true;\n    vec3 cylNorm;\n    float cylT = traceCylinder(pos, dir, cylNorm);\n    if (cylT < dist) \n        return true;\n    return false; \n}\n\n\nvec3 computeLight(vec3 pos, vec3 color, vec3 normal){\n    vec3 toLight1 = LIGHT1_POS - pos;\n    float distSq1 = dot(toLight1, toLight1);\n    float att1 = isOccluded(pos, LIGHT1_POS + randDir*LIGHT1_RADIUS) ? 0.0 : 10.0f / distSq1;\n    vec3 toLight2 = LIGHT2_POS - pos;\n    float distSq2 = dot(toLight2, toLight2);\n    float att2 = isOccluded(pos, LIGHT2_POS + randDir*LIGHT2_RADIUS) ? 0.0 : 10.0f / distSq2;\n    return color * (\n        max(0.0, dot(normal, normalize(toLight1))) * att1 * LIGHT1_COLOR +\n        max(0.0, dot(normal, normalize(toLight2))) * att2 * LIGHT2_COLOR +\n        + texture(iChannel1, normal).rgb * 0.5);\n    \n}\n\n# define mod289(x) (x - floor(x * (1.0 / 100.0)) * 100.0)\n\n\nvec4 permute(vec4 x) {\n    return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r) {\n    return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v)\n{\n\tconst vec2  C = vec2(1.0/6.0, 1.0/3.0);\n\tconst vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n\tvec3 i  = floor(v + dot(v, C.yyy));\n\tvec3 x0 = v - i + dot(i, C.xxx);\n\n\tvec3 g = step(x0.yzx, x0.xyz);\n\tvec3 l = 1.0 - g;\n\tvec3 i1 = min(g.xyz, l.zxy);\n\tvec3 i2 = max(g.xyz, l.zxy);\n\tvec3 x1 = x0 - i1 + C.xxx;\n\tvec3 x2 = x0 - i2 + C.yyy;\n\tvec3 x3 = x0 - D.yyy;\n\n\ti = mod289(i);\n\tvec4 p = permute( permute( permute( i.z + vec4(0.0, i1.z, i2.z, 1.0)) + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n\tfloat n_ = 0.142857142857;\n\tvec3  ns = n_ * D.wyz - D.xzx;\n\tvec4 j = p - 49.0 * floor(p * ns.z * ns.z);\n\tvec4 x_ = floor(j * ns.z);\n\tvec4 y_ = floor(j - 7.0 * x_);\n\tvec4 x = x_ *ns.x + ns.yyyy;\n\tvec4 y = y_ *ns.x + ns.yyyy;\n\tvec4 h = 1.0 - abs(x) - abs(y);\n\tvec4 b0 = vec4(x.xy, y.xy);\n\tvec4 b1 = vec4(x.zw, y.zw);\n\tvec4 s0 = floor(b0) * 2.0 + 1.0;\n\tvec4 s1 = floor(b1) * 2.0 + 1.0;\n\tvec4 sh = -step(h, vec4(0.0));\n\tvec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;\n\tvec4 a1 = b1.xzyw + s1.xzyw * sh.zzww;\n\tvec3 p0 = vec3(a0.xy, h.x);\n\tvec3 p1 = vec3(a0.zw, h.y);\n\tvec3 p2 = vec3(a1.xy, h.z);\n\tvec3 p3 = vec3(a1.zw, h.w);\n\n\tvec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n\tp0 *= norm.x;\n\tp1 *= norm.y;\n\tp2 *= norm.z;\n\tp3 *= norm.w;\n\n\tvec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n\tm = m * m;\n\treturn 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3)));\n}\n\nfloat turbulence(vec3 position, float minFreq, float maxFreq, float qWidth)\n{\n\tfloat value = 0.0;\n\tfloat cutoff = clamp(0.5/qWidth, 0.0, maxFreq);\n\tfloat fade;\n\tfloat fOut = minFreq;\n\tfor(int i=NOISE_STEPS ; i>=0 ; i--)\n\t{\n\t\tif(fOut >= 0.5 * cutoff) break;\n\t\tfOut *= 2.0;\n\t\tvalue += abs(snoise(position * fOut))/fOut;\n\t}\n\tfade = clamp(2.0 * (cutoff-fOut)/cutoff, 0.0, 1.0);\n\tvalue += fade * abs(snoise(position * fOut))/fOut;\n\treturn 3.0-value;\n}\n\nfloat sphere_dist(vec3 position, float r) {\n\treturn length(position - Fireball.pos) - r;\n}\n\n\n#define Color1 vec3(1.0, 1.0, 1.0)\n#define Color2 vec3(1.0, 0.5, 0.2)\n#define Color3 vec3(1.0, 0.03, 0.0)\n#define Color4 vec3(0.1, 0.02, 0.0)\n\n#define saturate(a) clamp(a, 0.0, 1.0)\n\nvec3 shade(float distance) {\n\tfloat c1 = saturate(distance*5.0 + 0.5);\n\tfloat c2 = saturate(distance*5.0);\n\tfloat c3 = saturate(distance*3.4 - 0.5);\n\n\tvec3 a = mix(Color1,Color2, c1);\n\tvec3 b = mix(a,     Color3, c2);\n\treturn \t mix(b,     Color4, c3);\n}\n\nfloat render_ball(vec3 position, out float distance) {\n\tfloat noise = turbulence(position * NOISE_FREQ + FIREBALL_ANIM * 1.0, 0.1, 1.5, 0.03) * NOISE_AMP;\n\tnoise = saturate(abs(noise));\n\n\tdistance = sphere_dist(position, Fireball.radius) - noise;\n\treturn noise;\n}\n\nvec3 ray_march(vec3 ray_origin, vec3 ray_step) {\n\tvec3 position = ray_origin;\n\tfloat distance;\n\tfloat displacement;\n\tfor(int step = 0; step < MARCH_STEPS; step++)\n\t{\n\t\tdisplacement = render_ball(position, distance);\n\t\tif(distance < 0.05) {\n            break;\n        }\n\t\tposition += ray_step * distance;\n\t}\n\treturn mix(shade(displacement), vec3(0, 0, 0), float(distance >= 0.5));\n}\n\nbool intersect_sphere(vec3 ro, vec3 rd, vec3 pos, float radius, out vec3 i_point) {\n\tvec3 rel_distance = (ro - pos);\n\tfloat b = dot(rel_distance, rd);\n\tfloat c = dot(rel_distance, rel_distance) - radius * radius;\n\tfloat d = b*b - c;\n\ti_point = ro + rd*(-b - sqrt(d));\n\treturn d >= 0.0;\n}\n\nvec3 get_fireball_col(vec2 p) {\n\tfloat rotx = 0.6;\n\tfloat roty = 0.8;\n\tfloat zoom = 10.0;\n\tvec3 ro = zoom * normalize(vec3(cos(roty), cos(rotx), sin(roty)));\n\tvec3 ww = normalize(vec3(0.0, 0.0, 0.0) - ro);\n\tvec3 uu = normalize(cross( vec3(0.0, 1.0, 0.0), ww));\n\tvec3 vv = normalize(cross(ww, uu));\n\tvec3 rd = normalize(p.x*uu + p.y*vv + 1.5*ww);\n\n\tvec3 col;\n\tvec3 origin;\n\n\tif(intersect_sphere(ro, rd, Fireball.pos, Fireball.radius + NOISE_AMP*12.0, origin))\n\t{\n\t\tcol = ray_march(origin, rd);\n\t}\n\n    return vec3(0, col.g, col.b);\n}\n\nfloat burn_snoise(vec3 uv, float res)\n{\n\tconst vec3 s = vec3(1e0, 1e2, 1e3);\n\tuv *= res;\n\tvec3 uv0 = floor(mod(uv, res))*s;\n\tvec3 uv1 = floor(mod(uv+vec3(1.), res))*s;\n\tvec3 f = fract(uv);\n\tf = f*f*(3.0-2.0*f);\n\tvec4 v = vec4(uv0.x+uv0.y+uv0.z, uv1.x+uv0.y+uv0.z,\n\t              uv0.x+uv1.y+uv0.z, uv1.x+uv1.y+uv0.z);\n\tvec4 r = fract(sin(v*1e-1)*1e3);\n\tfloat r0 = mix(mix(r.x, r.y, f.x), mix(r.z, r.w, f.x), f.y);\n\tr = fract(sin((v + uv1.z - uv0.z)*1e-1)*1e3);\n\tfloat r1 = mix(mix(r.x, r.y, f.x), mix(r.z, r.w, f.x), f.y);\n\treturn mix(r0, r1, f.z) * 2.0 - 1.0;\n}\n\nvec3 burn (vec2 p)\n{\n\tfloat color1 = 4.0 - (2.0 * length(2.5 * p));\n\tvec3 coord = vec3(atan(p.x, p.y) / 6.2832 + 0.5, length(p) * 0.4, 0.5);\n\tfor(int i = 1; i <= 3; i++)\n\t{\n\t\tfloat power = pow(2.0, float(i));\n\t\tcolor1 += 0.5*(1.5 / power) * burn_snoise(coord + vec3(0.0, -0.05, -0.01), power * 16.0);\n\t}\n\tcolor1 *= 0.5;\n\n    return vec3( color1, pow(max(color1, 0.0), 2.0)*0.4, pow(max(color1, 0.0), 3.0) * 0.05);\n    return vec3( 0, 0, pow(max(color1, 0.0), 3.0) * 0.15);\n} \n\nfloat pow2(float x) {\n    return x * x;\n}\n\nfloat rand(float frame) {\n    return fract(sin(dot(vec3(frame), vec3(12.9898, 78.233, 45.5432))) * 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n   vec3 randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    randDir = normalize(randVals - 0.5);\n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (randVals.xy - 0.5)) / iResolution.x;\n    vec3 front = normalize(-CAMERA_POS);\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = normalize(cross(front, up));\n    up = normalize(cross(right, front));\n    vec3 viewVec = normalize(front + right * uv.x + up * uv.y); \n    vec4 colbuf = vec4(0, 0, 0, 0);\n    \n\tconst int EMISSION = 0;\n\tconst int DIFFUSE = 1;\n\tconst int REFLECTION = 2;\n\tconst int REFRACTION = 3;\n    \n    vec3 curPos = CAMERA_POS;\n    vec3 curDir = viewVec;\n    const float AIR_N = 1.0;\n    const float GLASS_N = 1.5;\n    float n1 = AIR_N;\n    float n2 = GLASS_N;\n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N + GLASS_N);\n    \n    vec3 colorMult = vec3(1, 1, 1);\n    \n\tfor (int i = 0; i < 10; ++i) {\n\t\tfloat t = INF;\n\t\tint materialType;\n\t\tvec3 color;\n        vec3 normal;\n          \n        vec3 planeNorm;\n\t \tfloat planeT = tracePlane(curPos, curDir, planeNorm);\n\t\tif (planeT < t) {\n\t\t\tt = planeT;\n\t\t\tmaterialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n\t\t\tcolor = texture(iChannel0, worldPos.xz * 0.1).rgb;\n            normal = planeNorm;\n\t\t}\n       \n        vec3 l1Norm;\n        float light1T = traceSphere(curPos - LIGHT1_POS, curDir, LIGHT1_RADIUS, l1Norm);\n\t\tif (light1T < t) {\n\t\t\tt = light1T;\n\t\t\tmaterialType = EMISSION;\n\t\t\tcolor = vec3(1, 0, 1);\n            normal = l1Norm;\n\t\t}\n        vec3 l2Norm;\n        float light2T = traceSphere(curPos - LIGHT2_POS, curDir, LIGHT2_RADIUS, l2Norm);\n\t\tif (light2T < t) {\n\t\t\tt = light2T;\n\t\t\tmaterialType = EMISSION;\n\t\t\tcolor = vec3(0, 0, 1);\n            normal = l2Norm;\n\t\t}        \n        \n        vec3 cubeNrm;\n        float cubeT = traceCube(curPos, curDir, cubeNrm);\n        if (cubeT < t) {\n            t = cubeT;\n            normal = -cubeNrm;\n            if (randVals.x < GLASS_R) {\n                materialType = REFLECTION;\n            } else {\n                colorMult *= vec3(0.4, 0.7, 1);\n                materialType = REFRACTION;\n                vec2 p = (fragCoord.xy / iResolution.xy) - 0.5;\n                p.x *= iResolution.x / iResolution.y;\n                vec3 fb = get_fireball_col(p);\n                vec3 fo = burn(p);\n                colbuf += vec4(mix(fb, fo * vec3(0.7, 0.5, 0.5), 0.7), 0.8); \n            }\n        }\n        \n         vec3 cylNorm;\n        float cylT = traceCylinder(curPos, curDir, cylNorm);\n        if (cylT < t) {\n            t = cylT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel2, worldPos.xz * worldPos.y).rgb;\n            normal = cylNorm;\n        }\n        \n       \n        if (t != INF) {\n            vec3 worldPos = t * curDir + curPos;\n            colbuf += vec4(texture(iChannel0, worldPos.xz).rgb * 0.1, 0.0);\n            if (materialType == EMISSION) {\n                colbuf += vec4(color * colorMult, 0);\n                break;\n            } else if (materialType == DIFFUSE) {\n                colbuf += vec4(computeLight(worldPos, color, normal) * colorMult, 0);\n                break;\n            } else if (materialType == REFLECTION) {\n                curDir = reflect(curDir, normal);\n                curPos = worldPos + curDir * 1e-3;\n            } else if (materialType == REFRACTION) {\n                curDir = refraction(curDir, normal, n1, n2);\n                curPos = worldPos + curDir * 1e-3;\n            }\n        } else {\n            colbuf += vec4(texture(iChannel1, viewVec).rgb * colorMult * 0.07, 0);\n        }\n    }\n    fragColor = vec4(colbuf);\n}\n/*\n  if (t != INF){\n\t\t\tvec3 worldPos = t * curDir + curPos;\n\t\t\tfragColor = texture(iChannel0, worldPos.xz);\n\t\t\tif (materialType == EMISSION){\n\t\t\t\tfragColor.rgb = color * colorMult;\n                break;\n\t\t\t}\n            else if (materialType == DIFFUSE){\n                fragColor.rgb = computeLight(worldPos, color, normal) * colorMult;\n                break;\n            }\n            else if (materialType == REFLECTION){\n                curDir = reflect(viewVec, normal);\n                curPos = worldPos + curDir*1e-5;\n            }\n            else if (materialType == REFRACTION) {\n                curDir = refraction(curDir, normal, n1, n2);\n                curPos = worldPos + curDir * 1e-5;\n                \n            }\n\t\t}\n\t\telse {\n\t\t\tfragColor.rgb = texture(iChannel1, viewVec).rgb * colorMult;\n\t\t}\n\t}\n}      */\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv) + texture(iChannel1, uv);\n}","name":"Buffer B","description":"","type":"buffer"}]}