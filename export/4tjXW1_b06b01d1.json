{"ver":"0.1","info":{"id":"4tjXW1","date":"1444165634","viewed":210,"name":"Shapys","username":"d1kkop","description":"Shapies","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","shapes"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"#define t iTime\n#define EPS 0.01\n#define NUM_SHAPES 18\n#define RGLOBAL 1.\n\n\nfloat hash(float v)\n{\n    v += 83165.8123;\n    //v += pow (2.8, 3.123912+fract(v)) * 88373.8123;\n    v = fract ( sin ( v ) );\n    return v;\n} \n\nfloat bt(float h, float lo, float hi)\n{\n    float a = step( h, hi );\n    float b = step( lo, h );\n    return a*b;\n}\n\nfloat invert(float f, float bor)\n{\n    return bor - clamp ( f, .0, bor );\n}\n\nfloat sphere(vec2 uv, vec2 p, float r)\n{\n    float dist = distance ( uv, p );\n   \tdist = step (dist, r) * invert ( dist, r );\n    return dist/r;\n}\n\nfloat star(vec2 uv, vec2 p, inout float r, float seg, float w, float ts)\n{\n    vec2 d=p-uv;\n    float tp = atan(d.y, d.x)+ts;\n    float add = sin(tp*seg)*w;\n    vec2 s;\n    s.x = cos(tp)+add*cos(tp);\n    s.y = sin(tp)+add*sin(tp);\n    float dist = sqrt (dot(s, s));\n    r+=dist*r;\n    return sphere ( uv, p, r );\n}\n\nfloat smoothrect(vec2 uv, vec2 p, float r, float ts)\n{\n    vec2 d=p-uv;\n    float tp = atan(d.y, d.x)+ts;\n    float c = (cos(2.*tp)+1.)*.5;\n    float sp = .3;\n    float a=1.-sp;\n    c *= sp;\n    float add=c;\n    vec2 s;\n    s.x = cos(tp);\n    s.y = sin(tp);\n    s.y = a*s.y+sign(s.y)*add;\n    float dist = sqrt(dot(s,s));\n    r+=dist*r;\n    return sphere( uv, p , r);\n}\n\n\nfloat edgefy(float r, float intens)\n{\n    intens = (1.-intens);\n    if (intens >= 1.0)\n        return 0.;\n    \n    float f=1.*pow(intens, 1.); \n    return f;\n}\n\n\nvec2 path(float d, float h)\n{\n    return vec2(sin(d/(h+1.)+h*h/(d+1.)), sin(3.*(d+h*h-d/(h+1.))));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    float asp = iResolution.x/iResolution.y;\n    uv = 2.*uv-1.;\n    uv.x*=asp;\n    \n    vec3 fcol = vec3(0);\n    float itm = 1.;\n    for (int i = 0; i < NUM_SHAPES; i++)\n    {\n        float fi = float(i);\n        float h1 = hash(fi);\n        float h2 = hash(1./(fi+2.));\n        vec2 p = path(h1+t*(fi+1.)*.1, h2/(h1+2.));\n        p.x*=asp;\n        \n        vec3 col = vec3 ( hash (fi)*.7+.3, hash(fi*fi)*.8+.2, hash(fi*fi*fi)*.9+.1);\n\n        float prob = hash(h1+h2*h2);\n        float rot = prob*2.-1.;\n        \n        float intens = 0.;\n        float r = .6*RGLOBAL;\n#define pb(a,b) bt(prob,a,b)\n        intens += sphere ( uv, p, r ) * pb(0.,.2);\t\t\n        r = .2*RGLOBAL;\n        intens += star ( uv ,p, r, 5., .3, t*3.*rot ) * pb(.2,.7);\n        r = .2*RGLOBAL;\n        intens += smoothrect ( uv ,p, r, t*1.2*-rot ) * pb(.7,1.);\n        intens = pow(intens, 0.3);\n        if (intens > 0.)\n        {\n            float sedge = edgefy( r, intens );\n            fcol = col*intens + sedge*vec3(0.,0.,1.)*.4;\n            break;\n        }\n    }\n\n    fragColor = vec4(fcol, 1);\n    \n}\n","name":"","description":"","type":"image"}]}