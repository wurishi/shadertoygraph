{"ver":"0.1","info":{"id":"ttfXzX","date":"1563863728","viewed":131,"name":"CrossWormhole","username":"WeeGyan","description":"Thx to the amazing torus effect by","likes":0,"published":1,"flags":48,"usePreview":0,"tags":["glass"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n//============================================================================\n// Constants.\n//============================================================================\nconst int NUM_LIGHTS = 2;\nconst int NUM_MATERIALS = 5;\nconst int NUM_PLANES = 3;\nconst int NUM_SPHERES = 4;\nconst int NUM_BOXES = 0;\n//const int NUM_RSDS = \nconst vec3 BACKGROUND_COLOR = vec3( 0.1, 0.2, 0.6 );\n\nconst ivec2 txoffsets = ivec2(0,0);\nconst ivec2 txSphereCenter = ivec2(1,0);\nconst ivec2 txSphereMov = ivec2(2,0);\n // Vertical field-of-view angle of camera. In radians.\nconst float FOVY = 50.0 * 3.1415926535 / 180.0; \n\n// Use this for avoiding the \"epsilon problem\" or the shadow acne problem.\nconst float DEFAULT_TMIN = 10.0e-4;\n\n// Use this for tmax for non-shadow ray intersection test.\nconst float DEFAULT_TMAX = 10.0e6;\n\n// Equivalent to number of recursion levels (0 means ray-casting only).\n// We are using iterations to replace recursions.\nconst int NUM_ITERATIONS = 2;\n\nconst float roadShadowWidth = 0.6;\nconst float roadShadowLength = 10.0;\nconst float roadShadowSpeed = 3.0;\nvec2 Offset;\n\n//============================================================================\n// Define new struct types.\n//============================================================================\nstruct Ray_t {\n    vec3 o;  // Ray Origin.\n    vec3 d;  // Ray Direction. A unit vector.\n};\n\nstruct Plane_t {\n    // The plane equation is Ax + By + Cz + D = 0.\n    float A, B, C, D;\n    int materialID;\n};\n\nstruct Sphere_t {\n    vec3 center;\n    vec3 mov;\n    float speed;\n    float radius;\n    int materialID;\n};\n\nstruct Light_t {\n    vec3 position;  // Point light 3D position.\n    vec3 I_a;       // For Ambient.\n    vec3 I_source;  // For Diffuse and Specular.\n};\n\nstruct Material_t {\n    vec3 k_a;   // Ambient coefficient.\n    vec3 k_d;   // Diffuse coefficient.\n    vec3 k_r;   // Reflected specular coefficient.\n    vec3 k_rg;  // Global reflection coefficient.\n    float n;    // The specular reflection exponent. Ranges from 0.0 to 128.0. \n};\nstruct Box_t{\n    vec3 originPos;\n    vec3 scale;\n    vec3 axis_x;\n    vec3 axis_y;\n    vec3 axis_z;\n    int materialID;\n};\nstruct Road_Shadow_t{\n    float width;\n    vec2 nearfar;\n};\n//----------------------------------------------------------------------------\n// The lighting model used here is similar to that on Slides 8 and 12 of \n// Lecture 11 (Ray Tracing). Here it is computed as\n//\n//     I_local = SUM_OVER_ALL_LIGHTS { \n//                   I_a * k_a + \n//                   k_shadow * I_source * [ k_d * (N.L) + k_r * (R.V)^n ]\n//               }\n// and\n//     I = I_local  +  k_rg * I_reflected\n//----------------------------------------------------------------------------\n\n\n//============================================================================\n// Global scene data.\n//============================================================================\nPlane_t Plane[NUM_PLANES];\nSphere_t Sphere[NUM_SPHERES];\nLight_t Light[NUM_LIGHTS];\nMaterial_t Material[NUM_MATERIALS];\n//Road_Shadow_t RShadow[NUM_RSDS];\n//Box_t Box[NUM_BOXES];\n\nvec3 sphereCenter;\nvec3 sphereMov;\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a plane and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n// If there is such an intersection, outputs the value of t, the position\n// of the intersection (hitPos) and the normal vector at the intersection \n// (hitNormal).\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectPlane( in Plane_t pln, in Ray_t ray, in float tmin, in float tmax,\n                     out float t, out vec3 hitPos, out vec3 hitNormal ) \n{\n    vec3 N = vec3( pln.A, pln.B, pln.C );\n    float NRd = dot( N, ray.d );\n    float NRo = dot( N, ray.o );\n    float t0 = (-pln.D - NRo) / NRd;\n    if ( t0 < tmin || t0 > tmax ) return false;\n\n    // We have a hit -- output results.\n    t = t0;\n    hitPos = ray.o + t0 * ray.d;\n    hitNormal = normalize( N );\n    return true;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a plane and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectPlane( in Plane_t pln, in Ray_t ray, in float tmin, in float tmax )\n{\n    vec3 N = vec3( pln.A, pln.B, pln.C );\n    float NRd = dot( N, ray.d );\n    float NRo = dot( N, ray.o );\n    float t0 = (-pln.D - NRo) / NRd;\n    if ( t0 < tmin || t0 > tmax ) return false;\n    return true;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a sphere and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n// If there is one or two such intersections, outputs the value of the \n// smaller t, the position of the intersection (hitPos) and the normal \n// vector at the intersection (hitNormal).\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectSphere( in Sphere_t sph, in Ray_t ray, in float tmin, in float tmax,\n                      out float t, out vec3 hitPos, out vec3 hitNormal ) \n{\n    /////////////////////////////////\n    // TASK: WRITE YOUR CODE HERE. //\n    /////////////////////////////////\n    // Step 1: Transform the ray func into Sphere-centered coordinates\n    vec3 newRayO = ray.o - sph.center;\n    vec3 newRayD = ray.d;\n    // Step 2: Combine the ray and sphere funtions\n    float b_paramtr = 2.0 * dot(newRayD, newRayO);\n    float c_paramtr = dot(newRayO, newRayO) - sph.radius * sph.radius;\n    float delta = b_paramtr * b_paramtr - 4.0 * c_paramtr;\n    if (delta < 0.0) return false;\n    float t0 = (-b_paramtr - sqrt(delta))/2.0;\n    if ( t0 < tmin || t0 > tmax ) return false;\n    t = t0;\n    hitPos = ray.o + t0 * ray.d;\n    hitNormal = normalize(hitPos - sph.center);\n    return true; \n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a sphere and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectSphere( in Sphere_t sph, in Ray_t ray, in float tmin, in float tmax )\n{\n    /////////////////////////////////\n    // TASK: WRITE YOUR CODE HERE. //\n    /////////////////////////////////\n    // Step 1: Transform the ray func into Sphere-centered coordinates\n    vec3 newRayO = ray.o - sph.center;\n    vec3 newRayD = ray.d;\n    // Step 2: Combine the ray and sphere funtions\n    float b_paramtr = 2.0 * dot(newRayD, newRayO);\n    float c_paramtr = dot(newRayO, newRayO) - sph.radius * sph.radius;\n    float delta = b_paramtr * b_paramtr - 4.0 * c_paramtr;\n    if (delta < 0.0) return false;\n    float t0 = (-b_paramtr - sqrt(delta))/2.0;\n    if ( t0 < tmin || t0 > tmax ) return false;\n    return true;  // Replace this with your code.\n\n}\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes (I_a * k_a) + k_shadow * I_source * [ k_d * (N.L) + k_r * (R.V)^n ].\n// Input vectors L, N and V are pointing AWAY from surface point.\n// Assume all vectors L, N and V are unit vectors.\n/////////////////////////////////////////////////////////////////////////////\nvec3 PhongLighting( in vec3 L, in vec3 N, in vec3 V, in bool inShadow, \n                    in Material_t mat, in Light_t light )\n{\n    if ( inShadow ) {\n        return light.I_a * mat.k_a;\n    }\n    else {\n        vec3 R = reflect( -L, N );\n        float N_dot_L = max( 0.0, dot( N, L ) );\n        float R_dot_V = max( 0.0, dot( R, V ) );\n        float R_dot_V_pow_n = ( R_dot_V == 0.0 )? 0.0 : pow( R_dot_V, mat.n );\n\n        return light.I_a * mat.k_a + \n               light.I_source * (mat.k_d * N_dot_L + mat.k_r * R_dot_V_pow_n);\n    }\n}\n\n\nbool IntersectBox( in Box_t bx, in Ray_t ray, in float tmin, in float tmax) \n{\n\n    float t1, t2, tnear, tfar;\n\n    float  NRd, NRo, t0;\n    float d1,d2;\n    d1 = dot(bx.originPos, bx.axis_x);\n    d2 = dot(bx.originPos + bx.scale[0] * normalize(bx.axis_x), bx.axis_x);\n    NRd = dot( bx.axis_x, ray.d );\n    NRo = dot( bx.axis_x, ray.o );\n    t1 = (d1 - NRo) / NRd;\n    t2 = (d2 - NRo) / NRd;\n    if(max(t1,t2)<=0.0) return false;\n    tnear = min(t1,t2);\n    tfar = max(t1,t2);\n\n    d1 = dot(bx.originPos, bx.axis_y);\n    d2 = dot(bx.originPos + bx.scale[1] * normalize(bx.axis_y), bx.axis_y);\n    NRd = dot( bx.axis_y, ray.d );\n    NRo = dot( bx.axis_y, ray.o );\n    t1 = (d1 - NRo) / NRd;\n    t2 = (d2 - NRo) / NRd;\n    if(min(t1,t2)>tnear) tnear= min(t1,t2);\n    if(max(t1,t2)<tfar) tfar= max(t1,t2);\n\n\n    d1 = dot(bx.originPos, bx.axis_z);\n    d2 = dot(bx.originPos + bx.scale[2] * normalize(bx.axis_z), bx.axis_z);\n    NRd = dot( bx.axis_z, ray.d );\n    NRo = dot( bx.axis_z, ray.o );\n    t1 = (d1 - NRo) / NRd;\n    t2 = (d2 - NRo) / NRd;\n    if(min(t1,t2)>tnear) tnear= min(t1,t2);\n    if(max(t1,t2)<tfar) tfar= max(t1,t2);\n\n    if(tfar < tnear || tfar <= 0.0) return false;\n    return true;\n\n}\n\nbool IntersectBox( in Box_t bx, in Ray_t ray, in float tmin, in float tmax,\n                     out float t, out vec3 hitPos, out vec3 hitNormal ) \n{\n    float t1, t2, tnear, tfar;\n    float d1, d2;\n    float NRd, NRo, t0;\n    d1 = dot(bx.originPos, bx.axis_x);\n    d2 = dot(bx.originPos + bx.scale[0] * normalize(bx.axis_x), bx.axis_x);\n    NRd = dot( bx.axis_x, ray.d );\n    NRo = dot( bx.axis_x, ray.o );\n    t1 = (d1 - NRo) / NRd;\n    t2 = (d2 - NRo) / NRd;\n    if(max(t1,t2)<=0.0) return false;\n    tnear = min(t1,t2);\n    hitNormal = bx.axis_x;\n    tfar = max(t1,t2);\n\n    d1 = dot(bx.originPos, bx.axis_y);\n    d2 = dot(bx.originPos + bx.scale[1] * normalize(bx.axis_y), bx.axis_y);\n    NRd = dot( bx.axis_y, ray.d );\n    NRo = dot( bx.axis_y, ray.o );\n    t1 = (d1 - NRo) / NRd;\n    t2 = (d2 - NRo) / NRd;\n    if(min(t1,t2)>tnear) tnear= min(t1,t2);\n    if(max(t1,t2)<tfar) tnear= max(t1,t2);\n\n    if(tnear == t1 || tnear == t2)\n        hitNormal = bx.axis_y;\n\n    d1 = dot(bx.originPos, bx.axis_z);\n    d2 = dot(bx.originPos + bx.scale[2] * normalize(bx.axis_z), bx.axis_z);\n    NRd = dot( bx.axis_z, ray.d );\n    NRo = dot( bx.axis_z, ray.o );\n    t1 = (d1 - NRo) / NRd;\n    t2 = (d2 - NRo) / NRd;\n    if(min(t1,t2)>tnear) tnear= min(t1,t2);\n    if(max(t1,t2)<tfar) tnear= max(t1,t2);\n    if(tnear == t1 || tnear == t2)\n        hitNormal = bx.axis_z;\n\n    if(tfar < tnear || tfar <= 0.0) return false;\n    t0 = tnear;\n    hitPos = ray.o + t0 * ray.d;\n    return true;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Initializes the scene.\n/////////////////////////////////////////////////////////////////////////////\nvoid InitScene()\n{\n    // Horizontal plane.\n    Plane[0].A = 0.0;\n    Plane[0].B =2.0;\n    Plane[0].C = 0.0;\n    Plane[0].D = 0.0;\n    Plane[0].materialID = 0;\n\n    // Vertical plane.\n    Plane[1].A =-4.0;\n    Plane[1].B = 0.0;\n    Plane[1].C =1.0;\n    Plane[1].D = 20.0;\n    Plane[1].materialID = 0;\n    \n    Plane[2].A=4.0;\n    Plane[2].B=0.0;\n    Plane[2].C=1.0;\n    Plane[2].D=20.0;\n    Plane[2].materialID=0;\n\n    // Center bouncing sphere.\n    /*Sphere[0].center = vec3( 0.0, abs(sin(2.0 * iTime)) + 0.7, 0.0 );\n    Sphere[0].radius = 0.7;\n    Sphere[0].materialID = 1;*/ \n    \n    //Sphere[0].mov = bounceSph(0);\n    \n    //Sphere[0].center = nextSphPos(0);//vec3( 0.0, 0.5, - 11.5 + 6.5 * mod(iTime,5.0) );\n    Sphere[0].center = vec3(0.0 + Offset[0] , 0.7, -1.0 + Offset[1]);\n    Sphere[0].mov = vec3(0.0,0.0,0.0);\n    Sphere[0].speed = 0.0;\n    Sphere[0].radius = 0.7;\n    Sphere[0].materialID = 1;\n\n\n    // Circling sphere.\n    // Sphere[1].center = vec3( 0.0, 0.5, - 11.5 + 6.5 * mod(iTime,5.0) );\n    // Sphere[1].radius = 0.5;\n    // Sphere[1].materialID = 2;\n\n    Sphere[1].center = sphereCenter;\n    Sphere[1].mov = sphereMov;\n    Sphere[1].speed = 6.5;\n    Sphere[1].radius = 0.7;\n    Sphere[1].materialID = 2;\n\n    Sphere[2].center = vec3( 1.6 + sin(3.0 * iTime) , 1.0*abs(sin(3.0 * iTime)) + 1.5,1.5 +0.5 * sin(iTime) - 4.0 );\n    Sphere[2].radius = 0.3;\n    Sphere[2].materialID = 2;\n\n    Sphere[3].center = vec3( -2.5 , 2.0 + 0.3,-5.0);\n    Sphere[3].radius = 0.5;\n    Sphere[3].materialID = 2;\n\n    // Box[0].originPos = vec3(-1.4 + Offset[0], 0.0, 0.0 + Offset[1]);\n    // Box[0].scale = vec3(2.1, 0.9, 1.2);\n    // Box[0].axis_x = vec3(1.0,0.0,0.0);\n    // Box[0].axis_y = vec3(0.0,1.0,0.0);\n    // Box[0].axis_z = vec3(0.0,0.0,1.0);\n    // Box[0].materialID = 4;\n\n    // Silver material.\n    Material[0].k_d = vec3( 0.8, 0.5, 0.35 );\n    Material[0].k_a = 0.2 * Material[0].k_d;\n    Material[0].k_r = 2.0 * Material[0].k_d;\n    Material[0].k_rg = 0.05 * Material[0].k_r;\n    Material[0].n = 64.0;\n\n    // Gold material.\n    Material[1].k_d = vec3( 0.6, 0.5, 0.7 );\n    Material[1].k_a = 0.2 * Material[1].k_d;\n    Material[1].k_r = 1.2 * Material[1].k_a;\n    Material[1].k_rg = 0.5 * Material[1].k_r;\n    Material[1].n = 64.0;\n\n    // Green plastic material.\n    Material[2].k_d = vec3( 0.8, 0.9, 0.9 );\n    Material[2].k_a = 0.3 * Material[2].k_d;\n    Material[2].k_r = 1.2 * vec3( 1.0, 1.0, 1.0 );\n    Material[2].k_rg = 0.5 * Material[2].k_r;\n    Material[2].n = 128.0;\n\n    // Green plastic material.\n    Material[3].k_d = vec3( 0.6, 0.7, 0.7 );\n    Material[3].k_a = 0.2 * Material[2].k_d;\n    Material[3].k_r = 0.5 * vec3( 1.0, 1.0, 1.0 );\n    Material[3].k_rg = 0.5 * Material[2].k_r;\n    Material[3].n = 64.0;\n    \n    //Box Material\n    // Gold material.\n    Material[4].k_d = vec3( 0.5, 0.5, 0.7 );\n    Material[4].k_a = 0.2 * Material[1].k_d;\n    Material[4].k_r = 2.0 * Material[1].k_d;\n    Material[4].k_rg = 0.5 * Material[1].k_r;\n    Material[4].n = 64.0;\n  // Light 0.\n    Light[0].position = vec3( 4.0, 8.0, -3.0 );\n    Light[0].I_a = vec3( 0.1, 0.1, 0.1 );\n    Light[0].I_source = 0.4 * vec3( 3.0, 3.0, 1.0 );\n\n    // Light 1.\n    Light[1].position = vec3( -4.0, 8.0, 0.0 );\n    Light[1].I_a = vec3( 0.1, 0.1, 0.1 );\n    Light[1].I_source = 0.4 * vec3( 1.0, 1.0, 3.0 );\n\n    // \n    // RShadow[0].width = 1.0;\n    // RShadow[0].nearfar = vec2(-20.0, -15.0) + vec2(timepass, timepass);\n\n    // RShadow[1].width = 1.0;\n    // RShadow[1].nearfar = vec2(-10.0, -5.0) + vec2(timepass, timepass);\n\n    // RShadow[2].width = 1.0;\n    // RShadow[2].nearfar = vec2(0.0, 5.0) + vec2(timepass, timepass);\n}\n/////////////////////////////////////////////////////////////////////////////\n// Casts a ray into the scene and returns color computed at the nearest\n// intersection point. The color is the sum of light from all light sources,\n// each computed using Phong Lighting Model, with consideration of\n// whether the interesection point is being shadowed from the light.\n// If there is no interesection, returns the background color, and outputs\n// hasHit as false.\n// If there is intersection, returns the computed color, and outputs\n// hasHit as true, the 3D position of the intersection (hitPos), the\n// normal vector at the intersection (hitNormal), and the k_rg value\n// of the material of the intersected object.\n/////////////////////////////////////////////////////////////////////////////\nvec3 CastRay( in Ray_t ray, \n              out bool hasHit, out vec3 hitPos, out vec3 hitNormal, out vec3 k_rg ) \n{\n    // Find whether and where the ray hits some object. \n    // Take the nearest hit point.\n\n    bool hasHitSomething = false;\n    float nearest_t = DEFAULT_TMAX;   // The ray parameter t at the nearest hit point.\n    vec3 nearest_hitPos;              // 3D position of the nearest hit point.\n    vec3 nearest_hitNormal;           // Normal vector at the nearest hit point.\n    int nearest_hitMatID;             // MaterialID of the object at the nearest hit point.\n\n    float temp_t;\n    vec3 temp_hitPos;\n    vec3 temp_hitNormal;\n    bool temp_hasHit;\n\n    /////////////////////////////////////////////////////////////////////////////\n    // TASK:\n    // * Try interesecting input ray with all the planes and spheres,\n    //   and record the front-most (nearest) interesection.\n    // * If there is interesection, need to record hasHitSomething,\n    //   nearest_t, nearest_hitPos, nearest_hitNormal, nearest_hitMatID.\n    /////////////////////////////////////////////////////////////////////////////\n\n    /////////////////////////////////\n    // TASK: WRITE YOUR CODE HERE. //\n    /////////////////////////////////\n    for (int i = 0; i < NUM_PLANES; i++){\n        if(IntersectPlane(Plane[i], ray, DEFAULT_TMIN, DEFAULT_TMAX, temp_t, temp_hitPos, temp_hitNormal) && temp_t < nearest_t)\n        {   \n            hasHitSomething = true;\n            nearest_t = temp_t;\n            nearest_hitPos = temp_hitPos;\n            nearest_hitNormal = temp_hitNormal;\n            nearest_hitMatID = Plane[i].materialID;\n        }\n    }\n    for (int i = 0; i < NUM_SPHERES; i++){\n        if(IntersectSphere(Sphere[i], ray, DEFAULT_TMIN, DEFAULT_TMAX,\n                     temp_t, temp_hitPos, temp_hitNormal) && temp_t < nearest_t)\n        {\n            hasHitSomething = true;\n            nearest_t = temp_t;\n            nearest_hitPos = temp_hitPos;\n            nearest_hitNormal = temp_hitNormal;\n            nearest_hitMatID = Sphere[i].materialID;    \n        }\n    }\n    // for (int i = 0; i < NUM_BOXES; i++){\n    //     if(IntersectBox(Box[i], ray, DEFAULT_TMIN, DEFAULT_TMAX,\n    //                  temp_t, temp_hitPos, temp_hitNormal) && temp_t < nearest_t)\n    //     {\n    //         hasHitSomething = true;\n    //         nearest_t = temp_t;\n    //         nearest_hitPos = temp_hitPos;\n    //         nearest_hitNormal = temp_hitNormal;\n    //         nearest_hitMatID = Box[i].materialID;    \n    //     }\n    // }\n    // One of the output results.\n    hasHit = hasHitSomething;\n    if ( !hasHitSomething ) return BACKGROUND_COLOR;\n\n    vec3 I_local = vec3( 0.0 );  // Result color will be accumulated here.\n\n    /////////////////////////////////////////////////////////////////////////////\n    // TASK:\n    // * Accumulate lighting from each light source on the nearest hit point. \n    //   They are all accumulated into I_local.\n    // * For each light source, make a shadow ray, and check if the shadow ray\n    //   intersects any of the objects (the planes and spheres) between the \n    //   nearest hit point and the light source.\n    // * Then, call PhongLighting() to compute lighting for this light source.\n    /////////////////////////////////////////////////////////////////////////////\n\n    /////////////////////////////////\n    // TASK: WRITE YOUR CODE HERE. //\n    /////////////////////////////////\n    for(int j = 0; j < NUM_LIGHTS; j++){\n        Ray_t shadowRay;\n        shadowRay.o = nearest_hitPos;\n        shadowRay.d = normalize(Light[j].position - nearest_hitPos);\n        float shadowRayTimeMax = sqrt(dot(Light[j].position - nearest_hitPos, Light[j].position - nearest_hitPos));\n        int intersectCount = 0;\n        float timepass = mod(roadShadowSpeed* iTime, 2.0 * roadShadowLength);\n\n        for (int i = 0; intersectCount ==0 && i < NUM_PLANES ; i++){\n            if(IntersectPlane(Plane[i], shadowRay, DEFAULT_TMIN, shadowRayTimeMax) )\n            {   \n                intersectCount++; break;\n            }\n        }\n        for (int i =0; intersectCount ==0 && i < NUM_SPHERES; i++){\n            if(IntersectSphere(Sphere[i], shadowRay, DEFAULT_TMIN, shadowRayTimeMax))\n            {\n                intersectCount++; break;\n            }\n        }\n\n        // for (int i = 0; i < NUM_BOXES; i++){\n        //     if(IntersectBox(Box[i], ray, DEFAULT_TMIN, shadowRayTimeMax))\n        //     {\n        //         intersectCount++; break;  \n        //     }\n        // }\n        Material_t tmp_mtrl = Material[nearest_hitMatID];\n        if(nearest_hitPos.y <= 0.001){\n            vec3 mtrcolor = texture(iChannel0, nearest_hitPos.xz / 10.).xyz;\n            tmp_mtrl = Material_t(0.0*mtrcolor, 1.0*mtrcolor, 1.0*mtrcolor, 0.0*mtrcolor, 64.0);\n\n            if(abs(nearest_hitPos.x) <= 0.5 * roadShadowWidth)   \n                if(mod(nearest_hitPos.z - timepass, 2.0 *roadShadowLength ) <=roadShadowLength)\n                    intersectCount++;\n        }\n        if(intersectCount == 0) \n            I_local += PhongLighting(shadowRay.d, nearest_hitNormal, -ray.d, false, tmp_mtrl, Light[j]);\n        else \n            I_local += PhongLighting(shadowRay.d, nearest_hitNormal, -ray.d, true, tmp_mtrl, Light[j]);\n        //vec3 PhongLighting( in vec3 L, in vec3 N, in vec3 V, in bool inShadow, in Material_t mat, in Light_t light)\n\n    }\n\n    // Populate output results.\n    hitPos = nearest_hitPos;\n    hitNormal = nearest_hitNormal;\n    k_rg = Material[nearest_hitMatID].k_rg;\n\n    return I_local;\n}\n\nfloat Luminance(vec3 col){\n    return dot(vec3(0.2, 0.3, 0.4), col);\n}\nmat2 r2d(float a) {\n    float c = cos(a), s = sin(a);\n    return mat2(c, s, -s, c);\n}\n\nvoid amod(inout vec2 p, float m) {\n    float a = mod(atan(p.x, p.y) - m*.5, m) - m*.5;\n    p = vec2(cos(a), sin(a)) * length(p);\n}\n\nfloat rep(float p, float m) {\n    return mod(p - m*.5, m) - m*.5;\n}\n\nvec3 rep(vec3 p, float m) {\n    return mod(p - m*.5, m) - m*0.5;\n}\n\nfloat cmin(float a, float b, float k) {\n    return min(min(a, b), (a - k + b) * sqrt(.5));\n}\n\nfloat stmin(float a, float b, float k, float n) {\n    float s = k / n;\n    float u = b - k;\n    return min(min(a, b), .5 * (u + a + abs((mod(u - a + s, 2. * s)) - s)));\n}\n\nfloat length8(vec2 p) {\n    vec2 q = p*p*p*p*p*p*p*p;\n    return pow(q.x + q.y, 1. / 8.);\n}\n\nfloat torus82(vec3 p, vec2 d) {\n    vec2 q = vec2(length(p.xz) - d.x, p.y);\n    return length8(q) - d.y;\n}\n\nfloat path(float t) {\n    return cos(t*.1)*2.;\n}\n\nfloat g = 0.;\nfloat de(vec3 p) {\n\n    p.x -= path(p.z);\n    \n    vec3 q = p;\n    q.x += sin(q.z*.2)*4.;\n    q.y += cos(q.z*.3)*4.;\n    q += iTime*2.;\n    q.yz += sin(iTime*.2)*4.;\n    q = rep(q, 1.);\n    float s1 = length(q) - .01 + sin(iTime*30.)*.004;\n\n    p.z = rep(p.z, 3.);\n\n    float d = torus82(p.xzy, vec2(1., .1));\n    float pl = p.y + 2.4 + p.y*texture(iChannel1, p.xz*.1).r*1.;\n    float pl2 = p.y + .7;\n    d = min(d, pl-d*.9);\n    d = cmin(d, pl2, .1);\n\n    amod(p.xy, 6.28 / 3.);\n    p.x = abs(p.x) - 1.;\n    float cyl = length(p.xy) - .05;\n    d = stmin(d, cyl, .1, 4.);\n   \n   // d = min(d, s1);\n\n    g += .015 / (.01 + d*d);\n    return d;\n}\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Execution of fragment shader starts here.\n// 1. Initializes the scene.\n// 2. Compute a primary ray for the current pixel (fragment).\n// 3. Trace ray into the scene with NUM_ITERATIONS recursion levels.\n/////////////////////////////////////////////////////////////////////////////\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - .5*iResolution.xy) / iResolution.y;\n\n    float dt = iTime * 8.0;\n\n    vec3 ro = vec3(0, 0, -1.+dt );\n    vec3 ta = vec3(0, 0, dt);\n    ro.x += path(ro.z);\n    ta.x += path(ta.z);\n\n    vec3 fwd = normalize(ta- ro);\n    \n    vec3 left = cross(vec3(0,1.5, 0), fwd);\n    vec3 up = cross(fwd, left);\n    vec3 rd = normalize(fwd + uv.x*left + uv.y*up);\n\n    //rd.xy *= r2d(sin(-ro.x / 3.14)*.4);\n\n    vec3 p;\n    float t = 0., ri;\n    for (float i = 0.; i < 1.; i += .01) {\n        ri = i;\n        p = ro+rd*t;\n        float d =  de(p);\n        if (d < .001) break;\n        t += d*0.5;\n    }\n\n    vec3 bg = vec3(.2, .1, .2);\n    vec3 col = bg;\n    //col = mix(vec3(.2, .62, .6)*1.6, bg,  uv.x*uv.y*uv.y +ri);\n    col += g*.009;\n    //col.b += 1.0;\n    col = mix(col, bg, 1. - exp(-.01*t*t));\n    \n\n\n    Offset = texelFetch( iChannel2, txoffsets, 0 ).xy;\n    sphereCenter = texelFetch( iChannel2, txSphereCenter, 0 ).xyz;\n    sphereMov = texelFetch( iChannel2, txSphereMov, 0 ).xyz;\n    //float TrackLumi = texelFetch( iChannel2, txMovTrack, 0 ).x;\n    vec2 pixel_pos = (2.0 * fragCoord.xy - iResolution.xy) / iResolution.y;\n    InitScene();\n\n    // Scale pixel 2D position such that its y coordinate is in [-1.0, 1.0].\n    //vec2 p = fragCoord.xy / iResolution.xx;\n    vec4 m = iMouse / iResolution.xxxx;\n\n   \n    // Position the camera.\n    vec3 cam_pos = vec3( 0.0+path(ro.z), 4.3, 9.5 );\n    if( m.z > 0.0 ||m.w > 0.0 )\n    {\n        vec2 lookmov = vec2(0.0, 4.3) + 10.0 *(m.zw - m.xy);\n        cam_pos = vec3( lookmov, 9.5 );\n        col = vec3(1.0);\n        //float d = distanceToSegment( m.xy, m.zw, p );\n        //col = mix( col, vec3(1.0,1.0,0.0), 1.0-smoothstep(.004,0.008, d) );\n    }\n    vec3 cam_lookat = vec3( 0.0 +path(ro.z), 2.8, -3.0 );\n    vec3 cam_up_vec = vec3( 0.0, 1.0, 0.0 );\n    \n    // Set up camera coordinate frame in world space.\n    vec3 cam_z_axis = normalize( cam_pos - cam_lookat );\n    vec3 cam_x_axis = normalize( cross(cam_up_vec, cam_z_axis) );\n    vec3 cam_y_axis = normalize( cross(cam_z_axis, cam_x_axis));\n\n    // Create primary ray.\n    float pixel_pos_z = -1.0 / tan(FOVY / 2.0);\n    Ray_t pRay;\n    pRay.o = cam_pos;\n    pRay.d = normalize( pixel_pos.x * cam_x_axis  +  pixel_pos.y * cam_y_axis  +  pixel_pos_z * cam_z_axis );\n\n    \n\n    // Start Ray Tracing.\n    // Use iterations to emulate the recursion.\n\n    vec3 I_result = vec3( 0.0 );\n    vec3 compounded_k_rg = vec3( 1.0 );\n    Ray_t nextRay = pRay;\n\n    for ( int level = 0; level <= NUM_ITERATIONS; level++ ) \n    {\n        bool hasHit;\n        vec3 hitPos, hitNormal, k_rg;\n\n        vec3 I_local = CastRay( nextRay, hasHit, hitPos, hitNormal, k_rg );\n\n        I_result += compounded_k_rg * I_local;\n\n        if ( !hasHit ) break;\n\n        compounded_k_rg *= k_rg;\n\n        nextRay = Ray_t( hitPos, normalize( reflect(nextRay.d, hitNormal) ) );\n    }\n\n    \n    \n    //fragColor = vec4( I_result, 1.0);\n    //tunnel = Luminance(col)* Luminance(col);\n  \n    fragColor = vec4( I_result/2.0 + col * col/2.0 ,1.0);\n    if( m.z > 0.0 ||m.w > 0.0 ) fragColor = vec4( I_result ,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nconst ivec2 txoffsets = ivec2(0,0);\nconst ivec2 txSphereCenter = ivec2(1,0);\nconst ivec2 txSphereMov = ivec2(2,0);\n// Use this for avoiding the \"epsilon problem\" or the shadow acne problem.\nconst float DEFAULT_TMIN = 10.0e-4;\n\n// Use this for tmax for non-shadow ray intersection test.\nconst float DEFAULT_TMAX = 10.0e6;\n//keyBoard ACSII value\nconst int KEY_LEFT  = 37;\nconst int KEY_UP    = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN  = 40;\nconst int KEY_R = 82;\nconst float movBallRadius = 0.7;\n\n\nstruct Sphere_t {\n    vec3 center;\n    vec3 mov;\n    float speed;\n    float radius;\n    int materialID;\n};\n\nstruct Ray_t {\n    vec3 o;  // Ray Origin.\n    vec3 d;  // Ray Direction. A unit vector.\n};\n\n\nSphere_t Sphere0;\nvec3 sphereCenter;\nvec3 sphereMov;\n\nvec4 loadValue( in ivec2 re )\n{\n    return texelFetch( iChannel2, re, 0 );\n}\nvoid storeValue( in ivec2 re, in vec4 va, inout vec4 fragColor, in ivec2 p )\n{\n    fragColor = (p==re) ? va : fragColor;\n}\n\nfloat rand(float n){\n    return fract(cos(n*89.42*iTime));\n}\n\nbool IntersectSphere( in Sphere_t sph, in Ray_t ray, in float tmin, in float tmax,\n                      out float t, out vec3 hitPos, out vec3 hitNormal ) \n{\n    /////////////////////////////////\n    // TASK: WRITE YOUR CODE HERE. //\n    /////////////////////////////////\n    // Step 1: Transform the ray func into Sphere-centered coordinates\n    vec3 newRayO = ray.o - sph.center;\n    vec3 newRayD = ray.d;\n    // Step 2: Combine the ray and sphere funtions\n    float b_paramtr = 2.0 * dot(newRayD, newRayO);\n    float c_paramtr = dot(newRayO, newRayO) - sph.radius * sph.radius;\n    float delta = b_paramtr * b_paramtr - 4.0 * c_paramtr;\n    if (delta < 0.0) return false;\n    float t0 = (-b_paramtr - sqrt(delta))/2.0;\n    if ( t0 < tmin || t0 > tmax ) return false;\n    t = t0;\n    hitPos = ray.o + t0 * ray.d;\n    hitNormal = normalize(hitPos - sph.center);\n    return true; \n}\n\nvoid ISbounceSph(){\n    if(abs(sphereCenter.z - Sphere0.center.z) >= movBallRadius + Sphere0.radius)\n        return;\n    \n    float temp_t;\n    vec3 temp_hitPos, temp_hitNormal;\n    if(distance(sphereCenter, Sphere0.center) <= movBallRadius + Sphere0.radius){\n        temp_hitNormal = normalize(sphereCenter - Sphere0.center);\n        sphereMov = normalize( reflect(sphereMov, temp_hitNormal)) -  1.5*sphereMov;\n    }\n    if(distance(sphereCenter, Sphere0.center) <= movBallRadius + Sphere0.radius - 0.1){\n       \n        sphereMov =   - Sphere0.center + sphereCenter;\n    }\n    Ray_t rtmp;\n    rtmp.o = sphereCenter;\n    rtmp.d = sphereMov;\n    if(IntersectSphere(Sphere0, rtmp, DEFAULT_TMIN, DEFAULT_TMAX,\n                     temp_t, temp_hitPos, temp_hitNormal) && temp_t <= movBallRadius) {\n        temp_hitNormal.y =0.0;\n        sphereMov = reflect(sphereMov, temp_hitNormal);\n    }\n    sphereMov.y =0.0;\n    sphereMov = normalize( sphereMov);\n}\nvoid nextSphPos(){\n    sphereCenter += 0.05 * sphereMov;\n    if(dot(sphereMov, sphereMov) <= 0.5 || abs(sphereCenter.x)>5.0||sphereCenter.z>6.0 || sphereCenter.z < -20.0 ||sphereCenter.y>6.0 || sphereCenter.y< 0.0 ){\n        sphereCenter = vec3(10.0*rand(2.0) - 5.0 ,0.5,-20.0);\n        sphereMov = normalize(vec3(0 ,0.7,-10.0*rand(5.0)) - sphereCenter);\n    }\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 ipx = ivec2(fragCoord-0.5);\n    vec2 Offset = loadValue( txoffsets).xy;\n    \n    float stepsize = 0.1;\n    Offset[0] -= stepsize * texelFetch( iChannel1, ivec2(KEY_LEFT,0),0 ).x;\n    Offset[1] -= stepsize * texelFetch( iChannel1, ivec2(KEY_UP,0),0 ).x;\n    Offset[0] += stepsize * texelFetch( iChannel1, ivec2(KEY_RIGHT,0),0 ).x;\n    Offset[1] += stepsize * texelFetch( iChannel1, ivec2(KEY_DOWN,0),0 ).x;\n    fragColor = vec4(0.0);\n    if(texelFetch( iChannel1, ivec2(KEY_R,1),0 ).x == 1.0){\n        Offset[0]=0.0;\n        Offset[1]=0.0;\n    }\n  \n    Sphere0.center = vec3(0.0 + Offset[0] , 0.7, -1.0 + Offset[1]);\n    Sphere0.mov = vec3(0.0,0.0,0.0);\n    Sphere0.speed = 0.0;\n    Sphere0.radius = 0.7;\n    Sphere0.materialID = 1;\n    sphereCenter = loadValue( txSphereCenter).xyz;\n    sphereMov = loadValue( txSphereMov).xyz;\n    ISbounceSph();\n    nextSphPos();\n    storeValue( txoffsets , vec4(vec2(Offset), 0.0, 1.0),fragColor, ipx );\n    storeValue( txSphereCenter , vec4(vec3(sphereCenter), 1.0),fragColor, ipx );\n    storeValue( txSphereMov , vec4(vec3(sphereMov),  1.0),fragColor, ipx );\n    //storeValue( txMovTrack , vec4(Luminance(col+0.2), 0.0,0.0, 1.0), fragColor, ipx );\n}","name":"Buffer A","description":"","type":"buffer"}]}