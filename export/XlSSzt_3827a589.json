{"ver":"0.1","info":{"id":"XlSSzt","date":"1445853303","viewed":150,"name":"Hello Julia!","username":"danim","description":"Basic implementation of julia sets, no cool psychedelic colors, just for learning","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["fractal","julia"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"// the C part of the recurrence, change this value to obtain different julia sets\nconst vec2 c = vec2( -0.70176, -0.3842 );\n\n// complex number multiplication\nvec2 cmult( vec2 c1, vec2 c2 )\n{\n    vec2 ret;\n    ret.x = c1.x * c2.x - c1.y * c2.y;\n    ret.y = c1.x * c2.y + c1.y * c2.x;\n    return ret;\n}\n\nvoid cmult( vec2 c1, vec2 c2, out vec2 ret )\n{\n    ret.x = c1.x * c2.x - c1.y * c2.y;\n    ret.y = c1.x * c2.y + c1.y * c2.x;\n}\n\n// complex number division\nvec2 cdiv( vec2 c1, vec2 c2 )\n{\n    vec2 ret;\n    ret.x = ( c1.x * c2.x + c1.y * c2.y ) / ( c2.x * c2.x + c2.y + c2.y );\n    ret.y = ( c1.y * c2.x - c1.x * c2.y  ) / ( c2.x * c2.x + c2.y + c2.y );\n    return ret;\n}\n\nvoid cdiv( vec2 c1, vec2 c2, out vec2 ret )\n{\n    ret.x = ( c1.x * c2.x + c1.y * c2.y ) / ( c2.x * c2.x + c2.y + c2.y );\n    ret.y = ( c1.y * c2.x - c1.x * c2.y  ) / ( c2.x * c2.x + c2.y + c2.y );\n}\n\n// F(z)\nvec2 fz( vec2 z )\n{\n    // modify this function to obtain different julia sets\n    return cmult(z,z) + c;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = 2. * ( fragCoord.xy - 0.5 * iResolution.xy ) / iResolution.y;\n    \n    vec3 color = vec3(0.);\n    \n    vec2 z = uv;\n    const int its = 100;\n   \tfor( int i = 0; i < its; ++i )\n   \t{\n        if( length( z ) > 2. )\n        {\n            color = vec3( 1. - float(i)/float(its) );\n            break;\n        }\n        z = fz( z );\n   \t}\n    \n    fragColor = vec4( color, 1. );\n}","name":"","description":"","type":"image"}]}