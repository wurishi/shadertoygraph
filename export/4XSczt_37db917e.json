{"ver":"0.1","info":{"id":"4XSczt","date":"1727549670","viewed":31,"name":"Spiral Kaleidoscope","username":"m1o9n6s8t8e3r","description":"Rendering an IFS fractal in parallel. Click to refresh.","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["fractal","ifs","polynomial","roots"],"hasliked":0,"parentid":"XXjyD1","parentname":"Weird LBRT kaleidoscope"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = textureLod(iChannel0, fragCoord / iResolution.xy, 0.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{  \n    float c_re = 0.88 * cos(iTime/4.);\n    float c_im = 0.88 * sin(iTime/4.);\n    mat3 rend1 = inverse(mat3(c_re, c_im, 0.0, -c_im, c_re, 0.0, c_re, c_im, 1.0));\n    mat3 rend2 = inverse(mat3(c_re, c_im, 0.0, -c_im, c_re, 0.0, -c_re, -c_im, 1.0));\n    \n    mat3 transforms[] = mat3[](\n        rend1,\n        rend2\n    );\n\n    vec2 LB = vec2(-1.0, -1.0);\n    vec2 RT = vec2(1.0, 1.0);\n    \n    vec2 samples[] = vec2[](\n        vec2(0, 0),\n        vec2(0.2, 0),\n        vec2(0.2, 0.2),\n        vec2(0, 0.2),\n        vec2(-0.2, 0.2),\n        vec2(-0.2, 0),\n        vec2(-0.2, -0.2),\n        vec2(0, -0.2),\n        vec2(0.2, -0.2)\n    );\n\n    if (iFrame == 0 || iMouse.w > 0.1) {\n        fragColor = vec4(0.05);\n    } else {\n        float accumulate = 0.0;\n        \n        for (int s = 0; s < samples.length(); s++) {\n            for (int t = 0; t < transforms.length(); t++) {\n                vec2 p = LB + (RT - LB) * (fragCoord + samples[s]) / iResolution.xy;\n                vec3 pA = transforms[t] * vec3(p, 1.0);\n                \n                vec2 xyt = (pA.xy - LB) / (RT - LB);\n \n                float texFetch = textureLod(iChannel0, xyt, 0.0).x;\n                if (xyt.x >= 0.0 && xyt.y >= 0.0 && xyt.x < 1.0 && xyt.y < 1.0) {\n                    accumulate += texFetch;\n                }\n            }\n        }\n        \n        float rescale = pow(max(accumulate, 0.0) / float(samples.length()), 0.86);\n        \n        fragColor = vec4(rescale, rescale, rescale, 1.0);\n        //fragColor = vec4(0.1 + rescale*0.9, 0.9 - rescale, 0.5 + rescale * 0.5, 1.0);\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}