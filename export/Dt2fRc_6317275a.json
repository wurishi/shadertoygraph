{"ver":"0.1","info":{"id":"Dt2fRc","date":"1694323684","viewed":41,"name":"crazy fractal","username":"vmail123","description":"crazy fractal","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// cosine based palette, 4 vec3 params\nvec3 palette( in float t )\n{\n    vec3 a = vec3(0.938, 0.328, 0.718);\n    vec3 b = vec3(0.659, 0.438, 0.328);\n    vec3 c = vec3(0.388, 0.388, 0.296);\n    vec3 d = vec3(2.538, 2.478, 0.168);\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvec2 rotate(vec2 v, float a, float b) {\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\tmat2 m = mat2(c, s, -s, c);\n\treturn m * (v * b);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.0);\n    \n    for (float i = 0.0; i < 4.0; i += 1.0) {\n        uv = fract(uv * 1.5) - 0.5;\n        uv = rotate(uv, iTime, 1.0);\n\n        float d = length(uv) * exp(-length(uv0) * 0.5);\n\n        vec3 col = palette(length(uv0) + iTime * .4 + i * .4);\n\n        d = sin(d * 8.0 + iTime * 1.0);\n        d = abs(d);\n        d = 0.05 / d; //smoothstep(0.0, 0.8, d);\n        d = pow(d, 1.2);\n\n        finalColor += col * d;\n    }\n    \n    // Output to screen\n    fragColor = vec4(finalColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}