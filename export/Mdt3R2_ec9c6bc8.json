{"ver":"0.1","info":{"id":"Mdt3R2","date":"1451067788","viewed":238,"name":"Curious Reflection","username":"jt","description":"Discovered by accident while trying to write a function reflecting a particle-trajectory inside an octagon:\nthe particle is always reflected by the box but only mostly by the line:\nsometimes it \"tunnels\" through (if the angle is shallow?).\n","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["reflection","mirror","stateless","loopless","peculiar"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"// Curious Reflection - written 2015 by JT\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// Discovered by accident while trying to write a function reflecting a particle-trajectory inside an octagon:\n// the particle is always reflected by the box but only mostly by the line:\n// sometimes it \"tunnels\" through (if the angle is too shallow?).\n\n// original\n#define mirror(v) (1. - (2. * abs(2. * fract(((v) + 1.) / 4.) - 1.)))\n\nfloat ball(vec2 c, vec2 v)\n{\n    return step(.01, length(c - v));\n}\n\nfloat box(vec2 v)\n{\n    return 1. - step(1., max(abs(v.x), abs(v.y)));\n}\n\nfloat line(vec2 v)\n{\n    return smoothstep(.0, .01, abs(v.x - v.y));\n}\n\n#define Mat mat2(1,-1,1,1)\n#define Inv mat2(.5,.5,-.5,.5)\n\nvec2 T(vec2 v)\n{\n    //v = mirror(v);\n    v = Mat * v;\n    v = mirror(v);\n    v = Inv * v;\n    v = mirror(2.*v)/2.;\n    return v;\n}\n\nvoid mainImage(out vec4 o, vec2 I)\n{\n\tvec2 R = iResolution.xy;\n    I = (I+I-R)/R.y;\n    o = vec4(1);\n    o *= box(I);\n    o *= line(I);\n    o *= ball(T(vec2(sqrt(.3),sqrt(.2)) * iTime)*2., I);\n}\n\n/* with changes suggested by FabriceNeyret2\n#define mirror(v) ( 1. - 2. * abs(2. * fract((v + 1.) / 4.) - 1.))\n#define ball(c, v) step(.01, length(c-v))\n#define box(v) ( 1. - step(1., max(abs(v.x), abs(v.y))) )\n#define line(v) ( abs(v.x - v.y) * 100. )\n\n#define Mat mat2(1,-1,1,1)\n#define Inv .5*mat2(1,1,-1,1)\n\nvec2 T(vec2 v)\n{\n    //v = mirror(v);\n    v = Mat * v;\n    v = mirror(v);\n    v = Inv * v;\n    v = mirror(2.*v)/2.;\n    return v;\n}\n\nvoid mainImage(out vec4 o, vec2 I)\n{\n\tvec2 R = iResolution.xy;\n    I = (I+I-R)/R.y;\n    o = vec4(1);\n    o *= box(I);\n    o *= line(I);\n    o *= ball(T(vec2(sqrt(.3),sqrt(.2)) * iTime)*2., I);\n}\n*/\n","name":"","description":"","type":"image"}]}