{"ver":"0.1","info":{"id":"XdBfDw","date":"1500572547","viewed":177,"name":"Cirdist","username":"zaiyugi","description":"Tiles with fractal sine waves sliding based on simplex noise","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["noise","tiling"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nZachary Shore\nDPA8090: Rendering and Shading\nHW2: SDFs: fractal sine tiling\n*/\n\n//\n// Description : Array and textureless GLSL 2D simplex noise function.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : stegu\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//               https://github.com/stegu/webgl-noise\n// \n\nvec3 mod289(vec3 x) {\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec2 mod289(vec2 x) {\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec3 permute(vec3 x) {\n    return mod289(((x*34.0)+1.0)*x);\n}\n\nfloat snoise(vec2 v)\n{\n    const vec4 C = vec4(\n        0.211324865405187,   // (3.0-sqrt(3.0))/6.0\n        0.366025403784439,   // 0.5*(sqrt(3.0)-1.0)\n        -0.577350269189626,  // -1.0 + 2.0 * C.x\n        0.024390243902439\t\t// 1.0 / 41.0\n    ); \n\n    // First corner\n    vec2 i  = floor(v + dot(v, C.yy) );\n    vec2 x0 = v -   i + dot(i, C.xx);\n\n    // Other corners\n    vec2 i1;\n    i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n    vec4 x12 = x0.xyxy + C.xxzz;\n    x12.xy -= i1;\n\n    // Permutations\n    i = mod289(i); // Avoid truncation effects in permutation\n    vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n                + i.x + vec3(0.0, i1.x, 1.0 ));\n\n    vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n    m = m*m ;\n    m = m*m ;\n\n    // Gradients: 41 points uniformly over a line, mapped onto a diamond.\n    // The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n\n    vec3 x = 2.0 * fract(p * C.www) - 1.0;\n    vec3 h = abs(x) - 0.5;\n    vec3 ox = floor(x + 0.5);\n    vec3 a0 = x - ox;\n\n    // Normalise gradients implicitly by scaling m\n    // Approximation of: m *= inversesqrt( a0*a0 + h*h );\n    m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n\n    // Compute final noise value at P\n    vec3 g;\n    g.x  = a0.x  * x0.x  + h.x  * x0.y;\n    g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n    return 130.0 * dot(m, g);\n}\n\nfloat noise(vec2 p)\n{\n    float freq = 1.0;\n    return snoise(freq * p);\n}\n\nfloat plot(vec2 st, float t)\n{\n    return smoothstep(t-0.03, t, st.y) - smoothstep(t, t+0.03, st.y);\n}\n\nvec2 tile(vec2 _st, float _zoom)\n{\n    _st *= _zoom;\n    return fract(_st);\n}\n\nvec2 rotate2D(vec2 _st, float _angle){\n     _st -= 0.5;\n     _st =  mat2(cos(_angle),-sin(_angle),\n                     sin(_angle),cos(_angle)) * _st;\n     _st += 0.5;\n     return _st;\n}\n\nfloat fractal_sin(float p, float t)\n{\n    int octaves = 7;\n    float amp = 0.9;\n    float freq = 1.0;\n    float fjump = 1.8;\n    float roughness = 1.1;\n    float t_amp = 0.4;\n    float gamma = 0.5;\n\n    float accum = 1.0;\n    float X = (p - t_amp * t) * freq;\n    for(int j = 0; j < 7; ++j)\n    {\n        accum *= amp * sin(X);\n        X *= fjump;\n        amp *= roughness;\n    }\n\n    return pow( accum, gamma );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 st = gl_FragCoord.xy/iResolution.xy;\n    float aspect = iResolution.x/iResolution.y;\n    st.x *= aspect;\n\n    float t = iTime * 1.0;\n    float twist_t = iTime * 0.75;\n    vec2 uv = st;\n\n    // Shuffle tiles\n    float time_angle = (tan(cos(twist_t)) + sin(twist_t));\n    uv = rotate2D(uv, time_angle);\n\n    uv *= 20.0;\n\n    vec2 ndx = floor(uv);\n\n    float translate_noise_x = floor(t) + step(0.5, fract(t)) * 0.5;\n\n    float noise_val = noise(ndx + vec2(translate_noise_x, 0.0)) + 0.5;\n    int rand_dir = int(floor(noise_val * 2.0));\n\n    if( rand_dir == 0 )\n    {\n        int posneg = int(floor(noise_val * 2.0));\n        if( posneg == 0 )\n            uv.y -= t * 2.0 * (1.0 + float(rand_dir + posneg));\n        else\n            uv.y += t * 2.0 * (1.0 + float(rand_dir + posneg));\n    } else {\n        int posneg = int(floor(noise_val * 2.0));\n        if( posneg == 0 )\n            uv.x -= t * 2.0 * (1.0 + float(rand_dir + posneg));\n        else\n            uv.x += t * 2.0 * (1.0 + float(rand_dir + posneg));\n    }\n\n    uv = fract(uv);\n\n    uv -= 0.5;\n\n    vec2 p = uv;\n    float d = length(p);\n\n    float z = iTime;\n    vec3 color = vec3(0.0);\n    for(int i = 0; i < 3; ++i)\n    {\n        z += 0.1;\n        color[i] = fractal_sin(d, z);\n    }\n\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}