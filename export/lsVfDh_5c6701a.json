{"ver":"0.1","info":{"id":"lsVfDh","date":"1528734550","viewed":400,"name":"Heightmap sphere","username":"Veggiebob","description":"Adds the height of the color values added together to the radius.","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["texture","sphere"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdXGzr","filepath":"/media/a/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg","previewfilepath":"/media/ap/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sphere (vec3 r, vec3 o, float radius, float extra){\n    return length(o-r)-(radius+extra);\n}\nfloat ground (vec3 r){\n    return r.y-4.;\n}\nvec4 tex (vec2 xy, vec2 m){\n    return texture(iChannel0, vec2(xy.x-m.x, xy.y)*1.0);\n}\nvec4 texGround (vec2 xy, vec2 m){\n    return texture(iChannel1, vec2(xy.x*0.1-m.x, xy.y*50.)*1.0);\n}\nvec4 trace (vec3 o, vec3 r, vec3 pos, float radius){\n    float t = 0.0;\n    vec3 p;\n    vec2 mouse = iMouse.xy / iResolution.xy;\n    mouse.x*=3.;\n    for(int i = 0; i<64; ++i){\n        p = o+r*t;\n        vec3 colPick = normalize(p-pos)*radius;//picks the color from the sphere\n        vec4 col = tex(colPick.xy, mouse);//now gets color from texture\n        float colHeight = col.x+col.y+col.z;//adds 'em up\n        colHeight = colHeight*0.08;//multiply\n        float d = sphere(p, pos, radius, colHeight);\n        t += d*min(pow(1.5, iTime)*0.01, 0.6);\n        if (length(p-pos)<radius+colHeight){//obviously\n            break;\n        }\n    }\n    return vec4(p, t);\n}\nvec4 traceGround (vec3 o, vec3 r){\n    float t = 0.0;\n    vec3 p;\n    vec2 mouse = iMouse.xy / iResolution.xy;\n    mouse.x*=3.;\n    for(int i = 0; i<32; ++i){\n        p = o+r*t;\n        float d = ground(p);\n        if(p.y<0.){\n            break;\n        }\n        t += d*0.5;\n    }\n    return vec4(p, t);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2. - 1.;\n    uv.x *= iResolution.x / iResolution.y;\n    vec2 mouse = iMouse.xy / iResolution.xy;\n    mouse.x*=3.;\n    vec2 ray = vec2(uv.x, uv.y);//direction\n    vec3 r = normalize(vec3(ray, 1.));//ray\n    vec3 o = vec3(0., 1., 0.);//camera\n    vec3 pos = vec3(0., 1., 1.);//position of sphere\n    float radius = min(smoothstep(-0.5, 0.4, iTime*0.03), 0.6);//min(0.1*pow(1.1, iTime), 0.5);//radius, duh\n    vec4 t = trace(o, r, pos, radius);\n    vec4 getPixel = tex(t.xy, mouse).rrgr;\n    float fog = 1.0 / (1.0 + t.w*t.w*0.5);//shadow at distance\n    if(sphere(t.xyz, pos, radius, 0.)>0.2||t.y<0.) {\n        t = traceGround(o, r);\n        vec4 getPixel = texGround(t.xy, mouse);\n        fog = 1.0 / (1.0 + t.w*t.w*0.001);//shadow at distance\n    }\n    vec3 fc = getPixel.xyz*fog;\n    fragColor = vec4(fc, 1);\n}","name":"Image","description":"","type":"image"}]}