{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"buffer","id":"XsXGR8","filepath":"/media/previz/buffer01.png","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n    // Leer la salida del Buffer B\n    vec4 finalColor = texture(iChannel0, uv);\n\n    fragColor = finalColor;\n}","name":"Image","description":"","type":"image"},{"outputs":[{"channel":0,"id":"XsXGR8"}],"inputs":[{"channel":0,"type":"buffer","id":"4dXGR8","filepath":"/media/previz/buffer00.png","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"code":"#define NUM_LAYERS 4\n#define ITER 20\n\nvec4 tex(vec3 p)\n{\n    float t = iTime + 78.0;\n    vec4 o = vec4(p.xyz, 3.0 * sin(t * 0.1));\n    vec4 dec = vec4(1.0, 0.5, 0.9, 0.15) + vec4(0.06 * cos(t * 0.1), 0.0, 0.0, 0.14 * cos(t * 0.20));\n    for(int i = 0; i < ITER; i++) o = abs(o / dot(o, o) - dec);\n    return o;\n}\n\nmat2 rotate2d(float _angle)\n{\n    return mat2(cos(_angle), -sin(_angle),\n                sin(_angle), cos(_angle));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    float fix = iResolution.x / iResolution.y;\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 col = vec3(0.0);   \n    float t = iTime * 0.2;\n    \n    for(float i = 0.0; i <= 1.0; i += 1.0 / float(NUM_LAYERS))\n    {\n        float d = fract(i + t);\n        float s = mix(5.0, 0.1, d);\n        float f = d * smoothstep(1.0, 0.7, d);\n        col += tex(vec3(uv * s, i * 4.0)).xyz * f;\n    }\n    \n    col /= float(NUM_LAYERS);\n    col *= vec3(0.9, 0.5, 0.6);\n    col = pow(col, vec3(0.5));\n    \n    vec2 uv2 = uv;\n    \n    uv2 -= vec2(0.5 * fix, 0.5);\n    uv2 = rotate2d(-0.24 + cos(iTime - uv.y)) * uv2;\n    \n    uv2 += vec2(0.5 * fix, 0.5);\n    \n    uv2 = fract(uv2 * 4.0 - iTime);\n    \n    vec4 butterfly = texture(iChannel0, vec2(uv2.x, 1.0 - uv2.y));\n    \n    fragColor = vec4(col, 1.0) + butterfly;\n}","name":"Buffer B","description":"","type":"buffer"},{"outputs":[{"channel":0,"id":"4dXGR8"}],"inputs":[],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    uv -= 0.5;\n    uv *= 3.0;\n    uv = vec2(-uv.y, uv.x);\n    \n    uv -= 0.5;\n    uv *= 4.5;\n    uv.x *= 1.5;\n    uv.x *= 1.0 + sin(iTime*5.0)*0.2;\n    uv.y = -uv.y;\n    vec2 p = uv*5.0;\n\n    float r = length(p);\n    float t = atan(p.y, p.x);\n    \n    float butterfly = \n        5.0 - 1.5*sin( 1.0*t) \n           + 2.5*sin( 3.0*t) \n           + 2.0*sin( 5.0*t) \n           - 1.7*sin( 7.0*t) \n           + 3.0*cos( 2.0*t) \n           - 2.0*cos( 4.0*t) \n           - 0.4*cos(16.0*t) - r;\n    \n    float c = smoothstep(-2.0, 1.0, butterfly);\n    vec2 g = normalize(p);\n    \n    fragColor = vec4(c * vec3(1.0, 0.0, 0.0), 1.0);\n}","name":"Buffer A","description":"","type":"buffer"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":true,"mFlagMusicStream":false},"info":{"id":"lfKfWR","date":"1733963593","viewed":21,"name":"lame butterflies","username":"fdemar","description":"can't make it look good","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["butterfly"],"hasliked":0,"parentid":"","parentname":""}}