{"ver":"0.1","info":{"id":"M3B3DK","date":"1708886262","viewed":36,"name":"Shader108","username":"steja","description":"A Random shader","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["random"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Define a palette function for neon colors\nvec3 palette(float t) {\n    vec3 a = vec3(0.512,0.014,0.390); \n    vec3 b = vec3(0.623,0.725,0.399); \n    vec3 c = vec3(1.552,1.528,0.500); \n    vec3 d = vec3(0.5, 0.5, 0.5); \n\n    \n    // Return a combination of colors with a cosine function for smooth transitions\n    return a + b * cos(6.28318 * (c * t + d));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // Normalize pixel coordinates and correct for aspect ratio\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    uv.x *= iResolution.x / iResolution.y;\n    float d = length(uv) * exp(-length(uv));\n\n    // Apply a pattern to UV coordinates for a more diverse visual output\n    float pattern = tan(d * 15.0 + iTime)*cos(uv.y *10.0 + iTime);\n  \n    // Use the pattern to affect the time input to the palette, creating dynamic color changes\n    float t = mod(iTime + pattern, 1.0); // Ensure t loops within a 0.0 to 1.0 range for repeating effects\n\n    // Light source simulation\n    vec3 lightPos = vec3(sin(iTime * 0.5) * 2.0, 1.0, cos(iTime * 0.5) * 2.0);\n\n    // Normal of the surface\n    vec3 normal = vec3(0.0, 1.0, 0.0);\n\n    // Calculate light direction\n    vec3 lightDir = normalize(lightPos - vec3(uv, 0.0));\n\n    // Ambient lighting\n    vec3 ambient = vec3(0.2);\n\n    // Diffuse lighting calculation\n    float diff = max(dot(normal, lightDir), 0.0);\n    vec3 diffuse = diff * vec3(0.5, 0.5, 0.5);\n\n    // Specular lighting calculation\n    vec3 viewDir = normalize(vec3(0.0, 0.0, 1.0) - vec3(uv, 0.0));\n    vec3 reflectDir = reflect(-lightDir, normal);\n    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32.0);\n    vec3 specular = spec * vec3(1.0, 1.0, 1.0);\n\n    // Fresnel effect for enhanced realism\n    float fresnel = pow(1.0 - max(dot(normal, viewDir), 0.0), 3.0);\n    vec3 fresnelEffect = fresnel * vec3(0.4, 0.4, 0.4);\n\n    // Random effect for flickering lights or changing conditions\n    float randomEffect = 0.5 + 0.5 * cos(iTime * 10.0 + fragCoord.x * fragCoord.y);\n\n    // Combine all effects with the dynamic color palette\n    vec3 color = (ambient + diffuse + specular + fresnelEffect) * randomEffect * palette(t); ;\n\n    // Output the final color\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}