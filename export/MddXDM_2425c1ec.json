{"ver":"0.1","info":{"id":"MddXDM","date":"1459850858","viewed":100,"name":"Juego S","username":"sreveloa","description":"if you manage to catch the circle you turn it off the screen","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define RADIUS 0.05\n#define CENTRO 0.0\n#define PINCHADO_CIRCULO 1.0\n\n#define load(a) texture(iChannel0,(vec2(a + 0.5,0.0))/iResolution.xy)\n\n\nvec2 uv;\nvec4 col;\n\n\n\nvoid drawCircle( vec2 center, float radius )\n{\n\tvec2 dif = center - uv;\n\tif( length(dif)*length(dif) < radius*radius )\n\t{\n\t\tcol = vec4(1.0);\n\t}\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tcol = vec4(0);\n\tuv = fragCoord.xy / iResolution.xy;\n\t\n//\tvec2 center = findCenter();\n    vec2 center = vec2(load(CENTRO));\n\n    vec4 pinchadoCirculo = load(PINCHADO_CIRCULO);\n//\tif (!pincharCirculo(center, RADIUS))\n\tif (pinchadoCirculo.x == 0.0)\n    {\n\t\tdrawCircle( center, RADIUS );\n    }\n    \n\tfragColor = col;\n}\n\t\n\t\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define RADIUS 0.05\n#define CENTRO 0.0\n#define PINCHADO_CIRCULO 1.0\n\n#define load(a) texture(iChannel0,(vec2(a + 0.5,0.0))/iResolution.xy)\n\nvec2 findCenter()\n{\n\tvec2 start = vec2(0.5,0.5); \n\t\n\tfloat y = -0.25;\n\tfloat secs = floor(iTime);\t\n\tfloat dec = fract( iTime );\n\t\n\tfloat restant = fract( iTime * 0.5 );\n\tif( restant >= 0.5  )\n\t{\n\t\ty = 0.25 - (restant-0.5);\n\t}\n\telse\n\t{\n\t\ty = -0.25 + restant;\n\t}\n\t\n\n\treturn start + vec2(y);\t\n}\n\nbool pincharCirculo(vec2 center, float radius)\n{\n    if(iMouse.z>0.0)\n    {\n        vec2 p=iMouse.xy/iResolution.xy;\n        \n        if (distance(center, p) <= radius)\n        {\n            return true;\n        }\n        \n    }\n    \n    return false;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Recoge el valor anterior del bÃºfer\n  \tfragColor = texture(iChannel0,fragCoord/iResolution.xy);\n    \n    // Comprueba si anteriormente se pinchÃ³ el cÃ­rculo\n    vec4 pinchadoCirculo = load(PINCHADO_CIRCULO);\n    \n    // SÃ³lo se hace algo si todavÃ­a no se ha llegado a pinchar el cÃ­rculo\n    if (pinchadoCirculo.x == 0.0)\n    {\n        // Calcula el centro del cÃ­rculo\n        vec2 center = findCenter();\n        \n        // Si estamos en la zona del bÃºfer donde se almacena si se ha pinchado el cÃ­rculo...\n        if (fragCoord.x > PINCHADO_CIRCULO && fragCoord.x < PINCHADO_CIRCULO + 1.0)\n        {\n            // Si se ha pinchado dentro del cÃ­rculo...\n\t        if (pincharCirculo(center, RADIUS))\n            {\n                fragColor.x = 1.0;\n            }\n        }\n        // Si estamos en la zona del bÃºfer donde se almacena el centro del cÃ­rculo...\n        else if (fragCoord.x > CENTRO && fragCoord.x < CENTRO + 1.0)\n        {\n            fragColor.xy = center;\n        }\n    }\n}","name":"Buf A","description":"","type":"buffer"}]}