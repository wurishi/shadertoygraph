{"ver":"0.1","info":{"id":"ctSXzz","date":"1675546180","viewed":63,"name":"Pulsing UV circle","username":"murilomsq","description":"Public shader","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["pulsing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.y += iTime;\n    \n    vec2 uvVaryingUp = uv + vec2(0.0, iTime);\n    \n    \n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,1,10));\n\n    vec2 offset = vec2(fragCoord.x - iResolution.x/2.0f, fragCoord.y - iResolution.y/2.0f);\n\n    // Output to screen\n    \n    float x2py2 = dot(offset, offset);\n    float radiusOuter = 30000.0f * (8.0 + 4.0*cos(iTime));\n    float radiusInner = 1000.0f* (2.0 + 5.0f*cos(iTime));\n    \n    if(x2py2 > radiusOuter){\n        fragColor = vec4(0.0);\n    }\n    else if(x2py2 <= radiusOuter && x2py2 >= radiusInner){\n    \n       fragColor = vec4(1.0f)*vec4(col * (1.0f-(x2py2 - radiusInner)/(radiusOuter -radiusInner)), 1.0f);\n    }\n    else{\n        float centerDist = distance(uv, vec2(0.5, 0.5));\n        float clampedCenterDist = (centerDist/(2.0* radiusInner)) + 0.5f;\n        fragColor = vec4(col * (1.0f-(x2py2 - radiusInner)/(radiusOuter -radiusInner)), 1.0f);\n            \n    }\n    \n}","name":"Image","description":"","type":"image"}]}