{"ver":"0.1","info":{"id":"Dsyczt","date":"1696435632","viewed":49,"name":"Chromatic Aberration willeves07","username":"willeves07","description":"A simple chromatic aberration shader","likes":0,"published":1,"flags":0,"usePreview":1,"tags":["simple","chroma","cromaticaberration"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    int sampleCount = 50;\n    float blur = 0.5;\n    float strength = 0.15;\n    \n    float falloff = 1.0 / strength;\n\n    vec2 destCoord = fragCoord.xy / iResolution.xy;\n\n    vec2 direction = normalize(destCoord - 0.5); \n    vec2 velocity = direction * blur * pow(length(destCoord - 0.5), falloff);\n\tfloat inverseSampleCount = 1.0 / float(sampleCount); \n    \n    mat3x2 increments = mat3x2(velocity * 1.0 * inverseSampleCount,\n                               velocity * 2.0 * inverseSampleCount,\n                               velocity * 4.0 * inverseSampleCount);\n\n    vec3 accumulator = vec3(0);\n    mat3x2 offsets = mat3x2(0); \n    \n    for (int i = 0; i < sampleCount; i++) {\n        accumulator.r += texture(iChannel0, destCoord + offsets[0]).r; \n        accumulator.g += texture(iChannel0, destCoord + offsets[1]).g; \n        accumulator.b += texture(iChannel0, destCoord + offsets[2]).b; \n        \n        offsets -= increments;\n    }\n\n\tfragColor = vec4(accumulator / float(sampleCount), 1.0);\n}","name":"Image","description":"","type":"image"}]}