{"ver":"0.1","info":{"id":"7tSfDh","date":"1652111584","viewed":78,"name":"Cellular automata editor","username":"muph","description":"Ready for writing and testing cellular automata.\n\nWSAD or arrowkeys to move, +/- or E/Q to zoom.\nENTER to pause simulation, SPACE to step when paused.\nClick to draw.\n\nBuffer A is the automaton state, Buffer B is other state.","likes":7,"published":1,"flags":48,"usePreview":0,"tags":["automata"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define BLACK vec4(0.,0.,0.,1.)\n\nvoid circle(vec2 center, float radius, vec4 color, vec2 fragPos, inout vec4 outColor) {\n    float dist = length(center - fragPos);\n    float amt = smoothstep(radius-1., radius+1., dist);\n    outColor = mix(color, outColor, amt);\n}\n\nvoid mainImage( out vec4 outColor, in vec2 fragPos ) {\n\n    State s = loadState(iChannel1);\n\n    ivec2 wp = screenToWorld(fragPos, s.cam, iResolution);\n    ivec2 res = ivec2(iResolution.xy);\n    \n    // canvas with borders\n    if (wp.x >= 0 && wp.y >= 0 && wp.x < res.x && wp.y < res.y) {        \n        Cell c = getCell(wp, iResolution, iChannel0);\n        outColor = cellPalette[c % CELL_PALETTE_SIZE];        \n    } else if (wp.x == -1 || wp.y == -1)\n        outColor = vec4(0.3,0.3,0.3,1.);\n    else\n        outColor = vec4(0.,0.,0.,1.);\n        \n    // UI\n    for (int i = 0; i < CELL_PALETTE_SIZE; i++) {\n        vec3 sel = colorSelector(i);\n        circle(sel.xy, sel.z, BLACK, fragPos, outColor);\n        circle(sel.xy, sel.z - (i == s.brush ? 2. : 6.), cellPalette[i], fragPos, outColor);\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n\nvoid mainImage(out vec4 color, in vec2 fragCoord) {\n\n    State s = loadState(iChannel1);\n    ivec2 cursor = screenToWorld(iMouse.xy, s.cam, iResolution);\n    ivec2 p = ivec2(fragCoord);\n    \n    Neighborhood n = getNeighborhood(p, iResolution, iChannel0);\n    \n    if (!isKeyToggled(KEY_ENTER) || isKeyPressed(KEY_SPACE)) {\n    \n        //bool goLeft = (s.simStep / 1) % 2 == 0;\n\n#define solid isCellSolid\n#define falling isCellFalling\n\n        if (solid(n.C)) {\n            if (falling(n.C)) {\n                if (!solid(n.B)) n.C = n.B;\n                else {\n                    if (!solid(n.BL) && !solid(n.L) && goLeft(p, s)) n.C = n.BL;\n                    if (!solid(n.BR) && !solid(n.R) && !goLeft(p, s)) n.C = n.BR;\n                }\n            }\n        } else {    \n            if (falling(n.A)) n.C = n.A;\n            else {\n                if (falling(n.AL) && !solid(n.A) && solid(n.L) && !goLeft(p + ivec2(-1.,1.), s)) n.C = n.AL;\n                if (falling(n.AR) && !solid(n.A) && solid(n.R) && goLeft(p + ivec2(1.,1.), s)) n.C = n.AR;\n            }\n        }\n    }\n    \n    // Mouse drawing\n    if (length(vec2(p-cursor))<=0. && iMouse.z > 0.) {\n        n.C = s.brush;\n    }\n    \n    // initial reset\n    if (iFrame == 0) {\n        n.C = 0;\n        \n        if (p.y == int(iResolution.y)-1)\n            n.C = 2;\n    }\n\n    color = encodeCell(n.C);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"\n// Pack two floats into one, losing precision\nvec2 decode(float data) {\n    uint a = floatBitsToUint(data);\n    vec2 x = vec2(a%65535u, a/65535u);\n    return clamp(x/65534.0, 0.,1.)*2.0 - 1.0;\n}\nfloat encode(vec2 x) {\n    x = 65534.0*clamp(0.5*x+0.5, 0., 1.);\n    uint X = uint(round(x.x)) + 65535u*uint(round(x.y));\n    return uintBitsToFloat(X); \n}\n\n////////////////\n// Cell stuff\n\n#define Cell int\n//struct Cell {  int state; };\n\nstruct Neighborhood {\n    // sorry for cursed formatting, there is no other documentation than this\n    Cell\n         AL, A, AR,\n      LL, L, C, R, RR,\n         BL, B, BR;            \n};\n\n#define CELL_PALETTE_SIZE 4\nconst vec4 cellPalette[CELL_PALETTE_SIZE] = vec4[](\n    vec4(1.,1.,1.,1.),\n    vec4(1.,0.,0.,1.),\n    vec4(0.,1.,0.,1.),\n    vec4(0.,0.,1.,1.)\n);\n\nCell getCell(ivec2 worldPos, vec3 res, sampler2D ch) {\n    if (worldPos.y < 0) return 0;\n    if (worldPos.y >= int(res.y)) return 1;\n    vec4 col = texelFetch(ch, worldPos, 0);\n    Cell c;\n    c = floatBitsToInt(col.r);\n    return c;\n}\n\nNeighborhood getNeighborhood(ivec2 worldPos, vec3 res, sampler2D ch) {\n    ivec2 p = worldPos;\n    Neighborhood n;\n    n.C = getCell(p, res, ch);\n    n.A = getCell(p + ivec2( 0, 1), res, ch);\n    n.B = getCell(p + ivec2( 0,-1), res, ch);\n    n.L = getCell(p + ivec2(-1, 0), res, ch);\n    n.R = getCell(p + ivec2( 1, 0), res, ch);\n    n.LL = getCell(p + ivec2(-2, 0), res, ch);\n    n.RR = getCell(p + ivec2( 2, 0), res, ch);\n    n.BL  = getCell(p + ivec2(-1,-1), res, ch);\n    n.BR  = getCell(p + ivec2( 1,-1), res, ch);\n    n.AL  = getCell(p + ivec2(-1, 1), res, ch);\n    n.AR  = getCell(p + ivec2( 1, 1), res, ch);\n    return n;\n}\n\nvec4 encodeCell(Cell c) {\n    vec4 col;\n    col.r = intBitsToFloat(c);\n    return col;\n}\n\nbool isCellSolid(Cell c) {\n    return c == 1 || c == 2;\n}\nbool isCellFalling(Cell c) {\n    return c == 1;\n}\n\n\nint selectFallingCell(Cell left, Cell mid, Cell right) {\n    return 1;\n}\n\n\n\n////////////////\n// Sim stuff\n\n#define KEYBOARD_CHANNEL iChannel2\n#define isKeyDown(keyCode) (texelFetch(KEYBOARD_CHANNEL, ivec2(keyCode, 0), 0).x > 0.)\n#define isKeyPressed(keyCode) (texelFetch(KEYBOARD_CHANNEL, ivec2(keyCode, 1), 0).x > 0.)\n#define isKeyToggled(keyCode) (texelFetch(KEYBOARD_CHANNEL, ivec2(keyCode, 2), 0).x > 0.)\n\n\n#define KEY_W 87\n#define KEY_S 83\n#define KEY_A 65\n#define KEY_D 68\n\n#define KEY_UP 38\n#define KEY_DOWN 40\n#define KEY_LEFT 37\n#define KEY_RIGHT 39\n\n#define KEY_PLUS 107\n#define KEY_MINUS 109\n#define KEY_E 69\n#define KEY_Q 81\n\n#define KEY_ENTER 13\n#define KEY_SPACE 32\n\n\nfloat rand(vec2 pos) {\n    pos = floor(pos) + vec2(351., 797.) * sign(pos.x) + vec2(1234., 351.) * sign(pos.y);\n    float sum = 0.;\n    int iters = 1;\n    for (int i = 1; i <= iters; i++) {\n        float f = float(i);\n        sum += fract(sin(dot(pos, vec2(10.*sin(pos.x*f*1.7), 10.*cos(pos.y*f*1.3))) * 3571.246 * f));\n    }\n    return fract(sum) * 2. - 1.;\n}\n\nstruct Camera {\n    vec2 pos;\n    float scale;\n};\n    \nstruct State {\n    Camera cam;\n    Cell brush; // selected painting color\n    int simStep;\n};\n\n\n#define STATE_MEMORY_FORMAT(s) \\\n    VEC2(s, cam.pos);\\\n    FLOAT(s, cam.scale);\\\n    INT(s, brush);\\\n    INT(s, simStep);\n\nState loadState(sampler2D ch) {\n#define FLOAT(s,x) do { s.x = texelFetch(ch, ivec2(i%32, i/32), 0).r; i++; } while(false)\n#define VEC2(s,x) do { s.x = texelFetch(ch, ivec2(i%32, i/32), 0).rg; i++; } while(false)\n#define INT(s,x) do { s.x = floatBitsToInt(texelFetch(ch, ivec2(i%32, i/32), 0).r); i++; } while(false)\n\n    int i = 0;\n    State s;\n\n    STATE_MEMORY_FORMAT(s)\n    return s;\n    \n#undef FLOAT\n#undef INT\n#undef VEC2\n}\n\nvec4 saveState(State s, vec2 fragCoord) {\n#define FLOAT(s,x) do { if (storeId == i++) result.r = s.x; } while(false)\n#define VEC2(s,x) do { if (storeId == i++) result.rg = s.x; } while(false)\n#define INT(s,x) do { if (storeId == i++) result.r = intBitsToFloat(s.x); } while(false)\n\n    int i = 0;\n    int storeId = int(fragCoord.x) + int(fragCoord.y)*64;\n    vec4 result;\n\n    STATE_MEMORY_FORMAT(s)\n    return result;\n    \n#undef FLOAT\n#undef INT\n#undef VEC2\n}\n\nivec2 screenToWorld(vec2 fragPos, Camera cam, vec3 iResolution) {\n    vec2 wspace = (fragPos - iResolution.xy/2.) / cam.scale + cam.pos;\n    return ivec2(floor(wspace.x), floor(wspace.y));\n}\n\n\nbool goLeft(ivec2 wPos, State s) {\n    wPos.x += s.simStep;\n    return rand(vec2(wPos)) >= -0.5;\n    //return (rand(vec2(wPos)) > 0.) != (s.simStep % 4 <= 1);\n}\n\n// UI\nvec3 colorSelector(int i) {\n    return vec3(30. + float(35*i), 30., 12.);\n}\n\n\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"\n#define KEYBOARD_CHANNEL iChannel2\n\nconst float panSpeed = 10.;\nconst float zoomSpeed = 1.02;\n\nbool click(vec2 center, float radius) {\n    vec2 ms = iMouse.zw;\n    \n    return (ms.x > 0. && ms.y > 0.) && (length(ms - center) <= radius);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragPos ) {\n    \n    State s = loadState(iChannel1);    \n    \n    if (iFrame == 0) {\n        s.cam.scale = 10.;\n        s.cam.pos = vec2(10., 10.);\n        s.brush = 1;\n        s.simStep = 0;\n    } else {\n        if (isKeyDown(KEY_E) || isKeyDown(KEY_PLUS)) s.cam.scale *= zoomSpeed;\n        if (isKeyDown(KEY_Q) || isKeyDown(KEY_MINUS)) s.cam.scale /= zoomSpeed;\n        if (isKeyDown(KEY_W) || isKeyDown(KEY_UP)) s.cam.pos.y += panSpeed / s.cam.scale;\n        if (isKeyDown(KEY_S) || isKeyDown(KEY_DOWN)) s.cam.pos.y -= panSpeed / s.cam.scale;\n        if (isKeyDown(KEY_A) || isKeyDown(KEY_LEFT)) s.cam.pos.x -= panSpeed / s.cam.scale;\n        if (isKeyDown(KEY_D) || isKeyDown(KEY_RIGHT)) s.cam.pos.x += panSpeed / s.cam.scale;\n        \n        // UI\n        for (int i = 0; i < CELL_PALETTE_SIZE; i++) {\n            vec3 sel = colorSelector(i);\n            if (click(sel.xy, sel.z)) {\n                s.brush = i;\n            }            \n        }\n    }\n\n    if (!isKeyToggled(KEY_ENTER) || isKeyPressed(KEY_SPACE)) {\n        s.simStep++;\n    }\n    \n    fragColor = saveState(s, fragPos);\n}","name":"Buffer B","description":"","type":"buffer"}]}