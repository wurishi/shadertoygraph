{"ver":"0.1","info":{"id":"DdX3z4","date":"1665705824","viewed":314,"name":"euclidean distance sdf debugger","username":"jt","description":"Place object in map function. Adjust slice-plane. Visualizes SDF using iq's color scheme.\nNormals of non unit length are marked, overflow red, underflow green.\nTest rhombic dodecahedron mesh. False alarms at reflection planes are due to numerical normals.","likes":18,"published":1,"flags":0,"usePreview":0,"tags":["sdf","distance","octahedron","euclidean","debugger","rhombicdodecahedron","squashed","snappointtonearestsurface"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/DdX3z4 euclidean distance sdf debugger by jt\n\n// Place object in map function. Adjust slice-plane. Visualizes SDF using iq's color scheme.\n// In addition normals of non unit length are marked, overflow red, underflow green.\n// Test rhombic dodecahedron mesh. False alarms at reflection planes\n// are due to numerically evaluating normals across discontinuities.\n\n// An euclidean signed distance function is apparently defined by these equations\n// (aka oriented distance function in the source) if it is at least C2 continuous:\n//     |grad h(x)| = 1\n//     h(x+d*grad h(x)) = h(x)+d\n//     grad h(x+d*grad h(x)) = grad h(x)\n// Source: https://en.wikipedia.org/wiki/Parallel_curve#Properties_of_the_distance_function:[12][16]\n// quoting https://www2.mathematik.tu-darmstadt.de/~ehartmann/cdgen0104.pdf page 30\n// (Geometry and Algorithms for COMPUTER AIDED DESIGN by Erich Hartmann)\n// Normals of non-unit length can easily be visualized.\n// Other distance-field errors can be found by checking if h(x-grad h(x)) = 0\n// (\"snap-point-to-nearest-surface\" - thanks to spalmer for pointing that one out)\n// which is a special case of the second equation with d = -h(x)\n// Translation of the equations from math to language by spalmer (thanks a lot):\n//     1: \"gradients have unit length\"\n//     2: \"the sdf increases monotonically in the direction of the gradient\" (or should that be \"linearly\"?)\n//     3: \"gradients radiate from surfaces in perfectly straight lines\"\n// except at the discontinuities (e.g. at interior \"spines\", generally at symmetries).\n\n// Note: gradient is the first derivative of a scalar field,\n//       laplacian (divergence of the gradient) is the second derivative of a scalar field (mean curvature).\n// So C2 continuity (in areas between the spine/reflection/symmetry discontinuities) means:\n//     C0: \"distance is continuous\" (required)\n//     C1: \"gradient is continuous\" (counter example: edges)\n//     C2: \"curvature is continuous\" (counter example, thx ollj, e.g. capsule, visible when shaded)\n\n// NOTE: If I understand correctly already a simple box sdf does not have c1 continuity,\n//       because the gradients near the vertices (2d) resp. edges (3d) change direction when crossing the surface.\n\n// BTW:\n// https://www.wolframalpha.com/input?i=gradient+calculator\n// https://www.wolframalpha.com/input?i=divergence+calculator\n// https://www.wolframalpha.com/input?i=laplacian+calculator\n// Also no need to worry about curl here, because https://proofwiki.org/wiki/Curl_of_Gradient_is_Zero\n\n// tags: sdf, distance, octahedron, euclidean, debugger, rhombicdodecahedron, squashed\n\n// MIT License, as in https://www.shadertoy.com/terms\n\n/*\n\nCopyright (c) 2022 Jakob Thomsen\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n*/\n\n#define VERIFY_INTERIOR /* thanks to spalmer - detects broken SDFs (can cause more false alarms) */\n#define VERIFY_EXTERIOR /* thanks to spalmer - detects broken SDFs (can cause more false alarms) */\n// (See e.g. https://www.shadertoy.com/view/ddXGDr verify SDF error detection for test on deliberately incorrect SDF)\n// #define VERIFY_GRADIENT_CONTINUITY_ALONG /* WARNING: detects change of direction along gradients but causes false alarms e.g. outwards from box vertices */\n#define VERIFY_GRADIENT_CONTINUITY_SIDEWAYS /* WARNING: detects change of direction in \"parallel\" gradients but causes false alarms where gradients curve (e.g. towards sphere center) or at reflections/symmetries */\n\n#define AA 1\n\n#define EPSILON 0.001\n#define DIST_MAX 50.0\n#define ITER_MAX 500u\n\n#define pi 3.1415926\n\nfloat slice_z()\n{\n    return cos(iTime*0.5)*0.4-0.4; // TWEAK SLICE-PLANE HERE\n}\n\n// based on https://iquilezles.org/articles/distfunctions/\nfloat line( vec3 p, vec3 a, vec3 b )\n{\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\n// Square bipyramid, pyramidille, hexakis cubic honeycomb, oblate octahedrille, oboctahedrille\n// https://en.wikipedia.org/wiki/Tetragonal_disphenoid_honeycomb#Hexakis_cubic_honeycomb\n// https://en.wikipedia.org/wiki/Tetragonal_disphenoid_honeycomb#Square_bipyramidal_honeycomb\nfloat squashed_octahedron_mesh(vec3 p) // jt\n{\n    p = abs(p - 0.5) + 0.5; // mirror symmetry\n    p.xy = p.x < p.y ? p.xy : p.yx; // reflect\n    return min(line(p, vec3(1,1,0.5), vec3(0,1,0.5)), line(p, vec3(1,1,0.5), vec3(0.5,0.5,1)));\n}\n\nfloat rhombic_dodecahedron_mesh(vec3 p) // jt\n{\n    p = abs(p - 0.5) + 0.5; // mirror symmetry\n    p.xy = p.x < p.y ? p.xy : p.yx; // reflect\n    p.yz = p.y < p.z ? p.yz : p.zy; // reflect\n    return line(p, vec3(1,1,0.5), vec3(0.5,0.5,1));\n}\n\nfloat rhombic_dodecahedron(vec3 position, float halfSize) // https://www.shadertoy.com/view/DsdcWX Rhombic Dodecahedron (SDF) by TheTurk\n{\n    halfSize *= 0.5;\n    position = abs(position);\n    position.xy -= vec2(-1.0, 1.0) * min(position.y - position.x, 0.0);\n    position.yz -= vec2(1.0, -1.0) * min(position.y - position.z, 0.0);\n    position.y -= halfSize;\n    position.xz = abs(position.xz);  \n    position.xz -= vec2(-1.0, 1.0) * min(position.z - position.x, 0.0);\n    float h = position.y + position.z - halfSize;\n    vec3 q = position;\n    q.yz -= 0.5 * h;\n    q -= vec3(2.0, 1.0, -1.0) / 3.0 * max(q.x - q.z, 0.0);\n    q = clamp(q, 0.0, halfSize);\n    float d = length(position - q);    \n    return h < 0.0 ? -d : d;\n}\n\nfloat sphere(vec3 p, float s)\n{\n    return length(p) - s;\n}\n\nfloat box(vec3 p, vec3 b)\n{\n    vec3 q = abs(p) - b;\n    return length(max(q, 0.0)) + min(max(q.x,max(q.y,q.z)), 0.0);\n}\n\nfloat sdOctahedron(vec3 p, float s) // https://www.shadertoy.com/view/wsSGDG Octahedron - distance by iq\n{\n    p = abs(p);\n    float m = p.x + p.y + p.z - s;\n    vec3 r = 3.0*p - m;\n    \n#if 0\n    // filbs111's version (see comments)\n    vec3 o = min(r, 0.0);\n    o = max(r*2.0 - o*3.0 + (o.x+o.y+o.z), 0.0);\n    return length(p - s*o/(o.x+o.y+o.z));\n#else\n    // my original version\n\tvec3 q;\n         if( r.x < 0.0 ) q = p.xyz;\n    else if( r.y < 0.0 ) q = p.yzx;\n    else if( r.z < 0.0 ) q = p.zxy;\n    else return m*0.57735027;\n    float k = clamp(0.5*(q.z-q.y+s),0.0,s); \n    return length(vec3(q.x,q.y-s+k,q.z-k)); \n#endif    \n}\n\nfloat dodecahedron(vec3 position) // https://www.shadertoy.com/view/ddGyDc Dodecahedron (SDF) by TheTurk\n{\n    position = abs(position);\n    float phi = (1.0 + sqrt(5.0)) * 0.5; \n    vec3 n1 = vec3(0.0, phi, 1.0) / sqrt(phi + 2.0);\n    vec3 n2 = vec3(phi + 2.0, phi - 1.0, -1.0) / sqrt(4.0 * phi + 8.0); \n    vec3 n3 = vec3(phi, 1.0, 0.0) / sqrt(phi + 2.0);\n    vec3 n4 = vec3(-1.0, phi, 3.0 - phi) / sqrt(12.0 - 4.0 * phi);\n    vec3 p1 = position - vec3(0.0, 1.0, 0.0);\n    float h1 = dot(p1 - vec3(1.0, 0.0, 1.0), n1);\n    float m1 = dot(p1 - vec3(1.0, 0.0, 1.0), n2);\n    vec3 d1 = p1 - clamp(p1 - n1 * h1 - n2 * max(m1, 0.0), vec3(0.0), vec3(1.0, phi - 1.0, 1.0)); \n    float h2 = dot(p1 - vec3(1.0, 0.0, 1.0), n3);\n    float m2 = dot(p1 - vec3(1.0, 0.0, 1.0), n4);\n    vec3 d2 = p1 - clamp(p1 - n3 * h2 - n4 * max(m2, 0.0), vec3(phi - 1.0, 0.0, 0.0), vec3(1.0, phi - 1.0, 1.0));\n    vec3 p2 = (position - vec3(1.0, 0.0, 0.0)).zxy;\n    float h3 = dot(p2 - vec3(1.0, 0.0, 1.0), n1);\n    float m3 = dot(p2 - vec3(1.0, 0.0, 1.0), n2);\n    vec3 d3 = p2 - clamp(p2 - n1 * h3 - n2 * max(m3, 0.0), vec3(0.0), vec3(1.0, phi - 1.0, 1.0)); \n    float h4 = dot(p2 - vec3(1.0, 0.0, 1.0), n3);\n    float m4 = dot(p2 - vec3(1.0, 0.0, 1.0), n4);\n    vec3 d4 = p2 - clamp(p2 - n3 * h4 - n4 * max(m4, 0.0), vec3(phi - 1.0, 0.0, 0.0), vec3(1.0, phi - 1.0, 1.0));\n    vec3 p3 = (position - vec3(0.0, 0.0, 1.0)).yzx;\n    float h5 = dot(p3 - vec3(1.0, 0.0, 1.0), n1);\n    float m5 = dot(p3 - vec3(1.0, 0.0, 1.0), n2);\n    vec3 d5 = p3 - clamp(p3 - n1 * h5 - n2 * max(m5, 0.0), vec3(0.0), vec3(1.0, phi - 1.0, 1.0)); \n    float h6 = dot(p3 - vec3(1.0, 0.0, 1.0), n3);\n    float m6 = dot(p3 - vec3(1.0, 0.0, 1.0), n4);\n    vec3 d6 = p3 - clamp(p3 - n3 * h6 - n4 * max(m6, 0.0), vec3(phi - 1.0, 0.0, 0.0), vec3(1.0, phi - 1.0, 1.0));\n    float d = sqrt(min(min(min(min(min(dot(d1, d1), dot(d2, d2)), dot(d3, d3)), dot(d4, d4)), dot(d5, d5)), dot(d6, d6)));\n    float s = max(max(max(max(max(h1, h2), h3), h4), h5), h6);\n    return s < 0.0 ? -d : d;\n}\n\nfloat tetrahedron(vec3 position, float halfSize, float cornerRadius) // https://www.shadertoy.com/view/dsGfRG Tetrahedron - Distance by TheTurk\n{\n    float s = halfSize - cornerRadius;\n    position.xz = abs(position.xz);\n    if (dot(position, vec3(-sqrt(2.0), -2.0, sqrt(2.0))) < 0.0) {\n        position = vec3(position.z, -position.y, position.x);\n    }\n    vec3 q = position;\n    float h = q.z * sqrt(2.0) - q.y - s;\n    q.yz -= vec2(-1.0, sqrt(2.0)) / 3.0 * h;\n    float m = q.x + q.z - sqrt(2.0) * s;\n    q -= vec3(3.0, sqrt(2.0), 1.0) / 4.0 * max(m, 0.0);   \n    q = clamp(q, vec3(0.0, -s, 0.0), vec3(sqrt(2.0) * s, s, sqrt(2.0) * s));\n    float d = length(position - q); \n    return (h < 0.0 ? -d : d) - cornerRadius;\n}\n\nfloat isosceles_trapezoidal_prism(vec3 position, float halfWidth1, float halfWidth2, float halfHeight, float halfDepth) // https://www.shadertoy.com/view/msVBzy Isosceles Trapezoidal Prism SDF by TheTurk\n{\n    position.x = abs(position.x);\n    position.x -= 0.5 * (halfWidth2 + halfWidth1);\n    vec2 e = vec2(0.5 * (halfWidth2 - halfWidth1), halfHeight);\n    vec2 q = position.xy - e * clamp(dot(position.xy, e) / dot(e, e), -1.0, 1.0);\n    float d1 = length(q);\n    if (q.x < 0.0) {\n        d1 = max(-d1, abs(position.y) - halfHeight);\n    }\n    float d2 = abs(position.z) - halfDepth;\n    return length(max(vec2(d1, d2), 0.0)) + min(max(d1, d2), 0.0);\n}\n\n/*\nfloat intractable_bug(vec3 p) // This type of error is missed by the simple verification - can be found by VERIFY_GRADIENT_CONTINUITY_ALONG but that causes false alarms (e.g. outwards from box vertices)\n{//return box(p, vec3(1));\n    return all(lessThan(abs(p), vec3(1))) ? box(p, vec3(1)) : box(p-vec3(0,1,0), vec3(1,0,0));\n}\n*/\nfloat intractable_bug(vec3 p) // This type of error is missed by the simple verification - can be found by VERIFY_GRADIENT_CONTINUITY_SIDEWAYS but that causes false alarms (e.g. outwards from box vertices)\n{\n    return p.x < 0.0 ? p.y : -p.y;\n}\n\nfloat map(vec3 p) // PLACE SDF TO DEBUG HERE\n{//return intractable_bug(p);\n    //return isosceles_trapezoidal_prism(p, 1.0, 2.0, 1.0, 1.0);\n    //return line(p, vec3(0,0,-1), vec3(0,0,+1))- 0.1;\n    //return sphere(p, 1.0); // boring, no errors\n    //return tetrahedron(p, 1.0, 0.0);\n    //return squashed_octahedron_mesh(p/2.0+0.5)*2.0-0.05; // NOTE: normals calculated from differences become zero at reflection-planes when evaluating normals numerically!\n    return rhombic_dodecahedron_mesh(p/2.0+0.5)*2.0-0.05; // NOTE: normals calculated from differences become zero at reflection-planes when evaluating normals numerically!\n    //return rhombic_dodecahedron(p, 1.0);\n    //return mix(squashed_octahedron_mesh(p/2.0+0.5)*2.0, rhombic_dodecahedron_mesh(p/2.0+0.5)*2.0, cos(iTime*0.1)*0.5+0.5)-0.05; // interpolation to break SDF deliberately to visualize errors\n    //return sdOctahedron(p, 1.0);\n    //return dodecahedron(p);\n}\n\nvec3 gradient(vec3 p) // NOT normalized so we can use it's length to detect errors in the SDF.\n{\n    vec2 h = vec2(EPSILON,0);\n    return (vec3(map(p+h.xyy) - map(p-h.xyy),\n                 map(p+h.yxy) - map(p-h.yxy),\n                 map(p+h.yyx) - map(p-h.yyx)))/EPSILON/2.0;\n}\n\nfloat trace(vec3 ro, vec3 rd) // iteration count limited to avoid stalling if ray passes very close to surface\n{\n    float t;\n    uint i;\n    for(i = 0u, t = 0.0; i < ITER_MAX && t < DIST_MAX; i++)\n    {\n        float h = map(ro + rd * t);\n        if(h < EPSILON)\n            return t;\n        t += h;\n    }\n    return DIST_MAX;\n}\n\nvec3 hash33(vec3 p3) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n}\n/*\n// https://www.shadertoy.com/view/WttXWX \"Best\" Integer Hash by FabriceNeyret2\n// implementing Chris Wellons' https://nullprogram.com/blog/2018/07/31/\nuint triple32(uint x)\n{\n    x ^= x >> 17;\n    x *= 0xed5ad4bbU;\n    x ^= x >> 11;\n    x *= 0xac4c1b51U;\n    x ^= x >> 15;\n    x *= 0x31848babU;\n    x ^= x >> 14;\n    return x;\n}\n*/\nvec4 trace_slice(vec3 ro, vec3 rd)\n{\n    vec3 planecolor = vec3(0);\n    // z = ro.z+d*rd.z\n    // z-ro.z = d*rd.z\n    // (z-ro.z)/rd.z = d\n    float dist = (slice_z()-ro.z)/rd.z;\n    if(dist > 0.0)\n    {\n        vec3 dst = ro + rd * dist;\n        float d = map(dst);\n        float n = length(gradient(dst));\n\n        d /= 5.0; // SCALE SDF VISUALIZATION\n\n        // iq's sdf visualization colors\n        planecolor = vec3(1.0) - sign(d) * vec3(0.1, 0.4, 0.7);\n        planecolor *= 1.0 - exp(-24.0 * abs(d));\n        planecolor *= 0.8 + 0.2 * cos(240.0*d);\n        planecolor = mix(planecolor, vec3(1.0), 1.0 - smoothstep(0.0, 0.01, abs(d)));\n\n        planecolor = mix(planecolor, vec3(0,1,0), smoothstep(1.0,1.0-EPSILON, n)); // gradient too small? GREEN\n        planecolor = mix(planecolor, vec3(1,0,0), smoothstep(1.0,1.0+EPSILON, n)); // gradient too large? RED\n        //planecolor = mix(planecolor, vec3(0,0,1), smoothstep(0.0+EPSILON,0.0, n)); // gradient zero? BLUE\n\n        // The error detection is basically, quoting spalmer,\n        // \"one iteration of snap-point-to-(nearest-)surface algorithm\".\n        // Jump the distance given by the SDF at the current position\n        // along the gradient given by the SDF at the current position\n        // (direction to the nearest surface) and evaluate the SDF there.\n        // Because the SDF is supposed to describe the distance to the surface,\n        // the result should be (close to) zero.\n        //float error = map(dst - gradient(dst) * map(dst)); // SDF error detection thanks to spalmer!\n        float distance_towards_nearest_surface = map(dst);\n        vec3 direction_towards_nearest_surface = gradient(dst);\n        float error = map(dst - direction_towards_nearest_surface * distance_towards_nearest_surface);\n#ifdef VERIFY_INTERIOR\n        planecolor += smoothstep(0.0, sqrt(EPSILON),-error) * (cos(iTime*2.0*pi)*0.5+0.5); // SDF interior otherwise broken? WHITE, BLINKING (can cause false alarms)\n#endif\n#ifdef VERIFY_EXTERIOR\n        planecolor += smoothstep(0.0, sqrt(EPSILON),+error) * (cos(iTime*2.0*pi)*0.5+0.5); // SDF exterior otherwise broken? WHITE, BLINKING (can cause false alarms)\n#endif\n        //planecolor += smoothstep(0.0,sqrt(EPSILON), abs(error)) * (cos(iTime*2.0*pi)*0.5+0.5); // SDF otherwise broken? WHITE, BLINKING\n#ifdef VERIFY_GRADIENT_CONTINUITY_ALONG\n        vec3 cross_surface_direction = gradient(dst - direction_towards_nearest_surface * (distance_towards_nearest_surface + sign(distance_towards_nearest_surface) * EPSILON));\n        float dir_error = dot(gradient(dst), cross_surface_direction);\n        planecolor += smoothstep(0.0,sqrt(EPSILON), abs(dir_error - 1.0)) * (cos(iTime*2.0*pi)*0.5+0.5); // SDF otherwise broken? WHITE, BLINKING\n#endif\n#ifdef VERIFY_GRADIENT_CONTINUITY_SIDEWAYS\n        //vec3 epsilon = (hash33(dst*100.0) * 2.0 - 1.0) * 0.1/*step-size*/;\n        vec3 epsilon = (hash33(dst*100.0) * 2.0 - 1.0) * 0.01/*step-size*/;\n        //if(abs(dot(gradient(dst-epsilon), gradient(dst+epsilon)) - 1.0) > 0.5/*sensitivity*/)\n        if(abs(dot(gradient(dst-epsilon), gradient(dst+epsilon)) - 1.0) > 0.05/*sensitivity*/)\n            //planecolor.z += 1.0;\n            planecolor += mix(vec3(1,0,1),vec3(0,1,1), 0.5 + 0.5 * cos(iTime * 5.0));\n#endif\n    }\n\n    return vec4(planecolor, dist);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 o = ivec2(0);\n    vec3 sum = vec3(0);\n    for(o.y = 0; o.y < AA; o.y++)\n    {\n        for(o.x = 0; o.x < AA; o.x++)\n        {\n            vec2 uv = (fragCoord.xy + vec2(o) - vec2(AA-1)*0.5) / iResolution.xy;\n            vec2 ndc = 2.0 * uv - 1.0;\n            ndc.x *= float(iResolution.x) / float(iResolution.y);\n            float mx = 2.0 * pi * float(iMouse.x) / float(iResolution.x);\n            float my = pi / 2.0 + pi / 2.0 * float(iMouse.y) / float(iResolution.y);\n            mx = (iMouse.x > 10.0) ? mx : 2.0 * pi * fract(iTime * 0.05);\n            my = (iMouse.y > 10.0) ? my : 1.25 * pi / 2.0;\n\n            mat2 yaw = mat2(vec2(cos(mx), sin(mx)), vec2(-sin(mx), cos(mx)));\n            vec3 ro = vec3(0.0, 0.5, -5.0 );//vec3(0.0, -10.0 * my, 0.0);\n            //mat2 Pitch = mat2(vec2(0.0, 1.0), vec2(-1.0, 0.0));\n            mat2 pitch = mat2(vec2(cos(my), sin(my)), vec2(-sin(my), cos(my)));\n            ro.yz = pitch * ro.yz;\n            ro.xy = yaw * ro.xy;\n\n            vec3 rd = normalize(vec3(0.5 * ndc.xy, 1.0)); // NOTE: omitting normalization results in clipped edges artifact\n            rd.yz = pitch * rd.yz;\n            rd.xy = yaw * rd.xy;\n\n            vec4 slice = trace_slice(ro, rd);\n            vec3 scenecolor = vec3(0);\n\n            float dist = trace(ro, rd);\n            if(dist < DIST_MAX)\n            {\n                if(slice.w < 0.0)\n                    slice.w = DIST_MAX;\n                bool above = dist < slice.w;\n                if(above) // view only part above plane (comment-out to view whole shape)\n                {\n                    vec3 dst = ro + rd * dist;\n                    vec3 n = normalize(gradient(dst)); // NOTE: gradient is unnormalized in case of errors!\n\n                    //vec3 lightdir = normalize(vec3(1, 1, 1));\n                    vec3 lightdir = normalize(vec3(0, 0, 1));\n                    vec3 ambient = vec3(0.1);\n                    float diffuse = max(dot(lightdir, n), 0.0);\n                    float specular = pow(max(dot(normalize(lightdir - rd), n), 0.0), 50.0);\n\n                    scenecolor = vec3(.1); // object color\n                    scenecolor = /*specular+*/ (ambient + diffuse) * scenecolor;\n\n                    {\n                        // transform normal to local coordinates\n                        n.xy = n.xy*yaw;\n                        n.yz = n.yz*pitch;\n                        scenecolor = max(scenecolor, smoothstep(0.8, 1.0, length(n.xy))); // rim-light\n                    }\n\n                    scenecolor = sqrt(scenecolor); // approximate gamma\n                }\n            }\n\n            vec3 planecolor = 1.5*slice.xyz*exp2(-slice.w*slice.w/20.0); // workaround: \"fog\" hides moiree pattern\n\n            vec3 color = scenecolor + planecolor; // TRANSPARENT\n            //vec3 color = mix(scenecolor, planecolor, step(slice.w, dist)); // SOLID\n            sum += color;\n        }\n    }\n\n    fragColor = vec4(sum/float(AA*AA), 1.0);\n}\n","name":"Image","description":"","type":"image"}]}