{"ver":"0.1","info":{"id":"XXVXWt","date":"1720639075","viewed":54,"name":"Raymarched Blobs","username":"Dipper98","description":"A simple raymarching shader :)","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarching","animation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nMy first raymarching shader!\n\nCredit to this tutorial for the basic raymarching functions.\nhttps://inspirnathan.com/posts/47-shadertoy-tutorial-part-1\n*/\n\nconst int MAX_MARCHING_STEPS = 255;\nconst float MIN_DIST = 0.0;\nconst float MAX_DIST = 100.0;\nconst float PRECISION = 0.001;\n\nfloat sdSphere(vec3 p, float r, vec3 offset ){\n  return length(p - offset) - r;\n}\nfloat sdScene(vec3 p) {\n  float sphereLeft = sdSphere(p, 1., vec3(sin(iTime) - 2., cos(iTime), -2));\n  float sphereRight = sdSphere(p, 1., vec3(cos(iTime) + 2., sin(iTime), -2));\n  \n  float distort = cos(5. * p.x) * cos(5. * p.y) * cos(5. * p.z) * 0.2;\n  sphereLeft += distort;\n  sphereRight += distort;\n  return min(sphereLeft, sphereRight);\n}\nfloat rayMarch(vec3 ro, vec3 rd, float start, float end) {\n  float depth = start;\n\n  for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n    vec3 p = ro + depth * rd;\n    float d = sdScene(p);\n    depth += d;\n    if (d < PRECISION || depth > end) break;\n  }\n\n  return depth;\n}\nvec3 calcNormal(in vec3 p) {\n    vec2 e = vec2(1.0, -1.0) * 0.0005;\n    float r = 1.; \n    return normalize(\n      e.xyy * sdScene(p + e.xyy) +\n      e.yyx * sdScene(p + e.yyx) +\n      e.yxy * sdScene(p + e.yxy) +\n      e.xxx * sdScene(p + e.xxx));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n  vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n  vec3 col = vec3(0);\n  vec3 ro = vec3(0, 0, 3); // ray origin that represents camera position\n  vec3 rd = normalize(vec3(uv, -1)); // ray direction\n\n  float d = rayMarch(ro, rd, MIN_DIST, MAX_DIST); // distance to sphere\n\n  if (d > MAX_DIST) {\n    col = vec3(0.5, 0.5, 0.5);\n  } else {\n    vec3 p = ro + rd * d;\n    vec3 normal = calcNormal(p);\n    vec3 lightPosition = vec3(2, 2, 7);\n    vec3 lightDirection = normalize(lightPosition - p);\n\n    float dif = clamp(dot(normal, lightDirection), 0.3, 1.);  \n    col = dif * vec3(0, 0.67, 1) + vec3(0.5, 0.5, 0.5) * .2;\n  }\n\n  fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}