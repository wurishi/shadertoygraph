{"ver":"0.1","info":{"id":"4dKGDt","date":"1457105006","viewed":716,"name":"Some ideas for a WebGL intro","username":"frutbunn","description":"Some ideas for a quick WebGL intro - nothing new. Problem would be where to put the scrolltext...","likes":17,"published":1,"flags":64,"usePreview":0,"tags":["3d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dX3zn","filepath":"/media/a/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png","previewfilepath":"/media/ap/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"lslGWj","filepath":"https://soundcloud.com/thebigbanglive/the-big-bang-blaster","previewfilepath":"https://soundcloud.com/thebigbanglive/the-big-bang-blaster","type":"musicstream","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS \t\t\t60\n#define MAX_DISTANCE \t\t8.5\n#define MARCHING_STEP_INC \t.3\n#define EPSILON \t\t\t.01\n\n#define COLORS  4\n\n#define PI 3.14159265358979323846\n#define TIMER(sec, min, max) (((mod(iTime, (sec)) * ((max) - (min))) / (sec)) + (min))\n\n//float globalTimer = TIMER(20., 0., 60.);\n#define SCENE1  0.\n#define SCENE2  30.\n#define SCENE3  40.\n#define SCENE4  50.\n#define SCENE5  60.\n\nfloat scol[7];\nfloat b[4];\nint mode = 0; \n\nvec4 texSphere(in sampler2D t, in vec3 p, in vec3 n, in float k) {\n    return texture(t, p.yz * k) * abs (n.x)\n     + texture(t, p.xz * k) * abs (n.y)\n     + texture(t, p.xy * k) * abs (n.z);\n}\n\nvec4 texCube(in sampler2D t, in vec3 p, in vec3 n, in float k ) {\n\tvec4 x = texture( t, p.yz );\n\tvec4 y = texture( t, p.zx );\n\tvec4 z = texture( t, p.xy );\n    vec3 w = pow( abs(n), vec3(k) );\n\treturn (x*w.x + y*w.y + z*w.z) / (w.x+w.y+w.z);\n}\n\nmat2 mm2(in float a) {\n    float c = cos(a), s = sin(a);\n    \n    return mat2(c, s, -s, c);\n}\n\nfloat smin(in float a, in float bb ) {\n    float k = max(2., b[0]*4.);\n    float res = exp( -k*a ) + exp( -k*bb ); \n    \n    \n    return -log( res )/k;\n}\n\nfloat sdTorus(in vec3 p, in vec2 t){vec2 q = vec2(length(p.xz)-t.x,p.y); return length(q)-t.y;}\n\nfloat map(in vec3 p, out float o[COLORS]) {\n    p*=1. + scol[0]*.1;\n\n    o[0] = sdTorus(p, vec2(1.+scol[2], .15)) + cos(1.5*p.x)*cos(1.5*p.y)*sin(1.5*p.z);\n    o[2] = sdTorus(p, vec2(1.+scol[4], .15)) + cos(1.5*p.x)*sin(1.5*p.y)*sin(1.5*p.z);\n\n    p.xy*=mm2(PI*.5);\n\n    o[1] = sdTorus(p, vec2(1.+scol[3], .15)) + cos(1.5*p.x)*cos(1.5*p.y)*cos(1.5*p.z);\n    o[3] = sdTorus(p, vec2(1.+scol[5], .15)) + sin(1.5*p.x)*sin(1.5*p.y)*sin(1.5*p.z);\n\n    return smin(o[0], smin(o[1], smin(o[2], o[3])));\n}\n\nfloat scene(in vec3 p, out float o[COLORS]) {\n    return map(p, o);\n}\n\nfloat scene(in vec3 p) {\n    float o[COLORS]; return map(p, o);\n}\n\nvoid colorize(in float d, in vec3 material_col, inout float z_depth, inout vec3 pixel_col) {\n    const float max_displace = .25;\n    const float max_col_bleed = 1.25;\n    \n    float nc = smoothstep(d-max_col_bleed, d+max_col_bleed, z_depth);\n    float nzd = smoothstep(d-max_displace, d+max_displace, z_depth);\n    \n    z_depth = d*(nzd) + z_depth*(1.-nzd);\n    pixel_col = (1.-nc)*pixel_col + (nc)*material_col;\n}\n\nfloat rayMarch(in vec3 origin, in vec3 ray, out vec3 col) {\n    float o[COLORS];\n    \n    float t = 0.;\n    for (int i=0; i < MAX_STEPS; i++) {\n        float d = scene(origin + ray*t, o);\n\n        if (d < EPSILON) \n            break;\n\n        t += d*MARCHING_STEP_INC;\n\n        if (t > MAX_DISTANCE) \n            break;\n    }\n\n    float z_depth = 1.;\n    colorize(o[0], vec3(1.*scol[0], 1.*scol[6], 1.*scol[4]), z_depth, col );\n    colorize(o[2], vec3(1.*scol[1], 1.*scol[5], 0.), z_depth, col );\n    \n    colorize(o[1], vec3(0., .5*scol[6], 1.*scol[2]), z_depth, col );\n    colorize(o[3], vec3(1.*scol[2], 0., .5*scol[3]), z_depth, col );\n    \n    col = clamp(col, 0., 1.);\n    \n    return t;\n}\n\nfloat ambientOcculation(in vec3 origin, in vec3 ray) {\n    const float delta = .1;\n    const int samples = 6;\n    float r = 0.;\n    \n    for (int i=1; i <= samples; i++) {\n        float t = delta * float(i);\n        float d = scene(origin + ray*t);\n        float len = abs(t - d);\n        r += len * pow(2.0, -float(i));\n    }\n    \n    return r;\n}\n\nfloat shadowSample(in vec3 origin, in vec3 ray) {\n    float r = 1.;\n    float t = 1.;\n    const int samples = 12;\n    \n    for (int i=0; i <= samples; i++) {\n        float d = scene(origin + ray*t);\n        r = min(r, 4.0*d/t);\n        t += d;\n    }\n    \n    return max(r, 0.);\n}\n\nvec3 getNormal(in vec3 p, in float ep) {\n    float d0 = scene(p);\n    float dX = scene(p - vec3(ep, 0.0, 0.0));\n    float dY = scene(p - vec3(0.0, ep, 0.0));\n    float dZ = scene(p - vec3(0.0, 0.0, ep));\n\n    return normalize(vec3(dX-d0, dY-d0, dZ-d0));\n}\n\nvec3 starfield(in vec2 uv) {\n    vec3 col = vec3(.0);    \n    vec3 ray = vec3(uv*.8, .7);\n    ray.xy*=mm2(TIMER(10. ,0., -PI*2.));\n\n    vec3 t = ray/max(abs(ray.x), abs(ray.y));\n    vec3 p = 1.*t+.5;\n    \n    if(mode==1){\n    \tfloat dd = PI, c = cos(dd*p.y+dd), s = sin(dd*p.y+dd);\n        p = vec3(mat2(c,-s,s,c)*p.xz,p.y);\n    }\n    \n    for(int i=0; i<3; i++) {\n        float n = fract(sin(dot((vec2(floor(p.xy*30.334))), vec2(12.9898, 78.233)))*43758.5453)+.5;\n        float z = fract(cos(n)-sin(n)-iTime*.2);       \n        float d = 60.*z-p.z;\n\n        if(b[0]>1.5)\n        d = b[0]*2.*z-p.z;\n        \n        float j = max(0., 1.5-2.*length(fract(p.xy)-.5));\n        vec3 c = max(vec3(0), vec3(1.0-abs(d))*(1./t.z*2.));\n        \n        col += (1.-z)*c*j*1.2;\n        p += t;\n    }\n\n    if(mode==1){\n        col.r *= scol[1]*1.7;\n        col *= length(uv*.12);\n    }\n\n    col = max(vec3(0.), min(vec3(1.), col));\n\n    return col;\n}\n\n\nfloat f1(in float x) {\n    return sqrt(1.-(x-1.)*(x-1.))*1.;\n}\n\nvec3 interference(in vec2 uv, in vec3 s, in float d) {\n    vec2 uv2= uv - d;\n\n    s *= abs (.12/sin((uv2.y)) ); \n    \n    return s;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (gl_FragCoord.xy / iResolution.xy) - vec2(.5);\n    vec2 uv_crt2 = uv;\n    \n    float curvature = length(uv*.5 * uv*.5);\n    uv = uv*curvature + uv*.935;\n    \n    vec2 uv_crt = uv;\n    \n    uv.x *= iResolution.x/iResolution.y;\n   \n    #\tdefine MM 5.5\n    scol[0]=texture(iChannel2, vec2(0., 0.25) ).x;     scol[0]=f1(clamp(1.*scol[0]*scol[0], 0., 1.)); scol[0]*=MM*scol[0]*scol[0];\n    scol[1]=texture(iChannel2, vec2(.17*1., 0.25) ).x; scol[1]=f1(clamp(1.*scol[1]*scol[1], 0., 1.)); scol[1]*=MM*scol[1]*scol[1];\n    scol[2]=texture(iChannel2, vec2(.17*2., 0.25) ).x; scol[2]=f1(clamp(1.*scol[2]*scol[2], 0., 1.)); scol[2]*=MM*scol[2]*scol[2];\n    scol[3]=texture(iChannel2, vec2(.17*3., 0.25) ).x; scol[3]=f1(clamp(1.*scol[3]*scol[3], 0., 1.)); scol[3]*=MM*scol[3]*scol[3];\n    scol[4]=texture(iChannel2, vec2(.17*4., 0.25) ).x; scol[4]=f1(clamp(1.*scol[4]*scol[4], 0., 1.)); scol[4]*=MM*scol[4]*scol[4];\n    scol[5]=texture(iChannel2, vec2(.17*5., 0.25) ).x; scol[5]=f1(clamp(1.*scol[5]*scol[5], 0., 1.)); scol[5]*=MM*scol[5]*scol[5];\n    scol[6]=texture(iChannel2, vec2(.99, 0.25) ).x;    scol[6]=f1(clamp(1.*scol[6]*scol[6], 0., 1.)); scol[6]*=MM*scol[6]*scol[6];    \n\n    b[0] = (scol[1]+scol[1]+scol[0])* .25;\n    b[1] = (scol[3]+scol[3]+scol[2])* .15;\n    b[2] = (scol[4]+scol[5]+scol[4])* .3;\n    b[3] = (scol[2]+scol[6]+scol[6])* .25;\n\n\n    if(b[0]>1.2) mode = 1;\n    if(b[0]>1.2) uv*=.3+b[0]*.4;\n    \n    \n    vec2 uv2 = uv;\n    \n    vec3 eye = vec3(0., 0., -5.);\n    vec3 light = vec3(3., -1.5, -6.);\n    vec3 ray = vec3(uv.x, uv.y, 1.);\n    \n    vec3 scene_color = vec3(0.);\n\n    float rz = TIMER(10. ,0., PI*2.);\n    float rx = TIMER(5. ,0., PI*2.);\n    float ry = TIMER(4. ,0., PI*2.);    \n    \n    eye.zx*=mm2(rx); eye.xy*=mm2(rz); eye.zy*=mm2(ry);\n    light.zx*=mm2(rx); light.xy*=mm2(rz); light.zy*=mm2(ry);\n    ray.zx*=mm2(rx); ray.xy*=mm2(rz); ray.zy*=mm2(ry);\n    \n    float depth = rayMarch(eye, ray, scene_color);\n    if (depth < MAX_DISTANCE) {\n        vec3 p = (eye + ray*depth);\n        \n        float d_ep=length(p - depth);\n        vec3 p_normal = getNormal(p, d_ep*d_ep*EPSILON*.1);\n        \n        vec3 light_dir = -normalize(light-p);\n        vec3 reflected_light_dir = reflect(-light_dir, -p_normal);\n\n        const float j=.004;\n        float shadow = shadowSample(p, -light_dir);        \n        float attenuation = 1./(1. + j*pow( length(light-p), 2.0));\n        attenuation*=max(1., 1.+shadow);\n        \n        float ambient = 1.0 - ambientOcculation(p, -ray);\n        ambient = pow(max(ambient, 0.), 8.);\n        \n        float diffuse = max(0., dot(light_dir, p_normal));\n\n\t\tfloat lighting = max(0., (diffuse*.3 + ambient*.7)*attenuation);\n        vec3 reflectioncolor = texture(iChannel1, reflected_light_dir).rgb;\n        //reflectioncolor *= vec3(.75, 1., 1.);\n        \n        vec3 texcol = texCube(iChannel0, 1.4*p, p_normal, 1.0 ).rgb*lighting;\n        \n        scene_color*=.26;\n        scene_color = pow(scene_color, vec3(1., .8, .4));\n        \n        scene_color = (clamp(mix(scene_color+vec3(.0), reflectioncolor*3.1, max(0., 1.+(dot(-p_normal, ray)))), 0., 1.)+scene_color*.7)*lighting;\n        scene_color = scene_color + texcol*.1;\n        \n        scene_color *= max(dot(p_normal,ray),0.);\n        \n        //scene_color = scene_color + interference(uv_crt, scene_color, b[0]*1.8); // 1.6\n    } else {\n        scene_color=starfield(uv2);\n\n    }\n    \n    scene_color = scene_color + interference(uv_crt, scene_color, b[0]*1.8); // 1.6\n\n    \t\n    \n    scene_color=min(vec3(1.), max(vec3(0.), scene_color));\n        \n    float mm = 11.5;\n    float l = 1. - min(1., curvature*mm);\n    scene_color *= l;\n    \n    float y = uv_crt2.y;\n    float showScanlines = 1.;\n    if (iResolution.y<280.) showScanlines = 0.;\n    float s = 1. - smoothstep(360., 1440., iResolution.y) + 1.;\n    float j = cos(y*iResolution.y*s)*.125; \n    scene_color = abs(showScanlines-1.)*scene_color + showScanlines*(scene_color - scene_color*j);   \n      \n    float cm = max(0.0, 1. - 2.*max(abs(uv_crt.x), abs(uv_crt.y) ) );\n    cm = min(cm*200., 1.);\n    scene_color *= cm;\n        \n    scene_color = max(vec3(0.), min(vec3(1.), scene_color));\n    scene_color = clamp(scene_color, 0., 1.);\n\n    fragColor = vec4(pow(scene_color, vec3(1.152)), 1.);\n}","name":"Image","description":"","type":"image"}]}