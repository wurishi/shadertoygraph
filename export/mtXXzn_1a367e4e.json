{"ver":"0.1","info":{"id":"mtXXzn","date":"1674173644","viewed":59,"name":"Spatial frequency explainer 2","username":"jean80it","description":"Spatial frequency explainer 2","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["spatialfrequencyexplainer2"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI (3.14)\n#define PI3Half (PI * 1.5)\n\n/////////////// text stuff\n#define SDF_FONT_TEX iChannel0\n#define SDF_FONT_TEX_INVERTED 0\n#define SDF_FLOAT_MAX 10000.0\n\n#define saturate(x) clamp(x, 0.0, 1.0)\n\nfloat log10(float x)\n{\n    return log(x)/log(10.0);\n}\n\nconst uint\n    // HTML Entity Names\n    \n    _SP = 0x20u,        // ' '\n    _EXCL = 0x21u,      // '!' \n    _QUOT = 0x22u,      // '\"'\n    _NUM = 0x23u,       // '#'\n    _DOLLAR = 0x24u,    // '$'\n    _PERCNT = 0x25u,    // '%'\n    _AMP = 0x26u,       // '&'\n    _APOS = 0x27u,      // '''    \n    _LPAR = 0x28u,      // '('\n    _RPAR= 0x29u,       // ')'\n    _AST = 0x2Au,       // '*'\n    _PLUS = 0x2Bu,      // '+'\n    _COMMA = 0x2Cu,     // ','    \n    _MINUS = 0x2Du,     // '-'\n    _PERIOD = 0x2Eu,    // '.'\n    _SOL = 0x2Fu,       // '/' \n\n    _0 = 0x30u, _1 = 0x31u, _2 = 0x32u, _3 = 0x33u, _4 = 0x34u, \n    _5 = 0x35u, _6 = 0x36u, _7 = 0x37u, _8 = 0x38u, _9 = 0x39u, \n\n    _COLON = 0x3Au,     // ':' \n    _SEMI = 0x3Bu,      // ';' \n    _LT = 0x3Cu,        // '<' \n    _EQUALS = 0x3Du,    // '=' \n    _GT = 0x3Eu,        // '>' \n    _QUEST = 0x3Fu,     // '?' \n    _COMAT = 0x40u,     // '@' \n    \n    _A = 0x41u, _B = 0x42u, _C = 0x43u, _D = 0x44u, _E = 0x45u, \n    _F = 0x46u, _G = 0x47u, _H = 0x48u, _I = 0x49u, _J = 0x4Au,\n    _K = 0x4Bu, _L = 0x4Cu, _M = 0x4Du, _N = 0x4Eu, _O = 0x4Fu,\n    _P = 0x50u, _Q = 0x51u, _R = 0x52u, _S = 0x53u, _T = 0x54u,\n    _U = 0x55u, _V = 0x56u, _W = 0x57u, _X = 0x58u, _Y = 0x59u,\n    _Z = 0x5Au,\n\n    _LSQB = 0x5Bu,      // '[' \n    _BSOL = 0x5Cu,      // '\\'\n    _RSQB = 0x5Du,      // ']' \n    _CIRC = 0x5Eu,      // '^' \n    _LOWBAR = 0x5Fu,    // '_' \n    _GRAVE = 0x60u,     // '`' \n    \n    _a = 0x61u, _b = 0x62u, _c = 0x63u, _d = 0x64u, _e = 0x65u,\n    _f = 0x66u, _g = 0x67u, _h = 0x68u, _i = 0x69u, _j = 0x6Au,\n    _k = 0x6Bu, _l = 0x6Cu, _m = 0x6Du, _n = 0x6Eu, _o = 0x6Fu,\n    _p = 0x70u, _q = 0x71u, _r = 0x72u, _s = 0x73u, _t = 0x74u,\n    _u = 0x75u, _v = 0x76u, _w = 0x77u, _x = 0x78u, _y = 0x79u,\n    _z = 0x7Au,\n\n    _LCUB = 0x7Bu,      // '{'\n    _VERBAR = 0x7Cu,    // '|'\n    _RCUB = 0x7Du,      // '}'\n    _TILDE = 0x7Eu,     // '~'\n    \n        \n    _EOL = 0x1000u,     // End of Line - Carriage Return & Line Feed    \n    _BOLDON = 0x1001u,  // Special\n    _BOLDOFF = 0x1002u, // Special\n    _ITALON = 0x1003u,  // Special\n    _ITALOFF = 0x1004u  // Special\n;\n\n\nfloat getMask(float sdf, float size)\n{\n    return smoothstep(0.002 / size, 0.0, sdf); \n}\n\nfloat charSDF(uint letter, vec2 uv, float size, vec2 pos)\n{\n    uv = saturate((uv - pos) / size);\n    \n    // look up font texture\n    vec2 charPos = vec2(letter % 16u, (255u - letter) / 16u) / 16.0; \n    vec2 uvf = (uv/ 16.0) + charPos;\n    \n#if SDF_FONT_TEX_INVERTED\n    uvf.y = 1.0 - uvf.y;\n#endif\n    \n    return texture(SDF_FONT_TEX, uvf).w - .5;\n}\n\n#define stringSDF(str, uv, size, pos, sdf) for (int i = 0; i < str.length(); ++i) { sdf = min(sdf, charSDF(str[i], uv, size, pos + vec2(float(i) * size * 0.5, 0.0))); }\n\nfloat floatToSDF(float f, int prec, vec2 uv, float size, vec2 pos)\n{\n    if (abs(f) <= 0.0001)\n        return charSDF(_0, uv, size, pos);\n    \n    vec2 startPos = pos;\n    \n    float sdf = SDF_FLOAT_MAX;\n    float xStep = size * 0.5;  // we can adjust spacing or even implement per-char spacing\n    \n    if (f < 0.0)\n    {\n        f = abs(f);\n        \n        // print '-'\n        sdf = min(sdf, charSDF(_MINUS, uv, size, pos));\n        \n        // advance caret\n        pos.x += xStep;\n    }\n    \n    prec += 1;\n    \n    int nd = int(floor(log10(f)));\n    float mask = pow(10.0, float(nd));\n    \n    if ((nd == -1) && (prec > 1))\n    {\n        // print '0'\n        sdf = min(sdf, charSDF(_0, uv, size, pos));\n        \n        // advance caret\n        pos.x += xStep;\n    }\n    \n    while (nd > -prec)\n    {\n        if ((nd == -1) && (prec > 1))\n        {\n            sdf = min(sdf, charSDF(_PERIOD, uv, size, pos));\n        \n            // advance caret\n            pos.x += xStep; \n        } \n        \n        float digitVal = floor(f/mask);\n        uint digitCode = uint(digitVal) + _0;\n        \n        sdf = min(sdf, charSDF(digitCode, uv, size, pos));\n        \n        // advance caret\n        pos.x += xStep; \n        \n        // update status\n        f -= digitVal * mask;\n        mask *= 0.1;\n        nd -= 1;\n    }\n    \n    return sdf;\n}\n\n////////////////////////////////\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.y;\n    float rEdge = iResolution.x / iResolution.y;\n\n    float freq = (sin(PI3Half + iTime * 0.1) + 1.0) * 50.0 + 0.001;\n\n    float col = cos(PI * uv.x * freq) * cos(PI * uv.y * freq) * 0.5 + 0.5;\n\n    float sdf = floatToSDF(freq, 1, uv, 0.1, vec2(rEdge - 0.3, 0.1));\n\n    float cm = getMask(sdf, 0.05);\n    \n    fragColor = vec4(mix(vec3(col), vec3(1.0, 0.0, 0.0), cm), 1.0);\n\n}","name":"Image","description":"","type":"image"}]}