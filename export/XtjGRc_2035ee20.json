{"ver":"0.1","info":{"id":"XtjGRc","date":"1430971371","viewed":150,"name":"Wave kaleidoscope","username":"pixelbeast","description":"Sampling fft by rotating around uv.x and reflecting. Using wave samples instead of fft is also interesting. ","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["vizwaveiterate"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGzn","filepath":"/media/a/29de534ed5e4a6a224d2dfffab240f2e19a9d95f5e39de8898e850efdb2a99de.mp3","previewfilepath":"/media/ap/29de534ed5e4a6a224d2dfffab240f2e19a9d95f5e39de8898e850efdb2a99de.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"// Iain Melvin 2015\n// comment this to get the basic effect:\n#define REFLECT\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 tmp;\n    \n#ifdef REFLECT\n\tuv=abs(4.0*(uv-0.5));\n#endif\n    \n    const int N=20;\n    float t=0.024*iTime+10.0; \n    const float sc=1.02;\n    const float r=0.5;\n\n    vec2 av = uv;                      //start with uv posiiton\n    float y=0.0;                       //accumulator\n    for (int i=0;i<N;i++){\n                        //hmm this was a bug, but seems to be important to effect\n        tmp.x=av.x*cos(t)-av.y*sin(t);  //rotate\n        tmp.y=av.x*sin(t)+av.y*cos(t); \n        av = tmp;\n        if (av.x>r) av.x=r-(av.x-r);\n        av *= sc;                      // scale\n        \n        vec4 t1 = (texture(iChannel0, vec2(abs(av.x),0.25) )); // fft\n        //vec4 t1 = (texture(iChannel0, vec2(abs(av.x),0.75) )-0.5); // sample\n        \n        y=y+t1[0];                     // accumulate\n    }\n    y=y/float(N);\n\n    //y=y*3.0; //if using sample\n    y=y*1.25; // if using fft\n//    if (uv.y<0.02) y=uv.x*1.25;\n    fragColor = vec4( sin(y*3.141*2.5), sin(y*3.141*2.0),sin(y*3.141*1.0),1.0);\n}","name":"","description":"","type":"image"}]}