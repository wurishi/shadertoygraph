{"ver":"0.1","info":{"id":"llcXDn","date":"1481019530","viewed":238,"name":"View Shader Data","username":"gPlatl","description":"Display shader data: date, time, frameCount, runtime, fps and resolution.\nAdditional click and drag mouse button to display last and current mouse position.","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["mouse","time","shader","coordinates","date","data","view"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n//=================================================================\n// ViewShaderData.glsl    \n//   v1.0 2016-12-06  initial release\n//   v1.1 2017-02-19  rearranged for easier coding\n// Display shader data like date, time, frameCount, runtime, fps, \n//   resolution and mouse position.\n// Click and drag mouse button to display current mouse position.\n//=================================================================\n\n//------------------------------------------\n// GLSL Number Printing - @P_Malin\n// Creative Commons CC0 1.0 Universal (CC-0) \n// https://www.shadertoy.com/view/4sBSWW\n//------------------------------------------\n\n#define SPACE tp.x += 33.;\n\nvec2 vFontSize = vec2(8.0, 15.0);\t// multiples of 4x5 work best\n\nvec2 ppos = vec2(0);          // pixel position\nvec2 tp = vec2(0.0);          // text position\n\nconst vec3 backColor = vec3(0.15, 0.10, 0.10);\nvec3 drawColor = vec3(1.0, 1.0, 0.0);\nvec3 vColor = backColor;\n\n//----------------------------\nfloat DigitBin(const in int x)\n{\n    return x==0 ? 480599.0\n         : x==1 ? 139810.0\n         : x==2 ? 476951.0\n         : x==3 ? 476999.0\n         : x==4 ? 350020.0\n         : x==5 ? 464711.0\n         : x==6 ? 464727.0\n         : x==7 ? 476228.0\n         : x==8 ? 481111.0\n         : x==9 ? 481095.0\n         :             0.0;\n}\n//---------------------------------\nvoid WriteValue(const vec2 vPixelCoords\n               ,const float fValue\n               ,const int maxDigits\n               ,const int decimalPlaces )\n{\n  vec2 vCharCoords = (ppos.xy - vPixelCoords) / vFontSize;\n  float fDecimalPlaces = float(decimalPlaces);\n  if ((vCharCoords.y < 0.0) || (vCharCoords.y >= 1.0)) return;\n  float fLog10Value = log2(abs(fValue)) / log2(10.0);\n  float fBiggestIndex = max(floor(fLog10Value), 0.0);\n  float fDigitIndex = float(maxDigits) - floor(vCharCoords.x);\n  float fCharBin = 0.0;\n  if(fDigitIndex > (-fDecimalPlaces - 1.01)) \n  {\n    if(fDigitIndex > fBiggestIndex) \n    {\n\t  if((fValue < 0.0) && (fDigitIndex < (fBiggestIndex+1.5))) fCharBin = 1792.0;\n\t}\n    else \n    {\n      if(fDigitIndex == -1.0) \n      {\n        if(fDecimalPlaces > 0.0) fCharBin = 2.0;\n      }\n      else \n      {\n        float fReducedRangeValue = fValue;\n        if(fDigitIndex < 0.0) { fReducedRangeValue = fract( fValue ); fDigitIndex += 1.0; }\n        float fDigitValue = (abs(fReducedRangeValue / (pow(10.0, fDigitIndex))));\n        fCharBin = DigitBin(int(floor(mod(fDigitValue, 10.0))));\n      }\n    }\n  }\n  float cInt = floor(mod((fCharBin / pow(2.0, floor(fract(vCharCoords.x) * 4.0) \n                                + (floor(vCharCoords.y * 5.0) * 4.0))), 2.0));\n  vColor = mix(vColor, drawColor, cInt);\n}\n\n//=================================================================\n\nconst vec3 mpColor   = vec3(0.99, 0.99, 0.00);\nconst vec3 mxColor   = vec3(1.00, 0.00, 0.00);\nconst vec3 myColor   = vec3(0.00, 1.00, 0.00);\n      vec3 dotColor  = vec3(0.50, 0.50, 0.00);\n          \n//----------------------------------------------------------------\nvoid SetColor(float red, float green, float blue)\n{\n  drawColor = vec3(red,green,blue);    \n}\n//----------------------------------------------------------------\nvoid WriteMousePos(vec2 mPos)\n{\n  mPos = abs(mPos);\n  int digits = 3;\n  float radius = 3.0;\n\n  // print dot at mPos\n  if (iMouse.z > 0.0) dotColor = mpColor;\n  float fDistToPointB = length(mPos - ppos) - radius;\n  vColor += mix( vec3(0), dotColor, (1.0 - clamp(fDistToPointB, 0.0, 1.0)));\n\n  // print mouse.x\n  tp = mPos + vec2(-4.4 * vFontSize.x, radius + 4.0);\n  tp.x = max(tp.x, -vFontSize.x);\n  tp.x = min(tp.x, iResolution.x - 8.4*vFontSize.x);\n  tp.y = max(tp.y, 1.6 * vFontSize.y);\n  tp.y = min(tp.y, iResolution.y - 1.4*vFontSize.y);\n  drawColor = mxColor;\n  WriteValue(tp, mPos.x, digits, 0);\n\t\t\n  // print 2nd mouse value\n  SPACE\n  drawColor = myColor;\n  WriteValue(tp, mPos.y, digits, 0);\n}    \n//----------------------------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  float time = iTime;\n  ppos = fragCoord;\n\n  // print mouse position & coordinates\n  WriteMousePos(iMouse.zw);  // last position\n  WriteMousePos(iMouse.xy);  // current position\n\n  // print Resolution\n  tp = iResolution.xy - vec2(111, 33);   // text position: right top\n  SetColor (0.8, 0.8, 0.8);\n  WriteValue(tp, iResolution.x, 4, 0);\n  SPACE SPACE\n  WriteValue(tp, iResolution.y, 4, 0);\n\n  // print Date\n  SetColor (0.9, 0.9, 0.4);\n  WriteValue(vec2( 0, 5), iDate.x, 4, 0);\n  WriteValue(vec2(42, 5), -(iDate.y +1.0), 2, 0);\n  WriteValue(vec2(68, 5), -iDate.z, 2, 0);\n\n  // print Time\n  SetColor (1.0, 0.0, 1.0);\n  WriteValue(vec2(96     , 5), mod(iDate.w / 3600.0, 24.0), 2, 0);\n  WriteValue(vec2(96 + 24, 5), mod(iDate.w / 60.0 ,  60.0), 2, 0);\n  WriteValue(vec2(96 + 48, 5), mod(iDate.w,          60.0), 2, 0);\n\n  // print Frame Counter\n  SetColor (0.4, 0.7, 0.4);\n  WriteValue(vec2(180, 5), float(iFrame)*1.0, 6, 0);\n\n  // print Shader Time\n  SetColor (0.0, 1.0, 1.0);\n  WriteValue(vec2(240, 5), time, 6, 2);\n\n  // print Frames Per Second - FPS  see https://www.shadertoy.com/view/lsKGWV\n  //float fps = (1.0 / iTimeDelta + 0.5);\n  float fps = iFrameRate;\n  SetColor (0.8, 0.6, 0.3);\n  WriteValue(vec2(320, 5), fps, 6, 1);\n\n  fragColor = vec4(vColor,1.0);\n}","name":"Image","description":"","type":"image"}]}