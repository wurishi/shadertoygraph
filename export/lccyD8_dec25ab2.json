{"ver":"0.1","info":{"id":"lccyD8","date":"1730559813","viewed":46,"name":"Moving Voronoi Cells","username":"EliasWick","description":"Moving Voronoi Cells, test. Use for whatever you want...","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["voronoi","time","moving","cells"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Hash Functions\nfloat hash(vec2 p) {\n    vec3 p3 = fract(vec3(p.xyx) * 0.1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec2 hash2(vec2 p) {\n    vec3 p3 = fract(vec3(p.xyx) * 0.1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract(vec2((p3.x + p3.y) * p3.z, (p3.y + p3.z) * p3.x));\n}\n\nvec3 hash3(vec2 p) {\n    vec3 p3 = fract(vec3(p.xyx + vec3(1.0, 2.0, 3.0)) * 0.1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3 + p3.yzx) * p3.zxy);\n}\n\n// Main\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.y; // Normalize coordinates\n    float gridSize = float(20.0);           // Grid size for Voronoi cells\n    vec2 gv = fract(uv * gridSize);       // Grid cell frac\n    vec2 id = floor(uv * gridSize);       // Grid cell\n\n    float minDist2 = 1.0;\n    vec3 color = vec3(0.0);\n    vec2 closestPoint;\n\n    for(int y = -1; y <= 1; y++) {\n        for(int x = -1; x <= 1; x++) {\n            vec2 offset = vec2(x, y);\n            vec2 neighbor = id + offset;\n\n            // Hash values\n            float h = hash(neighbor);\n            vec2 point = hash2(neighbor);\n\n            float angle = iTime + h * 6.2831;\n            vec2 sincos = sin(angle + vec2(0.0, 1.5708));\n            point += 0.5 * sincos;\n\n            vec2 diff = offset + point - gv;\n            float dist2 = dot(diff, diff);\n\n            if(dist2 < minDist2) {\n                minDist2 = dist2;\n                closestPoint = diff;\n                color = hash3(neighbor);\n            }\n        }\n    }\n\n    // Calculate normal & lighting\n    vec3 normal = normalize(vec3(closestPoint, 0.5));\n    vec3 lightDir = normalize(vec3(0.5, 0.5, 1.0));\n    float lighting = max(dot(normal, lightDir), 0.0);\n\n    // Tada\n    fragColor = vec4(color * lighting, 1.0);\n}","name":"Image","description":"","type":"image"}]}