{"ver":"0.1","info":{"id":"Mc23Wc","date":"1704813753","viewed":93,"name":"Basic : Kuramoto Model","username":"Gijs","description":"2D version of the Kuramoto model with every pixel being a harmonic oscillator and every pixel only influencing its 4 cardinal neighbors. Use your mouse.","likes":13,"published":1,"flags":32,"usePreview":0,"tags":["2d","synchronization","metronome","kuramoto"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t = texelFetch(iChannel0,ivec2(fragCoord),0).x;\n    vec3 c = getPaletteColor(t,vec3(.5),vec3(.5),vec3(1),vec3(0,.1,.2));\n    fragColor = vec4(c,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 r = iResolution.xy;\n    vec2 p = fragCoord;\n    \n    vec4 middle = texture(iChannel0,p/r); \n    vec4 up     = texture(iChannel0,(p+vec2( 0, 1))/r);\n    vec4 down   = texture(iChannel0,(p+vec2( 0,-1))/r);\n    vec4 right  = texture(iChannel0,(p+vec2( 1, 0))/r);\n    vec4 left   = texture(iChannel0,(p+vec2(-1, 0))/r);\n     \n    middle += sin(TAU*(up.x - middle.x)) * synchronisation;\n    middle += sin(TAU*(down.x - middle.x)) * synchronisation;\n    middle += sin(TAU*(left.x - middle.x)) * synchronisation;\n    middle += sin(TAU*(right.x - middle.x)) * synchronisation;\n   \n    middle += frequency;\n    middle = mod(middle,vec4(1));\n    \n    if(iMouse.z>0.0)\n        middle += smoothstep(50.,45.,distance(iMouse.xy,fragCoord)) * 0.1;\n        \n    fragColor = middle;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"const float TAU = 6.28318530718;\n\nconst float synchronisation = 0.02;\nconst float frequency = 0.001;\n\nvec3 getPaletteColor( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d ){\n    return a + b*cos(TAU*(c*t+d) );\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 r = iResolution.xy;\n    vec2 p = fragCoord;\n    \n    vec4 middle = texture(iChannel0,p/r); \n    vec4 up     = texture(iChannel0,(p+vec2( 0, 1))/r);\n    vec4 down   = texture(iChannel0,(p+vec2( 0,-1))/r);\n    vec4 right  = texture(iChannel0,(p+vec2( 1, 0))/r);\n    vec4 left   = texture(iChannel0,(p+vec2(-1, 0))/r);\n     \n    middle += sin(TAU*(up.x - middle.x)) * synchronisation;\n    middle += sin(TAU*(down.x - middle.x)) * synchronisation;\n    middle += sin(TAU*(left.x - middle.x)) * synchronisation;\n    middle += sin(TAU*(right.x - middle.x)) * synchronisation;\n   \n    middle += frequency;\n    middle = mod(middle,vec4(1));\n    \n    if(iMouse.z>0.0)\n        middle += smoothstep(50.,45.,distance(iMouse.xy,fragCoord)) * 0.1;\n        \n    fragColor = middle;\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 r = iResolution.xy;\n    vec2 p = fragCoord;\n    \n    vec4 middle = texture(iChannel0,p/r); \n    vec4 up     = texture(iChannel0,(p+vec2( 0, 1))/r);\n    vec4 down   = texture(iChannel0,(p+vec2( 0,-1))/r);\n    vec4 right  = texture(iChannel0,(p+vec2( 1, 0))/r);\n    vec4 left   = texture(iChannel0,(p+vec2(-1, 0))/r);\n     \n    middle += sin(TAU*(up.x - middle.x)) * synchronisation;\n    middle += sin(TAU*(down.x - middle.x)) * synchronisation;\n    middle += sin(TAU*(left.x - middle.x)) * synchronisation;\n    middle += sin(TAU*(right.x - middle.x)) * synchronisation;\n   \n    middle += frequency;\n    middle = mod(middle,vec4(1));\n    \n    if(iMouse.z>0.0)\n        middle += smoothstep(50.,45.,distance(iMouse.xy,fragCoord)) * 0.1;\n        \n    fragColor = middle;\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 r = iResolution.xy;\n    vec2 p = fragCoord;\n    \n    vec4 middle = texture(iChannel0,p/r); \n    vec4 up     = texture(iChannel0,(p+vec2( 0, 1))/r);\n    vec4 down   = texture(iChannel0,(p+vec2( 0,-1))/r);\n    vec4 right  = texture(iChannel0,(p+vec2( 1, 0))/r);\n    vec4 left   = texture(iChannel0,(p+vec2(-1, 0))/r);\n     \n    middle += sin(TAU*(up.x - middle.x)) * synchronisation;\n    middle += sin(TAU*(down.x - middle.x)) * synchronisation;\n    middle += sin(TAU*(left.x - middle.x)) * synchronisation;\n    middle += sin(TAU*(right.x - middle.x)) * synchronisation;\n   \n    middle += frequency;\n    middle = mod(middle,vec4(1));\n    \n    if(iMouse.z>0.0)\n        middle += smoothstep(50.,45.,distance(iMouse.xy,fragCoord)) * 0.1;\n        \n    fragColor = middle;\n}","name":"Buffer D","description":"","type":"buffer"}]}