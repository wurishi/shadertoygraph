{"ver":"0.1","info":{"id":"7tjyzV","date":"1649968539","viewed":240,"name":"Linear refraction filter","username":"Dubswitcher","description":"An attempt to combine an RGB split with a linear blur, but with better color blending. Designed for use with ZGameEditor Visualizer.","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["filter","postprocess","refract"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float iter = 50.; // Change this to increase/decrease quality\nfloat bias = 0.5; // 0 to 1; Shift position by point in spectrum\n//float scale = 0.03;\n//float angle = 0.25;\n\nconst float pi = 3.14159265;\n\nvec3 bezcol(in float p){\n    float o = pow(p,2.)*(3.-2.*p);;\n    return vec3((1.-o)*(1.-o),(1.-o)*o*3.,o*o);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 res = iResolution.xy;//------For my own use later. Not important.\n    \n    // For ease-of-control. Comment out and uncomment identical variables\n    // above to set a fixed value.\n    float angle = iMouse.x/res.x;\n    float scale = iMouse.y/res.y/5.+0.03;\n    \n    vec2 uv = fragCoord/res.xy;\n    vec2 offs;\n    vec3 col;\n    float count;\n    for (float i = 0.; i <= 1.; i += 1./iter) {\n        offs = vec2(uv.x+sin(angle*pi*2.)*scale*(res.y/res.x)*(i*2.-bias*2.),\n                    uv.y+cos(angle*pi*2.)*scale*(i*2.-bias*2.));        \n        col += texture(iChannel0,offs).rgb * bezcol(i);\n        count+=1.;\n    }\n    col /= count/2.8;\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}