{"ver":"0.1","info":{"id":"WdsyRM","date":"1584466318","viewed":331,"name":"Wave 0.1","username":"rackman","description":"Reproduction of / heavily inspired by the album artwork of \"Com Truise - Wave 1\" by Seth Haley: https://en.wikipedia.org/wiki/Wave_1\n","likes":23,"published":1,"flags":0,"usePreview":0,"tags":["2d","retro","comtruise","synthwave","reproduction"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/**\n * Reproduction of / heavily inspired by the album artwork of\n * \"Com Truise - Wave 1\" by Seth Haley\n * https://en.wikipedia.org/wiki/Wave_1\n */\nconst float TAU = 6.2831853071;\n\nconst float ANGLE = -0.785;\nconst mat2 ROTATION = mat2(cos(ANGLE), -sin(ANGLE), sin(ANGLE), cos(ANGLE));\n\nconst float SEGMENT_THICKNESS = 0.45;\nconst vec2 SEGMENT_ASPECT = vec2(8.0, 1.0);\n\nconst vec2 BOX_SIZE = vec2(0.333);\nconst float BOX_THICKNESS = 0.004;\n\nconst float ZOOM = 35.0;\n\nconst vec3[] COLORS = vec3[](\n    vec3(0.572, 0.153, 0.561),\n    vec3(0.071, 0.659, 0.616),\n    vec3(0.145, 0.666, 0.886),\n    vec3(0.969, 0.580, 0.114),\n    vec3(0.945, 0.349, 0.165),\n    vec3(0.980, 0.702, 0.576)\n);\n\nconst vec3 BG_START = vec3(0.322, 0.301, 0.616);\nconst vec3 BG_END = vec3(0.980, 0.718, 0.418);\n\n// https://thebookofshaders.com/10/\nfloat random(vec2 st) {\n    return fract(sin(dot(st.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nvec3 segmentColor(vec2 st) {\n    return COLORS[int(random(st) * float(COLORS.length()))];\n}\n\n// https://iquilezles.org/articles/distfunctions2d\nfloat sdSegment(in vec2 p, in vec2 a, in vec2 b) {\n    vec2 pa = p - a, ba = b - a;\n    float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n    return length(pa - ba * h);\n}\n\nfloat sdBox(in vec2 p, in vec2 b) {\n    vec2 d = abs(p) - b;\n    return length(max(d, 0.0)) + min(max(d.x, d.y), 0.0);\n}\n     \nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    \n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    \n    float boxD = sdBox(uv, BOX_SIZE);\n    \n    vec3 col = vec3(mix(BG_START, BG_END, uv.y + 0.5));\n        \n    uv *= ROTATION;\n    \n    float light = uv.x;\n    vec2 id = floor(uv * ZOOM);\n    \n    // modulate x position for each row, fastest nearest to the center\n    uv.x += -iTime * (0.5-abs(id.y * 0.01)) + random(id.yy) * 0.15;\n    \n    uv /= SEGMENT_ASPECT;\n    uv *= ZOOM;\n    \n    vec2 gv = fract(uv);\n    \n    // comment this out for glitchy colours...\n    id = floor(uv);\n    \n    gv -= 0.5;\n    gv *= SEGMENT_ASPECT;\n    \n    // modulate segment length\n    float segmentLen = 2.0 + sin(iTime * (1.5 + random(id) * 1.5) + random(id) * TAU) * random(id) * 1.5;\n    \n\tfloat segmentD = sdSegment(gv, vec2(-segmentLen, 0.0), vec2(segmentLen, 0.0)) - SEGMENT_THICKNESS;\n         \n    // i'm sure this can be done without branching somehow\n    if (segmentD > -SEGMENT_THICKNESS && segmentD < -0.05 && boxD < 0.0) {\n    \tcol = smoothstep(-0.01, -0.05, segmentD) * segmentColor(id);\n        col += light;\n    }\n    \n    col += smoothstep(0.00, -0.001, abs(boxD) - BOX_THICKNESS);\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}