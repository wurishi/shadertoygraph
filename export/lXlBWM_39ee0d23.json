{"ver":"0.1","info":{"id":"lXlBWM","date":"1728483064","viewed":27,"name":"Hypnotic Vortex","username":"gperdigao","description":"A simple experience","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["hypnotic","colours"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Hypnotic Vortex Shader\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalize coordinates (centered at (0, 0))\n    vec2 uv = fragCoord.xy / iResolution.xy * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    // Calculate the distance from the center and angle\n    float dist = length(uv);\n    float angle = atan(uv.y, uv.x);\n    \n    // Create a time-based rotation effect\n    float time = iTime * 0.5;\n    \n    // Create a vortex by rotating the angle based on the distance\n    float vortex = angle + dist * 10.0 - time * 2.0;\n    \n    // Create smooth color gradients based on the vortex pattern\n    vec3 color = 0.5 + 0.5 * cos(vec3(vortex, vortex + 2.0, vortex + 4.0));\n    \n    // Add a radial gradient for brightness control\n    float brightness = 1.0 - smoothstep(0.0, 1.0, dist * 1.5);\n    color *= brightness;\n    \n    // Final output color\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}