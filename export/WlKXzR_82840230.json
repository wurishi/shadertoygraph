{"ver":"0.1","info":{"id":"WlKXzR","date":"1582071184","viewed":269,"name":"Texture flip","username":"gigatron","description":"flip uv if < and > than value","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["texture","inverse","limit","cut"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// gigatron FR \n// Flip x,y axis \n// cut / flip / inverse etc ...\n// live code for my friend promax/ssr\n\nvec2 flip(vec2 uv) {\n    \n    uv.y>0.5 ? uv.y = 1.-uv.y : uv.y; // ternaire from heaven ;\n    uv.x>0.5 ? uv.x = 1.-uv.x : uv.x;\n    \n    return uv;\n    \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    \n    // avant l'affichage du texture dans le pipeline ; on determine les limites\n    // et on inverse l'affichage uv.x et uv.y ;\n    \n    //if(uv.y>0.5) uv.y = 1.-uv.y;\n    //if(uv.x>0.5) uv.x = 1.-uv.x;\n    \n    vec2 f = flip(uv); // call flip function ;\n    \n    \n    vec3 tx  = texture(iChannel0, f).xyz; \n \n    fragColor = vec4( 0.1*pow(tx*3.0,tx*3.0 ) ,1.0);\n}","name":"Image","description":"","type":"image"}]}