{"ver":"0.1","info":{"id":"wss3RS","date":"1546757092","viewed":144,"name":"voroni goop","username":"caseymacneil","description":"A simple modification to make a rounded voroni. Idk if this would be classified as meta balls, since none of the balls are actually melding together, so its voroni goop! I used https://thebookofshaders.com/12/ as a reference for this shader","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["2d","noise","random","voroni"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// play with this value!\n#define ROUNDNESS 2.\n\nfloat rand(vec2 value)\n{\n\treturn fract(sin(dot(value, vec2(23.1245,87.2980))) * 5387.58135649);\n}\n\nvec2 rand2d(vec2 value)\n{\n\treturn fract(sin(vec2(dot(value, vec2(23.1245,87.2980)), dot(value, vec2(127.5123,39.183)))) * 5387.58135649);\n}\n\nvec3 voroni(vec2 uv)\n{\n    vec2 iuv = floor(uv);\n    vec2 fuv = fract(uv);\n    vec3 col = (fuv).xyy;\n    float mdist = 1.;\n    // used to render center point\n    float cmdist = 1.;\n    vec2 p;\n    vec2 sp;\n    // get neighbour tiles\n    for(int y = -1; y <= 1; y++)\n    {\n        for(int x = -1; x <= 1; x++)\n        {\n            vec2 n = vec2(float(x),float(y));\n            \n            p = rand2d(iuv + n);\n            \n            // animate\n            p.y = 0.5 + 0.5*sin(iTime + 5.*p.y);\n            p.x = 0.5 + 0.5*cos(iTime + 5.*p.x);\n            \n            vec2 diff = n + p - fuv;\n            float dist = length(diff);\n            \n            // \n            mdist = pow(mdist, ROUNDNESS);\n            \n            if(dist < mdist)\n            {\n            \tmdist = min(mdist,dist);\n                cmdist = min(cmdist,dist);\n                sp = p;\n            }\n        }\n    }\n    return vec3(length(sp)) + (1.-step(0.02,cmdist));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    \n    vec2 vFontSize = vec2(8.0, 15.0);\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    //scale\n    vec2 p = fragCoord * .01;\n    p += 1.0;\n    \n    vec3 col = voroni(p);\n    \n    // make pretty :)\n    col.r *= uv.x;\n    col.g *= .8 * 1.-uv.x;\n    col = pow(col,vec3(2.2));\n    \n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}