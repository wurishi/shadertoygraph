{"ver":"0.1","info":{"id":"3dSBzV","date":"1590341558","viewed":74,"name":"Math transformations","username":"zazbone","description":"testing of 2d tranformations ","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 grid(vec4 fragColor, vec2 repere){\n    float grid_x = mod(repere.x, 50.);\n    float grid_y = mod(repere.y, 50.);\n    if((-1. <= grid_x) && (grid_x <= 1.)) {\n        return vec4(1., 1., 1., 1.);\n    } else if((-1. <= grid_y) && (grid_y <= 1.)) {\n        return vec4(1., 1., 1., 1.);\n    } else { \n        return fragColor;\n    }\n}\n\nvec4 complex_repere(vec4 fragColor, vec2 repere){\n    float grid_x = mod(abs(repere.x), 50.);\n    float grid_y = mod(abs(repere.y), 50.);\n    if((-1. <= grid_x) && (grid_x <= 1.)) {\n        return vec4(1., 1., 1., 1.);\n    } else if((-1. <= grid_y) && (grid_y <= 1.)) {\n        return vec4(1., 1., 1., 1.);\n    } else { \n        return fragColor;\n    }\n} \n\n\nvec4 f(vec4 fragColor, vec2 repere) { // 0.1 * x * x = y\n    if ((0.1 * repere.x * repere.x <= repere.y + 1.) && (0.1 * repere.x * repere.x >= repere.y - 1.)) {\n        return vec4(1., 1., 1., 1.);\n    }\n    return fragColor;\n}\n\n\nvec4 g(vec4 fragColor, vec2 repere) { // x = y\n    if ((repere.x <= repere.y + 1.) && (repere.x >= repere.y - 1.)) {\n        return vec4(1., 1., 1., 1.);\n    }\n    return fragColor;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 repere = fragCoord;\n    repere = move(repere, -vec2(iResolution.x / 2.0, iResolution.y / 2.0));\n    //repere = rotate(repere, sin(iTime / PI) * PI_over2);\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    fragColor = complex_repere(fragColor, repere);\n    fragColor = f(fragColor, repere);\n    fragColor = g(fragColor, repere);\n  \n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"float PI = 3.14159265359;\nfloat PI_over2 = 1.57079632679;\n\nvec2 rotate(vec2 vector, float angle) {\n    mat2 rot_mat = mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n    return  rot_mat * vector;\n}\n\nvec2 move(vec2 vector, vec2 uv) {\n    return vector + uv;\n}\n\nvec2 rotate_x (vec2 vector, float angle){\n    vec3 tmp = vec3(vector.x, vector.y, 1);\n    float c = cos(angle);\n    float s = sin(angle);\n    mat3 mat_rot = mat3(1, 0, 0,\n                        0, c, -s,\n                        0, s, c);\n    tmp = mat_rot * tmp;\n    return tmp.xy;\n}\n                     ","name":"Common","description":"","type":"common"}]}