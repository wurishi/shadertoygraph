{"ver":"0.1","info":{"id":"Dl3GWl","date":"1683281337","viewed":108,"name":"Wavelength to Wide-gamut RGB","username":"Nazlbit","description":"Converting a given light wavelength to Wide-gamut RGB. Your display treats the values as if they are in the gamut the display is set to (sRGB most likely), effectively mapping the gamut.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["rgb","gamma","xyz","wavelength","cie"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://en.wikipedia.org/wiki/CIE_1931_color_space#Color_matching_functions\n// https://en.wikipedia.org/wiki/Wide-gamut_RGB_color_space\n// http://www.brucelindbloom.com/index.html?Eqn_ChromAdapt.html\n// https://en.wikipedia.org/wiki/Standard_illuminant#Illuminant_E\n// http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html\n// https://bottosson.github.io/posts/gamutclipping/\n\nfloat g(const float x, const float a, const float b, const float c)\n{\n    float d = x - a;\n    return exp(-0.5 * d * d / ((x < a) ? (b * b) : (c * c)));\n}\n\nvec3 wl2xyz_CIE1931(const float w){\n    float x = 1.056 * g(w, 599.8, 37.9, 31.0) + 0.362 * g(w, 442.0, 16.0, 26.7) - 0.065 * g(w, 501.1, 20.4, 26.2);\n    float y = 0.821 * g(w, 568.8, 46.9, 40.5) + 0.286 * g(w, 530.9, 16.3, 31.1);\n    float z = 1.217 * g(w, 437.0, 11.8, 36.0) + 0.681 * g(w, 459.0, 26.0, 13.8);\n    return vec3(x,y,z);\n}\n\nconst mat3 E_D50 = mat3( 0.9977545, -0.0041632, -0.0293713,\n                        -0.0097677,  1.0183168, -0.0085490,\n                        -0.0074169,  0.0134416,  0.8191853);\n\nconst mat3 XYZ_WGRGB = mat3( 1.4628067, -0.1840623, -0.2743606,\n                            -0.5217933,  1.4472381,  0.0677227,\n                             0.0349342, -0.0968930,  1.2884099);\n\n\nvec3 wl_rgb(float w)\n{\n    vec3 xyz = wl2xyz_CIE1931(w);\n    xyz *= E_D50;\n    vec3 rgb = xyz * XYZ_WGRGB;\n    return rgb;\n}\n\nfloat linear2gamma(const float x)\n{\n    return x > 0.0031308 ? 1.055 * pow(x, 1.0/2.4) - 0.055 : 12.92 * x;\n}\n\nvec3 linear2gamma(const vec3 x)\n{\n    return vec3(linear2gamma(x.r), linear2gamma(x.g), linear2gamma(x.b));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    const float visible_range_min = 380.0;\n    const float visible_range_max = 700.0;\n    float w = mix(visible_range_min, visible_range_max, uv.x);\n\n    vec3 rgb = wl_rgb(w);\n\n    // Clamp the values out of the gamut.\n    rgb = clamp(rgb, vec3(0), vec3(1)); \n\n    rgb = linear2gamma(rgb);\n    fragColor = vec4(rgb, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}