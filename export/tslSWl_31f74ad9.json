{"ver":"0.1","info":{"id":"tslSWl","date":"1557418199","viewed":100,"name":"Produit Scalaire 3","username":"msafadi","description":"exo beto","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["betomaths"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//////////////////////////////////////////////////////////////////\n// EXERCICE 1.3\n// a - retourner true si collision entre droite (orient√©e) et cercle\n// b - retourner le point de collision\n//////////////////////////////////////////////////////////////////\nbool isCollision(vec2 p1, vec2 p2, vec2 center, float radius, out vec2 hitPoint) {\n    vec2 d = normalize(p2-p1);\n    vec2 n = vec2(-d.y, d.x);\n    float distance = dot( (center - p1), n);\n\n    float l = sqrt(radius * radius - distance * distance);\n    hitPoint = center - distance * n - l * d;\n    return abs(distance) <= radius ;  \t \n}\n\n\n\n\n///////////////////////////////////////////////////\n// PRIVATE\n///////////////////////////////////////////////////\nconst float zNear = 1.0;\nconst float zFar  = 400.0;\n\nbool segment(vec2 p1, vec2 p2, vec2 p) {\n\n    vec2 v1 = p1-p;\n    vec2 v2 = p2-p;    \n    \n    return length(cross(vec3(v1,0), vec3(v2,0))) < 0.002;\n}\n\nbool circle(vec2 origin, float radius, vec2 p) {\n    return length(p-origin) < radius;\n}\n\n\nbool drawCross(vec2 p, vec2 center) {\n    \n    vec2 dv = p - center;\n \tfloat hdist = abs(dv.x);   \n \tfloat vdist = abs(dv.y);       \n    \n    return length(dv) < 0.02 && (hdist < 0.005 || vdist < 0.005);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float \tratio \t\t\t= iResolution.x/iResolution.y;\n    vec3 \tviewportCoord \t= vec3(fragCoord.xy/iResolution.y - vec2(ratio/2.0, 0.5), zNear);\n\n    const float radius = 0.20;\n    const vec2  origin = vec2(0);\n    \n    vec2 p1 = vec2(0.2 , cos(iTime)/5.0);\n    vec2 p2 = vec2(0.8, sin(iTime)/5.0);\n    \n    vec2 collisionPoint;\n    bool collision = isCollision(p1, p2, origin, radius, collisionPoint);\n\n    if( collision && drawCross(viewportCoord.xy, collisionPoint)) {\n        fragColor = vec4(0,1,1,1);\n    }\n    else if(segment(p1, p2, viewportCoord.xy)) {\n        if(collision) fragColor = vec4(1,0,0,1);\n        else \t\t  fragColor = vec4(0,1,0,1);\n    }\n\telse if(circle(origin, radius, viewportCoord.xy)) {\n    \tfragColor = vec4(1.0,0.5,0.0,1.0);\n    }\n    else {\n\t\tfragColor = vec4(0);        \n    }\n}","name":"Image","description":"","type":"image"}]}