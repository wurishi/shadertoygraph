{"ver":"0.1","info":{"id":"DsXyzf","date":"1701395384","viewed":24,"name":"Data Swallow tunnel (Ace Combat)","username":"Mihairu","description":"Data Swallow tunnel background from Ace Combat 3: Electrosphere. Made with chat-gpt 4 assistance. If you have ideas how to make the tunnel movement more curved, you can always fork the source. Thank you!","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["3d","tunnel","animation","pseudo3d","dataswallow","acecombat","electrosphere","tunnelanimation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Define global variables\nvec2 cameraPosition = vec2(0.0, 0.0); // Initial camera position\nfloat horizontalLineThickness = 0.008; // Adjust the thickness of horizontal lines\nfloat verticalLineThickness = 0.0015; // Adjust the thickness of vertical lines\nfloat horizontalLineFrequency = 3.0; // Adjust the frequency of horizontal lines\nfloat verticalLineFrequency = 2.0; // Adjust the frequency of vertical lines\nfloat distortionFactor = -3.5; // Adjust the degree of distortion\nfloat movementSpeed = 3.5; // Adjust the speed of movement\nfloat ellipseDegree = 0.36; // Adjust the degree of elliptical shape\nfloat brightnessFactor = 1.7; // Adjust the brightness of the shader\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Translate the NDC so that the origin is at the center of the screen and scale x-axis.\n    vec2 p = (fragCoord - iResolution.xy * 0.5) / min(iResolution.y, iResolution.x);\n    p.x *= iResolution.x/iResolution.y * ellipseDegree; // to maintain aspect ratio and control elliptical shape.\n    \n    movementSpeed = (sin(iTime * 0.9) * 1.0 + 2.0)*0.0025 + 5.0;\n\n    // Tunnel distortion from the center, reduced as it approaches the camera\n    float distortion = (0.5 - length(p)) * sin(iTime + length(p) * distortionFactor) * 0.05;\n    p += vec2(distortion, distortion / 0.5); // Only distort horizontally\n\n    vec2 t = vec2(atan(p.x, p.y) / 3.1416, 1.0 / length(p));\n    vec2 s = iTime * vec2(0.0, movementSpeed);\n    vec2 z = vec2(3.0, 1.0);\n    float m = t.y + 0.6;\n\n    // Generate stripes\n    vec2 texCoord = vec2(mod((t.x - cameraPosition.x) * z.x + s.x, 1.0), mod((t.y - cameraPosition.y) * z.y + s.y, 1.0));\n    float horizontalLine = step(horizontalLineThickness, fract(texCoord.x * horizontalLineFrequency));\n    float perspectiveFactor = 0.2 / (0.2 + t.y); // perspective factor\n    float verticalLine = step(verticalLineThickness, fract(texCoord.y * verticalLineFrequency * perspectiveFactor));\n\n    // Combine horizontal and vertical stripes\n    vec3 stripeColor = vec3(horizontalLine * verticalLine);\n\n    // Set the background color to #CFC67F, stripes color to #BDB474, and add distance fog with color #AD9B45\n    vec3 backgroundColor = vec3(207.0 / 255.0, 198.0 / 255.0, 127.0 / 255.0) * brightnessFactor;\n    vec3 stripeColorFinal = vec3(189.0 / 255.0, 180.0 / 255.0, 116.0 / 255.0) * brightnessFactor;\n    vec3 fogColor = vec3(173.0 / 255.0, 155.0 / 255.0, 69.0 / 255.0) * brightnessFactor;\n\n    // Calculate the distance from the center\n    float distance = length(fragCoord - iResolution.xy * 0.5) / length(iResolution.xy * 0.5);\n\n    // Apply the distance fog effect\n    vec3 finalColor = mix(stripeColorFinal, fogColor, smoothstep(0.0, 1.0, distance));\n\n    fragColor = vec4((finalColor * stripeColor + backgroundColor) / m, 1.0);\n}","name":"Image","description":"","type":"image"}]}