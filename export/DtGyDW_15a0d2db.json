{"ver":"0.1","info":{"id":"DtGyDW","date":"1700204175","viewed":53,"name":"grid of squares rotating","username":"1mw1","description":"a grid of squares","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["learning"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float random(vec2 st) {\n    return fract(sin(dot(st.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalize coordinates\n    vec2 uv = fragCoord / iResolution.xy;\n\n    // Scale and center the coordinates\n    uv = uv * 2.0 - 1.0;\n\n    // Create a grid of rotating squares with reduced speed\n    float squareSize = 0.1;\n    float rotationSpeed = 0.5;  // Reduced rotation speed\n    float rotationAngle = mod(iTime * rotationSpeed, 6.28318530718);\n    vec2 rotatedUV = mat2(cos(rotationAngle), -sin(rotationAngle), sin(rotationAngle), cos(rotationAngle)) * uv;\n\n    // Calculate distances to the edges of the squares\n    vec2 d = abs(mod(rotatedUV, squareSize) - 0.5 * squareSize) / fwidth(rotatedUV);\n\n    // Introduce random pink color to entire squares on the grid\n    float pinkSquares = step(0.95, random(floor(rotatedUV / squareSize)));\n\n    // Apply a pattern with dark purple squares and overlay with shades of pink\n    vec3 darkPurple = vec3(0.3, 0.0, 0.5);\n    vec3 edgeColor = mix(vec3(1.0, 0.5, 0.8), vec3(1.0, 0.8, 0.9), 0.5 + 0.5 * sin(iTime));\n    vec3 pinkColor = vec3(1.0, 0.5, 0.8);\n    vec3 color = mix(darkPurple, mix(pinkColor, edgeColor, pinkSquares), 1.0 - smoothstep(0.4, 0.5, min(d.x, d.y)));\n\n    // Output the final color\n    fragColor = vec4(color, 1.0);\n}\n\n\n\n\n","name":"Image","description":"","type":"image"}]}