{"ver":"0.1","info":{"id":"cdtyWj","date":"1695491523","viewed":52,"name":"2维SDF--图形融合","username":"flashlizard","description":"2维SDF--图形融合","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"struct Circle {\n    vec2 p;\n    float r;\n};\n\nstruct Plane {\n    vec2 p;\n    vec2 n;\n};\n\nfloat softMin(float a, float b, float v) {\n    if(a - b >= -v && a - b <= v) {\n        float k = (a - b + v) / (2.0 * v);\n        return (1.0 - k) * a + k * b - v * k + v * k * k;\n    } else if(a < b) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nconst int circleCnt = 2;\nconst int planeCnt = 1;\nconst float V = 50.0;\nCircle circles[circleCnt];\nPlane planes[planeCnt];\n\nvoid init() {\n    circles[0].p = vec2(150.0, 150.0);\n    circles[0].r = 100.0;\n    circles[1].p = vec2(200.0, 300.0);\n    circles[1].r = 50.0;\n    planes[0].p = vec2(0.0, 120.0);\n    planes[0].n = vec2(0.0, 1.0);\n}\n\nfloat getPlaneDist(in vec2 pos, in int i) {\n    Plane plane = planes[i];\n    return dot(pos - plane.p, plane.n);\n}\n\nfloat getCircleDist(in vec2 pos, in int i) {\n    Circle circle = circles[i];\n    return length(pos - circle.p) - circle.r;\n}\n\nfloat getMinCircleDist(in vec2 pos) {\n    float minDist = getCircleDist(pos, 0);\n    ;\n    for(int i = 0; i < circleCnt; i++) {\n        float dist = getCircleDist(pos, i);\n        minDist = softMin(dist, minDist, V);\n    }\n    return minDist;\n}\n\nfloat getMinPlaneDist(in vec2 pos) {\n    float minDist = getPlaneDist(pos, 0);\n    for(int i = 0; i < planeCnt; i++) {\n        float dist = getPlaneDist(pos, i);\n        minDist = softMin(dist, minDist, V);\n    }\n    return minDist;\n}\n\nfloat getMinDist(in vec2 pos) {\n    float minDist = getMinCircleDist(pos);\n    minDist = softMin(minDist, getMinPlaneDist(pos), V);\n    return minDist;\n}\n\nfloat pigmentDist(float d) {\n    d = pow(max(-d/200.0, 0.0), 0.7)*50.0;\n    return softMin(d, 10.0, 7.0);\n}\n\nconst float strokeWidth = 8.0;\nconst vec3 lightDir = normalize(vec3(1.0, 1.0, 1.0));\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    init();\n    float dist = getMinDist(fragCoord);\n    vec4 color = vec4(0.31, 0.93, 1.0, 1.0);\n    if(dist < strokeWidth && dist > -5.0) {\n        fragColor = vec4(0.0);\n    } else if(dist > 0.0) {\n        fragColor = vec4(0.24, 0.44, 0.79, 1.0);\n    } else {\n        dist = pigmentDist(dist);\n        vec2 dt = vec2(0.1, 0.0);\n        vec3 n = normalize(vec3(pigmentDist(getMinDist(fragCoord + dt.xy)) - dist, pigmentDist(getMinDist(fragCoord + dt.yx)) - dist, 0.1));\n        fragColor = vec4(color.rgb * max(dot(n, lightDir), 0.0), 1.0);\n    }\n}","name":"Image","description":"","type":"image"}]}