{"ver":"0.1","info":{"id":"M333D7","date":"1716572344","viewed":31,"name":"hgghgkhbkhbb","username":"eriben0628","description":"kkhb","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["khb"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float square(float x) {\n    return x*x;\n}\n\nvec2 random(vec2 p) {\n    vec2 offset;\n    offset.x = fract(sin(p.x*12.234 + p.y*32.234 + 23.324) * 234.234);\n    offset.y = fract(cos(p.x*2.234 + p.y*42.234 + 73.324) * 4.234);\n    return offset;\n}\n\nvec3 Image(vec2 p) {\n    float minDist = 100.0;\n    vec2 PointPosFinal;\n    \n    for(int x = -1; x <= 1; x++) {\n        for(int y = -1; y <= 1; y++) {\n            vec2 CellPos = floor(p) + vec2(float(x),float(y));\n            vec2 PointPos = CellPos + random(CellPos);\n            float Distance = length(p - PointPos);\n            if(Distance < minDist) {\n                minDist = Distance;\n                PointPosFinal = PointPos;\n            }\n        }\n    }\n    \n    float A = 0.1;\n    float B = 1.0;\n    float X = minDist;\n    float Y = B/(1.0+A*X*X);\n    float k = -A*B*2.0*X/square(1.0+A*X*X);\n    vec2 T = vec2(1.0,k)/sqrt(1.0+k*k);\n    vec2 N = vec2(-T.y, T.x);\n    vec2 DirToPoint = normalize(PointPosFinal - p);\n    vec3 P = vec3(p.x,Y,p.y);\n    \n    vec3 Normal = vec3(-DirToPoint.x*N.x, N.y, -DirToPoint.y*N.x);\n    vec3 LightPos = vec3(cos(iTime)*3.0+5.0, 1.3, sin(iTime)*3.0+5.0);\n    float lightStrength = 1.0/(square(length(P-LightPos))*0.1+1.0);\n    vec3 L = normalize(LightPos - P);\n    //vec3 L = normalize(vec3(cos(0.8)*cos(iTime),abs(sin(0.8)),sin(iTime)));\n    vec3 V = vec3(0.0,1.0,0.0);\n    vec3 R = -reflect(L, Normal);\n   \n    float diffuse = max(0.0,dot(Normal,L));\n    float specular = pow( max(0.0,dot(R,V)), 15.0);\n    \n    return vec3(mix(diffuse,specular,0.2)*lightStrength);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = vec3(Image(uv*10.0));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}