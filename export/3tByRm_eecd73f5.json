{"ver":"0.1","info":{"id":"3tByRm","date":"1593924429","viewed":124,"name":"Vectors Overlaid Texture Offsets","username":"BigotedSJW","description":"was about to make my own vector field visualizer but someone, namely @reima and @morgan3d, beat me to it","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d","vectors"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//arrow plot stolen from https://www.shadertoy.com/view/ls2GWG by @reima and @morgan3d\n\n//reima's code starts here\n\nconst float ARROW_TILE_SIZE = 24.0;\n\n// Computes the center pixel of the tile containing pixel pos\nvec2 arrowTileCenterCoord(vec2 pos) {\n\treturn (floor(pos / ARROW_TILE_SIZE) + 0.5) * ARROW_TILE_SIZE;\n}\n\n// Computes the signed distance from a line segment\nfloat line(vec2 p, vec2 p1, vec2 p2) {\n\tvec2 center = (p1 + p2) * 0.5;\n\tfloat len = length(p2 - p1);\n\tvec2 dir = (p2 - p1) / len;\n\tvec2 rel_p = p - center;\n\tfloat dist1 = abs(dot(rel_p, vec2(dir.y, -dir.x)));\n\tfloat dist2 = abs(dot(rel_p, dir)) - 0.5*len;\n\treturn max(dist1, dist2);\n}\n\n// v = field sampled at arrowTileCenterCoord(p), scaled by the length\n// desired in pixels for arrows\n// Returns a signed distance from the arrow\nfloat arrow(vec2 p, vec2 v) {\n\t// Make everything relative to the center, which may be fractional\n\tp -= arrowTileCenterCoord(p);\n\t\t\n\tfloat mag_v = length(v), mag_p = length(p);\n\t\n\tif (mag_v > 0.0) {\n\t\t// Non-zero velocity case\n\t\tvec2 dir_v = v / mag_v;\n\t\t\n\t\t// We can't draw arrows larger than the tile radius, so clamp magnitude.\n\t\t// Enforce a minimum length to help see direction\n\t\tmag_v = clamp(mag_v, 5.0, ARROW_TILE_SIZE * 0.5);\n\n\t\t// Arrow tip location\n\t\tv = dir_v * mag_v;\n\n\t\t// Signed distance from shaft\n\t\tfloat shaft = line(p, v, -v);\n\t\t// Signed distance from head\n\t\tfloat head = min(line(p, v, 0.4*v + 0.2*vec2(-v.y, v.x)),\n\t\t                 line(p, v, 0.4*v + 0.2*vec2(v.y, -v.x)));\n\n\t\treturn min(shaft, head);\n\t} else {\n\t\t// Signed distance from the center point\n\t\treturn mag_p;\n\t}\n}\n\n//Bigo's code starts here\n\nvec2 field(vec2 pos){\n\tvec2 uv = (pos.xy - iResolution.xy * 0.5) / (0.5*iResolution.y);\n    float offsetScale = 2.0*cos(iTime);\n    \n    vec2 offsetDir = normalize(uv);\n    \n    float distSq = dot(uv, uv);\n    \n    vec2 offsetOverall = offsetScale * distSq * offsetDir;\n    \n    vec2 texCoord = uv - offsetOverall;\n    \n    return texCoord;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float arrow_dist = arrow(fragCoord.xy,\n\t                         field(arrowTileCenterCoord(fragCoord.xy)) * ARROW_TILE_SIZE * 0.4);\n\n    vec4 arrow_col = vec4(1., 1.0, 1.0, clamp(arrow_dist, 0.0, 1.0));\n    \n    vec2 textCoord = field(fragCoord);\n    \n    vec4 field_col = texture(iChannel0, textCoord);\n\n    // Output to screen\n    fragColor = fragColor = mix(arrow_col, field_col, arrow_col.a);\n}","name":"Image","description":"","type":"image"}]}