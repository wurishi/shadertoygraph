{"ver":"0.1","info":{"id":"mlsyzX","date":"1691015680","viewed":78,"name":"more 2D water ","username":"Kainslow","description":"Made using a simple sum of sines.\nany tips, suggestions, references, information, help, etc. are welcome.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d","water"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    if(iTime < 3.){\n        uv *= iTime;\n    }\n    else{\n        uv *= 3.;\n    }\n    \n    //change this values to change the pattern, \n    //changing this values may require color adjustments\n    float ampX = 190.0;\n    float ampY = 130.0;\n    \n    float freqX = 5.3553359;\n    float freqY = 5.221234;\n    \n    ////////////////////////////////////////////////////\n    \n    // overall speed\n    \n    float timeOff = 0.075;\n    \n    ////////////////////\n    \n    float cX;\n    float cY;\n\n    //you can play with the timeOff increment values to change the animation.\n    for(int i = 0; i < 6; i++)\n    {\n        cX += ampX * (sin( ( uv.x + iTime * timeOff) * freqX));\n        \n        cX += ampX * (sin( ( uv.x+uv.y + iTime * timeOff) * freqX));\n        \n        timeOff *= 1.2632;\n        \n        cX += ampY * (sin((uv.y + iTime * timeOff) * freqY));\n        \n        cX += ampY * (sin((uv.y-uv.x + iTime * timeOff) * freqY));\n        \n        timeOff *= 1.015;\n        \n        cY += ampX * (sin((uv.x + iTime * 1.7 *timeOff) * freqX));\n        \n        timeOff *= 0.13421;\n        \n        cY += ampY * (sin((uv.y*uv.y - uv.x*uv.x + iTime *  0.3 *timeOff) * freqY));\n        \n        timeOff *= 1.591;\n        \n        //change this values to change the pattern\n        ampX *= 0.55;\n        ampY *= 0.75;\n        freqX *= 1.7125;\n        freqY *= 1.79;\n    }\n        \n    \n    fragColor.r = (max(1.5 - 0.1 * ( abs(cX)), 0.0))\n                + (max(1.5 - 0.001 * ( abs(cX*cY)), 0.0))\n    ;\n    fragColor.g =  max(1.5 - 0.10 * ( abs(cX) ), 0.5)\n                + (max(1.5 - 0.001 * ( abs(cX*cY)), 0.0))\n    ;\n    fragColor.b = (1.);\n    \n    \n    fragColor.a = 1.0;\n}","name":"Image","description":"","type":"image"}]}