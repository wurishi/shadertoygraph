{"ver":"0.1","info":{"id":"NsyBWG","date":"1658793660","viewed":181,"name":"tunnel_220725","username":"tk87","description":"torus or sphere fractal","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//0: torus, 1:sphere\n#define PID 0\n\nconst float PI = 3.14159;\n\nvec3 hsv(float h, float s, float v){\n    vec4 t = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(vec3(h) + t.xyz) * 6.0 - vec3(t.w));\n    return v * mix(vec3(t.x), clamp(p - vec3(t.x), 0.0, 1.0), s);\n}\n\nmat3 setCamera(vec3 ro, vec3 tg, float cr){\n\tvec3 cw = normalize(tg-ro);\n\tvec3 cu = normalize(cross(cw,vec3(sin(cr), cos(cr), 0.0)));\n\tvec3 cv = cross(cu,cw);\n    return mat3(cu, cv, cw);\n}\n\nmat2 rotate2D(float r){\n    float c = cos(r);\n    float s = sin(r);\n    return mat2(c, s, -s, c);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = 2.0 * (fragCoord.xy - 0.5 * iResolution.xy) / min(iResolution.y, iResolution.x);\n\n    vec3 col = vec3(0);\n    \n    float t = iTime;\n    \n    vec3 ro = vec3(0, 0, -1);\n    vec3 tg = vec3(0);\n\n    mat3 ca = setCamera(ro, tg, 0.);\n    vec3 rd = ca * normalize(vec3(uv, 1.));\n\n    vec3 p,q;\n    float td=.1, d;\n\n    for(int i=0;i<40;++i){\n        p = ro + td * rd;\n        p.z+=t;\n        for(int i=0;i<4;++i){\n            p=abs(p)-.3;\n            p.yz*=rotate2D(PI*.5);\n            p.xz*=rotate2D(PI*.25);\n        }\n        q=mod(abs(p-.5),1.)-.5;\n        #if PID == 0\n        d = abs(length(vec2(length(q.xz) - 1., q.y)) - .9);\n        #else\n        d = abs(length(q) - .65);\n        #endif\n        if(d < 0.001){\n            col += hsv(sin(q.x*q.y*8.+t), .8, .02/abs(sin(atan(q.x, q.z)*2.+t)*sin(atan(q.y, q.z)*2.+t)+.1));\n            d+=0.003;\n        }\n        td += d;\n    }\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}