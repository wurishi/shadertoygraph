{"ver":"0.1","info":{"id":"3sGSDD","date":"1574067624","viewed":161,"name":"Right Hemisphere 4kb","username":"Manwe","description":"4k intro: https://www.pouet.net/prod.php?which=83559\nAntialiasing is disabled for faster render. You can edit the code to enable it.\nEnvelopes eat 2/3 GPU time.","likes":2,"published":1,"flags":64,"usePreview":0,"tags":["4k","art"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xtj3zR","filepath":"https://soundcloud.com/keensky/right-hemisphere","previewfilepath":"https://soundcloud.com/keensky/right-hemisphere","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Right Hemisphere 4 kb intro\n// by SandS & Jetlag\n// https://www.pouet.net/prod.php?which=83559\n\n// watch in fulscreen to enable vsync mode\n\n\nprecision highp float;\n\n#define maxZ 26.\n\n#define fps 60.\n\n#define LastFrame 9180\n#define totalEnvelopes 13 // number of envelopes used\n\n\nint ef[]=int[219] // envelope data: key frames offsets\n(\n    0,239,1,28,32,180,7662,858,480, // fade\n    0,180,540,1,719,1,359,5400,480,614,886, // shift11\n    0,480,1,119,1140,2,126,2,2210,2,30,2,1646,1,59,900,18,12,10,12,8,420,300,2,32,20,66,1560, // zoomshift\n    0,960,1,239,1,2879,1,31,1,169,1,39,1,1437,1,1439,1,1979, // steps\n    0,5760,1,779,178,4,358,120,2,298,1,1037,642, // greyscale\n    0,6240,2,42,196,240,14,6,202,258,1980, // greyscale2\n    0,720,1,239,1,239,1,239,60,3302,1,477,1,479,1,3419, // timeshift\n    0,480,1,239,1,239,1,239,1,3601,1,477,1,479,1,3419, // shiftX\n    0,480,1,239,1,239,1,239,1,3601,1,477,1,3899, // shiftY\n    0,480,1,239,1,59,180,1,239,1,239,1,599,2762,1,477,1,479,1,1439,1,1499,480, // zoomXY\n    0,1740,128,2,172,2,6,8,42,180,1800,2,32,2,54,632,1,597,2,14,104,1980,2,118,1560, // red\n    0,1680,1,11,30,18,1,2543,36,2,4858, // skip\n    0,1488,372,18,1242,2,24,2,30,24,878,2,32,2,72,72,2,20,2,36,2,4,26,4828 // distort\n);\n\nfloat ev[]=float[219] // envelope data: nodes values\n(\n    0.,.3,.6,.47,.53,1.,1.,0.,0., // fade\n    300.,300.,228.9,263.,243.,134.,86.77,165.23,160.,148.53867,133., // shift11\n    2.8,2.8,2.7,2.8,2.8,2.6,2.5,2.8,2.8,3.,3.,2.8,2.8,7.298,7.246,3.,5.79,5.545,5.67,5.57,5.595,4.,4.,3.6,3.95,3.9,4.,4., // zoomshift\n    3.,3.,4.,4.,3.,3.,2.,2.,3.,3.,2.,2.,3.,3.,1.,1.,2.,2., // steps\n    0.,0.,1.,1.,.9,1.,1.,.86,.5,.3,0.,0.,.7, // greyscale\n    0.,0.,.85,.43,.23,.21,.4,1.,1.,.5,.5, // greyscale2\n    86.,86.,164.,164.,-211.,-221.,164.,164.,6.,6.,156.,150.,122.,118.,6.,6., // timeshift\n    -.5,-.5,-.062,-.062,-.37,-.37,-.98,-.98,-.5,-.5,.2,0.,-.45,-.45,-.5,-.5, // shiftX\n    -.5,-.5,-.8,-.8,-.5,-.5,.28,.28,-.5,-.5,-.4,-.4,-.5,-.5, // shiftY\n    1.4,1.4,1.04,1.04,1.2,1.2,1.12,.48,.5,.86,.85,1.2,1.2,2.38,.7,.7,1.3,1.15,1.4,1.4,1.65,2.2,1.94, // zoomXY\n    0.,0.,1.,0.,0.,.4,.4,.2,0.,0.,.7,.26,.6,.34,.75,1.,0.,0.,.25,.23,0.,0.,.6,0.,0., // red\n    15.,15.,14.,14.,0.,0.,15.,15.,0.,15.,15., // skip\n    0.,0.,.4,0.,0.,.35,.1,.2,.05,0.,0.,.25,.1,.2,0.,0.,.3,.1,.3,1.,.9,.2,0.,0. // distort\n),\n\tparameter[totalEnvelopes], // array with current envelopes values\n    zoom, time;\n\n\nvec3 rotate(vec3 p, vec3 a)\n{\n    vec3 s = sin(a), c = cos(a);\n    return p * mat3(\n         c.y,     s.z*s.y,            -s.y*c.z,\n        -s.x*s.y, c.x*c.z+s.x*s.z*c.y, s.z*c.x-s.x*c.z*c.y,\n         c.x*s.y, s.x*c.z-c.x*s.z*c.y, s.z*s.x+c.x*c.z*c.y\n    );\n}\n\n\nfloat squareSingle(vec3 o, vec3 c) // input: ray position, square center\n{\n    vec3 p, r; // moved vector, rotation\n    vec3 s = vec3(.5,.5,.001); // square size\n\n    r = c;\n    c.z = ( c.z + zoom ) * 4.;\n    p = o - c; // move square to 0,0,0\n    p = rotate(p, time/29. * r); // rotate over axis x,y,z // rotate over axis x,y,z\n    r = max(p - s, -p - s); // differences\n\n    return max(max(r.x,r.y),r.z); // cube distance function\n}\n\n\nvoid mainImage(out vec4 outcolor, vec2 fragCoord)\n{\n\n    time = mod(iTime,163.6);\n\tfor (int i=0, j=1, f; i<totalEnvelopes; i++) // fill parameter[] with current envelopes values\n    {\n\t\tfor (f=0; j<220; j++)\n        {\n            f += ef[j]; // sum offsets\n            if(f >= int(time*fps)) break;\n        }\n\t\tparameter[i] = mix(ev[j-1], ev[j], (time*fps - float(f-ef[j])) / float(ef[j]) );\n        for (; j<220; j++) if(ef[j]==0) break;\n    }\n    time += parameter[6]; // add timeshift\n\n    zoom = parameter[2] + smoothstep(120.,180.,time)*.6 - smoothstep(240.,300.,time); // parameter[2] ~ zoomshift\n\n\n    float l, d, d2, e = .0001, aax, aay = 0.17; // ray length, current distance, epsilon, anti-aliasing    \n    \n    // objects coordinates\n    vec3 massive[] = vec3[15]\n    (\n\t    vec3(.044677,.928527,.337524),\n\t    vec3(.520019,.026367,.486328),\n\t    vec3(.026125,.984497,.337249),\n\t    vec3(.635498,.42041, .41748),\n\t    vec3(.558349,.929687,.849609),\n\t    vec3(.840576,.539917,.436889),\n\t    vec3(.096557,.049438,.537475),\n\t    vec3(.439819,.906127,.853759),\n\t    vec3(.291748,.75415, .479736),\n\t    vec3(.572753,.774047,.402343),\n\t    vec3(.565551,.614624,.542602),\n\t    vec3(.279052,.261779,.16455) - parameter[1]/vec3(70.,110.,-180.), // parameter[1] ~ shift11\n\t    vec3(.62207, .145751,.537809),\n\t    vec3(.846801,.8208,  .397094),\n\t    vec3(.905029,.469421,.400512)\n    ),\n\n    xyz, color = vec3(0.), c, grey, // 3d-coordinates, final color, aa-color\n    p, r, found1, found2, s = vec3(.5,.5,.001), // moved vector, center, rotation, found square, square size\n    norm = vec3(0.), ex = vec3(e,0.,0.), ey = vec3(0.,e,0.), ez = vec3(0.,0.,e);    \n    \n    vec2 coordVar, uv;\n    \n//aay = 0.17; // antialiasing\n//for (int by=0; by<3; by++)\n//{\n//\taax = 0.17;\n//\tfor (int bx=0; bx<3; bx++)\n//{\n//\tcoordVar = (fragCoord + vec2(aax,aay)) / iResolution.xy;\n    coordVar = fragCoord / iResolution.xy; // comment this string if you enable antialiasing\n    uv = (coordVar + vec2(parameter[7],parameter[8])) / vec2(1., 16./9.) *parameter[9]; // paremeter[7] ~ shiftX\n\n\n\tl = 1.;\t// raymarching\n    xyz = normalize(vec3(uv, 1.)); // view direction\n\n\n    for (int i=0; i<5; i++) // trace to bounding sphere for the faster computation\n    {\n        if (i>=int(parameter[3])) break; // parameter[3] ~ steps\n\t\td = 26.; // distance\n\t    for (int j=0; j<15; j++) if(j!=int(parameter[11])) // parameter[11] ~ skip\n\t    {\n\t        c = massive[j]*4.-vec3(2.);\n\t        c.z = ( c.z + zoom ) * 4.;\n\t        d = min( d, length(xyz*l - c)-0.71 ); // sphere distance function\n\t    }\n        l += d;\n        if (l>maxZ) break;\n    }\n\n    \n    if (l<maxZ)\n    {\n       if (mod(uv.y,.08)<.04) l-=parameter[12]; // parameter[12] ~ distort\n        xyz *= l; // actual point\n        \n\t    d = 26.;\n\t    for (int j=0; j<15; j++)\n\t    {\n\t        c = massive[j]*4.-vec3(2.);\n\t        found1 = c;\n\t        r = c;\n\t        c.z = ( c.z + zoom ) * 4.;\n\t        p = xyz - c; // move square to 0,0,0\n\t        p = rotate(p, time/29. * r); // rotate over axis x,y,z\n\t        r = max(p - s, -p - s); // differences\n\t        d2 = max(max(r.x,r.y),r.z); // cube distance function\n\t        if (d2 < d)\n\t        {\n\t            d = d2;\n\t            found2 = found1;\n\t        }\n\t    }\n        norm = normalize(vec3(\n        squareSingle(xyz+ex,found2)-squareSingle(xyz-ex,found2),\n        squareSingle(xyz+ey,found2)-squareSingle(xyz-ey,found2),\n        squareSingle(xyz+ez,found2)-squareSingle(xyz-ez,found2)));\n\t}\n\n    \n    c = vec3(norm.xy,1.-l/20.);\n    c+= vec3(0.,c.x,c.y/2.); // colour correction\n    color += clamp(c, 0., 1.); // accumulate aa-color\n\n//    aax += .33; // end of antialiasing loop \n//}\n//    aay += .33;\n//}  \n//    color /= 9.; // normalize aa-color\n\n\n    color = (1.-parameter[4])*color + vec3(color.x+color.z*parameter[5]) * parameter[4]; // parameter[4] ~ greyscale\n\tcolor.xz+=parameter[10]*vec2(abs(norm.y),color.z/4.); // parameter[10] ~ red\n    \n    outcolor = vec4(color * parameter[0], 1.); // parameter[0] ~ fade\n}","name":"Image","description":"","type":"image"}]}