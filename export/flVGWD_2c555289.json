{"ver":"0.1","info":{"id":"flVGWD","date":"1637724471","viewed":103,"name":"Irwin-Hall noise 2D","username":"scholarius","description":"Approximate gaussian noise via the sum of N uniform random variables (central limit etc). Generates the Irwin-Hall distribution with zero mean, unit variance and can reach to +/- sqrt(3*N) sigma of deviation. Usually N = 4 is sufficient for good quality.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["noise","gaussian","hash","irwinhall"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvec2 irwin_hall_noise_2D( uvec2 coord, uint seed, int N )\n{\n    uvec2 rand = uvec2( 131071u * coord.x + 31u * coord.y, 127u * coord.x + 8191u * coord.y );\n    rand = rand * 524187u + seed * 7u;  \n    rand = rand * 2147483647u + seed * 3u;                 \n    vec2 result = vec2(0.);\n    for( int i = 0; i < N; ++i )\n        { rand = rand * rand | 1u; result.xy += vec2( rand ); }\n    float n = float(N);\n    float s = sqrt( 12. / n );\n    return s * ( result * 2.32830644e-10 - n / 2. );\n}\n\nvoid mainImage( out vec4 fcolor, in vec2 fcoord )\n{\n    const int N = 4;\n    const float buckets = 15.;\n    const float scale = inversesqrt( float( 12 * N ) );\n    vec2 noise = .5 + scale * irwin_hall_noise_2D( uvec2( fcoord ), uint( iFrame ), N );\n    fcolor.xyz = step( +noise, +floor( fcoord / iResolution.xy * buckets + 1. ) / buckets ) *\n                 step( -noise, -floor( fcoord / iResolution.xy * buckets + 0. ) / buckets ) * \n                 mat3x2( .9, .01, .1, .1, .01, .9 );\n    fcolor.xyz = pow( fcolor.xyz + .002, vec3( .4545 ) );\n}","name":"Image","description":"","type":"image"}]}