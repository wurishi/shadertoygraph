{"ver":"0.1","info":{"id":"7lKfWD","date":"1664816122","viewed":156,"name":"Terminal with Keyboard Input","username":"LeighH","description":"A mock up of an old-school terminal with rudimentary keyboard input. Would need some extra work to support shift, special characters etc.","likes":3,"published":1,"flags":48,"usePreview":0,"tags":["text","green","font","keyboard","terminal","input","type","command","console","prompt"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"int getCurrentChar(in vec2 uv)\n{\n    ivec2 cell = convertUvToCell(flipY(uv));\n    return int(floor(texelFetch(iChannel0, cell, 0).r * 255.0));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    int char = getCurrentChar(uv);\n    vec2 charPos = getCharTexturePosition(char);\n    vec2 offset = convertCellToCharTexCoord(uv);\n    vec2 charUv = vec2(charPos.x + offset.x, charPos.y + offset.y);\n    \n    float r = texture(iChannel1, charUv).r;\n    fragColor = vec4(0.0, r, 0.0, 0.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"const int MEM_X = 40;\nconst int MEM_Y = 25;\n\nconst int CHAR_SHEET_SIZE = 16;\n\nconst int CH_BACKSPACE = 8;\nconst int CH_SPACE = 32;\nconst int CH_GREATER = 62;\nconst int CH_UNDERSCORE = 95;\n\nconst ivec2 CURSOR_MEM_LOCATION = ivec2(0,1);\nconst ivec2 KEYB_MEM_LOCATION = ivec2(0,0);\n\nconst int[14] MEMORY_INIT_STATE = int[](CH_GREATER,72,101,108,108,111,44,\n                                        CH_SPACE,87,111,114,108,100,33);\n\nint[MEM_X * MEM_Y] _memory;\n\nvoid setup() {\n\n    for(int i = 0; i < _memory.length(); i++)\n    {\n        if(i < MEMORY_INIT_STATE.length()) \n            _memory[i] = MEMORY_INIT_STATE[i];\n        else\n            _memory[i] = CH_SPACE;\n    }\n}\n\nvec2 getCharTexturePosition(in int char) \n{\n    float x = mod(float(char), float(CHAR_SHEET_SIZE));\n    float y = (float(char) - x) / float(CHAR_SHEET_SIZE);\n    vec2 uv = vec2(x, y) / float(CHAR_SHEET_SIZE);\n    uv.y = 1.0 - (uv.y + 1.0 / float(CHAR_SHEET_SIZE));\n    return uv;\n}\n\nvec2 convertCellToCharTexCoord(in vec2 uv) \n{\n    uv.x = mod(uv.x, 1.0 / float(MEM_X)) / float(CHAR_SHEET_SIZE) * float(MEM_X);\n    uv.y = mod(uv.y, 1.0 / float(MEM_Y)) / float(CHAR_SHEET_SIZE) * float(MEM_Y);\n    \n    return uv;\n}\n\nivec2 convertUvToCell(in vec2 uv)\n{\n    int col = int(floor(uv.x * float(MEM_X)));\n    int row = int(floor(uv.y * float(MEM_Y)));\n    \n    return ivec2(col, row);\n}\n\nivec2 convertMemIndexToCell(int index)\n{\n    int col = int(mod(float(index), float(MEM_X)));\n    int row = int((index - col) / MEM_Y);\n    \n    return ivec2(col, row);\n}\n\nvec2 flipY(in vec2 uv)\n{\n    uv.y = 1.0 - uv.y;\n    return uv;\n}\n\nfloat decodeChar(int char)\n{\n    return float(256 - char);\n}\n\nint decodeCursorPosition(float encodedValue)\n{\n    return int(encodedValue * float(_memory.length()));\n}\n\nfloat encodeCursorPosition(int cursorPosition)\n{\n    return float(cursorPosition) / float(_memory.length());\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// Red channel stores screen contents\n// Green channel stores cursor location and keyboard input.\n\nvec4 getInitialValue(ivec2 uv)\n{   \n    setup();\n\n    return vec4(float(_memory[MEM_X*uv.y+uv.x]) / 255.0, \n        encodeCursorPosition(MEMORY_INIT_STATE.length()), \n        0., 0.);\n}\n\nint getKeyPressed()\n{    \n    for(int i = 0; i < 256; i++)\n    {\n        float keypressed = texelFetch(iChannel1, ivec2(i, 1), 0).x;\n        \n        if(keypressed != 0.0)\n        {            \n        \treturn i;\n        }\n    }\n    \n    return 0;\n}\n\nbool isCursorPosition(vec2 fragCoord)\n{\n    ivec2 cell = convertMemIndexToCell(decodeCursorPosition(\n        texelFetch(iChannel0, CURSOR_MEM_LOCATION, 0).g));\n        \n    if(cell.x == int(fragCoord.x) && cell.y == int(fragCoord.y)) return true;\n    \n    return false;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord )\n{    \n    if(iFrame == 0)\n    {\n        fragColor = getInitialValue(ivec2(fragCoord));\n        return;\n    }\n    \n    vec4 tempColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    \n    if(ivec2(fragCoord) == KEYB_MEM_LOCATION)\n    {\n        int key = getKeyPressed();\n        tempColor.g = float(key);\n    }\n    \n    int key = int(texelFetch(iChannel0, KEYB_MEM_LOCATION, 0).g);\n    \n    if(ivec2(fragCoord) == CURSOR_MEM_LOCATION)\n    {\n\n        if(key != 0)\n        {\n            if(key == CH_BACKSPACE)\n            {\n                tempColor.g = encodeCursorPosition(\n                    decodeCursorPosition(\n                        texelFetch(iChannel0, CURSOR_MEM_LOCATION, 0).g) - 1); \n            }\n            else\n            {\n                tempColor.g = encodeCursorPosition(\n                    decodeCursorPosition(\n                        texelFetch(iChannel0, CURSOR_MEM_LOCATION, 0).g) + 1); \n            }\n        }\n    }\n    \n    if(key != 0 && isCursorPosition(fragCoord))\n    {\n        if(key == CH_BACKSPACE) \n        {\n            tempColor.r = decodeChar(CH_SPACE);\n        }\n        else\n        {\n            tempColor.r = decodeChar(key);\n        }\n    }\n    else if(isCursorPosition(fragCoord))\n    {\n        tempColor.r = mod(float(iTime), 1.5) < 0.75 ? decodeChar(CH_UNDERSCORE) : decodeChar(CH_SPACE);\n    }\n            \n\n    fragColor = tempColor;\n}","name":"Buffer B","description":"","type":"buffer"}]}