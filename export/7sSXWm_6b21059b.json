{"ver":"0.1","info":{"id":"7sSXWm","date":"1620347606","viewed":95,"name":"Gold bacteria","username":"SnoopethDuckDuck","description":"Really like the way this one looks, except for the flickering black dots.\npress r to reset ","likes":2,"published":1,"flags":48,"usePreview":0,"tags":["cellularautomata"],"hasliked":0,"parentid":"ssBSWm","parentname":"Texture Automata 2"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code forked from Inigo Quilez's game of life shader\n// https://www.shadertoy.com/view/XstGRf\n// Reset code stolen from somewhere else - sorry!\n// (Press R to reset shader)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n//fragColor = vec4( 1. - step(3. * texelFetch( iChannel0, ivec2(fragCoord), 0 ).x ,0.2));\n\n// change 0.0024 value for fun times\nfloat x = 0.0016 *  texelFetch( iChannel0, ivec2(fragCoord), 0 ).x;\nfloat b  = (cos(iTime));\n//x = 4. * x * (1.-x); // <- looks cool too\nx = min(x,1.);\nvec3 col = vec3(34.,32.,52.) / 255.;\nvec3 col2 = vec3(69.,40.,60.) / 255.;\nvec3 col3 = vec3(172.,50.,50.) / 255.;\nvec3 col4 = vec3(223.,113.,38.) / 255.;\nvec3 col5 = vec3(255.,182.,45.) / 255.;\nvec3 col6 = vec3(251.,242.,54.) / 255.;\n\n//vec3 col6 = vec3(1.);\nfloat m = 1. / 7.;\nif (x < m)\nfragColor = vec4(col,1.);\nelse if (x < 2. * m)\nfragColor = vec4(col2,1.);\nelse if (x < 3. * m)\nfragColor = vec4(col3,1.);\nelse if (x < 4. * m)\nfragColor = vec4(col4,1.);\nelse if (x < 5. * m)\nfragColor = vec4(col5,1.);\nelse if (x < 6. * m)\nfragColor = vec4(col6,1.);\nelse\nfragColor = vec4(col,1.);\n\n//fragColor = 1. - fragColor;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define KEYBOARD iChannel1\n#define KEY_RESET 82\n\n\nfloat Cell( in ivec2 p )\n{\n    // do wrapping\n    ivec2 r = ivec2(textureSize(iChannel0, 0));\n    p = (p+r) % r;\n    \n    // fetch texel\n   // return (texelFetch(iChannel0, p, 0 ).x > 0.5 ) ? 1 : 0;\n   return texelFetch(iChannel0, p, 0 ).x;\n}\n\nfloat hash1( float n )\n{\n    return fract(sin(n)*138.5453123);\n}\n\nbool key_down(int key) {\n    return int(texelFetch(KEYBOARD, ivec2(key, 0), 0).x) == 1;\n}\n\nfloat S(float x)\n{\nreturn step(0.5,x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\nivec2 px = ivec2( fragCoord );\n    \nif (key_down(KEY_RESET)) \n{    \nfloat d = length(fragCoord / iResolution.y - vec2(0.875, 0.5));\nfloat f = step(d,0.015)\n* hash1(fragCoord.x * 13.0 + 10.131 * iTime + hash1(fragCoord.y*73.1));\n    float g = hash1(fragCoord.x * 13.0  + 10.131 * iTime + 100.19414 + hash1(fragCoord.y*73.1 + 1931.1));\n    g = step(0.9999,g);\nfragColor = vec4( max(f,g), 0.0, 0.0, 0.0 );\nreturn;\n}\n    \n// center cell\nfloat e = Cell(px); \n\n// neighbour cells\nfloat t = Cell(px + ivec2(0,-1));\nfloat b = Cell(px + ivec2(0,1));\nfloat l = Cell(px + ivec2(-1,0));\nfloat r = Cell(px + ivec2(1,0));   \n\n// \"average\" of neighbours\nfloat k = max(0.5 * (t + b), 0.5 * (l + r));\n\n// difference between \"average\" and center\nfloat j = abs(e - k);\n\n// this stuff makes a completely different automata\n/*\nfloat  count = 2. * (step(e,t) + step(e,b) + step(e,l) + step(e,r))  -4.;\nif (count >= -1.)\ne += 8. * k * e * e * j; // change 8. and 2. for better results\nelse if (count < 0.)\ne -= 2. * j;\n*/\n\n// slightly different pattern:\n// if (e <= 0.05) // 0.04 works well too\n// e =  k +  (30. + 10. * hash1(e)) * e * j;\nfloat m = 0.5;\n\n//if (e == 2. && (t >= m || r >= m || l >= m || b >= m))\n//e = k -  (28. + 10. * hash1(e)) * e * j;\n if (e <= 0.05 + 0.04 * hash1(e) - 0.02) \ne = k +  (28. + 10. * hash1(e)) * e * j;\nelse if ( j > 0.1 && j < 1222.9 && e > 0.)\ne = k - 0.05;\nelse \ne = 0.5;\n//e = max(0., min(1., e));\n\nfloat f = e;\nif( iFrame==0 ) \n{   \nfloat x = fragCoord.x / iResolution.y - 0.375;\nfloat y = fragCoord.y / iResolution.y;\nf = max(step(fract(3. * abs(x - 0.5)), 3. / iResolution.y),\nstep(fract(3. * abs(y - 0.5)),3. / iResolution.y) )*       \nhash1(fragCoord.x*13.0 + hash1(fragCoord.y*73.1));\nf = step(0.5,f);\n}\n    \nfragColor = vec4( f, 0.0, 0.0, 0.0 );\n}","name":"Buffer A","description":"","type":"buffer"}]}