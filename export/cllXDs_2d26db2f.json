{"ver":"0.1","info":{"id":"cllXDs","date":"1675497260","viewed":104,"name":"Random RGB Patterns","username":"patrickhartono","description":"Random RGB Patterns","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["rgb"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n\nThe MIT License\n\nCopyright Â© 2023 Patrick Hartono\n\nPermission is hereby granted, free of charge, to any person obtaining \na copy of this software and associated documentation files (the \"Software\"), \nto deal in the Software without restriction, including without limitation \nthe rights to use, copy, modify, merge, publish, distribute, sublicense, \nand/or sell copies of the Software, and to permit persons to whom the Software \nis furnished to do so, subject to the following conditions: \nThe above copyright notice and this permission notice shall be included in \nall copies or substantial portions of the Software. \nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, \nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF \nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. \nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, \nDAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, \nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH \nTHE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n*/\n\n\n#define t iTime\n#define r iResolution.xy\n\n// Function to generate a random number based on a given 2D vector\nfloat rand(vec2 n) { \n  return fract(cos(dot(n, vec2(12.9898, 4.1414))) * 43758.5453); \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n  vec3 c;\n  float l,z=t;\n  for(int i=0;i<3;i++) {\n    // Generate a random offset for each iteration of the loop\n    vec2 uv,p=fragCoord.xy/r + vec2(rand(vec2(t,i))*2.0-1.0, rand(vec2(i,t))*2.0-1.0);\n    uv=p;\n    // Translate the fragment coordinate to the center of the screen\n    p-=.5;\n    // Correct aspect ratio of the x component\n    p.x*=r.x/r.y;\n    // Add a random offset to the time component\n    z+=.07 * rand(vec2(z, t));\n    // Calculate the length of the p vector\n    l=length(p);\n    // Apply a transformation to the uv vector based on the length of the p vector and the time component\n    uv+=p/l*(sin(z)+1.)*abs(sin(l*9.-z-z));\n    // Calculate a color value based on the transformed uv vector\n    c[i]=.05/length(mod(uv,1.)-.5);\n  }\n  // Multiply the color value by a brightness factor and output it as the fragment color\n  fragColor=vec4(c*1.5,t);\n}\n","name":"Image","description":"","type":"image"}]}