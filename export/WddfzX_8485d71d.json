{"ver":"0.1","info":{"id":"WddfzX","date":"1605751775","viewed":843,"name":"Jump Flood Outlines","username":"WandererStudios","description":"Using the jump flood algorithm to generate a thick outline around objects.","likes":3,"published":1,"flags":32,"usePreview":1,"tags":["sdf","outline"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    // Output to screen\n    vec4 p = texture(iChannel1, uv);\n    fragColor = texture(iChannel0, uv);\n    if (p.b != 1.)\n    {\n        float outline = step(distance(uv, p.xy), .04);\n        fragColor.rgb = mix(vec3(outline), fragColor.rgb, 1.-outline);\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const int steps = 8;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 px = 1./iResolution.xy; // 1 pixel width/height\n\n    vec3 col = vec3(0.);\n    \n    if (iFrame == 0)\n    {\n        // Get black and white starting image\n        col = step(.6,texture(iChannel0, uv)).rrr;\n\n        // Save positions of every white pixel\n        if (col.x == 0.)\n        {\n            col = vec3(-1.);\n        } else\n        {\n            col.xy = uv;  \n        }\n    } else\n    {\n        \n        int level = clamp(steps - iFrame, 0, steps);\n        float stepLength = exp2(float(level));\n        \n        float minDistance = 100.;\n        for (int x = -1; x < 2; x++)\n        {\n            for (int y = -1; y < 2; y++)\n            {\n                vec4 p = texture(iChannel1, uv + (px * vec2(x,y) * stepLength));\n                if (p.x != -1.)\n                {\n                    float dist = distance(uv, p.xy);\n                    if (dist < minDistance)\n                    {\n                        minDistance = dist;\n                        if (minDistance == 0.)\n                        {\n                            col.b = 1.;\n                        }\n                        col.xy = p.xy;\n                    }\n                }\n            }\n        }\n    }\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n    //fragColor = texture(iChannel0, uv);\n}","name":"Buffer A","description":"","type":"buffer"}]}