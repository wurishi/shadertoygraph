{"ver":"0.1","info":{"id":"4d23z3","date":"1443301337","viewed":412,"name":"Normal Generation","username":"zel","description":"Normal map generation based on height","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["procedural","circle","utility","map","normal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"\nvec2 SetResolution(vec2 uv, vec2 res)\n{\n\tuv.xy = floor(uv*res);\n\treturn uv;\t\t\n}\n\n\nstruct sphere {\n  vec3  pos;\n  float rad;\n};\n\t\nvec3 eye = vec3(0.5, 0.5, 4.0);\nsphere s = sphere(vec3( 0.5,-0.5,-15.0 ), 0.6);\nvec3 litePos = vec3(0.5, -0.5, 0.0);\n\nvec4 getColor(vec3 p, vec3 center, vec4 diffuseColor, vec3 litePos)\n{\n  vec3 n = normalize(p - center);\n  vec3 l = normalize(litePos - p);\n  vec3 v = normalize(eye - p);\n  vec3 h = normalize(v + l);\n\n  return diffuseColor * max(0.0, dot(n,l));\n}  \n\n\nfloat intersectSphere(in vec3 O, in vec3 L, vec3 C, float r) \n{ \n  vec3  CO = O - C; \n \n  float underTheSqrt = dot( CO, L ) * dot( CO, L ) - (dot( CO, CO ) - r * r); \n\t\n  if( underTheSqrt >= 0.0 )\n\treturn -dot( CO, L ) - sqrt( underTheSqrt ); // Distance\n  else\n    return -1.; // No intersect\n} \n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec3 pixelPos = vec3(fragCoord.xy / iResolution.x, 0);\n  vec3 rayDir =  normalize(pixelPos - eye);\n  float eyeToSphere = intersectSphere(eye, rayDir, s.pos, s.rad); \nvec4 color;\n  if(eyeToSphere != -1.0) // -1 means the ray missed\n    { \n      vec4 sShadeColor = getColor(eye + eyeToSphere*rayDir, s.pos, vec4(1), litePos);\n      color= max(sShadeColor,0.0);\n    }\n  else\n    color = vec4(0.,0.,0.,1);\n\t\n\tcolor = clamp(color,0.3,1.9);\n\tcolor.x = (-10.0*dFdx(color.x));\n\tcolor.y = (-10.0*dFdy(color.y));\n\tcolor.z = 1.0;\n\tcolor = normalize(color)+0.5;\n\t//color.y = dFdy(color.y);\n\tfragColor= color;\n}\n\n\n\n","name":"","description":"","type":"image"}]}