{"ver":"0.1","info":{"id":"mtj3RK","date":"1673644545","viewed":77,"name":"Slime ball test","username":"ianertson","description":"Just a distorted circle","likes":1,"published":1,"flags":0,"usePreview":1,"tags":["ball","slime"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define C0 3815\n#define C1 9847\n#define C2 8477\n#define C3 9582\n#define C4 6186\n#define C5 9354\n#define C6 2276\n\n// converts vec2 to a 1D index\nfloat idx(vec2 v, float k) { return v.x * k + v.y; }\n\n// yields a pseudo-random value from a float\nfloat hash1(float v, float seed) {\n    float s = fract(cos(v*idx(vec2(v+(seed*0.1), seed/1.6), 3.3019)));\n    s = smoothstep(0.0, 1.0, fract(cos((seed/1.6)*s)));\n    s = seed*s;\n    \n    float x0 = v;\n    float y0 = atan(s-v, float(C0) / float(C1));\n    float x1 = atan(s-y0, float(C1) / float(C2));\n    float y1 = atan(s-x1, float(C3) / float(C4));\n    return fract(cos(v*((1.2715+s)*sin((s*0.2)*(0.5+atan(y1, x0))))+y0)\n        * dot(vec2(x0, y0), vec2(x1, y1)));   \n}\n\n// smooth value noise from vec2\nfloat hash2(vec2 uv, float seed) {\n    float k = hash1(float(C2), seed);\n    vec2 id = floor(uv);\n    vec2 lv = smoothstep(0.0, 1.0, fract(uv));\n    float a = hash1(idx(id, k), seed);\n    float b = hash1(idx(id + vec2(1.0, 0.0), k), seed);\n    float ab = mix(a, b, lv.x);\n    float c = hash1(idx(id + vec2(0.0, 1.0), k), seed);\n    float d = hash1(idx(id + vec2(1.0, 1.0), k), seed);\n    float cd = mix(c, d, lv.x);\n    return mix(ab, cd, lv.y);\n}\n\nvec3 hash3(vec2 uv, float seed) {\n    float k = hash1(length(uv), seed);\n    float k2 = hash1(k*length(uv), seed +0.125);\n    float x = hash2(uv+k, seed-0.2);\n    float y = hash2(uv+k2, seed+0.5);\n    float z = hash2(uv/(0.01+max(0.001, k)), seed+1.1);\n    \n    return vec3(x, y, z);\n}\n\nfloat shape(vec2 uv, float radius) {\n    float seed = 1246.0;\n    float T = iTime*0.1;\n    float h = hash2(uv+vec2(0.001, -0.046), seed+0.01);\n    uv += vec2(cos(T+h), sin(T+h))*(radius*0.05);\n    return hash2(uv, seed) * (radius*0.5);\n}\n\nvec2 shape2_(vec2 uv, float radius) {\n    float x = shape(uv, radius);\n    float y = shape(uv*hash1(smoothstep(0.0, 1.0, x), 33.0), radius);\n    return vec2(x, y); \n}\n\nvec2 shape2(vec2 uv, float radius) {\n    vec2 id = floor(uv);\n    vec2 lv = smoothstep(0.0, 1.0, fract(uv));\n    vec2 a = shape2_(id, radius);\n    vec2 b = shape2_(id+vec2(1.0, 0.0), radius);\n    vec2 c = mix(a, b, lv.x);\n    vec2 d = shape2_(id + vec2(0.0, 1.0), radius);\n    vec2 e = shape2_(id + vec2(1.0, 1.0), radius);\n    vec2 f = mix(d, e, lv.x);\n    vec2 s = mix(c, f, lv.y);\n    \n    float j = hash2(uv*1.992, 0.2815)*1.6;\n    s += vec2(cos(j), sin(j)) * 40.0;\n    \n    return s;\n}\n\nfloat circle(vec2 fc, vec2 pos, float radius, float feather) {\n    return 1.0 - smoothstep(radius-feather, radius+feather, abs(distance(fc, pos)));\n}\n\nvec3 distortedCircle(vec2 fc, vec2 res, vec2 pos) {\n    vec2 uv = fc / res;\n    float radius = 128.0;\n    float feather = 0.22*hash2(uv*9.0, 212.1)*(radius*0.5);\n    \n    vec2 off0 = shape2(uv+(pos/res), radius);\n    fc += ((-res/2.0)*0.25)+off0*2.6;\n    \n    vec2 off1 = shape2(off0, radius);\n    fc -= (off1/res);\n    \n    float circ = circle(fc, pos, radius, feather);\n    \n    vec3 col = vec3(0.3, 0.5, 0.1);\n    \n    vec3 col2 = hash3((pos/res)*(0.6*cos((off0/res)-uv+(off1/res))), 1.0124);\n    col = mix(col, col+col2, length(col2));\n    vec3 bright = col + ((radius*0.16) / max(0.0001, abs(distance(fc, pos))));\n    \n    vec2 off2 = mix(off0, off1, smoothstep(0.0, 1.0, hash2((uv*0.2)*(pos/res), 0.291)));\n    off2 = 0.1*off2*2.0-1.0;\n        \n    col = mix(col, bright, 0.9*hash2((uv*16.5)+off2, 0.2981));\n    \n    return col*circ;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec2 pos = iResolution.xy/2.0;\n    \n    if (iMouse.z > 0.001) { pos = iMouse.xy; }\n    // Time varying pixel color\n    vec3 col = distortedCircle(fragCoord.xy, iResolution.xy, pos);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}