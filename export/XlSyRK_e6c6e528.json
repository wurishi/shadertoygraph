{"ver":"0.1","info":{"id":"XlSyRK","date":"1509083252","viewed":91,"name":"PAD Tutorial 02","username":"dpadrial","description":"a","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["tutorial"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // シェーダーは1つの整数や浮動小数点数を表現するintやfloatの他、\n    // 2/3/4次元の浮動小数点数を表現するベクトル型や3x3,4x4の行列型が用意されており、\n    // シェーダープログラミングでは主にベクトル型や行列型を利用します。\n    //\n    // ここではRGBAを表現するため4次元のベクトル型を使用し、\n    // RGBA = (255, 0, 0, 255)の不透明な赤色を表しています。\n    vec4 red = vec4( 1.0, 0.0, 0.0, 1.0 );\n    \n    // RGBA = (0, 255, 0, 255)の不透明な緑色を表しています。\n    vec4 green = vec4( 0.0, 1.0, 0.0, 1.0);\n    \n    // 色をベクトル型で表現しているため、数値演算が可能です。\n    // この例では上の赤色と緑色を加算して、RGB(255,255,0)の黄色が出来ています。\n\tfragColor = red + green;\n}","name":"Image","description":"","type":"image"}]}