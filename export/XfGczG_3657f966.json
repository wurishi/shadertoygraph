{"ver":"0.1","info":{"id":"XfGczG","date":"1731989506","viewed":54,"name":"Polygon function for r(theta)","username":"N8Shader","description":"Use this as the radius to get a polygon of any arbitrary side amount QUICKLY","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["polar"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n// Claude 3.5 Sonnet generated - simple visualization :D\n// https://www.desmos.com/calculator/fi9qobge5n\n// Helper function to calculate the star function value for given theta\nfloat starFunction(float theta, float n) {\n    float modTheta = mod(theta, 2.0 * PI / n);\n    float piOverN = PI / n;\n    return 1.0 / cos(modTheta - piOverN) * cos(piOverN);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalize pixel coordinates (from 0 to 1)\n    vec2 uv = 2.0 * (fragCoord - 0.5 * iResolution.xy) / min(iResolution.x, iResolution.y);\n    \n    // Convert to polar coordinates\n    float r = length(uv);\n    float theta = atan(uv.y, uv.x);\n    \n    // Make theta positive (0 to 2Ï€)\n    if (theta < 0.0) theta += 2.0 * PI;\n    \n    // Animate n over time (varying between 3 and 8)\n    float n = 3.0 + 5.0 * (sin(iTime * 0.5) * 0.5 + 0.5);\n    \n    // Calculate the star function value for this point's theta\n    float ts = starFunction(theta, n);\n    \n    // Initialize color to background\n    vec3 col = vec3(0.02, 0.02, 0.05);\n    \n    // Plot the function path with smooth falloff\n    float lineWidth = 0.003;\n    float brightness = exp(-abs(r - abs(ts)) / lineWidth);\n    vec3 lineColor = vec3(0.9, 0.6, 0.2);  // Golden color for the line\n    \n    // Add glow effect\n    float glow = exp(-abs(r - abs(ts)) / (lineWidth * 10.0));\n    vec3 glowColor = vec3(0.4, 0.2, 0.1);  // Subtle orange glow\n    \n    // Combine colors\n    col += lineColor * brightness;\n    col += glowColor * glow;\n    \n    // Add subtle time-based shimmer to the line\n    col *= 1.0 + 0.1 * sin(iTime * 2.0 + theta * 5.0);\n    \n    // Output final color\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}