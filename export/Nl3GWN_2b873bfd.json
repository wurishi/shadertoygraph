{"ver":"0.1","info":{"id":"Nl3GWN","date":"1653837661","viewed":297,"name":"Dark room","username":"z0rg","description":"Room","likes":12,"published":3,"flags":112,"usePreview":0,"tags":["dark","room"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    const int steps = GLOW_SAMPLES;\n    vec3 col = vec3(0.);\n    \n    for (int i = 0; i< steps; ++i)\n    {\n        float f = float(i)/float(steps);\n        f = (f -.5)*2.;\n        float factor = GLOW_DISTANCE;\n        vec2 nuv = uv+vec2(0.,f*factor);\n        if (nuv.y > 0. && nuv.y < 1.)\n            col += texture(iChannel0, uv+vec2(0.,f*factor)).xyz/float(steps);\n    }\n    \n    vec3 rgb = texture(iChannel1, uv).xyz+GLOW_OPACITY*pow(col, vec3(GLOW_POW));\n    //rgb += 2.*vec3(0.,.25,.3)*sat(sin(uv.y*355.-iTime*200.)-.5);\n\n    fragColor = vec4(rgb,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xt2XWD","filepath":"https://soundcloud.com/recharge/recharge-operate-psyclotron?utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing","previewfilepath":"https://soundcloud.com/recharge/recharge-operate-psyclotron?utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing","type":"musicstream","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nfloat seed;\nfloat rand()\n{\n    seed++;\n    return hash11(seed);\n}\n\nmat2 r2d(float a) { float c = cos(a), s = sin(a); return mat2(c, -s, s, c); }\n\nvec3 getCam(vec3 rd, vec2 uv)\n{\n    vec3 r = normalize(cross(rd, vec3(0.,1.,0.)));\n    vec3 u = normalize(cross(rd, r));\n    return normalize(rd+r*uv.x+u*uv.y);\n}\nfloat _sqr(vec2 p, vec2 s)\n{\n    vec2 l = abs(p)-s;\n    return max(l.x, l.y);\n}\nvec2 _min(vec2 a, vec2 b)\n{\n    if (a.x < b.x)\n        return a;\n    return b;\n}\n\nvec2 map(vec3 p)\n{\n    vec2 acc = vec2(10000.,-1.);\n    \n    //acc = _min(acc, vec2(length(p-vec3(sin(iTime*2.)-.5,cos(iTime*1.7)+cos(iTime*.5)*.5,cos(iTime*3.)+8.))-.5, 2.));\n    \n    acc = _min(acc, vec2(-(abs(p.y)-2.8), 0.));\n    vec3 pwall = p;\n    //pwall.xy*=r2d(.5);\n    float sidewall = -(abs(p.y+p.x)-3.8);\n    \n    sidewall = max(sidewall, -(abs(p.z-3.5)-1.));\n    acc = _min(acc, vec2(sidewall, 0.)); // Sidewalls\n    acc = _min(acc, vec2(-(abs(p.z)-12.), 1.));\n    \n    return acc;\n}\n\nvec3 getNorm(vec3 p, float d)\n{\n    vec2 e = vec2(0.01,0.);\n    return normalize(vec3(d)-\n        vec3(map(p-e.xyy).x, map(p-e.yxy).x, map(p-e.yyx).x));\n}\n\nvec3 trace(vec3 ro, vec3 rd, int steps)\n{\n    vec3 p = ro;\n    for (int i = 0; i < steps; ++i)\n    {\n        vec2 res = map(p);\n        if (res.x < 0.01)\n            return vec3(res.x, distance(p, ro), res.y);\n        p+= rd*res.x;\n    }\n    return vec3(-1.);\n}\n\nvec3 getMat(vec3 rd, vec3 res, vec3 p, vec3 n)\n{\n    vec3 col = vec3(0.);\n    \n    col = n*.5+.5;\n    if (res.z == 0.)\n    {\n        if (abs(dot(n,vec3(0.,0.,1.))) < 0.01)\n        {\n            col = vec3(0.051,0.404,0.408)*.2*pow(texture(iChannel0, p.xz*.1).x, .1)*vec3(.5); // ambient\n        }\n        else\n            col = vec3(0.);\n    }\n    if (res.z == 1.)\n    {\n        vec2 uvwall = p.xy;\n        float rep = 3.;\n        float idwin = floor((uvwall.x+rep*.5)/rep);\n        uvwall.y = abs(uvwall.y);\n        uvwall.y -= 1.8;\n        uvwall.x = mod(uvwall.x+rep*.5,rep)-rep*.5;\n        float sqr = _sqr(uvwall, vec2(1.4, .78));\n        float wincolfactor = sat(sin(idwin*1.+3.*iTime*sign(p.y))*.5+.5);\n        //wincolfactor += pow(FFT(.1),2.);\n        wincolfactor *= (mod(iTime, .2)/.2)*FFT(.1);\n        vec3 rgbwin = mix(vec3(1.), vec3(1.,0.1,0.4), wincolfactor);\n        col = mix(vec3(0.), rgbwin*pow(FFT(.9),.5), 1.-sat(sqr*40.));\n    }\n    if (res.z == 2.)\n    {\n        col = vec3(0.165,0.996,0.678)*10.*FFT(.4);\n    }\n    \n    return col;\n}\nfloat getKeyPress(int keycode)\n{\n    return texelFetch( iChannel1, ivec2(keycode,1),0 ).x;\n}\nfloat getKeyState(int keycode)\n{\n    return texelFetch( iChannel1, ivec2(keycode,0),0 ).x;\n}\nfloat getWallSpec(vec3 p)\n{\n    return pow(texture(iChannel0, p.xz*.1).x, .1);\n}\n\nvec3 rdr(vec2 uv)\n{\n    vec3 col = vec3(0.);\n    \n    vec3 ro = vec3(-2.+sin(iTime*.2),1.+sin(iTime*.25),-8.);\n    vec3 ta = vec3(-2.+sin(iTime*.2),0.+sin(iTime*.3),0.);\n    vec3 rd = normalize(ta-ro);\n    rd = getCam(rd, uv);\n    \n    vec3 res = trace(ro, rd, 128);\n    if (res.y > 0.)\n    {\n        vec3 p = ro+rd*res.y;\n        vec3 n = getNorm(p, res.x);\n        col = getMat(rd, res, p, n);\n        \n        if (res.z == 0.)\n        {\n            if (abs(dot(n,vec3(0.,0.,1.))) < 0.01)\n            {\n                float spec = pow(texture(iChannel0, p.xz*.1).x, 1.)*.2;\n                vec3 refl = normalize(reflect(rd, n)+spec*2.*(vec3(rand(), rand(), rand())-.5));\n                vec3 resrefl = trace(p+n*0.01, refl, 128);\n                if (resrefl.y > 0.)\n                {\n                    vec3 prefl = p+refl*resrefl.y;\n                    vec3 nrefl = getNorm(prefl, resrefl.x);\n                    col += getMat(refl, resrefl, prefl, nrefl);\n                }\n            }\n        }\n        \n    }\n    if (getKeyState(KEY_LEFT) > .1)\n    col *= sat(sin(iTime*80.));\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.xx;\n    seed=texture(iChannel0,uv).x;\n    seed+=fract(iTime);\n    vec3 col = rdr(uv);\n    \n    col = mix(col, texture(iChannel2, fragCoord/iResolution.xy).xyz, .7);\n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    const int steps = GLOW_SAMPLES;\n    vec3 col = vec3(0.);\n    \n    for (int i = 0; i< steps; ++i)\n    {\n        float f = float(i)/float(steps);\n        f = (f -.5)*2.;\n        float factor = GLOW_DISTANCE;\n        vec2 nuv = uv+vec2(f*factor, 0.);\n        if (nuv.x > 0. && nuv.x < 1.)\n          col += texture(iChannel0, uv+vec2(f*factor,0.)).xyz/float(steps);\n    }\n    \n    vec3 rgb = texture(iChannel1, uv).xyz+2.*pow(col, vec3(GLOW_POW));\n    fragColor = vec4(col,1.0);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\n#define GLOW_SAMPLES 40\n#define GLOW_DISTANCE 0.05\n#define GLOW_POW 1.\n#define GLOW_OPACITY 1.5\n\nconst int KEY_LEFT  = 37;\n\n#define sat(a) clamp(a, 0., 1.)\n#define FFT(a) (texture(iChannel3, vec2(a, 0.)).x*.5+.5)\nfloat hash11(float p)\n{\n// Stolen from https://www.shadertoy.com/view/ss3SD8\n    return (fract(sin((p)*114.514)*1919.810));\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}","name":"Common","description":"","type":"common"}]}