{"ver":"0.1","info":{"id":"sss3D8","date":"1615900807","viewed":124,"name":"RayMarching Circle","username":"izhi","description":"this is raymarching example !","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100 // 最大步数\n#define MAX_DIST 100. // 最大距离\n#define SURF_DIST .01 // 最小步进的距离\n\n// 正方体\nfloat sdBox(vec3 p, vec3 b)\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\n// 获取当前点和场景中是所有物体相交的最小距离\nfloat GetDist(vec3 p) {\n    vec4 s = vec4(0, 1, 6, 1);\n    \n    // 球的位置(s.xyz)和半径（s.w）\n    float sphereDist = length(p - s.xyz) - s.w; // P点到球面的距离\n    float planeDist = p.y; // P点到平面的距离，平面是xz平面，高度y = 0；\n    \n    float d = min(sphereDist, planeDist);\n    return d;\n}\n\nvec3 GetNormal(vec3 p) {\n    float d = GetDist(p);\n    vec2 e = vec2(.01, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p - e.xyy),\n        GetDist(p - e.yxy),\n        GetDist(p - e.yyx)\n    );\n    \n    return normalize(n);\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n    float d0 = 0.;\n    \n    for (int i = 0; i < MAX_STEPS; i++) {\n        vec3 p = ro + rd * d0;\n        float dS = GetDist(p);\n        d0 += dS;\n        if (d0 > MAX_DIST || dS < SURF_DIST) break;\n    }\n    \n    return d0;\n}\n\n// 计算灯光，点光源\nfloat GetLight(vec3 p) {\n    vec3 lightPos = vec3(0, 5, 6);\n    lightPos.xz += vec2(sin(iTime), cos(iTime)) * 2.0;\n    \n    vec3 l = normalize(lightPos - p); // 点光源\n    vec3 n = GetNormal(p); \n    \n    float dif = clamp(dot(n, l), 0., 1.); //漫反射颜色\n    float d = RayMarch(p+n*SURF_DIST*2., l);\n    if (d < length(lightPos - p)) dif *= .1;\n    \n    return dif;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // vec2 uv = fragCoord/iResolution.xy;\n    \n    // vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    vec3 col = vec3(0);\n    \n    // Camera：ro 位置， rd 方向\n    vec3 ro = vec3(0, 1, 0);\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1));\n    \n    float d = RayMarch(ro, rd);\n    \n    vec3 p = ro + rd * d;\n    float dif = GetLight(p);\n    col = vec3(dif);\n    \n    col = pow(col, vec3(.4545));\n\n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}