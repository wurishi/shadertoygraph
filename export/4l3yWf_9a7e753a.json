{"ver":"0.1","info":{"id":"4l3yWf","date":"1540853923","viewed":282,"name":"Audio Veil","username":"Vihess","description":"Status: Needs work\n\nUsing a cheap particles to create a kind of veil.\n","likes":4,"published":1,"flags":96,"usePreview":0,"tags":["sound","fft","color","circle","audio","dynamic","buffer","particle","veil"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n    REMINDER: The browser might prevent the music from playing thus preventing the shader to work\n    Reload the page and interact(click) on the WebGL player as soon as possible\n\n\tFeel free to go into the \"common\" tab and toggle \n\tdefines to alter the particle behavior.\n\n\tI wanted to make particles that are not calculated according to time\n\tInstead, I aimed to make it dynamic to the music.\n\n\tParticle directions, life and colors are stored within \n\tthe 3 ints of the floats to pass it into the buffers.\n\n\tYou can remove the life value to use the color as life.\n\tDoing so you will have two more floats to use for\n\tadditional effects.\n\n\tTodo:\n    \tApply a noise to the life value\n\t\tAdditional Smoke around circle\n\t\tIrregular aura path\n*/\n\nvoid draw(out vec3 color, in vec2 coord)\n{\n    vec2 uv = xy2uv(coord, iResolution.xy);\n}\n\nvoid mainImage(out vec4 color, in vec2 coord)\n{\n    vec3 procFx, dynFx;\n    \n    dynFx = texelFetch(iChannel0, ivec2(coord), 0).rgb;\n#ifdef FX_VEIL\n    dynFx.rgb = decodeColor(dynFx.r);\n#endif\n    \n    draw(procFx, coord);\n    \n    color.rgb = clamp(\n        vec3(0.), vec3(1.),\n        dynFx.rgb\n        //+ procFx\n\t);\n    color.a = 1.;\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"MlfGzr","filepath":"https://soundcloud.com/carlos-eduardo-geraldo/final-fantasy-xv-soundtrack-ost-main-menu-theme","previewfilepath":"https://soundcloud.com/carlos-eduardo-geraldo/final-fantasy-xv-soundtrack-ost-main-menu-theme","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/*\n\tSound fetching buffer\n*/\n\n// BASE MUSIC: https://soundcloud.com/carlos-eduardo-geraldo/final-fantasy-xv-soundtrack-ost-main-menu-theme\n\n// SAMPLE MUSIC 1: https://soundcloud.com/lupinthebeatsmith/champloo-ending-theme-nujabes-tribute-soul-jazz-blues-sampled-instrumental\n// SAMPLE MUSIC 2: https://soundcloud.com/user-24066682/nier-automata-ost-amusement-park\n// SAMPLE MUSIC 3: https://soundcloud.com/miku-6/209-song-of-the-ancients-fate\n\n// VOICE SAMPLE: https://soundcloud.com/user-609222744/voice-sample-1\n// VOICE NOISE SAMPLE: https://soundcloud.com/imelda-castuera/sample-voice\n// VOICE NOISE LOWER SAMPLE: https://soundcloud.com/user-179930771-211108360/sample-voice\n// VOICE SHODAN: https://soundcloud.com/jim-darkmagic/system-shock-2-shodan-look-at-you-hacker-myfreemp3eu\n// VOICE AURA: https://soundcloud.com/ccpgames/sets/aura\n\nfloat Snd(in float idx, in float damp)\n{\n    return texture(iChannel0, vec2(idx, damp)).x;\n}\n\nvoid VoiceSnd(in float damp, out float snd, out float fq)\n{\n    snd = 0.;\n    for (float v, s = FFT_SCAN_START; s <= FFT_SCAN_END; s += FFT_STEP) {\n        v = Snd(s, FFT_FTCH);\n        snd = max(snd, v);\n        fq = v == snd ? s : fq;\n    }\n}\n\nvoid stackSnd(in float v, out vec4 stack)\n{ // TODO: STACK SOUND ANALYSIS + AVG all frequencies\n    stack.x = v;\n}\n\n\nvoid mainImage( out vec4 sndStack, in vec2 coords )\n{\n    float snd, fq;\n    VoiceSnd(FFT_FTCH, snd, fq);\n    \n    stackSnd(snd, sndStack);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"/*\n\tParticle logic buffer\n*/\n/*\n#define DEBUG\nvec4 GCOLOR;\n*/\n\n#ifdef FX_MOUSE\nvec2 muv;\n#endif\n\nfloat SndVal()\n{\n    vec4 stack = texelFetch(iChannel0, ivec2(0), 0);\n    \n    float vol = stack.x; // Volume\n    return vol;\n}\n\nvec3 voiceColor(in float x) \n{\n    return clamp(\n        vec3(\n            sin((x - 0.5) * PI),\n            sin(   x      * PI),\n            sin((x + 0.5) * PI)\n        ),\n        0.,\n        1.\n\t);\n}\n\nfloat avg(vec3 x)\n{\n    return (x.r + x.g + x.b) / 3.;\n}\n\n/*\nParticle:\n\tr: color ( rrrr rrrr | gggg gggg | bbbb bbbb ) <=> [(pow(2.,24.) - 1.), 0.]\n\tg: particleLife [0., 1.]\n\tb: N/A\n\ta: particleDirection [-PI, PI]\n\t\n*/\nvec4 fetchParticle(in ivec2 coord)\n{\n    ivec2 pCoord;\n    float mDot = 0., cDot = 0.;\n    vec2 pDir;\n    vec4 pV, v;\n    ivec2 adj[] = ivec2[]( // todo get rid of this\n        ivec2(-1, -1),\n        ivec2(-1, 0),\n        ivec2(-1, 1),\n        ivec2(0, -1),\n        //ivec2(0, 0), // We are checking adjacent pixels, for movement\n        ivec2(0, 1),\n        ivec2(1, -1),\n        ivec2(1, 0),\n        ivec2(1, 1)\n    );\n    \n    v = texelFetch(iChannel1, coord, 0);\n    for (int idx = adj.length() - 1; idx >= 0; --idx) {\n        pCoord = ivec2(coord + adj[idx]);\n        pV = texelFetch(iChannel1, pCoord, 0);\n        pDir = normalize(vec2(cos(pV.a), sin(pV.a)));\n        cDot = dot(pDir, normalize(vec2(pCoord - coord)));\n        if (pV.g > v.g && cDot < 0.95 && cDot > mDot) {\n            v = pV;\n            mDot = cDot;\n        }\n    }\n    \n \treturn v;\n}\n\nvoid draw(out vec4 color, in vec4 particle, in vec2 uv, in vec2 coord)\n{\n    float d, snd, auraDamp;\n    vec2 dir, ndir;\n    \n    dir = uv - vec2(0.);\n    ndir = normalize(dir);\n    \n    d = (CIRCLE_AURA_LEN - fract(length(dir) - CIRCLE_SIZE)) / CIRCLE_AURA_LEN; // Aura distance\n    d = max(0., d);\n    \n    snd = SndVal();\n    auraDamp = ((1. - snd) * (1. - CIRCLE_MIN_AURA_LEN));\n   \n    color.rgb = (d - auraDamp) * voiceColor(snd);\n    color.rgb = max(vec3(0.), color.rgb); // In case dampening is higher than aura\n\n#ifdef FX_PARTIAL_CIRCLE\n    color.rgb *= narrowDir(ndir, iTime);\n#endif\n\n#ifdef FX_MOUSE\n    if (iMouse.z >= 0.)\n    \tcolor.rgb += vec3(1) * (length(uv - muv) < 0.01 ? 1.: 0.);\n#endif\n    \n#ifdef FX_VEIL\n    float avgC = avg(color.rgb);\n    if (particle.g <= PARTICLE_THRESHOLD && avgC > PARTICLE_THRESHOLD)\n    { // Creation\n        particle.g = avgC;\n        particle.a = atan(-ndir.x, ndir.y) - (PI / 2.);\n\t}\n    else if (particle.g > PARTICLE_THRESHOLD)\n    { // Update      \n        color.rgb += decodeColor(particle.r) * PARTICLE_FADE;\n        color.rgb = min(vec3(1), color.rgb);\n        #ifndef FX_VEIL_SMOKY\n        particle.a = atan(-ndir.x, ndir.y) - (PI / 2.);\n        #endif\n        particle.g = -1.;\n    }\n    \n    color.r = encodeColor(color.rgb);\n    color.g = (particle.g >= 0. ? particle.g : color.g) * PARTICLE_FADE;\n    color.b = 0.;\n    color.a = particle.a;\n    #ifdef FX_VEIL_SMOKY\n    color.a = mod(color.a - snd * 5. * PI, 2. * PI);\n    #endif\n#endif\n}\n\nvoid mainImage(out vec4 color, in vec2 coord)\n{\n    vec2 uv = xy2uv(coord, iResolution.xy);\n    #ifdef FX_MOUSE\n    muv = xy2uv(iMouse.xy, iResolution.xy);\n\t#endif\n    draw(\n        color,\n        fetchParticle(ivec2(coord)),\n        uv,\n        coord\n   \t);\n    \n    #ifdef DEBUG\n    if (GCOLOR.a != 0.)\n        #ifdef FX_VEIL\n    \tcolor.r = encodeColor(GCOLOR.rgb);\n    \t#else\n    \tcolor = GCOLOR;\n    \t#endif\n    #endif\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"/* Effects */\n#define FX_VEIL\n#define FX_VEIL_SMOKY\n//#define FX_MOUSE\n\n/* Drawing */\n#define MAX_DIM 0.5\n\n#define CIRCLE_SIZE (MAX_DIM - 0.25)\n#define CIRCLE_AURA_LEN (MAX_DIM - 0.3)\n#define CIRCLE_MIN_AURA_LEN 0.3\n\n#define PARTICLE_FADE 0.97\n#define PARTICLE_THRESHOLD 0.05\n\n#define FX_PARTIAL_CIRCLE 250.\n\n/* Internal */\n#define PI 3.14159\n\n#define FFT_FTCH 0.2\n#define FFT_STEP 0.05\n#define FFT_SCAN_START 0.15\n#define FFT_SCAN_END 1.\n\nfloat encodeColor(in vec3 color)\n{\n    color *= 100.;\n    ivec3 ic = ivec3(color);\n    \n    return float(\n        (ic.r << 16) |\n        (ic.g << 8) |\n        (ic.b)\n    );\n}\n\n\n/*\n\tReminder for (en|de)codeColor():\n\t32-bit IEEE-754 representation has only 24 bits for the significand\n*/\n\nvec3 decodeColor(in float color)\n{\n    int ic = int(color);\n    \n    return vec3(\n        ivec3(            \n            (ic & 16711680) >> 16,\n            (ic & 65280) >> 8,\n            (ic & 255)\n        )\n   \t) / 100.;\n}\n\nfloat narrowDir(in vec2 dir, in float seed)\n{\n    float n = clamp(abs(dot(dir, normalize(vec2(cos(-seed), sin(-seed)))) ), 0., 1.);\n    return min(1., exp((FX_PARTIAL_CIRCLE * n) - FX_PARTIAL_CIRCLE));\n}\n\nvec2 xy2uv(in vec2 coord, in vec2 res)\n{\n    vec2 uv = coord / res.xy;\n    uv = (coord / res.xy) - 0.5;\n    uv.x *= res.x / res.y;\n    \n    return uv;\n}","name":"Common","description":"","type":"common"}]}