{"ver":"0.1","info":{"id":"43XcRr","date":"1725709452","viewed":105,"name":"Simple Wave Shader","username":"monkeyworks","description":"// Adapted Wave Shader from React Three Fiber - Modified: No Tiling\nhttps://codesandbox.io/p/sandbox/ib0jc","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["wave","rgb"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Adapted Wave Shader from React Three Fiber - No Tiling\n\nvec3 palette(float t) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.263, 0.416, 0.557);\n    return a + b * cos(6.28318 * (c * t + d));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 resolution = iResolution.xy;\n    float time = iTime * 0.5; // Slowed down the time factor\n    vec2 pointer = iMouse.xy / resolution;\n\n    vec2 uv = (fragCoord.xy * 2.0 - resolution.xy) / resolution.y;\n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.0);\n    \n    // Removed the fract function to eliminate tiling\n    uv = sin(uv * 0.5 - time * 0.2) * 0.5; // Adjusted scale and added time-based movement\n    uv -= pointer * 2.0 - 1.0; // Adjusted pointer influence\n    \n    float d = length(uv) * exp(-length(uv0));\n    vec3 col = palette(length(uv0) + time * 0.4);\n    d = sin(d * 4.0 + time) / 4.0; // Reduced frequency for smoother waves\n    d = abs(d);\n    d = pow(0.05 / d, 1.5); // Adjusted power for softer edges\n    finalColor += col * d;\n    \n    // Add a subtle glow\n    finalColor += col * 0.1 * smoothstep(0.5, 0.0, length(uv0));\n    \n    fragColor = vec4(finalColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}