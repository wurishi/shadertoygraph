{"ver":"0.1","info":{"id":"3s3SDH","date":"1571912069","viewed":117,"name":"breathing plastic","username":"oskanberg","description":"Mountains with shade and and specular lighting","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\n\n#define PI 3.14159265359\nconst float SCALE = 75.;\nconst int MAX_STEPS = 500;\nconst vec2 DELTA_X = vec2(0.1, 0);\nconst vec2 DELTA_Y = vec2(0.1, 0);\nconst vec4 COLOUR = vec4(.4, .5, .7, 0.);\n\nfloat heightAt(vec2 p) {\n    float t = texture(iChannel0, p/SCALE).x * 1.5;\n    return t * sin(iTime * 2. + t * p.y / 2000.) * 0.8;\n}\n\nvec3 normal(vec2 p) {    \n    float f = heightAt(p + DELTA_Y);\n    float b = heightAt(p - DELTA_Y);\n    \n    float l = heightAt(p - DELTA_X);\n    float r = heightAt(p + DELTA_X);\n         \n    return normalize(vec3(l-r, b-f, .05));\n}\n\nmat2 rotate2d(float a) {\n    return mat2(\n        cos(a), -sin(a),\n        sin(a), cos(a)\n    );\n}\n\nfloat enlight(vec3 p, vec3 lightPos, vec3 eye) {\n    vec3 norm = normal(p.xy);\n    vec3 light = normalize(lightPos - p);\n    float diffuse = dot(light, norm);\n    \n    vec3 reflection = normalize(reflect(light, norm));\n    float specular = dot(reflection, normalize(eye));\n    specular = max(specular, 0.);\n    specular = pow(specular, 10.);\n    \n    return diffuse * 1.1 + specular;\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord)\n{\n    // normalise to [-0.5, +0.5]\n    vec2 nFragCoord = fragCoord / iResolution.xy - 0.5;\n    vec2 nMouse = iMouse.xy / iResolution.xy - 0.5;\n    //light.x = sin(nMouse.x)*PI;\n    //light.z -= sin(nMouse.y/16.)*PI;\n    \n    // start above the ground\n    vec3 lightPos = vec3(1.2, 3. + iTime/2.0, 2.);\n    vec3 ray = vec3(1., 0. + iTime/2.0, 1.5);\n    vec3 direction = normalize(vec3(nFragCoord.x, 0.3, nFragCoord.y - .2)) / 500.;\n    \n    float steps;\n    float height;\n    while (steps++ < float(MAX_STEPS)) {\n        height = ray.z - heightAt(ray.xy);\n        \n        if (height <= 0.0) {\n            float l = enlight(ray, lightPos, direction);\n            fragColor = mix(l * COLOUR, -texture(iChannel0, ray.xy), 0.2);\n        \treturn;\n        }\n \n        ray += direction * steps * 0.02;\n    }\n    \n    fragColor = 1. - vec4(0.1 + height/2., 0.3 + height/5., 0.5 + height/10., 0.);\n}\n","name":"Image","description":"","type":"image"}]}