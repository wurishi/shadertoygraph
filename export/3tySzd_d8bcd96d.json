{"ver":"0.1","info":{"id":"3tySzd","date":"1583335595","viewed":727,"name":" glitch boi (fork)","username":"vadim_omega","description":"Fork of boysx's glitch shader.\n\nChanges: no rgb splitting, less pronounced glitches.\n\nSame license as original - CC BY-NC-SA 3.0 (default on shadertoy)\n\nOriginal: https://www.shadertoy.com/view/MltBzf","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["glitch","vhs"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"    float random(vec2 p)\n    {\n        float t = floor(iTime * 20.) / 10.;\n        return fract(sin(dot(p, vec2(t * 12.9898, t * 78.233))) * 43758.5453);\n    }\n\n    float noise(vec2 uv, float blockiness)\n    {\n        vec2 lv = fract(uv);\n        vec2 id = floor(uv);\n\n        float n1 = random(id);\n        float n2 = random(id+vec2(1,0));\n        float n3 = random(id+vec2(0,1));\n        float n4 = random(id+vec2(1,1));\n\n        vec2 u = smoothstep(0.0, 1.0 + blockiness, lv);\n\n        return mix(mix(n1, n2, u.x), mix(n3, n4, u.x), u.y);\n    }\n\n    float fbm(vec2 uv, int count, float blockiness, float complexity)\n    {\n        float val = 0.0;\n        float amp = 0.5;\n\n        while(count != 0)\n        {\n          val += amp * noise(uv, blockiness);\n            amp *= 0.5;\n            uv *= complexity;\n            count--;\n        }\n\n        return val;\n    }\n\n    const float glitchAmplitude = 0.2; // increase this\n    const float glitchNarrowness = 4.0;\n    const float glitchBlockiness = 2.0;\n    const float glitchMinimizer = 10.0; // decrease this\n\n    void mainImage( out vec4 fragColor, in vec2 fragCoord )\n    {\n        // Normalized pixel coordinates (from 0 to 1)\n        vec2 uv = fragCoord/iResolution.xy;\n        vec2 a = vec2(uv.x * (iResolution.x / iResolution.y), uv.y);\n        vec2 uv2 = vec2(a.x / iResolution.x, exp(a.y));\n        vec2 id = floor(uv * 8.0);\n        //id.x /= floor(texture(iChannel0, vec2(id / 8.0)).r * 8.0);\n\n        // Generate shift amplitude\n        float shift = glitchAmplitude * pow(fbm(uv2, int(random(id) * 6.), glitchBlockiness, glitchNarrowness), glitchMinimizer);\n\n        // Create a scanline effect\n        float scanline = abs(cos(uv.y * 400.));\n        scanline = smoothstep(0.0, 2.0, scanline);\n        shift = smoothstep(0.00001, 0.2, shift);\n\n        // Apply glitch\n        float randShift = random(id) * shift;\n        float colR = texture(iChannel0, vec2(uv.x - shift, uv.y)).r * (1. - shift) + randShift;\n        float colG = texture(iChannel0, vec2(uv.x - shift, uv.y)).g * (1. - shift) + randShift;\n        float colB = texture(iChannel0, vec2(uv.x - shift, uv.y)).b * (1. - shift) + randShift;\n        // Mix with the scanline effect\n        // vec3 f = vec3(colR, colG, colB);\n        vec3 f = vec3(colR, colG, colB) - (0.1 * scanline);\n\n        // Output to screen\n        fragColor = vec4(f, 1.0);\n    }","name":"Image","description":"","type":"image"}]}