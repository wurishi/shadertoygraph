{"ver":"0.1","info":{"id":"ddjfWG","date":"1690104218","viewed":68,"name":"Random Voxels","username":"purton","description":"Amanatides & Woo (1987)\n[url]https://lodev.org/cgtutor/raycasting.html[/url]\n[url]https://www.shadertoy.com/view/4dX3zl[/url]\n[url]https://www.shadertoy.com/view/7dK3D3[/url]","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["3d","raycasting","voxel","random","textured"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sfGRr","filepath":"/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","previewfilepath":"/media/ap/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","type":"volume","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 rotate2d(in float a)\n{\n    float c = cos(a), s = sin(a);\n    return mat2(c, -s, s, c);\n}\n\nbool getVoxel(in ivec3 p) {\n    float r = texture(iChannel1, (vec3(p) + vec3(0.5)) / iChannelResolution[1]).r;\n    return r < (0.10 - cos(iTime * 0.1) * 0.095);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 screenPos = (fragCoord.xy / iResolution.xy) * 2.0 - 1.0;\n    float aspect = iResolution.x / iResolution.y;\n    \n    vec3 cameraDir = vec3(0.0, 0.0, 2.25);\n\tvec3 cameraPlaneU = vec3(aspect, 0.0, 0.0);\n\tvec3 cameraPlaneV = vec3(0.0, 1.0, 0.0);\n    vec3 rayPos = vec3(2.5, 1.5 + sin(iTime * 0.25) * 0.05, 2.5);\n\tvec3 rayDir = normalize(cameraDir + cameraPlaneU * screenPos.x + cameraPlaneV * screenPos.y);\n\trayDir.xz *= rotate2d(-iTime * 0.05);\n    \n\tivec3 mapPos = ivec3(floor(rayPos));\n    ivec3 rayStep = ivec3(sign(rayDir));\n\n\tvec3 deltaDist = abs(vec3(length(rayDir)) / rayDir);\n\tvec3 sideDist = (sign(rayDir) * (vec3(mapPos) - rayPos) + (sign(rayDir) * 0.5) + 0.5) * deltaDist; \n\t\n\tbvec3 mask;\n\t\n\tfor (int i = 0; i < 192; i++) {\n\t\tif (getVoxel(mapPos)) break;\n#if 1\n        // https://www.shadertoy.com/view/4dX3zl\n        mask = lessThanEqual(sideDist.xyz, min(sideDist.yzx, sideDist.zxy));\n        sideDist += vec3(mask) * deltaDist;\n        mapPos += ivec3(vec3(mask)) * rayStep;\n#else\n        // Amanatides & Woo (1987)\n        if (sideDist.x < sideDist.y) {\n            if (sideDist.x < sideDist.z) {\n                sideDist.x += deltaDist.x;\n                mapPos.x += rayStep.x;\n                mask = bvec3(true, false, false);\n            }\n            else {\n                sideDist.z += deltaDist.z;\n                mapPos.z += rayStep.z;\n                mask = bvec3(false, false, true);\n            }\n        }\n        else {\n            if (sideDist.y < sideDist.z) {\n                sideDist.y += deltaDist.y;\n                mapPos.y += rayStep.y;\n                mask = bvec3(false, true, false);\n            }\n            else {\n                sideDist.z += deltaDist.z;\n                mapPos.z += rayStep.z;\n                mask = bvec3(false, false, true);\n            }\n        }\n#endif\n\t}\n\t\n    float d = length(vec3(mask) * (sideDist - deltaDist));\n    vec3 dst = rayPos + rayDir * d; \n    vec2 uv = mask.x ? dst.zy : mask.y ? dst.xz : dst.xy;\n    vec3 light = vec3(length(vec3(mask) * vec3(0.25, 1.0, 0.5)));\n    vec3 color = light * texture(iChannel0, uv).rgb;\n    \n    float fog = max(0.0, d * 0.005);\n\tfragColor.rgb = color + fog;\n}","name":"Image","description":"","type":"image"}]}