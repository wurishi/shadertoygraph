{"ver":"0.1","info":{"id":"ltBBzt","date":"1516997404","viewed":301,"name":"Sand2d","username":"jt","description":"Sand2d - A simple cellular automaton simulating falling grains of sand. Click mouse to move source (hold space to delete sand).","likes":6,"published":1,"flags":48,"usePreview":0,"tags":["2d","cellular","sand","automaton"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    //vec2 uv = fragCoord.xy / iResolution.xy;\n    fragColor = vec4(/*vec3(1.0,0.5,0) * */ texelFetch( iChannel0, ivec2(fragCoord), 0 ).xxx, 1.0);\n    //fragColor = texture(iChannel1, uv) * vec4(texelFetch( iChannel0, ivec2(fragCoord), 0 ).xxx, 1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdXGzr","filepath":"/media/a/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg","previewfilepath":"/media/ap/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Sand2d - written 2018 by JT.\n// (https://www.shadertoy.com/view/ltBBzt)\n// A simple cellular automaton simulating falling grains of sand.\n// Click mouse to move source.\n\nbool Cell(ivec2 p)\n{\n    ivec2 r = ivec2(textureSize(iChannel0, 0));\n    p.x = (p.x + r.x) % r.x;\n\n    if(p.y >= r.y)\n        return false;\n    if(p.y < 0)\n        return true;\n    \n    //if(p == ivec2(iMouse.zw))\n    if(length(vec2(p) - iMouse.xy) < 16.0)\n    {\n        return texelFetch(iChannel2, ivec2(32,0), 0 ).x < 0.5; // true;\n    }\n   \n    if(iTime < 5.0 && length(vec2(p - ivec2(iTime * iResolution.x / 2.0, iResolution.y * 7.0 / 8.0))) < 8.0)\n        return true;\n     \n    return texelFetch(iChannel0, p, 0 ).x > 0.5;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    ivec2 p = ivec2(fragCoord);\n    ivec2 up = ivec2(0, +1);\n    ivec2 down = ivec2(0, -1);\n    //int d0 = (p.y % 2) * 2 - 1;\n    int d0 = (iFrame % 2) * 2 - 1;\n    ivec2 side0 = ivec2(d0, 0);\n    int d1 = -d0;\n    ivec2 side1 = ivec2(d1, 0);\n\n    bool self = Cell(p);\n    bool above = Cell(p + up);\n    bool below = Cell(p + down);\n    bool diag = Cell(p + up + side0);\n    bool anti = Cell(p + down - side0);\n    bool next = Cell(p + side0);\n    bool prev = Cell(p - side0);\n    \n    float f = self ? 1.0 : 0.0;\n    if(self)\n    {\n        if(below)\n        {\n            if(!anti)\n            {\n                f = 0.0;\n            }\n        }\n        else\n        {\n            f = 0.0;\n        }\n    }\n    else\n    {\n    \tif(above)\n        {\n            f = 1.0;\n        }\n        else\n        {\n     \t\tif(diag && next)\n            {\n                f = 1.0;\n            }\n        }\n    }\n\n\n    if(iFrame == 0)\n    {\n        f = 0.0;\n        //f = step(0.5, texture(iChannel1, vec2(p) / iResolution.xy).b);\n        vec2 q = vec2(p) / iResolution.xy;\n        //f = step(length(q - vec2(0.8, 0.8)), 0.02);\n        q.x = 1.0 - abs(2.0 * q.x - 1.0);\n        f += /* p.y % 2 == 0 ? 0.0 : */ max(step(0.5, q.x - q.y), step(abs(q.x - 1.0), 0.01));\n        //f = min(f, step(0.05, q.y));\n        f = min(f, step(0.2, length(q - vec2(1, 0))));\n        \n        //float s = 0.0;\n        //for(float h = 0.0; h < 1.0; h += 0.01)\n        //    s += step(0.5, texture(iChannel1, vec2(float(p.x) / iResolution.x, h)).b);\n        //f = step(float(p.y) / iResolution.y, s * 0.005);\n    }\n\n\tfragColor = vec4(f);\n}\n","name":"Buf A","description":"","type":"buffer"}]}