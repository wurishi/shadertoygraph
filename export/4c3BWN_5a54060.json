{"ver":"0.1","info":{"id":"4c3BWN","date":"1733321673","viewed":55,"name":"Bouncy bouncing balls","username":"Sjorszini","description":"Bouncing balls. First shadertoy ","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["balls"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdBall(in vec2 p, in float r) {\n    return length(p) - r;\n}\n\nvoid boxBounce(in vec2 b, in vec2 p0, in vec2 v0, in float t, out vec2 pos) {\n     vec2 q = 2.0 * b - mod(p0 + v0 * t + b, 4.0 * b);\n     pos = b - abs(q);//, vel = v0 * sign(q);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * 4.0;\n    // the uv y coord is now between -2 and 2.\n    // the uv x coord of the middle square is now between -2 and 2\n    // the uv x coord is between +-2*iResolution.x/iResolution.y, which is a slightly larger range if the screen is in landscape mode\n    float unit = 8.0 / iResolution.y;\n    vec3 color = vec3(0.0);\n\n    vec2 boxSize = vec2(2.0, 1.5);\n    float ballSize = 0.1;\n    \n    const int N =60; //Number of balls\n    \n    //Position and velocity arrays\n    vec2 p[N];\n    vec2 v[N];\n    \n    //Initial conditions\n    vec2 p0[N];\n    vec2 v0[N];\n    for(int i=0; i<N; i+=1){\n        p0[i] = vec2(-0.6+0.05*float(i), 0.4+0.08*float(i)); //starting positions\n        v0[i]= vec2(2.0-0.05*float(i), 1.88+0.03*float(i)); //initial velocities\n    }\n\n    //draw box:\n    vec2 q = abs(uv) - boxSize;\n    //the following mixes black and white with a ratio from 'unit' to 0 given by smoothstep()\n    //so we only get some white when |max(q.x,q.y)|<unit and max white when |max(q.x,q.y)|<0 (i.e. = 0)\n    color = mix(vec3(0.0), vec3(1.0), smoothstep(unit, 0.0, abs(max(q.x, q.y))));\n\n\n    //update and draw balls\n    vec2 pos;\n    for(int i=0; i<N; i+=1){\n         boxBounce(boxSize - ballSize, p0[i], v0[i], iTime, p[i]);\n     }\n\n    vec2 VectorFromBallToCoords[N];\n    for(int i=0; i<N; i+=1){\n         VectorFromBallToCoords[i] = uv - p[i];\n     }\n    \n   \n    for(int i=0; i<N; i+=1){\n        color = mix(color, vec3(1, 0, 0), smoothstep(unit, 0.0, sdBall(VectorFromBallToCoords[i], ballSize)));\n    }\n\n    //update pixels\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}