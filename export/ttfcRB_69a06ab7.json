{"ver":"0.1","info":{"id":"ttfcRB","date":"1592332916","viewed":102,"name":"OrbitTrap Mandelbrot","username":"cheasify","description":"Simple orbit trap with a few trap choices: point, line, circle. I will probably write some more later or multiple simultaneously. On screen is a moving circular trap. You can look at the others by uncommenting sections in orbitMeasure.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fractal","mandelbrot","orbittrap","pretty"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//fast and ez\nvec3 color(float x){\n\tx=sin(x);//so it loops nicely\n    //x=abs(sin(x));//limits colors \n    //bezier, you can rearange the functions for different color combos but this one is best\n    float r=(1.0-x)*(1.0-x);\n    float g=x*x;\n    float b=2.0*(1.0-x)*x;\n    return vec3(r,g,b);\n}\n\nfloat orbitMeasure(vec2 point){\n    //point \n\t//return distance(point,vec2(-1,0));\n    \n    //shifted line \n    //vec2 s=vec2(-2,0);//offset\n    //vec2 dir=vec2(cos(iTime),sin(iTime));//direction of line\n    //float d=dot(point-s,dir)/length(dir);\n    //return sqrt(length(point-s)*length(point-s)-d*d);\n    \n    //shifted circle\n    //note the point is just a 0 radius circle \n    vec2 c=2.1*vec2(cos(iTime)-.25,sin(iTime));// this looks cool\n    //vec2 c=vec2(1,0);\n    float r=1.4;\n    return abs(r-length(point-c));\n    \n    //any function that takes in a 2d vector and outputs a scalar, preferably positive scalars \n}\n\n//(x+yi)^2=(x+yi)(x+yi)=x^2+(yi)^2+2xyi since i^2=-1 then =x^2-y^2+2xyi \nvec2 square(vec2 n){\n\treturn vec2(n.x*n.x-n.y*n.y,2.0*n.x*n.y);\n}\n\n//const vec2 center=vec2( -0.743643887037158704752191506114774, 0.131825904205311970493132056385139);\nconst vec2 center= vec2(-1,0);\nconst int maxiter=100;\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv=1.5*((2.*fragCoord-iResolution.xy)/iResolution.y);\n    //uv/=exp2(iTime);\n    uv+=center;\n    \n    float mini=1e20f;\n    vec2 value=vec2(0);\n    for(int i=0;i<maxiter;i++){\n        value=square(value)+uv;\n    \tmini=min(orbitMeasure(value),mini);   \n    }\n   \tfragColor=vec4(color(length(mini+2.5)*2.5)*.8,1);\n}","name":"Image","description":"","type":"image"}]}