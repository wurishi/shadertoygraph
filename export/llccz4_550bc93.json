{"ver":"0.1","info":{"id":"llccz4","date":"1531750858","viewed":227,"name":"Drifting Musical Squares","username":"Firzen_","description":"Playing around with this technique, next stop will be doing the same with SDF raymarching dodecahedra","likes":1,"published":1,"flags":96,"usePreview":0,"tags":["visualization","music"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define pi (acos(-1.))\n\nvec2 rot(vec2 uv, float angle)\n{\n    return vec2(uv.x*cos(angle)+uv.y*sin(angle),\n                uv.x*(-sin(angle)) + uv.y*cos(angle));\n}\n\nfloat inSquare(vec2 uv, float angle, vec2 off, float size, float bor)\n{\n    uv -= off;\n    uv = rot(uv, -angle);\n    float inX = smoothstep(size/2., size/2.-bor, abs(uv.x));\n    float inY = smoothstep(size/2., size/2.-bor, abs(uv.y));\n    return min(inX, inY);\n}\n\nvec2 path(float t)\n{\n    return vec2(cos(t), sin(t/3.)/1.3+0.1)/2.;\n}\n\nvec2 offset(float t, float idx, float maxF)\n{\n    return vec2(cos(t+idx/maxF*pi*2.), sin(t+idx/maxF*pi*2.));\n}\n\nfloat inSquares(vec2 uv)\n{\n    float ins = 0.;\n    const float rotScale = 0.2;\n    const float steps = 70.;\n    \n    float curLine = mod(iTime*60., iResolution.y);\n    vec2 sampleOffset = vec2(0,curLine/iResolution.y);\n        \n    for(float x=0.; x<steps; x++)\n    {\n        float sz = (steps-x);\n        float t = floor((iTime+x/60.)*60.)/60.;\n        for(float y=0.; y<10.; y++)\n        {\n            vec2 samplePos = sampleOffset-vec2(0.0005-y/11., sz/iResolution.y);\n            samplePos.y += 1.;\n            samplePos.y = mod(samplePos.y, 1.);\n            float scale = texture(iChannel0, samplePos).r/10.;\n            vec2 off = offset(t, y, 10.)*scale;\n            ins = max(ins, x/steps*inSquare(uv, (t+y)*rotScale, -path(t) + off, scale, 0.01));\n        }\n    }\n    return ins;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.y;\n    uv -=vec2(iResolution.x, iResolution.y)/(2.*iResolution.y);\n    \n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    float curLine = mod(iTime*60., iResolution.y);\n    vec2 sampleOffset = vec2(0,curLine/iResolution.y);\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv+sampleOffset);\n    \n    float ins = inSquares(uv);\n    \n    fragColor = vec4(texture(iChannel0, fragCoord/iResolution.xy).rgb+ins, 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sjXzt","filepath":"https://soundcloud.com/pvnova/evolution-of-get-lucky-daft","previewfilepath":"https://soundcloud.com/pvnova/evolution-of-get-lucky-daft","type":"musicstream","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float depth = texture(iChannel1, vec2(uv.x, 0)).r;\n    vec4 color = texture(iChannel0, uv);\n    \n    if(abs(mod(iTime*60., iResolution.y)-fragCoord.y)<1.1)\n    \tfragColor = vec4(depth,0.0,0.0,1.0);\n    else\n        fragColor = color;\n}","name":"Buf A","description":"","type":"buffer"}]}