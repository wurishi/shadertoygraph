{"ver":"0.1","info":{"id":"flV3WD","date":"1637735874","viewed":95,"name":"Spiral Interference","username":"akohdr","description":"Three spaced phased oscillators producing interference spiral.\nArtifacts from sin() approximation result in striping on the spiral.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["spiral","interference"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Created by Andrew Wild - akohdr/2021\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n#define OSC1 sin\n#define OSC2 taylorSin_pre           // produces approximation stripes (see common)\n\nvoid mainImage( out vec4 k, in vec2 p )\n{\n    vec2 c=p-iR.xy/2.; c/=iR.y;    // centered coords\n    \n    float t = iTime*6.,            // timebase\n          y = 1.73205,// sqrt(3.), // height of triangle side 2\n          f = 50.25,  // 8.*TAU,   // frequency of oscillators\n          d = 0.0083; // 1./120.   // spacing of two offset oscillators\n    \n    // three oscilators offset on vertices of equilateral triangle \n    // phased one third of cycle apart \n    vec3 v = vec3( f * length(c               )-t,\n                   f * length(c - d*vec2( 1,y))-t - TAU_3,      // 2Ï€/3\n                   f * length(c - d*vec2(-1,y))-t + TAU_3 );\n                   \n    // switch oscillator implementation to approximation\n    vec3 o = iTime<16. ? OSC1(v) : OSC2(v);\n\n    // interference sum produces a spiral\n    vec3 i = vec3(o.r + o.g + o.b);\n    \n    // fade between oscillators and interference sum\n    k = vec4(sin(t/20.)*o-sin(t/30.)*i, 1);\n    \n// after time lock onto pink/yel/cyan form works best with taylorSin_pre\nif (iTime>28.) k = vec4(.4*o + .6*i, 1)*2.;\n\n\n//    k = vec4(o, 1); // just the oscilators\n//    k = vec4(i, 1); // just the spiral\n\n}\n\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define TAU   6.2831853\n#define TAU_3 2.0943951\n#define iR iResolution\n\nfloat taylorSin_pre(float x) \n{ \n    x = mod(x,TAU);\n    float a=x, y=x*x;\n    \n    x*=y; a-=x/6.; \n    x*=y; a+=x/120.; \n    x*=y; a-=x/5040.; \n    x*=y; a+=x/362880.; \n    x*=y; a-=x/39916800.; \n//    x*=y; a+=x/6227020800.; \n//    x*=y; a-=x/1307674368000.;\n//    x*=y; a+=x/355687428096000.; \n//    x*=y; a-=x/121645100408832000.;\n//    x*=y; a+=x/51090942171709440000.; \n//    x*=y; a-=x/25852016738884976640000.;\n//    x*=y; a+=x/15511210043330985984000000.; \n    \n    return a;\n}\n\n#define SIN taylorSin_pre\nvec2 SIN(vec2 v) { return vec2(SIN(v.x),SIN(v.y)); }\nvec3 SIN(vec3 v) { return vec3(SIN(v.x),SIN(v.y),SIN(v.z)); }\nvec4 SIN(vec4 v) { return vec4(SIN(v.x),SIN(v.y),SIN(v.z),SIN(v.w)); }\n","name":"Common","description":"","type":"common"}]}