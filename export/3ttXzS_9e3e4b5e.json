{"ver":"0.1","info":{"id":"3ttXzS","date":"1581218813","viewed":59,"name":"Julia Set RGF","username":"DaMastaCoda","description":"Simple Julia shader. \nFirst try at glsl.\nmodification of the Mandelbrot shader","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["mandelbrotimaginarycomplex"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-iResolution.xy/2.0f)/iResolution.x*4.0f;\n    vec2 z = uv;\n    vec2 mouse = iMouse.xy;\n    if(iFrame == 0 || length(iMouse.xy) == 0.0f) {\n        mouse = vec2(0.5f, 0.5f)*iResolution.xy;\n    }\n    for(int i = 0; i < 1000; i++) {\n        z.xy = vec2(z.x*z.x-z.y*z.y,z.x*z.y*2.0f) + (mouse - iResolution.xy/1.6f)/iResolution.xy*4.0f;\n    }\n\n    // Time varying pixel color\n\tvec3 col = hsv2rgb(vec3((length(z)+iTime)/10.0f,1.0f,1.0f) );\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}