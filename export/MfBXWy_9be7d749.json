{"ver":"0.1","info":{"id":"MfBXWy","date":"1706757897","viewed":109,"name":"BoxShadow shader for TSODING","username":"weeki","description":"this shader generates a box shadow mask.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["boxshadow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Box Shadow Generator for TSODING\n//\n// to use it, you may wanna store the color\n// fragColor = vec4(decayAlphaMask*shadowColor, decayAlphaMask);\n// like this into a texture and then render that texture \n// with raylib.\n\n#define EPSLON .001\n\n//// [Parameters To Play With] \\\\\\\\\n\n// box size\nfloat width       = 200.0;\nfloat height      = 300.0;\n\nvec3 shadowColor  = vec3(0.3, 0.3, 0.3);\nfloat shadowSize  = 20.0;\nfloat amount      = 3.0;\nfloat opIntensity = 0.2;\n\n// for visualization only\nvec3 backgroundColor    = vec3(0.9,0.9,0.9);\nvec2 boxShadowPosOffset = vec2(0.0, 0.0);\n\n\n\nfloat sdBox(vec2 pos, float width, float height) {\n    vec2 boxSize = vec2(width, height);\n    vec2 halvedSize = boxSize / 2.0;\n    \n    // current pos is in ndc, we want to remap that to screen space coords\n    // just for convenience\n    pos = (pos+.5)*iResolution.xy;\n    \n    \n    // distance field of a rectangle.\n    vec2 edge = abs(pos - boxShadowPosOffset - halvedSize - vec2(shadowSize)) - halvedSize;\n    return length(max(edge, vec2(0.0)));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    float d = sdBox(uv - .5, width, height);\n\n    float decayRate = 0.0;\n\n    if (shadowSize <= 0.0)\n        decayRate = 1.0;\n    else\n        decayRate = -log(EPSLON)/pow(shadowSize, 2.0); // this math to just make the shadow end at shadowSize\n\n     float decayAlphaMask = opIntensity*exp(-decayRate*1.0/amount*pow(d,2.0));\n     \n     if (d <= 0.0)\n         fragColor = vec4(backgroundColor, 1.0);\n     else\n         // visualization only\n         fragColor = vec4(mix(backgroundColor, decayAlphaMask*shadowColor, decayAlphaMask), 1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}