{"ver":"0.1","info":{"id":"DdB3DV","date":"1668143966","viewed":60,"name":"Plague","username":"murf","description":"plague","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["plague"],"hasliked":0,"parentid":"cdB3DV","parentname":"Better call pest control, ..."},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec3 colOn = vec3(1.0,0.0,0.0);\nvec3 colOff = vec3(0.0);\nconst float mapp = 8.0; //max ants per pixel\n\nuvec3 pcg3d(uvec3 v){\n\n    v = v * 1664525u + 1013904223u;\n\n    v.x += v.y*v.z;\n    v.y += v.z*v.x;\n    v.z += v.x*v.y;\n\n    v ^= v >> 16u;\n\n    v.x += v.y*v.z;\n    v.y += v.z*v.x;\n    v.z += v.x*v.y;\n\n    return v;\n}\n\nuvec3 hash(vec2 s)\n{\t\n    uvec4 u = uvec4(s, uint(s.x) ^ uint(s.y), uint(s.x) + uint(s.y)); // Play with different values for 3rd and 4th params. Some hashes are okay with constants, most aren't.\n    u *= uvec4(1,1,iFrame,iFrame);\n    return pcg3d(u.xyz);\n}\n\nfloat hash13(vec3 p3) \n{\n\tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nivec2 manhattan(vec2 dir)\n{\n    if(abs(dir.y)>abs(dir.x)) return ivec2(0.0,dir.y/abs(dir.y));\n    else return ivec2(dir.x/abs(dir.x), 0.0);    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec2 seed = fragCoord;    \n    uvec3 hash = hash(seed);\n    vec3 randDir = vec3(hash) * (1.0/float(0xffffffffu));   \n    vec3 col = colOff;\n    float total = 0.0;\n    float thisPx = texelFetch(iChannel0, ivec2(fragCoord), 0).r;\n    \n    if(iFrame==0)\n    {\n        uvec2 V = uvec2(fragCoord);\n        float h = hash13( vec3(fragCoord,iFrame) );\n\n        if(h>0.9999)// && length(uv-0.5)<=0.025)\n            col = colOn;\n        //if(fragCoord==iResolution.xy*0.5)\n        //    col = vec3(uv,0.0);\n        //total++;\n    }\n    else\n    {\n        if(thisPx<0.5)\n        {\n            for(int i = -1; i <= 1; i++)\n            for(int j = -1; j <= 1; j++)\n                if(!(i==0 && j==0) && ((i==0)||(j==0)))\n                    if(texelFetch(iChannel0, ivec2(fragCoord)+ivec2(i,j), 0).r > 0.5)\n                        //if(ivec2(i,j)-manhattan(randDir.xy)==ivec2(0.0))\n                        {\n                            col = randDir;//colOn;//vec3(randDir.xy,0); \n                            total++;\n                        }\n        }\n    }\n    \n    fragColor = vec4(col, min(total,mapp)/mapp);\n}","name":"Buffer A","description":"","type":"buffer"}]}