{"ver":"0.1","info":{"id":"4clSRX","date":"1705521692","viewed":102,"name":"Kaleidoskop Pattern","username":"amninme","description":"Kaleidoskop Pattern","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["sacredgeometry"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvec3 palette( float t0, float t1 , float t2, float t3, float t4, float t5, float t6, vec2 uv) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.8, 0.7, 0.7);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.263,0.416,0.557);\n   \n    return cos( 3.28318*(c+t0+t1+t2+t3+t4+t5+t6+d));\n    //return  b*sin( 43.28318*(c*t0*t1*t2*t3*t4*t5*t6+d) );\n}\n\nfloat createCircleDing(vec2 uv, float xOffset, float yOffset, float radius) {\n\n    uv.x -= xOffset;\n    uv.y -= yOffset;\n    \n    float dAkt = length(uv)/1.;\n   \n    float factor = 2.5;\n    \n    dAkt = sin(dAkt*factor - iTime)/factor;\n    \n   \n    dAkt -= sin(radius);\n    dAkt = abs(dAkt);\n    \n    dAkt = smoothstep(0.001, 0.05, dAkt);\n   \n    \n    return dAkt;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    uv = uv - 0.5; // Verschiebe Mittelpunkt zu 0,0\n    // Ecken (-0.5,0.5), (0.5,0.5)...\n    \n    uv = uv * 2.0;  // Ecken zu (-1,1), (1,1)...\n    \n    uv.x *= iResolution.x / iResolution.y; // mit aspectratio neutralisieren.  -> 1x1 Quadrat in der mitte\n    \n    \n    \n    vec2 uv2 = uv;\n      \n   \n    //uv.x -= 0.5; // 1. Offset verschieben\n    \n  \n  \n    // 2. Länge berechnen\n    float d = length(uv); // länge vom Vektor\n    // \"signed distance of the edges of the shape\"\n    \n    \n    d -= 0.5; // Radius um 0.5 erweitern. davor war es mehr oder weniger ein punkt\n    \n    d = abs(d); // Werte innerhalb des Kreises, die negativ sind positiv machen\n               \n    d  = step(0.01, d); // schwellen wert um outline zu erzeugen\n    \n    \n    float d2 = length(uv2);\n    d2 -= 0.5;\n    d2 = abs(d2);\n   \n    d2  = smoothstep(0.0,0.01, d2);\n    \n    \n    float end = 1.;\n    \n    /*\n          Flower of Life\n\n          1. x = center -2; y = center +3.5\n          2. x = center +2; y = center +3.5\n          3. x = center +4; y = center +0\n          4. x = center +2; y = center -3.5\n          5. x = center -2; y = center -3.5\n          6. x = center -4; y = center +0\n    */\n    \n    float radius = 0.3;\n   \n    \n    float senkrechte = sqrt(pow(radius,2.) + pow((radius/2.), 2.));\n    \n    \n    float c0 = createCircleDing(uv, 0., 0., radius);\n    float c1 = createCircleDing(uv, -radius/2., senkrechte-(radius/4.), radius);\n    float c2 = createCircleDing(uv, radius/2., senkrechte-(radius/4.), radius);\n    float c3 = createCircleDing(uv, radius, 0.0, radius);\n    float c4 = createCircleDing(uv, radius/2., -senkrechte+(radius/4.), radius);\n    float c5 = createCircleDing(uv, -radius/2., -senkrechte+(radius/4.), radius);\n    float c6 = createCircleDing(uv, -radius, 0.0, radius);\n      \n    if(c1 != 0. && c2 != 0. && c3 != 0. && c4 != 0. && c5 != 0. && c6 != 0. && c0 != 0.) {\n        //end = sin(d*10. + iTime)/10.;\n       //  end += smoothstep(0.0,1., c1);\n       end = 0.0;\n           //end -= c0;\n          // end -= c3;\n           //end -= c4;\n        // end += smoothstep(0.0,1., c4);\n        // end += smoothstep(0.0,1., c5);\n        // end += smoothstep(0.0,1., c6);\n        // end += smoothstep(0.0,1., c0);\n    }\n    vec3 col = palette(c0,c1, c2, c3, c4, c5, c6, uv);\n    \n    \n   /* if(d2 != 0. && d != 0. && d3 != 0.) {\n          end =0.;\n    } */\n   \n    //fragColor = vec4(end,0.0,0.0,1.0);\n    fragColor = vec4(col, 1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}