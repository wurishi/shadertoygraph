{"ver":"0.1","info":{"id":"3s3cDj","date":"1601686600","viewed":246,"name":"2D Antialiased Metaballs","username":"oneshade","description":"I redid my metaball shader following the tutorial by Eight Squared Software. It is now mathematically correct (I believe). I also added an experimental bit of antialiasing using smoothstep.","likes":9,"published":3,"flags":0,"usePreview":0,"tags":["2d","metaballs","antialiasing","cubic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define AA 8\n\nfloat blob(in vec2 p, in vec2 o, in float r) {\n    p -= o;\n    return r * r / dot(p, p);\n}\n\nbool pointIn(in vec2 p) {\n    vec2 center = 0.5 * iResolution.xy;\n\n    float t1 = iTime * 0.5, t2 = iTime * 1.25, t3 = iTime * 1.5;\n    float c1 = cos(t1), s1 = sin(t1);\n    float c2 = cos(t2), s2 = sin(t2);\n    float c3 = cos(t3), s3 = sin(t3);\n\n    vec2 mb1 = center + vec2(c2, s1) * 100.0;\n    vec2 mb2 = center + vec2(c1, s3) * 100.0;\n    vec2 mb3 = center + vec2(c3, s2) * 100.0;\n\n    float blob1 = blob(p, mb1, 30.0);\n    float blob2 = blob(p, mb2, 40.0);\n    float blob3 = blob(p, mb3, 50.0);\n\n    float d = blob1 + blob2 + blob3;\n    return d > 0.5;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor =  vec4(0.0);\n    float aa = float(AA);\n    for (float i=0.0; i < aa; i++) {\n        for (float j=0.0; j < aa; j++) {\n            fragColor += float(pointIn(fragCoord + vec2(i, j) / aa));\n        }\n    }\n\n    fragColor /= aa * aa;\n}","name":"Image","description":"","type":"image"}]}