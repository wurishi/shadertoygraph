{"ver":"0.1","info":{"id":"NdXSDf","date":"1619318019","viewed":198,"name":"An infinite CA with 5x5 neigh","username":"laserbat","description":"Looks better if full screen. The main computation is done in \"Buffer A\" tab.","likes":9,"published":1,"flags":32,"usePreview":0,"tags":["feedback","cellularautomata"],"hasliked":0,"parentid":"fdXSDf","parentname":"An infinite state CA"},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Colorization and output stuff here.\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord) {\n    float val = texelFetch(iChannel0, ivec2(fragCoord / 4.0), 0).x;\n    \n    fragColor.r = fract(val * 137.0);\n    fragColor.g = fract(val * 713.0);\n    fragColor.b = fract(val * 435.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define GET(d) texelFetch(iChannel0, ivec2(mod(fragCoord + vec2(d) + res, res)), 0).x\n\n// Adjust these constants to change behavior of CA\nconst float A = 5.0;\nconst float B = -2.0;\nconst float C = 1.0;\nconst float D = -3.0;\n\n// Simple time-dependant noise function, for seeding CA\nfloat noise(in vec2 co){\n    float a = fract(co.x * 10.5 + co.y * 7.5 + fract(iDate.a));\n    a = fract(715.5 * a * a + 57.1 * co.x);\n    a = fract(1371.5 * a * a + 757.1 * co.y);\n    return a;\n}\n\n// Main CA computation\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 res = iResolution.xy;\n    \n    if (iFrame > 0) {\n    \tivec2 d;\n        \n        float cen = GET(vec2(0.0, 0.0));\n        float sum1 = 0.0;\n        float sum2 = 0.0;\n\n    \tfor(d.y = -2; d.y <= +2; d.y++)\n        \tfor(d.x = -2; d.x <= +2; d.x++){\n                if (abs(d.y) == 2 || abs(d.x) == 2){\n                    sum2 += GET(d);\n                } else if (d.x != 0 && d.y != 0) {\n                    sum1 += GET(d);\n                }\n             }\n\n        float hash = A + B * cen + C * sum1 + D * sum2;\n\n        float min_dist = 100000.0, val;\n        \n        // Look for cell value closest to 'hash'\n    \tfor(d.y = -2; d.y <= +2; d.y++)\n        \tfor(d.x = -2; d.x <= +2; d.x++){\n                float new_val = GET(d);\n                if (abs(new_val - hash) < min_dist){\n                    min_dist = abs(new_val - hash);\n                    val = new_val;\n                }\n            }\n\n        // Output the found value\n        fragColor.x = val;\n    } else {\n        // Randomize initial state on zeroth frame\n        fragColor.x = noise(fragCoord/res);\n    }\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// Flicker reduction.\n// This CA tends to produce structures that flicker between two states.\n// Code here copies CA output on odd frames and stays unchanged on even.\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    if (iFrame % 2 == 1)\n        fragColor.x = texelFetch(iChannel0, ivec2(fragCoord), 0).x;\n    else\n        fragColor.x = texelFetch(iChannel1, ivec2(fragCoord), 0).x;\n}","name":"Buffer B","description":"","type":"buffer"}]}