{"ver":"0.1","info":{"id":"NlVfRD","date":"1664184396","viewed":97,"name":"Neon Equipotential","username":"ZiRC","description":"Draws equipotential / contour lines using the equation for electric potential. Click and drag anywhere on the viewport to move the small charge around.\nThis shader is a heavily modified version of this one: [url]https://www.shadertoy.com/view/lltBWM[/url]","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["2d","physics","isolines","fwidth","electricity","coulomb"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Electric Potential-inspired Fragment Shader\n// Author: Mike \"ZiRC\" K.\n// \n// A more adaptable version (for use outside of shadertoy) can be found here:\n// https://gist.github.com/zlrc/833e4e2a2d2a32d9dd805231c135ba2e \n//\n// Works off of \"Contour lines\" by 8x as a starting point (most of the original code has been modified): \n// https://www.shadertoy.com/view/lltBWM\n//\n// This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License\n// Information about the license can be found here: http://creativecommons.org/licenses/by-nc-sa/4.0/\nprecision highp float;\n\n#define K 8.987551788       // coulomb's constant\n#define LINE_THICKNESS 0.1  // thickness of the equipotential lines\n#define BLUR_AMOUNT 0.75    // the amount of blurring / anti-aliasing applied to the lines\n#define HEIGHT_CUTOFF 5.10  // maximum electric potential to draw lines for (absolute value)\n#define NUM_CHARGES 3\n\n// These can be turned into uniforms if desired\nvec3 scaleFactor;                      // the amount to scale charge values by\nvec3 fgColor = vec3(1., 1., 1.);       // foreground (line) color\nvec3 bgColor = vec3(0., 0., 0.);       // background color\n\n/**\n * The charges array, stores x and y position as \n * texture coordinates (between 0 and 1), while\n * z is the charge value (q) in coulombs.\n */\nvec3[NUM_CHARGES] charges = vec3[](vec3(0.05), vec3(0.25,0.5,0.15), vec3(0.75,0.5,-0.15));\n\n/** Calculates electric potential at a point */\nfloat potential(float q, float r) {\n    return K * (q / r);   \n}\n\n/** Main shader function */\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord; // the pixel's coordinates\n    float radius = LINE_THICKNESS * 0.5;\n    \n    scaleFactor = vec3(iResolution.xy, min(iResolution.x, iResolution.y));\n    charges[0] = vec3(iMouse.xy / iResolution.xy, charges[0].z);\n    \n    // Calculating electric potential at that point\n    float z = 0.;\n    for (int i = 0; i < charges.length(); i++) {\n        vec3 c = charges[i] * scaleFactor;\n        float r = distance(c.xy, uv.xy);\n        z += potential(c.z, r);\n    }\n    \n    // Clamp to the height cutoff\n    z = clamp(z, -HEIGHT_CUTOFF, HEIGHT_CUTOFF);\n    \n    // Draw gradients from line-edge to line-edge\n    float d = fract(z) - radius; // distance from the edge (line's middle is where z is a whole number)\n    if(d > 0.5) d = 1. - d - radius; // assures that it's distance from the /nearest/ edge\n    d = d/(fwidth(z)+radius)/BLUR_AMOUNT; // dampens the length of the gradient\n\n    // Clamp the value of 'd' between 0 and 1\n    d = clamp(d, 0., 1.);\n    \n    // Assign the color\n    vec4 fg = vec4(fgColor * vec3(sin(iTime), abs(z/HEIGHT_CUTOFF), cos(iTime)), 1.);\n    vec4 bg = vec4(bgColor, 1.);\n    fragColor = mix(fg, bg, vec4(d)); \n}","name":"Image","description":"","type":"image"}]}