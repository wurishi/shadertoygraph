{"ver":"0.1","info":{"id":"XsGSRD","date":"1463047658","viewed":635,"name":"Cubic Lens Distortion Synt","username":"MatHack","description":"Test Cubic Lens Distortion. Thanks Francois Tarlier &amp; Martins Upitis\t","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["distortion","lens","francois","cubic","tarlier"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n\tCubic Lens Distortion GLSL Shader\n\n\tOriginal Lens Distortion Algorithm from SSontech (Syntheyes)\n\thttp://www.ssontech.com/content/lensalg.htm\n\n\tr2 = image_aspect*image_aspect*u*u + v*v\n\tf = 1 + r2*(k + kcube*sqrt(r2))\n\tu' = f*u\n\tv' = f*v\n\n\tauthor : Francois Tarlier\n\twebsite : www.francois-tarlier.com/blog/index.php/2009/11/cubic-lens-distortion-shader\n\t\t\n\tmodified by Martins Upitis\t\n*/\n\n\nfloat k = -0.8, kcube = 0.2, scale = 1.0, dispersion = 0.04, blurAmount = 1.5;\nbool blurEnabled = true;\n\nvec2 rand(vec2 co) //needed for fast noise based blurring\n{\n\tfloat noise1 =  (fract(sin(dot(co ,vec2(12.9898,78.233))) * 43758.5453));\n\tfloat noise2 =  (fract(sin(dot(co ,vec2(12.9898,78.233)*2.0)) * 43758.5453));\n\treturn clamp(vec2(noise1,noise2),0.0,1.0);\n}\n\nvec3 blur(vec2 uv, vec2 coords)\n{\n \n\tvec2 noise = rand(uv.xy);\n\tfloat tolerance = 0.2;\n\tfloat vignette_size = 0.5;\n\tvec2 powers = pow(abs(vec2(uv.s - 0.5,uv.t - 0.5)),vec2(2.0));\n\tfloat radiusSqrd = pow(vignette_size,2.0);\n\tfloat gradient = smoothstep(radiusSqrd-tolerance, radiusSqrd+tolerance, powers.x+powers.y);\n\n\tvec4 col = vec4(0.0);\n\n\tfloat X1 = coords.x + blurAmount * noise.x*0.004 * gradient;\n\tfloat Y1 = coords.y + blurAmount * noise.y*0.004 * gradient;\n\tfloat X2 = coords.x - blurAmount * noise.x*0.004 * gradient;\n\tfloat Y2 = coords.y - blurAmount * noise.y*0.004 * gradient;\n\t\n\tfloat invX1 = coords.x + blurAmount * ((1.0-noise.x)*0.004) * (gradient * 0.5);\n\tfloat invY1 = coords.y + blurAmount * ((1.0-noise.y)*0.004) * (gradient * 0.5);\n\tfloat invX2 = coords.x - blurAmount * ((1.0-noise.x)*0.004) * (gradient * 0.5);\n\tfloat invY2 = coords.y - blurAmount * ((1.0-noise.y)*0.004) * (gradient * 0.5);\n\n\t\n\tcol += texture(iChannel0, vec2(X1, Y1))*0.1;\n\tcol += texture(iChannel0, vec2(X2, Y2))*0.1;\n\tcol += texture(iChannel0, vec2(X1, Y2))*0.1;\n\tcol += texture(iChannel0, vec2(X2, Y1))*0.1;\n\t\n\tcol += texture(iChannel0, vec2(invX1, invY1))*0.15;\n\tcol += texture(iChannel0, vec2(invX2, invY2))*0.15;\n\tcol += texture(iChannel0, vec2(invX1, invY2))*0.15;\n\tcol += texture(iChannel0, vec2(invX2, invY1))*0.15;\n\t\n\treturn col.rgb;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tk = -0.8 * sin(iTime);\n    dispersion = 0.08 * sin(iTime);\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n\t//index of refraction of each color channel, causing chromatic dispersion\n\tvec3 eta = vec3(1.0+dispersion*0.9, 1.0+dispersion*0.6, 1.0+dispersion*0.3);\n\t\n\t//texture coordinates\n\tvec2 texcoord = uv.st;\n\t\n\t//canvas coordinates to get the center of rendered viewport\n\tvec2 cancoord = uv.st;\n\n\n\tfloat r2 = (cancoord.x-0.5) * (cancoord.x-0.5) + (cancoord.y-0.5) * (cancoord.y-0.5);       \n\n\tfloat f = 0.0;\n\n \n\n\t//only compute the cubic distortion if necessary\n\t\n\tif( kcube == 0.0)\n\t{\n\t\tf = 1.0 + r2 * k;\n\t}else{\n\t\tf = 1.0 + r2 * (k + kcube * sqrt(r2));\n\t};\n  \n\n\t// get the right pixel for the current position\n\t\n\tvec2 rCoords = (f*eta.r)*scale*(texcoord.xy-0.5)+0.5;\n\tvec2 gCoords = (f*eta.g)*scale*(texcoord.xy-0.5)+0.5;\n\tvec2 bCoords = (f*eta.b)*scale*(texcoord.xy-0.5)+0.5;\n\n\tvec3 inputDistort = vec3(0.0); \n\t\n\tinputDistort.r = texture(iChannel0,rCoords).r;\n\tinputDistort.g = texture(iChannel0,gCoords).g;\n\tinputDistort.b = texture(iChannel0,bCoords).b;\n\t\n\tif (blurEnabled)\n\t{\n\t\tinputDistort.r = blur(uv, rCoords).r;\n\t\tinputDistort.g = blur(uv, gCoords).g;\n\t\tinputDistort.b = blur(uv, bCoords).b;\n\t}\n\t\n\tfragColor = vec4(inputDistort.r,inputDistort.g,inputDistort.b,1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}