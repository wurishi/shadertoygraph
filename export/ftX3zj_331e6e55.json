{"ver":"0.1","info":{"id":"ftX3zj","date":"1622389642","viewed":73,"name":"Alien automata","username":"SnoopethDuckDuck","description":"I don't know what this is or how it works but it looks okay\npress r to reset ","likes":3,"published":1,"flags":48,"usePreview":0,"tags":["cellularautomata"],"hasliked":0,"parentid":"Nd2XDc","parentname":"Fluid Automata 69420"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code forked from Inigo Quilez's game of life shader\n// https://www.shadertoy.com/view/XstGRf\n// Reset code stolen from somewhere else - sorry!\n// (Press R to reset shader)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n//fragColor = vec4( 1. - step(3. * texelFetch( iChannel0, ivec2(fragCoord), 0 ).x ,0.2));\nfloat x =  texelFetch( iChannel0, ivec2(fragCoord), 0 ).x;\n\nx = min(x,1.);\n//x = 4. * x * (1. - x);\nvec3 col = vec3(34.,32.,52.) / 255.;\nvec3 col2 = vec3(63.,63.,116.) / 255.;\nvec3 col3 = vec3(91.,110.,225.) / 255.;\nvec3 col4 = vec3(95.,205.,228.) / 255.;\nvec3 col5 = vec3(203.,219.,252.) / 255.;\nvec3 col6 = vec3(251.,255.,255.) / 255.;\n\n//vec3 col6 = vec3(1.);\nfloat m = 1. / 7.;\nif (x < m)\nfragColor = vec4(col,1.);\nelse if (x < 2. * m)\nfragColor = vec4(col2,1.);\nelse if (x < 3. * m)\nfragColor = vec4(col3,1.);\nelse if (x < 4. * m)\nfragColor = vec4(col4,1.);\nelse if (x < 5. * m)\nfragColor = vec4(col5,1.);\nelse if (x < 6. * m)\nfragColor = vec4(col6,1.);\nelse\nfragColor = vec4(col6,1.);\n\nfloat b = 0.5 * (1. + cos(0.2 * iTime));\n//fragColor = b * fragColor + (1.-b) * vec4(2. * x,0.,0.,1.);\n//fragColor = vec4(x,x,x,1.);\n//fragColor = 2. * (1. - max(vec4(x,x,x,1.), (1. - fragColor)));\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define KEYBOARD iChannel1\n#define KEY_RESET 82\n\n\nfloat Cell( in ivec2 p )\n{\n    // do wrapping\n    ivec2 r = ivec2(textureSize(iChannel0, 0));\n    p = (p+r) % r;\n    \n    // fetch texel\n   // return (texelFetch(iChannel0, p, 0 ).x > 0.5 ) ? 1 : 0;\n   return texelFetch(iChannel0, p, 0 ).x;\n}\n\nfloat hash1( float n )\n{\n    return fract(sin(n)*138.5453123);\n}\n\nbool key_down(int key) {\n    return int(texelFetch(KEYBOARD, ivec2(key, 0), 0).x) == 1;\n}\n\nfloat S(float x)\n{\nreturn step(0.5,x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\nivec2 px = ivec2( fragCoord );\n    \nif (key_down(KEY_RESET) || iFrame == 0)\n{    \nfloat d = length(fragCoord / iResolution.y - vec2(0.875, 0.5));\n   float g = hash1(fragCoord.x * 13.0  + 10.131 * iTime + 100.19414 + hash1(fragCoord.y*73.1 + 1931.1));\n    g = step(0.5,g);\nfragColor = vec4(g, 0.0, 0.0, 0.0 );\nreturn;\n}\n    \n// center cell\nfloat e = Cell(px); \n\n// neighbour cells\nfloat t = Cell(px + ivec2(0,-1));\nfloat b = Cell(px + ivec2(0,1));\nfloat l = Cell(px + ivec2(-1,0));\nfloat r = Cell(px + ivec2(1,0));   \nfloat tl = Cell(px + ivec2(-1,-1));\nfloat bl = Cell(px + ivec2(-1,1));\nfloat tr = Cell(px + ivec2(1,-1));\nfloat br = Cell(px + ivec2(1,1));\n\n\nfloat k = 0.25 * (0.75 * (t+b+l+r) + 0.25 *(tl + bl + br + tr));\n\n// difference between \"average\" and center\nfloat j = abs(e - k);\n\nif (j < 0.1 * e)\ne = k - 0.5 * j;\nelse if (e < k + 0.3)\ne = 0.8 * e + 0.2 * (k + 0.3) - 0.1;\n\nif (e < j && j < 0.4)\n{\nif (abs(e-k) > 0.01)\ne += (1. + 4. * e) * j;\nelse\ne += max(0.5 *j,0.1);\n}\nelse \ne = 0.99 * e + 0.01 * k;\n\nif (e < max(k,0.5))\n{\ne += 0.012;\nfloat m = 0.01;\nif (abs(e-k) < m && j > m)\ne = max(e,k);\n\nif (e < j)\ne = 0.9 * e + 0.1 * k + 0.05;\n}\n\nfragColor = vec4( e, 0.0, 0.0, 0.0 );\n}","name":"Buffer A","description":"","type":"buffer"}]}