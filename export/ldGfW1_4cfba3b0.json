{"ver":"0.1","info":{"id":"ldGfW1","date":"1532942630","viewed":118,"name":"Art by Numbers V","username":"mhnewman","description":"Inspired by the works of David Hockney","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["procedural","art","david","hockney"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float hash(float p) {\n    vec3 p3 = fract(p * vec3(5.3983, 5.4427, 6.9371));\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat hash(vec2 p) {\n    p = fract(p * vec2(5.3983, 5.4427));\n    p += dot(p.yx, p.xy + vec2(21.5351, 14.3137));\n    return fract(p.x * p.y * 95.4337);\n}\n\nfloat hash(vec3 p) {\n    p = fract(p * vec3(5.3983, 5.4427, 6.9371));\n    p += dot(p, p.yzx + 19.19);\n    return fract((p.x + p.y) * p.z);\n}\n\nfloat noise(vec2 p) {\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n    vec2 u = f * f * (3.0 - 2.0 * f);\n    return mix(mix(hash(i + vec2(0.0, 0.0)), \n                   hash(i + vec2(1.0, 0.0)), u.x),\n               mix(hash(i + vec2(0.0, 1.0)), \n                   hash(i + vec2(1.0, 1.0)), u.x), u.y);\n}\n\nconst mat2 m = mat2(1.616, 1.212, -1.212, 1.616);\n\nfloat fbm(vec2 p) {\n    float f = noise(p); p = m * p;\n    f += 0.5 * noise(p); p = m * p;\n    f += 0.25 * noise(p); p = m * p;\n    f += 0.125 * noise(p); p = m * p;\n    f += 0.0625 * noise(p);\n    return f / 1.9375;\n}\n\n#define range(min, max) mix(min, max, hash(id += 0.01))\n#define hsv(hue, sat, val) (val) * (vec3(1.0 - (sat)) + (sat) * (0.5 + 0.5 * cos(6.2831853 * (vec3(hue) + vec3(0.0, 0.33, 0.67)))))\n#define aa(pos) clamp((pos) * iResolution.x + 0.5, 0.0, 1.0)\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 pos = fragCoord.xy / iResolution.x;\n    float height = iResolution.y / iResolution.x;\n    \n    float bottom = 0.1 * height;\n    float yPos = pos.y - bottom;\n    \n    float t = 0.3 * iTime;\n    float id = floor(t);\n    float transition = smoothstep(0.5, 1.0, t - id);\n    \n    float hue = 0.5 + 0.1 * mix(hash(id + 0.001), hash(id + 1.001), transition);\n    float sat = 0.2 + 0.7 * mix(hash(id + 0.002), hash(id + 1.002), transition);\n    float val = 0.6 + 0.2 * mix(hash(id + 0.003), hash(id + 1.003), transition);\n    vec3 bottomColor = hsv(hue, sat, val);\n    \n    hue = 0.35 + 0.1 * mix(hash(id + 0.004), hash(id + 1.004), transition);\n    sat = 0.2 + 0.7 * mix(hash(id + 0.005), hash(id + 1.005), transition);\n    val = 0.8 + 0.15 * mix(hash(id + 0.006), hash(id + 1.006), transition);\n    vec3 color = hsv(hue, sat, val);\n    \n    pos += vec2(transition, 0.0);\n    id += floor(pos.x);\n    pos = fract(pos);\n    \n    val = range(0.6, 0.9);\n    vec3 winColor1 = hsv(range(0.3, 0.5), 0.7, val - range(0.3, 0.5));\n    vec3 winColor2 = hsv(range(0.3, 0.5), 0.7, val);\n\n    hue = hash(id += 0.01);\n    vec3 frameColor = hsv(hue, 0.15, range(0.6, 0.9));\n    vec3 rowColor = hsv(hue + 0.2, 0.2, range(0.6, 0.9));\n    vec3 colColor = hsv(hue + 0.4, 0.1, range(0.6, 0.9));\n\n    vec3 treeColor = hsv(range(0.5, 0.6), 0.7, range(0.7, 0.9));\n    vec3 trunkColor = hsv(range(0.85, 0.95), 0.9, range(0.3, 0.5));\n\n    float left = range(0.1, 0.35);\n    float right = range(0.65, 0.9);\n    float top = range(0.6, 0.85) * height;\n    \n    float winCount = floor(range(1.0, 5.99));\n    \n\tfloat frameWidth = range(0.02, 0.06);\n    float frameThick = frameWidth * range(0.03, 0.2);\n    \n    float rowWidth = range(0.02, 0.07);\n    float rowThick = rowWidth * range(0.03, 0.25);\n\n    float colThick = frameThick + range(0.0, 0.01);\n    float colWidth = winCount * frameWidth + 2.0 * (colThick - frameThick);\n\n    float outside = floor(range(0.0, winCount - 0.01));\n    \n    float treeWidth = range(0.05, 0.15);\n    float treeLeft = range(0.05, 0.6);\n    float treeRight = range(0.4, 0.95);\n    float treeSize = range(0.05, 0.25) * treeWidth;\n    float treeHeight = range(5.0, 10.0) * treeSize;\n    float treeThick = range(0.3, 0.45) * treeSize;\n    \n    top += rowThick - mod(top, rowWidth);\n    float aaTop = aa(top - yPos);\n    \n    left = left - mod(left, colWidth) + colWidth - colThick - outside * frameWidth;\n    right += colThick - mod(right, colWidth) + outside * frameWidth;\n    float aaSides = aa(pos.x - left) * aa(right - pos.x);\n    \n    float crop = aaTop * aaSides;\n    float topCrop = aa(top - yPos - rowThick);\n    float frameCrop = topCrop * aaSides;\n    float windowCrop = topCrop * aa(pos.x - left - frameThick) * aa(right - pos.x - frameThick);\n\n    float rowPos = mod(yPos, rowWidth);\n    float rowBottom = yPos - rowPos;\n\n    float colPos = mod(pos.x, colWidth);\n    float colLeft = pos.x - colPos;\n    \n    float framePos = mod(colPos - colThick + frameThick, frameWidth);\n    float frameId = colPos - framePos;\n    \n    treeLeft += treeWidth - mod(treeLeft, treeWidth);\n    treeRight -= mod(treeRight, treeWidth);\n    float treeCrop = step(treeLeft, pos.x) * step(pos.x, treeRight);\n    \n    float treePos = mod(pos.x, treeWidth) - 0.5 * treeWidth;\n    float treeId = pos.x - treePos;\n    float treeR = distance(vec2(0.0, treeHeight), vec2(treePos, yPos));\n    \n    float treeTrunk = step(yPos, treeHeight);\n    float treeCurve = 2.0 * hash(vec2(id, treeId)) - 1.0;\n    treePos += treeSize * treeCurve * (1.0 - pow(-yPos / treeHeight, 2.0));\n    treeTrunk *= aa(treePos + treeThick) * aa(treeThick - treePos);\n    \n    vec3 winColor = mix(winColor1, winColor2, hash(vec3(colLeft, rowBottom, frameId)));\n    color = mix(color, winColor, windowCrop);\n\n    color = mix(color, frameColor, aa(frameThick - framePos) * frameCrop);\n    color = mix(color, frameColor, aa(framePos - frameWidth + frameThick) * frameCrop);\n    \n    color = mix(color, rowColor, aa(rowThick - rowPos) * crop);\n    color = mix(color, rowColor, aa(rowPos - rowWidth + rowThick) * crop);\n    \n    color = mix(color, colColor, aa(colThick - colPos) * crop);\n    color = mix(color, colColor, aa(colPos - colWidth + colThick) * crop);\n    \n    color = mix(color, trunkColor, treeTrunk * treeCrop);\n    color = mix(color, treeColor, aa(treeSize - treeR + 0.03 * fbm(60.0 * pos)) * treeCrop);\n\n    color = mix(color, bottomColor, aa(-yPos));\n\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}