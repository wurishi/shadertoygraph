{"ver":"0.1","info":{"id":"3t2yWc","date":"1595554905","viewed":158,"name":"Basic black hole","username":"taigore","description":"A simple shader that replicates very roughly the gravitational lens around a black hole. The basic idea is that what is directly \"beyond\" the hole should end up on the border of the hole, and a progressive distortion should progress from there.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["distortion","animation","blackhole"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Speed in pixels per second at which the hole radius grows\nconst float radiusPerSecond = 50.0;\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // Max radius is the minimum resolution component,\n    // multiplied by .8 and then halved to make it a radius\n    float maxRadius = min(iResolution.x, iResolution.y) * .8 * .5;\n    // Max time is the time it takes to reach max radius\n    float timeModulo = mod(iTime, maxRadius / radiusPerSecond);\n        \n    // Radius of the hole itself\n    float radius = timeModulo * radiusPerSecond;\n    // Controls how thick is the distortion around the border\n    float distortionFactor = timeModulo;\n    \n\tvec2 center = iResolution.xy * 0.5;\n    if(length(fragCoord - center) < radius) {\n        // Draw the hole as a black circle\n        fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n        return;\n    }\n    \n    // Remap the current coordinates to another point, mapping each point right on the radius\n    // of the hole to the exact center of the image\n    vec2 centerDelta = center - fragCoord;\n    vec2 mappedCoord = fragCoord + centerDelta * (1.0 / (1.0 + (radius -  length(centerDelta)) / distortionFactor));\n    \n    // Map the mapped vector to the texture\n    fragColor = texture(iChannel0, mappedCoord / iResolution.xy);\n}","name":"Image","description":"","type":"image"}]}