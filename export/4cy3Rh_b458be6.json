{"ver":"0.1","info":{"id":"4cy3Rh","date":"1712499943","viewed":86,"name":"Trivial box blur","username":"pwyr","description":"A simple box blur implementation with configurable filter kernel size.","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["blur","boxblur"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    int hw = 5; // filter kernel half width\n    \n    vec4 col = vec4(0);\n    for (int u = -hw; u <= hw; ++u) {\n        for (int v = -hw; v <= hw; ++v) {\n            col += texture(iChannel0, uv + vec2(float(u)/float(iResolution.x), float(v)/float(iResolution.y))); \n        }\n    }\n    col *= 1.0 / float((2*hw+1)*(2*hw+1));\n    \n    fragColor = col;\n}","name":"Image","description":"","type":"image"}]}