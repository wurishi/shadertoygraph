{"ver":"0.1","info":{"id":"3scyz8","date":"1600349405","viewed":318,"name":"lorenz11 - Fabrice4","username":"FabriceNeyret2","description":"Lorenz attractor.\nprepare 3D interactive drawing by replacing multi-trajectories of [url]https://shadertoy.com/view/3dtcRr[/url]\nby time-successive segments (in color Bboxes).\n","likes":8,"published":3,"flags":48,"usePreview":0,"tags":["math","attractor","lorenz"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// preparing 3D variant of https://shadertoy.com/view/3dtcRr\n// multi-trajectory variant of https://shadertoy.com/view/3ddyRr\n// optimization of https://shadertoy.com/view/Wscyzr\n// simplification + comments of \"lorenz11\" by mrtkp9993. https://shadertoy.com/view/3tBfWd\n\nfloat Line(vec2 a, vec2 b, vec2 U)    // --- Distance to a line segment https://www.shadertoy.com/view/llySRh\n{   \n    U -= a, b -= a;\n\tfloat h = dot( U, b ) / dot(b,b),\n          c = clamp(h, 0., 1.);\n    return h==c ? length( U - b * c ) : 1e5;   // dist to strict segment\n  //return        length( U - b * c );         // dist to segment with round ends\n}\n\n\nvoid mainImage( out vec4 O, vec2 u )\n{    \n      vec2 R = iResolution.xy, Min, Max,\n           U = ( u - .5*R ) / R.y; U.y += Y_OFFSET;\n      U /= VIEW_SCALE;\n    float pix = 1. / R.y / VIEW_SCALE;\n    vec3 last, next;\n\tO = vec4(0);\n                           \n    for (int y = 0; y < N; y++) { // --- drawing segments\n        Min = T(vec2(1,y)).MODE - pix,\n        Max = T(vec2(2,y)).MODE + pix;\n        float c = 0.;\n        if (U.x>Min.x && U.y>Min.y && U.x<Max.x && U.y<Max.y) {\n\n            last = T(vec2(0,y+1)).xyz;         // pixel (0,y,+1) saves segment start position.\n            float d = 1e6;\n\n            for(float i = 0.; i < STEPS; i++ ) // re-simulates & draws for 1 frame range\n                next = Integrate( last, .016 * SPEED ),\n                d = min(d, Line(last.MODE , next.MODE, U) ),        \n                last = next;\n\n            d *=  VIEW_SCALE;\n            c  =  INTENSITY / SPEED * smoothstep( FOCUS / R.y, 0., d )\n                + INTENSITY / 8.5   * exp(- 1e3 * d*d );\n            \n            O +=  c*COL * pow(FADE,float(y));  \n            O[y%3]++;          // for demo, draw color rectangle for calulating area\n       }\n     }   \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":" // === simulate particles\n\nvoid mainImage( out vec4 O, vec2 u )\n{    \n    vec2 R = iResolution.xy,\n         U = ( u - .5*R ) / R.y; U.y += Y_OFFSET;\n    U /= VIEW_SCALE;\n    u = floor(u);\n    \n    int y = int(u.y);                        // particle #y in line y\n    if (y>N || u.x>2. ) return;\n    if (y>0) { O = T(u-vec2(0,1)); return; } // cascade-save segment states\n    \n\n    vec3  last = T(0).xyz,                   // pixel (0,0) saves the current position.\n          next = last,\n         start = vec3( .1, .001, 0 ),        // Initial Position\n         Max = last, Min = last;\n\n    for(float i = 0.; i < STEPS; i++ )       // simulates for 1 frame range\n        next = Integrate( next, .016 * SPEED ),\n        Min  = min(Min, next),\n        Max  = max(Max, next);\n\n    O =   u == vec2(0,y)                     // pixel (0,y) saves the current position.\n        ? iFrame < 1     ? vec4( start, 0 )  // Setup initial conditions.\n                         : vec4( next , 0 )  // Save current position.\n        : u == vec2(1,y) ? vec4( Min , 0 )   // pixel (1-2,y) saves the segment bbox \n                         : vec4( Max , 0 );\n} ","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"\n                                      // --- graphics settings\n#define MODE xz                       // choose which 2D projection to draw\n\nint            N = 30;                // number of segments\nfloat VIEW_SCALE = .025,              // scene scaling\n        Y_OFFSET = .6,                // scene offset\n           STEPS = 96.,               // number of iteration per frame\n           SPEED = .05,               // dt = SPEED/60\n       INTENSITY = .2,\n            FADE = .99,\n           FOCUS = 1.,\n\n  O = 10., P = 28., B = 8./3.;        // --- System Parameters\n\nvec4 COL = vec4(.93, .36, .36, 1);\n\n#define T(U)  texelFetch( iChannel0, ivec2(U), 0 )\n\n\n//https://en.wikipedia.org/wiki/Lorenz_system\n\nvec3 Integrate(vec3 cur, float dt)    // --- Calculate the next position \n{\n\treturn cur + dt * vec3(    O  * (cur.y - cur.x)       ,\n                            cur.x * (P - cur.z) - cur.y   ,\n                            cur.x *   cur.y     - B*cur.z   );\n}\n","name":"Common","description":"","type":"common"}]}