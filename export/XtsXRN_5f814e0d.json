{"ver":"0.1","info":{"id":"XtsXRN","date":"1434979301","viewed":422,"name":"Geometry warper","username":"104","description":"Image warping as a function of SDF geometry. Mouse to reveal geometry.","likes":17,"published":1,"flags":0,"usePreview":0,"tags":["2d","warp"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"// some copied/pasted utilities\nmat2 rot2D(float r)\n{\n    float c = cos(r), s = sin(r);\n    return mat2(c, s, -s, c);\n}\nfloat dtoa(float d, float amount)\n{\n    float a = clamp(1.0 / (clamp(d, 1.0/amount, 1.0)*amount), 0.,1.);\n    return a;\n}\nfloat dtoa_smoothstep(float d, float amount)\n{\n    return 1.-smoothstep(0.,amount, d - amount / 2.);\n}\nfloat opU( float d1, float d2 ){ return min(d1,d2); }\nfloat sdAxisAlignedRect(vec2 uv, vec2 tl, vec2 br)\n{\n    vec2 d = max(tl-uv, uv-br);\n    return length(max(vec2(0.0), d)) + min(0.0, max(d.x, d.y));\n}\n\nvec4 dtocolor_debug(float d)\n{\n    if(d > 0.)\n    \treturn vec4(.5+.5*cos(d*450.),0,0,1);\n    return  vec4(0,.5+.5*cos(d*400.),0,0);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy - 0.5;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    float d = 20.;// distance to geom\n\n    // generate some funky geometry\n    for(float i = 1.; i < 7.; ++ i)\n    {\n\t    d = opU(d, sdAxisAlignedRect(uv * rot2D(i * iTime * 0.4),\n                                     vec2(0), vec2(0.1,0.4)));\n    }\n  \n    // this converts distance to 0-1 alpha value, normally for drawing colors.\n    // in this case we use the 0-1 alpha value as a warp factor.\n    float a = dtoa(d, 70.);\n    vec2 uvTex = fragCoord / iResolution.xy;\n    uvTex -= 0.5;\n    \n    // warp uv texture based on a.\n    \n\t// warping style 1: mult, and ripples\n    uvTex /= (1.0 + (a * .4));\n    uvTex *= 1.+ cos(a * 90.) * 0.03;\n\n    // warp style 2: pow()\n    //vec2 s = sign(uvTex);\n    //uvTex = pow(abs(uvTex), vec2(1.-a*.2));\n    //uvTex *= s;\n    \n    uvTex += 0.5;\n    \n    fragColor = texture(iChannel0, vec2(uvTex.x,-uvTex.y));\n    \n    // reveal d if mouse is down\n    if(iMouse.z > 0.)\n    {\n//\t    fragColor = mix(fragColor, vec4(1,1,0,0), dtoa_smoothstep(abs(d), .001));\n\t    fragColor = mix(fragColor, dtocolor_debug(d), 0.4);\n    }\n}\n\n\n\n","name":"","description":"","type":"image"}]}