{"ver":"0.1","info":{"id":"lcX3Wf","date":"1703613047","viewed":75,"name":"sience star","username":"nayk","description":"copy past and combination","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["star","glow","stars","neon","atom"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*originals https://www.shadertoy.com/view/ftt3R7   https://www.shadertoy.com/view/4tyfWy https://www.shadertoy.com/view/4ffGWX*/\n#define NUM_LAYERS 10.\n\nmat2 Rot(float a) {\n  float c = cos(a), s = sin(a);\n  return mat2(c, -s, s, c);\n}\nmat2 r2d(float a) {\n\tfloat c = cos(a), s = sin(a);\n    return mat2(\n        c, s,\n        -s, c\n    );\n}\nfloat Star(vec2 uv, float flare) {\n    float col = 0.;\n    float d = length(uv);\n    float m = .02/d;\n    \n    float rays = max(0., 1. - abs(uv.x * uv.y * 1000.));\n    m += rays * flare;\n    uv *= Rot(3.1415/4.);\n    rays = max(0., 1. - abs(uv.x * uv.y * 1000.));\n    m += rays * .3 * flare;\n    \n    m *= smoothstep(1., .2, d);\n\n    return m;\n}\n\nfloat Hash21(vec2 p) {\n  p = fract(p * vec2(123.34, 456.21));\n  p += dot(p, p+45.32);\n  \n  return fract(p.x*p.y);\n}\n\nvec3 StarLayer(vec2 uv) {\n    vec3 col = vec3(0.);\n    \n    vec2 gv = fract(uv) - 0.5;\n    vec2 id = floor(uv);\n    \n    for(int y = -1; y <= 1; y++ ) {\n        for(int x = -1; x <= 1; x++) {\n            vec2 offs = vec2(x, y);\n\n            float n = Hash21(id + offs);\n            float size = fract(n*345.32);\n            \n            vec2 p = vec2(n, fract(n*34.));\n            \n            float star = Star(gv - offs - p + .5, smoothstep(.8, 1., size) * .6);\n            \n            vec3 hueShift = fract(n*2345.2 + dot(uv /420.,texture(iChannel0, vec2(0.25, 0.)).rg))*vec3(.2, .3, .9)*123.2;\n\n            vec3 color = sin(hueShift) * .5 + .5;\n            color = color * vec3(1., .25, 1.+size);\n\n            star *= sin(iTime*3.+n*6.2831)*.4+1.;\n            col += star * size * color;\n        }\n    }\n    \n    return col;\n\n}\nfloat cheap_star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\n\nvec2 N(float angle) {\n  return vec2(sin(angle), cos(angle));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n     vec2 uv2 = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n    vec2 M = (iMouse.xy - iResolution.xy*.5)/iResolution.y;\n    float t = iTime * .01;\n    \tfloat t2 = iTime * .1 + ((.25 + .05 * sin(iTime * .1))/(length(uv.xy) + .07)) * 2.2;\n\tfloat si = sin(t2);\n\tfloat co = cos(t2);\n\tmat2 ma = mat2(co, si, -si, co);\n    uv2*=ma;\n    uv.x = abs(uv.x);\n    uv.y += tan((5./6.) * 3.1415) * .5;\n\n    vec2 n = N((5./6.) * 3.1415);\n    float d = dot(uv - vec2(.5, 0.), n);\n    uv -= n * max(0., d) * 2.;\n\n  float time = iTime;\n       float alpha = 1.0;\n       float orbitals = 9.;\n       vec3 color = vec3(0.1, 1.5, 0.8);\n       float radius = .25;\n        vec3 shape = vec3(0.);\n\n         \n        float f;\n       \n\n      \n         vec2 xUv = ( fragCoord -.5*iResolution.xy )/iResolution.y;\n        \n\n        for(float i = 0.0; i < orbitals; i++){\n\n            // based off https://www.shadertoy.com/view/NscyDN\n            float s = sin((time / 111.0) + i * cos(time*1.02+i)*0.05+0.05);\n            float c = cos((time / 11.0) + i * sin(time*1.02+i)*0.05+0.05);\n            c += sin(time); //not sure if i like this \n            s += sin(time); //not sure if i like this \n            // Point manipulations based on position, time, and index\n            vec2 pt = vec2(c, s);\n            f = 0.01 / abs(length(xUv / pt) - radius);\n            float idx = float(i) / orbitals;\n            idx = fract(idx);\n            shape += f * color;\n            xUv *= r2d(time*0.1);\n         \n        }\n\n\n        vec4 atom = vec4(shape.r, shape.g, shape.b, 1.0);\n    n = N((2./3.) * 3.1415);\n    float scale = 1.;\n    uv.x += 1.5 / 1.25;\n    for(int i=0; i<5; i++) {\n        scale *= 1.25;\n        uv *= 1.25;\n        uv.x -= 1.5;\n\n        uv.x = abs(uv.x);\n        uv.x -= 0.5;\n        uv -= n * min(0., dot(uv, n)) * 2.;\n    }\n\n \n    uv += M * 4.;\n\n    uv *= Rot(t);\n    vec3 col = vec3(0.);\n    \n    float layers = 10.;\n    \n    for(float i=0.; i < 1.; i+=1./NUM_LAYERS) {\n        float depth = fract(i+t);\n        float scale = mix(20., .5, depth);\n        float fade = depth * smoothstep(1., .9, depth);\n        col += StarLayer(uv * scale + i * 453.2)*atom.xyz * fade;\n    }\n\n   float anim = sin(iTime * 12.0) * 0.1 + 1.0;    \n\n    fragColor = vec4(col,1.0);\n    fragColor+= vec4(cheap_star(uv2,anim) * vec3(0.15,0.2,0.25)*0.1, 1.0);\n}","name":"Image","description":"","type":"image"}]}