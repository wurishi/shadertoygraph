{"ver":"0.1","info":{"id":"sldfzX","date":"1663450762","viewed":160,"name":"random indexed repetition 3d","username":"jt","description":"Based on\n[url=https://www.shadertoy.com/view/3syGzz]Limited Repetition SDF[/url] by iq\n[url=https://www.shadertoy.com/view/WttXWX]\"Best\" Integer Hash[/url] by FabriceNeyret2\n[url=https://www.shadertoy.com/view/4sc3z2]Noise Lab (3D)[/url] by candycat.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["grid","random","repetition","concrete"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/sldfzX random indexed repetition 3d by jt\n// Combining iq's repetition example with Fabrice's hash function implementation\n// and candycat's perlin noise implementation.\n\n// https://www.shadertoy.com/view/3syGzz Limited Repetition SDF by iq\n// https://www.shadertoy.com/view/WttXWX \"Best\" Integer Hash by FabriceNeyret2\n// https://www.shadertoy.com/view/4sc3z2 Noise Lab (3D) by candycat\n\n// For concrete material see my\n// https://www.shadertoy.com/view/4tjXWt Simple Concrete Material, 2021 by jt\n\nfloat halfspace(vec3 p)\n{\n    return p.z + 1.0;\n}\n\nfloat sdSphere( vec3 p, float s ) // https://iquilezles.org/articles/distfunctions/\n{\n    return length(p)-s;\n}\n\nfloat sdBox( vec3 p, vec3 b ) // https://iquilezles.org/articles/distfunctions/\n{\n    vec3 q = abs(p) - b;\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat sdCappedCylinder( vec3 p, float h, float r ) // https://iquilezles.org/articles/distfunctions/\n{\n    vec2 d = abs(vec2(length(vec2(p)),p.z)) - vec2(h,r);\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n// --- from Chris Wellons https://nullprogram.com/blog/2018/07/31/\n// Note that it might not be costlier than the infamous fract(big*sin(big*x)) ;-) \n\n        // --- choose one:\n//#define hashi(x)   lowbias32(x)\n  #define hashi(x)   triple32(x) \n\n  #define hash(x)  ( float( hashi(x) ) / float( 0xffffffffU ) )\n\n//bias: 0.17353355999581582 ( very probably the best of its kind )\nuint lowbias32(uint x)\n{\n    x ^= x >> 16;\n    x *= 0x7feb352dU;\n    x ^= x >> 15;\n    x *= 0x846ca68bU;\n    x ^= x >> 16;\n    return x;\n}\n\n// bias: 0.020888578919738908 = minimal theoretic limit\nuint triple32(uint x)\n{\n    x ^= x >> 17;\n    x *= 0xed5ad4bbU;\n    x ^= x >> 11;\n    x *= 0xac4c1b51U;\n    x ^= x >> 15;\n    x *= 0x31848babU;\n    x ^= x >> 14;\n    return x;\n}\n\nuint hashi(uvec2 v)\n{\n    return hashi(v.x + hashi(v.y) );\n}\n\nuint hashi(uvec3 v)\n{\n    return hashi(uvec2(v) + hashi(v.z) );\n}\n\n/*\nvoid mainImage( out vec4 O, vec2 U )\n{\n    uvec2 V = uvec2(U);\n    float h = hash( V.x + hashi(V.y) ); // clean 2D hash\n  //float h = hash( V.x + (V.y<<16) );  // 2D hash (should be ok too )\n    O = vec4( h );\n  //O = vec4( pow( h, 1./2.2) );        // sRGB conversion\n}\n*/\n\n// https://www.shadertoy.com/view/3syGzz Limited Repetition SDF by iq\n\n// The MIT License\n// Copyright Â© 2019 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// This shader shows the correct way to compute a number of\n// copies of an object (right), and the usual but incorrect\n// way to do it (left). The incorrect way is to do infinite\n// repetition and then clip it with a box.\n\n// Related techniques:\n//\n// Elongation  : https://www.shadertoy.com/view/Ml3fWj\n// Rounding    : https://www.shadertoy.com/view/Mt3BDj\n// Onion       : https://www.shadertoy.com/view/MlcBDj\n// Metric      : https://www.shadertoy.com/view/ltcfDj\n// Combination : https://www.shadertoy.com/view/lt3BW2\n// Repetition  : https://www.shadertoy.com/view/3syGzz\n// Extrusion2D : https://www.shadertoy.com/view/4lyfzw\n// Revolution2D: https://www.shadertoy.com/view/4lyfzw\n//\n// More information here: https://iquilezles.org/articles/distfunctions\n\n\n// Create infinite copies of an object -  https://iquilezles.org/articles/distfunctions\nvec3 opRep(in vec3 p)\n{\n    return p - 2.0*round(p/2.0);\n    //return fract(p) - 1.0;\n}\n\n//-----------------------------\n\nivec3 opRepIdx(in vec3 p)\n{\n    return ivec3(floor((p + 1.0) / 2.0));\n}\n\nuint opRepIdxRnd(in vec3 p)\n{\n    return hashi(uvec3(opRepIdx(p)));\n    //return uint(iFrame/100) + hashi(uvec3(opRepIdx(p)));\n}\n\nbool opRepIdxRndBool(in vec3 p)\n{\n    return (opRepIdxRnd(p) & 1u) != 0u;\n}\n\nfloat map(in vec3 p)\n{\n    vec3 r = opRep(p); // coordinates inside cell\n    //float d = 1.0 / 0.0;\n    float d = 10000.0; // maximal distance\n\n/*\n    if(opRepRndBool(p))\n        d = min(d, sdBox(r, vec2(0.4, 0.2)) - 0.1);\n    else\n        d = min(d, sdCircle(r, 0.4) - 0.1);\n*/\n\n    for(int v = -1; v <= +1; v++)\n    {\n        for(int u = -1; u <= +1; u++)\n        {\n            vec3 o = 2.0 * vec3(u, v, 0.0); // offset\n            if(opRepIdxRndBool(p - o))\n                d = min(d, sdBox(r + o, vec3(0.2, 0.4, 1.0)));\n            else\n                //d = min(d, sdSphere(r + o, 0.1) - 0.1);\n                d = min(d, sdCappedCylinder(r + o, 0.2, 1.0));\n        }\n    }\n\n    d = max(d, sdBox( p, vec3(2.5, 4.5, 1.0))); // I'm aware this is the wrong way but I couldn't get the correct way to work with random objects yet.\n\n    return min(d, halfspace(p));\n}\n\n// https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n#define MOD3 vec3(.1031,.11369,.13787)\n//#define MOD3 vec3(443.8975,397.2973, 491.1871)\nfloat hash31(vec3 p3)\n{\n    p3  = fract(p3 * MOD3);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return -1.0 + 2.0 * fract((p3.x + p3.y) * p3.z);\n}\n\nvec3 hash33(vec3 p3)\n{\n    p3 = fract(p3 * MOD3);\n    p3 += dot(p3, p3.yxz+19.19);\n    return -1.0 + 2.0 * fract(vec3((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y, (p3.y+p3.z)*p3.x));\n}\n\n// https://www.shadertoy.com/view/4sc3z2\n// Noise Lab (3D) by candycat\nfloat perlin_noise(vec3 p)\n{\n    vec3 pi = floor(p);\n    vec3 pf = p - pi;\n\n    vec3 w = pf * pf * (3.0 - 2.0 * pf);\n\n    return  mix(\n                mix(\n                    mix(dot(pf - vec3(0, 0, 0), hash33(pi + vec3(0, 0, 0))),\n                        dot(pf - vec3(1, 0, 0), hash33(pi + vec3(1, 0, 0))),\n                        w.x),\n                    mix(dot(pf - vec3(0, 0, 1), hash33(pi + vec3(0, 0, 1))),\n                        dot(pf - vec3(1, 0, 1), hash33(pi + vec3(1, 0, 1))),\n                        w.x),\n                    w.z),\n                mix(\n                    mix(dot(pf - vec3(0, 1, 0), hash33(pi + vec3(0, 1, 0))),\n                        dot(pf - vec3(1, 1, 0), hash33(pi + vec3(1, 1, 0))),\n                        w.x),\n                    mix(dot(pf - vec3(0, 1, 1), hash33(pi + vec3(0, 1, 1))),\n                        dot(pf - vec3(1, 1, 1), hash33(pi + vec3(1, 1, 1))),\n                        w.x),\n                    w.z),\n                w.y);\n}\n\n// https://www.shadertoy.com/view/4sc3z2\n// Noise Lab (3D) by candycat\nfloat simplex_noise(vec3 p)\n{\n    const float K1 = 0.333333333;\n    const float K2 = 0.166666667;\n\n    vec3 i = floor(p + (p.x + p.y + p.z) * K1);\n    vec3 d0 = p - (i - (i.x + i.y + i.z) * K2);\n\n    // thx nikita: https://www.shadertoy.com/view/XsX3zB\n    vec3 e = step(vec3(0.0), d0 - d0.yzx);\n    vec3 i1 = e * (1.0 - e.zxy);\n    vec3 i2 = 1.0 - e.zxy * (1.0 - e);\n\n    vec3 d1 = d0 - (i1 - 1.0 * K2);\n    vec3 d2 = d0 - (i2 - 2.0 * K2);\n    vec3 d3 = d0 - (1.0 - 3.0 * K2);\n\n    vec4 h = max(0.6 - vec4(dot(d0, d0), dot(d1, d1), dot(d2, d2), dot(d3, d3)), 0.0);\n    vec4 n = h * h * h * h * vec4(dot(d0, hash33(i)), dot(d1, hash33(i + i1)), dot(d2, hash33(i + i2)), dot(d3, hash33(i + 1.0)));\n\n    return dot(vec4(31.316), n);\n}\n\n\n#define EPSILON 0.001\n#define DIST_MAX 50.0\n\n// https://iquilezles.org/articles/normalsSDF tetrahedron normals\nvec3 normal( vec3 p ) \n{\n    const float h = EPSILON;\n    const vec2 k = vec2(1,-1);\n    return normalize( k.xyy*map( p + k.xyy*h ) + \n                      k.yyx*map( p + k.yyx*h ) + \n                      k.yxy*map( p + k.yxy*h ) + \n                      k.xxx*map( p + k.xxx*h ) );\n}\n\nfloat trace(vec3 ro, vec3 rd)\n{\n    for(float t = 0.0; t < DIST_MAX;)\n    {\n        float h = map(ro + rd * t);\n        if(h < EPSILON)\n            return t;\n        t += h;\n    }\n    return DIST_MAX;\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat shadow( in vec3 ro, in vec3 rd, float mint, float maxt )\n{\n    for( float t=mint; t<maxt; )\n    {\n        float h = map(ro + rd*t);\n        if( h<EPSILON )\n            return 0.0;\n        t += h;\n    }\n    return 1.0;\n}\n\n// https://www.shadertoy.com/view/Xds3zN raymarching primitives\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.01 + 0.12*float(i)/4.0;\n        float d = map( pos + h*nor );\n        occ += (h-d)*sca;\n        sca *= 0.95;\n        if( occ>0.35 ) break;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 ) ;\n}\n\nvec3 material(vec3 p)\n{\n    vec3 color = vec3(0.0);\n    vec3 color0 = mix(vec3(0.45), vec3(0.55), simplex_noise(p*vec3(20.0, 20.0, 1.0)));\n    //vec3 color0 = mix(vec3(0.4), vec3(0.6), perlin_noise(p*vec3(20.0, 20.0, 1.0)));\n    vec3 color1 = mix(vec3(0.4), vec3(0.6), simplex_noise(p*vec3(50.0, 50.0, 50.0)));\n    //vec3 color1 = mix(vec3(0.4), vec3(0.6), perlin_noise(p*vec3(50.0, 50.0, 50.0)));\n    color = mix(color0, color1, 0.75);\n    return color;\n}\n\n#define pi 3.1415926\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t = iTime * 0.01 + 0.05;\n\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 ndc = 2.0 * uv - 1.0;\n    ndc.x *= float(iResolution.x) / float(iResolution.y);\n    float mx = 6.28 * float(iMouse.x) / float(iResolution.x);\n    float my = pi / 2.0 + pi / 2.0 * float(iMouse.y) / float(iResolution.y);\n    mx = (iMouse.x != 0.0) ? mx : 6.28 * fract(t);\n    //my = (iMouse.y != 0.0) ? my : pi / 2.0;\n    my = pi / 2.0; // XXX deactivated until I can fix the distance field XXX\n\n    mat2 R = mat2(vec2(cos(mx), sin(mx)), vec2(-sin(mx), cos(mx)));\n    vec3 ro = vec3(0.0, 0.0, -5.0 );//vec3(0.0, -10.0 * my, 0.0);\n    //mat2 S = mat2(vec2(0.0, 1.0), vec2(-1.0, 0.0));\n    mat2 S = mat2(vec2(cos(my), sin(my)), vec2(-sin(my), cos(my)));\n    ro.yz=S*ro.yz;\n    ro.xy = R * ro.xy;\n\n    vec3 rd = normalize(vec3(0.5 * ndc.xy, 1.0)); // NOTE: omitting normalization results in clipped edges artifact\n    rd.yz=S*rd.yz;\n    rd.xy = R * rd.xy;\n\n    float dist = trace(ro, rd);\n    vec3 dst = ro + rd * dist;\n    vec3 n = normal(dst);\n    \n    vec3 lightdir = normalize(vec3(1.0, 1.0, 1.0));\n    vec3 ambient = vec3(0.4);\n    float brightness = max(dot(lightdir, n), 0.0);\n    brightness *= shadow(ro+rd*dist,lightdir, 0.01, DIST_MAX ); // XXX artifacts on cylinder XXX\n    //vec3 color = (n * 0.5 + 0.5);\n    vec3 color = mix(vec3(0.1), vec3(material(dst)), step(-1.0, dst.z));\n    color = (ambient * calcAO(dst, n) + brightness) * color;\n\n    fragColor = mix(vec4(color, 1.0), vec4(0.0), step(DIST_MAX, dist));\n    fragColor = sqrt(fragColor); // approximate gamma\n}\n","name":"Image","description":"","type":"image"}]}