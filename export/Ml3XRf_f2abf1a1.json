{"ver":"0.1","info":{"id":"Ml3XRf","date":"1480820147","viewed":209,"name":"hhhzzzsss Normal Raymarch Shader","username":"hhhzzzsss","description":"This shader uses surface normals.\nThe object has a wood texture.\nIt's morphing like a liquid!","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float ballshape( in vec3 p ) {\n    float d = length(p)-0.8;\n    d += 0.1*sin(10.0*p.x+iTime*2.0)*sin(10.0*p.y+iTime)*sin(10.0*p.z+iTime*3.0);\n    return d;\n}\n\nfloat floorshape(in vec3 p) {\n    return p.y + 1.2+0.1*(sin(5.0*p.x+iTime*10.0)+sin(5.0*p.z));\n}\n\nvec2 map( in vec3 p ) {\n    vec2 d1 = vec2( ballshape(p), 1.0 );\n    vec2 d2 = vec2( floorshape(p), 2.0 );\n    if (d2.x<d1.x) d1 = d2;\n    return d1;\n}\n\nvec3 calcNormal( in vec3 p ) {\n    vec3 e = vec3(0.0001,0.0,0.0);\n    vec3 n;\n    n.x = map(p+e.xyy).x - map(p-e.xyy).x;\n    n.y = map(p+e.yxy).x - map(p-e.yxy).x;\n    n.z = map(p+e.yyx).x - map(p-e.yyx).x;\n    return normalize(n);\n}\n\nfloat softShadow( in vec3 ro, in vec3 rd ) {\n    float res = 1.0;\n    float t = 0.01;\n    for( int i = 0; i < 1000; ++i) {\n        if(t>=6.0) break;\n        float h = map( ro+t*rd ).x;\n        if ( h<0.001 ) return 0.0;\n        res = min( res, 4.0*h/t );\n        t += h;\n    }\n    return res;\n}\n\nvec2 intersect( in vec3 ro, in vec3 rd ) {\n    float t = 0.0;\n    for( int i = 0; i < 1000; ++i ) {\n        if(t>=6.0) break;\n        vec2 h = map( ro+t*rd );\n        if ( h.x<0.0001 ) return vec2(t,h.y);\n        t += 0.5*h.x;\n    }\n    return vec2(0.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy / iResolution.xy;\n    \n    vec3 ro = vec3(2.0*sin(iTime*0.0),0.0,2.0*cos(iTime*0.0));\n    vec3 rd = normalize(vec3( (-1.0+2.0*q)*vec2(iResolution.x/iResolution.y,1.0), -1.5 ));\n    float theta = iTime*0.0;\n    mat2 rmat = mat2(cos(theta),sin(theta),-sin(theta),cos(theta));\n    rd.xz *= rmat;\n    \n    vec2 t = intersect( ro, rd );\n    vec3 col = vec3(0.8);\n    if( t.y>0.5 ) {\n        vec3 pos = ro + t.x*rd;\n        vec3 nor = calcNormal( pos );\n        vec3 lig = normalize( vec3(1.0,0.8,0.6) );\n        \n        float amb = 0.5+0.5*nor.y;\n        float dif = max( 0.0, dot(nor,lig) );\n        \n        float sha = 0.2+0.8*softShadow( pos, lig );\n        \n        vec4 tex = vec4(1.0);\n        if (t.y == 1.0) {\n            tex = (texture(iChannel0,vec2(nor.x,nor.y)));\n            tex.rgb*= 1.0;\n        }\n        col = amb*vec3(0.2);\n        col += dif*vec3(1.0)*sha;\n        col = pow(col,vec3(0.4545));\n        col *= tex.rgb;\n    }\n    \n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}