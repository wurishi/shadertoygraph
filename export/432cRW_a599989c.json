{"ver":"0.1","info":{"id":"432cRW","date":"1727039331","viewed":42,"name":"perlin-voronoi blob things","username":"skarph","description":"bunch of stolen code i cobbled together","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415927\n\n/*\n\nhttps://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83\n\n*/\n\n//\tSimplex 3D Noise \n//\tby Ian McEwan, Stefan Gustavson (https://github.com/stegu/webgl-noise)\n//\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\n\nfloat snoise(vec3 v){ \n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //  x0 = x0 - 0. + 0.0 * C \n  vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n  vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n  vec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n// Permutations\n  i = mod(i, 289.0 ); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients\n// ( N*N points uniformly over a square, mapped onto an octahedron.)\n  float n_ = 1.0/7.0; // N=7\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z *ns.z);  //  mod(p,N*N)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  // [-1, 1] --> [0, 1]\n  return 42.0 * \n         dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                         dot(p2,x2), dot(p3,x3) ) );\n}\n/*\n\nhttps://github.com/ronja-tutorials/ShaderTutorials/blob/master/Assets/024_White_Noise/WhiteNoise.cginc\n\n*/\nfloat rand3dTo1d(vec3 value, vec3 dotDir) {\n    vec3 smallValue = sin(value);\n    float random = dot(smallValue, dotDir);\n    return fract( sin( random ) * 143758.5453);\n}\n\nvec3 rand3dto3d(vec3 value) {\n\treturn vec3(\n\t\trand3dTo1d(value, vec3(12.989, 78.233, 37.719)),\n\t\trand3dTo1d(value, vec3(39.346, 11.135, 83.155)),\n\t\trand3dTo1d(value, vec3(73.156, 52.235, 09.151))\n\t);\n}\n\n/*\n\nhttps://github.com/ronja-tutorials/ShaderTutorials/blob/master/Assets/028_Voronoi_Noise/voronoi_noise_2d.shader\n\n*/\nvec2 voronoiNoise3(vec3 coord) {\n    vec3 baseCell = floor(coord);\n    float minDistToCell = 100.0;\n    vec3 closestCell;\n    for ( int x = -1; x <= 1; ++x )\n    for ( int y = -1; y <= 1; ++y )\n    for ( int z = -1; z <= 1; ++z ) {\n        vec3 cell = baseCell + vec3(x,y,z);\n        //deterministic\n        vec3 cellPosition = cell + rand3dto3d(cell);\n        vec3 toCell = cellPosition - coord;\n        float distToCell = length(toCell);\n        if( distToCell < minDistToCell ) {\n            minDistToCell = distToCell;\n            closestCell = cell;\n        }\n    }\n    float random = fract( sin( dot( closestCell, vec3(12.989, 78.233, 54.238) ) ) * 143758.5453 );\n    return vec2(minDistToCell, random);\n}\n\n/*\n\nhttps://gist.github.com/983/e170a24ae8eba2cd174f\n\n*/\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 coord = 10.0 * (fragCoord) / iResolution.x;\n    \n    vec2 vN = voronoiNoise3( vec3(coord, iTime));\n    float dist = clamp(vN.x, 0.0, 0.87);\n    float value = vN.y;\n    \n    //these are the fun values\n    \n    //size of displacemt in direction. may cause artefacting at high values\n    float variance_x = 0.5;\n    float variance_y = 0.5;\n    \n    //frequency of waves in coordinate space??\n    //diagonal-like matricies make square patterns\n    //anti-diagonal like matricies make cross patterns\n    //other patterns are more intresting\n    //i have no clue whats going on here\n    mat2 grain_matrix = mat2(\n        5.0, 5.0,\n        1.0, 5.0\n    );\n    //wibble\n    float speed_x = 1.0;\n    float speed_y = 1.0;\n    vec2 noise = vec2(\n                  variance_x * snoise( vec3( grain_matrix[0][0] * coord.x, grain_matrix[1][0] * coord.y, speed_x*iTime) ) //x offset\n                , variance_y * snoise( vec3( grain_matrix[0][1] * coord.x, grain_matrix[1][1] * coord.y, speed_y*iTime) ) //y offset\n    );\n    coord = coord + noise;\n    vec2 scramble_vN = voronoiNoise3( vec3(coord, iTime));\n    float scramble_dist = scramble_vN.x;\n    float scramble_value = scramble_vN.y;\n    \n    vec3 scramble_clr = hsv2rgb( vec3(\n            scramble_value,\n            clamp(pow(scramble_vN.x, 0.05), 0.0, 1.0),\n            pow(1.0 - scramble_dist, 0.5)\n    ));\n    \n    vec3 clr = hsv2rgb( vec3(\n            scramble_value,\n            clamp(pow(scramble_dist, 0.25), 0.0, 1.0),\n            clamp(pow( 1.0 - scramble_dist, 0.75), 0.4, 1.0)\n    ));\n    //clr = scramble_clr * (1.0 - dist);\n    \n    //fragColor = vec4(scramble_dist, 0.0, 0.0 ,1.0);\n    fragColor = vec4(clr, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}