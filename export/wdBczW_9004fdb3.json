{"ver":"0.1","info":{"id":"wdBczW","date":"1586183482","viewed":161,"name":"Noise test for academic use","username":"Leria","description":"Testing to implement noise","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["test","noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define size2 2\n#define size3 3\n\n//Begin lerp\nfloat linear_interpolation(float x, float low, float high)\n{\n    return (1.0 - x)*low + x*high;\n}\n//End lerp\n\n//Begin unexval\nfloat unexpected_value(){return (iTimeDelta);}\n//End unexval\n\n\n//Begin Fade\nhighp float fade(float t) { return t * t * t * (t * (t * 6.0 - 15.0) + 10.0); }\n//End Fade\n\n//Begin some random function\nfloat stochastic_float(vec2 co)\n{\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n//End some random function\n\n\nfloat noise(vec2 coord)\n{\n    vec2 tmp_coord = floor(coord);\n    \n    coord -= tmp_coord;\n    \n    vec2 uv = vec2(fade(coord.x), fade(coord.y));\n    \n    float out_value = mix(\n        \tmix(stochastic_float(tmp_coord), stochastic_float(tmp_coord+vec2(1,0)), uv.x),\n            mix(stochastic_float(tmp_coord+vec2(0,1)), stochastic_float(tmp_coord+vec2(1,1)), uv.x),\n    \t\tcoord.y);\n                                              ;\n                                            \n   \treturn out_value;\n}\n\n\n//Begin MainImage\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    fragCoord /= 5.0;\n    float lambda = noise(fragCoord);\n\tfragColor = vec4(lambda, lambda, lambda, 1.);\n}\n//End MainImage","name":"Image","description":"","type":"image"}]}