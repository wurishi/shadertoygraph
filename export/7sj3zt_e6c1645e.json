{"ver":"0.1","info":{"id":"7sj3zt","date":"1618029992","viewed":66,"name":"YICHAOW Penumbra Shadows","username":"wycwyc99a88b","description":"Penumbra Shadows","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["penumbrashadows"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int RAY_STEPS = 256;\nconst float SHADOW_HARDNESS = 6.0;\n\n#define LIGHT_POS vec3(0.0, 7.45, 0.0)\n\n#define FLOOR 4\n#define TALL_BOX 5\n#define SHORT_BOX 6\n\n#define FLOOR_SDF plane(pos, vec4(0.0, 1.0, 0.0, 2.5))\n#define TALL_BOX_SDF box(rotateY(pos + vec3(2, 0, -3), 27.5 * 3.14159 / 180.0), 0.5 * vec3(3, 6, 3))\n#define SHORT_BOX_SDF box(rotateY(pos + vec3(-2, 1, -0.75), -17.5 * 3.14159 / 180.0), 0.5 * vec3(3, 3, 3))\n\nstruct Intersection\n{\n    float t;\n    vec3 color;\n    vec3 p;\n    int object;\n};\n    \nvec3 rotateY(vec3 p, float a) {\n    return vec3(cos(a) * p.x + sin(a) * p.z, p.y, -sin(a) * p.x + cos(a) * p.z);\n}\n\n// Box with side lengths b\nfloat box(vec3 p, vec3 b) {\n  return length(max(abs(p) - b, 0.0));\n}\n\nfloat plane( vec3 p, vec4 n ) {\n  // n must be normalized\n  return dot(p,n.xyz) + n.w;\n}\n\nvec3 computeMaterial(int hitObj, vec3 p, vec3 n, vec3 light) {\n    float t;\n    switch(hitObj) {\n        case FLOOR:\n        case TALL_BOX:\n        case SHORT_BOX:\n            return vec3(0.85, 0.81, 0.78);\n            break;\n        case -1:\n            return vec3(0.0);\n            break;\n    }\n    return vec3(1.0);\n}\n\nfloat sceneMap3D(vec3 pos)\n{\n    float t = FLOOR_SDF;\n    t = min(t, TALL_BOX_SDF);\n    t = min(t, SHORT_BOX_SDF);\n    return t;\n}\n\nvoid sceneMap3D(vec3 pos, out float t, out int obj, vec3 lightPos) {\n    t = FLOOR_SDF;\n    obj = FLOOR;\n    \n    float t2;\n    if ((t2 = FLOOR_SDF) < t) {\n        t = t2;\n        obj= FLOOR;\n    }\n    if ((t2 = TALL_BOX_SDF) < t) {\n        t = t2;\n        obj= TALL_BOX;\n    }\n    if ((t2 = SHORT_BOX_SDF) < t) {\n        t = t2;\n        obj= SHORT_BOX;\n    }\n}\n\nvoid march(vec3 origin, vec3 dir, out float t, out int hitObj, vec3 lightPos) {\n    t = 0.001;\n    for (int i=0; i < RAY_STEPS; i++) {\n        vec3 pos = origin + t * dir;\n        float m;\n        sceneMap3D(pos, m, hitObj, lightPos);\n        if (m < 0.01) {\n            return;\n        }\n        t += m;\n    }\n    t = -1.0;\n    hitObj = -1;\n}\n\nvec3 computeNormal(vec3 pos) {\n    vec3 epsilon = vec3(0.0, 0.001, 0.0);\n    return normalize(vec3(sceneMap3D(pos + epsilon.yxx) - sceneMap3D(pos - epsilon.yxx),\n                          sceneMap3D(pos + epsilon.xyx) - sceneMap3D(pos - epsilon.xyx),\n                          sceneMap3D(pos + epsilon.xxy) - sceneMap3D(pos - epsilon.xxy)));\n}\n\nfloat softShadow(vec3 dir, vec3 origin, float min_t, float k) {\n    float res = 1.0;\n    float t = min_t;\n    for(int i = 0; i < RAY_STEPS; i++) {\n        float m = sceneMap3D(origin + t * dir);\n        if(m < 0.0001) {\n            return 0.0;\n        }\n        res = min(res, k * m / t);\n        t += m;\n    }\n    return res;\n}\n\n\nIntersection sdf3D(vec3 dir, vec3 eye, vec3 lightPos) {\n    float t;\n    int hitObj;\n    march(eye, dir, t, hitObj, lightPos);\n    \n    vec3 point = eye + t * dir;\n    vec3 nor = computeNormal(point);\n    vec3 lightDir = normalize(lightPos - point);\n    float lightDot = max(0.0, dot(nor, lightDir));\n\n    vec3 surfaceColor = computeMaterial(hitObj, point, nor, lightDir);\n    \n\n    vec3 col = lightDot * vec3(1.0, 0.88, 0.7) * softShadow(lightDir, point, 0.1, SHADOW_HARDNESS);\n        col *= surfaceColor;\n    return Intersection(t, col, point, hitObj);\n}\n\nvoid raycast(vec2 uv, out vec3 dir, out vec3 eye, out vec3 ref) {\n    eye = vec3(0.0, 5.5, -30);\n    ref = vec3(0.0, 2.5, 0.0);\n    \n    float len = tan(0.3403392 * 0.75) * distance(eye, ref);\n    vec3 H = normalize(cross(vec3(0.0, 1.0, 0.0), ref - eye));\n    vec3 V = normalize(cross(H, eye - ref));\n    V *= len;\n    H *= len * iResolution.x / iResolution.y;\n    vec3 p = ref + uv.x * H + uv.y * V;\n    dir = normalize(p - eye);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // [-1, 1]\n    vec2 uv2 = 2.0 * uv - vec2(1.0);\n    \n    vec3 dir, eye, ref;\n    raycast(uv2, dir, eye, ref);\n    \n    // Time varying pixel color\n    Intersection isect = sdf3D(dir, eye, LIGHT_POS);\n    vec3 col = isect.color;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}