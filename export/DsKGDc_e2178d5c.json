{"ver":"0.1","info":{"id":"DsKGDc","date":"1679137891","viewed":55,"name":"Noobdots","username":"grobs","description":"How do shaders work?","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["noob","dots"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float img(vec2 xy, vec2 origin, float radius)\n{\n    return pow((xy.x - origin.x) / radius, 2.0) + pow((xy.y - origin.y) / radius, 2.0);\n}\n\nconst int N_DOTS = 1000;\nconst float DOT_SPACING = 0.1;\nconst float DOT_AMPLITUDE = 0.002;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n\n    // rescale to y resolution\n    vec2 uv = fragCoord/iResolution.y;\n    vec2 mouse = iMouse.xy / iResolution.y;\n    \n    float mx = 0.5 * (iResolution.x / iResolution.y);\n    vec2 xy = uv - vec2(mx, 0.5);\n\n    vec3 col1 = vec3(0.0, 0.0, 0.0);\n    \n    for (int ii = 0; ii < N_DOTS; ii++)\n    {\n    \n    float sint = DOT_SPACING + DOT_AMPLITUDE * sin(2.0 * iTime + float(ii) / float(N_DOTS));\n    float cost = DOT_SPACING + DOT_AMPLITUDE * cos(2.0 * iTime + float(ii) / float(N_DOTS));\n    \n    float hole = smoothstep(0.51,0.49, \n    img(xy, \n    vec2(sint*mod(float(ii), 40.0) - 0.9, cost*trunc(float(ii) / 40.0) - 0.5), \n    0.05));\n    \n    \n    col1 = col1 + vec3(0.5 * hole, 3.0 * float(ii)/float(N_DOTS) * hole, hole);\n    }\n\n    // Output to screen\n    fragColor = vec4(col1,1.0);\n}","name":"Image","description":"","type":"image"}]}