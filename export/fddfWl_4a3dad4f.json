{"ver":"0.1","info":{"id":"fddfWl","date":"1659266001","viewed":150,"name":"Snakes on a grill","username":"Mojomajor","description":"truchet snakes","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["truchet","lava","quad"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdXGzr","filepath":"/media/a/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg","previewfilepath":"/media/ap/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define time iTime*0.1\n\n// Basic Quad Truchet by Martijn Steinrucken aka BigWings - 2019\n// countfrolic@gmail.com\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// \n// This is the end result of one of my video tutorials\n// on YouTube that you can see here:\n// https://youtu.be/2R7h76GoIJM\n\n\nfloat hash21(in vec2 n){ return fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453); }\nmat2 makem2(in float theta){float c = cos(theta);float s = sin(theta);return mat2(c,-s,s,c);}\nfloat noise( in vec2 x ){return texture(iChannel0, x*.01).x;}\n\nvec2 gradn(vec2 p)\n{\n\tfloat ep = .09;\n\tfloat gradx = noise(vec2(p.x+ep,p.y))-noise(vec2(p.x-ep,p.y));\n\tfloat grady = noise(vec2(p.x,p.y+ep))-noise(vec2(p.x,p.y-ep));\n\treturn vec2(gradx,grady);\n}\n\nfloat flowLava(in vec2 p) {\n\tfloat z=2.;\n\tfloat rz = 0.;\n\tvec2 bp = p;\n\tfor (float i= 1.;i < 7.;i++ )\n\t{\n\t\t//primary flow speed\n\t\tp += time*.6;\n\t\t\n\t\t//secondary flow speed (speed of the perceived flow)\n\t\tbp += time*1.9;\n\t\t\n\t\t//displacement field (try changing time multiplier)\n\t\tvec2 gr = gradn(i*p*.34+time*1.);\n\t\t\n\t\t//rotation of the displacement field\n\t\tgr*=makem2(time*6.-(0.05*p.x+0.03*p.y)*40.);\n\t\t\n\t\t//displace the system\n\t\tp += gr*.5;\n\t\t\n\t\t//add noise octave\n\t\trz+= (sin(noise(p)*7.)*0.5+0.5)/z;\n\t\t\n\t\t//blend factor (blending displaced system with base system)\n\t\t//you could call this advection factor (.5 being low, .95 being high)\n\t\tp = mix(bp,p,.77);\n\t\t\n\t\t//intensity scaling\n\t\tz *= 1.4;\n\t\t//octave scaling\n\t\tp *= 2.;\n\t\tbp *= 1.9;\n\t}\n\treturn rz;\t\n}\n\n\nfloat Hash21(vec2 p) {\n\tp = fract(p*vec2(234.34, 435.345));\n    p += dot(p, p+34.23);\n    return fract(p.x*p.y);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 UV = fragCoord.xy/iResolution.xy;\n    \n    vec3 col = vec3(0);\n    \n    uv += iTime*.05;\n    uv *= 4.;\n    vec2 gv = fract(uv)-.5;\n    vec2 id = floor(uv);\n    \n    float n = Hash21(id); // random number between 0 and 1\n    \n    float width = .3*UV.y;\n    \n    if(n<.5) gv.x *= -1.;\n    float d = abs(abs(gv.x+gv.y)-.5);\n    vec2 cUv = gv-sign(gv.x+gv.y+.001)*.5;\n    d = length(cUv);\n    float mask = smoothstep(.01, -.01, abs(d-.5)-width);\n\tfloat angle = atan(cUv.x, cUv.y); // -pi to pi\n    float checker = mod(id.x+id.y, 2.)*2.-1.;\n    float flow = sin(iTime+checker*angle*10.);\n    \n    float x = (checker*angle/1.57-iTime*.3);\n    float y = (d-(.5-width))/(2.*width);\n    y = abs(y-.5)*2.;\n    vec2 tUv = vec2(x, y);\n    \n    float rz = flowLava(uv);\n    vec3 colLava = vec3(.2,0.07,0.01)/rz;\n\tcolLava=pow(colLava,vec3(1.4));\n    \n    \n    col += texture(iChannel0, tUv).rgb*mask;\n    col += colLava*mask;\n    col *= 1.-tUv.y;\n    col = mix(col, colLava, 0.25);\n    \n    // if(gv.x>.48 || gv.y>.48) col = vec3(1,0,0);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}