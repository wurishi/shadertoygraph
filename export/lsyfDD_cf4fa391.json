{"ver":"0.1","info":{"id":"lsyfDD","date":"1528880023","viewed":529,"name":"propagate/connect  util","username":"FabriceNeyret2","description":"A base tool for games and simulation:\nthe current position (here, mouse) is drawing + pacing a timer, that is propagated to all connected part.\n-> can be used to detect if a block is connected, if the drawing touches itself again, or to propagate a flow.\n","likes":6,"published":3,"flags":48,"usePreview":0,"tags":["util","short","propagation","closure"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// --- read map T.y and color cycle timer T.x\n\nvoid mainImage( out vec4 O, vec2 U ) {\n    O = T( U/PIX );\n    O = ( .5+.5*sin(O.x*vec4(1,2,4,8)) ) * O.y;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// --- paint and propagate timer\n\nfloat id = 1.;          // if you want to test mixing several tracks\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    vec2 R = iResolution.xy/PIX;              // init\n    if (iFrame==0) {\n        if ( abs( length( U/R - vec2(.5,.7) ) -.5 ) < .5/R.y ) O.y = 2.;\n        if ( abs( length( U/R - vec2(.5,0 ) ) -.5 ) < .5/R.y ) O.y = 1.;\n    }\n    else O = T(U);\n    \n    if ( U-.5 == floor(iMouse.xy/PIX) )       // on mouse:\n        O.x = float(iFrame),                  //   draw (or erase if SPACE)\n        O.y = id-keyClick(32);                //   and pace timer\n    else \n      if (O.y==id)                            // in painted area:\n        for(int k =0; k<9; k++) {\n            vec4 T = T(U+vec2(k%3-1,k/3-1));  //   propagate max neighbor time\n                if (T.y==id) O.x = max(O.x,T.x);\n         }\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define PIX 16. // pixel size (i.e. zoom )\n\n#define T(U) texelFetch( iChannel0, ivec2(U), 0 )\n\n#define keyToggle(c) (texture(iChannel3,vec2((.5+float(c))/256.,0.75)).x > 0.)\n#define keyClick(c)   texture(iChannel3,vec2((.5+float(c))/256.,0.25)).x\n","name":"Common","description":"","type":"common"}]}