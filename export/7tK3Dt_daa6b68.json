{"ver":"0.1","info":{"id":"7tK3Dt","date":"1638551660","viewed":112,"name":"Game of Life - E.MORET","username":"eliottmoret","description":"Simple game of life exercise with interactions, to train using buffers.","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["simulation","buffer","gameoflife"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    float shape = texture(iChannel0, uv / SIZE).r;\n    fragColor = vec4(vec3(shape),1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"int GetNeighbours(ivec2 p)\n{\n    int num = 0;\n    for(int y = -1; y <= 1; y++){\n            for(int x = -1; x <= 1; x++){\n            if(x==0 && y == 0) continue;\n            num += texelFetch(iChannel1, p+ivec2(x,y), 0).r > .5 ? 1 : 0;\n        }\n    }\n    \n    return num;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 col = vec4(0);\n    \n    int next = 0;\n    \n    if(iFrame<1 && texture(iChannel0, uv).r > .3) \n        next = 1;\n    else if(iFrame % TIMESTEP != 0)\n    {\n        if(texture(iChannel1, uv).r > .5) next = 1;\n        if(texture(iChannel2,uv).r>0.5) next=1;\n    }\n    else {\n        bool alive = texelFetch(iChannel1, ivec2(fragCoord), 0).r > .99;\n        int num = GetNeighbours(ivec2(fragCoord));\n\n        \n        \n        if(alive && (num==2 || num == 3))\n            next = 1;\n        else if (!alive && num==3)\n            next = 1;\n        else\n            next = 0;\n        \n        if(texture(iChannel2,uv).r>0.5) next=1;\n        col = vec4(next);\n    }\n    \n    col = vec4(next);\n    fragColor = col;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define SIZE 4.\n#define BRUSH 1.5\n#define TIMESTEP 2","name":"Common","description":"","type":"common"}]}