{"ver":"0.1","info":{"id":"tlVyWd","date":"1660299291","viewed":96,"name":"Ray Tracer Drawing a Sphere","username":"Konstantin84UKR","description":"Ray Tracer Tutorial Part 1: Drawing a Sphere","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raytracer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"struct Camera\n{\n    vec3 position;\n    vec3 direction;\n    float zoom;\n        \n} camera;\n\nstruct Sphere\n{\n    vec3 position;\n    float radius;\n} sphere;\n\nvoid setupScene()\n{\n   camera.position = vec3(0.0,0.0,3.5);\n   camera.direction = vec3(0.0,0.0,-1.0);\n   camera.zoom = 1.0;\n   \n   sphere.position = vec3(0.0,0.0,-0.0);\n   sphere.radius = 0.3;\n   \n}\n\nbool solveQuadratic(float a,float b,float c, out float t0, out float t1)\n{\n    float disc = b*b-4.0*a*c;\n    \n    if(disc<0.0)\n    {\n      return false;   \n    }\n    \n    if(disc==0.0)\n    {\n        t0 = t1 = -b/(2.0*a);\n        return true;\n    }\n\n    t0 = (-b + sqrt(disc))/(2.0*a);\n    t1 = (-b - sqrt(disc))/(2.0*a);\n    return true;\n    \n}\n\nbool intersect(vec3 direction, out float refl)\n{\n   vec3 L = camera.position - sphere.position; // (O-c)\n\n   float a = dot(direction,direction); // d^2\n   float b = 2.0 * dot(direction,L);\n   float c = dot(L,L) - pow(sphere.radius,2.0);\n   \n   float t0;\n   float t1;\n   \n   if(solveQuadratic(a,b,c,t0,t1))\n   {\n     float t= t0;\n     if(t1<t0)\n     {\n         t = t1;\n     }\n     \n     vec3 Phit = camera.position + t * direction;\n     vec3 surfaceNormal = normalize(Phit - sphere.position);\n     \n     refl = -dot(direction,surfaceNormal);\n     \n     return true; \n   }\n   \n   return false;\n}\n\n\nvec3 rayTracer(vec3 direction){\n\n    float refc = 0.0;\n    if(intersect(direction,refc))\n    {\n        return refc * vec3(0.3,0.5,0.1); \n    }\n    \n    return vec3(0.0,0.0,0.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    setupScene();\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    //uv.x = (uv.x * 2.0 -1.0) * iResolution.x/iResolution.y;\n    //uv.y = uv.y * 2.0 -1.0;\n    uv = uv - 0.5;\n    uv.x = uv.x * iResolution.x/iResolution.y; \n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n\n    vec3 direction = normalize(vec3(uv,camera.zoom) - camera.position);\n\n    vec3 col = rayTracer(direction);\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}