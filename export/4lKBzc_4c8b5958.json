{"ver":"0.1","info":{"id":"4lKBzc","date":"1543454348","viewed":423,"name":"Made of Starstuff","username":"angelo12","description":"My first attempt at reproducing an image, in this case a globular cluster long exposure pic from the hubble space telescope. https://scitechdaily.com/images/Hubble-Views-Globular-Cluster-NGC-1898.jpg Still much to learn! I'll try the same image again soon","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["noise","beginner","random","space"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//PROJECT: Daily shader practice :: Shader #002\n// AUTHOR: Angel Ortiz, angelo12@vt.edu\n//   DATE: 28/11/18\n//  NOTES: Learning about noise and pseudo random generators. The idea behind this shader was\n//         to reproduce a globlar cluster like this one taken from hubble:\n//         https://scitechdaily.com/images/Hubble-Views-Globular-Cluster-NGC-1898.jpg\n//         I need to come up with a way to have the pixel dots have variable size and I'd be\n//         golden!\n\nfloat random(vec2 uv){\n    // return fract(sin(dot(uv.xy, vec2(163.4582374234, 834.70121245)))* 120000.123467);\n    return fract(sin(dot(uv.xy, vec2(2923.53914, 630.2985 )))* 500000.9283472734);\n}\n\nvec3 centerDistribution(vec2 cen){\n    vec3 col = vec3(0.0);\n    col += vec3(1.0) * pow(random(cen), 30.0);\n    col += vec3(0.3, 0.3 , 0.8) * pow(random(cen), 200.0);\n    col += vec3(0.8, 0.5, 0.0) * pow(random(cen + random(vec2(random(cen), col))), 20.0);\n\n    return col;\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float time = iTime * 1.0;\n    vec2 p  = fragCoord / iResolution.xy;\n    p *= 1.0;\n    p = fract(p);\n\n    vec2 cen = p - vec2(0.5);\n\n    // cen *= vec2(sin(0.0000002*time), 2.0*cos(0.000000002*time));\n    vec3 col = vec3(0.0);\n\n    float r = length(cen);\n    col += smoothstep(r, r+1.0,centerDistribution(cen));\n\n    col +=  smoothstep(r, r+2.0, 0.7*exp(-2.0*r));\n    // col += (1.0 - r)*0.2;\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}