{"ver":"0.1","info":{"id":"dtSBWG","date":"1694429051","viewed":25,"name":"Visual-2 DeadZero","username":"deadzero","description":"second visualization","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["tunnel","colors","circle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 palette(float t) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(sin(iTime * 0.2) * 0.5 + 0.5, cos(iTime * 0.25) * 0.5 + 0.5, sin(iTime * 0.3 + 1.0) * 0.5 + 0.5);\n    \n    return a + b * cos(6.28318 * (c * t + d));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    \n    // Convert cartesian to polar coordinates\n    float angle = atan(uv.y, uv.x);\n    float radius = length(uv);\n    \n    // Introduce geometric patterns by folding the polar coordinates\n    int sides = int(5.0 + 4.0 * sin(iTime * 0.5));  // Change this to create different shapes\n    angle = mod(angle, 6.28318 / float(sides)) * float(sides);\n    \n    vec2 uv0 = vec2(radius, angle);\n    vec3 finalColor = vec3(0.0);\n    \n    for(float i = 0.0; i < 5.0; i++) {\n        uv0.x = fract(uv0.x * (1.5 + 0.1 * sin(iTime)));\n        \n        float d = uv0.x * exp(-radius);\n\n        vec3 col = palette(uv0.y + i * 0.4 + iTime * 0.4);\n\n        d = sin(d * (8.0 + 4.0 * sin(iTime * 0.1)) + iTime) / 8.0;\n        d = abs(d);\n\n        d = pow(0.01 / d, 1.2 + 0.1 * sin(iTime));\n\n        finalColor += col * d;\n    }\n    \n    fragColor = vec4(finalColor, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}