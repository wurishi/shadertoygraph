{"ver":"0.1","info":{"id":"WtsGzS","date":"1556738439","viewed":121,"name":"rayMarching Mehnir","username":"ArmanD","description":"I DON'T UNDERSTAND MY CODE ;","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarching","ray","light","rock","marcing","movinglight"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat getDist (vec3 p ){\nvec4 s = vec4 (0. ,1. ,6. ,1.);\n//  s.xz  *= rot (time);\nfloat sphereDist =length (p-s.xyz)-s.w\n-sin (p.x)*3.;\nfloat planeDist = p.y;\nfloat d = min ( planeDist ,sphereDist );\nreturn d;\n}\n  float rayMarch (vec3 ro , vec3 rd){\nfloat  d = 0.0;\nfor ( int i = 0 ; i < 100 ; i++){\n  vec3 p = ro + rd * d;\n  float ds = getDist(p);\n  d += ds;\n  if ( d > 100. || ds < 1./iTime){\n  break;\n  }}\nreturn d;\n}\nvec3 getNormal (vec3 p){\nfloat d = getDist(p);\nvec2 e = vec2 (.01 , 0. );\n \nvec3 n = d-vec3 (\ngetDist(p-e.xyy) ,\ngetDist(p-e.yxy) ,\ngetDist(p-e.yyx) );\nreturn normalize (n);\n}\n\n  float getLight(vec3 p){\n  vec3 lightPos = vec3 (0 , 100. , 6);\nlightPos.xz += 50. * vec2  (sin (iTime),cos (iTime));\n  vec3 l = normalize (lightPos-p);\n  vec3 n = getNormal (p);\n  float dif = max (dot (l,n),0.);\n    float d = rayMarch (p+n*0.01, l);\n    if (d < length (lightPos-p)) dif *= .1;\n  return dif;\n  }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n   float ratio = iResolution.y / iResolution.x;\nvec2 uv = (fragCoord.xy  / iResolution.x)\n- vec2 (0.5 , 0.5 *  ratio);\n\n    vec3 ro = vec3 (0. ,1. ,-10.);\n    vec3 rd = normalize (vec3 (uv.xy ,1.));\n\n\n    float d = rayMarch (ro ,rd);\n\n    vec3 p= ro + rd * d;\n    float dif = getLight (p);\n\n  vec3  col = vec3 (dif);\n \n\n\tfragColor = vec4(col, 1.0 );\n}","name":"Image","description":"","type":"image"}]}