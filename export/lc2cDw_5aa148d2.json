{"ver":"0.1","info":{"id":"lc2cDw","date":"1722641963","viewed":37,"name":"BW Noise Sphere","username":"elifront","description":"3d bw noise sphere","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["3d","noise","sphere"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float hash(float p) { p = fract(p * 0.011); p *= p + 7.5; p *= p + p; return fract(p); }\nfloat noise(vec3 x) {\n    const vec3 step = vec3(110, 241, 171);\n\n    vec3 i = floor(x);\n    vec3 f = fract(x);\n \n    // For performance, compute the base input to a 1D hash from the integer part of the argument and the \n    // incremental change to the 1D based on the 3D -> 1D wrapping\n    float n = dot(i, step);\n\n    vec3 u = f * f * (3.0 - 2.0 * f);\n    return mix(mix(mix( hash(n + dot(step, vec3(0, 0, 0))), hash(n + dot(step, vec3(1, 0, 0))), u.x),\n                   mix( hash(n + dot(step, vec3(0, 1, 0))), hash(n + dot(step, vec3(1, 1, 0))), u.x), u.y),\n               mix(mix( hash(n + dot(step, vec3(0, 0, 1))), hash(n + dot(step, vec3(1, 0, 1))), u.x),\n                   mix( hash(n + dot(step, vec3(0, 1, 1))), hash(n + dot(step, vec3(1, 1, 1))), u.x), u.y), u.z);\n}\n\n\nfloat map( in vec3 p, float time )\n{\n    float d = -99999.;\n    for (float i =0.; i < 5.; i++) {\n        d = max(length(p)-((noise(6.*p+time+i))*.1+.35 ), d);\n    }\n    return d;\n}\n\nvec3 calcNormal( in vec3 pos, float time ){\n    vec2 e = vec2(.0001, 0.);\n    \n    return normalize( vec3(map(pos-e.xyy, time)-map(pos+e.xyy, time),\n    map(pos+e.yxy, time)-map(pos-e.yxy, time),\n    map(pos+e.yyx, time)-map(pos-e.yyx, time)));\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord.xy-iResolution.xy)/iResolution.y;\n    \n    vec3 ro = vec3(0., 0., 1.);\n    vec3 rd = normalize(vec3(uv, -1.5)); //magnatude\n  \n    vec3 col = vec3(0.);\n    \n    float t = 0.;\n    for(int i =0; i < 100; i++) {\n        vec3 pos = ro + rd*t;\n        float h = map(pos, iTime);\n        \n        if (h<0.0001) break;\n     \n        t += h;\n        if (t>20.) break;\n\n    }\n    \n    if (t<20.){\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal(pos, iTime);\n        col = nor.zzz;\n        \n    }\n  \n    fragColor = vec4(col, 1.);\n\n}\n\n","name":"Image","description":"","type":"image"}]}