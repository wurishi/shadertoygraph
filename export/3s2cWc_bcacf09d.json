{"ver":"0.1","info":{"id":"3s2cWc","date":"1587451984","viewed":190,"name":"Sound tutorial #4","username":"NonGrate","description":"This is a fourth lesson of a procedural sound generation tutorial.\n1. mainSound(float time) in Common tab\n2. Playback speed\n3. use mainSound() for Visualization\n\nThird lesson: https://www.shadertoy.com/view/wsScWV","likes":2,"published":1,"flags":8,"usePreview":0,"tags":["procedural","sound","tutorial","audio","generation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Process audio step\n    mainSound( in int samp,iTime);\n    \n    // Output visualized pixel to screen\n    fragColor = VISUALIZATION_PX;\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Speed of the sound\nconst float SPEED = 1.0;\n\n// Frequencies\nconst float C = 261.63;\nconst float D = 293.66;\nconst float E = 329.63;\nconst float F = 349.23;\nconst float G = 392.00;\nconst float A = 440.00;\nconst float B = 493.88;\nconst float C2 = 523.25;\n\n// Durations\nconst float WHOLE_NOTE = 1.0;\nconst float HALF_NOTE = 1.0/2.0;\nconst float _4_NOTE = 1.0/4.0;\nconst float _8_NOTE = 1.0/8.0;\nconst float _16_NOTE = 1.0/16.0;\nconst float _32_NOTE = 1.0/32.0;\nconst float DOUBLE_NOTE = 2.0;\n\nvec4 VISUALIZATION_PX = vec4(0.0);\n    \nstruct Note {\n    // in Hz, see \"common\" tab\n    float frequency;\n    // offset - time in seconds when to start playing note\n    float offset;\n    // duration of a note (1/4, 1/8, ...), see \"common\" tab\n    float duration;\n};\n\nconst Note[] notes = Note[] (\n    Note(C, 0.0, _8_NOTE),\n    Note(C, 0.5, _8_NOTE),\n    Note(D, 1.0, _4_NOTE),\n    Note(C, 2.0, _4_NOTE),\n    Note(F, 3.0, _4_NOTE),\n    Note(E, 4.0, DOUBLE_NOTE), // This still rings when next starts\n    Note(C, 5.0, _8_NOTE),\n    Note(C, 5.5, _8_NOTE),\n    Note(D, 6.0, _4_NOTE),\n    Note(C, 7.0, _4_NOTE),\n    Note(G, 8.0, _4_NOTE),\n    Note(F, 9.0, DOUBLE_NOTE));\n\nvec2 noteFreq(Note note, float time) {\n    // 6.2831 = 2pi\n    // exp() goes exponentially down to fade out the volume\n    // (time / SPEED) to fix pitch after speed change\n    return vec2(sin(6.2831 * note.frequency * (time / SPEED)) * exp(-1.0/note.duration * (time - note.offset)));\n}\n\nvec2 mainSound( in int samp,float time) {\n    // Set audio playback speed\n    time *= SPEED;\n    \n    vec2 result;\n    \n    // reset our pixel data (rgb = 0.0, alpha = 1.0)\n    vec4 fragColor = vec4(vec3(0.0), 1.0);\n    \n    // time counts in seconds\n    // (time - x) is required, because we want to \"reset\" exp() function\n    // otherwise the output of exp() function will go down globally\n    // and we'll hear only first note\n    for (int i = 0; i < notes.length(); i++) {\n        Note note = notes[i];\n        float x = float(i) * 1.0;\n        if (time > note.offset) {\n            float amplitude = noteFreq(note, time).x;\n            // += is here because we are combining result with\n            // the \"values\" of previous and/or simultaneous notes\n            result += amplitude;\n            // result = noteFreq(note, time); // to stop previous note when next starts\n            // set color to pixel\n            fragColor.rgb += vec3(amplitude);\n            \n            // fancy colors, depending on note length\n            if (note.duration < _4_NOTE) fragColor.r += amplitude;\n            else if (note.duration < HALF_NOTE) fragColor.g += amplitude;\n            else fragColor.b += amplitude;\n        }\n    }\n    \n    // Set our pixel value to be accessible from outside\n    VISUALIZATION_PX = fragColor;\n    \n    return result;\n}","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[],"code":"////vec2 mainSound( in int samp,float time) {\n//    return _mainSound( in int samp,time);\n//","name":"Sound","description":"","type":"sound"}]}