{"ver":"0.1","info":{"id":"XXKXWW","date":"1719950887","viewed":96,"name":"lofty 3x1x1 space bricks lighted","username":"jt","description":"A lofty, symmetric \"brickwork\" of 3x1x1 bricks,\nconnected by T crossings in alternating dimensions.\nThe gaps between the bricks allow for all diagonals to pass through,\nso if realized as a building, sunlight can reach into the structure.\n","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["voxels","space","pattern","dda","brick","bricks","architecture","structure","symmetric","brickwork","3x1x1"],"hasliked":0,"parentid":"43GSz1","parentname":"lofty 3x1x1 space bricks pattern"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/XXKXWW lofty 3x1x1 space bricks lighted, 2024 by jt\n// visualize https://www.shadertoy.com/view/43GSz1 lofty 3x1x1 space bricks pattern\n// using https://www.shadertoy.com/view/dd3fDj raymarch voxels\n\n// Using https://www.shadertoy.com/view/dd3fDj raymarch voxels\n// for a better quality render of\n// https://www.shadertoy.com/view/43GSz1 lofty 3x1x1 space bricks pattern\n// respectively\n// https://www.shadertoy.com/view/l3yXRh lofty 3x1x1 space bricks essence\n\n// A lofty, symmetric \"brickwork\" of 3x1x1 bricks,\n// connected by T crossings in alternating dimensions.\n// The gaps between the bricks allow for all diagonals to pass through,\n// so if realized as a building, sunlight can reach into the structure.\n\n// NOTE: This is a subset of a mucube\n//       https://en.wikipedia.org/wiki/Regular_skew_apeirohedron\n//       and also possibly related to https://en.wikipedia.org/wiki/Laves_graph\n\n// Related to: https://www.shadertoy.com/view/l3GGR3 seven direction pencil structure\n\n// tags: voxels, dda, space, brick, bricks, symmetric, architecture, 3x1x1, brickwork, pattern, structure\n\n// The MIT License\n// Copyright (c) 2024 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// For correct ambient occlusion sample 2x2x2 voxels (slow!)\n//#define HIGH_QUALITY\n\n// https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\nfloat hash13(vec3 p3)\n{\n    p3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.zyx + 31.32);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n#define pi 3.1415926\n\nmat3 yaw_pitch_roll(float yaw, float pitch, float roll)\n{\n    mat3 R = mat3(vec3(cos(yaw), sin(yaw), 0.0), vec3(-sin(yaw), cos(yaw), 0.0), vec3(0.0, 0.0, 1.0));\n    mat3 S = mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, cos(pitch), sin(pitch)), vec3(0.0, -sin(pitch), cos(pitch)));\n    mat3 T = mat3(vec3(cos(roll), 0.0, sin(roll)), vec3(0.0, 1.0, 0.0), vec3(-sin(roll), 0.0, cos(roll)));\n\n    return R * S * T;\n}\n\nfloat sphere(vec3 p)\n{\n    return length(p) - 0.5;\n}\n\nfloat box(vec3 p, vec3 s) // adapted from https://iquilezles.org/articles/distfunctions/\n{\n    vec3 d = abs(p) - s;\n    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat round_box(vec3 p, vec3 s, float r)\n{\n    return box(p, s - r) - r;\n}\n\nfloat halfspace(vec3 p)\n{\n    return p.z + 1.0;\n}\n\nuint spacebricks(ivec3 tile) // https://www.shadertoy.com/view/XXKXWW lofty 3x1x1 space bricks lighted (jt)\n{\n    ivec3 local = tile & 3;\n\n    if(local.xy == ivec2(0,2) && local.z != 0) return 4u;\n    if(local.xy == ivec2(2,0) && local.z != 2) return 7u - 4u;\n\n    if(local.yz == ivec2(0,2) && local.x != 0) return 2u;\n    if(local.yz == ivec2(2,0) && local.x != 2) return 7u - 2u;\n\n    if(local.zx == ivec2(0,2) && local.y != 0) return 1u;\n    if(local.zx == ivec2(2,0) && local.y != 2) return 7u - 1u;\n\n    return 0u;\n}\n\n#define BLACK 0u\n#define RED 1u\n#define GREEN 2u\n#define YELLOW 3u\n#define BLUE 4u\n#define MAGENTA 5u\n#define CYAN 6u\n#define WHITE 7u\n\nvec3 decode_color(uint c)\n{\n    // NOTE: % sometimes breaks on windows so prefer &\n    return vec3((c >> 0) & 1u, (c >> 1) & 1u, (c >> 2) & 1u);\n}\n\n#define EPSILON 0.001\n#define DIST_MAX 50.0\n#define ITER_MAX 200u\n\nstruct result\n{\n    uint index;\n    float dist;\n};\n\nresult unite(result a, result b)\n{\n    if(a.dist < b.dist)\n        return a;\n    return b;\n}\n\nresult map(ivec3 v, vec3 l) // unit grid: voxel = float(position), local = fract(position)\n{\n    l -= 0.5; // local coordinates in [-0.5,+0.5]\n\n    if(v.z < -4)\n        return result(WHITE, round_box(l, vec3(0.5), 0.2));\n\n    ivec3 s = ivec3(8,4,4);\n\n    if(all(greaterThanEqual(v,-s)) && all(lessThanEqual(v,+s)))\n    {\n        uint index = spacebricks(v);\n        if(index > 0u)\n            //return result(index, sphere(l));\n            return result(index, round_box(l, vec3(0.5), 0.2));\n    }\n\n    return result(BLACK, DIST_MAX); // signal to skip this voxel\n}\n#ifdef HIGH_QUALITY\nresult map(vec3 p) // for correct ambient occlusion sample 2x2x2 voxels (slow!)\n{\n    // I think kastorp originally suggested to sample only 2x2x2 instead of 3x3x3, thanks!\n    result d = result(BLACK, DIST_MAX);\n    ivec3 s = ivec3(step(0.5, fract(p)));\n    ivec3 o;\n    for(o.z = s.z-1; o.z < s.z+1; o.z++)\n        for(o.y = s.y-1; o.y < s.y+1; o.y++)\n            for(o.x = s.x-1; o.x < s.x+1; o.x++)\n            {\n                result r = map(ivec3(floor(p))+o, fract(p)-vec3(o));\n                if(r.dist < d.dist)\n                    d = r;\n            }\n    return d;\n}\n#else\nresult map(vec3 p)\n{\n    return map(ivec3(floor(p)), fract(p));\n}\n#endif\n// https://iquilezles.org/articles/normalsSDF tetrahedron normals\nvec3 normal(vec3 p)\n{\n    const float h = EPSILON;\n    const vec2 k = vec2(1,-1);\n    return normalize(k.xyy*map(p + k.xyy*h).dist +\n                     k.yyx*map(p + k.yyx*h).dist +\n                     k.yxy*map(p + k.yxy*h).dist +\n                     k.xxx*map(p + k.xxx*h).dist);\n}\n\n// NOTE: Apparently sign fails on some systems! Thanks to spalmer for debugging this!\nvec3 sgn(vec3 v) // WORKAROUND FOR COMPILER ERROR on some systems\n{\n    return step(vec3(0), v) * 2.0 - 1.0;\n}\n\nresult trace(vec3 ro, vec3 rd, float t0, float t1) // ray-march sdf handling discontinuities between voxels  (jt)\n{\n    result h;\n    uint i;\n    float t;\n    for(t = t0, i = 0u; t < t1 && i < ITER_MAX; i++) // finite loop originally suggested by pyBlob to avoid stalling if ray parallel to surface just above EPSILON\n    {\n        vec3 p = ro + rd * t;\n\n        h = map(p);\n\n        if(h.dist < EPSILON)\n            return result(h.index, t);\n\n        // NOTE: An extra step per voxel, use if sdf discontinuous between voxels\n        //       Could make this conditional by prefixing sth. like if(voxel_changed) // suggested by spalmer, see variant below\n        // constrain step to voxels (voxel-snap ray-march plugin by jt, thanks to Shane for the idea!)\n        {\n            // NOTE: assuming unit grid\n            // sgn(rd)*0.5 are the walls in ray direction, fract(p) - 0.5 is center of voxel\n            vec3 sd = (sgn(rd)*0.5 - (fract(p) - 0.5))/rd; // distances to voxel sides / walls\n            vec3 n = step(sd.xyz, min(sd.yzx, sd.zxy)); // component true if corresponding wall is nearest (at most one component true) NOTE: originally I used lessThanEqual, min from fb39ca4/kzy then switched to step, min by iq\n            float skip = dot(sd, vec3(n)) + EPSILON; // distance to next voxel: sum up all components, weighted by the nearest flag (assuming only one component is true this selects the nearest component)\n            h.dist = min(h.dist, skip); // constrain step to at most next block to handle sdf discontinuities between voxels\n        }\n\n        t += h.dist;\n    }\n\n    //return result(h.index, t); // stop on running out of iterations\n    return result(h.index, t1); // pass on running out of iterations\n}\n\n// NOTE: Don't forget to add +normal*EPSILON to the starting position\n//       to avoid artifacts caused by getting stuck in the surface\n//       due to starting at distance < EPSILON from the surface.\n//       (normal could be calculated here but that would most likely be redundant)\n//       Thanks to spalmer for pointing that out.\nfloat shadow(vec3 ro, vec3 rd, float t0, float t1)\n{\n    return trace(ro, rd, t0, t1).dist < t1 ? 0.0 : 1.0;\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat softshadow(vec3 ro, in vec3 rd, float t0, float t1, float k)\n{\n    float res = 1.0;\n    float ph = 1e20;\n    uint i;\n    float t;\n    for(t = t0, i = 0u; t < t1 && i < ITER_MAX; i++)\n    {\n        float h = map(ro + rd*t).dist;\n        if( h < EPSILON )\n            return 0.0;\n        float y = h*h/(2.0*ph);\n        float d = sqrt(h*h-y*y);\n        res = min( res, k*d/max(0.0,t-y) );\n        ph = h;\n        t += h;\n    }\n    return res;\n}\n\n// https://www.shadertoy.com/view/Xds3zN raymarching primitives\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n    float occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.01 + 0.12*float(i)/4.0;\n        float d = map( pos + h*nor ).dist;\n        occ += (h-d)*sca;\n        sca *= 0.95;\n        if( occ>0.35 ) break;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 ) ;\n}\n\nfloat checker(vec2 p)\n{\n    return step(0.0, sin(p.x*pi)*sin(p.y*pi));\n}\n\nfloat checker(vec3 p)\n{\n    return step(0.0, sin(p.x*pi)*sin(p.y*pi)*sin(p.z*pi));\n}\n\nvec3 material(vec3 p)\n{\n    return vec3(1.0);\n    //return mix(vec3(0.25), vec3(0.75), checker(p*2.0+0.5));\n}\n\nvoid mainImage(out vec4 fragColor, vec2 I)\n{\n    bool demo = all(lessThan(iMouse.xy, vec2(10.0)));\n    vec2 R = iResolution.xy;\n    I = (2.0 * I - R) / R.y; // concise scaling thanks to Fabrice\n    float yaw = 2.0 * pi * float(iMouse.x) / float(R.x);\n    //float pitch = pi - pi / 2.0 * float(iMouse.y) / float(R.y);\n    float pitch = pi - pi * float(iMouse.y) / float(R.y);\n    yaw = !demo ? yaw : 2.0 * pi * fract(iTime * 0.01);\n    pitch = !demo ? pitch : 4.0/3.0 * pi / 2.0;\n\n    vec3 ro = vec3(0.0, 0.0,-20.0);\n    vec3 rd = normalize(vec3(I.xy, 2.0));\n\n    mat3 M = yaw_pitch_roll(yaw, pitch, 0.0);\n    ro = M * ro;\n    rd = M * rd;\n\n    //vec3 sky_color = mix(vec3(0,0.5,0.5),vec3(0,0,1),abs(-rd.z));\n    vec3 sky_color = vec3(0);\n    vec3 color = vec3(1);\n    result r = trace(ro, rd, 0.0, DIST_MAX);\n    if(r.dist < DIST_MAX)\n    {\n        color *= decode_color(r.index);\n        vec3 dst = ro + rd * r.dist;\n        vec3 n = normal(dst);\n\n        //color *= (n * 0.5 + 0.5);\n        color *= material(dst);\n\n        //vec3 lightdir = normalize(vec3(1,2,3));\n        vec3 lightdir = normalize(vec3(1,1,1));\n        vec3 ambient = vec3(0.2);\n        float brightness = max(dot(lightdir, n), 0.0);\n        if(brightness > 0.0)\n            brightness *= shadow(ro + rd * r.dist + n * 0.01, lightdir, 0.0, DIST_MAX);\n            //brightness *= softshadow(ro + rd * r.dist + n * 0.01, lightdir, 0.0, DIST_MAX, 20.0); // XXX broken XXX ?!\n        //color *= (ambient * calcAO(dst, n) + brightness);\n        color *= (ambient * calcAO(dst, n)) + brightness;\n\n        if(brightness > 0.0)\n        {\n            float specular = pow(max(0.0, dot(n, normalize(-rd + lightdir))), 250.0);\n            color += specular;\n        }\n\n        //vec3 fog_color = vec3(0.2);\n        vec3 fog_color = sky_color;\n        //color = mix(fog_color, vec3(color), exp(-pow(r.dist/20.0, 2.0))); // fog\n        color = mix(fog_color, vec3(color), exp(-pow(r.dist/DIST_MAX, 2.0))); // fog\n    }\n    else\n    {\n        color *= sky_color;\n    }\n\n    color = tanh(color); // roll-off overly bright colors\n    fragColor = vec4(color, 1);\n    fragColor = sqrt(fragColor); // approximate gamma\n}\n","name":"Image","description":"","type":"image"}]}