{"ver":"0.1","info":{"id":"ftyBDh","date":"1664387088","viewed":104,"name":"Damaged VCR practice","username":"wqwang","description":"Lab03: Wenqing Wang","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["offset"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float rand(float co) { return fract(sin(co*(91.3458)) * 47453.5453); }\n\nfloat square_wave(float x, float freq, float amplitude){\n return abs(mod(floor(x*freq), 2.0) * amplitude);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Hint, it's a few lines of code, and makes use of a tan function :)\n    vec2 warpedUv = uv;\n    \n    vec2 offset1 = vec2(0.0);\n    vec2 offset2 = vec2(0.015);\n    vec2 offset3 = vec2(0.035);\n    \n    float glitchRange = tan(iTime*0.5);\n    \n    if(uv.y > glitchRange - 0.06 && uv.y < glitchRange + 0.06)\n    {     \n      float moduleY = square_wave(uv.y, 190.0, 2.0);\n      offset1.x += moduleY * sin(uv.y) + (0.5 * rand(uv.y) - 0.5) * 0.1;\n      offset2.x += moduleY * sin(uv.y) + (0.5 * rand(uv.y) - 0.5) * 0.1;\n      offset3.x += moduleY * sin(uv.y) + (0.5 * rand(uv.y) - 0.5) * 0.1;\n    }\n    \n    float r = texture(iChannel0, warpedUv + offset1).r;\n    float g = texture(iChannel0, warpedUv + offset2).g;\n    float b = texture(iChannel0, warpedUv + offset3).b;\n    \n    vec3 col = vec3(r, g, b);\n                \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}