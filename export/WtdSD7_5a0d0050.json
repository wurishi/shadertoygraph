{"ver":"0.1","info":{"id":"WtdSD7","date":"1581103531","viewed":215,"name":"pattern of scales","username":"jiaolyulu1","description":"I tried to build scale like shape usinguv grids. Actutally the inspiration is Art of Code's video of teaching how to make hexagonal tiling. https://www.shadertoy.com/view/3sSGWt","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["2d","pattern","scale","wallpaper"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n//inspired by https://www.shadertoy.com/view/3sSGWt\n//which is made by Art of Code, teaching about how to make hexagonal tiling\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord.xy-0.5*iResolution.xy)/iResolution.y;\n\t\n    uv *=8.;\n    \n   // uv.y+=0.01*sin(fract(212.*uv.y)*231.);\n    vec2 offset = vec2(1.7,1.);\n    //creating 2 grid that offset with each other\n    vec2 st1 = mod(uv,offset)-vec2(0.5*offset.x,0.);\n    vec2 st2 = mod(uv+0.5*vec2(offset.x,-offset.y),offset)-vec2(0.5*offset.x,0.);\n    st1.x=abs(st1.x);\n    st2.x=abs(st2.x);\n    float a= length(st1);\n    float b= length(st2);\n    vec2 gv;//this will record the vector which grid this pixel belongs to\n    vec2 st;//this will translate the Cartesian coordinate system into polor coordinate system\n    int i=0;\n    float r=1.;\n    \n    st1.x*=0.5*abs(sin(iTime*1.5))+0.5;\n    st2.x*=-0.5*abs(sin(iTime*1.5))+1.1;\n    \n    //the grid is now created and distinguished\n    if (b>r){\n    \tgv=vec2(atan(st1.y,st1.x),a);\n        st= st1;\n    }\n    else{ \n        if (atan(st2.y,st2.x)<3.14/6.||((a<r)&&(st2.y<0.5)))\n        {\n            gv=vec2(atan(st1.y,st1.x),a);\n            st=st1;\n        }\n        else{\n        \tgv=vec2(atan(st2.y,st2.x),b);\n            i=1;\n            st=st2;\n        }\n    }\n    \n    //try to figure out the mouse position and its belonging grid id\n    vec2 mouse =(iMouse.xy-0.5*iResolution.xy)/iResolution.y;\n    vec2 mid= floor(mouse/offset);\n    vec2 id= floor((uv)/offset);\n    if (i==1){\n        mid = floor((mouse)/offset-0.5)+vec2(0.5);\n    \tid =floor((uv)/offset-0.5)+vec2(0.5);\n    }\n    \n    id-=mouse;\n    \n    //applying color onto the grid\n    vec4 col = 1.0*texture(iChannel0,vec2(gv.x,gv.y*5.)-vec2(0.,0.3*iTime)+id*3.7)+0.05+(id.x+id.y)*0.05;\n    float s=fract(id.x)-0.2;\n    col*=vec4(0.6+s*0.5,0.6+s*0.3,0.7-s*0.3,1.)*1.2*sqrt(abs(sin(0.1*iTime))*smoothstep(0.5,1.0,gv.x)+1.4*abs(cos(0.1*iTime))*smoothstep(0.0,0.6,gv.y))+.3;\n\t\n    \n    //if you want to see the grid, uncomment the following sentence\n    // col=vec4(id*0.2+0.5,0.,1.);\n    // Output to screen\n    fragColor = col;\n}","name":"Image","description":"","type":"image"}]}