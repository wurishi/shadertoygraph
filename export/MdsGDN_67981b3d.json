{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"\n// noise\nfloat noise(vec2 pos)\n{\n\treturn fract( sin( dot(pos*0.001 ,vec2(24.12357, 36.789) ) ) * 12345.123);\t\n}\n\n\n// blur noise\nfloat smooth_noise(vec2 pos)\n{\n\treturn   ( noise(pos + vec2(1,1)) + noise(pos + vec2(1,1)) + noise(pos + vec2(1,1)) + noise(pos + vec2(1,1)) ) / 16.0 \t\t\n\t\t   + ( noise(pos + vec2(1,0)) + noise(pos + vec2(-1,0)) + noise(pos + vec2(0,1)) + noise(pos + vec2(0,-1)) ) / 8.0 \t\t\n    \t   + noise(pos) / 4.0;\n}\n\n\n// linear interpolation\nfloat interpolate_noise(vec2 pos)\n{\n\tfloat\ta, b, c, d;\n\t\n\ta = smooth_noise(floor(pos));\t\n\tb = smooth_noise(vec2(floor(pos.x+1.0), floor(pos.y)));\n\tc = smooth_noise(vec2(floor(pos.x), floor(pos.y+1.0)));\n\td = smooth_noise(vec2(floor(pos.x+1.0), floor(pos.y+1.0)));\n\t\t\n\ta = mix(a, b, fract(pos.x));\n\tb = mix(c, d, fract(pos.x));\n\ta = mix(a, b, fract(pos.y));\n\t\n\treturn a;\t\t\t\t   \t\n}\n\n\n\nfloat perlin_noise(vec2 pos)\n{\n\tfloat\tn;\n\t\n\tn = interpolate_noise(pos*0.0625)*0.5;\n\tn += interpolate_noise(pos*0.125)*0.25;\n\tn += interpolate_noise(pos*0.025)*0.225;\n\tn += interpolate_noise(pos*0.05)*0.0625;\n\tn += interpolate_noise(pos)*0.03125;\n\treturn n;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2\tpos = fragCoord.xy;\t\t\n\tfloat\tc, n;\n\n\t\t\n\tn = perlin_noise(pos);\n\t\n\t\n\tvec2\tp = fragCoord.xy / iResolution.xy;\n\t\n\tif(p.y < 0.333) // last row\n\t{\n\t\t\n\t\tif(p.x < 0.333)\n\t\t\tc = abs(cos(n*10.0));\n\t\telse if(p.x < 0.666)\n\t\t\tc = cos(pos.x*0.02 + n*10.0);//*0.5+0.5;\n\t\telse\n\t\t{\n\t\t\tpos *= 0.05;\t\t\n\t\t\tc = abs(sin(pos.x+n*5.0)*cos(pos.y+n*5.0));\n\t\t}\n\t}\n\telse if(p.y < 0.666) // middle row\n\t{\n\t\t\n\t\tif(p.x < 0.333)\n\t\t{\n\t\t\tpos *= 0.05;\n\t\t\tpos += vec2(10.0, 10.0);\t\n\t\t\tc = sqrt(pos.x * pos.x + pos.y * pos.y);\t\n    \t\tc = fract(c+n);\n\t\t}\t\t\t\n\t\telse if(p.x < 0.666)\n\t\t{\t\t\t\n\t\t\tc = max(1.0 - mod(pos.x*0.5, 80.3+n*4.0)*0.5, 1.0 -  mod(pos.y*0.5, 80.3+n*4.0)*0.5);\t\t\t\t\t\n\t\t\tc = max(c, 0.5*max(1.0 - mod(pos.x*0.5+40.0, 80.3+n*4.0)*0.5, 1.0 -  mod(pos.y*0.5+40.0, 80.3+n*4.0)*0.5));\t\t\n\t\t}\n\t\telse\n\t\t\tc = abs(cos(pos.x*0.1 + n*20.0));// mod(pos.x*0.1, cos(pos.x));\n\t}\n\telse // first row\n\t{\n\t\tif(p.x < 0.333)\n\t\t\tc = noise(pos);\n\t\telse if(p.x < 0.666)\n\t\t\tc = n;\n\t\telse\n\t\t\tc =max(fract(n*20.0), max(fract(n*5.0), fract(n*10.0)));\n\t}\n\t\t \n\tfragColor = vec4(c, c, c, 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MdsGDN","date":"1371332066","viewed":2285,"name":"perlin noise example","username":"greg","description":"simple perlin noise implementation and few examples of use in procedural textures","likes":54,"published":1,"flags":0,"usePreview":0,"tags":["procedural","2d","perlinnoise","texture"],"hasliked":0,"parentid":"","parentname":""}}