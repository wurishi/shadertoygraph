{"ver":"0.1","info":{"id":"3sfBWB","date":"1588937846","viewed":603,"name":"Zoom blur filter","username":"luluco250","description":"Attempt to replicate the effect in GOG Galaxy 2.0's background images.","likes":3,"published":3,"flags":32,"usePreview":0,"tags":["2d","blur","zoom","filter","bloom"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float BlurZoom = 5.0;\nconst float BlurZoomInv = 1.0 / BlurZoom;\n\nconst int BlendMode_Mix = 0;\nconst int BlendMode_Screen = 1;\n\nconst int BlendMode = BlendMode_Mix;\nconst float BlendAmount = 0.5;\n\n#define scale_uv(uv, scale, center) ((uv - center) * scale + center)\n\nvec3 blend_screen(vec3 a, vec3 b, float w)\n{\n    return 1.0 - (1.0 - a) * (1.0 - b * w);\n}\n\nvoid mainImage(out vec4 color, vec2 coord)\n{\n    vec2 ps = 1.0 / iResolution.xy;\n    vec2 uv = coord * ps;\n    \n    color = texture(iChannel0, uv);\n    \n    vec3 blur = texture(iChannel1, scale_uv(uv, BlurZoomInv, 0.5)).rgb;\n    \n    if (BlendMode == BlendMode_Mix)\n        color.rgb = mix(color.rgb, blur, BlendAmount);\n    else if (BlendMode == BlendMode_Screen)\n        color.rgb = blend_screen(color.rgb, blur, BlendAmount);\n    \n    // Switch doesn't work for some machines.\n    /*switch (BlendMode)\n    {\n        case BlendMode_Mix:\n    \t\tcolor.rgb = mix(color.rgb, blur, BlendAmount);\n        \tbreak;\n        case BlendMode_Screen:\n        \tcolor.rgb = blend_screen(color.rgb, blur, BlendAmount);\n        \tbreak;\n    }*/\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage(out vec4 color, vec2 coord)\n{\n    color = texture(iChannel0, coord / iResolution.xy);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"const float Pi = 3.14159;\nconst float DoublePi = Pi * 2.0;\n\nconst int BlurSamples = 27;\nconst float BlurSigma = 7.0;\nconst float BlurScale = 2.0;\n\nfloat gaussian(float x, float sigma)\n{\n    float o = sigma * sigma;\n    return\n        (1.0 / sqrt(DoublePi * o)) *\n        exp(-((x * x) / (2.0 * o)));\n}\n\nvec3 blur(sampler2D sp, vec2 uv, vec2 dir, int samples)\n{\n    float halfSamples = float(samples) * 0.5;\n    uv -= dir * halfSamples;\n    \n    float x = -halfSamples;\n    float weight = gaussian(abs(x++), BlurSigma);\n    vec4 color = vec4(texture(sp, uv).rgb, 1.0) * weight;\n    \n    for (int i = 1; i < samples; ++i)\n    {\n        uv += dir;\n        weight = gaussian(abs(x++), BlurSigma);\n        color += vec4(texture(sp, uv).rgb, 1.0) * weight;\n    }\n    \n    color.rgb /= color.a;\n    return color.rgb;\n}\n\nvoid mainImage(out vec4 color, vec2 coord)\n{\n    vec2 ps = 1.0 / iResolution.xy;\n    \n    color.rgb = blur(\n        iChannel0,\n        coord * ps,\n        vec2(ps.x * BlurScale, 0.0),\n        BlurSamples);\n    color.a = 1.0;\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"const float Pi = 3.14159;\nconst float DoublePi = Pi * 2.0;\n\nconst int BlurSamples = 27;\nconst float BlurSigma = 7.0;\nconst float BlurScale = 2.0;\n\nfloat gaussian(float x, float sigma)\n{\n    float o = sigma * sigma;\n    return\n        (1.0 / sqrt(DoublePi * o)) *\n        exp(-((x * x) / (2.0 * o)));\n}\n\nvec3 blur(sampler2D sp, vec2 uv, vec2 dir, int samples)\n{\n    float halfSamples = float(samples) * 0.5;\n    uv -= dir * halfSamples;\n    \n    float x = -halfSamples;\n    float weight = gaussian(abs(x++), BlurSigma);\n    vec4 color = vec4(texture(sp, uv).rgb, 1.0) * weight;\n    \n    for (int i = 1; i < samples; ++i)\n    {\n        uv += dir;\n        weight = gaussian(abs(x++), BlurSigma);\n        color += vec4(texture(sp, uv).rgb, 1.0) * weight;\n    }\n    \n    color.rgb /= color.a;\n    return color.rgb;\n}\n\nvoid mainImage(out vec4 color, vec2 coord)\n{\n    vec2 ps = 1.0 / iResolution.xy;\n    \n    color.rgb = blur(\n        iChannel0,\n        coord * ps,\n        vec2(0.0, ps.y * BlurScale),\n        BlurSamples);\n    color.a = 1.0;\n}","name":"Buffer C","description":"","type":"buffer"}]}