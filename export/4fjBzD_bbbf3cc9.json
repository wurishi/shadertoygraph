{"ver":"0.1","info":{"id":"4fjBzD","date":"1724778043","viewed":83,"name":"Cosmic clock 8","username":"ChunderFPV","description":"A refinement of the last version with some subtle additions: https://www.shadertoy.com/view/dsBBzy","likes":9,"published":1,"flags":0,"usePreview":1,"tags":["2d","clock","spiral","polygon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define H(a) (cos(vec3(0,1,2)+(a)*6.3)*.5+.5)  // hue\n#define N(r) ((abs(r) > 1.) ? 1./(2.*sign(r)-r): r)  // range +/-2 to number line\n#define DS(s, t) clamp(w/length((u-cos(t*(pi2*h-cr+pi2)-vec2(0, pi_2))*q)),s,1.)  // denominator spiral\n#define CH(t) exp(-length(o-sin(t*pi2+vec2(0,pi_2)))/w)  // clock hand\n\n// polygon (coords, value, limit, line size)\nfloat P(vec2 u, float a, float l, float w)\n{\n    a *= 6.2832;\n    l /= 2. - 1.; // lim\n    float c = 0., i = c,\n          r = cos(a/2.), // inradius\n          s = sign(a),   // arc polarity\n          x = atan(u.x, u.y), // x to angular\n          y = length(u);      // y to radial\n    if (a == 0.) c = w/abs(1.-y); // draw circle at arc 0\n    else for (; i++<l;)\n        c = max(c, w/abs( r/cos((fract(x/a)   -.5)*a)-y)), // inner poly\n        c = max(c, w/abs(1./cos((fract(x/a+.5)-.5)*a)-y)), // outer poly\n        x += 6.2832*s;\n    return min(1., c);\n}\n\n// digit display from https://www.shadertoy.com/view/stlSzM\n#define bcd(i) (i/10*6+i)\n#define digit(u,i) texture(iChannel0, (u)/16.+vec2(float(i)/16., .75)).x\n#define draw_digit(c,u,i) if(abs(u).x < .5 && abs(u).y < .5) c += (1.-c)*digit(u+.5, i)\n#define draw_bcd(c,u,i,b) if (b) draw_digit(c, u, (i&0xf0)>>4); draw_digit(c, u-vec2(.5,0),(i&0xf))\n\n// draw time: coords, offset, size\nfloat dt(vec2 u, vec2 o, float s)\n{\n    u -= o; // offset\n    u /= s; // size\n    float c = 0.,\n          t = iDate.w;\n    ivec2 d = ivec2(mod(t/3600., 12.), mod(t/60., 60.)); // hour, min\n    if (d.x == 0) d.x = 12; // change 0 to 12\n    u.x += .85;\n    draw_bcd(c, u, bcd(d.x), (d.x > 9)); // 1st & 3rd digits\n    u.x -= .85;\n    draw_digit(c, u, 10); // colon\n    u.x -= .35;\n    draw_bcd(c, u, bcd(d.y), true); // 2nd & 4th digits\n    return c;\n}\n\nvoid mainImage(out vec4 C, in vec2 U)\n{\n    vec2 R = iResolution.xy,\n         m = (iMouse.xy - R/2.)/R.y*4.,  // mouse coords\n         u = (U - R/2.)/R.y,  // screen coords\n         o = u;\n    \n    float s = 500., // scale\n          l = 30.,  // detail loop\n          f = 3.,   // frame scale\n          k = 1.8,  // clamp strength (max 2)\n          pi2 = 6.2832,\n          pi_2 = 1.5708,\n          t2 = 7.5*(sin(iTime*pi2/60.)*.01+.99),  // oscillate slowly\n          e = N(clamp(m.y, -k, k)),  // exponent from mouse y\n          z = pow(s, e)*f;  // zoom\n    \n    vec3 c = vec3(0),  // background color\n         t = mod(iDate.w/vec3(43200, 3600, 60), 1.),  // hour, min, sec to ratio\n         fc = H(length(o)*f),   // frame color\n         ch;\n    \n    u *= z;  // scale coords\n    u = u.yx; m = m.yx;  // flip to clock orientation\n    \n    float cr = s*6.2832,              // ds counter rotation\n          fr = sqrt(t2*s*2.)*pi2,     // fs counter rotation\n          r = exp(log(length(u))/e),  // exponent affected radius\n          w = fwidth(u.y)*R.y/1000.,  // point size\n          i = 0., pf = i, h, q, d, a, p12;\n    \n    vec4 v = vec4(0);  // store spirals here\n    for (; i++<l;)  // detail loop for spirals\n        h = max(0., round((r-i)/l))*l+i,  // skip rows (for overlapping)\n        q = pow(h, e),\n        v.x = DS(v.x, t.x),  // hour\n        v.y = DS(v.y, t.y),  // min\n        v.z = DS(v.z, t.z),  // sec\n        v.w = clamp(w/length((u-cos(pi2*sqrt(abs(t2)*h*2.)-fr-vec2(0, pi_2))*q)), v.w, 1.);\n    \n    d = pow(length(o*f), .5/e);  // frame radius\n    d = min(d, 1./d);  // ring\n    v *= d;  // darken limits\n    \n    // color & draw spirals\n    c += (v.x + v.x*fc)*.5;  // hour\n    c += (v.y + v.y*fc)*.3;  // min\n    c += (v.z + v.z*fc)*.1;  // sec\n    c += v.w + v.w*fc;\n    \n    o *= f;  // scale\n    l = 12.;  // poly limit\n    for (i = 0.; i++<5.;)  // loop through to make a few polygons\n        pf = max(pf, P(o, i/l, l, .01));  // add poly\n    c -= c*pf*.3;  // poly frame (dark)\n    c += .3*fc * (1.-abs(sin(t.z*pi2*6.))) * P(o, round((mod(t.z+.5, 1.)-.5)*l)/l, l, .01); // glowy poly\n    \n    w = fwidth(o.y)*R.y/50.;  // point size\n    ch = vec3(CH(t.x), CH(t.y), CH(t.z));  // clock hands\n    c += .7 * (ch + pow(ch.x+ch.y+ch.z, 2.));\n    \n    r = length(o);  // radius\n    c += .3 * pow(min(r, 1./r), 3.) * H(sign(e)*r);  // clock frame\n    a = round(atan(o.x, o.y)/pi2*12.)/12.*pi2;  // segmented arc\n    p12 = min(1., .5*w/length(o-sin(a+vec2(0, pi_2)))); // 12 pts\n    c += (1.-p12)*p12*p12;  // add points\n    c += dt(o/f, vec2(.0, .45), .1) * (1.-fc)*.5; // digit display\n    \n    C = vec4(tanh(c + c*c), 1);  // add c squared for contrast, tanh to prevent blowout\n}","name":"Image","description":"","type":"image"}]}