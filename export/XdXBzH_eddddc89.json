{"ver":"0.1","info":{"id":"XdXBzH","date":"1494752286","viewed":251,"name":"Bokeh Effect Test","username":"gaz","description":"bokeh","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["bokeh"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI\t3.14159265359\n#define PI2\tPI*2.0\n\nmat3 rotate(in vec3 axis, in float theta)\n{\n  axis = normalize(axis);\n  float x = axis.x, y = axis.y, z = axis.z, s = sin(theta), c = cos(theta), o = 1.0-c;\n  return mat3(\n    o*x*x+c,o*x*y+z*s,o*z*x-y*s,\n    o*x*y-z*s,o*y*y+c,o*y*z+x*s,\n    o*z*x+y*s,o*y*z-x*s,o*z*z+c);\n}\n\nfloat udRoundBox(in vec3 p, in vec3 b, in float r )\n{\n  return length(max(abs(p)-b,0.0))-r;\n}\n\nfloat map(in vec3 p)\n{\n    p *= rotate(vec3(0,1,0), iTime * 0.3) *\n         rotate(vec3(1,0,0), 0.7);\n    float a = atan(p.y, p.x);\n    p.xy += -0.1 * smoothstep(0.2, 0.0, abs(p.z)) * vec2(cos(a), sin(a));\n    a = atan(p.z, p.y);\n\tp.yz += -0.1 * smoothstep(0.4, 0.2, abs(p.x)) * vec2(cos(a), sin(a));\n    a = atan(p.x, p.z);\n    p.zx += 0.1 * smoothstep(0.3, 0.1, abs(p.y)) * vec2(cos(a), sin(a));\n    return udRoundBox(p,vec3(1),0.5);\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    vec2 e = vec2(1.0, -1.0) * 0.002;\n    return normalize(\n        e.xyy * map(pos + e.xyy) + \n        e.yyx * map(pos + e.yyx) + \n        e.yxy * map(pos + e.yxy) + \n        e.xxx * map(pos + e.xxx));\n}\n\nfloat intersect(in vec3 ro, in vec3 rd)\n{\n    const float maxd = 10.0;\n    const float precis = 0.001;\n    float h = 1.0;\n    float t = 0.0;\n    for(int i = 0; i < 64; i++)\n    {\n        if(h < precis || t > maxd) break;\n        h = map(ro + rd * t);\n        t += h;\n    }\n    if( t > maxd ) t = -1.0;\n    return t;\n}\n\n// https://www.shadertoy.com/view/4djSRW\nvec2 hash21(float p)\n{\n\tvec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n\tp3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\n#define A 12.0 \n#define B 0.2 * sin(iTime * 0.7)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n\tvec3 col = mix(vec3(0.5, 0.6, 0.7), vec3(0.8, 0.3, 0.1), smoothstep(0.5, 3.0, length(p)));    \n    vec3 col2 = vec3(0);   \n    for(float i = 0.0; i < A; i++){\n    \tvec3 rd = normalize(vec3(p, -1.8));\n        vec3 offset = normalize(cross(rd, vec3(0, 1, 0))) * B;\n        vec2 g = hash21(i*27746.2389);\n        vec3 ro = vec3(0, 0, 5)+ rotate(rd, PI2 * g.x) * offset * g.y;\n        vec3 col3 =col;       \n    \tfloat t = intersect(ro, rd);\n    \tif(t > -0.001)\n    \t{\n        \tvec3 pos = ro + t * rd;\n        \tvec3 nor = calcNormal(pos);\n\t\t\tvec3 li = normalize(vec3(0.5, 0.8, 3.0));\n    \t\tcol3 = mix(vec3(0.2, 0.6, 0.1), vec3(0.8, 0.3, 0.15), smoothstep(-2.1, 1.5, pos.x));\n        \tcol3 *= max(dot(li, nor), 0.2);\n        \tcol3 += pow(max(dot(vec3(0, 0, 1), reflect(-li, nor)), 0.0), 30.0);\n     \t}\n       \tcol2 += col3;        \n    }\n    col2 /= A;\n    col2 = pow(col2, vec3(0.8));   \n    fragColor = vec4(col2, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}