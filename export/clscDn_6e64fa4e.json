{"ver":"0.1","info":{"id":"clscDn","date":"1729266482","viewed":44,"name":"Escape Time Box 3","username":"AlwaysElise","description":"what if a fractal and a raymarched sdf had a child, and that child had reflection\nand also some artifacts bc sdf reflections just kinda do that when you curve the rays\nbut then the artifacts were turned into the main event","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["sdf","fractals","2amlogic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float box( vec3 p, vec3 size )\n{\n    vec3 d = abs( p ) - size;\n    return min( 0., max( d.x, max( d.y, d.z ) ) ) +\n        length( max(d, 0.) );\n}\n\nvec3 norm( vec3 p ) {\n    float minDistOrig = box(p, vec3( 1., 0.5, 1. ));\n    vec3 minDistOffset = vec3( box( p + vec3( 0.001, 0., 0. ), vec3( 1., 0.5, 1. ) ),\n          box( p + vec3( 0., 0.001, 0. ), vec3( 1., 0.5, 1. ) ),\n          box( p + vec3( 0., 0., 0.001 ), vec3( 1., 0.5, 1. ) ) );\n    vec3 normal = normalize( minDistOffset + -minDistOrig );\n    return normal;\n}\n\nvec2 r2( vec2 i, float a )\n{\n    return vec2( i.x * cos(a) + i.y * sin(a), i.x * -sin(a) + i.y * cos(a) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 rayDirection = normalize( vec3( uv - 0.5, 0.5 ) );\n    vec3 position = vec3( 0., 0., -5. );\n    \n    rayDirection.xz = r2( rayDirection.xz, iTime*.15 );\n    position.xz = r2( position.xz, -iTime*.15 );\n    \n    vec3 col = vec3( 0., 0., 0. );\n    float minDist = 0.;\n    int i = 0;\n    float hits = 0.f;\n    for( ; i < 50; i++ )\n    {\n        minDist = box(position, vec3( 1., 0.5, 1. ));\n        if( minDist > 100.0 )\n            break;\n        \n        if( minDist < 0.01 ) {\n            col.rgb += vec3( position.xyz )*.5+.5;\n            vec3 normal = norm( position );\n            rayDirection = reflect( rayDirection, normal );\n            position += rayDirection * minDist * 2.;\n        }\n        rayDirection.xy = r2( rayDirection.xy, minDist );\n        float param_cycle = (150.-abs(mod(iTime+120., 600.)-300.f))*0.01;\n        rayDirection -= position * param_cycle * 0.1;\n        rayDirection = normalize(rayDirection);\n        position += minDist * rayDirection;\n    }\n    //if( minDist < 0.01 )\n    //    col.rgb = vec3( position.xyz )*.5+.5;\n    if( minDist > 100. )\n        col.rgb = vec3(1.,1.,1.) * float(50-i) / 50.;\n    //col.rgb *= vec3( float(75-i)/75.);\n    col.rgb *= 0.1;\n    //col.rgb = norm( position );\n    \n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}