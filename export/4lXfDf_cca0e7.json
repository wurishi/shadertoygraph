{"ver":"0.1","info":{"id":"4lXfDf","date":"1513689815","viewed":519,"name":"A-Eye","username":"whitenoise","description":"Noise functions are from the 'Digital Brain' shader. Featured in the game Eternal Starlight VR. https://store.steampowered.com/app/676030/Eternal_Starlight_VR/","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["techeye"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","previewfilepath":"/media/ap/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// 1D random numbers\nfloat rand(float n)\n{\n    return fract(sin(n) * 43758.5453123);\n}\n\n// 2D random numbers\nvec2 rand2(in vec2 p)\n{\n\treturn fract(vec2(sin(p.x * 591.32 + p.y * 154.077), cos(p.x * 391.32 + p.y * 49.077)));\n}\n\n// 1D noise\nfloat noise1(float p)\n{\n\tfloat fl = floor(p);\n\tfloat fc = fract(p);\n\treturn mix(rand(fl), rand(fl + 1.0), fc);\n}\n\n// voronoi distance noise, based on iq's articles\nfloat voronoi(in vec2 x)\n{\n\tvec2 p = floor(x);\n\tvec2 f = fract(x);\n\t\n\tvec2 res = vec2(8.0);\n\tfor(int j = -1; j <= 1; j ++)\n\t{\n\t\tfor(int i = -1; i <= 1; i ++)\n\t\t{\n\t\t\tvec2 b = vec2(i, j);\n\t\t\tvec2 r = vec2(b) - f + rand2(p + b);\n\t\t\t\n\t\t\t// chebyshev distance, one of many ways to do this\n\t\t\tfloat d = max(abs(r.x), abs(r.y));\n\t\t\t\n\t\t\tif(d < res.x)\n\t\t\t{\n\t\t\t\tres.y = res.x;\n\t\t\t\tres.x = d;\n\t\t\t}\n\t\t\telse if(d < res.y)\n\t\t\t{\n\t\t\t\tres.y = d;\n\t\t\t}\n\t\t}\n\t}\n\treturn res.y - res.x;\n}\n\nfloat ring(in vec2 pos, float _min, float _max, float lines, float thick, float rot)\n{\n    float ang = atan(pos.y, pos.x) + rot;\n    float wrapped = fract(mod((ang / 3.14159265359), 1.0) * lines);\n    float v = 4.0*smoothstep(0.0, thick, wrapped) * smoothstep(thick, 0.0, wrapped);\n    \n    float d = length(pos);\n    \n    \n    v = (v * step(_min, d) * (1.0 - step(_max, d)));\n    return pow(v, 0.4);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float flicker = noise1(iTime * 2.0) * 0.8 + 0.4;\n\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\tuv = (uv - 0.5) * 2.0;\n\tvec2 suv = uv;\n\tuv.x *= iResolution.x / iResolution.y;\n    \n    float amp1 = 1.0 - voronoi(uv + vec2(iTime*0.1, 0.0));\n    float amp2 = 1.0 - voronoi(uv * 2.5 + vec2(4.5 + - iTime*0.05, 5.5 - iTime*0.1));\n    \n\n    \n    \n    amp1 = 2.0*smoothstep(0.945, 0.99, amp1) * smoothstep(0.99, 0.945, amp1) + 3.0*smoothstep(0.84, 0.86, amp1)*smoothstep(0.86, 0.840, amp1) +\n        + 2.0*smoothstep(0.74, 0.76, amp1)*smoothstep(0.76, 0.740, amp1);\n    amp2 = 0.25*smoothstep(0.95, 1.0, amp2) + 1.5*smoothstep(0.74, 0.76, amp2)*smoothstep(0.76, 0.740, amp2);\n\tamp2 *= 2.0;\n    amp2 += 0.5;\n    \n  \n    // uncomment for weird mode\n    \n    /*\n    uv.x += 0.1*sin(iTime*0.34) * cos(iTime*0.11313);\n\n    uv.y += 0.8 * abs(uv.x) * max(suv.y, 0.0);\n   \tuv.y = uv.y * uv.y * 1.2;\n    */\n    \n    // weird mode option 2\n    //uv.xy *= uv.xy;\n\n    float rings = 0.5 * ring(uv + vec2(sin(iTime*1.3513)*sin(iTime*2.)*0.01, (sin(iTime*1.33)*0.05)), 0.1, 0.35, 5. + floor(15.*rand(floor(sin(15.0 * iTime)))), 0.2, sin(iTime*0.5)  * noise1(10.0 * iTime) ) +\n            ring(uv, 0.5, 0.80, 11.0, 0.17, -iTime * 0.25) +\n        ring(uv, 0.7, 0.95, 3.0, 0.67 * abs(noise1(4.0 * iTime)), sin(iTime * 2.335) * noise1(4.0 * iTime) )\n        ;\n    \n\n        \n        \n    rings *= 2.0;\n    // vignetting\n    vec2 sc = (fragCoord.xy/iResolution.xy)*2.-1.;\n    float vign = (1.1-.5*dot(sc.xy,sc.xy));\n    float midShad = length(uv) * 0.5;\n    midShad *= midShad;\n    vec4 col = vec4(0.0, 0.6, 0.9, 1.0);\n    //col = vec4(1.0, 0.2, 0.2, 1.0);\n    fragColor = col * (18.0*amp1*amp1 * amp2 * midShad + rings) * vign * vign;\n}","name":"Image","description":"","type":"image"}]}