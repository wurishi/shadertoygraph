{"ver":"0.1","info":{"id":"wlKyWR","date":"1610995870","viewed":69,"name":"Raymarched Apple","username":"mothman","description":"practice shader based on\nhttps://www.youtube.com/watch?v=CHmneY8ry84","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float hash(float n){\n    return fract(sin(n)*43758.5453);\n}\nfloat noise(in vec3 pos)\n{\n    vec3 p = floor(pos);\n    vec3 k = fract(pos);\n    k = k*k*(3.0f-2.0f*k);\n    float n = p.x + p.y * 57.0 + p.z * 113.0; //seed\n    \n    float a = hash(n);\n    float b = hash(n+1.0);\n    float c = hash(n+57.0);\n    float d = hash(n+58.0);\n    \n    float e = hash(n+113.0);\n    float f = hash(n+114.0);\n    float g = hash(n+170.0);\n    float h = hash(n+171.0);\n    \n    float res = mix(mix(mix(a,b,k.x),mix(c,d,k.x),k.y),\n                    mix(mix(e,f,k.x),mix(g,h,k.x),k.y),\n                    k.z);\n    return res;\n}\nfloat fbm(in vec3 pos)\n{\n    vec3 p = pos;\n    float f = 0.5000*noise(p); p*=2.02;\n    f += 0.2500*noise(p); p*=2.03;\n    f += 0.1250*noise(p); p*=2.01;\n    f += 0.0625*noise(p);\n    return f/0.9375;\n}\nvec3 tableMaterial(in vec3 pos, in vec3 norm)\n{\n    vec3 col = vec3(0.8,0.7,0.2);\n    float f = fbm(pos*vec3(6.0,0.0,0.5));\n    col = mix(col,vec3(0.3,0.2,0.1),f);\n    f = smoothstep( 0.6, 1.0, fbm(pos*48.0));\n    col = mix( col, vec3(0.2,0.2,0.15), f);\n    \n    float ao = 0.2 + 0.8*smoothstep( 0.4,2.0, length( pos.xz));\n    col *= ao;\n    return col;\n}\nvec3 fruitMaterial(in vec3 pos, in vec3 norm)\n{\n    \n    float a = atan( pos.x, pos.y);\n    float r = length(pos.xz);\n    vec3 col = vec3(1.0,0.2,0.02);\n    \n    //col += vec3(0.0,0.50,0.0);//*fbm(pos);\n    \n    //Make it green\n    float f = smoothstep(0.2,1.0f,fbm((pos)));\n    col = mix(col, vec3(0.8,1.0,0.2),f);\n    \n    //Make it dirty\n    f = smoothstep(0.0,1.0,fbm(pos*4.0));\n    col *= 0.7 + 0.3*f;\n    \n    //Freckles\n    f = smoothstep(0.7,0.9,fbm(pos*48.0));\n    col = mix(col,vec3(0.9,1.0,0.6),f);\n    \n    // stripes\n    f = fbm( vec3(a*7.0, pos.y, pos.z));\n    f *= smoothstep( 0.4, 1.2, pos.y + 0.5 * ( noise(pos.yxz)-0.5));\n    col = mix(col, vec3(0.4,0.2,0.0),f);\n    \n    // top cap\n    f = smoothstep( 0.1, 0.2, r);\n    col = mix( col, vec3(0.6,0.6,0.5),1.-f);\n    //Fake AO\n    float ao = 0.55 + 0.45*norm.y;\n    col *= ao;\n    return col;\n}\nvec2 fruitShape(in vec3 pos)\n{\n    float f = pow(dot(pos.xz,pos.xz),0.2);\n    pos.y -= 0.5*f;\n    vec2 d = vec2(length(pos-vec3(0.0,0.0,0.0))-1.0 ,1.0);\n    return d;\n}\nvec2 tableShape(in vec3 pos)\n{\n    vec2 d = vec2(length(pos.y + 0.5),2.0);\n    return d;\n}\nvec2 map(in vec3 pos)\n{\n    vec2 d1 = fruitShape(pos);\n    vec2 d2 = tableShape(pos);\n    if(d2.x < d1.x)\n    {\n        d1 = d2;\n    }\n    return d1;\n}\nfloat softShadows(in vec3 ro, in vec3 rd)\n{\n  float res = 1.0;\n  for(float t = 0.1; t < 8.0f;)\n  {\n      float h = map( ro + rd*t).x;\n      if(h < 0.01) return 0.0f;\n      res = min(res,6.0f*h/t);\n      t += h;\n  }\n  res = smoothstep(0.0,1.0,res);\n  //res = sqrt(res);\n  return res;\n}\nvec2 intersect(in vec3 ro, in vec3 rd)\n{\n    for( float t = 0.0; t < 8.0;){\n        vec2 h = map( ro + rd*t);\n        if(h.x < 0.0001) return vec2(t,h.y);\n        t += h.x;\n    }\n    return vec2(0.);\n}\nvec3 calcNorm(in vec3 pos)\n{\n    vec3 e = vec3(0.0001,0.0,0.0);\n    vec3 n;\n    n.x = map(pos+e.xyy).x - map(pos - e.xyy).x;\n    n.y = map(pos+e.yxy).x - map(pos - e.yxy).x;\n    n.z = map(pos+e.yyx).x - map(pos - e.yyx).x;\n    \n    return normalize(n);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 q = vec2(-1.0+2.0*uv)*vec2(iResolution.x/iResolution.y,1.0);\n //   vec3 ro = vec3(0.0,0.00,2.40);\n   vec3 ro = 2.0*vec3(cos(iTime), 0.0, sin(iTime))+vec3(0,2.,0.0);\n   //vec3 rd = vec3( vec2(-1.0 +2.0*uv),-1.0);\n   //vec3(0.0,0.00,-3.50));\n    vec3 ww = normalize(-ro);\n    vec3 uu = normalize(cross(vec3(0.,1.,0.),ww));\n    vec3 vv = normalize(cross(ww,uu));\n    vec3 rd = normalize( uu* q.x + vv * q.y + 1.5* ww);\n    vec2 t = intersect(ro, rd);\n    vec3 col = vec3(0.80);\n    if(t.y > 0.5)\n    {\n        vec3 pos = ro + t.x*rd;\n        vec3 norm = calcNorm(pos);\n        vec3 lig = normalize(vec3(1.0,0.80,0.60));\n        vec3 blig = vec3( -lig.x, lig.y, -lig.z);\n        float diff = max(dot(lig,norm),0.0);\n        float bac = max( 0.0, 0.2+ 0.8*dot(norm,blig));\n        vec3 ref = normalize(reflect(rd,norm));\n        float spe = pow(clamp(dot(ref,lig),0.0,1.0),32.0);\n        float rim = pow(1.0 + dot(norm,rd),2.5);\n        float con = 1.0;\n        float amb = 0.5+0.5*norm.y;\n        float sha = softShadows(pos,lig);\n        \n        //col = vec3(1.0,1.0,1.0);\n        col = con*vec3(0.1,0.15,0.2);\n        col += amb*vec3(0.1,0.15,0.2);\n        col += diff*vec3(1.0,0.97,0.85)*sha;\n        col += bac*vec3(1.0,0.97,0.85);\n        col = col*0.3 + 0.7*sqrt(col);\n        col *= 0.5;\n        if(t.y > 1.5)\n        {\n            col *= tableMaterial(pos,norm);\n        }\n        else\n        {  \n            col *= fruitMaterial(pos,norm);\n        }\n        col += 0.3*rim*amb;\n        col += 0.7*spe*sha*amb;\n    }\n    col *= 0.2 + 0.8*pow(uv.x*uv.y*(1.0-uv.x)*(1.0-uv.y),0.10);\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}