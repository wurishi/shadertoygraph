{"ver":"0.1","info":{"id":"WlfBzs","date":"1597416895","viewed":109,"name":"normal map from texture","username":"iamsaitam","description":"A simple way to get a normal map from a texture","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["normalmap"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// thanks to thi.ng -> https://twitter.com/thing_umbrella/status/1293286951223787521\n// N(x,y) = normalize([I(x-s,y)-I(x+s,y), I(x,y-s)-I(x,y+s), 1])\nvec3 normalMap(sampler2D tex, vec2 uv, vec2 st, float stp, float str) {\n    stp = clamp(stp, 0.0, 8.0);\n    str = clamp(str, 0.0, 8.0);\n    st *= stp;\n    \n \tvec3 L = texture(tex, uv + vec2(-st.x, 0.0)).rgb;\n    vec3 R = texture(tex, uv + vec2(st.x, 0.0)).rgb;\n    vec3 U = texture(tex, uv + vec2(0.0, -st.y)).rgb;\n    vec3 D = texture(tex, uv + vec2(0.0, st.y)).rgb;\n    \n    return normalize(vec3((L - R).x * str, (U-D).y * str, 1.0));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{ \n\tvec2 uv = fragCoord / iResolution.xy;\n    vec2 st = 1.0 / iResolution.xy;\n    vec3 t = texture(iChannel0, uv).rgb;\n   \n    \n    vec3 normal = normalMap(iChannel0, uv, st, uv.x * 8.0, uv.x * 8.0);\n    \n \n    fragColor = vec4(normal * 0.5 + 0.5,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define PHI 1.61803398875\n\n\nfloat parabola( float x, float k ){\n    return pow( 4.0 * x * (1.0-x), k );\n}\n\nfloat ring(vec2 uv, float s, float k, float time) {\n    float l = mod(length(uv * s) - time, 1.0);\n    return parabola(l, k);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (2.0 * fragCoord - iResolution.xy)/min(iResolution.x, iResolution.y);\n    \n    vec2 st = 1.0 / iResolution.xy;\n    \n    float time = iTime * 0.8;\n    float k = PHI;\n    \n    float rings = ring(uv, 2.0, k, time);\n    \n    vec3 col = vec3(rings);\n    \n    \n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}