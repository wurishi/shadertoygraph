{"ver":"0.1","info":{"id":"7dfSR7","date":"1618743081","viewed":70,"name":"WitchOctahedron","username":"sgorbunov","description":"Горбунов Сергей, 316\nБазовая часть - 20 баллов.\nДополнительная часть:\n- мягкие тени (+2-3);\n- анти-алиасинг (+2);\n- окружение в виде текстурированной плоскости (+1);\n- окружение в виде текстурированного куб-мапа (+2);\n- сцена сделана реалистично.","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["raytracing","raymarching","water","octahedron"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv) / float(iFrame + 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4sfGRr","filepath":"/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","previewfilepath":"/media/ap/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","type":"volume","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4df3Rr","filepath":"/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","previewfilepath":"/media/ap/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float INF = 1e10;\nconst float EPS = 1e-5;\n\nconst float MARCH_SIZE = 0.1;\nint MAX_STEPS = 100;\nconst float ABSORPTION = 0.5;\n\nconst vec3 CAMERA_POS = vec3(1.2, 1.5, -6);\n\nfloat TABLE_Y = -1.15;\nfloat TABLE_R = 4.0;\n\nconst vec3 LIGHT1_POS = vec3(2, 1, 1);\nconst float LIGHT1_RAD = 0.3;\nconst vec3 LIGHT1_C = vec3(0.93, 0.63, 0.93);\n\nconst vec3 LIGHT2_POS = vec3(-2.3, 0.7, 0.5);\nconst float LIGHT2_RAD = 0.3;\nconst vec3 LIGHT2_C = vec3(1, 0.65, 0);\n\nconst vec3 OCTAHEDRON_POS = vec3(0, 0, 0);\nconst float OCTAHEDRON_RAD = 1.0;\nconst int NUMBER_OF_VERTICES = 6;\nvec3 vertices[NUMBER_OF_VERTICES] = vec3[NUMBER_OF_VERTICES](\n    vec3(-1, 0, 0)*OCTAHEDRON_RAD,\n    vec3(0, 0, -1)*OCTAHEDRON_RAD,\n    vec3(1, 0, 0)*OCTAHEDRON_RAD,\n    vec3(0, 0, 1)*OCTAHEDRON_RAD,\n    vec3(0, 1, 0)*OCTAHEDRON_RAD,\n    vec3(0, -1, 0)*OCTAHEDRON_RAD\n    );\n\nconst float CYLINDER_RAD = 1.0;\nconst float CYLINDER_H = 0.15;\n\nconst vec3 WATER_POS = vec3(0, 0, 0);\nconst float WATER_RAD = 0.5;\nconst vec3 WATER_C = vec3(0.43, 0.8, 1);\n\nvec3 randVals;\nvec3 randDir;\n\nfloat pow2(float x)\n{\n    return x * x;\n}\n\nfloat rand(float frame)\n{\n    return fract(sin(dot(vec3(frame), vec3(12.9898,78.233,45.5432))) * 43758.5453);\n}\n    \nfloat traceCircle(vec3 pos, vec3 dir, float h, float r, out vec3 normal)\n{\n    // (pos + t * dir).y = H \n    // t = (H - pos.y) / dir.y\n    float t = (h - pos.y) / dir.y;\n    if(t <= 0.0){\n        return INF;\n    }\n    vec3 worldPos = pos + dir * t;\n    if(dot(worldPos.xz, worldPos.xz) >= r * r){\n        return INF;\n    }\n    normal = vec3(0, 1, 0);\n    return t;\n}\n\nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal)\n{\n    // dot(pos + t * dir, pos + t * dir) == r * r;\n    // dot(pos, pos) + 2 * t * dot(pos, dir) + t * t * dot(dir, dir) == r * r\n    float a = dot(dir, dir);\n    float b = dot(pos, dir);\n    float c = dot(pos, pos) - r * r;\n    float D = b * b - a * c;\n    if (D < 0.0){\n        return INF;\n    }\n    float t = -b - sqrt(D);\n    if (t > 0.0){\n        normal = normalize(pos + t* dir);\n        return t;\n    }\n    t = -b + sqrt(D);\n    if (t < 0.0){\n        return INF;\n    }\n    normal = normalize(pos + t* dir);\n    return t;\n}\n\nfloat traceTriangle(vec3 pos, vec3 dir, vec3 v0, vec3 v1, vec3 v2, out vec3 normal)\n{\n    //Möller–Trumbore intersection algorithm\n    vec3 e1 = v1 - v0;\n    vec3 e2 = v2 - v0;\n    vec3 pvec = cross(dir, e2);\n    float det = dot(e1, pvec);\n    if (det < 1e-8 && det > -1e-8) {\n        return INF; // parallel to the triangle\n    }\n    float inv_det = 1.0 / det;\n    vec3 tvec = pos - v0;\n    float u = dot(tvec, pvec) * inv_det;\n    if (u < 0.0 || u > 1.0) {\n        return INF;\n    }\n    vec3 qvec = cross(tvec, e1);\n    float v = dot(dir, qvec) * inv_det;\n    if (v < 0.0 || u + v > 1.0) {\n        return INF;\n    }\n    float t = dot(e2, qvec) * inv_det;\n    normal = normalize(v0 + v1 + v2);\n    if(t <= 0.0){\n        return INF;\n    }\n    return t;\n}\n\nfloat traceOctahedron(vec3 pos, vec3 dir, out vec3 normal)\n{\n    float t = INF;\n    float tmp;\n    vec3 n;  \n    for(int j = 0; j < 2; j++){\n        for(int i = 0; i < 4; i++){\n            tmp = traceTriangle(pos, dir, vertices[4 + j], vertices[i], vertices[(1 + i) % 4], n);\n            if(tmp < t && tmp > 0.0){\n                t = tmp;\n                normal = n;\n            }\n        }\n    }\n    return t;  \n}\n\nfloat traceCylinder(vec3 pos, vec3 dir, float y0, float h, float r, out vec3 normal)\n{\n    // (pos + t * dir).y = H \n    // t = (H - pos.y) / dir.y\n    float t = (y0 + h - pos.y) / dir.y;\n    if(t <= 0.0){\n        return INF;\n    }\n    vec3 worldPos = pos + t * dir;\n    if(dot(worldPos.xz, worldPos.xz) < r * r){\n        normal = vec3(0, 1, 0);\n        return t;\n    }\n    //dot(pos.xz + t * dir.xz, pos.xz + t * dir.xz) = r * r\n    //t * t * dot(dir.xz, dir.xz) + 2 * t * dot(pos.xz, dir.xz) + dot(pos.xz, pos.xz) - r * r = 0\n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - r * r;\n    float D = b * b - a * c;\n    if(D < 0.0){\n        return INF;\n    }\n    t = (-b - sqrt(D)) / a;\n    if(t > 0.0){\n        worldPos = pos + t * dir;\n        if(worldPos.y >= y0 && worldPos.y <= y0 + h){\n            normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n            return t;\n        }\n    }\n    t = (-b + sqrt(D)) / a;\n    if (t < 0.0) {\n        return INF;\n    }\n    worldPos = pos + t * dir;\n    if(worldPos.y >= y0 && worldPos.y <= y0 + h){\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    }\n    return INF;\n\n}\n\nbool isOccluded(vec3 pos, vec3 target)\n{\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n    vec3 octahedronN;\n    float octahedronT = traceOctahedron(pos - OCTAHEDRON_POS, dir, octahedronN);\n    if (octahedronT < dist){\n        return true;\n    }\n    vec3 cylN;\n    float cylT = traceCylinder(pos + dir * EPS, dir, TABLE_Y, CYLINDER_H, CYLINDER_RAD, cylN);\n    return (cylT < dist);\n}\n\nvec3 computeLight(vec3 pos, vec3 color, vec3 normal)\n{\n    vec3 l1 = LIGHT1_POS - pos;\n    float att1 = isOccluded(pos, LIGHT1_POS + randDir * LIGHT1_RAD) ? 0.0 : 10.0f / dot(l1, l1);\n    vec3 l2 = LIGHT2_POS - pos;\n    float att2 = isOccluded(pos, LIGHT2_POS + randDir * LIGHT2_RAD) ? 0.0 : 7.0f / dot(l2, l2);\n    return color * (max(0.0, dot(normal, normalize(l1))) * att1 * LIGHT1_C\n                    + max(0.0, dot(normal, normalize(l2))) * att2 * LIGHT2_C\n                    + texture(iChannel1, normal).rgb * 0.1);\n}\n\nvec3 refraction(vec3 v, vec3 normal, float n1, float n2, out bool isRefracted)\n{\n    if (dot(v, normal) < 0.0){\n        normal = -normal;\n    }\n    float cosA = dot(v, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3 tang = normalize(v - cosA * normal);\n    float sinB = sinA / n2 * n1;\n    if(sinB > 1.0){\n        isRefracted = false;\n        return reflect(v, normal);\n    }\n    float cosB = sqrt(1.0 - sinB * sinB);\n    isRefracted = true;\n    return normalize(sinB * tang + cosB * normal);\n}\n\nfloat sdfWater(vec3 pos)\n{\n    return length(pos - WATER_POS) - WATER_RAD;\n}\n\n\nfloat BeerLambert(float absorptionCoefficient, float distanceTraveled)\n{\n    return exp(-absorptionCoefficient * distanceTraveled);\n}\n\nvec4 sampleWater(vec3 pos, vec3 dir)\n{\n    vec3 waterColorAtPoint;\n    float opacity = 1.0;\n    float absSum = 0.0;\n    for (int i = 0; i < MAX_STEPS; ++i){\n        vec3 curPos = pos + float(i) * MARCH_SIZE * dir;\n        float sdf = sdfWater(curPos);\n        if (sdf < 0.0) {\n            waterColorAtPoint = (WATER_C * texture(iChannel3, curPos * 0.8).r \n                                + WATER_C * texture(iChannel3, curPos * randVals.x).r) * 0.5;\n            float prevOpacity = opacity;\n            opacity *= BeerLambert(ABSORPTION, MARCH_SIZE);\n            float absorption = prevOpacity - opacity;\n            absSum += absorption;\n        }\n    }\n    return vec4(2.0 * waterColorAtPoint * absSum, 1.0 - opacity);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec3 randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    randDir = normalize(randVals - 0.5);\n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (randVals.xy - 0.5) * 2.0) /iResolution.x;\n    vec3 front = normalize(-CAMERA_POS);\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = normalize(cross(front, up));\n    up = normalize(cross(right, front));\n    vec3 viewVec = front + right * uv.x + up * uv.y;\n    \n    const int EMISSION = 0;\n    const int DIFFUSE = 1;\n    const int REFLECTION = 2;\n    const int REFRACTION = 3;\n    \n    vec3 curPos = CAMERA_POS;\n    vec3 curDir = viewVec;\n    \n    const float AIR_N = 1.0;\n    const float GLASS_N = 1.5;\n    const float WATER_N = 1.33;\n    float n1 = AIR_N;\n    float n2 = GLASS_N;\n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N + GLASS_N);\n    float WATER_R = pow2(WATER_N - GLASS_N) / pow2(WATER_N + GLASS_N);\n    \n    float mult = 1.0;\n    vec3 colorMult = vec3(1, 1, 1);\n    \n    //trace loop\n    for(int i = 0; i < 10; i++){\n        int materialType;\n        vec3 color;\n        vec3 normal;\n        float t = INF;\n        bool isRefracted = false;\n        vec3 tableN;\n        float tableT = traceCircle(curPos, curDir, TABLE_Y, TABLE_R, tableN);\n        if(tableT < t){\n            t = tableT;\n            normal = tableN;\n            materialType = DIFFUSE;\n            vec3 worldPos = curPos + curDir * t;\n            color = texture(iChannel0, worldPos.xz * 0.3).rgb;\n        }\n        vec3 light1N;\n        float light1T = traceSphere(curPos - LIGHT1_POS, curDir, LIGHT1_RAD, light1N);\n        if(light1T < t){\n            t = light1T;\n            normal = light1N;\n            materialType = EMISSION;\n            color = LIGHT1_C;\n        }\n        vec3 light2N;\n        float light2T = traceSphere(curPos - LIGHT2_POS, curDir, LIGHT2_RAD, light2N);\n        if(light2T < t){\n            t = light2T;\n            normal = light2N;\n            materialType = EMISSION;\n            color = LIGHT2_C;\n        }\n        vec3 cylN;\n        float cylT = traceCylinder(curPos, curDir, TABLE_Y, CYLINDER_H, CYLINDER_RAD, cylN);\n        if(cylT < t){\n            t = cylT;\n            normal = cylN;\n            if(randVals.x < 0.2){\n                materialType = REFLECTION;\n            }else{\n                materialType = DIFFUSE;\n            }\n            vec3 worldPos = curPos + curDir * t;\n            color = texture(iChannel2, worldPos.xz * worldPos.y).rgb;\n        }\n        vec3 octahedronN;\n        float octahedronT = traceOctahedron(curPos - OCTAHEDRON_POS, curDir, octahedronN);\n        if(octahedronT < t){\n            t = octahedronT;\n            normal = octahedronN;\n            float R;\n            if(n1 == AIR_N){\n                R = GLASS_R;\n            }else{\n                R = WATER_R;\n            }\n            if(randVals.y < R){\n                materialType = REFLECTION;\n            }else{\n                colorMult *= vec3(0.87, 0.93, 1.0);\n                materialType = REFRACTION;\n                if(dot(curDir, normal) > 0.0){\n                    n2 = AIR_N;\n                }else{\n                    n2 = GLASS_N;\n                }\n            }\n        }\n        vec3 waterN;\n        float waterT = traceSphere(curPos - WATER_POS, curDir, WATER_RAD, waterN);\n        if(waterT < t){\n            t = waterT;\n            normal = waterN;\n            if(randVals.z < WATER_R){\n                materialType = REFLECTION;\n            }else{\n                materialType = REFRACTION;\n                if(dot(curDir, normal) > 0.0){\n                    n2 = GLASS_N;\n                }else{\n                    n2 = WATER_N;\n                }\n            }\n        }\n        if(t != INF){\n            vec3 worldPos = curPos + curDir * t;\n            if(materialType == EMISSION){\n                fragColor.rgb = color;\n                break;\n            }else if(materialType == DIFFUSE){\n                fragColor.rgb += computeLight(worldPos, color, normal) * colorMult * mult;\n                break;\n            }else if(materialType == REFLECTION){\n                curDir = reflect(curDir, normal);\n                curPos = worldPos + curDir * EPS;\n            }else if(materialType == REFRACTION){\n                curDir = refraction(curDir, normal, n1, n2, isRefracted);\n                curPos = worldPos + curDir * EPS;\n                vec4 water = sampleWater(curPos, curDir);\n                fragColor.rgb += water.rgb * water.a * mult;\n                mult *= 1.0 - water.a;\n                if(isRefracted){\n                    n1 = n2;\n                }\n            }\n        }else{\n            fragColor.rgb += texture(iChannel1, curDir).rgb * colorMult *  mult;\n            break;\n        }\n    }  \n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv) + texture(iChannel1, uv);\n}","name":"Buffer B","description":"","type":"buffer"}]}