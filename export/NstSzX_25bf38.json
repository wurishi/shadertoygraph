{"ver":"0.1","info":{"id":"NstSzX","date":"1633684745","viewed":127,"name":"noise playground","username":"gunzes","description":"cwiczonkooooooooooo","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["jakwyzej"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//rand(vec2 coord)\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord/iResolution.y)-vec2(0.888888,0.5);\n    //vec2 uv = (fragCoord/iResolution.y);\n    \n    //zmienne\n    //uv.x += iTime;\n    float czasSin = sin(iTime)*.05;\n    float czas = 0.;\n    czas =  iTime*.04;\n    \n    vec3 col = vec3(.0);\n    float gridScale = 100.;\n    //vec2 uv2 = (vec2(uv.x+czas,uv.y))*gridScale;\n    vec2 uvTime1 = (vec2(uv.x+czas,uv.y+czas)) * gridScale;\n    vec2 uvTime2 = (vec2(uv.x-czas,uv.y+czas)) * gridScale;\n    vec2 uvTime3 = (vec2(uv.x-czas,uv.y-czas)) * gridScale;\n    vec2 uvTime4 = (vec2(uv.x+czas,uv.y-czas)) * gridScale;\n\n    /*float cellId = floor(uv2.x); \n    float cellFraction = fract(uv2.x);*/\n    \n    float borderWidth = 0.1;\n    float circleRadius = 0.35;\n    float noiseStrength =1.3;\n    \n    \n    /*float noise =  noise1D(cellId,cellFraction);\n    float noiseBiased = (noise -.5)*2.;\n    noiseBiased *= .01;*/\n    \n    //float noise2d =  ((noise2D(uvTime1)-.5)*2.) * noiseStrength *\n    //                 ((noise2D(uvTime2)-.5)*2.) * noiseStrength;\n    \n    float noise2d =  noise2D(uvTime1) * noiseStrength *\n                     noise2D(uvTime2) * noiseStrength *\n                     noise2D(uvTime3) * noiseStrength *\n                     noise2D(uvTime4) * noiseStrength ;\n                     \n    //noise2d = noise2D(uv2) * noiseStrength;\n    \n    col += drawCircleSmooth(uv,borderWidth+.1,circleRadius+noise2d-0.15,1.) ;\n    col += drawCircleSmooth(uv,borderWidth,circleRadius+.05,.1);\n    col = vec3(pow(col.x,5.));\n    \n    col += drawCircleSmooth(uv,borderWidth-.005,circleRadius*.8,2.);\n    col *= drawDisc(uv, circleRadius-.025);\n    \n    clamp (0.,1.,col.x);\n    col*=vec3(col.x * 0.91,col.x * 0.32, col.x * .51);\n\n\n    \n\n    \n    //col = clamp(0.,1.,col);\n    \n    \n    //col *= vec3(noise2d);\n    //col = (vec3(uv,0.));\n    \n\n    fragColor = vec4(col,1.0);\n    //fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/*vec4 someFunction( vec4 a, float b )\n{\n    return a+b;\n}*/\n\n\n//random\n\nfloat rand(vec2 coord){\n    return fract(sin(dot(coord,vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\nfloat noise1D(float cellId, float cellFraction){\n    return clamp(mix(rand(vec2(cellId)),rand(vec2(cellId+1.)),smoothstep(0.,1.,cellFraction)),0.,1.);\n    //return mix(rand(vec2(cellId)),rand(vec2(cellId+1.)),cellFraction);\n    //return rand(vec2(cellId));\n}\n\nfloat noise2D(vec2 coord){\n    vec2 id = floor(coord);\n    vec2 fraction = fract(coord);\n    //4 punkty kwadratu\n    float a = rand(id);\n    float b = rand(id + vec2(1.,0.));\n    float c = rand(id + vec2(0.,1.));\n    float d = rand(id + vec2(1.,1.));\n    \n    //interpolacja\n    vec2 smoothCorners = smoothstep(0.,1.,fraction);\n    //vec2 smoothCorners = fraction*fraction*(3.0-2.0*fraction)\n    \n    //mix kornerow\n    return mix(a,b,smoothCorners.x) +\n           (c - a) * smoothCorners.y * (1.- smoothCorners.x) +\n           (d - b) * smoothCorners.x * smoothCorners.y;\n}\n\nfloat drawCircleSmooth(vec2 coord, float borderThickness, float radius, float color){\n\n    return (1.-smoothstep(0.,borderThickness,abs(radius-sqrt(dot(coord,coord)))))*color;\n}\n\nfloat drawDisc(vec2 coord,float radiusOut){\n    return smoothstep(radiusOut,radiusOut*1.015,length(coord));\n}\n\n\n//float randomNumber      = 43758.5453123;\n//vec2 randomVecNumber    = vec2(12.9898,78.233);","name":"Common","description":"","type":"common"}]}