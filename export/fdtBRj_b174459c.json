{"ver":"0.1","info":{"id":"fdtBRj","date":"1656784267","viewed":382,"name":"Cube Grabber","username":"5t0n3r1pp3r","description":"Built from two shaders https://www.shadertoy.com/view/sdcfDn & https://www.shadertoy.com/view/ssVcDz","likes":1,"published":3,"flags":50,"usePreview":0,"tags":["cuby"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    vec3 img = texture(iChannel0,fragCoord/iResolution.xy).xyz;\n   \tfragColor = vec4(img, 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    // The grid size\n    float gridWidth = 5.;\n    float gridHeight = 10.;\n    \n    // Basically the speed of the movement\n    float timeModifier = 1.;\n    // Fixed time delta to change the phase of movement of alternate y boundaries\n    float timeDelta = radians(90.);\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec4 channelColor = texture(iChannel0,uv);\n       \n    // Fill each cell\n    \n    float mody1 = mod(fragCoord.y+gridHeight*sin(iTime*timeModifier),gridHeight);\n    float mody2 = mod(fragCoord.y+gridHeight/2.-gridHeight*sin(iTime*timeModifier+timeDelta),gridHeight);\n    \n    float newx = fragCoord.x-mod(fragCoord.x,gridWidth);\n    float newy1 = fragCoord.y-mody1;\n    float newy2 = fragCoord.y-mody2;\n    \n    if(mod(fragCoord.x,gridWidth*2.) <= gridWidth)\n    {\n        vec2 rounduv = vec2(newx,newy1)/iResolution.xy;\n        channelColor = texture(iChannel0,rounduv);\n    }\n    else\n    {\n        vec2 rounduv = vec2(newx,newy2)/iResolution.xy;\n        channelColor = texture(iChannel0,rounduv);\n    }\n    \n    // Fill boundary\n    \n    //X boundary (Vertical lines)\n    if(mod(fragCoord.x,gridWidth)<=1.) channelColor = vec4(0,0,0,1);\n    \n    //Every alternate Y boundary is at a different height offset by gridHeight/2\n    if(mody1<=1. && mod(fragCoord.x,gridWidth*2.) <= gridWidth) channelColor = vec4(0,0,0,1);\n    if(mody2<=1. && mod(fragCoord.x,gridWidth*2.) >= gridWidth) channelColor = vec4(0,0,0,1);\n    \n    fragColor = channelColor;\n    \n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"float rgbToGray(vec3 rgb) {\n\tconst vec3 W = vec3(0.2125, 0.7154, 0.0721);\n    return dot(rgb, W);\n}\n\nconst int KEY_SPACE  = 32;\nconst int KEY_LEFT  = 37;\nconst int KEY_UP    = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN  = 40;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // mirror reverse the camera input\n    vec2 pos = fragCoord/iResolution.xy;\n    pos = vec2(1.0 - pos.x, pos.y);\n    \n    // KALEIDOSCOPE MODE\n    float upDown = texelFetch(iChannel2, ivec2(KEY_UP,0), 0).x;\n    if (upDown > 0.) {\n        pos *= 2.;\n        pos -= 1.;\n        pos = abs(pos);\n    }\n    \n    vec3 cam = texture(iChannel0,pos).xyz;\n    \n    vec2 offsetPos = fragCoord/iResolution.xy;\n\n    // ZOOM MODE\n    float rightDown = texelFetch(iChannel2, ivec2(KEY_RIGHT,0), 0).x;\n    if (rightDown > 0.) {\n        vec2 center = vec2(0.5, 0.5);\n        vec2 v2 = (fragCoord/iResolution.xy) - center;\n        v2 *= 0.995;\n        offsetPos = v2 + center;\n    }\n\n    vec3 image = texture(iChannel1,offsetPos).xyz;\n    \n    float camBrightness = rgbToGray(cam);\n    float imageBrightness = rgbToGray(image);\n        \n    if (camBrightness > imageBrightness) {\n\t    fragColor = vec4(cam, 1.);\n    } else {\n\t    fragColor = vec4(image * 0.999, 1.); // fade out    \n    }\n    \n    // PAUSE MODE\n     float downDown = texelFetch(iChannel2, ivec2(KEY_DOWN,0), 0).x;\n    if (downDown > 0.) {\n        fragColor = vec4(image, 1.);\n    }\n    \n    // CLEAR\n    float SpaceDown = texelFetch(iChannel2, ivec2(KEY_SPACE,1), 0).x;\n    if (SpaceDown > 0.) {\n        fragColor = vec4(0., 0., 0., 1.);\n    }\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"const int KEY_LEFT  = 37;\nconst int KEY_UP    = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN  = 40;\n\nvec3 hueShift(vec3 color, float hue)\n{\n    const vec3 k = vec3(0.57735, 0.57735, 0.57735);\n    float cosAngle = cos(hue);\n    return vec3(color * cosAngle + cross(k, color) * sin(hue) + k * dot(k, color) * (1.0 - cosAngle));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 filtered = texture(iChannel0,fragCoord/iResolution.xy).xyz;\n    \n    // hue shift\n    vec3 shifted = filtered;\n    float leftDown = texelFetch(iChannel1, ivec2(KEY_LEFT,0), 0).x;\n    if (leftDown > 0.) {\n        shifted = hueShift(filtered, 0.1);\n    }\n   \n    // Slow fade\n    //fragColor = vec4(shifted * 0.999, 1.);\n    fragColor = vec4(shifted, 1.);\n    \n    // Click to clear\n    vec4 m = iMouse / iResolution.xxxx;\n    if(m.z>0.0 ) {\n        fragColor = vec4(0.,0.,0.,1.);\n    }\n}","name":"Buffer C","description":"","type":"buffer"}]}