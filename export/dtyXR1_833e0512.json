{"ver":"0.1","info":{"id":"dtyXR1","date":"1685967685","viewed":108,"name":"count-dos","username":"ryandoucette","description":"Iteration based on kaiware007's Cyber Fuji 2020 ","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["outrun"],"hasliked":0,"parentid":"dtyXRz","parentname":"count-uno"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float grid(vec2 uv, float intensity, float speed, float glow, float gridRoam) {\n    vec2 size = vec2(uv.y, uv.y * uv.y * 0.3) * glow;\n    uv += vec2(gridRoam, iTime * speed);\n    // centers\n    uv = abs(fract(uv) - 0.75);\n \tvec2 lines = smoothstep(size, vec2(0.0), uv);\n \tlines += smoothstep(size * 5.0, vec2(0.0), uv) * intensity;\n    return clamp(lines.x + lines.y, 0.0, 3.0);\n}\n\nfloat sun(vec2 uv, float battery) {\n \tfloat val = smoothstep(0.35, 0.33, length(uv));\n \tfloat bloom = smoothstep(0.8, 0.0, length(uv));\n    float cut = 3.0 * sin((uv.y + iTime * 0.02 * (battery + 0.02)) * 100.0) \n    + clamp(uv.y * 14.0 + 3.0, -6.0, 6.0);\n    cut = clamp(cut, 0.0, 1.0);\n    return clamp(val * cut, 0.0, 1.0) + bloom * 0.9;\n}\n\nfloat noise (vec2 st) {\n    return fract(sin(dot(st.xy,vec2(12.9898,78.233)))*43758.5453123);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.0 * fragCoord.xy - iResolution.xy)/iResolution.y;\n    float pointOfInflection = 0.0;\n    \n    // Fog\n    float fogSize = 0.15;\n    float fogIntensity = -0.025;\n    float fog = smoothstep(fogSize, fogIntensity, abs(uv.y + pointOfInflection));\n    \n    // Grid\n    vec3 startColor = vec3(0.6, 0.0, 1.0); // Neon purple\n    vec3 endColor = vec3(0.0, 1.0, 1.0);   // Cyan\n\n    // Apply wave effect to the interpolation coordinate\n    float waveFactor = sin(uv.x * 5.0 + iTime * 2.0) * 0.5 + 0.5;\n    float waveY = uv.y;\n    waveY += waveFactor * 0.1;\n    /*\n    if (uv.y < pointOfInflection) {\n        uv.y += waveFactor * 0.1;\n    }\n    */\n\n    // Interpolate the colors based on the modified UV coordinates\n    vec3 gradient = mix(startColor, endColor, waveY);\n\n\n    vec3 backgroundColor = vec3(0.1, 0.0, 0.1);\n    vec3 lineColor = gradient;\n    //vec3 lineColor = vec3(1.0, 0.5, 1.0);\n    float lineIntensity = -uv.y;\n    float lineGlow = 0.01;\n\n    float gridSpeed = 2.0; \n    //float gridRoaming = -iTime * 0.25;\n    float gridRoaming = 0.25;\n    \n    //if (uv.y < pointOfInflection && ((uv.y / 0.495)-0.095 < uv.x && (uv.y / 0.495)-0.095 < -uv.x)) {\n        if (uv.y < pointOfInflection) {\n\n        // grid segment heights\n        //float gridSegmentHeightDivisor = 2.5;\n        float gridSegmentHeightDivisor = 2.5;\n        float distance = length(uv + vec2(0.0));\n\n        //float gridSegmentHeightDivisor = sin(iTime);\n\n        float gridSegmentFinalWidth = 0.05;\n\n        float spaceBetweenGridSegments = sin(uv.y + iTime) + 2.0 / (abs(uv.y - pointOfInflection) + gridSegmentFinalWidth);\n        //float spaceBetweenGridSegments = distance +  gridSegmentHeightDivisor / (abs(uv.y -pointOfInflection) + gridSegmentFinalWidth);\n        uv.y = spaceBetweenGridSegments;\n        \n        // grid segment widths\n        //float gridSegmentWidthMultiplier = 0.7;\n        float gridSegmentWidthMultiplier = abs(uv.y);\n        uv.x *= -1.0 * gridSegmentWidthMultiplier - sin(distance * 0.5);\n        \n        float gridVal = grid(uv, lineIntensity, gridSpeed, lineGlow, gridRoaming);\n        backgroundColor = mix(backgroundColor, lineColor, gridVal);\n    } else {\n        // Sun\n        vec2 sunUV = uv;\n        sunUV += vec2(0.0, -0.25);\n        \n        float sunVal = sun(sunUV, 1.0);\n        \n        backgroundColor = vec3(1.0, 1.0, 1.0);\n\n        backgroundColor = mix(backgroundColor, vec3(0.125,0.439,0.408), sunUV.y * 1.0 + 0.4);\n        backgroundColor = mix(vec3(0.0, 0.0, 0.0),backgroundColor, sunVal);\n    }\n    \n    \n    float saturation = 1.0;\n    \n    backgroundColor += fog * fog * fog;    \n    backgroundColor = mix(vec3(backgroundColor.r, backgroundColor.r, backgroundColor.r) * 0.5, backgroundColor, saturation * 0.7);\n\n    fragColor = vec4(backgroundColor,1.0);\n}","name":"Image","description":"","type":"image"}]}