{"ver":"0.1","info":{"id":"fsfSWf","date":"1619444688","viewed":93,"name":"317_Sidorov_v0v0","username":"Sidl","description":"CG_2021 task 2","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["fire","sphere"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv) / float(iFrame + 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4sfGRr","filepath":"/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","previewfilepath":"/media/ap/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","type":"volume","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3Rr","filepath":"/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","previewfilepath":"/media/ap/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec3 rand_dir;\n\nconst float INF = 1e10;\nconst vec3 CAMERA_POS = vec3(-2, 2, 8);\n\nconst vec3 LIGHT1_POS = vec3(3, 1.7, 0);\nconst float LIGHT1_RADIUS = 0.6;\nconst vec3 LIGHT1_COLOR = vec3(1, 1, 1);\nconst float LIGHT1_BRIGHT = 20.0;\n\nconst vec3 LIGHT2_POS = vec3(-3, 1.5, -0.2);\nconst float LIGHT2_RADIUS = 0.35;\nconst vec3 LIGHT2_COLOR = vec3(0.1, 1, 0.2);\nconst float LIGHT2_BRIGHT = 10.0;\n\nconst vec3 FIRE_POS = vec3(0.0, 0.8, 0.0);\nconst float FIRE_RADIUS = 0.5;\n\nconst int N_STEPS = 5;\nconst float NOISE_AMP = 0.06;\nconst float NOISE_FREQ = 4.0;\nconst float TABLE_RAD = 50.0;\nconst float CYLINDER_RAD = 1.3;\nconst int MARCH_STEPS = 3;\nconst int NOISE_STEPS = 10;\n\n\nfloat pow2(float x) {\n    return x * x;\n}\n\nfloat tracePlane(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.3 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n\n    vec3 world_pos = t * dir + pos;\n    if (dot(world_pos.xz, world_pos.xz) >= TABLE_RAD) {\n        return INF;\n    }\n    normal = vec3(0, 1, 0);\n    return t;\n}\n\nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal) {\n    float a = dot(dir, dir);\n    float b = dot(pos, dir);\n    float c = dot(pos, pos) - r * r;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    float t = -b - sqrt(D);\n    if (t > 0.0) {\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    t = -b + sqrt(D);\n    if (t < 0.0) {\n        return INF;\n    }\n    normal = normalize(pos + t * dir);\n    return t;\n}\n\nfloat traceCylinder(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.0 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) < pow2(CYLINDER_RAD)) {\n        normal = vec3(0, 1, 0);\n        return t;\n    }\n\n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - pow2(CYLINDER_RAD);\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    t = (-b - sqrt(D)) / a;\n    if (t > 0.0) {\n        worldPos = t * dir + pos;\n        if (worldPos.y <= -1.0) {\n            normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n            return t;\n        }\n    }\n    t = (-b + sqrt(D)) / a;\n    if (t < 0.0) {\n        return INF;\n    }\n    worldPos = t * dir + pos;\n    if (worldPos.y <= -1.0) {\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    }\n    return INF;\n}\n\n\nbool isOccluded(vec3 pos, vec3 target) {\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n    \n    vec3 sphNorm;\n    float sphT = traceSphere(pos, dir, 1.0, sphNorm);\n    if (sphT < dist)\n        return true;\n    vec3 cylNorm;\n    float cylT = traceCylinder(pos, dir, cylNorm);\n    return (cylT < dist);\n}\n\n\nvec3 computeLight(vec3 pos, vec3 color, vec3 normal) {\n    vec3 toLight1 = LIGHT1_POS - pos;\n    float distSq1 = dot(toLight1, toLight1);\n    float att1 = isOccluded(pos, LIGHT1_POS) ? 0.0 : LIGHT1_BRIGHT / distSq1;\n    \n    vec3 toLight2 = LIGHT2_POS - pos;   \n    float distSq2 = dot(toLight2, toLight2);\n    float att2 = isOccluded(pos, LIGHT2_POS + rand_dir * LIGHT2_RADIUS) ? 0.0 : LIGHT2_BRIGHT / distSq2;\n    \n    return color * (\n        max(0.0, dot(normal, normalize(toLight1))) * att1 * LIGHT1_COLOR\n        + max(0.0, dot(normal, normalize(toLight2))) * att2 * LIGHT2_COLOR\n        + texture(iChannel1, normal).rgb * 0.1\n    );\n}\n\n\nvec3 refraction(vec3 v, vec3 normal, float n1, float n2) {\n    if (dot(v, normal) < 0.0) {\n        normal = -normal;\n    }\n    float cosA = dot(v, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3 tang = normalize(v - cosA * normal);\n    float sinB = sinA / n2 * n1;\n    float cosB = sqrt(1.0 - sinB * sinB);\n    return sinB * tang + cosB * normal;\n}\n\nfloat get_random(float frame) {\n        return fract(sin(dot(vec3(frame), vec3(12.9898,78.233,45.5432))) * 43758.5453);\n}\n\nvec4 permute(vec4 x) {\n    vec4 temp = ((x*34.0)+1.0)*x;\n    return temp - floor(temp * (1.0 / 100.0)) * 100.0;\n}\n\nvec4 taylorInvSqrt(vec4 r) {\n    return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v)\n{\n\tconst vec2  C = vec2(1.0/6.0, 1.0/3.0);\n\tconst vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n\tvec3 i  = floor(v + dot(v, C.yyy));\n\tvec3 x0 = v - i + dot(i, C.xxx);\n\n\tvec3 g = step(x0.yzx, x0.xyz);\n\tvec3 l = 1.0 - g;\n\tvec3 i1 = min(g.xyz, l.zxy);\n\tvec3 i2 = max(g.xyz, l.zxy);\n\tvec3 x1 = x0 - i1 + C.xxx;\n\tvec3 x2 = x0 - i2 + C.yyy;\n\tvec3 x3 = x0 - D.yyy;\n\n\ti = i - floor(i * (1.0 / 100.0)) * 100.0;\n    \n\tvec4 p = permute( permute( permute( i.z + vec4(0.0, i1.z, i2.z, 1.0)) + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n\tfloat n_ = 0.142857142857;\n\tvec3  ns = n_ * D.wyz - D.xzx;\n\tvec4 j = p - 49.0 * floor(p * ns.z * ns.z);\n\tvec4 x_ = floor(j * ns.z);\n\tvec4 y_ = floor(j - 7.0 * x_);\n\tvec4 x = x_ *ns.x + ns.yyyy;\n\tvec4 y = y_ *ns.x + ns.yyyy;\n\tvec4 h = 1.0 - abs(x) - abs(y);\n\tvec4 b0 = vec4(x.xy, y.xy);\n\tvec4 b1 = vec4(x.zw, y.zw);\n\tvec4 s0 = floor(b0) * 2.0 + 1.0;\n\tvec4 s1 = floor(b1) * 2.0 + 1.0;\n\tvec4 sh = -step(h, vec4(0.0));\n\tvec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;\n\tvec4 a1 = b1.xzyw + s1.xzyw * sh.zzww;\n\tvec3 p0 = vec3(a0.xy, h.x);\n\tvec3 p1 = vec3(a0.zw, h.y);\n\tvec3 p2 = vec3(a1.xy, h.z);\n\tvec3 p3 = vec3(a1.zw, h.w);\n\n\tvec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n\tp0 *= norm.x;\n\tp1 *= norm.y;\n\tp2 *= norm.z;\n\tp3 *= norm.w;\n\n\tvec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n\tm = m * m;\n\treturn 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3)));\n}\n\nfloat turbulence(vec3 position, float minFreq, float maxFreq, float qWidth)\n{\n\tfloat value = 0.0;\n\tfloat cutoff = clamp(0.5/qWidth, 0.0, maxFreq);\n\tfloat fade;\n\tfloat fOut = minFreq;\n\tfor(int i=NOISE_STEPS ; i>=0 ; i--)\n\t{\n\t\tif(fOut >= 0.5 * cutoff) break;\n\t\tfOut *= 2.0;\n\t\tvalue += abs(snoise(position * fOut))/fOut;\n\t}\n\tfade = clamp(2.0 * (cutoff-fOut)/cutoff, 0.0, 1.0);\n\tvalue += fade * abs(snoise(position * fOut))/fOut;\n\treturn 3.0-value;\n}\n\nvec3 get_fireball_col(vec2 p) {\n\tfloat rotx = 0.6;\n\tfloat roty = 0.8;\n\tfloat zoom = 10.0;\n\tvec3 ro = zoom * normalize(vec3(cos(roty), cos(rotx), sin(roty)));\n\tvec3 ww = normalize(vec3(0.0, 0.0, 0.0) - ro);\n\tvec3 uu = normalize(cross( vec3(0.0, 1.0, 0.0), ww));\n\tvec3 vv = normalize(cross(ww, uu));\n\tvec3 rd = normalize(p.x*uu + p.y*vv + 1.5*ww);\n\n\tvec3 col;\n\tvec3 ray_origin;\n    \n    vec3 rel_distance = (ro - FIRE_POS);\n\tfloat b = dot(rel_distance, rd);\n\tfloat c = dot(rel_distance, rel_distance) - pow2(FIRE_RADIUS + NOISE_AMP * 12.0);\n\tfloat d = b*b - c;\n\tray_origin = ro + rd*(-b - sqrt(d));\n\n\tif(d >= 0.0)\n\t{\n        vec3 position = ray_origin;\n        float distance;\n        float displacement;\n        for(int step = 0; step < MARCH_STEPS; step++)\n        {\n            float noise = turbulence(position * NOISE_FREQ + vec3(0.0, -3.0, 1.5), 0.1, 1.5, 0.03) * NOISE_AMP;\n            noise = clamp(abs(noise), 0.0, 1.0);\n\n            distance = length(position - FIRE_POS) - FIRE_RADIUS - noise;\n            displacement = noise;\n            \n            if(distance < 0.05) {\n                break;\n            }\n            position += rd * distance;\n        }\n\n        float c1 = clamp(displacement*5.0 + 0.5, 0.0, 1.0);\n        float c2 = clamp(displacement*5.0, 0.0, 1.0);\n        float c3 = clamp(displacement*3.4 - 0.5, 0.0, 1.0);\n\n        vec3 a = mix(vec3(1.0, 1.0, 1.0), vec3(1.0, 0.5, 0.2), c1);\n        vec3 b = mix(a, vec3(1.0, 0.03, 0.0), c2);\n        vec3 c = mix(b, vec3(0.1, 0.02, 0.0), c3);\n\n        col = mix(c, vec3(0, 0, 0), float(distance >= 0.5));\n\t}\n\n    return col;//vec3(0, col.g, col.b);\n}\n\nfloat burn_snoise(vec3 uv, float res)\n{\n\tconst vec3 s = vec3(1e0, 1e2, 1e3);\n\tuv *= res;\n\tvec3 uv0 = floor(mod(uv, res))*s;\n\tvec3 uv1 = floor(mod(uv+vec3(1.), res))*s;\n\tvec3 f = fract(uv);\n\tf = f*f*(3.0-2.0*f);\n\tvec4 v = vec4(uv0.x+uv0.y+uv0.z, uv1.x+uv0.y+uv0.z,\n\t              uv0.x+uv1.y+uv0.z, uv1.x+uv1.y+uv0.z);\n\tvec4 r = fract(sin(v*1e-1)*1e3);\n\tfloat r0 = mix(mix(r.x, r.y, f.x), mix(r.z, r.w, f.x), f.y);\n\tr = fract(sin((v + uv1.z - uv0.z)*1e-1)*1e3);\n\tfloat r1 = mix(mix(r.x, r.y, f.x), mix(r.z, r.w, f.x), f.y);\n\treturn mix(r0, r1, f.z) * 2.0 - 1.0;\n}\n\nvec3 burn (vec2 p)\n{\n\tfloat color1 = 4.0 - (2.0 * length(2.5 * p));\n\tvec3 coord = vec3(atan(p.x, p.y) / 6.2832 + 0.5, length(p) * 0.4, 0.5) - vec3(0, 0.5, 0);\n\tfor(int i = 1; i <= 3; i++)\n\t{\n\t\tfloat power = pow(2.0, float(i));\n\t\tcolor1 += 1.5*(1.5 / power) * burn_snoise(coord + vec3(0.0, -0.05, -0.01), power * 16.0);\n\t}\n\tcolor1 *= 0.5;\n\n    return vec3( color1, pow(max(color1, 0.0), 2.0)*0.4, pow(max(color1, 0.0), 3.0) * 0.05);\n}\n\nfloat fogSdf(vec3 pos)\n{\n    return length(pos) - 0.8;\n}\n\nfloat BeerLambert(float absorptionCoefficient, float distanceTraveled)\n{\n    return exp(-absorptionCoefficient * distanceTraveled);\n}\n\nvec4 sampleFog(vec3 pos, vec3 dir)\n{\n    float t = fogSdf(pos);\n    const float MARCH_SIZE = 0.1;\n    float opacity = 1.0;\n    float absorption = 40.0;\n    float totalAbs = 0.0;\n    for (int i = 0; i < 50; ++i) {\n        vec3 curPos = pos + (float(i) * MARCH_SIZE + t) * dir;\n        float sdf = fogSdf(curPos);\n        if (sdf < 0.0) {\n            float prevOpacity = opacity;\n            opacity *= BeerLambert(absorption * (\n            texture(iChannel3, curPos * 0.2).x\n            + texture(iChannel3, curPos * 0.4).x\n            + texture(iChannel3, curPos * 0.8).x\n            + texture(iChannel3, curPos * 1.6).x\n            ) * 0.1 * abs(sdf), MARCH_SIZE);\n            float absorptionLastStep = prevOpacity - opacity;\n            totalAbs += absorptionLastStep;\n        }\n    }   \n    return vec4(vec3(5, 2, 5) * totalAbs, 1.0 - opacity);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec3 rand_vals = vec3(get_random(float(iFrame)), get_random(float(iFrame + 5)), get_random(float(iFrame + 15)));\n    rand_dir = normalize(rand_vals - 0.5);\n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (rand_vals.xy - 0.5) * 2.0) / iResolution.x;\n    vec3 front_vec = normalize(vec3(-CAMERA_POS));\n    vec3 up_vec = vec3(0, 1, 0);\n    vec3 right_vec = normalize(cross(front_vec, up_vec));\n    up_vec = normalize(cross(right_vec, front_vec));\n    vec3 view_vec = normalize(front_vec + right_vec * uv.x + up_vec * uv.y);\n    \n    const int EMISSION = 0;\n    const int DIFFUSION = 1;\n    const int REFLECTION = 2;\n    const int REFRACTION = 3;\n    \n    vec3 cur_pos = CAMERA_POS;\n    vec3 cur_dir = view_vec;\n    const float GLASS_N = 1.5;\n    const float AIR_N = 1.0;\n    float n1 = AIR_N;\n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N + GLASS_N);\n    vec4 col = vec4(0, 0, 0, 0);\n\n    vec3 color_mult = vec3(1, 1, 1);\n    vec3 visionSum = vec3(0.0, 0.0, 0.0);\n    \n    for (int i = 0; i < N_STEPS; i++) {\n        float t = INF;\n        int material = EMISSION;\n        vec3 color, normal;\n        float nEnter = AIR_N;\n        \n        vec3 planeNorm;\n        float planeT = tracePlane(cur_pos, cur_dir, planeNorm);\n        if (planeT < t) {\n            t = planeT;\n            material = DIFFUSION;\n            vec3 world_pos = t * cur_dir + cur_pos;\n            color = texture(iChannel2, world_pos.xz * 0.5).rgb;\n            normal = planeNorm;\n            \n        }\n        \n        vec3 l1Norm;\n        float light1T = traceSphere(cur_pos - LIGHT1_POS, cur_dir, LIGHT1_RADIUS, l1Norm);\n        if (light1T < t) {\n            t = light1T;\n            material = EMISSION;\n            color = LIGHT1_COLOR;\n            normal = l1Norm;\n        }\n            \n        vec3 l2Norm;\n        float light2T = traceSphere(cur_pos - LIGHT2_POS, cur_dir, LIGHT2_RADIUS, l2Norm);\n        if (light2T < t) {\n            t = light2T;\n            material = EMISSION;\n            color = LIGHT2_COLOR;\n            normal = l2Norm;\n        }\n        \n        vec3 cylNorm;\n        float cylT = traceCylinder(cur_pos, cur_dir, cylNorm);\n        if (cylT < t) {\n            t = cylT;\n            material = DIFFUSION;\n            vec3 world_pos = t * cur_dir + cur_pos;\n            color = texture(iChannel0, world_pos.xz * world_pos.y).rgb;\n            normal = cylNorm;\n        }\n        \n        vec3 sphNorm;\n        float sphereT = traceSphere(cur_pos - vec3(0, 0.5, 0), cur_dir, 1.5, sphNorm);\n        if (sphereT < t) {\n            t = sphereT;\n            normal = sphNorm;\n            if (rand_vals.x < GLASS_R) {\n                material = REFLECTION;\n            } else {\n                color_mult *= vec3(0.5, 0.5, 0.5);\n                material = REFRACTION;\n                if (dot(cur_dir, normal) > 0.0) {\n                    nEnter = AIR_N;\n                } else {\n                    nEnter = GLASS_N;\n                }\n                vec2 p = (fragCoord.xy / iResolution.xy) - 0.5;\n                p.x *= iResolution.x / iResolution.y;\n                vec3 fb = get_fireball_col(p);\n                vec3 fo = burn(p);\n                col += vec4(mix(fb, fo * vec3(0.6, 0.3, 0.3), 0.35), 0.8);\n            }\n        }\n        \n        if (t != INF) {\n            vec3 world_pos = t * cur_dir + cur_pos;\n            col += vec4(texture(iChannel0, world_pos.xz).rgb * 0.1, 0.0);\n            if (material == EMISSION) {\n                col += vec4(color * color_mult, 0);\n                break;\n            } else if (material == DIFFUSION) {\n                col += vec4(computeLight(world_pos, color, normal) * color_mult, 0);\n                break;\n            } else if (material == REFLECTION) {\n                cur_dir = reflect(cur_dir, normal);\n                cur_pos = world_pos + cur_dir * 1e-3;\n            } else if (material == REFRACTION) {\n                cur_dir = refraction(cur_dir, normal, n1, nEnter);\n                cur_pos = world_pos + cur_dir * 1e-3;\n                \n                vec4 fog = sampleFog(cur_pos - vec3(0, 0.5, 0), cur_dir);\n                fragColor.rgb += fog.rgb * fog.a * color_mult;\n                color_mult *= 1.0 - fog.a;\n                if (i == 0){\n                    visionSum = fog.rgb * fog.a * color_mult * 2.0;\n                }\n                \n                n1 = nEnter;\n            }\n        } else {\n            col += vec4(texture(iChannel1, cur_dir).rgb * color_mult * 0.12, 0);\n        }\n    }\n    fragColor = vec4(col);\n    fragColor.rgb += visionSum;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv) + texture(iChannel1, uv);\n}","name":"Buffer B","description":"","type":"buffer"}]}