{"ver":"0.1","info":{"id":"Xc2yDW","date":"1722347952","viewed":55,"name":"vortex knot flow field","username":"Boogaloo","description":"Just applying jt's vector field visualization to my fluid simulation \"instability of vortex knots\" https://www.shadertoy.com/view/MffSz8","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["raytracing","raycasting","visualization","fluid","voxel","flow","field","vector","vortex"],"hasliked":0,"parentid":"MfSczw","parentname":"vector field visualization"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/MfSczw vector field visualization, 2024 by jt\n// using https://www.shadertoy.com/view/7stXzn Voxel Raycast with Sub-Objects\n\n// vector field visualization\n\n// tags: raytracing, raycasting, voxel, dda, subobjects, vector, field, visualization\n\n// The MIT License\n// Copyright (c) 2024 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n#define pi 3.1415926\n\nmat3 yaw_pitch_roll(float yaw, float pitch, float roll)\n{\n    mat3 R = mat3(vec3(cos(yaw), sin(yaw), 0.0), vec3(-sin(yaw), cos(yaw), 0.0), vec3(0.0, 0.0, 1.0));\n    mat3 S = mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, cos(pitch), sin(pitch)), vec3(0.0, -sin(pitch), cos(pitch)));\n    mat3 T = mat3(vec3(cos(roll), 0.0, sin(roll)), vec3(0.0, 1.0, 0.0), vec3(-sin(roll), 0.0, cos(roll)));\n\n    return R * S * T;\n}\n\n#define DIST_MAX 1000.0\n\n// adapted from https://iquilezles.org/articles/intersectors\nvec4 cylinder_intersection(vec3 ro, vec3 rd, vec3 a, vec3 b, float ra)\n{\n    vec3  ba = b  - a;\n    vec3  oc = ro - a;\n    float baba = dot(ba,ba);\n    float bard = dot(ba,rd);\n    float baoc = dot(ba,oc);\n    float k2 = baba            - bard*bard;\n    float k1 = baba*dot(oc,rd) - baoc*bard;\n    float k0 = baba*dot(oc,oc) - baoc*baoc - ra*ra*baba;\n    float h = k1*k1 - k2*k0;\n    if(h < 0.0) return vec4(-rd,DIST_MAX); // no intersection (sky)\n    h = sqrt(h);\n    float t = (-k1-h)/k2;\n    // body\n    float y = baoc + t*bard;\n    if(y > 0.0 && y < baba) return vec4((oc+t*rd - ba*y/baba)/ra,t);\n    // caps\n    t = (((y<0.0) ? 0.0 : baba) - baoc)/bard;\n    if( abs(k1+k2*t)<h )\n    {\n        return vec4(ba*sign(y)/sqrt(baba),t);\n    }\n    return vec4(-rd,DIST_MAX); // no intersection (sky)\n}\n\nfloat dot2(vec3 v)\n{\n    return dot(v,v);\n}\n\n// adapted from https://www.shadertoy.com/view/llcfRf Cone - intersection by iq\nvec4 cone_intersection(vec3 ro, vec3 rd, vec3 pa, vec3 pb, float ra, float rb)\n{\n    vec3  ba = pb - pa;\n    vec3  oa = ro - pa;\n    vec3  ob = ro - pb;\n\n    float m0 = dot(ba,ba);\n    float m1 = dot(oa,ba);\n    float m2 = dot(ob,ba);\n    float m3 = dot(rd,ba);\n\n    //caps\n         if( m1<0.0 ) { if( dot2(oa*m3-rd*m1)<(ra*ra*m3*m3) ) return vec4(-ba*inversesqrt(m0), -m1/m3); }\n    else if( m2>0.0 ) { if( dot2(ob*m3-rd*m2)<(rb*rb*m3*m3) ) return vec4( ba*inversesqrt(m0), -m2/m3); }\n\n    // body\n    float m4 = dot(rd,oa);\n    float m5 = dot(oa,oa);\n    float rr = ra - rb;\n    float hy = m0 + rr*rr;\n\n    float k2 = m0*m0    - m3*m3*hy;\n    float k1 = m0*m0*m4 - m1*m3*hy + m0*ra*(rr*m3*1.0        );\n    float k0 = m0*m0*m5 - m1*m1*hy + m0*ra*(rr*m1*2.0 - m0*ra);\n\n    float h = k1*k1 - k2*k0;\n    if( h<0.0 ) return vec4(vec3(0), DIST_MAX);\n\n    float t = (-k1-sqrt(h))/k2;\n\n    float y = m1 + t*m3;\n    if( y>0.0 && y<m0 )\n    {\n        return vec4(normalize(m0*(m0*(oa+t*rd)+rr*ba*ra)-ba*hy*y), t);\n    }\n\n    return vec4(vec3(0), DIST_MAX);\n}\n\n// adapted from https://iquilezles.org/articles/intersectors\nvec2 box_intersection(vec3 ro, vec3 rd, float s)\n{\n    vec3 m = 1.0/rd;\n    vec3 n = m*ro;\n    vec3 k = abs(m)*s;\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n    float tN = max(max(t1.x, t1.y), t1.z);\n    float tF = min(min(t2.x, t2.y), t2.z);\n    return vec2(tN, tF);\n}\n\n// adapted from https://iquilezles.org/articles/intersectors\nvec3 box_normal(vec3 ro, vec3 rd, vec3 s)\n{\n    vec3 m = 1.0/rd;\n    vec3 n = m*ro;\n    vec3 k = abs(m)*s;\n    vec3 t1 = -n - k;\n    return -sign(rd)*step(t1.yzx,t1.xyz)*step(t1.zxy,t1.xyz);\n}\n\nstruct result\n{\n    float dist;\n    vec3 norm;\n    vec3 col;\n};\n\nresult combine(result a, result b)\n{\n    if(a.dist < b.dist) return a;\n    return b;\n}\n\nfloat dot2(vec2 v)\n{\n    return dot(v,v);\n}\n\nvec3 field(vec3 p)\n{\n\n//if(mod(p.x,2.)>.5||mod(p.y,2.)>.5||mod(p.z,2.)>.5){return vec3(0.);}\n    p*=22.;\n    p+=vec3(400.,225.,-60.);\n    vec3 fl = vec3(0.);\nfor(float k=0.; k<s; k++){\nvec3 vm = p-tex(C0,ivec2(k,0)).xyz;\nvm /= max(pow(vm.x*vm.x+vm.y*vm.y+vm.z*vm.z,2.),.001);\nvec3 tv = tex(C0,ivec2(k,1.)).xyz;\nfl += cross(vm,tv);\n}\nreturn 2.*fl;}\n\n\n\n\n\n\n\n#define MAX_RAY_STEPS 64\n\n// returns normal & distance\nresult traverse(vec3 ray_pos, vec3 ray_dir)\n{\n    result res = result(DIST_MAX, -ray_dir, vec3(0)); // sky\n\n    // dda initialization (four lines) adapted from\n    // https://www.shadertoy.com/view/4dX3zl Branchless Voxel Raycasting by fb39ca4\n    // implementing https://lodev.org/cgtutor/raycasting.html\n    ivec3 voxel_pos = ivec3(floor(ray_pos)); // round down position to get tile position\n    vec3 delta_dist = 1.0 / abs(ray_dir); // reciprocal absolute ray direction\n    ivec3 ray_step = ivec3(sign(ray_dir)); // sign of ray direction\n    vec3 side_dist = (sign(ray_dir) * (vec3(voxel_pos) - ray_pos) + (sign(ray_dir) * 0.5) + 0.5) * delta_dist; // initial distances to nearest walls by dimension\n    bvec3 nearest = bvec3(0);\n\n    for(int i = 0; i < MAX_RAY_STEPS; i++)\n    {\n        // dda core (three lines) adapted from\n        // https://www.shadertoy.com/view/4dX3zl Branchless Voxel Raycasting by fb39ca4\n        // implementing https://lodev.org/cgtutor/raycasting.html\n        bvec3 nearest_next = lessThanEqual(side_dist.xyz, min(side_dist.yzx, side_dist.zxy)); // component is true if nearest wall in that dimension\n        vec3 side_dist_next = side_dist + vec3(nearest_next) * delta_dist; // sign of ray direction\n        ivec3 voxel_pos_next = voxel_pos + ivec3(vec3(nearest_next)) * ray_step; // step to next vpxel in direction of nearest wall\n\n        if(all(greaterThanEqual(voxel_pos, ivec3(-8))) && all(lessThan(voxel_pos, ivec3(8))))\n        {\n            result enter = result(length(vec3(nearest) * (side_dist - delta_dist)), vec3(nearest)*vec3(-ray_step), vec3(0));\n            result leave = result(length(vec3(nearest_next) * (side_dist_next - delta_dist)), vec3(nearest_next)*vec3(-ray_step), vec3(0));\n\n            vec3 local = ray_pos - vec3(voxel_pos) - vec3(0.5);\n            vec2 I;\n            result current = res;\n\n            {\n                vec3 vel = field(vec3(voxel_pos) + vec3(0.5));\n                vec2 J = box_intersection(local, ray_dir, 0.4);\n                current = result(J.x, box_normal((ray_dir * J.x) + local, ray_dir, vec3(0.4)), vec3(1));\n\n                float s = tanh(length(vel));\n                vec3 d = normalize(vel)*0.5;\n                d *= s;\n                //vec4 test = cylinder_intersection(local, ray_dir,-d,+d, 0.075);\n                vec4 test = cone_intersection(local, ray_dir,-d,+d, 0.15*s, 0.0*s);\n                current = result(test.w, test.xyz, 0.5+0.5*normalize(vel));\n            }\n\n            if(current.dist > 0.0 && current.dist < DIST_MAX)\n            {\n                if(false) // disabling constraint allows sub-objects to slightly leave voxels\n                {\n                    // constrain sub-object to voxel\n                    if(current.dist < enter.dist) current = enter;\n                    else if(current.dist > leave.dist) current = leave;\n                }\n                res = combine(res, current); // could just assign here but e.g. transparent objects would need this\n                break;\n            }\n        }\n\n        nearest = nearest_next;\n        side_dist = side_dist_next;\n        voxel_pos = voxel_pos_next;\n    }\n\n    return res;\n}\n\nvoid mainImage(out vec4 o, in vec2 I)\n{\n    bool demo = all(lessThan(iMouse.xy, vec2(5.0)));\n    vec2 R = iResolution.xy;\n    I = (2.0 * I - R) / R.y; // concise pixel-position mapping thanks to Fabrice\n    float yaw = pi + 2.0 * pi * float(iMouse.x) / float(R.x);\n    float pitch = pi - pi * float(iMouse.y) / float(R.y);\n    //float pitch = pi - pi / 2.0 * float(iMouse.y) / float(R.y);\n    //float pitch = -pi*1.0 - 0.5 * pi * float(iMouse.y) / float(R.y);\n    yaw = !demo ? yaw : .1*iTime;\n    //pitch = !demo ? pitch : 1.0 * pi/2.0;\n    pitch = !demo ? pitch : .2 * iTime+3.;\n\n    vec3 ray_pos = vec3(0.0, 0.0, -20.);\n    vec3 ray_dir = normalize(vec3(I.x, I.y, 2.0));\n\n    mat3 M = yaw_pitch_roll(yaw, pitch, 0.0);\n\n    ray_pos = M * ray_pos;\n    ray_dir = M * ray_dir;\n\n    result res = traverse(ray_pos, ray_dir);\n    vec3 color = res.col;\n    if(res.dist >= 0.0 && res.dist < DIST_MAX)\n    {\n        vec3 normal = res.norm;\n        float dist = res.dist;\n\n        vec3 dst = ray_pos + ray_dir * dist;\n        //color *= texture(iChannel0, dst).xyz;\n        //color *= 0.5 + 0.5 * normal; // debug normals\n\n        if(true) // lighted\n        {\n            vec3 light_dir = normalize(vec3(1, 2, 3));\n            //vec3 light_dir = normalize(vec3(cos(iTime/5.0), sin(iTime/5.0), 1));\n            float diffuse = max(0.0, dot(light_dir, normal));\n            //float lit = diffuse > 0.0 ? traverse(dst + normal * 0.001, light_dir).dist < DIST_MAX ? 0.0 : 1.0 : 0.0;\n            float lit = 1.0; // no shadows\n            float specular = pow(max(0.0, dot(normal, normalize(-ray_dir + light_dir))), 50.0);\n            vec3 ambient = vec3(1.);\n\n            color *= ambient + (2.0 * diffuse + 2.0*specular) * lit;\n        }\n\n        //vec3 fog_color = vec3(0.25, 0.4, 0.5); // fog\n        vec3 fog_color = vec3(0); // darken with distance\n        color = mix(fog_color, color, exp(-pow(dist / 20.0, 2.0))); // fog for depth impression & to suppress flickering\n    }\n    else\n    {\n        color = vec3(0);\n    }\n\n    color = tanh(color); // roll-off / soft-clamp overly bright colors\n    o = vec4(sqrt(color), 1); // approximate gamma\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define go void mainImage( out vec4 O, in vec2 I )\n#define R iResolution\n#define C0 iChannel0\n#define cut(x) clamp(x,0.,1.)\n#define tex(x,y) texelFetch(x,y,0)\n#define P I.x*6.28/s\nfloat s = 130.;","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec3 flow(vec3 a, float n){\nvec3 fl = vec3(0.);\nfor(float k=0.; k<s; k++){\nif(n==k){continue;}\nvec3 vm = a-tex(C0,ivec2(k,0)).xyz;\nvm /= max(pow(vm.x*vm.x+vm.y*vm.y+vm.z*vm.z,2.),.001);\nvec3 tv = tex(C0,ivec2(k,1.)).xyz;\nfl += cross(vm,tv);\n}\nreturn fl;}\n\ngo{\nO=vec4(0.);\nif(I.y>2.){return;}\nif(I.x>s){return;}\nif(iFrame<2){\nif(I.y>1.){\nO.x=cos(P)+4.*cos(2.*P);\nO.y=4.*sin(2.*P)-sin(P);\nO.z=-3.*cos(3.*P);\nO *= 100.;\nreturn;}\nO.x=60.*sin(P)+120.*sin(2.*P)+R.x*.5;\nO.y=60.*cos(P)-120.*cos(2.*P)+R.y*.5;\nO.z=-60.*sin(3.*P);\nreturn;}\nvec4 me = tex(C0,ivec2(I.x,0.));\nO=me;\nif(I.y>1.){\nvec3 left = flow(vec3(me.x-1.,me.y,me.z),-1.);\nvec3 right = flow(vec3(me.x+1.,me.y,me.z),-1.);\nvec3 down = flow(vec3(me.x,me.y-1.,me.z),-1.);\nvec3 up = flow(vec3(me.x,me.y+1.,me.z),-1.);\nvec3 front = flow(vec3(me.x,me.y,me.z-1.),-1.);\nvec3 back = flow(vec3(me.x,me.y,me.z+1.),-1.);\nvec3 gx = vec3(right.x-left.x,up.x-down.x,back.x-front.x);\nvec3 gy = vec3(right.y-left.y,up.y-down.y,back.y-front.y);\nvec3 gz = vec3(right.z-left.z,up.z-down.z,back.z-front.z);\nvec3 myv = tex(C0,ivec2(I)).xyz;\nO=vec4(myv.x+clamp(dot(myv,gx),-3.,3.),myv.y+clamp(dot(myv,gy),-3.,3.),myv.z+clamp(dot(myv,gz),-3.,3.),0.);\nreturn;}\nO.xyz += flow(me.xyz,I.x);\n}","name":"Buffer A","description":"","type":"buffer"}]}