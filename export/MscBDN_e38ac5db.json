{"ver":"0.1","info":{"id":"MscBDN","date":"1525199085","viewed":89,"name":"Not Sure","username":"chandlercr","description":"Nothing much to say","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["pixels"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/**\n* Exercise 4\n * Tutorial Courtesy of Jamie Wong\n *\n * Exercise\n * - Make a scene of your own! Try to use the rotation transforms, the CSG primitives,\n *  and the geometric primitives. Remember you can use vector subtraction for translation,\n *  and component-wise vector multiplication for scaling.\n */\n \nconst int MAX_MARCHING_STEPS = 255;\nconst float MIN_DIST = 0.0;\nconst float MAX_DIST = 100.0;\nconst float EPSILON = 0.0001;\n \n/**\n * Rotation matrix around the X axis.\n */\n\n// polynomial smooth min (k = 0.1);\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nvec3 path( float t )\n{\n    vec2 p  = 100.0*sin( 0.02*t*vec2(1.0,1.2) + vec2(0.1,0.9) );\n\t     p +=  50.0*sin( 0.04*t*vec2(1.3,1.0) + vec2(1.0,4.5) );\n\t\n\treturn vec3( p.x, 10. + 4.0*sin(0.05*t), p.y );   \n}\n\nfloat hash( vec2 p )\n{\n    float h = dot(p,vec2(127.1,311.7));\n    \n    return -1.0 + 2.0*fract(sin(h)*43758.5453123);\n}\n\nmat3 rotateX(float theta) {\n   float c = cos(theta);\n   float s = sin(theta);\n   return mat3(\n       vec3(1, 0, 0),\n       vec3(0, c, -s),\n       vec3(0, s, c)\n   );\n}\n \n/**\n * Rotation matrix around the Y axis.\n */\nmat3 rotateY(float theta) {\n   float c = cos(theta);\n   float s = sin(theta);\n   return mat3(\n       vec3(c, 0, s),\n       vec3(0, 1, 0),\n       vec3(-s, 0, c)\n   );\n}\n \n/**\n * Rotation matrix around the Z axis.\n */\nmat3 rotateZ(float theta) {\n   float c = cos(theta);\n   float s = sin(theta);\n   return mat3(\n       vec3(c, -s, 0),\n       vec3(s, c, 0),\n       vec3(0, 0, 1)\n   );\n}\n \n/**\n * Constructive solid geometry intersection operation on SDF-calculated distances.\n */\nfloat intersectSDF(float distA, float distB) {\n   return max(distA, distB);\n}\n \n/**\n * Constructive solid geometry union operation on SDF-calculated distances.\n */\nfloat unionSDF(float distA, float distB) {\n   return min(distA, distB);\n}\n \n/**\n * Constructive solid geometry difference operation on SDF-calculated distances.\n */\nfloat differenceSDF(float distA, float distB) {\n   return max(distA, -distB);\n}\n \n/**\n * Signed distance function for a cube centered at the origin\n * with dimensions specified by size.\n */\nfloat boxSDF(vec3 p, vec3 size) {\n   vec3 d = abs(p) - (size / 2.0);\n   \n   // Assuming p is inside the cube, how far is it from the surface?\n   // Result will be negative or zero.\n   float insideDistance = min(max(d.x, max(d.y, d.z)), 0.0);\n   \n   // Assuming p is outside the cube, how far is it from the surface?\n   // Result will be positive or zero.\n   float outsideDistance = length(max(d, 0.0));\n   \n   return insideDistance + outsideDistance;\n}\n \n/**\n * Signed distance function for a sphere centered at the origin with radius r.\n */\nfloat sphereSDF(vec3 p, float r) {\n   return length(p) - r;\n}\n\n// I need to make this a heart somehow\n// https://www.shadertoy.com/new\n// https://www.shadertoy.com/view/XsVGzK\nfloat heartSDF(vec3 p, float r) {\n   \n\n    mat4 m = mat4( 1.0 );\n    m[ 3 ] = vec4( 1.0, 1., 2. * ( sin( 1.0 * iTime ) * 0.5 + 0.5 ) , 1.0 );\n    vec3 c = vec3( 10, 10,10 );\n\tp = mod( p, c ) - 0.5 * c;\n    p = ( m * vec4( p, .5 ) ).xyz;\n    \n    //float oval = length( p + vec3( 0, 7. * r / 3., 0 ) ) - 4. * r / 3. - p.y / 2.8;\n    //float sphereLeft = length( p + vec3( r, r/3., 0 ) ) - r;\n    //float sphereRight = length( p + vec3( -r , r/3., 0 ) ) - r;\n    \n    //return smin( min( sphereLeft, sphereRight ), oval, 1.8 ); \n    \n   return length(p) - r;\n}\n\n/*\nfloat heart( vec3 pos, vec3 origin, float r ) \n{\n    mat4 m = mat4( 1.0 );\n    m[ 3 ] = vec4( 1.0, 1., 2. * hash( origin.zy ) * ( sin( 25.0 * iTime ) * 0.5 + 0.5 ) , 1.0 );\n    vec3 c = vec3( 15, 20, 20 );\n\tpos = mod( pos, c ) - 0.5 * c;\n    pos = ( m * vec4( pos, 1. ) ).xyz;\n    \n    float oval = length( pos - origin + vec3( 0, 7. * r / 3., 0 ) ) - 4. * r / 3. - pos.y / 2.8;\n    float sphereLeft = length( pos - origin + vec3( r, r/3., 0 ) ) - r;\n    float sphereRight = length( pos - origin + vec3( -r , r/3., 0 ) ) - r;\n    \n    return smin( min( sphereLeft, sphereRight ), oval, 1.8 ); \n}\n*/\n\n \n/**\n * Signed distance function for an XY aligned cylinder centered at the origin with\n * height h and radius r.\n */\nfloat cylinderSDF(vec3 p, float h, float r) {\n   // How far inside or outside the cylinder the point is, radially\n   float inOutRadius = length(p.xy) - r;\n   \n   // How far inside or outside the cylinder is, axially aligned with the cylinder\n   float inOutHeight = abs(p.z) - h/2.0;\n   \n   // Assuming p is inside the cylinder, how far is it from the surface?\n   // Result will be negative or zero.\n   float insideDistance = min(max(inOutRadius, inOutHeight), 0.0);\n \n   // Assuming p is outside the cylinder, how far is it from the surface?\n   // Result will be positive or zero.\n   float outsideDistance = length(max(vec2(inOutRadius, inOutHeight), 0.0));\n   \n   return insideDistance + outsideDistance;\n}\n \n/**\n * Signed distance function describing the scene.\n *\n * Absolute value of the return value indicates the distance to the surface.\n * Sign indicates whether the point is inside or outside the surface,\n * negative indicating inside.\n */\nfloat sceneSDF(vec3 samplePoint) {   \n   // Slowly spin the whole scene\n   samplePoint = rotateY(iTime / 2.0) * samplePoint;\n   \n    //Smaller Radius hole with staggered opening\n   //float cylinderRadius = ((1.0 - 0.2) * (cos(sin(1.7 * iTime))) / 2.0) - 0.25;\n   float cylinderRadius = ((1.0 - 0.1) * abs((sin(0.7 * iTime))) / 2.0);\n   float cylinder1 = cylinderSDF(samplePoint, 2.0, cylinderRadius);\n   float cylinder2 = cylinderSDF(rotateX(radians(90.0)) * samplePoint, 2.0, cylinderRadius);\n   float cylinder3 = cylinderSDF(rotateY(radians(90.0)) * samplePoint, 2.0, cylinderRadius);\n   \n   float cube = boxSDF(samplePoint, vec3(1.8, 1.8, 1.8));\n   \n   float sphere = sphereSDF(samplePoint, 1.2);\n   \n   float ballOffset = 0.9 + sin(1.7 * iTime);\n   float ballRadius = (1.0 - 0.4) * (1.0 + sin(1.7 * iTime))/3.0;\n   float balls = heartSDF(samplePoint - vec3(ballOffset, 0.0, 0.0), ballRadius);\n   balls = unionSDF(balls, heartSDF(samplePoint + vec3(ballOffset, 0.0, 0.0), ballRadius));\n   balls = unionSDF(balls, heartSDF(samplePoint - vec3(0.0, ballOffset, 0.0), ballRadius));\n   balls = unionSDF(balls, heartSDF(samplePoint + vec3(0.0, ballOffset, 0.0), ballRadius));\n   balls = unionSDF(balls, heartSDF(samplePoint - vec3(0.0, 0.0, ballOffset), ballRadius));\n   balls = unionSDF(balls, heartSDF(samplePoint + vec3(0.0, 0.0, ballOffset), ballRadius));\n   \n   \n   \n   float csgNut = differenceSDF(intersectSDF(cube, sphere),\n                        unionSDF(cylinder1, unionSDF(cylinder2, cylinder3)));\n   \n   return unionSDF(balls, csgNut);\n}\n \n/**\n * Return the shortest distance from the eyepoint to the scene surface along\n * the marching direction. If no part of the surface is found between start and end,\n * return end.\n *\n * eye: the eye point, acting as the origin of the ray\n * marchingDirection: the normalized direction to march in\n * start: the starting distance away from the eye\n * end: the max distance away from the ey to march before giving up\n */\nfloat shortestDistanceToSurface(vec3 eye, vec3 marchingDirection, float start, float end) {\n   float depth = start;\n   for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n       float dist = sceneSDF(eye + depth * marchingDirection);\n       if (dist < EPSILON) {\n                                   return depth;\n       }\n       depth += dist;\n       if (depth >= end) {\n           return end;\n       }\n   }\n   return end;\n}\n           \n \n/**\n * Return the normalized direction to march in from the eye point for a single pixel.\n *\n * fieldOfView: vertical field of view in degrees\n * size: resolution of the output image\n * fragCoord: the x,y coordinate of the pixel in the output image\n */\nvec3 rayDirection(float fieldOfView, vec2 size, vec2 fragCoord) {\n   vec2 xy = fragCoord - size / 2.0;\n   float z = size.y / tan(radians(fieldOfView) / 2.0);\n   return normalize(vec3(xy, -z));\n}\n \n/**\n * Using the gradient of the SDF, estimate the normal on the surface at point p.\n */\nvec3 estimateNormal(vec3 p) {\n   return normalize(vec3(\n       sceneSDF(vec3(p.x + EPSILON, p.y, p.z)) - sceneSDF(vec3(p.x - EPSILON, p.y, p.z)),\n       sceneSDF(vec3(p.x, p.y + EPSILON, p.z)) - sceneSDF(vec3(p.x, p.y - EPSILON, p.z)),\n       sceneSDF(vec3(p.x, p.y, p.z + EPSILON)) - sceneSDF(vec3(p.x, p.y, p.z - EPSILON))\n   ));\n}\n \n/**\n * Lighting contribution of a single point light source via Phong illumination.\n *\n * The vec3 returned is the RGB color of the light's contribution.\n *\n * k_a: Ambient color\n * k_d: Diffuse color\n * k_s: Specular color\n * alpha: Shininess coefficient\n * p: position of point being lit\n * eye: the position of the camera\n * lightPos: the position of the light\n * lightIntensity: color/intensity of the light\n *\n * See https://en.wikipedia.org/wiki/Phong_reflection_model#Description\n */\nvec3 phongContribForLight(vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye,\n                         vec3 lightPos, vec3 lightIntensity) {\n   vec3 N = estimateNormal(p);\n   vec3 L = normalize(lightPos - p);\n   vec3 V = normalize(eye - p);\n   vec3 R = normalize(reflect(-L, N));\n   \n   float dotLN = dot(L, N);\n   float dotRV = dot(R, V);\n   \n   if (dotLN < 0.0) {\n       // Light not visible from this point on the surface\n       return vec3(0.0, 0.0, 0.0);\n   }\n   \n   if (dotRV < 0.0) {\n       // Light reflection in opposite direction as viewer, apply only diffuse\n       // component\n       return lightIntensity * (k_d * dotLN);\n   }\n   return lightIntensity * (k_d * dotLN + k_s * pow(dotRV, alpha));\n}\n \n/**\n * Lighting via Phong illumination.\n *\n * The vec3 returned is the RGB color of that point after lighting is applied.\n * k_a: Ambient color\n * k_d: Diffuse color\n * k_s: Specular color\n * alpha: Shininess coefficient\n * p: position of point being lit\n * eye: the position of the camera\n *\n * See https://en.wikipedia.org/wiki/Phong_reflection_model#Description\n */\nvec3 phongIllumination(vec3 k_a, vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye) {\n   const vec3 ambientLight = 0.5 * vec3(1.0, 1.0, 1.0);\n   vec3 color = ambientLight * k_a /2.0;\n   \n   vec3 light1Pos = vec3(4.0 * sin(iTime),\n                         2.0,\n                         4.0 * cos(iTime));\n   vec3 light1Intensity = vec3(0.4, 0.4, 0.4);\n   \n   color += phongContribForLight(k_d, k_s, alpha, p, eye,\n                                 light1Pos,\n                                 light1Intensity);\n   \n   vec3 light2Pos = vec3(2.0 * sin(0.37 * iTime),\n                         2.0 * cos(0.37 * iTime),\n                         2.0);\n   vec3 light2Intensity = vec3(0.4, 0.4, 0.4);\n   \n   color += phongContribForLight(k_d, k_s, alpha, p, eye,\n                                 light2Pos,\n                                 light2Intensity);   \n   return color;\n}\n \n/**\n * Return a transform matrix that will transform a ray from view space\n * to world coordinates, given the eye point, the camera target, and an up vector.\n *\n * This assumes that the center of the camera is aligned with the negative z axis in\n * view space when calculating the ray marching direction. See rayDirection.\n */\nmat3 viewMatrix(vec3 eye, vec3 center, vec3 up) {\n   // Based on gluLookAt man page\n   vec3 f = normalize(center - eye);\n   vec3 s = normalize(cross(f, up));\n   vec3 u = cross(s, f);\n   return mat3(s, u, -f);\n}\n \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n           vec3 viewDir = rayDirection(45.0, iResolution.xy, fragCoord);\n   vec3 eye = vec3(10.0, 5.0 * sin(0.2 * iTime), 7.0);\n   \n   mat3 viewToWorld = viewMatrix(eye, vec3(0.0, 0.0, 0.0), vec3(0.0, 1.0, 0.0));\n   \n   vec3 worldDir = viewToWorld * viewDir;\n   \n   float dist = shortestDistanceToSurface(eye, worldDir, MIN_DIST, MAX_DIST);\n   \n   if (dist > MAX_DIST - EPSILON) {\n       // Didn't hit anything\n       fragColor = vec4(1.0*sin(iTime)/2.0, 10.0, 100.0, 10.0);\n       //fragColor = vec4(0.0, 0.0, 0.0, 0.0);\n                       return;\n   }\n   \n   // The closest point on the surface to the eyepoint along the view ray\n   vec3 p = eye + dist * worldDir;\n   \n   // Use the surface normal as the ambient color of the material\n   vec3 K_a = (estimateNormal(p) + vec3(1.0)) / 2.0;\n   vec3 K_d = K_a;\n   vec3 K_s = vec3(20.0, 1.0, 30.0);\n   float shininess = 5000.0;\n   \n   vec3 color = phongIllumination(K_a, K_d, K_s, shininess, p, eye);\n   \n    //figure out how to get the texture on there\n    //https://orig00.deviantart.net/9efb/f/2011/172/2/2/companion_cube_face_by_bulbablaaah-d3jl8wz.png\n   //fragColor = vec4(color*1.5, 10.0);\n}\n\n","name":"Image","description":"","type":"image"}]}