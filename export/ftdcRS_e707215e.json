{"ver":"0.1","info":{"id":"ftdcRS","date":"1661118836","viewed":112,"name":"Polar rose","username":"nkaretnikov","description":"Polar rose.\n","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","polar","rose"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Public domain or CC0.\n\n// This is a version of the parametric rose shader.\n// This one uses the polar form, which could give you the\n// distance to the outer shape, but you still need to sample\n// points to see the entire curve, which is why this is slow.\n\n#define PI acos(-1.)\n\nvec2 toPolar(vec2 uv)\n{\n  // phi, r\n  return vec2(atan(uv.y, uv.x), length(uv));\n}\n\nvec2 fromPolar(vec2 uv)\n{\n  return vec2(uv.y*cos(uv.x), uv.y*sin(uv.x));\n}\n\nfloat pRose(float a, float k, float theta)\n{\n  return a*sin(k*theta);\n  // return a*cos(k*theta);\n}\n\nvec3 drawRose(vec3 color,vec2 uv,float a,float k,float t,vec3 pColor)\n{\n  float theta=PI*t; // 0<>12pi\n  float d=pRose(a,k,theta); // rose\n  vec2 pq=fromPolar(vec2(theta,d));\n\n  if (length(vec2(uv.x-pq.y,uv.y-pq.x))<.02) // sphere\n    color=+pColor; // combine colors\n\n  return color;\n}\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord)\n{\n  vec2 uv=(2.*fragCoord-iResolution.xy)/iResolution.y; // -1<>1\n  uv*=1.2; // scale a bit\n\n  vec3 r=vec3(1.,0.,0.);\n  vec3 g=vec3(0.,1.,0.);\n  vec3 b=vec3(0.,0.,1.);\n  vec3 color=r;\n\n  float a=1.;\n  float eps=.005; // sampling\n  float n=mod(iTime*.01,7.); // petals\n  float d=9.-mod(iTime*.01,9.);\n  float k=n/d;\n\n  // sample a bunch of fixed points\n  for (float t=0.;t<24.;t+=eps) {\n    color+=drawRose(color,uv,a,k,t,b)-r;\n  }\n\n  // animate a rotating point\n  {\n    float t=mod(iTime*.2,24.);\n    color+=drawRose(color,uv,a,k,t,g)-r;\n  }\n\n  fragColor=vec4(color,1.);\n}","name":"Image","description":"","type":"image"}]}