{"ver":"0.1","info":{"id":"tlsfRX","date":"1597355551","viewed":70,"name":"projector blending 2","username":"nshelton","description":"this one desint seem as good","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["gradient"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":" \n#define PI 3.14159265\n// distance to other center\nfloat sdBox( in vec2 p, in vec2 b) \n{\n    vec2 q = abs(p)-b ;\n    return min(max(q.x,q.y),0.0) + length(max(q,0.0)) ;\n}\n\n// distance to line segment\nfloat udSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 ba = b-a;\n    vec2 pa = p-a;\n    float h =clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length(pa-h*ba);\n}\n\n\nmat2 rotationMatrix(float theta) \n{\n    return mat2(cos(theta), -sin(theta), sin(theta), cos(theta));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n\n    \n\tvec2 size = vec2(0.9,0.6);\n \n    // translate right screen\n    vec2 center0 = vec2(sin(iTime)* 0.2 + 0.5, 0.0);\n    vec2 p0 = p - center0;\n\tfloat d0box = sdBox(p0, size);\n    \n    //rotate left screen\n    mat2 rotation = rotationMatrix(0.2 + sin(iTime * 0.5));\n    vec2 p1 = p* rotation+ 0.5;\n    vec2 center1 = rotation * vec2(-0.5);\n\n    float d1box = sdBox( p1 , size  );\n\n       \n    vec3 color = vec3(0.0);\n       \n\n    if ( d0box < 0.0 && d1box > 0.0)\n    {\n        // right screen \n        color = vec3(1.0, 0.0, 0.0);\n        \n    } \n    else if ( d0box > 0.0 && d1box < 0.0)\n    {\n        // left screen\n        color = vec3(0.0, 0.0, 1.0);\n    }\n    if (d0box < 0.0 && d1box < 0.0)\n    {\n        // both screens\n        \n\n        \n       // color = vec3(r, 0., 0.0);\n    }\n    \n    vec2 midpoint = (center1 + center0) / 2.0;\n\n    // rotate 90\n    vec2 up = 4.0 * (midpoint - center0) * rotationMatrix(PI/2.0) ;\n    float dLine = udSegment(p, midpoint -up, midpoint + up);\n    float dCenters = udSegment(p, center1,center0);\n\n    color.g = smoothstep(1.0, 0.0, dLine);\n    color = mix(color, vec3(0.0), smoothstep(0.01, 0.0, dLine));\n    color = mix(color, vec3(0.0), smoothstep(0.01, 0.0, dCenters));\n\n    //color.rb /= 2.0;\n\tfragColor = vec4(color ,1.0);\n        \n}","name":"Image","description":"","type":"image"}]}