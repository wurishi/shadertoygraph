{"ver":"0.1","info":{"id":"Dt2Gz3","date":"1673622628","viewed":144,"name":"line potential","username":"mahalis","description":"been looking for a closed-form equation that could approximate a line light; this one seems promising","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","light","area","electrostatics"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - iResolution.xy * 0.5)/iResolution.y;\n    \n    vec2 p1 = vec2(-0.3 + 0.3 * sin(iTime * 0.31), -0.2 + 0.1 * sin(iTime * 0.23 + 0.4));\n    vec2 p2 = vec2(0.2 + 0.4 * sin(iTime * 0.45 + 0.2), 0.2 + 0.3 * sin(iTime * 0.54 + 0.3));\n    \n    float distanceScale = 2.; // higher values = farther reach\n    \n    // from “Geometrical interpretation of the electrostatic potential created by a uniformly charged straight wire”\n    // by Orion Ciftja et al.\n    // https://iopscience.iop.org/article/10.1088/1361-6404/aaf061/ampdf\n    // the original does not include the distanceScale factor, it’s nonphysical\n    \n    float pointDistance = distance(p2, p1);\n    float r1 = distance(uv, p1);\n    float r2 = distance(uv, p2);\n    \n    float value = max(0., min(1., 0.1 * log(distanceScale * (r1 + r2 + pointDistance) / (r1 + r2 - pointDistance))));\n    \n    fragColor = vec4(vec3(value),1.0);\n}","name":"Image","description":"","type":"image"}]}