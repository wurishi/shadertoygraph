{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"musicstream","id":"MlfXD7","filepath":"https://soundcloud.com/andre-van-kammen/electric-guitar-on-synth-beat","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"code":"#define StepSize .5\n#define LineCount 30\n\n//Function to draw a line, taken from the watch shader\nfloat line(vec2 p, vec2 a, vec2 b, float thickness, float extend )\n{\n\tvec2 pa = p - a;\n\tvec2 ba = b - a;\n\tfloat h = clamp(dot(pa, ba) / dot(ba, ba),-extend,1.0 + extend);\n\treturn 1.0 - smoothstep(thickness * 0.8, thickness * 1.2, length(pa - ba * h));\n}\t\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy / iResolution.xy);\n\t\t\n\tvec2 wav = vec2(length(texture(iChannel0, vec2(uv.x, 1)).xyz),\n\t\t\t\t\tlength(texture(iChannel0, vec2(uv.y, 1)).xyz));\n    // wav *= 3.0;\n    //vec4 spec = texture(iChannel0, vec2(uv.y, 0));\n\n\tuv *= 2.0 - 1.0 ;\n    float extend  = wav.y;\n\n\t// convert the input coordinates by a cosinus\n\t// warpMultiplier is the frequency\n\tfloat warpMultiplier = (6.0 + 1.5 * sin(iTime * 0.125));\n\tvec2 warped = cos(uv * 6.28318530718 * warpMultiplier)-cos(uv.yx*17.77*sin(iTime)+iTime)+ 0.1*wav.xy-sin(uv.xy+iTime);\n\n\n\tfloat gt = iTime*2.0;//floor(iTime * 20.0) * StepSize;\n\n\n\t// blend between the warpeffect and no effect\n\t// don't go all the way to the warp effect\n\tfloat warpornot = smoothstep(.5, 18.0, 2.0*sin(iTime * .25)+warped.x+warped.y)*0.15;\n\n\t// Variate the thickness of the lines\n\tfloat thickness = pow(1.5- 1.45 * cos(iTime), 2.0) / iResolution.x - wav.x*0.003 + wav.y*0.003;\n\t// thickness *= .1 + (warpMultiplier * warpornot)  + wav.x + wav.y;\n\n    float brighness = .2/pow(thickness,.5);\n\t// Add 10 lines to the pixel\n\tvec4 color = vec4(0.0, 0.0, 0.0, 1.0);\n\tfor (int i = 0; i < LineCount; i++)\n\t{\n\t\tgt += StepSize;\n\n\t\tthickness *= 1.25;\n        brighness *= 1.0/1.25;\n\t\tuv = mix(uv, warped, warpornot);\n\n\t\t//Calculate the next two points\n\t\tvec2 point1 = vec2(sin(gt * 0.39), cos(gt * 0.23));\n\t\tvec2 point2 = vec2(cos(gt * 0.29), sin(gt * 0.22));\n\n\t\t// Add new line\n\t\tcolor.rgb += line(\tuv,\n\t\t\t\t\t\t\tpoint1, point2,\n\t\t\t\t\t\t\tthickness,extend)\n\t\t\t\t\t//With color\n\t\t\t\t\t* ( brighness +\n\t\t\t\t\t\tbrighness * vec3(\tsin(gt * 1.73),\n\t\t\t\t\t\t\t\t\tcos(gt * 2.19),\n\t\t\t\t\t\t\t\t\tsin(gt * 1.67)));\n}\n\n\t// Clamp oversaturation\n\tfragColor = clamp(color, 0.0, 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":true},"info":{"id":"XsXGRf","date":"1375127012","viewed":760,"name":"Psychedelic lines","username":"Andre","description":"2021: Changed to music I made in audiotool.com. I'm currently building my own audiotool based on shaders (like the sound shader here). So a combination of shadertoy and audiotool.\n[url=https://shadersynth.com]shadersynth.com[/url]","likes":8,"published":1,"flags":64,"usePreview":0,"tags":["procedural","2d","lines","audio"],"hasliked":0,"parentid":"","parentname":""}}