{"ver":"0.1","info":{"id":"sdjfRD","date":"1645789216","viewed":112,"name":"Seedable, tileable OpenSimplex2","username":"leoxshn","description":"An attempt at a tileable, seedable 3D OpenSimplex2 implementation, pls help\nI'm using this for voxel world generation on the GPU","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["noise","simplex","tileable","opensimplex","seed","gradientnoise","opensimplex2"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//////////////// K.jpg's Re-oriented 4-Point BCC Noise (OpenSimplex2) ////////////////\n////////////////////// Output: vec4(dF/dx, dF/dy, dF/dz, value) //////////////////////\n\n/// Modded by Zagura\n\n// Inspired by Stefan Gustavson's noise\nvec4 _open_simplex2_tileable_permute(vec4 t, float seed) {\n    return t * ((t + seed) * 34.0 + 133.0);\n}\n\n// Gradient set is a normalized expanded rhombic dodecahedron\nvec3 _open_simplex2_tileable_grad(float hash) {\n\n    // Random vertex of a cube, +/- 1 each\n    vec3 cube = mod(floor(hash / vec3(1.0, 2.0, 4.0)), 2.0) * 2.0 - 1.0;\n\n    // Random edge of the three edges connected to that vertex\n    // Also a cuboctahedral vertex\n    // And corresponds to the face of its dual, the rhombic dodecahedron\n    vec3 cuboct = cube;\n    cuboct[int(hash / 16.0)] = 0.0;\n\n    // In a funky way, pick one of the four points on the rhombic face\n    float type = mod(floor(hash / 8.0), 2.0);\n    vec3 rhomb = (1.0 - type) * cube + type * (cuboct + cross(cube, cuboct));\n\n    // Expand it so that the new edges are the same length\n    // as the existing ones\n    vec3 grad = cuboct * 1.22474487139 + rhomb;\n\n    // To make all gradients the same length, we only need to shorten the\n    // second type of vector. We also put in the whole noise scale constant.\n    // The compiler should reduce it into the existing floats. I think.\n    grad *= (1.0 - 0.042942436724648037 * type) * 32.80201376986577;\n\n    return grad;\n}\n\nvec3 _open_simplex2_tileable_wrap_dist(vec3 dist, vec3 limit) {\n    vec3 ad = abs(dist);\n    return sign(dist) * min(ad, limit - ad);\n}\n\nvec3 _open_simplex2_tileable_wrap(vec3 dist, vec3 limit) {\n    vec3 m = mod(dist, limit);\n    vec3 sign = sign(m);\n    vec3 is_negative = sign * -0.5 + 0.5;\n    is_negative *= abs(sign);\n    return m + is_negative * limit;\n}\n\n// BCC lattice split up into 2 cube lattices\nvec4 open_simplex2_tileable_base(vec3 X, vec3 frequency, vec3 limit, float seed) {\n    X = _open_simplex2_tileable_wrap(X, limit);\n    X *= frequency;\n    limit *= frequency;\n\n    // First half-lattice, closest edge\n    vec3 v1 = _open_simplex2_tileable_wrap(round(X), limit);\n    vec3 dd1 = X - v1;\n    vec3 d1 = _open_simplex2_tileable_wrap_dist(dd1, limit);\n    vec3 score1 = abs(d1);\n    vec3 dir1 = step(max(score1.yzx, score1.zxy), score1);\n    vec3 v2 = _open_simplex2_tileable_wrap(v1 + dir1 * sign(dd1), limit);\n    vec3 d2 = _open_simplex2_tileable_wrap_dist(X - v2, limit);\n\n    // Second half-lattice, closest edge\n    vec3 X2 = _open_simplex2_tileable_wrap(X + 144.5, limit);\n    vec3 v3 = _open_simplex2_tileable_wrap(round(X2), limit);\n    vec3 dd3 = X2 - v3;\n    vec3 d3 = _open_simplex2_tileable_wrap_dist(dd3, limit);\n    vec3 score2 = abs(d3);\n    vec3 dir2 = step(max(score2.yzx, score2.zxy), score2);\n    vec3 v4 = _open_simplex2_tileable_wrap(v3 + dir2 * sign(dd3), limit);\n    vec3 d4 = _open_simplex2_tileable_wrap_dist(X2 - v4, limit);\n\n    // Gradient hashes for the four points, two from each half-lattice\n    vec4 hashes = _open_simplex2_tileable_permute(mod(vec4(v1.x, v2.x, v3.x, v4.x), 289.0), seed);\n    hashes = _open_simplex2_tileable_permute(mod(hashes + vec4(v1.y, v2.y, v3.y, v4.y), 289.0), seed);\n    hashes = mod(_open_simplex2_tileable_permute(mod(hashes + vec4(v1.z, v2.z, v3.z, v4.z), 289.0), seed), 48.0);\n\n    // Gradient extrapolations & kernel function\n    vec4 a = max(0.5 - vec4(dot(d1, d1), dot(d2, d2), dot(d3, d3), dot(d4, d4)), 0.0);\n    vec4 aa = a * a; vec4 aaaa = aa * aa;\n    vec3 g1 = _open_simplex2_tileable_grad(hashes.x); vec3 g2 = _open_simplex2_tileable_grad(hashes.y);\n    vec3 g3 = _open_simplex2_tileable_grad(hashes.z); vec3 g4 = _open_simplex2_tileable_grad(hashes.w);\n    vec4 extrapolations = vec4(dot(d1, g1), dot(d2, g2), dot(d3, g3), dot(d4, g4));\n\n    // Derivatives of the noise\n    vec3 derivative = -8.0 * mat4x3(d1, d2, d3, d4) * (aa * a * extrapolations)\n        + mat4x3(g1, g2, g3, g4) * aaaa;\n\n    // Return it all as a vec4\n    return vec4(derivative, dot(aaaa, extrapolations));\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord) {\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.yy;\n\n    vec4 s = open_simplex2_tileable_base(vec3(uv.xy, iTime * 0.02), vec3(6.0), vec3(1.0), round(iTime));\n    vec3 col = 0.5 + 0.5 * s.aaa;\n\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}