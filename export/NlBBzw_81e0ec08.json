{"ver":"0.1","info":{"id":"NlBBzw","date":"1655597181","viewed":134,"name":"mandelexp","username":"pb","description":"mandelbrot mix of z squared plus exponential function","likes":7,"published":1,"flags":32,"usePreview":0,"tags":["fractal","mandelbrot","exponentialfunction"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//philip.bertani@gmail.com\n//trying some cheap antialiasing here\n//by averaging pixels instead of casting more rays\n//seems to work ok in this case\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = fragCoord.xy/iResolution.xy;\n\n    //size of one texel in iChannel0\n    vec2 texel = 1./iResolution.xy;\n\n    vec4 total_color;\n    //see 5x5 gaussian weights in Common \n    for (int i=0;i<5;i++){\n        float fi = float(i)-2.;\n        for (int j=0;j<5;j++){ \n            float fj = float(j)-2.;\n            vec4 color = texture(iChannel0, \n                uv + vec2( texel.x*fi,texel.y*fj )  );\n            total_color += color * gk1s[i*5 + j];\n        }\n    }\n   \n   \n    fragColor = total_color;\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//gaussian_kernel_one_stdev\nfloat[] gk1s = float[] (\n        0.003765,0.015019,0.023792,0.015019,0.003765,\n        0.015019,0.059912,0.094907,0.059912,0.015019,\n        0.023792,0.094907,0.150342,0.094907,0.023792,\n        0.015019,0.059912,0.094907,0.059912,0.015019,\n        0.003765,0.015019,0.023792,0.015019,0.003765 );","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// philip.bertani@gmail.com\n\nvec2 zz( in vec2 z ) {\n    //classic z squared iteration here\n    return vec2(z.x*z.x-z.y*z.y, 2.*z.x*z.y);\n}\n\nvec2 expz( in vec2 z ) {\n    //exponential function here\n    return vec2( exp(z.x)*cos(z.y), exp(z.x)*sin(z.y) );\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 uv = (2.0*fragCoord-iResolution.xy)/iResolution.y;    \n    \n    float myTime = iTime;\n    \n    //we want to start in a particular rectangle in complex plane\n    vec2 center = vec2( -1.587+.02*sin(myTime/5.),-.34-.02*sin(myTime/7.)); //-.31000);\n    vec2 width  = (1.-.8*sin(myTime/9.))*.5*vec2( .025, .03);\n    \n    vec2 final_uv = uv * width + center ; \n    \n    float max_iter=1100., mix_factor=.711, infinity=1.e9;\n    vec3  julia_freq = vec3(  9.5 + sin(myTime),\n                              10. ,\n                              50. );// + 10.*sin(myTime/5.) ) ;\n\n                         \n    vec4 qq = vec4(0.); //counts orbit in 4 quadrants\n    \n    //mix_factor += .02 * sin(myTime/5.);\n    vec2 wgt=vec2(mix_factor, 1.-mix_factor);\n    \n\n    vec2 iter=final_uv, new_iter;\n    float escape_value = 0.;\n    for ( float i=0.; i<max_iter; i++ ) {\n    \n        new_iter = wgt.x * zz(iter) + wgt.y*expz(iter) + final_uv;\n        iter = new_iter;\n        \n        float distance = new_iter.x*new_iter.x + new_iter.y*new_iter.y;\n\n        //keep track if how many times the orbit is in \n        //the various 4 quadrants (for coloring)\n        if (new_iter.x >= 0.0) {\n            if (new_iter.y >= 0.0) {\n                qq[0] ++;\n            }\n            else {\n                qq[1] ++;\n            }\n        }\n        else {\n            if (new_iter.y >= 0.0) {\n                qq[2] ++;\n            }\n            else {\n                qq[3] ++;\n            }\n        }\n        \n        //the usual distance bigger than some large number check\n        //NOT using distance estimator here\n        if ( distance > infinity ) {\n            escape_value = i;\n            break;\n        }\n         \n    }\n    \n    if ( escape_value != 0. ) {\n        vec3 qx = vec3( qq[3]*julia_freq[0], \n                        qq[0]*julia_freq[1],\n                        qq[2]*julia_freq[2]\n                       );\n        \n        fragColor = vec4( cos( qx / escape_value ), 1. ); \n    }\n    else {\n        fragColor = vec4( vec3(0.), 1. );\n    }\n    \n\n}","name":"Buffer A","description":"","type":"buffer"}]}