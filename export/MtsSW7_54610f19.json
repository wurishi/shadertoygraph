{"ver":"0.1","info":{"id":"MtsSW7","date":"1437327506","viewed":155,"name":"Sinverse","username":"jayjayjay","description":"messing around with creating effects with polar coordinates","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d","demo","sinwave","polar"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"/*\n\tmainImage() is a method that runs for every pixels in a rendering viewport.  \n\t\tinputs the coordinates of the pixel\n\t\toutputs the a color for that pixel\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //in vec2 fragCoord: input 2d vector containing the coordinates of the fragment (a.k.a. the pixel)\n    //out vec4 fragColor: output 4d vector containing the color information, e.g. vec4(1,0,0,.5) is red with half transparency/alpha    \n    \n\t\n    //normalizes the fragment coordinates with respect to the viewport size\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    \n    //build polar coordinates\n    float r = length(uv);\n    float theta = atan(fragCoord.y, fragCoord.x); //in radians\n\n    \n    //mess around with r and theta\n    // *iTime cooresponds to that timer next the fps label\n    float newR = r + sin(iTime); //sins always cool\n    float newTheta = theta + (iTime/5.); //adding a scaled down iTime to keep the step small, since theta is in radians\n    \n    \n    //rebuild cartesian coordinates\n    float tX = newR * cos(newTheta);\n    float tY = newR * sin(newTheta);\n    vec2 tCoord = vec2(tX,tY);\n\n    //FINALLY:\n    //get the color corresponding to the new coordinates off some texture\n    //assign that color to the output parameter\n    fragColor = texture(iChannel0,tCoord); //important!: texture is expecting tCoords to be normalized!\n    \n    \n    //final touch\n    fragColor *= r; //blends the pixel color to black the closer it is to the origin (0,0)\n    //fragColor /= r; //or white\n}","name":"","description":"","type":"image"}]}