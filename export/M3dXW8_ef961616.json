{"ver":"0.1","info":{"id":"M3dXW8","date":"1718988321","viewed":41,"name":"Ray marching Soks_da_Kat","username":"Soks_da_Kat","description":"Made following the tutorial by Kishimisu","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//define sphere\nfloat sdSphere (vec3 p, float s) {\n    return length (p)-s;\n    }\n//define cube\nfloat sdCube(vec3 p, vec3 b) {\n    vec3 q = abs (p)-b;\n    return length (max(q,0.0))+min(max(q.x,max( q.y,q.z)),0.0);\n    }\n//define octahedron\nfloat sdOct (vec3 p, float s) {\n    p = abs(p);\n    return(p.x + p.y +p.z-s)*0.57735027;\n    }\n//defining the function smin which causes the smooth union of the two shapes\nfloat smin(float sphere, float cube, float k) {\n    float h = clamp(0.5 + 0.5*(sphere-cube)/k, 0.0, 1.0);\n    return mix(sphere, cube, h) - k*h*(1.0-h);\n    }\n//define 2D rotation\nmat2 rot2D(float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat2(c, -s, s, c);\n    }\n//define the colour palette\nvec3 palette (float t) {\n    vec3 a = vec3 (0.5, 0.5, 0.5);\n    vec3 b = vec3 (0.5, 0.5, 0.5);\n    vec3 c = vec3 (1., 1., 1.);\n    vec3 d = vec3 (0.263, 0.416, 0.557);\n    return a + b*cos(6.28318*(c*t+d));\n    }\n\n\n//position objects\nfloat map(vec3 p) {\n    p.z +=iTime * .4; //moves object\n    p.xy = fract (p.xy) -.5; //repetition xy coord\n    p.z = mod (p.z, 0.25) -0.125; //repetition z coord\n    float octahedron =sdOct(p, .15); //defines object chosen\n    \n    return octahedron; \n}\n\n//render objects\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy)/iResolution.y;\n    //vec2 m = (iMouse.xy *2.-iResolution.xy)/iResolution.y;\n    vec2 m = vec2(cos(iTime*.2),sin(iTime*0.2));\n    \n    //initialisation\n    vec3 O = vec3 (0.0, 0.0, -3.0); //ray origin (point)\n    vec3 v = normalize (vec3 (uv, 1.0)); //ray direction (vector), the uv makes it so that there's rays pointing in all directio\n    float t = 0.0; // total distance travelled\n    vec3 col = vec3(1.0,0.0,0.0); //color\n    \n    //vertical camera rotation\n    //O.zy *= rot2D(-m.y);\n    //v.zy *= rot2D(-m.y);\n    // horizontal camera rotation\n    //O.xz *= rot2D(-m.x);\n    //v.xz *= rot2D(-m.x);\n    \n    //raymarching\n    int i;\n    for (i = 0; i<80; i++){\n        vec3 p = O + v*t; //position along the ray\n        \n        p.xy *=rot2D(t*.2 *m.x); //spirals the cubes\n        p.y += sin(t*(m.y+1.)*.5)*.35; //wiggles the cubes in y-axis\n        \n        float d = map (p); //current distance to the closest object\n\n        t +=d; //adds the distance travelled in each iteration to the total distance\n        \n        if (d<0.001) break; //stop when too close\n        if (t>100.) break; //stop when too far\n    }\n    \n    col = palette(t*0.04 + float (i)*0.005); //color based on distance, the i adds the slight colour variation\n    \n    fragColor= vec4 (col, 1.0);\n}","name":"Image","description":"","type":"image"}]}