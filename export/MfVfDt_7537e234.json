{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"// Heptagon Algebraic Construction.\n// Made by Rik Riesmeijer - CC0, No Rights Reserved.\n\n/* Start of @Spalmer's cubic root solver. */\nvec3 CubicSpalmerInlined(vec4 k)\n{\n    float NaN = uintBitsToFloat(0x7f800001u);\n    float d = k.x, c = k.y, b = k.z, a = k.w;\n    if (a == 0.) { // quadratic inlined\n        if (b == 0.)\n            return vec3(-d/c, NaN, NaN); // handle malformed eqn, let divide handle c == 0 case\n        float n = c * c - 4. * b * d; // discriminant\n        return vec3(n < 0. ? vec2(NaN) :\n            .5 / b * (sign(b) * sqrt(n) * vec2(-1, 1) - c) // two solutions, lesser first (may be identical)\n            , NaN);\n    }\n    d /= a; c /= a; b /= a;\n    float x = b/-3.; // inflection point\n    d += (c - 2.*x*x)*x; c += b*x; // depress cubic\n    float l = c / 3.,\n        s = l*l*l,\n        m = d*d + 4.*s;\n    if (m > 0.) { // 1 real root\n        vec2 w = sqrt(m) * vec2(1,-1) - d;\n        float v = abs(w.x) < abs(w.y) ? w.y : w.x;\n        v = sign(v) * pow(.5*abs(v), 1./3.);\n        return vec3(v - l / v, NaN, NaN) + x; // Blinn single cbrt idea\n    }\n    // 2 or 3 distinct roots\n    return 2. * sign(c)*sqrt(abs(l)) * cos((atan(sqrt(-m), -sign(c)*d) - acos(-1.) * vec3(0,2,4))/3.) + x;\n}\n/* End of @Spalmer's cubic root solver. */\n\nfloat l(float x, float y, vec2 z) {\n    return length(vec2(x, y) - z);\n}\n\nvoid mainImage(out vec4 y, in vec2 z) {\n    z = 3.0 * (z - 0.5 * iResolution.xy) / iResolution.y;\n\n    vec3 r = CubicSpalmerInlined(vec4(-1, -2, 1, 1));\n    \n    float x0, x1, x2, x3, x4, x5, x6;\n    float y0, y1, y2, y3, y4, y5, y6;\n    \n    x0 = 1.0;\n    y0 = 0.0;\n    \n    x1 = r.x / 2.0;\n    y1 = sqrt(1.0 - x1 * x1);\n    \n    x2 = r.y / 2.0;\n    y2 = sqrt(1.0 - x2 * x2);\n    \n    x3 = r.z / 2.0;\n    y3 = sqrt(1.0 - x3 * x3);\n    \n    x4 = r.z / 2.0;\n    y4 = -sqrt(1.0 - x4 * x4);\n    \n    x5 = r.y / 2.0;\n    y5 = -sqrt(1.0 - x5 * x5);\n    \n    x6 = r.x / 2.0;\n    y6 = -sqrt(1.0 - x6 * x6);\n    \n    float d0, d1, d2, d3, d4, d5, d6;\n    \n    d0 = l(x0, y0, z);\n    \n    d1 = l(x1, y1, z);\n    \n    d2 = l(x2, y2, z);\n    \n    d3 = l(x3, y3, z);\n    \n    d4 = l(x4, y4, z);\n    \n    d5 = l(x5, y5, z);\n    \n    d6 = l(x6, y6, z);\n    \n    float d = min(min(min(d0, d1), min(d2, d3)), min(min(d4, d5), d6));\n    \n    y = vec4(d < 0.1);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MfVfDt","date":"1734597067","viewed":58,"name":"Heptagon Algebraic Construction","username":"rikr","description":"Just another one of these, I made all possible constructible ones up to bisection and products, so I thought I'd do the first missing algebraic one.. Made by Rik Riesmeijer - CC0, No Rights Reserved.","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["algebra","heptagon"],"hasliked":0,"parentid":"","parentname":""}}