{"ver":"0.1","info":{"id":"M3lBzl","date":"1728789596","viewed":23,"name":"Worse Desmos","username":"pewpewman","description":"This is one of the things I wanted to do most when I was first learning glsl because I love messing around on desmos. There might be a more efficient way of doing this. To put in your own formulas, you just need to change \"float real_y =\".","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["math"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nbool is_point_on_line(float x, float y, float line_thickness)\n{\n    float half_line_thickness = line_thickness * 0.5f;\n    float y_pos = y + half_line_thickness;\n    float y_neg = y - half_line_thickness;\n    //float real_y = (iResolution.y / 5.0f) * sin(x / 40.0f) + iResolution.y * 0.5f;\n    float real_y = iResolution.y * log(x) / 10.0f;\n    return (y_neg <= real_y && y_pos >= real_y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    fragColor = vec4(vec3(0.0f), 1.0f);\n    \n    if (is_point_on_line(fragCoord.x, fragCoord.y, 10.0f))\n    {\n        fragColor = vec4(1.0f);\n    }\n}","name":"Image","description":"","type":"image"}]}