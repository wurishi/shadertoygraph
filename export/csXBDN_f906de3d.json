{"ver":"0.1","info":{"id":"csXBDN","date":"1688723805","viewed":101,"name":"Bilinear fixed point demo","username":"Suslik","description":"Watch in fullscreen. The left half has UV's discretized as 8-bit fixed point values that comes from interpolating between the first 2x2 texels of Buffer A that's used as a lookup.","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["interpolation","bilinear","fixedpoint"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized float 32-bit screen uv (from 0 to 1)\n    vec2 screenUv = fragCoord/iResolution.xy;\n    \n    // Normalized float 32-bit uv of Buffer A in the range of texel (0, 0) to texel (1, 1)\n    vec2 bufferUv = (vec2(0.5f) + screenUv) / iResolution.xy;\n    \n    // if texel interpolation was done in floating point 32-bit, then lookupUv would be (almost) equal to screenUv.\n    // however, texel interpolation is done in 8-bit fixed point, so lookupUv has discretization precision of 1.0f/256.0f\n    vec2 lookupUv = texture(iChannel0, bufferUv).xy;\n    \n    //here's an explanation in d3d11 spec why this is the case: https://microsoft.github.io/DirectX-Specs/d3d/archive/D3D11_3_FunctionalSpec.htm#7.18.8%20Linear%20Sample%20Addressing\n    //here's the constant that defines 8-bit fixed point: https://microsoft.github.io/DirectX-Specs/d3d/archive/D3D11_3_FunctionalSpec.htm#D3D11_SUBTEXEL_FRACTIONAL_BIT_COUNT\n    \n    fragColor = vec4(1.0f, 0.0f, 0.0f, 1.0f);\n    float width = 1e-3f;\n    if(screenUv.x < 0.5f - width)\n        fragColor = texture(iChannel1, lookupUv); //this looks even nastier than it actually is due to mipmapping at discretization discontinuities\n    if(screenUv.x > 0.5f + width)\n        fragColor = texture(iChannel1, screenUv);\n        \n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 pixelIndex = clamp(ivec2(floor(fragCoord.xy)), ivec2(0), ivec2(1));\n    fragColor = vec4(pixelIndex, 0.0f, 1.0f);\n}","name":"Buffer A","description":"","type":"buffer"}]}