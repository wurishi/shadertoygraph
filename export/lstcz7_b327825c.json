{"ver":"0.1","info":{"id":"lstcz7","date":"1518307153","viewed":151,"name":"2D grid and circles distortion","username":"rkibria","description":"A more complex distortion function applied on concentric circles and a colored grid.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d","distortion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv0 = fragCoord/iResolution.x;    \n    vec2 uv = uv0 - vec2(0.5, 0.5*iResolution.y/iResolution.x);\n\n    float x = uv.x;\n    float y = uv.y;\n\n    float t = iTime;\n    \n    float a0 = 1.0 + 1.2 * sin(t*0.1);\n    float b0 = 0.8 + 1.4 * cos(t*0.3);\n    float c0 = 0.3 + 1.7 * sin(t*0.7);\n    float d0 = -0.2 + 1.1 * sin(t*0.4);\n    float e0 = 0.01 + 0.3 * cos(t*0.2);\n    \n    float a1 = 0.01 + 1.9 * cos(t*0.9);\n    float b1 = 0.1 + 1.8 * sin(t*0.2);\n    float c1 = -0.3 + 0.3 * sin(t*0.7);\n    float d1 = 0.2 + 1.5 * cos(t*0.4);\n    float e1 = 1.0 + 0.8 * sin(t*0.6);\n    \n    uv = vec2(\n        a0 * x*x + b0 * x + c0 * y + d0 * x*y + e0 * y*y,\n        a1 * x*x + b1 * x + c1 * y + d1 * x*y + e1 * y*y\n        );\n\n    vec3 col = vec3(0.);\n\n    float dd = length(uv);\n        \n\tfloat ww = 0.002;\n    for (int i = 0; i < 33; ++i) {\n        float rr = 0.015 * float(i + 1);\n        col = max(col, vec3(smoothstep(rr - ww, rr, dd) - smoothstep(rr, rr + ww, dd)));\n    }\n    \n    if (abs(mod(uv.x, 0.05)) <= 0.002)\n        col += vec3(1., 0., 0.);\n    \n    if (abs(mod(uv.y, 0.05)) <= 0.002)\n        col += vec3(0., 0., 1.);\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}