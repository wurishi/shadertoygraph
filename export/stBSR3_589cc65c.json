{"ver":"0.1","info":{"id":"stBSR3","date":"1628194026","viewed":137,"name":"Small and Simple Bloom Test [SP]","username":"LorenzoHowar","description":"A small Bloom test.\n\nDrag to move the square, use it to occlude the light","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["posteffect","bloom"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n//Radio\nfloat scaleX = 35.;\nfloat scaleY = 35.;\n\n//Lo que obtiene de cada muestra\nfloat muestreo[16] = float[](\n    .1, .2, .2, .1,\n    .2, .6, .6, .2,\n    .2, .6, .6, .2,\n    .1, .2, .2, .1\n);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec3 col = vec4(texture(iChannel0, uv)).xyz;\n    \n    //Escala el radio para que valla de 0 a 16 (El tama√±o del muestreo)\n    vec2 BlurTrans = vec2(16./scaleX, 16./scaleY);\n    \n    //Oscurece la escena para poner el bloom encima\n    col -= 0.4;\n    \n    for (float x = 0.; x < scaleX; x++) {\n         for (float y = 0.; y < scaleY; y++) {\n         //Si en la muestra el valor es mayor que 2, entonces coge parte de su color y se lo aplica a este pixel\n         if (length(vec4(texture(iChannel0, vec2(uv.x + (x - scaleX/2.)/iResolution.x,uv.y + (y - scaleX/2.)/iResolution.y))).xyz) > 2.) {\n             col += vec4(texture(iChannel0, vec2(uv.x +(x - scaleX/2.)/iResolution.x,uv.y + (y - scaleX/2.)/iResolution.y))).xyz * muestreo[int(x*BlurTrans.x+(y*BlurTrans.y*scaleX))]*0.007;\n             col = clamp(col, 0., 1.);\n         }\n       }\n    }      \n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec3 drawSun(vec2 uv) {\n    return vec3(2.4, 0,0);\n}\n\nvec3 drawFloor(vec2 uv) {\n    return clamp(vec3(0.73, 0.45, .11)*(uv.y/iResolution.y*300. + .8), 0., 0.9);\n}\n\nvec3 drawBack(vec2 uv) {\n    return clamp(vec3(0.21, .85, .91)*(uv.y/iResolution.y*300. + .8), 0., 0.9);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col;\n\n    if (fragCoord.y < iResolution.y/4.) {\n        col = drawFloor(uv);\n    }else {\n        col = drawBack(uv);\n    }\n    \n    if (distance(fragCoord, vec2(iResolution.x/2.,iResolution.y/2.)) < 100.) {\n        col = drawSun(uv);\n    }\n\n        \n    if ((fragCoord.x < iMouse.x + 20.) &&\n         (fragCoord.x > iMouse.x - 20.) &&  \n         (fragCoord.y < iMouse.y + 20.) &&\n         (fragCoord.y > iMouse.y - 20.)){\n          col = vec3(0, 1, 0);\n    }\n    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n","name":"Buffer A","description":"","type":"buffer"}]}