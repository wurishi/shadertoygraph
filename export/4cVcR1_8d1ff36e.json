{"ver":"0.1","info":{"id":"4cVcR1","date":"1731504376","viewed":102,"name":"Color Transformation Utilities","username":"beans_please","description":"The \"Image\" tab simply alternates between mixing different colors in Oklab vs Linear BT.709 I-D65.\n\nThe \"Common\" tab contains transformations for common gamuts, white points, and transfer functions. Also includes Oklab.\n","likes":4,"published":3,"flags":0,"usePreview":0,"tags":["color","rgb","function","gamma","linear","xyz","matrix","transform","srgb","p3","transfer","rec709","bt2020","rec","709","bt709"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 frag_col, in vec2 frag_coord)\n{\n    vec2 uv01 = frag_coord / iResolution.xy;\n\n    vec3 a_bt709 = mix(\n        vec3(1, 0, 1),\n        vec3(0, 0, 1),\n        step(1. / 6., uv01.x)\n    );\n    a_bt709 = mix(a_bt709, vec3(1, 0, 0), step(2. / 6., uv01.x));\n    a_bt709 = mix(a_bt709, vec3(0, 1, 0), step(3. / 6., uv01.x));\n    a_bt709 = mix(a_bt709, vec3(1, 1, 0), step(4. / 6., uv01.x));\n    a_bt709 = mix(a_bt709, vec3(1, 0, 0), step(5. / 6., uv01.x));\n    \n    vec3 b_bt709 = mix(\n        vec3(0, 0, 1),\n        vec3(1),\n        step(1. / 6., uv01.x)\n    );\n    b_bt709 = mix(b_bt709, vec3(1, 0, 1), step(2. / 6., uv01.x));\n    b_bt709 = mix(b_bt709, vec3(1), step(3. / 6., uv01.x));\n    b_bt709 = mix(b_bt709, vec3(0, 0, 1), step(4. / 6., uv01.x));\n    b_bt709 = mix(b_bt709, vec3(0, 1, 1), step(5. / 6., uv01.x));\n    \n    float mix_fac = smoothstep(.05, .95, uv01.y);\n    \n    vec3 col_bt709 = vec3(0);\n    if (mod(iTime, 1.8) > .9)\n    {\n        // mix in Linear BT.709 I-D65\n        col_bt709 = mix(a_bt709, b_bt709, mix_fac);\n    }\n    else\n    {\n        // mix in Oklab\n        \n        vec3 a_oklab = linear_xyz_id65_to_oklab(\n            a_bt709 * bt709_id65_to_xyz_id65\n        );\n        \n        vec3 b_oklab = linear_xyz_id65_to_oklab(\n            b_bt709 * bt709_id65_to_xyz_id65\n        );\n        \n        vec3 col_oklab = mix(\n            a_oklab,\n            b_oklab,\n            mix_fac\n        );\n        \n        col_bt709 =\n            oklab_to_linear_xyz_id65(col_oklab)\n            * xyz_id65_to_bt709_id65;\n    }\n    \n    vec3 col_srgb = linear_bt709_id65_to_srgb(col_bt709);\n    frag_col = vec4(col_srgb, 1);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// color transformation utilities\n// source: https://www.shadertoy.com/view/4cVcR1\n// ------------------------------------------------------------\n\n// transformation matrices between gamuts or whitepoints\n// * these matrices are row-major but GLSL and OpenGL use\n//   column-major. to fix this you can just multiply your\n//   vector by the matrix (v * mat) instead of the opposite\n//   (mat * v).\n// ------------------------------------------------------------\n\n// Linear BT.709 I-D65 <-> Linear CIE-XYZ I-D65\nconst mat3 xyz_id65_to_bt709_id65 = mat3(\n    3.2410032329763587, -1.5373989694887855, -.4986158819963629,\n    -.9692242522025164, 1.8759299836951759, .0415542263400847,\n    .0556394198519755, -.2040112061239099, 1.0571489771875333\n);\nconst mat3 bt709_id65_to_xyz_id65 = inverse(xyz_id65_to_bt709_id65);\n\n// Linear BT.709 I-E <-> Linear CIE-XYZ I-E\nconst mat3 xyz_ie_to_bt709_ie = mat3(\n    2.6896551724137931, -1.2758620689655173, -.4137931034482757,\n    -1.0221081721279115, 1.9782866166600865, .0438215554678247,\n    .0612244897959184, -.2244897959183672, 1.1632653061224481\n);\nconst mat3 bt709_ie_to_xyz_ie = inverse(xyz_ie_to_bt709_ie);\n\n// Linear Linear DCI-P3 I-D65 <-> Linear CIE-XYZ I-D65\nconst mat3 xyz_id65_to_dcip3_id65 = mat3(\n    2.4935091239346101, -.9313881794047790, -.4027127567416516,\n    -.8294732139295544, 1.7626305796003032, .0236242371055886,\n    .0358512644339181, -.0761839369220759, .9570295866943110\n);\nconst mat3 dcip3_id65_to_xyz_id65 = inverse(xyz_id65_to_dcip3_id65);\n\n// Linear Linear DCI-P3 I-E <-> Linear CIE-XYZ I-E\nconst mat3 xyz_ie_to_dcip3_ie = mat3(\n    2.1506740681998422, -.8033306899286285, -.3473433782712135,\n    -.8669410150891632, 1.8422496570644722, .0246913580246913,\n    .0391091797935906, -.0831070070613798, 1.0439978272677890\n);\nconst mat3 dcip3_ie_to_xyz_ie = inverse(xyz_ie_to_dcip3_ie);\n\n// Linear BT.2020 I-D65 <-> Linear CIE-XYZ I-D65\nconst mat3 xyz_id65_to_bt2020_id65 = mat3(\n    1.7166634277958805, -.3556733197301399, -.2533680878902478,\n    -.6666738361988869, 1.6164557398246981, .0157682970961337,\n    .0176424817849772, -.0427769763827532, .9422432810184308\n);\nconst mat3 bt2020_id65_to_xyz_id65 = inverse(xyz_id65_to_bt2020_id65);\n\n// Linear BT.2020 I-E <-> Linear CIE-XYZ I-E\nconst mat3 xyz_ie_to_bt2020_ie = mat3(\n    1.5498639396171363, -.3211143451931252, -.2287495944240111,\n    -.6904600461999933, 1.6741291531150519, .0163308930849413,\n    .0192370654890717, -.0466432957748727, 1.0274062302858002\n);\nconst mat3 bt2020_ie_to_xyz_ie = inverse(xyz_ie_to_bt2020_ie);\n\n// Linear CIE-XYZ I-D65 <-> Linear CIE-XYZ I-E\nconst mat3 xyz_id65_to_xyz_ie = mat3(\n    1.0502616, .0270757, -.0232523,\n    .0390650, .9729502, -.0092579,\n    -.0024047,.0026446, .9180873\n);\nconst mat3 xyz_ie_to_xyz_id65 = inverse(xyz_id65_to_xyz_ie);\n\n// transfer functions for non-linear color spaces:\n// opto-electronic transfer function (OETF) to go from scene\n// to display, and electro-optical transfer function (EOTF) for\n// the opposite.\n// ------------------------------------------------------------\n\n// OETF: Linear BT.709 I-D65 -> sRGB\nvec3 linear_bt709_id65_to_srgb(vec3 v)\n{\n    v = clamp(v, 0., 1.);\n    return mix(\n        12.92 * v,\n        pow(v, vec3(1. / 2.4) * 1.055 - .055),\n        step(.0031308, v)\n    );\n}\n\n// EOTF: sRGB -> Linear BT.709 I-D65\nvec3 srgb_to_linear_bt709_id65(vec3 v)\n{\n    v = clamp(v, 0., 1.);\n    return mix(\n        v * .07739938080495356,\n        pow((v + .055) * .9478672985781990521327, vec3(2.4)),\n        step(.040449936, v)\n    );\n}\n\n// OETF: Linear DCI-P3 I-D65 -> Display P3\nvec3 linear_dcip3_id65_to_displayp3(vec3 v)\n{\n    return linear_bt709_id65_to_srgb(v);\n}\n\n// EOTF: Display P3 -> Linear DCI-P3 I-D65\nvec3 displayp3_to_linear_dcip3_id65(vec3 v)\n{\n    return srgb_to_linear_bt709_id65(v);\n}\n\n// OETF: Linear BT.2020 I-D65 -> BT.2020\nvec3 linear_bt2020_id65_to_bt2020(vec3 v)\n{\n    const float alpha = 1.09929682680944;\n    const float beta = .018053968510807;\n    \n    v = clamp(v, 0., 1.);\n    return mix(\n        4.5 * v,\n        alpha * pow(v, vec3(.45)) - (alpha - 1.),\n        step(beta, v)\n    );\n}\n\n// EOTF: BT.2020 -> Linear BT.2020 I-D65\nvec3 bt2020_to_linear_bt2020_id65(vec3 v)\n{\n    const float alpha = 1.09929682680944;\n    const float beta = .018053968510807;\n    \n    v = clamp(v, 0., 1.);\n    return mix(\n        v / 4.5,\n        pow((v + alpha - 1.) / alpha, vec3(1. / .45)),\n        step(4.5 * beta, v)\n    );\n}\n\n// Oklab: perceptual color space for image processing\n// https://bottosson.github.io/posts/oklab/\n// ------------------------------------------------------------\n\n// Linear CIE-XYZ I-D65 -> Oklab\nvec3 linear_xyz_id65_to_oklab(vec3 v)\n{\n    const mat3 m1 = mat3(\n        .8189330101, .3618667424, -.1288597137,\n        .0329845436, .9293118715, .0361456387,\n        .0482003018, .2643662691, .6338517070\n    );\n    \n    const mat3 m2 = mat3(\n        .2104542553, .7936177850, -.0040720468,\n        1.9779984951, -2.4285922050, .4505937099,\n        .0259040371, .7827717662, -.8086757660\n    );\n    \n    return pow(v * m1, vec3(1. / 3.)) * m2;\n}\n\n// Oklab -> Linear CIE-XYZ I-D65\nvec3 oklab_to_linear_xyz_id65(vec3 v)\n{\n    const mat3 m1_inv = mat3(\n        1.22701, -.5578, .281256,\n        -.0405802, 1.11226, -.0716767,\n        -.0763813, -.421482, 1.58616\n    );\n    \n    const mat3 m2_inv = mat3(\n        1., .396338, .215804,\n        1., -.105561, -.0638542,\n        1., -.0894842, -1.29149\n    );\n    \n    return pow(v * m2_inv, vec3(3.)) * m1_inv;\n}\n\n// end of color transformation utilities\n// ------------------------------------------------------------\n","name":"Common","description":"","type":"common"}]}