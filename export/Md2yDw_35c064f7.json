{"ver":"0.1","info":{"id":"Md2yDw","date":"1492644441","viewed":148,"name":"Tori Snake","username":"balkhan","description":"volumetric is awesome !!","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n* License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n* Created by bal-khan\n*/\n\n#define I_MAX\t100\n#define E\t\t0.001\n\n#define L2\t\t( vec3(2.3*cos(-t*16.),-1.,2.3*sin(-t*16.)) )\n\n// 3 defines to play with\n#define EATING\n//#define LENS\n//#define TORUS_ROT\n\n\nvoid\trotate(inout vec2 v, float angle);\nfloat\tsdTorus( vec3 p, vec2 t );\nfloat sdCappedCylinder( vec3 p, vec2 h );\nfloat sdTorusAbs( vec3 p, vec2 tt );\nfloat udBox( vec3 p, vec3 b );\nvec2\tmarch(vec3 pos, vec3 dir);\nvec3\tcamera(vec2 uv);\nvec3\tblackbody(float Temp);\nfloat\tscene(vec3 p);\n\nfloat\tg;\t\t\t\t//coloring wall\nfloat\tdist_torus;\nfloat\tnot_a_train;\nfloat\tt;\t\t\t\t// time\nfloat\tst;\nfloat\tct;\nvec3\th;\nconst vec3\tlightCol = vec3(0.07,.015,.7);\n\n// sebH's volumetric light : https://www.shadertoy.com/view/XlBSRz\n\n// ------------volumetric light----------- //\n\nvec3 evaluateLight(in vec3 pos)\n{\n    float distanceToL2 = length(L2-pos);\n    return (\n           lightCol * 1.0/(distanceToL2*distanceToL2)\n        \t);\n}\n\n// ------------volumetric light----------- //\n\n\n// blackbody by aiekick : https://www.shadertoy.com/view/lttXDn\n\n// -------------blackbody----------------- //\n\n// return color from temperature \n//http://www.physics.sfasu.edu/astro/color/blackbody.html\n//http://www.vendian.org/mncharity/dir3/blackbody/\n//http://www.vendian.org/mncharity/dir3/blackbody/UnstableURLs/bbr_color.html\n\nvec3 blackbody(float Temp)\n{\n\tvec3 col = vec3(255.);\n    col.x = 56100000. * pow(Temp,(-3. / 2.)) + 148.;\n   \tcol.y = 100.04 * log(Temp) - 623.6;\n   \tif (Temp > 6500.) col.y = 35200000. * pow(Temp,(-3. / 2.)) + 184.;\n   \tcol.z = 194.18 * log(Temp) - 1448.6;\n   \tcol = clamp(col, 0., 255.)/255.;\n    if (Temp < 1000.) col *= Temp/1000.;\n   \treturn col;\n}\n\n// -------------blackbody----------------- //\n\nvoid mainImage(out vec4 o, in vec2 f )\n{\n    h = vec3(0.);\n    t = -iTime*.125+4.7;\n    ct = cos(t);\n    st = sin(t);\n    vec2 R = iResolution.xy,\n          uv  = vec2(f-R/2.) / R.y;\n\tvec3\tdir = camera(uv);\n    vec3\tpos = vec3(.0, -0., 9.0);\n    rotate(dir.zx, cos(t*8.)*.25);\n    vec2\tinter = (march(pos, dir));\n    if (dist_torus != 1. && not_a_train == 1.)\n        o.xyz = (1.-vec3( (inter.y)*.061) )-g/9.;\n    o.xyz += h*.25;\n    o.xyz += .25-.25*blackbody(( (length(h)*1.) )*50.);\n    o.xyz = (mix(o.xyz, vec3(.80,.5,.071), .05*inter.y) );\n    if (1. == dist_torus && not_a_train == 1.)\n\t    o.xyz *= 3.*blackbody(( (inter.y) )*150.);\n    o.xyz *= (1.1-length(uv)*1.);\n    #ifdef LENS\n    o.xyz += .75*(1.-(1./inter.y)*(length(pos.xy+inter.y*dir.xy))*1./clamp(length(uv),.25,.5) );\n    #endif\n    o.xyz+=h*.5;\n    \n}\n\nfloat\tget_face(vec3 p)\n{\n\tfloat\tret;\n    \n    ret = length(vec3(p.x,p.y,p.z*1.75)-vec3(3.,-1.2,1.5) ) - 1.;\n    ret = min(ret, (length(vec3(p.x,p.y,p.z*1.25)-vec3(2.6,-.75,1.7))-.3) );\n    ret = min(ret, (length(vec3(p.x,p.y,p.z*1.25)-vec3(3.3,-.75,1.7))-.3) );\n    p+=-vec3(3.,-1.5,1.4);\n    rotate(p.xz, 1.57);\n    rotate(p.yx, .40);\n    ret = min(ret, (sdTorus(p, vec2(.2,.1) ) ) );\n    return (ret);\n}\n\nfloat\ttrain(vec3\tp)\n{\n    float\tmind = 1e5;\n    float\tthomas_face = 1e5;\n    p.z+=3.;\n    p.y -= -3.5;\n    rotate(p.zx, (t*16.) );\n\tp.z-=1.5;\n    mind = min(mind, udBox(p-vec3(3.,-1.25,-1.), vec3(.75,.75,1.5) ) );\n    mind = min(mind, sdCappedCylinder((vec3(p.z,p.x,p.y)-vec3(-1.45,3.,0.5)), vec2(.25, 1.2) ) );\n    mind = min(mind, length(p-vec3(3.,1.7,-1.45) ) -.5);\n    mind = max(mind, - (length(p-vec3(3.,2.,-1.45) ) -.55 ) );\n    mind = min(mind, sdTorusAbs((p-vec3(3.,-2.,-1.)), vec2(.25) ) );\n    thomas_face = get_face(p);\n    mind = min(mind, thomas_face );\n    return mind;\n}\n\nfloat\tde_0(vec3 p) // Tori\n{\n\tfloat\tming = 1e5;\n\tvec3\tpr = p;\n\n\trotate(p.zy, 1.57);\n    vec3\tadder = vec3(2.0,2.0,2.0);\n    adder.x+=ct*2.;\n    adder.y+=st*2.;\n    rotate(p.zx, (t+(1.58) ));\n\tfor (float i = 3.; i < 20.; i++)\n    {\n        pr = p;\n        rotate(adder.zx, t+1.58);\n        rotate(adder.yx, t+1.58);\n        rotate(adder.yz, t+1.58);\n\t\tpr /= max(adder, 1.); // this add some funk\n        #ifdef EATING\n        pr += adder*.21;\n        #endif\n\n        ming = min(ming, sdTorus(pr, vec2(1.5,.5) /((23.0 - i) ) ) );\n\n        #ifdef TORUS_ROT\n        rotate(p.zx, ( (t+(1.58))*i-i*t*.5)*t*.06125 );\n        rotate(p.xy, t+(1.58));\n        rotate(p.yz, t+(1.58));\n\t\t#endif        \n    }\n\n\treturn (ming);\n}\n\nfloat\tscene(vec3 p)\n{\n    not_a_train = 1.;\n    float\tmind = length(p-L2)-.1;\n    mind = min(mind,  (p.z)+10.);\n    mind = min(mind, -(p.z)+15.);\n    mind = min(mind, +(p.x)+6.);\n    mind = min(mind, -(p.x)+6.);\n    mind = min(mind, +(p.y)+6.);\n    mind = min(mind, -(p.y)+6.);\n\n    dist_torus = de_0(vec3(p.x,p.z,p.y));\n    not_a_train = mind;\n    mind = min(mind, dist_torus);\n    if (mind == dist_torus)\n        dist_torus = 1.;\n\tnot_a_train = train(p);\n    mind = min(mind, not_a_train);\n    if (mind != not_a_train)\n        not_a_train = 1.;\n    return mind;\n\n}\n\nvec2\tmarch(vec3 pos, vec3 dir)\n{\n    vec2\tdist = vec2(0.0);\n    vec3\tp = vec3(0.0);\n    vec2\ts = vec2(0.0);\n\n    vec3\tdirr;\n    for (int i = 1; i < I_MAX; ++i)\n    {\n        dirr = dir;\n        rotate(dirr.yx, .05*dist.y+t*8.);\n    \tp = pos + dirr * dist.y;\n\n        dist.x = scene(p);\n        dist.y += dist.x;\n        h+= evaluateLight(p);\n        if (dist.x < E || dist.y > 20.)\n        {\n\t        g +=  (step(sin(20.*(p.y) ), .5) \n                  + step(sin(20.*(p.x) ), .5)\n                  + step(sin(20.*(p.z) ), .5)\n                 );\n            break;\n        }\n        s.x++;\n    }\n    s.y = dist.y;\n    return (s);\n}\n\n// Utilities\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n\tvec2 q = vec2(length(p.zy)-t.x,p.x);\n\n    return length(q)-t.y;\n}\n\nfloat udBox( vec3 p, vec3 b )\n{\n  return length(max(abs(p)-b,0.0));\n}\n\nfloat sdTorusAbs( vec3 p, vec2 tt )\n{\n    p.xz = abs(p.xz)-1.;\n    rotate(p.zy, t*100.);\n\tvec2 q = vec2( (length(p.zy)-tt.x),p.x);\n\n    return (length(q)-tt.y);\n}\n\nfloat sdCappedCylinder( vec3 p, vec2 h )\n{\n\tvec2 d = abs(vec2(length(p.xy),p.z )) - h;\n\treturn min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n\nvec3\tcamera(vec2 uv)\n{\n    float   fov = 1.;\n\tvec3    forw  = vec3(0.0, 0.0, -1.0);\n\tvec3    right = vec3(1.0, 0.0, 0.0);\n\tvec3    up    = vec3(0.0, 1.0, 0.0);\n\n    return (normalize((uv.x) * right + (uv.y) * up + fov * forw));\n}\n\nvoid rotate(inout vec2 v, float angle)\n{\n\tv = vec2(cos(angle)*v.x+sin(angle)*v.y,-sin(angle)*v.x+cos(angle)*v.y);\n}\n","name":"Image","description":"","type":"image"}]}