{"ver":"0.1","info":{"id":"l3VSDW","date":"1719982710","viewed":46,"name":"fake 3D perspective/fog shader","username":"sam_hains","description":"fake 3D perspective/fog shader","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["perspective"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define RESOLUTION iResolution.xy\n#define TIME iTime\n#define PI 3.1416\n#define TWO_PI (PI * 2.0)\n\n// Function to create a 2D rotation matrix\nmat2 rotationMatrix(float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat2(c, s, -s, c);\n}\n\n vec2 wrapCoords(vec2 coords) {\n            return fract(coords * 0.5);\n        }\n\nvoid mainImage(out vec4 outputColor, in vec2 pixelCoords) {\n    // Convert pixel coordinates to normalized device coordinates (NDC)\n    vec2 uv = pixelCoords/iResolution.xy;\n\n    vec2 normalizedCoords = (pixelCoords - 0.5 * RESOLUTION.xy) / RESOLUTION.y;\n   // normalizedCoords = uv;\n    \n    // Mouse position in NDC (unused in this shader, but kept for potential future use)\n    \n    // Create a ray direction for our \"camera\"\n    vec3 rayDirection = normalize(vec3(normalizedCoords.xy, 1.0));\n    \n    // Rotate the ray direction over time to create movement\n    float rotationAngle = -0.3;\n    rayDirection.yz *= rotationMatrix(rotationAngle);\n    \n    // Sample the texture (sky or environment map)\n    vec2 rayUvs = rayDirection.xz / rayDirection.y;\n    rayUvs = wrapCoords(rayUvs+vec2(-iTime*.5, -iTime));\n    vec3 textureColor = texture(iChannel0, rayUvs).rgb;\n    \n    // Calculate the intensity based on the ray direction's alignment with the \"ground\"\n    float groundAlignment = max(0.0, dot(rayDirection, vec3(0.0, -1.0, 0.0)));\n    float intensity = clamp(groundAlignment * 4.0, 0.0, 1.0);\n    vec3 fogColor = vec3(0.2, 0.2, 0.2);\n    \n    \n    // Mix between background color (black) and the texture color based on intensity\n    outputColor = vec4(mix(fogColor, textureColor, intensity), 1.0);\n}","name":"Image","description":"","type":"image"}]}