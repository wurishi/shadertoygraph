{"ver":"0.1","info":{"id":"sstGWM","date":"1630148857","viewed":98,"name":"Gyroid_1","username":"rushalivshinde","description":"gyroid","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["cube","colour","gyroid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n\n#define S(a, b, t) smoothstep(a,b,t)\n#define T iTime(a, b, t)\n\nmat2 Rot(float a) {\n    float s=sin(a);\n    float c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nfloat sdGyroid(vec3 p, float scale, float thickness, float bias){        \n    p *= scale;\n    return abs(dot(sin(p), cos(p.zxy))-bias)/scale-thickness;\n}\n\nvec3 Transform(vec3 p){\n    p.z -= iTime*.1;\n    p.y -+ .3;\n    return p;\n\n}\n\nfloat GetDist(vec3 p) {\n\n    p = Transform(p);\n    \n    float box = sdBox(p, vec3(1));\n\n    float g1 = sdGyroid(p, 5.23, .03, 1.3);\n    float g2 = sdGyroid(p, 10., .03, .3);\n    float g3 = sdGyroid(p, 20., .03, .3);\n    float g4 = sdGyroid(p, 40., .03, .3);\n    float g5 = sdGyroid(p, 60., .03, .3);\n    //float g = min(g1, g2);\n    g1 -= g2*.2;\n    g1 -= g3*.2;\n    g1 += g4*.1;\n    g1 += g5*.1;\n    float d =  g1*.8;\n    \n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.02, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n    float t = iTime;\n    vec3 col = vec3(0);\n    vec3 ro = vec3(0, 0, -.03);\n    ro.yz *= Rot(-m.y*3.14+1.);\n    ro.xz *= Rot(-m.x*6.2831);\n    \n    vec3 lookat = vec3(0,0,0);\n    vec3 rd = GetRayDir(uv, ro, lookat, .8);\n    \n   \n    float d = RayMarch(ro, rd);\n\n    if(d<MAX_DIST) {\n        vec3 p = ro + rd * d;\n        vec3 n = GetNormal(p);\n        //vec3 r = reflect(rd, n);\n\n        p = Transform (p);\n        float dif = n.y*.5+.5;\n        col += dif*dif;\n        \n        float g2 = sdGyroid(p, 10.76, .03, .3);\n        \n        col *= S(-.1, .2, g2);\n        \n        float crackw = -.02+S(0.,-.5, n.y)*.04;\n        float cracks = S(crackw, -.03, g2);\n        \n        float g3 = sdGyroid(p+t*.1, 5.76, .03, .0);\n        \n        float g4 = sdGyroid(p-t*.15, 3.76, .03, .05);\n        cracks *= g3*g4*20.+.2*S(.2, .0, n.y);\n        col += cracks*vec3(1, .4, .1)*3.;\n    }\n    \n   \n    \n    d = sdGyroid(vec3(uv.x, uv.y, iTime*.1), 20., .01, 0.);\n    \n    fragColor = vec4(col,.1);\n}","name":"Image","description":"","type":"image"}]}