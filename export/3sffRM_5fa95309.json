{"ver":"0.1","info":{"id":"3sffRM","date":"1587904497","viewed":240,"name":"Sphere of ice","username":"MeDope","description":"Use mouse to rotate!","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["3d","noise","sphere","ice","intersect"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//https://iquilezles.org/articles/intersectors\nfloat sphIntersect(vec3 ro, vec3 rd, float ra)\n{\n    vec3 oc = ro;\n    float b = dot(oc, rd);\n    float c = dot(oc, oc) - ra*ra;\n    float h = b * b - c;\n    if(h < 0.0) return -1.0;\n    h = sqrt(h);\n    return -b-h;\n}\n\nmat2 rot(float a)\n{\n    return mat2(cos(a), sin(a), -sin(a), cos(a));\n}\n\nfloat hash31(vec3 p)\n{\n\treturn fract(sin(dot(p, vec3(127.1, 311.7, 215.6))) * 43758.5453123);\n}\n\nfloat noise(vec3 p)\n{\n\tvec3 id = floor(p);\n\tp = smoothstep(0.0, 1.0, fract(p));\n\tfloat h000 = hash31(id);\n\tfloat h100 = hash31(id + vec3(1.0,0.0,0.0));\n\tfloat h010 = hash31(id + vec3(0.0,1.0,0.0));\n\tfloat h110 = hash31(id + vec3(1.0,1.0,0.0));\n\tfloat h001 = hash31(id + vec3(0.0,0.0,1.0));\n\tfloat h101 = hash31(id + vec3(1.0,0.0,1.0));\n\tfloat h011 = hash31(id + vec3(0.0,1.0,1.0));\n\tfloat h111 = hash31(id + vec3(1.0,1.0,1.0));\n\treturn mix(mix(mix(h000, h100, p.x), mix(h010, h110, p.x), p.y), mix(mix(h001, h101, p.x), mix(h011, h111, p.x), p.y), p.z);\n}\n\nfloat fbm(vec3 p)\n{\n    float r = 0.0, z = 2.0;\n    for(int i = 0; i < 7; i++)\n    {\n        r += noise(p) / z;\n        z *= 1.5;\n        p *= 2.0;\n    }\n    return r;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 rd = normalize(vec3((fragCoord - 0.5 * iResolution.xy) / iResolution.x, 1.0));\n    vec3 ro = vec3(0,0,-2);\n    vec2 mouse = 3.0 * vec2((iMouse.x - 0.5 * iResolution.x) / iResolution.x, (iMouse.y - 0.5 * iResolution.y) / iResolution.y);\n    vec3 col, p, rp;\n\n    float isphere = sphIntersect(ro, rd, 0.5);\n    float hm = 0.0;\n\n    if (isphere != -1.0)\n    {\n        p = ro + rd * isphere, rp = p;\n        for(int i = 0; i < 4; i++)\n        {\n            p = ro + rd * isphere * (1.0 - hm * 0.05 * float(i + 1));\n            p.yz = p.yz * rot(mouse.y);\n            p.xz = p.xz * rot(mouse.x);\n            hm = fbm((p + 3.0 * float(i)) * 5.0);\n        }\n        hm *= pow(-rp.z, 3.0) * 10.0;\n    }\n    \n    col += vec3(hm * hm * hm, hm * hm, hm) * 2.0;\n    \n    col = 1.0 - exp(-col);\n\n    fragColor = vec4(col, 1);\n}","name":"Image","description":"","type":"image"}]}