{"ver":"0.1","info":{"id":"wljGRy","date":"1560087716","viewed":71,"name":"test123123","username":"RPG59","description":"test123","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["test123"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 32\n#define MAX_DISTANCE 100.\n\nfloat sphere(vec3 at) {\n    float radius = .5;\n\treturn length(at) - radius;\n}\n\nfloat ground(vec3 at) {\n\treturn at.y + 1.;\n}\n\nfloat world(vec3 at) {\n\treturn min(sphere(at), ground(at));\n}\n\nfloat trace(vec3 camera, vec3 coord) {\n    float L = 0.;\n    \n    for(int i = 0; i < MAX_STEPS; ++i) {\n    \tfloat d = world(camera + coord * L);\n        L += d;\n        if(L > MAX_DISTANCE) break;\n    }\n    \n    return L;\n}\n\nvec3 getNormals(vec3 coord) {\n\tvec2 e = vec2(.01, 0);\n    float w = world(coord);\n    \n    return normalize(vec3(world(coord + e.xyy) - w,\n                          world(coord + e.yxy) - w,\n                          world(coord + e.yyx) - w));\n}\n\nvec3 diffLight(vec3 lightPos, vec3 coord) {\n    vec3 norm = getNormals(coord);\n    vec3 lightDir = normalize(lightPos - coord);\n    return vec3(max(dot(norm, lightDir), .0));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy/iResolution.xy * 2. - 1.;\n    uv.x *= iResolution.x / iResolution.y;\n    vec3 camera = vec3(0., 0., 3.);\n    vec3 coord = normalize(vec3(uv, -2.));\n   \n    \n  \tfloat color = trace(camera, coord);\n    vec3 light = diffLight(vec3(cos(iTime), 2.+sin(iTime), 2), (camera + coord * color));\n\n    fragColor = vec4(light, 1);\n}","name":"Image","description":"","type":"image"}]}