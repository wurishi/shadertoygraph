{"ver":"0.1","info":{"id":"7lGBzd","date":"1665091368","viewed":161,"name":"noise blur test","username":"eliasku","description":"Click Mouse left to right to change BLUR radius from 0 to MAX\nReferences: \n- blue noise blur: https://www.shadertoy.com/view/XsVBDR\n- noise blur: https://gist.github.com/shakesoda/3a41ffae3aadd71ecc9d43f8e9dbbdc4","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["2d","noise","blur"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_SPREAD 128.0\n#define OFFSET 1.0\n\nvec2 hash23(vec3 p3) {\n\tp3 = fract(p3 * vec3(443.897, 441.423, 437.195));\n\tp3 += dot(p3, p3.yzx+19.19);\n\treturn fract(vec2((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y))*2.0-1.0;\n}\n\nconst float c_goldenRatioConjugate = 0.61803398875;\n\nvec4 pickSample(vec2 uv, float offset, float n, bool animate, float spread, float offsetLength) {\n\tfloat z_offset = 0.0;\n\tif (animate)\n\t\tz_offset = float(iFrame & 255) * c_goldenRatioConjugate;\n    vec2 p0;\n    if(mod(uv.y * 4.0, 2.0) < 1.0) {\n        p0 = uv+hash23(vec3(uv,z_offset+offset))/iResolution.xy*(spread+offsetLength*n);\n    }\n    else {\n        vec4 noise = texture(iChannel1, (uv * iResolution.xy) / 1024.0);\n        noise = 2.0 * fract(noise + z_offset) - vec4(1.0);\n        vec2 O = noise.xy;\n        if(n < 2.0) O = noise.yz;\n        else if(n < 3.0) O = noise.zw;\n        else if(n < 4.0) O = noise.wx;\n        p0 = uv + O/iResolution.xy*(spread+offsetLength*n);\n    }\n\treturn texture(iChannel0, p0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tbool animate = uv.y < 0.5;\n    float spread = MAX_SPREAD * iMouse.x / iResolution.x;\n\t// 1, 2 and 4 samples respectively.\n\tif (uv.x <= 1.0/3.0) {\n\t\tfragColor = pickSample(uv, 0.0, 0.0, animate, spread, OFFSET);\n\t}\n\telse if (uv.x > 1.0/3.0 && uv.x < 2.0/3.0) {\n\t\tfragColor  = pickSample(uv, 0.0, 0.0, animate, spread, OFFSET);\n\t\tfragColor += pickSample(uv, 0.5, 1.0, animate, spread, OFFSET);\n\t\tfragColor /= 2.0;\n\t}\n\telse {\n\t\tfragColor  = pickSample(uv, 0.0, 0.0, animate, spread, OFFSET);\n\t\tfragColor += pickSample(uv, 0.5, 1.0, animate, spread, OFFSET);\n\t\tfragColor += pickSample(uv, 1.0, 2.0, animate, spread, OFFSET);\n\t\tfragColor += pickSample(uv, 1.5, 3.0, animate, spread, OFFSET);\n\t\tfragColor /= 4.0;\n\t}\n    \n    fragColor *= step(0.001, abs(uv.y-0.5)) *\n        step(0.001, abs(uv.x-1.0/3.0)) *\n        step(0.001, abs(uv.x-2.0/3.0)) * \n        step(0.001, abs(uv.y-0.25)) *\n        step(0.001, abs(uv.y-0.75));\n}\n","name":"Image","description":"","type":"image"}]}