{"ver":"0.1","info":{"id":"lft3RB","date":"1711859084","viewed":39,"name":"Fastaro Fractal2","username":"robfast","description":"another one","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["floor","fraction","pythagorean"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalize pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Scale and translate the coordinate system to fit the fractal\n    vec2 c = (uv - 0.5) * vec2(10.0, 10.0) + vec2(0.0, 0.0);\n\n    // Initialize z to the complex number corresponding to the pixel\n    vec2 z = vec2(0.0, 0.0);\n\n    // Parameters for the fractal, modified by time\n    float p = 7.0 + sin(iTime) * -0.2; // Oscillate p over time\n    float q = 13.0 + cos(iTime) * -0.2; // Oscillate q over time\n    int maxIter = 100;\n    float threshold = 48.0; // Square of the escape radius (2^2 = 4)\n\n    int iter;\n    for(iter = 0; iter < maxIter; ++iter)\n    {\n        float x = z.x;\n        float y = z.y;\n\n        // Real and imaginary parts of the function\n        float realPart = sqrt(pow(pow(p, x) / pow(q, floor((x * log(p)) / log(q))),2.0) +pow(pow(q, floor(1.0+(x * log(p)) / log(q)))/pow(p, x),2.0));\n        float imagPart =  sqrt(pow(pow(p, y) / pow(q, floor((y * log(p)) / log(q))),2.0) + pow(pow(q, floor(1.0+(y * log(p)) / log(q)))/pow(p, y),2.0));\n        \n        z.x = realPart - imagPart + c.x;\n        z.y = 2.0 * x * y + c.y;\n        \n        if(dot(z, z) > threshold)\n            break;\n    }\n\n    // Use the iteration count to determine the color\n    float smoothIter = iter == maxIter ? 0.0 : float(iter) / float(maxIter);\n    smoothIter = smoothIter + 1.0 - log(log(length(z))) / log(3.0);\n    vec3 baseColor = vec3(0.5, 0.4, 0.5); // Base color for vibrant effect\n\n    vec3 color = mix(baseColor, vec3(sin(smoothIter * 7.28 + iTime), cos(smoothIter * 7.28 + iTime), sin(smoothIter * 7.28 - iTime)), smoothIter);\n\n    fragColor = vec4(color, 0.5);\n}\n","name":"Image","description":"","type":"image"}]}