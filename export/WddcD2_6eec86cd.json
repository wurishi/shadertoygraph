{"ver":"0.1","info":{"id":"WddcD2","date":"1601780411","viewed":74,"name":"fork- kernkraft 400-v3","username":"jorge2017a1","description":"fork- kernkraft 400-v3","likes":4,"published":1,"flags":8,"usePreview":0,"tags":["forkkernkraft400v3"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// by @eddbiddulph\n// autumn trees at night, from hiding in the grass\n// PLEASE view in 0.5 mode!!\n\n\nfloat circle(vec2 p, vec2 o, float r)\n{\n\tp -= o;\n\treturn step(dot(p, p), r);\n}\n\nvec2 rotate(vec2 v, float angle)\n{\n\treturn vec2(v.x * cos(angle) + v.y * sin(angle),\n\t\t    v.y * cos(angle) + v.x * sin(angle));\n}\n\nfloat tree(vec2 p, vec2 o, float a)\n{\n\tp -= o;\n\n\tfloat m = step(p.y, 0.5) * step(abs(p.x), 0.1 / ((p.y + 3.0)));\n\n\tvec2 bo = vec2(0.0, 0.5);\n\n\t// make the branches and leaves with some circles\n\tm = max(m, circle(p, bo + rotate(vec2(0.0, 0.0), a), 0.01));\n\tm = max(m, circle(p, bo + rotate(vec2(0.1, 0.1), a), 0.011));\n\tm = max(m, circle(p, bo + rotate(vec2(-0.06, 0.05), a), 0.008));\n\tm = max(m, circle(p, bo + rotate(vec2(-0.02, 0.12), a), 0.008));\n\n\treturn m;\n}\n\nfloat rowOfTrees(vec2 p)\n{\n\tfloat a = cos(floor(p.x) * 20.6) * 3.1415926, b = 1.0 + cos(floor(p.x) * 10.0) * 0.2;\n\tp.x = mod(p.x, 1.0);\n\treturn tree(p * b, vec2(0.5, 0.0) * b, a);\n}\n\nfloat grass(vec2 p)\n{\n\tp *= vec2(10.0, 1.0) * 2.5;\n\tfloat a = floor(p.x) * 12.0, b = 1.0 + sin(floor(p.x)) * cos(floor(p.x) * 0.3) * 0.1;\n\tp.x = mod(p.x, 1.0) - 0.5;\n\treturn step(abs(p.x + cos(a) * p.y ), 0.5 - p.y * b);\n}\n\nfloat starPattern(vec2 p)\n{\n\treturn 0.1 / (abs(cos(p.x)) + 0.01) * 0.1 / (abs(sin(p.y)) + 0.01) * abs(sin(p.x)) * abs(cos(p.y));\n}\n\nvec3 stars(vec2 p)\n{\n\tp -= 0.5;\n\n\tfloat a = starPattern(rotate(p * 26.0, 0.1)) * max(0.0, 1.3 + cos(p.x + iTime)) +\n\t\tstarPattern(rotate(p * 50.0, 0.2)) * max(0.0, 1.2 + cos(p.x * 0.4 + iTime * 2.0));\n\n\treturn vec3(a * 0.1 * (1.0 + (2.0 + sin(iTime * 30.0)) * 0.2));\n}\n\n\n\nfloat message(vec2 U) { // to alter in the icon with the alter message\n    vec4 T = vec4(0);   // or: initMsg;\n    C(83);C(111);C(117);C(110);C(100);C(32);C(105);C(110);C(115);C(105);C(100);C(101); // message \"Sound inside\"\n    return length(T.yz)==0. ? -1. : T.x; // or: endMsg;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = fragCoord.xy / iResolution.xy * vec2(iResolution.x / iResolution.y, 1.0),\n\t\tscroll = vec2(iTime * 0.5, 0.0);\n\n\tvec3 col = vec3((1.0 - p.y) * 0.1, (1.0 - p.y) * 0.1, 0.1); // backdrop\n\n\tcol += stars(p) * max(0.0, p.y - 0.6);\n\n\tif(grass(p * 0.7 + scroll) > 0.0) // grass\n\t\tcol = vec3(0.2, 0.5, 0.0);\n\telse if(rowOfTrees(p + scroll) > 0.0) // near trees\n\t\tcol = vec3(0.6, 0.4, 0.0) * mix(0.8, 1.0, p.y);\n\telse if(grass(p * 1.2 + scroll) > 0.0) // far grass\n\t\tcol = vec3(0.1, 0.3, 0.0);\n\telse if(rowOfTrees(p * 1.5 + scroll + vec2(10.0, 0.0)) > 0.0) // far trees\n\t\tcol = vec3(0.3, 0.2, 0.0) * mix(0.8, 1.0, p.y);\n\n    \n        \n        \n    if (iResolution.y<2000.)\n    {\n        float c=message((fragCoord/iResolution.y-vec2(.1,.2))*8.);\n        if(c>=0.)\n        {\n            fragColor=vec4(c);\n            return;\n        }\n    }\n    \n\n        \n\tfragColor.a = 1.0;\n\tfragColor.rgb = col;\n}\n\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//https://www.shadertoy.com/view/llBSzK\n///kernkraft 400\n//Creado por mememaestro en 2015-10-15 \n///modificado por JorgeFloresP.--3/oct/2020\n\n\nconst float trt = 1.0594630943592952645;\nconst float bpm = 140.0;\n\nfloat note2freq(float note) {\n    return 440.0 * pow(trt,note);\n}\n\nfloat sawWave(float time, float freq, float amp) {\n \t   return mod(time,1.0/freq)*freq*amp;\n}\n\nvec2 bassSynth(float time, float tempo) {\n    float m = floor(mod(tempo/2.0,8.0)); //minim number\n    float note = floor(mod(tempo*2.0,2.0)) * 12.0 - 35.0 +\n        float(m >= 4.0  && m < 6.0) * (5.0 + (m-4.0) * 2.0) ;\n    return vec2(sawWave(time, note2freq(note), exp(-0.0*mod(tempo, 0.5))));\n}\n\nvec2 leadSynth(float time, float tempo) {\n    float q = floor(mod(tempo*2.0,32.0)); //quaver number\n    float ampMask = float(0.5);\n    \n    float note = -5.0 + //melody\n        float(q<6.0) * floor(0.2 +  1.1 * (mod(q-1.0,2.0))) + \n        float(q>=12.0 ) * (12.0-q) + \n        float(q==17.0 ) * (-4.0) +\n        float(q>=21.0 ) * (-6.0) +\n        float(q==25.0 ) * (12.0)+\n        float(q<=26.0 ) * (1.0+0.5)+  \n    \tfloat(q>=26.0 && q<30.0 ) * (3.0+0.5)*2.0+  \n    float(q>=30.0 && q<35.0 ) * (3.0+0.5)*2.0+  \n    float(q>=35.0 && q<40.0 ) * (6.0+0.5)*2.0+  \n    float(q>=40.0 && q<50.0 ) * (9.0+0.5)*2.0;  \n    \n      \n    float s1=sawWave(time, note2freq(note+0.01), ampMask * exp(-1.0*mod(tempo, 0.5)));\n    float s2=sawWave(time, note2freq(note-0.01), ampMask * exp(-1.0*mod(tempo, 0.5)));\n    \n    return vec2(s1, s2);\n    \n}\n\n\nvec2 leadSynthv2(float time, float tempo) \n{\n    float q = floor(mod(tempo*2.0,32.0)); //quaver number\n    float ampMask = float(0.5);\n    \n    float note = -5.0 + //melody\n        float(q<6.0) * floor(0.2 +  1.1 * (mod(q-1.0,2.0))) + \n        float(q>=10.0 && q<20.0 ) * (12.0-floor(q*fract(time)));\n    \n     \n    float s1=sawWave(time, note2freq(note+0.01), ampMask * exp(-1.0*mod(tempo, 0.5)));\n    float s2=sawWave(time, note2freq(note-0.01), ampMask * exp(-1.0*mod(tempo, 0.5)));\n    \n    return vec2(s1, s2);\n    \n}\n\n\nvec2 leadSynthv3(float time, float tempo) \n{\n    float q = floor(mod(tempo*2.0,32.0)); //quaver number\n    float ampMask = float(0.5);\n    \n    float note = -5.0 + //melody\n        float(q<6.0) * floor(0.2 +  1.1 * (mod(q-1.0,3.0))) + \n        float(q>=10.0 && q<20.0 ) * (12.0- mod(  floor(q*fract(time)), 3.0)  );\n    \n    float s1=sawWave(time, note2freq(note+0.01), ampMask * exp(-1.0*mod(tempo, 0.5)));\n    float s2=sawWave(time, note2freq(note-0.01), ampMask * exp(-1.0*mod(tempo, 0.5)));\n    \n    return vec2(s1, s2);\n    \n}\n\n\nvec2 kickSynth(float time, float tempo) {\n    const float dist = 3.0;\n    tempo = mod(tempo,1.0); \n    return vec2(clamp(sin(pow((tempo+0.2)*0.0001,-0.5))*exp(-3.0*tempo),-(1.0/dist),(1.0/dist)) * dist);\n}\n\n\nvec2 kickSynthv2(float time, float tempo) \n{\n    const float dist = 3.0;\n    tempo = mod(tempo,2.0); \n    return vec2(clamp(sin(pow((tempo+0.2)*0.0001,-0.5))*exp(-3.0*tempo),-(1.0/dist),(1.0/dist)) * dist);\n}\n\nvec2 kickSynthv3Fast(float time, float tempo) \n{\n    const float dist = 3.0;\n    tempo = mod(tempo,0.5); \n    return vec2(clamp(sin(pow((tempo+0.2)*0.0001,-0.5))*exp(-3.0*tempo),-(1.0/dist),(1.0/dist)) * dist);\n}\n\n\nfloat rand(vec2 co)\n{\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvec2 clapSynth(float time, float tempo) {\n    float q = floor(mod(tempo*2.0,32.0)); //quaver number;\n    float b = floor(q/8.0);//bar number\n    float qb = mod(q,8.0); //quaver in bar;\n    float ampMask = float((qb >= 2.0 && qb < 4.0) || (qb >= 6.0 && qb < 7.0)\n                         || (b == 3.0 && (qb == 1.0 || qb >= 5.0))); \n    tempo = mod(tempo*4.0 ,2.0);\n    return vec2(rand(vec2(time+1.2,tempo+6.1)) * ampMask * exp(-1.5*tempo),\n                rand(vec2(time+2.1,tempo+1.6)) * ampMask * exp(-1.5*tempo));\n}\n\nvec2 mainSound( in int samp,float time)\n{\n    float t = time;\n    float tempo = t * (bpm/60.0);\n    \n    vec2 bass; \n    vec2 lead;\n    vec2 kick;\n    vec2 clap;\n    \n    \n    if (t <10.0)\n \t{       \n     bass = bassSynth(t,tempo) * 0.30; //mixing here\n        \n     lead = leadSynth(t*1.005,tempo) * 0.333;\n     kick = kickSynth(t,tempo) * 0.333;\n     clap = clapSynth(t,tempo) * 0.333;\n \t}       \n    else if(t >10.0 && t<20.0  )\n    {       \n     bass = bassSynth(t,tempo) * 0.30; //mixing here\n     lead = leadSynthv2(t*1.005,tempo) * 0.433;\n     kick = kickSynth(t,tempo) * 0.333;\n     clap = clapSynth(t,tempo) * 0.333;\n \t} \n    else if(t >20.0 && t< 40.0  )\n    {       \n     bass = bassSynth(t,tempo) * 0.30; //mixing here\n     lead = leadSynthv3(t*1.005,tempo) * 0.433;\n     kick = kickSynthv2(t,tempo) * 0.333;\n     clap = clapSynth(t,tempo) * 0.333;\n \t} \n    else if(t >40.0  && t< 50.0   )\n    {       \n     bass = bassSynth(t,tempo) * 0.30; //mixing here\n     lead = leadSynth(t*1.005,tempo) * 0.433;\n     kick = kickSynthv2(t,tempo) * 0.333 ;\n     clap = clapSynth(t,tempo) * 0.333;\n \t}       \n    \n    else if(t >50.0 && t<60.0)\n    {       \n     bass = bassSynth(t,tempo) * 0.30; //mixing here\n     lead = leadSynthv2(t*1.005,tempo) * 0.333;\n     kick = kickSynth(t,tempo) * 0.333;\n     kick = kickSynthv3Fast(t,tempo) * 0.333;\n     clap = clapSynth(t,tempo) * 0.333;\n    }\n    \n     else if(t >60.0 )\n    {       \n     bass = bassSynth(t,tempo) * 0.30; //mixing here\n     lead = leadSynthv2(t*1.005,tempo) * 0.333;\n     kick = kickSynthv3Fast(t,tempo) * 0.333;\n     clap = clapSynth(t,tempo) * 0.333;\n    }\n    \n    \n    vec2 synths = bass + lead; //sidechain\n    synths *= min(mod(tempo,1.0)+0.4,1.0);\n    \n    return synths + kick + clap;\n}","name":"Sound","description":"","type":"sound"},{"inputs":[],"outputs":[],"code":"#define C(c) U.x-=.5; T+= U.x<.0||U.x>1.||U.y<0.||U.y>1. ?vec4(0): textureGrad(iChannel3, U/16. + fract( vec2(c, 15-c/16) / 16.), dFdx(U/16.),dFdy(U/16.) )\n#define initMsg vec4 T = vec4(0)\n#define endMsg  return length(T.yz)==0. ? 0. : T.x\n\n","name":"Common","description":"","type":"common"}]}