{"ver":"0.1","info":{"id":"Xdy3Rd","date":"1455998059","viewed":614,"name":"Running man","username":"bmontell","description":"Run cycle animation test!","likes":34,"published":1,"flags":0,"usePreview":0,"tags":["3d","cycle","animation","man","walk","human","run"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 LIGHT_DIR = normalize(vec3(0.5, -1.0, -0.5));\n\n// Animation constants. Initialized in initAnimation() because some compilers don't like\n// non-constant global initializers.\nfloat TIME;\nfloat TORSO_LEAN;\nfloat TORSO_TWIST;\nfloat TORSO_BOUNCE;\nfloat HEAD_BOB;\nfloat L_LEG_SWING;\nfloat R_LEG_SWING;\nfloat L_KNEE_BEND;\nfloat R_KNEE_BEND;\nfloat L_ANKLE_BEND;\nfloat R_ANKLE_BEND;\nvec3 L_ARM_SWING;\nvec3 R_ARM_SWING;\nfloat L_ELBOW_BEND;\nfloat R_ELBOW_BEND;\n\nvoid initAnimation() {\n    TIME = iTime * 6.2;\n    TORSO_LEAN = -0.1;\n    TORSO_TWIST = 0.15*sin(0.5+TIME);\n    TORSO_BOUNCE = 0.9 * abs(sin(TIME + 0.4));\n    HEAD_BOB = - 0.05 * (1.0 - (sin(2.0 * (TIME - 1.0))));\n    L_LEG_SWING =  .6 * sin(TIME);\n    R_LEG_SWING = -.6 * sin(TIME);\n    L_KNEE_BEND = -0.8 * (1.0 + sin(TIME+1.7));\n    R_KNEE_BEND = -0.8 * (1.0 - sin(TIME+1.7));\n    L_ANKLE_BEND = 0.3 * (1.0 + sin(TIME+1.));\n    R_ANKLE_BEND = 0.3 * (1.0 - sin(TIME+1.));\n    L_ARM_SWING = vec3(-0.6 * sin(TIME), 0.1, -0.4);\n    R_ARM_SWING = vec3( 0.6 * sin(TIME), -0.1,  0.4);\n    L_ELBOW_BEND = mix(0.9, 1.5, 1.0 - (sin(TIME + 0.3) + 0.3 * sin(2.0 * (TIME + 0.3))));\n    R_ELBOW_BEND = mix(0.9, 1.5, 1.0 + (sin(TIME + 0.3) + 0.3 * sin(2.0 * (TIME + 0.3))));   \n}\n\nfloat sdPlane(in vec3 p) {\n    return p.y;\n}\n\nfloat sdSphere(in vec3 p, in float r) {\n    return length(p)-r;\n}\n\nfloat sdCylinder( vec3 p, vec2 h ) {\n    vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat sdEllipsoid( in vec3 p, in vec3 r ) {\n    return (length( p/r ) - 1.0) * min(min(r.x,r.y),r.z);\n}\n\nfloat udRoundBox( vec3 p, vec3 b, float r ) {\n    return length(max(abs(p)-b,0.0))-r;\n}\n\nfloat smin( float a, float b, float k ) {\n    float h = clamp( 0.5 + 0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nvec3 rotx(vec3 p, float rx) {\n    float sinx = sin(rx);\n    float cosx = cos(rx);\n    return mat3(1., 0., 0., 0., cosx, sinx, 0., -sinx, cosx) * p;\n}\n\nvec3 roty(vec3 p, float ry) {\n    float sinx = sin(ry);\n    float cosx = cos(ry);\n    return mat3(cosx, 0., -sinx, 0., 1., 0., sinx, 0., cosx) * p;\n}\n\nvec3 rotz(vec3 p, float rz) {\n    float sinx = sin(rz);\n    float cosx = cos(rz);\n    return mat3(cosx, sinx, 0., -sinx, cosx, 0., 0., 0., 1.) * p;\n}\n\nvec3 rot(vec3 p, vec3 r) {\n    return rotx(roty(rotz(p, r.z), r.y), r.x);\n}\n\nfloat sdLeg(vec3 p, float r, vec2 h, float legSwing, float kneeBend, float ankleBend) {    \n    vec3 cylOffset = vec3(0.0, h.y, 0.0);\n    p = rotx(p - 2.0 * cylOffset, legSwing) + 2.0 * cylOffset; // Swing upper leg.\n    \n    // Knee\n    float d = sdSphere(p, r);\n    \n    // Thigh\n\td = smin(d, sdCylinder(p - cylOffset, h), 0.4);\n    \n    p = rotx(p, kneeBend); // Swing lower leg.\n\n    // Shin\n    d = smin(d, sdCylinder(p + cylOffset, h), 0.4);\n    \n    vec3 ty = vec3(0.0, 2.0 * h.y, 0.0);\n    p = rotx(p + ty, ankleBend); // Swing foot.\n\n    // Foot\n\tvec3 tz = vec3(0.0, 0.0, -0.7);\n    d = smin(d, sdEllipsoid(p + tz, vec3(0.25, 0.2, 0.7)), 0.4);\n    \n    return d;\n}\n\nfloat sdLegs(vec3 p) {\n    vec2 legDimens = vec2(0.3, 1.9);\n    vec3 legDisp = vec3(0.9, 0.0, 0.0);\n    return min(\n        sdLeg(p - legDisp, 0.1, legDimens, L_LEG_SWING, L_KNEE_BEND, L_ANKLE_BEND),\n        sdLeg(p + legDisp, 0.1, legDimens, R_LEG_SWING, R_KNEE_BEND, R_ANKLE_BEND));\n}\n\nfloat sdArm(vec3 p, vec3 swing, float elbowBend) {\n    p = rot(p, swing);\n    \n    // Shoulder\n    float d = sdSphere(p, 0.3);\n    \n    // Upper arm\n    vec2 upperArmDimens = vec2(0.3, 1.3);\n    d = smin(d, sdCylinder(p + vec3(0.0, upperArmDimens.y, 0.0), upperArmDimens), 0.4);\n\n    // Rotate at elbow\n    p.y += 2.0 * upperArmDimens.y;\n    p = rotx(p, elbowBend);\n\n    // Elbow\n    d = smin(d, sdSphere(p, 0.3), 0.4);\n    \n    // Lower arm\n    vec2 lowerArmDimens = vec2(0.3, 1.2);\n    d = smin(d, sdCylinder(p + vec3(0.0, lowerArmDimens.y, 0.0), lowerArmDimens), 0.4);\n    \n    // Hand\n    p.y += 2.0 * lowerArmDimens.y;\n    //d = smin(d, sdSphere(p, 0.3), 0.4);\n    \n    return d;\n}\n\nfloat sdArms(vec3 p) {    \n    vec3 armDisp = vec3(1.4, 0.0, 0.0);\n    return min(\n        sdArm(p - armDisp, L_ARM_SWING, L_ELBOW_BEND),\n        sdArm(p + armDisp, R_ARM_SWING, R_ELBOW_BEND));\n}\n\nfloat sdUpperBody(vec3 p) {\n    float d = udRoundBox(p, vec3(0.7, 1.5, .0), 0.7);\n    d = smin(d, sdArms(p - vec3(0.0, 1.8, 0.0)), 0.4);\n    d = smin(d, sdCylinder(p - vec3(0.0, 2.5, 0.0), vec2(0.2, 0.4)), 0.4);\n    \n    p.y -= 2.5;\n    p = rotx(p, HEAD_BOB);\n    p.y -= 1.0;\n    d = smin(d, sdSphere(p, 1.0), 0.4);\n\n    return d;\n}\n\nvec2 argMin(in vec2 a, in vec2 b) {\n    return a.x < b.x ? a : b;\n}\n\nfloat sdPerson(vec3 p) {\n    float d = sdLegs(p);    \n    p.y -= TORSO_BOUNCE + 4.9;\n    p.z -= 0.2;\n    p = rotx(p, TORSO_LEAN);\n    p = roty(p, TORSO_TWIST);\n    return smin(d, sdUpperBody(p), 0.5);\n}\n\nvec2 map(in vec3 p) {\n    vec2 res = vec2(sdPlane(p), 1.0);\n    return argMin(res, vec2(sdPerson(p - vec3(0.0, 3.95, 0.0)), 2.0));\n}\n\nvec3 calcNormal(in vec3 p)\n{\n    vec2 eps = vec2(0.001, 0.0);\n    vec3 n = vec3(map(p+eps.xyy).x - map(p-eps.xyy).x,\n                  map(p+eps.yxy).x - map(p-eps.yxy).x,\n                  map(p+eps.yyx).x - map(p-eps.yyx).x);\n    return normalize(n);\n}\n\nvec2 marchRay(in vec3 ro, in vec3 rd) {\n    float t = 0.0;\n    float precis = 0.02;\n    float tmax = 15.0;\n    for (int i=0; i<200; i++)\n    {\n        vec3 p = ro + t*rd;\n\n        if (length(p) > 200.0) break; // Throw away points far from origin.\n\n        vec2 res = map(p);\n\n        if (res.x < precis) return vec2(t, res.y);\n        if (res.x > tmax) break;\n\n        t += res.x;\n    }\n    return vec2(-1.0);\n}\n\nvec3 render(in vec3 ro, in vec3 rd) {\n    vec2 res = marchRay(ro, rd);\n    if (res.y < -0.5) return vec3(0.6, 0.7, 0.9);\n    \n    float t = res.x;\n    vec3 p = ro + t*rd;\n    vec3 n = calcNormal(p);\n    vec3 lightDir = normalize(vec3(0.5, -1.0, -0.5));\n    \n    vec3 col = vec3(0.1, 0.6, 0.8);\n    if (res.y < 1.5) {\n        col = vec3(0.3, 0.55, 0.3);\n        if (abs(p.x) < 10.0) {\n            col = vec3(mix(0.9, 0.8, step(mod(p.z + 5.4 *TIME, 20.0), 0.3)));\n        }\n    }\n    \n\tfloat lambert = 0.2 * max(0.0, dot(n, normalize(vec3(1.0, 1.0, -1.0))));// fill\n    if (marchRay(p - 0.1 * LIGHT_DIR, -LIGHT_DIR).y < -0.5) {\n        lambert = max(0.0, dot(n, -LIGHT_DIR));// key\n    }\n    \n    return col * vec3(0.3 + 0.7 * lambert);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    initAnimation();\n\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    vec2 p = -1.0+2.0*uv;\n    p.x *= iResolution.x/iResolution.y;\n\n    // camera\n    vec3 eye = vec3(25.0, 11.0, 25.0);\n    if (iMouse.z > -1.0) {\n        eye = rotx(eye, 0.3 *(iMouse.y - iMouse.w)/iResolution.y);\n        eye = roty(eye, -10.0*((iMouse.x - iMouse.z)/iResolution.x));\n    }\n    vec3 look = vec3(0.0, 6.0, 0.0);\n    vec3 up = vec3( 0.0, 1.0, 0.0 );\n    vec3 w = normalize( look - eye );\n    vec3 u = normalize( cross(w,up) );\n    vec3 v = normalize( cross(u,w) );\n    vec3 rd = normalize( p.x*u + p.y*v + 3.5*w );\n\n    vec3 col = render( eye, rd );\n    \n    col = pow(col, vec3(.4545));\n    \n    fragColor=vec4( col, 1.0 );\n}\n","name":"Image","description":"","type":"image"}]}