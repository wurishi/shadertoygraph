{"ver":"0.1","info":{"id":"Xf2yDG","date":"1722916182","viewed":44,"name":"Red Effect distortion","username":"guisende","description":"evil moment","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["red"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float desaturationAmount = 0.0; // - alpha\nfloat distortionTime = 0.0;\nfloat amplitude = 0.0;\nfloat frequency = 0.0;\nconst float threshold = 0.3; // Midpoint between 0.5 and 0.3\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy; \n    // Pincushion distortion\n    vec2 st = uv - 0.5;\n    float theta = atan(st.x, st.y);\n    float radius = sqrt(dot(st, st));\n    radius *= 1.0 + -0.5 * pow(radius, 2.0);\n    \n    // Adjust UV for pincushion distortion\n    vec2 distortedUV = vec2(0.5 + sin(theta) * radius, 0.5 + cos(theta) * radius);\n\n    // Chromatic aberration\n    vec4 col;\n    col.r = texture(iChannel0, vec2(distortedUV.x + ((uv.x + 0.5) / 500.0), uv.y)).r;\n    col.g = texture(iChannel0, vec2(distortedUV.x, uv.y)).g;\n    col.b = texture(iChannel0, vec2(distortedUV.x - ((uv.x + 0.5) / 500.0), uv.y)).b;\n    col.a = texture(iChannel0, vec2(distortedUV.x - ((uv.x + 0.5) / 500.0), uv.y)).a;\n\n    // Sine wave distortion\n    vec2 sineWaveUV = vec2(uv.x + sin((uv.y * frequency) + distortionTime) * amplitude, uv.y);\n    vec4 desatTexture = texture(iChannel0, sineWaveUV);\n    float grayscaleValue = dot(desatTexture.xyz, vec3(.2126, .7152, .0722));\n\n    // Thresholding to black or red\n    vec3 blackOrRed = grayscaleValue > threshold ? vec3(1.0, 0.0, 0.0) : vec3(0.0, 0.0, 0.0);\n\n    // Mix desaturation and chromatic aberration effect with thresholding\n    vec3 finalColor = mix(blackOrRed, col.rgb, desaturationAmount);\n\n    fragColor = vec4(finalColor, col.a);\n}","name":"Image","description":"","type":"image"}]}