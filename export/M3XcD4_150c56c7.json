{"ver":"0.1","info":{"id":"M3XcD4","date":"1726343824","viewed":15,"name":"RayMarching Learning .01","username":"jcraw","description":"Learning to RayMarch\nhttps://www.youtube.com/watch?v=PGtv-dBi2wE\n","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DISTANCE 100.\n#define SURFACE_DISTANCE .01\n\nfloat GetDist(vec3 point) {\n    vec3 spherePosition = vec3(\n        4. * cos(iTime * 2.),\n        1.4,\n        9. + sin(iTime * 2.) * 5.\n    );\n    float radius = .8;// abs(sin(iTime * 2.)) * .4 + .4;\n    vec4 sphere = vec4(spherePosition, radius);\n    float sphereDist = length(point - sphere.xyz) - sphere.w;\n    float planeDist = point.y;    // for a ground plane \n    \n    float dist = min(sphereDist, planeDist);\n    return dist;\n}\n\nfloat RayMarch(vec3 rayOrigin, vec3 rayDirection) {\n    float distanceOrigin = 0.;\n    \n    for(int i = 0; i<MAX_STEPS; i++) {\n        vec3 point = rayOrigin + rayDirection*distanceOrigin;\n        float distanceScene = GetDist(point);\n        distanceOrigin += distanceScene;\n        if(distanceOrigin > MAX_DISTANCE || distanceScene < SURFACE_DISTANCE) break;    \n    }\n    \n    return distanceOrigin;\n}\n\nvec3 GetNormal(vec3 point) {\n    float dist = GetDist(point);\n    vec2 e = vec2(.01, 0);\n    vec3 n = dist - vec3(\n        GetDist(point - e.xyy),\n        GetDist(point - e.yxy),\n        GetDist(point - e.yyx)\n    );\n\n    return normalize(n);\n}\n\nfloat GetLight(vec3 point) {\n    vec3 lightPos = vec3(0, 5, 6);\n    //lightPos.xz =+ vec2(sin(iTime), cos(iTime))*2.;\n    vec3 light = normalize(lightPos - point);\n    \n    \n    \n    vec3 normal = GetNormal(point);\n    float diffuse = dot(normal, light);\n    diffuse = clamp(diffuse, 0., 1.);\n    \n    float rayDistance = RayMarch(point + normal*SURFACE_DISTANCE*2., light);  // need to move out of the surface or ray march will exit early\n    float actualDistance = length(lightPos - point);\n    bool shadow = rayDistance < actualDistance;\n    if(shadow) diffuse *= .1;\n    \n    return diffuse;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // 0 in the center\n    vec2 uv = (fragCoord - .5 * iResolution.xy)/iResolution.y;\n\n    vec3 changingColor = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    vec3 col = vec3(0);\n    \n    //camera\n    vec3 rayOrigin = vec3(0, 1, 0); \n    vec3 rayDirection = normalize(vec3(uv.x, uv.y, 1));\n    \n    float distance = RayMarch(rayOrigin, rayDirection);\n    vec3 point = rayOrigin + rayDirection * distance;\n    \n    float diffuse = GetLight(point);\n    \n    col = vec3(diffuse); \n    \n    col *= changingColor;\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}