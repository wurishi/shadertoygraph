{"ver":"0.1","info":{"id":"MX3Gzs","date":"1716890338","viewed":72,"name":"Inside a Lava Lamp","username":"Aurore_B","description":"Little experiment with raymarching. \nI had fun watching these shapes moving on and on.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","lava"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n//https://iquilezles.org/articles/distfunctions/\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\nvec3 palette( float t, vec3 a, vec3 b, vec3 c, vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat smin(float a, float b, float k)\n{\n    float h = max(k - abs(a-b), 0.0)/k;\n    return min(a,b)- h*h*h*k*(1./6.);\n}\n\nvec2 opU2(vec2 d1, vec2 d2){\n    return (d1.x < d2.x) ? d1 : d2;\n}\nvec2 opS2(vec2 d1, vec2 d2){\n    return (-d1.x > d2.x) ? d1 : d2;\n}\n\n\nfloat map(vec3 p){\n    \n    //walls\n    vec3 q = p;\n    q.y *= 0.2;\n    q.z += sin(q.y*5.0+iTime)*0.2 + sin(3.0+q.y*10.0+iTime*2.8)*0.2 ; \n    float wall1 = sdSphere(q-vec3(3.8,0.,0.0),1.0);\n    float wall2 = sdSphere(q-vec3(-3.8,0.,0.0),1.0);\n    float walls = smin(wall1, wall2,1.0);\n    \n    //floating spheres\n    float sp = sdSphere(p-vec3(sin(iTime*0.3)*4.0,0.16,0.0),0.5);\n    sp = smin(sp, sdSphere(p-vec3(sin(0.6+iTime*0.26)*3.0,1.,0.0),0.28), 2.2);\n    sp = smin(sp, sdSphere(p-vec3(sin(4.2+iTime*0.71)*3.0,1.,0.0),0.36), 3.0);\n    sp = smin(sp, sdSphere(p-vec3(sin(0.1+iTime*0.32)*3.0,-1.,0.0),0.31), 2.0);\n    sp = smin(sp, sdSphere(p-vec3(sin((2.0+iTime)*0.35)*8.0,-0.3,0.0),0.47), 2.5);\n    sp = smin(sp, sdSphere(p-vec3(sin(3.0+iTime*0.6)*3.,-2.3,0.0),0.58), 1.1);\n    sp = smin(sp, sdSphere(p-vec3(sin(10.0+iTime*0.4)*3.,1.7,0.0),0.43), 1.8);\n    \n    \n    return smin(walls, sp,3.3);\n\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord *2.0 - iResolution.xy)/iResolution.y;\n    \n    //ray origin / camera position\n    vec3 ro = vec3(0.0,.0,-3.);\n    //ray direction\n    vec3 rd = normalize(vec3(uv*0.6,1));\n    //final pixel color\n    vec3 col = vec3(0.);\n    \n    //total distance travelled\n    float t = 0.;\n    float d = 0.;\n    int i =0;\n    \n    //Raymarching\n    for (; i<100; i++){\n        //pos along the ray\n        vec3 p = ro + rd * t;\n\n        //current distance to the scene \n        d = map(p);\n\n        t+=d;\n        \n        //early stop if close enough - too far\n        if(d<0.001 || t> 100.) break;\n    }\n    \n    //color palette test\n    //blue purple\n    col = palette(t*1.8+iTime*0.8, vec3(0.418,.82,82), vec3(0.313,.094, -0.352), vec3(-0.311,0.898,.458), vec3(-.963,-0.073,1.007));\n    //blue orange\n    //col = palette(t*0.2+iTime*0.2, vec3(0.5), vec3(.5), vec3(1.), vec3(0.0,.10,0.20));\n    //blue red\n    //col = palette(t*0.7+iTime*0.2, vec3(0.5), vec3(.5), vec3(1.), vec3(0.3,.20,0.20));\n\n    \n    //background clamp\n    if(t>4.5){\n        col = vec3(0.15,0.15,0.15);\n    }\n\n\n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}