{"ver":"0.1","info":{"id":"dttyRB","date":"1699379343","viewed":43,"name":"Pseudo particles","username":"Dido","description":"My first attempt in creating pseudo particles","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["particles"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define DeviationMax 0.4412712003053032\n#define NaturalLog2 0.6931471805599453\n#define PiInverse 0.3183098861837907\n#define HalfPi 1.5707963267948966\n\nvec2 FindPosition(vec2 PseudoPosition,vec2 Range){\n  PseudoPosition=mod(PseudoPosition,4.0*Range);\n  if(PseudoPosition.x<-2.0*Range.x){\n    PseudoPosition.x+=4.0*Range.x;\n  }else if(PseudoPosition.x>2.0*Range.x){\n    PseudoPosition.x-=4.0*Range.x;\n  }\n  if(PseudoPosition.y<-2.0*Range.y){\n    PseudoPosition.y+=4.0*Range.y;\n  }else if(PseudoPosition.y>2.0*Range.y){\n    PseudoPosition.y-=4.0*Range.y;\n  }\n  vec2 Position=vec2(0);\n  if(PseudoPosition.x<-Range.x){\n    Position.x=-2.0*Range.x-PseudoPosition.x;\n  }else if(PseudoPosition.x>Range.x){\n    Position.x=2.0*Range.x-PseudoPosition.x;\n  }else{\n    Position.x=PseudoPosition.x;\n  }\n  if(PseudoPosition.y<-Range.y){\n    Position.y=-2.0*Range.y-PseudoPosition.y;\n  }else if(PseudoPosition.y>Range.y){\n    Position.y=2.0*Range.y-PseudoPosition.y;\n  }else{\n    Position.y=PseudoPosition.y;\n  }\n  return Position;\n}\n\nfloat ColorField(vec2 POI,vec2 position,float deviation,float frequency,float time){\n  float DeviationSquareInverse=1.0/(deviation*deviation);\n  float RelativeDistanceSquare=dot(POI-position,POI-position);\n  float EffectiveFrequency=(frequency*frequency)*HalfPi*DeviationSquareInverse;\n  return NaturalLog2*PiInverse*DeviationSquareInverse*\n    exp(-NaturalLog2*DeviationSquareInverse*RelativeDistanceSquare)*\n    cos(EffectiveFrequency*RelativeDistanceSquare-4.0*HalfPi*time);\n}\n\nconst int Particles=4;\nvec2 ParticlesPosition[Particles]=vec2[Particles](\n  vec2(-0.5,0.5),\n  vec2(0.7,-0.8),\n  vec2(0.3,0.3),\n  vec2(-0.2,-0.2)\n);\nvec2 ParticlesVelocity[Particles]=vec2[Particles](\n  vec2(0.1,-0.05),\n  vec2(-0.03,0.01),\n  vec2(0.02,-0.01),\n  vec2(-0.01,0.02)\n);\nfloat ParticlesRadius[Particles]=float[Particles](\n  0.2,\n  0.15,\n  0.1,\n  0.08\n);\n\nvoid mainImage(out vec4 FragColor,in vec2 FragCoord){\n  vec2 Coordinates=(2.0*FragCoord-iResolution.xy)/min(iResolution.x,iResolution.y);\n  vec2 Range=iResolution.xy/min(iResolution.x,iResolution.y);\n  float Threshold=0.0;\n  for(int id=0;id<Particles;id++){\n    vec2 Position=FindPosition(ParticlesPosition[id]+iTime*ParticlesVelocity[id],Range);\n    Threshold+=ColorField(Coordinates,Position,DeviationMax,2.2,iTime);\n  }\n  FragColor=vec4(vec3(Threshold),1);\n}","name":"Image","description":"","type":"image"}]}