{"ver":"0.1","info":{"id":"mllBRs","date":"1694528644","viewed":294,"name":"Endless Loop","username":"sharkboy","description":"Created a infinite symbol using small dots. Optimization is very bad because I used a lot of small balls to create the line (it was the only way I found to do it)","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["endless","loop","infinity"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define pi 3.14159265359\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv -= 0.5;\n    uv.x *= iResolution.x / iResolution.y;\n\n    // Time variable for animation\n    float time = iTime;\n\n    // Calculate ball positions\n    float radius1 = 0.2; // Raio da primeira bola\n    float rotationSpeed1 = -0.5; // Velocidade de rotação da primeira bola\n    \n    float glowEffect = 0.00004;\n    float lineSpeed = 3.5;\n   \n    // Radius of the balls\n    float ballRadius = 0.02;\n\n    // Check if pixel is inside either of the balls\n    vec4 col = vec4(0.0);\n    \n    vec2 ballPosition1 = vec2(radius1 * cos(rotationSpeed1 * time * lineSpeed + (500.*pi)) * 2.0, radius1 * sin(rotationSpeed1 * time * lineSpeed * 2.0 + (500.*pi)));\n    float distanceToBall1 = length(uv - ballPosition1);\n    col = 0.01 * vec4(vec3(1.0, 0.4, 1.0), 1.0)/length(distanceToBall1);\n    \n    vec2 ballPosition2 = vec2(radius1 * cos(rotationSpeed1 * time * lineSpeed + (500.*pi) + pi) * 2.0, radius1 * -sin(rotationSpeed1 * time * lineSpeed * 2.0 + (500.*pi)));\n    // Calculate distances from pixel to ball centers\n    float distanceToBall2 = length(uv - ballPosition2);\n         \n    col += 0.01 * vec4(vec3(0.0, 0.5, 1.0), 1.0)/length(distanceToBall2);\n\n     for (float i = 0.; i < pi; i += 0.001){\n        ballPosition1 = vec2(radius1 * cos(rotationSpeed1 * time * lineSpeed + (500.*pi)+i) * 2.0, radius1 * sin(rotationSpeed1 * time * lineSpeed * 2.0 + (500.*pi)+(i*2.0)));\n        // Calculate distances from pixel to ball centers\n        distanceToBall1 = length(uv - ballPosition1);\n\n        col += glowEffect * vec4(vec3(1.0, 0.4, 1.0), 1.0)/length(distanceToBall1);\n        \n        ballPosition2 = vec2(radius1 * cos(rotationSpeed1 * time * lineSpeed + (500.*pi) + pi + i) * 2.0, radius1 * -sin(rotationSpeed1 * time * lineSpeed * 2.0 + (500.*pi) + (i*2.0)));\n        // Calculate distances from pixel to ball centers\n        distanceToBall2 = length(uv - ballPosition2);\n         \n        col += glowEffect * vec4(vec3(0.0, 0.5, 1.0), 1.0)/length(distanceToBall2);\n \n    }\n     \n     \n      \n    \n    fragColor = col;\n}\n\n\n","name":"Image","description":"","type":"image"}]}