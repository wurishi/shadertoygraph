{"ver":"0.1","info":{"id":"4lc3RM","date":"1468277178","viewed":474,"name":"Blueprint Material Grid","username":"chronos","description":"Simple material inspired by blueprint textures","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["procedural","grid","texture","material","blueprint"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nfloat stripes(float spacing, float thickness, float alpha, float position) {\n    return alpha * step(spacing-thickness, mod(position, spacing));\n}\n\nfloat grid(float spacing, float thickness, float alpha, vec2 position) {\n    vec2 lines = alpha * step(vec2(spacing-thickness), mod(position, vec2(spacing)));\n    return max(lines.x, lines.y);\n}\n\n// asymmetric\nvec2 grid2(vec2 spacing, vec2 thickness, vec2 alpha, vec2 position) {\n    return alpha * step(mod(position, spacing), spacing-thickness);\n}*/\n\nfloat smoothgrid(float spacing, float thickness, float alpha, vec2 position) {\n    vec2 posrep = mod(position, vec2(spacing))-.5*thickness;\n    vec2 lines = alpha * max(vec2(0.0), min(thickness+posrep, thickness-posrep)/thickness);\n    return max(lines.x, lines.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy-iMouse.xy) / iResolution.xx;\n    vec3 blue = vec3(0.2, 0.1, 0.9);\n      \n    vec2 spacing   = vec2(0.1  , 0.02); \n    vec2 thickness = vec2(0.002, 0.001);\n    vec2 alpha     = vec2(0.9  , 0.5);\n    \n    float thick_lines = smoothgrid(spacing.s, thickness.s, alpha.s, uv);\n    float thin_lines  = smoothgrid(spacing.t, thickness.t, alpha.t, uv);\n    \n    vec4 fibers = texture(iChannel0, uv * 10.0);\n    vec4 wooden = texture(iChannel1, uv * 4.0);\n    vec4 rock   = texture(iChannel2, uv);\n    \n    float erasure = 0.5 + 0.5*sin(iTime/3.);\n    \n    vec4 background = mix(fibers, wooden, vec4(0.7));\n    vec3 paper = max(blue, 0.35*length(background.rgb));\n    \n    vec3 color = vec3(max(paper, sqrt(erasure*rock.b+(1.-erasure))*max(thick_lines, thin_lines)));\n    \n\tfragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}