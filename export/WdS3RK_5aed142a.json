{"ver":"0.1","info":{"id":"WdS3RK","date":"1549532885","viewed":96,"name":"MCG: Triangle","username":"tale3d","description":"We keep discussing vectors. Here we use dot product and cross product to check if the point is inside the triangle and use the area of the triangle to find the colour of this triangle","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["vectors","teachingmaterial"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    //////////////////////////////////////////////////////\n    //Starting the common section\n    //The lines above are the same for most of the examples. \n    //Basically it is a mapping between pixel coordinates and world coordinates.\n    //We discuss coordinates systems soon. \n    //\n    //taking pixel coordinates in the uv space, range [0,1]\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    //map pixel coordinates to [-1,1]\n    vec2 c = 2.0 * uv - 1.0;\n    //adjust coordinates given an aspect ratio\n    float aspect_ratio = iResolution.x/iResolution.y;\n    c.x *= aspect_ratio;\n    //\n    //End of the common section\n    ///////////////////////////////////////////////////////\n\n    //Adding more to the common section:\n    //This example has a mouse as an input device.\n    //The mouse coordinates are taking in uv space, and then is modified in the same way\n    //  as the pixel coordinates (see above). \n    //Note that mouse coordinates change only if we use LMB + mouse move\n    vec2 mouse = 2.0*(iMouse.xy / iResolution.xy) - vec2(1.0,1.0);\n    mouse.x *= aspect_ratio;\n\n\n    //Background colour is white by default\n    vec3 colour = vec3(1.0,1.0,1.0);\n\n    //Here we define our triangle. \n    // It has three vertices, two with fixed position and third depends on the mouse\n    vec2 t1 = vec2(-0.6,0.5);\n    vec2 t2 = mouse;\n    vec2 t3 = vec2(0.6,0.5);  \n\n    //First, we denote the vertices. If the point we colour is nearby the vertex, we colour it\n    if (dot(c-t1, c-t1) < 0.001) colour = vec3(1.0,0.0,0.0); //Red for the vertex 1\n    if (dot(c-t2, c-t2) < 0.001) colour = vec3(0.0,1.0,0.0); //Green for the vertex 2\n    if (dot(c-t3, c-t3) < 0.001) colour = vec3(0.0,0.0,1.0); //Blue for the vertex 3\n\n    //We are going to work with 3D vectors, as cross product requires that. \n    //Here we have to convert 2D point coordinates into 3D vector by adding extra zero component\n    vec3 c3 = vec3(c.x, c.y, 0.0);\n    \n    //The same we are doing for the vertices of the triangle. Note that I am using one of the features of \n    //GLSL, namely construct 3D vector from 2D vector and the third component\n    vec3 t31 = vec3(t1, 0.0); //is equal to vec3(t1.x, t1.y, 0.0)\n    vec3 t32 = vec3(t2, 0.0);\n    vec3 t33 = vec3(t3, 0.0);\n    \n    //Now we can construct the vectors for edges, note the orientation\n    vec3 edge1 = t32-t31;\n    vec3 edge2 = t33-t32;\n    vec3 edge3 = t31-t33;\n    \n    //Here we construct the vector from vertices to the query point\n    vec3 p1 = c3-t31;\n    vec3 p2 = c3-t32;\n    vec3 p3 = c3-t33;\n    \n    //Now we have tests as we discussed in the lectures\n    float test1 = dot(cross(edge1, p1), cross(edge1, -edge3));\n    float test2 = dot(cross(edge2, p2), cross(edge2, -edge1));\n    float test3 = dot(cross(edge3, p3), cross(edge3, -edge2));\n    \n    //The test comes positive if the query point is on the same side with the vertex\n    //The point is inside the triangle if the test is positive for all three sides/edges of the triangle\n    if (test1 > 0.0 && test2 > 0.0 && test3 > 0.0)\n    {\n        //We are inside. First, we find the area of the triangle\n        vec3 tri_cross = 0.5*cross(edge1, edge2);\n        //As we work in UV space, the area is likely to be between 0 and 1, but to make sure, in the next line\n        // we explicitly make the area to be between 0 and 1, as we convert it to the colour\n        float len = clamp(length(tri_cross), 0.0, 1.0);\n        //Colour the pixel inside the triangle into grey\n        colour = vec3(len, len, len);\n    }\n    \n    fragColor = vec4(colour,1.0);\n}","name":"Image","description":"","type":"image"}]}