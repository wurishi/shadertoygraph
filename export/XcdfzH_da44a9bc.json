{"ver":"0.1","info":{"id":"XcdfzH","date":"1732720082","viewed":137,"name":"\"resonance of logic\"","username":"daisie","description":"exploring the interplay between logic, math, and their artistic dimensions, revealing how the clarity of algorithms embodies a universal harmony that resonates beyond computation\n\ntutorial by kishimiso","likes":3,"published":3,"flags":0,"usePreview":0,"tags":["shaderart"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 palette(float t)\n{\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.00, 0.10, 0.20);\n\n    return a + b * cos(6.283185 * (c * t + d));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    uv -= 0.5;\n    uv *= 2.0;\n    uv.x *= iResolution.x / iResolution.y;\n    vec2 uv0 = uv;\n\n    vec3 finalColor = vec3(0.0);\n\n    for (float i = 0.0; i < 3.5; i++)\n    {\n        uv = fract(uv * 1.1) - 0.5;\n        float d = length(uv) * exp(-length(uv0));\n        vec3 color = palette(length(uv0) + i * 0.4 + iTime * 0.4);\n        d = sin(d * 9.0 + sin(iTime * 0.4)) / 5.0;\n        d = abs(d);\n        d = pow(0.01 / d, 1.25);\n        finalColor += color * d;\n    }\n\n    fragColor = vec4(finalColor, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}