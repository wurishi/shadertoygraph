{"ver":"0.1","info":{"id":"lf2fWw","date":"1725215621","viewed":11,"name":"Example: AspectRatio UV ","username":"ElliotPadfield","description":"This shader visualizes UV coordinates with aspect ratio correction, ensuring the UV map is properly scaled regardless of screen dimensions. The UVs are normalized based on the shorter side of the screen, and the resulting gradient is displayed in RGB chan","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["example"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//https://shadertoyunofficial.wordpress.com/2019/01/02/programming-tricks-in-shadertoy-glsl/\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Step 1: Normalize UV coordinates with aspect ratio correction\n    vec2 R = iResolution.xy;\n    vec2 uv = (2.0 * fragCoord - R) / min(R.x, R.y); // Normalize to [-1, 1] along the shortest side\n\n    // Step 2: Convert UV to Normalized UV [0, 1] range for visualization or further processing\n    vec2 normUV = uv * 0.5 + 0.5;\n\n    // Step 3: Visualize the Normalized UVs by mapping them to RGB channels\n    fragColor = vec4(normUV.x, normUV.y, 0, 1);\n}\n","name":"Image","description":"","type":"image"}]}