{"ver":"0.1","info":{"id":"7lsGRX","date":"1622571002","viewed":158,"name":"drive_home_srp","username":"sreejithpro","description":"a recreation of BigWings Tutorial","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["tutorial"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define s(a,b,t) smoothstep(a,b,t)\n\nfloat N(float t){\n    return fract(sin(t*458.25)*2564.36);\n}\n\nfloat N21(vec2 p){\n    p = fract(p*vec2(123.34,345.45));\n    p += dot(p, p+34.3456);\n    return fract(p.x*p.y);\n}\n\nvec4 N14(float t){\n    return fract(sin(t*vec4(58.36, 623.25, 7198.23, 9486.64))*vec4(5689.74,2564.36,528.49,89.75));\n}\n\nstruct ray{\n    vec3 o, d;\n};\n\nray getRay(vec2 uv, vec3 camPos, vec3 lookat, float zoom){\n    ray a;\n    a.o = camPos;\n    vec3 wup = vec3(0,1,0);\n\n    vec3 f = normalize(lookat-camPos);\n    vec3 r = normalize(cross(wup,f));\n    vec3 u = cross(f, r);\n\n    vec3 c = a.o + f*zoom;\n    vec3 i = c + uv.x*r + uv.y*u;\n    a.d = normalize(i-a.o);\n\n    return a;\n}\n\nvec3 closestPoint (ray r, vec3 p){\n    return r.o + max(0., dot(p-r.o,r.d))*r.d;\n}\n\nfloat distRay(ray r, vec3 p){\n   return length(p-closestPoint(r,p));\n}\n\nfloat Bokeh (ray r, vec3 p, float size, float blur){\n    \n    float d = distRay(r, p);\n    size *= length(p);\n    float c = s(size,size*(1.-blur),d);\n    c *= mix(0.6, 1., s(size*.8,size,d));\n    return c;\n}\n\nvec3 streetLights(ray r, float t){\n    float side = step(r.d.x,0.);\n    r.d.x = abs(r.d.x);\n    \n    float s = 1./10.;\n    float m = 0.;\n    for(float i=0.; i<1.; i+=s){\n        float ti = fract(t+i+side*s*.5);\n        vec3 p = vec3(2,2,100.-ti*100.);\n        m += Bokeh(r,p,0.05,0.1)*ti*ti*ti;    \n    }\n    vec3 col = vec3(1,0.7,.3)*m;\n    return col;\n}\n\nvec3 headLights(ray r, float t){\n    t *= 2.;\n    float w1 = 0.25;\n    float w2 = w1*1.2;\n    float s = 1./30.;\n    float m = 0.;\n    \n    for(float i=0.; i<1.; i+=s){\n        float n = N(i);\n\n        if(n>0.25) continue; // limiting no. of headlights\n        float ti = fract(t+i);\n        float z = 100.-ti*100.;\n        float fade = ti*ti*ti*ti*ti;\n        float focus = s(0.9,1.,ti);\n        float size = mix(0.05,0.03,focus);\n        \n        //headlights 1\n        m += Bokeh(r,vec3(-1.-w1,0.15,z),size,0.1)*fade; \n        m += Bokeh(r,vec3(-1.+w1,0.15,z),size,0.1)*fade; \n        \n        //headlights 2\n        m += Bokeh(r,vec3(-1.-w2,0.15,z),size,0.1)*fade; \n        m += Bokeh(r,vec3(-1.+w2,0.15,z),size,0.1)*fade;\n        \n        //reflections\n        float ref = 0.;\n        ref += Bokeh(r,vec3(-1.-w2,-0.15,z),size*3.,1.)*focus; \n        ref += Bokeh(r,vec3(-1.+w2,-0.15,z),size*3.,1.)*focus;\n        \n        m += ref*focus;\n    }\n    vec3 col = vec3(.9,.9,1.)*m;\n    return col;\n}\n\nvec3 tailLights(ray r, float t){\n    \n    t *= 0.25;\n    float w1 = 0.25;\n    float w2 = w1*1.2;\n    float s = 1./30.;\n    float m = 0.;\n    \n    for(float i=0.; i<1.; i+=s){\n        float n = N(i);\n\n        if(n>.5) continue; // limiting no. of headlights\n        \n        float lane = step(.25,n);\n        float ti = fract(t+i);\n        float z = 100.-ti*100.;\n        float fade = ti*ti*ti*ti*ti;\n        float focus = s(0.9,1.,ti);\n        float size = mix(0.05,0.03,focus);\n        float laneShift = s(1.,0.96,ti);\n        \n        //headlights 1\n        float blinker = step(0.96,ti);\n        float x = 1.5 - lane * laneShift;\n        float blink = step(0.,sin(t*1000.))*lane*blinker*7.;\n        m += Bokeh(r,vec3(x-w1,0.15,z),size,0.1)*fade; \n        m += Bokeh(r,vec3(x+w1,0.15,z),size,0.1)*fade; \n        \n        //headlights 2\n        m += Bokeh(r,vec3(x-w2,0.15,z),size,0.1)*fade; \n        m += Bokeh(r,vec3(x+w2,0.15,z),size,0.1)*fade*(1.+blink);\n        \n        //reflections\n        float ref = 0.;\n        ref += Bokeh(r,vec3(x-w2,-0.15,z),size*3.,1.)*focus; \n        ref += Bokeh(r,vec3(x+w2,-0.15,z),size*3.,1.)*focus*(1.+blink*0.1);\n        \n        m += ref*focus;\n    }\n    vec3 col = vec3(1.,.1,.03)*m;\n    return col;\n}\n\nvec3 envLights(ray r, float t){\n    float side = step(r.d.x,0.);\n    r.d.x = abs(r.d.x);\n    \n    float s = 1./15.;\n    vec3 c = vec3(0.);\n    for(float i=0.; i<1.; i+=s){\n        float ti = fract(t+i+side*s*.5);\n        float fade = ti*ti*ti;\n        vec4 n = N14(i+side*100.);\n        float occlusion = sin(ti*6.283*10.*n.x)*0.5+0.5;\n        fade = occlusion;\n        float x = mix(2.5,10.,n.x);\n        float y = mix(0.1,1.5,n.y);\n        vec3 p = vec3(x,y,50.-ti*50.);\n        \n        vec3 col = n.wzy;\n        c += Bokeh(r,p,0.05,0.1)*fade*col*0.5;    \n    }\n   \n    return c;\n}\n\nvec2 Rain(vec2 uv, float t){\n    \n    t *= 40.;\n    uv *= 4.;\n    \n    vec2 a = vec2(3.,1.);\n    vec2 st = uv*a;\n    \n    vec2 id = floor(st);\n    st.y += t*0.22;\n    \n    st.y += N(id.x);\n    uv.y += N(id.x);\n    id = floor(st);\n    st = fract(st)-0.5;\n    \n    \n    \n    \n    float n = N21(id);\n    t += n*6.2831; \n    float w = uv.y*10.;\n    float x = (n - 0.45)*0.6;\n    x += (0.45*0.6-abs(x))*sin(3.*w)*pow(abs(sin(w)),6.)*0.45;\n    float y = -sin(t+sin(t+sin(t)*0.5))*0.40;\n    //y -= (st.x-x)*(st.x-x);\n    \n    vec2 p1 = vec2(x,y);\n    vec2 dropPos = (st-p1)/a;\n    float drop = s(0.07,0.05,length(dropPos));\n    \n    vec2 p2 = vec2(x,t*0.25);\n    vec2 trailPos = (st-p2)/a;\n    trailPos.y = (fract(trailPos.y*8.)-0.5)/8.;\n    float trail = s(0.06,0.0,length(trailPos));\n    float fogTrail = s(-0.05,.05,dropPos.y);\n    fogTrail *= s(0.5,y,st.y);\n    \n    \n    fogTrail *= s(0.05,0.04,abs(dropPos.x));\n    trail += fogTrail;\n    //if (st.x>0.46 || st.y > 0.49) drop = 1.;\n    \n    return vec2(drop*dropPos*30.+trail*trailPos*10.+fogTrail*dropPos*0.2*5.);\n\n\n}\n\nvec2 Rain2(vec2 uv, float t){\n    \n    t *= 40.;\n    uv *= 6.;\n    \n    vec2 a = vec2(2.,1.);\n    vec2 st = uv*a;\n    \n    vec2 id = floor(st);\n    st.y += t*0.22;\n    \n    st.y += N(id.x);\n    uv.y += N(id.x);\n    id = floor(st);\n    st = fract(st-0.5)-0.5;\n    \n    \n    \n    \n    float n = N21(id);\n    t += n*6.2831; \n    float w = uv.y*10.;\n    float x = (n - 0.45)*0.6;\n    x += (0.45*0.6-abs(x))*sin(3.*w)*pow(abs(sin(w)),6.)*0.45;\n    float y = -sin(t+sin(t+sin(t)*0.5))*0.40;\n    y -= (st.x-x)*(st.x-x);\n    \n    vec2 p1 = vec2(x,y);\n    vec2 dropPos = (st-p1)/a;\n    float drop = s(0.07,0.05,length(dropPos));\n    \n    vec2 p2 = vec2(x,t*0.25);\n    vec2 trailPos = (st-p2)/a;\n    trailPos.y = (fract(trailPos.y*8.)-0.5)/8.;\n    float trail = s(0.06,0.0,length(trailPos));\n    float fogTrail = s(-0.05,.05,dropPos.y);\n    fogTrail *= s(0.5,y,st.y);\n    \n    \n    fogTrail *= s(0.05,0.04,abs(dropPos.x));\n    trail += fogTrail;\n    //if (st.x>0.46 || st.y > 0.49) drop = 1.;\n    \n    return vec2(drop*dropPos*30.+trail*trailPos*10.+fogTrail*dropPos*0.2*5.);\n\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n//*******************************************\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    uv -= .5;\n    uv.x *= iResolution.x/iResolution.y;\n    vec2 m = iMouse.xy/iResolution.xy;\n//*******************************************\n    float t = iTime*.05;//+m.x;\n    float xoffs = (sin(t)*.5-0.5)*0.1;\n    vec3 camPos = vec3(.5+xoffs,.2,0.);\n    vec3 lookat = vec3(.5,.2,1);\n    \n    \n    \n    vec2 rainDistort = Rain(uv, t);\n    rainDistort += Rain2(uv,t);\n    \n    ray r= getRay(uv-rainDistort,camPos,lookat,2.);\n    \n    \n    \n    vec3 col = streetLights(r,t);\n    col += headLights(r,t);\n    col += tailLights(r,t);\n    col += envLights(r,t);\n    \n    col += (r.d.y+.25)*vec3(0.2,0.1,.5);\n    \n    //col = vec3(rainDistort,0.);\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}