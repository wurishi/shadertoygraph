{"ver":"0.1","info":{"id":"7stXzn","date":"1632597350","viewed":350,"name":"Voxel Raycast with Sub-Objects","username":"jt","description":"Combined DDA with different ray-[b]traced[/b] subobjects.\nUsing the elegant tiny core of  [url]https://www.shadertoy.com/view/4dX3zl[/url] Branchless Voxel Raycasting by fb39ca4\n","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["3d","raytracing","raycasting","voxel","dda","textured","subobjects"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/7stXzn Voxel Raycast with Sub-Objects, 2021 by jt\n// based on https://www.shadertoy.com/view/7dK3D3 Branchless Voxel Raycasting Tex\n\n// DDA originally inspired by https://www.shadertoy.com/view/4dX3zl Branchless Voxel Raycasting by fb39ca4\n// and tutorial http://lodev.org/cgtutor/raycasting.html\n// wall-distance & normals & texturing & shadows & ray-tracing subobjects addon by jt\n\n// Combined DDA with different ray-traced subobjects.\n\n// tags: 3d, raytracing, raycasting, voxel, dda, textured, subobjects\n\n// The MIT License\n// Copyright (c) 2021 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// updated 2023\n\n#define pi 3.1415926\n\nmat3 yaw_pitch_roll(float yaw, float pitch, float roll)\n{\n    mat3 R = mat3(vec3(cos(yaw), sin(yaw), 0.0), vec3(-sin(yaw), cos(yaw), 0.0), vec3(0.0, 0.0, 1.0));\n    mat3 S = mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, cos(pitch), sin(pitch)), vec3(0.0, -sin(pitch), cos(pitch)));\n    mat3 T = mat3(vec3(cos(roll), 0.0, sin(roll)), vec3(0.0, 1.0, 0.0), vec3(-sin(roll), 0.0, cos(roll)));\n\n    return R * S * T;\n}\n\n/*\n// https://www.shadertoy.com/view/WttXWX \"Best\" Integer Hash by FabriceNeyret2\n// implementing Chris Wellons https://nullprogram.com/blog/2018/07/31/\nuint triple32(uint x)\n{\n    x ^= x >> 17;\n    x *= 0xed5ad4bbU;\n    x ^= x >> 11;\n    x *= 0xac4c1b51U;\n    x ^= x >> 15;\n    x *= 0x31848babU;\n    x ^= x >> 14;\n    return x;\n}\n\nuint uhash(ivec3 v)\n{\n    return triple32(uint(v.x) + triple32(uint(v.y) + triple32(uint(v.z))));\n}\n*/\nuint uhash(ivec3 f) // faster prng suggested by Fabrice\n{\n    uvec3  x = uvec3(f);\n    uint   k = 1103515245U;\n           x = ((x>>8U)^x.yzx)*k;\n           x = ((x>>8U)^x.yzx)*k;\n    return uint(((x>>8U)^x.yzx)*k);\n}\n\n#define DIST_MAX 1000.0\n\n// adapted from https://iquilezles.org/articles/intersectors\nvec2 box_intersection( in vec3 ro, in vec3 rd, vec3 boxSize )\n{\n    vec3 m = 1.0/rd;\n    vec3 n = m*ro;\n    vec3 k = abs(m)*boxSize;\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n    float tN = max( max( t1.x, t1.y ), t1.z );\n    float tF = min( min( t2.x, t2.y ), t2.z );\n    if( tN>tF || tF<0.0) return vec2(DIST_MAX);\n    return vec2( tN, tF );\n}\n\nvec3 box_normal( in vec3 ro, in vec3 rd, vec3 boxSize)\n{\n    vec3 m = 1.0/rd;\n    vec3 n = m*ro;\n    vec3 k = abs(m)*boxSize;\n    vec3 t1 = -n - k;\n    return -sign(rd)*step(t1.yzx,t1.xyz)*step(t1.zxy,t1.xyz);\n}\n\n// adapted from https://iquilezles.org/articles/intersectors\nvec2 sphere_intersection( in vec3 ro, in vec3 rd, float ra )\n{\n    float b = dot( ro, rd );\n    float c = dot( ro, ro ) - ra*ra;\n    float h = b*b - c;\n    if( h<0.0 ) return vec2(DIST_MAX); // no intersection\n    h = sqrt( h );\n    return vec2( -b-h, -b+h );\n}\n\nvec3 sphere_normal(vec3 ro)\n{\n    return normalize(ro);\n}\n\n#define PI 3.1415926\n\nfloat checker(vec3 p)\n{\n    //return step(0.5, length(1.0 - abs(2.0 * fract(p) - 1.0))); // dots\n    return step(0.0, sin(PI * p.x + PI/2.0)*sin(PI *p.y + PI/2.0)*sin(PI *p.z + PI/2.0));\n    //return step(0.0, sin(p.x)*sin(p.y)*sin(p.z));\n}\n\nmat2 rotate(float t)\n{\n    return mat2(vec2(cos(t), sin(t)), vec2(-sin(t), cos(t)));\n}\n\nfloat sdSphere(vec3 p, float d)\n{\n    return length(p) - d;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n    vec3 d = abs(p) - b;\n    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nbool get_voxel(ivec3 c)\n{\n    vec3 p = vec3(c) + vec3(0.5);\n    float d = max(-sdSphere(p, 7.5), sdBox(p, vec3(6.0)));\n    return d < 0.0;\n}\n\nvec4 combine(vec4 a, vec4 b)\n{\n    if(a.w < b.w) return a;\n    return b;\n}\n\n#define MAX_RAY_STEPS 64\n\n// returns normal & distance\nvec4 traverse(vec3 ray_pos, vec3 ray_dir)\n{\n    vec4 result = vec4(-ray_dir, DIST_MAX); // sky\n\n    // dda initialization (four lines) adapted from\n    // https://www.shadertoy.com/view/4dX3zl Branchless Voxel Raycasting by fb39ca4\n    // implementing https://lodev.org/cgtutor/raycasting.html\n    ivec3 voxel_pos = ivec3(floor(ray_pos)); // round down position to get tile position\n    vec3 delta_dist = 1.0 / abs(ray_dir); // reciprocal absolute ray direction\n    ivec3 ray_step = ivec3(sign(ray_dir)); // sign of ray direction\n    vec3 side_dist = (sign(ray_dir) * (vec3(voxel_pos) - ray_pos) + (sign(ray_dir) * 0.5) + 0.5) * delta_dist; // initial distances to nearest walls by dimension\n    bvec3 nearest = bvec3(0);\n\n    for(int i = 0; i < MAX_RAY_STEPS; i++)\n    {\n        // dda core (three lines) adapted from\n        // https://www.shadertoy.com/view/4dX3zl Branchless Voxel Raycasting by fb39ca4\n        // implementing https://lodev.org/cgtutor/raycasting.html\n        bvec3 nearest_next = lessThanEqual(side_dist.xyz, min(side_dist.yzx, side_dist.zxy)); // component is true if nearest wall in that dimension\n        vec3 side_dist_next = side_dist + vec3(nearest_next) * delta_dist; // sign of ray direction\n        ivec3 voxel_pos_next = voxel_pos + ivec3(vec3(nearest_next)) * ray_step; // step to next vpxel in direction of nearest wall\n\n        if(get_voxel(voxel_pos))\n        {\n            vec4 enter = vec4(vec3(nearest)*vec3(-ray_step), length(vec3(nearest) * (side_dist - delta_dist)));\n            vec4 leave = vec4(vec3(nearest_next)*vec3(-ray_step), length(vec3(nearest_next) * (side_dist_next - delta_dist)));\n            //return enter;\n\n            vec3 local = ray_pos - vec3(voxel_pos) - vec3(0.5);\n            vec2 I;\n            vec4 current = result;\n            if((uhash(voxel_pos) & 1u) != 0u/*choose subobject type*/)\n            {\n                I = box_intersection(local, ray_dir, vec3(0.5));\n                current = vec4(box_normal((ray_pos + ray_dir * I.x) - vec3(voxel_pos) - vec3(0.5), ray_dir, vec3(0.5)), I.x);\n            }\n            else\n            {\n                I = sphere_intersection(local, ray_dir, 0.5);\n                current = vec4(sphere_normal((ray_pos + ray_dir * I.x) - vec3(voxel_pos) - vec3(0.5)), I.x);\n            }\n\n            if(current.w > 0.0 && current.w < DIST_MAX)\n            {\n                current = current.w < enter.w ? enter : current.w > leave.w ? leave : current; // constrain sub-object to voxel\n                result = combine(result, current); // could just assign here but e.g. transparent objects would need this\n                break;\n            }\n        }\n\n        nearest = nearest_next;\n        side_dist = side_dist_next;\n        voxel_pos = voxel_pos_next;\n    }\n    \n    return result;\n}\n\nvoid mainImage(out vec4 o, in vec2 I)\n{\n    bool demo = all(lessThan(iMouse.xy, vec2(10.0)));\n    vec2 R = iResolution.xy;\n    I = (2.0 * I - R) / R.y; // concise pixel-position mapping thanks to Fabrice\n    float yaw = 2.0 * pi * float(iMouse.x) / float(R.x);\n    //float pitch = pi - pi * float(iMouse.y) / float(R.y);\n    float pitch = pi - pi / 2.0 * float(iMouse.y) / float(R.y);\n    //float pitch = -pi*1.0 - 0.5 * pi * float(iMouse.y) / float(R.y);\n    yaw = !demo ? yaw : 2.0 * pi * fract(iTime * 0.01);\n    pitch = !demo ? pitch : 1.0 * pi/2.0;\n\n    vec3 ray_pos = vec3(0.0, 0.0, -20.0);\n    vec3 ray_dir = vec3(I.x, I.y, 2.0); // NOTE: un-normalized direction appears to work fine here!\n    ray_dir = normalize(ray_dir); // normalize to facilitate later lighting computations\n\n    mat3 M = yaw_pitch_roll(yaw, pitch, 0.0);\n\n    ray_pos = M * ray_pos;\n    ray_dir = M * ray_dir;\n\n    vec3 color = vec3(1.0);\n    vec4 result = traverse(ray_pos, ray_dir);\n    if(result.w >= 0.0 && result.w < DIST_MAX)\n    {\n        vec3 normal = result.xyz;\n        float dist = result.w;\n\n        vec3 dst = ray_pos + ray_dir * dist;\n        //color *= texture(iChannel0, dst).xyz;\n        color *= vec3(0.5 + 0.5 * checker(dst));\n        //color *= 0.5 + 0.5 * normal; // debug normals\n\n        //vec3 light_dir = normalize(vec3(1, 2, 3));\n        vec3 light_dir = normalize(vec3(cos(iTime/5.0), sin(iTime/5.0), 1));\n        float diffuse = max(0.0, dot(light_dir, normal));\n        float lit = diffuse > 0.0 ? traverse(dst + normal * 0.001, light_dir).w < DIST_MAX ? 0.0 : 1.0 : 0.0;\n        float specular = pow(max(0.0, dot(normal, normalize(-ray_dir + light_dir))), 50.0);\n        vec3 ambient = vec3(0.1);\n        \n        color *= ambient + (2.0 * diffuse + 2.0*specular) * lit;\n        \n        //vec3 fog_color = vec3(0.25, 0.4, 0.5); // fog\n        vec3 fog_color = vec3(0); // darken with distance\n        color = mix(fog_color, color, exp(-pow(dist / 20.0, 2.0))); // fog for depth impression & to suppress flickering\n    }\n    else\n    {\n        color = vec3(0);\n    }\n\n    color = tanh(color); // roll-off / soft-clamp overly bright colors\n    o = vec4(sqrt(color), 1);\n}\n","name":"Image","description":"","type":"image"}]}