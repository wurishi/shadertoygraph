{"ver":"0.1","info":{"id":"XXB3DK","date":"1708866930","viewed":333,"name":"Kuramoto model - using cos +golf","username":"FabriceNeyret2","description":"variant + golfing 966 chars \"Kuramoto model\" by zenzicubic. https://shadertoy.com/view/lXS3Wy\n original is using sin in BuffA:6 , while I use cos â†’ huge difference in the look !","likes":10,"published":3,"flags":32,"usePreview":0,"tags":["kuramoto","coupling"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// variant + golfing 966 chars \"Kuramoto model\" by zenzicubic. https://shadertoy.com/view/lXS3Wy\n// The Kuramoto model of coupled oscillators, inspired by https://www.complexity-explorables.org/explorables/spin-wheels/\n\nvoid mainImage(out vec4 O, vec2 U) {\n    O = .5 + .5 * cos(  T(U/4.) //  texture(iChannel0,U/4./iResolution.xy).x \n                      + vec4(0, .628, 1.257, 0));\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage(out vec4 O, vec2 U) {  \n    float t = T(U), d;\n    \n    for(int k; k<9; k++ ) { // sum neighborhood, weigth = .5 in diags\n        vec2 D = vec2(k%3,k/3)-1.;\n        d += cos( T(U + D * (.5+.5*mod(D.x+D.y,2.)) ) - t );\n    }     // ^sin, in the original Kuramoto model \n    \n    O.x = iFrame < 1\n             ? 6.28 * fract(1e4*sin(dot(U,vec2(73,-37)))) // init = rand\n          // : mod( t + .1 * (d * .05 + .5), 6.28 );\n             :      t + .1 * (d * .05 + .5);\n                      // DT  COUPLING  SPEED         \n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define T(p) texelFetch(iChannel0, ivec2(p), 0).x\n","name":"Common","description":"","type":"common"}]}