{"ver":"0.1","info":{"id":"wtKGW1","date":"1578860862","viewed":1877,"name":"Physarum Circular","username":"michael0884","description":"Using Voronoi particle tracking to simulate the dynamics of a slime mold. Use mouse to change parameters.","likes":56,"published":3,"flags":32,"usePreview":0,"tags":["fast","particles","physarum","polycephalum"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 pos )\n{\n\tvec4 particle = texel(ch0, pos);\n    float distr = gauss(pos - particle.xy, prad);\n    vec4 pheromone = 2.*texel(ch1, pos);\n    fragColor = vec4(sin(pheromone.xyz*vec3(1,1.2,1.5)), 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//voronoi particle tracking \n//simulating the cells\n\n//loop the vector\nvec2 loop_d(vec2 pos)\n{\n\treturn mod(pos + size*0.5, size) - size*0.5;\n}\n\n//loop the space\nvec2 loop(vec2 pos)\n{\n\treturn mod(pos, size);\n}\n\n\nvoid Check(inout vec4 U, vec2 pos, vec2 dx)\n{\n    vec4 Unb = texel(ch0, loop(pos+dx));\n    //check if the stored neighbouring particle is closer to this position \n    if(length(loop_d(Unb.xy - pos)) < length(loop_d(U.xy - pos)))\n    {\n        U = Unb; //copy the particle info\n    }\n}\n\nvoid CheckRadius(inout vec4 U, vec2 pos, float r)\n{\n    Check(U, pos, vec2(-r,0));\n    Check(U, pos, vec2(r,0));\n    Check(U, pos, vec2(0,-r));\n    Check(U, pos, vec2(0,r));\n}\n\nvoid mainImage( out vec4 U, in vec2 pos )\n{\n    vec2 muv = iMouse.xy/size;\n    \n    if(length(muv.xy) >0.)\n    {\n    \tsdist *= muv.x;\n  \t\tsst *= muv.y; \n    }\n    else\n    {\n        sdist *= 0.8;\n  \t\tsst *= 0.05; \n    }\n   \n    //this pixel value\n    U = texel(ch0, pos);\n    \n    //check neighbours \n    CheckRadius(U, pos, 1.);\n    CheckRadius(U, pos, 2.);\n    CheckRadius(U, pos, 3.);\n    CheckRadius(U, pos, 4.);\n    CheckRadius(U, pos, 5.);\n   \n    U.xy = loop(U.xy);\n    \n    //cell cloning \n    if(length(U.xy - pos) > 10.)\n    \tU.xy += 1.*(hash22(pos)-0.5);\n\n    //sensors\n    vec2 sleft = U.xy + sdist*vec2(cos(U.z+sangl), sin(U.z+sangl));\n    vec2 sright = U.xy + sdist*vec2(cos(U.z-sangl), sin(U.z-sangl));\n    \n    float dangl = (pixel(ch1, sleft).x - pixel(ch1, sright).x);\n    U.z += dt*sst*tanh(3.*dangl);\n   \n    vec2 pvel = pspeed*vec2(cos(U.z), sin(U.z));\n    \n    //update the particle\n    U.xy += dt*pvel;\n    \n    U.xy = loop(U.xy);\n    \n    if(length(size*0.5 - U.xy) > 0.5*min(size.x, size.y))\n    {\n        U.xy = normalize(U.xy- 0.5*size)* 0.5*min(size.x, size.y)+0.5*size;\n        U.z += 3.14;\n    }\n    \n    \n    if(iFrame < 1)\n    {\n        U.xy = vec2(pdens*round(pos.x/pdens),pdens*round(pos.y/pdens));\n        U.zw = hash22(U.xy) - 0.5;\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"//simulation variables\n#define dt 0.25\n#define prad 1.4\n#define decay 0.15\n\n//cell speed\nfloat pspeed = 7.;\n\n//sensor distance \nfloat sdist = 50.;\n\n//sensor strenght\nfloat sst = 10.;\n\n//sensor angle\nfloat sangl = 0.2; //radians\n\n#define pdens 2.\n//definitions\n#define size iResolution.xy\n#define pixel(a, p) texture(a, p/vec2(textureSize(a,0)))\n#define texel(a, p) texelFetch(a, ivec2(p-0.5), 0)\n#define ch0 iChannel0\n#define ch1 iChannel1\n#define ch2 iChannel2\n#define ch3 iChannel3\n#define PI 3.14159265\n\n//hash functions\n//https://www.shadertoy.com/view/4djSRW\nfloat hash11(float p)\n{\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n\nvec2 hash21(float p)\n{\n\tvec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n\tp3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\n\n//functions\nfloat gauss(vec2 x, float r)\n{\n    return exp(-pow(length(x)/r,2.));\n}\n   \n\n//a rainbow colormap from Matlab\nfloat interpolate(float val, float y0, float x0, float y1, float x1) \n{\n    return (val-x0)*(y1-y0)/(x1-x0) + y0;\n}\n\nfloat base(float val) \n{\n    if ( val <= -0.75 ) return 0.0;\n    else if ( val <= -0.25 ) return interpolate( val, 0.0, -0.75, 1.0, -0.25 );\n    else if ( val <= 0.25 ) return 1.0;\n    else if ( val <= 0.75 ) return interpolate( val, 1.0, 0.25, 0.0, 0.75 );\n    else return 0.0;\n}\n\nvec3 jet_colormap(float v)\n{\n    return vec3(base(v - 0.5),base(v),base(v + 0.5));\n}\n\nvec3 jet_range(float v, float a, float b)\n{\n    return jet_colormap(2.*clamp((v-a)/(b-a),0.,1.) - 1.);\n}\n\n//Laplacian operator\nvec4 Laplace(sampler2D ch, vec2 p)\n{\n    vec3 dx = vec3(-1,0.,1);\n    return texel(ch, p+dx.xy)+texel(ch, p+dx.yx)+texel(ch, p+dx.zy)+texel(ch, p+dx.yz)-4.*texel(ch, p);\n}\n\n//Gradient\nvec2 Grad(sampler2D ch, vec2 p)\n{\n    vec3 dx = vec3(-1,0.,1);\n    return vec2(length(texel(ch, p+dx.zy)),length(texel(ch, p+dx.yz))) - length(texel(ch, p));\n}\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"//depositing and diffusing the pheromone trails \n\nvoid mainImage( out vec4 Q, in vec2 p )\n{\n    Q = texel(ch1, p);\n   \n    //diffusion equation\n    Q += dt*Laplace(ch1, p);\n    \n    vec4 particle = texel(ch0, p);\n    float distr = gauss(p - particle.xy, prad);\n    \n    //pheromone depositing\n    Q += dt*distr;\n        \n    //pheromone decay\n    Q += -dt*decay*Q;\n    \n    if(iFrame < 1) Q = vec4(0);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"void mainImage( out vec4 Q, in vec2 p )\n{\n    Q = texel(ch1, p);\n    \n    Q = 0.85*Q + 0.15*texel(ch0, p); \n    if(iFrame < 1) Q =vec4(0);\n}","name":"Buffer C","description":"","type":"buffer"}]}