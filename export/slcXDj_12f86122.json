{"ver":"0.1","info":{"id":"slcXDj","date":"1674940688","viewed":69,"name":"Hitomezash Stitch Cube 2","username":"David_Wiebe","description":"temp","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["temp"],"hasliked":0,"parentid":"7tdXzs","parentname":"Hitomezashi Stitch Pattern Cube"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int spacing = 10;\nconst int width = 2;\n\nfloat scale()\n{\n    float size = min(iResolution.x,iResolution.y);\n    return size/3.5;\n}\n\nbool isOnStitch(int point, int length, int offset)\n{\n    bool onStitch = false;\n    if( (point+offset)%(length*2)<=(length+width))\n    {\n        onStitch = true;\n    }\n    return onStitch;\n}\n\nbool isOnSpacing(int z)\n{\n    bool onSpacing = false;\n    if (z-spacing*int(z/spacing) <= width)\n    {\n        onSpacing = true;\n    }\n    return onSpacing;\n}\n\nfloat rand(int x)\n{\n    float y = fract(float(x) * .1031);\n    y *= y + 33.33;\n    y *= 2.0*y;\n    return fract(y);\n}\n\nint offsetValue(int spacing, int x, int b)\n{\n    int a = int(x/spacing);\n    float randPhase = 1000.0*rand(a);\n    float magnitude = cos(randPhase + float(a)*0.05 + 0.03*(iTime+float(b)/float(spacing)));\n    int isOffset = int(1.01 + magnitude);\n    return spacing*isOffset;\n}\n\n\nvec2 posInFace(vec2 pos, vec2 base, vec2 side1, vec2 side2,vec2 opposite)\n{\n    vec2 posInFace;\n    \n    float bslope1 = (opposite.y-side2.y)/(opposite.x-side2.x);\n    float bslope2 = (opposite.x-side1.x)/(opposite.y-side1.y);\n    float tslope1 = (base.y-side1.y)    /(base.x-side1.x);\n    float tslope2 = (base.x-side2.x)    /(base.y-side2.y);\n    \n    float bline1 = base.y +     (pos.x-base.x)*tslope1;\n    float bline2 = base.x +     (pos.y-base.y)*tslope2;\n    float tline1 = opposite.y + (pos.x-opposite.x)*bslope1;\n    float tline2 = opposite.x + (pos.y-opposite.y)*bslope2;\n    \n    float above1 = max((pos.y - bline1),(pos.y - tline1));\n    float above2 = max((pos.x - bline2),(pos.x - tline2));\n    float below1 = min((pos.y - tline1),(pos.y - bline1));  \n    float below2 = min((pos.x - tline2),(pos.x - bline2));\n    \n    if ((above1 > 0.0 && below1 < 0.0) && (above2 > 0.0 && below2 < 0.0))   \n    {\n        posInFace = vec2(above1/(tline1-bline1),above2/(tline2-bline2));\n    }\n    else\n    {\n        posInFace = vec2(0);\n    }\n    \n    return posInFace;\n}\n\n\n\n\nconst float y = 1.0/sqrt(2.0);\n\nfloat cos0() {return cos(iTime*0.2 + 0.0*1.5708);}\nfloat cos1() {return cos(iTime*0.2 + 1.0*1.5708);}\nfloat cos2() {return cos(iTime*0.2 + 2.0*1.5708);}\nfloat cos3() {return cos(iTime*0.2 + 3.0*1.5708);}\n\nvec3 p1() {return vec3 (cos3(), y, cos0());}\nvec3 p2() {return vec3 (cos0(), y, cos1());}\nvec3 p3() {return vec3 (cos1(), y, cos2());}\nvec3 p4() {return vec3 (cos2(), y, cos3());}\nvec3 p5() {return vec3 (cos3(),-y, cos0());}\nvec3 p6() {return vec3 (cos0(),-y, cos1());}\nvec3 p7() {return vec3 (cos1(),-y, cos2());}\nvec3 p8() {return vec3 (cos2(),-y, cos3());}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 normalCoord = fragCoord.xy - (iResolution.xy/vec2(2,2));\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec3 col;\n    \n    float camy = 2.0;\n    \n    vec2 t1 = vec2(scale()*(p1().x)*(p1().z/camy-camy), scale()*(p1().y)*(p1().z/camy-camy));\n    vec2 t2 = vec2(scale()*(p2().x)*(p2().z/camy-camy), scale()*(p2().y)*(p2().z/camy-camy));\n    vec2 t3 = vec2(scale()*(p3().x)*(p3().z/camy-camy), scale()*(p3().y)*(p3().z/camy-camy));\n    vec2 t4 = vec2(scale()*(p4().x)*(p4().z/camy-camy), scale()*(p4().y)*(p4().z/camy-camy));\n   \n    vec2 b1 = vec2(scale()*(p5().x)*(p5().z/camy-camy), scale()*(p5().y)*(p5().z/camy-camy));\n    vec2 b2 = vec2(scale()*(p6().x)*(p6().z/camy-camy), scale()*(p6().y)*(p6().z/camy-camy));\n    vec2 b3 = vec2(scale()*(p7().x)*(p7().z/camy-camy), scale()*(p7().y)*(p7().z/camy-camy));\n    vec2 b4 = vec2(scale()*(p8().x)*(p8().z/camy-camy), scale()*(p8().y)*(p8().z/camy-camy));\n        \n    vec2 posInFace1   = posInFace(normalCoord, t2,t3,b2,b3);\n    vec2 posInFace2   = posInFace(normalCoord, t1,t2,b1,b2);\n    vec2 posInFace3   = posInFace(normalCoord, t4,t1,b4,b1);\n    vec2 posInFace4   = posInFace(normalCoord, t3,t4,b3,b4);\n    \n    vec2 activeFace = vec2(0);    \n    \n    if (false)\n    {col = vec3(0.5);}\n    \n    else if (posInFace1 != vec2(0) && (b2.x < b3.x))\n    {activeFace = posInFace1 + vec2(100);}\n    \n    else if (posInFace2 != vec2(0) && (b1.x < b2.x))\n    {activeFace = posInFace2 + vec2(200);}\n    \n    else if (posInFace3 != vec2(0) && (b4.x < b1.x))\n    {activeFace = posInFace3 + vec2(300);}\n    \n    else if (posInFace4 != vec2(0))\n    {activeFace = posInFace4 + vec2(400);}\n    \n    if (activeFace != vec2(0))\n    {   \n        int height = int(iResolution.x);\n        int width  = int(iResolution.y);\n    \n        int X = int(activeFace.x*scale());\n        int Y = int(activeFace.y*scale());\n    \n        bool setColour = false;\n    \n        int offsetX = offsetValue(spacing, Y, X);\n        int offsetY = offsetValue(spacing, X, Y + 78);\n    \n        if (isOnSpacing(X) && isOnStitch(Y,spacing,offsetY))\n        {setColour = true;}\n   \n        if (isOnSpacing(Y) && isOnStitch(X,spacing,offsetX))\n        {setColour = true;}\n        if (setColour)\n        {\n            col = 0.5 + 0.5*cos(iTime*2.0+normalCoord.xyx/iResolution.xyx+vec3(0,2,4));\n        }\n        else\n        {\n            col = vec3(0);\n        }\n    }\n    else\n    {\n        col = vec3(0);\n    }    \n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}