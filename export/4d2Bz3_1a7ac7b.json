{"ver":"0.1","info":{"id":"4d2Bz3","date":"1501455738","viewed":119,"name":"Simple move squares pattern","username":"Keram","description":"My first public shader. The code size is exactly 8 full bit address (255 chars) of memory. :)","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d","pattern"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code from Keram (255 chars, old):\n\n// s = checker size\n#define s 64.\n\nbool P(vec2 p) {\n\tvec2 d = mod(p, s *2.);\n\treturn (d.x < s) ^^ (d.y < s);\n}\n\nvoid mainImage(out vec4 O, in vec2 U) { \n    vec3 c = vec3(0);        // background black\n\n    float t = (iTime +.5) *64.;  // +.5 Needed to be visible for 0 sec launch (startup).\n    vec2 m = vec2(U.x -t, U.y +t);\n\n\n    if ( P(vec2(m.x, U.y)) )\n\t\tc = vec3(.9, 0, 0);  // red pattern (.9 is enough for lighting.) :D\n\n    if ( P(vec2(U.x, m.y)) )\n\t\tc = vec3(0, 0, .9);  // blue pat.\n\n    O = vec4(c, 1);\n}\n\n\n/*\n// Better solution from FabriceNeyret2 (189 chars):\n// See in comment ( https://www.shadertoy.com/view/4d2Bz3 )\n#define s 64.\n\nbool P(vec2 p) {\n\tp = mod(p, s *2.) -s;\n\treturn p.x*p.y < 0.;\n}\n\nvoid mainImage(out vec4 O, vec2 U) {\n\n    float t = (iTime +.5) *64.; \n    \n\tO =   P(U+vec2( 0,t)) ? vec4( 0, 0, .9,1)\n        : P(U+vec2(-t,0)) ? vec4(.9, 0,  0,1)\n        : O-O;\n}\n*/","name":"Image","description":"","type":"image"}]}