{"ver":"0.1","info":{"id":"XtdcWl","date":"1534713920","viewed":526,"name":"XOR3D","username":"Kali","description":"3D fractal inspired by bitwise operations in https://www.shadertoy.com/view/XlcyD8 - No DE, fixed step raymarching with random first step and some steps of binary search after hitting. Also a depth-buffer shading experiment. Mouse enabled.","likes":33,"published":1,"flags":32,"usePreview":0,"tags":["fractal","bitwise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 light_dir=normalize(vec3(0.,0.,1.));\nfloat depth;\n\nfloat buffer(vec2 p) {\n    return texture(iChannel0,p/iResolution.xy).r;\n}\n\n\nvec3 normal(vec2 p) {\n    vec2 d=vec2(0.,1.);\n    vec3 s=vec3(iResolution.xy,1.);\n    vec3 t=vec3(p-d.xy,buffer(p-d.xy))/s;\n    vec3 l=vec3(p-d.yx,buffer(p-d.yx))/s;\n    depth=buffer(p);\n    vec3 c=vec3(p,depth)/s;\n    vec3 n=normalize(cross(l-c,t-c));\n    return n;\n}\n\n\nvec3 shade(vec2 p) {\n\tvec3 n=normal(p);\n    float dif=.2+smoothstep(0.3,1.,dot(light_dir,n))*.85;\n    float fade=.2+pow(max(0.,1.-depth),2.)*.8;\n    float bk=mod(p.y,3.)*.15;\n    vec3 bk_col=vec3(bk,bk*bk,bk*bk*bk)*.8;\n    vec3 dif_col=dif*.4+vec3(dif*dif*dif,dif*dif,dif)*.6;\n    float glo=pow(depth,1.5)*depth*.9;\n    vec3 c = dif_col*fade+bk_col+glo;\n\treturn c;\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv=(fragCoord/iResolution.xy-.5)*2.;\n    vec3 c=shade(fragCoord)*2.;\n    vec2 d=vec2(0.,1.2);\n    c+=shade(fragCoord+d.xy);\n    c+=shade(fragCoord+d.yy);\n    c+=shade(fragCoord+d.yx);\n   \n    c*=1.-length(uv*uv*uv)*.3*(.5+depth);\n    c/=5.;\n    fragColor = vec4(c*vec3(1.05,.97,.84),1.);\n    \n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define steps 800\n#define max_dist 2.7\n#define bs_steps 20\n\n\nfloat step_size;\nfloat f;\n\nfloat rnd(vec2 p) {\n    float t=mod(iTime,10.);\n    return fract(sin(dot(p+t,vec2(2132.342,4323.343)))*1325.2158);\n}\n\nmat2 rot2D(float a) {\n  float s = sin(a);\n  float c = cos(a);\n  return mat2(c, s, -s, c);\n}\n\nmat3 lookat(vec3 fw, vec3 up) {\n  fw = normalize(fw);\n  vec3 rt = normalize(cross(fw, normalize(up)));\n  return mat3(rt, cross(rt, fw), fw);\n}\n\nfloat xor3D(vec3 p) {\n    p=abs(p);\n    float d=100.;\n    ivec3 ip=ivec3(p*d);\n    float c = float(ip.x^ip.y^ip.z)/d;\n    return step(f,c);\n}\n\nfloat bsearch(vec3 from, vec3 dir, float td) {\n\tfloat st=step_size;\n    td-=st;\n    for (int i=0; i<bs_steps; i++) {\n        vec3 p=from+dir*td;\n    \tfloat d=xor3D(p)-.5;\n\t\tst*=d;\n       \ttd+=st;\n    }    \n    return td;  \n}\n\nfloat march(vec3 from, vec3 dir) {\n\tstep_size=max_dist/float(steps);\n    float td=rnd(dir.xy)*step_size;\n    for (int i=0; i<steps; i++) {\n        td+=step_size;\n\t    vec3 p=from+dir*td;\n    \tfloat d=xor3D(p);\n        if (d<1. || td>max_dist) break;\n    }\n    td=bsearch(from, dir, td);\n    return td/max_dist;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy - .5;\n\tuv.x*=iResolution.x/iResolution.y;\n    vec3 dir = normalize(vec3(uv,.7));\n    float mclick=1.-step(0.01,iMouse.z);\n    vec2 m=iMouse.xy/iResolution.xy*(1.-mclick);\n    float t=iTime*.2*mclick;\n    float z=abs(1.-mod(iTime*.03,2.));\n    f=.01+smoothstep(0.4,1.,z)*.4*mclick+m.x;\n    vec3 from = vec3(sin(iTime*.3)*(1.-mclick),sin(t)*1.5,.5+cos(t)*.4+m.y*1.5);\n \tfrom.xz*=rot2D(t-f*3.*mclick);\n    dir=lookat(-from,vec3(0.,1.,0.))*dir;\n\tfloat d=march(from, dir);\n    fragColor = vec4(d);\n}","name":"Buffer A","description":"","type":"buffer"}]}