{"ver":"0.1","info":{"id":"M3c3zl","date":"1716884368","viewed":170,"name":"Vertex shader","username":"VozDuh","description":"A shader for prototype a vertex shaders in the browser.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["mesh","vertex"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"bool triangleContains(vec2 a, vec2 b, vec2 c, vec2 o) {\n    float det = (b.x - a.x) * (c.y - a.y) - (b.y - a.y) * (c.x - a.x);\n\n    return  det * ((b.x - a.x) * (o.y - a.y) - (b.y - a.y) * (o.x - a.x)) >= 0. &&\n            det * ((c.x - b.x) * (o.y - b.y) - (c.y - b.y) * (o.x - b.x)) >= 0. &&\n            det * ((a.x - c.x) * (o.y - c.y) - (a.y - c.y) * (o.x - c.x)) >= 0.;\n}\n\nconst float pi = 3.14;\n\nstruct VertexInput\n{\n    vec2 pos, uv;\n    vec4 col;\n};\n\nstruct VertexOutput\n{\n    vec2 pos, uv;\n    vec4 col;\n};\n\n//--------------------------------------------\n//--------------------------------------------\n// YOUR SHADER CODE HERE:\n//--------------------------------------------\n\nfloat rotation;\nvec2 position;\nvec2 offset;\n\nVertexOutput vertex(VertexInput vi)\n{\n    VertexOutput vo;\n    \n    float c = cos(rotation);\n    float s = sin(rotation);\n    vi.pos += offset;\n    vo.pos = position + vec2(\n        vi.pos.x * c + vi.pos.y * s,\n        vi.pos.x * -s + vi.pos.y * c);\n\n    vo.uv = vi.uv;\n    vo.col = vi.col;\n\n    return vo;\n}\n\nvec4 fragment(VertexOutput vi, sampler2D tex)\n{\n    return texture(tex, vi.uv) * vi.col;\n}\n\n//--------------------------------------------\n// END OF YOUR CODE.\n//--------------------------------------------\n//--------------------------------------------\n\nvec3 getUVW(vec2 a, vec2 b, vec2 c, vec2 o)\n{\n    vec2 d = c - a;\n    vec2 e = b - a;\n    vec2 p = o - a;\n\n    float cc = dot(e, e);\n    float bc = dot(d, e);\n    float pc = dot(e, p);\n    float bb = dot(d, d);\n    float pb = dot(d, p);\n\n    float denom = cc*bb - bc*bc;\n    float u = (bb*pc - bc*pb) / denom;\n    float v = (cc*pb - bc*pc) / denom;\n    return vec3(u, v, 1.0f - u - v);\n}\n\nvec3 drawTriangle(VertexInput a, VertexInput b, VertexInput c, vec2 coord, vec3 col, sampler2D tex)\n{\n    VertexOutput ao = vertex(a);\n    VertexOutput bo = vertex(b);\n    VertexOutput co = vertex(c);\n    VertexOutput i;\n    bool inside = triangleContains(ao.pos, bo.pos, co.pos, coord);\n    if (inside)\n    {\n        vec3 uvw = getUVW(ao.pos, bo.pos, co.pos, coord);\n        i.uv = bo.uv * uvw.x + co.uv * uvw.y + ao.uv * uvw.z;\n        i.col = bo.col * uvw.x + co.col * uvw.y + ao.col * uvw.z;\n        i.pos = coord;\n        vec4 tmp = fragment(i, tex);\n        if (tmp.w == 1.)\n        {\n            return tmp.xyz;\n        }\n        else if (tmp.w == 0.)\n        {\n            return col;\n        }\n        else\n        {\n            return col * (1. - tmp.w) + tmp.xyz * tmp.w;\n        }\n    }\n    return col;\n}\n\n//--------------------------------------------\n//--------------------------------------------\n// TRIANGLES DRAW CODE:\n//--------------------------------------------\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    VertexInput backa;\n    backa.pos = vec2(0);\n    backa.uv = vec2(0);\n    backa.col = vec4(1);\n    VertexInput backb;\n    backb.pos = vec2(0, 400);\n    backb.uv = vec2(0, 1);\n    backb.col = vec4(1);\n    VertexInput backc;\n    backc.pos = vec2(400, 0);\n    backc.uv = vec2(1, 0);\n    backc.col = vec4(1);\n    VertexInput backd;\n    backd.pos = vec2(400);\n    backd.uv = vec2(1);\n    backd.col = vec4(1);\n\n    VertexInput a;\n    a.pos = vec2(-60);\n    a.uv = vec2(0);\n    a.col = vec4(1, 1, 1, .75);\n    VertexInput b;\n    b.pos = vec2(-60, 60);\n    b.uv = vec2(0, 0.5);\n    b.col = vec4(1, 1, 1, .75);\n    VertexInput c;\n    c.pos = vec2(60, -60);\n    c.uv = vec2(0.5, 0);\n    c.col = vec4(1, 1, 1, .75);\n    VertexInput d;\n    d.pos = vec2(60);\n    d.uv = vec2(0.5);\n    d.col = vec4(1, 1, 1, .75);\n    \n    vec3 col = vec3(0);\n    \n    rotation = 0.;\n    position = vec2(0.);\n    offset = vec2(0.);\n    \n    col = drawTriangle(backb, backa, backc, fragCoord, col, iChannel1);\n    col = drawTriangle(backc, backd, backb, fragCoord, col, iChannel1);\n    \n    rotation = iTime/2.;\n    position = vec2(200);\n    offset = vec2(0);\n    \n    col = drawTriangle(b, a, c, fragCoord, col, iChannel0);\n    col = drawTriangle(c, d, b, fragCoord, col, iChannel0);\n\n    fragColor = vec4(col, 1);\n}\n\n\n// The end, maybe you can understand it without the comment...","name":"Image","description":"","type":"image"}]}