{"ver":"0.1","info":{"id":"XcScRW","date":"1721940233","viewed":51,"name":"spherical leafs","username":"jt","description":"Sphere through four points, where xor of halfspaces through triples defines leafs.\nSDF not exact at leaf circles (TODO: use rings to make leaf edges exact)\nFinally an application for [url=https://www.shadertoy.com/view/ssG3WK]XOR SDF[/url] operator :)","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["sphere","circle","tetrahedron","leaf","xor","spherical","four","three","points","point","circular","plant","circum","circumsphere","leafs"],"hasliked":0,"parentid":"lffyDs","parentname":"four points sphere"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/XcScRW spherical leafs, 2024 by jt\n// based on https://www.shadertoy.com/view/lffyDs four points sphere\n// combined with https://www.shadertoy.com/view/4clcWl three points ring\n// using https://www.shadertoy.com/view/ssG3WK XOR SDF\n\n// Sphere through four points, where xor of halfspaces through triples defines leafs.\n\n// NOTE: SDF not exact at leaf circles (TODO: use rings to make leaf edges exact)\n\n// Finally an application for https://www.shadertoy.com/view/ssG3WK]XOR SDF operator :-)\n\n// tags: sphere, circle, tetrahedron, leaf, xor, spherical, four, three, points, point, circular, plant, circum, circumsphere, leafs\n\n// The MIT License\n// Copyright (c) 2024 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n#define EPSILON 0.001\n#define DIST_MAX 50.0\n#define ITER_MAX 200u\n\n#define pi 3.1415926\n\nmat3 yaw_pitch_roll(float yaw, float pitch, float roll)\n{\n    mat3 R = mat3(vec3(cos(yaw), sin(yaw), 0.0), vec3(-sin(yaw), cos(yaw), 0.0), vec3(0.0, 0.0, 1.0));\n    mat3 S = mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, cos(pitch), sin(pitch)), vec3(0.0, -sin(pitch), cos(pitch)));\n    mat3 T = mat3(vec3(cos(roll), 0.0, sin(roll)), vec3(0.0, 1.0, 0.0), vec3(-sin(roll), 0.0, cos(roll)));\n\n    return R * S * T;\n}\n\nvec4 combine(vec4 a, vec4 b)\n{\n    return a.w < b.w ? a : b;\n}\n\nfloat sphere(vec3 p, float r)\n{\n    return length(p) - r;\n}\n\nvec4 three_points_circumsphere(vec3 a, vec3 b, vec3 c) // https://www.shadertoy.com/view/4clcWl three points ring\n{ // variant by mla\n    b -= a; c -= a;\n    float b2 = dot(b,b), c2 = dot(c,c), bc = dot(b,c);\n    vec2 p = 0.5*inverse(mat2(b2,bc,bc,c2))*vec2(b2,c2);\n    vec3 t = mat2x3(b,c)*p;\n    return vec4(t+a,length(t));\n}\n\nvec4 sphere_through_four_points(vec3 a, vec3 b, vec3 c, vec3 d) // https://www.shadertoy.com/view/lffyDs four points sphere, 2024 by jt\n{\n    a -= d;\n    b -= d;\n    c -= d;\n\n    vec3 s =\n        vec3\n        (\n            dot(a,a)*cross(b,c)\n            +\n            dot(b,b)*cross(c,a)\n            +\n            dot(c,c)*cross(a,b)\n        )\n        /\n        //(2.0 * determinant(mat3(a,b,c)));\n        (2.0 * dot(a,cross(b,c)));\n\n    return vec4(s + d, distance(a, s));\n}\n\nfloat sphere(vec3 p, vec3 a, vec3 b, vec3 c, vec3 d) // https://www.shadertoy.com/view/lffyDs four points sphere, 2024 by jt\n{\n    vec4 s = sphere_through_four_points(a,b,c,d);\n    return sphere(p-s.xyz, s.w);\n}\n\nfloat halfspace(vec3 p, vec3 n)\n{\n    return dot(p,normalize(n));\n}\n\nfloat line(vec3 p, vec3 a, vec3 b) // https://iquilezles.org/articles/distfunctions/\n{\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp(dot(pa,ba)/dot(ba,ba), 0.0, 1.0);\n    return length(pa - ba*h);\n}\n\nfloat xor(float a, float b) // https://www.shadertoy.com/view/ssG3WK XOR SDF (jt)\n{\n    return max(min(a, b), -max(a, b));\n}\n\nfloat leafs(vec3 p, vec3 a, vec3 b, vec3 c, vec3 d) // https://www.shadertoy.com/view/XcScRW spherical leafs (jt)\n{\n    vec4 sabc = three_points_circumsphere(a,b,c);\n    vec3 nabc = normalize(cross(a-b,c-b));\n\n    vec4 sabd = three_points_circumsphere(a,b,d);\n    vec3 nabd = normalize(cross(a-b,d-b));\n\n    vec4 sacd = three_points_circumsphere(a,c,d);\n    vec3 nacd = normalize(cross(a-c,d-c));\n\n    vec4 sbcd = three_points_circumsphere(b,c,d);\n    vec3 nbcd = normalize(cross(b-c,d-c));\n\n    return\n        max\n        (\n            max\n            (\n                -xor\n                (\n                    xor\n                    (\n                        halfspace(p-sabc.xyz,nabc),\n                        halfspace(p-sabd.xyz,nabd)\n                    ),\n                    halfspace(p-sacd.xyz,nacd)\n                ),\n                abs(sphere(p,a,b,c,d))\n            ),\n            -halfspace(p-sbcd.xyz,nbcd)\n        );\n}\n\nvec4 map(vec3 p)\n{\n    vec3 a = vec3(+1,+1,-1);\n    vec3 b = vec3(+1,-1,+1);\n    vec3 c = vec3(-1,+1,+1);\n    vec3 d = vec3(-1,-1,-1);\n    \n    if(true) // some movement\n    {\n        vec3 bcd = (b+c+d)/3.0;\n        float r = mix(0.0,0.8,0.5*cos(iTime/2.0));\n        float s = mix(0.0,0.8,0.5*cos(iTime/3.0));\n        float t = mix(0.0,0.8,0.5*cos(iTime/5.0));\n        b = mix(b,bcd,r);\n        c = mix(c,bcd,s);\n        d = mix(d,bcd,t);\n    }\n\n    return\n        vec4\n        (\n            vec3(0.25,1,0.1),\n            //min\n            (\n                leafs(p, a, b, c, d)\n                -0.01//,\n            //    line(p,a,a-nbcd*sqrt(3.0)) - 0.02\n            )\n        );\n}\n\n// https://iquilezles.org/articles/normalsSDF tetrahedron normals\nvec3 normal(vec3 p)\n{\n    const float h = EPSILON;\n    const vec2 k = vec2(1,-1);\n    return\n        normalize\n        (\n            k.xyy * map(p + k.xyy*h).w\n            +\n            k.yyx * map(p + k.yyx*h).w\n            +\n            k.yxy * map(p + k.yxy*h).w\n            +\n            k.xxx * map(p + k.xxx*h).w\n        );\n}\n\nvec4 trace(vec3 ro, vec3 rd, float t0, float t1) // pass on running out of iterations\n{\n    // NOTE: Limited number of iterations to avoid stalling\n    //       when ray passes closely (just above EPSILON)\n    //       in parallel to a surface.\n    uint i;\n    vec4 h = vec4(0);\n    float t;\n    for(t = t0, i = 0u; t < t1 && i < ITER_MAX; i++)\n    {\n        h = map(ro + rd * t);\n        if(h.w < EPSILON)\n            return vec4(h.xyz,t);\n        t += h.w;\n    }\n\n    return vec4(h.xyz,t); // stop on running out of iterations\n    //return vec4(0,0,0,t1); // pass on running out of iterations\n}\n\n// NOTE: Don't forget to add +normal*EPSILON to the starting position\n//       to avoid artifacts caused by getting stuck in the surface\n//       due to starting at distance < EPSILON from the surface.\n//       (normal could be calculated here but that would most likely be redundant)\nfloat shadow(vec3 ro, vec3 rd, float t0, float t1)\n{\n    return trace(ro, rd, t0, t1).w < t1 ? 0.0 : 1.0;\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat softshadow(vec3 ro, in vec3 rd, float t0, float t1, float k)\n{\n    float res = 1.0;\n    float ph = 1e20;\n    uint i;\n    float t;\n    for(t = t0, i = 0u; t < t1 && i < ITER_MAX; i++)\n    {\n        float h = map(ro + rd*t).w;\n        if( h < EPSILON )\n            return 0.0;\n        float y = h*h/(2.0*ph);\n        float d = sqrt(h*h-y*y);\n        res = min( res, k*d/max(0.0,t-y) );\n        ph = h;\n        t += h;\n    }\n    return res;\n}\n\n// https://www.shadertoy.com/view/Xds3zN raymarching primitives\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n    float occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.01 + 0.12*float(i)/4.0;\n        float d = map( pos + h*nor ).w;\n        occ += (h-d)*sca;\n        sca *= 0.95;\n        if( occ>0.35 ) break;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 ) ;\n}\n\nvoid mainImage(out vec4 o, vec2 I)\n{\n    bool demo = all(lessThan(iMouse.xy, vec2(10.0)));\n    vec2 R = iResolution.xy;\n    I = (2.0 * I - R) / R.y; // concise scaling thanks to Fabrice\n    float yaw = 2.0 * pi * float(iMouse.x) / float(R.x);\n    float pitch = pi - pi / 2.0 * float(iMouse.y) / float(R.y);\n    yaw = !demo ? yaw : 2.0 * pi * fract(iTime * 0.01);\n    pitch = !demo ? pitch : 4.0/3.0 * pi / 2.0;\n\n    vec3 ro = vec3(0.0, 0.0,-5.0);\n    vec3 rd = normalize(vec3(I.xy, 2.5)); // NOTE: omitting normalization results in clipped edges artifact\n\n    mat3 M = yaw_pitch_roll(yaw, pitch, 0.0);\n    ro = M * ro;\n    rd = M * rd;\n\n    //vec3 lightdir = normalize(vec3(1.0, 1.0, 1.0));\n    //vec3 lightdir = normalize(vec3(-1.0,-2.0, 3.0));\n    vec3 lightdir = normalize(vec3(-2.0,-1.0, 3.0));\n\n    vec4 result = trace(ro, rd, 0.0, DIST_MAX);\n    vec3 color = result.xyz;\n    float dist = result.w;\n    if(dist < DIST_MAX)\n    {\n        vec3 dst = ro + rd * dist;\n        vec3 n = normal(dst);\n\n        //color = n * 0.5 + 0.5;\n\n        vec3 ambient = vec3(0.05);\n        float brightness = max(dot(lightdir, n), 0.0) * 2.0;\n        if(brightness > 0.0)\n            brightness *= shadow(ro + rd * dist + n * 0.01, lightdir, 0.0, DIST_MAX);\n            //brightness *= softshadow(ro + rd * dist + n * 0.01, lightdir, 0.0, DIST_MAX, 25.0);\n        color *= (ambient * calcAO(dst, n)) + brightness;\n\n        if(brightness > 0.0)\n        {\n            float specular = pow(max(0.0, dot(n, normalize(-rd + lightdir))), 250.0);\n            color += specular;\n        }\n\n        vec3 fog_color = vec3(0);\n        color = mix(fog_color, vec3(color), exp(-pow(dist/20.0, 2.0))); // fog\n    }\n    else\n    {\n        color *= 0.0;\n    }\n\n    color = tanh(color); // roll-off overly bright colors\n    color = sqrt(color); // approximate gamma\n\n    //color += hash32(I*123.0)/255.0; // dither to remove banding in the background\n\n    o = vec4(color, 1);\n}\n","name":"Image","description":"","type":"image"}]}