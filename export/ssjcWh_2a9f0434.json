{"ver":"0.1","info":{"id":"ssjcWh","date":"1643464038","viewed":219,"name":"Triangle-Shaped Pixelation","username":"AntonioNoack","description":"This is a shader that transforms uv coordinates, so they can be used for triangle pixelation.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["triangles","pixelation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec2 pixelating = iResolution.yx / iResolution.y * mix(0.03, 0.005, pow(cos(iTime), 2.0));\n\n    uv = (uv - 0.5) / pixelating;\n    vec2 uvTriangleSpace = mat2(1.0, 1.0, 0.6, -0.6) * uv;\n    uvTriangleSpace = fract(uvTriangleSpace);\n    if(uvTriangleSpace.x > uvTriangleSpace.y) uvTriangleSpace.x -= 0.5;\n    uv -= mat2(0.5, 0.833, 0.5, -0.833) * uvTriangleSpace + vec2(-0.25, 0.25);\n\n    fragColor = texture(iChannel0, clamp(uv * pixelating + 0.5, 0.01, 0.99));\n}","name":"Image","description":"","type":"image"}]}