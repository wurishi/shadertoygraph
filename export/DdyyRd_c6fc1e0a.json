{"ver":"0.1","info":{"id":"DdyyRd","date":"1696521673","viewed":18,"name":"_Raymarching sphere sculpture","username":"hyrofumi","description":"_Raymarching sphere sculpture","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarchingspheresculpture"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGRn","filepath":"/media/a/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg","previewfilepath":"/media/ap/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://reactjsexample.com/how-raymarching-handles-color-and-noise-with-react/\n\nvec3 twistY(vec3 p, float power){\n  float s = sin(power * p.y);\n  float c = cos(power * p.y);\n  mat3 m = mat3(\n        c, 0.0,  -s,\n      0.0, 1.0, 0.0,\n        s, 0.0,   c\n  );\n  return m * p;\n}\n\nmat4 rotationMatrix(vec3 axis, float angle) {\n  axis = normalize(axis);\n  float s = sin(angle);\n  float c = cos(angle);\n  float oc = 1.0 - c;\n  \n  return mat4(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,\n              oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,\n              oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,\n              0.0,                                0.0,                                0.0,                                1.0);\n}\n\nvec3 rotate(vec3 v, vec3 axis, float angle) {\n  mat4 m = rotationMatrix(axis, angle);\n  return (m * vec4(v, 1.0)).xyz;\n}\n\nvec3 rgb2hsv(vec3 c) {\n  vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n  vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n  vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n  float d = q.x - min(q.w, q.y);\n  float e = 1.0e-10;\n  return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\nvec3 hsv2rgb(vec3 c) {\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvec2 matcap(vec3 eye, vec3 normal) {\n  vec3 reflected = reflect(eye, normal);\n  float m = 2.8284271247461903 * sqrt( reflected.z+1.0 );\n  return reflected.xy / m + 0.5;\n}\n\nfloat fresnel(vec3 eye, vec3 normal, float scale) {\n  return pow(1.0 + dot(eye, normal), scale);\n}\n\n// GetDist\nfloat GetDist(vec3 p) {\n    float d = 0.;\n    vec3 rp = rotate(p, vec3(0.0, 1.0, 0.0), -iTime * 0.5);\n    vec3 tp = twistY(rp, PI * 0.5);\n    \n    float sphere = sphereSDF(p, 1.0) + noise(p*2.025 + iTime*0.25) * 0.125;\n    float sphere2 = roundBoxSDF(tp, vec3(.5, .5, .5), .1);\n    \n    float distortion = 5.;\n    float g = dot(sin(p), cos(tp * distortion)) / distortion;\n    float dist = smoothstep(0.0, 1.0, length(p));\n    \n    float shape = smoothDifferenceSDF(g - 0.005 * pow(dist, 1.5), sphere, 0.03);\n    float shape2 = smoothDifferenceSDF(-g - 0.13 * pow(dist, 1.0), sphere - 0.2, 0.03);\n    d = smoothUnionSDF(shape, shape2, 0.05);\n   \n    // d = smoothDifferenceSDF(d, sphereSDF(p, 1.5 + abs(sin(iTime))), 0.75);\n    \n    return d;\n}\n\n// RayMarch\nDist RayMarch(vec3 ro,vec3 rd)\n{\n    float dO = 0.;//Distane Origin\n    float ds = 0.;\n    vec3 p;\n    vec3 pp;\n    for(int i=0; i<MAX_STEPS; i++)\n    {\n        p = ro + rd * dO;\n        ds = GetDist(p);// ds is Distance Scene\n        if(dO > MAX_DIST || ds < SURF_DIST)\n        break;\n        dO += ds;\n        pp = p;\n    }\n    Dist dist;\n    dist.d = dO;\n    dist.ds = ds;\n    dist.p = pp;\n    \n    return dist;\n}\n\nvec3 calcNormal(in vec3 p) {\n  const float h = 0.0001;\n  const vec2 k = vec2(1, -1) * h;\n  return normalize( k.xyy * GetDist( p + k.xyy ) + \n                    k.yyx * GetDist( p + k.yyx ) + \n                    k.yxy * GetDist( p + k.yxy ) + \n                    k.xxx * GetDist( p + k.xxx ) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 uv2 = (2. * (fragCoord.xy) - iResolution.xy) / iResolution.x;  //現在の画素位置を0.0-1.0に正規化\n    vec3 ray = normalize(vec3(uv2, -1.0));\n    float tMax = 5.0;\n    \n    // Camera\n    float fov = 120.0;\n\n    vec3 ro = vec3(0, 0, 0.5 * sin(iTime * 0.5));// Ray Origin/Camera\n    \n    vec3 target = vec3(0);\n    vec3 up = vec3(0, 1, 0);\n    vec3 fwd = normalize(target - ro);\n    vec3 right = normalize(cross(up, fwd));\n    up = normalize(cross(fwd, right));\n    \n    vec3 rd = normalize(right * uv2.x + up * uv2.y + fwd / tan(fov * TAU / 720.));\n    \n    Dist d = RayMarch(ro, rd);// Distance\n    vec3 rayPos = d.p;\n    \n  vec3 color = vec3(0.98, 0.65, 0.89);\n  if(d.d < tMax) {\n    vec3 normal = calcNormal(rayPos);\n    \n    vec2 matcapUV = matcap(ray, normal);\n    // color = texture(iChannel0, matcapUV).rgb;\n\n    color = rgb2hsv(color);\n    color.r = mix(1.0, 0.5, length(rayPos * rayPos));\n    color = hsv2rgb(color);\n    \n    float _fresnel = fresnel(ray, normal, 3.);\n    color += _fresnel * 0.8;\n  }\n\n  fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/////////////////////////////\n// Constants\n/////////////////////////////\n#define PI 3.1415925359\n#define TAU PI*2.\n#define MAX_STEPS 100// Mar Raymarching steps\n#define MAX_DIST 100.// Max Raymarching distance\n#define SURF_DIST .001// Surface Distance\n\n\n/////////////////////////////\n// struct\n/////////////////////////////\nstruct Dist {\n    float d;\n    float ds;\n    vec3 p;\n};\n\n/////////////////////////////\n// primitives\n/////////////////////////////\n// Round Box - exact\nfloat roundBoxSDF( vec3 p, vec3 b, float r ) {\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;\n}\n\n// Box - exact \nfloat boxSDF( vec3 p, vec3 b ) {\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat sphereSDF(vec3 p,float r){\n    return length(p) - r;\n}\n\n/////////////////////////////\n// transform\n/////////////////////////////\n\n// Rotate\nmat2 Rotate(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c,-s,s,c);\n}\n\n/////////////////////////////\n// Smooth blending operators\n/////////////////////////////\n \nfloat smoothIntersectSDF(float distA, float distB, float k ) {\n  float h = clamp(0.5 - 0.5*(distA-distB)/k, 0., 1.);\n  return mix(distA, distB, h ) + k*h*(1.-h); \n}\n \nfloat smoothUnionSDF(float distA, float distB, float k ) {\n  float h = clamp(0.5 + 0.5*(distA-distB)/k, 0., 1.);\n  return mix(distA, distB, h) - k*h*(1.-h); \n}\n \nfloat smoothDifferenceSDF(float distA, float distB, float k) {\n  float h = clamp(0.5 - 0.5*(distA+distB)/k, 0., 1.);\n  return mix(distA, -distB, h ) + k*h*(1.-h); \n}\n\n////////////////////////////////////////\nfloat mod289(float x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 mod289(vec4 x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 perm(vec4 x){return mod289(((x * 34.0) + 1.0) * x);}\n\nfloat noise(vec3 p){\n    vec3 a = floor(p);\n    vec3 d = p - a;\n    d = d * d * (3.0 - 2.0 * d);\n\n    vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);\n    vec4 k1 = perm(b.xyxy);\n    vec4 k2 = perm(k1.xyxy + b.zzww);\n\n    vec4 c = k2 + a.zzzz;\n    vec4 k3 = perm(c);\n    vec4 k4 = perm(c + 1.0);\n\n    vec4 o1 = fract(k3 * (1.0 / 41.0));\n    vec4 o2 = fract(k4 * (1.0 / 41.0));\n\n    vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);\n    vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);\n\n    return o4.y * d.y + o4.x * (1.0 - d.y);\n}\n\n\nfloat remap(float value, float min1, float max1, float min2, float max2) {\n  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}","name":"Common","description":"","type":"common"}]}