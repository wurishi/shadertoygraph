{"ver":"0.1","info":{"id":"4fcGR8","date":"1711354338","viewed":65,"name":"Point grid effect demo","username":"vlk65536","description":"Simple effects demonstrated on point grid","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["effect"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -0.5 to 0.5)\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n\n    // Find the distance from the centre of the screen\n\tfloat r = 2.0*sqrt(dot(uv,uv));\n\t\n    // Some cool effects using different functions \n        //uv *= sqrt(0.5 + 0.4*sin(2.0*iTime)-r*r); //semicircle function: sqrt(r-r^2)\n        //uv *= pow(5.1+5.0*sin(iTime),r); // quasi\n        //uv *= 1.0 + 0.01*sin(-4.0*iTime+20.0*r); // Ripples (sin(r+r))\n        uv *= exp(-(0.45*sin(2.0*iTime))*r*r); //Scale inside of gaussian by some factor x (i.e. exp(-x*r^2))\n        //uv *= 1.0+mod(2.0*r,1.0+0.3*sin(iTime));// mod(r,t) looks like looking through a hole in sheets of paper \n    \n    // Checkerboard effect using z=sin(x)sin(y)\n    vec3 col = vec3(1.0-pow(sin(100.0*uv.x)*sin(100.0*uv.y), 2.0));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}