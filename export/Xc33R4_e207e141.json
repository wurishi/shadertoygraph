{"ver":"0.1","info":{"id":"Xc33R4","date":"1711416614","viewed":48,"name":"I Ching Hexagrams Ex.","username":"billrockx","description":"The Book of Shader Exercise.\nThink of something else that is not necessarily a pattern where you can apply the principles from this section. \nI haven’t been able to reproduce the same effect that’s in the book.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["tbos"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 tile (vec2 st, float zoom) {\n    st *= zoom;\n    return fract(st);\n}\n\nfloat square(vec2 pos, float side, vec2 uv) {\n    vec2 bl = step(vec2(pos), uv);\n    vec2 tr = step(vec2(1.0) - (vec2(side) + pos), 1.0 - uv);\n    return bl.x * bl.y * tr.x * tr.y;\n}\n\nfloat box( vec2 st,  vec2 size){\n    float w =  4.5/iResolution.y;\n    size = 0.5 - size * 0.5;\n    st = smoothstep(0., w, min(st, 1.0 - st) - size );\n    return st.x * st.y;\n}\n\nfloat squareTileY(vec2 st, float modp){\n    st.y += step(0.5, st.y) * -modp;\n    st.y += iTime;\n\n    st = fract(st);\n    return square(vec2(0.4, 0.45), 0.2, st);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 st = fragCoord.xy/iResolution.y;\n    vec3 color = vec3(0.0);\n    vec2 tes = vec2(0.0);\n\n    st = tile(st, 5.0);\n    color = 1.0 - step(0.2, st.y) * vec3(box(st, vec2(0.7, 1.0)));\n    \n    // I haven’t been able to reproduce the same effect that’s in the book yet.\n    // This was the closest effect I could achieve.\n    for (float i = 1.0; i < 6.0; i++) {\n\t    color += squareTileY(st, 0.1*i);\n    }\n\n    st = tile(st, 5.0);\n    color += vec3(step(0.6, st.y));\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}