{"ver":"0.1","info":{"id":"XfdSWj","date":"1714466188","viewed":40,"name":"Learning SDF and smin","username":"MadDonkey","description":"learning SDF and smin shader.\nthe red and green circles are corresponding to their \"inflate\" shape, when they touch each other the shape start melting.\nfork from https://www.shadertoy.com/view/3ltSW\n\nfork from [disk](https://www.shadertoy.com/view/3ltSW2)","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","distancefield","sdf","circle","smin"],"hasliked":0,"parentid":"3ltSW2","parentname":"Disk - distance 2D"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2020 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// Signed distance to a disk\n\n// List of some other 2D distances: https://www.shadertoy.com/playlist/MXdSRf\n//\n// and iquilezles.org/articles/distfunctions2d\n\n\nfloat sdCircle( in vec2 p, in float r ) \n{\n    return length(p)-r;\n}\n\n// old function(less efficiency)\nfloat smin(float a, float b, float k)\n{\n    // many old shaders dont have this normalization sentense. \n    // if you choose smin instead, you will find the inflate circle doesnt match when the shapes melting.\n    // k *= 4.0;\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\n// better written one\nfloat smin2(float a, float b, float k )\n{\n    k *= 4.0;\n    float h = max( k-abs(b-a), 0.0 )/k;\n    return min(a,b) - h*h*k*(1.0/4.0);\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n\n\tfloat d1 = sdCircle(p,0.4);\n    // moving circle\n    vec2 circle = vec2(sin(0.25 * iTime + 0.06), cos(0.3 * iTime + 0.17));\n    float d2 = sdCircle(p - circle, 0.4);\n    // choose smin instead to watch mismatching between shapes melting and inflate circle.\n    float d = smin2(d1, d2, 0.1);\n\t// coloring\n    vec3 col = (d>0.0) ? vec3(0.9,0.6,0.3) : vec3(0.65,0.85,1.0);\n    //col *= 1.0 - exp(-6.0*abs(d));\n\tcol *= 0.8 + 0.2*cos(150.0*d);\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.01,abs(d)) );\n\tcol = mix( col, vec3(1.0, 0.0, 0.0), 1.0-smoothstep(0.0,0.01,abs(d1 - 0.1)) );\n\tcol = mix( col, vec3(0.0, 1.0, 0.0), 1.0-smoothstep(0.0,0.01,abs(d2 - 0.1)) );\n    \n    if( iMouse.z>0.001 )\n    {\n        // d_m is the distance at the mouse (after smin). you may see that at the position abs(d1 - d2) < k, d_m circle is not a tangent to neither circle.\n        // move mouse to the position where abs(d1 - d2) > k, the yellow circle should work perfectly.\n        float d_m = smin2(sdCircle(m, 0.4), sdCircle(m - circle, 0.4), 0.1);\n        //\n        col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, abs(length(p-m)-abs(d_m))-0.0025));\n        col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, length(p-m)-0.015));\n    }\n\n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}