{"ver":"0.1","info":{"id":"wsy3z1","date":"1569700852","viewed":224,"name":"Sphere lit outline","username":"jsharifi","description":"Attempt to help https://www.reddit.com/r/GraphicsProgramming/comments/daj3ln/some_advice_for_shader_optimization_for_unity/","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["light","sphere","normal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float sphere_screen_radius = 0.4;\nconst float scatter_light_threshold = 0.9;\n\nvec3 sphere_normal(vec2 uv) {\n\tvec2 xy = (uv);\n    float z = sphere_screen_radius - length(xy);\n    if (z < 0.0) return vec3(0.0);\n    \n    vec3 n = normalize(vec3(xy.x, xy.y, z));\n    return(n);\n}\n\nfloat sphere_surface_dot(vec3 surface_norm, vec3 approach) {\n    return(dot(surface_norm, normalize(approach) ));\n}\n\nvec3 vector_along_y_plane() {\n   float theta = iTime;\n   vec3 v = normalize(vec3(cos(theta), 0.0, sin(theta)));\n   return(v); \n}\n\nvec3 camera_look_dir = normalize(vec3(0.0, 0.0, 1.0));\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    vec3 norm = sphere_normal(uv);\n    vec3 approach = vector_along_y_plane();\n    \n    float direct_light = clamp(sphere_surface_dot(norm, approach), 0.0, 1.0);\n    vec3 col = vec3(abs(norm.x), norm.yz) * direct_light;\n    \n    float indirect_light = 1.0 - dot(norm, camera_look_dir);\n    if (indirect_light > scatter_light_threshold && direct_light > 0.0) {\n        float rayleigh_k = (1.0 - direct_light) * (indirect_light - scatter_light_threshold) / (1.0 - scatter_light_threshold);\n        col = mix(col, vec3(1.0), pow(rayleigh_k, 3.0 * indirect_light));\n    }\n        \n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}