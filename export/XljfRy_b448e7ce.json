{"ver":"0.1","info":{"id":"XljfRy","date":"1516314239","viewed":141,"name":"16/2018","username":"rimina","description":"This shader is part of my daily shader challenge. Today's theme is hacky. Hacky reflections, refraction and tons of other hacky stuff.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["reflections"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define STEPS 60\n#define PIXELR 0.5/iResolution.x\n#define FAR 80.0\n\n#define PI 3.14159265\n#define PHI (sqrt(5.0)*0.5 + 0.5)\n\n#define HASHSCALE1 0.1031\n\nconst vec3 FOG_COLOR = vec3(0.65, 0.65, 0.85);\n\n//Distance functions and helpper functions from Mercury's SDF library\n//http://mercury.sexy/hg_sdf/\n\n// Sign function that doesn't return 0\nfloat sgn(float x) {\n\treturn (x < 0.0)?-1.0:1.0;\n}\n\nfloat vmax3(vec3 v) {\n\treturn max(max(v.x, v.y), v.z);\n}\n\nfloat fSphere(vec3 p, float r) {\n\treturn length(p) - r;\n}\n\n// Plane with normal n (n is normalized) at some distance from the origin\nfloat fPlane(vec3 p, vec3 n, float distanceFromOrigin) {\n\treturn dot(p, n) + distanceFromOrigin;\n}\n\nfloat fBox(vec3 p, vec3 b) {\n\tvec3 d = abs(p) - b;\n\treturn length(max(d, vec3(0))) + vmax3(min(d, vec3(0)));\n}\n\n// Rotate around a coordinate axis (i.e. in a plane perpendicular to that axis) by angle <a>.\n// Read like this: R(p.xz, a) rotates \"x towards z\".\n// This is fast if <a> is a compile-time constant and slower (but still practical) if not.\nvoid pR(inout vec2 p, float a){\n\tp = cos(a)*p + sin(a)*vec2(p.y, -p.x);\n}\n\nfloat dist(vec3 p){\n    \n    float ground = fPlane(p, vec3(0.0,1.0,0.0), 1.0);\n    float sphere = fSphere(p-vec3(0.0, 2.0, 0.0), 1.0);\n    \n    vec3 pp = p - vec3(-2.0, 0.0, 0.0);\n    pR(pp.xz, radians(60.0));\n    float box = fBox(pp, vec3(1.0));\n    \n    pp = p - vec3(2.0, 0.0, 0.0);\n    pR(pp.xz, -radians(60.0));\n    box = min(box, fBox(pp, vec3(1.0)));\n    \n    \n    return min(sphere, min(ground, box));\n}\n\n\n//calculate normals for objects\nvec3 normals(vec3 p){\n\tvec3 eps = vec3(PIXELR, 0.0, 0.0 );\n    return normalize(vec3(\n        dist(p+eps.xyy) - dist(p-eps.xyy),\n        dist(p+eps.yxy) - dist(p-eps.yxy),\n        dist(p+eps.yyx) - dist(p-eps.yyx)\n    ));\n}\n\n//Ambient occlusion method from https://www.shadertoy.com/view/4sdGWN\n//Random number [0:1] without sine\nfloat hash(float p){\n\tvec3 p3  = fract(vec3(p) * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec3 randomSphereDir(vec2 rnd){\n\tfloat s = rnd.x*PI*2.;\n\tfloat t = rnd.y*2.-1.;\n\treturn vec3(sin(s), cos(s), t) / sqrt(1.0 + t * t);\n}\nvec3 randomHemisphereDir(vec3 dir, float i){\n\tvec3 v = randomSphereDir( vec2(hash(i+1.), hash(i+2.)) );\n\treturn v * sign(dot(v, dir));\n}\n\nfloat ambientOcclusion( in vec3 p, in vec3 n, in float maxDist, in float falloff ){\n\tconst int nbIte = 32;\n    const float nbIteInv = 1.0/float(nbIte);\n    const float rad = 1.0-1.0*nbIteInv; //Hemispherical factor (self occlusion correction)\n    \n\tfloat ao = 0.0;\n    \n    for( int i=0; i<nbIte; i++ )\n    {\n        float l = hash(float(i))*maxDist;\n        vec3 rd = normalize(n+randomHemisphereDir(n, l )*rad)*l; // mix direction with the normal\n        \t\t\t\t\t\t\t\t\t\t\t\t\t    // for self occlusion problems!\n        \n        ao += (l - max(dist( p + rd ),0.)) / maxDist * falloff;\n    }\n\t\n    return clamp( 1.-ao*nbIteInv, 0., 1.);\n}\n\n//Subsurface scattering method inspired by noby\n//Example implementation in https://www.shadertoy.com/view/lllBDM\nfloat subsurfaceScattering(vec3 p, vec3 rd, vec3 n){\n    vec3 d = refract(rd, n, 1.31);\n    vec3 pos = p;\n    float thickness = 0.0;\n    const float max_scatter = 2.0;\n    for(float i = 0.1; i < max_scatter; i += 0.2){\n        pos += i*d;\n        float t = dist(pos);\n        thickness += t;\n    }\n    thickness = max(0.0, -thickness);\n    float scatter= pow(ambientOcclusion(p, -normals(p), 4.0, 3.0), -2.5);\n    return scatter*min(max_scatter, 1.8/thickness);\n}\n\n\nfloat march(vec3 ro, vec3 rd){\n    \n    float t = 0.0;\n    vec3 p = ro;\n    for(int i = 0; i < STEPS; ++i){\n        float d = dist(p);\n        t += d;\n        p += rd*d;\n        \n        if(d < PIXELR || t > FAR){\n            break;\n        }\n        \n    }\n    return t;\n}\n\nmat4 marchRF(vec3 ro, vec3 rd, vec3 ro2, vec3 rd2){\n\tvec3 n = normals(ro);\n\tvec3 n2 = normals(ro2);\n\n    vec3 rdRefr= refract(rd2, n2, 1.31);\n    vec3 rdRefl = reflect(rd, n);\n\n\tvec3 pRefr = ro2;\n\tvec3 pRefl = ro+(0.001*n);\n\n\tfloat t1 = 0.0;\n\tfloat t2 = 0.0;\n\n    bool refractDone = false;\n    bool reflectDone = false;\n\n\tfor(int i = 0; i < STEPS; ++i){\n\n\t\tfloat d1 = dist(pRefr);\n\t\tfloat d2 = dist(pRefl);\n\n\t\tif(!refractDone){\n\t\t\t t1 += d1;\n\t\t\t pRefr += rdRefr*d1;\n\t\t}\n\n\t\tif(!reflectDone){\n\t\t\tt2 += d2;\n\t\t\tpRefl += rdRefl*d2;\n\t\t}\n\n\t\tif(d1 < PIXELR || t1 > FAR){\n\t\t\trefractDone = true;\n\t\t}\n\n\t\tif(d2 < PIXELR || t2 > FAR){\n\t\t\treflectDone = true;\n\t\t}\n\n\t\tif(refractDone && reflectDone){\n\t\t\tbreak;\n\t\t}\n\n\t}\n\n\treturn mat4(\n\t\tvec4(pRefr, t1),\n\t\tvec4(pRefl, t2),\n\t\tvec4(rdRefr, 0.0),\n\t\tvec4(rdRefl, 0.0)\n    );\n}\n\nvec3 fog(vec3 col, vec3 p, vec3 ro, vec3 rd, vec3 ld, vec3 lc){\n    float dist = length(p-ro);\n\tfloat sunAmount = max( dot( rd, ld ), 0.0 );\n\tfloat fogAmount = 1.0 - exp( -dist*0.08);\n\tvec3  fogColor = mix(FOG_COLOR, lc, pow(sunAmount, 4.0));\n    return mix(col, fogColor, fogAmount);\n}\n\n\nvec3 colorify(vec3 p, vec3 rd, vec3 ro, vec3 ld, vec3 lc){\n    vec3 n = normals(p);\n    vec3 h = normalize(ld + rd);\n    \n    float angle = max(dot(reflect(-ld, n), rd), 0.0);\n    float spec = pow(angle, 10.0);\n    \n    float lamb = max(0.0, dot(n, ld));\n    float ss = max(0.0, subsurfaceScattering(p, rd, n));\n    lamb = mix(lamb, 3.5*smoothstep(0.0, 2.0, pow(ss, 0.6)), 0.7);\n\n    float fresnel = pow( max(0.0, 1.0+dot(n, rd)), 1.31 );\n    \n    \n    vec3 cc = lc*(ambientOcclusion(p, n, 4.0, 1.0)) + \n        vec3(0.7, 0.6, 0.7)*lamb + vec3(0.8, 0.8, 0.5)*spec +\n        fresnel*FOG_COLOR;\n    \n    \n\n\treturn cc/2.0;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 q = -1.0+2.0*uv;\n    q.x *= iResolution.x/iResolution.y;\n    \n    vec3 ro = vec3(0.0, 0.0, -4.0);\n    vec3 rt = vec3(0.0, 0.0, 0.0);\n    \n    vec3 z = normalize(rt-ro);\n    vec3 x = normalize(cross(z, vec3(0.0, 1.0, 0.0)));\n    vec3 y = normalize(cross(x, z));\n    vec3 rd = normalize(mat3(x, y, z)*vec3(q, radians(50.0)));\n    \n    vec3 ld = (rt-ro)/distance(ro, rt);\n    vec3 ld2 = (rt-vec3(0.0, -2.0, -6.0))/distance(vec3(0.0, -2.0, -6.0), rt);\n    \n    vec3 lcol = vec3(0.8, 0.75, 0.65);\n    vec3 lcol2 = vec3(1.0);\n    vec3 col = FOG_COLOR;\n    \n    float t = march(ro, rd);\n\tvec3 p = rd*t+ro;\n    \n    if(t <= FAR){\n\t\tcol = colorify(p, rd, ro, ld, lcol) + \n            colorify(p, rd, ro, ld2, lcol2);\n        col *= 0.5;\n        \n        vec3 col2 = vec3(1.0);\n        vec3 p2 = p;\n        vec3 rd2 = rd;\n        for(int i = 0; i < 4; ++i){\n            mat4 pr = marchRF(p, rd, p2, rd2);\n\n            if(pr[0].w <= FAR){\n               col2 = (colorify(pr[0].xyz, rd2, pr[2].xyz, ld, lcol) +\n                   colorify(pr[0].xyz, rd2, pr[2].xyz, ld2, lcol2));\n                col2 *= 0.5;\n                \n                col += col2;\n                \n                \n                p2 = pr[0].xyz;\n                rd2 = pr[2].xyz;\n            }\n            if(pr[1].w <= FAR){\n                col2 = (colorify(pr[1].xyz, rd, pr[3].xyz, ld, lcol) +\n                       colorify(pr[1].xyz, rd, pr[3].xyz, ld2, lcol2));\n                col2 *= 0.5;\n                \n                col += col2;\n                \n                p = pr[1].xyz;\n                rd = pr[3].xyz;\n            }\n        }\n\t}\n    \n    col /= 8.0;\n    \n    vec3 fg = fog(col, p, ro, rd, ld, lcol) +\n\t\tfog(col, p, ro, rd, ld2, lcol2);\n\tcol = fg*0.5;\n    \n    //Vigenting\n    float vigentOffset = 0.005;\n    float darkness = 0.5;\n\tfloat dist = distance(uv, vec2( 0.5 ));\n\tcol *= smoothstep(0.8, vigentOffset * 0.799, dist *( darkness + vigentOffset ));\n    \n    \n    col = pow(col, 1.0/vec3(2.2));\n\tfragColor = vec4(col ,1.0);\n}","name":"Image","description":"","type":"image"}]}