{"ver":"0.1","info":{"id":"MdBfzm","date":"1499892927","viewed":768,"name":"Halftone Dots","username":"cacheflowe","description":"A configurable halftone pattern for compositing purposes","likes":11,"published":3,"flags":0,"usePreview":0,"tags":["halftone","dots","pattern"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define dotsRows 5.0\n#define radius 0.25\n#define invert 1\n\nvec2 rotateCoord(vec2 uv, float rads) {\n    uv *= mat2(cos(rads), sin(rads), -sin(rads), cos(rads));\n\treturn uv;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // update layout params\n    float rows = dotsRows + 3. * sin(iTime);\n    float curRadius = radius + 0.15 * cos(iTime);\n  \tfloat curRotation = iTime;\n    vec2 curCenter = vec2(cos(iTime), sin(iTime));\n    // get original coordinate, translate & rotate\n\tvec2 uv = (2. * fragCoord - iResolution.xy) / iResolution.y;\n    uv += curCenter;\n    uv = rotateCoord(uv, curRotation);\n    // calc row index to offset x of every other row\n    float rowIndex = floor(uv.y * rows);\t\t\n    float oddEven = mod(rowIndex, 2.);\n    // create grid coords\n    vec2 uvRepeat = fract(uv * rows) - 0.5;\t\t\n    if(oddEven == 1.) {\t\t\t\t\t\t\t// offset x by half\n    \tuvRepeat = fract(vec2(0.5, 0.) + uv * rows) - vec2(0.5, 0.5);\t\n    }\n    // adaptive antialiasing, draw, invert\n    float aa = iResolution.y * dotsRows * 0.00001; \t\n    float col = smoothstep(curRadius - aa, curRadius + aa, length(uvRepeat));\n    if(invert == 1) col = 1. - col;\t\t\t\n\tfragColor = vec4(vec3(col),1.0);\n}","name":"Image","description":"","type":"image"}]}