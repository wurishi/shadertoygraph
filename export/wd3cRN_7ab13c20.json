{"ver":"0.1","info":{"id":"wd3cRN","date":"1600499500","viewed":71,"name":"Chack","username":"cobalthex","description":"checkerboard pattern","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["checker"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float checker( in vec2 p )\n{ ///found somewhere else on shadertoy\n    // filter kernel\n    vec2 w = fwidth(p) + 0.01;  \n    // analytical integral (box filter)\n    vec2 i = 2.0*(abs(fract((p-0.5*w))-0.5)-abs(fract((p+0.5*w))-0.5))/w;\n    // xor pattern\n    return 0.5 - 0.5*i.x*i.y;                  \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    uv *= 5.0;\n    uv.y += sin(uv.x + cos(iTime) * 2.0) / 2.0;\n    uv.x -= sin(uv.y + iTime) / 2.0;\n\n    // Time varying pixel color\n    vec3 col = mix(vec3(0.1, 0.05, 0.2), vec3(1.0, 0.9, 0.8), checker(uv));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}