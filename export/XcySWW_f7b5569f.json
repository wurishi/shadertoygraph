{"ver":"0.1","info":{"id":"XcySWW","date":"1715142914","viewed":37,"name":"bae #008 ~ Bendy Straw","username":"BretHudson","description":"A bunch of rotating lines","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["lines"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 rotate(vec2 v, float a)\n{\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, s, -s, c) * v;\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\n\nfloat PI = 3.141592;\nfloat ease(float x)\n{\n    return -(cos(PI * x) - 1.) / 2.;\n}\n\n// this is over an hour of trying a bunch of things, big ol' mess\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    \n    vec3 col = vec3(1., 0.5, 0.4);\n    \n    float offset = -0.08;\n    float width = 0.1;\n    \n    vec2 line_uv = uv;\n    \n    float totalRotations = 2.0 * abs(round(uv.x)) + 2.0;\n    \n    float time_scale = 9.;\n    float time = iTime;\n    float delay = 0.4;\n    time = mod(delay + time - totalRotations * delay, time_scale);\n    \n    float scaleDur = 1.5;\n    float rotateDur = time_scale - scaleDur;\n    \n    // this means disable from 0. to scaleDur, then enable from scaleDur to 5.\n    float canRotate = step(scaleDur, time_scale - time);\n    \n    float scaleTime = 0.;\n    \n    float rotateDir = sign(floor((uv.x + 1.0) / 2.0) + sign(uv.x));\n    rotateDir = sign(mod(uv.x, 2.0) - 1.0);\n    float rotateTime = ease(time / rotateDur) * totalRotations;\n    \n    line_uv = rotate(line_uv, 3.14 * rotateTime * canRotate * rotateDir);\n    line_uv = fract(line_uv * 2.0);\n    line_uv = fract(line_uv * 2.0);\n    \n    vec2 goal = vec2(abs(line_uv.x), 0.15);\n    \n    float amount = distance(abs(line_uv), goal) - 0.5;\n    amount -= offset;\n    \n    float d = sdBox(line_uv, vec2(1.0, 0.75));\n    d = smoothstep(.01, -0.01, d/fwidth(d));\n    col += vec3(0., 0.4, 0.5) * d;\n    col *= vec3(1., 0.97 + sin(iTime) * 0.03, 1.);\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}