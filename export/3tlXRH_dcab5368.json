{"ver":"0.1","info":{"id":"3tlXRH","date":"1562079097","viewed":372,"name":"xor discs","username":"ducklett","description":"First time messing with xor in shaders\nI really dig the aesthetic and want to use it in some more complex stylistic shaders eventually","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["2d","xor"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float xor(float x, float y) { return float(int(x*256.) ^ int(y*256.)) / 256.; }\nvec3 xor3(vec3 x, vec3 y) {\n\treturn vec3(xor(x.r, y.r), xor(x.g, y.g), xor(x.b, y.b));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 a = mix(vec3(.9,0.,0.9), vec3(0.,0.9,0.9), length(uv-.5) + sin(iTime)*0.1);\n    vec3 b = vec3(length(uv-.5+vec2(sin(iTime), cos(iTime))/10.)+sin(iTime*2.)*0.1);\n    // Output to screen\n    fragColor = vec4(fract(xor3(a,b)),1.0);\n}","name":"Image","description":"","type":"image"}]}