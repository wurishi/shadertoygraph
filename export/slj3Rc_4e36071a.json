{"ver":"0.1","info":{"id":"slj3Rc","date":"1629412825","viewed":84,"name":"gol_wireworld23","username":"edwardbraed","description":"wireworld celllar automat\nSee Common for describe control..\nSee details algorithm wireworld - https://en.wikipedia.org/wiki/Wireworld","likes":4,"published":1,"flags":48,"usePreview":0,"tags":["gameoflife","cellularautomata","wireworld"],"hasliked":0,"parentid":"sdj3D1","parentname":"gol_classic23"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 chp = round(uv * FIELD_SIZE);\n    float ch = mod(chp.x + chp.y, 2.0) * 0.1;\n    \n    float r = texture(iChannel0, uv).x;\n    \n    // Output to screen\n    fragColor = vec4(mix(COLOR * ch, COLOR * r, sign(r)), 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define FIELD_SIZE vec2(70, 42)\n#define COLOR vec3(0.0, 1.0, 0.2)\n\n// Click ........... Draw conductor\n// Click + D-Key ... Draw dielectric (clear cell)\n// Click + S-Key ... Draw electron\n// Click + A-Key ... Draw electron tail\n// R-Key ........... Clear all cells\n// F-Key ........... Clear all conductor-cells\n// Space-Key ....... for play/stop game","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define cmpv(a, b, s) (b.x > (a.x - s.x) && b.x < (a.x + s.x) && b.y > (a.y - s.y) && b.y < (a.y + s.y))\n\n#define is_dielectric(a) (a < 0.1)\n#define is_conductor(a) (a > 0.3 && a < 0.5)\n#define is_e_tail(a) (a > 0.6 && a < 0.8)\n#define is_e_head(a) (a > 0.9)\n\n#define f_is_e_head(a) float(is_e_head(a))\n\nint cntHeads(vec2 uv, vec2 s)\n{\n    float cnt = 0.0;\n    cnt += f_is_e_head(texture(iChannel0, uv + s * vec2(-1.0, -1.0)).x);\n    cnt += f_is_e_head(texture(iChannel0, uv + s * vec2( 0.0, -1.0)).x);\n    cnt += f_is_e_head(texture(iChannel0, uv + s * vec2( 1.0, -1.0)).x);\n    cnt += f_is_e_head(texture(iChannel0, uv + s * vec2(-1.0,  0.0)).x);\n    cnt += f_is_e_head(texture(iChannel0, uv + s * vec2( 1.0,  0.0)).x);\n    cnt += f_is_e_head(texture(iChannel0, uv + s * vec2(-1.0,  1.0)).x);\n    cnt += f_is_e_head(texture(iChannel0, uv + s * vec2( 0.0,  1.0)).x);\n    cnt += f_is_e_head(texture(iChannel0, uv + s * vec2( 1.0,  1.0)).x);\n    return int(round(cnt));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 fs = FIELD_SIZE;\n    vec2 fc = 1.0 / fs;             // field coof\n    vec2 hfc = fc * 0.5;            // half field coof\n    vec2 rp = round(uv / fc) * fc;  // field position (round)\n    \n    vec4  state = texture(iChannel0, uv);\n    float res   = state.x; // cell state\n    float ply   = state.y; // playing state\n    float lti   = state.z; // last time (for input delay)\n    float ftm   = state.w; // last time (for render delay)\n    \n    float s_btn  = texelFetch(iChannel1, ivec2(32, 0), 0).x; // space-key\n    float rk_btn = texelFetch(iChannel1, ivec2(82, 0), 0).x; // R-key\n    float fk_btn = texelFetch(iChannel1, ivec2(70, 0), 0).x; // F-key (clear all electrons)\n    \n    float sk_btn = texelFetch(iChannel1, ivec2(83, 0), 0).x; // S-key (electron head)\n    float ak_btn = texelFetch(iChannel1, ivec2(65, 0), 0).x; // A-key (electron tail)\n    float dk_btn = texelFetch(iChannel1, ivec2(68, 0), 0).x; // D-key (dielectric)\n    \n    float                 edm = 0.40; // conductor\n    if     (dk_btn > 0.0) edm = 0.0;  // dielectric\n    else if(ak_btn > 0.0) edm = 0.70; // electron tail\n    else if(sk_btn > 0.0) edm = 1.00; // electron head\n    \n    if(s_btn > 0.1 && (lti + 0.3) < iTime)\n    {\n        ply = abs(ply - s_btn);\n        lti = iTime;\n    }\n    \n    if(ply > 0.0)\n    {\n        // - processing rules ----------------------\n        \n        if(iTime < ftm)\n        {\n            fragColor = vec4(res, ply, lti, ftm);\n            return;\n        }\n        else\n            ftm = iTime + 0.1;\n        \n        if(is_e_head(res))\n            res = 0.70;\n        else if(is_e_tail(res))\n            res = 0.40;\n        else if(is_conductor(res))\n        {\n            int hcnt = cntHeads(rp, fc);\n            res = mix(res, 1.0, float(hcnt == 1 || hcnt == 2));\n        }\n    }\n    else\n    {\n        // - edit mode -----------------------------\n        \n        vec2 m = iMouse.xy / iResolution.xy;\n        vec2 mp = round(m / fc) * fc;\n\n        if(iMouse.z > 0.0 && cmpv(rp, mp, hfc))\n            res = edm;\n            \n        res = mix(res, float(res > 0.0) * 0.40, fk_btn);\n        res = mix(res, 0.0, rk_btn);\n    }\n    \n    // Output to screen\n    fragColor = vec4(res, ply, lti, ftm);\n}","name":"Buffer A","description":"","type":"buffer"}]}