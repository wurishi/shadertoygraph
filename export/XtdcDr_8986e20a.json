{"ver":"0.1","info":{"id":"XtdcDr","date":"1532275002","viewed":162,"name":"halton1","username":"valyagolev","description":"halton","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["halton"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//vec2 points[2];\n\n#define POINTS 300\n\nfloat haltonSeq(int b, int i) {\n\tfloat r = 0.0;\n    float f = 1.0;\n    while (i > 0) {\n        f = f / float(b);\n        r = r + f * float(i % b);\n        i = int(floor(float(i) / float(b)));\n    }\n    return r;\n}\n\nvec2[POINTS] someHaltons() {\n    vec2[POINTS] ret;\n    for (int i = 0; i < POINTS; i++) {\n    \tret[i] = vec2(haltonSeq(5, i + 39), haltonSeq(7, i + 27));\n    }\n   // ret[1] = vec2(0.1, 0.2);\n   // ret[3] = vec2(0.4, 0.3);\n    return ret;\n}\n\n\nfloat ease(float x) {\n   // return (pow(x*2.0 - 1.0, 1.0) + 1.0) / 2.0;\n//if (x < 0.5) return 1.0 - x;\n    if (x > 0.7) return 1.0;\n    return x;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{/*points[0] = vec2(0.2, 0.2);\npoints[1] = vec2(0.7, 0.55);*/\n    vec2[POINTS] hlt = someHaltons();\n\n \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float dst = 0.0;\n    for (int i = 0; i < POINTS; i++) {\n        //dst += \n        if (distance(uv, hlt[i]) < 0.01) {\n            dst += 1.0;\n            break;\n        }\n    }\n    \n    //float normDst = dst / 2.0;\n//    float easedDst = ease(dst);\n float easedDst = dst >= 1.0 ? 1.0 : 0.0;\n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = vec4(easedDst, easedDst, easedDst, 1.0);\n}","name":"Image","description":"","type":"image"}]}