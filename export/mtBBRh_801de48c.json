{"ver":"0.1","info":{"id":"mtBBRh","date":"1693782619","viewed":81,"name":"rectangles in triangular grid","username":"jt","description":"Towards more interesting procedurally generated floor-plans combining rectangular and triangular symmetry.\nRandom patches of rectangular walls in an underlying triangular pattern, oriented in three directions.\nClick to show underlying triangle grid.\n\n","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["2d","rectangles","grid","triangle","triangles","patterns","wall","rectangle","barycentric","pattern","floor","plan","construction","walls"],"hasliked":0,"parentid":"dt2fzR","parentname":"three dir brick patches essence"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/mtBBRh rectangles in triangular grid, written 2023 by jt\n// based on https://www.shadertoy.com/view/dt2fzR three dir brick patches essence\n// 2d essence of https://www.shadertoy.com/view/mlXfDs three directional brick patches\n\n// Towards more interesting procedurally generated floor-plans combining rectangular and triangular symmetry.\n// Random patches of rectangular walls in an underlying triangular pattern, oriented in three directions.\n// NOTE: Every other horizontal wall is omitted, the remaining are two-sided\n//       (vertical walls are normal) to align with the underlying triangular grid.\n\n// tags: 2d, grid, triangle, triangles, pattern, patterns, barycentric, rectangle, rectangles, wall, walls\n\n// The MIT License\n// Copyright (c) 2023 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// https://www.shadertoy.com/view/WttXWX \"Best\" Integer Hash by FabriceNeyret2\n// implementing Chris Wellons https://nullprogram.com/blog/2018/07/31/\nuint triple32(uint x)\n{\n    x ^= x >> 17;\n    x *= 0xed5ad4bbU;\n    x ^= x >> 11;\n    x *= 0xac4c1b51U;\n    x ^= x >> 15;\n    x *= 0x31848babU;\n    x ^= x >> 14;\n    return x;\n}\n\nuint uhash(ivec3 v)\n{\n    return triple32(uint(v.x) + triple32(uint(v.y) + triple32(uint(v.z))));\n}\n\n/*\nuint uhash(ivec3 f) // faster prng suggested by Fabrice\n{\n    uvec3  x = uvec3(f);\n    uint   k = 1103515245U; \n           x = ((x>>8U)^x.yzx)*k;\n           x = ((x>>8U)^x.yzx)*k;  \n    return uint(((x>>8U)^x.yzx)*k);\n}\n*/\n/*\nvec3 barycentric(vec2 a, vec2 b, vec2 c, vec2 p)\n{\n    float d = (b.y - c.y) * (a.x - c.x) + (c.x - b.x) * (a.y - c.y);\n    float alpha = ((b.y - c.y) * (p.x - c.x)+(c.x - b.x) * (p.y - c.y)) / d;\n    float beta = ((c.y - a.y) * (p.x - c.x) + (a.x - c.x) * (p.y - c.y)) / d;\n    float gamma = 1.0 - alpha - beta;\n    return vec3(alpha, beta, gamma);\n}\n*/\nvec3 barycentric(vec2 p)\n{\n    float s = sqrt(3.0);\n    //return vec3((vec2(-1,+1) * p.x - p.y/s + 1.0)/2.0, p.y / s); // original\n    //return p * mat3x2(-s ,-1, s, -1, 0, 2)*.5/s + vec3(.5,.5,0); // matrix version by Fabrice\n    return (p * mat3x2(-s ,-1, s, -1, 0, 2)/s + vec3(1,1,0))/2.; // matrix version by Fabrice (modified)\n}\n/*\nfloat mirror(float t)\n{\n    return abs(2.0 * fract(t) - 1.0);\n}\n*/\n/*\nfloat checker(vec2 p)\n{\n    p = floor(p);\n    return mod(p.x + p.y, 2.0);\n}\n*/\n/*\nivec3 div_floor(ivec3 a, ivec3 b)\n{\n    return ivec3(floor(vec3(a) / vec3(b)));\n}\n\nivec3 mod_positive(ivec3 a, ivec3 b)\n{\n   return a - div_floor(a, b) * b;\n}\n*/\n#define scale (10.0*sqrt(3.0))\n//#define e (3./R.y*scale)\n#define e (2./R.y*scale)\n\nvoid mainImage( out vec4 o, in vec2 I )\n{\n    vec2 R = iResolution.xy;\n    //I = 2.0 * I/R - 1.0;\n    I = (2.0 * I - R) / R.y; // mind aspect ratio\n\n    //vec3 t = barycentric(vec2(-1,0), vec2(+1,0), vec2(0,sqrt(3.0)), I*scale);\n    vec3 t = barycentric(I*scale);\n\n    ivec3 m = ivec3(floor(t));\n\n    //uint choice = uhash(m / int(1.0+5.0*(0.5+0.5*cos(iTime))) + int(iTime)) % 3u;\n    //uint choice = uhash(m / int(1.0+9.0*mirror(iTime/10.0)) + int(iTime)) % 3u;\n    uint choice = uhash(m / 5 + int(iTime/10.0)) % 3u;\n    t = choice == 2u ? t.zxy : choice == 1u ? t.yzx : t.xyz;\n    //m = choice == 2u ? m.zxy : choice == 1u ? m.yzx : m.xyz; // sync m to t...\n    m = ivec3(floor(t)); // ...or just re-calculate m from t\n    //t = t.zxy;\n    //m = m.zxy;\n\n    //bool tri = any(lessThan(t, vec3(0))); // fundamental triangle\n    bool flip = m.x + m.y + m.z == 0;\n\n    {\n        t = fract(t); // local triangular coordinates\n        //t -= vec3(m); // local triangular coordinates\n        if(!flip) t = 1.0 - t; // fix range: mirror in every other triangle\n    }\n    //t = fract(flip ? +t : -t); // this can be used instead but I find the above easier to understand\n\n    float c = 1.0;\n    bool h = uhash(m+1*int(iTime)) % 2u != 0u;\n    if(h)\n    {\n        c = min(c, ((m.z & 1) == 0) != flip ? 1.0 : smoothstep(0.05-e,0.05+e,abs(t.y-t.x)));\n        if((((m.z & 1) == 0) != flip))\n            c = min(c, smoothstep(0.0-e,0.05+e,abs(t.z)));\n    }\n    c = 1.0 - c;\n\n    o = vec4(vec3(c),1);\n    //o = vec4(t, 1.0);\n\n    //o = vec4(c*vec3(m & 1), 1); // color walls\n    if(iMouse.z > 0.0)\n    {\n        //o = max(o, vec4(0.25*vec3(m & 1), 1.0));\n        o = max(o, vec4(0.2*(choice == 2u ? vec3(0,0,1) : choice == 1u ? vec3(0,1,0) : vec3(1,0,0)), 1.0));\n        o += 0.2 - 0.2 * min(smoothstep(0.0,0.0+e,t.x), min(smoothstep(0.0,0.0+e,t.y), smoothstep(0.0,0.0+e,t.z)));\n    }\n    //if(tri) o.xyz = vec3(0,0,1); // fundamental triangle\n    //if(flip) o.xyz = vec3(1,0,0);\n    o = sqrt(o);\n}\n","name":"Image","description":"","type":"image"}]}