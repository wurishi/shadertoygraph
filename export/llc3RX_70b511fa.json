{"ver":"0.1","info":{"id":"llc3RX","date":"1470503879","viewed":309,"name":"windy water","username":"KukaTails","description":"use turbulent noise to make windy water","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["turbulentnoise","windywater"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float Hash(vec2 p)\n{\n    float h = dot(p, vec2(17.1, 311.7));\n    return -1.0 + 2.0 * fract(sin(h) * 4358.5453);\n}\n\nfloat Noise(vec2 p)\n{\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n    vec2 u = f * f * (3.0 - 2.0 * f);\n    \n    return mix(mix(Hash(i + vec2(0.0, 0.0)),\n                   Hash(i + vec2(1.0, 0.0)), u.x),\n               mix(Hash(i + vec2(0.0, 1.0)),\n                   Hash(i + vec2(1.0, 1.0)), u.x), u.y);\n \n}\n\nvec2 VecNoise(vec2 point)\n{\n    vec2 res;\n    res.x = Noise(point);\n    res.y = Noise(point + 0.33 + iTime);\n    return res;\n}\n\n\nfloat DistortionNoise(vec2 point, float distortion)\n{\n    vec2 offset = point + vec2(0.5);\n    offset = VecNoise(point);\n    offset *= distortion;\n    point += offset;\n    return Noise(point);\n}\n\n\nfloat DistFbmNoise(vec2 p)\n{\n  const float octaves = 8.0;\n  const float lacunarity = 2.0;\n  const float H = 0.5;\n\n  float value = 0.0, k = 0.0;\n  for (float i = 0.0; i < octaves; ++ i) {\n    value += DistortionNoise(p, 1.0) * pow(lacunarity, -H * i);\n    p *= lacunarity;\n    ++k;\n  }\n\n  float remainder = fract(octaves);\n  if (remainder != 0.0) {\n    value += remainder * Noise(p) * pow(lacunarity, -H * k);\n  }\n  return value;\n}\n\n\nfloat FbmNoise(vec2 p)\n{\n  const float octaves = 4.0;\n  const float lacunarity = 2.0;\n  const float H = 0.8;\n\n  float value = 0.0, k = 0.0;\n  for (float i = 0.0; i < octaves; ++ i) {\n    value += Noise(p) * pow(lacunarity, -H * i);\n    p *= lacunarity;\n    ++k;\n  }\n\n  float remainder = fract(octaves);\n  if (remainder != 0.0) {\n    value += remainder * Noise(p) * pow(lacunarity, -H * k);\n  }\n  return value;\n}\n\nfloat Offset(vec3 pos)\n{\n    const float km = 1.0;\n    float offset = km * FbmNoise(pos.xz);\n    return offset;\n}\n\nfloat DistOffset(vec3 pos)\n{\n    const float km = 0.4;\n    float offset = km * DistFbmNoise(pos.xz);\n    return offset;\n}\n\nfloat Turbulence(vec2 uv)\n{\n    const int octaves = 5;\n    float amplitude = 1.0;\n    uv *= 25.0;\n    float f = 0.0;\n    mat2 m = mat2(1.6, 1.2, -1.2, 1.6);\n    for (int i = 0; i < octaves; ++ i) {\n        f += abs(amplitude * Noise(uv));\n        uv = m * uv;\n        amplitude *= 0.5;\n    }\n    return f;\n}\n\nvec3 CalcNormal(vec3 pos)\n{\n    return normalize(cross(dFdx(pos),\n                           dFdy(pos)));\n}\n\n\nvec3 WindyWave(vec3 pos, vec3 normal)\n{\n    const float km = 1.0;\n    const float txt_scale = 1.0;\n    const float wind_freq = 0.1;\n    const float wind_amp = 10.0;\n    const float min_wind = 0.4;\n    \n    pos = txt_scale * wind_freq * pos;\n    float offset = km * FbmNoise(pos.xz);\n    offset = offset * 3.0 - floor(offset);\n    float turb = Turbulence(pos.xz + 0.01 * iTime);\n    float wind = min_wind + wind_amp * turb;\n    return pos + wind * offset * normal;\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 st = fragCoord.xy / iResolution.xy;\n    vec2 uv = fragCoord.xy / iResolution.y;\n    \n    vec3 normal = vec3(0.0, 1.0, 0.0);\n    vec3 pos = vec3(uv.x, 0.0, uv.y);\n\n    float st_offset = DistOffset(pos + iTime);\n    st_offset = st_offset * 4.0 - floor(st_offset);\n    pos = WindyWave(pos, normal);\n    normal = CalcNormal(pos);\n    const vec3 LIGHT_POS = vec3(1.0, 1.0, -0.4);\n    vec3 light_dir = normalize(LIGHT_POS - pos);\n    vec3 diffuse = clamp(dot(normal, light_dir), 0.0, 1.0) * vec3(0.9, 0.9, 0.6);\n    \n\tfragColor = 0.8 * texture(iChannel0, st + st_offset * 0.005) + 0.5 * vec4(diffuse, 1.0);\n}","name":"Image","description":"","type":"image"}]}