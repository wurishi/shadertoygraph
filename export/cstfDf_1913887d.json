{"ver":"0.1","info":{"id":"cstfDf","date":"1697892689","viewed":90,"name":"Heat transfer","username":"Nobelio","description":"basic simulation of heat transfer","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["simulation","heat"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":3,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float temp = texture(iChannel1, uv).x;\n    vec3 color;\n    if (temp>=0.5){\n        color = mix(vec3(1.0,1.0,1.0), vec3(1.0,0.4,0.0), (temp - 0.5) * 2.0);\n    } else{\n        color = mix(vec3(0.0,0.4,1.0), vec3(1.0,1.0,1.0), temp * 2.0);\n    }\n    float point = texture(iChannel3, uv).y;\n    \n    float mag = texture(iChannel3, uv).x;\n    mag = (tanh(1.5*mag - 2.0) + 1.0) / 2.0;\n    vec3 color2 = mix(vec3(1,1,1), vec3(1.0, 0, 0), mag);\n    \n    color = mix(color, color2, point);\n    \n    fragColor = vec4(color, 1.0);\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 R = iResolution.xy;\n    float partial_x = (texture(iChannel1, uv + vec2(0.1,0)*vec2(1.0/R)).x - texture(iChannel1, uv - vec2(0.1,0)*vec2(1.0/R)).x) / (0.2/R.x); \n    float partial_y = (texture(iChannel1, uv + vec2(0,0.1)*vec2(1.0/R)).x - texture(iChannel1, uv - vec2(0,0.1)*vec2(1.0/R)).x) / (0.2/R.y); //Temperatura Ã© sempre o primeiro\n    //valor da coordenada\n    \n    fragColor = vec4(partial_x, partial_y, 0.0, 0.0);\n    \n    \n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"#define SQ3 1.7320508075688772f\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 R = iResolution.xy;\n    vec2 uv = fragCoord/iResolution.xy;\n   \n    \n    float temp;\n    if (iTime < 2.0){\n        \n         vec4 G = texture(iChannel2,uv); \n         vec3 H = G.xyz;\n         temp = length(H)/SQ3;\n         fragColor = vec4(temp, 0.0, 0.0, 1.0);\n         return;\n    }\n    \n    \n        //fragColor = vec4(1.0, 0.0, P_pos);\n   \n    \n    //if (fragCoord.x <= 0.0 + 1.0 || fragCoord.x >= iResolution.x - 1.0 || fragCoord.y <= 0.0 + 1.0 || fragCoord.y >= iResolution.y - 1.0){\n    //    fragColor = vec4(0.0, 0.0, P_pos);\n    //    return;\n    //}\n    \n    if (length(fragCoord.xy - iMouse.xy) < 10.0){\n        fragColor = vec4(2.0, 0.0, 0.0, 0.0);\n        return;\n    }\n    \n   \n    \n    float double_partial_x = (texture(iChannel0, uv + vec2(0.1,0)*vec2(1.0/R)).x - texture(iChannel0, uv - vec2(0.1,0)*vec2(1.0/R)).x) / (0.2/R.x);\n    float double_partial_y = (texture(iChannel0, uv + vec2(0,0.1)*vec2(1.0/R)).y - texture(iChannel0, uv - vec2(0,0.1)*vec2(1.0/R)).y) / (0.2/R.y); //Agora a derivada parcial\n    \n    vec2 direction = vec2(double_partial_x, double_partial_y);\n    \n    \n    \n    float partial_t = 0.00001 * iTimeDelta * (double_partial_x + double_partial_y);\n    \n    \n    temp = texture(iChannel1, uv).x + partial_t;\n    \n    \n    \n    \n    fragColor = vec4(temp, 0.0, direction);\n    \n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":3,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"float random(vec2 co, float seed) {\n    return fract(sin(dot(co, vec2(12.9898, 78.233)) + seed) * 43758.5453);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 P_pos = vec2(0.0, 0.0);\n    vec2 uw = fragCoord/iResolution.x;\n    vec2 uv = fragCoord/iResolution.xy;\n    float mag = texture(iChannel3, uv).x;\n    if (fragCoord.x < 1.0){\n        if (random(uv, iTime) > 0.996){\n            vec2 uw_max = iResolution.xy / iResolution.x;\n            P_pos = vec2(random(uw, iTime * iTimeDelta) * uw_max.x, random(uw, iTime/iTimeDelta) * uw_max.y);\n            //P_pos = vec2(0.5,0.5);\n        } else{\n            P_pos = texture(iChannel3, vec2(0.000, uv.y)).zw;\n            vec2 direction = texture(iChannel0, (P_pos * iResolution.x) / iResolution.xy).xy;\n            P_pos -= 0.0005 * normalize(direction);\n            mag = length(direction);\n        }\n    }\n    \n    float point = texture(iChannel3, uv).y / 1.005; \n    \n    for (float i = 0.0; i <= iResolution.y; i++){\n        vec2 pos = texture(iChannel3, vec2(0.000, i/iResolution.y)).zw;\n        \n        if (length(pos - uw) < (1.0 / iResolution.x) ){\n            point = 1.0;\n            mag = texture(iChannel3, vec2(0.000, i/iResolution.y)).x;\n            break;\n        }\n    }\n    \n    fragColor = vec4(mag, point, P_pos);\n    \n    if (iTime < 1.0){\n        fragColor = vec4(0.0, 0.0, 0.0, 0.0);\n    }\n    \n}","name":"Buffer C","description":"","type":"buffer"}]}