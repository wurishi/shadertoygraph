{"ver":"0.1","info":{"id":"XdlGRH","date":"1554270330","viewed":319,"name":"Fractal Fish.","username":"Logos","description":"My first shader on Shadertoy. Fractal Fish - collage out of two mandelbrot pieces.","likes":16,"published":1,"flags":0,"usePreview":0,"tags":["2d","fractal","mandelbrot","complex","inversion","collage","binarydecomposition"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"// Created by Robert Śmietana (Logos) - 03.04.2019\n// Bielsko-Biała, Poland, UE, Earth, Sol, Milky Way, Local Group, Laniakea :)\n\n\nvec3 pixelColor(vec2 p)\n{\n    \n    //--- calculate water (background) color ---//\n    \n    vec3 wc = vec3(0.0, 0.2 + 0.4*(0.5 - 0.5*p.y), 0.3 + 0.4*(0.5 - 0.5*p.y));\n    wc += vec3(0.08*sin(p.y - p.x));\n    \n    \n    //--- get main body of the fish ---//\n    \n    if (p.x < 3.968)\n    {\n        p = vec2(p.x, -p.y) / dot(p, p);\n    }\n\n    \n\t//--- carve tail of the fish ---//\n    \n    else\n    {\n\t\tp.x -= 3.687;\n        if (0.359 - 0.2*cos(5.0*p.y) < dot(p, p)) return wc;\n    }\n\n    \n    //--- iterate mandelbrot and return pixel color ---//\n    \n\tvec2 z = vec2(p);  \n\tfor (int i = 1; i <= 100; i++)\n    {  \n\t\tz = vec2(z.x*z.x - z.y*z.y, 2.0*z.x*z.y) + p; \n\n\t\tif (504.0 + 300.0*sin(4.1*iTime) < dot(z, z))\n        {\n\t\t\treturn z.y < 0.0? vec3(0.0) : vec3(1.0);\n\t\t}\n\t}\n\n    \n    //--- that was water :) ---//\n    \n    return wc;\n    \n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    \n    //--- calculate point coordinates ---//\n    \n\tvec2 c = 2.1*(-2.0*fragCoord.xy/iResolution.xy + 0.9)*vec2(iResolution.x/iResolution.y, 1.0) - vec2(-2.0, 0.0);\n    \n    \n    //--- animate fish movement ---//\n\n    c.x += 0.3*sin(0.4*iTime);\n    c.y += 0.15 - 0.3*sin(0.43*iTime) + 0.2*cos(c.x);\n    \n    \n    //--- add tail swing ---//\n    \n    if (0.0 < c.x) c.x += 0.1*c.x*cos(2.0*iTime + sin(0.8*c.x));\n    \n\n    //--- calculate final pixel color ---//\n    \n    float a = 3.0;\n    float e = 1.0/min(iResolution.x, iResolution.y);    \n    vec3 col = vec3(0.0);\n    \n    for (float j = -a; j < a; j++)\n        for (float i = -a; i < a; i++)\n            col += pixelColor(c + 2.1*vec2(i, j) * (e/a)) / (4.0*a*a);\n\n\tfragColor = vec4(col, 1.0);\n    \n}\n","name":"Image","description":"","type":"image"}]}