{"ver":"0.1","info":{"id":"Ntf3Dj","date":"1622817917","viewed":557,"name":"Numbers in Cyberspace","username":"Kamoshika","description":"Cyberspace!!!!!!","likes":27,"published":1,"flags":0,"usePreview":0,"tags":["numbers","7segment","sevensegment"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI2 = acos(-1.) * 2.;\nconst float scale = 0.3;\n\nfloat hash1D(in float p)\n{\n    return fract(sin(p) * 6124.7621);\n}\n\nvec2 hash21(in float p)\n{\n    return fract(sin(vec2(p, p*1.4217)) * 6124.7621);\n}\n\nfloat hash2D(in vec2 p)\n{\n    vec2 v = vec2(162.1732, 116.1734);\n    return fract(sin(dot(p, v)) * 6124.7621);\n}\n\nfloat hash3D(in vec3 p)\n{\n    vec3 v = vec3(123.4116, 162.3271, 137.1618);\n    return fract(sin(dot(p, v)) * 6124.7621);\n}\n\nfloat noise3D(in vec3 p)\n{\n    vec3 i = floor(p);\n    vec3 f = fract(p);\n    f = f * f * (3. - 2. * f);\n    vec3 b = vec3(156, 12, 5);\n    float n = dot(i, b);\n\treturn mix(\tmix(\tmix(hash1D(n), hash1D(n + b.x), f.x),\n\t\t   \t\t\t\tmix(hash1D(n + b.y), hash1D(n + b.x + b.y), f.x),\n\t\t   \t\t\t\tf.y),\n\t\t  \t \tmix(\tmix(hash1D(n + b.z), hash1D(n + b.x + b.z), f.x),\n\t\t   \t\t\t\tmix(hash1D(n + b.y + b.z), hash1D(n + b.x + b.y + b.z), f.x),\n\t\t   \t\t\t\tf.y),\n\t\t  \t \tf.z);\n}\n\nfloat sdSeg(in vec2 p)\n{\n    p = abs(p);\n    return max(p.x - scale / 3., p.x + p.y - scale);\n}\n\nfloat sd0(in vec2 p)\n{\n    p = abs(p);\n    p.y -= scale;\n    if(p.y > p.x) {\n        p = p.yx;\n    }\n    p.x -= scale;\n    return sdSeg(p);\n}\n\nfloat sd1(in vec2 p)\n{\n    p.y = abs(p.y);\n    p -= scale;\n    return sdSeg(p);\n}\n    \nfloat sd2(in vec2 p)\n{\n    if(p.y < 0.) {\n        p *= -1.;\n    }\n    p.y = abs(p.y - scale);\n    if(p.y > p.x) {\n        p = p.yx;\n    }\n    p.x -= scale;\n    return sdSeg(p);\n}\n\nfloat sd3(in vec2 p)\n{\n    p.y = abs(abs(p.y) - scale);\n    if(p.y > p.x) {\n        p = p.yx;\n    }\n    p.x -= scale;\n    return sdSeg(p);\n}\n\nfloat sd4(in vec2 p)\n{\n    float d = sdSeg(p - vec2(-scale, scale));\n    p.y = abs(p.y) - scale;\n    if(p.y < -p.x) {\n        p = -p.yx;\n    }\n    p.x -= scale;\n    return min(d, sdSeg(p));\n}\n\nfloat sd5(in vec2 p)\n{\n    if(p.y < 0.) {\n        p *= -1.;\n    }\n    p.y = abs(p.y - scale);\n    if(p.y > -p.x) {\n        p = -p.yx;\n    }\n    p.x += scale;\n    return sdSeg(p);\n}\n\nfloat sd6(in vec2 p)\n{\n    float d = sdSeg(p - vec2(scale, scale));\n    p = abs(p);\n    p.y = abs(p.y - scale);\n    if(p.y > p.x) {\n        p = p.yx;\n    }\n    p.x -= scale;\n    return max(-d, sdSeg(p));\n}\n\nfloat sd7(in vec2 p)\n{\n    float d = sdSeg(p - vec2(scale, -scale));\n    p.y -= scale;\n    if(p.y > p.x) {\n        p = p.yx;\n    }\n    p.x -= scale;\n    return min(d, sdSeg(p));\n}\n\nfloat sd8(in vec2 p)\n{\n    p = abs(p);\n    p.y = abs(p.y - scale);\n    if(p.y > p.x) {\n        p = p.yx;\n    }\n    p.x -= scale;\n    return sdSeg(p);\n}\n\nfloat sd9(in vec2 p)\n{\n    float d = sdSeg(p - vec2(-scale, -scale));\n    p = abs(p);\n    p.y = abs(p.y - scale);\n    if(p.y > p.x) {\n        p = p.yx;\n    }\n    p.x -= scale;\n    return max(-d, sdSeg(p));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (fragCoord * 2. - iResolution.xy)/min(iResolution.x, iResolution.y);\n    vec3 col = vec3(0);\n    vec2 interval = vec2(3., 1.7);\n    \n    for(float i=0.; i<20.; i++) {\n        float L = 1. - fract(iTime) + i;\n        vec2 q = p / atan(.001, L) / 500.;\n        \n        L = dot(q,q) * 2. + L * L;\n        float I = ceil(iTime) + i;\n        q += hash21(I) * interval;\n        \n        vec3 ID = vec3(ceil(q / interval), I);\n        q = mod(q, interval) - interval * .5;\n        float n = hash3D(ID + ceil(iTime * 3.) * 1.3834);\n        ID.y += ceil(iTime * 10. + hash2D(vec2(ID.x, I)));\n        float n2 = noise3D(ID * .316572);\n        \n        float d = 0.;\n        float N = 10.;\n        if(n < 1. / N) {\n            d = sd0(q);\n        } else if(n < 2. / N) {\n            d = sd1(q);\n        } else if(n < 3. / N) {\n            d = sd2(q);\n        } else if(n < 4. / N) {\n            d = sd3(q);\n        } else if(n < 5. / N) {\n            d = sd4(q);\n        } else if(n < 6. / N) {\n            d = sd5(q);\n        } else if(n < 7. / N) {\n            d = sd6(q);\n        } else if(n < 8. / N) {\n            d = sd7(q);\n        } else if(n < 9. / N) {\n            d = sd8(q);\n        } else {\n            d = sd9(q);\n        }\n        \n        float temp = col.g;\n        if(-scale * .27 < d && d < -scale * .067 && n2 < .5) {\n            if(temp == 0.) {\n                col += vec3(.3, 1, .4) * exp(-L * .002);\n            }\n            col += step(temp, .7) * pow(hash1D(n2), 32.);\n        }\n    }\n\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}