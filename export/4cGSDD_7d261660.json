{"ver":"0.1","info":{"id":"4cGSDD","date":"1715161810","viewed":150,"name":"random tiling by thin rectangles","username":"jt","description":"Random tiling by horizontal and vertical thin rectangles (1xn and nx1).\nFor each grid tile, decide direction (horizontal / vertical) by bit hash.\nSearch left / right respectively down / up until hash value changes.\nInt id of rectangle is twice its center.","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["noise","grid","random","rectangle","tiling","horizontal","vertical","thin","needle","nx1","1xn"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/4cGSDD random tiling by thin rectangles, 2024 by jt\n\n// Random tiling by horizontal and vertical thin rectangles (1xn and nx1).\n// For each grid tile, decide direction (horizontal / vertical) by bit hash.\n// Search left / right respectively down / up until hash value changes.\n// Int id of rectangle is twice its center\n// (to avoid half-integer values when averaging).\n\n// tags: noise, grid, random, tiling, horizontal, vertical, thin, needle, nx1, 1xn\n\n// The MIT License\n// Copyright (c) 2024 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// https://www.shadertoy.com/view/WttXWX \"Best\" Integer Hash by FabriceNeyret2,\n// implementing Chris Wellons https://nullprogram.com/blog/2018/07/31/\nuint triple32(uint x)\n{\n    x ^= x >> 17u;\n    x *= 0xed5ad4bbu;\n    x ^= x >> 11u;\n    x *= 0xac4c1b51u;\n    x ^= x >> 15u;\n    x *= 0x31848babu;\n    x ^= x >> 14u;\n    return x;\n}\n\n#define HASH(u) triple32(u)\n\nuint uhash(uvec2 v)\n{\n    return HASH(v.x + HASH(v.y));\n}\n\nbool bhash(uvec2 v)\n{\n    return (uhash(v) & 1u) != 0u;\n}\n\nivec2 scan(bool v, ivec2 p, ivec2 d)\n{\n    ivec2 q = p;\n    int n = 50; // max iterations\n    for(int i = 0; i < n; i++) // SAFE, stops after max. iterations if hash value doesn't change\n    {\n        if(v != bhash(uvec2(q + d)))\n            break;\n        q += d;\n    }\n/*\n    while(v == bhash(uvec2(q + d))) // UNSAFE - endless loop if hash never changes!\n    {\n        q += d;\n    }\n*/\n    return q;\n}\n\nivec4 tile(ivec2 p) // https://www.shadertoy.com/view/lfySW1 needle noise by jt\n{\n    bool d = bhash(uvec2(p));\n    return\n        d\n        ?\n        ivec4(scan(d, p, ivec2(0,-1)),scan(d, p, ivec2(0,+1)))\n        :\n        ivec4(scan(d, p, ivec2(-1,0)),scan(d, p, ivec2(+1,0)));\n}\n\n/*\n// SAFE, stops after max. iterations if hash value doesn't change\nivec4 tile(ivec2 p) // https://www.shadertoy.com/view/lfySW1 needle noise by jt\n{\n    ivec4 result;\n    int n = 50; // max iterations\n    bool dir = bhash(uvec2(p));\n    if(dir)\n    {\n        int a = p.y;\n        for(int i = 0; i < n; i++)\n        {\n            a--;\n            if(dir != bhash(uvec2(p.x, a)))\n                break;\n        }\n\n        int b = p.y;\n        for(int i = 0; i < n; i++)\n        {\n            b++;\n            if(dir != bhash(uvec2(p.x, b)))\n                break;\n        }\n\n        result = ivec4(p.x,a,p.x,b);\n    }\n    else\n    {\n        int a = p.x;\n        for(int i = 0; i < n; i++)\n        {\n            a--;\n            if(dir != bhash(uvec2(a,p.y)))\n                break;\n        }\n\n        int b = p.x;\n        for(int i = 0; i < n; i++)\n        {\n            b++;\n            if(dir != bhash(uvec2(b,p.y)))\n                break;\n        }\n\n        result = ivec4(a,p.y,b,p.y);\n    }\n\n    return result;\n}\n*/\n/*\n// UNSAFE - endless loop if hash never changes!\nivec4 tile(ivec2 p) // https://www.shadertoy.com/view/lfySW1 needle noise by jt\n{\n    ivec4 r;\n    bool d = bhash(uvec2(p));\n    if(d)\n    {\n        int a = p.y;\n        while(d == bhash(uvec2(p.x, --a)))\n            ;\n\n        int b = p.y;\n        while(d == bhash(uvec2(p.x, ++b)))\n            ;\n\n        r = ivec4(p.x,a,p.x,b);\n    }\n    else\n    {\n        int a = p.x;\n        while(d == bhash(uvec2(--a,p.y)))\n            ;\n\n        int b = p.x;\n        while(d == bhash(uvec2(++b,p.y)))\n            ;\n\n        r = ivec4(a,p.y,b,p.y);\n    }\n\n    return r;\n}\n*/\n// https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\nvec3 hash31(float p)\n{\n    vec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\n\nvec3 hash32(vec2 p) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n    vec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\n\nbool edge(vec2 I)\n{\n    float e = 0.1;\n    ivec4 a = tile(ivec2(floor(I-e)));\n    ivec4 b = tile(ivec2(floor(I+e)));\n    vec3 A = hash32(vec2(a.xy + a.zw));\n    vec3 B = hash32(vec2(b.xy + b.zw));\n    return any(greaterThan(abs(A-B),vec3(0.001)));\n}\n\nvoid mainImage(out vec4 o, in vec2 I)\n{\n    vec2 R = iResolution.xy;\n    I = (2. * I - R) / R.y;\n    vec3 color = vec3(0);\n    //if(all(lessThan(abs(I), vec2(1))))\n    {\n        I *= 24.0;\n\n        ivec4 result = tile(ivec2(floor(I-0.1)));\n        color = hash32(vec2(result.xy + result.zw));\n        if(edge(I)) color *= 0.0;\n\n        if(iMouse.z > 0.0)\n        {\n            color = vec3(bhash(uvec2(ivec2(floor(I)))));\n        }\n    }\n    o = vec4(color, 1);\n}\n","name":"Image","description":"","type":"image"}]}