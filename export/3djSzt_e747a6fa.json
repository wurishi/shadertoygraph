{"ver":"0.1","info":{"id":"3djSzt","date":"1554727121","viewed":173,"name":"cam with Derivatives","username":"gagarinloops","description":"the dFdx and dFdy functions.\n","likes":5,"published":1,"flags":2,"usePreview":0,"tags":["derivative","derivatives","dfdx","dfdy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of \"Fun with Derivatives\" by Dave_Hoskins. https://shadertoy.com/view/4sX3WN\n// 2019-04-08 12:30:52\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec3 vid = texture(iChannel1, fragCoord.xy / iResolution.xy).rgb;\n\tfloat v = vid.r+vid.g+vid.b;\n\tfloat w = sin(iTime*1.0)*11.0;\n\t\n\tvec2 n = vec2(dFdx(v) * w, dFdy(v) * w);\n\tfloat t = sqrt(dot(n,n));\n\t\n\tfragColor = vec4(vid*.4+(vid * vid*vec3(n.x, n.y, n.x*n.y))*t,1.0);\n}","name":"Image","description":"","type":"image"}]}