{"ver":"0.1","info":{"id":"NsySWw","date":"1634700095","viewed":54,"name":"Simple Raymarching Pt 1","username":"dreymatic","description":"first iteration raymarching","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415925359\n#define TWO_PI 6.2831852\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURFACE_DIST .01\n\nfloat dot2(in vec2 v) { return dot(v,v); }\nfloat dot2(in vec3 v) { return dot(v,v); }\nfloat ndot(in vec2 a, in vec2 b) { return a.x*b.x - a.y*b.y; }\n\nfloat sdSphere( vec3 p, float s ) { return length(p) - s; }\n\n\nfloat GetDist(vec3 p) {\n    vec4 s = vec4(0, 1, 6. + sin(iTime)*3.,1);\n    float sphereDist = length(p-s.xyz) - s.w;\n    float planeDist = p.y;\n    float d = min(sphereDist, planeDist);\n    \n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd)\n{\n    float dO = 0.;\n    for (int i = 0; i < MAX_STEPS; i++)\n    {\n        vec3 p = ro + rd * dO;\n        float ds = GetDist(p);\n        dO += ds;\n        if(dO > MAX_DIST || ds < SURFACE_DIST) break;\n    }\n    return dO;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord.xy-0.5*iResolution.xy)/iResolution.y;\n    \n    vec3 ro = vec3(0, 1, 0);\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1));\n    float d = RayMarch(ro, rd);\n    \n    d /= 10.;\n    \n    fragColor = vec4(vec3(d), 1.0);\n}","name":"Image","description":"","type":"image"}]}