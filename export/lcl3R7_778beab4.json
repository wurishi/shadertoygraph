{"ver":"0.1","info":{"id":"lcl3R7","date":"1703022291","viewed":31,"name":"Norm'","username":"BearKirb","description":"alkjsdflakjsdfhlaksjdf","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["d","sdf","sdf","a","asd","asd","asdf","f","s","s","sd","fa","fa","fa","fa","fas","lafkjhdlaj"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float distanceToMandelbrot( in vec2 c )\n{\n    #if 1\n    {\n        float c2 = dot(c, c);\n        // skip computation inside M1 - https://iquilezles.org/articles/mset1bulb\n        if( 256.0*c2*c2 - 96.0*c2 + 32.0*c.x - 3.0 < 0.0 ) return 0.0;\n        // skip computation inside M2 - https://iquilezles.org/articles/mset2bulb\n        if( 16.0*(c2+2.0*c.x+1.0) - 1.0 < 0.0 ) return 0.0;\n    }\n    #endif\n\n    // iterate\n    float di =  1.0;\n    vec2 z  = vec2(0.0);\n    float m2 = 0.0;\n    vec2 dz = vec2(0.0);\n    for( int i=0; i<100; i++ )\n    {\n        if( m2>1024.0 ) { di=0.0; break; }\n\n\t\t// Z' -> 2·Z·Z' + 1\n        dz = 2.0*vec2(z.x*dz.x-z.y*dz.y, z.x*dz.y + z.y*dz.x) + vec2(1.0,0.0);\n\t\t\t\n        // Z -> Z² + c\t\t\t\n        z = vec2( z.x*z.x - z.y*z.y, 2.0*z.x*z.y ) + c;\n\t\t\t\n        m2 = dot(z,z);\n    }\n\n    // distance\t\n\t// d(c) = |Z|·log|Z|/|Z'|\n\t\n    return di>.5 ? 0. : .5*sqrt(dot(z,z)/dot(dz,dz))*log(dot(z,z));\n}\nfloat scene(vec2 uv){\nreturn distanceToMandelbrot(uv*5.0-vec2(0.8,0.0));\n}\nvec2 getNormal(vec2 uv){\nfloat epsilon = 1e-6;\nfloat compx=((scene(uv+vec2(epsilon,0.0))-scene(uv+vec2(-epsilon,0.0)))/epsilon);\nfloat compy=((scene(uv+vec2(0.0,epsilon))-scene(uv+vec2(0.0,-epsilon)))/epsilon);\nreturn normalize(vec2(compx,compy));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = ((fragCoord-iResolution.xy/2.0)/iResolution.x);\n\n    // Time varying pixel color\n    vec2 mouse;\n if (iMouse.xy==vec2(0.0,0.0)){\n  mouse=(vec2(450.0,178.0)/iResolution.xy-.5)/vec2(1,2);\n }else{\n     mouse = (iMouse.xy/iResolution.xy-.5)/vec2(1,2);\n    }\n    vec2 normal = getNormal(uv/10.0+mouse/2.0);\n    float c=dot(normalize(vec3(normal.x,normal.y,0.2)),normalize(vec3(0.1,0.0,1.0)))/0.5;\n\n    // Output to screen\n    fragColor = vec4(c,c,c,1.0);\n}","name":"Image","description":"","type":"image"}]}