{"ver":"0.1","info":{"id":"lcjBRz","date":"1724600043","viewed":13,"name":"Normal map for scooped sphere","username":"KivuSupremeKing","description":"I tried to make a scooped sphere normal map, and lighting on it. There is still some problems, I don't really know how to fix them, but the average result still satisfy me. You can move the mouse to adjust the view.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 rot2D(float angle)\n{\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat2(c, -s, s, c);\n}\n\n\nfloat sdSphere(vec3 o, float s)\n{\n    return length(o) - s;\n}\n\nfloat smin( float a, float b, float k )\n{\n    k *= 1.0;\n    float r = exp2(-a/k) + exp2(-b/k);\n    return -k*log2(r);\n}\n\n\nvec3 normalSphere(vec3 p, vec3 o)\n{\n    return normalize(p - o);\n}\n\nvec3 normalMap(vec3 p)\n{\n    vec3 r = normalSphere(p, vec3(0, 0, 0));\n    vec4[5] scoopedSpheres = vec4[5](vec4(1.5, 1.3, 0, .5), \n                vec4(-1.5, -.3, 0, 1.), \n                vec4(1.8, .1, 1., .8), \n                vec4(1.2, -.3, -1.3, .6), \n                vec4(0., .3, 1.8, .5));\n    \n    for (int i = 0; i < 5; i++) {\n        if (length(p - scoopedSpheres[i].xyz) <= scoopedSpheres[i].a + 0.001) {\n            r = -normalSphere(p, scoopedSpheres[i].xyz);\n            return r;\n        }\n    }\n    return r;\n}\n\n\nfloat map(vec3 p)\n{\n    float sphere = sdSphere(p - vec3(0, 0, 0), 2.);\n    float r = sphere;\n    vec4[5] scoopedSpheres = vec4[5](vec4(1.5, 1.3, 0, .5), \n                vec4(-1.5, -.3, 0, 1.), \n                vec4(1.8, .1, 1., .8), \n                vec4(1.2, -.3, -1.3, .6), \n                vec4(0., .3, 1.8, .5));\n    \n    for (int i = 0; i < 5; i++) {\n        r = max(r, -sdSphere(p - scoopedSpheres[i].xyz, scoopedSpheres[i].a));\n    }\n    \n    return r;\n}\n\nfloat shadow(vec3 ro, vec3 rd,float maxT, float k)\n{\n    float res = 1.0;\n    float t = 0.1;\n    for( int i=0; i<256 && t<maxT; i++ )\n    {\n        float h = map(ro + t*rd);\n        res = min( res, h/(k*t) );\n        t += clamp(h, 0.005, 0.50);\n        if( res< -1.0 || t>maxT ) break;\n    }\n    res = max(res,-1.0);\n    return 0.25 * (1.0+res) * (1.0+res) * (2.0-res);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = ((fragCoord*2.) - iResolution.xy) / iResolution.y;\n    vec2 m = (iMouse.xy * 2. - iResolution.xy) / iResolution.y;\n    if (iMouse.xy == vec2(0.))\n        m = vec2(0.);\n    float limit = m.x;\n    float fov = 1.;\n\n    vec3 ro = vec3(0, 0, -3);\n    vec3 rd = normalize(vec3(uv * fov, 1));\n    \n    ro.xz *= rot2D(iTime / 2.);\n    rd.xz *= rot2D(iTime / 2.);\n    \n    vec3 color = vec3(1.3 - min(0.2, rd.y / 2.));\n    color *= vec3(0.52, 0.80, 0.92);\n   \n    vec3 normal = vec3(0.);\n    \n    \n    float t = 0.;\n    \n    vec3 p = vec3(0.);\n    \n    for (int i = 0; i < 120; i += 1) {\n        p = ro + rd * t;\n\n        float d = map(p);\n\n        t += d;\n        \n        if (d < 0.001) {\n            p = ro + rd * t;\n            normal = normalMap(p);\n            break;\n        }\n        \n        if (t > 100.) break;\n    }\n    \n    if (uv.x >= limit)\n    {\n        vec3 color = vec3(1.);\n        vec3 lightPoint = vec3(0, 0, -3);\n        \n        lightPoint.xz *= rot2D(iTime / 2.);\n        \n        if (normal != vec3(0)) {\n            vec3 lightPointDir = normalize(p - lightPoint);\n            float dotV = dot(lightPointDir, normal) * -1.;\n            if (dotV < 0.) dotV = 0.;\n            \n            color *= dotV * vec3(1.);\n            \n            float shadowV = shadow(p, -lightPointDir, length(p - lightPoint), 1./15.);\n            color *= shadowV;\n        } else\n            color = vec3(0.);\n        fragColor = vec4(color, 1);\n    } else {\n         if (normal == vec3(0.)) normal = vec3(0.5);\n        fragColor = vec4(normal, 1);\n    }\n}","name":"Image","description":"","type":"image"}]}