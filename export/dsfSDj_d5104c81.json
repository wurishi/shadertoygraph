{"ver":"0.1","info":{"id":"dsfSDj","date":"1669565716","viewed":89,"name":"Moire Room Lite","username":"cacheflowe","description":"Moire & interference patterns, ported from my Moire Room installation","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["patterns","grayscale","moire"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"////////////////////////\n// helpers\n////////////////////////\n\n#define PI     3.14159265358\n#define TWO_PI 6.28318530718\n\nvec2 rotateCoord(vec2 uv, float rads) {\n    uv *= mat2(cos(rads), sin(rads), -sin(rads), cos(rads));\n    return uv;\n}\n\nfloat saw(float rads) {\n    rads += PI * 0.5;\n    float percent = fract(rads/PI);\n    float dir = sign(sin(rads));\n    return dir * (2. * percent  - 1.);\n}\n\nfloat oscBetween(float low, float high, float time, float offset) {\n  float range = abs(high - low);\n  float halfRange = range / 2.;\n  float midPoint = low + halfRange;\n  return midPoint + halfRange * sin(offset + time);\n}\n\n////////////////////////\n// patterns\n////////////////////////\n\nvec3 drawChevronStripes(vec2 uv) {\n    // rotate\n    float rotate = oscBetween(-1., 1., iTime/2., 0.);\n    uv = rotateCoord(uv, rotate * -1.);\n    uv.y *= iResolution.y / iResolution.x;\n    // build params\n    float altTime = iTime * 0.5;\n    float chevronAmp = 0.06;\n    float freqAmp = oscBetween(0., 1., iTime/2., 0.);\n    float freq = 10. + freqAmp * 20.;\n    float zoom = oscBetween(0., 1., iTime/3., PI);\n    float numLines = 20. + zoom * 100.;\n    float x = uv.x;\n    // lerp between saw & sin\n    float sawWaveDisp = saw(x * freq);\n    float sinWaveDisp = sin(x * freq);\n    uv.y += chevronAmp * mix(sawWaveDisp, sinWaveDisp, 0.5 + 0.5 * sin(altTime));\n    float col = 0.5 + 0.5 * sin(uv.y * numLines);\n    return vec3(col);\n}\n\nvec3 drawWarpVortex(vec2 uv) {\n    float rotate = oscBetween(-1., 1., iTime/3., 0.);\n    float altTime = iTime * 0.05;\n    float rads = atan(uv.x, uv.y) + rotate; \n    float zoom = oscBetween(0.3, 1., iTime/3., PI);\n    float dist = length(uv) * zoom;\n    float spinAmp = oscBetween(-2., 2., iTime/4., 0.);\n    float spinFreq = oscBetween(0.3, 5., iTime/3., PI);;\n    rads += sin(altTime + dist * spinFreq) * spinAmp * (1. - dist/8.);\n    float radialStripes = 24.;\n    float col = 0.5 + 0.5 * sin(rads * radialStripes);\n    return vec3(col);\n}\n\n////////////////////////\n// main - combine the patterns!\n////////////////////////\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Centered pixel coordinates\n    vec2 uv =  (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n\n    // oscillated pattern mix\n    float drawFunc1Mix = oscBetween(0.3, 0.7, iTime/3., 0.);\n    float drawFunc2Mix = oscBetween(0.3, 0.7, iTime/2., PI/2.);\n\n    // sum of patterns\n    vec3 col = vec3(0.);\n    col += drawFunc1Mix * drawChevronStripes(uv);\n    col += drawFunc2Mix * drawWarpVortex(uv);\n    \n    // test individual patterns\n    // col = drawChevronStripes(uv);\n    // col = drawWarpVortex(uv);\n\n    // \"threshold\" combine patterns & output\n    col = smoothstep(0.45, 0.55, col);\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}