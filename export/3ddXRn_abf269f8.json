{"ver":"0.1","info":{"id":"3ddXRn","date":"1571314231","viewed":199,"name":"ShaderTober - Legend","username":"Flopine","description":"A small doodle with inktober's theme \"Legend\".. Slowly recovering from the end of a serie I've watched for 9 years... but the magic of friendship grows ;) ","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","mlp","gems","inktober"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, Coyhot, Alkama and YX for teaching me\n// Thanks LJ for giving me the love of shadercoding :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  https://twitter.com/CookieDemoparty\n\n#define PI 3.141592\n#define ITER 100.\n\nstruct EoH\n{\n    float dist;\n    vec3 color;\n};\n\nEoH struct_min(EoH a, EoH b)\n{\n   if (a.dist < b.dist)return a;\n    else return b;\n}\n\nfloat stmin (float a, float b, float k, float n)\n{\n    float st = k/n;\n    float u = b-k;\n    return min(min(a,b), 0.5*(u+a+abs(mod(u-a+st,2.*st)-st)));\n}\n\nmat2 rot (float a)\n{return mat2(cos(a),sin(a),-sin(a),cos(a));}\n\nfloat od (vec3 p, float d)\n{  \n    p.xz *= rot(iTime);\n    return dot(p,normalize(sign(p)))-d;\n}\n\nfloat box(vec3 p, vec3 c)\n{\n    vec3 q = abs(p)-c;\n    return min(0., max(q.x,max(q.y, q.z))) + length(max(q,0.));\n}\n\nfloat plane (vec3 p, vec3 n, float dist)\n{return dot(p,normalize(n))-dist;}\n\n\nfloat crystal (vec3 p)\n{\n  p.xz *= rot(iTime);\n  float b = box(p, vec3(.5, 0.7, 0.15));\n  p = abs(p);\n  float p1 = plane (p, vec3(0.6,1.,0.7), 0.5);\n  float p2 = plane (p, vec3(1.,0.,0.8), 0.3);\n  float d = max(p2,max(b,p1));\n  return d;\n}\n\nEoH SDF (vec3 p)\n{\n    EoH magic = EoH(stmin(crystal(p),od(p,0.4),0.2,4.), vec3(.8,0.1,0.7));\n    p.xy *= rot(iTime*0.5);\n    EoH honesty = EoH(crystal(p+vec3(0.,-2.,0.)),vec3(0.8,0.3,0.));\n    EoH generosity = EoH(crystal(p+vec3(2.,-.5,0.)), vec3(0.5,0.,0.6));\n    EoH laughter = EoH(crystal(p+vec3(-2.,-.5,0.)), vec3(0.,0.5,0.8));\n    EoH loyalty = EoH(crystal(p+vec3(1.,1.8,0.)), vec3(0.8,0.1,0.));\n    EoH kindness = EoH(crystal(p+vec3(-1.,1.8,0.)), vec3(.8,0.4,0.7));   \n    return struct_min(honesty, \n                      struct_min(generosity,\n                      \t\t\tstruct_min(laughter,\n                                           struct_min(loyalty, \n                                                      struct_min(kindness, magic)\n                                                                )\n                                          )\n                                )\n                     );\n}\n\nvec3 getnorm (vec3 p)\n{\n    vec2 eps = vec2(0.01,0.);\n    return normalize(SDF(p).dist-vec3(SDF(p-eps.xyy).dist,\n                                 SDF(p-eps.yxy).dist,\n                                 SDF(p-eps.yyx).dist));\n}\n\nvoid crystal_shading (inout vec3 color, vec3 n, vec3 l, vec3 rd)\n{\n    // fresnel\n    float fre = pow(clamp(1.-dot(-rd,n),0.,1.), 4.);\n    color += fre* color*3.;\n    \n    // specular\n    vec3 h = normalize(l-rd);\n    float spe = pow(max(0.,dot(h,n)),7.);\n    color += spe*0.8;\n}\n\n// courtesy of Alkama\nvec3 pales (vec2 uv)\n{\n  uv *= rot(-iTime*.2);\n  return floor(smoothstep(0.1, 0.2,cos(atan(uv.y, uv.x)*5.)))*vec3(0.4);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n\n    vec3 ro = vec3(0.,0.,-3.),\n        p = ro,\n        rd = normalize(vec3(uv,1.)),\n        col = mix(vec3(0.5,0.,0.6),vec3(0.8,0.5,1.),pales(uv))*0.8;\n    \n    float shad = 0.;\n    bool hit = false;\n    \n    for (float i=0.; i<ITER; i++)\n    {\n        float d = SDF(p).dist;\n        if (d<0.001)\n        {\n            hit = true;\n            shad = i/ITER;\n            break;\n        }\n        p += d * rd;\n    }\n\n    if (hit)\n    {\n        vec3 n = getnorm(p);\n        vec3 l = vec3(0.,6.,-6.);\n        col = SDF(p).color;\n        crystal_shading(col,n,l,rd);\n        col *= 1.-shad;\n    }\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}