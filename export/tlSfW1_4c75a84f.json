{"ver":"0.1","info":{"id":"tlSfW1","date":"1598809571","viewed":41,"name":"haiba w/ specular","username":"radikai","description":"shadowy effect","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["shadow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define STEPS 16.\n\nfloat haiba(vec2 uv) {\n\tuv \t\t\t= uv * 4.0;\n    uv.x \t\t+= 1.5;\n    float x \t= 1.0;\n    float w \t= 0.7;\n    float cp \t= w;\n\n    if (abs(cp - w - uv.x) < w) { \n        vec2 _uv\t= uv - vec2(cp - (w * .5), 0.);\n\n        // -- H --   \n        _uv.y \t\t-=.1;\n\n        _uv.x \t\t= abs(_uv.x);\n\n        float _x \t= length(vec2(max(0., abs(_uv.x) - .25), _uv.y));\n\n        float _f \t= min(_x, length(vec2(_uv.x - .25, max(0., abs(_uv.y) - .5))));\n\n        return _f;\n    }\n\n    cp \t\t\t+= w;\n\n    if (abs(cp - w - uv.x) < w) { \n        vec2 _uv \t= uv - vec2(cp - (w * .5), 0.);\n\n        // -- a --   \n        _uv \t\t= -_uv;\n\n        float _x \t= abs(length(vec2(max(0., abs(_uv.x) - .05), _uv.y - .2)) - .2);            \n\n        _x \t\t\t= min(_x, length(vec2(_uv.x + .25, max(0., abs(_uv.y - .2) - .2))));\n\n        float _f \t= min(_x, (_uv.x < 0.? _uv.y <0. : atan(_uv.x, _uv.y + 0.15) > 2.) ? \n                       abs(length(vec2(_uv.x, max(0., abs(_uv.y) - .15))) - .25) : \n                       length(vec2(_uv.x - .22734, _uv.y + .254)));\n\n        return _f;\n    }\n\n    w \t\t\t= 0.3;\n\n    cp \t\t\t+= w;\n\n    if (abs(cp - w - uv.x) < w) { \n        vec2 _uv \t= uv - vec2(cp - (w * .5), 0.);\n\n        // -- i --\n\n        float _f \t= min(length(vec2(_uv.x, max(0., abs(_uv.y) - .4))), length(vec2(_uv.x, _uv.y - .6)));\n\n        return _f;\n    }\n\n    w \t\t\t= 0.7;\n\n    cp \t\t\t+= w;\n\n    if (abs(cp - w - uv.x) < w) { \n        vec2 _uv \t= uv - vec2(cp - (w * .5), 0.);\n\n        // -- b --\n\n        float _x \t= abs(length(vec2(_uv.x, max(0., abs(_uv.y) - .15))) - .25);\n        _uv.x \t\t+= .25;\n        _uv.y \t\t-= .2;\n        float _s \t= length(vec2(_uv.x, max(0., abs(_uv.y) - .6)));\n        float _f \t= min(_x, _s);\n\n        return _f;\n    }\n\n    cp \t\t\t+= w;\n\n    if (abs(cp - w - uv.x) < w) { \n        vec2 _uv \t= uv - vec2(cp - (w * .5), 0.);\n\n        // -- a --   \n        _uv \t\t= -_uv;\n\n        float _x \t= abs(length(vec2(max(0., abs(_uv.x) - .05), _uv.y - .2)) - .2);            \n\n        _x \t\t\t= min(_x, length(vec2(_uv.x + .25, max(0., abs(_uv.y - .2) - .2))));\n\n        float _f \t= min(_x, (_uv.x < 0.? _uv.y <0. : atan(_uv.x, _uv.y + 0.15) > 2.) ? \n                       abs(length(vec2(_uv.x, max(0., abs(_uv.y) - .15))) - .25) : \n                       length(vec2(_uv.x - .22734, _uv.y + .254)));\n\n        return _f;\n    }\n        \n    return 1.0;\n}\n\nfloat scene (in vec2 p) {\n\tfloat f \t= haiba(p) * 6.5;\n   \n\treturn exp(-.5*f)/(f + 1.);\n}\n\nfloat scene_s(in vec2 uv) {\n\treturn clamp(100. * scene(uv) - 50., 1., 10.);\n}\n\nfloat spec(in vec2 uv, in vec2 m) {\n    vec2  e     = 1. / iResolution.xy;\n    float f     = scene_s(uv);\n    vec2  n     = vec2(scene_s(uv - vec2(e.x, 0)) - f, scene_s(uv - vec2(0, e.y)) - f);\n    \n    vec2  l     = m - uv;\n    float d     = length(l);\n    float ndl   = dot(l / d, normalize(n));\n    \n    float s     = clamp(ndl * clamp(1. - d, 0., 1.), 0., 1.);\n\treturn s * s;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv \t= (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    vec2 m \t\t= (iMouse.xy - 0.5 * iResolution.xy) / iResolution.y;\n    \n    vec2 o \t\t= uv;\n    vec2 dr \t= (m - uv) / STEPS;\n    \n    for (float i = 0.; i < 1.; i += 0.5/STEPS) {\n        float f = scene (o);\n        f \t\t= .175 * pow((0.975 + f * f), -10.);\n        o \t\t+= f * dr;\n    }\n    \n    o \t\t\t-= m;\n    \n    vec3 col \t= vec3(0.);\n    vec3 lcol \t= vec3(0.15); \n\n    float d \t= dot(o, o);\n\tvec3 sun \t= .1 * lcol * exp(2. / (2.5 * d + 4. * lcol));    \n    col \t\t+= sun;\n \n\tfloat f \t= clamp(100. * scene(uv) - 50., 1., 10.);\n    col \t\t*= f;\n        \n    col \t\t= pow(col, vec3(0.55)); // gamma correction\n    \n\tfragColor \t= vec4(2.0*spec(uv, m)) + vec4(col, 1.);\n}\n","name":"Image","description":"","type":"image"}]}