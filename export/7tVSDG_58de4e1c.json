{"ver":"0.1","info":{"id":"7tVSDG","date":"1641383021","viewed":356,"name":"Fourier Series Illustration","username":"pdcxs","description":"Fourier Series Illustration.\nInspired by: https://www.youtube.com/watch?v=r6sGWTCMz2k","likes":14,"published":1,"flags":0,"usePreview":1,"tags":["2d","fourier","series"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// use manim to generate points\n// https://github.com/3b1b/manim\n// code:\n/*\nfrom manimlib import *\n\nclass GetPoints(Scene):\n    def construct(self):\n        symbol = SingleStringTex(\"\\\\pi\")\n        self.add(symbol)\n        n = 200\n        t = symbol.submobjects[0]\n        for i in range(n):\n            p = t.point_from_proportion(i / n)\n            print(f\"vec2({10*p[0]},{10*p[1]}),\")\n*/\n#define POINT_NUM 200\n#define PI 3.14159265\n#define AA 3\n#define PATH_NUM 20\n#define FREQ_NUM 21\n\nvec2 pts[] = vec2[] (\n    vec2(-0.1612799999999993, 0.8215192799999989),\n    vec2(-0.0902153750929683, 0.8215192799999989),\n    vec2(-0.019150750185937336, 0.8215192799999989),\n    vec2(0.051913874721093635, 0.8215192799999989),\n    vec2(0.12297849962812465, 0.8215192799999991),\n    vec2(0.19404312453515563, 0.8215192799999989),\n    vec2(0.26510774944218657, 0.8215192799999991),\n    vec2(0.3361723743492176, 0.8215192799999989),\n    vec2(0.40723699925624857, 0.8215192799999989),\n    vec2(0.3861285534819341, 0.7219989426635012),\n    vec2(0.36517929567565754, 0.6269561038401359),\n    vec2(0.345718632994566, 0.5378567257183271),\n    vec2(0.32774656543865943, 0.454700808298075),\n    vec2(0.31126309300793764, 0.3774883515793793),\n    vec2(0.2962682157024007, 0.30621935556224006),\n    vec2(0.28276193352204876, 0.24089382024665776),\n    vec2(0.2707442464668816, 0.18151174563263175),\n    vec2(0.26021515453689936, 0.12807313172016233),\n    vec2(0.25117465773210207, 0.08057797850924958),\n    vec2(0.24362275605248956, 0.039026285999893315),\n    vec2(0.23477978842799632, -0.013649637209751594),\n    vec2(0.22405108623294592, -0.08611895826890723),\n    vec2(0.21508590573166547, -0.15793733594199005),\n    vec2(0.20788424692415491, -0.2291047702289999),\n    vec2(0.20244610981041433, -0.2996212611299365),\n    vec2(0.19877149439044367, -0.3694868086448002),\n    vec2(0.19686040066424293, -0.438701412773591),\n    vec2(0.19674199363926065, -0.5123455369044103),\n    vec2(0.1986663225836545, -0.5853005935269704),\n    vec2(0.2029348380042786, -0.6504973726592227),\n    vec2(0.2108778373598397, -0.7213897406602932),\n    vec2(0.22212180161033646, -0.7915351649340396),\n    vec2(0.23666673075576894, -0.8609336454804624),\n    vec2(0.259862186458721, -0.9484643683672898),\n    vec2(0.2853925675440098, -1.0165284672859909),\n    vec2(0.31317989803131224, -1.0647496467332085),\n    vec2(0.36573861557352383, -1.1049719302396335),\n    vec2(0.4367218667169831, -1.112993702212323),\n    vec2(0.5043481075819111, -1.0938225305863567),\n    vec2(0.5634359239639892, -1.052198249248417),\n    vec2(0.6069545897187286, -0.9961247376582674),\n    vec2(0.6248731937408404, -0.9276990113980026),\n    vec2(0.6115904709241103, -0.8564284824643045),\n    vec2(0.5871036565611041, -0.7922289604641926),\n    vec2(0.5628603707647185, -0.7265426616900563),\n    vec2(0.5409501666727268, -0.6597415765731951),\n    vec2(0.5213730442851294, -0.5918257051136093),\n    vec2(0.5041290036019261, -0.5227950473112988),\n    vec2(0.48921804462311674, -0.4526496031662631),\n    vec2(0.4766401673487015, -0.3813893726785027),\n    vec2(0.466460900890957, -0.3095369301339186),\n    vec2(0.459576690715385, -0.24558299775294268),\n    vec2(0.45435520250028505, -0.17773029089285544),\n    vec2(0.45079643624565735, -0.1059788095536571),\n    vec2(0.4489003919515018, -0.03032855373534758),\n    vec2(0.4486582010802123, 0.04471659340764478),\n    vec2(0.44996973246533023, 0.11367149595393652),\n    vec2(0.4528068778180294, 0.18362625452542342),\n    vec2(0.4571696371383095, 0.2545808691221069),\n    vec2(0.4630580104261707, 0.3265353397439865),\n    vec2(0.4704719976816131, 0.399489666391062),\n    vec2(0.47889052357232453, 0.46942841482788716),\n    vec2(0.48838995624439296, 0.5382993576593219),\n    vec2(0.49917240826703685, 0.6079147726120583),\n    vec2(0.5112378796402564, 0.6782746596860967),\n    vec2(0.5245863703640514, 0.7493790188814367),\n    vec2(0.539217880438422, 0.8212278501980783),\n    vec2(0.6100573875993156, 0.8215192799999989),\n    vec2(0.6811220125063465, 0.8215192799999989),\n    vec2(0.7521866374133767, 0.8215192799999989),\n    vec2(0.8232512623204076, 0.8215192799999989),\n    vec2(0.8943158872274386, 0.8215192799999991),\n    vec2(0.9653805121344694, 0.8215192799999991),\n    vec2(1.0364451370415004, 0.8215192799999989),\n    vec2(1.1075097619485312, 0.8215192799999989),\n    vec2(1.1879595908485074, 0.8255306114798808),\n    vec2(1.2516669252073223, 0.8391717284704696),\n    vec2(1.3116182857848626, 0.8724271086483424),\n    vec2(1.351000664917215, 0.930413885046356),\n    vec2(1.3605910684611775, 1.001796773410552),\n    vec2(1.3386075193111053, 1.0680749944750447),\n    vec2(1.2847711630615728, 1.10243320289114),\n    vec2(1.2209532033543704, 1.1119671817135643),\n    vec2(1.1365325666754627, 1.1138392799999999),\n    vec2(1.0654679417684318, 1.1138392799999999),\n    vec2(0.994403316861401, 1.1138392799999997),\n    vec2(0.9233386919543701, 1.1138392799999997),\n    vec2(0.8522740670473393, 1.1138392799999994),\n    vec2(0.7812094421403086, 1.1138392799999997),\n    vec2(0.7101448172332776, 1.1138392799999999),\n    vec2(0.6390801923262467, 1.1138392799999994),\n    vec2(0.5680155674192158, 1.1138392799999997),\n    vec2(0.49695094251218486, 1.1138392799999999),\n    vec2(0.42588631760515383, 1.1138392799999994),\n    vec2(0.3548216926981236, 1.1138392799999997),\n    vec2(0.2837570677910925, 1.1138392799999997),\n    vec2(0.2126924428840615, 1.1138392799999997),\n    vec2(0.1416278179770305, 1.1138392799999997),\n    vec2(0.07056319306999924, 1.1138392799999997),\n    vec2(-0.0005014318370318363, 1.1138392799999997),\n    vec2(-0.07156605674406305, 1.1138392799999997),\n    vec2(-0.14263068165109416, 1.1138392799999997),\n    vec2(-0.21369530655812535, 1.1138392799999997),\n    vec2(-0.28475993146515666, 1.1138392799999997),\n    vec2(-0.3558245563721878, 1.1138392799999997),\n    vec2(-0.4268891812792192, 1.1138392799999999),\n    vec2(-0.4979538061862504, 1.1138392799999994),\n    vec2(-0.5747741655365008, 1.1128907779572026),\n    vec2(-0.6494915085657628, 1.1064840942433825),\n    vec2(-0.715724033789467, 1.0940351917892404),\n    vec2(-0.7759855501917025, 1.0747926076997718),\n    vec2(-0.8364157786813944, 1.0473745428601975),\n    vec2(-0.8957988140348532, 1.012325418313189),\n    vec2(-0.9541346562520779, 0.9696452340587474),\n    vec2(-1.0114233053330708, 0.9193339900968707),\n    vec2(-1.0650258859108683, 0.8638448921001773),\n    vec2(-1.109875808184902, 0.8112253293884106),\n    vec2(-1.153612657162034, 0.7563495541008558),\n    vec2(-1.1962364328422639, 0.6992175662375129),\n    vec2(-1.2377471352255918, 0.639829365798382),\n    vec2(-1.2791456029840287, 0.5766204335542273),\n    vec2(-1.3195212676932462, 0.5110149647133373),\n    vec2(-1.35312031240339, 0.4483044773236447),\n    vec2(-1.3478700857831356, 0.3893471157569583),\n    vec2(-1.2814017143098246, 0.3762990422397112),\n    vec2(-1.2271782872842347, 0.423318919314826),\n    vec2(-1.1850557474077459, 0.48499677750693193),\n    vec2(-1.1409715739059787, 0.5430453194964624),\n    vec2(-1.0949392403073974, 0.595639038852947),\n    vec2(-1.0469587466120018, 0.6427779355763862),\n    vec2(-0.9902599391851862, 0.6895821918710686),\n    vec2(-0.9309980480688868, 0.7294265670224752),\n    vec2(-0.8692315311830185, 0.7622580229802851),\n    vec2(-0.8061557635831361, 0.787476263093315),\n    vec2(-0.7397386294036192, 0.8055277474357274),\n    vec2(-0.6688576076407476, 0.816839657720847),\n    vec2(-0.5935126982945206, 0.8214119939486733),\n    vec2(-0.5212150299272273, 0.8215192799999989),\n    vec2(-0.45015040502019743, 0.8215192799999987),\n    vec2(-0.37908578011316696, 0.8215192799999989),\n    vec2(-0.30802115520613726, 0.8215192799999989),\n    vec2(-0.30521190647014207, 0.7736362525282712),\n    vec2(-0.3226493871229261, 0.7113443681446903),\n    vec2(-0.3410867362012449, 0.6481203441134389),\n    vec2(-0.3605239537050983, 0.5839641804345167),\n    vec2(-0.38096103963448646, 0.518875877107924),\n    vec2(-0.40239799398940923, 0.4528554341336605),\n    vec2(-0.4248348167698668, 0.3859028515117266),\n    vec2(-0.44827150797585896, 0.3180181292421219),\n    vec2(-0.4727080676073859, 0.2492012673248467),\n    vec2(-0.4981444956644474, 0.1794522657599007),\n    vec2(-0.5245807921470437, 0.10877112454728405),\n    vec2(-0.5520169570551746, 0.037157843686996914),\n    vec2(-0.5804529903888402, -0.035387576820961004),\n    vec2(-0.606241238003197, -0.09983199269375218),\n    vec2(-0.6289817895452328, -0.15562832295829415),\n    vec2(-0.6528502816108523, -0.21327773942669284),\n    vec2(-0.677846714200056, -0.27278024209894824),\n    vec2(-0.7039710873128436, -0.33413583097506033),\n    vec2(-0.7312234009492151, -0.39734450605502925),\n    vec2(-0.7596036551091706, -0.46240626733885487),\n    vec2(-0.7891118497927101, -0.5293211148265371),\n    vec2(-0.8197479849998335, -0.5980890485180762),\n    vec2(-0.8515120607305399, -0.6687100684134704),\n    vec2(-0.8844040769848314, -0.7411841745127228),\n    vec2(-0.9184240337627064, -0.8155113668158319),\n    vec2(-0.9505588862490267, -0.8849122076764873),\n    vec2(-0.9750187797722365, -0.9530926179501348),\n    vec2(-0.9708920598058379, -1.023557240075574),\n    vec2(-0.9306002021296167, -1.0806457332857209),\n    vec2(-0.8669014180002671, -1.110390832032926),\n    vec2(-0.7964646109966345, -1.109194485754571),\n    vec2(-0.7335142538692874, -1.0747545897570552),\n    vec2(-0.6883410247741442, -1.0251917491076616),\n    vec2(-0.649421135057255, -0.9619022368201862),\n    vec2(-0.6212145971405798, -0.9016976837540353),\n    vec2(-0.59450898453817, -0.8314686180466736),\n    vec2(-0.5717114555676837, -0.7601835883170873),\n    vec2(-0.5513104978411855, -0.6914618337162398),\n    vec2(-0.5315461776714334, -0.6229079733875663),\n    vec2(-0.512418495058427, -0.5545220073310669),\n    vec2(-0.4939274500021665, -0.4863039355467417),\n    vec2(-0.47607304250265187, -0.41825375803459053),\n    vec2(-0.4581595737862853, -0.3489493019951128),\n    vec2(-0.4405705394043984, -0.2806799344673832),\n    vec2(-0.423114880691623, -0.2117924835631718),\n    vec2(-0.4056592219788477, -0.1429050326589602),\n    vec2(-0.3882035632660724, -0.07401758175474878),\n    vec2(-0.37074790455329765, -0.005130130850538898),\n    vec2(-0.35329224584052243, 0.06375732005367263),\n    vec2(-0.3358365871277474, 0.13264477095788413),\n    vec2(-0.31838092841497234, 0.20153222186209557),\n    vec2(-0.30092526970219735, 0.270419672766307),\n    vec2(-0.2834696109894224, 0.3393071236705185),\n    vec2(-0.26601395227664754, 0.40819457457473),\n    vec2(-0.2485582935638727, 0.4770820254789415),\n    vec2(-0.23110263485109792, 0.5459694763831531),\n    vec2(-0.21364697613832317, 0.6148569272873645),\n    vec2(-0.19619131742554852, 0.6837443781915759),\n    vec2(-0.1787356587127739, 0.7526318290957874)\n);\n\nvec2 path[PATH_NUM];\nvec2 fourierSeries[FREQ_NUM];\nfloat angles[FREQ_NUM];\nfloat norms[FREQ_NUM];\nfloat freqs[FREQ_NUM];\n\n// https://iquilezles.org/articles/distfunctions2d\n// q: vec2(width, height)\nfloat sdTriangleIsosceles( in vec2 p, in vec2 q )\n{\n    p.x = abs(p.x);\n    vec2 a = p - q*clamp( dot(p,q)/dot(q,q), 0.0, 1.0 );\n    vec2 b = p - q*vec2( clamp( p.x/q.x, 0.0, 1.0 ), 1.0 );\n    float s = -sign( q.y );\n    vec2 d = min( vec2( dot(a,a), s*(p.x*q.y-p.y*q.x) ),\n                  vec2( dot(b,b), s*(p.y-q.y)  ));\n    return -sqrt(d.x)*sign(d.y);\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nmat2 rotationMat(float theta) {\n    return mat2(cos(theta), sin(theta), -sin(theta), cos(theta));\n}\n\nvoid arrow(in vec2 uv, inout vec3 col, in vec3 arrowColor) {\n    //uv *= rotationMat(PI / 2.);\n    float head = smoothstep(.01, .009, sdTriangleIsosceles(\n        uv * rotationMat(PI / 2.) + vec2(0., 1.), vec2(.1, .2)));\n    col = mix(col, arrowColor, head);\n    float body = smoothstep(.01, .009, sdBox(uv - vec2(.4, 0.), vec2(.4, .03)));\n    col = mix(col, arrowColor, body);\n}\n\nvoid circle(in vec2 uv, inout vec3 col, in vec3 circleColor) {\n    col = mix(col, circleColor, smoothstep(.01, .009, abs(length(uv) - 1.)));\n}\n\n/*============================\n complex computations\n==============================*/\nvec2 cexp(in float theta) {\n    return vec2(cos(theta), sin(theta));\n}\n\nvec2 cmul(in vec2 a, in vec2 b) {\n    return vec2(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);\n}\n\nfloat cang(in vec2 a) {\n    return atan(a.y, a.x);\n}\n\n/*============================\n Fourier Seriers\n==============================*/\nvec2 fourier(in float freq) {\n    vec2 result = vec2(0.);\n    for(int i = 0; i < POINT_NUM; i++) {\n        float t = float(i) / float(POINT_NUM);\n        result += cmul(cexp(-2. * PI * freq * t), pts[i]);\n    }\n    return result / float(POINT_NUM);\n}\n\nfloat getFreq(int i, float s) {\n    return floor(float(i) / 2.) * s;\n}\n\nvec2 fixUV(in vec2 c) {\n    return 1.5 * (2. * c - iResolution.xy)/iResolution.y;;\n}\n\nfloat segment(vec2 p, vec2 a, vec2 b, float w) {\n    vec2 ab = b - a;\n    vec2 ap = p - a;\n    float t = clamp(dot(ap, ab) / dot(ab, ab), 0., 1.);\n    return smoothstep(w, 0.9 * w, length(ap - ab * t));\n}\n\nvec3 plotPi(vec2 uv) {\n    vec3 col = vec3(0);\n    \n    for(int i = 0; i < POINT_NUM; i++) {\n        col += segment(uv,\n                       pts[i],\n                       pts[i + 1 < POINT_NUM ? i + 1 : 0],\n                       .007);\n    }\n    return clamp(col, 0., 1.);\n}\n\nvec3 render(vec2 uv) {\n    vec3 col = plotPi(uv);\n    float s = 1.;\n    for(int i = 0; i < FREQ_NUM; i++) {\n        float freq = getFreq(i + 1, s);\n        freqs[i] = freq;\n        s *= -1.;\n        vec2 c = fourier(freq);\n        fourierSeries[i] = c;\n        angles[i] = cang(c);\n        norms[i] = length(c);\n    }\n    vec2 puv = uv;\n\n    for(int i = 0; i < PATH_NUM; i++) {\n        float s = -1.;\n        vec2 p = vec2(0.);\n        for(int j = 0; j < FREQ_NUM; j++) {\n            float freq = freqs[j];\n            s *= -1.;\n            vec2 c = fourierSeries[j];\n            float angle = (iTime - float(i) / 10.) * freq / 2. + angles[j];\n            float n = norms[j];\n            p += cexp(angle) * n;\n            if (i == 0) {\n                vec2 coord = puv / n;\n                coord *= rotationMat(angle);\n                arrow(coord, col, vec3(.5 + s * .1, .8 + s * .2, .6));\n                circle(coord, col, vec3(.8, .5, .8 + s * .2));\n                puv -= n * cexp(angle);\n            }\n        }\n        path[i] = p;\n    }\n\n    for(int i = 0; i < PATH_NUM - 1; i++) {\n        col = mix(col, vec3(1., 1., 0.), smoothstep(.02, .021, segment(uv, path[i], path[i + 1], .01)));\n    }\n\n    return clamp(col, 0., 1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = vec3(0.);\n    \n    for(int m = 0; m < AA; m++) {\n        for(int n = 0; n < AA; n++) {\n            vec2 offset = 2. * (vec2(float(m), float(n)) / float(AA) - .5);\n            col += render(fixUV(fragCoord + offset));\n        }\n    }\n    \n    fragColor = vec4(col / float(AA * AA), 1.);\n}","name":"Image","description":"","type":"image"}]}