{"ver":"0.1","info":{"id":"dsfBWX","date":"1689217862","viewed":52,"name":"OM : A basic inverted triangle","username":"Morando","description":"A basic triangle based on plotting 2 equations\nupdate 1 : applied anti aliasing using partial derivatives","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["basic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float fWidth(float value)\n{\n    return abs(dFdx(value)) + abs(dFdy(value));\n}\nfloat aaStep(float value, float gradient)\n{\n    float halfChange = fWidth(gradient) /2.;\n    float lowerEdge = value - halfChange;\n    float upperEdge = value + halfChange;\n    float stepped = (gradient - lowerEdge) / (upperEdge - lowerEdge);\n    stepped = clamp(stepped, 0.0, 1.0);\n    return stepped;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 st = fragCoord/iResolution.xy;\n\n    float y1 = ((-st.x + 0.5) / st.y);\n    float y2 = (st.x - 0.5) / st.y;\n\n    float shape1 = aaStep(-0.5, y1);\n    float shape2 = aaStep(-0.5, y2);\n\n    vec3 result = vec3(shape1 * shape2);\n    // Output to screen\n    fragColor = vec4(result,1.0);\n}","name":"Image","description":"","type":"image"}]}