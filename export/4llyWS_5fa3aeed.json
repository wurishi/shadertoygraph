{"ver":"0.1","info":{"id":"4llyWS","date":"1709708486","viewed":29,"name":"CameraProject","username":"lingel","description":"求3维点到射线(从视点到屏幕上每一个点)的距离.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["camera"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//ro射线起点；rd射线方向；p任意点\nfloat DistLine(vec3 ro,vec3 rd,vec3 p)//计算点到线的距离\n{\n    return length(p-ro - dot(normalize(rd),p-ro)*normalize(rd));//点积算法\n    //return length(cross(rd,p-ro))/length(rd);//叉积算法\n}\nfloat DrawPoint(vec3 ro,vec3 rd,vec3 p){\n    float d = DistLine(ro,rd,p);\n    d=smoothstep(0.06,0.05,d);\n    return d;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv-=0.5;//原点居中\n    uv.x*=iResolution.x/iResolution.y;//统一高宽比\n    \n    vec3 ro =vec3(0.5,0.5,-3.);//射线起点(视点)\n    vec3 lookat=vec3(.5);//相机目标点\n    vec3 f=normalize(lookat-ro);//相机前方向(Z,左手定则)\n    vec3 r=cross(vec3(0.,1.,0),f);//相机右方向(X)\n    vec3 u=cross(f,r);//相机上方向(Y)\n    \n    vec3 planeLoc=ro + 2.*f;//定位投影平面\n    \n    vec3 rd = (uv.x * r + uv.y * u + planeLoc) - ro;//射线方向,视点到屏幕点\n    \n    \n    float d=0.;\n    //以下是box的8个点\n    d+=DrawPoint(ro,rd,vec3(0.,0.,0.));\n    d+=DrawPoint(ro,rd,vec3(0.,0.,1.));\n    d+=DrawPoint(ro,rd,vec3(0.,1.,0.));\n    d+=DrawPoint(ro,rd,vec3(0.,1.,1.));\n    d+=DrawPoint(ro,rd,vec3(1.,0.,0.));\n    d+=DrawPoint(ro,rd,vec3(1.,0.,1.));\n    d+=DrawPoint(ro,rd,vec3(1.,1.,0.));\n    d+=DrawPoint(ro,rd,vec3(1.,1.,1.));\n    \n    //输出\n\tfragColor = vec4(d);\n}","name":"Image","description":"","type":"image"}]}