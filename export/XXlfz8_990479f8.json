{"ver":"0.1","info":{"id":"XXlfz8","date":"1728024212","viewed":18,"name":"Pressure Wave","username":"Mauler1","description":"Inspired by the song Pressure, by Freaks & Geeks, and also this shader (https://www.shadertoy.com/view/3ttSzr)\n\n","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["waves","wave","triangles"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdEquilateralTriangle( in vec2 p, in float r )\n{\n    const float k = sqrt(3.0);\n    p.x = abs(p.x) - r;\n    p.y = p.y + r/k;\n    if( p.x+k*p.y>0.0 ) p = vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n    p.x -= clamp( p.x, -2.0*r, 0.0 );\n    return -length(p)*sign(p.y);\n}\n\n// Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    //color changer, if needed ^\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //consts ------\n    const vec3 YELLOW = vec3(1.0, 1.0, 0.0);\n    const vec3 MAGENTA = vec3(1.0, 0.0, 1.0);\n    const vec3 BLACK = vec3(0.0, 0.0, 0.0);\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    //background ------\n    \n   for(float i = 1.0; i < 8.0; i++){ //i - frequency of waves\n        uv.y += 1.5 * sin(i + uv.x + iTime)/1.5 + abs(sin(i * 0.5 * uv.y)) * cos(i + 3.0 + iTime);\n        uv.x += 1.5 + sin(i + uv.y/2.0 + iTime) + cos(i + 0.5 + uv.x + iTime) * sin(i * 0.5 + iTime + uv.y);\n        //outside numbers - amplitude of waves (eg. 1.5 * ... )\n        //iTime enables the waviness\n        //chaging uv.y affects vertical waves, uv.x horizontal \n        //DO NOT MULTIPLY IN MATH FUNC BY ITIME\n        //cant say exactly what all this math does but i was trying to replicate a liquid\n        //and i knew smashing together waves would do stuff\n        //the abs in uv.y makes the waves sharper\n    }\n    \n    vec3 col;\n    col = mix(MAGENTA, YELLOW, uv.y);\n    \n    //pulsing ------\n    \n    float x = sin(abs(iTime * 2.0)) * 1.7; //changing the color on a wave (sin)\n    //abs makes negative color take up less time\n    // multing time by 2 makes the wave quicker (frequency)\n    //multing by 1.5 allows the color to dip into negative even though abs is used (amplitude)\n    col = mix(col, BLACK, x);\n    \n    //triangles ------\n    \n    vec2 p = (fragCoord.xy-iResolution.xy)/iResolution.y+0.2; // triangle center coord\n    \n\n    float d = sdEquilateralTriangle(p, 1.0); //\"making\" the triangle\n    col = mix(col, BLACK, 1.0-smoothstep(0.0, 0.005, abs(abs(d))-0.07)); //\"drawing\" triangle outlines\n    \n    p = (fragCoord.xy-iResolution.xy)/iResolution.y-0.05; //triangle 2 - inside\n    d = sdEquilateralTriangle(p, 1.0);\n    col = mix(col, BLACK, 1.0-smoothstep(0.0, 0.005, abs(abs(d))-0.05));\n    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}