{"ver":"0.1","info":{"id":"mtscWs","date":"1691363302","viewed":98,"name":"Noise Fractal Play","username":"spenceryonce","description":"Simple noise integration with some fractalness.","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["fractal","noise","math"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float random (vec2 uv) {\n    return fract(sin(dot(uv.xy,\n                         vec2(20.830,50.860)))*\n        43758.5453123);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (iResolution.xy - fragCoord * 2.0) /iResolution.xy;\n    \n    float an = 12.0 + sin(iTime*0.1);\n\n    vec3 color = vec3(0.0);\n    color = vec3(length(uv));\n    \n    for(int i =0; i< 12; i++){\n        vec2 a = abs(uv);\n        uv*= mat2(sin(a.x+an), cos(a.x+an), -sin(a.x+an), cos(a.y+an));\n        uv*= mat2(sin(a.x+an), cos(a.x), -sin(a.x), cos(a.y));\n        uv*= mat2(sin(a.y), cos(a.y), -sin(a.y), cos(a.x));\n    }\n    \n    float i = floor(uv.x+sin(iTime));\n    float f = fract(uv.x-cos(iTime));\n    color += mix(random(vec2(i,i)), random(vec2(i+1.0,i+1.0)), smoothstep(0.0,1.0,f));\n    color.r *= 0.8;\n    color.g *= 0.4;\n    color.b *= 0.3+sin(iTime);\n\n    // Output to screen\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}