{"ver":"0.1","info":{"id":"Xf3cW4","date":"1730617958","viewed":26,"name":"3velyn_Mandelbrot","username":"3velyn","description":"mandelbrot set plotted in the complex plane i suppose (default iterations = 1000 = much more than desmos https://www.desmos.com/calculator/tfv2tn2tdb)","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nvec3 rgb2hsv(vec3 c)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n\n\n\nconst int iters = 10000;\nconst int maxCareIters = min(iters, 1000);\nconst float originalScale = 2.0;\nfloat scale = originalScale;\nvec2 camera = vec2(-0.5,0.0);\n\nfloat square(in float inFloat){\n    return inFloat*inFloat;\n}\n\nvec2 complexSquared(in vec2 complexInput){\n    return vec2(square(complexInput.x)-square(complexInput.y),2.0*complexInput.x*complexInput.y);\n}\n\nvec2 mandelbrotFunction(in vec2 inputPoint, in vec2 originalPoint){\n    return complexSquared(inputPoint) + originalPoint;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    scale *= pow(2.0,-iTime/5.0);\n    \n    camera -= (iMouse.xy/iResolution.xy*vec2(originalScale)-vec2(originalScale/2.0))/vec2(iResolution.y/iResolution.x,1.0);\n    vec2 normalizedPosition = (fragCoord/iResolution.xy*vec2(scale)-vec2(scale/2.0))/vec2(iResolution.y/iResolution.x,1.0) + camera;\n    vec2 cachedLastComplex = normalizedPosition;\n    int lastedIters = 0;\n    for (int i = 1; i <= maxCareIters; i++) {\n        cachedLastComplex = mandelbrotFunction(cachedLastComplex, normalizedPosition);\n        if (length(cachedLastComplex)>2.0){\n            lastedIters = i;\n            break;\n        }\n    }\n    //fragColor = vec4(hsv2rgb(vec3(float(lastedIters)/float(iters)*360.0,float(lastedIters)/float(iters),1.0)),1.0);\n    float value = clamp(float(lastedIters)/sqrt(float(iters)),0.0,1.0);\n    fragColor = vec4(value,value*0.3,value,1.0);\n}","name":"Image","description":"","type":"image"}]}