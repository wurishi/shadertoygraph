{"ver":"0.1","info":{"id":"wtKSzh","date":"1582216903","viewed":90,"name":"Crazy Triangles","username":"creikey","description":"A series of crazy triangles that vary in a non-looping manner using a shifting hash function.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["triangles","rainbow","hash","crazy","beautiful"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TIME (iTime/5.0)\n\nvec2 rotate(vec2 uv, float rotation)\n{\n    vec2 to_return = uv;\n    // rotation += atan(uv.y / uv.x);\n    to_return.x = uv.x * cos(rotation) + uv.y * -sin(rotation);\n    to_return.y = uv.x * sin(rotation) + uv.y * cos(rotation);\n\n    return to_return;\n}\n\nfloat hash11(float p)\n{\n    p += iTime/2000.0;\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\nfloat triangle(vec2 in_uv, float size, float rotation)\n{\n    vec2 uv = in_uv;\n\n    uv = rotate(uv, rotation);\n    uv *= size;\n\n    // float initial_rotation = atan(uv.y/uv.x);\n    // float initial_magnitude = length(uv);\n\n    float to_return = step(uv.y, -0.5)*-2.0 + 1.0;\n\n    to_return = min(to_return, step(uv.y, 2.0*uv.x + 1.0));\n    to_return = min(to_return, step(uv.y, -2.0*uv.x + 1.0));\n    // if(uv.y > 2.0*uv.x + 1.0)\n    // {\n    //     to_return = 1.0;\n    // }\n\n    return to_return;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    // where 0.0 is the center\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    // uv = rotate(uv, TIME);\n\n    uv *= 3.0;\n\n    // Time varying pixel color\n    vec3 col = vec3(0.0);\n    for(float i = 0.0; i < 9.0; i += 1.0)\n    {\n        float cur_val = 0.0;\n        cur_val = triangle(uv, sin(TIME*hash11(i*20.0)) - 1.4, TIME*hash11(i*23.0)*10.0);\n        col.r = max(col.r, cur_val*hash11(i));\n        col.g = max(col.g, cur_val*hash11(i+20.0));\n        col.b = max(col.b, cur_val*hash11(i+30.0));\n    }\n    // col.r = triangle(uv, sin(TIME) + 1.0, TIME*3.0);\n    // col.g = triangle(uv, cos(TIME)*0.5 + 1.5, TIME*cos(TIME));\n    // col.b = triangle(uv, sin(TIME*3.0)*0.8 + 1.2, TIME*2.0);\n    // float value = distance(uv, vec2(0.0));\n    // vec3 col = vec3(value);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}