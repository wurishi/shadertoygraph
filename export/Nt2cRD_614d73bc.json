{"ver":"0.1","info":{"id":"Nt2cRD","date":"1650621925","viewed":55,"name":"TP1&2 Bouhouch","username":"RouaBouhouch","description":"work in progress","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["project"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Eric Galin \n\nconst int Steps = 2000;      // Number of steps\nconst float Epsilon = 0.01; // Marching epsilon\n#define PI 3.1415926535897932384626433832795\n// Rotation matrix around the X axis.\nmat3 rotateX(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(1, 0, 0),\n        vec3(0, c, -s),\n        vec3(0, s, c)\n    );\n}\n\n// Rotation matrix around the Y axis.\nmat3 rotateY(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, 0, s),\n        vec3(0, 1, 0),\n        vec3(-s, 0, c)\n    );\n}\n\n// Rotation matrix around the Z axis.\nmat3 rotateZ(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, -s, 0),\n        vec3(s, c, 0),\n        vec3(0, 0, 1)\n    );\n}\n\nmat3 Transform(vec3 t) {\n \n    return mat3(\n        vec3( t.x,0,  0),\n        vec3(0,t.y,0 ),\n        vec3(0, 0,t.z)\n        \n    );\n}\n\n// Identity matrix.\nmat3 identity() {\n    return mat3(\n        vec3(1, 0, 0),\n        vec3(0, 1, 0),\n        vec3(0, 0, 1)\n    );\n}\n\nvec3 Rotate_p(vec3 p ,float angle ,float speed, bool time , int Axis)\n{\n    switch (Axis)\n    {\n        case 1 :\n      \n            if(time)\n            {\n            p=p*rotateX(angle*iTime/speed);\n            }\n            else\n            {\n            p=p*rotateX(angle);\n            }\n      \n        case 2 :\n      \n          if(time)\n            {\n            p=p*rotateY(angle*iTime/speed);\n            }\n            else\n            {\n            p=p*rotateY(angle);\n            }\n       \n        case 3 :\n  \n         if(time)\n            {\n            p=p*rotateZ(angle*iTime/speed);\n            }\n            else\n            {\n            p=p*rotateZ(angle);\n            }\n   \n      \n    }\n    return p;\n}\n// Primitives \n\n// Sphere \n// p : point\n// c : center of skeleton\n// r : radius\n\nfloat Sphere(vec3 p, vec3 c,float r,vec3 n)\n{\n  return length(p-c)-r;\n}\n\n//cylinder \nfloat sdCappedCylinder( vec3 p, float h, float r, vec3 n )\n    {\n  p=p-n;\n  vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(h,r);\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n//box\n//p : point\n//b: lengh\n//n: position\nfloat sdBox( vec3 p, vec3 b , vec3 n)\n{\n  \n  vec3 q = abs(p-n) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n// vertical capsule\nfloat sdVerticalCapsule( vec3 p, float h, float r, vec3 n )\n{ p=p-n;\n  p.y -= clamp( p.y, 0.0, h );\n  return length( p ) - r;\n}\n// Sphere \n// p : point\n// c : center of skeleton\n// r : radius\nfloat Sphere(vec3 p, vec3 c,float r)\n{\n  return length(p-c)-r;\n}\n// Sphere \n// p : point\n// n : Normal of plane\n// o : Point on plane\nfloat Plane(vec3 p, vec3 n, vec3 o)\n{\n    return dot((p-o),n);\n}\n\n//capsule\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r,vec3 n)\n    {\n   p=p-n;\n  vec3 pa = p - a, ba = b - a;\n  float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n  return length( pa - ba*h ) - r;\n}\n  //cone\n  //p : point\nfloat sdCone( in vec3 p, in vec2 c, float h ,vec3 n)\n{\n  // c is the sin/cos of the angle, h is height\n  // Alternatively pass q instead of (c,h),\n  // which is the point at the base in 2D\n  p=p-n;\n  vec2 q = h*vec2(c.x/c.y,-1.0);\n    \n  vec2 w = vec2( length(p.xz), p.y );\n  vec2 a = w - q*clamp( dot(w,q)/dot(q,q), 0.0, 1.0 );\n  vec2 b = w - q*vec2( clamp( w.x/q.x, 0.0, 1.0 ), 1.0 );\n  float k = sign( q.y );\n  float d = min(dot( a, a ),dot(b, b));\n  float s = max( k*(w.x*q.y-w.y*q.x),k*(w.y-q.y)  );\n  return sqrt(d)*sign(s);\n}\n\n// p : point\n// t : torus parameters\n// n : position parameter\nfloat sdTorus( vec3 p, vec2 t ,vec3 n)\n{\n  p=p-n;\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\n// Operators\n\n// Union\n// a,b : field function of left and right sub-trees\nfloat Union(float a,float b)\n{\n    return min(a,b);\n}\n\nfloat opSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\n    \n// Intersection\n// a,b : field function of left and right sub-trees\nfloat Intersection(float a,float b)\n{\n    return max(a,b);\n}\n\n//objet complexe colonne\nfloat colonne (vec3 p ,vec3 n)\n  \n{   p=p-n;\n    float v;\n  v = Union(sdCappedCylinder( Rotate_p(p ,PI/2. ,0.5, false ,2), 3., 1., vec3 (0.,10,0.) ),\n      Union(\n  sdCappedCylinder( Rotate_p(p ,PI/2. ,0.5, false ,2), 3., 1., vec3 (0.) ),\n    sdCappedCylinder( Rotate_p(p ,PI/2. ,0.5, false ,2), 1., 6., vec3 (0.,5.,0.) )\n  ));\n  \n    vec3 m;\n    for(int i=0; i<6; i++)\n    {\n    m.x=cos(float(i));\n    m.z=sin(float(i));\n    m.y=0.;\n    if(sqrt(pow(m.x,2.)+pow(m.z,2.))<2.)\n    {\n      v =Union(v, Union(\n  sdCappedCylinder( Rotate_p(p ,PI/2. ,0.5, false ,2), 3., 1., vec3 (0.) ),\n    sdCappedCylinder( Rotate_p(p ,PI/2. ,0.5, false ,2), .5, 6., vec3 (m.x,5.,m.z) )\n  ));\n    }\n    }\n   \nreturn v;\n}\n//complex object 2\nfloat windmill (vec3 p , vec3 n)\n    {\n    \n  p=p-n;\n     float v=sdBox(  p, vec3(5.,5.,7.) , vec3 (0.,7.,-9.));\n        v=opSmoothUnion(\n        v,\n        sdCone(  Rotate_p(p ,PI/2. ,0.5, false ,3)\n        ,  vec2 (3.,3.6),8.,vec3(-7.,6.,0.)),\n        .5\n        );\n        \n        v= opSmoothUnion(v,\n        sdCappedCylinder(  p, 2., 4., vec3 (0.,0.,0) ),\n        .5);\n          v=opSmoothUnion(v,\n          sdCapsule(  Rotate_p(p ,PI/4. ,0.5, true ,2) ,vec3 (1.,.2,9.)\n            , vec3 (1.), 1.,vec3 (0.,0.,0.))\n            ,.8);  \n            v=opSmoothUnion(v,\n          sdCapsule(  Rotate_p(p ,PI/4. ,0.25, true ,2) ,vec3 (1.,.2,9.)\n            , vec3 (1.), 1.,vec3 (0.,0.,-10.))\n            ,.8);  \n    return v;\n}\n\n// Potential field of the object\n// p : point\nfloat object(vec3 p)\n    {\n    \n\n \n   float v= \n   sdBox(  p, vec3(10.,20.,3.) , vec3 (4.,11.,8.));\n    \n      v=opSmoothUnion(v,\n          sdCapsule( p ,vec3 (1.,.2,30.)\n            , vec3 (1.), 2.,vec3 (4.,11.,8.))\n            ,.8);  \n           v=opSmoothUnion(v,\n           Intersection(\n              Sphere( p, vec3 (4.,15.,30.),10.,vec3 (4.,11.,20.)),\n              sdBox(  p, vec3(4.,20.,20.) , vec3 (4.,-5.,20.))\n              )*.1\n\n            ,.8); \n\n  return v;\n}\n\n// Analysis of the scalar field \n\n// Calculate object normal\n// p : point\nvec3 ObjectNormal(vec3 p)\n{\n  const float eps = 0.001;\n  vec3 n;\n  float v = object(p);\n  n.x = object( vec3(p.x+eps, p.y, p.z) ) - v;\n  n.y = object( vec3(p.x, p.y+eps, p.z) ) - v;\n  n.z = object( vec3(p.x, p.y, p.z+eps) ) - v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\n// o : ray origin\n// u : ray direction\n// e : Maximum distance \n// h : hit\n// s : Number of steps\nfloat SphereTrace(vec3 o, vec3 u, float e,out bool h,out int s)\n{\n  h = false;\n\n  // Start at the origin\n  float t=0.0;\n\n  for(int i=0; i<Steps; i++)\n  {\n    s=i;\n    vec3 p = o+t*u;\n    float v = object(p);\n    // Hit object\n      if (v < 0.0)\n      {\n          h = true;\n          break;\n      }\n      // Move along ray\n      t += max(Epsilon,v);\n      // Escape marched too far away\n      if (t>e)\n      {\n          break;\n      }\n  }\n  return t;\n}\n\n// Lighting \n\n// Ambient occlusion\n// p : Point\n// n : Normal\n// r : Radius for ambient occlusion\n// a : Number of smaples\nfloat AmbientOcclusion(vec3 p,vec3 n, float r, int a)\n{\n    if (a==0) { return 1.0; }\n    \n\tfloat ao=0.0; \n    \n    for (int i=0;i<a;i++)\n    {\n \t\tvec3 d = Cosine(581.123*float(i) , n);\n\n        int s;\n        bool h;\n        float t=SphereTrace(p,d,r,h,s);\n        if (!h) {ao+=1.0;}\n    }\n    \n    ao/=float(a);\n\treturn ao;\n}\n\n// Background color\n// d : Ray direction\nvec3 background(vec3 d)\n{\n  return mix(vec3(0.45,0.55,0.99),vec3(0.65,0.69,0.99), d.z*0.5+0.5);\n}\n\n// Shadowing\n// p : Point\n// n : Normal\n// l : Light direction\nfloat Shadow(vec3 p,vec3 n,vec3 l)\n{\n    bool h;\n    int s;\n    float t = SphereTrace(p+0.1*n,l,100.0,h,s);\n    if (!h)\n    {\n      return 1.0;\n    }\n    return 0.0; \n}\n\n// Shading and lighting\n// p : Point\n// n : Normal at point\n// e : Eye direction\nvec3 Shade(vec3 p, vec3 n, vec3 e)\n{\n     // Point light\n    const vec3 lp = vec3(5.0, 10.0, 25.0);\n    \n    // Light direction to point light\n    vec3 l = normalize(lp - p);\n\n    // Ambient color\n    vec3 ambient = 0.25+0.25*background(n);\n    \n    // Ambient occlusion\n    ambient += 0.15 * AmbientOcclusion(p+0.1*n,n,5.0,0) * vec3(1.0,1.0,1.0);\n    \n    // Shadow computation\n    float shadow = Shadow(p,n,l);\n    \n    // Phong diffuse\n    vec3 diffuse = 0.35  * clamp(dot(n, l),0.0,1.0) * vec3(1.0,1.0,1.0);\n\n    // Specular\n    vec3 r = reflect(e,n);\n    vec3 specular = 0.15 * pow(clamp(dot(r,l),0.0,1.0),30.0) * vec3(1.0,1.0,1.0);\n    vec3 c = ambient + shadow * (diffuse + specular);\n    return c;\n}\n\n// Shading according to the number of steps in sphere tracing\n// n : Number of steps\nvec3 ShadeSteps(int n)\n{\n   float t = float(n)/(float(Steps-1));\n   return 0.5+mix(vec3(0.05,0.05,0.5),vec3(0.65,0.39,0.65),t);\n}\n\n// Picture in picture\n// pixel : Pixel\n// pip : Boolean, true if pixel was in sub-picture zone\nvec2 Pip(in vec2 pixel, out bool pip)\n{\n    // Pixel coordinates\n    vec2 p = (-iResolution.xy + 2.0*pixel)/iResolution.y;\n   if (pip==true)\n   {    \n    const float fraction=1.0/4.0;\n    // Recompute pixel coordinates in sub-picture\n    if ((pixel.x<iResolution.x*fraction) && (pixel.y<iResolution.y*fraction))\n    {\n        p = (-iResolution.xy*fraction + 2.0*pixel)/(iResolution.y*fraction);\n        pip = true;\n    }\n       else\n       {\n           pip = false;\n       }\n   }\n   return p;\n}\n\n\n// Image\nvoid mainImage( out vec4 color, in vec2 pxy )\n{\n    // Picture in picture on\n    bool pip=true;\n    \n   // Pixel\n     vec2 pixel=Pip(pxy, pip);\n    \n    // Mouse\n    vec2 m=iMouse.xy/iResolution.xy;\n\n    // Camera\n    vec3 ro,rd;\n    Ray(m,pixel,ro,rd);\n\n  // Trace ray\n\n  // Hit and number of steps\n  bool hit;\n  int s;\n\n  float t = SphereTrace(ro, rd, 1000.0,hit, s);\n  \n    // Position \n    vec3 pt = ro + t * rd;\n    \n  // Shade background\n  vec3 rgb = background(rd);\n\n  if (hit)\n  {\n    // Compute normal\n    vec3 n = ObjectNormal(pt);\n\n    // Shade object with light\n    rgb = Shade(pt, n, rd);\n  }\n\n  // Uncomment this line to shade image with false colors representing the number of steps\n  if (pip==true)\n  {\n      rgb = ShadeSteps(s); \n  }\n\n\n  color=vec4(rgb, 1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Modeling\n// Eric Galin\n\n// Hashing function\n// Returns a random number in [-1,1]\nfloat Hash(float seed)\n{\n    return fract(sin(seed)*43758.5453 );\n}\n\n// Cosine direction \n// seed : Random seed\n//    n : Normal\nvec3 Cosine( float seed, vec3 n)\n{\n    float u = Hash( 78.233 + seed);\n    float v = Hash( 10.873 + seed);\n\n    // Method by fizzer: http://www.amietia.com/lambertnotangent.html\n    float a = 6.2831853 * v;\n    u = 2.0 * u - 1.0;\n    return normalize( n + vec3(sqrt(1.0-u*u) * vec2(cos(a), sin(a)), u) );\n}\n\n// Rotation matrix around z axis\n// a : Angle\nmat3 Rz(float a)\n{\n    float sa = sin(a); float ca = cos(a); \n    return mat3(ca,sa,0.0,    -sa,ca,0.0,  0.0,0.0,1.0);\n}\n\n\n// Hashing function\n// Returns a random number in [-1,1]\n// p : Vector in space\nfloat Hash(in vec3 p)  \n{\n    p  = fract( p*0.3199+0.152 );\n\tp *= 17.0;\n    return fract( p.x*p.y*p.z*(p.x+p.y+p.z) );\n}\nfloat Noise(in vec3 p)\n{\n    vec3 i = floor(p);\n    vec3 f = fract(p);\n  \n    f = f*f*(3.0-2.0*f);\n    // Could use quintic interpolation instead of cubic\n    // f = f*f*f*(f*(f*6.0-15.0)+10.0);\n\n    return mix(mix(mix( Hash(i+vec3(0,0,0)), \n                        Hash(i+vec3(1,0,0)),f.x),\n                   mix( Hash(i+vec3(0,1,0)), \n                        Hash(i+vec3(1,1,0)),f.x),f.y),\n               mix(mix( Hash(i+vec3(0,0,1)), \n                        Hash(i+vec3(1,0,1)),f.x),\n                   mix( Hash(i+vec3(0,1,1)), \n                        Hash(i+vec3(1,1,1)),f.x),f.y),f.z);\n}\n\n\n// Compute the ray\n//      m : Mouse position\n//      p : Pixel\n// ro, rd : Ray origin and direction\nvoid Ray(vec2 m, vec2 p,out vec3 ro,out vec3 rd)\n{\n    float a = 3.0*3.14*m.x;\n   \tfloat le = 3.5;\n    \n    // Origin\n    ro=vec3(100.0,100.0,100.0);\n    ro*=Rz(a); \n\n    // Target\n    vec3 ta = vec3(0.0,0.0,1.0);\n    \n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,0.0,1.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\trd = normalize( p.x*uu + p.y*vv + le*ww );\n}\n","name":"Common","description":"","type":"common"}]}