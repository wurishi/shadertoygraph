{"ver":"0.1","info":{"id":"MsyfW1","date":"1528583057","viewed":130,"name":"Fuzzy Set: Hue","username":"ptrgags","description":"I noticed a similarity between fuzzy sets and this HSV -> RGB conversion chart:\nhttps://en.wikipedia.org/wiki/HSL_and_HSV#/media/File:HSV-RGB-comparison.svg\n\nI decided to play around with the math a bit!","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["hsv","hue","fuzzylogic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// This shader converts a hue from 0.0 to 1.0\n// onto the corresponding RGB value with full saturation.\n// I came up with this after noticing a similarity between this image:\n// https://en.wikipedia.org/wiki/HSL_and_HSV#/media/File:HSV-RGB-comparison.svg\n// and fuzzy sets.\n\n// Define where the pure values of RGB are\n// on the HSV color wheel. Convert the angle to\n// a value between 0 and 1.\n#define GREEN (120.0 / 360.0)\n#define BLUE (240.0 / 360.0)\n// Red is both at 0 degrees and 360 degrees.\n#define RED1 (0.0 / 360.0)\n#define RED2 (360.0 / 360.0)\n\n// Size of a sector \n#define SECTOR (1.0 / 6.0)\n// Slope of the trapezoid boundary\n// (rise = 1, run = 1/6)\n#define SLOPE (1.0 / SECTOR)\n\n// Define fuzzy logic operations\n// by aliasing built-in functions!\n#define AND min\n#define OR max\n\n// Calculate the trapezoidal fuzzy membership function\n// one of R, G, B, given a hue from 0.0 to 1.0.\n// For example, hue_trapezoid(hue, GREEN)\n// computes how \"green\" the hue is.\nfloat fuzzy_rgb(float h, float center) {\n    // This makes an upside down V shape\n    // with maximum at 2. It's scaled\n    // to match the values in the diagram (see the link above)\n    // 2          /\\\n    //           /  \\\n    // 1        /    \\\n    //         /      \\\n    //        /        \\\n    // 0     /          \\\n    //      /      | center\n    //     /              \\\n    // -1 /                \\ \n    float triangle = 2.0 - SLOPE * abs(h - center);\n    \n    // Clamp it between 0.0 and 1.0 to turn it into \n    // a trapezoid\n    //           ____\n    // 1        /    \\ <- the top spans 120 degrees. (2/6)\n    //         /      \\\n    //        /        \\\n    // 0     /__________\\ <- the base spans 240 degrees (4/6)\n    //             | center\n    return clamp(triangle, 0.0, 1.0);\n}\n\n// Convert a hue value to an RGB vector\n// with full saturation. This asssumes\n// hue is in the range 0.0 to 1.0.\nvec3 hue2rgb(float hue) {\n    // Compute membership in \"green\" and \"blue\"\n    float green = fuzzy_rgb(hue, GREEN);\n    float blue = fuzzy_rgb(hue, BLUE);\n    \n    // Red has to be handled differently since\n    // it is both at 0 and 360 degrees. Compute\n    // two half-trapezoids and union them together.\n    float red1 = fuzzy_rgb(hue, RED1);\n    float red2 = fuzzy_rgb(hue, RED2);\n    float red = OR(red1, red2);\n    \n    // Return the results for each fuzzy set.\n    return vec3(red, green, blue);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // UV coordinates\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    // Paint a rainbow across the screen\n    // horizontally. Make the rainbow move a bit with time.\n    // the fract() ensures the hue is always in [0.0, 1.0]\n    float hue = fract(uv.x + 0.1 * iTime);\n   \n    // compute the fuzzy set membership\n    vec3 color = hue2rgb(hue);\n    \n    // From here, we could use the three components\n    // to do some fuzzy logic operations. I'll do this\n    // in upcoming shaders. For now, I just wanted\n    // to display the results.\n\n    // Output to screen\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}