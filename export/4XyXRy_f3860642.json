{"ver":"0.1","info":{"id":"4XyXRy","date":"1720082121","viewed":77,"name":"frame audio box","username":"ODtian","description":"null","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["3dsdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3Rn","filepath":"/media/a/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","previewfilepath":"/media/ap/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/XsyXzw\n#define PI 3.14159265359\n#define rot3p(x) mat3(cos(x), -sin(x), 0, sin(x), cos(x), 0,  0, 0, 1)\n#define rot3y(x) mat3(1, 0, 0, 0, cos(x), -sin(x), 0, sin(x), cos(x))\n#define rot3r(x) mat3(cos(x), 0, sin(x), 0, 1, 0,  -sin(x), 0, cos(x))\n\nvec3 hsv2rgb(in vec3 hsv) {\n    return hsv.z * (1.0 + 0.5 * hsv.y * (cos(2.0 * PI * (hsv.x + vec3(0.0, 0.6667, 0.3333))) - 1.0));\n}\n\nfloat hash(vec3 uv) {\n    return fract(sin(dot(uv, vec3(7.13, 157.09, 113.57))) * 48543.5453);\n}\n\nfloat getAmp(float frequency) {\n    return texture(iChannel0, vec2(frequency / 512.0, 0)).x;\n}\n\nfloat getWeight(float f) {\n    return (+getAmp(f - 2.0) + getAmp(f - 1.0) + getAmp(f + 2.0) + getAmp(f + 1.0) + getAmp(f)) / 5.0;\n}\n\nfloat sdBoxFrame(vec3 p, vec3 b, float e) {\n    p = abs(p) - b;\n    vec3 q = abs(p + e) - e;\n    return min(min(length(max(vec3(p.x, q.y, q.z), 0.0)) + min(max(p.x, max(q.y, q.z)), 0.0), length(max(vec3(q.x, p.y, q.z), 0.0)) + min(max(q.x, max(p.y, q.z)), 0.0)), length(max(vec3(q.x, q.y, p.z), 0.0)) + min(max(q.x, max(q.y, p.z)), 0.0));\n}\n\nfloat opRepetitionB(in vec3 p, in vec3 s, vec3 b, float e) {\n    vec3 q = p - s * round(p / s);\n    q *= rot3r(3.0 * iTime) * rot3p(iTime) * rot3y(2.0 * iTime);\n    return sdBoxFrame(q, b, e);\n}\n// better distance function thanks to Shane\nfloat map(vec3 p) {\n    // return sdBoxFrame(p - vec3(0.1), vec3(0.6), 0.001);\n    return opRepetitionB(p - vec3(0.5 * sin(1.0 * iTime), 0.2 * iTime, 0.6 * iTime), vec3(0.4), vec3(0.06) * smoothstep(-0.5, 1.0, vec3(getWeight(20.0), getWeight(40.0), getWeight(80.0))), 0.004);\n}\n\n// raymarching function\nfloat trace(vec3 o, vec3 r) {\n    float t = -0.0;\n    \n    for (int i = 0; i < 32; ++i) {\n        // Low iterations for blur.\n        float d = map(o + r * t);\n        if (d < .0001) {\n            break;\n        }\n        t += d;\n    }\n    \n    return t;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy / iResolution.xy * 2. - 1.;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    // ray\n    vec3 r = normalize(vec3(uv, 1.));\n    // origin\n    // vec3 o = vec3(-3, 0.0, -1);\n    \n    // rotate origin and ray\n    // float a = -0.0 * .5;\n    vec3 o = vec3(-3, 0.5 * iTime, -1);\n    \n    // rotate origin and ray\n    float a = -iTime * .3;\n    mat2 rot = mat2(cos(a), -sin(a), sin(a), cos(a));\n    o.xz *= rot;\n    r.xy *= rot;\n    r.xz *= rot;\n    \n    // march\n    float f = trace(o, r);\n    \n    // calculate color from angle on xz plane\n    vec3 p = o + f * r;\n    float angel = atan(p.x, p.z) / PI / 2.;\n    vec3 c = hsv2rgb(vec3(angel, 1., 1.));\n    \n    // add with fog\n    fragColor = vec4(c / (1. + f * f * .4), 1.0);\n}","name":"Image","description":"","type":"image"}]}