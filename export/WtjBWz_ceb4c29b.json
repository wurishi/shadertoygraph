{"ver":"0.1","info":{"id":"WtjBWz","date":"1598672558","viewed":46,"name":"IntersectionTestTriangle","username":"lunar","description":"something","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raytracing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec3 triangle[3]  = vec3[](\n\tvec3(2., 1., 1.),\n    vec3(0., 1., 2.),\n    vec3(1., 0., 3.)\n);\n\nvec3 intersect(vec3 o, vec3 d, vec3[3] triangle, out vec3 p)\n{\n    vec3 e1 = triangle[1] - triangle[0];\n    vec3 e2 = triangle[2] - triangle[0];\n    vec3 normal = normalize(cross(e1, e2));\n    vec3 pvec = cross(d, e2);\n    float det = dot(pvec, e1);\n    float invDet = 1. / det;\n    vec3 tvec = o - triangle[0];\n    float u = dot(tvec, pvec) * invDet; \n\tvec3 qvec = cross(tvec, e1);\n    float v = dot(d, qvec) * invDet;\n    float intersect = step(0., u) * step(0., v) * step(u + v, 1.);\n    p = intersect * (triangle[0] + u * e1 + v * e2);\n\treturn  intersect * normal;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.y - vec2(.5 * iResolution.x / iResolution.y, .5);\n    vec3 dir = normalize(vec3(uv.x, uv.y, 1.));\n    vec3 o = vec3(0., 0., -2.5);\n    vec3 p;\n\tvec3 norm = intersect(o, dir, triangle, p);\n\n    // Output to screen\n    fragColor = vec4(norm, 1.);\n}","name":"Image","description":"","type":"image"}]}