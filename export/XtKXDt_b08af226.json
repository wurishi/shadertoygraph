{"ver":"0.1","info":{"id":"XtKXDt","date":"1492543556","viewed":328,"name":"Playable Checkers","username":"banthar","description":"Two player checkers with simplified rules. Move with mouse.","likes":10,"published":1,"flags":32,"usePreview":0,"tags":["game"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvec4 EMPTY = vec4(0,0,0,0);\nvec4 WHITE = vec4(1,0,0,0);\nvec4 BLACK = vec4(0,0,1,0);\nfloat NaN = -1.0;\n\nvec4 get(ivec2 p) {\n    return texture(iChannel0, (vec2(p)+vec2(.5,.5))/iResolution.xy);\n}\n\nint getPiece(ivec2 p) {\n    vec4 c = get(p);\n    if( c == EMPTY) {\n        return 0;\n    } else if( c == WHITE) {\n        return 1;\n    } else if( c == BLACK) {\n        return -1;\n    }\n}\n\nfloat qlen(vec2 c) {\n    return max(abs(c.x),abs(c.y));\n}\n\nvec4 paintPiece(vec4 back, int piece, float r) {\n    vec4 white = vec4(1,1,1,1);\n    vec4 black = vec4(0,0,0,1);\n    \n    vec4 a;\n    vec4 b;\n    \n    if(piece == 0) {\n        a = back;\n        b = back;\n    } else if(piece == 1) {\n        a = black;\n        b = white;\n    } else if(piece == -1){\n        a = white;\n        b = black;\n    }\n    \n    float n = min(iResolution.x,iResolution.y)/16.0;\n    vec4 c = back;\n    c = mix(back,a,clamp((0.45-r)*n, 0.0, 1.0));\n    c = mix(c,b,clamp((0.42-r)*n, 0.0, 1.0));\n    c = mix(c,a,clamp((0.3-r)*n, 0.0, 1.0));\n    c = mix(c,b,clamp((0.265-r)*n,0.0, 1.0));\n    return c;\n}\n\nvec2 screenToBoard(vec2 screen) {\n\treturn (screen-0.5*iResolution.xy) / min(iResolution.x,iResolution.y) * vec2(2.0,-2.0) * 1.2;\n}\n\nvec2 screenToPiece(vec2 screen) {\n    return (screenToBoard(screen)+1.0)*4.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 c = screenToBoard(fragCoord.xy);\n    vec2 p = screenToPiece(fragCoord.xy);\n\n    \n    vec2 selected = get(ivec2(1,8)).xy*8.0;\n    vec2 hover = get(ivec2(2,8)).xy*8.0;\n    int selectedPiece = getPiece(ivec2(selected));\n    \n\n    float r = qlen(c);\n    if(r>=1.1) {\n\t\tfragColor = vec4(.0,.0,.0,1.0);\n    } else if(r>1.02) {\n\t\tfragColor = vec4(.6,.4,.2,1.0);\n    } else if(r>=1.0) {\n\t\tfragColor = vec4(.0,.0,.0,1.0);\n    } else {\n        bool color = floor(mod(p.x,2.0)) != floor(mod(p.y,2.0));\n        fragColor = color?vec4(.7,.6,.5,1.0):vec4(.6,.2,.1,1.0);\n        if(floor(selected) != floor(p)) {\n            int piece = getPiece(ivec2(p));\n            float r = length(mod(p,1.0) - 0.5);\n            fragColor = paintPiece(fragColor, piece, r);\n        }\n        if(selected != vec2(0,0)) {\n            if(floor(selected) == floor(p)){\n                fragColor+=0.3;\n            } else if( hover!=vec2(0,0) && floor(hover) == floor(p)) {\n                fragColor+=0.3;\n            }\n        }\n    }\n    if(selected != vec2(0,0)) {\n    \tfragColor = paintPiece(fragColor, selectedPiece, distance(screenToPiece(iMouse.xy),p));\n    }\n    // fragColor += texture(iChannel0, (floor(fragCoord.xy/16.0)+.5)/iResolution.xy);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec4 EMPTY = vec4(0,0,0,0);\nvec4 WHITE = vec4(1,0,0,0);\nvec4 BLACK = vec4(0,0,1,0);\nfloat NaN = -1.0;\n\nivec2 TURN_HOLDER = ivec2(0,8);\n\nvec4 get(ivec2 p) {\n    return texture(iChannel0, (vec2(p)+vec2(.5,.5))/iResolution.xy);\n}\n\nivec2 getCoord(ivec2 p) {\n    return ivec2(get(p)*8.0);\n}\n\nint getPiece(ivec2 p) {\n    vec4 c = get(p);\n    if( c == EMPTY) {\n        return 0;\n    } else if( c == WHITE) {\n        return 1;\n    } else if( c == BLACK) {\n        return -1;\n    }\n}\n\nint imod(int a, int b) {\n    return a-a/b*b;\n}\n\nbool isValidMove(vec2 from, vec2 to) {\n    vec2 dt = abs(to-from);\n    if(dt == vec2(1,1)) {\n        return getPiece(ivec2(to)) == 0;\n    } else if(dt == vec2(2,2)) {\n        return getPiece(ivec2(to)) == 0 && getPiece(ivec2((from+to)/2.0)) == -getPiece(ivec2(from));\n    } else {\n        return false;\n    }\n}\n\nvec2 screenToBoard(vec2 screen) {\n\treturn (screen-0.5*iResolution.xy) / min(iResolution.x,iResolution.y) * vec2(2.0,-2.0) * 1.2;\n}\n\nvec2 screenToPiece(vec2 screen) {\n    return (screenToBoard(screen)+1.0)*4.0;\n}\n\nvec4 swapColor(vec4 color) {\n    return color.bgra;\n}\n\nvec4 move(ivec2 coord) {\n    bool init = get(ivec2(0,8)) == EMPTY || iFrame == 0;\n    int orig = getPiece(coord);\n    \n    if(init) {\n        if(coord.x>=0 && coord.y>=0 && coord.x < 8 && coord.y < 8) {\n            if(imod(coord.x, 2) != imod(coord.y, 2)) {\n                if(coord.y<3) {\n                    return BLACK;\n                } else if (coord.y>4) {\n                    return WHITE;\n                } else {\n                    return EMPTY;\n                }\n            } else {\n                return EMPTY;\n            }\n        } else if(coord == TURN_HOLDER) {\n            return WHITE;\n        } else {\n            return EMPTY;\n        }\n    }\n    \n    if(coord.x>=0 && coord.y>=0 && coord.x < 8 && coord.y < 8 || coord == TURN_HOLDER) {\n        ivec2 to = getCoord(ivec2(2,8));\n        ivec2 from = getCoord(ivec2(1,8));\n        if(iMouse.z < 0.0 && to != ivec2(0,0)) {\n            if(coord == to) {\n                return get(from);\n            } else if(coord == from || to+from == coord*2) {\n                return EMPTY;\n            } else if(coord == ivec2(0,8)) {\n                return swapColor(get(coord));\n            } else {\n                return get(coord);\n            }\n        } else {\n            return get(coord);\n        }\n    } else if (coord == ivec2(1,8) || coord == ivec2(2,8)) {\n        if(iMouse.z > 0.0) {\n            vec2 selected = floor(screenToPiece(abs(iMouse.zw)));\n            int selectedPiece = getPiece(ivec2(selected));\n            vec2 over = floor(screenToPiece(abs(iMouse.xy)) - fract(selected));\n            if(selectedPiece == getPiece(TURN_HOLDER)) {\n                if(coord == ivec2(1,8)) {\n            \t\treturn vec4((selected)/8.0,0,1);\n                } else if (coord == ivec2(2,8)) {\n                    if(isValidMove(selected, over)) {\n            \t\t\treturn vec4((over)/8.0,0,1);\n                    }\n                }\n            } else {\n            \treturn vec4(0,0,0,1);\n            }\n        }\n    } else if(coord == TURN_HOLDER) {\n        return get(coord);\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    fragColor = move(ivec2(fragCoord));\n}","name":"Buffer A","description":"","type":"buffer"}]}