{"ver":"0.1","info":{"id":"mlffRf","date":"1693255867","viewed":81,"name":"pathtracer test 1","username":"wunko","description":"learning (i stole the camera thingy + cosine weighted sampling + hash from people)","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["raytracer","pathtracer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tfragColor = vec4(texture(iChannel1, fragCoord / iResolution.xy).rgb, 1.);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define M_PI 3.141592\n\nfloat seed = 0.0;\n\nstruct surface\n{\n    float hitdist;\n    vec3 col;\n    vec3 pos;\n    vec3 b;\n    float rgh;\n};\n\n\nvec2 hash2(inout float seed) {\n    return fract(sin(vec2(seed+=0.1,seed+=0.1))*vec2(43758.5453123,22578.1459123));\n}\n\n\nvec3 dirr(vec3 n, inout float seed)\n{\n    vec2 u = hash2(seed);\n\n    float r = sqrt(u.x);\n    float theta = 2.0 * M_PI * u.y;\n \n    vec3  B = normalize( cross( n, vec3(0.0,1.0,1.0) ) );\n\tvec3  T = cross( B, n );\n    \n    return normalize(r * sin(theta) * B + sqrt(1.0 - u.x) * n + r * cos(theta) * T);\n}\n\n\nsurface sphere( in vec3 ro, in vec3 rd, in vec3 ce, in float ra, in vec3 col, in vec3 br, in float rgh)\n{\n    vec3 oc = ro - ce;\n    float b = dot( oc, rd );\n    vec3 qc = oc - b*rd;\n    float h = ra*ra - dot( qc, qc );\n    if( h<0.0 || b>0.0 ) return surface(999999.0, vec3(0.0), vec3(0.0), vec3(0.9), 1.0);\n    h = sqrt( h );\n    return surface(-b-h, col, ce, br, rgh);\n}\n\nvec3 trace(in vec3 cam, in vec3 dir, in float seed)\n{\n    vec3 raycol = vec3(1.0);\n    vec3 raybr = vec3(0.0);\n    for(int i = 0; i < 5; i++)\n    {\n        surface k = sphere(cam, dir, vec3(-1.0, 1.0, 0.0), 1.0, vec3(0.25, 0.2, 0.3), vec3(0.0), 1.0);\n    \n        surface h = sphere(cam, dir, vec3(0.0, -10000.0, 0.0), 10000.0, vec3(1.0), vec3(0.0), 1.0);\n        if(h.hitdist<k.hitdist && h.hitdist != 696969.0)\n        {\n        k=h;\n        }\n        h = sphere(cam, dir, vec3(1.0, 0.8, 0.0), 0.8, vec3(0.9, 0.2, 0.5), vec3(0.0), 0.0);\n        if(h.hitdist<k.hitdist && h.hitdist != 696969.0)\n        {\n        k=h;\n        }\n        h = sphere(cam, dir, vec3(-3.0, 1.5, -3.0), 1.5, vec3(0.3, 0.8, 0.9), vec3(0.0), 1.0);\n        if(h.hitdist<k.hitdist && h.hitdist != 696969.0)\n        {\n        k=h;\n        }\n        \n       \n        \n        raybr += raycol*k.b;\n        \n        \n        raycol *= k.col;\n        \n        if (k.hitdist == 999999.0)\n           {\n           return raybr;\n           }\n           \n        vec3 id = cam+dir*k.hitdist;\n        vec3 n = normalize(id-k.pos);\n        \n        vec3 dir2 = reflect(dir, n);\n        dir = dirr(n, seed);   \n        dir = normalize((dir2*(1.0-k.rgh))+(dir*k.rgh));\n        \n        cam = id + 0.00001*n;\n\n    }\n    return raybr;\n    \n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{vec2 q = fragCoord.xy / iResolution.xy;\n    \n    vec2 p = -1.0 + 2.0 * q;\n    p.x *= iResolution.x/iResolution.y;\n    //vec2 mo = 0.5+iMouse.xy/iResolution.xy;\n    vec2 mo = vec2(0.2+iTime*0.0, 0.12);\n    float an1 = -5.0*mo.x;\n\tfloat an2 = 5.0*mo.y;\n    vec3 cam = 3.5*normalize(vec3(sin(an2)*cos(an1), cos(an2)-0.5, sin(an2)*sin(an1)));\n    vec3 ww = normalize(vec3(-1.0,0.0,0.0) - cam);\n    vec3 uu = normalize(cross( vec3(0.0,1.0,0.0), ww ));\n    vec3 vv = normalize(cross(ww,uu));\n    vec3 dir = normalize( p.x*uu + p.y*vv + 1.0*ww );\n    \n    float seed = p.x + p.y * 3.43121412313 + fract(1.12345314312*iTime);\n    \n    vec3 col = trace(cam, dir, seed);\n    \n    vec3 gg = col+(texture(iChannel0, fragCoord/iResolution.xy).rgb * float(iFrame));\n    fragColor = fragColor = vec4(gg/float(iFrame+1), 1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}