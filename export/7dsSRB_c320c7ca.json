{"ver":"0.1","info":{"id":"7dsSRB","date":"1618824336","viewed":106,"name":"Nikorov, magic pyramid, Task 2","username":"KiriNi","description":"Магическая пирамида с огнем и туманом внутри и двумя источниками света снаружи. \nРеализованные пункты задания:\n1) Базовая часть;\n2) Мягкие тени;\n3) Анти-алиасинг;\n5) Окружение в виде текстурированного куб-мапа;\n\n","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["fire","pyramid","homework","computergraphic","magicball"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv) / float(iFrame+1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3Rr","filepath":"/media/a/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin","previewfilepath":"/media/ap/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin","type":"volume","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float INF = 1e10;\nconst float EPS = 1e-5;\nconst float TABLE_RADIUS = 10.0;\nconst int REFLECT_NUMBER = 5;\n\nconst vec3 CAMERA_POS = 1.0*vec3(-5, 1.4, 7);\nconst vec3 VIEW_POS = vec3(0, 0, 0.0);\n\nconst vec3 LIGHT1_POS = vec3(-2.5, 1.8, -3.6);\nconst float LIGHT1_RADIUS = 0.5;\nconst vec3 LIGHT1_COLOR = vec3(0.8, 0.0, 0.4);\n\nvec3 LIGHT2_POS = vec3(3, 1.2, -2);\nconst float LIGHT2_RADIUS = 0.25;\nconst vec3 LIGHT2_COLOR = vec3(0.1, 1, 0.2);\n\nconst vec3 LIGHT3_POS = vec3(0., -0.4, 0);\nconst float LIGHT3_RADIUS = 0.5;\nconst vec3 LIGHT3_COLOR = vec3(1.0, 0.23, 0);\n\nconst vec3 FIRE_COLOR = vec3(1.0, 0.23, 0);\n\nconst float CYLINDER_RADIUS = 1.5;\nconst float CYLINDER_HEIGHT = 0.5;\n\nconst float AIR_N = 1.0;\nconst float GLASS_N = 1.5; // refraction coef;\nfloat GLASS_R;  // Frenel coef\n\nconst float AIR_GLASS_CRITICAL_ANGLE_SIN = AIR_N / GLASS_N;\n\nvec3 randVals;\nvec3 randDir;\n\nfloat pow2(float x) {\n    return x * x;\n}\n\nfloat rand(float frame) {\n    return fract(sin( dot(vec3(frame), vec3(12.9898, 78.233, 45.5432) )) * 43758.5433);\n}\n\nfloat lerp(float a, float b, float t) {\n    return a + (b-a) * max(0.0, min(1.0, t));\n}\n\nfloat hash(float n) {\n    float x = sin(n)*43758.5453;\n    return x - floor(x);\n}\n\nfloat noise(vec3 pos) {\n    vec3 p = vec3(floor(pos.x), floor(pos.y), floor(pos.z));\n    vec3 f = vec3(pos.x - p.x, pos.y - p.y, pos.z - p.z);\n    f = f * (f * (vec3(3.0, 3.0, 3.0) - 2.0*f));\n    float n = dot(p, vec3(1, 57, 113));\n    return lerp(\n                 lerp( \n                       lerp(hash(n), hash(n + 1.0), f.x),\n                       lerp(hash(n + 57.0), hash(n + 58.0), f.x),\n                       f.y\n                 ),\n                 lerp(\n                       lerp(hash(n + 113.0), hash(n + 114.0), f.x),\n                       lerp(hash(n + 170.0), hash(n + 171.0), f.x),\n                       f.y\n                 ),\n                 f.z                   \n                );\n}\n\nvec3 rotate(vec3 pos) {\n    vec3 rotate1 = vec3( 0.00,  0.80,  0.60);\n    vec3 rotate2 = vec3(-0.80,  0.36, -0.48);\n    vec3 rotate3 = vec3(-0.60, -0.48,  0.64);\n    return vec3(dot(rotate1, pos), dot(rotate2, pos), dot(rotate3, pos));\n}\n\nfloat fractal_brownian_motion(vec3 pos) {\n    vec3 p = rotate(pos);\n    float f = 0.0;\n    f += 0.5 * noise(p); \n    p *= 2.32;\n    f += 0.25 * noise(p);\n    p *= 3.03;\n    f += 0.125 * noise(p);\n    p *= 2.61;\n    f += 0.0625 * noise(p);\n    \n    return f / 0.9375;\n}\n\n\nstruct Plane {\n    vec3 normal;\n    vec3 point;\n};\n\nstruct Triangle {\n\tvec3 a;\n    vec3 b;\n    vec3 c;\n};\n\nstruct Rectangle {\n    vec3 a;\n    vec3 b;\n    vec3 c;\n    vec3 d;\n};\n\nstruct Pyramid {\n    Triangle a;\n    Triangle b;\n    Triangle c;\n    Triangle d;\n    Triangle base1;\n    Triangle base2;\n    \n};\n\nfloat tracePlane(vec3 pos, vec3 dir, out vec3 normal, Plane plane, float radius_restrict) {\n    // <plane.normal, pos + t*dir - plane.point> = 0\n    // t = <plane.normal, plane.point - pos> / <plane.normal, dir>\n    float t = dot(plane.normal, plane.point - pos) / dot(plane.normal, dir);\n    float r = radius_restrict; // Table radius\n    if (t < 0.0) {\n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) >= r*r){            \n        return INF;\n    }\n    normal = plane.normal;\n    return t;\n}\n\nfloat traceTriangle(vec3 pos, vec3 dir, out vec3 normal, Triangle triangle, float mult) {\n    Plane face = Plane(normalize(cross(-triangle.a + triangle.b, -triangle.a + triangle.c)), triangle.a); \n    vec3 trNorm;\n    float t = tracePlane(pos, dir, trNorm, face, INF);\n    if ((t > 0.0) && (t < INF)) {\n        vec3 worldPos = pos + t*dir;\n        vec3 first = normalize(triangle.a - worldPos);\n        vec3 second = normalize(triangle.b - worldPos);\n        vec3 third = normalize(triangle.c - worldPos);\n        float fangle = acos(dot(first, second));\n        float sangle = acos(dot(second, third));\n        float tangle = acos(dot(third, first));\n        float pi = 3.1415926535;\n        if (abs(fangle + sangle + tangle - 2.0*pi) > mult*EPS) {\n            return INF;\n        }\n        normal = face.normal;\n        return t;        \n    }\n    return INF;\n}\n\nfloat tracePyramid(vec3 pos, vec3 dir, out vec3 normal, Pyramid pyramid, float mult) {\n    Triangle faces[6] = Triangle[6](pyramid.a, pyramid.b, pyramid.c, pyramid.d, pyramid.base1, pyramid.base2);\n    float t = INF;\n    for (int i = 0; i < 6; ++i) {\n        vec3 faceNorm;\n        float faceT = traceTriangle(pos, dir, faceNorm, faces[i], mult);\n        if (faceT < t) {\n            t = faceT;\n            if (i < 4) {\n                normal = faceNorm;\n            } else {\n                normal = -faceNorm;\n            }\n        }\n    }\n    return t;\n}\n\nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal) {\n    float t = INF;\n    float b = dot(pos, dir);\n    float D = b * b - dot(pos, pos) + r * r;\n    if (D < 0.0) {\n        return INF;\n    } else {\n        t = -b - sqrt(D);\n        if (t > 0.0) {\n            normal = normalize(pos + t * dir);\n            return t;\n        }\n        t = -b + sqrt(D);\n        if (t < 0.0) {\n            return INF;\n        } else {\n            normal = normalize(pos + t * dir);\n            return t;\n        }            \n    }\n}\n\nfloat traceCylinder(vec3 pos, vec3 dir, out vec3 normal) {\n    float up = -1.0;\n    float down = -1.5;\n    float t = (up - pos.y) / dir.y;\n    float r = CYLINDER_RADIUS;\n    if (t < 0.0) {\n        return INF;\n    } \n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) < r*r){  \n        normal = vec3(0, 1, 0);\n        return t;\n    }    \n    \n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float D = b * b - (dot(pos.xz, pos.xz) - r*r) * a;\n    if (D < 0.0) {\n        return INF;\n    }\n    t = (-b - sqrt(D)) / a;\n    worldPos = t * dir + pos;\n    if ((worldPos.y >= down) && (worldPos.y < up) && (t > 0.0)) {\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    }\n\n    t = (-b + sqrt(D)) / a;\n    worldPos = t * dir + pos;\n    if ((worldPos.y >= down) && (worldPos.y < up) && (t > 0.0)) {\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    }    \n    \n    return INF;\n}\n\nfloat traceFire(vec3 pos, vec3 dir, float r, out vec3 normal) {\n    float t = traceSphere(pos, dir, r, normal);\n    float noise_amplit = 0.7;\n    vec3 worldPos = pos + t*dir;\n    vec3 vecDispl = 16.0 * pos; \n    float displacment = -fractal_brownian_motion(pos*3.4) * noise_amplit;\n    return sqrt(dot(pos, pos)) - (r + displacment);\n}\n\nbool isOccluded(vec3 pos, vec3 target, Pyramid pyramid) {\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n    \n    \n    vec3 pyrNorm;\n    float pyrT = tracePyramid(pos, dir, pyrNorm, pyramid, 1.0);\n    if (pyrT < dist) {             \n        return true;\n    }\n    pyrT = tracePyramid(pos, dir, pyrNorm, pyramid, 100.0);\n    if (pyrT < dist) {  \n        return true;\n    }\n    \n    vec3 cylNorm;\n    float cylT = traceCylinder(pos, dir, cylNorm);\n    if (cylT < dist) {\n        return true;\n    }\n    return false;\n}\n\nvec3 computeLight(vec3 pos, vec3 color, vec3 normal, Pyramid pyramid) {\n    // Lambert lightning\n    vec3 toLight1 = LIGHT1_POS - pos;\n    float distSq1 = dot(toLight1, toLight1);\n    float att1 = isOccluded(pos, LIGHT1_POS + randDir * LIGHT1_RADIUS, pyramid) ? 0.0 : 20.0f / distSq1;\n    vec3 toLight2 = LIGHT2_POS - pos;\n    float distSq2 = dot(toLight2, toLight2);\n    float att2 = isOccluded(pos, LIGHT2_POS + randDir * LIGHT2_RADIUS, pyramid) ? 0.0 : 10.0f / distSq2;\n    vec3 toLight3 = LIGHT3_POS - pos;\n    float distSq3 = dot(toLight3, toLight3);\n    float att3 = 3.0f / distSq3;\n    return color * (\n          max(0.0, dot(normal, normalize(toLight1))) * att1 * LIGHT1_COLOR\n        + max(0.0, dot(normal, normalize(toLight2))) * att2 * LIGHT2_COLOR \n        + max(0.0, dot(normal, normalize(toLight3))) * att3 * LIGHT3_COLOR \n        + texture(iChannel1, normal).rgb * 0.1\n        );\n}\n\nvec3 refraction(vec3 v,  vec3 normal, float n1, float n2) {\n    if (dot(v, normal) < 0.0) {\n        normal = -normal;\n    }\n    float cosA = dot(v, normal);\n    float sinA = sqrt(1.0 - cosA*cosA);\n    vec3 tang = normalize(v - cosA * normal);\n    float sinB = sinA * (n1 / n2) ;\n    float cosB = sqrt(1.0 - sinB*sinB);\n    return normalize(sinB * tang + cosB * normal);\n}\n\n\nfloat MARCH_SIZE = 0.1;\nint MAX_STEPS = 100;\nfloat ABSORPTION = 0.5;\nfloat BeerLambert(float absorptionCoef, float distanceTraveled) {\n    return exp(-absorptionCoef * distanceTraveled);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    randDir = normalize(randVals - 0.5);\n    \n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (randVals.xy - 0.5) * 1.0) / iResolution.x;\n    vec3 front = normalize(VIEW_POS - CAMERA_POS);\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = normalize(cross(front, up));\n    up = normalize(cross(right, front));\n    vec3 viewVec = normalize(front + right * uv.x + up * uv.y);\n    \n    const int EMISSION = 0;\n    const int DIFFUSE = 1;\n    const int REFLECTION = 2;\n    const int REFRACTION = 3;\n\n    vec3  curPos = CAMERA_POS;\n    vec3 curDir = viewVec;\n    float n1 = AIR_N;\n    float n2 = GLASS_N; // refraction coef;\n    float nEnter = n1;\n    GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N + GLASS_N);  // Frenel coef\n    \n    Plane floorPlane = Plane(vec3(0, 1, 0), vec3(0, -1.2, 0));\n    \n    Triangle face1 = Triangle(vec3(-1, -1, -1), vec3(-1, -1, 1), vec3(0, 1.0, 0));\n    Triangle face2 = Triangle(vec3(-1, -1, 1), vec3(1, -1, 1), vec3(0, 1.0, 0));\n    Triangle face3 = Triangle(vec3(1, -1, 1), vec3(1, -1, -1), vec3(0, 1.0, 0));\n    Triangle face4 = Triangle(vec3(1, -1, -1), vec3(-1, -1, -1), vec3(0, 1.0, 0));\n    Triangle base1 = Triangle(vec3(-1, -1, -1), vec3(-1, -1, 1), vec3(1, -1, 1));\n    Triangle base2 = Triangle(vec3(1, -1, 1), vec3(1, -1, -1), vec3(-1, -1, -1));\n    \n    Triangle mirror1 = Triangle(vec3(0, -1.2, -8), vec3(-2.5, -1.2, -8), vec3(-2.5, 1.5, -8));\n    Triangle mirror2 = Triangle(vec3(-2.5, 1.5, -8), vec3(0, 1.5, -8), vec3(0, -1.2, -8));\n    \n    Pyramid pyramid = Pyramid(face1, face2, face3, face4, base1, base2);\n    Pyramid shell = Pyramid(face1, face2, face3, face4, base1, base2);\n    \n    vec3 LIGHT2_POS = vec3(3, 1.2, -2) + vec3(1, 0, 1) * randVals.x * 0.1;\n\n    float opacity = 1.0;\n    bool insidePyramide = false;\n    vec3 fogEffect = vec3(0.0);\n    for (int i = 0; i < REFLECT_NUMBER; ++i) {\n        vec3 color;\n        float t = INF;\n        vec3 normal;\n        vec3 planeNorm;\n\n        vec3 worldPos;\n        int materialType = EMISSION;\n\n        float planeT = tracePlane(curPos, curDir, planeNorm, floorPlane, TABLE_RADIUS);\n        if (planeT < t) {\n            t = planeT;\n            materialType = DIFFUSE;\n            worldPos = t * curDir + curPos;\n            color = texture(iChannel0, worldPos.xz*0.1).rgb;\n            normal = planeNorm;\n            if (randVals.y < 0.0) {\n                materialType = REFLECTION;\n            }\n        }\n\n        vec3 l1Norm;        \n        float light1T = traceSphere(curPos - LIGHT1_POS, curDir, LIGHT1_RADIUS, l1Norm);\n        if (light1T < t) {\n            t = light1T;\n            materialType = EMISSION;\n            color = LIGHT1_COLOR;\n            normal = l1Norm;\n        }\n\n        vec3 l2Norm;\n        float light2T = traceSphere(curPos - LIGHT2_POS, curDir, LIGHT2_RADIUS, l2Norm);\n        if (light2T < t) {\n            t = light2T;\n            materialType = EMISSION;\n            color = LIGHT2_COLOR;\n            normal = l2Norm;\n        }\n        \n        vec3 mir1Norm;\n        float mir1T = traceTriangle(curPos, curDir, mir1Norm, mirror1, 100.0);\n        if (mir1T < t) {\n            t = mir1T;\n            materialType = REFLECTION;\n            normal = mir1Norm;\n        }\n        vec3 mir2Norm;\n        float mir2T = traceTriangle(curPos, curDir, mir2Norm, mirror2, 100.0);\n        if (mir2T < t) {\n            t = mir2T;\n            materialType = REFLECTION;\n            normal = mir2Norm;\n        }\n        \n        if (n1 == GLASS_N) {\n            for (int j = 0; j < MAX_STEPS; ++j) {\n                vec3 l3Norm;        \n                float light3T = traceFire(curPos - LIGHT3_POS + curDir*MARCH_SIZE*float(j), curDir, LIGHT3_RADIUS, l3Norm);\n                if ((light3T < 0.0) && (MARCH_SIZE*float(j) < t)) {\n                    t = MARCH_SIZE*float(j);\n                    float t1 = traceFire(curPos - LIGHT3_POS + curDir*t + vec3(EPS, 0, 0), curDir, LIGHT3_RADIUS, l3Norm) - t;\n                    float t2 = traceFire(curPos - LIGHT3_POS + curDir*t + vec3(0, EPS, 0), curDir, LIGHT3_RADIUS, l3Norm) - t;\n                    float t3 = traceFire(curPos - LIGHT3_POS + curDir*t + vec3(0, 0, EPS), curDir, LIGHT3_RADIUS, l3Norm) - t;            \n                    normal = normalize(vec3(t1, t2, t3));\n                    materialType = DIFFUSE;      \n                    color = LIGHT3_COLOR;\n                    break;\n                }\n            }\n        } \n\n        vec3 cylNorm;\n        float cylT = traceCylinder(curPos, curDir, cylNorm);\n        if (cylT < t) {\n            t = cylT;\n            materialType = DIFFUSE;\n            worldPos = t * curDir + curPos;\n            color = texture(iChannel2, worldPos.xz * worldPos.y * 0.8).rgb;\n            normal = cylNorm;\n        }\n        \n        vec3 pyrNorm;\n        float pyrT = tracePyramid(curPos, curDir, pyrNorm, pyramid, 100.0);\n        bool insidePyr = (pyrT < INF/2.0) && (n1 == GLASS_N);\n        if (pyrT < t) {\n            t = pyrT;\n            normal = pyrNorm;\n            materialType = REFLECTION;\n            if (randVals.x * 0.2 < GLASS_R) {\n                materialType = REFLECTION;\n            } else {\n                materialType = REFRACTION;\n                if (dot(curDir, normal) < 0.0) {\n                    n1 = AIR_N;\n                    n2 = GLASS_N;\n                    \n                } else {\n                    if (sqrt(1.0 - dot(normal, curDir)*dot(normal, curDir)) < AIR_GLASS_CRITICAL_ANGLE_SIN) { \n                        n1 = GLASS_N;\n                        n2 = AIR_N;\n                    } else {\n                        materialType = REFLECTION;\n                    }\n                    \n                }\n            }            \n\n        }        \n        \n        vec3 shellNorm;\n        float shellT = tracePyramid(curPos, curDir, shellNorm, shell, 1.0);\n        if (shellT <= t) {\n            t = shellT;\n            normal = shellNorm;\n            materialType = REFLECTION;                        \n\n        }\n        \n        if (insidePyr) {\n            vec3 fireColorAtPoint = 0.5*FIRE_COLOR * texture(iChannel3, curPos*0.8).r;\n            vec3 prevCurPos, prevCurDir;\n            prevCurPos = curPos;\n            prevCurDir = curDir;\n\n            for (int j = 0; j < MAX_STEPS; ++j) {\n                if (MARCH_SIZE * float(j) > pyrT) {\n                    break;\n                }\n                curPos = curPos + curDir * MARCH_SIZE * float(j);\n                float prevOpacity = opacity;\n                opacity *= BeerLambert(ABSORPTION, MARCH_SIZE);\n                float absorbtion = prevOpacity - opacity; \n                fogEffect += computeLight(curPos, fireColorAtPoint, normal, pyramid);\n            }\n            curPos = prevCurPos;\n            curDir = prevCurDir;\n        }\n        \n        if (t != INF) {\n            worldPos = t * curDir + curPos;\n            fragColor = texture(iChannel0, worldPos.xz);\n\n            if (materialType == EMISSION) {\n               fragColor.rgb = mix((fogEffect/1.0), color, opacity);\n               break;\n            } else if (materialType == DIFFUSE) {\n                fragColor.rgb = mix((fogEffect/1.0), computeLight(worldPos, color, normal, pyramid), opacity);\n                break;\n            } else if (materialType == REFLECTION) {\n                curDir = reflect(curDir, normal);\n                curPos = worldPos + curDir*1e-5;                \n            } else if (materialType == REFRACTION) {\n                curDir = refraction(curDir, normal, n1, n2);\n                curPos = worldPos + curDir*1e-5;\n                float tmp = n2;\n                n2 = n1; \n                n1 = tmp; \n            }  \n        } else {\n            fragColor = texture(iChannel1, curDir);\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv) + texture(iChannel1, uv);\n}","name":"Buffer B","description":"","type":"buffer"}]}