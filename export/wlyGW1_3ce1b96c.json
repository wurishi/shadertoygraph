{"ver":"0.1","info":{"id":"wlyGW1","date":"1578808896","viewed":319,"name":"whiteness","username":"Carandiru","description":"finding how white a color truly is","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["white","luma","convert"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// http://bit.ly/supersinfulsilicon\n\n#define LUMA vec3(0.2126f, 0.7152f, 0.0722f)\n\nfloat saturation(vec3 rgb) {\n    float mini = min(rgb.r,min(rgb.g,rgb.b));\n    float maxi = max(rgb.r,max(rgb.g,rgb.b));\n    \n    return (maxi - mini) / maxi;\n}\n\nfloat whiteness(vec3 rgb) {\n    \n    return (1.0f-saturation(rgb)) * ((rgb.r+rgb.g+rgb.b)/3.0f);\n}\n\nvec3 enhance(vec3 a, float x) {\n\treturn a * (x + dot(a, LUMA));    \n}\n\nvec3 blackbody(float t){\n    // http://en.wikipedia.org/wiki/Planckian_locus\n\n    vec4 vx = vec4( -0.2661239e9, -0.2343580e6, 0.8776956e3, 0.179910   );\n    vec4 vy = vec4( -1.1063814,   -1.34811020,  2.18555832, -0.20219683 );\n    //vec4 vy = vec4(-0.9549476,-1.37418593,2.09137015,-0.16748867); //>2222K\n    float it = 1. / t;\n    float it2= it * it;\n    float x = dot( vx, vec4( it*it2, it2, it, 1. ) );\n    float x2 = x * x;\n    float y = dot( vy, vec4( x*x2, x2, x, 1. ) );\n    \n    // http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html\n    mat3 xyzToSrgb = mat3(\n         3.2404542,-1.5371385,-0.4985314,\n        -0.9692660, 1.8760108, 0.0415560,\n         0.0556434,-0.2040259, 1.0572252\n    );\n\n    vec3 srgb = vec3( x/y, 1., (1.-x-y)/y ) * xyzToSrgb;\n\n    return max( srgb, 0. );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec3 section_begin = vec3(lessThan(uv.yyy,vec3(0.333f,0.666f,0.999f)));\n    vec3 section_end = vec3(greaterThan(uv.yyy,vec3(0.0f,0.333f,0.666f)));\n    \n    float tt = 0.5f;\n    float xx = uv.x * 0.5f + 0.5f;\n    \n    float t = xx * abs(sin(iTime * tt)) * 0.5f;\n    \n    float c = xx * abs(cos(iTime * tt)) * 0.5f;\n    \n    vec3 p = vec3(xx);\n    \n    vec3 rgb = vec3(0);\n    rgb += enhance(c + vec3(t*t*t,     p.x+t,      p.x*t), uv.x ) * section_begin.x * section_end.x;\n    rgb += enhance(c + vec3(p.y*t,     t*t*t,      p.y+t), uv.x ) * section_begin.y * section_end.y;\n    rgb += enhance(c + vec3(p.z+t,     p.z*t,      t*t*t), uv.x ) * section_begin.z * section_end.z;\n    //rgb = rgb*rgb;\n    \n    vec3 color = rgb;\n    float iswhite = whiteness(rgb);\n    \n    float highlight = mod(uv.x, iswhite) + iswhite * ((rgb.x+rgb.y+rgb.z)/3.0f);\n    color = mix(rgb, vec3(highlight), iswhite);\n\n    vec3 bbody = blackbody(667.0f * 2.0f+iswhite* 15000.0f);\n    \n    bbody = (bbody*0.5f);//*(1.0f-bbody*0.5f);\n    bbody.x = ((bbody.x+bbody.y+bbody.z)/3.0f);\n    \n    color = mix(enhance(vec3(iswhite), bbody.x), color, bvec3(int(iTime) & 4));\n    color = mix(color, enhance(color, iswhite), vec3(int(fragCoord.y) & 3));\n    \n    fragColor.rgb = color;//vec3(whiteness(rgb.rgb));\n    \n    \n}","name":"Image","description":"","type":"image"}]}