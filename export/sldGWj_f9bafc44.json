{"ver":"0.1","info":{"id":"sldGWj","date":"1636755885","viewed":63,"name":"RainbowPlasma","username":"YDOG","description":"Rainbow plasma shader","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["noise","plasma","rainbow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n\n// references:\n// https://www.shadertoy.com/view/Md23DV\n// https://www.shadertoy.com/view/Msf3WH\n// https://en.wikipedia.org/wiki/Plasma_effect \n\n// TODO: \n// scrolling noise function\n// interpolate gradient based on noise\n// rainbow gradient\n// use HSV instead of RGB\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 p = vec2(fragCoord.xy / iResolution.xy);\n\tvec2 r =  2.0*vec2(fragCoord.xy - 0.5*iResolution.xy)/iResolution.y;\n\tfloat t = iTime;\n    r = r * 8.0;\n\t\n    float v1 = sin(r.x +t);\n    float v2 = sin(r.y +t);\n    float v3 = sin(r.x+r.y +t);\n    float v4 = sin(length(r) +1.7*t);\n\tfloat v = v1+v2+v3+v4;\n\t\n\tvec3 ret;\n\t\n\t//if(p.x < 1./10.) { // Part I\n\t//\t// vertical waves\n\t//\tret = vec3(v1);\n\t//} else if(p.x < 2./10.) { // Part II\n\t//\t// horizontal waves\n\t//\tret = vec3(v2);\n\t//} else if(p.x < 3./10.) { // Part III\n\t//\t// diagonal waves\n\t//\tret = vec3(v3);\n\t//} else if(p.x < 4./10.) { // Part IV\n\t//\t// circular waves\n\t//\tret = vec3(v4);\n\t//} else if(p.x < 5./10.) { // Part V\n\t//\t// the sum of all waves\n\t//\tret = vec3(v);\n\t//} else if(p.x < 6./10.) { // Part VI\n\t//\t// Add periodicity to the gradients\n\t//\tret = vec3(sin(2.*v));\n\t//} else if(p.x < 10./10.) { // Part VII\n\t\t// mix colors\n\t\tv *= 1.0;\n\t\tret = vec3(sin(v), sin(v+0.5*PI), sin(v+1.0*PI));\n\t//}\t\n\t\n\tret = 0.5 + 0.5*ret;\n\t\n    vec3 pixel = ret;\n    fragColor = vec4(pixel, 1.);\n}","name":"Image","description":"","type":"image"}]}