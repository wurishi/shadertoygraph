{"ver":"0.1","info":{"id":"stKyzt","date":"1662917326","viewed":94,"name":"TBOS_Shapes2","username":"nako","description":"The Book of Shades Algorithmic drawing\nhttps://thebookofshaders.com/06/","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["thebookofshaders"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 fillCircle(vec2 center, float r, vec2 st, vec3 color){\n    return step(vec3(distance(st, center)), vec3(r))*color;\n    \n}\n\nvec2 random2( vec2 p ) {\n    return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 st = gl_FragCoord.xy/iResolution.xy;\n    st.x *= iResolution.x/iResolution.y;\n    vec3 color = vec3(.0);\n\n    // Scale\n    st *= 4.;\n\n    // Tile the space\n    vec2 i_st = floor(st);\n    vec2 f_st = fract(st);\n\n    float m_dist = 1.;  // minimum distance\n\n    for (int y= -1; y <= 1; y++) {\n        for (int x= -1; x <= 1; x++) {\n            // Neighbor place in the grid\n            vec2 neighbor = vec2(float(x),float(y));\n\n            // Random position from current + neighbor place in the grid\n            vec2 point = random2(i_st + neighbor);\n\n\t\t\t// Animate the point\n            point = 0.5 + 0.5*sin(iTime + point*8.0);\n\n\t\t\t// Vector between the pixel and the point\n            vec2 diff = neighbor + point - f_st;\n\n            // Distance to the point\n            float dist = length(diff)*1.3;\n\n            // Keep the closer distance\n            m_dist = min(m_dist, dist);\n        }\n    }\n    color -= 0.1;\n\n    // Draw the min distance (distance field)\n    color += m_dist;\n\n    // Draw cell center\n    color.g += 1.-step(.02, m_dist);\n\n    // Draw grid\n    color += step(.975, f_st.x) + step(.975, f_st.y);\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}