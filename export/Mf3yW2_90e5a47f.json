{"ver":"0.1","info":{"id":"Mf3yW2","date":"1731169853","viewed":150,"name":"Random Delaunay Triangulation 2","username":"FabriceNeyret2","description":"simplifying \"Random Delaunay Triangulation\" by tomkh. https://shadertoy.com/view/4sKyRD\n\ndel last comment to see something enlighting ;-)\nSo algo could simplify a lot more, but not sure how this form would generalize to more random point distribution.","likes":11,"published":3,"flags":0,"usePreview":0,"tags":["procedural","voronoi","random","distance","delaunay"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// simplifying 2554 chars \"Random Delaunay Triangulation\" by tomkh. https://shadertoy.com/view/4sKyRD\n// see also algo dedicated to square grids (492 chars): https://www.shadertoy.com/view/MfccD2\n\n#define H(v)            sin( 6.3* fract(1e4*sin( (v) * mat2(47, -73, 91, -37))) + iTime )      // random point\n#define D(p0,p1)        dot( vec2(-p0.y,p0), normalize(p1-p0) )                                // cross2\n#define flip(h1,h2,h3)  determinant( mat3( h3, dot(h3,h3), h2, dot(h2,h2),  h1, dot(h1,h1) ) ) // check if direct\n#define P(x,y)          .5-fract(p) + vec2(x+k%2, y+k/2) + H( ceil(p) + vec2(x+k%2, y+k/2) )/4.\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 R = iResolution.xy, h0,h1,h2,h3,\n         p = 5. * ( u+u - R ) / R.y; // + iTime;        \n    float d;                                     // --- delaunayTriangulation(p)\n    for( int k; k < 4 && d<=0.; k++ )\n        h0 = P(-1, 0), \n        h1 = P(-1,-1),\n        h2 = P( 0,-1),\n        h3 = P( 0, 0),\n        d = min( min( D(h0, h1),                 // delaunayQuad(h0,h1,h2,h3)\n                      D(h1, h2) ),\n                 min( D(h2, h3), \n                      D(h3, h0) ));\n \n \n    O = min( abs( flip(h0-h2, h1-h2, h3-h2 ) > 0.\n                    ? D(h3,h1)\n                    : D(h0,h2)\n                     ), d )  // d: was min(m,d)    \n         * R.yyyy*.1;                            // draw segment\n         \n // O = 1.-vec4( abs( flip(h0-h2, h1-h2, h3-h2 )>0. ?D(h3,h1) :D(h0,h2) ), d, 1,1)  * R.yyyy*.1;\n}\n","name":"Image","description":"","type":"image"}]}