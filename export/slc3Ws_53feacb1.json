{"ver":"0.1","info":{"id":"slc3Ws","date":"1636927279","viewed":77,"name":"Caesar's Bubbles","username":"lesserfish","description":"JOJOOOO! THIS IS MY LAST HAMON.\nPLEASE TAKE IT!!!!1","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raytracing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3zn","filepath":"/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","previewfilepath":"/media/ap/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415\n#define ASPECT_RATIO iResolution.y / iResolution.x\n#define FOV PI / 4.0\n#define UP vec3(0.0, 1.0, 0.0)\n#define MAX_IT 5\n#define INFINITE 9999999999999999.0\n\n//x is in front of you, y is up, z is right.\n\nstruct Hit\n{\n    bool hit;\n    vec3 pos;\n    float t;\n    vec3 normal;\n    vec3 ray;\n    vec3 rgb;\n    int mode;\n};\nstruct Camera\n{\n    vec3 Position;\n    vec3 Direction;\n};\n\nHit PlaneHit(vec3 origin, vec3 ray, float height, int mode)\n{\n    if(ray.y == 0.0){\n        if(height == origin.y)\n            return Hit(true, origin, 0.0, UP, ray, vec3(0.0, 1.0, 0.0), mode);\n        return Hit(false, vec3(0.0), 0.0, vec3(0.0), vec3(0.0), vec3(0.0), mode);\n    }\n    \n    float t = (height - origin.y) / ray.y;\n    if(t < 0.0)\n        return Hit(false, vec3(0.0), 0.0, vec3(0.0), vec3(0.0), vec3(0.0), mode);\n        \n    float dev = texture(iChannel1, mod(t*ray.xz, 1.0)).x * 0.2;\n    vec3 ndev = vec3(texture(iChannel1, mod(t*ray.xz, 1.0)).y, 1.0, texture(iChannel1, mod(t*ray.xz, 1.0)).z);\n    return Hit(true, origin + (t)*ray + dev*UP, t, UP + 0.9*ndev, ray, vec3(1.0), mode);\n}\nHit SphereHit(vec3 origin, vec3 ray, vec3 sphpos, float radius, int mode, vec3 color)\n{\n    float a = dot(ray, ray);\n    float b = dot(ray, origin - sphpos);\n    float c = dot(origin - sphpos, origin - sphpos) - radius * radius;\n    float d = b*b - a*c;\n    if(d < 0.0)\n    {\n        return Hit(false, vec3(0.0), 0.0, vec3(0.0), vec3(0.0), vec3(0.0), mode);\n    }\n    \n    float fr = (-b - sqrt(d))/a;\n    float sr = (-b + sqrt(d))/a;\n\n    if(fr < 0.0)\n        return Hit(false, vec3(0.0), 0.0, vec3(0.0), vec3(0.0), vec3(0.0), mode);\n    \n    vec3 n = vec3(origin + fr*ray - sphpos);\n    n /= length(n);\n    \n\n    float dev = texture(iChannel0, vec2(mod(fr * 0.8*sin(iTime*0.05), 1.0))).x;\n    dev *= 1.1 * float(1 - mode);\n    \n    return Hit(true, origin + (fr + dev) * ray, fr, n, ray, color, mode);\n   \n}\nHit GetHit(vec3 origin, vec3 ray)\n{\n    Hit h1 = SphereHit(origin, ray, vec3(8.0 + sin(iTime), cos(iTime), cos(iTime)), 0.9, 0, vec3(1.0, 1.0, 1.0));\n    Hit h2 = PlaneHit(origin, ray, -2.0, 0);  \n    Hit h3 = SphereHit(origin, ray, vec3(8.0, -1.48, 0.5), 0.5, 0, vec3(1.0, 0.0, 0.0));\n    Hit h4 = SphereHit(origin, ray, vec3(6.1, -1.70, -1.5), 0.4, 0, vec3(0.0, 0.7, 0.3));\n    Hit h5 = SphereHit(origin, ray, vec3(7.8, -1.78, 1.5), 0.2, 0, vec3(1.0, 0.0, 1.0));\n    Hit h6 = SphereHit(origin, ray, vec3(5.5, -0.48, 2.8), 1.5, 0, vec3(1.0, 0.0, 1.0));\n    Hit h7 = SphereHit(origin, ray, vec3(12.9, -1.48, -2.5), 0.5, 0, vec3(0.0, 0.1, 0.5));\n    Hit h8 = SphereHit(origin, ray, vec3(9.8, -1.5, -1.3), 0.2, 0, vec3(0.0, 0.0, 0.0));\n    Hit h9 = SphereHit(origin, ray, vec3(3.8, -1.78, 2.9), 0.2, 0, vec3(1.0, 0.0, 1.0));\n    Hit h10 =SphereHit(origin, ray, vec3(6.8, -1.78,-1.5), 0.2, 0, vec3(1.0, 0.0, 1.0));\n\n    \n    \n    Hit HitList[] = Hit[](h1, h2, h3, h4, h5, h6, h7, h8, h9, h10);\n    \n    Hit h = Hit(false, vec3(0.0), INFINITE, vec3(0.0), vec3(0.0), vec3(0.0), 0);\n    for(int i = 0; i < HitList.length(); i++)\n    {\n        if(HitList[i].hit && HitList[i].t < h.t)\n            h = HitList[i];\n    }\n    return h;\n    \n}\nvec4 GetColor(Hit h)\n{\n    vec3 lightdir = vec3(0.0, -0.7, 0.5 + 0.5*cos(iTime));\n    float inten = 1.0;\n    float base = 0.5;\n    float t = 0.7;\n    lightdir /= length(lightdir);\n    if(h.hit)\n    {\n         vec4 c = (t * base + (1.0 - t)*dot(-lightdir, h.normal) * inten) * vec4(h.rgb,0.0);\n         vec3 dir = - lightdir;\n         vec3 pos = h.pos + dir * 0.005;\n         Hit new_hit = GetHit(pos, dir);\n           if(new_hit.hit)\n               return vec4(0.0);\n        return c;\n    }\n    else{\n        float skyi = 1.0;\n        return (1.0 - skyi)*vec4(1.0) + skyi*vec4(0.1, 0.7, 1.0, 0.0);\n    }\n}\nvec3 GetRayFromUV(vec3 direction, vec2 uv)\n{\n    direction /= length(direction);\n    vec3 r = direction - uv.x * tan(FOV) * cross(direction, UP) + ASPECT_RATIO * uv.y * UP;\n    r /= length(r);\n    return r;   \n}\n\nvec4 pixel(Camera cam, vec2 uv)\n{\n    vec3 r = GetRayFromUV(cam.Direction, uv);\n    Hit h;\n    vec4 color = vec4(0.0);\n    \n    vec3 origin = cam.Position;\n    vec3 dir = r;\n    \n    float intensity = 0.5;\n    \n    for(int i = 0; i < MAX_IT; i++)\n    {\n        Hit h = GetHit(origin, dir);\n        if(!h.hit || h.mode == 1)\n        {\n            color = color + intensity * GetColor(h);\n            break;\n        }\n        if(h.mode == 0){\n            dir = reflect(dir, h.normal);\n            dir /= length(dir);\n            origin = h.pos + dir*0.1;\n        }\n        if(h.mode == 2)\n        {\n            dir = reflect(dir, h.normal);\n            dir /= length(dir);\n            origin = h.pos + dir*0.1;\n            \n            Hit new_hit = GetHit(origin, dir);\n            color = color + intensity*intensity*intensity * GetColor(new_hit);\n            \n            dir = h.ray;\n            origin = h.pos + h.ray * 1.1;\n        }\n        color = color + intensity * GetColor(h);\n        intensity = intensity * 0.5;\n    }\n    return color;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = 2.0*fragCoord/iResolution.xy - 1.0;\n    Camera cam = Camera(vec3(3.0, -1.0, 0.0), vec3(1.0, 0.0, 0.0));\n    vec3 r = GetRayFromUV(cam.Direction, uv);\n        \n\n    fragColor = pixel(cam, uv);\n}","name":"Image","description":"","type":"image"}]}