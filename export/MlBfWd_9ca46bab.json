{"ver":"0.1","info":{"id":"MlBfWd","date":"1517561878","viewed":106,"name":"Eye Wonker","username":"mooped","description":"Hex Warp with spirals.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["distancefields"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159\n\nfloat circle(vec2 pos, float rad)\n{\n    return length(pos) - rad;\n}\n\nfloat box(vec2 pos, vec2 b)\n{\n  vec2 d = abs(pos) - b;\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n// This is rough and ready but it works for now\n// https://www.topcoder.com/community/data-science/data-science-tutorials/geometry-concepts-line-intersection-and-its-applications/#!\nvec2 line_line(vec2 s1, vec2 e1, vec2 s2, vec2 e2)\n{\n    float a1 = e1.y - s1.y;\n    float b1 = s1.x - e1.x;\n    float c1 = a1 * s1.x + b1 * s1.y;\n    \n    float a2 = e2.y - s2.y;\n    float b2 = s2.x - e2.x;\n    float c2 = a2 * s2.x + b2 * s2.y;\n    \n\tfloat det = a1*b2 - a2*b1;\n    if(det == 0.0)\n    {\n        // LINES ARE PARALLEL - SHOULD NEVER HAPPEN\n        return s1;\n    }\n    else\n    {\n        return vec2((b2*c1 - b1*c2) / det, (a1*c2 - a2*c1) / det);\n    }\n}\n\nvec2 getMouse()\n{\n    return iMouse.xy/iResolution.y;\n}\n\nfloat dist(vec2 uv)\n{\n    // Experiment with various distance fields\n    //return texture(iChannel0, uv).r;\n    //return min(circle(uv - getMouse(), 0.1), circle(uv - vec2(.5, .5), 0.1));\n    //return min(box(uv - getMouse(), vec2(0.2, 0.1)), circle(uv - getMouse() + vec2(0.2, 0.0), 0.1));\n    return circle(uv - getMouse(), 0.0);\n    //return min(\n    //    min(circle(uv - vec2(0.5, 0.5), 0.1),\n    //       box(uv - vec2(0.75, 0.5), vec2(0.2, 0.1))\n    //    ),\n    //    circle(uv - getMouse(), 0.1)\n    //);\n}\n\nconst float sides = 6.0;\nconst float seg = 2.0 * PI / sides;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord / iResolution.y);\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    // Distance field lookup\n    float d = dist(uv);\n    vec2 n = normalize(vec2(dFdx(d), dFdy(d)));\n    \n    // Calculate angle towards distance field surface (0-2PI)\n    float ang = atan(n.y, n.x) + PI;\n    \n    // Work out the angle at which the segment starts and the angle from segment start to uv\n    float seg_ang = floor(ang / seg) * seg;\n    float rel_ang = abs(ang - seg_ang);\n    \n    // Compute vectors for each edge of the segment\n    vec2 s0 = vec2(cos(seg_ang), sin(seg_ang));\n    vec2 s1 = vec2(cos(seg_ang + seg), sin(seg_ang + seg));\n    \n    // Intersect the distance field normal with the edge of a unit hexagon (s1 - s0) to get a distance adjustment factor\n    float adjust = length(line_line(n, n + (s1 - s0), vec2(0), s1));\n    \n    // Adjust towards the hexagon edge - draws hexagons around the distance field for a circle\n    float val = d * pow(adjust, 0.5 + 0.5 * sin(iTime));\n    \n    val = sin((val + iTime * 0.1 + sin(ang + iTime)) * 50.0) > 0.0 ? 1.0 : 0.0;\n    \n    // Uncomment to silhouette the shapes\n    if (d < 0.0) val = 0.0;\n\n    // Output to screen\n    fragColor = vec4(val * col,1.0);\n}","name":"Image","description":"","type":"image"}]}