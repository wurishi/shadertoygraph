{"ver":"0.1","info":{"id":"7ssSDM","date":"1618720046","viewed":71,"name":"diffraction gratings","username":"codeonwort","description":"Just doing tutorial","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["shader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Graphics Gems 2ed\n// Light Interference - Diffraction Gratings\n\n#define ANIMATE_LIGHT 1\n\n#if ANIMATE_LIGHT == 0\nconst vec3 light = vec3(100.0, 10.0, 500.0);\n#endif\nconst vec3 eye = vec3(20.0, 5.0, 10.0);\n// The distance between adjacent tracks\n// 1600 nm for a CD, 740 nm for a DVD\nconst float uD = 1600.0;\n\nconst float LAMBDAMIN = 400.0; // blue\nconst float LAMBDAMAX = 600.0; // red\nconst vec4 GRAY = vec4(0.2, 0.2, 0.2, 1.0);\n\nvec3 rainbow(float t)\n{\n    t = clamp(t, 0.0, 1.0);\n    vec3 rgb = vec3(0.0, 4.0 * (t - (0.0 / 4.0)), 1.0);\n    if (t > (1.0 / 4.0))\n    {\n        rgb = vec3(0.0, 1.0, 1.0 - 4.0 * (t - (1.0 / 4.0)));\n    }\n    if (t >= (2.0 / 4.0))\n    {\n        rgb = vec3(4.0 * (t - (2.0 / 4.0)), 1.0, 0.0);\n    }\n    if (t >= (3.0 / 4.0))\n    {\n        rgb = vec3(1.0, 1.0 - 4.0 * (t - (3.0/4.0)), 0.0);\n    }\n    return rgb;\n}\n\nint assignRGB(in float lambda, out vec3 color)\n{\n    if (lambda < LAMBDAMIN || lambda > LAMBDAMAX)\n    {\n        return 0;\n    }\n    float t = (lambda - LAMBDAMIN) / (LAMBDAMAX - LAMBDAMIN);\n    color = rainbow(t);\n    return 1;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n#if ANIMATE_LIGHT == 1\n    vec3 light = vec3(300.0 * sin(iTime * 0.7), 300.0, 150.0);\n#endif\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Assume the disk is on the xy plane\n    vec3 pos = vec3(2.0 * uv - 1.0, 0.0);\n    vec3 vTangent = normalize(vec3(-pos.y, pos.x, 0.0));\n    //vec3 vTangent = normalize(-pos);\n    \n    if (length(pos) > 1.0)\n    {\n        fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n        return;\n    }\n    \n    vec3 toLight = normalize(light - pos);\n    vec3 toEye = normalize(eye - pos);\n    float sum = dot(toLight, vTangent) + dot(toEye, vTangent);\n    float delta = uD * abs(sum);\n    \n    int mmin = int(floor(delta / LAMBDAMAX));\n    int mmax = int(floor(delta / LAMBDAMIN));\n    \n    fragColor = GRAY;\n    if (mmin > 0)\n    {\n        vec3 color = vec3(0.0, 0.0, 0.0);\n        int count = 0;\n        for (int m=mmin; m<=mmax; ++m)\n        {\n            float lambda = delta / float(m);\n            vec3 col;\n            int status = assignRGB(lambda, col);\n            if (status > 0)\n            {\n                color += col;\n                count += 1;\n            }\n        }\n        if (count > 0)\n        {\n            fragColor = vec4(color / float(count), 1.0);\n        }\n    }\n}","name":"Image","description":"","type":"image"}]}