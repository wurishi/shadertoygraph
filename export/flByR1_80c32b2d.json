{"ver":"0.1","info":{"id":"flByR1","date":"1649297731","viewed":150,"name":"Game of Life (with mutations)","username":"ezerek","description":"Game of life implementation, with brush, random mutations, and trails.","likes":9,"published":1,"flags":32,"usePreview":0,"tags":["gameoflife"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float gridFactor(vec2 fragCoord) {\n    vec2 gv = fract(fragCoord/ZOOM) - 0.5;\n    float f = 0.5 - max(abs(gv.x), abs(gv.y));\n    return GRID_SHARPNESS * smoothstep(0.0, 1.0, f - GRID_BORDER);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 result = texture(iChannel0, uv / ZOOM);\n    vec3 col = result.r > 0.5 ? LIFE_COLOR : DEAD_COLOR * result.a;\n    col *= gridFactor(fragCoord);\n\n    fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float hash13(vec3 p3)\n{\n\tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.zyx + 31.32);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nint mutationUpdate(ivec2 coord) {\n    float r = hash13(vec3(float(coord.x) * 13.7, float(coord.y) * 105.1, float(iFrame) * 9.81));\n    return r < MUTATION_FREQUENCY ? 1 : 0;\n}\n\nint lifeFactor(ivec2 coord) {\n    int live_count = 0;\n    for (int x=-1; x <= 1; x++) {\n        for (int y=-1; y <= 1; y++) {\n            if (x == 0 && y == 0) continue;\n            live_count += int(texelFetch(iChannel1, coord + ivec2(x, y), 0).r);\n        }\n    }\n    return live_count + mutationUpdate(coord);\n}\n\nfloat lifeUpdate(int current, int factor) {\n    if (factor == 3) return 1.;\n    if (current == 1 && factor == 2) return 1.;\n    return 0.;\n}\n\nbool isBrushActive(vec2 fragCoord) {\n    float d = distance(fragCoord.xy, iMouse.xy / ZOOM);\n    return iMouse.z > 0.5 && d < BRUSH_SIZE;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord/iResolution.xy;\n    ivec2 coord = ivec2(fragCoord);\n    vec4 texel = texelFetch(iChannel1,  coord, 0);\n    vec3 col = vec3(1,0,1);\n    float alpha = texel.a;\n    \n    if (iFrame < 10) {\n        float value = texture(iChannel0, uv).r > 0.5 ? 1. : 0.;\n        col = vec3(value);\n    }\n    else if (iFrame % UPDATE_INTERVAL == 0) {\n        int current = int(texel.r);\n        int factor = lifeFactor(coord);\n        float value = lifeUpdate(current, factor);\n        col = vec3(value);\n        \n        if (value > 0.5) alpha = 1.0;\n        else alpha = max(0., alpha - ALPHA_DECAY);\n    }\n    else {\n        float value = texture(iChannel1, uv).r;\n        col = vec3(value);\n    }\n    \n    if (isBrushActive(fragCoord)) {\n        col = vec3(1);\n        alpha = 1.0;\n    }\n    \n        \n    fragColor = vec4(col, alpha);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define ZOOM 10.\n#define UPDATE_INTERVAL 8\n#define BRUSH_SIZE 2.\n#define MUTATION_FREQUENCY 0.001\n#define GRID_BORDER 0.05\n#define GRID_SHARPNESS 5.\n#define ALPHA_DECAY 0.25\n#define LIFE_COLOR vec3(0., 1., 0.5)\n#define DEAD_COLOR vec3(1., 1., 1.)","name":"Common","description":"","type":"common"}]}