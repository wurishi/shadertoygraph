{"ver":"0.1","info":{"id":"llcBRr","date":"1538416160","viewed":104,"name":"linefuncs","username":"t3knomanser","description":"Simple line generating functions for use in another project","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["lines","library"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float line(vec2 uv, float m, float b, float thickness, float fuzz) {\n    float y = m * uv.x + b;\n    float d = thickness - distance(uv, vec2(uv.x, y));\n    d =  smoothstep(0., thickness, d);\n    if (uv.y >= y - thickness && uv.y <= y + thickness) {\n        return mix(1., d, fuzz);\n    }\n    return 0.;\n}\n\nfloat line(vec2 uv, float m, float b) {\n    return line(uv, m, b, iResolution.y / 100000., 0.);\n}\n\nfloat line(vec2 uv, float m, float b, float thickness) {\n    return line(uv, m, b, thickness, 0.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    float v = 0.;\n    float slopMod = 20.0 * smoothstep(-1., 1., sin(iTime * 0.25));\n    for (float i = 0.; i < 250.; i++) {\n    \tv += line(uv, i / slopMod, 0., 2./iResolution.y, 1.);\n        v += line(uv, -i / slopMod, 1., 2./iResolution.y, 1.);\n    }\n    vec3 col = vec3(v);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}