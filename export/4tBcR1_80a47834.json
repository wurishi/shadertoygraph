{"ver":"0.1","info":{"id":"4tBcR1","date":"1507313839","viewed":313,"name":"Sharpening Reveal","username":"NikB","description":"Move the mouse to unblur the background image. Select other kernels from the array to create different reveal effects.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["blur","edgedetection","sharpen","kernels","usercontrolled","eyespy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Array to store kernel matrices\nmat3 kernels[5] = mat3[]\n(\n    //Blur [0]\n\tmat3(0.125, 0.1, 0.125, 0.1, 0, 0.1, 0.125, 0.1, 0.125), \n    //Sharpen [1]\n\tmat3(0, -1, 0, -1, 5, -1, 0, -1, 0), \n    //Edge detection [2]\n\tmat3(-1, -1, -1, -1, 8, -1, -1, -1, -1), \n    //Emboss [3]\n\tmat3(-2, -1, 0, -1, 1, 1, 0, 1, 2),\n    //Sobel [4]\n\tmat3(3, 0, -3, 10, 0, -10, 3, 0, -3) \n); \n\n//Radius of the reveal circle\nfloat Rad = 0.1;\n\n//Get the sample texture at the current x, y position\nvec3 getSample(const int x, const int y, in vec2 fragCoord, in sampler2D sampler)\n{\n    vec2 uv = fragCoord.xy / iResolution.xy * iChannelResolution[0].xy;\n    uv = (uv + vec2(x, y)) / iChannelResolution[0].xy ;\n    return texture(sampler, uv).xyz;\n}\n\n//Apply a selected kernel to the pixels around fragCoord\nvec3 applyKernel(in vec2 fragCoord, mat3 kernel, in sampler2D sampler)\n{\n    vec3 sum;   \n    for (int x = -1; x < 2; x++)\n    {\n        for (int y = -1; y < 2; y++)\n        {\n            sum += getSample(x, y, fragCoord, sampler) * kernel[x + 1][y + 1];\n        }\n    }\n    return sum;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //Calculate uvs and aspect ratio\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 pf = fragCoord.xy;\n    float aspectRatio = iResolution.y / iResolution.x;\n    uv.x /= aspectRatio;\n    \n    //Get and adjust the mouse position on the screen\n    vec2 mouse = iMouse.xy / iChannelResolution[0].xy;\n    mouse /= aspectRatio;\n\n    //Apply kernels to both image layers\n    vec4 Layer0 = vec4(applyKernel(pf, kernels[0], iChannel0), 1.0);\n    float alpha = 1.0 - step(Rad, length(mouse - uv));\n    vec4 Layer1 = vec4(applyKernel(pf, kernels[1], iChannel1), alpha); \n              \n    //Mix the two layers together\n    fragColor = mix(Layer0, Layer1, Layer1.a);\n}","name":"Image","description":"","type":"image"}]}