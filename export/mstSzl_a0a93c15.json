{"ver":"0.1","info":{"id":"mstSzl","date":"1680282954","viewed":52,"name":"Colored Kaleidoscope 3D","username":"Desarius","description":"Another study for a Kaleidoscope 3D effect","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["kailedoscope"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Define center of kaleidoscope\n    vec3 center = vec3(0.5, 0.5, 0.5);\n\n    // Define number of sides of kaleidoscope (adjustable parameter)\n    float sides = 3.0;\n\n    // Define complexity of pattern (adjustable parameter)\n    float complexity = 3000.0;\n\n    // Calculate spherical coordinates\n    vec2 polar = vec2(length(fragCoord - 0.5), atan((fragCoord.y - 0.5) / (fragCoord.x - 0.5)));\n    polar.y += step(fragCoord.x, 0.5) * 3.14159;\n\n    float phi = polar.y;\n    float theta = polar.x * 3.14159;\n\n    // Convert spherical coordinates to cartesian coordinates\n    vec3 pos = vec3(\n        sin(phi) * sin(theta),\n        cos(theta),\n        cos(phi) * sin(theta)\n    );\n\n    // Calculate kaleidoscope rotation\n    float angle = 6.28318 / sides;\n    vec3 v = vec3(1.0, 0.0, 0.0);\n    vec3 r = vec3(0.0, 0.0, 0.0);\n    for (int i = 0; i < int(sides); i++) {\n        r += v * dot(pos, v);\n        v = vec3(\n            cos(angle) * v.x + sin(angle) * v.z,\n            v.y,\n            -sin(angle) * v.x + cos(angle) * v.z\n        );\n    }\n\n    // Calculate rotation of pattern\n    vec2 pattern = vec2(sin(phi * complexity), cos(phi * complexity));\n    pattern = vec2(pattern.x * cos(theta) - pattern.y * sin(theta), pattern.y * cos(theta) + pattern.x * sin(theta));\n\n    // Output color based on pattern\n    fragColor = vec4(vec3(pattern.x + pattern.y) * r, 1.0);\n}","name":"Image","description":"","type":"image"}]}