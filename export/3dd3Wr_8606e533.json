{"ver":"0.1","info":{"id":"3dd3Wr","date":"1568221378","viewed":5391,"name":"glslSmartDeNoise","username":"BrutPitt","description":"Fast glsl spatial deNoise filter with circular gaussian kernel\n\nDrag mouse over...\n\nFlexible -> full configurable:\n - Standard Deviation sigma radius\n - K sigma coefficient\n - Edge sharpening threshold\n\nGitHub:\nhttps://github.com/BrutPitt/glslSmartDeNoise","likes":69,"published":1,"flags":0,"usePreview":1,"tags":["filter","denoise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//  Copyright (c) 2018-2019 Michele Morrone\n//  All rights reserved.\n//\n//  https://michelemorrone.eu - https://BrutPitt.com\n//\n//  me@michelemorrone.eu - brutpitt@gmail.com\n//  twitter: @BrutPitt - github: BrutPitt\n//  \n//  https://github.com/BrutPitt/glslSmartDeNoise/\n//\n//  This software is distributed under the terms of the BSD 2-Clause license\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n#define INV_SQRT_OF_2PI 0.39894228040143267793994605993439  // 1.0/SQRT_OF_2PI\n#define INV_PI 0.31830988618379067153776752674503\n\n//  smartDeNoise - parameters\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//\n//  sampler2D tex     - sampler image / texture\n//  vec2 uv           - actual fragment coord\n//  float sigma  >  0 - sigma Standard Deviation\n//  float kSigma >= 0 - sigma coefficient \n//      kSigma * sigma  -->  radius of the circular kernel\n//  float threshold   - edge sharpening threshold \n\nvec4 smartDeNoise(sampler2D tex, vec2 uv, float sigma, float kSigma, float threshold)\n{\n    float radius = round(kSigma*sigma);\n    float radQ = radius * radius;\n    \n    float invSigmaQx2 = .5 / (sigma * sigma);      // 1.0 / (sigma^2 * 2.0)\n    float invSigmaQx2PI = INV_PI * invSigmaQx2;    // 1.0 / (sqrt(PI) * sigma)\n    \n    float invThresholdSqx2 = .5 / (threshold * threshold);     // 1.0 / (sigma^2 * 2.0)\n    float invThresholdSqrt2PI = INV_SQRT_OF_2PI / threshold;   // 1.0 / (sqrt(2*PI) * sigma)\n    \n    vec4 centrPx = texture(tex,uv);\n    \n    float zBuff = 0.0;\n    vec4 aBuff = vec4(0.0);\n    vec2 size = vec2(textureSize(tex, 0));\n    \n    for(float x=-radius; x <= radius; x++) {\n        float pt = sqrt(radQ-x*x);  // pt = yRadius: have circular trend\n        for(float y=-pt; y <= pt; y++) {\n            vec2 d = vec2(x,y);\n\n            float blurFactor = exp( -dot(d , d) * invSigmaQx2 ) * invSigmaQx2PI; \n            \n            vec4 walkPx =  texture(tex,uv+d/size);\n\n            vec4 dC = walkPx-centrPx;\n            float deltaFactor = exp( -dot(dC, dC) * invThresholdSqx2) * invThresholdSqrt2PI * blurFactor;\n                                 \n            zBuff += deltaFactor;\n            aBuff += deltaFactor*walkPx;\n        }\n    }\n    return aBuff/zBuff;\n}\n\n//  About Standard Deviations (watch Gauss curve)\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//\n//  kSigma = 1*sigma cover 68% of data\n//  kSigma = 2*sigma cover 95% of data - but there are over 3 times \n//                   more points to compute\n//  kSigma = 3*sigma cover 99.7% of data - but needs more than double \n//                   the calculations of 2*sigma\n\n\n//  Optimizations (description)\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//\n//  fX = exp( -(x*x) * invSigmaSqx2 ) * invSigmaxSqrt2PI; \n//  fY = exp( -(y*y) * invSigmaSqx2 ) * invSigmaxSqrt2PI; \n//  where...\n//      invSigmaSqx2     = 1.0 / (sigma^2 * 2.0)\n//      invSigmaxSqrt2PI = 1.0 / (sqrt(2 * PI) * sigma)\n//\n//  now, fX*fY can be written in unique expression...\n//\n//      e^(a*X) * e^(a*Y) * c*c\n//\n//      where:\n//        a = invSigmaSqx2, X = (x*x), Y = (y*y), c = invSigmaxSqrt2PI\n//\n//           -[(x*x) * 1/(2 * sigma^2)]             -[(y*y) * 1/(2 * sigma^2)] \n//          e                                      e\n//  fX = -------------------------------    fY = -------------------------------\n//                ________                               ________\n//              \\/ 2 * PI  * sigma                     \\/ 2 * PI  * sigma\n//\n//      now with... \n//        a = 1/(2 * sigma^2), \n//        X = (x*x) \n//        Y = (y*y) ________\n//        c = 1 / \\/ 2 * PI  * sigma\n//\n//      we have...\n//              -[aX]              -[aY]\n//        fX = e      * c;   fY = e      * c;\n//\n//      and...\n//                 -[aX + aY]    [2]     -[a(X + Y)]    [2]\n//        fX*fY = e           * c     = e            * c   \n//\n//      well...\n//\n//                    -[(x*x + y*y) * 1/(2 * sigma^2)]\n//                   e                                \n//        fX*fY = --------------------------------------\n//                                        [2]           \n//                          2 * PI * sigma           \n//      \n//      now with assigned constants...\n//\n//          invSigmaQx2   = 1/(2 * sigma^2)\n//          invSigmaQx2PI = 1/(2 * PI * sigma^2) = invSigmaQx2 * INV_PI \n//\n//      and the kernel vector \n//\n//          k = vec2(x,y)\n//\n//      we can write:\n//\n//          fXY = exp( -dot(k,k) * invSigmaQx2) * invSigmaQx2PI\n//\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    float szSlide = .001;        \n    vec2 mouse =iMouse.xy/ iResolution.xy;\n    if(mouse.x <= 0.0 &&  mouse.y <= 0.0) mouse.x = .5; // to show initial screen half splitted\n    \n\tfragColor = uv.x<mouse.x-szSlide  ? texture(iChannel0,uv)\n          : (uv.x>mouse.x+szSlide ? smartDeNoise(iChannel0, uv, 5.0, 2.0, .100) \n          :  vec4(1.0));\n    \n}\n","name":"Image","description":"","type":"image"}]}