{"ver":"0.1","info":{"id":"4tfBRH","date":"1510877432","viewed":103,"name":"Function Raymarching","username":"danno_s","description":"Visualization for multiplications of different functions using raymarching\n\nInstructions of use in source code.","likes":0,"published":1,"flags":48,"usePreview":0,"tags":["raymarching","visualization","function","cc7615"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.1415;\n\nvec3 ldir = vec3(0.0, 1.0, 0.0);\nvec3 lcol = vec3(1.0, 1.0, 1.0);\nvec3 alight = vec3(0.3, 0.3, 0.3);\n\n\n/** \n *\tBits:\n *\t0: sin(x)\n * \t1: sin(z)\n *  2: cos(x)\n *\t3: cos(z)\n *\t4: sqrt(x)\n *\t5: sqrt(z)\n *\t6: exp(x)\n *\t7: exp(z)\n *\t8: log(x)\n *\t9: log(z)\n */\n\nvec4 readMemory(int x, int y) {\n    vec2 coords = vec2(x, y);\n \treturn texture(iChannel0, (coords + 0.5)/iChannelResolution[0].xy);   \n}\n\nfloat eval(vec3 pos) {\n    bool empty = true;\n    \n    float result = 1.0;\n    \n    vec4 sinx = readMemory(0, 0);\n    vec4 cosx = readMemory(0, 1);\n    vec4 expx = readMemory(0, 2);\n    vec4 logx = readMemory(0, 3);\n    \n    vec4 sinz = readMemory(1, 0);\n    vec4 cosz = readMemory(1, 1);\n    vec4 expz = readMemory(1, 2);\n    vec4 logz = readMemory(1, 3);\n    \n    \n    // x axis\n    for(float t = sinx.x; t >= 1.0; t--) {\n    \tresult *= sin(pos.x);\n    }\n    \n    for(float t = cosx.x; t >= 1.0; t--) {\n        result *= cos(pos.x);\n    }\n    \n    for(float t = expx.x; t >= 1.0; t--) {\n        result *= exp(pos.x);\n    }\n    \n    for(float t = logx.x; t >= 1.0; t--) {\n        result *= log(pos.x);\n    }\n    \n    // z axis\n    for(float t = sinz.x; t >= 1.0; t--) {\n    \tresult *= sin(pos.z);\n    }\n    \n    for(float t = cosz.x; t >= 1.0; t--) {\n        result *= cos(pos.z);\n    }\n    \n    for(float t = expz.x; t >= 1.0; t--) {\n        result *= exp(pos.z);\n    }\n    \n    for(float t = logz.x; t >= 1.0; t--) {\n        result *= log(pos.z);\n    }\n    \n    return pos.y - result;\n}\n\nvec2 march(vec3 pos, vec3 dir) {\n    float tmin = 1.0;\n    float tmax = 50.0;\n    float delta = 0.1;\n    \n    float pres = 0.05;\n    float res = tmin;\n    float m = -1.0;\n    for(float t = tmin; t < tmax; t+= delta) {\n        float r = eval(pos + dir * t);\n        if(r < pres) {\n        \tres = t - 0.5 * delta;\n            m = 1.0;\n            break;\n        }\n    }\n    \n    return vec2(res, m);\n}\n\nvec3 cnorm(vec3 pos) {\n    vec2 eps = vec2(0.001, 0.0);\n    vec3 nor = vec3(eval(pos + eps.xyy) - eval(pos - eps.xyy),\n                    eval(pos + eps.yxy) - eval(pos - eps.yxy),\n                    eval(pos + eps.yyx) - eval(pos - eps.yyx));\n    return normalize(nor);\n}\n\nvec3 render(vec3 pos, vec3 dir) {\n    vec3 color = vec3(0.8, 0.8, 0.8);\n    vec2 res = march(pos, dir);\n    float t = res.x;\n    float m = res.y;\n    \n    if(m > -0.5) {\n        vec3 fpos = pos + dir * t;\n        vec3 nor = cnorm(fpos);\n        \n        // diffuse\n        float dif = clamp(dot(nor, ldir), 0.0, 1.0);\n        vec3 ccolor = vec3(.8, 0.4, 0.4);\n        color = lcol * ccolor * dif;\n        \n        // ambient\n        color += alight * ccolor;\n    }\n\treturn vec3(clamp(color, 0.0, 1.0));\n}\n\nmat3 initCamera(vec3 pos, vec3 target, vec3 up) {\n    vec3 w = normalize(target - pos);\n    vec3 u = normalize(cross(w, up));\n    vec3 v = normalize(cross(u, w));\n    return mat3(u,v,w);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 q = fragCoord.xy/iResolution.xy;\n    vec2 p = -1.0+2.0*q;\n\tp.x *= iResolution.x/iResolution.y;\n    vec2 mouse = iMouse.xy/iResolution.xy;\n    \n    // camara\n    vec3 pos = vec3(.0, 10.0, .0);\n    vec3 target = vec3(10.0 * cos(2.0 * mouse.x * PI), -10.0 * cos(mouse.y * PI) + 10.0, 10.0  * sin(2.0 * mouse.x * PI));\n    vec3 up = vec3(0.0, 1.0, 0.0);\n    \n    // camara al mundo\n    mat3 cam = initCamera(pos, target, up);\n    \n    // rayo\n    vec3 dir = normalize(cam * (normalize(vec3(p.xy, 2.0))));\n    \n    // el resto del buho\n\tfragColor = vec4(render(pos, dir), 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const int Key_1 = 49; // n^1\nconst int Key_2 = 50; // n^2\nconst int Key_3 = 51; // n^3\n\nconst int Key_Q = 81; // sin(x)\nconst int Key_W = 87; // cos(x)\nconst int Key_E = 69; // exp(x)\nconst int Key_R = 82; // log(x)\nconst int Key_A = 65; // sin(-x)\nconst int Key_S = 83; // cos(-x)\nconst int Key_D = 68; // exp(-x)\nconst int Key_F = 70; // log(-x)\nconst int Key_Z = 90; // sin(z)\nconst int Key_X = 88; // cos(z)\nconst int Key_C = 67; // exp(z)\nconst int Key_V = 86; // log(z)\nconst int Key_Y = 89; // sin(-z)\nconst int Key_U = 85; // cos(-z)\nconst int Key_I = 73; // exp(-z)\nconst int Key_O = 79; // log(-z)\n\nvec4 readMemory(int x, int y) {\n    vec2 coords = vec2(x, y);\n \treturn texture(iChannel0, (coords + 0.5)/iChannelResolution[0].xy);   \n}\n\nbool readKey( int key )\n{\n\tfloat keyVal = texture( iChannel1, vec2( (float(key)+.5)/256.0, .25 ) ).x;\n\treturn keyVal>.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if(fragCoord.x >= 2.0 || fragCoord.y >= 4.0)\n    {\n        discard;\n    }\n    \n    float x;\n    if(fragCoord.x < 1.0 && fragCoord.y < 1.0)\n    { // sine x\n        vec4 data = readMemory(0, 0);\n    \tx = data.x;\n        if(readKey(Key_Q)) {\n            if(readKey(Key_1)) {\n                x = 1.0;\n            } else if(readKey(Key_2)) {\n                x = 2.0;\n            } else if(readKey(Key_3)) {\n                x = 3.0;\n            } else {\n                x = 0.0;\n            }\n        }\n        fragColor = vec4(x, 0.0, 0.0, 0.0);\n    }\n    else if(fragCoord.x < 2.0 && fragCoord.y < 1.0)\n    { // sine z\n        vec4 data = readMemory(1, 0);\n    \tx = data.x;\n        if(readKey(Key_A)) {\n            if(readKey(Key_1)) {\n                x = 1.0;\n            } else if(readKey(Key_2)) {\n                x = 2.0;\n            } else if(readKey(Key_3)) {\n                x = 3.0;\n            } else {\n                x = 0.0;\n            }\n        }\n        fragColor = vec4(x, 0.0, 0.0, 0.0);\n    }\n    else if(fragCoord.x < 1.0 && fragCoord.y < 2.0)\n    { // cosine x\n        vec4 data = readMemory(0, 1);\n    \tx = data.x;\n        if(readKey(Key_W)) {\n            if(readKey(Key_1)) {\n                x = 1.0;\n            } else if(readKey(Key_2)) {\n                x = 2.0;\n            } else if(readKey(Key_3)) {\n                x = 3.0;\n            } else {\n                x = 0.0;\n            }\n        }\n        fragColor = vec4(x, 0.0, 0.0, 0.0);\n    }\n    else if(fragCoord.x < 2.0 && fragCoord.y < 2.0)\n    { // cosine z\n        vec4 data = readMemory(1, 1);\n    \tx = data.x;\n        if(readKey(Key_S)) {\n            if(readKey(Key_1)) {\n                x = 1.0;\n            } else if(readKey(Key_2)) {\n                x = 2.0;\n            } else if(readKey(Key_3)) {\n                x = 3.0;\n            } else {\n                x = 0.0;\n            }\n        }\n        fragColor = vec4(x, 0.0, 0.0, 0.0);\n    }\n    else if(fragCoord.x < 1.0 && fragCoord.y < 3.0)\n    { // exp x\n        vec4 data = readMemory(0, 2);\n    \tx = data.x;\n        if(readKey(Key_E)) {\n            if(readKey(Key_1)) {\n                x = 1.0;\n            } else if(readKey(Key_2)) {\n                x = 2.0;\n            } else if(readKey(Key_3)) {\n                x = 3.0;\n            } else {\n                x = 0.0;\n            }\n        }\n        fragColor = vec4(x, 0.0, 0.0, 0.0);\n    }\n    else if(fragCoord.x < 2.0 && fragCoord.y < 3.0)\n    { // exp z\n        vec4 data = readMemory(1, 2);\n    \tx = data.x;\n        if(readKey(Key_D)) {\n            if(readKey(Key_1)) {\n                x = 1.0;\n            } else if(readKey(Key_2)) {\n                x = 2.0;\n            } else if(readKey(Key_3)) {\n                x = 3.0;\n            } else {\n                x = 0.0;\n            }\n        }\n        fragColor = vec4(x, 0.0, 0.0, 0.0);\n    }\n    else if(fragCoord.x < 1.0 && fragCoord.y < 4.0)\n    { // log x\n        vec4 data = readMemory(0, 3);\n    \tx = data.x;\n        if(readKey(Key_R)) {\n            if(readKey(Key_1)) {\n                x = 1.0;\n            } else if(readKey(Key_2)) {\n                x = 2.0;\n            } else if(readKey(Key_3)) {\n                x = 3.0;\n            } else {\n                x = 0.0;\n            }\n        }\n        fragColor = vec4(x, 0.0, 0.0, 0.0);\n    }\n    else if(fragCoord.x < 2.0 && fragCoord.y < 4.0)\n    { // log z\n        vec4 data = readMemory(1, 3);\n    \tx = data.x;\n        if(readKey(Key_F)) {\n            if(readKey(Key_1)) {\n                x = 1.0;\n            } else if(readKey(Key_2)) {\n                x = 2.0;\n            } else if(readKey(Key_3)) {\n                x = 3.0;\n            } else {\n                x = 0.0;\n            }\n        }\n        fragColor = vec4(x, 0.0, 0.0, 0.0);\n    } \n    else\n    {\n        discard;\n    }\n}","name":"Buf A","description":"","type":"buffer"}]}