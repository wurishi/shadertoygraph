{"ver":"0.1","info":{"id":"ltKBzG","date":"1543090370","viewed":397,"name":"Bilinear Patch - intersection","username":"speps","description":"Analytical intersection of a bilinear patch. Useful for raytracing heightfields.","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["3d","raytracing","torus","intersection","analytical"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2018 Remi Gillig\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Analytical intersection of a bilinear patch.\n// from Ramsey, S.D., Potter, K. and Hansen, C., 2004. Ray bilinear patch intersections. Journal of Graphics Tools, 9(3), pp.41-47.\n\n// Useful for raytracing heightfields.\n// It is defined by (vec4 size, vec4 heights)\n// where size is min in XY and max in ZW\n// and where heights are 4 corners\n\n\n// Other intersectors: https://iquilezles.org/articles/intersectors\n//\n// Box:             https://www.shadertoy.com/view/ld23DV\n// Triangle:        https://www.shadertoy.com/view/MlGcDz\n// Capsule:         https://www.shadertoy.com/view/Xt3SzX\n// Ellipsoid:       https://www.shadertoy.com/view/MlsSzn\n// Sphere:          https://www.shadertoy.com/view/4d2XWV\n// Capped Cylinder: https://www.shadertoy.com/view/4lcSRn\n// Disk:            https://www.shadertoy.com/view/lsfGDB\n// Torus:           https://www.shadertoy.com/view/4sBGDy\n// Capped Cone:     https://www.shadertoy.com/view/llcfRf\n// Rounded Cone:    https://www.shadertoy.com/view/MlKfzm\n// Torus:           https://www.shadertoy.com/view/4sBGDy\n\nfloat iBilinearPatch(in vec3 ro, in vec3 rd, in vec4 ps, in vec4 ph)\n{\n    vec3 va = vec3(0.0, 0.0, ph.x + ph.w - ph.y - ph.z);\n    vec3 vb = vec3(0.0, ps.w - ps.y, ph.z - ph.x);\n    vec3 vc = vec3(ps.z - ps.x, 0.0, ph.y - ph.x);\n    vec3 vd = vec3(ps.xy, ph.x);\n\n    float tmp = 1.0 / (vb.y * vc.x);\n    float a = 0.0;\n    float b = 0.0;\n    float c = 0.0;\n    float d = va.z * tmp;\n    float e = 0.0;\n    float f = 0.0;\n    float g = (vc.z * vb.y - vd.y * va.z) * tmp;\n    float h = (vb.z * vc.x - va.z * vd.x) * tmp;\n    float i = -1.0;\n    float j = (vd.x * vd.y * va.z + vd.z * vb.y * vc.x) * tmp\n            - (vd.y * vb.z * vc.x + vd.x * vc.z * vb.y) * tmp;\n\n    float p = dot(vec3(a, b, c), rd.xzy * rd.xzy)\n            + dot(vec3(d, e, f), rd.xzy * rd.zyx);\n    float q = dot(vec3(2.0, 2.0, 2.0) * ro.xzy * rd.xyz, vec3(a, b, c))\n            + dot(ro.xzz * rd.zxy, vec3(d, d, e))\n            + dot(ro.yyx * rd.zxy, vec3(e, f, f))\n            + dot(vec3(g, h, i), rd.xzy);\n    float r = dot(vec3(a, b, c), ro.xzy * ro.xzy)\n            + dot(vec3(d, e, f), ro.xzy * ro.zyx)\n            + dot(vec3(g, h, i), ro.xzy) + j;\n    if (abs(p) < 0.000001) {\n      return -r / q;\n    } else {\n      float sq = q * q - 4.0 * p * r;\n      if (sq < 0.0) {\n        return 0.0;\n      } else {\n        float s = sqrt(sq);\n        float t0 = (-q + s) / (2.0 * p);\n        float t1 = (-q - s) / (2.0 * p);\n        return min(t0 < 0.0 ? t1 : t0, t1 < 0.0 ? t0 : t1);\n      }\n    }\n}\n\nvec3 nBilinearPatch(in vec4 ps, in vec4 ph, in vec3 pos)\n{\n    vec3 va = vec3(0.0, 0.0, ph.x + ph.w - ph.y - ph.z);\n    vec3 vb = vec3(0.0, ps.w - ps.y, ph.z - ph.x);\n    vec3 vc = vec3(ps.z - ps.x, 0.0, ph.y - ph.x);\n    vec3 vd = vec3(ps.xy, ph.x);\n\n    float tmp = 1.0 / (vb.y * vc.x);\n    float a = 0.0;\n    float b = 0.0;\n    float c = 0.0;\n    float d = va.z * tmp;\n    float e = 0.0;\n    float f = 0.0;\n    float g = (vc.z * vb.y - vd.y * va.z) * tmp;\n    float h = (vb.z * vc.x - va.z * vd.x) * tmp;\n    float i = -1.0;\n    float j = (vd.x * vd.y * va.z + vd.z * vb.y * vc.x) * tmp\n            - (vd.y * vb.z * vc.x + vd.x * vc.z * vb.y) * tmp;\n\n    vec3 grad = vec3(2.0) * pos.xzy * vec3(a, b, c)\n      + pos.zxz * vec3(d, d, e)\n      + pos.yyx * vec3(f, e, f)\n      + vec3(g, h, i);\n    return -normalize(grad);\n}\n\n#define AA 2\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // camera movement\t\n\tfloat an = 0.5*iTime;\n\tvec3 ro = vec3( 1.5*cos(an), 2.0, 1.5*sin(an) );\n    vec3 ta = vec3( 0.0, 0.0, 0.0 );\n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    \n    vec3 tot = vec3(0.0);\n    \n    #if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord+o))/iResolution.y;\n        #else    \n        vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n        #endif\n\n\t    // create view ray\n\t    vec3 rd = normalize( p.x*uu + p.y*vv + 1.5*ww );\n\n        // raytrace\n\t\n\t    // raytrace-plane\n\t    vec4 ps = vec4( -1.0,-1.0,1.0,1.0 );\n\t    vec4 ph = vec4( -1.0,1.0,1.0,-1.0 );\n\t    float t = iBilinearPatch( ro, rd, ps, ph );\n\n        // shading/lighting\t\n\t    vec3 col = vec3(0.0);\n\t    if( t>0.0 )\n\t    {\n            vec3 pos = ro + t*rd;\n    \t\tif (all(lessThanEqual(abs(pos), vec3(1.00001))))\n            {\n                vec3 nor = nBilinearPatch( ps, ph, pos );\n                float dif = clamp( dot(nor,vec3(0.57703)), 0.0, 1.0 );\n                float amb = clamp( 0.5 + 0.5*dot(nor,vec3(0.0,1.0,0.0)), 0.0, 1.0 );\n                col = vec3(0.2,0.3,0.4)*amb + vec3(1.0,0.9,0.7)*dif;\n                col *= 0.8;\n            }\n\t    }\n\t\n        col = sqrt( col );\n\n\t    tot += col;\n    #if AA>1\n    }\n    tot /= float(AA*AA);\n    #endif\n\n\tfragColor = vec4( tot, 1.0 );\n}","name":"Image","description":"","type":"image"}]}