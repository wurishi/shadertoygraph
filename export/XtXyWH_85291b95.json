{"ver":"0.1","info":{"id":"XtXyWH","date":"1586950191","viewed":359,"name":"Radial Gradient Steps","username":"rebbur","description":"Trying to create a smooth circular gradient","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["radial","gradient","stepped"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 Color1 = vec4(0.0, 0.0, 1.0, 1.0);\nvec4 Color2 = vec4(1.0, 1.0, 1.0, 1.0);\n\nint NumSteps = 16; //0 = smooth, >= 1 for stepped\nfloat Dither = 4.0;\n\n//https://www.shadertoy.com/view/lscGDr\nvec3 dithered(in vec3 color, in vec2 uv, in float dither)\n{\n    if (dither > 0.0)\n    {\n        const vec3 magic = vec3( 0.06711056, 0.00583715, 52.9829189 );\n        float f = fract( magic.z * fract( dot( uv, magic.xy ) ) );\n        color = clamp(color + (dither/255.0) * f - ((dither*0.5)/255.0), vec3(0.0), vec3(1.0));\n    }\n    return color;\n}\n\nfloat stepped(in float s, in float scale, in int steps)\n{\n    return steps > 0 ? floor( s / ((1.0*scale) / float(steps))) * 1.0 / float(steps-1) : s;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfloat aspect = iResolution.x / iResolution.y; \n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 center = vec2(0.5, 0.5);\n    \n\tuv.x *= aspect;\n    center.x *= aspect;\n\tfloat dist = distance( uv, center); // 0..1\n    \n    float size = 1.0;\n\tfloat s = stepped(dist, size, uv.x > center.x ? NumSteps : 0);\n    \n    vec4 color = mix(Color1, Color2, clamp(s, 0.0, 1.0));\n\tcolor.rgb = dithered(color.rgb, fragCoord, Dither);\n\tfragColor = color;\n}","name":"Image","description":"","type":"image"}]}