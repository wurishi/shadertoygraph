{"ver":"0.1","info":{"id":"WtBGDm","date":"1559731839","viewed":164,"name":"Virus #1","username":"jblanper","description":"Inspired by https://vimeo.com/124721382. I modified the getNormal function to get a nice white aura.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarching","blob"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Inspired by https://vimeo.com/124721382\nmat2 rotate(float a) {\n  return mat2(cos(a), -sin(a), sin(a), cos(a));\n}\n\nfloat sphereSDF (vec3 p, float r) {\n  return length(p) - r;\n}\n\nfloat map (vec3 p) {\n  vec3 p1 = p;\n  p1.xz *= rotate(iTime * .3);\n  p1.yz *= rotate(iTime * .2);\n  float s1 = sphereSDF(p1, .6);\n  s1 += sin((p1.x + p1.y * p1.z) * (3.14 * 10.) - iTime * 2.) * \n      .015 - sin((p1.x - p1.y * p1.z) * (3.14 * 12.) - iTime) * .01;\n\n  p.z -= iTime * .2;\n  vec3 c = vec3(2., 1.3, 2.);\n  p = mod(p, c) - .5 * c;\n\n  float s2 = sphereSDF(p, .3);\n  s2 += sin((p.x + p.y * p.z) * 20. + iTime * 2.) * \n      .03 + cos(length(p.x - p.y * p.z) * 65. - iTime) * .01;\n\n  return min(s1 * .3, s2 * .28);\n}\n\nfloat trace (vec3 ro, vec3 rd) {\n  float e = .001;\n  float d = e * 2.;\n  float t = 0.;\n  for (int i = 0; i < 60; i++) {\n    if (d < e || t > 50.) continue;\n    d = map(ro + rd * t);\n    t += d;\n  }\n  return t;\n}\n\nvec3 getNormal (vec3 p) {\n  vec2 e = .01 * vec2(-1., 1.);\n  vec3 nor = e.xyy*map(p+e.xyy) +\n    e.yxy*map(p+e.yxy) +\n    e.yyx*map(p+e.yyx);// +\n    //e.xxx*map(p+e.xxx); // comment to get white aura\n    \n  return normalize(nor);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 uv = (fragCoord.xy / iResolution.xy) * 2.0 - 1.0;\n  uv.x *= iResolution.x / iResolution.y;\n  float color;\n\n  // camera\n  vec3 ro = vec3(0., 0., 3.);\n  vec3 rd = normalize(vec3(uv, -3.));\n\n  float t = trace(ro, rd);\n  vec3 p = ro + rd * t;\n\n  // lighting\n  vec3 light = normalize(vec3(1.));\n  vec3 nor = getNormal(p);\n  float diff = clamp(dot(nor, light), 0., 1.);\n\n  // float color = p.z;\n  color += diff;\n  float fog = 1. / (1. + t * t * .1);\n  color *= fog * 1.5;\n\n  fragColor = vec4(vec3(color), 1.);\n}","name":"Image","description":"","type":"image"}]}