{"ver":"0.1","info":{"id":"ddXSDM","date":"1669357550","viewed":61,"name":"magnetic field","username":"virvan","description":"magnetic field with noise","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["magnetic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"struct Source {\n  vec2 pos;\n  float power;\n};\n\nvec2 noisify(in vec2 coord, float speed)\n{\n  return coord + vec2(sin(iTime*6.0*speed) / 1135.0, sin(iTime * 6.0*speed) / 1135.0);\n}\n\nfloat forceNoise(in float v)\n{\n  return v * (1.0 + (sin(iTime * 3.0) + 1.0) / 11.0);\n}\n\nfloat square(in float v)\n{\n  return v * v;\n}\n\nvec2 translateToUniformCoos(in vec2 v)\n{\n  float m = max(iResolution.x, iResolution.x);\n  vec2 uv = vec2(0.5) + (v - 0.5* vec2(iResolution.x, iResolution.y)) / m; \n  return uv;\n}\n  \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord)\n{\n    #define N 4\n    Source[N] sources = Source[N](\n        Source(noisify(vec2(0.75, 0.65), 0.6), forceNoise(0.75)),\n        Source(noisify(vec2(0.25, 0.35), 1.1), forceNoise(-0.015)),\n        Source(noisify(vec2(0.85, 0.4), 0.35), forceNoise(-0.03)),\n        Source(translateToUniformCoos(iMouse.xy), forceNoise(-0.055))\n    );\n    #define ATTENUATION 0.9\n    vec3 GREEN = vec3(0.0, 1.0, 0.0);\n    vec3 RED = vec3(1.0, 0.0, 0.0);\n\n    vec2 uv = translateToUniformCoos(fragCoord);\n    \n    vec2 totalForce = vec2(0.0, 0.0);\n    float totalLinearForce = 0.0;\n    for(int i = 0; i < N; i++) {\n      vec2 delta = uv - sources[i].pos;\n      float squareDistanceClamped = /* dot(delta, delta); */ clamp(dot(delta, delta), 0.0001, 10.0);\n      float forceLen = sources[i].power * ATTENUATION / squareDistanceClamped;\n      vec2 force = delta / sqrt(squareDistanceClamped / square(forceLen));\n      totalForce += force;\n      totalLinearForce += (sign(sources[i].power) * length(force));\n    }\n    \n    float totalVal = length(totalForce);\n    float signum = sign(totalLinearForce);\n    float absVal = /* abs(totalVal); */ smoothstep(0.75, 1.0, sin(log(1.0 + abs(totalVal)) * 15.0));\n    vec3 col = signum < 0.0 ? RED * absVal : GREEN * absVal;\n    \n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}