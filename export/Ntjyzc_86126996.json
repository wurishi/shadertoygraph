{"ver":"0.1","info":{"id":"Ntjyzc","date":"1650880507","viewed":70,"name":"Aorita_test_01","username":"Aorita","description":"123","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["3d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define T_MIN 0.1\n#define T_MAX 20.\n#define RAYMARCH_TIME 128\n#define PRECISION .001\n#define AA 4\n#define PI 3.1415\n\n\nvec2 fixUV(in vec2 c){\n    return (2. * c - iResolution.xy) / min(iResolution.x, iResolution.y);\n}\n\nfloat sdfSphere(in vec3 p){\n    return length(p - vec3(0., 0., 0.)) - 3.;\n}\n\nfloat rayMarch(in vec3 ro, in vec3 rd){\n    float t = T_MIN;\n    for(int i = 0; i < RAYMARCH_TIME && t < T_MAX; i++){\n        vec3 p = ro + t * rd;\n        float d = sdfSphere(p);\n\n        if(d < PRECISION){\n            break;\n        }\n\n        t += d;\n    }\n    return t;\n}\n\nvec3 calcNormal( in vec3 p ) // for function f(p)\n{\n    const float h = 0.0001; // replace by an appropriate value\n    const vec2 k = vec2(1,-1);\n    return normalize( k.xyy*sdfSphere( p + k.xyy*h ) + \n                      k.yyx*sdfSphere( p + k.yyx*h ) + \n                      k.yxy*sdfSphere( p + k.yxy*h ) + \n                      k.xxx*sdfSphere( p + k.xxx*h ) );\n}\n\nmat3 setCamera(vec3 ta, vec3 ro, float cr){\n    vec3 z = normalize(ta - ro);\n    vec3 cp = vec3(sin(cr), cos(cr), 0.);\n    vec3 x = normalize(cross(z, cp));\n    vec3 y = cross(x, z);\n    return mat3(x, y, z);\n}\n\nvec3 render(vec2 uv){\n    vec3 color = vec3(0.);\n    float radius = 5.;\n    vec3 ro = vec3(4. * cos(iTime), 3., 4. * sin(iTime));\n    if(iMouse.z > 0.01){\n        float theta = -(iMouse.x / iResolution.x * 360.);\n        float phi = 360. * ((iMouse.y / iResolution.y) - (.5 * iResolution.y));\n        \n        float camera_y = radius * sin(phi * PI / 360.);\n        float camera_x = radius * cos(theta * PI / 360.) * cos(phi * PI / 360.);\n        float camera_z = radius * sin(theta * PI / 360.) * cos(phi * PI / 360.);\n        \n        \n        ro = vec3(camera_x, camera_y, camera_z);\n    }\n    vec3 tr = vec3(0.);\n    mat3 cam = setCamera(tr, ro, 0.);\n    vec3 rd = normalize(cam * vec3(uv, 1.));\n    //vec3 rd = normalize(vec3(uv, 0.) -ro);\n    float t = rayMarch(ro, rd);\n    if(t < T_MAX){\n        vec3 p = ro + t * rd;\n        vec3 n = calcNormal(p);\n        vec3 light = vec3(5., 10., 0.);\n        //vec3 light = vec3(2. * cos(iTime), 1., 2. * sin(iTime) + 2.);\n        float dif =clamp(dot(normalize(light - p), n), 0., 1.);\n        float amb = 0.5;\n        color = amb * vec3(.1) + dif * vec3(1.);\n    }\n    return sqrt(color);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord){\n    vec3 color = vec3(0.);\n    //vec2 uv = fixUV(fragCoord);\n    for(int m = 0; m < AA; m++){\n        for(int n = 0; n < AA; n++){\n            vec2 offset = 2. * (vec2(float(m), float(n)) / float(AA) - 0.5);\n            vec2 uv = fixUV(fragCoord + offset);\n            color += render(uv);\n        }\n    }\n    //color += render(uv);\n    //fragColor = vec4(color, 1.);\n    fragColor = vec4(color / float(AA * AA), 1.);\n}","name":"Image","description":"","type":"image"}]}