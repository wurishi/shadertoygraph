{"ver":"0.1","info":{"id":"XsG3Dy","date":"1456103137","viewed":443,"name":"Bumpmapping with day/night cycle","username":"piratehurrdurr","description":"My second shader. It extends upon my first shader.\n\nYou can control a pointlight with your mouse.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["simple","bumpmapping","cubemaps"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sX3zn","filepath":"/media/a/0681c014f6c88c356cf9c0394ffe015acc94ec1474924855f45d22c3e70b5785.png","previewfilepath":"/media/ap/0681c014f6c88c356cf9c0394ffe015acc94ec1474924855f45d22c3e70b5785.png","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3Rr","filepath":"/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","previewfilepath":"/media/ap/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float distSq(vec3 d) {\n    return d.x*d.x+d.y*d.y+d.z*d.z;\n}\n\nfloat dist(vec3 d) {\n    return sqrt(d.x*d.x+d.y*d.y+d.z*d.z);\n}\n\nfloat dotProduct(vec3 va, vec3 vb) {\n    float v = 0.0;\n    v+=va.x*vb.x;\n    v+=va.y*vb.y;\n    v+=va.z*vb.z;\n    return v;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 light;\n    light.xy = iMouse.xy / iResolution.x;\n    light.z = 0.075;\n    \n    vec3 lightColor;// = vec3(5.0,3.5,1.0)*10.0;\n    vec3 ambColor;// = vec3(0.1,0.105,0.2);\n    \n    \n    vec2 uvPixel = 1.0/vec2(iResolution.x,iResolution.x)*0.5;\n\tvec2 uv = fragCoord.xy / vec2(iResolution.x,iResolution.x);\n\t//fragColor = vec4(uv,0.5+0.5*sin(iTime),1.0);\n    \n    float strength = 4.0;\n    \n    vec4 image = texture(iChannel0, uv);\n    \n    vec4 height;\n    vec3 normal;\n    height.r = texture(iChannel0, uv).r;\n    height.g = texture(iChannel0, uv+vec2(uvPixel.x,0)).r;\n    height.b = texture(iChannel0, uv+vec2(0,uvPixel.y)).r;\n    height.a = texture(iChannel0, uv+vec2(uvPixel.x,uvPixel.y)).r;\n    \n    normal.r = (height.r-height.g)*strength;\n    normal.g = (height.r-height.b)*strength;\n    normal.b = 1.0;\n    \n    normal/=dist(normal);\n    \n    vec3 rotPlanet;\n    float rotPlanetAngle = iTime/5.0;\n    \n    //x' = x cos f - y sin f\n\t//y' = y cos f + x sin f\n    \n    rotPlanet.x = normal.x;\n    rotPlanet.y = normal.y * cos(rotPlanetAngle) - normal.z*sin(rotPlanetAngle);\n    rotPlanet.z = normal.z * cos(rotPlanetAngle) + normal.y*sin(rotPlanetAngle);\n    \n    lightColor = texture(iChannel1, -normal).rgb*64.0;\n    ambColor = texture(iChannel1, rotPlanet).rgb*0.25;\n    \n    fragColor.rgb = image.rgb;\n    \n    vec3 worldPos = vec3(uv.x,uv.y,0.0);\n    vec3 lightVec =  light-worldPos;\n    //lightVec/=dist(lightVec);\n    lightVec = normalize(lightVec);\n    \n    float angle = dot(lightVec,normal);\n    angle = clamp(angle, 0.0, 1.0);\n    float atten = 1.0/(0.0001+dist(lightVec)*20.0);\n    vec3 lightEffect = lightColor*atten*angle;\n    \n    \n    fragColor.rgb = sqrt((image.rgb*(lightEffect.rgb+ambColor.rgb)));\n    \n}","name":"Image","description":"","type":"image"}]}