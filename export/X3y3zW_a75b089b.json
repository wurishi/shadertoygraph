{"ver":"0.1","info":{"id":"X3y3zW","date":"1717337366","viewed":80,"name":"Weighted Voronoi","username":"DavidRutten","description":"Additive and Multiplicative voronoi weighting. I hate how easy this is in pixels and how hard this is analytically...\n\nMove the mouse from the top to the bottom to blend between additive and multiplicative weighting.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["voronoi"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int N = 8;\nconst float W[N] = float[N](1.0, 1.2, 1.4, 1.6, 1.8, 2.0, 2.2, 2.4);\nconst vec3 C[N] = vec3[N](\n  vec3(1.0, 0.0, 0.3),\n  vec3(0.8, 0.1, 0.4),\n  vec3(0.6, 0.2, 0.5),\n  vec3(0.4, 0.3, 0.6),\n  vec3(0.3, 0.4, 0.7),\n  vec3(0.2, 0.6, 0.6),\n  vec3(0.1, 0.8, 0.4),\n  vec3(0.0, 1.0, 0.2));\n\nvec2 randompoint( in float anim, in float n )\n{\n    // This method stolen from another shader.\n    vec2 ab = vec2(sin(anim*0.01+n*n)+sin(anim*0.039)+cos(anim*0.0071),\n                   cos(anim*0.011+n/17.0)+sin(anim*0.036+n*1.3)+cos(anim*0.0078));\n    return vec2(1.25*sin(n*1.7+ab.x), cos(n+ab.y));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  // Mouse at bottom of screen means additive weighting,\n  // mouse at top of screen means multiplicative weighting.\n  float blend = iMouse.y / iResolution.y;\n  blend = min(max(blend, 0.0), 1.0);\n   \n\tvec2 uv = fragCoord.xy - 0.5*iResolution.xy;\n    uv = 2.0*uv/iResolution.y;\n      \n    float minD = 1e20;\n    int minI = -1;\n    \n    for (int i = 0; i < N; i++)\n    {\n      float localD = length(uv - randompoint(iTime, float(i)));\n      if (localD < 0.01)\n      {\n        fragColor = vec4(C[i], 1.0);\n        return;\n      }\n      else if (localD < 0.02)\n      {\n        fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n        return;\n      }\n      \n      float mul = localD * W[i]; // Multiplicative weighting\n      float add = localD + 0.2 * W[i]; // Additive weighting      \n      localD = blend * mul + (1.0-blend) * add;\n\n      if (localD < minD)\n      {\n        minD = localD;\n        minI = i;\n      }\n    }\n    \n    vec3 c = C[minI];\n    \n    // Output to screen\n    fragColor = vec4(c, 1.0);\n}","name":"Image","description":"","type":"image"}]}