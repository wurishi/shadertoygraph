{"ver":"0.1","info":{"id":"4sdGDB","date":"1452028680","viewed":1743,"name":"Tilt Shift Effect","username":"TambakoJaguar","description":"Some quick made real-time tilt-shift effect featuring a double-pass (and double buffer) fast Gaussian blur","likes":11,"published":1,"flags":34,"usePreview":0,"tags":["blur","gradient","realtime","gaussian","buffer","tiltshift","multipass","doublepass","gradual"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const int blur_size = 30;\nconst float blur_width = 1.;\n\nfloat gauss(float x, float e)\n{\n    return exp(-pow(x, 2.)/e); \n}\n\n// Horizontal blurring\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec2 pos = fragCoord.xy / iResolution.xy;\n   vec4 pixval = vec4(0.);\n   float tot = 0.;\n    \n   const int nb = 2*blur_size+1;\n   \n   for (int x=0; x<nb; x++)\n   { \n       float x2 = blur_width*float(x-blur_size);\n       vec2 ipos = pos + vec2(x2/iResolution.x, 0.);\n       float g = gauss(x2, float(20*blur_size)*2.*pow(0.01+abs(pos.y - 0.5), 2.3));\n       pixval+= g*texture(iChannel0, ipos);\n       tot+= g;\n   }\n   fragColor = pixval/tot;\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"const int blur_size = 30;\nconst float blur_width = 1.;\n\nfloat gauss(float x, float e)\n{\n    return exp(-pow(x, 2.)/e); \n}\n\n// Vertical blurring\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec2 pos = fragCoord.xy / iResolution.xy;\n   vec4 pixval = vec4(0.);\n   float tot = 0.;\n    \n   const int nb = 2*blur_size+1;\n   \n   for (int x=0; x<nb; x++)\n   { \n       float x2 = blur_width*float(x-blur_size);\n       vec2 ipos = pos + vec2(0., x2/iResolution.x);\n       float g = gauss(x2, float(20*blur_size)*2.*pow(0.01+abs(pos.y - 0.5), 2.3));\n       pixval+= g*texture(iChannel0, ipos);\n       tot+= g;\n   }\n   fragColor = pixval/tot;\n}","name":"Buf B","description":"","type":"buffer"}]}