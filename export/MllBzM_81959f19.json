{"ver":"0.1","info":{"id":"MllBzM","date":"1511478992","viewed":180,"name":"Plasma 13h","username":"TomCat","description":"Simple plasma fx - DOS VGA example","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["vga"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Emulating DOS VGA enviroment - code by TomCat/Abaddon\n\n// triangle wave based palette generator\nint calcColor(int index,int adder)\n{   \n\tint t=255&(255-index+adder);\n    return(((((t&128)>>7)*255)^t)>>1);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    // 046CH BIOS variable, INT8 counter speed 18.2Hz\n    int timer=int(iTime*105./88.*1000000./65536.);\n\n    // video memory offset, DI register for STOSB\n    int vmem=int(fragCoord.x/iResolution.x*320.)+320*int((iResolution.y-fragCoord.y)/iResolution.y*200.);\n    \n    // screen coordinates from video memory offset: x=0..255, y=0..199\n    vec2 coord=vec2(255&(vmem*0xCCCD>>16),255&(vmem*0xCCCD>>24));\n\n    // indexed color palette, VGA DAC array\n    vec3 pal[256];\n    \n    // new palette\n    // because of some slow GPUs cancelling the calculation of every color\n\t// thank abje for the comment\n    /**\n\tfor (int i=0; i<256; i++) {\n    \tpal[i]=vec3(calcColor(i,0x22),calcColor(i,0x44),calcColor(i,0x77));\n    }\n\t/**/\n\n    // index of color for AL register\n    int AL=255&((int(sqrt(coord.x*coord.x+coord.y*coord.y))+timer)<<3);\n\n   \t// calculating only one color on the fly because of some slow GPUs\n    \tpal[AL]=vec3(calcColor(AL,0x22),calcColor(AL,0x44),calcColor(AL,0x77));\n    \n    // putpixel, STOSB\n    fragColor=vec4(pal[AL]/63.,0);\n}\n\n// The same code in x86 ASM - 82 bytes\n/**\nORG 256\n MOV    AL,13H\n INT    10H\n MOV    DX,3C9H\nl1:\n PUSH   77H\n PUSH   44H\n PUSH   22H\nl2:\n POP    AX\n ADD    AX,SI\n CBW\n XOR    AL,AH\n SHR    AL,1\n OUT    DX,AL\n CMP    DI,SP\n JNZ    l2\n DEC    SI\n JNZ    l1\n PUSH   0A000H\n POP    ES\n MOV    DS,BX\n MOV    [SI+BP+2],BX\n MOV    CL,3\nmain:\n MOV    AX,0CCCDH\n MUL    DI\n MOV    AL,DH\n MUL    AL\n MOV    [SI+BP],AX\n FILD   DWORD [SI+BP]\n XCHG   AX,DX\n MUL    AL\n MOV    [SI+BP],AX\n FIADD  DWORD [SI+BP]\n FSQRT\n FISTP  WORD [SI+BP]\n MOV    AX,[46CH]\n ADD    AX,[SI+BP]\n SHL    AX,CL\n STOSB\n MOV    AH,1\n INT    16H\n JZ     main\n XCHG   AX,CX\n INT    10H\nRETN\n/**/","name":"Image","description":"","type":"image"}]}