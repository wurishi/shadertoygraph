{"ver":"0.1","info":{"id":"Mty3RW","date":"1473433670","viewed":214,"name":"Wood Submission: Taylee","username":"Phildo","description":"Explanation: https://www.shadertoy.com/view/XtGGzD\nOriginal: https://www.shadertoy.com/view/XlGGzD.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["wood","lowres"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//NOTE- I'M LOOKING TO USE THIS IN A GAME, AND IN NO WAY WILL REIMBURSE YOU IF YOU HELP ME!\n//lol sorry, just don't want to get into legal trouble if I end up using/referencing something you send... :P\n\n//PLEASE EDIT THE FUNCTION \"getColor\"\n//I'm looking for a function that can take in an arbitrary 3d coordinate\n//(coordinate guaranteed to be within the range of -10 to 10ish)\n//and outputs a color in such a way that the surface will look like wood.\n//(note that this particular example will just use positions on the unit circle)\n\n#define H_GRAIN_SCALE 1.0\n#define V_GRAIN_SCALE 16.0\n#define BANDS 5.0\n\nfloat random (in vec2 st) { \n    return fract(sin(dot(st.xy,vec2(12.9898,78.233))) * 43758.5453123);\n}\n\n// Based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) + (c - a)* u.y * (1.0 - u.x) + \n            (d - b) * u.x * u.y;\n}\n\nvec3 getColor(vec3 pos)\n{\n  vec2 p = pos.xy;\n  p *= vec2(H_GRAIN_SCALE, V_GRAIN_SCALE); \n  float n = fract(noise(p));\n  n = 1.0 - clamp(float(int(n * BANDS)) / BANDS, 0.0, 1.0) * 0.75 + 0.1;\n\n  vec3 woodColor = vec3(0.5, 0.3, 0.1);\n  vec3 color = woodColor * n;\n\n  return color;   \n}\n\n//Example main just returns black for all frags not on\n//a centered unit sphere. For others, it returns the\n//contents of getColor (passing in faked 3d coords on sphere)\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float ratio = iResolution.x/iResolution.y;\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tvec3 pos = vec3(uv,0.);\n    pos *= 2.;\n\tpos -= vec3(1.,1.,0.);\n    if(ratio < 1.) pos.y /= ratio;\n    else           pos.x *= ratio;\n    float invres = 20.;\n    pos *= invres;\n    pos = floor(pos);\n    pos /= invres;\n    if(length(pos) > 1.)\n    {\n      fragColor = vec4(0.,0.,0.,1.);\n      return;\n    }\n    pos.z = 1.-sqrt(pos.x*pos.x+pos.y*pos.y);\n\n    //pos.x += iTime;\n    //pos.y += iTime;\n    //pos.z += iTime;\n    fragColor = vec4(getColor(pos),1.);\n}\n","name":"Image","description":"","type":"image"}]}