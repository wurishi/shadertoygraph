{"ver":"0.1","info":{"id":"l3GXDG","date":"1720439405","viewed":33,"name":"swimming fish!","username":"eoviya","description":"A swimming fish. you can also say it's a block..... XD\nSet a position and direction, it will move like a fish. It could be used at any project to implement effects like swimming waving tiny things...","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d3d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    float uvTiling = 4.0;\n    vec2 uv = fragCoord/iResolution.yy * uvTiling;\n\n    vec3 col = vec3(0.0, 0.0, 0.0);\n    vec3 col2 = vec3(0.0, 1.0, 0.0);\n    \n    vec2 start = vec2(0.5, 0.5);\n    vec2 dir = normalize(vec2(1.0, 1.0));\n    float dirAngle = atan(dir.x, dir.y);\n    \n    float t = mod(iTime, 6.0);\n    vec2 perpDir = vec2(-dir.y, dir.x);\n    float perpAmptitude = 2.0; // 振幅\n    float perpPhase = 0.5; // 相位\n    float perpStrength = 0.25; // 起伏强度\n    float perturbation = sin(t * perpAmptitude + perpPhase) * perpStrength;\n    vec2 perturbedDir = dir * t + perpDir * perturbation;\n    \n    // d(csin(at+b))/dt = cacos(at+b), \n    // where perpAmptitude = a, b = perpPhase, c = perpStrength\n    // so cacos(at+b) = perpStrength * cos(t * perpAmptitude)\n    float dpdt = perpStrength * perpAmptitude * cos(t * perpAmptitude + perpPhase);\n    \n    float perpAngle = atan(dpdt);\n    vec2 center = start + perturbedDir;\n    \n    float angle = dirAngle - perpAngle + 3.14159 * 0.5;\n    float cosA = cos(angle);\n    float sinA = sin(angle);\n    vec2 rotated_uv = vec2(\n        cosA * (uv.x - center.x) - sinA * (uv.y - center.y) + center.x,\n        sinA * (uv.x - center.x) + cosA * (uv.y - center.y) + center.y\n    );\n\n    \n    vec2 size = vec2(0.2, 0.1);\n    vec2 border = vec2(0.01, 0.01);\n    \n    vec2 dist = abs(rotated_uv - center);\n    vec2 smoothMin = size - border;\n    vec2 smoothMax = size + border;\n    float smoothX = smoothstep(smoothMax.x, smoothMin.x, dist.x);\n    float smoothY = smoothstep(smoothMax.y, smoothMin.y, dist.y);    \n    float mask = smoothX * smoothY;\n\n    vec3 color = mix(col, texture(iChannel0, rotated_uv - center).rgb, mask);\n    //vec3 color = mix(col, col2, mask);\n\n    // Output to screen\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}