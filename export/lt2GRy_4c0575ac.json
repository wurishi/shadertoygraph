{"ver":"0.1","info":{"id":"lt2GRy","date":"1430116698","viewed":984,"name":"true 303","username":"jnorberg","description":"nothing like a real 303, but an interesting example of how to fake a resonant filter sound. Look in the sound-tab.","likes":30,"published":1,"flags":8,"usePreview":0,"tags":["303"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// 2015-04-26 jnorberg\n// nothing to see here, look in the Sound section in the other tab\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t = fract(iTime * 2.0) + 0.05;\n    float v = t / (0.02 + t*t );\n    vec2 c = fragCoord / iResolution.xy - vec2(0.5);\n    v *= 0.3 / (1.0 + 9.0 * length( c ));\n\tfragColor = vec4(v,v, v,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"XsfGRr","channel":0}],"code":"// 2015-04-26 jnorberg\n// mainly an interesting way of faking a resonant lowpass filter sound\n\nfloat pi = 3.14159265359;\nfloat tau = 2.0 * 3.14156592;\n\nfloat note( float n ) { return 440.0 * pow( 2.0, ( n-49.0) / 12.0 ); }\n\nfloat bass( float time, float f, float c )\n{\n    float wf = mix(0.1,111.0, c );\n    float w0 = 0.25 + floor( wf ); // bandwidth (has to be integer)\n    float w1 = w0 + 1.0;\n    float wfrac = fract( wf );\n    \n    float p = mod( time*f, tau );\n    float saw = 1.0 - p / pi; // saw full aliasing \n    \n    // sinc-like features ahoy\n    float s = 0.9; // \"strength\" basically fake \"q\", try lowering for extra crunch\n    float i = tau - p; // i \"inverted p\"\n    float d0 = 1.0 / (1.0 + s * p );\n    float d1 = 1.0 / (1.0 + s * i );\n\n    float sinc_0 = -cos(p*w0) * d0 + cos(i*w0) * d1;\n    float sinc_1 = -cos(p*w1) * d0 + cos(i*w1) * d1;\n\n    return saw + mix( sinc_0, sinc_1, wfrac );\n}\n\nfloat kick( float t )\n{\n    t = t/(0.19+t);\n    float v = sin( 150.0 * t );\n    v *= 0.9 / (0.4 + 50.0*t); // env1\n    v = v / ( 0.2 + abs(v)); // saturate\n    v *= 0.5 / (0.5+2.0*t*t*t); // env2\n    return v;\n}\n\n// hi-hat-noise from and's \"starDust\"\nfloat noise(float t, float falloff )\n{\n    float phi = t * iSampleRate;\n    float v = fract(sin(phi * 0.011753) * 122.3762) - 0.5;\n    return 0.005 * v / (falloff + t );\n}\n\nvec2 ssaw( float t, float f )\n{\n    // super saw, super stereo :)\n    float m = fract( t * f );\n    vec2 s = vec2(\n        m + fract( t * f * 1.015 ) + 0.5 * fract( t * f * 0.98 ),\n        m + fract( t * f * 0.985 ) + 0.5 * fract( t * f * 1.02 )\n    );\n    s *= 0.08 * t;\n    return s;\n}\n\nvec2 mainSound( in int samp,float time)\n{\n    float s16 = fract(time*8.0);\n    float s8 = fract(time*4.0);\n    float s4 = fract(time*2.0);\n    float s4_2 = fract(time*2.0+0.75);\n    float s4_3 = fract(time*2.0+0.5);\n    float s4_4 = fract(time*2.0+0.25);\n    float s2 = fract(time*1.0);\n    float s1 = fract(time*0.5);\n    float backforth = fract(time*0.125);\n\n    float mono = 0.0;\n\n    // bass\n    float c = 0.5 * backforth + 0.005 / ( 0.05 + s16 );\n    float n = 44.0;\n    if ( s1 >= 0.75+0.125 )\n        n -= 12.0;\n\telse if ( s1 >= 0.25 && s1 < 0.375 )\n        n -= 96.0*( s1-0.25);   \n    float f = note( n );\n    float b = bass( s16 * 0.125, f, c );\n    b *= (0.1 + s4) * 0.4 * ( 1.0 - s16 ); // fake \"ducking\" the bass\n    mono += b;\n    \n    // kick\n    float k = kick( s4 );\n    mono += k;\n    \n\t// parallel distortion (for bass+kick drum)\n    mono = 0.5 * ( mono + mono / ( 0.4 + abs(mono) ) );\n\n    // hats\n\tmono += noise( s4_2, 0.07 );\n    mono += noise( s4_3, 0.01 );\n    mono += noise( s4_4, 0.08 );\n       \n    // make stereo\n    vec2 stereo = vec2( mono );\n\n    // pads are stereo\n    stereo += ssaw( s4, note( 24.0 ) );\n    stereo += ssaw( s4, note( 24.0 + mix( 7.0, 8.0, floor( backforth + 0.5) ) ) );\n    stereo += ssaw( s4, note( 24.0 + 15.0 ) );\n\n    stereo *= 1.75; // louder\n    stereo = clamp( stereo, vec2(-0.99), vec2(0.99) ); // clip\n\n    return stereo;\n}","name":"Sound","description":"","type":"sound"}]}