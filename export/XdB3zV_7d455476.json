{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"video","id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}},{"channel":1,"type":"texture","id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}}],"code":"#define GAMMA 0.65\n#define REGIONS 5.\n#define LINES 0.5\n#define BASE 2.5\n#define GREEN_BIAS 0.9\n\nvec3 OutlineWhyCantIPassASampler(vec2 fragCoord)\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tuv.y = 1.-uv.y;\n  \tvec4 lines= vec4(0.30, 0.59, 0.11, 1.0);\n\n\tlines.rgb = lines.rgb * LINES*1.5;\n \n  \tfloat s11 = dot(texture(iChannel1, uv + vec2(-1.0 / iResolution.x, -1.0 / iResolution.y)), lines);   // LEFT\n  \tfloat s12 = dot(texture(iChannel1, uv + vec2(0, -1.0 / iResolution.y)), lines);             // MIDDLE\n  \tfloat s13 = dot(texture(iChannel1, uv + vec2(1.0 / iResolution.x, -1.0 / iResolution.y)), lines);    // RIGHT\n \n\n  \tfloat s21 = dot(texture(iChannel1, uv + vec2(-1.0 / iResolution.x, 0.0)), lines);                // LEFT\n  \t// Omit center\n  \tfloat s23 = dot(texture(iChannel1, uv + vec2(-1.0 / iResolution.x, 0.0)), lines);                // RIGHT\n \n  \tfloat s31 = dot(texture(iChannel1, uv + vec2(-1.0 / iResolution.x, 1.0 / iResolution.y)), lines);    // LEFT\n  \tfloat s32 = dot(texture(iChannel1, uv + vec2(0, 1.0 / iResolution.y)), lines);              // MIDDLE\n  \tfloat s33 = dot(texture(iChannel1, uv + vec2(1.0 / iResolution.x, 1.0 / iResolution.y)), lines); // RIGHT\n \n  \tfloat t1 = s13 + s33 + (2.0 * s23) - s11 - (2.0 * s21) - s31;\n  \tfloat t2 = s31 + (2.0 * s32) + s33 - s11 - (2.0 * s12) - s13;\n \n  \tvec3 col;\n \n\tif (((t1 * t1) + (t2* t2)) > 0.04) \n\t{\n  \t\tcol = vec3(-1.,-1.,-1.);\n  \t}\n\telse\n\t{\n    \t\tcol = vec3(0.,0.,0.);\n  \t}\n \n  \treturn col;\n}\n\n\nvec3 RecolorForeground(vec3 color)\n{\n\tif(color.g > (color.r + color.b)*GREEN_BIAS)\n\t{\n\t\tcolor.rgb = vec3(0.,0.,0.);\n\t}\n\n\t\n\tcolor.rgb = 0.2126*color.rrr + 0.7152*color.ggg + 0.0722*color.bbb;\n\t\n\tif(color.r > 0.95)\n\t{\n\t\t\n\t}\n\telse if(color .r > 0.75)\n\t{\n\t\tcolor.r *= 0.9;\n\t}\n\telse if(color.r > 0.5)\n\t{\n\t\tcolor.r *= 0.7;\n\t\tcolor.g *=0.9;\n\t}\n\telse if (color.r > 0.25)\n\t{\n\t\tcolor.r *=0.5;\n\t\tcolor.g *=0.75;\n\t}\n\telse\n\t{\n\t\tcolor.r *= 0.25;\n\t\tcolor.g *= 0.5;\n\t}\n\t\n\t\n\treturn color;\n}\n\n\nvec3 Posterize(vec3 color)\n{\n\tcolor = pow(color, vec3(GAMMA, GAMMA, GAMMA));\n\tcolor = floor(color * REGIONS)/REGIONS;\n\tcolor = pow(color, vec3(1.0/GAMMA));\n\treturn color.rgb;\n}\n\nvec3 ReplaceBackground(vec3 color,vec2 uv,vec2 fragCoord)\n{\n\tif((color.g > color.r && color.g > color.b) && color.g > GREEN_BIAS)\n\t{\n\t\tcolor.r = texture(iChannel1,vec2(uv.x,1.-uv.y)).r-0.6;\n\t\tcolor.r = (0.5-0.5*uv.x+uv.y)*0.75 +color.r;\n\t\tcolor = Posterize(color.rrr);\n\t\tcolor.b = 0.;\n\t\tcolor.g = 0.;\n\t\tcolor += OutlineWhyCantIPassASampler(fragCoord);\n\n\t}\n\telse\n\t{\n\t\tcolor = vec3(0.,0.,0.);\t\n\t\t\n\t}\n\t\n\treturn color;\n\t\n}\n\nvec3 Outline(vec2 uv)\n{\n  \tvec4 lines= vec4(0.30, 0.59, 0.11, 1.0);\n\n\tlines.rgb = lines.rgb * LINES;\n\tif(iResolution.x < 300.)\n\t{\n\t\tlines /= 4.0;\t// improves thumbnail look\n\t}\n\telse if(iResolution.x > 1000.)\n\t{\n\t\tlines *= 1.5;\n\t}\n\t\n \n  \tfloat s11 = dot(texture(iChannel0, uv + vec2(-1.0 / iResolution.x, -1.0 / iResolution.y)), lines);   // LEFT\n  \tfloat s12 = dot(texture(iChannel0, uv + vec2(0, -1.0 / iResolution.y)), lines);             // MIDDLE\n  \tfloat s13 = dot(texture(iChannel0, uv + vec2(1.0 / iResolution.x, -1.0 / iResolution.y)), lines);    // RIGHT\n \n\n  \tfloat s21 = dot(texture(iChannel0, uv + vec2(-1.0 / iResolution.x, 0.0)), lines);                // LEFT\n  \t// Omit center\n  \tfloat s23 = dot(texture(iChannel0, uv + vec2(-1.0 / iResolution.x, 0.0)), lines);                // RIGHT\n \n  \tfloat s31 = dot(texture(iChannel0, uv + vec2(-1.0 / iResolution.x, 1.0 / iResolution.y)), lines);    // LEFT\n  \tfloat s32 = dot(texture(iChannel0, uv + vec2(0, 1.0 / iResolution.y)), lines);              // MIDDLE\n  \tfloat s33 = dot(texture(iChannel0, uv + vec2(1.0 / iResolution.x, 1.0 / iResolution.y)), lines); // RIGHT\n \n  \tfloat t1 = s13 + s33 + (2.0 * s23) - s11 - (2.0 * s21) - s31;\n  \tfloat t2 = s31 + (2.0 * s32) + s33 - s11 - (2.0 * s12) - s13;\n \n  \tvec3 col;\n \n\tif (((t1 * t1) + (t2* t2)) > 0.04) \n\t{\n  \t\tcol = vec3(-1.,-1.,-1.);\n  \t}\n\telse\n\t{\n    \tcol = vec3(0.,0.,0.);\n  \t}\n \n  \treturn col;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv.y = 1.0-uv.y;\n\tvec3 color = normalize(texture(iChannel0,uv)).rgb*BASE;\t\n\tcolor = Posterize(color);\n\tvec3 background = ReplaceBackground(color,uv,fragCoord);\n\tcolor.rgb += Outline(uv);\n\tcolor = RecolorForeground(color)+ background;\n\t//color = texture(iChannel0,vec2(uv.x, uv.y)).rgb;\n\tfragColor = vec4(color,1.);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XdB3zV","date":"1390677608","viewed":2588,"name":"toon video shader","username":"zel","description":"Simple toon filter with video background replacement intended for a different video ;-)\n\nHi, this is my first post to the site. I usually work with HLSL, so I'm an experimenting newbie.","likes":45,"published":1,"flags":0,"usePreview":1,"tags":["posterizeoutlinerecolorpostprocessingvideo"],"hasliked":0,"parentid":"","parentname":""}}