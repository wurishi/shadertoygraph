{"ver":"0.1","info":{"id":"4cGcDd","date":"1732534115","viewed":42,"name":"Smooth texture warper","username":"mafik","description":"Warps the texture based on the given control points","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["warp"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int N = 5;\n\nvec2 anchorsLast[N] = vec2[](\n  vec2(0., 0.),\n  vec2(1., 0.),\n  vec2(0., 1.),\n  vec2(1., 1.),\n  vec2(0.5, 0.5));\n\nvec2 anchorsCurr[N] = vec2[](\n  vec2(0., 0.),\n  vec2(1., 0.),\n  vec2(0., 1.),\n  vec2(1., 1.),\n  vec2(0.5, 0.5));\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n    // Move the central anchor around to show the warping\n    const int animatedAnchor = 4;\n    anchorsCurr[animatedAnchor] = vec2(0.5, 0.5) + vec2(cos(iTime) * 0.1, sin(iTime) * 0.1);\n    // Click the image to move the anchor interactively\n    if (iMouse.z > 0. && iMouse.w < 0.) {\n        anchorsCurr[animatedAnchor] = iMouse.xy / iResolution.y;\n    }\n\n    vec2 uv = fragCoord/iResolution.y;\n    \n    // Step 1: Calculate how similar is the current fragment to each anchor\n    float similarity[N];\n    for (int i = 0; i < N; ++i) {\n        similarity[i] = 1. / distance(anchorsCurr[i], uv);\n    }\n    \n    // Step 2: Normalize the anchor similarity using softmax\n    float expArr[N];\n    float expSum = 0.;\n    for (int i = 0; i < N; ++i) {\n        // glsl exp function cannot handle high exponents\n        expArr[i] = exp(min(50., similarity[i]));\n        expSum += expArr[i];\n    }\n    for (int i = 0; i < N; ++i) {\n        similarity[i] = expArr[i] / expSum;\n    }\n    \n    // Step 3: Shift the UV by weighted sum of anchor displacements\n    vec2 displacements[N];\n    for (int i = 0; i < N; ++i) {\n      displacements[i] = anchorsLast[i] - anchorsCurr[i];\n    }\n    for (int i = 0; i < N; ++i) {\n      uv += displacements[i] * similarity[i];\n    }\n    \n    // Step 4: Sample the texture at the shifted UV\n    fragColor.rgb = texture(iChannel0, uv).rgb;\n    \n    // Debug output: show similarity to some anchors\n    // fragColor.r = similarity[0];\n    // fragColor.g = similarity[3];\n    // fragColor.b = similarity[4];\n}","name":"Image","description":"","type":"image"}]}