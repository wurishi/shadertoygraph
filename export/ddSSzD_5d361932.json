{"ver":"0.1","info":{"id":"ddSSzD","date":"1669970373","viewed":167,"name":"ChatGPT Raymarch","username":"scry","description":"\"Write a GLSL shader that can be copied and pasted directly into shadertoy.com. The shader should use raymarching to depict a marble on a plane. Make sure to adjust for the aspect ratio and have the marble in the center of the scene.\"","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["ai"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define M_PI 3.14159265358979323846\n\n// raymarching function for the marble\nfloat scene(vec3 p)\n{\n  // calculate the distance from the origin\n  float d = length(p);\n  \n  // calculate the angle from the x-axis\n  float a = atan(p.z, p.x);\n  \n  // calculate the angle from the y-axis\n  float b = atan(p.y, p.x);\n  \n  // combine the angles to create a marble-like pattern\n  float pattern = 0.5 + 0.5 * sin(10.0 * a) * sin(10.0 * b);\n  \n  // adjust the distance based on the pattern\n  //d -= 0.5 * pattern;\n\n  d -= 1.0 + 0.05 * pattern;\n\n  // return the final distance\n  return d;\n}\n\n// main function\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  // calculate the aspect ratio\n  float aspect = iResolution.x / iResolution.y;\n  \n  // calculate the screen position\n  vec2 uv = fragCoord / iResolution.xy;\n  \n  // adjust the screen position for the aspect ratio\n  uv -= 0.5;\n  uv.x *= aspect;\n  \n  // set the initial distance to a large value\n  float d = 1.0;\n  \n  // set the initial position to the camera position\n  vec3 p = vec3(0, 0, -4);\n  \n  // set the initial direction to the direction of the pixel\n  vec3 dp = normalize(vec3(uv, 1));\n  \n  // set the initial color to the background color\n  vec3 c = vec3(0.5, 0.7, 1.0);\n  \n  // raymarch the scene\n  for (int i = 0; i < 64; i++)\n  {\n    // calculate the current distance\n    d = scene(p);\n    \n    // check if we have reached the surface\n    if (d < 0.001)\n    {\n      // calculate the surface normal\n      vec3 n = vec3(\n        scene(p + vec3(0.001, 0, 0)) - scene(p - vec3(0.001, 0, 0)),\n        scene(p + vec3(0, 0.001, 0)) - scene(p - vec3(0, 0.001, 0)),\n        scene(p + vec3(0, 0, 0.001)) - scene(p - vec3(0, 0, 0.001))\n      );\n      \n      // calculate the diffuse lighting\n      float l = dot(normalize(vec3(1, 0.5, 1)), normalize(n));\n      \n      // set the final color\n      c = mix(vec3(0.5, 0.4, 0.3), vec3(1, 1, 1), l);\n      \n      // break the loop\n      break;\n    }\n    \n    // move the ray forward\n    p += dp * d;\n  }\n  \n  // output the final color\n  fragColor = vec4(c, 1.0);\n\n}","name":"Image","description":"","type":"image"}]}