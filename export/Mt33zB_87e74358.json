{"ver":"0.1","info":{"id":"Mt33zB","date":"1470010763","viewed":522,"name":"Galaxy formation (+sound)","username":"LukeRissacher","description":"First sound shader attempt...","likes":21,"published":1,"flags":8,"usePreview":0,"tags":["procedural","2d","noise","clouds","fmsynthesis"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 Rotate(vec2 vec, float angle) {\n    return vec2(\n        vec.x * cos(angle) - vec.y * sin(angle), \n        vec.x * sin(angle) + vec.y * cos(angle) \n    );\n}\n\nfloat Cubic(float a, float b, float t) {\n    float blendFactor = t * t * (3.0 - 2.0 * t);\n    return mix(a, b, blendFactor);\n}\n\nfloat Rand(vec2 pos) {\n    return fract(sin(dot(pos.xy, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nfloat SmoothRand(vec2 pos, vec2 stepSize) {\n    pos /= stepSize;\n    vec2 floored = floor(pos);\n    vec2 partial = fract(pos);\n    float top = Cubic(Rand(floored + vec2(0, 1)), Rand(floored + vec2(1, 1)), partial.x);\n    float bottom = Cubic(Rand(floored + vec2(0, 0)), Rand(floored + vec2(1, 0)), partial.x);\n    return Cubic(bottom, top, partial.y);\n}\n\nfloat SmoothRand1d(float pos, float stepSize) {\n    pos /= stepSize;\n    float floored = floor(pos);\n    float partial = fract(pos);\n    return Cubic(Rand(vec2(floored)), Rand(vec2(floored + 1.0)), partial);\n}\n\nfloat OctaveNoise(vec2 pos, vec2 stepSize) {\n    float sum = 0.0;\n    float multiplier = 1.0;\n    float scale = 0.0;\n    for (int i = 0; i < 4; i++) {\n        sum += SmoothRand(pos, stepSize) * multiplier;\n        scale += multiplier;\n        multiplier *= 0.5;\n        stepSize *= 0.5;\n        pos = Rotate(pos, radians(60.0));\n    }\n    return sum / scale;\n}\n\n// Main pixel shader.\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\n    // Normalize uv to [-1..1] across x\n    vec2 uv = (2.0 * fragCoord - iResolution.xy) / iResolution.x;\n\n    // Do inverse polar mapping\n    float a = -atan(uv.y, uv.x);\n    float r = length(uv);\n    uv = vec2(cos(a), sin(a)) / r + 0.1 * iTime;\n    \n    // Sample a cloudy noise plane\n    float brightness = OctaveNoise(uv, vec2(0.4));\n    \n    // Pulsate brightness randomly\n    brightness /= 5.0 * r * SmoothRand1d(iTime, 0.7);\n    fragColor = vec4(vec3(brightness), 1.0);\n} ","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"XsfGRr","channel":0}],"code":"float Cubic(float a, float b, float t) {\n    float blendFactor = t * t * (3.0 - 2.0 * t);\n    return mix(a, b, blendFactor);\n}\n\nfloat Rand(vec2 pos) {\n    return fract(sin(dot(pos.xy, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nfloat SmoothRand1d(float pos, float stepSize) {\n    pos /= stepSize;\n    float floored = floor(pos);\n    float partial = fract(pos);\n    return Cubic(Rand(vec2(floored)), Rand(vec2(floored + 1.0)), partial);\n}\n\n// Sawtooth wave.\nfloat Saw(float t) {\n    return 2.0 * fract(t) - 1.0;\n}\n\n// Triangle wave.\nfloat Triangle(float t) {\n    return abs(4.0 * fract(t) - 2.0) - 1.0;\n}\n\n// Sine wave.\nfloat Sine(float t) {\n    return sin(6.283 * t);\n}\n\nfloat GetSample(float time, float freq, float brightness, float sineMix) {\n    float modAmount = 0.15 * brightness + 0.05;\n    float modFreq = freq * 1.49;\n    float phaseOffset = modAmount * Sine(modFreq * time);\n    float triSample = Triangle(freq * time + phaseOffset);\n    float sineSample = Sine(freq * time + phaseOffset);\n    float amplitude = 0.3 + 0.7 * brightness;\n    return mix(triSample, sineSample, sineMix) * amplitude;\n}\n\nvec2 mainSound( in int samp,float time) {\n    \n    float brightness = 1.0 - SmoothRand1d(time, 0.7);\n    brightness = pow(brightness, 3.0);\n    \n    float sineMix = 0.35 * sin(0.3 * time + 3.14) + 0.5;\n    \n    float freq = 62.0;\n    float centerSample = 0.33 * GetSample(time, freq - 0.4, brightness, sineMix) +\n        \t\t\t\t 0.33 * GetSample(time + 0.3, freq + 0.4, brightness, sineMix);\n    float leftSample = 0.5 * GetSample(time + 0.71, freq + 0.6, brightness, sineMix);\n    float rightSample = 0.5 * GetSample(time - 0.41, freq - 0.6, brightness, sineMix);\n    \n    return vec2(centerSample + leftSample, centerSample + rightSample);\n}","name":"Sound","description":"","type":"sound"}]}