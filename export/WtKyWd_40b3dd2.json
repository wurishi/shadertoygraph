{"ver":"0.1","info":{"id":"WtKyWd","date":"1622890442","viewed":53,"name":"ProcEye","username":"Ellementul","description":"Eye","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["eye"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.14159265359;\nvec2 GetCUV(vec2 coords, vec2 limitCoords){\n    return (coords-.5*limitCoords.xy)/limitCoords.y;\n}\n\nvec2 GetPolarCoord(vec2 uv) {\n    vec2 st = vec2(atan(uv.x, uv.y), length(uv));\n    st.x /= PI;\n    st.x += .5;\n    return st;\n}\n\nfloat GetSeepdTime(float time, float speed) {\n    return abs(fract(time*speed)-.5)*2.;\n}\n\nfloat N21(vec2 coords) {\n    return fract( sin(coords.x*100. + coords.y*6574.)*5647. );\n}\n\nfloat SmoothNoise(vec2 uv){\n    \n    vec2 lv  = fract(uv);\n    vec2 id  = floor(uv);\n    \n    lv = lv*lv*(3.-2.*lv);\n    \n    float bl = N21(id+vec2(0,0));\n    float br = N21(id+vec2(1,0));\n    float b  = mix(bl, br, lv.x);\n    \n    float tl = N21(id+vec2(0,1));\n    float tr = N21(id+vec2(1,1));\n    float t  = mix(tl, tr, lv.x);\n    \n    return mix(b, t, lv.y);\n}\n\nfloat SmoothNoise2(vec2 uv){\n    \n    float c = SmoothNoise(uv*4.);\n    c+= SmoothNoise(uv*8.) *.5;\n    c+= SmoothNoise(uv*16.)*.25;\n    c+= SmoothNoise(uv*32.)*.125;\n    c+= SmoothNoise(uv*64.)*.0625;\n    \n    return c/2.;\n}\n\nfloat Pupil(vec2 uv, float t, float br, float er, float bb, float eb) {\n\n    float r  = t*br + (1.-t)*er;\n    float b  = t*bb + (1.-t)*eb;\n    \n    return smoothstep(r - b, r, uv.y);\n}\n\nfloat Iris(vec2 uv, float r1, float r2, float p) {\n    uv.x = abs(uv.x - .5);\n\n    uv.x *= 4.*p+.4;\n    //uv.x += p;\n    \n    float iris = SmoothNoise2(uv*6.);\n    float c = smoothstep(r1, r1-0.015, uv.y);\n    \n    return iris * c * smoothstep(r2-0.1*(1.-p), r2, uv.y);\n}\n\nvec3 Eye(vec2 uv, float width) {\n    vec3 col = vec3(0.,0.,0.);\n    \n    uv = GetPolarCoord(uv);\n    uv.y *= 0.33;\n    \n    uv.x = fract(uv.x + 0.33);\n    float iris = Iris(uv, 0.17, 0.07, .04);\n    col = mix(col, vec3(0.2,0.5,1.0), iris);\n    \n    uv.x = fract(uv.x + 0.1);\n    iris = Iris(uv, 0.165, 0.16, .1);\n    col  = mix(col, vec3(0.2, 1.0,0.5), iris*.8);\n    \n    uv.x = fract(uv.x + 0.33);\n    iris = Iris(uv, 0.17, 0.01, .6);\n    col  = mix(col, vec3(0.7,0.7,0.7), iris*(1. - uv.y)*.3);\n    \n    float pupil = Pupil(uv, width, 0.01, 0.12, 0.005, 0.03);\n    col = mix(vec3(0.0,0.0,0.0), col, pupil);\n    \n    return col;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = GetCUV(fragCoord, iResolution.xy);\n    \n    \n    float t = GetSeepdTime(iTime,  0.1);\n    \n    vec3 col = Eye(uv, .5);\n    \n    uv = GetPolarCoord(uv);\n    //uv.y *= 1.5;\n    uv.x += (abs(t)-abs(uv.y*t))*0.5;\n    uv.x += iTime*.4;\n    \n    float count = 2.5;\n    float longS = .7;\n    float r     = .2;\n    float blur  = .2;\n    float m = abs(fract(uv.x*count) - .5);\n    float s = m * longS + .2 - uv.y;\n    float c = smoothstep(r-blur, r, s);\n    \n    col  *= mix(col, vec3(0.0, 1.0, 0.0), c*.5);\n    \n    \n    fragColor = vec4(vec3(col), 1.0);\n}","name":"Image","description":"","type":"image"}]}