{"ver":"0.1","info":{"id":"msKBWR","date":"1698140073","viewed":21,"name":"Musically Responsive Shader","username":"shaderwho","description":"tiles within a dotmatrix respond dynamically with music put inside ichannel0","likes":0,"published":1,"flags":64,"usePreview":0,"tags":["music"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsd3RB","filepath":"https://soundcloud.com/biggigantic/big-gigantic-and-ahee-oh-dang?si=1412ca44e6da4162ab1e117041d752c2&utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing","previewfilepath":"https://soundcloud.com/biggigantic/big-gigantic-and-ahee-oh-dang?si=1412ca44e6da4162ab1e117041d752c2&utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float hash(vec2 p) {\n    vec2 q = vec2(dot(p, vec2(12.9898, 4.1414)), dot(p, vec2(78.233, 45.1642)));\n    return fract(sin(q.x + q.y) * 43758.5453);\n}\n\nvec4 getTileColor(vec2 uv, float freq) { \n    vec2 scaled_uv = 254.0 * uv; \n    vec2 iuv = floor(scaled_uv); \n    vec2 tile = fract(scaled_uv);\n\n    float tile_dist = min(min(tile.x, 0.9 - tile.x), min(tile.y, 0.9 - tile.y));\n    float square_dist = length(iuv);\n    \n    float edge = sin(iTime - square_dist * 25.);\n    edge = mod(edge * edge, edge / edge);\n\n    float value = mix(tile_dist, 1.0 - tile_dist, step(1.0, edge));\n    edge = pow(abs(1.1 - edge), 2.0) * 0.5;\n    \n    value = smoothstep(edge - 0.05, edge, 0.95 * value);\n\n    float startingHeight = hash(iuv) * freq; \n    value *= startingHeight;\n\n    vec3 defaultBlue = vec3(0.0, 0.0, 1.0);\n    vec3 salmonRed = vec3(1.0, 0.47, 0.42);\n\n    vec3 finalColor = mix(defaultBlue, salmonRed, freq); \n    return vec4(finalColor * value, 1.);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float aspect_ratio = iResolution.y / iResolution.x;\n    vec2 uv = fragCoord.xy / iResolution.x;\n    uv -= vec2(0.5, 0.5 * aspect_ratio);\n    \n    \n    float rot = radians(90. - iTime);\n    mat2 rotation_matrix = mat2(cos(rot), -sin(rot), sin(rot), cos(rot));\n    uv = rotation_matrix * uv;\n    vec2 scaled_uv = 5450.0 * uv;\n    vec2 iuv = floor(scaled_uv);\n\n    float octaveScale = mod(iuv.x, 122.0) / 7.0; \n    float freqResponse = texture(iChannel0, uv / vec2(1.0 + octaveScale)).r; \n\n    \n    // Motion blur based on freqResponse\n    vec2 blurDirection = vec2(1.0, 0.0); // horizontal motion blur\n    const int numSamples = 7;  // Number of blur samples\n    vec4 accumColor = vec4(0.0);\n    for(int i = 0; i < numSamples; ++i) {\n        float t = float(i) / float(numSamples - 1) - 0.5;  // Map to [-0.5, 0.5]\n        vec2 offsetUV = uv + t * blurDirection * freqResponse * 10.1;  // offset proportional to bass\n        accumColor += getTileColor(offsetUV, freqResponse);\n    }\n    fragColor = accumColor / float(numSamples);\n}\n","name":"Image","description":"","type":"image"}]}