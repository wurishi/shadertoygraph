{"ver":"0.1","info":{"id":"ddsGRf","date":"1666596700","viewed":109,"name":"4 different quick edge filters","username":"boll","description":"Bottom Left & Bottom Right using dfdx & dfdy to find edges (but a bit pixelated).\nTop left quick sobel filter (with 2 texture fetches, copied from pronce: https://www.shadertoy.com/view/tt2cDW)\nTOp right, slower method with 4 texture fetches","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["sobel","filter","edge","quick"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float edgeFilterQuickest(vec3 color) {\n    return distance(dFdy(color),dFdx(color));// * length(color);\n}\nfloat edgeFilterQuickestA(sampler2D tex, vec2 uv) {\n    vec3 color = texture(tex, uv).rgb;\n    return distance(dFdy(color),dFdx(color));// * length(color);\n}\nfloat edgeFilterQuickestB(sampler2D tex, vec2 uv) {\n    vec3 color = texture(tex, uv).rgb;\n    return length(dFdy(color)+dFdx(color));// * length(color);\n}\nfloat edgeFilterQuick(sampler2D tex, vec2 uv) {\n    // https://www.shadertoy.com/view/tt2cDW\n    vec2 d = iResolution.xy;    // sampling constant\n    \n    // amplify the result by taking the resolution difference into account\n    float filterAmplification = length(iResolution.xy)  /  length(vec2(textureSize(tex, 0).xy));\n    \n    vec2 uv_e = floor(uv * d) / d;   \t   // reduced uv coordinates\n    vec3 col0 = texture(tex, uv).rgb;      // read the texture\n    vec3 col1 = texture(tex, uv_e).rgb;    // read the reduced version\n\n    return max(0.0, length(col1 - col0) * filterAmplification);\n}\nfloat edgeFilterSlower(sampler2D tex, vec2 uv) {\n\tvec4 n = texture(tex, uv+vec2(0,1)/iResolution.xy);\n    vec4 e = texture(tex, uv+vec2(1,0)/iResolution.xy);\n    vec4 s = texture(tex, uv+vec2(0,-1)/iResolution.xy);\n    vec4 w = texture(tex, uv+vec2(-1,0)/iResolution.xy);\n    \n    vec4 dy = (n - s)*.5;\n    vec4 dx = (e - w)*.5;\n    \n    vec4 edge = sqrt(dx*dx + dy*dy);\n    return edge.x;\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec2 uv = fragCoord / iResolution.xy;\n    float isEdge = 0.0;\n    \n    if(false){}\n    else if(uv.x < 0.5 && uv.y < 0.5) isEdge = edgeFilterQuickestA(iChannel0, uv); // Bottom Left\n    else if(uv.x > 0.5 && uv.y < 0.5) isEdge = edgeFilterQuickestB(iChannel0, uv); // Bottom Right\n    else if(uv.x < 0.5 && uv.y > 0.5) isEdge = edgeFilterQuick(iChannel0, uv);     // Top Left\n    else if(uv.x > 0.5 && uv.y > 0.5) isEdge = edgeFilterSlower(iChannel0, uv);    // Top Right\n    \n    // Borders\n    fragColor = vec4(1,1,1,1) * isEdge;\n    fragColor += clamp(pow(cos(uv.x-0.5), 99999.0), 0., 1.);\n    fragColor += clamp(pow(cos(uv.y-0.5), 99999.0), 0., 1.);\n}","name":"Image","description":"","type":"image"}]}