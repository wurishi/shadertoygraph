{"ver":"0.1","info":{"id":"WsB3RR","date":"1547883232","viewed":106,"name":"Practice : Spatial Loop","username":"hawky_shadie","description":"To set spatial loop. when the ball reach to an edge, it jumps to another edge.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["practice","training"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n球体が右から左へ移動するループ\n*/\n\n/* 円(球体)を書く関数\n   vec2 uv: 円の原点。 \n   vec2 r : 円の半径。\n*/\nvec3 ball(vec2 uv,float r) {\n  vec3 col=vec3(0.);  // 変数の宣言＆初期化\n  float d = length(uv); // ベクトルの大きさ。 d<rなら色を塗る\n  const vec3 p_color = vec3(.54,.2,.85); // 塗りつぶしの色\n\n  /* d<rの点に色を塗る。原点から遠いほど色が薄くなる。 */\n  col += step(d,r)*(1.-d/r)*p_color;\n  /* ↓こちら↓はグラデーションなしで塗る場合の式。 */\n  //col += step(d,r)*p_color;\n  return col;\n}\n\n\nvec2 loop (vec2 uv, float speed, vec2 o1, vec2 ratio, float asp) {\n  /* 座標を時刻に従って移動させる関数。画面端に到達したらループさせる。\n  * artuments \n    - uv    : 座標\n    - speed : 移動速度を調整する係数\n    - o1    : 位置のオフセット。\n    - ratio : マージン係数。ループ幅をキャンバスサイズの何倍にするか？の倍率\n    - asp   : アスペクト比\n  */\n  // 時刻 iTime に従って座標の移動量を計算する。\n  vec2 t = vec2 (  \n          (fract(iTime*speed))*asp*ratio.x, \n\t      (fract(iTime*speed))*ratio.y\n          ); \n  // 上記の画面が\n  // a. 物体が完全に画面外へ消えるよう、座標の移動幅を画面より広くする\n  // b. \n  vec2 p = vec2(uv.x, uv.y)  + t + o1 ; \n  \n  return p;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  // 座標系の定義。画面中央を(0,0)の原点とする。\n  // x = [-asp*0.5, asp*0.5], y= [-0.5, 0.5]\n  vec2 uv = fragCoord.xy / iResolution.xy ;\n  uv -= .5;\n  float asp = iResolution.x/iResolution.y;\n  uv.x *= asp; // x座標はアスペクト比をかける\n\n  float speed = 0.1; // 移動速度\n  vec2 o1 = vec2(-0.5*asp,-0.5);  // 原点を合わせるためのオフセット\n  vec2 ratio = vec2(1.1,1.1); // ループ幅のマージン係数\n\n  vec2 p = loop(uv, speed, o1, ratio, asp); //座標を移動する関数\n  vec3 col = ball(p, 0.1) ; // 球体を描く。中心は時間に従って移動する\n  fragColor = vec4(col, 1.) ;\n}\n\n","name":"Image","description":"","type":"image"}]}