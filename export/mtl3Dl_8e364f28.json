{"ver":"0.1","info":{"id":"mtl3Dl","date":"1672729480","viewed":148,"name":"Snowy Day","username":"kaffelon","description":"Wanted to do a falling snow shader.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["snowflake","snow","winter"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float rnd(float x)\n{\n    return fract(sin(dot(vec2(x+47.49,38.2467/(x+2.3)), vec2(12.9898, 78.233)))* (43758.5453));\n}\n\nfloat draw_circle(vec2 uv, vec2 cell, int depth)\n{\n    float size = length(.03 +sin(cell) * .02);\n    return smoothstep(.02, .04*pow(1.2,float(depth)), size-length((uv - .7)));\n\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col;\n    vec2 pixel = fragCoord/iResolution.xy;\n    vec2 uv;\n    for(int i = 0; i < 5; i++)\n    {\n\n        uv = fract(2.0*pow(1.5,float(i+1))*fragCoord/iResolution.y);\n        vec2 motion = vec2(.6*cos(iTime  + float(i)),.6*sin(iTime)+(iTime * 3.5)) + uv;    \n        vec2 pixel_move = (2.0*pow(1.5,float(i+1))*fragCoord/iResolution.y) + vec2(.6*cos(iTime  + float(i)),.6*sin(iTime)+(iTime * 3.5));\n        vec2 cell = floor(pixel_move);\n        uv = fract(motion);\n        if (rnd(cell.x*cell.y) > .5)\n        {\n            col = col + vec3(draw_circle(uv+.5*sin(rnd(cell.x*cell.y)), cell, i+1)) * ((pixel.x+pixel.y) * 1.0); \n\n        }\n\n    }\n    uv = fragCoord/iResolution.xy;\n    vec3 background = ((vec3(.23,.23,.28) * uv.x + .1)+ smoothstep(.8+ sin(uv.x * 2.)*.1, .82 + sin(uv.x*2.)* .1, 1.0-uv.y));\n    col = clamp(col + background,0.,1.);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}