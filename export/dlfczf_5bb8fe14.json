{"ver":"0.1","info":{"id":"dlfczf","date":"1691010642","viewed":78,"name":"\"terrain\" sdf visualization","username":"dokso","description":"I did this to get a better understanding of why rays pass through terrain in my other project, and cause artifacts.\nYou can also see that the sdf is actually not accurate, but rather only depicting the distance to the ground underneath the sample point.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","terrain","sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_RAYS 10\n#define MAX_DIST 5.0\n\nfloat N(float uv) {\n    return fract(sin(uv + 5.0) * 39352.212);\n}\nfloat noise(float uv) {\n    float s = uv;\n    float frac = fract(s);\n    float id = floor(s);\n    \n    float l = N(id);\n    float r = N(id + 1.0);\n    float m = mix(l, r, frac);\n    \n    return m;\n}\nfloat fbnoise(float uv) {\n    float n = noise(uv * 4.0);\n    n += noise(uv * 8.0) * 0.5;\n    n += noise(uv * 16.0) * 0.25;\n    n += noise(uv * 32.0) * 0.125;\n    \n    n /= 1.875;\n    \n    return n;\n}\n\nfloat line(vec2 uv, vec2 a, vec2 b) {\n    vec2 pa = uv - a;\n    vec2 ba = b - a;\n    float p = dot(pa, ba) / dot(ba, ba);\n    return length(uv - ba * min(max(p, 0.0), 1.0));\n}\nfloat map(vec2 uv) {\n    return uv.y - 0.8 + fbnoise(uv.x * 0.5 + iTime * 0.05) * 2.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n    vec2 mouseP = (2.0 * iMouse.xy - iResolution.xy) / iResolution.y;\n\n    float d = map(uv);\n    \n    vec3 col = mix(mix(vec3(0.8, 0.6, 0.2), vec3(0.2, 0.6, 0.8), step(0.0, d)), vec3(0.8), sin(d * 100.0 + iTime * 4.0 * sign(-d)) * 0.3 + 0.3);\n    col -= smoothstep(0.01, 0.0, abs(d));\n    \n    vec2 origin = vec2(0.0);\n    vec2 dir = normalize(mouseP - origin);\n    \n    float t = 0.0;\n    for (int i = 0; i < MAX_RAYS && t < MAX_DIST; i++) {\n        vec2 p = origin + dir * t;\n        float dist = map(p);\n        col = mix(col, vec3(1.0, 0.0, 0.0), step(abs(length(uv - p) - dist) - 0.005, 0.0));\n        if (dist < 0.0001) break;\n        t += dist; // * 0.6;\n        // by multiplying dist by some fraction here, you-\n        // can decrease the potential of overshoothing\n    }\n    col = mix(col, vec3(0.0), step(line(uv, origin, origin + dir * t) - 0.005, 0.0));\n\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}