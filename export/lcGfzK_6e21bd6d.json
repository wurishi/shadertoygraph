{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"\n\n\n// https://gam0022.net/blog/2019/06/25/unity-raymarching/\n#define ITERATIONS 5\n#define time iTime\n#define resolution iResolution.xy\n\n\n\n\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nfloat permute(float x){return floor(mod(((x*34.0)+1.0)*x, 289.0));}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\nfloat taylorInvSqrt(float r){return 1.79284291400159 - 0.85373472095314 * r;}\n#define time iTime\n#define resolution iResolution.xy\nvec4 grad4(float j, vec4 ip){\n  const vec4 ones = vec4(1.0, 1.0, 1.0, -1.0);\n  vec4 p,s;\n\n  p.xyz = floor( fract (vec3(j) * ip.xyz) * 7.0) * ip.z - 1.0;\n  p.w = 1.5 - dot(abs(p.xyz), ones.xyz);\n  s = vec4(lessThan(p, vec4(0.0)));\n  p.xyz = p.xyz + (s.xyz*2.0 - 1.0) * s.www; \n\n  return p;\n}\n\nfloat snoise(vec4 v){\n  const vec2  C = vec2( 0.138196601125010504,  // (5 - sqrt(5))/20  G4\n                        0.309016994374947451); // (sqrt(5) - 1)/4   F4\n// First corner\n  vec4 i  = floor(v + dot(v, C.yyyy) );\n  vec4 x0 = v -   i + dot(i, C.xxxx);\n\n// Other corners\n\n// Rank sorting originally contributed by Bill Licea-Kane, AMD (formerly ATI)\n  vec4 i0;\n\n  vec3 isX = step( x0.yzw, x0.xxx );\n  vec3 isYZ = step( x0.zww, x0.yyz );\n//  i0.x = dot( isX, vec3( 1.0 ) );\n  i0.x = isX.x + isX.y + isX.z;\n  i0.yzw = 1.0 - isX;\n\n//  i0.y += dot( isYZ.xy, vec2( 1.0 ) );\n  i0.y += isYZ.x + isYZ.y;\n  i0.zw += 1.0 - isYZ.xy;\n\n  i0.z += isYZ.z;\n  i0.w += 1.0 - isYZ.z;\n\n  // i0 now contains the unique values 0,1,2,3 in each channel\n  vec4 i3 = clamp( i0, 0.0, 1.0 );\n  vec4 i2 = clamp( i0-1.0, 0.0, 1.0 );\n  vec4 i1 = clamp( i0-2.0, 0.0, 1.0 );\n\n  //  x0 = x0 - 0.0 + 0.0 * C \n  vec4 x1 = x0 - i1 + 1.0 * C.xxxx;\n  vec4 x2 = x0 - i2 + 2.0 * C.xxxx;\n  vec4 x3 = x0 - i3 + 3.0 * C.xxxx;\n  vec4 x4 = x0 - 1.0 + 4.0 * C.xxxx;\n\n// Permutations\n  i = mod(i, 289.0); \n  float j0 = permute( permute( permute( permute(i.w) + i.z) + i.y) + i.x);\n  vec4 j1 = permute( permute( permute( permute (\n             i.w + vec4(i1.w, i2.w, i3.w, 1.0 ))\n           + i.z + vec4(i1.z, i2.z, i3.z, 1.0 ))\n           + i.y + vec4(i1.y, i2.y, i3.y, 1.0 ))\n           + i.x + vec4(i1.x, i2.x, i3.x, 1.0 ));\n// Gradients\n// ( 7*7*6 points uniformly over a cube, mapped onto a 4-octahedron.)\n// 7*7*6 = 294, which is close to the ring size 17*17 = 289.\n\n  vec4 ip = vec4(1.0/294.0, 1.0/49.0, 1.0/7.0, 0.0) ;\n\n  vec4 p0 = grad4(j0,   ip);\n  vec4 p1 = grad4(j1.x, ip);\n  vec4 p2 = grad4(j1.y, ip);\n  vec4 p3 = grad4(j1.z, ip);\n  vec4 p4 = grad4(j1.w, ip);\n\n// Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n  p4 *= taylorInvSqrt(dot(p4,p4));\n\n// Mix contributions from the five corners\n  vec3 m0 = max(0.6 - vec3(dot(x0,x0), dot(x1,x1), dot(x2,x2)), 0.0);\n  vec2 m1 = max(0.6 - vec2(dot(x3,x3), dot(x4,x4)            ), 0.0);\n  m0 = m0 * m0;\n  m1 = m1 * m1;\n  return 49.0 * ( dot(m0*m0, vec3( dot( p0, x0 ), dot( p1, x1 ), dot( p2, x2 )))\n               + dot(m1*m1, vec2( dot( p3, x3 ), dot( p4, x4 ) ) ) ) ;\n\n}\n\n#define NUM_OCTAVES 5\n\nfloat fbm(vec4 x) {\n\tfloat v = 0.0;\n\tfloat a = 0.5;\n\tvec4 shift = vec4(100);\n\tfor (int i = 0; i < NUM_OCTAVES; ++i) {\n\t\tv += a * snoise(x);\n\t\tx = x * 2.0 + shift;\n\t\ta *= 0.5;\n\t}\n\treturn v;\n}\n\nfloat deMengerSponge2(vec3 p, vec3 offset, float scale) {\n    vec4 z = vec4(p, 1.0);\n  \n  vec2 r = resolution,o = gl_FragCoord.xy - r / 2.00;\n\t\n    o = vec2(max(abs(o.x) * 0.8996 + o.y * 0.5, -o.y) * 2.0 / r.y - 0.25, atan(o.y,o.x));    \n    vec4 s = (sin(time) * .03 + 0.07) * sin(1.5 * vec4(sin(time)*4.1,32,33,14) + 42.0 * time / 90.0 + o.y + (time) * 1.75),\n    \n    e = s.yzwx, \n    f = max(o.x - s-0.1, e-o.x);\n    \n    \n   vec4 g = dot(clamp(f*r.y,0.,1.), 82.*(s-e)) * (s-.1)*1.5 ;\n    for (int i = 0; i < ITERATIONS; i++) {\n  \n        z = abs(z);\n       \n        if (z.x < z.y) z.xy = z.yx;\n        if (z.x < z.z) z.xz = z.zx;\n        if (z.y < z.z) z.yz = z.zy;\n           \n        z *= scale*1.210;\n        z.xyz -= offset * (scale - 1.0)+g.xyz;\n        z.zx*=mat2(0.5*cos(iTime),0.5*sin(iTime),0.5*-sin(iTime), 0.5*cos(iTime));\n        if (z.z < -0.5 * offset.z * (scale - 1.0))\n            z.z += offset.z * (scale - 1.0);\n    }\n    return (length(max(abs(z.xyz) - vec3(1.0, 1.0, 1.0), 0.0))) / z.w;\n}\n\nfloat de(vec3 p) {\n    return deMengerSponge2(p, vec3(1.0), 3.0);\n}\n\nvec3 calcNormal(vec3 p) {\n    float d = 0.001;\n    return normalize(vec3(\n        de(p + vec3(d, 0.0, 0.0)) - de(p - vec3(d, 0.0, 0.0)),\n        de(p + vec3(0.0, d, 0.0)) - de(p - vec3(0.0, d, 0.0)),\n        de(p + vec3(0.0, 0.0, d)) - de(p - vec3(0.0, 0.0, d))\n    ));\n}\n\n#define OCCLUSION_ITERATIONS 5\nfloat ambientOcclusion(vec3 pos, vec3 nor) {\n    float ao = 0.0;\n    float amp = 0.5;\n    float step = 0.02;\n    for (int i = 1; i < OCCLUSION_ITERATIONS; i++) {\n        vec3 p = pos + step * float(i) * nor;\n        float d = de(p);\n        ao += amp * ((step * float(i) - d) / (step * float(i)));\n        amp *= 0.5;\n    }\n    return 1.0 - ao;\n}\n\nconst vec3 LIGHT_DIR = normalize(vec3(0.5, 0.8, 1.0));\nconst vec3 DIFFUSE_COLOR = vec3(0.8);\nconst vec3 AMBIENT_COLOR = vec3(0.2);\nvec3 shadeSurface(vec3 pos, vec3 nor) {\n    float dotNL = max(0.0, dot(nor, LIGHT_DIR));\n    vec3 dif = DIFFUSE_COLOR * dotNL;\n    float ao = ambientOcclusion(pos, nor);\n    vec3 amb = AMBIENT_COLOR * vec3(ao);\n    return dif + amb;\n}\n\nbool raymarch(vec3 ro, vec3 rd, out float t) {\n    vec3 p = ro;\n    t = 0.0;\n    for (int i = 0; i < 128; i++) {\n        float d = de(p);\n        p += d * rd;\n        \n        t += d;\n        if (d < 0.002) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvec3 background(vec2 st) {\n    return mix(vec3(0.5), vec3(0.1), length(st) * 0.8);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 st = (2.0 * gl_FragCoord.xy - resolution) / min(resolution.x, resolution.y);\nvec2 uv = (gl_FragCoord.xy*2.-resolution.xy)/min(resolution.x,resolution.y)*4.0; \n\n\t \n\n\tvec2 uv0=uv;\n\tfloat i0=2.8;\n\tfloat i1=2.95;\n\tfloat i2=2.5;\n\tvec2 i4=vec2(0.0,0.0);\n\t\n\tfor(int s=0;s<12;s++)  // iterations\n\t{\n\t\tvec2 r;\n\t\tr =  vec2(cos(uv.y*i0-i4.y+time/i1),sin(uv.x*i0+i4.x+time/i1))/i2;\n\t\t//r += vec2(r.y,r.x)*2.0;\n\t\tuv.xy += r*0.20 ;\n        \n\t\ti0*=1.85;\n\t\ti1*=1.05;\n\t\ti2*=1.4;\n\t\t//i4+=r.xy*1.0+0.5*time*i1-sin(0.05*time);\n\t}\n\tfloat r=sin(uv.x-time)*0.5+0.5;\n\tfloat b=sin(uv.y+time)*0.5+0.5;\n\tfloat g=sin((sqrt(uv.x*uv.x+uv.y*uv.y)+time))*0.5+0.5;\n\t\n\tfloat rr = 3.4  ;\n\t\n\t\n\t\n\tvec3 c=vec3(r,g,b);\n\t\n\tfloat a = fbm(vec4(time*0.02, 1.0, 1.0, 1.0) + vec4(0.2 * uv0 * 10.0, 1.0, time * 0.06));\n\t\n\t     c  -= smoothstep( rr, rr+0.15, length( uv) );\n\t\n\t     c  *= smoothstep( rr, rr+0.2, length( uv0)  )+a ;\n\t\n    vec3 ro = vec3(2.0, 2.0, 2.0);\n    vec3 ta = vec3(0.0);\n    vec3 z = normalize(ta - ro);\n    vec3 up = vec3(0.0, 1.0, 0.0);\n    vec3 x = normalize(cross(z, up));\n    vec3 y = normalize(cross(x, z));\n    vec3 rd = normalize(x * st.x + y * st.y + z * 1.5);\n\n    vec3 c2; \n    float t;\n    if (raymarch(ro, rd, t)) {\n        vec3 pos = ro + t * rd;\n        vec3 nor = calcNormal(pos);\n        c2 = shadeSurface(pos, nor);\n    } else {\n        c2 = background((2.0 * gl_FragCoord.xy - resolution) / resolution);\n    }\n\n    fragColor = vec4(pow(c2+c, vec3(1.0 / 2.2)), 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"lcGfzK","date":"1734189456","viewed":84,"name":"fractalic combination","username":"nayk","description":"source https://www.shadertoy.com/new https://glslsandbox.com/e#55916.0 https://glslsandbox.com/e#55916.0","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["fractal","color"],"hasliked":0,"parentid":"","parentname":""}}