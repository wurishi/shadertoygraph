{"ver":"0.1","info":{"id":"7lG3Rd","date":"1638178948","viewed":206,"name":"Nextline Sobel Edge","username":"nextline","description":"Sobel Edge","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["nextline"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat sobelLookup(vec2 uv, vec2 offset)\n{\n    vec3 col = texture(iChannel0, uv + offset).xyz;\n    \n    float lum = dot(col, vec3(0.299f, 0.587f, 0.114f));\n    return lum;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec2 stepSize = 1.0 / iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = texture(iChannel0, uv).xyz;\n    \n    \n    //finding contrast in X-direction\n    float xtl = sobelLookup(uv, vec2(-stepSize.x, stepSize.y)) * -1.0;\n    float xtr = sobelLookup(uv, vec2(stepSize.x, stepSize.y));\n    \n    float xml = sobelLookup(uv, vec2(-stepSize.x, 0.0)) * -2.0;\n    float xmr = sobelLookup(uv, vec2(stepSize.x, 0.0)) * 2.0;\n    \n    float xbl = sobelLookup(uv, vec2(-stepSize.x, -stepSize.y)) * -1.0;\n    float xbr = sobelLookup(uv, vec2(stepSize.x, -stepSize.y));\n    \n    float xsum = xtl + xtr + xml + xmr + xbl + xbr;\n    \n    \n    \n    float ytl = sobelLookup(uv, vec2(-stepSize.x, stepSize.y)) * -1.0;\n    float ytc = sobelLookup(uv, vec2(0.0, stepSize.y)) * -2.0;\n    float ytr = sobelLookup(uv, vec2(stepSize.x, stepSize.y)) * -1.0;\n    \n    float ybl = sobelLookup(uv, vec2(-stepSize.x, -stepSize.y));\n    float ybc = sobelLookup(uv, vec2(0.0, -stepSize.y)) * 2.0;\n    float ybr = sobelLookup(uv, vec2(stepSize.x, -stepSize.y));\n    \n    float ysum = ytl + ytc +ytr + ybl +ybc + ybr; \n\n    //the max values need to change for diffrent videos. \n    float mag = max(0.0, sqrt(xsum * xsum + ysum * ysum)-0.0);\n    \n    // Output to screen\n    fragColor = vec4(vec3(mag),1.0);\n}","name":"Image","description":"","type":"image"}]}