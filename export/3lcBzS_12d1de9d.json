{"ver":"0.1","info":{"id":"3lcBzS","date":"1612918032","viewed":257,"name":"Fork Simple 2d  cwook 515","username":"cwook","description":"An attempt to change it to an additive approach.\n\nA very basic implementation of 2d shadows (move mouse to reposition light-source).\n\n","likes":3,"published":3,"flags":0,"usePreview":0,"tags":["2d","raycast","shadow"],"hasliked":0,"parentid":"tddXzj","parentname":"Simple 2d Ray-Cast Shadow"},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define N 250.0\n\n#define USE_BLUE_NOISE\n\n// these offset define how the \"jitter\" works for the shadows\nconst vec2 scatter[] = vec2[6]\n(\n    vec2( 0.01, -0.01),\n    vec2( 0.02,  0.01),\n    vec2(-0.01, -0.02),\n    vec2(-0.02,  0.01),\n    vec2( 0.01,  0.02),\n    vec2(-0.02, -0.01)\n);\n\nfloat terrain(vec2 p)\n{\n    return step(0.25, texture(iChannel0, 0.0625 + p / 2.0).x); // hard shadows\n    //return mix(0.9, 1.0, step(0.25, texture(iChannel0, 0.0625 + p / 2.0).x)); // smooth shadows\n}\n\nfloat doLight(vec2 p, vec2 l)\n{\n\n    float h = 1.0;\n    vec2 d = p - l;\n    for(float i = 0.0; i < N; i++)\n    {\n        float t = i / N;\n        \n        for (int j = 0; j < 3; j++)\n        {\n        #ifdef USE_BLUE_NOISE\n            vec2 n = (texture(iChannel3, vec2(float(j) / N, 0.0f)).rg - 0.5f) * 0.1f;\n        #else\n            vec2 n = 0.3f * scatter[j];\n        #endif\n            h *= mix(1.0, terrain(mix(p, l + n, t)), length(n) * 1.f);// float(j) / N);\n        }\n    }\n    h *= 1.0 - smoothstep(0.0, 0.5, length(d));\n    return h;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord/iResolution.xy;\n\n    float b = 0.0;\n    float h = 1.0;\n    \n    vec2 l = iFrame <= 0 ? vec2(0.5, 0.5) : iMouse.xy/iResolution.xy;\n    b += doLight(p, l);\n    \n    vec2 l2 = vec2(0.2, (sin(iTime) + 1.0) * 0.5);\n    b += doLight(p, l2);\n    \n    //b = clamp(b, 0.0, 1.0);\n    \n    //b *= 0.2 / length(d);\n    //b *= 1.0 - smoothstep(0.0, 0.5, length(d));\n    //fragColor = b * texture(iChannel1, p * 4.0);\n    fragColor = mix(texture(iChannel2, p * 4.0) * 0.125, texture(iChannel1, p * 4.0), b);\n}\n","name":"Image","description":"","type":"image"}]}