{"ver":"0.1","info":{"id":"dtS3W1","date":"1673223133","viewed":98,"name":"ArrJeeBee Eyes 2","username":"blurryroots","description":"Color and such.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d","simple","color","rgb","weird"],"hasliked":0,"parentid":"dlSGW1","parentname":"ArrJeeBee Eyes"},"renderpass":[{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Shadertoy Educational License\n// You cannot host, display, distribute or share this Work in any form,\n// including physical and digital. You cannot use this Work in any\n// commercial or non-commercial product, website or project. You cannot\n// sell this Work and you cannot mint an NFTs of it.\n// I share this Work for educational purposes, and you can link to it,\n// through an URL, proper attribution and unmodified screenshot, as part\n// of your educational material. If these conditions are too restrictive\n// please contact me and we'll definitely work it out.\n// You are free however, to incorporate this work within the Shadertoy\n// ecosystem, e.g. by forking.\n// This work may incorporate other permissivly shared, educational work,\n// which is attributed appropriatly. Please do so as well.\n// Thanks to https://www.shadertoy.com/user/iq for inspiring this license.\n\n#define WITH_TEXTURE 1\n#define WITH_INVERT 1\n#define WITH_BOUNCE 1\n#define WITH_BREATH 0\n\n#define R iResolution\nconst float pi = 355. / 113.;\n\nfloat sdf_circle (vec2 uv, vec2 p, float r, float k) {\n    float si = r / length (uv - p);\n    float sm = (k * R.x) / R.y;\n    float s = smoothstep (sm, 0., 1. - si);\n    return s;\n}\n\nfloat psin (float t) {\n    return 0.5 * (1. + sin (pi * t - pi/2.));\n}\n\nvec3 thing (vec2 uv, float d, float size, vec2 v, vec2 p, float k) {\n    vec3 c = vec3 (0.);\n    c += vec3 (1., 0., 0.)\n        * sdf_circle (uv, d * size * v * vec2 (-0.5, -0.5) + p, size, k)\n        ;\n    c += vec3 (0., 1., 0.)\n        * sdf_circle (uv, d * size * v * vec2 (+0.0, +0.5) + p, size, k)\n        ;\n    c += vec3 (0., 0., 1.)\n        * sdf_circle (uv, d * size * v * vec2 (+0.5, -0.5) + p, size, k)\n        ;\n    return c;  \n}\n\nvoid\nmainImage (out vec4 C, in vec2 F) {\n    vec2 U = F / R.xy;\n    vec2 Un = (F - 0.5*R.xy) / max (R.x, R.y);\n    float r = R.x / R.y;    \n    float t = mod (iTime, 2.*pi);\n    \n    #if WITH_BREATH\n    float p = 0.2;\n    float d = p + (1.-p) * psin (t / pi);\n    #else\n    float d = 1.;\n    #endif\n    \n    #if WITH_BOUNCE\n    float tt = 0.\n        // + mod (iTime, 2.*pi)\n        + (1.5 + 0.05*psin (iTime)) * pi\n        ;\n    vec2 v = vec2 (sin (tt), cos (tt));\n    #else\n    vec2 v = vec2 (1.);\n    #endif\n\n    float k = 0.3; //0.001 + 0.599*psin (iTime / (0.5 * pi));\n    float size = 0.065;\n    float off = 0.13;// + 0.01 * psin (iTime / (0.5 * pi));\n    float pv = d * size;\n    vec3 cl = thing (Un, d, size, v, vec2 (-off, 0.0), k);\n    v.x *= -1.;\n    vec3 cr = thing (Un, d, size, v, vec2 (+off, 0.0), k);\n    vec3 c = cl + cr;\n\n    float circle_mask = clamp (c.r+c.b+c.g, 0., 1.);\n    #if WITH_INVERT\n    //if ((0.5*pi) < mod (t, 1.5*pi)) {\n        c = circle_mask * (1. - c);\n    //}\n    #endif\n    \n    #if WITH_TEXTURE\n    vec3 tx = texture (iChannel0, 3. * U).rgb;\n    //c *= tx;\n    c = c * mix (c, tx, 0.5);\n    //c = clamp (min (c, tx), vec3 (0.0), vec3 (1.));\n    //c = pow (tx, c);\n    #endif\n\n    c = circle_mask * pow (c, vec3 (1.5));\n    C = vec4 (c, 1.);\n}","name":"Image","description":"","type":"image"}]}