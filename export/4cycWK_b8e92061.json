{"ver":"0.1","info":{"id":"4cycWK","date":"1732361901","viewed":30,"name":"Some s****y shampoo broken vhs","username":"thatsience","description":"Broken vhs effect, more like a tape","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["shiniereasiertomanagetoo"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#ifdef GL_ES\nprecision mediump float;\n#endif\n\n// Parameters for the VHS effect\nconst float noiseAmount = 0.2;     // Strength of noise effect\nconst float lineFrequency = 0.1;   // Frequency of horizontal lines\nconst float lineThickness = 0.005; // Thickness of the broken horizontal lines\nconst float glitchAmount = 0.1;    // Amount of color glitches\n\n// Function to add noise to the video\nvec3 applyNoise(vec2 uv) {\n    // Generate pseudo-random noise based on UV coordinates\n    float noise = fract(sin(dot(uv.xy, vec2(12.9898, 78.233))) * 43758.5453);\n    return vec3(noise * noiseAmount); // Multiply noise strength\n}\n\n// Function to create horizontal lines (tape damage)\nvec3 applyLines(vec2 uv) {\n    // Create a periodic horizontal line pattern across the screen\n    float line = step(abs(fract(uv.y * 20.0) - 0.5), lineThickness);\n    return vec3(line * 0.2); // Lines with a slight dark color\n}\n\n// Function to apply color glitch (RGB channel distortions)\nvec3 applyGlitches(vec2 uv, vec3 color) {\n    // Apply random glitches to each RGB channel using different phase offsets\n    float glitch = fract(sin(dot(uv.xy, vec2(12.9898, 78.233))) * 43758.5453);\n    color.r += glitch * glitchAmount;  // Red glitch\n    color.g += (1.0 - glitch) * glitchAmount;  // Green glitch\n    color.b += (sin(uv.y * 100.0) * glitchAmount);  // Blue glitch\n    return color;\n}\n\n// Main rendering function\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalize pixel coordinates from 0 to 1\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    // Ensure proper aspect ratio correction\n    uv.x *= iResolution.x / iResolution.y;\n\n    // Fetch the video texture from iChannel0 (Luster Cream Ad)\n    vec3 color = texture(iChannel0, uv).rgb;\n\n    // Apply noise to simulate VHS signal distortion\n    color += applyNoise(uv);\n\n    // Apply horizontal lines to simulate tape damage\n    color += applyLines(uv);\n\n    // Apply color glitch to simulate color misalignment and artifacts\n    color = applyGlitches(uv, color);\n\n    // Final color output\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}