{"ver":"0.1","info":{"id":"fdfXWB","date":"1619117582","viewed":92,"name":"Fork Fork CineS loolo78 550","username":"loolo78","description":"Hack to turn this 2D to match the apple trailer https://youtu.be/kt6Wne1szrg?t=42\n\n\nSimple ray marching template. View this shader at [url]https://cineshader.com/view/3sySRK[/url]","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["cineshader"],"hasliked":0,"parentid":"NsfSDS","parentname":"Fork CineShader loolo78 360"},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float opSmoothUnion( float d1, float d2, float k )\n{\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h);\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n} \n\nfloat map(vec3 p)\n{\n\tfloat d = 2.0;\n\tfor (int i = 0; i < 6; i++) {\n\t\tfloat fi = float(i);\n\t\tfloat time = iTime * (fract(fi * 412.531 + 0.513) - 0.5) * 2.0;\n\t\td = opSmoothUnion(\n            sdSphere(p + sin(time + fi * vec3(52.5126, 64.62744, 632.25)) * vec3(5.0, 5.0, 0.8), mix(0.5, 1.0, fract(fi * 412.531 + 0.5124))),\n\t\t\td,\n\t\t\t0.6 // blend factor\n\t\t);\n\t}\n\treturn d;\n}\n\nvec3 calcNormal( in vec3 p )\n{\n    \n    const float h = 1e-5; // or some other value\n    const vec2 k = vec2(1,-1);\n    return normalize( k.xyy*map( p + k.xyy*h ) + \n                      k.yyx*map( p + k.yyx*h ) + \n                      k.yxy*map( p + k.yxy*h ) + \n                      k.xxx*map( p + k.xxx*h ) );\n}\n\n//thanks to Fabrice Neyret for algorhitm https://www.shadertoy.com/view/llySRh\n//and thanks to otaviogood for font texture\n#define C(c) U.x-=.5; O+= char(U,64+c)\n\nvec4 char(vec2 p, int c) \n{\n    if (p.x<.0|| p.x>1. || p.y<0.|| p.y>1.) return vec4(0,0,0,1e5);\n\treturn textureGrad( iChannel0, p/16. + fract( vec2(c, 15-c/16) / 16. ), dFdx(p/16.),dFdy(p/16.) );\n}\n\n\n//line 12 -> x,y coordinates of text, counted from left down corner\n//line 13 -> higher value = greater font size\n//line 15 -> Every argument is another char\n#define C(c) U.x-=.5; O+= char(U,64+c)\nvec4 renderApple(vec4 O, in vec2 uv)\n{\n\n    O = vec4(0.0);\n    uv /= iResolution.y;\n    vec2 position = vec2(.5, .415);\n    float FontSize = 12.;\n    vec2 U = ( uv - position)*64.0/FontSize;\n    C(1);C(48);C(48);C(44);C(37);\n    O = O.xxxx;\n    return step(0.5,O) * 0.90 + vec4(0.08);\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // screen size is 6m x 6m\n\tvec3 rayOri = vec3((uv - 0.5) * vec2(iResolution.x/iResolution.y, 1.0) * 12.0, 3.0);\n\tvec3 rayDir = vec3(0.0, 0.0, -1.0);\n\t\n\tfloat depth = 0.0;\n\tvec3 p;\n\t\n\tfor(int i = 0; i < 64; i++) {\n\t\tp = rayOri + rayDir * depth;\n\t\tfloat dist = map(p);\n        depth += dist;\n\t\tif (dist < 1e-6) {\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n    depth = min(6.0, depth);\n    depth = step(6.0, depth);\n\tvec3 n = vec3(0,0,1);\n    float b = max(0.0, dot(n, vec3(0.577)));\n    vec3 col = vec3((0.5 + 0.5 * cos(2.0 + vec3(5))));\n    col *= exp( -depth * 100.0 );\n    col = 1.0 - col;\n\t\n    // maximum thickness is 2m in alpha channel\n    fragColor = vec4(col + vec3(0.07), 1.0 - (depth - 0.5) / 2.0);\n    \n    fragColor -= renderApple(fragColor, fragCoord);\n}\n\n\n\n/** SHADERDATA\n{\n\t\"title\": \"My Shader 0\",\n\t\"description\": \"Lorem ipsum dolor\",\n\t\"model\": \"person\"\n}\n*/","name":"Image","description":"","type":"image"}]}