{"ver":"0.1","info":{"id":"tdSfWy","date":"1590841256","viewed":145,"name":"Perlin Warp","username":"alint","description":"Simple perlin effect with gradient warp","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["noise","perlin","gradient","warp"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SHOW_GRADIENT 0\n\nvec4 permute(const in vec4 x) \n{ \n    return mod(((x * 34.0) + 1.0) * x * 1.0, 289.0); \n}\nvec2 smootherStep(const in vec2 x) \n{ \n    vec2 x2 = x * x;\n    return x2 * x * (x * (x * 6.0 - 15.0) + 10.0); \n}\n\nfloat noise(const in vec2 pos, vec2 scale)\n{\n    // classic Perlin noise based on Stefan Gustavson\n    vec2 p = pos * scale;\n    vec4 i = mod(floor(p.xyxy) + vec4(0.0, 0.0, 1.0, 1.0), scale.xyxy);\n    vec4 f = fract(p.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);\n    i = mod(i, 289.0); // avoid truncation effects in permutation\n\n    vec4 ix = i.xzxz;\n    vec4 iy = i.yyww;\n    vec4 fx = f.xzxz;\n    vec4 fy = f.yyww;\n    \n    vec4 ixy = permute(permute(ix) + iy);\n    vec4 gx = 2.0 * fract(ixy * 0.0243902439) - 1.0; // 1/41 = 0.024...\n    vec4 gy = abs(gx) - 0.5;\n    vec4 tx = floor(gx + 0.5);\n    gx = gx - tx;\n    \n    vec2 g00 = vec2(gx.x,gy.x);\n    vec2 g10 = vec2(gx.y,gy.y);\n    vec2 g01 = vec2(gx.z,gy.z);\n    vec2 g11 = vec2(gx.w,gy.w);\n    \n    vec4 norm = 1.79284291400159 - 0.85373472095314 * \n    vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11));\n    g00 *= norm.x;\n    g01 *= norm.y;\n    g10 *= norm.z;\n    g11 *= norm.w;\n    float n00 = dot(g00, vec2(fx.x, fy.x));\n    float n10 = dot(g10, vec2(fx.y, fy.y));\n    float n01 = dot(g01, vec2(fx.z, fy.z));\n    float n11 = dot(g11, vec2(fx.w, fy.w));\n    \n    vec2 fade_xy = smootherStep(f.xy);\n    vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);\n    float n_xy = mix(n_x.x, n_x.y, fade_xy.y);\n    return 2.3 * n_xy * 0.5 + 0.5;\n}\n\nfloat powFactor;\nfloat gradientFactor;\nfloat perlinNoise(const in vec2 pos, vec2 scale)\n{\n    // classic Perlin noise based on Stefan Gustavson\n    vec2 p = pos * scale;\n    vec4 i = mod(floor(p.xyxy) + vec4(0.0, 0.0, 1.0, 1.0), scale.xyxy);\n    vec4 f = fract(p.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);\n    i = mod(i, 289.0); // avoid truncation effects in permutation\n    \n    vec4 ix = i.xzxz;\n    vec4 iy = i.yyww;\n    vec4 fx = f.xzxz;\n    vec4 fy = f.yyww;\n    \n    vec4 ixy = permute(permute(ix) + iy);\n    vec4 gx = 2.0 * fract(ixy * 0.0243902439) - 1.0; // 1/41 = 0.024...\n    vec4 gy = abs(gx) - 0.5;\n    vec4 tx = floor(gx + 0.5);\n    gx = gx - tx;\n    \n    // rotate gradients\n    gx = cos(gx * gradientFactor);\n    gy = sin(gy * gradientFactor * 2.0);\n    \n    vec2 g00 = vec2(gx.x,gy.x);\n    vec2 g10 = vec2(gx.y,gy.y);\n    vec2 g01 = vec2(gx.z,gy.z);\n    vec2 g11 = vec2(gx.w,gy.w);\n    \n    vec4 norm = 1.79284291400159 - 0.85373472095314 * \n    vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11));\n    g00 *= norm.x;\n    g01 *= norm.y;\n    g10 *= norm.z;\n    g11 *= norm.w;\n    float n00 = dot(g00, vec2(fx.x, fy.x));\n    float n10 = dot(g10, vec2(fx.y, fy.y));\n    float n01 = dot(g01, vec2(fx.z, fy.z));\n    float n11 = dot(g11, vec2(fx.w, fy.w));\n    \n    vec2 fade_xy = smootherStep(f.xy);\n    vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);\n    float n_xy = mix(n_x.x, n_x.y, fade_xy.y);\n    return max(pow(2.3 * n_xy * 0.5 + 0.5, powFactor), 0.001);\n}\n\t\t\nvec2 perlinGradient(vec2 uv, vec2 scale, float spread)\n{\n    vec3 offset = vec3(1.0 / iResolution.xy, 0.0) * spread;\n    vec2 grad = vec2(0.0);\n    grad.x -= perlinNoise(uv - offset.xy, scale) * 1.0;\n    grad.x -= perlinNoise(uv - offset.xz, scale) * 2.0;\n    grad.x -= perlinNoise(uv + offset.xy * vec2(-1.0, 1.0), scale) * 1.0;\n    grad.x += perlinNoise(uv + offset.xy * vec2(1.0, -1.0), scale) * 1.0;\n    grad.x += perlinNoise(uv + offset.xz, scale) * 2.0;\n    grad.x += perlinNoise(uv + offset.xy, scale) * 1.0;\n    grad.y -= perlinNoise(uv - offset.xy, scale) * 1.0;\n    grad.y -= perlinNoise(uv - offset.zy, scale) * 2.0;\n    grad.y -= perlinNoise(uv + offset.xy * vec2(1.0, -1.0), scale) * 1.0;\n    grad.y += perlinNoise(uv + offset.xy * vec2(-1.0, 1.0), scale) * 1.0;\n    grad.y += perlinNoise(uv + offset.zy, scale) * 2.0;\n    grad.y += perlinNoise(uv + offset.xy, scale) * 1.0;\n       \n    return grad;  \n}\t\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.y;\n    \n    vec2 cells = vec2(20.0);\n    float spread = 1.0;\n    float radius = 0.25;\n    float mask = length(uv - iMouse.xy / iResolution.y) - radius;\n    mask = step(mask, 0.0) * abs(mask) / radius;\n    \n    float strength = 0.35 * noise(uv + iTime * 0.175 + mask, vec2(4.0)) - mask * 0.125;\n    float signStrength = sin(iTime * 0.5);\n    float phase = uv.x * sin(iTime * 0.25) + uv.y * cos(iTime * 0.5) + iTime * 1.15 + noise(uv + iTime, vec2(2.0, 3.0));\n\tpowFactor = 3.0 + (1.0 - mask) * 8.0 * abs(sin(phase));  \n    gradientFactor = iTime * 2.0 + 1.0;\n    \n    vec2 grad = perlinGradient(uv, cells, spread);\n\tfloat n = perlinNoise(uv + grad * strength * signStrength, cells);\n    fragColor = vec4(vec3(n), 1.0);\n    \n#if SHOW_GRADIENT == 1    \n    fragColor = vec4(grad * 0.5 + 0.5, 0.0 ,1.0);\n#endif\n}","name":"Image","description":"","type":"image"}]}