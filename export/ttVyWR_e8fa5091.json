{"ver":"0.1","info":{"id":"ttVyWR","date":"1610842830","viewed":915,"name":"Marching Cubes algorithm","username":"kastorp","description":"porting of Marching Cubes algorithm from [url]http://paulbourke.net/geometry/polygonise/[/url]\n\nimproved version here! [url]https://www.shadertoy.com/view/ftXGDj[/url]\n\n\n","likes":26,"published":1,"flags":32,"usePreview":0,"tags":["marchingcubes"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// MARCHING CUBES ALGORITHM by Kastorp\n// fork of https://www.shadertoy.com/view/WlccWl by Oneshade\n// thanks to Oneshade and Shane for letting me discover it\n\n\n#define SHOW_ALL //show vertexes and edges\n\nfloat sdShape(in vec3 p) {\n    p = p/ 4.1;\n    vec3 q = abs(p) - 1.35;\n    float cube = max(q.x, max(q.y, q.z));\n    float sphere = length(p) - 1.6875;\n    float cylinder1 = length(p.yz) - 0.6;\n    float cylinder2 = length(p.xz) - 0.6;\n    float cylinder3 = length(p.xy) - 0.6;\n    return max(max(cube, sphere), -min(cylinder1, min(cylinder2, cylinder3))) * 1.5;\n}\n\n//SDF functions by Iq\n#define dot2(x) dot(x,x)\nfloat udTriangle( vec3 p, vec3 a, vec3 b, vec3 c )\n{\n  vec3 ba = b - a; vec3 pa = p - a;\n  vec3 cb = c - b; vec3 pb = p - b;\n  vec3 ac = a - c; vec3 pc = p - c;\n  vec3 nor = cross( ba, ac );\n\n  return sqrt(\n    (sign(dot(cross(ba,nor),pa)) +\n     sign(dot(cross(cb,nor),pb)) +\n     sign(dot(cross(ac,nor),pc))<2.0)\n     ?\n     min( min(\n     dot2(ba*clamp(dot(ba,pa)/dot2(ba),0.0,1.0)-pa),\n     dot2(cb*clamp(dot(cb,pb)/dot2(cb),0.0,1.0)-pb) ),\n     dot2(ac*clamp(dot(ac,pc)/dot2(ac),0.0,1.0)-pc) )\n     :\n     dot(nor,pa)*dot(nor,pa)/dot2(nor) );\n}\nfloat sdCapsule( vec3 p, vec3 a, vec3 b)\n{\n  vec3 pa = p - a, ba = b - a;\n  float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n  return length( pa - ba*h ) ;\n}\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\n//------------------\n\n\nvec2 mmin(vec2 a, vec2 b) {return (a.x<b.x?a:b);}\n\n\nvec3 pc=vec3(-1000.);\nGRIDCELL g;\nTRIANGLE[5] triangles;\nint ntriangles;\n\nfloat csz = .5 ;//+ 0.1 * sin(iTime); // Cell size\n\nvec4 mapScene(in vec3 p) {\n    \n    \n    float s0= sdShape(p);\n    if(s0>2.) return vec4(s0-2., vec3(0.)); //too far from any cube, skip all logic\n    else{\n        vec2 shape = vec2(100.,0.);\n\n        vec3 c = floor(p / csz) * csz;\n        if(c!=pc)\n        {\n        \n        \n            for(int id=0;id<8;id++)\n            {\n\n\n                g.p[id]=c+ csz* VertexOffset[id];\n                g.val[id]=sdShape(g.p[id]);\n            }\n\n             ntriangles =Polygonise(g,0.,triangles,iChannel0);\n             pc=c;\n        }\n        \n        if(ntriangles<0) {\n            // void, use voxel traversal?\n            return vec4(s0, vec3(0.)); \n        }\n       // else if(ntriangles==0) return vec4(0.  , vec3(0.9)); //full.... should happen rarely\n        else {\n            for(int i=0;i<ntriangles;i++) {\n                #ifdef SHOW_ALL\n                for(int j=0;j<=2;j++)  {\n                    shape= mmin(shape, vec2(length(p - triangles[i].p[j]) - 0.06,0.)); \n                    shape =mmin(shape, vec2(sdCapsule(p,triangles[i].p[j],triangles[i].p[(j+1)%3])-0.03,1.));\n                 } \n                 #endif\n                shape=mmin(shape,vec2(udTriangle(p,triangles[i].p[0],triangles[i].p[1],triangles[i].p[2]) -0.001,2.+float(i)) );\n\n\n            }\n            #ifdef SHOW_ALL\n            float b = sdBox(p-c-.5*csz,vec3(.5*csz));\n            return  vec4(shape.x  ,shape.y<1.? vec3(1.0, 1.0, 0.25) : shape.y>=2.? vec3(0.5, -b/csz*1.5, 0.2):vec3(0.5, 0.5, 0.5));\n            #else\n            //float b = sdBox(p-c-.5*csz,vec3(.5*csz))<-.01?1.:0.;\n            return  vec4(shape.x  ,shape.y<1.? vec3(1.0, 1.0, 0.25) : shape.y>=2.? vec3(1.):vec3(0.5, 0.5, 0.5));\n           \n            #endif\n            //return  vec4(shape.x ,shape.y<1.? vec3(1.0, 1.0, 0.25) : shape.y>=2.? vec3(0.5, 0.2*(shape.y-2.), 0.2):vec3(0.5, 0.5, 0.5));\n        }\n   }\n  \n}\n\nvec3 getNormal(in vec3 p) {\n    vec3 n=vec3(0.);\n    for(int i=gFrame;i<=2;i++){\n        vec3 e=  0.001* ((i==0)?vec3(1,0,0):(i==1)?vec3(0,1,0):vec3(0,0,1));\n        for(float j=-1.;j<=1.;j+=2.) n+= j*e* mapScene(p + j* e).x ;\n    }\n    return normalize(n);\n \n}\n\n\n\nvec3 rot(vec3 p,float tt)\n{\n    float c1 = cos(tt), s1 = sin(tt);\n    float c2 = c1, s2 = s1;\n    p.xz *= mat2(c1, s1, -s1, c1);\n    p.yz *= mat2(c2, s2, -s2, c2);\n    return p;\n}\nvec3 rotinv(vec3 n,float tt)\n{\n    float c1 = cos(tt), s1 = sin(tt);\n    float c2 = c1, s2 = s1;\n    n.yz *= mat2(c2, -s2, s2, c2);\n    n.xz *= mat2(c1, -s1, s1, c1);\n    return n;\n}\n\n\n\n\n\nvec4 VoxelHitPos(vec3 pos, vec3 ro, vec3 rd){\n    vec3 ri = 1.0/rd;\n\tvec3 rs = sign(rd);\n    vec3 mini = (pos-ro + 0.5*csz - csz*0.5*vec3(rs))*ri;\n    float t=  max ( mini.x, max ( mini.y, mini.z ) );\n    return vec4(t*rd+ro,t);\n}\n\n//RAY TRACING WITH VOXEL TRAVERSAL\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\t   \n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    gFrame=min(iFrame,0);\n\n    vec3 ro = rot(vec3(0.0, 0.0, 15.0),iTime/3.);\n    vec3 rd = rot(normalize(vec3(uv, -1.0)),iTime/3.);\n\n\n    vec3 rs= sign(rd);\n    vec3 ri = 1./rd;\n\tvec3 rp=ro;  \n    vec3 mp=floor(rp/csz)*csz;\n    vec3 sd = (mp-rp + 0.5*csz + sign(rd)*0.5*csz) *ri;\n    vec3 mask=vec3(0.); \n\n\n    for (int i = 0; i < 100; i++) {\n    \n         mask = step(sd.xyz, sd.yzx) * step(sd.xyz, sd.zxy);\n\t\tsd += mask *  rs *ri*csz;\n        mp += mask *  rs*csz;\n            \n        float d = sdShape(mp+.5*csz);\n        \n        if( d<.5*csz ){\n        \n            //SDF RAYTRACING INSIDE CUBE\n            rp = VoxelHitPos(mp,rp,rd).xyz+rd*.0001;\n            float t = 0.0;          \n            for (float iters=0.0; iters < 40.0; iters++) {\n                vec3 p = rp + rd * t;\n\n                if(sdBox(p-mp-.5*csz,vec3(.5*csz))>0.) break;\n\n                vec4 d = mapScene(p);\n                if (d.x < 0.001) {\n                    vec3 n = getNormal(p);\n                    vec3 l = rot(vec3(-0.58, 0.58, 0.58),iTime/3.);\n\n                    fragColor.rgb += d.yzw;\n                    fragColor.rgb *= max(0.2, dot(n, l));\n                    \n                    return;\n                }\n\n\n                t += d.x;\n                \n            }\n           \n        }   \n\t}\n\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//porting of \"Marching Cubes\" algorithm by Paul Bourke (1994)\n//http://paulbourke.net/geometry/polygonise/\n \n//Note on porting: I made code more compact. Also used the usual trick to prevent unrolling in Angle\nint gFrame=0; \n \n struct TRIANGLE {\n   vec3 p[3];\n} ;\n\n\n struct GRIDCELL{\n   vec3 p[8];\n   float val[8];\n} ;\n\n\n//   4-------5\n//  /|      /|\n// 7-------6 |\n// | |     | |\n// | 0-----|-1\n// |/      |/\n// 3-------2\n//\n const vec3 VertexOffset[8] =vec3[8]\n(\n        vec3(0,0,0), vec3(1,0,0),vec3(1,1,0),vec3(0,1,0),\n        vec3(0,0,1), vec3(1,0,1),vec3(1,1,1),vec3(0,1,1)\n);\n\n\n//lookup tables retrieved from BufferA\n#define triTable(i,j) int(texelFetch(confChannel, ivec2(i,j+1),0).x)\n#define edgeTable(i) int(texelFetch(confChannel, ivec2(i,0),0).x)\n\nconst int  vertexTable[24] =int[24](\n   0,1,   1,2,  2,3,   3,0, \n   4,5,   5,6,  6,7,   7,4,   \n   0,4,   1,5,  2,6,   3,7);\n/*\n   Linearly interpolate the position where an isosurface cuts\n   an edge between two vertices, each with their own scalar value\n*/\n#define SNAP .2\n\nvec3  VertexInterp(float isolevel,vec3 p1, vec3 p2,  float valp1, float valp2)\n{\n   \n   float mu = (isolevel - valp1) / (valp2 - valp1);\n   if(mu<SNAP) mu=0.;\n   if(mu>1.-SNAP) mu=1.;\n   return p1+ mu*(p2-p1);\n\n}\n\n//input: isolevel value at 8 cube vertexs and isolevel threshold\n//output: number of triangles (-1= outside) and list of triangles (up to 5 in worst case)\nint Polygonise(inout GRIDCELL grid,float isolevel,inout TRIANGLE[5] triangles,sampler2D confChannel)\n{\n \n   /*\n      Determine the index into the edge table which\n      tells us which vertices are inside of the surface\n   */\n   int cubeindex = 0;\n   for(int i=gFrame;i<8;i++) if (grid.val[i] < isolevel) cubeindex |= 1<<i;\n\n\n   /* Cube is entirely in/out of the surface */\n   int e =edgeTable(cubeindex);\n   if ( e<= 0) return(e);\n\n   /* Find the vertices where the surface intersects the cube */\n   vec3 vertlist[12];\n   for(int i=0;i<12;i++)\n   if ((edgeTable(cubeindex) & (1<<i))>0)\n   vertlist[i] =  VertexInterp(isolevel,\n       grid.p[vertexTable[i*2]],\n       grid.p[vertexTable[i*2+1]],\n       grid.val[vertexTable[i*2]],\n       grid.val[vertexTable[i*2+1]]);\n\n\n   /* Create the triangle */\n   int ntriang = 0;\n   \n   for (int i=gFrame;triTable(cubeindex,i)!=-1;i+=3) {\n       bool collapsed=false;\n       for(int j=gFrame;j<3;j++)   {\n           int k =triTable(cubeindex,i+j);\n           triangles[ntriang].p[j] = vertlist[k];\n           if(j>0 && triangles[ntriang].p[j] ==triangles[ntriang].p[j-1] )collapsed=true;\n          if(j>1 && triangles[ntriang].p[j] ==triangles[ntriang].p[j-2] )collapsed=true;\n       }\n      if(!collapsed) ntriang++;\n   }\n\n   return(ntriang);\n}\n\n","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// CACHING LOOKUP TABLES\n\nvoid mainImage( out vec4 Q, in vec2 U )\n{\n    if(iFrame>3) discard;\n    else if(U.y<1.&& U.x<256.)\n    {\n       int _edgeTable[256]= int[256](\n        -1   , 0x109, 0x203, 0x30a, 0x406, 0x50f, 0x605, 0x70c, 0x80c, 0x905, 0xa0f, 0xb06, 0xc0a, 0xd03, 0xe09, 0xf00, \n        0x190, 0x099, 0x393, 0x29a, 0x596, 0x49f, 0x795, 0x69c, 0x99c, 0x895, 0xb9f, 0xa96, 0xd9a, 0xc93, 0xf99, 0xe90, \n        0x230, 0x339, 0x033, 0x13a, 0x636, 0x73f, 0x435, 0x53c, 0xa3c, 0xb35, 0x83f, 0x936, 0xe3a, 0xf33, 0xc39, 0xd30, \n        0x3a0, 0x2a9, 0x1a3, 0x0aa, 0x7a6, 0x6af, 0x5a5, 0x4ac, 0xbac, 0xaa5, 0x9af, 0x8a6, 0xfaa, 0xea3, 0xda9, 0xca0, \n        0x460, 0x569, 0x663, 0x76a, 0x066, 0x16f, 0x265, 0x36c, 0xc6c, 0xd65, 0xe6f, 0xf66, 0x86a, 0x963, 0xa69, 0xb60, \n        0x5f0, 0x4f9, 0x7f3, 0x6fa, 0x1f6, 0x0ff, 0x3f5, 0x2fc, 0xdfc, 0xcf5, 0xfff, 0xef6, 0x9fa, 0x8f3, 0xbf9, 0xaf0, \n        0x650, 0x759, 0x453, 0x55a, 0x256, 0x35f, 0x055, 0x15c, 0xe5c, 0xf55, 0xc5f, 0xd56, 0xa5a, 0xb53, 0x859, 0x950, \n        0x7c0, 0x6c9, 0x5c3, 0x4ca, 0x3c6, 0x2cf, 0x1c5, 0x0cc, 0xfcc, 0xec5, 0xdcf, 0xcc6, 0xbca, 0xac3, 0x9c9, 0x8c0, \n        0x8c0, 0x9c9, 0xac3, 0xbca, 0xcc6, 0xdcf, 0xec5, 0xfcc, 0x0cc, 0x1c5, 0x2cf, 0x3c6, 0x4ca, 0x5c3, 0x6c9, 0x7c0, \n        0x950, 0x859, 0xb53, 0xa5a, 0xd56, 0xc5f, 0xf55, 0xe5c, 0x15c, 0x055, 0x35f, 0x256, 0x55a, 0x453, 0x759, 0x650, \n        0xaf0, 0xbf9, 0x8f3, 0x9fa, 0xef6, 0xfff, 0xcf5, 0xdfc, 0x2fc, 0x3f5, 0x0ff, 0x1f6, 0x6fa, 0x7f3, 0x4f9, 0x5f0, \n        0xb60, 0xa69, 0x963, 0x86a, 0xf66, 0xe6f, 0xd65, 0xc6c, 0x36c, 0x265, 0x16f, 0x066, 0x76a, 0x663, 0x569, 0x460, \n        0xca0, 0xda9, 0xea3, 0xfaa, 0x8a6, 0x9af, 0xaa5, 0xbac, 0x4ac, 0x5a5, 0x6af, 0x7a6, 0x0aa, 0x1a3, 0x2a9, 0x3a0, \n        0xd30, 0xc39, 0xf33, 0xe3a, 0x936, 0x83f, 0xb35, 0xa3c, 0x53c, 0x435, 0x73f, 0x636, 0x13a, 0x033, 0x339, 0x230, \n        0xe90, 0xf99, 0xc93, 0xd9a, 0xa96, 0xb9f, 0x895, 0x99c, 0x69c, 0x795, 0x49f, 0x596, 0x29a, 0x393, 0x099, 0x190, \n        0xf00, 0xe09, 0xd03, 0xc0a, 0xb06, 0xa0f, 0x905, 0x80c, 0x70c, 0x605, 0x50f, 0x406, 0x30a, 0x203, 0x109, 0\n       );\n        Q=vec4(_edgeTable[int(U.x)]);\n   }\n   else if(U.y<17.&& U.x<256.){\n   \n   //original table compression:   4 integer values with 4bits--> 16bit integer  (where value -1 --> 15 )\n    int  _triTableCompact[256*4] = int[256*4](\n            65535\t,\t\t\t65535\t,\t\t\t65535\t,\t\t\t65535\t,\n            62336\t,\t\t\t65535\t,\t\t\t65535\t,\t\t\t65535\t,\n            63760\t,\t\t\t65535\t,\t\t\t65535\t,\t\t\t65535\t,\n            37761\t,\t\t\t65304\t,\t\t\t65535\t,\t\t\t65535\t,\n            64033\t,\t\t\t65535\t,\t\t\t65535\t,\t\t\t65535\t,\n            4992\t,\t\t\t65442\t,\t\t\t65535\t,\t\t\t65535\t,\n            2601\t,\t\t\t65426\t,\t\t\t65535\t,\t\t\t65535\t,\n            9090\t,\t\t\t39562\t,\t\t\t65528\t,\t\t\t65535\t,\n            62131\t,\t\t\t65535\t,\t\t\t65535\t,\t\t\t65535\t,\n            33456\t,\t\t\t65291\t,\t\t\t65535\t,\t\t\t65535\t,\n            8337\t,\t\t\t65459\t,\t\t\t65535\t,\t\t\t65535\t,\n            4785\t,\t\t\t35257\t,\t\t\t65531\t,\t\t\t65535\t,\n            45475\t,\t\t\t65338\t,\t\t\t65535\t,\t\t\t65535\t,\n                416\t,\t\t   \t47272\t,\t\t\t65530\t,\t\t\t65535\t,\n            12435\t,\t\t\t43931\t,\t\t\t65529\t,\t\t\t65535\t,\n            43657\t,\t\t\t65464\t,\t\t\t65535\t,\t\t\t65535\t,\n            63604\t,\t\t\t65535\t,\t\t\t65535\t,\t\t\t65535\t,\n            28724\t,\t\t\t65347\t,\t\t\t65535\t,\t\t\t65535\t,\n            35088\t,\t\t\t65396\t,\t\t\t65535\t,\t\t\t65535\t,\n            18708\t,\t\t\t14103\t,\t\t\t65521\t,\t\t\t65535\t,\n            35361\t,\t\t\t65396\t,\t\t\t65535\t,\t\t\t65535\t,\n            14147\t,\t\t\t8512\t,\t\t\t65530\t,\t\t\t65535\t,\n            39465\t,\t\t\t18464\t,\t\t\t65527\t,\t\t\t65535\t,\n            10658\t,\t\t\t29305\t,\t\t\t18803\t,\t\t\t65535\t,\n            14152\t,\t\t\t65323\t,\t\t\t65535\t,\t\t\t65535\t,\n            46923\t,\t\t\t578\t,\t\t\t65524\t,\t\t\t65535\t,\n            33033\t,\t\t\t12916\t,\t\t\t65531\t,\t\t\t65535\t,\n            39796\t,\t\t\t47540\t,\t\t\t4754\t,\t\t\t65535\t,\n            12707\t,\t\t\t34731\t,\t\t\t65524\t,\t\t\t65535\t,\n            6833\t,\t\t\t436\t,\t\t\t19316\t,\t\t\t65535\t,\n            39028\t,\t\t\t47536\t,\t\t\t12474\t,\t\t\t65535\t,\n            19316\t,\t\t\t47515\t,\t\t\t65530\t,\t\t\t65535\t,\n            62553\t,\t\t\t65535\t,\t\t\t65535\t,\t\t\t65535\t,\n            1113\t,\t\t\t65336\t,\t\t\t65535\t,\t\t\t65535\t,\n            5200\t,\t\t\t65285\t,\t\t\t65535\t,\t\t\t65535\t,\n            33880\t,\t\t\t4947\t,\t\t\t65525\t,\t\t\t65535\t,\n            39457\t,\t\t\t65349\t,\t\t\t65535\t,\t\t\t65535\t,\n            6147\t,\t\t\t38050\t,\t\t\t65525\t,\t\t\t65535\t,\n            23077\t,\t\t\t1060\t,\t\t\t65522\t,\t\t\t65535\t,\n            13730\t,\t\t\t21330\t,\t\t\t33844\t,\t\t\t65535\t,\n            9305\t,\t\t\t65459\t,\t\t\t65535\t,\t\t\t65535\t,\n            688\t,\t\t\t38072\t,\t\t\t65525\t,\t\t\t65535\t,\n            1104\t,\t\t\t12881\t,\t\t\t65531\t,\t\t\t65535\t,\n            9490\t,\t\t\t33413\t,\t\t\t22603\t,\t\t\t65535\t,\n            43834\t,\t\t\t22833\t,\t\t\t65524\t,\t\t\t65535\t,\n            1428\t,\t\t\t43032\t,\t\t\t43905\t,\t\t\t65535\t,\n            20549\t,\t\t\t46512\t,\t\t\t12474\t,\t\t\t65535\t,\n            22597\t,\t\t\t35496\t,\t\t\t65531\t,\t\t\t65535\t,\n            22649\t,\t\t\t65431\t,\t\t\t65535\t,\t\t\t65535\t,\n            36921\t,\t\t\t30005\t,\t\t\t65523\t,\t\t\t65535\t,\n            2160\t,\t\t\t20849\t,\t\t\t65527\t,\t\t\t65535\t,\n            13137\t,\t\t\t65397\t,\t\t\t65535\t,\t\t\t65535\t,\n            39033\t,\t\t\t6773\t,\t\t\t65522\t,\t\t\t65535\t,\n            37402\t,\t\t\t13573\t,\t\t\t14160\t,\t\t\t65535\t,\n            33288\t,\t\t\t22610\t,\t\t\t9639\t,\t\t\t65535\t,\n            9634\t,\t\t\t21301\t,\t\t\t65527\t,\t\t\t65535\t,\n            30103\t,\t\t\t45976\t,\t\t\t65522\t,\t\t\t65535\t,\n            38745\t,\t\t\t10535\t,\t\t\t46880\t,\t\t\t65535\t,\n            2866\t,\t\t\t29057\t,\t\t\t29976\t,\t\t\t65535\t,\n            45355\t,\t\t\t6001\t,\t\t\t65525\t,\t\t\t65535\t,\n            34905\t,\t\t\t6773\t,\t\t\t45987\t,\t\t\t65535\t,\n            20597\t,\t\t\t46992\t,\t\t\t40976\t,\t\t\t61611\t,\n            45227\t,\t\t\t23088\t,\t\t\t28800\t,\t\t\t61557\t,\n            30123\t,\t\t\t65371\t,\t\t\t65535\t,\t\t\t65535\t,\n            62826\t,\t\t\t65535\t,\t\t\t65535\t,\t\t\t65535\t,\n            21376\t,\t\t\t65386\t,\t\t\t65535\t,\t\t\t65535\t,\n            20745\t,\t\t\t65386\t,\t\t\t65535\t,\t\t\t65535\t,\n            4993\t,\t\t\t42377\t,\t\t\t65526\t,\t\t\t65535\t,\n            9569\t,\t\t\t65302\t,\t\t\t65535\t,\t\t\t65535\t,\n            5473\t,\t\t\t866\t,\t\t\t65528\t,\t\t\t65535\t,\n            38249\t,\t\t\t8288\t,\t\t\t65526\t,\t\t\t65535\t,\n            22677\t,\t\t\t9512\t,\t\t\t33334\t,\t\t\t65535\t,\n            43826\t,\t\t\t65366\t,\t\t\t65535\t,\t\t\t65535\t,\n            47115\t,\t\t\t27138\t,\t\t\t65525\t,\t\t\t65535\t,\n            10512\t,\t\t\t42419\t,\t\t\t65526\t,\t\t\t65535\t,\n            5797\t,\t\t\t47401\t,\t\t\t47250\t,\t\t\t65535\t,\n            27446\t,\t\t\t5429\t,\t\t\t65523\t,\t\t\t65535\t,\n            2944\t,\t\t\t20571\t,\t\t\t27473\t,\t\t\t65535\t,\n            1715\t,\t\t\t24675\t,\t\t\t38149\t,\t\t\t65535\t,\n            26966\t,\t\t\t39865\t,\t\t\t65528\t,\t\t\t65535\t,\n            18085\t,\t\t\t65415\t,\t\t\t65535\t,\t\t\t65535\t,\n            16436\t,\t\t\t22071\t,\t\t\t65530\t,\t\t\t65535\t,\n            20625\t,\t\t\t18538\t,\t\t\t65527\t,\t\t\t65535\t,\n            5482\t,\t\t\t29049\t,\t\t\t18803\t,\t\t\t65535\t,\n            25110\t,\t\t\t29717\t,\t\t\t65528\t,\t\t\t65535\t,\n            21793\t,\t\t\t866\t,\t\t\t29748\t,\t\t\t65535\t,\n            38728\t,\t\t\t24656\t,\t\t\t25093\t,\t\t\t65535\t,\n            31031\t,\t\t\t9033\t,\t\t\t26969\t,\t\t\t63842\t,\n            29363\t,\t\t\t27208\t,\t\t\t65525\t,\t\t\t65535\t,\n            18085\t,\t\t\t9255\t,\t\t\t46880\t,\t\t\t65535\t,\n            18704\t,\t\t\t12935\t,\t\t\t27227\t,\t\t\t65535\t,\n            37161\t,\t\t\t18731\t,\t\t\t19323\t,\t\t\t63141\t,\n            14152\t,\t\t\t21339\t,\t\t\t27473\t,\t\t\t65535\t,\n            23317\t,\t\t\t363\t,\t\t\t19323\t,\t\t\t64320\t,\n            2384\t,\t\t\t12374\t,\t\t\t14006\t,\t\t\t63304\t,\n            26966\t,\t\t\t29881\t,\t\t\t39801\t,\t\t\t65535\t,\n            26954\t,\t\t\t65444\t,\t\t\t65535\t,\t\t\t65535\t,\n            18084\t,\t\t\t32937\t,\t\t\t65523\t,\t\t\t65535\t,\n            41226\t,\t\t\t17926\t,\t\t\t65520\t,\t\t\t65535\t,\n            33080\t,\t\t\t26721\t,\t\t\t41316\t,\t\t\t65535\t,\n            6465\t,\t\t\t25154\t,\t\t\t65524\t,\t\t\t65535\t,\n            6147\t,\t\t\t17042\t,\t\t\t17961\t,\t\t\t65535\t,\n            17440\t,\t\t\t65378\t,\t\t\t65535\t,\t\t\t65535\t,\n            33336\t,\t\t\t9282\t,\t\t\t65526\t,\t\t\t65535\t,\n            43338\t,\t\t\t11078\t,\t\t\t65523\t,\t\t\t65535\t,\n            8832\t,\t\t\t38072\t,\t\t\t27210\t,\t\t\t65535\t,\n            691\t,\t\t\t24673\t,\t\t\t41316\t,\t\t\t65535\t,\n            24902\t,\t\t\t33953\t,\t\t\t45345\t,\t\t\t61880\t,\n            37993\t,\t\t\t6499\t,\t\t\t14003\t,\t\t\t65535\t,\n            33208\t,\t\t\t27393\t,\t\t\t16785\t,\t\t\t61766\t,\n            14003\t,\t\t\t24582\t,\t\t\t65524\t,\t\t\t65535\t,\n            47174\t,\t\t\t65414\t,\t\t\t65535\t,\t\t\t65535\t,\n            30375\t,\t\t\t39080\t,\t\t\t65530\t,\t\t\t65535\t,\n            880\t,\t\t\t36986\t,\t\t\t42858\t,\t\t\t65535\t,\n            5994\t,\t\t\t29050\t,\t\t\t2072\t,\t\t\t65535\t,\n            42858\t,\t\t\t28951\t,\t\t\t65523\t,\t\t\t65535\t,\n            5665\t,\t\t\t33158\t,\t\t\t30345\t,\t\t\t65535\t,\n            10594\t,\t\t\t30233\t,\t\t\t14601\t,\t\t\t63799\t,\n            28807\t,\t\t\t1632\t,\t\t\t65522\t,\t\t\t65535\t,\n            25143\t,\t\t\t65319\t,\t\t\t65535\t,\t\t\t65535\t,\n            43826\t,\t\t\t35462\t,\t\t\t30345\t,\t\t\t65535\t,\n            9986\t,\t\t\t37047\t,\t\t\t42855\t,\t\t\t63401\t,\n            4225\t,\t\t\t41351\t,\t\t\t42855\t,\t\t\t64306\t,\n            45355\t,\t\t\t27249\t,\t\t\t5985\t,\t\t\t65535\t,\n            34456\t,\t\t\t6518\t,\t\t\t14006\t,\t\t\t63025\t,\n            45456\t,\t\t\t65398\t,\t\t\t65535\t,\t\t\t65535\t,\n            28807\t,\t\t\t45920\t,\t\t\t1712\t,\t\t\t65535\t,\n            63159\t,\t\t\t65535\t,\t\t\t65535\t,\t\t\t65535\t,\n            64359\t,\t\t\t65535\t,\t\t\t65535\t,\t\t\t65535\t,\n            47107\t,\t\t\t65383\t,\t\t\t65535\t,\t\t\t65535\t,\n            47376\t,\t\t\t65383\t,\t\t\t65535\t,\t\t\t65535\t,\n            35096\t,\t\t\t31507\t,\t\t\t65526\t,\t\t\t65535\t,\n            25114\t,\t\t\t65403\t,\t\t\t65535\t,\t\t\t65535\t,\n            14881\t,\t\t\t46720\t,\t\t\t65527\t,\t\t\t65535\t,\n            8338\t,\t\t\t46746\t,\t\t\t65527\t,\t\t\t65535\t,\n            10166\t,\t\t\t35386\t,\t\t\t35235\t,\t\t\t65535\t,\n            25383\t,\t\t\t65394\t,\t\t\t65535\t,\t\t\t65535\t,\n            30727\t,\t\t\t9734\t,\t\t\t65520\t,\t\t\t65535\t,\n            9842\t,\t\t\t4211\t,\t\t\t65529\t,\t\t\t65535\t,\n            4705\t,\t\t\t37224\t,\t\t\t26504\t,\t\t\t65535\t,\n            42618\t,\t\t\t12657\t,\t\t\t65527\t,\t\t\t65535\t,\n            5754\t,\t\t\t33191\t,\t\t\t32791\t,\t\t\t65535\t,\n            1840\t,\t\t\t41127\t,\t\t\t31337\t,\t\t\t65535\t,\n            31335\t,\t\t\t43146\t,\t\t\t65529\t,\t\t\t65535\t,\n            46214\t,\t\t\t65384\t,\t\t\t65535\t,\t\t\t65535\t,\n            15203\t,\t\t\t16480\t,\t\t\t65526\t,\t\t\t65535\t,\n            35688\t,\t\t\t2404\t,\t\t\t65521\t,\t\t\t65535\t,\n            38473\t,\t\t\t14646\t,\t\t\t25521\t,\t\t\t65535\t,\n            25734\t,\t\t\t41611\t,\t\t\t65521\t,\t\t\t65535\t,\n            14881\t,\t\t\t24752\t,\t\t\t25611\t,\t\t\t65535\t,\n            18612\t,\t\t\t8374\t,\t\t\t39465\t,\t\t\t65535\t,\n            41882\t,\t\t\t18723\t,\t\t\t25523\t,\t\t\t62308\t,\n            33576\t,\t\t\t25636\t,\t\t\t65522\t,\t\t\t65535\t,\n            16960\t,\t\t\t65318\t,\t\t\t65535\t,\t\t\t65535\t,\n            8337\t,\t\t\t16963\t,\t\t\t33606\t,\t\t\t65535\t,\n            5265\t,\t\t\t16932\t,\t\t\t65526\t,\t\t\t65535\t,\n            33560\t,\t\t\t18454\t,\t\t\t6758\t,\t\t\t65535\t,\n            40986\t,\t\t\t1632\t,\t\t\t65524\t,\t\t\t65535\t,\n            17252\t,\t\t\t42627\t,\t\t\t37635\t,\t\t\t62362\t,\n            25754\t,\t\t\t65354\t,\t\t\t65535\t,\t\t\t65535\t,\n            30100\t,\t\t\t65462\t,\t\t\t65535\t,\t\t\t65535\t,\n            17280\t,\t\t\t31577\t,\t\t\t65526\t,\t\t\t65535\t,\n            20741\t,\t\t\t26372\t,\t\t\t65531\t,\t\t\t65535\t,\n            34427\t,\t\t\t21315\t,\t\t\t20788\t,\t\t\t65535\t,\n            42073\t,\t\t\t26401\t,\t\t\t65531\t,\t\t\t65535\t,\n            6070\t,\t\t\t32930\t,\t\t\t22851\t,\t\t\t65535\t,\n            23399\t,\t\t\t9380\t,\t\t\t8266\t,\t\t\t65535\t,\n            14403\t,\t\t\t9029\t,\t\t\t9637\t,\t\t\t63099\t,\n            29479\t,\t\t\t17702\t,\t\t\t65529\t,\t\t\t65535\t,\n            1113\t,\t\t\t24680\t,\t\t\t30818\t,\t\t\t65535\t,\n            12899\t,\t\t\t20839\t,\t\t\t1104\t,\t\t\t65535\t,\n            26662\t,\t\t\t4728\t,\t\t\t22600\t,\t\t\t63569\t,\n            42073\t,\t\t\t29025\t,\t\t\t29462\t,\t\t\t65535\t,\n            6753\t,\t\t\t359\t,\t\t\t1927\t,\t\t\t62553\t,\n            18948\t,\t\t\t12378\t,\t\t\t31338\t,\t\t\t64115\t,\n            31335\t,\t\t\t17802\t,\t\t\t43082\t,\t\t\t65535\t,\n            26006\t,\t\t\t35739\t,\t\t\t65529\t,\t\t\t65535\t,\n            2915\t,\t\t\t20534\t,\t\t\t22790\t,\t\t\t65535\t,\n            2224\t,\t\t\t4277\t,\t\t\t46677\t,\t\t\t65535\t,\n            25526\t,\t\t\t13651\t,\t\t\t65521\t,\t\t\t65535\t,\n            39457\t,\t\t\t47541\t,\t\t\t26040\t,\t\t\t65535\t,\n            944\t,\t\t\t37046\t,\t\t\t38486\t,\t\t\t64033\t,\n            46475\t,\t\t\t2149\t,\t\t\t9637\t,\t\t\t62752\t,\n            25526\t,\t\t\t41555\t,\t\t\t13731\t,\t\t\t65535\t,\n            22917\t,\t\t\t25986\t,\t\t\t10290\t,\t\t\t65535\t,\n            38489\t,\t\t\t24582\t,\t\t\t65522\t,\t\t\t65535\t,\n            6225\t,\t\t\t25864\t,\t\t\t10296\t,\t\t\t63526\t,\n            9809\t,\t\t\t65377\t,\t\t\t65535\t,\t\t\t65535\t,\n            5681\t,\t\t\t33702\t,\t\t\t38486\t,\t\t\t63128\t,\n            40986\t,\t\t\t22880\t,\t\t\t1616\t,\t\t\t65535\t,\n            22576\t,\t\t\t65446\t,\t\t\t65535\t,\t\t\t65535\t,\n            63066\t,\t\t\t65535\t,\t\t\t65535\t,\t\t\t65535\t,\n            31323\t,\t\t\t65461\t,\t\t\t65535\t,\t\t\t65535\t,\n            47707\t,\t\t\t14423\t,\t\t\t65520\t,\t\t\t65535\t,\n            22453\t,\t\t\t37306\t,\t\t\t65520\t,\t\t\t65535\t,\n            42362\t,\t\t\t35195\t,\t\t\t4993\t,\t\t\t65535\t,\n            45595\t,\t\t\t22295\t,\t\t\t65521\t,\t\t\t65535\t,\n            4992\t,\t\t\t29042\t,\t\t\t45685\t,\t\t\t65535\t,\n            38265\t,\t\t\t2418\t,\t\t\t31522\t,\t\t\t65535\t,\n            29271\t,\t\t\t38322\t,\t\t\t33330\t,\t\t\t62089\t,\n            10834\t,\t\t\t29523\t,\t\t\t65525\t,\t\t\t65535\t,\n            32808\t,\t\t\t30757\t,\t\t\t21157\t,\t\t\t65535\t,\n            20745\t,\t\t\t13626\t,\t\t\t10807\t,\t\t\t65535\t,\n            37513\t,\t\t\t30738\t,\t\t\t21154\t,\t\t\t62039\t,\n            13617\t,\t\t\t65367\t,\t\t\t65535\t,\t\t\t65535\t,\n            1920\t,\t\t\t28951\t,\t\t\t65525\t,\t\t\t65535\t,\n            37641\t,\t\t\t13651\t,\t\t\t65527\t,\t\t\t65535\t,\n            22409\t,\t\t\t65401\t,\t\t\t65535\t,\t\t\t65535\t,\n            21637\t,\t\t\t47754\t,\t\t\t65528\t,\t\t\t65535\t,\n            21509\t,\t\t\t42251\t,\t\t\t955\t,\t\t\t65535\t,\n            35088\t,\t\t\t43172\t,\t\t\t21675\t,\t\t\t65535\t,\n            42170\t,\t\t\t15188\t,\t\t\t5268\t,\t\t\t62483\t,\n            8530\t,\t\t\t45656\t,\t\t\t34120\t,\t\t\t65535\t,\n            2880\t,\t\t\t21563\t,\t\t\t6955\t,\t\t\t64277\t,\n            1312\t,\t\t\t45717\t,\t\t\t34117\t,\t\t\t62859\t,\n            9545\t,\t\t\t65339\t,\t\t\t65535\t,\t\t\t65535\t,\n            14930\t,\t\t\t17189\t,\t\t\t18485\t,\t\t\t65535\t,\n            21157\t,\t\t\t9282\t,\t\t\t65520\t,\t\t\t65535\t,\n            12963\t,\t\t\t33701\t,\t\t\t34117\t,\t\t\t63760\t,\n            21157\t,\t\t\t37186\t,\t\t\t9362\t,\t\t\t65535\t,\n            34120\t,\t\t\t21301\t,\t\t\t65521\t,\t\t\t65535\t,\n            5440\t,\t\t\t65360\t,\t\t\t65535\t,\t\t\t65535\t,\n            34120\t,\t\t\t2357\t,\t\t\t21253\t,\t\t\t65535\t,\n            62793\t,\t\t\t65535\t,\t\t\t65535\t,\t\t\t65535\t,\n            18356\t,\t\t\t43449\t,\t\t\t65531\t,\t\t\t65535\t,\n            17280\t,\t\t\t47481\t,\t\t\t47767\t,\t\t\t65535\t,\n            7073\t,\t\t\t16715\t,\t\t\t46192\t,\t\t\t65535\t,\n            13331\t,\t\t\t41348\t,\t\t\t46196\t,\t\t\t62650\t,\n            38836\t,\t\t\t10571\t,\t\t\t8603\t,\t\t\t65535\t,\n            38009\t,\t\t\t6523\t,\t\t\t6955\t,\t\t\t62336\t,\n            46203\t,\t\t\t16932\t,\t\t\t65520\t,\t\t\t65535\t,\n            46203\t,\t\t\t14372\t,\t\t\t16948\t,\t\t\t65535\t,\n            10898\t,\t\t\t12951\t,\t\t\t38007\t,\t\t\t65535\t,\n            38825\t,\t\t\t10823\t,\t\t\t1927\t,\t\t\t63234\t,\n            14963\t,\t\t\t18218\t,\t\t\t2586\t,\t\t\t64004\t,\n            33441\t,\t\t\t65351\t,\t\t\t65535\t,\t\t\t65535\t,\n            16788\t,\t\t\t6001\t,\t\t\t65523\t,\t\t\t65535\t,\n            16788\t,\t\t\t32881\t,\t\t\t6017\t,\t\t\t65535\t,\n            29444\t,\t\t\t65332\t,\t\t\t65535\t,\t\t\t65535\t,\n            63364\t,\t\t\t65535\t,\t\t\t65535\t,\t\t\t65535\t,\n            43177\t,\t\t\t65419\t,\t\t\t65535\t,\t\t\t65535\t,\n            14595\t,\t\t\t39865\t,\t\t\t65530\t,\t\t\t65535\t,\n            2576\t,\t\t\t43146\t,\t\t\t65531\t,\t\t\t65535\t,\n            47635\t,\t\t\t65443\t,\t\t\t65535\t,\t\t\t65535\t,\n            6945\t,\t\t\t47515\t,\t\t\t65528\t,\t\t\t65535\t,\n            14595\t,\t\t\t8633\t,\t\t\t39721\t,\t\t\t65535\t,\n            35616\t,\t\t\t65456\t,\t\t\t65535\t,\t\t\t65535\t,\n            64291\t,\t\t\t65535\t,\t\t\t65535\t,\t\t\t65535\t,\n            10290\t,\t\t\t35496\t,\t\t\t65529\t,\t\t\t65535\t,\n            681\t,\t\t\t65321\t,\t\t\t65535\t,\t\t\t65535\t,\n            10290\t,\t\t\t4264\t,\t\t\t35352\t,\t\t\t65535\t,\n            62113\t,\t\t\t65535\t,\t\t\t65535\t,\t\t\t65535\t,\n            38961\t,\t\t\t65409\t,\t\t\t65535\t,\t\t\t65535\t,\n            61840\t,\t\t\t65535\t,\t\t\t65535\t,\t\t\t65535\t,\n            63536\t,\t\t\t65535\t,\t\t\t65535\t,\t\t\t65535\t,\n            65535\t,\t\t\t65535\t,\t\t\t65535\t,\t\t\t65535\t\n\n    );\n    \n    int id= int(U.x)*4 + int(U.y -1.) /4;\n    int val= int(_triTableCompact[id]);\n    int bit =(int(U.y -1.)%4)*4;\n    val = (val& (15<<bit))>>bit;\n    if(val==15) val=-1;\n    \n    Q=vec4(val);\n }\n    \n}","name":"Buffer A","description":"","type":"buffer"}]}