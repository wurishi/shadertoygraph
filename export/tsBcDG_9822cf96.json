{"ver":"0.1","info":{"id":"tsBcDG","date":"1588005829","viewed":157,"name":"Hyperbolic octagons II","username":"sl2c","description":"Uses anti-aliasing, and travels through a translation.  Variant of [url]https://www.shadertoy.com/view/3d2cz1[/url]","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["tiling","hyperbolic","poincare"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Copyright 2020 Google LLC\n// SPDX-License-Identifier: Apache-2.0\n// NOT an official Google project; see Google Open Source guidelines for more info on copyright transfer\n// written by William Cadegan-Schlieper \n#define swap(x,y) {t=x;x=y;y=t;}\n\n\nvec3 color(vec2 z, float ds) {\n    float pi = 3.14159265359;\n    float theta = pi/8.0;\n    // someday I'll explain the cross-ratio magic that got me these numbers\n    float r = 2.0 / (1.0 - sqrt(1.0 - 4.0 * sin(theta) * sin(theta)));\n    float p = - r * cos(theta);\n    bool fl = false;\n    vec3[3] colors;\n    colors[0] = vec3(1.0,0.5,0.0);\n    colors[1] = vec3(0.0,1.0,0.5);\n    colors[2] = vec3(0.5,0.0,1.0);\n    vec3 t; // for temp space\n    for(int i=0;i<100;i++) {\n        if (z.x < 0.0) {\n            z.x = -z.x;\n            colors[2] = 1.0 - colors[2];\n            fl = !fl;\n            continue;\n        }\n        if (dot(z,z) < 1.0) {\n            z /= dot(z,z);\n            ds *= dot(z,z);\n            fl = !fl;\n            swap(colors[0],colors[1]);\n            continue;\n        }\n        z.x -= p;\n        if (dot(z,z) > r*r) {\n            ds *= r * r / dot(z,z);\n            z *= r * r / dot(z,z);\n            fl = !fl;\n            z.x += p;\n            swap(colors[1],colors[2]);\n            continue;\n        }\n        z.x += p;\n        \n        break;\n        \n\n    }\n    vec3 col = colors[0];\n    float f = 1.0;\n    f = min(f, z.x / ds);\n    z.x -= p;\n    f = min(f, (r * r - dot(z,z)) / (ds * 2.0 * r));\n    z.x += p;\n    f = 0.75 + 0.25 * f;\n    if (fl) {\n        f = 1.5 - f;\n    }\n    col *= f;\n    if (dot(z,z) - 1.0 < ds * 2.0) {\n        float t = (dot(z,z) - 1.0) / (ds * 2.0);\n        vec3 col2 = colors[1] * (1.5 - f);\n        col = (1.0 + t) * col + (1.0 - t) * col2;\n        col *= 0.5;\n    }\n    return col * min(1.0,1.0 / ds);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = 2.0 * (fragCoord - iResolution.xy * 0.5)/iResolution.y;\n    float ds = 2.0 / iResolution.y;\n\n    float r2 = dot(uv,uv);\n    if (r2 < 1.0) {\n        uv.y -= 1.0;\n        uv /= dot(uv,uv); ds *= dot(uv,uv);\n        uv.y = -0.5 - uv.y;\n        \n        float t = 0.1 * iTime;\n        float period = 6.0 * 0.6329743192009469;\n        t = mod(t,period) - period * 0.5;\n        uv *= exp(t); ds *= exp(t);\n        \n        uv.x -= 0.43973261203230474;\n        uv /= dot(uv,uv); ds *= dot(uv,uv);\n        uv.x += 1.6782507245215834;\n        \n        fragColor = vec4(color(uv,ds),1.0);\n    } else {\n        fragColor = vec4(0.0,0.0,0.0,1.0);\n    }\n    fragColor = pow(fragColor, vec4(1./2.2));\n\n}","name":"Image","description":"","type":"image"}]}