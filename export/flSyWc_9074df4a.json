{"ver":"0.1","info":{"id":"flSyWc","date":"1650300245","viewed":76,"name":"Simple Wave Balls","username":"nelsonkuang","description":"Simple Wave","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["wave","balls"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int MAX_MARCHING_STEPS = 255;\nconst float MIN_DIST = 0.0;\nconst float MAX_DIST = 100.0;\nconst float PRECISION = 0.001;\nconst float EPSILON = 0.0005;\nconst float PI = 3.14159265359;\nconst vec3 COLOR_BACKGROUND = vec3(.0, .0, .0);\nconst vec3 COLOR_AMBIENT = vec3(0.2941, 0.5059, 0.5059);\n\nmat2 rotate2d(float theta) {\n  float s = sin(theta), c = cos(theta);\n  return mat2(c, -s, s, c);\n}\n\nfloat sdSphere(vec3 p, float r, vec3 offset) {\n  return length(p - offset) - r;\n}\n\nfloat opRepLim(vec3 p, float r, vec3 o, float c, vec3 l) {\n  vec3 q = p - c * clamp(round(p / c), -l, l);\n  q.y += cos(iTime * .5) * cos(p.z) * 0.2 + sin(iTime * 0.5) * cos(p.x) * 0.2;\n  return sdSphere(q, r, o);\n}\n\nfloat scene(vec3 p) {\n  return opRepLim(p, 0.015, vec3(0), .2, vec3(32, 0, 32));\n}\n\nfloat rayMarch(vec3 ro, vec3 rd) {\n  float depth = MIN_DIST;\n  float d;\n\n  for(int i = 0; i < MAX_MARCHING_STEPS; i++) {\n    vec3 p = ro + depth * rd;\n    d = scene(p);\n    depth += d;\n    if(d < PRECISION || depth > MAX_DIST)\n      break;\n  }\n\n  d = depth;\n\n  return d;\n}\n\nvec3 calcNormal(in vec3 p) {\n  vec2 e = vec2(1, -1) * EPSILON;\n  return normalize(e.xyy * scene(p + e.xyy) +\n    e.yyx * scene(p + e.yyx) +\n    e.yxy * scene(p + e.yxy) +\n    e.xxx * scene(p + e.xxx));\n}\n\nmat3 camera(vec3 cameraPos, vec3 lookAtPoint) {\n  vec3 cd = normalize(lookAtPoint - cameraPos);\n  vec3 cr = normalize(cross(vec3(0, 1, 0), cd));\n  vec3 cu = normalize(cross(cd, cr));\n\n  return mat3(-cr, cu, -cd);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 uv = (fragCoord - .5 * iResolution.xy) / iResolution.y;\n  vec2 mouseUV = iMouse.xy / iResolution.xy;\n\n  if(mouseUV == vec2(0.0))\n    mouseUV = vec2(0.5);\n\n  vec3 col = vec3(0);\n  vec3 lp = vec3(0); \n  vec3 ro = vec3(0, 0.2, 3);\n\n  float cameraRadius = 2.;\n  ro.yz = ro.yz * cameraRadius * rotate2d(mix(-PI / 2., PI / 2., mouseUV.y));\n  ro.xz = ro.xz * rotate2d(mix(-PI, PI, mouseUV.x)) + vec2(lp.x, lp.z);\n\n  vec3 rd = camera(ro, lp) * normalize(vec3(uv, -1));\n\n  float d = rayMarch(ro, rd); // signed distance value to closest object\n\n  if(d > MAX_DIST) {\n    col = COLOR_BACKGROUND; // ray didn't hit anything\n  } else {\n    vec3 p = ro + rd * d; // point discovered from ray marching\n    vec3 normal = calcNormal(p); // surface normal\n\n    vec3 lightPosition = vec3(0, 2, 2);\n    vec3 lightDirection = normalize(lightPosition - p) * .65;\n\n    float dif = clamp(dot(normal, lightDirection), 0., 1.) * 0.5 + 0.5;\n\n    col = vec3(dif) + COLOR_AMBIENT;\n  }\n\n  fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}