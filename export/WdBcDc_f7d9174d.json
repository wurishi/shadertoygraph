{"ver":"0.1","info":{"id":"WdBcDc","date":"1587600698","viewed":66,"name":"Canarick - Subsurface Scattering","username":"canarick","description":"Subsurface Scattering Approximation","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["cis461"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define LIGHT_POS vec3(0.0 + 2. * sin(iTime), 2., 9.0)\n\n// Adjust these to alter where the subsurface glow shines through and how brightly\nconst float FIVETAP_K = 2.0;\nconst float AO_DIST = 0.085;\n\n// The larger the DISTORTION, the smaller the glow\nconst float DISTORTION = 0.2;\n// The higher GLOW is, the smaller the glow of the subsurface scattering\nconst float GLOW = 6.0;\n// The higher the BSSRDF_SCALE, the brighter the scattered light\nconst float BSSRDF_SCALE = 3.0;\n// Boost the shadowed areas in the subsurface glow with this\nconst float AMBIENT = 0.0;\n// Toggle this to affect how easily the subsurface glow propagates through an object\n#define ATTENUATION 0\n\nconst float FOVY = tan(3.14159 * 19.5 / 180.);\nconst int RAY_STEPS = 256;\n\nstruct Intersection {\n    float t;\n    vec3 color;\n    vec3 p;\n    int object; // Assign every object in our scene a unique ID int\n};\n        \n// SDF of a Sphere\nfloat sphere(vec3 p, float r, vec3 c) {\n    return distance(p, c) - r;\n}\n\n//SDF of a Torus\nfloat torus(vec3 p, vec2 t) {\n    vec2 q = vec2(length(p.xz) - t.x, p.y);\n    return length(q) - t.y;\n} \n\n//SDF of a Cone\nfloat cone(vec3 p, vec2 c) {\n\t//c must be normalized\n    float q = length(p.xy);\n    return dot(c, vec2(q, p.x));\n}\n        \n// SDF of a Plane\nfloat plane( vec3 p, vec4 n ) {\n  // n must be normalized\n  return dot(p,n.xyz) + n.w;\n}\n\n//SDF of a Box\nfloat box (vec3 p, vec3 b) {\n\treturn length(max(abs(p) - b, 0.0));\n}\n\n//RANDOM Noise Functions\nfloat random1( vec3 p ) {\n    return fract(sin((dot(p, vec3(127.1,\n                                  311.7,\n                                  191.999)))) *         \n                 43758.5453);\n}\n\nvec3 random3( vec3 p ) {\n    return fract(sin(vec3(dot(p,vec3(127.1, 311.7, 191.999)),\n                          dot(p,vec3(269.5, 183.3, 765.54)),\n                          dot(p, vec3(420.69, 631.2,109.21))))\n                 *43758.5453);\n}\n\n\nfloat WorleyNoise3D(vec3 p) {\n    // Tile the space\n    vec3 pointInt = floor(p);\n    vec3 pointFract = fract(p);\n\n    float minDist = 1.0; // Minimum distance initialized to max.\n\n    // Search all neighboring cells and this cell for their point\n    for(int z = -1; z <= 1; z++)\n    {\n        for(int y = -1; y <= 1; y++)\n        {\n            for(int x = -1; x <= 1; x++)\n            {\n                vec3 neighbor = vec3(float(x), float(y), float(z));\n\n                // Random point inside current neighboring cell\n                vec3 point = random3(pointInt + neighbor);\n\n                // Animate the point\n                point = 0.5 + 0.5 * sin(iTime * 0.01 + 6.2831 * point); // 0 to 1 range\n\n                // Compute the distance b/t the point and the fragment\n                // Store the min dist thus far\n                vec3 diff = neighbor + point - pointFract;\n                float dist = length(diff);\n                minDist = min(minDist, dist);\n            }\n        }\n    }\n    return minDist;\n}\n\nvoid CoordinateSystem(in vec3 v1, out vec3 v2, out vec3 v3) {\n    if (abs(v1.x) > abs(v1.y))\n            v2 = vec3(-v1.z, 0.0, v1.x) / sqrt(v1.x * v1.x + v1.z * v1.z);\n        else\n            v2 = vec3(0.0, v1.z, -v1.y) / sqrt(v1.y * v1.y + v1.z * v1.z);\n        v3 = cross(v1, v2);\n}\n\nvec3 WorleyTangentSpaceNormal(vec3 pos) {\n    vec3 epsilon = vec3(0.0, 0.001, 0.0);\n    return normalize( vec3( WorleyNoise3D(pos + epsilon.yxx) - WorleyNoise3D(pos - epsilon.yxx),\n                            WorleyNoise3D(pos + epsilon.xyx) - WorleyNoise3D(pos - epsilon.xyx),\n                            WorleyNoise3D(pos + epsilon.xxy) - WorleyNoise3D(pos - epsilon.xxy)));\n\n}\n\nmat3 TangentToWorld(vec3 nor) {\n\tvec3 tangent, bitangent;\n    CoordinateSystem(nor, tangent, bitangent);\n    return mat3(tangent, bitangent, nor);\n}\n\n//Rotates the camera around the Y-axis\nvec3 rotateY(vec3 p, float a) {\n    return vec3(cos(a) * p.x + sin(a) * p.z, p.y, -sin(a) * p.x + cos(a) * p.z);\n}\n\n//This is where you can create your scene\n#define SPHERE_1_SDF sphere(pos, 2.5, vec3(0., 6.5, 1.))\n#define SPHERE_2_SDF sphere(pos, 1.5, vec3(-4., 2.5, 0.))\n#define SPHERE_3_SDF sphere(pos, 2.5, vec3(4., 0., -3.))\n\n//Primitive SDFs\n#define BACK_WALL_SDF plane(pos, vec4(0.0, 0.0, -1.0, 10.0))\n#define LEFT_WALL_SDF plane(pos, vec4(1.0, 0.0, 0.0, 5.0))\n#define RIGHT_WALL_SDF plane(pos, vec4(-1.0, 0.0, 0.0, 5.0))\n#define CEILING_SDF plane(pos, vec4(0.0, -1.0, 0.0, 7.5))\n#define FLOOR_SDF plane(pos, vec4(0.0, 1.0, 0.0, 2.0))\n#define TALL_BOX_SDF box(rotateY(pos + vec3(-1.5, 0.0, -2.0), 65.0 * 3.14159 / 180.0), vec3(1.0, 2.0, 1.2))\n#define SMALL_BOX_SDF box(rotateY(pos + vec3(1.5, 1.0, 0.0), -65.0 * 3.14159 / 180.0), vec3(1.0, 1.0, 1.0))\n\n\n//Primtives IDs\n#define BACK_WALL 0\n#define LEFT_WALL 1\n#define RIGHT_WALL 2\n#define CEILING 3\n#define FLOOR 4\n#define TALL_BOX 5\n#define SMALL_BOX 6\n#define SPHERE_1 7\n#define SPHERE_2 8\n#define SPHERE_3 9\n\nvoid sceneMap3D(vec3 pos, out float t, out int obj) {\n    t = BACK_WALL_SDF;\n    obj = BACK_WALL;\n    \n    float t2;\n    if((t2 = LEFT_WALL_SDF) < t) {\n        t = t2;\n        obj = LEFT_WALL;\n    }\n    if((t2 = RIGHT_WALL_SDF) < t) {\n        t = t2;\n        obj = RIGHT_WALL;\n    }\n    if((t2 = CEILING_SDF) < t) {\n        t = t2;\n        obj = CEILING;\n    }\n    if((t2 = FLOOR_SDF) < t) {\n        t = t2;\n        obj = FLOOR;\n    } \n    if ((t2 = SPHERE_1_SDF) < t) {\n    \tt = t2;\n        obj = SPHERE_1;\n    }\n    if ((t2 = SPHERE_2_SDF) < t) {\n    \tt = t2;\n        obj = SPHERE_2;\n    }\n    if ((t2 = SPHERE_3_SDF) < t) {\n    \tt = t2;\n        obj = SPHERE_3;\n    }\n}\n\n\nfloat sceneMap3D(vec3 pos) {\n    float t = BACK_WALL_SDF;\n    \n    float t2;\n    if((t2 = LEFT_WALL_SDF) < t) {\n        t = t2;\n    }\n    if((t2 = RIGHT_WALL_SDF) < t) {\n        t = t2;\n    }\n    if((t2 = CEILING_SDF) < t) {\n        t = t2;\n    }\n    if((t2 = FLOOR_SDF) < t) {\n        t = t2;\n    }  \n    if ((t2 = SPHERE_1_SDF) < t) {\n    \tt = t2;\n    }\n    if ((t2 = SPHERE_2_SDF) < t) {\n    \tt = t2;\n    }\n    if ((t2 = SPHERE_3_SDF) < t) {\n    \tt = t2;\n    }\n    \n    return t;\n}\n\nvec3 computeNormal(vec3 pos) {\n    vec3 epsilon = vec3(0.0, 0.001, 0.0);\n    return normalize( vec3( sceneMap3D(pos + epsilon.yxx) - sceneMap3D(pos - epsilon.yxx),\n                            sceneMap3D(pos + epsilon.xyx) - sceneMap3D(pos - epsilon.xyx),\n                            sceneMap3D(pos + epsilon.xxy) - sceneMap3D(pos - epsilon.xxy)));\n}\n\nvoid march(vec3 origin, vec3 dir, out float t, out int hitObj) {\n    t = 0.001;\n    for(int i = 0; i < RAY_STEPS; ++i) {\n        vec3 pos = origin + t * dir;\n    \tfloat m;\n        sceneMap3D(pos, m, hitObj);\n        if(m < 0.0001) {\n            return;\n        }\n        t += m;\n    }\n    t = -1.0;\n    hitObj = -1;\n}\n\nconst vec3 a = vec3(0.5, 0.5, 0.5);\nconst vec3 b = vec3(0.5, 0.5, 0.5);\nconst vec3 c = vec3(2.0, 1.0, 1.0);\nconst vec3 d = vec3(0.5, 0.2, 0.25);\n\nvec3 colorPalette(float t) {\n    return a + b * cos(6.28 * (t * c + d));\n}\n\nfloat fiveTapAO(vec3 p, vec3 n, float k) {\n    float aoSum = 0.0;\n    for(float i = 0.0; i < 5.0; ++i) {\n        float coeff = 1.0 / pow(2.0, i);\n        aoSum += coeff * (i * AO_DIST);\n    }\n    return 1.0 - k * aoSum;\n}\n\n\nfloat subsurface(vec3 lightDir, vec3 normal, vec3 viewVec, float thickness) {\n    vec3 scatteredLightDir = lightDir + normal * DISTORTION;\n    float lightReachingEye = pow(clamp(dot(viewVec, -scatteredLightDir), 0.0, 1.0), GLOW) * BSSRDF_SCALE;\n    float attenuation = 1.0;\n    #if ATTENUATION\n    attenuation = max(0.0, dot(normal, lightDir) + dot(viewVec, -lightDir));\n    #endif\n\tfloat totalLight = attenuation * (lightReachingEye + AMBIENT) * thickness;\n    return totalLight;\n}\n\n// This is where you give your objects in the scene materials\nvec3 computeMaterial(int hitObj, vec3 p, vec3 n, vec3 lightVec, vec3 view, float thickness) {\n    float lambert = dot(n, lightVec) + 0.2;\n    \n    switch(hitObj) {\n        case BACK_WALL:\n        case CEILING:\n        case FLOOR:\n        return vec3(0.85, 0.81, 0.78) * lambert;\n        break;\n        case RIGHT_WALL:\n        case LEFT_WALL:\n        return vec3(0.09, 0.65, 0.2) * lambert;\n        break;\n        case SPHERE_1:\n        return vec3(0.0, 0.67, 1.67) * subsurface(lightVec, n, view, thickness);\n        break;\n        case SPHERE_2:\n        case SPHERE_3:\n        return vec3(0.0, 0.67, 1.67) * subsurface(lightVec, n, view, thickness);\n        break;\n        case -1:\n        return vec3(0., 0., 0.);\n        break;\n    }\n    return vec3(0., 0., 0.);\n}\n\n\nIntersection sdf3D(vec3 dir, vec3 eye) {\n    float t;\n    int hitObj;\n    march(eye, dir, t, hitObj);\n\n    vec3 isect = eye + t * dir;\n    vec3 nor = computeNormal(isect);\n    vec3 lightDir = normalize(LIGHT_POS - isect);\n    float thickness = fiveTapAO(isect, -nor, FIVETAP_K);\n    \n    vec3 surfaceColor = computeMaterial(hitObj, isect, nor, lightDir, normalize(eye - isect), thickness);\n    \n    return Intersection(t, surfaceColor, isect, hitObj);\n}\n\n// Returns direction of ray\nvec3 rayCast(vec3 eye, vec3 ref, vec2 ndc) {\n    vec3 F = ref - eye;\n    vec3 R = normalize(cross(F, vec3(0,1,0)));\n    vec3 U = normalize(cross(R, F));\n    \n    // Vertical and Horizontal Aspects\n    vec3 V = U * length(F) * tan(FOVY * 0.5);\n    vec3 H = R * length(F) * tan(FOVY * 0.5) * float(iResolution.x) / iResolution.y;\n    \n    vec3 p = ref + ndc.x * H + ndc.y * V;\n    \n    return normalize(p - eye);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n    // Convert to range [-1, 1]\n    uv = uv * 2.0 - vec2(1.0, 1.0);\n    \n    vec3 eye = vec3(0, 4.5, -30);\n    vec3 ref = vec3(0, 3., 0);\n    \n    vec3 rayDir = rayCast(eye, ref, uv);\n    \n    Intersection isect = sdf3D(rayDir, eye);\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    // fragColor = vec4(0.5 * (rayDir + vec3(1., 1., 1.)), 1.0);\n    fragColor = vec4(isect.color, 1.);\n}","name":"Image","description":"","type":"image"}]}