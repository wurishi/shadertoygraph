{"ver":"0.1","info":{"id":"WdVSzd","date":"1575326833","viewed":149,"name":"MUNAR LANDER (Ultimate)","username":"cedricl","description":"test","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["vector","lander"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Final display & post-processes\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy + vec2(.0025*sin(iTime*.37)*sin(iTime*.49), .0015*sin(iTime*1.49));\n    uv.x = (uv.x-.5)*ASPECT / cos(Roundness*abs(uv.y - .5)) + .5;\n    uv.y = (uv.y-.5) / cos(Roundness*abs(uv.x - .5)) + .5;\n\tfragColor = .15 + mix(abs(sin(iTime*126.76)), 1., .85) * texture(iChannel0, uv) + BLOOM_AMOUNT*texture(iChannel1, uv);\n    fragColor *= smoothstep(.0, BorderSharpness, .5 - abs(uv.x - .5)) * smoothstep(0., BorderSharpness, .5 - abs(uv.y - .5));\n    fragColor *= pow(1. - length(uv-vec2(.5)), Vignetting);\n    fragColor *= mix(abs(sin(iTime*126.76)), 1., .85);\n    fragColor *= .6+pow(fragColor.r, 1.8);\n }","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"vec2 Rot(vec2 p, float th) { return vec2(p.x*cos(th)-p.y*sin(th), p.x*sin(th)+p.y*cos(th)); }\nfloat Rnd(float In) { return fract(sin(In * 3549.66654368976) + sin(In * 375.4567)); }\nfloat DLine(vec2 uv, vec2 p0, vec2 p1)\n{\n    vec2 p0p1 = p1-p0; vec2 uvp1 = p1-uv;\n    if(dot(p0p1, uvp1) <= 0. || dot(-p0p1, p0-uv) <= 0.) return smoothstep(SHARPD, 0., min(length(uv-p0), length(uvp1)));\n    float a = pow(length(uvp1), 2.) - pow(dot(normalize(p0p1), uvp1), 2.);\n    return smoothstep(SHARPD, 0., a > 0. ? sqrt(a) : 0.);\n}\n\nfloat DLine2(vec2 uv, inout vec2 p0, vec2 p1) { vec2 p0s = p0; p0 = p1;\treturn DLine(uv, p0s, p1); }\n/*float ALine(vec2 uv, vec2[] p) \n{ \n//    vec2 p0s = p0; p0 = p1;\treturn DLine(uv, p0s, p1); \n}\n*/\n\nfloat DShip(vec2 uv, vec2 pos, float th, float scale)\n{\n    vec2 a1[] = vec2[](vec2(1.0, 1.0), vec2(1.0, 1.2));\n    a1.length();\n    \n    \n    vec2 Pos = pos+Rot(vec2(-.5, 0.), th)*scale;\n    float ret = DLine2(uv, Pos, pos+Rot(vec2(.5, 0.), th)*scale);\n    ret += DLine2(uv, Pos, pos+Rot(vec2(.4, .3), th)*scale);\n    ret += DLine2(uv, Pos, pos+Rot(vec2(-.4, .3), th)*scale);\n    ret += DLine2(uv, Pos, pos+Rot(vec2(-.5, .0), th)*scale);\n    \n    Pos = pos+Rot(vec2(-.25, 0.), th)*scale;\n    ret += DLine2(uv, Pos, pos+Rot(vec2(-.45, -.35), th)*scale);\n    ret += DLine2(uv, Pos, pos+Rot(vec2(-.25, -.7), th)*scale);\n    ret += DLine2(uv, Pos, pos+Rot(vec2(+.25, -.7), th)*scale);\n    ret += DLine2(uv, Pos, pos+Rot(vec2(+.45, -.35), th)*scale);\n    ret += DLine2(uv, Pos, pos+Rot(vec2(+.25, .0), th)*scale);\n    \n    ret += DLine(uv, pos+Rot(vec2(-.1, -.6), th)*scale, pos+Rot(vec2(-.1, -.9), th)*scale); // Antenna\n\n    Pos = pos+Rot(vec2(-.15, .3), th)*scale;\n    ret += DLine2(uv, Pos, pos+Rot(vec2(-.2, .4), th)*scale); // engine\n    ret += DLine2(uv, Pos, pos+Rot(vec2(.2, .4), th)*scale); // engine\n    ret += DLine2(uv, Pos, pos+Rot(vec2(.15, .3), th)*scale);\n\n    Pos = pos+Rot(vec2(-.15, .4), th)*scale; // plume\n    ret += DLine2(uv, Pos, pos+Rot(vec2(.0, 2.5+.7*Rnd(iTime)), th)*scale);\n    ret += DLine2(uv, Pos, pos+Rot(vec2(.15, .4), th)*scale);\n    \n    ret += DLine(uv, pos+Rot(vec2(.5, 0.), th)*scale, pos+Rot(vec2(.7, .6), th)*scale); // Rleg\n    ret += DLine(uv, pos+Rot(vec2(.8, .6), th)*scale, pos+Rot(vec2(.6, .6), th)*scale);\n    ret += DLine(uv, pos+Rot(vec2(-.5, .0), th)*scale, pos+Rot(vec2(-.7, .6), th)*scale); // Lleg\n    ret += DLine(uv, pos+Rot(vec2(-.8, .6), th)*scale, pos+Rot(vec2(-.6, .6), th)*scale);\n    return ret;\n}\n\n#define TER_AMP .1\n#define TER_AMP2 .15\nfloat Terrain2(int In) { return TER_AMP * Rnd(float(In)); }    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec4 PrevCol = texture(iChannel0, uv);\n    \n    uv.y = ASPECT * (1.-uv.y) * iResolution.y /iResolution.x;\n    float YMax = ASPECT * iResolution.y / iResolution.x;\n\n/*\n    vec2 Cursor = vec2(.7, .5*YMax);\n    for(float a = 0.; a < 2.*3.14159; a += .1)\n\t    fragColor += vec4(.7,0.05,0.,0.) * vec4(DLine2(uv, Cursor, vec2(.5+.2*cos(a+.1), .5*YMax+.2*sin(a+.1))));\n*/\n\n    vec3 Cam = vec3(2.1*iTime, .25+1.5*sin(iTime*.7), 1.+.1*sin(iTime));\n    \n\tfragColor = .6*vec4(DShip(uv+Cam.xy, vec2(.5+.05*sin(0.9*iTime), .3*YMax)+Cam.xy, 0.9*iTime, .04));\n    \n    #define STP 30.\n    #define STP2 (STP*.5)\n\n    int first = int(Cam.x - STP2*Cam.z) - 1;\n    int last = int(Cam.x + STP2*Cam.z) + 1;\n    float fstep = 1./(STP * Cam.z);\n    Cam.xy *= fstep;\n    \n    vec2 Cur = vec2(float(first)*fstep, Terrain2(first-1)/Cam.z);\n    for(int a = first; a < last; a++)\n    {\n        vec2 Next = vec2(Cur.x + fstep, Terrain2(a)/Cam.z);\n        vec2 Inter = vec2(Cur.x + .5*fstep, mix(Cur.y, Next.y, .5) + TER_AMP2*Terrain2(a+30));\n\t    fragColor += .8 * vec4(DLine(uv+Cam.xy, vec2(.5) + Cur, vec2(.5) + Inter));\n\t    fragColor += .8 * vec4(DLine(uv+Cam.xy, vec2(.5) + Inter, vec2(.5) + Next));\n        Cur = Next;\n    }\n    \n    fragColor = max(fragColor, .6*PrevCol);\n}\n\n\n\n\n\n\n\n\n","name":"Buffer D","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define ASPECT 1.3\n#define BLUR_R 30.8\n#define BLUR_SMP 12.\n#define BLUR_CURVE_POW 3.2\n#define BLOOM_AMOUNT 1.5\n\n#define Roundness .7\n#define Vignetting 1.2\n#define BorderSharpness .006\n\n#define SHARP 0.0045\n#define SHARPD (SHARP*512./iResolution.x)\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"// blur\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 col = vec4(0);\n    vec2 unit = 1.0 / iResolution.xy;\n    float count = 0.0;\n    for(float x = -BLUR_R; x < BLUR_R; x += (BLUR_R/BLUR_SMP))\n    {\n        float weight = pow(BLUR_R - abs(x), BLUR_CURVE_POW);\n        col += texture(iChannel0, uv + vec2(x * unit.x, uv.y * unit.y) ) * weight;\n        count += weight;\n    }\n\n    fragColor = col / count;\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// blur\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 col = vec4(0);\n    vec2 unit = 1.0 / iResolution.xy;\n    float count = 0.0;\n    for(float x = -BLUR_R; x < BLUR_R; x += (BLUR_R/BLUR_SMP))\n    {\n        float weight = pow(BLUR_R - abs(x), BLUR_CURVE_POW);\n        col += texture(iChannel0, uv + vec2(uv.x * unit.x, x * unit.y) ) * weight;\n        count += weight;\n    }\n\n    fragColor = col / count;\n}","name":"Buffer B","description":"","type":"buffer"}]}