{"ver":"0.1","info":{"id":"fllGz2","date":"1622446604","viewed":374,"name":"Organic Fabric multi-species","username":"fancyzero","description":"Organic Fabric Multi-Species\ncontrols:\n  R: restart simulation\n  you can use mouse click to clear a region\n  press 1~4 and mouse click, add species correspond to the number you pressed","likes":32,"published":1,"flags":48,"usePreview":0,"tags":["slime","organic","1","grow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Update: changed color pattern\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = pow( texture(iChannel0, fragCoord/iResolution.xy),vec4(0.88));\n    // try this different appearance \n    //fragColor = 1.-pow( texture(iChannel0, fragCoord/iResolution.xy),vec4(0.6));\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"\nconst float PHI = 1.61803398874989484820459; // Î¦ = Golden Ratio \n\n\nconst vec2 startPos = vec2(0.5,0.5);\nconst float AgentSize =3.;\nconst float speed =64.*0.016;\nconst float TreeSpread = 1.5;\n\nconst float TurnSpeed = 1.5;\n\nconst float BrancingProbability = 0.5;\n\n\nconst vec4 BrightColor1 = vec4(0.820,0.906,0.773,1.);\nconst vec4 DarkColor1 = vec4(0.392,0.725,0.631,1.);\n\n\nconst vec4 BrightColor2 = vec4(0.686,0.655,0.843,1.);   \nconst vec4 DarkColor2 = vec4(0.439,0.400,0.220,1.);\nconst vec4 BgColor1 = vec4(0.204,0.212,0.294,0.1);\nconst vec4 BgColor2 = vec4(0.310,0.490,0.631,0.1);\n    \n\n\nfloat gold_noise(in vec2 xy, in float seed)\n{\n    return fract(tan(distance(xy*PHI, xy)*seed)*xy.x);\n}\nvec2 randomDir2(vec2 uv, float seed )\n{\n    float x = gold_noise(uv, seed+1.0);\n    float y = gold_noise(uv, seed-2.0);\n    return normalize(vec2(x,y)-0.5);\n}\n\n\n\nvec2 rotvec2(vec2 o, float rad)\n{\n    return mat2x2(vec2(cos(rad), -sin(rad)),vec2(sin(rad),cos(rad))) * o;\n}\n\n\n\n\nstruct Agent\n{\n    vec2 pos;\n    float angle;\n    float size;\n    uint specie;\n};\n\nvec4 SaveAgent( Agent a)\n{\n    return vec4( a.pos, a.angle, a.size + float(a.specie * 100u));\n}\n\nAgent LoadAgent( vec4 v )\n{\n    Agent a;\n    a.pos = v.xy;\n    a.angle = v.z;\n    a.size = mod(v.w, 100.);\n    a.specie = uint(v.w/100.);\n\n    return a;\n}\n\nvec2 AngleToDir( float angle )\n{\n    return vec2( cos(angle), sin(angle));\n}\n\nfloat DirToAngle( vec2 dir )\n{\n    return atan( dir.y, dir.x );\n}\n\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float sense( vec2 pos, int range, vec4 specieMask)\n{\n    //pos/=2.;\n    vec4 v=vec4(0.);\n    for ( int i = -range; i <=range; i++)\n    {\n        for (int j = -range; j <=range; j++)\n        {\n            v += texelFetch( iChannel1, ivec2(pos)+ivec2(i,j), 0);\n        }\n    }\n    return dot(v,specieMask);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0,0.0,0.0,0.0);\n    vec2 uv = fragCoord / iResolution.y;\n\n    if ( iFrame == 0 || texelFetch(iChannel2, ivec2(82,1),0 ).x > 0.)\n    {\n     \n         vec2 center1 =  iResolution.xy/iResolution.y;\n         vec2 center2 =  vec2(iResolution.x,0.)/iResolution.y;\n         vec2 center3 =  vec2(0,iResolution.y)/iResolution.y;\n         vec2 center4 =  vec2(0.,0.);\n         vec2 p = fragCoord/iResolution.y;\n         \n        float l1 = distance(p,center1);\n        float l2 = distance(p,center2);\n        float l3 = distance(p,center3);\n        float l4 = distance(p,center4);\n        \n        uint specie = 0u;\n        vec2 center = center1;\n        if (l1 <= l2 && l1 <= l3 && l1 <= l4 )\n        {\n                 specie = 0u;\n               center = center1;\n        }\n        if (l2 <= l1 && l2 <= l3 && l2 <= l4 )\n        {\n             specie = 1u;\n               center = center2;\n        }\n        if (l3 <= l1 && l3 <= l2 && l3<= l4 )\n        {\n             specie = 2u;\n               center = center3;\n        }\n        if (l4 <= l1 && l4 <= l2 && l4 <= l3 )\n        {\n             specie = 3u;\n               center = center4;\n        }        \n          \n        //center = center1;\n         vec2 dir = vec2(p - center)*50.;\n         float l = length(dir);\n         dir = normalize(dir);\n         Agent a;\n         a.pos = fragCoord;\n         a.angle = DirToAngle(vec2(dir.x, dir.y) );\n         a.size = AgentSize * step(l, 2.0);\n         a.specie = specie;//uint(clamp(gold_noise(fragCoord,iTime+90.11)*5.,0.,3.99999));\n        fragColor = SaveAgent(a)* step(l, 2.0);\n        \n          return;        \n    }\n    else \n    {\n    \n   \n        int count = 0;\n        Agent savedAgent=LoadAgent(vec4(0.));\n            \n         float d = sign(gold_noise(fragCoord , iTime+0.32123)-0.5);\n         if ( d == 0. ) d = 1.;\n        \n        for ( int i = -2; i <=2; i++)\n        {\n            for (int j = -2; j <=2; j++)\n            {\n                \n                Agent agent = LoadAgent(texelFetch( iChannel0, ivec2(fragCoord)+ivec2(i,j)*int(d), 0));\n                vec2 previousPos = agent.pos + AngleToDir(agent.angle)*-speed;\n                Agent agentNew = agent;\n                agentNew.pos += AngleToDir(agentNew.angle)*speed;\n                \n\n                if ( agentNew.size > 0.99 && int(fragCoord.x) == int(agentNew.pos.x) && int(fragCoord.y) == int(agentNew.pos.y))\n                {\n                    // randomly nudge the dir\n                    agentNew.angle += (gold_noise(fragCoord,iTime)-0.5)*TreeSpread;\n\n                    savedAgent = (agentNew);\n                }\n                float bp = BrancingProbability ;\n\n\n                if ( agent.size > 0.99 && int(previousPos.x) == int(fragCoord.x) && int(previousPos.y) == int(fragCoord.y)  && gold_noise(fragCoord,iTime+4.3) > bp )\n                {\n                    \n                    savedAgent = (agent);\n                    savedAgent.size = AgentSize;// gold_noise(fragCoord, iTime*88.9)*3.+1.;//clamp(savedAgent.size-1.,1.,10.);\n                    \n                }\n            }\n        }\n        \n        \n        if (savedAgent.size > 0.99)\n        {\n            // new dir based on sense\n            int senseRange =4;\n            float senseDist = float(senseRange)*2.+1.;\n            vec2 fwd = AngleToDir( savedAgent.angle);\n            vec2 turnL = AngleToDir( savedAgent.angle+3.1415/3.);\n            vec2 turnR = AngleToDir( savedAgent.angle-3.1415/3.);\n            \n            vec4 scoreMask[4] = vec4[4](vec4(1,-1,-1,-1),vec4(-1,1,-1,-1),vec4(-1,-1,1,-1),vec4(-1,-1,-1,1));\n            float fc = sense(fragCoord+fwd*senseDist, senseRange,scoreMask[savedAgent.specie]);\n            float lc = sense(fragCoord+turnL*senseDist, senseRange,scoreMask[savedAgent.specie]);\n            float rc = sense(fragCoord+turnR*senseDist, senseRange,scoreMask[savedAgent.specie]);\n\n            if (fc >= lc && fc >= rc )\n            {\n                //keep moving\n            }\n            else if ( lc > rc )\n            {\n                savedAgent.angle +=TurnSpeed;\n            }\n            else\n                savedAgent.angle -=TurnSpeed;\n        }  \n        fragColor = SaveAgent(savedAgent);\n        \n        vec4 key1 = texelFetch( iChannel2,ivec2(49,0), 0);\n        vec4 key2 = texelFetch( iChannel2,ivec2(50,0), 0);\n        vec4 key3 = texelFetch( iChannel2,ivec2(51,0), 0);\n        vec4 key4 = texelFetch( iChannel2,ivec2(52,0), 0);\n        if (length (fragCoord - iMouse.zw) < iResolution.x/8. && length(iMouse.zw )> 1.)\n        {\n\n             if ( key1.x + key2.x + key3.x  + key4.x == 0. )   \n                fragColor =  vec4(0.);//SaveAgent(addAgent);\n        }\n        \n        if (length (fragCoord - iMouse.zw) < 10. && length(iMouse.zw )> 1.)\n        {\n\n            Agent a;\n            a.pos = fragCoord;\n            //a.angle = gold\n\n             a.angle = DirToAngle(normalize(fragCoord - iMouse.zw));\n             a.size = AgentSize ;//\n             \n            if ( key1.x > 0. )\n                a.specie = 0u;\n            if ( key2.x > 0. )\n                a.specie = 1u;\n            if ( key3.x > 0. )\n                a.specie = 2u;\n            if ( key4.x > 0. )\n                a.specie = 3u;       \n                \n            if ( key1.x + key2.x + key3.x  + key4.x > 0. )\n                fragColor =  SaveAgent(a);\n         }\n                      \n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    float scale = 1.;//+12.*((sin(iTime*5.)+1.)*0.5);\n    \n    int kernelSize = int(AgentSize);\n\n    if (kernelSize <1)\n        kernelSize = 1;\n\n    \n    \n        bool found = false;\n        float foundDist = 10000.;\n        vec2 angle ;\n        Agent foundAgent;\n\n        for ( int i = -kernelSize; i <=kernelSize; i++)\n        {\n            for (int j = -kernelSize; j <=kernelSize; j++)\n            {\n                if (j*j + i*i < kernelSize*kernelSize )\n                {\n                    Agent agent = LoadAgent(texture(iChannel0, (fragCoord+vec2(float(i),float(j)))/iResolution.xy));\n                    if ( (agent.size) > 1.)\n                    {\n                        \n                        float dist = length(vec2(float(i),float(j)));\n                        if ( dist < foundDist && dist <= agent.size)\n                        {\n                            foundAgent = agent;\n                            found = true;\n                            foundDist = dist;\n                         }\n                        angle = normalize(vec2(float(i),float(j)));\n\n                    }\n                }\n                \n            }\n        }\n\n        vec4 oldColor = pow(texture(iChannel1, fragCoord/iResolution.xy),vec4(1.005));\n        \n        if (found)\n        {\n            vec4 specieMasks[4] = vec4[4](vec4(1,0,0,0),vec4(0,1,0,0),vec4(0,0,1,0),vec4(0,0,0,1));\n            float a = 0.5*(dot(angle, normalize(vec2(1.,0.))) + 1.)*smoothstep(0.,float(kernelSize),foundDist);\n            a = clamp(a,0.,1.);\n            \n            \n            \n            vec4 specieBrightColors[4] = vec4[4](vec4(0.561,0.337,0.337,0),vec4(0.161,0.184,0.157,0),vec4(0.024,0.027,0.318,0),vec4(0.153,0.220,0.227,0));\n            vec4 specieDarkColors[4] = vec4[4](vec4(0.941,0.498,0.498,0),vec4(0.439,0.894,0.345,0),vec4(0.431,0.439,0.906,0),vec4(0.780,0.835,0.839,0));\n            \n            \n            vec4 darkColor = specieDarkColors[foundAgent.specie];\n            vec4 brightColor = specieBrightColors[foundAgent.specie];\n             \n            float blendIn = smoothstep(float(kernelSize),0.,foundDist);\n            blendIn = clamp(blendIn, 0.,1.);\n            fragColor = mix(oldColor,mix(darkColor, brightColor,a),blendIn );\n        }\n        else\n            fragColor = oldColor;\n            \n        vec4 key1 = texelFetch( iChannel2,ivec2(49,0), 0);\n        vec4 key2 = texelFetch( iChannel2,ivec2(50,0), 0);\n        vec4 key3 = texelFetch( iChannel2,ivec2(51,0), 0);\n        vec4 key4 = texelFetch( iChannel2,ivec2(52,0), 0);            \n        if (length (fragCoord - iMouse.zw) < iResolution.x/8. && length(iMouse.zw )> 1.)\n        {\n            \n            if ( key1.x + key2.x + key3.x  + key4.x == 0. )   \n                fragColor =  vec4(0.);//SaveAgent(addAgent);\n        }  \n        \n        if (texelFetch(iChannel2, ivec2(82,1),0 ).x > 0.)\n        {\n            fragColor *= 0.1;\n        }\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 specieMasks[4] = vec4[4](vec4(1,0,0,0),vec4(0,1,0,0),vec4(0,0,1,0),vec4(0,0,0,1));\n    //fragCoord *=2.;\n    \n    Agent a1 = LoadAgent(texelFetch(iChannel0, ivec2(fragCoord) + ivec2(0,0),0));\n    //Agent a2 = LoadAgent(texelFetch(iChannel0, ivec2(fragCoord) + ivec2(1,0),0));\n    //Agent a3 = LoadAgent(texelFetch(iChannel0, ivec2(fragCoord) + ivec2(0,1),0));    \n    //Agent a4 = LoadAgent(texelFetch(iChannel0, ivec2(fragCoord) + ivec2(1,1),0));\n    \n    \n    fragColor =  specieMasks[a1.specie]*sign(a1.size);\n    //fragColor += specieMasks[a2.specie]*sign(a2.size);\n    //fragColor += specieMasks[a3.specie]*sign(a3.size);\n    //fragColor += specieMasks[a4.specie]*sign(a4.size);\n    \n    \n}","name":"Buffer C","description":"","type":"buffer"}]}