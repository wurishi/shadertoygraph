{"ver":"0.1","info":{"id":"WsBcDw","date":"1586720817","viewed":152,"name":"Ævil studio in 3D™ !","username":"sukupaper","description":"Ævil studio logo in 3D","likes":7,"published":1,"flags":32,"usePreview":0,"tags":["raymarching","logo","logotype","gear"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    \n    vec2 st = fragCoord/iResolution.xy;\n    float aa = 1./iResolution.x;\n    \n\tvec3 c;\n    \n    c.r = texture(iChannel0,st + vec2(aa,0.)).r;\n    c.g = texture(iChannel0,st + vec2(-aa,-aa)).g;\n    c.b = texture(iChannel0,st + vec2(0.,aa)).b;\n    \n    mat3 conv = mat3(\n    \t1,2,1,\n        2,4,2,\n        1,2,1\n    );\n    #define BLUR_DEF 4\n    #define BLUR_POW 3.\n    vec3 cSum = vec3(0.);\n    for(int k = 1; k <= BLUR_DEF; k++) {\n        for(int i = -1; i < 2; i++) {\n            for(int j = -1; j < 2; j++) {\n                vec2 relCoord = vec2(float(i),float(j))*BLUR_POW;\n                cSum += texture(iChannel0,st + relCoord*aa*float(k)).rgb\n                    *conv[int(relCoord.x)][int(relCoord.y + 1.)];\n            }\n        }\n    }\n    cSum /= 16.*float(BLUR_DEF);\n    \n    \n    vec3 finalC = (c + cSum*2.)*.35;\n    \n    //finalC *= step(.15,st.y)*step(st.y,.85);\n\n    fragColor = vec4(finalC*1.5,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Author:\n// Title:aevil studio\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\n\nmat2 rot(float a) {\n    float c = cos(a), s = sin(a);\n    return mat2(c,s,-s,c);\n}\n\nfloat opExtrusion(vec3 p, float d, float h) {\n    vec2 w = vec2( d, abs(p.z) - h );\n    return min(max(w.x,w.y),0.0) + length(max(w,0.0));\n}\n\nfloat t;\nfloat engre(vec2 p) {\n    float a = atan(p.x,p.y);\n    float d1 = length(p) - .2 - clamp(cos(a*12.)*.03,-.02,.01);\n    float d2 = length(p) - 0.044;\n    return max(d1,-d2);\n}\n\nvec3 map;\nfloat df(vec3 p) {\n    //float md = .5; p.xy = mod(p.xy - md*.5,md) - md*.5; //infinite gears !!\n    p.xz *= rot(t*.52);\n    p.xy *= rot(t*.52);\n    p.yz *= rot(t*.52);\n    map = p;\n    return opExtrusion(p,engre(p.xy),.02 + .01*step(0.,abs(length(p.xy) - 0.13) - .019));\n}\n\n#define EPSI .001\nvec3 normal(vec3 p){\n    vec2 u = vec2(0.,1.);\n    return normalize(vec3(\n        df(p + EPSI*u.yxx) - df(p),\n        df(p + EPSI*u.xyx) - df(p),\n        df(p + EPSI*u.xxy) - df(p)\n    ));\n}\n\n#define MIN_DIST 0.\n#define MAX_DIST 1.\n#define MAX_STEPS 60\n#define LIM EPSI\nvec4 rm(vec3 c, vec3 r) {\n    vec3 color = vec3(.0);\n    vec3 p = c + r*MIN_DIST;\n    for(int i = 0; i < MAX_STEPS; i++) {\n        float d = df(p);\n        if(d < LIM) {\n            vec3 lMap = map;\n            vec3 n = normal(p);\n            vec3 l = normalize(vec3(1.,1.,-1.));\n            color = vec3(0.341, 0.274, 0.482)*(.2 + .8*dot(n,l));\n            color = mix(color, vec3(1.), clamp(pow(dot(n,l),8.),0.,1.));\n            float ctrl = fract(length(lMap.xy)*15. - t*.75);\n            color = mix(vec3(0.439, 0.972, 0.729)*ctrl,color,step(0.,abs(length(lMap.xy) - 0.13) - .019));\n            return vec4(color,1.);\n        }\n        if(distance(c,p) > MAX_DIST) return vec4(color,0.);\n        p += d*r*.5;\n    }\n    return vec4(color,0.);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 st = fragCoord.xy/iResolution.xy - .5;\n    st.x *= iResolution.x/iResolution.y;\n\tt = iTime;\n    \n    vec3 c = vec3(0.,0.,(-.7));\n    vec3 r = normalize(vec3(st,1.));\n    \n    vec4 color = rm(c,r);\n\n    fragColor = vec4(color);\n}","name":"Buffer A","description":"","type":"buffer"}]}