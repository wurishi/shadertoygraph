{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"const vec3 cameraPosition = vec3(0.5, 0.5, 1);\n\n//Ray-Sphere intersection\nfloat intersect(vec3 rayOrigin, vec3 rayDir, vec3 sphereCenter, float radius)\n{\n  float a = dot(rayDir, rayDir);\n  float b = dot(rayOrigin - sphereCenter, rayDir);\n  float c = dot(rayOrigin - sphereCenter, rayOrigin - sphereCenter) - radius*radius;\n  \n  float discr = b*b - a*c;\n  if(discr < 0.0)\n    return -1.0;\n  \n    discr = sqrt(discr);\n    float t0 = (-b - discr) / a;\n    float t1 = (-b + discr) / a;\n  \n\treturn min(t0, t1);\n}\n\n//Blinn-Phong shading\nvec4 getColor(vec3 p, vec3 center, vec4 diffuseColor, vec3 lightPosition)\n{\n  vec3 n = p - center;\n  n = normalize(n);\n  vec3 l = lightPosition - p;\n  l = normalize(l);  \n  vec3 v = cameraPosition - p;\n  v = normalize(v);\n  vec3 h = v + l;\n  h = normalize(h);\n  return diffuseColor * max(0.0, dot(n,l)) + vec4(1.0,1.0,1.0,1.0) * max(0.0, pow(dot(n,h), 100.0));\n}  \n\n//Sphere intersect and shade\nvec4 drawSphere(vec3 rayDir, vec3 pos, float r, vec4 color, vec3 light, out float t, out vec3 p)\n{\n  vec4 outColor = vec4(-1,-1,-1,-1); \t\n  t = intersect(cameraPosition, rayDir, pos, r);\n  if(t > -1.0)\n  {\n\tp = cameraPosition + t*rayDir;  \n    outColor = getColor(p, pos, color, light);\t\n  }\n  return outColor;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec3 normalizedPosition = vec3(fragCoord.xy / iResolution.x, 0);\n  vec2 normalizedMouse = iMouse.xy / iResolution.x;\n  vec3 rayDir = normalizedPosition - cameraPosition;\n  rayDir = normalize(rayDir);\n\n  vec4 outColor = vec4(0.0,0.0,0.0,1);  \t\n\n  //Light\n  vec3 lPos = vec3(2.5, 4.0, 0.0);\t\n\t\n  //Central sphere\n  vec3 sPos = vec3(normalizedMouse.x * cos(iTime) + 0.5,0.8,-5.0 + normalizedMouse.y *sin(iTime));\n  float sR = 0.55;\n  vec4 sColor = vec4(1.0,0.0,0.0,1.0);\n  float sT;\n  vec3 sP;\t\n  vec4 sShadeColor = drawSphere(rayDir, sPos, sR, sColor, lPos, sT, sP);\n  if(sShadeColor.x > -1.0)\n    outColor = sShadeColor;\t\n  \t\n  //Oscillating spheres\n  for(int z=10; z >= 0; z--)\n  {\n  \tfor(int x = -5; x < 5; x++)\n\t{\n  \t\tvec3 pos = vec3(x ,sin(iTime + float(z)/3.0 + float(x)/3.0) - 1.5,-z);\n  \t\tfloat r = 0.15;\n\t\tvec4 color = vec4(0.0,0.5,0.5,1.0);\n  \t\tfloat t;\n\t\tvec3 p;\n  \t\tvec4 sphereColor = drawSphere(rayDir, pos, r, color, lPos, t, p);\n  \t\tif(sphereColor.x > -1.0)\n\t\t{\n    \t\toutColor = sphereColor;\n\t\t\n\t\t\t//Shadow\n\t\t\tvec3 shadowDir = normalize(lPos - p);\n\t\t\tfloat tShadow = intersect(p, shadowDir, sPos, sR);\n\t\t\tif(tShadow > -1.0)\n\t\t\t\toutColor = vec4(0.1,0.1,0.1,1.0);\n\t\t}\n\t\n\t}\n  }\n\t\n  fragColor = outColor;\n  \n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"lsX3W7","date":"1371694996","viewed":184,"name":"Shadow oscillations","username":"aaecheve","description":"Oscilating spheres with shadow. Drag mouse to modify red sphere movement ","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["raytracing","shadows"],"hasliked":0,"parentid":"","parentname":""}}