{"ver":"0.1","info":{"id":"NlfcDX","date":"1648782282","viewed":121,"name":"Triangle Trachea","username":"uiop","description":"just some repeated rotations. I tried to do shadows. Slow.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 rotx(vec3 p, float a){\n    float s = sin(a);\n    float c = cos(a);\n    return(vec3(p.x*c+p.y*s,-p.x*s+p.y*c,p.z));\n}\n\nvec3 radialz(vec3 p, float n,float r){\n    float dir = atan(p.x,p.y)+r;\n    float len = length(vec2(p.x,p.y));\n    dir = abs(mod(dir,3.141592f*2.0f/n)-3.141592f/n);\n    return vec3(sin(dir)*len, cos(dir)*len, p.z);\n}\nvec3 radialz2(vec3 p, float n,float r){\n    float dir = atan(p.x,p.y)+r;\n    float len = length(vec2(p.x,p.y));\n    dir = mod(dir,3.141592f*2.0f/n)-3.141592f/n;\n    return vec3(sin(dir)*len, cos(dir)*len, p.z);\n}\nfloat sdSph(vec3 p, float r){\n    return length(p) - r;\n}\n\nvec4 getSDF(vec3 p,float time){\n    vec3 pos = p;\n    float s = 0.5;\n    vec4 col = vec4(0,0,0,0);\n    vec4 mint = vec4(col.r,col.g,col.b,100000.0);\n    for(int i = 0; i < 13; i++){\n        pos = radialz(pos,3.,time*0.11).xyz-s*vec3(0.0,0.4,0.0);\n        pos = rotx(pos.xzy,time*0.1);\n        pos = rotx(pos.zyx,time*0.456);\n\n        s = s*(0.65+0.10*cos(0.5301*time));\n        if(sdSph(pos,s*0.3) < mint.w){\n            mint = vec4(float(i)*3.1*length(pos),float(i)*0.05,1.-float(i)*0.06,sdSph(pos,s*0.3));\n        }\n\n    }\n    return mint;\n    \n}\n\nvec3 findNormal(vec3 p, float d,float t){\n    return normalize(vec3(getSDF(p + vec3(d,0,d),t).w - getSDF(p - vec3(d,0,0),t).w,\n    getSDF(p + vec3(0,d,0),t).w - getSDF(p - vec3(0,d,0),t).w,\n    getSDF(p + vec3(0,0,d),t).w - getSDF(p - vec3(0,0,d),t).w\n    ));\n}\n\nvec3 refl(vec3 d, vec3 n){\n    return d - 2.f * n * dot(d,n);\n}\n\nvec4 marchRay(inout vec3 pos, vec3 dir, int ma, float time, out bool hit){\n    float mindist = 100000.;\n    hit = false;\n    vec4 newcol;\n    for(int i = 0; i < ma; i ++){\n        vec4 oc = getSDF(pos,time);\n        newcol = oc;\n        float dis = oc.w;\n        mindist = min(dis,mindist);\n        if(dis < 0.0001){\n            hit = true;\n            return vec4(newcol.xyz,mindist);\n        }\n        if(dis > 2.){\n            return vec4(newcol.xyz,mindist);\n        }\n        pos += dir * dis;\n    }\n    return vec4(newcol.xyz,mindist);\n\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float speed = 0.96;\n    float time = iTime*speed+44.5;\n\n    vec2 uv = (fragCoord-0.5f*iResolution.xy)/iResolution.x;\n    \n    vec3 pos = vec3(0.0*sin(time*0.1f),1.3*cos(time*0.18f),-1.3*sin(time*0.18f));\n    vec3 dir = normalize(rotx(vec3(uv.x,uv.y,-1.).zxy,time*0.18f).zxy);\n    vec3 sunDir = normalize(rotx(vec3(1,1,1),time*0.18f).zxy);\n    int ma =200;\n    vec4 col = vec4(0,0,0,0);\n\n    bool hit;\n    vec4 co = marchRay(pos,dir,200,time,hit);\n    if(hit){\n        col = co;\n        pos = pos - dir*0.0002;\n        vec4 co2 = marchRay(pos,sunDir,100,time,hit);\n        if(hit){\n            col *= vec4(0.6,0.7,0.5,0.5);\n        }else{\n        \n        }\n       \n    }else{\n    float mindist = co.w *10.;\n        col = vec4(1.-.15/mindist,1.-.04/mindist,1.-.05/mindist,1.);\n    }\n    \n    fragColor = vec4(col.xyz,1.0);\n}","name":"Image","description":"","type":"image"}]}