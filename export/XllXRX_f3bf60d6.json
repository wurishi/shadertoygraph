{"ver":"0.1","info":{"id":"XllXRX","date":"1438892635","viewed":136,"name":"asdfasdfasf","username":"jnalanko","description":"asdfasdfasd","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["asdfasf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"float sdf(vec4 p){\n\treturn length(p) - 1.0;   \n}\n\n// Clamped dot\nfloat cdot(vec3 a, vec3 b){\n    return max(0.0,dot(a,b));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Sphere at origin\n    \n    float aspect_ratio = 16.0/9.0;\n    float radius = 5.0;\n\tvec2 pixel_pos = fragCoord.xy / iResolution.xy; // [0,1]\n    pixel_pos -= vec2(0.5,0.5); // [-1/2, 1/2]\n    pixel_pos *= vec2(2,2); // [-1,1]\n    pixel_pos.x *= aspect_ratio;\n    vec3 ray = vec3(pixel_pos.x, pixel_pos.y,-1);\n    vec3 p = vec3(0,0,0); // Center of sphere\n    vec3 v = ray;\n    vec3 v_0 = vec3(0,0,5); // Camera position\n    \n    float sun_intensity = 70.0;\n    vec3 sun = vec3(30.0 * sin(iTime),20,30.0*cos(iTime));\n    // Phong model parameters\n    // Phong: k_s * cos(alpha)^q * intensity / r^2\n    float k_s = 10.0;\n    float q = 2.0;    \n    \n    // Compute intersection\n    float D = 4.0 * dot(v,v_0) * dot(v,v_0) - 4.0*dot(v,v)*(dot(v_0,v_0) - radius);\n    if(D < 0.0) // No hit\n        fragColor = vec4(0,0,0,0);\n    else{\n        float t1 = (-2.0 * dot(v,v_0) + sqrt(D)) / (2.0 * dot(v,v));\n        float t2 = (-2.0 * dot(v,v_0) - sqrt(D)) / (2.0 * dot(v,v));\n        vec3 surface = v_0 + min(t1,t2) * v;  // note: negative t not handled\n        vec3 normal = surface / length(surface);\n        vec3 l = surface - sun; // Sun to surface\n        float intensity_at_surface = sun_intensity / dot(l,l); // Inverse square decay\n        \n    \tvec3 l_prime = l + 2.0*dot(l,normal)*normal;\n        vec3 to_camera = v_0 - surface;\n        float cos_angle = cdot(-l_prime, to_camera)/(length(l_prime) * length(to_camera));\n        float specular = k_s * pow(cos_angle,q) * intensity_at_surface;\n        float diffuse = 0.2 * cdot(normal, -l) * intensity_at_surface;\n        float ambient = 0.05;\n        vec3 light = vec3(clamp(diffuse + specular + ambient,0.0,1.0));\n        fragColor = vec4(light,1);\n    }\n\n}\n\n","name":"","description":"","type":"image"}]}