{"ver":"0.1","info":{"id":"llBXWV","date":"1446489230","viewed":379,"name":"Exit Sunlight","username":"felixfaire","description":"Very quick attempt to mimic a photograph by Marcus W. :P","likes":15,"published":1,"flags":0,"usePreview":0,"tags":["horizon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"vec3 col1 = vec3( 0.938, 0.678, 0.375 );\nvec3 col2 = vec3( 0.455, 0.456, 0.55 );\n\nfloat hillSoftening = 0.01;\nfloat reflectionSoftening = 0.1;\n\n\n \nfloat hash( float n )\n{\n    return fract(sin(n)*43758.5453);\n}\n \nfloat noise( in vec2 x )\n{\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n        f = f*f*(3.0-2.0*f);\n        float n = p.x + p.y*57.0;\n        float res = mix(mix( hash(n+  0.0), hash(n+  1.0),f.x), mix( hash(n+ 57.0), hash(n+ 58.0),f.x),f.y);\n        return res;\n}\n \nfloat fbm( vec2 p )\n{\n        float f = 0.0;\n        f += 0.50000*noise( p ); p = p*2.02;\n        f += 0.25000*noise( p ); p = p*2.03;\n        f += 0.12500*noise( p ); p = p*2.01;\n        f += 0.06250*noise( p ); p = p*2.04;\n        f += 0.03125*noise( p );\n        return f/0.984375;\n}\n\n\n\nvec4 mod289(vec4 x)\n{\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n \nvec4 permute(vec4 x)\n{\n    return mod289(((x*34.0)+1.0)*x);\n}\n \nvec4 taylorInvSqrt(vec4 r)\n{\n    return 1.79284291400159 - 0.85373472095314 * r;\n}\n \nvec2 fade(vec2 t) {\n    return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n\nfloat pnoise(vec2 P, vec2 rep)\n{\n    vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);\n    vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);\n    Pi = mod(Pi, rep.xyxy); // To create noise with explicit period\n    Pi = mod289(Pi);        // To avoid truncation effects in permutation\n    vec4 ix = Pi.xzxz;\n    vec4 iy = Pi.yyww;\n    vec4 fx = Pf.xzxz;\n    vec4 fy = Pf.yyww;\n     \n    vec4 i = permute(permute(ix) + iy);\n     \n    vec4 gx = fract(i * (1.0 / 41.0)) * 2.0 - 1.0 ;\n    vec4 gy = abs(gx) - 0.5 ;\n    vec4 tx = floor(gx + 0.5);\n    gx = gx - tx;\n     \n    vec2 g00 = vec2(gx.x,gy.x);\n    vec2 g10 = vec2(gx.y,gy.y);\n    vec2 g01 = vec2(gx.z,gy.z);\n    vec2 g11 = vec2(gx.w,gy.w);\n     \n    vec4 norm = taylorInvSqrt(vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11)));\n    g00 *= norm.x;  \n    g01 *= norm.y;  \n    g10 *= norm.z;  \n    g11 *= norm.w;  \n     \n    float n00 = dot(g00, vec2(fx.x, fy.x));\n    float n10 = dot(g10, vec2(fx.y, fy.y));\n    float n01 = dot(g01, vec2(fx.z, fy.z));\n    float n11 = dot(g11, vec2(fx.w, fy.w));\n     \n    vec2 fade_xy = fade(Pf.xy);\n    vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);\n    float n_xy = mix(n_x.x, n_x.y, fade_xy.y);\n    return 2.3 * n_xy;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 col = vec3( 0.0 );\n    \n    if (abs(uv.x) < 1.0)\n    {\n\n    \n    \t// add sky\n    \tcol += mix( col1, col2, abs(uv.y) ) + 0.2;\n    \tcol += mix( vec3(1.0), vec3(0.3), abs((uv.y - 0.45) * 1.5) ) * 0.3;\n\n    \t// add hills\n    \tfor (int i = 0; i < 2; i++)\n    \t{\n        \tfloat edge = fbm( vec2(0.0, uv.x * 3.0 + float(i)) ) * 0.15 + 0.1;\n    \t\tif (uv.y < edge + hillSoftening && uv.y > 0.0)\n        \t\tcol -= 0.8 * smoothstep( edge + hillSoftening, edge, uv.y );\n    \t}\n\n    \t// add vignette\n    \tfloat r = length( uv );\n    \tcol -= r * r * 0.2;\n    \n    \tfloat dist = 1.0 - abs(uv.y) * 0.9;\n    \tuv.y *= 0.9;\n    \n    \t// add shadows\n    \tif (uv.y < 0.1)\n    \t{\n        \tuv.x *= dist * 1.2;\n        \tcol -= 0.6 * smoothstep(-0.3, 0.1, uv.y);\n        \n        \tfloat sand = pnoise(vec2(uv.x * 3.5 * dist + dist * 100.0, uv.y * 40.0 * dist), vec2(100.0, 100.0)) - \n            \t\t pnoise(vec2(uv.x * 5.0 * dist * dist * dist, uv.y * 1.0 * dist), vec2(100.0, 100.0));\n     \t\tif (sand > 0.4)\n            \tcol -= smoothstep(0.4, 0.7, dist) * 0.2 * smoothstep( 0.4, 0.8, sand); \n\n    \t}\n\n    \t// warp reflections\n    \tif (uv.y < 0.0)\n    \t{\n    \t\tuv.x += 0.05 * pnoise(vec2(uv.x * 10.0 * dist, uv.y * 100.0 * dist + iTime * 0.5), vec2(100.0, 100.0));\n    \t\tuv.y += 0.04 * pnoise(vec2(uv.x * 10.0 * dist, uv.y * (100.0 * dist + 20.0) + iTime * 0.5), vec2(50.0, 100.0)) * (0.5 + abs(uv.x) * 2.0) - 0.05;\n    \t}\n    \n   \t\t// add mountain reflections\n    \tfor (int i = 0; i < 2; i++)\n    \t{\n        \tfloat edge = fbm( vec2(0.0, uv.x * 3.0 + float(i)) ) * 0.1 + 0.1;\n \n        \tif (uv.y > -edge - reflectionSoftening && uv.y < 0.1)\n        \t\tcol -= 0.3 * smoothstep( -edge - reflectionSoftening, -edge, uv.y );\n    \t}\n    \n    \t// highlights\n    \tcol -= smoothstep( 0.5, 0.0, abs(uv.y + 0.6) ) * 0.2;\n    \tcol += smoothstep( 0.3, 0.0, abs(uv.y + 0.3) ) * 0.1;\n    \tcol -= smoothstep( 0.6, 0.0, abs(uv.y + 1.0) ) * 0.1;\n    \tcol.z += 0.05 * (1.0 - dist);\n    }\n    \n\tfragColor = vec4(col,1.0);\n}","name":"","description":"","type":"image"}]}