{"ver":"0.1","info":{"id":"DtdBR4","date":"1701017480","viewed":81,"name":"lissajous 3D","username":"Efim","description":"https://mathcurve.com/courbes3d.gb/lissajous3d/lissajous3d.shtml","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","sdf","curve","lissajous"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//https://mathcurve.com/courbes3d.gb/lissajous3d/lissajous3d.shtml\n\n#define PI  3.141592\n#define TAU 6.283185\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n\nconst float dist_infin = 4.0;\n#define nn 100\nconst float eps = 0.001;\nfloat sdf(vec3 p, float a, float b, float m, float n)\n{\n    float fi = atan(p.y, p.x); //aafi(p.xy)\n    float w = dist_infin;\n    for (float i = 0.; i < 10.; i++ )\n    {\n        if (mod(i,m) == 0.0 && i > 0.)\n            break;\n        float t = (fi + TAU*i)/m;    \n        float wt = abs(p.z - b*sin(n*t));\n        w = min(w, wt);\n    }\n    float r = length(vec2(length(p.xy) - a, w))/2.0;\n    return r - 0.015;\n}\n\nfloat map( in vec3 pos )\n{\n    return sdf(pos, .9, .4, 3.5, 9.);\n}\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal( in vec3 pos )\n{\n    const float h = 0.0001; // replace by an appropriate value\n    const vec2 k = vec2(1,-1);\n    return normalize( k.xyy*map(pos + k.xyy*h ) + \n                      k.yyx*map(pos + k.yyx*h ) + \n                      k.yxy*map(pos + k.yxy*h ) + \n                      k.xxx*map(pos + k.xxx*h ) );\n}\n\nstruct HIT\n{\n    float dist;\n    vec3 nor;\n    vec3 pos;\n};\nconst HIT hit_inf = HIT(dist_infin, vec3(0.0), vec3(0.0));\n\nHIT giper3D(vec3 ro, vec3 rd)\n{\n    float t  = 0.;\n    for (int i = 0; i < nn; i++)\n    {\n        vec3 pos = ro + rd*t;\n        float h = map(pos);\n        if (h < eps || t >= dist_infin)\n            break;\n        t += h;  \n    }    \n\n    if (t >= dist_infin)\n        return hit_inf;\n      \n    vec3 pos = ro + t*rd;\n    vec3 nor = calcNormal(pos);\n    return HIT(t, nor, pos);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 \n        f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u;\n    return normalize(i);\n}\n\n#if HW_PERFORMANCE==0\n#define AA 1\n#else\n#define AA 2\n#endif\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 light = normalize(vec3(0.0, 1.0, 1.0)); //light\n    vec3 light2 = normalize(vec3(0.0, 1.0, -1.0)); //light\n    vec3 ro = vec3(0.0, 0.0, 2.0); // camera\n    float t = iTime;\n    //camera rotation\n    vec2 m = vec2(.0, .0);\n    if  (iMouse.z > 0.0)\n    {\n        m = (-iResolution.xy + 2.0*(iMouse.xy))/iResolution.y;\n        ro.yz *= rot(-m.y*PI);\n        ro.xz *= rot(m.x*TAU);\n    }\n    else\n    {\n        float an = 0.5*(iTime-10.0);\n        ro = 2.*vec3( 1.0*cos(an), 0.0, 1.0*sin(an) );\n    }\n    \n    const float fl = 1.5; // focal length\n    float dist = dist_infin;\n    vec3 tot = vec3(0.0);\n    \n    \n    //antiblick\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord+o))/iResolution.y;\n        vec3 rd = GetRayDir(p, ro, vec3(0,0.,0), fl); //ray direction\n        vec3 col = vec3(0.0);\n        \n        HIT giper = giper3D(ro, rd);\n        if (giper.dist < dist)\n        {\n            vec3 nor = giper.nor;\n            //float dif = clamp( dot(nor,vec3(0.57703)), 0.0, 1.0 );\n            //float amb = 0.5 + 0.5*dot(nor,vec3(0.0,1.0,0.0));\n            //col = vec3(0.2,0.3,0.4)*amb + vec3(0.85,0.75,0.65)*dif;\n            \n            float dif = clamp( dot(nor,light), 0.2, 1.0 );\n            float amb = 0.5 + 0.5*dot(nor,light2);\n            col = vec3(0.2,0.3,0.4)*amb + vec3(0.85,0.75,0.65)*dif;\n            \n        }\n        // gamma        \n        col = sqrt( col );\n\t    tot += col;\n    }\n    //antiblick\n    tot /= float(AA*AA);\n    fragColor = vec4(tot,1.0);\n}","name":"Image","description":"","type":"image"}]}