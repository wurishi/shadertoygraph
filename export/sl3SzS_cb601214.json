{"ver":"0.1","info":{"id":"sl3SzS","date":"1639328034","viewed":151,"name":"ðŸ“· Drone Photographer in Cave ","username":"rmmcal","description":"ðŸ“· Drone Photographer in Cave","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","clouds","volumetric","cave"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dX3zn","filepath":"/media/a/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png","previewfilepath":"/media/ap/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4df3Rr","filepath":"/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","previewfilepath":"/media/ap/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/////////////////////////////////////////////////////////////\n//          ... ðŸ“· Drone Photographer in Cave ...           ////\n/////////////////////////////////////////////////////////////\n// Brasil/Amazonas/Manaus\n// Created by Rodrigo Cal (twitter: @rmmcal)\n// - Published: 2021/12\n// https://www.shadertoy.com/view/sl3SzS\n//\n// Inspirations \n// - https://www.shadertoy.com/view/wdtXz4\n// - https://www.shadertoy.com/view/fl3SW4\n// - \n/////////////////////////////////////////////////////////////\n\n//https://iquilezles.org/articles/distfunctions\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\n///////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////\n\n//https://www.shadertoy.com/view/wdtXz4\n\nvec3 get_cam (vec3 ro, vec3 target, vec2 uv, float fov)\n{\n    vec3 forward = normalize(target - ro);\n    vec3 left = normalize(cross(vec3(0.,1.,0.), forward));\n    vec3 up = normalize(cross (forward, left));\n    return normalize(forward*fov+ left*uv.x + up*uv.y);\n}\n\n///////////////////////////////////////////////////////////\n///////////////////////////////////////////////////////////\nfloat hash21(vec2 p) { return fract(sin(dot(p,vec2(23.86,48.32)))*4374.432); }\nvec2  hash2( vec2 p) { return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453); }\nvec3  hash3( vec2 p) {\n    vec3 q = vec3( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)), dot(p,vec2(419.2,371.9)) );\n\treturn fract(sin(q)*43758.5453);\n}\n\nvec2 hash2f( ivec2 p ){\n    return  hash2( vec2(p) );\n}\n///////////////////////////////////////////////////////////\n\n\nmat3 m = mat3( 0.00,  0.80,  0.60,\n              -0.80,  0.36, -0.48,\n              -0.60, -0.48,  0.64);\n\nfloat hash(float n)\n{\n    return fract(sin(n) * 43758.5453);\n}\n\n\nfloat noise(in vec3 x)\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n    \n    f = f * f * (3.0 - 2.0 * f);\n    \n    float n = p.x + p.y * 57.0 + 113.0 * p.z;\n    \n    float res = mix(mix(mix(hash(n +   0.0), hash(n +   1.0), f.x),\n                        mix(hash(n +  57.0), hash(n +  58.0), f.x), f.y),\n                    mix(mix(hash(n + 113.0), hash(n + 114.0), f.x),\n                        mix(hash(n + 170.0), hash(n + 171.0), f.x), f.y), f.z);\n    return res;\n}\n\n\nfloat t;\nfloat fbm(vec3 p)\n{\n    float f;\n    f  = 0.5000 * noise(p); p = m * p * 2.02;\n    f += 0.2500 * noise(p); p = m * p * 2.03;\n    f += 0.1250 * noise(p);\n    return f;\n}\n\n\n///////////////////////////////////////////////////////////\n#define PI  3.14159265359\n#define PI2 6.28318530718\n\n// https://www.shadertoy.com/view/fl3SW4\n\n// rotation matrix\nmat2 rotate(float a) {\n\tfloat s=sin(a), c=cos(a);\n\treturn mat2(c,s,-s,c);\n}\n\n// cyclic noise function\nvec3 cyclicNoise(vec3 p, float f) {\n\tvec4 acc = vec4(0);\n\tmat2 r = rotate(.5);\n    \n\tfor (int i=0; i<6; i++){\n        p += p; \n        p.xy *= r;\n        p.yz *= r;\n        p += sin(p.yzx);\n        acc = f * acc + vec4(cross(sin(p.zxy), cos(p)), 1.);\n\t}    \n    return acc.xyz / acc.w;\n}\n\nvec3 pDrone;\n \nfloat dist(in vec3 p) {\n\tvec3 a = abs(p); \n    a.z = p.z; \n    a.xz -= 1.3+cos(p.z/2.0)*1.-cos(p.z/8.0-2.)*.85;\n    \n\tfloat s = 1. - max( max(a.x, a.y), a.z );\n    s = max(s, s*1.1 - clamp(p.x,-9.,0.0)-1.);\n    s = (-.4+abs(s) + .2 * cyclicNoise(p, 3.2).x);\n    //s = (-.4+(s) + .2 * cyclicNoise(p, 3.2).x);\n    \n    float e = .05;\n    float su = .1;\n    s = min(s, sdTorus((p - pDrone +vec3(+e,0,+e)),vec2(.05,.005)));   \n    s = min(s, sdTorus((p - pDrone +vec3(+e,0,-e)),vec2(.05,.005)));   \n    s = min(s, sdTorus((p - pDrone +vec3(-e,0,+e)),vec2(.05,.005)));   \n    s = min(s, sdTorus((p - pDrone +vec3(-e,0,-e)),vec2(.05,.005)));   \n   \n\treturn .60 *s ;\n}\n\nvec3 getNormal(vec3 p)\n{\n    vec2 d = vec2(0., 0.01);\n    float x = dist(p-d.yxx);\n    float y = dist(p-d.xyx);\n    float z = dist(p-d.xxy);\n    return normalize(vec3(x,y,z)-dist(p));\n}\n\nvoid clouds(inout vec4 fragColor, vec3 p, vec3 d){\n    vec4 f1 = vec4(1.);\n    for (float i = 0. ; i < 20.; i++)\n    {\n        float h = -.0;//-dist(p);\n        h = min(h, -1.0+fbm( p+100.0)) + cos(iTime)*0.1;\n        f1 *= (1. - max(0., -h) * (2.5) / 30.);\n        p += d*(max(abs(h),0.3));\n    }\n    fragColor = mix(fragColor , vec4(f1.rgb,1.0), clamp(f1*2.0-cos(iTime*.3)*.5-.4, 0. ,1.0) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord/iResolution.xy-.5)*vec2(1., iResolution.y/iResolution.x);\n    float f;\n    float time = iTime*.5;\n    vec3 p = vec3((cos(time*.7)*1.3),0.+iTime*.0 + (cos(time*1.3)*.2),-20.*(cos(time*.2)*.6+.7));\n    vec3 d = vec3(uv, 1.0);\n    \n    pDrone = vec3(0., iTime*0.0, 0.+p.z-1.);    \n    d= get_cam(p, pDrone, uv, 1.);    \n    pDrone += cos(iTime)*0.2;\n    \n    vec3 p1 = p;\n    vec3 d1 = d;\n           \n    float dither = fract(hash21(uv));\n    float t; \n    float photo = 0.0;\n    for (float i = 0. ; i < 90.; i++) {\n        float h = dist(p);\n        if (h<0.001) {\n            f =  (1.-i/90.0);\n            break;\n        }\n        photo += 0.02/(h+2.0);\n        t += h;\n        h *= 0.9+dither*0.1;\n        p += d*h*.9;\n    }\n    \n    vec3 pn = getNormal(p);\n    vec3 dr = -getNormal(p);\n    dr = reflect( d, pn );//+rnd*.12;\n    vec3 pr = p - d*dist(p)*2.;\n    float f2;\n    float fl = 0.0;\n    \n    for (float i = 0. ; i < 50.; i++)\n    {\n        float h = dist(pr);\n        fl += 1./distance(pDrone,p);\n       \n        if (h<0.001) {\n            f2 = (1.-i/50.0);\n            break;\n        }\n        h *= 0.9+dither*0.1;\n        pr += dr*h;\n    }  \n    \n    //https://learnopengl.com/Lighting/Basic-Lighting\n    vec3 norm = -normalize(pn);\n    vec3 lightDir = normalize( pDrone-p + vec3(0,-0.1,0) );\n    float diff = max(dot(norm, lightDir), 0.0);\n    vec3 diffuse = vec3(diff);// * lightColor;\n    \n    ////////////////////\n    fragColor = vec4( f +f2*0.0 );\n    fragColor *= 2.0/log(t+10.0);    \n    fragColor *= texture(iChannel0, (p.xz+p.y*0.5)*0.2)*.7+.3 ;\n    fragColor.rgb *= diffuse*.5+.75;\n    fragColor += pow( max(0.0, diffuse.z ), 512.0 );   \n    fragColor += texture(iChannel1, (norm))*.2 ;    \n    fragColor += texture(iChannel0, (pr.xz+pr.y*0.5)*0.2)*.3*f2 ;\n    fragColor += texture(iChannel1, cos(norm))*.2 ;\n    fragColor *= max(0.1, -pn.z*.5+.75);\n    fragColor *=  (dither*.1+.9);\n    fragColor += log(max(0., fl)/150.0+1.0);\n    \n    fragColor = mix(fragColor, vec4(photo)*2., photo* pow( max(0., cos(iTime*2.0) ), 64.0 ));\n    \n    if (iMouse.z>0.0) {\n        vec2 mouse = iMouse.xy / iResolution.xy;\n        if (mouse.y>0.5) {\n            if (mouse.x>0.5)\n                fragColor =  vec4(diffuse.x);\n            else\n                fragColor =  vec4(p ,0 );\n        }\n        else {\n            if (mouse.x>0.5)\n                fragColor =  vec4( smoothstep(0.8, 1., cos((p.xyz)*40.0)),0 ) ;\n            else\n                fragColor =  vec4(pn ,0 );\n        }\n    }\n    \n    clouds(fragColor, p1, d1);\n}","name":"Image","description":"","type":"image"}]}