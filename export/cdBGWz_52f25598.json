{"ver":"0.1","info":{"id":"cdBGWz","date":"1667435495","viewed":122,"name":"piano touches","username":"gavroche","description":"piano","likes":1,"published":1,"flags":8,"usePreview":0,"tags":["piano"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float C = 261.1;\nconst float D = 293.2;\nconst float E = 329.3;\nconst float F = 349.4;\nconst float G = 392.5;\nconst float A = 440.6;\nconst float B = 493.7;\nconst float C2 = 523.8;\n\nconst float[] notes = float[] (C, D, E, F, G, A, B, C2);\n\n\n#define PI 3.14159265359\nvec3 hbox(vec2 uv, float x_beg, float size){\n    float prec = 1e-4 ;  \n    return vec3(smoothstep(x_beg-prec,x_beg+prec,uv.x)*(1.-smoothstep(x_beg+size-prec,x_beg+size+prec,uv.x)));\n}\n\nfloat box(in vec2 uv, in vec2 begin, in vec2 size){\n    float prec = 1e-4 ;\n    uv.x = smoothstep(begin.x-prec,begin.x+prec,uv.x)*(1.-smoothstep(begin.x+size.x-prec,begin.x+size.x+prec,uv.x));\n    uv.y = smoothstep(begin.y-prec,begin.y+prec,uv.y)*(1.-smoothstep(begin.y+size.y-prec,begin.y+size.y+prec,uv.y));\n    \n    return uv.x*uv.y;\n}\nfloat bnoise( in float x )\n{    \n    float i = floor(x);\n    float f = fract(x);\n    float s = sign(fract(x/2.0)-0.5);\n\n    float k = fract(i*.1731);\n\n    // quartic polynomial\n    return s*f*(f-1.0)*((16.0*k-4.0)*f*(f-1.0)-1.0);\n}\n\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n\nfloat noteFreq(float freq, float time) {\n    // 6.2831 = 2pi\n    // exp() goes exponentially down to fade out the volume\n    return mod(sin(6.2831 * freq * time) * exp(-3.0 * time),1.);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    int nb_touches = 10;\n    \n    vec3 pct = vec3(0.);\n    float f_touches = float(nb_touches);\n    float taille_touche = 1./f_touches;\n    float espaces = 1./(f_touches*10.);\n    \n    for (int i =0; i<nb_touches; i++){\n        float num_touche = float(i)/f_touches;\n        pct+=hbox(uv, espaces/4.+num_touche, taille_touche-espaces/2.);\n        pct-=box(uv, vec2(num_touche-taille_touche/6.,0.5), vec2(taille_touche/3.,0.5));\n    }\n    /*vec4 m = iMouse/iResolution.x;\n    float touche_select = floor(m.x*f_touches)/f_touches;\n    //float touche_appuie = floor(uv.x*f_touches);\n    pct-=0.5*hbox(uv,touche_select, taille_touche);*/\n    float touche_select = 0.;\n    for (int note = 0; note < 8; note++) {\n        float x = float(note) * 0.1;\n        float temps = fract(1e-1*iTime);\n        if (temps > x && temps<x+0.1) {\n            // += is here because we are combining result with\n            // the \"values\" of previous and/or simultaneous notes\n            touche_select = floor(fract(notes[int(temps*10.)])*f_touches)/f_touches;\n            pct-=0.5*hbox(uv,touche_select, taille_touche);\n        }\n    }\n    \n    // Output to screen\n    fragColor = vec4(pct,.0);\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"const float C = 261.63;\nconst float D = 293.66;\nconst float E = 329.63;\nconst float F = 349.23;\nconst float G = 392.00;\nconst float A = 440.00;\nconst float B = 493.88;\nconst float C2 = 523.25;\n\nconst float[] notes = float[] (C, D, E, F, G, A, B, C2);\n\nvec2 noteFreq(float freq, float time) {\n    // 6.2831 = 2pi\n    // exp() goes exponentially down to fade out the volume\n    return vec2(sin(6.2831 * freq * time) * exp(-3.0 * time));\n}\n\nvec2 mainSound( in int samp,float time) {\n    vec2 result;\n    // time counts in seconds\n    // (time - x) is required, because we want to \"reset\" exp() function\n    // otherwise the output of exp() function will go down globally\n    // and we'll hear only first note\n    for (int note = 0; note < notes.length(); note++) {\n        float x = float(note) * 1.0;\n        if (time > x) {\n            // += is here because we are combining result with\n            // the \"values\" of previous and/or simultaneous notes\n            result += noteFreq(notes[note], time - x);\n        }\n    }\n    \n    return result;\n}","name":"Sound","description":"","type":"sound"}]}