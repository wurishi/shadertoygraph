{"ver":"0.1","info":{"id":"MtGGRm","date":"1473788543","viewed":580,"name":"Fractal Tile Blending","username":"EqWu","description":"Based on Fractal Tiling by iq and Basic Blend Modes by jackdavenport","likes":5,"published":1,"flags":2,"usePreview":0,"tags":["blending","xor","tiling"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Created by inigo quilez - iq/2015\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// 0 = Multiply\n// 1 = Screen\n// 2 = Overlay\n#define BLEND_MODE 2\n\nvec3 blend(vec3 a, vec3 b) {\n \n    #if BLEND_MODE == 1\n    return 1. - ((1. - a) * (1. - b));\n    #elif BLEND_MODE == 0\n    return a * b;\n    #elif BLEND_MODE == 2\n    if(a.x < .5 && a.y < .5 && a.z < .5){\n        return 2. * a * b;\n    }\n    return 1. - 2.*(1.-a)*(1. - b);\n    #endif\n    \n    return a;\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 pos = 256.0*fragCoord.xy/iResolution.x + iTime;\n\n    vec3 col = vec3(0.0);\n    for( int i=0; i<6; i++ ) \n    {\n        vec2 a = floor(pos);\n        vec2 b = fract(pos);\n        \n        vec4 w = fract((sin(a.x*7.0+31.0*a.y + 0.01*iTime)+vec4(0.035,0.01,0.0,0.7))*13.545317); // randoms\n                \n        col += w.xyz *                                   // color\n               smoothstep(0.45,0.55,w.w) *               // intensity\n               sqrt( 16.0*b.x*b.y*(1.0-b.x)*(1.0-b.y) ); // pattern\n        \n        pos /= 2.0; // lacunarity\n        col /= 2.0; // attenuate high frequencies\n    }\n    \n    col = pow( 1.5*col, vec3(1.0,1.0,0.7) );    // contrast and color shape\n    \n    vec4 fragColor1 = vec4( col, 1.0 );\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec3 Tf = texture(iChannel0, uv).rgb;\n    fragColor.xyz = blend(Tf, fragColor1.rgb);\n}","name":"Image","description":"","type":"image"}]}