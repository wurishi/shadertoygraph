{"ver":"0.1","info":{"id":"XlyXRd","date":"1485385580","viewed":176,"name":"Trippy Ripples III","username":"selenologist","description":"Taking the max rather than min distance of the two points","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["2d","kaleidoscope","trippy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// integrated suggestions from @FabriceNeyret2 on 'Trippy Ripples'\n\nvoid mainImage(out vec4 O, vec2 U)\n{\n    float t = iTime;\n    vec2 uv    = U / iResolution.xy,\n         point1 = .5 + vec2(cos(t), sin(t*2.))/4.,\n         point2 = .5 + vec2(sin(t), cos(t))/4.,\n         p1     = abs(point1 - uv),\n         p2     = abs(point2 - uv);\n    float offset    = cos(t/4.),\n          rectdist1 = p1.x + p1.y + offset,\n          rectdist2 = p2.x + p2.y + offset,\n          eucdist1  = length(p1)  + offset,\n          eucdist2  = length(p2)  + offset,\n          dist1     = mix(rectdist1, eucdist1, sin( t*4.)),\n    \t  dist2     = mix(rectdist2, eucdist2, sin(-t*4.)),\n          dist      = max(dist1, dist2);\n\tO = texture(iChannel0,vec2(dist,t/64.));\n}\n\n\n// original:\n// (lol useless two copies of uv)\n// void mainImage( out vec4 fragColor, in vec2 fragCoord )\n// {\n//    vec2 point1 = vec2(0.5+cos(iTime)/4.0, 0.5+sin(iTime*2.0)/4.0);\n//    vec2 uv1 = fragCoord.xy / iResolution.xy;\n//    float rectdist1 = abs(point1.x - uv1.x) + abs(point1.y - uv1.y) + cos(iTime/4.0);\n//    float eucdist1  = distance(uv1, point1) + cos(iTime/4.0);\n//    float dist1     = mix(rectdist1, eucdist1, sin(iTime*4.0));\n//\n//    vec2 point2 = vec2(0.5+sin(iTime)/4.0, 0.5+cos(iTime)/4.0);\n//    vec2 uv2 = fragCoord.xy / iResolution.xy;\n//    float rectdist2 = abs(point2.x - uv2.x) + abs(point2.y - uv2.y) + cos(iTime/4.0);\n//    float eucdist2  = distance(uv2, point2) + cos(iTime/4.0);\n//    float dist2     = mix(rectdist2, eucdist2, sin(-iTime*4.0));\n//                                             \n//\t  float dist = max(dist1, dist2);\n//\t  fragColor = texture(iChannel0,vec2(dist,iTime/64.0));\n// }","name":"Image","description":"","type":"image"}]}