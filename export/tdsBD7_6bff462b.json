{"ver":"0.1","info":{"id":"tdsBD7","date":"1588430146","viewed":108,"name":"VoxelFun","username":"Hei149","description":"Raymarching voxel","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","voxel","traversal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 rotate(float ang)\n{\n    return mat2(cos(ang), sin(ang), -sin(ang), cos(ang));\n}\n\nfloat rand(vec2 uv)\n{\n    return fract(sin(dot(uv, vec2(13.34, 59.403))) * 143.03);\n}\n\nfloat rand(float x)\n{\n    return fract(sin(x * 3054.493) * 143.03);\n}\n\nfloat noise(vec2 uv)\n{\n    vec2 id = floor(uv);\n    uv = fract(uv);\n    uv = uv * uv * (3.0 - 2.0 * uv);\n    return mix(\n        mix(rand(id), rand(id + vec2(1.0, 0.0)), uv.x),\n        mix(rand(id + vec2(0.0, 1.0)), rand(id + 1.0), uv.x),\n        uv.y\n    );\n}\n\nfloat noise1(vec2 uv)\n{\n    uv *= rotate(1.87);\n    uv = vec2(noise(uv.xy * 2.0), noise(uv.yx * 0.1));\n\treturn noise(uv);\n}\n\n\nfloat map(vec3 p)\n{\n   return p.y - ((noise1(p.xz * 0.1)) + noise(sin(p.xz * 0.1) - cos(p.zx * 0.1))) * 10.0;\n}\n\nfloat calculateOcc(vec3 p, vec3 n, float d)\n{\n    return clamp(map(p + d * n) / d, 0.0 , 1.0);\n}\n\nvec3 ld = normalize(vec3(-0.2, 1.0, 0.2));\nvec3 getSky(vec3 rd)\n{\n    vec3 skyCol = vec3(0.5, 0.7, 1.0);\n    skyCol = mix(skyCol, vec3(1.0, 0.7, 0.3), max(pow(dot(rd, ld), 2.0), 0.0));\n    skyCol = mix(vec3(1.0, 0.5, 0.5), skyCol, rd.y + 0.7);\n    return skyCol;\n}\n\nvec3 getColor(vec3 id)\n{\n    return normalize(vec3(rand(id.x), rand(id.y) + 0.5, rand(id.z) + 1.0));\n}\n\nfloat calculateSoftShadow(vec3 r0, vec3 ld)\n{\n    vec3 p = floor(r0 + vec3(0.1) * ld);\n    vec3 ri = 1.0 / ld;\n    vec3 rs = sign(ld);\n\n    vec3 offset = max(rs, 0.0);\n    vec3 nextplane = p + offset;\n    vec3 dist = (nextplane - r0) * ri;\n    vec3 tDelta = abs(ri);\n\n    for(int i = 0; i < 32; ++i)\n    {\n        if(map(p) < 0.0) return 0.0;\n        vec3 nearestAxis = step(dist.xyz, dist.yzx) * step(dist.xyz, dist.zxy);\n        p += nearestAxis * rs;\n        dist += nearestAxis * tDelta;\n    }\n    return 1.0;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (fragCoord - 0.51 * iResolution.xy) / iResolution.y;\n    vec3 r0 = vec3(0.0, 18.0, -5.0);\n    r0.z += iTime * 6.0; \n    vec3 tgt = vec3(0.0, 0.0, 1000.0);\n    tgt.z += iTime * 6.0;\n    vec3 ww = normalize(tgt - r0);\n    vec3 uu = normalize(cross(vec3(0,1,0), ww));\n    vec3 vv = normalize(cross(ww, uu));\n    float zoom = 1.0;\n    vec3 rd = normalize(uv.x * uu + uv.y * vv + zoom * ww);\n      \n    \n    vec3 p = floor(r0);\n    vec3 rs = sign(rd);\n    vec3 ri = 1.0 / rd;\n\n    vec3 offset = 0.5 + rs * 0.5;\n    vec3 nextplane = p + offset;\n    vec3 dist = (nextplane - r0) * ri;\n    vec3 nearestAxis = vec3(0.0);;\n    int steps = 200;\n    for(int i = 0; i < steps; ++i)\n    {\n        if(map(p) < 0.0) break;\n        nearestAxis = step(dist.xyz, dist.yzx) * step(dist.xyz, dist.zxy);\n        dist += nearestAxis * rs * ri;\n        p += nearestAxis * rs;\n    }\n\n    vec3 id = p;\n    p = p + 1.0 - offset;\n    vec3 intersection = (p - r0) * ri;\n    float d = max(intersection.x, max(intersection.y, intersection.z));\n    p = r0 + d * rd;\n\n    float maxDist = float(steps) / sqrt(3.0);\n    vec3 n = (p - id - 0.5) * 2.0;\n    n = pow(abs(n), vec3(15.0)) * sign(n);\n    n = normalize(n);\n\n    float fog = 1.0 - pow(clamp(d / maxDist, 0.0, 1.0), 2.0);\n    float val = noise(p.xz * 8.) * n.y + noise(p.yz * 8.) * n.x + noise(p.xy * 8.) * n.z;\n    float shad = calculateSoftShadow(p, ld);\n\n    float diff = max(dot(n, ld), 0.0) * shad;\n    float ao = (calculateOcc(p, n, 1.0) + calculateOcc(p, n, 2.0) + calculateOcc(p, n, 3.0)) * 0.33;   \n    \n    vec3 col = vec3(0.0);\n    vec3 hW = normalize(ld - rd);\n    float specular = max(dot(n, hW), 0.0) * shad;\n    specular = smoothstep(0.1, 0.9, pow(specular, 4.));\n    \n    col += (diff  * val + specular * (1.0 - val)) * vec3(1.64, 1.27, 0.99);\n    col += (n.y * 0.5 + 0.5) * vec3(0.16, 0.20, 0.28) * ao;\n    col += max(dot(n, vec3(-ld.x, ld.y, -ld.z)), 0.0) * vec3(0.4, 0.28, 0.2) * ao;\n    col *= mix(vec3(0.3, 0.6, 0.3), vec3(0.3, 0.8, 0.1), val);  \n    col = mix(getSky(rd), col, fog * 1.1);\n \t\n    col *= 0.8;\n    col = pow(col, vec3(0.4545));\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}