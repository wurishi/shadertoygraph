{"ver":"0.1","info":{"id":"ll2cRV","date":"1509380004","viewed":138,"name":"Wave Circley Grideroogi","username":"timeiskey","description":"first function to draw circles at arbitrary positions;\nobviously some sort of conditional would improve performance since i'm making every pixel draw every circle for some stupid reason;","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d","circle","primitive"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float circle( vec2 uv, vec2 pos, float r, float blur )\n{\n\tfloat d = length( vec2( pos.x * iResolution.x / iResolution.y, pos.y ) - uv );\n\tfloat c = smoothstep( r+blur, r-blur, d );\n    return c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //\tnormalized coordinate of current pixel\n\tvec2 uv = fragCoord / iResolution.y;\n        \n    //\tDRAW\n    float c = 0.0;\n    \n    float blur = 1.0 / iResolution.y;\n    \n    //\tgrid of circles\n    for( float x = 0.02; x <= 1.0; x+= 0.05 )\n    {\n \t\tfor( float y = 0.02; y <= 1.0; y+= 0.08 )\n        {   \n            float xPos = x;\n            float yPos = y + sin(iTime * x);\n            float r = 0.03 * (1.0+ cos(iTime * uv.y))/2.0;\n            \n            c += circle( uv, vec2( xPos, yPos ), r, blur );\n        }\n    }\n    \n\tfragColor = vec4( vec3(c) ,1.0);\n}","name":"Image","description":"","type":"image"}]}