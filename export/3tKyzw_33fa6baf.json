{"ver":"0.1","info":{"id":"3tKyzw","date":"1610695635","viewed":405,"name":"julia-4d","username":"zbendefy","description":"A 4D fractal represented as 2D slices","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["fractal","julia","mandelbrot","4d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define ITERATIONS 40\n\nfloat GetMandelbrot(vec2 pos, float zoom, vec2 offset)\n{\n    vec2 C = offset + pos*zoom;                \n    vec2 Zn=vec2(0.0, 0.0);\n\n    for( int i = 0; i < ITERATIONS; ++i)\n    {\n        float x2 = Zn.x * Zn.x;\n        float y2 = Zn.y * Zn.y;\n        if (x2 + y2 > 4.0)\n        { \n            return float(i+1) / float(ITERATIONS);\n        } \n\n        Zn.y = (Zn.y * Zn.x * 2.0) + C.y; \n        Zn.x = (x2 - y2) + C.x; \n    }\n    return 0.0;\n}\n\nfloat GetJulia(vec2 pos, float zoom, vec2 offset, vec2 juliaPos)\n{\n    vec2 C = juliaPos;                \n    vec2 Zn=offset + pos*zoom;\n\n    for( int i = 0; i < ITERATIONS; ++i)\n    {\n        float x2 = Zn.x * Zn.x;\n        float y2 = Zn.y * Zn.y;\n        if (x2 + y2 > 4.0)\n        { \n            return float(i+1) / float(ITERATIONS);\n        } \n\n        Zn.y = (Zn.y * Zn.x * 2.0) + C.y; \n        Zn.x = (x2 - y2) + C.x; \n    }\n    return 0.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    float zoom = 1.0;\n    float julia_grid_size = (sin(iTime * 0.25) * 0.1 + 0.1) * zoom;\n    vec2 offset = vec2(-0.3, 0.0);\n    \n    float aspectRatio = iResolution.x / iResolution.y;\n    vec2 position = - 1.0 + 2.0 * fragCoord.xy / iResolution.xy;\n    position.x *= aspectRatio;\n\n    \n    float scale = GetMandelbrot(position, zoom, offset);\n    if ( scale == 0.0)\n        fragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n    else\n        fragColor = vec4( 0.6, 0.8, 1.0, 0.0 ) * scale + vec4(0.0, 0.2, 0.4, 1.0);\n\n    if ( julia_grid_size > 0.001 )\n    {\n        vec2 Zn=offset + vec2(position.x, position.y)*zoom;\n        vec2 centerpos = floor(Zn/julia_grid_size)*julia_grid_size + vec2(julia_grid_size*0.5, julia_grid_size*0.5);\n        vec2 samplepos = mod(Zn, julia_grid_size);\n        float scale = GetJulia(samplepos/(julia_grid_size*0.5)-1.0, 1.4, vec2(0.0,0.0), centerpos);\n        vec4 color = vec4(1.0,0.0,0.0,1.0);\n        \n        if (scale == 0.0)\n        {\n            color = vec4( 0.0, 0.0, 0.0, 1.0 );\n        }\n        else\n        {\n            color = vec4( 0.6, 0.8, 1.0, 0.0 ) * scale + vec4(0.0, 0.2, 0.4, 1.0);\n        }\n        \n        fragColor = mix(fragColor, color, clamp(julia_grid_size/0.015, 0.0, 1.0));\n    }\n    \n}","name":"Image","description":"","type":"image"}]}