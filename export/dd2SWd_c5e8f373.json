{"ver":"0.1","info":{"id":"dd2SWd","date":"1671118933","viewed":73,"name":"Illusion picture 1","username":"travertexs","description":"Classic optical illusion picture.\nThe code is a bit dirty, but I too lazy to optimize it for now. Maybe do that in the future.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["illusion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 Rotate(in vec2 p, in float a)\n{\n    vec2 sin_cos = vec2(sin(a), cos(a));\n    \n    mat2 rot = mat2(\n        sin_cos.y, -sin_cos.x,\n        sin_cos.x,  sin_cos.y\n    );\n    \n    return rot * p;\n}\n\nfloat sdSegment(in vec2 p, in vec2 b)\n{\n    float h = clamp(dot(p, b) / dot(b, b), 0.0, 1.0);\n    return length(p - b * h);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 ar = GetAspectRatio(iResolution.xy);\n    vec2 sc = GetClipCoord(fragCoord, iResolution.xy, ar);\n    vec2 mc = GetClipCoord(iMouse.xy, iResolution.xy, ar);\n\n    vec3 col = vec3(1.0);\n    sc = abs(sc);\n    mc.x = abs(mc.x);\n    \n    float ps = 1.0 / min(iResolution.x, iResolution.y);\n    \n    float a0 = PI * 3.5 / 9.0,\n          a1 = a0 / 14.0;\n    float a = acos(normalize(sc).x);\n          a = floor(a / a1) * a1;\n    vec2 p = Rotate(sc, a);\n    if(a >= a0)\n    {\n        p = sc;\n    }\n    float t = sdSegment(p, vec2(length(ar), 0.0));\n          t = min(sdSegment(sc, vec2(cos(a0), sin(a0)) * length(ar)), t);\n    if(a <= a0 * 6.0 / 7.0)\n    {\n        t = min(sdSegment(p, vec2(cos(a1), sin(a1)) * length(ar)), t);\n    }\n    float bl = smoothstep(-ps, ps, t - max(ps * 2.0, 0.002));\n    col *= bl;\n    \n    if(iMouse.z > 0.5)\n    {\n        t = sdSegment(sc - vec2(mc.x, 0.0), vec2(0.0, length(ar)));\n    }\n    else\n    {\n        t = sdSegment(sc - vec2(0.2, 0.0), vec2(0.0, length(ar)));\n    }\n    float rl = 1.0 - smoothstep(-ps, ps, t - max(ps, 0.002));\n    col = mix(col, vec3(1.0, 0.0, 0.0), rl);\n\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define PI 3.14156295358\n\nvec2 GetAspectRatio(in vec2 res)\n{\n    return max(res.xy / res.yx, vec2(1.0));\n}\n\nvec2 GetClipCoord(in vec2 uv, in vec2 res, in vec2 ar)\n{\n    return ((uv / res) * 2.0 - 1.0) * ar;\n}","name":"Common","description":"","type":"common"}]}