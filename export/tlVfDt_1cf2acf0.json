{"ver":"0.1","info":{"id":"tlVfDt","date":"1615323281","viewed":607,"name":"Dithering color banding away","username":"luluco250","description":"Simplistic example of how dithering helps combat color banding.\nThis is just using pseudo random noise, proper dithering should use another algorithm.\nClick and drag the mouse horizontally to control the banding, vertically to control the dithering.","likes":7,"published":3,"flags":32,"usePreview":0,"tags":["2d","blur","filter","dither","dithering"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 color, vec2 coord)\n{\n    vec2 ps = 1.0 / iResolution.xy;\n    vec2 uv = coord * ps;\n    vec2 mouse = getMouse(iMouse, ps).xy;\n    color = blur(iChannel0, uv, ps, vec2(0, ps.y), mouse);\n    color = quantize(color, mouse);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage(out vec4 color, vec2 coord)\n{\n    vec2 ps = 1.0 / iResolution.xy;\n    color = texture(iChannel0, coord * ps);\n    color = quantize(color, getMouse(iMouse, ps).xy);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"const int BlurSamples = 27;\nconst float MaxQuantization = 64.0;\nconst float MaxDither = 20.0;\n\nfloat rand(vec2 uv) {\n    return fract(sin(dot(uv, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nfloat noiseDir(vec2 uv) {\n    return rand(uv) * 2.0 - 1.0;\n}\n\nvec4 quantize(vec4 color, vec2 mouse) {\n    float amount = mouse.x * MaxQuantization;\n    return round(color * amount) / amount;\n}\n\nvec4 blur(sampler2D sp, vec2 uv, vec2 ps, vec2 dir, vec2 mouse) {\n    vec2 offset =\n        MaxDither *\n        mouse.y *\n        vec2(ps.x * noiseDir(uv), ps.y * noiseDir(uv.yx));\n    \n    vec4 color = vec4(0);\n    uv -= dir * float(BlurSamples) * 0.5;\n    \n    for (int i = 0; i < BlurSamples; ++i) {\n        uv += dir;\n        color += texture(sp, uv + offset);\n    }\n    \n    color /= float(BlurSamples);\n    return color;\n}\n\nvec2 getMouse(vec4 mouse, vec2 ps) {\n    return mouse.z > 0.0 ? mouse.xy * ps : vec2(0.8, 0.3);\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage(out vec4 color, vec2 coord)\n{\n    vec2 ps = 1.0 / iResolution.xy;\n    vec2 uv = coord * ps;\n    vec2 mouse = getMouse(iMouse, ps).xy;\n    color = blur(iChannel0, uv, ps, vec2(ps.x, 0), mouse);\n    color = quantize(color, mouse);\n}","name":"Buffer B","description":"","type":"buffer"}]}