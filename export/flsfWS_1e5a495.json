{"ver":"0.1","info":{"id":"flsfWS","date":"1651410361","viewed":88,"name":"detect","username":"Behzod","description":"detect","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["detect"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2019 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Distance to a regular pentagon, without trigonometric functions. \n\n// List of some other 2D distances: https://www.shadertoy.com/playlist/MXdSRf\n//\n// and iquilezles.org/articles/distfunctions2d\n\n\n// please try to change Rhx value \n// and you see the diameter of object\n\n#define  RDetect    107.0\n#define  pi   3.14159265\n#define  sigma 0.01\n\n#define  Rhx  0.47\nvec2 off = vec2(0.0, 0.0);\nvec2 size = vec2(0.1, 0.0);\nvec4 Rhx4 = vec4(0.01, 0.01, 0.2, 0.07);\nvec2 detectedP;\nfloat detectedR = 0.0;\n\n// COLORS\n    vec3 blue = vec3(0.0, 0.0, 1.0);\n    vec3 red  = vec3(1.0, 0.0, 0.0);\n    vec3 yelw = vec3(1.0, 1.0, 0.0);\n    vec3 grn  = vec3(0.0, 1.0, 0.0);\n    vec3 cyan = vec3(0.0, 1.0, 1.0);\n    vec3 magnt= vec3(1.0, 0.0, 1.0);\n    \nfloat Line(in vec2 p, in vec2 a, in vec2 b) {\n\tvec2 ba = b - a;\n\tvec2 pa = p - a;\n\tfloat h = clamp(dot(pa, ba) / dot(ba, ba), 0., 1.);\n\treturn length(pa - h * ba);\n}\n\nfloat sdHexagram( in vec2 p, in float r )\n{\n    const vec4 k = vec4(-0.5,0.86602540378,0.57735026919,1.73205080757);\n    \n    p = abs(p);\n    p -= 2.0*min(dot(k.xy,p),0.0)*k.xy;\n    p -= 2.0*min(dot(k.yx,p),0.0)*k.yx;\n    p -= vec2(clamp(p.x,r*k.z,r*k.w),r);\n    float rtn = length(p)*sign(p.y);\n    return rtn;\n}\n\nfloat sdCircle( vec2 p, float r )\n{\n    return length(p) - r;\n}\n\nfloat sdRoundedBox( in vec2 p, in vec2 b, in vec4 r )\n{\n    r.xy = (p.x>0.0)?r.xy : r.zw;\n    r.x  = (p.y>0.0)?r.x  : r.y;\n    vec2 q = abs(p)-b+r.x;\n    return min(max(q.x,q.y),0.0) + length(max(q,0.0)) - r.x;\n}\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\nfloat ndot(vec2 a, vec2 b ) { return a.x*b.x - a.y*b.y; }\nfloat sdRhombus( in vec2 p, in vec2 b ) \n{\n    p = abs(p);\n    float h = clamp( ndot(b-2.0*p,b)/dot(b,b), -1.0, 1.0 );\n    float d = length( p-0.5*b*vec2(1.0-h,1.0+h) );\n    return d * sign( p.x*b.y + p.y*b.x - b.x*b.y );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n    \n    \n\tfloat d = sdRoundedBox( p + off, size, Rhx4 ), D;\n    //d = sdCircle( p + off, Rhx);\n    d = sdHexagram( p + off, Rhx);\n    //d = sdBox(p + off, size);\n    //d = sdRhombus(p + off, size);\n    D = d;\n    \n    vec3 col = (d>0.0) ? vec3(0.9,0.6,0.3) : vec3(0.65,0.85,1.0);\n    col *= 1.05 - exp(-6.0*abs(d));\n\tcol *= 0.8 + 0.2*cos(110.0*d);\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.015,abs(d)) );\n    \n    #ifndef _def1\n    #define _def1\n    //STARTING POINT OF MAIN LOOP\n    for(float t = 0.0; t <= 2.0*pi; t += 0.1){\n    \n    vec2 Pred = vec2(RDetect*sin(t),    RDetect*cos(t));\n    vec2 Pblu = vec2(RDetect*sin(t+pi), RDetect*cos(t+pi));\n    float Ddetect = length(Pred - Pblu);\n    \n    \n    //d = sdRoundedBox( Pred + off, size, Rhx4 );\n    //d = sdCircle( Pred + off, Rhx);\n    d = sdHexagram( Pred + off, Rhx);\n    //d = sdBox(Pred + off, size);\n    //d = sdRhombus(Pred + off, size);\n    \n    \n    //D = sdRoundedBox( Pblu + off, size, Rhx4 );\n    //D = sdCircle( Pblu + off, Rhx);\n    D = sdHexagram( Pblu + off, Rhx);\n    //D = sdBox(Pblu + off, size);\n    //D = sdRhombus(Pblu + off, size);\n    \n    //yellow point\n    vec2 Pyllw = mix(Pblu, Pred, abs(D) / Ddetect );\n    \n    //green point\n    vec2 Pgrn = mix(Pred, Pblu, abs(d) / Ddetect );\n    \n    vec2 medianPoint = mix(Pyllw, Pgrn, 0.5);\n    \n    float mainR = length(medianPoint - Pyllw);\n   \n    detectedR = max(detectedR, mainR);\n    \n    if(detectedR <= mainR + 0.001)\n    detectedP = medianPoint;\n    }\n    #endif\n    \n    d = sdHexagram( p + off, Rhx);\n    if(length(p-m)-(detectedR + sigma) < d){\n     col = mix(col, cyan, smoothstep(0.0, 0.01, length(p-m)-detectedR));\n    }\n    // magenta lined cycle\n    col = mix(col, magnt , 1.0 - smoothstep(0.0, 0.01, \n    /* black point */              abs( length(p-m)-detectedR)));\n    col = mix(col, vec3(0), 1.0 - smoothstep(0.0, 0.01, \n                                  length(p-detectedP)-0.015) );\n    \n    \n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}