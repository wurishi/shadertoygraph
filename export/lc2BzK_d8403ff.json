{"ver":"0.1","info":{"id":"lc2BzK","date":"1725219475","viewed":21,"name":"Motionblurrrr","username":"photonic","description":"Motionblurrrr","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["motionblurrrr"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n// Normalized pixel coordinates (from 0 to 1)\nvec2 uv = fragCoord / iResolution.xy;\n\n// Parameters for the blur\nfloat MAX_STEPS = 40.0;\nfloat BLUR_RADIUS = 0.1;  // Adjust this to control the blur radius\n\n// Initialize the color accumulator and weight sum\nvec3 col = vec3(0.0);\nfloat weightSum = 0.0;\n\n// Loop through blur steps\nfor (float i = -MAX_STEPS; i < MAX_STEPS; i++) {\n    // Calculate the offset for each blur step\n    vec2 offset = i * vec2((iMouse.x / iResolution.x * 0.1), 0.0);\n    vec2 UV = uv + offset;\n    \n    // Sample the texture\n    vec3 text = texture(iChannel1, UV).rgb;\n    \n    // Calculate the weight based on the distance from the center\n    float distance = length(offset);\n    float weight = max(0.0, 1.0 - distance / BLUR_RADIUS);\n    \n    // Accumulate color with the weight and sum of weights\n    col += text * weight;\n    weightSum += weight;\n}\n\n// Normalize the color by dividing by the sum of weights to prevent overexposure\nif (weightSum > 0.0) {\n    col /= weightSum;\n}\n\n// Output to screen\nfragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\nvec2 uv = fragCoord / iResolution.xy;\n\n// Parameters for the blur\nfloat MAX_STEPS = 40.0;\nfloat BLUR_RADIUS = 0.1;  // Adjust this to control the blur radius\n\n// Initialize the color accumulator and weight sum\nvec3 col = vec3(0.0);\nfloat weightSum = 0.0;\n\n// Loop through blur steps\nfor (float i = -MAX_STEPS; i < MAX_STEPS; i++) {\n    // Calculate the offset for each blur step\n    vec2 offset = i * vec2(0.0, (iMouse.x / iResolution.x * 0.1));\n    vec2 UV = uv + offset;\n    \n    // Sample the texture\n    vec3 text = texture(iChannel0, UV).rgb;\n    \n    // Calculate the weight based on the distance from the center\n    float distance = length(offset);\n    float weight = max(0.0, 1.0 - distance / BLUR_RADIUS);\n    \n    // Accumulate color with the weight and sum of weights\n    col += text * weight;\n    weightSum += weight;\n}\n\n// Normalize the color by dividing by the sum of weights to prevent overexposure\nif (weightSum > 0.0) {\n    col /= weightSum;\n}\n\n// Output to screen\nfragColor = vec4(col, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}