{"ver":"0.1","info":{"id":"NdG3zt","date":"1631924488","viewed":146,"name":"Bezier Curve Visualization","username":"Assossa","description":"Inspired by Freya Holmér's video: https://www.youtube.com/watch?v=aVwxzDHniEw\nAnchor points can be dragged","likes":8,"published":1,"flags":32,"usePreview":0,"tags":["visualization","bezier","curve","toy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Inspired by Freya Holmér's video on bezier curves\n// https://www.youtube.com/watch?v=aVwxzDHniEw\n\n#define UPDATE_COL(x) fragColor = colMix(fragColor, x)\n\n#define DRAW_POINT(pos,col) UPDATE_COL(renderHollowPoint(distance(uv, pos), onePixel, col, POINT_RADIUS, POINT_WIDTH))\n#define DRAW_PATH_POINT(pos,col) UPDATE_COL(renderPoint(distance(uv, pos), onePixel, col, PATH_POINT_RADIUS))\n\n#define DRAW_LINE(a,b,col) UPDATE_COL(renderLine(lineDist(uv, a, b), onePixel, col, LINE_WIDTH, LINE_ALPHA))\n//#define DRAW_PATH_LINE(a,b,col) UPDATE_COL(renderLine(lineDist(uv, a, b), onePixel, col, PATH_LINE_WIDTH, 1.0))\n\nvec4 colMix(vec4 old, vec4 new) {\n    return mix(old, new, new.a);\n}\n\n// From https://iquilezles.org/articles/distfunctions2d\nfloat lineDist(vec2 p, vec2 a, vec2 b) {\n    vec2 pa = p - a;\n    vec2 ba = b - a;\n    float h = clamp(\n        dot(pa, ba) / dot(ba, ba),\n        0.0,\n        1.0\n    );\n    return length(pa - ba*h);\n}\n\nvec4 renderPoint(float dist, float onePixel, vec4 col, float radius) {\n    return (\n        1. - smoothstep(\n            0.0,\n            AA*onePixel,\n            dist - radius\n        )\n    ) * col;\n}\n\nvec4 renderHollowPoint(float dist, float onePixel, vec4 col, float radius, float width) {\n    dist -= radius;\n    vec4 outline = (\n        1. - smoothstep(\n            width,\n            width + AA*onePixel,\n            abs(dist)\n        )\n    ) * col;\n    return colMix(\n        mix(BG_COL, vec4(0.0), step(0.0, dist)),\n        outline\n    );\n}\n\nvec4 renderLine(float dist, float onePixel, vec4 col, float width, float alpha) {\n    return (\n        1. - smoothstep(\n            width,\n            width + AA*onePixel,\n            dist\n        )\n    ) * vec4(col.rgb, alpha);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = BG_COL;\n    vec2 uv = PIXEL_TO_UV(fragCoord);\n    float onePixel = 1.0 / iResolution.y;\n    float t = abs(fract(iTime * SPEED) * 2.0 - 1.0);\n    \n    // Layer-1 Points\n    vec2 layer1Point1 = texelFetch(iChannel0, ivec2(0, 0), 0).xy;\n    vec2 layer1Point2 = texelFetch(iChannel0, ivec2(1, 0), 0).xy;\n    vec2 layer1Point3 = texelFetch(iChannel0, ivec2(2, 0), 0).xy;\n    vec2 layer1Point4 = texelFetch(iChannel0, ivec2(3, 0), 0).xy;\n    \n    DRAW_LINE(layer1Point1, layer1Point2, LAYER_1_COL);\n    DRAW_LINE(layer1Point2, layer1Point3, LAYER_1_COL);\n    DRAW_LINE(layer1Point3, layer1Point4, LAYER_1_COL);\n      \n    // Path Points\n    #ifndef PATH_TYPE_POINT\n    vec2 prevPoint = texelFetch(iChannel0, ivec2(4, 0), 0).xy;\n    float pathDist = 100.0;\n    #endif\n    \n    for(int i = 0; i < PATH_POINTS; ++i) {\n        vec2 point = texelFetch(iChannel0, ivec2(i+4, 0), 0).xy;\n        \n        #ifdef PATH_TYPE_POINT\n        DRAW_PATH_POINT(point, PATH_COL);\n        #endif\n        \n        #ifndef PATH_TYPE_POINT\n        pathDist = min(pathDist, lineDist(uv, prevPoint, point));\n        prevPoint = point;\n        #endif\n    }\n    \n    #ifndef PATH_TYPE_POINT\n    UPDATE_COL(renderLine(pathDist, onePixel, PATH_COL, PATH_LINE_WIDTH, 1.0));\n    #endif\n    \n    // Layer-1 Points Draw\n    // Draw this after path points so they are over top\n    DRAW_POINT(layer1Point1, LAYER_1_COL);\n    DRAW_POINT(layer1Point2, LAYER_1_COL);\n    DRAW_POINT(layer1Point3, LAYER_1_COL);\n    DRAW_POINT(layer1Point4, LAYER_1_COL);\n    \n    // Layer-2 Points\n    vec2 layer2Point1 = mix(layer1Point1, layer1Point2, t);\n    vec2 layer2Point2 = mix(layer1Point2, layer1Point3, t);\n    vec2 layer2Point3 = mix(layer1Point3, layer1Point4, t);\n    \n    DRAW_LINE(layer2Point1, layer2Point2, LAYER_2_COL);\n    DRAW_LINE(layer2Point2, layer2Point3, LAYER_2_COL);\n    \n    DRAW_POINT(layer2Point1, LAYER_2_COL);\n    DRAW_POINT(layer2Point2, LAYER_2_COL);\n    DRAW_POINT(layer2Point3, LAYER_2_COL);\n    \n    // Layer-3 Points\n    vec2 layer3Point1 = mix(layer2Point1, layer2Point2, t);\n    vec2 layer3Point2 = mix(layer2Point2, layer2Point3, t);\n    \n    DRAW_LINE(layer3Point1, layer3Point2, LAYER_3_COL);\n    \n    DRAW_POINT(layer3Point1, LAYER_3_COL);\n    DRAW_POINT(layer3Point2, LAYER_3_COL);\n    \n    // Layer-4 Point\n    vec2 layer4Point = mix(layer3Point1, layer3Point2, t);\n    \n    DRAW_POINT(layer4Point, LAYER_4_COL);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const vec2 initialPositions[] = vec2[](\n    vec2(-1.4, -0.9),\n    vec2(-0.6,  0.9),\n    vec2( 0.6,  0.9),\n    vec2( 1.4, -0.9)\n);\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    int index = int(fragCoord.x);\n    \n    if(index < 4) {\n        if(iFrame < 5) {\n            fragColor = vec4(initialPositions[index], 0.0, 1.0);\n            return;\n        }\n\n        vec2 prevPos = texelFetch(iChannel0, ivec2(index, 0), 0).xy;\n        vec2 mousePos = PIXEL_TO_UV(iMouse.xy);\n        float mouseClickedNear = step(POINT_RADIUS, distance(prevPos, mousePos));\n\n        fragColor = vec4(mix(mousePos, prevPos, mouseClickedNear), 0.0, 1.0);\n    } else {\n        float t = float(index - 4) / float(PATH_POINTS-1);\n        \n        vec2 layer1Point1 = texelFetch(iChannel0, ivec2(0, 0), 0).xy;\n        vec2 layer1Point2 = texelFetch(iChannel0, ivec2(1, 0), 0).xy;\n        vec2 layer1Point3 = texelFetch(iChannel0, ivec2(2, 0), 0).xy;\n        vec2 layer1Point4 = texelFetch(iChannel0, ivec2(3, 0), 0).xy;\n        \n        vec2 layer2Point1 = mix(layer1Point1, layer1Point2, t);\n        vec2 layer2Point2 = mix(layer1Point2, layer1Point3, t);\n        vec2 layer2Point3 = mix(layer1Point3, layer1Point4, t);\n        \n        vec2 layer3Point1 = mix(layer2Point1, layer2Point2, t);\n        vec2 layer3Point2 = mix(layer2Point2, layer2Point3, t);\n        \n        vec2 layer4Point = mix(layer3Point1, layer3Point2, t);\n        \n        fragColor = vec4(layer4Point, 0.0, 1.0);\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define SPEED 0.2\n#define AA 4.0\n\n#define BG_COL vec4(0.05, 0.10, 0.15, 1.0)\n#define PATH_COL vec4(1.0, 1.0, 1.0, 1.0)\n#define LAYER_1_COL vec4(0.80, 0.80, 0.80, 1.0)\n#define LAYER_2_COL vec4(0.24, 0.70, 0.91, 1.0)\n#define LAYER_3_COL vec4(0.91, 0.09, 0.34, 1.0)\n#define LAYER_4_COL vec4(1.00, 1.00, 1.00, 1.0)\n\n#define POINT_RADIUS 0.05\n#define POINT_WIDTH 0.0025\n\n#define LINE_WIDTH 0.0025\n#define LINE_ALPHA 0.8\n\n// Uncomment this to view the individual points\n//#define PATH_TYPE_POINT\n#define PATH_POINTS 100\n#define PATH_POINT_RADIUS 0.01\n#define PATH_LINE_WIDTH 0.01\n\n#define PIXEL_TO_UV(p) ((2. * (p) - iResolution.xy) / iResolution.y)\n","name":"Common","description":"","type":"common"}]}