{"ver":"0.1","info":{"id":"fdtGDH","date":"1629721502","viewed":1142,"name":"Hexagonal Tiling SDF","username":"TheTurk","description":"Distance function for a hexagonal tiling (inradius = 1).","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["distancefield","grid","sdf","hexagon","distance","honeycomb","hex","hexagonaltiling","heatshield"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float hexagon(vec2 position) {    \n    position /= vec2(2.0, sqrt(3.0));\n    position.y -= 0.5;\n    position.x -= fract(floor(position.y) * 0.5);\n    position = abs(fract(position) - 0.5);\n    return abs(1.0 - max(position.x + position.y * 1.5, position.x * 2.0));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 position = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n    \n    float scale = 0.5;\n    float d = hexagon(position / scale) * scale;\n    \n    // same colorization that Inigo Quilez uses in his shaders\n    vec3 color = vec3(1.0) - sign(d) * vec3(0.1, 0.4, 0.7);\n    color *= 1.0 - exp(-4.0 * abs(d));\n\tcolor *= 0.8 + 0.2 * cos(120.0 * d);\n\tcolor = mix(color, vec3(1.0), 1.0 - smoothstep(0.0, 3.0, (abs(d) - 0.002) * iResolution.y));\n    if (iMouse.z > 0.0) {\n        vec2 mousePosition = (2.0 * iMouse.xy - iResolution.xy) / iResolution.y;\n        float d = hexagon(mousePosition / scale) * scale;\n        color = mix(color, vec3(1.0, 1.0, 0.0), 1.0 - smoothstep(0.0, 3.0, abs(length(position - mousePosition) - abs(d)) * iResolution.y - 1.0));\n    }\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}