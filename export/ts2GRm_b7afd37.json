{"ver":"0.1","info":{"id":"ts2GRm","date":"1548509999","viewed":108,"name":"Simple Basic Circle","username":"Xys","description":"Circle, normalized position or not. Radius in pixels or width percentage","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["circle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// CIRCLE RADIUS : PERCENT OR PIXELS, NORMALIZED OR NOT\n\n#define RADIUS_WIDTH_PERCENT 0.2 // 20%\n#define RADIUS_PIXELS 100.0 // 20%\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n\t// NORMALIZED ([0 - 1]) : 1 = WIDTH \n    \n    float yRatio = iResolution.y / iResolution.x;\n    vec2 position = fragCoord.xy / iResolution.xy; // normalized position\n    \n    vec2 center = vec2(0.5, 0.5); // center coords\n    vec2 d = position - center; // vector from center to current fragment\n    d.y *= yRatio; // apply the window ratio \n    \n    float distPercent = sqrt(dot(d, d)); // distance of pixel from center\n    float distPixels = distPercent * iResolution.x;\n    \n    //if(distPixels > RADIUS_PIXELS)\n    if(distPercent > RADIUS_WIDTH_PERCENT) // 30% of width RADIUS \n        fragColor = vec4 (1.0, 1.0, 0.5, 1.0);\n    else\n        fragColor = vec4 (1.0, 0.5, 1.0, 1.0);\n    \n    \n    \n    \n    \n    // OR :\n    \n    \n    \n    \n\t// NOT NORMALIZED (PIXELS, SCREEN SIZE)\n    /*\n\tvec2 position = fragCoord.xy;\n   \tvec2 center = vec2(iResolution.x / 2.0, iResolution.y / 2.0);\n    vec2 d = position - center;\n\n    float distPixels = sqrt(dot(d, d));\n\tfloat distPercent = distPixels / iResolution.x;\n    \n    //if(distPixels > RADIUS_PIXELS) // distance in pixels\n    if(distPercent > RADIUS_WIDTH_PERCENT) // distance in percentage\n        fragColor = vec4 (1.0, 1.0, 0.5, 1.0);\n    else\n        fragColor = vec4 (1.0, 0.5, 1.0, 1.0);\t*/\n}","name":"Image","description":"","type":"image"}]}