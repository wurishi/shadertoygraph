{"ver":"0.1","info":{"id":"XfjcD1","date":"1722267824","viewed":23,"name":"Uniforms Animação Thaylon","username":"thaylonramonn","description":"Animação Thaylon","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["uniformsthaylon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Obtendo a resolução da tela e o tempo\n    vec2 resolution = iResolution.xy;\n    float time = iTime;\n    \n    // Normalizando as coordenadas do fragmento\n    //Transforma as coordenadas do pixel\n    vec2 uv = fragCoord / resolution;\n    \n    // Calculando a posição do centro dos círculos ao longo do tempo\n    vec2 circle1Center = vec2(0.5 + 0.5 * sin(time), 0.5 + 0.5 * cos(time));\n    vec2 circle2Center = vec2(0.5 + 0.5 * cos(time), 0.5 + 0.5 * sin(time));\n    \n    // Calculando a distância dos pixels aos centros dos círculos\n    float dist1 = distance(uv, circle1Center);\n    float dist2 = distance(uv, circle2Center);\n    \n    // Definindo os raios dos círculos\n    float radius1 = 0.3;\n    float radius2 = 0.2;\n    \n    // Cor base do fundo\n    vec3 baseColor = vec3(0.0);\n    \n    // Cor dos círculos\n    vec3 color1 = vec3(2.0, 1.0, 0.0); // Vermelho\n    vec3 color2 = vec3(0.0, 0.0, 2.0); // Azul\n    \n    // Misturando as cores dos círculos de acordo com a distância\n    vec3 finalColor = baseColor;\n    if (dist1 < radius1) {\n        finalColor += color1 * (1.0 - dist1 / radius1);\n    }\n    if (dist2 < radius2) {\n        finalColor += color2 * (1.0 - dist2 / radius2);\n    }\n    \n    // Definindo a cor final do fragmento\n    fragColor = vec4(finalColor, 3.0);\n}\n","name":"Image","description":"","type":"image"}]}