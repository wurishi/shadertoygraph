{"ver":"0.1","info":{"id":"clyXDd","date":"1686450426","viewed":82,"name":"TikTok Falling Effect","username":"Dettamada","description":"My attempt to reproduce the falling effect in the TikTok app. I didn't try to make the green screen perfect.","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["greenscreen","falling","3drotation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.141592;     // 180 degrees in radians\nconst float speed = 2.;        // falling speed\nconst float N = 2.;            // number of falling copies\nconst float distortionX = 1.2; // distortion factor on the X axis\nconst float gsFactor = 0.75;   // Green Screen factor: The bigger, the more rigorous.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 bg = texture(iChannel0, uv).xyz;\n    vec3 video0 = texture(iChannel1, uv).xyz;\n    bool is_green = video0.g >= max(video0.r, video0.b)/gsFactor; \n    \n    vec3 pixel = is_green ? bg : video0;     \n    for (float i = 0.; i < N; i++)\n    {\n        float angle = mod(speed*iTime, PI/(2.*N)) + i*PI/(2.*N);\n        vec2 uvN = uv;\n        float dX = 1. + (distortionX-1.) * sin(angle);\n        uvN.x = (uvN.x + .5*(dX-1.)) / dX; \n        uvN.y = uvN.y / cos(angle * (2. - uvN.y));        \n        vec3 videoN = texture(iChannel1, uvN).xyz;\n        \n        is_green = videoN.g >= max(videoN.r, videoN.b)/gsFactor;\n        pixel = is_green || uvN.y <= .0 || uvN.y >= 1. ? pixel : videoN; \n    }\n\n    fragColor = vec4(pixel, 1.);\n}","name":"Image","description":"","type":"image"}]}