{"ver":"0.1","info":{"id":"3tSfDD","date":"1598907404","viewed":58,"name":"Voronoi Social Distancing","username":"sariug","description":"voronoi exercise","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["voronoi"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\nvec2 N22(vec2 p){\n\tvec3 a = fract(p.xyx*vec3(123.34, 234.34,345.65));\n    a += dot(a,a+34.45);\n    return fract(vec2(a.x*a.y,a.y*a.z));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 colarray[5] = vec3[](vec3(252./255., 48./255., 25./255.),vec3(255./255., 204./255., 0./255.),vec3(93./255., 27./255., 240./255.),vec3(95./255., 232./255., 89./255.),vec3(252./255., 177./255., 25./255.));\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n\n    float minDist = 100.;\n    float t = iTime;\n    vec2 cellIndex =vec2(0.);\n    \n    \n    uv *=3.;\n    vec2 gridUV = fract(uv)-.5; \n    vec2 id = floor(uv);\n    for(int j = -1; j<2;j++)\n    {\n        for(int i = -1; i<2;i++){\n    \t\tvec2 offs = vec2(i,j);\n            vec2 n = N22(vec2(id+offs));\n            vec2 p = .5* sin(n*t)+offs;\n            float d = length(gridUV-p);\n        \n        \tif(d<minDist){\n        \t\tminDist = d;\n                cellIndex = id+offs;\n            }}\n    }\n    \n    // Time varying pixel color\n    vec3 col = vec3(.25/minDist);\n\n\tcol *=  colarray[ int(abs(cellIndex.x-cellIndex.y)) - 5 *  (abs(int(cellIndex.x-cellIndex.y))/5)];\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}