{"ver":"0.1","info":{"id":"wdyBz1","date":"1606569420","viewed":213,"name":"Cookie Live Stream nov20 01","username":"NuSan","description":"Shader coded live in 30m during Cookie Live Stream 27 november 2020\nhttps://www.twitch.tv/cookiedemoparty","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","livecoding"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Shader coded live in 30m during Cookie Live Stream 27 november 2020\n// https://www.twitch.tv/cookiedemoparty\n\n#define time (iTime*0.5)\n\nfloat box(vec3 p, vec3 s) {\n  p=abs(p)-s;\n  return max(p.x, max(p.y,p.z));\n}\n\nmat2 rot(float a) {\n  float ca=cos(a);\n  float sa=sin(a);\n  return mat2(ca,sa,-sa,ca);  \n}\n\nfloat tick(float t) {\n  float g=fract(t);\n  g=smoothstep(0.,1.,g);\n  g=pow(g,10.);  \n  return floor(t) + g;\n  \n}\n\nvec3 at=vec3(0);\nfloat opa=10000.0;\nfloat map(vec3 p) {\n  \n\n  float t = tick(time * 2.)*3. + time*0.1;\n  p.xz *= rot(t*0.2 + p.y*0.03);\n  p.yz *= rot(t*0.3 + p.x*0.04);\n  \n  p.x += sin(p.x*0.01)*exp(-fract(time))*5.;\n  \n  float push=fract(t*0.1)*4.;\n  \n  for(float i=0.0; i<8.0; ++i) {\n\n    float tt=(time + tick(time)*3.0)*0.1;\n    p.xy *= rot(tt*0.3);\n    p.yz *= rot(tt*0.4); \n\n    p=abs(p)-push;\n  }\n  \n  p.x += sin(time)*4.0;\n  p.z = abs(p.z) - sin(tick(time));\n      \n  float d = box(p, vec3(3,0.2,1.2));\n  opa=d;\n  \n  vec3 p2= p;\n  p2.x = abs(p2.x)-4.0;\n  float d2 = length(p2)-1.0;\n  at += vec3(1,0.3,0.7) * 0.04/(0.05+abs(d2));\n  d = min(d, d2);\n  \n  return d;\n}\n\nfloat rnd(float t) {\n  return fract(sin(t*425.512)*352.741);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n  uv -= 0.5;\n  uv /= vec2(iResolution.y / iResolution.x, 1);\n  \n  uv *= rot(-tick(time*.4));\n  \n  if(rnd(floor(time))<0.3) uv.x = abs(uv.x);\n  if(rnd(floor(time)+.1)<0.3) uv.y = abs(uv.y);\n\n  vec3 s=vec3(0,0,-30);\n  vec3 r=normalize(vec3(-uv, 1));\n  \n  vec3 p=s;\n  vec3 col=vec3(0);\n  \n  float ep = 0.1;\n  ep += fract(time + sin(-abs(uv.y)));\n  \n  for(int i=0; i<100; ++i) {\n    float d=map(p);\n    if(d<0.001) {\n      if(opa<0.001) {\n        //col += map(p-r);\n        //break;\n      }\n      d=0.1;\n      //break;\n    }\n    if(d>100.0) break;\n    p+=r*d;    \n    at += vec3(0.5,.7,1) * pow(ep,5.0)/(ep+abs(d));\n  }\n  \n  col += at * 0.1;\n  //col += map(p-r);\n  \n  float t2=tick(time*0.3 + uv.x*.4);\n  \n  //t2 += floor(uv.x*0.1)*4.0;\n  col.xz *= rot(t2*.7);\n  col.xy *= rot(t2*.5);\n  col=abs(col);\n  \n  col += clamp(col.yzx-1.0,0.0,1.0);\n  col += clamp(col.zxy-1.0,0.0,1.0);\n  \n  col *= 0.3;\n  col = smoothstep(0.0,1.0,col);\n  col = pow(col, vec3(1));\n  \n  fragColor = vec4(col, 1);\n}","name":"Image","description":"","type":"image"}]}