{"ver":"0.1","info":{"id":"MX3XWS","date":"1719509729","viewed":94,"name":"Temp - Interactive Water","username":"sotyi","description":"simple interactive water","likes":1,"published":3,"flags":32,"usePreview":0,"tags":["water"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor =vec4( texture(iChannel1, uv).x);\n\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"# define RADIUS 0.05\n# define SPREAD 1\n# define SPREAD_RADIUS 10.0\n# define DAMPING 0.95\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // viewport ratio\n    vec2 xyRatio = vec2(iResolution.x/iResolution.y,1.0);\n    \n    // mouse input\n    vec4 mouse = iMouse;\n    vec2 mousePos = mouse.xy/iResolution.xy;\n    \n    float current = .0;\n    float dist = .0;\n    if(mouse.z > .0)\n    {\n        dist = length((uv - mousePos)*xyRatio);\n        dist = smoothstep(RADIUS, .0, dist);\n    }    \n    \n    // spread \n    #if SPREAD\n    float ddx = dFdx(uv.x)*SPREAD_RADIUS;\n    float ddy = dFdy(uv.y)*SPREAD_RADIUS;\n    current = texture(iChannel0,vec2(uv.x+ddx,uv.y)).x+\\\n              texture(iChannel0,vec2(uv.x-ddx,uv.y)).x+\\\n              texture(iChannel0,vec2(uv.x,uv.y+ddy)).x+\\\n              texture(iChannel0,vec2(uv.x,uv.y-ddy)).x;\n\n    current = current*0.25 + dist;\n    current *=DAMPING;    \n    #else\n    current = dist;\n    #endif\n    \n    \n    fragColor = vec4(current,.0,.0,1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"# define RADIUS 0.02\n# define SPREAD_RADIUS 1.0\n# define DAMPING 0.99\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;        \n    vec2 xyRatio = vec2(iResolution.x/iResolution.y,1.0);\n    \n    // mouse input\n    vec4 mouse = iMouse;\n    vec2 mousePos = mouse.xy/iResolution.xy;\n    \n    float current = .0;\n    float dist = .0;\n    if(mouse.z > .0)\n    {\n        dist = length((uv - mousePos)*xyRatio);\n        dist = smoothstep(RADIUS, .0, dist);\n        current = dist;\n    }\n\n    // get prev\n    float prev = texture(iChannel1, uv).x;\n    float prev_prev = texture(iChannel1, uv).y;\n    \n    // spread    \n    float ddx = dFdx(uv.x)*SPREAD_RADIUS;\n    float ddy = dFdy(uv.y)*SPREAD_RADIUS;\n    current += (texture(iChannel1, vec2(uv.x+ddx,uv.y)).r + \\\n               texture(iChannel1, vec2(uv.x-ddx,uv.y)).r + \\\n               texture(iChannel1, vec2(uv.x,uv.y+ddy)).r + \\\n               texture(iChannel1, vec2(uv.x,uv.y-ddy)).r)/2.0 - prev_prev;                 \n    current *= DAMPING;\n        \n    current*=smoothstep(0.,1.,float(iFrame>=60));\n\n    fragColor = vec4(current, prev,.0,1.0);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"# define HIGHLIGHT 0\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;  \n    \n    float height = texture(iChannel0,uv).x;\n    vec2 n = vec2(dFdx(height),dFdy(height));\n    \n    float highlight = smoothstep(0.,.2,5.*dot(n,vec2(1.,-1.)));\n    \n    #if HIGHLIGHT\n    fragColor = vec4(highlight);\n    #else\n    fragColor = vec4(n,.0,.0);\n    #endif\n}","name":"Buffer C","description":"","type":"buffer"}]}