{"ver":"0.1","info":{"id":"3lscWr","date":"1591837311","viewed":97,"name":"square dance","username":"darkfox","description":"parallel movement and rotational movement.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["square"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define pi 3.14159\n\n// palette.\nconst vec3 red = vec3(0.95, 0.3, 0.35);\nconst vec3 green = vec3(0.3, 0.9, 0.4);\nconst vec3 blue = vec3(0.2, 0.25, 0.98);\nconst vec3 orange = vec3(0.9, 0.45, 0.1);\n// pattern data.\nconst float SCALE = 6.0;\n// hsb to rgb.\nvec3 getRGB(float r, float g, float b){\n    vec3 c = vec3(r, g, b);\n    vec3 rgb = clamp(abs(mod(c.x * 6.0 + vec3(0.0, 4.0, 2.0), 6.0) - 3.0) - 1.0, 0.0, 1.0);\n    rgb = rgb * rgb * (3.0 - 2.0 * rgb);\n    return c.z * mix(vec3(1.0), rgb, c.y);\n}\n// backgroundColor.\nvoid setBackgroundColor(in vec2 p, inout vec3 col){\n  col = vec3(max(abs(p.x), abs(p.y))) / 1.4;\n}\n// normal pattern.\nvoid setNormalPattern(in vec2 p, inout vec3 col, float time, vec3 ptnColor){\n  // easing.\n  float x = fract(time * 2.0);\n  time = floor(time * 2.0) * 0.5 + 0.5 * x * x * (3.0 - 2.0 * x);\n  p *= SCALE;\n  p -= time * vec2(1.0, -1.0);\n  vec2 f = fract(p);\n  vec2 i = floor(p);\n  bool validation1 = mod(i.x, 2.0) == 0.0 && mod(i.y, 2.0) == 0.0;\n  bool validation2 = mod(i.x + i.y, 4.0) == 0.0;\n  if(!(validation1 && validation2)){ return; }\n  float value = 1.0 - 2.0 * max(abs(f.x - 0.5), abs(f.y - 0.5));\n  col = mix(ptnColor, vec3(1.0), value);\n}\n// rotational pattern.\nvoid setRotatePattern(in vec2 p, inout vec3 col, float time, vec3 ptnColor){\n  p *= SCALE;\n  vec2 q = 0.5 * vec2(p.x - p.y, p.x + p.y);\n  vec2 f = fract(q);\n  vec2 i = floor(q);\n  if(mod(i.x, 2.0) == 1.0 || mod(i.y, 2.0) == 1.0){ return; }\n  vec2 c = vec2(0.5);\n  // easing.\n  float prg = time / 0.5;\n  prg = prg * prg * (3.0 - 2.0 * prg);\n  // change rotation direction.\n  float sgn = (mod(iTime, 3.0) < 1.5 ? 1.0 : -1.0);\n  float multiple = floor(mod(iTime, 4.0));\n  float deg = 0.25 + (0.5 + 0.5 * multiple) * prg * sgn;\n  vec2 u1 = vec2(cos(pi * deg), sin(pi * deg));\n  vec2 u2 = vec2(cos(pi * (deg - 0.5)), sin(pi * (deg - 0.5)));\n  float value = 1.0 - 2.0 * sqrt(2.0) * max(abs(dot(f - c, u1)), abs(dot(f - c, u2)));\n  if(value < 0.0){ return; }\n  col = mix(ptnColor, vec3(1.0), value);\n}\n// normal pattern.\nvoid normalPattern(in vec2 p, inout vec3 col, float time){\n  setNormalPattern(p, col, time, red);\n  setNormalPattern(p.yx * vec2(-1.0, 1.0), col, time, blue);\n  setNormalPattern(-p, col, time, green);\n  setNormalPattern(p.yx * vec2(1.0, -1.0), col, time, orange);\n}\n// rotational pattern.\nvoid rotatePattern(in vec2 p, inout vec3 col, float time){\n  setRotatePattern(p, col, time, red);\n  setRotatePattern(p.yx * vec2(-1.0, 1.0), col, time, blue);\n  setRotatePattern(-p, col, time, green);\n  setRotatePattern(p.yx * vec2(1.0, -1.0), col, time, orange);\n  return;\n}\n// mainCode.\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n  vec2 p = (fragCoord.xy * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n  vec3 col;\n  setBackgroundColor(p, col);\n  float time = mod(iTime, 3.0);\n  float id = floor(time * 2.0);\n  if(id == 0.0){ normalPattern(p, col, time); }\n  if(id == 1.0){ rotatePattern(p, col, mod(time, 0.5)); }\n  if(id == 2.0){ normalPattern(p, col, time - 0.5); }\n  if(id == 3.0){ normalPattern(p, col, time - 0.5); }\n  if(id == 4.0){ rotatePattern(p.yx * vec2(1.0, -1.0), col, mod(time, 0.5)); }\n  if(id == 5.0){ normalPattern(p, col, time - 1.0); }\n  fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}