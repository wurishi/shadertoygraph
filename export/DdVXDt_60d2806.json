{"ver":"0.1","info":{"id":"DdVXDt","date":"1681803695","viewed":280,"name":"Twitch Session #01","username":"Kali","description":"Coded live on Twitch \n","likes":21,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","glass","livecoding","twitch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define time iTime\n#define resolution iResolution\nvec3 pos;\nfloat it;\n\nmat2 rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c,s,-s,c);\n}\n\nfloat sph;\n\nvec3 path(float t) {\n    vec3 p= vec3(sin(t*.5+cos(t*.2))*3.,cos(t),t);\n    p.y+=smoothstep(-2.,2.,sin(t*.5))*2.;\n    return p;\n}\n\nfloat de(vec3 p) {\n    vec3 p2=p-pos;\n    p.xy-=path(p.z).xy;\n    p.xy*=rot(time);\n    float d=1000.;\n    float tun=length(p.xy)-1.-sin(p.z*15.)*.0;\n    sph=(length(p2)-.5)-length(sin(p*5.))*.0;\n    float sc=1.3;\n    float der=1.;\n    p*=.3;\n    for (int i=0; i<6; i++) {\n        p=sin(p*2.);\n        der*=sc;\n        p.xz*=rot(1.);\n        p.xy*=rot(1.5);\n        float l=length(p.xy)-.1;\n        d=min(d,l);\n        if (d==l) it=float(i);\n    }\n    d=max(d,-tun+2.);\n    d=min(d,tun);\n    d=max(d,-sph);\n    return d*.3;\n}\n\nvec3 normal(vec3 p) {\n    vec2 e=vec2(0.,.01);\n    return normalize(vec3(de(p+e.yxx),de(p+e.xyx),de(p+e.xxy))-de(p));\n}\n\nvec3 march(vec3 from, vec3 dir) {\n    float d, td=0.;\n    vec3 p, col=vec3(0.);\n    vec3 ldir=vec3(0.,1.,0.);\n    bool inside=false;\n    for (int i=0; i<200; i++) {\n        p=from+dir*td;\n        d=de(p);\n        if (d<.01&&!inside) {\n            inside=true;\n            vec3 n=normal(p);\n            vec3 ref=reflect(ldir,n);\n            col+=pow(max(0.,dot(ref,dir)),20.)*.05;\n        } else inside=false;\n        d=max(.003,abs(d));\n        if (td>100.) break;\n        td+=d;\n        vec3 c=.1/(.1+d*50.)*pow(fract(-p.z*.2+length(p.xy)*.2-time*.5+it*.2),1.5)*.1*vec3(1.,0.,0.);\n        c*=exp(-.25*td)*3.;\n        c.rb*=rot(it*.5);\n        c.rg*=rot(it);\n        c=abs(c);\n        if (sph>.02) col+=c; else col+=.007;\n    } \n    col=mix(length(col)*vec3(.5),col,.5);\n    return col;\n}\n\nmat3 lookat(vec3 dir) {\n    vec3 up=vec3(0.,1.,0.);\n    vec3 rt=normalize(cross(dir,up));\n    return mat3(rt,cross(dir,rt),dir);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t=time*2.;\n    vec3 from=path(t);\n    vec2 uv = (fragCoord.xy-resolution.xy*.5)/resolution.y;\n    from.x+=smoothstep(0.,.8,sin(time*.5))*3.;\n    vec3 adv=path(t+1.);\n    pos=path(t+2.);\n    vec3 dir=normalize(vec3(uv,.5));\n    dir=lookat(normalize(adv-from))*dir;\n    vec3 col=march(from, dir);\n    fragColor = vec4(col,1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}