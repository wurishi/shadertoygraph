{"ver":"0.1","info":{"id":"Nttczf","date":"1660255382","viewed":181,"name":"unreal 98 dither","username":"paperjack","description":"An approximation of the dither used in very old unreal games. I'm not really satisfied with it, so expect updates","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["dither","unreal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// If you use this, please credit me, paperjack\n\n\nfloat texSize = 64.0;\nfloat ditherSize = 1.0 / 64.0;\nfloat colorClamp = 8.0;\n\nvec4 stipplingDither[4] = vec4[4](\n\tvec4(0.0625, 0.5625, 0.1875,  0.6875),\n\tvec4(0.8125, 0.3125, 0.9375,  0.4375),\n\tvec4(0.25, 0.75, 0.125, 0.625),\n\tvec4(1.0, 0.5, 0.875,  0.375)\n);\n\nfloat getStipplingDitherValue(int x, int y) {\n\tswitch(y) {\n\t\tcase 0: return stipplingDither[x].r;\n\t\tcase 1: return stipplingDither[x].g;\n\t\tcase 2: return stipplingDither[x].b;\n\t\tcase 3: return stipplingDither[x].a;\n\t}\n\treturn 0.0;\n}\n\nvec2 getUnrealDitherValue(int x, int y) {\n\tswitch(y) {\n\t\tcase 0: return vec2(-1.0, -2.0);\n\t\tcase 1: return vec2(-2.0, 0.0);\n\t\tcase 2: return vec2(0.0, 1.0);\n\t\tcase 3: return vec2(-1.0, -1.0);\t\n\t}\n}\n\nvec3 nearestTextureSample (vec2 P)\n{\n    vec2 pixel = P * texSize;    \n    vec2 frac = fract(pixel);\n    pixel = (floor(pixel) / texSize);\n    return texture(iChannel0, pixel + vec2(ditherSize/2.0), -999.0).rgb;\n}\n\nint getBit(int data, int whichBit)\n{\n    if (whichBit > 0 && whichBit <= 8)\n        return (data & (1<<(whichBit-1)));\n    else\n        return 0;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // image rotation\n    float scale = normalize(iMouse.xy / iResolution.xy - 0.5).x;\n    vec2 lightVector_UVTangentSpace = normalize(iMouse.xy / iResolution.xy - 0.5);\n\tvec2 lightVectorRotated90deg = vec2(-lightVector_UVTangentSpace.y, lightVector_UVTangentSpace.x);\n    vec2 normalUV = fragCoord / iResolution.xy;\n    vec2 centeredUV = normalUV - 0.5f;    \n    vec2 rotatedUV = vec2(dot(centeredUV, lightVector_UVTangentSpace), dot(centeredUV, lightVectorRotated90deg));\n    \n    vec2 uv = (rotatedUV + 0.5f)*scale;\n    //vec2 uv = fragCoord / iResolution.xy;\n    \n    // Fuck with this to get different dither fuzziness\n    if((getBit(int(fragCoord.x), 1) ^ getBit(int(fragCoord.y), 1)) == 0) {\n        vec2 dither = getUnrealDitherValue(int(fragCoord.x) % 4, int(fragCoord.y) % 4)/4.0;\n        uv += ditherSize * dither;\n    }\n\n    vec3 color = vec3(0.0) + nearestTextureSample(uv);\n    \n    //Apply color depth interpolation via stippling\n    float greyscale =  0.21 * color.r + 0.71 * color.g + 0.07 * color.b;//max(color.r, max(color.g, color.b));\n    float lower     = floor(greyscale * colorClamp) / colorClamp;\n    vec3 lowerColor = color.rgb * (lower/greyscale);\n    float upper     = ceil(greyscale * colorClamp) / colorClamp;\n    vec3 upperColor = color.rgb * (upper/greyscale);\n    float diff = distance(lowerColor, color.rgb)*colorClamp;\n\n    float dither_limit = getStipplingDitherValue(int(fragCoord.x) % 4, int(fragCoord.y) % 4);\n    if(diff < dither_limit || diff < 0.001) color = lowerColor;\n    else color = color.rgb * (upper/greyscale);\n\n    // Output to screen\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}