{"ver":"0.1","info":{"id":"wtXSDM","date":"1563171881","viewed":174,"name":"fbm with dummy light","username":"takumifukasawa","description":"fbm with dummy light","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["noise","fbm","random"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//--------------------------------------------------------------------------\n// refs.\n// https://thebookofshaders.com/13/?lan=jp\n// https://iquilezles.org/articles/warp\n// https://iquilezles.org/articles/palettes\n//--------------------------------------------------------------------------\n\n// t: 0-1, a: contrast, b: brightness, c: times, d: offset\nvec3 palette(float t, vec3 a, vec3 b, vec3 c, vec3 d) {\n    return a + b * cos(6.28318 * (c * t + d));\n}\n\nconst int[] font = int[](0x75557, 0x22222, 0x74717, 0x74747, 0x11574, 0x71747, 0x71757, 0x74444, 0x75757, 0x75747);\nconst int[] powers = int[](1, 10, 100, 1000, 10000, 100000, 1000000);\n\nint PrintInt(in vec2 uv, in float value, const int maxDigits) {\n    if(abs(uv.y - .5) < .5) {\n        int iu = int(floor(uv.x));\n        if(iu >= 0 && iu < maxDigits) {\n            int n = (int(value) / powers[maxDigits - iu - 1]) % 10;\n            uv.x = fract(uv.x); //(uv.x-float(iu)); \n            ivec2 p = ivec2(floor(uv * vec2(4. ,5.)));\n            return (font[n] >> (p.x + p.y * 4)) & 1;\n        }\n    }\n    return 0;\n}\n\n// Get random value\nfloat random(in vec2 st)\n{\n    return fract(sin(dot(st.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\n#define OCTAVES 4\nfloat fbm(in vec2 st) {\n  \tfloat value = 0.;\n  \tfloat amp = .55;\n  \tfloat freq = 0.;\n\n  \tfor(int i = 0; i < OCTAVES; i++) {\n    \tvalue += amp * noise(st);\n    \tst *= 2.1;\n    \tamp *= .35;\n  \t}\n  \treturn value;\n}\n\nfloat pattern(in vec2 p, float o) {\n  \tfloat f = 0.;\n\n\n  \tvec2 q = vec2(\n    \tfbm(p + o + vec2(0.)),\n    \tfbm(p + o + vec2(2.4, 4.8))\n  \t);\n\n  \tvec2 r = vec2(\n    \tfbm(q + o + 4. * q + vec2(3., 9.)),\n    \tfbm(q + o + 8. * q + vec2(2.4, 8.4))\n  \t);\n  \tf = fbm(p + r * 2. + iTime * .09);\n\treturn f;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    uv *= 4.;\n    float fr = pattern(uv, iTime * 1.);    \n    float fg = fbm(uv + iTime + fr * .20);\n    float fb = fbm(uv + iTime + fg * .30);\n    \n    vec3 lightDir = normalize(vec3(1., 1., 2.));\n    vec3 normal = normalize(vec3(fr, fg, fb));\n    float angle = clamp(dot(lightDir, normal), 0., 1.);\n    vec3 eye = vec3(0., 0., 3.);\n    vec3 halfed = reflect(-eye, normal);\n    float spec = pow(clamp(dot(halfed, lightDir), 0., 1.), 64.);\n    \n    vec3 lightColor = vec3(1.);\n    \n    vec3 objColor = palette(\n    \t(fr + fg + fb) / 3.,\n        vec3(.5),\n        vec3(.5),\n        vec3(4.),\n        vec3(.1, .2, .3)\n    );\n    vec3 specularColor = vec3(objColor * 1.2);\n    \n    vec3 color = vec3(\n        objColor * lightColor * angle +\n        specularColor * lightColor * spec\n    );\n    \n    color = pow(color, vec3(.4545));\n    \n    fragColor = vec4(color, 1.);\n}\n","name":"Image","description":"","type":"image"}]}