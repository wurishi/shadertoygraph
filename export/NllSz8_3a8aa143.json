{"ver":"0.1","info":{"id":"NllSz8","date":"1625140555","viewed":39,"name":"Nikolay_Profile","username":"ndzaitsev","description":"Profile","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["practice"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float _(float a, float b, float c){\n                  return max(a,max(b,c));\n        }\n             \n        float L(vec2 p, vec2 P0, vec2 P1){\n                float a = -(P1.y-P0.y);\n                float b =  (P1.x-P0.x);\n                float d =  P0.x*P1.y- P0.y*P1.x; \n                float x = p.x;\n                float y = p.y;\n                \n                 return a*x + b*y + d;\n        }\n    \n    float T(vec2 p, vec2 P0, vec2 P1, vec2 P2){\n          return  _(\n                     L(p, P0, P1),\n                     L(p, P1, P2), \n                     L(p, P2, P0)\n                   );   \n    }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n//  digitalized Pi profile                      \n vec2 P[44];\n       P[ 0] = vec2(0.274    ,   0.86000);\n       P[ 1] = vec2(0.116    ,   0.88800);\n       P[ 2] = vec2(-0.094   ,    0.83800);\n       P[ 3] = vec2(-0.238   ,    0.83200);\n       P[ 4] = vec2(-0.46    ,   0.79200);\n       P[ 5] = vec2(-0.614   ,    0.66800);\n       P[ 6] = vec2(-0.7     ,  0.47600);\n       P[ 7] = vec2(-0.738   ,    0.31000);\n       P[ 8] = vec2(-0.706   ,    0.15000);\n       P[ 9] = vec2(-0.622   ,    0.038000);\n       P[10] = vec2(-0.614   ,    0.024000);\n       P[11] = vec2(-0.604   ,    -0.016000);\n       P[12] = vec2(-0.552   ,    -0.052000);\n       P[13] = vec2(-0.584   ,    -0.14400);\n       P[14] = vec2(-0.62    ,   -0.23400);\n       P[15] = vec2(-0.652   ,    -0.28800);\n       P[16] = vec2(-0.668   ,    -0.33600);\n       P[17] = vec2(-0.626   ,    -0.38400);\n       P[18] = vec2(-0.534   ,    -0.41000);\n       P[19] = vec2(-0.508   ,    -0.50000);\n       P[20] = vec2(-0.47    ,   -0.54200);\n       P[21] = vec2(-0.466   ,    -0.57400);\n       P[22] = vec2(-0.422   ,    -0.60000);\n       P[23] = vec2(-0.398   ,    -0.64000);\n       P[24] = vec2(-0.386   ,    -0.72000);\n       P[25] = vec2(-0.344   ,    -0.76800);\n       P[26] = vec2(-0.222   ,    -0.78800);\n       P[27] = vec2(-0.076   ,    -0.81000);\n       P[28] = vec2(0.004    ,   -0.84800);\n       P[29] = vec2(0.074    ,   -0.93200);\n       P[30] = vec2(0.116    ,   -0.99200);\n       P[31] = vec2(0.354    ,   -0.83200);\n       P[32] = vec2(0.538    ,   -0.67200);\n       P[33] = vec2(0.648    ,   -0.63400);\n       P[34] = vec2(0.738    ,   -0.52000);\n       P[35] = vec2(0.798    ,   -0.40400);\n       P[36] = vec2(0.788    ,   -0.27200);   \n       P[37] = vec2(0.808    ,   -0.058000);\n       P[38] = vec2(0.82     ,  0.17800);\n       P[39] = vec2(0.802     ,  0.36800);\n       P[40] = vec2(0.76      , 0.50400);\n       P[41] = vec2(0.698     ,  0.66400);\n       P[42] = vec2(0.594     ,  0.80600);\n       P[43] = vec2(0.276     ,  0.86600);\n   \n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 p = 1.0 - 2.0* fragCoord/iResolution.xy;\n    vec2 m = 1.0 - 2.0* iMouse.xy/iResolution.xy;\n\n     float x = p.x * iResolution.x/iResolution.y;\n     float y = p.y ;\n     \n     float mx = m.x * iResolution.x/iResolution.y;\n     float my = m.y ;\n           \n            x/=mx;\n            y/=my;\n            \n            p.x=x;\n            p.y=y;\n   \n\n      float  z = 1.0e25; //infinity?\n              for(int i=0;i<43-2;i++)\n                z = min(z, T(p,  P[i],P[i+1], P[i+3]) );   \n       float     f = 1.25/z; \n\n    // Time varying pixel color\n               vec3 col = vec3(1.0, 1.0, 1.0);\n                if(f >= 0.0)col.g = f;\n                   else     col.r = f; col.g = f; col.b = f;\n                \n\n    // Output to screen\n                 fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}