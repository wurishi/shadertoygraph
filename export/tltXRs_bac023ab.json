{"ver":"0.1","info":{"id":"tltXRs","date":"1581570130","viewed":64,"name":"Raycast on ball","username":"eldrinous","description":"Attempt at Phong shading on a red sphere","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raycast","specular","diffuse"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sphereIntersect(vec3 ray, vec3 dir, vec3 center, float radius)\n{\n vec3 rc = ray-center;\n float c = dot(rc, rc) - (radius*radius);\n float b = dot(dir, rc);\n float d = b*b - c;\n float t = -b - sqrt(abs(d));\n float st = step(0.0, min(t,d));\n return mix(-1.0, t, st);\n}\n\nvec3 SphereCenter = vec3(0.0,0.0,10.0);\nfloat sphereRadius = 5.0;\n \nvec3 CameraCenter = vec3(0.0,0.0,-3.0);\nfloat imagePlaneDist = 1.0;\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   //  Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n\tvec3 lightPos = vec3(sin(iTime )* 10.0,sin(iTime )* 10.0,0);\n   \n    //relocate uv from 0 to 1 to -1 to 1\n    uv = (uv * 2.0) - 1.0;\n    \n    uv.x *= (iResolution.x/iResolution.y);\n\n\tvec3 rayOrigin = CameraCenter;\n    \n    vec3 imagePlanePixel = vec3(uv.x,uv.y, CameraCenter.z + imagePlaneDist);\n    \n    vec3 rayDirection = normalize(imagePlanePixel - rayOrigin);\n    \n    float t = sphereIntersect(rayOrigin,rayDirection,SphereCenter, sphereRadius);\n    \n    //find the point of intersect\n    vec3 hitPoint = rayOrigin + rayDirection * t;\n    \n    t = clamp(t, 0.0, 1.0);\n    \n \n    vec3 lightDir = normalize(lightPos - hitPoint);\n    vec3 surfaceNorm = normalize(hitPoint - SphereCenter);\n    \n    //calculate diffuse\n    float diff = max(dot(surfaceNorm, lightDir), 0.0);\n    \n    vec3 viewDir = normalize(CameraCenter-hitPoint);\n    vec3 reflectDir = reflect(-lightDir, surfaceNorm);\n    \n    //calculate specular as specular value * dot(view, relect)^32\n    float specular = pow(max(dot(viewDir,reflectDir),0.0),32.0) * .5;\n    \n    vec3 color = vec3(1.0,0.1,0.1);\n    \n     //Output to screen\n    fragColor = vec4(color * t * (diff  + .05 + specular),1.0);\n}","name":"Image","description":"","type":"image"}]}