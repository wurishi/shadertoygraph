{"ver":"0.1","info":{"id":"sd3fWM","date":"1656992333","viewed":185,"name":"HalftoneDots v_1.0","username":"rocky02009","description":"This shader reshade pixels to round dots, the diameter of dot change according pixel bright level.\nThis will make low defination content looks cleaner but less sawtooth，just like CRT moniter. Using in retro games are adviced.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["halftone"],"hasliked":0,"parentid":"sdcfDN","parentname":"DynamicDot_v0.5"},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n//Halftone Dot shader by Roc Y.\n\n//This shader reshade pixels to round dots, the diameter of dot change according pixel bright level.\n//This will make low defination content looks cleaner but less sawtooth，just like CRT moniter. \n//Using in retro games are adviced.\n\n\n// Paramaters\n#define D 6. //Dot width in pixel\n#define H 6. //Dot height in pixel\n#define st 0.8 //Strength\n#define op 0.8 //Opacity\n#define sg 2.2 //Source siginal gamma\n#define dg 2.2 //Display gamma\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Internal parameters\n    float hsr = D/H; //Dot hight scale ratio\n    \n    vec2 uv = fragCoord/iResolution.xy;//Coordiation in uv(0,1)\n\n    // Time varying pixel color\n    //vec3 col0 = clamp(cos(0.5*iTime+uv.xyx+vec3(0,2,4)),0.,1.);\n    \n    // Chinnel1\n    // Map texture to 0-1 space\n    vec4 texColor = texture(iChannel0,(fragCoord+100.*(vec2(D*2.,H)))/iChannelResolution[0].xy/vec2(D,H));\n\n    vec3 col0 = texColor.xyz;\n    \n    vec3 col1 = pow(col0,vec3(sg/2.));//convert source gamma to 2.\n    \n    \n    vec3 cdr = (col1*st+1.-st)*D/2.;//Current dot radius RGB separately\n    \n    float cpd = length(mod(fragCoord*vec2(1,hsr),D) - D/2.);//Current pixel's distance from dot center in pixel.\n    \n    vec3 col2;\n    if(cpd <= 0.)//When the current pixel is in the dot center\n    col2 = pow(clamp(cdr*2.,0.,1.),vec3(2./dg));//Color level according display gamma and dot diameter\n    \n    else\n    col2 = pow(clamp(cdr -cpd+0.5,0.,1.),vec3(1./dg));\n    \n    col2 *= col1/((col1-1.)*st+1.);//Adjust color according strength\n    col2 = mix(pow(col0,vec3(sg/dg)),col2,op);//Mix with original color according opacity\n\n    vec3 col00=col0*pow(0.785,(1./dg));//Darken the source pixel to match this shader\n    vec3 col3;\n    if(uv.y>.5)\n        col3=col2;\n    else\n        col3=col00;\n\n    // Output to screen\n    fragColor = vec4(col3.x,0.,0.,1.0);\n    fragColor = vec4(col3,1.0);\n}","name":"Image","description":"","type":"image"}]}