{"ver":"0.1","info":{"id":"ld33Wl","date":"1452698204","viewed":265,"name":"Planar Sounds","username":"rohtie","description":"More experimentation on sound distortion","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["sound","distortion","distance","fields"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGzn","filepath":"/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3","previewfilepath":"/media/ap/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3","type":"music","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4df3Rr","filepath":"/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","previewfilepath":"/media/ap/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float smin( float a, float b, float k ) {\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nvec3 triPlanar(sampler2D tex, vec3 normal, vec3 point) {\n    vec3 cX = texture(tex, point.yz).rgb;\n    vec3 cY = texture(tex, point.xz).rgb;\n    vec3 cZ = texture(tex, point.xy).rgb;\n\n    vec3 blend = abs(normal);\n    blend /= blend.x + blend.y + blend.z + 0.001;\n\n    return blend.x * cX + blend.y * cY + blend.z * cZ;\n} \n\nfloat map (vec3 point) {\n    return smin(min(length(point - vec3(1.05, 0.5, 0.5)) - 1.0, \n               length(point - vec3(-1.0, -0.5, -0.5)) - 1.0),\n              point.y + 0.6, 0.6\n              );\n}\n\nvec3 getNormal(vec3 point) {\n    vec2 extraPolate = vec2(0.002, 0.0);\n\n    return normalize(vec3(\n        map(point + extraPolate.xyy),\n        map(point + extraPolate.yxy),\n        map(point + extraPolate.yyx)\n    ) - map(point));\n}\n\nfloat intersect (vec3 rayOrigin, vec3 rayDirection) {\n    const float maxDistance = 10.0;\n    const float distanceTreshold = 0.001;\n    const int maxIterations = 50;\n    \n    float distance = 0.0;\n\n    float currentDistance = 1.0;\n    \n    for (int i = 0; i < maxIterations; i++) {\n        if (currentDistance < distanceTreshold || distance > maxDistance) {\n            break;\n        }\n\n        vec3 point = rayOrigin + rayDirection * distance;\n        currentDistance = map(point) + \n            \t\t\t  triPlanar(iChannel0, getNormal(point), point).r * \n            \t\t\t  (-0.1 + -abs(texture(iChannel1, point.xz * point.yx * point.zz).r));\n\n        distance += currentDistance;\n    }\n\n    if (distance > maxDistance) {\n        return -1.0;\n    }\n\n    return distance;\n}\n\nvec3 light = normalize(vec3(4.0, 6.0, 2.0));\n\nvoid mainImage (out vec4 color, in vec2 point) {\n    point /= iResolution.xy;\n    point = 2.0 * point - 1.0;\n\tpoint.x *= iResolution.x / iResolution.y;\n    \n    vec3 cameraPosition = vec3(\n        0.0 + cos(iTime), \n        0.2 + sin(iTime) * 0.5 + 0.25, \n        2.5 + cos(iTime * 1.5) * 0.5\n    );\n    vec3 rayDirection = normalize(vec3(point, -1.0));\n    \n    float distance = intersect(cameraPosition, rayDirection);\n    \n    vec3 col = vec3(0.0);\n\n    if (distance > 0.0) {\n        vec3 point = cameraPosition + rayDirection * distance;\n        vec3 normal = getNormal(point);\n        \n        col += vec3(0.05, 0.01, 0.35);\n        col += vec3(0.7, 1.0, 0.95) * max(dot(normal, light), 0.0);\n        \n        vec3 halfVector = normalize(light + normal);\n        col += vec3(1.0) * pow(max(dot(normal, halfVector), 0.0), 1024.0);\n        \n        float att = clamp(1.0 - length(light - point) / 5.0, 0.0, 1.0); att *= att;\n        col *= att;\n        \n        col *= vec3(smoothstep(0.25, 0.75, map(point + light))) + 0.5;\n        \n        if (point.y == 0.1) {\n        \tcol = vec3(50.0);\n        }\n        \n        col *= triPlanar(iChannel0, normal, point);\n        \n        col *= 5.0;\n        \n        \n    }\n\n    color.rgb = col;\n}\n","name":"Image","description":"","type":"image"}]}