{"ver":"0.1","info":{"id":"DljXDh","date":"1678160921","viewed":211,"name":"Portal Light ","username":"ming","description":"Simulate light passing through a rectangular portal by using Inigo Quilez's analytical occlusion.","likes":19,"published":1,"flags":0,"usePreview":0,"tags":["volumetric","occlusion","portal","quad"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2023 Ka Ming Chan\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// The idea is simple. By assuming the quad occlusion equals to the amount of light can be passed through,\n// we can simulate the amount of sky / indirect light transferred from outdoor to indoor area.\n// This is useful for adding limited support of dynamic doors and windows for precomputed lighting systems.\n\n// References\n// Inigo Quilez's analytical occlusion or approximations:\n// \n// Box:                        https://www.shadertoy.com/view/4djXDy\n// Box with horizon clipping:  https://www.shadertoy.com/view/4sSXDV\n// Triangle:                   https://www.shadertoy.com/view/XdjSDy\n// Sphere:                     https://www.shadertoy.com/view/4djSDy\n// Ellipsoid (approximation):  https://www.shadertoy.com/view/MlsSzn\n// Capsule (approximation):    https://www.shadertoy.com/view/llGyzG\n\n\n//=====================================================\n\n//-----------------------------------------------------------------------------------------\n#define VOLUME_SAMPLES 32\n#define VOLUMETRIC_LIGHT_BOOST 8.0\n\nvec3 calcScatter(vec3 ori, vec3 dir, vec3 hit_p, vec2 fc, in mat4 txx, in mat4 txi, in vec3 ext) {\n    vec3 sum = vec3(0.);\n    float maxDst = min(8., distance(ori,hit_p));\n    float weight = 1. / float(VOLUME_SAMPLES);\n    float stepAm = maxDst * weight;\n    vec3 p = ori;\n    \n    vec4 jitter = (texture( iChannel0, (fc.xy)/iChannelResolution[0].xy, -99.0  ).xzyw * 2.0 - 1.0) * 0.5;\n    \n    p += dir * (stepAm * jitter.x);\n    for(int i = 0; i < VOLUME_SAMPLES; i++) {\n    \n        vec3 portal_dir = normalize((txi*vec4(0.0, 0.0,-1.0, 0.0)).xyz);\n        \n        float portal_atten = quadOcclusion( p, portal_dir, txx, txi, ext );\n        \n        sum += portal_atten;\n        p += dir * stepAm;\n    }\n    \n    return sum * weight * VOLUMETRIC_LIGHT_BOOST;\n}\n\n\n//-----------------------------------------------------------------------------------------\n\nfloat iPlane( in vec3 ro, in vec3 rd )\n{\n    return (-1.0 - ro.y)/rd.y;\n}\n\n//-----------------------------------------------------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0*fragCoord.xy-iResolution.xy) / iResolution.y;\n    float s = (2.0*iMouse.x-iResolution.x) / iResolution.y;\n    if( iMouse.z<0.001 ) s=0.0;\n\n\tvec3 ro = vec3(0.0, 0.125, 8.0 );\n\tvec3 rd = normalize( vec3(p.x, p.y-0.3,-3.5) );\n\t\n    // quad animation, slowly rotate around the xyz-axis\n\tmat4 rot = rotationAxisAngle( normalize(vec3(1.0,1.0,1.0)), iTime * 0.5 );\n\tmat4 tra = translate( 0.0, -0.25, 0.0 );\n\tmat4 txi = tra * rot; \n\tmat4 txx = inverse( txi );\n\tvec3 box = mix(\n        vec3(0.5,0.5,0.001),\n        vec3(0.625,0.75,0.001),\n        sin(iTime * 2.0) * 0.5 + 0.5);\n\n\n    vec3 col = vec3(0.05);\n\n    float tmin = 1e10;\n    \n    // ray trace the ground and the direct light pass through the portal\n    float t1 = iPlane( ro, rd );\n    \n    if( t1>0.0 )\n    {\n        tmin = t1;\n        vec3 pos = ro + tmin*rd;\n        vec3 nor = normalize((txi*vec4(0.0, 0.0,-1.0, 0.0)).xyz);\n        float occ = quadOcclusion( pos, nor, txx, txi, box );\n\n        col += vec3(occ + 0.02 * exp(-t1 / 128.0));\n    }\n    \n    // ray trace the portal\n    vec4 res = boxIntersect( ro, rd, txx, txi, box );\n    float t2 = res.x;\n    if( t2>0.0 && t2<tmin )\n    {\n        tmin = t2;\n        float t = t2;\n        vec3 pos = ro + t*rd;\n        vec3 nor = res.yzw;\n        vec3 local_nor = (txx*vec4(nor,0.0)).xyz;\n\t\tcol = vec3(local_nor.z * 0.5 + 0.5);\n\t}\n    \n    // simple volumetric light pass through the portal\n    col += calcScatter(ro, rd, ro + rd * tmin, fragCoord, txx, txi, box);\n    \n    // random light color\n    col *= texture(iChannel0, vec2(sin(iTime / 128.0) * 0.5 + 0.5, 0)).rgb;\n    \n    // make the output more foggy\n\n    fragColor = vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//-----------------------------------------------------------------------------------------\n\nmat4 rotationAxisAngle( vec3 v, float angle )\n{\n    float s = sin( angle );\n    float c = cos( angle );\n    float ic = 1.0 - c;\n\n    return mat4( v.x*v.x*ic + c,     v.y*v.x*ic - s*v.z, v.z*v.x*ic + s*v.y, 0.0,\n                 v.x*v.y*ic + s*v.z, v.y*v.y*ic + c,     v.z*v.y*ic - s*v.x, 0.0,\n                 v.x*v.z*ic - s*v.y, v.y*v.z*ic + s*v.x, v.z*v.z*ic + c,     0.0,\n\t\t\t     0.0,                0.0,                0.0,                1.0 );\n}\n\nmat4 translate( float x, float y, float z )\n{\n    return mat4( 1.0, 0.0, 0.0, 0.0,\n\t\t\t\t 0.0, 1.0, 0.0, 0.0,\n\t\t\t\t 0.0, 0.0, 1.0, 0.0,\n\t\t\t\t x,   y,   z,   1.0 );\n}\n\n\nfloat sacos( float x ) { return acos( min(max(x,-1.0),1.0) ); }\n\n// Quad occlusion (if fully visible)\nfloat quadOcclusion( in vec3 pos, in vec3 nor, in mat4 txx, in mat4 txi, in vec3 rad ) \n{\n\tvec3 p = (txx*vec4(pos,1.0)).xyz;\n\tvec3 n = (txx*vec4(nor,0.0)).xyz;\n    \n    vec3 v0 = vec3(-rad.x,-rad.y, 0.0);\n    vec3 v1 = vec3(-rad.x, rad.y, 0.0);\n    vec3 v2 = vec3( rad.x, rad.y, 0.0);\n    vec3 v3 = vec3( rad.x,-rad.y, 0.0);\n    \n    vec3 a = normalize( v0 - p );\n    vec3 b = normalize( v1 - p );\n    vec3 c = normalize( v2 - p );\n    vec3 d = normalize( v3 - p );\n    \n    // Only the front facing side can be occluded\n    return smoothstep(-0.001, 0.0, p.z) * max(0.0,\n        dot( n, normalize(cross(a,b)) ) * acos( dot(a,b) ) +\n        dot( n, normalize(cross(b,c)) ) * acos( dot(b,c) ) +\n        dot( n, normalize(cross(c,d)) ) * acos( dot(c,d) ) +\n        dot( n, normalize(cross(d,a)) ) * acos( dot(d,a) ) \n        ) / 6.283185;\n}\n\n\n// returns t and normal\nvec4 boxIntersect( in vec3 ro, in vec3 rd, in mat4 txx, in mat4 txi, in vec3 ext ) \n{\n    // convert from ray to box space\n\tvec3 rdd = (txx*vec4(rd,0.0)).xyz;\n\tvec3 roo = (txx*vec4(ro,1.0)).xyz;\n\n\t// ray-box intersection in box space\n    vec3 m = 1.0/rdd;\n    vec3 n = m*roo;\n    vec3 k = abs(m)*ext;\n\t\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n\n\tfloat tN = max( max( t1.x, t1.y ), t1.z );\n\tfloat tF = min( min( t2.x, t2.y ), t2.z );\n\t\n\tif( tN > tF || tF < 0.0) return vec4(-1.0);\n\n\tvec3 nor = -sign(rdd)*step(t1.yzx,t1.xyz)*step(t1.zxy,t1.xyz);\n\n    // convert to ray space\n\t\n\tnor = (txi * vec4(nor,0.0)).xyz;\n\n\treturn vec4( tN, nor );\n}\n\n","name":"Common","description":"","type":"common"}]}