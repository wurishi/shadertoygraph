{"ver":"0.1","info":{"id":"mtyfDz","date":"1701979539","viewed":143,"name":"orthogonal circles grassy plains","username":"jt","description":"Circle arcs orthogonal to unit sphere with circle arc endpoints at equidistant latitude / longitude.\nReminds me of a clumpy grass variant I like. Now it inhabits an entire plane :D\n","likes":25,"published":1,"flags":0,"usePreview":0,"tags":["voronoi","sdf","flower","circle","grass","distance","conformal","disk","plant","loopless","orthogonal"],"hasliked":0,"parentid":"dtGBDz","parentname":"orthogonal circles grassy plant"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/mtyfDz orthogonal circles grassy plains, 2023 jt\n// using https://www.shadertoy.com/view/dtGBDz orthogonal circles grassy plant\n// based on https://www.shadertoy.com/view/ctyBzm orthogonal circles flower sdf 3d\n// based on https://www.shadertoy.com/view/clGBzm orthogonal circles flower sdf 2\n// based on https://www.shadertoy.com/view/dldBWl orthogonal circles flower sdf\n// exact sdf for shape related to https://www.shadertoy.com/view/cltfW2 orthogonal circles flower\n// SDF exactness using https://www.shadertoy.com/view/DdX3WH Interior Distance Detect Errors\n// placed like https://www.shadertoy.com/view/NtcfWs antique forest\n// using https://www.shadertoy.com/view/llG3zy Faster Voronoi Edge Distance by tomkh\n\n// Circle arcs orthogonal to unit sphere\n// with circle segment endpoints at equidistant latitude / longitude.\n// Reminds me of a clumpy grass variant I like.\n// Now it inhabits an entire plane :D\n\n// NOTE: The plant sdf is exact but the voronoi currently is not.\n\n// tags: sdf, flower, circle, grass, distance, conformal, disk, plant, loopless, orthogonal\n\n// The MIT License\n// Copyright (c) 2023 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n#define EPSILON 0.001\n#define DIST_MAX 50.0\n#define ITER_MAX 500u\n\nvec2 hash2(vec2 p) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n    vec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract(vec2((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y));\n}\n\nvec3 hash32(vec2 p) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\n\n#define pi 3.1415926\n\nmat3 yaw_pitch_roll(float yaw, float pitch, float roll)\n{\n    mat3 R = mat3(vec3(cos(yaw), sin(yaw), 0.0), vec3(-sin(yaw), cos(yaw), 0.0), vec3(0.0, 0.0, 1.0));\n    mat3 S = mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, cos(pitch), sin(pitch)), vec3(0.0, -sin(pitch), cos(pitch)));\n    mat3 T = mat3(vec3(cos(roll), 0.0, sin(roll)), vec3(0.0, 1.0, 0.0), vec3(-sin(roll), 0.0, cos(roll)));\n\n    return R * S * T;\n}\n\n//---------------------------------------------------------------\n// 4x4 scan in both passes = most accurate\n//---------------------------------------------------------------\n// https://www.shadertoy.com/view/llG3zy Faster Voronoi Edge Distance by tomkh\n/*\nvec3 voronoi( in vec2 x )\n{\n#if 1\n    // slower, but better handles big numbers\n    vec2 n = floor(x);\n    vec2 f = fract(x);\n    vec2 h = step(.5,f) - 2.;\n    n += h; f -= h;\n#else\n    vec2 n = floor(x - 1.5);\n    vec2 f = x - n;\n#endif\n\n    //----------------------------------\n    // first pass: regular voronoi\n    //----------------------------------\n    vec2 mr;\n\n    float md = 8.0;\n    for(int j = 0; j <= 3; j++)\n        for(int i=0; i <= 3; i++)\n        {\n            vec2 g = vec2(i, j);\n            vec2 o = hash2(n + g);\n            vec2 r = g + o - f;\n            float d = dot(r, r);\n\n            if(d < md)\n            {\n                md = d;\n                mr = r;\n            }\n        }\n\n    //----------------------------------\n    // second pass: distance to borders\n    //----------------------------------\n    md = 8.0;\n    for(int j = 0; j <= 3; j++)\n        for(int i = 0; i <= 3; i++)\n        {\n            vec2 g = vec2(i, j);\n            vec2 o = hash2(n + g);\n            vec2 r = g + o - f;\n\n            if(dot(mr - r, mr - r) > EPSILON) // skip the same cell\n                md = min(md, dot(0.5 * (mr + r), normalize(r - mr)));\n        }\n\n    return vec3(mr, md);\n}\n*/\nvec2 voronoi( in vec2 x ) // adapted from https://www.shadertoy.com/view/llG3zy Faster Voronoi Edge Distance by tomkh NOTE: removed here not needed 2nd pass\n{\n#if 1\n    // slower, but better handles big numbers\n    vec2 n = floor(x);\n    vec2 f = fract(x);\n    vec2 h = step(.5,f) - 2.;\n    n += h; f -= h;\n#else\n    vec2 n = floor(x - 1.5);\n    vec2 f = x - n;\n#endif\n\n    //----------------------------------\n    // first pass: regular voronoi\n    //----------------------------------\n    vec2 mr;\n\n    float md = 8.0;\n    for(int j = 0; j <= 3; j++)\n        for(int i=0; i <= 3; i++)\n        {\n            vec2 g = vec2(i, j);\n            vec2 o = hash2(n + g);\n            vec2 r = g + o - f;\n            float d = dot(r, r);\n\n            if(d < md)\n            {\n                md = d;\n                mr = r;\n            }\n        }\n\n    return mr;\n}\n\nfloat ortho_circle_flower_sdf(int n, vec2 p) // https://www.shadertoy.com/view/dldBWl orthogonal circle flower sdf, 2023 jt\n{\n    n = 2*n+1; // n must be odd\n    float slice = pi/float(n);\n\n    p.x = abs(p.x); // mirror horizontally\n    float r = (p.y*p.y+2.0*p.y+p.x*p.x+1.0)/(2.0*p.x); // calculate radius of circular arc leaf passing through this point\n\n    // equidistant circle segment endpoints on unit circle\n    float r0 = tan(floor(atan(r)/slice)*slice); // to angle then quantize then to length\n    float r1 = tan( ceil(atan(r)/slice)*slice); // to angle then quantize then to length\n\n    // circle center\n    vec2 c0 = vec2(r0,-1); // lower leaf\n    vec2 c1 = vec2(r1,-1); // upper leaf\n\n    // endpoints\n    float mu = atan(p.x,p.y);\n    mu = (floor(mu/slice/2.0)+0.5)*slice*2.0;\n    vec2 c = vec2(sin(mu),cos(mu));\n\n    return\n        //length(p) < 1.0; // approximate\n        dot(p, c) < 1.0 // thanks to tdhooper for fixing remaining discontinuities by changing length(p) < 1.0 to dot(p, c) < 1.0 (turns circle into polygon)\n        ?\n        min(abs(length(p-c0)-r0),abs(length(p-c1)-r1)) // circular arc leafs\n        :\n        length(p-c); // leaf endpoints\n}\n\nfloat ortho_circle_flower_sdf(int m, int n, vec3 p) // https://www.shadertoy.com/view/dtGBDz orthogonal circles grassy plant (jt)\n{\n    float phi = round(atan(p.y,p.x)/(2.0*pi/float(m)))*(2.0*pi/float(m)); // polar & quantize\n    p.xy = mat2(cos(phi),-sin(phi),sin(phi),cos(phi))*p.xy;\n    return length(vec2(ortho_circle_flower_sdf(n, vec2(p.xz)),p.y));\n}\n\nvec4 grass(vec3 p)\n{\n    vec2 v = voronoi(p.xy);\n    vec3 c = mix(vec3(0.5,1.0,0.0),vec3(0.0,1.0,0.1),hash32(v));\n    float d = ortho_circle_flower_sdf(7, 6, vec3(v,p.z));\n    //float d = ortho_circle_flower_sdf(7, 6, vec3(v,p.z+0.5)/0.5)*0.5;\n    return vec4(c,d-0.005);\n}\n\nvec4 plane(vec3 p)\n{\n    vec3 c = mix(vec3(0.5,0.5,0.0),vec3(0.5),hash32(p.xy));\n    float d = p.z+1.0;\n    return vec4(c,d);\n}\n\nvec4 map(vec3 p)\n{\n    vec4 f = plane(p);\n    vec4 g = grass(p);\n    return f.w < g.w ? f : g;\n}\n\n// https://iquilezles.org/articles/normalsSDF tetrahedron normals\nvec3 normal(vec3 p)\n{\n    const float h = EPSILON;\n    const vec2 k = vec2(1,-1);\n    return\n        normalize\n        (\n            k.xyy * map(p + k.xyy*h).w\n            +\n            k.yyx * map(p + k.yyx*h).w\n            +\n            k.yxy * map(p + k.yxy*h).w\n            +\n            k.xxx * map(p + k.xxx*h).w\n        );\n}\n\nvec4 trace(vec3 ro, vec3 rd, float t0, float t1) // pass on running out of iterations\n{\n    // NOTE: Limited number of iterations to avoid stalling\n    //       when ray passes closely (just above EPSILON)\n    //       in parallel to a surface.\n    uint i;\n    vec4 t;\n    for(t.w = t0, i = 0u; t.w < t1 && i < ITER_MAX; i++)\n    {\n        vec4 h = map(ro + rd * t.w);\n        if(h.w < EPSILON)\n            return vec4(h.xyz,t.w);\n        t.w += h.w;\n    }\n\n    return t; // stop on running out of iterations\n    //return vec4(0,0,0,t1); // pass on running out of iterations\n}\n\n// NOTE: Don't forget to add +normal*EPSILON to the starting position\n//       to avoid artifacts caused by getting stuck in the surface\n//       due to starting at distance < EPSILON from the surface.\n//       (normal could be calculated here but that would most likely be redundant)\nfloat shadow(vec3 ro, vec3 rd, float t0, float t1)\n{\n    return trace(ro, rd, t0, t1).w < t1 ? 0.0 : 1.0;\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat softshadow(vec3 ro, in vec3 rd, float t0, float t1, float k)\n{\n    float res = 1.0;\n    float ph = 1e20;\n    uint i;\n    float t;\n    for(t = t0, i = 0u; t < t1 && i < ITER_MAX; i++)\n    {\n        float h = map(ro + rd*t).w;\n        if( h < EPSILON )\n            return 0.0;\n        float y = h*h/(2.0*ph);\n        float d = sqrt(h*h-y*y);\n        res = min( res, k*d/max(0.0,t-y) );\n        ph = h;\n        t += h;\n    }\n    return res;\n}\n\n// https://www.shadertoy.com/view/Xds3zN raymarching primitives\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.01 + 0.12*float(i)/4.0;\n        float d = map( pos + h*nor ).w;\n        occ += (h-d)*sca;\n        sca *= 0.95;\n        if( occ>0.35 ) break;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 ) ;\n}\n\n#define pi 3.1415926\n\nvoid mainImage(out vec4 o, vec2 I)\n{\n    bool demo = all(lessThan(iMouse.xy, vec2(10.0)));\n    vec2 R = iResolution.xy;\n    I = (2.0 * I - R) / R.y; // concise scaling thanks to Fabrice\n    float yaw = 2.0 * pi * float(iMouse.x) / float(R.x);\n    float pitch = pi - pi / 2.0 * float(iMouse.y) / float(R.y);\n    yaw = !demo ? yaw : 2.0 * pi * fract(iTime/100.0);\n    pitch = !demo ? pitch : 4.0/3.0 * pi / 2.0;\n    //pitch = !demo ? pitch : 3.5/3.0 * pi / 2.0;\n    //pitch = !demo ? pitch : 3.0/3.0 * pi / 2.0;\n    //pitch = !demo ? pitch : (0.5-0.5*cos(iTime/pi/10.0)+3.0)/3.0 * pi / 2.0;\n\n    vec3 ro = vec3(0.0, 0.0,-5.0);\n    vec3 rd = normalize(vec3(I.xy, 2.0)); // NOTE: omitting normalization results in clipped edges artifact\n\n    mat3 M = yaw_pitch_roll(yaw, pitch, 0.0);\n    ro = M * ro;\n    rd = M * rd;\n    //ro.z += 1.0;\n\n    //vec3 lightdir = normalize(vec3(1.0, 1.0, 1.0));\n    vec3 lightdir = normalize(vec3(3.0, 2.0, 1.0));\n    vec3 sky = mix(vec3(0,0.5,0.5),vec3(0,0,1),abs(-rd.z));\n\n    {\n        float d = max(0.0, dot(rd, lightdir));\n        float sun = smoothstep(0.998, 0.999, d) + exp(-pow((1.0-d)*500.0, 2.0)); // sun with halo\n\n        sky += sun * 2.0;\n    }\n\n    vec4 result = trace(ro, rd, 0.0, DIST_MAX);\n    vec3 color = result.xyz;\n    float dist = result.w;\n    if(dist < DIST_MAX)\n    {\n        vec3 dst = ro + rd * dist;\n        vec3 n = normal(dst);\n\n        //color = n * 0.5 + 0.5;\n\n        vec3 ambient = vec3(0.4);\n        float brightness = max(dot(lightdir, n), 0.0);\n        if(brightness > 0.0)\n            brightness *= shadow(ro + rd * dist + n * 0.01, lightdir, 0.0, DIST_MAX);\n            //brightness *= softshadow(ro + rd * dist + n * 0.01, lightdir, 0.0, DIST_MAX, 20.0);\n        color *= (ambient * calcAO(dst, n) + brightness);\n\n        if(brightness > 0.0)\n        {\n            float specular = pow(max(0.0, dot(n, normalize(-rd + lightdir))), 250.0);\n            color += specular;\n        }\n\n        //vec3 fog_color = vec3(0);\n        vec3 fog_color = sky;\n        color = mix(fog_color, vec3(color), exp(-pow(dist/20.0, 2.0))); // fog\n    }\n    else\n    {\n        //color *= 0.0;\n        color = sky;\n    }\n\n    color = tanh(color); // roll-off overly bright colors\n    //color = sqrt(color); // approximate gamma\n    o = vec4(color, 1);\n}\n","name":"Image","description":"","type":"image"}]}