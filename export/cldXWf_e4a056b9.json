{"ver":"0.1","info":{"id":"cldXWf","date":"1685823437","viewed":104,"name":"Moving diagonal squares","username":"ElusiveSam","description":"I like backgrounds like this in IWBTG fangames (like Kamilia 3) and wanted to implement something like this.\nMy first cool looking shader","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["squares","diagonal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI     3.14159265\n#define SQ2BY2    0.70710678\n\n// Rotate with matrix:\nvoid rotate(inout vec2 p,float angle,vec2 rotationOrigin)\n{\n    p -= rotationOrigin;\n    float c = cos(angle), s = sin(angle);\n\t// https://en.wikipedia.org/wiki/Rotation_madrix\n    // https://www.khronos.org/opengl/wiki/Data_Type_(GLSL)#Matrix_constructors\n    p *= mat2(\n        c, s, // column 1\n        -s, c // column 2\n    );\n    p += rotationOrigin;\n}\n\n// Same as above, just precalculated for known params\nvoid rotate45(inout vec2 p)\n{\n    p *= mat2(SQ2BY2,-SQ2BY2,SQ2BY2,SQ2BY2);\n}\n\n// Interpolation between colors with param\nvec3 lerp(vec3 colorone, vec3 colortwo, float value)\n{\n\treturn (colorone + value*(colortwo-colorone));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const float size = .15;\n    const float speed = 2.0;\n    const vec3 mainCol = vec3(.0, .122, 1.0);\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n    // Aspect ratio\n    uv.x *= iResolution.x / iResolution.y;\n    // Rotate\n    rotate45(uv);\n    \n    // Resize\n    uv *= 1.0 / size;\n    // Move\n    uv.y += fract(iTime*speed);\n    // Repeat\n    uv = fract(uv);\n    \n        \n    // Gradient\n    float d = uv.x * uv.y;\n    \n    vec3 col1 = mainCol * .8;\n    vec3 col2 = mainCol * .1;\n    vec3 col = lerp(col2, col1, d);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}