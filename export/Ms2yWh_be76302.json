{"ver":"0.1","info":{"id":"Ms2yWh","date":"1491936909","viewed":136,"name":"Un-Optimized af","username":"Polygon","description":"My first 3d thing. Naive approach to everything :P","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["3d","cube","sphere","succy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float pi = 3.14159265;\nconst float d2r = 0.0174533;\n\n\n\n\nfloat square(float num) {\n    return num * num;\n}\n\nfloat sec(float num) {\n    return(1.0 / cos(num));\n}\n\n\nbool inSphere(vec3 point) {\n    return(square(point.x - 2.0 * sin(iTime)) + square(point.y - sin(1.5*iTime)) + square(point.z - 1.0) < 0.25);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 s = fragCoord.xy / iResolution.y - vec2(iResolution.x / iResolution.y * 0.5,0.5);\n    \n    float fov = 135.0 + 45.0 * sin(0.7 * iTime);\n    \n    float t = iTime;\n    \n    float r2 = s.x*s.x + s.y*s.y;\n    float r = sqrt(r2);\n    \n    \n    \n    //float z = cos(fov * d2r * r);\n    //float x = s.x / r * sin(fov * d2r * r);\n    //float y = s.y / r * sin(fov * d2r * r);\n    \n    vec3 direction = vec3(s.x / r * sin(fov * d2r * r), s.y / r * sin(fov * d2r * r), cos(fov * d2r * r));\n    \n    fragColor.x = direction.z;\n    fragColor.y = direction.x;\n    fragColor.z = direction.y;\n    \n    if (r2 > 0.25) {\n        fragColor = vec4(0);\n    } else {\n        \n        bool hit = false;\n        for (float distance = 0.0; distance < 3.0; distance += 0.01) {\n        \t\n            if (inSphere(distance * direction)) {\n                \n                fragColor = vec4(1.0 / (distance * distance + 1.0));\n                hit = true;\n                break;\n                \n            }\n            \n            vec3 p = direction * distance;\n            \n            \n            float dist = 1.4;\n            \n            if ((p.x*sin(1.1*t)+(p.z-dist)*cos(1.1*t) > -0.5 && p.x*sin(1.1*t)+(p.z-dist)*cos(1.1*t) < 0.5) && (p.x*cos(1.1*t)-(p.z-dist)*sin(1.1*t) > -0.5 && p.x*cos(1.1*t)-(p.z-dist)*sin(1.1*t) < 0.5) && (p.y) > -0.5 && p.y < 0.5) {\n                \n                fragColor = vec4(1.0 / (distance * distance + 1.0), 0.0, 0.0, 0.0);\n                hit = true;\n                break;\n                \n            }\n            \n        }\n        \n        \n        if (!hit) {\n                \n            fragColor = texture(iChannel0, fov / 250.0 * s * 3.0 * sec(fov * d2r * r)) / sec(fov * d2r * r) / sec(fov * d2r * r);\n                \n        }\n\n    }\n}","name":"Image","description":"","type":"image"}]}