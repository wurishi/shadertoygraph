{"ver":"0.1","info":{"id":"M3jXRt","date":"1710964135","viewed":70,"name":"SDF Beating Heart","username":"Nolkaloid","description":"Cute application of SDF interpolation.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["2d","sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat dot2( in vec2 v ) { return dot(v,v); }\n\n\nfloat sdCircle( vec2 p, float r )\n{\n    return length(p) - r;\n}\n\n\n// SOURCE: https://www.shadertoy.com/view/3tyBzV\nfloat sdHeart( in vec2 p )\n{\n    p.x = abs(p.x);\n\n    if( p.y+p.x>1.0 )\n        return sqrt(dot2(p-vec2(0.25,0.75))) - sqrt(2.0)/4.0;\n    return sqrt(min(dot2(p-vec2(0.00,1.00)),\n                    dot2(p-0.5*max(p.x+p.y,0.0)))) * sign(p.x-p.y);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x = (uv.x - 0.5) * iResolution.x/iResolution.y + 0.5;\n       \n\n    float circle = sdCircle(uv - vec2(0.5, 0.5), 0.2);\n    float heart = sdHeart((uv - vec2(0.5, 0.3)) * 2.5);\n\n    float mask = 1.0 - smoothstep(0.0, 0.01, mix(heart, circle, (sin(iTime * 5.0))  * 0.3));\n    vec3 col = mask * vec3(1.0, 0.0, 0.3) + 1.0 * (1.0 - mask); \n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}