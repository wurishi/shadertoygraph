{"ver":"0.1","info":{"id":"NtKSDt","date":"1641521276","viewed":90,"name":"Combinations - OR,AND,XOR","username":"PGRacer","description":"Green borders the Union (OR)\nBlue borders the Intersection (AND)\nRed borders the Difference between the Union and the Intersection (XOR)\nWhite borders each shape\n\nIQ's 2D SDFs - https://iquilezles.org/articles/distfunctions2d/distfunctions2d.htm","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","sdf","distance","xor","signed","and","or","combination"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define LINE_WIDTH 0.015\n#define LINE_SEPARATION 0.01\n#define WAVE_FREQUENCY 200.0\n#define FADE_WIDTH 0.025\n\n// sd functs from https://iquilezles.org/articles/distfunctions2d\n// mouse click adapted from https://www.shadertoy.com/view/4llXD7\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat sdCircle(in vec2 p, in float r)\n{\n    return length(p) - r;\n}\n\nvec3 GetColor(float d, vec3 col)\n{\n    if (abs(d) < LINE_WIDTH / 2.0) return vec3(1.0);\n    if (d < LINE_WIDTH * 2.0 + LINE_SEPARATION * 0.5 && d > LINE_SEPARATION + LINE_WIDTH * 0.5) return col;\n    \n    float waveStep = smoothstep(0.0, 1.0,  cos(abs(d) * WAVE_FREQUENCY) * 0.5 + 0.5);\n    vec3 highCol = col * 0.3 + vec3(0.2);\n    vec3 lowCol = col * 0.15 + vec3(0.15);\n    col = mix(lowCol, highCol, waveStep) * min((abs(d) - FADE_WIDTH) * 10.0, 1.0); \n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float aspectRatio = iResolution.x / iResolution.y;\n    vec2 uv = fragCoord / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= aspectRatio;\n    \n    float dB = sdBox(uv, vec2(0.5 * aspectRatio, 0.5));\n    float dC = sdCircle(uv - vec2(sin(iTime * 0.627 + 13.78), cos(iTime + 13.78)), 0.35);\n    \n    float dOR = min(dB, dC);\n    float dAND = max(dB, dC);\n    float dXOR = max(dOR, -dAND);\n    \n    vec3 col = vec3(0.0);\n    \n    // Fill colors\n    col = GetColor(dAND <= 0.0 ? -dAND : dXOR <= 0.0 ? -dXOR : dXOR, vec3(dXOR <= 0.0, dXOR > 0.0 && dAND > 0.0, dAND <= 0.0));\n    \n    if( iMouse.z>0.001 )\n    {\n        vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n        float dBM = sdBox(m, vec2(0.5 * aspectRatio, 0.5));\n        float dCM = sdCircle(m - vec2(sin(iTime * 0.627 + 13.78), cos(iTime + 13.78)), 0.35);\n        \n        float dORM = min(dBM, dCM);\n        float dANDM = max(dBM, dCM);\n        float dXORM = max(dORM, -dANDM);\n        \n        col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, abs(length(uv-m)-abs(dXORM))-0.0025));\n        col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, length(uv-m)-0.005));\n    }\n\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}