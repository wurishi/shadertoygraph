{"ver":"0.1","info":{"id":"4dSBDK","date":"1502129897","viewed":228,"name":"Box blur comparison","username":"heisters","description":"Comparison of a separable optimized box blur vs. the naive implementation. Click to move the split between blurs.","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["blur","fast","cheap","imageeffect","comparison"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Values need to be updated in Buf A shader too\nconst float SIZE = 20.;\nconst int SAMPLES = 9; // should be odd\n\nvec3 optimizedBoxBlur(\n    in sampler2D tex,\n    in vec2 uv,\n    in vec2 resolution,\n    in vec2 direction,\n    in float size,\n    in int samples\n) {\n    float f_samples = float( samples );\n    float w = 1. / f_samples;\n    vec2 px = 1. / resolution;\n    float increment = size / ( f_samples - 1. );\n    float halfSize = size * .5;\n    vec2 dpx = direction * px;\n\n    vec3 color = vec3( 0. );\n    for ( float i = -halfSize; i <= halfSize; i += increment ) {\n        vec2 st = uv + dpx * i;\n        color += texture( tex, st ).rgb * w;\n    }\n    \n    return color;\n}\n\n\nvec3 naiveBoxBlur(\n    in sampler2D tex,\n    in vec2 uv,\n    in vec2 resolution,\n    in float size,\n    in int samples\n) {\n    float f_samples = float( samples );\n    vec2 px = 1. / resolution;\n    float increment = size / ( f_samples - 1. );\n    float halfSize = size * .5;\n    \n    vec3 color = vec3( 0. );\n    float w = 0.;\n    for ( float i = -halfSize; i <= halfSize; i += increment ) {\n        for ( float j = -halfSize; j <= halfSize; j += increment ) {\n            w += 1.;\n            vec2 st = uv + vec2( i, j ) * px;\n            color += texture( tex, st ).rgb;\n        }\n    }\n    \n    return color / w;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 c_optimized = vec4(\n        optimizedBoxBlur( iChannel0, uv, iResolution.xy, vec2( 0., 1. ), SIZE, SAMPLES ),\n        1. );\n    vec4 c_naive = vec4(\n        naiveBoxBlur( iChannel1, uv, iResolution.xy, SIZE, SAMPLES ),\n        1. );\n    \n    float split = iMouse.z < 1. ? .5 : iMouse.z / iResolution.x;\n    fragColor = mix( c_naive, c_optimized, step( split, uv.x ) );\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float SIZE = 20.;\nconst int SAMPLES = 9;\n\nvec3 optimizedBoxBlur(\n    in sampler2D tex,\n    in vec2 uv,\n    in vec2 resolution,\n    in vec2 direction,\n    in float size,\n    in int samples\n) {\n    float f_samples = float( samples );\n    float w = 1. / f_samples;\n    vec2 px = 1. / resolution;\n    float increment = size / ( f_samples - 1. );\n    float halfSize = size * .5;\n    vec2 dpx = direction * px;\n\n    vec3 color = vec3( 0. );\n    for ( float i = -halfSize; i <= halfSize; i += increment ) {\n        vec2 st = uv + dpx * i;\n        color += texture( tex, st ).rgb * w;\n    }\n    \n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    fragColor = vec4(\n        optimizedBoxBlur( iChannel0, uv, iResolution.xy, vec2( 1., 0. ), SIZE, SAMPLES ),\n        1. );\n}","name":"Buf A","description":"","type":"buffer"}]}