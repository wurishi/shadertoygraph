{"ver":"0.1","info":{"id":"lftGWN","date":"1711728041","viewed":40,"name":"Im(log(p/q)) w p, q varying","username":"Enbymonkey","description":"For COMP4900, winter 2024.\n\nBased on this article: https://hturan.com/writing/complex-numbers-glsl","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["graph","complexnumbers"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// From https://github.com/julesb/glsl-util\n\n#define PI 3.14159265\n\n#define cx_mul(a, b) vec2(a.x*b.x - a.y*b.y, a.x*b.y + a.y*b.x)\n#define cx_div(a, b) vec2(((a.x*b.x + a.y*b.y)/(b.x*b.x + b.y*b.y)),((a.y*b.x - a.x*b.y)/(b.x*b.x + b.y*b.y)))\n#define cx_sin(a) vec2(sin(a.x) * cosh(a.y), cos(a.x) * sinh(a.y))\n#define cx_cos(a) vec2(cos(a.x) * cosh(a.y), -sin(a.x) * sinh(a.y))\n\nvec2 as_polar(vec2 z) {\n  return vec2(\n    length(z),\n    atan(z.y, z.x)\n  );\n}\n\nvec2 cx_tan(vec2 a) {return cx_div(cx_sin(a), cx_cos(a)); }\nvec2 cx_log(vec2 a) {\n    vec2 polar = as_polar(a);\n    float rpart = polar.x;\n    float ipart = polar.y;\n    if (ipart > PI) ipart=ipart-(2.0*PI);\n    return vec2(log(rpart),ipart);\n}\nvec2 cx_pow(vec2 v, float p) {\n  vec2 z = as_polar(v);\n  return pow(z.x, p) * vec2(cos(z.y * p), sin(z.y * p));\n}\n\n// From https://iquilezles.org/www/articles/palettes/palettes.htm\n\nvec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos(2. * PI *(c*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates\n    float scale = 8.;\n    float center = (scale/2.);\n    vec2 uv = (scale*fragCoord-center*iResolution.xy)/iResolution.y;\n    vec2 z = uv;\n    \n    // adjust animation speed\n    float t = iTime/2.;\n    \n    // define numerator coefficients\n    float a1 = cos(t)/2.;\n    float b1 = sin(t)/2.;\n    float c1 = cos(sqrt(t)/2.);\n    float d1 = sin(t/3.)/3.;\n    \n    // define the numerator\n    vec2 p = vec2(a1)*cx_pow(z, 3.0) + vec2(b1)*cx_pow(z,2.) + vec2(c1)*z + vec2(d1);\n    \n    // define denominator coefficients\n    float a2 = sin(t);\n    float b2 = cos(t);\n    float c2 = sin(sqrt(t));\n    float d2 = 0.3;\n    \n    // define the denominator\n    vec2 q = vec2(a2)*cx_pow(z, 3.0) + vec2(b2)*cx_pow(z,2.) + vec2(c1)*z + vec2(d2);\n    \n    // compute the rational function\n    vec2 rat_pol = cx_div(p, q);\n\n    // Calculate the imaginary part of log of our rational polynomial\n    float imaginary = cx_log(rat_pol).y / PI;\n\n\n    // palette parameters\n    vec3 pal_1 = vec3(0.5, 0.5, 0.5); // midpoint of color range\n    vec3 pal_2 = vec3(0.6, 0.2, 0.2); // range of values from midpoint -> [0.3, 0.7]\n    vec3 pal_3 = vec3(0.6, 0.3, 0.5); // variation according to position\n    vec3 pal_4 = vec3(0.9, 0.1, 0.1); // * vec3(0.1*iTime); // make each color channel vary at differnt rates to get a wide range of color combinations\n    vec3 col = palette( imaginary, pal_1, pal_2, pal_3, pal_4);\n\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n\n\n\n","name":"Image","description":"","type":"image"}]}