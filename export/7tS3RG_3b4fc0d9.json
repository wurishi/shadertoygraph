{"ver":"0.1","info":{"id":"7tS3RG","date":"1624099815","viewed":80,"name":"mandelbrot 001","username":"RiceFields","description":"mandelbrot","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define B 10.0\n#define N 200\n#define PERIOD 10.0\n\nfloat mandelbrot(vec2 c) {\n   vec2 z = vec2(.0);\n   float n = .0;\n   for(int i = 0; i < N; ++i) {\n     z = vec2( z.x*z.x - z.y*z.y, 2.0*z.x*z.y ) + c; // z = z^2 + c\n     if( dot(z,z)>(B*B) ) break; // break if z is too high\n     n += 1.0;\n   }\n   return (n == 200.0)? .0: n/float(N);\n}\n\nvec3 image(vec2 fragCoord) {\n    vec2 uv = (fragCoord / iResolution.xy) * 2.0 - 1.0; // remap uv to [-1, 1]\n    uv.x *= iResolution.x / iResolution.y;\n        \n    // calculate and apply zoom\n    float zoom = .62 + .38*cos(iTime/PERIOD);\n    zoom = pow(zoom, 7.0);\n    vec2 c = vec2(-.745,.186) + uv*zoom;\n    \n    float f = mandelbrot(c)*2.0 - .5;\n    \n    // calculate color\n    vec3 col = mix(vec3(.81,.06,.13), vec3(.80,.40,.0), f*f);\n\n    return (f*f*(8.0 - 5.0*f))*col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\t// anti-aliasing\n\tfragColor = vec4(image(fragCoord.xy + vec2(0,0)), 1.0f);\n\tfragColor.rgb += image(fragCoord.xy + vec2(.5,.0));\n\tfragColor.rgb += image(fragCoord.xy + vec2(.0,.5));\n\tfragColor.rgb += image(fragCoord.xy + vec2(.5,.5));\n    fragColor.rgb += image(fragCoord.xy + vec2(.25,.25));\n\tfragColor.rgb += image(fragCoord.xy + vec2(.75,.25));\n\tfragColor.rgb += image(fragCoord.xy + vec2(.25,.75));\n\tfragColor.rgb += image(fragCoord.xy + vec2(.75,.75));\n\tfragColor.rgb /= 8.0;\n}","name":"Image","description":"","type":"image"}]}