{"ver":"0.1","info":{"id":"ld3czr","date":"1517769632","viewed":185,"name":"perlinesque","username":"hypothete","description":"I've struggled with understanding Perlin noise for a long time, but I think I got the hang of it today.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["noise","perlin","gradient"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TWOPI 6.28319\n\n#define TERRAIN\n\nfloat rand (vec2 st) {\n    return fract(sin(dot(st.xy,vec2(12.9898,78.233)))*43758.5453123);\n}\n\nvec2 grad (vec2 st) {\n    float nn = rand(st);\n    return vec2(cos(nn * TWOPI), sin(nn * TWOPI));\n}\n\nfloat gradnoise (vec2 st) {\n    // returns range -1, 1\n    vec2 pa = floor(st);\n    vec2 pb = pa + vec2(1.0, 0.0);\n    vec2 pc = pa + vec2(0.0, 1.0);\n    vec2 pd = pa + vec2(1.0);\n    vec2 ga = grad(pa);\n    vec2 gb = grad(pb);\n    vec2 gc = grad(pc);\n    vec2 gd = grad(pd);\n    float ca = dot(ga, st - pa);\n    float cb = dot(gb, st - pb);\n    float cc = dot(gc, st - pc);\n    float cd = dot(gd, st - pd);\n    vec2 frast = fract(st);\n    return mix(\n        mix(ca, cb, smoothstep(0.0, 1.0, frast.x)),\n        mix(cc, cd, smoothstep(0.0, 1.0, frast.x)),\n        smoothstep(0.0, 1.0, frast.y));\n}\n\nfloat perlin (vec2 st, float scale, float freq, float persistence, float octaves) {\n    float p = 0.0;\n    float amp = 1.0;\n    for (float i=0.0; i<octaves; i++) {\n    \tp += gradnoise(st * freq / scale) * amp;\n        amp *= persistence;\n        freq *= 2.0;\n    }\n    return p;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float pers = 0.6;\n    float perld = perlin(fragCoord.xy + vec2(iTime * 64.0, 0), 128.0, 0.5, pers, 6.0);\n    \n    perld = perld * 0.5 + 0.5;\n    \n    vec3 col = vec3(perld);\n    \n#ifdef TERRAIN\n    float water = 0.5;\n    if (perld > water) {\n        // normalize gray val\n        col.rgb = vec3(pow((col.r - water) / (1.0 - water),1.0/2.2));\n        // generate shadow\n        float perle = perlin(fragCoord.xy + vec2(1.0, -1.0) + vec2(iTime * 64.0, 0), 128.0, 0.5, pers, 6.0);\n        perle = perle * 0.5 + 0.5;\n        if (perle < perld) {\n            col.rgb -= (perld - perle) * 32.0;\n        }\n    }\n    else {\n        col.r = 0.0;\n        col.g /= 2.0 * water;\n        col.b = 0.75;\n    }\n#endif\n    fragColor = vec4(\n        col,\n        1.0\n    );\n}","name":"Image","description":"","type":"image"}]}