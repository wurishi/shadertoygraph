{"ver":"0.1","info":{"id":"4csSDr","date":"1705153630","viewed":78,"name":"Anti-Aliased Line","username":"WasabiThumbs","description":"Demo I made quickly to prove that a shader-based line renderer is viable","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["line","antialiasing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float lw = 0.025;\nconst float lws = pow(lw, 2.0);\nconst float feather = 1.0;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float subLen = feather / min(iResolution.x, iResolution.y);\n\n    vec2 pa = vec2(0.2 + (0.1 * cos(iTime * 5.0)), 0.2 + (0.1 * sin(iTime * 5.0)));\n    vec2 pb = vec2(0.8 + (0.1 * sin(iTime * 3.0)), 0.8 + (0.1 * cos(iTime * 3.0)));\n    \n    float lm = (pb.y - pa.y) / (pb.x - pa.x);\n    float lb = pa.y - (lm * pa.x);\n    float ilm = -1.0 / lm;\n\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float ilb = uv.y - (ilm * uv.x);\n    float ix = (lb - ilb) / (ilm - lm);\n    float iy = (lm * ix) + lb;\n    ix = clamp(ix, min(pa.x, pb.x), max(pa.x, pb.x));\n    iy = clamp(iy, min(pa.y, pb.y), max(pa.y, pb.y));\n    \n    float dist = pow(ix - uv.x, 2.0) + pow(iy - uv.y, 2.0);\n    if (dist < lws) {\n        dist = lw - sqrt(dist);\n        float col = 1.0;\n        if (dist < subLen) {\n            col = dist / subLen;\n        }\n        fragColor = vec4(col, col, col, 1.0);\n    } else {\n        fragColor = vec4(0.0, 0.0, 0.0, 0.0);\n    }\n}","name":"Image","description":"","type":"image"}]}