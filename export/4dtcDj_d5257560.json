{"ver":"0.1","info":{"id":"4dtcDj","date":"1520247743","viewed":120,"name":"minimalistic tardis","username":"visy","description":"minimalistic tardis","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["tardis","minimalistic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float NEAR_CLIPPING_PLANE=.001;\nfloat FAR_CLIPPING_PLANE=100.;\nint NUMBER_OF_MARCH_STEPS=400;\nfloat EPSILON=.005;\nfloat DISTANCE_BIAS=.3;\nfloat t = 0.;\n\nfloat sdSphere(vec3 p, float s)\n{\n\treturn length(p) - (s);\n}\n\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n{\n  return length(max(abs(p)-b,0.0))-r;\n}\n\nfloat opU( float d1, float d2 )\n{\n    return min(d1,d2);\n}\n\nfloat opS( float d1, float d2 )\n{\n    return max(-d1,d2);\n}\n\n\nfloat opI( float d1, float d2 )\n{\n    return max(d1,d2);\n}\n\n\nvoid pR(inout vec2 p, float a) {\n\tp = cos(a)*p + sin(a)*vec2(p.y, -p.x);\n}\n\nfloat celli(in vec3 p){ p = fract(p)-.5; return dot(p, p); }\n\nfloat cellTile(in vec3 p){\n    vec4 d; \n    d.x = celli(p - vec3(.81, .62, .53));\n    p.xy = vec2(p.y-p.x, p.y + p.x)*.7071;\n    d.y = celli(p - vec3(.39, .2, .11));\n    p.yz = vec2(p.z-p.y, p.z + p.y)*.7071;\n    d.z = celli(p - vec3(.62, .24, .06));\n    p.xz = vec2(p.z-p.x, p.z + p.x)*.7071;\n    d.w = celli(p - vec3(.2, .82, .64));\n    d.xy = min(d.xz, d.yw);\n    return min(d.x, d.y)*2.66; \n}\n\nfloat hex(vec2 p) {\n    p.x *= 0.57735*2.;\n\tp.y += mod(floor(p.x), 2.)*.5;\n\tp = abs((mod(p, 1.) - .5));\n\treturn abs(max(p.x*1.5 + p.y, p.y*2.) - 1.);\n}\n\nfloat cellTile2(in vec3 p){\n    vec4 d; \n    d.x = celli(p - vec3(.81, .62, .53));\n    p.xy = vec2(p.y-p.x, p.y + p.x)+hex(p.xy*0.2);\n    d.y = celli(p - vec3(.39, .2, .11));\n    p.yz = vec2(p.z-p.y, p.z + p.y)+hex(p.yz*0.2);\n    d.z = celli(p - vec3(.62, .24, .06));\n    p.xz = vec2(p.z-p.x, p.z + p.x)+hex(p.xz*0.2);\n    d.w = celli(p - vec3(.2, .82, .64));\n    d.xy = min(d.xz, d.yw);\n    return min(d.x, d.y)*.5; \n}\nfloat bump(vec3 pos) {\n    float re = 0.;\n\tre += cellTile2(pos*.25) * cellTile2(pos*1.1) * 3. + cellTile2(pos*1.2) * cellTile2(pos*4.4) * .5;\n    return re;\n}\nvec3 hit;\n\n\nfloat scene(vec3 pos) {\n//\trota(pos);\n//    float of = .3*sin(pos.z*5.5);\n\n    pR(pos.xz,t);\n    float hull = sdRoundBox(pos, vec3(1.0,2.0,1.0), 0.01);\n    float hullCut;\n    \n    // on 4 sides\n    for (float a = 0.; a < 4.; a+=1.0) {\n        pR(pos.xz,a*3.1415/2.);\n\n        // recess\n        \n        float cut1 = sdRoundBox(pos+vec3(-0.45,0.20,1.45), vec3(0.4,1.7,0.5), 0.01);\n        float cut2 = sdRoundBox(pos+vec3(0.45,0.20,1.45), vec3(0.4,1.7,0.5), 0.01);\n\t    hullCut = opS(cut1,hull);\n        hullCut = opS(cut2,hullCut);\n\n        // panels\n        \n        for (float y = 1.45; y > -1.5; y-=0.83) {\n            cut1 = sdRoundBox(pos+vec3(-0.45,y,1.4), vec3(0.3,0.35,0.5), 0.01);\n            hullCut = opS(cut1,hullCut);\n            cut1 = sdRoundBox(pos+vec3(0.45,y,1.4), vec3(0.3,0.35,0.5), 0.01);\n            hullCut = opS(cut1,hullCut);\n        }\n        \n        hull = hullCut;\n\n    }\n\tfloat hullFinal = hullCut;    \n    \n    return hullFinal;\n}\n\nfloat sceneb(vec3 pos) {\n\treturn scene(pos);\n}\n\nvec2 raymarch(vec3 position, vec3 direction)\n{\n    float total_distance = NEAR_CLIPPING_PLANE;\n    float acc = 0.;\n    for(int i = 0 ; i < NUMBER_OF_MARCH_STEPS ; ++i)\n    {\n        vec3 pos = position + direction * total_distance;\n        float result = scene(pos);\n        acc+=cos(result*1.)*.05;\n\n        if(result < EPSILON)\n        {\n            return vec2(total_distance, acc);\n        }\n        \n        total_distance += result * DISTANCE_BIAS;\n        \n        \n        if(total_distance > FAR_CLIPPING_PLANE)\n            break;\n    }\n    return vec2(FAR_CLIPPING_PLANE, acc);\n}\n\nvec3 nr(vec3 n) {\n\treturn normalize(n);\n}\n\nvec3 normal( in vec3 pos )\n{\n    vec3 eps = vec3(.3,0.,0.)*EPSILON;\n\tvec3 nor = vec3(\n\t    sceneb(pos+eps.xyy) - sceneb(pos-eps.xyy),\n\t    sceneb(pos+eps.yxy) - sceneb(pos-eps.yxy),\n\t    sceneb(pos+eps.yyx) - sceneb(pos-eps.yyx) );\n\treturn nr(nor);\n}\n\n\n\nfloat orenNayarDiffuse(\n  vec3 lightDirection,\n  vec3 viewDirection,\n  vec3 surfaceNormal,\n  float roughness,\n  float albedo) {\n  \n  float LdotV = dot(lightDirection, viewDirection);\n  float NdotL = dot(lightDirection, surfaceNormal);\n  float NdotV = dot(surfaceNormal, viewDirection);\n\n  float s = LdotV - NdotL * NdotV;\n  float t = mix(1., max(NdotL, NdotV), step(0., s));\n\n  float sigma2 = roughness * roughness;\n  float A = 1. + sigma2 * (albedo / (sigma2 + .13) + .5 / (sigma2 + .33));\n  float B = .45 * sigma2 / (sigma2 + .09);\n\n  return albedo * max(0., NdotL) * (A + B * s / t) / 3.14159;\n}\n\nfloat fader = 1.0;\nfloat fader2 = 1.0;\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 res = iResolution.xy;\n    // pixel coordinates\n    vec2 uv = (-res + 2.*(fragCoord.xy))/res.y;\n    \n    vec3 direction = nr(vec3(uv, 0.));\n\n    t = iTime;\n    \n    float cz = -5.0;\n    \n\n    float FOV = 0.65;\n        \n\tvec3 camera_origin = vec3(0., -0., cz);\n\tvec3 lookAt = vec3(0.,-0.,cz+1.);\n    \n    vec3 forward = nr(lookAt-camera_origin);\n    vec3 right = nr(vec3(forward.z, 0., -forward.x ));\n    vec3 up = nr(cross(forward,right));\n\n    \n    vec3 ro = camera_origin;\n    vec3 rd = nr(forward + FOV*uv.x*right + FOV*uv.y*up);\n\n    vec2 result = raymarch(ro, rd);\n            \n    float fog = 1.0;\n    \n\tvec3 materialColor = vec3(10./255.,23./255.,72./255.);\n\n\tmaterialColor -= vec3(.4,4.7,8.0)*(bump(hit)+bump(hit*.2*vec3(1.,1.,4.))*1.5);\n    vec3 intersection = ro + rd*result.x;\n    \n    vec3 nrml = normal(intersection);\n    vec3 light_dir = nr(vec3(1.0,0.0,-1.0));\n    vec3 ref = reflect( rd, nrml );\n\t\n    float dom = smoothstep( -.1, 0.9, ref.y);\n    float spe = pow(clamp( dot( ref, light_dir ), 0., 1.0 ),32.);\n\n    float diffuse = orenNayarDiffuse(light_dir,rd,nrml,1.3,.7);\n    \n    vec3 light_color = vec3(1.);\n    vec3 ambient_color = light_color;\n    vec3 diffuseLit = materialColor * (diffuse * light_color + ambient_color);\n    vec3 outColor = diffuseLit*fog+dom*.3+spe*.6;\n    if (result.x < FAR_CLIPPING_PLANE) fragColor = vec4(outColor.rgb,1.0);\n    else fragColor=vec4(0.0);\n }","name":"Image","description":"","type":"image"}]}