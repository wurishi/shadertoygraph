{"ver":"0.1","info":{"id":"ddtBzr","date":"1696825009","viewed":111,"name":"newton's fractal test","username":"Swifter","description":"click and drag to do zoomy stuff\n\nhttps://www.youtube.com/watch?v=-RdOwhmqP5s","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// (A + Bi)(C + Di)\n// A*C + A*Di + C*Bi + BDi^2\n// AC + ADi + CBi - BD\n// (AC - BD) + i(AD + CB)\n\nvec2 c_mul(vec2 a, vec2 b) {\n    float real = a.x * b.x - a.y * b.y;\n    float im = a.x * b.y + b.x * a.y;\n    return vec2(real, im);\n}\n\n// (A + Bi)/(C + Di)\n// ((A + Bi)/(C + Di)) * ((C - Di)/(C - Di))\n// ((A + Bi)(C - Di))/((C + Di)(C - Di))\n\n// (A + Bi)(C - Di)\n// AC - ADi + CBi - BDi^2\n// AC - ADi + CBi + BD\n// (AC + BD) + i(-AD + CB)\n\n// (C + Di)(C - Di)\n// C^2 - CDi + CDi - D^2i^2\n// C^2 - D^2i^2\n// C^2 + D^2\n\n// ((AC + BD) + i(-AD + CB)) / (C^2 + D^2)\n// ((AC + BD) / (C^2 + D^2)) + (i(-AD + CB) / (C^2 + D^2))\n\nvec2 c_div(vec2 a, vec2 b) {\n    float denominator = pow(b.x, 2.) + pow(b.y, 2.);\n    float real = (a.x * b.x + a.y * b.y) / denominator;\n    float im = (-a.x * b.y + b.x * a.y) / denominator;\n    return vec2(real, im);\n}\n\nvec2 c_pow(vec2 a, int p) {\n    vec2 b = a;\n\n    for (int i = 1; i < p; i++) {\n        b = c_mul(b, a);\n    }\n\n    return b;\n}\n\nvec2 c_nat(float n) {\n    return vec2(n, 0);\n}\n\nvec2 c_nat(int n) {\n    return vec2(n, 0);\n}\n\n// Function\nvec2 p(vec2 x) {\n    return c_pow(x, 5) + c_pow(x, 2) - x + c_nat(1);\n}\n\n// Derivative\nvec2 pp(vec2 x) {\n    return c_mul(c_nat(5), c_pow(x, 4)) + c_mul(c_nat(2), x) - c_nat(1);\n}\n\nvec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nconst int ITERATIONS = 14;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 mouse = iMouse.xy / iResolution.xy;\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x /= iResolution.y/iResolution.x;\n    uv -= 0.5;\n    uv *= 2.;\n    \n    float zoom = pow(mouse.y, 5.) * 6000. + 0.5;\n    \n    uv.x += (mouse.x - 0.5) * 8.;\n    uv /= zoom;\n    \n    vec2 x0 = uv;\n    vec2 x1 = uv;\n    \n    for (int i = 0; i < ITERATIONS; i++) {\n        x1 = x0 - c_div(p(x0), pp(x0));\n        x0 = x1;\n    }\n    \n    float f = (x1.x + x1.y) + 0.3;\n    \n    vec3 col = palette(f, vec3(0.5), vec3(0.5), vec3(1), vec3(0, 0.1, 0.2));\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}