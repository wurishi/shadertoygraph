{"ver":"0.1","info":{"id":"tsGyDV","date":"1608765769","viewed":64,"name":"Perlin Noise (2D)","username":"thwart","description":"Perlin Noise","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Hash lookup table as defined by Ken Perlin.  This is a randomly\n// arranged array of all numbers from 0-255 inclusive.\nint[] permutation = int[](\n151,160,137,91,90,15,                 \n    131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,    \n    190, 6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,\n    88,237,149,56,87,174,20,125,136,171,168, 68,175,74,165,71,134,139,48,27,166,\n    77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,\n    102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,187,208, 89,18,169,200,196,\n    135,130,116,188,159,86,164,100,109,198,173,186, 3,64,52,217,226,250,124,123,\n    5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,\n    223,183,170,213,119,248,152, 2,44,154,163, 70,221,153,101,155,167, 43,172,9,\n    129,22,39,253, 19,98,108,110,79,113,224,232,178,185, 112,104,218,246,97,228,\n    251,34,242,193,238,210,144,12,191,179,162,241, 81,51,145,235,249,14,239,107,\n    49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127, 4,150,254,\n    138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180\n);\n\n// Fade function\nvec2 fade(vec2 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}\n\n\nfloat getCornerValue(vec2 gridXY, vec2 squareXY)\n{\n    int value = permutation[permutation[int(gridXY.x) & 255] + int(gridXY.y) & 255];\n    vec2 gradVector;\n    switch(value & 0x3){\n     \tcase 0:\n        \tgradVector = vec2(1., 1.);\n        break;\n        case 1:\n        \tgradVector =  vec2(-1., 1.);\n        break;\n     \tcase 2:\n        \tgradVector =  vec2(1., -1.);\n        break;\n     \tcase 3:\n        \tgradVector =  vec2(-1., -1.);\n        break;\n     \tdefault:\n        break;\n        \n    }\n    \n    return dot(gradVector, squareXY);\n}\n\nfloat noise2d(vec2 fragCoord, vec2 squareSize)\n{\n    \n    \n    \n    vec2 gridXY = floor(fragCoord / squareSize);\n    vec2 squareXY = fract(fragCoord / squareSize);\n\n    vec2 posBottomLeft = gridXY;\n    vec2 posTopLeft = gridXY + vec2(0., 1.);\n    vec2 posTopRight = gridXY + vec2(1., 1.);\n    vec2 posBottomRight = gridXY + vec2(1., 0.);\n\n    vec2 squareBottomLeft = squareXY;\n    vec2 squareTopLeft = vec2(squareXY.x, squareXY.y - 1.);\n    vec2 squareTopRight = vec2(squareXY.x - 1., squareXY.y - 1.);\n    vec2 squareBottomRight = vec2(squareXY.x - 1., squareXY.y);\n    \n    float bottomLeft = getCornerValue(posBottomLeft, squareBottomLeft);\n    float topLeft = getCornerValue(posTopLeft, squareTopLeft);\n    float topRight = getCornerValue(posTopRight, squareTopRight);\n    float bottomRight = getCornerValue(posBottomRight, squareBottomRight);\n    \n    vec2 uv = fade(squareXY);\n\n\t\n\treturn mix(\n\t\tmix(bottomLeft, bottomRight, uv.x),\n\t\tmix(topLeft, topRight, uv.x),\n        uv.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 squareSize = vec2(32., 32.);\n    \n    // Move (0,0) to center of screen\n    fragCoord -= vec2(iResolution.x, iResolution.y) / 2.;\n\t\n    // Output to screen\n    float noise = (noise2d(fragCoord - (iTime * 64.), squareSize) + 1.) / 2.;\n    fragColor = vec4(noise, noise, noise, 1.0);\n}\n\n\n","name":"Image","description":"","type":"image"}]}