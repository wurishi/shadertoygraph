{"ver":"0.1","info":{"id":"4XS3RV","date":"1708613896","viewed":36,"name":"tpnoté","username":"nbaananou","description":"tp1","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["tp"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Nour Baananou\n// L2 informatique\n//p2308474\n// Rotation matrix around z axis\n// a : Angle\nmat3 Rz(float a)\n{\n  float sa=sin(a);float ca=cos(a);\n  return mat3(ca,sa,0.,-sa,ca,0.,0.,0.,1.);\n}\n\n// Compute the ray\n//      m : Mouse position\n//      p : Pixel\n// ro, rd : Ray origin and direction\n\n\nvoid Ray(vec2 m, vec2 p, out vec3 ro, out vec3 rd)\n{\n  float a = 3. * 3.14 * m.x;\n  float le = 3.5;\n\n  // Origin\n  ro = vec3(0., 10., -30.);\n\n  ro *= Rz(a);\n\n  // Target point\n  vec3 ta = vec3(0., 10., 0.);  \n\n  // Orthonormal frame\n  vec3 w = normalize(ta - ro);\n  vec3 u = normalize(cross(w, vec3(0., 0., 1.)));\n  vec3 v = normalize(cross(u, w));\n  rd = normalize(p.x * u + p.y * v + le * w);\n}\n\n    \n// Primitives\n\n// Sphere\n// p : point\n// c : center of skeleton\n// r : radius\nfloat Sphere(vec3 p,vec3 c,float r)\n{\n  return length(p-c)-r;\n}\n\n// Box (Cube)\nfloat Box(vec3 p, vec3 center, vec3 size)\n{\n    vec3 d = abs(p - center) - size * 0.5;\n    return length(max(d, 0.0)) + min(max(d.x, max(d.y, d.z)), 0.0);\n}\n\n// Torus\nfloat Torus(vec3 p, float majorRadius, float minorRadius)\n{\n    vec2 q = vec2(length(p.xz) - majorRadius, p.y);\n    return length(q) - minorRadius;\n}\n\n// Cylinder\nfloat Cylinder(vec3 p, vec3 center, float radius, float height)\n{\n    vec2 d = abs(p.xz - center.xz) - vec2(radius, height * 0.5);\n    return min(max(d.x, d.y), 0.0) + length(max(d, 0.0));\n}\n\n// Capsule (Cylinder with rounded ends)\nfloat Capsule(vec3 p, vec3 a, vec3 b, float radius)\n{\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n    return length(pa - ba * h) - radius;\n}\n\n// Plane\nfloat Plane(vec3 p, vec3 normal, float distance)\n{\n    return dot(p, normal) + distance;\n}\n\n// Polyhedron (Triangular face)\nfloat Polyhedron(vec3 p, vec3 v0, vec3 v1, vec3 v2)\n{\n    vec3 normal = normalize(cross(v1 - v0, v2 - v0));\n    return dot(normal, p - v0);\n}\n\n// Exemple d'utilisation d'un polyèdre simple (triangle)\nfloat SimplePolyhedron(vec3 p)\n{\n    vec3 v0 = vec3(0.0, 0.0, 0.0);\n    vec3 v1 = vec3(1.0, 0.0, 0.0);\n    vec3 v2 = vec3(0.0, 1.0, 0.0);\n\n    return Polyhedron(p, v0, v1, v2);\n}\n\n// Escalier\nfloat Stairs(vec3 p) {\n    float height = 6.0;\n    float stepHeight = 1.0;\n    float stepWidth = 6.0;\n    int numSteps = 10;\n\n    for (int i = 0; i < numSteps; ++i) {\n        vec3 stepPosition = vec3(0.0, height, float(i) * stepWidth);\n        float step = Box(p, stepPosition, vec3(10.0, stepHeight, stepWidth));\n        height += stepHeight;\n\n        if (step < 0.0) {\n            return -1.0; // À l'intérieur de l'escalier\n        }\n    }\n\n    return 1.0; // À l'extérieur de l'escalier\n}\n\n\n\n// Operators\n\n// Union\n// a,b : field function of left and right sub-trees\nfloat Union(float a,float b)\n{\n  return min(a,b);\n}\n\n// Intersection operator\nfloat Intersection(float a, float b) {\n    return max(a, b);\n}\n\n// Difference operator\nfloat Difference(float a, float b) {\n    return max(a, -b);\n}\n\n// Smooth minimum function (used for smooth blending)\nfloat smoothMin(float a, float b, float k) {\n    float h = clamp(0.5 + 0.5 * (b - a) / k, 0.0, 1.0);\n    return mix(b, a, h) - k * h * (1.0 - h);\n}\n\n// Rotation operator\nvec3 Rotate(vec3 p, float angle, vec3 axis) {\n    float c = cos(angle);\n    float s = sin(angle);\n    mat3 rotationMatrix = mat3(\n        c + axis.x * axis.x * (1.0 - c), axis.x * axis.y * (1.0 - c) - axis.z * s, axis.x * axis.z * (1.0 - c) + axis.y * s,\n        axis.y * axis.x * (1.0 - c) + axis.z * s, c + axis.y * axis.y * (1.0 - c), axis.y * axis.z * (1.0 - c) - axis.x * s,\n        axis.z * axis.x * (1.0 - c) - axis.y * s, axis.z * axis.y * (1.0 - c) + axis.x * s, c + axis.z * axis.z * (1.0 - c)\n    );\n    return rotationMatrix * p;\n}\n\n// Translation operator\nvec3 Translate(vec3 p, vec3 translation) {\n    return p - translation;\n}\n\n// Scaling (Homothety) operator\nvec3 Scale(vec3 p, float factor) {\n    return p * factor;\n}\n\n// Potential field of the object\n// p : point\nfloat object(vec3 p)\n{\n    float stairs = Stairs(p);\n    if (stairs < 0.0) {\n        // L'intérieur de l'escalier, retourne une valeur négative\n        return stairs;\n    }\n\n\n\n}\n\n\n// Analysis of the scalar field\n\nconst int Steps=100;// Number of steps\nconst float Epsilon=.01;// Marching epsilon\n\n// Object normal\n// p : point\nvec3 ObjectNormal(vec3 p) \n\n{\n  const float eps=.001;\n  vec3 n;\n  float v=object(p);\n  n.x=object(vec3(p.x+eps,p.y,p.z))-v;\n  n.y=object(vec3(p.x,p.y+eps,p.z))-v;\n  n.z=object(vec3(p.x,p.y,p.z+eps))-v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\n// o : ray origin\n// u : ray direction\n// e : Maximum distance\n// h : hit\n// s : Number of steps\nfloat SphereTrace(vec3 o,vec3 u,float e,out bool h,out int s)\n{\n  h=false;\n  \n  // Start at the origin\n  float t = 0.;\n\n  \n  for(int i=0;i<Steps;i++)\n  {\n    s=i;\n    vec3 p=o+t*u;\n    float v=object(p);\n    // Hit object\n    if(v<0.)\n    {\n      h=true;\n      break;\n    }\n    // Move along ray\n    t+=max(Epsilon,v);\n    // Escape marched too far away\n    if(t>e)\n    {\n      break;\n    }\n  }\n  return t;\n}\n\n// Lighting\n\n// Background color\n// d : Ray direction\nvec3 background(vec3 d)\n{\n  return mix(vec3(.45,.55,.99),vec3(.65,.69,.99),d.z*.5+.5);\n}\n\n// Shadowing\n// p : Point\n// n : Normal\n// l : Light direction\nfloat Shadow(vec3 p,vec3 n,vec3 l)\n{\n  bool h;\n  int s;\n  float t=SphereTrace(p+Epsilon*n,l,100.,h,s);\n  if(!h)\n  {\n    return 1.;\n  }\n  return 0.;\n}\n\n// Shading and lighting\n// p : Point\n// n : Normal at point\n// e : Eye direction\nvec3 Shade(vec3 p,vec3 n,vec3 e)\n{\n  // Point light\n  const vec3 lp=vec3(5.,10.,25.);\n  \n  // Light direction to point light\n  vec3 l=normalize(lp-p);\n  \n  // Ambient color\n  vec3 ambient=.25+.25*background(n);\n  \n  // Shadow computation\n  float shadow=Shadow(p,n,l);\n  \n  // Phong diffuse\n  vec3 diffuse=.35*clamp(dot(n,l),0.,1.)*vec3(1.,1.,1.);\n  \n  // Specular\n  vec3 r=reflect(e,n);\n  vec3 specular=.15*pow(clamp(dot(r,l),0.,1.),35.)*vec3(1.,1.,1.);\n  vec3 c=ambient+shadow*(diffuse+specular);\n  return c;\n}\n\n// Shading according to the number of steps in sphere tracing\n// n : Number of steps\nvec3 ShadeSteps(int n)\n{\n  float t=float(n)/(float(Steps-1));\n  return.5+mix(vec3(.05,.05,.5),vec3(.65,.39,.65),t);\n}\n\n// Picture in picture\n// pixel : Pixel\n// pip : Boolean, true if pixel was in sub-picture zone\nvec2 Pip(in vec2 pixel,out bool pip)\n{\n  // Pixel coordinates\n  vec2 p=(-iResolution.xy+2.*pixel)/iResolution.y;\n  if(pip==true)\n  {\n    const float fraction=1./4.;\n    // Recompute pixel coordinates in sub-picture\n    if((pixel.x<iResolution.x*fraction)&&(pixel.y<iResolution.y*fraction))\n    {\n      p=(-iResolution.xy*fraction+2.*pixel)/(iResolution.y*fraction);\n      pip=true;\n    }\n    else\n    {\n      pip=false;\n    }\n  }\n  return p;\n}\n\n// Image\nvoid mainImage(out vec4 color,in vec2 pxy)\n{\n  // Picture in picture on\n  bool pip=true;\n  \n  // Pixel\n  vec2 pixel=Pip(pxy,pip);\n  \n  // Mouse\n  vec2 m=iMouse.xy/iResolution.xy;\n  \n  // Camera\n  vec3 ro,rd;\n  Ray(m,pixel,ro,rd);\n  \n  // Trace ray\n  \n  // Hit and number of steps\n  bool hit;\n  int s;\n  \n  float t = SphereTrace(ro, rd, 100.0, hit, s);\n\n\n  \n  // Shade background\n  vec3 rgb=background(rd);\n  \n  if(hit)\n  {\n    // Position\n    vec3 p=ro+t*rd;\n    \n    // Compute normal\n    vec3 n=ObjectNormal(p);\n    \n    // Shade object with light\n    rgb=Shade(p,n,rd);\n  }\n  \n  \n  if(pip==true)\n  {\n    rgb=ShadeSteps(s);\n  }\n  \n  color=vec4(rgb,1.);\n}","name":"Image","description":"","type":"image"}]}