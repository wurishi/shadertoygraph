{"ver":"0.1","info":{"id":"wlyfDc","date":"1618763993","viewed":133,"name":"Gray Scott Reaction Diffusion 3","username":"perceptron","description":"Turing patterns","likes":8,"published":1,"flags":32,"usePreview":0,"tags":["reactiondiffusion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = vec4(texelFetch(iChannel0, ivec2(fragCoord), 0).xyz, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec4 get_pixel(in ivec2 pixel) {\n    // wrap around\n    ivec2 resolution = ivec2(textureSize(iChannel0, 0));\n    pixel = (pixel + resolution) % resolution;\n    // fetch the texel\n\treturn texelFetch(iChannel0, pixel, 0);\n}\n\nvec4 laplace(in ivec2 pixel) {\n    vec4 sum = vec4(0.0);\n    sum += get_pixel(pixel + ivec2(-1,  0)) * 0.2;  // left\n    sum += get_pixel(pixel) * -1.0;\t\t\t\t   // center\n    sum += get_pixel(pixel + ivec2( 1,  0)) * 0.2;  // right\n    sum += get_pixel(pixel + ivec2(-1, -1)) * 0.05; // top left\n    sum += get_pixel(pixel + ivec2( 0, -1)) * 0.2;  // top middle\n    sum += get_pixel(pixel + ivec2( 1, -1)) * 0.05; // top left\n    sum += get_pixel(pixel + ivec2(-1,  1)) * 0.05; // bottom left\n    sum += get_pixel(pixel + ivec2( 0,  1)) * 0.2;  // bottom middle\n    sum += get_pixel(pixel + ivec2( 1,  1)) * 0.05; // bottom right\n    return sum;\n}\n\nconst float dA = 1.0;\nconst float dB = 0.5;\nconst float f = 0.055;\nconst float k = 0.062;\n\n// stripes\n//const float f = 0.035;\n//const float k = 0.0625;\n \n// spiral waves\n//const float f = 0.0118;\n//const float k = 0.0475;\n\n// cool\n//const float f = 0.05;\n//const float k = 0.0625;\n \nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    ivec2 pixel = ivec2(fragCoord);\n     \n    float valueA = 0.0;\n    float valueB = 0.0;\n\n    float a = get_pixel(pixel).x;\n    float b = get_pixel(pixel).z;\n   \n    vec4 laplacian = laplace(pixel);\n    \n    float ab2 = a * b * b;\n    valueA = a + (dA * laplacian.x) - ab2 + (f * (1.0 - a));\n    valueB = b + (dB * laplacian.z) + ab2 - ((k + f) * b);\n    \n    // need to clamp???\n    // valueA = clamp(valueA, 0.0, 1.0);\n    // valueB = clamp(valueB, 0.0, 1.0);\n    \n    if (iFrame == 0) {\n        valueA = 1.0;\n        valueB = 0.0;\n        vec2 uv = (gl_FragCoord.xy-0.5*iResolution.xy)/iResolution.y;\n        if (uv.x > -0.5 && uv.x < 0.5 && uv.y > -0.25 && uv.y < 0.25) {\n            valueA = 0.0;\n            valueB = 1.0;\n        }\n    }\n    \n    // chemical a is stored in x, chemical b is stored in z\n    fragColor = vec4(valueA, valueA-0.55, valueB, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"vec4 get_pixel(in ivec2 pixel) {\n    // wrap around\n    ivec2 resolution = ivec2(textureSize(iChannel0, 0));\n    pixel = (pixel + resolution) % resolution;\n    // fetch the texel\n\treturn texelFetch(iChannel0, pixel, 0);\n}\n\nvec4 laplace(in ivec2 pixel) {\n    vec4 sum = vec4(0.0);\n    sum += get_pixel(pixel + ivec2(-1,  0)) * 0.2;  // left\n    sum += get_pixel(pixel) * -1.0;\t\t\t\t   // center\n    sum += get_pixel(pixel + ivec2( 1,  0)) * 0.2;  // right\n    sum += get_pixel(pixel + ivec2(-1, -1)) * 0.05; // top left\n    sum += get_pixel(pixel + ivec2( 0, -1)) * 0.2;  // top middle\n    sum += get_pixel(pixel + ivec2( 1, -1)) * 0.05; // top left\n    sum += get_pixel(pixel + ivec2(-1,  1)) * 0.05; // bottom left\n    sum += get_pixel(pixel + ivec2( 0,  1)) * 0.2;  // bottom middle\n    sum += get_pixel(pixel + ivec2( 1,  1)) * 0.05; // bottom right\n    return sum;\n}\n\nconst float dA = 1.0;\nconst float dB = 0.5;\nconst float f = 0.055;\nconst float k = 0.062;\n\n// stripes\n//const float f = 0.035;\n//const float k = 0.0625;\n \n// spiral waves\n//const float f = 0.0118;\n//const float k = 0.0475;\n\n// cool\n//const float f = 0.05;\n//const float k = 0.0625;\n \nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    ivec2 pixel = ivec2(fragCoord);\n     \n    float valueA = 0.0;\n    float valueB = 0.0;\n\n    float a = get_pixel(pixel).x;\n    float b = get_pixel(pixel).z;\n   \n    vec4 laplacian = laplace(pixel);\n    \n    float ab2 = a * b * b;\n    valueA = a + (dA * laplacian.x) - ab2 + (f * (1.0 - a));\n    valueB = b + (dB * laplacian.z) + ab2 - ((k + f) * b);\n\n    // chemical a is stored in x, chemical b is stored in z\n    fragColor = vec4(valueA, valueA-0.55, valueB, 1.0);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"vec4 get_pixel(in ivec2 pixel) {\n    // wrap around\n    ivec2 resolution = ivec2(textureSize(iChannel0, 0));\n    pixel = (pixel + resolution) % resolution;\n    // fetch the texel\n\treturn texelFetch(iChannel0, pixel, 0);\n}\n\nvec4 laplace(in ivec2 pixel) {\n    vec4 sum = vec4(0.0);\n    sum += get_pixel(pixel + ivec2(-1,  0)) * 0.2;  // left\n    sum += get_pixel(pixel) * -1.0;\t\t\t\t   // center\n    sum += get_pixel(pixel + ivec2( 1,  0)) * 0.2;  // right\n    sum += get_pixel(pixel + ivec2(-1, -1)) * 0.05; // top left\n    sum += get_pixel(pixel + ivec2( 0, -1)) * 0.2;  // top middle\n    sum += get_pixel(pixel + ivec2( 1, -1)) * 0.05; // top left\n    sum += get_pixel(pixel + ivec2(-1,  1)) * 0.05; // bottom left\n    sum += get_pixel(pixel + ivec2( 0,  1)) * 0.2;  // bottom middle\n    sum += get_pixel(pixel + ivec2( 1,  1)) * 0.05; // bottom right\n    return sum;\n}\n\nconst float dA = 1.0;\nconst float dB = 0.5;\nconst float f = 0.055;\nconst float k = 0.062;\n\n// stripes\n//const float f = 0.035;\n//const float k = 0.0625;\n \n// spiral waves\n//const float f = 0.0118;\n//const float k = 0.0475;\n\n// cool\n//const float f = 0.05;\n//const float k = 0.0625;\n \nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    ivec2 pixel = ivec2(fragCoord);\n     \n    float valueA = 0.0;\n    float valueB = 0.0;\n\n    float a = get_pixel(pixel).x;\n    float b = get_pixel(pixel).z;\n   \n    vec4 laplacian = laplace(pixel);\n    \n    float ab2 = a * b * b;\n    valueA = a + (dA * laplacian.x) - ab2 + (f * (1.0 - a));\n    valueB = b + (dB * laplacian.z) + ab2 - ((k + f) * b);\n    \n    // chemical a is stored in x, chemical b is stored in z\n    fragColor = vec4(valueA, valueA-0.55, valueB, 1.0);\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"vec4 get_pixel(in ivec2 pixel) {\n    // wrap around\n    ivec2 resolution = ivec2(textureSize(iChannel0, 0));\n    pixel = (pixel + resolution) % resolution;\n    // fetch the texel\n\treturn texelFetch(iChannel0, pixel, 0);\n}\n\nvec4 laplace(in ivec2 pixel) {\n    vec4 sum = vec4(0.0);\n    sum += get_pixel(pixel + ivec2(-1,  0)) * 0.2;  // left\n    sum += get_pixel(pixel) * -1.0;\t\t\t\t   // center\n    sum += get_pixel(pixel + ivec2( 1,  0)) * 0.2;  // right\n    sum += get_pixel(pixel + ivec2(-1, -1)) * 0.05; // top left\n    sum += get_pixel(pixel + ivec2( 0, -1)) * 0.2;  // top middle\n    sum += get_pixel(pixel + ivec2( 1, -1)) * 0.05; // top left\n    sum += get_pixel(pixel + ivec2(-1,  1)) * 0.05; // bottom left\n    sum += get_pixel(pixel + ivec2( 0,  1)) * 0.2;  // bottom middle\n    sum += get_pixel(pixel + ivec2( 1,  1)) * 0.05; // bottom right\n    return sum;\n}\n\nconst float dA = 1.0;\nconst float dB = 0.5;\nconst float f = 0.055;\nconst float k = 0.062;\n\n// stripes\n//const float f = 0.035;\n//const float k = 0.0625;\n \n// spiral waves\n//const float f = 0.0118;\n//const float k = 0.0475;\n\n// cool\n//const float f = 0.05;\n//const float k = 0.0625;\n \nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    ivec2 pixel = ivec2(fragCoord);\n     \n    float valueA = 0.0;\n    float valueB = 0.0;\n\n    float a = get_pixel(pixel).x;\n    float b = get_pixel(pixel).z;\n   \n    vec4 laplacian = laplace(pixel);\n    \n    float ab2 = a * b * b;\n    valueA = a + (dA * laplacian.x) - ab2 + (f * (1.0 - a));\n    valueB = b + (dB * laplacian.z) + ab2 - ((k + f) * b);\n    \n    \n    // chemical a is stored in x, chemical b is stored in z\n    fragColor = vec4(valueA, valueA-0.55, valueB, 1.0);\n}","name":"Buffer D","description":"","type":"buffer"}]}