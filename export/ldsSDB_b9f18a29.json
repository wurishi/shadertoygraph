{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"float line(vec2 a, vec2 b, vec2 pos, float t)\n{\n    vec2 n = normalize(a - b);\n    vec2 an = a-pos - n * dot(a-pos, n);\n    \n    if (length(a-pos) > length(a-b) || length(b-pos) > length(a-b))\n        return -1.0;\n    \n    return t/iResolution.y - length(an);\n}\n\n// first order bezier 'curve'. c number of intervals, t-th step\nvec2 bezier1(vec2 a, vec2 b, vec2 pos, float c, float t)\n{\n    // calculate length of interval\n    float i = length(a-b) / c;\n    // calculate direction vector\n    vec2 n = normalize(b-a);\n    // calculate point at interval\n    return a + i*t*n;\n}\n\n// second order bezier curve\nvec2 bezier2(vec2 a, vec2 b, vec2 c, vec2 pos, float count, float t)\n{\n    // calculate length of interval on line a-b\n    float iab = length(a-b) / count;\n    // calculate length of interval on line b-c\n    float ibc = length(b-c) / count;\n    \n    // calculate direction vector of line a-b\n    vec2 nab = normalize(b-a);\n    // calculate direction vector of line b-c\n    vec2 nbc = normalize(c-b);\n    \n    // calculate new line between intverval points on a-b and b-c\n    vec2 ab1 = a + t*iab*nab;\n    vec2 bc1 = b + t*ibc*nbc;\n    \n    //vec2 b1 = \n    return bezier1(ab1, bc1, pos, count, t);\n    \n    //return line(bc1, b1, pos, 1.0);\n}\n\nvec2 bezier3(vec2 a, vec2 b, vec2 c, vec2 d, vec2 pos, float count, float t)\n{\n    float iab = length(a-b) / count;\n    float ibc = length(b-c) / count;\n    float icd = length(c-d) / count;\n    \n    vec2 nab = normalize(b-a);\n    vec2 nbc = normalize(c-b);\n    vec2 ncd = normalize(d-c);\n    \n    vec2 ab1 = a + t*iab*nab;\n    vec2 bc1 = b + t*ibc*nbc;\n    vec2 cd1 = c + t*icd*ncd;\n    \n    return bezier2(ab1, bc1, cd1, pos, count, t);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    float ar = iResolution.x / iResolution.y;\n    \n    vec2 pos = uv * vec2(ar, 1.0);\n    \n    vec3 col = vec3(1.0);\n    \n    vec2 a = vec2(ar/4.0, 0.2);\n    \n    vec2 b = iMouse.xy / iResolution.xy * vec2(ar, 1.0);\n    //vec2 b = vec2(ar/2.0, 0.8);\n    \n    vec2 d = vec2(ar/1.25, 0.8);\n    vec2 c = vec2(ar/1.25, 0.2);\n    \n    // number of intervals  \n    const float count = 20.0;\n    \n    for (float i=0.0; i<count; i+=1.0)\n    {\n        vec2 b1 = bezier3(a, b, c, d, pos, count, i);\n        vec2 b2 = bezier3(a, b, c, d, pos, count, i+1.0);\n        \n        if (line(a, b, pos, 1.0) > 0.0 || \n            //line(b, c, pos, 1.0) > 0.0 || \n            line(c, d, pos, 1.0) > 0.0 || \n            line(b1, b2, pos, 1.0) > 0.0)\n            col = vec3(0.0);\n    }\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"ldsSDB","date":"1406591723","viewed":204,"name":"Ludicrously complicated Bezier","username":"sed","description":"The mouse controls the left bezier handle.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d","bezier"],"hasliked":0,"parentid":"","parentname":""}}