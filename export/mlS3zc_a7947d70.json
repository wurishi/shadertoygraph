{"ver":"0.1","info":{"id":"mlS3zc","date":"1673618024","viewed":105,"name":"texture smuggling","username":"Trixelized","description":"smuggling multiple RGB textures in a single 8-bit color depth, in a single buffer.","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["compression"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec3 col_0 = texture(iChannel0, uv).rgb;\n    vec3 col_1 = color_from_int(int(col_0.r * 256.0));\n    vec3 col_2 = color_from_int(int(col_0.g * 256.0));\n    vec3 col_3 = color_from_int(int(col_0.b * 256.0));\n    \n    float t = fract(iTime * 0.125) * 3.0;\n    \n    vec3 col = col_1;\n    col = mix(col, col_2, smoothstep(0.0, 0.2, t));\n    col = mix(col, col_3, smoothstep(1.0, 1.2, t));\n    col = mix(col, col_1, smoothstep(2.0, 2.2, t));\n    \n    col = mix(col, col_0, smoothstep(0.65, 0.75, uv.x + 0.4 * uv.y));\n    \n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// this to the power of 3 is the amount of colors you can store\n// if it exceeds 256 it may break (not here on shadertoy though)\n#define color_division 6\n\n\nvec3 color_from_int(int single) {\n    vec3 result = vec3(0.0);\n    \n    float colors = float(color_division);\n    float d = colors - 1.0;\n    \n    result.r = mod(float(single), colors) / d;\n    result.g = mod(floor(float(single) / colors), colors) / d;\n    result.b = mod(floor(float(single) / pow(colors, 2.0)), colors) / d;\n    \n    return result;\n}\n\nint int_from_color(vec3 color) {\n    float result = 0.0;\n    \n    float colors = float(color_division);\n    float d = colors - 1.0;\n    \n    result += floor(color.r * d);\n    result += floor(color.g * d) * colors;\n    result += floor(color.b * d) * pow(colors, 2.0);\n    \n    return int(result);\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    \n    vec3 result = vec3(0.0);\n    result.r = float(int_from_color(texture(iChannel0, uv).rgb));\n    result.g = float(int_from_color(texture(iChannel1, uv).rgb));\n    result.b = float(int_from_color(texture(iChannel2, uv).rgb));\n    \n    fragColor = vec4(result / 256.0, 1.0);\n}\n","name":"Buffer A","description":"","type":"buffer"}]}