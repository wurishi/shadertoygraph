{"ver":"0.1","info":{"id":"sdd3zH","date":"1629189755","viewed":111,"name":"Blinn-Phong Sphere & RimLight","username":"wylm","description":"Blinn-Phong Sphere base on https://www.shadertoy.com/view/MdBfW3.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["blinnphong","rimlight"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926535897932384626433832795\n#define t iTime * 0.5\n\nvec3 shade(float r, vec2 center, vec2 pos, vec3 l[2])\n{\n    float z = sqrt(r * r - pos.x * pos.x - pos.y * pos.y);\n    \n    vec3 n = normalize(vec3(pos.x, pos.y, z)); \t\t// Surface normal\n\n    vec3 c_diff = vec3(0.9, 0.0, 0.7);\t\t\t\t// Diffuse color    \n    vec3 c_spec = vec3(0.0, 1.0, 1.0);\t\t\t\t// Specular color\n\n    float m = 11.0; \t\t\t\t\t\t\t\t// Surface Smoothness\n    float El = 0.9; \t\t\t\t\t\t\t\t// Irradiance of light source\n    vec3 Kd = c_diff.xyz / PI; \t\t\t\t\t\t// Diffuse term\n    vec3 Ks = c_spec.xyz * ((m + 8.0) / (8.0 * PI));// Specular term\n\n    vec3 Lo = vec3(0.2);\n    for (int i = 0; i < 2; i++)\n    {\n        vec3 h = normalize(l[i] + n); // Half vector\n\n        float cosTi = max(dot(n, l[i]), 0.0);\n        float cosTh = max(dot(n, h), 0.0);\n        Lo += (Kd.xyz + Ks.xyz * pow(cosTh, m)) * El * cosTi; // Outgoing radiance\n    }\n    \n    return Lo; \n    \n}\n\nvec3 RimLight(vec3 Lo,float r,vec2 center,vec2 pos)\n{\n    float det = r * r - pos.x * pos.x - pos.y * pos.y;\n    if(det < 0.0){\n        return Lo;\n    }\n    float z = sqrt(det);\n    \n    vec3 n = normalize(vec3(pos.x, pos.y, z)); \t\t// Surface normal\n    \n    float param = 1.0 - max(0.0, dot(n, normalize(vec3(center.xy, 1.0))));\n    \n    return Lo + vec3(pow(param, 3.0) * 1.5);\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t//\tSphere Definition\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec2 center = vec2(0.0,0.0);\n    float r = 0.75;\n    vec2 pos = uv;\n\n\t//\tLight vector\n\tvec3 l[2];\n    l[0] = normalize(vec3(sin(t), sin(t), cos(t)));\n    l[1] = normalize(vec3(-sin(t), cos(t), sin(t)));\n\n    // Outgoing radiance\n\tvec3 Lo = shade(r, center, pos, l);\n    \n    Lo = RimLight(Lo, r, center, pos);\n\n\tfragColor = vec4(Lo, 1.0);\n}","name":"Image","description":"","type":"image"}]}