{"ver":"0.1","info":{"id":"sdGBz3","date":"1658779956","viewed":140,"name":"Zeta3d","username":"guil","description":"Height : log(1+modulus)\ncolor : phase\nAccurate for the first 60 seconds, a bit horny after that.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["zeta"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float pi = 3.1415926535897932;\n\nmat2 rot(float a) {\n\treturn mat2(cos(a),sin(a),-sin(a),cos(a));\t\n}\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n\n\n\n//------------------ ------------------------------------------\n// complex number operations\nvec2 cadd( vec2 a, float s ) { return vec2( a.x+s, a.y ); }\nvec2 cmul( vec2 a, vec2 b )  { return vec2( a.x*b.x - a.y*b.y, a.x*b.y + a.y*b.x ); }\nvec2 cinv(vec2 z) {return vec2(z.x,-z.y)/dot(z,z);}\nvec2 cdiv( vec2 a, vec2 b )  { float d = dot(b,b); return vec2( dot(a,b), a.y*b.x - a.x*b.y ) / d; }\nvec2 csqr( vec2 a ) { return vec2(a.x*a.x-a.y*a.y, 2.0*a.x*a.y ); }\nvec2 csqrt( vec2 z ) { float m = length(z); return sqrt( 0.5*vec2(m+z.x, m-z.x) ) * vec2( 1.0, sign(z.y) ); }\nvec2 conj( vec2 z ) { return vec2(z.x,-z.y); }\nvec2 cpow( vec2 z, float n ) { float r = length( z ); float a = atan( z.y, z.x ); return pow( r, n )*vec2( cos(a*n), sin(a*n) ); }\nvec2 cpow( float n, vec2 z ) {  return pow( n, z.x )*vec2( cos(z.y*log(n)), sin(z.y*log(n)) ); }\nvec2 cexp( vec2 z) {  return exp( z.x )*vec2( cos(z.y), sin(z.y) ); }\nvec2 clog( vec2 z) {  return vec2( 0.5*log(z.x*z.x+z.y*z.y), atan(z.y,z.x)); }\nvec2 csin( vec2 z) { float r = exp(z.y); return 0.5*vec2((r+1.0/r)*sin(z.x),(r-1.0/r)*cos(z.x));}\nvec2 cpow( vec2 a, vec2 b ) {  return cexp(cmul(b,clog(a))) ;}\nvec2 ccos( vec2 z) { float r = exp(z.y); return 0.5*vec2((r+1.0/r)*cos(z.x),-(r-1.0/r)*sin(z.x));}\n//\n\n\n\n// Spouge's method\nvec2 gamma(vec2 z){\n    const int N = 8;\n    float c = sqrt(2.*pi);\n\tvec2 s = vec2(c,0.);\n    float f = 1.;\n\tfor(int k = 1; k<N ;k++){\n\t\tc = exp(float(N-k)) * pow(float(N-k),float(k)-.5)/f;\n        f *= -float(k);\n        s += cinv(z+vec2(float(k),0.))*c;\n\t}\n\ts = cmul(s,cmul(cexp(-z-vec2(float(N),0.)),cpow(z+vec2(float(N),0.),z+vec2(.5,0.))));\n    return cdiv(s,z);   \n}\n\n\nvec2 zeta3(vec2 s) {\n  const int N = 20;  \n  \n  vec2 sum1 = vec2(0);\n  float a = 1.0;\n  for(int i = 1; i <= N; i++) {\n    sum1 += a*(cpow(float(i), -s));\n    a = -a;\n  }\n  vec2 sum2 = vec2(0);\n  a = -1.0;\n  float bk= 1.0/pow(2.,float(N));\n  float ek= bk;\n  for(int i = 0 ; i <  N; i++) {\n    sum2 += a*ek*(cpow(float(2*N-i),-s));\n    bk *= float(N-i)/float(i+1);\n    ek += bk;    \n    a = -a;\n  }\n\n\n  return cdiv(sum1+sum2, vec2(1,0) - cpow(2., vec2(1,0) - s));\n}\n\nvec2 khi(vec2 z){\n    return cmul(cmul(cpow(2.*pi,z)/pi,csin(pi*z/2.)),gamma(vec2(1.,0.)-z));\n}  \n\n\nvec2 zeta(vec2 z){\n    if(z.x<.5&&abs(z.y)<55.)return cmul(khi(z),zeta3(vec2(1.,0.)-z));\n    return zeta3(z);\n}\n\n\nvec3 field(in vec3 p) {\n\t\n    vec2 s=p.xz;\n    //s=gamma(-s);\n    s=zeta(s);\n    float d=(log(length(s)+1.)-p.y);\n    return vec3(s,d);\n}\n\nvec3 col(vec2 u){\n    return hsv2rgb(vec3(atan(u.y,u.x)/6.28,.4,1.));\n}\n\nvec3 raycast( in vec3 ro, vec3 rd )\n{\n    float t = 1., dt = .1, d, dd;\n    vec3 v, c, v1;\n    for( int i=0; i<100; i++ )\n\t{        \n        v = field(ro+t*rd);\n        d=v.z;        \n        t+=dt*d;        \n        if(abs(d)<.0001)break;\n                       \n    } \n    v = field(ro+t*rd+vec3(.1));\n    dd=v.z-d;\n    c=col(v.xy)*exp(-4.*abs(dd));\n    //c=vec3(1)*exp(-4.*abs(dd));\n    return c;    \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfloat t = iTime;\n    vec2 q = fragCoord.xy / iResolution.xy;\n    vec2 p = -1.0 + 2.0 * q;\n    p.x *= iResolution.x/iResolution.y;\n   \n    \n    // camera\n\n    vec3 ro = vec3(10.,5.,2.);   \n    ro.z -=t;\n    vec3 rd = normalize(vec3( p.y , 2., p.x ));   \n    rd.xy *= rot(1.2);\n    \n    \n\t// raymarch \n    \n    vec3 col = raycast(ro,rd);\n    \t\n\t// shade\n        \n    col = clamp(col,0.,1.);\n    fragColor = vec4( col, 1.0 );\n}\n","name":"Image","description":"","type":"image"}]}