{"ver":"0.1","info":{"id":"43lBzs","date":"1728865751","viewed":35,"name":"Virtual Orbit","username":"gee8sh","description":"Experimenting with VR. Still so much a draft.","likes":1,"published":1,"flags":1,"usePreview":0,"tags":["raytracing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 4.0 * atan(1.0);\nconst vec3  sunDir = normalize(vec3(-4.0, 1.0, -1.0));\nconst vec3  sunDir0 = normalize(sunDir + vec3(0.0,  0.005,  0.000));\nconst vec3  sunDir1 = normalize(sunDir + vec3(0.0, -0.005,  0.000));\nconst vec3  sunDir2 = normalize(sunDir + vec3(0.0,  0.000,  0.005));\nconst vec3  sunDir3 = normalize(sunDir + vec3(0.0,  0.000, -0.005));\n\nconst vec3  orbitAxis = normalize(cross(vec3(0.0, 0.0, -1.0), sunDir));\nconst vec3  orbitTangent = normalize(cross(sunDir, orbitAxis));\n\nconst vec4  planet = vec4(0.0, 0.0, -8.0, 1.0);\n\nconst vec3 ambient = vec3(pow(2.0, -9.0));\n\nvec4 moon() {\n    float orbitPeriod = 7.0;\n    float orbitRadius = 3.0;\n    float moonAngle = PI * iTime / orbitPeriod;\n    vec3  moonX = cos(moonAngle) * sunDir;\n    vec3  moonY = sin(moonAngle) * orbitTangent;\n    return vec4(orbitRadius * (moonX + moonY) + planet.xyz, 0.25);\n}\n\nvec3 cameraPos() {\n    float orbitPeriod = 11.0;\n    float orbitRadius = 6.0;\n    float deviation = 4.0;\n    float angle = -PI * iTime / orbitPeriod;\n    float cs = cos(angle);\n    float sn = sin(angle);\n    float b = -deviation * cs;\n    float dist = b + sqrt(b * b + orbitRadius * orbitRadius - deviation * deviation);\n    return vec3(0.0, 0.0, deviation - orbitRadius) + dist * vec3(sn, 0.0, cs);\n}\n\nvec4 planets[2];\n\nvec3 env(vec3 fragRayDir) {\n    float c = 0.55 + 0.45 * dot(fragRayDir, sunDir);\n    return vec3(min(pow(c, 32.0), 1.0));\n}\n\nvec3 shootSphere(int planetId, vec3 rayOri, vec3 rayDir) {\n    vec4  planet = planets[planetId];\n    vec3  relRayOri = rayOri - planet.xyz;\n    float half_b = dot(rayDir, relRayOri);\n    float c = dot(relRayOri, relRayOri) - planet.w * planet.w;\n    float d = half_b * half_b - c;\n    float sqrt_d = sqrt(d);\n    float dist = -half_b - sqrt_d;\n    return vec3(dist, d, float(planetId));\n}\n\nvec3 shoot(vec3 rayOri, vec3 rayDir) {\n    vec3 hit = vec3(1000000.0, -1.0, -1.0);\n    for (int i = 0; i < 2; i++) {\n        vec3 newHit = shootSphere(i, rayOri, rayDir);\n        if (newHit.y > 0.0 && newHit.x > 0.001 && newHit.x < hit.x) {\n            hit = newHit;\n        }\n    }\n    return hit;\n}\n\nvec4 shade(int planetId, vec3 hitPos) {\n    vec4  planet = planets[planetId];\n    vec3  normal = normalize(hitPos - planet.xyz);\n    float d = dot(sunDir, normal);\n    return vec4(vec3(max(d, 0.0)), d);\n}\n\nvec3 rayOrigin(vec3 camPos, vec3 fragRayOri) {\n    return camPos + fragRayOri;\n}\n\nvec3 rayDirection(vec3 camPos, vec3 fragRayDir) {\n    vec3 back = normalize(camPos - planet.xyz);\n    vec3 up = vec3(0.0, 1.0, 0.0);\n    vec3 right = cross(up, back);\n    return mat3(right, up, back) * fragRayDir;\n}\n\nvec3 color(vec3 fragRayOri, vec3 fragRayDir) {\n    vec3 camPos = cameraPos();\n    vec3 rayOri = rayOrigin(camPos, fragRayOri);\n    vec3 rayDir = rayDirection(camPos, fragRayDir);\n    vec3 hit = shoot(rayOri, rayDir);\n    if (hit.y > 0.0 && hit.x > 0.0) {\n        rayOri = rayOri + hit.x * rayDir;\n        rayDir = sunDir; \n        vec4 s = shade(int(hit.z), rayOri);\n        if (s.w <= 0.0) {\n            return ambient + s.xyz;\n        }\n        hit = shoot(rayOri, rayDir);\n        return ambient + s.xyz * (hit.y > 0.0 && hit.x > 0.0\n            ? shade(int(hit.z), rayOri + hit.x * rayDir).xyz\n            : env(rayDir)\n        );\n    }\n    return env(rayDir);\n}\n\nvec3 correctedColor(vec2 fragCoord, vec3 fragRayOri, vec3 fragRayDir) {\n    vec3 rayDir = fragRayDir;\n    vec3 dx = 0.5 * dFdx(rayDir);\n    vec3 dy = 0.5 * dFdy(rayDir);\n    return sqrt(0.25 * (\n          color(fragRayOri, normalize(rayDir))\n        + color(fragRayOri, normalize(rayDir + dx))\n        + color(fragRayOri, normalize(rayDir + dy))\n        + color(fragRayOri, normalize(rayDir + dx + dy))\n    ));\n}\n\nvoid init() {\n    planets[0] = planet;\n    planets[1] = moon();\n}\n\nvoid mainVR(out vec4 fragColor, in vec2 fragCoord, in vec3 fragRayOri, in vec3 fragRayDir)\n{\n    init();\n    fragColor = vec4(\n        correctedColor(fragCoord, fragRayOri, fragRayDir), \n        1.0\n    );\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec3  fragRayOri = vec3(0.0);\n    vec2  dirXY = fragCoord - 0.5 * iResolution.xy;\n    float dirZ  = -max(iResolution.x, iResolution.y);\n    vec3  fragRayDir = vec3(dirXY, dirZ);\n    mainVR(fragColor, fragCoord, fragRayOri, fragRayDir);\n}","name":"Image","description":"","type":"image"}]}