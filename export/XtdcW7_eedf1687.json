{"ver":"0.1","info":{"id":"XtdcW7","date":"1534691924","viewed":194,"name":"Perlin-Worley 2.5D","username":"il_presidente","description":"Shader used in order to produce volumetric clouds.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["3dnoise","perlin","worley"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float Random2D(in vec3 st)\n{\n\treturn fract(sin(dot(st.xyz, vec3(12.9898, 78.233, 57.152))) * 43758.5453123);\n}\n\nfloat Interpolate(float a, float b, float x) {  // cosine interpolation\n\tfloat ft = x * 3.1415927f;\n\tfloat f = (1. - cos(ft)) * 0.5;\n\treturn  a * (1. - f) + b * f;\n}\n\nfloat InterpolatedNoise(float x, float y, float z) {\n\tint integer_X = int(floor(x));\n\tfloat fractional_X = fract(x);\n\tint integer_Y = int(floor(y));\n\tfloat fractional_Y = fract(y);\n    int integer_Z = int(floor(z));\n    float fractional_Z = fract(z);\n    \n\tvec3 randomInput = vec3(integer_X, integer_Y, integer_Z);\n\tfloat v1 = Random2D(randomInput + vec3(0.0, 0.0, 0.0));\n\tfloat v2 = Random2D(randomInput + vec3(1.0, 0.0, 0.0));\n\tfloat v3 = Random2D(randomInput + vec3(0.0, 1.0, 0.0));\n\tfloat v4 = Random2D(randomInput + vec3(1.0, 1.0, 0.0));\n    \n    float v5 = Random2D(randomInput + vec3(0.0, 0.0, 1.0));\n\tfloat v6 = Random2D(randomInput + vec3(1.0, 0.0, 1.0));\n\tfloat v7 = Random2D(randomInput + vec3(0.0, 1.0, 1.0));\n\tfloat v8 = Random2D(randomInput + vec3(1.0, 1.0, 1.0));\n    \n    \n\tfloat i1 = Interpolate(v1, v2, fractional_X);\n\tfloat i2 = Interpolate(v3, v4,  fractional_X);\n    \n    float i3 = Interpolate(v5, v6, fractional_X);\n    float i4 = Interpolate(v7, v8, fractional_X);\n    \n    float y1 = Interpolate(i1, i2, fractional_Y);\n    float y2 = Interpolate(i3, i4, fractional_Y);\n    \n    \n\treturn Interpolate(y1, y2, fractional_Z);\n}\n\n\n\nvec3 random3( vec3 p ) {\n    return fract(sin(vec3(dot(p,vec3(127.1,311.7, 194.1729)),dot(p,vec3(269.5,183.3, 72.0192)), dot(p,vec3(183.3,72.0192,311.7))))*43758.5453);\n}\n\nfloat worley(vec3 st) {\n\tfloat color = 0.0;\n\n    // Scale\n    st *= 15.;\n\n    // Tile the space\n    vec3 i_st = floor(st);\n    vec3 f_st = fract(st);\n\n    float m_dist = 1.;  // minimun distance\n\n    for (int y= -1; y <= 1; y++) {\n        for (int x= -1; x <= 1; x++) {\n\t\tfor (int z = -1; z<=1 ; z++) {\n\n            // Neighbor place in the grid\n            vec3 neighbor = vec3(float(x),float(y), float(z));\n\n            // Random position from current + neighbor place in the grid\n            vec3 point = random3(i_st + neighbor);\n\n\n\t\t\t// Vector between the pixel and the point\n            vec3 diff = neighbor + point - f_st;\n\n            // Distance to the point\n            float dist = pow(length(diff), 1.0);\n\n            // Keep the closer distance\n            m_dist = min(m_dist, dist);\n\t\t\t}\n        }\n    }\n\n    // Draw the min distance (distance field)\n    color += m_dist;\n\n    return 1. - color;\n}\n\nfloat worleyFBM(vec3 st){\n\tfloat color = 0.;\n\tfloat amplitude = 1.;\n\tfloat freq = 1.5/2.0;\n\tint octaves = 10;\n\tfloat persistence = 0.5;\n    float amplitudes[3] = float[](0.625, 0.25, 0.125);\n\tfor(int i = 0; i < octaves; i++){\n\t\tamplitude *= persistence;\n\t\tfreq *= 0.5;\n\n\t\tcolor += worley(st/freq)*amplitude;\n\t}\n\treturn color;\n\n}\n\n\nfloat remap(float originalValue, float originalMin, float originalMax, float newMin, float newMax)\n{\n\treturn newMin + (((originalValue - originalMin) / (originalMax - originalMin)) * (newMax - newMin));\n}\n\nfloat perlinFBM(vec3 st){\n\n    const float initScale = 5.0;\n    st*=initScale;\n    const int octaves = 5;\n    float a = 0.5;\n    float f = 1.0;\n    float tot = 0.0;\n    for(int i = 0; i <= octaves; ++i){\n        tot += a*InterpolatedNoise(f*st.x, f*st.y, f*st.z);\n     \ta *= a;\n        f *= 2.0;\n    }\n    return tot;\n    \n}\n\nfloat perlinFBM(vec2 st){\n \treturn perlinFBM( vec3(st + iTime/20.0*vec2(1.,0),iTime/50.0));   \n}\n\nfloat worleyFBM(vec2 st){\n \treturn worleyFBM( vec3(st + iTime/20.0*vec2(1.,0),iTime/50.0));   \n}\n\nfloat perlinWorley(vec2 st){\n    \n    vec2 pixel_coords = st;\n    \n    float perlin = perlinFBM(pixel_coords/float(iResolution));\n\tfloat worley = worleyFBM(pixel_coords/float(iResolution));\n\tperlin = clamp(perlin, 0.0, 1.0);\n\tworley = clamp(worley, 0.0, 1.0);\n    float worley2 = remap(worley, 0.0, 1.0, 0.0, 0.45);\n\treturn remap( 1. - worley2, 0.0, 1.0, perlin, 1.0);\n    \n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n \t\n\tfloat perlinWorley = perlinWorley(fragCoord);\n    \n    fragColor = vec4(0., perlinWorley*0.90, perlinWorley, 1.0);\n    \n}","name":"Image","description":"","type":"image"}]}