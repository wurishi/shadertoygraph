{"ver":"0.1","info":{"id":"XtV3zw","date":"1473866560","viewed":283,"name":"Super Continuous Spectrum","username":"ttoinou","description":"Upgraded https://www.shadertoy.com/view/XdX3z2 \nEach R,G,B has a different scale for looking up FFT\nValues are continuous\nfft function can be used to animate other things\n\nMusic from a friend","likes":6,"published":1,"flags":64,"usePreview":0,"tags":["fft","spectrum","music","audio"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"MdB3RD","filepath":"https://soundcloud.com/ravisik/arp2-v2?in=ravisik/sets/ep-rave-sickness-test","previewfilepath":"https://soundcloud.com/ravisik/arp2-v2?in=ravisik/sets/ep-rave-sickness-test","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define dx iMouse.x/iResolution.x\n#define dy iMouse.y/iResolution.y\n\n// fft Options\n#define inputSound iChannel0\n#define fftWidth \t\t1.0\t\t\t// width of fft texture (why not 512.0 ?! )\n#define fftRadius \t\t0.05\t\t// width of window for fft sampling\n#define fftSmooth \t\t1.0\t\t\t// smoothness coeff\n#define fftRadiusCoeff \t3.0 \t\t// enlargment of radius with G and B\n#define fftPreamp\t\t0.8\t\t\t// pre amp before dynamic\n#define fftBoost  \t\t0.2\t\t\t// dynamic amp\n#define fftSamples \t\t111 \t\t\t// number of iteration for fft sampling, increases quality !\n#define fftMinBass \t\t0.00196 \t// 1.0/512.0\n\n#define to01(x) clamp(x,0.0,1.0)\n\n#define background 0.5\n#define background2 0.8\n\nfloat bassHyperbola(float f){\n  //return 0.0;\n  return 0.8 /(16.0*f + 1.5) - 0.05;\n  //return 1.0/(7.0*f + 3.0);\n  //return 1.0/(15.0*f + 2.0);\n}\n\nfloat bass(float f,float i){\n  //return i; \t\t\t\t\t\t// nothing\n  //return bassHyperbola(f);// see graph\n  //return i - dx*1.0 /(16.0*f + 1.3);    // bass attenuation\n  return (i - bassHyperbola(f))/(1.0 - bassHyperbola(f));    // bass attenuation\n}\n\nfloat trebles(float f,float i){\n  //return i; \t\t\t\t\t\t// nothing\n  float k = f-1.0;\n  //return i * ( 3.0 - 2.0*k*k );\t// amplify trebles, x3 for trebles, x1 for bass\n  return i * ( 2.0 - 1.0*k*k );\t\t// amplify trebles, x2 for trebles, x1 for bass\n}\n\nfloat remapIntensity(float f, float i){\n    //return i; // nothing\n    float k = to01( trebles(f,bass(f,i))*fftPreamp);\n    //return k; // no dynamic\n    return k*(k+fftBoost); // more dynamic\n}\n\nfloat remapFreq(float freq){\n // linear scale\n //return clamp(freq,fftMinBass,1.0);\n // log scale\n return clamp(to01(- log(1.0-freq/2.0 + 0.01)),fftMinBass,1.0);\n}\n\nfloat fft(float f,float r){\n    float sum = 0.0;\n    float val = 0.0;\n    float coeff = 0.0;\n    \n    float k = 0.0;\n    \n     // loop sampling\n    for( int i = 0; i < fftSamples ; i++ ){\n        k = float(i)/float(fftSamples-1)-0.5;\n        // decreasing factor, more important around 0\n        coeff = exp(-k*k/(fftSmooth*fftSmooth)*2.0);\n        //coeff = 1.0;\n        \n\t\tval += texture(inputSound, vec2( remapFreq(f + k * r)*fftWidth, 0.0) ).r * coeff;\n        \n        // simulation for test\n        //float freq = ( remapFreq(f + k * r)*fftWidth - 0.5 ) / 0.008;//(iMouse.x/iResolution.x);\n\t\t//val += exp(  - freq*freq/2.0 ) * coeff;\n        \n        sum += coeff;\n    }\n    \n    return remapIntensity(f,val/sum);\n    \n}\n\nfloat lum(float k){\n    //return k;\n    return sqrt(k+0.1);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float minCoord = min(iResolution.x,iResolution.y);\n\tfloat freq = uv.x;\n    float i1,i2,i3;\n\n    i1 = fft(freq,fftRadius);\n    i2 = fft(freq,fftRadius*fftRadiusCoeff);\n    i3 = fft(freq,fftRadius*fftRadiusCoeff*fftRadiusCoeff);\n\t\n\tfloat j1 = float(i1 > uv.y)+background;\n\tfloat j2 = float(i2 > uv.y)+background;\n\tfloat j3 = float(i3 > uv.y)+background;\n        \n\tfragColor = vec4( lum(i1*background2)*j1 , lum(i2*background2)*j2 , lum(i3*background2)*j3 ,1.0);\n    \n    float radius = 0.25*minCoord;\n    float bass = fft(0.05,0.1);\n    float hat = fft(0.6,0.4);\n    float kick = abs(fft(0.25,0.3));\n    float dist = min(\n    \tabs(length(iResolution.xy*vec2(1.0/5.0,0.3) - fragCoord) - bass*radius),min(\n        abs(length(iResolution.xy*vec2(1.0/2.0,0.3) - fragCoord) - kick*radius),\n        abs(length(iResolution.xy*vec2(4.0/5.0,0.3) - fragCoord) - hat*radius)\n    ))/12.0;\n    \n    if( dist < 1.0 ){\n        fragColor.rgb = mix(vec3(1.0,0.4,0.00),fragColor.rgb,dist*dist);\n    }\n    \n    \n}\n","name":"Image","description":"","type":"image"}]}