{"ver":"0.1","info":{"id":"XXlXz7","date":"1709281296","viewed":42,"name":"It's About Time (And Time Again)","username":"PG_TG","description":"Description","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["tag"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*----------------------------------\n  IT'S ABOUT TIME (AND TIME AGAIN)\n----------------------------------*/\n\n#define PI 3.1415926535897932384626433832795\n\n// COLOURS\n#define col1 vec3(232., 214., 192.)/255.\n#define col2 vec3(146., 147., 141.)/255.\n#define col3 vec3(0., 0., 0.)/255.\n#define col4 vec3(161., 40., 28.)/255.\n\n// SCALE FUNCTION\nmat2 scale(vec2 _scale) {\n    return mat2(_scale.x, 0.0, 0.0, _scale.y);\n}\n\n// ROTATION FUNCTION\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle), -sin(_angle),\n                sin(_angle), cos(_angle));\n}\n\n// CIRCLE FUNCTION\nvec4 circle(vec2 uv, vec2 pos, float rad, vec3 col, float smt) {\n    float value = distance(pos, uv);\n\n    if (smt > 1.0) // Smooth edges mode\n        value = smoothstep(value, value + smt, rad);\n    else     // Hard edges mode\n        value = step(value, rad);\n    \n    return vec4(col, value);\n}\n\n// RING FUNCTION\nvec4 ring(vec2 uv, vec2 pos, float rad, vec3 col, float thic) {\n    float value = distance(pos, uv);\n    value = step(value, rad) - step(value + thic, rad);\n    return vec4(col, value);\n}\n\n\n// RECTANGLE FUNCTION\nvec4 rectangle(vec2 uv, vec2 orig, vec2 size, vec3 col) { \n    return vec4(col, !(uv.x < orig.x || uv.y < orig.y || uv.x > (orig.x + size.x) || uv.y > (orig.y + size.y)));\n}\n\n// LINE FUNCTION\nvec4 line(vec2 uv, vec2 A, vec2 B, vec3 col, float thic, float blur) {\n    \n    vec2 g = B - A;\n    vec2 h = uv - A;\n    float d;\n    \n    d = length(h - g * clamp(dot(g, h) / dot(g, g), 0.0, 1.0));\n    if(blur != 0.)\n        if((blur * thic) >= thic)\n            d = smoothstep(blur * thic, thic, d);\n        else\n            d = smoothstep(thic, blur * thic * length(0.05), d);\n    else\n        d = step(thic, d);\n    \n    return vec4(col, d);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Aspect Ratio Fix\n    uv = uv * 2. - 1.;\n    uv.x *= iResolution.x/iResolution.y;\n\n    // Background\n    vec4 background = vec4(col1, 1.);\n    \n    // Clock Face\n    vec4 foreground = ring(\n        uv,\n        vec2(0.),\n        0.9,\n        col2,\n        0.05\n    );\n    background = mix(background, foreground, foreground.a);\n    foreground = ring(\n        uv,\n        vec2(0.),\n        0.95,\n        col2,\n        0.025\n    );\n    background = mix(background, foreground, foreground.a);\n    foreground = ring(\n        uv,\n        vec2(0.),\n        0.825,\n        col2,\n        0.025\n    );\n    background = mix(background, foreground, foreground.a);\n    foreground = ring(\n        uv,\n        vec2(0.),\n        0.1,\n        col3,\n        0.05\n    );\n    background = mix(background, foreground, foreground.a);\n    foreground = ring(\n        uv,\n        vec2(0.),\n        0.1,\n        col2,\n        0.025\n    );\n    vec2 uv2 = uv;\n    for(int i = 1; i <= 12; i++) {\n        uv2 *= rotate2d(PI/6.);\n        background = mix(background, foreground, foreground.a);\n        foreground = line(\n            uv2,\n            vec2(0.0, 0.8),\n            vec2(0.0, 0.95),\n            col1,\n            0.05,\n            1.01\n        );\n        background = mix(background, foreground, foreground.a);\n        foreground = line(\n            uv2,\n            vec2(0.0, 0.8),\n            vec2(0.0, 0.95),\n            col2,\n            0.025,\n            1.01\n        );\n        // Third Ticks\n        if (mod(float(i), 2.) == 0.) {\n            background = mix(background, foreground, foreground.a);\n            foreground = line(\n                uv2,\n                vec2(0.0, 0.75),\n                vec2(0.0, 0.95),\n                col3,\n                0.025,\n                1.01\n            );\n        }\n        // 12 Tick\n        if (mod(float(i), 12.) == 0.) {\n            background = mix(background, foreground, foreground.a);\n            foreground = line(\n                uv2,\n                vec2(0.0, 0.75),\n                vec2(0.0, 0.95),\n                col4,\n                0.025,\n                1.01\n            );\n        }\n    }\n    \n    // Clock Hands\n    vec2 uv3 = uv;\n    uv3 *= rotate2d((iTime * PI * 2.)/(60. * 60. * 24.));\n    background = mix(background, foreground, foreground.a);\n    foreground = line(\n        uv3,\n        vec2(0.0, 0.0),\n        vec2(0.0, 0.5),\n        col3,\n        0.025,\n        1.01\n    );\n    vec2 uv4 = uv;\n    uv4 *= rotate2d((iTime * PI * 2.)/(60. * 60.));\n    background = mix(background, foreground, foreground.a);\n    foreground = line(\n        uv4,\n        vec2(0.0, 0.0),\n        vec2(0.0, 0.8),\n        col3,\n        0.015,\n        1.01\n    );\n    vec2 uv5 = uv;\n    uv5 *= rotate2d((iTime * PI * 2.)/60.);\n    background = mix(background, foreground, foreground.a);\n    foreground = line(\n        uv5,\n        vec2(0.0, 0.0),\n        vec2(0.0, 0.95),\n        col4,\n        0.01,\n        1.01\n    );\n    \n    // Clock Hand Cap\n    background = mix(background, foreground, foreground.a);\n    foreground = ring(\n        uv,\n        vec2(0.),\n        0.05,\n        col2,\n        0.1\n    );\n    background = mix(background, foreground, foreground.a);\n    foreground = ring(\n        uv,\n        vec2(0.),\n        0.025,\n        col3,\n        0.1\n    );\n\n    // Output to screen\n    fragColor = mix(background, foreground, foreground.a);\n}","name":"Image","description":"","type":"image"}]}