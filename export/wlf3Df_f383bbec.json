{"ver":"0.1","info":{"id":"wlf3Df","date":"1580253161","viewed":117,"name":"Mouse displace","username":"ma77os","description":"displace","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["displace"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat random(vec3 scale,float seed){\n    return fract(sin(dot(gl_FragCoord.xyz+seed,scale))*43758.5453+seed);\n}\n\nvec4 boxBlur(sampler2D tex, vec2 uv, vec2 delta){\n    // https://github.com/spite/Wagner/blob/master/fragment-shaders/box-blur-fs.glsl\n    vec4 color=vec4(0.0);\n    float total=0.0;\n    float offset=random(vec3(12.9898,78.233,151.7182),0.0);\n\n    for(float t=-3.0;t<=3.0;t++){       \n        float percent=(t+offset-0.5)/3.0; \n        float weight=1.0-abs(percent); \n        vec4 bsample=texture(tex,uv+delta*percent); \n        bsample.rgb*=bsample.a; \n        color+=bsample*weight; \n        total+=weight;\n    }   \n\n    color=color/total;\n    color.rgb/=color.a+0.00001; \n    return color;  \n}\n\nvec3 random3(vec3 c) {\n    float j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n    vec3 r;\n    r.z = fract(512.0*j);\n    j *= .125;\n    r.x = fract(512.0*j);\n    j *= .125;\n    r.y = fract(512.0*j);\n    return r-0.5;\n}\n\nconst float F3 =  0.3333333;\nconst float G3 =  0.1666667;\nfloat noise(vec3 p) {\n\n    vec3 s = floor(p + dot(p, vec3(F3)));\n    vec3 x = p - s + dot(s, vec3(G3));\n\n    vec3 e = step(vec3(0.0), x - x.yzx);\n    vec3 i1 = e*(1.0 - e.zxy);\n    vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\n    vec3 x1 = x - i1 + G3;\n    vec3 x2 = x - i2 + 2.0*G3;\n    vec3 x3 = x - 1.0 + 3.0*G3;\n\n    vec4 w, d;\n\n    w.x = dot(x, x);\n    w.y = dot(x1, x1);\n    w.z = dot(x2, x2);\n    w.w = dot(x3, x3);\n\n    w = max(0.6 - w, 0.0);\n\n    d.x = dot(random3(s), x);\n    d.y = dot(random3(s + i1), x1);\n    d.z = dot(random3(s + i2), x2);\n    d.w = dot(random3(s + 1.0), x3);\n\n    w *= w;\n    w *= w;\n    d *= w;\n\n    return dot(d, vec4(52.0));\n}\n\nfloat fbm(vec3 p) \n{\n\tfloat v = 0.0;\n\tv += noise(p*1.)*.5;\n\tv += noise(p*2.)*.25;\n\tv += noise(p*4.)*.125;\n\t//v += noise(p*8.)*.0625;\n\t//v += noise(p*16.)*.03125;\n\t//v += noise(p*32.)*.015625;\n\treturn v;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n\t//vec2 uv = (fragCoord - iResolution.xy*.5)/iResolution.y;\n\t\n    float x = iMouse.x/iResolution.x;\n    float y = iMouse.y/iResolution.y;\n    vec2 attractor = vec2(x, y);\n    float i = x;\n    \n\t\n\t// noise1\n    float n1 = fbm(vec3(uv * 6.0, iTime * 0.2));\n    \n\tn1 *= 0.5;\n    //n1 = pow(burn, i*10.0);\n    //n1 = clamp(n1, 0.0, 1.0);\n    \n    float dist = length(attractor - uv);\n    float distExp = 1.0 + exp(dist * -10.0) * 60.0;\n    \n    float displace = n1 * 0.05 * distExp;\n    uv += displace;\n    \n    //float n2 = fbm(vec3(uv * 1.0, iTime * 0.1));\n    \n    //vec4 blur = boxBlur(iChannel0, uv, vec2(0.0, 0.05));\n    vec2 blurDelta = vec2(n1 * 0.2, n1 * 0.1) * 0.2;\n    \n    // RGB SHIFT\n    float angle = 0.0;\n    float amount = 0.03;\n    \n    vec2 offset = vec2( 1.0, 0.0) * n1 * amount;\n    vec4 cr = texture(iChannel0, uv + offset);\n    vec4 cga = boxBlur(iChannel0, uv, blurDelta);\n    vec4 cb = texture(iChannel0, uv - offset);\n    \n    vec4 col = vec4(cr.r, cga.g, cb.b, cga.a);\n\n    fragColor = vec4(col.rgb, 1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}