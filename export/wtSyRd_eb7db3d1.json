{"ver":"0.1","info":{"id":"wtSyRd","date":"1595076324","viewed":1566,"name":"Ray-Box Intersection","username":"pprovins","description":"An axis-aligned bounding box (AABB) is intersected by a ray, the surface normal is then calculated from the intersection and used to reflect a background. Background is taken from Sphere shader created by kig.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["reflection","ray","intersection","box"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 box(vec3 ray_origin, vec3 ray_dir, vec3 minpos, vec3 maxpos) {\n  vec3 inverse_dir = 1.0 / ray_dir;\n  vec3 tbot = inverse_dir * (minpos - ray_origin);\n  vec3 ttop = inverse_dir * (maxpos - ray_origin);\n  vec3 tmin = min(ttop, tbot);\n  vec3 tmax = max(ttop, tbot);\n  vec2 traverse = max(tmin.xx, tmin.yz);\n  float traverselow = max(traverse.x, traverse.y);\n  traverse = min(tmax.xx, tmax.yz);\n  float traversehi = min(traverse.x, traverse.y);\n  return vec3(float(traversehi > max(traverselow, 0.0)), traversehi, traverselow);\n}\n\nvec3 background(float t, vec3 rd) {\n  vec3 light = normalize(vec3(sin(t), 0.6, cos(t)));\n  float sun = max(0.0, dot(rd, light));\n  float sky = max(0.0, dot(rd, vec3(0.0, 1.0, 0.0)));\n  float ground = max(0.0, -dot(rd, vec3(0.0, 1.0, 0.0)));\n  return (pow(sun, 256.0) + 0.2 * pow(sun, 2.0)) * vec3(2.0, 1.6, 1.0) +\n         pow(ground, 0.5) * vec3(0.7, 0.6, 0.5) +\n         pow(sky, 1.0) * vec3(0.3, 0.5, 0.8);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 uv = (-1.0 + 2.0 * fragCoord.xy / iResolution.xy) *\n            vec2(iResolution.x / iResolution.y, 1.0);\n  vec3 ray_origin = vec3(0.0, 0.0, -3.0);\n  vec3 ray_direction = normalize(vec3(uv, 1.0));\n  vec3 boxllc = vec3(1.2);\n  vec3 boxurc = vec3(3.0);\n  vec3 boxctr = (boxllc + boxurc) / 2.0;\n  vec3 box = box(ray_origin, ray_direction, boxllc, boxurc);\n  float is_box_hit = box.x;\n  float box_t_max = box.y;\n  float box_t_min = box.z;\n  vec3 box_hit = boxctr - (ray_origin + (box_t_min * ray_direction));\n  vec3 box_intersect_normal = box_hit / max(max(abs(box_hit.x), abs(box_hit.y)), abs(box_hit.z));\n  box_intersect_normal = clamp(box_intersect_normal, vec3(0.0,0.0,0.0), vec3(1.0,1.0,1.0));\n  box_intersect_normal = normalize(floor(box_intersect_normal * 1.0000001));\n  vec3 box_reflect = reflect(ray_direction, box_intersect_normal);\n  vec3 bg_col = background(iTime, ray_direction);\n  vec3 col = background(iTime, box_reflect) * vec3(0.9, 0.8, 1.0);\n  fragColor = vec4(mix(bg_col, col, is_box_hit), 1.0);\n}","name":"Image","description":"","type":"image"}]}