{"ver":"0.1","info":{"id":"DsjSz3","date":"1670633584","viewed":98,"name":"Snowflake Fractal","username":"MrZeus","description":"Playing with KIFS fractals, while following ArtOfCode tutorial:\nhttps://www.youtube.com/watch?v=il_Qg9AqQkE","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["fractal","recursion","snowflake"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  float tau = 6.28318;\n  float iterations = mod(iTime / 2. , 7.);\n  \n  float scale = 1.7;\n\n  // Normalized pixel coordinates (from -1 to 1)\n  vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n  uv.y += 0.4;\n  uv *= scale;\n  \n  float angle = 2.5 * tau / 6.;\n  vec2 normal = vec2(cos(angle), sin(angle)); //for 0 rads, gives (1, 0)\n  \n  uv.x = abs(uv.x)-.5;\n  uv -= 2. * max(0., dot(uv, normal)) * normal;\n  \n  for (int i=0; i<int(iterations); i++){\n    uv *= 3.;\n    scale *= 3.;\n    uv.x -= 1.5;\n  \n    uv.x = abs(uv.x)-.5;\n    uv -= 2. * max(0., dot(uv, normal)) * normal;\n  }\n  \n  //draw a horizontal line at y=0, from x = -width to +width\n  float width = 1.;\n  float d = length(uv - vec2(clamp(uv.x, -width, width), 0));\n   \n  vec3 colour = vec3(0);\n  colour += smoothstep(1./iResolution.y, .0, abs(d/scale));\n  \n  // Output to screen\n  fragColor = vec4(colour,1.0);\n}","name":"Image","description":"","type":"image"}]}