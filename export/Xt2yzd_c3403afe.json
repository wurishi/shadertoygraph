{"ver":"0.1","info":{"id":"Xt2yzd","date":"1509824689","viewed":820,"name":"Streaming Spectrogram v.2 - old","username":"ttg","description":"Now sound is rendered in another buffer which is sampled by the spectrogram, thus eliminating redundant mainSound calculations.\nRevision of [url]https://www.shadertoy.com/view/lsSfDD[/url]","likes":9,"published":3,"flags":40,"usePreview":0,"tags":["sound","spectrogram"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Passthrough to Buf A\n\nvoid mainImage( out vec4 f, in vec2 d ) { f = texelFetch(iChannel0, ivec2(d), 0); }\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/*\nSound Experiment\nCopyright 2017 Theron Tarigo\n*/\n\nconst float pi = 3.141592653589793;\n\nfloat wave(float t) { return sin(2.*pi*fract(t)); }\n\nfloat synth(float freq, float freq2, float time) {\n\n    float freq3 = freq2 + 0.25;\n\n    float v = 0.;\n\n    for (float n=1.; n<5.; n+=1.00+0.002) {\n        v += 0.2/pow(n,1.2)*wave(n*freq*time+1.*wave(n*freq2*time));\n        v += 0.2/pow(n,1.2)*wave(n*freq*time+1.*wave(n*freq3*time));\n    }\n    return v;\n}\n\nvec2 mainSound( in int samp, float time )\n{\n\n    float c = 261.63;\n    \n    vec2 v = vec2(0.);\n    \n    v.x += synth(c*2., c*2./8., time);\n    v.y += synth(c*2., c*2./8., time+1.2);\n\n    v *= max(1.-exp(-time+0.5),0.);\n\n    return vec2(v);\n}\n\n/*******************************/\n\n/*\nStreaming Spectrogram v.2\nCopyright 2017 Theron Tarigo\n*/\n\nfloat windowmax = 0.5;\n\nvec4 encode(int i) { return vec4((uvec4(i)>>ivec4(0,8,16,24))&0xFFu)/255.; }\nint decode(vec4 f) { uvec4 d = uvec4(f*255.)<<ivec4(0,8,16,24); return int(d.x|d.y|d.z|d.w); }\n\nvoid mainImage( out vec4 f, in vec2 pixf )\n{\n    f = vec4(0.);\n    ivec2 pix = ivec2(pixf);\n    ivec2 res = ivec2(iChannelResolution[0].xy);\n    int center = res.x*res.y/2;\n    int offset = int(iTime*iSampleRate) - center;\n    int index = res.x*pix.y+pix.x;\n    if (index==0) { f = encode(offset); return; }\n    int offsetlast = decode(texelFetch(iChannel0, ivec2(0), 0));\n    int cutoff = int(windowmax*iSampleRate);\n    if (abs(index-center) > cutoff) return;\n    int samp = index+offset;\n    int samplast = center+cutoff+offsetlast;\n    float time = (float(samp)-0.5)/iSampleRate;\n    \n    //#define TESTING\n    #ifdef TESTING\n    /* TESTING: ensure reuse of previously computed samples is valid.  No blue pixels should appear! */\n    vec2 newsamp = mainSound(0,time);\n    vec2 oldsamp = texelFetch(iChannel0, (ivec2(index+offset-offsetlast)/ivec2(1,res.x))%(res), 0).xy;\n    f.xy = newsamp;\n    if (bool(newsamp != oldsamp) == bool(samp <= offsetlast + center + cutoff)) f.z = 1.;\n    #else\n    if (samp <= offsetlast + center + cutoff) {\n        f.xy = texelFetch(iChannel0, (ivec2(index+offset-offsetlast)/ivec2(1,res.x))%(res), 0).xy;\n    } else {\n        f.xy = mainSound(0,time);\n    }\n    #endif\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"/*\nSound Experiment\nCopyright 2017 Theron Tarigo\n*/\n\nconst float pi = 3.141592653589793;\n\nfloat wave(float t) { return sin(2.*pi*fract(t)); }\n\nfloat synth(float freq, float freq2, float time) {\n\n    float freq3 = freq2 + 0.25;\n\n    float v = 0.;\n\n    for (float n=1.; n<5.; n+=1.00+0.002) {\n        v += 0.2/pow(n,1.2)*wave(n*freq*time+1.*wave(n*freq2*time));\n        v += 0.2/pow(n,1.2)*wave(n*freq*time+1.*wave(n*freq3*time));\n    }\n    return v;\n}\n\nvec2 mainSound( in int samp, float time )\n{\n\n    float c = 261.63;\n    \n    vec2 v = vec2(0.);\n    \n    v.x += synth(c*2., c*2./8., time);\n    v.y += synth(c*2., c*2./8., time+1.2);\n\n    v *= max(1.-exp(-time+0.5),0.);\n\n    return vec2(v);\n}\n","name":"Sound","description":"","type":"sound"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// Config\n\nconst float freqscale = 4000.;\nconst float aspect = 1.;\nconst float undersample = 6.;\n\n\n\n\n/*\nStreaming Spectrogram v.2\nCopyright 2017 Theron Tarigo\n*/\n\nconst float pi = 3.141592653589793;\n\nvec2 mainSound( in int samp2, float time )\n{\n    ivec2 res = ivec2(iResolution.xy);\n    int offset = int(iTime*iSampleRate) - res.x*res.y/2;\n    //time += 4.;\n    int samp = int(time*iSampleRate) - offset;\n    ivec2 pix = ivec2(samp%res.x, (samp/res.x));\n    return texelFetch(iChannel1, pix, 0).xy;\n}\n\nvec2 spectrogram(float windowmax, float time, float freq) {\n    vec2 sum = vec2(0.);\n    float window = windowmax;\n    float samplerate = iSampleRate/undersample;\n    for (float trel = -window; trel <= window; trel+=1./samplerate) {\n        // Cosine window\n        float w = (0.5+0.5*cos(trel/window*pi))/samplerate/window;\n        float samp = dot(vec2(1.),mainSound(0,time+trel));\n        sum += w*vec2(cos(trel*freq*2.*pi),sin(trel*freq*2.*pi))*samp;\n    }\n    return sum;\n}\n\nvoid panImage( out vec4 f, float time, float y ) {\n    float freq = freqscale * y / iResolution.y;\n    f.rgb = 5.*vec3(10.,3.2,1.)*\n    length(spectrogram(0.1*sqrt(freq/freqscale)/aspect, time, freq));\n}\n\nconst float timescale = 1./4.; // Screens per second\n\n//#define FRAMEDEBUGVIS\nvoid mainImage( out vec4 f, in vec2 df )\n{\n    ivec2 d = ivec2(df);\n    vec2 fsf = iResolution.xy;\n    ivec2 fs = ivec2(fsf);\n    int shift = int(fsf.x*timescale*(iTime));\n    int shiftlast = int(fsf.x*timescale*(iTime-iTimeDelta));\n    int delta = shift - shiftlast;\n    if ((fs.x-d.x) <= delta) {\n        #ifdef FRAMEDEBUGVIS\n        if (d.y<10) { f = vec4(0,iFrame%2,0,0); return; }\n        #endif\n        float time = float(shift-fs.x+d.x)/timescale/fsf.x;\n        panImage(f, time, df.y);\n    } else {\n        f = texelFetch(iChannel0,d+ivec2(delta,0),0);\n    }\n}\n","name":"Buffer B","description":"","type":"buffer"}]}