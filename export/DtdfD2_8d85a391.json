{"ver":"0.1","info":{"id":"DtdfD2","date":"1701621909","viewed":144,"name":"pixel universe","username":"nayk","description":"stars, universe, pixel, new","likes":6,"published":1,"flags":1,"usePreview":0,"tags":["pixel","stars","new","universe"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*original https://www.shadertoy.com/view/lslyRn */\n\n#define iterations 17\n#define formuparam 0.53\n\n#define volsteps 20\n#define stepsize 0.1\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.000 \n\n#define brightness 0.0015\n#define darkmatter 0.300\n#define distfading 0.730\n#define saturation 0.850\nfloat beautiful_star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\nfloat fbm(vec2 uv) {\n    float f = 0.5;\n    \n    float amp = 0.5;\n    float freq = 2.0;\n    for (int i = 0; i < 10; i++) {\n        f += amp  * 0.55;\n        \n        uv *= freq;\n        uv += 10.0;\n        \n        freq *= 1.0;\n        amp *= 0.5;\n    }\n    \n    return f;\n}\n\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 ro, in vec3 rd )\n{\n\t//get coords and direction\n\tvec3 dir=rd;\n\tvec3 from=ro;\n\t\n\t//volumetric rendering\n\tfloat s=0.1,fade=1.;\n\tvec3 v=vec3(0.);\n\tfor (int r=0; r<volsteps; r++) {\n\t\tvec3 p=from+s*dir*.5;\n\t\tp = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\n\t\tfloat pa,a=pa=0.;\n\t\tfor (int i=0; i<iterations; i++) { \n\t\t\tp=abs(p)/dot(p,p)-formuparam;\n            p.xy*=mat2(cos(iTime*0.01),sin(iTime*0.01),-sin(iTime*0.01),cos(iTime*0.01));// the magic formula\n\t\t\ta+=abs(length(p)-pa); // absolute sum of average change\n\t\t\tpa=length(p);\n\t\t}\n\t\t\n\t\ta*=a*a; // add contrast\n\t\tif (r>6) fade*=1.1; // dark matter, don't render near\n\t\t//v+=vec3(dm,dm*.5,0.);\n\t\tv+=fade;\n\t\tv+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\n\t\tfade*=distfading; // distance fading\n\t\ts+=stepsize;\n\t}\n\tv=mix(vec3(length(v)),v,saturation); //color adjust\n\tfragColor = vec4(v*.02,1.);\t\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t//get coords and direction\n\tvec2 uv=fragCoord.xy/iResolution.xy-.5;\n\tuv.y*=iResolution.y/iResolution.x;\n\tvec3 dir=vec3(uv*zoom,iTime*0.01);\n\tfloat time=iTime*speed+.25;\n float anim = sin(iTime * 12.0) * 0.1 + 1.0; \n\tfloat x0 = fbm(dir.xy * 0.1 + iTime * 0.007);\n    float y0 = fbm(dir.xy * 0.1523 + iTime * 0.007);\n    \n    \n    vec3 col = vec3(0.0);\n    \n    float amp = 0.5;\n    float freq = 0.1;\n    \n    vec2 off = vec2(x0, y0);\n    \n    float ff = 0.0;\n    \n    for (int i = 0; i < 8; i++) {\n        float f = fbm(uv * freq + off * 0.03 + ff * 0.02 + iTime * 0.0004 * (8.0 - float(i)));\n        \n        f = pow(f + 0.25, float(i) * 6.2 + 5.5);\n        ff += f;\n        \n        float r = sin(x0 * 18.0);\n        float g = sin(y0 * 13.0 + 1.7);\n        float b = sin(f * 11.0 + 1.1);\n        \n        col += amp * f * mix(vec3(0.3, 0.5, 0.9), vec3(r, g, b), pow(float(i) / 8.0, f));\n                \n        amp *= 0.9;\n        freq *= 2.7;\n    }\n\tvec3 from=vec3(1.,.5,0.5)+col;\n\tfrom+=vec3(time*2.,time,-2.);\n\t\n\tmainVR(fragColor, fragCoord, from, dir);\n    fragColor*= vec4(beautiful_star(uv,anim) * vec3(0.55,0.5,0.55)*0.2, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}