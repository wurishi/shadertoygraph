{"ver":"0.1","info":{"id":"ctlBW2","date":"1694876133","viewed":109,"name":"Carbon/fiber pattern","username":"katila4","description":"Learn a carbon pattern","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["learn","fiber","carbon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec3 EMPTY_COLOR = vec3(0.);\nconst vec3 FILL_COLOR = vec3(1.);\nconst vec3 FINAL_COLOR_2 = vec3(0.5, 0.1, 0.1);\nconst vec3 FINAL_COLOR = vec3(1.0, 0.3, 0.3);\n\nvoid GetCarbon(in vec2 uv, out float mult, out vec2 c2, in float scale)\n{\n    vec2 c = fract(uv * 2. * scale);\n    \n    c2 = fract(uv * 4. * scale);\n    \n    mult = step(c.x, 0.5) * step(c.y, 0.5) + step(0.5, c.x) * step(0.5, c.y);\n\n    mult = mix(mult, 1. - mult, step(c2.x, 0.5) * step(c2.y, 0.5));\n}\n\nfloat GetHeight(in vec2 uv, in float scale)\n{\n    vec2 c2;\n    float mult;\n    \n    GetCarbon(uv, mult, c2, scale);\n    \n    float m1 = mix(c2.y, c2.x, mult);\n    float m2 = mix(c2.x, c2.y, mult);\n\n    float v = abs(2. * m2 - 1.);\n\n    float offset = step(m1, 0.5);\n    float vv = mix(1. - v, v, offset);\n    vv = pow(1. - vv, 3.5);\n    mult = 1. - vv;\n    \n    float v2 = abs(2. * fract(m1 * 2.0) - 1.);\n    float offset2 = step(m2, 0.0);\n    float vv2 = mix(1. - v2, v2, offset2);\n    vv2 = pow(1. - vv2, 20.);\n    mult = mult * (1. - vv2);\n    \n    return mult;\n}\n\nvec3 GetNormal(in vec2 uv, in float delta, in float scale)\n{\n\tvec3 derivative = vec3(0., 0., 0.05);\n    \n\tderivative.x = GetHeight(uv + vec2(delta, 0.), scale) - GetHeight(uv - vec2(delta, 0.), scale);\n\tderivative.y = GetHeight(uv + vec2(0., delta), scale) - GetHeight(uv - vec2(0., delta), scale);\n\t\n    vec3 n = normalize(derivative);\n\treturn n;\n}\n\nvec3 GetLight(in vec3 pos, in vec3 normal, in vec3 lightPos, in float aspect, in vec3 col)\n{\n    vec3 viewPos = vec3(lightPos.xy, 1.);\n    \n    float iTime2 = iTime * 1.5;\n    lightPos += 0.25 * vec3(aspect * sin(iTime2), cos(iTime2), 0.);\n    float lightRadius = 1.2;\n    vec3 lightColor = vec3(1.);\n    float lightEnergy = 12.0;\n    \n    vec3 viewDir = normalize(viewPos - pos);\n\tvec3 diff = lightPos - pos;\n\tvec3 lightDir = normalize(diff);\n\tfloat dist = length(diff);\n    \n    float diffuse = max(dot(normal, lightDir), 0.0);\n\tfloat shiness = 14.0;\n\tfloat specular = pow(max(dot(viewDir, reflect(-lightDir, normal)), 0.0), shiness);\n\tfloat attenuation = min(1.0, lightEnergy * max(1.0 - dist / lightRadius, 0.0) * (1.0 / (1.0 + dist + dist * dist)));\n    \n    float materialDiffuse = 0.8;\n\tfloat materialSpecular = 0.6;\n\t\n\tvec3 outC = col * 0.2 + vec3(lightColor * (materialSpecular * specular + col * materialDiffuse * diffuse) * attenuation);\n    return outC;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    float aspect = iResolution.x / iResolution.y;\n    float divSize = aspect / 4.;\n    \n    vec3 lightPos = vec3(divSize * 3.5, 0.5, 0.5);\n    \n    vec2 uv = fragCoord / iResolution.yy;\n\n    float scaleMult = step(uv.y, divSize * 0.5);\n    float scale = mix(45. * divSize, 1.0 / divSize, scaleMult);\n\n    vec2 c2;\n    float mult;\n    \n    GetCarbon(uv, mult, c2, scale);\n\n    float height = 1.0 - GetHeight(uv, scale);\n    vec3 normal = GetNormal(uv, 0.00025, scale);\n\n    vec3 col = EMPTY_COLOR;\n\n    if (uv.x < divSize)\n    {\n    }\n    else if (uv.x < divSize * 2.)\n    {\n        mult = 1.0 - height;        \n    }\n    else if (uv.x < divSize * 3.)\n    {\n        mult = 0.;\n        col = (normal + vec3(1.)) * 0.5;\n    }\n    else\n    {   \n        vec3 mCol = mix(FINAL_COLOR, FINAL_COLOR_2, mult);\n        \n        mult = 0.;\n        \n        col = GetLight(vec3(uv, -height * 0.7), normal, lightPos, aspect, mCol);\n    }\n\n    col = mix(col, FILL_COLOR, mult);\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}