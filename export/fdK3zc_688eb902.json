{"ver":"0.1","info":{"id":"fdK3zc","date":"1631912107","viewed":325,"name":"2D Screen-Space Shadows","username":"DrDesten","description":"Drag the mouse to set the light postion.\n\nAll options are in 'Common'.\n'STEPS' controls the amount steps for shadows\nuncomment 'USE_TEXTURE' to use a texture for blocking light (instead of circles)\nuncomment 'NO_COLOR' to disable the colorful background","likes":20,"published":1,"flags":32,"usePreview":0,"tags":["2d","shadows","lightshafts"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 gaussian3x3(sampler2D tex, vec2 coord) {\n    vec2 texSize = vec2(textureSize(tex, 0));\n    vec2 pixel   = 1. / texSize;\n    \n    vec4 color   = vec4(0);\n    for (float x = -0.5; x < 0.6; x += 1.) {\n        for (float y = -0.5; y < 0.6; y += 1.) {\n            color    += texture(tex, (vec2(x,y) * pixel) + coord);\n        }\n    }\n    \n    return color * 0.25;\n}\nfloat gaussian3x3_r(sampler2D tex, vec2 coord) {\n    vec2 texSize = vec2(textureSize(tex, 0));\n    vec2 pixel   = 1. / texSize;\n    \n    float val = 0.;\n    for (float x = -0.5; x < 0.6; x += 1.) {\n        for (float y = -0.5; y < 0.6; y += 1.) {\n            val += texture(tex, (vec2(x,y) * pixel) + coord).r;\n        }\n    }\n    \n    return val * .25;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 coord = fragCoord/iResolution.xy;\n\n    // Get the shadowMask\n    float shadowMask  = texture(iChannel0, coord).r;\n    \n    // Give the circles some color\n    vec3  circleColor = 0.5 + 0.5 * cos(iTime + (coord.xyx * 3. + shadowMask) + vec3(0,2,4));\n    #ifdef NO_COLOR\n    circleColor = vec3(1);\n    #endif\n    circleColor *= shadowMask * 1. + 0.3;\n    \n    vec2 lightPos = iMouse.xy / iResolution.xy;\n    /*if (iMouse.z < 0.5) {\n        lightPos      = vec2(sin(iTime), cos(iTime)) * .25 + .5;\n    }*/\n    \n    float light = texture(iChannel1, coord).r;\n    if (iMouse.z < 0.5) {\n        light = gaussian3x3_r(iChannel1, coord);\n    }\n\n    \n    \n    circleColor *= light * .75 + .25;\n    // Draw halow around light\n    circleColor  += circleColor * 5. * light * exp2(-sqmag((lightPos - coord) *  vec2(1, iResolution.y / iResolution.x)) * 20.);\n    \n    circleColor = reinhard_sqrt_tonemap(circleColor, 0.5);\n    \n    //circleColor = vec3(light);\n    // Output to screen\n    fragColor = vec4(circleColor,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 correctedCoord    = fragCoord / iResolution.xy - 0.5;\n         correctedCoord.y *= iResolution.y / iResolution.x;\n         \n    vec2 pixel = 1. / iResolution.xy;\n         \n    float circles = 0.;\n    circles += circle(vec2(0,0.04), correctedCoord, 0.059, pixel);\n    circles += circle(vec2(.1, -.2), correctedCoord, 0.03, pixel);\n    circles += circle(vec2(.2, .24), correctedCoord, 0.02, pixel);\n    circles += circle(vec2(-.34, .05), correctedCoord, 0.04, pixel);\n    circles += circle(vec2(-.34, -.15), correctedCoord, 0.025, pixel);\n   \n    circles = clamp(circles, 0., 1.);\n    \n    #ifdef USE_TEXTURE\n    circles = sum(texture(iChannel0, fragCoord / iResolution.xy).rgb);\n    circles = clamp(circles * 3. - 1.5, 0.,1.);\n    #endif\n\n    fragColor = vec4(vec3(circles),1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"//#define NO_COLOR\n//#define USE_TEXTURE\n\n#define STEPS 48\n\nfloat sqmag(vec2 v) {\n    return dot(v, v);\n}\nfloat circle(vec2 pos, vec2 uv, float rad) {\n    return step(sqmag(pos - uv), rad * rad);\n}\nfloat circle(vec2 p, vec2 c, float r, vec2 px) {\n    return clamp(( r - length(p - c) ) / length(px), 0., 1.);\n}\n\nvec3 reinhard_sqrt_tonemap(vec3 color, float a) {\n    return color / sqrt(color * color + a);\n}\n\nfloat Bayer2(vec2 a) {\n    a = floor(a);\n    return fract(a.x * .5 + a.y * a.y * .75);\n}\n#define Bayer4(a)   (Bayer2 (0.5 * (a)) * 0.25 + Bayer2(a))\n#define Bayer8(a)   (Bayer4 (0.5 * (a)) * 0.25 + Bayer2(a))\n#define Bayer16(a)  (Bayer8 (0.5 * (a)) * 0.25 + Bayer2(a))\n#define Bayer32(a)  (Bayer16(0.5 * (a)) * 0.25 + Bayer2(a))\n#define Bayer64(a)  (Bayer32(0.5 * (a)) * 0.25 + Bayer2(a))\n\n\nfloat sum(vec3 v) {\n    return v.x + v.y + v.z;\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"float shadowTrace(sampler2D mask, vec2 coord, vec2 lightPos, float dither) {\n    vec2 traceDir   = (lightPos - coord);\n    //if (sqmag(traceDir) > 2.) { traceDir = normalize(traceDir) * 1.42; }\n    \n    vec2  shadowStep = traceDir / float(STEPS);\n    float stepSize   = length(traceDir);\n    float light      = 1.;\n    for (int i = 0; i < STEPS; i++) {\n        vec2 pos = coord + (shadowStep * ( float(i) + ( dither ) ));\n        light   -= texture(mask, pos).r / float(STEPS) * 5.;\n        \n        if (light <= 0.) {break;}\n    }\n    light = clamp(light, 0., 1.);\n    return light;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 coord    = fragCoord/iResolution.xy;    \n    vec2 lightPos = iMouse.xy / iResolution.xy;\n    /*if (iMouse.z < 0.5) {\n        lightPos      = vec2(sin(iTime), cos(iTime)) * .25 + .5;\n    }*/\n\n    float shadow = shadowTrace(iChannel0, coord, lightPos, Bayer32(fragCoord));\n    shadow       = clamp(shadow, 0., 1.);\n\n    fragColor = vec4( vec3( shadow ) , 1.0);\n}","name":"Buffer B","description":"","type":"buffer"}]}