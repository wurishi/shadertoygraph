{"ver":"0.1","info":{"id":"XtSyzR","date":"1507062674","viewed":85,"name":"ml test","username":"aaaidan","description":"ml test","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// HEY! Mousedown to change to change area type\n\n// Constants\n#define PI 3.141592654\n#define TWO_PI 6.28318530718\n\n// Parameters\n#define STRIPE_COLOR1 (vec4(194, 216, 68, 255)/255.)\n#define STRIPE_COLOR2 (vec4(194, 216, 68, 0)/255.)\n#define STRIPE_WIDTH 50.0\n#define STRIPE_ANGLE -45.0\n#define BACKGROUND_COLOR (vec4(235, 232, 222, 255)/255.)\n#define CIRCLE_RADIUS 100.0\n#define CIRCLE_RADIUS_MOD 50.0\n#define SHADOW_COLOR (vec4(0,0, 0, 80)/255.)\n#define SHADOW_DEPTH 5.0\n#define SHADOW_SIZE 11.0\n#define SHADOW_SCALE 4.0\n#define GRID_LINE_WIDTH 2.5\n#define GRID_COLOR (vec4(255.,255.,255.,255.)/255.)\n#define GRID_COLOR2 (vec4(0,0,0,20)/255.)\n#define GRID_X_SIZE 150.0\n#define GRID_Y_SIZE 150.0\n#define EXCLUSION_COLOR (vec4(.45,.48,.45,1.0))\n\n// Calculations\n#define _STRIPE_SCALE (1.0/STRIPE_WIDTH)\n#define _HALF_SHADOW_SIZE (SHADOW_SIZE/2.0)\n\nvec4 blend(in vec4 under, in vec4 over) {\n    float outA = over.a + under.a * (1.0 - over.a);\n    vec3 outCol = vec3(0.0);\n    if (outA > 0.0) {\n    \toutCol = ( over.rgb*over.a + under.rgb*under.a*(1.0-over.a) ) / outA;\n    }\n    return vec4(outCol,outA);\n}\n\nvec4 stripes( in vec2 fragCoord, in bool stripey, float exclusionAmt)\n{\n    vec2 center = iResolution.xy / 2.0;\n    \n    bool inCircle = length(\n        fragCoord - center\n    \t) < CIRCLE_RADIUS + sin(iTime) * CIRCLE_RADIUS_MOD;\n    \n    if (!stripey) {\n        vec4 col = blend(STRIPE_COLOR1, vec4(EXCLUSION_COLOR.rgb,exclusionAmt));\n        return inCircle ? col : vec4(col.rgb, 0.0);\n    }\n    \n    float angle = (STRIPE_ANGLE) / 360.0 * TWO_PI;\n    \n    float sx = sin(angle) * (fragCoord.x - iMouse.x);\n    float sy = cos(angle) * (fragCoord.y - iMouse.y);\n    \n    float amt = sin((sx + sy) * TWO_PI * _STRIPE_SCALE);\n    \n    vec4 color = amt > 0.0 ? vec4(STRIPE_COLOR1) : vec4(STRIPE_COLOR2);\n    \n    return vec4(color.rgb, inCircle ? color.a : 0.0);\n}\n\nfloat smoothbump(float min, float max, float slope, float val) {\n    return smoothstep(min,min+slope,val) - \n        smoothstep(max-slope, max, val);\n}\n\nvec4 grid(in vec2 fragCoord) {\n    float angle = (STRIPE_ANGLE + iTime*3.6) / 360.0 * TWO_PI;\n    \n    vec2 s1 = vec2(\n        sin(angle) * (fragCoord.x - iMouse.x),\n    \tcos(angle) * (fragCoord.y - iMouse.y)\n\t);\n    vec2 s2 = vec2(\n        sin(angle + PI/2.0) * (fragCoord.x - iMouse.x),\n    \tcos(angle + PI/2.0) * (fragCoord.y - iMouse.y)\n\t);\n    \n    float sizeMod = (sin(iTime*0.15)*0.5+0.5) * 50.0;\n    \n    float amt = min(1.0,\n        smoothbump(0.0, GRID_LINE_WIDTH + 1.0, 1.0, mod(s1.x + s1.y, GRID_X_SIZE + sizeMod) ) +\n        smoothbump(0.0, GRID_LINE_WIDTH + 1.0, 1.0, mod(s2.x + s2.y, GRID_Y_SIZE + sizeMod) )\n\t);\n    \n    return vec4(GRID_COLOR.rgb, amt * GRID_COLOR.a);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    bool stripey = false;//mod(iTime, 6.0) > 3.0;\n    float exclusionAmt = (!stripey ? 1.0 : 0.0) * (1.0 - smoothstep(iResolution.x*0.4 + 0.,iResolution.x*0.4 + 1.,fragCoord.x - fragCoord.y*0.1));\n    \n    vec4 grid = grid(fragCoord);\n    \n\tfragColor  = stripes(fragCoord + vec2(-.25,-.25), stripey, exclusionAmt);\n    fragColor += stripes(fragCoord + vec2(-.25, .25), stripey, exclusionAmt);\n    fragColor += stripes(fragCoord + vec2( .25,-.25), stripey, exclusionAmt);\n    fragColor += stripes(fragCoord + vec2( .25, .25), stripey, exclusionAmt);\n    fragColor /= 4.0;\n    \n    float grid2Amt = GRID_COLOR2.a * grid.a;\n    \n    fragColor = vec4( GRID_COLOR2.rgb * grid2Amt + fragColor.rgb * (1. - grid2Amt),\n                     fragColor.a);\n    \n    if (!stripey) {\n        \n        // shadow\n        float totalSamples = 0.0;\n        float shadowAmt = 0.0;\n        for (float x=0.;x < SHADOW_SIZE; x+=1.) {\n            for (float y=0.;y < SHADOW_SIZE; y+=1.) {\n                float distFromMiddle = length(vec2(x,y) - vec2(_HALF_SHADOW_SIZE));\n                if (distFromMiddle > _HALF_SHADOW_SIZE * .9) {\n                    // Shape the samples so we end up with more of a circular blur (not box blur).\n                    continue;\n                }\n                shadowAmt += stripes(\n                    fragCoord + vec2(\n                        SHADOW_SCALE*(x - _HALF_SHADOW_SIZE),\n                        SHADOW_SCALE*(y - _HALF_SHADOW_SIZE) + SHADOW_DEPTH\n                    ),\n                    stripey, 0.0\n                ).a;\n                totalSamples += 1.0;\n            }\n        }\n        shadowAmt /= totalSamples;\n        \n    \tvec4 shadow = vec4(SHADOW_COLOR.rgb, SHADOW_COLOR.a * shadowAmt);\n    \tfragColor = blend(shadow, fragColor);\n    }\n    \n    // grid\n    fragColor = blend(grid, fragColor);\n    fragColor = blend(BACKGROUND_COLOR, fragColor);\n    \n}","name":"Image","description":"","type":"image"}]}