{"ver":"0.1","info":{"id":"3tBBzK","date":"1599296841","viewed":104,"name":"Shallow Water Simulation.","username":"JohnShadow","description":"Water Waves","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["simulation","water","physics"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define orbit 10.0\n#define depth 100\nfloat sdfS(vec3 a)\n{\n    return length(a) - 1.0;\n}\nfloat sdfP(vec3 a)\n{\n    float aspect = iResolution.x/iResolution.y;\n    a.xz *= 0.1;\n    vec2 location = vec2(mod(a.x, 1.0), mod(a.z * aspect, 1.0));\n \treturn abs(a.y + texture(iChannel0, location).x * 0.1);   \n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\nfloat map(vec3 position)\n{\n    return sdfP(position);\n}\nvec3 getnormal (vec3 p)\n{\n const float eps = 0.001;\n \n return normalize\n ( vec3\n \t( map(p + vec3(eps, 0, 0) ) - map(p - vec3(eps, 0, 0)),\n \t  map(p + vec3(0, eps, 0) ) - map(p - vec3(0, eps, 0)),\n\t  map(p + vec3(0, 0, eps) ) - map(p - vec3(0, 0, eps))\n \t)\n );\n}\nvec4 march(vec3 start, vec3 direction)\n{\n    vec3 position = start;\n    float fd = 0.0, cd = 0.0;\n    for(int i = 0; i < depth; ++i)\n    {\n        cd = map(position);\n        position += direction * cd;\n        fd += cd;\n     \tif(cd < 0.0001)\n            return vec4(position, fd);\n    }\n    return vec4(position, 0.0);\n}\nvec3 rayDirection(float fieldOfView, vec2 size, vec2 fragCoord) {\n    vec2 xy = fragCoord - size / 2.0;\n    float z = size.y / tan(radians(fieldOfView) / 2.0);\n    return normalize(vec3(xy, -z));\n}\nmat4 viewMatrix(vec3 eye, vec3 center, vec3 up) {\n    // Based on gluLookAt man page\n    vec3 f = normalize(center - eye);\n    vec3 s = normalize(cross(f, up));\n    vec3 u = cross(s, f);\n    return mat4(\n        vec4(s, 0.0),\n        vec4(u, 0.0),\n        vec4(-f, 0.0),\n        vec4(0.0, 0.0, 0.0, 1)\n    );\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    //vec2 uv = (-1.0 + 2.0*fragCoord.xy / iResolution.xy) * vec2(iResolution.x/iResolution.y, 1.0)*2.;\n\t\n    vec3 viewDir = rayDirection(45.0, iResolution.xy, fragCoord);\n\tvec3 ori = vec3(orbit, 5.0, orbit);\n    mat4 viewToWorld = viewMatrix(ori, vec3(0.0, 0.0, 0.0), vec3(0.0, 1.0, 0.0));\n    vec3 dir = (viewToWorld * vec4(viewDir, 0.0)).xyz;\n    \n    vec3 normal, color;\n    \n    // Time varying pixel color\n    vec4 hit = march(ori, dir);\n    if(hit.w != 0.0)  \n    {\n    \tnormal = getnormal(hit.xyz);\n        color = vec3(0.2, 0.7, 0.8) * normal.y;\n    }\n\n    // Output to screen\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord)\n{   \n    fragColor = texture(iChannel0, fragCoord/iResolution.xy);\n    vec4 laplace = laplace(iChannel0, fragCoord, iResolution.xy);\n    if(iFrame < 1)\n    {\n        vec4 k = vec4(gaussian(fragCoord-iResolution.xy*0.4, 10.), 0, 0, 1);\n        k += vec4(gaussian(fragCoord-iResolution.xy*0.6, 10.), 0, 0, 1);\n        fragColor = k * 0.5;\n    }\n    else   \n    {\n        vec4 k = vec4(fragColor.x, fragColor.y, 0, 1);\n        \n        k.y += laplace.x;\n        k.y *= 0.995;\n        \n        k.x += k.y;\n        k.x *= 0.995;\n        fragColor = k;\n    }\n    if(iMouse.z > 0.0)\n    {\n        vec4 k = vec4(fragColor.x, fragColor.y, 0, 1);\n        k = vec4(max(gaussian((fragCoord - iResolution.xy * 0.5) - (iMouse.xy - iResolution.xy * 0.5), 10.), k.x), k.y, 0, 1);\n        fragColor = k;\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define sample(a, pos, siz) texture((a), (pos)/siz)\nvec4 laplace(sampler2D channel, vec2 uv, vec2 dx)\n{\n    vec4 color = sample(channel, uv, dx);\n    vec4 a = sample(channel, uv + vec2(1.0, 0.0), dx);\n    vec4 b = sample(channel, uv + vec2(0.0, 1.0), dx);\n    vec4 c = sample(channel, uv - vec2(1.0, 0.0), dx);\n    vec4 d = sample(channel, uv - vec2(0.0, 1.0), dx);\n    // get average gradiant.\n    return (0.25 * (a + b + c + d) - color) * 2.0;\n}\n\nfloat gaussian(vec2 pos, float r)\n{\n    pos /= r;\n    return exp(-dot(pos,pos));\n}","name":"Common","description":"","type":"common"}]}