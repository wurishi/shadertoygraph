{"ver":"0.1","info":{"id":"Ddyczz","date":"1695694557","viewed":21,"name":"3/49","username":"tono","description":"3","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["49"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 rot(float a){return mat2(cos(a),sin(a),-sin(a),cos(a));}\nfloat bo(vec3 p,vec3 s){p = abs(p) - s;return max(p.x,max(p.y,p.z));}\nfloat bar(vec2 p,vec2 s){p = abs(p) - s;return max(p.x,p.y);}\nfloat pi = acos(-1.);\nvec3 pmod(vec2 p, float r)\n{\n    float a = atan(p.x, p.y) + pi / r;\n    float n = (pi * 2.) / r;\n    a = floor(a / n) * n;\n\n    return vec3(p * rot(-a),a);\n}\nvec2 min2(vec2 a,vec2 b){if(a.x<b.x){return a;}return b;}\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))\n                 * 43758.5453123);\n}\nvec2 bird(vec3 p)\n{\n    float o = 10.;\n    \n    float iid = random(floor(p.yy / 5.));\n    p.xz *= rot(p.y/16.);\n    p.y = mod(p.y,6.) - 3.;\n    \n    p.x += tan(iTime + iid * 100.) * 10. + 6.;\n    \n    o = bo(p,vec3(.3 ,.1,.3));\n    return vec2(o,0.);\n}\nfloat id = 0.;\nvec2 map(vec3 p)\n{\n    vec2 o = vec2(10.);\n    vec3 op = p;\n    vec3 oop = op;\n    vec3 opp = op;\n    p.xz = clamp(p.xz,-4.,4.)*rot(p.y/1.5 + iTime);\n    p = abs(p) - 1.;\n    o = vec2(bar(p.xz,vec2(.3,.3)),1.);\n    \n    \n    vec3 pm = pmod(op.xz , 70.);\n    op.xz = pm.xy;\n    \n    float tt = iTime * (random(pm.zz) - .5) * 10.;\n    float t = floor(tt) + pow(fract(tt),2.);\n    \n    op.y += t;\n    id = random(vec2(pm.z,floor(op.y) ));\n    op.y = mod(op.y,2.2) - 1.1;\n    op.z -= 18.;\n    \n    vec2 haco = vec2(bo(op,vec3(1.,1.,3.)),2.);\n    if(haco.x < 1.)\n    {\n        haco.x -= sin(op.x*62.)/100.;\n    }\n  //  o.x = length(op) - 1.;\n    o = min2(o,haco);\n    \n    oop.xz = pmod(oop.xz, 60.).xy;\n    oop.z -= 14.;\n    oop.y = mod(oop.y,30.) - 15.;\n    vec2 circle = vec2(bo(oop,vec3(1.,.6,2.)),3.);\n    o = min2(o,circle);\n    \n    o = min2(o,bird(opp));\n   // o = haco;\n    o.x *= 0.9;\n    return o;\n}\n\nvec2 march(vec3 cp , vec3 rd)\n{\n    float depth = 0.;\n    for(int i = 0 ; i< 99 ; i++)\n    {\n        vec3 rp = cp + rd * depth;\n        vec2 d = map(rp);\n        if(abs(d.x) < 0.01)\n        {\n            return vec2(depth,d.y);\n        }\n        depth += d.x;\n    }\n    return vec2(-depth , 0.);\n\n}\n\nvec3 random3(vec3 c) {\n    float j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n    vec3 r;\n    r.z = fract(512.0*j);\n    j *= .125;\n    r.x = fract(512.0*j);\n    j *= .125;\n    r.y = fract(512.0*j);\n    return r-0.5;\n}\n\n//https://www.shadertoy.com/view/XsX3zB\n/* skew constants for 3d simplex functions */\nconst float F3 =  0.3333333;\nconst float G3 =  0.1666667;\n\n/* 3d simplex noise */\nfloat simplex3d(vec3 p) {\n    /* 1. find current tetrahedron T and it's four vertices */\n    /* s, s+i1, s+i2, s+1.0 - absolute skewed (integer) coordinates of T vertices */\n    /* x, x1, x2, x3 - unskewed coordinates of p relative to each of T vertices*/\n\n    /* calculate s and x */\n    vec3 s = floor(p + dot(p, vec3(F3,F3,F3)));\n    vec3 x = p - s + dot(s, vec3(G3,G3,G3));\n\n    /* calculate i1 and i2 */\n    vec3 e = step(vec3(0.,0.,0.), x - x.yzx);\n    vec3 i1 = e*(1.0 - e.zxy);\n    vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\n    /* x1, x2, x3 */\n    vec3 x1 = x - i1 + G3;\n    vec3 x2 = x - i2 + 2.0*G3;\n    vec3 x3 = x - 1.0 + 3.0*G3;\n\n    /* 2. find four surflets and store them in d */\n    vec4 w, d;\n\n    /* calculate surflet weights */\n    w.x = dot(x, x);\n    w.y = dot(x1, x1);\n    w.z = dot(x2, x2);\n    w.w = dot(x3, x3);\n\n    /* w fades from 0.6 at the center of the surflet to 0.0 at the margin */\n    w = max(0.6 - w, 0.0);\n\n    /* calculate surflet components */\n    d.x = dot(random3(s), x);\n    d.y = dot(random3(s + i1), x1);\n    d.z = dot(random3(s + i2), x2);\n    d.w = dot(random3(s + 1.0), x3);\n\n    /* multiply d by w^4 */\n    w *= w;\n    w *= w;\n    d *= w;\n\n    /* 3. return the sum of the four surflets */\n    return dot(d, vec4(52.0,52.0,52.0,52.0));\n}\n\nvec3 simplex3dVector(vec3 p)\n{\n    float s = simplex3d(p);\n    float s2 = simplex3d(random3(vec3(p.y,p.x,p.z)) + p.yxz);\n    float s3 = simplex3d(random3(vec3(p.z,p.y,p.x)) + p.zyx);\n    return vec3(s,s2,s3);\n}\n\n vec3 random33(vec3 st)\n{\n    st = vec3(dot(st, vec3(127.1, 311.7,811.5)),\n                dot(st, vec3(269.5, 183.3,211.91)),\n                dot(st, vec3(511.3, 631.19,431.81))\n                );\n    return -1.0 + 2.0 * fract(sin(st) * 43758.5453123);\n}\n\nvec4 celler3D(vec3 i,vec3 sepc)\n{\n    vec3 sep = i * sepc;\n    vec3 fp = floor(sep);\n    vec3 sp = fract(sep);\n    float dist = 5.;\n    vec3 mp = vec3(0.);\n\n    for (int z = -1; z <= 1; z++)\n    {\n        for (int y = -1; y <= 1; y++)\n        {\n            for (int x = -1; x <= 1; x++)\n            {\n                vec3 neighbor = vec3(x, y ,z);\n                vec3 pos = vec3(random33(fp+neighbor));\n                pos = sin( (pos*6. +iTime/2.) )* 0.5 + 0.5;\n                float divs = length(neighbor + pos - sp);\n                mp = (dist >divs)?pos:mp;\n                dist = (dist > divs)?divs:dist;\n            }\n        }\n    }\n    return vec4(mp,dist);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 p = (fragCoord.xy * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n    vec3 f = vec3(0.,0.,0.);\n    f.y -= iTime/2.;\n\tvec3 cp = vec3(0.,0.,-6.) + f;\n    vec3 target = vec3(0.,-20.,1.) + f;\n    target.x += sin(sin(iTime/10.) * 12.);\n    cp.xz *= rot(iTime/10.);\n    vec3 sky = vec3(1.,1.,0.);\n    vec3 col = sky;\n    vec3 cd = normalize(vec3(target - cp));\n    vec3 cs = normalize(cross(cd , vec3(0.,1.,0.)));\n    vec3 cu = normalize(cross(cd,cs));\n    \n    float fov = 3. - dot(p,p)/4.;\n    \n    vec3 rd = normalize(cd * fov + cs * p.x + cu * p.y);\n    \n    vec2 d = march(cp,rd);\n    if( d.x > 0.)\n    {\n        vec2 e = vec2(0.,0.01);\n        vec3 pos = cp + rd * d.x;\n        vec3 N = normalize(map(pos).x - vec3(map(pos - e.xyy).x , map(pos - e.yxy).x,map(pos - e.yyx).x));\n        col = N;\n        vec3 sun = normalize(vec3(0.,0.3,1.));\n        //sun.xz *= rot(iTime);\n        float diff = max(0.,dot(-sun,N));\n        diff = mix(diff , 1.,.1);\n        float sp = max(0.,dot(rd,reflect(N,sun)));\n        sp = pow(sp,56.6) * 1.;\n        vec3 mat = vec3(1.);\n        vec3 spcol = vec3(1.);\n        \n        float up = max(0.,dot(vec3(0.,1.,0.),N));\n        \n        if(d.y < 1.)\n        {\n            mat = vec3(0.,1.,1.);\n        }else if(d.y < 2.)\n        {\n            mat = vec3(1.);\n        }else if(d.y < 3.)\n        {\n            mat = vec3(1.) * id;\n        }else if(d.y < 4.)\n        {\n            mat = vec3(1.,0.5,0.) * (simplex3d(pos + simplex3d(pos * vec3(2.,4.,12.)))* .5 ) + .5;\n        }\n        \n        col = sp * spcol + diff * mat + up * mat;\n        \n        float t = 1.-exp(-.0003 * d.x * d.x);\n        col = mix(col , sky,t);\n    }\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}