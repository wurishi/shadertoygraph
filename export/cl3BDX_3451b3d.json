{"ver":"0.1","info":{"id":"cl3BDX","date":"1701639919","viewed":44,"name":"Fork UCSD CSE 1 rzsun 848","username":"rzsun","description":"My submission for homework 5 UCSD CSE 167. Attract boids to your cursor by clicking.","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["boids"],"hasliked":0,"parentid":"ddtyDs","parentname":"UCSD CSE 167 Boids template"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Smooth HSV2RGB from https://www.shadertoy.com/view/MsS3Wc\nvec3 hsv2rgb(in vec3 c)\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n\trgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 color = vec4(0.5, 0.5, 0.5, 1.0);\n    // Loop over all boids\n    vec4 bcolor = vec4(0.0, 0.0, 0.0, 1.0);\n    bool hit = false;\n    for (int i = 0; i < NUM_BOIDS + NUM_PREDS; i++) {\n        ivec2 tex_pos = ivec2(i % int(iChannelResolution[0].x),\n                                                i / int(iChannelResolution[0].x));\n        vec4 pos_vel = texelFetch(iChannel0, tex_pos, 0);\n        if (distance(fragCoord, pos_vel.xy) < BOIDS_SIZE) {\n            vec3 rgb = hsv2rgb(vec3((float(i)+0.5) / float(NUM_BOIDS), 1.0, 0.9));\n            //vec3 rgb = vec3(0.0, 0.0, 1.0);\n            if (i < NUM_BOIDS)\n                rgb.x = 0.0;\n            else\n                rgb = vec3(1.0,0.0,0.0);\n            bcolor += vec4(rgb, 1.0);\n            hit = true;\n        }\n    }\n    if (hit) {\n        color = bcolor;\n    }\n\n    // Output to screen\n    fragColor = color;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    if (iFrame == 0) {\n        // initialize the buffer\n        vec4 pos_vel = texture(iChannel1, fragCoord/iChannelResolution[1].xy);\n        pos_vel.xy = iResolution.xy / 2.0 + (pos_vel.xy - 0.5) * iResolution.xy * 0.2;\n        pos_vel.zw = (pos_vel.zw - 0.5) * iResolution.xy * 1.0;\n        fragColor = pos_vel;\n        return;\n    }\n    ivec2 iFragCoord = ivec2(fragCoord);\n    // \n    vec4 pos_vel = texelFetch(iChannel0, iFragCoord, 0);\n    vec2 pos = pos_vel.xy;\n    vec2 vel = pos_vel.zw;\n    // ID of the current Boid\n    int my_id = int(iFragCoord.y) * int(iResolution.x) + int(iFragCoord.x);\n\n    // Implement Boids here\n    vec2 f_s = vec2(0.0);\n    vec2 f_c = vec2(0.0);\n    vec2 f_a = vec2(0.0);\n    vec2 f_b = vec2(float(pos.x < d_left) - float(pos.x > d_right),\n                    float(pos.y < d_top) - float(pos.y > d_bottom));\n    vec2 f_m = normalize(iMouse.xy - pos);\n    vec2 f_f = vec2(0.0);\n    \n    if (iMouse.z < 0.0) f_m = vec2(0.0);\n    \n    int n_s = 0;\n    int n_v = 0;\n    int n_f = 0;\n    \n    \n    for (int i = 0; i < NUM_BOIDS; i++) {\n        ivec2 tex_pos = ivec2(i % int(iChannelResolution[0].x),\n                                                i / int(iChannelResolution[0].x));\n        vec4 pos_vel = texelFetch(iChannel0, tex_pos, 0);\n        if (distance(pos, pos_vel.xy) < SEPARATION_DIST) {\n            f_s += pos - pos_vel.xy;\n            n_s++;\n        }\n        if (distance(pos, pos_vel.xy) < VISIBLE_DIST) {\n            f_c += pos_vel.xy;\n            f_a += pos_vel.wz;\n            n_v++;\n        }\n    }\n    \n    if (my_id < NUM_BOIDS)\n        for (int i = NUM_BOIDS; i < NUM_BOIDS + NUM_PREDS; i++) {\n            ivec2 tex_pos = ivec2(i % int(iChannelResolution[0].x),\n                                                    i / int(iChannelResolution[0].x));\n            vec4 pos_vel = texelFetch(iChannel0, tex_pos, 0);\n            if (distance(pos, pos_vel.xy) < PREDATOR_DIST) {\n                f_f += pos - pos_vel.xy;\n                n_f++;\n            }\n        }\n    \n    if (n_s > 0)\n        f_s /= float(n_s);\n    if (n_v > 0) {\n        f_c = (f_c / float(n_v)) - pos;\n        f_a = (f_a / float(n_v)) - vel;\n    }\n    if (n_f > 0)\n        f_f /= float(n_f);\n    \n    if (length(vel) > 0.0) {\n        if (length(vel) > s_max) \n            vel *= s_max / length(vel);\n        if (length(vel) < s_min) \n            vel *= s_min / length(vel);\n    }\n    \n    vel += a_s * f_s + a_c * f_c + a_a * f_a + a_b * f_b + a_m * f_m + a_f * f_f;\n    \n    pos += vel;\n    \n    //if (my_id < 100)\n    //    vel = vec2(0.0);\n    \n    fragColor = vec4(pos, vel);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define NUM_BOIDS 200\n#define BOIDS_SIZE 10.0\n#define SEPARATION_DIST 30.0\n#define VISIBLE_DIST 150.0\n#define PREDATOR_DIST 100.0\n#define s_max 10.0\n#define s_min 5.0\n#define d_left 200.0\n#define d_right iResolution.x - 200.0\n#define d_top 160.0\n#define d_bottom iResolution.y - 160.0\n#define a_s 0.02\n#define a_c 0.001\n#define a_a 0.03\n#define a_b 0.5\n#define a_m 0.4\n#define a_f 0.03\n#define NUM_PREDS 2","name":"Common","description":"","type":"common"}]}