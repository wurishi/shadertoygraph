{"ver":"0.1","info":{"id":"DdcBzs","date":"1714985432","viewed":52,"name":"Fork Flip Dot Plasma","username":"chenxiang","description":"Plasma drawn on a mechanical flip dot display.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["plasma","monochrome","flipdots"],"hasliked":0,"parentid":"XtS3Dt","parentname":"Flip Dot Plasma"},"renderpass":[{"inputs":[],"outputs":[],"code":"#define PI 3.141592653589793\n\n#define WIDTH 0.6\n#define ROUND 0.3\n\n#define INTERVAL 1.0\n\n#ifdef UNIFORM_PARAM\n\nuniform int tiles;//[1,6,10]\n\nuniform float radius; //[0.0,0.3,1.0]\nuniform float space; //[0.0,0.1,0.2]\nuniform float speed; //[0.0,1.0,2.0]\n\nuniform vec3 foreground; //[0.2,0.8,0.5]\nuniform vec3 background; //[0.2,0.2,0.2]\n\n#else\n\nconst int tiles = 6;\n\nconst float radius = 0.3;\nconst float space = 0.1;\nconst float speed = 1.0;\n\nconst vec3 foreground = vec3(0.2, 0.8, 0.5);\nconst vec3 background = vec3(0.2, 0.2, 0.2);\n\n#endif\n\nvec2 flipX(vec2 uv, float a)\n{\n    vec3 r = vec3(uv, 4.0);\n    vec3 n = vec3(0.0, sin(a), cos(a));\n    vec3 p = r * (r.z * n.z) / dot(n, r);\n    return vec2(p.x, p.y / n.z);\n}\n\nfloat random(vec2 st)\n{\n    return fract(sin(dot(st, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nfloat display(vec2 uv, float t)\n{\n    uv += 0.2 * t;\n    return sin(uv.x) * sin(uv.y);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 R = iResolution.xy;\n    vec2 p = (fragCoord - 0.5 * R) / min(R.x, R.y);\n\n    p *= float(tiles);\n\n    vec2 cellf = fract(p);\n    vec2 celli = floor(p);\n\n    float t = speed * iTime;\n\n    // Current and next display value.\n    float d0 = step(0.5, display(celli, floor(t)));\n    float d1 = step(0.5, display(celli, floor(t + 1.0)));\n    float phase = mix(d0, d1, fract(t));//mix(d0, d1, smoothstep(0.0, 1.0, fract(t)));\n\n    // Coordinates of the flip dot's plane.\n    vec2 plane = flipX(2.0 * cellf - 1.0, PI * phase);\n\n    // Implicit function for the rounded rectangle.\n    float width = clamp(1.0 - radius - space, 0.0, 1.0);\n    float f = radius - length(plane - clamp(plane, -width, width));\n\n    // Anti-alias and output!\n    float d = smoothstep(0.0, fwidth(f), f);\n\n    vec3 col = mix(background, foreground, d);\n\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}