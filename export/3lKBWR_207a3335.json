{"ver":"0.1","info":{"id":"3lKBWR","date":"1614174661","viewed":96,"name":"Rounds waw psych","username":"Nashoute","description":"Little test to see what I can do with the tuto of GreenChicken","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//thank you Iq https://iquilezles.org/articles/distfunctions\n//and thank you GreenChicken for your tutorials https://www.shadertoy.com/user/GreenChicken\n\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n\n\nvec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat hash21(vec2 p){ //fonction pour donner un aspect al√©atoire\n    p = fract(p*vec2(234.34,435.345));\n    p += dot(p,p+35.14);\n    return fract(p.x*p.y);\n}\n\nfloat opSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\n\n\nfloat sdBox( vec3 p, vec3 b){\n    vec3 q = abs(p) -b;\n    return length(max(q,0.)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;\n}\n\nvec3 opRepet(vec3 pos,vec3 bound){\n    return mod(pos+0.5*bound,bound)-0.5*bound;\n}\n\nfloat opCheapBend( vec3 p )\n{\n    const float k = 1.0; // or some other amount\n    float c = cos(k*p.x);\n    float s = sin(k*p.x);\n    mat2  m = mat2(c,-s,s,c);\n    vec3  q = vec3(m*p.xy,p.z);\n    return sdBox(q , vec3(1.) );\n}\n\nfloat map(vec3 pos){\n    \n    pos = opRepet(pos, vec3(4.0,4.0,4.0));\n    \n\n    float world = sdRoundBox(pos,vec3(0.05+sin(iTime+4.8)/8.+0.5,0.05+sin(iTime)/8.+0.3,0.05+sin(iTime)/8.+0.4),01.);\n    //world = opSmoothUnion(opCheapBend(pos) ,world, 0.1);\n    return world;\n}\n\nvec3 GetNormal (vec3 p)\n{\n    float c = map(p);\n    vec2 e = vec2(0.001, 0.0);\n    return normalize(vec3(\n        map(p + e.xyy), \n        map(p + e.yxy), \n        map(p + e.yyx)) - c);\n}\n\nfloat CastRay(vec3 ro, vec3 rd){\n    float c = 0.0; //si y'a contact, on aura la distance\n    \n    for(int i = 0; i<128; i++){\n    \n        float ray = map(ro + rd*c);\n        \n        if(ray < (0.0001*c)){\n            return float(i)/32.;\n        }\n        \n        c+=ray;\n    }\n    \n    return -1.0;\n}\n\nvec3 render(vec3 ro,vec3 rd){ //rayon origin, rayon direction\n    \n    float contact = CastRay(ro,rd);     \n    vec3 nor = GetNormal(ro + rd * contact);\n    \n    \n    \n    vec3 col = vec3(0.);\n    \n    if(contact == -1.){\n        col = palette(iTime,vec3(0.8,0.4,0.32),vec3(0.4,0.4,0.32),vec3(0.7,0.8,0.32),vec3(0.4,0.4,0.32));\n    }else{\n        //col = vec3(1.-contact);\n        col = nor;\n    }\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float fov = 2.; //fieldOfView\n    vec2 uv = 2.*fragCoord/iResolution.xy-1.;\n    uv.x*=iResolution.x/iResolution.y;\n    \n    //Camera\n    vec3 cameraPos = vec3(0.-iTime*2.,2,5.-iTime*4.);\n    vec3 cameraTarget = vec3(0.-iTime*2.,0.+sin(iTime),0.-iTime*4.);\n    \n    //view Direction/ RayD Direction\n    vec3 forward = normalize(cameraTarget-cameraPos);\n    vec3 right = normalize(cross(vec3(0.,-1.,0.),forward));\n    vec3 up = normalize(cross(right,forward));\n    vec3 viewDir = normalize(uv.x * right+uv.y*up+forward*fov);\n    viewDir.xy*=rot(iTime);\n\n    \n    vec3 col = vec3(uv.x,uv.y,0.0);\n    \n    col = render(cameraPos,viewDir);\n\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}