{"ver":"0.1","info":{"id":"wsGXRy","date":"1574554462","viewed":132,"name":"permanent data!","username":"Maddig","description":"Using a buffer to store the relative position of a square!\n\nUse the arrow keys to move around, smoother when shader is playing","likes":1,"published":1,"flags":48,"usePreview":0,"tags":["2d","beginner","learning"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    vec2 centreScreen = vec2(0.5) * iResolution.xy;\n    vec2 relativePos = texelFetch(iChannel0, ivec2(fragCoord), 0).xy;\n    vec2 fragLocation = centreScreen + relativePos;\n    \n    // frag pixels inside box\n    float inBounds = float(abs(fragLocation.x - fragCoord.x) < 10. &&\n                           abs(fragLocation.y - fragCoord.y) < 10.);\n    \n    vec3 col = vec3(inBounds);\n    \n    // Output to screen\n    fragColor = vec4(col, 1.0);\n\n\n    // this does a circle I think, keeping it cause I don't think I'll remember\n    \n    //float screenRatio = iResolution.x / iResolution.y;\n    //uv.x *= screenRatio;\n    \n    //float len = length(uv);\n}\n\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// See also:\n//\n// Input - Keyboard    : https://www.shadertoy.com/view/lsXGzf\n\nconst int KEY_LEFT  = 37;\nconst int KEY_UP    = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN  = 40;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // initialise to 0 on first frame\n    fragColor = vec4(0.0) * float(iFrame == 0);\n    \n    // on other frames copy last buffer frame\n    fragColor += texelFetch(iChannel0, ivec2(fragCoord),0) * float(iFrame != 0);\n    \n    \n    \n    fragColor.r += 5. * texelFetch(iChannel1, ivec2(KEY_RIGHT, 0), 0).x;\n    fragColor.r -= 5. * texelFetch(iChannel1, ivec2(KEY_LEFT, 0), 0).x;\n    \n    fragColor.g += 5. * texelFetch(iChannel1, ivec2(KEY_UP, 0), 0).x;\n    fragColor.g -= 5. * texelFetch(iChannel1, ivec2(KEY_DOWN, 0), 0).x;\n}\n\n// TODO: find an efficient way to change different pixels differently\n// this would allow for more data to be stored, you could probably make a game!","name":"Buffer A","description":"","type":"buffer"}]}