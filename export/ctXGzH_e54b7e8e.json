{"ver":"0.1","info":{"id":"ctXGzH","date":"1671285959","viewed":131,"name":"Rotating triangles","username":"TuttiMarcella","description":"1 triangle that splits in it's rgb components","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define PI 3.14159265359\n#define TWO_PI 6.28318530718\n\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    uv = uv * 2.0 - vec2(1.0);\n    \n    uv.y *= iResolution.y/iResolution.x;\n    vec2 pos = vec2(0.) - uv;\n    //pos += vec2(cos(iTime) - 0.04,sin(iTime)-0.04);\n    mat2 rotation = rotate2d(PI/2. *  float(iTime / 10.1));\n    mat2 rotation2 = rotate2d(PI/2. *  float(iTime) / 10.3);\n    mat2 rotation3 = rotate2d(PI/2. *  float(iTime / 10.5));\n    vec2 pos2 = rotation2 * pos;\n    vec2 pos3 = rotation3 * pos;\n    pos = rotation * pos;\n    \n    float len = length(pos);\n    float angle = atan(pos.x,pos.y);\n    float angle2 = atan(pos2.x,pos2.y);\n    float angle3 = atan(pos3.x,pos3.y);\n    \n    float r = TWO_PI/float(3);\n\n      float d = cos(floor(.5+angle/r)*r-angle)*length(pos);\n      float q = cos(floor(.5+angle2/r)*r-angle2)*length(pos2);\n\n      float l = cos(floor(.5+angle3/r)*r-angle3)*length(pos3);\n\n    \n    // Time varying pixel color\n    vec3 col = vec3(0.0);\n    col.r += (1.0 - step(0.2,d));\n    col.g += (1.0 - step(0.2,q));\n    col.b += (1.0 - step(0.2,l));\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}