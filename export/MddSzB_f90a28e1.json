{"ver":"0.1","info":{"id":"MddSzB","date":"1460123673","viewed":669,"name":"Simple Floor Projection","username":"TrueBoolean","description":"A short and readable floor projection demo. Should make it easy to learn how projection and transformations work. Use your mouse to look around the scene.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["projection","floor","mode7","mariokart","fzero"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 FCOL, in vec2 FPT){\n\n    //SCENE ATTRIBUTES\n    float FOV = .5;\n    float SCALE = .4;\n    vec2 camPos = vec2(sin(iTime), iTime);\n    float camRot = iMouse.x/iResolution.x-.5;\n    float horizon = -iMouse.y/iResolution.y+.5;\n    \n    //PROJECTION \n    vec2 uv = (FPT*2.-iResolution.xy)/min(iResolution.x, iResolution.y)/2.;\n    if(uv.y > horizon)\n        camPos = -camPos;\n\tvec3 projection = vec3(uv.x, uv.y-horizon-FOV, uv.y-horizon); \n    vec2 scene = projection.xy/projection.z; \n    \n    //CAMERA TRANSFORMATION\n    scene *= SCALE;\n    mat2 rotationMatrix = mat2(cos(camRot), -sin(camRot), sin(camRot), cos(camRot));\n    scene *= rotationMatrix;\n    scene += camPos;//Always update camera position AFTER the rotation!\n    \n    FCOL = vec4(fract(1e4*sin(dot(floor(8.*scene), vec2(983, -5))))); //Procedural texture\n    FCOL *= abs(horizon-uv.y);//(Darkening based on distance)\n}","name":"Image","description":"","type":"image"}]}