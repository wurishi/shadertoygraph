{"ver":"0.1","info":{"id":"3sjXDG","date":"1554850233","viewed":258,"name":"Sound Track","username":"Passion","description":"I decided to texture the previous shader 'On Track' after reading MacSlows comment.  Also added a much better sky from a previous shader I did 'Going Coastal' with better fogging of the background terrain and track.","likes":4,"published":1,"flags":64,"usePreview":0,"tags":["raymarch","texture","bumpmap","soundcloud"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4df3Rr","filepath":"/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","previewfilepath":"/media/ap/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdXGzr","filepath":"/media/a/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg","previewfilepath":"/media/ap/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4tl3WM","filepath":"https://soundcloud.com/federationrecords/deadmau5-snowcone-original-mix","previewfilepath":"https://soundcloud.com/federationrecords/deadmau5-snowcone-original-mix","type":"musicstream","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define NUM_STEPS 100\n#define FUDGE_AMOUNT 0.75\n#define EPS 0.001\n#define FAR 75.0\n\n#define PI 3.1415926535898\nvec3 sunCenter = vec3(1.0,1.0,0.2)*6.;\nvec3 sunPeriph = vec3(1.0,0.3568,0.078)*5.;\n\nvec3 sunEarthBottom = vec3(0.5)*4.;\nvec3 sunEarthTop = vec3(0,0.49,0.69)*3.;\n\n//void doScatter(inout vec3 dSC, inout vec3 sEC, in vec3 sp, in vec3 l, in vec3 r, in vec3 o);\n// sebastien.hillaire.free.fr/demos/godray/godray.htm\nvoid doScatter(inout vec3 dSC, inout vec3 sEC, in vec3 sp, in vec3 l, in vec3 r, in vec3 o){\n    vec3 ctpn = normalize(sp-o);\n\n    //direct sun color\n    float directSun = dot(ctpn, normalize(l+r));\n    directSun = pow( clamp(directSun,0.0,1.0), 125.0);\n\n    // atmosphere\n    float sunEarthScatering = 1.0-dot(ctpn, vec3(0.0,1.0,0.0));\n    sunEarthScatering = pow( clamp(sunEarthScatering,0.0,1.0), 5.0);\n    vec4 skyBlend = pow(1.*vec4(.1, .75, .8, 1), vec4(4.*(1.*r.y-.15)));\n    sunEarthTop = 4.* pow(vec4(.1, .7, .8, 1).rgb, vec4(4.*max(r.y,-0.141)+1.5).rgb);\n\n    // learp or mix based on directional lights 'y' coord/dir\n    sunEarthTop = mix(.65*skyBlend.rgb, sunEarthTop, l.y);\n    sunEarthBottom = mix(vec3(.5)*sunEarthBottom, sunEarthBottom, l.y);\n    \n    //lerp color and add contribution of sun and atmosphere\n    dSC = mix(sunPeriph,sunCenter,directSun)*directSun;\n    sEC = mix(sunEarthTop,sunEarthBottom,sunEarthScatering);\n}\n\nvec3 tri(in vec3 x){return abs(x-floor(x)-.5);} // Triangle function.\n\nfloat surfFunc(in vec3 p){\n\treturn dot(tri(p*0.5 + tri(p*0.25).yzx), vec3(0.777));\n}\n\nvec2 path(in float z){ float s = sin(z/34.)*cos(z/12.)*cos(sin(z/20.)); return vec2(s*20.+sin(s)*5.1, -2.25*s*15.); }\n\nmat3 lookAtMatrix(vec3 origin, vec3 target, float roll) {\n    vec3 rr = vec3(sin(roll), cos(roll), 0.0);\n    vec3 ww = normalize(target - origin);\n    vec3 uu = normalize(cross(ww, rr));\n    vec3 vv = normalize(cross(uu, ww));\n\n    return mat3(uu, vv, ww);\n}\n\nmat2 r2(float a){\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(s, -c, c, s);\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return length(max(d,0.0))\n         + min(max(d.x,max(d.y,d.z)),0.0); // remove this line for an only partially signed sdf \n}\n\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n{\n  vec3 d = abs(p) - b;\n  return length(max(d,0.0)) - r\n         + min(max(d.x,max(d.y,d.z)),0.0); // remove this line for an only partially signed sdf \n}\n\nfloat trackPlanks(vec3 tp){\n    tp.xy = (tp.xy - path(tp.z))*vec2(0.5, 0.47071);\n    tp.z = mod(tp.z, 1.) -0.5;\n    float bmp2 = texture(iChannel1, tp.xz/4.).r*.015;\n    return sdBox(vec3(tp.x,tp.y+1.4,tp.z), vec3(1., .05152, .2))+bmp2;\n}\nfloat trackRails(vec3 tp){\n    tp.xy = (tp.xy - path(tp.z))*vec2(0.5, 0.47071);\n    tp.z = mod(tp.z, 1.) -0.5;\n    tp.x = abs(tp.x)-1.;\n    return sdRoundBox(vec3(tp.x, tp.y+1.3, tp.z), vec3(.015, .015, .5), .12);\n}\nfloat map(vec3 p){\n    float ground = p.y + (sin(sin(p.z*0.1253) - p.x*0.311)*1.31 + cos(p.z*0.53 + sin(p.x*0.127))*0.12)*1.7 + 0.2;\n    ground += tri(p).y;\n    float bmp = texture(iChannel0, p.xz/10.).r*.05;\n    float tx = textureLod(iChannel3, p.xz/66. + p.xy/50., 0.0).x;\n\n    ground+=bmp;\n\n    vec2 tun = (p.xy - path(p.z))*vec2(0.5, 0.47071);\n    float n = 1.- length(tun) + (0.5);\n    n += surfFunc(p/2.);\n    n+=tx;\n      \n    float planks = trackPlanks(p);\n    float rails = trackRails(p);\n        \n    return min(min(max(ground, n), planks), rails);\n}\n\nfloat trace(vec3 o, vec3 r){\n    float t = 0.0;\n    for(int i = 0; i < NUM_STEPS; i++){\n        float d = map(o+r*t);\n        t += d * FUDGE_AMOUNT;\n        if(abs(d) < EPS || t > FAR) break;\n    }\n    return t;\n}\n// Surface normal.\nvec3 getNormal(in vec3 p) {\n\t\n\tconst float eps = 0.001;\n\treturn normalize(vec3(\n\t\tmap(vec3(p.x + eps, p.y, p.z)) - map(vec3(p.x - eps, p.y, p.z)),\n\t\tmap(vec3(p.x, p.y + eps, p.z)) - map(vec3(p.x, p.y - eps, p.z)),\n\t\tmap(vec3(p.x, p.y, p.z + eps)) - map(vec3(p.x, p.y, p.z - eps))\n\t));\n\n}\n// Tri-Planar blending function. Based on an old Nvidia tutorial.\nvec3 tex3D( sampler2D tex, in vec3 p, in vec3 n ){\n  \n    n = max((abs(n) - 0.2)*7., 0.001); // max(abs(n), 0.001), etc.\n    n /= (n.x + n.y + n.z );  \n    \n\treturn (texture(tex, p.yz)*n.x + texture(tex, p.zx)*n.y + texture(tex, p.xy)*n.z).xyz;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= .5; uv.x *= iResolution.x / iResolution.y;\n    vec3 r = normalize(vec3(uv, 1.0 - dot(uv, uv) * .33));\n    vec3 o = vec3(0.0, 0.0, iTime*15.0);\n    \n    vec3 lookAt = o + vec3(0.0, -0.05,.245);\n    o.xy += path(o.z);\n    lookAt.xy +=path(lookAt.z);    \n    \n    mat3 camMat = lookAtMatrix(o, lookAt, -o.x/15.);  //clamp(o.x/3.,-.3,.3));\n    r = normalize(camMat * r);\n    \n    float hit = trace(o, r);\n    vec3 surfPos = o + r * hit;\n    vec3 n = getNormal(surfPos);\n    vec4 bg = vec4(0.0);\n    vec3 l = normalize(vec3(0.1, 0.38+sin(iTime*.75)*.5, 0.4));\n    l.xz *= r2(iTime*2.);\n    float diff = max(dot(n,l), 0.25);\n    \n    float fog = smoothstep(01.175, 02.75, hit*0.03);\n    fragColor=vec4(0.0);\n    \n    float d = map(surfPos);\n    float d2 = trackRails(surfPos);\n    float d3 = trackPlanks(surfPos);\n    vec3 rf = reflect(r,n);\n    //vec3 cmp = texture(iChannel2, rf).rgb;\n    \n    vec3 directSunContrib = vec3(0.0);\n    vec3 sunEarthContrib = vec3(0.0);\n    doScatter(directSunContrib, sunEarthContrib, surfPos, l, r, o);\n    \n    bg = 0.25 * vec4( sunEarthContrib, 1.0);\n    \n    if(abs(d) < EPS+.4){\n        vec3 tx= tex3D(iChannel0, surfPos/20., n);\n        fragColor = mix(vec4(tx, 1.0)*vec4(1.0*diff), bg, fog);        //+ hit* -.04;\n        if(abs(d2)<EPS+.01)\n            fragColor = mix(vec4(vec3(.7, 0.4, 0.4), 1.0)*diff,bg,fog);  //\n        else if(abs(d3) < EPS+0.1){\n            vec4 tx = texture(iChannel1, surfPos.xz);\n            fragColor = mix(tx*diff,bg,fog);//*+vec4(0.2, 0.5, 0.3, 1.0)*diff*vec4(cmp,1.0);\n        }\n    }\n    else\n        fragColor = vec4(0.25 * vec4( directSunContrib + sunEarthContrib, 1.0));\n}","name":"Image","description":"","type":"image"}]}