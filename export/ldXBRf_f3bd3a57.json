{"ver":"0.1","info":{"id":"ldXBRf","date":"1497200627","viewed":112,"name":"Raymarching 02","username":"darkace65","description":"Writing a raymarcher from scratch","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define EPSILON 0.0001\n\nconst int MAX_MARCHING_STEPS = 100;\nconst float MAX_DEPTH = 100.0;\n\nmat4 viewMatrix(vec3 eye, vec3 center, vec3 up) {\n    // Based on gluLookAt man page\n    vec3 f = normalize(center - eye);\n    vec3 s = normalize(cross(f, up));\n    vec3 u = cross(s, f);\n    return mat4(\n        vec4(s, 0.0),\n        vec4(u, 0.0),\n        vec4(-f, 0.0),\n        vec4(0.0, 0.0, 0.0, 1)\n    );\n}\n\nvec3 viewDir(float fieldOfView, vec2 size, vec2 fragCoord) {\n    vec2 xy = fragCoord - size / 2.0;\n    float z = size.y / tan(radians(fieldOfView) / 2.0);\n    return normalize(vec3(xy, -z));\n}\n\nfloat udRoundBox(vec3 p, vec3 b, float r) {\n  return length(max(abs(p)-b,0.0))-r;\n}\n\nfloat sceneSDF(vec3 p) {\n    return udRoundBox(p, vec3(0.4, 0.2, 0.7), 0.3);\n}\n\nvec3 normal(vec3 p) {\n    vec3 x = vec3(EPSILON, 0.0, 0.0);\n    vec3 y = vec3(0.0, EPSILON, 0.0);\n    vec3 z = vec3(0.0, 0.0, EPSILON);\n    return normalize(vec3(\n        (sceneSDF(p + x) - sceneSDF(p - x)),\n        (sceneSDF(p + y) - sceneSDF(p - y)),\n        (sceneSDF(p + z) - sceneSDF(p - z))\n    ));\n}\n\nfloat raymarch(vec3 camera, vec3 ray) {\n    float depth = 0.0;\n    for(int i = 0; i < MAX_MARCHING_STEPS; i++) {\n        float dist = sceneSDF(camera + depth * ray);\n        if(dist < EPSILON) {\n\t\t\treturn depth;\n        }\n        depth += dist;\n        if(depth >= MAX_DEPTH) {\n            return MAX_DEPTH;\n        }\n    }\n    return MAX_DEPTH;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec3 camera = vec3(-9.0 * cos(iTime / 4.0), 4.0, 9.0 * sin(iTime / 4.0));\n    vec3 focus = vec3(0.0);\n    vec3 up = vec3(0.0, 1.0, 0.0);\n    mat4 viewToWorld = viewMatrix(camera, focus, up);\n    \n    vec3 viewRay = viewDir(45.0, iResolution.xy, fragCoord);\n    vec3 cameraRay = (viewToWorld * vec4(viewRay, 0.0)).xyz;\n    \n    float dist = raymarch(camera, cameraRay);\n    \n    vec3 color = vec3(0.0);\n    if(dist <= MAX_DEPTH - EPSILON) {\n        vec3 p = camera + dist * cameraRay;\n        color = normal(p).xzy;\n    }\n\tfragColor = vec4(color * 0.5 + 0.5, 1.0);\n}","name":"Image","description":"","type":"image"}]}