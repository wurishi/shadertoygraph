{"ver":"0.1","info":{"id":"wtXXzs","date":"1613932853","viewed":119,"name":"z^2.5+c","username":"rossi","description":"2d-fractal, escape-time, rational exponent\n\nupdate 2021/02/26: added simple animation for param C","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["fractal","escapetime","rationalexponent"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//\n// update 2021/02/26: added simple animation for param C\n//\n// thx to https://www.shadertoy.com/user/FabriceNeyret2 for hints and tips\n//\n// TODO: remove ugly pixel trans, get rid of visual artifacts at y=0\n//\n\n#define ANIMATE 1\n#define AA 2\n\n// change param C here (if ANIMATE > 0 then C will be taken from circle centered at C_Center)\n#if ANIMATE > 0\n\n    #define C_Center vec2(0.)\n\n#else\n\n    #define C vec2(-1.05,0.48)\n\n#endif\n\n// change formula here if you like\n#define z_iter(z,c,sgn) ( cmul( csqr(z), sgn*csqrt(z) ) + c )\n\n#define MAX_STEPS 11\n#define BAIL      128.\n#define SAMPLING  32.\n\n// viewport = vec4(center.x, center.y, size.x, size.y)\n#define VIEWPORT vec4(0.,0.,3.,3.)\n#define MAGN 1.\n\n// taken from \n// https://www.ronja-tutorials.com/2018/09/02/white-noise.html\n// get a scalar random value from given 2d-vector\nfloat rand1from2(vec2 val)\n{\n    float random = dot(sin(val), vec2(12.9898, 78.233));\n    return fract(sin(random) * 143758.5453);\n}\n\n#define cs(A) vec2(cos(A), sin(A))\n#define cmul(A,B) mat2(A, -(A).y, (A).x) * (B)\n#define csqr(Z) vec2(Z.x*Z.x-Z.y*Z.y, 2.*Z.x*Z.y)\nvec2 csqrt(vec2 z) { float r = length(z); return vec2(sqrt((r+z.x)*.5), sign(z.y)*sqrt((r-z.x)*.5)); }\n\nfloat iter(vec2 p, float k)\n{\n    vec2 z = p;\n    float sgn = 1.;\n\n    #if ANIMATE > 0\n    vec2 c = C_Center+1.1*cs(iTime);\n    #else\n    vec2 c = C;\n    #endif \n    \n    for(int i = 0; i < MAX_STEPS; ++i)\n    {\n        if (rand1from2(p+vec2(float(i), k)) < 0.5)\n            sgn = -sgn;\n\n        if (dot(z,z) > BAIL) \n            return 0.;\n\n        z = z_iter(z,c,sgn);        \n    }\n    \n    return 1.;\n}\n\nvec3 pixelColor(in vec2 pixel) \n{   \n    vec2 R = iResolution.xy;\n    float ar = R.x/R.y;\n    vec2 vps = 1.0/MAGN*vec2(VIEWPORT.z*ar, VIEWPORT.w);\n    vec2 dxy = vps/R.xy;\n    vec2 p = VIEWPORT.xy-0.5*vps+pixel.xy*dxy;\n      \n    float res = 0.;\n    for (float k = 0.; k < 128.; k+=1.)\n     \tres += iter(p, k);\n    \n    if (res > 0.)\n\t\treturn vec3(exp(-2.*res/SAMPLING)); \n    else\n        return vec3(0.);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tfloat d = 1./float(AA);\n\tvec3 col = vec3(0.);\n    \n\tfor(int j = 0; j < AA; ++j)\n\t\tfor(int i = 0; i < AA; ++i)\n\t\t\tcol += pixelColor(fragCoord.xy+vec2(i, j)*d);\n\n    // gamma correction\n    fragColor.rgb = pow(col.rgb*d*d, vec3(.4545));\n}","name":"Image","description":"","type":"image"}]}