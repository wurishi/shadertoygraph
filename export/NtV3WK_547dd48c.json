{"ver":"0.1","info":{"id":"NtV3WK","date":"1638353111","viewed":463,"name":"mirror city","username":"snflwrfld","description":"used this wonderful tutorial to avoid glitching towers : https://www.youtube.com/watch?v=I8fmkLK1OKg","likes":15,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"struct hit{float dist;int mat;};\n\nfloat norminf3(vec3 p){return max(abs(p.x),max(abs(p.y),abs(p.z)));}\nfloat norminf2(vec2 p){return max(abs(p.x),abs(p.y));}\nmat4 viewMatrix(vec3 eye,vec3 center,vec3 up){\n    // Based on gluLookAt man page\n    vec3 f=normalize(center-eye);\n    vec3 s=normalize(cross(f,up));\n    vec3 u=cross(s,f);\n    return mat4(\n        vec4(s,0.),\n        vec4(u,0.),\n        vec4(-f,0.),\n        vec4(0.,0.,0.,1)\n    );\n}\nfloat hash21(vec2 p){\n    return fract(sin(dot(p,vec2(41.558,36.55))+27.1));\n}\nfloat hash31(vec3 p){\n    return fract(sin(dot(p,vec3(3.5225,8.142,7.356))+4.));\n}\nvec2 edge(vec2 p){\n    if(abs(p.x)>abs(p.y))return vec2((p.x<0.)?-1.:1.,0.);\n    else return vec2(0.,(p.y<0.)?-1.:1.);\n}\n\n// Ray tracing\n#define MAX_STEPS 250\n#define EPSILON.001\n#define MIN_DIST 0.\n#define MAX_DIST 1000.\n\nfloat towerSDF(vec3 p,float width,float height){\n    vec2 p2=vec2(norminf2(p.xz),p.y);\n    p2.x-=width;\n    p2.y-=height;\n    return length(max(p2,0.))+min(0.,max(p2.x,p2.y));\n}\nhit scene(vec3 p){\n    //Scene's SDF\n    hit res;\n    p.x-=iTime;\n    p.z-=.5;\n    \n    vec3 fp;fp.xz=fract(p.xz)-.5;fp.y=p.y+2.8;\n    vec3 ip;ip=floor(p);\n    vec3 neighbor;neighbor.xz=fp.xz-edge(fp.xz);neighbor.y=fp.y;\n    \n    float width=.45;\n    float max_height=2.;\n    float me=towerSDF(fp,width,max_height*hash21(ip.xz));\n    float next=towerSDF(neighbor,width,max_height);\n    \n    vec3 fp2=fp;fp2.y=-fp.y+5.6;\n    vec3 neighbor2=neighbor;neighbor.y*=-1.;\n    float me2=towerSDF(fp2,width,max_height*hash21(ip.zx+vec2(.1,.5)));\n    float next2=towerSDF(neighbor,width,max_height);\n    \n    res.dist=me;\n    res.dist=min(min(me,next),min(me2,next2));\n    \n    res.mat=1;\n    return res;\n}\n\nhit trace(vec3 cam,vec3 dir,float start,float end){\n    hit res;\n    \n    float depth=start;int mat=0;\n    for(int i=0;i<MAX_STEPS;i++){\n        hit p=scene(cam+depth*dir);\n        if(p.dist<EPSILON){\n            res.dist=depth;res.mat=p.mat;\n            return res;\n        }\n        depth+=p.dist;\n        if(p.dist>=end){\n            res.dist=end;res.mat=0;\n            return res;\n        }\n    }\n    res.dist=end;res.mat=0;\n    return res;\n}\n\nvec3 estimateNormal(vec3 p){\n    return normalize(vec3(scene(vec3(p.x+EPSILON,p.y,p.z)).dist-scene(vec3(p.x-EPSILON,p.y,p.z)).dist,scene(vec3(p.x,p.y+EPSILON,p.z)).dist-scene(vec3(p.x,p.y-EPSILON,p.z)).dist,scene(vec3(p.x,p.y,p.z+EPSILON)).dist-scene(vec3(p.x,p.y,p.z-EPSILON)).dist));\n}\n\nvec3 backgroundColor=vec3(.15);\nvec3 displayColor(vec3 cam,vec3 dir,vec2 st){\n    vec3 color;vec3 p;int material_id;hit obj;\n    \n    obj=trace(cam,dir,MIN_DIST,MAX_DIST);\n    p=cam+obj.dist*dir;\n    material_id=obj.mat;\n    \n    vec3 bg=mix(vec3(.1294,.298,.3725),vec3(.3882,.2392,.3608),(st.x+1.)/2.);\n    if(material_id==0){\n        color=bg;\n    }else if(material_id==1){\n        vec3 p2=p;\n        p2.x-=iTime;\n        p2.y/=2.5;\n        vec3 color=(1.-abs(estimateNormal(p).y)>EPSILON)?mix(vec3(0.),vec3(.9843,.9922,.3882),smoothstep(.9997,.9999,hash31(floor(p2*56.)))):vec3(0.);\n        return mix(bg,color,2.5*pow(1./(obj.dist*obj.dist),.6));\n    }\n    \n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // fragment\n    vec2 st=fragCoord.xy/iResolution.xy;\n    st=st*2.-1.;\n    st.x*=iResolution.x/iResolution.y;\n    float t=iTime;\n    \n    // ray tracing\n    //vec3 cam=vec3(cos(t),0.,sin(t))*7.+vec3(0.,2.,0.);\n    vec3 cam=vec3(5.,0.,0.);\n    vec3 dir=normalize(vec3(st,-1.1));\n    mat4 view=viewMatrix(cam,vec3(0.),vec3(0.,1.,0.));\n    dir=(view*vec4(dir,0.)).xyz;\n    \n    // shading\n    vec3 color=displayColor(cam,dir,st);\n    \n    fragColor=vec4(color,1.);\n}","name":"Image","description":"","type":"image"}]}