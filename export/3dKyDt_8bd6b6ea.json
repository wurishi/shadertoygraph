{"ver":"0.1","info":{"id":"3dKyDt","date":"1604045199","viewed":129,"name":"Texture Cartwheel ","username":"Shem_Namo","description":"A simple cartwheel effect based on: https://www.shadertoy.com/view/3tXXz8 ","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["texture","uv","warp","polar"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//CartWheel Texture effect\n//Based on: https://www.shadertoy.com/view/3tXXz8\n\n#define TileU 1.0\n#define TileV 2.0\n//#define debug\n\n\n#define M_PI 3.1415926535897932384626433832795\n\n// polar coordinate UVs\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    \n    float ang = iTime;\n    float s = sin(ang);\n    float c = cos(ang);\n    mat2 rot = mat2(c, -s, s, c);    \n\n    // define the UVs, make them square by using the same iRes dimension\n\tvec2 uv = fragCoord.xy/iResolution.xy;\n    vec2 center = vec2(0.5);\n    vec3 mouse = vec3(iMouse.xy/iResolution.xy - 0.5,iMouse.z-.5);\n    \nif (iMouse.z > 0.5) {    \n    center = iMouse.xy/iResolution.xy;\n}    \n    uv -= center;\n    uv.y *= iResolution.y/iResolution.x;\n    uv *= rot;\n    uv.y = abs(uv.y);\n\n    \n    \n\tfloat radius = length(uv);\n\tfloat angle = atan(uv.y, uv.x) / 2. / M_PI;\n\n    radius *= TileU;\n    angle *= TileV;\n    \n    vec2 finalUV = vec2(radius, angle);\n\n    fragColor = texture(iChannel0, finalUV);\n    #ifdef debug\n    fragColor.xyz = vec3(finalUV, 0.0);\n    #endif\n}","name":"Image","description":"","type":"image"}]}