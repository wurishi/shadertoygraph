{"ver":"0.1","info":{"id":"cdtGzj","date":"1677536886","viewed":246,"name":"Variable Size Perlin Noise","username":"Geat","description":"I needed a way to scale perlin noise based on vertex colors without distortion.\n\nfork of: https://www.shadertoy.com/view/NlSGDz","likes":15,"published":1,"flags":0,"usePreview":0,"tags":["perlin"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define u_octaveCount 6\n\n// implementation of MurmurHash (https://sites.google.com/site/murmurhash/) for a \n// single unsigned integer.\n\nuint hash(uint x, uint seed) {\n    const uint m = 0x5bd1e995U;\n    uint hash = seed;\n    // process input\n    uint k = x;\n    k *= m;\n    k ^= k >> 24;\n    k *= m;\n    hash *= m;\n    hash ^= k;\n    // some final mixing\n    hash ^= hash >> 13;\n    hash *= m;\n    hash ^= hash >> 15;\n    return hash;\n}\n\n// implementation of MurmurHash (https://sites.google.com/site/murmurhash/) for a  \n// 2-dimensional unsigned integer input vector.\n\nuint hash(ivec2 x, uint seed){\n    const uint m = 0x5bd1e995U;\n    uint hash = seed;\n    // process first vector element\n    uint k = uint(x.x); \n    k *= m;\n    k ^= k >> 24;\n    k *= m;\n    hash *= m;\n    hash ^= k;\n    // process second vector element\n    k = uint(x.y); \n    k *= m;\n    k ^= k >> 24;\n    k *= m;\n    hash *= m;\n    hash ^= k;\n\t// some final mixing\n    hash ^= hash >> 13;\n    hash *= m;\n    hash ^= hash >> 15;\n    return hash;\n}\n\n\nvec4 gradientDirection(uint hash) {\n    return vec4(\n        int(hash & 0x01u)*2-1,\n        int(hash & 0x02u)  -1,\n        int(hash & 0x04u)/2-1,\n        int(hash & 0x08u)/4-1);\n}\n\nfloat interpolate(float value1, float value2, float value3, float value4, vec2 t) {\n    return mix(mix(value1, value2, t.x), mix(value3, value4, t.x), t.y);\n}\n\n\n\nvec2 fade(vec2 t) {\n    // 6t^5 - 15t^4 + 10t^3\n\treturn t * t * t * (t * (t * 6.0 - 15.0) + 10.0);\n}\n\nfloat perlinNoise(vec2 position, uint seed) {\n    vec2 floorPosition = floor(position);\n    vec2 fractPosition = position - floorPosition;\n    ivec2 cellCoordinates = ivec2(floorPosition);\n    float value1 = dot(gradientDirection(hash(cellCoordinates, seed)).xy, fractPosition);\n    float value2 = dot(gradientDirection(hash((cellCoordinates + ivec2(1, 0)), seed)).xy, fractPosition - vec2(1.0, 0.0));\n    float value3 = dot(gradientDirection(hash((cellCoordinates + ivec2(0, 1)), seed)).xy, fractPosition - vec2(0.0, 1.0));\n    float value4 = dot(gradientDirection(hash((cellCoordinates + ivec2(1, 1)), seed)).xy, fractPosition - vec2(1.0, 1.0));\n    return interpolate(value1, value2, value3, value4, fade(fractPosition));\n}\n\nfloat perlinNoise(vec2 position,float scale, int frequency, float persistence, float lacunarity, uint seed) {\n    float value = 0.0;\n    float amplitude = 1.0;\n    float currentFrequency = float(frequency);\n    uint currentSeed = seed;\n    \n//replace this with a uniform array index!!!    \n    for(int i = 0; i < int(floor(scale)); ++i)\n    {\n        currentSeed = hash(currentSeed, 0x0U);\n    }\n\n    currentFrequency *= pow(lacunarity, floor(scale));\n\n    vec2 fadeInOut = vec2(1.0 - fract(scale), fract(scale));\n\n    currentSeed = hash(currentSeed, 0x0U);\n    value += perlinNoise(position * currentFrequency, currentSeed) * amplitude * fadeInOut.x;\n    amplitude = mix(amplitude, amplitude * persistence, fadeInOut.x);\n    \n    currentFrequency *= lacunarity;\n    \n    for (int i = 1; i < u_octaveCount; i++)\n    {\n        currentSeed = hash(currentSeed, 0x0U);\n        value += perlinNoise(position * currentFrequency, currentSeed) * amplitude;\n        amplitude *= persistence;\n        currentFrequency *= lacunarity;\n    }\n \n    currentSeed = hash(currentSeed, 0x0U);\n    value += perlinNoise(position * currentFrequency, currentSeed) * amplitude * fadeInOut.y;\n\n    return value;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 position = fragCoord / iResolution.xy;\n    vec2 uv = position;\n    position.x *= iResolution.x / iResolution.y;\n    position += iTime * -0.25;\n    uint seed = 0x578437adU; // can be set to something else if you want a different set of random values\n    // float frequency = 16.0;\n    // float value = perlinNoise(position * frequency, seed); // single octave perlin noise\n    float value = perlinNoise(position, uv.x * 6.0, 1, 0.5, 2.0, seed); // multiple octaves\n    value = (value + 1.0) * 0.5; // convert from range [-1, 1] to range [0, 1]\n    fragColor = vec4(vec3(value), 1.0);\n}","name":"Image","description":"","type":"image"}]}