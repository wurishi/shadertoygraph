{"ver":"0.1","info":{"id":"4tlfWN","date":"1511927397","viewed":135,"name":"Codegolf Simple Raymarcher","username":"Assossa","description":"I'm sure this can be a whole lot smaller than 216 chars, but I don't know how to make it any smaller.\nSuggestions are appreciated!\nEDIT: Wow... I didn't realize how large my code was before","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["golf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n// My attempt at not using raymarching.\n// It doesn't look correct, I think because it's using orthographic projection instead of perspective.\n// Maybe not though, the two projections should be identical since it's a sphere.\n// I also am not sure why there is a black indent in the middle of the sphere :/\n#define mainImage(a,b) \\\n\tvec2 r = iResolution.xy; \\\n    a.xy = (b+b-r)/r.y; \\\n    a.z = sqrt(dot(a,a)-1.); \\\n\ta = vec4(length(a.xy) < .5 ? dot(a,1.-a) + .1 : 0.)\n*/\n\nvoid mainImage(out vec4 a, vec2 b) {\n    vec3 r = iResolution;\n    for( int i=0 ; i++ < 9;  )\n        a += vec4((b+b -r.xy) / r.y, 0, -1 ) * ( length(a) - .33 );\n    a +=  dot( a*=3., 1.-a ) + .8 -a;}\n\n/*\n#define mainImage(a,b) \\\n\tvec3 r = iResolution; \\\n\tvec2 c = b.xy / r.xy * 2. - 1.; \\\n    c.x *= r.x / r.y; \\\n    vec3 d = vec3(c, 1); \\\n    vec3 o = vec3(0, 0, -3); \\\n    for(int i; i < 9; i++) \\\n        o += d * (length(o) - 1.0); \\\n    a = length(o) > 1.1 ? vec4(0.1) : vec4(dot(o, (vec3(1, 1, -1) - o)) + 0.8)\n*/\n        \n/*\nvoid mainImage(out vec4 a, in vec2 b) {\n    vec3 r = iResolution;\n\tvec2 c = b.xy / r.xy * 2. - 1.;\n    c.x *= r.x / r.y;\n    \n    vec3 d = vec3(c, 1);\n    vec3 o = vec3(0, 0, -3);\n    \n    for(int i; i < 9; i++) {\n        o += d * (length(o) - 1.0);\n    }\n    \n    a = length(o) > 1.1 ? vec4(0.1) : vec4(dot(o, (vec3(1, 1, -1) - o)) + 0.8);\n}\n*/","name":"Image","description":"","type":"image"}]}