{"ver":"0.1","info":{"id":"MXK3Dy","date":"1718208716","viewed":46,"name":"freaky portals","username":"0x177","description":"would have been cooler to have a portal on each side, but i am too sleepy","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"l3XGRl","parentname":"raymarching startingpoint"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 250.\n#define SURF_DIST .001\n#define TAU 6.283185\n#define PI 3.141592\n\nconst float globalAmbient = 0.4; // how strong is the ambient lightning\nconst float globalDiffuse = 0.8; // how strong is the diffuse lightning\nconst float globalSpecular = 1.0; // how strong is the specular lightning\nconst float globalSpecularExponent = 32.0; // how focused is the shiny spot\nconst vec3 lightPos = vec3(0.0, 1.0, -0.5); // position of the light source\nconst vec3 lightColor = vec3(0.9, 0.9, 0.68); // color of the light source\nconst vec3 ambientColor = vec3(1.0, 1.0, 1.0); // ambient color\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat box(vec3 p, vec3 b) {\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\n// general distance\nvec2 GetDist(vec3 p) {    \n    float d = 999.0;\n    float mat = 0.0;\n        \n    float b = box(p,vec3(1.8));\n    vec3 size = vec3(2.2,1.5,1.6);\n    float crs = min(box(p,size),box(p,size.zyx));\n    b = max(b,-crs);\n    d = min(d,b);\n    mat = (d==b) ? 1.0 : mat;\n    \n    return vec2(d,mat);\n}\n\n// portals distance\nvec2 GetDistB(vec3 p) {\n    float d = 999.0;\n    float mat = 0.0;\n    \n    // front facing portal\n    float s = box(p,vec3(1.6));\n    s = max(s,box(p,vec3(1.6,1.5,1.8)));\n    d = min(d,s);\n    mat = (d==s) ? 2.0 : mat;\n    \n    // side facing portal\n    s = box(p,vec3(1.8));\n    s = max(s,box(p,vec3(1.8,1.5,1.5999999)));\n    d = min(d,s);\n    mat = (d==s) ? 3.0 : mat;\n    \n    return vec2(d,mat);\n}\n\n// inside of the front facing portal combined with general distance\nvec2 GetDistFP(vec3 p) {\n    vec2 gdx = GetDist(p);\n    float d = gdx.x;\n    float mat = gdx.y;\n    \n    float s = length(p)-1.0;\n    d = min(d,s);\n    mat = (d==s) ? 1.0 : mat;\n    \n    return vec2(d,mat);\n}\n\n// inside of the side facing portal combined with general distance\nvec2 GetDistSP(vec3 p) {\n    vec2 gdx = GetDist(p);\n    float d = gdx.x;\n    float mat = gdx.y;\n    \n    float s = box(p,vec3(1.0));\n    d = min(d,s);\n    mat = (d==s) ? 1.0 : mat;\n    \n    return vec2(d,mat);\n}\n\nvec2 RayMarch(vec3 ro, vec3 rd, bool portal, bool side) {\n\tfloat dO=0.;\n    float mat;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        vec2 dS;\n        // if we are not marching in a portal, combine general distance and portals distance\n        if (!portal) {\n            vec2 gd = GetDist(p);\n            vec2 gdb = GetDistB(p);\n            dS.x = min(gd.x,gdb.x);\n            dS.y = (dS.x == gd.x) ? gd.y : gdb.y;\n        // otherwise, march inside portal\n        } else {\n            if (!side) {\n                dS = GetDistFP(p);\n            } else {\n                dS = GetDistSP(p);\n            }\n        }\n        \n        dO += dS.x;\n        mat = dS.y;\n        \n        if(dO>MAX_DIST || abs(dS.x)<SURF_DIST) break;\n    }\n    \n    return vec2(dO,mat);\n}\n\n// general normal\nvec3 GetNormal(vec3 p) {\n    vec2 e = vec2(.001, 0);\n    vec3 n = GetDist(p).x - \n        vec3(GetDist(p-e.xyy).x, GetDist(p-e.yxy).x,GetDist(p-e.yyx).x);\n    \n    return normalize(n);\n}\n\n// front facing portal normal\nvec3 GetNormalFP(vec3 p) {\n    vec2 e = vec2(.001, 0);\n    vec3 n = GetDistFP(p).x - \n        vec3(GetDistFP(p-e.xyy).x, GetDistFP(p-e.yxy).x,GetDistFP(p-e.yyx).x);\n    \n    return normalize(n);\n}\n\n// side facing portal normal\nvec3 GetNormalSP(vec3 p) {\n    vec2 e = vec2(.001, 0);\n    vec3 n = GetDistSP(p).x - \n        vec3(GetDistSP(p-e.xyy).x, GetDistSP(p-e.yxy).x,GetDistSP(p-e.yyx).x);\n    \n    return normalize(n);\n}\n\nfloat ambientOcclusion(vec3 p, vec3 n){\n    const int steps = 1;\n    const float delta = 0.5;\n\n    float a = 0.0;\n    float weight = 0.75;\n    float m;\n    for(int i=1; i<=steps; i++) {\n        float d = (float(i) / float(steps)) * delta;\n        a += weight*(d - GetDist(p + n*d).x);\n        weight *= 0.5;\n    }\n    return clamp(1.0 - a, 0.0, 1.0);\n}\n\nfloat softshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<100; i++ )\n    {\n\t\tfloat h = GetDist( ro + rd*t ).x;\n        res = min( res, 8.0*h/t );\n        t += h*.25;\n        if( h<0.001 || t>tmax ) break;\n    }\n    return clamp( res, 0.1, 1. );\n}\n\n\nvec3 shade(  vec3 position,\n                           vec3 lightPosition,\n                           vec3 ambientCol,\n                           vec3 lightCol,\n                           float ambientCoeff,\n                           float diffuseCoeff,\n                           float specularCoeff,\n                           float specularExponent,\n                           vec3 camera_pos,\n                           vec3 ray_direction,\n                           vec3 normal\n)\n{\n      vec3 toEye = normalize(camera_pos - position);\n      vec3 toLight = normalize(lightPosition - position);\n      vec3 reflection = reflect(-toLight, normal);\n\n      vec3 ambientFactor = ambientCol * ambientCoeff;\n      vec3 diffuseFactor = diffuseCoeff * lightCol * max(0.0, dot(normal, toLight));\n      vec3 specularFactor = lightCol * pow(max(0.0, dot(toEye, reflection)), specularExponent)\n                     * specularCoeff;\n                     \n      float bac = clamp( dot( normal, normalize(vec3(-lightPosition.x,0.0,-lightPosition.z))), 0.0, 1.0 )*clamp( 1.0-position.y,0.0,1.0);\n      float fre = pow( clamp(1.0+dot(normal,ray_direction),0.0,1.0), 2.0 );\n\n      float ao = ambientOcclusion(position+normal*0.1,normal);\n      float ss= softshadow(position,lightPos,0.1,10.0);\n       \n    diffuseFactor *= ss;\n    diffuseFactor *= ao;\n    return ambientFactor + diffuseFactor + specularFactor + 0.30 * bac + 0.20 * fre;\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 \n        f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u;\n    return normalize(i);\n}\n\nvec3 get_mat(float m) {\n    if (m == 0.0) {\n        return vec3(0.882,0.471,0.773);\n    } else if (m == 1.0) {\n        return vec3(0.3);\n    } else if (m == 2.0) {\n        // front facing portal\n        return vec3(1.0);\n    }  else if (m == 3.0) {\n        // side facing portal\n        return vec3(1.0);\n    }\n    \n    return vec3(0.5);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n\n    vec3 ro = vec3(0, 3, -3);\n    if (iMouse.z>0.0) {\n        ro.yz *= Rot(-m.y*PI+1.);\n        ro.xz *= Rot(-m.x*TAU);\n    } else {\n        ro.yz *= Rot(-0.2*PI);\n        ro.xz *= Rot(iTime);\n    }\n    \n    vec3 rd = GetRayDir(uv, ro, vec3(0,0.,0), 0.5);\n    vec3 bg = mix(vec3(1.,0.557,0.561),vec3(1.,0.992,0.796),rd.y);\n    vec3 col = bg;\n   \n    vec2 rm = RayMarch(ro, rd,false,false);\n    float d = rm.x;\n\n    if(d<MAX_DIST) {\n        vec3 p = ro + rd * d;\n        col = get_mat(rm.y);\n        vec3 n = GetNormal(p);\n\n        col *= shade(p,lightPos,ambientColor,lightColor,globalAmbient,globalDiffuse,globalSpecular,globalSpecularExponent,ro,rd,n);\n        \n        // we hit the front facing portal\n        if (rm.y == 2.0) {\n            rm = RayMarch(p,rd,true,false);\n            d = rm.x;\n            ro = p;\n            p = ro + rd * d;\n            \n            col = bg;\n            if (d<MAX_DIST) {\n                n = GetNormalFP(p);\n                col = get_mat(rm.y);\n                col *= shade(p,lightPos,ambientColor,lightColor,globalAmbient,globalDiffuse,globalSpecular,globalSpecularExponent,ro,rd,n);\n            }\n        }\n        \n        // we hit the side facing portal\n        if (rm.y == 3.0) {\n            rm = RayMarch(p,rd,true,true);\n            d = rm.x;\n            ro = p;\n            p = ro + rd * d;\n            \n            col = bg;\n            if (d<MAX_DIST) {\n                n = GetNormalSP(p);\n                col = get_mat(rm.y);\n                col *= shade(p,lightPos,ambientColor,lightColor,globalAmbient,globalDiffuse,globalSpecular,globalSpecularExponent,ro,rd,n);\n            }\n        }    \n    }\n    \n    float c = 1.1;\n    float b = 0.0;\n    col = c * (col-0.5) + 0.5 + b;\n    vec3 greyscale = vec3(dot(col,vec3(0.299,0.587,0.114)));\n    col = mix(greyscale,col,1.3);\n    col = clamp(col,vec3(0.0),vec3(1.0));\n    \n    col = pow(col, vec3(.4545));\t// gamma correction\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}