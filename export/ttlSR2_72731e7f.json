{"ver":"0.1","info":{"id":"ttlSR2","date":"1563608420","viewed":866,"name":"FabriceNeyret2 shaking grid remx","username":"fields37","description":"boing\nRemix of https://www.shadertoy.com/view/MsGyWK\ncolor changes, audio responsive","likes":6,"published":3,"flags":4,"usePreview":0,"tags":["slimyparty"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdXGRr","filepath":"/presets/mic.png","previewfilepath":"/presets/mic.png","type":"mic","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Inspired by another tuto by Etienne Jacob https://necessarydisorder.wordpress.com/2017/11/15/drawing-from-noise-and-then-making-animated-loopy-gifs-from-there/\n// closer (expensive) version here: https://www.shadertoy.com/view/MdyyWK\n\n// --- pseudo perlin noise 3D\n\nint MOD = 1;  // type of Perlin noise\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n\n#define hash31(p) fract(sin(dot(p,vec3(127.1,311.7, 74.7)))*43758.5453123)\nfloat noise3(vec3 p) {\n    vec3 i = floor(p);\n    vec3 f = fract(p); f = f*f*(3.-2.*f); // smoothstep\n\n    float v= mix( mix( mix(hash31(i+vec3(0,0,0)),hash31(i+vec3(4,0,0)),f.x),\n                       mix(hash31(i+vec3(0,1,0)),hash31(i+vec3(1,1,0)),f.y), f.z), \n                  mix( mix(hash31(i+vec3(0,3,1)),hash31(i+vec3(1,0,5)),f.z),\n                       mix(hash31(i+vec3(0,1,1)),hash31(i+vec3(1,1,1)),f.x), f.y), f.z);\n\treturn   MOD==0 ? v\n\t       : MOD==1 ? 2.*v-1.\n           : MOD==2 ? abs(2.*v-1.)\n                    : 1.-abs(2.*v-1.);\n}\n\nfloat fbm3(vec3 p) {\n    float v = 0.,  a = .5;\n    mat2 R = rot(.37);\n\n    for (int i = 0; i < 1; i++, p*=2.,a/=2.) \n        //p.xy *= R, p.yz *= R,\n        p.yx *= R,\n        v += a * noise3(p);\n\n    return v;\n}\n// -------------------------------------\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    vec2 R = iResolution.xy;\n    U = ( U+U - R  * 1.0 ) / R.y;\n    O -= O;\n    \n    float t = 2.*iTime;\n    U += texture(iChannel0, vec2(0.2,.0)).x * .6\n         *max(1.-.5*length(U),0.)\n         * vec2( fbm3(vec3(U, t)), fbm3(vec3(U+5., t)) );\n    U = sin(cos(60.*U)); U = smoothstep(1.5,0.,abs(U)/fwidth(U));\n    O += U.x+U.y;  // * if you want points\n    \n    \n    O = O.x * vec4(sin(iTime/9.) / 4. + .5, sin(iTime/7.) / 2. + 0.5, sin(iTime/5.) / 4. + .5 , 1.);\n    //O = O.x * vec4(sin(iTime),1,sin(iTime/4.),0.0);\n}","name":"Image","description":"","type":"image"}]}