{"ver":"0.1","info":{"id":"ctj3DD","date":"1673416831","viewed":75,"name":"Concentrics","username":"PGRacer","description":"Just some spiraling patterns.\n\nSaw https://www.shadertoy.com/view/dlSGDD by jonasfrey and thought I'd try something similar.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["circles"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.141592\n#define SEGMENTATION 200.0\n#define DENSITY 0.75\n\nmat2x2 MRotate(float angle)\n{\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat2x2(c, -s, s, c);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float density = PI * DENSITY * (sin(iTime) * 0.5 + 0.5);\n\n    float t = 2.0 - (iTime * 4.0);\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    float len = length(uv * SEGMENTATION);\n    float segment = sin(len);\n    float id = (len - mod(len, PI)) / SEGMENTATION;\n    \n    float s = dot(normalize(vec2(-uv.y, uv.x)), vec2(1.0, 0.0));\n    float a = acos(s);\n    if (uv.x < 0.0) a = 2.0 * PI - a;\n    \n    float slice = id * PI * density;\n    float m = mod(a + id * t, PI * 2.0);\n    float w = (m < slice) ? 1.0 : 0.0;\n\n    vec3 col = vec3(abs(segment));\n    col *= w;\n\n    vec4 segmentColor = vec4(col,1.0);\n    \n    float red = pow(length(uv) * 0.5, 4.0);\n    float green = 1.0 - length(uv) * 0.125;\n    float blue = pow(length(uv), 4.0);\n    \n    green *= 0.5;\n    vec4 backColor = vec4(red, green, blue, 1.0);\n    backColor = mix(vec4(0.0), backColor, length(uv) * 0.75);\n    \n    fragColor = clamp(segmentColor + backColor, 0.0, 1.0);\n}","name":"Image","description":"","type":"image"}]}