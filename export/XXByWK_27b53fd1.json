{"ver":"0.1","info":{"id":"XXByWK","date":"1727706009","viewed":36,"name":"2D physics sim","username":"Psyph","description":"initial attempt at storing physical data in the buffer. want to add 3D and collisions","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["physics"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.141592654\nvec3 palette(float t)\n{\n    vec3 a=vec3(.5,.5,.5);\n    vec3 b=vec3(1.000,1.000,1.000);\n    vec3 c=vec3(1.000,1.000,1.000);\n    vec3 d=vec3(0.,.333,.666);\n    \n\treturn a+b*cos(2.*PI*(c*t+d));\n}\nvec3 conrp(ivec4 p,vec2 f, float s,vec2 u)\n{\n    //xx xy yx yy\n    float px=texelFetch(iChannel0,p.xy,0).x*iResolution.x;\n    float py=texelFetch(iChannel0,p.zw,0).x*iResolution.y;\n    \n    //float vx=texelFetch(iChannel0,p.xy,0).y; //comment out if not using speed color\n    //float vy=texelFetch(iChannel0,p.zw,0).y; //comment out if not using speed color\n    //float v=length(vec2(vx,vy)); //comment out if not using speed color\n    \n    //if(length(f-vec2(px,py))<s) return vec3(1.,0.,0.); //red\n    if(length(f-vec2(px,py))<s) return palette(u.x/100.); //color based on identity\n    //if(length(f-vec2(px,py))<s) return palette(v);  //color based on speed.\n    \n    return vec3(0.);\n    //return texture(iChannel0,u).xyz;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col=vec3(0.);\n    \n    float s=8.;\n    int i=0;\n    while(i<100)\n    {\n        col+=conrp(ivec4(i*2+1,1,i*4+3,1),fragCoord,s,vec2(i,0.));\n        i++;\n    }\n    //col=conrp(ivec4(1,1,3,1),fragCoord,s,uv);\n    //col+=conrp(ivec4(5,1,7,1),fragCoord,s,uv);\n    //col+=conrp(ivec4(9,1,11,1),fragCoord,s,uv);\n    \n    fragColor=vec4(col,1.0);\n}\n\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","previewfilepath":"/media/ap/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec3 calcn(vec3 c)\n{\n    float vs=50.;\n    float as=30.;\n    float np=c.x+c.y/vs-1./(vs*2.);\n    if (np<0.) \n    {\n        np=0.;\n        c.y=(1.-c.y);\n    }\n    if (np>1.) \n    {\n        np=1.;\n        c.y=(1.-c.y);\n    }\n    float nv=c.y+c.z/as-1./(as*2.);\n    \n    \n    c.x=np;\n    c.y=nv;\n    \n    return c;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col=vec3(0.,.5,.5);    \n    \n    if(iFrame<10)\n    {\n        //setup initial phys data for objs.\n        \n        \n        col=texture(iChannel1,uv).xyz;\n    }\n    else\n    {\n        col=calcn(texelFetch(iChannel0,ivec2(fragCoord),0).xyz);\n    }\n    \n    fragColor=vec4(col,1.);\n}","name":"Buffer A","description":"","type":"buffer"}]}