{"ver":"0.1","info":{"id":"4tlcRn","date":"1503141150","viewed":556,"name":"Scale3x filter","username":"Kchplr","description":"Test porting the Scale3x filter to WebGL Shader.\n\nThe filter is here applied once.\nClick and sweep on the canvas to compare the output with the input given to the filter.","likes":2,"published":3,"flags":32,"usePreview":0,"tags":["filter","epx","scale3x"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (iMouse.w > 0. && iMouse.x > fragCoord.x) {\n        // this is just to allow the visualisation of the input\n        fragColor = texelFetch(iChannel0, ivec2(fragCoord.xy / 3.), 0);\n        return;\n    }\n    \n    ivec2 texPos = ivec2(fragCoord.xy / 3.);\n    int id = int(floor(mod(fragCoord.x, 3.)) + floor(mod(fragCoord.y, 3.)) * 3.); // 0-2 / 3-5 / 6-9\n    \n    vec4 A = texelFetch(iChannel0, texPos + ivec2(-1,-1), 0);\n    vec4 B = texelFetch(iChannel0, texPos + ivec2(0,-1), 0);\n    vec4 C = texelFetch(iChannel0, texPos + ivec2(1,-1), 0);\n    vec4 D = texelFetch(iChannel0, texPos + ivec2(-1,0), 0);\n    vec4 E = texelFetch(iChannel0, texPos, 0);\n    vec4 F = texelFetch(iChannel0, texPos + ivec2(1,0), 0);\n    vec4 G = texelFetch(iChannel0, texPos + ivec2(-1,1), 0);\n    vec4 H = texelFetch(iChannel0, texPos + ivec2(0,1), 0);\n    vec4 I = texelFetch(iChannel0, texPos + ivec2(1,1), 0);\n    \n    vec4 result;\n    \n    if (id == 0 && D==B && D!=H && B!=F) result = D;\n    else if (id == 1 && ((D==B && D!=H && B!=F && E!=C) || (B==F && B!=D && F!=H && E!=A))) result = B;\n\telse if (id == 2 && B==F && B!=D && F!=H) result = F;\n    \n    else if (id == 3 && ((H==D && H!=F && D!=B && E!=A) || (D==B && D!=H && B!=F && E!=G))) result = D;\n    else if (id == 5 && ((B==F && B!=D && F!=H && E!=I) || (F==H && F!=B && H!=D && E!=C))) result = F;\n        \n    else if (id == 6 && H==D && H!=F && D!=B) result = D;\n    else if (id == 7 && ((F==H && F!=B && H!=D && E!=G) || (H==D && H!=F && D!=B && E!=I))) result = H;\n    else if (id == 8 && F==H && F!=B && H!=D) result = F;\n        \n    else result = E;\n    \n    fragColor = result;\n        \n    if (iMouse.w > 0. && abs(iMouse.x - fragCoord.x) < 2.) {\n        fragColor.rgb = mix(fragColor.rgb, vec3(1.,1.,0.33), 0.66);\n        return;\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// This filter only works on pixellized images, it was specifically implemented to enhance the output of console emulation\n// The original filter code by Andrea Mazzoleni is GPL-2, so consider this GPL-2 too, I guess ?\n// This is specifically based on ... the description on wikipedia https://en.wikipedia.org/wiki/Pixel_art_scaling_algorithms#Scale3.C3.97.2FAdvMAME3.C3.97_and_ScaleFX\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // take the input, reduce it to a 3rd of the screen size and quantize it to 4 shades of grey\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv *= 3.;\n    vec4 color = uv.x < 1. && uv.y < 1. && uv.y > 0. ? texture(iChannel0, uv) : vec4(0., 0., 0., 1.);\n    color = vec4(vec3(floor(pow((color.r + color.g + color.b + 0.1) / 3., 0.75) * 3.) / 3.), 1.);\n    fragColor = color;\n}","name":"Buf A","description":"","type":"buffer"}]}