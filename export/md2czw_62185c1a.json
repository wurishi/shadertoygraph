{"ver":"0.1","info":{"id":"md2czw","date":"1687541732","viewed":38,"name":"Simple FBM Shader","username":"rwalling","description":"Basic gradient based on fbm.\n\nAny suggestions are much appreciated. ","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["noise","gradient"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Noise from https://www.shadertoy.com/view/3dSBRh\n#define pi 3.141592653589793\n\n// Rotate a vec2\nvec2 rotate(vec2 vec, float rot)\n{\n    float s = sin(rot), c = cos(rot);\n    return vec2(vec.x*c-vec.y*s, vec.x*s+vec.y*c);\n}\n\n// Hash13 Hash without Sine: https://www.shadertoy.com/view/4djSRW\nfloat hash(vec2 p, float t)\n{\n    vec3 p3 = vec3(p, t);\n    p3  = fract(p3*0.1031);\n    p3 += dot(p3, p3.zyx+31.32);\n    return fract((p3.x+p3.y)*p3.z);\n}\n\n// manu210404's Improved Version\nfloat noise(vec2 p, float t)\n{\n    vec4 b = vec4(floor(p), ceil(p));\n    vec2 f = smoothstep(0.0, 1.0, fract(p));\n    return mix(mix(hash(b.xy, t), hash(b.zy, t), f.x), mix(hash(b.xw, t), hash(b.zw, t), f.x), f.y);\n}\n\n// Number of FBM Octaves\n#define num_octaves 16\n\n// Fractal Brownian Motion Noise\nfloat fbm(vec2 pos)\n{\n    float value = 0.0;\n    float scale = 1.0;\n    float atten = 0.5;\n    float t = 0.0;\n    for(int i = 0; i < num_octaves; i++)\n    {\n        t += atten;\n        value += noise(pos*scale, float(i))*atten;\n        scale *= 2.0;\n        atten *= 0.5;\n        pos = rotate(pos, 0.125*pi);\n        pos = rotate(pos, (iTime * .05) + 0.125 * pi);\n    }\n    return value/t;\n}\n\nvec3 palette( in float t)\n{\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 0.7, 0.4);\n    vec3 d = vec3(0.00, 0.15, 0.20);\n    \n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord + vec2(iTime)) / iResolution.xy;\n    \n    // Create and scale the fbm\n    float fbmValue = fbm(uv * 10.);\n\n    // Time varying pixel color\n    vec3 col = palette(fbmValue + (iTime * 0.2));\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}