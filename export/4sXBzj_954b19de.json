{"ver":"0.1","info":{"id":"4sXBzj","date":"1496878162","viewed":117,"name":"First test raymarching","username":"MatHack","description":"raymarching","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float MAX_DIST = 100.0;\nconst float EPSILON = 0.0001;\n\nfloat plane(vec3 pos){\n    return pos.y;\n}\n\nfloat sphere(vec3 pos, float radius){\n    return length(pos) - radius;\n}\n\nfloat repeat(float coord, float spacing) {\n    return mod(coord, spacing) - spacing*0.5;\n}\n\nvec2 scene(vec3 camPos){\n    float dist = 0.;\n    float materialID = 0.;\n    \n    vec3 q = vec3(camPos+vec3(0., -0.6, 0.));\n    q.x = repeat(q.x, sin(iTime)*0.5 + 1.5);\n    q.z = repeat(q.z, sin(iTime)*0.5 + 1.5);\n    \n    \n    float obj1 = sphere(q, 0.3);\n    float obj2 = plane(camPos);\n    \n    dist = obj1;\n    materialID = 1.0;\n    \n    if(obj2 < obj1){\n        dist = obj2;\n        materialID = 2.0;\n    }\n        \n    return vec2(dist, materialID);\n}\n\n\nmat3 setCamera(vec3 ro, vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\n\n\n\nvec2 trace(vec3 camPos, vec3 camTarget){\n    float td = 0.1;\n    float mat = -1.0;\n    \n    for(int i=0;i<1024;i++){\n        float pres = EPSILON * td;\n        vec2 result = scene(camPos + camTarget * td);\n        if(result.x < pres || td > MAX_DIST){\n           break;\n        }\n        td += result.x;  \n        mat = result.y;\n    }\n    \n    if(td>MAX_DIST){\n        mat = -1.0;\n    }\n    return vec2(td, mat);\n}\n\nvec3 calcNorm(vec3 pos){\n    vec2 eps = vec2(0.001, 0.0);\n    vec3 norm = vec3(\n        scene(pos+eps.xyy).x - scene(pos-eps.xyy).x,\n        scene(pos+eps.yxy).x - scene(pos-eps.yxy).x,\n        scene(pos+eps.yyx).x - scene(pos-eps.yyx).x);\n    return normalize(norm);\n        \n}\n\nfloat getReflect(vec3 ro, vec3 rd )\n{\n\tfloat res = 1.0;\n    float t = 0.02;\n    for( int i=0; i<16; i++ )\n    {\n\t\tfloat h = scene( ro + rd*t ).x;\n        res = min( res, 8.0*h/t );\n        t += clamp( h, 0.02, 0.10 );\n        if( h<0.001 || t>2.5 ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t\n    vec2 uv = (-iResolution.xy + 2.0*(fragCoord))/iResolution.y;\n    vec2 mo = iMouse.xy / iResolution.xy;\n    \n    vec3 outColor = vec3(0.);\n    \n    float time = iTime;\n    \n    vec3 camOrigin = vec3( -0.5+3.5*cos(0.1*time + 3.0*mo.x), 1.0 + 2.0*mo.y, 0.5 + 4.0*sin(0.1*time + 4.0*mo.x) );\n    vec3 camTarget = vec3( 0.0, 0.4, 0.0 );\n    mat3 ca = setCamera( camOrigin, camTarget, 0.0 );\n    vec3 camDir = ca * normalize( vec3(uv.xy,1.8) );\n    \n    vec3 lightDir = normalize(vec3(0.0, 1.0, 0.0));\n    \n    vec2 result = trace(camOrigin, camDir);\n    \n    vec3 pos = camOrigin + result.x * camDir;\n    \n    vec3 norm = calcNorm(pos);\n    float dif = clamp( dot( norm, lightDir ), 0.0, 1.0 );\n    float amb = clamp( 0.5+0.5*norm.y, 0.0, 1.0 );\n    vec3 ref = reflect(camDir, norm);    \n    float dom = smoothstep(-0.1, 0.1, ref.y);\n    dom *= getReflect(pos, ref);\n    \n    vec3 matColor = vec3(0.);\n    if(result.y == 1.0){\n        vec3 col = vec3(0.9, 0.2, 0.2);\n        \n        vec3 lin = vec3(0.);\n        lin += 1.3 * dif;\n        lin += 0.8 * amb;\n        lin += 0.5 * dom;\n        \n        col = col * lin;\n        matColor = col;\n        \n       \n    }\n    \n    if(result.y == 2.0){\n        vec3 f = vec3(mod(floor(pos.x*5.)+floor(pos.z*5.), 2.));\n        vec3 color = 0.4 + 0.3*f*vec3(0.5);\n     \n        vec3 fl = texture(iChannel0, pos.xz).rgb;\n\n        \n        vec3 lin = vec3(0.);\n        lin += 1.2 * dif;\n        lin += 0.5 * dom;\n        \n        color = color * lin;\n        \n        matColor = vec3(color);\n    }\n   \t\n    float fogAmount = exp( -(clamp(pos.y-300.0, 0.0, 300000000.0))* 0.01 );\n \n\toutColor = mix(vec3(1.), matColor, fogAmount);\n    \n\tfragColor = vec4(outColor ,1.0);\n}","name":"Image","description":"","type":"image"}]}