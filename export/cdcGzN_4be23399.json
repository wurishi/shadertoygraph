{"ver":"0.1","info":{"id":"cdcGzN","date":"1677275710","viewed":171,"name":"card castle but in shadertoy","username":"bward194","description":"please dont look in the code you will cry tears of blood looking at it\nalso if fabrice or some other nice person stumbles across and golfs this that would be nice\nthe first part is still unfinished but i think this is good enough\ncode credits in Common","likes":6,"published":1,"flags":40,"usePreview":0,"tags":["music","deltarune"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = texture(iChannel0,uv).xyz;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"\nvec2 mainSound( int samp, float time )\n{\nvec2 outpute=music(time);\n    return outpute;//vec2( float(bytebeat&0xff - 128) / 128. );\n} ","name":"Sound","description":"","type":"sound"},{"inputs":[],"outputs":[],"code":"//Credits:\n//Square waves: https://www.shadertoy.com/view/XtlSD7\n//Triangle waves: https://www.shadertoy.com/view/clXSR7\n//Panning function: https://www.shadertoy.com/view/Mt2GDz\n//Spectrogram function: https://www.shadertoy.com/view/Xt2yzd\n//Vibrato: https://www.shadertoy.com/view/4slSD2\n#define pi acos(-1.)\n#define C 523.251130601/2.\n#define detune .4\n\nfloat semcv(float inp){\nreturn pow(2.,((inp)+detune)/12.)*C;}\nfloat sanything( float f, float x, float y)\n{\ny*=4.;\ny+=4.;\n    return round(floor( (y * floor( f * x ) - floor( y * f * x ) + 1.0 ))*8.)/8.;\n}\n\nfloat s25( float f, float x )\n{\n    return floor( 4.0 * floor( f * x ) - floor( 4.0 * f * x ) + 1.0 );\n}\n\nfloat s50( float f, float x )\n{\n    return floor( 2.0 * floor( f * x ) - floor( 2.0 * f * x ) + 1.0 );\n}\nfloat waveTriangle(float freq, float time, bool crush) {\nif (crush=true){\n    return round((abs(fract(freq * time - .25) - 0.5) * 4.0 - 1.0)*8.)/8.;\n}\nelse{\nreturn (abs(fract(freq * time - 0.25) - 0.5) * 4.0 - 1.0);\n}\n}\nvec2 pan(float inst, float amount)\n{\n    amount = (amount + 1.0) / 2.0;\n    return vec2(inst * (1.0 - amount), inst * amount);\n}\nfloat makeSineVibrato(float time, float amt)\n{\n    return ((waveTriangle(6.57894736842,time,false) + 1.0) / 2.0) * amt+1.;\n}\n\nint inii=3;\nconst int melody[] = int[](0,-16777216,3,3,6,6,7,7,7,7,7,7,7,7,-16777216,-16777216,0,\n-16777216,3,3,6,6,7,7,7,7,12,12,7,7,7,7,12,12,7,7,3,3,6,6,6,6,6,6,6,6,6,6,6,6,\n6,6,4,3,2,2,2,2,2,2,2,2,6,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,-16777216,-16777216,-2,-2,1,1,4,\n4,5,5,5,5,10,10,5,5,5,5,10,10,5,5,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,\n8,8,8,8,8,8,8,7,7,7,7,7,7,7,7,-16777216,-16777216,0,-16777216,3,3,6,6,7,7,7,7,12,12,7,7,\n7,7,12,12,7,7,3,3,6,6,6,6,6,6,6,6,6,6,6,6,6,6,4,3,2,2,2,2,2,2,2,2,6,6,6,6,6,6,6,6,5,5,5,\n5,5,5,5,5,-16777216,-16777216,-2,-2,1,1,4,4,5,5,5,5,10,10,5,5,5,5,10,10,5,5,1,1,0,0,0,0,\n0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,8,8,8,8,8,8);\n\nconst int harmony[] = int[](0,-16777216,5,-16777216,7,-16777216,8,8,8,8,8,8,8,8,8,\n8,0,-16777216,5,-16777216,7,-16777216,8,8,8,8,8,8,7,6,5,5,5,5,8,8,8,8,7,7,7,7,7,7,7,7,7,7,\n-1,-1,4,4,6,6,7,7,7,7,7,7,6,5,4,4,4,4,7,7,7,7,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,-2,-2,3,\n3,5,5,6,6,6,6,6,6,8,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4,8,8,8,8,8,8,8,8,8,\n8,0,-16777216,5,-16777216,7,-16777216,8,8,8,8,8,8,7,6,5,5,5,5,8,8,8,8,7,7,7,7,7,7,7,7,7,7,\n-1,-1,4,4,6,6,7,7,7,7,7,7,6,5,4,4,4,4,7,7,7,7,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,-2,-2,3,\n3,5,5,6,6,6,6,6,6,8,6,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,4,4,4,4,4,4,4,4);\nconst int tmul[]= int[](0,0,1,0,1,0,0,0,1,0,1,0,1,0,0,0);\nconst int tribass1[] = int[](-16777216,7,9,7,-16777216,7,9,7,-16777216,6,10,6,-16777216,\n6,10,6,-16777216,5,9,5,-16777216,5,9,5,-16777216,4,6,4,-16777216,4,6,9);\nconst int tribass2[] = int[](0,0,-1,-1,-2,-2,-3,-1);\nconst int start1[] = int[](-16777216,-16777216,-16777216,-16777216,0,1,1,-16777216,4,1,1,-16777216,0,1,3,4,0,1,1,-16777216,0,1,1,-16777216,4,1,1,-16777216,0,1,3,4,9,6,6);\nconst int start2[] = int[](-16777216,-16777216,-16777216,-16777216,0,1,1,-16777216,4,1,1,-16777216,0,1,3,4,0,1,1,-16777216,0,1,1,-16777216,4,1,1,-16777216,0,1,3,4,9,5,5);\nvec2 ddd(float time)\n{\nfloat burger=(1.-min(abs(float(melody[int((time)/0.48*4.)]-melody[int((time-0.034)/0.48*4.)])),1.));\nfloat burger2=(1.-min(abs(float(melody[int((time)/0.48*4.)]-melody[int((time-0.272)/0.48*4.)])),1.));\nfloat time2=time;\ntime2*=makeSineVibrato(time-0.75,(burger2/time)*0.00022675736);\n\nvec2 outpute=vec2(0.05,0.05)*vec2(sanything(semcv(float(melody[int((time2)/0.48*4.)]-6))*3.14,time2,burger));\n\noutpute+=vec2(0.25,0.25)*vec2(waveTriangle(semcv(float(harmony[int((time2)/0.48*4.)]-11))*3.14,time,true));\noutpute*=clamp(ceil(time2),0.,1.);\n\nreturn outpute;}\n\nvec2 music(float time)\n{\n//time-=30.;\ntime=mod(time,32.15+29.25);\ntime-=29.25;\nvec2 outpute=vec2(0.333)*round(mod(time*2./0.48,1.))*round(mod(time*.5/0.48,1.))*round(mod(time*.25/0.48,1.))*vec2(waveTriangle(semcv(-22.),time,true));\n//outpute+=vec2(0.05,0.05)*sanything(semcv(float(int(time/0.48*4.)%2)-7.),time,1.)*(mod(time+4./0.48/8.,2.))*float(tmul[int((time+32.)/0.48/4.)]);\n//(0.2*(5.-min(abs(float(start1[int((time+30.)/0.113)]-start1[int(((time-0.113)+30.)/0.113)])),4.)))*\n\nif (time>0.72){\ntime-=.72;\n//outpute=vec2(0.05,0.05)*vec2(sanything(semcv(float(melody[int((time)/0.48*4.)]-6))*3.14,time,(1.-min(abs(float(melody[int((time)/0.48*4.)]-melody[int((time-0.034)/0.48*4.)])),1.))));\noutpute=vec2(0.2,0.2)*vec2(waveTriangle(semcv(float(tribass1[int((time-0.72)/0.48)%32]-10-24))*3.14,time,true))*min(round(time/0.48/3.),1.);\n//outpute+=vec2(0.25,0.25)*vec2(waveTriangle(semcv(float(harmony[int((time)/0.48*4.)]-11))*3.14,time));\noutpute+=vec2(0.2,0.2)*vec2(waveTriangle(semcv(float(tribass2[int((time-0.72)/0.48*.25)%8]-10-24))*3.14,time,true))*min(round(time/0.48/3.),1.);\nfor (int i = 1;i<10;i++){\noutpute+=pan(float(ddd(time-(float(i-1)/.48*.125))/(pow(float(i),2.5))),min(float(i-1),1.)*0.5*((2.*float(i%2))-1.));}\n}\nif ( time<0.75){\nfloat mult=(time-time*max(min(abs(float(start1[int((time+32.05)/0.48*.5)])-float(start1[int((time+32.05-.113*3.)/0.48*.5)])),1.),0.))/time;\noutpute+=vec2(0.03,0.03)*vec2(sanything(semcv(float(start2[int((time+32.05)/0.48*.5)]-28))*3.14,time,-3.));\noutpute+=vec2(0.05,0.05)*vec2(waveTriangle(semcv(float(start2[int((time+32.05)/0.48*.5)]-28))*3.14,time,true));\noutpute+=vec2(0.03,0.03)*vec2(sanything(semcv(float(start1[int((time+32.05)/0.48*.5)]-24))*3.14,time,-3.));}\n\n//int t=int(time*8000.);\n//int bytebeat= (t>>10^t>>11)%5*((t>>14&3^t>>15&1)+1)*t%99+((3+(t>>14&3)-(t>>16&1))/3*t%99&64); //(t^t%255);\n    // A 440 Hz wave that attenuates quickly overt time\n    return outpute;//vec2( float(bytebeat&0xff - 128) / 128. );\n} \n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec2 spectrogram(float windowmax, float time, float freq) {\n    vec2 sum = vec2(0.);\n    float window = windowmax;\n    float samplerate = iSampleRate/6.;\n    for (float trel = -window; trel <= window; trel+=1./samplerate) {\n        // Cosine window\n        float w = (0.5+0.5*cos(trel/window*pi))/samplerate/window;\n        float samp = dot(vec2(1.),music(time+trel));\n        sum += w*vec2(cos(trel*freq*2.*pi),sin(trel*2.*freq*pi))*samp;\n    }\n    return sum;\n}\nvoid panImage( out vec4 f, float time, float y ) {\n    float freq = 4000. * y / iResolution.y;\n    f.rgb = 5.*vec3(10.)*\n    length(spectrogram(0.1*sqrt(freq/4000.), time, freq));\n}\nconst float timescale = 1./4.;\nvoid mainImage( out vec4 f, in vec2 df )\n{\n    ivec2 d = ivec2(df);\n    vec2 fsf = iResolution.xy;\n    ivec2 fs = ivec2(fsf);\n    int shift = int(fsf.x*timescale*(iTime));\n    int shiftlast = int(fsf.x*timescale*(iTime-iTimeDelta));\n    int delta = shift - shiftlast;\n    if ((fs.x-d.x) <= delta) {\n        #ifdef FRAMEDEBUGVIS\n        if (d.y<10) { f = vec4(0,iFrame%2,0,0); return; }\n        #endif\n        float time = float(shift-fs.x+d.x)/timescale/fsf.x;\n        panImage(f, time, df.y);\n    } else {\n        f = texelFetch(iChannel0,d+ivec2(delta,0),0);\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}