{"ver":"0.1","info":{"id":"3tXSWS","date":"1567093154","viewed":243,"name":"Wake Up","username":"baktery","description":"I made a new song, few days later I created some synchronized visuals using shadertoy. The result is a kind of demo-videoclip based on the song.\n\nVideo: https://youtu.be/dJxoZorgYjQ\n\nThanks to iq and pol for creating shadertoy, it's an amazing tool!\n\n","likes":2,"published":1,"flags":64,"usePreview":1,"tags":["2d","music","soundcloud","videoclip"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4tf3WS","filepath":"https://soundcloud.com/vaktry/wake-up","previewfilepath":"https://soundcloud.com/vaktry/wake-up","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// License CC BY-NC (https://creativecommons.org/licenses/by-nc/4.0/)\n\n// \"Wake Up\" by baktery\n\n////////////////////////////////////////////////////////////////\n// IMPORTANT:\n\n// MUSIC LOAD FAILED message appears and visuals not working??\n\n// Then try to reload the page. Sometimes Soundcloud \n// fails and the first input channel (music) does not \n// start playing\n\n// Visuals-Audio sync is done using music playing position\n// so music playing is needed.\n \n// If music does not work and you want to see the visuals\n// without music, set the folowing variable to false\n// and rebuild the shader\nbool g_syncWithMusic = true;\n////////////////////////////////////////////////////////////////\n\n\n\n////////////////////////////////////\n// Globals\nvec2 g_uv;\nfloat g_time;\nvec2 g_uvPrim;\n\n////////////////////////////////////\n// Beats\nconst int BEAT_QUARTER = 0;\nconst int BEAT_HALF = 1;\nconst int BEAT_1 = 2;\nconst int BEAT_2 = 3;\nconst int BEAT_4 = 4;\nconst int BEAT_8 = 5;\nconst int BEAT_16 = 6;\nconst int BEAT_32 = 7;\nconst int BEAT_64 = 8;\nconst int BEAT_128 = 9;\nconst int MAX_BEAT_REMAINDERS = 10;\nfloat g_beatRemainders[MAX_BEAT_REMAINDERS];\nfloat g_br;\nfloat g_beat;\nint g_beatPattern;\nint g_beatPatternTick;\nfloat g_bp;\nint g_defaultEffectBeat = BEAT_1;\n\nvoid SetEffectBeat(int beat)\n{\n    g_br = g_beatRemainders[beat];\n}\n\n////////////////////////////////////\n// Utils\nfloat Rand(vec2 uv)\n{\n    return fract(sin(dot(uv ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvec3 RGB2HSV(vec3 c)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\nvec3 HSV2RGB(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvec2 Rotate(vec2 v, float a) \n{\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\tmat2 m = mat2(c, -s, s, c);\n\treturn m * v;\n}\n\n////////////////////////////////////\n// Primitives\nfloat Square(vec2 p, float size)\n{\n    p += g_uvPrim;\n    p = abs(p)-size;\n    return max(p.x,p.y) > 0.0 ? -1.0 : 1.0;   \n}\n\n\nfloat Rect(vec2 p, vec2 size)\n{\n    p += g_uvPrim;\n    p = abs(p)-size;\n    return max(p.x,p.y) > 0.0 ? -1.0 : 1.0;   \n}\n\nfloat Circle(vec2 p, float r)\n{\n    p += g_uvPrim;\n\treturn sqrt(p.x*p.x+p.y*p.y)-r  > 0.0 ? -1.0 : 1.0;\n}\n\n\n/////////////////////////////////////\n// Font Characters\nconst int CHAR_0[5*5] = int[](\t0,1,1,0,0,\n    \t       \t\t\t\t\t1,0,0,1,0,\n\t    \t \t\t\t\t\t1,0,0,1,0,\n        \t\t\t\t\t\t1,0,0,1,0,\n        \t\t\t\t\t\t0,1,1,0,0 );\n\nconst int CHAR_1[5*5] = int[](\t1,1,0,0,0,\n    \t       \t\t\t\t\t0,1,0,0,0,\n\t    \t \t\t\t\t\t0,1,0,0,0,\n        \t\t\t\t\t\t0,1,0,0,0,\n        \t\t\t\t\t\t0,1,0,0,0 );\n\nconst int CHAR_2[5*5] = int[](\t1,1,1,1,0,\n    \t       \t\t\t\t\t0,0,0,1,0,\n\t    \t \t\t\t\t\t1,1,1,1,0,\n        \t\t\t\t\t\t1,0,0,0,0,\n        \t\t\t\t\t\t1,1,1,1,0 );\n\nconst int CHAR_9[5*5] = int[](\t1,1,1,1,0,\n    \t       \t\t\t\t\t1,0,0,1,0,\n\t    \t \t\t\t\t\t1,1,1,1,0,\n        \t\t\t\t\t\t0,0,0,1,0,\n        \t\t\t\t\t\t1,1,1,1,0 );\n\nconst int CHAR_A[5*5] = int[](\t1,1,1,1,0,\n    \t       \t\t\t\t\t1,0,0,1,0,\n\t    \t \t\t\t\t\t1,1,1,1,0,\n        \t\t\t\t\t\t1,0,0,1,0,\n        \t\t\t\t\t\t1,0,0,1,0 );\n\nconst int CHAR_B[5*5] = int[](\t1,1,1,0,0,\n    \t       \t\t\t\t\t1,0,0,1,0,\n\t    \t \t\t\t\t\t1,1,1,0,0,\n        \t\t\t\t\t\t1,0,0,1,0,\n        \t\t\t\t\t\t1,1,1,0,0 );\n\nconst int CHAR_C[5*5] = int[](\t1,1,1,1,0,\n    \t       \t\t\t\t\t1,0,0,0,0,\n\t    \t \t\t\t\t\t1,0,0,0,0,\n        \t\t\t\t\t\t1,0,0,0,0,\n       \t\t\t\t\t\t\t1,1,1,1,0 );\n\nconst int CHAR_D[5*5] = int[](\t1,1,1,0,0,\n    \t       \t\t\t\t\t1,0,0,1,0,\n\t    \t \t\t\t\t\t1,0,0,1,0,\n        \t\t\t\t\t\t1,0,0,1,0,\n       \t\t\t\t\t\t\t1,1,1,0,0 );\n\nconst int CHAR_E[5*5] = int[](\t1,1,1,1,0,\n    \t       \t\t\t\t\t1,0,0,0,0,\n\t    \t \t\t\t\t\t1,1,1,0,0,\n        \t\t\t\t\t\t1,0,0,0,0,\n        \t\t\t\t\t\t1,1,1,1,0 );\n\nconst int CHAR_F[5*5] = int[](\t1,1,1,1,0,\n    \t       \t\t\t\t\t1,0,0,0,0,\n\t    \t \t\t\t\t\t1,1,1,0,0,\n        \t\t\t\t\t\t1,0,0,0,0,\n        \t\t\t\t\t\t1,0,0,0,0 );\n\nconst int CHAR_H[5*5] = int[](\t1,0,0,1,0,\n    \t       \t\t\t\t\t1,0,0,1,0,\n\t    \t \t\t\t\t\t1,1,1,1,0,\n        \t\t\t\t\t\t1,0,0,1,0,\n       \t\t\t\t\t\t\t1,0,0,1,0 );\n\nconst int CHAR_I[5*5] = int[](\t1,1,1,0,0,\n    \t       \t\t\t\t\t0,1,0,0,0,\n\t    \t \t\t\t\t\t0,1,0,0,0,\n        \t\t\t\t\t\t0,1,0,0,0,\n       \t\t\t\t\t\t\t1,1,1,0,0 );\n\nconst int CHAR_L[5*5] = int[](\t1,0,0,0,0,\n    \t       \t\t\t\t\t1,0,0,0,0,\n\t    \t \t\t\t\t\t1,0,0,0,0,\n        \t\t\t\t\t\t1,0,0,0,0,\n       \t\t\t\t\t\t\t1,1,1,1,0 );\n\nconst int CHAR_M[5*5] = int[](\t1,0,0,0,1,\n    \t       \t\t\t\t\t1,1,0,1,1,\n\t    \t \t\t\t\t\t1,0,1,0,1,\n        \t\t\t\t\t\t1,0,0,0,1,\n       \t\t\t\t\t\t\t1,0,0,0,1 );\n\nconst int CHAR_N[5*5] = int[](\t1,0,0,1,0,\n    \t       \t\t\t\t\t1,1,0,1,0,\n\t    \t \t\t\t\t\t1,0,1,1,0,\n        \t\t\t\t\t\t1,0,0,1,0,\n       \t\t\t\t\t\t\t1,0,0,1,0 );\n\nconst int CHAR_K[5*5] = int[](\t1,0,0,1,0,\n    \t       \t\t\t\t\t1,0,1,0,0,\n\t    \t \t\t\t\t\t1,1,0,0,0,\n        \t\t\t\t\t\t1,0,1,0,0,\n       \t\t\t\t\t\t\t1,0,0,1,0 );\n\nconst int CHAR_O[5*5] = int[](\t1,1,1,1,0,\n    \t       \t\t\t\t\t1,0,0,1,0,\n\t    \t \t\t\t\t\t1,0,0,1,0,\n        \t\t\t\t\t\t1,0,0,1,0,\n       \t\t\t\t\t\t\t1,1,1,1,0 );\n\nconst int CHAR_P[5*5] = int[](\t1,1,1,1,0,\n    \t       \t\t\t\t\t1,0,0,1,0,\n\t    \t \t\t\t\t\t1,1,1,1,0,\n        \t\t\t\t\t\t1,0,0,0,0,\n        \t\t\t\t\t\t1,0,0,0,0 );\n\nconst int CHAR_R[5*5] = int[](\t1,1,1,1,0,\n    \t       \t\t\t\t\t1,0,0,1,0,\n\t    \t \t\t\t\t\t1,1,1,1,0,\n        \t\t\t\t\t\t1,0,1,0,0,\n        \t\t\t\t\t\t1,0,0,1,0 );\n\nconst int CHAR_S[5*5] = int[](\t1,1,1,1,0,\n    \t       \t\t\t\t\t1,0,0,0,0,\n\t    \t \t\t\t\t\t1,1,1,1,0,\n        \t\t\t\t\t\t0,0,0,1,0,\n       \t\t\t\t\t\t\t1,1,1,1,0 );\n\nconst int CHAR_T[5*5] = int[](\t1,1,1,1,1,\n    \t       \t\t\t\t\t0,0,1,0,0,\n\t    \t \t\t\t\t\t0,0,1,0,0,\n        \t\t\t\t\t\t0,0,1,0,0,\n        \t\t\t\t\t\t0,0,1,0,0 );\n\nconst int CHAR_U[5*5] = int[](\t1,0,0,1,0,\n    \t       \t\t\t\t\t1,0,0,1,0,\n\t    \t \t\t\t\t\t1,0,0,1,0,\n        \t\t\t\t\t\t1,0,0,1,0,\n        \t\t\t\t\t\t1,1,1,1,0 );\n\nconst int CHAR_W[5*5] = int[](\t1,0,0,0,1,\n    \t       \t\t\t\t\t1,0,1,0,1,\n\t    \t \t\t\t\t\t1,0,1,0,1,\n        \t\t\t\t\t\t1,0,1,0,1,\n        \t\t\t\t\t\t0,1,1,1,0 );\n\nconst int CHAR_Y[5*5] = int[](\t1,0,0,1,0,\n    \t       \t\t\t\t\t1,0,0,1,0,\n\t    \t \t\t\t\t\t1,1,1,1,0,\n        \t\t\t\t\t\t0,0,0,1,0,\n        \t\t\t\t\t\t1,1,1,1,0 );\n\n////////////////////////////////////\n// Font primitives\nfloat FontChar(const int CHAR[5*5], vec2 pos, float size)\n{\n    float c = 1.0;\n    \n   \tpos += vec2(-0.5,-0.5)*size*0.5;\n    \n    int amount = 0;\n    for ( int y = 0 ; y < 5 ; ++y )\n    {\n        for ( int x = 0 ; x < 5 ; ++x )\n        {\n            if ( CHAR[y*5+x] != 0 )\n            {\n    \t\t\tc *= Square(pos+vec2(float(x)*(size/5.0),float(y)*(size/5.0)), size/(5.0*2.0));\n                ++amount;\n            }\n        }\n    }\n    \n    if ( (amount&1) != 0 )\n    {\n        c *= -1.0;\n    }\n    \n    \n    return c;\n}\n\n////////////////////////////////////\n// Texts\nfloat TextWake(float size)\n{\n    float c = 1.0;\n    \n    float SIZE = size;\n    \n    c *= FontChar(CHAR_W,vec2(-1.65*SIZE,0),SIZE);\n    c *= FontChar(CHAR_A,vec2(-0.4*SIZE,0),SIZE);\n    c *= FontChar(CHAR_K,vec2(0.6*SIZE,0),SIZE);\n    c *= FontChar(CHAR_E,vec2(1.6*SIZE,0),SIZE);\n    \n    return c;\n}\n\nfloat TextUp(float size)\n{\n    float c = 1.0;\n \n    float SIZE = size;\n    \n    c *= FontChar(CHAR_U,vec2(-0.5*SIZE,0),SIZE);\n    c *= FontChar(CHAR_P,vec2(0.5*SIZE,0),SIZE);\n    \n    return c;\n}\n\nfloat TextCredits(float size)\n{\n    float c = 1.0;\n    \n    float SIZE = size;\n    \n    float x = -0.47 * (iResolution.x/iResolution.y) / SIZE;\n    float y = 0.44;\n    \n    c *= FontChar(CHAR_B,vec2(x*SIZE,y),SIZE);\n    x += 1.0;\n    c *= FontChar(CHAR_A,vec2(x*SIZE,y),SIZE);\n    x += 1.0;\n    c *= FontChar(CHAR_K,vec2(x*SIZE,y),SIZE);\n    x += 0.9;\n    c *= FontChar(CHAR_T,vec2(x*SIZE,y),SIZE);\n    x += 1.1;\n    c *= FontChar(CHAR_E,vec2(x*SIZE,y),SIZE);\n    x += 1.0;\n    c *= FontChar(CHAR_R,vec2(x*SIZE,y),SIZE);\n    x += 1.0;\n    c *= FontChar(CHAR_Y,vec2(x*SIZE,y),SIZE);\n    x += 1.0;\n\n    x += 1.0;\n    \n    c *= FontChar(CHAR_2,vec2(x*SIZE,y),SIZE);\n    x += 1.0;\n    c *= FontChar(CHAR_0,vec2(x*SIZE,y),SIZE);\n    x += 1.0;\n    c *= FontChar(CHAR_1,vec2(x*SIZE,y),SIZE);\n    x += 0.6;\n    c *= FontChar(CHAR_9,vec2(x*SIZE,y),SIZE);\n    x += 1.0;\n    \n    return c;\n}\n\nfloat TextNoMusic(float size)\n{\n    float c = 1.0;\n    \n    float SIZE = size;\n    \n    float x = -0.47 * (iResolution.x/iResolution.y) / SIZE;\n    float y = 0.44;\n  \n    c *= FontChar(CHAR_M,vec2(x*SIZE,y),SIZE);\n    x += 1.2;\n    c *= FontChar(CHAR_U,vec2(x*SIZE,y),SIZE);\n    x += 1.0;\n    c *= FontChar(CHAR_S,vec2(x*SIZE,y),SIZE);\n    x += 1.0;\n    c *= FontChar(CHAR_I,vec2(x*SIZE,y),SIZE);\n    x += 1.0;\n    c *= FontChar(CHAR_C,vec2(x*SIZE,y),SIZE);\n    x += 1.0;\n\n    x += 0.6;\n    \n    c *= FontChar(CHAR_L,vec2(x*SIZE,y),SIZE);\n    x += 1.0;\n    c *= FontChar(CHAR_O,vec2(x*SIZE,y),SIZE);\n    x += 1.0;\n    c *= FontChar(CHAR_A,vec2(x*SIZE,y),SIZE);\n    x += 1.0;\n    c *= FontChar(CHAR_D,vec2(x*SIZE,y),SIZE);\n    x += 1.0;\n    \n    x += 0.6;\n    \n    c *= FontChar(CHAR_F,vec2(x*SIZE,y),SIZE);\n    x += 1.0;\n    c *= FontChar(CHAR_A,vec2(x*SIZE,y),SIZE);\n    x += 1.0;\n    c *= FontChar(CHAR_I,vec2(x*SIZE,y),SIZE);\n    x += 1.0;\n    c *= FontChar(CHAR_L,vec2(x*SIZE,y),SIZE);\n    x += 1.0;\n    c *= FontChar(CHAR_E,vec2(x*SIZE,y),SIZE);\n    x += 1.0;\n    c *= FontChar(CHAR_D,vec2(x*SIZE,y),SIZE);\n    x += 1.0;\n    \n    return c;\n}\n\n\n/*float TextSound(float size)\n{\n    float c = 1.0;\n    \n    float SIZE = size;\n    \n    float x = -0.47 * (iResolution.x/iResolution.y) / SIZE;\n    float y = 0.44;\n\n    c *= FontChar(CHAR_T,vec2(x*SIZE,y),SIZE);\n    x += 1.05;\n    c *= FontChar(CHAR_U,vec2(x*SIZE,y),SIZE);\n    x += 1.0;\n    c *= FontChar(CHAR_R,vec2(x*SIZE,y),SIZE);\n    x += 1.0;\n    c *= FontChar(CHAR_N,vec2(x*SIZE,y),SIZE);\n    x += 1.0;\n\n    x += 0.6;\n    \n    c *= FontChar(CHAR_O,vec2(x*SIZE,y),SIZE);\n    x += 1.0;\n    c *= FontChar(CHAR_N,vec2(x*SIZE,y),SIZE);\n    x += 1.0;\n\n    x += 0.6;\n    \n    c *= FontChar(CHAR_S,vec2(x*SIZE,y),SIZE);\n    x += 1.0;\n    c *= FontChar(CHAR_O,vec2(x*SIZE,y),SIZE);\n    x += 1.0;\n    c *= FontChar(CHAR_U,vec2(x*SIZE,y),SIZE);\n    x += 1.0;\n    c *= FontChar(CHAR_N,vec2(x*SIZE,y),SIZE);\n    x += 1.0;\n    c *= FontChar(CHAR_D,vec2(x*SIZE,y),SIZE);\n    x += 1.0;\n        \n    return c;\n}*/\n\n\n//////////////////////////\n// Logo\nstruct DrawLogoOutput\n{\n    float \tsl;\n    float\tslm;\n};\n\nconst int LOGO_MOUTH_DEFAULT = 0;\nconst int LOGO_MOUTH_O = 1;\nconst int LOGO_MOUTH_A = 2;\nconst int LOGO_MOUTH_E = 3;\nconst int LOGO_MOUTH_NONE = 4;\nint g_logoMouth = LOGO_MOUTH_DEFAULT;\n\nconst int LOGO_EVOLUTION_0 = 0;\nconst int LOGO_EVOLUTION_1 = 1;\nconst int LOGO_EVOLUTION_2 = 2;\nint g_logoEvolution = LOGO_EVOLUTION_0;\n    \nDrawLogoOutput DrawLogo(float x, float y, float size, float r, DrawLogoOutput o)\n{   \n    g_logoEvolution = LOGO_EVOLUTION_2;\n    \n    /*g_logoEvolution = LOGO_EVOLUTION_0;\n    \n    if ( g_beatPattern >= 61 && g_beatPattern < 67)\n    {\n        if ( Rand(vec2(x*10.0+y,float(g_beatPatternTick))) > 0.5 )\n        {\n            g_logoEvolution = LOGO_EVOLUTION_1;\n        }\n    }    \n    if ( g_beatPattern >= 67 )\n    {\n        g_logoEvolution = LOGO_EVOLUTION_1;\n    }\n    \n    if ( g_beatPattern >= 101 && g_beatPattern < 107)\n    {\n        if ( Rand(vec2(x*10.0+y,float(g_beatPatternTick))) > 0.5 )\n        {\n            g_logoEvolution = LOGO_EVOLUTION_2;\n        }\n    }*/\n    \n    if ( g_beatPattern >= 107 )\n    {\n        g_logoEvolution = LOGO_EVOLUTION_2;\n    }\n    \n    float v = -Circle(vec2(x,y),(0.4+r)*size);\n\n    float v2 = 1.0;\n\n    if ( g_logoEvolution == LOGO_EVOLUTION_0)\n    {\n    \tv2 = -Circle(vec2(x,y)+vec2(-0.0,-0.77)*size,(0.6+r)*size);\n    }\n    else    \n    {\n        v2 = -Circle(vec2(x,y)+vec2(0.48,-0.10)*size,(0.2+r)*size);\n\n        // Head inside circles\n        if ( v2 > 0.0 )                    \n        {\n            v2 = -Circle(vec2(x,y)+vec2(-0.48,-0.10)*size,(0.2+r)*size);\n        }\n\n        if ( v2 > 0.0 )                    \n        {\n            v2 = -Circle(vec2(x,y)+vec2(-0.0,-0.37)*size,(0.2+r)*size);\n        }\n    }\n    \n\n    // Eyes\n    for ( int i = 0 ; i < 2 ; ++i )\n    {\n        vec2 p = vec2(0.14,0.05)*size;\n        \n        if (g_logoEvolution != LOGO_EVOLUTION_2 )\n        {\n            p += vec2(0.0,-0.05)*size;\n        }\n        if ( i == 1 )\n        {\n            p.x = -p.x;\n        }\n        if ( v2 > 0.0 )                    \n        {\n            v2 = -Square(p+vec2(x,y)+vec2(0.0,0.0)*size,(0.03+r)*size);\n        }\n        if ( v2 > 0.0 )                    \n        {\n            v2 = -Square(p+vec2(x,y)+vec2(0.0,0.04)*size,(0.03+r)*size);\n        }\n        if ( v2 > 0.0 )                    \n        {\n            v2 = -Square(p+vec2(x,y)+vec2(0.0,-0.04)*size,(0.03+r)*size);\n        }\n        if (g_logoEvolution == LOGO_EVOLUTION_2)\n        {\n            if ( v2 > 0.0 )                    \n            {\n                v2 = -Square(p+vec2(x,y)+vec2(0.04,0.0)*size,(0.03+r)*size);\n            }\n            if ( v2 > 0.0 )                    \n            {\n                v2 = -Square(p+vec2(x,y)+vec2(-0.04,0.0)*size,(0.03+r)*size);\n            }\n        }\n    }\n\n    // Mouth\n    {\n        float mx = x;\n        float my = y + 0.01;\n        \n        if ( g_logoMouth == LOGO_MOUTH_DEFAULT )\n        {\n            if ( v2 > 0.0 )                    \n            {\n                v2 = -Square(vec2(mx,my)+vec2(0.0,0.24)*size,(0.03+r)*size);\n            }\n            if ( v2 > 0.0 )                    \n            {\n                v2 = -Square(vec2(mx,my)+vec2(-0.04,0.24)*size,(0.03+r)*size);\n            }\n            if ( v2 > 0.0 )                    \n            {\n                v2 = -Square(vec2(mx,my)+vec2(0.04,0.24)*size,(0.03+r)*size);\n            }\n            if ( v2 > 0.0 )                    \n            {\n                v2 = -Square(vec2(mx,my)+vec2(-0.08,0.24)*size,(0.03+r)*size);\n            }\n            if ( v2 > 0.0 )                    \n            {\n                v2 = -Square(vec2(mx,my)+vec2(0.08,0.24)*size,(0.03+r)*size);\n            }\n        }\n        else if (g_logoMouth == LOGO_MOUTH_O)\n        {\n\n            if ( v2 > 0.0 )                    \n            {\n                v2 = -Square(vec2(mx,my)+vec2(0.0,0.24)*size,(0.03+r)*size);\n            }\n\n            if ( v2 > 0.0 )                    \n            {\n                v2 = -Square(vec2(mx,my)+vec2(0.0,0.44)*size,(0.03+r)*size);\n            }            \n        }\n        else if (g_logoMouth == LOGO_MOUTH_A)\n        {\n\n            if ( v2 > 0.0 )                    \n            {\n                v2 = -Square(vec2(mx,my)+vec2(0.0,0.24)*size,(0.03+r)*size);\n            }\n\n            if ( v2 > 0.0 )                    \n            {\n                v2 = -Square(vec2(mx,my)+vec2(0.04,0.24)*size,(0.03+r)*size);\n            }\n\n            if ( v2 > 0.0 )                    \n            {\n                v2 = -Square(vec2(mx,my)+vec2(-0.04,0.24)*size,(0.03+r)*size);\n            }\n            \n\n            if ( v2 > 0.0 )                    \n            {\n                v2 = -Square(vec2(mx,my)+vec2(0.0,0.28)*size,(0.03+r)*size);\n            }\n\n            if ( v2 > 0.0 )                    \n            {\n                v2 = -Square(vec2(mx,my)+vec2(0.04,0.28)*size,(0.03+r)*size);\n            }\n\n            if ( v2 > 0.0 )                    \n            {\n                v2 = -Square(vec2(mx,my)+vec2(-0.04,0.28)*size,(0.03+r)*size);\n            }\n\n            \n            if ( v2 > 0.0 )                    \n            {\n                v2 = -Square(vec2(mx,my)+vec2(0.0,0.20)*size,(0.03+r)*size);\n            }\n\n            if ( v2 > 0.0 )                    \n            {\n                v2 = -Square(vec2(mx,my)+vec2(0.04,0.20)*size,(0.03+r)*size);\n            }\n\n            if ( v2 > 0.0 )                    \n            {\n                v2 = -Square(vec2(mx,my)+vec2(-0.04,0.20)*size,(0.03+r)*size);\n            }                        \n        }\n        else if (g_logoMouth == LOGO_MOUTH_E)\n        {\n\n            if ( v2 > 0.0 )                    \n            {\n                v2 = -Square(vec2(mx,my)+vec2(0.0,0.24)*size,(0.03+r)*size);\n            }\n\n            if ( v2 > 0.0 )                    \n            {\n                v2 = -Square(vec2(mx,my)+vec2(0.04,0.24)*size,(0.03+r)*size);\n            }\n\n            if ( v2 > 0.0 )                    \n            {\n                v2 = -Square(vec2(mx,my)+vec2(-0.04,0.24)*size,(0.03+r)*size);\n            }\n            \n\n            if ( v2 > 0.0 )                    \n            {\n                v2 = -Square(vec2(mx,my)+vec2(0.0,0.28)*size,(0.03+r)*size);\n            }\n\n            if ( v2 > 0.0 )                    \n            {\n                v2 = -Square(vec2(mx,my)+vec2(0.04,0.28)*size,(0.03+r)*size);\n            }\n\n            if ( v2 > 0.0 )                    \n            {\n                v2 = -Square(vec2(mx,my)+vec2(-0.04,0.28)*size,(0.03+r)*size);\n            }                                    \n        }\n        \n        if ( v < 0.0 && o.slm > 0.0 )\n        {\n            if ( o.sl > 0.0 && v2 > 0.0 )                        \n            {\n                o.sl *= v;\n            }\n        }\n    }\n\n\n    // Outside circles\n    if ( o.slm > 0.0 )\n    {\n        float v = -Circle(vec2(x,y),(0.42+r)*size);\n                \n        o.slm *= v;\n        float v2 = -Circle(vec2(x,y),(0.41+r)*size);\n        if ( v < 0.0 )\n        {\n            if ( o.sl > 0.0 && v2 > 0.0)\n            {\n                o.sl *= v;\n            }\n        }\n                \n    }    \n        \n    return o;\n}\n\nvoid SetMouth(int start)\n{\n    int beatPattern = g_beatPattern - start + 17;\n    \n    // Mouth\n    {\n        g_logoMouth = LOGO_MOUTH_DEFAULT;\n        SetEffectBeat(BEAT_1);\n\n        // Wake up\n        if ( (beatPattern == 17 || beatPattern == 25) && g_beatPatternTick == 0 )\n        {\n            g_logoMouth = LOGO_MOUTH_A;\n        }\n        if ( (beatPattern == 17 || beatPattern == 25) && g_beatPatternTick == 1 )\n        {\n            g_logoMouth = LOGO_MOUTH_O;\n        }\n\n        // Come on\n        if ( (beatPattern == 18 || beatPattern == 26) && g_beatPatternTick == 3 )\n        {\n            if (g_bp > 0.5)\n            {\n                g_logoMouth = LOGO_MOUTH_A;\n            }\n        }\n        if ( (beatPattern == 19 || beatPattern == 27) && g_beatPatternTick == 0 )\n        {\n            g_logoMouth = LOGO_MOUTH_O;\n        }\n\n        // Today is sunny\n        if ( (beatPattern == 20 || beatPattern == 28) && g_beatPatternTick == 3 )\n        {\n            if (g_bp > 0.5)\n            {\n                g_logoMouth = LOGO_MOUTH_O;\n            }\n        }\n        if ( (beatPattern == 21 || beatPattern == 29) && g_beatPatternTick == 0 )\n        {\n            g_logoMouth = LOGO_MOUTH_E;\n        }\n        if ( (beatPattern == 21 || beatPattern == 29) && g_beatPatternTick == 1 )\n        {\n            g_logoMouth = LOGO_MOUTH_A;\n        }\n        if ( (beatPattern == 21 || beatPattern == 29) && g_beatPatternTick == 2 )\n        {\n            g_logoMouth = LOGO_MOUTH_A;\n            if (g_bp > 0.5 )\n            {\n            \tg_logoMouth = LOGO_MOUTH_E;\n            }\n        }\n\n\n        // Wake up\n        if ( (beatPattern == 22 || beatPattern == 30) && g_beatPatternTick == 3 )\n        {\n            g_logoMouth = LOGO_MOUTH_E;\n        }\n        if ( (beatPattern == 23 || beatPattern == 31) && g_beatPatternTick == 0 )\n        {\n            g_logoMouth = LOGO_MOUTH_O;\n        }\n\n        // Chorus\n        if ( (beatPattern >= 41 && beatPattern <= 44 ) && (g_beatPatternTick == 0 || g_beatPatternTick == 1) )\n        {\n            g_logoMouth = LOGO_MOUTH_A;                \n        }\n\n    }\n}\n\n////////////////////////////////////\n// Effects\n\n#define SET_ROTATION(a)\t\tg_uvPrim = Rotate(uv,a);\n\nfloat Effect1()\n{\n    float c = 1.0;\n    \n    c *= Circle(vec2(-0.54,0.1), 0.5*g_br);\n    c *= Circle(vec2(0.17,-0.5), 2.5*g_br);\n    c *= Circle(vec2(0.67,0.19), 1.1*g_br);\n    c *= Circle(vec2(0.04,0.4), 2.95*g_br);\n    \n    return c;\n}\n\nfloat EffectWave1(float c, vec2 uv)\n{\n    uv.x += sin(g_beat*g_uv.y)*0.01;\n    uv.y += sin(g_beat*g_uv.x)*0.01;\n\n    {\n        float t = iTime*0.7 + abs(sin(0.25*g_beat*3.1459));\n        float x = sin(uv.y*3.13+t*1.01);// + 1.0*cos(uv.x*15.7+t*2.3);\n        float y = sin(uv.x*14.0+t*5.01);// + 4.0*cos(uv.y*5.7+t*4.3);\n        uv = (uv.xy-vec2(x,y)*0.1);\n    }\n\n    if ( g_beatPattern != 8 && Rand(vec2(uv.y,0.0)) < 0.80 )\n    {\n        uv.x += (Rand(vec2(uv.y,g_br))-0.5)*0.15*pow(g_beatRemainders[BEAT_1],5.0);\n    }\n\n    SET_ROTATION(g_time*0.2);\n\n    SetEffectBeat(BEAT_32);\n    c *= Effect1();\n\n    // Text\n    {\n        uv = g_uv;    \n        SET_ROTATION(0.0);\n\n        // Wake\n        if ( g_bp >= 3.2 && g_bp <= 4.2 )\n        {\n            float ct = -TextWake(0.2);        \n            c *= ct;\n        }\n        // Up\n        if ( g_bp >= 7.2 && g_bp <= 8.2 )\n        {\n            float ct = -TextUp(0.2);        \n            c *= ct;\n        }\n        \n        /*if ( g_beatPattern < 5 )\n        {\n            if ( (g_beatPatternTick&2) != 0 )\n            {\n                c *= -TextSound(0.03);\n            }\n        }*/  \n        \n        if ( iTime > 2.0 && g_time <= 0.0 )\n        {\n\t\t\tc *= -TextNoMusic(0.03);            \n        }\n    }\n    \n    return c;\n}\n\nfloat EffectWave2(float c, vec2 uv)\n{\n    // Fade out\n    bool fadeOut = false;\n    const float fadeOutDuration = 0.1;\n    if ( g_beatPattern == 16 && (1.0-g_br) < fadeOutDuration )\n    {\n        float t = (1.0-(fadeOutDuration - (1.0-g_br))/ fadeOutDuration);\n        if ( abs(uv.y)*2.0 > t )\n        {\n            fadeOut = true;\n        }\n    }\n\n    if ( !fadeOut )\n    {\n        uv.x += sin(g_beat*g_uv.y)*0.01;\n        uv.y += sin(g_beat*g_uv.x)*0.01;\n\n        {\n            float t = iTime*0.7 + abs(sin(0.25*g_beat*3.1459));\n            float x = sin(uv.x*14.0+t*5.01) + 4.0*cos(uv.y*5.7+t*4.3);\n            float y = sin(uv.y*3.13+t*1.01) + 1.0*cos(uv.x*15.7+t*2.3);\n            uv = (uv.xy-vec2(x,y)*0.1);\n        }        \n\n        if ( Rand(vec2(uv.y,0.0)) < 0.80 )\n        {\n            uv.x += (Rand(vec2(uv.y,g_br))-0.5)*0.15*pow(g_beatRemainders[BEAT_1],5.0);\n        }\n\n        SET_ROTATION(g_time*-0.2);\n\n        SetEffectBeat(BEAT_32);\n        c *= Effect1();\n    }        \n    \n    // Text\n    {\n        uv = g_uv;    \n        SET_ROTATION(0.0);\n        \n        // Wake\n        if ( g_bp >= 11.2 && g_bp <= 12.2 )\n        {\n            float ct = -TextWake(0.2);        \n            c *= ct;\n        }\n        // Up\n        if ( g_bp >= 15.2 && g_bp <= 16.2 )\n        {\n            float ct = -TextUp(0.2);        \n            c *= ct;\n        }        \n    }\n    \n    return c;\n}\n\nfloat EffectHeads1(float c, vec2 uv)\n{\n    uv = g_uv;\n\n    SetMouth(17);\n\n    SetEffectBeat(BEAT_128);\n    float br = g_br;\n    if ( br <= 0.5 )\n    {\n        br += 0.5;\n    }\n    else\n    {\n        br -= 0.5;\n    }\n\n    float time = 0.2 + br*20.0;\n\n    uv.x += sin(time*g_uv.y*1.5)*0.01;\n    uv.y += sin(time*g_uv.x*1.7)*0.01;\n\n\n    // Fade out: Zoom in\n    const float fadeOutDuration = 0.005;\n    if ( (1.0-br-0.125) < fadeOutDuration )\n    {\n        float t = (1.0-(fadeOutDuration - (1.0-br-0.125))/ fadeOutDuration);\n        if ( abs(uv.y)*2.0 > t )\n        {\n            //fadeOut = true;\n        }\n        t = clamp(pow(t,0.5),0.1,1.0);\n        uv *= t;\n    }\n\n\n    SET_ROTATION(0.1+time*0.05);\n\n    float sc = 1.0;\n    float s = 1.0;\n    // Lines scrolling down\n    {\n        for ( int j = 0 ; j < 8 ; ++ j )\n        {\n            for ( int i = 0; i < 10 ; ++i )\n            {\n                float r1 = Rand(vec2(float(i),float(j)+0.0));\n                float r2 = Rand(vec2(float(j)+0.0,float(i)));\n                float r3 = Rand(vec2(float(j)+1.0,float(i)));\n\n                float x = (r1-0.5)*2.5;\n                float y = -1.0*float(j)-1.0+pow(time+1.0,1.4)*2.0*(r2+0.4);\n\n                y += 1.0;\n                y = mod(y,2.0);\n                y -= 1.0;\n                y *= 1.1;\n\n                float v = -Rect(vec2(x,y),vec2((0.01+0.01*r3)*0.1,0.1*r3));\n\n                if ( sc > 0.0 )                        \n                {\n                    sc *= v;\n                }\n\n            }\n        }            \n    }\n\n    // Small circles scrolling down\n    {\n        for ( int j = 0 ; j < 8 ; ++ j )\n        {\n            for ( int i = 0; i < 8 ; ++i )\n            {\n                float r1 = Rand(vec2(float(i),float(j)+0.0));\n                float r2 = Rand(vec2(float(j)+0.0,float(i)));\n                float r3 = Rand(vec2(float(j)+1.0,float(i)));\n\n                float x = (r1-0.5)*2.5;\n                float y = -1.0*float(j)-1.0+pow(time+1.0,1.4)*1.0*5.0*(r2+0.4);\n\n                y += 1.0;\n                y = mod(y,2.0);\n                y -= 1.0;\n                y *= 1.1;\n\n                //float v = -Rect(vec2(x,y),vec2((0.01+0.02*r3)*0.2,0.1));\n                float v = -Circle(vec2(x,y),(0.01+0.02*r3)*0.2);\n\n                if ( sc > 0.0 )                        \n                {\n                    sc *= v;\n                }\n\n            }\n        }            \n    }\n\n    // Circles scrolling down\n    {                       \n        for ( int j = 0 ; j < 6 ; ++ j )\n        {\n            for ( int i = 0; i < 5 ; ++i )\n            {\n                float r1 = Rand(vec2(float(i),float(j)+0.0));\n                float r2 = Rand(vec2(float(j)+0.0,float(i)));\n                float r3 = Rand(vec2(float(j)+1.0,float(i)));\n\n                float v = -Circle(vec2((r1-0.5)*2.0,-1.0*float(j)-6.0-1.0+time*(r2+0.4)),0.02+0.05*r3);\n                float v2 = -Circle(vec2((r1-0.5)*2.0,-1.0*float(j)-6.0-1.0+time*(r2+0.4)),(0.02+0.05*r3)*0.9);\n\n                if ( v < 0.0 && v == v2 )\n                {\n                    v *= -1.0;\n                }\n\n                if ( sc > 0.0 )                        \n                {\n                    sc *= v;\n                }\n                else if ( v2 < 0.0 )\n                {\n                    sc = 1.0;\n                }\n            }\n        }\n\n    }\n\n    // Circles scrolling down\n    {                       \n        for ( int j = 0 ; j < 6 ; ++ j )\n        {\n            for ( int i = 0; i < 8 ; ++i )\n            {\n                float r1 = Rand(vec2(float(i),float(j)+1.0));\n                float r2 = Rand(vec2(float(j)+2.0,float(i)));\n                float r3 = Rand(vec2(float(j)+3.0,float(i)));\n\n                float v = -Circle(vec2((r1-0.5)*2.0,-1.0*float(j)-16.0-1.0+time*(r2+0.4)),0.08+0.09*r3);\n                float v2 = -Circle(vec2((r1-0.5)*2.0,-1.0*float(j)-16.0-1.0+time*(r2+0.4)),(0.08+0.09*r3)*0.9);\n\n                if ( v < 0.0 && v == v2 )\n                {\n                    v *= -1.0;\n                }\n\n                if ( sc > 0.0 )                        \n                {\n                    sc *= v;\n                }\n                else if ( v2 < 0.0 )\n                {\n                    sc = 1.0;\n                }\n            }\n        }\n\n    }\n\n    // Logo\n    DrawLogoOutput logoOutput;\n    logoOutput.sl = 1.0;\n    logoOutput.slm = 1.0;\n    {\n        for ( int i = 0 ; i < 12 ; ++i )\n        {\n            float size = 0.8 / float(i+1);\n\n            bool shake = true;\n\n            if ( g_beatPattern == 44 )\n            {\n                shake = false;\n            }\n\n            float r = shake ? sin(time*200.0)*0.01 : 0.0;\n\n            float x = -0.4+time*0.045;\n            float y = 0.3-time*0.04;\n            if ( shake )\n            {\n                x += Rand(vec2(time*0.1,0.0))*0.01;\n                y += Rand(vec2(time*0.2,0.0))*0.01;\n            }\n            else\n            {\n                float a = abs(43.0-((g_beat/(4.0))));\n\n                y -= pow(a,10.3)*10.4;\n            }\n\n            if ( i > 0 )\n            {\n                x -= 0.5-Rand(vec2(i,2.0));\n                y += Rand(vec2(i,6.0));\n            }\n\n            x += sin(g_time*(0.4+Rand(vec2(float(i),3.0)*3.0))+Rand(vec2(float(i),1.0)*4.0))*0.01;\n            y += sin(g_time*(1.1+Rand(vec2(float(i),1.0)*3.0))+Rand(vec2(float(i),1.0)*2.0))*0.02;\n\n            logoOutput = DrawLogo(x,y,size,r,logoOutput);                \n        }\n\n    }\n\n    // Fade in\n    bool fadeIn = false;\n    const float fadeInDuration = 0.01;\n    if ( br < fadeInDuration )\n    {\n        float t = (1.0-(fadeInDuration - br)/ fadeInDuration) ;\n        if ( abs(uv.y+0.5) > t )\n        {\n            fadeIn = true;\n        }\n    }\n\n    if (!fadeIn)\n    {\n        if ( logoOutput.slm >= 0.0 && s >= 0.0 )\n        {\n            c *= -sc;\n        }\n\n        if ( logoOutput.slm >= 0.0 )\n        {\n            c *= -s;\n        }\n\n        c *= logoOutput.sl;\n    }\n    else\n    {\n        c = 1.0;\n    }\n    \n    return c;\n}\n\nfloat EffectZoomOut(float c, vec2 uv)\n{\n    uv = g_uv;              \n\n    SET_ROTATION(0.0);\n    SetEffectBeat(BEAT_8);\n\n    int numLogos = 8;\n\n    bool defSin = true;\n\n    // Fade in\n    bool fadeIn = false;\n    if ( g_beatPattern == 45 || g_beatPattern == 53 || \n        g_beatPattern == 69 || g_beatPattern == 77 ||\n        g_beatPattern == 109 || g_beatPattern == 117 ||\n        g_beatPattern == 141 || g_beatPattern == 159)\n    {\n        const float fadeInDuration = 0.1;\n        if ( g_br < fadeInDuration )\n        {\n            float t = (1.0-(fadeInDuration - g_br)/ fadeInDuration) ;\n            if ( abs(sqrt(uv.x*uv.x+uv.y*uv.y))*0.65 > t )\n            {\n                fadeIn = true;\n            }\n        }        \n    }\n\n    bool fadeOut = false;\n    if ( /*g_beatPattern == 52 ||*/ g_beatPattern == 60 ||\n        /*g_beatPattern == 76 ||*/ g_beatPattern == 84 ||\n        g_beatPattern == 124 || g_beatPattern == 156)\n    {\n        const float fadeOutDuration = 0.25;\n        if ( (1.0-g_br) < fadeOutDuration )\n        {\n            float t = (1.0-(fadeOutDuration - (1.0-g_br))/ fadeOutDuration);\n            if ( abs(sqrt(uv.x*uv.x+uv.y*uv.y))*0.5 > t )\n            {\n                fadeOut = true;\n            }\n        }        \n    }\n\n    // Rotation after fast snare\n    bool fastRotation = false;\n    if ( g_beatPattern == 53 ||\n        g_beatPattern == 77 ||\n        g_beatPattern == 117 ||\n        g_beatPattern == 149 )\n    {\n        fastRotation = true;\n    }        \n\n    if (!fadeIn && !fadeOut)\n        for ( int i = 0 ; i < 8; ++i )\n        {   \n            float time = 0.2 + g_br*20.0;\n\n            uv.x += sin(g_time*0.3)*0.04;\n            uv.y += sin(g_time*0.19)*0.04;\n\n            if ( defSin )\n            {\n                float d = pow(1.0-g_beatRemainders[BEAT_1],5.0)*4.0;\n                d *= float(i+1) * 0.2;\n                uv.x += sin(/*g_time**/g_uv.y*100.5)*0.005*d;\n                uv.y += sin(/*g_time**/g_uv.x*10.7)*0.005*d;\n            }\n            else\n            {\n                uv.x += sin(g_time*g_uv.y*0.05)*0.003;\n                uv.y += sin(g_time*g_uv.x*0.07)*0.003;\n            }\n\n            uv.x += sin(uv.y*1.0)*0.02 + sin(uv.x*0.56)*0.034;\n            uv.y += sin(uv.x*1.0)*0.0113 + + sin(uv.y*0.46)*0.044;\n\n            //if ( i > 4 )\n            {\n                float ar = 0.0;//sin(g_time)*0.01*uv.x+sin(g_time)*1.33*uv.y;\n                float rot = ar+sin(sin(g_time*0.1)*3.1459*0.1)*1.1+Rand(vec2(float(i),4.0))*3.1;\n\n                rot += ((i&1) == 0) ? g_time*3.1459*0.5 : -g_time*3.1459*0.5;\n                \n                if ( fastRotation ) \n                {\n                    rot += pow(g_beatRemainders[BEAT_4],0.3)*3.1459*5.0;\n                }\n\n                rot += sin(g_time)*0.8;\n\n                SET_ROTATION(rot);                   \n            }\n\n            DrawLogoOutput o;\n            o.sl = 1.0;\n            o.slm = 1.0;\n\n            float t = g_br + float(i)*(1.0/float(numLogos));\n            t = mod(t,1.0);\n            float size = 0.0 + pow(4.0*sin(3.1459*(1.0-t)*0.5),3.0);\n\n            if ( i == 4 )\n            {\n                c *= -TextWake(size*0.6);\n            }\n            else if ( i == 7 )\n            {\n                c *= -TextUp(size*0.6);\n            }\n            else\n            {\n                float x = Rand(vec2(float(i),0.0)) * 0.34;\n                float y = Rand(vec2(float(i),1.0)) * 0.34;\n                if ( i == 0 )\n                {\n                    x = 0.0;\n                    y = 0.0;\n                }\n\n                x = x*(1.0-t);\n                y = y*(1.0-t);\n\n                o = DrawLogo(x,y,size,0.0,o);\n\n                c *= -o.sl;\n            }\n        }\n\n    // Fast Snares\n    if ( (g_beatPattern == 52 || g_beatPattern == 60 ||\n          g_beatPattern == 76 || g_beatPattern == 84 ||\n          g_beatPattern == 116 || g_beatPattern == 124 || \n          g_beatPattern == 148 || g_beatPattern == 156) && \n        g_beatPatternTick == 3 )\n    {\n        float t = g_beatRemainders[BEAT_1];\n        for ( int i = 0 ; i < 1 ; ++ i )\n        {               \n            float x = (uv.x + 0.5)*0.5;\n            float y = (uv.y + 0.5)*0.5;\n            {\n                if ( mod(t,0.1) > 0.05 )\n                {\n                    c *= -1.0;\n                }\n            }\n        }\n    }\n\n    return c;\n}\n\nfloat EffectHeadsLine(float c, vec2 uv)\n{\n    uv = g_uv;              \n\n    float mask = 1.0;\n    \n    bool beatSwapColors = false;\n\n    if ( (g_beatPattern != 68 && g_beatPattern != 108) || g_beatPatternTick < 2 )\n    {   \n        SetEffectBeat(BEAT_1);\n\n        int numMouths = (g_beatPattern - 61)*4 + g_beatPatternTick;\n\n        if (g_beatPattern >= 101 && g_beatPattern <= 108) \n        {\n            numMouths = (g_beatPattern - 101)*4 + g_beatPatternTick;\n        }\n\n        int ro = numMouths / 6;\n\n        numMouths = numMouths % 6;\n\n\n        int mouth = 0;\n        vec2 uvAux = uv;\n        for ( int x = 0 ; x < 3 ; ++x )\n        {\n            for ( int y = 0 ; y < 2 ; ++y )\n            {\n                if ((mouth <= numMouths && ro != 4) ||\n                    (ro > 0 && ro < 4) ||\n                    (ro == 4 && (mouth) >= numMouths))\n                {\n                    uv = uvAux;\n\n\n                    float time = 0.2 + g_br*20.0;\n                    uv.x += sin(time*g_uv.y*1.5)*0.01;\n                    uv.y += sin(time*g_uv.x*1.7)*0.01;\n\n                    float sinAmount = 0.5;\n                    if ( mouth == numMouths )\n                    {\n                        sinAmount = 10.0;\n                    }\n\n                    if ( (mouth&1) == 0 )\n                    {\n                        uv.x += sin(g_br*g_uv.y*100.5)*0.004*sinAmount;\n                        uv.y += sin(g_br*g_uv.x*g_uv.y*10.7)*0.004*sinAmount;\n                    }\n                    else\n                    {\n                        uv.y += sin(g_br*g_uv.y*100.5)*0.004*sinAmount;\n                        uv.x += sin(g_br*g_uv.x*g_uv.y*10.7)*0.004*sinAmount;\n                    }\n\n                    if ( Rand(vec2(uv.y,0.0)) < 0.80 )\n                    {\n                        uv.x += (Rand(vec2(uv.y,g_br))-0.5)*0.02*(1.0-g_br);\n                    }\n\n                    float rot = (Rand(vec2(float(mouth),g_br+4.0))-0.5)*0.05;                        \n                    SET_ROTATION(rot);\n\n                    g_logoMouth = (mouth+g_beatPatternTick) % 3;\n\n                    DrawLogoOutput o;\n                    o.sl = 1.0;\n                    o.slm = 1.0;\n\n                    float xp = ((float(x)/2.0)-0.5)*1.0;\n                    float yp = ((float(y)/2.0)-0.25)*1.0;\n\n                    float size = 0.5 + sin(g_br)*0.05;\n\n                    if ( mouth == numMouths )\n                    {\n                        if ( ro == 4 )\n                        {\n                            size *= pow(1.0-g_br,5.95);\n                        }\n                        else\n                        {\n                            size *= pow(g_br,0.25);\n                        }\n                    }\n\n\n                    o = DrawLogo(xp,yp,size,0.0,o);\n\n                    c *= -o.sl;\n\n                    mask *= o.slm;\n                }\n\n                ++mouth;\n            }\n        }\n\n        beatSwapColors = ro != 0 && ro != 4;\n\n\n        g_logoMouth = LOGO_MOUTH_DEFAULT;\n    }\n    else\n    {\n        DrawLogoOutput o;\n        o.sl = 1.0;\n        o.slm = 1.0;\n\n\n        g_logoMouth = LOGO_MOUTH_A;\n\n\n        SetEffectBeat(BEAT_2);\n        vec2 uvAux = uv;\n        for ( int i = 0; i < 12 ; ++i )\n        {\n            if ( mask > 0.0 )\n            {\n                uv = uvAux;\n\n                float size = min(0.8,g_br*1.5);\n\n                size /= pow(abs((1.0-g_br) + 0.3*float(i))+ 0.01,0.85);\n\n\n                float time = 0.2 + g_br*20.0;\n                uv.x += sin(time*g_uv.y*1.5)*0.01;\n                uv.y += sin(time*g_uv.x*1.7)*0.01;\n\n                if ( Rand(vec2(uv.y,0.0)) < 0.80 )\n                {\n                    uv.x += (Rand(vec2(uv.y,g_br))-0.5)*0.02;\n                }\n\n\n                SET_ROTATION(0.0);\n\n                float x = 0.0;\n                float y = 0.0;\n                if (i != 0 )\n                {\n                    x = (Rand(vec2(float(i),1.0))-0.5)*1.0;\n                    y = (Rand(vec2(float(i),5.0))-0.5)*0.1;\n                }\n\n                o = DrawLogo(x,y,size,0.0,o);\n\n                mask *= o.slm;        \n                c *= o.sl;\n            }\n        }\n\n    }\n\n    // Circles\n    if ( mask > 0.0 )\n    {\n        float t = g_time * 10.0;\n        vec2 coord = vec2(500,500)+uv*1000.0;\n\n        float circles1;\n        {\n            vec2 center = vec2(450,450) /1.5;\n\n            center.x += sin(g_time*1.47)*200.4;\n            center.y += sin(g_time*1.87)*200.3;\n\n            float dist = length(center - coord);    \t\n            circles1 = cos(dist/10.0 - t*6.0);\n            circles1 = clamp(circles1,0.0,1.0);\n        }\n\n        float circles2;\n        {\n            vec2 center = vec2(450,450) /2.5;\n\n            center.x += sin(g_time)*100.27;\n            center.y += sin(g_time*0.17)*100.54;\n\n            float dist = length(center - coord);    \t\n            circles2 = cos(dist/10.0 - t*6.0);\n            circles2 = clamp(circles2,0.0,1.0);\n        }\n\n        float c2 = circles1 * circles2;\n\n        c2 += 0.8;\n        c2 = min(c2,1.0);\n\n        if ( c2 > 0.9 )\n        {\n            c *= -1.0;\n        }\n    }\n\n    // Fade in\n    bool fadeIn = false;\n    const float fadeInDuration = 0.5;\n    if ( (g_beatPattern == 61 || g_beatPattern == 101) && g_beatPatternTick == 0 && g_br < fadeInDuration )\n    {\n        float t = (1.0-(fadeInDuration - g_br)/ fadeInDuration) ;\n        if ( (1.0-abs(uv.y+0.5)) > t )\n        {\n            fadeIn = true;\n        }\n    }\n\n    if ( fadeIn )\n    {\n        c = -1.0;\n    }        \n\n    return c;\n}\n\nfloat EffectHeads2(float c, vec2 uv)\n{\n    uv = g_uv;\n\n    SetMouth(85);\n\n    SetEffectBeat(BEAT_64);\n    float br = g_br;\n    br += 6.0 / 8.0;\n    br = mod(br,1.0);\n\n    float time = 0.2 + br*20.0;\n\n    uv.x += sin(time*g_uv.y*2.5)*0.01;\n    uv.y += sin(time*g_uv.x*2.7)*0.01;\n\n\n    // Fade out: Zoom in\n    const float fadeOutDuration = 0.025;\n    if ( (1.0-br) < fadeOutDuration )\n    {\n        float t = (1.0-(fadeOutDuration - (1.0-br))/ fadeOutDuration);\n        /*if ( abs(uv.y)*2.0 > t )\n        {\n            //fadeOut = true;\n        }*/\n        t = clamp(pow(t,0.5),0.1,1.0);\n        uv *= t;\n    }\n\n\n    if ( Rand(vec2(uv.y,0.0)) < 0.80 )\n    {\n        uv.x += (Rand(vec2(uv.y,g_br))-0.5)*br*0.004;\n    }\n\n    SET_ROTATION(-0.1-time*0.05);\n\n    float sc = 1.0;\n    float s = 1.0;\n    // Lines scrolling down\n    {\n        for ( int j = 0 ; j < 8 ; ++ j )\n        {\n            for ( int i = 0; i < 10 ; ++i )\n            {\n                float r1 = Rand(vec2(float(i),float(j)+0.0));\n                float r2 = Rand(vec2(float(j)+0.0,float(i)));\n                float r3 = Rand(vec2(float(j)+1.0,float(i)));\n\n                float x = (r1-0.5)*2.5;\n                float y = -1.0*float(j)-1.0+pow(time+1.0,1.4)*2.0*(r2+0.4);\n\n                y += 1.0;\n                y = mod(y,2.0);\n                y -= 1.0;\n                y *= 1.1;\n\n                float v = -Rect(vec2(x,y),vec2((0.01+0.01*r3)*0.1,0.1*r3));\n\n                if ( sc > 0.0 )                        \n                {\n                    sc *= v;\n                }\n\n            }\n        }            \n    }\n\n    // Small circles scrolling down\n    {\n        for ( int j = 0 ; j < 8 ; ++ j )\n        {\n            for ( int i = 0; i < 10 ; ++i )\n            {\n                float r1 = Rand(vec2(float(i),float(j)+0.0));\n                float r2 = Rand(vec2(float(j)+0.0,float(i)));\n                float r3 = Rand(vec2(float(j)+1.0,float(i)));\n\n                float x = (r1-0.5)*2.5;\n                float y = -1.0*float(j)-1.0+pow(time+1.0,1.4)*1.0*5.0*(r2+0.4);\n\n                y += 1.0;\n                y = mod(y,2.0);\n                y -= 1.0;\n                y *= 1.1;\n\n                float v = -Circle(vec2(x,y),(0.01+0.02*r3)*0.2);\n\n                if ( sc > 0.0 )                        \n                {\n                    sc *= v;\n                }\n\n            }\n        }            \n    }\n\n    // Circles scrolling down\n    {                       \n        for ( int j = 0 ; j < 6 ; ++ j )\n        {\n            for ( int i = 0; i < 5 ; ++i )\n            {\n                float r1 = Rand(vec2(float(i),float(j)+0.0));\n                float r2 = Rand(vec2(float(j)+0.0,float(i)));\n                float r3 = Rand(vec2(float(j)+1.0,float(i)));\n\n                float v = -Circle(vec2((r1-0.5)*2.0,-1.0*float(j)-6.0-1.0+time*(r2+0.4)),0.02+0.05*r3);\n                float v2 = -Circle(vec2((r1-0.5)*2.0,-1.0*float(j)-6.0-1.0+time*(r2+0.4)),(0.02+0.05*r3)*0.9);\n\n                if ( v < 0.0 && v == v2 )\n                {\n                    v *= -1.0;\n                }\n\n                if ( sc > 0.0 )                        \n                {\n                    sc *= v;\n                }\n                else if ( v2 < 0.0 )\n                {\n                    sc = 1.0;\n                }\n            }\n        }\n\n    }\n\n    // Circles scrolling down\n    {                       \n        for ( int j = 0 ; j < 6 ; ++ j )\n        {\n            for ( int i = 0; i < 8 ; ++i )\n            {\n                float r1 = Rand(vec2(float(i),float(j)+1.0));\n                float r2 = Rand(vec2(float(j)+2.0,float(i)));\n                float r3 = Rand(vec2(float(j)+3.0,float(i)));\n\n                float v = -Circle(vec2((r1-0.5)*2.0,-1.0*float(j)-16.0-1.0+time*(r2+0.4)),0.08+0.09*r3);\n                float v2 = -Circle(vec2((r1-0.5)*2.0,-1.0*float(j)-16.0-1.0+time*(r2+0.4)),(0.08+0.09*r3)*0.9);\n\n                if ( v < 0.0 && v == v2 )\n                {\n                    v *= -1.0;\n                }\n\n                if ( sc > 0.0 )                        \n                {\n                    sc *= v;\n                }\n                else if ( v2 < 0.0 )\n                {\n                    sc = 1.0;\n                }\n            }\n        }\n\n    }\n\n    // Logo\n    DrawLogoOutput logoOutput;\n    logoOutput.sl = 1.0;\n    logoOutput.slm = 1.0;\n    {\n        //\n        for ( int i = 0 ; i < 10 ; ++i )\n        {\n            float size = 0.8 / float(i+1);\n\n            bool shake = true;\n\n            if ( g_beatPattern == 100 )\n            {\n                shake = false;\n            }\n\n            float r = shake ? sin(time*200.0)*0.01 : 0.0;\n\n            float x = -0.2+time*0.0135;\n            float y = 0.1-time*0.01;\n            if ( shake )\n            {\n                x += Rand(vec2(time*0.1,0.0))*0.01;\n                y += Rand(vec2(time*0.2,0.0))*0.01;\n            }\n            else\n            {\n                //y -= (3.0)*0.01;\n                //x -= (3.0)*0.025;\n\n                float a = abs(99.0-((g_beat/(4.0))));\n\n                y -= pow(a,10.3)*5.4;\n            }\n\n            if ( i > 0 )\n            {\n                x -= 0.5-Rand(vec2(i,2.0));\n                y += Rand(vec2(i,6.0));\n            }\n\n            x += sin(g_time*(0.4+Rand(vec2(float(i),3.0)*3.0))+Rand(vec2(float(i),1.0)*4.0))*0.01;\n            y += sin(g_time*(1.1+Rand(vec2(float(i),1.0)*3.0))+Rand(vec2(float(i),1.0)*2.0))*0.02;\n\n            logoOutput = DrawLogo(x,y,size,r,logoOutput);                \n        }\n\n    }\n\n    // Fade in\n    bool fadeIn = false;\n    const float fadeInDuration = 0.01;\n    if ( br < fadeInDuration )\n    {\n        float t = (1.0-(fadeInDuration - br)/ fadeInDuration) ;\n        if ( abs(uv.y+0.5) > t )\n        {\n            fadeIn = true;\n        }\n    }\n\n    if (!fadeIn)\n    {\n        if ( logoOutput.slm >= 0.0 && s >= 0.0 )\n        {\n            c *= -sc;\n        }\n\n        if ( logoOutput.slm >= 0.0 )\n        {\n            c *= -s;\n        }\n\n        c *= logoOutput.sl;\n    }\n    else\n    {\n        c = -1.0;\n    }\n    \n    return c;\n}\n\nfloat EffectHeads3(float c, vec2 uv)\n{\n    uv = g_uv;\n\n    SetMouth(125);\n\n    // Special mouth uuhhhh\n    {\n        if ( (g_beatPattern == 127 || g_beatPattern == 131 || \n              g_beatPattern == 135 || g_beatPattern == 140) && \n            g_beatPatternTick == 2 )\n        {\n            g_logoMouth = LOGO_MOUTH_A;\n        }\n    }\n\n    SetEffectBeat(BEAT_64);\n    float br = g_br;\n    br += 2.0 / 8.0;\n    br = mod(br,1.0);\n\n    float timeOscil = sin(3.1459*pow(mod((1.0-g_beatRemainders[BEAT_4])+0.5,1.0),10.0));\n\n    float time = 0.2 + br*20.0 + timeOscil*0.1;\n\n    uv.x += sin((time*0.5+10.5)*g_uv.y*1.5)*0.01;\n    uv.y += sin((time*0.5+10.5)*g_uv.x*1.7)*0.01;\n\n    // Fade out: Zoom in\n    const float fadeOutDuration = 0.025;\n    if ( (1.0-br) < fadeOutDuration )\n    {\n        float t = (1.0-(fadeOutDuration - (1.0-br))/ fadeOutDuration);\n        /*if ( abs(uv.y)*2.0 > t )\n        {\n            //fadeOut = true;\n        }*/\n        t = clamp(pow(t,0.5),0.1,1.0);\n        uv *= t;\n    }\n\n\n    if ( Rand(vec2(uv.y,0.0)) < 0.80 )\n    {\n        uv.x += (Rand(vec2(uv.y,timeOscil))-0.5)*timeOscil*0.04;\n    }\n\n    if ( timeOscil > 0.7 && g_beatPattern != 140 )\n    {\n        c *= -1.0;\n    }\n\n\n    vec2 uvAux = uv;\n\n    uv.x *= 0.5 + abs(uv.y)*1.1;\n    SET_ROTATION(3.1459*0.49);\n\n    float sc = 1.0;\n    float s = 1.0;\n    // Lines scrolling down\n    {\n        for ( int j = 0 ; j < 8 ; ++ j )\n        {\n            for ( int i = 0; i < 10 ; ++i )\n            {\n                float r1 = Rand(vec2(float(i),float(j)+0.0));\n                float r2 = Rand(vec2(float(j)+0.0,float(i)))*0.1;\n                float r3 = Rand(vec2(float(j)+1.0,float(i)));\n\n                float x = (r1-0.5)*2.5;\n                float y = -1.0*float(j)-1.0+pow(time+1.0,1.0)*2.0*(r2+0.4);\n\n                y += 1.0;\n                y = mod(y,2.0);\n                y -= 1.0;\n                y *= 1.1;\n\n                float v = -Rect(vec2(x,y),vec2((0.01+0.01*r3)*0.1,0.1*r3));\n\n                if ( sc > 0.0 )                        \n                {\n                    sc *= v;\n                }\n\n            }\n        }            \n    }\n\n    // Small circles scrolling down\n    {\n        for ( int j = 0 ; j < 8 ; ++ j )\n        {\n            for ( int i = 0; i < 10 ; ++i )\n            {\n                float r1 = Rand(vec2(float(i),float(j)+0.0));\n                float r2 = Rand(vec2(float(j)+0.0,float(i)))*0.1;\n                float r3 = Rand(vec2(float(j)+1.0,float(i)));\n\n                float x = (r1-0.5)*2.5;\n                float y = -1.0*float(j)-1.0+pow(time+1.0,1.0)*1.0*5.0*(r2+0.4);\n\n                y += 1.0;\n                y = mod(y,2.0);\n                y -= 1.0;\n                y *= 1.1;\n\n                float v = -Circle(vec2(x,y),(0.01+0.02*r3)*0.2);\n\n                if ( sc > 0.0 )                        \n                {\n                    sc *= v;\n                }\n\n            }\n        }            \n    }\n\n    uv = uvAux;\n\n    SET_ROTATION(3.1459*0.01-timeOscil*0.02);\n\n    // Logo\n    DrawLogoOutput logoOutput;\n    logoOutput.sl = 1.0;\n    logoOutput.slm = 1.0;\n    {\n        //\n        for ( int i = 0 ; i < 2 ; ++i )\n        {\n            float size = 1.0 / (float(i)*0.3+1.0);\n\n            bool shake = true;\n\n            float to = timeOscil;\n            if ( g_beatPattern == 140 || (i&1) == (g_beatPattern&1))\n            {\n                shake = false;\n                to = 0.0;\n            }                \n\n            float r = 0.0;\n\n            float x = 0.0+time*0.0035;\n            float y = -0.0-time*0.001;\n\n            y += sin(time+Rand(vec2(float(i),4.0)))*0.04;\n\n            if  ( i == 0 )\n            {\n                y += sin(to)*0.14*(0.2+(0.5-Rand(vec2(float(i),float(g_beatPattern)+4.0))));\n            }\n            else\n            {\n                x -= sin(to)*0.1*(0.2+(0.5-Rand(vec2(float(i),float(g_beatPattern)+3.0))));\n            }\n\n            if ( i > 0 )\n            {\n                x -= (0.5-Rand(vec2(i,2.0)))*2.0;\n                y += Rand(vec2(i,6.0))*0.1;\n            }\n\n            x += sin(g_time*(0.4+Rand(vec2(float(i),3.0)*3.0))+Rand(vec2(float(i),1.0)*4.0))*0.01;\n            y += sin(g_time*(1.1+Rand(vec2(float(i),1.0)*3.0))+Rand(vec2(float(i),1.0)*2.0))*0.02;\n\n            logoOutput = DrawLogo(x,y,size,r,logoOutput);\n            if ( i == 1 )\n            {\n                logoOutput = DrawLogo(-x,-y*0.8,size,r,logoOutput);                                \n            }                \n        }\n\n    }\n\n    // Fade in\n    bool fadeIn = false;\n    const float fadeInDuration = 0.01;\n    if ( br < fadeInDuration )\n    {\n        float t = (1.0-(fadeInDuration - br)/ fadeInDuration) ;\n        if ( abs(uv.y+0.5) > t )\n        {\n            fadeIn = true;\n        }\n    }\n\n    if (!fadeIn)\n    {\n        if ( logoOutput.slm >= 0.0 && s >= 0.0 )\n        {\n            c *= -sc;\n        }\n\n        if ( logoOutput.slm >= 0.0 )\n        {\n            c *= -s;\n        }\n\n        c *= logoOutput.sl;\n    }\n    else\n    {\n        c = -1.0;\n    }\n    \n    return c;\n}\n\nfloat EffectHeads4(float c, vec2 uv)\n{\n    uv = g_uv;               \n\n    SetMouth(157-24+8);\n\n    SetEffectBeat(BEAT_64);\n    float br = g_br;\n    br += 4.0 / 8.0;\n    br = mod(br,1.0);\n\n    float time = 0.2 + br*20.0;\n\n    // Sin deformation\n    uv.x += sin(g_beat*g_uv.y)*0.04*pow(br,4.0);\n    uv.y += sin(g_beat*g_uv.x)*0.04*pow(br,4.0);\n\n    uv.x += sin(time*g_uv.y*2.5)*0.01;\n    uv.y += sin(time*g_uv.x*2.7)*0.01;\n\n\n    // Fade out: Zoom in\n    const float fadeOutDuration = 0.025;\n    if ( (1.0-br) < fadeOutDuration )\n    {\n        float t = (1.0-(fadeOutDuration - (1.0-br))/ fadeOutDuration);\n        if ( abs(uv.y)*2.0 > t )\n        {\n            //fadeOut = true;\n        }\n        t = clamp(pow(t,0.75),0.1,1.0);\n        uv *= t;\n    }\n\n\n    if ( Rand(vec2(uv.y,0.0)) < 0.80 )\n    {\n        uv.x += (Rand(vec2(uv.y,g_br))-0.5)*br*0.004;\n    }\n\n    SET_ROTATION(-1.6-time*0.05);\n\n    float sc = 1.0;\n    float s = 1.0;\n    // Lines scrolling down\n    {\n        for ( int j = 0 ; j < 8 ; ++ j )\n        {\n            for ( int i = 0; i < 10 ; ++i )\n            {\n                float r1 = Rand(vec2(float(i),float(j)+0.0));\n                float r2 = Rand(vec2(float(j)+0.0,float(i)));\n                float r3 = Rand(vec2(float(j)+1.0,float(i)));\n\n                float x = (r1-0.5)*2.5;\n                float y = -1.0*float(j)-1.0+pow(time+1.0,1.4)*2.0*(r2+0.4);\n\n                y += 1.0;\n                y = mod(y,2.0);\n                y -= 1.0;\n                y *= 1.1;\n\n                float v = -Rect(vec2(x,y),vec2((0.01+0.01*r3)*0.1,0.1*r3));\n\n                if ( sc > 0.0 )                        \n                {\n                    sc *= v;\n                }\n\n            }\n        }            \n    }\n\n    // Small circles scrolling down\n    {\n        for ( int j = 0 ; j < 8 ; ++ j )\n        {\n            for ( int i = 0; i < 10 ; ++i )\n            {\n                float r1 = Rand(vec2(float(i),float(j)+0.0));\n                float r2 = Rand(vec2(float(j)+0.0,float(i)));\n                float r3 = Rand(vec2(float(j)+1.0,float(i)));\n\n                float x = (r1-0.5)*2.5;\n                float y = -1.0*float(j)-1.0+pow(time+1.0,1.4)*1.0*5.0*(r2+0.4);\n\n                y += 1.0;\n                y = mod(y,2.0);\n                y -= 1.0;\n                y *= 1.1;\n\n                //float v = -Rect(vec2(x,y),vec2((0.01+0.02*r3)*0.2,0.1));\n                float v = -Circle(vec2(x,y),(0.01+0.02*r3)*0.2);\n\n                if ( sc > 0.0 )                        \n                {\n                    sc *= v;\n                }\n\n            }\n        }            \n    }\n\n    // Circles scrolling down\n    {                       \n        for ( int j = 0 ; j < 6 ; ++ j )\n        {\n            for ( int i = 0; i < 5 ; ++i )\n            {\n                float r1 = Rand(vec2(float(i),float(j)+0.0));\n                float r2 = Rand(vec2(float(j)+0.0,float(i)));\n                float r3 = Rand(vec2(float(j)+1.0,float(i)));\n\n                float v = -Circle(vec2((r1-0.5)*2.0,-1.0*float(j)-6.0-1.0+time*(r2+0.4)),0.02+0.05*r3);\n                float v2 = -Circle(vec2((r1-0.5)*2.0,-1.0*float(j)-6.0-1.0+time*(r2+0.4)),(0.02+0.05*r3)*0.9);\n\n                if ( v < 0.0 && v == v2 )\n                {\n                    v *= -1.0;\n                }\n\n                if ( sc > 0.0 )                        \n                {\n                    sc *= v;\n                }\n                else if ( v2 < 0.0 )\n                {\n                    sc = 1.0;\n                }\n            }\n        }\n\n    }\n\n    // Circles scrolling down\n    {                       \n        for ( int j = 0 ; j < 6 ; ++ j )\n        {\n            for ( int i = 0; i < 8 ; ++i )\n            {\n                float r1 = Rand(vec2(float(i),float(j)+1.0));\n                float r2 = Rand(vec2(float(j)+2.0,float(i)));\n                float r3 = Rand(vec2(float(j)+3.0,float(i)));\n\n                float v = -Circle(vec2((r1-0.5)*2.0,-1.0*float(j)-16.0-1.0+time*(r2+0.4)),0.08+0.09*r3);\n                float v2 = -Circle(vec2((r1-0.5)*2.0,-1.0*float(j)-16.0-1.0+time*(r2+0.4)),(0.08+0.09*r3)*0.9);\n\n                if ( v < 0.0 && v == v2 )\n                {\n                    v *= -1.0;\n                }\n\n                if ( sc > 0.0 )                        \n                {\n                    sc *= v;\n                }\n                else if ( v2 < 0.0 )\n                {\n                    sc = 1.0;\n                }\n            }\n        }\n\n    }\n\n    // Logo\n    DrawLogoOutput logoOutput;\n    logoOutput.sl = 1.0;\n    logoOutput.slm = 1.0;\n    {\n        for ( int i = 0 ; i < 10 ; ++i )\n        {\n            float size = 0.8 / float(i+1);\n\n            bool shake = true;\n\n            if ( g_beatPattern == 168 )\n            {\n                shake = false;\n            }\n\n            float r = shake ? sin(time*200.0)*0.01 : 0.0;\n\n            float x = -0.2+time*0.0135;\n            float y = 0.1-time*0.01;\n            if ( shake )\n            {\n                x += Rand(vec2(time*0.1,0.0))*0.01;\n                y += Rand(vec2(time*0.2,0.0))*0.01;\n            }\n\n            if ( i > 0 )\n            {\n                x -= 0.5-Rand(vec2(i,2.0));\n                y += Rand(vec2(i,6.0));\n            }\n\n            x += sin(g_time*(0.4+Rand(vec2(float(i),3.0)*3.0))+Rand(vec2(float(i),1.0)*4.0))*0.01;\n            y += sin(g_time*(1.1+Rand(vec2(float(i),1.0)*3.0))+Rand(vec2(float(i),1.0)*2.0))*0.02;\n\n            logoOutput = DrawLogo(x,y,size,r,logoOutput);                \n        }\n\n    }\n\n    // Fade in\n    bool fadeIn = false;\n    if ( g_beatPattern == 157 && g_beatPatternTick == 0 )\n    {\n        const float fadeInDuration = 1.0;\n        if ( br < fadeInDuration )\n        {\n            float t = (1.0-(fadeInDuration - g_beatRemainders[BEAT_1])/ fadeInDuration) ;\n            if ( abs(uv.y+0.5) > t )\n            {\n                fadeIn = true;\n            }\n        }\n    }\n\n\n    if (!fadeIn)\n    {\n        if ( logoOutput.slm >= 0.0 && s >= 0.0 )\n        {\n            c *= -sc;\n        }\n\n        if ( logoOutput.slm >= 0.0 )\n        {\n            c *= -s;\n        }\n\n        c *= logoOutput.sl;\n    }\n    else\n    {\n        c = -1.0;\n    }\n        \n    return c;\n}\n\nfloat EffectFinalTitle(float c, vec2 uv)\n{\n    uv = g_uv;        \n\n    SetEffectBeat(BEAT_4);\n    if ( Rand(vec2(uv.y,0.0)) < 0.80 )\n    {\n        float amount = 0.3 + abs(sin(g_time*0.4));\n        uv.x += 0.005*(0.5-Rand(vec2(g_time+uv.y,0.0)))*amount;\n        uv.y += 0.005*(0.5-Rand(vec2(g_time+uv.x,0.0)))*amount;\n    }\n\n    SET_ROTATION(0.0);\n\n    if ( (g_beatPattern&1) == 1 )\n    {\n        c *= TextWake(0.2);\n    }\n    else\n    {\n        c *= TextUp(0.2);\n    }\n\n    c *= -TextCredits(0.04);\n    \n    return c;\n}\n\n////////////////////////////////////\n// Sequencer\n\nfloat Sequence()\n{   \n    float c = -1.0;\n    \n    vec2 uv = g_uv;        \n    \n    SET_ROTATION(0.0);\n        \n    uv.x += sin(g_time+uv.y)*0.1;\n    uv.y += sin(g_time+uv.x)*0.1;\n\n    // Rotation controlled by sound at the end of the pattern\n    if ( g_beatPattern <= 16 )\n    {\n        if ( (g_beatPattern&1) == 0 )\n        {\n            float m = 1.0;\n            float r = g_beatRemainders[BEAT_4]-0.25;\n            m -= 0.25;\n            if ( (g_beatPattern&2) == 0 )\n            {\n                r -= 0.125;\n                m -= 0.125;\n            }\n            if ( r > 0.0 )\n            {            \n                float t = r/m;\n\n                float t2 = t*2.0;\n                if ( t2 > 1.0 ) \n                {\n                    t2 = 1.0 - (t2-1.0);\n                }\n                \n                t2 = pow(t2,3.0);\n                \n                float c = sin(3.1459*t)*(uv.x+uv.y)*0.75;\n                             \n                uv *= 1.0+t2*1.5;\n                \n                uv = Rotate(uv,c*6.0*uv.x);\n    \t\t\tuv.x += sin(uv.x*2.0)*0.9*t2;                \n    \t\t\tuv.y += sin(uv.y*4.0)*0.5*t2;                \n                \n            }\n        }\n    }\n    \n        \n    SET_ROTATION(0.0);\n        \n    // Horizontal distortion\n    bool distHoriz = false;\n    bool beatSwapColors = false;\n    \n    if ( g_beatPattern >= 45 && g_beatPattern < 61 ||\n         g_beatPattern >= 69 && g_beatPattern < 85 )\n    {\n        distHoriz = true;\n    }\n    \n    if ( distHoriz && (g_beatPatternTick&1) == 0 )\n    {       \n        if ( mod(uv.y,0.1) < 0.05 )\n        {\n            uv.x += 0.2*mod(g_beat,0.5);            \n        }\n    }\n    \n    ////////////////////////////////////////\n    // Wave effect with circles\n    if ( g_beatPattern < 9 )\n    {\n        c *= -EffectWave1(c,uv);                \n        beatSwapColors = true;\n    }\n    ////////////////////////////////////////\n    // Wave effect second part\n    else if ( g_beatPattern >= 9 && g_beatPattern < 17 )\n    {\n        c *= -EffectWave2(c,uv);        \n        \n        beatSwapColors = true;\n\t}    \n    ////////////////////////////////////////\n    // Flying heads first part\n    else if ( g_beatPattern >= 17 && g_beatPattern <= 44 )\n    {\n        c *= -EffectHeads1(c,uv);        \n    }    \n    ////////////////////////////////////////\n    // Zoom out\n    else if ( g_beatPattern >= 45 && g_beatPattern < 61 ||\n         g_beatPattern >= 69 && g_beatPattern < 85 ||\n         g_beatPattern >= 109 && g_beatPattern < 125 ||\n       \t g_beatPattern >= 141 && g_beatPattern < 157)\n    {\n        c *= -EffectZoomOut(c,uv);\n    }    \n    ////////////////////////////////////////\n    // Heads columns\n    else if ( (g_beatPattern >= 61 && g_beatPattern <= 68) ||\n         (g_beatPattern >= 101 && g_beatPattern <= 108))\n    {\n        c *= -EffectHeadsLine(c,uv);        \n    }\n    ////////////////////////////////////////\n    // Flying heads second part\n    else if ( g_beatPattern >= 85 && g_beatPattern <= 100 )\n    {\n        c *= -EffectHeads2(c,uv);\n    }    \n\t////////////////////////////////////////\n    // Flying (horizontal) heads third part\n    else if ( g_beatPattern >= 125 && g_beatPattern <= 140 )\n    {\n        c *= -EffectHeads3(c,uv);     \n    }    \n    ////////////////////////////////////////\n    // Flying heads end\n    else if ( g_beatPattern >= 157 && g_beatPattern < 169 )\n    {\n        c *= -EffectHeads4(c,uv);\n    }    \n    ////////////////////////////////////////\n    // Wake up final title\n    else if ( g_beatPattern >= 169 )\n    {\n        c *= EffectFinalTitle(c,uv);\n    }\n                        \n    if ( beatSwapColors && (g_beatPatternTick&1) == 0 )\n    {\n        c *= -1.0;\n    }    \n        \n    return c;\n}\n\n////////////////////////////////////\n// Main\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord)\n{\n    const int START_PATTERN = 1;\n    \n    g_time = g_syncWithMusic ? iChannelTime[0] : iTime;\n    \n    g_uv = fragCoord/iResolution.xy - .5;\n    g_uv.x *= -iResolution.x/iResolution.y;    \n    g_uvPrim = g_uv;\n    \n    // Calculate beat remainders\n    const float BPM = 125.0 * 4.0;\n    float beat = g_time / 60.0 * BPM;\n    beat += float(START_PATTERN-1) * 4.0 * 4.0;    \n    for ( int i = 0 ; i < MAX_BEAT_REMAINDERS ; ++ i )\n    {\n    \tg_beatRemainders[i] = mod(beat,1.0*(pow(2.0,float(i)))) / pow(2.0,float(i));\n    }    \n    g_br = g_beatRemainders[BEAT_2];\n    beat = beat / 4.0;    \n    g_beat = beat;\n    g_beatPattern = int(beat) / 4;\n    g_beatPatternTick = int(beat) - g_beatPattern*4;\n    ++g_beatPattern;\n    g_bp = float(g_beatPattern) + float(g_beatPatternTick)*0.1;\n    \n    // Effects\n    float c = -1.0;   \n    \n    c *= Sequence();\n    \n    // Output color\n    vec3 color;\n    if ( c > 0.0 )\n    {\n        color = vec3(79.0/255.0,0.0/255.0,167.0/255.0);\n    }\n    else\n    {\n        color = vec3(244.0/255.0,227.0/255.0,255.0/255.0);\n    }           \n\n    // Grain (disabled, bad recording video quality if enabled)\n    {\n        //color += Rand(g_uv.yx-0.5) * 0.15;\n    }\n    \n    // Vignette\n    {\n    \tvec2 uvScreen = (fragCoord / iResolution.xy * 2.)-1.;\n        float amount = 0.4;\n\t\tfloat v = 1.-dot(uvScreen*0.5,uvScreen*amount);\n\n        // Hue Variation\n        vec3 hsv = RGB2HSV(color);\n        if (hsv.y > 0.5 )\n        {\n            float a = pow(v,0.12+0.1*abs(sin(g_time*0.27)));\n            a = 1.0-a;\n            a *= 0.1 + 0.4*abs(sin(g_time*0.17));\n            hsv.x = mod(hsv.x+a*1.0,1.0);\n            color = HSV2RGB(hsv);\n        }\n        \n        // Dark\n        color *= pow(v,0.4);        \n    }\n    \n    fragColor = vec4(color,1.0);\n\n}\n","name":"Image","description":"","type":"image"}]}