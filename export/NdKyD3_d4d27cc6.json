{"ver":"0.1","info":{"id":"NdKyD3","date":"1655733803","viewed":71,"name":"3 Squares Masking Distancefields","username":"Runar","description":"Three animated squares masking three combined circle distancefields behind.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["distancefields","squares"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Distance from cube\nfloat square(vec2 pos, vec2 coords, float radius) {\n    return step(pos.x - radius, coords.x) * step(pos.y - radius, coords.y) * step(coords.x, pos.x + radius) * step(coords.y, pos.y + radius);\n} \n\n// Distance from circle\nfloat circle(vec2 pos, vec2 coords, float radius) {\n    return distance(pos, coords) / radius;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Screen edge which gives infinite loop illusion\n    float endOfScreenX = iResolution.x;\n\n    // Square declarations\n    float radius1 = 150.;\n    float radius2 = 75.;\n    float radius3 = 40.;\n    float square1 = square(vec2(-radius1 + mod(iTime * 100., endOfScreenX + 2. * radius1), 250. + sin(iTime) * 100.), fragCoord, radius1);\n    float square2 = square(vec2(-radius2 + mod(iTime * 100. - 250., endOfScreenX + 2. * radius2), 300. + sin(iTime * 1.7) * 100.), fragCoord, radius2);\n    float square3 = square(vec2(-radius3 + mod(iTime * 120. + 200., endOfScreenX + 2. * radius3), 300. + sin(iTime * 1.7) * 100.), fragCoord, radius3);\n    \n    // Circle distancefields declarations\n    float d1 = circle(vec2(100, 100), fragCoord, 40.);\n    float d2 = circle(vec2(400, 350), fragCoord, 70.);\n    float d3 = circle(vec2(700, 50), fragCoord, 100.);\n    \n    float col = fract(min(min(d1, d2), min(d2, d3))) * sign(square1 + square2 + square3);\n\n    // Output to screen\n    fragColor = vec4(vec3(col),1.0);\n}","name":"Image","description":"","type":"image"}]}