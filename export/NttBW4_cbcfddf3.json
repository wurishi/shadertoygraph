{"ver":"0.1","info":{"id":"NttBW4","date":"1664538944","viewed":198,"name":"Ray Marching Tutorial Shadertoy","username":"Chinger_Bgr","description":"Процедурная 3D Графика. Ray Marching Tutorial.\nMouse - camera rotation\nUp, Down - camera zoom\nLeft, Right - light move\n\nThanks to Stanislav Petrov\nVideo tutorial\nhttps://www.youtube.com/watch?v=2fcO9RUOGg4&t=18s&ab_channel=StandaloneCoder","likes":6,"published":1,"flags":48,"usePreview":1,"tags":["raymarching"],"hasliked":0,"parentid":"sl3BWn","parentname":"Ray Marching Shader Toy"},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4df3Rr","filepath":"/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","previewfilepath":"/media/ap/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"////////////////////////////////////////////////////////////////\n//\n//             HELPER FUNCTIONS/MACROS\n//\n////////////////////////////////////////////////////////////////\n\nconst float PI = 3.14159265;\nconst float TAU = 2.0 * PI;\nconst float PHI = pow(5.0, 0.5) * 0.5 + 0.5;\n\n\n// Clamp to [0,1] - this operation is free under certain circumstances.\n// For further information see\n// http://www.humus.name/Articles/Persson_LowLevelThinking.pdf and\n// http://www.humus.name/Articles/Persson_LowlevelShaderOptimization.pdf\nfloat saturate(float x) {\n    return clamp(x, 0.0, 1.0);\n}\n\n// Sign function that doesn't return 0\nfloat sgn(float x) {\n\treturn (x < 0.0) ? -1.0 : 1.0;\n}\n\nvec2 sgn(vec2 v) {\n    return vec2(sgn(v.x), sgn(v.y));\n}\n\nfloat square (float x) {\n\treturn x*x;\n}\n\nvec2 square (vec2 x) {\n\treturn x*x;\n}\n\nvec3 square (vec3 x) {\n\treturn x*x;\n}\n\nfloat lengthSqr(vec3 x) {\n\treturn dot(x, x);\n}\n\n\n// Maximum/minumum elements of a vector\nfloat vmax(vec2 v) {\n\treturn max(v.x, v.y);\n}\n\nfloat vmax(vec3 v) {\n\treturn max(max(v.x, v.y), v.z);\n}\n\nfloat vmax(vec4 v) {\n\treturn max(max(v.x, v.y), max(v.z, v.w));\n}\n\nfloat vmin(vec2 v) {\n\treturn min(v.x, v.y);\n}\n\nfloat vmin(vec3 v) {\n\treturn min(min(v.x, v.y), v.z);\n}\n\nfloat vmin(vec4 v) {\n\treturn min(min(v.x, v.y), min(v.z, v.w));\n}\n\n\n\n///////////////////////////////////////////////////////////////\n//\n//             PRIMITIVE DISTANCE FUNCTIONS\n//\n////////////////////////////////////////////////////////////////\n//\n// Conventions:\n//\n// Everything that is a distance function is called fSomething.\n// The first argument is always a point in 2 or 3-space called <p>.\n// Unless otherwise noted, (if the object has an intrinsic \"up\"\n// side or direction) the y axis is \"up\" and the object is\n// centered at the origin.\n//\n////////////////////////////////////////////////////////////////\n\nfloat fSphere(vec3 p, float r) {\n\treturn length(p) - r;\n}\n\n// Plane with normal n (n is normalized) at some distance from the origin\nfloat fPlane(vec3 p, vec3 n, float distanceFromOrigin) {\n\treturn dot(p, n) + distanceFromOrigin;\n}\n\n// Cheap Box: distance to corners is overestimated\nfloat fBoxCheap(vec3 p, vec3 b) { //cheap box\n\treturn vmax(abs(p) - b);\n}\n\n// Box: correct distance to corners\nfloat fBox(vec3 p, vec3 b) {\n\tvec3 d = abs(p) - b;\n\treturn length(max(d, vec3(0.0))) + vmax(min(d, vec3(0.0)));\n}\n\n// Same as above, but in two dimensions (an endless box)\nfloat fBox2Cheap(vec2 p, vec2 b) {\n\treturn vmax(abs(p)-b);\n}\n\nfloat fBox2(vec2 p, vec2 b) {\n\tvec2 d = abs(p) - b;\n\treturn length(max(d, vec2(0.0))) + vmax(min(d, vec2(0.0)));\n}\n\n// Endless \"corner\"\nfloat fCorner (vec2 p) {\n\treturn length(max(p, vec2(0.0))) + vmax(min(p, vec2(0.0)));\n}\n\n// Blobby ball object. You've probably seen it somewhere. This is not a correct distance bound, beware.\nfloat fBlob(vec3 p) {\n\tp = abs(p);\n\tif (p.x < max(p.y, p.z)) p = p.yzx;\n\tif (p.x < max(p.y, p.z)) p = p.yzx;\n\tfloat b = max(max(max(\n\t\tdot(p, normalize(vec3(1.0, 1.0, 1.0))),\n\t\tdot(p.xz, normalize(vec2(PHI + 1.0, 1.0)))),\n\t\tdot(p.yx, normalize(vec2(1.0, PHI)))),\n\t\tdot(p.xz, normalize(vec2(1.0, PHI))));\n\tfloat l = length(p);\n\treturn l - 1.5 - 0.2 * (1.5 / 2.0)* cos(min(sqrt(1.01 - b / l)*(PI / 0.25), PI));\n}\n\n// Cylinder standing upright on the xz plane\nfloat fCylinder(vec3 p, float r, float height) {\n\tfloat d = length(p.xz) - r;\n\td = max(d, abs(p.y) - height);\n\treturn d;\n}\n\n// Capsule: A Cylinder with round caps on both sides\nfloat fCapsule(vec3 p, float r, float c) {\n\treturn mix(length(p.xz) - r, length(vec3(p.x, abs(p.y) - c, p.z)) - r, step(c, abs(p.y)));\n}\n\n// Distance to line segment between <a> and <b>, used for fCapsule() version 2below\nfloat fLineSegment(vec3 p, vec3 a, vec3 b) {\n\tvec3 ab = b - a;\n\tfloat t = saturate(dot(p - a, ab) / dot(ab, ab));\n\treturn length((ab*t + a) - p);\n}\n\n// Capsule version 2: between two end points <a> and <b> with radius r \nfloat fCapsule(vec3 p, vec3 a, vec3 b, float r) {\n\treturn fLineSegment(p, a, b) - r;\n}\n\n// Torus in the XZ-plane\nfloat fTorus(vec3 p, float smallRadius, float largeRadius) {\n\treturn length(vec2(length(p.xz) - largeRadius, p.y)) - smallRadius;\n}\n\n\n////////////////////////////////////////////////////////////////\n//\n//                DOMAIN MANIPULATION OPERATORS\n//\n////////////////////////////////////////////////////////////////\n\n// Rotate around a coordinate axis (i.e. in a plane perpendicular to that axis) by angle <a>.\n// Read like this: R(p.xz, a) rotates \"x towards z\".\n// This is fast if <a> is a compile-time constant and slower (but still practical) if not.\nvoid pR(inout vec2 p, float a) {\n\tp = cos(a)*p + sin(a)*vec2(p.y, -p.x);\n}\n\n// Shortcut for 45-degrees rotation\nvoid pR45(inout vec2 p) {\n\tp = (p + vec2(p.y, -p.x))*sqrt(0.5);\n}\n\n// Repeat space along one axis. Use like this to repeat along the x axis:\n// <float cell = pMod1(p.x,5);> - using the return value is optional.\nfloat pMod1(inout float p, float size) {\n\tfloat halfsize = size * 0.5;\n\tfloat c = floor((p + halfsize) / size);\n\tp = mod(p + halfsize, size) - halfsize;\n\treturn c;\n}\n\n// Repeat in three dimensions\nvec3 pMod3( inout vec3 p, vec3 size ) {\n\tvec3 c = floor((p + size*0.5) / size);\n\tp = mod(p + size*0.5, size) - size*0.5;\n\treturn c;\n}\n\n// Mirror at an axis-aligned plane which is at a specified distance <dist> from the origin.\nfloat pMirror (inout float p, float dist) {\n\tfloat s = sgn(p);\n\tp = abs(p)-dist;\n\treturn s;\n}\n\n// Mirror in both dimensions and at the diagonal, yielding one eighth of the space.\n// translate by dist before mirroring.\nvec2 pMirrorOctant (inout vec2 p, vec2 dist) {\n\tvec2 s = sgn(p);\n\tpMirror(p.x, dist.x);\n\tpMirror(p.y, dist.y);\n\tif (p.y > p.x)\n\t\tp.xy = p.yx;\n\treturn s;\n}\n\n\n////////////////////////////////////////////////////////////////\n//\n//             OBJECT COMBINATION OPERATORS\n//\n////////////////////////////////////////////////////////////////\n\n// The \"Chamfer\" flavour makes a 45-degree chamfered edge (the diagonal of a square of size <r>):\nfloat fOpUnionChamfer(float a, float b, float r) {\n\treturn min(min(a, b), (a - r + b)*sqrt(0.5));\n}\n\n// Intersection has to deal with what is normally the inside of the resulting object\n// when using union, which we normally don't care about too much. Thus, intersection\n// implementations sometimes differ from union implementations.\nfloat fOpIntersectionChamfer(float a, float b, float r) {\n\treturn max(max(a, b), (a + r + b)*sqrt(0.5));\n}\n\n// Difference can be built from Intersection or Union:\nfloat fOpDifferenceChamfer (float a, float b, float r) {\n\treturn fOpIntersectionChamfer(a, -b, r);\n}\n\n// The \"Round\" variant uses a quarter-circle to join the two objects smoothly:\nfloat fOpUnionRound(float a, float b, float r) {\n\tvec2 u = max(vec2(r - a,r - b), vec2(0));\n\treturn max(r, min (a, b)) - length(u);\n}\n\nfloat fOpIntersectionRound(float a, float b, float r) {\n\tvec2 u = max(vec2(r + a,r + b), vec2(0));\n\treturn min(-r, max (a, b)) + length(u);\n}\n\nfloat fOpDifferenceRound(float a, float b, float r) {\n\treturn fOpIntersectionRound(a, -b, r);\n}\n\n\n// The \"Columns\" flavour makes n-1 circular columns at a 45 degree angle:\nfloat fOpUnionColumns(float a, float b, float r, float n) {\n\tif ((a < r) && (b < r)) {\n\t\tvec2 p = vec2(a, b);\n\t\tfloat columnradius = r * sqrt(2.0) / ((n - 1.0) * 2.0 + sqrt(2.0));\n\t\tpR45(p);\n\t\tp.x -= sqrt(2.0) / 2.0 * r;\n\t\tp.x += columnradius * sqrt(2.0);\n\t\tif (mod(n, 2.0) == 1.0) {\n\t\t\tp.y += columnradius;\n\t\t}\n\t\t// At this point, we have turned 45 degrees and moved at a point on the\n\t\t// diagonal that we want to place the columns on.\n\t\t// Now, repeat the domain along this direction and place a circle.\n\t\tpMod1(p.y, columnradius * 2.0);\n\t\tfloat result = length(p) - columnradius;\n\t\tresult = min(result, p.x);\n\t\tresult = min(result, a);\n\t\treturn min(result, b);\n\t} else {\n\t\treturn min(a, b);\n\t}\n}\n\nfloat fOpDifferenceColumns(float a, float b, float r, float n) {\n\ta = -a;\n\tfloat m = min(a, b);\n\t//avoid the expensive computation where not needed (produces discontinuity though)\n\tif ((a < r) && (b < r)) {\n\t\tvec2 p = vec2(a, b);\n\t\tfloat columnradius = r*sqrt(2.0) / n / 2.0;\n\t\tcolumnradius = r * sqrt(2.0) / ((n - 1.0) * 2.0 + sqrt(2.0));\n\n\t\tpR45(p);\n\t\tp.y += columnradius;\n\t\tp.x -= sqrt(2.0) / 2.0 * r;\n\t\tp.x += -columnradius*sqrt(2.0) / 2.0;\n\n\t\tif (mod(n, 2.0) == 1.0) {\n\t\t\tp.y += columnradius;\n\t\t}\n\t\tpMod1(p.y, columnradius * 2.0);\n\n\t\tfloat result = -length(p) + columnradius;\n\t\tresult = max(result, p.x);\n\t\tresult = min(result, a);\n\t\treturn -min(result, b);\n\t} else {\n\t\treturn -m;\n\t}\n}\n\nfloat fOpIntersectionColumns(float a, float b, float r, float n) {\n\treturn fOpDifferenceColumns(a,-b,r, n);\n}\n\n// The \"Stairs\" flavour produces n-1 steps of a staircase:\n// much less stupid version by paniq\nfloat fOpUnionStairs(float a, float b, float r, float n) {\n\tfloat s = r/n;\n\tfloat u = b-r;\n\treturn min(min(a, b), 0.5 * (u + a + abs((mod(u - a + s, 2.0 * s)) - s)));\n}\n\n// We can just call Union since stairs are symmetric.\nfloat fOpIntersectionStairs(float a, float b, float r, float n) {\n\treturn -fOpUnionStairs(-a, -b, r, n);\n}\n\nfloat fOpDifferenceStairs(float a, float b, float r, float n) {\n\treturn -fOpUnionStairs(-a, b, r, n);\n}\n\n\n// Similar to fOpUnionRound, but more lipschitz-y at acute angles\n// (and less so at 90 degrees). Useful when fudging around too much\n// by MediaMolecule, from Alex Evans' siggraph slides\nfloat fOpUnionSoft(float a, float b, float r) {\n\tfloat e = max(r - abs(a - b), 0.0);\n\treturn min(a, b) - e * e * 0.25 / r;\n}\n\n\n// produces a cylindical pipe that runs along the intersection.\n// No objects remain, only the pipe. This is not a boolean operator.\nfloat fOpPipe(float a, float b, float r) {\n\treturn length(vec2(a, b)) - r;\n}\n\n// first object gets a v-shaped engraving where it intersect the second\nfloat fOpEngrave(float a, float b, float r) {\n\treturn max(a, (a + r - abs(b))*sqrt(0.5));\n}\n\n// first object gets a capenter-style groove cut out\nfloat fOpGroove(float a, float b, float ra, float rb) {\n\treturn max(a, min(a + ra, rb - abs(b)));\n}\n\n// first object gets a capenter-style tongue attached\nfloat fOpTongue(float a, float b, float ra, float rb) {\n\treturn min(a, max(a - ra, abs(b) - rb));\n}\n\n\n////////////////////////////////////////////////////////////////\n//\n//                          Ray Marching\n//\n////////////////////////////////////////////////////////////////     \n\nvec2 getKeybordCoord() {\n    return vec2(\n    \ttexelFetch(iChannel0, ivec2(0, 0), 0).r,\n        texelFetch(iChannel0, ivec2(1, 0), 0).r\n    );\n}\n\n\n////////////////////////////////////////////////////////////////\n//\n//                          Ray Marching\n//\n//     \n//\n//    \n////////////////////////////////////////////////////////////////\n\nconst float FOV = 1.0;\nconst int MAX_STEPS = 128;\nconst float MAX_DIST = 500.0;\nconst float EPSILON = 0.015;\n\n// choose antialising - 1 2 3 4\nconst int AA = 4;  \n\nconst float cubeSize = 6.0;\n\nfloat cubeScale = 1.0 / cubeSize;\nfloat cubeBumpFactor = 0.1;\nfloat roofScale = 0.15;\nfloat roofBumpFactor = 0.1;\nfloat wallScale = 0.12;\nfloat wallBumpFactor = 0.05;\n\n\nvoid translateCube(inout vec3 p) {\n    p.y -= 2.5;\n    p.xz += 1.5;\n}\n\nvoid rotateCube(inout vec3 p) {\n    pR(p.yz, PI / 4.0);\n    pR(p.xz, iTime);\n}\n\nvec3 triPlanar(sampler2D tex, vec3 p, vec3 normal) {\n    normal = abs(normal);\n    normal = pow(normal, vec3(5.0));\n    normal /= normal.x + normal.y + normal.z;\n    return (texture(tex, p.xy * 0.5 + 0.5) * normal.z +\n            texture(tex, p.xz * 0.5 + 0.5) * normal.y +\n            texture(tex, p.yz * 0.5 + 0.5) * normal.x).rgb;\n}\n\nfloat bumpMapping(sampler2D tex, vec3 p, vec3 n, float dist, float factor, float scale) {\n    float bump = 0.0;\n    if (dist < 0.1) {\n        vec3 normal = normalize(n);\n        bump += factor * triPlanar(tex, (p * scale), normal).r;\n    }\n    return bump;\n}\n\nfloat fDisplace(vec3 p) {\n    pR(p.yz, sin(2.0 * iTime));\n    return (sin(p.x + 4.0 * iTime) * sin(p.y + sin(2.0 * iTime)) * sin(p.z + 6.0 * iTime));\n}\n\nvec2 fOpUnionID(vec2 res1, vec2 res2) {\n    return (res1.x < res2.x) ? res1 : res2;\n}\n\nvec2 fOpDifferenceID(vec2 res1, vec2 res2) {\n    return (res1.x > -res2.x) ? res1 : vec2(-res2.x, res2.y);\n}\n\nvec2 fOpDifferenceColumnsID(vec2 res1, vec2 res2, float r, float n) {\n    float dist = fOpDifferenceColumns(res1.x, res2.x, r, n);\n    return (res1.x > -res2.x) ? vec2(dist, res1.y) : vec2(dist, res2.y);\n}\n\nvec2 fOpUnionStairsID(vec2 res1, vec2 res2, float r, float n) {\n    float dist = fOpUnionStairs(res1.x, res2.x, r, n);\n    return (res1.x < res2.x) ? vec2(dist, res1.y) : vec2(dist, res2.y);\n}\n\nvec2 fOpUnionChamferID(vec2 res1, vec2 res2, float r) {\n    float dist = fOpUnionChamfer(res1.x, res2.x, r);\n    return (res1.x < res2.x) ? vec2(dist, res1.y) : vec2(dist, res2.y);\n}\n\n\nvec2 map(vec3 p) {\n    // cube\n    vec3 pb = p;\n    translateCube(pb);\n    rotateCube(pb);\n    float cubeDist = fBoxCheap(pb, vec3(cubeSize));\n    cubeDist -= bumpMapping(iChannel1, pb, pb + cubeBumpFactor, cubeDist, cubeBumpFactor, cubeScale);\n    cubeDist += cubeBumpFactor;\n    float cubeID = 5.0;\n    vec2 cube = vec2(cubeDist, cubeID);\n    \n    // plane\n    float planeDist = fPlane(p, vec3(0.0, 1.0, 0.0), 14.0);\n    float planeID = 2.0;\n    vec2 plane = vec2(planeDist, planeID);\n    \n    // torus\n    // vec3 pt = p + 0.2;\n    // pt.y -= 8.0;\n    // pR(pt.yx, 4.0 * iTime);\n    // pR(pt.yz, 0.3 * iTime);\n    // float torusDist = fTorus(pt, 0.7, 16.0);\n    // float torusID = 5.0;\n    // vec2 torus = vec2(torusDist, torusID);\n\n    // sphere\n    // vec3 ps = p + 0.2;\n    // ps.y -= 8.0;\n    // float sphereDist = fSphere(ps, 13.0 + fDisplace(p));\n    // float sphereID = 1.0;\n    // vec2 sphere = vec2(sphereDist, sphereID);\n    \n    // manipulation operators\n    pMirrorOctant(p.xz, vec2(50.0, 50.0));\n    p.x = -abs(p.x) + 20.0;\n    \n    // repeat axis Z\n    pMod1(p.z, 15.0);\n    \n    // roof\n    vec3 pr = p;\n    pr.y -= 15.7;\n    pR(pr.xy, 0.6);\n    pr.x -= 18.0;\n    float roofDist = fBox2Cheap(pr.xy, vec2(20, 0.5));\n    roofDist -= bumpMapping(iChannel2, p, p - roofBumpFactor, roofDist, roofBumpFactor, roofScale);\n    roofDist += roofBumpFactor;\n    float roofID = 8.0; // 4.0;\n    vec2 roof = vec2(roofDist, roofID);\n    \n    // box\n    float boxDist = fBox(p, vec3(3.0, 9.0, 4.0));\n    float boxID = 7.0; //  3.0;\n    vec2 box = vec2(boxDist, boxID);\n    \n    // cylinder\n    vec3 pc = p;\n    pc.y -= 9.0;\n    float cylinderDist = fCylinder(pc.yxz, 4.0, 3.0);\n    float cylinderID = 7.0; // 3.0;\n    vec2 cylinder = vec2(cylinderDist, cylinderID);\n    \n    // wall\n    // float wallDist = fBox2Cheap(p.xy, vec2(1, 15));\n    // float wallID = 3.0;\n    // vec2 wall = vec2(wallDist, wallID);\n    \n    // wall\n    float wallDist = fBox2Cheap(p.xy, vec2(1, 15));\n    wallDist -= bumpMapping(iChannel3, p, p + wallBumpFactor, wallDist, wallBumpFactor, wallScale);\n    wallDist += wallBumpFactor;\n    float wallID = 7.0;\n    vec2 wall = vec2(wallDist, wallID);\n    \n\n    // result\n    vec2 res = cylinder;\n    res = fOpUnionID(res, box);\n    res = fOpDifferenceColumnsID(wall, res, 0.6, 3.0);\n    res = fOpUnionChamferID(res, roof, 0.6);\n    \n    res = fOpUnionStairsID(res, plane, 4.0, 5.0);\n    // res = fOpUnionID(res, sphere);\n    res = fOpUnionID(res, cube);\n    \n    // res = fOpUnionID(res, torus);\n    //res = plane;\n    return res;\n}\n\n\n//vec2 rayMarch(vec3 ro, vec3 rd) {\nvec3 rayMarch(vec3 ro, vec3 rd) {\n    //vec2 hit, object;\n    vec2 hit;\n    vec3 object;\n    for (int i = 0; i < MAX_STEPS; i++) {\n        vec3 p = ro + object.x * rd;\n        hit = map(p);\n        object.x += hit.x;\n        object.y = hit.y;\n        \n        object.z = float(i);\n        if (abs(hit.x) < EPSILON || object.x > MAX_DIST) break;\n    }\n    return object;\n}\n\n\nvec3 getNormal(vec3 p) {\n    vec2 e = vec2(EPSILON, 0.0);\n    vec3 n = vec3(map(p).x) - vec3(map(p - e.xyy).x, map(p - e.yxy).x, map(p - e.yyx).x);\n    return normalize(n);\n}\n\nvec3 getMaterial(vec3 p, float id, vec3 normal) {\n    vec3 m;\n    switch (int(id)) {\n        case 1:\n        m = vec3(0.9, 0.0, 0.0); break;\n        \n        case 2:\n        m = vec3(0.2 + 0.4 * mod(floor(p.x) + floor(p.z), 2.0)); break;\n        \n        // case 3:\n        // m = vec3(0.7, 0.8, 0.9); break;\n        \n        // case 4:\n        // vec2 i = step(fract(0.5 * p.xz), vec2(1.0 / 10.0));\n        // m = ((1.0 - i.x) * (1.0 - i.y)) * vec3(0.37, 0.12, 0.0); break;\n        \n        case 5:\n        // m = vec3(0.2, 0.9, 0.5); break;\n        translateCube(p);\n        rotateCube(p);\n        rotateCube(normal);\n        m = triPlanar(iChannel1, p * cubeScale, normal); break;\n        \n        // walls\n        case 7:\n        m = triPlanar(iChannel3, p * wallScale, normal); break;\n        \n        // roof\n        case 8:\n        m = triPlanar(iChannel2, p * roofScale, normal); break;\n        \n        default:\n        m = vec3(0.4); break;\n    }\n    return m;\n}\n\nfloat getSoftShadow(vec3 p, vec3 lightPos) {\n    float res = 1.0;\n    float dist = 0.01;\n    float lightSize = 0.03;\n    for (int i = 0; i < MAX_STEPS; i++) {\n        float hit = map(p + lightPos * dist).x;\n        res = min(res, hit / (dist * lightSize));\n        dist += hit;\n        if (hit < 0.0001 || dist > 60.0) break;\n    }\n    return clamp(res, 0.0, 1.0);\n}\n\nfloat getAmbientOcclusion(vec3 p, vec3 normal) {\n    float occ = 0.0;\n    float weight = 1.0;\n    for (int i = 0; i < 8; i++) {\n        float len = 0.01 + 0.02 * float(i * i);\n        float dist = map(p + normal * len).x;\n        occ += (len - dist) * weight;\n        weight *= 0.85;\n    }\n    return 1.0 - clamp(0.6 * occ, 0.0, 1.0);\n}\n\nvec3 getLight(vec3 p, vec3 rd, float id, float iterations) {\n\n    float dist = 1.0 - getKeybordCoord().x / iResolution.x;\n\n    vec3 lightPos = vec3(10.0, 55.0, -20.0);\n    lightPos.xz *= dist;\n    \n    vec3 L = normalize(lightPos - p);\n    vec3 N = getNormal(p);\n    \n    vec3 V = -rd;\n    vec3 R = reflect(-L, N);\n\n    vec3 color = getMaterial(p, id, N);\n\n    vec3 specColor = vec3(0.5);\n    vec3 specular = specColor * pow(clamp(dot(R, V), 0.0, 1.0), 10.0);\n    vec3 diffuse = color * clamp(dot(L, N), 0.0, 1.0);\n    vec3 ambient = color * 0.05;\n    vec3 fresnel = 0.25 * color * pow(1.0 + dot(rd, N), 3.0);\n\n    // shadows\n    float shadow = getSoftShadow(p + N * 0.02, normalize(lightPos));\n    \n    // occ\n    float occ = getAmbientOcclusion(p, N);\n    //float occ = 1.0 / iterations;\n\n    \n    // back\n    vec3 back = 0.05 * color * clamp(dot(N, -L), 0.0, 1.0);\n    \n    //return 0.9 * vec3(1.0) * occ;\n    //return back;\n    return (back + ambient + fresnel) * occ + (specular * occ + diffuse) * shadow;\n    \n}\n\n\nmat3 getCam(vec3 ro, vec3 lookAt) {\n    vec3 camF = normalize(vec3(lookAt - ro));\n    vec3 camR = normalize(cross(vec3(0, 1, 0), camF));\n    vec3 camU = cross(camF, camR);\n    return mat3(camR, camU, camF);\n}\n\n\nvoid mouseControl(inout vec3 ro) {\n    vec2 m = iMouse.xy / iResolution.xy;\n    pR(ro.yz, m.y * PI * 0.4 - 0.4);\n    pR(ro.xz, m.x * TAU);\n}\n\n\nvec3 render(vec2 uv )\n{\n    vec3 col = vec3(0.0);\n    \n    float dist = 1.0 - getKeybordCoord().y / iResolution.y;\n    //dist *= 1.0;\n    \n    vec3 ro = vec3(36.0, 19.0, -36.0) * dist;\n    mouseControl(ro);\n    \n    vec3 lookAt = vec3(0.0, 0.0, 0.0);\n    vec3 rd = getCam(ro, lookAt) * normalize(vec3(uv, FOV));\n    \n    //vec2 object = rayMarch(ro, rd);\n    vec3 object = rayMarch(ro, rd);\n    \n    vec3 background = vec3(0.5, 0.8, 0.9);\n    \n    if (object.x < MAX_DIST) {\n        vec3 p = ro + object.x * rd;\n        col += getLight(p, rd, object.y, object.z);\n        //col += getLight(p, rd, object.y);\n        // fog\n        col = mix(col, background, 1.0 - exp(-0.00002 * object.x * object.x));\n    } else {\n        col += background - max(0.9 * rd.y, 0.0);\n    }\n    return col;\n}\n\n\nvec2 getUV(vec2 offset, in vec2 fragCoord) {\n    // Normalized pixel coordinates (from -1 to 1) + offset\n    return (2.0 * (fragCoord + offset) - iResolution.xy) / iResolution.y;\n}\n\n\nvec3 renderAAx1(in vec2 fragCoord) {\n    return render(getUV(vec2(0.0), fragCoord));\n}\n\n\nvec3 renderAAx2(in vec2 fragCoord) {\n    float bxy = float(int(fragCoord.x + fragCoord.y) & 1);\n    float nbxy = 1.0 - bxy;\n    vec3 colAA = (render(getUV(vec2(0.33 * nbxy, 0.), fragCoord)) + render(getUV(vec2(0.33 * bxy, 0.66), fragCoord)));\n    return colAA / 2.0;\n}\n\n\nvec3 renderAAx3(in vec2 fragCoord) {\n    float bxy = float(int(fragCoord.x + fragCoord.y) & 1);\n    float nbxy = 1.0 - bxy;\n    vec3 colAA = (render(getUV(vec2(0.66 * nbxy, 0.0), fragCoord)) +\n                  render(getUV(vec2(0.66 * bxy, 0.66), fragCoord)) +\n                  render(getUV(vec2(0.33, 0.33), fragCoord)));\n    return colAA / 3.0;\n}\n\n\nvec3 renderAAx4(in vec2 fragCoord) {\n    vec4 e = vec4(0.125, -0.125, 0.375, -0.375);\n    vec3 colAA = render(getUV(e.xz, fragCoord)) + render(getUV(e.yw, fragCoord)) + \n        render(getUV(e.wx, fragCoord)) + render(getUV(e.zy, fragCoord));\n    return colAA /= 4.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Render\n    vec3 color = (AA == 1) ? renderAAx1(fragCoord) : (AA == 2) ? renderAAx2(fragCoord) : (AA == 3) ? renderAAx3(fragCoord): renderAAx4(fragCoord);\n    \n    // gamma correction\n    color = pow(color, vec3(0.4545));\n\n    // Output to screen\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const int KEY_LEFT  = 37;\nconst int KEY_UP    = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN  = 40;\n\nconst float speed = 500.0;\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float outData = 0.0;\n    \n    switch(int(fragCoord.x)) {\n        case 0:\n        \toutData = texelFetch(iChannel0, ivec2(0), 0).r +\n                (iTimeDelta * speed) * texelFetch(iChannel1, ivec2(KEY_RIGHT, 0), 0).r -\n                (iTimeDelta * speed) * texelFetch(iChannel1, ivec2(KEY_LEFT, 0), 0).r;\n        \tbreak;\n        \n        case 1:\n        \toutData = texelFetch(iChannel0, ivec2(1, 0), 0).r +\n                (iTimeDelta * speed) * texelFetch(iChannel1, ivec2(KEY_UP, 0), 0).r -\n        \t\t(iTimeDelta * speed) * texelFetch(iChannel1, ivec2(KEY_DOWN, 0), 0).r;\n        \tbreak;\n    }\n    \n    fragColor = vec4(outData, 0.0, 0.0, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}