{"ver":"0.1","info":{"id":"l3KGRd","date":"1719281192","viewed":34,"name":"SunflowerSpiral","username":"Grendor","description":"Sunflower","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["sun","flower"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Function to calculate the star color at a given time\nvec3 starColor(vec2 uv, vec2 center, float iTime, float timeOffset, float starSize)\n{\n    vec2 pos = uv - center;\n    float dist = length(pos)*0.5;\n\n    // Create a radial gradient for the star\n    float gradient = smoothstep(starSize, starSize * 0.05, dist);\n\n    // Add spikes for diffraction effect with random lengths\n    float angle = atan(pos.y, pos.x);\n    float randLength = fract(sin(dot(pos * 5.0, vec2(12.9898, 78.233))) * 43758.5453) ;\n    float spikes = abs(sin(angle * 5. + (-iTime + timeOffset) * 5.0)) * 0.15 * randLength;\n    float spikeGradient = smoothstep(starSize * 0.25, 0.0, dist - spikes);\n\n    // Combine gradients\n    float combinedGradient = max(gradient, spikeGradient);\n\n    // Add some sparkle effect\n    float sparkle = abs(sin((iTime * 0.1 + timeOffset)  + dist * 100.0)) * 0.65 + 0.14;\n    sparkle = pow(sparkle, 4.0) * combinedGradient; // Increase sharpness of the sparkle\n\n    // Color the star\n    vec3 color = vec3(1.0, 0.6, 0.3) * sparkle;\n\n    // Add twinkling effect\n    float twinkle = sin((iTime * 0.1 + timeOffset) ) * 0.15 + 0.35;\n    twinkle = pow(twinkle, 1.0) * combinedGradient;\n    color += vec3(0.78, 0.3, 0.15) * twinkle * combinedGradient;\n\n    return color;\n}\n\n// Function to apply Gaussian blur\nvec3 gaussianBlur(vec2 uv, vec2 resolution, float radius)\n{\n    vec3 color = vec3(0.0);\n    float total = 0.0;\n    float sigma = radius * (uv.x/uv.y);\n\n    for (int x = -4; x <= 4; x++)\n    {\n        for (int y = -4; y <= 4; y++)\n        {\n            vec2 offset = vec2(float(x), float(y)) * sigma / resolution;\n            float weight = exp(-0.015 * dot(offset, offset) / ( sigma));\n            \n            vec2 sampleUV = (uv + offset);\n            \n            vec2 center = vec2(0.5, 0.5);\n            vec3 sampleColor1 = starColor(sampleUV, center, iTime * 0.1, 0.0, 0.005);\n            vec3 sampleColor2 = starColor(sampleUV, center, iTime* 0.12, 0.01, 0.0015);\n            vec3 sampleColor3 = starColor(sampleUV, center, iTime* 0.11, 0.02, 0.0025);\n            vec3 sampleColor = mix(sampleColor1, sampleColor2 + sampleColor3, abs(sin(iTime*0.4)));\n            color += sampleColor * weight;\n            total += weight;\n        }\n    }\n\n    return color / total;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    uv.y *= 0.76;\n    uv.y += 0.13;\n    vec2 center = vec2(0.5, 0.5);\n    float starSize = 0.1 ;\n\n    // Calculate the star color at two different time offsets\n    vec3 color1 = starColor(uv, center, iTime, 0.93, starSize* 0.7);\n    vec3 color2 = starColor(uv, center, iTime, 0.91, starSize* 0.8);\n    vec3 color3 = starColor(uv, center, iTime, 0.92, starSize * 0.9);\n\n    // Blend the two colors\n    vec3 starColor = color1*0.5 + color2* 0.3 + color3 * 0.2;\n\n    // Apply Gaussian blur to the star color to simulate bloom\n    vec3 blurredBloom = gaussianBlur(uv, iResolution.xy, 2.0);\n\n    // Combine the original star color with the blurred bloom effect\n    vec3 finalColor = starColor + blurredBloom * 8.845;\n\n    // Set the background color to black\n    vec3 bgColor = vec3(0.0);\n\n    // Mix the star color with the background\n    fragColor = vec4(mix(bgColor, finalColor, 1.0), 1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.1,0.10,0.1,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}