{"ver":"0.1","info":{"id":"Xl2XDm","date":"1444265578","viewed":180,"name":"Basic Fractal - Forked","username":"ddrcoder","description":"Based on https://www.shadertoy.com/view/Mss3Wf","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"//Basic fractal by @paulofalcao\n\nconst int maxIterations=8;//a nice value for fullscreen is 8\n\nfloat circleSize = 0.5 * pow(2.0, -float(maxIterations));\n\n//generic rotation formula\nvec2 rot(vec2 uv,float a){\n\treturn vec2(uv.x*cos(a)-uv.y*sin(a),uv.y*cos(a)+uv.x*sin(a));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\t//normalize stuff\n\tvec2 size = iResolution.xy;\n    vec2 uv = -.5 * (size - 2.0 * fragCoord.xy) / size.x;\n\n    float t = iTime * 0.5;\n    t = t - sin(t);\n\t//global rotation and zoom\n\tuv = rot(uv, t);\n\tuv *= sin(t) * 0.5 + 1.5;\n\t\n\t//mirror, rotate and scale N times...\n\tfloat s=0.3;\n\tfor(int i=0;i<maxIterations;i++){\n\t\tuv=abs(uv)-s;\n\t\tuv=rot(uv, t);\n\t\ts=s/2.0;\n\t}\n\t\n\t//draw a circle\n\tfloat c = size.x * (circleSize - length(uv));\n\tfragColor = vec4(c,c,c,1.0);\n}","name":"","description":"","type":"image"}]}