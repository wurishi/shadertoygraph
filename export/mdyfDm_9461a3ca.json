{"ver":"0.1","info":{"id":"mdyfDm","date":"1698279713","viewed":42,"name":"4-centered arch","username":"stb","description":"A bit of gothic architecture.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["math","distance","function","geometry","temple","architecture","gothic","islamic","estimate","classical"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n    4-centered arch\n    \n    2023 stb\n    \n    To do (maybe): round out the top point.\n*/\n\n/*\n    4-centered arch function\n        p = input coordinate\n        c = corner circle center\n        r = corner circle radius\n*/\nfloat fourCenteredArch(in vec2 p, in vec2 c, in float r){\n    // prevent values < 0.\n    c.y = max(0., c.y);\n    r = max(0., r);\n\n    // mirror x\n    p.x = abs(p.x);\n    \n    // intersection between 1st circle and vertical center line\n    vec2 is = vec2(0., c.y-sqrt(pow(c.x*2., 2.)-c.x*c.x));\n    \n    // 2nd circle's position and radius\n    vec2 c2 = is - c + is;\n    \n    return\n        // choose between upper & lower parts at 1st circle\n        p.y < c.y ?\n            // walls and floor\n            length(max(vec2(0.), vec2(p.x-c.x-r, -p.y))) :\n            // choose between circles at intersection, with angle\n            dot(p-c, vec2(-is.y+c.y, -c.x)) < 0. ?\n                // 2nd circle\n                max(0., length(p-c2) - r - length(c2-c)) :\n                // 1st circle\n                max(0., length(p-c) - r);\n}\n\n// visualization functions\nfloat line(in vec2 p, vec2 p0, vec2 p1, float th) {\n    float l = .5 * length(p1-p0);\n    if(l>0.) {\n        vec2 d = normalize(p1-p0);\n        p = mat2(d.y, d.x, -d.x, d.y) * (p-p0);\n        p.y = max(0., abs(p.y-l)-l);\n    }\n    return length(p) / th;\n}\nfloat circle(vec2 p, float r, float th) {\n    return abs(length(p)-r) / th;\n}\nfloat fourCenteredArch_geom(vec2 p, in vec2 c, float r){\n    // prevent values < 0.\n    c.y = max(0., c.y);\n    r = max(0., r);\n\n    // intersection between 1st circle and vertical center line\n    vec2 is = vec2(0., c.y-sqrt(pow(c.x*2., 2.)-c.x*c.x));\n    \n    // 2nd circle cener making up the arch\n    vec2 c2 = is - c + is;\n    \n    // radius 2\n    float r2 = r + length(c2-c);\n    \n    // center horizontal and vertical (x==0., y==0.)\n    float f = min(abs(p.x), abs(p.y));\n    \n    // horizontal line to opposing crossline\n    f = min(f, line(p, vec2(-c.x, c.y), c, 1.));\n    \n    // circle 1\n    f = min(f, circle(p-c, r, 1.));\n    \n    // circle temp\n    f = min(f, circle(p-c, c.x*2., 1.));\n    \n    // circle 2\n    f = min(f, circle(p-c2, r2, 1.));\n    \n    // circle temp radius intersection with vertical\n    f = min(f, line(p, c+r*normalize(c-is), c2, 1.));\n    \n    return f;\n}\n\nvoid mainImage( out vec4 fo, in vec2 fc ) {\n\tvec2 res = iResolution.xy;\n\tvec2 p = (fc-res/2.) / res.y;\n    vec2 m = (iMouse.xy-res/2.) / res.y;\n\t\n\t// a couple of variables\n    float\n        zoom = .73,\n        t = .5 * iTime;\n    \n    // set up canvas\n    p /= zoom;\n    m /= zoom;\n    p.y += .5;\n    m.y += .5;\n    \n    // \\/ these two things control the arch shape\n    \n    // arch circle center\n    vec2 c =\n        iMouse.z > 0. ?\n        m :\n        .2 * vec2(1.+.4*cos(t), 2.2+.5*sin(t));\n    \n    // arch circle radius\n    float r = .2 + .19 * cos(t*.73-.7);\n    \n    // /\\\n    \n    // arch distance\n    float arch = fourCenteredArch(p, c, r);\n    \n    // antialiasing float\n    float aa = 2.7 / res.y / zoom;\n    \n    // draw 4-centered arch\n    vec3 col =\n        mix(\n            vec3(1.),\n            vec3(1., .7, .3) * abs(fract(arch*8.-.5)-.5) - arch + .5,\n            clamp(arch/aa, 0., 1.)\n        );\n    \n    // draw guides\n    //if(iMouse.z<=0.)\n    if(iMouse.z>0.)\n        col =\n            mix(\n                col,\n                vec3(.2, .5, 1.),\n                min(1., max(0., 1.-(fourCenteredArch_geom(p, c, r)-.0/res.y)/aa))\n            );\n    \n\tfo = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"}]}