{"ver":"0.1","info":{"id":"4dKfzd","date":"1530056177","viewed":457,"name":"Chaotic drawing","username":"saidwho12","description":"RMB to drop particles, R to reset.\nhave fun tweaking the code :D\nyou can change the Texture in Buf A.","likes":9,"published":1,"flags":48,"usePreview":0,"tags":["2d","sobel","texture","particles"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord/iResolution.xy;\n\tfragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define _VELOCITY_DAMPING 0.6\n#define _EDGE_VELOCITY_MULTIPLIER 0.005\n#define _RANDOM_VELOCITY_MULTIPLIER 0.005\n\n#define _SQR(x) (x*x)\n\nfloat luminosity( in vec3 color ) {\n\treturn sqrt(.299*_SQR(color.r)+.587*_SQR(color.g)+.114*_SQR(color.b));\n}\n\nvec2 sobel( in sampler2D sampler, in vec2 fragCoord ) {\n   \tconst vec3 A = vec3(1,2,1), B = vec3(-1,0,1), C = vec3(1);\n// macro for sampling texture luminosity\n#define _STL(x, y) luminosity(texture(sampler, (fragCoord+vec2(x,y))/iResolution.xy).rgb)\n#define _STLDOT(a, b) dot(vec3(_STL(a.x, b.x), _STL(a.y, b.y), _STL(a.z, b.z)), A)   \n    return vec2(_STLDOT(-C,B) - _STLDOT(C,B),_STLDOT(B,-C) - _STLDOT(B,C));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    //fragColor += length(sobel(iChannel1, fragCoord));\n    \n    vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.xy;\n    fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n   \n    if(fragCoord.y < 1.0) {\n        if(iMouse.z > 0.0) {\n            fragColor.xy = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n            fragColor.zw *= 0.0;\n        }\n        else if(_KEY(82)) {\n            fragColor.xy = hash22(p*iTime)*2.0-1.0;\n            fragColor.zw *= 0.0;\n        }            \n        // fetch texture edge orientation and get it's orthogonal vector\n        vec2 g = sobel(iChannel1, (fragColor.xy*0.5+0.5)*iResolution.xy);\n        vec2 gortho = vec2(-g.y, g.x);\n        fragColor.zw += _EDGE_VELOCITY_MULTIPLIER * gortho; // move in the edge's direction\n        fragColor.zw += _RANDOM_VELOCITY_MULTIPLIER * \n            (hash22(abs(p)*fract(iTime))*2.0-1.0); // add a bit of randomness\n        // add velocity to position and wrap\n        fragColor.xy += fragColor.zw;\n        \n        fragColor.xy = (fract(0.5*fragColor.xy+0.5)*2.0-1.0);\n        \n        // velocity damping\n        fragColor.zw *= _VELOCITY_DAMPING;\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define HASHSCALE1 443.8975\n#define HASHSCALE3 vec3(443.897, 441.423, 437.195)\n#define HASHSCALE4 vec4(443.897, 441.423, 437.195, 444.129)\n\nfloat hash11(float p)\n{\n\tvec3 p3  = fract(vec3(p) * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * HASHSCALE3);\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * HASHSCALE3);\n    p3 += dot(p3, p3.yxz+19.19);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n\n}\n\nvec4 hash41(float p)\n{\n\tvec4 p4 = fract(vec4(p) * HASHSCALE4);\n    p4 += dot(p4, p4.wzxy+19.19);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n    \n}\n\n#define _KEY(i) (texelFetch(iChannel3, ivec2(i, 1), 0).x > 0.)\n\n// if using webcam, uncomment\n//#define _USING_WEBCAM","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"#define _PARTICLE_OPACITY 0.1\n#define _FRAMEBUFFER_DAMPING 0.999\n\n#define T(x) texelFetch(iChannel0, ivec2(x), 0)\n#define P(x) texelFetch(iChannel1, ivec2(x, 0), 0)\n\nvec3 hsv2rgb( in vec3 c ) {\n    vec3 rgb = clamp( abs(mod(c.x*6.+vec3(0.,4.,2.),6.)-3.)-1., 0., 1.);\n\trgb = rgb*rgb*(3.-2.*rgb); // cubic smoothing\n\treturn c.z * mix(vec3(1.), rgb, c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n   \tvec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    for(float i = 0.0; i<iResolution.x; i++) { // feth points from first row\n        vec3 col = hsv2rgb(vec3(hash11(i), 0.6, 1.0));\n        vec4 pt = P(i);\n        fragColor.rgb += col*(1.0-smoothstep(0.0, 3.0/iResolution.y, length(p-pt.xy)-1e-3));\n    }\n    \n   \tvec4 fb = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    fragColor = _KEY(82) ? vec4(0) : clamp(_FRAMEBUFFER_DAMPING * fb\n                                           +_PARTICLE_OPACITY*fragColor, 0.0,1.0);\n}","name":"Buffer B","description":"","type":"buffer"}]}