{"ver":"0.1","info":{"id":"cls3WH","date":"1671698326","viewed":63,"name":"star test outwards","username":"fanna1119","description":"star test","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["star"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  // Normalized pixel coordinates (from 0 to 1)\n  vec2 uv = fragCoord.xy/iResolution.xy;\n  \n  // Polar coordinates of the pixel\n  float r = length(uv);\n  float a = atan(uv.y, uv.x);\n  \n  // Increase the angle over time\n  a += iTime * 0.5;\n  \n  // Create the star shape using the sin and cos functions\n  float s = sin(a * 5.0);\n  float c = cos(a * 5.0);\n  float d = smoothstep(0.1, 0.3, s) - smoothstep(0.3, 0.5, s) + smoothstep(0.5, 0.7, c) - smoothstep(0.7, 0.9, c);\n  \n  // Time varying pixel color\n  float t = iTime * 0.5;\n  vec3 color = vec3(1.0, abs(sin(t)), 0.0);\n  \n  // Add the shader only to pixels within the star shape\n  if (d > 0.0) {\n    fragColor = vec4(color, 1.0);\n  } else {\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n  }\n}","name":"Image","description":"","type":"image"}]}