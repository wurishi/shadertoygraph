{"ver":"0.1","info":{"id":"MdyyWV","date":"1526833680","viewed":454,"name":"Worley noise FBM","username":"NadirRoGue","description":"Generation of Worley FBM\nBased on GLM library and Sebastien Hillarie tileable volume noise\n\nClick & drag mouse up and down to see the noise evolve","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["noise","worley"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float frequenceMul[6u] = float[]( 2.0,8.0,14.0,20.0,26.0,32.0 );\n\nfloat hash(int n)\n{\n\treturn fract(sin(float(n) + 1.951) * 43758.5453123);\n}\n\nfloat noise(vec3 x)\n{\n\tvec3 p = floor(x);\n\tvec3 f = fract(x);\n\n\tf = f*f*(vec3(3.0) - vec3(2.0) * f);\n\tfloat n = p.x + p.y*57.0 + 113.0*p.z;\n\treturn mix(\n\t\tmix(\n\t\t\tmix(hash(int(n + 0.0)), hash(int(n + 1.0)), f.x),\n\t\t\tmix(hash(int(n + 57.0)), hash(int(n + 58.0)), f.x),\n\t\t\tf.y),\n\t\tmix(\n\t\t\tmix(hash(int(n + 113.0)), hash(int(n + 114.0)), f.x),\n\t\t\tmix(hash(int(n + 170.0)), hash(int(n + 171.0)), f.x),\n\t\t\tf.y),\n\t\tf.z);\n}\n\nfloat cells(vec3 p, float cellCount)\n{\n\tvec3 pCell = p * cellCount;\n\tfloat d = 1.0e10;\n\tfor (int xo = -1; xo <= 1; xo++)\n\t{\n\t\tfor (int yo = -1; yo <= 1; yo++)\n\t\t{\n\t\t\tfor (int zo = -1; zo <= 1; zo++)\n\t\t\t{\n\t\t\t\tvec3 tp = floor(pCell) + vec3(xo, yo, zo);\n\n\t\t\t\ttp = pCell - tp - noise(mod(tp, cellCount / 1.0));\n\n\t\t\t\td = min(d, dot(tp, tp));\n\t\t\t}\n\t\t}\n\t}\n\td = min(d, 1.0);\n\td = max(d, 0.0f);\n\n\treturn d;\n}\n\n\n// From GLM (gtc/noise.hpp & detail/_noise.hpp)\nvec4 mod289(vec4 x)\n{\n\treturn x - floor(x * vec4(1.0) / vec4(289.0)) * vec4(289.0);\n}\n\nvec4 permute(vec4 x)\n{\n\treturn mod289(((x * 34.0) + 1.0) * x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n\treturn vec4(1.79284291400159) - vec4(0.85373472095314) * r;\n}\n\nvec4 fade(vec4 t)\n{\n\treturn (t * t * t) * (t * (t * vec4(6) - vec4(15)) + vec4(10));\n}\n\nfloat glmPerlin4D(vec4 Position, vec4 rep)\n{\n\t\tvec4 Pi0 = mod(floor(Position), rep);\t// Integer part for indexing\n\t\tvec4 Pi1 = mod(Pi0 + vec4(1), rep);\t\t// Integer part + 1\n\t\t//Pi0 = mod(Pi0, vec4(289));\n\t\t//Pi1 = mod(Pi1, vec4(289));\n\t\tvec4 Pf0 = fract(Position);\t// Fractional part for interpolation\n\t\tvec4 Pf1 = Pf0 - vec4(1);\t\t// Fractional part - 1.0\n\t\tvec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n\t\tvec4 iy = vec4(Pi0.y, Pi0.y, Pi1.y, Pi1.y);\n\t\tvec4 iz0 = vec4(Pi0.z);\n\t\tvec4 iz1 = vec4(Pi1.z);\n\t\tvec4 iw0 = vec4(Pi0.w);\n\t\tvec4 iw1 = vec4(Pi1.w);\n\n\t\tvec4 ixy = permute(permute(ix) + iy);\n\t\tvec4 ixy0 = permute(ixy + iz0);\n\t\tvec4 ixy1 = permute(ixy + iz1);\n\t\tvec4 ixy00 = permute(ixy0 + iw0);\n\t\tvec4 ixy01 = permute(ixy0 + iw1);\n\t\tvec4 ixy10 = permute(ixy1 + iw0);\n\t\tvec4 ixy11 = permute(ixy1 + iw1);\n\n\t\tvec4 gx00 = ixy00 / vec4(7);\n\t\tvec4 gy00 = floor(gx00) / vec4(7);\n\t\tvec4 gz00 = floor(gy00) / vec4(6);\n\t\tgx00 = fract(gx00) - vec4(0.5);\n\t\tgy00 = fract(gy00) - vec4(0.5);\n\t\tgz00 = fract(gz00) - vec4(0.5);\n\t\tvec4 gw00 = vec4(0.75) - abs(gx00) - abs(gy00) - abs(gz00);\n\t\tvec4 sw00 = step(gw00, vec4(0.0));\n\t\tgx00 -= sw00 * (step(vec4(0), gx00) - vec4(0.5));\n\t\tgy00 -= sw00 * (step(vec4(0), gy00) - vec4(0.5));\n\n\t\tvec4 gx01 = ixy01 / vec4(7);\n\t\tvec4 gy01 = floor(gx01) / vec4(7);\n\t\tvec4 gz01 = floor(gy01) / vec4(6);\n\t\tgx01 = fract(gx01) - vec4(0.5);\n\t\tgy01 = fract(gy01) - vec4(0.5);\n\t\tgz01 = fract(gz01) - vec4(0.5);\n\t\tvec4 gw01 = vec4(0.75) - abs(gx01) - abs(gy01) - abs(gz01);\n\t\tvec4 sw01 = step(gw01, vec4(0.0));\n\t\tgx01 -= sw01 * (step(vec4(0), gx01) - vec4(0.5));\n\t\tgy01 -= sw01 * (step(vec4(0), gy01) - vec4(0.5));\n\n\t\tvec4 gx10 = ixy10 / vec4(7);\n\t\tvec4 gy10 = floor(gx10) / vec4(7);\n\t\tvec4 gz10 = floor(gy10) / vec4(6);\n\t\tgx10 = fract(gx10) - vec4(0.5);\n\t\tgy10 = fract(gy10) - vec4(0.5);\n\t\tgz10 = fract(gz10) - vec4(0.5);\n\t\tvec4 gw10 = vec4(0.75) - abs(gx10) - abs(gy10) - abs(gz10);\n\t\tvec4 sw10 = step(gw10, vec4(0));\n\t\tgx10 -= sw10 * (step(vec4(0), gx10) - vec4(0.5));\n\t\tgy10 -= sw10 * (step(vec4(0), gy10) - vec4(0.5));\n\n\t\tvec4 gx11 = ixy11 / vec4(7);\n\t\tvec4 gy11 = floor(gx11) / vec4(7);\n\t\tvec4 gz11 = floor(gy11) / vec4(6);\n\t\tgx11 = fract(gx11) - vec4(0.5);\n\t\tgy11 = fract(gy11) - vec4(0.5);\n\t\tgz11 = fract(gz11) - vec4(0.5);\n\t\tvec4 gw11 = vec4(0.75) - abs(gx11) - abs(gy11) - abs(gz11);\n\t\tvec4 sw11 = step(gw11, vec4(0.0));\n\t\tgx11 -= sw11 * (step(vec4(0), gx11) - vec4(0.5));\n\t\tgy11 -= sw11 * (step(vec4(0), gy11) - vec4(0.5));\n\n\t\tvec4 g0000 = vec4(gx00.x, gy00.x, gz00.x, gw00.x);\n\t\tvec4 g1000 = vec4(gx00.y, gy00.y, gz00.y, gw00.y);\n\t\tvec4 g0100 = vec4(gx00.z, gy00.z, gz00.z, gw00.z);\n\t\tvec4 g1100 = vec4(gx00.w, gy00.w, gz00.w, gw00.w);\n\t\tvec4 g0010 = vec4(gx10.x, gy10.x, gz10.x, gw10.x);\n\t\tvec4 g1010 = vec4(gx10.y, gy10.y, gz10.y, gw10.y);\n\t\tvec4 g0110 = vec4(gx10.z, gy10.z, gz10.z, gw10.z);\n\t\tvec4 g1110 = vec4(gx10.w, gy10.w, gz10.w, gw10.w);\n\t\tvec4 g0001 = vec4(gx01.x, gy01.x, gz01.x, gw01.x);\n\t\tvec4 g1001 = vec4(gx01.y, gy01.y, gz01.y, gw01.y);\n\t\tvec4 g0101 = vec4(gx01.z, gy01.z, gz01.z, gw01.z);\n\t\tvec4 g1101 = vec4(gx01.w, gy01.w, gz01.w, gw01.w);\n\t\tvec4 g0011 = vec4(gx11.x, gy11.x, gz11.x, gw11.x);\n\t\tvec4 g1011 = vec4(gx11.y, gy11.y, gz11.y, gw11.y);\n\t\tvec4 g0111 = vec4(gx11.z, gy11.z, gz11.z, gw11.z);\n\t\tvec4 g1111 = vec4(gx11.w, gy11.w, gz11.w, gw11.w);\n\n\t\tvec4 norm00 = taylorInvSqrt(vec4(dot(g0000, g0000), dot(g0100, g0100), dot(g1000, g1000), dot(g1100, g1100)));\n\t\tg0000 *= norm00.x;\n\t\tg0100 *= norm00.y;\n\t\tg1000 *= norm00.z;\n\t\tg1100 *= norm00.w;\n\n\t\tvec4 norm01 = taylorInvSqrt(vec4(dot(g0001, g0001), dot(g0101, g0101), dot(g1001, g1001), dot(g1101, g1101)));\n\t\tg0001 *= norm01.x;\n\t\tg0101 *= norm01.y;\n\t\tg1001 *= norm01.z;\n\t\tg1101 *= norm01.w;\n\n\t\tvec4 norm10 = taylorInvSqrt(vec4(dot(g0010, g0010), dot(g0110, g0110), dot(g1010, g1010), dot(g1110, g1110)));\n\t\tg0010 *= norm10.x;\n\t\tg0110 *= norm10.y;\n\t\tg1010 *= norm10.z;\n\t\tg1110 *= norm10.w;\n\n\t\tvec4 norm11 = taylorInvSqrt(vec4(dot(g0011, g0011), dot(g0111, g0111), dot(g1011, g1011), dot(g1111, g1111)));\n\t\tg0011 *= norm11.x;\n\t\tg0111 *= norm11.y;\n\t\tg1011 *= norm11.z;\n\t\tg1111 *= norm11.w;\n\n\t\tfloat n0000 = dot(g0000, Pf0);\n\t\tfloat n1000 = dot(g1000, vec4(Pf1.x, Pf0.y, Pf0.z, Pf0.w));\n\t\tfloat n0100 = dot(g0100, vec4(Pf0.x, Pf1.y, Pf0.z, Pf0.w));\n\t\tfloat n1100 = dot(g1100, vec4(Pf1.x, Pf1.y, Pf0.z, Pf0.w));\n\t\tfloat n0010 = dot(g0010, vec4(Pf0.x, Pf0.y, Pf1.z, Pf0.w));\n\t\tfloat n1010 = dot(g1010, vec4(Pf1.x, Pf0.y, Pf1.z, Pf0.w));\n\t\tfloat n0110 = dot(g0110, vec4(Pf0.x, Pf1.y, Pf1.z, Pf0.w));\n\t\tfloat n1110 = dot(g1110, vec4(Pf1.x, Pf1.y, Pf1.z, Pf0.w));\n\t\tfloat n0001 = dot(g0001, vec4(Pf0.x, Pf0.y, Pf0.z, Pf1.w));\n\t\tfloat n1001 = dot(g1001, vec4(Pf1.x, Pf0.y, Pf0.z, Pf1.w));\n\t\tfloat n0101 = dot(g0101, vec4(Pf0.x, Pf1.y, Pf0.z, Pf1.w));\n\t\tfloat n1101 = dot(g1101, vec4(Pf1.x, Pf1.y, Pf0.z, Pf1.w));\n\t\tfloat n0011 = dot(g0011, vec4(Pf0.x, Pf0.y, Pf1.z, Pf1.w));\n\t\tfloat n1011 = dot(g1011, vec4(Pf1.x, Pf0.y, Pf1.z, Pf1.w));\n\t\tfloat n0111 = dot(g0111, vec4(Pf0.x, Pf1.y, Pf1.z, Pf1.w));\n\t\tfloat n1111 = dot(g1111, Pf1);\n\n\t\tvec4 fade_xyzw = fade(Pf0);\n\t\tvec4 n_0w = mix(vec4(n0000, n1000, n0100, n1100), vec4(n0001, n1001, n0101, n1101), fade_xyzw.w);\n\t\tvec4 n_1w = mix(vec4(n0010, n1010, n0110, n1110), vec4(n0011, n1011, n0111, n1111), fade_xyzw.w);\n\t\tvec4 n_zw = mix(n_0w, n_1w, fade_xyzw.z);\n\t\tvec2 n_yzw = mix(vec2(n_zw.x, n_zw.y), vec2(n_zw.z, n_zw.w), fade_xyzw.y);\n\t\tfloat n_xyzw = mix(n_yzw.x, n_yzw.y, fade_xyzw.x);\n\t\treturn float(2.2) * n_xyzw;\n}\n\nfloat remap(float originalValue, float originalMin, float originalMax, float newMin, float newMax)\n{\n\treturn newMin + (((originalValue - originalMin) / (originalMax - originalMin)) * (newMax - newMin));\n}\n\n// ======================================================================\n\nfloat worleyNoise3D(vec3 p, float cellCount)\n{\n\treturn cells(p, cellCount);\n}\n\nfloat perlinNoise3D(vec3 pIn, float frequency, int octaveCount)\n{\n\tfloat octaveFrenquencyFactor = 2.0;\t\t\t// noise frequency factor between octave, forced to 2\n\n\t// Compute the sum for each octave\n\tfloat sum = 0.0f;\n\tfloat weightSum = 0.0f;\n\tfloat weight = 0.5f;\n\tfor (int oct = 0; oct < octaveCount; oct++)\n\t{\n\t\t// Perlin vec3 is bugged in GLM on the Z axis :(, black stripes are visible\n\t\t// So instead we use 4d Perlin and only use xyz...\n\t\t//glm::vec3 p(x * freq, y * freq, z * freq);\n\t\t//float val = glm::perlin(p, glm::vec3(freq)) *0.5 + 0.5;\n\n\t\tvec4 p = vec4(pIn.x, pIn.y, pIn.z, 0.0) * vec4(frequency);\n\t\tfloat val = glmPerlin4D(p, vec4(frequency));\n\n\t\tsum += val * weight;\n\t\tweightSum += weight;\n\n\t\tweight *= weight;\n\t\tfrequency *= octaveFrenquencyFactor;\n\t}\n\n\tfloat noise = (sum / weightSum) *0.5 + 0.5;;\n\tnoise = min(noise, 1.0f);\n\tnoise = max(noise, 0.0f);\n\treturn noise;\n}\n\nvec4 stackable3DNoise(ivec3 pixel)\n{\n    float ar = float(iResolution.x) / float(iResolution.y);\n\tvec3 coord = vec3(float(pixel.x) * ar / float(iResolution.x), float(pixel.y) / float(iResolution.y), float(pixel.z) / 128.0);\n\n\t// 3 octaves\n\tfloat cellCount = 2.0;\n\tfloat worleyNoise0 = (1.0f - worleyNoise3D(coord, cellCount * 1.0));\n\tfloat worleyNoise1 = (1.0f - worleyNoise3D(coord, cellCount * 2.0));\n\tfloat worleyNoise2 = (1.0f - worleyNoise3D(coord, cellCount * 4.0));\n\tfloat worleyNoise3 = (1.0f - worleyNoise3D(coord, cellCount * 8.0));\n\tfloat worleyFBM0 = worleyNoise0*0.625f + worleyNoise1*0.25f + worleyNoise2*0.125f;\n\tfloat worleyFBM1 = worleyNoise1*0.625f + worleyNoise2*0.25f + worleyNoise3*0.125f;\n\tfloat worleyFBM2 = worleyNoise2*0.75f + worleyNoise3*0.25f; \n\t// cellCount=4 -> worleyNoise4 is just noise due to sampling frequency=texel freque. So only take into account 2 frequencies for FBM\n\n\treturn vec4(worleyFBM0, worleyFBM1, worleyFBM2, 1.0);\n}\n\n// MAIN\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \tint z = int(floor(iMouse.y / iResolution.y * 32.0)); \n    ivec3 pixel = ivec3 (fragCoord.x, fragCoord.y, z);\n    vec4 noise = stackable3DNoise(pixel);\n    \n    float binSize = float(iResolution.x) / 3.0;\n    int binIndex = int(floor(fragCoord.x / binSize));\n    \n    float color = noise[binIndex];\n    \n    fragColor = vec4(vec3(color), 1.0);\n}","name":"Image","description":"","type":"image"}]}