{"ver":"0.1","info":{"id":"4X3GW7","date":"1716533137","viewed":107,"name":"Dynamic Ocean Surface: A Realist","username":"mr_vero","description":"This shader simulates the ever-changing surface of the ocean, blending seamlessly between shallow and deep water colors to create a lifelike aquatic environment.","likes":1,"published":1,"flags":0,"usePreview":1,"tags":["glsl","shadertoy","textureblending","watereffect","oceanshader","realisticwater"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = uv * 2.0 - 1.0; // Normalize coordinates to [-1, 1]\n    uv.x *= iResolution.x / iResolution.y; // Correct aspect ratio\n\n    float time = iTime; // Use the actual time for more noticeable motion\n    float waveHeight = 0.05; // Subtle wave height\n    float waveSpeed = 2.0; // Dynamic motion\n    float waveFrequency = 5.0; // Wave density\n\n    // Wave calculation for a subtle effect\n    float y = sin(uv.x * waveFrequency + time * waveSpeed) * cos(uv.y * waveFrequency + time * waveSpeed) * waveHeight;\n\n    // Fetch the texture\n    vec2 texUv = uv * 0.5 + 0.5; // Adjust uv for texture coordinates\n    vec4 texColor = texture(iChannel0, texUv + y * 0.05); // Apply wave effect to texture coordinates\n\n    // Base water color, lighter and more vibrant\n    vec3 shallowWaterColor = vec3(0.0, 0.55, 0.85);\n    vec3 deepWaterColor = vec3(0.0, 0.2, 0.4); // Deeper version of the water color\n\n    // Depth factor calculation\n    float depthFactor = 0.7 + 0.5 * sin(uv.y * 2.0 + time * 0.5);\n\n    // Blend between shallow and deep water colors based on depth\n    vec3 waterColor = mix(shallowWaterColor, deepWaterColor, depthFactor);\n\n    // Blend the texture color with the water color, maintaining texture visibility\n    vec3 finalColor = mix(waterColor, texColor.rgb, 0.3); // Adjust the mix ratio as needed\n\n    // Subtle sunlight reflection effect\n    float sunEffect = dot(normalize(vec3(0.0, 1.0, y)), normalize(vec3(0.0, 1.0, 0.5)));\n    finalColor += vec3(0.2, 0.2, 0.1) * sunEffect; // More subtle sunlight effect\n\n    // Consistent transparency\n    float transparency = 0.5; // Higher transparency throughout\n\n    fragColor = vec4(finalColor, transparency);\n}","name":"Image","description":"","type":"image"}]}