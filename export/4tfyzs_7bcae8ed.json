{"ver":"0.1","info":{"id":"4tfyzs","date":"1506007415","viewed":78,"name":"RayMarching_Part2","username":"guyue","description":"第二次","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarchingpart2"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nconst int MAX_RAY_NUM = 255;\nconst float  MIN_DIST = 0.0;\nconst float MAX_DIST = 100.0;\nconst float SCALE = 0.0001;\n\n\nfloat sphereSDF(vec3 p){\n\n   return length(p)-1.0;\n\n\n}\n\n\n\nfloat ShortestDistanceToObjectSurface(vec3 dir,vec3 eye,float start,float end){\n        float depth = start;\n    \n    for(int i = 1;i<MAX_RAY_NUM;i++){\n       float dist = sphereSDF(eye+depth*dir);\n        \n        if(dist<SCALE){\n            \n        return depth;\n        \n        }\n        \n        depth+=dist;\n        if(depth>=end){\n        \n        return end;\n        }\n\n    \n    }\n    \n    return end;\n     \n\n\n\n}\n\n\nvec3 RayDir(vec2 size,vec2 fragcood){\n    vec2 xy = fragcood-size/2.0;\n    float z = size.y;\n    return normalize(vec3(xy,-z));\n    \n\n}\n\nvec3 createNormal(vec3 p){\n\n  return normalize(vec3(\n   sphereSDF(vec3(p.x+SCALE,p.y,p.z))-sphereSDF(vec3(p.x-SCALE,p.y,p.z)),\n    \n   sphereSDF(vec3(p.x,p.y+SCALE,p.z))-sphereSDF(vec3(p.x,p.y-SCALE,p.z)), \n\n   sphereSDF(vec3(p.x,p.y,p.z+SCALE))-sphereSDF(vec3(p.x,p.y,p.z-SCALE))\n\n   ));\n\n\n\n}\n\n\nvec3 PhongLight(vec3 k_d,vec3 k_s,vec3 eye,vec3 lightpos,vec3 LightScale,vec3 p,float alpha){\n    \n    vec3 N = createNormal(p);\n    vec3 L = normalize(lightpos-p);\n    vec3 V = normalize(eye-p);\n    vec3 R = normalize(reflect(-L,N));\n    \n  \n    float LdotN = dot(L,N)*2.0;\n    \n    float RdotN = dot(R,V);\n    \n    if(LdotN<0.0){\n        \n     \n        return vec3(0.0,0.0,0.0);\n    \n        \n    }\n    \n    \n    if(RdotN<0.0){\n        \n        \n    \n      return k_d*LightScale*LdotN;\n    \n    \n    }\n    \n    \n    return LightScale*(k_d*LdotN+pow(RdotN,alpha)*k_s*2.0);\n\n    \n\n}\n\n\nvec3 PhongLightPosSuf(vec3 k_a,vec3 k_d,vec3 k_s,vec3 eye,vec3 p,float alpha){\n\n    vec3 Ambient = vec3(1.0,1.0,1.0)*0.5;\n    \n    vec3 color = Ambient*k_a;\n    \n    \n    vec3 LightPos1 = vec3(4.0 * sin(iTime),\n                          2.0,\n                          4.0 * cos(iTime));\n    \n    vec3 LightScale = vec3(0.4,0.6,0.1);\n    \n    color+=PhongLight(k_d,k_s,eye,LightPos1,LightScale,p,alpha);\n    \n    \n    \n    vec3 LightPos2 = vec3(2.0 * sin(0.37 * iTime),\n                          2.0 * cos(0.37 * iTime),\n                          2.0);\n    \n    vec3 LightScale2 = vec3(0.8,0.2,0.2);\n    \n     color+=PhongLight(k_d,k_s,eye,LightPos2,LightScale2,p,alpha);\n    \n    return color;\n    \n    \n    \n    \n    \n    \n\n\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 eye = vec3(0.0,0.0,3.0);\n    \n    vec3 dir = RayDir(iResolution.xy,fragCoord);\n    \n    float dist = ShortestDistanceToObjectSurface(dir,eye,MIN_DIST,MAX_DIST);\n    \n    vec3 pos = eye+dist*dir;\n    \n    vec3 k_a = vec3(0.3,0.3,0.3);\n    \n    vec3 k_d = vec3(0.3,0.2,0.9);\n    \n    vec3 k_s = vec3(1.0,1.0,1.0);\n    \n    float alpha = 10.0;\n    \n \n     vec3 LightScale = vec3(0.4,0.6,0.8);\n    if(dist<5.0){\n        \n      vec3 col = PhongLightPosSuf(k_a,k_d,k_s,eye,pos,alpha);\n       // vec3 col =   PhongLight(k_d,k_s,eye,lightpos,LightScale,pos,alpha);\n        \n          \n        \n        fragColor = vec4(col,1.0);\n        return;\n    \n    }\n    \n    \n    \n\tvec2 uv = RayDir(iResolution.xy,fragCoord).xy;\n    \n\tfragColor = vec4(0,0,0,1.0);\n}","name":"Image","description":"","type":"image"}]}