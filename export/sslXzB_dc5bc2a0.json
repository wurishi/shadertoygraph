{"ver":"0.1","info":{"id":"sslXzB","date":"1618858861","viewed":196,"name":"324_Ershov_v5v8","username":"enkneess","description":"Ершов Никита 324, вариант 5.8\nБаза: \n1. Икосаэдр\n2. Фракталы\n\nДопы: \n1. Мягкие тени\n2. Анти-алиасинг\n3. Окружение в виде текстурированного куб-мапа\n4. Имитация микро-рельефа\n5. Окружение в виде текстурированной плоскост\n","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["fractal","icosahedron","msucg"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv) /float(iFrame + 1);\n}\n\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3Rr","filepath":"/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","previewfilepath":"/media/ap/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Math constatns\nconst float PI  = 3.14159265359;\nconst float PHI = 1.6180339887;\nconst float INF = 1e10;\n\n// Refractive index\nconst float GLASS_N = 1.5;\nconst float AIR_N   = 1.0;\n\n// Materials\nconst int EMISSION   = 0;\nconst int DIFFUSE    = 1;\nconst int REFLECTION = 2;\nconst int REFRACTION = 3;\n\n// CAM POSITION\nconst vec3 CAMERA_POS = vec3(1.0, 0.8, -6.5);\n\n// LIGHT\nvec3        LIGHT1_POS    = vec3(-3, 0.7, 1);\nconst float LIGHT1_RADIUS = .35;\nconst vec3  LIGHT1_COLOR  = vec3(.9, 0.3, .4);\n\n// LIGHT2\nvec3        LIGHT2_POS    = vec3(2, 1, 3);\nconst float LIGHT2_RADIUS = 0.45;\nconst vec3  LIGHT2_COLOR  = vec3(0.8, 0.26, 0.93);\n\n// Icosahedron\nconst int VERTEX_COUNT   = 12;\nconst int TRIANGLE_COUNT = 20;\n\nvec3 ICOSAHEDRON_COLOR = vec3(.75);\n\nvec3 vertices[VERTEX_COUNT] = vec3[VERTEX_COUNT] (\n    vec3(-1,  PHI, 0) / PHI ,\n    vec3( 1,  PHI, 0) / PHI ,\n    vec3(-1, -PHI, 0) / PHI ,\n    vec3( 1, -PHI, 0) / PHI ,\n    vec3(0, -1,  PHI) / PHI ,\n    vec3(0,  1,  PHI) / PHI ,\n    vec3(0, -1, -PHI) / PHI ,\n    vec3(0,  1, -PHI) / PHI ,  \n    vec3( PHI, 0, -1) / PHI ,\n    vec3( PHI, 0,  1) / PHI ,\n    vec3(-PHI, 0, -1) / PHI ,\n    vec3(-PHI, 0,  1) / PHI );\n\nint triangles[TRIANGLE_COUNT * 3] = int[TRIANGLE_COUNT * 3] (\n     5, 11,  0,\n     1,  5,  0,\n     7,  1,  0,    \n    10,  7,  0,\n    11, 10,  0,\n     9,  5,  1, \n     4, 11,  5,\n     2, 10, 11,\n     6,  7, 10,\n     8,  1,  7,\n     4,  9,  3,\n     2,  4,  3,\n     6,  2,  3,\n     8,  6,  3,\n     9,  8,  3,\n     5,  9,  4,\n    11,  4,  2,\n    10,  2,  6,\n     7,  6,  8,\n     1,  8,  9);\n\n// Fractal\nconst float MARCH_STEPS = 54.;\nconst int   ITERATIONS  = 512;\nconst float OUTRANGE    = 36.;\n\n// Rotate\nmat2 rot(float angle){\n\treturn mat2(cos(angle), -sin(angle),\n                sin(angle), cos(angle));\n}\n\nvec3 rotateAroundY(vec3 v, float angle) {\n    vec4 v2 = vec4(v, 1.0);\n    float angle2 = angle * PI / 180.0;\n    mat4 rotMatrix = mat4( cos(angle2), 0, sin(angle2), 0,\n                           0,           1, 0,           0,\n                          -sin(angle2), 0, cos(angle2), 0,\n                           0,           0, 0,           1);\n    v2 = v2 * rotMatrix;\n    return vec3(v2.x, v2.y, v2.z);\n}\n\n\n// fractals\nfloat fracPos(vec3 p, out float trap){\n    p.xz *= rot(5.0);\n    p.yz *= rot(5.0);\n    \n    vec3 z = p;\n\n    float n  = 9.0;\n    float r  = 0.0;\n    float dr = 2.5;\n    \n    trap = dot(z,z);\n    \n    for(int i = 0; i < ITERATIONS; i++){\n        r = length(z);\n        \n        if(r >= OUTRANGE){\n            break;\n        }\n        \n        trap = min(dot(z,z), trap);\n        \n        dr = n * pow(r, n - 1.0) * dr + 0.5;\n        \n        float theta = atan(z.y / z.x);\n        float phi = asin(z.z / r);\n\n        r = pow(r, n);\n        theta *= n;\n        phi *= n;\n        \n        z = r * vec3(cos(theta) * cos(phi), sin(theta) * cos(phi), sin(phi)) + p;\n    }\n    \n    return 0.45 * log(r) * r / dr;\n}\n\n\nfloat raymarch(vec3 ro, vec3 rd, out float i, out float trap){\n    const float eps = 1e-4;\n    \n    vec3 p = ro;\n    vec3 cl = p + rd * abs(dot(p, rd));\n\n    if(dot(cl, cl) >= .75){\n        return -1.0;\n    }\n    \n    for(i = 0.0; i < MARCH_STEPS; ++i){\n        float d = fracPos(p, trap);\n        if(d <= eps){\n            return d;\n        }\n\n        p += rd * d ;\n    }\n    \n    return -1.0;\n}\n\n// *********** TRASING OBJECTS *********** //\n\nfloat tracePlane(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.2 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    \n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) >= 75.0) {\n        return INF;\n    }\n    \n    normal = normalize(vec3(0, 1, 0) + (texture(iChannel0, worldPos.xz).rgb * 2.0 - 1.0)* 0.5);\n    return t;\n}\n\nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal) {\n    float a = dot(dir, dir);\n    float b = dot(pos, dir);\n    float c = dot(pos, pos) - r * r;\n    float D = b * b - a * c;\n    \n    if (D < 0.0) {\n        return INF;\n    }\n    \n    float t = -b - sqrt(D);\n    if (t > 0.0) {\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    \n    t = -b + sqrt(D);\n    if (t < 0.0) {\n        return INF;\n    }\n    \n    normal = normalize(pos + t * dir);\n    return t;\n}\n\nfloat traceCylinder(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.0 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    \n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) < 1.0) {\n        normal = vec3(0, 1, 0);\n        return t;\n    }\n    \n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - 1.0;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    \n    t = (-b - sqrt(D)) / a;\n    if (t > 0.0) {\n        worldPos = t * dir + pos;\n        if (worldPos.y <= -1.0) {\n            normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n            return t;\n        }\n    }\n    \n    t = (-b + sqrt(D)) / a;\n    if (t < 0.0) {\n        return INF;\n    }\n    \n    worldPos = t * dir + pos;\n    if (worldPos.y <= -1.0) {\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    }\n    \n    return INF;\n}\n\nfloat traceTriangle(vec3 pos, vec3 dir, vec3 vert_1, vec3 vert_2, vec3 vert_3, out vec3 normal) {\n    vec3 line_1 = vert_2 - vert_1;\n    vec3 line_2 = vert_3 - vert_1;\n    vec3 norm_2 = cross(dir, line_2);\n    vec3 tv = pos - vert_1;\n    vec3 norm_1 = cross(tv, line_1);\n    \n    float d = 1.0 / dot(line_1, norm_2);\n    float u = dot(tv, norm_2) * d;\n    \n    if (u < 0.0 || u > 1.0) {\n        return INF;\n    }\n    \n    float a = dot(dir, norm_1) * d;\n    if (a < 0.0 || u + a > 1.0) {\n        return INF;\n    }\n    \n    float t = dot(line_2, norm_1) * d;\n    normal = normalize((vert_1 + vert_2 + vert_3) / 3.0);  \n    if (t <= 0.0) {\n        return INF;\n    }\n    return t;\n}\n\nfloat traceIcosahed(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = INF;\n    for (int i = 0; i < TRIANGLE_COUNT; ++i) {\n        vec3 vert_1 = vertices[triangles[i * 3]];\n        vec3 vert_2 = vertices[triangles[i * 3 + 1]];\n        vec3 vert_3 = vertices[triangles[i * 3 + 2]];\n        vec3 cur_norm;\n        float cur_t = traceTriangle(pos, dir, vert_1, vert_2, vert_3, cur_norm);\n        if (cur_t < t) {\n            t = cur_t;\n            normal = cur_norm;\n        }\n    }\n    return t;\n}\n\n\nbool isOccluded(vec3 pos, vec3 target) {\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n        \n    vec3 cylNorm;\n    float cylT = traceCylinder(pos, dir, cylNorm);\n    if (cylT < dist)\n        return true;\n    \n    vec3 icosahedronNorm;\n    float icosahedronT = traceIcosahed(pos, dir, icosahedronNorm);\n    return (icosahedronT < dist);\n}\n\n\nvec3 randDir;\n\nvec3 computeLight(vec3 pos, vec3 color, vec3 normal) {\n    \n    vec3 toLIGHT1 = LIGHT1_POS - pos;\n    float distSq1 = dot(toLIGHT1, toLIGHT1);\n    float att1 = isOccluded(pos, LIGHT1_POS) ? 0.0 : 7.0f / distSq1;\n    \n    vec3 toLIGHT2 = LIGHT2_POS - pos;\n    float distSq2 = dot(toLIGHT2, toLIGHT2);\n    float att2 = isOccluded(pos, LIGHT2_POS + randDir * LIGHT2_RADIUS) ? 0.0 : 20.0f / distSq2;\n   \n    return color * (\n        max(0.0, dot(normal, normalize(toLIGHT1))) * att1 * LIGHT1_COLOR\n      + max(0.0, dot(normal, normalize(toLIGHT2))) * att2 * LIGHT2_COLOR\n      + texture(iChannel1, normal).rgb * 0.3\n    );\n}\n\nvec3 refraction(vec3 v, vec3 normal, float n1, float n2) {\n    if (dot(v, normal) < 0.0) {\n        normal = -normal;\n    }\n    float cosA = dot(v, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3 tang = normalize(v - cosA * normal);\n    float sinB = sinA / n2 * n1;\n    if (sinB > 1.0) return reflect(v, normal);\n    float cosB = sqrt(1.0 - sinB * sinB);\n    return sinB * tang + cosB * normal;\n}\n\nvec4 bilinearFilter(vec2 coords) {\n    float size = 512.0;\n    vec2 trTexCoords = coords * size;\n    vec2 texf = floor(trTexCoords);\n    vec2 ratio = trTexCoords - texf;\n    vec2 opposite = 1.0 - ratio;\n    vec4 result = (texture(iChannel3, texf / size) * opposite.x  + texture(iChannel3, (texf + vec2(1, 0)) / size)   * ratio.x) * opposite.y + \n                  (texture(iChannel3, (texf + vec2(0, 1)) / size) * opposite.x + texture(iChannel3, (texf + vec2(1, 1)) / size) * ratio.x) * ratio.y;\n    return result;\n}\n\n// some needed func\n\nfloat pow2(float x) {\n    return x * x;\n}\n\nfloat rand(float frame) {\n    return fract(sin( dot(vec3(frame), vec3(9.1842,23.223,92.534242) )) * 234248.34234);\n}\n\n\n// main\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    \n    float  time = iTime;\n    \n    vec3 randVals = vec3(0.5 * sin(time) + rand(float(iFrame)), 0.05 * cos(time) + + rand(float(iFrame+4)), rand(float(iFrame + 15)));\n    \n    randDir = normalize(randVals - 0.5);\n    \n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (randVals.xy - 0.5)) / iResolution.x;\n    vec3 front = normalize(-CAMERA_POS);\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = normalize(cross(front, up));\n    up = normalize(cross(right, front));\n    vec3 viewVec = normalize(front + right * uv.x + up * uv.y);\n    \n    vec3 LIGHT1_POS = LIGHT1_POS + randVals * 0.1;\n    vec3 LIGHT2_POS = LIGHT2_POS + randVals * 0.15;\n    \n    vec3 curPos = CAMERA_POS;\n    vec3 curDir = viewVec;\n    \n    float n1 = AIR_N;\n    float n2 = GLASS_N;\n    \n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N + GLASS_N);\n    \n    vec3 colorMult = vec3(1, 1, 1);\n    \n    for (int i = 0; i < 10; ++i) {\n        float t = INF;\n        int materialType;\n        vec3 color;\n        vec3 normal;\n        float nEnter = AIR_N;\n        \n        vec3 planeNorm;\n        float planeT = tracePlane(curPos, curDir, planeNorm);\n        if (planeT < t) {\n            t = planeT;\n\n            materialType = DIFFUSE;\n            if (randVals.y < 0.5) {\n                materialType = REFLECTION;\n            }\n            color = texture(iChannel0, curPos.xz * 0.5).rgb \n                  + bilinearFilter(curPos.xz * 0.3).rgb * .5;\n            normal = planeNorm;\n        }\n        \n        vec3 l1Norm;\n        float LIGHT1T = traceSphere(curPos - LIGHT1_POS, curDir, LIGHT1_RADIUS, l1Norm);\n        if (LIGHT1T < t) {\n            t = LIGHT1T;\n            materialType = EMISSION;\n            color  = LIGHT1_COLOR;\n            normal = l1Norm;\n        }\n        \n        vec3 l2Norm;\n        float LIGHT2T = traceSphere(curPos - LIGHT2_POS, curDir, LIGHT2_RADIUS, l2Norm);\n        if (LIGHT2T < t) {\n            t = LIGHT2T;\n            materialType = EMISSION;\n            color  = LIGHT2_COLOR;\n            normal = l2Norm;\n        }\n        \n       vec3 icoNorm;\n        float icoT = traceIcosahed(curPos, curDir, icoNorm);\n        if (icoT < t) {\n            t = icoT;\n            normal = icoNorm;\n            if (randVals.x < GLASS_R) {\n                materialType = REFLECTION;\n            } else {\n                materialType = REFRACTION;\n                colorMult *= ICOSAHEDRON_COLOR;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = AIR_N;\n                } else {\n                    nEnter = GLASS_N;\n                }\n            }\n        }\n      \n        vec3 cylNorm;\n        float cylT = traceCylinder(curPos, curDir, cylNorm);\n        if (cylT < t) {\n            t = cylT;\n            \n            materialType = DIFFUSE;\n            if (randVals.y < 0.25) {\n                materialType = REFLECTION;\n            }\n                              \n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel2, worldPos.xz * worldPos.y).rgb;\n            normal = cylNorm;\n        }\n        \n        float iterator;\n        float trap;\n        float tFrac = raymarch(curPos, curDir, iterator, trap);\n        \n        if(tFrac > 0.0){\n            color = vec3(1.0) * pow(.7 * iterator / MARCH_STEPS, 5.0);\n            fragColor.rgb *= mix(vec3(0.7, 0.34, 0.64), vec3(0.58, 0.45, 0.17), trap);\n            t = tFrac ;\n            vec3 worldPos = t * curDir + curPos;\n        }\n        \n        if (t != INF) {\n            vec3 worldPos = t * curDir + curPos;\n            fragColor = texture(iChannel0, worldPos.xz);\n            \n            if (materialType == EMISSION) {\n                fragColor.rgb = color * colorMult;\n                break;\n            } else if (materialType == DIFFUSE) {\n                fragColor.rgb = computeLight(worldPos, color, normal) * colorMult;\n                break;\n            } else if (materialType == REFLECTION) {\n                curDir = reflect(curDir, normal);\n                curPos = worldPos + curDir * 1e-5;\n            } else if (materialType == REFRACTION) {\n                curDir = refraction(curDir, normal, n1, nEnter);\n                curPos = worldPos + curDir * 1e-5;\n                n1 = nEnter;\n            }\n        } else {\n            vec3 textureDir = rotateAroundY(curDir, 95.0);\n            fragColor.rgb = texture(iChannel1, textureDir).rgb  * colorMult;\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    fragColor = texture(iChannel0,uv) + texture(iChannel1, uv);\n}","name":"Buffer B","description":"","type":"buffer"}]}