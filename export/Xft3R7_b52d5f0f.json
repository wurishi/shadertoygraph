{"ver":"0.1","info":{"id":"Xft3R7","date":"1711507463","viewed":100,"name":"FBM noise clouds flowing","username":"ShadedSky","description":"fractal brownian motion noise clouds","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fractal","noise","fbm","brownian","fractalbrownianmotion","lacunarity"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Generates a pseudo-random value based on a 2D coordinate.\n// The randomness is generated using the sine of the dot product of the coordinate\n// and a constant vector, scaled to produce a fractal result.\nfloat random(in vec2 _st) {\n    return fract(sin(dot(_st.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\n// Generates a smooth noise value based on 2D simplex noise.\n// It interpolates between four points to create a smooth gradient of noise.\nfloat noise(in vec2 _st) {\n    vec2 i = floor(_st); // The integer part of _st\n    vec2 f = fract(_st); // The fractional part of _st\n\n    // Calculate noise contributions from each of the four corners\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    // Smoothly interpolate between the corners\n    vec2 u = f * f * (3.0 - 2.0 * f);\n    return mix(a, b, u.x) +\n           (c - a) * u.y * (1.0 - u.x) +\n           (d - b) * u.x * u.y;\n}\n\n#define NUM_OCTAVES 5\n\n// Calculates Fractal Brownian Motion (FBM) based on the noise function.\n// It accumulates noise at different octaves to produce fractal-like structures.\nfloat fbm(in vec2 _st) {\n    float value = 0.0;\n    float amplitude = 0.5;\n    float gain_modifier = 0.66;\n    float lacunarity = 2.9;\n    \n    // add \"flow\" to shift with sin \n    vec2 shift = vec2(100.0*sin(0.003*iTime));\n    mat2 rot = mat2(cos(0.5), sin(0.5), -sin(0.5), cos(0.5)); // Rotation matrix\n\n    for (int i = 0; i < NUM_OCTAVES; ++i) {\n        value += amplitude * noise(_st);\n        _st = rot * _st * lacunarity + shift;\n        // adjust amplitude / gain effect\n        amplitude *= gain_modifier;\n    }\n    return value;\n}\n\n\n// Main image function that computes the color of each pixel.\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 u_resolution = iResolution.xy;\n    float u_time = iTime;\n\n    // Normalized screen coordinates, scaled by 3 for zoom effect\n    vec2 st = fragCoord.xy / u_resolution.xy * 3.4;\n\n    vec3 color = vec3(0.0); // Initial color set to black\n\n    // Compute two layers of FBM for a more complex pattern\n    vec2 q = vec2(fbm(st + 0.00 * u_time), fbm(st + vec2(1.0)));\n    vec2 r = vec2(fbm(st + 1.0 * q + vec2(1.7, 9.2) + 0.15 * u_time), fbm(st + 1.0 * q + vec2(8.3, 2.8) + 0.126 * u_time));\n\n    // Combine the FBM values to modulate the final color\n    float f = fbm(st + r);\n    color = mix(vec3(0.101961, 0.619608, 0.666667), vec3(0.666667, 0.666667, 0.498039), clamp((f * f) * 4.0, 0.0, 1.0));\n    color = mix(color, vec3(0, 0, 0.164706), clamp(length(q), 0.0, 1.0));\n    color = mix(color, vec3(0.666667, 1, 1), clamp(length(r.x), 0.0, 1.0));\n\n    // Rainbow color variation\n    vec3 rainbowColor = vec3(\n        0.5 + 0.5*sin(u_time + 0.0),\n        0.5 + 0.5*sin(u_time + 2.0*3.14159/3.0),\n        0.5 + 0.5*sin(u_time + 4.0*3.14159/3.0)\n    );\n\n    // Blend the original cloud color with the rainbow color\n    color = mix(color, rainbowColor, 0.5 * (sin(u_time) + 1.0));\n\n    fragColor = vec4((f*f*f+.6*f*f+.5*f)*color,1.);\n\n    \n}\n\n\n\n\n","name":"Image","description":"","type":"image"}]}