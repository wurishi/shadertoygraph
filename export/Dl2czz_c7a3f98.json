{"ver":"0.1","info":{"id":"Dl2czz","date":"1691504933","viewed":38,"name":"Ray-Plane, Ray-Disk intersection","username":"Envy24","description":"Use mouse to rotate object.\nRay-Plane intersection (infinite and finite) and Ray-Disk intersection in local coordinates.\nOther implementation of Ray-Plane intersection in world coordinates: https://www.shadertoy.com/view/Dsffz2","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raytracing","ray","intersection","plane","disk","infinite","finite"],"hasliked":0,"parentid":"mtXyDS","parentname":"1. Raytracer (transformations)"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* https://www.shadertoy.com/view/DdsGDj */\n#define MOUSE_OFFSET ( iMouse.z > 0. ? iMouse.xy - iResolution.xy * 0.5 : vec2(0) )\nvec2 map_to_centered_ndc(in vec2 SC, in float scale, in vec2 origin, in bool mouse_drag)\n{\n    vec2 M = MOUSE_OFFSET * (mouse_drag == true ? 1. : 0.);\n    return ((2. * (SC - M) - iResolution.xy) / iResolution.y) * scale + origin;\n}\n\nvec3 get_background() { return vec3(.1, .4, .6); }\n\n#define NUM_OF_OBJECTS ( 1 )\nmat4 FWDs[NUM_OF_OBJECTS]; // per object forward transformations.\nmat4 BWDs[NUM_OF_OBJECTS]; // per object backward transformations.\n\nvoid init_scene()\n{    \n    vec2 M = iMouse.xy == vec2(0) ? vec2(0) : (2.*iMouse.xy/iResolution.xy) - 1.,\n         R = vec2( M.x, M.y );\n    FWDs[0] = fwd_srt_transform(vec3(2.), vec3(-R.y*2.,0,-R.x*2.), vec3(0));\n    BWDs[0] = inverse(FWDs[0]);\n}\n\nHIT find_closest_intersection(RAY ray)\n{   \n    HIT c_hit;\n    c_hit.hit_dist = 9e5; c_hit.hit_something = 0;\n    \n    for (int i = 0; i < NUM_OF_OBJECTS; ++i)\n    {\n        // Apply inverse transform.\n        RAY r = apply_transform_to_ray(ray, BWDs[i]);\n\n        // Intersect with simplified primitive.\n        //HIT hit = ray_plane_XZ_int(r);\n        //HIT hit = ray_infinite_plane_XZ_int(r);\n        HIT hit = ray_disk_XZ_int(r);\n        \n        // Hit something closer?\n        if (c_hit.hit_dist > hit.hit_dist)\n        {\n            c_hit = hit;\n            c_hit.hitted_idx = i;\n        }\n    }\n    \n    // Recover hit_point and normal in world coordinates.\n    int idx = c_hit.hitted_idx;\n    c_hit.hit_point = apply_transformation_to_point(c_hit.hit_point, FWDs[idx]);  // why this?\n    c_hit.hp_normal = apply_transformation_to_normal(c_hit.hp_normal, BWDs[idx]); // https://www.shadertoy.com/view/mtjczz\n    return c_hit;\n}\n\nvec3 lambert(RAY ray, HIT hit) // lambert reflectance model\n{\n    vec3 light_pos = vec3(0,1,0),\n         hp_to_l = normalize(light_pos - hit.hit_point),\n         obj_col = 1.-get_background();\n\n    float diffuse = max(dot(hp_to_l, hit.hp_normal), 0.);\n    \n    return hit.hit_something == 1 ?\n        obj_col * diffuse :\n        get_background();\n}\n\nvec3 scene(vec2 SC)\n{\n    init_scene();\n\n    // Generate primary ray.\n    vec2 MP = iMouse.xy == vec2(0) ?\n        vec2(0) :\n        map_to_centered_ndc(iMouse.xy, 1., vec2(0), false);\n    RAY ray = perspective_camera(SC, vec3(0,6,6), vec3(0), iResolution.xy);\n\n    // Trace scene.\n    HIT hit = find_closest_intersection(ray);\n    \n    // Process lights.\n    return lambert(ray, hit);\n}\n\n// Basic anti-aliasing (supersample).\nvec3 OSSAA(in vec2 SC)\n{\n    vec3 col = vec3(0);\n    float order = 1., inv = 1./(2.*order + 1.), blur = 1.;\n\n    for (float y = -order; y <= order; y += 1.0)\n        for (float x = -order; x <= order; x += 1.0)\n        {\n            vec2 offset = (blur*vec2(x, y)) * inv;\n            col += scene(SC + offset);\n        }\n        \n    order = 2.*order + 1.;\n    return col / (order*order);  \n}\n\nvoid mainImage( out vec4 O, in vec2 SC )\n{\n    //O = vec4(scene(SC),1.0);\n    O = vec4(OSSAA(SC), 1.0);\n    \n    // Camera look_at.\n    O = mix(O, vec4(0,1,0,1), smoothstep(3., 0., length(SC - 0.5*iResolution.xy) - 2.));\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Structures.\nstruct RAY\n{\n    vec3 position;\n    vec3 direction;\n};\nstruct HIT\n{\n    int hit_something;\n    float hit_dist;\n    vec3 hit_point;\n    vec3 hp_normal;\n    vec2 uv;\n    int hitted_idx;\n};\n// Cameras.\nRAY perspective_camera(vec2 SC, vec3 position, vec3 look_at, vec2 resolution)\n{\n    float zFocalLength = 50.0; // mm.\n    vec3 camera = position;\n\n    vec3 f = normalize(look_at - camera);               // forward\n    vec3 r = normalize(cross(vec3(0.0, -1.0, 0.0), f)); // right\n    vec3 u = normalize(cross(r, f));                    // up\n        \n    float size = 36.0;        // Sensor Fit: Mode = Auto.    \n    float aspectRatio = resolution.x / resolution.y;\n    float vpWidth = size;\n    float vpHeight = vpWidth / aspectRatio;\n           \n    // Before uv=[0;1][0;1]\n    vec2 uv = SC / resolution.xy;\n    uv.x = (uv.x * vpWidth) - vpWidth * 0.5;\n    uv.y = (uv.y * vpHeight) - vpHeight * 0.5;\n    // After uv=[-vpWidth*0.5; vpWidth*0.5][-vpHeight*0.5; vpHeight*0.5]\n\n    return RAY(\n        camera,\n        normalize(uv.x * r + uv.y * u + f * zFocalLength));\n}\n\n// Ray-Object intersection routines.\nHIT ray_infinite_plane_XZ_int(RAY ray)\n{\n    // Plane definition:\n    // Equation: Ax + By + Cz + D = 0\n    // Primitive constrains:\n    //   N = vec3(A, B, C) = vec3(0, 1, 0)\n    //   D = 0\n\n    HIT hit;\n    float root = -ray.position.y/ray.direction.y;\n\n    if (dot(vec3(0,1,0), ray.direction) > .0 || // back face?    \n        root < 0.)                              // behind camera?\n    { \n        hit.hit_something = 0;\n        hit.hit_dist = 9e5;\n        return hit; \n    }\n    \n    hit.hit_something = 1;\n    hit.hit_dist = root;\n    hit.hit_point = ray.position + ray.direction * root;\n    hit.hp_normal = vec3(0,1,0);\n    hit.uv = hit.hit_point.xz;\n    \n    return hit;\n}\nHIT ray_plane_XZ_int(RAY ray)\n{\n    // Plane definition:\n    // Equation: Ax + By + Cz + D = 0\n    // Primitive constrains:\n    //    N = vec3(A, B, C) = vec3(0, 1, 0)\n    //    D = 0, abs(x) <= 1, abs(y) <= 1\n    \n    HIT hit;\n    float root = -ray.position.y/ray.direction.y;\n    hit.hit_point = ray.position + ray.direction * root;\n\n    if (dot(vec3(0,1,0), ray.direction) > .0 || // back face?    \n        root < 0. ||                            // behind camera?\n        abs(hit.hit_point.x) > 1. ||            // outside plane area in x direction?\n        abs(hit.hit_point.z) > 1.)              // outside plane area in z direction?\n    { \n        hit.hit_something = 0;\n        hit.hit_dist = 9e5;\n        return hit; \n    }\n    \n    hit.hit_something = 1;\n    hit.hit_dist = root;\n    hit.hit_point = hit.hit_point;\n    hit.hp_normal = vec3(0,1,0);\n    hit.uv = hit.hit_point.xz;\n    \n    return hit;\n}\nHIT ray_disk_XZ_int(RAY ray)\n{\n    // Disk definition:\n    // Equation: Ax + By + Cz + D = 0\n    // Primitive constrains:\n    //    N = vec3(A, B, C) = vec3(0, 1, 0)\n    //    D = 0, x*x + z*z <= 1.\n    \n    HIT hit;\n    float root = -ray.position.y/ray.direction.y;\n    hit.hit_point = ray.position + ray.direction * root;\n\n    float x = hit.hit_point.x,\n          z = hit.hit_point.z;\n    if (dot(vec3(0,1,0), ray.direction) > .0 || // back face?    \n        root < 0. ||                            // behind camera?\n        x*x + z*z > 1.)\n        //abs(x*x*x) + abs(z*z*z) > 1.) // other powers\n    { \n        hit.hit_something = 0;\n        hit.hit_dist = 9e5;\n        return hit; \n    }\n    \n    hit.hit_something = 1;\n    hit.hit_dist = root;\n    hit.hit_point = ray.position + ray.direction * root;\n    hit.hp_normal = vec3(0,1,0);\n    hit.uv = hit.hit_point.xz;\n    \n    return hit;\n}\nHIT ray_plane_int(RAY ray, vec3 pos, vec3 N)\n{\n    HIT hit;\n  \n    float dp_n = dot(N, pos - ray.position),\n          dp_d = dot(N, ray.direction),\n          t = dp_n / dp_d;\n   \n    hit.hit_point = ray.position + ray.direction * t;\n    \n    if (t <= 0.)\n    {\n        hit.hit_something = 0;\n        hit.hit_dist = 9e5;\n        return hit;\n    }\n    \n    hit.hit_something = 1;\n    hit.hit_dist = t;\n    hit.hp_normal = dp_d < 0. ? -N : N;\n    hit.uv = hit.hit_point.xz;\n    \n    return hit;\n}\n\n/*\n    Matricies for column vectors and row major matricies,\n    because i prefer this variant)\n    \n    Multiplication order:\n    T2 * T1 * T0 * V;\n    \n    Representation for points and directions\n    in homogeneous coordinates:\n        Points     p = vec4(p.xyz, 1),\n        Direction  d = vec4(p.xyz, 0).\n*/\nmat4 scale(vec3 s)\n{\n    mat4 M = mat4(\n        s.x,   0,   0, 0,\n          0, s.y,   0, 0,\n          0,   0, s.z, 0,\n          0,   0,   0, 1);\n    return transpose(M);\n}\nmat4 rotX(float rad)\n{\n    float s = sin(rad), c = cos(rad);\n    mat4 M = mat4(\n         1, 0,  0, 0,\n         0, c, -s, 0,\n         0, s,  c, 0,\n         0, 0,  0, 1);\n    return transpose(M);\n}\nmat4 rotY(float rad)\n{\n    float s = sin(rad), c = cos(rad);\n    mat4 M = mat4(\n         c, 0, s, 0,\n         0, 1, 0, 0,\n        -s, 0, c, 0,\n         0, 0, 0, 1);\n    return transpose(M);\n}\nmat4 rotZ(float rad)\n{\n    float s = sin(rad), c = cos(rad);\n    mat4 M = mat4(\n         c, -s, 0, 0,\n         s,  c, 0, 0,\n         0,  0, 1, 0,\n         0,  0, 0, 1);\n    return transpose(M);\n}\nmat4 translate(vec3 t)\n{\n    mat4 M = mat4(\n        1, 0, 0, t.x,\n        0, 1, 0, t.y,\n        0, 0, 1, t.z,\n        0, 0, 0,   1);\n    return transpose(M);\n}\nmat4 fwd_srt_transform(vec3 s, vec3 r, vec3 t) // scale, rotate, translate\n{\n    return translate(t) * rotX(r.x) * rotY(r.y) * rotZ(r.z) * scale(s);\n}\nmat4 bwd_srt_transform(vec3 s, vec3 r, vec3 t) // scale, rotate, translate\n{\n    return inverse(translate(t) * rotX(r.x) * rotY(r.y) * rotZ(r.z) * scale(s));\n}\nRAY apply_transform_to_ray(RAY ray, mat4 T)\n{\n    vec4 P = vec4(ray.position + ray.direction, 1);   \n         P = T * P;\n         \n    RAY res;\n    res.position = (T * vec4(ray.position, 1.)).xyz;\n    res.direction = normalize(P.xyz - res.position);\n    return res;\n}\nvec3 apply_transformation_to_normal(vec3 normal, mat4 T)\n{\n    mat3 SR = mat3(T[0].xyz, T[1].xyz, T[2].xyz);\n    // https://paroj.github.io/gltut/Illumination/Tut09%20Normal%20Transformation.html   \n    normal = normal * transpose(inverse(SR));\n    \n    return normalize(normal);\n}\nvec3 apply_transformation_to_point(vec3 p, mat4 T) { return (T * vec4(p, 1.)).xyz; }","name":"Common","description":"","type":"common"}]}