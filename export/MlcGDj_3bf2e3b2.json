{"ver":"0.1","info":{"id":"MlcGDj","date":"1471577053","viewed":481,"name":"Kalida test 002","username":"sgoelzer","description":"Work in progress. I broke the sound waveform feedback. Will fix in the next evolution Kalida test 003\nI am also working on a better fractal effect. ","likes":8,"published":1,"flags":4,"usePreview":1,"tags":["test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdXGRr","filepath":"/presets/mic.png","previewfilepath":"/presets/mic.png","type":"mic","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// ---- change here ----\nconst float USE_KALEIDOSCOPE = 1.0;\nconst float NUM_SIDES = 10.0;\n// float NUM_SIDES = 10.0 *(sin(iTime * 0.6) + 1.2);\n// math const\nconst float PI = 3.141;\nconst float DEG_TO_RAD = PI / 120.0;\n\n// -4/9(r/R)^6 + (17/9)(r/R)^4 - (22/9)(r/R)^2 + 1.0\nfloat field( vec2 p, vec2 center, float r ) {\n\tfloat d = length( p - center ) / r;\n\t\n\tfloat t   = d  * d;\n\tfloat tt  = t  * d;\n\tfloat ttt = tt * d;\n\t\n\tfloat v =\n\t\t( - 4.0 / 9.0 ) * ttt +\n\t\t(  17.0 / 9.0 ) * tt +\n\t\t( -22.0 / 9.0 ) * t +\n\t\t1.0;\n\t\n\treturn clamp( v, 0.0, 1.0 );\n}\n\nvec2 Kaleidoscope( vec2 uv, float n, float bias ) {\n\tfloat angle = PI / n;\n\t\n\tfloat r = length( uv );\n\tfloat a = atan( uv.y, uv.x ) / angle;\n\t\n\ta = mix( fract( a ), 1.0 - fract( a ), mod( floor( a ), 2.0 ) ) * angle;\n\t\n\treturn vec2( cos( a ), sin( a ) ) * r;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 ratio = iResolution.xy / min( iResolution.x, iResolution.y );\n\tvec2 uv = ( fragCoord.xy * 2.0 - iResolution.xy ) / min( iResolution.x, iResolution.y );\n\t\n\t// --- Kaleidoscope ---\n\tuv = mix( uv, Kaleidoscope( uv, NUM_SIDES, iTime * 0.6 ), USE_KALEIDOSCOPE ); \n\t\n\tvec3 final_color = vec3( 0.0 );\n\tfloat final_density = 0.0;\n\tfor ( int i = 0; i < 128; i++ ) {\n\t\tvec4 noise  = texture( iChannel0, vec2( float( i ) + 0.5, 0.5 ) / 256.0 );\n\t\tvec4 noise2 = texture( iChannel0, vec2( float( i ) + 0.5, 9.5 ) / 256.0 );\n\t\t\n\t\t// velocity\n\t\tvec2 vel = noise.xy * 2.4 - vec2( 1.5 );\n\t\t\n\t\t// center\n\t\tvec2 pos = noise.xy;\n\t\tpos += iTime * vel * 0.2;\n\t\tpos = mix( fract( pos ), 1.0 - fract( pos ), mod( floor( pos ), 2.0 ) );\n\t\t\n\t\t// remap to screen\n\t\tpos = ( pos * 3.0 - 1.0 ) * ratio;\n\t\t\n\t\t// radius\n\t\tfloat radius = clamp( noise.w, 0.3, 0.8 );\n\t\tradius *= radius * 0.5;\n\t\t\n\t\t// color\n\t\tvec3 color = noise2.xyz;\n\t\t\n\t\t// density\n\t\tfloat density = field( uv, pos, radius );\n\n\t\t// accumulate\n\t\tfinal_density += density;\t\t\n\t\tfinal_color += density * color;\n\t}\n\n\tfinal_density = clamp( final_density - 0.1, 0.0, 1.0 );\n\tfinal_density = pow( final_density, 4.0 );\n\n\tfragColor = vec4( final_color * final_density, 1.0 );\n}","name":"Image","description":"","type":"image"}]}