{"ver":"0.1","info":{"id":"XtsfWM","date":"1513355619","viewed":382,"name":"color diffraction test","username":"martinsh","description":"testing diffraction for iridescence, thin film interference, rainbows, sundogs and coronas and stuff... im just reutilizing wiser people`s work here, credits are in the shader. ","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["interference","rainbow","diffraction","airy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//based on aberkson1`s N-Slit With Diffraction \n//https://www.shadertoy.com/view/Ms2cDh\n\n//references https://www.itp.uni-hannover.de/fileadmin/arbeitsgruppen/zawischa/static_html/multibeam.html\n//fastAiry from http://www.math.kobe-u.ac.jp/~vidunas/rainbow6.html\n//MAIRYA from http://jean-pierre.moreau.pagesperso-orange.fr/Cplus/mairya_cpp.txt\n//by C++ Release By J-P Moreau, Paris. (www.jpmoreau.fr)\n\nconst float PI = 3.141592653589793;\nconst float PERMITTIVITYOFFREESPACE = 8.85419 * pow(10.0, -12.0);\nconst float LIGHTSPEED = 2.99792 * pow(10.0, 8.0);\n\nconst float red = 670.0 * pow(10.0, -9.0);   //WaveLength (nm).\nconst float green = 550.0 * pow(10.0, -9.0); //WaveLength (nm).\nconst float blue = 420.0 * pow(10.0, -9.0);  //WaveLength (nm).\n\nconst float gamma = 1.2;\n\nvoid AJYIK(in float X, inout float VJ1, inout float VJ2, inout float VY1, inout float VY2, inout float VI1, inout float VI2, inout float VK1, inout float VK2) {\n/*      =======================================================\n!       Purpose: Compute Bessel functions Jv(x) and Yv(x),\n!                and modified Bessel functions Iv(x) and\n!                Kv(x), and their derivatives with v=1/3,2/3\n!       Input :  x --- Argument of Jv(x),Yv(x),Iv(x) and\n!                      Kv(x) ( x Ã² 0 )\n!       Output:  VJ1 --- J1/3(x)\n!                VJ2 --- J2/3(x)\n!                VY1 --- Y1/3(x)\n!                VY2 --- Y2/3(x)\n!                VI1 --- I1/3(x)\n!                VI2 --- I2/3(x)\n!                VK1 --- K1/3(x)\n!                VK2 --- K2/3(x)\n!       ======================================================= */\nfloat A0,B0,CK,GN1,GN2,GP1,GP2,QX,PI,PX,R,RP,RP2,RQ,SK,UJ1,UJ2,UU0,VV,VJL,VL,VV0,X2,XK;\nfloat C0,GN,PV1,PV2,SUM,VIL,VSL;\nint K, K0, L;\nif (X == 0.0) \n{\n    VJ1=0.0;\n\tVJ2=0.0;\n\tVY1=-1.0e+300;\n\tVY2=1.0e+300;\n\tVI1=0.0;\n\tVI2=0.0;\n\tVK1=-1.0e+300;\n\tVK2=-1.0e+300;\n    return;\n}\nPI=3.141592653589793;\nRP2=.63661977236758;\nGP1=.892979511569249;\nGP2=.902745292950934;\nGN1=1.3541179394264;\nGN2=2.678938534707747;\nVV0=0.444444444444444;\nUU0=1.1547005383793;\nX2=X*X;\nK0=12;\nif (X >= 35.0) K0=10;\nif (X >= 50.0) K0=8;\nif (X <= 12.0)\n\tfor (L=1; L<3; L++) \n    {\n      VL=float(L)/3.0;\n      VJL=1.0;\n      R=1.0;\n      for (K=1; K<=40; K++) \n      {\n         R=-0.25*R*X2/(float(K)*(float(K)+VL));\n         VJL=VJL+R;\n         if (abs(R) < 1.0e-15)\n         {\n             A0=pow(0.5*X,VL);\n             if (L == 1) VJ1=A0/GP1*VJL;\n             if (L == 2) VJ2=A0/GP2*VJL;\n         }\n\n\t  }\n   \n}\nelse\n\t  for (L=1; L<3; L++) {\n      VV=VV0*float(L)*float(L);\n      PX=1.0;\n      RP=1.0;\n      for (K=1; K<=K0; K++) {\n         RP=-0.78125e-2*RP*(VV-pow(4.0*float(K)-3.0,2.0))*(VV-pow(4.0*float(K)-1.0,2.0))/(float(K)*(2.0*float(K)-1.0)*X2);\n         PX+=RP;\n      } \n      QX=1.0;\n      RQ=1.0;\n      for (K=1; K<=K0; K++) {\n         RQ=-0.78125e-2*RQ*(VV-pow(4.0*float(K)-1.0,2.0))*(VV-pow(4.0*float(K)+1.0,2.0))/(float(K)*(2.0*float(K)+1.0)*X2);\n         QX=QX+RQ;\n      }\n      QX=0.125*(VV-1.0)*QX/X;\n      XK=X-(0.5*float(L)/3.0+0.25)*PI;\n      A0=sqrt(RP2/X);\n      CK=cos(XK);\n      SK=sin(XK);\n      if (L == 1) {\n         VJ1=A0*(PX*CK-QX*SK);\n         VY1=A0*(PX*SK+QX*CK);\n      }\n      else if (L == 2) {\n         VJ2=A0*(PX*CK-QX*SK);\n         VY2=A0*(PX*SK+QX*CK);\n      }\n\t   }\nif (X <= 12.0) {\n   for (L=1; L<3; L++) {\n      VL=float(L)/3.0;\n      VJL=1.0;\n      R=1.0;\n\t     for (K=1; K<41; K++) {\n         R=-0.25*R*X2/(float(K)*(float(K)-VL));\n         VJL=VJL+R;\n         if (abs(R) < 1.0e-15)\n         {\n            B0=pow(2.0/X,VL);\n            if (L == 1) UJ1=B0*VJL/GN1;\n            if (L == 2) UJ2=B0*VJL/GN2;\n         }\n      }\n       \n\n   }\n   PV1=PI/3.0;\n   PV2=PI/1.5;\n   VY1=UU0*(VJ1*cos(PV1)-UJ1);\n   VY2=UU0*(VJ2*cos(PV2)-UJ2);\n}\nif (X <= 18.0) \n\t   for (L=1; L<3; L++) {\n      VL=float(L)/3.0,\n      VIL=1.0,\n      R=1.0;\n\t     for (K=1; K<41; K++) {\n         R=0.25*R*X2/(float(K)*(float(K)+VL));\n         VIL += R;\n         if (abs(R) < 1.0e-15)\n         {\n         A0=pow(0.5*X, VL);\n         if (L == 1)  VI1=A0/GP1*VIL;\n         if (L == 2)  VI2=A0/GP2*VIL;\n         }\n      }\n      \n\n   }\n\telse {\n   C0=exp(X)/sqrt(2.0*PI*X);\n   for (L=1; L<3; L++) {\n      VV=VV0*float(L)*float(L);\n      VSL=1.0;\n      R=1.0;\n      for (K=1; K<=K0; K++) {\n         R=-0.125*R*(VV-pow(2.0*float(K)-1.0,2.0))/(float(K)*X);\n         VSL += R;\n      }\n      if (L == 1) VI1=C0*VSL;\n      if (L == 2) VI2=C0*VSL;\n   }\n}\nif (X <= 9.0)\n   for (L=1; L<3; L++) {\n      VL=float(L)/3.0;\n      if (L == 1) GN=GN1;\n      if (L == 2) GN=GN2;\n      A0=pow(2.0/X, VL)/GN;\n      SUM=1.0;\n      R=1.0;\n      for (K=1; K<61; K++) {\n         R=0.25*R*X2/(float(K)*(float(K)-VL));\n         SUM += R;\n         if (abs(R) < 1.0e-15)\n         {\n         if (L == 1)  VK1=0.5*UU0*PI*(SUM*A0-(VI1));\n         if (L == 2)  VK2=0.5*UU0*PI*(SUM*A0-(VI2));\n         }\n      }\n\n   }\n\t\telse {\n   C0=exp(-X)*sqrt(0.5*PI/X);\n   for (L=1; L<3; L++) {\n      VV=VV0*float(L)*float(L);\n      SUM=1.0;\n      R=1.0;\n      for (K=1; K<=K0; K++) {\n         R=0.125*R*(VV-pow(2.0*float(K)-1.0,2.0))/(float(K)*X);\n         SUM += R;\n      } \n      if (L == 1)  VK1=C0*SUM;\n      if (L == 2)  VK2=C0*SUM;\n   }\n}\n}\n\nvoid AIRYA(in float X, inout float AI, inout float BI, inout float AD, inout float BD) {       \n\n/*       ======================================================\n!       Purpose: Compute Airy functions and their derivatives\n!       Input:   x  --- Argument of Airy function\n!       Output:  AI --- Ai(x)\n!                BI --- Bi(x)\n!                AD --- Ai'(x)\n!                BD --- Bi'(x)\n!       Routine called:\n!                AJYIK for computing Jv(x), Yv(x), Iv(x) and\n!                Kv(x) with v=1/3 and 2/3\n!       ====================================================== */\n\n        float C1,C2,PIR,SR3,VI1,VI2,VJ1,VJ2,VK1,VK2,VY1,VY2,XA,XQ,Z;\n        XA=abs(X);\n        PIR=0.318309886183891;\n        C1=0.355028053887817;\n        C2=0.258819403792807;\n        SR3=1.732050807568877;\n        Z=pow(XA,1.5)/1.5;\n        XQ=sqrt(XA);\n        \n        AJYIK(Z,VJ1,VJ2,VY1,VY2,VI1,VI2,VK1,VK2);\n        \n        if (X == 0.0) {\n           AI=C1;\n           BI=SR3*C1;\n           AD=-C2;\n           BD=SR3*C2;\n        } \n        else if (X > 0.0) {\n           AI=PIR*XQ/SR3*VK1;\n           BI=XQ*(PIR*VK1+2.0/SR3*VI1);\n           AD=-XA/SR3*PIR*VK2;\n           BD=XA*(PIR*VK2+2.0/SR3*VI2);\n        }\n        else {\n           AI=0.5*XQ*(VJ1-VY1/SR3);\n           BI=-0.5*XQ*(VJ1/SR3+VY1);\n           AD=0.5*XA*(VJ2+VY2/SR3);\n           BD=0.5*XA*(VJ2/SR3-VY2);\n        }\n\n}\n\nfloat fastAiry(float z)\n{\n\treturn  1.0/sqrt(PI)  * pow(z,(-1.0/4.0)) * cos(2.0/3.0*pow(z,(3.0/2.0))-PI/4.0) \n\t+ 5.0/(48.0*sqrt(PI)) * pow(z,(-7.0/4.0)) * sin(2.0/3.0*pow(z,(3.0/2.0))-PI/4.0);\n}\n\nfloat DoubleSlitIntensity(float _E, float _n, float _p, float _b)\n{\n\tfloat _I0; \n    float AI, BI, AD, BD = 0.0;\n    AIRYA(-_b, AI, BI, AD, BD);\n   \n    float AIp, BIp, ADp, BDp = 0.0;\n    AIRYA(-_p, AIp, BIp, ADp, BDp);\n    \n    _I0 = pow(_n, 2.0) * PERMITTIVITYOFFREESPACE * LIGHTSPEED * pow(_E, 2.0);\n    \n    //return _I0 * 0.5 * pow((fastAiry(_p) / 2.0), 2.0) * pow(sin(fastAiry(_b) / 2.0) / (_b / 2.0), 2.0);\n    return _I0 * 0.5 * pow((AIp / 2.0), 2.0) * pow(sin(AI / 2.0) / (_b / 2.0), 2.0);\n}\n\nfloat SingleSlitIntensity(float _E, float _b)\n{\n\tfloat _I0; \n    float AI, BI, AD, BD = 0.0;\n    AIRYA(-_b, AI, BI, AD, BD);\n    _I0 = 2.0 * PERMITTIVITYOFFREESPACE * LIGHTSPEED * pow(_E, 2.0);\n    //return _I0 * pow(sin(_b / 2.0) / (_b / 2.0), 2.0);\n\treturn _I0 * pow((AI / 2.0) / (_b / 2.0), 2.0);\n    //return _I0 * pow((fastAiry(_b) / 2.0) / (_b / 2.0), 2.0);\n}\n\nfloat PhaseShift(float _d, float _R, float _l, float x)\n{\n\treturn (PI * _d * x) / (_l * _R);\n}\n\nfloat Beta(float _a, float _R, float _l, float x)\n{\n    return (PI * _a * x) / (_l * _R);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy ;\n    uv.x = uv.x - iResolution.x / 2.0;\n    uv.y = uv.y - iResolution.y / 2.0; \n    \n\tfloat d = length((uv - 0.5) );\n    //float d = uv.x;\n    \n    float _d = (iMouse.x+50.0)*0.00000001;  \t\t//Distance between slits in meters.\n    float _a = (iMouse.y+20.0)*0.00000001;\t    //Width of slits in meters.\n    float _n = 2.0;\t\t\t\t\t\t\t//Number of slits.\n    \n    float _R = 100.0;\t\t\t\t\t\t//Distance between slits and screen.\n    float _E = 50.0;\t\t\t\t\t\t//Efield amplitude.\n    \n    float _Ir, _Ig, _Ib = 0.0;\n    \n    float _br = Beta(_a, _R, red, d);\t\t\t//Beta\n    float _pr = PhaseShift(_d, _R, red, d); \t//Phase shift\n    \n    float _bg = Beta(_a, _R, green, d);\t\t\t//Beta\n    float _pg = PhaseShift(_d, _R, green, d); \t//Phase shift\n\n\n    float _bb = Beta(_a, _R, blue, d);\t\t\t//Beta\n    float _pb = PhaseShift(_d, _R, blue, d); \t//Phase shift\n    \n    if (_n == 1.0)\n    {\n        _Ir = SingleSlitIntensity(_E, _br);\t//Intensity\n    \t_Ig = SingleSlitIntensity(_E, _bg);\t//Intensity\n    \t_Ib = SingleSlitIntensity(_E, _bb);\t//Intensity\n\n    }\n    else\n    {\n    \t_Ir = DoubleSlitIntensity(_E, _n, _pr, _br);\t//Intensity\n    \t_Ig = DoubleSlitIntensity(_E, _n, _pg, _bg);\t//Intensity\n    \t_Ib = DoubleSlitIntensity(_E, _n, _pb, _bb);\t//Intensity\n    }\n    \n    \n\tfragColor.r = pow( _Ir, 1.0/gamma );\n    fragColor.g = pow( _Ig, 1.0/gamma );\n    fragColor.b = pow( _Ib, 1.0/gamma );\n    fragColor.a = 1.0;\n}","name":"Image","description":"","type":"image"}]}