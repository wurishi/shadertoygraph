{"ver":"0.1","info":{"id":"3d3Sz2","date":"1572325559","viewed":434,"name":"Halloween III","username":"bembi","description":"Happy Happy Halloween, Halloween, Halloween\nHappy Happy Halloween, Silver Shamrock\n\nhttps://youtu.be/RNUr30fugls?t=38","likes":17,"published":1,"flags":40,"usePreview":0,"tags":["halloween","pumpkin"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\nfloat vignette(vec2 st, float s, float diff)\n{\t \n    vec2 size = vec2(s);    \n    float rect = smoothstep(1.-size.x, 1.-size.x+diff, st.x) -\n                 smoothstep(size.x-diff, size.x, st.x);\n    rect *=  smoothstep(1.-size.y, 1.-size.y+diff, st.y) -\n            smoothstep(size.y-diff, size.y, st.y);        \n\treturn 1. - clamp(rect, 0., 1.);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;    \n    \n    uv += .5;\n    uv.x *= 1.33;\n    uv -= .5;\n    uv.x -= 1.33 - 1.;\n\n    \n    vec2 st = uv;\n    \n    vec2 stw = uv;\n    stw -= .5;\n    stw.x *= 1. + .05 * (1. - sin((st.y)*PI));\n    stw.y *= 1. + .05 * (1. - sin((st.x)*PI));      \n    stw += .5;\n    \n\n    float wave = smoothstep(.18, .2, sin(-iTime*2.+stw.y*10.)*.5+.5);\n\n    st.x += ( random( vec2(stw.y, iTime)) - 0.5 )* (0.005 + (1.-wave)*.015);\n    st.x += ( sin(iTime*5.+stw.y*10.+100.*random(vec2(1., iTime))) )* 0.002;\n    st.y += (random(vec2(0., iTime))-.5)*.003;\n    st.y += (random(vec2(0., iTime))-.5)*.02 * step(0.98, random(vec2(0., iTime*.23)));\n\n\n    vec3 end = texture( iChannel0, st).rgb;\n    \n    //black\n    end *= 1. + wave*.3;\n    // white\n    float white_speed = .5;\n    float white =   .05*step(.99, sin(iTime*white_speed+stw.y*10.)) +\n                    .04*step(.9, sin(iTime*white_speed+stw.y*10.+PI*.33)) +\n                    .03*step(.95, sin(iTime*white_speed+stw.y*10.+PI));\n    end += smoothstep(0., 1., white)*3.6;\n    \n    float patin_size = 1. - .15;\n    float patin = (smoothstep(patin_size + sin(iTime)*.02, 1., 1. - stw.y) + \n                smoothstep(patin_size + sin(iTime+200.)*.02, 1., stw.y))\n                * sin(stw.x*random(vec2(20. + round(stw.y*300.), round(iTime*30.)))*(60.*(1.-sin(stw.y*PI))));\n    patin = smoothstep(0., 1., patin)*.4;\n    end += patin;\n    \n    \n\n    // bloom\n    for( float x = -6.0; x < 3.5; x += 1.2 ){\n        end.xyz += vec3(\n            texture( iChannel0, st + vec2( x - 0.0, 0.0 ) * .008 ).r,\n            texture( iChannel0, st + vec2( x - 2.0, 2.0 ) * .008 ).g,\n            texture( iChannel0, st + vec2( x - 4.0, 2.0 ) * .008 ).b\n        ) * 0.2;\n    }\n    end *= 0.6;\n\n    float tv = vignette(stw, .02, .04);\n    float vig = vignette(stw, .2, .35);\n\n    end -= vec3(0., vig*.03, vig*.03)*2.;  \n    end -= vignette(stw, .04, .03)*.02;\n    end -= tv*1000.;\n\n    float noise = 1. + (random(uv+iTime)-.5)*.7;\n    \n\n    fragColor = vec4(end*noise, 1.0 );\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define PI 3.14159265359\nvec2 mainSound( in int samp, float time)\n{\n    float t = fract(time);\n    \n    vec2 n = (vec2(392., 392.666) + sin(time*50.)*.3 + sin(time*.5)*6.66*vec2(1., -.1))  //cursed G\n        *\n        (  1.*(1.-step(.25, t))\n         + 1.498*(step(.25, t)*(1.-step(.5, t)))\n         + 0.749*(step(.5, t)*(1.-step(.75, t)))\n         + 1.498*(step(.75, t))\n         );\n    \n    vec2 s = \n        \tsin(2.0*PI*n*t) +\n        \tsin(2.0*PI*n*1.01*t) +\n        \tsin(2.0*PI*n*0.99*t) +\n        \tabs(sin(2.0*PI*n*0.97*t))*.3 +\n        \tsin(2.0*PI*n*1.03*t) +\n        \tsin(2.0*PI*n*1.49*t)*.2 +        \t\n        \tabs(sin(2.0*PI*n*.5*t))*.5 +\n        \tsin(2.0*PI*n*2.*t)*.2 +        \n        \t0.;\n    \n    s = clamp(s/9., -1., 1.);\n    //s *= 1. - pow(fract(t*4.), 2.9); // noisy at note changes...\n    s *= sin(t*4.*PI); \n    s *= 1. - (sin(time*10.)*.5+.5)*.3;\n    \n    return s * .4;    \n}","name":"Sound","description":"","type":"sound"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define PI 3.14159265359\nvec4 NewRGBA(float r, float g, float b)\n{   \n    return vec4(r,g,b,255.)/255.;\n}\nvec2 rotate(vec2 _st, float _angle){\n    _st -= .5;\n    _st *= mat2(cos(_angle),-sin(_angle), sin(_angle),cos(_angle)) ;\n    _st += .5;     \n    return _st;\n}\nfloat poly(vec2 uv,vec2 p, float s, float dif,float N,float a){\n    // Remap the space to -1. to 1.\n    vec2 st = p - uv ; \n    // Angle and radius from the current pixel\n    float a2 = atan(st.x,st.y)+a;\n    float r = PI*2./N;\n    float d = cos(floor(.5+a2/r)*r-a2)*length(st);\n    float e = 1.0 - smoothstep(s,s+dif,d);\n    return e;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    float flashOn = step(.8, sin(iTime*4.*PI)*.5+.5); \n    // flashOn = 0.;\n\n    uv += .5;\n    uv.x *= 1.33;\n    uv -= .5;\n    uv.x -= 1.33 - 1.;\n    uv.y += -.015;  \n    \n    vec2 st = uv;\n    \n    vec4 c1 = NewRGBA(255.,136.,94.);\n    vec4 c2 = NewRGBA(10.,20.,28.)*(1.5 + sin(iTime*5.)*.3);\n    vec4 c3 = NewRGBA(174.,254.,255.);\n    \n\n    st -= .5;\n    st.x *= .8;\n    st *= 1.5;\n    st.y *= 1. - .2*(1. - sin(uv.x*PI));\n    st += .5;    \n    st -= vec2(.5, .8);\n    float r = length(st)*5.;\n    st = normalize(st);\n    float kin_base = (r -\n            ((st.y*pow(abs(st.x), 5.9)) / \n            (st.y+4.8)-2.3*st.y+1.26));\n    kin_base = smoothstep(.5, .48, kin_base);\n//    kin_base = kin_base * 4;\n\n    st = uv;\n    st -= .5;\n    st *= vec2(1.3, .3);\n    st.x += -sin(uv.y*10.)*.16;\n    st += .5;\n    st = rotate(st, -.05);\n    float hair = poly(st, vec2(.5)+vec2(-0.128, 0.069), .033, .003, 3., PI);\n    kin_base = smoothstep(0., 1., kin_base + hair);\n\n    st = uv;\n    float eyeL = poly(st, vec2(.5)+vec2(-.15, 0.038), .033, .003, 3., 0.);\n    float eyeR = poly(st, vec2(.5)+vec2(.15, 0.038), .033, .003, 3., 0.);\n    st = uv;\n    st -= .5;\n    st.x *= 1.2;\n    st += .5;\n    float nose = poly(st, vec2(.5)+vec2(.0, -0.06), .03, .003, 3., 0.);\n    \n    st = uv;\n    st -= .5;\n    st.y *= 1.3;\n    st.x *= 0.9;\n    st += .5;\n    vec2 mouth_pos = vec2(.5, .49);\n    float mouth = poly(st, mouth_pos+vec2(.0, -0.01), .27, .003, 100., 0.)\n                * (1. - poly(st, mouth_pos+vec2(.0, 0.31), .5, .003, 100., 0.));\n                \n    st = uv;\n    vec2 st_crooked = st;\n    st_crooked -= .5;\n    st_crooked.y += uv.x*.15;\n    st_crooked += .5;\n    vec2 st_crooked2 = st;\n    st_crooked2 -= .5;\n    st_crooked2.y -= uv.x*.15;\n    st_crooked2 += .5;\n    float teeth = poly(st, mouth_pos+vec2(.0, -.135), .043, .003, 4., 0.)\n                + poly(st_crooked, mouth_pos+vec2(-.15, -.145), .036, .003, 4., 0.)\n                + poly(st_crooked2, mouth_pos+vec2(.15, -.295), .036, .003, 4., 0.);\n    mouth *= 1. - teeth;\n\n    vec4 pumpkin = (kin_base-eyeL-eyeR-nose-mouth) * c1;\n    \n    float grid = (sin(uv.y*750.)*.5+.5);\n    pumpkin *= 1. - .6*smoothstep(1., 0., grid*2.);\n    \n    vec3 end = mix(c2.rgb, pumpkin.rgb, pumpkin.rgb);\n\n    float flash = (sin(iTime*20.+uv.y*3.)*.5+.5);\n    flash = flash + .25;\n    end = end + c3.rgb * (flashOn * flash *.8); // bake flash\n    end += vec3(0.,0.,.5)*smoothstep(.5, 0., (sin(iTime+uv.y*7.)*.5+.5))*flashOn; //bluish\n    end = mix(end, c3.rgb, flashOn * flash); //more aftereffects\n    \n    \n    end =  smoothstep(0., 1., end);\n    \n    fragColor = vec4(end,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}