{"ver":"0.1","info":{"id":"ttGBDy","date":"1615145109","viewed":129,"name":"wave simulator by racon","username":"racon","description":"controls: q,e,r,a,\nq : toggle wave generator;\ne : toggle view mode (wave / energy view)\nr : reset\na : reload seed","likes":3,"published":1,"flags":48,"usePreview":0,"tags":["sim"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    vec2 uv2=fragCoord/iChannelResolution[0].xy;\n    vec4 cell=getPos(texture(iChannel0,uv2));\n    float energy=cell.x*cell.x+cell.y*cell.y;\n    //press 'e' to change view modes\n    bool viewMode=texelFetch(iChannel1,ivec2(69,2),0).x==1.0;\n    \n    if(viewMode)\n    fragColor =vec4(setPos(vec3(cell.z-1.0,vec2(cell.x)/cell.z)),1.0);\n    if(!viewMode)\n    fragColor =vec4(setPos(vec3(cell.z-1.0,vec2(energy/1.0)/cell.z)),1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//cell=[mass,velocity,friction,unused]\nvec2 uv;\nvec4 getTPos(vec2 add){\n    vec4 t=texture(iChannel0,clamp(uv+add/iResolution.xy,vec2(0.0),vec2(1.0)));\n    t=clamp(t,vec4(0.00001),vec4(0.99999));\n    return getPos(t);\n}\nvec4 cellA;\nfloat dt=1.0;\nconst float sumOfDists2=(38.0+15.0*sqrt(2.0))/5.0;//~11.84264\nvec4 doCellSim(vec2 neighbourPos){//diffuse\n    vec4 cellBTemp=getTPos(neighbourPos);\n    //if(cellBTemp==vec4(0.0))return vec4(0.0);\n    vec4 cellB=(cellBTemp);  //+(cellB.y-cellA.y)/8.\n    float move=(cellB.x-cellA.x)/sqrt(dot(neighbourPos,neighbourPos));\n    move*=cellA.z*4.5/sumOfDists2;//*6.8/9.0;\n    float d=cellA.w;\n    return vec4(move/8.0*d,move/2.0*(1.0-d),0.0,0.0);//*cellA;\n}\nfloat waveEquation(float t){\n    t=t/10.0;//wave period,wave gap\n    t=mod(t,1.0);\n    t=clamp(t,0.0,1.0)*tau;\n    return -(cos(t)-1.)*3.0;\n}\nvec2 getObjects(vec2 fragCoord){\n    vec4 col=texelFetch(iChannel0,ivec2(fragCoord),0);\n    col=cellA;//vec4(0.0,0.0,1.0,0.0);\n    vec2 c;\n    vec2 c1;\n    vec2 res=iResolution.xy;\n    uv = fragCoord/iResolution.xy;\n    if(false){//many slits{\n        c1=fragCoord-vec2(100,144);\n        const float rot=tau*(-0.0/8.0);\n        const float depth = 10.0;\n        c1*=mat2(cos(rot),sin(rot),-sin(rot),cos(rot));\n        //if(abs(c1.x+depth*2.0)<depth/2.0)return vec2(0.1,0.0);\n        //c1=vec2(c1.x,);\n        if(c1.x>0.0&&(c1.x-=5.0)<0.0)if(mod(c1.y,10.0)<2.0)return vec2(0.0,0.0);\n        if(c1.x>0.0&&(c1.x-=1.0)<0.0)return vec2(0.9,0.0);\n        if(c1.x>0.0&&(c1.x-=5.0)<0.0)if(mod(c1.y-=0.,10.0)<2.0)return vec2(0.0,0.0);\n        if(c1.x>0.0&&(c1.x-=5.0)<0.0)return vec2(0.9,0.0);\n    }\n    {//borders:{\n        const float b=40.0;\n        c1=abs(abs(uv-vec2(0.5))-vec2(0.5))*res;\n        float minv=min(c1.x,c1.y);\n        if(minv<b){\n            return vec2(1.0+0.25*(b-minv)/b,1.0*(b-minv)/b);;\n        }\n        \n    }//}borders\n    {//pin hole\n        c1=fragCoord-vec2(220,150);\n        const float rot=tau*(0.04);\n        c1*=mat2(cos(rot),sin(rot),-sin(rot),cos(rot));\n        if(c1.x>0.0&&c1.x<3.0&&abs(c1.y)>8.0)return vec2(1.0/(1.5)*0.,0.0);\n    }\n    {//square:{\n        c1=fragCoord-vec2(140,150);\n        const float rot=tau*(1.0/16.0);\n        const mat2 rotMat=mat2(cos(rot),sin(rot),-sin(rot),cos(rot));\n        c1=min(vec2(0.0),abs(c1*vec2(1.0,1.0)*rotMat)-vec2(10.0));\n        c1.x=max(c1.x,c1.y);\n        if(c1.x<0.0)return vec2(1.0/(1.5),0);\n    }//}square\n    {\n        //col=vec4(0.0,0.0,1.0,0.0);\n        return vec2(1.0,0.0);\n    }//default\n}\nvec2 onClickWave(vec2 fragCoord){\n    float time=float(iFrame)*dt;\n    return vec2(\n        waveEquation(time),\n        ( waveEquation(time+1.0)-waveEquation(time) )\n    );\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 res=iResolution.xy;\n    uv = fragCoord/iResolution.xy;\n    cellA =getTPos(vec2(0.0,0.0));\n    vec4 temp=texelFetch(iChannel0,ivec2(fragCoord),0);\n    //onReset(press 'r') => make all black and reset all\n    if(texelFetch(iChannel1,ivec2(82,0),0).x==1.0)temp=vec4(0.0);\n    //onReload (press 'a') =>{make edge and circle}\n    if(dot(temp,temp)==0.0||texelFetch(iChannel1,ivec2(65,0),0).x==1.0){\n        if(dot(temp,temp)==0.0)cellA=vec4(0.0,0.0,1.0,0.0);\n        if(cellA.z!=0.0)cellA.xy/=cellA.z;else cellA.xy=vec2(0.0);\n        cellA.zw=getObjects(fragCoord);\n        cellA.xy*=cellA.z;\n        fragColor=setPos(cellA);\n        return;\n    }\n    vec4 sum;{sum = (\n        doCellSim(vec2(-1.0,-1.0))\n        +doCellSim(vec2(-1.0, 1.0))\n        +doCellSim(vec2( 1.0,-1.0))\n        +doCellSim(vec2( 1.0, 1.0))\n        +doCellSim(vec2( 0.0,-1.0))\n        +doCellSim(vec2( 0.0, 1.0))\n        +doCellSim(vec2(-1.0, 0.0))\n        +doCellSim(vec2( 1.0, 0.0))\n        \n        + //doCellSim(vec2(-2.0,-2.0))+\n            doCellSim(vec2(-2.0,-1.0))+\n            doCellSim(vec2(-2.0, 0.0))+\n            doCellSim(vec2(-2.0, 1.0))\n        + //doCellSim(vec2(-2.0, 2.0))+\n            doCellSim(vec2(-1.0, 2.0))+\n            doCellSim(vec2( 0.0, 2.0))+\n            doCellSim(vec2( 1.0, 2.0))\n        + //doCellSim(vec2( 2.0, 2.0))+\n            doCellSim(vec2( 2.0, 1.0))+\n            doCellSim(vec2( 2.0, 0.0))+\n            doCellSim(vec2( 2.0,-1.0))\n        + //doCellSim(vec2( 2.0,-2.0))+\n            doCellSim(vec2( 1.0,-2.0))+\n            doCellSim(vec2( 0.0,-2.0))+\n            doCellSim(vec2(-1.0,-2.0))\n    );}\n    //toggle sine wave (click or 'q')\n    if(!(iMouse.z>0.0&&false ^^ texelFetch(iChannel1,ivec2(81,2),0).x==1.0)){//onClick\n        vec4 col=vec4(0.5); \n        vec2 dif=vec2(60.0,150.0)-fragCoord;//iMouse.xy-fragCoord;\n        dif.y=max(0.0,abs(dif.y)-60.0);\n        if(dot(dif,dif)<1.0){\n            cellA.xy=onClickWave(fragCoord);\n            fragColor = setPos(cellA);return;\n        }\n    }\n    sum=sum*dt*dt+cellA;\n    sum.y*=(1.0-0.4*sum.w);\n    sum.x/=(1.0+0.002*sum.w);\n    sum.x+=sum.y;\n    //sum.z=sum.z+0.1*(0.0-sum.z+1.0/(1.0+0.4*abs(sum.x)));\n    sum=setPos(sum);\n    fragColor=sum;//fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"vec4 someFunction( vec4 a, float b )\n{\n    return a+b;\n}\nconst float tau=4.0*asin(1.0);\nvec4 setPos(vec4 cell){return vec4(1.0)/(vec4(1.0)+(exp(-cell)));}\nvec3 setPos(vec3 cell){return vec3(1.0)/(vec3(1.0)+(exp(-cell)));}\nvec2 setPos(vec2 cell){return vec2(1.0)/(vec2(1.0)+(exp(-cell)));}\nfloat setPos(float cell){return 1.0/(1.0+(exp(-cell)));}\nvec4 getPos(vec4 cell){return -log(vec4(1.0)/cell-vec4(1.0));}\nvec3 getPos(vec3 cell){return -log(vec3(1.0)/cell-vec3(1.0));}\nvec2 getPos(vec2 cell){return -log(vec2(1.0)/cell-vec2(1.0));}\nfloat getPos(float cell){return -log(1.0/cell-1.0);}\nfloat len(vec2 a){return sqrt(dot(a,a));}\nfloat lenh(vec2 a){return sqrt(abs(a.x*a.x-a.y*a.y));}","name":"Common","description":"","type":"common"}]}