{"ver":"0.1","info":{"id":"7lVfWK","date":"1665291888","viewed":138,"name":"Simple Raycasting - Art of Code","username":"eklavya_1","description":"Tutorial - https://www.youtube.com/watch?v=dKA5ZVALOhs\n","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["3d","creatingray"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Takes a ray and a point in 3d space and returns the distance of the point to the line \nfloat DistLine(vec3 ro, vec3 rd, vec3 p) {\n    return length(cross(p-ro, rd))/length(rd);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5;\n    uv.x *= iResolution.x/iResolution.y;\n\n    vec3 ro = vec3(0., 0., -2.);\n    vec3 rd = vec3(uv.x, uv.y, 0.) - ro; // intersection point on screen\n\n    float t = iTime;\n\n    // need to test rays in 3d world\n    // will test against a point in 3d space, and will test distance to that point\n    // vec3 p = vec3(0., 0., 10.);\n    \n    vec3 p = vec3(sin(t), 0., 1.+cos(t));\n    \n    float d = DistLine(ro, rd, p);\n    \n    d = smoothstep(0.1, 0.09, d);\n\n    // Output to screen\n    fragColor = vec4(d);\n}","name":"Image","description":"","type":"image"}]}