{"ver":"0.1","info":{"id":"wsjyRw","date":"1586352100","viewed":95,"name":"Sine Question","username":"xXpro_campr_pro_scopeXx","description":"I'm looking for ideas to shade 32 to of them (8 per row) with different frequencies. My plan is to copy this code 32 times and then change the smoothstep coordinats and frequencies of each copy. But I know this would be not elegant.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["question"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//modified shader of https://www.shadertoy.com/view/ltX3zs\n\n#define f1 1.\n#define f2 50.\n#define f3 3.\n#define f4 7.\n#define f5 1000.\n#define f6 11.\n#define f7 100.\n#define f8 80.\n#define f9 19.\n#define f10 11.\n#define f11 12.\n#define f12 150.\n#define f13 99.\n#define f14 40.\n#define f15 1.\n#define f16 10.\n#define f17 2.\n#define f18 10.\n#define f19 12.\n#define f20 100.\n#define f21 1000.\n#define f22 400.\n#define f23 210.\n#define f24 112.\n#define f25 113.\n#define f26 131.\n#define f27 1300.\n#define f28 110.\n#define f29 1139.\n#define f30 1108.\n#define f31 1313.\n#define f32 1431.\n\n\nfloat sine_freq(vec2 uv)\n{   \n    float row = floor(uv.y*32.);\n    float y = fract(uv.y*32.);\n\n    float time = uv.x + iTime;\n    float sine = sin(3.1415926* time);\n    float r = sine;\n    return r;\n}\n\nfloat plot(vec2 uv, float pct)\n{\n    float k1 = 0.; \n    float k2 = 0.;\n    uv.y *= 4.;\n\n    float center_pos = 0.0;\n\n    if (uv.x >= -0.9 && uv.x <= .9)\n    {\n        k1 = smoothstep(12./iResolution.y,0., abs(uv.y-pct));\n    }\n\n    return k1;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = ( 2.*fragCoord.xy - iResolution.xy ) / iResolution.y;\n    float s = sine_freq(uv.xy);\n\tfragColor =  vec4(43.*plot(uv,s));\n}","name":"Image","description":"","type":"image"}]}