{"ver":"0.1","info":{"id":"wlsBRr","date":"1595888813","viewed":489,"name":"Conway's Lattice","username":"wessles","description":"This is a corrupted version of Conway's game of life that I found interesting. First, it grows outwards to fill the entire screen with a chaotic liquid of cells, which \"dries\" into a lattice. Non deterministic. *Use mouse to reset a ring of cells to \"on\".","likes":3,"published":1,"flags":48,"usePreview":0,"tags":["gameoflife","buffers"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 col = texture(iChannel0, uv, 0.0).xyz;\n    \n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float random (vec2 uv)\n            {\n                return fract(sin(dot(uv,vec2(12.9898,78.233)))*43758.5453123);\n            }\n#define LATTICED\n\n//#define perpixel\n#define downsampling 2.\n\n#ifdef perpixel\n#define res 1.\n#else\n#define res downsampling\n#endif\n\nvec2 downsample(vec2 i) {\n    #ifdef perpixel\n    return i;\n    #else\n    return round(i/res)*res;\n    #endif\n}\n\nint value(vec2 p, vec2 x) {\n    x *= res*0.99;\n    return int(round(texture(iChannel0, (p+x)/iResolution.xy).x));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 uv )\n{\n    uv = downsample(uv);\n    vec2 mouse = downsample(iMouse.xy);\n    \n    int W = value(uv, vec2(-1., 0.));\n    int E = value(uv, vec2(1., 0.));\n    int N = value(uv, vec2(0., 1.));\n    int S = value(uv, vec2(0., -1.));\n    \n    int neighbors =\n        value(uv, vec2(-1., 0.))\n    \t+ value(uv, vec2(1., 0.))\n        + value(uv, vec2(0., 1.))\n        + value(uv, vec2(0., -1.))\n        + value(uv, vec2(1., 1.))\n        + value(uv, vec2(1., -1.))\n        + value(uv, vec2(-1., -1.))\n        + value(uv, vec2(-1., 1.));\n    \n    int value = value(uv, vec2(0.,0.));\n    \n    if(value == 1) {\n        #ifndef LATTICED\n        if(neighbors < 2)\n            value = 0;\n        else\n        #endif\n            \n            if(neighbors == 2 || neighbors == 3)\n            value = 1;\n        else if(neighbors > 3)\n            value = 0;\n    } else {\n        if(neighbors == 3)\n            value = 1;\n    }\n    \n    fragColor.x = float(value);\n    \n    float md = length(mouse-uv);\n    float d = 20.;\n    if(md > (d)*res && md < (d+2.)*res)\n        fragColor.x = 1.;\n}","name":"Buffer A","description":"","type":"buffer"}]}