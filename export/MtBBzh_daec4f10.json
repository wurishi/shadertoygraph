{"ver":"0.1","info":{"id":"MtBBzh","date":"1514741615","viewed":123,"name":"try shadow2","username":"cailuming","description":"try soft shadow,fog and camera","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["shadow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4df3Rn","filepath":"/media/a/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","previewfilepath":"/media/ap/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define FAR 64.\n#define PI 3.1415926\n#define BIAS 1e-15\nstruct Ray{\n  vec3 o;\n  vec3 d;\n};\n\n// rotate functions\nmat2 rot2D(float a){\n  float c= cos(a);\n  float s= sin(a);\n  return mat2(\n     c,-s,\n     s, c\n  );\n}\n \n\n//various primitives\nvec2 plane(vec3 p){\n  float len=length(p);\n  float arc=atan(p.y,p.z+BIAS);\n  float v= p.y+1.+2.6*cos(0.1*p.z)*sin(0.2*p.x);\n  return vec2(v,0);    \n}\n\nvec2 obj1(vec3 p,vec3 c){\n  p-=c;\n \n  p.y*=0.1;\n  p-=vec3(2.7*cos(5.*p.y+iTime*6.),0,0);\n\n  return vec2(length(p)-1.,1);    \n}\n\n\n//texture mapping\n\nvoid textureMap(inout vec3 col,vec3 rd,int id){\n    float arc =atan(rd.y,rd.x+BIAS);\n    float len =0.;\n    if(id==0){\n        \n        col=mix(col,texture(iChannel1,rd.xz/10.).xyz,0.5);\n    }else if(id==1){\n        col*=vec3(2.* cos(rd.y*4.),0.7,0.1);\n    }else if(id==2){\n        \n    }else if(id==3){\n        \n    }else if(id==4){\n        \n    }\n}\n\n\n// compare function\nvoid cmp(vec2 a,inout vec2 r){\n    r=a.x>r.x?r:a;\n}\n \n//map functions\nvec2 map(vec3 p){\n    vec2 r=vec2(1.);\n    \n    cmp(obj1(p,vec3(0,0,0)),r);\n  \n    cmp(plane(p),r);\n    \n    return r;\n}\n\n//compute the normal\nvec3 norm(vec3 p,float dis){\n  vec2 e = vec2(0,1)/dis;\n  float m= map(p).x;\n  return -normalize(\n      vec3(\n          m-map(p+e.yxx).x,\n          m-map(p+e.xyx).x,\n          m-map(p+e.xxy).x\n      )\n  );  \n}\n\n// compute the soft shadow\nfloat shadow(vec3 o,vec3 d,float mint,float maxt,float k){\n    float t=0.;\n    vec2 h=vec2(0);\n    float r=1.;\n    for(float i=0.;i<=64.;i++){\n       h=map(o+t*d);\n       r=min(r,h.x*k/t);\n       t+=clamp(h.x,mint,0.3);\n       if(t>maxt||h.x<mint){\n          break;\n       }\n       \n    }\n    return r;\n}\n\n// based on Inigo Quilez's fog method\nvoid fog(inout vec3 col,float dis,vec3 ro,vec3 rd,vec3 ld){\n   float a=0.2;\n   float b=0.14;\n   float fv = a * exp(-ro.y*b) * (1.-exp( -dis*rd.y*b ))/rd.y;\n   float sv =ld.y;//clamp(dot(-rd,ld),ld.y,ld.y);\n   \n   vec3 scol=vec3(0.0,0.5,0.9);  \n   vec3 fogc= vec3(0.3,0.8,1);\n   fogc =mix(fogc,scol,sv); \n   fv*=(1.-exp(-0.004*dis*dis));\n   col=mix(col,fogc,fv);\n}\n\nvoid sun(inout vec3 col,vec3 p,vec3 lp,float t){\n   p-=lp;\n    \n   float v = 0.3 /length(p.xy);\n  \n   v=t>40.?v:0.;\n  \n   if(t>=40.){\n       col=vec3(0.3,0.3,1.)*clamp(lp.y,0.,1.);\n   }\n   //col+=vec3(v);\n   \n}\n\n// ray tracer\nvec2 rayHit(Ray r){\n    float t=1.;\n    vec2 h=vec2(0);\n    \n    for(float i=0.;i<FAR;i++){\n        h=map(r.o+t*r.d);\n        if(h.x<0.0001||t>60.){\n            break;\n        }\n        t+=h.x;\n    }\n    return vec2(t,h.y);\n}\n\n// do light calculation\nvec2 doLight(inout Ray r,float v,vec3 lp){\n    \n    vec3 p = r.o+v*r.d;\n    vec3 ld = normalize(p-lp);\n    vec3 n=norm(p,v);\n    \n    float nl = clamp(dot(n,-ld),0.0,1.);\n    float rl =clamp(dot(r.d,normalize(reflect(normalize(lp),n))),0.,1.);\n    float sl = shadow(lp,ld,0.0001,length(lp-p)*0.95,128.);\n    float fc =clamp(sl,0.1,1.)*nl+0.1+rl*rl;\n    \n    return vec2(fc,v);\n}\n\n//set the camera \nvoid setCamera(inout Ray r,vec3 pos,vec3 tar,vec2 uv){\n    vec3 look= normalize(tar);\n    vec3 right = normalize( cross(vec3(0.0,1.0,0.0),look) );\n    vec3 up = normalize( cross(look,right));\n    vec3 rd = normalize(uv.x*right + uv.y*up + 0.6*look );\n    r.o=pos;\n    r.d=rd;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy-vec2(0.5);\n    float as =iResolution.x/iResolution.y;\n    uv.x*=as;\n    \n    vec3 lp = vec3(10,10.*cos(iTime*0.2),10); \n     \n    Ray ray;\n    \n    vec3 pos =vec3(0,2,-20);\n    vec3 dir =vec3(0,-PI*0.03,1.);\n    pos.xz*=rot2D(iTime*PI*0.1);\n    dir.xz*=rot2D(iTime*PI*0.1);\n    \n    setCamera(ray,pos,dir,uv);\n    \n    vec2 v = rayHit(ray);\n    vec2 res =doLight(ray,v.x,lp);\n    vec3 col =vec3(res.x);\n    \n    textureMap(col,ray.o+ray.d*v.x,int(v.y));\n    sun(col,ray.o+ray.d*v.x,lp,res.y);\n    \n    fog(col,v.x,ray.o,ray.d,normalize(-lp));\n    col=pow(col,vec3(1.5));\n   \n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}