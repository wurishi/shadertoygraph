{"ver":"0.1","info":{"id":"3tjBzd","date":"1599634539","viewed":43,"name":"平行线的反演","username":"hanyeah","description":"平行线的反演","likes":0,"published":1,"flags":0,"usePreview":0,"tags":[],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\tcol = col * 0.0;\n    // Output to screen\n    \n    float r0 = 0.3;\n  \n    vec3 p = vec3(uv.x - 0.5, uv.y - 0.5 + r0, 0.0);\n     // 反演球面\n    vec3 o = vec3(0.0, r0, 0.0);\n    float r1 = 1.41421356 * r0;\n    //\n    vec3 op = p - o;\n    vec3 op1 = op * (2.0 * r0 * r0 / dot(op, op));//op * (r1 * r1 / dot(op, op));\n    vec3 p1 = op1 + o;\n   \n    \n    float r = mod(p1.y * 10.0, 1.0);\n    if(r < 0.0){\n       r = 1.0 - r;\n    }\n    col.r = r;\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}