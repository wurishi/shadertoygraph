{"ver":"0.1","info":{"id":"Xl2cDW","date":"1508639062","viewed":246,"name":"sigmoid X sin X smoothstep","username":"luluco250","description":"Test with contrast \"S curves\", respectively: sigmoid | sin | smoothstep","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d","filter","sin","color","contrast","curve","smoothstep","s","sigmoid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float pi = atan(1.0) * 4.0;\n\nconst float separator_height = 0.2;\n\n// Regular sigmoid curve with the exception of\n// x * 10 - 5, which seems to normalize the curve.\nvec3 sigmoid(vec3 x) {\n    return vec3(1.0) / (vec3(1.0) + exp(-(x * 10.0 - 5.0)));\n}\n\nvec3 sin_curve(vec3 x) {\n    return sin(x * pi - pi * 0.5) * 0.5 + 0.5;\n}\n\n#define saturate(x) clamp(x, 0.0, 1.0)\n\nvoid mainImage(out vec4 color, vec2 coord) {\n    vec2 ps = vec2(1.0) / iResolution.xy;\n    vec2 uv = coord * ps;\n    color = vec4(0.0);\n    \n    float gradient = mod(uv.x * 9.0, 3.0) * 0.333;\n    gradient = saturate(gradient);\n    \n    color = texture(iChannel0, vec2(gradient, uv.y));\n    \n    //color.rgb = vec3(gradient, uv.y, 0.5);\n    \n    vec3 color_original = color.rgb;\n    \n    float separation = iResolution.x / 3.0;\n    \n    if (coord.x < separation)\n        color.rgb = sigmoid(color.rgb);\n    else if (coord.x < separation * 2.0)\n        color.rgb = sin_curve(color.rgb);\n    else\n        color.rgb = smoothstep(0.0, 1.0, color.rgb);\n        \n    float t = sin(iTime * 4.0) * 0.5 + 0.5;\n    \n    if (iMouse.z > 0.0)\n        t = 1.0 - iMouse.y * ps.y;\n        \n    color.rgb = mix(color.rgb, color_original, t);\n    \n    if (coord.x > separation - 1.0 && coord.x < separation + 1.0)\n        color.rgb = vec3(1.0, 0.0, 0.0);\n    if (coord.x > separation * 2.0 - 1.0 && coord.x < separation * 2.0 + 1.0)\n        color.rgb = vec3(1.0, 0.0, 0.0);\n}\n","name":"Image","description":"","type":"image"}]}