{"ver":"0.1","info":{"id":"tssBD7","date":"1588430519","viewed":129,"name":"Dancing Sine Wave by Darko","username":"omegasbk","description":"This is my simple sine wave implementation. ","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["sinewave"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGRr","filepath":"/media/a/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","previewfilepath":"/media/ap/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Feel free to use this code in your projects\n// Reference me if you really want to :) \n\n#define M_PI 3.1415926535897932384626433832795\n#define AMPLITUDE 0.2\n#define PHASE 2. * M_PI\n#define THICKNESS 0.03\n#define FREQUENCY 1.\n#define WAVE_LENGTH 0.1\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.y -= 0.5;  \n    \n    float phase = PHASE + uv.x / WAVE_LENGTH;\n\n    int tx = int(uv.x*512.0);\n\tfloat fft  = texelFetch(iChannel0, ivec2(tx,0), 0).x; \n    float wave = texelFetch(iChannel0, ivec2(tx,1), 0).x;\n    \n\tfloat amplitude = AMPLITUDE + wave/50.;\n    float frequency = FREQUENCY + wave/200.;\n    \n    vec3 col = vec3(0., 0., 0.);\n    \n    float waveValue = amplitude * sin(2. * M_PI * frequency * iTime + phase);\n        \n    if (uv.y < waveValue + THICKNESS\n       && uv.y > waveValue - THICKNESS)\n    {\n        col = vec3(1. - (abs(waveValue - uv.y) / THICKNESS));\n        col.g += sin(iTime)*wave;\n        col.r += cos(iTime)*wave;\n        col.b += tan(iTime)*wave;\n    }\n        \n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}