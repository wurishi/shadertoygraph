{"ver":"0.1","info":{"id":"Dl23zy","date":"1673549218","viewed":104,"name":"Ball in water","username":"ianertson","description":"Press and drag with the mouse to move around,","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["interactive","water","ball"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdXGzr","filepath":"/media/a/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg","previewfilepath":"/media/ap/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define DEBUG 0 \n\nbool mouseIsDown() { return ((iMouse.z+iMouse.w)/2.0) > 0.001; }\n\nvec2 distortUv(vec2 uv, vec2 dist) {\n    vec2 distorted = (uv*0.5)+(dist*0.5);\n    return mix(uv, distorted, 0.25*length(dist));\n}\n\nvec3 getBallAffection(vec2 uv) {\n    vec3 ball = texture(iChannel2, uv).rgb;\n    return ball;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 offset = vec2(0.0);\n    \n    if (mouseIsDown()) {\n        offset += (iMouse.xy / iResolution.xy);\n    } else {\n        offset = getMove(iTime, iMouse, iResolution.xy)*0.25;\n    }\n    \n   // uv += offset;\n  \n    \n    vec3 waterLayer = texture(iChannel0, uv).rgb;\n    vec3 waveLayer = texture(iChannel3, distortUv(uv, waterLayer.xy)).rgb;\n    vec3 backgroundLayer = texture(iChannel1, offset+distortUv(uv, waveLayer.xy+waterLayer.xy)).rgb;\n    \n\n    vec3 col = backgroundLayer;\n    \n    col = mix(col, col+length(waterLayer.rg), 0.5*waterLayer.x);\n    \n    Ray ray;\n    ray.result.normal = vec3(0.0);\n    ray.result.uv = vec2(0.0);\n    ray.result.point = vec3(0.0);\n    ray.result.dist = 0.0;\n    bool hasBall = getBall(iMouse, (waterLayer+waveLayer), fragCoord.xy, iResolution.xy, iTime, ray);\n    float ballMag = (hasBall == false) ? 0.0 : (1.0 / max(0.0001, ray.result.dist));\n   // vec3 ball = ray.result.point;\n   // vec3 ballNor = ray.result.normal;\n    \n    if (hasBall) {\n        Light light = Light(vec3(1.6, 1.0, 1.0), 8.6, vec3(0.7, 0.6, 0.1));\n        \n        vec2 ballUv = ray.result.uv+(ray.result.normal.xy/(1.0+max(0.0001, ray.result.normal.z)));\n        //ballUv = mix(ballUv, distortUv(ballUv, (1.1-(ballMag*0.01))*distortUv(waterLayer.xy*1.6, waveLayer.xy*2.0)),\n          //  max(0.0, 1.0-(ballMag*0.5)));\n          \n      //  ballUv = mix(ray.result.uv+(ray.result.normal.xy), ballUv, 0.0);\n        vec3 albedo =texture(iChannel2, ballUv).rgb;\n        \n        vec3 L = normalize(ray.result.point - light.pos)*-1.0;\n        float NdotL = dot(ray.result.normal, L);\n        float dist = abs(distance(ray.result.point, light.pos));\n        float att = pow(light.strength,2.0) / pow(max(dist, 0.0001), 2.0);\n        \n        vec3 diffuse = (albedo / M_PI) * att * NdotL * light.color;\n        \n        col = diffuse;\n    } else {\n      col /= M_PI;\n    }\n    \n    col += (col*luma(col)) * 1.6;\n    \n //   col = fromLinear(col);\n    col = aces(col);\n    col = gammaCorrect(col, 1.5);\n //   col = toLinear(col);\n   // col *= col;\n  //  col *= M_PI;\n   \n  // col = (col / (col+vec3(1.0)));\n//   col += ((col * luma(col)) * 0.5);\n //  col = aces(col);\n   //col = fromLinear(col);\n \n// col = unreal(col);\n  // col = gammaCorrect(col, 2.2);\n  // col = toLinear(col);\n   // col = unreal(col);\n   // col = toLinear(col);\n   // col = getBallAffection(uv);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"const float M_PI = 3.14159265359;\n\nint HASH[256] = int[256](\n    208, 34,  231, 213, 32,  248, 233, 56,  161, 78,  24,  140, 71,  48,  140,\n    254, 245, 255, 247, 247, 40,  185, 248, 251, 245, 28,  124, 204, 204, 76,\n    36,  1,   107, 28,  234, 163, 202, 224, 245, 128, 167, 204, 9,   92,  217,\n    54,  239, 174, 173, 102, 193, 189, 190, 121, 100, 108, 167, 44,  43,  77,\n    180, 204, 8,   81,  70,  223, 11,  38,  24,  254, 210, 210, 177, 32,  81,\n    195, 243, 125, 8,   169, 112, 32,  97,  53,  195, 13,  203, 9,   47,  104,\n    125, 117, 114, 124, 165, 203, 181, 235, 193, 206, 70,  180, 174, 0,   167,\n    181, 41,  164, 30,  116, 127, 198, 245, 146, 87,  224, 149, 206, 57,  4,\n    192, 210, 65,  210, 129, 240, 178, 105, 228, 108, 245, 148, 140, 40,  35,\n    195, 38,  58,  65,  207, 215, 253, 65,  85,  208, 76,  62,  3,   237, 55,\n    89,  232, 50,  217, 64,  244, 157, 199, 121, 252, 90,  17,  212, 203, 149,\n    152, 140, 187, 234, 177, 73,  174, 193, 100, 192, 143, 97,  53,  145, 135,\n    19,  103, 13,  90,  135, 151, 199, 91,  239, 247, 33,  39,  145, 101, 120,\n    99,  3,   186, 86,  99,  41,  237, 203, 111, 79,  220, 135, 158, 42,  30,\n    154, 120, 67,  87,  167, 135, 176, 183, 191, 253, 115, 184, 21,  233, 58,\n    129, 233, 142, 39,  128, 211, 118, 137, 139, 255, 114, 20,  218, 113, 154,\n    27,  127, 246, 250, 1,   8,   198, 250, 209, 92,  222, 173, 21,  88,  102,\n    219);\n\nint noise2(int x, int y, int seed) {\n  int yindex = (y + seed) % 256;\n  if (yindex < 0) yindex += 256;\n  int xindex = (HASH[yindex] + x) % 256;\n  if (xindex < 0) xindex += 256;\n  return HASH[xindex];\n}\n\nfloat lin_inter(float x, float y, float s) {\n  return x + s * (y - x);\n}\n\nfloat smooth_inter(float x, float y, float s) {\n  return lin_inter(x, y, s * s * (3. - 2. * s));\n}\n\nfloat noise2d(float x, float y, int seed) {\n  int x_int = int(floor(x));\n  int y_int = int(floor(y));\n  float x_frac = float(x - float(x_int));\n  float y_frac = y - float(y_int);\n  int s = noise2(x_int, y_int, seed);\n  int t = noise2(x_int + 1, y_int, seed);\n  int u = noise2(x_int, y_int + 1, seed);\n  int v = noise2(x_int + 1, y_int + 1, seed);\n  float low = smooth_inter(float(s), float(t), float(x_frac));\n  float high = smooth_inter(float(u), float(v), float(x_frac));\n  return smooth_inter(float(low), float(high), float(y_frac));\n}\n\nfloat perlin_get2d(vec2 p, float freq, int depth, int seed) {\n  depth = min(depth, 8); // too slow otherwise\n  float xa = p.x * freq;\n  float ya = p.y * freq;\n  float amp = 1.0;\n  float fin = 0.;\n  float div = 0.0;\n  for (int i = 0; i < depth; i++) {\n    div += 256. * amp;\n    fin += noise2d(xa, ya, seed) * amp;\n    amp /= 2.;\n    xa *= 2.;\n    ya *= 2.;\n  }\n  return clamp(fin / div, -1.0, 1.0);\n}\n\nfloat perlin_get2d(vec2 p, float freq, float depth, float seed) {\n  return perlin_get2d(p, freq, int(depth), int(seed));\n}\n\nvec3 perlin_vec3(vec2 p, float freq, int depth, int seed) {\n  float x = perlin_get2d(p, freq, depth, seed);\n  float y = perlin_get2d(p, freq, depth, int(seed+int(freq)));\n  float z = perlin_get2d(p, freq, depth, int(seed+int(ceil(freq))+int(ceil(freq))));\n  \n  return vec3(x, y, z);\n}\n\nfloat luma(vec3 color) {\n  return dot(color, vec3(0.299, 0.587, 0.114));\n}\n\nvec3 unreal(vec3 x) {\n  return x / (x + 0.155) * 1.019;\n}\n\nvec3 aces(vec3 x) {\n  const float a = 2.51;\n  const float b = 0.03;\n  const float c = 2.43;\n  const float d = 0.59;\n  const float e = 0.14;\n  return clamp((x * (a * x + b)) / (x * (c * x + d) + e), 0.0, 1.0);\n}\n\nvec3 gammaCorrect(vec3 color, float gamma) {\n  return pow(color, vec3(1.0 / gamma));\n}\n\nvec3 toLinear(vec3 sRGB)\n{\n    bvec3 cutoff = lessThan(sRGB, vec3(0.04045));\n    vec3 higher = pow((sRGB + vec3(0.055))/vec3(1.055), vec3(2.4));\n    vec3 lower = sRGB/vec3(12.92);\n\n    return mix(higher, lower, cutoff);\n}\n\nvec3 fromLinear(vec3 linearRGB)\n{\n    bvec3 cutoff = lessThan(linearRGB, vec3(0.0031308));\n    vec3 higher = vec3(1.055)*pow(linearRGB, vec3(1.0/2.4)) - vec3(0.055);\n    vec3 lower = linearRGB * vec3(12.92);\n\n    return mix(higher, lower, cutoff);\n}\n\n\nstruct RayResult {\n    vec3 point;\n    vec3 normal;\n    float dist;\n    vec2 uv;\n};\n\nstruct Ray {\n    vec3 dir;\n    vec3 orig;\n    RayResult result;\n};\n\nstruct Light {\n    vec3 pos;\n    float strength;\n    vec3 color;\n};\n\n\nmat4 proj(float fovy,\n                      float aspect,\n                      float nearZ,\n                      float farZ) {\n                      \n   \n  mat4 dest = mat4(0.0);\n  float f  = 1.0f / tan(fovy * 0.5f);\n  float fn = 1.0f / (nearZ - farZ);\n\n  dest[0][0] = f / aspect;\n  dest[1][1] = f;\n  dest[2][2] =-farZ * fn;\n  dest[2][3] = 1.0f;\n  dest[3][2] = nearZ * farZ * fn;\n  return dest;\n    \n}\n\nmat4 look(vec3 eye, vec3 center, vec3 up) {\nmat4 dest = mat4(0.0);\n  vec3 f = vec3(0.0); vec3 u = vec3(0.0); vec3 s = vec3(0.0);\n\n  f = normalize(center - eye);\n\ns = cross(up, f);\n  u = cross(f, s);\n\n  dest[0][0] = s[0];\n  dest[0][1] = u[0];\n  dest[0][2] = f[0];\n  dest[1][0] = s[1];\n  dest[1][1] = u[1];\n  dest[1][2] = f[1];\n  dest[2][0] = s[2];\n  dest[2][1] = u[2];\n  dest[2][2] = f[2];\n  dest[3][0] =-dot(s, eye);\n  dest[3][1] =-dot(u, eye);\n  dest[3][2] =-dot(f, eye);\n  dest[0][3] = dest[1][3] = dest[2][3] = 0.0f;\n  dest[3][3] = 1.0f;\n  \n  return dest;\n}\n\n\nvoid getPrimaryRay(\n    vec2 coord,\n    vec2 res,\n    vec3 lookDir,\n    float fov,\n    float near,\n    float far,\n    inout Ray ray\n) {\n    float x = coord.x;\n    float y = coord.y;\n    float w = res.x;\n    float h = res.y;\n    \n    float aspect = w / h;\n\n    vec3 origin = vec3(0.0, 0.0, 1.0);\n   \n    mat4 projection = proj(radians(fov), aspect, near, far);\n    mat4 view = look(lookDir, vec3(0.0), vec3(0, 1, 0));\n    mat4 iprojection = inverse(projection * view);\n    \n    float ray_x = ((x - w / 2.0)) / w;\n    float ray_y = ((y - h / 2.0)) / h;\n    \n    vec2 pos = vec2(ray_x, ray_y);\n    \n    ray.orig = origin;\n    vec4 dir = vec4(pos/0.5, 1.0, 1.0);\n    dir = iprojection * dir;\n    \n    ray.dir = dir.xyz;\n\n\n}\n\nvec2 sphereUV(vec3 point, vec3 position, float radius) {\n    \n    vec3 p = point - position;\n    float theta = atan(p.x-radius/2.0, p.z-radius/2.0);\n    float phi = acos(p.y / radius);\n    float raw_u = theta / (2.0 * M_PI);\n    \n    float u = 1.0 - (raw_u + 0.5);\n    float v =  1.0 - (phi / M_PI);\n    \n    return vec2(u, v);\n}\n\nbool intersectRaySphere(\n    inout Ray ray,\n    vec3 sphereCenter,\n    float sphereRadius\n) {\n    vec3 rayOrigin = ray.orig;\n    vec3 rayDirection = ray.dir;\n    vec3 rayOriginToSphereCenter = rayOrigin - sphereCenter;\n\n    float a = dot(rayDirection, rayDirection);\n    float b = 2.0 * dot(rayDirection, rayOriginToSphereCenter);\n    float c = dot(rayOriginToSphereCenter, rayOriginToSphereCenter) - sphereRadius * sphereRadius;\n\n    ray.result.dist = 0.0000001;\n    float discriminant = b * b - 4.0 * a * c;\n\n    if (discriminant < 0.0) {\n        ray.result.point = vec3(0.0);\n        ray.result.normal = vec3(0.0);\n        ray.result.uv = sphereUV(ray.result.point, sphereCenter, sphereRadius);\n        ray.result.dist = 0.0;\n        return false;\n    }\n\n    if (discriminant == 0.0) {\n        float t = -0.5 * b / a;\n        ray.result.point = rayOrigin + t * rayDirection;\n        ray.result.normal = normalize(ray.result.point - sphereCenter);\n        ray.result.uv = sphereUV(ray.result.point, sphereCenter, sphereRadius);\n        ray.result.dist = abs(t);\n\n        return true;\n    }\n\n    if (discriminant > 0.0) {\n        float t1 = (-0.5 * b - sqrt(discriminant)) / a;\n        float t2 = (-0.5 * b + sqrt(discriminant)) / a;\n        float t = min(t1, t2);\n        ray.result.point = rayOrigin + t * rayDirection;\n        ray.result.normal = normalize(ray.result.point - sphereCenter);\n        ray.result.uv = sphereUV(ray.result.point, sphereCenter, sphereRadius);\n        ray.result.dist = abs(t);\n        return true;\n    }\n    \n    return false;\n}\n\nvec2 getMove(float T, vec4 mouse, vec2 res) {\n    \n    if (mouse.z > 0.001) return mouse.xy/res.xy;\n    vec2 move = vec2(cos(T*0.5), sin(T*0.5)) / 1.6;\n    return move*0.25;\n}\n\nbool getBall(in vec4 mouse, in vec3 posOffset, in vec2 fragCoord, in vec2 res, in float T, inout Ray ray) {\n    vec3 look = vec3(0.0, 0.0, -1.0);\n    float fov = 60.0;\n    float near = 0.1;\n    float far = 400.0;\n\n    ray.result.uv = vec2(0.0);\n    ray.result.normal = vec3(0.0);\n    ray.result.point = vec3(0.0);\n    ray.result.dist = 0.0;\n\n    getPrimaryRay(\n        fragCoord.xy,\n        res,\n        look,\n        fov,\n        near,\n        far,\n        ray\n    );\n    \n    vec3 sphereCenter = vec3(0.0, 0.0, 7.0);\n    vec3 offset = vec3(cos(T), sin(T*0.1)*0.5, cos(T+12.256)*(0.5+(0.5*sin(T*0.001))));\n    \n    vec2 move = getMove(T, mouse, res);\n    \n    offset += ((vec3(move.xy, cos(move.x))) * length(move));\n    \n    \n    \n    offset += posOffset;\n    \n    sphereCenter += offset;\n    float sphereRadius = 2.2;\n    \n    bool hit = intersectRaySphere(\n        ray,\n        sphereCenter,\n        sphereRadius\n    );\n    \n    return hit;\n    \n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec3 getOld(vec2 uv) {\n    return texture(iChannel0, uv).rgb;\n}\n\n\nbool mouseIsDown() { return ((iMouse.z+iMouse.w)/2.0) > 0.001; }\n\nvec3 getBallAffection(vec2 uv) {\n    vec3 ball = texture(iChannel2, uv).rgb;\n    return ball;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 ogUv = uv;\n    \n     vec3 old = getOld(uv*0.01);\n\n    vec2 perlinOffset = getMove(iTime, iMouse, iResolution.xy);\n\n      \n    \n    Ray ray;\n    ray.result.normal = vec3(0.0);\n    ray.result.uv = vec2(0.0);\n    ray.result.point = vec3(0.0);\n    ray.result.dist = 0.0;\n    bool hasBall = getBall(iMouse, old, fragCoord.xy, iResolution.xy, iTime, ray);\n    float ballMag = (hasBall == false) ? 0.0 : (1.0 / max(0.0001, ray.result.dist));\n    vec3 ball = ray.result.point;\n    vec3 ballNor = ray.result.normal;\n    \n   // old *= cos(perlin_get2d(uv*old.xy, 4.0, 4, 98872)*(iTime*0.0001));\n    \n    \n    float n0 = perlin_get2d(uv+perlinOffset-cos((old.z*0.005)+ball.xy*0.02), 4.0, 4, 8175);\n    float n1 = perlin_get2d(uv*cos(n0*1.6+(old.x*0.1)), 4.0, 4, 8821);\n    float n2 = perlin_get2d(vec2(n0, n1), 4.0, 4, 3958);\n    \n    old = getOld(uv*vec2(n0, n2));\n    \n    float n = mix(n0, n1, smoothstep(0.0, 1.0, n2));\n    \n    vec3 col = mix(vec3(n), old, 0.6*length(old));\n\n\n    fragColor = vec4(col, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"bool mouseIsDown() { return ((iMouse.z+iMouse.w)/2.0) > 0.001; }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 offset = vec2(0.0);//vec2(cos(iTime*0.16), sin(iTime*0.16));\n    \n    \n    \n   // if (mouseIsDown()) {\n   //     offset = (iMouse.xy/iResolution.xy);\n  //  } else {\n        offset = getMove(iTime, iMouse, iResolution.xy);\n   // }\n    \n    vec3 self = texture(iChannel0, uv).rgb;\n    vec3 waterLayer = texture(iChannel1, uv).rgb;\n    \n    Ray ray;\n    ray.result.normal = vec3(0.0);\n    ray.result.uv = vec2(0.0);\n    ray.result.point = vec3(0.0);\n    ray.result.dist = 0.0;\n    bool hasBall = getBall(iMouse, self+waterLayer, fragCoord.xy, iResolution.xy, iTime, ray);\n    float ballMag = (hasBall == false) ? 0.0 : (1.0 / max(0.0001, ray.result.dist));\n    vec3 ball = ray.result.point;\n    vec3 ballNor = ray.result.normal;\n    \n    uv += offset;// normalize((ray.result.uv+ballNor.xy-ballNor.z)*ballMag);\n    \n    float n = perlin_get2d(uv*cos(perlin_get2d(uv-1.6+(uv*0.251), 2.0, 4, 1251)), 6.0, 4, 87731);\n    vec3 col = vec3(n);\n    fragColor = vec4(col, 1.0);\n}","name":"Buffer B","description":"","type":"buffer"}]}