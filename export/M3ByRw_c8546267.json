{"ver":"0.1","info":{"id":"M3ByRw","date":"1727093170","viewed":30,"name":"mif02-TP","username":"GaspardGentil","description":"TP de mif02 informatique graphique","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["mif02"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Modeling - 2024.09.15\n// Eric Galin\n\nstruct Ray{\n    vec3 o;// Origin\n    vec3 d;// Direction\n};\n\nstruct Val {\n  float v; // Signed distance\n  int c; // Cost\n};\n\n// Compute point on ray\n// ray : The ray\n//   t : Distance\nvec3 Point(Ray ray,float t)\n{\n    return ray.o+t*ray.d;\n}\n\n// Random direction in a hemisphere\n// seed : Integer seed, from 0 to N\n//    n : Direction of the hemisphere\nvec3 Hemisphere(int seed,vec3 n)\n{\n    float a=fract(sin(176.19*float(seed)));// Uniform randoms\n    float b=fract(sin(164.19*float(seed)));\n    \n    float u=2.*3.1415*a;// Random angle\n    float v=acos(2.*b-1.);// Arccosine distribution to compensate at poles\n    \n    vec3 d=vec3(cos(u)*cos(v),sin(u)*cos(v),sin(v));// Direction\n    if(dot(d,n)<0.){d=-d;}// Hemisphere\n    \n    return d;\n}\n\n// Camera -------------------------------------------------------------------------------\n\n// Rotation matrix around z axis\n// a : Angle\nmat3 Rz(float a)\n{\n  float sa=sin(a);float ca=cos(a);\n  return mat3(ca,sa,0.,-sa,ca,0.,0.,0.,1.);\n}\n\n// Compute the ray\n//      m : Mouse position\n//      p : Pixel\nRay CreateRay(vec2 m,vec2 p)\n{\n  float a=3.*3.14*m.x;\n  float le=3.5;\n  \n  // Origin\n  vec3 ro=vec3(37.,0.,15.);\n  ro*=Rz(a);\n  \n  // Target point\n  vec3 ta=vec3(0.,0.,1.);\n  \n  // Orthonormal frame\n  vec3 w=normalize(ta-ro);\n  vec3 u=normalize(cross(w,vec3(0.,0.,1.)));\n  vec3 v=normalize(cross(u,w));\n  vec3 rd=normalize(p.x*u+p.y*v+le*w);\n  return Ray(ro,rd);\n}\n\n// Primitives -------------------------------------------------------------------------------\n\n// Sphere\n// p : point\n// c : center of skeleton\n// r : radius\nVal Sphere(vec3 p,vec3 c,float r)\n{\n  return Val(length(p-c)-r,1);\n}\n\n//Ellipsoid\n// p : point\n// c : center of skeleton\n// r : radius\nVal Ellipsoid(vec3 p,vec3 c,vec3 r)\n{\n    vec3 scaledPoint=(p-c)/r;\n    return Val(length(scaledPoint) - 1.0,1);\n}\n\n// Box\n// p : point\n// c : center of the box\n// h : half-dimensions of the box\nVal Box(vec3 p, vec3 c, vec3 h)\n{\n    vec3 d = abs(p - c) - h;\n    float outsideDist = length(max(d, vec3(0.0)));\n    float insideDist = min(max(d.x, max(d.y, d.z)), 0.0);\n    return Val(outsideDist + insideDist, 1);\n}\n\n// Cylinder\n// p : point\n// c : center of the cylinder (on the central axis of the cylinder)\n// r : radius of the cylinder\n// h : half-height of the cylinder (from center to top/bottom)\nVal Cylinder(vec3 p, vec3 c, float r, float h)\n{\n    vec2 d = abs(vec2(length(p.xy - c.xy), p.z - c.z)) - vec2(r, h);\n    \n    float outsideDist = length(max(d, vec2(0.0)));\n    float insideDist = min(max(d.x, d.y), 0.0);\n    \n    return Val(outsideDist + insideDist, 1);\n}\n\n// Capsule\n// p : point\n// a : one end of the capsule\n// b : other end of the capsule\n// r : radius of the capsule\nVal Capsule(vec3 p, vec3 a, vec3 b, float r)\n{\n    vec3 ab = b - a;\n    float t = clamp(dot(p - a, ab) / dot(ab, ab), 0.0, 1.0);\n    vec3 closestPoint = a + t * ab;\n    return Val(length(p - closestPoint) - r, 1);\n}\n\n// Tore\n// p : point\n// c : center of the skeleton\n// r_major, r_minor : radius \nVal Torus(vec3 p, vec3 c, float r_major, float r_minor)\n{\n    vec2 q = vec2(length(p.xy - c.xy) - r_major, p.z - c.z);\n    return Val(length(q) - r_minor, 1);\n}\n\n// Plane \n// p : point\n// n : Normal of plane\n// o : Point on plane\nVal Plane(vec3 p, vec3 n, vec3 o)\n{\n    return Val(dot((p-o),n),1);\n}\n\n// Operators\n\n// Union\n// a,b : field function of left and right sub-trees\nVal Union(Val a,Val b)\n{\n  return Val(min(a.v,b.v),a.c+b.c+1);\n}\n\n// Rotation d'un point autour d'un axe arbitraire\n// p : point à transformer\n// axis : axe de rotation (doit être unitaire)\n// angle : angle de rotation (en radians)\nvec3 Rotate(vec3 p, vec3 axis, float angle)\n{\n    float cosTheta = cos(angle);\n    float sinTheta = sin(angle);\n    return p * cosTheta + cross(axis, p) * sinTheta + axis * dot(axis, p) * (1.0 - cosTheta);\n}\n\n// Translation d'un point\n// p : point à déplacer\n// t : vecteur de translation\nvec3 Translate(vec3 p, vec3 t)\n{\n    return p + t;\n}\n\n// Homothétie d'un point\n// p : point à transformer\n// s : facteur d'échelle\nvec3 Scale(vec3 p, float s)\n{\n    return p * s;\n}\n\n// Potential field of the object\n// p : point\nVal object(vec3 p)\n{\n  Val v=Union(\n    Sphere(p,vec3(3.,0.,-1.),3.),\n    Plane(p,vec3(0.,0.,1.),vec3(0.0,0.0,-4.0)));\n  \n  vec3 elliCenter = vec3(7.,3.,5.);\n  vec3 ellip = Rotate(p - elliCenter, vec3(0.,1.,0.), radians(45.0)) + elliCenter;\n  v=Union(v,Ellipsoid(ellip,elliCenter,vec3(3.5,2.5,2)));\n  float boxf = 1.5;\n  vec3 boxp = Scale(vec3(2.,1.5,2.), boxf);\n  v=Union(v,Box(p,vec3(14.,4.,4.),boxp));\n  v=Union(v,Cylinder(p,vec3(-5.,4.,4.),2.,4.));\n  vec3 translate = vec3(0.,0.,2.);\n  vec3 capt = Translate(p, translate);\n  v=Union(v,Capsule(capt,vec3(1.,0.,10.),vec3(1.,0.,5.),1.));\n  vec3 torusCenter = vec3(-10.,0.,4.);\n  vec3 torusp = Rotate(p - torusCenter, vec3(1.,0.,0.), radians(45.0)) + torusCenter;\n  v=Union(v,Torus(torusp,torusCenter,2.,1.));\n  \n  return v;\n}\n// Analysis of the scalar field -----------------------------------------------------------------\n\nconst int Steps=200;// Number of steps\nconst float Epsilon=.01;// Marching epsilon\n\n// Object normal\n// p : point\nvec3 ObjectNormal(vec3 p)\n{\n  const float eps=.001;\n  vec3 n;\n  Val val=object(p);\n  float v=val.v;\n  n.x=object(vec3(p.x+eps,p.y,p.z)).v-v;\n  n.y=object(vec3(p.x,p.y+eps,p.z)).v-v;\n  n.z=object(vec3(p.x,p.y,p.z+eps)).v-v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\n// ray : The ray\n//   e : Maximum distance\n//   h : hit\n//   s : Number of steps\n//   c : cost\nbool SphereTrace(Ray ray,float e,out float t,out int s,out int c)\n{\n  bool h=false;\n  \n  // Start at the origin\n  t=0.0;\n  c=0;\n  \n  for(int i=0;i<Steps;i++)\n  {\n    s=i;\n    vec3 p=Point(ray,t);\n    Val val=object(p);\n    float v=val.v;\n    c+=val.c;\n    // Hit object\n    if(v<0.)\n    {\n      h=true;\n      break;\n    }\n    // Move along ray\n    t+=max(Epsilon,v);\n    // Escape marched too far away\n    if(t>e)\n    {\n      break;\n    }\n  }\n  return h;\n}\n\n// Lighting -------------------------------------------------------------------------------\n\n// Background color\n// ray : Ray \nvec3 background(Ray ray)\n{\n  return mix(vec3(.45,.55,.99),vec3(.65,.69,.99),ray.d.z*.5+.5);\n}\n\n// Shadowing\n// p : Point\n// n : Normal\n// l : Light direction\nfloat Shadow(vec3 p,vec3 n,vec3 l)\n{\n  float t;\n  int s;\n  int c;\n  bool hit=SphereTrace(Ray(p+Epsilon*n,l),100.,t,s,c);\n  if(!hit)\n  {\n    return 1.;\n  }\n  return 0.;\n}\n\n// Shading and lighting\n//   p : Point\n//   n : Normal at point\n// eye : Eye direction\nvec3 Shade(vec3 p,vec3 n,Ray eye)\n{\n  // Point light\n  const vec3 lp=vec3(5.,10.,25.);\n  \n  // Light direction to point light\n  vec3 l=normalize(lp-p);\n  \n  // Ambient color\n  vec3 ambient=.25+.25*background(Ray(p,n));\n  \n  // Shadow computation\n  float shadow=Shadow(p,n,l);\n  \n  // Phong diffuse\n  vec3 diffuse=.35*clamp(dot(n,l),0.,1.)*vec3(1.,1.,1.);\n  \n  // Specular\n  vec3 r=reflect(eye.d,n);\n  vec3 specular=.15*pow(clamp(dot(r,l),0.,1.),35.)*vec3(1.,1.,1.);\n  vec3 c=ambient+shadow*(diffuse+specular);\n  return c;\n}\n\n// Shading according to the number of steps in sphere tracing\n// n : Number of steps\nvec3 ShadeSteps(int n,int m)\n{\n  float t=float(n)/(float(m));\n  return.5+mix(vec3(.05,.05,.5),vec3(.65,.39,.65),t);\n}\n\n// Image\nvoid mainImage(out vec4 color,in vec2 pxy)\n{  \n  // Convert pixel coordinates\n    vec2 pixel=(-iResolution.xy+2.*pxy)/iResolution.y;\n\n  // Mouse\n  vec2 m=iMouse.xy/iResolution.xy;\n  \n  // Camera\n  Ray ray=CreateRay(m,pixel);\n  \n  // Trace ray\n  \n  // Hit and number of steps\n  float t=0.0;\n  int s=0;\n  int c;\n  bool hit=SphereTrace(ray,100.,t,s,c);\n  \n  // Shade background\n  vec3 rgb=background(ray);\n  \n  if(hit)\n  {\n    // Position\n    vec3 p=Point(ray,t);\n    \n    // Compute normal\n    vec3 n=ObjectNormal(p);\n    \n    // Shade object with light\n    rgb=Shade(p,n,ray);\n  }\n  \n  // Uncomment this line to shade image with false colors representing the number of steps\n    //rgb=ShadeSteps(s,Steps);\n  \n   // Uncomment this line to shade cost\n  //rgb=ShadeSteps(c,500);\n  color=vec4(rgb,1.);\n}\n\n","name":"Image","description":"","type":"image"}]}