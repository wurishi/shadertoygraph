{"ver":"0.1","info":{"id":"mslyW8","date":"1729778645","viewed":127,"name":"First Shader FRS","username":"RudiSchabloni","description":"sun","likes":0,"published":3,"flags":4,"usePreview":0,"tags":["sun"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdXGRr","filepath":"/presets/mic.png","previewfilepath":"/presets/mic.png","type":"mic","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/new\n// https://soundcloud.com/midland/caribou-sun-midland-re-edit\n\nvec3 palette( float t ) {\n    vec3 a = vec3(0.788, 0.508, 0.500);\n    vec3 b = vec3(0.388, 0.500, 0.500);\n    vec3 c = vec3(6.277, 3.437, 6.277);\n    vec3 d = vec3(-0.682, 0.333, 0.667);\n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) /iResolution.y ;\n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.0);\n    int numIterations = 10; // recommended: 2-12, 8\n    \n    for(int i = 0; i < numIterations; i++) {\n        float numTiles = 1.5;  // 1.8\n        \n        // frequency data\n        float fft  = textureLod( iChannel0, vec2(uv.x,0.25), 0.0 ).x; \n        \n        // sound wave\n        float wave = textureLod( iChannel0, vec2(uv.x,0.75), 0.0 ).x;\n        \n        float addMotionFromSound = fft  * .1;\n        // if(i > 9) addMotionFromSound = 0.;\n        \n        float zoomTime_inverse = 30.;\n        uv = fract(uv * numTiles *(sin(iTime/zoomTime_inverse))) - 0.5; // zoom in and out\n        // uv = fract(uv * numTiles ) - 0.5;\n\n\n        float distanceFromCenter = length(uv) * exp(-length(uv0)) ;\n        float bigRingWidth = 0.07;\n        float bigRingSpeed_inverse = 12.;\n        vec3 color = palette(length(uv0 * bigRingWidth) + (iTime/bigRingSpeed_inverse));\n\n        float stretch = 10.0;\n        float fractalSpeed_inverse = 30.;\n        distanceFromCenter = sin(distanceFromCenter * stretch - iTime/fractalSpeed_inverse +addMotionFromSound) / stretch;\n\n        distanceFromCenter = abs(distanceFromCenter);\n\n\n        float amplitude = 0.03;\n        float speed = 0.5;\n        // float ringWidth = amplitude * sin(iTime* speed) + amplitude + 0.01;\n\n        float ringWidth = 0.004;\n        float neonGlow_inverse = 1.2;\n        distanceFromCenter = pow(ringWidth / distanceFromCenter, neonGlow_inverse);\n\n\n        // color *= distanceFromCenter;\n        finalColor += color * distanceFromCenter;\n\n        };\n    \n    // Output to screen\n    fragColor = vec4(finalColor, 1.0);\n}\n\n\n","name":"Image","description":"","type":"image"}]}