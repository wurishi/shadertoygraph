{"ver":"0.1","info":{"id":"ms2GWw","date":"1667830993","viewed":201,"name":"Glitch from natron plugins","username":"axiomgraph","description":"Glitch ","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["glitch","natron"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nbool horizontal_slice = true;\n\nfloat time_frq = 25.0; // Speed : , min=0.0, max=25.0\nfloat line_offset_threshold = 0.3; // Bias : ,min=0.0, max=1.0\nfloat yuv_threshold = 1.0; // YUV offset : ,min=-2.0, max=2.0\nfloat max_ofs_siz = 0.5; // Horizontal offset : ,min=0.0, max=10.0\n\n\nconst float min_change_frq = 4.0;\n\n\nfloat sat( float t ) {\n\treturn clamp( t, 0.0, 1.0 );\n}\nvec2 sat( vec2 t ) {\n\treturn clamp( t, 0.0, 1.0 );\n}\n\nfloat remap( float t, float a, float b ) {\n\treturn sat( (t - a) / (b - a) );\n}\n\nfloat linterp( float t ) {\n\treturn sat( 1.0 - abs( 2.0*t - 1.0 ) );\n}\n\nfloat rand2(vec2 co) \n{\n\treturn fract(sin(dot(co.xy,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat srand( vec2 n ) {\n\treturn rand2(n) * 2.0 - 1.0;\n}\n\nfloat truncn( float x, float num_levels )\n{\n\treturn floor(x*num_levels) / num_levels;\n}\nvec2 truncn( vec2 x, vec2 num_levels )\n{\n\treturn floor(x*num_levels) / num_levels;\n}\n\nvec3 rgb2yuv( vec3 rgb )\n{\n\tvec3 yuv;\n\tyuv.x = dot( rgb, vec3(0.299,0.587,0.114) );\n\tyuv.y = dot( rgb, vec3(-0.14713, -0.28886, 0.436) );\n\tyuv.z = dot( rgb, vec3(0.615, -0.51499, -0.10001) );\n\treturn yuv;\n }\n vec3 yuv2rgb( vec3 yuv )\n {\n\tvec3 rgb;\n\trgb.r = yuv.x + yuv.z * 1.13983;\n\trgb.g = yuv.x + dot( vec2(-0.39465, -0.58060), yuv.yz );\n\trgb.b = yuv.x + yuv.y * 2.03211;\n\treturn rgb;\n }\n  \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n\n{\nvec2 resolution = vec2(iResolution.x, iResolution.y);\nfloat time = iTime *.05;\nfloat THRESHOLD = line_offset_threshold * 1000. / resolution.x;\nfloat time_s = mod( time, 32.0 );\nfloat glitch_threshold = 1.0 - THRESHOLD;\n\tvec2 uv = fragCoord.xy / resolution.xy;\n\tvec3 col = texture(iChannel0,uv).rgb;\n\t\n\t\n\tif ( horizontal_slice )\n\t{\n\t\tfloat ct = truncn( time_s, min_change_frq );\n\t\tfloat change_rnd = rand2( truncn(uv.yy,vec2(16)) + 150.0 * ct );\n\t\tfloat tf = time_frq*change_rnd;\n\t\tfloat t = 5.0 * truncn( time_s, tf );\n\t\tfloat vt_rnd = 0.5*rand2( truncn(uv.yy + t, vec2(11)) );\n\t\tvt_rnd += 0.5 * rand2(truncn(uv.yy + t, vec2(7)));\n\t\tvt_rnd = vt_rnd*2.0 - 1.0;\n\t\tvt_rnd = sign(vt_rnd) * sat( ( abs(vt_rnd) - glitch_threshold) / (1.0-glitch_threshold) );\n\t\tvec2 uv_nm = uv;\n\t\tuv_nm = sat( uv_nm + vec2(max_ofs_siz*vt_rnd, 0) );\n\t\tfloat rnd = rand2( vec2( truncn( time_s, 8.0 )) );\n\t\tuv_nm.y = (rnd>mix(1.0, 0.975, sat(THRESHOLD))) ? 1.0-uv_nm.y : uv_nm.y;\n\t\tvec4 sample1 = texture(iChannel0,uv_nm); \n\t\tvec3 sample1_yuv = rgb2yuv( sample1.rgb );\n\t\tsample1_yuv.y /= 1.0-3.0*abs(vt_rnd) * sat( yuv_threshold - vt_rnd );\n\t\tsample1_yuv.z += 0.125 * vt_rnd * sat( vt_rnd - yuv_threshold );\n\t\tcol = vec3( yuv2rgb(sample1_yuv));\t\t\n\t}\n\n\tfragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}