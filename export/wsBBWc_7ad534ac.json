{"ver":"0.1","info":{"id":"wsBBWc","date":"1590966177","viewed":259,"name":"1D CCA","username":"stb","description":"A 1d continuous cellular automaton.\nR to restart with new seeds. Mouse to move the \"light.\"","likes":18,"published":1,"flags":48,"usePreview":0,"tags":["1d","automata","cellular","ca","automaton","continuous","cca"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n\t1D CCA\n\t2020 stb\n\t\n\tA one dimensional continuous cellular automaton, with fancie grafix. A visual representation of the\n\tprinciple of cause and effect. Inspired by real life events.\n\n\tOnce the simulation reaches the right side of the screen, it should start scrolling.\n*/\n\n#define res iResolution.xy\n\nfloat map(vec2 p) {\n    return 2. * texture(iChannel0, p).r;\n}\n\nvec3 getNorm(vec2 p) {\n    vec3 acc = vec3(-1., 0., 1.);\n    return\n        normalize(\n            vec3(\n                map(p+acc.zy/res) - map(p+acc.xy/res),\n            \tmap(p+acc.yz/res) - map(p+acc.yx/res),\n            \t-acc.z\n\t\t\t)\n\t\t);\n}\n\nvoid mainImage( out vec4 fo, in vec2 fc ) {\n\t// coords\n    vec2 uv = fc.xy / res;\n    vec3 p = vec3(uv, 0.);\n    \n    // aspect\n    vec3 asp = vec3(1., res.y/res.x, 1.);\n    \n    // shading calculations\n    vec3 norm = getNorm(uv);\n    vec3 light;\n    if(iMouse.x>0.)\n        light = vec3(iMouse.xy/res, -.25);\n    else\n        light = vec3(.5, 1.33, -.25);\n    \n    float diff = clamp(dot(normalize(asp*(p-light)), norm), 0., 1.);\n    \n    vec3 ref = reflect(vec3(p.xy-.5, 1.), norm);\n    float spec = pow(clamp(dot(normalize(ref), normalize(asp*(light-p))), 0., 1.), 1.5);\n    \n    float f = map(uv);\n    \n    float mask = clamp(smoothstep(0., .3, f), 0.5, 1.);\n    \n    vec3 rgb;\n    \n    // apply shading calcs\n    rgb = f * vec3(.05, .07, .1); // ambient\n    rgb += .35 * pow(diff, 2.) * mask; // diffuse\n    rgb += vec3(.5, 1., .5) * spec * mask; // specular highlight\n    rgb += texture(iChannel1, p.xy/7.-.95*norm.xy+.003*iTime).rgb;\n    \n    // output\n    fo = vec4(rgb, 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define tx(o) texture( iChannel0, vec2(uv.x+o.x/res.x, fract(uv.y+o.y/res.y)) )\n\nfloat rand(float p){ return fract(sin(p*12.9898)*43758.5453); }\n\nbool isKeyPressed(float k) {\n    return (texture(iChannel3, vec2(k, .2)).r>.3);\n}\n\nvoid mainImage( out vec4 fo, in vec2 fc ) {\n\t// useful stuff\n    vec2 res = iResolution.xy;\n    vec2 p = (fc-res/2.) / res.y;\n    vec2 uv = fc / res;\n    vec3 o = vec3(-1., 0., 1.);\n    \n    float F, Ct;\n    \n    // A counting variable so we know when to start autmatically scrolling.\n    Ct = tx(o.yy).g;\n    \n    // start scrolling when appropriate\n    if(Ct>res.x-2.)\n        uv.x += 1. / res.x;\n    \n    // initial F value this frame\n    F = tx(o.yy).r;\n    \n\t// samples\n    float a, b, c, d, e;\n    a = tx(o.xy).r;        \n    b = tx(o.xx).r;\n    c = tx(o.xz).r;\n    d = tx((o.xx*vec2(1., 2.))).r;\n    e = tx((o.xz*vec2(1., 2.))).r;\n    \n    // rule set for this particular cellular automaton\n    if(F==0. && a>0.) {\n        F = (a+b+c)/3.;\n        F -= .1*(.5-min(b, c));\n        F += .1*(.5-min(d, e));\n\t\tF += .85*((a+b+c)/3.-max(b, c)) * smoothstep(.2-.1*a, .2+.1*a, F);\n    }\n    \n    // clear & seed the buffer when shader is reset or when 'r' is pressed\n    if(iFrame==0 || isKeyPressed(82.5/256.)) {\n        if(floor(fc.x)<1.)\n            // seed values for the initial column\n        \tF = rand(mod(p.y+iTime/124.948+iDate.w/14.781, 100.));\n        else\n            // everything not of the column get a value of 0\n            F = 0.;\n        Ct = 0.;\n    }\n\t\n    // ootpoot\n\tfo = vec4(fract(F), Ct+1., 0., 0.);\n}","name":"Buffer A","description":"","type":"buffer"}]}