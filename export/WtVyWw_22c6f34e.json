{"ver":"0.1","info":{"id":"WtVyWw","date":"1611138015","viewed":144,"name":"Color Adjust, HSL","username":"eipporko","description":"Adjust Brightness, contrast, Gamma, Hue, Saturation and Luminosity parameters on the texture","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["contrast","saturation","gamma","luminosity","hslhue"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"        float brightness = 0.0;\n        float contrast = 1.0;\n        float gamma = 1.0;\n        float hue = 0.5;\n        float saturation = 0.0;\n        float luminosity = 0.0;\n\n        vec3 modBrightnessContrast(vec3 val, float brightness, float contrast)\n        {\n            return (val - 0.5) * contrast + 0.5 + brightness;\n        }\n\n        vec3 modGamma(vec3 val, float gamma)\n        {\n            return pow(val, vec3(gamma));\n        }\n\n        // Hue, saturation, luminance\n        vec3 rgbToHsl(vec3 color)\n        {\n            vec3 hsl; // init to 0 to avoid warnings ? (and reverse if + remove first part)\n\n            float fmin = min(min(color.r, color.g), color.b);    //Min. value of RGB\n            float fmax = max(max(color.r, color.g), color.b);    //Max. value of RGB\n            float delta = fmax - fmin;             //Delta RGB value\n\n            hsl.z = (fmax + fmin) / 2.0; // Luminance\n\n            if (delta == 0.0)\t\t//This is a gray, no chroma...\n            {\n                hsl.x = 0.0;\t// Hue\n                hsl.y = 0.0;\t// Saturation\n            }\n            else                                    //Chromatic data...\n            {\n                if (hsl.z < 0.5)\n                    hsl.y = delta / (fmax + fmin); // Saturation\n                else\n                    hsl.y = delta / (2.0 - fmax - fmin); // Saturation\n\n                float deltaR = (((fmax - color.r) / 6.0) + (delta / 2.0)) / delta;\n                float deltaG = (((fmax - color.g) / 6.0) + (delta / 2.0)) / delta;\n                float deltaB = (((fmax - color.b) / 6.0) + (delta / 2.0)) / delta;\n\n                if (color.r == fmax )\n                    hsl.x = deltaB - deltaG; // Hue\n                else if (color.g == fmax)\n                    hsl.x = (1.0 / 3.0) + deltaR - deltaB; // Hue\n                else if (color.b == fmax)\n                    hsl.x = (2.0 / 3.0) + deltaG - deltaR; // Hue\n\n                if (hsl.x < 0.0)\n                    hsl.x += 1.0; // Hue\n                else if (hsl.x > 1.0)\n                    hsl.x -= 1.0; // Hue\n            }\n\n            return hsl;\n        }\n\n        float hueToRgb(float f1, float f2, float hue)\n        {\n            if (hue < 0.0)\n                hue += 1.0;\n            else if (hue > 1.0)\n                hue -= 1.0;\n            float res;\n            if ((6.0 * hue) < 1.0)\n                res = f1 + (f2 - f1) * 6.0 * hue;\n            else if ((2.0 * hue) < 1.0)\n                res = f2;\n            else if ((3.0 * hue) < 2.0)\n                res = f1 + (f2 - f1) * ((2.0 / 3.0) - hue) * 6.0;\n            else\n                res = f1;\n            return res;\n        }\n\n        vec3 hslToRgb(vec3 hsl)\n        {\n            vec3 rgb;\n\n            if (hsl.y == 0.0) {\n                rgb = vec3(hsl.z); // Luminance\n            } else {\n                float f2;\n\n                if (hsl.z < 0.5)\n                    f2 = hsl.z * (1.0 + hsl.y);\n                else\n                    f2 = (hsl.z + hsl.y) - (hsl.y * hsl.z);\n\n                float f1 = 2.0 * hsl.z - f2;\n\n                rgb.r = hueToRgb(f1, f2, hsl.x + (1.0/3.0));\n                rgb.g = hueToRgb(f1, f2, hsl.x);\n                rgb.b = hueToRgb(f1, f2, hsl.x - (1.0/3.0));\n            }\n\n            return rgb;\n        }\n\n        void mainImage( out vec4 fragColor, in vec2 fragCoord )\n        {\n            // Normalized pixel coordinates (from 0 to 1)\n            vec2 uv = fragCoord/iResolution.xy;\n    \n            fragColor.rgb = modGamma(\n                clamp(\n                    modBrightnessContrast(\n                        texture(iChannel0, uv).rgb, \n                        brightness, \n                        contrast\n                    ), \n                    0.0, \n                    1.0\n                ), \n                gamma\n            );\n\n            vec3 hsl = rgbToHsl(fragColor.rgb);\n\n            hsl.r = mod(hsl.r + hue, 1.0);\n            hsl.g = clamp(hsl.g + saturation, 0.0, 1.0);\n            hsl.b = clamp(hsl.b + luminosity, 0.0, 1.0);\n\n            fragColor.rgb = hslToRgb(hsl);\n        }\n","name":"Image","description":"","type":"image"}]}