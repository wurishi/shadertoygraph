{"ver":"0.1","info":{"id":"mlGXDW","date":"1686092842","viewed":71,"name":"Raymarching test 01","username":"colinb","description":"raymarching","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//https://iquilezles.org/articles/distfunctions/\nfloat smin( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\n\n// Rotation matrix around the X axis.\nmat3 rotateX(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(1, 0, 0),\n        vec3(0, c, -s),\n        vec3(0, s, c)\n    );\n}\n\n// Rotation matrix around the Y axis.\nmat3 rotateY(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, 0, s),\n        vec3(0, 1, 0),\n        vec3(-s, 0, c)\n    );\n}\n\n// Rotation matrix around the Z axis.\nmat3 rotateZ(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, -s, 0),\n        vec3(s, c, 0),\n        vec3(0, 0, 1)\n    );\n}\n\n// Identity matrix.\nmat3 identity() {\n    return mat3(\n        vec3(1, 0, 0),\n        vec3(0, 1, 0),\n        vec3(0, 0, 1)\n    );\n}\n\nfloat sdOctahedron( vec3 p, float s, mat3 transform)\n{\n  p = p * transform;\n  p = abs(p);\n  return (p.x+p.y+p.z-s)*0.57735027;\n}\n\nfloat map(vec3 p) {\n    // repetition\n    vec3 rep = vec3(18. + 10. *cos(iTime));\n    p = mod(p+rep*.5, rep)-rep*.5;\n    \n    vec3 pos = vec3(asin(sin(iTime*0.5))*1.4,abs(sin(iTime*1.)*0.5)-0.25, 0.0);\n    float cir1 = length(p - pos) - 1.;\n    vec3 pos2 = vec3(asin(sin(2.8 + iTime*0.5))*1.4,abs(sin(0.33 + iTime*1.)*0.5)-0.25, 0.0);\n    float cir2 = length(p - pos2) - 1.;\n    \n    float octa = sdOctahedron(p, 1.5, rotateX(iTime) * rotateY(iTime));\n    \n    return smin(smin(cir1, cir2, 0.5), octa, 0.5);\n}\n\nvec3 getNormal(vec3 p) {\n    vec2 eps = vec2(0.01, 0.);\n    return -normalize(\n        vec3(\n            map(p-eps.xyy) - map(p+eps.xyy),\n            map(p-eps.yxy) - map(p+eps.yxy),\n            map(p-eps.yyx) - map(p+eps.yyx)\n        )\n    ); \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = uv - 0.5;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    vec3 cam = vec3(0.0, 0.0, -5. + 2.5 * sin(iTime));\n    vec3 dir = normalize(vec3(uv.x, uv.y, 1.));\n    vec3 p = cam;\n    \n    vec3 col = vec3(0.0);\n    \n    for (int i = 0 ; i < 128 ; i++) {\n        float dist = map(p);\n        if(dist < 0.01) {\n            vec3 n = getNormal(p);\n            col = n * 0.5 + 0.5;\n            vec3 lightdir = normalize(vec3(sin(iTime), 1., -1.));\n            col = col*clamp(dot(lightdir, n), 0.,1.);\n            break;\n        }\n        p += dist*dir;\n    }\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}