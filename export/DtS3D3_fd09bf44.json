{"ver":"0.1","info":{"id":"DtS3D3","date":"1673983656","viewed":54,"name":"testhueshift-bicubic","username":"mrboggieman","description":"hue shifter - bicubic version\nMake fullscreen to see the difference\n\nSpliced together from https://www.shadertoy.com/view/dlj3WK and https://www.shadertoy.com/view/3dlfD7","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["hue","shift"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","previewfilepath":"/media/ap/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//from https://www.shadertoy.com/view/dlj3WK and https://www.shadertoy.com/view/3dlfD7\n#define GAMMA 2.2\n#define WRAP BORDER\n\n#define BORDER(p) p\n#define CLAMP(p) clamp(p, ivec2(0), textureSize(tex,0)-1)\n#define REPEAT(p) ivec2(mod(vec2(p), vec2(textureSize(tex,0))))\n#define P(x,y) pow(texelFetch(tex, WRAP(pi + ivec2(x,y)), 0), vec4(GAMMA))\n#define saturate(v) clamp(v,0.,1.)\n\nvec3 HueShift(vec3 source, float shift)\n{\n    // convert to HSV\n\tvec4 K = vec4(0.,-1./3.,2./3.,-1.);\n\tvec4 p = mix(vec4(source.bg ,K.wz),vec4(source.gb,K.xy ),step(source.b,source.g));\n\tvec4 q = mix(vec4(p.xyw,source.r ),vec4(source.r ,p.yzx),step(p.x,source.r));\n    float d = q.x-min(q.w,q.y);\n\tfloat e=1e-10;\n\tvec3 c = vec3(abs(q.z+(q.w-q.y)/(6.*d+e)),d/(q.x+e),q.x);\n    \n    // apply shift\n    c.x = fract(c.x+shift);\n\n    // convert to RGB\n\tK = vec4(1.,2./3.,1./3.,3.);\n\treturn c.z*mix(K.xxx,saturate(abs(fract(c.x+K.xyz)*6.-K.w)-K.x),c.y);\n}\n\nvec4 nearest(sampler2D tex, vec2 p) {\n    ivec2 pi = ivec2(floor(p));\n    return P(0,0);\n}\n\nvec4 bilinear(sampler2D tex, vec2 p) {\n    p -= .5;\n    ivec2 pi = ivec2(floor(p));\n    vec2 pf = fract(p);\n    return mix(mix(P(0,0), P(1,0), pf.x),\n               mix(P(0,1), P(1,1), pf.x), pf.y);\n}\n\nvec4 smooth_bilinear(sampler2D tex, vec2 p) {\n    return bilinear(tex, floor(p-.5) + smoothstep(0.,1.,fract(p-.5)) + .5);\n}\n\nconst mat4 M = mat4( 1, 0,-3, 2,  0, 0, 3,-2,  0, 1,-2, 1,  0, 0,-1, 1);\nconst mat4 MT = transpose(M);\n\nvec4 bicubic(sampler2D tex, vec2 p) {\n    p -= .5;\n    ivec2 pi = ivec2(floor(p));\n    vec2 pf = fract(p);\n\n    vec4 fnn = P(-1,-1),  f0n = P( 0,-1),  f1n = P( 1,-1),  f2n = P( 2,-1);\n    vec4 fn0 = P(-1, 0),  f00 = P( 0, 0),  f10 = P( 1, 0),  f20 = P( 2, 0);\n    vec4 fn1 = P(-1, 1),  f01 = P( 0, 1),  f11 = P( 1, 1),  f21 = P( 2, 1);\n    vec4 fn2 = P(-1, 2),  f02 = P( 0, 2),  f12 = P( 1, 2),  f22 = P( 2, 2);\n\n    vec4 fx0n = .5*(f1n - fnn),  fx1n = .5*(f2n - f0n);\n    vec4 fx00 = .5*(f10 - fn0),  fx10 = .5*(f20 - f00);\n    vec4 fx01 = .5*(f11 - fn1),  fx11 = .5*(f21 - f01);\n    vec4 fx02 = .5*(f12 - fn2),  fx12 = .5*(f22 - f02);\n\n    vec4 fy00 = .5*(f01 - f0n),  fy10 = .5*(f11 - f1n);\n    vec4 fy01 = .5*(f02 - f00),  fy11 = .5*(f12 - f10);\n\n    vec4 fxy00 = .5*(fx01 - fx0n),  fxy10 = .5*(fx11 - fx1n);\n    vec4 fxy01 = .5*(fx02 - fx00),  fxy11 = .5*(fx12 - fx10);\n\n    #define F(c) mat4(f00.c,  f10.c,  fx00.c,  fx10.c,\\\n                      f01.c,  f11.c,  fx01.c,  fx11.c,\\\n                      fy00.c, fy10.c, fxy00.c, fxy10.c,\\\n                      fy01.c, fy11.c, fxy01.c, fxy11.c)\n\n    vec4 vx = vec4(1, pf.x, pf.x*pf.x, pf.x*pf.x*pf.x);\n    vec4 vy = vec4(1, pf.y, pf.y*pf.y, pf.y*pf.y*pf.y);\n\n    return vec4(dot(vx * M * F(r) * MT, vy),\n                dot(vx * M * F(g) * MT, vy),\n                dot(vx * M * F(b) * MT, vy),\n                dot(vx * M * F(a) * MT, vy));\n}\n\nconst mat4 W = mat4( 0,-1, 2,-1,  2, 0,-5, 3,  0, 1, 4,-3,  0, 0,-1, 1);\n\nvec4 bicubic2(sampler2D tex, vec2 p) {\n    p -= .5;\n    ivec2 pi = ivec2(floor(p));\n    vec2 pf = fract(p);\n\n    vec4 fnn = P(-1,-1),  f0n = P( 0,-1),  f1n = P( 1,-1),  f2n = P( 2,-1);\n    vec4 fn0 = P(-1, 0),  f00 = P( 0, 0),  f10 = P( 1, 0),  f20 = P( 2, 0);\n    vec4 fn1 = P(-1, 1),  f01 = P( 0, 1),  f11 = P( 1, 1),  f21 = P( 2, 1);\n    vec4 fn2 = P(-1, 2),  f02 = P( 0, 2),  f12 = P( 1, 2),  f22 = P( 2, 2);\n\n    #define S(t,fn,f0,f1,f2) dot(.5 * t * W, vec4(fn, f0, f1, f2))\n    #define S4(t,fn,f0,f1,f2) vec4(S(t, fn.r, f0.r, f1.r, f2.r),\\\n                                   S(t, fn.g, f0.g, f1.g, f2.g),\\\n                                   S(t, fn.b, f0.b, f1.b, f2.b),\\\n                                   S(t, fn.a, f0.a, f1.a, f2.a))\n\n    vec4 vx = vec4(1, pf.x, pf.x*pf.x, pf.x*pf.x*pf.x);\n    vec4 vy = vec4(1, pf.y, pf.y*pf.y, pf.y*pf.y*pf.y);\n\n    vec4 bn = S4(vx, fnn, f0n, f1n, f2n);\n    vec4 b0 = S4(vx, fn0, f00, f10, f20);\n    vec4 b1 = S4(vx, fn1, f01, f11, f21);\n    vec4 b2 = S4(vx, fn2, f02, f12, f22);\n    return S4(vy, bn, b0, b1, b2);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 imsize = vec2(textureSize(iChannel0, 0));\n    float shift = fract(iTime);\n    \n    vec2 p = uv * imsize;//(fragCoord-.5*iResolution.xy)/10.+.5*imsize;\n    vec3 col = texture(iChannel0, p/imsize).rgb;\n    //col = nearest(iChannel0, p, shift).rgb;\n    //col = bilinear(iChannel0, p, shift).rgb;\n    //col = smooth_bilinear(iChannel0, p, shift).rgb;\n    col = bicubic2(iChannel0, p).rgb;\n    \n    col = HueShift(col, shift);\n\n    // Gamma correction\n    col = pow(col, vec3(1./GAMMA));\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}