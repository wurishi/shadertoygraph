{"ver":"0.1","info":{"id":"X3XcW8","date":"1726082226","viewed":11,"name":"Flower Puzzle 3 (jasonhl)","username":"poxter","description":"Try to match the given flower patterns!\n\nBrownie points: how do you change the color of the flower from the center?","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["circle"],"hasliked":0,"parentid":"NsVBzy","parentname":"Flower puzzle"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/**\n * @author rah, inspired by jonobr1 / http://jonobr1.com/\n */\n \n/*\n * Superformula for 2D coordinates, from:\n * https://www.shadertoy.com/view/MdXXDB\n */\nfloat sf2d( float m, float a, float b, float n1, float n2, float n3, float phi ) {\n    return pow((pow(abs(cos(m*phi/4.0)/a),n2) + pow(abs(sin(m*phi/4.0)/b), n3)), -(1.0/n1));\n}\n \n/* \n * Output background colors at given uv\n */\nvec3 background(vec2 uv) {\n    // Scale, tile, and animate grid\n    float nShapes = 8.0;\n    float animSpeed = 200.0;\n    uv = (uv + animSpeed * iTime) / min(iResolution.x, iResolution.y);\n    float h = hash(floor(nShapes * uv));\n    uv = 2.0 * fract(nShapes * uv) - vec2(1.0);\n    \n    // Rotate shape\n    float phi = atan(uv.y, uv.x);\n    phi += sign(h - 0.5) * (h + 0.5) * iTime;\n    \n    // Generate supershape\n    float t1 = triangle(iTime + h, h + 0.5);\n    float t2 = exponentialInOut(triangle(iTime + h, 2.0 * (h + 0.5)));\n    float m = 3.0 + floor(7.0 * h),\n          n1 = mix(4.0, 6.0 + 10.0*h, t1),\n          n2 = mix(2.0 + 4.0*h, 10.0 + 6.0*h, t2);\n    float r = sf2d(m, 0.75, 0.75, n1, n2, n2, phi);\n    \n    // Output color\n    float l = length(uv);\n    if (l < r) {\n        if (l < r - 0.05) {\n            // Cosine-based color palette\n            vec3 a = vec3(0.5,0.5,0.5);\n            vec3 b = vec3(0.5,0.5,0.5);\n            vec3 c = vec3(1.0,1.0,0.5);\n            vec3 d = vec3(0.8,0.90,0.30);\n            return palette(l + sin(iTime + h), a, b, c, d);\n        } else {\n            return vec3(h, 1.0-h, 0.5*h);\n        }\n    } else {\n        return vec3(0.0);\n    }\n}\n\n/* \n * Output circle colors at given center pos and radius\n */\nvec4 circle(vec2 uv, vec2 center, float radius)\n{\n    // Get distance of point from center, get difference from given radius\n\tfloat dist = length(center - uv) - radius;\n\tfloat t1 = clamp(dist, 0.0, 1.0);\n    \n    // Cosine-based color palette\n    vec3 a = vec3(0.5,0.5,0.5);\n    vec3 b = vec3(0.5,0.5,0.5);\n    vec3 c = vec3(1.0,1.0,1.0);\n    vec3 d = vec3(0.0,0.33,0.67);\n    float t2 = dist / radius + sin(iTime);\n    vec3 color = palette(t2, a, b, c, d);\n    \n    // If point is smaller than radius, set color alpha to 1, otherwise 0\n\treturn vec4(color, 1.0 - t1);\n}\n\n/*\n * Your work here!\n */\nfloat computeRadius(vec2 uv)\n{\n    float radius = 0.25 * iResolution.y;\n    \n    // Centered uv\n    vec2 uvCenter = (2.0f * uv - iResolution.xy);\n    // Rotate uv\n    uvCenter = rotatePoint2d(uvCenter, vec2(0.0), 2.0 * iTime);\n    // Get pixel angle around the center\n    float a = atan(uvCenter.x,uvCenter.y);\n    \n    // Make petals\n    float disp = triangle(a * PI, 4.0);\n    float t = elasticInOut(triangle(iTime, 4.0));\n    radius += disp * mix(120.0, -60.0, t);\n    \n    return radius;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = fragCoord.xy;\n\tvec2 center = iResolution.xy * 0.5;\n\tfloat radius = computeRadius(uv);\n    \n    // Background layer\n\tvec4 layer1 = vec4(background(uv), 1.0);\n\t\n\t// Circle\n\tvec4 layer2 = circle(uv, center, radius);\n\t\n\t// Blend the two\n\tfragColor = mix(layer1, layer2, layer2.a);\n\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/*\n * Toolbox functions! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n */ \nfloat bias(float t, float b) {\n    return (t / ((((1.0/b) - 2.0)*(1.0 - t))+1.0));\n}\n\n/*\n * Basic Utilities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n */\n\n#define PI 3.141592653589793\n#define TWO_PI 6.28318530718\n#define HALF_PI 1.5707963267948966\n\n/* \n * Rotate an input point about some center by angle\n */\nvec2 rotatePoint2d(vec2 uv, vec2 center, float angle)\n{\n    vec2 rotatedPoint = vec2(uv.x - center.x, uv.y - center.y);\n    float newX = cos(angle) * rotatedPoint.x - sin(angle) * rotatedPoint.y;\n    rotatedPoint.y = sin(angle) * rotatedPoint.x + cos(angle) * rotatedPoint.y;\n    rotatedPoint.x = newX;\n    return rotatedPoint;\n}\n\n/*\n * Hash a 2D coordinate, from:\n * https://www.shadertoy.com/view/XdGfRR\n */\nfloat hash(vec2 p)\n{\n\tuvec2 q = uvec2(ivec2(p)) * uvec2(1597334673U, 3812015801U);\n\tuint n = (q.x ^ q.y) * 1597334673U;\n\treturn float(n) * 2.328306437080797e-10;\n}\n\n/*\n * Make a vec3 color from rgb values [0, 255]\n */\nvec3 rgb(float r, float g, float b)\n{\n\treturn vec3(r / 255.0, g / 255.0, b / 255.0);\n}\n\n/*\n * Cosine based palette from @iq\n */\nvec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( TWO_PI*(c*t+d) );\n}\n\n/*\n * Triangle wave\n */\nfloat triangle(float t, float period)\n{\n    float p2 = period / 2.0;\n    return abs(mod(t, period) - p2) / p2;\n}\n\n/*\n * Elastic in-out easing from:\n * https://github.com/glslify/glsl-easings\n */\nfloat elasticInOut(float t) {\n  return t < 0.5\n    ? 0.5 * sin(+13.0 * HALF_PI * 2.0 * t) * pow(2.0, 10.0 * (2.0 * t - 1.0))\n    : 0.5 * sin(-13.0 * HALF_PI * ((2.0 * t - 1.0) + 1.0)) * pow(2.0, -10.0 * (2.0 * t - 1.0)) + 1.0;\n}\n\n/*\n * Exponential in-out easing from:\n * https://github.com/glslify/glsl-easings\n */\nfloat exponentialInOut(float t) {\n  return t == 0.0 || t == 1.0\n    ? t\n    : t < 0.5\n      ? +0.5 * pow(2.0, (20.0 * t) - 10.0)\n      : -0.5 * pow(2.0, 10.0 - (t * 20.0)) + 1.0;\n}\n\n\n\n","name":"Common","description":"","type":"common"}]}