{"ver":"0.1","info":{"id":"wsj3WG","date":"1550301517","viewed":86,"name":"experiment3","username":"thoughtformmax","description":"learning to raymarch from Art of Code","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarching","sphere"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 16\t\n#define SURFACE_DIST .03\n#define MAX_DIST 8.\n\nfloat maxFract (vec3 p) {\n    //p.z = mod(p.z,16.);\n\t//p.z+=mod(iTime*2.,8.);\n    vec4 sphere = vec4 (sin(iTime),0.,2.,1.);\n    float d = length(p - sphere.xyz)-sphere.w;\n    for(float i = 0.; i < 6.; i++){\n        p.x =sin(p.y)+.19+mod(p.x,sin(iTime));\n    \tp.y += tan(p.z)+.17;\n    \tp.z += sin(p.y)+.11;\n        vec4 sphere2 = sphere + vec4 (2.*i,2.*i,2.*i,.1*i);\n        sphere2.y += sin(iTime*2.*i);\n        float d2 = length(p - sphere2.xyz)-sphere2.w;\n\t\td = min(d,d2);\n    }\n    return d;\n}\nfloat GetDist(vec3 p) {\n    float d = maxFract(p-vec3(0.,0.,6.));\n    return d;\n}\nfloat RayMarch(vec3 ro, vec3 rd) {//ray origin, ray direction\n    \n    float dO = 0.; \n    for(int i = 0; i< MAX_STEPS; i++){\n        vec3 p = ro+dO*rd;\n        float dS = GetDist(p); //distance to scene\n            dO += dS;\n        if(dS<SURFACE_DIST || dO>MAX_DIST) break;\n    }\n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    vec2 e = vec2(.01,0.);\n    float d = GetDist(p);\n    vec3 n = d - vec3 (\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx)\n        );\n    return normalize(n);\n    \n}\n\nfloat GetLight(vec3 p) {\n    vec3 lightPos = vec3(0.,5.,6.);\n    lightPos.xz += vec2(sin(iTime*1.),cos(iTime*1.)) * 2.;\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n,l),0.,1.);\n    float d = RayMarch(p+n*SURFACE_DIST*2.,l);//shadow\n    if(d<length(lightPos-p)) dif *= .3;\n    return dif;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    //camera\n    vec3 ro = vec3(0,1,0); //ray origin\n    vec3 rd = normalize(vec3(uv.x,uv.y,1)); //ray direction\n\n    float d = RayMarch (ro,rd);\n    vec3 p = ro + rd * d;\n    float dif = GetLight(p);//diffuse light\n    \n    d /= 9.;\n    vec3 col = vec3(dif);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n\n\n\n\n\n","name":"Image","description":"","type":"image"}]}