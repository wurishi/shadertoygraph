{"ver":"0.1","info":{"id":"dsKfWh","date":"1698257419","viewed":33,"name":"funciones","username":"jpechevarria","description":"function graph","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["graph","function","subsample"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//#define ZOOM\n#define GRID\n//#define AA\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float aspect = iResolution.x / iResolution.y;\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = ( fragCoord - .5*iResolution.xy ) /  iResolution.xy;\n    //vec2 pxSize = 1.0 / iResolution.xy;\n\n    vec2 coord = uv * iResolution.xy;\n    ///*\n    #ifdef ZOOM\n    vec2 center = vec2(150.0,0.0);\n    float zsmin = 30.0, zsmax = 300.0;\n    float zs;\n    zs = 500.0;\n    zs = (.5*(zsmin+zsmax)) + (.5*(zsmax-zsmin)) * sin(iTime);\n    float zx = zs * 2.0;\n    float zy = zx / aspect;\n    \n    coord = center + uv * vec2(zx,zy);\n    //coord.y = center.y + uv.y * zy;\n    #endif \n    //*/\n    \n    //coord = fragCoord - vec2(0.5) * iResolution.xy;\n    //vec2 coord = ( fragCoord - .5*iResolution.xy ) /  iResolution.xy;\n\n    vec3 col = vec3(0.4);\n\n    // centramos las coord\n    coord.xy -= vec2(0.5);\n\n    // GRID\n    ///*\n    #ifdef ZOOM\n    #ifdef GRID\n    float gridFact = 1.0;\n    if ( zx > 99.0 )\n        gridFact = 2.0;\n    if ( zx > 199.0 )\n        gridFact = 5.0;\n    if ( zx > 399.0 )\n        gridFact = 10.0;\n        \n    if ( fract(coord.x/gridFact) <= ( zx/iResolution.x/gridFact ) )\n        col = vec3(1.0,1.0,1.0);\n    if ( fract(coord.y/gridFact) <= ( zy/iResolution.y/gridFact ) )\n        col = vec3(1.0,1.0,1.0);\n    #endif\n    #endif\n    //*/\n    \n    // AXIS\n    ///*\n    // X-Axis\n    if ( abs(coord.y) <= 0.25 )\n    {\n        col = vec3(1.0,0.0,0.0);\n    }\n    // Y-Axis\n    if ( abs(coord.x) <= 0.25 )\n    {\n        col = vec3(0.0,1.0,0.0);\n    }\n    //*/\n    \n    // TANGENT\n    if (  coord.x > 149.75 && coord.x < 150.25 )\n        col = vec3(0.0,0.0,1.0);\n    \n    \n    \n    #ifdef ZOOM\n    coord = trunc(coord );\n    #endif\n    \n    /*\n    if (      coord.x > 149.9 && coord.x < 150.1 \n           && coord.y >= 0.0 && coord.y <= 5.0\n        )//*/\n    {\n        \n        float ret;\n        ret = subSample(coord, iTime);\n        //ret = superSample(coord, iTime);\n        if ( ret > 0.5 )\n        {\n            #ifdef AA\n            float f = smoothstep(0.0,1.0,ret / float(div));\n            col = f * vec3(0.0,1.0,1.0);\n            #else\n            col = vec3(1.0,1.0,0.0);\n            #endif\n        }\n    }\n    \n\n\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n\n\n\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"int div = 32;\n\nfloat subSample(vec2 coord, float iTime) {\n    float ret = 0.0;\n    vec2 newCoord;\n    float delta;\n    float val;\n    float rad = 150.0;\n    float rad2 = rad * rad;\n\n    vec2 baseCoord = coord; \n    \n    delta = 1.0 / float(div);\n    float ini = 0.0;\n    float tol = 20.0 ;\n    float y;\n    int overlay = 0;\n    #ifdef AA\n    overlay = div\n    #endif\n    for ( int i = -overlay ; i < div+overlay ; i++ )\n    {\n        for ( int j = -overlay ; j < div+overlay ; j++ )\n        {\n            newCoord = baseCoord;\n            newCoord += ini;\n            newCoord += delta * vec2( float(j), float(i));\n            \n            // CIRCULO - v2 ( y = f(x) )\n            ///*\n            y = sqrt(rad2 - newCoord.x * newCoord.x );\n            if ( coord.y < 0.0 ) y *= -1.0; // INVERTIMOS LA RAIZ\n            if ( coord.y <= y && y <= coord.y + 1.0  )\n                ret += 1.0;\n            //*/\n            \n            // PARABOLA\n            ///*\n            y = 1.0 / pow(2.0,8.0) * ( newCoord.x * newCoord.x );\n            if ( coord.y <= y && y <= coord.y + 1.0  )\n                ret += 1.0;\n            //*/\n            // SENO\n            ///*\n            y = (sin(2.0*iTime) * 80.0) * sin( (newCoord.x-300.0*iTime) / ( 3.14159 * 16.0 ) );\n            if ( coord.y <= y && y <= coord.y + 1.0  )\n                ret += 1.0;\n            //*/\n            // EXPONENCIAL\n            ///*\n            y = newCoord.x * sin( 0.125 * newCoord.x );\n            if ( coord.y <= y && y <= coord.y + 1.0  )\n                ret += 1.0;\n            //*/\n        }\n    }\n\n    return ret;\n}\n\nfloat superSample(vec2 coord, float iTime )\n{\n    float ret;\n\n    for ( int i = -1; i <= 0 ; i++ )\n    {\n        for ( int j = -1; j <= 0 ; j++ )\n        {\n            float lRet = subSample(coord + vec2(i,j), iTime);\n            if ( lRet > 0.5 )\n            {\n                ret += 1.0;\n                break;\n            }\n        }\n    }\n    return ret;\n\n}","name":"Common","description":"","type":"common"}]}