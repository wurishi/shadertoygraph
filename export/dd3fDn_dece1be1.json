{"ver":"0.1","info":{"id":"dd3fDn","date":"1697208388","viewed":58,"name":"Dithered filtering","username":"paperjack","description":"More dithering. Change the scale to set the resolution","likes":2,"published":1,"flags":0,"usePreview":1,"tags":["dithering"],"hasliked":0,"parentid":"ftdyzX","parentname":"Bilinear filtering for noobs"},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float BAYER4[16] = \n\tfloat[16](0.0,0.75,0.1875,0.9375,\n\t0.5,0.25,0.6875,0.4375,\n\t0.125,0.875,0.0625,0.8125,\n\t0.625,0.375,0.5625,0.3125);\n    \nconst float NOISE_ZERO_OFFSET = 0.001;\n\nfloat get_bayer4_value(ivec2 pos){ return BAYER4[((pos.y*4)+pos.x)%16]; }\n\nfloat get_interleavened_gradient_noise_value(ivec2 pos){ \n    return fract(52.9829189*fract(0.06711056*float(pos.x) + 0.00583715*float(pos.y))); \n}\n\nvec3 dithered_mix(vec3 a, vec3 b, float amount, vec2 uv){\n    float v = step(get_interleavened_gradient_noise_value(ivec2(uv))+NOISE_ZERO_OFFSET, amount);\n    return (b * v) + (a * (1.0-v));\n    //return b+vec3(v, 0.0,0.0);\n}\n\nvec2 dithered_mix(vec2 a, vec2 b, float amount, vec2 uv){\n    float v = step(get_interleavened_gradient_noise_value(ivec2(uv))+NOISE_ZERO_OFFSET, amount);\n    return (b * v) + (a * (1.0-v));\n    //return b+vec3(v, 0.0,0.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 scale = vec2(64.0, 32.0+abs(sin(iTime*0.01)*32.0));\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 grid_step = vec2(1.0)/scale;\n    vec2 griduv = vec2(floor(uv.x*scale.x), floor(uv.y*scale.y))/scale + grid_step*0.5;\n          \n    \n    vec4 distances = vec4(\n                    smoothstep(0.0, 1.0, (uv.y - griduv.y) * scale.y),\nsmoothstep(0.0, 1.0, (griduv.x - uv.x) * scale.x), smoothstep(0.0, 1.0, (uv.x - griduv.x) * scale.x),\n                    smoothstep(0.0, 1.0, (griduv.y - uv.y) * scale.y));\n            \n    distances = pow(distances, vec4(1.0));\n   \n    vec2 ditheruv = fragCoord;\n    \n    float final = 0.0;\n    if(distances.x > final){\n        final = distances.x;\n        griduv = dithered_mix(\n        griduv, griduv + vec2(0.0, grid_step.y), \n        distances.x, \n        ditheruv);\n    } \n    if(distances.y > final) {\n        final = distances.y;\n        griduv = dithered_mix(\n        griduv, griduv + vec2(-grid_step.x, 0.0), \n        distances.y, \n        ditheruv);\n    }\n    if(distances.z > final) {\n        final = distances.z;\n        griduv = dithered_mix(\n        griduv, griduv + vec2(grid_step.x, 0.0), \n        distances.z, \n        ditheruv);\n    }\n    if(distances.w > final) {\n        final = distances.w;\n        griduv = dithered_mix(\n        griduv, griduv + vec2(0.0, -grid_step.y), \n        distances.w, \n        ditheruv);\n    }       \n    \n    griduv = clamp(griduv, vec2(0.0), vec2(1.0));\n    vec3 gridcol = texture(iChannel0, griduv, -9999.0).xyz;\n\n    //col.r += dist_u;\n    //col.g += dist_l;*/\n   \n    // Output to screen\n    fragColor = vec4(gridcol,1.0);\n}","name":"Image","description":"","type":"image"}]}