{"ver":"0.1","info":{"id":"7s2yR3","date":"1643883001","viewed":143,"name":"ColouredNoiseLayers","username":"mulletdulla","description":"Combining 2 noise layers and passing them through a colour curve corrector\n-- not eht ecurve corrector does not tonemap so some values are being clipped","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define GLSLIFY 1\n#define GLSLIFY 1\nvec2 hash(vec2 p) // replace this by something better\n\n{\n    p = vec2(dot(p, vec2(127.1, 311.7)), dot(p, vec2(269.5, 183.3)));\n    return -1.0 + 2.0 * fract(sin(p) * 43758.5453123);\n}\n\nfloat noise(in vec2 p)\n{\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\n    vec2  i = floor(p + (p.x + p.y) * K1);\n    vec2  a = p - i + (i.x + i.y) * K2;\n    float m = step(a.y, a.x);\n    vec2  o = vec2(m, 1.0 - m);\n    vec2  b = a - o + K2;\n    vec2  c = a - 1.0 + 2.0 * K2;\n    vec3  h = max(0.5 - vec3(dot(a, a), dot(b, b), dot(c, c)), 0.0);\n    vec3  n = h * h * h * h * vec3(dot(a, hash(i + 0.0)), dot(b, hash(i + o)), dot(c, hash(i + 1.0)));\n    return dot(n, vec3(70.0));\n}\n\n/* discontinuous pseudorandom uniformly distributed in [-0.5, +0.5]^3 */\nvec3 random3(vec3 c)\n{\n    float j = 4096.0 * sin(dot(c, vec3(17.0, 59.4, 15.0)));\n    vec3 r;\n    r.z = fract(512.0 * j);\n    j *= .125;\n    r.x = fract(512.0 * j);\n    j *= .125;\n    r.y = fract(512.0 * j);\n    return r - 0.5;\n}\n\n/* skew constants for 3d simplex functions */\nconst float F3 = 0.3333333;\nconst float G3 = 0.1666667;\n\n/* 3d simplex noise */\nfloat simplex3d(vec3 p)\n{\n    /* 1. find current tetrahedron T and it's four vertices */\n    /* s, s+i1, s+i2, s+1.0 - absolute skewed (integer) coordinates of T vertices */\n    /* x, x1, x2, x3 - unskewed coordinates of p relative to each of T vertices*/\n    \n    /* calculate s and x */\n    vec3 s = floor(p + dot(p, vec3(F3)));\n    vec3 x = p - s + dot(s, vec3(G3));\n    \n    /* calculate i1 and i2 */\n    vec3 e = step(vec3(0.0), x - x.yzx);\n    vec3 i1 = e * (1.0 - e.zxy);\n    vec3 i2 = 1.0 - e.zxy * (1.0 - e);\n    \n    /* x1, x2, x3 */\n    vec3 x1 = x - i1 + G3;\n    vec3 x2 = x - i2 + 2.0 * G3;\n    vec3 x3 = x - 1.0 + 3.0 * G3;\n    \n    /* 2. find four surflets and store them in d */\n    vec4 w, d;\n    \n    /* calculate surflet weights */\n    w.x = dot(x, x);\n    w.y = dot(x1, x1);\n    w.z = dot(x2, x2);\n    w.w = dot(x3, x3);\n    \n    /* w fades from 0.6 at the center of the surflet to 0.0 at the margin */\n    w = max(0.6 - w, 0.0);\n    \n    /* calculate surflet components */\n    d.x = dot(random3(s), x);\n    d.y = dot(random3(s + i1), x1);\n    d.z = dot(random3(s + i2), x2);\n    d.w = dot(random3(s + 1.0), x3);\n    \n    /* multiply d by w^4 */\n    w *= w;\n    w *= w;\n    d *= w;\n    \n    /* 3. return the sum of the four surflets */\n    return dot(d, vec4(52.0));\n}\n\nfloat simplexNoise3d(vec3 uvz)\n{\n    // NOISE\n    float f = simplex3d(uvz);\n    f = 0.5 * f + 0.5;\n\n    return f;\n}\n\nfloat simplexNoise3d(vec2 uv, float freq, float z)\n{\n    // NOISE\n    vec3 uvz = vec3(uv * freq, z);\n\n    return simplexNoise3d(uvz);\n}\n\n/* const matrices for 3d rotation */\nconst mat3 rot1 = mat3(-0.37, 0.36, 0.85, -0.14, -0.93, 0.34, 0.92, 0.01, 0.4);\nconst mat3 rot2 = mat3(-0.55, -0.39, 0.74, 0.33, -0.91, -0.24, 0.77, 0.12, 0.63);\nconst mat3 rot3 = mat3(-0.71, 0.52, -0.47, -0.08, -0.72, -0.68, -0.7, -0.45, 0.56);\n\n/* directional artifacts can be reduced by rotating each octave */\nfloat simplex3d_fractal(vec3 m)\n{\n    return 0.5333333 * simplex3d(m * rot1)\n    + 0.2666667 * simplex3d(2.0 * m * rot2)\n    + 0.1333333 * simplex3d(4.0 * m * rot3)\n    + 0.0666667 * simplex3d(8.0 * m);\n}\n#define GLSLIFY 1\n// REF: https://www.shadertoy.com/view/4tlSzl\n\n// Hash function. This particular one probably doesn't disperse things quite as nicely as some\n// of the others around, but it's compact, and seems to work.\n//\nvec3 hash33(vec3 p)\n{\n    \n    float n = sin(dot(p, vec3(7, 157, 113)));\n    return fract(vec3(2097152, 262144, 32768) * n);\n}\n\n// 3D Voronoi: Obviously, this is just a rehash of IQ's original.\n//\nfloat voronoi(vec3 p)\n{\n\n    vec3 b, r, g = floor(p);\n    p = fract(p); // \"p -= g;\" works on some GPUs, but not all, for some annoying reason.\n    \n    // Maximum value: I think outliers could get as high as \"3,\" the squared diagonal length\n    // of the unit cube, with the mid point being \"0.75.\" Is that right? Either way, for this\n    // example, the maximum is set to one, which would cover a good part of the range, whilst\n    // dispensing with the need to clamp the final result.\n    float d = 1.;\n    \n    // I've unrolled one of the loops. GPU architecture is a mystery to me, but I'm aware\n    // they're not fond of nesting, branching, etc. My laptop GPU seems to hate everything,\n    // including multiple loops. If it were a person, we wouldn't hang out.\n    for (int j = -1; j <= 1; j++)\n    {\n        for (int i = -1; i <= 1; i++)\n        {\n            \n            b = vec3(i, j, -1);\n            r = b - p + hash33(g + b);\n            d = min(d, dot(r, r));\n            \n            b.z = 0.0;\n            r = b - p + hash33(g + b);\n            d = min(d, dot(r, r));\n            \n            b.z = 1.;\n            r = b - p + hash33(g + b);\n            d = min(d, dot(r, r));\n        }\n    }\n    \n    return d; // Range: [0, 1]\n\n}\n\n// Standard fBm function with some time dialation to give a parallax\n// kind of effect. In other words, the position and time frequencies\n// are changed at different rates from layer to layer.\n//\nfloat noiseLayers(in vec3 p)\n{\n\n    // Normally, you'd just add a time vector to \"p,\" and be done with\n    // it. However, in this instance, time is added seperately so that\n    // its frequency can be changed at a different rate. \"p.z\" is thrown\n    // in there just to distort things a little more.\n    vec3 t = vec3(0., 0., p.z + iTime * 1.5);\n\n    const int iter = 5; // Just five layers is enough.\n    float tot = 0., sum = 0., amp = 1.; // Total, sum, amplitude.\n\n    for (int i = 0; i < iter; i++)\n    {\n        tot += voronoi(p + t) * amp; // Add the layer to the total.\n        p *= 2.; // Position multiplied by two.\n        t *= 1.5; // Time multiplied by less than two.\n        sum += amp; // Sum of amplitudes.\n        amp *= .5; // Decrease successive layer amplitude, as normal.\n\n    }\n    \n    return tot / sum; // Range: [0, 1].\n\n}\n\n#define GLSLIFY 1\nfloat vec2Length(vec2 value)\n{\n    return sqrt(dot(value, value));\n}\n\nfloat SDF_2D_Circle(float radius, float fade, vec2 pos, vec2 coord)\n{\n    vec2 vecToCentre = coord - pos;\n    float dist = vec2Length(vecToCentre);\n    float min = radius - fade;\n    float max = radius + fade;\n    float circle = smoothstep(min, max, dist);\n\n    return circle;\n}\n\nfloat SDF_2D_Line(vec2 p, vec2 a, vec2 b)\n{\n    vec2 da = p - a;\n    vec2 db = p - b;\n\n    return 0.0;\n}\n#define GLSLIFY 1\nconst float M_PI = 3.14159265358979323846264338327950288;\nconst float M_PI_2 = 6.28318530718;\n\nfloat mod01(float value)\n{\n    return mod(value, 1.0);\n}\n\nfloat loopTime(float speed)\n{\n    return mod01(iTime * speed);\n}\n\nfloat loopTime(float speed, float duration)\n{\n    return mod(iTime * speed, duration);\n}\n\nfloat sinTime(float speed)\n{\n    return sin(iTime * speed);\n}\n\nfloat cosTime(float speed)\n{\n    return cos(iTime * speed);\n}\n\nfloat easeOutCubic(float value)\n{\n    return 1.0 - pow(1.0 - value, 3.0);\n}\n\nfloat timeSpeed = .75;\nfloat timeDuration = 6.0;\nfloat circleRadius = 0.23;\nfloat circleFade = .2;\nfloat voronoiF = 10.;\nfloat simplexF = 5.;\n\nvec3 col01 = vec3(5., 75., 70.) / 255.;\nvec3 col02 = vec3(201., 108., 210.) / 255.;\n\nvec2 circlePos = vec2(0.0);\n\nvoid InitializeScreenSpace(vec2 fragCoord, inout vec2 uv)\n{\n    uv = (fragCoord - .5 * iResolution.xy) / iResolution.y;\n}\n\n/// this is not a tonemapper. it is a colour curve corrector\nvec3 ColorCurves(vec3 value, float t, float s, float p)\n{\n    value = clamp(value, 0., 1.);\n\n    // define min max for toe, shoulder and power\n    t = min(5., t);\n    t = max(0.0001, t);\n\n    s = min(1., s);\n    s = max(0.0001, s);\n\n    p = min(5., p);\n    p = max(0.0001, p);\n\n    // p: Polynomial\n    vec3 p1 = pow(value, vec3(t));\n\n    // keeps the output as 0->1\n    float a = 1.0 + s;\n    float b = 1.0 - s;\n\n    vec3 p2 = pow(p1, vec3(a));\n    vec3 denominator = p2 * b + s;\n    \n    vec3 color = p1 / denominator;\n    color = pow(color, vec3(p));\n    \n\n    return clamp(color, 0., 1.);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Pixel color\n    vec3 col = vec3(1.);\n\n    vec2 uv;\n    InitializeScreenSpace(fragCoord, uv);\n\n    float z = iTime;\n    // noise\n    vec3 coords = vec3(uv * voronoiF, z);\n    float voronoiNoise = voronoi(coords);\n\n    coords = vec3(uv * simplexF, z * .66);\n    float simplexNoise = simplexNoise3d(coords);\n\n    float noise = (voronoiNoise + simplexNoise) * 0.5;\n\n    col = mix(col01, col02, noise) + ((voronoiNoise - simplexNoise) + 1.) * .5 * 0.75; //negative numbers but they look fucking sick\n\n    // this is so fucking powerful and I love it!\n    col = ColorCurves(col, 3.0, 0.8, 1.8);\n\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}