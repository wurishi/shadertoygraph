{"ver":"0.1","info":{"id":"dsfcR7","date":"1714759825","viewed":58,"name":"First Bezier Test","username":"Qwasdfet","description":"First Bezier test","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["bezier"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float drawPoint(vec2 fov, vec2 point, vec2 camPoint, vec2 fragCoord)\n{\n    //point is in \"world space\"\n    //campoint is in \"world space\"\n    //fov is in \"world space\" xy are the width and height of the view box in world space\n    //Frag coord is in \"screen space\"\n    \n    //transmute every fragcoord into a world space coord then take its distance from the point\n    //the center of the screen should be the coordinates of the camPoint\n    \n    vec2 centFragCoord = fragCoord - vec2(0.5,0.5) ;\n    vec2 fragWorldPointIntermed = centFragCoord * fov;\n    vec2 fragWorldPoint = fragWorldPointIntermed + camPoint;\n    \n    vec2 distVector = fragWorldPoint - point;\n    float dist = length(distVector);\n    \n    return dist;\n}\n\nvec2 quadBezierPerc(vec2 p1, vec2 p2, vec2 p3, vec2 p4, float perc)\n{\n    vec2 p5 = mix(p1,p2,perc);\n    vec2 p6 = mix(p2,p3,perc);\n    vec2 p7 = mix(p3,p4,perc);\n    \n    vec2 p8 = mix(p5,p6,perc);\n    vec2 p9 = mix(p6,p7,perc);\n    \n    vec2 p10 = mix(p8,p9,perc);\n    return p10;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float aspectRatio = iResolution.y/iResolution.x;\n    vec2 fov = 40.0 * vec2(1.0,aspectRatio);\n    \n    float perc = (sin(iTime * 5.)/2.) + 0.5;\n    \n    vec2 circ = quadBezierPerc(vec2(-5.,0.),vec2(-.5,1.),vec2(.5,0.),vec2(10.,-5.),perc);\n    \n    float dist = drawPoint(fov,circ,vec2(0,0),uv);\n    \n    // Time varying pixel color\n    vec3 col = 1./(dist+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}