{"ver":"0.1","info":{"id":"lsXfRS","date":"1496676484","viewed":478,"name":"4:2:0 undersampling","username":"bennett","description":"Simulating video compression. Uses RGB to YPbPr conversion from @paniq. Downsampled everything x2 just to show off the effect more.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["video","yuv","undersampling"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PBPR_SAMPLE_SIZE 8.0\n#define LUMA_SAMPLE_SIZE 2.0\n\n// YUV, generic conversion\n// ranges: Y=0..1, U=-uvmax.x..uvmax.x, V=-uvmax.x..uvmax.x\n\nvec3 yuv_rgb (vec3 yuv, vec2 wbwr, vec2 uvmax) {\n    vec2 br = yuv.x + yuv.yz * (1.0 - wbwr) / uvmax;\n\tfloat g = (yuv.x - dot(wbwr, br)) / (1.0 - wbwr.x - wbwr.y);\n\treturn vec3(br.y, g, br.x);\n}\n\nvec3 rgb_yuv (vec3 rgb, vec2 wbwr, vec2 uvmax) {\n\tfloat y = wbwr.y*rgb.r + (1.0 - wbwr.x - wbwr.y)*rgb.g + wbwr.x*rgb.b;\n    return vec3(y, uvmax * (rgb.br - y) / (1.0 - wbwr));\n}\n\n\n//----------------------------------------------------------------------------\n\n// Y*b*r, generic conversion\n// ranges: Y=0..1, b=-0.5..0.5, r=-0.5..0.5\n\nvec3 ypbpr_rgb (vec3 ybr, vec2 kbkr) {\n    return yuv_rgb(ybr, kbkr, vec2(0.5));\n}\n    \nvec3 rgb_ypbpr (vec3 rgb, vec2 kbkr) {\n    return rgb_yuv(rgb, kbkr, vec2(0.5));\n}\n\n//----------------------------------------------------------------------------\n\n// YPbPr, analog, gamma compressed, HDTV\n// ranges: Y=0..1, b=-0.5..0.5, r=-0.5..0.5\n\n// YPbPr to RGB, after ITU-R BT.709\nvec3 ypbpr_rgb (vec3 ypbpr) {\n    return ypbpr_rgb(ypbpr, vec2(0.0722, 0.2126));\n}\n\n// RGB to YPbPr, after ITU-R BT.709\nvec3 rgb_ypbpr (vec3 rgb) {\n    return rgb_ypbpr(rgb, vec2(0.0722, 0.2126));\n}\n\n//----------------------------------------------------------------------------\n\n// YPbPr, analog, gamma compressed, VGA, TV\n// ranges: Y=0..1, b=-0.5..0.5, r=-0.5..0.5\n\n// YPbPr to RGB, after ITU-R BT.601\nvec3 ypbpr_rgb_bt601 (vec3 ypbpr) {\n    return ypbpr_rgb(ypbpr, vec2(0.114, 0.299));\n}\n\n// RGB to YPbPr, after ITU-R BT.601\nvec3 rgb_ypbpr_bt601 (vec3 rgb) {\n    return rgb_ypbpr(rgb, vec2(0.114, 0.299));\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/iResolution.xy;\n\n    vec2 samplesize = vec2(LUMA_SAMPLE_SIZE,LUMA_SAMPLE_SIZE);\n    vec2 offset = samplesize*0.5/iResolution.xy;\n    vec2 m = mod(uv,samplesize/iResolution.xy);\t\n    float luma = rgb_ypbpr_bt601(texture(iChannel0,uv-m+offset).rgb).x;\n    \n    samplesize = vec2(PBPR_SAMPLE_SIZE,PBPR_SAMPLE_SIZE);\n    offset = samplesize*0.5/iResolution.xy;\n    m = mod(uv,samplesize/iResolution.xy);\n    vec2 pbpr = rgb_ypbpr_bt601(texture(iChannel0,uv-m+offset).rgb).gb;\n    \n    vec3 color = ypbpr_rgb_bt601(vec3(luma,pbpr.x,pbpr.y));\n\tfragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}