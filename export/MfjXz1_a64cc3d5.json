{"ver":"0.1","info":{"id":"MfjXz1","date":"1706055717","viewed":88,"name":"Millipede WIP","username":"tekano","description":"trying to copy some cool things I seen on Linkdin, this is WIP stage 1. took a while to get to here for sure","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["nature","trigonometry","legsreproduction"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// repoduction attempt\n// this amazing piece of art / code is my inspiration!  https://www.instagram.com/p/C0_ZpM6vQmU\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n    // Parameters\n    int LegAmounts = 33;\n    float spineWidth = 0.0012;\n    float rootRadius = 0.0033;\n    float minJointLength = 0.01; // Minimum length from root to joint\n    float maxJointLength = 0.03; // Maximum length from root to joint\n    float minTipLength = 0.01; // Minimum length from joint to tip\n    float maxTipLength = 0.02; // Maximum length from joint to tip\n    float legWidth = 0.002;\n    float maxJointAngle = radians(28.0);\n    float maxTipAngle = radians(-18.0);\n    float tipCircleRadius = 0.0033; // Radius of the circle at the tip\n    float waveSpeed = 5.0; // Speed of the wave\n\n    // Time\n    float time = iTime * waveSpeed;\n\n    // Calculate spine start and end relative to screen height\n    float spineHeight = iResolution.y / 4.0;\n    float spineStart = 0.5 - spineHeight / iResolution.y;\n    float spineEnd = 0.5 + spineHeight / iResolution.y;\n\n    // Spine\n    float alpha = 0.0;\n    float distToSpine = abs(uv.x - 0.5);\n    if(distToSpine < spineWidth && uv.y >= spineStart && uv.y <= spineEnd)\n        alpha = 1.0;\n\n    // Legs\n    for (int i = 0; i < LegAmounts; ++i)\n    {\n        float yRoot = spineStart + float(i) * (spineEnd - spineStart) / float(LegAmounts - 1);\n        float legScale = sin(3.14159 * float(i) / float(LegAmounts - 1)); // Scale factor for leg length\n        float jointLength = mix(minJointLength, maxJointLength, legScale);\n        float tipLength = mix(minTipLength, maxTipLength, legScale);\n\n        float distToRoot = distance(uv, vec2(0.5, yRoot));\n        if(distToRoot < rootRadius)\n            alpha = 1.0;\n\n        for (int side = -1; side <= 1; side += 2)\n        {\n            float phase = time + float(i) * 0.05 * float(side);\n            float jointAngle = sin(phase) * maxJointAngle;\n            float tipAngle = sin(phase + 3.14 / 2.0) * maxTipAngle;\n\n            vec2 jointPos = vec2(0.5, yRoot) + jointLength * vec2(cos(jointAngle) * float(side), sin(jointAngle));\n            vec2 tipPos = jointPos + tipLength * vec2(cos(tipAngle) * float(side), sin(tipAngle));\n\n            // Draw the joint line\n            vec2 jointLine = jointPos - vec2(0.5, yRoot);\n            float jointProj = dot(uv - vec2(0.5, yRoot), jointLine) / dot(jointLine, jointLine);\n            jointProj = clamp(jointProj, 0.0, 1.0);\n            vec2 jointClosest = vec2(0.5, yRoot) + jointProj * jointLine;\n            if(length(uv - jointClosest) < legWidth) alpha = 1.0;\n\n            // Draw the tip line\n            vec2 tipLine = tipPos - jointPos;\n            float tipProj = dot(uv - jointPos, tipLine) / dot(tipLine, tipLine);\n            tipProj = clamp(tipProj, 0.0, 1.0);\n            vec2 tipClosest = jointPos + tipProj * tipLine;\n            if(length(uv - tipClosest) < legWidth) alpha = 1.0;\n\n            // Draw the circle at the tip\n            if(distance(uv, tipPos) < tipCircleRadius) alpha = 1.0;\n        }\n    }\n\n    fragColor = vec4(vec3(alpha), 1.0);\n}\n","name":"Image","description":"","type":"image"}]}