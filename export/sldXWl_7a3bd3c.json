{"ver":"0.1","info":{"id":"sldXWl","date":"1640012640","viewed":339,"name":"Biarc SDF","username":"TheTurk","description":"Distance function for a biarc, a smooth curve that is formed by two circular arcs. Biarcs can be used as an alternative to Bezier curves. Unlike the distance field for a Bezier curve, the distance field for a Biarc is quite simple to compute.","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["distancefield","sdf","bezier","beziercurve","spline","distance","curve","arc","biarc"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float arc(vec2 position, vec2 start, vec2 startTangent, vec2 end) {\n    vec2 midpoint = (start + end) * 0.5;\n    vec2 bisector = start - end;\n    bisector = vec2(-bisector.y, bisector.x);\n    float t = dot(start - midpoint, startTangent) / dot(bisector, startTangent);\n    vec2 center = midpoint + bisector * t;\n    position -= center;\n    vec2 a = start - center;\n    vec2 b = end - center;\n    bool m = a.x * b.y < a.y * b.x;    \n    bool s1 = position.x * a.y < position.y * a.x;\n    bool s2 = position.x * b.y < position.y * b.x;    \n    if (s1 != m && s2 == m) {\n       float radius = length(start - center);\n       return length(position) - radius;\n    }\n    vec2 p1 = position - a;\n    vec2 p2 = position - b;\n    float d = sqrt(min(dot(p1, p1), dot(p2, p2)));\n    float s = max(dot(p1, a), dot(p2, b));\n    return s < 0.0 ? -d : d;\n}\n\nfloat biarc(vec2 position, vec2 point1, vec2 point2, vec2 point3) {\n    vec2 tangent1 = point2 - point1;\n    vec2 tangent2 = point2 - point3;\n    float a = length(point3 - point2);\n    float b = length(point1 - point3);\n    float c = length(point2 - point1);\n    vec2 incenter = (point1 * a + point2 * b + point3 * c) / (a + b + c);\n    float d1 = arc(position, point1, tangent1, incenter);\n    float d2 = arc(position, point3, tangent2, incenter);\n    float d = min(abs(d1), abs(d2));\n    float s = max(d1, d2);\n    return s < 0.0 ? -d : d;\n}\n\nfloat segment(vec2 position, vec2 start, vec2 end) {\n    position = position - start;\n    end = end - start;\n    float t = min(max(dot(position, end) / dot(end, end), 0.0), 1.0);\n    return length(position - end * t);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 position = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n\n    vec2 point1 = vec2(1.3, 0.9) * cos((iTime + 63.0) * 0.5 + vec2(0.0, 5.0));\n    vec2 point2 = vec2(1.3, 0.9) * cos((iTime + 63.0) * 0.6 + vec2(3.0, 4.0));\n    vec2 point3 = vec2(1.3, 0.9) * cos((iTime + 63.0) * 0.7 + vec2(2.0, 0.0));\n    float d = biarc(position, point1, point2, point3);\n    \n    // same colorization that Inigo Quilez uses in his shaders\n    vec3 color = vec3(1.0) - sign(d) * vec3(0.1, 0.4, 0.7);\n    color *= 1.0 - exp(-4.0 * abs(d));\n\tcolor *= 0.8 + 0.2 * cos(120.0 * d);\n    color = mix(color, vec3(1.0), 1.0 - smoothstep(0.0, 3.0, (abs(d) - 0.003) * iResolution.y));\n    float d1 = min(segment(position, point1, point2), segment(position, point3, point2)) - (1.0 / iResolution.y);\n    float d2 = length(position - point1) - (12.0 / iResolution.y);\n    float d3 = length(position - point3) - (12.0 / iResolution.y);\n    float d4 = length(position - point2) - (12.0 / iResolution.y);\n    color = mix(color, vec3(1.0, 0.0, 0.0), 1.0 - smoothstep(0.0, 3.0, d1 * iResolution.y));\n    color = mix(color, vec3(1.0, 0.0, 0.0), 1.0 - smoothstep(0.0, 3.0, d2 * iResolution.y));\n    color = mix(color, vec3(1.0, 0.0, 0.0), 1.0 - smoothstep(0.0, 3.0, d3 * iResolution.y));\n    color = mix(color, vec3(1.0, 0.0, 0.0), 1.0 - smoothstep(0.0, 3.0, d4 * iResolution.y));\n    if (iMouse.z > 0.0) {\n        vec2 mousePosition = (2.0 * iMouse.xy - iResolution.xy) / iResolution.y;\n        float d = biarc(mousePosition, point1, point2, point3);\n        color = mix(color, vec3(1.0, 1.0, 0.0), 1.0 - smoothstep(0.0, 3.0, abs(length(position - mousePosition) - abs(d)) * iResolution.y - 1.0));\n    }\n    fragColor = vec4(color, 1.0);    \n}","name":"Image","description":"","type":"image"}]}