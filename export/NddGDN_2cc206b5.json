{"ver":"0.1","info":{"id":"NddGDN","date":"1629877521","viewed":73,"name":"Bézier Curve – Algebraic Formula","username":"wylm","description":"quadratic Bézier curve from three points.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["beziercurve"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define E 2.718281828459\n\nfloat t(){\n    return pow(E,-1. * pow(2. * cos(iTime),2.));\n}\n\nfloat line(vec2 uv, vec2 p1, vec2 p2){\n    float k = (p1.y-p2.y)/(p1.x-p2.x);\n    float b = p1.y - k * p1.x;\n    return k*uv.x + b - uv.y;\n}\n\nvec2 line_pos(float t, vec2 b0, vec2 b1){\n    return (1.-t)*b0 + t*b1;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    uv.x *= iResolution.x/iResolution.y;\n\n    // Time varying pixel color\n    vec3 col = vec3(0.8);\n    \n    \n    vec2 b0 = vec2(0.25,0.25);\n    vec2 b1 = vec2(1.,0.75);\n    vec2 b2 = vec2(1.5,0.25);\n    \n    float t = t();\n    vec2 b01 = line_pos(t, b0, b1);\n    vec2 b11 = line_pos(t, b1, b2);\n    vec2 b02 = line_pos(t, b01, b11);\n    \n    //draw line\n    float d = abs(line(uv,b0,b1));\n    if(d < 0.005 && uv.x>b0.x && uv.x<b1.x){\n        col *= mix(col, vec3(0.1), smoothstep(-fwidth(d), fwidth(d), d));\n    }\n    \n    d = abs(line(uv,b1,b2));\n    if(d < 0.005 && uv.x>b1.x && uv.x<b2.x){\n        col *= mix(col, vec3(0.1), smoothstep(-fwidth(d), fwidth(d), d));\n    }\n    \n    // draw point\n    float ps = 0.02;\n    float r = length(uv-b0);\n    if(r<ps){\n        col *= mix(col, vec3(1.,0.1,0.1), smoothstep(-fwidth(r), fwidth(r), r));\n    }\n    \n    r = length(uv-b1);\n    if(r<ps){\n        col *= mix(col, vec3(0.1,1.,0.1), smoothstep(-fwidth(r), fwidth(r), r));\n    }\n    \n    r = length(uv-b2);\n    if(r<ps){\n        col *= mix(col, vec3(0.1,0.1,1.), smoothstep(-fwidth(r), fwidth(r), r));\n    }\n    \n    r = length(uv-b01);\n    if(r<ps){\n        col *= mix(col, vec3(1.,1.,0.1), smoothstep(-fwidth(r), fwidth(r), r));\n    }\n    \n    r = length(uv-b11);\n    if(r<ps){\n        col *= mix(col, vec3(0.1,1.,1.), smoothstep(-fwidth(r), fwidth(r), r));\n    }\n    \n    r = length(uv-b02);\n    if(r<ps){\n        col *= mix(col, vec3(1.,0.1,1.), smoothstep(-fwidth(r), fwidth(r), r));\n    }\n    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}