{"ver":"0.1","info":{"id":"3ldczM","date":"1608689177","viewed":127,"name":"Xmas Koch Curve Aurora","username":"mherreshoff","description":"An Xmas themed Koch-curve like morphing fractal.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["curve","aurora","xmas","koch","morphing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926535\n#define CS(a) vec2(cos(a), sin(a))\n#define hue(v) ( .6 + .6 * cos( 2.*PI*(v) + vec4(0,-2.*PI/3.,2.*PI/3.,0)))\nvec2 cmul(vec2 a, vec2 b) {\n    return mat2(a,-a.y,a.x)*b;\n}\nfloat smoothHill(float h, float b, float x) {\n    return smoothstep(h-b,h,x)-smoothstep(h,h+b,x);\n}\nfloat fractHill(float h, float b, float x) {\n    return smoothHill(.5, b, fract(x-h+.5));\n}\n\nvec2[] targetPoints = vec2[](vec2(-1.5, 0), vec2(-.5,sqrt(3.)/2.), vec2(.5, sqrt(3.)/2.), vec2(1.5, 0.));\nconst float[] turn = float[](0.,radians(-60.), radians(60.), 0.);\nvec2 target (vec2 z) {\n    vec2 weightedSum=vec2(0); float weight=0.;\n    for (int i = 0; i < targetPoints.length(); i++) {\n        vec2 d = z-targetPoints[i];\n        float L = length(d), w = pow(L, -10.);\n        vec2 targ = 3.*cmul(CS(turn[i]),d);\n        weight += w;\n        weightedSum += w*targ;\n    }\n    return weightedSum/weight;\n}\n\nvec4[4] ribbonColors = vec4[](hue(.0), vec4(192./255.), hue(.35), vec4(255, 215, 0, 0)/255.);\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord ){\n    vec2 R = iResolution.xy, pw = 1./R, uv = fragCoord*pw;\n    \n    float cycleT=30., t = fract(iTime/cycleT), maxIt = 7.,\n          iterations = maxIt*smoothHill(.5,.5,t);\n\n    vec2 p = ((fragCoord-.5*R)/R.y)*6. + vec2(0.,2.);\n    for (float i = 0.; i < 10.; i++){\n        if (i < floor(iterations)) p = target(p);\n    }\n    p = mix(p, target(p), fract(iterations));\n    \n    float mag = length(p), a = atan(p.y,p.x)/(2.*PI), escape=log(mag)/max(1.,iterations);\n    vec4 col = mix(hue(.2)*.35, vec4(0.), smoothstep(0., log(2.4), escape));\n    float spinT = 4.*t, ribbon = 0.04;\n    for (int i = 0; i < ribbonColors.length(); i++) {\n        float f = float(i)/float(ribbonColors.length());\n        col = mix(col, ribbonColors[i], fractHill(spinT+f,ribbon, 2.*a));\n    }\n\tfragColor = col;\n}","name":"Image","description":"","type":"image"}]}