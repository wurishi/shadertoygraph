{"ver":"0.1","info":{"id":"lXySzy","date":"1720147040","viewed":40,"name":"Smooth Multiple Lines","username":"jaunewhale","description":"New multiple lines","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["lines"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"    #define ENABLE_SMOOTH 1\n#define REVERSE_DIRECTION 1\n    #define PATTERN_COUNT 30\n\nvec2 MapUvRatio(vec2 uv){\n    // map uv to x:-1~1, y:-ratio~ratio\n    vec2 screenRatio = vec2(1.0, iResolution.y / iResolution.x);\n    return (uv * 2.0 - 1.0) * screenRatio;\n}\n\nfloat StraightLine(vec2 uv, vec2 dir){\n    return dot(uv, normalize(dir));\n}\n\nfloat Circle(vec2 uv, vec2 center){\n    uv = MapUvRatio(uv);\n    center = MapUvRatio(center);\n    return length(uv - center)/ length(vec2(1.0));\n}\n\nfloat Square(vec2 uv, vec2 center, float angle){\n    uv = MapUvRatio(uv);\n    center = MapUvRatio(center);\n    \n    vec2 sideDirX = vec2(cos(angle), sin(angle));\n    vec2 sideDirY = vec2(-sin(angle), cos(angle));\n    vec2 baseDirX = normalize(sideDirX - sideDirY);\n    vec2 baseDirY = normalize(sideDirX + sideDirY);\n    vec2 dir = uv - center;\n    vec2 baseDot = vec2(dot(baseDirX, dir), dot(baseDirY, dir));\n    // Positive for 1,3 Quadrant, Negative for 2, 4 Quadrant\n    // map positive to 1, negative to 0\n    float uvSign = sign(baseDot.x * baseDot.y) * 0.5 + 0.5;\n    \n    vec2 signDir = sign(baseDot.x) * uvSign * sideDirX + \n                   sign(baseDot.y) * (1.0 - uvSign) * sideDirY;\n    return dot(dir, signDir);\n}\n\nfloat Rectangle(vec2 uv, vec2 center, float ratio, float angle){\n    uv = MapUvRatio(uv);\n    center = MapUvRatio(center);\n    \n    float ratioX = mix(ratio, 1.0, step(1.0, ratio));\n    float ratioY = mix(1.0, 1.0 / ratio, step(1.0, ratio));\n    vec2 sideDirX = vec2(ratioX * cos(angle), ratioY * sin(angle));\n    vec2 sideDirY = vec2(ratioX * -sin(angle), ratioY * cos(angle));\n    vec2 baseDirX = normalize(sideDirX - sideDirY);\n    vec2 baseDirY = normalize(sideDirX + sideDirY);\n    vec2 dir = uv - center;\n    vec2 baseDot = vec2(dot(baseDirX, dir), dot(baseDirY, dir));\n    // Positive for 1,3 Quadrant, Negative for 2, 4 Quadrant\n    // map positive to 1, negative to 0\n    float uvSign = sign(baseDot.x * baseDot.y) * 0.5 + 0.5;\n    \n    vec2 signDir = sign(baseDot.x) * uvSign * sideDirX + \n                   sign(baseDot.y) * (1.0 - uvSign) * sideDirY;\n    return dot(dir, signDir);\n}\n\nfloat GetCurrentT(vec2 uv){\n    const float timeScale = 0.1;\n    float t = 0.0;\n    \n    //t = StraightLine(uv, vec2(sin(iTime), cos(iTime)));\n    //t = Circle(uv, vec2(0.2, 0.5));\n    //t = Square(uv, vec2(0.6, 0.3), iTime * timeScale);\n    t = Rectangle(uv, vec2(0.5, 0.5), iResolution.y / iResolution.x, 0.0);//iTime * timeScale);\n\n#if REVERSE_DIRECTION\n    t = 1.0 - t;\n#endif\n    float currentT = fract(t + iTime * timeScale);\n    return currentT;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    float minUnitSize = float(PATTERN_COUNT) / iResolution.x;\n    const float pixelSize = 0.05;\n    \n    float realUnitSize = max(minUnitSize, pixelSize);\n    float currentT = GetCurrentT(uv);\n    \n    float t =  clamp(fract(currentT * float(PATTERN_COUNT)), 0.0, 1.0);\n    float c = step(realUnitSize, abs(t - 0.5));\n    \n#if ENABLE_SMOOTH\n    const float expandUnitSize = 0.001;\n    float realExpandWidth = max(minUnitSize, expandUnitSize) + realUnitSize;\n    float additionalRatio = min(1.0, abs(t - 0.5) / realExpandWidth);\n    float c2 = smoothstep(0.0, 1.0, additionalRatio);\n    c = min(c, c2);\n#endif\n\n    fragColor = vec4(c, c, c, 1.0);\n}","name":"Image","description":"","type":"image"}]}