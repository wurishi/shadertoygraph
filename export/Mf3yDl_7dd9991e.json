{"ver":"0.1","info":{"id":"Mf3yDl","date":"1731330411","viewed":8,"name":"hwww123","username":"garipomageka","description":"q","likes":0,"published":1,"flags":48,"usePreview":0,"tags":["q"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float Circle(vec2 uv, float r, vec2 offset) {\n    float x = uv.x - offset.x;\n    float y = uv.y - offset.y + 0.35;\n\n    float d = length(vec2(x, y)) - r;\n\n    return step(0.0, -d);\n}\n\nfloat SquareWithTexture(vec2 uv, vec2 size, vec2 offset, float angle) {\n    uv -= offset;\n\n    mat2 rotation = mat2(cos(angle), sin(angle),\n                         -sin(angle),  cos(angle));\n\n    uv = rotation * uv;\n\n    vec2 rectSize = size * 0.5;\n    return step(0.0, 1.0 - max(abs(uv.x) / rectSize.x, abs(uv.y) / rectSize.y));\n}\n\nvec3 man(vec2 uv) {\n    vec3 col = vec3(0.8, 1.0, 0.0);\n\n    vec2 offset = texelFetch(iChannel0, ivec2(0, 0), 0).xy;\n\n    float crcl = Circle(uv, 0.1, offset);\n\n    vec2 mvpt = texelFetch(iChannel1, ivec2(0, 0), 0).xy;\n\n    float angle = iTime * 10.0; \n\n    int numSquares = 10;\n    float squareWidth = 1.0 / float(numSquares);\n\n    float spacingMultiplier = 1.5;\n\n    for (int i = 0; i < numSquares; i++) {\n        float xOffset = (float(i) * spacingMultiplier) * squareWidth - (squareWidth * float(numSquares) * spacingMultiplier) * 0.5; // Центрируем квадраты\n        float square = SquareWithTexture(uv, vec2(0.1, 0.1), mvpt + vec2(xOffset, 0.0), angle);\n        col = mix(col, vec3(0, 0, 1.0), square);\n    }\n\n    vec2 texCoord = uv * 2.0 + 0.5;\n\n    vec3 textureColor = texture(iChannel2, texCoord).rgb;\n\n    col = mix(col, textureColor, crcl);\n\n    return col;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy; \n    uv -= 0.5; \n    uv.x *= iResolution.x / iResolution.y; \n\n    vec3 col = man(uv);\n\n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const int KEY_LEFT  = 37;\nconst int KEY_RIGHT = 39;\n \nvec2 handleKeyboard(vec2 offset) {\n    float velocity = 1. / 50.; \n \n    vec2 left = texelFetch(iChannel1, ivec2(KEY_LEFT, 0), 0).x * vec2(-1, 0);\n    vec2 right = texelFetch(iChannel1, ivec2(KEY_RIGHT, 0), 0).x * vec2(1, 0);\n \n    offset += (left + right) * velocity;\n \n    return offset;\n}\n \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 offset = texelFetch( iChannel0, ivec2(0, 0), 0).xy;\n    offset = handleKeyboard(offset);\n \n \n    fragColor = vec4(offset, 0, 0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"vec2 movePlatform(vec2 mvpt)\n{\n    float velocity = 1. / 75.;\n \n    vec2 down = 1. * vec2(0, -1);\n \n    mvpt += down * velocity;\n \n \n    if (mvpt.y <= -1.) {\n        mvpt.y = 0.5; \n    }\n \n    return mvpt;\n}\n \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 mvpt = texelFetch( iChannel0, ivec2(0, 0), 0).xy;\n    mvpt = movePlatform(mvpt);\n \n    fragColor = vec4(mvpt, 0, 0);\n}","name":"Buffer B","description":"","type":"buffer"}]}