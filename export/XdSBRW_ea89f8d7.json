{"ver":"0.1","info":{"id":"XdSBRW","date":"1499606956","viewed":473,"name":"Transition effect","username":"PrzemyslawZaworski","description":"Transition between two raymarching scenes in multi-pass.","likes":6,"published":1,"flags":32,"usePreview":0,"tags":["raymarching","transition"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//reference: https://iquilezles.org/articles/distfunctions\nmat3 rotationY( float y) \n{\n\treturn mat3\n\t(\n\t\tcos(y),0.0,-sin(y),\n\t\t0.0,1.0,0.0,\n\t\tsin(y),0.0,cos(y)\n\t);\n}\n\t\t\t\nfloat cuboid (vec3 p,vec3 c,vec3 s)\n{\n\tvec3 d = abs(p-c)-s;\n\treturn max(max(d.x,d.y),d.z);\n}\n\t\t\t\nfloat substraction( float d1, float d2 )\n{\n\treturn max(-d1,d2);\n}\n\t\t\t\nfloat map (vec3 p)\n{\n\tp=rotationY(iTime)*p;\n\treturn cuboid(p,vec3(0.0,0.0,0.0),vec3(2.0,2.0,2.0));\n}\n\t\t\t\nvec3 set_normal (vec3 p)\n{\n\tvec3 x = vec3 (0.01,0.00,0.00);\n\tvec3 y = vec3 (0.00,0.01,0.00);\n\tvec3 z = vec3 (0.00,0.00,0.01);\n\treturn normalize(vec3(map(p+x)-map(p-x),map(p+y)-map(p-y),map(p+z)-map(p-z))); \n}\n\t\t\t\nvec3 lighting (vec3 p)\n{\n\tvec3 AmbientLight = vec3 (0.1,0.1,0.1);\n\tvec3 LightDirection = normalize(vec3(50.0,10.0,-30.0));\n\tvec3 LightColor = vec3(1.0,1.0,0.0);\n\tvec3 NormalDirection = set_normal(p);\n\treturn (max(dot(LightDirection, NormalDirection),0.0) * LightColor + AmbientLight);\n}\t\t\t\n\t\t\t\nvec4 raymarch (vec3 ro, vec3 rd)\n{\n\tfor (int i=0; i<128; i++)\n\t{\n\t\tfloat t = map(ro);\n\t\tif (distance(ro,t*rd)>250.0) break;\n\t\tif (t < 0.001) return vec4 (lighting(ro),1.0);\n\t\tro+=t*rd;\n\t}\n\treturn vec4(0.0,0.0,0.5,0.0);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tvec2 pixel = (-1.0*iResolution.xy + 2.0*fragCoord.xy)/iResolution.y;\n\tvec3 ro = vec3(0.0, 0.0, -10.0);\n\tvec3 rd = normalize(vec3(pixel,2.0));   \n\tfloat a = mod(floor(iTime),20.0);\n\tfloat b = mod(iTime,20.0);\t \n\tfloat n = mix (1.0-((b-10.0)*0.2),0.0,step(15.0,a));\n\tn = mix(1.0,n,step(10.0,a));\n\tn = mix(b*0.2,n,step(5.0,a));\t\n\tfloat t = mod(floor(uv.y*10.0),2.0);\n\tfragColor=mix(texture(iChannel0,uv),raymarch(ro,rd),min(max(sign(uv.x-n),0.0)*(1.0-abs(sign(t)))+max(sign(1.0-uv.x - n),0.0)*(1.0-abs(sign(t-1.0))),1.0));\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"mat3 rotationX( float x) \n{\n\treturn mat3\n\t(\n\t\t1.0,0.0,0.0,\n\t\t0.0,cos(x),sin(x),\n\t\t0.0,-sin(x),cos(x)\n\t);\n}\n\t\t\t\nfloat cuboid (vec3 p,vec3 c,vec3 s)\n{\n\tvec3 d = abs(p-c)-s;\n\treturn max(max(d.x,d.y),d.z);\n}\n\t\t\t\nfloat substraction( float d1, float d2 )\n{\n\treturn max(-d1,d2);\n}\t\t\n\t\t\t\nfloat map (vec3 p)\n{\n\tp=rotationX(iTime)*p;\n\tfloat solid= substraction(cuboid(p,vec3(0.0,0.0,0.0),vec3(1.0,1.0,6.0)),cuboid(p,vec3(0.0,0.0,0.0),vec3(2.0,2.0,2.0)));\n\tsolid=substraction(cuboid(p,vec3(0.0,0.0,0.0),vec3(1.0,6.0,1.0)),solid);\n\treturn substraction(cuboid(p,vec3(0.0,0.0,0.0),vec3(6.0,1.0,1.0)),solid);\n}\n\t\t\t\nvec3 set_normal (vec3 p)\n{\n\tvec3 x = vec3 (0.01,0.00,0.00);\n\tvec3 y = vec3 (0.00,0.01,0.00);\n\tvec3 z = vec3 (0.00,0.00,0.01);\n\treturn normalize(vec3(map(p+x)-map(p-x),map(p+y)-map(p-y),map(p+z)-map(p-z))); \n}\n\nvec3 lighting (vec3 p)\n{\n\tvec3 AmbientLight = vec3 (0.1,0.1,0.1);\n\tvec3 LightDirection = normalize(vec3(50.0,10.0,-30.0));\n\tvec3 LightColor = vec3(1.0,1.0,1.0);\n\tvec3 NormalDirection = set_normal(p);\n\treturn (max(dot(LightDirection, NormalDirection),0.0) * LightColor + AmbientLight);\n}\n\nvec4 raymarch (vec3 ro, vec3 rd)\n{\n\tfor (int i=0; i<128; i++)\n\t{\n\t\tfloat t = map(ro);\n\t\tif (distance(ro,t*rd)>250.0) break;\n\t\tif (t < 0.001) return vec4 (lighting(ro),1.0);\n\t\tro+=t*rd;\n\t}\n\treturn vec4(0.0,0.0,0.0,0.0);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 pixel = (-1.0*iResolution.xy + 2.0*fragCoord.xy)/iResolution.y;\n\tvec3 ro = vec3(0.0, 0.0, -10.0);\n\tvec3 rd = normalize(vec3(pixel,2.0));\n\tfragColor=raymarch(ro,rd);\n}","name":"Buf A","description":"","type":"buffer"}]}