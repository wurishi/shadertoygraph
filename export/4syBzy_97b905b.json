{"ver":"0.1","info":{"id":"4syBzy","date":"1529251565","viewed":111,"name":"Budding Circles","username":"rkibria","description":"A fractal-ish sort of thing.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define N (10)\n#define OFFSET (1.0 + SHRINK)\n\nfloat circle(in vec2 uv, in vec2 pos, in float r)\n{\n    float d = length(uv - pos);\n    return smoothstep( 1./iResolution.x, 0., abs( d - r ) ) ;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = ( fragCoord - .5 * iResolution.xy ) / iResolution.x;\n    \n    float t = iTime * 1.25;\n\n    uv.y += 0.05;\n    \n    vec2 pos = vec2(0);\n    float r = 0.1;\n    vec2 m = vec2(1., 0.);\n\n    vec3 centers[N];\n\tfloat c = 0.;\n    \n    float SHRINK = 0.05 + 0.51 * (0.5 + 0.5 * sin(t));\n\n    for( int i = 0; i < N; i++)\n    {\n        c = max( c, circle(uv, pos, r) );\n\n        centers[i] = vec3(pos, r);\n\n        pos += OFFSET * r * m;\n        r *= SHRINK;\n    }\n\n    m = vec2(-m.y, m.x);\n    for( int k = 0; k < N-1; k++)\n    {\n        for( int i = 0; i < N; i++)\n        {\n            vec3 stored = centers[i];\n            vec2 pos = stored.xy;\n            float r = stored.z;\n\n            c = max( c, circle(uv, pos + OFFSET * r * m, r * SHRINK ) );\n            c = max( c, circle(uv, pos - OFFSET * r * m, r * SHRINK ) );\n            c = max( c, circle(uv, pos - OFFSET * r * vec2(-m.y, m.x), r * SHRINK ) );\n\n            pos += OFFSET * r * m;\n            r *= SHRINK;\n            centers[i] = vec3(pos, r);\n        }\n        m = vec2(-m.y, m.x);\n    }\n    fragColor = vec4(sqrt(max(c, 0.))); // Approximate gamma correction.\n}","name":"Image","description":"","type":"image"}]}