{"ver":"0.1","info":{"id":"ts2GDd","date":"1550350670","viewed":208,"name":"Red Eye Tar Monster","username":"bignobody","description":"Experimenting with simple ray tracing and SDF repeat. Thanks to jlfwong and iq for the tutorials!","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["repetition","raytrace"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 49\n#define EPSILON 0.0001\n#define MAX_DIST 128.0\n\nfloat sphereSDF(vec3 p)\n{\n \treturn length(p)-1.0;   \n}\n\nfloat opRep( in vec3 p, in vec3 c)\n{\n    vec3 q = mod(p,c)-0.5*c;\n    return sphereSDF( q );\n}\n\nfloat sceneSDF(vec3 p)\n{\n    return opRep(p, vec3(5.0+clamp(cos(p.z * sin(iTime*0.01)),-1.0,1.0),5.0+clamp(sin(p.z*sin(iTime*0.01)),-1.0,1.0),5.0));\n   \n}\n\nfloat distToSurface( vec3 eye, vec3 dir, float startDist, float endDist )\n{\n\tfloat depth = startDist;\n\tfor (int i = 0; i < MAX_STEPS; i++) \n    {\n    \tfloat dist = sceneSDF(eye + depth * dir);\n    \tif (dist < EPSILON) \n        {\n\t        return depth;\n    \t}\n    \tdepth += dist;\n\n    \tif (depth >= MAX_DIST) \n        {\n        \treturn endDist;\n    \t}\n    }\n    return endDist;\n}\n\nvec3 castRay(float fov, vec2 imgSize, vec2 uv)\n{\n \tvec2 xy = uv - imgSize / 2.0;\n\tfloat z = imgSize.y / tan(radians(fov) / 2.0);\n\treturn normalize(vec3(xy, -z));   \n}\n\nvec3 estimateNormal(vec3 p) \n{\n    return normalize(vec3(\n        sceneSDF(vec3(p.x + EPSILON, p.y, p.z)) - sceneSDF(vec3(p.x - EPSILON, p.y, p.z)),\n        sceneSDF(vec3(p.x, p.y + EPSILON, p.z)) - sceneSDF(vec3(p.x, p.y - EPSILON, p.z)),\n        sceneSDF(vec3(p.x, p.y, p.z  + EPSILON)) - sceneSDF(vec3(p.x, p.y, p.z - EPSILON))\n    ));\n}\n\nvec3 phongLight(vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye,\n                          vec3 lightPos, vec3 lightIntensity) \n{\n    vec3 N = estimateNormal(p);\n    vec3 L = normalize(lightPos - p);\n    vec3 V = normalize(eye - p);\n    vec3 R = normalize(reflect(-L, N));\n    \n    float dotLN = dot(L, N);\n    float dotRV = dot(R, V);\n    \n    if (dotLN < 0.0) {\n        // Light not visible from this point on the surface\n        return vec3(0.0, 0.0, 0.0);\n    } \n    \n    if (dotRV < 0.0) {\n        // Light reflection in opposite direction as viewer, apply only diffuse\n        // component\n        return lightIntensity * (k_d * dotLN);\n    }\n    return lightIntensity * (k_d * dotLN + k_s * pow(dotRV, alpha));\n}\n\nvec3 phongIllumination(vec3 k_a, vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye) \n{\n    const vec3 ambientLight = 0.5 * vec3(1.0, 1.0, 1.0);\n    vec3 color = ambientLight * k_a;\n    \n    vec3 light1Pos = vec3(0.0+cos(iTime),0.0+sin(iTime), (75.0 - (iTime * 10.9) - MAX_DIST));\n    vec3 light1Intensity = vec3(0.4, 0.4, 0.4);\n    \n    color += phongLight(k_d, k_s, alpha, p, eye,\n                                  light1Pos,\n                                  light1Intensity);\n    \n    return color;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 ray = castRay(45.0, iResolution.xy, fragCoord);\n    vec3 eye = vec3(0.0+cos(iTime),0.0+sin(iTime),(50.0 - (iTime * 10.9) - MAX_DIST));\n    float d = distToSurface(eye,ray, 0.0,MAX_DIST);\n    \n    if (d > MAX_DIST-EPSILON)\n    {\n     \t// no hit\n        fragColor = vec4(0.0,0.0,0.0,1.0);\n        return;\n    }\n    \n    vec3 p = eye + ray * d;\n    vec3 K_a = vec3(0.2, 0.2, 0.2) /d;\n    vec3 K_d = vec3(0.7, 0.2, 0.2) * length(p);\n    vec3 K_s = vec3(1.0, 1.0, 1.0) - length(p);\n    float shininess = 10.0;\n    \n    vec3 col = phongIllumination(K_a, K_d, K_s, shininess, p, eye);\n    fragColor = vec4(col,1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}