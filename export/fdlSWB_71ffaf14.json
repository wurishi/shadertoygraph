{"ver":"0.1","info":{"id":"fdlSWB","date":"1626505091","viewed":62,"name":"Mandelbrot Party antialiased","username":"adamjmurray","description":"Anti-aliased and slightly modified version of https://www.shadertoy.com/view/Ns23zm","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fractals"],"hasliked":0,"parentid":"Ns23zm","parentname":"Mandelbrot party"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"int quality = 3; // antialiasing: 1=off, 2=on, >2=more anti-aliasing\n\nconst float speed = 0.1;\n\nvec2 rotate(vec2 p, float angle) {\n\treturn vec2(\n\t\tp.x*cos(angle) - p.y*sin(angle), \n\t\tp.x*sin(angle) + p.y*cos(angle)\n\t);\n}\n\nvec3 hsl2rgb(float h, float s, float l) {\n  float c = (1. - abs(2.*l - 1.)) * s;\n  float hp = 6. * mod(h,1.);\n  float x = c * (1. - abs(mod(hp,2.) - 1.));\n\n  vec3 rgb1 = vec3(0,0,0);\n  if (hp <= 1.)      rgb1 = vec3(c,x,0);\n  else if (hp <= 2.) rgb1 = vec3(x,c,0);\n  else if (hp <= 3.) rgb1 = vec3(0,c,x);\n  else if (hp <= 4.) rgb1 = vec3(0,x,c);\n  else if (hp <= 5.) rgb1 = vec3(x,0,c);\n  else if (hp <= 6.) rgb1 = vec3(c,0,x);\n\n  float m = l - c/2.;\n  return vec3(rgb1.r + m, rgb1.g + m, rgb1.b + m);\n}\n\nvec3 draw(vec2 c, float iterations, float hueShift) {\n    vec2 z = vec2(0,0);\n    float i;     \n    for (i=0.; i < iterations && dot(z,z) < 16.; i++) {\n        z = vec2(z.x*z.x - z.y*z.y, 2.*z.x*z.y) + c; // z^2 + c\n    }\n    if (i >= iterations) {\n        return vec3(0,0,0);\n    } else {\n        float hue = (i - log(log(dot(z,z)))) / iterations;\n        hue = mod(hue + hueShift, 1.);\n        return hsl2rgb(hue, 0.7, 0.45);\n    }\n}\n \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    float time = speed*iTime;\n    float zoom = 150.*pow(1.4 - cos(time), 5.);\n    float angle = 10.*sin(time/11.07);\n    float hueShift = time/23.;\n    float iterations = 180. + 100.*sin(2.03*time);\n    vec2 offset = vec2(\n        -0.4822 - sin(time/3.11)/4000., \n        0.6141 + cos(time/1.43)/5500.\n    );\n    \n    vec3 color = vec3(0,0,0);\n    float samples = 0.;\n    float subpixel = 1./float(quality);\n    for (float x=0.; x<1.; x+=subpixel) {\n        for (float y=0.; y<1.; y+=subpixel) {\n            vec2 coord = (2.*(fragCoord + vec2(x,y)) - iResolution.xy)/iResolution.y; // [-1,1] vertically    \n            vec2 c = rotate(coord/zoom, angle) + offset;           \n            color += draw(c, iterations, hueShift);\n            samples++;\n        }\n    }\n    fragColor = vec4(color/samples,1);\n}","name":"Image","description":"","type":"image"}]}