{"ver":"0.1","info":{"id":"XlffWr","date":"1511558499","viewed":490,"name":"mandelzoomquick","username":"t4ce","description":"short implementation of mandelbrot visualization ","likes":3,"published":3,"flags":0,"usePreview":0,"tags":["mandelbrotzoom"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define mul(a, b) vec2(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // zoom\n    float z = 1.0 - (float(iTime) / 10.0);\n    // slightly translate the view\n    float t = -0.05* float(iTime);\n    // map -2 to 1 on X Axis and 1 to -1 on Y Axis to iResolution\n    vec2 coord = vec2(fragCoord.x / iResolution.x * (3.0 * z) - (2.0 * z) + t, fragCoord.y / iResolution.y * (2.0 * z) - (1.0 * z) + t);  \n    // z0 = 0\n    vec2 cm = vec2(0, 0);\n    int j = 0;\n    for(int i = 0; i < 25; i++){\n        j++;\n        // zn = zn-1 + c\n        cm = mul(cm, cm);\n    \tcm = cm + coord;\n        if (dot(cm,cm) > 4.0)\n        \tbreak;\n    }\n    // grayscale\n    fragColor = vec4(j) / 24.0;\n}","name":"Image","description":"","type":"image"}]}