{"ver":"0.1","info":{"id":"3dKyDK","date":"1603786758","viewed":754,"name":"Fast 3D water - 421 Chars","username":"Ric3cir121","description":"Fast 3D water generated with a procedural cosine noise","likes":21,"published":3,"flags":0,"usePreview":0,"tags":["procedural","3d","raytracing","raymarching","noise","waves","wave","sea","fast","water","light","ocean","blue","blue","realistic","chars"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define r(A)     mat2( C=cos(A), S=sin(A), -S, C )           //\n//#define r(a)   mat2( cos( a + vec4(0,11,33,0) ) )          // bug: https://www.shadertoy.com/view/ttGyzh\n#define w(c,a) ( R.xy = r(a) * c.xz + iTime,  abs( cos( R.y + cos( R.x ) ) ))  //\n#define W(c)   ( w(c,9.) + w(c,7.) + w(c,h) )                //\n#define D(c)     W(h*c) + W(c)*.1 + 9. + c.y\n\nvoid mainImage( out vec4 o, vec2 u ) {\n    float h = .3, f = h, C,S; \n    vec3 m = u.xyy/iResolution.x - .5, c=m-m, R;\n    m.z -= .4; m.xz *= r(iTime*h);\n    \n    for( m /= length(m) ; \n         f++ < 30. && (C=D((c+h))) > .1 ; \n         c += m * C );\n    \n    o = min((D(c)+h)*9., 0.) * min(m.x+.6, 0.) \n      + .1* vec4( C= c.y+12. , 2.+C , 4 , 1 )\n      + f/50. - length(c)/7e2 ;\n}","name":"Image","description":"","type":"image"}]}