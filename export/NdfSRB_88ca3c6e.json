{"ver":"0.1","info":{"id":"NdfSRB","date":"1618927166","viewed":45,"name":"dz","username":"obuhh","description":"dz","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["oip314"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv) / float(iFrame + 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3Rr","filepath":"/media/a/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin","previewfilepath":"/media/ap/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin","type":"volume","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float INF = 1e10;\nconst float sq1 = 1.0;\nconst float sq2 = 0.7071067811865;\nconst vec3 CAMERA_POS = vec3(-2, 1.4, 5.2);\n\nconst vec3 LIGHT1_POS = vec3(-1.5, 1, -1.5);\nconst float LIGHT1_RADIUS = 0.5;\nconst vec3 LIGHT1_COLOR = vec3(0.992, 0.004, 0.6);\n\n\nconst vec3 LIGHT2_POS = vec3(3, 0.5, -1);\nconst float LIGHT2_RADIUS = 0.25;\nconst vec3 LIGHT2_COLOR = vec3(0.1, 1, 0.2);\n\nvec3 tr[24] = vec3[](vec3(sq2, 0, -sq2), vec3(0, 1, 0), vec3(-sq2, 0, -sq2), \n                        vec3(-sq2, 0, -sq2), vec3(0, 1, 0), vec3(-sq2, 0, sq2),\n                        vec3(-sq2, 0, sq2), vec3(0, 1, 0), vec3(sq2, 0, sq2),\n                        vec3(sq2, 0, sq2), vec3(0, 1, 0), vec3(sq2, 0, -sq2),\n                        vec3(sq2, 0, -sq2), vec3(0, -1, 0), vec3(-sq2, 0, -sq2),\n                        vec3(-sq2, 0, -sq2), vec3(0, -1, 0), vec3(-sq2, 0, sq2),\n                        vec3(-sq2, 0, sq2), vec3(0, -1, 0), vec3(sq2, 0, sq2),\n                        vec3(sq2, 0, sq2), vec3(0, -1, 0), vec3(sq2, 0, -sq2));\n\nvec3 randDir;\n\n// (CAMERA_POS + t * viewVec).y == -1\n// t = (-1 - CAMERA_POS.y) / viewVec.y;\nfloat tracePlane(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.2 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    \n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) >= 200.0) {\n        return INF;\n    }\n    normal = vec3(0, 1, 0);\n    return t;\n}\n\nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal) {\n    // dot(pos + t * dir, pos + t * dir) == r * r;\n    // dot(pos, pos) + 2 * t * dot(pos, dir) + t * t * dot(dir, dir) == r * r\n    // t * t + 2.0 * t * dot(pos, dir) + dot(pos, pos) - r * r == 0\n    float a = dot(dir, dir);\n    float b = dot(pos, dir);\n    float c = dot(pos, pos) - r * r;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    float t = -b - sqrt(D);\n    if (t > 0.0) {\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    t = -b + sqrt(D);\n    if (t < 0.0) {\n        return INF;\n    }\n    normal = normalize(pos + t * dir);\n    return t;\n}\n\nfloat traceCylinder(vec3 pos, vec3 dir, float h, out vec3 normal) {\n    float t = (h - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) < 0.75) {\n        normal = vec3(0, 1, 0);\n        return t;\n    }\n    \n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - 0.75;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    t = (-b - sqrt(D)) / a;\n    if (t > 0.0) {\n        worldPos = t * dir + pos;\n        if (worldPos.y <= h) {\n            normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n            return t;\n        }\n    }\n    t = (-b + sqrt(D)) / a;\n    if (t < 0.0) {\n        return INF;\n    }\n    worldPos = t * dir + pos;\n    if (worldPos.y <= h) {\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    }\n    return INF;\n}\n\nfloat traceTriangle(vec3 orig, vec3 dir, vec3 v0, vec3 v1, vec3 v2, out vec3 normal) {\n    vec3 e1 = v1 - v0;\n    vec3 e2 = v2 - v0;\n    \n    vec3 pvec = cross(dir, e2);\n    float det = dot(e1, pvec);\n\n    if (det == 0.0) {\n        return INF;\n    }\n\n    float inv_det = 1.0 / det;\n    vec3 tvec = orig - v0;\n    float u = dot(tvec, pvec) * inv_det;\n    if (u < 0.0 || u > 1.0) {\n        return INF;\n    }\n\n    vec3 qvec = cross(tvec, e1);\n    float v = dot(dir, qvec) * inv_det;\n    if (v < 0.0 || u + v > 1.0) {\n        return INF;\n    }\n    \n    float t = dot(e2, qvec) * inv_det;\n    if (t > 0.0) {\n        normal = -normalize(cross(-e1, -e2));\n        return t;\n    }\n    return INF;\n}\n\nbool isOccluded(vec3 pos, vec3 target) {\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n    for (int j = 1; j < 8; j++) {\n        vec3 sphNorm;\n        float sphT = traceTriangle(pos, dir, tr[j*3], tr[j*3+1], tr[j*3 + 2], sphNorm);\n        if (sphT < dist) {\n            return true;\n        }\n    }\n    vec3 cylNorm;\n    float cylT = traceCylinder(pos, dir, -1.0, cylNorm);\n    return (cylT < dist);\n}\n\nvec3 computeLight(vec3 pos, vec3 color, vec3 normal) {\n    vec3 toLight1 = LIGHT1_POS - pos;\n    float distSq1 = dot(toLight1, toLight1);\n    float att1 = isOccluded(pos, LIGHT1_POS + randDir * LIGHT1_RADIUS) ? 0.0 : 8.0f / distSq1;\n    //float att1 = 8.0f / distSq1;\n    vec3 toLight2 = LIGHT2_POS - pos;\n    float distSq2 = dot(toLight2, toLight2);\n    float att2 = isOccluded(pos, LIGHT2_POS + randDir * LIGHT2_RADIUS) ? 0.0 : 5.0f / distSq2;\n    //float att2 = 5.0f / distSq2;\n    return color * (\n        max(0.0, dot(normal, normalize(toLight1))) * att1 * LIGHT1_COLOR\n        + max(0.0, dot(normal, normalize(toLight2))) * att2 * LIGHT2_COLOR\n        + texture(iChannel1, normal).rgb * 0.4\n    );\n}\n\nvec3 refraction(vec3 v, vec3 normal, float n1, float n2, out bool rl) {\n    rl = false;\n    if (dot(v, normal) < 0.0) {\n        normal = -normal;\n    }\n    float cosA = dot(v, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3  tang = normalize(v - cosA * normal);\n    float sinB = (sinA * n1) / n2;\n    if (sinB >= 1.0) {\n        rl = true;\n        return reflect(v, normal);\n    } else {\n        float cosB = sqrt(1.0 - sinB * sinB);\n        return sinB * tang + cosB * normal;\n    }\n}\n\nfloat fogSdf(vec3 pos)\n{\n    return length(pos) - 0.7;\n}\n\nfloat BeerLambert(float absorptionCoefficient, float distanceTraveled)\n{\n    return exp(-absorptionCoefficient * distanceTraveled);\n}\n\nvec4 sampleFog(vec3 pos, vec3 dir, vec3 rand)\n{\n    float t = fogSdf(pos);\n    const float MARCH_SIZE = 0.01;\n    float opacity = 1.0;\n    float absorption = 10.0;\n    float totalAbs = 0.0;\n    for (int i = 0; i < 50; ++i) {\n        vec3 curPos = pos + (float(i) * MARCH_SIZE + t) * dir;\n        float sdf = fogSdf(curPos);\n        if (sdf < 0.0) {\n            float prevOpacity = opacity;\n            opacity *= BeerLambert(absorption * (\n            texture(iChannel3, curPos * 0.2).x\n            + texture(iChannel3, curPos * 0.4).x\n            + texture(iChannel3, curPos * 0.8).x\n            + texture(iChannel3, curPos * 1.6).x\n            ) * 0.25 * abs(sdf), MARCH_SIZE);\n            float absorptionLastStep = prevOpacity - opacity;\n            totalAbs += absorptionLastStep;\n        }\n    }\n    vec3 fogColorAtPoint = texture(iChannel3, rand * 0.27).rgb * 2.0;\n    return vec4(fogColorAtPoint * 3.0 * totalAbs, 1.0 - opacity);\n}\n\nfloat pow2(float x) {\n    return x * x;\n}\n\nfloat rand(float frame)\n{\n    return fract(sin( dot(vec3(frame), vec3(12.9898,78.233,45.5432) )) * 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    randDir = normalize(randVals - 0.5);\n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (randVals.xy - 0.5) * 2.0) / iResolution.x;\n    vec3 front = normalize(-CAMERA_POS);\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = normalize(cross(front, up));\n    up = normalize(cross(right, front));\n    vec3 viewVec = normalize(front + right * uv.x + up * uv.y);\n    \n    const int EMISSION = 0;\n    const int DIFFUSE = 1;\n    const int REFLECTION = 2;\n    const int REFRACTION = 3;\n    \n    vec3 curPos = CAMERA_POS;\n    vec3 curDir = viewVec;\n    const float GLASS_N = 1.52;\n    const float AIR_N = 1.0;\n    float n1 = AIR_N;\n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N + GLASS_N);\n    const float DIAMOND_N = 2.5;\n    float DIAMOND_R = pow2(DIAMOND_N - GLASS_N) / pow2(DIAMOND_N + GLASS_N);\n    bool rlt = false;\n    vec3 colorMult = vec3(1, 1, 1);\n    float mult = 1.0;\n    \n    for (int i = 0; i < 10; ++i) {\n        float t = INF;\n        int materialType;\n        vec3 color;\n        vec3 normal;\n        float nEnter = AIR_N;\n        \n        vec3 planeNorm;\n        float planeT = tracePlane(curPos, curDir, planeNorm);\n        if (planeT < t) {\n            t = planeT;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel0, worldPos.xz * 0.1).rgb;\n            normal = planeNorm;\n            if (randVals.x < 0.3) {\n                materialType = REFLECTION;\n            } else {\n                materialType = DIFFUSE;\n            }\n        }\n        vec3 l1Norm;\n        float light1T = traceSphere(curPos - LIGHT1_POS, curDir, LIGHT1_RADIUS, l1Norm);\n        if (light1T < t) {\n            t = light1T;\n            materialType = EMISSION;\n            color = LIGHT1_COLOR;\n            normal = l1Norm;\n        }\n        vec3 l2Norm;\n        float light2T = traceSphere(curPos - LIGHT2_POS, curDir, LIGHT2_RADIUS, l2Norm);\n        if (light2T < t) {\n            t = light2T;\n            materialType = EMISSION;\n            color = LIGHT2_COLOR;\n            normal = l2Norm;\n        }\n        vec3 cylNorm;\n        float cylT = traceCylinder(curPos, curDir, -1.0, cylNorm);\n        if (cylT < t) {\n            t = cylT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel2, worldPos.xz * worldPos.y).rgb;\n            normal = cylNorm;\n        }\n        for (int j = 1; j < 8; j++) {\n            vec3 sphNorm;\n            float sphT = traceTriangle(curPos, curDir, tr[j*3], tr[j*3+1], tr[j*3 + 2], sphNorm);\n            if (sphT < t) {\n                t = sphT;\n                normal = sphNorm;\n                if (randVals.x < GLASS_R * 10.0) {\n                    materialType = REFLECTION;\n                } else {\n                    colorMult *= vec3(1, 1, 1);\n                    materialType = REFRACTION;\n                    if (dot(curDir, normal) > 0.0) {\n                        nEnter = AIR_N;\n                    } else {\n                        nEnter = GLASS_N;\n                    }\n                }\n            }\n        }\n        \n        if (t != INF) {\n            vec3 worldPos = t * curDir + curPos;\n            //fragColor = texture(iChannel0, worldPos.xz);\n            if (materialType == EMISSION) {\n                fragColor.rgb = mult * color * colorMult;\n                //fragColor.rgb = normal;\n                break;\n            } else if (materialType == DIFFUSE) {\n                fragColor.rgb += mult * computeLight(worldPos, color, normal) * colorMult;\n                //fragColor.rgb += mult * computeLight(worldPos, color, normal) * colorMult;//, curDir);\n                break;\n            } else if (materialType == REFLECTION) {\n                //if (dot(curDir, normal) > 0.0) {\n                //fragColor.rgb = vec3(0.1, 0.1, 1);\n                //} else {\n                //fragColor.rgb = vec3(0.1, 1, 0.1);}\n                curDir = reflect(curDir, normal);\n                curPos = worldPos + curDir * 1e-5;\n                //fragColor.rgb = normal;\n            } else if (materialType == REFRACTION) {\n                //if (n1 > nEnter) {\n                //    curDir = refract(curDir, -normal, n1/nEnter);\n                //} else {\n                //    curDir = refract(curDir, normal, n1/nEnter);\n                //}\n            \n                curDir = refraction(curDir, normal, n1, nEnter, rlt);\n                curPos = worldPos + curDir * 1e-5;\n                n1 = nEnter;\n                \n                vec4 fog = sampleFog(curPos, curDir, curPos);\n                fragColor.rgb += fog.rgb * fog.a * mult;\n                mult *= 1.0 - fog.a;\n            }\n        } else {\n            //fragColor += mult * texture(iChannel1, curDir)*0.1;\n            fragColor.rgb = mult * texture(iChannel1, curDir).rgb * colorMult;\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv) + texture(iChannel1, uv);\n}","name":"Buffer B","description":"","type":"buffer"}]}