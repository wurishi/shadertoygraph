{"ver":"0.1","info":{"id":"mdtXR7","date":"1679589892","viewed":68,"name":"mildly interactive newtonfractal","username":"magiromanya","description":"Simple shader rendering the newton's fractal. The user can interact with the mouse in a limited way.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int NROOTS = 3;\nvec2 roots[NROOTS];\nvec3 colors[NROOTS];\n\nint selected_root = 0;\n\nconst int ITERATIONS = 50;\n\nvec2 zmul(vec2 z1, vec2 z2){\n    return vec2(z1.x * z2.x - z1.y * z2.y, z1.x * z2.y + z1.y * z2.x);\n}\n\nvec2 zdiv(vec2 z1, vec2 z2){\n    return vec2(z1.x * z2.x + z1.y * z2.y, z1.y * z2.x - z1.x * z2.y) / (z2.x * z2.x + z2.y * z2.y);\n}\n\nvec2 polynomial(vec2 z){\n    vec2 result = z - roots[0];\n    for (int i=1; i < NROOTS; i++){\n        result = zmul(result, z - roots[i]);\n    }\n    return result;\n}\n\nint closest_root(vec2 z){\n    float MIN_DIST = 100000.0;\n    int index = 0;\n    for (int i = 0; i < NROOTS; i++){\n        vec2 dvec = z - roots[i];\n        float dist = dot(dvec,dvec);\n        if (dist < MIN_DIST){\n            MIN_DIST = dist;\n            index = i;\n        }\n    }\n    selected_root = index;\n    return index;\n}\n\nvec3 choose_color(vec2 z){\n    return colors[closest_root(z)];\n}\n\nvec2 dpolynomial(vec2 z){\n    float dz = 0.01;\n    return (polynomial(z + dz) - polynomial(z)) / dz;\n}\n\nvec2 newton_iteration(vec2 z){\n    vec2 fz = polynomial(z);\n    vec2 dfz = dFdx(fz);\n    dfz = dpolynomial(z);\n    return z - zdiv(fz, dfz);\n}\n\nvec3 paint_roots(vec3 color, vec2 z){\n    for (int i = 0; i < NROOTS; i++){\n        vec2 dvec = z - roots[i];\n        if (dot(dvec,dvec) < 0.0005){\n            return vec3(1.0);\n        }\n    }\n    return color;\n}\n\nvec2 to_screen(vec2 v){\n    return (v-0.5) * 5.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col;\n    roots[0] = vec2(0.0, -1.0);\n    roots[1] = vec2(-1, 1.0);\n    roots[2] = vec2(1.0, 1.0);\n\n    colors[0] = vec3(219.0, 7.0, 61.0) / 256.0;\n    colors[1] = vec3(219.0, 165.0, 7.0) / 256.0;\n    colors[2] = vec3(142.0, 199.0, 210.0) / 256.0;\n    \n    if (iMouse.z > 0.0){\n        vec2 mPos = to_screen(iMouse.xy / iResolution.xy);\n        roots[closest_root(mPos)] = mPos;\n    }\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n   \n    vec2 coord = to_screen(uv);\n    vec2 z = coord;\n    \n    for (int i = 0; i < ITERATIONS; i++){\n        z = newton_iteration(z);\n    }\n   \n\n    if (iMouse.z > 0.0){\n        vec2 mPos = to_screen(iMouse.xy / iResolution.xy);\n        vec2 dvec = coord - mPos;\n        if (dot(dvec,dvec) < 0.001){\n            col = vec3(1);\n        }\n    }\n    col = choose_color(z);\n   \n    col = paint_roots(col, coord);\n   \n    //col = vec3(coord, 1.0);\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}