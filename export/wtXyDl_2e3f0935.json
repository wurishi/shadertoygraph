{"ver":"0.1","info":{"id":"wtXyDl","date":"1593392480","viewed":69,"name":"rocka-v1","username":"jorge2017a1","description":"rocka-v1","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["rock","roca"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//por jorge2017a1-\n\n\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n\n\n\nvec3 light_pos1   ;\nvec3 light_color1 ;\nvec3 light_pos2   ;\nvec3 light_color2 ;\n\n\n    \n    \n//Box function\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return length(max(d,0.0))\n         + min(max(d.x,max(d.y,d.z)),0.0); // remove this line for an only partially signed sdf \n}\n\n\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;\n}\nfloat dot2(vec2 p)\n{\n  \n  return p.x*p.x+p.y*p.y ;\n}  \n\n\n///---------------------------------------\nfloat intersectSDF(float distA, float distB) {\n    return max(distA, distB);\n}\n\nfloat unionSDF(float distA, float distB) \n{\n    return min(distA, distB);\n}\n\nfloat differenceSDF(float distA, float distB) \n{\n    return max(distA, -distB);\n}\n\n\nvec2 opU(vec2 d1, vec2 d2 ) {\n  vec2 resp;\n    if (d1.x < d2.x){ \n        resp = d1;\n    }\n    else\n    {\n        resp = d2;\n    }\n     \n   return resp; \n}\n///------------------------------------\n\n\nvec3 rotate_y(vec3 v, float angle)\n{\n\tfloat ca = cos(angle); float sa = sin(angle);\n\treturn v*mat3(\n\t\tca, 0.0, -sa,\n\t\t0.0, 1.0, 0.0,\n\t\tsa, 0.0, ca);\n}\n\nvec3 rotate_x(vec3 v, float angle)\n{\n\tfloat ca = cos(angle); float sa = sin(angle);\n\treturn v*mat3(\n\t\t1.0, 0.0, 0.0,\n\t\t0.0, ca, -sa,\n\t\t0.0, sa, ca);\n}\n\n\nvec3 rotate_z(vec3 v, float angle)\n{\n\tfloat ca = cos(angle); \n    float sa = sin(angle);\n\treturn v*mat3(\n\t\tca, -sa, 0.0,\n\t\tsa, ca, 0.0,\n\t\t0.0, 0.0, 1.0);\n}\n\n///-----------------------------------------\n\n\nvec3 LightShading(vec3 Normal,vec3 toLight,vec3 toEye,vec3 color)\n{\n    vec3 toReflectedLight=reflect(-toLight, Normal);\n    vec3 diffuse = max(0.,dot(Normal,-toLight))*color;\n    //vec3 specular = pow(max(0.,dot(Normal,normalize(-toLight-V))),100.)*vec3(1.,1.,1.); \n    float specularf=max(dot(toReflectedLight, toEye),0.0);\n    specularf=pow(specularf, 100.0);\n    vec3 specular =specularf*vec3(1.0);\n    \n    return diffuse + specular;\n}\n\n\n\n///-----------------------------------\nvec2 rotate(vec2 v, float a) {\n   return vec2(cos(a)*v.x + sin(a)*v.y, -sin(a)*v.x + cos(a)*v.y);\n}\n//----------------------------------------------------\n\nmat2 rotate(float a) \n{\n\tfloat c = cos(a);\n\tfloat s = sin(a);\n\treturn mat2(c, s, -s, c);\n}\n\n\n//------------------------------\n//https://iquilezles.org/articles/distfunctions\nfloat opSmoothUnion( float d1, float d2, float k ) \n{\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h);\n}\n\nfloat opSmoothSubtraction( float d1, float d2, float k )\n{\n    float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\n    return mix( d2, -d1, h ) + k*h*(1.0-h); \n}\n\nfloat opSmoothIntersection( float d1, float d2, float k ) \n{\n    float h = clamp( 0.5 - 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) + k*h*(1.0-h); \n}\n\n//-------------------------------\n\n///------------------------------\n\nfloat GetDist(vec3 p  ) \n{\t\n\n    float d, dif1, dif2;\n    vec2 res;\n    vec3 pp,p1, p2,p3;\n    \n    p.y=p.y+2.0;\n    pp=p;\n\n    \n    float planeDist1 = p.y+50.5;  //piso inf\n    float planeDist2 = 30.0-p.y;  //piso sup\n    float planeDist3 = p.x+30.0; //pared izq\n    float planeDist4 = 30.0-p.x;  //pared der\n    float planeDist5 = -p.z+40.0;  //pared atras\n    float planeDist6 = p.z+40.0;  //pared atras\n   \n    \n    res = vec2(9999, 0);\n    \n  \n    /*\n    res =opU(res, vec2(planeDist1,1)); //inf\n    res =opU(res, vec2(planeDist2,2)); \n    res =opU(res, vec2(planeDist3,3)); \n    res =opU(res, vec2(planeDist4,4)); \n  \tres =opU(res, vec2(planeDist5,5)); \n    res =opU(res, vec2(planeDist6,6)); \n*/    \n\n    \n    res =opU(res, vec2(planeDist1,100)); //inf\n    res =opU(res, vec2(planeDist2,100)); \n    res =opU(res, vec2(planeDist3,100)); \n    res =opU(res, vec2(planeDist4,100)); \n  \tres =opU(res, vec2(planeDist5,100)); \n    res =opU(res, vec2(planeDist6,100)); \n    \n\n    \n    //vec3 pos=vec3(0.0,-50.0,0.0);\n    vec3 pos=vec3(0.0,5.0,0.0);\n    float tt;\n    tt=iTime*0.5+10.0;\n    pp=p;\n    pp=rotate_y(pp, tt);\n    float tambox=2.0;\n    \n    float sdrA= sdRoundBox(pp-pos, vec3(tambox), 0.3 );\n   \n        \n    float opsu;\n    opsu=sdrA;\n    \n    \n    float t=0.5;\n    \n    pp=pp-pos;\n    for(int i=0; i<3; i++) \n    {\n    \tpp= rotate_y(pp, t);\n    \tpp= rotate_x(pp, t);\n    \tpp= rotate_z(pp, t);\n    \tfloat sdrb1= sdRoundBox(pp, vec3(tambox), 0.3 );\n    \topsu=  opSmoothUnion( opsu, sdrb1, 0.2 ) ;\n        \n\t}    \n    \n    res =opU(res, vec2(opsu,2)); \n    \n    \n    \n    d = res.x;\n    mObj.dist = res.x;\n    mObj.tipo = res.y;\n    \n    return d;\n}\n\n\n\n//---------actualizacion por Shane---28-may-2020    ...gracias\nfloat RayMarch(vec3 ro, vec3 rd) \n{\n\t\n    // The extra distance might force a near-plane hit, so\n    // it's set back to zero.\n    float dO = 0.; \n    //Determines size of shadow\n    for(int i=0; i<MAX_STEPS; i++) \n    {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        \n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n        dO += dS;\n        \n    }\n    \n    return dO;\n}\n\n\n\n\n//---------------------------------------------------\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    //Texture of white and black in image\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\n\n\n\n\nfloat GetLightPar(vec3 p, vec3 plig) {\n    vec3 lightPos = plig;\n    //Determine movement of light ex. shadow and light direction and diffusion\n    //lightPos.xz += vec2(1, 2);\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l), 0., 1.);\n    float d = RayMarch(p+n*SURF_DIST*2., l );\n    if(d<length(lightPos-p)) dif *= .1;\n    \n    return dif;\n}\n\n\nfloat saturate(float f)\n{\n\treturn clamp(f,0.0,1.0);\n}\n\n\n//----------------------------------------------------\n\n// Single rotation function - return matrix\nmat2 r2(float a){ \n  float c = cos(a); float s = sin(a); \n  return mat2(c, s, -s, c); \n}\n//--------------------\n\n// iMouse pos function - take in a vec3 like ro\n// simple pan and tilt and return that vec3\nvec3 get_mouse(vec3 ro) \n{\n    float x = iMouse.xy==vec2(0) ? -.2 :\n    \t(iMouse.y / iResolution.y * .5 - 0.25) * PI;\n    float y = iMouse.xy==vec2(0) ? .0 :\n    \t-(iMouse.x / iResolution.x * 1.0 - .5) * PI;\n    float z = 0.0;\n\n    ro.zy *= r2(x);\n    ro.zx *= r2(y);\n    \n    return ro;\n}\n\n\n// phong shading\nvec3 p_shadingv3( vec3 pos, vec3 normal, vec3 ro, vec3 rd, vec3 plight_pos1,  vec3 plight_color1 )\n{\n\t// ...add lights here...\n   //col2= p_shadingv2( p, nor, ro, light_pos1, light_color1 )*colobj;\n  \n    \n    \n\tfloat shininess = 1.25;\n    \n\t\n\tvec3 final = vec3( 0.0 );\n\t\n\tvec3 ev = normalize( pos - ro );\n\tvec3 ref_ev = reflect( ev, normal );\n\t\n\t\n\t\tvec3 vl = normalize( plight_pos1 - pos );\n\t\n\t\tfloat diffuse  = max( 0.0, dot( vl, normal ) );\n\t\tfloat specular = max( 0.0, dot( vl, ref_ev ) );\n\t\tspecular = pow( specular, shininess );\n\t\t\n\t\t\n        final += plight_color1 * ( diffuse + specular );\n        \n    \n    \n\tvec3 color = vec3(1.0);\n    color = color * 0.75 + 0.25;\n   \n    color *= normal * .25 + .75;\n    \n    \n    float ambient2 = 0.1;\n    float diffuse2 = 0.5 * -dot(normal,rd);\n    float specular2 = 1.0 * max(0.0, -dot(rd, reflect(rd,normal)));\n    \n    color *= vec3(ambient2 + diffuse2 + pow(specular2,5.0));\n\n    color *= smoothstep(12.0,6.0,length(pos));\n    \n    \n    \n    return (final+color)/2.0;\n}\n\n\n\nvec3 srgb(float r, float g, float b) {\n    return vec3(r*r,g*g,b*b);\n}\n\n\n//https://www.shadertoy.com/view/4llSWf\n\nvec3 Shade(vec3 position, vec3 normal, vec3 direction, vec3 camera)\n{\n   // position *= scale;\n    vec3 color = vec3(1.0);\n    \n    color = color * 0.75 + 0.25;\n    \n    color *= normal * .25 + .75;\n    \n    \n    float ambient = 0.1;\n    float diffuse = 0.5 * -dot(normal,direction);\n    float specular = 1.0 * max(0.0, -dot(direction, reflect(direction,normal)));\n    \n    color *= vec3(ambient + diffuse + pow(specular,5.0));\n\n    color *= smoothstep(12.0,6.0,length(position));\n    \n    return color;\n}\n\n\n//-------------------------------\nvec3 getColorTex( vec3 p, vec3 nor,  int i)\n{\n    \n\tif (i==100 ) { return tex3D(iChannel0, p/32., nor); }\n\tif (i==101 ) { return tex3D(iChannel1, p/32., nor); }\n\tif (i==102 ) { return tex3D(iChannel2, p/32., nor); }\n\tif (i==103 ) { return tex3D(iChannel3, p/32., nor); }\n   \n    \n}\n\n\nvec3 Getluz(vec3 p, vec3 ro, vec3 nor , vec3 colobj ,vec3 plight_pos)\n{   \n     \n    vec3 lightPos = plight_pos;\n    float intensity=1.0;\n\tconst float shininess = 100.0;\n\tvec3 l = normalize( p-lightPos);\n    vec3 v = normalize( p-ro);\n    vec3 h = normalize(v + l);\n    float diff = dot(nor, l);\n    float spec = max(0.0, pow(dot(nor, h), shininess)) * float(diff > 0.0);\n\tvec3 result = LightShading(nor,l,v, colobj)*intensity;\n    return result;\n}\n    \n\n\n\n///---------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \n\t\n    itime=iTime;\n    float t;\n    t=iTime*1.0;\n   \n    \n \n \tlight_pos1   = vec3(-10.0, 12.0, -10.0 ); \n \tlight_color1 = vec3( 1.0 );\n\n \tlight_pos2   = vec3( 0.0, 15.0, 0.0 );\n \tlight_color2 = vec3( 1.0, 1.0, 1.0 );\n \n    \n    \n    \n    vec2 p2 = (-iResolution.xy + 2.0*fragCoord.xy) / iResolution.y;\n    vec2 uv=p2;\n\n     // camera movement\t\n\tfloat an = 0.5*iTime;\n\t//vec3 ro = vec3( 2.5*cos(an), 1.0, 2.5*sin(an) );\n    vec3 ro = vec3( 0.0, 10.0, -10.0 );\n    ro=rotate_y(ro, -iTime*1.01);\n    vec3 ta = vec3( 0.0, 1.0, 0.0 );\n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\t// create view ray\n\tvec3 rd = normalize( p2.x*uu + p2.y*vv + 1.5*ww );\n\n    \n    \n   \n    vec3 col = vec3(0);\n    \n    TObj Obj;\n    \n    mObj.uv=uv;\n    mObj.rd=rd;\n    mObj.ro=ro;\n\n\t \n    \n    float d = RayMarch(ro, rd);\n    Obj=mObj;\n    \n  \n    vec3 p = (ro + rd * d ); \n    glpRoRd=p;\n    mObj.p=p;\n    \n    \n  \n    \n    mObj.dist =d;\n    vec3 colobj;\n    \n    vec3 nor= GetNormal( p);\n    \n  \n    \n    \n    colobj=getColor(int( Obj.tipo));\n    \n    \n    vec3 coltex=getColorTex(p, nor, int( Obj.tipo));\n    \n    \n    if (Obj.tipo>=100.0) \n \t{       \n        colobj=coltex;\n\t}       \n    \n\n  float dif1=0.8;\n   \n    \n    /*\n \tfloat dif1= GetLightPar(p,light_pos1);\n    dif1+= GetLightPar(p,light_pos2);\n     dif1= (dif1 )/2.0;\n    */\n    \n    \n    \n    \n   vec3 col2,col3;\n    \n    vec3 result;\n    result=  Getluz( p,ro, nor, colobj ,light_pos1);\n    result+= Getluz( p,ro, nor, colobj ,light_pos2);\n    result/=1.25;\n    col3=result;\n    \n  \n    col= col3*dif1;\n  \n  \n    col = pow(col, vec3(1.0/2.2));  \n    \n    fragColor = vec4(col,1.0);\n\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"///------------------------------------\nstruct TObj\n{\n    float tipo;\n    float dist;\n    vec3 normal;\n    vec3 ro;\n    vec3 rd;\n    vec2 uv;\n    vec3 color;\n    vec3 p;\n    vec3 rf;\n   \n};\n\n\nTObj mObj;\nvec3 glpRoRd;\nvec2 gres2;\nfloat itime;\n\n\n\n#define PI 3.14159265358979323846264\n#define PI2 6.28318530717\n#define TriplePI (3.0 * PI)\n#define DoublePI (2.0 * PI)\n#define HalfPI (PI / 2.0)\n\n\n\n\n///Gracias por la Ayuda de SHane...16-jun-2020\n// Creditos a Shane por su funcion tex3D\n// Tri-Planar blending function. Based on an old Nvidia writeup:\n// GPU Gems 3 - Ryan Geiss: http://http.developer.nvidia.com/GPUGems3/gpugems3_ch01.html\nvec3 tex3D( sampler2D tex, in vec3 p, in vec3 n ){    \n    \n    // Ryan Geiss effectively multiplies the first line by 7. It took me a while to realize that \n    // it's largely redundant, due to the division process that follows. I'd never noticed on \n    // account of the fact that I'm not in the habit of questioning stuff written by Ryan Geiss. \n    n = max(n*n - .2, .001); // max(abs(n), 0.001), etc.\n    n /= dot(n, vec3(1)); \n    //n /= length(n); \n    \n    // Texure samples. One for each plane.\n    vec3 tx = texture(tex, p.yz).xyz;\n    vec3 ty = texture(tex, p.zx).xyz;\n    vec3 tz = texture(tex, p.xy).xyz;\n    \n    // Multiply each texture plane by its normal dominance factor.... or however you wish\n    // to describe it. For instance, if the normal faces up or down, the \"ty\" texture sample,\n    // represnting the XZ plane, will be used, which makes sense.\n    \n    // Textures are stored in sRGB (I think), so you have to convert them to linear space \n    // (squaring is a rough approximation) prior to working with them... or something like that. \n    // Once the final color value is gamma corrected, you should see correct looking colors.\n    return mat3(tx*tx, ty*ty, tz*tz)*n; // Equivalent to: tx*tx*n.x + ty*ty*n.y + tz*tz*n.z;\n\n}\n\n\n\n\n\n//-ooooooooooooooooooooooooooooooooooooooooooooooooooooo\n//https://www.shadertoy.com/view/XlBXWw\nvec2 hash22(vec2 p) \n{ \n    float n = sin(dot(p, vec2(41, 289)));\n    return fract(vec2(262144, 32768)*n); \n    \n}\n//----------------\n///https://www.shadertoy.com/view/wsjBD3\n\nvec2 mod2(inout vec2 p, vec2 size) \n{\n  vec2 c = floor((p + size*0.5)/size);\n  p = mod(p + size*0.5,size) - size*0.5;\n  return c;\n}\n\n//--------------------------------\n    \n\n\nfloat random() \n{\n\treturn fract(sin(dot(mObj.uv, vec2(12.9898, 78.233)) ) * 43758.5453);\n}\n\n\n\n\n\nvec3 checkerBoard(float u, float v, float interval)\n{\n    float uu = floor(u/interval*2.0);\n    float vv = floor(v/interval*2.0);\n    float p =mod(uu+vv,2.0);\n    return vec3(0.1+0.9*p);\n}\n\n\n\n\n//-------------------\n//IQs noise\nfloat noise(vec3 rp) {\n    vec3 ip = floor(rp);\n    rp -= ip; \n    vec3 s = vec3(7, 157, 113);\n    vec4 h = vec4(0.0, s.yz, s.y + s.z) + dot(ip, s);\n    rp = rp * rp * (3.0 - 2.0 * rp); \n    h = mix(fract(sin(h) * 43758.5), fract(sin(h + s.x) * 43758.5), rp.x);\n    h.xy = mix(h.xz, h.yw, rp.y);\n    return mix(h.x, h.y, rp.z); \n}\n\n\n    \n\n\n\n///-----------------------------------------\n//----------------------------------------------------\n\n\nvec3 getColor(int i)\n{\n    \n    float m;\n        \nif (i==0 ) { return vec3(0,0,0)/255.0; }\nif (i==1 ) { return vec3(255.,255.,255.)/255.0; }\nif (i==2 ) { return vec3(255,0,0)/255.0; }\nif (i==3 ) { return vec3(0,255,0)/255.0; }\nif (i==4 ) { return vec3(0,0,255)/255.0; }\nif (i==5 ) { return vec3(255,255,0)/255.0; }\nif (i==6 ) { return vec3(0,255,255)/255.0; }\nif (i==7 ) { return vec3(255,0,255)/255.0; }\nif (i==8 ) { return vec3(192,192,192)/255.0; }\nif (i==9 ) { return vec3(128,128,128)/255.0; }\nif (i==10 ) { return vec3(128,0,0)/255.0; }\nif (i==11 ) { return vec3(128,128,0)/255.0; }\nif (i==12 ) { return vec3(0,128,0)/255.0; }\nif (i==13 ) { return vec3(128,0,128)/255.0; }\nif (i==14 ) { return vec3(0,128,128)/255.0; }\nif (i==15 ) { return vec3(0,0,128)/255.0; }\n    \nif (i==16 ) { return vec3(255, 204, 188)/255.0; }\nif (i==17 ) { return vec3(0.8, 0.8, 0.8); }\nif (i==18 ) { return vec3(0.5, 0.5, 0.8); }\n\n      \n    if(i== 139 )\n    {\n     \n           vec3 p = glpRoRd;\n           vec3 marbleP = p*2.0;\n    \n            marbleP.x += sin(p.y*0.5)*0.12;\n            marbleP.z += sin(p.y*2.0)*0.1;\n            marbleP.y += sin(p.x*5.0)*0.13;\n            marbleP.y += sin(p.z*3.0)*0.14;\n\n            marbleP.y += sin(p.x*1.3)*0.5;\n            marbleP.y += sin(p.z*1.5)*0.6;\n\n            marbleP.x += sin(p.y*10.0)*0.011;\n            marbleP.z += sin(p.y*12.0)*0.013;\n            marbleP.y += sin(p.x*15.0)*0.012;\n            marbleP.y += sin(p.z*13.0)*0.015;\n\n            marbleP.x *= 0.5;\n            marbleP.z *= 0.8;\n            marbleP.y *= 0.50;\n\n            float marbleAmtA = abs(sin(marbleP.x)+sin(marbleP.y)+sin(marbleP.z))/3.0;\n            marbleAmtA = pow(1.0-marbleAmtA,5.0);\n\n            marbleP = p;\n\n            marbleP.x += sin(p.y*21.0)*0.12;\n            marbleP.z += sin(p.y*23.0)*0.1;\n            marbleP.y += sin(p.x*22.0)*0.13;\n            marbleP.y += sin(p.z*24.0)*0.14;\n\n            marbleP.y += sin(p.x*1.2)*0.5;\n            marbleP.y += sin(p.z*1.4)*0.6;\n\n            marbleP.x += sin(p.y*150.0)*0.011;\n            marbleP.z += sin(p.y*162.0)*0.013;\n            marbleP.y += sin(p.x*145.0)*0.012;\n            marbleP.y += sin(p.z*153.0)*0.015;\n\n            marbleP.x *= 0.2;\n            marbleP.z *= 0.3;\n            marbleP.y *= 0.10;\n\n            float marbleAmtB = abs(sin(marbleP.x)+sin(marbleP.y)+sin(marbleP.z))/3.0;\n            marbleAmtB = pow(1.0-marbleAmtB,9.0);\n            marbleAmtB = 1.0-(1.0-marbleAmtB*0.3);\n\n            float marbleAmt = marbleAmtA + marbleAmtB;\n            marbleAmt = clamp(marbleAmt,0.0,1.0);\n\t\t\tvec3 surfaceColor;\n            \n    \t\n        \tsurfaceColor = mix(vec3(0.4,0.4,0.6),vec3(0.50,0.1,0.2),marbleAmtA);\n        \n        \treturn surfaceColor;\t\n        \n\t\t\t}  \n    \n   \n\t\n}\n\n///--------------------------------------------\n\n","name":"Common","description":"","type":"common"}]}