{"ver":"0.1","info":{"id":"XltXD4","date":"1479635094","viewed":206,"name":"Texture Raster","username":"VoidChicken","description":"Rasterizer with texture.[url=https://www.shadertoy.com/view/4ttXD4] Original [\\url]","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["2d","3d","rasterizer","texture","projection","raster","chicken"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float FOV = 60.; //60 degrees FOV\nconst float pi = acos(-1.);\nvec2 project( vec3 p ) {\n    float RAD = FOV/360.*pi;\n    float DVN = p.z;\n    return p.xy/DVN+.5;\n}\nfloat line ( vec2 p, vec2 a, vec2 b, float r ) {\n\n    vec2 pa = p - a, ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    vec2 ac = abs( pa - ba*h );\n    return ac.x+ac.y - r;\n    \n}\nfloat lp(vec2 p, vec2 a, vec2 b) {\n\tfloat xP = (p.x-min(a.x,b.x));\n    float xFP = xP/abs(a.x-b.x);\n    float yP = (p.y-min(a.y,b.y));\n    float yFP = yP/abs(a.y-b.y);\n    return xFP>yFP?xP:yP;\n}\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\nmat3 rmx(vec3 axis, float angle)\n{\n    axis = normalize(axis);\n    float s = sin(angle);\n    float c = cos(angle);\n    float oc = 1.0 - c;\n    \n    return mat3(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s, \n                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  \n                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c\n              );\n}\nvec3 poly[4];\nvec2 proj[4];\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    poly[0]=vec3(-1, -1, 0);\n    poly[1]=vec3(1, -1, 0);\n    poly[2]=vec3(1, 1, 0);\n    poly[3]=vec3(-1,1,0);\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float df = 5000000.;\n    for (int i = 0; i < 4; i++) {\n    \tproj[i]=project(poly[i]*rmx(vec3(cos(iTime),1,sin(iTime)), iTime)+vec3(0,0,3));    \n    }\n    float lv = 0.;\n    for (int i = 0; i < 4; i++) {\n        vec2 nv =  proj[i+1];\n        if (i+1>3){\n        \tnv=proj[0];    \n        }\n    \tdf=min(df,line(uv, proj[i],nv, .002)); \n\t\tlv=lp(uv,proj[i],nv);\n    }\n\n    vec3 c = vec3(0);\n    if (df<.02) {\n     \tvec3 ct = texture(iChannel0, vec2(lv)).rgb;\n        c=pow(1.-df/.02,5.)*ct;\n    }\n\tfragColor = vec4(c,1.0);\n}","name":"Image","description":"","type":"image"}]}