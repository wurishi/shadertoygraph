{"ver":"0.1","info":{"id":"flXcDH","date":"1647885863","viewed":89,"name":"TexturesLights3D","username":"MelisaHot","description":"3D spheres with textures, lights and shadow.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["rays","texture","shadow","light","sphere"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// from https://www.shadertoy.com/view/fdlGWX\n//https://www.shadertoy.com/user/inspirnathan/\n\nconst int MAX_MARCHING_STEPS = 255;\nconst float MIN_DIST = 0.0;\nconst float MAX_DIST = 100.0;\nconst float PRECISION = 0.00001;\n\nstruct Surface {\n    float sd; // signed distance value\n    vec3 col; // color\n};\n\nSurface sdSphere(vec3 p, float r, vec3 offset, vec3 col)\n{\n  float d = length(p - offset) - r;\n  return Surface(d, col);\n}\n\nSurface sdFloor(vec3 p, vec3 col) {\n  float d = p.y + 1.;\n  return Surface(d, col);\n}\n\nSurface minWithColor(Surface obj1, Surface obj2) {\n  if (obj2.sd < obj1.sd) return obj2; // The sd component of the struct holds the \"signed distance\" value\n  return obj1;\n}\n\nSurface sdScene(vec3 p) {\n  Surface sphereLeft = sdSphere(p, 1., vec3(-2.5, 0, -2), vec3(0.3, .2, .4));\n  Surface sphereRight = sdSphere(p, 1., vec3(2.5, 0, -2), vec3(0.6,0,0.1)*fract(mod(p.x*10., 2.)));\n  Surface sphereCenter = sdSphere(p, 1., vec3(0, 0, -3), vec3(1, 0.8, 0.4)*fract(p.x*2.+mod(p.y, 6.)*5.)*fract(p.x*(-2.)+mod(p.y, 6.)*5.));\n  \n  Surface co = minWithColor(sphereLeft, sphereRight); // co = closest object containing \"signed distance\" and color\n  co= minWithColor(co, sphereCenter);\n  vec3 floorColor = vec3(mod(floor(p.x) + floor(p.z), 4.0))*vec3(0.7,0.3,0.2);\n  co = minWithColor(co, sdFloor(p, floorColor));\n  \n  return co;\n}\n\nSurface rayMarch(vec3 ro, vec3 rd, float start, float end) {\n  float depth = start;\n  Surface co; // closest object\n\n  for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n    vec3 p = ro + depth * rd;\n    co = sdScene(p);\n    depth += co.sd;\n    if (co.sd < PRECISION || depth > end) break;\n  }\n  \n  co.sd = depth;\n  \n  return co;\n}\n\nvec3 calcNormal(in vec3 p) {\n    vec2 e = vec2(1.0, -1.0) * 0.0005; // epsilon\n    return normalize(\n      e.xyy * sdScene(p + e.xyy).sd +\n      e.yyx * sdScene(p + e.yyx).sd +\n      e.yxy * sdScene(p + e.yxy).sd +\n      e.xxx * sdScene(p + e.xxx).sd);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n  vec3 backgroundColor = vec3(0.835, 1, 1);\n\n  vec3 col = vec3(0);\n  vec3 ro = vec3(0, 0, 3); // ray origin that represents camera position\n  vec3 rd = normalize(vec3(uv, -1)); // ray direction\n\n  Surface co = rayMarch(ro, rd, MIN_DIST, MAX_DIST); // closest object\n\n  if (co.sd > MAX_DIST) {\n    col = backgroundColor; // ray didn't hit anything\n  } else {\n    vec3 p = ro + rd * co.sd; // point on sphere or floor we discovered from ray marching\n    vec3 normal = calcNormal(p);\n    vec3 lightPosition = vec3(cos(iTime), 3. , sin(iTime));\n    vec3 lightDirection = normalize(lightPosition - p)*1.5;\n\n    float dif = clamp(dot(normal, lightDirection), 0.3, 1.);\n    vec3 newRayOrigin = p + normal * PRECISION * 5000.;\n    Surface shadowRayLength = rayMarch(newRayOrigin, lightDirection, MIN_DIST, MAX_DIST); // cast shadow ray to the light source\n    if (shadowRayLength.sd < length(lightPosition - newRayOrigin)) dif *= 0.4; // shadow\n\n    \n\n     col = dif * co.col + backgroundColor * .2;\n  }\n\n  // Output to screen\n  fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}