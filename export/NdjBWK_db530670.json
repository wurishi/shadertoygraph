{"ver":"0.1","info":{"id":"NdjBWK","date":"1647252114","viewed":199,"name":"texCoord / 3d sprite beat effort","username":"cxm","description":"Hard to control the transition value when click released","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["beat","sprite","texcoord"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n\n    // Time varying pixel color\n    vec3 col = texture( iChannel0, uv ).rgb;\n\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n#define count 100\n#define speed .7\n\nvec2 center = vec2( .5, .5 );\nfloat dt = 0.;\n\nmat2 _rot1(float a) {\n  float s = sin(a), c = cos(a);\n  return mat2(c,s,-s,c);\n}\n\nconst mat2 m = mat2( 0.80,  0.60, -0.60,  0.80 );\n\nfloat noise( in vec2 p )\n{\n    return sin(p.x)*sin(p.y);\n}\n\nfloat fbm4( vec2 p )\n{\n    float f = 0.0;\n    f += 0.5000*noise( p ); p = m*p*2.02;\n    f += 0.2500*noise( p ); p = m*p*2.03;\n    f += 0.1250*noise( p ); p = m*p*2.01;\n    f += 0.0625*noise( p );\n    return f/0.9375;\n}\n\nvec2 fbm4_2( vec2 p )\n{\n    return vec2(fbm4(p), fbm4(p+vec2(7.8)));\n}\n\nfloat Pin2Pixel( in vec2 uv, float rot, float size, float idx ){\n\n    float p = 0.;\n    \n    float rdm = noise( vec2( cos( 1. - rot ), cos( size ) ) );\n    \n    uv -= vec2( ( center.x - .5 ) * 2. + cos( idx ) * ( ( fract( dt * speed ) * .6 ) + ( 1. - rot ) * ( .6 + rdm * .5 ) ), ( center.y - .5 ) * 2. + sin( idx ) * ( fract( dt * speed ) * .6 + ( 1. - rot ) * ( .6 + rdm * .5 ) ) );\n\n    uv -= .5;\n    uv *= _rot1( idx + 3.14 * .5 );\n    uv += .5;\n\n    vec2 bUv = uv;\n    \n    float r = noise( vec2( sin( rot ), cos( rot ) ) );\n\n    float d = min( ( .2 + r * .2 ) * max( 1. - abs( uv.x - .5 ) * 500., .01 ), .3 ) * .5;\n\n    p = 1. - smoothstep( 0., d, distance( uv, vec2( .5, .5 ) ) );\n    \n    return p;\n\n}\n\n// pulse\n\nfloat Pulse2Pixel( in vec2 uv, vec2 pos, float rot, float size, float idx ){\n    float b = 0.;\n    vec2 bUv = uv;\n    uv -= pos;\n    uv *= _rot1( rot );\n    uv += pos;\n    \n    uv = fbm4_2( uv + fbm4_2( uv +fbm4_2( uv - rot ) ) );\n    b = cos( uv.x ) * sin( uv.y );\n    // b = noise( uv ) + cos( uv.x ) * sin( uv.y ) * .3;\n    \n    bUv -= pos;\n    bUv *= _rot1( rot );\n    float s = 1. - smoothstep( 0., abs( mod( atan( bUv.x, bUv.y ) * 40., 2. ) - .5 ), .9 );\n    bUv += pos;\n    \n    s *= 1. - smoothstep(.0, size, length( bUv - pos ) );\n    \n    b = mix(\n        b,\n        0.,\n        s\n    );\n    \n    b *= 1. - smoothstep(.0, size, length( bUv - pos ) );\n    \n    b = mix(\n        b, \n        0.,\n        1. - smoothstep(.0, size * .6, length( bUv - pos ) )\n    );\n    \n    // pulse overlay\n    b = mix(\n        b, \n        uv.x * .2,\n        1. - smoothstep(.0, size, length( bUv - pos ) )\n    );\n    \n    return b;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.yy;\n    \n    float resRa = ( iResolution.x / iResolution.y );\n    uv.x -= ( iResolution.x - iResolution.y ) / iResolution.y * .5;\n    \n    vec2 itv = iMouse.xy / iResolution.xy;\n    \n    if( iMouse.z >= .001 ){\n        dt = 0.;\n    }else{\n        dt = iDate.w;\n    }\n    \n    if( itv.x < .001 && itv.y < .001  ){\n        center = vec2( .5 );\n    }else{\n        center = itv;\n    }\n    \n\n    // Time varying pixel color\n    vec3 col = vec3( 0. );\n\n    float p = .0;\n\n    for( int i = 1; i < count + 1; i++ ){\n        p = Pin2Pixel( uv, float( i ) / float( count ), 2., float( i ) );\n\n        col = mix(\n            col,\n            vec3( .7 ) * float( i ) / float( count ),\n            p\n        );\n    }\n    \n    p = Pulse2Pixel( uv, center * 2. - .5, fract( dt * speed ), fract( dt * speed ) * 1.2, 0. );\n    \n    col = mix(\n        col,\n        vec3( 1.5 ),\n        p\n    );\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}