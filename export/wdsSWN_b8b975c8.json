{"ver":"0.1","info":{"id":"wdsSWN","date":"1598559521","viewed":186,"name":"Colored Sobel","username":"wilsnat","description":"sobel kernel","likes":5,"published":1,"flags":2,"usePreview":0,"tags":["webcam"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"    /*** Sobel kernels ***/\n    // Note: GLSL's mat3 is COLUMN-major ->  mat3[col][row]\n#define sobelX mat3(-1.0, -2.0, -1.0, 0.0,  0.0, 0.0, 1.0,  2.0,  1.0)\n#define sobelY mat3(-1.0,  0.0,  1.0, -2.0,  0.0, 2.0,-1.0,  0.0,  1.0) \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 offset = vec2(1, 1)/iResolution.xy;\n\n    float sumX = 0.0;\t// x-axis change\n    float sumY = 0.0;\t// y-axis change\n    \n    vec4 c = texture(iChannel0, uv);\n    \n    for(int i = -1; i <= 1; i++)\n    {\n        for(int j = -1; j <= 1; j++)\n        {\n            // texture coordinates should be between 0.0 and 1.0\n            vec3 textVal = texture(iChannel0, offset*vec2(i,j)+uv).xyz;\n            \n            // Convolve kernels with image\n            sumX += length(textVal) * float(sobelX[1+i][1+j]);\n            sumY += length(textVal) * float(sobelY[1+i][1+j]);\n        }\n    }\n    \n    float g = abs(sumX) + abs(sumY);\n    \n    fragColor = vec4(g*c.x,g*c.y,g*c.z,1);\n}","name":"Image","description":"","type":"image"}]}