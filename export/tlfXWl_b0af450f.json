{"ver":"0.1","info":{"id":"tlfXWl","date":"1564579492","viewed":105,"name":"FractalFrame","username":"Hirai_worthless","description":"test.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 genRot(float val){\n\treturn mat2(cos(val),-sin(val),sin(val),cos(val));\n}\nfloat PI = 3.14159265;\nvec3 path(float t){\n\tfloat x = clamp(sin(t) * pow(2.0,0.5),-1.0,1.0);\n    float y = clamp(cos(t) * pow(2.0,0.5),-1.0,1.0);\n    float z = 0.;\n    return vec3(x,y,z);\n}\nfloat grid(vec3 p, float a){\n    //p.xz *= genRot(iTime);\n    p = fract(p / a) * a;\n    p -= vec3(a / 2.0);\n\tfloat d1 = max(abs(p.x),abs(p.y)) - a/(9.+3.*sin(iTime * 2.0));\n\tfloat d2 = max(abs(p.y),abs(p.z)) - a/(9.+3.*sin(iTime * 2.0));\n\tfloat d3 = max(abs(p.z),abs(p.x)) - a/(9.+3.*sin(iTime * 2.0));\n\treturn (min(min(d1,d2),d3));\n}\nfloat map(vec3 p){\n\tfloat k = grid(p,1.0);\n    for(float i = 2.0; i < 256.0; i *= 2.0 ){\n        k = max(k,-grid(p,1.0/i));\n    }\n    return k;\n}\n\nconst float EPS = 0.001;\nvec3 getNormal(vec3 p) {\n    return normalize(vec3(\n        map(p + vec3(EPS, 0.0, 0.0)) - map(p + vec3(-EPS,  0.0,  0.0)),\n        map(p + vec3(0.0, EPS, 0.0)) - map(p + vec3( 0.0, -EPS,  0.0)),\n        map(p + vec3(0.0, 0.0, EPS)) - map(p + vec3( 0.0,  0.0, -EPS))\n    ));\n}\n\nvec4 trace (vec3 o, vec3 r){\n\tfloat t = 0.0;\n    vec3 p = vec3(0.0,0.0,0.0);\n    \n    for(int i = 0; i < 128; ++i){\n        p = o + r * t;\n        float d = map(p);\n        t += d * 0.5;\n    }\n    return vec4(getNormal(p),t);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    float PI = 3.14159265;\n    vec2 uv = fragCoord.xy /iResolution.xy;\n\tuv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    vec3 r = normalize(vec3(uv,1.2));\n    r.xz *= genRot(iTime);\n    vec3 o = vec3( sin(iTime * PI / 4.) * 1.2,  0.5 + iTime * 1.0, cos(iTime * PI / 4.) * 1.2);\n    vec4 data = trace(o,r);\n    float t = data.w;\n    float fog = 1.0 / (1.0 + t * t * 0.05);\n    vec3 fc = mix(vec3(0.5 - data.x,0.5 -data.y,0.5-data.z),vec3(0.),1.0 - fog);\n\t//fc = vec3(fog);\n    // Output to screen\n    fragColor = vec4(fc,1.0);\n}","name":"Image","description":"","type":"image"}]}