{"ver":"0.1","info":{"id":"clfSD7","date":"1674839965","viewed":116,"name":"Logo Unity","username":"Karp","description":"Unity Logo\n","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["logo","unity"],"hasliked":0,"parentid":"7lXcDS","parentname":"Logo GameCube"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 Cube(vec2 uv,float size, vec3[3] colors, float blurLvl)\n{\n    vec3 result = vec3(0.0);\n    //Sqrt(3) = 1.732\n    float top   = sdRhombus(RotateUV(uv, 000.0) + vec2(0.0,-.6/ 1.732), vec2(.6,.6 / 1.732));\n    float left  = sdRhombus(RotateUV(uv, 120.0) + vec2(0.0,-.6/ 1.732), vec2(.6,.6 / 1.732));\n    float right = sdRhombus(RotateUV(uv,-120.0) + vec2(0.0,-.6/ 1.732), vec2(.6,.6 / 1.732));\n\n    result = mix(colors[0], result, Clamp01((top)*blurLvl));\n    result = mix(colors[1], result, Clamp01((left)*blurLvl));\n    result = mix(colors[2], result, Clamp01((right)*blurLvl));\n\n    return result;\n}\nfloat CubeMask(vec2 uv,float size, float blurLvl)\n{\n    return Clamp01((sdHexagon(RotateUV(uv, 30.0), size *0.5))*blurLvl);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //Parameter\n    float time = iTime;\n    float size = 1. + sin(.5 * time) * .15;\n    float rounding = 0.1;\n    float blurLvl = 250.0;\n\n    //Color\n    vec3 background = Color255(250,250,250);\n    vec3 shadow = Color255(0,0,0);\n    vec3 highlight = Color255(140,140,140);\n    vec3 midtone = Color255(76,76,76);\n    vec3[] colors = vec3[](highlight, midtone, shadow);\n    \n    // UV manipulation\n    vec2 uv  = AspectRatioUV(fragCoord, iResolution.xy);\n    //uv -= AspectRatioUV(iMouse.xy, iResolution.xy);\n    \n    //Anim\n    float angle = sin(time) * 5.0;\n    uv = RotateUV(uv, angle);\n    uv.y += -abs(cos(time)) * 0.1;\n    \n    //BackGround\n    vec3 pixel = background;\n    //Cube\n    pixel = mix(Cube(uv * (1./size), 0.,colors,blurLvl), pixel,CubeMask(uv, size, blurLvl));\n    \n    float topSquare   = sdRhombus(RotateUV(uv, 000.0) + vec2(0.0,-0.25 * size), vec2(.22* size,.22* size / 1.75));\n    float leftSquare  = sdRhombus(RotateUV(uv, 120.0) + vec2(0.0,-0.25 * size), vec2(.22* size,.22* size / 1.75));\n    float rightSquare = sdRhombus(RotateUV(uv,-120.0) + vec2(0.0,-0.25 * size), vec2(.22* size,.22* size / 1.75));\n    \n    float topLine = sdBox(RotateUV(uv, 000.0)+ vec2(0.0,-1.* size), vec2(0.025* size,0.8* size));\n    float leftLine = sdBox(RotateUV(uv, 120.0)+ vec2(0.0,-1.* size), vec2(0.025* size,0.8* size));\n    float rightLine = sdBox(RotateUV(uv,-120.0)+ vec2(0.0,-1.* size), vec2(0.025* size,0.8* size));\n    \n    topSquare = mix(1., 0., Clamp01((topSquare-.01)*blurLvl));\n    leftSquare = mix(1., 0., Clamp01((leftSquare-.01)*blurLvl));\n    rightSquare = mix(1., 0., Clamp01((rightSquare-.01)*blurLvl));\n    topLine = mix(1., 0., Clamp01((topLine-.01)*blurLvl));\n    leftLine = mix(1., 0., Clamp01((leftLine-.01)*blurLvl));\n    rightLine = mix(1., 0., Clamp01((rightLine-.01)*blurLvl));\n\n    float voidmask = topSquare + leftSquare + rightSquare + topLine + leftLine + rightLine;\n    pixel = mix(pixel, background, Clamp01(voidmask));\n\n\tvec4 result = vec4(pixel.xyz, 1.0);\n\tfragColor = result;\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define PI 3.14159265359\n//UV\nvec2 AspectRatioUV(vec2 fragCoord, vec2 resolution)\n{\t\n    vec2 uv = vec2( fragCoord.xy - 0.5*resolution.xy );\n    // [0, iResolution.x] -> [-0.5*iResolution.x, 0.5*iResolution.x]\n\t// [0, iResolution.y] -> [-0.5*iResolution.y, 0.5*iResolution.y]\n\tuv = 2.0 * uv.xy / resolution.y;\n    // AspectRatio = 1920 / 1080 = 1.778\n    // [-0.5*iResolution.x, 0.5*iResolution.x] ->[-1.778, 1.778]\n\t// [-0.5*iResolution.y, 0.5*iResolution.y] ->[-1, 1]\n    \n    return uv;\n}\nvec2 RotateUV(inout vec2 uv, float angle)\n{\t\n\tangle = angle * PI / 180.0;\n    return uv * mat2(cos(angle),sin(angle),-sin(angle),cos(angle));\n}\n\n//Color \nvec3 Color255(int R, int G, int B)\n{\n    return vec3(float(R)/255.0, float(G)/255.0, float(B)/255.0);\n}\nfloat Clamp01( in float value)\n{\n    return clamp(value,0.0,1.0);\n}\n\n//Regular Hexagon - exact from https://iquilezles.org/articles/distfunctions2d\nfloat sdHexagon( in vec2 p, in float r )\n{\n    const vec3 k = vec3(-0.866025404,0.5,0.577350269);\n    p = abs(p);\n    p -= 2.0*min(dot(k.xy,p),0.0)*k.xy;\n    p -= vec2(clamp(p.x, -k.z*r, k.z*r), r);\n    return length(p)*sign(p.y);\n}\n// Rhombus - exact from IQ (https://www.shadertoy.com/view/XdXcRB)\nfloat ndot(vec2 a, vec2 b ) { return a.x*b.x - a.y*b.y; }\nfloat sdRhombus( in vec2 p, in vec2 b ) \n{\n    p = abs(p);\n    float h = clamp( ndot(b-2.0*p,b)/dot(b,b), -1.0, 1.0 );\n    float d = length( p-0.5*b*vec2(1.0-h,1.0+h) );\n    return d * sign( p.x*b.y + p.y*b.x - b.x*b.y );\n}\nfloat sdBox( in vec2 pos, in vec2 box )\n{\n    vec2 dist = abs(pos)-box;\n    return length(max(dist,0.0)) + min(max(dist.x,dist.y),0.0);\n}\n","name":"Common","description":"","type":"common"}]}