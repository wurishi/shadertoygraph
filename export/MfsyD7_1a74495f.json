{"ver":"0.1","info":{"id":"MfsyD7","date":"1721217400","viewed":27,"name":"Jadeite crystal","username":"mike2367","description":"using the features of the texture and ray marching method","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// code ref: https://www.shadertoy.com/view/4t2SWW\n\n#define USE_SPHERE_OR_BOX\n#define ITER 64\n#define PI 3.141592653\n\nfloat random(float p) {\n  \treturn fract(sin(p)*10000.);\n}\n\nfloat noise(vec2 p) {\n  \treturn random(p.x + p.y*1000.);\n}\n\nvec2 sw(vec2 p) {return vec2( floor(p.x) , floor(p.y) );}\nvec2 se(vec2 p) {return vec2( ceil(p.x)  , floor(p.y) );}\nvec2 nw(vec2 p) {return vec2( floor(p.x) , ceil(p.y)  );}\nvec2 ne(vec2 p) {return vec2( ceil(p.x)  , ceil(p.y)  );}\n\nfloat sNoise(vec2 p) {\n  \tvec2 inter = smoothstep(0., 2., fract(p));\n    \n  \tfloat s = mix(noise(sw(p)), noise(se(p)), inter.x);\n    \n  \tfloat n = mix(noise(nw(p)), noise(ne(p)), inter.x);\n    \n  \treturn mix(s, n, inter.y);\n}\nvec3 effect(vec2 g) \n{\n    float t = iTime * 0.00005;\n    vec2 s = g;\n    vec2 mo = (s*vec2(0.98, t)-s)/s.y;\n    g /= 30.;\n    g.y -= t * 1.5;\n\tg.x += sin(g.x * 46.5 + t) * .012 * sNoise(s / 30.);\n    g.x -= t* 1.5;\n    g.y += sin(g.y * 46.5 + t) * .012 * sNoise(s / 30.);\n\tvec3 c = textureLod(iChannel1, g, 4.*(sin(t)*.5+.5)).rgb;\n\t\n    \n    float x=g.x,\n    y = g.y,\n    m = 0.,\n    f = 4.,\n    h = 4.;\n    vec2 p = 0.75*(-iResolution.xy)/iResolution.y;\n\tvec2 z = p;\n    for( int i=0; i<ITER; i++ ) \n\t{\n\t\tfloat w = (float(i)*1.32457+sin(iTime) / 100.);\n\t\tvec2 z1 = vec2(20.*cos(w),20.*sin(w));\t\t   \n\t\tz = vec2( z.x*z.x+z.y*z.y, 2.*z.x*z.y);\n\t\tf = min( f, abs(dot(z-p,z-p) -.4*float(i)));\n\t\th = min( h, dot(z+z1,z+z1))+ 0.4 *abs((p.x-p.y));\n        if(length(z) > float(ITER) / 30.0)\n            break;\n        \n\t}\n    f = 0.8+log(f)/5.0;\n\th = 1.7+log(h)/18.0; \n    vec2 res = abs(vec2(f,h));\n       \n    vec3 col = vec3(h*0.9 * c.x,f*h * c.y,f*0.8 * c.x*c.y);\n    \n    return c+col*(1.5);\n}\n\n///////FRAMEWORK////////////////////////////////////\nvec4 displacement(vec3 p)\n{\n    vec3 col = effect(p.xz);\n    \n    col = clamp(col, vec3(0), vec3(1.));\n    \n    float dist = dot(col,vec3(0.1));\n    \n    return vec4(dist,col);\n}\n\n////////BASE OBJECTS///////////////////////\nfloat obox( vec3 p, vec3 b ){ return length(max(abs(p)-b,0.0));}\nfloat osphere( vec3 p, float r ){ return abs(length(p.x)+length(p.y)+length(p.z))-r;}\n////////MAP////////////////////////////////\nvec4 map(vec3 p)\n{\n   \tfloat scale = 3.;\n    float dist = 0.;\n    \n    float x = 6.;\n    float z = 6.;\n    \n    vec4 disp = displacement(p);\n        \n    float y = 1. - smoothstep(0., 1., disp.x) * scale;\n   \n    dist = osphere(p, +5.-y);\n    \n    return vec4(dist, disp.yzw);\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n\tvec3 eps = vec3( 0.1, 0., 0. );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\n////////MAIN///////////////////////////////\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = iTime*0.5;\n    float cam_a = time; // angle z\n    \n    #ifdef USE_SPHERE_OR_BOX\n        float cam_e = 5.52; // elevation\n        float cam_d = 1.88; // distance to origin axis\n   \t#else\n        float cam_e = 1.; // elevation\n        float cam_d = 1.8; // distance to origin axis\n    #endif\n    \n    vec3 camUp=vec3(0,1,0);//Change camere up vector here\n  \tvec3 camView=vec3(0,0,0); //Change camere view here\n  \tfloat li = 0.6; // light intensity\n    float prec = 0.00001; // ray marching precision\n    float maxd = 50.; // ray marching distance max\n    float refl_i = .8; // reflexion intensity\n    float refr_a = sin(iTime*0.2); // refraction angle\n    float refr_i = 0.9; // refraction intensity\n    float bii = 0.35; // bright init intensity\n    float marchPrecision = 0.5; // ray marching tolerance precision\n    \n    /////////////////////////////////////////////////////////\n    if ( iMouse.z>0.) cam_e = iMouse.x/iResolution.x * 20.; // mouse x axis \n    if ( iMouse.z>0.) cam_d = iMouse.y/iResolution.y * 20.;\n    /////////////////////////////////////////////////////////\n    \n\tvec2 uv = fragCoord.xy / iResolution.xy * 2. -1.;\n    uv.x*=iResolution.x/iResolution.y;\n    \n    vec3 col = vec3(0.);\n    \n    vec3 ro = vec3(-sin(cam_a)*cam_d, cam_e+1., cos(cam_a)*cam_d); //\n  \tvec3 rov = normalize(camView-ro);\n    vec3 u = normalize(cross(camUp,rov));\n  \tvec3 v = cross(rov,u);\n  \tvec3 rd = normalize(rov + uv.x*u + uv.y*v);\n    \n    float b = bii;\n    \n    float d = 0.;\n    vec3 p = ro+rd*d;\n    float s = prec;\n    \n    const int REFLEXIONS_STEP = 3;\n    \n    vec3 ray, cubeRay;\n    \n    for(int k=0;k<REFLEXIONS_STEP;k++)\n    {\n        for(int i=0;i<150;i++)\n        {      \n            if (s<prec||s>maxd) break;\n            s = map(p).x*marchPrecision;\n            d += s;\n            p = ro+rd*d;\n        }\n\n        if (d<maxd)\n        {\n            vec2 e = vec2(-1., 1.)*0.005; \n           \tvec3 n = calcNormal(p);\n\n            b=li;\n\n            ray = reflect(rd, n);\n            cubeRay = texture(iChannel0, ray).rgb  * refl_i ;\n\n            ray = refract(rd, n, refr_a);\n            cubeRay += texture(iChannel0, ray).rgb * refr_i;\n\n            float ratio = float(k)/float(REFLEXIONS_STEP);\n            \n            if ( k == 0 ) \n                col = cubeRay+pow(b,15.); \n            else \n                col = mix(col, cubeRay+pow(b,25./ratio), ratio*0.8);  \n            \n            // lighting        \n            float occ = calcAO( p, n );\n            vec3  lig = normalize( vec3(-0.6, 0.7, -0.5) );\n            float amb = clamp( 0.5+0.5*n.y, 0.0, 1.0 );\n            float dif = clamp( dot( n, lig ), 0.0, 1.0 );\n            float bac = clamp( dot( n, normalize(vec3(-lig.x,0.0,-lig.z))), 0.0, 1.0 )*clamp( 1.0-p.y,0.0,1.0);\n            float dom = smoothstep( -0.1, 0.1, cubeRay.y );\n            float fre = pow( clamp(1.0+dot(n,rd),0.0,1.0), 2.0 );\n            float spe = pow(clamp( dot( cubeRay, lig ), 0.0, 1.0 ),16.0);\n\n            vec3 brdf = vec3(0.0);\n            brdf += 1.20*dif*vec3(1.00,0.90,0.60);\n            brdf += 1.20*spe*vec3(1.00,0.90,0.60)*dif;\n            brdf += 0.30*amb*vec3(0.50,0.70,1.00)*occ;\n            brdf += 0.40*dom*vec3(0.50,0.70,1.00)*occ;\n            brdf += 0.30*bac*vec3(0.25,0.25,0.25)*occ;\n            brdf += 0.40*fre*vec3(1.00,1.00,1.00)*occ;\n            brdf += 0.02;\n            col = col*brdf;\n\n            col = mix( col, vec3(0.8,0.9,1.0), 1.0-exp( -0.0005*d*d ) );\n\n            col = mix(col, map(p).yzw, 0.5);\n            \n            rd = ray;\n            s = prec;\n        }\n        else if (k == 0)\n        {\n            col = texture(iChannel0, rd).rgb;\n        }\n    }\n\tfragColor.rgb = col;\n}","name":"Image","description":"","type":"image"}]}