{"ver":"0.1","info":{"id":"mltBR8","date":"1700957212","viewed":68,"name":"dodecagonal 3-4 cylinder support","username":"jt","description":"A circle with inscribed dodecagon tiled by regular triangles and squares\n(or alternatively a tiled dodecagon with circumscribed circle).\nImplemented by reflecting a part several times.","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["triangle","circle","square","tiling","dodecagon","inscribed","circumscribed"],"hasliked":0,"parentid":"DtdfRH","parentname":"triangle square tiled dodecagon"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/mltBR8 dodecagonal 3-4 cylinder support, 2023 by jt\n// based on https://www.shadertoy.com/view/DtdfRH triangle square tiled dodecagon\n\n// related: https://www.shadertoy.com/view/mlcBRr dodecagonal transition structure\n// related: https://www.shadertoy.com/view/dlcfzN square ring transition structure\n\n// A circle with inscribed dodecagon tiled by regular triangles and squares\n// (or alternatively a tiled dodecagon with circumscribed circle).\n// Implemented by reflecting a part several times.\n\n// tags: triangle, circle, square, tiling, dodecagon, inscribed, circumscribed\n\n// The MIT License\n// Copyright (c) 2023 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n#define pi 3.1415926\n\nmat3 yaw_pitch_roll(float yaw, float pitch, float roll)\n{\n    mat3 R = mat3(vec3(cos(yaw), sin(yaw), 0.0), vec3(-sin(yaw), cos(yaw), 0.0), vec3(0.0, 0.0, 1.0));\n    mat3 S = mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, cos(pitch), sin(pitch)), vec3(0.0, -sin(pitch), cos(pitch)));\n    mat3 T = mat3(vec3(cos(roll), 0.0, sin(roll)), vec3(0.0, 1.0, 0.0), vec3(-sin(roll), 0.0, cos(roll)));\n\n    return R * S * T;\n}\n\n#define EPSILON 0.001\n#define MAX_DIST 50.0\n#define MAX_ITER 200u\n\n// adapted from https://www.shadertoy.com/view/3syGzz Limited Repetition SDF by iq\nfloat repeat(float p, float s, float h)\n{\n    return p-s*clamp(round(p/s),-h/s,+h/s);\n}\n\n// based on https://iquilezles.org/articles/distfunctions/\nfloat line(vec2 p, vec2 a, vec2 b)\n{\n    vec2 pa = p - a, ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\n// based on https://iquilezles.org/articles/distfunctions/\nfloat line(vec3 p, vec3 a, vec3 b)\n{\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nfloat cylinder(vec3 p, float r, float h)\n{\n    float d = length(p.xy)-r;\n    // extrusion https://iquilezles.org/articles/distfunctions/\n    vec2 w = vec2( d, abs(p.z) - h);\n    return min(max(w.x,w.y),0.0) + length(max(w,0.0));\n}\n\nfloat sdRing(in vec2 p, in vec2 n, in float r, in float th) // https://www.shadertoy.com/view/DsccDH Ring - distance 2D by iq\n{\n    p.x = abs(p.x);\n    \n    p = mat2(n.x,n.y,-n.y,n.x)*p;\n\n    return max( abs(length(p)-r)-th*0.5,\n                length(vec2(p.x,max(0.0,abs(r-p.y)-th*0.5)))*sign(p.x) );\n}\n\nfloat cylinder_part(vec3 p)\n{\n    float h = 1.0;\n    //float d = sdRing(p.xy, vec2(0,1), 1.0, 0.02);\n    float d = sdRing(p.xy, vec2(sqrt(0.5)), 1.0, 0.02);\n    // extrusion from https://iquilezles.org/articles/distfunctions/\n    vec2 w = vec2( d, abs(p.z) - h );\n    return min(max(w.x,w.y),0.0) + length(max(w,0.0));\n}\n\nfloat halfspace(vec3 p)\n{\n    return p.z;\n}\n\n// reflect-abs-y-reflect\nvec2 rayr(vec2 p, float phi)\n{\n    p = reflect(p, vec2(cos(phi), sin(phi)));\n    p.y = abs(p.y);\n    p = reflect(p, vec2(cos(phi), sin(phi)));\n    return p;\n}\n\nfloat triangle_square_tiled_dodecagon(vec2 p) // https://www.shadertoy.com/view/DtdfRH triangle square tiled dodecagon, 2023 by jt\n{\n    p = p.x < p.y ? p.xy:p.yx;\n    p = rayr(p, radians(67.5-90.0));\n    p = rayr(p, radians(37.5-90.0));\n    float s = sqrt(3.0);\n    p = rayr(p, radians(22.5-90.0));\n    float lines = line(p,vec2(s,1)/2.0,vec2(1.0+s)/4.0);\n    lines = min(lines, line(p,vec2(1,2.0 - s)/2.0,vec2(sqrt(2.0))/4.5));\n    p = rayr(p, radians(7.5-90.0));\n    lines = min(lines, line(p,vec2(s,1)/2.0,vec2(1,0)));\n    lines = min(lines, line(p,vec2(0), vec2(1,2.0 - s)/2.0));\n    lines = min(lines, line(p,vec2(1,2.0 - s)/2.0, vec2(1, 0)));\n    return lines;\n}\n\nfloat triangle_square_tiled_dodecagon_pillars(vec3 p)\n{\n    float h = 1.0;\n    float lines = line(p,vec3(vec2(0),-h),vec3(vec2(0),+h));\n    p.xy = p.x < p.y ? p.xy:p.yx;\n    p.xy = rayr(p.xy, radians(67.5-90.0));\n    p.xy = rayr(p.xy, radians(37.5-90.0));\n    float s = sqrt(3.0);\n    p.xy = rayr(p.xy, radians(22.5-90.0));\n    lines = min(lines, line(p,vec3(vec2(s,1)/2.0,-h),vec3(vec2(s,1)/2.0,+h)));\n    lines = min(lines, line(p,vec3(vec2(1,2.0 - s)/2.0,-h),vec3(vec2(1,2.0 - s)/2.0,+h)));\n\n    return lines;\n}\n/*\nfloat triangle_square_tiled_dodecagon(vec2 p) // https://www.shadertoy.com/view/DtdfRH triangle square tiled dodecagon, 2023 by jt\n{\n    float s = sqrt(3.0);\n    float r = sqrt(2.0 - s); // radius of inner circle\n    //vec2 a = vec2(cos(radians(30.0)),sin(radians(30.0)));\n    vec2 a = vec2(s,1)/2.0;\n    vec2 ra = r*a;\n\n    // reflect part to fill circle\n    p = rayr(p, radians(120.0-90.0));\n    p = rayr(p, radians(60.0-90.0));\n    p = rayr(p, radians(30.0-90.0));\n    p = rayr(p, radians(15.0-90.0));\n\n    float lines =\n        min\n        (\n            min\n            (\n                min\n                (\n                    line(p,vec2(0),ra),\n                    line(p,ra,ra+vec2(r,0))\n                ),\n                min\n                (\n                    line(p,ra,vec2(ra.x,0)),\n                    line(p,ra+vec2(r,0),vec2(ra.x+r,0))\n                )\n            ),\n            line(p,ra+vec2(r,0), a/r/2.0)\n        );\n    return lines;\n}\n\nfloat triangle_square_tiled_dodecagon_pillars(vec3 p)\n{\n    float h = 1.0;\n    float s = sqrt(3.0);\n    float r = sqrt(2.0 - s); // radius of inner circle\n    //vec2 a = vec2(cos(radians(30.0)),sin(radians(30.0)));\n    vec2 a = vec2(s,1)/2.0;\n    vec2 ra = r*a;\n\n    float lines = line(p,vec3(vec2(0),-h),vec3(vec2(0),+h));\n\n    // reflect part to fill circle\n    p.xy = rayr(p.xy, radians(120.0-90.0));\n    p.xy = rayr(p.xy, radians(60.0-90.0));\n    p.xy = rayr(p.xy, radians(30.0-90.0));\n    p.xy = rayr(p.xy, radians(15.0-90.0));\n    \n    lines = min(lines, line(p,vec3(ra,-h),vec3(ra,+h)));\n    lines = min(lines, line(p,vec3(ra+vec2(r,0),-h),vec3(ra+vec2(r,0),+h)));\n\n    return lines;\n}\n*/\nfloat triangle_square_tiled_dodecagon(vec3 p)\n{\n    float d = triangle_square_tiled_dodecagon(p.xy);\n    return sqrt(d*d+p.z*p.z); // https://www.shadertoy.com/view/sdscDs insulate (jt)\n}\n\nfloat map(vec3 p)\n{\n    mat3 m = mat3(normalize(vec3(1,1,0)),normalize(vec3(-1,1,0)),vec3(0,0,1));\n    //return halfspace(p);\n    vec3 q = vec3(p.xy, repeat(p.z, 0.5, 1.0));\n    return\n        min\n        (\n            min(cylinder_part(m*p), cylinder_part(m*p*vec3(-1,-1,+1))),\n            //min(cylinder_part(2.0*m*p), cylinder_part(2.0*m*p*vec3(-1,-1,+1)))/2.0,\n            min(triangle_square_tiled_dodecagon(q), triangle_square_tiled_dodecagon_pillars(p)) - 0.01\n        );\n}\n\n// https://iquilezles.org/articles/normalsSDF tetrahedron normals\nvec3 normal(vec3 p) \n{\n    const float h = EPSILON;\n    const vec2 k = vec2(1,-1);\n    return normalize( k.xyy*map(p + k.xyy*h) + \n                      k.yyx*map(p + k.yyx*h) + \n                      k.yxy*map(p + k.yxy*h) + \n                      k.xxx*map(p + k.xxx*h) );\n}\n\nfloat trace(vec3 ro, vec3 rd, float t0, float t1)\n{\n    uint i;\n    float t;\n    for(t = t0, i = 0u; t < t1 && i < MAX_ITER; i++)\n    {\n        float h = map(ro + rd * t);\n        if(h < EPSILON)\n            return t;\n        t += h;\n    }\n    return MAX_DIST;\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat shadow(vec3 ro, vec3 rd, float t0, float t1)\n{\n    return trace(ro, rd, t0, t1) < t1 ? 0.0 : 1.0;\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat softshadow( in vec3 ro, in vec3 rd, float mint, float maxt, float k )\n{\n    uint i;\n    float res = 1.0;\n    float ph = 1e20;\n    \n    float t;\n    for(t=mint, i = 0u; t<maxt && i < MAX_ITER; i++)\n    {\n        float h = map(ro + rd*t);\n        if( h < EPSILON )\n            return 0.0;\n        float y = h*h/(2.0*ph);\n        float d = sqrt(h*h-y*y);\n        res = min( res, k*d/max(0.0,t-y) );\n        ph = h;\n        t += h;\n    }\n    return res;\n}\n\n// https://www.shadertoy.com/view/Xds3zN raymarching primitives\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.01 + 0.12*float(i)/4.0;\n        float d = map(pos + h*nor);\n        occ += (h-d)*sca;\n        sca *= 0.95;\n        if( occ>0.35 ) break;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 ) ;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 I )\n{\n    bool demo = all(lessThan(iMouse.xy, vec2(10.0)));\n    vec2 R = iResolution.xy;\n    //I = 2.0 * I.xy / R - 1.0;\n    //I.x *= R.x / R.y;\n    I = (2.0 * I - R) / R.y; // concise scaling thanks to Fabrice\n    float yaw = 2.0 * pi * float(iMouse.x) / float(R.x);\n    float pitch = pi - pi / 2.0 * float(iMouse.y) / float(R.y);\n    yaw = !demo ? yaw : 2.0 * pi * fract(iTime * 0.01);\n    pitch = !demo ? pitch : 1.5 * pi / 2.0;\n\n    vec3 ro = vec3(0.0, 0.0, -3.0);\n    vec3 rd = normalize(vec3(I.xy, 2.0)); // NOTE: omitting normalization results in clipped edges artifact\n\n    mat3 M = yaw_pitch_roll(yaw, pitch, 0.0);\n    ro = M * ro;\n    rd = M * rd;\n    \n    ro.z += 0.0;\n\n    float dist = trace(ro, rd, 0.0, MAX_DIST);\n    vec3 dst = ro + rd * dist;\n    vec3 n = normal(dst);\n\n    vec3 lightdir = normalize(vec3(cos(iTime/5.), sin(iTime/5.), 1.0));\n    vec3 ambient = vec3(0.1);\n    float brightness = max(dot(lightdir, n), 0.0);\n    if(brightness > 0.0) brightness *= shadow(dst + n * 0.01,lightdir, 0.0, MAX_DIST);\n    //if(brightness > 0.0) brightness *= softshadow(dst + n * 0.01,lightdir, 0.0, MAX_DIST, 100. );\n    vec3 color = vec3(1);\n    color = (n * 0.5 + 0.5);\n    color = (ambient * calcAO(dst, n) + brightness) * color;\n    //color = (ambient + calcAO(dst, n) * brightness) * color;\n\n    //color = mix(color, vec3(0.0), step(MAX_DIST, dist));\n    color = mix(color, vec3(0.0), smoothstep(MAX_DIST-1.0, MAX_DIST, dist));\n    \n    fragColor = vec4(sqrt(color), 1.0); // approximate gamma\n}\n","name":"Image","description":"","type":"image"}]}