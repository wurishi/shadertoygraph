{"ver":"0.1","info":{"id":"Wdd3Rf","date":"1569086760","viewed":145,"name":"Visualizer_","username":"redline2466","description":"Music visualizer! Press 'Reset Time' after starting to sync, and mute one of the audio channels\nbased on a javascript visualizer I made: http://battletrains.org/oscilloscope.html\nWIP","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["audio"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3Rn","filepath":"/media/a/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","previewfilepath":"/media/ap/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":2,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.1415926535897932384626433832795;\nconst float PI_2 = 1.57079632679489661923;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec4 data = texelFetch(iChannel1, ivec2(0,0), 0);\n\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 uvf = fragCoord.xy / min(iResolution.x, iResolution.y) - data.xy;\n    uvf.x -= abs(iResolution.x - iResolution.y) / min(iResolution.x, iResolution.y) / 2.;\n\n    int tx = int(uv.x*512.0);\n    \n    float angle = mod(atan(uvf.y - .5, uvf.x - .5) + data.w + PI, PI * 2.) - PI;\n\tfloat fft  = texture( iChannel0, vec2(round((angle + PI) / (2.*PI) * BAR_COUNT) / BAR_COUNT,0)).x; \n\n    float h0 = texture( iChannel0, vec2(uv.x-1./iResolution.x,1.)).x;\n    float h1 = texture( iChannel0, vec2(uv.x,1.)).x;\n\t\n    vec3 col = vec3(1.-abs(clamp(uv.y, min(h0, h1), max(h0, h1)) - uv.y)*10., 0., 0.);\n    if(col.x > .975)\n        col = col.xxx;\n    else\n        col *= .2;\n\n    float dist = distance(vec2(.5,.5), uvf) * 2.;\n    if(dist < data.z)\n        col = vec3(0.);\n    else if(dist < fft) {\n        float a2 = angle + data.w * RAINBOW_SPIN_MOD;\n        col = vec3(sin(a2+PI*2./3.), sin(a2), sin(a2-PI*2./3.)) + col * (1.-fft);\n    } else if(dist < fft + .1)\n        col = vec3((fft + .1 - dist) * 10., 0., 0.) + col * (1. - (fft + .1 - dist) * 10.);\n\t\n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4df3Rn","filepath":"/media/a/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","previewfilepath":"/media/ap/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float PI = 3.1415926535897932384626433832795;\nconst float PI_2 = 1.57079632679489661923;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord) {\n    if(fragCoord.x > 2. || fragCoord.y > 1.)\n        discard;\n    if(fragCoord.x > 1.) {\n        // particle index (WIP)\n    } else {\n        vec4 last = texelFetch(iChannel1, ivec2(0,0), 0);\n        vec2 react = vec2(0.);\n        float intensity = .1;\n        float rotation = last.w;\n        for(int i = 0; i < 512; i++) {\n            float a = texelFetch(iChannel0, ivec2(i,0), 0).x;\n            float angle = float(i)/512.*2.*PI;\n            intensity += a * INTENSITY_MOD;\n            react += vec2(cos(angle),sin(angle)) * a;\n        }\n        react = vec2(\n            react.x * cos(rotation) + react.y * sin(rotation),\n            -react.x * sin(rotation) + react.y * cos(rotation)) * REACT_MOD;\n\n        rotation += intensity * iTimeDelta * ROTATION_MOD;\n        rotation += max(0., intensity - last.z) * IMPULSE_ROTATION_MOD;\n        fragColor = vec4(react, intensity, rotation);\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define INTENSITY_MOD 1./2300.\n#define REACT_MOD .0025\n#define ROTATION_MOD .5\n#define IMPULSE_ROTATION_MOD 5.\n#define RAINBOW_SPIN_MOD 100.\n#define BAR_COUNT 256.","name":"Common","description":"","type":"common"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":2,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    fragColor = texelFetch(iChannel2, ivec2(fragCoord), 0);\n    // WIP particles\n}","name":"Buffer B","description":"","type":"buffer"}]}