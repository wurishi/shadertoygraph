{"ver":"0.1","info":{"id":"cds3zX","date":"1666560177","viewed":152,"name":"Artober - Mazifique","username":"Flopine","description":"Day 20 of october's challenge!","likes":20,"published":1,"flags":0,"usePreview":1,"tags":["raymarching","animation","truchet","pattern","everyday"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan, slerpy, wwrighter \n// BigWings, FabriceNeyret and Blackle for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  \n// https://twitter.com/CookieDemoparty\n\n\n#define PI acos(-1.)\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n\n#define noise(u) textureLod(iChannel0, u, 0.).x\n\nstruct obj {\n    float d;\n    vec3 scol;\n    vec3 lcol;\n};\n\nobj minobj (obj a, obj b)\n{\n    if(a.d < b.d) return a;\n    else return b;\n}\n\nfloat truchet (vec2 uv)\n{\n    vec2 id = floor(uv);\n    uv = fract(uv)-.5;\n    if (noise(id*0.15)<.5) uv.x*= -1.;\n\n    vec2 uu = uv;\n    float s = (uv.x > -uv.y) ? 1.: -1.;\n    uv.x -= .5*s;\n    float d = abs(uv.x+uv.y);\n    \n    return d;\n}\n\nfloat extrude (vec3 p, float d, float h)\n{\n    vec2 q = vec2(d, abs(p.z)-h);\n    return min(0., max(q.x, q.y))+length(max(q, 0.));\n}\n\nobj SDF (vec3 p)\n{   \n    p.x += iTime;\n    \n    p.yz*= rot(-atan(1./sqrt(2.)));   \n    float t = truchet(p.xz)*.5;\n    p.xz *= rot(PI/4.);\n   \n    obj e = obj( extrude(p.xzy, t, 0.4)-0.03, vec3(0.1, 0.5, 0.), vec3(0.99,0.9,.1) );\n    \n    p.y +=  t;\n    obj g = obj( abs(p.y)-0.2, vec3(0.7, 0.1, 0.5), vec3(0.99, 0.9, 0.99) );\n    \n    return minobj(e, g);\n}\n\nvec3 gn (vec3 p)\n{\n    vec2 eps = vec2(0.001, 0.);\n    return normalize( SDF(p).d-vec3(SDF(p-eps.xyy).d, SDF(p-eps.yxy).d, SDF(p-eps.yyx).d) );   \n}\n\nfloat AO (vec3 p, vec3 n, float e)\n{return clamp(SDF(p+e*n).d/e, 0., 1. );}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    vec3 ro = vec3(uv*4., -30.), rd=vec3(0.,0.,1.),p=ro,\n    col = vec3(0.), l = normalize(vec3(0.5, 0.1, -2.));\n    \n    obj O;    \n    for(float i=0.; i<64.; i++)\n    {\n        O = SDF(p);\n        if (O.d<0.001) break;\n        p += O.d*rd;\n    }\n  \n    vec3 n = gn(p);\n    float li = max(dot(n,l), 0.);\n    float ao = AO(p,n,0.05)+AO(p,n,0.1)+AO(p,n,0.2);\n    col = mix(O.scol, O.lcol, li)*ao/2.5;\n    \n    // Output to screen\n    fragColor = vec4(sqrt(col),1.0);\n}","name":"Image","description":"","type":"image"}]}