{"ver":"0.1","info":{"id":"dljcRz","date":"1691428777","viewed":243,"name":"Dilate and Erode","username":"servostar","description":"Implementation of dilation and erosion filter with 3 different kernel shapes: box, diamond and circle.","likes":3,"published":3,"flags":0,"usePreview":1,"tags":["filter","convolution","erosion","dilation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n//#define DIAMOND_KERNEL\n#define CIRCULAR_KERNEL\n\nfloat luminance(in vec3 rgb)\n{\n    return dot(rgb, vec3(0.21, 0.72, 0.07));\n}\n\n/**\n* Intensifies the brightest pixels of the applied kernel based on the luminance() function\n*/\nvec3 dilate(in sampler2D tex, in vec2 uv, in int size, in float sep, in float minb, in float maxb)\n{\n    vec3 cc = texture(tex, uv).rgb;\n    vec3 tc = cc;\n    float cl = luminance(cc);\n\n    vec2 texSize = sep/vec2(textureSize(tex, 0));\n\n    for (int x = -size; x <= size; ++x)\n    for (int y = -size; y <= size; ++y)\n    {\n        // default kernel is box shaped\n        \n        // diamond shaped kernel (45° rotated square)\n        #if defined(DIAMOND_KERNEL)\n        \n        if (abs(x) > size - abs(y))\n            continue;\n\n        #elif defined(CIRCULAR_KERNEL)\n        \n        if (distance(vec2(x, y), vec2(0, 0)) > float(size))\n            continue;\n            \n        #endif\n    \n        vec3 s = texture(tex, uv + vec2(x,y)*texSize).rgb;\n        float b = luminance(s);\n        \n        if (cl < b)\n        {\n            cl = b;\n            tc = s;\n        }\n    }\n    \n    return mix(cc, tc, smoothstep(minb, maxb, cl));\n}\n\n/**\n* Intensifies the darkest pixels of the applied kernel based on the luminance() function\n*/\nvec3 erode(in sampler2D tex, in vec2 uv, in int size, in float sep, in float minb, in float maxb)\n{\n    vec3 cc = texture(tex, uv).rgb;\n    vec3 tc = cc;\n    float cl = luminance(cc);\n\n    vec2 texSize = sep/vec2(textureSize(tex, 0));\n\n    for (int x = -size; x <= size; ++x)\n    for (int y = -size; y <= size; ++y)\n    {\n        // default kernel is box shaped\n        \n        // diamond shaped kernel (45° rotated square)\n        #if defined(DIAMOND_KERNEL)\n        \n        if (abs(x) > size - abs(y))\n            continue;\n\n        #elif defined(CIRCULAR_KERNEL)\n        \n        if (distance(vec2(x, y), vec2(0, 0)) > float(size))\n            continue;\n            \n        #endif\n    \n        vec3 s = texture(tex, uv + vec2(x,y)*texSize).rgb;\n        float b = luminance(s);\n        \n        if (cl > b)\n        {\n            cl = b;\n            tc = s;\n        }\n    }\n    \n    return mix(tc, cc, smoothstep(minb, maxb, cl));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n\n    float separation = (uv.x)*1.5;\n\n    vec3 dilation = dilate(iChannel0, uv, 16, separation, 0.0, 1.0);\n    vec3 erosion  = erode (iChannel0, uv, 16, separation, 0.0, 1.0);\n    \n    vec3 col = uv.x > 0.0 ? erosion : dilation;\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}