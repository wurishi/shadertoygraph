{"ver":"0.1","info":{"id":"Ds2XDV","date":"1671001751","viewed":168,"name":"[zznewclear13]Triangle Wallpaper","username":"zznewclear13","description":"A triangle wallpaper. Maybe colorize triangles next time.","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["2d","triangles","wallpaper"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define AMOUNT 10.0f\n#define TIME_PERIOD 3.0f\n#define CIRCLE_RADIUS 3.0f\n#define LINE_WIDTH 5.0f\n\n// Use Catmull-Rom spline for smooth movement.\nvec2 getHexPos(vec2 hexID, float time, float margin)\n{\n    float beginTime = hash12(hexID);\n    float timePhase = iTime / TIME_PERIOD + beginTime;\n    float timeFrame = floor(timePhase);\n    float deltaTime = fract(timePhase);\n    \n    vec2 hexPos0 = randomPointInHexagon(hash23(vec3(hexID, timeFrame)));\n    vec2 hexPos1 = randomPointInHexagon(hash23(vec3(hexID, timeFrame + 1.0f)));\n    vec2 hexPos2 = randomPointInHexagon(hash23(vec3(hexID, timeFrame + 2.0f)));\n    vec2 hexPos3 = randomPointInHexagon(hash23(vec3(hexID, timeFrame + 3.0f)));\n    \n    vec2 hexPos = catmull_rom(hexPos0, hexPos1, hexPos2, hexPos3, deltaTime);\n    hexPos = hexPos * (1.0f - (0.5f * margin * AMOUNT / iResolution.y) / 0.5f);\n    \n    return hexPos;\n}\n\n// Get HexUV for neighbour hexagons.\nvec2 getHexUV(ivec2 centerHexID, ivec2 offset, float time, float margin)\n{\n    ivec2 hexID = centerHexID + offset;\n    vec2 fHexID = vec2(hexID);\n    vec2 hexPos = getHexPos(fHexID, time, margin);\n    vec2 hexCenter = hexagonCenFromID(hexID);\n    return hexCenter + hexPos;\n}\n\nvec3 getColor(vec2 hexCenter)\n{\n    // Some arbitrary t for palette.\n    float t = sin(hexCenter.x + iTime * 0.3f) + cos(hexCenter.y + iTime * 0.9f);\n    return pal( t, vec3(0.7,0.9,0.7),vec3(0.7,0.6,0.6),vec3(1.0,1.0,1.0),vec3(0.0,0.33,0.67) );\n}\n\n// Draw line with width in pixels.\nvec4 drawLine(vec2 uv, vec2 centerUV1, vec3 color1,\n              vec2 centerUV2, vec3 color2, float width)\n{\n    vec2 offset = uv - centerUV1;\n    vec2 dir = centerUV2 - centerUV1;\n    float lenDir = length(dir);\n    float h = clamp(dot(offset, dir) / (lenDir * lenDir), 0.0f, 1.0f);\n    vec3 color = mix(color1, color2, h);\n    \n    float dist = length(offset - dir * h);\n    float scaledRatio = iResolution.y / 288.0f;\n    float scaledLen = lenDir / scaledRatio;\n    float distanceBasedScale = 1000.0f / (scaledLen*scaledLen + 1000.0f);\n    distanceBasedScale = mix(distanceBasedScale, 1.0f, (h-0.5f)*(h-0.5f)*4.0f);\n    float halfWidth = width * 0.5f * scaledRatio * distanceBasedScale;\n    float alpha = smoothstep(halfWidth + 1.5f, halfWidth, dist);\n    return vec4(color * alpha, alpha);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // I prefer pixel unit.\n    vec2 uv = fragCoord;\n    float pixelCount = iResolution.y / AMOUNT;\n    float invPixelCount = 1.0f / pixelCount;\n\n    ivec2 hexID = hexagonID(uv * invPixelCount);\n    vec2 fHexID = vec2(hexID);\n\n    float margin = CIRCLE_RADIUS + 1.5f;\n    // Find all neighbours.\n    vec2 uv0 = getHexUV(hexID, ivec2( 0,  0), iTime, margin) * pixelCount;\n    vec2 uv1 = getHexUV(hexID, ivec2( 2,  0), iTime, margin) * pixelCount;\n    vec2 uv2 = getHexUV(hexID, ivec2( 1,  1), iTime, margin) * pixelCount;\n    vec2 uv3 = getHexUV(hexID, ivec2(-1,  1), iTime, margin) * pixelCount;\n    vec2 uv4 = getHexUV(hexID, ivec2(-2,  0), iTime, margin) * pixelCount;\n    vec2 uv5 = getHexUV(hexID, ivec2(-1, -1), iTime, margin) * pixelCount;\n    vec2 uv6 = getHexUV(hexID, ivec2( 1, -1), iTime, margin) * pixelCount;\n\n    // And their colors.\n    vec3 color0 = getColor(fHexID + vec2( 0.0f,  0.0f));\n    vec3 color1 = getColor(fHexID + vec2( 2.0f,  0.0f));\n    vec3 color2 = getColor(fHexID + vec2( 1.0f,  1.0f));\n    vec3 color3 = getColor(fHexID + vec2(-1.0f,  1.0f));\n    vec3 color4 = getColor(fHexID + vec2(-2.0f,  0.0f));\n    vec3 color5 = getColor(fHexID + vec2(-1.0f, -1.0f));\n    vec3 color6 = getColor(fHexID + vec2( 1.0f, -1.0f));\n    \n    // Draw lines.\n    vec4 line = vec4(0.0f, 0.0f, 0.0f, 0.0f);\n    line = max(line, drawLine(uv, uv0, color0, uv1, color1, LINE_WIDTH));\n    line = max(line, drawLine(uv, uv0, color0, uv2, color2, LINE_WIDTH));\n    line = max(line, drawLine(uv, uv0, color0, uv3, color3, LINE_WIDTH));\n    line = max(line, drawLine(uv, uv0, color0, uv4, color4, LINE_WIDTH));\n    line = max(line, drawLine(uv, uv0, color0, uv5, color5, LINE_WIDTH));\n    line = max(line, drawLine(uv, uv0, color0, uv6, color6, LINE_WIDTH));\n  \n    line = max(line, drawLine(uv, uv1, color1, uv2, color2, LINE_WIDTH));\n    line = max(line, drawLine(uv, uv2, color2, uv3, color3, LINE_WIDTH));\n    line = max(line, drawLine(uv, uv3, color3, uv4, color4, LINE_WIDTH));\n    line = max(line, drawLine(uv, uv4, color4, uv5, color5, LINE_WIDTH));\n    line = max(line, drawLine(uv, uv5, color5, uv6, color6, LINE_WIDTH));\n    line = max(line, drawLine(uv, uv6, color6, uv1, color1, LINE_WIDTH)); \n       \n    vec3 color = vec3(line.rgb);\n    color = pow(color, vec3(0.4545f));\n    fragColor = vec4(color, 1.0f);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define SQRT_3 1.732050807\n#define INV_6 0.16666666667\n\n// From Dave_Hoskins' Hash without Sine \n// https://www.shadertoy.com/view/4djSRW\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec2 hash23(vec3 p3)\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\n// From iq's Hexagonal Grid Traversal - 3D\n// https://www.shadertoy.com/view/WtSfWK\nint mod3( int n )\n{\n    return (n<0) ? 2-((2-n)%3) : n%3;\n}\n\n// I flipped x and y axes and scaled by 2/sqrt(3)\nivec2 hexagonID( vec2 p ) \n{\n    p.xy = p.yx * 2.0f / SQRT_3;\n    const float k3 = SQRT_3;\n\tvec2 q = vec2( p.x, p.y*k3*0.5 + p.x*0.5 );\n\n    ivec2 pi = ivec2(floor(q));\n\tvec2  pf =       fract(q);\n    \n\tint v = mod3(pi.x+pi.y);\n\n\tint   ca = (v<1)?0:1;\n\tint   cb = (v<2)?0:1;\n    ivec2 ma = (pf.x>pf.y)?ivec2(0,1):ivec2(1,0);\n    \n\tivec2 id = pi + ca - cb*ma;\n    \n    return ivec2( id.x, id.y - (id.x+id.y)/3 );\n}\n\nvec2 hexagonCenFromID( in ivec2 id )\n{\n    const float k3 = SQRT_3;\n    return vec2(float(id.y)*k3, float(id.x)) * SQRT_3 / 2.0f;\n}\n\n// Generate random point in hexagon\n// Cellular-based Statistical Model for Mobile Dispersion, Mouhamed Abdulla\n// http://arxiv.org/abs/1306.0162\nfloat randomXInHexagon(float t)\n{\n    if(t <= INV_6)\n    {\n        return sqrt(1.5f*t)-1.0f;\n    }\n    else if(t <= 1.0f-INV_6)\n    {\n        return 0.75f*(2.0f*t-1.0f);\n    }\n    else\n    {\n        return 1.0f-sqrt(1.5f*(1.0f-t));\n    }\n}\n\nfloat randomYInHexagon(float x, float t)\n{\n    if(x <= -0.5f)\n    {\n        return mix(-SQRT_3*(x+1.0f), SQRT_3*(x+1.0f), t);\n    }\n    else if(x <= 0.5f)\n    {\n        return mix(-0.5f*SQRT_3, 0.5f*SQRT_3, t);\n    }\n    else\n    {\n        return mix(-SQRT_3*(1.0f-x), SQRT_3*(1.0f-x), t);\n    }\n}\n\nvec2 randomPointInHexagon(vec2 randomVal)\n{\n    float x = randomXInHexagon(randomVal.x);\n    float y = randomYInHexagon(x, randomVal.y);\n    return vec2(x, y);\n}\n\n// From https://www.mvps.org/directx/articles/catmull/\nvec2 catmull_rom(vec2 p0, vec2 p1, vec2 p2, vec2 p3, float t)\n{\n    vec4 tVec = vec4(1.0f, t, t*t, t*t*t);\n    vec4 px = vec4(p0.x, p1.x, p2.x, p3.x);\n    vec4 py = vec4(p0.y, p1.y, p2.y, p3.y);\n    mat4 characterMat = mat4(0.0f, -1.0f, 2.0f, -1.0f,\n                            2.0f, 0.0f, -5.0f, 3.0f,\n                            0.0f, 1.0f, 4.0f, -3.0f,\n                            0.0f, 0.0f, -1.0f, 1.0f);\n    float xPos = 0.5f * dot(tVec, characterMat * px);\n    float yPos = 0.5f * dot(tVec, characterMat * py);  \n    return vec2(xPos, yPos);    \n}\n\n// From iq's Palettes\n// https://www.shadertoy.com/view/ll2GD3\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n","name":"Common","description":"","type":"common"}]}