{"ver":"0.1","info":{"id":"mlKyRK","date":"1700441450","viewed":564,"name":"Passage [320]","username":"Xor","description":"I want to see a maze in polar coordinates, so I made this","likes":38,"published":1,"flags":0,"usePreview":0,"tags":["3d","maze","golf","sub512"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n    \"Passage\" by @XorDev\n    \n    X: X.com/XorDev/status/1726396476866044130\n    Twigl: twigl.app?ol=true&ss=-Nje8mOER98sqMpHsal-\n    \n    <512 chars playlist: https://www.shadertoy.com/playlist/N3SyzR\n    -10 Thanks to FabriceNeyret2\n    -8 Thanks to lluic\n*/\n\nvoid mainImage(out vec4 O, vec2 I)\n{\n    //Clear fragcolor\n    O *= 0.;\n    \n    //Raymarch loop:\n    //iterator, step-size, raymarch distance, Tau\n    //Raymarchs 100 times adding brightness when close to a surface\n    for(float i,s,d,T=6.283; i++<1e2; O+=1e-5/(.001-s))\n    {\n        //Rotation matrix\n        mat2 R = mat2(8,6,-6,8)*.1;\n        //Resolution for scaling\n        vec3 r = iResolution,\n        //Project sample with roll rotation and distance\n        p = vec3((I+I-r.xy)/r.x*d*R, d-9.)*.7;\n        //Rotate pitch\n        p.yz *= R;\n        //Step forward (negative for code golfing reasons)\n        d -= s = min(p.z, cos(dot(\n            //Compute subcell coordinates\n            modf(fract((\n            //Using polar-log coordinates\n            vec2(atan(p.y,p.x),log(s=length(p.xy)))/T-iTime/2e1)*\n            //Rotate 45 degrees and scale repetition\n            mat2(p/p,-1))*15., p.xy),\n        //Randomly flip cells and correct for scaling\n        sign(cos(p.xy+p.y)))*T)*s/4e1);\n    }\n}\n\n//[339]\n/*\nvoid mainImage(out vec4 O, vec2 I)\n{\n    //Clear fragcolor\n    O *= 0.;\n    \n    //Raymarch loop:\n    //iterator, step-size, raymarch distance, Tau\n    //Raymarchs 100 times adding brightness when close to a surface\n    for(float i,s,d,z,T=acos(-1.)*2.; i++<1e2; O+=1e-5/(.001-s))\n    {\n        //Rotation matrix\n        mat2 R = mat2(8,6,-6,8)*.1;\n        //Resolution for scaling\n        vec3 r = iResolution,\n        //Project sample with roll rotation and distance\n        p = vec3((I+I-r.xy)/r.x*d*R, d-9.)*.7;\n        //Rotate pitch\n        p.yz *= R;\n        z = p.z;\n        //Step forward (negative for code golfing reasons)\n        d -= s = min(z, cos(dot(\n            //Compute subcell coordinates\n            modf(fract((\n            //Using polar-log coordinates\n            vec3(atan(p.y,p.x),log(s=length(p.xy)),0)/T-iTime/2e1)*\n            //Rotate 45 degrees and scale repetition\n            mat3(1,1,0,1,-1,0,p-p))*15., p),\n        //Randomly flip cells and correct for scaling\n        sign(cos(p+p.y)))*T)*s/4e1);\n    }\n}\n*/","name":"Image","description":"","type":"image"}]}