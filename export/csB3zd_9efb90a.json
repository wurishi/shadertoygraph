{"ver":"0.1","info":{"id":"csB3zd","date":"1668008270","viewed":94,"name":"Descente dans le DÃ©dale","username":"LoganOracio","description":"neon lights go BRRRRRRR","likes":5,"published":1,"flags":32,"usePreview":0,"tags":["raymarch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float inv_sqrt_2pi = 0.3989422804014327;\nfloat gaussianf(float sigma, float dist)\n{\n    float a = dist / sigma;\n    return (inv_sqrt_2pi / sigma ) * exp( -0.5 * a * a );\n}\nvec4 fast_gaussian_blur(sampler2D image, vec2 uv,vec2 resolution, vec2 direction, float blur)\n{\n    vec4 color = vec4(0.0);\n    float coef = gaussianf(blur,0.0);\n    color += texture(image, uv) * coef;\n    float kernel_s = blur * 4.0;\n    float prev = gaussianf(blur, 0.0);\n    for (float i = 0.0; i < kernel_s; i++) {\n        float w1 = prev; \n        float w2 = gaussianf(blur, i + 1.0);\n        prev = w2;\n        float c = w1 + w2;\n        vec2 off1 = vec2((i * w1 + (i + 1.0) * w2) / c) * direction / resolution;\n        color += texture(image, uv + off1 ) * c;\n        color += texture(image, uv - off1 ) * c;\n        coef += c + c;\n    }\n\n    return color/coef;\n}\nvec3 thin_film_interference(float fresnel)\n{\n    fresnel = mod(fresnel,1.0);\n    float z = pow((mod(fresnel*3.0,1.0)-0.5)*2.0,2.0);\n    if(fresnel<0.333)\n    {\n        return z*mix(vec3(0.0,1.0,1.0),vec3(1.0,0.0,1.0),fresnel*3.0);\n    }\n    else if(fresnel<0.666)\n    {\n        return z*mix(vec3(1.0,0.0,1.0),vec3(1.0,1.0,0.0),(fresnel-0.333)*3.0);\n    }\n    else\n    {\n        return z*mix(vec3(1.0,1.0,0.0),vec3(0.0,1.0,1.0),(fresnel-0.666)*3.0);\n    }\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 buf1 = texture(iChannel0,uv);\n    \n    vec2 dir = vec2(dFdx(buf1.w),dFdy(buf1.w));\n    vec3 col = fast_gaussian_blur(iChannel0,uv,iResolution.xy,dir,20.0).xyz;\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Some of the Ray Marching stuff taken from mrange:\n\n// CC0: Wednesday messing around\n#define MAX_RAY_LENGTH  500.0\n#define MAX_RAY_MARCHES 200\n#define TOLERANCE       0.001\n#define NORM_OFF        0.01\n\nint g_hit     = 0;\n\nconst float raymarchFactor = 0.99;\n\nfloat smax(float a, float b, float k)\n{\n    return log(exp(k*a)+exp(k*b))/k;\n}\nfloat smin(float a, float b, float k)\n{\n    return -log(exp(k*-a)+exp(k*-b))/k;\n}\n\n\nfloat df(vec3 p) {\n    vec3 c = vec3(5.0);\n    vec3 q = mod(p+0.5*c,c)-0.5*c;\n    \n    return smin(smax(abs(q.y),abs(q.x),20.0),smin(smax(abs(q.x),abs(q.z),20.0),smax(abs(q.y),abs(q.z),20.0),30.0),30.0)-0.4;\n}\n\nfloat rayMarch(vec3 ro, vec3 rd, float ti) {\n  float t = ti;\n  int i = 0;\n  vec2 dti = vec2(1e10,0.0);\n  for (i = 0; i < MAX_RAY_MARCHES; i++) {\n    float d = df(ro + rd*t);\n    if (d < TOLERANCE) g_hit = 1;\n    if (d < TOLERANCE || t > MAX_RAY_LENGTH) break;\n    if (d<dti.x) { dti=vec2(d,t); }\n    t += raymarchFactor*d;\n  }\n  if(i==MAX_RAY_MARCHES) { t=dti.y; }\n  return t;\n}\n\nvec3 normal(vec3 pos) {\n  vec2  eps = vec2(NORM_OFF,0.0);\n  vec3 nor;\n  nor.x = df(pos+eps.xyy) - df(pos-eps.xyy);\n  nor.y = df(pos+eps.yxy) - df(pos-eps.yxy);\n  nor.z = df(pos+eps.yyx) - df(pos-eps.yyx);\n  return normalize(nor);\n}\n\n\nvec3 spiral(float time)\n{\n    time *= .1;\n    return vec3(3.0*cos(time*3.14159265358979),-time*10.0+2.5,3.0*sin(time*3.14159265358979));\n}\nvec3 thin_film_interference(float fresnel)\n{\n    fresnel = mod(fresnel,1.0);\n    float z = pow((mod(fresnel*3.0,1.0)-0.5)*2.0,2.0);\n    if(fresnel<0.333)\n    {\n        return z*mix(vec3(0.0,1.0,1.0),vec3(1.0,0.0,1.0),fresnel*3.0);\n    }\n    else if(fresnel<0.666)\n    {\n        return z*mix(vec3(1.0,0.0,1.0),vec3(1.0,1.0,0.0),(fresnel-0.333)*3.0);\n    }\n    else\n    {\n        return z*mix(vec3(1.0,1.0,0.0),vec3(0.0,1.0,1.0),(fresnel-0.666)*3.0);\n    }\n}\nvec4 render(vec2 p) {\n  \n  vec3 ro = spiral(iTime);\n  vec3 la = spiral(iTime+0.1);\n  vec3 ww = normalize(la-ro);\n  vec3 uu = normalize(cross(vec3(0.0,1.0,0.0), ww ));\n  vec3 vv = normalize(cross(ww,uu));\n  const float fov = 1.0;\n  vec3 rd = normalize(-p.x*uu + p.y*vv + fov*ww );\n  \n  g_hit = -1;\n  float t = rayMarch(ro, rd, 1.0);\n  int hit = g_hit;\n  \n  vec4 col = vec4(0.0);\n  if (hit==1) {\n    vec3 p = ro + rd*t;\n    vec3 n = normal(p);\n    vec3 r = reflect(rd, n);\n    \n    col.xyz = thin_film_interference(0.2+3.3*(1.0-abs(dot(n,rd))));\n    col.xyz /= (1.0+pow(t/50.0,2.0));\n    col.w = (1.0-abs(dot(n,rd)));\n  }\n  return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord*2.0-iResolution.xy)/iResolution.y;\n\n    vec4 col = render(uv);\n\n    fragColor = col;\n}","name":"Buffer A","description":"","type":"buffer"}]}