{"ver":"0.1","info":{"id":"ftVcDd","date":"1662467163","viewed":79,"name":"Bernstein Polynomials and Roots","username":"Envy24","description":"https://en.wikipedia.org/wiki/Bernstein_polynomial\nMultiple roots at x=0 and x=1 by definition)","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["basis","bernstein","roots","polynomials"],"hasliked":0,"parentid":"NlccWS","parentname":"Chebyshev Polynomials and Roots"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define R                           iResolution\n#define AR                        ( R.x / R.y )                      // Aspect ratio (AR > 1.0).\n#define TO_CENTERED_NDC(SC)       ( ((SC)+(SC)-R.xy) / R.y )         // in range x=[-AR; AR], y=[-1.0; 1.0]\n#define UNIT                      (  3.0 / R.y  )\n#define SMAA(x)                     ( smoothstep(UNIT, 0., x) )\n#define LMB_IS_HOLD               ( iMouse.z > 0.0 )\n#define PI                          3.1415926535897932\n#define TO_RAD                      0.017453292519943295        // Convert degrees to radians\n#define NZMX                      ( (iMouse.x+iMouse.x-R.x) / R.x )  // in range [-1.0; 1.0]\n\nfloat vertical_line(vec2 NDC, float x0) { return SMAA(abs(NDC.x-x0)); }\nfloat horizontal_line(vec2 NDC, float y0) { return SMAA(abs(NDC.y-y0)); }\nfloat y_axis(vec2 NDC) { return SMAA(abs(NDC.x)); }\nfloat x_axis(vec2 NDC) { return SMAA(abs(NDC.y)); }\nfloat draw_func(vec2 NDC, float f, float dfdx)\n{\n    float df   = NDC.y - f;\n    return SMAA(abs(df) / sqrt(1.0 + dfdx * dfdx));\n}\n\nfloat BernsteinPolynomial(float x, int degree, int idx)\n{    \n    float inv_x = 1. - x,\n          power = 1.,\n          inv_power = 1.;\n    \n    for (int d = 0; d < idx; ++d)\n    {\n        power *= x;\n    }\n    \n    int e = max(degree - idx, 0);\n    for (int d = 0; d < e; ++d)\n    {\n        inv_power *= inv_x;\n    }\n    \n    return \n        idx < 0 || idx > degree ?\n            0. :\n            float(binomialCoefficient32(degree, idx)) * power * inv_power;\n}\n\nfloat DFDX(float x, int degree, int idx)\n{\n    return float(degree) *\n        (BernsteinPolynomial(x, degree - 1, idx - 1) - BernsteinPolynomial(x, degree - 1, idx));\n}\n\n#define func(x, degree, index)   ( BernsteinPolynomial(x, degree, index) )\n#define dfdx(x, degree, index)   ( DFDX(x, degree, index) )\n\nvoid mainImage( out vec4 O, in vec2 SC )\n{\n#define GSCALE 0.75\n#define YSCALE 1.0\n#define OFFSET vec2(0.75, 0.65)\n\n    vec2 NDC = \n        LMB_IS_HOLD ?\n            GSCALE*(TO_CENTERED_NDC(SC-(iMouse.xy-R.xy*0.5))+OFFSET) :\n            GSCALE*(TO_CENTERED_NDC(SC)+OFFSET);\n            \n    vec3 color = vec3(1.);\n         color -= x_axis(NDC); color -= y_axis(NDC);\n         color -= horizontal_line(NDC, 1.) * 0.2; color -= vertical_line(NDC, 1.)* 0.2;\n\n    float degree = 0., max_degree = 13.;\n    transition(iFrame, 60, degree);\n    degree = mod(degree, max_degree);\n    //degree = min(max_degree-1., 8.);\n\n    //float k = 4.; for (float i = k; i <= k; i += 1.)\n    for (float i = 0.; i <= degree; i += 1.)\n    {\n        float dx = 0.01,\n              y = func(NDC.x, int(degree), int(i)),\n              yn = func(NDC.x+dx, int(degree), int(i));\n\n         vec3 c = vec3ui3hash(uint(i), uint(i+1.), uint(i+2.+degree));\n              c = (c + 1.) * 0.5;\n\n         color = mix(color, c, draw_func(NDC, YSCALE*y, YSCALE*(yn-y)/dx));\n         //color = mix(color, c, draw_func(NDC, YSCALE*y, YSCALE*dfdx(NDC.x, int(degree), int(i)) ));\n    }\n    \n    if (degree != 0.)\n    {\n        color = mix(color, vec3(1, 0, 1), SMAA(diskSDF_L2(NDC, vec2(0., 0.), UNIT*2.5)));\n        color = mix(color, vec3(1, 0, 1), SMAA(diskSDF_L2(NDC, vec2(1., 0.), UNIT*2.5)));\n    }\n        \n    O = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/* Returns sine modulated value in range [min, max]. */\nfloat sinOSC(in float min, in float max, in float T)\n{\n    float v = (sin(T) + 1.0) * 0.5; // map T to [0.0, 1.0];\n    return min + v * (max - min);   // map T to [min, max];\n}\n\nfloat diskSDF_L2(vec2 NDC, vec2 C, float R)\n{\n    return length(C - NDC)-R;\n}\n\n/* Every num_of_frames returns true \nand number of detected transitions. */\nbool transition(\n    in int frame,\n    in int num_of_frames,\n    inout float quotent)\n{\n    // Convert to float.\n    float f = float(frame == 0 ? 1 : frame);\n    float inv = 1.0 / float(num_of_frames);\n    \n    // Calculate previous and current quotents.\n    float prev = floor(f * inv);\n    quotent = floor((f - 1.0) * inv);\n    \n    return quotent < prev;\n}\n\nfloat segmentSDF_L2(\n    in vec2 NDC,\n    in vec2 B,   \n    in vec2 E)\n{\n    vec2 BP = NDC - B, BE = E - B;\n    return length(BP - BE * clamp(dot(BP, BE) / dot(BE, BE), 0.0, 1.0));\n}\n\n/* \n    Returns random vec3([-1.0; 1.0], [-1.0; 1.0], [-1.0; 1.0]).\n*/\nvec3 vec3ui3hash(\n    const uint x,\n    const uint y,\n    const uint z)\n{\n    // Pick some enthropy source values.\n    // Try different values.\n    const uint entropy0 = 1200u;\n    const uint entropy1 = 4500u;\n    const uint entropy2 = 6700u;\n    const uint entropy3 = 8900u;\n\n    // Use linear offset method to mix coordinates.\n    uint value0 = z * entropy3 * entropy2 + y * entropy2 + x;\n    uint value1 = y * entropy3 * entropy2 + x * entropy2 + z;\n    uint value2 = x * entropy3 * entropy2 + z * entropy2 + y;\n\n    // Calculate hash.\n\tvalue0 += entropy1; value0 *= 445593459u; value0 ^= entropy0;\n    value1 += entropy1; value1 *= 445593459u; value1 ^= entropy0;\n    value2 += entropy1; value2 *= 445593459u; value2 ^= entropy0;\n\n    // 2.0f / 4294967295.0f = 4.6566128730773926e-10\n\n    return vec3(\n        float(value0 * value0 * value0) * 4.6566128730773926e-10f - 1.0f,\n        float(value1 * value1 * value1) * 4.6566128730773926e-10f - 1.0f,\n        float(value2 * value2 * value2) * 4.6566128730773926e-10f - 1.0f);\n}\n\n/* Binomial coefficients */\nuint factorialTableM12(int n)\n{\n    switch (n)\n    {\n    case 0:\n    case 1: return 1u;\n    case 2: return 2u;\n    case 3: return 6u;\n    case 4: return 24u;\n    case 5: return 120u;\n    case 6: return 720u;\n    case 7: return 5040u;\n    case 8: return 40320u;\n    case 9: return 362880u;\n    case 10: return 3628800u;\n    case 11: return 39916800u;\n    case 12: return 479001600u;\n    default: break;\n    }\n    return 0u;\n}\n\nuint binomialCoefficient32(\n    int rowIdx, // [0; 34]\n    int colIdx) // [0; 34]\n{\n    if (rowIdx == 0 || colIdx == 0 || rowIdx == colIdx) { return 1u; }\n    if (rowIdx <= 12)\n    {\n        return\n            factorialTableM12(rowIdx) /\n            (factorialTableM12(colIdx) * factorialTableM12(rowIdx - colIdx));\n            //max((factorialTableM12(colIdx) * factorialTableM12(rowIdx - colIdx)), 1u); // 1\n    }\n\n    uint buffer[70];\n    buffer[0] = 1u;   buffer[1] = 13u;   buffer[2] = 78u;   buffer[3] = 286u;\n    buffer[4] = 715u; buffer[5] = 1287u; buffer[6] = 1716u; buffer[7] = 1716u;\n\n    if (rowIdx == 13) { return buffer[colIdx > 6 ? 13 - colIdx : colIdx]; }\n\n    for (int c = 13, b = 0; c >= 7; --c, ++b) { buffer[c] = buffer[b]; }\n\n    int r_buff = 0;\n    buffer[35] = 1u;\n\n    for (int r = 14; r <= rowIdx; ++r)\n    {\n        int r_offset = r_buff * 35;\n        int w_offset = ((r_buff + 1) & 1) * 35;\n        buffer[w_offset + r] = 1u;\n\n        for (int c = 1; c < r; ++c)\n        {\n            buffer[w_offset + c] = buffer[r_offset + c - 1] + buffer[r_offset + c];\n        }\n\n        r_buff = (r_buff + 1) & 1;\n    }\n\n    return buffer[r_buff * 35 + colIdx];\n}\n/* Binomial coefficients */","name":"Common","description":"","type":"common"}]}