{"ver":"0.1","info":{"id":"MfsBDB","date":"1724334480","viewed":126,"name":"bicubic interpolation 2","username":"FabriceNeyret2","description":"bicubic interpolation \n( among the many possible variants. see also the 3 pure matrix versions by iq https://shadertoy.com/view/XsSXDy )","likes":9,"published":3,"flags":0,"usePreview":0,"tags":["bicubicinterpolation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// field values and derivatives\n#define f(x,y)    texelFetch(iChannel0, ivec2(I + vec2(x,y))%1024, 0 ).r\n#define fx(x,y)  ( f(x+1,y) - f(x-1,y) ) / 2.\n#define fy(x,y)  ( f(x,y+1) - f(x,y-1) ) / 2.\n#define fxy(x,y) ( f(x+1,y+1) - f(x-1,y+1) - f(x+1,y-1) + f(x-1,y-1) ) / 4.\n\n/** // optimized below\nfloat bicubic(vec2 P) // https://en.wikipedia.org/wiki/Bicubic_interpolation  \n{\n   P -= .5;\n   vec2 I = floor(P),\n        F = fract(P);\n   mat2x4 B = transpose( mat4x2(1,1,F,F*F,F*F*F) );     \n    mat4 A =   mat4( 1,0,-3,2, 0,0,3,-2, 0,1,-2,1, 0,0,-1,1 )\n             * mat4( f(0,0), f(1,0), fx(0,0), fx(1,0),\n                     f(0,1), f(1,1), fx(0,1), fx(1,1),\n                     fy(0,0), fy(1,0), fxy(0,0), fxy(1,0),\n                     fy(0,1), fy(1,1), fxy(0,1), fxy(1,1) )\n             * mat4( 1,0,0,0, 0,0,1,0, -3,3,-2,-1, 2,-2,1,1);\n   return dot( B[0] * A , B[1] );  // (1,x,x*x,x*x*x) * A  * (1,y,y*y,y*y*y) \n} \n/**/\nfloat bicubic(vec2 P) // https://en.wikipedia.org/wiki/Bicubic_interpolation  \n{\n   P -= .5;\n   vec2 I = floor(P),\n        F = fract(P);\n   mat2x4 B = transpose(  mat4x2(1,1,F,F*F,F*F*F)  \n                        * mat4( 1,0,-3,2, 0,0,3,-2, 0,1,-2,1, 0,0,-1,1 ) );     \n    mat4 A = mat4( f(0,0), f(1,0), fx(0,0), fx(1,0),\n                   f(0,1), f(1,1), fx(0,1), fx(1,1),\n                   fy(0,0), fy(1,0), fxy(0,0), fxy(1,0),\n                   fy(0,1), fy(1,1), fxy(0,1), fxy(1,1) );\n   return dot( B[0] * A , B[1] );  // (1,x,x*x,x*x*x) * A  * (1,y,y*y,y*y*y) \n}          \n   \n   \nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 R = iResolution.xy,\n         M = length(iMouse.xy)>10. ?  iMouse.xy/R : vec2(.1*iTime),\n         U = R/2. + (u-R/2.) * mat2( cos( M.x + vec4(0,33,11,0))); // rotation\n    float v;\n // v = texelFetch(iChannel0, ivec2(U), 0 ).r; // nearest\n // v = texture(iChannel0,U/1024.).r;          // bilinear\n    v = bicubic(U);                            // bicubic\n    \n    O = vec4( sqrt(v) );                      // to sRGB\n}","name":"Image","description":"","type":"image"}]}