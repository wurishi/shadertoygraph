{"ver":"0.1","info":{"id":"DtlGW8","date":"1671684181","viewed":276,"name":"ðŸŽ¶ Fork of speakers","username":"wj","description":"just played a bit with original speaker3() impl: added some speaker membrane movement and coloring..\n(also \"had to\" replace the annoying original music.. sorry ;-) )\n","likes":7,"published":1,"flags":64,"usePreview":1,"tags":["graphicdesign","cineshader"],"hasliked":0,"parentid":"DdSGWh","parentname":"The wall of speakers"},"renderpass":[{"inputs":[{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":3,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sfGzn","filepath":"/media/a/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png","previewfilepath":"/media/ap/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png","type":"cubemap","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"MlSSDt","filepath":"https://soundcloud.com/krutikovmusic/wednesday-playing-cello-paint-it-black-episode-1-soundtrack?si=ed56ed41bda3423a88d0aa48219b92ec&utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing","previewfilepath":"https://soundcloud.com/krutikovmusic/wednesday-playing-cello-paint-it-black-episode-1-soundtrack?si=ed56ed41bda3423a88d0aa48219b92ec&utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .0005\n#define Rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(1.0),b,d)\n#define B(p,s) max(abs(p).x-s.x,abs(p).y-s.y)\n#define Tri(p,s,a) max(-dot(p,vec2(cos(-a),sin(-a))),max(dot(p,vec2(cos(a),sin(a))),max(abs(p).x-s.x,abs(p).y-s.y)))\n#define DF(a,b) length(a) * cos( mod( atan(a.y,a.x)+6.28/(b*8.0), 6.28/((b*8.0)*0.5))+(b-1.)*6.28/(b*8.0) + vec2(0,11) )\n#define ZERO (min(iFrame,0))\n\n// different materials\n#define MAT_ORIG 0.\n#define MAT_MEMBRANE 1.\n#define MAT_WOOD 2.\n#define MAT_METAL 3.\n\nfloat Hash21(in vec2 p) {\n    p = fract(p*vec2(234.56,789.34));\n    p += dot(p,p+34.56);\n    return fract(p.x+p.y);\n}\n\n// thx iq! https://iquilezles.org/articles/distfunctions/\nfloat sdTorus( in vec3 p, in vec2 t )\n{\n    vec2 q = vec2(length(p.xy)-t.x,p.z);\n    return length(q)-t.y;\n}\n\n// thx iq! https://iquilezles.org/articles/distfunctions/\nfloat sdBox( in vec3 p, in vec3 b )\n{\n    vec3 q = abs(p) - b;\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\n// thx iq! https://iquilezles.org/articles/distfunctions/\n// tweaked as the center aligned horizontal capsule. \nfloat sdHorizontalCapsule( in vec3 p, in float w, in float r )\n{\n  p.x -= clamp( p.x, -w*0.5, w*0.5 );\n  return length( p ) - r;\n}\n\n\nfloat speaker(in vec3 p){\n    vec3 prevP = p;\n    float d = sdBox(p, vec3(0.45,0.95,0.34))-0.03;\n    float d2 = length(p-vec3(0.,-0.2,-0.53))-0.38;\n    \n    d = max(-d2,d);\n    \n    d2 = sdTorus(p-vec3(0.,-0.2,-0.36),vec2(0.36,0.03));\n    d = min(d,d2);\n    \n    d2 = sdTorus(p-vec3(0.,-0.2,-0.32),vec2(0.32,0.025));\n    d = min(d,d2);\n    d2 = length(p-vec3(0.,-0.25,-0.08))-0.12;\n    d = min(d,d2);\n    \n    d2 = sdHorizontalCapsule(p-vec3(0.,-0.75,-0.36),0.6,0.06);\n    d = max(-d2,d);\n    \n    d2 = length(p-vec3(0.,0.55,-0.36))-0.2;\n    d = max(-d2,d);\n    \n    d2 = sdTorus(p-vec3(0.,0.55,-0.36),vec2(0.2,0.03));\n    d = min(d,d2);\n    \n    p.z-=-0.36;\n    p.x = abs(p.x)-0.4;\n    p.y = abs(p.y)-0.9;\n    d2 = length(p)-0.03;\n    d = min(d,d2);\n    \n    return d;\n}\n\nfloat speaker2(in vec3 p){\n    vec3 prevP = p;\n    float d = sdBox(p, vec3(0.95,0.45,0.34))-0.03;\n    float d2 = sdBox(p-vec3(0.,0.,-0.35), vec3(0.9,0.4,0.01))-0.03;\n    d = max(-d2,d);\n    \n    p.x = abs(p.x);\n    d2 = length(p-vec3(0.4,0.,-0.5))-0.36;\n    d = max(-d2,d);\n    \n    d2 = sdTorus(p-vec3(0.4,0.,-0.3),vec2(0.34,0.03));\n    d = min(d,d2);\n    \n    d2 = sdTorus(p-vec3(0.4,0.,-0.29),vec2(0.3,0.025));\n    d = min(d,d2);\n    d2 = length(p-vec3(0.45,0.,-0.08))-0.1;\n    d = min(d,d2);\n    \n    p.z-=-0.3;\n    p.x = abs(p.x)-0.86;\n    p.y = abs(p.y)-0.36;\n    d2 = length(p)-0.03;\n    d = min(d,d2);    \n    \n    return d;\n}\n\nvec2 speaker3(in vec3 p, in float vu) {  // added meterial to return value\n\n    float mat = MAT_WOOD; // speaker plate\n\n    vec3 prevP = p;\n    float d = sdBox(p, vec3(0.95,0.95,0.34))-0.03;\n    float d0 = d;\n    \n    // coloring: \"catch all\" for most of the membrane material..    \n    float d3 = length(p-vec3(0.0,0.,-0.58))-0.66;     \n    if (-d3 > d) mat = MAT_MEMBRANE;\n    \n    // main speaker sphere\n    float d2 = length(p-vec3(0.0,0.,-0.58-0.2*vu))-0.66;\n    d = max(-d2,d);\n   \n    d2 = sdTorus(p-vec3(0.0,0.,-0.35),vec2(0.64,0.05));\n    d = min(d,d2);\n    \n    d2 = sdTorus(p-vec3(0.0,0.,-0.33),vec2(0.6,0.045));\n    d = min(d,d2);\n   \n    // center sphere\n    d2 = length(p-vec3(0.0,0.,0.2-0.2*vu))-0.2;\n    d = min(d,d2);\n    \n    // outer to inner rings..\n    d2 = sdTorus(p-vec3(0.0,0.,-0.3-0.06*vu),vec2(0.56,0.035));\n    \n    d = min(d,d2);    \n    \n    d2 = sdTorus(p-vec3(0.0,0.,-0.24-0.08*vu),vec2(0.52,0.035));\n    d = min(d,d2);        \n        \n    d2 = sdTorus(p-vec3(0.0,0.,-0.19-0.1*vu),vec2(0.47,0.035));\n    d = min(d,d2);\n    \n    // ornaments\n    d0 = d;\n    \n    d2 = abs(length(p.xy)-0.73)-0.07;\n    d = min(d,max((abs(p.z)-0.38),d2));\n    \n    p.z-=-0.37;\n    p.x = abs(p.x)-0.86;\n    p.y = abs(p.y)-0.86;\n    d2 = length(p)-0.03;\n    d = min(d,d2);    \n\n    p = prevP;\n    p.z-=-0.37;\n    p.xy = DF(p.xy,3.0);\n    p.xy -= vec2(0.52);\n    d2 = length(p)-0.03;\n    d = min(d,d2); \n    \n    p = prevP;\n    p.xy *= Rot(radians(sin(iTime)*120.));\n    p.z -= -0.37;\n    p.y = abs(p.y)-0.93;\n    d2 = Tri(p.xy,vec2(0.08),radians(45.));\n    d = min(d,max((abs(p.z)-0.02),d2));    \n    \n    p = prevP;\n    p.xy *= Rot(radians(90.+sin(iTime)*120.));\n    p.z -= -0.37;\n    p.y = abs(p.y)-0.93;\n    d2 = Tri(p.xy,vec2(0.08),radians(45.));\n    d = min(d,max((abs(p.z)-0.02),d2));      \n\n    // coloring: ornaments \n    if (d < d0) mat = MAT_METAL;\n\n    return vec2(d, mat);\n}\n\nvec2 changeSpeakers(in vec3 p, in float start, in float speed, in float vu) {\n    vec3 prevP = p;\n    float endTime = 3.;\n    float t = iTime*speed;\n    float scenes[3] = float[](0.,1.,2.);\n    for(int i = 0; i<scenes.length(); i++){\n        scenes[i] = mod(scenes[i]+start,endTime);\n    }\n    \n    float scene = scenes[int(mod(t,endTime))];\n    \n    float d = 10.;\n    if(scene<1.) {\n        p.x = abs(p.x)-0.5;\n        d = speaker(p);\n//    } else if (scene >= 1. && scene<2.){\n    } else if (scene<2.){\n        p.y = abs(p.y)-0.5;\n        d = speaker2(p);\n    } else {\n        return speaker3(p, vu);\n    }\n    \n    return vec2(d, MAT_ORIG);\n}\n\nvec2 GetDist(vec3 p, in float vu) {\n    vec3 prevP = p;\n    \n    p.y -=iTime*0.5;\n    vec2 id = floor(p.xy*0.5);\n    p.z -= 3.;\n    p.xy = mod(p.xy,2.0)-1.0;\n\n    id *= .5;\n    float rand = Hash21(id);\n    \n    float d = 10.;\n    p.z -= rand*0.3;\n    if(rand<0.3) {\n        return changeSpeakers(p,1.,0.5+rand, vu);\n    } else if(rand>=0.3 && rand<0.7) {\n        return speaker3(p, vu);\n    } else {\n        p.x = abs(p.x)-0.5;\n        d = speaker(p);\n    }\n    \n    return vec2(d, MAT_ORIG);\n}\n\nvec2 RayMarch(vec3 ro, vec3 rd, float side, int stepnum, in float vu) {\n    vec2 dO = vec2(0.0);\n    \n    for(int i=0; i<stepnum; i++) {\n        vec3 p = ro + rd*dO.x;\n        vec2 dS = GetDist(p, vu);\n        dO.x += dS.x*side;\n        dO.y = dS.y;\n        \n        if(dO.x>MAX_DIST || abs(dS.x)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(in vec3 p, in float vu) {\n    float d = GetDist(p, vu).x;\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy, vu).x,\n        GetDist(p-e.yxy, vu).x,\n        GetDist(p-e.yyx, vu).x);\n    \n    return normalize(n);\n}\n\nvec3 R(in vec2 uv, in vec3 p, in vec3 l, in float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\n// https://www.shadertoy.com/view/3lsSzf\nfloat calcOcclusion( in vec3 pos, in vec3 nor, in float vu)\n{\n    float occ = 0.0;\n    float sca = 1.0;\n    for( int i=ZERO; i<4; i++ )\n    {\n        float h = 0.01 + 0.15*float(i)/4.0;\n        vec3 opos = pos + h*nor;\n        float d = GetDist( opos, vu ).x;\n        occ += (h-d)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 2.0*occ, 0.0, 1.0 );\n}\n\nvec3 diffuseMaterial(in vec3 n, in vec3 rd, in vec3 p, in vec3 col, in vec3 sky, in vec3 bounce, in float spec, in float vu) {\n    float occ = calcOcclusion(p,n, vu);\n    vec3 diffCol = vec3(0.0);\n    vec3 lightDir = normalize(vec3(1,10,-10));\n    float diff = clamp(dot(n,lightDir),0.0,1.0);\n    float shadow = step(RayMarch(p+n*0.3,lightDir,1.0, 15, vu).x,0.9);\n    float skyDiff = clamp(0.5+0.5*dot(n,vec3(0,1,0)),0.0,1.0);\n    float bounceDiff = clamp(0.5+0.5*dot(n,vec3(0,-1,0)),0.0,1.0);\n    diffCol = col*vec3(-0.5)*diff*shadow*occ;\n    diffCol += col*sky*skyDiff*occ;\n    diffCol += col*bounce*bounceDiff*occ;\n    diffCol += col*pow(max(dot(rd, reflect(lightDir, n)), 0.0), spec)*occ; // spec\n        \n    return diffCol;\n}\n\nvec3 metalMaterial(in vec3 n, in vec3 rd, in vec3 p) {\n    // metallic look inspired from here: https://www.shadertoy.com/view/XssfRl\n    n+= texture(iChannel3, vec2(p.y - iTime*.5, p.x)).xyz * .2; // \"undo\" y-movement\n\n    vec3 c = vec3(1);\n    // simply add some parts of the normal to the color\n    // gives impression of 3 lights from different dir with different color temperature\n    c += n.xyz*.05+.05;\n\n    // gold tint\n    c+=vec3(.2, .172, 0);\n\n    //  reflection of cubemap\n    vec3 R = p-2.0*dot(p,n.xyz)*n.xyz;\n    c *= texture(iChannel2,R).xyz*1.2+.4;\n\n    return c;\n}\n\n/* original slowly compiling version..\nvec3 materials(int mat, vec3 n, vec3 rd, vec3 p, vec3 col, float vu){\n    switch (mat)\n    {\n        case int(MAT_ORIG):\n            return diffuseMaterial(n, rd, p, vec3(1.3), vec3(1.0,1.0,0.9), vec3(0.3,0.3,0.3), 60., vu);\n        case int(MAT_MEMBRANE):\n            return diffuseMaterial(n, rd, p, vec3(0.5), vec3(0.2,0.2,0.1), vec3(0.1,0.1,0.1), 30., vu);\n        case int(MAT_WOOD):\n            col = texture(iChannel1, vec2(p.y - iTime*.5, p.x)).xyz; // \"undo\" y-movement     \n            return diffuseMaterial(n, rd, p, col, vec3(0.8,0.8,0.7), vec3(0.1,0.1,0.1), 30., vu);\n        case int(MAT_METAL):\n            return metalMaterial(n, rd, p);\n        default:\n            return col;\n    }\n}\n*/\nvec3 materials(int mat, vec3 n, vec3 rd, vec3 p, vec3 col, float vu)\n{\n    vec3 sky, bounce; float spec;\n    \n    if( mat<=int(MAT_WOOD) )\n    {\n        if( mat==int(MAT_ORIG) )\n        {\n            col=vec3(1.3);\n            sky=vec3(1.0,1.0,0.9);\n            bounce=vec3(0.3,0.3,0.3);\n            spec=60.;\n        }\n        else if( mat==int(MAT_MEMBRANE) )\n        {\n            col=vec3(0.5);\n            sky=vec3(0.2,0.2,0.1);\n            bounce=vec3(0.1,0.1,0.1);\n            spec=30.;\n        }\n        else //if( mat==int(MAT_WOOD) )\n        {\n            col = texture(iChannel1, vec2(p.y - iTime*.5, p.x)).xyz; // \"undo\" y-movement     \n            sky=vec3(0.8,0.8,0.7);\n            bounce=vec3(0.1,0.1,0.1);\n            spec=30.;\n        }\n        return diffuseMaterial(n, rd, p, col, sky, bounce, spec, vu);\n    }\n    else\n    {\n        return metalMaterial(n, rd, p);\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 prevUV = uv;\n    vec2 m =  iMouse.xy/iResolution.xy;\n    \n    vec3 ro = vec3(0, 0, -1.5);\n    if(iMouse.z>0.){\n        ro.yz *= Rot(m.y*3.14+1.);\n        ro.y = max(-0.9,ro.y);\n        ro.xz *= Rot(-m.x*6.2831);\n    } else {\n        float scene = mod(iTime,15.);\n        float rotY = -10.;\n        float rotX = 0.;\n        if(scene>=5. && scene<10.){\n            rotY = 0.;\n            rotX = -30.;\n        } else if(scene>=10.){\n            rotY = 0.;\n            rotX = 30.;\n        }\n        \n        ro.yz *= Rot(radians(rotY));\n        ro.xz *= Rot(radians(rotX));\n    }\n\n    // use some low freq amplitudes to position speaker membrane (obviously this is NOT what a real speaker does..)\n    // (note: Shadertoy's iChannel0 frequency spectrum texture does not AT ALL look like what is presented as a \n    // visualization below. The doc here: https://shadertoyunofficial.wordpress.com/2016/07/20/special-shadertoy-features/\n    // might offer some help for what to expect in \"Sound in (audio textures)\".)\n    // (Conceptually \"vu\" is a \"uniform\" but unfortunately this cannot be modelled in shadertoy.. or can it?)\n    \n    float vu = (texture( iChannel0, vec2(.0, .25)).x +  texture( iChannel0, vec2(.00195, .25)).x) * .5 - .2;// 512 freq FT\n    \n    vec3 rd = R(uv, ro, vec3(0,0.0,0), 1.0);\n    vec2 d = RayMarch(ro, rd, 1.,MAX_STEPS, vu);\n    vec3 col = vec3(.0);\n    \n    if(d.x<MAX_DIST) {\n        vec3 p = ro + rd * d.x;\n                \n        vec3 n = GetNormal(p, vu);\n        int mat = int(d.y);\n        col = materials(mat,n,rd,p,col, vu);\n    }\n    \n    // gamma correction\n    col = pow( col, vec3(0.9545) );    \n\n    fragColor = vec4(sqrt(col),1.0);\n}","name":"Image","description":"","type":"image"}]}