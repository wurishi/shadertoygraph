{"ver":"0.1","info":{"id":"mdBfWm","date":"1689771242","viewed":203,"name":"Clouds at dusk","username":"sjz1","description":"physical clouds","likes":12,"published":1,"flags":32,"usePreview":0,"tags":["cloud","realtime","atmosphere","scatter"],"hasliked":0,"parentid":"DslyzN","parentname":"Mountain Flight"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float gamma=2.2;\n\n\nvec3 ACESFilm( vec3 x )\n{\n    float tA = 2.51;\n    float tB = 0.03;\n    float tC = 2.43;\n    float tD = 0.59;\n    float tE = 0.14;\n    return clamp((x*(tA*x+tB))/(x*(tC*x+tD)+tE),0.0,1.0);\n}\n\nvec2 uv00;\nvec4 Load(){\n    return texture(iChannel0,uv00);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv00=uv;\n    vec4 tc0=Load();\n    tc0.xyz/=tc0.w;\n    vec3 tc=tc0.xyz;\n    tc=ACESFilm(tc);tc=pow(tc,vec3(1./gamma));\n    fragColor=vec4(tc,1);\n   \n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"\nvec2 rot(vec2 a,float theata){\n    return a.xx*vec2(cos(theata),sin(theata))+a.yy*vec2(-sin(theata),cos(theata));\n}\nvec3 rot(vec3 a,vec3 range){\n    a.yz=rot(a.yz,range.x);\n    a.xz=rot(a.xz,range.y);\n    a.xy=rot(a.xy,range.z);\n    return a; \n}\nvoid XYZ(vec3 dir,out vec3 X,out vec3 Y){\n    Y.y=-length(dir.xz);\n    Y.x=0.;\n    if(length(dir.xz)<=0.)\n        Y.xz=vec2(1,0);\n    else\n        Y.xz=normalize(dir.xz)*dir.y;\n    X=cross(dir,Y);\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float gamma=2.2;\nconst float FOV=0.5;\nconst float PI=3.14159265358;\nvec3 lightDir=-normalize(vec3(0.5,-0.05,0.05));//Sun light direction\n\n\n\n#define USE_SMOOTH_NOISE 0   // enable to prevent discontinuities\n\n\n// value noise, and its analytical derivatives\nvec3 noised( in vec2 x )\n{\n    vec2 f = fract(x);\n    #if USE_SMOOTH_NOISE==0\n    vec2 u = f*f*(3.0-2.0*f);\n    vec2 du = 6.0*f*(1.0-f);\n    #else\n    vec2 u = f*f*f*(f*(f*6.0-15.0)+10.0);\n    vec2 du = 30.0*f*f*(f*(f-2.0)+1.0);\n    #endif\n\n#if 0\n    // texel fetch version\n    ivec2 p = ivec2(floor(x));\n    float a = texelFetch( iChannel1, (p+ivec2(0,0))&255, 0 ).x;\n\tfloat b = texelFetch( iChannel1, (p+ivec2(1,0))&255, 0 ).x;\n\tfloat c = texelFetch( iChannel1, (p+ivec2(0,1))&255, 0 ).x;\n\tfloat d = texelFetch( iChannel1, (p+ivec2(1,1))&255, 0 ).x;\n#else    \n    // texture version    \n    vec2 p = floor(x);\n\tfloat a = textureLod( iChannel1, fract((p+vec2(0.5,0.5))/256.0), 0.0 ).x;\n\tfloat b = textureLod( iChannel1, fract((p+vec2(1.5,0.5))/256.0), 0.0 ).x;\n\tfloat c = textureLod( iChannel1, fract((p+vec2(0.5,1.5))/256.0), 0.0 ).x;\n\tfloat d = textureLod( iChannel1, fract((p+vec2(1.5,1.5))/256.0), 0.0 ).x;\n#endif\n    \n\treturn vec3(a+(b-a)*u.x+(c-a)*u.y+(a-b-c+d)*u.x*u.y,\n\t\t\t\tdu*(vec2(b-a,c-a)+(a-b-c+d)*u.yx));\n}\n\n\nvec2 Projection(vec2 p,float S){\n    #ifdef SphereProjection\n        if(length(p)==0) return p;\n        return normalize(p)*tan(length(p)*S);\n    #else\n        return p*S;\n    #endif\n}\n\nconst vec3 b_P=vec3(30000);//atmosphere thickness\nconst float b_k=0.25;//mix\n\n \nconst vec3 Mie=vec3(0.2);\n\nconst vec3 Rayleigh=2e10*pow(vec3(1./700.,1./520.,1./450.),vec3(4));\n  \nconst vec3 b_k0=mix(Rayleigh,Mie,b_k);\n\nconst vec3 b_Q=b_k0/(b_P*b_P);//absorption\nconst vec3 b_Sun=2.*vec3(10,10,10);//sun color\nconst vec3 b_g0=mix(Rayleigh*0.01,vec3(0.9),b_k);//single scatter\nvec4 background(in vec3 pos, in vec3 n,in vec3 lightDir ) {\n    vec3 n0=n;\n\n    n.y=max(n.y,1e-5);\n    vec3 g=3./(8.*PI)*(1.+pow(dot(n,lightDir),2.))*(1.-b_g0*b_g0)/(2.+b_g0*b_g0)/pow(1.+b_g0*b_g0-2.*b_g0*dot(lightDir,n),vec3(1.5));\n    vec3 t=b_Q*0.5*(b_P-pos.y)*(b_P-pos.y);\n    vec3 c=b_Sun*g*(exp(-t/n.y)-exp(-t/lightDir.y))/(n.y-lightDir.y)*max(lightDir.y,0.);\n\n    c+=exp(-t/n.y)*b_Sun*smoothstep(0.997,0.9975,dot(n0,lightDir));\n\t return vec4(clamp(c,0.,50.),1);\n}\nvec4 background(in vec3 pos, in vec3 n,in vec3 lightDir,float s,vec3 col ) {\n    vec3 n0=n;\n    if(n.y>0.) s=min((b_P.x-pos.y)/n.y,s);\n    vec3 g=3./(8.*PI)*(1.+pow(dot(n,lightDir),2.))*(1.-b_g0*b_g0)/(2.+b_g0*b_g0)/pow(1.+b_g0*b_g0-2.*b_g0*dot(lightDir,n),vec3(1.5));\n    vec3 t=b_Q*0.5*(b_P-pos.y)*(b_P-pos.y);\n    vec3 s1=exp(b_Q*s*(0.5*s*n.y-(b_P-pos.y))*(1.-n.y/lightDir.y));\n    vec3 c=b_Sun*g*exp(-t/lightDir.y)*(1.-s1)/(-n.y+lightDir.y)*max(lightDir.y,0.);\n    c=abs(c);\n    c=clamp(c,0.,50.);\n    c+=exp(b_Q*0.5*n.y*s*s-b_Q*(b_P-pos.y)*s)*col;\n\t return vec4(c,1);\n}\n\nfloat hash( float n )\n{\n  return fract(cos(n)*41415.92653);\n}\nfloat noised( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 w = fract(x);\n\tvec3 u = w*w*(3.0-2.0*w);\n    vec3 du = 6.0*w*(1.0-w);\n    \n    float n = p.x + p.y*157.0 + 113.0*p.z;\n    \n    float a = hash(n+  0.0);\n    float b = hash(n+  1.0);\n    float c = hash(n+157.0);\n    float d = hash(n+158.0);\n    float e = hash(n+113.0);\n\tfloat f = hash(n+114.0);\n    float g = hash(n+270.0);\n    float h = hash(n+271.0);\n\t\n    float k0 =   a;\n    float k1 =   b - a;\n    float k2 =   c - a;\n    float k3 =   e - a;\n    float k4 =   a - b - c + d;\n    float k5 =   a - c - e + g;\n    float k6 =   a - b - e + f;\n    float k7 = - a + b + c - d + e - f - g + h;\n\n    return k0 + k1*u.x + k2*u.y + k3*u.z + k4*u.x*u.y + k5*u.y*u.z + k6*u.z*u.x + k7*u.x*u.y*u.z;\n                 \n}\n\n\nfloat fbm3D( in vec3 x ,int n)\n{\n    const float scale  = 2.5;\n\n    float a = 0.0;\n    float b = 0.5;\n\tfloat f = 1.0;\n    for( int i=0; i<n; i++ )\n    {\n        a += b* noised(f*x*scale);           // accumulate values\t\t\n        b *= 0.5;             // amplitude decrease\n        f *= 1.8;             // frequency increase\n    }\n\n\treturn a;\n}\n\nfloat rand_i=0.;\nfloat rand(vec3 p3)\n{\n    rand_i += 0.4;\n    p3=rot(p3,vec3(rand_i));\n    p3 += rand_i+float(iFrame);\n    p3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.zyx + 31.32);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat cloud_density(vec3 p){\n    float density=0.1+smoothstep(-60000.,4000.,p.y)*smoothstep(25000.,10000.,p.y)*0.35;\n    float div_d=1./density;\n    return clamp(fbm3D(0.0000125*p,5)-1.+density,0.,1.)*div_d;\n}\n\nvec3 sky( vec3 pos, vec3 n,vec3 lightDir,float Far){\n    //return background(pos,n,lightDir);\n    const int step1=20;\n    const int step2=10;\n\n    vec3 c;\n    if(lightDir.y>5e-4){\n        float L=n.y<1e-2?Far:min((b_P.x-pos.y)/n.y,Far);\n        vec3 pos1=pos+n*L;\n        c=background(pos1,n,lightDir).xyz;\n        float s0=0.;\n        for(int i=0;i<step1;i++){\n            float s= (n.y<1e-1?L/float(step1):(b_P.x-pos.y)/(n.y*float(step1)))*(rand(pos1)+0.5);\n            s0+=s;\n            if(s0>L) break;\n            pos1-=n*s;\n            float d=cloud_density(pos1); \n            const vec3 b_k1=mix(Rayleigh,Mie,0.9)*100./b_P/b_P;\n            vec3 b_Q1=mix(b_Q,b_k1,d);//absorption\n            vec3 b_g1=mix(b_g0,vec3(0),d);\n            vec3 t=b_Q1*0.5*(2.*(b_P-pos1.y)*s-s*s*n.y);\n            vec3 g=3./(8.*PI)*(1.+pow(dot(n,lightDir),2.))*(1.-b_g1*b_g1)/(2.+b_g1*b_g1)/pow(1.+b_g1*b_g1-2.*b_g1*dot(lightDir,n),vec3(1.5));\n            float s2=(b_P.x-pos1.y)/(lightDir.y*float(step2))+rand(pos1)*1000./lightDir.y;\n            vec3 c1=b_Sun;\n            for(int j=0;j<step2;j++){\n                vec3 pos2=pos1+lightDir*float(step2-j)*s2;\n                float d=cloud_density(pos2);\n                vec3 b_Q1=mix(b_Q,b_k1,d);//absorption\n                vec3 t=b_Q1*0.5*(2.*(b_P-pos2.y)*s2-s2*s2*lightDir.y);\n                c1*=exp(-max(t,0.));\n            }\n            c+=c1*g*b_Q1*(b_P-pos1.y-s*n.y)*s;\n            c*=exp(-max(t,0.));\n        }\n    }else{\n        c=background(pos,n,lightDir).xyz;\n    }\n    \n    return c;\n}\nvec3 CameraPath(float time){\n    time+=295.;\n    const float a=-0.05;\n    vec2 p=vec2(cos(time*a),sin(time*a)+2.*sin(time*a*0.48))*100000.;\n    float h=20000.;\n    return vec3(p.x,-h+40.,p.y);\n}\nvoid SetCamera(float time,vec2 uv0,out vec3 ro,out vec3 rd){\n    ro=CameraPath(time);\n    vec3 lD=normalize(normalize(CameraPath(time+5.)-ro)+vec3(0,0.15,0));\n    vec3 X;vec3 Y;\n    XYZ(lD,X,Y);\n\n    vec2 uv=Projection(uv0,FOV);\n    rd=lD+uv.x*X-uv.y*Y;\n    rd=normalize(rd);\n}\n\nfloat hash( vec2 p )\n{   p+=vec2(4215);\n    p=50.0*fract(p*0.3183099);\n    return fract(p.x*p.y*(p.x+p.y));\n}\n\n\nvec4 frag_0;\nvoid Store(vec4 c){\n    frag_0=c;\n}\nvec2 uv00;\nvec4 Load(){\n    return texture(iChannel0,uv00);\n}\nvoid Entry(float x,float y){\n    if(abs(y)>1./2.31) {Store(vec4(0,0,0,1));return;}\n    vec3 ro,rd;\n    SetCamera(iTime,vec2(x,y),ro,rd);\n    vec3 atmosphere=background(ro,rd,lightDir).xyz;\n    float depth;\n    vec3 color=sky(ro,rd,lightDir,500000.);;\n\n    if(iFrame<=1){\n        Store(vec4(color,1));\n    }else{\n        const int blur=32;\n        vec4 temp0=Load();\n        temp0*=min(temp0.w,float(blur-1))/(temp0.w+1.);\n        vec4 a=temp0+vec4(color,1);\n        a.w=min(a.w,float(blur));\n        Store(a);\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv00=uv;\n    Entry(2.*uv.x-1.,(2.*uv.y-1.)/iResolution.x*iResolution.y);\n\n    fragColor = frag_0;\n}","name":"Buffer A","description":"","type":"buffer"}]}