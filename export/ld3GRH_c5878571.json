{"ver":"0.1","info":{"id":"ld3GRH","date":"1448014258","viewed":143,"name":"Jirgensons_MD8","username":"jirgis","description":"Janis_Jirgensons_MD8","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["janisjirgensonsmd8"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3Rn","filepath":"/media/a/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","previewfilepath":"/media/ap/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"#define SCALE 3.0\n\n// noise from https://github.com/ashima/webgl-noise/blob/master/src/noise2D.glsl\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec2 mod289(vec2 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec3 permute(vec3 x) {\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nfloat snoise(vec2 v)\n  {\n  const vec4 C = vec4(0.211324865405187,  \n                      0.366025403784439,  \n                     -0.577350269189626,  \n                      0.024390243902439); \n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n  vec2 i1;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n  i = mod289(i); \n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n                + i.x + vec3(0.0, i1.x, 1.0 ));\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\nfloat chessboard(vec2 uvs)\n{\n    float xOffset = step(fract(uvs.y), 0.5) * 0.5;\n    return step(fract(uvs.x + xOffset), 0.5);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )   \n{\n    //boards\n    vec2 uvs = fragCoord.xy / iResolution.xx * SCALE;\n    vec3 colors = vec3(chessboard(uvs));\n\tvec4 fragColorss = vec4(colors, 1.0);\n    //boards end\n    \n\tvec2 uv = (2.0*fragCoord.xy-iResolution.xy)/iResolution.y;\n    vec2 positions = ( fragCoord.xy / iResolution.xy )-0.5;   \n    float tex = texture( iChannel0, vec2(0.0, 0.01 ) ).x;\n    float r = mod(tex, 2.5);\n    vec4 circleColour = vec4(snoise(vec2(r, r)), 0.5*snoise(uv*0.5), 0.5*snoise(uv*0.5), r);\n\tvec4 backgroundColour = vec4(0.0, 0.0, 0.0, 1.0);\n\tfloat dist = sqrt(dot(uv, uv));\n    float t = 1.0 + smoothstep(r, r+0.1, dist) - smoothstep(r-0.1, r, dist);\n\tfragColor = mix(circleColour, fragColorss, t);\n}","name":"","description":"","type":"image"}]}