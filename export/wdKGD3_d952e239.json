{"ver":"0.1","info":{"id":"wdKGD3","date":"1571116627","viewed":233,"name":"TheCircle","username":"mmis1000","description":"test","likes":6,"published":1,"flags":32,"usePreview":0,"tags":["rotating"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Output to screen\n    fragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec3 cAdd(vec3 a, vec3 b) {\n    return sqrt(pow(a, vec3(2.0, 2.0, 2.0)) + pow(b, vec3(2.0, 2.0, 2.0)));\n}\n\n// https://en.wikipedia.org/wiki/Relative_luminance\nfloat L(vec3 c) {\n    return c.r * 0.2126 + c.g * 0.7152 + c.b * 0.0722;\n}\n\nvec3 hueShift(vec3 col, float shift){\n    vec3 m = vec3(cos(shift), -sin(shift) * .57735, 0);\n    m = vec3(m.xy, -m.y) + (1. - m.x) * .33333;\n    return mat3(m, m.zxy, m.yzx) * col;\n}\n\nvec3 img(float time, vec2 fragCoord) {\n    float r = min(iResolution.x, iResolution.y) / 30.0;\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 center = iResolution.xy / 2.0;\n    vec2 circlecenter = center + vec2(sin(time * 3.0), cos(time * 3.0)) * r * 10.0 * (1.0 + sin(time / 5.0) * 0.2);\n    float dist = length(fragCoord - circlecenter);\n    float strength = r / (r + dist * 4.0);\n    vec3 color = hueShift(vec3(1.0, 0.0, 0.0), time);\n    // don't strength it way too over\n    color = color / min(1.1, max(L(color), 0.5)) * 0.8;\n    color = color * strength;\n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = float(iFrame) / 60.0;\n    vec2 uv = fragCoord / iResolution.xy;\n    vec3 oldColor = texture(iChannel0, uv).rgb;\n    // silly motion blur\n    vec3 color = \n        img(time + 1.0 / 60.0 / 5.0 * 0.0, fragCoord) * 0.2 + \n        img(time + 1.0 / 60.0 / 5.0 * 1.0, fragCoord) * 0.2 + \n        img(time + 1.0 / 60.0 / 5.0 * 2.0, fragCoord) * 0.2 + \n        img(time + 1.0 / 60.0 / 5.0 * 3.0, fragCoord) * 0.2 + \n        img(time + 1.0 / 60.0 / 5.0 * 4.0, fragCoord) * 0.2;\n    fragColor = vec4(cAdd(oldColor * 0.99, color), 1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}