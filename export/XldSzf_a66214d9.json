{"ver":"0.1","info":{"id":"XldSzf","date":"1480917928","viewed":223,"name":"Mirrored","username":"lherm","description":"Playing around with displacement and raytracers","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["raytrace"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int MAX_STEPS = 20;\nconst float INTESERCTION_PRECISION = 0.001;\nconst float MAX_DISt = 1000.;\n\nfloat displace(in vec3 p)\n{\n    return dot(p, p) + length(p * sin(iTime));\n}\n\nfloat sphereSDF(in vec3 p, in float r)\n{\n    return length(p) - r;\n}\n\nfloat map(in vec3 p)\n{\n    float c = 2.;\n    p = mod(p, c)-.5*c;\n    float d1 = sphereSDF(p, .5);\n    float d2 = displace(p);\n    return d1 + d2 ;\n}\n\nfloat trace(in vec3 eye, in vec3 rd)\n{\n    float d = 0.;\n    for(int i = 0; i < MAX_STEPS; i++)\n    {\n        vec3 p = eye + (rd * d);\n        d += map(p);\n    }\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    uv *= 2.0;\n    uv -= 1.0;\n    uv.x *= iResolution.x/iResolution.y;\n    vec3 color = vec3(0.);\n\n    vec3 eye = vec3(0., 0., iTime);\n\n    vec3 rd = normalize(vec3(uv, 1.));\n\n    float d = trace(eye, rd);\n\n    color = vec3(1./d * (pow(sin(iTime), 3.0) + 4.5));\n    color *= mix(color, vec3(cos(uv), 1.0), vec3(-uv, 1.0));\n\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}