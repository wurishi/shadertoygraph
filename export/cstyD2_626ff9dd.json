{"ver":"0.1","info":{"id":"cstyD2","date":"1698555084","viewed":42,"name":"The disk-y dance","username":"zenzicubic","description":"Just a little demo I was going to make a video of\nYes, the title is a pun on the safety dance","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["fractal","aa","rotation","spin","vtuber"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define distSq(a, b) dot(a - b, a - b)\n\n#define COLOR_A vec3(1.)\n#define COLOR_B vec3(.3, .2, .9)\n\nvec3 getPixCol(vec2 pt) {\n    // First rescale the point\n    pt = 2. * (2. * pt - iResolution.xy) / iResolution.y;\n    \n    // See if it lies in the outer disk\n    if (dot(pt, pt) > 4.) return COLOR_A;\n    \n    // Compute the position of the inner disk(s) and rotation (make sure to use the INVERSE MATRIX)\n    float t = .25 * iTime;\n    vec2 cen = vec2(cos(t), sin(t));\n    mat2 rot = mat2(cen.x, -cen.y, cen.yx);\n    float n = 1.;\n    for (int i = 0; i < 10; i ++) {\n        // Test if the point lies in any of the inner discs\n        vec2 tranCen = cen;\n        if (distSq(cen, pt) < 1.) {\n            n ++; // If it does increment the count and store the center\n        } else if (distSq(-cen, pt) < 1.) {\n            n ++;\n            tranCen = -cen;\n        } else break; // If it doesn't break\n        \n        // Translate and scale the point from the inner disc to the enclosing disc,\n        // applying a rotation to achieve that alluring twist\n        pt = 2. * rot * (pt - tranCen);\n    }\n    \n    //Get color based on iteration count\n    return mix(COLOR_A, COLOR_B, mod(n, 2.));\n}\n\nvec3 multiSample(vec2 pt) {\n    // Multisample image\n    vec3 col = getPixCol(pt);\n    col += getPixCol(pt + vec2(.5));\n    col += getPixCol(pt - vec2(.5));\n    col += getPixCol(pt + vec2(.5, -.5));\n    col += getPixCol(pt + vec2(-.5, .5));\n    col += getPixCol(pt + vec2(.5, 0.));\n    col += getPixCol(pt + vec2(-.5, 0.));\n    col += getPixCol(pt + vec2(0., .5));\n    col += getPixCol(pt + vec2(0., -.5));\n    return .11111 * col;\n}\n\nvoid mainImage(out vec4 col, in vec2 pt) {\n    col = vec4(multiSample(pt), 1.);\n}","name":"Image","description":"","type":"image"}]}