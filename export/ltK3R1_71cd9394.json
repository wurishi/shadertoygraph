{"ver":"0.1","info":{"id":"ltK3R1","date":"1473289172","viewed":562,"name":"Barycentric Coordinates v2","username":"sea","description":"Very un-optimized method of finding barycentric coordinates of a triangle. Use the mouse to move one of the triangle's points in world space. I hope the comments are helpful, and I'm also open to any tips or optimizations.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["triangle","barycentric","coordinates"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Visual point for debugging purposes.\nbool point (vec2 p, vec2 v)\n{\n    // If the distance to the point is less then our \n    // point radius, our pixel is inside the point.\n    return length(v - p) < 0.01;\n}\n\n// Visual line for debugging purposes.\nbool line (vec2 p, vec2 a, vec2 b)\n{\n    // Direction from a to b.\n    vec2 ab = normalize(b - a);\n    \n    // Direction from a to the pixel.\n    vec2 ap = p - a;\n    \n    // Find the intersection of the pixel on to vector\n    // from a to b, calculate the distance between the \n    // pixel and the intersection point, then compare\n    // that distance to the line width.\n    return length((a + ab * dot(ab, ap)) - p) < 0.0025;\n} \n\n// Find the intersection of \"p\" onto \"ab\".\nvec2 intersect (vec2 p, vec2 a, vec2 b)\n{\n    // Calculate the unit vector from \"a\" to \"b\".\n    vec2 ba = normalize(b - a);\n    \n    // Calculate the intersection of p onto \"ab\" by\n    // calculating the dot product between the unit vector\n    // \"ba\" and the direction vector from \"a\" to \"p\", then\n    // this value is multiplied by the unit vector \"ab\"\n    // fired from the point \"a\".\n    return a + ba * dot(ba, p - a); \n}\n\nbool tri (vec2 p, vec2 a, vec2 b, vec2 c, out vec3 r)\n{\n    // Using vector projection, find the intersection \n    // point of \"a\" onto the vector from \"b\" to \"c\".\n    vec2 aicb = intersect(a, b, c);\n    \n    // Now that we have the intersection point of \"a\" onto\n    // \"bc\", lets calculate the pixel's signed percentage\n    // along the vector from \"a\" to the intersection of \"a\"\n    // onto \"bc\".\n    r.y = dot(aicb - p, normalize(aicb - a)) / length(aicb - a);\n    \n    // Now we repeat the two last instructions, but this time\n    // we calculate the signed percentage using \"b\" and the\n    // vector from \"c\" to a\".\n    vec2 biac = intersect(b, c, a);\n    r.x = dot(biac - p, normalize(biac - b)) / length(biac - b);\n    \n    // The x, y and z values of barycentric coordinates add \n    // up to 1, therefore if we add together two values from \n    // the coordinate and calculate the one minus of that \n    // value, it will return the third value of the coordinate.\n    r.z = -(r.x + r.y - 1.0);\n    \n    // Barycentric coordinates are values between 0 and 1, if a\n    // value within the coordinate is beyond that range, then the\n    // point is not in the triangle.\n    if (r.x < 0.0 || r.x > 1.0 || r.y < 0.0 || r.y > 1.0 || r.z < 0.0 || r.z > 1.0)\n        return false;\n    return true;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    // Calculate aspect ratio of view.\n    float aspect = iResolution.x / iResolution.y;\n    \n    // Convert pixel screen space to world space.\n    vec2 ws = uv * 2.0 - 1.0;\n    \n    vec2 m = vec2(0.25, -0.25);\n    if (iMouse.z > 0.0)\n    \t// Convert mouse coordinates from screen space to worldspace.\n    \tm = vec2(iMouse.x / iResolution.x * 2.0 - 1.0, iMouse.y / iResolution.y * 2.0 - 1.0);\n    \n    // Scale coordinates by aspect ratio.\n    m.y /= aspect;\n    ws.y /= aspect;\n    \n    // Triangle points, currently the b coordinate is moved via mouse coordinates.\n    vec2 a = vec2(0.0, 0.25);\n    vec2 b = vec2(m.x, m.y);\n    vec2 c = vec2(-0.25, -0.25);\n    \n    // Calculate barycentric coordinates of the triangle, and convert the coordinates to a color.\n    vec3 color;\n    if (!tri(ws, a, b, c, color))\n        color = vec3(0.0);\n\n    // Visual debug lines and points.\n    if (line(ws, a, b))\n        color = vec3(1.0, 1.0, 0.0);\n    if (line(ws, b, c))\n        color = vec3(1.0, 0.0, 1.0);\n    if (line(ws, c, a))\n        color = vec3(0.0, 1.0, 1.0);\n    if (point(ws, a))\n        color = vec3(0.0, 1.0, 0.0);\n    if (point(ws, b))\n        color = vec3(1.0, 0.0, 0.0);\n    if (point(ws, c))\n        color = vec3(0.0, 0.0, 1.0);\n    \n\tfragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}