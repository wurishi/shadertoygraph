{"ver":"0.1","info":{"id":"ddGfDm","date":"1698279242","viewed":37,"name":"Sin Chord Demo","username":"foodini","description":"Just a quick example of polyphonics.","likes":2,"published":1,"flags":24,"usePreview":0,"tags":["audio","chords"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"float ji_frequencies[] = float[] (\n    110.0,\n    117.4658203,\n    123.75,\n    132.1490479,\n    139.21875,\n    148.6676788,\n    156.6210938,\n    165.0,\n    176.1987305,\n    185.625,\n    198.2235718,\n    208.828125,\n    220.0,\n    234.9316406,\n    247.5,\n    264.2980957,\n    278.4375,\n    297.3353577,\n    313.2421875,\n    330.0,\n    352.3974609,\n    371.25,\n    396.4471436,\n    417.65625,\n    440.0,\n    469.8632813,\n    495.0,\n    528.5961914,\n    556.875,\n    594.6707153,\n    626.484375,\n    660.0,\n    704.7949219,\n    742.5,\n    792.8942871,\n    835.3125,\n    880.0,\n    2.0*469.8632813,\n    2.0*495.0,\n    2.0*528.5961914,\n    2.0*556.875,\n    2.0*594.6707153,\n    2.0*626.484375,\n    2.0*660.0,\n    2.0*704.7949219,\n    2.0*742.5,\n    2.0*792.8942871,\n    2.0*835.3125,\n    2.0*880.0\n);\n\n#define DT(name, index) const int name = index;\nDT(A2,  0)\nDT(As,  1)\nDT(Bb2, 1)\nDT(B2,  2)\nDT(C3,  3)\nDT(Cs3, 4)\nDT(Db3, 4)\nDT(D3,  5)\nDT(Ds3, 6)\nDT(Eb3, 6)\nDT(E3,  7)\nDT(F3,  8)\nDT(Fs3, 9)\nDT(Gb3, 9)\nDT(G3, 10)\nDT(Gs3,11)\nDT(Ab3,11)\n\nDT(A3, 12)\nDT(As3,13)\nDT(Bb3,13)\nDT(B3, 14)\nDT(C4, 15)\nDT(Cs4,16)\nDT(Db4,16)\nDT(D4, 17)\nDT(Ds4,18)\nDT(Eb4,18)\nDT(E4, 19)\nDT(F4, 20)\nDT(Fs4,21)\nDT(Gb4,21)\nDT(G4, 22)\nDT(Gs4,23)\nDT(Ab4,23)\n\nDT(A4, 24)\nDT(As4,25)\nDT(Bb4,25)\nDT(B4, 26)\nDT(C5, 27)\nDT(Cs5,28)\nDT(Db5,28)\nDT(D5, 29)\nDT(Ds5,30)\nDT(Eb5,30)\nDT(E5, 31)\nDT(F5, 32)\nDT(Fs5,33)\nDT(Gb5,33)\nDT(G5, 34)\nDT(Gs5,35)\nDT(Ab5,35)\n\nDT(A5, 36)\nDT(As5,37)\nDT(Bb5,37)\nDT(B5, 38)\nDT(C6, 39)\nDT(Cs6,40)\nDT(Db6,40)\nDT(D6, 41)\nDT(Ds6,42)\nDT(Eb6,42)\nDT(E6, 43)\nDT(F6, 44)\nDT(Fs6,45)\nDT(Gb6,45)\nDT(G6, 46)\nDT(Gs6,47)\nDT(Ab6,47)\n\nint[] Root = int[](0, -1, -1, -1);\nint[] Major = int[](0, 4, 7, -1);\nint[] Minor = int[](0, 3, 7, -1);\nint[] Major7 = int[](0, 4, 7, 11);\nint[] Minor7 = int[](0, 3, 7, 10);\nint[] Dominant7 = int[](0, 4, 7, 10);\nint[] Diminished7 = int[](0, 3, 7, 10);\nint[] Devils = int[](0, 6, -1, -1);\nint[] Perfect5 = int[](0, 7, -1, -1);\nint[] Major3 = int[](0, 4, -1, -1);\nint[] Minor3 = int[](0, 3, -1, -1);\n\nfloat[] attenuations = float[](1.0, 0.93, 0.87, 0.82); \n\nfloat render_chord(int root, int[4] chord, float time) {\n    float amplitude = 0.0;\n    for(int i=0; i<4; i++) {\n        if(chord[i] >= 0) {\n            amplitude += attenuations[i] * sin(time * 3.14159265 * 2.0 * ji_frequencies[root + chord[i]]);\n        }\n    }\n    return amplitude;\n}\n\nvec2 mainSound( int samp, float time )\n{\n    int root = A3;\n    \n/*\n    if(false)\n        return vec2( render_chord(root, Root, time ))/ 4.5;\n    if(false)\n        return vec2( render_chord(root, Perfect5, time ))/ 4.5;\n    if(false)\n        return vec2( render_chord(root, Major3, time ))/ 4.5;\n    if(false)\n        return vec2( render_chord(root, Minor3, time ))/ 4.5;\n    if(false)\n        return vec2( render_chord(root, Devils, time ))/ 4.5;\n    if(false)\n        return vec2( render_chord(root, Major, time ))/ 4.5;\n    if(false)\n        return vec2( render_chord(root, Major7, time ))/ 4.5;\n    if(false)\n        return vec2( render_chord(root, Minor, time ))/ 4.5;\n    if(false)\n        return vec2( render_chord(root, Minor7, time ))/ 4.5;\n    if(false)\n        return vec2( render_chord(root, Dominant7, time ))/ 4.5;\n    if(false)\n        return vec2( render_chord(root, Diminished7, time ))/ 4.5;\n  */  \n    int transposition = 0;\n    \n    if(time < 1.0)\n        return vec2( render_chord(D3 + transposition, Minor7, time ))/ 4.5;\n    if(time < 2.0)\n        return vec2( render_chord(G3 + transposition, Dominant7, time ))/ 4.5;\n    if(time < 3.0)\n        return vec2( render_chord(C3 + transposition, Major7, time ))/ 4.5;\n    if(time < 4.0)\n        return vec2( render_chord(F3 + transposition, Major7, time ))/ 4.5;\n    if(time < 5.0)\n        return vec2( render_chord(B2 + transposition, Diminished7, time ))/ 4.5;\n    if(time < 6.0)\n        return vec2( render_chord(E3 + transposition, Dominant7, time ))/ 4.5;\n    if(time < 7.0)\n        return vec2( render_chord(A2 + transposition, Minor7, time ))/ 4.5;\n    if(time < 8.0)\n        return vec2( render_chord(Eb3 + transposition, Dominant7, time ))/ 4.5;\n        \n}","name":"Sound","description":"","type":"sound"}]}