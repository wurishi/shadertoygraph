{"ver":"0.1","info":{"id":"lcGGzR","date":"1712311981","viewed":31,"name":"Hypnodimension Neptune","username":"PG_TG","description":"Description","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["tag"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*------------------------\n  HYPNODIMENSION NEPTUNE\n------------------------*/\n\n#define PI acos(-1.0)\n\n#define red vec3(1., 0., 0.)\n#define green vec3(0., 1., 0.)\n#define blue vec3(0., 0., 1.)\n\n// RANDOM FUNCTION (VECTOR 2)\nfloat random(vec2 uv) {\n    return fract(\n        cos(dot(uv.xy, vec2(12.9898, 78.2337))) /\n        sin(dot(uv.yx, vec2(86.2361, 55.5983))) *\n        31839.41256\n    );\n}\n\n// NOISE FUNCTION\nfloat noise(vec2 uv) {\n    vec2 iuv = floor(uv - vec2(6.0, 9.0));\n    vec2 fuv = fract(uv);\n    \n    // Four corners in 2D of a tile\n    float c1 = random(iuv);\n    float c2 = random(iuv + vec2(1.0, 0.0));\n    float c3 = random(iuv + vec2(0.0, 1.0));\n    float c4 = random(iuv + vec2(1.0, 1.0));\n\n    // Smoothen noise edges\n    vec2 s = smoothstep(0.0, 1.0, fuv);\n\n    // Combine Output\n    return mix(c1, c2, s.x) +\n              (c3 - c1) * s.y * (1.0 - s.x) +\n              (c4 - c2) * s.x * s.y;\n}\n\n// CIRCLE FUNCTION\nvec4 circle(vec2 uv, vec2 pos, float rad, vec3 col, bool edg, float smt) {\n    float value = distance(pos, uv);\n\n    if (edg) // Smooth edges mode\n        value = smoothstep(value, value + smt, rad);\n    else     // Hard edges mode\n        value = step(value, rad);\n    \n    return vec4(col, value);\n}\n\n// RING DRAWING FUNCTION\nvec4 ring(vec4 background, vec2 uv, vec2 pos, float rad, vec3 col, float edge) {\n    vec4 foreground = circle(\n        uv,\n        pos,\n        rad - edge,\n        col,\n        true,\n        -edge\n    );\n    background = mix(background, foreground, foreground.a);\n    foreground = circle(\n        uv,\n        pos,\n        rad,\n        vec3(0.),\n        true,\n        -0.01\n    );\n    return mix(background, foreground, foreground.a);\n}\n\n// ROTATION FUNCTION\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle), -sin(_angle),\n                sin(_angle), cos(_angle));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 uv2 = uv;\n    \n    // Refraction Effect\n    float pixelation = 20.0 + sin(iTime) * 4.;\n    uv = (ceil(fragCoord.xy/pixelation + 0.5) * pixelation)/iResolution.xy;\n    \n    // Aspect Ratio Fix\n    uv = uv * 2. - 1.;\n    uv.x *= iResolution.x/iResolution.y;\n    uv2 = uv2 * 2. - 1.;\n    uv2.x *= iResolution.x/iResolution.y;\n    \n    // UV Rotation\n    uv *= rotate2d(iTime/5.);\n    uv += vec2(sin(iTime * 2.), cos(iTime));\n    \n    // Centre point\n    float x = fragCoord.x - iResolution.x/2.0;\n    float y = fragCoord.y - iResolution.y/2.0;\n\t\n    // Create Colour Bands\n    float r1 = sqrt(x * x + y * y) * noise(uv/2.) * 0.75 - iTime * 4.0;\n    float r2 = sqrt(x * x + y * y) * noise(uv * 2.) * 0.75 - iTime * 4.0;\n    float r3 = sqrt(x * x + y * y) * noise(-uv) * 0.75 - iTime * 4.0;\n    float r4 = sqrt(x * x + y * y) * 0.75 - iTime * 4.0;\n    float layer1 = sin(r1) * 10.;\n    float layer2 = sin(r2) * 10.;\n    float layer3 = sin(r3) * 10.;\n    float layer4 = cos(r4) * 10.;\n    \n    vec4 background, foreground;\n    background = vec4(red, 1.0 - layer1);\n    foreground = vec4(blue, 1.0 - layer2);\n    background = mix(foreground, background, foreground.a);\n    foreground = vec4(green, 1.0 - layer3);\n    background = mix(foreground, background, foreground.a);\n    foreground = vec4(vec3(0.), layer4);\n    background = mix(foreground, background, foreground.a);\n    \n    // Outer Ring Intro Animation\n    if (iTime <= 1.5) {\n        foreground = ring(\n            background,\n            uv2,\n            vec2(0.),\n            3.0 * cos((iTime - PI/2.) * 2.) + 1.25,\n            vec3(0.0),\n            1.\n        );\n        background = mix(background, foreground, foreground.a);\n    }\n    \n    // Output to screen\n    fragColor = background;\n}\n\n","name":"Image","description":"","type":"image"}]}