{"ver":"0.1","info":{"id":"mls3R8","date":"1671465067","viewed":137,"name":"Hexatile ripples 4","username":"zsoltk","description":"A variation of https://www.shadertoy.com/view/mll3R8","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["ripples","hexagon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.141592653589793\n#define sqrt3 1.73205\n\n// Customise\n#define scaling 5.0\n#define scalingVariation .2\n#define rippleLength 2.5\n#define rippleSlowDownFactor 2.0\n\n\n// Based on:\n// The Art of Code - Hexagon Tiling Explained!\n// https://www.youtube.com/watch?v=VmrIDyYiJBA\nfloat hexDist(vec2 p) {\n    p = abs(p);\n    float c = dot(p, normalize(vec2(1, sqrt3)));\n    c = max(c, p.x);\n\n    return c;\n}\n\n// Based on:\n// The Art of Code - Hexagon Tiling Explained!\n// https://www.youtube.com/watch?v=VmrIDyYiJBA\nvec4 hexCoords(vec2 uv) {\n    vec2 r = vec2(1, sqrt3);\n    vec2 h = r / 2.;\n    vec2 ga = mod(uv, r) - h;\n    vec2 gb = mod(uv - h, r) - h;\n    vec2 gv;\n    if (length(ga) < length(gb)) gv = ga; else gv = gb;\n\n    float angle = atan(gv.x, gv.y);\n    float edgeDist = 0.5 - hexDist(gv);\n    vec2 id = uv - gv;\n\n    return vec4(angle, edgeDist, id.x, id.y);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Coords\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    uv *= scaling * (1. + scalingVariation *sin(iTime / 4.));\n    vec4 hc = hexCoords(uv);\n\n    // Angular ripple effect - adapted from:\n    // python273 - Triangular pattern\n    // https://www.shadertoy.com/view/DsjXDK\n    //\n    // Here atan is fed the \"wrong\" fields to achieve an interesting effect:\n    float a = (1. + atan(hc.y - cos(iTime), hc.x - sin(iTime)) / PI) / 2.;\n    float l = length(uv) / length(vec2(rippleLength));\n    a = fract(a + l / 1. - iTime / rippleSlowDownFactor);\n    \n    // Color\n    vec3 col = vec3(0);\n    col.r = (.75 + .25*sin(iTime)) * abs(a*(hc.z)*.19);\n    col.b = (.55 + .25*sin(iTime+PI)) * abs(a*(hc.w - hc.z));\n    col *= 1.4;\n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}