{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"texture","id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}},{"channel":1,"type":"texture","id":"XsX3Rn","filepath":"/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}},{"channel":2,"type":"texture","id":"XsXGRn","filepath":"/media/a/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}},{"channel":3,"type":"texture","id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"// created by Vinicius Graciano Santos - vgs/2014\n// http://viniciusgraciano.com/blog/making-of-the-mine/\n\n// increase/decrease the STEPS value if you have a fast/slow gpu\n#define STEPS 100\n#define EPS 0.01\n\n// uncomment to enable bump mapping (crashes on ANGLE-based browsers)\n//#define BUMP 5.0\n\n// iq's 3D noise function: https://www.shadertoy.com/view/4sfGzS.\nfloat hash(float n ) { return fract(sin(n)*43758.5453123); }\nfloat noise(vec3 x) {\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n\t\n    float n = p.x + p.y*157.0 + 113.0*p.z;\n    return mix(mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\n                   mix( hash(n+157.0), hash(n+158.0),f.x),f.y),\n               mix(mix( hash(n+113.0), hash(n+114.0),f.x),\n                   mix( hash(n+270.0), hash(n+271.0),f.x),f.y),f.z);\n}\n\nfloat fbm(vec3 p) {\n\tfloat k = 0.0;\n\t\t\n\tk += 1.000*noise(p); p*=2.0;\n\tk += 0.500*noise(p); p*=2.0;\n\tk += 0.250*noise(p);\n\treturn k/1.75;\n}\n\nvec2 track(float z) {\n\t// play with these constants for some fun!\n\tfloat x = cos(0.2*z);\n\tfloat y = -cos(0.2*z) - 0.1*sin(0.8*z - 2.0);\n\treturn vec2(x, y);\n}\n\nfloat cave(vec3 p) {\n\tconst float k = 4.0;\n\treturn 1.6-pow(pow(abs(p.x), k) + pow(abs(p.y), k), 1.0/k);\n}\n\nfloat box(vec2 p, vec2 b, float r) {\n\treturn length(max(abs(p)-b, 0.0)) - r;\n}\n\nfloat box(vec3 p, vec3 b, float r) {\n\treturn length(max(abs(p)-b, 0.0)) - r;\n}\n\nfloat support(vec3 p) {\n\tconst vec4 c = vec4(0.15, 0.2, 2.0, 1.2);\n\tvec3 q = vec3(abs(p.x) - c.z, p.y - c.z, mod(p.z, 6.0) - 3.0);\n\tfloat d = box(q.xz, c.xx, 0.05);\n\td = min(d, box(q.yz, c.yx, 0.05)); \n\tq.x += q.y + c.w;\n\treturn min(d, box(q.xz, c.xx, 0.05));\n}\n\nfloat plank(vec3 p) {\n\tvec3 q = vec3(p.x, p.y + 1.9, mod(p.z, 2.0) - 1.0);\n\treturn box(q, vec3(1.5, 0.05, 0.2), 0.01);\n}\n\nfloat rails(vec3 p) {\n\tvec2 q = vec2(abs(p.x)-1.0, p.y + 1.7);\n\tfloat d = box(q, vec2(0.1), 0.01); q.x += 0.2;\n\treturn max(d, 0.11 - length(q));\n}\n\nvec2 dist_field(vec3 p) {\n\tp.xy += track(p.z);\n\tvec2 res = vec2(cave(p) + fbm(p), 0.0);\n\t\n\tfloat d = support(p);\n\tif (d < res.x) res = vec2(d, 1.0);\n\td = plank(p);\n\tif (d < res.x) res = vec2(d, 1.0);\n\td = rails(p);\n\tif (d < res.x) res = vec2(d, 2.0);\n\treturn res;\n}\n\nvec3 normal(vec3 p) {\n\tvec2 q = vec2(0.01, 0.0);\n\treturn normalize(vec3(dist_field(p+q.xyy).x - dist_field(p-q.xyy).x,\n\t\t\t\t\t\t  dist_field(p+q.yxy).x - dist_field(p-q.yxy).x,\n\t\t\t\t\t\t  dist_field(p+q.yyx).x - dist_field(p-q.yyx).x));\n}\n\nvec3 cubeMap(sampler2D samp, vec3 q, vec3 n) {\n\tvec3 x = texture(samp, q.zy).rgb;\n\tvec3 y = texture(samp, q.zx).rgb;\n\tvec3 z = texture(samp, q.xy).rgb;\n\treturn abs(n.x)*x + abs(n.y)*y + abs(n.z)*z;\n}\n\n#ifdef BUMP\nvec3 normalMap(sampler2D samp, vec2 q) {\n\tvec2 p = vec2(0.01, 0.0);\n\tvec3 a = BUMP*(texture(samp, q+p.xy).rgb - texture(samp, q-p.xy).rgb);\n\tvec3 b = BUMP*(texture(samp, q+p.yx).rgb - texture(samp, q-p.yx).rgb);\n\treturn normalize(cross(vec3(1.0, 0.0,  (a.x+a.y+a.z)/3.0),\n\t\t   \t               vec3(0.0, 1.0, (b.x+b.y+b.z)/3.0)));\n}\n\nvec3 cubeNormalMap(sampler2D samp, vec3 q, vec3 n) {\n\tvec3 x = normalMap(samp, q.zy);\n\tvec3 y = normalMap(samp, q.zx);\n\tvec3 z = normalMap(samp, q.xy);\n\treturn abs(n.x)*x + abs(n.y)*y + abs(n.z)*z;\n}\n#endif\n\nvec3 shade(in vec3 ro, in vec3 rd, float t, float id) {\n\tvec3 key_l = -rd;\n\tvec3 key_c = vec3(243.0, 141.0, 21.0)/25.5;\n\t\n\tvec3 fill_l = vec3(0.0, 0.0, -1.0);\n\tvec3 fill_c = 0.2*key_c;\n\t\n\tvec3 q = ro + t*rd;\n\tvec3 n = normal(q);\n\n\tvec3 mat = vec3(1.0); float shin = 0.0;\n\tif (id == 0.0) {\n\t\tshin = 25.0;\n\t\tmat = mix(cubeMap(iChannel0, q, n), cubeMap(iChannel1, q, n), noise(q));\n\t} else if (id == 1.0) {\n\t\tshin = 50.0;\n\t\tmat = cubeMap(iChannel2, q, n);\n\t\t#ifdef BUMP\n\t\tn = normalize(n + cubeNormalMap(iChannel2, q, n));\n\t\t#endif\n\t} else {\n\t\tshin = 75.0;\n\t\tmat = cubeMap(iChannel3, q, n);\n\t\t#ifdef BUMP\n\t\tn = normalize(n + cubeNormalMap(iChannel3, q, n));\n\t\t#endif\n\t}\n\tmat = pow(abs(mat), vec3(2.2));\n\tvec3 col = vec3(0.0);\n\t\n\t// key light.\n\tfloat lamb = max(0.0, dot(n, key_l));\n\tfloat spec = lamb > 0.0 ? pow(max(0.0, dot(n, normalize(key_l-rd))), shin) : 0.0;\n\tcol += key_c*mat*(0.6*lamb + 0.4*spec)*pow(max(-dot(-rd,normalize(q)), 0.0), 10.0)/(0.1*t*t);\n\t\n\t// fill light.\n\tlamb = max(0.0, dot(n, fill_l));\n\tspec = lamb > 0.0 ? pow(max(0.0, dot(n, normalize(fill_l-rd))), shin) : 0.0;\n\tcol += fill_c*mat*(0.6*lamb + 0.4*spec)/(0.4*t*t);\n\t\n\tcol = mix(vec3(0.05), col, exp(-0.05*t));\n\treturn col/(col+1.0);\n\t\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = -1.0 + 2.0*fragCoord.xy / iResolution.xy;\n\tuv.x *= iResolution.x/iResolution.y;\n\t\n\tvec3 ro = vec3(0.0, 0.0, -5.0*iTime-10.0);\n\tro.xy -= track(ro.z);\n\tvec3 rd = normalize(vec3(uv, -1.0));\n\t\n\tfloat t = 0.0; vec2 res = vec2(3.0);\n\tfor (int i = 0; i < STEPS; ++i) {\n\t\tif (res.x < EPS || t > 32.0) continue;\n\t\tres = dist_field(ro + t*rd); t += 0.7*res.x;\n\t}\n\t\n\tvec3 col = shade(ro, rd, t, res.y);\n\tcol = pow(abs(col), vec3(1.0/2.2));\n\tcol = smoothstep(0.0, 1.0, col);\n\tfragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XdfXzS","date":"1403109628","viewed":859,"name":"[BRCompo #1] The Mine","username":"vgs","description":"An old, abandoned mine.\nThis is my entry for the first BRCompo by Danguafer.","likes":20,"published":1,"flags":0,"usePreview":0,"tags":["3d","mine","shaft","cart","minecart"],"hasliked":0,"parentid":"","parentname":""}}