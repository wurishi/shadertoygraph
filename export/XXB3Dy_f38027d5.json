{"ver":"0.1","info":{"id":"XXB3Dy","date":"1708884758","viewed":45,"name":"rendue1","username":"mahmoud","description":"rendu1","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["rendu1"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Modeling - 2023.02.06\n// Eric Galin\n\n// Rotation matrix around z axis\n// a : Angle\nmat3 Rz(float a)\n{\n  float sa=sin(a);float ca=cos(a);\n  return mat3(ca,sa,0.,-sa,ca,0.,0.,0.,1.);\n}\n\nmat3 Ry(float a)\n{\n  float s=sin(a);float c=cos(a);\n  return mat3(c,0.,-s,0.,1.,0.,s,0.,c);\n}\n\nmat3 Rx(float a)\n{\n  float s=sin(a);float c=cos(a);\n  return mat3(1.,0.,0.,0.,c,-s,0.,s,c);\n}\n\n\n// Compute the ray\n//      m : Mouse position\n//      p : Pixel\n// ro, rd : Ray origin and direction\nvoid Ray(vec2 m,vec2 p,out vec3 ro,out vec3 rd)\n{\n  float a=3.*3.14*m.x;\n  float le=2.3;\n  \n  // Origin\n  ro=vec3(37.,0.,15.);\n  ro*=Rz(a);\n  \n  // Target point\n  vec3 ta=vec3(0.,0.,1.);\n  \n  // Orthonormal frame\n  vec3 w=normalize(ta-ro);\n  vec3 u=normalize(cross(w,vec3(0.,0.,1.)));\n  vec3 v=normalize(cross(u,w));\n  rd=normalize(p.x*u+p.y*v+le*w);\n}\n\n\n// Operators\n\n// Union\n// a,b : field function of left and right sub-trees\nfloat Union(float a,float b)\n{\n  return min(a,b);\n}\n\n\nfloat Inter(float a,float b)\n{\n  return max(a,b);\n}\n\n\nfloat Plan(vec3 p , vec3 c , vec3 n)\n{\n    return dot(p-n,c);   \n}\n\nvec3 Trans ( vec3 t, vec3 p ) \n{\n    return (p - t);\n}\n\n\n// Primitives\n\n// Sphere\n// p : point\n// c : center of skeleton\n// r : radius\nfloat Sphere(vec3 p,vec3 c,float r)\n{\n  return length(p-c)-r;\n}\n\n\n//demisphere\nfloat demisphere(vec3 p,vec3 c,vec3 n,float r)\n{\n  float v1=Sphere(p,c,r);\n  float v2=Plan(p,n,c);\n  return max(v1,v2);\n}\n\n//cylindre\nfloat cylindre (vec3 p, vec3 c, float r, vec3 u)\n{\n    u=normalize(u);\n    return(length((p-c)-dot(p-c,u)*u)-r);\n}\n\nfloat cylindre2 (vec3 p, vec3 c, float r, vec3 u, float h)\n{\n    float v1=cylindre(p,c,r,u);\n    float v2=Plan(p,-u,c-(h*0.5));\n    float v3=Plan(p,u,c+(h*0.5));\n    return max(max(v1,v2),v3);\n}\n\n\n//boite\nfloat boite (vec3 a,vec3 b)\n{\n    vec3 d=abs(a)-b;\n    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat boite2(vec3 p, vec3 b, vec3 mouv)\n{\n    vec3 d=Trans(p, mouv);\n    return boite(d,b);\n    \n}\n\n\n//Capsule\nfloat Capsule (vec3 p, vec3 c, float r, vec3 u, float h)\n{\n    return Union(cylindre2(p,c,r,u,h),Union(\n    demisphere(p,vec3(c.x-h*0.5,c.y,c.z),normalize(u),r),\n    demisphere(p,vec3(c.x+h*0.5,c.y,c.z),-normalize(u),r)));\n}\n\n\n//tore\nfloat tore(vec3 p, vec3 c , float g , float pr )\n{\nvec3 prim=c+vec3((p-c).xy,0.);\nfloat d= length(prim-c)-g;\nd=sqrt(d*d+((p-c).z)*((p-c).z));\nreturn d-pr;\n}\n\n\n// Potential field of the object\n// p : point\n\n\n\n\n\nfloat object(vec3 p)\n{\n    // base\nfloat v=Union(1000.,demisphere(p,vec3(0.,0.,2.),normalize(vec3(0.,0.,1.)),24.));\n\n//table\nv=Union(v, cylindre2(p,vec3(-8.,-7.,0.),1.5,vec3(0.,0.,1.),16.));\nv=Union(v, cylindre2(p,vec3(0.,-7.,0.),1.5,vec3(0.,0.,1.),16.));\nv=Union(v, cylindre2(p,vec3(0.,5.,0.),1.5,vec3(0.,0.,1.),16.));\nv=Union(v, cylindre2(p,vec3(-8.,5.,0.),1.5,vec3(0.,0.,1.),16.));\n\nv=Union(v,boite2(p,vec3(8.,8.,0.5),vec3(-4.,-1.,8.)));\n//sphere sur la table\nv = Union( v , Sphere(p,vec3(0.,0.,10.6),2.25));\n\n//tore\nv =Union(v,tore(p,vec3(0.,0.,5.),22.,1.5));\n\n   \n // personnage  \n  v=Union(v,Capsule(p,vec3(1.,15.,3.),0.8,vec3(1.,0.,0.),5.));\n  v=Union(v,Capsule(p,vec3(1.,-15.,3.),0.8,vec3(1.,0.,0.),5.));\n  v=Union(v, cylindre2(p,vec3(10.,0.,0.),1.5,vec3(0.,0.,1.),11.));\n  v=Union(v, cylindre2(p,vec3(15.,0.,0.),1.5,vec3(0.,0.,1.),11.));\n  v = Union( v , Sphere(p,vec3(12.,0.,9.),4.5));\n  v = Union( v , Sphere(p,vec3(12.,0.,15.5),2.25));\n  v=Union(v,Capsule(p,vec3(7.,2.,12.),0.8,vec3(1.,0.,0.),5.));\n  v=Union(v,Capsule(p,vec3(17.,2.,12.),0.8,vec3(1.,0.,0.),5.));\n  v = Union( v , Sphere(p,vec3(12.2,2.4,16.),0.25));\n  v = Union( v , Sphere(p,vec3(10.5,1.8,16.),0.25));\n  v=Union(v,Capsule(p,vec3(11.5,2.,14.5),0.2,vec3(1.,0.,0.),1.5));\n  \n    return v;\n}\n\n\n\n\n// Analysis of the scalar field\n\nconst int Steps=200;// Number of steps\nconst float Epsilon=.01;// Marching epsilon\n\n// Object normal\n// p : point\nvec3 ObjectNormal(vec3 p)\n{\n  const float eps=.001;\n  vec3 n;\n  float v=object(p);\n  n.x=object(vec3(p.x+eps,p.y,p.z))-v;\n  n.y=object(vec3(p.x,p.y+eps,p.z))-v;\n  n.z=object(vec3(p.x,p.y,p.z+eps))-v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\n// o : ray origin\n// u : ray direction\n// e : Maximum distance\n// h : hit\n// s : Number of steps\nfloat SphereTrace(vec3 o,vec3 u,float e,out bool h,out int s)\n{\n  h=false;\n  \n  // Start at the origin\n  float t=0.;\n  \n  for(int i=0;i<Steps;i++)\n  {\n    s=i;\n    vec3 p=o+t*u;\n    float v=object(p);\n    // Hit object\n    if(v<0.)\n    {\n      h=true;\n      break;\n    }\n    // Move along ray\n    t+=max(Epsilon,v);\n    // Escape marched too far away\n    if(t>e)\n    {\n      break;\n    }\n  }\n  return t;\n}\n\n// Lighting\n\n// Background color\n// d : Ray direction\nvec3 background(vec3 d)\n{\n  return mix(vec3(.45,.55,.99),vec3(.65,.69,.99),d.z*.5+.5);\n}\n\n// Shadowing\n// p : Point\n// n : Normal\n// l : Light direction\nfloat Shadow(vec3 p,vec3 n,vec3 l)\n{\n  bool h;\n  int s;\n  float t=SphereTrace(p+Epsilon*n,l,100.,h,s);\n  if(!h)\n  {\n    return 1.;\n  }\n  return 0.;\n}\n\n// Shading and lighting\n// p : Point\n// n : Normal at point\n// e : Eye direction\nvec3 Shade(vec3 p,vec3 n,vec3 e)\n{\n  // Point light\n  const vec3 lp=vec3(0.,37.,25.);\n  \n  // Light direction to point light\n  vec3 l=normalize(lp-p);\n  \n  // Ambient color\n  vec3 ambient=.25+.25*background(n);\n  \n  // Shadow computation\n  float shadow=Shadow(p,n,l);\n  \n  // Phong diffuse\n  vec3 diffuse=.35*clamp(dot(n,l),0.,1.)*vec3(1.,1.,1.);\n  \n  // Specular\n  vec3 r=reflect(e,n);\n  vec3 specular=.15*pow(clamp(dot(r,l),0.,1.),35.)*vec3(1.,1.,1.);\n  vec3 c=ambient+shadow*(diffuse+specular);\n  return c;\n}\n\n// Shading according to the number of steps in sphere tracing\n// n : Number of steps\nvec3 ShadeSteps(int n)\n{\n  float t=float(n)/(float(Steps-1));\n  return.5+mix(vec3(.05,.05,.5),vec3(.65,.39,.65),t);\n}\n\n// Picture in picture\n// pixel : Pixel\n// pip : Boolean, true if pixel was in sub-picture zone\nvec2 Pip(in vec2 pixel,out bool pip)\n{\n  // Pixel coordinates\n  vec2 p=(-iResolution.xy+2.*pixel)/iResolution.y;\n  if(pip==true)\n  {\n    const float fraction=1./4.;\n    // Recompute pixel coordinates in sub-picture\n    if((pixel.x<iResolution.x*fraction)&&(pixel.y<iResolution.y*fraction))\n    {\n      p=(-iResolution.xy*fraction+2.*pixel)/(iResolution.y*fraction);\n      pip=true;\n    }\n    else\n    {\n      pip=false;\n    }\n  }\n  return p;\n}\n\n// Image\nvoid mainImage(out vec4 color,in vec2 pxy)\n{\n  // Picture in picture on\n  bool pip=true;\n  \n  // Pixel\n  vec2 pixel=Pip(pxy,pip);\n  \n  // Mouse\n  vec2 m=iMouse.xy/iResolution.xy;\n  \n  // Camera\n  vec3 ro,rd;\n  Ray(m,pixel,ro,rd);\n  \n  // Trace ray\n  \n  // Hit and number of steps\n  bool hit;\n  int s;\n  \n  float t=SphereTrace(ro,rd,100.,hit,s);\n  \n  // Shade background\n  vec3 rgb=background(rd);\n  \n  if(hit)\n  {\n    // Position\n    vec3 p=ro+t*rd;\n    \n    // Compute normal\n    vec3 n=ObjectNormal(p);\n    \n    // Shade object with light\n    rgb=Shade(p,n,rd);\n  }\n  \n  // Uncomment this line to shade image with false colors representing the number of steps\n  if(pip==true)\n  {\n    rgb=ShadeSteps(s);\n  }\n  \n  color=vec4(rgb,1.);\n}\n\n\n","name":"Image","description":"","type":"image"}]}