{"ver":"0.1","info":{"id":"tslcWs","date":"1585924002","viewed":74,"name":"fwidth zoom","username":"plutoo","description":"zoom with fwidth","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["fwidth"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    //vec2 uv = fragCoord/iChannelResolution[0].xy;\n    float r = texture(iChannel0, uv).r;\n    vec4 col = texture(iChannel0, uv);\n\n    \n    float aaf = fwidth(r);\n\tvec4 colorFront = vec4(1.0, 0.0, 0.0, 1.0);\n    vec4 colorBackground = vec4(1.0, 1.0, 1.0, 1.0);\n    \n    float R = (sin(iTime) + 1.0)/2.0;\n    //float R = 0.5;\n    //const float smoothing = 0.005;\n    float smoothing = fwidth(r);\n    \n    float c = 1.0 - smoothstep(R -smoothing, R, r);\n   // float c = 1.0 - step(R, r);\n    \n    fragColor = mix(colorBackground, colorFront, c);\n    //fragColor = vec4(1.0,1.0,1.0, 1.0);\n    //fragColor = col;  //old color\n    //fragColor = vec4(aaf,aaf,aaf, 1.0);\n}\n\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 c= vec2(0.5, 0.5);\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 uv2 = fragCoord / iChannelResolution[1].xy;\n    float d = 1.0 - distance(c, uv);\n\n\tfloat R = (sin(iTime) + 1.0)/2.0;\n    \n    if(d < R) {\n        d = texture(iChannel1, uv2).r;\n        d = d * R * ( 0.9);\n    }\n\n    \n    fragColor = vec4(d,d,d,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}