{"ver":"0.1","info":{"id":"X3fcD8","date":"1726080418","viewed":6,"name":"Custom Flower Yifan_Lu 450","username":"Yifan_Lu","description":"Try to match the given flower patterns!\n\nBrownie points: how do you change the color of the flower from the center?","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["circle"],"hasliked":0,"parentid":"l3syDn","parentname":"Spinning Flower Yifan_Lu"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/**\n * @author rah, inspired by jonobr1 / http://jonobr1.com/\n */\n\n/* \n * Output circle colors at given center pos and radius\n */\n \n# define PI 3.141592653\n\nvec4 circle(vec2 uv, vec2 center, float radius, vec3 color)\n{\n    // Get distance of point from center, get difference from given radius\n\tfloat d = length(center - uv) - radius;\n\tfloat t = clamp(d, 0.0, 1.0);\n    \n    \n    // If point is smaller than radius, set color alpha to 1, otherwise 0\n\treturn vec4(color, 1.0 - t);\n}\n\nvec4 flower(vec2 uv, vec2 center, float radius, vec3 color1, vec3 color2) {\n    // Get distance of point from center, get difference from given radius\n\tfloat d = length(center - uv) - radius;\n\tfloat t = clamp(d, 0.0, 1.0);\n    \n    // setting color\n    float lerp_t = length(uv - center) / radius;\n    vec3 color = lerp3(color1, color2, lerp_t);\n    color = lerp3(color1, color2, lerp_t);\n    \n    \n    // If point is smaller than radius, set color alpha to 1, otherwise 0\n\treturn vec4(color, 1.0 - t);\n}\n\n/*\n * Your work here!\n */\n \n // radius for leaf\nfloat computeRadius_leaf(vec2 uv) {\n    // Centered uv\n    vec2 uvCenter = (2.0f * uv - iResolution.xy);\n    // Get pixel angle around the center\n    float a = atan(uvCenter.x,uvCenter.y);\n    \n    float radius = 0.0;\n    \n    float freq = 5.0;\n    float pedal = 5.0;\n    float amp = 2.0 * PI * freq / pedal;\n    // amp/freq = period for triangle wave\n    // #pedal = 2*PI / period\n    radius = 0.1 * iResolution.y + 50.0 * triangle_wave((a), freq, amp);\n    \n    return radius;\n    \n}\n \n // leaf shape\nvec4 leaf(vec2 uv, vec2 center, float radius, vec3 color) {\n    // Get distance of point from center, get difference from given radius\n\tfloat d = length(center - uv) - radius;\n\tfloat t = clamp(d, 0.0, 1.0);\n    \n    \n    // If point is smaller than radius, set color alpha to 1, otherwise 0\n\treturn vec4(color, 1.0 - t);\n}\n\n// pedal shape\nvec4 pedal(vec2 uv, vec2 center, float radius, vec3 color) {\n // Get distance of point from center, get difference from given radius\n\tfloat d = length(center - uv) - radius;\n\tfloat t = clamp(d, 0.0, 1.0);\n    \n    \n    // If point is smaller than radius, set color alpha to 1, otherwise 0\n\treturn vec4(color, 1.0 - t);\n\n\n}\n\n// pedal radius\nfloat computeRadius_pedal(vec2 uv) {\n    // Centered uv\n    vec2 uvCenter = (2.0f * uv - iResolution.xy);\n    // Get pixel angle around the center\n    float a = atan(uvCenter.x,uvCenter.y);\n    \n    float radius = 0.0;\n    \n    float freq = 2.0;\n    float pedal = 1.0;\n    float amp = 2.0 * PI * freq / pedal;\n    // amp/freq = period for triangle wave\n    // #pedal = 2*PI / period\n    radius = 0.1 * iResolution.y + 20.0 * triangle_wave((a - PI / 2.0 -3.0 * smoothstep(-1.0, 1.0, sin(iTime))), freq, amp);\n    radius = radius * 0.3;\n    \n    return radius;\n\n}\n \n \nfloat computeRadius(vec2 uv)\n{\n    float radius = 0.25 * iResolution.y;\n    \n    // Centered uv\n    vec2 uvCenter = (2.0f * uv - iResolution.xy);\n    // Get pixel angle around the center\n    float a = atan(uvCenter.x,uvCenter.y);\n    \n    //radius = 0.25 * iResolution.y + 50.0 * sin(a * 20.0) * smoothstep(0.0, 1.0, sin(iTime)); //pulsing\n    float bias = bias(iTime, 0.8);\n    radius = 0.25 * iResolution.y + 20.0 * sin((a + iTime) * 5.0) * 5.0 * sin(iTime); // * smoothstep(-1.0, 1.0, sin(iTime)); // spinning\n    float freq = 5.0;\n    float pedal = 5.0;\n    float amp = 2.0 * PI * freq / pedal;\n    // amp/freq = period for triangle wave\n    // #pedal = 2*PI / period\n    radius = 0.25 * iResolution.y + 20.0 * triangle_wave((a + iTime), freq, amp) * sin(iTime);\n    \n    \n    return radius;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n\tvec2 uv = fragCoord.xy;\n\tvec2 center = iResolution.xy * 0.5;\n\tfloat radius = computeRadius(uv);\n    \n    // Background layer\n\tvec4 layer1 = vec4(rgb(255.0, 215.0, 210.0), 1.0);\n\t\n\t// flower\n\tvec3 red = rgb(225.0, 50.0, 70.0);\n    vec3 black = rgb(0.0, 0.0, 0.0);\n    vec3 pedalColor_out = rgb(224.0, 114.0, 166.0);\n    vec3 pedalColor_in = rgb(230.0, 184.0, 205.0);\n\tvec4 layer2 = flower(uv, center, radius, pedalColor_out, pedalColor_in);\n    \n    // leaf\n    vec3 green = rgb(103.0, 166.0, 120.0);\n    float leaf_radius = computeRadius_leaf(uv);\n    vec4 leaf_layer = leaf(uv, center, leaf_radius, green);\n    \n    // floating pedals\n    uv.y -= 10.0;\n    float pedal_radius = computeRadius_pedal(uv);\n    vec4 pedal_layer = pedal(uv, center, pedal_radius, pedalColor_out);\n//    if(mod(uv.x, 50.0) == 0.0 && mod(uv.y, 50.0) == 0.0) {\n//        pedal_radius = computeRadius_pedal(uv);\n//        pedal_layer = pedal(uv, center, pedal_radius, pedalColor_out);\n//    }\n\n    \n    \n\t\n\t// Blend the three\n    \n    fragColor = mix(layer1, leaf_layer, leaf_layer.a);  \n\tfragColor = mix(fragColor, layer2, layer2.a);\n    fragColor = mix(fragColor, pedal_layer, pedal_layer.a);\n\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/*\n * Toolbox functions! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n */ \nfloat bias(float t, float b) {\n    return (t / ((((1.0/b) - 2.0)*(1.0 - t))+1.0));\n}\n\nfloat triangle_wave(float x, float freq, float amplitude) {\n    return abs(mod((x * freq), amplitude) - (0.5 * amplitude));\n}\n\nfloat lerp(float a, float b, float t) {\n    return a + t * (b - a);\n}\n\nvec3 lerp3(vec3 a, vec3 b, float t) {\n    return a + t * (b - a);\n}\n\n\n\n\n/*\n * Basic Utilities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n */\n\n\n/* \n * Rotate an input point about some center by angle\n */\nvec2 rotatePoint2d(vec2 uv, vec2 center, float angle)\n{\n    vec2 rotatedPoint = vec2(uv.x - center.x, uv.y - center.y);\n    float newX = cos(angle) * rotatedPoint.x - sin(angle) * rotatedPoint.y;\n    rotatedPoint.y = sin(angle) * rotatedPoint.x + cos(angle) * rotatedPoint.y;\n    rotatedPoint.x = newX;\n    return rotatedPoint;\n}\n\n/*\n * Make a vec3 color from rgb values [0, 255]\n */\nvec3 rgb(float r, float g, float b)\n{\n\treturn vec3(r / 255.0, g / 255.0, b / 255.0);\n}\n","name":"Common","description":"","type":"common"}]}