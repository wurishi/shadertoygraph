{"ver":"0.1","info":{"id":"st3BRr","date":"1662509501","viewed":126,"name":"Distorted Sphere (01)","username":"spenceryonce","description":"Forked from https://www.shadertoy.com/view/WtXcWj. \n\nThis is super fun to play with. I may come back here and explore these further. ","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["math","distort","sphere"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//CONSTANTS\nconst float PI = acos(-1.0);\n\n//HELPERS\nfloat square(float x) { return sign(sin(x * PI)) * 0.5 + 0.5; }\nfloat ramps(float x) { return mod(x,1.0)*square(x); }\nfloat smoothed_ramps(float x) { return smoothstep(0.0,1.0,ramps(x)); }\nfloat steps(float x) { return floor(x / 2.0 + 0.5); }\nfloat ramps_step(float x) { return ramps(x) + steps(x); }\nfloat smoothed_ramps_step(float x) { return smoothed_ramps(x) + steps(x); }\n\n//SHAPING HELPERS\nfloat sphere(vec3 o, float r) { return length(o) - r; }\n\nfloat cylinder(vec3 o, float r) { return length(o.xz) - r; }\n\nmat2 rotate(float a) { return mat2(cos(a),sin(a),-sin(a),cos(a)); }\n\nvec3 fetch(vec3 o) {\n    float deform = iTime / 0.35;\n    o.yz *= rotate(smoothed_ramps_step(iTime + 1.0) * PI / 4.0);\n    o.xy *= rotate(smoothed_ramps_step(iTime + 0.5) * PI / 4.0);\n    o.zx *= rotate(smoothed_ramps_step(iTime) * PI / 4.0);\n    o.z += 0.1 * sin(o.y * 5.0 + deform);\n    o.x += 0.1 * sin(o.z * 50.0 + deform);\n    o.y += 0.1 * sin(o.x * 10.0 + deform);\n    \n    float object = sphere(o, 0.6);\n    if (object < 0.0) {\n        vec3 color = vec3(sin(o.x* 2.0 / 0.02)*0.3,sin(o.y*2.0/0.02)*0.1,sin(o.z*5.0/0.02)*0.3);\n        color /= 4.0;\n        return color;\n    } else {\n\t \treturn vec3(0.0);\n    }\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 p = (2.0 * fragCoord.xy - iResolution.xy) / iResolution.y;\n    vec3 light = vec3(0.0);\n\n    vec3 o = vec3(0.0,0.0,-1.0);\n    vec3 d = normalize(vec3(p.xy, 1.0));\n    \n    float t = 0.0;\n    for (int i = 0; i < 200; i++) {\n        t += 0.01;\n        light += fetch(d * t + o);\n    }\n    \n    light = encodeSRGB(light);\n\n    fragColor = vec4(light,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec3 encodeSRGB(vec3 linearRGB)\n{\n    vec3 a = 12.92 * linearRGB;\n    vec3 b = 1.055 * pow(linearRGB, vec3(1.0 / 2.4)) - 0.055;\n    vec3 c = step(vec3(0.0031308), linearRGB);\n    return mix(a, b, c);\n}\n\nvec3 decodeSRGB(vec3 screenRGB)\n{\n    vec3 a = screenRGB / 12.92;\n    vec3 b = pow((screenRGB + 0.055) / 1.055, vec3(2.4));\n    vec3 c = step(vec3(0.04045), screenRGB);\n    return mix(a, b, c);\n}","name":"Common","description":"","type":"common"}]}