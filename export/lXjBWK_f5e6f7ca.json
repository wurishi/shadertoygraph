{"ver":"0.1","info":{"id":"lXjBWK","date":"1730648257","viewed":83,"name":"Post-Processing Extravaganza","username":"corncob","description":"Barrel Distortion -> Chromatic Aberration -> Film Grain -> Vignette\n\nClick and drag for bonus motion blur.","likes":6,"published":1,"flags":32,"usePreview":0,"tags":["postprocessing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define BARREL_INTENSITY 0.05\n\n#define CHROMATIC_ABERRATION_INTENSITY 0.5\n#define SAMPLES 8.0 // greater than 1\n#define JITTER\n\n#define FILM_GRAIN_INTENSITY 1.\n#define LUMA_COEF vec3(0.2126,0.7152,0.0722)\n\n#define VIGNETTE_INTENSITY 0.5\n\n#define OVERALL_INTENSITY 1.0\n#define ANIMATION_SPEED 0.25\n\n// from https://www.shadertoy.com/view/lstyzs\nvec2 lensDistort(vec2 c, const float factor)\n{\n    c = (c - 0.5) * 2.0;\n    c.y *= 3.0/4.0;\n    c /= 1.0 + dot(c, c) * - factor + 1.6 * factor;\n    c.y *= 4.0/3.0;\n    c = c * 0.5 + 0.5;\n    return c;\n}\n\n// based on this https://www.shadertoy.com/view/WldSRf\nfloat pseudo_gaussian_blue_noise(const vec2 p)\n{\n    ivec2 ip = ( 1337 * iFrame + ivec2(p) ) % textureSize(iChannel1, 0).xy;\n\tfloat blue_noise = 2.0 * texelFetch( iChannel1, ip, 0 ).r - 1.0;   \n    return sign(blue_noise) * (1.0 - sqrt(1.0 - abs(blue_noise))); // [-1;1]\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n/////////////////// BARREL DISTORTION\n    vec2 uv = fragCoord / iResolution.xy;\n    float base_animation = OVERALL_INTENSITY * abs(cos(PI * ANIMATION_SPEED * iTime));\n    float intensity = BARREL_INTENSITY * base_animation;\n    uv = lensDistort(uv, intensity);\n\n/////////////////// CHROMATIC ABERRATION\n// https://www.desmos.com/calculator/qxgrvxgzan this is a graphical demo my method\n    intensity = CHROMATIC_ABERRATION_INTENSITY * base_animation;\n\n    // determine how for to blur\n    vec2 center = 0.5 * iResolution.xy;\n    float max_diagonal = length(center); // for scaling\n    float center_distance = distance(fragCoord, center);\n    float blue_distance = center_distance * cos(0.25 * PI * center_distance * intensity / max_diagonal);\n    vec2 pixel_center_pos = fragCoord - center;\n    vec2 blue_center_pos = pixel_center_pos * blue_distance / center_distance;\n    vec2 pixel_range = blue_center_pos - pixel_center_pos;\n    \n    // create steps for sample loop\n    vec2 pixel_size = 1.0 / iResolution.xy;\n    vec2 sample_delta = pixel_range / SAMPLES;\n    float spectrum_delta = 1.0 / SAMPLES;\n    vec2 uv_delta = sample_delta * pixel_size;\n\n    // set location of first sample, jittered or not\n    #if defined(JITTER)\n    float white_noise = hash21(uv + hash21(uv + iTime));\n    vec2 sample_uv = uv + uv_delta * white_noise;\n    float spectrum_pos = spectrum_delta * white_noise;\n    #else\n    vec2 sample_uv = uv + 0.5 * uv_delta;\n    float spectrum_pos = 0.5 * spectrum_delta;\n    #endif\n\n    vec3 filter_sum = vec3(0.0);\n    vec3 sum = vec3(0.0);\n    \n    // sample away\n    while (spectrum_pos < 1.0) {\n        // this set of equations determines the colors of the rainbow\n        float c1 = 6.0 * spectrum_pos - 3.0;\n        vec3 spectrum_filter;\n        \n        spectrum_filter.g = 0.5 + 0.5 * sin(2.0 * PI * (spectrum_pos - 0.25));\n        if (spectrum_pos < 0.5) \n            spectrum_filter.r = 0.5 + 0.5 * sin(4.0 * PI * spectrum_pos - 0.5 * PI);\n        else\n            spectrum_filter.b = 0.5 + 0.5 * sin(4.0 * PI * spectrum_pos - 0.5 * PI);\n\n        sum += texture(iChannel0, sample_uv).r * spectrum_filter;\n        filter_sum += spectrum_filter;\n        spectrum_pos += spectrum_delta;\n        sample_uv += uv_delta;\n    }\n    fragColor.rgb = sum / filter_sum;\n\n\n/////////////////// FILM_GRAIN\n    intensity = FILM_GRAIN_INTENSITY * base_animation;\n    \n    float luma = dot(fragColor.rgb, LUMA_COEF);\n    // https://en.wikipedia.org/wiki/Luma_(video)\n\n    // alters how much film grain at different lumas\n    float luma_factor =  max(intensity * (luma - luma * luma), 0.0);\n\n    // pseudo-gaussian blue noise looks nice\n    float blue_noise = pseudo_gaussian_blue_noise(fragCoord);\n    \n    // add noise to luma\n    float new_luma = luma + luma_factor * blue_noise;\n\n    fragColor = vec4(fragColor.rgb * new_luma / luma, 1.0);\n    \n/////////////////// VIGNETTE\n    intensity = VIGNETTE_INTENSITY * base_animation;\n\n    //vec2 uv = fragCoord / iResolution.xy;\n    \n\n    \n    float center_angle = atan(intensity * center_distance / max_diagonal);\n    float vignette = pow(cos(center_angle), 4.0);\n\n    fragColor.rgb -= (1.0 - vignette);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Started with this: https://www.shadertoy.com/view/XldXRN\n// Simplified it to be stationary dots\n#define CONTRAST 0.5\n#define BRIGHTNESS 1.0\n#define SIZE 1.0\n\nconst float BRIGHTNESS_INV = 1.0 - BRIGHTNESS;\nconst float CONTRAST_W = 0.5 * (1.0 - CONTRAST);\nconst float CONTRAST_B = (1.0 - CONTRAST_W);\nconst float squish = 0.866;\nconst float scale = 9.0;\nconst float feather = 0.004 * scale;\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragCoord -= iMouse.xy;\n    fragCoord.y -=  scale * 0.5 ;\n    fragCoord.x -= iResolution.x*0.5;\n\tfragCoord =  (fragCoord / iResolution.y) * scale;\n    fragCoord.y /= squish; \n    fragCoord.x += 0.5 * ceil(fragCoord.y);    \n    fragCoord = 2.0 * fract(fragCoord) - 1.0; \n    fragCoord.y *= squish; \n    \n//\tfragColor = vec4( smoothstep(feather,-feather, length(fragCoord) - SIZE * squish + feather));\n    fragColor.r = smoothstep(feather,-feather, length(fragCoord) - SIZE * squish + feather);\n\t//fragColor = vec4( step(0.0, length(fragCoord) - SIZE * squish + feather)); // aliased;\n\n    fragColor.r = CONTRAST_B * fragColor.r + CONTRAST_W * (1.0 - fragColor.r) - BRIGHTNESS_INV;\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define PI 3.14159265359\n\n#define hash21(p) fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453)","name":"Common","description":"","type":"common"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// store current mouse position and previous frame's mouse position. Used to calculate velocity.\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (iMouse.z > 0.0) fragColor = vec4(iMouse.xy/iResolution.xy, texelFetch(iChannel0, ivec2(fragCoord),0).rg);\n    else fragColor = iMouse.xyxy/iResolution.xyxy;\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"// MOTION BLUR\n\n#define SAMPLES 10.0\n#define BLUR_INTENSITY 1.0 // can be thought of as shutter angle, 1.0 fully opened\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n\n    float sum = 0.0;\n\n     vec4 mouse_pos = texture(iChannel1, uv);\n     vec2 velocity = mouse_pos.rg -  mouse_pos.ba;\n     vec2 prev_velocity =texture(iChannel2, uv).gb;\n    vec2 acceleration = velocity - prev_velocity;\n    velocity *= BLUR_INTENSITY;\n    float straight = dot(normalize(prev_velocity), acceleration);\n    float turning = length(acceleration) - dot(normalize(prev_velocity), acceleration);\n\n    velocity/=SAMPLES;\n    float white_noise = hash21(uv + iTime);\n\n    vec2 sample_uv = uv + velocity * white_noise;\n    for (float i=0.0; i<SAMPLES; i++)\n    {\n\n        sum += texture(iChannel0, sample_uv).r;\n        sample_uv+= velocity;\n\n    }\n    fragColor.r = sum / SAMPLES;\n    fragColor.gb = velocity;\n}","name":"Buffer C","description":"","type":"buffer"}]}