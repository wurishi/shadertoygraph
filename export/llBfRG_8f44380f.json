{"ver":"0.1","info":{"id":"llBfRG","date":"1516207921","viewed":242,"name":"Learning shaders - metaballs","username":"KebabuTurka","description":"My second one ;)\n\nNaive approach for metaballs.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["metaballs","learning"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 blobs[3];\nfloat thresh = 1.0;\n\nbool blobFunc(in vec2 point)\n{\n    float result = 0.0;\n \tfor(int i=0;i<blobs.length();i++)\n    {\n\t\tresult += pow(blobs[i].z,2.0) / (pow(point.x - blobs[i].x,2.0) + pow(point.y - blobs[i].y,2.0));;\n    }\n    \n    return result >= thresh;\n}\n\nfloat properSin(in float val)\n{\n    return (sin(val) + 1.0) / 2.0;\n}\n\nfloat properCos(in float val)\n{\n    return (cos(val) + 1.0) / 2.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    blobs[0] = vec3(properSin(iTime*1.5),0.5,0.1);\n    blobs[1] = vec3(0.5,properSin(iTime),0.1);\n    blobs[2] = vec3(properCos(iTime) * 0.6 + 0.2,properSin(iTime) * 0.6 + 0.2,0.05);\n    \n    fragColor = vec4(blobFunc(uv));\n}","name":"Image","description":"","type":"image"}]}