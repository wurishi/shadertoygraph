{"ver":"0.1","info":{"id":"ttsfzH","date":"1596413163","viewed":282,"name":"Warp Texture with Noise","username":"manu210404","description":"Perlin noise texture warped with Perlin noise","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["noise","warping","perlin","warp"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define INTENSITY 8.0\n#define WARP_DETAIL 4\n\n#define S(a) smoothstep(0.0, 1.0, a)\n#define SQRT2 1.41421356237309504\n\nvec2 transform() {\n    // return (-iMouse.xy) / iResolution.xy; // follow mouse cursor\n    return vec2(-iTime * 0.19, iTime * 0.19);\n}\n\nfloat noise(vec2 co) {\n  return fract(sin(dot(co.xy ,vec2(1.0,73))) * 43758.5453);\n}\n\nfloat perlin(vec2 pos) {\n    float p00 = noise(vec2(floor(pos.x), floor(pos.y)));\n    float p01 = noise(vec2(floor(pos.x), floor(pos.y) + 1.0));\n    float p10 = noise(vec2(floor(pos.x) + 1.0, floor(pos.y)));\n    float p11 = noise(vec2(floor(pos.x) + 1.0, floor(pos.y) + 1.0));\n\t\n    float offY = S(fract(pos.y));\n    float offX = S(fract(pos.x));\n\n    \n    return mix(mix(p00, p01, offY), mix(p10, p11, offY), offX);\n    \n}\n\nfloat fractalNoise(vec2 co, int iter) {\n    float r = 0.0;\n    float factor = 1.0;\n    for (int n; n < iter; n++) {\n        r += (perlin(co * factor) - 0.5)/factor;\n        factor *= 2.0;\n    }\n    return (r + 1.0) * 0.5;\n}\n\nvec2 warp(vec2 co, float intensity, int detail) {\n    // this is a bit botched, idealy you should use a 2d to 2d perlin noise istead of a 2d to 1d perlin noise\n    return co + vec2((fractalNoise(co + transform(), detail) - .5) * intensity, (fractalNoise(co + transform() + vec2(12342.145, -2340.769), detail) - .5) * intensity);\n}\n\nfloat checkerboard(vec2 co, float scale) {\n    return float(floor(mod(co.x * scale, 2.0)) == floor(mod(co.y * scale, 2.0)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.y;\n    vec2 nuv = (fragCoord/iResolution.xy - 0.5) * 2.0;// normalized uv coordinates\n\n    float intensity = pow(clamp(1.0 - (pow(abs(nuv.x), 3.) + pow(abs(nuv.y), 3.)), 0.0, 1.0), 2.0)*INTENSITY; // makes it so, that the edges and corners are fixed and the rest isn't\n    \n    float val = pow(fractalNoise(warp(uv, intensity, WARP_DETAIL) + 20.0, 5), 2.2);\n    \n    \n    \n   \t//nuv.y = 0.0;\n    //val = clamp(1.0 - (pow(abs(nuv.x), 3.) + pow(abs(nuv.y), 3.)), 0.0, 1.0); // the intensity function\n    //val = smoothstep(val, val - 0.000001, uv.y);\n    \n    vec3 col = vec3(val);\n    \n    fragColor = vec4(col,1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}