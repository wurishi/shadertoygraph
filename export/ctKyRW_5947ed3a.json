{"ver":"0.1","info":{"id":"ctKyRW","date":"1700799945","viewed":124,"name":"Snake Galaxy","username":"martymarty","description":"Creates many random snakes and animates them rotating around a circle. Neat when the number of snakes gets pushed into the 1000s. Lots of parameters in common to create different styles. ","likes":3,"published":3,"flags":32,"usePreview":0,"tags":["2d","random","animated"],"hasliked":0,"parentid":"DtdyD7","parentname":"Snake Nebula"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//The buffers didn't work on the iPad mini I have.\n//This sets the use of the buffers.\n//The buffer really improves performance though.\n//Comment out for iOS use.\n#define BUFFER\n\nvec3 drawGalaxy(vec2 uv){\n\n    vec2 ar = vec2(iResolution.x/iResolution.y,1.0);\n    vec2 tile = floor(uv*GRID);\n    bool needPalette = true;\n    float size, totalsnakes, area, offset, bright, glow, top, start, dir, ringamt;\n    float rndstart, rndnext, tribright, speed, snakelength, snake, relTime, bgtime;\n    totalsnakes = 1.0;\n    tribright = 1.0;\n    vec2 pt, pttop, randpt, relTile, bgRelTile, refpt, current;\n    vec3 pal, col, glowcol;\n    vec4 ptSizeRnd;\n    \n    current = vec2(0.1*(ELLIPSESPEED)+0.025,0.125);\n   \n    top = floor(iTime*SQUARESPEED)+NUMSQUARES;\n\n    start = top < NUMSQUARES ? 0.0 : top-NUMSQUARES;\n    \n    current *= (iTime*ROTATESPEED+0.5*ROTATEPULSE*sin(iTime*ROTATESPEED*PI/8.0));\n    \n    for(float i = top-1.0; i >= start ;i--){\n        \n        ptSizeRnd = squareGenerator(i);\n        rndnext = ptSizeRnd.z;\n        pt = ptSizeRnd.xy;\n      \n        pt = RING*pt+RADIUS*vec2(cos(rndnext*TAU*30.75-current.x),sin(rndnext*TAU*30.75-current.y));\n        rndnext = inSquareRandom(rndnext);\n\n        pt += vec2(0.5)*ar;\n\n\n        size = floor(ptSizeRnd.w);\n        \n        pt = floor(pt*GRID);\n        pt -= 0.5*size;\n        \n        pttop += size;\n        relTile = floor(tile-pt);\n      \n        needPalette = true;\n        if(all(greaterThanEqual(relTile, vec2(0.0))) && all(lessThanEqual(relTile,vec2(size)))){ \n            pal = palette(rndnext*COLORVARIETY+iTime*COLORSPEED, pala,palb,palc,pald); \n            rndnext = inSquareRandom(rndnext);\n            tribright = triangle((i-start)/NUMSQUARES);\n            needPalette = false;\n            dir = sign(rndnext*RNDDIR-0.5); rndnext = inSquareRandom(rndnext);\n            speed = mix(SNAKESLOWSPEED,SNAKEFASTSPEED,rndnext)*GRID+0.0;rndnext = inSquareRandom(rndnext);\n            area = size*size-1.0;\n\n            offset = floor(rndnext*area)*OFFSET;rndnext = inSquareRandom(rndnext);\n            snakelength = floor(mix(SNAKEMIN,SNAKEMAX,rndnext)); rndnext = inSquareRandom(rndnext);\n            snake = superLogicSnake(relTile,size);\n            snake = mod(snake*MULTISNAKE,area+1.0);\n            relTime = mod(iTime*speed*dir+offset, area);\n\n            bright = smoothstep(snake-snakelength*MULTISNAKE,snake, relTime)-step(snake,relTime);\n\n            if(bright > TAIL){\n                totalsnakes++;\n                col = OPAQUE ? bright*pal*tribright : col+bright*pal*tribright;\n            }\n\n        }\n        if(all(greaterThanEqual(relTile,-BGSIZE*vec2(size))) && all(lessThanEqual(relTile, (1.0+BGSIZE)*vec2(size)))){\n            if(needPalette){\n                pal = palette(rndnext*COLORVARIETY+iTime*COLORSPEED, pala,palb,palc,pald);\n                rndnext = inSquareRandom(rndnext);\n                tribright = triangle((i-start)/NUMSQUARES);\n            }\n\n            bgRelTile = floor(tile-(pt-BGSIZE*size));\n            size = floor((1.0+2.0*BGSIZE)*size);\n            ringamt = superLogicSnake(bgRelTile,size)/(size*size+1.0);\n            glow = ringamt*tribright*GRID/sqrt(NUMSQUARES);\n            glowcol += glow*pal;\n        }\n    }\n\n    bgtime = (triangle(iTime*BGCYCLESPEED))*BGCYCLE+1.0;\n    col /= OPAQUE ? 1.0 : totalsnakes;\n    glowcol = -glowcol*bgtime;\n    col = mix(col,1.0-exp2(glowcol)*(1.01+1.0*BGSIZE),BGAMT);\n    //col = texelFetch(iChannel0,ivec2(mod(i,GRID),mod(floor(i/GRID),GRID)),0).z;\n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = fragCoord/iResolution.y;\n    vec2 ar = vec2(iResolution.x/iResolution.y,1.0);\n\n    vec3 col = vec3(0.0);\n    #ifdef BUFFER\n    col = texelFetch(iChannel0,ivec2(uv*GRID),0).rgb;\n    #else\n    col = drawGalaxy(uv);\n    #endif\n    col *= BRIGHTSCALE;\n    fragColor = vec4(col,1.0);\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//Buffer used to improve performance.\n//Renders the image with exact number of pixels for the grid.\n//The main image then expands this..\n//On the M1 MacBook Air, without the buffer I could only get 400 to 500 squares 60fps.\n//With the buffers, and small grid sizes around ~100 to 200, I easily get that up to 1000s.\n//The MULTISNAKE value is also there to improve perfomance. \n//It divides the spiral do get more than 1 snake per square.\n\n\nvec3 drawGalaxy(vec2 uv){\n\n    vec2 ar = vec2(iResolution.x/iResolution.y,1.0);\n    vec2 tile = floor(uv*GRID);\n    bool needPalette = true;\n    float size, totalsnakes, area, offset, bright, glow, top, start, dir, ringamt;\n    float rndstart, rndnext, tribright, speed, snakelength, snake, relTime, bgtime;\n    totalsnakes = 1.0;\n    tribright = 1.0;\n    vec2 pt, pttop, randpt, relTile, bgRelTile, refpt, current;\n    vec3 pal, col, glowcol;\n    vec4 ptSizeRnd;\n    \n    current = vec2(0.1*(ELLIPSESPEED)+0.025,0.125);\n   \n    top = floor(iTime*SQUARESPEED)+NUMSQUARES;\n\n    start = top < NUMSQUARES ? 0.0 : top-NUMSQUARES;\n    \n    current *= (iTime*ROTATESPEED+0.5*ROTATEPULSE*sin(iTime*ROTATESPEED*PI/8.0));\n    \n    for(float i = top-1.0; i >= start ;i--){\n        //ptSizeRnd = squareGenerator(i);\n\n        ptSizeRnd = texelFetch(iChannel0,ivec2(mod(i,GRID),mod(floor(i/GRID),GRID)),0);\n        rndnext = ptSizeRnd.z;\n        pt = ptSizeRnd.xy;\n      \n        pt = RING*pt+RADIUS*vec2(cos(rndnext*TAU*30.75-current.x),sin(rndnext*TAU*30.75-current.y));\n        rndnext = inSquareRandom(rndnext);\n\n        pt += vec2(0.5)*ar;\n\n\n        size = floor(ptSizeRnd.w);\n        \n        pt = floor(pt*GRID);\n        pt -= 0.5*size;\n        \n        pttop += size;\n        relTile = floor(tile-pt);\n      \n        needPalette = true;\n        if(all(greaterThanEqual(relTile, vec2(0.0))) && all(lessThanEqual(relTile,vec2(size)))){ \n            pal = palette(rndnext*COLORVARIETY+iTime*COLORSPEED, pala,palb,palc,pald); \n            rndnext = inSquareRandom(rndnext);\n            tribright = triangle((i-start)/NUMSQUARES);\n            needPalette = false;\n            dir = sign(rndnext*RNDDIR-0.5); rndnext = inSquareRandom(rndnext);\n            speed = mix(SNAKESLOWSPEED,SNAKEFASTSPEED,rndnext)*GRID+0.0;rndnext = inSquareRandom(rndnext);\n            area = size*size-1.0;\n\n            offset = floor(rndnext*area)*OFFSET;rndnext = inSquareRandom(rndnext);\n            snakelength = floor(mix(SNAKEMIN,SNAKEMAX,rndnext)); rndnext = inSquareRandom(rndnext);\n            snake = superLogicSnake(relTile,size);\n            snake = mod(snake*MULTISNAKE,area+1.0);\n            relTime = mod(iTime*speed*dir+offset, area);\n\n            bright = smoothstep(snake-snakelength*MULTISNAKE,snake, relTime)-step(snake,relTime);\n\n            if(bright > TAIL){\n                totalsnakes++;\n                col = OPAQUE ? bright*pal*tribright : col+bright*pal*tribright;\n            }\n\n        }\n        if(all(greaterThanEqual(relTile,-BGSIZE*vec2(size))) && all(lessThanEqual(relTile, (1.0+BGSIZE)*vec2(size)))){\n            if(needPalette){\n                pal = palette(rndnext*COLORVARIETY+iTime*COLORSPEED, pala,palb,palc,pald);\n                rndnext = inSquareRandom(rndnext);\n                tribright = triangle((i-start)/NUMSQUARES);\n            }\n\n            bgRelTile = floor(tile-(pt-BGSIZE*size));\n            size = floor((1.0+2.0*BGSIZE)*size);\n            ringamt = superLogicSnake(bgRelTile,size)/(size*size+1.0);\n            ringamt *= 0.003;\n            glow = ringamt*tribright*GRID/sqrt(NUMSQUARES);\n            glowcol += glow*pal;\n        }\n    }\n\n    bgtime = (triangle(iTime*BGCYCLESPEED))*BGCYCLE+1.0;\n    col /= OPAQUE ? 1.0 : totalsnakes;\n    glowcol = -glowcol*bgtime;\n    col = mix(col,1.0-exp2(glowcol)*(1.01+1.0*BGSIZE),BGAMT);\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = vec3(0.0);\n    vec2 ar = vec2(iResolution.x/iResolution.y,1.0);\n   \n    if(all(lessThan(fragCoord, vec2(GRID)*ar))){\n        col = drawGalaxy(floor(fragCoord)/(GRID));\n    }\n\n    fragColor = vec4(col,1.0);\n    \n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"//CONSTANTS\n#define PI 3.141592653589793\n#define TAU 6.28318530718\n\n//GENERAL\n#define GRID 250.0  \n#define NUMSQUARES 1250.0\n#define MULTISNAKE 2.0\n#define BRIGHT 1.25 //Extra multiplier at the end. Some setups can be a bit dark.\n\n//RING\n#define RINGPCT 0.3    // 0.0 to 0.5\n#define RADIUSPCT  1.0 // 0.0 to 1.0\n\n//ROTATION\n#define ELLIPSESPEED 1.7 // 1.0 circle \n#define ROTATESPEED 1.0  // 0.0 to 10.0\n#define ROTATEPULSE 0.0  // 0.0 to 1.0\n\n//SQUARE \n#define SQUARESPEED 200.00 // 10 to 400.0\n#define SQUAREMINPCT 0.11  // 0.0 to 1.0\n#define SQUAREMAXPCT 0.15  // 0.0 to 1.0\n\n//SNAKE\n#define SNAKEMINPCT 0.05     // 0.05 to 0.5 \n#define SNAKEMAXPCT 0.35     // 0.05 to 0.5\n#define TAIL  0.95           // 0.9 to 0.99\n#define SNAKESLOWSPEED 0.1   // 0.01 to 0.3\n#define SNAKEFASTSPEED 0.25  // 0.01 to 0.3\n\n//FLAGS\n#define OFFSET 1.0  // Flag for random snake starting positions\n#define RNDDIR 0.0  // Flag for random directions, 0.0 clockwise 1.0 random 2.0 ccw\n#define OPAQUE true // Flag opaque snakes are much brighter. \n\n//COLOR\n#define COLORVARIETY 0.5 //0.3 is nice, 1.0 is full random\n#define COLORSPEED 0.05 // 0.01 to 0.3 \n\n//BACKGROUNG\n#define BGAMT 0.5        // 0.0 off 1.0 no snakes off improves performance\n#define BGSIZE 0.5        // 0.0 to 1.0\n#define BGCYCLESPEED 0.1  // 0.0 to 0.5  \n#define BGCYCLE 0.5      // 0.0 to 1.0\n\n\n//HELPERS\n#define RING 0.6*RINGPCT\n#define RADIUS 0.4*RADIUSPCT\n#define SNAKEMIN SNAKEMINPCT*GRID\n#define SNAKEMAX SNAKEMAXPCT*GRID\n#define SQUAREMIN SQUAREMINPCT*GRID\n#define SQUAREMAX SQUAREMAXPCT*GRID\n#define AVEAREA (2.0+BGSIZE)*(2.0+BGSIZE)*(SQUAREMIN*SQUAREMIN+SQUAREMAX*SQUAREMAX)\n#define GRIDSQR GRID*GRID\n#define BRIGHTSCALE BRIGHT*(1.0+0.5*BGAMT)*(1.0+0.5*BGAMT)\n\n//PALETTE\n#define pala vec3(0.5, 0.5, 0.5)\n#define palb vec3(0.5, 0.5, 0.5)\n#define palc vec3(1.0, 1.0, 1.0)\n#define pald vec3(0.00, 0.33, 0.67)\n\n/*\nAmeoba Colors\na = 0.518, 0.828, 0.868\nb = 0.078, 0.233, 0.151\nc = 2.329, -0.681, -0.388\nd = -1.935, -0.965, -1.055\n*/\n\n/*\nRainbow Colors\na = 0.5, 0.5, 0.5\t\nb = 0.5, 0.5, 0.5\t\nc = 1.0, 1.0, 1.0\t\nd = 0.00, 0.33, 0.67\n*/\n\n//Inigo Quilez's palette formula.\n//https://iquilezles.org/articles/palettes/\nvec3 palette( float t, vec3 a, vec3 b, vec3 c, vec3 d )\n{\n    return a + b*cos( TAU*(c*t+d) );\n}\n\n\nfloat superLogicSnake(vec2 p, float s){\n    float r = min(min(p.x,p.y),min(s-p.x-1.0,s-p.y-1.0));\n    float h = float(p.y>p.x);\n    float l = 4.0*(r+h)*(s-r-h);\n    l += sign(0.5-h)*(p.x+p.y-2.0*r);\n    return l;\n}\n\n\nfloat triangle(float x){\n    return abs(2.0*fract(x-0.5)-1.0);\n}\n\nfloat squareRandom(float x ){\n\n\n    for(float i = 0.0; i < 2.0; i++){\n        x = mod(x*76001.0+0.74411,1.00003);\n\n    }\n    return x;\n}\n\n\n\nfloat inSquareRandom(float x){\n    return mod(x*100057.0+0.64661,0.99991);\n}\n\nvec4 squareGenerator(float seed){\n    vec2 pt, randpt;\n    float rnd = squareRandom(seed);\n    float rndnext = inSquareRandom(rnd);\n    vec4 ptRndSize;\n    ptRndSize.z = rndnext;\n    randpt.x = rndnext; rndnext = inSquareRandom(rndnext);\n    randpt.y = rndnext; rndnext = inSquareRandom(rndnext);\n    pt = vec2(0.5)-randpt;\n    float size = rndnext*(SQUAREMAX-SQUAREMIN)+SQUAREMIN; rndnext = inSquareRandom(rndnext);\n        \n    ptRndSize.xy = pt;\n    ptRndSize.z = rndnext;\n    ptRndSize.w = size;\n    return ptRndSize;\n}\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"//Buffer to create data for the squares. \n//The squares random position relative to the circle is stored in x,y.\n//The initial seed random number is in z.\n//Add the squares size is in w.\n//Only the top square gets calculated. \n//This change got a few fps when there are lots of squares. \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n           \n    float num = floor(fragCoord.y*GRID+fragCoord.x);\n    float top = floor(iTime*SQUARESPEED)+NUMSQUARES;\n    \n    if( num - 3.0  == mod(top,3.0)  )\n        fragColor = squareGenerator(top);\n    \n    else\n        fragColor = texelFetch(iChannel0,ivec2(fragCoord),0);\n     \n    \n    if(iFrame == 0) \n        fragColor = squareGenerator(num);\n    \n    \n}\n\n","name":"Buffer B","description":"","type":"buffer"}]}