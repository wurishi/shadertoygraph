{"ver":"0.1","info":{"id":"4cycWR","date":"1731672178","viewed":37,"name":"ShaderAmp cloned:rainbowspectrum","username":"ArthurTent","description":"modified from https://www.shadertoy.com/view/ldf3W8\nExample on YT: https://www.youtube.com/watch?v=8FmvUGyTrwc\nShaderAmp version is currently available in 'dev/more-shaders' branch.\nhttps://github.com/ArthurTent/ShaderAmp/tree/dev/more-shaders/dist/shader","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["spectrum"],"hasliked":0,"parentid":"ldX3D8","parentname":"cloned: rainbow spectrum"},"renderpass":[{"inputs":[{"id":"XdfGzn","filepath":"/media/a/894a09f482fb9b2822c093630fc37f0ce6cfec02b652e4e341323e4b6e4a4543.mp3","previewfilepath":"/media/ap/894a09f482fb9b2822c093630fc37f0ce6cfec02b652e4e341323e4b6e4a4543.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"// https://www.shadertoy.com/view/ldX3D8\n// Modified by ArthurTent\n// Created by hornet\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// https://creativecommons.org/licenses/by-nc-sa/3.0/\n\n\n#define FFT(a) pow(texelFetch(iChannel0, ivec2(a, 0), 0).x, 5.)\nfloat snd = 0.;\nconst float PI = 3.1415926;\n\n// MIT Licensed hash From Dave_Hoskins (https://www.shadertoy.com/view/4djSRW)\nvec3 hash33(vec3 p)\n{\n    p = fract(p * vec3(443.8975,397.2973, 491.1871));\n    p += dot(p.zxy, p.yxz+19.27);\n    return fract(vec3(p.x * p.y, p.z*p.x, p.y*p.z));\n}\n\nvec3 stars(in vec3 p)\n{\n    vec3 c = vec3(0.);\n    float res = iResolution.x*0.8;\n    \n\tfor (float i=0.;i<4.;i++)\n    {\n        vec3 q = fract(p*(.15*res))-0.5;\n        //q*= snd/10.;\n        vec3 id = floor(p*(.15*res));\n        vec2 rn = hash33(id).xy;\n        float c2 = 1.-smoothstep(0.,.6,length(q));\n        c2 *= step(rn.x,.0005+i*i*0.001);\n        c += c2*(mix(vec3(1.0,0.49,0.1),vec3(0.75,0.9,1.),rn.y)*0.25+0.75);\n        p *= 1.4;\n    }\n    return c*c*.65;\n}\nvoid camera(vec2 fragCoord, out vec3 ro, out vec3 rd, out mat3 t)\n{\n    float a = 1.0/max(iResolution.x, iResolution.y);\n    //rd = normalize(vec3((fragCoord - iResolution.xy*0.5)*a, 0.5));\n    rd = normalize(vec3(fragCoord, 1.0));\n\n    ro = vec3(0.0, 0.0, -15.);\n\n    //float ff = min(1.0, step(0.001, iMouse.x) + step(0.001, iMouse.y));\n    float ff = min(1.0, step(0.001, iMouse.x) + step(0.001, iMouse.y))+sin(iTime/20.);\n    vec2 m = PI*ff + vec2(((iMouse.xy + 0.1) / iResolution.xy) * (PI*2.0));\n    //m.y = -m.y;\n    m.y = sin(m.y*0.5)*0.3 + 0.5;\n\n    //vec2 sm = sin(m)*sin(iTime), cm = cos(m)*(1.+sin(iTime));\n    vec2 sm = sin(m)*(1.+sin(iTime/10.)/2.), cm = cos(m);\n    mat3 rotX = mat3(1.0, 0.0, 0.0, 0.0, cm.y, sm.y, 0.0, -sm.y, cm.y);\n    mat3 rotY = mat3(cm.x, 0.0, -sm.x, 0.0, 1.0, 0.0, sm.x, 0.0, cm.x);\n\n    t = rotY * rotX;\n\n    ro = t * ro;\n    rd = t * rd;\n\n    rd = normalize(rd);\n}\nfloat bump(float x) {\n\treturn abs(x) > 1.0 ? 0.0 : 1.0 - x * x;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int max_freq = 100;\n    for(int i=1; i < max_freq; i++){\n        snd +=FFT(i)*float(i);\n    }\n    snd /=float(max_freq*20);\n    vec2 cam_uv = (fragCoord.xy / iResolution.xy);\n\n    \n\t//camera + rd for stars\n    vec3 ro = vec3(0.0);//rd = vec3( 0.0 );\n\tvec3 rd = normalize(vec3(cam_uv,-1.5));\n    mat3 t = mat3(1.0);\n\tcamera(cam_uv, ro, rd, t);\n\n    vec2 uv = (fragCoord.xy / iResolution.xy);\n    vec4 soundWave =  texture( iChannel0, vec2(abs(0.5-uv.x)+0.005, uv.y) ).rrrr;\n\n\tfloat c = 3.0;\n\tvec3 color = vec3(1.0);\n\tcolor.x = bump(c * (uv.x - 0.75));\n\tcolor.y = bump(c * (uv.x - 0.5));\n\tcolor.z = bump(c * (uv.x - 0.25));\n\n\tfloat line = abs(0.01 / abs(0.5-uv.y) );\n\tuv.y = abs( uv.y - 0.5 );\n\n\tcolor *= line * (1.0 - 2.0 * abs( 0.5 - uv.xxx ) + pow( soundWave.y, 10.0 ) * 30.0 );\n\n\tfragColor = vec4(color, 0.0);\n    rd.x+=sin(iTime/1000.)*2.;\n\tvec3 bg = stars(rd)*(1.+30.*snd);\n\tfragColor+=vec4(bg, 1.);\n}","name":"Image","description":"","type":"image"}]}