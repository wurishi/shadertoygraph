{"ver":"0.1","info":{"id":"7dXSW4","date":"1618689145","viewed":37,"name":"317_Sumina_v0v2","username":"evgenia_koshechka","description":"Shader from a stream: https://youtu.be/idoj8QmFH_0","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["raytracing"],"hasliked":0,"parentid":"7dS3Wh","parentname":"Magic ball 2"},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv) / float(iFrame + 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3Rr","filepath":"/media/a/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin","previewfilepath":"/media/ap/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin","type":"volume","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float INF = 1e10;\nconst vec3 CAMERA_POS = vec3(5, 2, -6);\nconst vec3 LIGHT1_POS = vec3(-3, 1.5, 5);\nconst float LIGHT1_RADIUS = 0.5;\nconst vec3 LIGHT1_COLOR = vec3(1, 1, 1);\n\nconst vec3 LIGHT2_POS = vec3(1, 0.5, 2);\nconst float LIGHT2_RADIUS = 0.25;\nconst vec3 LIGHT2_COLOR = vec3(0, 1, 1);\nvec3 randDir;\n\n\n// (CAMERA_POS + t * viewVec).y == -1\n// t = (-1 - CAMERA_POS.y) / viewVec.y;\nfloat tracePlane(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.2 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    \n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) >= 100.0) {\n        return INF;\n    }\n    normal = vec3(0, 1, 0);\n    return t;\n}\n\nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal) {\n    // dot(pos + t * dir, pos + t * dir) == r * r;\n    // dot(pos, pos) + 2 * t * dot(pos, dir) + t * t * dot(dir, dir) == r * r\n    // t * t + 2.0 * t * dot(pos, dir) + dot(pos, pos) - r * r == 0\n    float a = dot(dir, dir);\n    float b = dot(pos, dir);\n    float c = dot(pos, pos) - r * r;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    float t = -b - sqrt(D);\n    if (t > 0.0) {\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    t = -b + sqrt(D);\n    if (t < 0.0) {\n        return INF;\n    }\n    normal = normalize(pos + t * dir);\n    return t;\n}\n\nfloat traceCylinder(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.0 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) < 0.5) {\n        normal = vec3(0, 1, 0);\n        return t;\n    }\n    \n    // dot(pos + t * dir, pos + t * dir) == r * r;\n    // dot(pos, pos) + 2 * t * dot(pos, dir) + t * t * dot(dir, dir) == r * r\n    // t * t + 2.0 * t * dot(pos, dir) + dot(pos, pos) - r * r == 0\n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - 0.5;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    t = (-b - sqrt(D)) / a;\n    if (t > 0.0) {\n        worldPos = t * dir + pos;\n        if (worldPos.y <= -1.0) {\n            normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n            return t;\n        }\n    }\n    t = (-b + sqrt(D)) / a;\n    if (t < 0.0) {\n        return INF;\n    }\n    worldPos = t * dir + pos;\n    if (worldPos.y <= -1.0) {\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    }\n    return INF;\n}\n\nbool isOccluded(vec3 pos, vec3 target) {\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n    \n    vec3 sphNorm;\n    float sphT = traceSphere(pos, dir, 1.0, sphNorm);\n    if (sphT < dist)\n        return true;\n    vec3 cylNorm;\n    float cylT = traceCylinder(pos, dir, cylNorm);\n    return (cylT < dist);\n}\n\nvec3 computeLight(vec3 pos, vec3 color, vec3 normal) {\n    vec3 toLight1 = LIGHT1_POS - pos;\n    float distSq1 = dot(toLight1, toLight1);\n    float att1 = isOccluded(pos, LIGHT1_POS + randDir * LIGHT1_RADIUS) ? 0.0 : 20.0f / distSq1;\n    vec3 toLight2 = LIGHT2_POS - pos;\n    float distSq2 = dot(toLight2, toLight2);\n    float att2 = isOccluded(pos, LIGHT2_POS + randDir * LIGHT2_RADIUS) ? 0.0 : 10.0f / distSq2;\n    return color * (\n        max(0.0, dot(normal, normalize(toLight1))) * att1 * LIGHT1_COLOR\n        + max(0.0, dot(normal, normalize(toLight2))) * att2 * LIGHT2_COLOR\n        + texture(iChannel1, normal).rgb * 0.1\n    );\n}\n\nvec3 refraction(vec3 v, vec3 normal, float n1, float n2) {\n    if (dot(v, normal) < 0.0) {\n        normal = -normal;\n    }\n    float cosA = dot(v, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3 tang = normalize(v - cosA * normal);\n    float sinB = sinA / n2 * n1;\n    float cosB = sqrt(1.0 - sinB * sinB);\n    return sinB * tang + cosB * normal;\n}\n\nfloat pow2(float x) {\n    return x * x;\n}\n\nfloat rand(float frame)\n{\n    return fract(sin( dot(vec3(frame), vec3(12.9898,78.233,45.5432) )) * 43758.5453);\n}\n\nfloat rand(vec2 n) \n{ \n    return fract(sin(dot(n, vec2(12.9898, 0.233))) * 43758.5453);\n}\n\nfloat red(float x)\n{\n    if (x < 0.0) {\n        return 54.0 / 255.0;\n    } else if (x < 2005.0 / 8298.0) {\n        return (83.8 * x + 54.5) / 255.0;\n    } else {\n        return 1.0;\n    }\n}\n\nfloat green(float x) \n{\n    if (x < 0.24) {\n        return 0.0;\n    } else if (x < 0.4) {\n        return (5.0 * x - 190.0) / 255.0;\n    } else if (x <= 1.0) {\n        return (214.48 * x + 40.5) / 255.0;\n    } else {\n        return 1.0;\n    }\n}\n\nfloat blue(float x) \n{\n    if (x < 0.0) {\n        return 54.0 / 255.0;\n    } else if (x < 0.087) {\n        return (830.0 * x + 55.0) / 255.0;\n    } else if (x < 0.24) {\n        return 127.0 / 255.0;\n    } else if (x < 4.0) {\n        return (792.0 * x - 64.0) / 255.0;\n    } else {\n        return 1.0;\n    }\n}\n\nvec4 colormap(float x) \n{\n    return vec4(red(x), green(x), blue(x), 1.0);\n}\n\n\nfloat noise(vec2 p)\n{\n    vec2 ip = floor(p);\n    vec2 u = fract(p);\n    u = u * (2.5 - 1.0 * u);\n\n    float res = mix(\n        mix(rand(ip), rand(ip + vec2(1.0, 0.0)), u.x),\n        mix(rand(ip + vec2(0.0, 1.0)), rand(ip + vec2(1.0, 1.0)), u.x), u.y);\n    return res * res;\n}\n\nconst mat2 m = mat2( 0.70,  0.50, -0.70,  0.50 );\n\nfloat fbm( vec2 p )\n{\n    float f = 0.0;\n\n    f += 0.031 * noise(p); p *= m * 2.01;\n    f += 0.125 * noise(p); p *= m * 2.01;\n    f += 0.500 * noise(p); p *= m * 2.02;\n    f += 0.250 * noise(p); p *= m * 2.03;\n    f += 0.062 * noise(p); p *= m * 2.04;\n\n    return f / 0.97;\n}\n\nfloat pattern( in vec2 p )\n{\n\treturn fbm( p + fbm( p + fbm( p ) ) );\n}\n\nvec3 tracePlane(vec3 p1, vec3 p2, vec3 p3, out float move) {\n    vec3 p1_2 = p1 - p2;\n    vec3 p1_3 = p1 - p3;\n\n    vec3 norm = cross(p1_2, p1_3);\n    move = dot(norm, p1);\n    return norm;\n}\n\nfloat traceTriangle(vec3 pos, vec3 dir, vec3 dot1, vec3 dot2, vec3 dot3, out vec3 normal) {\n    \n    float move;\n    \n    vec3 norm = tracePlane(dot1, dot2, dot3, move);\n    \n    float denom = dot(dir, norm);\n    float nom = move - dot(pos, norm);\n\n    float t = nom / denom;\n    if (t <= 0.0) {\n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n   \n    vec3 v1 = normalize(dot1 - worldPos);\n    vec3 v2 = normalize(dot2 - worldPos);\n    vec3 v3 = normalize(dot3 - worldPos);\n\n    float angle1_2 = acos(dot(v1, v2));\n    float angle1_3 = acos(dot(v1, v3));\n    float angle2_3 = acos(dot(v2, v3));\n\n    if (abs(angle1_2 + angle1_3 + angle2_3 - radians(360.0)) < 1e-3) {\n        normal = normalize(norm);\n        float angle = acos(dot(normalize(dir), normal));\n        if (angle < radians(90.0)) {\n            normal = -normalize(norm);\n        }\n        return t;\n    } else {\n        return INF;\n    }\n    \n}\n\nfloat tracePyramid(vec3 pos, vec3 dir, out vec3 normal) {\n\n    vec3 dot1 = vec3(0.0, -0.99, 1.0);\n    vec3 dot2 = vec3(-sqrt(3.0) / 2.0, -0.99, -1.0/2.0);\n    vec3 dot3 = vec3(sqrt(3.0) / 2.0, -0.99, -1.0/2.0);\n    vec3 dot4 = vec3(0.0, sqrt(2.0) - 0.99, 0.0);\n    \n    float t = INF;\n    \n    vec3 norm = vec3(0.0, 1.0, 0.0);\n    \n    vec3 t1norm = norm;\n    float t1 = traceTriangle(pos, dir, dot2, dot1, dot4, t1norm);\n    if (t1 < t) {\n        t = t1;\n        norm = t1norm;\n    }\n    \n    vec3 t2norm = norm;\n    float t2 = traceTriangle(pos, dir, dot1, dot3, dot4, t2norm);\n    if (t2 < t) {\n        t = t2;\n        norm = t2norm;\n    }\n    \n    vec3 t3norm = norm;\n    float t3 = traceTriangle(pos, dir, dot3, dot4, dot2, t3norm);\n    if (t3 < t) {\n        t = t3;\n        norm = t3norm;\n    }\n    if (t < INF) {\n        normal = normalize(norm);\n    }\n    return t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    randDir = normalize(randVals - 0.5);\n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (randVals.xy - 0.5)) / iResolution.x;\n    vec3 front = normalize(-CAMERA_POS);\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = normalize(cross(front, up));\n    up = normalize(cross(right, front));\n    vec3 viewVec = normalize(front + right * uv.x + up * uv.y);\n    \n    const int EMISSION = 0;\n    const int DIFFUSE = 1;\n    const int REFLECTION = 2;\n    const int REFRACTION = 3;\n    \n    vec3 curPos = CAMERA_POS;\n    vec3 curDir = viewVec;\n    const float GLASS_N = 1.5;\n    const float AIR_N = 1.0;\n    float n1 = AIR_N;\n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N + GLASS_N);\n    const float DIAMOND_N = 2.5;\n    float DIAMOND_R = pow2(DIAMOND_N - GLASS_N) / pow2(DIAMOND_N + GLASS_N);\n    \n    vec3 colorMult = vec3(1, 1, 1);\n    \n    for (int i = 0; i < 10; ++i) {\n        float t = INF;\n        int materialType;\n        vec3 color;\n        vec3 normal;\n        float nEnter = AIR_N;\n        \n        vec3 planeNorm;\n        float planeT = tracePlane(curPos, curDir, planeNorm);\n        if (planeT < t) {\n            t = planeT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel0, worldPos.xz * 0.1).rgb + vec3(0.6, 0.6, 0.6);\n            normal = planeNorm;\n        }\n        vec3 l1Norm;\n        float light1T = traceSphere(curPos - LIGHT1_POS, curDir, LIGHT1_RADIUS, l1Norm);\n        if (light1T < t) {\n            t = light1T;\n            materialType = EMISSION;\n            color = LIGHT1_COLOR;\n            normal = l1Norm;\n        }\n        vec3 l2Norm;\n        float light2T = traceSphere(curPos - LIGHT2_POS, curDir, LIGHT2_RADIUS, l2Norm);\n        if (light2T < t) {\n            t = light2T;\n            materialType = EMISSION;\n            color = LIGHT2_COLOR;\n            normal = l2Norm;\n        }\n        \n        vec3 pyrNormal = normal;\n        float pyramid_t = tracePyramid(curPos + vec3(3.0, 0.30, 0.2), curDir, pyrNormal);\n        if (pyramid_t < t) {\n            t = pyramid_t;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = colormap(pattern(worldPos.xy)).rgb*50.0;\n            normal = pyrNormal;\n        }\n        \n        vec3 sphNorm;\n        float sphT = traceSphere(curPos, curDir, 1.0, sphNorm);\n        if (sphT < t) {\n            t = sphT;\n            normal = sphNorm;\n            if (randVals.x < GLASS_R) {\n                materialType = REFLECTION;\n            } else {\n                colorMult *= vec3(1.0, 1.0, 1.0);\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = AIR_N;\n                } else {\n                    nEnter = GLASS_N;\n                }\n            }\n        }\n        \n        float fog_sphT = traceSphere(curPos, curDir, 0.98, sphNorm);\n        if (fog_sphT < t) {\n            t = fog_sphT;\n            normal = sphNorm;\n            if (randVals.x < GLASS_R+0.15) {\n                materialType = REFLECTION;\n            } else {\n                colorMult *= vec3(0.36, 0.36, 0.36);\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = AIR_N;\n                } else {\n                    nEnter = GLASS_N;\n                }\n            }\n        }\n        \n        float sph1T = traceSphere(curPos + vec3(0.4, 0.4, -0.35), curDir, 0.05, sphNorm);\n        if (sph1T < t) {\n            t = sph1T;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = colormap(pattern(worldPos.xy)).rgb*50.0;\n            normal = sphNorm;\n        }\n        \n        float sph2T = traceSphere(curPos+vec3(0.12,-0.45, 0.53), curDir, 0.1, sphNorm);\n        if (sph2T < t) {\n            t = sph2T;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = colormap(pattern(worldPos.xy)).rgb*50.0;\n            normal = sphNorm;\n        }\n        \n        float sph3T = traceSphere(curPos+vec3(0.15,-0.6, 0.5), curDir, 0.15, sphNorm);\n        if (sph3T < t) {\n            t = sph3T;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = colormap(pattern(worldPos.xy)).rgb*50.0;\n            normal = sphNorm;\n        }\n        \n        float sph4T = traceSphere(curPos+vec3(-0.2,-0.55, 0.7), curDir, 0.12, sphNorm);\n        if (sph4T < t) {\n            t = sph4T;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = colormap(pattern(worldPos.xy)).rgb*50.0;\n            normal = sphNorm;\n        }\n        \n        float sph5T = traceSphere(curPos+vec3(-0.05,0.35, 0.0), curDir, 0.12, sphNorm);\n        if (sph5T < t) {\n            t = sph5T;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = colormap(pattern(worldPos.xy)).rgb*50.0;\n            normal = sphNorm;\n        }\n        \n        float sph6T = traceSphere(curPos+vec3(-0.2,-0.3,-0.3), curDir, 0.1, sphNorm);\n        if (sph6T < t) {\n            t = sph6T;\n            normal = sphNorm;\n            if (randVals.x < DIAMOND_R*10.0) {\n                materialType = REFLECTION;\n            } else {\n                colorMult *= vec3(1, 0.5, 0.1);\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = GLASS_N;\n                } else {\n                    nEnter = DIAMOND_N;\n                }\n            }\n        }\n        \n        float sph7T = traceSphere(curPos+vec3(-0.15,-0.25, -0.1), curDir, 0.12, sphNorm);\n        if (sph7T < t) {\n            t = sph7T;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = colormap(pattern(worldPos.xy)).rgb*50.0;\n            normal = sphNorm;\n        }\n\n        vec3 cylNorm;\n        float cylT = traceCylinder(curPos, curDir, cylNorm);\n        if (cylT < t) {\n            t = cylT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel2, worldPos.xz * worldPos.y).rgb + vec3(0.6, 0.6, 0.6);\n            normal = cylNorm;\n        }\n        if (t != INF) {\n            vec3 worldPos = t * curDir + curPos;\n            fragColor = texture(iChannel0, worldPos.xz);\n            if (materialType == EMISSION) {\n                fragColor.rgb = color * colorMult;\n                break;\n            } else if (materialType == DIFFUSE) {\n                fragColor.rgb = computeLight(worldPos, color, normal) * colorMult;\n                break;\n            } else if (materialType == REFLECTION) {\n                fragColor.rgb = computeLight(curPos + t * curDir, color, normal);\n                curDir = reflect(curDir, normal);\n                curPos = worldPos + curDir * 1e-5;\n            } else if (materialType == REFRACTION) {\n                curDir = refraction(curDir, normal, n1, nEnter);\n                curPos = worldPos + curDir * 1e-5;\n                n1 = nEnter;\n            }\n        } else {\n            fragColor.rgb = texture(iChannel1, curDir).rgb * colorMult + vec3(0.2, 0.2, 0.2);\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv) + texture(iChannel1, uv);\n}","name":"Buffer B","description":"","type":"buffer"}]}