{"ver":"0.1","info":{"id":"tsl3Ws","date":"1547854150","viewed":105,"name":"Modulo-Cells Visualization","username":"AustinSpafford","description":"Illustrating how a modulo-based SDF can be either discontinuous (left) or continuous (right). Not particularly interesting on its own, but used in a discussion elsewhere.\n\nControls: Click+Drag allows the cell centers on the left side to be repositioned.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float k_tau = 6.283185;\n\nfloat GetDist(\n    vec2 testPoint,\n    vec2 cellCenterFraction)\n{\n    vec2 cellSize = vec2(6.0);\n    vec2 cellCenter = (cellCenterFraction * cellSize);\n    float surfaceRadius = 1.2;\n    \n    return (length(mod(testPoint, cellSize) - cellCenter) - surfaceRadius);\n}\n\nvoid mainImage(\n    out vec4 fragColor, \n    vec2 fragCoord)\n{    \n\tvec2 testPoint = (fragCoord.xy / iResolution.xy);\n    \n    // Center and zoom out.\n    testPoint -= 0.5;\n    testPoint *= 15.0;\n    \n    // Aspect-ratio correction.\n    testPoint.x *= (iResolution.x / iResolution.y);       \n    \n    vec2 cellCenterFraction = \n        (testPoint.x > 0.0) ?\n\t\t\tvec2(0.5) :    \t\t\n        \t((iMouse.xy == vec2(0.0)) ? vec2(0.2, 0.0) : (iMouse.xy / iResolution.xy));\n    \n    float rawDist = GetDist(testPoint, cellCenterFraction);\n        \n    //vec3 color = vec3(smoothstep(-1.0, 1.0, cos(k_tau * rawDist)));\n    \n    // Pleasing SDF visualization colors from: https://www.shadertoy.com/view/4sS3zz\n    float coloringDist = 0.12 * rawDist;\n\tvec3 color = vec3(1.0) - sign(coloringDist) * vec3(0.1, 0.4, 0.7);\n\tcolor *= 1.0 - exp(-3.0 * abs(coloringDist));\n\tcolor *= 0.8 + 0.2 * cos(120.0 * coloringDist);\n\tcolor = mix(color, vec3(1.0), 1.0 - smoothstep(0.0, 0.02, abs(coloringDist)));\n    \n    // Draw a divider between the two different methods.\n    color = mix(\n        color,\n        vec3(0.3, 0.4, 0.8),\n\t\tsmoothstep(0.2, 0.1, abs(testPoint.x)));\n    \n    // Convert from linear to gamma space.\n    //color = sqrt(color);\n       \n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}