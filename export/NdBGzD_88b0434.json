{"ver":"0.1","info":{"id":"NdBGzD","date":"1617016197","viewed":114,"name":"Radial Clone","username":"voax","description":"radial cloner like in after effects","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["radial","clone"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3Rn","filepath":"/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","previewfilepath":"/media/ap/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int Clones = 10;\nfloat StartRadius = 0.2;\nfloat EndRadius   = 0.05;\n\nfloat StartScale = 0.2;\nfloat EndScale   = 0.05;\n\nfloat StartRotation = 0.0;\nfloat EndRotation = 1.0;\n\nfloat Fan = 1.61;\nfloat FanOffset = 0.0;\n\nfloat MasterRotation = 0.0;\nfloat RotationSpeed = 0.1;\n\nint delay = 20;\n\nconst float PI = 3.14159265359;\nconst float TwoPI = PI * 2.;\n\nvec2 singleCat(vec2 uv) {\n    vec2 catuv = clamp(uv, 0.0, 1.0) * vec2(1./6.2, 1.);\n    return catuv;\n}\n\nvec2 cloneUV(vec2 fragCoord, vec2 p, float s, float rot) {\n    mat2 m = mat2(cos(rot), sin(rot), -sin(rot), cos(rot));\n    vec2 uv = (fragCoord - p) / s;\n    uv = m*uv;\n    uv = uv + 0.5;\n    return uv;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float m = max(iResolution.x, iResolution.y);\n    \n    float Rotation = MasterRotation;\n    if (iMouse.z < 0.5) {\n        // Fan = cos(iTime / 4.0) * 0.5 + 0.5;\n        Rotation = MasterRotation + iTime * RotationSpeed;\n        // EndRotation = cos(iTime) * 0.5 + 0.5;\n    } else {\n        Fan = iMouse.y / iResolution.y;\n        FanOffset = iMouse.x / iResolution.x;\n        // Rotation = iMouse.x / iResolution.x;\n    }\n\n    vec4 result = vec4(0);\n    \n    vec2 C = iResolution.xy / 2.;\n    \n    const int N = Clones;\n    for (int i = 0; i < N; ++i) {\n        float q = (float(i) / float(N) - FanOffset) * Fan + FanOffset;\n        float nq = clamp(q, 0., 1.);\n        \n        vec2 P;\n        P.x = sin((q + Rotation) * TwoPI);\n        P.y = cos((q + Rotation) * TwoPI);\n        \n        float R = m * mix(StartRadius, EndRadius, nq);\n        float S = m * mix(StartScale, EndScale, nq);\n        float Rot = mix(StartRotation, EndRotation, q);\n        \n        vec2 uv = cloneUV(fragCoord, C + P * R, S, (Rot + Rotation) * TwoPI);\n        \n        vec2 puv = singleCat(uv);\n    \n        vec4 col = texture(iChannel0, puv);\n        float a = clamp(pow(length(vec3(1.0) - col.rgb) * 4.0, 2.0), 0.0, 1.0); // \"chroma key\" ;)\n        col *= a;\n        \n        vec2 bufferUV = vec2(0.0, float(i * delay) / float(iResolution.y));\n        vec3 cloneColor = texture(iChannel1, bufferUV).rgb;\n        col.rgb *= cloneColor;\n        \n        result = col + result * (1.0 - col.a);\n    }\n    \n    vec4 checkerboard = int(fragCoord.x) / 32 % 2 == 0 ^^ int(fragCoord.y) / 32 % 2 == 0 ?\n        vec4(0.2) : vec4(0.4);\n\n    // Output to screen\n    fragColor = vec4(result.rgb * result.a + checkerboard.rgb * (1.0 - result.a), 1.0);\n    \n    // fragColor = texture(iChannel1, vec2(0.0, fragCoord.y / iResolution.y));\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (int(fragCoord.y) == 0) {\n        vec3 hsv = vec3(iTime * 0.5, int(iTime * 4.0) % 8 == 0 ? 0.0 : 1.0, 1.0);\n        fragColor = vec4(hsv2rgb(hsv), 1.0);\n    } else\n        fragColor = texture(iChannel1, vec2(0, (fragCoord.y-1.f) / iResolution.y));\n}","name":"Buffer A","description":"","type":"buffer"}]}