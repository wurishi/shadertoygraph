{"ver":"0.1","info":{"id":"dtKSRy","date":"1686176887","viewed":52,"name":"Mandelbrot spin","username":"flaming_goat","description":"Mandelbrot is chopped up and spun around ","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float mandelbrot(vec2 p)\n{\n    int max_iter = 100;\n    float x = 0.0;\n    float y = 0.0;\n\t\n\tint iteration = 0;\n\t\n\tfor(int i = 0; i<max_iter; i++)\n\t{\n\t\tif(x*x + y*y > 2.0*2.0)\n\t\t{\n\t\t\titeration = i;\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\tfloat xTemp = x*x - y*y + p.x;\n\t\ty = 2.0*x*y + p.y;\n\t\tx = xTemp;\n\t}\n    \n\t\n\treturn float(iteration) / float(max_iter);\n}\n\nmat2 r2d(float a) {\n\tfloat c = cos(a), s = sin(a);\n\t// https://en.wikipedia.org/wiki/Rotation_matrix\n    // https://www.khronos.org/opengl/wiki/Data_Type_(GLSL)#Matrix_constructors\n    return mat2(\n        c, s, // column 1\n        -s, c // column 2\n    );\n}\n\nvec3 palette( in float t)\n{\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 0.5);\n    vec3 d = vec3(-.4, 0.70, -.6);\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec2 uv0 = uv;\n    uv = fract(uv * 2.0) - 0.5;\n    \n    // Time varying pixel color\n    \n    \n    uv *= r2d(iTime);\n    \n    float c = mandelbrot(uv * (1.02 + sin(iTime)) + vec2(-0.5,0.0) /*+ vec2(-0.1528,1.0397)*/ + uv0);\n    vec3 col = palette(c);\n    col = col * 0.8 + 0.5*cos(iTime+uv0.xyx+col);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}