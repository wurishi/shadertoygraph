{"ver":"0.1","info":{"id":"3dtBRj","date":"1605561869","viewed":94,"name":"hoeled_cube_points_3d","username":"hoeled","description":"Cube points and camera in 3d space from https://www.youtube.com/watch?v=PBxuVlp7nuM\n","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["colors"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float DistLine(vec3 ro, vec3 rd, vec3 p) {\n    return length(cross(p-ro, rd))/length(rd);\n}\n\nfloat DrawPoint(vec3 ro, vec3 rd, vec3 p) {\n    float d = DistLine(ro, rd, p);   \n    float t = iTime;\n    d = smoothstep(7., 1., d);\n  \treturn d;\n}\n\nfloat DrawCubes(vec3 ro, vec3 rd) {\n\tfloat d = 0.;\n    \n    for (int i = 1; i < 40; i++) {\n        float pos = .1 * float(i);\n    \td += DrawPoint(ro, rd, vec3(-pos, -pos, -pos));\n    \td += DrawPoint(ro, rd, vec3(-pos, -pos, pos));\n    \td += DrawPoint(ro, rd, vec3(-pos, pos, -pos));\n    \td += DrawPoint(ro, rd, vec3(-pos, pos, pos));\n    \td += DrawPoint(ro, rd, vec3(pos, -pos, -pos));\n    \td += DrawPoint(ro, rd, vec3(pos, -pos, pos));\n    \td += DrawPoint(ro, rd, vec3(pos, pos, -pos));\n    \td += DrawPoint(ro, rd, vec3(pos, pos, pos));\n        \n        //middle\n        d += DrawPoint(ro, rd, vec3(0., 0., 0.));\n    }    \n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t = iTime;\n    \n    float mouseX = iMouse.x / iResolution.x;\n    float mouseY = iMouse.y / iResolution.y;\n    \n    vec2 uv = fragCoord.xy/iResolution.xy; // 0 -> 1\n    uv -= .5;\n    uv.x *= iResolution.x/iResolution.y;\n    uv *= 1.7;\n    \n    //camera\n    vec3 ro = vec3(12, 3. * sin(t), 3. * -cos(t));\n    //vec3 ro = vec3(5., 0.5, -3.5);\n    vec3 lookat = vec3(0.);\n    float zoom = .3;\n    \n    vec3 f = normalize(lookat-ro);\n    vec3 r = cross(vec3(0., 1., 0.), f);\n    vec3 u = cross(f, r);\n    \n    vec3 c = ro + f*zoom;\n    vec3 i = c + uv.x*r + uv.y*u;\n    vec3 rd = i-ro;\n        \n    float d = DrawCubes(ro, rd) * cos(t) / 10.;\n    \n    float red = d * t / 10000. + sin(d * 2.) + cos(t);\n    float blue = sin(d) * 30. * cos(t) + cos(t);\n    float green = d / 20. - sin(d);\n    fragColor = vec4(red, green, blue, 1.0);\n}","name":"Image","description":"","type":"image"}]}