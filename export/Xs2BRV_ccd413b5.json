{"ver":"0.1","info":{"id":"Xs2BRV","date":"1501395527","viewed":81,"name":"Ray march","username":"mjdr","description":"Simle ray march","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["3d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nfloat sphere(vec3 p, vec3 c, float r) {\n    return length(p - c) - r;\n}\n\nvec3 repeat(vec3 p, vec3 d){\n    return mod(p,d)- d / 2.; \n}\n\n\nfloat world(vec3 p){\n    float plane = p.y + 1.;\n    \n    \n    float sphere1 = sphere(\n        p, \n        vec3(0.0,0.0,0.0),\n        1. +.1 * sin(p.x * 5.0 + iTime * 3.)\n    );\n    float sphere2 = sphere(\n        p, \n        vec3(0.0,0.0,0.0),\n        1.\n    );\n    float sphere3 = sphere(\n        p, \n        vec3(0.4,.7,.85),\n        .3\n    );\n    \n    float obj = max(-sphere3,sphere2);\n    \n    \n    float d = plane;\n    \n    d = min(d,obj);\n    //d = min(d,sphere3);\n    \n    return d;\n}\n\nvec3 normal(vec3 p){\n    vec2 e = vec2(0,0.01);\n    float d = world(p);\n    return normalize(\n        vec3(\n        \tworld(p + e.yxx) - d,\n        \tworld(p + e.xyx) - d,\n        \tworld(p + e.xxy) - d\n            )\n    );\n}\n\n\nfloat tracer(vec3 O, vec3 D){\n    float N = 0.0;\n    for(int i = 0;i < 128;i++){\n        float w = world(O + D*N);\n        \n        if(w < .005)\n            return N;\n        \n        N += w * 0.5;\n    }\n    return -1.0;\n}\n\nvec3 camera(vec2 fragCoord){\n    vec2 uv = 2.0 * (fragCoord.xy / iResolution.xy) - 1.;\n    \n    vec2 p = uv * vec2(1.,iResolution.y/iResolution.x);\n    \n    return normalize(vec3(p,-1.0));\n}\n\nvec3 camera360(vec2 fragCoord){\n    vec2 uv = 2.0 * (fragCoord / iResolution.xy) - 1.;\n    //vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 a = uv * 3.141592;\n    \n    \n    \n    return vec3(sin(a.y) * cos(a.x),sin(a.y) * sin(a.x),-cos(a.y));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t\n    vec3 o = vec3(0.,0.,3.);\n    vec3 d = camera(fragCoord);\n    \n    float t = tracer(o,d);\n    vec3 color = vec3(0.0);\n    \n    \n    if(t > 0.0){\n        vec3 pos = o + d * t;\n        vec3 n = normal(pos);\n        \n        float k = dot(n, normalize(vec3(0.,1.,1.)));\n        if(k < 0.1) k = .1;\n        \n        color = vec3(k);\n    }\n    \n\tfragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}