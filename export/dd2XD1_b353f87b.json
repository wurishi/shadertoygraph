{"ver":"0.1","info":{"id":"dd2XD1","date":"1670268558","viewed":99,"name":"spheres don't exist","username":"emmacsun","description":"goodbye sphere","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["sphere"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 rotate(in vec2 p, in float t)\n{\n\treturn p * cos(-t) + vec2(p.y, -p.x) * sin(-t);\n}\n\nfloat deCircle(in vec2 p, in float r)\n{\n     return length(p) - r;\n}\n\nfloat deQuad(in vec2 p, in float h)\n{\n     return max(abs(p.x), abs(p.y)) - h;\n}\n\nfloat thing(in vec2 p, in float h)\n{\n    return sin(h);\n}\n\nfloat shapeRad1(in vec3 p)\n{\n    float a = atan(p.z, p.x);\n    return 0.5 * ((sin(5.0 * a)) + 3.0);\n}\n\nfloat cylinder(in vec3 p, vec2 q)  \n{\n    return deQuad(q * vec2(shapeRad1(p), 1.0), 1.0);\n}\n\nfloat circle(in vec3 p, vec2 q)  \n{\n    return deCircle(q, 1.0);\n}\n\nfloat smaller(in vec3 p, vec2 q, in float r, in float t)  \n{\n    return thing(q,r) - thing(q,t);\n}\n\nfloat map(in vec3 p)\n{    \n    p *= 0.35;\n\tvec2 q = vec2(length(p.xz), p.y);    \n    float t = mod(iTime * 0.8, 42.0);\n    \n    if (t<17.0) return mix(circle(p,q), cylinder(p,q), smoothstep(1.0,5.0,t));\n    else return mix(cylinder(p,q), circle(p*0.1,q*0.1), smoothstep(5.0,15.0,t));\n}\n\nvec3 calcNormal(in vec3 p)\n{\n\tconst vec2 e = vec2(0.0001, 0.0);\n\treturn normalize(vec3(\n\t\tmap(p + e.xyy) - map(p - e.xyy),\n\t\tmap(p + e.yxy) - map(p - e.yxy),\n\t\tmap(p + e.yyx) - map(p - e.yyx)));\n}\n\nfloat march(in vec3 ro, in vec3 rd)\n{\n\tconst float maxd = 50.0;\n\tconst float precis = 0.001;\n    float h = precis * 2.0;\n    float t = 0.0;\n\tfloat res = -1.0;\n    for(int i = 0; i < 256; i++)\n    {\n        if(h < precis || t > maxd) break;\n\t    h = map(ro + rd * t);\n        t += h;\n    }\n    if(t < maxd) res = t;\n    return res;\n}\n\nvec3 transform(in vec3 p)\n{\n    p.yz = rotate(p.yz, iTime * 0.5);\n    p.zx = rotate(p.zx, iTime * 0.7);\n    return p;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0 * fragCoord.xy - iResolution.xy) / iResolution.y;\n\tvec3 col = vec3(0.1 + p.y * 0.15);\n   \tvec3 rd = normalize(vec3(p, -1.8));\n\tvec3 ro = vec3(0.0, 0.0, 10.0);\n    vec3 li = normalize(vec3(0.5, 0.8, 3.0));\n    ro = transform(ro);\n\trd = transform(rd);\n\tli = transform(li);\n    float t = march(ro, rd);\n    if(t > -0.001)\n    {\n        vec3 pos = ro + t * rd;\n        vec3 n = calcNormal(pos);\n\t\tfloat dif = clamp((dot(n, li) + 0.5) * 0.7, 0.3, 1.0);\n        col = vec3(0.9, 0.6, 0.9) * dif;\n    }\n   \tfragColor = vec4(col, 10.0);\n}\n","name":"Image","description":"","type":"image"}]}