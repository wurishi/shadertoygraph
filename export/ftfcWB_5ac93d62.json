{"ver":"0.1","info":{"id":"ftfcWB","date":"1648612512","viewed":159,"name":"Ferrofluid Array","username":"uiop","description":"Liked how this one turned out, except for the fact that it is quite unoptimized and expensive.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 refl(vec3 d, vec3 n){\n    return d - 2.f * n * dot(d,n);\n}\n\n\nvec3 rotx(vec3 p, float a){\n    float s = sin(a);\n    float c = cos(a);\n    return(vec3(p.x*c+p.y*s,-p.x*s+p.y*c,p.z));\n}\n\nvec3 stretchRepeat(vec3 p, float a){\n    return vec3(p.x,p.y,p.z);\n}\n\nvec4 sdf(vec3 p,float t){\n    float sf = 0.;\n    \n    vec3 p2 = vec3(\n        p.x + 0.2*sin(p.y*2.+t),\n        p.y + 0.2*sin(p.z*2.+t),\n        p.z + 0.2*sin(p.x*2.+t));\n    vec3 pos = (mod(p2.xyz-0.5f,2.f)-1.f);\n    ivec3 ipos = ivec3((p2.xyz-0.5f) * 0.5 + 0.f) + 0;\n    float t2 = t + float(ipos.x - ipos.y + ipos.z);\n    //for(int i = 0; i < 5; i++){\n        \n    //}\n    vec3 pos2 = vec3(\n        pos.x + 0.05 * cos( 50.*sin(t2*0.5)*pos.y) + 0.01*cos( 25.*sin(t2*0.3)*pos.z), \n        pos.y + 0.05 * cos( 50.*sin(t2*0.25)*pos.z) +  0.01*cos( 25.*sin(t2*1.2)*pos.x),\n        pos.z + 0.05 * cos( 50.*sin(t2)*pos.x) +  0.01*cos( 25.*sin(t2*0.6)*pos.y));\n    float radi = 0.3 + 0.2*sin(float(ipos.z + ipos.x + ipos.y) + t*2.);\n    return vec4(length(pos2) - radi,ipos.x,ipos.y,ipos.z);\n}\n\n\nvec3 findNormal(vec3 p, float d,float t){\n    return normalize(vec3(sdf(p + vec3(d,0,d),t).r - sdf(p - vec3(d,0,0),t).r,\n    sdf(p + vec3(0,d,0),t).r - sdf(p - vec3(0,d,0),t).r,\n    sdf(p + vec3(0,0,d),t).r - sdf(p - vec3(0,0,d),t).r\n    ));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-0.5f*iResolution.xy)/iResolution.x;\n    float time = iTime*1.;\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    vec3 pos = vec3(5.0*sin(time*0.1f),5.0*cos(time*0.08f),-10.0*sin(time*0.05f));\n    //vec3 dir = normalize(rotx(rotx(vec3(uv.x,uv.y,1),time*0.2f).zxy,time*0.1f).zxy);\n    vec3 dir = normalize(rotx(rotx(vec3(uv.x,uv.y,-1.).zxy,time*0.1).zxy,time*0.015));\n    int ma = 500;\n    int ma2 = 100;\n    \n    bool hit = false;\n    float dist = 0.;\n    vec4 finals = vec4(0,0,0,0);\n    for(int i = 0; i < ma; i++){\n        vec4 sd = sdf(pos,time);\n        float s = sd.r;\n        float dis = min(sd.r,0.05);\n        dist += dis;\n        if(s < 0.0001){\n            i = ma;\n            pos += dir * -0.1*dis;\n\n            finals = sd;\n            hit = true;\n        }\n        pos += dir * dis;\n    }\n    \n    \n    if(hit){\n    \n        vec3 norm = findNormal(pos, 0.00001, time);\n        vec3 refla = refl(-dir,norm);\n        //col = 0.5 + 0.5 * norm;\n        col = texture(iChannel0,-refla.zxy).rgb;\n        vec3 tint = 0.5 + 0.5*vec3(sin(finals.y),sin(finals.z),sin(finals.w));\n        tint = clamp(normalize(tint)+0.6,0.,1.);\n        col = col * tint;\n        col = col - 0.015*vec3(dist,dist,dist);\n        pos += dir * -0.01;\n\n        \n        bool hit = false;\n        float dist = 0.;\n        vec4 finals = vec4(0,0,0,0);\n        dir = normalize(vec3(1,cos(time*2.),sin(time*2.)));\n        for(int i = 0; i < ma2; i++){\n            vec4 sd = sdf(pos,time);\n            float s = sd.r;\n            float dis = min(sd.r,0.03);\n            dist += dis;\n            if(s < 0.000001){\n                i = ma2;\n                finals = sd;\n\n                hit = true;\n            }\n            pos += dir * dis;\n        }\n        if(hit){\n            col = col * clamp(dist*1.0,0.5,1.);\n        }else{\n            \n        }\n    \n        \n        \n    }else{\n        col = 0.1*texture(iChannel0,dir.zxy).rgb;\n    }\n    //col = col - 0.02*vec3(dist,dist,dist);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}