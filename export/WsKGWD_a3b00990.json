{"ver":"0.1","info":{"id":"WsKGWD","date":"1637339374","viewed":126,"name":"3DPerlinNoise","username":"drcd1","description":"3D Perlin Noise","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SQRT2_INV 0.70710678118f\n#define SQRT2 1.41421356237f\n#define LAYERS 5\nvec3 gradient[]=vec3[](\n    vec3(0.0f,SQRT2_INV,SQRT2_INV),vec3(0.0f,SQRT2_INV,-SQRT2_INV),vec3(0.0f,-SQRT2_INV,-SQRT2_INV),vec3(0,-SQRT2_INV,SQRT2_INV),\n    vec3(SQRT2_INV,0.0f,SQRT2_INV),vec3(SQRT2_INV,0,-SQRT2_INV),vec3(-SQRT2_INV,0,-SQRT2_INV),vec3(-SQRT2_INV,0,SQRT2_INV),\n    vec3(SQRT2_INV,SQRT2_INV,0.0f),vec3(SQRT2_INV,-SQRT2_INV,0.0f),vec3(-SQRT2_INV,-SQRT2_INV,0.0f),vec3(-SQRT2_INV,SQRT2_INV,0));\nint random_idx[] = int[](\n\t213, 16, 185, 39, 132, 110, \n    25, 215, 157, 12, 193, 5, \n    254, 166, 123, 222, 141, \n    54, 4, 95, 104, 73, 248, 224, \n    252, 88, 29, 20, 236, 210, 177, \n    118, 206, 124, 111, 255, 131, 43, \n    53, 115, 137, 164, 228, 10, 51, 172, \n    235, 155, 107, 65, 114, 83, 246, 91, 119, \n    105, 162, 201, 239, 28, 191, 178, 163, 64, 108,\n    67, 96, 122, 94, 212, 17, 237, 182, 184, 241, 34, \n    98, 211, 138, 159, 216, 134, 13, 22, 140, 205, 0, 180,\n    158, 220, 144, 247, 27, 223, 87, 80, 69, 75, 186, 231, \n    71, 74, 240, 50, 62, 21, 40, 152, 19, 66, 100, 209, 242, \n    99, 90, 168, 195, 93, 199, 32, 146, 136, 227, 109, 189, 221,\n    143, 55, 129, 161, 171, 44, 200, 23, 8, 225, 245, 2, 77, 203, \n    70, 38, 145, 81, 165, 24, 127, 18, 113, 60, 120, 35, 196, 126, \n    154, 7, 156, 176, 89, 37, 219, 190, 179, 52, 204, 232, 31, 175, \n    181, 226, 250, 45, 106, 167, 14, 59, 58, 47, 233, 48, 238, 197,\n    102, 121, 112, 9, 97, 169, 207, 49, 135, 78, 33, 30, 198, 82,\n    86, 130, 139, 128, 251, 11, 183, 229, 142, 202, 101, 79, 234, \n    133, 46, 15, 63, 244, 57, 148, 150, 174, 187, 36, 160, 117, 170, \n    26, 230, 217, 76, 61, 116, 153, 41, 103, 3, 218, 149, 125, 92, 192,\n    243, 56, 151, 1, 84, 42, 6, 208, 194, 249, 173, 68, 72, 188, 85, 214, \n    147, 253\n);\n\nfloat smooth_lerp(float a, float b, float t){\n\tfloat f = ((6.0f*t-15.0f)*t+10.0f)*t*t*t;\n    return a*(1.0f-f)+b*f;\n}\n\nfloat getPerlin(vec3 pos){\n    //x,y,x+1,y+1,bottom left,bottom right, top left, top right\n\tint x,y,z,x1,y1,z1,bl0,br0,tl0,tr0,bl1,br1,tl1,tr1;\n    //fractional values\n    float x_f,y_f,z_f;\n    x = pos.x<0.0f?(int(pos.x)):int(pos.x)+1;\n    y = pos.y<0.0f?(int(pos.y)):int(pos.y)+1;\n    z = pos.z<0.0f?(int(pos.z)):int(pos.z)+1;\n    //make sure all are positive modulo 256\n    x=x<0?x%256+256:x;\n    y=y<0?y%256+256:y;\n    z=z<0?z%256+256:z;\n    \n    x_f = pos.x-floor(pos.x);\n    y_f = pos.y-floor(pos.y);\n    z_f = pos.z-floor(pos.z);\n    \n    x1 = x+1;\n    y1 = y+1;\n    z1 = z+1;\n    bl0 = random_idx[(random_idx[(random_idx[x%256 ]+y )%256]+z )%256];\n    br0 = random_idx[(random_idx[(random_idx[x1%256]+y )%256]+z )%256];\n    tl0 = random_idx[(random_idx[(random_idx[x%256 ]+y1)%256]+z )%256];\n    tr0 = random_idx[(random_idx[(random_idx[x1%256]+y1)%256]+z )%256];\n    \n    bl1 = random_idx[(random_idx[(random_idx[x%256 ]+y )%256]+z1)%256];\n    br1 = random_idx[(random_idx[(random_idx[x1%256]+y )%256]+z1)%256];\n    tl1 = random_idx[(random_idx[(random_idx[x%256 ]+y1)%256]+z1)%256];\n    tr1 = random_idx[(random_idx[(random_idx[x1%256]+y1)%256]+z1)%256];\n    \n    \n    \n    vec3 grad_bl0 = gradient[bl0%12];\n    vec3 grad_br0 = gradient[br0%12];\n    vec3 grad_tl0 = gradient[tl0%12];\n    vec3 grad_tr0 = gradient[tr0%12];\n    vec3 grad_bl1 = gradient[bl1%12];\n    vec3 grad_br1 = gradient[br1%12];\n    vec3 grad_tl1 = gradient[tl1%12];\n    vec3 grad_tr1 = gradient[tr1%12];\n    \n    vec3 dist_bl0 = vec3(x_f     ,y_f     , z_f);\n    vec3 dist_br0 = vec3(x_f-1.0f,y_f     , z_f);\n    vec3 dist_tl0 = vec3(x_f     ,y_f-1.0f, z_f);\n    vec3 dist_tr0 = vec3(x_f-1.0f,y_f-1.0f, z_f);\n    \n    vec3 dist_bl1 = vec3(x_f     ,y_f     , z_f-1.0f);\n    vec3 dist_br1 = vec3(x_f-1.0f,y_f     , z_f-1.0f);\n    vec3 dist_tl1 = vec3(x_f     ,y_f-1.0f, z_f-1.0f);\n    vec3 dist_tr1 = vec3(x_f-1.0f,y_f-1.0f, z_f-1.0f);\n    \n    //value at each point\n    /*float v_bl = grad_bl.x*x_f        + grad_bl.y*y_f;\n    float v_br = grad_br.x*(1.0f-x_f) + grad_br.y*y_f;\n    float v_tl = grad_tl.x*x_f        + grad_tl.y*(1.0f-y_f);\n    float v_tr = grad_tr.x*(1.0f-x_f) + grad_tr.y*(1.0f-y_f);*/\n    float v_bl0 = dot(grad_bl0,dist_bl0);\n    float v_br0 = dot(grad_br0,dist_br0);\n    float v_tl0 = dot(grad_tl0,dist_tl0);\n    float v_tr0 = dot(grad_tr0,dist_tr0);\n    \n    float v_bl1 = dot(grad_bl1,dist_bl1);\n    float v_br1 = dot(grad_br1,dist_br1);\n    float v_tl1 = dot(grad_tl1,dist_tl1);\n    float v_tr1 = dot(grad_tr1,dist_tr1);\n    /*v_bl = grad_bl.x;\n    v_br = grad_br.x;\n\tv_tl = grad_tl.x;\n\tv_tr = grad_tr.x;*/\n    \n    return SQRT2*smooth_lerp(\n        smooth_lerp(smooth_lerp(v_bl0,v_br0,x_f),smooth_lerp(v_tl0,v_tr0,x_f),y_f),\n        smooth_lerp(smooth_lerp(v_bl1,v_br1,x_f),smooth_lerp(v_tl1,v_tr1,x_f),y_f),\n        z_f);\n    \n    \n    \n}\nfloat getNoise(vec3 pos){\n\t//return 1.0f/(1.0f+0.5f+0.25f+0.125f)*(getPerlin(pos)+0.5f*getPerlin(pos*2.0f)+0.25*getPerlin(pos*4.0f)+0.125*getPerlin(pos*8.0f));\n    float frequency = 2.f;\n    float attenuation = 0.5f;\n    float val_acc=0.0f;\n    float acc=0.0f;\n    float mul_val = 1.0f;\n    float mul_freq = 1.0f;\n    \n    for(int i = 0; i<LAYERS;i++){\n        acc+= mul_val*getPerlin(pos*mul_freq);\n        val_acc+= mul_val;\n        mul_val*=attenuation;\n        mul_freq*=frequency;\n    }\n    return acc/val_acc;\n    \n    //return (getPerlin(pos));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n    // Normalized pixel coordinates (from 0 to 1)\n    float scale = 10.0f;\n    float aspect = iResolution.y/iResolution.x;\n    vec2 uv = fragCoord/iResolution.xy;\n\tvec3 pos = vec3(uv.x*scale,uv.y*aspect*scale,iTime);\n    float value = getNoise(pos)*0.5f+0.5f;\n    // Time varying pixel color\n    vec3 col = vec3(value);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}