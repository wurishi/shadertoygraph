{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":1,"type":"cubemap","id":"4dX3zn","filepath":"/media/a/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png","sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}},{"channel":2,"type":"texture","id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"#define THRESHOLD 0.8\n#define FREQ 0.125\n#define NORMTRIG(x) (x + 1.0) * 0.5\n#define PI 3.14159265\n#define DEGTORAD(x) (x * PI) / 180.0\n#define SPEED 0.4\n\nmat4 rotateY(in float a)\n{\n   float cosa = cos(a);\n   float sena = sin(a);\n   return mat4( cosa, 0.0, -sena, 0.0,\n               0.0  , 1.0, 0.0, 0.0,\n               sena , 0.0, cosa , 0.0\t,\n               0.0  , 0.0, 0.0 , 1.0\t);\n}\n\nmat4 rotateX(in float a)\n{\n   float cosa = cos(a);\n   float sena = sin(a);\n   return mat4( 1.0, 0.0, 0.0, 0.0,\n             0.0,\tcosa , sena, 0.0,\n             0.0, -sena , cosa , 0.0,\n             0.0  , 0.0, 0.0 , 1.0\t);\n}\n\nmat4 rotateZ(in float a)\n{\n   float cosa = cos(a);\n   float sena = sin(a);\n   return mat4( cosa ,sena , 0.0,  0.0,\n                -sena, cosa, 0.0,   0.0,\n             \t0.0\t ,0.0  , 1.0,  0.0,\n             \t0.0  ,0.0  , 0.0,  1.0\t);\n}\n//Author: Inigo Quilez\nvec3 hsltorgb( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n    return c.z + c.y * (rgb-0.5)*(1.0-abs(2.0*c.z-1.0));\n}\n\nvec2 rotate(in vec2 p, float angle)\n{\n    return vec2(p.x * cos(angle) - p.y * sin(angle), p.y * cos(angle) + p.x * sin(angle));\n}\nbool intersectPlane(in vec3 o, in vec3 d, in vec3 p, in vec3 n, out float t)\n{\n\tfloat dotP=dot(d, n);\n\tif(abs(dotP)<0.001)\n\t\treturn false;\n\tt=-(dot(o,n)-dot(p,n))/dotP;\n\tif(t>0.0)\n        return true;\n\treturn false;\n}\n    \nvec3 camera(in vec3 dir)\n{\n    vec3 cam =  dir;\n   \n        \n    vec2 m = iMouse.xy;\n    m /= iResolution.xy;\n   \n    mat4 rotY = rotateY(-(m.x * 4.0 - 2.0));\n    mat4 rotX = rotateX(m.y * 4.0 - 2.0);\n\n\n    cam = normalize(vec3(rotY *rotX *  vec4(cam, 0.0))); \n    \n   return cam;\n}\n\nfloat noise(vec2 uv);\n#define EPSILON 0.001\n\n#define ITERATIONS 256\n#define MAX_DIST 110.0\n#define INCR_T (MAX_DIST / float(ITERATIONS))\n#define DIST_HEIGHT 0.4\n\nfloat fbm(vec2 p);\n\nbool raySphere( in vec3 ro, in vec3 rd, in vec3 so, in float r,out vec3 n, out float t)\n{\n    bool result = false;\n    t = 0.0;\n    vec3 p = ro;\n    //distort the sphere\n    r += smoothstep(-DIST_HEIGHT, DIST_HEIGHT, noise(rotate(so.xy - rd.xy ,so.y)));\n   \n    float desv = +5.0 * (sin(iTime * 0.2));\n    float fS = 10.0 + desv;\n    \n \tfor(int i = 0; i < ITERATIONS; ++i)\n    {\n        \n        t += INCR_T;\n        p = t * rd + ro;\n        //domain rep\n       \tvec3 s = vec3(fS * 0.5, fS * 0.5, fS * 0.5) + so;\n        vec3 p = mod(p, vec3(fS, 10.0, fS));\n        vec3 vSP = p - s;\n        \n       \tif(dot(vSP, vSP) < r * r)\n        {\n        \tresult = true;\n           \tbreak;\n        }\n    }\n    \n    //get normal\n    n = normalize(p - so);\n   \n    \n    return result;\n    \n}\n    \nfloat noise(vec2 uv)\n{\n \treturn texture(iChannel2, uv).r;   \n}\n\nfloat fbm(vec2 p)\n{\n \tfloat f = 0.0;   \n    f += 0.5    * noise(p); p *= 2.07;\n    f += 0.250  * noise(p);\tp *= 2.03;\n    f += 0.125  * noise(p);\tp *= 2.05;\n    f += 0.0625 * noise(p);\tp *= 2.08;\n    f /= 0.9375;\n    return f;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 ss = uv * 2.0 - vec2(1.0);//from 1.0 to -1.0\n\tss.y*= iResolution.y / iResolution.x;//aspect ratio\n    //use fbm to modify camera vector\n    float b = fbm((ss + vec2(iTime * SPEED)) * FREQ );\n  \n    ss += ss * 0.1 * smoothstep(-1.0, 1.0, (b - THRESHOLD) / (1.0 - THRESHOLD));\n    /* ss +=  ss*(2.0 * b * 0.01 - 1.0) ;\n\tss.y *= -1.0;*/\n    vec3 lv = normalize(vec3(0.1, 0.5, 0.7));\n\tvec3 cv = camera(vec3(ss, -1.0));\n    vec3 ov = vec3(0.0, 17.0, 5.0) + 3.0 * sin(iTime * 0.4);\n    vec3 ms = vec3(5.0);\n    vec3 ps = vec3(0.0, 0.0, 0.0) + vec3(0.0, 1.0, 0.0) * sin(iTime * 0.032 *  NORMTRIG(cos(iTime * 0.1)));\n    vec3 n = vec3(0.0);\n    vec3 ip = vec3(0.0);\n    vec4 color = texture(iChannel1, cv);\n    float t = 0.0;\n    vec3 rcv = vec3(rotateY(DEGTORAD(360.0) * sin(iTime * 0.01 *  NORMTRIG(cos(iTime * 0.1))))* normalize(vec4(cv, 1.0)));\n\t//vec3 rcv = cv;\n    float r = 3.75;\n\tvec2 m = iMouse.xy;\n    m /= iResolution.xy;\n    \n    float dSphere = distance(ov, ps);\n    float dSphereMin = dSphere - r;\n    float dSphereMax = dSphere ;\n    \n    if(raySphere(ov, rcv, ps, r, n, t))\n    {\n        //color change depending of distance and time\n        float hue = smoothstep(0.0, 1.0, NORMTRIG(sin(iTime * 0.7)) * (t - dSphereMin)/ (dSphereMax - dSphereMin));\n        float l = max(0.0, dot(n, lv));\n        vec4 hsl = vec4(hsltorgb(vec3(hue, 0.75, l)), 1.0);\n        vec4 reflection = texture(iChannel1, reflect(rcv, n));\n        color = mix(hsl, reflection, 0.3 + 0.3 * NORMTRIG(sin(iTime * 0.5)));\n    }\n   \t//gama correction\n    color = pow(color, vec4(1.0 / 0.722));   \n    \n    \n   \t\n   \tfragColor = color;\n\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MsjXDK","date":"1418416579","viewed":196,"name":"I'm really bad at names","username":"bolt304","description":"What it started as a try of doing something cool with distortion of light rays ended as an experiment with domain repetition and raymarching (it changed drastically after i was not able to run it at a friends computer and I started rewriting stuff)","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","fbm","domainrepetition"],"hasliked":0,"parentid":"","parentname":""}}