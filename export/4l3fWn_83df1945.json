{"ver":"0.1","info":{"id":"4l3fWn","date":"1539143660","viewed":263,"name":"Mucous Membrane HeightField","username":"tholzer","description":"Mixing HeightMap        https://www.shadertoy.com/view/MltBRN\n+ Mucous Membrane  [url]https://www.shadertoy.com/view/MtVyWz[/url]\n= 3d view of 2d animation\nTodo: generate endless pattern","likes":6,"published":1,"flags":32,"usePreview":0,"tags":["2d","3d","heightfield","pattern","shade"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n//---------------------------------------------------------\n// MucousMembraneHeightField.glsl   by tHolzer 2018-10-10\n//                                             2019-08-04\n// Mixing HeightMap   https://www.shadertoy.com/view/MltBRN\n// + Mucous Membrane  https://www.shadertoy.com/view/MtVyWz\n//---------------------------------------------------------\n\n#define EPS 0.01\n\n#define TEX(pos) texture(iChannel0, mod(pos.xz * 0.2, 1.0))\n\nconst float heightFactor = 0.8; // height factor. will multiply texture height.\n\nvec3 cameraPos = vec3(0.0, 2.0, 1.5);\nvec4 plane = vec4(0.0, 1.0, 0.0, 2.0);\nvec3 lightDir = vec3(1.0, 1.0, 1.0);\nvec3 skyCol = vec3(0.5, 0.5, 0.9);\n\nfloat distPlane(in vec3 p, vec4 n)\n{\n    return dot(p, n.xyz) * n.w;\n}\n\nfloat distFunc(in vec3 p)\n{\n    float d = distPlane(p, plane);\n    vec4 tex = TEX(p);\n\treturn d - tex.x * heightFactor;\n}\n\nvec3 getNormal(in vec3 p)\n{\n    float d = distFunc(p);\n    return normalize(vec3(\n    \td - distFunc(p - vec3(EPS, 0, 0)),\n    \td - distFunc(p - vec3(0, EPS, 0)),\n    \td - distFunc(p - vec3(0, 0, EPS))\n    ));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 R = iResolution.xy;\n    vec2 p = (fragCoord.xy * 2.0 - R.xy) / min(R.x, R.y);\n    \n    vec4 m = iMouse / iResolution.xxxx;\n    \n    vec3 origin = cameraPos;\n    float t = iTime * 0.01;\n    const float cd = 3.0;\n    const float sp = 2.0;\n    float x = cos(t * sp) * cd;\n    float z = sin(t * sp) * cd;\n    \n    vec3 target = vec3(4.5, 4.5, 0);\n    \n    //vec3 cPos = origin + vec3(x, 0, z);\n    vec3 cPos = origin + vec3(1.8, 0, 0);\n    //vec3 cDir = normalize(vec3(m.x, -m.y, -1.0));\n    vec3 cDir = normalize(cPos - target);\n    vec3 cSide = normalize(cross(cDir, vec3(0, 1, 0)));\n    vec3 cUp = normalize(cross(cSide, cDir));\n    \n    float targetDepth = 1.3;\n    \n    vec3 ray = normalize(cSide * p.x + cUp * p.y + cDir * targetDepth);\n    \n    const int maxSteps = 128;\n    \n    float d = 0.0;\n    float depth = 0.0;\n    vec3 pos;\n    \n    vec3 col = skyCol;\n    \n    for (int i = 0; i < maxSteps; i++)\n    {\n        pos = cPos + ray * depth;\n        d = distFunc(pos) * 0.1;\n        \n        if (d <= EPS)\n        {\n           col = TEX(pos).rgb;\n           break;\n        }\n        depth += d;\n    }\n    \n    if (d <= EPS)\n    {\n        vec3 n = getNormal(pos);\n        float diff = dot(n, normalize(lightDir));\n        float fog = 0.7 - exp(-depth * 0.1);\n        col = mix(col, skyCol, fog);\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n//---------------------------------------------------------\n// Mucous_Membrane.glsl  by Antony Holzer\n// version:   v1.0  9/2018  initial release\n// original:  http://glslsandbox.com/e#48575.4 by Catzpaw\n// info:      Something that looks like a mucous membrane...\n// tags:      2d, membrane, mucous, organic, pattern\n//---------------------------------------------------------\n\n#define D 0.6\n\n#define time iTime\n#define R iResolution\n\nfloat wave(vec2 p)\n{\n  float v = sin(p.x + sin(p.y*2.) + sin(p.y * 0.43));\n  return v * v;\n}\n\nconst mat2 rot = mat2(0.5, 0.86, -0.86, 0.5);\n\nfloat map(vec2 p)\n{\n  float v = wave(p);\n  p.x += time * 0.224;  p *= rot;  v += wave(p);\n  p.x += time * 0.333;  p *= rot;  v += wave(p);\n  return abs(1.5 - v);\n}\n\nvec3 Mucous_Membrane (vec2 pos)\n{\n  vec2 uv = (pos * 2.0 - R.xy) / R.y;\n  vec2 mp = iMouse.xy / R.xy;\n  uv.y += mp.y;\n  float zoom = 18.0 - 14.0 * mp.x;\n  vec2 p = normalize(vec3(uv.xy, 2.3)).xy * zoom;\n  p.y += time * 0.2;\n  float v = map(p);\n  vec3 c = mix(vec3(0.3, 0.0, 0.1), vec3(1.0, 0.3 + map(p * 3.5) * 0.6, 0.5), v);\n  vec3 n = normalize(vec3(v - map(vec2(p.x + D, p.y)), v - map(vec2(p.x, p.y + D)), -D));\n  vec3 l = normalize(vec3(0.1, 0.2, -0.5));\n  v = dot(l, n) + pow(dot(l, n), 88.0);\n  c.g *= v*v;\n  return c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec3 color = Mucous_Membrane (gl_FragCoord.xy);\n  color = color * 0.9 +vec3(0.1);   // desaturate a bit\n  fragColor = vec4(color, 1);\n}","name":"Buffer A","description":"","type":"buffer"}]}