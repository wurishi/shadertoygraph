{"ver":"0.1","info":{"id":"DtSfRV","date":"1694211904","viewed":22,"name":"Shader HW 1a - DeathStar","username":"Truckbuchet","description":"Simple. Elegant. Intimidating. Has a cousin named Sauron's Eye","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["deathstar"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//TEnos, Shader HW 1a, 9/8/23\n\n//from https://iquilezles.org/articles/distfunctions/\nfloat sdDeathStar( vec3 p2, float ra, float rb, float d )\n{\n  // sampling independent computations (only depend on shape)\n  float a = (ra*ra - rb*rb + d*d)/(2.0*d);\n  float b = sqrt(max(ra*ra-a*a,0.0));\n\t\n  // sampling dependant computations\n  vec2 p = vec2( p2.x, length(p2.yz) );\n  if( p.x*b-p.y*a > d*max(b-p.y,0.0) )\n    return length(p-vec2(a,b));\n  else\n    return max( (length(p            )-ra),\n               -(length(p-vec2(d,0.0))-rb));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n        \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.x;\n    \n    // Background color\n    vec3 col = vec3(uv.x, 0.0, 0.0);//intimidating colors...\n    \n    //Create Ray\n    //assume orthographic projection\n    vec3 rayPT = vec3(uv.xy, 0);\n    vec3 rayPtx = vec3(uv.x + 0.0001, uv.y, 0);\n    vec3 rayPty = vec3(uv.x, uv.y + 0.0001, 0);\n    vec3 rayDir = vec3(0,0,1);\n    float t = 0.0, tx = 0.0, ty = 0.0;//ray parameter and deathstar parameters\n    \n    //define DEATHSTAR properties\n    float starRadius = 0.15;\n    float deathRadius = 0.15;\n    float dsDiameter = 0.15;\n    vec3 deathstarPos = vec3(0.4, 0.3, 0.0);\n    \n    for(int i = 0; i < 20; i++) {\n        //calculate 3 points along the ray\n        vec3 pos = rayPT + rayDir * t;\n        vec3 posx = rayPtx + rayDir * tx;\n        vec3 posy = rayPty + rayDir * ty;\n        \n        //subtract object position from ray position and check if those points\n        //are in the world origin sphere\n        float dist = sdDeathStar((pos - deathstarPos), deathRadius, starRadius, dsDiameter);\n        float distx = sdDeathStar((posx - deathstarPos), deathRadius, starRadius, dsDiameter);\n        float disty = sdDeathStar((posy - deathstarPos), deathRadius, starRadius, dsDiameter);\n        \n        if(dist < 0.0001) {\n        \n            vec3 lightDir = rayDir;\n            vec3 deathstarCol = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n            \n            col = deathstarCol*dot(-lightDir, normalize(cross(posy - pos, posx - pos)));\n        }\n        \n        col.z = -col.z;//intimidating colors...\n        t = t + dist;\n        tx = tx + distx;\n        ty = ty + disty;\n    }\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}