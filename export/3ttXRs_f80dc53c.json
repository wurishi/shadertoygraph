{"ver":"0.1","info":{"id":"3ttXRs","date":"1581544319","viewed":757,"name":"Sphere shader","username":"rjb361","description":"Class work","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["sphereshader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Sajid's code form modules:\n//None of the code bleow belongs to me\n\n//Ray-Sphere function borrowed from https://www.shadertoy.com/view/ldS3DW\nfloat sphereIntersect(vec3 ray, vec3 dir, vec3 center, float radius)\n{\n vec3 rc = ray-center;\n float c = dot(rc, rc) - (radius*radius);\n float b = dot(dir, rc);\n float d = b*b - c;\n float t = -b - sqrt(abs(d));\n float st = step(0.0, min(t,d));\n return mix(-1.0, t, st);\n}\n\n\n//-------------\n//All units are in mm\nvec3 SphereCenter = vec3(0.0,0.0,10.0);\nfloat SphereRadius = 5.0;\n\nvec3 CameraCenter = vec3(0.0,0.0, -3.0);\nfloat imagePlaneDist = 1.0;\n\nvec3 lightPos = vec3(10.0, 5.0, -1.0);\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n // Normalized pixel coordinates (from 0 to 1)\n vec2 uv = fragCoord/iResolution.xy;\n \n //Center from -1 to 1\n uv = (uv * 2.0) - 1.0;\n \n //fix aspect ratio\n uv.x *= iResolution.x / iResolution.y;\n \n //Ray starts at camera center\n vec3 rayOrigin = CameraCenter;\n //Ray moves towards current pixel on image plane\n vec3 imagePlanePixel = vec3(uv.x,uv.y,CameraCenter.z + imagePlaneDist);\n \n //Calculate ray\n vec3 rayDirection = normalize(imagePlanePixel - rayOrigin);\n\n//Intersect ray with sphere\n float t = sphereIntersect(rayOrigin, rayDirection, SphereCenter, SphereRadius);\n \n //hitpoint\n vec3 hitPoint = rayOrigin + rayDirection * t;\n\nt = clamp(t, 0.0, 1.0);\n\n//Sphere normal is a vector pointing outward from center, to intersection point\nvec3 normal = normalize(hitPoint - SphereCenter);\n//vec3 normal = normalize(SphereCenter - hitPoint);\n\n//The percentage this point is looking towards the light (lamberts law)\nfloat lightLambert = max(dot(normal, normalize(lightPos - hitPoint)) , 0.0); \n\n\n// Output to screen\nvec3 sphereColor = vec3(1.0,0.1,0.1);\n\nfragColor = vec4(sphereColor * t * lightLambert, 1.0);\n}","name":"Image","description":"","type":"image"}]}