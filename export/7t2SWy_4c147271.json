{"ver":"0.1","info":{"id":"7t2SWy","date":"1628681318","viewed":509,"name":"3d grid xz plane","username":"yudemente","description":"3d grid ","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["3d","grid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// analiyically filtering a grid pattern (ie, not using supersampling or mipmapping.\n//\n// based on: https://iquilezles.org/articles/filterableprocedurals\n\n// --- analytically box-filtered grid ---\n\nconst float N = 16.0; // grid ratio\nfloat grid_texture( in vec2 p, in vec2 ddx, in vec2 ddy )\n{\n\t// filter kernel\n    vec2 w = max(abs(ddx), abs(ddy)) + 0.01;\n\n\t// analytic (box) filtering\n    vec2 a = p + 0.5*w;                        \n    vec2 b = p - 0.5*w;           \n    vec2 i = (floor(a)+min(fract(a)*N,1.0)-\n              floor(b)-min(fract(b)*N,1.0))/(N*w);\n    //pattern\n    return (1.0-i.x)*(1.0-i.y);\n}\n\nfloat intersect( vec3 ro, vec3 rd, out vec3 pos, out int matid )\n{\n    // raytrace\n\tfloat tmin = 10000.0;\n\tpos = vec3(0.0);\n    matid = -1;\n\t\n\t// raytrace-plane\n\tfloat h = -ro.y/rd.y;\n\tif(h>0.0){ \n\t\ttmin = h; \n\t\tpos = ro + h*rd;\n\t\tmatid = 0;\n\t}\n\n\treturn tmin;\t\n}\n\nvec2 tex_coord(in vec3 pos, int mid )\n{\n    vec2 matuv;\n    \n    if(mid==0)\n        matuv = pos.xz;\n\n\treturn matuv;\n}\n\nvoid calc_ray_for_pixel( in vec2 pix, out vec3 resRo, out vec3 resRd )\n{\n\tvec2 p = (2.0*pix-iResolution.xy) / iResolution.y;\n\n     // camera movement\t\n\tvec3 ro = vec3(0., 1., 0.);\n    vec3 ta = vec3(0., 0., 10.);\n\t//calcCamera( ro, ta );\n    // camera matrix\n    vec3 ww = normalize(ta - ro);\n    vec3 uu = normalize(cross(ww,vec3(0.0,1.0,0.0)));\n    vec3 vv = normalize(cross(uu,ww));\n\t// create view ray\n\tvec3 rd = normalize( p.x*uu + p.y*vv + 2.0*ww);\n\t\n\tresRo = ro;\n\tresRd = rd;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (-iResolution.xy + 2.0*fragCoord) / iResolution.y;\n    vec4 grid_color = vec4(1., 1., 1., 1.);\n\t    \n\tvec3 ro, rd;\n\tcalc_ray_for_pixel(fragCoord + vec2(0.0,0.0), ro, rd);\n\t\t\n    // trace\n\tvec3 pos;\n    int mid;\n    float t = intersect(ro, rd, pos, mid);\n\n\tvec4 col = vec4(.0);\n\tif( mid!=-1 )\n\t{\n\t\tvec2 uv = tex_coord(pos, mid);\n\n\t\t// calc texture sampling footprint\t\t\n\t\tvec2 ddx_uv = dFdx( uv ); \n        vec2 ddy_uv = dFdy( uv ); \n        \n\t\t// shading\n\t\tfloat a = grid_texture(uv, ddx_uv, ddy_uv);\n        col = a * col + (1. - a) * grid_color;\n\t}\n\n\tfragColor = col;\n}","name":"Image","description":"","type":"image"}]}