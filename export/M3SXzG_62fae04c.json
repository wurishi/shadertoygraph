{"ver":"0.1","info":{"id":"M3SXzG","date":"1710750210","viewed":59,"name":"Simple Mask Shader","username":"tyantowers","description":"A 2D mask-based shader","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d","mask"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void normalizeCoords(in vec2 fragCoord, out vec2 uv, out vec2 uvmax)\n{\n    // Get squared,centralized, normalized coordinates\n    float small = min(iResolution.x, iResolution.y);\n    uv = (fragCoord-iResolution.xy*0.5)/small*2.0;\n    uvmax = iResolution.xy*0.5/small*2.0;\n}\n\nfloat getCircleMask(vec2 uv)\n{\n    return float((uv.x*uv.x + uv.y*uv.y)<0.5);\n}\n\nfloat getSquareMask(vec2 uv)\n{\n    return float(max(abs(uv.x), abs(uv.y))<0.5);\n}\n\nfloat getSquareMask2(vec2 uv)\n{\n    return float(abs(uv.x)+abs(uv.y)<0.5);\n}\n\nfloat getTriangleMask(vec2 uv)\n{\n    float mask = abs(uv.x)+abs(uv.y+0.5);\n    return float(mask<0.8 && uv.y>-0.5);\n}\n\nfloat getHexagonMask(vec2 uv)\n{\n    float mask = abs(uv.x) + abs(uv.y*0.8);\n    return float(mask<0.8 && abs(uv.y)<0.55);\n}\n\nfloat getOctagonMask(vec2 uv)\n{\n    bool straightsquare = max(abs(uv.x), abs(uv.y))<0.5;\n    bool turnedsquare = abs(uv.x)+abs(uv.y)<0.7;\n    return float(straightsquare && turnedsquare);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv, uvmax;\n    normalizeCoords(fragCoord, uv, uvmax);\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n    if (getOctagonMask(uv)==0.0)\n    {\n        fragColor = vec4(1.0);\n    }\n\n}","name":"Image","description":"","type":"image"}]}