{"ver":"0.1","info":{"id":"Ml2SWh","date":"1443385215","viewed":223,"name":"Zebra","username":"eddietree","description":"learning some raymarching","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["raymarch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"// a study on raymarching, soft-shadows, ao, etc\n// borrowed heavy from others, esp @cabbibo and @iquilezles and more\n// by @eddietree\n\nconst float MAX_TRACE_DISTANCE = 10.0;\nconst float INTERSECTION_PRECISION = 0.001;\nconst int NUM_OF_TRACE_STEPS = 90;\n\n\nvec3 projOnPlane( vec3 pos, vec3 planePt , vec3 normal){\n    \n    return pos - dot(pos - planePt, normal) * normal;\n}\n\n// Taken from https://www.shadertoy.com/view/4ts3z2\nfloat tri(in float x){return abs(fract(x)-.5);}\nvec3 tri3(in vec3 p){return vec3( tri(p.z+tri(p.y*1.)), tri(p.z+tri(p.x*1.)), tri(p.y+tri(p.x*1.)));}\n\nfloat triNoise3D(vec3 p, float spd)\n{\n    float z=10.4;\n\tfloat rz = 0.;\n    vec3 bp = p;\n\tfor (float i=0.; i<=3.; i++ )\n\t{\n        vec3 dg = tri3(bp*2.);\n        p += (dg+iTime*.1*spd);\n\n        bp *= 1.8;\n\t\tz *= 1.5;\n\t\tp *= 1.2;\n        //p.xz*= m2;\n        \n        rz+= (tri(p.z+tri(p.x+tri(p.y))))/z;\n        bp += 0.14;\n\t}\n\treturn rz;\n}\n\nvec3 hsv(float h, float s, float v)\n{\n  return mix( vec3( 1.0 ), clamp( ( abs( fract(\n    h + vec3( 3.0, 2.0, 1.0 ) / 3.0 ) * 6.0 - 3.0 ) - 1.0 ), 0.0, 1.0 ), s ) * v;\n}\n\nvoid buildBasis( in vec3 dir , in vec3 up , out vec3 x , out vec3 y , out vec3 z ){\n    \n\n //vec3( 0. , 1. , 0. );\n  //vec3  upVector = normalize( centerOfCircle );// vec3( 0. , 1. , 0. );\n  float upVectorProj = dot( up , dir );\n  vec3  upVectorPara = upVectorProj * dir;\n  vec3  upVectorPerp = up - upVectorPara;\n\n  vec3 basisX = normalize( upVectorPerp );\n  vec3 basisY = cross( dir , basisX );\n    \n    \n  x = basisX;\n  y = basisY;\n  z = dir;\n}\n\n\nfloat udBox( vec3 p, vec3 b )\n{\n  return length(max(abs(p)-b,0.0));\n}\n\n\nfloat udRoundBox( vec3 p, vec3 b, float r )\n{\n  return length(max(abs(p)-b,0.0))-r;\n}\n\nfloat distSphere(vec3 p, float radius) {\n    return length(p) - radius;\n}\n\n\nfloat sdPlane( vec3 p, vec4 n )\n{\n  // n must be normalized\n  return dot(p,n.xyz) + n.w;\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xy)-t.x,p.z);\n  return length(q)-t.y;\n}\n\n\n\n//----\n// Camera Stuffs\n//----\nmat3 calcLookAtMatrix( in vec3 ro, in vec3 ta, in float roll )\n{\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(sin(roll),cos(roll),0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    return mat3( uu, vv, ww );\n}\n\nvoid doCamera( out vec3 camPos, out vec3 camTar, in float time, in float mouseX )\n{\n    float an = 0.3 + 10.0*mouseX + iTime*0.3;\n\tcamPos = vec3(3.5*sin(an),1.5,3.5*cos(an));\n    camTar = vec3(0.0,0.0,0.0);\n}\n\n// ROTATION FUNCTIONS TAKEN FROM\n//https://www.shadertoy.com/view/XsSSzG\nmat3 xrotate(float t) {\n\treturn mat3(1.0, 0.0, 0.0,\n                0.0, cos(t), -sin(t),\n                0.0, sin(t), cos(t));\n}\n\nmat3 yrotate(float t) {\n\treturn mat3(cos(t), 0.0, -sin(t),\n                0.0, 1.0, 0.0,\n                sin(t), 0.0, cos(t));\n}\n\nmat3 zrotate(float t) {\n    return mat3(cos(t), -sin(t), 0.0,\n                sin(t), cos(t), 0.0,\n                0.0, 0.0, 1.0);\n}\n\n\nfloat opRep( vec3 p, vec3 c )\n{\n    vec3 q = mod(p,c)-0.5*c;\n    return sdTorus( q, vec2(1.0,0.1) );\n}\n\nfloat smin( float a, float b, float k )\n{\n    float res = exp( -k*a ) + exp( -k*b );\n    return -log( res )/k;\n}\n\nfloat opS( float d1, float d2 )\n{\n    return max(-d1,d2);\n}\n\nfloat opU( float d1, float d2 )\n{\n    return min(d1,d2);\n}\n\nmat3 fullRotate( vec3 r ){\n \n   return xrotate( r.x ) * yrotate( r.y ) * zrotate( r.z );\n    \n}\n\nfloat rotatedBox( vec3 p , vec3 rot , vec3 size , float rad ){\n    \n    vec3 q = fullRotate( rot ) * p;\n    return udRoundBox( q , size , rad );\n    \n    \n}\n\n\n\n// checks to see which intersection is closer\n// and makes the y of the vec2 be the proper id\nvec2 opU( vec2 d1, vec2 d2 ){\n\treturn (d1.x<d2.x) ? d1 : d2; \n}\n\nfloat opI( float d1, float d2 )\n{\n    return max(d1,d2);\n}\n\n//--------------------------------\n// Modelling \n//--------------------------------\nvec2 map( vec3 pos ){  \n   \n    // using super thin cube as plane\n    vec3 size = vec3( 5.0, .1 , 5.0 );\n   // vec3 rot = vec3( iTime * .1 , iTime * .4 , -iTime * .3 );\n    vec3 rot = vec3( 0.,0.,0. );\n    \n   \tvec2 res = vec2( 1.0, 1.0 );\n    \n    float sphere = distSphere(pos, 0.25);\n    float box = rotatedBox( pos - vec3(0.0,-0.5,0.0), rot , size , .001 );\n    //float plane = sdPlane( pos, vec4(1.0,0.0,0.0, 3.0) );\n   // box = min(box,plane);\n    \n    //res = vec2( smin( box, sphere, 32.0), 1.0 );\n    \n    \n    //vec3 trioffset = vec3(triNoise3D(pos*0.1, 2.0));\n    //float t1 = opRep(pos, vec3(2.0));\n    \n     float t1 = sdTorus( pos, vec2(1.0,0.55 + 0.1*sin(iTime*0.3)) );\n    \n    float t2 = sdTorus( pos + vec3(0.0,cos(iTime*1.0)*0.4 - 0.1,sin(iTime*3.0)*0.4), vec2(0.7,0.55 + 0.1*sin(iTime*0.3)) );\n\tt1 = smin(t1,t2,5.0);\n    \n    for ( int i = 0; i < 5; i++ )\n    {\n        vec3 posOffset = vec3(\n            1.0*sin(iTime*0.3 + float(i)), \n            0.5*sin(float(i) + iTime), \n            0.5*cos( iTime * (0.3+float(i)*0.5))\n          );\n        \n        vec2 torusSize = vec2( \n            0.6 + sin(iTime*float(i)*0.3)*0.1, \n            0.5 + cos(iTime*float(i))*0.2\n           );\n        \n        float currT = sdTorus( pos + posOffset, torusSize );\n        \n        t1 = opS( currT,t1 );\n    }\n    \n    \n    //t1 = min( sphere, t1 );\n    t1 = smin( box, t1, 5.0 );\n    //t1 = box;\n   \n    res.x = t1;\n    \n   \t\n    \n\n   \treturn res;\n    \n}\n\n\nfloat shadow( in vec3 ro, in vec3 rd )\n{\n    const float k = 2.0;\n    \n    const int maxSteps = 50;\n    float t = 0.0;\n    float res = 1.0;\n    \n    for(int i = 0; i < maxSteps; ++i) {\n        \n        float d = map(ro + rd*t).x;\n            \n        if(d < INTERSECTION_PRECISION) {\n            \n            return 0.0;\n        }\n        \n        res = min( res, k*d/t );\n        t += d;\n    }\n    \n    return res;\n}\n\n\nfloat ambientOcclusion( in vec3 ro, in vec3 rd )\n{\n    const int maxSteps = 7;\n    const float stepSize = 0.05;\n    \n    float t = 0.0;\n    float res = 0.0;\n    \n    // starting d\n    float d0 = map(ro).x;\n    \n    for(int i = 0; i < maxSteps; ++i) {\n        \n        float d = map(ro + rd*t).x;\n\t\tfloat diff = max(d-d0, 0.0);\n        \n        res += diff;\n        \n        t += stepSize;\n    }\n    \n    return res;\n}\n\n// Calculates the normal by taking a very small distance,\n// remapping the function, and getting normal for that\nvec3 calcNormal( in vec3 pos ){\n    \n\tvec3 eps = vec3( 0.001, 0.0, 0.0 );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\n\nbool renderRayMarch(vec3 rayOrigin, vec3 rayDirection, inout vec3 color ) {\n    const int maxSteps = NUM_OF_TRACE_STEPS;\n        \n    float t = 0.0;\n    float d = 0.0;\n    \n    vec3 lightDir = normalize(vec3(1.0,0.4,0.0));\n    \n    for(int i = 0; i < maxSteps; ++i) \n    {\n        vec3 currPos = rayOrigin + rayDirection * t;\n        d = map(currPos).x;\n        \n        if(d < INTERSECTION_PRECISION) \n        {\n            break;\n        }\n        \n        t += d;\n    }\n    \n    if(d < INTERSECTION_PRECISION) \n    {\n        vec3 currPos = rayOrigin + rayDirection * t;    \n        vec3 normal = calcNormal( currPos ) ;;\n            float shadowVal = shadow( currPos - rayDirection* 0.01, lightDir  );\n        float ao = ambientOcclusion( currPos - normal*0.01, normal );\n\n        float ndotl = abs(dot( -rayDirection, normal ));\n        float rim = pow(1.0-ndotl, 1.5);\n        //color = hsv( rim*30.0+0.1, 2.0, 1.0);\n        //color = vec3(rim);\n\n        color = vec3( step( 0.5, sin(currPos.y*20.0 )) );\n        color += vec3(rim);\n        //color = normal;\n        color *= vec3(mix(0.2,1.0,shadowVal));\n        color *= vec3(mix(0.3,1.0,ao));\n\n        return true;\n    }\n    \n    return false;\n        \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (-iResolution.xy + 2.0*fragCoord.xy)/iResolution.y;\n    vec2 m = iMouse.xy/iResolution.xy;\n    \n    // camera movement\n    vec3 ro, ta;\n    doCamera( ro, ta, iTime, m.x );\n\n    // camera matrix\n    mat3 camMat = calcLookAtMatrix( ro, ta, 0.0 );  // 0.0 is the camera roll\n    \n\t// create view ray\n\tvec3 rd = normalize( camMat * vec3(p.xy,2.0) ); // 2.0 is the lens length\n    \n    // calc color\n    vec3 col = vec3(0.75);\n    renderRayMarch( ro, rd, col );\n    \n    fragColor = vec4( col , 1. );\n    \n}","name":"","description":"","type":"image"}]}