{"ver":"0.1","info":{"id":"ds33Rs","date":"1677779303","viewed":302,"name":"Animated Blue Noise + Fourier","username":"0beqz","description":"Method: PCG RNG\nPress \"Q\" for Golden Ratio animating, press \"W\" for Modulo animating\nMode: Green (PCG RNG), Yellow (Modulo), Red (Golden Ratio)\n\nPCG RNG source: https://www.shadertoy.com/view/wltcRS\n\nDFT source: https://www.shadertoy.com/view/4dGGz1","likes":7,"published":3,"flags":48,"usePreview":0,"tags":["fourier","bluenoise","dft","rng"],"hasliked":0,"parentid":"wltcRS","parentname":"RNG utilities"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec4 noise = texture(iChannel1, uv);\n    vec4 fourier = texture(iChannel2, uv);\n    \n    fragColor = uv.x > width ? vec4((fourier.rg), 0., 0.) : noise;\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// internal RNG state\nuvec4 s1;\nivec2 pixel;\n\nvoid rng_initialize(vec2 p, int frame) {\n    pixel = ivec2(p);\n\n    // blue noise seed\n    s1 = uvec4(frame, frame * 15843, frame * 31 + 4566, frame * 2345 + 58585);\n}\n\n// https://www.pcg-random.org/\nvoid pcg4d(inout uvec4 v) {\n    v = v * 1664525u + 1013904223u;\n    v.x += v.y * v.w;\n    v.y += v.z * v.x;\n    v.z += v.x * v.y;\n    v.w += v.y * v.z;\n    v = v ^ (v >> 16u);\n    v.x += v.y * v.w;\n    v.y += v.z * v.x;\n    v.z += v.x * v.y;\n    v.w += v.y * v.z;\n}\n\n// random blue noise sampling pos\nivec2 shift2(ivec2 size) {\n    pcg4d(s1);\n    return (pixel + ivec2(s1.xy % 0x0fffffffu)) % size;\n}\n\nconst float width = 0.5;\n\n#define KEY_Q 81\n#define KEY_W 87","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float gr = 1.618033988749895; // golden ratio\nconst float pn = 1.3247179572447458; // plastic number\nconst vec2 harmoniousNumbers12 = vec2(gr, pn);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    if(uv.x > width) discard;\n    \n    vec2 blueNoise;\n    \n    bool goldenRatio = texelFetch( iChannel1, ivec2(KEY_Q, 2),0 ).x > 0.0;\n    bool useMod = texelFetch( iChannel1, ivec2(KEY_W, 2), 0).x > 0.0;\n    \n    ivec2 blueNoiseSize = textureSize(iChannel0, 0);\n    \n    if(goldenRatio){\n        blueNoise = texelFetch(iChannel0, ivec2(fragCoord) % blueNoiseSize, 0).rg;\n        blueNoise = fract(blueNoise + harmoniousNumbers12 * float(iFrame));\n        blueNoise.r = (blueNoise.r > 0.5 ? 1.0 - blueNoise.r : blueNoise.r) * 2.0;\n        blueNoise.g = (blueNoise.g > 0.5 ? 1.0 - blueNoise.g : blueNoise.g) * 2.0;\n    }else{\n        rng_initialize(fragCoord, iFrame);\n        blueNoise = texelFetch(iChannel0, shift2(blueNoiseSize), 0).rg;\n        \n        ivec2 p = ivec2(fragCoord);\n\n        p = (p+iFrame*ivec2(113,127)) & 1023;\n        \n        if(useMod) blueNoise = texelFetch(iChannel0, p, 0).rg;\n    }\n    \n    fragColor = vec4(blueNoise.rg, 0., 0.);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// invFourier transform \n\n// Horizontal + Vertical Discrete Fourier Transform of the input \n// 2 passes pipelined : in -> buf.zw -> buf.xy -> out\n// ( adapted from  Flyguy's https://www.shadertoy.com/view/MscGWS# )\n\n\n#define SIZE (iResolution.x/2.) //Size must be changed in each tab.\n\n//#define tex(ch,x,y) texture(ch, vec2(x,y)/iResolution.xy )\n#define tex(ch,x,y)  texelFetch(ch, ivec2(x,y), 0)\n\nvec2 cmul (vec2 a,float b) { return mat2(a,-a.y,a.x)*vec2(cos(b), sin(b)); } // complex a*exp(i.b)\n#define W(uv)   mod(uv+SIZE/2.,SIZE)                    // wrap [-1/2,1/2] to [0,1]\n\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    vec2 uv = U.xy / iResolution.xy;\n    if(uv.x < width) discard;\n    \n    O-=O; \n    for(float n = 0.; n < 1000.; n++)  {\n        if (n>=SIZE) break;\n        float m = W(n);       // W to warp 0,0 to mid-window.\n        vec2 xn = tex(iChannel0, m+.5, U.y).xy,\n             yn = tex(iChannel1, U.x, m+.5).zw,\n             a =  6.2831853 *  W(U-.5) * n/SIZE;\n        \n        O.zw += cmul(xn, a.x);\n        O.xy += cmul(yn, a.y);\n    }\n    \n    O.zw /= SIZE;\n    \n    vec2 a = vec2(1.) * (iResolution.x / iResolution.y);\n    \n    float d = distance(U, vec2(0.95, 0.05) * iResolution.xy);\n    if(d < 8.){\n        bool goldenRatio = texelFetch( iChannel2, ivec2(KEY_Q, 2),0 ).x > 0.0;\n        bool useMod = texelFetch( iChannel2, ivec2(KEY_W, 2), 0).x > 0.0;\n    \n        if(goldenRatio){\n            O.xy = vec2(1., 0.);\n        }else if(useMod){\n            O.xy = vec2(1., 1.);\n        }else{\n            O.xy = vec2(0., 1.);\n        }\n    }\n}","name":"Buffer B","description":"","type":"buffer"}]}