{"ver":"0.1","info":{"id":"sstGW7","date":"1629991918","viewed":76,"name":"animating mandelbrot set","username":"shouya","description":"The mandelbrot set.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["fractal","math"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float iter_max = 32.0;\nfloat bound = 50.0;\n\nvec2 iter(in vec2 z, in vec2 c) {\n  return vec2(z.x*z.x-z.y*z.y, 2.0*z.x*z.y) + c;\n}\n\nvec2 screenToClip(vec2 coord) {\n    vec2 uv = coord/iResolution.xy;\n    return (uv - vec2(0.6,0.5)) / (iResolution.yx / 3000.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 c = screenToClip(fragCoord);\n    vec2 z = vec2(0.0) + vec2(cos(iTime*0.3), sin(iTime*.2));\n\n    for (int n = 0; float(n) < iter_max; n++) {\n      z = iter(z, c);\n      if (length(z) > bound) {\n        fragColor = 1.0-vec4(float(n) / float(iter_max));\n        return;\n      }\n    }\n    \n    fragColor = vec4(1.0-abs(z), length(z), 1.0);\n}\n","name":"Image","description":"","type":"image"}]}