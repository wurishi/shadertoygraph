{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"//Based on https://www.shadertoy.com/view/MdXSD8\n\n#define SPHERE_SIZE 3.0\n#define NO_HIT_ID -1\n#define LIGHT_ID -2\n\n//Light setup\nvec3 light = vec3(0, 0.0, 25.0);\n\n//Functions \n\nmat4 rotateY(float theta) {\n\tfloat cosTheta = cos(theta);\n\tfloat sinTheta = sin(theta);\n\treturn mat4(cosTheta, 0.0, sinTheta, 0.0,\n\t\t\t\t0.0, 1.0, 0.0, 0.0,\n\t\t\t\t-sinTheta, 0.0, cosTheta, 0.0,\n\t\t\t\t0.0, 0.0, 0.0, 1.0);\n}\n\nvec2 iSphere(in vec3 rayOrigin, in vec3 rayDirection, in vec4 sph) {\n\t//sphere at origin has equation |xyz| = r\n\t//so |xyz|^2 = r^2.\n\t//Since |xyz| = rayOrigin + t*rayDirection (where t is the distance to move along the ray),\n\t//we have rayOrigin^2 + 2*rayOrigin*t*rayDirection + t^2 - r^2. This is a quadratic equation, so:\n\tvec3 oc = rayOrigin - sph.xyz; //distance ray origin - sphere center\n\t\n\tfloat b = dot(oc, rayDirection);\n\tfloat c = dot(oc, oc) - sph.w * sph.w; //sph.w is radius\n\tfloat h = b*b - c; //Commonly known as delta. The term a is 1 so is not included.\n\t\n\tvec2 t;\n\tif(h < 0.0) \n\t\tt = vec2(-1.0);\n\telse  {\n\t\tfloat sqrtH = sqrt(h);\n\t\tt.x = (-b - sqrtH); //Again a = 1.\n\t\tt.y = (-b + sqrtH);\n\t}\n\treturn t;\n}\n\n//Get sphere normal.\nvec3 nSphere(in vec3 pos, in vec4 sph ) {\n\treturn normalize((pos - sph.xyz)/sph.w);\n}\n\nint intersect(in vec3 rayOrigin, in vec3 rayDirection, out vec2 resT, out vec4 sph) {\n\tresT = vec2(1000.0);\n\tint hitId = NO_HIT_ID;\n\tint sphId = hitId;\n\tmat4 rotationAngle = rotateY(-0.1 * iTime);\n\t\n\t//check against spheres in the scene\n\tfor (float x = -20.0; x <= 20.0; x += 10.0) {\n\t\tfor (float y = -20.0; y <= 20.0; y += 10.0) {\n\t\t\tfor (float z = -20.0; z <= 20.0; z += 10.0) {\n\t\t\t\tvec3 pos = vec3(x, y, z);\n\t\t\t\tsphId += 1;\n\t\t\t\tvec4 posSph = vec4(pos, 1.0);\n\t\t\t\tposSph = rotationAngle * posSph;\n\t\t\t\tvec4 sphTry = vec4(posSph.x + 0.5*posSph.x*sin(0.3*iTime), \n\t\t\t\t\t\t\t\t   posSph.y + 0.25*posSph.y*sin(0.4*iTime),\n\t\t\t\t\t\t\t\t   posSph.z + 0.25*posSph.z*sin(0.5*iTime),\n\t\t\t\t\t\t\t\t   SPHERE_SIZE);\n\t\t\t\tvec2 tsph = iSphere(rayOrigin, rayDirection, sphTry);\n\t\t\t\tif(tsph.x > 0.0 && resT.y > tsph.x) {\n\t\t\t\t\tsph = sphTry;\n\t\t\t\t\tresT = tsph;\n\t\t\t\t\thitId = sphId;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t//check against the light\n\tvec4 lightSph = vec4(light, 0.5);\n\tvec2 tsph = iSphere(rayOrigin, rayDirection, lightSph);\n\tif (tsph.x > 0.0 && resT.y > tsph.x) {\n\t\tsph = lightSph;\n\t\tresT = tsph;\n\t\thitId = LIGHT_ID;\n\t}\n\treturn hitId;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\t//pixel coordinates from 0 to 1\n\tfloat aspectRatio = iResolution.x/iResolution.y;\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\t\n\t//generate a ray with origin ro and direction rd\n\tvec3 rayOrigin = vec3(0.0, 0.0, 40.0);\n\tvec3 rayDirection = normalize(vec3( (-1.0+2.0*uv) * vec2(aspectRatio, 1.0), -1.0));\n\t\n\tmat4 rotY = rotateY(iTime);\n\tlight.y += 10.0*sin(iTime);\n\tlight = (vec4(light, 1.0) * rotY).xyz;\n\n\t//intersect the ray with scene\n\tvec2 t;\n\tvec4 sphHit;\n\tint id = intersect(rayOrigin, rayDirection, t, sphHit);\n\t\n\tvec3 color;\n\t//If we hit a sphere\n\tif(id >= 0)\n\t{\n\t\t//find the point where we hit the sphere and evaluate luminance\n\t\tvec3 pos = rayOrigin + t.x*rayDirection;\n\t\tvec3 nor = nSphere(pos, sphHit);\n\t\tfloat dif = clamp(dot(nor, normalize(light-pos)), 0.0, 1.0);\n\t\t\n\t\t//check to see if this point is in shadow\n\t\tvec2 shadowT;\n\t\tvec4 shadowHit;\n\t\t//check for intersect between the sphere and the light\n\t\tint shadowId = intersect(pos, normalize(light-pos), shadowT, shadowHit);\n\t\t\n\t\t//if we have a non-negative id, we've hit something other than the light\n\t\tif (shadowId >= 0) {\n\t\t\tcolor = vec3(0.0);\n\t\t}\n        else {\n            color = vec3(dif);\n        }\n\t}\n\t//If we hit the light\n\telse if (id == LIGHT_ID) {\n\t\tcolor = vec3(1.0);\n\t}\n    else {\n        color = vec3(0.1);\n    }\n\t\n\tfragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XsXXDM","date":"1401856196","viewed":614,"name":"Light and Shadow","username":"slade","description":"Basic ray cast shadows on a bunch of spheres.","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["ray","basic","shadow","light","sphere","cast"],"hasliked":0,"parentid":"","parentname":""}}