{"ver":"0.1","info":{"id":"dssyzf","date":"1687098843","viewed":163,"name":"Quiver Plot","username":"gehtsiegarnixan","description":"I made my own naive implementation of a simple quiver plot to visualize vector fields. It should be pretty competetive with the other implementations since it does not use ifs and it appears to be more robust and harder to breake. Feel free to use it. ","likes":4,"published":3,"flags":0,"usePreview":0,"tags":["flow","arrow","quiverplot","vectorfield"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","previewfilepath":"/media/ap/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* \nMy Own Quiver Plot Implementation\nA simple and performant quiver plot to visualize vector fields.\nFeel free to use it and enjoy the power of vector visualization! :D\n*/\n\nvec2 rotateUV(vec2 uv, vec2 direction)\n{\n    // Normalize the direction vector\n    direction = normalize(direction);\n\n    // Calculate the rotation matrix\n    mat2 rotationMatrix = mat2(\n        direction.x, -direction.y,\n        direction.y, direction.x\n    );\n\n    // Rotate the UV coordinates\n    return rotationMatrix * uv;\n}\n\nfloat quiverPlot(vec2 uv, vec2 direction, float gridSize)\n{\n    float lineThickness = 0.03;    // Thickness of the arrow line\n    float tipSteepness = 3.0;      // Controls the angle of the arrow tip\n\n    float maxSize = 0.9;           // Maximum arrow length (1 should be the max)\n    float minSize = 0.25;           // Minimum arrow length\n\n    // break UV coordinates into grid sections\n    uv = fract(uv * gridSize) - 0.5;\n        \n    // scale point size with vector length\n    float vectorLen = length(direction); \n    float size = mix(minSize, maxSize, clamp(vectorLen, 0.0, 1.0));\n    uv /= size;\n\n    // Rotate UV coordinates based on the direction vector\n    uv = rotateUV(uv, direction);\n\n    // absolute position\n    float absV = abs(uv.y);\n\n    // Calculate center line of the arrow shape\n    float lineOffset = tipSteepness * lineThickness; // offset so lines doesn't go over the tip\n    float line = max(absV, abs(uv.x + lineOffset) - 0.5 + lineOffset);\n\n    // Caculation of the Arror Tip\n    float tip = max(abs((uv.x / tipSteepness) + absV - (0.5 / tipSteepness) + lineThickness), -uv.x + 0.1);\n\n    // Combine line and tip to create the arrow shape\n    float arrow = min(tip, line) - lineThickness;\n\n    // Create a mask based on the arrow shape\n    //return step(arrow, 0.0); // no AA\n    float blur = (gridSize * 1.0)/(size * iResolution.y);\n    return  smoothstep(blur, -blur, arrow) ; // cheap AA\n}\n\n// loads noise texture and turns it into flowmap\nvec2 flowTex(vec2 uv) {\n    //a random spot in the noise map, normally you use an actual flowmap\n    vec4 tex = texture(iChannel1, (uv + vec2(0.8,1.0))*0.05); \n    vec2 flowMap = tex.xy;\n    float mask = clamp(2.2-pow(length(uv),2.0), 0.0, 1.0);\n    return (flowMap-.5)*2. * mask; // constant bias scale for -1 to 1 range\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Center screen coords \n    vec2 uv = (fragCoord.xy-(0.5*iResolution.xy))/iResolution.y; \n    \n    float myTime = iTime * 0.1; // slowed down time\n    vec2 flowUV = uv + vec2(cos(myTime),sin(myTime)); //rotating center\n    float spread = mix(4.0, 3.0, sin(0.25*iTime)); //changing donut size\n    \n    // Making flowmap\n    vec2 flowMap = flowTex(flowUV);\n    \n    // Making quiverplot\n    // number of subdivisions for the sampling of the flowmap\n    float gridSize = 15.0; \n    float arrows = 1.0 - quiverPlot(uv, flowMap, gridSize);\n    \n    // Shift flowmap into visible range\n    vec4 viewFlowMap = vec4(flowMap*0.5+0.5,0.5,1.0);\n\n    // Output to screen\n    fragColor = vec4(viewFlowMap * arrows);\n}","name":"Image","description":"","type":"image"}]}