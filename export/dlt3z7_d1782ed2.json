{"ver":"0.1","info":{"id":"dlt3z7","date":"1682178996","viewed":98,"name":"deathray shader 2","username":"smhmyhead","description":"real","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["real"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n        \n        float pulseRate = 100.; // increase for slower\n        \n        float sineOscillation = sin(iTime / pulseRate - 3. * uv.y);\n        float distanceFromCentre = abs(uv.x - 0.5);\n        \n        // small pinch at bottom\n\n        // Calculate the opacity of the point using an exponential function to make the opacity decrease drastically.\n        // A sine is used to vary the exponent to produce a pulsing effect.\n        \n        float minthick = 7.;\n        float maxthick = 12.;\n        \n        float thickness = 7.;\n        \n        if (uv.y > 0.9) //bottom of screen is 1\n        { //fix this lmao\n            thickness = mix(minthick, maxthick, (uv.y - 0.9) * 10.);\n        }\n        \n        float opacity = pow(1. - distanceFromCentre, sineOscillation + thickness);\n    \n        // Adjust red and white values to achieve the desired effect.\n    \n        //float red =  7. * pow(4., uv.x);\n        //float white = 1. - pow(5. * sin(uv.x) + 15., abs(uv.x - 0.5));\n        \n        float red = 2.5 - distanceFromCentre;\n        float white = 0.15 * sineOscillation + 0.8 - distanceFromCentre * 2.;\n        \n        float scrollSpeed = -0.1;\n        \n        vec2 noiseCoord = uv + vec2(0, iTime * scrollSpeed);\n        \n        vec4 final = vec4(red, white, white, 1) +  (0.5 - distanceFromCentre) * texture(iChannel0, noiseCoord);     \n        fragColor = final * opacity;\n\n}","name":"Image","description":"","type":"image"}]}