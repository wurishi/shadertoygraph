{"ver":"0.1","info":{"id":"4tlfDM","date":"1512080901","viewed":393,"name":"liquid spinner","username":"laserdog","description":"classic windows spinner in 3d with smooth min","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float pi = 3.14159;\nconst float tau = 6.28318; \nconst float epsilon = .0001;\n\nvec3 translate(vec3 p, vec3 amount) \n{\n    return p - amount;\n}\n\nfloat sphereSDF(vec3 p, float size)\n{\n    return length(p) - size;\n}\n\n// iq's smooth min\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat mergeSDF(float d1, float d2, float k)\n{\n\treturn smin(d1, d2, k);\n}\n\nfloat sceneSDF(vec3 p)\n{\n    const float secondsPerCycle = 1.5;\n    const float secondsBetweenBalls = .06;\n    const float radius = 3.85;\n    float res = 2.;\n    \n    vec3 pos = p;\n    \n    for (float i = 0.; i < 5.; i++) {\n    \tfloat x = i * secondsBetweenBalls + iTime / secondsPerCycle;\n    \tfloat angle = tau * x + pi / 6. - 3.5/ tau * sin(tau * x);\n    \tpos = translate(p, vec3(sin(angle) * radius, cos(angle) * radius, 0.));\n        res = mergeSDF(res, sphereSDF(pos, .4), 1.2);\n    }\n    return res;\n}\n\nvec3 gradient(vec3 p)\n{\n\tconst vec3 dx = vec3(epsilon, 0., 0.);\n    const vec3 dy = vec3(0., epsilon, 0.);\n    const vec3 dz = vec3(0., 0., epsilon);\n    \n    return normalize(vec3(\n    \tsceneSDF(p + dx) - sceneSDF(p - dx),\n        sceneSDF(p + dy) - sceneSDF(p - dy),\n        sceneSDF(p + dz) - sceneSDF(p - dz)\n    ));\n}\n\nvec3 phong(vec3 p, vec3 view, vec3 light)\n{\n\tconst vec3 diffuseColor = vec3(1., .5, 0.);\n    const vec3 specularColor = vec3(1., 1., 1.) ;\n    const vec3 ambientColor = vec3(1., .5, 0.);\n    const float ambientStrength = .5;\n    const float glossiness = 16.;\n    \n    vec3 normal = gradient(p);\n    vec3 diffuse = max(0., dot(normal, light)) * diffuseColor;\n    vec3 specular = pow(max(0., dot(view, reflect(-light, normal))), glossiness) * specularColor;\n    vec3 ambient = ambientStrength * ambientColor;\n    \n    return diffuse + specular + ambient;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2. * fragCoord - iResolution.xy) / iResolution.y;\n    vec3 eye = vec3(0., 0., 5.);\n    vec3 light = vec3(0., 2., 2.);\n    vec3 dir = normalize(vec3(uv, -1.));\n    \n    // march\n    vec3 pos = eye;\n    float dist = 0.;\n    for (int i = 0; i < 70; i++) \n    {\n        dist = sceneSDF(pos);\n        pos += dist * dir;\n    }\n    \n\tfragColor = vec4(0.);\n    \n    if (dist < epsilon)\n    {\n        fragColor.rgb = phong(pos, normalize(eye - pos), normalize(light - pos));\n    }\n}","name":"Image","description":"","type":"image"}]}