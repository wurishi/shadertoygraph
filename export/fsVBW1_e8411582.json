{"ver":"0.1","info":{"id":"fsVBW1","date":"1658102026","viewed":123,"name":"Esfera ","username":"invivel","description":" My first Ray Marching","likes":2,"published":1,"flags":0,"usePreview":0,"tags":[],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 triangleWave(vec3 t) {\n    return vec3(abs(mod(t, 2.0) - 1.0));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.0*(fragCoord)-iResolution.xy)/iResolution.y;\n    vec2 ms = ((iMouse.xy)-iResolution.xy)/iResolution.y;\n\n    //uv *= 0.8;\n\n    vec3 cam = vec3(0.0, -1.0, 0.0);\n    vec2 pov = ms + 0.5;\n    vec3 vrd = vec3(0.0, 0.0, 0.0);\n    vec3 col = vec3(0.0, 0.0, 0.1);\n    vrd = cam;\n\n    for(int i = 0; i < 70; i++) {    \n        vec3 sphere = vec3(\n            vrd.x + sin(iTime) * 0.3,\n            vrd.y + cos(iTime) * 0.3,\n            vrd.z + sin(iTime * 4.0) * 0.2\n        );\n\n        float scene = min(vrd.z + 0.5, length(sphere) - 0.4);\n        \n        vec3 rayDirection = vec3(sin(uv.x), cos(uv.x) * cos(uv.y), sin(uv.y));\n        \n        vec3 rotateY = vec3(\n            rayDirection.x,\n            rayDirection.y * cos(pov.y) + rayDirection.z * sin(pov.y),\n            rayDirection.z * cos(pov.y) - rayDirection.y * sin(pov.y)\n        );\n        \n        vec3 rotateX = vec3(\n            rotateY.x * cos(pov.x) + rayDirection.y * sin(pov.x),\n            rotateY.y * cos(pov.x) - rayDirection.x * sin(pov.x),\n            rotateY.z\n        );\n        \n        vrd += rotateX * scene;\n        \n        if(scene < 0.01) {\n            col = triangleWave(vrd);\n            col *= 1.0 / length(sphere);\n        };\n        \n        if(length(vrd - cam) > 16.0) {\n            break;\n        };\n    }\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}