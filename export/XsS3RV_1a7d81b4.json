{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"#define NB_ITER 36\n#define TAO 6.28\n#define MAX_DIST 50.\n#define PRECISION .03\n#define PI 3.14159265359\n\n//#define ANAGLYPH\n\n#ifdef ANAGLYPH\n   #define KALEIDO 4\n#else\n   #define KALEIDO 5\n   #define ANTIALIASING\n#endif\n\nconst float AA = 3.; // Anti-Aliasing Level\n\nconst vec2 V01 = vec2(0,1);\nconst vec2 Ve = V01.yx*.001;\nvec3 L = normalize(vec3(10.25,.33,-.7));\nfloat CA, SA, CB,SB, CA3, CA4;\n\t\nfloat Kaleido(inout vec2 v){\n\tfloat id = floor(.5+atan(v.x,-v.y)*24./TAO);\n\tfloat a = id*TAO/24.;\n//\tfloat ca = cos(a), sa = sin(a);\n//\tv *= mat2(ca,sa,-sa,ca);\n    v = cos(a)*v + sin(a)*vec2(v.y, -v.x);\n\treturn id;\n}\n\nvec2 Kaleido2(inout vec3 p, in float d) {\n\tp.z+=d;\t\n\treturn vec2(Kaleido(p.yx), Kaleido(p.xz));\n}\n\nvec4 DE(vec3 z) {\n\tfloat d = min(-z.z+1.+CA3, -z.x+1.+CA3);\n\tfloat k=1., scale = 2.+ .8*CA4;\n\tmat2 m2 = mat2(CB,SB,-SB,CB);\n\tvec2 id;\n\tfloat dd = 2.; //1.+.5*CA4;\n\tz.z-=dd*scale;\n\tfor(int i=0;i<KALEIDO;i++) {\n\t\tid = Kaleido2(z,dd*scale);\n\t\tz*=scale;\n\t\tz.xy*=m2;\n\t\tk*=scale;\n\t}\n\tid/=10.;\n\treturn vec4(max(-d,(length(z)-1.)/k),id.x, id.y,0);\n}\n\nvec3 N(vec3 p) {\n\treturn normalize(vec3(DE(p+Ve.xyy).x-DE(p-Ve.xyy).x,DE(p+Ve.yxy).x-DE(p-Ve.yxy).x,DE(p+Ve.yyx).x-DE(p-Ve.yyx).x));\n}\n\nfloat calcAO(in vec3 pos, in vec3 nor) {\n    float hr=.01, ao=.0, sca=1.;\n    for(int aoi=0; aoi<5; aoi++) {\n        ao += -(DE(nor * hr + pos).x-hr)*sca;\n        sca *= 2.7;\n        hr += 5.;\n    }\n    return clamp(1.-4.*ao, 0., 1.);\n}\n\nvec3 Render(in vec3 p, in vec3 rd, in float t, in vec3 c) {\n\tvec3 col = mix(vec3(1.,1.,1.),vec3(0,.8,1), c.x) * \n\t\t\t   mix(vec3(1.,1.,1.),vec3(0,.8,1), c.y);\n\tcol*=col;\n\tvec3 nor = N(p);\n\tvec3 sunLight = L;\n\tfloat   ao = calcAO(p, nor ),\n\t\t    amb = clamp(.5+.5*nor.y, .0, 1.),\n            dif = clamp(dot( nor, sunLight ), 0., 1.),\n            bac = clamp(dot( nor, normalize(vec3(-sunLight.x,0.,-sunLight.z))), 0., 1.)*clamp( 1.0-p.y,0.0,1.0);\n\n\tvec3 brdf = ao*ao*.5*(amb*vec3(.10,.11,.13) + bac*.15) + 1.2*dif*vec3(1.,.9,.7);\n\n\tcol = col*(.1+brdf );\n\treturn sqrt(col);\n}\n\n\nmat3 lookat(in vec3 ro, in vec3 up){\n\tvec3 fw=normalize(ro);\n\tvec3 rt=normalize(cross(fw,up));\n\treturn mat3(rt, cross(rt,fw),fw);\n}\n\nvec2 fCoord;\nvec3 RD(in vec3 ro, in vec3 cp) {\n\treturn lookat(cp-ro, V01.yxx)*normalize(vec3((2.*fCoord-iResolution.xy)/iResolution.y, 12.0));\n}\n\nvec3 RD_Anaglyph(inout vec3 ro, in vec3 cp, in int i) {\n    mat3 basis = lookat(cp-ro, V01.yxx);\n    ro += .5*basis[0]*(2.*float(i)-1.);\n\treturn RD(ro,cp); //basis*normalize(vec3((2.*fragCoord-iResolution.xy)/iResolution.y, 12.0));;\n}\n\t\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tfloat time = 10.+iTime*.35;\n\tCA = cos(time);\n\tSA = sin(time);\n\tCB = cos(time*3.);\n\tSB = sin(time*3.);\n\t\n\t//vec2 m = clamp(iMouse.xy/iResolution.xy,0.,1.);\n    vec2 m = vec2(.65,.6); //5);\n\tif( iMouse.z>0.0 ) m = iMouse.xy/iResolution.xy;\n    \n\tvec3 ro = 30.*vec3((CA)*(.5+.8*cos(10.*m.x)), -1.5*sin(10.*m.x), (SA)*(.5+.8*cos(10.*m.x)));\n\tvec3 cp = V01.xxx;\n\tvec3 ctot = vec3(.1,.1,.1);\n\n\tCA3 = cos(2.*time);\n\tCA4 = cos(1.35*time);\n\t\n#ifdef ANTIALIASING \n\tfor (float i=0.;i<AA;i++) {\n\t\tfCoord = fragCoord.xy+.4*vec2(cos(6.28*i/AA),sin(6.28*i/AA));\t\n#else \n\t#ifdef ANAGLYPH\n\tfor (int i=0;i<2;i++) {\n    #endif\n\tfCoord = fragCoord.xy;\t\n#endif\n        \n#ifdef ANAGLYPH        \n\tvec3 rd = RD_Anaglyph(ro, cp, i);\n#else\n\tvec3 rd = RD(ro, cp);\n#endif        \n\t// Ray marching\n\tvec4 res = vec4(1);\n\tfloat t=16.0;\n\tfor(int k=0;k<NB_ITER;k++){\n\t\tif(res.x<PRECISION|| t>MAX_DIST)continue;\n\t\tres=DE(ro+rd*t);\n\t\tt += res.x;\n\t}\n\n\t// Render colors\n\tvec3 col = vec3(.22,.26,.28);\n\tif(t<MAX_DIST){// if we hit a surface color it\n\t\tcol = Render(ro + rd*t, rd,t, DE(ro+rd*t).yzw);\n\t}\n#ifdef ANAGLYPH\n    float ccc = (col.r+col.g+col.b)*.25;    \n\tctot += (i==0)? vec3(ccc*1.2,0,0):vec3(0,ccc,ccc);\n#else\n\tctot += col;\n#endif\n\t\n#ifdef ANTIALIASING \t\t\n    }\n\tctot /=AA;\n#else \n\t#ifdef ANAGLYPH\n    }\n    #endif        \n#endif \t\t\n    vec2 q = fragCoord.xy/iResolution.xy;\n\tctot *= pow(16.0*q.x*q.y*(1.-q.x)*(1.-q.y),.3);\n\tfragColor = vec4(ctot,1.0);\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XsS3RV","date":"1393076083","viewed":409,"name":"Kaleido 2","username":"iapafoto","description":"back to simplicity","likes":20,"published":1,"flags":0,"usePreview":0,"tags":["kaleido2"],"hasliked":0,"parentid":"","parentname":""}}