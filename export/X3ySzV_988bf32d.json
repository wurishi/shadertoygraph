{"ver":"0.1","info":{"id":"X3ySzV","date":"1720150299","viewed":49,"name":"Ray marching template/sample","username":"TomCarbon","description":"Ray marching template","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","antialias"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float kPi = 3.1415926558979323;\nconst float kMinSurface = 0.001;\nconst float kMaxDistance = 100.0;\n\nconst uint kMaxSteps = 255u;\n\nconst uint kAntiAlias = 4u;\n\n\nconst vec3 light = vec3(8.0);\nconst vec3 lightColor = vec3(1.0);\n\nconst vec4 sphere = vec4(-3.5, 1, 0, 1);\nconst vec4 sphere2 = vec4(0, 1.5, 0, 1.5);\nconst vec4 sphere3 = vec4(4.5, 2.0, 0, 2.0);\n\n\nfloat sdSphere(vec3 p, vec4 sphere)\n{\n    return length(p - sphere.xyz) - sphere.w;\n}\n\nfloat sdScene(vec3 p)\n{\n    float d = p.y;\n\n    d = min(d, sdSphere(p, sphere));\n    d = min(d, sdSphere(p, sphere2));\n    d = min(d, sdSphere(p, sphere3));\n\n    return d;\n}\n\n\nvec3 getNormal(vec3 p)\n{\n    vec2 e = vec2(0, 0.01);\n\n    vec3 n = sdScene(p) - vec3(sdScene(p - e.yxx),\n                               sdScene(p - e.xyx),\n                               sdScene(p - e.xxy));\n\n    return normalize(n);\n}\n\nfloat rayMarch(vec3 ro, vec3 rd, float min, float max)\n{\n    float d = min;\n    \n    for (uint i = 0u; i < kMaxSteps; ++i)\n    {\n        vec3 p = ro + d * rd;\n        \n        float sd = sdScene(p);\n        if (sd < kMinSurface)\n            break;\n            \n        d += sd;\n        if (d >= max)\n            return max;\n    }\n\n    return d;\n}\n\nvec3 getColor(vec2 uv)\n{\n    vec3 ambient = vec3(0, 0.1, 0);\n\n    vec3 ro = vec3(0, 2, 0);\n    vec3 la = vec3(0.5, 1.5, 0);\n    float fov = 1.5;\n\n    float a = iTime + kPi / 2.0;\n    if (iMouse.z > 0.5)\n    {\n        a = (iMouse.x / iResolution.x) * kPi * 2.0;\n    }\n\n    ro.xz = 8.0 * vec2(cos(a), sin(a));  \n\n    vec3 zz = normalize(la - ro);\n    vec3 xx = cross(zz, vec3(0, 1, 0));\n    vec3 yy = cross(xx, zz);\n\n    vec3 rd = normalize(uv.x * xx + uv.y * yy + fov * zz);\n\n    vec3 pixel;\n\n    float d = rayMarch(ro, rd, 0.0, kMaxDistance);\n    if (d < kMaxDistance)\n    {\n        vec3 p = ro + d * rd;\n        vec3 n = getNormal(p);\n\n        vec3 l = normalize(light - p);\n        float la = dot(l, n);\n        float diffuse = 0.1 + max(la, 0.0);\n        \n        float shininess = 64.0;\n        vec3 ref = reflect(l, n);\n        float specularStrength = pow(max(dot(rd, ref), 0.0), shininess);\n        vec3 specular = lightColor * specularStrength;\n\n        float ld = length(light - p);\n        if (rayMarch(p + n * 0.01, l, 0.0, ld) < ld)\n            diffuse *= 0.25;\n\n\n        pixel = clamp(ambient + diffuse * n + specular, 0.0, 1.0);\n    }\n    else\n    {\n        pixel = vec3(0, 0.05, 0);\n    }\n\n    return pixel;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec3 pixel = vec3(0);\n\n    for (uint aa = 0u; aa < kAntiAlias * kAntiAlias; ++aa)\n    {\n        vec2 aaCoord = fragCoord + vec2(aa % kAntiAlias, aa / kAntiAlias) / float(kAntiAlias) - 0.5;\n        vec2 uv = (2.0 * aaCoord - iResolution.xy) / iResolution.y;\n\n        pixel += getColor(uv);\n    }\n\n    vec3 color = pow(pixel / vec3(kAntiAlias * kAntiAlias), vec3(1.0 / 2.2));\n\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}