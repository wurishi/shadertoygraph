{"ver":"0.1","info":{"id":"4lV3Wc","date":"1480848459","viewed":309,"name":"Simple Skybox View","username":"gPlatl","description":"Basic frame for a simple interactive skybox view with an antialiased sphere.\nChange view by moving around with your mouse.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["3d","simple","interactive","sphere","cubemap","raymarcher","skybox"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n//----------------------------------------------------------\n// SimpleSkyboxView.glsl       by Gerd Platl\n//\n// Basic frame for a simple interactive skybox view\n// with an antialiased sphere.\n// Change view by moving around with your mouse.\n//\n//   v1.0  2016-12-04  initial version\n//   v1.1  2018-09-16  sphere antialiasing added\n//   v1.2  2019-02-22  camera correction  if mouse==0\n//         2021-06-20  small ray changes\n//\n// tags: 3d, simple, interactive, cubemap, raymarcher, skybox, sphere\n//----------------------------------------------------------\n\nconst vec4  skyboxColor  = vec4(0.80, 0.96, 1.00, 1.00);\nconst vec4  sphereColor  = vec4(0.80, 0.70, 0.70, 1.00);\nconst float sphereRadius = 3.0;\n\n// get sphere distance\nfloat sphere(vec3 pos)\n{\n  return length(pos) - sphereRadius; \n}\n\n//------- ray ------- \nvec3 ro = vec3(0);      // ray origin\nvec3 rd = vec3(0,0,1);  // ray direction\n\n// raymarcher from rayOrigin in rayDirection,\n// return sphere intersection distance \nfloat raymarch()\n{\n  float d = 0.0, t = 0.0;\n  for(int i = 0; i < 32; ++i)\n  {\n    d = sphere(ro + t * rd);\n    if(abs(d) < 0.01) return t;\n    if(t > 100.0) return -1.0;\n    t += d;\n  }\n  return -1.0;\n}\n\n// get surface normal vector\nvec3 getNormal (in vec3 pos)\n{\n  float d = sphere(pos);\n  vec3 eps = vec3(0.0001, 0.0, 0.0);\n  return normalize(vec3(d - sphere(pos - eps.xyy), \n                        d - sphere(pos - eps.yxy), \n                        d - sphere(pos - eps.yyx) ));\n}\n\n// get camera data (ro & rd)\nvoid getCamera(vec2 coord)\n{\n  vec2 uv = (coord * 2.0 - iResolution.xy) / iResolution.y;\n  vec2 mo = iMouse.xy / iResolution.y * 3.5;\n  if (mo == vec2(0)) mo = vec2(0,1.75);\n  ro = 5.0 * vec3(sin(mo.x), 2.0-mo.y, cos(mo.x));\n  vec3 z = normalize(ro);\n  vec3 x = normalize(cross(vec3(0.0, 1.0, 0.0), z));\n  rd = mat3(x, cross(z, x), z) * vec3(uv, -1.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n  getCamera(fragCoord);\n\n  float t = raymarch();     // get sphere distance factor\n  \n  fragColor = texture(iChannel0, rd) * skyboxColor; // get skybox color\n\n  if(t > 0.0)               // sphere intersection ?\n  {\n    vec3 p = ro + t * rd;   // intersection point\n    vec3 n = getNormal(p);  // surface normal\n    rd = reflect(rd, n);    // reflection vector\n    vec4 refColor = texture(iChannel0, rd) * sphereColor;\n    float d = 3.2 * dot(rd, n);   // antialiasing with skybox\n    fragColor = mix(fragColor, refColor, smoothstep(0.,1.,d));\n  }\n  // fragColor = vec4(sin(rd*22.), 1.0);  // funny colors 1\n  // fragColor = vec4(mod(rd,1.0) ,1.0);  // funny colors 2\n}\n","name":"Image","description":"","type":"image"}]}