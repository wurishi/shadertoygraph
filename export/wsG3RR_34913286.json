{"ver":"0.1","info":{"id":"wsG3RR","date":"1577258643","viewed":125,"name":"Rotating Hypercubes","username":"omeometo","description":"something","likes":6,"published":1,"flags":1,"usePreview":0,"tags":["4d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 qmul(in vec4 p, in vec4 q){\n\treturn vec4(cross(p.xyz, q.xyz)+p.xyz*q.w+p.w*q.xyz, -dot(p.xyz, q.xyz)+p.w*q.w);\n}\n\nfloat dist_cube(in vec4 u, float r){\n    u = abs(u);\n\tfloat l_out = length(max(vec4(0.), u-r));\n\tfloat l_in = min(0., max(max(u.x,u.y), max(u.z,u.w))-r);\n    return l_out+l_in;\n}\n\nvec2 dist4(in vec4 v){\n    vec4 u0=v-clamp(round(v), -1., 1.);\n    vec4 u1=v-0.5-clamp(round(v-0.5), -2., 1.);\n\tfloat d0=dist_cube(u0, 0.25), d1=dist_cube(u1, 0.25);\n    //float d0=length(u0)-0.5, d1=length(u1)-0.5;\n    return d0<d1?vec2(d0,0):vec2(d1,1);\n}\n\n\nvec2 dist(in vec3 v){\n\tvec4 w = vec4(v, 0);\n    float t=0.3*iTime;\n\tvec4 q1=normalize(cos(t*vec4(2.1,-1.6,1.7,-2.3)+vec4(1.1,1.6,0.3,2.3)));\n\tvec4 q2=normalize(cos(t*vec4(1.5,-2.1,2.2,1.3)+vec4(1.5,0.3,2.2,1.5)));\n    w = qmul(q1, qmul(w, q2));\n\treturn dist4(w);\n}\nvec3 getNormal(in vec3 pos){\n    float eps=0.001;\n    vec2 s = vec2(eps, -eps);\n    return normalize(dist(pos+s.xxx).x*s.xxx\n                    +dist(pos+s.xyy).x*s.xyy\n                    +dist(pos+s.yxy).x*s.yxy\n                    +dist(pos+s.yyx).x*s.yyx);\n}\n\nfloat calcAO(vec3 pos, vec3 normal){\n    float ao=1.0;\n    for(int i=1;i<=5;i++){\n        float d=float(i)*0.2;\n    \tvec3 q=pos+d*normal;\n        ao -= abs(dist(q).x-d)*pow(0.5, float(i));\n    }\n    return clamp(ao, 0.0, 1.0);\n}\n\nvoid getColor(out vec4 fragColor, in vec3 cen, in vec3 rd){\n\tfragColor = vec4(vec3(0), 1.0);\n    float t=0.0;\n    for(int i=0;i<128;i++){\n    \tvec3 pos = cen + t * rd;\n        vec2 d = dist(pos);\n        if(d.x<1e-3){\n            float mat=d.y;\n            vec3 col;\n            if(d.y<0.5)col=vec3(0.6,1.2,2.0); else col=vec3(2.0, 1.2, 0.6);\n            vec3 nor = getNormal(pos);\n            float dif = clamp(nor.y, 0.0, 1.0);\n            float ref = clamp(pow(reflect(rd, nor).y, 5.0), 0.0, 1.0);\n            float occ = calcAO(pos, nor);\n            fragColor = vec4(vec3(clamp((0.1+dif*1.2+ref*occ*0.2)*col, 0.0, 1.0)), 1);\n\t\t\t//fragColor = vec4(vec3(occ), 1);\n            //fragColor = vec4(vec3(1.0-float(i)/64.0), 1);\n            \n            break;\n        }\n        t += d.x;\n        if(t>=1e2){\n        \tbreak;\n        }\n    }\n    \n    fragColor = pow(fragColor, vec4(0.45));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n\t\n    vec3 cam = vec3(0,0,8);//vec3(cos(iTime)*10.0, 0.0, sin(iTime)*10.0);\n    vec3 fwd = normalize(vec3(0,0,-1));\n    vec3 up = vec3(0,1,0);\n    vec3 right = cross(fwd, up);\n    \n    vec3 rd = normalize(fwd + 0.3 * (uv.x * right + uv.y * up));\n    \n    getColor(fragColor, cam, rd);\n}\n\nvoid mainVR(out vec4 fragColor, in vec2 fragCoord, in vec3 cam, in vec3 rd){\n\tgetColor(fragColor, cam, rd);\n}","name":"Image","description":"","type":"image"}]}