{"ver":"0.1","info":{"id":"cdffWX","date":"1689205549","viewed":146,"name":"gameboy camera shader","username":"boytoy","description":"did you get stuck here again?","likes":0,"published":1,"flags":34,"usePreview":0,"tags":["gameboy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// aqu√≠ hay que poner color en formato RGB 256                      < ------------ HEY\nivec3 the_color_of_your_dreams = ivec3(204,204,255);\n// https://www.rapidtables.com/web/color/RGB_Color.html (preferir colores pasteles)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = (floor(pixels*uv)+0.5)/pixels;\n   \n    // Time varying pixel color\n    vec3 col = texture(iChannel0,uv).bbb;\n    \n    col = colorize(col,vec3(the_color_of_your_dreams)/256.);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n    \n    // holi >:)\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float m =time_mix;\n    vec3 camera = texture(iChannel1,uv).rgb;\n    vec3 last_frame = texture(iChannel0,uv).rgb;\n    \n    camera += 0.15;\n    \n    vec3 col =  m * last_frame + (1.-m) * camera;\n    \n    col = colorize(col,vec3(1.));\n    \n    fragColor.rgb = col;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"// color quantization\nconst float q_ = pow(2.,2.);\nconst vec3 quants = vec3(q_);\n// pixel quantization\nconst vec2 pixels = vec2(160.,144);\n// must be less than 0.5 or it will bug!\nconst float time_mix = 0.3; \n\nconst bool do_color = true;\n\nvec3 colorize(vec3 col,vec3 colorization){\n    float luma = dot(vec3(0.2126,0.7152,0.0722),col);\n    \n    if(luma < 0.9){\n        if(do_color){col *= colorization;}\n    }\n    return (floor(col*quants) + 0.5)/quants;\n}","name":"Common","description":"","type":"common"}]}