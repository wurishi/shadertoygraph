{"ver":"0.1","info":{"id":"7ly3Wz","date":"1637479822","viewed":60,"name":"Quadcolor_interpolation","username":"wumz","description":"Playing around with Quadratic interpolation ","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["interpolation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nfloat plot(vec2 uv, float pct) {\n return smoothstep(pct - 0.01, pct, uv.y) *  smoothstep(pct, pct + 0.01, uv.y);\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n     vec3 col = vec3(0.0);\n    \n    vec3 canvas = vec3(0.0);\n   \n    vec3 color_RED = vec3(1.0,0.0,0.0);\n    vec3 color_BLUE = vec3(0.0, 0.0, 1.0);\n  \n    \n    float quad_modifier = pow(9.0 * abs(sin(iTime))* uv.x, 2.0);\n    \n    float line = plot(uv,quad_modifier);\n\n    vec3 line_color = mix(color_RED, color_BLUE, uv.y);\n    // Time varying pixel color\n    col = mix(color_RED, line_color,quad_modifier);\n    col += line * line_color;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}