{"ver":"0.1","info":{"id":"Dsf3z2","date":"1666388768","viewed":107,"name":"beach sounds + waves","username":"arkanon","description":"made this for fun took like three hours","likes":5,"published":1,"flags":40,"usePreview":0,"tags":["2d","noise","relaxing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    fragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define FK(k) floatBitsToInt(cos(k))^floatBitsToInt(k)\nfloat hash(float a, float b) {\n    int x = FK(a); int y = FK(b);\n    return float((x*x+y)*(y*y-x)+x)/2.14e9;\n}\n\nvec2 mainSound( int samp, float time )\n{\n    float a = 0.0;\n    for (int i = 0; i < 12; i++) {\n        float n = 0.5 + 0.5 * sin(time * fract(hash(float(i), float(i*2))));\n        n *= n * n;\n        a += n;\n    }\n    a /= 12.0;\n    // A 440 Hz wave that attenuates quickly overt time\n    return vec2( hash(time, time - 1.0) * a * 0.1);\n}","name":"Sound","description":"","type":"sound"},{"inputs":[{"id":"XsX3Rn","filepath":"/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","previewfilepath":"/media/ap/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define FK(k) floatBitsToInt(cos(k))^floatBitsToInt(k)\nfloat hash(float a, float b) {\n    int x = FK(a); int y = FK(b);\n    return float((x*x+y)*(y*y-x)+x)/2.14e9;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    if (iFrame == 0) {\n        vec3 col = vec3(0.7, 0.6, 0.4);\n        col += hash(fragCoord.x * 0.1, uv.y) * 0.02;\n        fragColor = vec4(col, 1.0);\n        return;\n    }\n    \n    float a = 0.0;\n    float b = 0.0;\n    for (int i = 0; i < 12; i++) {\n        float k = fract(hash(float(i), float(i*2)));\n        float n = 0.5 + 0.5 * sin(iTime * k);\n        float j = 0.01 + 0.01 * sin((sin(iTime * 0.1 * k) + uv.y) * 50.0 * k);\n        n *= n * n;\n        b += j;\n        a += n;\n    }\n    a /= 12.0;\n    uv.x += b * 0.01 * (1.0 - sqrt(uv.x));\n    a += b;\n    // basically a is the distance of the wave\n    // to the right should be sand and the left water\n    vec3 col;\n    col = vec3(0.7, 0.6, 0.5);\n    if (a > uv.x) {\n        col = mix(col, vec3(0.3, 0.4, 0.5), sqrt(uv.x)+0.1);\n        float n = uv.x + 0.25;\n        n *= n;\n        n *= n;\n        n *= n;\n        n = mix(n, n * texture(iChannel1, uv).r, 0.1);\n        col = mix(col, vec3(0.9), n);\n    }\n    else {\n        if (sqrt(a*0.8) > uv.x) {\n            col = mix(col, vec3(0.55, 0.45, 0.3), sqrt(1.0 - uv.x));\n        }\n    }\n    fragColor = vec4(col, 1.0);\n    if (iFrame > 0) {\n        vec4 old = texture(iChannel0, uv);\n        vec3 k = abs(old.rgb - vec3(0.55, 0.45, 0.3));\n        vec3 n = abs(col.rgb - vec3(0.7, 0.6, 0.5));\n        if (dot(k,k) < 0.05) {\n            fragColor = mix(fragColor, vec4(0.7, 0.6, 0.4, 1.0), 0.01);\n            if (dot(n,n) < 0.05) {\n                fragColor = mix(old, fragColor, 0.002);\n                return;\n            }\n        }\n        fragColor = mix(old, fragColor, 0.02);\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}