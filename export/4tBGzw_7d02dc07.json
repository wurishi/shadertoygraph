{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"texture","id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}},{"channel":1,"type":"texture","id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}},{"channel":2,"type":"cubemap","id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"code":"//-----------------------------\n#define time iTime\n#define EPSILON .001\n#define colDarkWood   2.\n#define colBlondWood1 3.\n#define colBlondWood2 4.\n#define colMetal      5.\n#define colRed        6. \n#define colBlue       7. \n#define colEyes       8.\n\n\nconst float PI=3.14159265;\nconst int MAX_ITER = 120;\nvec3 lightDir    =  normalize(vec3(1., 10., 5.));\nvec3 colBox    = vec3(1.);\nvec3 colCover  = vec3(1.);\nvec3 colEyess  = vec3(1.); \nfloat angleOpen = 1.;    // Ð£Ð³Ð¾Ð» Ð´Ð»Ñ Ð¾Ñ‚ÐºÑ€Ñ‹Ð²Ð°Ð½Ð¸Ñ ÐºÑ€Ñ‹ÑˆÐºÐ¸ [0., 1.5]\nfloat heightSpring = 1.; // Ð’Ñ‹ÑÐ¾Ñ‚Ð° Ð¿Ñ€ÑƒÐ¶Ð¸Ð½Ñ‹ [0.3, 1.]\nfloat positionToys = 1.; // ÐŸÐ¾Ð·Ð¸Ñ†Ð¸Ñ Ð¸Ð³Ñ€ÑƒÑˆÐºÐ¸ [1.8, 8.]\nfloat speed;\nstruct mat\n{\n  float typeMat;        \n     \n};\nmat materialMy = mat(0.0);\n\nconst float M_PI = 3.14159265358979323846;\n//-----------------------------\nvec3 getNormal(in vec3 p);\nfloat renderFunction(in vec3 pos);\nfloat render(in vec3 posOnRay, in vec3 rayDir);\nvec4 getColorPixel(inout vec3 ro, vec3 rd, inout vec3 normal, float dist, float typeColor);\nvec3 pattern1(in vec2 pos, in float r);\nvec3 pattern2(in vec2 pos, in float r);\nvec3 pattern3(in vec2 pos, in float r);\n//-----------------------------\nvec3 rotationCoord(vec3 n )\n{\n vec3 result;\n //--------------------------------------------\n   float t = time * 0.1;//tmpTime;//\n   vec2 sc = vec2(sin(t), cos(t));\n   mat3 rotate;\n  /*\n    mat3 rotate_x = mat3(  1.0,  0.0,  0.0,\n                          0.0, sc.y,-sc.x,\n                          0.0, sc.x, sc.y);\n   mat3 rotate_y = mat3( sc.y,  0.0, -sc.x,\n                         0.0,   1.0,  0.0,\n                         sc.x,  0.0,  sc.y);\n   mat3 rotate_z = mat3( sc.y, sc.x,  0.0,\n                        -sc.x, sc.y,  0.0,\n                         0.0,  0.0,   1.0);\nrotate = rotate_z * rotate_y * rotate_z; \n*/\n rotate = mat3( sc.y,  0.0, -sc.x,\n                0.0,   1.0,  0.0,\n                sc.x,  0.0, sc.y);   \n               \n\n  result = n * rotate;\n  return result;\n}\n\n//------------------------------------------\nvec2 rot(vec2 p,float r){\n  vec2 ret;\n  ret.x=p.x*cos(r)-p.y*sin(r);\n  ret.y=p.x*sin(r)+p.y*cos(r);\n  return ret;\n}\n//------------------------------------------\nvec2 rotsim(vec2 p,float s)\n{\n  vec2 ret=p;\n  ret=rot(p,-PI/(s*2.0));\n  ret=rot(p,floor(atan(ret.x,ret.y)/PI*s)*(PI/s));\n  return ret;\n}\n//ÐŸÑ€Ð¸Ð¼Ð¸Ñ‚Ð¸Ð²Ñ‹\n// distance field functions from https://iquilezles.org/articles/distfunctions\n//------------------------------------------\nfloat udRoundBox( vec3 p, vec3 b, float r )\n{\n  return length(max(abs(p)-b,0.0))-r;\n}\n//----------------------------------------------------Ð¢Ð¾Ñ€\nfloat dTorus(vec3 p, vec2 t)\n{\n   vec2 q = vec2(length(p.xz) - t.x, p.y);\n   return length(q) - t.y;\n}\n//----------------------------------------------------Ð¨Ð°Ñ€\nfloat dSphere(vec3 p, float r)\n{\n   return length(p) - r;\n}\n//----------------------------------------------------Ð¦ÐµÐ»Ð¸Ð½Ð´Ñ€\nfloat yCylinder(vec3 p, vec2 h) \n{\n    return max( length(p.xz)-h.x, abs(p.y)-h.y );\n}\n\n//----------------------------------------------------Ð¦Ð¸Ð»Ð¸Ð½Ð´Ñ€\nfloat zCylinder(vec3 p, vec2 h) \n{\n    return max( length(p.xy)-h.x, abs(p.z)-h.y );\n}\n//--------------------------------------------------Ð¡ÐºÑ€ÑƒÐ³Ð»ÐµÐ½Ð½Ñ‹Ð¹ Ñ†ÐµÐ»Ð¸Ð½Ð´Ñ€\nfloat dCapsule(in vec3 p, in vec2 size)\n{\n    p.y -= clamp(p.y, 0.0, size.x);\n    return length(p) - size.y;\n}\n//--------------------------------------------------Ð¡ÐºÑ€ÑƒÐ³Ð»ÐµÐ½Ð½Ñ‹Ð¹ Ñ†ÐµÐ»Ð¸Ð½Ð´Ñ€\nfloat dCapsule2D(in vec2 p, in vec2 size)\n{\n    p.x -= clamp(p.x, 0.0, size.x);\n    return length(p) - size.y;\n}\n//--------------------------------------------------\nfloat dCapsuleMin(in vec3 p, in vec2 size)\n{\n  float d = dCapsule(p,size);\n  float r75 = size.x * 0.75, r775 =  size.x * 0.775;\n  d = max(d, abs(p.x) - r775);\n  d = max(d, abs(p.z) - r75);  \n  return d;\n}\n//--------------------------------------------------ÐšÐ¾Ð½ÑƒÑ\nfloat dCone( vec3 p, float r, float h )\n{\n    vec2 c = normalize( vec2( h, r ) );\n    float q = length(p.xy);\n    return max( dot(c,vec2(q,p.z)), -(p.z + h) );\n}\n//--------------------------------------------------\nfloat smin( float a, float b, float k ) \n{\n   float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n   return mix( b, a, h ) - k*h*(1.0-h);\n}\n\n//------------------------------------------\nfloat distMat(inout float curDist, float dist, in float typeMat)\n{\n   float res = curDist;\n   if (dist < curDist) \n   {\n      materialMy.typeMat     = typeMat;\n      res                    = dist;\n     return res;\n   }\n   return curDist;\n}\n//--------------------------------------------------\nfloat dWhirligig(in vec3 p, in vec2 size, in float rad, in float t)\n{\n    float a = atan(p.x,p.y) + t; \n    float r = length(p);\n    float ta = size.x * a; \n    float s = sin(ta)*0.5+0.5; \n    float d = rad + sqrt(s );   \n    float h = pow(r/d, d);\n    float f =smoothstep( 0.5, 4., h );  \n    return max(f, (abs(p.z)- size.y   )) ;\n}\n//--------------------------------------------------\nfloat dWhirligig2D(in vec2 p, float kol, in float rad, in float t)\n{\n    float a = atan(p.x,p.y) + t; \n    float r = length(p);\n    float ta = kol * a; \n    float s = sin(ta)*0.5+0.5; \n    float d = rad + sqrt(s );   \n    float h = pow(r/d, d);\n    float f =smoothstep( 0.5, 4., h );  \n    return f;\n}\n//--------------------------------------------------ÐŸÑ€ÑƒÐ¶Ð¸Ð½Ð°\n\nfloat dSpiral(in vec3 pos, float height, float kol,  vec2 size)\n{\n float d = 1.0;\n vec3 p = pos;\n p.y -=  (kol * 0.159 ) *acos(sin(atan(p.x, p.z)))*p.z/abs(p.z);\n p.y = mod(p.y, kol)- kol * 0.5; \n d = dTorus(p, size); \n d = max(d, abs(pos.y) - height * (kol * 0.159  ));\n d = max(d, -(pos.y) - p.y ); \n return d;\n}\n//--------------------------------------------------Ð¨ÐºÐ°Ñ‚ÑƒÐ»ÐºÐ°\nfloat dCasket(in vec3 pos, in float r, in float d)\n{\n float d1 = 1.0;\n vec3 p = pos;\n float r10 = r * 0.1, r30 = r * 0.3, r40 = r * 0.4, r50 = r * 0.5, r80 = r * 0.8, r90 = r * 0.9;\n//------------------------------Ð¨ÐºÐ°Ñ‚ÑƒÐ»ÐºÐ°\n d1 =  dCapsule(p.zxy + vec3(0.,r,  0.), vec2(r*2.));\n d1 = max(d1, abs(p.y) - (r+r50));\n d1 = max(d1, abs(p.z) - (r+r50)); \n p.y = abs(p.y);\n p.y -= r+r50 + r10;\n d1 = min(d1, udRoundBox( p, vec3(r+r50, r10, r + r30), 0.));\n d = distMat(d, d1, colDarkWood); \n//Ð’Ð½ÑƒÑ‚Ñ€ÐµÐ½Ð½Ð¸Ð¹ Ñ†ÐµÐ»Ð¸Ð½Ð´Ñ€\n p = pos;\n d1 =  dCapsuleMin(p.zxy + vec3( 0.,r,  0.), vec2(r*2.));\n d = distMat(d, d1, colBlondWood1); \n d = max(d, -udRoundBox( p - vec3(0., r30, 0.), vec3(r, r+r50, r90),r10));  \n colBox = pattern1(p.xy, r);\n//------------------------------ÐšÑ€Ñ‹ÑˆÐºÐ°\n p += vec3( r, -(r*2.+r40), 0.);\n p.yz = rot(p.yz,angleOpen );\n p.y -=  clamp (angleOpen + (angleOpen * r50), 0., r*2.);\n p.z -=  clamp ((angleOpen * r40), 0., r40);\n//Ð’Ð½ÐµÑˆÐ½Ð¸Ð¹ Ñ†ÐµÐ»Ð¸Ð½Ð´Ñ€\n d1 = min(d1, dCapsule(p.zxy  , vec2(r*2., r+r50)));\n d1 = max(d1, -p.y - r50 );\n// d1 = max(d1, p.z - tmpL_2 );\n d1 =  min(d1,udRoundBox( p + vec3(-r, r30*2., 0.), vec3(r+r50, r10, r + r30), 0.));\n d1 = max(d1, abs(p.z) - r);\n d = distMat(d, d1, colDarkWood);  \n //Ð’Ð½ÑƒÑ‚Ñ€ÐµÐ½Ð½Ð¸Ð¹ Ñ†ÐµÐ»Ð¸Ð½Ð´Ñ€\n d1 = min(d1, dCapsule(p.zxy, vec2(r*2., r+r50)));\n d1 = max(d1, -p.y - r50 );\n d = distMat(d, d1, colBlondWood2); \n colCover = pattern2(p.xy, r);\n //----------------------------Ð¡Ð¿Ð¸Ñ€Ð°Ð»ÑŒ Ð½Ð° ÐºÑ€Ñ‹ÑˆÐºÐµ\n d1 = dSpiral(p.zxy + vec3(r+r30, r30, r80), 35., r50,  vec2(0., r10*2.));\n d = distMat(d, d1, colMetal);  \n if(r > 0.3)\n {\n //----------------------------ÐžÑ€Ð½Ð°Ð¼ÐµÐ½Ñ‚ Ð½Ð° ÐºÑ€Ñ‹ÑˆÐºÐµ \n p.x -= r;\n p.x = abs(p.x);\n p -= vec3( r, r50, r+r40);\n d1 =  dWhirligig(p , vec2(8., r10*2.), r30, 0.);\n d = distMat(d, d1, colDarkWood);  \n d = distMat(d, zCylinder(p, vec2(r10, r30)), 5.0);  \n //----------------------------ÐžÑ€Ð½Ð°Ð¼ÐµÐ½Ñ‚ Ð½Ð° ÑˆÐºÐ°Ñ‚ÑƒÐ»ÐºÐµ\n p = pos; \n p.z -= r+r30*2.;\n d1 =  dWhirligig(p , vec2(6., r10), r30* 2., 0.);  \n d1 =  min(d1, dWhirligig(p , vec2(6., r30), r30 , 0.));   \n d = distMat(d, d1, colDarkWood);   \n }\n //----------------------------ÐšÐ½Ð¾Ð¿ÐºÐ°\n float h = clamp(1. - angleOpen , 0.5, 1.0);\n d1 = zCylinder(p, vec2(r10 * 2.,h * r)) ;  \n//------------------------------ÐŸÑ€ÑƒÐ¶Ð¸Ð½Ð° Ð²Ð½ÑƒÑ‚Ñ€Ð¸ \n if(angleOpen > 0.1)\n   d1 = min(d1, dSpiral(pos, 30., heightSpring * r, vec2(r40, r*0.2)));\n   d = distMat(d, d1, colMetal);  \n return d; \n}\n//--------------------------------------------------Ð“Ð¾Ð»Ð¾Ð²Ð° ÐŸÐµÑ‚Ñ€ÑƒÑˆÐºÐ¸\nfloat dHead(in vec3 pos, in float r, in float d)\n{\n float d1 = 1.0;\n vec3 p = pos;\n float r10 = r * 0.1,r30 = r * 0.3, r40 = r * 0.4, r50 = r * 0.5, r70 = r * 0.7, r80 = r * 0.8;\n//---------Ð“Ð¾Ð»Ð¾Ð²Ð° \n d1 = min(d1, dSphere(p * vec3(1., 0.8, .7)+ vec3(0., 0., -r80), r* 0.35));// ÐÐ¾Ñ\n d1 = max(d1, -p.y - r30);\n d1 = smin(d1,dSphere(p * vec3(1., 0.7, 1.), r), r30);// Ð“Ð¾Ð»Ð¾Ð²Ð°\n p = pos + vec3(0., r+r30, 0.);\n p.yz = rot( p.yz, -4.);\n d1 = smin(d1,dSphere(p * vec3(1., 1.4, 0.6), r50), r30); // ÐŸÐ¾Ð´Ð±Ð¾Ñ€Ð¾Ð´Ð¾Ðº\n d1 = smin(d1, yCylinder(pos + vec3(0., r+r80, r30), vec2(r*0.35, r80)), r30); \n//---Ð”Ð»Ñ Ð³Ð»Ð°Ð·\n p = pos - vec3(0., r*0.60, r*0.20);\n p.yz = rot( p.yz, 1.1);\n p.x = abs(p.x) - r*0.7;\n d1 = max(d1,  -dTorus(p * vec3(1., 1.6, 1.), vec2 (-(r+r30), r+r70)) ); \n d = distMat(d, d1, colBlondWood1);   \n//---------Ð“Ð»Ð°Ð·Ð°\n d1 = min(d1,  dTorus(p * vec3(1.7, 1.8, 1.4), vec2 (-(r+r30), r+r70)) ); \n d = distMat(d, d1, colEyes);  \n colEyess = pattern3(p.xy, r);\n//---------Ð©ÐµÐºÐ¸\n p = pos;\n p.x = abs(p.x);\n p+= vec3(-r*0.6, r*0.2, -r40);\n d1 = dSphere(p, r40); \n d = distMat(d, d1, colRed);  \n d = smin(d, d1, r* 0.2);\n//---------Ð“ÑƒÐ±Ñ‹\n p = pos + vec3(0., r*0.55, -r*0.2);\n p.yz = rot( p.yz, -3.7);\n p.y = abs(p.y) - r*0.16;\n d1 = dTorus(p*vec3(0.7, 0.9, 0.54), vec2(r*0.34, r*0.15));\n d = distMat(d, d1, colRed);  \n d = smin(d, d1, r10); \n return d;\n}\n//--------------------------------------------------Ð ÑƒÐ±Ð°ÑˆÐºÐ°\nfloat dShirt(in vec3 pos, in float r, in float d)\n{\n float d1 = 1.0;\n vec3 p = pos;\n float r10 = r * 0.1, r50 = r * 0.5,  r70 = r * 0.7;\n float sizeXZ = clamp(2. * speed, 1., 3.);      \n float angle = atan(p.x,p.z); \n float k = 0.1 * abs(cos(1.5 + 4. *angle));   \n d1 = dTorus(p*vec3(1., 0.3, 1.), vec2(r50, r*0.25)+ k * r50);  \n d1 = min(d1, dSphere(p * vec3(1., 2., 1. ) +vec3(0., r, 0.),r*sizeXZ - 2. * k)); \n if(mod(.2*M_PI*angle,1.)>.5)  d = distMat(d, d1,colRed);    \n else    d = distMat(d, d1, colBlue);  \n return d;       \n}              \n//--------------------------------------------------Ð¨Ð°Ð¿ÐºÐ°\nfloat dHat(in vec3 pos, in float r, in float d)\n{\n float d1 = 1.0;\n vec3 p = pos;\n float r10 = r * 0.1,   r30 = r * 0.3,   r50 = r * 0.5,  r60 = r * 0.6,  r70 = r * 0.7,   r80 = r * 0.8;\n float angle = atan(p.x,p.z); \n float k = 0.10 * abs(cos(1.5 + 4. *angle));   \n \n d1 = dTorus(p*vec3(1., 0.3, 1.), vec2(r60, r10)- k * 0.5);   \n if(mod(.2*M_PI*angle,1.)>.5)\n    d = distMat(d, d1,colRed);    \n   else\n    d = distMat(d, d1, colBlue); \n//-------------------------\n float w = clamp(2. * speed, -2., 2.);\n vec3 p2 = p + vec3(0.0, cos( p.y * w) * (-r30), sin(( p.y * w) + r30) * r30);\n d1 = dCone(p2.zxy  + vec3(-r10, 0., -(r*2.+r70)), r60, r * 3. );\n d = distMat(d, d1,colBlue);    \n\n return d;        \n}\n\n//--------------------------------------------------\nfloat myObject(in vec3 p)\n{\n   float d =  1.0;\n   materialMy.typeMat = 0.0;\n   vec3 pos = p;\n   pos += vec3(0., 5., 0.);\n   float r =  1.;\n   float r10 = r* 0.1, r30 = r* 0.3;\n\n   angleOpen =    clamp(5. * speed, 0.01, 1.5);\n   heightSpring = clamp(speed, r*0.3, r );\n   positionToys = clamp(8.* speed, r*1.8, r*8.);\n\n   d =  distMat(d,   udRoundBox( pos, vec3(7, 0.3, 7. ), 0.5),  1.0);    \n   pos = p + vec3(0., 2.5, 0.);\n\n   d = dCasket(pos, r , d);    \nif(angleOpen > 0.1) // ÐŸÐ¾ÑÐ²Ð»ÐµÐ½Ð¸Ðµ ÐŸÐµÑ‚Ñ€ÑƒÑˆÐºÐ¸\n{ \n   vec3 p1 = pos;\n   p1.y -= positionToys;\n   float d1 = dHead(p1,r - 0.2 , d);\n   d1 = max(d1, -udRoundBox( pos, vec3(1.), 0.5));\n   d =  min(d,   d1);\n   //ÐÐ¸Ð¶Ð½ÑÑ Ñ‡Ð°ÑÑ‚ÑŒ\n   p1.y += r*2.5;\n   d =  dShirt(p1 ,r, d); \n   if(angleOpen > 1.) \n   {  //ÐšÐ¾Ð»Ð¿Ð°Ðº\n     p1 = pos;\n     p1 -=vec3(0., positionToys + r, -r30);\n     p1.yz = rot(p1.yz, 0.5);\n     d = dHat(p1, r, d) ;\n   }\n}\n\n   return d; \n}\n//-------------------------------------------------\n// Ð²Ñ‹Ð²Ð¾Ð´ Ð¾Ð±ÑŠÐµÐºÑ‚Ð°\nfloat renderFunction(in vec3 pos)\n{\n    return  myObject(pos);    \n}\n//------------------------------------------------- \nvec3 getNormal(in vec3 p)\n{\n\nconst float precis = 0.001;\n    vec3  eps = vec3(precis,0.0,0.0);\n    vec3 nor;\n    nor.x = renderFunction(p+eps.xyy) - renderFunction(p-eps.xyy);\n    nor.y = renderFunction(p+eps.yxy) - renderFunction(p-eps.yxy);\n    nor.z = renderFunction(p+eps.yyx) - renderFunction(p-eps.yyx);\n    return normalize(nor);\n\n}\n\n//-------------------------------------------------\nvec3 pattern1(in vec2 pos, in float r)\n{\n  vec2 p = pos;\n  vec3 color = vec3(1.);\n  float r10 = r * 0.1, r20 = r * 0.2, r80 = r * 0.8;\n  float d = dCapsule2D(p + vec2(r, 0.), vec2(r*2.01,r+r20));  \n  d = max(d, -dCapsule2D(p + vec2(r, 0.) , vec2(r*2.01,r+r10)) );\n  d = min(d, dWhirligig2D(p , 6., r10*6., 0.));\n  d =  min(d, dWhirligig2D(p , 12., r10*3. , time)); \n  if (d < 0.01)\n     color = vec3(1., 0., 0.);//color_3.rgb;\n  return color;\n}\n//-------------------------------------------------\nvec3 pattern2(in vec2 pos, in float r)\n{\n  vec2 p = pos;\n  vec3 color = vec3(1.);\n  float r10 = r * 0.1, r20 = r * 0.2, r80 = r * 0.8, r90 = r * 0.9;\n  float d = dCapsule2D(p * vec2(0.9,0.8) + vec2(r10, 0.), vec2(r*2.,r80 ));  \n  d = max(d, -dCapsule2D(p, vec2(r*2.,r90)) );        \n  if (d < 0.01)\n     color = vec3(1., 0., 0.);//color_3.rgb;\n  return color; \n}\n//-------------------------------------------------\nvec3 pattern3(in vec2 pos, in float r)\n{\n  vec2 p = pos;\n  vec3 color = vec3(1.);\n  float r08 = r * 0.08;\n  p -= vec2(r08, -r08);\n  float d = length(p ) - r*0.3; \n  if (d < 0.01)  color = vec3(0., 0.2, 0.9);\n  d = length(p ) - r*0.2; \n  if (d < 0.01)  color = vec3(0.); \n  return color;   \n}\n//------------------------------------------------- \nfloat shadow(in vec3 ro, in vec3 rd, in float mint, in float maxt, in float k)\n{\n   float res = 1.0;\n   float t = mint;\n   for(int i=0; i<20; i++)\n   {\n      if(t<maxt)\n      {\n         float h = renderFunction(ro + rd*t);\n         res = min(res, k*h/t);\n         t += 0.02;\n      }\n   }\n   return clamp(res,0.0,1.0);\n}\n//-------------------------------------------------\nvec3 getLighting(in vec3 ro, in vec3 rd ,in vec3 norm, in vec3 lightDir, in vec3 color)\n{\n    vec3 col = color;\n    vec3 ref = reflect( rd, norm );\n    col *= 1.0 + 1.5*vec3(0.7,0.5,0.3)*pow( clamp( 1.0 + dot(norm,rd), 0.0, 1.0 ), 2.0 );\n    col += 27. *clamp(0.3 + 2. * norm.y, 0.0,1.0)* pow(texture( iChannel2, ref ).xyz,vec3(2.2));//*(rim);\n    col = pow( col, vec3(0.5) );\n\n    vec2 q =  gl_FragCoord.xy / iResolution.xy ;    \n    col *= -0.16 + 0.68 * pow( 16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.15 );  \n    return col ;\n}\n//----------------------------------------------------------------------\nvec3 getLightingFigure(in vec3 ro, in vec3 rd ,in vec3 norm, in vec3 lightDir, in vec3 color)\n{\n   vec3 col = color;\n   float dif = clamp(dot(norm,lightDir),0.0,1.0);\n   float spec = clamp(dot(reflect(rd,norm),lightDir ),0.0,1.0);\n   float lum = pow(clamp(1.+dot(norm,rd),0.0,1.0),2.0);\n   col = col*dif+lum*(0.5+0.5*col);\n   col += pow(spec,24.);\n   return col ;  \n}\n//----------------------------------------------------------------------\nvec4 getColorPixel(inout vec3 ro, vec3 rd, inout vec3 normal, float dist, float typeColor)\n{\n\n  vec3 color = vec3(1.);\n  vec3 hitPos = ro + rd * dist;\n  normal = normalize(getNormal(hitPos));  \n//----------------------------------\n   if (materialMy.typeMat == 0.0) \n   {\n      color = texture( iChannel2, rd ).xyz;\n   } \n   else if (materialMy.typeMat == 1.0)    \n        color = texture( iChannel0, 0.15 * hitPos.xz ).xyz;\n   else if (materialMy.typeMat == colDarkWood)    \n        color = texture( iChannel1, 0.15 * hitPos.xz ).xyz * vec3(0.35, 0.25, 0.03);//color_1.rgb;   \n   else if (materialMy.typeMat ==colBlondWood2)   \n   {\n        color = texture( iChannel1, 0.15 * hitPos.xy ).xyz + vec3(1., 0.95, 0.98);//color_2.rgb ;   \n        color *=colCover;\n   }\n   else if (materialMy.typeMat ==colBlondWood1)     \n   { \n      color = texture( iChannel1, 0.15 * hitPos.xy ).xyz + vec3(1., 0.95, 0.98);//color_2.rgb ;  \n      color *=colBox;\n   }\n   else if (materialMy.typeMat ==colMetal) \n        color = vec3(0.95, 1., 0.85);\n   else if (materialMy.typeMat ==colRed ) \n         color = vec3(0.73, 0.35, 0.22);\n   else if (materialMy.typeMat ==colBlue ) \n        color = vec3(0., 0.2, 0.9); \n   else if (materialMy.typeMat ==colEyes ) \n        color = colEyess;  \n  \n   if(materialMy.typeMat !=0. )\n   {\n      if(materialMy.typeMat == colMetal || materialMy.typeMat == 1.)\n         color.rgb =  getLighting(hitPos, rd, normal, lightDir, color);     \n      else\n         color.rgb =  getLightingFigure(hitPos, rd, normal, lightDir, color); \n   }\n    ro = hitPos;\n  return vec4(color, 1.);\n}\n\n//-------------------------------------------------\nfloat render(in vec3 posOnRay, in vec3 rayDir)\n{ \n  float t = 0.0;\n  float maxDist = 48.;\n  float d = 0.1;  \n  for(int i=0; i<MAX_ITER; ++i)\n  {\n    if (abs(d) <EPSILON || t > maxDist) \n         break;\n    t += d;\n    vec3 ro = posOnRay + t*rayDir;\n    d = renderFunction(ro);     \n  }\n\n   return t;\n}\n//------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\nspeed = sin(time * 0.7);\n\n    vec2 pos     = gl_FragCoord.xy / iResolution.xy * 2. - 1.;\n //   pos = - pos;\n    pos.x *= iResolution.x / iResolution.y;  \n\n    vec2 m = vec2(0.);\n\tif( iMouse.z>0.0 )m = iMouse.xy/iResolution.xy*M_PI*2.;\n    \n    vec3 camPos = vec3(0., 2., 15.);\n    camPos.yz=rot(camPos.yz, m.y);\n    camPos.xz=rot(camPos.yz, m.x+ 0.1*time+1.);\n    \n    vec3 camP =   camPos;//rotationCoord(camPos);  camPos;//vec3(0., 0, 10.);\n    vec3 camUp = vec3(0. , 1., 0.);\n    vec3 camDir = normalize(-camP);\n    vec3 u = normalize(cross(camUp,camDir));\n    vec3 v = cross(camDir,u);\n    vec3 rayDir = normalize(camDir * 2. + pos.x * u + pos.y * v);  \n\n    vec4 color    = vec4(1.0);\n    vec3 normal   = vec3(1.0);\n   \n    \n        \n    \n\n    vec3 posOnRay = camP; \n    float path = 0.;\n  //--------------------------- \n     path =  render(posOnRay, rayDir);  \n     color = getColorPixel(posOnRay, rayDir, normal, path, materialMy.typeMat); \n    // ----------------------------------------------------------------------\n    //Ð¢ÐµÐ½ÑŒ ÑÐ¸Ð»ÑŒÐ½Ð¾ Ñ‚Ð¾Ñ€Ð¼Ð¾Ð·Ð¸Ñ‚ Ð¿Ñ€Ð¾Ñ†ÐµÑÑ.....\n    //  float sha=shadow(posOnRay,lightDir,0.02,7.0,4.);\n    //    color.rgb *= sha;//pow(vec3(sha),vec3(1.0,1.2,2.0));\n  \n    // POST PROCESSING\n    // Gamma correct\n     color.rgb = pow(color.rgb , vec3(0.45));\n    // Contrast adjust - cute trick learned from iq\n     color.rgb  = mix( color.rgb , vec3(dot(color.rgb ,vec3(0.333))), -0.6 );\n     color.a = 1.;\n     fragColor =  color;\n\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4tBGzw","date":"1427448204","viewed":179,"name":"Box with a surprise","username":"Lio","description":"My experimentation with animation","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarching","animation"],"hasliked":0,"parentid":"","parentname":""}}