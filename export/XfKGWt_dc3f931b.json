{"ver":"0.1","info":{"id":"XfKGWt","date":"1713431623","viewed":34,"name":"LineTest776765","username":"rkgekk","description":"draw line test","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["line"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265358979323846\n\nconst vec4 bg_color = vec4(1.0, 1.0, 1.0, 1.0);\nconst float screen_wide = 2.0;\nconst float inv_sw = 1.0 / screen_wide;\n\nstruct UniformsLine {\n    mat4 modelViewProjection;\n    vec4 color;\n    vec2 dash;\n    float width;\n};\n\nstruct LineDashVertex {\n    vec3 position;\n    vec3 normal;\n    vec4 color;\n    float len;\n};\n\nstruct LineDashFragment {\n    vec4 position;\n    vec4 color;\n    vec2 halfWidth;\n    vec3 len;\n};\n\nLineDashFragment vertexDashedLine(LineDashVertex v, UniformsLine ubo) {\n    LineDashFragment result;\n\n    vec2 normal = v.normal.xy;\n    float halfWidth = ubo.width;\n    float forInterpolateDiff = v.normal.z * halfWidth;\n    result.halfWidth = vec2(forInterpolateDiff, halfWidth);\n    vec4 lineWidthOffset = vec4(v.position.xyz + vec3(normal, 0.0) * ubo.width, 1.0);\n    result.position = ubo.modelViewProjection * lineWidthOffset;\n\n    result.color = v.color * ubo.color;\n    //result.color = v.color;\n    result.len = vec3(v.len, ubo.dash);\n    return result;\n}\n\nvec4 fragDashedLine(LineDashFragment f) {\n    float resolution_y = iResolution.y;\n    float kOnePixel = screen_wide / resolution_y;\n    //float kAntialiasingPixelsCount = 1.5;\n    float kAntialiasingPixelsCount = kOnePixel * 1.5;\n\n    float currentW = abs(f.halfWidth.x);\n    float diff = f.halfWidth.y - currentW;\n    float alpha = mix(0.3, 1.0, clamp(diff / kAntialiasingPixelsCount, 0.0, 1.0));\n\n    float partLength = f.len.y + f.len.z;\n    float dashLineColor = 1.0 - step(f.len.y, mod(f.len.x, partLength));\n\n    vec4 color = f.color * alpha * dashLineColor;\n    //vec4 color = vec4(f.color.xyz, f.color.a * alpha * dashLineColor);\n\n    return color;\n}\n\nstruct LineType {\n    vec2 p0;\n    vec2 p1;\n    vec2 tangent;\n    vec2 normal;\n    float half_width;\n    float dash;\n    float gap;\n    vec4 color;\n};\n\nstruct RectType {\n    vec2 start;\n    vec2 end;\n    float width;\n};\n\nUniformsLine make_ubo(mat4 mvp, LineType line) {\n    UniformsLine ubo;\n    ubo.modelViewProjection = mvp;\n    ubo.color = line.color;\n    ubo.dash = vec2(line.dash, line.gap);\n    ubo.width = line.half_width;\n    return ubo;\n}\n\nLineType make_line(RectType rect, float dash, float gap, vec4 color) {\n    LineType line;\n    line.half_width = rect.width * 0.5;\n    //line.half_width = rect.width;\n    line.tangent = normalize(rect.end - rect.start);\n    line.normal = vec2(-line.tangent.y, line.tangent.x);\n    line.p0 = rect.start;\n    line.p1 = rect.end;\n    line.dash = dash;\n    line.gap = gap;\n    line.color = color;\n    \n    return line;\n}\n\nstruct VertexBuffer {\n    LineDashVertex v0;\n    LineDashVertex v1;\n    LineDashVertex v2;\n    LineDashVertex v3;\n};\n\nmat4 make_id() {\n    return mat4 (\n        1.0, 0.0, 0.0, 0.0,\n        0.0, 1.0, 0.0, 0.0,\n        0.0, 0.0, 1.0, 0.0,\n        0.0, 0.0, 0.0, 1.0\n    );\n}\n\nVertexBuffer make_vb(LineType line) {\n    VertexBuffer vb;\n    \n    float line_len = length(line.p1 - line.p0);\n\n    vb.v0.position = vec3(line.p0, 0.0);\n    vb.v0.normal = vec3(line.normal, -1.0);\n    //vb.v0.color = vec4(1.0, 0.0, 0.0, 1.0);\n    vb.v0.color = vec4(1.0, 1.0, 1.0, 1.0);\n    vb.v0.len = 0.0;    \n\n    vb.v1.position = vec3(line.p0, 0.0);\n    vb.v1.normal = vec3(-line.normal, 1.0);\n    //vb.v1.color = vec4(0.0, 1.0, 0.0, 1.0);\n    vb.v1.color = vec4(1.0, 1.0, 1.0, 1.0);\n    vb.v1.len = 0.0;\n\n    vb.v2.position = vec3(line.p1, 0.0);\n    vb.v2.normal = vec3(line.normal, -1.0);\n    //vb.v2.color = vec4(0.0, 0.0, 1.0, 1.0);\n    vb.v2.color = vec4(1.0, 1.0, 1.0, 1.0);\n    vb.v2.len = line_len;    \n\n    vb.v3.position = vec3(line.p1, 0.0);\n    vb.v3.normal = vec3(-line.normal, 1.0);\n    vb.v3.color = vec4(1.0, 1.0, 1.0, 1.0);\n    vb.v3.len = line_len;    \n\n    return vb;\n}\n\nmat3 rot_matrix(vec3 R, float a) {\n    float c = cos(a); float s = sin(a);\n    float x = R.x; float y = R.y; float z = R.z;\n    return mat3(\n        c + (1.0 - c)*x*x  , (1.0 - c)*x*y + s*z, (1.0 - c)*x*z - s*y,\n        (1.0 - c)*x*y - s*z, c + (1.0 - c)*y*y  , (1.0 - c)*y*z + s*x,\n        (1.0 - c)*x*z - s*y, (1.0 - c)*y*z - s*x, c + (1.0 - c)*z*z\n    );\n}\n\nvec2 rotate(vec2 p, vec2 z, float a) {\n    mat3 rot_mat = rot_matrix(vec3(0.0, 0.0, 1.0), a);\n    return (vec3((p - z), 0.0)*rot_mat).xy + z;\n}\n\nvec3 make_barycentric(vec4 V0, vec4 V1, vec4 V2, vec4 P) {\n    vec4 A1 = V1 - V0;\n    vec4 B1 = P - V0;\n    vec4 A2 = V2 - V1;\n    vec4 B2 = P - V1;\n    vec4 A3 = V0 - V2;\n    vec4 B3 = P - V2;\n    float inv_area = 1.0 / determinant(mat2(A1.xy, A2.xy));\n    float w1 = determinant(mat2(A1.xy, B1.xy))*inv_area;\n    float w2 = determinant(mat2(A2.xy, B2.xy))*inv_area;\n    float w3 = determinant(mat2(A3.xy, B3.xy))*inv_area;\n    return vec3(w1, w2, w3);\n}\n\n//https://www.scratchapixel.com/lessons/3d-basic-rendering/rasterization-practical-implementation/rasterization-stage.html\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 resolution = iResolution.xy;\n    float aspect = resolution.x/resolution.y;\n    vec2 uv = (screen_wide*fragCoord - resolution)/resolution.y;\n    \n    float kOnePixel = screen_wide / resolution.y;\n    float kHalfPixel = kOnePixel * 0.5;\n    \n    vec2 line_start = vec2(0.0, 0.0);\n    vec2 line_end = vec2(1.5, 0.0);\n    vec4 line_color = vec4(1.0, 0.0, 0.0, 1.0);\n    float line_width = kOnePixel * 10.0;\n    float line_dash = 0.5;\n    float line_gap = 0.2;\n    \n    float alpha_rad = iTime*PI;\n    \n    line_end = rotate(line_end, line_start, alpha_rad);\n    \n    vec4 result_color = bg_color;\n    \n    float line_len = length(line_end - line_start);\n    \n    RectType rect = RectType(line_start, line_end, line_width);\n    LineType line = make_line(rect, line_dash, line_gap, line_color);\n\n    UniformsLine ubo = make_ubo(make_id(), line);\n\n    VertexBuffer vb = make_vb(line);\n    LineDashFragment frag0 = vertexDashedLine(vb.v0, ubo);\n    LineDashFragment frag1 = vertexDashedLine(vb.v1, ubo);\n    LineDashFragment frag2 = vertexDashedLine(vb.v2, ubo);\n    LineDashFragment frag3 = vertexDashedLine(vb.v3, ubo);\n    \n    frag0.position = vec4(frag0.position.xyz / frag0.position.w, 1.0);\n    frag1.position = vec4(frag1.position.xyz / frag1.position.w, 1.0);\n    frag2.position = vec4(frag2.position.xyz / frag2.position.w, 1.0);\n    frag3.position = vec4(frag3.position.xyz / frag3.position.w, 1.0);\n    \n    vec4 P = vec4(uv.xy, 0.0, 1.0);\n    \n    vec3 t1_w = make_barycentric(frag0.position, frag1.position, frag2.position, P);\n    if(t1_w.x >= 0.0 && t1_w.y >= 0.0 && t1_w.z >= 0.0) {\n        \n        LineDashFragment f;\n        f.position  = frag0.position  * t1_w.y + frag1.position  * t1_w.z + frag2.position  * t1_w.x;\n        f.color     = frag0.color     * t1_w.y + frag1.color     * t1_w.z + frag2.color     * t1_w.x;\n        f.halfWidth = frag0.halfWidth * t1_w.y + frag1.halfWidth * t1_w.z + frag2.halfWidth * t1_w.x;\n        f.len       = frag0.len       * t1_w.y + frag1.len       * t1_w.z + frag2.len       * t1_w.x;\n        vec4 color = fragDashedLine(f);\n        result_color = mix(result_color, color, color.a);\n    }\n    \n    vec3 t2_w = make_barycentric(frag1.position, frag3.position, frag2.position, P);\n    if(t2_w.x >= 0.0 && t2_w.y >= 0.0 && t2_w.z >= 0.0) {\n        \n        LineDashFragment f;\n        f.position  = frag1.position  * t2_w.y + frag3.position  * t2_w.z + frag2.position  * t2_w.x;\n        f.color     = frag1.color     * t2_w.y + frag3.color     * t2_w.z + frag2.color     * t2_w.x;\n        f.halfWidth = frag1.halfWidth * t2_w.y + frag3.halfWidth * t2_w.z + frag2.halfWidth * t2_w.x;\n        f.len       = frag1.len       * t2_w.y + frag3.len       * t2_w.z + frag2.len       * t2_w.x;\n        vec4 color = fragDashedLine(f);\n        result_color = mix(result_color, color, color.a);\n    }\n    \n    fragColor = result_color;\n}","name":"Image","description":"","type":"image"}]}