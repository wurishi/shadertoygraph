{"ver":"0.1","info":{"id":"NdsXRS","date":"1618842141","viewed":65,"name":"Building_in_sphere","username":"Chris1ps","description":"By Gleb Afanasyev\nЗдание в тумане внутри шара.\nБонусы:\nМягкие тени(+2-3)\nОкружение в виде текстурированной плоскости (+1)\nОкружение в виде текстурированного куб-мапа (+2)\nАнти-алиасинг (+2)\nAmbient Occlusion (+2-4)","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["raytracing","building"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv) / float(iFrame + 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4sfGRr","filepath":"/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","previewfilepath":"/media/ap/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","type":"volume","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float INF = 1e10;\nconst vec3 CAMERA_POS = vec3(0.0, 1.2, -6);\nconst vec3 LIGHT1_POS = vec3(-3, 1.5, 5);\nconst float LIGHT1_RADIUS = 0.5;\nconst vec3 LIGHT1_COLOR = vec3(1, 1, 1);\n\nconst vec3 LIGHT2_POS = vec3(1, 0.5, 2);\nconst float LIGHT2_RADIUS = 0.25;\nconst vec3 LIGHT2_COLOR = vec3(0.0, 0.9, 0.9);\n\nconst vec3 LIGHT3_POS = vec3(2, -0.2, 2);\nconst float LIGHT3_RADIUS = 0.2;\nconst vec3 LIGHT3_COLOR = vec3(1.0, 1.0, 0.0);\n\nvec3 randDir;\n\nconst vec3 FOG_POS = vec3(1, 0.5, 2);\nconst float LFOG_RADIUS = 1.0;\n//const vec3 LIGHT2_COLOR = vec3(0.0, 0.9, 0.9);\n\nconst vec3 BUILDING_CENTRE = vec3(0, -0.1, 0);\nconst vec3 BUILDING_COLOR = vec3(0.3, 0.4, 0.3);\n\nconst float a = 0.15;\nconst vec3 Build1 = vec3(-1.8 * a, -a * 2.0, a*0.7) + BUILDING_CENTRE;\nconst vec3 Build2 = vec3(-2.0 * a, -a * 2.0, -a*0.7) + BUILDING_CENTRE;\nconst vec3 Build3 = vec3(1.8 * a, -a * 2.0, -a*0.7) + BUILDING_CENTRE;\nconst vec3 Build4 = vec3(2.0 * a, -a * 2.0, a*0.7) + BUILDING_CENTRE;\n\nconst vec3 Build5 = vec3(-1.5 * a, 3.5 * a, a) + BUILDING_CENTRE;\nconst vec3 Build6 = vec3(-2.0 * a, 3.5 * a, -a) + BUILDING_CENTRE;\nconst vec3 Build7 = vec3(1.8 * a, 3.5 * a, -a) + BUILDING_CENTRE;\nconst vec3 Build8 = vec3(2.0 * a, 3.5 * a, a) + BUILDING_CENTRE;\n\n\nconst int NUM_WINDOWS = 6;\nconst float W_RAD = 0.02;\nconst vec3 WINDOW_CENTRE = vec3(0, 0, -0.1);\nconst vec3 WINDOW_COLOR = vec3(0.8, 0.8, 0);\n\nconst vec3 WINDOW11 = vec3(-1.04 * a, 0.0, -a) + WINDOW_CENTRE;\nconst vec3 WINDOW12 = vec3(-0.28 * a, 0.0, -a) + WINDOW_CENTRE;\nconst vec3 WINDOW13 = vec3(-0.28 * a, 1.2 * a, -a) + WINDOW_CENTRE;\nconst vec3 WINDOW14 = vec3(-1.04 * a, 1.2 * a, -a) + WINDOW_CENTRE;\nconst vec3 WPOS1 = vec3(-0.68 * a, 0.6 * a, -a-0.01);\n\nconst vec3 WINDOW21 = vec3(0.48 * a, 0.0, -a) + WINDOW_CENTRE;\nconst vec3 WINDOW22 = vec3(1.24 * a, 0.0, -a) + WINDOW_CENTRE;\nconst vec3 WINDOW23 = vec3(1.24 * a, 1.2 * a, -a) + WINDOW_CENTRE;\nconst vec3 WINDOW24 = vec3(0.48 * a, 1.2 * a, -a) + WINDOW_CENTRE;\nconst vec3 WPOS2 = vec3(0.85 * a, 0.6 * a, -a-0.01);\n\nconst vec3 WINDOW31 = vec3(0.48 * a, 2.7 * a, -a) + WINDOW_CENTRE;\nconst vec3 WINDOW32 = vec3(1.24 * a, 2.7 * a, -a) + WINDOW_CENTRE;\nconst vec3 WINDOW33 = vec3(1.24 * a, 1.5 * a, -a) + WINDOW_CENTRE;\nconst vec3 WINDOW34 = vec3(0.48 * a, 1.5 * a, -a) + WINDOW_CENTRE;\nconst vec3 WPOS3 = vec3(0.85 * a, 2.1 * a, -a-0.11);\n\nconst vec3 WINDOW41 = vec3(-1.04 * a, 2.7 * a, -a) + WINDOW_CENTRE;\nconst vec3 WINDOW42 = vec3(-0.28 * a, 2.7 * a, -a) + WINDOW_CENTRE;\nconst vec3 WINDOW43 = vec3(-0.28 * a, 1.5 * a, -a) + WINDOW_CENTRE;\nconst vec3 WINDOW44 = vec3(-1.04 * a, 1.5 * a, -a) + WINDOW_CENTRE;\nconst vec3 WPOS4 = vec3(-0.68 * a, 2.1 * a, -a-0.01);\n\nconst vec3 WINDOW51 = vec3(0.48 * a, -0.2 * a, -a) + WINDOW_CENTRE;\nconst vec3 WINDOW52 = vec3(1.24 * a, -0.2 * a, -a) + WINDOW_CENTRE;\nconst vec3 WINDOW53 = vec3(1.24 * a, -1.4 * a, -a) + WINDOW_CENTRE;\nconst vec3 WINDOW54 = vec3(0.48 * a, -1.4 * a, -a) + WINDOW_CENTRE;\nconst vec3 WPOS5 = vec3(0.85 * a, -0.8 * a, -a-0.01);\n\nconst vec3 WINDOW61 = vec3(-1.04 * a, -0.2 * a, -a) + WINDOW_CENTRE;\nconst vec3 WINDOW62 = vec3(-0.28 * a, -0.2 * a, -a) + WINDOW_CENTRE;\nconst vec3 WINDOW63 = vec3(-0.28 * a, -1.4 * a, -a) + WINDOW_CENTRE;\nconst vec3 WINDOW64 = vec3(-1.04 * a, -1.4 * a, -a) + WINDOW_CENTRE;\nconst vec3 WPOS6 = vec3(-0.68 * a, -0.8 * a, -a-0.01);\n\n// (CAMERA_POS + t * viewVec).y == -1\n// t = (-1 - CAMERA_POS.y) / viewVec.y;\nfloat tracePlane(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.2 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    \n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) >= 100.0) {\n        return INF;\n    }\n    normal = vec3(0, 1, 0);\n    return t;\n}\n\nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal) {\n    // dot(pos + t * dir, pos + t * dir) == r * r;\n    // dot(pos, pos) + 2 * t * dot(pos, dir) + t * t * dot(dir, dir) == r * r\n    // t * t + 2.0 * t * dot(pos, dir) + dot(pos, pos) - r * r == 0\n    float a = dot(dir, dir);\n    float b = dot(pos, dir);\n    float c = dot(pos, pos) - r * r;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    float t = -b - sqrt(D);\n    if (t > 0.0) {\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    t = -b + sqrt(D);\n    if (t < 0.0) {\n        return INF;\n    }\n    normal = normalize(pos + t * dir);\n    return t;\n}\n\nfloat traceCylinder(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.0 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) < 0.5) {\n        normal = vec3(0, 1, 0);\n        return t;\n    }\n    \n    // dot(pos + t * dir, pos + t * dir) == r * r;\n    // dot(pos, pos) + 2 * t * dot(pos, dir) + t * t * dot(dir, dir) == r * r\n    // t * t + 2.0 * t * dot(pos, dir) + dot(pos, pos) - r * r == 0\n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - 0.5;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    t = (-b - sqrt(D)) / a;\n    if (t > 0.0) {\n        worldPos = t * dir + pos;\n        if (worldPos.y <= -1.0) {\n            normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n            return t;\n        }\n    }\n    t = (-b + sqrt(D)) / a;\n    if (t < 0.0) {\n        return INF;\n    }\n    worldPos = t * dir + pos;\n    if (worldPos.y <= -1.0) {\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    }\n    return INF;\n}\n\nbool isOccluded(vec3 pos, vec3 target) {\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n    \n    vec3 sphNorm;\n    float sphT = traceSphere(pos, dir, 1.0, sphNorm);\n    if (sphT < dist)\n        return true;\n    vec3 cylNorm;\n    float cylT = traceCylinder(pos, dir, cylNorm);\n    return (cylT < dist);\n}\n\nfloat traceSquare(vec3 pos, vec3 dir, out vec3 normal, vec3 V1, vec3 V2, vec3 V3, vec3 V4) {\n    vec3 norm = normalize(cross(V1 - V4, V3 - V4)); \n    float dirnorm = dot(dir, norm);\n\tfloat t = dot(V4 - pos, norm) / dirnorm;\n    if (t < 0.0){\n        return INF;\n    }\n    vec3 worldPos = pos + t * dir;\n    vec3 norm1 = normalize(cross(V2 - V1, worldPos - V1));\n    vec3 norm2 = normalize(cross(V3 - V2, worldPos - V2));\n    vec3 norm3 = normalize(cross(V4 - V3, worldPos - V3));\n    vec3 norm4 = normalize(cross(V1 - V4, worldPos - V4));\n    if (dot(norm3 - norm, norm3 - norm) > 1.0 || dot(norm2 - norm, norm2 - norm) > 1.0\n        || dot(norm1 - norm, norm1 - norm) > 1.0 || dot(norm4 - norm, norm4 - norm) > 1.0){\n        return INF;\n    }\n    return t;\n}\n\n//vec3 compute_dist_to_square(vec3 pos, vec3 A, vec3 B, vec3 C, vec3 D)\n//{\n//    \n//}\n\nvec3 computeLight(vec3 pos, vec3 color, vec3 normal) {\n    vec3 toLight1 = LIGHT1_POS - pos;\n    float distSq1 = dot(toLight1, toLight1);\n    float att1 = isOccluded(pos, LIGHT1_POS + randDir * LIGHT1_RADIUS) ? 0.0 : 20.0f / distSq1;\n    \n    vec3 toLight2 = LIGHT2_POS - pos;\n    float distSq2 = dot(toLight2, toLight2);\n    float att2 = isOccluded(pos, LIGHT2_POS + randDir * LIGHT2_RADIUS) ? 0.0 : 10.0f / distSq2;\n    \n    vec3 toLight3 = WPOS3 - pos;\n    float distSq3 = dot(toLight3, toLight3);\n    float att3 = isOccluded(pos, WPOS3 + randDir * W_RAD) ? 0.0 : 30.0f / distSq3;\n    \n    vec3 toLight4 = WPOS4 - pos;\n    float distSq4 = dot(toLight4, toLight4);\n    float att4 = isOccluded(pos, WPOS4 + randDir * W_RAD) ? 0.0 : 30.0f / distSq4;\n    \n    vec3 toLight5 = WPOS6 - pos;\n    float distSq5 = dot(toLight5, toLight5);\n    float att5 = isOccluded(pos, WPOS5 + randDir * W_RAD) ? 0.0 : 30.0f / distSq5;\n    \n    vec3 toLight6 = WPOS2 - pos;\n    float distSq6 = dot(toLight6, toLight6);\n    float att6 = isOccluded(pos, WPOS6 + randDir * W_RAD) ? 0.0 : 30.0f / distSq6;\n    \n    vec3 toLight7 = LIGHT3_POS - pos;\n    float distSq7 = dot(toLight7, toLight7);\n    float att7 = isOccluded(pos, LIGHT3_POS + randDir *LIGHT3_RADIUS) ? 0.0 : 30.0f / distSq7;\n    \n    return color * (\n        max(0.0, dot(normal, normalize(toLight1))) * att1 * LIGHT1_COLOR\n        + max(0.0, dot(normal, normalize(toLight2))) * att2 * LIGHT2_COLOR\n        + max(0.0, dot(normal, normalize(toLight3))) * att3 * WINDOW_COLOR\n        + max(0.0, dot(normal, normalize(toLight4))) * att4 * WINDOW_COLOR\n        + max(0.0, dot(normal, normalize(toLight5))) * att5 * WINDOW_COLOR\n        + max(0.0, dot(normal, normalize(toLight6))) * att6 * WINDOW_COLOR\n        + max(0.0, dot(normal, normalize(toLight6))) * att7 * LIGHT3_COLOR\n        + texture(iChannel1, normal).rgb * 0.1\n    );\n}\n\nvec3 refraction(vec3 v, vec3 normal, float n1, float n2) {\n    if (dot(v, normal) < 0.0) {\n        normal = -normal;\n    }\n    float cosA = dot(v, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3 tang = normalize(v - cosA * normal);\n    float sinB = sinA / n2 * n1;\n    float cosB = sqrt(1.0 - sinB * sinB);\n    return sinB * tang + cosB * normal;\n}\n\nfloat pow2(float x) {\n    return x * x;\n}\n\nfloat rand(float frame)\n{\n    return fract(sin( dot(vec3(frame), vec3(12.9898,78.233,45.5432) )) * 43758.5453);\n}\n\nfloat fogSdf(vec3 pos)\n{\n    return length(pos) - 1.15;\n}\n\nfloat BeerLambert(float absorptionCoefficient, float distanceTraveled)\n{\n    return exp(-absorptionCoefficient * distanceTraveled);\n}\n\nvec4 sampleFog(vec3 pos, vec3 dir)\n{\n    float t = fogSdf(pos);\n    const float MARCH_SIZE = 0.01;\n    float opacity = 1.0;\n    float absorption = 10.0;\n    float totalAbs = 5.0;\n    for (int i = 0; i < 50; ++i) {\n        vec3 curPos = pos + (float(i) * MARCH_SIZE + t) * dir;\n        float sdf = fogSdf(curPos);\n        if (sdf < 0.0) {\n            float prevOpacity = opacity;\n            opacity *= BeerLambert(absorption * (\n            texture(iChannel3, curPos * 0.2).x\n            + texture(iChannel3, curPos * 0.4).x\n            + texture(iChannel3, curPos * 0.8).x\n            + texture(iChannel3, curPos * 1.6).x\n            ) * 0.25 * abs(sdf), MARCH_SIZE);\n            float absorptionLastStep = prevOpacity - opacity;\n            totalAbs += absorptionLastStep;\n        }\n    }\n    return vec4(vec3(0.9, 0.09, 0.36) * totalAbs, 1.0 - opacity);\n}\n\n//float sphereSdf(vec3 pos) {\n  //  float scale = mix(0.25, 1.0, 0.0);\n    //return length((pos - SPHERE_POS) * vec3(scale, 1.0, scale)) - SPHERE_RADIUS;\n//}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    randDir = normalize(randVals - 0.5);\n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (randVals.xy - 0.5)) / iResolution.x;\n    vec3 front = normalize(-CAMERA_POS);\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = normalize(cross(front, up));\n    up = normalize(cross(right, front));\n    vec3 viewVec = normalize(front + right * uv.x + up * uv.y);\n    \n    const int EMISSION = 0;\n    const int DIFFUSE = 1;\n    const int REFLECTION = 2;\n    const int REFRACTION = 3;\n    \n    vec3 curPos = CAMERA_POS;\n    vec3 curDir = viewVec;\n    const float GLASS_N = 1.5;\n    const float AIR_N = 1.0;\n    float n1 = AIR_N;\n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N + GLASS_N);\n    const float DIAMOND_N = 2.5;\n    float DIAMOND_R = pow2(DIAMOND_N - GLASS_N) / pow2(DIAMOND_N + GLASS_N);\n    \n    vec3 colorMult = vec3(1, 1, 1);\n    float mult = 1.0;\n    \n    for (int i = 0; i < 10; ++i) {\n        float t = INF;\n        int materialType;\n        vec3 color;\n        vec3 normal;\n        float nEnter = AIR_N;\n        \n        vec3 planeNorm;\n        float planeT = tracePlane(curPos, curDir, planeNorm);\n        if (planeT < t) {\n            t = planeT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel0, worldPos.xz * 0.1).rgb;\n            normal = planeNorm;\n            if (randVals.x < 0.2) {\n                materialType = REFLECTION;\n            }\n        }\n        \n        \n        \n        vec3 squareNorm;\n        float squareT = traceSquare(curPos, curDir, squareNorm, Build1, Build2, Build3, Build4);\n        if (squareT < t) {\n            vec3 worldPos = t * curDir + curPos;\n            t = squareT;\n            materialType = EMISSION;\n            normal = squareNorm;\n            color = BUILDING_COLOR;\n        }\n        squareT = traceSquare(curPos, curDir, squareNorm, Build1, Build2, Build5, Build6);\n        if (squareT < t) {\n            vec3 worldPos = t * curDir + curPos;\n            t = squareT;\n            materialType = EMISSION;\n            normal = squareNorm;\n            color = BUILDING_COLOR;\n        }\n        squareT = traceSquare(curPos, curDir, squareNorm, Build1, Build4, Build5, Build8);\n        if (squareT < t) {\n            vec3 worldPos = t * curDir + curPos;\n            t = squareT;\n            materialType = EMISSION;\n            normal = squareNorm;\n            color = BUILDING_COLOR;\n        }\n        squareT = traceSquare(curPos, curDir, squareNorm, Build3, Build2, Build6, Build7);\n        if (squareT < t) {\n            vec3 worldPos = t * curDir + curPos;\n            t = squareT;\n            materialType = EMISSION;\n            normal = squareNorm;\n            color = BUILDING_COLOR;\n        }\n        squareT = traceSquare(curPos, curDir, squareNorm, Build4, Build3, Build7, Build8);\n        if (squareT < t) {\n            vec3 worldPos = t * curDir + curPos;\n            t = squareT;\n            materialType = EMISSION;\n            normal = squareNorm;\n            color = vec3(0.3, 0, 0);\n        }\n        squareT = traceSquare(curPos, curDir, squareNorm, Build5, Build6, Build7, Build8);\n        if (squareT < t) {\n            vec3 worldPos = t * curDir + curPos;\n            t = squareT;\n            materialType = EMISSION;\n            normal = squareNorm;\n            color = vec3(0.1, 0.1, 0.1);\n        }\n        \n        \n        \n        \n        vec3 windowNorm;\n        float windowT = traceSquare(curPos, curDir, windowNorm, WINDOW11, WINDOW12, WINDOW13, WINDOW14);\n        if (windowT < t) {\n            t = windowT;\n            if (randVals.x < 0.7) {\n                materialType = REFLECTION;\n            }else{\n                materialType = EMISSION;\n            }\n            normal = windowNorm;\n            color = vec3(0.8, 0.8, 0);\n        }\n        windowT = traceSquare(curPos, curDir, windowNorm, WINDOW21, WINDOW22, WINDOW23, WINDOW24);\n        if (windowT < t) {\n            t = windowT;\n            materialType = EMISSION;\n            normal = windowNorm;\n            color = vec3(0.8, 0.8, 0);\n        }\n        \n        windowT = traceSquare(curPos, curDir, windowNorm, WINDOW31, WINDOW32, WINDOW33, WINDOW34);\n        if (windowT < t) {\n            t = windowT;\n            materialType = EMISSION;\n            normal = windowNorm;\n            color = vec3(0.8, 0.8, 0);\n        }\n        \n        windowT = traceSquare(curPos, curDir, windowNorm, WINDOW41, WINDOW42, WINDOW43, WINDOW44);\n        if (windowT < t) {\n            t = windowT;\n            materialType = EMISSION;\n            normal = windowNorm;\n            color = vec3(0.8, 0.8, 0);\n        }\n        \n        windowT = traceSquare(curPos, curDir, windowNorm, WINDOW51, WINDOW52, WINDOW53, WINDOW54);\n        if (windowT < t) {\n            t = windowT;\n            if (randVals.x < 0.7) {\n                materialType = REFLECTION;\n            }else{\n                materialType = EMISSION;\n            }\n            normal = windowNorm;\n            color = vec3(0.8, 0.8, 0);\n        }\n        \n        windowT = traceSquare(curPos, curDir, windowNorm, WINDOW61, WINDOW62, WINDOW63, WINDOW64);\n        if (windowT < t) {\n            t = windowT;\n            materialType = EMISSION;\n            normal = windowNorm;\n            color = vec3(0.8, 0.8, 0);\n        }\n        \n        vec3 l1Norm;\n        float light1T = traceSphere(curPos - LIGHT1_POS, curDir, LIGHT1_RADIUS, l1Norm);\n        if (light1T < t) {\n            t = light1T;\n            materialType = EMISSION;\n            color = LIGHT1_COLOR;\n            normal = l1Norm;\n        }\n        vec3 l2Norm;\n        float light2T = traceSphere(curPos - LIGHT2_POS, curDir, LIGHT2_RADIUS, l2Norm);\n        if (light2T < t) {\n            t = light2T;\n            materialType = EMISSION;\n            color = LIGHT2_COLOR;\n            normal = l2Norm;\n        }\n        \n        vec3 l3Norm;\n        float light3T = traceSphere(curPos - WPOS3, curDir, W_RAD, l3Norm);\n        if (light3T < t) {\n            t = light3T;\n            materialType = EMISSION;\n            color = WINDOW_COLOR;\n            normal = l3Norm;\n        }\n                \n        vec3 l4Norm;\n        float light4T = traceSphere(curPos - WPOS4, curDir, W_RAD, l4Norm);\n        if (light3T < t) {\n            t = light4T;\n            materialType = EMISSION;\n            color = WINDOW_COLOR;\n            normal = l4Norm;\n        }\n                \n        vec3 l5Norm;\n        float light5T = traceSphere(curPos - WPOS6, curDir, W_RAD, l5Norm);\n        if (light5T < t) {\n            t = light5T;\n            materialType = EMISSION;\n            color = WINDOW_COLOR;\n            normal = l5Norm;\n        }\n\n        vec3 l6Norm;\n        float light6T = traceSphere(curPos - WPOS2, curDir, W_RAD, l6Norm);\n        if (light6T < t) {\n            t = light6T;\n            materialType = EMISSION;\n            color = WINDOW_COLOR;\n            normal = l6Norm;\n        }\n\n        vec3 l7Norm;\n        float light7T = traceSphere(curPos - LIGHT3_POS, curDir, LIGHT3_RADIUS, l7Norm);\n        if (light7T < t) {\n            t = light7T;\n            materialType = EMISSION;\n            color = LIGHT3_COLOR;\n            normal = l7Norm;\n        }\n        \n        vec3 sphNorm;\n        float sphT = traceSphere(curPos, curDir, 1.0, sphNorm);\n        if (sphT < t) {\n            t = sphT;\n            normal = sphNorm;\n            if (randVals.x < 0.2) {\n                materialType = REFLECTION;\n            } else if (randVals.x < 0.4){\n                vec3 worldPos = t * curDir + curPos;\n                materialType = EMISSION;\n                vec4 fog = sampleFog(worldPos, viewVec);\n                color = fog.rgb * fog.a * mult;\n                mult *= 1.0 - fog.a;\n            } else {\n                colorMult *= vec3(0.5, 0.8, 0.5);\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = AIR_N;\n                } else {\n                    nEnter = GLASS_N;\n                }\n            }\n        }\n        //float sph2T = traceSphere(curPos, curDir, 0.25, sphNorm);\n        //if (sph2T < t) {\n          //  t = sph2T;\n            //normal = sphNorm;\n            //if (randVals.x < DIAMOND_R) {\n              //  materialType = REFLECTION;\n            //} else {\n              //  colorMult *= vec3(1, 0.5, 0.75);\n                //materialType = REFRACTION;\n                //if (dot(curDir, normal) > 0.0) {\n                  //  nEnter = GLASS_N;\n                //} else {\n                  //  nEnter = DIAMOND_N;\n                //}\n            //}\n        //}\n        vec3 cylNorm;\n        float cylT = traceCylinder(curPos, curDir, cylNorm);\n        if (cylT < t) {\n            t = cylT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel2, worldPos.xz * worldPos.y).rgb;\n            normal = cylNorm;\n        }\n        if (t != INF) {\n            vec3 worldPos = t * curDir + curPos;\n            fragColor = texture(iChannel0, worldPos.xz);\n            if (materialType == EMISSION) {\n                fragColor.rgb = color * colorMult;\n                break;\n            } else if (materialType == DIFFUSE) {\n                fragColor.rgb = computeLight(worldPos, color, normal) * colorMult;\n                break;\n            } else if (materialType == REFLECTION) {\n                curDir = reflect(curDir, normal);\n                curPos = worldPos + curDir * 1e-5;\n            } else if (materialType == REFRACTION) {\n                curDir = refraction(curDir, normal, n1, nEnter);\n                curPos = worldPos + curDir * 1e-5;\n                n1 = nEnter;\n            }\n        } else {\n            fragColor.rgb = texture(iChannel1, curDir).rgb * colorMult;\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv) + texture(iChannel1, uv);\n}","name":"Buffer B","description":"","type":"buffer"}]}