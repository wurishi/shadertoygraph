{"ver":"0.1","info":{"id":"sscBzM","date":"1656214955","viewed":99,"name":"Horizon Generator","username":"jovem_bacon","description":"Generates a horizon given the camera specifications and its position","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["curvature","horizon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Variables (meters)\nfloat earth_radius  = 6371000.0;\nfloat camera_height = 10000.0;\nfloat sensor_width  = 0.036; // 36 mm = full-frame\nfloat focal_length  = 0.050;\n\n// Orientation (degrees)\nfloat dip  = 3.0;\nfloat roll = 0.0;\n\n// Colors\nvec3 sky_color   = vec3(0.5, 0.7, 1.0);\nvec3 earth_color = vec3(0.0, 0.5, 1.0);\n\nconst float pi = 3.141592653589793;\n\nvoid mainImage(\n    out vec4 fragColor,\n    in vec2 fragCoord\n) {\n    // Rate in which the ray gets away from the line of sight\n    float slope_x = sensor_width/2.0/focal_length;\n    float slope_y = slope_x/iResolution.x*iResolution.y;\n    \n    // Camera is above the earth in the y axis\n    vec3 camera_pos = vec3(0.0, earth_radius + camera_height, 0.0);\n    \n    // Normalized coordinate of the pixel (the center of the screen is 0,0)\n    vec2 n = fragCoord/iResolution.xy*2.0 - vec2(1.0, 1.0);\n    \n    // Turn degrees into radians\n    dip  = dip  * pi/180.0;\n    roll = roll * pi/180.0;\n    \n    // Ray from the camera to the direction of the current pixel\n    vec3 ray_dir = normalize(vec3(n.x*slope_x, n.y*slope_y, -1.0));\n    \n    // Rotate the ray clockwise (apply the roll)\n    ray_dir = ray_dir*mat3(\n\t\tcos(roll), sin(roll), 0.0,\n\t\t-sin(roll), cos(roll), 0.0,\n\t\t0.0, 0.0, 1.0\n    );\n    \n    // Tilt the ray down (apply the dip)\n    ray_dir = ray_dir*mat3(\n        1.0,       0.0,      0.0,\n        0.0,  cos(dip), sin(dip),\n        0.0, -sin(dip), cos(dip)\n    );\n    \n    // t of closest point to the center of the earth in the ray line\n    float t = dot(ray_dir, - camera_pos);\n    \n    // Closest point to the center of the earth in the ray line\n    vec3 closest = camera_pos + ray_dir*t;\n    \n    // Closest distance between the ray and the center of the earth\n    float dist = length(closest);\n    \n    if (dist > earth_radius || t < 0.0) {\n\n        // Doesn't hit the earth\n        fragColor = vec4(sky_color, 1.0);\n        \n    } else {\n        \n        // Hits the earth\n        fragColor = vec4(earth_color, 1.0);\n    }\n}","name":"Image","description":"","type":"image"}]}