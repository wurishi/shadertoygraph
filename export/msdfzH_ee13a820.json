{"ver":"0.1","info":{"id":"msdfzH","date":"1696883633","viewed":29,"name":"Laser diffraction","username":"cat_0x00","description":"Interference pattern of multiple lasers","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["physics","laser"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define sint (sin(iTime))\n#define cost (cos(iTime))\n#define G 9.81\n#define pi 3.1415\n#define c 3e8\n#define h 6.626e-34\n#define h_b h/(4*pi)\n#define voffset (-iResolution.y / 2.)\n#define green 3.*iResolution.x/iResolution.y\n#define slit_w (iResolution.x/green)\n#define slit_h (slit_w/1.1)\n#define def_dist (3. * iResolution.x)\n#define I_0 1.\n#define slit_sp slit_w\n\nfloat sq(float x){\n    return x * x;\n}\n\nfloat dsq(vec2 v1, vec2 v2){\n    return sq(distance(v1,v2));\n}\n\nvec2 norm(vec2 fragCoord){\n    return (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n}\n\nfloat phase_angle(float theta, float wl){\n    return 2.*pi*slit_w*sin(theta)/wl;\n}\n\nfloat sqs(float x){\n    return sq(sin(x))/sq(x);\n}\n\nfloat intensity_at(float x, float y, float i0, float dist, float wl, float slit_width, float slit_height){\n    float itx=(pi*slit_width*x)/(wl*dist);\n    float ity=(pi*slit_height*y)/(wl*dist);\n    return i0 * (sqs(ity) + sqs(itx));\n}\n\nvec3 screen_response(float i){\n    return sqrt(vec3(i) * vec3(1.5, 1., 1.));\n}\n\nvoid intensity(out vec4 fragColor, vec2 slitCoord, vec2 uv, float wl, float t, float i_0, vec4 baseColor){\n    float x_rel = abs(uv.x - slitCoord.x + (slit_w / 2.));\n    float y_rel = abs(uv.y - slitCoord.y + (slit_h / 2.));\n    fragColor.xyz += baseColor.xyz * screen_response(intensity_at(x_rel, \n                                y_rel,\n                                i_0, \n                                def_dist,\n                                wl, \n                                slit_w,\n                                slit_h));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = norm(fragCoord);\n    fragColor = vec4(vec3(0.), 0.1); // make everything black\n    \n    vec2 rpos=vec2(iResolution.x-fragCoord.x-2.*(slit_w/3.)+slit_sp* (1.+cost/5.)/2.9, iResolution.y-(fragCoord.y*(1.5+cost/2.)));\n    intensity(fragColor, \n        rpos, \n        uv,\n        green * 1., \n        iTime, I_0 *(5.-4.9*sint),\n        vec4(.2,.1,.1,.5));\n    vec2 bpos = vec2(iResolution.x* (1.-sint/20.)-fragCoord.x-2.*(slit_w/3.)+slit_sp/2.9,iResolution.y-(fragCoord.y*(1.5+sint/2.)));\n    intensity(fragColor, \n        rpos*.1+ bpos, \n        uv,\n        green * 1., \n        iTime, (1.5-sint) * I_0*1.,\n        vec4(.0,0.,.8,.5));\n        \n    intensity(fragColor, \n        bpos*.2+rpos*.1+(vec2(iResolution.x* (1.1-sint/20.)-fragCoord.x-2.*(slit_w/3.)+slit_sp/2.9,iResolution.y-(fragCoord.y*(1.3+sint/2.)))), \n        uv,\n        green * 1., \n        iTime, (1.5-sint) * I_0,\n        vec4(.0,.3,.1,.5));\n        \n}","name":"Image","description":"","type":"image"}]}