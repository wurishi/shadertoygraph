{"ver":"0.1","info":{"id":"NsdXzf","date":"1633642754","viewed":306,"name":"Torus Hive","username":"Flopine","description":"Still playing with torus knot :D ","likes":36,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","animation","glow","isometric","knot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan, slerpy, wwrighter \n// BigWings, FabriceNeyret and Blackle for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  \n// https://twitter.com/CookieDemoparty\n\n\n// Based on BigWings tuts ~ https://youtu.be/2dzJZx0yngg\n\n\n#define PI acos(-1.)\n#define TAU (2.*PI)\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n\n#define hash21(x) fract(sin(dot(x,vec2(26.4,32.87)))*467.5)\n#define dt(sp) fract(iTime*sp)\n\nfloat hexa (vec2 p)\n{\n    p=abs(p);\n    return max(p.x,dot(p,normalize(vec2(1.,sqrt(3.)))));\n}\n\nfloat torus (vec3 p, vec2 rs)\n{\n    vec2 q = vec2(hexa(p.xy)-rs.x,p.z);\n    float a = atan(p.y, p.x);\n    q *= rot(a+iTime);\n    q = abs(abs(q)-.6)-0.3;\n    \n    return hexa(q)-rs.y;\n}\n\nfloat g1=0.;\nfloat SDF (vec3 p)\n{\n    p.yz *= rot(-atan(1./sqrt(2.)));\n    p.xz*=rot(PI/4.);\n    \n    float t = torus(p.xzy,vec2(3.,0.3));\n    p.y -= sin(dt(0.1)*TAU)*.5+.5;\n    float s = length(p)-0.8;\n    g1 += 0.01/(0.01+s*s);\n    \n    float d = min(t,s); \n    \n    return d;\n}\n\nvec3 getnorm(vec3 p)\n{\n    vec2 eps = vec2(0.001,0.);\n    return normalize(SDF(p)-vec3(SDF(p-eps.xyy),SDF(p-eps.yxy),SDF(p-eps.yyx)));\n}\n\nfloat AO (float eps, vec3 p, vec3 n)\n{return clamp(SDF(p+eps*n)/eps,0.,1.);}\n\nfloat spec (vec3 n, vec3 l, vec3 rd)\n{\n    vec3 h = normalize(l-rd);\n    return pow(max(dot(n,h),0.),35.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    \n    float dither = hash21(uv);\n    vec3 ro=vec3(uv*3.8,-50.),rd=normalize(vec3(0.,0.0,1.)),p=ro,\n    col=vec3(0.),l=vec3(1.,2.,-2.);\n    \n    bool hit=false;\n    for (float i=0.; i<100.; i++)\n    {\n        float d = SDF(p);\n        if (d<0.01)\n        {\n            hit=true;break;\n        }\n        d *= .75+dither*0.15;\n        p += d*rd;\n    }\n    \n    if (hit)\n    {\n        vec3 n = getnorm(p);\n        \n        float light = max(dot(n,normalize(l)),0.),\n        ao=AO(0.1,p,n)+AO(0.25,p,n)+AO(0.65,p,n),\n        s = spec(n,l,rd);\n        \n        col = mix(vec3(0.5,0.1,0.5),vec3(0.,0.3,0.8),light)*ao/3.+s*vec3(0.,0.8,0.2);\n    }\n    col += g1*0.5;\n    \n    fragColor = vec4(sqrt(col),1.0);\n}","name":"Image","description":"","type":"image"}]}