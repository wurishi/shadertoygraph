{"ver":"0.1","info":{"id":"lsKfDG","date":"1530335917","viewed":139,"name":"Fourier Spectrum","username":"renderboy","description":"Fourier Spectrum","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fourier"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define M_PI 3.141592\n\n#define GAMMA (1.0 / 10.0)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n   \t// Center Origin is O(0,0)\n    uv = 2.0 * uv - 1.0;\n    \n    // Maximum intensities \n    float X = iMouse.x * GAMMA;\n\tfloat Y = iMouse.y * GAMMA;\n    \n    if (iMouse.xy == vec2(0.0))\n    {\n        X = 10.0; Y = 10.0;\n    }\n    \n    float A = 1.0;\t//amplitude\n    \n    float COEF_X = sin(M_PI * uv.x * X) / (M_PI * uv.x * X);    \n    float COEF_Y = sin(M_PI * uv.y * Y) / (M_PI * uv.y * Y);\n\n    float F_UV = A*X*Y*abs(COEF_X*COEF_Y);\n    \n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = vec4(vec3(F_UV),1.0);\n}","name":"Image","description":"","type":"image"}]}