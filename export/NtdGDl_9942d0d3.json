{"ver":"0.1","info":{"id":"NtdGDl","date":"1636953483","viewed":127,"name":"Chaos Game - Sierpinski Gasket","username":"oneshade","description":"What?!\n---> [url=https://www.youtube.com/watch?v=kbKtFN71Lfs]https://www.youtube.com/watch?v=kbKtFN71Lfs[/url]","likes":9,"published":3,"flags":32,"usePreview":0,"tags":["random","chaos","sierpinski"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define A vec2(-0.5, -0.25)\n#define B vec2(0.4, 0.1)\n#define C vec2(-0.3, 0.45)\n\n// https://www.shadertoy.com/view/4djSRW\nfloat Hash11(in float x) {\n    x = fract(x * 0.1031);\n    x *= x + 33.33;\n    x *= x + x;\n    return fract(x);\n}\n\nvec2 Hash12(in float x) {\n    vec3 p3 = fract(x * vec3(0.1031, 0.103, 0.0973));\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx + p3.yz) * p3.zy);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = vec4(0.0);\n    float seed = 7.39 * float(iFrame) + 13.84;\n    if (iFrame == 0) fragColor.xy = Hash12(seed);\n    if (iFrame > 0 && ivec2(fragCoord) == ivec2(0, 0)) {\n        fragColor = texelFetch(iChannel0, ivec2(0, 0), 0);\n        int randInt = int(100.0 * Hash11(seed)) % 3;\n        if (randInt == 0) fragColor.xy = (fragColor.xy + A) / 2.0;\n        if (randInt == 1) fragColor.xy = (fragColor.xy + B) / 2.0;\n        if (randInt == 2) fragColor.xy = (fragColor.xy + C) / 2.0;\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    fragColor = texture(iChannel1, uv);\n\n    uv -= 0.5;\n    uv.x *= iResolution.x / iResolution.y;\n    float unit = 2.0 / iResolution.y;\n\n    if (iFrame > 0) {\n        vec2 pos = texelFetch(iChannel0, ivec2(0, 0), 0).xy;\n        float dist = length(uv - pos) - 0.001;\n        fragColor = max(fragColor, smoothstep(unit, 0.0, dist));\n    }\n}","name":"Buffer B","description":"","type":"buffer"}]}