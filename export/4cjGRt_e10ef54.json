{"ver":"0.1","info":{"id":"4cjGRt","date":"1704520298","viewed":29,"name":"Underwater Grass","username":"Scratchboard","description":"Another take on iterated functions","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define Res iResolution\n\n#define Scale 4.\n#define N 10.\n#define v 8.\n\nvec2 cmul(vec2 w, vec2 z) {\n    return vec2(w.x * z.x - w.y * z.y, w.x * z.y + w.y * z.x);\n}\n\nvec2 F(vec2 z, vec2 r) {\n    return atan((vec2(0, 1.) + cmul(z, r - z)) / v) * v;\n}\n\nvoid mainImage(out vec4 Y, in vec2 fc) {\n    vec2 z = Scale * (fc - 0.5*Res.xy) / Res.x;\n    vec2 r = Scale * (iMouse.xy - 0.5*Res.xy) / Res.x;\n    for (float i = 0.; i < N; i += 1.) z = F(z, r);\n    vec4 grad = vec4(dFdx(z.x), dFdx(z.y), dFdy(z.x), dFdy(z.y));\n    Y.rgb = 0.1 * vec3(length(grad)) / v;\n    Y.rgb += vec3(0.1 * z.x / v,\n                  0.1 * z.y / v,\n                  0.5 * z.x / v);\n}","name":"Image","description":"","type":"image"}]}