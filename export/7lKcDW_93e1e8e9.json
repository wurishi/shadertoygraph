{"ver":"0.1","info":{"id":"7lKcDW","date":"1661524128","viewed":113,"name":"Lost in Space","username":"tarnith","description":"Basic fun with some simple iteration","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["circle","iteration","2dsdf"],"hasliked":0,"parentid":"flGyWD","parentname":"Some Fun With a Ring"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texture(iChannel0, fragCoord/iResolution.xy);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"float sdCircle( vec2 p, vec2 offset, float r )\n{\n    return clamp((length(p-(offset)) - r)*2000.,0.,1.);\n}\nfloat sdRing( vec2 p, vec2 offset, float r )\n{\n    return sdCircle(p,offset,r)-sdCircle(p,offset,r+10e-3);\n}\n\nmat4 rotation3d(vec3 axis, float angle) {\n  axis = normalize(axis);\n  float s = sin(angle);\n  float c = cos(angle);\n  float oc = 1.0 - c;\n\n  return mat4(\n    oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,\n    oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,\n    oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,\n    0.0,                                0.0,                                0.0,                                1.0\n  );\n}\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = ( fragCoord -.5*iResolution.xy ) / iResolution.y;\n    vec2 tuv = fragCoord.xy/iResolution.xy;\n    \n    vec4 texrot = vec4(vec3(tuv,iTime),0.);\n    texrot *= rotation3d(texrot.xyz,iTime);\n    vec2 texfeed = texture(iChannel0,tuv*texrot.xy).xz;\n    float circle = 0.;\n    vec3 col = vec3(0.);\n    vec4 rottest = vec4(vec3(uv+(texfeed*uv*.2),0.),iTime);\n    for(int i = 0;i<200;i++){\n        \n        rottest *= rotation3d(rottest.xyx,iTime*.25);\n        uv *= .5;\n        uv += rottest.yx;\n       \n        circle += sdRing(uv*(sin(iTime)*.1-1.),vec2(cos(iTime*(float(i)*1e-5))*float(i)*5e-3,sin(iTime*(float(i)*.01))*.5),.1);\n        \n        col += circle*(float(i+100)*1e-4);\n \n    }\n\n    col /= 10.;\n    tuv += rottest.xy;\n    vec4 tex = texture(iChannel0, tuv);\n\n    fragColor = vec4(col+(tex.rgb*.6),1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}