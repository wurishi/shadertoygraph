{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"buffer","id":"4dXGR8","filepath":"/media/previz/buffer00.png","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"code":"/*\nBasic Buffer Painter -- svenofnine\nhttps://www.shadertoy.com/view/XcKfRc\n\nThere I saw that it should be possible to store data somewhere: \nSuper Simple Fluid texelFetch()\nhttps://www.shadertoy.com/view/ttGczW\n\nThere I learned a lot about buffer writing: \nPositioned Buffer Writing\nhttps://www.shadertoy.com/view/4st3WS\n*/\n\n#define ar vec2(iResolution.x/iResolution.y, 1.)       // aspect ratio of canvas\n\nfloat gridlines( float value, float epsilon ) {\n    return 1.-smoothstep(0., epsilon, abs(value - round(value)));\n}\n\nvec3 grid( vec2 pos, float linecount, float linewidth ) {\n    return 0.1*vec3(gridlines(pos.x*linecount*ar.x,linewidth)) + 0.1*vec3(gridlines(pos.y*linecount,linewidth));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec4 col = texture(iChannel0, uv) + vec4( grid( uv, 20., 0.05 ), 0.);\n\n    \n\n    // Output to screen\n    fragColor = col;\n}","name":"Image","description":"","type":"image"},{"outputs":[{"channel":0,"id":"4dXGR8"}],"inputs":[{"channel":0,"type":"buffer","id":"4dXGR8","filepath":"/media/previz/buffer00.png","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"code":"/*\nBuffer A\n\nBasic Buffer Painter -- svenofnine\nhttps://www.shadertoy.com/view/XcKfRc\n*/\n\n#define BRUSHSIZE 2.0\n#define BRUSHCOLOR vec3( 1.0, 0.5, 0.0 )\n#define CLEAR false \n// #define CLEAR true \n#define ar vec2(iResolution.x/iResolution.y, 1.)  // aspect ratio of canvas\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // make unit for line with that's always one pixel on every resolution\n    float unit = 1. / min(iResolution.x, iResolution.y);\n    // normalized coordinate and mouse pos (values 0..1)\n    vec2 mouse = iMouse.xy / iResolution.xy * ar;\n    vec2 uv = fragCoord/iResolution.xy * ar;\n    \n    vec4 t = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    \n    // clear canvas\n    if( CLEAR )\n        t.rgb = vec3(0.);\n    \n    if( iMouse.z > 0.5 )\n        t.rgb += 1. * vec3(1. - smoothstep( 0., BRUSHSIZE * unit, distance(mouse, uv) )) * BRUSHCOLOR;\n\n    // t.rgb = mix( vec3(1.0), t.rgb, smoothstep( 0., SIZE*unit, distance(mouse, uv) ) );\n\n    fragColor = vec4( t.rgb, 1.0); \n}","name":"Buffer A","description":"","type":"buffer"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":true,"mFlagMusicStream":false},"info":{"id":"XcKfRc","date":"1734290837","viewed":106,"name":"Basic Buffer Painter","username":"Svenofnine","description":"This one I build today to figure out how I can store pixel data in a buffer.\nJust use the mouse to draw something with given BRUSHSIZE and BRUSHCOLOR (defined at lines 6 and 7 in BufferA tab)\nEnjoy!","likes":0,"published":3,"flags":32,"usePreview":0,"tags":["test","mouse","buffer","principle"],"hasliked":0,"parentid":"","parentname":""}}