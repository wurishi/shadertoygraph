{"ver":"0.1","info":{"id":"llycRR","date":"1534807032","viewed":2685,"name":"sine wave shader","username":"WizardRubic","description":"flashing sine wave","likes":3,"published":3,"flags":0,"usePreview":0,"tags":["sine"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float distanceFromSine(vec2 uv, float time) {\n\tfloat yValOfSineAtTheGivenPoint = sin(uv.x + time) * 0.8;\n\t// return distance from sine\n\treturn abs(uv.y - yValOfSineAtTheGivenPoint);\n}\n\n// // returns random number?\n// float rand(float time) {\n// \tint iterBetween09 = int(fract(time) * 10.0); // between 0-9\n// \tint a = iterBetween09 * 456464564;\n// \tfloat b = float(a / 13213);\n// \treturn fract(cos(b * time / 100.0) * b * 12.23 * pow(time, 8.0));\n// }\n\nfloat rand( float n )\n{\n    return fract(sin(n)*8785.32354);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    uv = uv * 2.0 - 1.0;\n\n    uv.x = uv.x * iResolution.x / iResolution.y;\n\n    // base color\n    vec3 col = vec3(0.0,0.0,0.0);\n\n    float dis = distanceFromSine(uv, iTime) * 0.5;\n    float colorBasedOnDistance = 0.5 - dis;\n    //if(uv.x > 0.0) {\n    \tcolorBasedOnDistance += (uv.x) * 0.1;\n    //}\n\n    // flash duration\n    float flashDuration = 6.0;\n    float noise = max((rand((float(iTime))) * 0.05) * (uv.x + 2.0) * ((max(flashDuration - iTime, 0.2 * flashDuration)) / flashDuration), 0.0); // noise gradually decreases as time goes on\n\tcol = vec3(colorBasedOnDistance + noise,0.0,0.0);\n\n\n    // vec3 col = vec3(distanceFromSine(uv, iTime));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}