{"ver":"0.1","info":{"id":"cs2yRK","date":"1687906483","viewed":20,"name":"SDF of Hanoi","username":"thedarkbunny","description":"Getting the hang of SDFs and motion control.\n\nEventually became https://www.shadertoy.com/view/ddScz3","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["practice"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Amount of time (in seconds) between resets; determines movement speed.\n#define CYCLE_TIME 60.\n\n#define TWO_PI 6.28319\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - iResolution.xy/2.)/min(iResolution.x,iResolution.y) + 0.5;\n    \n    float df = sdScene(uv,iTime*float(NODES)/CYCLE_TIME);\n    \n    // https://www.shadertoy.com/view/3ltSW2\n    vec3 col = (df>0.0) ? vec3(0.9,0.6,0.3) : vec3(0.65,0.85,1.0);\n    col *= 1.0 - exp(-6.0*abs(df));\n\tcol *= 0.8 + 0.2*cos(150.0*df);\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.01,abs(df)) );\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//Distance functions from https://iquilezles.org/articles/distfunctions2d/\n\n#define A0 vec3(.2,.1,0.)\n#define A1 vec3(.2,.3,0.)\n#define A2 vec3(.2,.5,0.)\n#define A3 vec3(.2,.7,0.)\n#define A4 vec3(.2,.9,0.)\n#define B0 vec3(.5,.1,0.)\n#define B1 vec3(.5,.3,0.)\n#define B2 vec3(.5,.5,0.)\n#define B3 vec3(.5,.7,0.)\n#define B4 vec3(.5,.9,0.)\n#define C0 vec3(.8,.1,0.)\n#define C1 vec3(.8,.3,0.)\n#define C2 vec3(.8,.5,0.)\n#define C3 vec3(.8,.7,0.)\n#define C4 vec3(.8,.9,0.)\n#define NODES 90\n\nvec3 pos_1[NODES+1] = vec3[NODES+1](A3, A3, A4, B4, B0, B0, B0, B0, B0, B0, B0, B0, B0, B0, B4, C4, C1, C1, C1, C1, C1, C1, C1, C1, C1, C1, C4, A4, A1, A1, A1, A1, A1, A1, A1, A1, A1, A1, A4, B4, B2, B2, B2, B2, B2, B2, B2, B2, B2, B2, B4, C4, C1, C1, C1, C1, C1, C1, C1, C1, C1, C1, C4, A4, A1, A1, A1, A1, A1, A1, A1, A1, A1, A1, A4, B4, B0, B0, B0, B0, B0, B0, B0, B0, B0, B0, B4, C4, C3, C3, A3);\nvec3 pos_2[NODES+1] = vec3[NODES+1](A2, A2, A2, A2, A2, A2, A2, A2, A4, C4, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C4, B4, B1, B1, B1, B1, B1, B1, B1, B1, B1, B1, B1, B1, B1, B1, B1, B1, B1, B1, B1, B1, B1, B1, B4, A4, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A4, C4, C2, C2, C2, C2, C2, C2, C2, C2, A2);\nvec3 pos_3[NODES+1] = vec3[NODES+1](A1, A1, A1, A1, A1, A1, A1, A1, A1, A1, A1, A1, A1, A1, A1, A1, A1, A1, A1, A1, A4, B4, B0, B0, B0, B0, B0, B0, B0, B0, B0, B0, B0, B0, B0, B0, B0, B0, B0, B0, B0, B0, B0, B0, B0, B0, B0, B0, B0, B0, B0, B0, B0, B0, B0, B0, B0, B0, B0, B0, B0, B0, B0, B0, B0, B0, B0, B0, B4, C4, C1, C1, C1, C1, C1, C1, C1, C1, C1, C1, C1, C1, C1, C1, C1, C1, C1, C1, C1, C1, A1);\nvec3 pos_4[NODES+1] = vec3[NODES+1](A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A0, A4, C4, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, C0, A0);\nvec3 pos_a[NODES+1] = vec3[NODES+1](A4, A3, A4, B4, B0, B4, A4, A2, A4, C4, C0, C4, B4, B0, B4, C4, C1, C4, A4, A1, A4, B4, B0, B4, C4, C1, C4, A4, A1, A4, C4, C0, C4, B4, B1, B4, A4, A1, A4, B4, B2, B4, A4, A0, A4, C4, C0, C4, B4, B2, B4, C4, C1, C4, B4, B1, B4, A4, A0, A4, C4, C1, C4, A4, A1, A4, B4, B0, B4, C4, C1, C4, A4, A1, A4, B4, B0, B4, A4, A0, A4, C4, C2, C4, B4, B0, B4, C4, C3, C4, A4);\n\nfloat sdBox( in vec2 p, in vec2 b ){\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat sdCircle( in vec2 p, in float r ){\n    return length(p) - r;\n}\n\nfloat sdScene( in vec2 p, in float time ){\n    int idx = int(time)%NODES;\n    float f = fract(time);\n    vec2 pp_1 = mix(pos_1[idx].xy,pos_1[idx+1].xy,f);\n    vec2 pp_2 = mix(pos_2[idx].xy,pos_2[idx+1].xy,f);\n    vec2 pp_3 = mix(pos_3[idx].xy,pos_3[idx+1].xy,f);\n    vec2 pp_4 = mix(pos_4[idx].xy,pos_4[idx+1].xy,f);\n    vec2 pp_a = mix(pos_a[idx].xy,pos_a[idx+1].xy,f);\n    \n    float p12 = min(sdBox(p-pp_1,vec2(0.11,0.1)),sdBox(p-pp_2,vec2(0.12,0.1)));\n    float p34 = min(sdBox(p-pp_3,vec2(0.13,0.1)),sdBox(p-pp_4,vec2(0.14,0.1)));\n    float pa = sdCircle(p-pp_a,0.1);\n    return min(pa,min(p12,p34));\n    \n    \n\n    \n    \n}\n\n\n\n\n\n\n\n\n\n\n\n","name":"Common","description":"","type":"common"}]}