{"ver":"0.1","info":{"id":"7tjcDm","date":"1649819014","viewed":66,"name":"nlerp","username":"gabo6d","description":"n-lerp","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["bug","nlerp"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n/*\nWorks by essentially zeroing a triangle signal\nwith a square pulse that spans the two closest\ndata points from t.\n*/\n#define N_LERP_N(N, T) \\\n    T nlerp(const T[N] P, float t) { \\\n    float n = float(N)-1.; \\\n    float tn = t * n; \\\n    float lb = floor(tn); \\\n    float ub = ceil(tn); \\\n    float a = fract(tn); \\\n    float b = step(lb/n, t) - step(ub/n, t); \\\n    float tf = a*b; \\\n    return mix(P[int(lb)], P[int(ub)], tf); } \\\n\n/* \n   Could also be implemented with an upper-bound defined\n   for color arrays and have the final color be calculated\n   with for (int i = int(lb); i < int(ub); i++) or something like that.\n   \n   The downside for this is that parameters should always be the same\n   size and an additional float n argument should be passed manually by the caller.\n*/\n\n// wish i could think of a better way\nN_LERP_N(3, vec3)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const vec3 colors[3] = vec3[3] (\n        vec3(1.0, 0.0, 0.0),\n        vec3(0.0, 1.0, 0.0),\n        vec3(0.0, 0.0, 1.0)\n    );\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = nlerp(colors, uv.x);\n\n    // Output to screen\n    //fragColor = vec4(col, 1.);\n    fragColor = vec4( pow(col,vec3(1./2.2)) , 1 );\n}","name":"Image","description":"","type":"image"}]}