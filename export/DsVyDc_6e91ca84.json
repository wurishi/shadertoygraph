{"ver":"0.1","info":{"id":"DsVyDc","date":"1696695789","viewed":47,"name":"Problem with Shader on Mobile","username":"Raistlin_fuego","description":"Good morning. Can someone help me, if possible, to make this shader more optimized? I don't know if there is something that, when removed or changed, can make it gain some fps on mobile(Unity). If anyone has any suggestions I would greatly appreciate.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["shadertest"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//#define _Color (0.46,0.49,0.49,0)\n#define _RaysTone  -0.04\n#define _RadiusVel  .3\n#define _Moviment  .69\n//#define _Position  (0, 1.8, 5.41, 1.)\n//#define _PosLight  (0, 5, -4.24, 1)\n#define _ThicknessRay 2.\n//#define _OnRay -.004\n\n\nfloat random21(vec2 uv){\n    return fract(cos(uv.x*23.124 + uv.y*43.234)*432.4332);\n}\n\nfloat smoothNoise(vec2 uv){\n    vec2 id = floor(uv);\n    vec2 i = fract(uv);\n    i = i*i*(3.-2.*i);\n\n    float b = mix(random21(id), random21(id + vec2(1, 0)), i.x);\n    float t = mix(random21(id+ vec2(0, 1)), random21(id + vec2(1, 1)), i.x);\n    float n = mix(b, t, i.y);\n    return n;\n}\n\nfloat Sphere(vec3 p){\n    vec3 _Position = vec3(0, 1.8, 5.41);\n    float t = iTime * _Moviment;\n    float x = _Position.x + 0.5*cos(t);\n    float y = _Position.y;\n    float z = _Position.z;\n    float r = .3+max(0.2, sin(iTime*_RadiusVel));\n\n    vec4 s = vec4(x, y, z, r);\n\n    return length(p-s.xyz)-s.w;\n}\n\nfloat opD(float a, float b){\n    return a < b ? a : b;\n}\n\nfloat EffectForm(vec3 p){\n  float e = smoothNoise(p.xy);\n\n  return e;\n}\n\nfloat EffectRay(vec3 p){\n    float t = iTime;\n    float e = smoothNoise(p.xy*_ThicknessRay-vec2(0, t)) - smoothNoise(p.xy*_ThicknessRay - vec2(t, 0));\n    float ray = (0.01 - abs(e))*300.;\n    return ray*_RaysTone;\n}\n\nfloat GetDist(vec3 p){\n    float g = p.y;\n    float sphere = Sphere(p)+max(.3, EffectForm(p));\n    float r = opD(g, sphere);\n\n    return r;\n}\n\nfloat Ray(vec3 ro, vec3 rd){\n    int MS = 8;\n    float dist = 0.;\n    for(int i = 0; i < MS; i++){\n        vec3 p = ro + rd * dist;\n        float d = GetDist(p);\n        dist += d;\n    }\n\n    return dist;\n}\n\nvec3 Normals(vec3 p){\n    vec2 d = vec2(.4, 0);\n\n    float x = GetDist(p+d.xyy)-GetDist(p-d.xyy);\n    float y = GetDist(p+d.yxy)-GetDist(p-d.yxy);\n    return normalize(vec3(x, y, 0));\n}\n\nfloat GetLight(vec3 p, vec3 light){\n    vec3 n = Normals(p);\n    vec3 l = normalize(light-p);\n    float diff = dot(l, n);\n\n    return diff;\n}\n\n////////////\n//This is on CPU\nfloat reScale(float a1, float a2, float b1, float b2, float n){\n    return b1 + ((n-a1)*(b2-b1))/(a2-a1);\n}\n\nfloat Action(){\n    float x = reScale(0., iResolution.x, -1.5, 1.5, iMouse.x);\n    float y = reScale(0., iResolution.y, -1.5, 1.5, iMouse.y);\n    float _OnRay = x + y;\n    return _OnRay;\n}\n/////////////\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - .5 * iResolution.xy)/iResolution.y;\n    \n    //On CPU\n    float ACTION = Action();\n    //\n    \n    vec3 col = vec3(0.46,0.49,0.49);\n    vec3 _PosLight = vec3(0, 5, -4.24);\n    \n    vec3 ro = vec3(0, 1, 0);\n    vec3 rd = normalize(vec3(uv, 1.));\n\n    float r = Ray(ro, rd);\n    vec3 p = ro + rd * r;\n    vec3 pp = EffectRay(p)*ACTION + p*ACTION*-1.;\n    float l = GetLight(pp, _PosLight);\n    col -= l;\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}