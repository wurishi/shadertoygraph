{"ver":"0.1","info":{"id":"ds2fz3","date":"1690320467","viewed":740,"name":"GM Shaders: Dither","username":"Xor","description":"Top:         No dither | Bayer\nBottom: White noise | Blue noise","likes":36,"published":1,"flags":32,"usePreview":1,"tags":["3d","dither","mountains","tut","golf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3zn","filepath":"/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","previewfilepath":"/media/ap/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","type":"texture","channel":1,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":2,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":3,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n    \"GM Shaders: Dither\" by @XorDev\n    \n    The concept behind dithering is to reduce the color palette\n    and give adjacent pixels unique threshold values.\n    This helps preserve gradients and shades with reduced palettes\n    \n    Read more here:\n    https://mini.gmshaders.com/p/gm-shaders-mini-dither\n    \n             _____________ ____________\n    Top:    |  No dither  |   Bayer    |\n            |             |            |\n    Bottom: | White noise | Blue noise |\n*/\n//Number of shades per channel\n#define SHADES 4.\n//Pixel scale\n#define SCALE 2.\n//1 to animate noise\n#define TEMPORAL 0.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //Pixel coordinates (scaled)\n    vec2 frag = fragCoord;\n    vec2 coord = floor(frag/SCALE)*SCALE;\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = coord/iResolution.xy;\n\n    //Sample texture coordinates\n    vec4 tex = texture(iChannel0, uv);\n    //Quadrant borders\n    vec2 m = iMouse.z>0. ? iMouse.xy : iResolution.xy*0.5;\n    \n    //Divide the screen into 4 quadrants for demo\n    int type = int(frag.x>m.x)+int(frag.y<m.y)*2;\n    \n    //Shift noise textures if animated\n    vec2 shift = floor(cos(iTime*vec2(5,9))*1e4)*TEMPORAL;\n    \n    //No dither banding value\n    float dither = 0.5;\n    \n    //Bayer matrix dither\n    if      (type == 1)\n    {\n        vec2 tuv = coord/iChannelResolution[1].xy/SCALE;\n        dither = texture(iChannel1, tuv).r;\n    }\n    //White noise dither\n    else if (type == 2)\n    {\n        vec2 tuv = (coord/SCALE+shift)/iChannelResolution[2].xy;\n        dither = texture(iChannel2, tuv).r;\n    }\n    //Blue noise dither\n    else if (type == 3)\n    {\n        vec2 tuv = (coord/SCALE+shift)/iChannelResolution[3].xy;\n        dither = texture(iChannel3, tuv).r;\n    }\n    //Compute dithered color with dither threshold\n    vec4 col = floor(tex*SHADES+dither)/SHADES;\n    \n    //Add quadrant borders\n    vec2 bord = abs(frag-m);\n    col *= clamp(min(bord.x, bord.y)-1., 0., 1.);\n\n    // Output to screen\n    fragColor = col;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//Little mountain raymarcher for demo\n#define D (texture(iChannel0,p.xz/8.).r+p.y)\n\nvoid mainImage(out vec4 O, vec2 I )\n{\n    vec3 d = vec3(I+I,0) - iResolution.xyy,\n    p = vec3(0,.2,-iTime);\n    d.zy *= mat2(.8,-.6,.6,.8);\n    \n    for(O *= 0.; O.a++<2e2; O += max(.005-D*D*4e2,0.))\n        p += d/length(d)*D*.5;\n    p += .01;\n    O = 1.+(vec4(13,6,2,1)*D/.4-1.)*O;\n}","name":"Buffer A","description":"","type":"buffer"}]}