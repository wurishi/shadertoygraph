{"ver":"0.1","info":{"id":"MtGyz3","date":"1537096753","viewed":143,"name":"Lissajous Curves","username":"Tantor","description":"A simple shader to visualize Lissajous figures.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["math","geometry","lissajous"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define pi 3.141592\n#define ratio (2.0/3.0)\n#define speed 2\n#define offset (pi*0.0)\n#define radius 0.45\n#define trail (pi*3.0)\n#define detail 20\n#define thickness 0.01\n\nvec2 get_point(float time) {\n\tvec2 p;\n\tp.x = cos(time * float(speed));\n\tp.y = sin(time * float(speed) * float(ratio) + float(offset));\n\tp *= float(radius);\n    return p;\n}\n\nfloat point_linesegment_dist(vec2 p, vec2 a, vec2 b) {\n    vec2 ab = b - a;\n    float l_sq = dot(ab, ab);\n    if (l_sq <= 0.000001)\n        return distance(p, a);\n    vec2 ap = p - a;\n    float proj = dot(ap, ab) / l_sq;\n    proj = clamp(proj, 0.0, 1.0);\n    vec2 pp = a + proj * ab;\n        \n    return distance(p, pp);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\n\t// Screen coordinates.\n\tvec2 uv = (fragCoord - iResolution.xy*.5) / iResolution.y;\n    \n    float on_line = 0.0;\n    const float inv_detail = (1.0 / float(detail));\n\tfor\t(float t = 0.0; t >= -float(trail); t -= inv_detail) {\n        // t is the offset back in time to look at where the curve was\n\t\tvec2 p0 = get_point(iTime + t);\n\t\tvec2 p1 = get_point(iTime + t - inv_detail);\n        \n        float trail_amount = 1.0 + (t / float(trail));\n\n        float dist = point_linesegment_dist(uv, p0, p1);\n        float coverage = 1.0 - dist / (float(thickness) * trail_amount);\n        coverage *= sqrt(trail_amount); // Fade out the trail\n        on_line = max(on_line, coverage);\n\t}\n\n\tvec3 color = mix(vec3(0.0, 0.0, 0.0), vec3(0.5, 1.0, 0.0), on_line);\n\n\tfragColor = vec4(clamp(color, 0.0, 1.0), 1.0);\n}","name":"Image","description":"","type":"image"}]}