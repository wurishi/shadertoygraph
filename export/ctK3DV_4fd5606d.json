{"ver":"0.1","info":{"id":"ctK3DV","date":"1684697671","viewed":242,"name":"chladni plates","username":"altunenes","description":"http://paulbourke.net/geometry/chladni/\nplaying with this math. :)","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["learning","reproduction"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//ver2. all credits go into Envy24\n\nconst float PI = 3.14159265;\n//for futher imp:\n#define FWIDTH_L1(f)   ( abs(dFdx(f)) + abs(dFdy(f)) )          \n#define FWIDTH_L2(f)   ( sqrt(dFdx(f)*dFdx(f) + dFdy(f)*dFdy(f)) )\n#define FWIDTH_Linf(f) ( max(abs(dFdx(f)), abs(dFdy(f))) )\n\nfloat implicit(float x, float y) \n{ \n    float L = 1.0;     // plate size \n    float t = iTime / 4.0;\n\n    float n1 = 6.0 + 3.0 * sin(t);\n    float m1 = 4.0 + 3.0 * cos(t);\n    float n2 = 5.0 + 2.5 * cos(2.0 * t);\n    float m2 = 3.0 + 2.5 * sin(2.0 * t);\n\n    float val1 = cos(n1 * PI * x / L) * cos(m1 * PI * y / L) -\n                 cos(m1 * PI * x / L) * cos(n1 * PI * y / L);\n    float val2 = cos(n2 * PI * x / L) * cos(m2 * PI * y / L) -\n                 cos(m2 * PI * x / L) * cos(n2 * PI * y / L);\n\n    return val1 + val2; \n}\n\nfloat delf_delx(float x, float y) \n{ \n    const float dx=0.001;\n    return ( implicit(x+dx, y)-implicit(x-dx, y) ) / (2.*dx);\n}\n\nfloat delf_dely(float x, float y) \n{ \n    const float dy=0.001;\n    return ( implicit(x, y+dy)-implicit(x, y-dy) ) / (2.*dy);\n}\n\nvec2 gradient(float x, float y) { return vec2(delf_delx(x, y), delf_dely(x, y)); }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / min(iResolution.y, iResolution.x);\n\n    vec2 g = gradient(uv.x, uv.y);\n    float unit = 25./iResolution.y;\n    float sharpVal = smoothstep(-unit, unit, abs(implicit(uv.x, uv.y)) / sqrt(g.x*g.x + g.y*g.y));\n    \n    vec3 col = 0.5 + 0.5 * cos(iTime + vec3(0.6, 0.8, 1.0) + 2.0 * PI * vec3(sharpVal));\n\n    fragColor = vec4(col,1.0);\n}\n\n/*\n\nFIRST VERSION:\n\n//http://paulbourke.net/geometry/chladni/\n//experimenting with math above :)\n\nconst float PI = 3.14159265;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / min(iResolution.y, iResolution.x);\n\n    float L = 1.0;     // plate size \n\n    float t = iTime / 4.0;\n\n    float n1 = 6.0 + 3.0 * sin(t);\n    float m1 = 4.0 + 3.0 * cos(t);\n    float n2 = 5.0 + 2.5 * cos(2.0 * t);\n    float m2 = 3.0 + 2.5 * sin(2.0 * t);\n    \n    // strange Chladni pattern formula  cos(n pi x / L) cos(m pi y / L) - cos(m pi x / L) cos(n pi y / L)\n\n    float val1 = cos(n1 * PI * uv.x / L) * cos(m1 * PI * uv.y / L) -\n                 cos(m1 * PI * uv.x / L) * cos(n1 * PI * uv.y / L);\n    float val2 = cos(n2 * PI * uv.x / L) * cos(m2 * PI * uv.y / L) -\n                 cos(m2 * PI * uv.x / L) * cos(n2 * PI * uv.y / L);\n                 \n    float val = val1 + val2;\n\n    float threshold = 7.*fwidth(val); // Contributed by Envy24; v1= \"float threshold = 0.25;\"\n\n    float sharpVal = smoothstep(-threshold, threshold, val);\n    \n    // some colors =)\n    vec3 col = 0.5 + 0.5 * cos(iTime + vec3(0.6, 0.8, 1.0) + 2.0 * PI * vec3(sharpVal));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n} */","name":"Image","description":"","type":"image"}]}