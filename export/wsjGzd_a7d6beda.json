{"ver":"0.1","info":{"id":"wsjGzd","date":"1549803710","viewed":83,"name":"cloud_004","username":"kuma720","description":"cloud","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["cloud"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float noise( vec2 v ) {\n  return fract( sin ( dot( v , vec2( 78.123 , 36.1226 ) ) ) * 64.314 );\n}\n\nfloat pnoise( vec2 uv ) {\n\n  vec2 a = fract( uv );\n  a = a * a * ( 3. - 2. * a );\n\n  //dirc\n  vec2 uv2 = floor( uv );\n  float w0 = noise ( uv2 ) ;\n  float w1 = noise ( uv2 + vec2( 1. , 0. ) ) ;\n  float w2 = noise ( uv2 + vec2( 0. , 1. ) ) ;\n  float w3 = noise ( uv2 + vec2( 1. , 1. ) ) ;\n\n  float g0 = dot( vec2(w0) , ( a - vec2(0.,0.) ) ) ;\n  float g1 = dot( vec2(w1) , ( a - vec2(1.,0.) ) ) ;\n  float g2 = dot( vec2(w2) , ( a - vec2(0.,1.) ) ) ;\n  float g3 = dot( vec2(w3) , ( a - vec2(1.,1.) ) ) ;\n\n  float h0 = mix( g0 , g1 , a.x );\n  float h1 = mix( g2 , g3 , a.x );\n  float h2 = mix( h0 , h1 , a.y );\n\n  float h = h2 + .1;\n\n  return h;\n}\n\nfloat fbm( vec2 uv ) {\n  float a = pnoise( uv );\n  a += pnoise( uv * 2. ) * 0.5 ;\n//  a += pnoise( uv * 4. ) * 0.25 ;\n//  a += pnoise( uv * 8. ) * 0.125 ;\n//  a += pnoise( uv * 16. ) * 0.0625 ;\n  a += pnoise( uv * 32. ) * 0.03125 ;\n  return a;\n}\n\n\n\n\n\nmat4 createVTW(vec3 eye,vec3 center,vec3 up) {\n  vec3 f = normalize( center - eye );\n  vec3 s = normalize( cross(f,up) );\n  vec3 u = cross(s,f);\n  return mat4(\n    vec4(s,0.),\n    vec4(u,0.),\n    vec4(-f,0.),\n    vec4(0.,0.,0.,1)\n  );\n}\n\n\nvec3 rayDirection(float fieldofView,vec2 size,vec2 fragCoord) {\n  vec2 xy = fragCoord - size / 2.0;\n  float z = size.y / tan(radians(fieldofView) / 2.0 );\n  return normalize(vec3(xy,-z));\n}\n\n\nfloat sdf( vec3 p ) {\n    float h = fbm( p.xz ) * .5 + .2;\n    vec3 p2 = vec3( p.x , h , p.z );\n\n    float l = p.y - p2.y;\n    return l;\n}\n\nvec3 createnormal(vec3 p) {\n  float e = 0.001;\n  return normalize( vec3(\n    sdf( vec3(p.x+e,p.y,p.z) ) - sdf( vec3(p.x-e,p.y,p.z) ) ,\n    sdf( vec3(p.x,p.y+e,p.z) ) - sdf( vec3(p.x,p.y-e,p.z) ) ,\n    sdf( vec3(p.x,p.y,p.z+e) ) - sdf( vec3(p.x,p.y,p.z-e) )\n  ));\n\n}\n\n\nvec4 render( vec2 uv , vec3 eye , vec3 dir ) {\n\n  float len = 0.;\n  vec3 lightVec = vec3(1.,1.,1.);\n  vec3 lightColor = vec3( 0.7 , 0.5, 0.3 );\n\n  for ( int i = 0 ; i < 80 ; ++ i ) {\n    vec3 p = eye + dir * len;\n\n    float l = sdf( p );\n    len += length( l ) ;\n\n    if ( l < 0.01 ) {\n      vec3 n = createnormal( p );\n      float light = dot ( n , lightVec );\n      float sp = fbm( p.xz * .6 + iTime * .5 ) * 4.;\n      return vec4( vec3( light ) * sp * lightColor + vec3( 0.3,0.2,0.15) , 1. );\n    }\n\n  }\n\n  return vec4( 0. , 0. , 0. , 1. );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord * (1.0/iResolution.x) - vec2(0.5, 0.5);\n\n    float t = iTime * .1;\n    vec3 eye = vec3( cos(t) * 5. , 2. , sin(t) * 5. );\n   // vec3 eye = vec3( 5. , 5. , 5. );\n    vec3 center = vec3(0.,0.5,0.);\n    vec3 up = vec3(0.,1.,0.);\n    mat4 vtw = createVTW(eye,center,up);\n\n    vec3 viewDir = rayDirection(45.,iResolution.xy,fragCoord);\n    vec3 worldDir = (vtw * vec4(viewDir,0.)).xyz;\n\n   fragColor = render( uv , eye , worldDir );\n}","name":"Image","description":"","type":"image"}]}