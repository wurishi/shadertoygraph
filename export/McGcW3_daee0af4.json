{"ver":"0.1","info":{"id":"McGcW3","date":"1732476915","viewed":79,"name":"hexy julia","username":"pb","description":"bifurcations, trifurcations, n-furcations,  use the mouse","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["2d","fractal"],"hasliked":0,"parentid":"4cKcWV","parentname":"fractal bed bugs"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define t iTime/3.\n#define too_small 1e-4\n#define rot(a) mat2(cos(a+vec4(0,11,33,0)))\n\nfloat[] sc = float[] (1.,1.5,4.,2.,10.,1.2);\nfloat[] mixf = float[] (0.,1.,1.,1.,1.,1.);\nfloat[] jp = float[] (-.83,-1.71,-.83,-.8,.0127,-1.5);\n\n//abs(z^3) + c yields hexagonal symmetry\n\nvoid mainImage0( out vec4 O, vec2 u )\n{\n    float tt = mod(iTime,18.);\n    int ii = int(mod(tt/3.,6.));\n    \n    vec2  R =  iResolution.xy, m=iMouse.xy, z,\n          U = ( u+u - R )/ R.y * sc[ii] ,\n          M = iMouse.z>0.\n          ? vec2( 1. - iMouse.x / R.x * 3.2, 0) \n          : vec2( jp[ii], 0);\n          \n    float i = 0.;\n    \n    z=U;  //Julia set: input is each pixel coordinate\n\n    z *= rot(iTime/13.);\n    \n    float inf = 1e6;\n    for ( O *= 0. ; i++ < 12. && dot(z,z) < inf; ) {\n   \n        float x2 = z.x*z.x;\n        float y2 = z.y*z.y;\n                        \n        float z3_re = x2*z.x - 3.0*z.x*y2;\n        float z3_im = -y2*z.y + 3.0*x2*z.y;\n        float z3_modsq = max(z3_re*z3_re + z3_im*z3_im, too_small);\n\n        vec2 v = vec2( z3_re, z3_im );\n        \n        z = (1.-mixf[ii])*abs(v)\n            +mixf[ii]*abs(v)/z3_modsq  \n            + M;\n                \n    }\n    \n    if (dot(z,z) < inf) {\n        //only interested in points that stay bounded\n        vec2 cc = sin( log( abs(z) ) * vec2(2.,.2) ) ;\n        cc *= cc;\n        \n        float aa = atan(z.y,z.x);\n        aa = sin(aa*2.);\n        aa *= aa;\n    \n        vec3 ccc =  vec3(1.5,.6,0)*cc.x \n                    + vec3(.2,.6,1.5)*cc.y\n                    + 2.*vec3(1,.6,0)*aa\n                    ;\n                    \n        O = vec4(ccc,0);\n        O = 1. - exp(-O*O);\n    }\n\n\n}\n\n//FabriceNeyret2 antialiasing trick\nvoid mainImage(out vec4 O, vec2 U) {\n    mainImage0(O,U);\n    if ( fwidth(length(O)) > .01 ) {  // difference threshold between neighbor pixels\n        vec4 o;\n        for (int k=0; k < 9; k+= k==3?2:1 )\n          { mainImage0(o,U+vec2(k%3-1,k/3-1)/3.); O += o; }\n        O /= 9.;\n        //O.b++;                        // uncomment to see where the oversampling occurs\n    }\n}\n","name":"Image","description":"","type":"image"}]}