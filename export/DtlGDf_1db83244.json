{"ver":"0.1","info":{"id":"DtlGDf","date":"1672612928","viewed":260,"name":"Blender to Shadertoy","username":"MrHAX00","description":"I changed the way I store vertices and wrote a Lua script that uses string library to parse .obj files and turns them into a common tab that can be pasted here!\n\nI wont make anything more advanced than this with triangles because of the performance.","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["3d","triangle","rasterization","obj"],"hasliked":0,"parentid":"ctfGDX","parentname":"Cube of triangles"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define Line(uv, P1, P2) ((uv.x - P1.x) * (P1.y - P2.y) / (P1.x - P2.x) + P1.y)\n\nfloat Triangle(vec2 uv, vec2 P1, vec2 P2, vec2 P3)\n{\n    vec2 Center = (P1 + P2 + P3) / 3.;\n    \n    float Sign1 = sign(Center.y - Line(Center, P1, P2));\n    float Line1 = sign((uv.y - Line(uv, P1, P2)) * Sign1) * .5 + .5;\n    \n    float Sign2 = sign(Center.y - Line(Center, P2, P3));\n    float Line2 = sign((uv.y - Line(uv, P2, P3)) * Sign2) * .5 + .5;\n    \n    float Sign3 = sign(Center.y - Line(Center, P3, P1));\n    float Line3 = sign((uv.y - Line(uv, P3, P1)) * Sign3) * .5 + .5;\n    \n    return Line1 * Line2 * Line3;\n}\n\n#define pi 3.14159\n//from https://www.shadertoy.com/view/Nl33W8\nmat3 AxisAngle(vec3 Axis, float Angle) {\n    float Sin = cos(Angle + pi * .5);\n    float Cos = cos(Angle);\n    return mat3(\n        Axis * Axis.x * (1. - Cos) + vec3(Cos, Axis.z * Sin, -Axis.y * Sin),\n        Axis * Axis.y * (1. - Cos) + vec3(-Axis.z * Sin, Cos, Axis.x * Sin),\n        Axis * Axis.z * (1. - Cos) + vec3(Axis.y * Sin, -Axis.x * Sin, Cos)\n    );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - iResolution.xy * .5) / iResolution.y;\n\n    vec3 CamPos = vec3(0., 0., 4.);\n    mat3 CamRot = AxisAngle(vec3(0., 1., 0.), iTime) * AxisAngle(vec3(1., 0., 0.), sin(iTime));\n\n    float Sum = 0.;\n    for (int i = 0; i < VertexCount; i += 3) {\n        mat2x3 Vertex1 = Vertices[i];\n        mat2x3 Vertex2 = Vertices[i + 1];\n        mat2x3 Vertex3 = Vertices[i + 2];\n        \n        vec3 Normal = -normalize(Vertex1[1] + Vertex2[1] + Vertex3[1]) * CamRot;\n        \n        vec3 Point1 = (Vertex1[0] * CamRot + CamPos);\n        vec3 Point2 = (Vertex2[0] * CamRot + CamPos);\n        vec3 Point3 = (Vertex3[0] * CamRot + CamPos);\n        \n        Point1 /= Point1.z;\n        Point2 /= Point2.z;\n        Point3 /= Point3.z;\n        \n        float Dot = dot(Normal, normalize(Point1 + Point2 + Point3));\n        if (Dot > 0.) {\n            Sum = mix(Sum, Dot, Triangle(uv, Point1.xy, Point2.xy, Point3.xy));\n        }\n    }\n\n    // Output to screen\n    fragColor = vec4(vec3(Sum), 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//I wrote a script that parses obj files and turns them into this format using lua.\n//The script's link: https://glot.io/snippets/ggw2vtrh4o\n//Simply replace this tab with the output of the said script!\n\n//BE AWARE complex models with overlapping faces won't work because I didn't implement sorting yet.\n#define VertexCount 60\nconst mat2x3 Vertices[VertexCount] = mat2x3[VertexCount](\n\tmat2x3(\n\t\t-0.276385, -0.447215, 0.85064,\n\t\t0.1876, -0.7947, 0.5774\n\t),\n\tmat2x3(\n\t\t0., -1., 0.,\n\t\t0.1876, -0.7947, 0.5774\n\t),\n\tmat2x3(\n\t\t0.7236, -0.447215, 0.52572,\n\t\t0.1876, -0.7947, 0.5774\n\t),\n\tmat2x3(\n\t\t0.7236, -0.447215, -0.52572,\n\t\t0.6071, -0.7947, -0.\n\t),\n\tmat2x3(\n\t\t0.7236, -0.447215, 0.52572,\n\t\t0.6071, -0.7947, -0.\n\t),\n\tmat2x3(\n\t\t0., -1., 0.,\n\t\t0.6071, -0.7947, -0.\n\t),\n\tmat2x3(\n\t\t-0.894425, -0.447215, 0.,\n\t\t-0.4911, -0.7947, 0.3568\n\t),\n\tmat2x3(\n\t\t0., -1., 0.,\n\t\t-0.4911, -0.7947, 0.3568\n\t),\n\tmat2x3(\n\t\t-0.276385, -0.447215, 0.85064,\n\t\t-0.4911, -0.7947, 0.3568\n\t),\n\tmat2x3(\n\t\t-0.276385, -0.447215, -0.85064,\n\t\t-0.4911, -0.7947, -0.3568\n\t),\n\tmat2x3(\n\t\t0., -1., 0.,\n\t\t-0.4911, -0.7947, -0.3568\n\t),\n\tmat2x3(\n\t\t-0.894425, -0.447215, 0.,\n\t\t-0.4911, -0.7947, -0.3568\n\t),\n\tmat2x3(\n\t\t0.7236, -0.447215, -0.52572,\n\t\t0.1876, -0.7947, -0.5774\n\t),\n\tmat2x3(\n\t\t0., -1., 0.,\n\t\t0.1876, -0.7947, -0.5774\n\t),\n\tmat2x3(\n\t\t-0.276385, -0.447215, -0.85064,\n\t\t0.1876, -0.7947, -0.5774\n\t),\n\tmat2x3(\n\t\t0.894425, 0.447215, 0.,\n\t\t0.9822, -0.1876, -0.\n\t),\n\tmat2x3(\n\t\t0.7236, -0.447215, 0.52572,\n\t\t0.9822, -0.1876, -0.\n\t),\n\tmat2x3(\n\t\t0.7236, -0.447215, -0.52572,\n\t\t0.9822, -0.1876, -0.\n\t),\n\tmat2x3(\n\t\t0.276385, 0.447215, 0.85064,\n\t\t0.3035, -0.1876, 0.9342\n\t),\n\tmat2x3(\n\t\t-0.276385, -0.447215, 0.85064,\n\t\t0.3035, -0.1876, 0.9342\n\t),\n\tmat2x3(\n\t\t0.7236, -0.447215, 0.52572,\n\t\t0.3035, -0.1876, 0.9342\n\t),\n\tmat2x3(\n\t\t-0.7236, 0.447215, 0.52572,\n\t\t-0.7946, -0.1876, 0.5774\n\t),\n\tmat2x3(\n\t\t-0.894425, -0.447215, 0.,\n\t\t-0.7946, -0.1876, 0.5774\n\t),\n\tmat2x3(\n\t\t-0.276385, -0.447215, 0.85064,\n\t\t-0.7946, -0.1876, 0.5774\n\t),\n\tmat2x3(\n\t\t-0.7236, 0.447215, -0.52572,\n\t\t-0.7946, -0.1876, -0.5774\n\t),\n\tmat2x3(\n\t\t-0.276385, -0.447215, -0.85064,\n\t\t-0.7946, -0.1876, -0.5774\n\t),\n\tmat2x3(\n\t\t-0.894425, -0.447215, 0.,\n\t\t-0.7946, -0.1876, -0.5774\n\t),\n\tmat2x3(\n\t\t0.276385, 0.447215, -0.85064,\n\t\t0.3035, -0.1876, -0.9342\n\t),\n\tmat2x3(\n\t\t0.7236, -0.447215, -0.52572,\n\t\t0.3035, -0.1876, -0.9342\n\t),\n\tmat2x3(\n\t\t-0.276385, -0.447215, -0.85064,\n\t\t0.3035, -0.1876, -0.9342\n\t),\n\tmat2x3(\n\t\t0.276385, 0.447215, 0.85064,\n\t\t0.7946, 0.1876, 0.5774\n\t),\n\tmat2x3(\n\t\t0.7236, -0.447215, 0.52572,\n\t\t0.7946, 0.1876, 0.5774\n\t),\n\tmat2x3(\n\t\t0.894425, 0.447215, 0.,\n\t\t0.7946, 0.1876, 0.5774\n\t),\n\tmat2x3(\n\t\t-0.7236, 0.447215, 0.52572,\n\t\t-0.3035, 0.1876, 0.9342\n\t),\n\tmat2x3(\n\t\t-0.276385, -0.447215, 0.85064,\n\t\t-0.3035, 0.1876, 0.9342\n\t),\n\tmat2x3(\n\t\t0.276385, 0.447215, 0.85064,\n\t\t-0.3035, 0.1876, 0.9342\n\t),\n\tmat2x3(\n\t\t-0.7236, 0.447215, -0.52572,\n\t\t-0.9822, 0.1876, -0.\n\t),\n\tmat2x3(\n\t\t-0.894425, -0.447215, 0.,\n\t\t-0.9822, 0.1876, -0.\n\t),\n\tmat2x3(\n\t\t-0.7236, 0.447215, 0.52572,\n\t\t-0.9822, 0.1876, -0.\n\t),\n\tmat2x3(\n\t\t0.276385, 0.447215, -0.85064,\n\t\t-0.3035, 0.1876, -0.9342\n\t),\n\tmat2x3(\n\t\t-0.276385, -0.447215, -0.85064,\n\t\t-0.3035, 0.1876, -0.9342\n\t),\n\tmat2x3(\n\t\t-0.7236, 0.447215, -0.52572,\n\t\t-0.3035, 0.1876, -0.9342\n\t),\n\tmat2x3(\n\t\t0.894425, 0.447215, 0.,\n\t\t0.7946, 0.1876, -0.5774\n\t),\n\tmat2x3(\n\t\t0.7236, -0.447215, -0.52572,\n\t\t0.7946, 0.1876, -0.5774\n\t),\n\tmat2x3(\n\t\t0.276385, 0.447215, -0.85064,\n\t\t0.7946, 0.1876, -0.5774\n\t),\n\tmat2x3(\n\t\t0., 1., 0.,\n\t\t0.4911, 0.7947, 0.3568\n\t),\n\tmat2x3(\n\t\t0.276385, 0.447215, 0.85064,\n\t\t0.4911, 0.7947, 0.3568\n\t),\n\tmat2x3(\n\t\t0.894425, 0.447215, 0.,\n\t\t0.4911, 0.7947, 0.3568\n\t),\n\tmat2x3(\n\t\t0., 1., 0.,\n\t\t-0.1876, 0.7947, 0.5774\n\t),\n\tmat2x3(\n\t\t-0.7236, 0.447215, 0.52572,\n\t\t-0.1876, 0.7947, 0.5774\n\t),\n\tmat2x3(\n\t\t0.276385, 0.447215, 0.85064,\n\t\t-0.1876, 0.7947, 0.5774\n\t),\n\tmat2x3(\n\t\t0., 1., 0.,\n\t\t-0.6071, 0.7947, -0.\n\t),\n\tmat2x3(\n\t\t-0.7236, 0.447215, -0.52572,\n\t\t-0.6071, 0.7947, -0.\n\t),\n\tmat2x3(\n\t\t-0.7236, 0.447215, 0.52572,\n\t\t-0.6071, 0.7947, -0.\n\t),\n\tmat2x3(\n\t\t0., 1., 0.,\n\t\t-0.1876, 0.7947, -0.5774\n\t),\n\tmat2x3(\n\t\t0.276385, 0.447215, -0.85064,\n\t\t-0.1876, 0.7947, -0.5774\n\t),\n\tmat2x3(\n\t\t-0.7236, 0.447215, -0.52572,\n\t\t-0.1876, 0.7947, -0.5774\n\t),\n\tmat2x3(\n\t\t0., 1., 0.,\n\t\t0.4911, 0.7947, -0.3568\n\t),\n\tmat2x3(\n\t\t0.894425, 0.447215, 0.,\n\t\t0.4911, 0.7947, -0.3568\n\t),\n\tmat2x3(\n\t\t0.276385, 0.447215, -0.85064,\n\t\t0.4911, 0.7947, -0.3568\n\t)\n);","name":"Common","description":"","type":"common"}]}