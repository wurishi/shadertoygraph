{"ver":"0.1","info":{"id":"4tSfDD","date":"1515800748","viewed":627,"name":" 'single rotation' automata","username":"FabriceNeyret2","description":"simple rules with Margolus neighborhood (alternating quads).    Mouse paints.\nMany properties (time reversal, no cycle creation, still shapes,etc).\nBecause there is not only Conway-like automata around :-)\nSee ref URLs  in header. ","likes":7,"published":3,"flags":32,"usePreview":0,"tags":["automata","cellular","margolus"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SCALE 2\n\n// some descriptions and videos:\n//     http://dmishin.blogspot.com/2013/11/the-single-rotation-rule-remarkably.html\n//     https://dmishin.github.io/\n//     https://www.youtube.com/watch?v=r5GbvJ-LKH8\n//     https://www.youtube.com/watch?v=lkdnOuzHdFE \n\nvoid mainImage( out vec4 O, vec2 U ) {\n    O = texelFetch(iChannel0,ivec2(U)/SCALE,0);\n    if (O.x>0.) O.gba = vec3(0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define SCALE 2.\n\n#define T(i,j) texelFetch(iChannel0,ivec2(mod(U+vec2(i,j),floor(iResolution.xy/SCALE/2.)*2.)),0)\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    if (iFrame==0) {\n      //float l = sin(100.* length(U/iResolution.xy - 1./2./SCALE) )-.8; \n        float l = 1. - 3.5*SCALE*length(U/iResolution.xy - 1./2./SCALE); \n        O = vec4(fract(4321.*sin(1234.7*(U.x+17.31*U.y))) < l ); // init state \n        return;\n    }\n    \n\tO = T(0,0); \n    \n    //for(int i=0; i<4000000; i++) O += 0.;      // slow down\n    \n    vec2   s = vec2(iFrame%2);\n         //s = vec2(0);                          // alterning quads ( Margolus neighborhood )\n    vec2 V = mod(U-.5-s,2.); U -= V;             // location in current quad\n    if ( (T(0,0)+T(1,0)+T(0,1)+T(1,1)).x == 1. ) // change only if one single point in quad   \n          O.x = V==vec2(1,0) ? T(0,0).x\n              : V==vec2(1,1) ? T(1,0).x\n              : V==vec2(0,1) ? T(1,1).x\n              :                T(0,1).x;\n    \n    O.gba = .99*vec3(1,.98,0)*O.gba + .04*O.x;   // time blur\n    \n    if ( iMouse.z > 0. && U+V-.5 == floor(iMouse.xy/SCALE) ) O = vec4(1); // mouse draw\n}","name":"Buf A","description":"","type":"buffer"}]}