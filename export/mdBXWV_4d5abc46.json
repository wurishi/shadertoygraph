{"ver":"0.1","info":{"id":"mdBXWV","date":"1680798463","viewed":67,"name":"repeat box sdf test","username":"Gariam","description":"Test bed for me to play with a box signed distance function and repetition","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["sdf","square","repeat"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SCALE vec2(0.2, 0.2)\n#define REPEAT 0.2\n#define colorSeed 5.0\n#define blur 2.0\n\nvec3 hash32(vec2 p){\n    vec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\n\nmat2 rotate(float angle){\n    return mat2(cos(angle), sin(angle), -sin(angle), cos(angle));\n}\n\nfloat boxSDF(vec2 coord, vec2 scale, float angle){\n    vec2 v = abs(coord * rotate(angle)) - 0.2 * scale;\n    return length(max(vec2(0.0), v)) + min(0.0, max(v.x, v.y));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y; //pixel coordinates centered in the center of the screen\n    \n    vec2 pos = floor(uv / REPEAT + 0.5); //position of the cells in the screen\n    uv = mod(uv + 0.5 * REPEAT, REPEAT) - 0.5 * REPEAT; //coordinates inside the cell\n    \n    vec2 scale = sin(iTime * 2.0 + pos.y * 0.5) * 0.1 + SCALE; //scale of the square\n    float angle = sin(iTime + pos.x * 0.5); //angle of the square\n    \n    float dist = boxSDF(uv, scale, angle); //square distance from the center\n    vec3 col = vec3(smoothstep(blur / iResolution.y, 0.0, dist)); //inverts distance to be positive inside the square and applies antialiasing\n    \n    fragColor = vec4(hash32(pos + colorSeed) * col,1.0); //random color for each square\n}","name":"Image","description":"","type":"image"}]}