{"ver":"0.1","info":{"id":"Nd2GWw","date":"1617489357","viewed":69,"name":"Game of Life RGB","username":"x44203","description":"Simulates Game of Life, controllable by mouse, one simulation per channel, likely faster than https://www.shadertoy.com/view/fdjGWw","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["simulation","mathematics","art","gameoflife","gol"],"hasliked":0,"parentid":"fdjGWw","parentname":"Game of Life Configurable"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{  \n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 drawA = texture(iChannel0,uv);\n    vec4 drawB = texture(iChannel1,uv);\n    vec4 drawC = texture(iChannel2,uv);\n    fragColor = vec4(drawB.g, drawA.g, drawC.g, 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    float time = iTime;\n    ivec2 coord = ivec2(fragCoord);\n    // Try 1 4 2 and 2 5 2\n    int die = 1; // Die if <= this many neighbors\n    int live = 3; // Live if die < neighbors <= live\n    int grow = 3; // Grow with this many neighbors\n    \n    bool living = texelFetch(iChannel1, coord, 0).g > 0.5;\n    int neighbors = 0;\n    \n    for (int i = -1; i <= 1; i++)\n        for (int j = -1; j <= 1; j++)\n            neighbors += int(texelFetch(iChannel1, coord + ivec2(i, j), 0).g > 0.5);\n    \n    neighbors -= int(living);\n    \n    living = living && (die < neighbors && neighbors <= live) || !living && neighbors == grow;\n    \n    living = living || (iFrame == 0 && coord.x == 50);\n    \n    if (iMouse.z > 0.5)\n    {\n        living = (iMouse.z < 0.5 && living) || (iMouse.z > 0.5 && texelFetch(iChannel1, coord, 0).g > 0.5 || coord.x == int(iMouse.x) && coord.y == int(iMouse.y));\n    }\n    \n    //vec3 colors = texelFetch(iChannel1, coord, 0).rgb;\n    fragColor = vec4(vec3(0, living, 0), 1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    float time = iTime;\n    ivec2 coord = ivec2(fragCoord);\n    // Try 1 4 2 and 2 5 2\n    int die = 1; // Die if <= this many neighbors\n    int live = 4; // Live if die < neighbors <= live\n    int grow = 2; // Grow with this many neighbors\n    \n    bool living = texelFetch(iChannel1, coord, 0).g > 0.5;\n    int neighbors = 0;\n    \n    for (int i = -1; i <= 1; i++)\n        for (int j = -1; j <= 1; j++)\n            neighbors += int(texelFetch(iChannel1, coord + ivec2(i, j), 0).g > 0.5);\n    \n    neighbors -= int(living);\n    \n    living = living && (die < neighbors && neighbors <= live) || !living && neighbors == grow;\n    \n    living = living || (iFrame == 0 && coord.x == 50);\n    \n    if (iMouse.z > 0.5)\n    {\n        living = (iMouse.z < 0.5 && living) || (iMouse.z > 0.5 && texelFetch(iChannel1, coord, 0).g > 0.5 || coord.x == int(iMouse.x) && coord.y == int(iMouse.y));\n    }\n    \n    //vec3 colors = texelFetch(iChannel1, coord, 0).rgb;\n    fragColor = vec4(vec3(0, living, 0), 1.0);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    float time = iTime;\n    ivec2 coord = ivec2(fragCoord);\n    // Try 1 4 2 and 2 5 2\n    int die = 2; // Die if <= this many neighbors\n    int live = 5; // Live if die < neighbors <= live\n    int grow = 2; // Grow with this many neighbors\n    \n    bool living = texelFetch(iChannel1, coord, 0).g > 0.5;\n    int neighbors = 0;\n    \n    for (int i = -1; i <= 1; i++)\n        for (int j = -1; j <= 1; j++)\n            neighbors += int(texelFetch(iChannel1, coord + ivec2(i, j), 0).g > 0.5);\n    \n    neighbors -= int(living);\n    \n    living = living && (die < neighbors && neighbors <= live) || !living && neighbors == grow;\n    \n    living = living || (iFrame == 0 && coord.x == 50);\n    \n    if (iMouse.z > 0.5)\n    {\n        living = (iMouse.z < 0.5 && living) || (iMouse.z > 0.5 && texelFetch(iChannel1, coord, 0).g > 0.5 || coord.x == int(iMouse.x) && coord.y == int(iMouse.y));\n    }\n    \n    //vec3 colors = texelFetch(iChannel1, coord, 0).rgb;\n    fragColor = vec4(vec3(0, living, 0), 1.0);\n}","name":"Buffer C","description":"","type":"buffer"}]}