{"ver":"0.1","info":{"id":"ct2yWK","date":"1692298181","viewed":91,"name":"Rectangle Repetition Columns","username":"jt","description":"Just for fun: application of [url=https://www.shadertoy.com/view/ctjyWy]Rectangle Repetition[/url] by iq respectively [url=https://www.shadertoy.com/view/Dt2yWV]Rect Repet. - alternative[/url] by timestamp for columns construction.","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["columns","construction"],"hasliked":0,"parentid":"NtcfWs","parentname":"antique forest"},"renderpass":[{"inputs":[{"id":"XdX3Rr","filepath":"/media/a/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin","previewfilepath":"/media/ap/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin","type":"volume","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/ct2yWK Rectangle Repetition Columns by jt\n\n// Just for fun: application of https://www.shadertoy.com/view/ctjyWy Rectangle Repetition by iq for columns construction.\n\n// tags: columns, construction\n\n// The MIT License\n// Copyright (c) 2023 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n#define pi 3.1415926\n\nmat3 yaw_pitch_roll(float yaw, float pitch, float roll)\n{\n    mat3 R = mat3(vec3(cos(yaw), sin(yaw), 0.0), vec3(-sin(yaw), cos(yaw), 0.0), vec3(0.0, 0.0, 1.0));\n    mat3 S = mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, cos(pitch), sin(pitch)), vec3(0.0, -sin(pitch), cos(pitch)));\n    mat3 T = mat3(vec3(cos(roll), 0.0, sin(roll)), vec3(0.0, 1.0, 0.0), vec3(-sin(roll), 0.0, cos(roll)));\n\n    return R * S * T;\n}\n\n#define EPSILON 0.001\n#define DIST_MAX 50.0\n#define ITER_MAX 500u\n\nfloat halfspace(vec3 p, float d)\n{\n    return p.z - d;\n}\n\nfloat sdBox(vec3 p, vec3 b) // https://iquilezles.org/articles/distfunctions/\n{\n    vec3 q = abs(p) - b;\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat vmax(vec2 v)\n{\n    return max(v.x, v.y);\n}\n\nvoid pR45(inout vec2 p)\n{\n    p = (p + vec2(p.y, -p.x))*sqrt(0.5);\n}\n\nfloat pMod1(inout float p, float size)\n{\n    float halfsize = size*0.5;\n    float c = floor((p + halfsize)/size);\n    p = mod(p + halfsize, size) - halfsize;\n    return c;\n}\n\n// https://www.shadertoy.com/view/Xs3GRB HG SDF in WebGL by tomkh,\n// implementation of http://mercury.sexy/hg_sdf/\nfloat fOpUnionStairs(float a, float b, float r, float n)\n{\n    float d = min(a, b);\n    vec2 p = vec2(a, b);\n    pR45(p);\n    p = p.yx - vec2((r-r/n)*0.5*sqrt(2.));\n    p.x += 0.5*sqrt(2.)*r/n;\n    float x = r*sqrt(2.)/n;\n    pMod1(p.x, x);\n    d = min(d, p.y);\n    pR45(p);\n    return min(d, vmax(p -vec2(0.5*r/n)));\n}\n\nfloat sdCappedCylinder(vec3 p, float h, float r)\n{\n    vec2 d = abs(vec2(length(p.xy),p.z)) - vec2(r,h);\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n#if 1\n// The MIT License\n// Copyright Â© 2023 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\nvec2 opRepRectangle( in vec2 p, in ivec2 size, in float spacing ) // https://www.shadertoy.com/view/ctjyWy Rectangle Repetition by iq\n{\n    vec2 b = spacing*vec2(size/2);\n    p = abs(p);\n    p += spacing*0.5*vec2(1-(size&1));\n    vec2 w = p - b;\n    p -= spacing*round(min(p,b)/spacing);\n    //return p;\n    return w.x < w.y ? vec2(p.x,w.y) : vec2(w.x,p.y);\n}\n#else\nvec2 opRepRectangle(in vec2 p, in ivec2 size, in float spacing) // https://www.shadertoy.com/view/Dt2yWV Rect Repet. - alternative by timestamp \n{            \n    p = abs(p / spacing) - (vec2(size) * .5 - .5);\n    if(p.x < p.y) p = p.yx;\n    p.y -= min(0., round(p.y));\n    return p * spacing;\n}\n#endif\n\nfloat opRepLim(float z, float c, float l) // https://iquilezles.org/articles/distfunctions/\n{\n    return z-c*clamp(round(z/c),-l,l);\n}\n\nfloat map(vec3 p)\n{\n    float d = mix(0.01, 0.1, 0.5 + 0.5 * cos(iTime));\n    vec3 q = vec3(opRepRectangle(p.xy, ivec2(5,7), 1.0), p.z);\n    q.z = opRepLim(q.z, 1.0, 1.0);\n    return\n        fOpUnionStairs\n        (\n            sdCappedCylinder(q, 1.0, 0.1) - 0.01,\n            min\n            (\n                min\n                (\n                    sdBox(q, vec3(0.5, 0.5, 0.05)),\n                    sdBox(q+vec3(0,0,-1), vec3(0.5, 0.5, 0.05))\n                ),\n                halfspace(p, -1.0)\n            ),\n            0.2,\n            5.0\n        );\n        //+(texture(iChannel0, 10.0*p).x*2.0-1.0)*0.005; // try this!\n}\n\n// https://iquilezles.org/articles/normalsSDF tetrahedron normals\nvec3 normal(vec3 p)\n{\n    const float h = EPSILON;\n    const vec2 k = vec2(1,-1);\n    return\n        normalize\n        (\n            k.xyy * map(p + k.xyy*h)\n            +\n            k.yyx * map(p + k.yyx*h)\n            +\n            k.yxy * map(p + k.yxy*h)\n            +\n            k.xxx * map(p + k.xxx*h)\n        );\n}\n\nfloat trace(vec3 ro, vec3 rd) // iteration count limited to avoid stalling if ray passes very close to surface\n{\n    float t;\n    uint i;\n    for(i = 0u, t = 0.0; i < ITER_MAX && t < DIST_MAX; i++)\n    {\n        float h = map(ro + rd * t);\n        if(h < EPSILON)\n            return t;\n        t += h;\n    }\n    return DIST_MAX;\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat shadow( in vec3 ro, in vec3 rd, float mint, float maxt )\n{\n    float t;\n    uint i;\n    for(i = 0u, t = mint; i < ITER_MAX && t<maxt; i++)\n    {\n        float h = map(ro + rd*t);\n        if( h<EPSILON )\n            return 0.0;\n        t += h;\n    }\n    return 1.0;\n}\n\n// https://www.shadertoy.com/view/Xds3zN raymarching primitives\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n    float occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.01 + 0.12*float(i)/4.0;\n        float d = map( pos + h*nor );\n        occ += (h-d)*sca;\n        sca *= 0.95;\n        if( occ>0.35 ) break;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 ) ;\n}\n\n#define pi 3.1415926\n\nvoid mainImage(out vec4 fragColor, vec2 I)\n{\n    bool demo = all(lessThan(iMouse.xy, vec2(10.0)));\n    vec2 R = iResolution.xy;\n    I = (2.0 * I - R) / R.y; // concise scaling thanks to Fabrice\n    float yaw = 2.0 * pi * float(iMouse.x) / float(R.x);\n    float pitch = pi - pi / 2.0 * float(iMouse.y) / float(R.y);\n    yaw = !demo ? yaw : 2.0 * pi * fract(iTime * 0.01);\n    pitch = !demo ? pitch : 4.0/3.0 * pi / 2.0;\n\n    vec3 ro = vec3(0.0, 0.0,-3.0);\n    vec3 rd = normalize(vec3(I.xy, 2.0));\n\n    mat3 M = yaw_pitch_roll(yaw, pitch, 0.0);\n    ro = M * ro;\n    rd = M * rd;\n    //ro.z += 1.0;\n\n    float dist = trace(ro, rd);\n    //float dist = trace(ro+(texture(iChannel0, 10.0*rd.xyz+iTime/10.0).xyz*2.0-1.0)*0.005, rd);\n    vec3 dst = ro + rd * dist;\n    vec3 n = normal(dst);\n\n    vec3 lightdir = normalize(vec3(1.0, 1.0, 1.0));\n    vec3 ambient = vec3(0.1);\n    float brightness = max(dot(lightdir, n), 0.0);\n    brightness *= shadow(ro+rd*dist+n*0.01,lightdir, 0.01, DIST_MAX); // XXX artifacts on cylinder XXX\n    vec3 color = vec3(1.0);\n    //color *= (n * 0.5 + 0.5);\n    color = (ambient * calcAO(dst, n) + brightness) * color;\n\n    fragColor = mix(vec4(color, 1.0), vec4(0.0), step(DIST_MAX, dist));\n    fragColor = sqrt(fragColor); // approximate gamma\n}\n","name":"Image","description":"","type":"image"}]}