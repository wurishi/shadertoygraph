{"ver":"0.1","info":{"id":"ds2fDh","date":"1689683239","viewed":62,"name":"42 school plane 42","username":"nenuser","description":"applying texture to a simple plane ","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["plane42"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"struct Camera \n{\n    vec3 position;\n    vec3 direction;\n    float zoom; \n} camera;\n\nstruct Plane\n{\n    vec3 normal;\n    float distance; // Distance from the origin along the normal\n} plane;\n\nvoid setupScene()\n{\n    camera.position = vec3(0., 0.2, 1.5);\n    camera.direction = vec3(0., -1., 0.);\n    camera.zoom = 1.0;\n\n    plane.normal = vec3(0., 1., 0.); // Plane is horizontal, facing up\n    plane.distance = -0.4; // Positioned at the origin\n}\n\nbool intersectPlane(vec3 origin, vec3 direction, out vec3 hitPoint, out float t)\n{\n    float denom = dot(direction, plane.normal);\n\n    if(abs(denom) > 0.001)\n    {\n        t = dot(plane.normal * plane.distance - origin, plane.normal) / denom;\n\n        if(t >= 0.)\n        {\n            hitPoint = origin + t * direction;\n            return true;\n        }\n    }\n\n    return false;\n}\n\nvec3 rayTrace(vec3 origin, vec3 direction)\n{\n    vec3 hitPoint;\n    float t;\n\n    if (intersectPlane(origin, direction, hitPoint, t))\n    {\n        vec3 color = texture(iChannel0, hitPoint.xz).rgb;\n\n        return color;\n    }\n\n    return vec3(0., 0., 0.);\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{        \n    setupScene();\n    \n    vec2 uv = fragCoord/iResolution.xy - 0.5;\n    uv.x *= (iResolution.x / iResolution.y); \n    \n    vec3 direction = normalize(vec3(uv, camera.zoom) - camera.position);\n\n    vec3 col = rayTrace(camera.position, direction);\n\n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}