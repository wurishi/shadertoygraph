{"ver":"0.1","info":{"id":"ss3fRM","date":"1656207011","viewed":82,"name":"Old TensorFlow logo","username":"YutingYang","description":"Animate the old TensorFlow logo so that the letters T and F are recognizable.\nShader parameters obtained from Adelta framework:\nhttps://github.com/yyuting/Adelta","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["raycasting"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// This is a combination of a compiler-generated GLSL program for a raycasting shader with optimized parameters to best match the old TensorFlow logo, and manual written functions to animate the shader.\n// Optimized parameters and code generated using paper:\n// A𝛿: Autodiff for Discontinuous Programs – Applied to Shaders \n// Github: https://github.com/yyuting/Adelta\n\n// The compiler-generated GLSL code is less readable,\n// a more readable version of the shader written in DSL can be found here:\n// https://github.com/yyuting/Adelta/blob/main/apps/render_test_finite_diff_raytracing_structured_tf_logo.py\n\n// Target image: old TensorFlow logo\n// https://commons.wikimedia.org/wiki/File:Tensorflow_logo.svg\n\n// Shader parameters obtained using the Adelta framework\n// https://github.com/yyuting/Adelta\n\n#define width 640.\n#define height 640.\n\n    \n\n// If true, aspect ratio in the original optimization will be preserved, but extra space outside original FOV might reveal artifact.\n// If false, FOV is the same as original optimization, but aspect ratio will not be preserved.\n#define preserve_aspect_ratio true\n\n// Smaller factor will zoom in the rendering, larger factor will zoom out\nfloat scale_factor = 1.;\n\n\n\n#define X float[](4.634875006696168, 4.979438641463039, \\\n1.6621290281163437, 1.261533937415516, 1.9108343615319137, \\\n5.612353500902525, 2.355433472541739, 3.1397248885626574, 0.9674719912620897, 0.7283740243767656, 0.2124391692626848, 0.07755551136227386, 0.40806572270050623, 0.05711531908963794, -1.1263191204407754, 4.779184304442118, -0.8332182644481072, 0.3464411539980501, 0.6811463783577727, 0.4134162446172414, 0.46434718550462895, 1.2416173971836595, 1.8509768214585216, 0.4138540190791878, -0.14071853448974952, 1.2437634418595116, 0.461951831647062, 0.4146916731378999, 0.4164160222435148, 0.4634437584759347, -1.5014504059087654)\n\n\n#define p_0_idx 0\nfloat p_0 = X[p_0_idx];\n\n#define p_1_idx 1\nfloat p_1 = X[p_1_idx];\n\n#define ro_x_idx 2\nfloat ro_x = X[ro_x_idx];\n\n#define ro_y_idx 3\nfloat ro_y = X[ro_y_idx];\n\n#define ro_z_idx 4\nfloat ro_z = X[ro_z_idx];\n\n#define ang_x_idx 5\nfloat ang_x = X[ang_x_idx];\n\n#define ang_y_idx 6\nfloat ang_y = X[ang_y_idx];\n\n#define ang_z_idx 7\nfloat ang_z = X[ang_z_idx];\n\n#define p_8_idx 8\nfloat p_8 = X[p_8_idx];\n\n#define p_9_idx 9\nfloat p_9 = X[p_9_idx];\n\n#define p_10_idx 10\nfloat p_10 = X[p_10_idx];\n\n#define p_11_idx 11\nfloat p_11 = X[p_11_idx];\n\n#define p_12_idx 12\nfloat p_12 = X[p_12_idx];\n\n#define p_13_idx 13\nfloat p_13 = X[p_13_idx];\n\n#define p_14_idx 14\nfloat p_14 = X[p_14_idx];\n\n#define p_15_idx 15\nfloat p_15 = X[p_15_idx];\n\n#define box_1_pos_0_idx 16\nfloat box_1_pos_0 = X[box_1_pos_0_idx];\n\n#define box_2_pos_1_idx 17\nfloat box_2_pos_1 = X[box_2_pos_1_idx];\n\n#define box_0_pos_2_idx 18\nfloat box_0_pos_2 = X[box_0_pos_2_idx];\n\n#define box_1_dim_0_idx 19\nfloat box_1_dim_0 = X[box_1_dim_0_idx];\n\n#define box_0_dim_1_idx 20\nfloat box_0_dim_1 = X[box_0_dim_1_idx];\n\n#define box_0_dim_2_idx 21\nfloat box_0_dim_2 = X[box_0_dim_2_idx];\n\n#define box_1_dim_1_idx 22\nfloat box_1_dim_1 = X[box_1_dim_1_idx];\n\n#define box_3_dim_2_idx 23\nfloat box_3_dim_2 = X[box_3_dim_2_idx];\n\n#define box_3_pos_2_idx 24\nfloat box_3_pos_2 = X[box_3_pos_2_idx];\n\n#define box_2_dim_0_idx 25\nfloat box_2_dim_0 = X[box_2_dim_0_idx];\n\n#define box_2_dim_1_idx 26\nfloat box_2_dim_1 = X[box_2_dim_1_idx];\n\n#define box_2_dim_2_idx 27\nfloat box_2_dim_2 = X[box_2_dim_2_idx];\n\n#define box_3_dim_0_idx 28\nfloat box_3_dim_0 = X[box_3_dim_0_idx];\n\n#define box_3_dim_1_idx 29\nfloat box_3_dim_1 = X[box_3_dim_1_idx];\n\n#define box_3_pos_1_idx 30\nfloat box_3_pos_1 = X[box_3_pos_1_idx];\n\nvoid animate_params() {\n\n}\n\nint animate_type = 1;\n\n#define PI 3.141592653589793\n\nfloat interp(vec2 dest, float t) {\n    if (animate_type == 0) {\n        // cubic interpolation, zero gradient on both ends\n        float a = 2. * dest.x - 2. * dest.y;\n        float b = 3. * dest.y - 3. * dest.x;\n        float c = 0.;\n        float d = dest.x;\n\n        return a * t * t * t + b * t * t + c * t + d;\n    } else if (animate_type == 1) {\n        // cosine interpolation, zero gradient on both ends\n        float a = (dest.x + dest.y) / 2.;\n        float b = (dest.x - dest.y) / 2.;\n        \n        return a + b * cos(t * PI);\n    }\n}\n\nvec4 interp(vec4 x0, vec4 x1, float t) {\n    \n    int type = 0;\n\n    if (type == 0) {\n        // cosine interpolation, zero gradient on both ends\n        vec4 a = (x0 + x1) / 2.;\n        vec4 b = (x0 - x1) / 2.;\n        return a + b * cos(t * PI);\n    } else if (type == 1) {\n        // cubic interpolation, zero gradient on both ends\n        vec4 a = 2. * x0 - 2. * x1;\n        vec4 b = 3. * x1 - 3. * x0;\n        vec4 c = vec4(0.);\n        vec4 d = x0;\n\n        return a * t * t * t + b * t * t + c * t + d;\n    }\n}\n\nfloat interp4(float x0, float x1, float m, float t) {\n\n    float a = -16. * m + 28. * x0 - 8. * x1;\n    float b = 14. * x1 - 18. * x0 - 32. * m;\n    float c = 16. * m - 11. * x0 - 5. * x1;\n    float d = 0.;\n    float e = x0;\n    \n    return a * pow(t, 4.) + b * pow(t, 3.) + c * pow(t, 2.) + d * t + e;\n}\n\nvec4 euler_to_quaternion(vec3 ang) {\n    vec3 s = sin(ang / 2.);\n    vec3 c = cos(ang / 2.);\n    return vec4(c.x * c.y * c.z + s.x * s.y * s.z,\n                s.x * c.y * c.z - c.x * s.y * s.z,\n                c.x * s.y * c.z + s.x * c.y * s.z,\n                c.x * c.y * s.z - s.x * s.y * c.z);\n\n}\n\nvec3 quaternion_to_euler(vec4 q) {\n   \n    float test = q.x * q.y + q.z * q.w;\n    if (test > 0.499) {\n        return vec3(2. * atan(q.x, q.w),\n                    PI / 2.,\n                    0.);\n    } else if (test < -0.499) {\n        return vec3(-2. * atan(q.x, q.w),\n                    -PI / 2.,\n                    0.);\n    } else {\n        return vec3(atan(2. * (q.x * q.y + q.z * q.w), 1. - 2. * (q.y * q.y + q.z * q.z)),\n                    asin(2. * (q.x * q.z - q.w * q.y)),\n                    atan(2. * (q.x * q.w + q.y * q.z), 1. - 2. * (q.z * q.z + q.w * q.w)));\n    }\n}\n\n                    \nvoid animate_camera_pos(\ninout float  ro_x, \ninout float  ro_y, \ninout float  ro_z, \ninout float  ang_x, \ninout float  ang_y, \ninout float  ang_z){\n\n    float quater_T = 5.;\n    float time = iTime;\n    \n    time = iTime - 5.;\n        \n    //time = 1.;\n    \n    \n\n    float offset = PI / 4.;\n\n    vec3 ang_T = vec3(PI, PI / 2. - offset, 0);\n    vec3 ang_F = vec3(PI, -offset, 0.);\n    \n    vec4 q = euler_to_quaternion(vec3(ang_x, ang_y + offset, ang_z));\n    vec4 q2;\n    \n    \n    \n\n    float raw_t = mod(time, 4. * quater_T);\n    float t;\n    \n    float z_t = X[ro_z_idx];\n    float x_f = X[ro_x_idx];\n    float y_offset = 0.;\n    float y_offset_scale = -0.35;\n    \n    float p = 1.;\n    float p_scale = 1.05;\n    \n    float t2;\n        \n    if (raw_t < quater_T || raw_t > 3. * quater_T) {\n        if (raw_t < quater_T) {\n            t = raw_t / quater_T;\n        } else {\n            t = 1. - (raw_t - 3. * quater_T) / quater_T;\n        }\n\n        ro_x = X[ro_x_idx];\n        ro_z = interp(vec2(ro_z - z_t, X[ro_z_idx]), t);\n\n        q2 = interp(euler_to_quaternion(ang_T), q, t);\n        \n        if (t < 0.5) {\n            t2 = t * 2.;\n        } else {\n            t2 = 2. * (1. - t);\n        }\n        \n        y_offset = interp(vec2(0., y_offset_scale), t2);\n        \n        p = interp(vec2(1., p_scale), t2);\n        \n    } else {\n        if (raw_t < 2. * quater_T) {\n            t = 1. - (raw_t - quater_T) / quater_T;\n        } else {\n            t = (raw_t - 2. * quater_T) / quater_T;\n        }\n\n        ro_x = interp(vec2(ro_x - x_f, X[ro_x_idx]), t);\n\n        q2 = interp(euler_to_quaternion(ang_F), q, t);\n        \n        float t2;\n        if (t < 0.5) {\n            t2 = t * 2.;\n        } else {\n            t2 = 2. * (1. - t);\n        }\n        \n        if (t < 0.5) {\n            t2 = t * 2.;\n        } else {\n            t2 = 2. * (1. - t);\n        }\n                \n        p = interp(vec2(1., p_scale), t2);\n    }\n    \n    p_1 = p_1 * p;\n    p_0 = p_0 * p;\n\n\n    ro_y = interp(vec2(ro_y - 2.8, X[ro_y_idx]), t) + y_offset;\n        \n    vec3 ang = quaternion_to_euler(q2);\n    \n    ang_x = ang.x;\n    ang_y = ang.y + offset;\n    ang_z = ang.z;\n\n    // T pos in paper\n    //ang_x = 3.14;\n    //ang_y = 1.57;\n    //ang_z = 0.;\n    \n    //ang_x -= 0.1;\n    //ang_y -= 0.1;\n    \n    //ro_x = X[ro_x_idx];\n    //ro_y = X[ro_y_idx] - 2.5;\n    //ro_z = 0.3;\n    \n    // F pos in paper\n    //ang_x = 3.14;\n    //ang_y = 0.;\n    //ang_z = 0.;\n    \n    //ang_x -= 0.1;\n    //ang_y += 0.1;\n    \n    //ro_x = 0.;\n    //ro_y = X[ro_y_idx] - 2.5;\n    //ro_z = X[ro_z_idx];\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n    fragCoord.y = iResolution.y - fragCoord.y;\n    \n    float current_u;\n    float current_v;\n    \n    if (preserve_aspect_ratio) {\n        float max_scale = max(width / iResolution.x, height / iResolution.y) * scale_factor;\n        \n        vec2 padding = (vec2(width, height) - max_scale * iResolution.xy) / 2.;\n        \n        current_u = fragCoord.x * max_scale + padding.x;\n        current_v = fragCoord.y * max_scale + padding.y;\n    } else {\n        current_u = fragCoord.x / iResolution.x * width;\n        current_v = fragCoord.y / iResolution.y * height;\n    }\n\n                animate_params();\n    \n    float var00027_ro_x = float(ro_x);                \n    float  var00025_ro_x = var00027_ro_x;\n    float var00029_ro_y = float(ro_y);                \n    float  var00028_ro_y = var00029_ro_y;\n    float var00031_ro_z = float(ro_z);                \n    float  var00030_ro_z = var00031_ro_z;\n    float var00033_ang_x = float(ang_x);              \n    float  var00032_ang_x = var00033_ang_x;\n    float var00035_ang_y = float(ang_y);              \n    float  var00034_ang_y = var00035_ang_y;\n    float var00037_ang_z = float(ang_z);              \n    float  var00036_ang_z = var00037_ang_z;\n    animate_camera_pos(var00025_ro_x, var00028_ro_y, var00030_ro_z, var00032_ang_x, var00034_ang_y, var00036_ang_z);\n    float var00042_cos2 = cos(var00034_ang_y);        \n    float var00043_cos3 = cos(var00036_ang_z);        \n    float var00040 = ((var00042_cos2)*(var00043_cos3));\n    float var00044 = ((float(p_0))/(width));          \n    float var00046 = ((width)*(float(0.5)));          \n    float var00045 = ((current_u)-(var00046));        \n    float var00041 = ((var00044)*(var00045));         \n    float var00038 = ((var00040)*(var00041));         \n    float var00053_cos1 = cos(var00032_ang_x);        \n    float var00051 = (-(float(var00053_cos1)));       \n    float var00052_sin3 = sin(var00036_ang_z);        \n    float var00049 = ((var00051)*(var00052_sin3));    \n    float var00055_sin1 = sin(var00032_ang_x);        \n    float var00056_sin2 = sin(var00034_ang_y);        \n    float var00054 = ((var00055_sin1)*(var00056_sin2));\n    float var00050 = ((var00054)*(var00043_cos3));    \n    float var00047 = ((var00049)+(var00050));         \n    float var00057 = ((float(p_1))/(height));         \n    float var00059 = ((height)*(float(0.5)));         \n    float var00058 = ((current_v)-(var00059));        \n    float var00048 = ((var00057)*(var00058));         \n    float var00039 = ((var00047)*(var00048));         \n    float var00026 = ((var00038)+(var00039));         \n    float var00024 = ((var00025_ro_x)+(var00026));    \n    float var00023 = ((float(box_1_pos_0))-(var00024));\n    float var00021 = ((var00023)+(float(box_1_dim_0)));\n    float var00060 = ((var00055_sin1)*(var00052_sin3));\n    float var00062 = ((var00053_cos1)*(var00056_sin2));\n    float var00061 = ((var00062)*(var00043_cos3));    \n    float var00022 = ((var00060)+(var00061));         \n    float var00019_t0_box_0_x = ((var00021)/(var00022));\n    float var00063 = ((var00023)-(float(box_1_dim_0)));\n    float var00020_t1_box_0_x = ((var00063)/(var00022));\n    bool var00018 = ((var00019_t0_box_0_x)>=(var00020_t1_box_0_x));\n    float var00016_select = bool(var00018) ? var00019_t0_box_0_x : var00020_t1_box_0_x;\n    float var00074 = ((var00042_cos2)*(var00052_sin3));\n    float var00072 = ((var00074)*(var00041));         \n    float var00076 = ((var00053_cos1)*(var00043_cos3));\n    float var00077 = ((var00054)*(var00052_sin3));    \n    float var00075 = ((var00076)+(var00077));         \n    float var00073 = ((var00075)*(var00048));         \n    float var00071 = ((var00072)+(var00073));         \n    float var00070 = ((var00028_ro_y)+(var00071));    \n    float var00069 = ((float(box_2_pos_1))-(var00070));\n    float var00067 = ((var00069)+(float(box_0_dim_1)));\n    float var00080 = (-(float(var00055_sin1)));       \n    float var00078 = ((var00080)*(var00043_cos3));    \n    float var00079 = ((var00062)*(var00052_sin3));    \n    float var00068 = ((var00078)+(var00079));         \n    float var00065_t0_box_0_y = ((var00067)/(var00068));\n    float var00081 = ((var00069)-(float(box_0_dim_1)));\n    float var00066_t1_box_0_y = ((var00081)/(var00068));\n    bool var00064 = ((var00065_t0_box_0_y)>=(var00066_t1_box_0_y));\n    float var00017_select = bool(var00064) ? var00065_t0_box_0_y : var00066_t1_box_0_y;\n    bool var00015 = ((var00016_select)<=(var00017_select));\n    float var00013_select = bool(var00015) ? var00016_select : var00017_select;\n    float var00092 = (-(float(var00056_sin2)));       \n    float var00090 = ((var00092)*(var00041));         \n    float var00093 = ((var00055_sin1)*(var00042_cos2));\n    float var00091 = ((var00093)*(var00048));         \n    float var00089 = ((var00090)+(var00091));         \n    float var00088 = ((var00030_ro_z)+(var00089));    \n    float var00087 = ((float(box_0_pos_2))-(var00088));\n    float var00085 = ((var00087)+(float(box_0_dim_2)));\n    float var00086 = ((var00053_cos1)*(var00042_cos2));\n    float var00083_t0_box_0_z = ((var00085)/(var00086));\n    float var00094 = ((var00087)-(float(box_0_dim_2)));\n    float var00084_t1_box_0_z = ((var00094)/(var00086));\n    bool var00082 = ((var00083_t0_box_0_z)>=(var00084_t1_box_0_z));\n    float var00014_select = bool(var00082) ? var00083_t0_box_0_z : var00084_t1_box_0_z;\n    bool var00012 = ((var00013_select)<=(var00014_select));\n    float var00011_tmax_box_0 = bool(var00012) ? var00013_select : var00014_select;\n    bool var00009 = ((var00011_tmax_box_0)>(float(0)));\n    bool var00102 = ((var00019_t0_box_0_x)<=(var00020_t1_box_0_x));\n    float var00100_select = bool(var00102) ? var00019_t0_box_0_x : var00020_t1_box_0_x;\n    bool var00103 = ((var00065_t0_box_0_y)<=(var00066_t1_box_0_y));\n    float var00101_select = bool(var00103) ? var00065_t0_box_0_y : var00066_t1_box_0_y;\n    bool var00099 = ((var00100_select)>=(var00101_select));\n    float var00097_select = bool(var00099) ? var00100_select : var00101_select;\n    bool var00104 = ((var00083_t0_box_0_z)<=(var00084_t1_box_0_z));\n    float var00098_select = bool(var00104) ? var00083_t0_box_0_z : var00084_t1_box_0_z;\n    bool var00096 = ((var00097_select)>=(var00098_select));\n    float var00095_tmin_box_0 = bool(var00096) ? var00097_select : var00098_select;\n    bool var00010 = ((var00095_tmin_box_0)<=(var00011_tmax_box_0));\n    bool var00007_is_valid_box_0 = ((var00009)&&(var00010));\n    float var00119 = ((float(box_2_pos_1))-(float(box_0_dim_1)));\n    float var00118_box_1_pos_1 = ((var00119)-(float(box_1_dim_1)));\n    float var00117 = ((var00118_box_1_pos_1)-(var00070));\n    float var00116 = ((var00117)+(float(box_1_dim_1)));\n    float var00114_t0_box_1_y = ((var00116)/(var00068));\n    float var00120 = ((var00117)-(float(box_1_dim_1)));\n    float var00115_t1_box_1_y = ((var00120)/(var00068));\n    bool var00113 = ((var00114_t0_box_1_y)>=(var00115_t1_box_1_y));\n    float var00112_select = bool(var00113) ? var00114_t0_box_1_y : var00115_t1_box_1_y;\n    bool var00111 = ((var00016_select)<=(var00112_select));\n    float var00109_select = bool(var00111) ? var00016_select : var00112_select;\n    float var00125 = ((float(box_3_pos_2))-(var00088));\n    float var00124 = ((var00125)+(float(box_3_dim_2)));\n    float var00122_t0_box_1_z = ((var00124)/(var00086));\n    float var00126 = ((var00125)-(float(box_3_dim_2)));\n    float var00123_t1_box_1_z = ((var00126)/(var00086));\n    bool var00121 = ((var00122_t0_box_1_z)>=(var00123_t1_box_1_z));\n    float var00110_select = bool(var00121) ? var00122_t0_box_1_z : var00123_t1_box_1_z;\n    bool var00108 = ((var00109_select)<=(var00110_select));\n    float var00107_tmax_box_1 = bool(var00108) ? var00109_select : var00110_select;\n    bool var00105 = ((var00107_tmax_box_1)>(float(0)));\n    bool var00133 = ((var00114_t0_box_1_y)<=(var00115_t1_box_1_y));\n    float var00132_select = bool(var00133) ? var00114_t0_box_1_y : var00115_t1_box_1_y;\n    bool var00131 = ((var00100_select)>=(var00132_select));\n    float var00129_select = bool(var00131) ? var00100_select : var00132_select;\n    bool var00134 = ((var00122_t0_box_1_z)<=(var00123_t1_box_1_z));\n    float var00130_select = bool(var00134) ? var00122_t0_box_1_z : var00123_t1_box_1_z;\n    bool var00128 = ((var00129_select)>=(var00130_select));\n    float var00127_tmin_box_1 = bool(var00128) ? var00129_select : var00130_select;\n    bool var00106 = ((var00127_tmin_box_1)<=(var00107_tmax_box_1));\n    bool var00008_is_valid_box_1 = ((var00105)&&(var00106));\n    bool var00005 = ((var00007_is_valid_box_0)||(var00008_is_valid_box_1));\n    float var00150 = ((float(box_1_pos_0))-(float(box_1_dim_0)));\n    float var00149_box_2_pos_0 = ((var00150)+(float(box_2_dim_0)));\n    float var00148 = ((var00149_box_2_pos_0)-(var00024));\n    float var00147 = ((var00148)+(float(box_2_dim_0)));\n    float var00145_t0_box_2_x = ((var00147)/(var00022));\n    float var00151 = ((var00148)-(float(box_2_dim_0)));\n    float var00146_t1_box_2_x = ((var00151)/(var00022));\n    bool var00144 = ((var00145_t0_box_2_x)>=(var00146_t1_box_2_x));\n    float var00142_select = bool(var00144) ? var00145_t0_box_2_x : var00146_t1_box_2_x;\n    float var00155 = ((var00069)+(float(box_2_dim_1)));\n    float var00153_t0_box_2_y = ((var00155)/(var00068));\n    float var00156 = ((var00069)-(float(box_2_dim_1)));\n    float var00154_t1_box_2_y = ((var00156)/(var00068));\n    bool var00152 = ((var00153_t0_box_2_y)>=(var00154_t1_box_2_y));\n    float var00143_select = bool(var00152) ? var00153_t0_box_2_y : var00154_t1_box_2_y;\n    bool var00141 = ((var00142_select)<=(var00143_select));\n    float var00139_select = bool(var00141) ? var00142_select : var00143_select;\n    float var00163 = ((float(box_0_pos_2))-(float(box_0_dim_2)));\n    float var00162_box_2_pos_2 = ((var00163)-(float(box_2_dim_2)));\n    float var00161 = ((var00162_box_2_pos_2)-(var00088));\n    float var00160 = ((var00161)+(float(box_2_dim_2)));\n    float var00158_t0_box_2_z = ((var00160)/(var00086));\n    float var00164 = ((var00161)-(float(box_2_dim_2)));\n    float var00159_t1_box_2_z = ((var00164)/(var00086));\n    bool var00157 = ((var00158_t0_box_2_z)>=(var00159_t1_box_2_z));\n    float var00140_select = bool(var00157) ? var00158_t0_box_2_z : var00159_t1_box_2_z;\n    bool var00138 = ((var00139_select)<=(var00140_select));\n    float var00137_tmax_box_2 = bool(var00138) ? var00139_select : var00140_select;\n    bool var00135 = ((var00137_tmax_box_2)>(float(0)));\n    bool var00172 = ((var00145_t0_box_2_x)<=(var00146_t1_box_2_x));\n    float var00170_select = bool(var00172) ? var00145_t0_box_2_x : var00146_t1_box_2_x;\n    bool var00173 = ((var00153_t0_box_2_y)<=(var00154_t1_box_2_y));\n    float var00171_select = bool(var00173) ? var00153_t0_box_2_y : var00154_t1_box_2_y;\n    bool var00169 = ((var00170_select)>=(var00171_select));\n    float var00167_select = bool(var00169) ? var00170_select : var00171_select;\n    bool var00174 = ((var00158_t0_box_2_z)<=(var00159_t1_box_2_z));\n    float var00168_select = bool(var00174) ? var00158_t0_box_2_z : var00159_t1_box_2_z;\n    bool var00166 = ((var00167_select)>=(var00168_select));\n    float var00165_tmin_box_2 = bool(var00166) ? var00167_select : var00168_select;\n    bool var00136 = ((var00165_tmin_box_2)<=(var00137_tmax_box_2));\n    bool var00006_is_valid_box_2 = ((var00135)&&(var00136));\n    bool var00003 = ((var00005)||(var00006_is_valid_box_2));\n    float var00189 = ((float(box_1_pos_0))+(float(box_1_dim_0)));\n    float var00188_box_3_pos_0 = ((var00189)+(float(box_3_dim_0)));\n    float var00187 = ((var00188_box_3_pos_0)-(var00024));\n    float var00186 = ((var00187)+(float(box_3_dim_0)));\n    float var00184_t0_box_3_x = ((var00186)/(var00022));\n    float var00190 = ((var00187)-(float(box_3_dim_0)));\n    float var00185_t1_box_3_x = ((var00190)/(var00022));\n    bool var00183 = ((var00184_t0_box_3_x)>=(var00185_t1_box_3_x));\n    float var00181_select = bool(var00183) ? var00184_t0_box_3_x : var00185_t1_box_3_x;\n    float var00195 = ((float(box_3_pos_1))-(var00070));\n    float var00194 = ((var00195)+(float(box_3_dim_1)));\n    float var00192_t0_box_3_y = ((var00194)/(var00068));\n    float var00196 = ((var00195)-(float(box_3_dim_1)));\n    float var00193_t1_box_3_y = ((var00196)/(var00068));\n    bool var00191 = ((var00192_t0_box_3_y)>=(var00193_t1_box_3_y));\n    float var00182_select = bool(var00191) ? var00192_t0_box_3_y : var00193_t1_box_3_y;\n    bool var00180 = ((var00181_select)<=(var00182_select));\n    float var00179_select = bool(var00180) ? var00181_select : var00182_select;\n    bool var00178 = ((var00179_select)<=(var00110_select));\n    float var00177_tmax_box_3 = bool(var00178) ? var00179_select : var00110_select;\n    bool var00175 = ((var00177_tmax_box_3)>(float(0)));\n    bool var00203 = ((var00184_t0_box_3_x)<=(var00185_t1_box_3_x));\n    float var00201_select = bool(var00203) ? var00184_t0_box_3_x : var00185_t1_box_3_x;\n    bool var00204 = ((var00192_t0_box_3_y)<=(var00193_t1_box_3_y));\n    float var00202_select = bool(var00204) ? var00192_t0_box_3_y : var00193_t1_box_3_y;\n    bool var00200 = ((var00201_select)>=(var00202_select));\n    float var00199_select = bool(var00200) ? var00201_select : var00202_select;\n    bool var00198 = ((var00199_select)>=(var00130_select));\n    float var00197_tmin_box_3 = bool(var00198) ? var00199_select : var00130_select;\n    bool var00176 = ((var00197_tmin_box_3)<=(var00177_tmax_box_3));\n    bool var00004_is_valid_box_3 = ((var00175)&&(var00176));\n    bool var00001 = ((var00003)||(var00004_is_valid_box_3));\n    float var00212_cos = cos(float(p_14));            \n    bool var00218 = (!(bool(var00003)));              \n    bool var00224 = (!(bool(var00005)));              \n    bool var00228 = (!(bool(var00007_is_valid_box_0)));\n    bool var00229 = ((var00127_tmin_box_1)<=(var00095_tmin_box_0));\n    bool var00227 = ((var00228)||(var00229));         \n    bool var00226 = ((var00008_is_valid_box_1)&&(var00227));\n    float var00222_select = bool(var00226) ? var00127_tmin_box_1 : var00095_tmin_box_0;\n    bool var00225 = ((var00165_tmin_box_2)<=(var00222_select));\n    bool var00223 = ((var00224)||(var00225));         \n    bool var00221 = ((var00006_is_valid_box_2)&&(var00223));\n    float var00220_select = bool(var00221) ? var00165_tmin_box_2 : var00222_select;\n    bool var00219 = ((var00197_tmin_box_3)<=(var00220_select));\n    bool var00217 = ((var00218)||(var00219));         \n    bool var00214 = ((var00004_is_valid_box_3)&&(var00217));\n    float var00231_sign = sign(var00187);             \n    float var00230_select = bool(var00200) ? var00231_sign : float(0.0);\n    float var00215_select = bool(var00198) ? var00230_select : float(0.0);\n    float var00235_sign = sign(var00148);             \n    float var00234_select = bool(var00169) ? var00235_sign : float(0.0);\n    float var00232_select = bool(var00166) ? var00234_select : float(0.0);\n    float var00239_sign = sign(var00023);             \n    float var00238_select = bool(var00131) ? var00239_sign : float(0.0);\n    float var00236_select = bool(var00128) ? var00238_select : float(0.0);\n    float var00240_select = bool(var00099) ? var00239_sign : float(0.0);\n    float var00237_select = bool(var00096) ? var00240_select : float(0.0);\n    float var00233_select = bool(var00226) ? var00236_select : var00237_select;\n    float var00216_select = bool(var00221) ? var00232_select : var00233_select;\n    float var00213_select = bool(var00214) ? var00215_select : var00216_select;\n    float var00210 = ((var00212_cos)*(var00213_select));\n    float var00243_sin = sin(float(p_14));            \n    float var00244_cos = cos(float(p_15));            \n    float var00241 = ((var00243_sin)*(var00244_cos)); \n    float var00248_sign = sign(var00195);             \n    float var00247_select = bool(var00200) ? float(0.0) : var00248_sign;\n    float var00245_select = bool(var00198) ? var00247_select : float(0.0);\n    float var00252_sign = sign(var00069);             \n    float var00251_select = bool(var00169) ? float(0.0) : var00252_sign;\n    float var00249_select = bool(var00166) ? var00251_select : float(0.0);\n    float var00256_sign = sign(var00117);             \n    float var00255_select = bool(var00131) ? float(0.0) : var00256_sign;\n    float var00253_select = bool(var00128) ? var00255_select : float(0.0);\n    float var00257_select = bool(var00099) ? float(0.0) : var00252_sign;\n    float var00254_select = bool(var00096) ? var00257_select : float(0.0);\n    float var00250_select = bool(var00226) ? var00253_select : var00254_select;\n    float var00246_select = bool(var00221) ? var00249_select : var00250_select;\n    float var00242_select = bool(var00214) ? var00245_select : var00246_select;\n    float var00211 = ((var00241)*(var00242_select));  \n    float var00208 = ((var00210)+(var00211));         \n    float var00260_sin = sin(float(p_15));            \n    float var00258 = ((var00243_sin)*(var00260_sin)); \n    float var00263_sign = sign(var00125);             \n    float var00261_select = bool(var00198) ? float(0.0) : var00263_sign;\n    float var00266_sign = sign(var00161);             \n    float var00264_select = bool(var00166) ? float(0.0) : var00266_sign;\n    float var00267_select = bool(var00128) ? float(0.0) : var00263_sign;\n    float var00269_sign = sign(var00087);             \n    float var00268_select = bool(var00096) ? float(0.0) : var00269_sign;\n    float var00265_select = bool(var00226) ? var00267_select : var00268_select;\n    float var00262_select = bool(var00221) ? var00264_select : var00265_select;\n    float var00259_select = bool(var00214) ? var00261_select : var00262_select;\n    float var00209 = ((var00258)*(var00259_select));  \n    float var00207 = ((var00208)+(var00209));         \n    float var00206 = ((var00207)*(float(p_11)));      \n    float var00205 = ((float(p_8))+(var00206));       \n    float var00271 = ((var00207)*(float(p_12)));      \n    float var00270 = ((float(p_9))+(var00271));       \n    float var00273 = ((var00207)*(float(p_13)));      \n    float var00272 = ((float(p_10))+(var00273));      \n    vec3 var00002 = vec3(float(var00205), float(var00270), float(var00272));\n    vec3 var00000_select = bool(var00001) ? var00002 : vec3(1.0);\n    \n        fragColor = vec4(var00000_select, 1.0);\n        return;\n    }","name":"Image","description":"","type":"image"}]}