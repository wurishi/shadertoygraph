{"ver":"0.1","info":{"id":"NldfDM","date":"1663587601","viewed":67,"name":"TheOnionExpertThing","username":"RedWool","description":"Give the money oh yeah","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["3d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat3 rotY(float a)\n{\n    return mat3(\n    cos(a),0,-sin(a),\n    0,1,0,\n    sin(a),0,cos(a));\n}\n\nfloat sdfBox(vec3 p, vec3 c, vec3 d)\n{\n    vec3 len = p - c;\n    return length(len-clamp(len,-d,d))-.15;\n}\n\nfloat onion(float v, float r)\n{\n    for(int i = 0; i < 4; i++)\n    {\n        v = abs(v) - r;\n    }\n    return v;\n}\n\nfloat map(vec3 co)\n{\n    return onion(onion(sdfBox(co*rotY(iTime),\n    vec3(cos(iTime),sin(iTime),0),\n    vec3(1.5,10,1.5)) + .5*sin(iTime+co.x+co.z*2.+co.y)*sin(+co.y*5.+iTime*10.)*sin(1.57)\n    ,.1), .3);\n}\n\nvec3 normal(vec3 co)\n{\n    vec3 sDist = vec3(.0001,0,0);\n    vec3 grad;\n    \n    grad.x = map(co + sDist.xyy) - map(co - sDist.xyy);\n    grad.y = map(co + sDist.yxy) - map(co - sDist.yxy);\n    grad.z = map(co + sDist.yyx) - map(co - sDist.yyx);\n    \n    \n    return normalize(grad);\n}\n\nvec3 rayMarch(vec3 ro, vec3 rd)\n{\n    float dist = 0.;\n    const int maxMarch = 64;\n    const float minDist = .01;\n    const float maxDist = 100.;\n    \n    for (int i = 0; i < maxMarch; i++)\n    {\n        vec3 co = ro + rd * dist;\n        \n        float cd = map(co);\n        \n        if (cd < minDist)\n        {\n            vec3 norm = normal(co);\n            vec3 light = vec3(3,3, -6);\n            vec3 o = normalize(light-co);\n            \n            float inten = clamp(dot(norm, o)+.4,0.,1.);\n            return (co*.5+.5)*inten;\n        }\n        else if (cd > maxDist)\n        {\n            break;\n        }\n        \n        dist += cd;\n    }\n    \n    return vec3(0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-iResolution.xy*.5)/iResolution.y;\n\n    vec3 ro = vec3(sin(iTime*.3)*3.,0,-7);\n    vec3 rd = vec3(uv, 1);\n    \n\n    // Time varying pixel color\n    vec3 col = rayMarch(ro,rd);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}