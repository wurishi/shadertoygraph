{"ver":"0.1","info":{"id":"MdtSzs","date":"1461026576","viewed":193,"name":"Mouse Tracker","username":"akohdr","description":"Quick and dirty mouse tracking tool.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["mouse"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Created by Andrew Wild - akohdr/2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// Quick and dirty mouse tracking tool because I needed one.\n\n// Cut/Paste this code into a seperate buffer and overlay on your shader.\n// You can then track absolute and texture coord position of mouse.\n\n#define BLK vec4(.0,.0,.0,1.)\n#define WHT vec4(1.,1.,1.,1.)\n\n// tweaked 7 seg decoder originally from dr2 @ https://www.shadertoy.com/view/MddXRl\n#define HSEG(a,b,c) (1.-smoothstep(a,b,abs(c)))\n#define SEG(q) HSEG(.13,.17,q.x)*HSEG(.5,.57,q.y)\n#define CHK b=a/2;if(b*2!=a)d+= \nfloat Seg7(vec2 q, int v)\n{\n  float d;\n  int a, b;\n  const vec2 vp = vec2 (.5,.5), \n             vm = vec2 (-.5,.5), \n             vo = vec2 (1,0);\n  if (v < 5) {\n    if (v == -1) a = 8;\n    else if (v == 0) a = 119;\n    else if (v == 1) a = 36;\n    else if (v == 2) a = 93;\n    else if (v == 3) a = 109;\n    else a = 46;\n  } else {\n    if (v == 5) a = 107;\n    else if (v == 6) a = 123;\n    else if (v == 7) a = 37;\n    else if (v == 8) a = 127;\n    else a = 111;\n  }\n  q = (q-.5) * vec2(1.7,2.3);\n  d = 0.; CHK SEG(vec2(q.yx - vo));\n  a = b;  CHK SEG(vec2(q.xy - vp));\n  a = b;  CHK SEG(vec2(q.xy - vm));\n  a = b;  CHK SEG(vec2(q.yx));\n  a = b;  CHK SEG(vec2(q.xy + vm));\n  a = b;  CHK SEG(vec2(q.xy + vp));\n  a = b;  CHK SEG(vec2(q.yx + vo));\n  return d;\n}\n\nint decDigit(lowp float v, int i) {\n    float f = float(i), \n          p1 = pow(10.,f-1.);\n    return int((mod(v,pow(10.,f))-mod(v,p1))/p1);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy,\n         left = vec2(-1,0),\n         home=24.*(fragCoord*vec2(-1,1))/iResolution.xy;\n    \n    fragColor = vec4(0);\n\n    // Likely easier to use black to blend so comment/remove this\n    fragColor = vec4(uv,0.5+0.5*sin(iTime),1.0);\n    \n#define DIGITS(l) for(int i=1;i<=l;i++){xy+=left;fragColor+=vec4(Seg7(xy,decDigit(v,i) ));}\n    \n    // Current frame\n    float v = float(iFrame); \n    vec2 xy = home + vec2(12.,-20);\n    DIGITS(8);\n\n    // Mouse position XY absolute\n    v = float(iMouse.x); \n    xy = home + vec2(7.,-18);\n    DIGITS(4);\n    \n    v = float(iMouse.y); \n    xy = home + vec2(12.,-18);\n    DIGITS(4);\n\n    // Mouse position XY texure coord (3 dec. places)\n    v = 1000.*iMouse.x/iResolution.x; \n    xy = home + vec2(7.,-16);\n    DIGITS(3);\n    \n    v = 1000.*iMouse.y/iResolution.y; \n    xy = home + vec2(12.,-16);\n    DIGITS(3);\n}\n\n","name":"Image","description":"","type":"image"}]}