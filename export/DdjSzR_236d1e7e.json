{"ver":"0.1","info":{"id":"DdjSzR","date":"1669822819","viewed":259,"name":"Pixel Pusher","username":"SnoopethDuckDuck","description":"Press WASD or up/down/left/right to move, R to reset.\n\nThere's not really an objective, I was just playing with mechanics. But maybe see if you can make a blue diamond :)","likes":8,"published":3,"flags":48,"usePreview":0,"tags":["game","automata","ca"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    \n    float zm = 0.05; \n    vec2 res = floor(iResolution.xy);    \n    vec2 f = mod(fragCoord, res);\n    \n    vec3 col = texelFetch( iChannel0, ivec2(zm * f + 0.5 * (1.-zm) * res), 0).rgb;\n    fragColor.rgb = col;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define KEYBOARD iChannel1\n#define KEY_RESET 82\n\n#define KEY_LEFT 37\n#define KEY_UP 38\n#define KEY_RIGHT 39\n#define KEY_DOWN 40\n#define KEY_A 65\n#define KEY_W 87\n#define KEY_D 68\n#define KEY_S 83\n\n// white red green blue black yellow purple half-white half-red\n#define W vec4(1)\n#define R  vec4(1,0,0,0)\n#define G  vec4(0,1,0,0)\n#define BL vec4(0,0,1,0) \n#define B vec4(0)\n#define Y vec4(1,1,0,0)\n#define P vec4(1,0,1,0)\n#define HW vec4(0.5)\n#define HR vec4(0.5,0,0,0)\n\n#define hasNbr(c) (t==c||b==c||l==c||r==c)\n#define hasNbr2(c) (t==c||b==c||l==c||r==c||tl==c||tr==c||bl==c||br==c)\n#define allNbr(c) (t==c&&b==c&&l==c&&r==c)\n#define allNbr2(c) (t==c&&b==c&&l==c&&r==c&&tl==c&&tr==c&&bl==c&&br==c)\n//#define is(c) e==c\n\n// Mechanics:\n// W is player\n// R gets pushed, travels in G, turns P to Y\n// G gets pulled, turns into BL, turns into R\n// BL is a wall, turns R into BL, turns into W\n// B is empty space\n// P turns into Y\n// Y spawns R\n// HW used to make player move once per button press\n// HR used to make R travel in G\n\n// Bugs:\n// I think half reds can kill you, playing on paused is buggy\n\nvec4 cell(in ivec2 p) {\n    ivec2 r = ivec2(textureSize(iChannel0, 0));\n    p = (p+r) % r;\n    return texelFetch(iChannel0, p, 0 ).rgba;\n}\n\nbool key_down(int key) {\n    return int(texelFetch(KEYBOARD, ivec2(key, 0), 0).x) == 1;\n}\n\nvoid mainImage( out vec4 col, in vec2 f )\n{\n    ivec2 px = ivec2(f);\n    int frame = iFrame;\n    \n    col = vec4(0);\n    if (frame == 0 || key_down(KEY_RESET)) {    \n        col = vec4(0);\n        if (length(f+.5-floor(0.5 * iResolution.xy)) < 1.)\n            col = W;\n            \n        if (length(f+.5+vec2(3,-1)-floor(.5 * iResolution.xy)) < 1.)\n            col = R; \n       \n        if (length(f+.5-vec2(3,1)-floor(.5 * iResolution.xy)) < 1.)\n            col = P;  \n        \n        return;\n    }\n           \n    // Center cell\n    vec4 e = cell(px);\n    \n    // Neighbour cells\n    vec4 b = cell(px - ivec2(0,1));\n    vec4 t = cell(px + ivec2(0,1));\n    vec4 l = cell(px - ivec2(1,0));\n    vec4 r = cell(px + ivec2(1,0));   \n    vec4 bl = cell(px + ivec2(-1,-1));\n    vec4 br = cell(px + ivec2(1, -1));\n    vec4 tl = cell(px + ivec2(-1, 1));\n    vec4 tr = cell(px + ivec2(1,  1));   \n      \n    col = e;\n    \n    int dirx = 0;\n    int diry = 0;\n    if (key_down(KEY_W) || key_down(KEY_UP))\n        diry++;\n    if (key_down(KEY_S) || key_down(KEY_DOWN))\n        diry--;\n    if (key_down(KEY_D) || key_down(KEY_RIGHT))\n        dirx++;\n    if (key_down(KEY_A) || key_down(KEY_LEFT))\n        dirx--;\n    \n    // player is moving\n    if (dirx != 0 || diry != 0) {\n        vec4 oc = cell(px + ivec2(dirx, diry));\n        vec4 c = cell(px - ivec2(dirx, diry));\n        vec4 c2 = cell(px - ivec2(2 * dirx, 2 * diry));\n        \n        if (e == W) {\n            if (c == G && oc == B) // fast travel in G\n                col = G;\n            else if (oc != BL && oc != Y && oc != P) // stop at walls\n                col = B;          \n        }\n        else if (e == R) { // get pushed\n            if (c == W)\n                col = HW;\n        } \n        else if (e == G) { // get fast travelled in\n            if (c == W)\n                col = W;       \n        }\n        else if (e == B) { \n            if (c == W) // get travelled in\n                col = HW;\n            else if (c == R && c2 == W) // get R travelled in\n                col = R;\n        }                 \n    }    \n    \n    // player is not moving (reset to W after buttons released)\n    else if (e == HW)\n        col = W;\n         \n    // independent of player (after movement)\n    if (e == R) {\n        if (hasNbr(G)) \n            col = HR;\n        else if (hasNbr(R))\n            col = G;\n        else if (hasNbr(BL))\n            col = BL;\n    }\n    else if (e == G) {\n        if (hasNbr(R))\n            col = R;\n        else if (allNbr2(G))\n            col = BL;\n    }\n    else if (e == BL) {\n        if (allNbr(BL))\n            col = W;\n        else if (allNbr(W))\n            col = W;\n    }\n    else if (e == B) {\n        if (hasNbr(Y))\n            col = R;\n        else if (allNbr(R))\n            col = Y;\n    }  \n    else if (e == P) {\n        if (hasNbr(R))\n            col = Y;\n    }\n    else if (e == HR) {\n        if (hasNbr(R))\n            col = B; // change me to P for something weird\n    } \n    \n    \n}","name":"Buffer A","description":"","type":"buffer"}]}