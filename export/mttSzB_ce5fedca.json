{"ver":"0.1","info":{"id":"mttSzB","date":"1685550182","viewed":80,"name":"BetterStar","username":"Mario8664","description":"draw many triangles, better than https://www.shadertoy.com/view/cdf3Wl","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926535897932384626433832795\n#define SEED 752\n\nfloat GetTriangle(vec2 uv, vec2 p, vec2 d1, vec2 d2)\n{\n    vec2 duv = uv - p;\n    vec3 cd1d2 = cross(vec3(d1, 0.0), vec3(d2, 0.0));\n    vec3 cd1duv = cross(vec3(d1, 0.0), vec3(duv, 0.0));\n    vec3 cduvd2 = cross(vec3(d2, 0.0), vec3(duv, 0.0));\n    if(cd1d2.z * cd1duv.z > 0.0 && cd1d2.z * cduvd2.z < 0.0 ) \n    {\n        float t = cd1duv.z / (cd1duv.z - cduvd2.z);\n        vec2 maxD = d1 + (d2 - d1) * t;\n        if(dot(duv, duv) <= dot(maxD, maxD))\n        {\n            return 1.0;\n        }\n    }\n    return 0.0;\n\n}\n\nvec2 GetRotatePoint(float angle, vec2 p)\n{\n    float sa = sin(angle);\n    float ca = cos(angle);\n    \n    mat2 rot = mat2(ca, sa, -sa, ca);\n    return rot * p;\n\n}\n\nfloat GetStar(vec2 uv, vec2 pos, float inRadius, float outRadius, float count, float initAngle)\n{\n    float angle = PI * 2.0 / count;\n    vec2 up = GetRotatePoint(initAngle, vec2(0.0, 1.0));\n    float sum = 0.0;\n    for(float i = 0.0; i < count; i++)\n    {\n        vec2 d1 = GetRotatePoint(i * angle, up * outRadius);\n        vec2 d2 = GetRotatePoint((i + 1.0) * angle, up * outRadius);\n        vec2 id = GetRotatePoint((i + 0.5) * angle, up * inRadius);\n        \n        float t1 = GetTriangle(uv, pos, d1, id);\n        float t2 = GetTriangle(uv, pos, id, d2);\n        sum = max(sum, t1);\n        sum = max(sum, t2);\n    }\n    \n    \n    return sum;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.y;\n\n    float star = 0.0; \n    int s = SEED;\n    for(int i = 0; i < 30; i++)\n    {\n        float posX = nextFloat(s, iResolution.x / iResolution.y);\n        float posY = nextFloat(s);\n        float size = nextFloat(s, 0.005, 0.02);\n        float expand = nextFloat(s, 0.2);\n        float angle = nextFloat(s, PI * 2.0);\n        star = max(star, GetStar(uv, vec2(posX, posY), size, size * (2.0 + sin(iTime * 5.0) * 0.2 + expand), 5.0, iTime + angle));\n    }\n    \n    vec3 col = mix(vec3(0.0), vec3(1.0), ceil(star));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"int xorshift(in int value) {\n    // Xorshift*32\n    // Based on George Marsaglia's work: http://www.jstatsoft.org/v08/i14/paper\n    value ^= value << 13;\n    value ^= value >> 17;\n    value ^= value << 5;\n    return value;\n}\n\nint nextInt(inout int seed) {\n    seed = xorshift(seed);\n    return seed;\n}\n\nint nextInt(inout int seed, in int minI, in int maxI) {\n    seed = xorshift(seed);\n    return minI + seed % (maxI - minI);\n}\n\nfloat nextFloat(inout int seed) {\n    seed = xorshift(seed);\n    // FIXME: This should have been a seed mapped from MIN..MAX to 0..1 instead\n    return abs(fract(float(seed) / 3141.592653));\n}\n\nfloat nextFloat(inout int seed, in float maxf) {\n    return nextFloat(seed) * maxf;\n}\n\nfloat nextFloat(inout int seed, in float minf, in float maxf) {\n    return minf + nextFloat(seed) * (maxf - minf);\n}","name":"Common","description":"","type":"common"}]}