{"ver":"0.1","info":{"id":"cttfWM","date":"1701449349","viewed":114,"name":"Rhombic Dodecahedron Roof (SDF)","username":"TheTurk","description":"Distance function (exact) for a rhombic dodecahedron roof ([url]https://www.shadertoy.com/view/mdjBDt[/url]), a square pyramid with a height half of its width. Six of these pyramids form a cube or when inverted a rhombic dodecahedron.","likes":11,"published":1,"flags":0,"usePreview":1,"tags":["3d","distancefield","sdf","voxel","distance","dodecahedron","tessellation","pyramid","polyhedron","primitive","spacefilling","rhombic","roof"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float pi = 3.141592;\n\nfloat pyramid(vec3 position, float halfSize) {\n    position.y += halfSize * 0.5;\n    position.xz = abs(position.xz);  \n    position.xz -= vec2(-1.0, 1.0) * min(position.z - position.x, 0.0);\n    vec3 d1 = vec3(max(position.x - halfSize, 0.0), position.y, max(position.z - halfSize, 0.0));\n    vec3 q = position;\n    float h = q.y + q.z - halfSize;\n    q.yz -= 0.5 * h;\n    q -= vec3(2.0, 1.0, -1.0) / 3.0 * max(q.x - q.z, 0.0);\n    vec3 d2 = position - clamp(q, 0.0, halfSize); \n    float d = sqrt(min(dot(d1, d1), dot(d2, d2)));\n    return max(h, -position.y) < 0.0 ? -d : d;\n}\n\nmat3 rotationMatrixAxisAngle(vec3 axis, float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    vec3 column1 = axis * axis.x * (1.0 - c) + vec3(c, axis.z * s, -axis.y * s);\n    vec3 column2 = axis * axis.y * (1.0 - c) + vec3(-axis.z * s, c, axis.x * s);\n    vec3 column3 = axis * axis.z * (1.0 - c) + vec3(axis.y * s, -axis.x * s, c);\n    return mat3(column1, column2, column3);\n}\n\nmat3 lookAtMatrix(vec3 from, vec3 to) {\n    vec3 forward = normalize(to - from);\n    vec3 right = normalize(cross(forward, vec3(0.0, 1.0, 0.0)));\n    vec3 up = cross(right, forward);\n    return mat3(right, up, forward);\n}\n\nfloat roof(vec3 position, float halfSize) {\n    float fractTime = fract(iTime * 0.5);\n    float floorTime = floor(iTime * 0.5);\n    float timeStep = mod(floorTime, 6.0);\n    position.y = -abs(position.y);\n    position.y -= -halfSize * 0.5;\n    if (timeStep == 0.0) { // move up\n       position.y -= smoothstep(0.25, 0.75, fractTime) * -halfSize * 1.2;\n    }  else if (timeStep == 1.0) { // rotate\n       position.y -= -halfSize * 1.2;\n       position.y -= -halfSize * 0.5;\n       float angle = smoothstep(0.25, 0.75, fractTime) * pi;\n       position = rotationMatrixAxisAngle(vec3(1.0, 0.0, 0.0), angle) * position; \n       position.y -= halfSize * 0.5;\n    } else if (timeStep == 2.0) { // move down\n       position.y -= smoothstep(0.25, 0.75, 1.0 - fractTime) * -halfSize * 1.2;\n       position.y -= -halfSize * 0.5;\n       position.y = -position.y;\n       position.y -= halfSize * 0.5;\n    } else if (timeStep == 3.0) { // move up\n       position.y -= smoothstep(0.25, 0.75, fractTime) * -halfSize * 1.2;\n       position.y -= -halfSize * 0.5;\n       position.y = -position.y;\n       position.y -= halfSize * 0.5;\n    }  else if (timeStep == 4.0) { // rotate\n       position.y -= -halfSize * 1.2;\n       position.y -= -halfSize * 0.5;\n       float angle = smoothstep(0.25, 0.75, 1.0 - fractTime) * pi;\n       position = rotationMatrixAxisAngle(vec3(1.0, 0.0, 0.0), angle) * position; \n       position.y -= halfSize * 0.5;\n    } else if (timeStep == 5.0) { // move down\n       position.y -= smoothstep(0.25, 0.75, 1.0 - fractTime) * -halfSize * 1.2;\n    }\n    return pyramid(position, halfSize);\n}\n\nfloat sdf(vec3 position) {     \n    float cornerRadius = 0.01;\n    float halfSize = 0.2; \n    float d = roof(position, halfSize);\n    d = min(d, roof(position.yxz, halfSize));\n    d = min(d, roof(position.xzy, halfSize));\n    d -= cornerRadius;\n    return d;\n}\n\nvec3 normal(vec3 position) {\n    float epsilon = 0.001;\n    vec3 gradient = vec3(\n        sdf(position + vec3(epsilon, 0, 0)) - sdf(position + vec3(-epsilon, 0, 0)),\n        sdf(position + vec3(0, epsilon, 0)) - sdf(position + vec3(0, -epsilon, 0)),\n        sdf(position + vec3(0, 0, epsilon)) - sdf(position + vec3(0, 0, -epsilon))\n    );\n    return normalize(gradient);\n}\n\nfloat raycast(vec3 rayOrigin, vec3 rayDirection) {\n    int stepCount = 256;\n    float maximumDistance = 5.0;\n    float t = 0.0;\n    for (int i = 0; i < stepCount; i++) {\n        if (t > maximumDistance) {\n            break;\n        }\n        vec3 currentPosition = rayOrigin + rayDirection * t;\n        float d = sdf(currentPosition);\n        if (d < 0.0001) {\n            return t;\n        }\n        t += d;\n    }\n    return 0.0;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\tfloat angle = 0.5 * (iTime - 11.7);\n\tvec3 rayOrigin = vec3(1.0 * cos(angle), 0.5, 1.0 * sin(angle));\n    vec3 targetPosition = vec3(0.0);\n    mat3 cameraTransform = lookAtMatrix(rayOrigin, targetPosition);\n    vec3 result = vec3(0.0);\n    ivec2 sampleCount = ivec2(3.0);\n    for (int y = 0; y < sampleCount.y; y++) {\n        for (int x = 0; x < sampleCount.x; x++) {\n            vec2 uv = fragCoord + (vec2(float(x), float(y)) / vec2(sampleCount) - 0.5);\n            uv = uv / iResolution.xy;\n            uv = (uv * 2.0) - 1.0;\n            uv.x *= iResolution.x / iResolution.y;\n            vec3 rayDirection = normalize(vec3(uv, 1.5));\n            rayDirection = cameraTransform * rayDirection;\n            float t = raycast(rayOrigin, rayDirection);\n            vec3 color = vec3(0.0);\n            if (t > 0.0) {\n                // same style that Inigo Quilez uses in his shaders\n                vec3 position = rayOrigin + rayDirection * t;\n                vec3 lightDirection = vec3(0.57735);\n                vec3 n = normal(position);\n                float diffuseAngle = max(dot(n, lightDirection), 0.0);\n                // diffuse\n                color = vec3(0.8, 0.7, 0.5) * diffuseAngle;\n                // ambient\n                color += vec3(0.2, 0.3, 0.4) * ((n.y + 1.0) * 0.5);\n            }\n            // gamma        \n            color = sqrt(color);\n            result += color;\n        }\n    }\n    result /= float(sampleCount.x * sampleCount.y);\n\tfragColor = vec4(result, 1.0);\n}","name":"Image","description":"","type":"image"}]}