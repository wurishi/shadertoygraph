{"ver":"0.1","info":{"id":"lscfW7","date":"1525373928","viewed":114,"name":"Line detection shader","username":"Nixx","description":"Line detection shader","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["linefilter"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 grayscale = vec3(0.299f, 0.587f, 0.114f);\n\nvec3 texsample(const int x, const int y, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy / iResolution.xy * iChannelResolution[0].xy;\n\tuv = (uv + vec2(x, y)) / iChannelResolution[0].xy;\n\treturn vec3(dot(grayscale, texture(iChannel0, uv).xyz));\n}\n\n\nvec3 texfilter(in vec2 fragCoord, float kernel[9])\n{\n    vec3 sum = texsample(-1, -1, fragCoord) * kernel[0]\n             + texsample(-1,  0, fragCoord) * kernel[1]\n             + texsample(-1,  1, fragCoord) * kernel[2]\n             + texsample( 0, -1, fragCoord) * kernel[3]\n             + texsample( 0,  0, fragCoord) * kernel[4]\n             + texsample( 0,  1, fragCoord) * kernel[5]\n             + texsample( 1, -1, fragCoord) * kernel[6]\n             + texsample( 1,  0, fragCoord) * kernel[7]\n             + texsample( 1,  1, fragCoord) * kernel[8];\n    \n\treturn sum / 6.;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 img =texture(iChannel0,uv);\n    \n    \n    float line_h[9] = float[9] (\n    \t1.0, 1.0, 1.0,\n        2.0, 2.0, 2.0,\n       -1.0, -1.0, -1.0\n    );\n    float line_v[9] = float[9] (\n    \t1.0, 2.0, -1.0,\n        1.0, 2.0, -1.0,\n        1.0, 2.0, -1.0\n    );\n    \n    float line_s[9] = float[9] (\n    \t2.0, -1.0, -1.0,\n        1.0, 2.0, -1.0,\n        1.0, 1.0, 2.0\n    );\n    float line_s2[9] = float[9] (\n    \t1.0, 1.0, 2.0,\n        1.0, 2.0, -1.0,\n        2.0, -1.0, -1.0\n    );\n    \n    \n    vec2 fc = fragCoord.xy;\n\n    vec3 lines = max(\n        max(texfilter(fc, line_s), texfilter(fc, line_s2)),\n        max(texfilter(fc, line_h), texfilter(fc, line_v))\n    );\n    \n    float scale = 0.8;\n    if(lines.x < scale && lines.y < scale && lines.z < scale) {\n        lines = vec3(0.0);\n    }\n    else {\n        lines = vec3(1.0);\n    }\n    \n\n    \n    fragColor = vec4(lines, 1.0);\n\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec3 grayscale = vec3(0.299f, 0.587f, 0.114f);\n\nvec3 texsample(const int x, const int y, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy / iResolution.xy * iChannelResolution[0].xy;\n\tuv = (uv + vec2(x, y)) / iChannelResolution[0].xy;\n\treturn vec3(dot(grayscale, texture(iChannel0, uv).xyz));\n}\n\nvec3 texfilter(in vec2 fragCoord, float kernel[9])\n{\n    vec3 sum = texsample(-1, -1, fragCoord) * kernel[0]\n             + texsample(-1,  0, fragCoord) * kernel[1]\n             + texsample(-1,  1, fragCoord) * kernel[2]\n             + texsample( 0, -1, fragCoord) * kernel[3]\n             + texsample( 0,  0, fragCoord) * kernel[4]\n             + texsample( 0,  1, fragCoord) * kernel[5]\n             + texsample( 1, -1, fragCoord) * kernel[6]\n             + texsample( 1,  0, fragCoord) * kernel[7]\n             + texsample( 1,  1, fragCoord) * kernel[8];\n    \n\treturn sum / 4.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    vec2 uv = fragCoord.xy;    \n    \n    float sobel_h[9] = float[9] (\n    \t4.0, 8.0, 4.0,\n        0.0, 0.0, 0.0,\n        -4.0, -8.0, -4.0\n    );\n    float sobel_v[9] = float[9] (\n    \t4.0, 0.0, -4.0,\n        8.0, 0.0, -8.0,\n        4.0, 0.0, -4.0\n    );\n    \n    vec3 sobel = sqrt(\n        texfilter(uv, sobel_h) *  texfilter(uv, sobel_h) +\n\t\ttexfilter(uv, sobel_v) *  texfilter(uv, sobel_v)\n\n    );\n\n    \n    fragColor = vec4(sobel, 1);\n}","name":"Buf A","description":"","type":"buffer"}]}