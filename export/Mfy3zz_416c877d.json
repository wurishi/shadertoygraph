{"ver":"0.1","info":{"id":"Mfy3zz","date":"1712323986","viewed":45,"name":"Rainbow gradient YIQ","username":"AgateDragon","description":"Rainbow gradient using the YIQ colour format\nhttps://agatedragon.blog/2024/04/06/shadertoy-rainbow-gradient/","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["gradient","rainbow","yiq"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Change option to see different gradients.\n// Range: 0 to 3\n#define OPTION 1\n\n#define PI 3.14159265359\n#define TWO_PI PI * 2.0\n\n// Edge smoothing\nconst float SMOOTHING = 256.0;\n\n// Rainbow start colour\nconst vec3 startColour = vec3(1.0, 0.0, 0.0);\n\nconst mat3 YIQ_CONVERT = mat3(\n    0.299, 0.596, 0.211,\n    0.587, -0.274, -0.523,\n    0.114, -0.322, 0.312\n);\n\nconst mat3 RGB_CONVERT = mat3(\n    1.0, 1.0, 1.0,\n    0.956, -0.272, -1.106,\n    0.621, -0.647, 1.703\n);\n\nvec3 ToYIQ(vec3 colour)\n{\n    return YIQ_CONVERT * colour;\n}\n\nvec3 ToRGB(vec3 colour)\n{\n    return RGB_CONVERT * colour;\n}\n\nvec3 HueShift(vec3 colour, float shift)\n{\n    vec3 yiq = ToYIQ(colour);\n \n    mat2 rotMatrix = mat2(\n        cos(shift), -sin(shift),\n        sin(shift), cos(shift)\n    );\n    yiq.yz *= rotMatrix;\n \n    return ToRGB(yiq);\n}\n\n// https://easings.net/#easeInOutCubic\nfloat EaseInOutCubic(float x)\n{\n    return x < 0.5 ? 4.0 * x * x * x : 1.0 - pow(-2.0 * x + 2.0, 3.0) / 2.0;\n}\n\nvec3 EaseInOutCubic(vec3 rgb)\n{\n    rgb.r = EaseInOutCubic(rgb.r);\n    rgb.g = EaseInOutCubic(rgb.g);\n    rgb.b = EaseInOutCubic(rgb.b);\n    return rgb;\n}\n\nvoid mainImage(out vec4 fragColour, in vec2 fragCoord)\n{\n    // Normalised pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    // Rainbow gradient\n    vec3 rgb = HueShift(startColour, uv.y * TWO_PI);\n    \n    // Optional smoothing\n    switch(OPTION)\n    {\n        case 0:\n        // No smoothing\n        break;\n        case 1:\n        // Calculate aspect ratio\n        float w = 1.0 / min(iResolution.x, iResolution.y);\n        \n        // Smoothing\n        float s = SMOOTHING * w;\n        rgb = smoothstep(-s, s, rgb);\n        break;\n        case 2:\n        // Easing\n        rgb = EaseInOutCubic(rgb);\n        break;\n        case 3:\n        // Cubic smoothing\n        // https://www.shadertoy.com/view/MsS3Wc\n        rgb = rgb * rgb * (3.0 - 2.0 * rgb);\n        break;\n    }\n    \n    // Mix\n    vec4 tex = texture(iChannel0, uv);\n    fragColour.rgb = mix(rgb, tex.rgb, 0.5);\n    \n    // Set alpha\n    fragColour.a = tex.a;\n}","name":"Image","description":"","type":"image"}]}