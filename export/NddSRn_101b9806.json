{"ver":"0.1","info":{"id":"NddSRn","date":"1632498438","viewed":306,"name":"Sinusoidal Warp (SH)","username":"ShadyHeadstash","description":"Sinusoidal warp, sans-bump map.","likes":7,"published":3,"flags":0,"usePreview":0,"tags":["specular","warp","bump","sinusoidal"],"hasliked":0,"parentid":"4l2XWK","parentname":"Bumped Sinusoidal Warp"},"renderpass":[{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// --- Original \"Bumped Sinusoidal Warp\" shader by Shane from https://www.shadertoy.com/view/4l2XWK\n// Modified by Mikael Ems (Shady Headstash)\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n#define brightness 0.5\n#define refraction 0.4\n\n// Warp function. Variations have been around for years. This is\n// almost the same as Fabrice's version:\n// Fabrice - Plop 2\n// https://www.shadertoy.com/view/MlSSDV\nvec2 W(vec2 p){\n    \n    p = (p+3.)*4.;\n\n    float t = iTime/2.;\n\n    // Layered, sinusoidal feedback, with time component.\n    for (int i=0; i<3; i++){\n        p += cos( p.yx*3. + vec2(t,1.57))/3.;\n        p += sin( p.yx + t + vec2(1.57,0))/2.;\n        p *= 1.3;\n    }\n\n    // A bit of jitter to counter the high frequency sections.\n    p +=  fract(sin(p+vec2(13, 7))*5e5)*.03-.015;\n\n    return mod(p,2.)-1.; // Range: [vec2(-1), vec2(1)]\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    // Screen coordinates.\n\tvec2 u = (fragCoord - iResolution.xy*.5)/iResolution.y;\n    // Texture lookup.\n    vec2 tu = W(u);\n\n    u += vec2(0.) * 0.25;\n    fragColor.w = length(W(u));\n    //fragColor = texture(iChannel0, u + tu*refraction);\n    //fragColor = (vec4(.7, .4, .1, 1) * pow(max((fragColor.w-length(W(u - .01))), 0.)*8. + 1., 4.)*.1 + .5)*fragColor.w;\n\n    // Shading.\n    float c = (1.0-length(tu));\n    c *= sqrt(c);\n    c = pow(c, 1.1-brightness);\n\n\n    // Texture color.\n    fragColor = vec4(c) * texture(iChannel0, u + tu*(refraction*0.1));\n    //fragColor = smoothstep(.05, .5, fragColor*fragColor);\n\n}","name":"Image","description":"","type":"image"}]}