{"ver":"0.1","info":{"id":"DsSXDD","date":"1670285760","viewed":64,"name":"asdasd_frac","username":"mishazawa","description":"rewrite old rust fractal\nhttps://github.com/mishazawa/Frac\n","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["fractal","juliaset","noob"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define FRACTAL_DEPTH 1024\n\nvec3 hex (int v) {\n    return vec3(float(v % 255) / 255.0f);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float angle = iTime * .5;\n    float zoom  = 2.;\n    float colorDepth = 64.;\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    uv *= zoom;\n    uv -= zoom/2.;\n    \n    float real = uv.x;\n    float imag = uv.y;\n    \n    int depth = 0;\n    \n    for (int i = 0; i < FRACTAL_DEPTH; i++){\n        depth = i;\n        \n        float re = pow(real, 2.) - pow(imag, 2.);\n        float im = 2. * real * imag;\n        \n        real = re + cos(angle);\n        imag = im + sin(angle);\n        \n        if (abs(real + imag) > colorDepth) {\n            break;  // Bail\n        }\n    }\n    vec3 col = vec3(1.);\n \n    if (depth == FRACTAL_DEPTH) {\n       col = vec3(0.); \n    } else {\n       col = hex(depth * int(colorDepth));\n    }\n    \n    \n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}