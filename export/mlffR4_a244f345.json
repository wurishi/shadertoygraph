{"ver":"0.1","info":{"id":"mlffR4","date":"1692659146","viewed":97,"name":"Secant to polygon","username":"ChunderFPV","description":"Secant ( 1/cos ) waves can polar transform into regular polygons.  Inspired by https://www.shadertoy.com/view/3tXGzS\nMouse X to transform.","likes":14,"published":1,"flags":0,"usePreview":0,"tags":["2d","waves","math","polygon","transform","trigonometry","loopless"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define L(v) smoothstep(2.5*min(fwidth(v), .1), 0., abs(v))\n#define W L(u.y+1./cos(fract(u.x*n/pi2+.5)/n*pi2-pi/n))\nvoid mainImage( out vec4 C, in vec2 U )\n{\n    float n = 5., // number of poly sides\n          pi = 3.1416,\n          pi2 = pi*2.,\n          t = iTime*pi/10.;\n    vec2 R = iResolution.xy,\n         m = iMouse.xy/R,\n         u = (U-vec2(.6, .5)*R)/R.y*5.,\n         p, g;\n    vec3 c = vec3(0);\n    if (m.x < .1) m.x = 0.; // snap\n    if (m.x > .9 || iMouse.z < 1.) m.x = 1.;\n    p = (1.-m.x)*u + m.x*vec2(atan(u.x, -u.y), -length(u)); // polar transform\n    u.x += t; // shift x with time\n    g = max(vec2(0), 1.-abs(u-round(u))/fwidth(u)/1.5); // form grid\n    c += max(g.x, g.y)*.2 + min(g.x, g.y)*.5; // add grid\n    c.g += W; // waves\n    u = p;\n    u.x += t;\n    c += L(u.y+1.)*.5; // unit circle\n    c.g += W; // transformed waves (polygon)\n    c.b += L(fract(u.x*n/pi2)-.5); // spokes\n    //c += max(u.y+1./cos(fract(u.x*n/pi2+.5)/n*pi2-pi/n), 1.-abs(cos(u.x*n/2.)));\n    C = vec4(c, 1);\n}","name":"Image","description":"","type":"image"}]}