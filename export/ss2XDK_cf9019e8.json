{"ver":"0.1","info":{"id":"ss2XDK","date":"1621072834","viewed":87,"name":"GPGPUTesti blobs","username":"akin","description":"toying with gpgpu and trying to learn how to use it","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["life","gpgpu"],"hasliked":0,"parentid":"NdjSDy","parentname":"GPGPUTesting"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// See https://iquilezles.org/articles/palettes for more information\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float intensity = (smoothstep(0.0, 2.0, texture(iChannel0,fragCoord/iResolution.xy).r) - 0.5);\n    \n    \n    vec3 col = pal(intensity, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,0.7,0.4),vec3(0.0,0.15,0.20));\n    \n\tfragColor = vec4(\n        col,\n        1.0\n    );\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 cellIndex = ivec2(fragCoord.xy);\n    int index = getAntIndex(cellIndex, iChannel0);\n    \n    Ant ant = readAnt(index, iFrame - 1, iChannel0);\n    \n    if(getAntUV(index, iFrame, iChannel0) == cellIndex)\n    {\n        // generate ants\n        if(iFrame == 0)\n        {\n            ant = generateAnt(fragCoord, iChannel1);\n        }\n\n        float dist = ANT_DETECTION_DISTANCE;\n        float dirOff = ANT_DETECTION_DIRECTION_OFFSET;\n\n        float a = readPheromone(getPosition(ant.position, ant.direction - dirOff, dist, iChannel1), iChannel1);\n        float b = readPheromone(getPosition(ant.position, ant.direction + dirOff, dist, iChannel1), iChannel1);\n        \n        vec2 leftRight = normalize(vec2(a , b));\n        float dir = atan(leftRight.y / leftRight.x) / OMEGA; \n        \n        //float dir = ((-a + b) + 1.0) / 2.0;\n\n        ant.direction += mix(-dirOff, dirOff, dir);\n        ant.direction = mod(ant.direction + TAU, TAU);\n\n        ant.position = getPosition(ant.position, ant.direction, ANT_SPEED * iTimeDelta, iChannel1);\n    }\n    fragColor = compressAnt(ant);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// Trail buffer used by the ants\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // get the current pixel\n    float current = texelFetch(iChannel0, ivec2(gl_FragCoord.xy), 0).r;\n    current FEROMONE_DECAY * iTimeDelta; // decay\n    \n    current = max(current, 0.0);\n    \n    for(int i=0 ; i < MAX_ANTS ; ++i)\n    {\n        Ant now = readAnt(i, iFrame, iChannel1);\n        Ant prev = readAnt(i, iFrame+1, iChannel1);\n        \n        // This hack, gets rid of \"oh we warped from the other side of the screen previous position\" \"lines.\n        float dist = distanceToLine(fragCoord, now.position, prev.position);\n        if(distance(now.position, prev.position) > 100.0)\n        {\n            dist = distance(fragCoord, now.position);\n        }\n        \n        current += max(((FEROMONE_RADIUS - dist) / FEROMONE_RADIUS) * FEROMONE_POTENCY,  0.0);\n    }\n    \n    fragColor = vec4(current,0.0,0.0,1.0);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"\n#define OMEGA 1.57079632679\n#define PI 3.1415926538\n#define TAU 6.283185307179586\n\n#define MAX_ANTS 1000\n#define ANT_DETECTION_DISTANCE 20.0\n#define ANT_DETECTION_DIRECTION_OFFSET (TAU / 5.0)\n#define ANT_SPEED 160.0\n#define FEROMONE_DECAY -= 5.0\n#define FEROMONE_RADIUS 6.0\n#define FEROMONE_POTENCY 0.1\n#define FRAME_COUNT 2\n\nstruct Ant\n{\n    vec2 position;\n    float direction;\n};\n\n//noise see https://www.shadertoy.com/view/ltB3zD\nfloat random (vec2 st) \n{\n    return fract(sin(dot(st.xy, vec2(12.9898,78.233)))*43758.5453123);\n}\n\nivec2 getAntUV(int index, int frame, sampler2D sampler)\n{\n    frame = (frame + FRAME_COUNT) % FRAME_COUNT;\n    \n    int frameOffset = frame * MAX_ANTS;\n    index += frameOffset;\n    \n    int width = textureSize(sampler, 0).x;\n    return ivec2(index % width, int(index / width));\n}\n\nint getAntIndex(ivec2 position, sampler2D sampler)\n{\n    int width = textureSize(sampler, 0).x;\n    return (position.y * width + position.x) % MAX_ANTS;\n}\n\nAnt readAnt(int index, int frame, in sampler2D sampler)\n{\n    vec4 current = texelFetch(sampler, getAntUV(index, frame, sampler), 0);\n    \n    Ant ant;\n    ant.position.x = current.x;\n    ant.position.y = current.y;\n    ant.direction = current.w;\n    \n    return ant;\n}\n\nAnt generateAnt(in vec2 fragCoord, in sampler2D sampler)\n{\n    vec2 resolution = vec2(textureSize(sampler, 0));\n    \n    Ant ant;\n    ant.position = vec2(random(fragCoord), random(fragCoord + 1.0)) * resolution;\n    ant.direction = random(fragCoord + 2.0) * TAU;\n    return ant;\n}\n\nvec4 compressAnt(in Ant ant)\n{\n    vec4 packed;\n    packed.x = ant.position.x;\n    packed.y = ant.position.y;\n    packed.w = ant.direction;\n    \n    return packed;\n}\n\nvec2 getPosition(vec2 position, float direction, float distance, in sampler2D sampler)\n{\n    vec2 result = position + vec2(\n        cos(direction) * distance, \n        sin(direction) * distance\n    );\n    \n    vec2 resolution = vec2(textureSize(sampler, 0));\n    return mod(result + resolution, resolution);\n}\n\nfloat distanceToLine(vec2 position, vec2 a, vec2 b)\n{\n    // https://iquilezles.org/articles/distfunctions\n    vec2 ap = position - a;\n    vec2 ab = b - a;\n    \n    float clamped_projection = clamp(dot(ap,ab) / dot(ab,ab), 0.0, 1.0);\n    \n    return length(ap - ab * clamped_projection);\n    \n}\n\nfloat readPheromone(vec2 position, in sampler2D sampler)\n{\n    return texelFetch(sampler, ivec2(position.xy), 0).r;\n}","name":"Common","description":"","type":"common"}]}