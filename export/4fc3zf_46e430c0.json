{"ver":"0.1","info":{"id":"4fc3zf","date":"1713519267","viewed":1552,"name":"SpiderWeb","username":"middle","description":"spider","likes":34,"published":1,"flags":32,"usePreview":0,"tags":["physics","spring","spiderweb","simuation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat Line(vec2 a, vec2 b, vec2 U)    // --- Distance to a line segment https://www.shadertoy.com/view/llySRh\n{   \n    U -= a, b -= a;\n\tfloat h = dot( U, b ) / dot(b,b),\n          c = clamp(h, 0., 1.);\n    return h==c ? length( U - b * c ) : 1e5;   // dist to strict segment\n  //return        length( U - b * c );         // dist to segment with round ends\n}\n\nfloat sdEgg( in vec2 p, in float ra, in float rb )\n{\n    const float k = sqrt(3.0);\n    p.x = abs(p.x);\n    float r = ra - rb;\n    return ((p.y<0.0)       ? length(vec2(p.x,  p.y    )) - r :\n            (k*(p.x+r)<p.y) ? length(vec2(p.x,  p.y-k*r)) :\n                              length(vec2(p.x+r,p.y    )) - 2.0*r) - rb;\n}\n\nfloat dot2( in vec2 v ) { return dot(v,v); }\n\n//form https://www.shadertoy.com/view/MlKcDD\nfloat sdBezier( in vec2 pos, in vec2 A, in vec2 B, in vec2 C )\n{    \n    vec2 a = B - A;\n    vec2 b = A - 2.0*B + C;\n    vec2 c = a * 2.0;\n    vec2 d = A - pos;\n    float kk = 1.0/dot(b,b);\n    float kx = kk * dot(a,b);\n    float ky = kk * (2.0*dot(a,a)+dot(d,b)) / 3.0;\n    float kz = kk * dot(d,a);      \n    float res = 0.0;\n    float p = ky - kx*kx;\n    float p3 = p*p*p;\n    float q = kx*(2.0*kx*kx-3.0*ky) + kz;\n    float h = q*q + 4.0*p3;\n    if( h >= 0.0) \n    { \n        h = sqrt(h);\n        vec2 x = (vec2(h,-h)-q)/2.0;\n        vec2 uv = sign(x)*pow(abs(x), vec2(1.0/3.0));\n        float t = clamp( uv.x+uv.y-kx, 0.0, 1.0 );\n        res = dot2(d + (c + b*t)*t);\n    }\n    else\n    {\n        float z = sqrt(-p);\n        float v = acos( q/(p*z*2.0) ) / 3.0;\n        float m = cos(v);\n        float n = sin(v)*1.732050808;\n        vec3  t = clamp(vec3(m+m,-n-m,n-m)*z-kx,0.0,1.0);\n        res = min( dot2(d+(c+b*t.x)*t.x),\n                   dot2(d+(c+b*t.y)*t.y) );\n        // the third root cannot be the closest\n        // res = min(res,dot2(d+(c+b*t.z)*t.z));\n    }\n    return sqrt( res );\n}\nfloat DrawSpider(vec2 uv,ivec2 foot[8] ,float image)\n{\n\n    vec2 s0 = texelFetch(iChannel0,foot[0],0).xy;\n    vec2 s1 = texelFetch(iChannel0,foot[1],0).xy;\n    vec2 s2 = texelFetch(iChannel0,foot[2],0).xy;\n    vec2 s3 = texelFetch(iChannel0,foot[3],0).xy;\n    vec2 s4 = texelFetch(iChannel0,foot[4],0).xy;\n    vec2 s5 = texelFetch(iChannel0,foot[5],0).xy;\n    vec2 s6 = texelFetch(iChannel0,foot[6],0).xy;\n    vec2 s7 = texelFetch(iChannel0,foot[7],0).xy;\n    vec2 s8 = s0+s1+s2+s3+s4+s5+s6+s7;\n    s8 =s8/vec2(8.);\n    if(iMouse.z!=0.){\n    s8 += MouseForce;\n    }\n    \n    float spider = sdBezier(uv,s0,s8+vec2(-0.05,0.0),s8);\n    spider = min(spider,sdBezier(uv,s7,s8+vec2(-0.05,0.0),s8));\n    spider = min(spider,sdBezier(uv,s1,s8+vec2(-0.1,0.0),s8));\n    spider = min(spider,sdBezier(uv,s2,s8+vec2(-0.1,0.0),s8));\n    spider = min(spider,sdBezier(uv,s3,s8+vec2(0.05,0.0),s8));\n    spider = min(spider,sdBezier(uv,s4,s8+vec2(0.05,0.0),s8));\n    spider = min(spider,sdBezier(uv,s5,s8+vec2(0.1,0.0),s8));\n    spider = min(spider,sdBezier(uv,s6,s8+vec2(0.1,0.0),s8));\n    spider = min(spider,length(uv-s8+vec2(0.00,0.02))-0.03);\n    spider = min(spider,sdBezier(uv,s8+vec2(0.005*sin(iTime*10.)*clamp(0.,1.,sin(iTime*2.)-0.7)+0.02,-0.07),s8+vec2(0.03,-0.05),s8+vec2(0.02,0.)));\n    spider = min(spider,sdBezier(uv,s8-vec2(0.005*sin(iTime*10.)*clamp(0.,1.,sin(iTime*2.)-0.7)+0.02,0.07),s8+vec2(-0.03,-0.05),s8+vec2(-0.02,0.)));\n    spider = min(spider,sdEgg(uv-s8+vec2(0.00,-0.05),0.05,0.00));\n    \n    spider = min(spider,image*3.);\n    \n    spider += clamp(1.-length(uv-s8+vec2(0.011,0.038)+vec2(sin(iTime*1.)*0.004,cos(iTime*1.)*0.004))*140.,0.0,1.);\n    \n    spider += clamp(1.-length(uv-s8+vec2(-0.011,0.038)+vec2(sin(iTime*1.)*0.004,cos(iTime*1.)*0.004))*140.,0.0,1.);\n    \n    spider += clamp(1.-length(uv-s8+vec2(-0.021,0.021))*190.,0.0,1.);\n    \n    spider += clamp(1.-length(uv-s8+vec2(0.021,0.021))*190.,0.0,1.);\n    \n    \n    return spider;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    \n    ivec2 iU = ivec2(fragCoord);\n    vec2 uv = fragCoord/iResolution.y;\n    vec4 data = texelFetch(iChannel0,iU,0);\n    ivec2 spiderfoot[8] = spiderf;\n    float d = 200.;\n    float line=1e5;\n    for(int x=0;x < GridSize.x;x++){\n    \tfor(int y=0;y < GridSize.y;y++){\n        /**/\n        if(x > 0){\n            vec2 p = texelFetch(iChannel0,ivec2(x,y),0).xy;\n            vec2 p1 = texelFetch(iChannel0,ivec2(x-1,y),0).xy;\n            line = min(line,Line(p,p1,uv));\n        }\n        if(y > 0){\n            vec2 p = texelFetch(iChannel0,ivec2(x,y),0).xy;\n            vec2 p1 = texelFetch(iChannel0,ivec2(x,y-1),0).xy;\n            line = min(line,Line(p,p1,uv));\n        }\n        \n    \tif(x == 0)\n        {\n            vec2 p = texelFetch(iChannel0,ivec2(x,y),0).xy;\n            vec2 p1 = texelFetch(iChannel0,ivec2(GridSize.x-1,y),0).xy;\n            line = min(line,Line(p,p1,uv));\n        }\n    \t}\n    }\n    vec4 web = vec4(line<0.0015);\n    float Spider = DrawSpider(uv,spiderfoot,line);\n    \n    // Output to screen\n    //fragColor = vec4(d<0.01);\n    //line = Line(vec2(0.1,0.1),vec2(0.9,0.9),fragCoord/R);\n    fragColor = vec4(Spider<0.005);\n    //fragColor = vec4(Spider);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nconst float R1 = 0.02;\n\nvec2 HukeLaw(in vec2 localP,in vec2 otherP,float k,float r){\n\tvec2 AB = otherP - localP;\n\tfloat dis_AB = length(AB);\n    vec2 dir_AB = AB / dis_AB;\n    return (dis_AB - r)*k * dir_AB;\n}\n\nvec4 GetP(in ivec2 iU){\n\treturn texelFetch(iChannel0,iU,0);\n}\nvec2 GetOtherP(in ivec2 iU,in ivec2 offset){\n\treturn texelFetch(iChannel0,iU+offset,0).xy;\n}\n\nvec2 Simulation(vec2 localP,ivec2 iU,ivec2 offset,float k,float r){\n\tvec2 otherP = GetOtherP(iU,offset);\t    \t\n\treturn HukeLaw(localP,otherP,K,r);\n}\nvec2 Simulation1(vec2 localP,ivec2 iU0,ivec2 iU1,float k,float r){\n\tvec4 otherP = GetP(iU1);\t    \t\n\treturn HukeLaw(localP,otherP.xy,K,r);\n}\n\nvec2 Constraint(in ivec2 iU,in vec2 localP){\n    \n    float r1 = R1*(float(iU.y)*0.8+1.);\n    float r2 = R1*(float(iU.y)*0.1+1.);\n    //spider node force  蛛网上下左右\n    //径向拉力\n    if(iU.x >0)\n    {\n        localP += Simulation(localP,iU,ivec2(-1, 0),K,r1);\n    }\n    if(iU.x < GridSize.x -1)\n    {\n    \tlocalP += Simulation(localP,iU,ivec2( 1, 0),K,r1);\n    }\n    //横向拉力\n    if(iU.y > 0)\n    {\n        localP += Simulation(localP,iU,ivec2( 0,-1),K,r1);\n    }\n    \n    if(iU.y < GridSize.y - 1)\n    {\n    \tlocalP += Simulation(localP,iU,ivec2( 0, 1),K,r2);\n    }\n    //Suture 缝合\n    if(iU.x == 0)\n    {\n        localP += Simulation(localP,iU,ivec2( GridSize.x - 1, 0),K,r1);\n    }\n    if(iU.x == GridSize.x-1)\n    {\n        localP += Simulation(localP,iU,ivec2( 1-GridSize.x, 0),K,r1);\n    }\n    //center force 中心拉力\n\tif(iU.y == 0)\n    {\n        int halfroot = (GridSize.x)/2;\n        int offset = 1;\n        offset = iU.x>=halfroot?-halfroot:halfroot;\n        localP += Simulation(localP,iU,ivec2(offset,0),K,r1);\n    }\n    \n    return localP;\n}\n\nvec2 Spider(in ivec2 iU,in vec2 localP, ivec2 foot[8])\n{\n    vec2 spiderP = vec2(0.,0.);\n    float r = 0.15+sin(iTime*0.5)/60.;\n    for(int i =0;i<8;i++)\n    {\n     spiderP +=GetP(foot[i]).xy;\n    }\n    spiderP/=8.;\n    if(iMouse.z!=0.){\n    spiderP+=MouseForce;\n    }\n    if(iU ==foot[0])\n    {\n        \n        localP += HukeLaw(localP,spiderP,K,r);\n    }\n    \n    if(iU ==foot[1])\n    {\n        \n        localP += HukeLaw(localP,spiderP,K,r);\n    }\n    if(iU ==foot[2])\n    {\n        \n        localP += HukeLaw(localP,spiderP,K,r);\n        \n    }\n    if(iU ==foot[3])\n    {\n       \n        localP += HukeLaw(localP,spiderP,K,r);\n        \n    }\n    if(iU ==foot[7])\n    {\n       \n        localP += HukeLaw(localP,spiderP,K,r);\n        \n    }\n    if(iU ==foot[6])\n    {\n        \n        localP += HukeLaw(localP,spiderP,K,r);\n        \n    }\n    if(iU ==foot[5])\n    {\n       \n        localP += HukeLaw(localP,spiderP,K,r);\n        \n    }\n    if(iU ==foot[4])\n    {\n       \n        localP += HukeLaw(localP,spiderP,K,r);\n        \n    }\n    \n     return localP;\n}\n\n//Verlet Intergral\n\nvec4 VerletIntegral(in ivec2 iU){\n\tvec4 P = GetP(iU);\n    ivec2 spiderfoot[8] = spiderf ;\n    if(iU.y == GridSize.y-1 ){\n   \n        float j = float(iU.x)/float(GridSize.x+1)*PI*2.;\n        vec2 sphere = vec2(sin(j)/.9+1.1,cos(j)/.9+0.5);\n        sphere = clamp(sphere,vec2(0.5,-0.15),vec2(1.75,0.95));\n    \tP.xy = vec2(iU.x,iU.y)*R1+sphere;\n    }\n    \n    vec2 PreviousP = P.zw;\n    vec2 CurrentP = Constraint(iU,P.xy);\n    CurrentP = Spider(iU,CurrentP.xy,spiderfoot);\n    vec2 NextP = CurrentP + (CurrentP - PreviousP)*(1.-Friction) + Gravity*iTimeDelta*iTimeDelta/2.;\n    \n    PreviousP = CurrentP;\n    \n    return vec4(NextP,PreviousP);\n}\n\nvoid mainImage( out vec4 C, in vec2 U )\n{\n    ivec2 iU = ivec2(U);\n    if(any(greaterThanEqual(iU,GridSize)))\n        return ;\n    \n    if(iFrame == 0)\n    {\n        float j = float(iU.x)/float(GridSize.x+1)*PI*2.;\n        vec2 sphere = vec2(sin(j)/.8+0.8,cos(j)/.8+0.9);\n        sphere = clamp(sphere,vec2(0.5,-0.13),vec2(1.75,0.9));\n        C = vec4((vec2(iU.x,iU.y)*R1+sphere).xyxy);\n        //C= vec4(0.5);\n        }\n    else\n    \tC = VerletIntegral(iU);\n    \n\t//C.r = 1.;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define GridSize ivec2(10,7)\n#define Sqrt2 1.41421\n#define F00 ivec2(0,0)\n#define F01 ivec2(0,1)\n#define R iResolution.xy\n#define PI 3.141592654\n#define K 0.05\n#define Friction 0.03\n#define Gravity vec2(0.,-3.)\n#define spiderf ivec2[] (ivec2(0,2),ivec2(9,1),ivec2(7,1),ivec2(1,2),ivec2(5,2),ivec2(4,1),ivec2(2,1),ivec2(6,2));\n#define spidert ivec2[] (ivec2(0,1),ivec2(8,1),ivec2(6,2),ivec2(1,1),ivec2(5,3),ivec2(5,2),ivec2(2,0),ivec2(6,3));\n#define MouseForce (iMouse.xy/R-vec2(0.7,0.5))*0.4","name":"Common","description":"","type":"common"}]}