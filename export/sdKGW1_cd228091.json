{"ver":"0.1","info":{"id":"sdKGW1","date":"1632110051","viewed":63,"name":"Basic Game of Life","username":"aperturecombine","description":"Basic and very unoptimized Game of Life. Trying to understand how buffers work.","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["life"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SCALE 80.\n#define GRIDWIDTH 0.98\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 col = texture(iChannel0, uv);\n    fragColor = vec4(col.rgb, 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define TILESIZE 20.\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord/iResolution.xy;\n    float aspect = iResolution.x / iResolution.y;\n    \n    vec2 adjUV = vec2(uv.x, uv.y / aspect);\n    \n    vec2 tileScale = iResolution.xy / TILESIZE;\n    \n    adjUV *= tileScale.x;\n    \n    vec2 grid = fract(adjUV);\n    vec2 gridID = floor(adjUV);\n    \n    \n    vec2 tilePercent = TILESIZE/iResolution.xy;\n    \n    vec3 col = texture(iChannel0, uv).xyz;\n    if(iFrame == 0) {\n        float thresh = 0.35;\n        \n        /*if(gridID == vec2(10, 10) || gridID == vec2(11, 10) ||\n            gridID == vec2(12, 10) || gridID == vec2(12, 11) || gridID == vec2(11, 12))\n            col = vec3(1);\n        else\n            col = vec3(0);*/\n            \n        /*if(texture(iChannel1, gridID/tileScale).x < thresh) {\n            col = vec3(1);\n        }*/\n        if(rand(gridID/tileScale) < thresh) {\n            col = vec3(1);\n        }\n    }\n    else if(mod(float(iFrame), 5.) == 0.) {\n        int neighbors = 0;\n        \n        for(int x=-1; x<=1; x++) {\n            for(int y=-1; y<=1; y++) {\n                if (x==0 && y==0) continue;\n                \n                vec2 newOffset = vec2(x, y);\n                \n                vec2 newID = gridID + newOffset;\n                \n                if (newID.x < 0. || newID.x > tileScale.x)\n                    continue;\n                if (newID.y < 0. || newID.y > tileScale.y)\n                    continue;\n                    \n                if(texture(iChannel0, uv + newOffset * tilePercent).x > 0.)\n                    neighbors += 1;\n            }\n        }\n        \n        bool living = texture(iChannel0, uv).x > 0.;\n        if(living && (neighbors == 2 || neighbors == 3))\n            col = vec3(1);\n        else if(!living && neighbors == 3)\n            col = vec3(1);\n        else\n            col = vec3(0);\n            \n    }\n    fragColor = vec4(col,1.0);\n}\n","name":"Buffer A","description":"","type":"buffer"}]}