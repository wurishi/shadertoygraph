{"ver":"0.1","info":{"id":"WdVfDt","date":"1608243051","viewed":45,"name":"blindly messing with a raymarch","username":"chairdev","description":"Having some fun and learning with a ray marching scene I made with help from the tutorial by The Art of Code on youtube:\nhttps://www.youtube.com/watch?v=PGtv-dBi2wE","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","ray","sphere","marching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.0\n#define SURFACE_DIST 0.001\n\nfloat GetDist(vec3 p){\n    vec4 sphere = vec4(0, 5.5, 6, 2.0);\n    p.y = p.y+5.0;\n    float sd = length(p-sphere.xyz)-sphere.w; // sphere distance\n    \n    float pd = p.y; //plane distance\n    \n    float d = min(sd, pd);\n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n    float doo = 0.0;\n    for(int i=0; i<MAX_STEPS; i++){\n        vec3 p = ro + rd*doo;\n        float ds = GetDist(p);\n        doo += ds;\n        if(ds<(SURFACE_DIST) || doo>MAX_DIST) break;\n    }\n    \n    return doo;\n}\n\nvec3 GetNormal(vec3 p){\n    float d = GetDist(p);\n    vec2 e = vec2(0.01, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx)\n        );\n        \n    return normalize(n);\n}\n\nfloat GetLight(vec3 p){\n    vec3 lightPos = vec3(0, 2, 6);\n    lightPos.xz += vec2(sin(iTime*1.0), cos(iTime*1.0))*2.0;\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = dot(tan(n+(iTime/20.0))-10.0, tan(l+(iTime/20.0))-10.0);\n    \n    float d = RayMarch(p+n*SURFACE_DIST*10.0, l);\n    if( d < length(lightPos-p)) dif *= .1;\n    dif /= 128.0;\n    return dif;\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    \n    vec3 col = vec3(0);\n    \n    vec4 tex = texture(iChannel0, uv);\n    \n    vec3 ro = vec3(0.0, 1.0, -10.0);\n    \n    //vec3 rd = normalize(vec3(uv.x, uv.y, 2.0+(sin(iTime/1.0)+1.0)*1.0)+0.0 );\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1.0 ));\n    \n    float d = RayMarch(ro,rd);\n    \n    vec3 p = ro + rd * d;\n    \n    float dif = GetLight(p);\n    \n    col = vec3(dif);\n    \n    fragColor = vec4(col,2.0);\n}","name":"Image","description":"","type":"image"}]}