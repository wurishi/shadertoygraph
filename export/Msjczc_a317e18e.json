{"ver":"0.1","info":{"id":"Msjczc","date":"1493309814","viewed":550,"name":"Boxy Infinite Ladder","username":"space928","description":"Box\nThis just another experiment, just learning, tell me what you think.\n\nNote: a lot of code is taken from other shaders and sources (HSV2RGB, raymarch tracing, box map) but I did a lot of my own work","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["3d","raymarch","ladder"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"int MARCHSTEPS =  128;\nfloat MAX_DIST = 16.0;\nvec3 pos = vec3(0.0, 0.0, -2.8);\nvec3 posTime = vec3(0.0, 2.0, 0.0);\n\nfloat udRoundBox( vec3 p, vec3 b, float r )\n{   \n  vec3 q = vec3(p.x, fract(p.y) * 2.0 - 1.0, p.z);\n  //q = twist(q, 1.0, 0.0);\n    float c = cos(1.0*q.y);\n    float s = sin(1.0*q.y);\n    mat2  m = mat2(c,-s,s,c);\n    q = mix(vec3(m*q.xz,q.y), q, clamp(sin(iTime)+1.0, 0.0, 1.0));\n    \n  return length(max(abs(q)-b,0.0))-r;\n}\n\nfloat sphere(vec3 p)\n{\n    vec3 q = fract(p/2.) * 2.0 - 1.0;\n    \n    return length(q) - 0.3;\n}\n\n// Return 2x2 rotation matrix\n// With vector swizzle/mask can use as a 3x3 xform\n// For y, you need to invert \n// angle in radians\n// ========================================\nmat2 Rot2(float a ) {\n    float c = cos( a );\n    float s = sin( a );\n    return mat2( c, -s, s, c );\n}\n\nvec3 twist(vec3 p, float sc, float a) {\n    float c = cos(sc*p.y);\n    float s = sin(sc*p.y);\n    mat2  m = mat2(c,-s,s,c);\n    return mix(vec3(m*p.xz,p.y), p, a);\n}\n\nfloat trace(vec3 o, vec3 r) {\n    float t = 0.0;\n    \n    for( int i=0;i<MARCHSTEPS;i++ ) {\n        vec3 p = o + r * t;\n        \n        p *= mat3(cos(iTime), 0., sin(iTime),\n                  0., 1., 0.,\n                  -sin(iTime), 0., cos(iTime));\n        \n        //p = twist(p, 1.0, 0.0);\n        \n        float d =  udRoundBox(p + vec3(-1., .0, 1.), vec3(.2, 1., .2), 0.05);\n        d = min(d, udRoundBox(p + vec3(-1., .0, -1.), vec3(.2, 1., .2), 0.05));\n        d = min(d, udRoundBox(p + vec3(1., .0, -1.), vec3(.2, 1., .2), 0.05));\n        d = min(d, udRoundBox(p + vec3(1., .0, 1.), vec3(.2, 1., .2), 0.05));\n        \n        d = min(d, udRoundBox(p + vec3(-1., .0, .0), vec3(.2, .2, 1.), 0.05));\n        d = min(d, udRoundBox(p + vec3(1., 0., .0), vec3(.2, .2, 1.), 0.05));\n        d = min(d, udRoundBox(p + vec3(0., 0., -1.), vec3(1., .2, 0.2), 0.05));\n        d = min(d, udRoundBox(p + vec3(0., 0., 1.), vec3(1., .2, 0.2), 0.05));\n        \n        d = min(d, sphere(p));\n        \n        \n        \n        t += d * 0.5;\n        /*if((abs(r.x) <= 0.01) || (res.hd >= ray.rl) || (i > maxIter))\n            break;\n        res.hd = res.hd + r.x;*/\n    }\n    return t;\n}\n\nconst float blurSize = 1.0/512.0;\nconst float intensity = 0.35;\n\nvec3 hsv2rgb( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n    return c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 r = normalize(vec3(uv, 1.0));\n    vec3 o = pos + (iTime*posTime);\n    /*o *= mat3(cos(iTime*0.1), 1.0, -sin(iTime*0.1),\n             1.0, 0.0, 1.0,\n             sin(iTime*0.1), 1.0, cos(iTime*0.1));*/\n    vec3 t = vec3(trace(o, r));\n    //t *= vec3(1.0, 0.6, 0.4);\n    t *= hsv2rgb(vec3(sin(iTime/4.0), 1.0, 1.0));\n                  \n    vec3 fog = 1.0 / (1.0 + t * t * 0.1);\n    fragColor = vec4(fog,1.0);\n}","name":"Image","description":"","type":"image"}]}