{"ver":"0.1","info":{"id":"tssfWj","date":"1589192075","viewed":152,"name":"Maencals Project","username":"mikelsv","description":"Electronic communication research.\nOrange - battery. Yellow to white - led. Purple - Transistor.\nBlue - In, Red - Out, Green - control.\nRose - point, for connect.\n\nTransistor: if(CON == 1.) IN = 0.;\n\nUse mouse to close energy.","likes":7,"published":1,"flags":32,"usePreview":0,"tags":["electronic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Maencals - Maticals electronic energy.\n// Electronic communication research.\n\n// Configure on Common page\n// Elements: Element elements[] = ...\n\n// Created: 2020-05-10\n//\n// Update: 2020-05-10.\n// [+] Add battery & led.\n//\n// Update: 2020-05-11.\n// [!] Fix bugs, bugs, bugs, bugs...\n// [+] Add transistor.\n// [+] Element descriptions.\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord){\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4)) * 21.;\n\n    LOAD_STATE;\n    \n    // Scale\n    uv /= state.scale;\n    \n    // Get Element for this point    \n    vec4 pix = texture(iChannel0, uv);\n    \n    // Pulse: disable\n    float pon = 1.;//mod(iTime, 1.) < .5 ? 1. : 0.;\n    \n    // Element\n    Element element;\n    element.type = pix.x;\n    element.id = pix.y;\n    float pval = pix.z, mval = pix.w;\n    float val = pval; //min(pval, mval);\n    \n    element = EMS_ELEMENT(element.id);\n    //pon = 1. - length(uv * iResolution.xy - vec2(element.x, element.y)) * val / 5.;\n    \n    \n    // Text\n    // Js: 'Humans'.split('').map(x=>x.charCodeAt(0)).reduce((a,b)=>a + ', ' + b);\n    vec4 rect, res;\n    int batMsg[] = int[](66, 97, 116);\n    int ledMsg[] = int[](108, 101, 100);\n    int tranMsg[] = int[](84, 114, 97, 110);\n    \n    for(int i = 0; i < elements.length(); i ++){\n        Element element = elements[i];\n        \n        rect = vec4((element.x - state.scale) / iResolution.x, (element.y - state.scale * .5) / iResolution.y, .005, .01);\n    \t\n        if(element.type == EMT_BAT)\n        \tML_DRAW_MESSAGE(uv, rect, batMsg, res);\n         if(element.type == EMT_LED)\n        \tML_DRAW_MESSAGE(uv, rect, ledMsg, res);       \n         if(element.type == EMT_TRANS)\n        \tML_DRAW_MESSAGE(uv, rect, tranMsg, res); \n        \n        rect = vec4((element.x - state.scale * .25) / iResolution.x, (element.y - state.scale * .5) / iResolution.y, .005, .01);\n        \n         if(element.type == EMT_IN)\n        \tML_DRAW_MESSAGE(uv, rect, int[](105), res);        \n        if(element.type == EMT_OUT)\n        \tML_DRAW_MESSAGE(uv, rect, int[](111), res);        \n        if(element.type == EMT_CON)\n        \tML_DRAW_MESSAGE(uv, rect, int[](99), res);        \n        if(element.type == EMT_POI)\n        \tML_DRAW_MESSAGE(uv, rect, int[](112), res);\n        \n        if(res.x > 0.){\n          fragColor = vec4(0.5, 1., 1., 1.);\n          return ;\n        }\n    }\n    \n    \n    // Elements\n    \n    if(element.type == EMT_BAT){\n\t\tfragColor = vec4(1., .5, 0., 1.);\n    }\n    else if(element.type == EMT_LED){\n\t\tfragColor = vec4((.4 + val * .6) * pon , (.4 + val * .6) * pon, val * pon, 1.);\n    }\n    else if(element.type == EMT_TRANS){\n\t\tfragColor = vec4(1., .5 * val, 1., 1.);\n    }       \n    else if(element.type == EMT_IN){\n\t\tfragColor = vec4(val * .3, val * .3, 1., 1.);\n    }  \n    else if(element.type == EMT_OUT){\n\t\tfragColor = vec4(1., val * .3, val * .3, 1.);\n    }\n    else if(element.type == EMT_CON){\n\t\tfragColor = vec4(val * .4, .8 + val *.2, val * .4, 1.);\n    }    \n    else if(element.type == EMT_PATH){\n\t\tfragColor = vec4(val, 0.2 + val * .01, 0.2 + val * .01, 1.);\n    }\n    else if(element.type == EMT_POI){\n        float c = .2 + val * .5;\n\t\tfragColor = vec4(c + .2, c, c, 1.);\n    }\n    \n    else\n    \tfragColor = vec4(0., 0., 0., 1.);\n\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Electronic board\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord){\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // State\n\tLOAD_STATE;\n    \n    if(IS_STATE){\n        \n        // Init\n        if(state.init == 0.){\n            state.init = 1.;\n            state.scale = 5.;\n        }\n        \n        // Mouse\n        if(iMouse.z > 0.){\n        \tstate.mouse_x = iMouse.x / state.scale;\n            state.mouse_y = iMouse.y / state.scale;\n        }\n    }\n    \n    SAVE_STATE;\n    \n    // Init board\n    if(state.init == 0.){\n        \n       \t// Elements\n        for(int i = 0; i < elements.length(); i ++){\n            Element element = elements[i];\n            \n            if(element.type == EMT_EMPTY){}\n            else if(element.type == EMT_BAT || element.type == EMT_LED || element.type == EMT_TRANS){\n                if(abs(length(fragCoord - vec2(element.x, element.y))) < 4.){\n                    SAVE_ELEMENT;\n                    //fragColor = vec4(element.type, element.id, 1., 0.);\n                    return ;\n                }\n            }\n            else if(element.type == EMT_IN || element.type == EMT_OUT || element.type == EMT_POI || element.type == EMT_CON){\n                if(abs(length(fragCoord - vec2(element.x, element.y))) < 3.){\n                    SAVE_ELEMENT;\n                    //fragColor = vec4(element.type, element.id, 1., 0.);\n                    return ;\n                }\n            }\n\t\t}\n        \n        // Path\n        for(int i = 0; i < elements.length(); i ++){\n            Element element = elements[i];\n            \n            if(element.type == EMT_PATH){\n                vec2 a = vec2(elements[int(element.x)].x, elements[int(element.x)].y);\n                vec2 b = vec2(elements[int(element.y)].x, elements[int(element.y)].y);\n                vec2 c = fragCoord.xy - .5;\n\n                vec3 tr = vec3(length(a - c), length(b - c), length(a - b));\n                float bs = sqrt(tr.x * tr.y * (tr.x + tr.y + tr.z) * (tr.x + tr.y - tr.z)) / (tr.x + tr.y);\n\n                if(bs < 1.2){\n                    fragColor = vec4(element.type, element.id, 0., 0.);    \n                    return ;\n                }  \n            }\n\t\t}\n    }\n    \n    \n    // Process\n    Element element;\n    \n    vec4 pix = texture(iChannel0, uv);\n    vec4 pin, pout;\n    \n    element.type = pix.x;\n    element.id = pix.y;\n    float eval = pix.z;\n    \n    if(element.type > 0.){\n        // Path\n        if(element.type == EMT_PATH || element.type == EMT_IN || element.type == EMT_OUT || element.type == EMT_LED\n          || element.type == EMT_POI || element.type == EMT_TRANS || element.type == EMT_CON){\n            float val = 0.;\n            float count = 0.;\n            float maxx = 0.;\n            \n            // Minus val\n            float mval = 0.;\n            \n      \t\tfor(float x = 0.; x < 3.; x ++)\n                for(float y = 0.; y < 3.; y ++){\n                    //if(x == 1. && y == 1.)\n                    //    continue;\n                    \n                \tvec4 pix = texture(iChannel0, vec2(x + fragCoord.x - 1., y + fragCoord.y - 1.) / iResolution.xy);         \n                    \n                    if(pix.x == EMT_OUT || pix.x == EMT_PATH || pix.x == EMT_IN || pix.x == EMT_LED\n                       || pix.x == EMT_POI || pix.x == EMT_TRANS || pix.x == EMT_CON){\n                        val += pix.z;\n                    \tcount ++;\n                        //val += 1.;\n                        //val = 1.;\n                        if(maxx < pix.z)\n                            maxx = pix.z;\n                        \n                        if(pix.w > 0. && mval < pix.w)\n                            //if(pix.x != EMT_IN || element.type == EMT_IN)\n                            if((element.type != EMT_LED && element.type != EMT_TRANS ) || pix.x != EMT_IN)\n                            \tmval = pix.w;// * 1.* .99;\n                        \n                    }\n\t\t\t}\n            \n            //val += maxx * 1.;\n            //count += 1.;\n            \n            //if(val > 0. && val < .5){\n               // val += maxx * 2.;\n               // count += 2.;\n            //}\n            \n            //val /= count;// (eval * .9);\n            //if(eval + .5 >= maxx)\n            //    val = maxx * .990;\n            //else\n            //    val = eval + .5;\n            //val = max(maxx - eval );\n            \n            // Plus val\n            val = pix.z * .7 + maxx * .3;\n            \n            if(val > 0. && maxx <= pix.z)\n                val = 0.;\n            \n            // Minus val\n            mval = pix.w * .7 + mval * .3;\n            \n            if(mval > 0. && mval <= pix.w)\n                mval = 0.;            \n            \n            \n            if(element.type == EMT_IN){\n\t\t\t\tElement pel = GetParent(element.id);\n                \n                if(pel.type == EMT_BAT){\n                    mval = 1.;\n                    if(mval <= pix.w)\n                   \t\tmval = pix.w + .000001;\n                    \n                    if(mval > 1.05)\n                        mval = 0.;\n\t\t\t\t}\n                \n                if(pel.type == EMT_LED || pel.type == EMT_TRANS){\n                    EMS_PARENT_OUT(pel.id, pix);\n                    mval = pix.w;\n                }\n                \n                if(pel.type == EMT_TRANS){\n                    EMS_PARENT_CHILD(pel.id, pix, EMT_CON);\n                    if(pix.z >= .90 || pix.z - 20. > val)\n                    \tval = -20.;\n                }\n            }\n            \n            if(element.type == EMT_OUT){\n                Element el = EMS_ELEMENT(element.id);\n\t\t\t\tElement pel = GetParent(element.id);\n                vec4 pval;\n                \n                if(pel.type == EMT_BAT){\n                    EMS_PARENT_IN(pel.id, pval);\n                    val = 1.; min(max(.3, pval.z + .5), 1.);\n                    //if(val == 1.){// && vec2(el.x, el.y) == (fragCoord - .5)){\n                 \tif(val <= pix.z)\n                    \tval = pix.z + .000001;\n                        \n                    if(val > 1.05)\n                        val = 0.;\n                }\n                \n                if(pel.type == EMT_LED || pel.type == EMT_TRANS){\n                    //EMS_ELEMENT_VAL(pel.id, pix);\n                    EMS_PARENT_IN(pel.id, pin);\n                    \n                    if(pix.w == 0.)\n                        val = 0.;\n                    else\n                    \tval = pin.z + .000001;\n                }\n            }\n            \n            // Led\n            if(element.type == EMT_LED || element.type == EMT_TRANS){\n           \t\tEMS_PARENT_IN(element.id, pin);\n                EMS_PARENT_OUT(element.id, pout);\n                \n                val = min(1., pin.z * pout.w);\n            }\n          \n            // Close energy\n            if(iMouse.z > 0. && length(vec2(state.mouse_x, state.mouse_y) - fragCoord) < 5.){\n                val = 0.;\n                mval = 0.;\n            }\n            \n            fragColor = vec4(element.type, element.id, val, mval);\n            return ;\n        }\n    }   \n    \n    // No action\n    fragColor = texture(iChannel0, uv);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define PI 3.141592653589793\n\nstruct State{\n    float init;\n    float mouse_click;\n    float mouse_x, mouse_y;\n    \n    float scale;\n    \n    // Temp\n    float zzzZZZ;\n};\n    \nState state;\nconst float state_len = 2.;\n\n#define LOAD_STATE \\\n\tfor(float i = 0.5; i < state_len; i ++) \\\n        stateLoad(i, texture(iChannel0, vec2(i, iResolution.y - .5) / iResolution.xy));\n\n#define IS_STATE \\\n\t(fragCoord.x <= state_len && fragCoord.y == iResolution.y - .5)\n\n#define SAVE_STATE \\\n\tif(fragCoord.x <= state_len && fragCoord.y == iResolution.y - .5){ fragColor = stateSave(fragCoord.x); return ;}\n\nvoid stateLoad(float pos, vec4 v){\n    if(pos == 0.5){\n\t\tstate.init = v.x;    \t\n        state.mouse_click = v.y;\n    \tstate.mouse_x = v.z; \n        state.mouse_y = v.w;\n    }\n    if(pos == 1.5){\n\t\tstate.scale = v.x;    \t\n        //state.mouse_click = v.y;\n    \t//state.mouse_x = v.z; \n        //state.mouse_y = v.w;\n    }    \n    \n}\n    \nvec4 stateSave(float pos){\n    if(pos == 0.5)\n        return vec4(state.init, state.mouse_click, state.mouse_x, state.mouse_y);\n    if(pos == 1.5)\n        return vec4(state.scale, state.zzzZZZ, state.zzzZZZ, state.zzzZZZ);\n}\n\n#define EMT_EMPTY\t0.\n#define EMT_BAT\t\t1.\n#define EMT_LED\t\t2.\n#define EMT_TRANS\t3.\n\n\n#define EMT_IN\t\t10.\n#define EMT_OUT\t\t11.\n#define EMT_CON\t\t12.\n\n#define EMT_PATH\t20.\n#define EMT_POI\t\t21.\n\nstruct Element{\n    float x, y;\n    float type;\n\tfloat id, pid;\n};\n    \n// Battery & led = element + in + out\n// Paths = from id, to id\n    \nElement elements[] = Element[](\n    Element(0., 0., EMT_EMPTY, 0., 0.),    \n    \n    // Battery (x, y, type, this id, parent id\n    Element(10., 10., EMT_BAT, 1., 0.),\n    Element(10., 15., EMT_IN, 2., 1.),\n    Element(10., 5., EMT_OUT, 3., 1.),\n    \n    // Led\n    Element(30., 10., EMT_LED, 4., 0.),\n    Element(30., 15., EMT_OUT, 5., 4.),\n    Element(30., 5., EMT_IN, 6., 4.),\n    \n    // Paths\n    Element(2., 5., EMT_PATH, 7., 0.),\n    Element(3., 6., EMT_PATH, 8., 0.),\n    \n    // + Led 2\n    Element(150., 11., EMT_LED, 9., 0.),\n    Element(150., 15., EMT_OUT, 10., 9.),\n    Element(150., 5., EMT_IN, 11., 9.),\n    \n    // Paths 2\n    Element(6., 11., EMT_PATH, 12., 0.),\n    Element(6., 11., EMT_PATH, 13., 0.),\n    \n    // POI\n    Element(100., 10., EMT_POI, 14., 0.),\n    \n     // + Led 3\n    Element(100., 20., EMT_LED, 15., 0.),\n    Element(100., 15., EMT_OUT, 16., 14.),\n    Element(100., 25., EMT_IN, 17., 14.),\n        \n    Element(5., 17., EMT_PATH, 18., 0.),\n    \n    // + Led 5\n    Element(80., 15., EMT_LED, 19., 0.),\n    Element(80., 20., EMT_OUT, 20., 19.),\n    Element(80., 9., EMT_IN, 21., 19.),\n    \n    // Trans\n    Element(10., 80., EMT_TRANS, 22., 0.),\n    Element(10., 75., EMT_OUT, 23., 22.),\n    Element(15., 85., EMT_IN, 24., 22.),\n    Element(10., 45., EMT_CON, 25., 22.),\n    \n    Element(3., 23., EMT_PATH, 26., 0.),\n    Element(17., 24., EMT_PATH, 27., 0.),\n    \n     // + Led 6\n    Element(10., 60., EMT_LED, 28., 0.),\n    Element(10., 55., EMT_OUT, 29., 28.),\n    Element(10., 65., EMT_IN, 30., 28.),  \n    \n    // + Led 7\n    Element(10., 30., EMT_LED, 31., 0.),\n    Element(10., 25., EMT_OUT, 32., 31.),\n    Element(10., 35., EMT_IN, 33., 31.), \n    \n    // Empty ','\n    Element(0., 0., EMT_EMPTY, 0., 0.)    \n);\n\n#define EMS_ELEMENT(id) elements[int(id)];\n#define EMS_PARENT(id) elements[int(elements[int(id)].pid)];\n\n#define EMS_PARENT_IN(id, to) \t\t\t\t\t\t\t\t\t\\\n for(int i = 0; i < elements.length(); i ++)\t\t\t\t\t\\\n     if(elements[i].pid == id && elements[i].type == EMT_IN)\t\\\n         to = texture(iChannel0, vec2(elements[i].x + .5, elements[i].y +.5) / iResolution.xy);\n\n#define EMS_PARENT_OUT(id, to) \t\t\t\t\t\t\t\t\t\\\n for(int i = 0; i < elements.length(); i ++)\t\t\t\t\t\\\n     if(elements[i].pid == id && elements[i].type == EMT_OUT)\t\\\n         to = texture(iChannel0, vec2(elements[i].x + .5, elements[i].y +.5) / iResolution.xy);\n     \n#define EMS_PARENT_CHILD(id, to, ctype) \t\t\t\t\t\t\t\t\t\\\n for(int i = 0; i < elements.length(); i ++)\t\t\t\t\t\\\n     if(elements[i].pid == id && elements[i].type == ctype)\t\\\n         to = texture(iChannel0, vec2(elements[i].x + .5, elements[i].y +.5) / iResolution.xy);\n     \n#define EMS_ELEMENT_VAL(eid, to) \t\t\t\t\t\t\t\t\t\\\n for(int i = 0; i < elements.length(); i ++)\t\t\t\t\t\t\\\n     if(elements[i].id == eid)\t\t\t\t\t\t\t\t\t\t\\\n         to = texture(iChannel0, vec2(elements[i].x + .5, elements[i].y +.5) / iResolution.xy);\n     \n     \nElement GetParent(float id){\n\treturn elements[int(elements[int(id)].pid)];\n}\n    \n\n#define SAVE_ELEMENT fragColor = vec4(element.type, element.id, 0., 0.);\n\n\n// Rectangle //\nbool ML_InRect(vec2 coord, vec4 rect, float len){\n    return rect.x <= coord.x && rect.y <= coord.y \n        && rect.x + rect.z * len > coord.x && rect.y + rect.w > coord.y;\n}\n\nbool ML_InRect(vec2 coord, vec4 rect){\n    return rect.x <= coord.x && rect.y <= coord.y \n        && rect.x + rect.z > coord.x && rect.y + rect.w > coord.y;\n}\n\nvec2 ML_GetRect(vec2 coord, vec4 rect){\n    return vec2((coord.x - rect.x) / rect.z, (coord.y - rect.y) / rect.w);\n}\n\nvec2 ML_GetRect4(vec4 coord, vec4 rect){\n    return vec2((coord.x - rect.x) / (rect.z / coord.z), (coord.y - rect.y) / (rect.w / coord.w));\n}\n\nbool ML_OnRect(vec2 coord, vec4 rect, out vec2 ret){\n    if(ML_InRect(coord, rect, 1.)){\n        ret = ML_GetRect(coord, rect);\n        return 1 == 1;\n    }\n    return 0 != 0;\n}\n\nbool ML_OnRect4(vec4 coord, vec4 rect, out vec2 ret){\n    if(ML_InRect(coord.xy, rect, 1.)){\n        ret = ML_GetRect4(coord, rect);\n        return 1 == 1;\n    }\n    return 0 != 0;\n}\n\n// Js: 'Humans'.split('').map(x=>x.charCodeAt(0)).reduce((a,b)=>a + ', ' + b);\n#define ML_DRAW_MESSAGE(uv, rect, msg, to) \\\n    if(ML_InRect(uv, rect, float(msg.length()))){\t\\\n        vec2 rc = ML_GetRect(uv, rect);\t\t\\\n        int c = msg[int(rc.x)];\t\t\t\t\\\n        rc.x -= floor(rc.x);\t\t\t\t\\\n        rc.x = .2 + rc.x * .8;\t\t\t\t\\\n        vec4 pix = textureGrad(iChannel3, rc/16. + fract( vec2(c, 15-c/16) / 16.), dFdx(rc/16.),dFdy(rc/16.) );\t\\\n\t\t\t\t\t\t\t\t\t\t\t\\\n        to = vec4(pix.xyz, 1.);\\\n    }","name":"Common","description":"","type":"common"}]}