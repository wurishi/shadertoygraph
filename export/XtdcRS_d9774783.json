{"ver":"0.1","info":{"id":"XtdcRS","date":"1533083568","viewed":102,"name":"patterns-002","username":"zwwgggbest","description":"patterns-002","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["polka"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.141592653\n\nvec3 circle(vec2 _uv, float _r, float _smoothEdge)\n{\n\t_uv *= 10.;\n    if(sin(iTime * 3.) > 0.)\n    {\n    \t_uv.x += step(1., mod(_uv.y, 2.)) * cos(iTime * 3.);\n    \t_uv.x -= step(mod(_uv.y, 2.), 1.) * cos(iTime * 3.);\n    }\n    else\n    {\n    \t_uv.y += step(1., mod(_uv.x, 2.)) * cos(iTime * 3.);\n    \t_uv.y -= step(mod(_uv.x, 2.), 1.) * cos(iTime * 3.);\n    }\n    _uv = fract(_uv);\n    \n    float dis = sqrt(dot(_uv - vec2(.5), _uv - vec2(.5)));\n    return vec3(dis < .25);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    vec3 col1 = circle(uv, .5, 0.01) * col;\n\n    // Output to screen\n    fragColor = vec4(col1,1.0);\n}","name":"Image","description":"","type":"image"}]}