{"ver":"0.1","info":{"id":"WstXDn","date":"1571818511","viewed":86,"name":"remi 6 repeat","username":"vankeisb","description":"ddd","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["ddd"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .0001\n\n\n/**\n * Rotation matrix around the X axis.\n */\nmat3 rotateX(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(1, 0, 0),\n        vec3(0, c, -s),\n        vec3(0, s, c)\n    );\n}\n\n/**\n * Rotation matrix around the Y axis.\n */\nmat3 rotateY(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, 0, s),\n        vec3(0, 1, 0),\n        vec3(-s, 0, c)\n    );\n}\n\n/**\n * Rotation matrix around the Z axis.\n */\nmat3 rotateZ(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, -s, 0),\n        vec3(s, c, 0),\n        vec3(0, 0, 1)\n    );\n}\n\nfloat opUnion( float d1, float d2 ) {  return min(d1,d2); }\n\nfloat opSubtraction( float d1, float d2 ) { return max(-d1,d2); }\n\nfloat opIntersection( float d1, float d2 ) { return max(d1,d2); }\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  \tvec3 q = abs(p) - b;\n  \tfloat d = length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n  \treturn d;\n}\n\nfloat GetDist(vec3 p) {\n    vec3 boxOrigin = vec3(0, 0, 6);\n    p = p - boxOrigin;\n    p = rotateY(iTime / 6.) * rotateX(iTime / 4.) * p;\n    \n    vec3 c = vec3(5,5,5);\n    p = mod(p+0.5*c,c)-0.5*c;\n    \n    return sdBox(p, vec3(.2,1,1));\n}\n\n\nvec3 GetNormal(vec3 p) {\n    float d = GetDist(p);\n    vec2 e = vec2(SURF_DIST, 0);\n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}   \n\nfloat RayMarch(vec3 ro, vec3 rd) {    \n    float dO = 0.;\n    \n    for (int i=0; i<MAX_STEPS; i++) {\n        vec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if (dO > MAX_DIST || dS < SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nfloat GetLight(vec3 p) {\n    vec3 lightPos = vec3(1, 1, 1);\n    vec3 lightV = normalize(lightPos - p);\n    vec3 normal = GetNormal(p);\n    \n    float dif = clamp(dot(normal, lightV), 0., 1.);    \n    \n\tfloat d = RayMarch(p+normal*SURF_DIST*2., lightV);\n    if (d < length(lightPos - p)) dif *= .5;\n\n    return dif;\n}\n\n    \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - .5 * iResolution.xy) / iResolution.y;\n\n    vec3 col = vec3(0);\n    \n    vec3 ro = vec3(0, 3, 0);\n    vec3 rd = normalize(vec3(uv.x, uv.y - .5, 1));\n    \n    float d = RayMarch(ro, rd);\n    vec3 p = ro + rd * d;\n    \n    float diffuseL = GetLight(p);\n    \n    col = vec3(diffuseL);\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}