{"ver":"0.1","info":{"id":"ctjyWW","date":"1691799417","viewed":133,"name":"quantizing and blurring","username":"dactorwatson","description":"Learning about some functions!","likes":0,"published":1,"flags":34,"usePreview":0,"tags":["random","webcam"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// CHANGE THIS FOR BLUR\nint r = 15;\n// CHANGE THIS FOR \nfloat delta = 0.2;\n\nfloat quantize (float x, float delta) {\n    return delta * floor((x/delta) + 0.5);\n\n}\n\nvec3 quantize (vec3 col, float delta) {\n    float r = quantize(col.r, delta);\n    float g = quantize(col.g, delta);\n    float b = quantize(col.b, delta);\n    return vec3(r,g,b);\n\n}\n\nvec3 blurv(int r, vec2 uv) {\n    int px = (2 * r + 1);\n    float weight = 1.0/float(px);\n    vec2 rt_up = vec2(1,1)/iResolution.xy;\n\n    vec3 col = vec3(0);\n    for (int j = -r; j <= r; j++) {\n        vec2 offset = vec2(0,j) * rt_up;\n        vec3 tex = texture(iChannel3, uv + offset).rgb;\n        //col += quantize(texture(iChannel1, uv + offset).rgb, 0.3) * weight; // quantize before blur\n        col += texture(iChannel0, uv + offset).rgb * weight;\n    }\n\n    return col;\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 col = blurv(8, uv);\n    //vec3 col = texture(iChannel0, uv).rgb;\n    \n    //fragColor = vec4(col, 1.0);               // return\n    fragColor = vec4(quantize(col, delta), 1.0);  // quantize before returning\n\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Random using frac(sin()) -- https://thebookofshaders.com/10/\n// Quantization -- https://en.wikipedia.org/wiki/Quantization_(signal_processing)\n// Mean Filter -- https://lettier.github.io/3d-game-shaders-for-beginners/blur.html\n\nfloat random (vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(-0.070,-0.160)))*\n        43745.425+iTime);\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float rnd = random(uv);\n    \n    fragColor = vec4(vec3(rnd), 1.0);\n\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"int r = 25;\n\nvec3 blurh(int r, vec2 uv) {\n    int px = (2 * r + 1);\n    float weight = 1.0/float(px);\n    vec2 rt_up = vec2(1,1)/iResolution.xy;\n\n    vec3 col = vec3(0);\n    for (int i = -r; i <= r; i++) {\n        vec2 offset = vec2(i,0) * rt_up;\n        vec3 tex = texture(iChannel0, uv + offset).rgb;\n        //col += quantize(tex, 0.3) * weight; // quantize before blur\n        col += tex * weight;                  // blur\n    }\n    \n    return col;\n\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col = blurh(r, uv);\n    fragColor = vec4(col,1.0);\n\n}","name":"Buffer B","description":"","type":"buffer"}]}