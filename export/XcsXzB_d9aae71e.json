{"ver":"0.1","info":{"id":"XcsXzB","date":"1708332653","viewed":81,"name":"Crappy Mandelbulb","username":"Smorg","description":"Still no idea what i am doing","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["3d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int MAX_MARCHING_STEPS = 255;\nconst float MIN_DIST = 0.0;\nconst float MAX_DIST = 100.0;\nconst float PRECISION = 0.001;\nconst int Iterations = 10;\nconst float Scale = 2.;\n\n\n\nfloat distanceEstimator()\n{\n    return 0.;\n}\nfloat DE(vec3 pos) {\n    \n    vec3 offset = vec3(0.,0.,-1.);\n    pos += offset;\n    float Power = 2.+sin(iTime/2500.)*10.;\n    float Bailout = 4.;\n\tvec3 z = pos;\n\tfloat dr = 1.0;\n\tfloat r = 0.0;\n\tfor (int i = 0; i < Iterations ; i++) {\n\t\tr = length(z);\n\t\tif (r>Bailout) break;\n\t\t\n\t\t// convert to polar coordinates\n\t\tfloat theta = acos(z.z/r);\n\t\tfloat phi = atan(z.y,z.x);\n\t\tdr =  pow( r, Power-1.0)*Power*dr + 1.0;\n\t\t\n\t\t// scale and rotate the point\n\t\tfloat zr = pow( r,Power);\n\t\ttheta = theta*Power;\n\t\tphi = phi*Power;\n\t\t\n\t\t// convert back to cartesian coordinates\n\t\tz = zr*vec3(sin(theta)*cos(phi), sin(phi)*sin(theta), cos(theta));\n\t\tz+=pos;\n\t}\n    return 0.5*log(r)*r/dr;\n}\n\nvec2 rayMarch(vec3 ro, vec3 rd, float start, float end) {\n  float depth = start;\n  int steps;\n  for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n    vec3 p = ro + depth * rd;\n    float d = DE(p);\n    depth += d;\n    if (d < PRECISION || depth > end) break;\n    steps++;\n  }\n\n  return vec2(depth,steps);\n}\n\nvec3 calcNormal(vec3 p) {\n\tmat3 k = mat3(p,p,p)-mat3(0.001);\n\treturn normalize(DE(p)-vec3(DE(k[0]),DE(k[1]),DE(k[2])));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n  vec3 backgroundColor = vec3(0.835, 1, 1);\n\n  vec3 col = vec3(0);\n  vec3 ro = vec3(0, 0, 3); // ray origin that represents camera position\n  vec3 rd = normalize(vec3(uv, -1)); // ray direction\n\n  vec2 f = rayMarch(ro, rd, MIN_DIST, MAX_DIST); // distance to sphere\n  float d = f[0];\n  float l = f[1];\n\n  if (d > MAX_DIST) {\n    col = backgroundColor; // ray didn't hit anything\n  } else {\n    vec3 p = ro + rd * d; // point on sphere we discovered from ray marching\n    vec3 normal = calcNormal(p);\n    vec3 lightPosition = vec3(2, 2, 7);\n    vec3 lightDirection = normalize(lightPosition - p);\n\n    // Calculate diffuse reflection by taking the dot product of \n    // the normal and the light direction.\n    float dif = clamp(dot(normal, lightDirection),0.,1.);\n    // Multiply the diffuse reflection value by an orange color and add a bit\n    col = dif * vec3(1, 0.58, 0.29) + backgroundColor * .2;\n  }\n\n  // Output to screen\n  fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}