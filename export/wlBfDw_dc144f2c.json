{"ver":"0.1","info":{"id":"wlBfDw","date":"1599066531","viewed":168,"name":"Voronoi Using Manhattan Distance","username":"pprovins","description":"Example of voronoi calculation using the manhattan distance.","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["2d","voronoi","manhattan"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 psuedoRand(vec2 p) {\n\tvec3 a = fract(p.xyy * vec3(123.34, 234.45, 345.56));\n    a += dot(a, a + 67.78);\n    return fract(vec2(a.x * a.y, a.y * a.z));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = (2.0 * fragCoord - iResolution.xy)/iResolution.y;\n    float minDist = 100.0;\n    float closest = 0.0;\n    \n    vec3 colorID = vec3(0.0);\n    float circlePoints = 0.0;\n    \n    // 1.0 = Manhattan\n    // 2.0 = Euclidean\n    // >2. = Closer to Chebyshev\n    float toggle = 1.0;\n    \n    for(float i = 1.0; i < 10.0; ++i){\n    \tvec2 randNum = psuedoRand(vec2(i));\n        vec2 position = sin(randNum * (iTime + 10.0) * 0.5);\n        float manx = pow(abs(uv.x - position.x), toggle);\n        float many = pow(abs(uv.y - position.y), toggle);\n        float dist = pow(manx + many, 1.0 / toggle);\n        float ctest = abs(length(uv - position));\n        if(dist < minDist) {\n            circlePoints = smoothstep(0.01, 0.02, ctest);\n            minDist = dist;\n            closest = i;\n        }\n    }\n    \n    vec3 color = vec3(1.0) - vec3(minDist);\n    colorID = vec3(mod(closest, 10.0) / 10.0);\n    vec3 red = vec3(1.0, 0.0, 0.0);\n    \n\tfragColor = vec4(mix(red, colorID, circlePoints), 1.0);\n}","name":"Image","description":"","type":"image"}]}