{"ver":"0.1","info":{"id":"WtXfWS","date":"1601916017","viewed":261,"name":"gerste v3","username":"mintyLemon","description":"approximating a field of barley waving in the wind","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["wave","grass","fur","plant","crops"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3Rr","filepath":"/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","previewfilepath":"/media/ap/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SUN_DIR normalize(vec3(1., -sin(iTime) * .3 + -.1, 0.))\n#define CAMERA_ORIGIN vec3(0., 3., 0.)\n#define DRAG_MULT 0.1\n\nconst float uvScale = .2;\nconst float colorUvScale = .1;\nconst float furDepth = .3;\nconst int furLayers = 2048;\nconst float rayStep = furDepth*3.0 / float(furLayers);\nconst float furThreshold = .1;\nconst float shininess = 4.;\nconst float visibility = 2000.;\nconst vec3 sun_color = vec3(1., .7, .5);\nconst vec3 sky_color = vec3(.53, .81, .92);\n\n\nconst float A = 0.15;\nconst float B = 0.50;\nconst float C = 0.10;\nconst float D = 0.20;\nconst float E = 0.02;\nconst float F = 0.30;\nconst float W = 11.2;\n\nconst vec3 ONES = vec3(1.,1.,1.); \nconst vec2 ONES2 = vec2(1.,1.);\n\n#define Mouse (iMouse.xy / iResolution.xy)\n#define Resolution (iResolution.xy)\n#define Time (iTime)\n\nvec3 aces_tonemap(vec3 x){\t\n\t\n    \n\treturn ((x*(A*x+C*B)+D*E)/(x*(A*x+B)+D*F))-E/F;;\n}\n\nvec3 rotateX(vec3 p, float a)\n{\n    float sa = sin(a);\n    float ca = cos(a);\n    return vec3(p.x, ca*p.y - sa*p.z, sa*p.y + ca*p.z);\n}\n\nvec3 rotateY(vec3 p, float a)\n{\n    float sa = sin(a);\n    float ca = cos(a);\n    return vec3(ca*p.x + sa*p.z, p.y, -sa*p.x + ca*p.z);\n}\n\nfloat wave(float x){\n  return sin(sin(x/1.7456+.334) + 2. * sin(x + 1.252) * sin(x + .562)  - 2.);   \n}\n\nfloat bending(vec2 uv, float time) {\n \tvec2 transform1 = uv * .01 + time * ONES2;\n    \n    vec2 transform2 = uv * .025 - time * ONES2;\n    \n    // Time varying pixel color\n    float val1 = texture(iChannel2, transform1).x;\n    float val2 = texture(iChannel2, transform2).x;\n\n    return val1 * (1. - val2);   \n}\n\nvec2 furOrigin(vec3 pos){\n    float r = pos.y;\n\n\tfloat t = (r - (1.0 - furDepth)) / furDepth;\t\n\tvec3 p = rotateX(pos.zyx, .05 * bending(pos.xz * .5, iTime * .05)).zyx;\t// curl\n\n\tp /= r;\t\n\tvec2 uv = p.xz;\n\n\tuv.x += .05 * bending(pos.xz, iTime * .03);\t// curl\n\t//uv.y += bending(pos.xz);\n\treturn uv;\n}\n\n\n////////////////////////////////////////////////////////////////\n// taken from furball - https://www.shadertoy.com/view/XsfGWN //\n////////////////////////////////////////////////////////////////\n\n// returns fur density at given position\nfloat furDensity(vec3 pos, out vec2 uv)\n{\t\n    uv = furOrigin(pos);\n\tvec4 tex = textureLod(iChannel0, uv*uvScale, 0.0);\n\n\t// thin out hair\n\tfloat density = smoothstep(furThreshold, .5, tex.x);\n\t\n\tfloat r = pos.y;\n\tfloat t = (r - (1.0 - furDepth)) / furDepth;\n\t\n\t// fade out along length\n\tfloat len = tex.y;\n\tdensity *= smoothstep(len, len-0.2, t);\n\n\treturn density;\t\n}\n\nvec3 furNormal(vec3 pos, float density)\n{\n    vec2 uv;\n    const float ep = 0.0000001;\n    vec2 e = vec2(1.0,-1.0)*0.5773;\n    return normalize( e.xyy*furDensity( pos + e.xyy*ep, uv ) + \n\t\t\t\t\t  e.yyx*furDensity( pos + e.yyx*ep, uv ) + \n\t\t\t\t\t  e.yxy*furDensity( pos + e.yxy*ep, uv ) + \n\t\t\t\t\t  e.xxx*furDensity( pos + e.xxx*ep, uv ) );\n}\n\n\n////////////////////////////////////////////////////////////////\n\n\nmat3 axisangle(vec3 axis, float angle)\n{\n\taxis = normalize(axis);\n\tfloat s = sin(angle);\n\tfloat c = cos(angle);\n\tfloat oc = 1.0 - c;\n\treturn mat3(oc * axis.x * axis.x + c, oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s, \n\toc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s, \n\toc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c);\n}\n\nvec3 getRay(vec2 uv){\n    uv = (uv * 2.0 - 1.0) * vec2(Resolution.x / Resolution.y, 1.0);\n\tvec3 proj = normalize(vec3(uv.x, uv.y, 1.0) + vec3(uv.x, uv.y, -1.0) * pow(length(uv), 2.0) * 0.1);\t\n    if(Resolution.x < 400.0) return proj;\n\tvec3 ray = axisangle(vec3(0.0, -1.0, 0.0), 3.0 * (Mouse.x * 2.0 - 1.0)) * axisangle(vec3(1.0, 0.0, 0.0), 1.5 * (Mouse.y * 2.0 - 1.0)) * proj;\n    return ray;\n}\n\nfloat intersectPlane(vec3 origin, vec3 direction, vec3 point, vec3 normal)\n{ \n    return clamp(dot(point - origin, normal) / dot(direction, normal), -1.0, 9991999.0); \n}\n\nfloat sun(vec3 ray){\n \tvec3 sd = -SUN_DIR;   \n   \tsd.x = -sd.x;\n    return pow(max(0.0, dot(ray, sd)), 528.0) * 110.0;\n}\n\nvec3 getColor(vec3 pos, vec3 ray_seg)\n{\n    vec3 V = -normalize(ray_seg);\n    vec2 uv;\n    vec3 normal = furNormal(pos, furDensity(pos, uv));\n    vec3 lDir = SUN_DIR;\n \t\n    vec3 ambient = textureLod(iChannel1, uv*colorUvScale, 0.0).xyz * vec3(1., 1., .75);\n    vec3 softCol = ambient;\n    vec3 specCol = sun_color;\n    \n    float soft = dot(lDir, normal);\n    vec3 cshadow = pow( vec3(soft), vec3(1.0, .2, 1.5) );\n   \tvec3 R = 2.*dot(lDir, normal) * normal - lDir;\n    float specular = max(0., pow(dot(R,V),shininess));\n    \n    float r = length(pos);\n\tfloat t = (r - (1.0 - furDepth)) / furDepth;\n\tt = clamp(t, 0.0, 1.0);\n\tfloat i = t*0.5+0.5;\n    \n    vec3 color = i * (ambient * .9 + 0.8 * softCol * soft + 0.5 * specCol * specular);\n    \n    return color;\n}\n\n\nvec4 scene(vec3 ro,vec3 rd)\n{\n\tvec3 p = vec3(0.0);\n\tconst float r = 1.0;\n\tfloat t;\n    \n    if(rd.y >= -0.1){\n        vec3 col = sun_color * sun(rd) + max(0., 1. - sun(rd)) * sky_color;\n        return vec4(col,1.0);\n    }\n    \n\tvec3 hit = ro + rd * intersectPlane(ro, rd, vec3(0., 1, 0.), vec3(0., 1., 0.));\n\t\n\tvec4 c = vec4(0.0);\n\n\t// ray-march into volume\n\tfor(int i=0; i<furLayers; i++) {\n\t\tvec4 sampleCol;\n\t\tvec2 uv;\n\t\tsampleCol.a = furDensity(hit, uv);\n\t\tif (sampleCol.a > 0.0) {\n\t\t\tsampleCol.rgb = getColor(hit, hit - CAMERA_ORIGIN);\n\n\t\t\t// pre-multiply alpha\n\t\t\tsampleCol.rgb *= sampleCol.a;\n\t\t\tc = c + sampleCol*(1.0 - c.a);\n\t\t\tif (c.a > 0.95) break;\n\t\t}\n\t\t\t\n\t\thit += rd*rayStep;\n\t}\n    \n    return mix(c, vec4(sky_color, 1.), min(pow(length(hit - CAMERA_ORIGIN), 2.) / visibility, 1.));\n\t\n\treturn c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\t\n    vec3 rayDir = getRay(uv);\n    \n    // Output to screen\n    vec4 col0 = scene(CAMERA_ORIGIN, rayDir);\n    vec3 col = aces_tonemap(col0.xyz);\n    col = col/aces_tonemap(ONES * 9.);\n   \tvec4 mapped_col = vec4(pow(col,ONES * 1./2.2), 1.);\n    \n    fragColor = col0;\n}","name":"Image","description":"","type":"image"}]}