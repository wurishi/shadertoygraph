{"ver":"0.1","info":{"id":"td3GW8","date":"1568311537","viewed":755,"name":"CartBoy","username":"asis5528","description":"put AA 2 for Anti aliasing(4x). Was learning new things from iq live stream and I found how to use a different material for different distance field object so I tried to make this ","likes":36,"published":1,"flags":96,"usePreview":1,"tags":["procedural","cartoon","cart","sadness"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"MlfGWS","filepath":"https://soundcloud.com/joe-hisaishi/spirited-away-reprise-by-joe-hisaishi","previewfilepath":"https://soundcloud.com/joe-hisaishi/spirited-away-reprise-by-joe-hisaishi","type":"musicstream","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// Email:blender5528@gmail.com Twitter:@blender5528\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\t\n    \n    \n    \n\tvec4 c;\n   \n    float a =  texture(iChannel0, uv).a;\n    vec2 buv[11];\n    float size = 1./iResolution.x/5.;\n    for(int i = -5;i<=5;i++){\n    \tbuv[i+5] = uv+vec2(float(i)*size*a*3.,0.0);\n    }\n\t\tc = vec4(0.0);\n\t\tc += texture(iChannel0, buv[0]) * 0.0093;\n    c += texture(iChannel0, buv[1]) * 0.028002;\n    c += texture(iChannel0, buv[2]) * 0.065984;\n    c += texture(iChannel0, buv[3]) * 0.121703;\n    c += texture(iChannel0, buv[4]) * 0.175713;\n    c += texture(iChannel0, buv[5]) * 0.198596;\n    c += texture(iChannel0, buv[6]) * 0.175713;\n    c += texture(iChannel0, buv[7]) * 0.121703;\n    c += texture(iChannel0, buv[8]) * 0.065984;\n    c += texture(iChannel0, buv[9]) * 0.028002;\n    c += texture(iChannel0, buv[10]) * 0.0093;\n\n   \n    uv *=  1.0 - uv.yx;   \n    \n    float vig = uv.x*uv.y * 15.0;\n    \n    vig = pow(vig, 0.25); \n\t\t\n\t\t\n\t\tfragColor = vec4(c)*vig*vig;\n\t\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//By Asis\n#define AA 1\nfloat font(vec2 uv,vec2 char,vec2 off,float scale){\n\tuv/=scale;\n    uv.x-=off.x/scale;\n    uv.y-=off.y/scale;\n    float k = step(uv.x,1./16.)+step(uv.y,1./16.);\n    float l = step(uv.x+1./16.,1./16.)+step(uv.y+1./16.,1./16.);\n    k = k-1.;\n  \tuv.x+=char.x/16.;\n    uv.y+=char.y/16.;\n    float t = texture(iChannel1,uv).r;\n    return clamp(t*(k-l),0.,1.);\n}\n\nfloat arrow(vec2 p){\n  vec2 st = p;\n    vec2 uv = p;\n    uv/=1.2;\n    uv.x/=1.4;\n    float d = length(uv);\n    float c = smoothstep(0.3,0.26,d);\n    uv/=1.2;\n    uv.y*=1.1;\n    uv.y+=0.03;\n    d = length(uv-vec2(0.0,0.1));\n    c -= smoothstep(0.3,0.26,d);\n    c = clamp(c,0.0,1.);\n\tvec3 col = vec3(c);\n    float a = 0.7;\n    st*=mat2(cos(a),sin(a),-sin(a),cos(a));\n    st*=3.2;\n    st.x-=0.4;\n    st.y+=1.23;\n    st.y/=p.x-1.-0.5;\n    //st.y/=st\n    st.x/=2.;\n    float ad = length(st);\n    float arrow = smoothstep(0.3,0.23,ad);\n    st.x/=1.4;\n    st.x+=0.14;\n    ad = length(st);\n        arrow-=smoothstep(0.3,0.23,ad);\n    arrow = clamp(arrow,0.,1.);\n    float result = ((arrow+c));\n    return result;\n    \n}\nfloat genBigArrow(vec2 uv){\n\n\tfloat arr =  arrow(uv);\n    return arr;\n}\n\n\t \n\nfloat genText(vec2 uv){\n\tvec2 st = uv;\n    float scale = 1.5;\n    uv.x*=1.2;\n    float x = -0.45;\n    float y = 1.17;\n    float space = 0.03*scale;\n    float a = font(uv,vec2(1.,9.),vec2(x,y),scale);\n    x+=space;\n    float m = font(uv,vec2(13.,9.),vec2(x,y),scale);\n    x+=space;\n    float a1 = font(uv,vec2(1.,9.),vec2(x,y),scale);\n    x+=space;\n    float z = font(uv,vec2(10.,8.),vec2(x,y),scale);\n    x+=space;\n    float o = font(uv,vec2(15.,9.),vec2(x,y),scale);\n    x+=space;\n    float n = font(uv,vec2(14.,9.),vec2(x,y),scale);\n    x+=space/1.5;\n    float doot = font(uv,vec2(14.,13.),vec2(x,y),scale);\n    x+=space/1.5;\n    float c = font(uv,vec2(3.,9.),vec2(x,y),scale);\n    x+=space;\n    float o1 = font(uv,vec2(15.,9.),vec2(x,y),scale);\n    x+=space/1.5;\n    float dot1 = font(uv,vec2(14.,13.),vec2(x,y),scale);\n    x+=space/1.5;\n    float j = font(uv,vec2(10.,9.),vec2(x,y),scale);\n    x+=space;\n    float p = font(uv,vec2(0.,8.),vec2(x,y),scale);\n    float letter  = (a+m+a1+z+o+n+doot+c+o1+dot1+j+p)/2.;\n    st*=7.;\n    st.x*=1.1;\n    st -= vec2(-0.28*1.1,1.2)*7.;\n    float arr =  arrow(st);\n    \n    return arr+letter;\n\n}\nfloat bar(vec2 uv){\n\tvec3 col = vec3(1.);\n    float b = 1.;;\n    \n    if(uv.y<0.88&&uv.x<-0.31&&uv.y>0.77&&uv.x>-0.39)\n    {\n        uv.y*=2.;\n    \n     \tb = sin(uv.y*fract(uv.y*fract(uv.y*2.)*2.)*22.)*2.;\n    }\n\treturn b;\n\n}\n\nfloat sdTriPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n    return max(q.z-h.y,max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5);\n}\n\nfloat smin( float a, float b, float k )\n{\n    float h = max( k-abs(a-b), 0.0 )/k;\n    return min( a, b ) - h*h*k*(1.0/4.0);\n}\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return length(max(d,0.0))\n         + min(max(d.x,max(d.y,d.z)),0.0); \n}\n\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n{\n  vec3 d = abs(p) - b;\n  return length(max(d,0.0)) - r\n         + min(max(d.x,max(d.y,d.z)),0.0); \n}\n\nfloat sdElipsoid(vec3 pos,vec3 rad){\n\tfloat k0 = length(pos/rad);\n    float k1 = length(pos/rad/rad);\n\treturn k0*(k0-1.0)/k1;\n}\n\nfloat sdSphere(vec3 pos,float radius){\n\treturn length(pos)-radius;\n\n}\n\n\n\nvec3 cartBoy(vec3 pos){\n\tfloat texture = 0.;\n    float a = -1.0907571;\n    pos.yz = mat2(cos(a),sin(a),-sin(a),cos(a))*pos.yz;\n    pos.z-=0.05;\n    float m = 2.0;\n    float t = fract(iTime/2.);\n    vec3 q = vec3(abs(pos.x),pos.yz);\n    float y = 4.*t*(1.-t);\n    \n    vec3 center = vec3(-0.8,y+sin(iTime),sin(iTime));\n    \n    float sy = 0.5+0.5*y;\n    float compress = 1.0-smoothstep(0.0,0.2,y);\n    \n    sy = sy*(1.-compress)+compress;\n    float sz = 1./sy;\n    vec3 rad = vec3(0.25,0.25,0.25);\n   \tfloat d = sdElipsoid(pos-center,rad);\n   \n    float oy = -0.3;\n    \n    //Head\n    vec3 hr = pos;\n    a = 0.4;\n    \n    hr.y-=0.75;\n    hr.yz =  mat2(cos(a),sin(a),-sin(a),cos(a))*hr.yz;\n    hr.y+=0.75;\n   \n    float d1 =sdRoundBox(hr-vec3(0.0,0.7-oy,0.0),vec3(0.4,0.25,0.25),0.01);\n   \td1 = max(-sdRoundBox(hr-vec3(0.0,0.7-oy,0.0),vec3(0.4,0.25,0.25)/1.1,0.01),d1);\n    d1 = max(-sdBox(hr-vec3(0.0,0.955-oy,0.0),vec3(0.44,0.01,0.0034)),d1);\n    d1 = max(-sdBox(hr-vec3(0.0,0.95-oy,0.0),vec3(0.44,0.002,0.25)),d1);\n    \n    \n    \n    \n    //eye\n    vec3 eq = vec3(abs(hr.x),hr.yz);\n    float d2 = sdSphere(eq-vec3(0.18,0.7-oy,0.25),0.04); \n    \n    //nose\n    float d3 = sdTriPrism(hr-vec3(0.0,0.6-oy,0.25),vec2(0.06,0.1)); \n    \n    \n    //body\n   \toy = 0.2;\n    float bd = sdRoundBox(pos-vec3(0.0,0.7-oy,0.0),vec3(0.3,0.25,0.2),0.005);\n    if(d1<bd) {\n       m = 3.0;  \n       if(hr.z>0.0&&hr.x<0.1&&hr.x>-0.38){\n     \n    \t\tfloat gra = length((hr*vec3(1.,1.2,1))-vec3(0.0,0.9-oy,0.0));\n    \t\tfloat bar = clamp(bar(hr.xy),0.0,1.);\n            texture =(gra+(1.-bar))+genText(hr.xy);\n       }\n       \n        else if(hr.x<-0.4){\n            float gra = length((hr*vec3(1.,1.2,1))-vec3(0.0,0.9-oy,0.0));\n    \t\tvec2 st = hr.zy*3.-vec2(-0.0,1.1)*3.;\n        \ttexture  = genBigArrow(st)+gra;\n           \n       }\n       \n        else {\n        \tfloat gra = length((hr*vec3(1.,1.2,1))-vec3(0.0,0.9-oy,0.0));\n    \t\t\t\n        \ttexture  = (gra);\n       } \n             \n    }\n    \n    else {\n        \n        m = 2.0;\n         \n         }\n    \n    d1 =min(bd,d1);\n    \n    //body frock x\n    oy = 0.48;\n\tvec3 rq = q-vec3(0.27,0.7-oy,0.0);\n    a = -0.6;\n    rq.xy = (mat2(cos(a),sin(a),-sin(a),cos(a)))*rq.xy;\n    float d4 = sdBox(rq,vec3(0.01,0.08,0.2));\n    d1 = min(d1,d4);\n    \n    //body frock z\n    oy = 0.48;\n\trq = vec3(pos.xy,abs(pos.z));\t    \n    rq = rq-vec3(0.0,0.7-oy,0.26);\n    a = -0.6;\n    rq.yz = (mat2(cos(a),sin(a),-sin(a),cos(a)))*rq.yz;\n    float d5 = sdBox(rq,vec3(0.23,0.01,0.08));\n    d1 = min(d1,d5);\n    \n    \n    //hand\n      \n    oy = 0.1;\n    a = -1.3708;\n    q.x -= 0.3;\n    q.xz = (mat2(cos(a),sin(a),-sin(a),cos(a)))*q.xz;\n    q.x += 0.3;\n    float hand =sdRoundBox(q-vec3(0.56,0.7-oy,0.0),vec3(0.5,0.2,0.2)/2.,0.005);\n    if(hand<d1) m = 2.;\n    d1 = min(d1,hand);\n    \n    //legs\n    oy = 0.64;\n    rq = pos;\n   \tvec3 rp = rq;\n    a = (3.14159);\n    rq.y -= 0.45;\n    rq.yz = mat2(cos(a),sin(a),-sin(a),cos(a))*rq.yz;\n    rq.y -= 0.45;\n    a  = a;\n    rp.y -= 0.45;\n    rp.yz = mat2(cos(a),sin(a),-sin(a),cos(a))*rp.yz;\n    rp.y -= 0.45;\n    float leg = min(sdRoundBox(rq-vec3(0.12,0.7-oy,0.0),vec3(0.17,0.45,0.2)/2.,0.005),sdRoundBox(rp-vec3(-0.12,0.7-oy,0.0),vec3(0.17,0.45,0.2)/2.,0.005));\n    d1 =min(leg,d1);\n    d1 = max(-d2,d1);\n    d1=max(-d3,d1);\n        \n        \n    return vec3(d1,m,texture);\n}\n\n\n\nvec2 waves(vec3 pos){\n\tvec3 p = pos;\n    p = vec3(p.xy,abs(p.z));\n    p.z-=4.;\n    p.y-=0.1;\n  \t\n    p.y+=sin(p.x*3.+4.7)*0.3;\n    float m =0.5;\n\tfloat b = sdBox(p,vec3(9.5,0.05,0.25));\n    \n    return vec2(b,m);\n}\nvec2 cartun(vec3 pos){\n    vec3 p = pos;\n  \tfloat a= 0.4;\n    p.x+=1.2;\n    p.z-=1.7;\n  \tp.xz = mat2(cos(a),sin(a),-sin(a),cos(a))*p.xz;\n  \tp.x-=1.8;\n    p.z+=1.3;\n    p.x-=1.2;\n    p.y-=0.0;\n    float c = sdBox(p,vec3(0.25,0.25,0.25));\n    float small = sdBox(p,vec3(0.24,0.26,0.24));\n    c = max(-small,c);\n    vec3 q = vec3(abs(p.x),p.yz);\n    a = 0.6;\n    q.xy-=0.25;\n    q.xy = mat2(cos(a),sin(a),-sin(a),cos(a))*q.xy;\n    q.xy+=0.25;\n    float lw = sdBox(q-vec3(0.375,0.25,0.),vec3(0.15,0.005,0.25));\n    c=min(c,lw);\n    vec3 r = vec3(p.xy,abs(p.z));\n    r.zy-=0.25;\n    r.zy = mat2(cos(a),sin(a),-sin(a),cos(a))*r.zy;\n    r.zy+=0.25;\n    float rw = sdBox(r-vec3(0.0,0.25,0.375),vec3(0.25,0.005,0.15));\n    c= min(c,rw);\n\treturn vec2(c,0.3);\n}\n\n\nvec3 map(vec3 pos){\n\t\n    vec3 d1 = cartBoy(pos);\n    vec2 bri = waves(pos);\n    if(bri.x<d1.x) {d1.y = bri.y; d1.x = bri.x;}\n    else{\n    d1= d1;\n    }\n    vec2 cart = cartun(pos);\n    if(cart.x<d1.x) {d1.y = cart.y; d1.x = cart.x;}\n    else{\n    d1= d1;\n    }\n    float d2 = pos.y+0.2;\n    \n    return (d2<d1.x) ? vec3(d2,0.0,0.0):d1;\n\t\n}\n\nvec3 ray(vec3 ro , vec3 rd){\n    float t = 0.0;\n    vec3 h;\n    for(int i = 0;i<500;i++){\n\t\n    vec3 pos = ro+rd*t;\n     h = map(pos);\n    if(h.x<0.001) break;\n    t+=h.x;\n    if(t > 20.0) break;\n    }\n    if(t>20.0) t=-1.0;\n     return vec3(t,h.y,h.z);\n    \n}\n\nfloat castShadow(vec3 ro, vec3 rd){\n\tfloat res = 1.0;\n    float t = 0.001;\n    for(int i = 0;i < 100;i++){\n    \tvec3 pos = ro+rd*t;\n        float h = map(pos).x;\n        res = min(16.*h/t,res);\n        if(res<0.001) break;\n        t+=h;\n        if(t>20.0) break;\n    \n    }\n    return clamp(res,0.0,1.);\n\n\t}\n\nfloat calcOcclusion( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.01 + 0.11*float(i)/4.0;\n        vec3 opos = pos + h*nor;\n        float d = map( opos ).x;\n        occ += (h-d)*sca;\n        sca *= 0.95;\n        \n    }\n    return clamp( 1.0 - 2.0*occ, 0.0, 1.0 );\n}\n\nvec3 calculate_normal(vec3 pos){\nconst float eps = 0.0001;\n    vec4 n = vec4(0.0);\n    for( int i=min(iFrame,0); i<4; i++ )\n    {\n        vec4 s = vec4(pos, 0.0);\n        s[i] += eps;\n        n[i] = map(s.xyz).x;\n    }\n    return normalize(n.xyz-n.w);\n}\nvec3 Sky( vec3 ray )\n{\t//vec3 sky = vec3(1.-ray.y,1.-ray.y,1.);\n \tvec3 sky = vec3(1.-ray.y)/2.;\n    \n    vec3 col; \n   \n    vec2 st ;\n    //st.y+=fract(iTime)*10.;      \n \t\n    float c;\n   const float s = 0.00725;\n    float l = 0.0;\n   \tray.x*=iResolution.x/iResolution.y*0.5;\n    for(float f = 0.0;f<1.0;f+=s){\n        \n        st = ray.xy;\n        st.x-=0.5;\n     \tst.x+=f;\n        \n        st.y+=fract(12.*sin(f*3455.+0.4)+f*3.)-0.9;\n          \n        l+=s;\n        \n    \tfloat d = length(st);\n       \n     \tc +=smoothstep(0.05/4.,0.03/4.5,d)*2.;\n\t\n    \n    \tcol = vec3(c/2.);\n    }\n    return col*vec3(1.,0.6,0.1)+sky;\n}\n\n\nvec4 render(vec3 ro,vec3 rd,vec3 tm){\n\t\n    \n    vec3 col =Sky(rd);\n    vec3 p = vec3(12.);\n  \n     float k =  7.;\n    if(tm.x >0.0)\n    {\n     \tcol =vec3(1.);\n     \t\n        \n        vec3 sun = clamp(normalize(vec3(0.,0.4,0.2)),0.0,1.0);\n        \n        \n        \n        vec3 mat = vec3(0.527,0.381,0.220)/2.;\n        p = ro+rd*tm.x;\n        vec3 n = calculate_normal(ro+rd*tm.x); \n        //n = n+drop(p.xy);\n        vec3 srd = rd;\n        float a = -1.0907571;\n    \tsrd.yz = mat2(cos(a),sin(a),-sin(a),cos(a))*srd.yz;\n        float d = clamp(1.+dot(rd,n),0.0,1.0);\n       \n        float occ = calcOcclusion(p,n);\n        vec3 r = reflect(rd,n);\n        float shad = castShadow(p+n*0.001,sun);\n        \n        float dif = dot(n,sun);\n        \n        float skydif = clamp(0.5+0.5*dot(n,vec3(0.0,1.0,0.0)),0.0,1.0);\n        \n        float grodif = clamp(dot(n,vec3(0.0,-1.0,0.0)),0.0,1.0);\n        col *= d*(0.5+0.5*dif)*vec3(1.,0.6,0.6)*2.;\n        col =clamp(mat* vec3(4.2,4.0,3.5)*dif*shad,0.0,1.);\n        \n        col+=mat*vec3(0.5, 0.8, 0.9)*1.2 - max(rd.y*1.2,0.0)*0.5*skydif*1.5;\n        \n        col+=mat*vec3(0.3,0.3,0.2)*grodif;\n        col += vec3(r.y)*vec3(0.3,0.3,0.3)*1.2;\n        col += vec3(-r.y)*mat*0.5;\n        col*=vec3(occ);\n       \n     \n        if(tm.y>2.0){\n           \n            col+=vec3(1.-tm.z)*1.2;\n            col+=d*vec3(0.7,0.5,0.4)*0.8;\n            col/=1.4;\n            \n        \tk = 0.;\n        }\n        else if(tm.y>1.0){\n        \n         \tcol+=d*vec3(0.7,0.5,0.4);\n            k = 0.;\n           \n        }\n        else if(tm.y>0.4){\n        \n            col=vec3(1.2,1.2,1.5)*1.3;\n            k = 5.;\n        }\n        else if(tm.y>0.1){\n        \n            col+=d*vec3(0.7,0.5,0.4);\n            k = 2.;\n        }\n        \n        \n    }\n \n    \n\treturn vec4(col,k);\n}\nvec4 finalRender(vec3 ro,vec3 rd){\n\tvec3 tm = ray(ro,rd);\n    vec4 col;\n    if(tm.y>0.001){\n    \tcol = render(ro,rd,tm);\n    }\n    else{\n        float k; \n        vec3 n = calculate_normal(ro+rd*tm.x); \n        vec3 p = ro+rd*tm.x; \n        vec3 c;\n        rd.x+=sin(rd.y*122.)*0.007;\n        vec3 ref = rd;\n   \t\tvec3 pr = -1.0 + 2.0 * p;\n  \t\tfloat len = length(pr-vec3(12.));\n  \t\t//vec3 ruv = ref + (pr/len)*cos(len*1222222.0-iTime*4.0)*0.08;\n        rd = rd+(pr/len)*cos(len*6.0-iTime*4.0)*0.08;\n        vec3 pm =  ray(p+n*0.001,reflect(rd,n));\n        vec3 t = render(p+n*0.001,reflect(rd,n),pm).rgb;\n            \n           \n           //float nn =  noise(p/1.5)*1.4;\n            //col= mix(vec3(t),col,clamp(nn,0.0,1.)); \n            \n        c = t;\n        if(c.r>0.3&&c.g>0.3&&c.b>0.5){\n           \t\tk = 12.;\n                c*=1.2;\n        }\n        \n        else{\n            k = clamp(0.2+abs(p.z)*2.,0.,17.);\n        }\n        \n        col = vec4(c,k);\n    \n    }\n    \n    return col;\n    \n\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n\n{\n   \t\n    #if AA<2\n        \n    \t\tvec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n\t\t\tfloat an_x = 10.*-iMouse.x/iResolution.x;\n   \t\t\tfloat an_y = 10.*-iMouse.y/iResolution.y;\n   \t\t\tan_x=0.;\n   \t\t\tan_x+=sin(iTime/10.)/3.-0.2;\n    \t\tvec3 ta = vec3(0.0,0.0,0.2);\n    \t\tfloat off =9.9;\n     \t\tvec3 ro = ta+vec3(sin(an_x)*off,2.3,cos(an_x)*off);\n     \n    \t\tvec3 ww = normalize(ta-ro);\n    \t\n    \t\tvec3 uu = normalize(cross(ww,vec3(0.0,1.0,0.0)));\n                   \n    \t\tvec3 vv = normalize(cross(uu,ww));\n                   \n                   \n          \n    \n    \n    \t\tvec3 rd = normalize(uv.x*uu+uv.y*vv+9.0*ww);\n    \t\tvec4 col = finalRender(ro,rd);\n    #else\n    \tvec4 col = vec4(0.);\n    \tfor( int m=0; m<AA; m++ )\n        for( int n=0; n<AA; n++ )\n        {\n        vec2 rr = vec2( float(m), float(n) ) / float(AA);\n        vec2 uv = (2.*(fragCoord.xy+rr)-iResolution.xy)/iResolution.y;\n\t\t\tfloat an_x = 10.*-iMouse.x/iResolution.x;\n   \t\t\tfloat an_y = 10.*-iMouse.y/iResolution.y;\n   \t\t\tan_x=0.;\n   \t\t\tan_x+=sin(iTime/10.)/3.-0.2;\n    \t\tvec3 ta = vec3(0.0,0.0,0.2);\n    \t\tfloat off =9.9;\n     \t\tvec3 ro = ta+vec3(sin(an_x)*off,2.3,cos(an_x)*off);\n     \n    \t\tvec3 ww = normalize(ta-ro);\n    \t\n    \t\tvec3 uu = normalize(cross(ww,vec3(0.0,1.0,0.0)));\n                   \n    \t\tvec3 vv = normalize(cross(uu,ww));\n                   \n                   \n          \n    \n    \n    \t\tvec3 rd = normalize(uv.x*uu+uv.y*vv+9.0*ww);\n    \t\t col += finalRender(ro,rd);\n        }\n     col /= float(AA*AA);\n    #endif\n   \n   \n    fragColor = vec4(col);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\t\n\tvec4 c = texture(iChannel0,uv );\n    float a =  texture(iChannel0, uv).a;\n    vec2 buv[11];\n    float size = 1./iResolution.y/5.;\n    for(int i = -5;i<=5;i++){\n    \tbuv[i+5] = uv+vec2(0.0,float(i)*size*a);\n    }\n\t\tc = vec4(0.0);\n\t\tc += texture(iChannel0, buv[0]) * 0.0093;\n    c += texture(iChannel0, buv[1]) * 0.028002;\n    c += texture(iChannel0, buv[2]) * 0.065984;\n    c += texture(iChannel0, buv[3]) * 0.121703;\n    c += texture(iChannel0, buv[4]) * 0.175713;\n    c += texture(iChannel0, buv[5]) * 0.198596;\n    c += texture(iChannel0, buv[6]) * 0.175713;\n    c += texture(iChannel0, buv[7]) * 0.121703;\n    c += texture(iChannel0, buv[8]) * 0.065984;\n    c += texture(iChannel0, buv[9]) * 0.028002;\n    c += texture(iChannel0, buv[10]) * 0.0093;\n\n\t\t\n\t\t\n\t\tfragColor = vec4(c);\n\t\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\t\n\tvec4 c = texture(iChannel0,uv );\n    float a =  texture(iChannel0, uv).a;\n    vec2 buv[11];\n    float size = 1./iResolution.x/5.;\n    for(int i = -5;i<=5;i++){\n    \tbuv[i+5] = uv+vec2(float(i)*size*a,0.0);\n    }\n\t\tc = vec4(0.0);\n\t\tc += texture(iChannel0, buv[0]) * 0.0093;\n    c += texture(iChannel0, buv[1]) * 0.028002;\n    c += texture(iChannel0, buv[2]) * 0.065984;\n    c += texture(iChannel0, buv[3]) * 0.121703;\n    c += texture(iChannel0, buv[4]) * 0.175713;\n    c += texture(iChannel0, buv[5]) * 0.198596;\n    c += texture(iChannel0, buv[6]) * 0.175713;\n    c += texture(iChannel0, buv[7]) * 0.121703;\n    c += texture(iChannel0, buv[8]) * 0.065984;\n    c += texture(iChannel0, buv[9]) * 0.028002;\n    c += texture(iChannel0, buv[10]) * 0.0093;\n\n\t\t\n\t\t\n\t\tfragColor = vec4(c);\n\t\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\t\n\tvec4 c = texture(iChannel0,uv );\n    float a =  texture(iChannel0, uv).a;\n    vec2 buv[11];\n    float size = 1./iResolution.y/5.;\n    for(int i = -5;i<=5;i++){\n    \tbuv[i+5] = uv+vec2(0.0,float(i)*size*a*2.);\n    }\n\t\tc = vec4(0.0);\n\t\tc += texture(iChannel0, buv[0]) * 0.0093;\n    c += texture(iChannel0, buv[1]) * 0.028002;\n    c += texture(iChannel0, buv[2]) * 0.065984;\n    c += texture(iChannel0, buv[3]) * 0.121703;\n    c += texture(iChannel0, buv[4]) * 0.175713;\n    c += texture(iChannel0, buv[5]) * 0.198596;\n    c += texture(iChannel0, buv[6]) * 0.175713;\n    c += texture(iChannel0, buv[7]) * 0.121703;\n    c += texture(iChannel0, buv[8]) * 0.065984;\n    c += texture(iChannel0, buv[9]) * 0.028002;\n    c += texture(iChannel0, buv[10]) * 0.0093;\n\n\t\t\n\t\t\n\t\tfragColor = vec4(c);\n\t\n}","name":"Buffer D","description":"","type":"buffer"}]}