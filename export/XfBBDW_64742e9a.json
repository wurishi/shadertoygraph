{"ver":"0.1","info":{"id":"XfBBDW","date":"1724902213","viewed":14,"name":"kaleidoscopicsss","username":"cyberhens","description":"sdsd","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["3dsd"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n\nmat2 rot(float a) {\n    float s = sin(a), c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat sdBox(vec3 p, vec3 b) {\n    vec3 q = abs(p) - b;\n    return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0);\n}\n\nfloat map(vec3 p) {\n    for(int i = 0; i < 4; i++) {\n        p = abs(p) - vec3(2.0, 2.0, 2.0);\n        p.xy *= rot(iTime * 0.3);\n        p.xz *= rot(iTime * 0.1);\n    }\n    return sdBox(p, vec3(0.5));\n}\n\nvec3 calcNormal(in vec3 p) {\n    const float h = 0.0001;\n    const vec2 k = vec2(1, -1);\n    return normalize(k.xyy * map(p + k.xyy*h) +\n                     k.yyx * map(p + k.yyx*h) +\n                     k.yxy * map(p + k.yxy*h) +\n                     k.xxx * map(p + k.xxx*h));\n}\n\nfloat rayMarch(vec3 ro, vec3 rd) {\n    float dO = 0.;\n    for(int i = 0; i < MAX_STEPS; i++) {\n        vec3 p = ro + rd * dO;\n        float dS = map(p);\n        dO += dS;\n        if(dO > MAX_DIST || abs(dS) < SURF_DIST) break;\n    }\n    return dO;\n}\n\nvec3 render(vec3 ro, vec3 rd) {\n    float d = rayMarch(ro, rd);\n    vec3 col = vec3(0);\n    \n    if(d < MAX_DIST) {\n        vec3 p = ro + rd * d;\n        vec3 n = calcNormal(p);\n        vec3 r = reflect(rd, n);\n        \n        // Basic lighting\n        vec3 light = normalize(vec3(1, 2, -3));\n        float diff = max(0., dot(n, light));\n        float spec = pow(max(0., dot(r, light)), 32.);\n        \n        // Psychedelic coloring\n        vec3 objCol = 0.5 + 0.5 * cos(iTime + p.xyx + vec3(0, 2, 4));\n        \n        // Holographic effect\n        float holo = sin(50.0 * p.x + iTime) * sin(50.0 * p.y + iTime) * sin(50.0 * p.z + iTime);\n        objCol += vec3(0.1, 0.2, 0.3) * holo;\n        \n        col = objCol * diff + vec3(0.8) * spec;\n    }\n    \n    // Fog effect for depth\n    col = mix(col, vec3(0.1, 0.2, 0.3), 1.0 - exp(-0.01 * d * d));\n    \n    return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    \n    // Camera setup\n    vec3 ro = vec3(0, 0, -15);\n    vec3 rd = normalize(vec3(uv, 1));\n    \n    // Rotate camera\n    float time = iTime * 0.1;\n    mat2 rot1 = rot(time);\n    mat2 rot2 = rot(time * 0.9);\n    ro.xz *= rot1;\n    rd.xz *= rot1;\n    ro.xy *= rot2;\n    rd.xy *= rot2;\n    \n    vec3 col = render(ro, rd);\n    \n    // Tone mapping and gamma correction\n    col = col / (1.0 + col);\n    col = pow(col, vec3(0.4545));\n    \n    // Vignette effect\n    vec2 q = fragCoord.xy / iResolution.xy;\n    col *= 0.5 + 0.5 * pow(16.0 * q.x * q.y * (1.0 - q.x) * (1.0 - q.y), 0.25);\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}