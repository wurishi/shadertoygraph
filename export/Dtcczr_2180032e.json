{"ver":"0.1","info":{"id":"Dtcczr","date":"1698809741","viewed":123,"name":"Neon sine-waves","username":"Synnwave","description":"first actual attempt at making a simple GLSL shader","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["2d","cosines","neon","sinewaves"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// inspired by: https://www.youtube.com/watch?v=QcuBX0pNLKY\n\nfloat PI = radians(180.0);\n\nvec3 r = vec3(1, 0, 0.3);\nvec3 g = vec3(0, 1, 0.3);\nvec3 b = vec3(0, 0.5, 1);\nvec3 y = vec3(1, 1, 0.3);\n\nfloat inverseGlow = 0.05;\nfloat timeMultiplier = 1.0;\nfloat xAxisMultiplier = 0.70;\nfloat yAxisMultiplier = 0.3;\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 resolution   = ((fragCoord * 2.0) - iResolution.xy) / iResolution.y;\n    float xProduct    = (resolution.x * xAxisMultiplier);\n    float yProduct    = (resolution.y * yAxisMultiplier);\n    float timeProduct = (iTime * timeMultiplier);\n\n    vec3 rChannel = r * (inverseGlow / abs(xProduct + cos(yProduct - timeProduct)));\n    vec3 gChannel = g * (inverseGlow / abs(xProduct + sin(yProduct - timeProduct - PI)));\n    vec3 bChannel = b * (inverseGlow / abs(xProduct + cos(yProduct - timeProduct + PI)));\n    vec3 yChannel = y * (inverseGlow / abs(xProduct + sin(yProduct - timeProduct)));\n\n    fragColor = vec4((rChannel + gChannel + bChannel + yChannel), 1.0);\n}","name":"Image","description":"","type":"image"}]}