{"ver":"0.1","info":{"id":"Dl3fDX","date":"1701642066","viewed":45,"name":"Cassini Ovals, with parameters","username":"tekano","description":"revisiting something I managed to hack together purely with vector nodes on a pixel particle 2D grid back in Softimage XSI ICE from the Cassini Oval equation found on wikipedia a long time ago,  had fun trying to recreate the orig , also P1 is mouse xy","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["geometry","maths"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//https://en.wikipedia.org/wiki/Cassini_oval\n\n// I made this originally many years ago in XSI ICE vector operator node logic from the equation on the wiki page\n// https://www.youtube.com/watch?v=g1Wl-o9u9AI\n// trying to revisit again in shader toy, kind of the same but then it was a 2D grid of pixels / particle points\n\n//co authored (again) with Chat GPT4 \n\n// v02 trying to get the oval centred correctly with aspect ration and also trying some AA or smoothstep with variying dgrees of sucees\n\n// including parameters, for some reason it insisted on max points at the start, chatGPT 4 is pretty stupid somemetimes so I let this one go.  paramters are cool though!\n// play with outline thickness of oval line and size of stripes and number of points\n\n\nconst int MAX_POINTS = 42; // Maximum number of points\n\nfloat cassiniOvalDistance(in vec2 uv, in vec2 points[MAX_POINTS], int numPoints, float a) {\n    float distProduct = 1.0;\n    for (int i = 0; i < numPoints; i++) {\n        distProduct *= distance(uv, points[i]);\n    }\n\n    return abs(distProduct - a * a); // Distance from the edge of the oval\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Parameters\n    int numPoints = 12;\n    float radius = 0.5;\n    float speed = -0.5;\n    float numberOfStripes = 512.0;\n    float stripeSize = 0.02;\n\n    // Outline and AA parameters in pixels\n    float outlineWidthInPixels = 1.0; // Width of the outline \n    float AAWidthInPixels = 0.2; // Anti-aliasing width\n\n    // Convert pixel widths to normalized screen coordinates\n    float outlineWidth = outlineWidthInPixels / iResolution.y;\n    float AAWidth = AAWidthInPixels / iResolution.y;\n\n    vec2 uv = (fragCoord.xy / iResolution.xy) * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y; // Correct for aspect ratio\n\n    // Define points including the mouse-controlled point\n    vec2 points[MAX_POINTS];\n    points[0] = (iMouse.xy / iResolution.xy) * 2.0 - 1.0;\n    points[0].x *= iResolution.x / iResolution.y;\n    for (int j = 1; j <= numPoints; j++) {\n        float angle = 2.0 * 3.14159 * float(j - 1) / float(numPoints) + iTime * speed;\n        points[j] = vec2(cos(angle), sin(angle)) * radius;\n        points[j].x *= iResolution.x / iResolution.y;\n    }\n\n    fragColor = vec4(1.0, 1.0, 1.0, 1.0); // White background\n\n    // Draw the Cassini oval with AA and outline control\n    float minDistance = 1.0; // Start with a large distance\n    for (float i = 0.0; i < numberOfStripes; i++) {\n        float a = stripeSize * (i + 1.0);\n        float dist = cassiniOvalDistance(uv, points, numPoints + 1, a);\n        // Adjust distance for outline width\n        dist = abs(dist) - outlineWidth;\n        minDistance = min(minDistance, dist);\n    }\n\n    float edge = smoothstep(-AAWidth, AAWidth, minDistance);\n    fragColor = mix(vec4(0.0, 0.0, 0.0, 1.0), fragColor, edge);\n}\n","name":"Image","description":"","type":"image"}]}