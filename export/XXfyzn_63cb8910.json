{"ver":"0.1","info":{"id":"XXfyzn","date":"1725697637","viewed":50,"name":"Sine-based Normal Map","username":"SelfishKrus","description":"A detail map generator for skin specular;\n\nRef:\nGDC2013-Next-Generation-Character-Rendering\nhttps://www.shadertoy.com/view/MsScRt","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["normal","sinewave"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","previewfilepath":"/media/ap/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define ITERATION 100\n#define FREQUENCY_SCALE 0.4\n#define SHOW_NORMAL_MAP\n#define NORMAL_SCALE 7.0\n\n// A sine wave from the center \nfloat SineWave(vec2 fragCoord, vec2 center, float frequency)\n{\n    float val0 = pow(fragCoord.x - center.x, 2.0);\n    float val1 = pow(fragCoord.y - center.y, 2.0);\n    float numerator = sqrt(val0 + val1);\n    float denominator = 2.08 + 5.0 * frequency;\n    \n    return sin(numerator / denominator);\n}\n\n// Generate multiples of sine waves and average\n// Sample a noise map to get the center and frequency of sine waves\n// The center and frequency are consistent in each loop\nfloat AverageHeight(vec2 fragCoord, int iteration, float frequencyScale)\n{\n    float bump = 0.0;\n    for (int i=1; i <= iteration; i++)\n    {\n        vec2 center = texture(iChannel0, vec2(float(i) / 100.0)).rg * iResolution.xy;\n        float frequency = texture(iChannel0, vec2(float(i) / 100.0)).b * frequencyScale;\n        \n        bump += SineWave(fragCoord, center, frequency);\n    }\n    \n    return bump /= float(iteration);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col;\n    \n    float bump = AverageHeight(fragCoord, ITERATION, FREQUENCY_SCALE);\n    \n    #if defined(SHOW_NORMAL_MAP)\n        float bump_dx = AverageHeight(fragCoord + vec2(1, 0), ITERATION, FREQUENCY_SCALE);\n        float bump_dy = AverageHeight(fragCoord + vec2(0, 1), ITERATION, FREQUENCY_SCALE);\n        vec2 dxy = bump - vec2(bump_dx, bump_dy);\n        vec3 normal = normalize(vec3(dxy * NORMAL_SCALE, 1.0));\n        col = normal * 0.5 + 0.5;\n    #else\n        col = vec3(bump);\n    #endif\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}