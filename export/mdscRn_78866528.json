{"ver":"0.1","info":{"id":"mdscRn","date":"1686527531","viewed":29,"name":"kochplay","username":"teraspora","description":"Play with the Koch curve, based on Martijn from Art of Code's tutorial: https://www.youtube.com/watch?v=il_Qg9AqQkE","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["kochcurve"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3Rn","filepath":"/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","previewfilepath":"/media/ap/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// John Lynch - June 2023\n// Play with the Koch curve, built by folding space -\n// based on Martijn from Art of Code's tutorial: https://www.youtube.com/watch?v=il_Qg9AqQkE\n\n#define pi 3.1415926536\n#define deg240 .666666667 * pi\n#define deg150 .833333333 * pi\n#define deg72 .4 * pi\n#define deg108 1.8849556 * pi\n\nvec2 N(float theta) {\n    return vec2(sin(theta), cos(theta));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec3 col = vec3(0);\n    float scale = 1.;\n    //float mouse = atan(iMouse.x - iResolution.x / 2., iMouse.y - iResolution.y / 2.) + pi / 2.;\n    vec2 uv = (fragCoord - iResolution.xy / 2.) / iResolution.y;\n    uv *= 1.25;\n    uv.y += 2. * uv.x * sin(iTime / 10.);\n    // Reflect and move up to centre\n    uv = vec2(abs(uv.x), uv.y + tan(deg150) * .5);\n    vec2 n = N(deg150);\n    float d = dot(uv - vec2(.5, 0), n);\n    uv -= n * max(0., d) * 2.; \n    //col += smoothstep(.01, 0., abs(d));\n    n = N(deg240);\n    uv.x += .5;\n    for (int i = 0; i < 5; i++) {\n        scale *= 3.;\n        uv *= 3.;\n        uv.x -= 1.5;\n        uv.x = abs(uv.x);\n        uv.x -= .5;\n        uv -= n * min(0., dot(uv, n)) * sin(iTime / 6.) * 32.; \n    }\n    \n    float dd = length(uv - vec2(clamp(uv.x, -1., 1.), 0));\n    col += smoothstep(1. / iResolution.y, 0., dd / scale);\n    col.br += uv / scale * 3.;\n    uv /= scale * 2.;\n    col += texture(iChannel0, uv * 2. + iTime * .04).rgb;\n    fragColor = vec4(col.bgr / 2.,1.);\n}","name":"Image","description":"","type":"image"}]}