{"ver":"0.1","info":{"id":"mt2fDc","date":"1694948843","viewed":72,"name":"Starfieldee","username":"suttree","description":"Frist","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define NUM_LAYERS 8.\n\nvec3 palette( in float t )\n{\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 0.7, 0.4);\n    vec3 d = vec3(0.00, 0.15, 0.20);\n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\n// 2d rotation matrix\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat Star(vec2 uv, float flare) {\n    // distance to centre from current\n    float d = length(uv);\n    \n    float m = .05/d;\n    //float m = smoothstep(.1, .05, d);\n    \n    float rays = max(0., 1.-abs(uv.x * uv.y*1000.));\n    m += rays*flare;\n    \n    // 360deg is 2PI, 180deg is PI, 90deg is PI/2, 45deg is PI/4\n    uv *=Rot(3.1415/4.);\n    \n    rays = max(0., 1.-abs(uv.x * uv.y*1000.));\n    m += rays*.3*flare;\n    \n    m *= smoothstep(1., .2, d);\n    return m;\n}\n\n// noise function\nfloat Hash21(vec2 p) {\n    p = fract(p*vec2(123.34, 456.21));\n    p += dot(p, p+45.32);\n    return fract(p.x*p.y);\n}\n\nvec3 StarLayer(vec2 uv) {\n//vec3 col = palette(d);\n    vec3 col = vec3(0);\n\n    // repeats the same pattern over multiple boxes in the frame\n    // fract returns fractional component of a float\n    // floor returns the integer component of a float\n    vec2 gv = fract(uv)-.5;\n    vec2 id = floor(uv);\n    \n    for(int y=-1;y<1;y++) {\n        for(int x=-1;x<1;x++) {\n            vec2 offs = vec2(x, y);\n            \n            float n = Hash21(id+offs); // random between 0 and 1\n            float size = fract(n*345.32);\n            float star = Star(gv-offs-vec2(n, fract(n*34.))+.5, smoothstep(.8, .9, size));\n            \n            //vec3 colour = sin(palette(n*128.)*iTime)*.5+.5;\n            vec3 colour = sin(palette(n*128.)*fract(n*123.2)*6.2833)*.5+.5;\n            colour = colour*vec3(1,.5,1); // remove green\n            colour = colour*vec3(1,.5,1.*size); // make bigger stars bluer\n            \n            star *= sin(iTime*3.+n*6.2831)*.5+1.; // twinkle\n            col += star*size*colour;\n        }\n    }\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    //uv *= 3.;\n    vec2 M = (iMouse.xy-iResolution.xy*.5)/iResolution.y;\n    float t = iTime*.02;\n    \n    //uv += M;\n    uv *= Rot(t);\n    vec3 col = vec3(0);\n    \n    for( float i=0.; i<1.; i+=1./NUM_LAYERS) {\n        float depth = fract(i+t);\n        \n        float scale = mix(20., .5, depth);\n        float fade = depth*smoothstep(1., .9, depth);\n        col += StarLayer(uv*scale+i*453.2-M)*fade;\n    }\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}