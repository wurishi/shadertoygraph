{"ver":"0.1","info":{"id":"Wl3SRn","date":"1580590961","viewed":450,"name":"boid particles","username":"monsterkodi","description":"learning how to handle buffers and other stuff\n\nMOUSE to move the center of attraction","likes":26,"published":1,"flags":48,"usePreview":1,"tags":["boids"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define keys(x,y) texelFetch(iChannel0, ivec2(x,y), 0)\n#define load(x) texelFetch(iChannel1, ivec2(x,0), 0)\n#define font(x,y) texelFetch(iChannel2, ivec2(x,y), 0)\nbool keyState(int key) { return keys(key, 2).x < 0.5; }\nbool keyDown(int key)  { return keys(key, 0).x > 0.5; }\n\nfloat spark(float x, float y, float r)\n{\n    return pow(r/length(gl.uv-vec2(x,y)), 3.0);\n}\n\nfloat powi(int a, int b) { return pow(float(a), float(b)); }\nfloat log10(float a) { return log(a)/log(10.0); }\n\nfloat print(ivec2 pos, int ch)\n{\n    ivec2 r = gl.ifrag-pos; bool i = r.y>0 && r.x>0 && r.x<=text.size.y && r.y<=text.size.y;\n    return i ? texelFetch(iChannel2,ivec2((ch%16)*64,(1024-64-64*(ch/16)))+r*64/text.size.y,0).r : 0.0;\n}\n\nfloat print(ivec2 pos, float v)\n{\n    float c = 0.0; ivec2 a = text.adv; float f = abs(v);\n    int i = fract(v) == 0.0 ? 1 : fract(v*10.0) == 0.0 ? -1 : -2;\n    int ch, u = max(1,int(log10(f))+1);\n    ivec2 p = pos+6*a;\n    for (; i <= u; i++) {\n        if (i == 0)     ch = 46;\n        else if (i > 0) ch = 48+int(mod(f, powi(10,i))/powi(10,i-1));\n        else            ch = 48+int(mod(f+0.005, powi(10,i+1))/powi(10,i));\n        c = max(c, print(p-i*a, ch)*float(i+3)/30.0); }\n    if (v < 0.0) c = max(c, print(p-i*a, 45)*float(i)/30.0);\n    return c;\n}\n\nfloat print(ivec2 pos, vec4 v)\n{\n    float c = 0.0;\n    for (int i = 0; i < 4; i++) {\n        c = max(c, print(pos, v[i]));\n        pos += text.adv*8; }\n    return c;\n}\n\nfloat print(ivec2 pos, vec3 v)\n{\n    float c = 0.0;\n    for (int i = 0; i < 3; i++) {\n        c = max(c, print(pos, v[i]));\n        pos += text.adv*8; }\n    return c;\n}\n\nfloat print(ivec2 pos, vec2 v)\n{\n    float c = 0.0;\n    for (int i = 0; i < 2; i++) {\n        c = max(c, print(pos, v[i]));\n        pos += text.adv*8; }\n    return c;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    initGlobal(fragCoord, iResolution, iMouse);\n    for (int i = KEY_1; i <= KEY_9; i++) { if (keyDown(i)) { gl.option = i-KEY_1+1; break; } }\n    \n    bool dither = keyState(KEY_LEFT);\n    bool dmpclr = keyState(KEY_RIGHT);\n    \n    vec3 col = vec3(0.0);\n\tint num = int(load(0).x);\n    \n    col += spark(gl.mp.x, gl.mp.y, 0.02);\n\n    vec4 fish = load(0);\n    \n    for (int i = 1; i <= num; i++)\n    {\n        fish = load(i);\n            \n        vec2  w = gl.mp-fish.xy;\n        float df = 0.4;\n        float x = length(w);\n        float k = 100000.0;\n        float xsk = x+sqrt(1.0/k);\n        \n        if (dmpclr)\n            df = clamp(sqrt(k)*xsk/(1.0+k*xsk*xsk),0.0,1.0)*20.0;\n        \n        col += spark(fish.x, fish.y, 0.01)*df;\n    }\n    \n    if (dither)\n    {\n        col -= vec3(hash12(gl.frag)*0.002);\n        col = max(col, v0);\n    }\n    \n    col = pow(col, vec3(1.0/2.2));\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define save(a,c) if(gl.ifrag.x==(a)&&gl.ifrag.y==0){gl.color=(c);}\n#define load(x) texelFetch(iChannel1, ivec2(x,0), 0)\n\nint  id = -1;\nint  num = 0;\nvec4 val;\n\n#define SPEED    0.07\n#define DAMP     0.6\n#define MAX_FISH 511.\n\nvec2 hash(int n) { return fract(sin(vec2(float(n),float(n)*7.))*43758.5); }\n\nvec2 repulse(vec4 fish, vec2 target, float dist, float a)\n{\n    vec2 w = target-fish.xy;\n    float x = length(w);\n    if (x < EPSILON) return a*0.5*(hash31(float(id))-vec3(0.5)).xy;\n    return w*a*(smoothstep(0.0, dist, x)-1.0)/x;\n}\n\nvec2 attract(vec4 fish, vec2 target, float dist, float a, float s2, float s3)\n{\n    vec2  w = target-fish.xy;\n    float x = length(w);\n    float k = dist+s2;\n    float d = (2.0*dist+s2)*0.5;\n    float xkd = (x-d)/(k-d);\n    float l = min(max(-1.0, -abs(x-d)/(k-d)), xkd*exp(1.0+xkd));\n    float r = max(-1.0, xkd*exp(1.0-xkd)-max(0.0,(1.0-s3)*(1.0-exp(1.0-x/k))));\n    float f = a*max(r,l)*0.5+0.5;\n    return w*f;\n}\n\nvec2 swirl(vec4 fish, vec2 center, float a, float k)\n{\n    vec2  w = center-fish.xy;\n    w = vec2(-w.y,w.x);\n    float x = length(w);\n    return w*a/pow(x,k);\n}\n\nvoid boid()\n{\n    vec2 vel, acc, w, u = vec2(0.0);\n    vec4 fish = load(id);\n    float d, v, a;\n      \n    for (int i = 1; i <= num; i++) \n    {\n        if (i == id) continue;\n    \tacc += repulse(fish, load(i).xy, 0.07, 4.0);\n\t}\n\n    acc += attract(fish, gl.mp, 0.25, 0.01, 0.2, 0.1);\n    acc += repulse(fish, gl.mp, 0.15, 10.0);\n    acc += swirl  (fish, gl.mp, 0.008, 2.0);\n    \n    acc = normalize(acc)*min(0.5,length(acc));\n    vel = fish.zw + acc*SPEED;\n\n   \tvel *= pow(DAMP, SPEED);\n    \n    w = fish.xy+vel*SPEED;\n    \n    float b = 0.05;\n    val.x  = clamp(w.x,-1.0*gl.aspect+b,1.0*gl.aspect-b);\n    val.y  = clamp(w.y,-1.0+b,1.0-b);\n    val.zw = vel;\n    \n    save(id, val);\n}\n\nvoid initFish(int id)\n{\n   float r = 2.0*hash11(float(id))-1.0;\n   save(id, 0.1*vec4(r, 2.0*fract(r*123.0)-1.0, 0.0, 0.0)); \n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    initGlobal(fragCoord, iResolution, iMouse);\n    \n    if (iFrame == 0) \n    {\n\t\tsave(0,vec4(1,0,0,0));\n        initFish(1);\n        fragColor = gl.color;\n        return;\n    }\n\n    ivec2 mem = ivec2(fragCoord);\n    if (mem.y > 0) return;\n    id = mem.x;\n\n    val = load(id);\n\tnum = int(load(0).x);\n    \n    if (id == 0)\n    {\n        save(id,vec4(clamp(floor(iTime*100.0)+1.0, 1.0, MAX_FISH),0,0,0));\n    }\n    else\n    {\n        if (id > num) initFish(id);\n        else boid();\n    }\n    \n    fragColor = gl.color;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define PI 3.141592653589\n#define E  2.718281828459\n#define EPSILON 0.0000001\n\n#define KEY_LEFT  37\n#define KEY_UP    38\n#define KEY_RIGHT 39\n#define KEY_DOWN  40\n#define KEY_SPACE 32\n#define KEY_1     49\n#define KEY_9     57\n\nconst vec3 v0 = vec3(0,0,0);\nconst vec3 vx = vec3(1,0,0);\nconst vec3 vy = vec3(0,1,0);\nconst vec3 vz = vec3(0,0,1);\n\nconst vec3 red   = vec3(0.8,0.0,0.0);\nconst vec3 green = vec3(0.0,0.5,0.0);\nconst vec3 blue  = vec3(0.2,0.2,1.0);\nconst vec3 white = vec3(1.0,1.0,1.0);\n\n//  0000000   000       0000000   0000000     0000000   000      \n// 000        000      000   000  000   000  000   000  000      \n// 000  0000  000      000   000  0000000    000000000  000      \n// 000   000  000      000   000  000   000  000   000  000      \n//  0000000   0000000   0000000   0000000    000   000  0000000  \n\nstruct _text {\n    ivec2 size;\n    ivec2 adv;\n} text;\n\nstruct _gl {\n    vec2  uv;\n    vec2  frag;\n    vec2  mouse;\n    vec2  mp;\n    ivec2 ifrag;\n    float aspect;\n    vec4  color;\n    int   option;\n} gl;\n\nvoid initGlobal(vec2 fragCoord, vec3 resolution, vec4 mouse)\n{\n    //text.size = ivec2(8,16);\n    text.size = ivec2(16,32);\n    text.adv  = ivec2(text.size.x,0);\n    \n    mouse.xy = min(mouse.xy,resolution.xy);\n    if (mouse.z < 1.0 && mouse.z > -1.0) gl.mouse = resolution.xy*0.5;\n    else gl.mouse = mouse.xy;\n    \n\tgl.mp = (2.0*abs(gl.mouse)-vec2(resolution.xy))/resolution.y;    \n\n    gl.aspect = resolution.x / resolution.y;\n    gl.frag   = fragCoord;\n    gl.ifrag  = ivec2(fragCoord);\n    gl.uv     = (fragCoord+fragCoord-resolution.xy)/resolution.y;\n}\n\n// 000   000   0000000    0000000  000   000  \n// 000   000  000   000  000       000   000  \n// 000000000  000000000  0000000   000000000  \n// 000   000  000   000       000  000   000  \n// 000   000  000   000  0000000   000   000  \n\nfloat hash11(float p)\n{\n    p = fract(p * 0.1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\nvec3 hash33(vec3 p3)\n{\n    p3 = fract(p3 * vec3(0.1031, 0.1030, 0.0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n}\n\nvec3 hash31(float p)\n{\n   vec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n   p3 += dot(p3, p3.yzx+33.33);\n   return fract((p3.xxy+p3.yzz)*p3.zyx); \n}\n\nfloat hash12(vec2 p)\n{\n    vec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat gradientNoise(vec2 v)\n{\n    return fract(52.9829189 * fract(dot(v, vec2(0.06711056, 0.00583715))));\n}\n\n// 000   000   0000000  000      \n// 000   000  000       000      \n// 000000000  0000000   000      \n// 000   000       000  000      \n// 000   000  0000000   0000000  \n\nvec3 hsl2rgb( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n    return c.z + c.y * (rgb-0.5)*(1.0-abs(2.0*c.z-1.0));\n}\n\nvec3 hsl(float h, float s, float l) { return hsl2rgb(vec3(h,s,l)); }\n\nvec3 rgb2hsl( vec3 col )\n{\n    float minc = min( col.r, min(col.g, col.b) );\n    float maxc = max( col.r, max(col.g, col.b) );\n    vec3  mask = step(col.grr,col.rgb) * step(col.bbg,col.rgb);\n    vec3 h = mask * (vec3(0.0,2.0,4.0) + (col.gbr-col.brg)/(maxc-minc + EPSILON)) / 6.0;\n    return vec3( fract( 1.0 + h.x + h.y + h.z ),              \n                 (maxc-minc)/(1.0-abs(minc+maxc-1.0) + EPSILON),  \n                 (minc+maxc)*0.5 );                           \n}\n\n// 00     00   0000000   000000000  00000000   000  000   000  \n// 000   000  000   000     000     000   000  000   000 000   \n// 000000000  000000000     000     0000000    000    00000    \n// 000 0 000  000   000     000     000   000  000   000 000   \n// 000   000  000   000     000     000   000  000  000   000  \n\nmat3 alignMatrix(vec3 dir) \n{\n    vec3 f = normalize(dir);\n    vec3 s = normalize(cross(f, vec3(0.48, 0.6, 0.64)));\n    vec3 u = cross(s, f);\n    return mat3(u, s, f);\n}\n\n// 00000000    0000000   000000000  \n// 000   000  000   000     000     \n// 0000000    000   000     000     \n// 000   000  000   000     000     \n// 000   000   0000000      000     \n\nfloat rad2deg(float r) { return 180.0 * r / PI; }\nfloat deg2rad(float d) { return PI * d / 180.0; }\n\nmat3 rotMat(vec3 u, float angle)\n{\n    float s = sin(deg2rad(angle));\n    float c = cos(deg2rad(angle));\n    float i = 1.0-c;\n    \n    return mat3(\n        c+u.x*u.x*i, u.x*u.y*i-u.z*s, u.x*u.z*i+u.y*s,\n        u.y*u.x*i+u.z*s, c+u.y*u.y*i, u.y*u.z*i-u.x*s,\n        u.z*u.x*i-u.y*s, u.z*u.y*i+u.x*s, c+u.z*u.z*i\n        );\n}\n\nvec3 rotAxisAngle(vec3 position, vec3 axis, float angle)\n{\n    mat3 m = rotMat(axis, angle);\n    return m * position;\n}\n\n//  0000000   000   000   0000000   000000000  \n// 000   000  000   000  000   000     000     \n// 000 00 00  000   000  000000000     000     \n// 000 0000   000   000  000   000     000     \n//  00000 00   0000000   000   000     000     \n\nvec4 quatAxisAngle(vec3 axis, float angle)\n{ \n    float half_angle = deg2rad(angle*0.5);\n    return vec4(axis*sin(half_angle), cos(half_angle));\n}\n\nvec4 quatConj(vec4 q)\n{ \n    return vec4(-q.x, -q.y, -q.z, q.w); \n}\n  \nvec4 quatMul(vec4 q1, vec4 q2)\n{ \n    vec4 qr;\n    qr.x = (q1.w * q2.x) + (q1.x * q2.w) + (q1.y * q2.z) - (q1.z * q2.y);\n    qr.y = (q1.w * q2.y) - (q1.x * q2.z) + (q1.y * q2.w) + (q1.z * q2.x);\n    qr.z = (q1.w * q2.z) + (q1.x * q2.y) - (q1.y * q2.x) + (q1.z * q2.w);\n    qr.w = (q1.w * q2.w) - (q1.x * q2.x) - (q1.y * q2.y) - (q1.z * q2.z);\n    return qr;\n}\n\nvec3 rotate(vec4 q, vec3 p)\n{\n    vec4 conj = quatConj(q);\n    vec4 q_tmp = quatMul(q, vec4(p, 0));\n    return quatMul(q_tmp, conj).xyz;\n}\n\nvec3 rotate(vec4 q, vec3 o, vec3 p)\n{\n    vec4 conj = quatConj(q);\n    vec4 q_tmp = quatMul(q, vec4(p-o, 0));\n    return o + quatMul(q_tmp, conj).xyz;\n}\n\nvec3 rotAxisAngleQuat(vec3 p, vec3 axis, float angle)\n{ \n    vec4 qr = quatAxisAngle(axis, angle);\n    return quatMul(quatMul(qr, vec4(p, 0)), quatConj(qr)).xyz;\n}\n\nvec3 rotRayAngle(vec3 p, vec3 ro, vec3 rd, float angle)\n{ \n    return rotAxisAngle(p-ro, rd-ro, angle)+ro;\n}\n\nvec3 rotY(vec3 v, float d)\n{\n    float r = deg2rad(d);\n    float c = cos(r);\n    float s = sin(r);\n    return vec3(v.x*c+v.z*s, v.y, v.z*c+v.x*s);\n}\n\nvec3 rotX(vec3 v, float d)\n{\n    float r = deg2rad(d);\n    float c = cos(r);\n    float s = sin(r);\n    return vec3(v.x, v.y*c+v.z*s, v.z*c+v.y*s);\n}\n\nvec3 rotZ(vec3 v, float d)\n{\n    float r = deg2rad(d);\n    float c = cos(r);\n    float s = sin(r);\n    return vec3(v.x*c+v.y*s, v.y*c+v.x*s, v.z);\n}\n\n//  0000000   00000000   0000000   00     00    \n// 000        000       000   000  000   000    \n// 000  0000  0000000   000   000  000000000    \n// 000   000  000       000   000  000 0 000    \n//  0000000   00000000   0000000   000   000    \n\n\nvec3 posOnPlane(vec3 p, vec3 a, vec3 n)\n{\n    return p-dot(p-a,n)*n;\n}\n\nvec3 posOnRay(vec3 ro, vec3 rd, vec3 p)\n{\n    return ro + max(0.0, dot(p - ro, rd) / dot(rd, rd)) * rd;\n}\n\nbool rayIntersectsSphere(vec3 ro, vec3 rd, vec3 ctr, float r)\n{\n    return length(posOnRay(ro, rd, ctr) - ctr) < r;\n}\n\n//  0000000   00000000   \n// 000   000  000   000  \n// 000   000  00000000   \n// 000   000  000        \n//  0000000   000        \n\nfloat opDiff(float d1, float d2) \n{\n    float k = 0.05;\n    float h = clamp(0.5 - 0.5*(d2+d1)/k, 0.0, 1.0);\n    return mix(d1, -d2, h) + k*h*(1.0-h); \n}\n\nfloat opUnion(float d1, float d2) \n{\n    float k = 0.15;\n    float h = clamp(0.5 + 0.5*(d2-d1)/k, 0.0, 1.0);\n    return mix(d2, d1, h) - k*h*(1.0-h);\n}\n\n//  0000000  0000000    \n// 000       000   000  \n// 0000000   000   000  \n//      000  000   000  \n// 0000000   0000000    \n\nfloat sdCone(vec3 p, vec3 a, vec3 b, float r1, float r2)\n{\n    vec3 ab = b-a;\n    vec3 ap = p-a;\n    float t = dot(ab,ap) / dot(ab,ab);\n    t = clamp(t, 0.0, 1.0);\n    vec3 c = a + t*ab;\n    return length(p-c)-(t*r2+(1.0-t)*r1);      \n}\n\nfloat sdCylinder(vec3 p, vec3 a, vec3 b, float r)\n{\n  vec3  ba = b - a;\n  vec3  pa = p - a;\n  float baba = dot(ba,ba);\n  float paba = dot(pa,ba);\n  float x = length(pa*baba-ba*paba) - r*baba;\n  float y = abs(paba-baba*0.5)-baba*0.5;\n  float x2 = x*x;\n  float y2 = y*y*baba;\n  float d = (max(x,y)<0.0)?-min(x2,y2):(((x>0.0)?x2:0.0)+((y>0.0)?y2:0.0));\n  return sign(d)*sqrt(abs(d))/baba;\n}\n","name":"Common","description":"","type":"common"}]}