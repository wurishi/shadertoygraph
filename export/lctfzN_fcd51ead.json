{"ver":"0.1","info":{"id":"lctfzN","date":"1732806756","viewed":106,"name":"space universe","username":"nayk","description":"combination of starnnest and other from glslsandnox ","likes":2,"published":3,"flags":1,"usePreview":0,"tags":["combination"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Star Nest by Pablo RomÃ¡n Andrioli\n// copied from https://www.shadertoy.com/view/XlfGRj\n//\n// This content is under the MIT License.\n// (copied for API availability + VR)\n\n#define iterations 12\n#define formuparam 0.53\n\n#define volsteps 20\n#define stepsize 0.1\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.000\n\n#define brightness 0.0015\n#define darkmatter 0.300\n#define distfading 0.730\n#define saturation 0.850\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n\nuniform float time;\nuniform vec2 resolution;\n\n \n#define ray_brightness 10.\n#define gamma 2.25\n#define ray_density 8.5\n#define curvature 24.\n#define red   0.55\n#define green 0.5\n#define blue  1.49\n\n \n\n#define SIZE 0.4\n\n \n// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\nfloat rand(vec2 n) {\nreturn fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\nfloat noise(vec2 p){\nvec2 ip = floor(p);\nvec2 u = fract(p);\nu = u*u*(3.0-2.0*u);\n\nfloat res = mix(\nmix(rand(ip),rand(ip+vec2(1.0,0.0)),u.x),\nmix(rand(ip+vec2(0.0,1.0)),rand(ip+vec2(1.0,1.0)),u.x),u.y);\nreturn res*res;\n}\n\n\n\n\n// FLARING GENERATOR, A.K.A PURE AWESOME\nmat2 m2 = mat2( 0.80,  0.60, -0.60,  0.80 );\nfloat fbm( in vec2 p )\n{\nfloat z=8.;       // EDIT THIS TO MODIFY THE INTENSITY OF RAYS\nfloat rz = -0.085; // EDIT THIS TO MODIFY THE LENGTH OF RAYS\np *= 0.325;        // EDIT THIS TO MODIFY THE FREQUENCY OF RAYS\nfor (int i= 1; i < 6; i++)\n{\nrz+= abs((noise(p)-0.5)*2.)/z;\nz = z*2.;\np = p*2.*m2;\n}\nreturn rz;\n}\nfloat happy_star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 ro, in vec3 rd )\n{\n//get coords and direction\nvec3 dir=rd;\nvec3 from=ro;\n\n//volumetric rendering\nfloat s=0.1,fade=1.;\nvec3 v=vec3(0.);\nfor (int r=0; r<volsteps; r++) {\nvec3 p=from+s*dir*.5;\np = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\nfloat pa,a=pa=0.;\nfor (int i=0; i<iterations; i++) {\np=abs(p)/dot(p,p)-formuparam;\n            p.xy*=rot(iTime*0.01);\na+=abs(length(p)-pa); // absolute sum of average change\npa=length(p);\n}\nfloat dm=max(0.,darkmatter-a*a*.001); //dark matter\na*=a*a; // add contrast\nif (r>6) fade*=1.3-dm; // dark matter, don't render near\n//v+=vec3(dm,dm*.5,0.);\nv+=fade;\nv+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\nfade*=distfading; // distance fading\ns+=stepsize;\n}\nv=mix(vec3(length(v)),v,saturation); //color adjust\nfragColor = vec4(v*.03,1.);\n}\n#define time iTime\n#define resolution iResolution.xy\n#define NUM_LAYERS 8.\n#define TAU 6.28318\n#define PI 3.141592\n#define Velocity .025 //modified value to increse or decrease speed, negative value travel backwards\n#define StarGlow 0.01025\n#define StarSize 02.\n#define CanvasView 20.\n\n\nfloat Star(vec2 uv, float flare){\n    float d = length(uv);\n  float m = sin(StarGlow*5.2)/d;  \n    float rays = max(0., .5-abs(uv.x*uv.y*1000.));\n    m += (rays*flare)*2.;\n    m *= smoothstep(1., .1, d);\n    return m;\n}\n\nfloat Hash21(vec2 p){\n    p = fract(p*vec2(1203.34, 456.21));\n    p += dot(p, p+450.32);\n    return fract(p.x*p.y);\n}\n\n\nvec3 StarLayer(vec2 uv){\n    vec3 col = vec3(0);\n    vec2 gv = fract(uv);\n    vec2 id = floor(uv);\n    for(int y=-1;y<=1;y++){\n        for(int x=-1; x<=1; x++){\n            vec2 offs = vec2(x,y);\n            float n = Hash21(id+offs);\n            float size = (n);\n            float star = Star(gv-offs-vec2(n, fract(n*3.))+.5, smoothstep(.1,.9,size)*.46);\n            vec3 color = sin(vec3(.2,.3,.9)*fract(n*23.2)*TAU)*.25+.75;\n            color = color*vec3(.9,.59,.9+size);\n            star *= sin(iTime*.6+n*TAU)*.5+.5;\n            col += star*size*color;\n        }\n    }\n    return col;\n}\n#define pi 3.14159\n\n#define thc(a,b) tanh(a*cos(b))/tanh(a)\n#define ths(a,b) tanh(a*sin(b))/tanh(a)\n#define sabs(x) sqrt(x*x+1e-2)\n//#define sabs(x, k) sqrt(x*x+k)-0.1\n\nfloat cc(float a, float b) {\n    float f = thc(a, b);\n    return sign(f) * pow(abs(f), 0.25);\n}\n\nfloat cs(float a, float b) {\n    float f = ths(a, b);\n    return sign(f) * pow(abs(f), 0.25);\n}\n\nvec3 pal(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d) {\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat h21(vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nfloat mlength(vec2 uv) {\n    return max(abs(uv.x), abs(uv.y));\n}\n\nfloat mlength(vec3 uv) {\n    return max(max(abs(uv.x), abs(uv.y)), abs(uv.z));\n}\n\nfloat smin(float a, float b)\n{\n    float k = 0.12;\n    float h = clamp(0.5 + 0.5 * (b-a) / k, 0.0, 1.0);\n    return mix(b, a, h) - k * h * (1.0 - h);\n}\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nfloat sdEllipse( in vec2 p, in vec2 ab )\n{\n    p = abs(p); if( p.x > p.y ) {p=p.yx;ab=ab.yx;}\n    float l = ab.y*ab.y - ab.x*ab.x;\n    float m = ab.x*p.x/l;      float m2 = m*m;\n    float n = ab.y*p.y/l;      float n2 = n*n;\n    float c = (m2+n2-1.0)/3.0; float c3 = c*c*c;\n    float q = c3 + m2*n2*2.0;\n    float d = c3 + m2*n2;\n    float g = m + m*n2;\n    float co;\n    if( d<0.0 )\n    {\n        float h = acos(q/c3)/3.0;\n        float s = cos(h);\n        float t = sin(h)*sqrt(3.0);\n        float rx = sqrt( -c*(s + t + 2.0) + m2 );\n        float ry = sqrt( -c*(s - t + 2.0) + m2 );\n        co = (ry+sign(l)*rx+abs(g)/(rx*ry)- m)/2.0;\n    }\n    else\n    {\n        float h = 2.0*m*n*sqrt( d );\n        float s = sign(q+h)*pow(abs(q+h), 1.0/3.0);\n        float u = sign(q-h)*pow(abs(q-h), 1.0/3.0);\n        float rx = -s - u - c*4.0 + 2.0*m2;\n        float ry = (s - u)*sqrt(3.0);\n        float rm = sqrt( rx*rx + ry*ry );\n        co = (ry/sqrt(rm-rx)+2.0*g/rm-m)/2.0;\n    }\n    vec2 r = ab * vec2(co, sqrt(1.0-co*co));\n    return length(r-p) * sign(p.y-r.y);\n}\n\nfloat invs(float y) {\n    return 0.5 - sin(asin(1.0-2.0*y)/3.0);\n}\n\nfloat isBetween(float a, float b, float c) {\n    //float k = 3. / iResolution.y;\n    return smoothstep(-0.5, 0., -mod(c-a, 2. * pi) + mod(b-a - 0.1 * pi, 2. * pi));\n   //return exp( -1. * (abs(-mod(c-a, 2. * pi) + mod(b-a, 2. * pi))) );\n}\n\nfloat ellipse(vec2 uv, vec2 p, vec2 q, float i) {\n    float quadTest = 0.5 * (sign(q.x - p.x) * sign(q.y - p.y) + 1.);\n    i = 1.-quadTest;\n\n    // center point\n    vec2 c = (i == 1.) ? vec2(p.x, q.y)\n                       : vec2(q.x, p.y);\n\n    // axis distances between points\n    float x = abs(q.x - p.x), y = abs(q.y - p.y);\n\n    // ellipses (asymptotes when x==0 or y==0, annoying)\n    //float d = (i == 1.) ? length((uv - c) * vec2(y/x,1)) - y\n    //                    : length((uv - c) * vec2(1,x/y)) - x;\n\n    float d = sdEllipse(uv - c, vec2(x, y));\n\n    // (make this smoothstep or exp)\n    // float s = smoothstep(-0.02, 0.02, -abs(d) + 0.01);\n    float k = 1. / iResolution.y;\n    float s = smoothstep(-k, k, -abs(d) + 0.006);\n    s = exp(-100. * abs(d));\n    // a, b angles from center to points\n    // c angle from center to uv\n    float a1 = atan(p.x-c.x, p.y-c.y);\n    float a2 = atan(q.x-c.x, q.y-c.y); // move b from a-> b to \"draw\" thing\n    float b = atan(uv.x-c.x, uv.y-c.y);\n   \n    // flip clockwise <-> anticlockwise across diagonal quads\n    // float quadTest = 0.5 * (sign(q.x - p.x) * sign(q.y - p.y) + 1.);\n   \n    // cut out a1,a2 segment of ellipse\n    float as = isBetween(a1, a2, b);\n    return s;// * mix(as, 1. - as, quadTest);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n//get coords and direction\nvec2 uv=fragCoord.xy/iResolution.xy-.5;\nuv.y*=iResolution.y/iResolution.x;\nvec3 dir=vec3(uv*zoom,1.);\n\n\nfloat time2 = iTime*0.;\n\n    float s = 0.0, v = 0.0;\n;\n\n\n \n    uv *= 1.1 + 0.15 * cos(uv.y - 0.6 * iTime);\n    uv.y += 0.02 * cos(iTime);\n   \n    // points\n    vec2 p = 0.1 * vec2(cos(0.913 * iTime), sin(iTime));\n    vec2 q = 0.2 * vec2(cos(0.81 * iTime), sin(0.73 * iTime));\n\n    // should look bad if time gets too high\n    float t3 = 10. * iTime + 8. * h21(uv) + 15. *exp(-0.01 * length(uv)) * (650. + iTime);\n    int f = int(floor(t3));\n   \n    float d = 10.;\n    float s3 = 0.;\n    vec2 pp = vec2(0.);\n   \n    vec3 e = vec3(1);\n    vec3 col4 = vec3(0);\n    col4 += 0.03;\n    col4 += 0.35 * exp(-3. *length(uv));\n    float t33 = iTime*0.*Velocity;\n    vec3 col3 = vec3(0);  \n    for(float i=0.; i<1.; i+=1./100.){\n        float depth = fract(i+t3);\n        float scale = mix(CanvasView, .5, depth);\n        float fade = depth*smoothstep(1.,.9,depth);\n        col3 += StarLayer(uv*scale+i*453.2)*fade;}  \n   \n    float n = 20.;\n    for (float i = 0.; i <= n; i++) {\n        float f2 = 0.0001 * float(f);\n        float f3 = 0.0001 * float(f + 1);\n\n        vec2 qp = pp;\n             \n        pp = vec2( h21(vec2(f2)), h21(vec2(0.01 + f2)) );\n        pp = pow(4. * pp * (1.-pp), vec2(4));\n\n        vec2 pp2 = vec2( h21(vec2(f3)), h21(vec2(0.01 + f3)) );\n        float fr = fract(t3);\n        fr = smoothstep(0., 1., fr); //idk if this changes anything\n        pp = mix(pp, pp2, fr); // looks cool if you remove this too\n        pp = 0.3 * (pp - 0.5);\n        f++;\n        //if(i>0.) d = length(uv-pp);sdSegment(uv, pp, qp);\n        //s += exp(-40. * d);\n        float s2;\n        if (i > 0.) s2 = ellipse(uv, pp, qp, 0.);//mod(i, 2.));\n        s = clamp(s + s2, 0., 1.);\n     \n  ;\n    }\n\n\nfloat t = time2*0.0005;\nuv.x += sin(t) * .3;\nfloat si = sin(t*1.5); // ...Squiffy rotation matrix!\nfloat co = cos(t);\nuv *= mat2(co, si, -si, co);\nvec3 col = vec3(0.0);\nvec3 init = vec3(0.25, 0.25 + sin(time * 0.001) * .1, time * 0.0008);\nfor (int r = 0; r < 100; r++)\n{\nvec3 p = init + s * vec3(uv, 0.143);\np.z = mod(p.z, 2.0);\nfor (int i=0; i < 10; i++) p = abs(p * 2.04) / dot(p, p) - 0.75;\nv += length(p * p) * smoothstep(0.0, 0.5, 0.9 - s) * .002;\n// Get a purple and cyan effect by biasing the RGB in different ways...\ncol +=  vec3(v * 0.8, 1.1 - s * 0.5, .7 + v * 0.5) * v * 0.013;\ns += .01;\n}\nvec3 from=vec3(1.,.5,0.5);\nfloat t333 = -time2*.00;\nvec2 uv3 = gl_FragCoord.xy / resolution.xy-0.5;\nuv3.x *= resolution.x/resolution.y;\nuv3*= curvature* SIZE;\n\nfloat r = sqrt(dot(uv3,uv3)); // DISTANCE FROM CENTER, A.K.A CIRCLE\nfloat x = dot(normalize(uv3), vec2(.5,0.))+t3;\nfloat y = dot(normalize(uv3), vec2(.0,.5))+t3;\n \n        float val=0.0;\n        val = fbm(vec2(r+ y * ray_density, r+ x * ray_density)); // GENERATES THE FLARING\nval = smoothstep(gamma*.02-.1,ray_brightness+(gamma*0.02-.1)+.001,val);\nval = sqrt(val); // WE DON'T REALLY NEED SQRT HERE, CHANGE TO 15. * val FOR PERFORMANCE\n    vec4 o= fragColor;\n    vec2 u = fragCoord;\nvec2 v2 = iResolution.xy;\n         u = .2*(u+u-v2)/v2.y;    \n         \n    vec4 z = o = vec4(1,2,3,0);\n     \n    for (float a = .5, t2 = iTime, i;\n         ++i < 19.;\n         o += (1. + cos(z+t2))\n            / length((1.+i*dot(v2,v2))\n                   * sin(1.5*u/(.5-dot(u,u)) - 9.*u.yx + t2))\n         )  \n        v2 = cos(++t - 7.*u*pow(a += .03, i)) - 5.*u,                \n        u += tanh(40. * dot(u *= mat2(cos(i + .02*t2 - vec4(0,11,33,0)))\n                           ,u)\n                      * cos(1e2*u.yx + t2)) / 2e2\n           + .2 * a * u\n           + cos(4./exp(dot(o,o)/1e2) + t) / 3e2;\n             \n     o = 25.6 / (min(o, 13.) + 164. / o)\n       - dot(u, u) / 250.;\n   \n    float t5 = iTime*0.*Velocity;\n    vec3 col5 = vec3(0);  \n    for(float i=0.; i<1.; i+=1./NUM_LAYERS){\n        float depth = fract(i+t);\n        float scale = mix(CanvasView, .5, depth);\n        float fade = depth*smoothstep(1.,.9,depth);\n        col5 += StarLayer(uv*scale+i*453.2-iTime*0.)*fade;}\nvec3 col332 =  val/ vec3(red,green,blue);\ncol3 = 1.-col3;\n        float rad= 15. ;\ncol3 = mix(col3,vec3(1.), rad - 166.667 * r); // REMOVE THIS TO SEE THE FLARING\nvec4 cfinal =  mix(vec4(col ,1.0),vec4(col3,1.0),0.01);\n\nmainVR(fragColor, fragCoord, from, dir);\n    fragColor+=vec4(col*cfinal.xyz+col5*o.xyz*1.1,.1);\n  \n    float anim = sin(iTime * 12.0) * 0.1 + 1.0;  // anim between 0.9 - 1.1\n    fragColor*= vec4(happy_star(uv, anim) * vec3(0.35,0.2,1.55), 1.0);\n \n}\n\n\n","name":"Image","description":"","type":"image"}]}