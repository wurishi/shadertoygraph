{"ver":"0.1","info":{"id":"ml3cDj","date":"1699781395","viewed":281,"name":"Laplacian warped flow noise","username":"Sergio_2357","description":"Laplacian warped flow noise inspired by nimitz's Dynamism (https://www.shadertoy.com/view/MtKSWW) and iq's warped fbm noise idea (https://www.shadertoy.com/view/lsl3RH).","likes":18,"published":1,"flags":32,"usePreview":0,"tags":["procedural","noise","fbm","gradient","laplacian","divergence"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// div(normalize(grad(noise)) idea from nimitz https://www.shadertoy.com/view/MtKSWW\n// fbm(p+fbm(p)) (warped noise) idea from iq https://www.shadertoy.com/view/lsl3RH\n// plus flownoise in the fbm\n\nfloat divergence(vec2 uv) {\n\n    vec2 tx = 1. / iResolution.xy;\n\n    vec4 uv_n =  (texture(iChannel0, uv + vec2(0.0, tx.y))-0.5)*2.0;\n    vec4 uv_e =  (texture(iChannel0, uv + vec2(tx.x, 0.0))-0.5)*2.0;\n    vec4 uv_s =  (texture(iChannel0, uv + vec2(0.0, -tx.y))-0.5)*2.0;\n    vec4 uv_w =  (texture(iChannel0, uv + vec2(-tx.x, 0.0))-0.5)*2.0;\n\n   \tfloat div = uv_s.y - uv_n.y - uv_e.x + uv_w.x;\n\n    return div;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    float v = divergence(uv);\n    \n    vec3 col = (0.5 + 0.5*cos(6.*v*uv.xyx+vec3(0,2,4)));\n    \n    fragColor = vec4(vec3(v)*col, 1.0);\n    \n    if (fragCoord.x+2. >= iResolution.x || fragCoord.y+2. >= iResolution.y) {\n        fragColor = vec4(vec3(0.0), 1.0);\n    }\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\nfloat lerp(float a, float b, float f) {\n    return (1.0-f)*a + f*b;\n}\n\n\nconst float ROTATION_SPEED = 0.7;\nvec2 getGradient(vec2 p) {\n    float deg = random(p)*8. + iTime*ROTATION_SPEED*(random(p)*.5+.5);\n    vec2 grd = vec2(cos(deg), sin(deg));\n    return grd;\n}\n\nfloat gradientNoise(vec2 ps) {\n    vec2 pi = floor(ps);\n    vec2 pf = fract(ps);\n    \n    vec2 u = pf * pf * (3.0 - 2.0 * pf);\n    //vec2 u = pf;\n    \n    vec2 llp = pi;\n    vec2 llv = getGradient(llp);\n    vec2 hlp = pi + vec2(0.0, 1.0);\n    vec2 hlv = getGradient(hlp);\n    vec2 lrp = pi + vec2(1.0, 0.0);\n    vec2 lrv = getGradient(lrp);\n    vec2 hrp = pi + vec2(1.0, 1.0);\n    vec2 hrv = getGradient(hrp);\n    \n    float ll = dot(llv, (ps-llp));\n    float lr = dot(lrv, (ps-lrp));\n    float hl = dot(hlv, (ps-hlp));\n    float hr = dot(hrv, (ps-hrp));\n    \n    float l = lerp(ll, lr, u.x);\n    float h = lerp(hl, hr, u.x);\n    \n    float v = lerp(l, h, u.y);\n    \n    \n    v = v*0.5+0.5;\n    return v;\n}\n\n\nfloat fbm(vec2 ps) {\n    vec2 p = ps;\n    float v = 0.0;\n    float s = .7;\n    for (int i = 0; i < 17; i++) {\n        v += gradientNoise(p) * s;\n        s *= 0.33;\n        p *= 2.0;\n    }\n    return v;\n}\n\nvec2 v2fbm(vec2 ps) {\n    float x = fbm(ps);\n    float y = fbm(ps+vec2(5.0, 4.0));\n    return vec2(x, y)*0.4;\n}\n\nfloat warpedFBM(vec2 ps) {\n    return fbm(ps+v2fbm(ps+v2fbm(ps)));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.y;\n    \n    uv *= 1.;\n    \n    vec3 col = vec3(warpedFBM(uv));\n    \n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"vec2 gradient(vec2 uv) {\n    \n    vec2 pxuv = vec2(1.,1.) / iResolution.xy;\n    \n    float c = texture(iChannel0, uv).x;\n    float r = texture(iChannel0, uv+vec2(pxuv.x, 0.0)).x;\n    float u = texture(iChannel0, uv+vec2(0.0, pxuv.y)).x;\n    \n    vec2 grd = vec2(0.0, 0.0);\n    \n    grd.x = r-c;\n    grd.y = u-c;\n    \n    grd = normalize(grd);\n    \n    return grd;\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec2 grd = gradient(uv)*0.5+0.5;\n    \n    fragColor = vec4(grd, 1.0, 1.0);\n}","name":"Buffer B","description":"","type":"buffer"}]}