{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"buffer","id":"4dXGR8","filepath":"/media/previz/buffer00.png","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"code":"#define PI 3.14159265359\n\nvoid mainImage( out vec4 r, in vec2 p ) {\n    float y = buf(p).r;\n    vec2 grad = vec2(buf(p+E).r - buf(p+W).r, buf(p+N).r - buf(p+S).r);\n    r = vec4(0.34, 0.52, 0.29, 1);\n    r = mix(r, vec4(0.88, 0.85, 0.63, 1), smoothstep(0.500, 0.625, y));\n\tr = mix(r, vec4(0.93, 0.72, 0.40, 1), smoothstep(0.625, 0.750, y));\n\tr = mix(r, vec4(0.70, 0.60, 0.53, 1), smoothstep(0.750, 0.875, y));\n\tr = mix(r, vec4(1,1,1,1), smoothstep(0.875, 1., y));\n    r.rgb *= 0.75 + 0.25 * cos(atan(grad.y, grad.x) + 0.25*PI);\n    if (y < 0.5) r = mix(r, vec4(0.73, 0.80, 0.97, 1), 0.5);\n}\n","name":"Image","description":"","type":"image"},{"outputs":[],"inputs":[],"code":"#define buf(p) texture(iChannel0,(p)/iResolution.xy)\n\n#define N  vec2( 0, 1)\n#define NE vec2( 1, 1)\n#define E  vec2( 1, 0)\n#define SE vec2( 1,-1)\n#define S  vec2( 0,-1)\n#define SW vec2(-1,-1)\n#define W  vec2(-1, 0)\n#define NW vec2(-1, 1)\n\n\n/// from https://www.shadertoy.com/view/4tdSWr\n\nvec2 hash( vec2 p ) {\n\tp = vec2(dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)));\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise( in vec2 p ) {\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\tvec2 i = floor(p + (p.x+p.y)*K1);\t\n    vec2 a = p - i + (i.x+i.y)*K2;\n    vec2 o = (a.x>a.y) ? vec2(1.0,0.0) : vec2(0.0,1.0); //vec2 of = 0.5 + 0.5*vec2(sign(a.x-a.y), sign(a.y-a.x));\n    vec2 b = a - o + K2;\n\tvec2 c = a - 1.0 + 2.0*K2;\n    vec3 h = max(0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\tvec3 n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n    return dot(n, vec3(70.0));\t\n}\n\nconst mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\nfloat fbm(vec2 n) {\n\tfloat total = 0.0, amplitude = 0.1;\n\tfor (int i = 0; i < 7; i++) {\n\t\ttotal += noise(n) * amplitude;\n\t\tn = m * n;\n\t\tamplitude *= 0.4;\n\t}\n\treturn total;\n}\n\n///\n","name":"Common","description":"","type":"common"},{"outputs":[{"channel":0,"id":"4dXGR8"}],"inputs":[{"channel":0,"type":"buffer","id":"4dXGR8","filepath":"/media/previz/buffer00.png","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"code":"// 2018 David A Roberts <https://davidar.io>\n\nfloat slope(vec2 p, vec2 q) {\n    return (buf(q).r - buf(p).r) / distance(p,q);\n}\n\nvec2 rec(vec2 p) { // direction of water flow at point\n    vec2 d = N;\n    if (slope(p + NE, p) > slope(p + d, p)) d = NE;\n    if (slope(p + E,  p) > slope(p + d, p)) d = E;\n    if (slope(p + SE, p) > slope(p + d, p)) d = SE;\n    if (slope(p + S,  p) > slope(p + d, p)) d = S;\n    if (slope(p + SW, p) > slope(p + d, p)) d = SW;\n    if (slope(p + W,  p) > slope(p + d, p)) d = W;\n    if (slope(p + NW, p) > slope(p + d, p)) d = NW;\n    return d;\n}\n\nbool eq(vec2 p, vec2 q) {\n    return distance(p,q) < 1e-3;\n}\n\nvoid mainImage( out vec4 r, in vec2 p ) {\n    if (iFrame < 10 || iMouse.z > 0.) {\n        r.r = clamp(5. * fbm(3. * p / iResolution.xy) + 0.5, 0., 1.);\n        return;\n    }\n    r = buf(p);\n    \n    // flow accumulation\n    r.g = 1.;\n    if (eq(rec(p + N),  -N))  r.g += buf(p + N).g;\n    if (eq(rec(p + NE), -NE)) r.g += buf(p + NE).g;\n    if (eq(rec(p + E),  -E))  r.g += buf(p + E).g;\n    if (eq(rec(p + SE), -SE)) r.g += buf(p + SE).g;\n    if (eq(rec(p + S),  -S))  r.g += buf(p + S).g;\n    if (eq(rec(p + SW), -SW)) r.g += buf(p + SW).g;\n    if (eq(rec(p + W),  -W))  r.g += buf(p + W).g;\n    if (eq(rec(p + NW), -NW)) r.g += buf(p + NW).g;\n    \n    // stream power\n    vec4 receiver = buf(p + rec(p));\n    float pslope = (r.r - receiver.r) / length(rec(p));\n    r.r = max(r.r - 0.05 * pow(r.g, 0.8) * pow(pslope, 2.), receiver.r);\n    \n    // tectonic uplift\n    r.r += 0.0004 * p.x/iResolution.x;\n}\n","name":"Buffer A","description":"","type":"buffer"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":true,"mFlagMusicStream":false},"info":{"id":"XsVBRm","date":"1528203619","viewed":35290,"name":"Hydraulic Erosion","username":"davidar","description":"Landscape evolution model (fluvial incision and tectonic uplift) using the stream power law, loosely based on [url]https://arxiv.org/abs/1803.02977[/url]\n\nYou need to let it run for a few minutes for the rivers to grow.","likes":42,"published":3,"flags":32,"usePreview":0,"tags":["terrain","landscape","erosion"],"hasliked":0,"parentid":"","parentname":""}}