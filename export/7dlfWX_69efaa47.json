{"ver":"0.1","info":{"id":"7dlfWX","date":"1645501844","viewed":202,"name":"c3rcles","username":"natnatnat","description":"circles","likes":14,"published":1,"flags":0,"usePreview":0,"tags":["circle","stars","neuron"],"hasliked":0,"parentid":"ssffWB","parentname":"circular neuron"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float PI = 3.14,\n     PHI = 1.61,\n     Rd0 = .5,\n      R0 = .45,\n      dR = .9,\n       n = 10.;\n\nfloat drawCircles(vec2 U, float Rd, float R, float R0, float a) {\n\n    float r = length(U), c = 0.;\n \n    for(float r,i = 0.; i++ < n; a += 2.*PI/n)\n        r = length(U - Rd * vec2( -sin(a), cos(a)) ),\n        c += exp(-abs(r - R0)/.008);\n\n    return c;\n}\n\nvoid mainImage( out vec4 O, vec2 u ) {\n    vec2 R = iResolution.xy, \n        U = ( 2. * u - R ) / R.y;   \n    O = vec4(0.);\n    for(float i=0.,p=1.; i++ < 10.; p*=PHI)\n        O += drawCircles(U, Rd0 * p, \n                             R0 * p, \n                          R0*dR * p, \n                         i * iTime/4.\n                         )\n        * vec4(1,1,1,0);\n    O = sin(iTime/2.) * (1. - O);\n}","name":"Image","description":"","type":"image"}]}