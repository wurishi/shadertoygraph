{"ver":"0.1","info":{"id":"mdyXzw","date":"1680854459","viewed":159,"name":"Spinning In Spring","username":"Crystalize","description":"Domain coloring, inside and out of a hyperbolic tessellation, sent to a grid using Moebius and complex power, then further transformed to look like a Jacobi DN plane, all set to spin using a timed Cayley transform. Lots of fun stuff! Happy spring! :D","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["spinning","spring","crystalize"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define P 8.\n#define Q 3.\n\n#define HTiters 100\n#define JGiters 5\n\n#define TWOPI 6.283185307179\n#define PI 3.141592653589\n#define SS2 0.707106781186\n#define S42 1.189207115002\n#define R vec2(1.,0.)\n#define I vec2(0.,1.)\n\n\nvec2 cmul(vec2 z, vec2 c) {\n    return vec2(z.x * c.x - z.y * c.y, z.x * c.y + z.y * c.x);\n}\n\nvec2 cdiv(vec2 z, vec2 c) {\n    float r = dot(c, c);\n    return vec2(z.x * c.x + z.y * c.y, z.y * c.x - z.x * c.y) / r;\n}\n\nvec2 cpow(vec2 z, vec2 p) {\n    float a = atan(z.y, z.x);\n    float lnr = 0.5 * log(dot(z,z));\n    float m = exp(p.x * lnr - p.y * a);\n    float angle = p.x * a + p.y * lnr + TWOPI;\n    return vec2(cos(angle), sin(angle)) * m;\n}\n\nvec2 conj(vec2 z) {\n    return vec2(z.x, -z.y);\n}\n\nvec2 hypershift(vec2 z, vec2 s) {\n    return cdiv(z + s, cmul(z,conj(s))+vec2(1.0,0.0));\n}\n\nvec2 mobius(vec2 z, vec2 a, vec2 b, vec2 c, vec2 d) {\n    return cdiv(cmul(a,z)+b,cmul(c,z)+d);\n}\n\nvec2 hypertile(vec2 z, float p, float q, int iterations) {\n    float spq = sin(PI/2. + PI/q);\n    float spp = sin(PI/p);\n    float pshift = (1./sqrt(spq*spq / (spp*spp) - 1.)) * (spq / spp - 1.);\n    vec2 rot = vec2(cos(TWOPI/p), sin(TWOPI/p));\n    for(int i = 0; i < iterations; i++) {\n        z = cmul(z, rot);\n        z = hypershift(z,vec2(pshift,0.0));\n        z.x = abs(z.x);\n        z = hypershift(z,vec2(-pshift,0.0));\n    }\n    return z;\n}\n\nvec2 juliaGrid(vec2 z, int iterations) {\n    for(int i = 0; i < iterations; i++) {\n        z = cmul(z, vec2(SS2,SS2));\n        z = cpow(z, R*2.);\n        z = mobius(z,R,R,-R,R);\n    }\n    return z;\n}\n\nvec2 cn2dn(vec2 z) {\n    z = cmul(z, vec2(-SS2,SS2)*S42);\n    z = cpow(z, R*2.);\n    z += I;\n    return mobius(z,R,R,-R,R);\n}\n\nfloat l(float r) {\n    return 2.0 / PI * atan(r);\n}\n\n\nfloat hue2rgb(float p, float q, float t) {\n    do{\n      if(t < 0.0) t += 1.0;\n      if(t > 1.0) t -= 1.0;\n    } while (t < 0.0 || t > 1.0);\n\n  if(t < 1.0 / 6.0) return p + (q - p) * 6.0 * t;\n  if(t < 1.0 / 2.0) return q;\n  if(t < 2.0 / 3.0) return p + (q - p) * (2.0 / 3.0 - t) * 6.0;\n  return p;\n}\n\nvec3 hslToRgb(float h, float s, float l) {\n  float r, g, b;\n\n  if(s == 0.0) {\n    r = g = b = l; // achromatic\n  } else {\n    float q = l < 0.5 ? l * (1.0 + s) : l + s - l * s;\n    float p = 2.0 * l - q;\n\n    r = hue2rgb(p, q, h + 1.0 / 3.0);\n    g = hue2rgb(p, q, h);\n    b = hue2rgb(p, q, h - 1.0 / 3.0);\n  }\n\n  return vec3(r,g,b);\n}\n\nvec3 domainColoring(vec2 z, float symmetry) {\n    float H = mod(atan(z.y/z.x),0.25)+0.1 - TWOPI / symmetry;\n    float S = 1.0;\n    float L = l(length(z));\n    return hslToRgb(H,S,L);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = 2.0 * (fragCoord.xy - 0.5*iResolution.xy) / -iResolution.y;\n    float time = iTime * 0.25;\n\n    uv = mobius(uv, R, R * tan(time), -R * tan(time), R);\n\n    uv = juliaGrid(cn2dn(uv), JGiters);\n\n    vec3 col = dot(uv,uv) < 1. ? domainColoring(hypertile(uv, P, Q, HTiters)*2.5, P) : domainColoring(cdiv(R,uv), P);\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}