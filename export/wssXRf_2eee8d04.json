{"ver":"0.1","info":{"id":"wssXRf","date":"1556209726","viewed":189,"name":"Gak tunnel","username":"Gaktan","description":"Yet another tunnel, but this one has fake holes, fake light and fake AO in it.\n\nAlso, if anyone knows how to remove that aliasing in the distance, I would like to know!","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["tunnel","holes"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415927\n#define AO_MUL (1.8)\n#define FOG_MUL (1.9)\n\nfloat BoxDist(vec2 uv)\n{\n    return max(abs(uv.x), abs(uv.y));\n}\n\nvec2 Rot(in vec2 uv, in float angle)\n{\n    float s = sin(angle);\n    float c = cos(angle);\n    mat2 rot_mat = mat2(c, -s, s, c);\n    \n    return rot_mat * uv;\n}\n\nvoid Hole(in vec2 uv, in float dist, out float holeDist, out float holeStep)\n{\n    holeDist = length(fract(uv) * 2.0 - 1.0);\n    holeStep = smoothstep(0.35, 0.37, holeDist);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n   \tuv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n\n    uv = Rot(uv, iTime * 0.3);\n\n    float dist = length(uv);\n    float box = BoxDist(uv);\n\n    // Adds twirl\n#if 0\n    vec2 old = uv + vec2(0.0, 0.0);\n\tfloat T = dist;\n    \n    uv -= old*T;\n    float _a = sin(iTime * 0.9) * 0.8 / sqrt(T);\n    uv = rot(uv, _a);\n    uv += old*T;\n\n    dist = length(uv);\n    box = BoxDist(uv);\n#endif\n    \n    float t = cos(iTime+PI)*0.5+0.5;\n    box = mix(box, dist, t * 5.0);\n\n    // AO\n    float ao = 1.0;\n    {\n        ao = abs(box-dist) * AO_MUL;\n    \n        // Terribly fake but gives decent results\n        float ao2 = 1.0 - (0.4 + ao * 1.1);\n\n        ao = mix(ao, 0.0, t * 3.0);\n        ao = mix(ao, ao2, t);\n        ao = 1.0 - clamp(ao, 0.0, 1.0);\n    }\n    \n    float fog = clamp(sqrt(box) * FOG_MUL, 0.0, 1.0);\n    fog =  mix(fog, 0.0, 1.0 / (1.0 + box*10.0));\n\n    float angle = atan(uv.x, uv.y) + (PI * 0.25);\n    vec2 coord = vec2((1.0 / box) + iTime, angle / PI * 2.0);\n   \n#if 0\n    vec3 col = texture(iChannel0, coord).rgb;\n#else\n    float angle2 = abs(angle - (PI * 0.25));\n    vec2 coord2 = vec2(coord.x, angle2 / PI * 2.0);\n    vec3 col = textureGrad(iChannel0, coord, dFdx(coord2), dFdy(coord2)).rgb;\n#endif\n    \n    // Sky\n    vec3 sky = vec3(0.02, 0.06, 0.08);\n    {\n        vec2 spaceCoord = uv / (dist * 1.8) + vec2(iTime * 0.05, iTime * 0.1);\n        float s = texture(iChannel1, spaceCoord).r;\n        float ss = s*s;\n        sky = mix(sky, vec3(2.4, 2.3, 2.8), ss*ss);\n    }\n    \n    // Holes + Light\n    {\n\t\tfloat hDist, hStep;\n        Hole(coord, box, hDist, hStep);\n                \n        // Light\n        col *= 1.5 - (0.5 * sqrt(hDist));\n        \n        // Fake edge\n        {\n            // Create an other hole with a slight offset\n            vec2 coord2 = coord + vec2(0.1 / sqrt(dist), 0.0);\n            float hDist2, hStep2;\n            Hole(coord2, box, hDist2, hStep2);\n\n            float s = smoothstep(0.0, 1.0, (hStep2-hStep));\n           \thStep = mix(max(hStep, hStep2), hStep2, s);\n            \n           \tcol = mix(col, col * (0.2 / hDist2), s);\n        }\n        \n        col = mix(sky, col, hStep);\n    }\n\n    // Output to screen\n    fragColor = vec4(col * (ao * fog) * 1.2,1.0);\n    //fragColor = vec4(fog);\n    //fragColor = vec4(ao);\n    //fragColor = vec4(box);\n    //fragColor = vec4(sky, 0.0);\n}","name":"Image","description":"","type":"image"}]}