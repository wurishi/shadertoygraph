{"ver":"0.1","info":{"id":"3tl3RS","date":"1556726388","viewed":136,"name":"La Hire's line","username":"tpfto","description":"\"Just follow the bouncing ball...\"\n\nA point fixed on a circle rolling on another circle twice its size will trace a line, called La Hire's line, or the Tusi couple.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["2d","math","geometry"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2019 J. M.\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Demonstrate the La Hire line/Tusi couple (https://www.mathcurve.com/courbes2d.gb/lahire/lahire.shtml, http://mathworld.wolfram.com/TusiCouple.html)\n// traced by a point on a circle rolling on another circle twice its size.\n\n// dark and light colors from Solarized (https://ethanschoonover.com/solarized/)\n#define DARK vec3(0., 0.169, 0.212)\n#define GRAY vec3(0.396, 0.482, 0.514)\n\n// Solarized \"accent colors\"\n#define BLUE vec3(0.149, 0.545, 0.824)\n\n// XY range of the display.\n#define DISP_SCALE 2.2\n\n// Line thickness (in pixels).\n#define LINE_SIZE 2.0\n\n// utility function\n#define cis(a) vec2( cos(a), sin(a) )\n\n// graphics primitives\n\n#define drawPrimitive(p, c, d) d = mix(c, d, p)\n\nfloat SEGMENT(vec2 a, vec2 b, vec2 p) // a, b : endpoints\n{\n    vec2 pa = p - a, ba = b - a;\n    return smoothstep(0.0, (LINE_SIZE / iResolution.y * DISP_SCALE), length(pa - ba * clamp( dot(pa, ba)/dot(ba, ba), 0.0, 1.0 )));\n}\n\nfloat CIRCLE(vec2 c, float r, vec2 p) // center c and radius r\n{\n    return smoothstep(0.0, (LINE_SIZE / iResolution.y * DISP_SCALE), abs(length(p - c) - abs(r)));\n}\n\nfloat COMET(vec2 a, vec2 b, vec2 p)\n{\n    float ff = 15.0, gh = 1.0;\n    float sc = DISP_SCALE/iResolution.y;\n    vec2 pa = p - a, ba = b - a;\n    return smoothstep(-sc, sc, ff * sc * (distance(b, p) - 2.0 * gh * sc)) * smoothstep(-sc, sc, 2.0 * ff * sc * (distance(pa, ba * clamp( dot(pa, ba)/dot(ba, ba), 0.0, 1.0 )) - gh * sc));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 aspect = iResolution.xy / iResolution.y;\n\tvec2 uv = ( fragCoord.xy / iResolution.y ) - 0.5 * aspect;\n\tuv *= DISP_SCALE;\n\t\n    vec3 col = DARK;\n    \n    vec3 ccol = mix(DARK, GRAY, 0.5 * clamp(0.5 - 2.0 * cos(0.125 * iTime), 0.0, 1.0));\n    vec2 cp = 0.5 * cis(iTime), cm = 0.5 * cis(-iTime);\n    drawPrimitive(SEGMENT(vec2(-1.0, 0.0), vec2(1.0, 0.0), uv), ccol, col);\n    drawPrimitive(CIRCLE(vec2(0.0), 1.0, uv), ccol, col);\n    vec2 cw = mix(cp, cm, clamp(0.5 - 2.0 * cos(0.25 * iTime), 0.0, 1.0));\n    drawPrimitive(SEGMENT(cw, cp + cm, uv), ccol, col);\n    drawPrimitive(CIRCLE(cw, 0.5, uv), ccol, col);\n    drawPrimitive(COMET(0.5 * (cis(iTime - 0.06) + cis(0.06 - iTime)), cp + cm, uv), BLUE, col);\n\t\n\tfragColor = vec4( vec3(col), 1.0 );\n}","name":"Image","description":"","type":"image"}]}