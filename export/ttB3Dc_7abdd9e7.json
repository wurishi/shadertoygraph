{"ver":"0.1","info":{"id":"ttB3Dc","date":"1561353250","viewed":79,"name":"cool S","username":"MikazukiLaisa","description":"cool s!","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 rotate(float a){\n\tfloat c=cos(a), s=sin(a);\n    return mat2(c,s,-s,c);\n}\n\nfloat sdBox(vec3 p){\n    p.xz = p.xz * rotate(p.y*5.);\n\tvec3 d = abs(p) - .4;\n    return max(max(d.x,d.y),d.z);\n}\n\nfloat sdSphere(vec3 p){\n\t//return length(p) - .3 * sin(iTime) - .3;\n    return length(p) - .45;\n}\n\nfloat distanceFunction(vec3 p){\n    //p.xz = p.xz * rotate(iTime);\n\treturn max(sdBox(p), -sdSphere(p));\n}\n\nvec3 getNormal(vec3 p){\n\tvec2 delta = vec2(0.01, 0.);\n    return normalize(vec3(\n        distanceFunction(p-delta.xyy),\n        distanceFunction(p-delta.yxy),\n        distanceFunction(p-delta.yyx)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (fragCoord * 2. - iResolution.xy)/min(iResolution.x, iResolution.y);\n\n    vec3 camPos = vec3(0,0,-3.);\n    float screenZ = 5.;\n    vec3 rayDir = normalize(vec3(p, screenZ));\n\tvec3 col = vec3(0.);\n    vec3 lightPos = vec3(0,0.,5.);\n    vec3 lightDir = normalize(vec3(cos(iTime),0.,sin(iTime)));\n    //vec3 lightDir = vec3(-1,-1,1);\n    \n    float depth = 0.0;\n    for(int i=0; i<128;i++){\n        vec3 rayPos = camPos + rayDir * depth;\n        float dist = distanceFunction(rayPos);\n\t        \n        if(dist < 0.000001){\n            float diff = clamp(dot(lightDir, getNormal(rayPos)), 0.1, 1.);\n            col = vec3(1.,1.,.6) * diff;\n            break;\n        }\n        depth += dist;\n\n    }\n\n    fragColor = vec4(col,1.);\n}","name":"Image","description":"","type":"image"}]}