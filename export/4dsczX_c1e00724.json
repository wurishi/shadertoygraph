{"ver":"0.1","info":{"id":"4dsczX","date":"1489149658","viewed":110,"name":"Res01","username":"vooku","description":"Using barycentric coords to find point / triangle intersection","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["triangle","intersection","barycentric","point","cramer","cramers"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/**\n * Thanks to Christer Ericson â€“ Real-Time Collision Detection\n * Using barycentric coords and solving resulting equations with Cramer's rule\n */\nbool inTriangle(vec2 p, vec2 a, vec2 b, vec2 c) {\n    vec2 v0 = b - a;\n    vec2 v1 = c - a;\n    vec2 v2 = p - a;\n\t\n    \n    float d00 = dot(v0, v0);\n    float d01 = dot(v0, v1);\n    float d11 = dot(v1, v1);\n    float d20 = dot(v2, v0);\n    float d21 = dot(v2, v1);\n    \n    float denom = d00 * d11 - d01 * d01;\n    float v = (d20 * d11 - d21 * d01) / denom;\n    float w = (d00 * d21 - d01 * d20) / denom;\n        \n    \n    return (v >= 0.0 && w >= 0.0 && v + w < 1.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec2 a = vec2(-0.225 + 0.5, 0.309);\n    vec2 b = vec2(0.225 + 0.5, 0.309);\n    vec2 c = vec2(0.5, 1.0);\n    vec2 d = vec2(0.5, 0.0);\n    \n    \n\tfragColor += float(inTriangle(uv, a, b, c)) * vec4(1.0);\n    fragColor += float(inTriangle(uv, a, b, d)) * vec4(1.0);\n}","name":"Image","description":"","type":"image"}]}