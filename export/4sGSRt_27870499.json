{"ver":"0.1","info":{"id":"4sGSRt","date":"1465879630","viewed":1788,"name":"Falling Sand Accidental Effect","username":"gunnarclovis","description":"Absolutely 100% straight up stolen from SanchYESS\nhttps://www.shadertoy.com/view/4s2GRR\n\nI wanted to see if the fisheye would work on live video, and while that didn't work, I did accidentally discover this neat effect. Reminds me of Interstellar","likes":3,"published":3,"flags":2,"usePreview":1,"tags":["stolencode"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Absolutely 100% straight up stolen from SanchYESS\n// https://www.shadertoy.com/view/4s2GRR\n\n// Makes me think of either multicolored sand falling very quickly\n// Or something like that scene in Interstellar\n\n// I don't know\n// I just wanted to save it\n\n#define PI 3.141592653589793\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) //Drag mouse over rendering area\n{\n\tvec2 p = fragCoord.xy / iResolution.x; //normalized coords with some cheat\n\t                                                         //(assume 1:1 prop)\n\tfloat prop = iResolution.x / iResolution.y;//screen proroption\n\tvec2 m = vec2(0.5, 0.5 / prop);//center coords\n\tvec2 d = p - m;//vector from center to current fragment\n\tfloat r = sqrt(dot(d, d)); // distance of pixel from center\n\n\tfloat power = ( 2.0 * PI / (2.0 * sqrt(dot(m, m))) ) *\n\t\t\t\t(iMouse.x / iResolution.x - 0.5);//amount of effect\n\n\tfloat bind;//radius of 1:1 effect\n\tif (power > 0.0) bind = sqrt(dot(m, m));//stick to corners\n\telse {if (prop < 1.0) bind = m.x; else bind = m.y;}//stick to borders\n\n\t//Weird formulas\n\tvec2 uv;\n\tif (power > 0.0)//fisheye\n\t\tuv = m + normalize(d) * tan(r * power) * bind / tan( bind * power);\n\telse if (power < 0.0)//antifisheye\n\t\tuv = m + normalize(d) * atan(r * -power * 10.0) * bind / atan(-power * bind * 10.0);\n\telse uv = p;//no effect for power = 1.0\n\n\tvec3 col = texture(iChannel0, vec2(uv.x, -uv.y * prop)).xyz;//Second part of cheat\n\t                                                  //for round effect, not elliptical\n\tfragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}