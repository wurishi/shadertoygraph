{"ver":"0.1","info":{"id":"WdBcRz","date":"1585933850","viewed":266,"name":"Synthwave style","username":"Dijkstra","description":"I just wanted to learn how to use the texture channel.\n\nDon't know how to make the lines in the back less jumpy.","likes":11,"published":1,"flags":32,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    vec3 color;\n\tuv.x += clamp(sin(sin(iTime*.5+uv.y)),0.,.01);\n    color.r = texture(iChannel0, uv+vec2(0.001,0.)).r;\n    color.g = texture(iChannel0, uv+vec2(0.,0.)).g;\n    color.b = texture(iChannel0, uv+vec2(-0.001,0.)).b;\n    \n    \n    /*float i = sin(floor(sin((iTime*.5+uv.y)*10.)));\n   \tcolor = vec3(i);*/\n    \n    fragColor = vec4(color,1.0);\n}\n\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define MAX_ITERATIONS 200\n#define MAX_DISTANCE 80.\n#define EPSILON 0.0001\n\nvec3 glow;\nfloat VL(float p){\n\treturn (1./(length(p)*length(p)));\n}\n\nfloat ground(vec3 rp, float groundHigh){\n\treturn rp.y - groundHigh;\n}\n\nfloat lineZ(vec3 rp, vec2 lp, float size){\n\treturn distance(rp.xy, lp) - size;\n}\n\nfloat lineX(vec3 rp, vec2 lp, float size){\n\treturn distance(rp.yz, lp) - size;\n}\n\n// Scene function\nfloat getDistance(vec3 p){\n\tp.z+=iTime*5.;\n\tvec3 px = p;\n\tpx.x = mod(p.x,2.)-2./2.;\n\tvec3 pz = p;\n\tpz.z = mod(p.z,6.)-6./2.;\n\tfloat sd1 = lineZ(px, vec2(0., -4), .01);\n\tfloat sd2 = lineX(pz, vec2(-4., 0.), .01);\n\tfloat sd = min(sd1, sd2);\n\tglow+=VL(sd);\n\tsd = min(ground(p, -4.6), sd);\n\treturn sd;\n}\n\nfloat raymarch(vec3 ro, vec3 rd){\n\tvec3 rp = ro;\n\tfor(int i=0; i<MAX_ITERATIONS; ++i){\n\t\tfloat dist = getDistance(rp);\n\t\tif(dist <= .01){\n\t\t\treturn distance(rp, ro);\n\t\t}\n\t\trp += dist*rd;\n\t\tif(distance(rp, ro) > MAX_DISTANCE)\n\t\t\tbreak; \n\t}\n\treturn -1.;\n}\n\nfloat rand21(vec2 uv){\n \tuv = fract(uv*vec2(267.665, 393.725));\n \tuv += dot(uv, uv + 93.89872);\n \treturn fract(uv.x*uv.y);\n}\n\nfloat star(vec2 uv, vec2 id){\n\t\n\tfloat d = length(uv);\n\tfloat rand = rand21(id);\n\tfloat o = (.003/d) * rand;\n\tfloat r2 = id.x -id.y *id.x;\n\to += sin(r2+iTime)*.015;\n\to *= smoothstep(.4,.1,d);\n\treturn o;\n}\n\nfloat skyFullOfStars(vec2 uv){\n\tuv*= 10.;\n\tvec2 gv = fract(uv)-.5;\n\tvec2 id = floor(uv);\n\tfloat col = 0.;\n\tfor(int i=-1;i<=1;++i){\n\t\tfor(int j=-1;j<=1;++j){\n\t\t\tvec2 offset = vec2(i,j);\n\t\t\tfloat rand = rand21(id+offset);\n\t\t\tcol += star(gv-offset - vec2(rand-.5, fract(rand*10.)-.5), id+offset);\n\t\t}\n\t}\n\treturn col;\n}\n\n\nfloat building(vec2 uv, float width, float height){\n\tif (abs(uv.x) < width && abs(uv.y) < height){\n\t\treturn 1.;\n\t}\n\treturn 0.;\n}\n\nvec3 buildings(vec2 uv){\n\tfloat builds = building(uv-vec2(-.3,0.), .03,.07);\n\tbuilds += building(uv-vec2(.4,0.), .03,.07);\n\tbuilds += building(uv-vec2(.27,0.), .01,.078);\n\tbuilds += building(uv-vec2(.25,-.03), .01,.06);\n\tbuilds += building(uv-vec2(.22,-.04), .01,.03);\n\tbuilds += building(uv-vec2(.22,-.04), .025,.025);\n\tbuilds += building(uv-vec2(.17,0.), .01,.1);\n\tbuilds += building(uv-vec2(-.35,-0.03), .01,.03);\n\tbuilds += building(uv-vec2(-.245,-0.03), .02,.05);\n\tbuilds += building(uv-vec2(-.2,-0.03), .013,.08);\n\tbuilds += building(uv-vec2(-.19,-0.03), .013,.04);\n\tbuilds += building(uv-vec2(-.18,-0.05), .013,.02);\n\tbuilds += building(uv-vec2(-.15,-0.03), .013,.05);\n\tbuilds += building(uv-vec2(-.126,-0.03), .008,.097);\n\tbuilds += building(uv-vec2(.126,-0.03), .01,.12);\n\tbuilds += building(uv-vec2(.129,-0.03), .01,.08);\n\tbuilds += building(uv-vec2(.275,-0.03), .01,.08);\n\tbuilds += building(uv-vec2(.3,-0.03), .01,.03);\n\tbuilds += building(uv-vec2(.31,-0.05), .01,.02);\n\tbuilds += building(uv-vec2(.33,-0.07), .01,.02);\n\tbuilds += building(uv-vec2(.341,-0.03), .015,.06);\n\tbuilds += building(uv-vec2(.373,-0.03), .01,.07);\n\tbuilds += building(uv-vec2(.373,-0.03), .01,.07);\n\tbuilds += building(uv-vec2(.45,-0.05), .015,.03);\n\tbuilds += building(uv-vec2(-.38,-0.05), .013,.02);\n\tbuilds += building(uv-vec2(-.32,-0.05), .013,.08);\n\tbuilds += building(uv-vec2(-.32,-0.05), .015,.03);\n\tbuilds += building(uv-vec2(-.2,-0.05), .015,.03);\n\tbuilds += building(uv-vec2(-.22,-0.05), .015,.009);\n    \n\tif(builds > 0.){\n        float light = sin(uv.y*700.)+sin(uv.x*700.) - sin((uv.y+(floor(uv.x*8.)*7.))*100.);\n\t\treturn mix(vec3(.1,.05,.1),vec3(.15,.05,.2),light);\n\t}\n\treturn vec3(-1);\n}\n\nvec3 background(vec2 uv){\n    if(uv.y<-.05){\n     \treturn vec3(0.);   \n    }\n\tvec3 color = vec3(0.);\n\tcolor = mix(vec3(.3,.1,.6), vec3(0.), uv.y+.7); // blue sky\n    color += skyFullOfStars(uv);\n\n\tif(step(.65,1.-length(uv)) != 0.){\n\t\tcolor = mix(vec3(.94, .29, .26),vec3(.99, .63, .38), 1.-(uv.y)*6.);\n\t}\n\telse if(step(.45,1.-length(uv)) != 0.){\n\t\tfloat x = 1.35-length(uv);\n\t\tx = pow(x, 25.); \n\t\tcolor += x*vec3(.84,.16,.16);\n\t}\n\tvec3 b = buildings(uv);\n\tif (b.x != -1.){\n\t\tcolor = b;\n\t}\n\t\n\treturn color;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    glow = vec3(0.);\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    uv -= .5;\n    uv.x *= iResolution.x/iResolution.y;\n    vec3 color;\n    vec3 ro = vec3(0.,0.,-3.);\n    vec3 rd = normalize(vec3(uv,1.));\n\n    float d = raymarch(ro, rd);\n\n    if(d < 0.){\n    \tcolor = background(uv);\n    }\n    else{\n    \tcolor = glow*.0023*vec3(.2,.1,.4);\n    }\n    \n    color = mix(color, vec3(.1,.1,.1),1.-exp(-0.0007*d*d));\n    \n    //float i = sin(uv.y*600.)+sin(uv.x*600.) - sin((uv.y+(floor(uv.x*9.)*7.))*100.);\n    //color = vec3(i);\n    //color = background(uv);\n    fragColor = vec4(color,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}