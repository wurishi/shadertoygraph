{"ver":"0.1","info":{"id":"fsXGzB","date":"1616113524","viewed":226,"name":"Mandelbrot Set (all hues)","username":"adamjmurray","description":"Mandelbrot Set fractal (https://en.wikipedia.org/wiki/Mandelbrot_set) with full-spectrum coloration based on how quickly each pixel is determined to be outside the Mandelbrot Set.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractals"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float iterations = 50.0;\nvec2 offset = vec2(-0.5, 0);\nfloat zoom = 1.0;\n\nvec2 complexMultiply(vec2 a, vec2 b) {\n\treturn vec2(a.x*b.x - a.y*b.y, a.x*b.y + a.y*b.x);\n}\n\nvec3 hsl2rgb( in vec3 c ) { // Â© 2014 Inigo Quilez, MIT license, see https://www.shadertoy.com/view/lsS3Wc\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n    return c.z + c.y * (rgb-0.5)*(1.0-abs(2.0*c.z-1.0));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {   \n    vec2 coord = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    \n    vec2 z = vec2(0, 0);\n    vec2 c = coord/zoom + offset;\n\n    float i = 0.0;    \n    while (i < iterations) {\n        z = complexMultiply(z, z) + c;\n        if (length(z) > 2.0) break;\n        i++;\n    }\n  \n    if (i >= iterations) {\n        fragColor = vec4(0,0,0,1);\n    } else {\n        vec3 hsl = vec3(i/iterations, 0.5, 0.5);\n        fragColor = vec4(hsl2rgb(hsl), 1);\n    }\n}","name":"Image","description":"","type":"image"}]}