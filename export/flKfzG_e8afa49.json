{"ver":"0.1","info":{"id":"flKfzG","date":"1664746889","viewed":461,"name":"Integrated Particle Physics","username":"MysteryPancake","description":"First time using a buffer, had to try out a basic 2D physics simulation","likes":15,"published":3,"flags":32,"usePreview":0,"tags":["2d","sparks","physics","particle","integration","integrate"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Line SDF from Inigo Quilez\nfloat line(vec2 p, vec2 a, vec2 b) {\n\tvec2 ba = b - a;\n\tvec2 pa = p - a;\n\tfloat h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n\treturn length(pa - h * ba);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\n    fragColor = vec4(0.0);\n\n    for (float i = 0.0; i < NUM_PARTICLES; i++) {\n    \n        // Read position and velocity data from buffer\n        vec4 posVel = fetch(i);\n        \n        // Draw lines based on position and velocity of each particle\n        float trail = 4.0 / line(fragCoord, posVel.xy, posVel.xy + posVel.zw);\n        \n        // Make faster particles more yellow\n        fragColor = max(fragColor, vec4(trail, trail * length(posVel.zw) * 0.02, 0.0, 1.0));\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Position and velocity buffer\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  \n    float id = fragCoord.x - 0.5 + (fragCoord.y - 0.5) * iResolution.x;\n    \n    // Don't calculate unused particles\n    if (id > NUM_PARTICLES) discard;\n    \n    if (iFrame < 1) {\n    \n        // Initialize variables\n        float x = iResolution.x * fragCoord.x / NUM_PARTICLES;\n        float y = iResolution.y * 0.5 + sin(fragCoord.x) * iResolution.y * 0.4;\n        \n        // Store as position x, position y, velocity x, velocity y\n        fragColor = vec4(x, y, sin(fragCoord.x * 256.0) * 4.0, cos(fragCoord.x * 128.0) * 4.0);\n        \n    } else {\n        \n        // Read position and velocity data from previous frame\n        vec4 posVel = fetch(id);\n        vec2 pos = posVel.xy;\n        vec2 vel = posVel.zw;\n        \n        // Simulate gravity\n        vel.y -= 0.25;\n        \n        // Simulate wind\n        vel.x += sin(iTime) * 0.5;\n        \n        // Euler integration (I think)\n        pos += vel;\n        \n        // Dampen each particle differently, for variety\n        float dampening = 0.95 + sin(fragCoord.x * 64.0) * 0.05;\n        \n        // Bounce particles on floor\n        if (pos.y < 0.0) {\n            vel.y *= -dampening;\n            pos.y = max(-pos.y, 0.0);\n        }\n        \n        // Bounce particles on walls\n        if (pos.x < 0.0) {\n            vel.x *= -dampening;\n            pos.x = max(-pos.x, 0.0);\n        } else if (pos.x > iResolution.x) {\n            vel.x *= -dampening;\n            pos.x = iResolution.x + min(iResolution.x - pos.x, 0.0);\n        }\n        \n        // Combine components again\n        fragColor = vec4(pos, vel);\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"const float NUM_PARTICLES = 512.0;\n\n// To allow the entire buffer to be filled with particles\n#define fetch(id) texelFetch(iChannel0, ivec2(mod(id, iResolution.x), floor(id / iResolution.x)), 0)","name":"Common","description":"","type":"common"}]}