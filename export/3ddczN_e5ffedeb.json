{"ver":"0.1","info":{"id":"3ddczN","date":"1600548260","viewed":90,"name":"What is red?","username":"bitblast","description":"Do you know?","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["colors","abstract","calm"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nconst float FBM_ROT_ANGLE_RAD = 1.2;\nconst mat2 FBM_ROT = mat2(cos(FBM_ROT_ANGLE_RAD), -sin(FBM_ROT_ANGLE_RAD), sin(FBM_ROT_ANGLE_RAD), cos(FBM_ROT_ANGLE_RAD));\nfloat fbm(vec3 pos, float gain, uint octaves)\n{\n    float ret = 0., ampsum = 0., amp = 1.;\n    for(uint i = uint(0); i < octaves; ++i)\n    {\n        ret += amp * snoise2(pos.xy+sin(pos.z+pos.x+pos.y));\n        //ret += amp * snoise3(pos.xyz);\n        ampsum += amp;\n        amp *= gain;\n        pos.xy = 2.01 * FBM_ROT * pos.xy;\n        //shift *= gain;\n    }\n    return ret / ampsum;\n}\n\nfloat fbms(vec3 pos) {\n    return fbm(pos, 0.5, uint(5));\n}\n\nvec2 fbms2(vec3 pos) {\n    return vec2(fbms(pos), fbms(pos + vec3(1.3,4.7,0.)));\n}\n\nvec3 fbms2keepz(vec3 pos)\n{\n    return vec3(fbms2(pos), pos.z);\n}\n\nfloat myNoise(vec3 pos)\n{\n    return fbms(pos + fbms2keepz(pos + fbms2keepz(pos)))*.5+.5;\n}\n\n\nconst float ROT2_ANGLE = 1.5;\nconst mat2 ROT2 = mat2(cos(ROT2_ANGLE), -sin(ROT2_ANGLE), sin(ROT2_ANGLE), cos(ROT2_ANGLE));\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    \n    vec3 pos = vec3(1.5 * uv,0.015*iTime);\n    \n    vec3 noise = vec3(\n        myNoise(pos),\n        myNoise(pos+vec3(4.1,1.7,2.3)),\n        myNoise(pos+vec3(1.3,2.3,5.1)));\n    //noise = round(noise*3.)/3.;\n    \n    \n    vec3 hsv = vec3(0.999,.85,.54) + vec3(.03,.15,.06) * (2.*noise-1.);\n    hsv.x = fract(hsv.x);\n    hsv.yz = clamp(hsv.yz,0.,1.);\n\n    vec3 col = hsv2rgb(hsv);\n    //col = noise;\n    //col = vec3(myNoise(pos));\n\n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec3 permute3(vec3 x) { return mod(((x*34.0)+1.0)*x, 289.0); }\n\nfloat snoise2(vec2 v){\n  const vec4 C = vec4(0.211324865405187, 0.366025403784439,\n           -0.577350269189626, 0.024390243902439);\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n  vec2 i1;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n  i = mod(i, 289.0);\n  vec3 p = permute3( permute3( i.y + vec3(0.0, i1.y, 1.0 ))\n  + i.x + vec3(0.0, i1.x, 1.0 ));\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy),\n    dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\nvec3 hsv2rgb(vec3 c) {\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n\nvec4 permute4(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\n\nfloat snoise3(vec3 v){ \n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //  x0 = x0 - 0. + 0.0 * C \n  vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n  vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n  vec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n// Permutations\n  i = mod(i, 289.0 ); \n  vec4 p = permute4( permute4( permute4( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients\n// ( N*N points uniformly over a square, mapped onto an octahedron.)\n  float n_ = 1.0/7.0; // N=7\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z *ns.z);  //  mod(p,N*N)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n}","name":"Common","description":"","type":"common"}]}