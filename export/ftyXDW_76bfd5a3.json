{"ver":"0.1","info":{"id":"ftyXDW","date":"1640664205","viewed":200,"name":"Star burst (texture ver.)","username":"kaki","description":"original version : https://www.shadertoy.com/view/7lKSDz","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["2d","lens","flare"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Using texture for noise generation\n#define USE_TEX 1\n\n#define time iTime\n\nconst float PI = 3.1415925358;\n\nfloat safety_sin( in float x ) { return sin( mod( x, PI ) ); }\n\nfloat saturate( in float x ) { return clamp( x, 0., 1. ); }\n\nfloat rand( in vec2 p ) { return fract( safety_sin( dot(p, vec2( 12.9898, 78.233 ) ) ) * 43758.5453 ); }\nfloat rand( in vec2 p, in float t ) { return fract( safety_sin( dot(p, vec2( 12.9898, 78.233 ) ) ) * 43758.5453 + t ); }\n\nfloat noise( in vec2 x )\n{\n#if USE_TEX == 0\n\tvec2 i = floor( x );\n\tvec2 f = fract( x );\n\tvec4 h;\n\t// Smooth Interpolation\n\tf = f * f * ( f * -2.0 + 3.0 );\n\t// Four corners in 2D of a tile\n\th.x = rand( i + vec2( 0., 0. ) );\n\th.y = rand( i + vec2( 1., 0. ) );\n\th.z = rand( i + vec2( 0., 1. ) );\n\th.w = rand( i + vec2( 1., 1. ) );\n\t// Mix 4 coorners percentages\n\treturn mix( mix( h.x, h.y, f.x ), mix( h.z, h.w, f.x ), f.y );\n#else\n    float tex_size = 128.0;\n    float n = texture( iChannel0, x / tex_size ).x;\n    n = saturate( pow( n, 1.5 ) * 1.2 );// modified color\n    return n;\n#endif\n}\n\nfloat noise( in vec2 x, in float t )\n{\n#if USE_TEX == 0\n\tvec2 i = floor( x );\n\tvec2 f = fract( x );\n\tvec4 h;\n\t// Smooth Interpolation\n\tf = f * f * ( f * -2.0 + 3.0 );\n\t// Four corners in 2D of a tile\n\th.x = rand( i + vec2( 0., 0. ), t );\n\th.y = rand( i + vec2( 1., 0. ), t );\n\th.z = rand( i + vec2( 0., 1. ), t );\n\th.w = rand( i + vec2( 1., 1. ), t );\n\t// Mix 4 coorners percentages\n\treturn mix( mix( h.x, h.y, f.x ), mix( h.z, h.w, f.x ), f.y );\n#else\n    vec4 seed = vec4( 12.3456, 2.3456, 3.4567, 45.6789 );\n    vec2 t2 = mod( vec2( t ) * vec2( 0.05, 30.0 ), 2.0*PI );\n    t2.x = sin( t2.x );\n    float n0 = noise( x + seed.xy - t2.x );\n    float n1 = noise( x + seed.zw + t2.x );\n    float w  = sin( noise( x ) * 2.0*PI + t2.y ) * 0.5 + 0.5;\n    float n  = mix( n0, n1, w );\n    return n;\n#endif\n}\n\nfloat star_burst( in vec2 p, in vec2 center )\n{\n    float c0 = 0.5;\n    float c1 = 2.0;\n    float c2 = 12.0;\n    float c3 = 12.0;\n    float c4 = 2.0;\n    float c5 = 6.2;\n    float c6 = 4.0;\n    float c7 = 0.1;\n    float c8 = 6.2;\n\n#if 0// test-code\n    float t  = time * 0.35;\n#else// transition by position\n    float t  = dot( center, vec2( 0.25 ) );\n#endif\n    float l  = length( p );\n    float l2 = pow( l, c0 );\n    float n0 = noise( vec2( atan(  p.y,  p.x ) * c1, l2 ) * c2, t );\n    float n1 = noise( vec2( atan( -p.y, -p.x ) * c1, l2 ) * c2, t );\n    float n  = pow( max( n0, n1 ), c3 ) * pow( saturate( 1.0 - l * c4 ), c5 );\n    n += pow( saturate( 1.0 - ( l * c6 - c7 ) ), c8 );\n    return n;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 p = fragCoord / min( iResolution.x, iResolution.y );\n    \n    p -= 0.5; p.x -= 0.35;\n    p *= 0.5;\n    \n    vec2 center = vec2( cos( time * 0.5 ), sin( time * 0.5 ) ) * 0.2 * ( sin( time * 5. ) * 0.5 + 0.5 );\n    p += center;\n    \n\tfloat r = star_burst( p * 1.1, center );\n\tfloat g = star_burst( p, center );\n\tfloat b = star_burst( p * 0.9, center );\n\n    // Output to screen\n    vec3 col = pow( vec3( r, g, b ), vec3( 1.0 / 2.2 ) );\n    fragColor = vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"}]}