{"ver":"0.1","info":{"id":"3dVSWR","date":"1573777321","viewed":170,"name":"Donuts from outer space","username":"Jarazz","description":"recreation of ashurbanipalscabin's art","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["2ddistortion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define NOISINESS   .445\n#define HUEOFFSET   .53\n#define DONUTWIDTH .3\n//imported functions: \n//https://www.shadertoy.com/view/Msf3WH\nvec2 hash( vec2 p ) // replace this by something better\n{\n\tp = vec2( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)) );\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise( in vec2 p )\t//2D simplex\n{\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\n\tvec2  i = floor( p + (p.x+p.y)*K1 );\n    vec2  a = p - i + (i.x+i.y)*K2;\n    float m = step(a.y,a.x); \n    vec2  o = vec2(m,1.0-m);\n    vec2  b = a - o + K2;\n\tvec2  c = a - 1.0 + 2.0*K2;\n    vec3  h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\tvec3  n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n    return dot( n, vec3(70.0) );\n}  \n// Creative Commons Attribution-ShareAlike 4.0 International Public License\n// Created by David Hoskins.\n//  1 out, 1 in...\nfloat hash11(float p)\n{\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\n//helper functions:\nvec2 cartesian2polar(vec2 cartesian){\n\treturn vec2(atan(cartesian.x,cartesian.y),length(cartesian.xy));\n}\n\nvec2 polar2cartesian(vec2 polar){\n\treturn polar.y*vec2(cos(polar.x),sin(polar.x));\n}\n\n vec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvec3 rgb2hsv(vec3 rgb) {\n \tfloat Cmax = max(rgb.r, max(rgb.g, rgb.b));\n \tfloat Cmin = min(rgb.r, min(rgb.g, rgb.b));\n \tfloat delta = Cmax - Cmin;\n\n \tvec3 hsv = vec3(0., 0., Cmax);\n\n \tif (Cmax > Cmin) {\n \t\thsv.y = delta / Cmax;\n\n \t\tif (rgb.r == Cmax)\n \t\t\thsv.x = (rgb.g - rgb.b) / delta;\n \t\telse {\n \t\t\tif (rgb.g == Cmax)\n \t\t\t\thsv.x = 2. + (rgb.b - rgb.r) / delta;\n \t\t\telse\n \t\t\t\thsv.x = 4. + (rgb.r - rgb.g) / delta;\n \t\t}\n \t\thsv.x = fract(hsv.x / 6.);\n \t}\n \treturn hsv;\n }\n\nfloat sdTorus2D(float distToMid,float radius,  float thickness){\t//returns the distance to a torus, with the distance to the torus center, its radius and thiccness as inputs\nreturn abs(distToMid- radius)-thickness;\n}\n\nfloat donutFade(float distToMid,float radius,  float thickness){\t//returns in the domain [0,1] from the inner edge 0 to the outer edge 1 of the torus  \nreturn clamp( (distToMid-radius)/thickness+.5,0.,1.);\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n     uv*=3.; \t\t\t\t\t//zoom\n    \n    uv += noise(uv+(iTime+sin(iTime*.1)*10.+vec2(cos(iTime*.144),sin(iTime*.2)*14.))*.2)*NOISINESS;\t//map distortion+ movement\n  // uv/= 1.+  (iTime/2.)*2.;\n    vec2 uvPol = cartesian2polar(uv);\n    //vec3 col = 0.5 +.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    vec3 col = vec3(0.  );\n    \n    float colorAccumulation =  .5;\n    float result = sin(uv.y);\n \t\n     \n    float torus = donutFade(uvPol.y, fract(iTime/3. )*5. ,DONUTWIDTH);   //pulsating donut\n    float contribution =  min(smoothstep(torus ,1.,.95),smoothstep(torus , .0 ,.05) );\t//determine how much this area is affected by torus1\n    colorAccumulation += contribution ; \n    col +=  hsv2rgb(vec3(torus *1.3 +HUEOFFSET,1.,1.)) *contribution ;\n\n    \n     torus = donutFade(uvPol.y, .5,DONUTWIDTH); \n     contribution =  min(smoothstep(torus ,1.,.95),smoothstep(torus , .0 ,.05) );\t//determine how much this area is affected by torus1\n    colorAccumulation += contribution ; \n    col +=  hsv2rgb(vec3(torus *1.3 +HUEOFFSET,1.,1.)) *contribution ;\n\n    torus = donutFade(uvPol.y, 1.1, DONUTWIDTH); \n    contribution =  min(smoothstep(torus ,1.,.95),smoothstep(torus , .0 ,.05) );\t//determine how much this area is affected by torus1\n    colorAccumulation += contribution ; \n    col +=  hsv2rgb(vec3(torus *1.3 +HUEOFFSET,1.,1.)) *contribution ;\n\n    torus = donutFade(uvPol.y, 1.5, DONUTWIDTH); \n    contribution =  min(smoothstep(torus ,1.,.95),smoothstep(torus , .0 ,.05) );\t//determine how much this area is affected by torus1\n    colorAccumulation += contribution ; \n    col +=  hsv2rgb(vec3(torus *1.3 +HUEOFFSET,1.,1.)) *contribution ;\n\n    \n     //col /= colorAccumulation;\t\t//for making the background white, use this line and initialize col as .5\n     //col = vec3(contribution1,contribution1,contribution1) ;\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}