{"ver":"0.1","info":{"id":"4XV3Wh","date":"1717597096","viewed":38,"name":"UV 2D SDF Coords","username":"zschzen","description":"A simple splitscreen demostrating the UV coords transformations","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["uv","splitscreen"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec3 POSITIVE_BG = vec3(0.3843, 0.4471, 0.6431);\nconst vec3 NEGATIVE_BG = vec3(1.0, 0.3333, 0.3333);\nconst vec3 DISTANCE    = vec3(0.9450, 0.9803, 0.5490);\nconst vec3 BORDER      = vec3(0.9725, 0.9725, 0.9490);\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normaliza as coordenadas do fragmento\n    vec2 uv = (2.0 * fragCoord - iResolution.xy) / iResolution.x;\n    uv.x    = mod(uv.x, 1.0) - 0.5;\n\n    vec2 m = vec2(.0);\n    {\n        // Vetor de deslocamento baseado no tempo\n        vec2 disp = vec2(cos(iTime), sin(iTime)) / 4.0;\n\n        // Coordenadas do mouse ou vetor de deslocamento\n        m = (iMouse.z < 0.01)\n                    ? 0.2 + (disp + vec2(0.5, -0.5)) * vec2(sin(iTime) + 1.0, -cos(iTime) + 1.0) * 0.5 \n                    : (2.0 * iMouse.xy - iResolution.xy) / iResolution.x;\n        m.x    = mod(m.x, 1.0) - 0.5;\n\n        // Ajusta UV e m com o deslocamento\n        uv -= disp;\n        m  -= disp;\n    }\n\n    // Inicializa a cor de fundo\n    vec3 col = vec3(0.0);\n\n    if (fragCoord.x > iResolution.x * 0.5) {\n        // Lado direito\n        float d = sdBox(uv, vec2(0.1));\n        col = (d > 0.01) ? POSITIVE_BG : NEGATIVE_BG;\n        col *= 1.0 - exp(-50.0 * abs(d));\n        col *= 0.8 + 0.2 * cos(150.0 * d);\n        col = mix(col, BORDER, 1.0 - smoothstep(0.0, 0.01, abs(d)));\n\n        d = sdBox(m, vec2(0.1));\n        float pm = length(uv - m);\n        col = mix(col, DISTANCE, 1.0 - smoothstep(0.0, 0.01, abs(pm - abs(d)) - 0.0025));\n        col = mix(col, DISTANCE, 1.0 - smoothstep(0.0, 0.01, pm - 0.015));\n    } else {\n        // Lado esquerdo\n        col = vec3(uv.xy, 0.0);\n        vec3 invCol = 1.0 - col;\n\n        // Calcula valores de clamp\n        vec2 clampVal = 1.0 - step(abs(m - uv), vec2(1.0) / iResolution.y);\n        col = mix(invCol, col, clampVal.x * clampVal.y);\n    }\n\n    // Destaca o ponto mais prÃ³ximo no box\n    {\n        vec2 cl = cloBox(m, vec2(0.1));\n        col = mix(col, vec3(.55, .91, .99), 1.0 - smoothstep(0.0, 0.01, length(uv - cl) - 0.0125));\n    }\n\n    // Imprime coordenadas do mouse se estiver sobre\n    if (iMouse.z > 0.01)\n    {\n        col = PrintMouseCoord(col, fragCoord, iResolution.xy, iMouse.xy);\n    }\n\n    // Define a cor do fragmento\n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"mat2\nrot2D( float a )\n{\n    float s = sin( a );\n    float c = cos( a );\n\n    return mat2( c, -s, s, c );\n}\n\nfloat\nsdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs( p ) - b;\n    return length( max( d, 0.0 ) ) + min( max( d.x, d.y ), 0.0 );\n}\n\nvec2 cloBox( in vec2 p, in vec2 b )\n{\n    vec2   s = sign(p);\n    vec2   w = abs(p) - b;\n    float  g = max(w.x,w.y);\n    float  m = min(0.0,g);\n    return p - vec2(w.x>=m?w.x:0.0,w.y>=m?w.y:0.0)*s;\n}\n\nfloat DigitBin(const int x) {\n    if (x == 0) return 480599.0;\n    if (x == 1) return 139810.0;\n    if (x == 2) return 476951.0;\n    if (x == 3) return 476999.0;\n    if (x == 4) return 350020.0;\n    if (x == 5) return 464711.0;\n    if (x == 6) return 464727.0;\n    if (x == 7) return 476228.0;\n    if (x == 8) return 481111.0;\n    if (x == 9) return 481095.0;\n    return 0.0;\n}\n\nfloat PrintValue( vec2 vStringCoords, float fValue, float fMaxDigits, float fDecimalPlaces )\n{       \n    if ((vStringCoords.y < 0.0) || (vStringCoords.y >= 1.0)) return 0.0;\n    \n    bool bNeg = ( fValue < 0.0 );\n\tfValue = abs(fValue);\n    \n\tfloat fLog10Value = log2(abs(fValue)) / log2(10.0);\n\tfloat fBiggestIndex = max(floor(fLog10Value), 0.0);\n\tfloat fDigitIndex = fMaxDigits - floor(vStringCoords.x);\n\tfloat fCharBin = 0.0;\n\tif(fDigitIndex > (-fDecimalPlaces - 1.01)) {\n\t\tif(fDigitIndex > fBiggestIndex) {\n\t\t\tif((bNeg) && (fDigitIndex < (fBiggestIndex+1.5))) fCharBin = 1792.0;\n\t\t} else {\t\t\n\t\t\tif(fDigitIndex == -1.0) {\n\t\t\t\tif(fDecimalPlaces > 0.0) fCharBin = 2.0;\n\t\t\t} else {\n                float fReducedRangeValue = fValue;\n                if(fDigitIndex < 0.0) { fReducedRangeValue = fract( fValue ); fDigitIndex += 1.0; }\n\t\t\t\tfloat fDigitValue = (abs(fReducedRangeValue / (pow(10.0, fDigitIndex))));\n                fCharBin = DigitBin(int(floor(mod(fDigitValue, 10.0))));\n\t\t\t}\n        }\n\t}\n    return floor(mod((fCharBin / pow(2.0, floor(fract(vStringCoords.x) * 4.0) + (floor(vStringCoords.y * 5.0) * 4.0))), 2.0));\n}\n\nvec3 PrintCoord(vec3 vColour, float fValue, vec2 offset, vec2 fragCoord) {\n    vec2 vPixelCoord = offset;\n    vec2 vFontSize = vec2(8.0, 15.0);\n    float fDigits = 1.0;\n    float fDecimalPlaces = 0.0;\n    float fIsDigit = PrintValue((fragCoord - vPixelCoord) / vFontSize, fValue, fDigits, fDecimalPlaces);\n    vColour = mix(vColour, 1.0-vColour, fIsDigit);\n    return vColour;\n}\n\nvec3 PrintMouseCoord(vec3 vColour, vec2 fragCoord, vec2 iResolution, vec2 iMouse) {\n    vec2 vFontSize = vec2(8.0, 15.0);\n    vec2 vPixelCoord;\n    float fValue;\n    float fIsDigit;\n    float fDigits = 1.0;\n    float fDecimalPlaces = 3.0;\n\n    // Print Mouse X\n    vPixelCoord = iMouse + vec2(-52.0, 6.0);\n    fValue = iMouse.x / iResolution.x;\n    fValue = mod(fValue * 2., 1.0);\n    fIsDigit = PrintValue((fragCoord - vPixelCoord) / vFontSize, fValue, fDigits, fDecimalPlaces);\n    vColour = mix(vColour, 1.0 - vColour, fIsDigit);\n    \n    // Print Mouse Y\n    vPixelCoord = iMouse + vec2(0.0, 6.0);\n    fValue = iMouse.y / iResolution.y;\n    fIsDigit = PrintValue((fragCoord - vPixelCoord) / vFontSize, fValue, fDigits, fDecimalPlaces);\n    vColour = mix(vColour, 1.0 - vColour, fIsDigit);\n    \n    return vColour;\n}","name":"Common","description":"","type":"common"}]}