{"ver":"0.1","info":{"id":"wtdSRN","date":"1580564802","viewed":416,"name":"lullaby","username":"nabr","description":"bandcamp: [url]https://tolka-nabroski.bandcamp.com/album/lullaby[/url]","likes":13,"published":1,"flags":8,"usePreview":0,"tags":["wip","echo","waveshaping"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":3,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// -----------------------------------------------------\n// lullaby by nabr\n// https://www.shadertoy.com/view/wtdSRN\n// License Creative Commons Attribution-NonCommercial 4.0 International (CC BY-NC 4.0)\n// https://creativecommons.org/licenses/by-nc/4.0/\n// -----------------------------------------------------\n// -----------------------------------------------------\n// bandcamp:\n// name your price, type ZER0$ for free download\n// https://tolka-nabroski.bandcamp.com/album/lullaby\n// -----------------------------------------------------\n\n\n\n// https://www.shadertoy.com/view/MslGR8\n#define dither(_vP)(fract(vec3(dot(vec2(171,231),_vP))/vec3(103,71,97))/255.)\nfloat pt(vec2 u);\n\nvoid mainImage(out vec4 O, in vec2 U)\n{\n\tvec2 R = iResolution.xy;\n\tvec2 u = (U - .5 * R) / R.y;\n\tfloat c = 0.01, t = 6. * iTime, d = 20.;\n\tfloat l = (.5 - cos(17. * iTime + 3. * u.x));\n    if(abs(u.y)<.25)\n\tfor (int i = 64; i > 0; --i)\n\t{\n\t\tfloat fi = float(i),\n\t    z = mod( (fi - t) , d),\n\t    f = (d - 1.2 * z) / d;\n\t    vec2 s = vec2( sin( .501 * fi ) , dot( fract( sin( fi * fi) ) -.5,  1.202 ) ) ;\n\t    c += (f / d) / ( length(s * 500.123 / z  - 150.987 * u) / ( .5* fi) ) * f;\n\t}\n\n\t// -------- out\n\tO = vec4( vec3( dither( U ) + l * c * ( .0501187 + c) + .5 *vec3(pt(u))  ), 1);\n}\n//print text\nfloat pt(vec2 u)\n{\n\t#define char(_p,_C)(((_p.x<0.||_p.x>1.||_p.y<0.||_p.y>1.))?vec4(0,0,0,1e5):textureGrad(iChannel3,_p/16.+fract(vec2(_C,15-_C/16)/16.),dFdx(_p/16.),dFdy(_p/16.))).xyz\n\tint ch[]=int[](108, 117, 108, 108, 97, 98, 121,32,32,32,32,32,32,32,32,32//lullaby\n            ,40, 102, 111, 114, 32, 99, 97, 114, 108, 32, 115, 97, 103, 97, 110, 41);//sagan\n    vec2 tp0=vec2(u.x, .95*u.y),tp1=tp0;\n\tfloat p0, p1;\n    for(int i=0;i<(ch.length()/2);++i){\n        p0+=char(15.*vec2(tp0.x-.1,tp0.y-.025),ch[i]).x;\n        p1+=char(29.8*vec2(tp1.x-.16,tp1.y+.01),ch[i+16]).x;\n        tp0.x-=.052;\n        tp1.x-=.026;\n    }\n    p1*= smoothstep(1., 0., .2*iTime);\n    p0*= smoothstep(1., 0., .1*iTime);\n    return p0+p1; \n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// -----------------------------------------------------\n// lullaby by nabr\n// https://www.shadertoy.com/view/wtdSRN\n// License Creative Commons Attribution-NonCommercial 4.0 International (CC BY-NC 4.0)\n// https://creativecommons.org/licenses/by-nc/4.0/\n// -----------------------------------------------------\n// -----------------------------------------------------\n// bandcamp:\n// name your price, type ZER0$ for free download\n// https://tolka-nabroski.bandcamp.com/album/lullaby\n// -----------------------------------------------------\n\n\n\n#define PART 1 // 1|2\n\nfloat intfract(int s,float n);\n#define tau 6.2831853\n#define size(_a)_a.length()\n\nfloat synth(int rsamp)\n{\n    #if PART == 1\n    float ft =  (float(rsamp) / iSampleRate * .125);\n    // init\n    float s0=0., s1=0., sm=0.;\n    const float p[] = float[]( 337.5, 436.5, 384., 600., 0., 150., 216. );\n    \n    // main carrier \n    s0 += sin(tau * intfract(rsamp, iSampleRate / 450. ));\n    s0*= .2 * exp(-10. * (cos( ( 1.625 * ft - .141592  )  )*.5+.5) );\n    \n  \t// melody\n    float bt = (2. * ft);\n\ts1 += sin(tau * intfract(rsamp, iSampleRate / p[int( bt) % size(p)] ) );\n\tfloat s1a = min(sqrt(sqrt(1. - fract(bt))), 10. * fract(bt));\n\ts1a = s1a * s1a * s1a * s1a;\n\ts1 = s1a * s1;\n    \n    // wavesphaping\n    sm += .75 * (s0+s1);\n    float sma = min(sqrt(sqrt(1.-fract(-24.*ft))),10.*fract(-24.*ft));\n\tsma = sma * sma * sma * sma;\n\tsm = sma * sm;\n    sm = clamp(sm, -1., 1.);\n    \n  \t// -------- out\n    return sm;\n    \n    \n    // -------- PART II\n    #else\n    float dr = 0., adr = 0.;\n\tfloat ft = (float(rsamp)/iSampleRate * .125);\n\tint np = int(2. * ft) % 7;\n\tint dsamp = rsamp /2;\n\tfloat btdr = 4. * ft;\n\tfloat fd = mod(btdr, 1.);\n\tfloat a = min(sqrt(sqrt(1. - fd)), 100. * fd);\n\tfloat hz = float[]( 400., 0., 600., 350., 0., 595., 0.)[int(btdr) % 7];\n\t// -------- flageolettton\n\tif (np == 1 || np == 3 || np == 5)\n\t{\n\t\t\n        dr += sin(tau * intfract(dsamp, iSampleRate / hz ) );\n        adr += .5 - sin(tau * intfract(dsamp, iSampleRate / (.75*hz) ) );\n\t\tadr *= atan(1. - fd, 100. * fd);\n\t\tdr += sin(.125 - (adr - cos(adr + dr)));\n\t\tdr *= (a*a*a*a);\n\t\tdr *= atan(1. - fd);\n\t}\n\treturn dr;\n    \n    #endif\n}\n\nvec2 mSound(int samp)\n{\n    \n    #if PART == 1\n    float s0 = synth(samp);\n    float s1 = s0, s2 = s0;\n    // dry signal\n    vec2 ds = vec2(.67 * s0 , .62 * s0);\n    //delay/echos\n    int nt = 983;\n    int k[] = int[](80671,73907,86813,95279,87421,102859,78517,68581,83341,180811,174721,181717);\n    int nrs =size(k);\n    for(int ii=0;ii<nrs;++ii)\n    {\n    \ts1+=synth(nt+samp);\n        s2+=synth(2*nt+samp);\n        nt+=k[ii%nrs];// k[]/44100.\n    }\n    return  (1./float(nrs)) * vec2(s1 , s2) + ds;\n\n    \n    // -------- PART II\n    #else\n    float s0 = synth(samp);\n    float s1 = s0, s2 = s0;\n    // dry signal\n    vec2 ds = vec2(.67 * s0 , .62 * s0);\n    //delay/echos\n    int nt = 983;\n    int k[9] = int[9](80671, 73907, 86813, 95279, 87421, 102859, 78517, 68581, 83341);\n    int nrs =size(k);\n    int nt0 = 983 , nt1 = 1543 ;\n    for(int ii=nrs;ii>0;--ii)\n    {\n        nt0 += 2 * k[ii%nrs];\n        s1 += (synth(nt0 + samp));\n        nt1 += k[ii%nrs] ;\n        s2 += (synth(nt1 + samp));\n    }\n    return  .2 * vec2(s1 , s2);\n        \n    \n    #endif\n}\n\nfloat intfract(int s,float n)\n{\n    //Explanation and copyright : shadertoy.com/view/4ltfRN\n    int sn=int(n),a=s%sn,b=(s/sn);\n    const float MAXF=float(uint(-1))+1.;\n    return fract((float(a)/n)+float((uint(b)*uint(MAXF*float(sn)/n)))/MAXF);\n}\nvec2 mainSound( in int s,float time)\n{\n   // int block = int((iBlockOffset+0.5)*iSampleRate/(512.*512.));\n    // int s = 512*512*block + 512*int(gl_FragCoord.y) + int(gl_FragCoord.x);\n    return mSound(s);\n}","name":"Sound","description":"","type":"sound"}]}