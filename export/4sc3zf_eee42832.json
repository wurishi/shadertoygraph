{"ver":"0.1","info":{"id":"4sc3zf","date":"1451260297","viewed":557,"name":"Searching in the night","username":"pyrite","description":"I'm learning to use volumetric lighting. ","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["lighting","volumetric","ssaa"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"// Created by Austin Kootz - pyrite/2015\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Thanks to iq for his SSAA implementation\n\n// antialias level (try 1, 2, 3, ...)\n#define AA 1\n\nvec3 raymarch(in vec3 ro, in vec3 rd){\n    vec3 col = vec3(0.0);\n    float density = 0.025;\n    float stepsize = 0.05;\n    \n    for(int i = 0; i<500; i++){\n        vec3 voxelcolor = vec3(0);\n    \tro += rd*stepsize;\n       \t\n        if (dot(vec3(1,0,0),normalize(ro))>0.95) voxelcolor = density*vec3(1.0/(length(ro)));\n        if ((length(ro)<0.5)&&(dot(vec3(1,0,0),normalize(ro))>0.95)){\n            voxelcolor = vec3 (0.0);\n            col += voxelcolor;\n            break;\n        }\n    \tcol += voxelcolor;\n    //if (length(ro)<1.0) col = vec3 (1);\n    }\n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 tot = vec3(0.0);\n    \n    // camera\n    float an = 0.5*iTime - 5.0*iMouse.x/iResolution.x;\n    vec3  ro = vec3(6.0*sin(3.0*an),6.0*cos(an),6.0*cos(an));\n    vec3  ta = vec3(0.0,0.0,0.0);\n\n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    \n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {   \n        \n        vec3 p = vec3((-iResolution.xy + 2.0*(fragCoord.xy-0.5+(vec2(float(m),float(n))+0.5)/float(AA))) / iResolution.y,2.0);\n    \t\n        \n        // create view ray\n        vec3 rd = normalize( p.x*uu + p.y*vv + p.z*ww );\n        \n        //render scene\n        vec3 col = raymarch(ro,rd);\n        \n        //vignette\n        //col -= 0.2*length(p.xy);\n        \n        tot += col;\n    }\n    tot /= float(AA*AA);\n    fragColor = vec4( tot, 1.0 );\n}","name":"","description":"","type":"image"}]}