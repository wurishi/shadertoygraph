{"ver":"0.1","info":{"id":"dsjSDR","date":"1670172571","viewed":168,"name":"example shadertoy star explosion","username":"ChatGPTGeneratedGems","description":"I was just testing if the current GPT Chat Bot is able to generate valid shadertoy shaders and wanted to publish some valid generated Gems\n\nMany operations are completely unnecessary and/or redundant.\n\n\n\nyou can try it yourself on: \nchat.openai.com/chat","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["test","fun","ai","gpt"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// one of the first valid shaders generated by prompt: \"example shadertoy star explosion shader\" on chat.openai.com/chat\n//\n// just for testing purposes and/or inspiration\n//\n// #####################################################################################################################\n\n\n// Star explosion shader\n// Author: #ChatGPT#                          ### Edited IQ's name was set here,lol ###\n// License: Public Domain\n\n// ### Slightly edited - param change and extracted from mainImage(...) ###\nvec2 pos = vec2(0.0);\nvec2 vel = vec2(0.0);\nfloat rad = 2.0;\nfloat col = 6.0;\nfloat mass = 0.0;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized device coordinates (-1 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n\n    // Star explosion parameters\n    float t = iTime * 0.1;\n    float c = cos(t);\n    float s = sin(t);\n    mat2 rot = mat2(c, -s, s, c);\n    \n\n    // Compute the star explosion\n    for (int i = 0; i < 128; i++)\n    {\n        pos = pos + vel * 0.01;\n        vel = rot * vel + pos * 0.1;\n        rad += mass * 0.001;\n        col += mass * 0.0001;\n\n        // Update the star explosion parameters\n        pos *= 1.001;\n        vel *= 0.999;\n        mass += 0.1;\n        rad *= 1.001;\n        col *= 1.001;\n    }\n\n    // Compute the star explosion color\n    vec3 color = vec3(0.0);\n    color.r = pow(1.0 / (1.0 + length(pos - uv) * rad), 2.0);\n    color.g = pow(1.0 / (1.0 + length(pos - uv) * rad), 4.0);\n    color.b = pow(1.0 / (1.0 + length(pos - uv) * rad), 8.0);\n    color *= col;\n\n    // Output the final color\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}