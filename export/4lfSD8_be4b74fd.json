{"ver":"0.1","info":{"id":"4lfSD8","date":"1436151616","viewed":323,"name":"Tangent-Space Normal Mapper","username":"SuperHiggins","description":"Converts a texture into a tangent-space normal map. Click and drag the cursor on the frame to see the original texture at that location","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","texture","map","normal","generator"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"float intensity( vec3 pixel )\n{\n    float avg = (pixel.x + pixel.y + pixel.z) / 3.0;\n    \n    return avg;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float pstr = 2.0;\n    \n    float tstep = 1.0;\n    \n    float ux = tstep / iChannelResolution[0].x;\n    float uy = tstep / iChannelResolution[0].y;\n    //\n    \n    vec2 uv[9];\n    float itn[9];\n    \n    // 0 1 2\n    // 3 4 5\n    // 6 7 8\n    \n    uv[0] = vec2(-ux, -uy);\n    uv[1] = vec2(0, -uy);\n    uv[2] = vec2(ux, -uy);\n    \n    uv[3] = vec2(-ux, 0);\n  \tuv[4] = vec2(0, 0);\n    uv[5] = vec2(ux, 0);\n    \n    uv[6] = vec2(-ux, uy);\n    uv[7] = vec2(0, uy);\n    uv[8] = vec2(ux, uy);\n    \n    for(int i = 0; i < 9; i++)\n    {\n        uv[i] += fragCoord / iChannelResolution[0].xy;\n        uv[i].y = uv[i].y;\n        itn[i] = 1.0 - intensity(texture(iChannel0, uv[i]).xyz);\n    }\n    \n    //\n    \n    float nstep = 2.0;\n   \n    float nx = (itn[2] + (nstep * itn[5]) + itn[8]) - (itn[0] + (nstep * itn[3]) + itn[6]);\n    float ny = (itn[6] + (nstep * itn[7]) + itn[8]) - (itn[0] + (nstep * itn[1]) + itn[2]);\n    \n    float hx = (itn[2] + -0.25*itn[5] + itn[8]) - (itn[0] + -0.25*itn[3] + itn[6]);\n    float hy = (itn[6] + -0.25*itn[7] + itn[8]) - (itn[0] + -0.25*itn[1] + itn[2]);\n    \n    float dx = (hx + nx) / pstr;\n    float dy = (hy + ny) / pstr;\n    \n    float dz = 1.0 / pstr;\n    \n    float dstep = 0.25;\n    \n    vec2 mpos = iMouse.xy / iChannelResolution[0].xy;\n    \n    if(distance(uv[4].xy,mpos) > 0.1)\n    {\n    \tfragColor = normalize(vec4(dx+dstep, dy+dstep, dz, 0.0));\n    }\n    else\n    {\n     \tfragColor = texture(iChannel0, uv[4]);\n    }\n    \n    \n    //\n    \n}","name":"","description":"","type":"image"}]}