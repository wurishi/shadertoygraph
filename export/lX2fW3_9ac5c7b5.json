{"ver":"0.1","info":{"id":"lX2fW3","date":"1730044305","viewed":86,"name":"blobs + reaction + colors","username":"AndreCorrea","description":"reaction diffusion ","likes":1,"published":3,"flags":32,"usePreview":0,"tags":["diffusion","reaction"],"hasliked":0,"parentid":"M3BBWc","parentname":"Blobs + reaction diffusion"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat step1 = 2.0;\n\nfloat intensity(in vec4 color){\n\treturn sqrt((color.x*color.x)+(color.y*color.y)+(color.z*color.z));\n}\n\nvec3 sobel(float stepx, float stepy, vec2 center){\n    float tleft = intensity(texture(iChannel0,center + vec2(-stepx,stepy)));\n    float left = intensity(texture(iChannel0,center + vec2(-stepx,0)));\n    float bleft = intensity(texture(iChannel0,center + vec2(-stepx,-stepy)));\n    float top = intensity(texture(iChannel0,center + vec2(0,stepy)));\n    float bottom = intensity(texture(iChannel0,center + vec2(0,-stepy)));\n    float tright = intensity(texture(iChannel0,center + vec2(stepx,stepy)));\n    float right = intensity(texture(iChannel0,center + vec2(stepx,0)));\n    float bright = intensity(texture(iChannel0,center + vec2(stepx,-stepy)));\n    float x = tleft + 2.0*left + bleft - tright - 2.0*right - bright;\n    float y = -tleft - 2.0*top - tright + bleft + 2.0 * bottom + bright;\n    float color = sqrt((x*x) + (y*y));\n    return vec3(color,color,color);\n }\n \n \n\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\n    // red\n    vec3 p1 = vec3(250.0 / 255.0, 0.0 / 255.0, 60.0 / 255.0);\n    \n    // purple\n    \n    vec3 p2 = vec3(87.0 / 255.0, 67.0 / 255.0,  250.0 / 255.0);\n      \n    // yellow\n    vec3 p3 = vec3(255.0 / 255.0, 250.0 / 255.0, 0.0 / 255.0);\n\n\n\n\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n    vec4 state = texture(iChannel0, uv);\n\n    vec3 b = vec3(0.0);\n\n\n    vec3 lapCol = mix(b, p2, smoothstep(0.1, 1.0, state.g))*10.0;\n    \n\n  \n    vec3 sobelMask = sobel(step1 / iResolution.x, step1 / iResolution.y, uv);\n\n    \n    float t = iTime*0.05;\n    vec2 nuv = uv;\n    float n1 = noise(nuv+t);\n    float n2 = noise(nuv-t);\n    \n    float colNoise = (n1+n2)*5.0;\n    colNoise = smoothstep(0.0,1.0,colNoise);\n    vec3 sCol = mix(p1,p3,colNoise);\n    //sCol = p3;\n    \n    vec3 edgeColor = mix(vec3(0., 0., 0.), sCol, sobelMask);\n\n \n    vec3 finalColor = mix(lapCol, edgeColor, sobelMask.r);\n    \n    \n   //fragColor = vec4(colNoise);\n\n    fragColor = vec4(finalColor, 1.0);\n}\n\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xsf3Rn","filepath":"/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","previewfilepath":"/media/ap/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy/ iResolution.xy; \n    \n    vec2 st = texture(iChannel0,uv).xy; // REMEMBER TO SWAP TO CHANNEL0 LATER\n    \n    \n    \n    // inserting blob texture as input for the algorithm\n    vec4 blob = texture(iChannel2,uv);\n\n    \n    vec2 lap = laplacian(uv,iChannel0,iResolution.xy)*1.5; // REMEMBER TO SWAP TO CHANNEL 0 LATER\n    \n    \n    float uvv = st.x*st.y*st.y;\n    \n    float local_f = f+ 0.15*noise(st*5.0+iTime*0.5) + blob.r*0.1;\n    float local_rv = rv+0.15*noise(st*5.0+iTime*0.5)+ blob.r*0.1;\n    \n    // adding blob\n    st.x += 0.003*blob.r;\n \n    \n    st.x += ru*lap.x - uvv + local_f*(1.0-st.x);\n    st.y += local_rv * lap.y + uvv - (local_f + k) * st.y;\n    \n    \n    vec2 color = vec2(clamp(st, -1.0, 1.0));\n    \n    fragColor = vec4(color,lap);\n    \n    if(iFrame < 10 )\n    {\n    \n        vec4 color = texture(iChannel1,uv);\n        fragColor = color;\n    }\n\n\n    \n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"vec2 laplacian(vec2 uv, sampler2D channel, vec2 resolution)\n{\n    mat3 conv = mat3(.05, .2, .05, .2, -1, .2, .05, .2, .05);\n    vec2 res = vec2(0.0);\n    \n    for(int i = 0; i < 3; i += 1)\n    {\n        for(int j = 0; j < 3; j += 1)\n        {\n        \tvec2 offset = vec2(i - 1, j - 1) / resolution;\n        \tvec4 value = texture(channel, uv + offset);\n        \tres += value.xy * conv[i][j];\n        }\n    }\n    \n    return res;\n\n}\n\n\nfloat random(vec2 st)\n{\n    return fract(sin(dot(st.xy, vec2(12.9898,78.233))) * 43758.5453123);\n}\n\nvec2 random2(vec2 st){\n    st = vec2( dot(st,vec2(127.1,311.7)),\n              dot(st,vec2(269.5,183.3)) );\n    return -1.0 + 2.0*fract(sin(st)*43758.5453123);\n}\n\n\nfloat noise(vec2 st) { // gradient noise\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    vec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( dot( random2(i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ),\n                     dot( random2(i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),\n                mix( dot( random2(i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ),\n                     dot( random2(i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);\n}\n\nconst float ru = 1.0;           \nconst float rv = 0.438885;           \nconst float f = 0.048185717;          \nconst float k = 0.06186403;\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"\n\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy/ iResolution.xy; \n    \n    vec2 st = texture(iChannel0,uv).xy;\n    \n\n    \n    vec2 lap = laplacian(uv,iChannel0,iResolution.xy);\n    \n    \n    float uvv = st.x*st.y*st.y;\n\n    \n    st.x += ru*lap.x - uvv + f*(1.0-st.x);\n    st.y += rv * lap.y + uvv - (f + k) * st.y;\n    \n    \n    \n    vec2 color = vec2(clamp(st, -1.0, 1.0));\n    \n\n    fragColor = vec4(color,lap);\n    \n}\n","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"\n\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy/ iResolution.xy; \n    \n    vec2 st = texture(iChannel0,uv).xy;\n    \n\n    \n    vec2 lap = laplacian(uv,iChannel0,iResolution.xy);\n    \n    \n    float uvv = st.x*st.y*st.y;\n\n    \n    st.x += ru*lap.x - uvv + f*(1.0-st.x);\n    st.y += rv * lap.y + uvv - (f + k) * st.y;\n    \n    \n    \n    vec2 color = vec2(clamp(st, -1.0, 1.0));\n    \n\n    fragColor = vec4(color,lap);\n    \n}\n","name":"Buffer C","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"XdfGR8","channel":0}],"code":"float hash(float x) {\n    return fract(sin(x) * 43758.5453123);\n}\n\n\n\n\nfloat smoothClamp(float x, float a, float b)\n{\n    return smoothstep(0., 1., (x - a)/(b - a))*(b - a) + a;\n}\n\n\nvec2 compose(vec2 c, float t, float r)\n{\n    t = t/4.0;\n    float n1 = noise(c+t)+0.5;\n    float n2 = noise(c-t)+0.5;\n\n\n    n1 = smoothClamp(n1,0.0+r,1.0-r);\n    n2 = smoothClamp(n2,0.0+r,1.0-r);\n\n    return vec2(n1,n2);\n        \n}\n\n\nfloat smoothUnion(float d1, float d2, float k)\n{\n    float h = clamp(0.5 + 0.5 * (d2 - d1) / k, 0.0, 1.0);\n    return mix(d2, d1, h) - k * h * (1.0 - h);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    float result = 0.0;\n    vec2 uv = (fragCoord - iResolution.xy)/iResolution.y;\n    vec2 uv_f = fract(uv * 10.0);\n    vec2 uv_i = floor(uv * 10.0);\n\n    float i = 100.0;\n    float a_r = 0.0;\n    float r_cap = 0.5;\n    float mergedDistance = 1000.0; // Start with a large value (far from the point)\n\n    while(a_r < r_cap)\n    {\n        float unoise =  hash(float(i) + hash(length(uv_i))) * 100.0;\n\n\n        float rnoise = unoise;\n        float radius = rnoise * 0.0022;\n        a_r += radius;\n        \n        float k = 0.001;\n        float index = hash(float(i));\n    \n        vec2 center = uv + index * 10.0;\n\n        // Displace center\n        vec2 n_center = compose(center, iTime, radius);\n\n        // Compute distance from fragment to the current sphere\n        float distToSphere = length(uv_f - n_center) - radius;\n\n        // merge the spheres\n        mergedDistance = smoothUnion(mergedDistance, distToSphere, 0.065); \n\n        i += 1.0;\n    }\n\n    result = smoothstep(0.0, 0.001, mergedDistance);\n    result = 1.0 - result;\n\n    fragColor = vec4(result);\n}\n","name":"Buffer D","description":"","type":"buffer"}]}