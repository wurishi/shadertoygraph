{"ver":"0.1","info":{"id":"MlycRK","date":"1536891866","viewed":93,"name":"In or Out?","username":"ColtonSoneson","description":"Just messing around with animation","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["introtomoderngraphics"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvec2 circlePos1 = vec2(0.5, 0.5);\nfloat radius1 = 0.35;\n\nvec2 circlePos2 = vec2(0.5, 0.5);\nfloat radius2 = 0.3;\n\nvec2 circlePos3 = vec2(0.5, 0.5);\nfloat radius3 = 0.25;\n\nvec2 circlePos4 = vec2(0.5, 0.5);\nfloat radius4 = 0.2;\n\nvec2 circlePos5 = vec2(0.5, 0.5);\nfloat radius5 = 0.15;\n\nvec2 circlePos6 = vec2(0.5, 0.5);\nfloat radius6 = 0.1;\n\nvec2 circlePos7 = vec2(0.5, 0.5);\nfloat radius7 = 0.05;\n\n\nvec4 FG1 = vec4(1.0, 1.0, 0.0, 1.0);\nvec4 FG2 = vec4(1.0, 0.0, 0.0, 1.0);\n\nvec4 BG = vec4(1.0,1.0,1.0,1.0);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float aspectRatio = iResolution.y / iResolution.x; //upscaler for the y to get that 1:1 ratio\n    uv.y = uv.y * aspectRatio; //upscales the y\n    \n    vec3 rainbow1 = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(1,2,3));\n    vec3 rainbow2 = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(1.2,2.2,3.2));\n    vec3 rainbow3 = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(1.4,2.4,3.4));\n    vec3 rainbow4 = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(1.6,2.6,3.6));\n    vec3 rainbow5 = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(1.8,2.8,3.8));\n    vec3 rainbow6 = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(2.0,3.0,4.0));\n    vec3 rainbow7 = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(2.2,3.2,4.2));\n\tvec4 RB1 = vec4(rainbow1, 1.0);\n    vec4 RB2 = vec4(rainbow2, 1.0);\n    vec4 RB3 = vec4(rainbow3, 1.0);\n    vec4 RB4 = vec4(rainbow4, 1.0);\n    vec4 RB5 = vec4(rainbow5, 1.0);\n    vec4 RB6 = vec4(rainbow6, 1.0);\n    vec4 RB7 = vec4(rainbow7, 1.0);\n    \n    circlePos1.y = circlePos1.y * aspectRatio;\n\tcirclePos1.x += sin(iTime) * 0.05;\n    \n    circlePos2.y = circlePos2.y * aspectRatio;\n\tcirclePos2.x += sin(iTime) * 0.1;\n    \n    circlePos3.y = circlePos3.y * aspectRatio;\n\tcirclePos3.x += sin(iTime) * 0.15;\n    \n    circlePos4.y = circlePos4.y * aspectRatio;\n\tcirclePos4.x += sin(iTime) * 0.2;\n    \n    circlePos5.y = circlePos5.y * aspectRatio;\n\tcirclePos5.x += sin(iTime) * 0.25;\n    \n    circlePos6.y = circlePos6.y * aspectRatio;\n\tcirclePos6.x += sin(iTime) * 0.3;\n    \n    circlePos7.y = circlePos7.y * aspectRatio;\n\tcirclePos7.x += sin(iTime) * 0.35;\n    \n    if(length(circlePos7 - uv) < radius7)\n    {\n        fragColor = RB1;\n    }\n    else if(length(circlePos6 - uv) < radius6)\n    {\n        fragColor = RB2;\n    }\n    else if (length(circlePos5 - uv) < radius5)\n    {\n        fragColor = RB3;\n    }\n    else if (length(circlePos4 - uv) < radius4)\n    {\n        fragColor = RB4;\n    }\n    else if (length(circlePos3 - uv) < radius3)\n    {\n        fragColor = RB5;\n    }\n    else if (length(circlePos2 - uv) < radius2)\n    {\n        fragColor = RB6;\n    }\n    else if (length(circlePos1 - uv) < radius1)\n    {\n        fragColor = RB7;\n    }\n    else\n    {\n        fragColor = BG;\n    }\n      \n    \n}","name":"Image","description":"","type":"image"}]}