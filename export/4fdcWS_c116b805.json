{"ver":"0.1","info":{"id":"4fdcWS","date":"1731084000","viewed":80,"name":"Fork Map_2D_sid ronaldokla 280","username":"ronaldoklais","description":"Noise Improved\n\nA 2D Map shader using Perlin Noise","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["procedural","noise","perlinnoise","maps"],"hasliked":0,"parentid":"sd33Df","parentname":"Map_2D_sidps"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//----------------------------------------------------\n// TETXURE_SETTINGS\n//----------------------------------------------------\n#define TEXTURE_ROWS 100.0f\n#define GAMMA_CORRECTION 0\n\n// Gets the UV coordinate for Image\nvec2 get_uv(vec2 fragCoord)\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    uv *= TEXTURE_ROWS;\n    // uv = (uv * 2.0f) - 1.0f;\n    uv.x *= (iResolution.x / iResolution.y);\n    return uv;\n}\n\n// Inverse Lerp Function\nfloat linear_step(float l, float u, float a)\n{\n    return ((a - l) / (u - l));\n}\n\n//----------------------------------------------------\n//----------------------------------------------------\n\n\n//----------------------------------------------------\n// PERLIN_NOISE_GENERATOR\n//----------------------------------------------------\n\nfloat fade(float t)\n{\n    return t * t * t * (t * ((t * 6.0f) - 15.0f) + 10.0f);\n}\n\nconst vec3 MOD3 = vec3(0.1031f, 0.11369f, 0.13787f);\n\n\nvec3 hash(vec3 p3)\n{\n    p3 = fract(p3 * MOD3);\n    p3 += dot(p3, vec3(p3.y, p3.z, p3.x) + 19.19f);\n    return -1.0f + 2.0f * fract(vec3((p3.x + p3.y) * p3.z, \n                                         (p3.x + p3.z) * p3.y, \n                                         (p3.y + p3.z) * p3.x));\n}\n\nfloat noise(vec3 p)\n{\n    vec3 i = floor(p);\n    vec3 f = fract(p);\n    vec3 u = f * f * (3.0f - 2.0f * f);\n\n    return 2.0f * mix(\n        mix(\n            mix(dot(hash(i + vec3(0, 0, 0)), f - vec3(0, 0, 0)), \n                dot(hash(i + vec3(1, 0, 0)), f - vec3(1, 0, 0)), \n                u.x),\n            mix(dot(hash(i + vec3(0, 1, 0)), f - vec3(0, 1, 0)), \n                dot(hash(i + vec3(1, 1, 0)), f - vec3(1, 1, 0)), \n                u.x),\n            u.y),\n        mix(\n            mix(dot(hash(i + vec3(0, 0, 1)), f - vec3(0, 0, 1)), \n                dot(hash(i + vec3(1, 0, 1)), f - vec3(1, 0, 1)), \n                u.x),\n            mix(dot(hash(i + vec3(0, 1, 1)), f - vec3(0, 1, 1)), \n                dot(hash(i + vec3(1, 1, 1)), f - vec3(1, 1, 1)), \n                u.x),\n            u.y),\n        u.z);\n}\n\n\n//----------------------------------------------------\n//----------------------------------------------------\n\n\n//----------------------------------------------------\n// NOISE_GENERATOR\n//----------------------------------------------------\n#define NOISE_FUNCTION get_octave_noise\n#define SMOOTH_IL 1\n#define SCALE_FROM_CENTER 1\n#define LEVEL_OF_DETAIL 0\n#define NOISE_SCALE 20\n#define NUMBER_OCTAVES 4\n#define PERSISTANCE 0.5f\n#define LACUNARITY 2.0f\n#define NORMALIZE_OFFSET 0\n#define FALLOFF_CURVE 5\n#define FALLOFF_SHIFT 10\n\n// Generates a random noise between 0.0 and 1.0\nfloat rand(vec2 pos)\n{\n    return fract(sin(dot(pos, vec2(12.9898f, 78.233f))) * 43758.5453f);\n}\n\n// Gets the Random Noise Height\nfloat get_noise(vec2 pos,float time)\n{\n    pos *= float(TEXTURE_ROWS);\n#if LEVEL_OF_DETAIL\n    pos /= float(LEVEL_OF_DETAIL);\n    pos = vec2(floor(pos.x), floor(pos.y));\n    pos *= float(LEVEL_OF_DETAIL);\n#endif\n    return rand(pos);\n}\n\n// Gets the perlin noise for point b/w 0.0 and 1.0\nfloat perlin(vec2 pos)\n{\n    return 0.5f + 0.5f * noise(vec3(pos.x, pos.y, 0.0f));\n}\n\n// Gets the scaled perlin noise for point\nfloat get_perlin_noise(vec2 pos, float time)\n{\n    float rows = float(TEXTURE_ROWS);\n    float columns = rows * (iResolution.x / iResolution.y);\n    pos *= rows;\n    float scale = float(NOISE_SCALE);\n    if(scale <= 0.0f)\n    {\n        scale = 0.001f;\n    }\n    \n    float halfX = 0.0f;\n    float halfY = 0.0f;\n#if SCALE_FROM_CENTER\n    halfX = columns / 2.0f;\n    halfY = rows / 2.0f;\n#endif\n\n#if LEVEL_OF_DETAIL\n    pos /= float(LEVEL_OF_DETAIL);\n    pos = vec2(floor(pos.x), floor(pos.y));\n    pos *= float(LEVEL_OF_DETAIL);\n#endif\n     return perlin((pos - vec2(halfX,halfY)) / scale);\n}\n\n// Gets the scaled octave noise for point\nfloat get_octave_noise(vec2 pos, float timeRate)\n{\n    float rows = float(TEXTURE_ROWS);\n    pos *= rows;\n    float columns = rows*(iResolution.x / iResolution.y);\n    float scale = float(NOISE_SCALE);\n    if(scale <= 0.0f)\n    {\n        scale += 0.001f;\n    }\n    \n    int octaves = int(NUMBER_OCTAVES);\n    float lacunarity = max(LACUNARITY, 1.0f);\n    float persistence = min(PERSISTANCE, 1.0f);\n    \n    float halfX = 0.0f;\n    float halfY = 0.0f;\n#if SCALE_FROM_CENTER\n    halfX = columns / 2.0f;\n    halfY = rows / 2.0f;\n#endif\n\n    float[20] offsets=float[20](\n    0.0f, 0.0f, 0.0f, 0.0f, 0.0f,\n    0.0f, 0.0f, 0.0f, 0.0f, 0.0f,\n    0.0f, 0.0f, 0.0f, 0.0f, 0.0f,\n    0.0f, 0.0f, 0.0f, 0.0f, 0.0f\n    );\n    for(int i = 0; i < octaves * 2; i++)\n    {\n        offsets[i] = rand(vec2(pos.x, pos.y)) * 0.0f;\n    }\n    \n    float amplitude = 1.0f;\n    float frequency = 1.0f;\n    float noiseVal = 0.0f;\n    \n#if LEVEL_OF_DETAIL\n    pos = vec2(floor(pos.x), floor(pos.y));\n    pos /= float(LEVEL_OF_DETAIL);\n#endif\n\n    vec2 offset = timeRate * vec2(iTime * 1.25f, iTime * 1.25f);\n    scale += sin(iTime * 0.85f) * 0.0f;\n    \n    for (int i = 0; i < octaves; i++)\n    {\n#if NORMALIZE_OFFSET\n        float sampleX = (((pos.x-halfX) / scale) * frequency) + offset.x + offsets[i*2];\n        float sampleY = (((pos.y-halfY) / scale) * frequency) + offset.y + offsets[(i*2)+1];\n#else\n        float sampleX = (((pos.x-halfX + offset.x*scale) / scale) * frequency)  + offsets[i*2];\n        float sampleY = (((pos.y-halfY + offset.y*scale) / scale) * frequency)  + offsets[(i*2)+1];\n#endif\n        float noise = (perlin(vec2(sampleX, sampleY)) * 2.0f) - 1.0f;\n        noiseVal += noise * amplitude;\n        amplitude *= persistence;\n        frequency *= lacunarity;\n    }     \n#if SMOOTH_IL\n    noiseVal = smoothstep(-0.95f, 1.1f, noiseVal);\n#else\n    noiseVal = linear_step(-0.7f,0.85f,noiseVal);\n#endif\n    return noiseVal;\n}\n\n// Evaluates the falloff curve to match the border\nfloat eval_curve(float val)\n{\n    float a = float(FALLOFF_CURVE);\n    float b = float(FALLOFF_SHIFT);\n    val = pow(val, a) / (pow(val, a) + pow(b - (b * val), a));\n    return val;\n}\n\n// Returns the falloff map for map\nfloat falloff(vec2 pos,float time)\n{\n    pos.x /= (iResolution.x / iResolution.y);\n    pos = pos * 2.0f - 1.0f;\n    float val = max(abs(pos.x), abs(pos.y));\n    return clamp(eval_curve(val), 0.0f, 1.0f);\n}\n\n// Gets a Cloud Map\nfloat cloud_map(vec2 pos)\n{\n    vec2 offset=vec2(500.0f);\n    //offset+=vec2(iTime*0.0f);\n    float h = get_octave_noise(pos+offset,1.25f);\n    float th=0.75f;\n    h=(h<th)?0.0f:h;\n    return h;\n}\n//----------------------------------------------------\n//----------------------------------------------------\n\n\n//----------------------------------------------------\n// MAP_SETTINGS\n//----------------------------------------------------\n\n// Color for all regions\nvec3[8] regions = vec3[8](\nvec3(0.15f, 0.15f, 0.75f), // DARK BLUE\nvec3(0.2f, 0.5f, 1.0f), // OCEAN BLUE\nvec3(0.98f, 0.88f, 0.2f), // SAND YELLOW\nvec3(0.2f, 0.8f, 0.2f), // LIGHT GREEN\nvec3(0.2f, 0.60f, 0.2f), // DARK GREEN\nvec3(0.6f, 0.35f, 0.1f), // LIGHT BROWN\nvec3(0.25f, 0.1f, 0.05f), // DARK BROWN\nvec3(0.85f, 0.85f, 1.0f) // SNOW BLUE\n);\n\n// Start height for all regions\nfloat[8] heights = float[8](\n0.00f, // DEEP OCEAN\n0.025f, // OCEAN\n0.35f, // COAST\n0.365f, // PLAINS\n0.565f, // FORESTS\n0.695f, // HILLS\n0.82f, // MOUNTAINS\n0.93f // SNOW\n);\n\n// Gets the index of the region height lies in\nint get_region_index(float h)\n{\n    int index = -1;\n    for(int i = 0; i < 8; i++)\n    {\n        if(h >= heights[i])\n        {\n            index++;\n        }\n        else\n        {\n            break;\n        }\n    }\n    return index;\n}\n//----------------------------------------------------\n//----------------------------------------------------\n#define APPLY_FALLOFF 1\n#define COLOR_MAP 1\n\n#define BLEND_REGIONS 1\n#define MIX_FACTOR 0.65f\n#define MIX_THRESHOLD 0.85f\n\n#define DRAW_CLOUDS 1\n#define CLOUD_BLEND 0.75f\n\n#define ENABLE_LIGHT 1\n#define LIGHT_ANGLE 240.0f\n#define LIGHT_ELEVATION_ANGLE 30.0f\n#define LIGHT_CHECK 0.015f\n#define LIGHT_INTENSITY 5.0f\n\nvec3 get_color(vec2 uv)\n{\n    bool insideMap=true;\n    float timeFac=0.85f;\n    vec3 shadowMap=vec3(1.0f);\n    bool applyShadow=false;\n    \n    // Get Height\n    float h= NOISE_FUNCTION(uv,timeFac);\n    vec3 col=vec3(h);\n    \n#if ENABLE_LIGHT\n    vec2 lightDir=vec2(1.0f,0.0f);\n    float theta=float(LIGHT_ANGLE+iTime*45.0f)*(3.1416f/180.0f);\n    mat2 rot=mat2(cos(theta), -sin(theta),\n                  sin(theta), cos(theta));\n    lightDir=normalize(lightDir*rot);\n    \n    float checkDist=float(LIGHT_CHECK);\n    float hP=NOISE_FUNCTION(uv-lightDir*checkDist,timeFac);\n    \n    float xDiff=checkDist;\n    float yDiff=(hP-h);\n    float delH=tan(LIGHT_ELEVATION_ANGLE*(3.1416f/180.0f))*xDiff;\n    \n    if(insideMap)\n    {\n        if(yDiff<delH)\n        {\n            yDiff=0.0f;\n        }\n        yDiff=1.0f-yDiff;\n        if(yDiff>=0.0f)\n        {\n            yDiff=pow(yDiff,LIGHT_INTENSITY);\n        }\n        shadowMap=vec3(yDiff);\n    }\n#endif\n    \n#if APPLY_FALLOFF \n    // Apply Falloff\n    float diff = falloff(uv,0.0f);\n    if(h-diff<0.0f)\n    {\n        insideMap=false;\n    }\n    h = clamp(h-diff, 0.0f, 1.0f);\n    col=vec3(h);\n#endif\n\n#if COLOR_MAP\n    // Get Color from Region\n    int index = get_region_index(h);\n    col = regions[index];\n#endif\n\n    // Blend Region Colors\n#if BLEND_REGIONS\n    float h2 = ((index+1)<8?heights[index+1]:1.0f);\n    float off = linear_step(heights[index],h2,h);\n    //off=smoothstep(heights[index],h2,h);\n    if(off>=MIX_THRESHOLD/2.0f)\n    {\n       applyShadow=true;\n    }\n    if(off>=MIX_THRESHOLD)\n    {\n        col = mix(col, mix(col, regions[index+1], off), MIX_FACTOR);\n    }\n#endif\n    \n    // Apply Cloud Cover\n#if DRAW_CLOUDS\n    if(insideMap)\n    {\n        float cH=cloud_map(uv);\n        vec3 cloud = vec3(cH);\n        if(cH>0.0f)\n        {\n            col = (cloud*CLOUD_BLEND)+col*(1.0f-CLOUD_BLEND);\n        }\n    }\n#endif\n\n    if(insideMap && index>2 && applyShadow)\n    {\n        col*=shadowMap;\n    }\n    \n    return col;\n}\n//----------------------------------------------------\n//----------------------------------------------------\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.y;\n    vec3 col = get_color(uv);\n    \n#if GAMMA_CORRECTION\n    col = pow(col, vec3(1.0f / 2.2f));\n#endif\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}