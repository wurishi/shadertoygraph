{"ver":"0.1","info":{"id":"wttyRj","date":"1609529383","viewed":185,"name":"Feedback Paintbrush","username":"kibble","description":"Using a feedback buffer to make a very simple paint program. Now with anti-aliased lines!","likes":6,"published":1,"flags":32,"usePreview":0,"tags":["paint","feedback"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The main shader simply copies the feedback buffer to the screen\n// This could be used to e.g. decorate the output with a simple UI without\n// contributing to the feedback buffer\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float kRadius = 0.02;\n\n// calculate the distance to a line segment\nfloat distToLine(vec2 v, vec2 w, vec2 p) {\n    float l2 = pow(distance(w, v), 2.);\n    if(l2 == 0.0) return distance(p, v);\n    float t = clamp(dot(p - v, w - v) / l2, 0., 1.);\n    vec2 j = v + t * (w - v);\n    return distance(p, j);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Get the previous pixel colour for the feedback effect\n    vec3 baseCol = texture(iChannel0, uv).xyz;\n    \n    // Fade out slowly over time!\n    vec3 col = baseCol * 0.995;\n\n    if (iMouse.z > 0.0) {\n        vec4 iMousePrev = texture(iChannel1, vec2(0, 0));\n        if (iMousePrev.z > 0.0) {\n            // Calculate the linear distance from the line segment for antialiased lines\n            float brushDist = distToLine(iMousePrev.xy, iMouse.xy, fragCoord) - (kRadius*iResolution.y);\n            float brushFeather = clamp(brushDist, 0.0, 1.0);\n            // Colour shifting paint\n            vec3 paintCol = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n            col = mix(paintCol, baseCol, brushFeather);\n        }\n    }\n\n    fragColor = vec4(col, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// Buffer B simply writes out the current mouse data\n// This way we can query it in buffer A for the PREVIOUS frame's mouse data\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = iMouse;\n}","name":"Buffer B","description":"","type":"buffer"}]}