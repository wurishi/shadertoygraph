{"ver":"0.1","info":{"id":"4lKGRc","date":"1475897297","viewed":348,"name":"Simple Ray Tracer Study","username":"pdcxs007","description":"https://www.youtube.com/watch?v=9g8CdctxmeU","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raytracer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//https://www.youtube.com/watch?v=9g8CdctxmeU\n\nfloat iSphere(in vec3 rayOrigin, in vec3 rayDirection, in vec4 sphere)\n{\n    vec3 oc = rayOrigin - sphere.xyz;\n    float b = 2.0 * dot(oc, rayDirection);\n    float c = dot(oc, oc) - sphere.w * sphere.w;\n    float h = b*b - 4.0*c;\n    if (h < 0.0)\n        return -1.0;\n    float t = (-b - sqrt(h)) / 2.0;\n    return t;\n}\n\nvec3 nSphere(in vec3 pos, in vec4 sphere)\n{\n    return (pos - sphere.xyz)/sphere.w;\n} \n\nfloat iPlane(in vec3 rayOrigin, in vec3 rayDirection)\n{\n    return -rayOrigin.y / rayDirection.y;\n}\n\nvec3 nPlane(in vec3 pos)\n{\n    return vec3(0.0, 1.0, 0.0);\n}\n\nvec4 sphere1 = vec4(0.0, 1.0, 0.0, 1.0);\nfloat intersect(in vec3 rayOrigin, in vec3 rayDirection, out float resultT)\n{\n    resultT = 1000.0;\n    float id = -1.0;\n    // intersect with a sphere\n    float tSphere = iSphere(rayOrigin, rayDirection, sphere1);\n    // intersect with a plane\n    float tPlane = iPlane(rayOrigin, rayDirection);\n    \n    if (tSphere > 0.0)\n    {\n        id = 1.0;\n        resultT = tSphere;\n    }\n    \n    if (tPlane > 0.0 && tPlane < resultT)\n    {\n        id = 2.0;\n        resultT = tPlane;\n    }\n    \n    return id;\n}\n\nvec3 light = normalize(vec3(0.57703));\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xx + vec2(0.0, 0.2);\n    \n    // Generate a ray\n    vec3 rayOrigin = vec3(0.0, 1.0, 4.0);\n    vec3 rayDirection = normalize(vec3(-1.0 + 2.0*uv, -1.0));\n    \n    sphere1.x = 0.5 * cos(iTime);\n    sphere1.z = 0.5 * sin(iTime);\n    \n    float t;\n    // Intersect the ray with 3d scene\n    float id = intersect(rayOrigin, rayDirection, t);\n    \n    vec3 color = vec3(0.7);\n    vec3 pos = rayOrigin + t*rayDirection;\n    if (id > 0.5 && id < 1.5)\n    {\n        // hit the sphere\n        vec3 nor = nSphere(pos, sphere1);\n        float diffuse = clamp(dot(nor, light), 0.0, 1.0);\n        float ao = 0.5 + 0.5*nor.y;\n        color = vec3(0.9, 0.8, 0.6)*diffuse + vec3(0.1, 0.2, 0.4);\n        color *= ao;\n    }\n    else if (id > 1.5 && id < 2.5)\n    {\n        // hit the plane\n        vec3 nor = nPlane(pos);\n        float diffuse = clamp(dot(nor, light), 0.0, 1.0);\n        float amb = smoothstep(0.0, 2.0*sphere1.w, length(pos.xz - sphere1.xz));\n        color = vec3(amb*0.7);\n    }\n    color = sqrt(color);\n\tfragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}