{"ver":"0.1","info":{"id":"7dsXDn","date":"1618507069","viewed":73,"name":"Pyramid_322","username":"Makler322","description":"MSU Faculty of Computational Mathematics and Cybernetics,","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["pyramid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv) / float(iFrame + 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4sfGRr","filepath":"/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","previewfilepath":"/media/ap/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","type":"volume","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dX3Rr","filepath":"/media/a//media/previz/cubemap00.png","previewfilepath":"/media/ap//media/previz/cubemap00.png","type":"cubemap","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float INF = 1e10;\nconst vec3 CAMERA_POS = vec3(4, 2.8, -2); //(4, 1.8, -2)\n\nconst vec3 LIGHT1_POS = vec3(-2, 2, -2);\nconst float LIGHT1_RADIUS = 0.78;\nconst vec3 LIGHT1_COLOR = vec3(1, 1, 1);\n\nconst vec3 LIGHT2_POS = vec3(-5, 1.5, 6);\nconst float LIGHT2_RADIUS = 0.5;\nconst vec3 LIGHT2_COLOR = vec3(0.1, 0.4, 0.8);\n\nconst vec3 LIGHT3_POS = vec3(1, 1.5, 1);\nconst float LIGHT3_RADIUS = 0.6;\nconst vec3 LIGHT3_COLOR = vec3(0, 1, 1);\n\nconst float GLASS_N = 1.35;\nconst float AIR_N = 1.0;\n\nvec3 randDir;\n\n\nfloat tracePlane(vec3 pos, vec3 dir, out vec3 normal) {\n    float t1 = (-1.2 - pos.y) / dir.y;\n    if (t1 <= 0.0) {\n        return INF;\n    }\n    \n    vec3 worldPos = t1 * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) >= 100.0) {\n        return INF;\n    }\n    normal = vec3(0, 1, 0);\n    return t1;\n}\n\nfloat tracePyramid(vec3 pos, vec3 dir, float r, out vec3 normal){\n\n// |pos.x + t * dir.x| + pos.y + t * dir.y + |pos.z + t * dir.z| = r\n// |pos.x + t * dir.x| + |pos.z + t * dir.z| <= r\n    \n    float t1 = (0.0 - pos.y) / dir.y;\n    if (t1 <= 0.0) {\n        t1 = INF;\n    }\n    \n    vec3 worldPos = t1 * dir + pos;\n    if ((abs(worldPos.x)+ abs(worldPos.z)) <= r) {\n        //normal = vec3(0, -1, 0);\n    }\n    else\n    {\n        t1 = INF;\n    }\n    \n    \n    //float t1 = INF;\n\n// x > 0, y > 0, z > 0 => pos.x + t * dir.x + pos.y + t * dir.y + pos.z + t * dir.z = r\n    float t_1_1;\n    if ((r - pos.x - pos.y - pos.z)/(dir.x + dir.y + dir.z) > 0.0)\n        t_1_1 = (r - pos.x - pos.y - pos.z)/(dir.x + dir.y + dir.z);\n    else\n        t_1_1 = INF;\n     \n\n// x < 0, y > 0, z > 0 => -pos.x - t * dir.x + pos.y + t * dir.y + pos.z + t * dir.z = r\n    float t_0_1;\n    if ((r + pos.x - pos.y - pos.z)/(-dir.x + dir.y + dir.z) > 0.0)\n        t_0_1 = (r + pos.x - pos.y - pos.z)/(-dir.x + dir.y + dir.z);\n    else\n        t_0_1 = INF;\n\n// x > 0, y > 0, z < 0 => pos.x + t * dir.x + pos.y + t * dir.y - pos.z - t * dir.z = r\n    float t_1_0;\n    if ((r - pos.x - pos.y + pos.z)/(dir.x + dir.y - dir.z) > 0.0)\n        t_1_0 = (r - pos.x - pos.y + pos.z)/(dir.x + dir.y - dir.z);\n    else\n        t_1_0 = INF;\n\n// x < 0, y > 0, z < 0 => -pos.x - t * dir.x + pos.y + t * dir.y - pos.z - t * dir.z = r\n    float t_0_0;\n    if ((r + pos.x - pos.y + pos.z)/(-dir.x + dir.y - dir.z) > 0.0)\n        t_0_0 = (r + pos.x - pos.y + pos.z)/(-dir.x + dir.y - dir.z);\n    else\n        t_0_0 = INF;\n    \n    if ((t_1_1 == INF) && (t_0_1 == INF) && (t_1_0 == INF) && (t_0_0 == INF) && (t1 == INF))\n        //&& (t_1 == INF) && (t_2 == INF) && (t_3 == INF) && (t_4 == INF))\n        return INF;\n        \n    \n    vec3 cur_vec;\n    vec3 vector = vec3(0, 0, 0);\n    float t = INF;\n    float my_y = 0.0;\n    \n  \n    cur_vec = pos + t1 * dir;\n    if ((abs(cur_vec.x) + abs(cur_vec.z) <= r) && (abs(cur_vec.y - my_y) < 0.0001) && (t > t1))\n    {\n        t = t1;\n        vector = vec3(0.0, -1.0, 0.0);\n    }\n    \n    cur_vec = pos + t_1_1 * dir;\n    if ((cur_vec.x >= 0.0) && (cur_vec.y > my_y) && (cur_vec.z >= 0.0) && (t > t_1_1))\n    {\n        t = t_1_1;\n        vector = vec3(1.0, 1.0, 1.0);\n    }\n        \n    cur_vec = pos + t_0_1 * dir;\n    if ((cur_vec.x <= 0.0) && (cur_vec.y > my_y) && (cur_vec.z >= 0.0) && (t > t_0_1))\n    {\n        t = t_0_1;\n        vector = vec3(-1.0, 1.0, 1.0);\n    }\n    \n    cur_vec = pos + t_1_0 * dir;\n    if ((cur_vec.x >= 0.0) && (cur_vec.y > my_y) && (cur_vec.z <= 0.0) && (t > t_1_0))\n    {\n        t = t_1_0;\n        vector = vec3(1.0, 1.0, -1.0);\n    }\n    \n    cur_vec = pos + t_0_0 * dir;\n    if ((cur_vec.x <= 0.0) && (cur_vec.y > my_y) && (cur_vec.z <= 0.0) && (t > t_0_0))\n    {\n        t = t_0_0;\n        vector = vec3(-1.0, 1.0, -1.0);\n    }\n    normal = normalize(vector);\n    return t;\n\n}\n// pos - положение камеры, потом поехала\n// dir - направление луча\n// normal - нужна потом\nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal, float dis_flag) {\n    float dis = dis_flag * 0.09 * sin(16.0 * (pos.x + dir.x)) * sin(16.0 * (pos.y + dir.y)) * sin(16.0 * (pos.z + dir.z));\n    float a = dot(dir, dir);\n    float b = dot(pos, dir);\n    float c = dot(pos, pos) - (r + dis) * (r + dis);\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    float t = -b - sqrt(D);\n    if (t > 0.0) {\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    t = -b + sqrt(D);\n    if (t < 0.0){\n        return INF;\n    }\n    normal = normalize(pos + t * dir);\n    return t;\n}\n\nfloat traceCylinder(vec3 pos, vec3 dir, out vec3 normal) {\n    float my_h = 0.0;\n    float t = (my_h - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) < 0.5) {\n        normal = vec3(0, 1, 0);\n        return t;\n    }\n    \n    // dot(pos + t * dir, pos + t * dir) == r * r;\n    // dot(pos, pos) + 2 * t * dot(pos, dir) + t * t * dot(dir, dir) == r * r\n    // t * t + 2.0 * t * dot(pos, dir) + dot(pos, pos) - r * r == 0\n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - 0.5;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    t = (-b - sqrt(D)) / a;\n    if (t > 0.0) {\n        worldPos = t * dir + pos;\n        if (worldPos.y <= my_h) {\n            normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n            return t;\n        }\n    }\n    t = (-b + sqrt(D)) / a;\n    if (t < 0.0) {\n        return INF;\n    }\n    worldPos = t * dir + pos;\n    if (worldPos.y <= -1.0) {\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    }\n    return INF;\n}\n\nbool isOccluded(vec3 pos, vec3 target) {\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n    \n    vec3 sphNorm;\n    float sphT = traceSphere(pos, dir, 1.0, sphNorm, 1.0);\n    if (sphT < dist)\n        return true;\n    vec3 cylNorm;\n    float cylT = traceCylinder(pos, dir, cylNorm);\n    return (cylT < dist);\n}\n\nvec3 computeLight(vec3 pos, vec3 color, vec3 normal) {\n    vec3 toLight1 = LIGHT1_POS - pos;\n    float distSq1 = dot(toLight1, toLight1);\n    float att1 = isOccluded(pos, LIGHT1_POS + randDir * LIGHT1_RADIUS) ? 0.0 : 60.0f / distSq1;\n    vec3 toLight2 = LIGHT2_POS - pos;\n    float distSq2 = dot(toLight2, toLight2);\n    float att2 = isOccluded(pos, LIGHT2_POS + randDir * LIGHT2_RADIUS) ? 0.0 : 30.0f / distSq2;\n    vec3 toLight3 = LIGHT3_POS - pos;\n    float distSq3 = dot(toLight3, toLight3);\n    float att3 = isOccluded(pos, LIGHT3_POS + randDir * LIGHT3_RADIUS) ? 0.0 : 20.0f / distSq3;\n    return color * (\n        max(0.0, dot(normal, normalize(toLight1))) * att1 * LIGHT1_COLOR\n        + max(0.0, dot(normal, normalize(toLight2))) * att2 * LIGHT2_COLOR\n        + max(0.0, dot(normal, normalize(toLight3))) * att3 * LIGHT3_COLOR\n        + texture(iChannel1, normal).rgb * 0.1\n    );\n}\n// Преломление \nvec3 refraction(vec3 v, vec3 normal, float n1, float n2, out bool flag) {\n    if (dot(v, normal) < 0.0) {\n        normal = -normal;\n    }\n    float cosA = dot(v, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3 tang = normalize(v - cosA * normal);\n    float sinB = sinA / n2 * n1;\n    if (abs(sinB) > 1.0){\n        flag = false;\n        return reflect(v, normal);\n    }\n    float cosB = sqrt(1.0 - sinB * sinB);\n    flag = true;\n    //return normalize(sinB * tang + cosB * normal);\n    return sinB * tang + cosB * normal;\n}\n\nfloat pow2(float x) {\n    return x * x;\n}\n\nmat2 mainRotate(float angle) {\n    float s = sin(angle);\n    float cs = cos(angle);\n    \n    return mat2(\n                cs, -s, \n                s,  cs\n            );\n}\n\nconst float PI = 3.14159265359;\nconst float SPEED = 1.0 / 15.0;\n\nfloat rand(float frame)\n{\n    return fract(sin( dot(vec3(frame), vec3(12.9898,78.233,45.5432) )) * 43758.5453);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    randDir = normalize(randVals - 0.5);\n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (randVals.xy - 0.5) * 2.0) / iResolution.x;\n    vec3 front = normalize(-CAMERA_POS);\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = normalize(cross(front, up));\n    up = normalize(cross(right, front));\n    vec3 viewVec = normalize(front + right * uv.x + up * uv.y);\n    float mult = 1.0;\n    \n    const int EMISSION = 0;\n    const int DIFFUSE = 1;\n    const int REFLECTION = 2;\n    const int REFRACTION = 3;\n    \n    vec3 curPos = CAMERA_POS;\n    vec3 curDir = viewVec;\n    \n    float n1 = AIR_N;\n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N + GLASS_N);\n    const float DIAMOND_N = 1.33;\n    float DIAMOND_R = pow2(DIAMOND_N - GLASS_N) / pow2(DIAMOND_N + GLASS_N);\n    \n    vec3 colorMult = vec3(1, 1, 1);\n    //vec3 colormult = vec3(1,1,1);\n    \n    for (int i = 0; i < 15; ++i) {\n        float t = INF;\n        int materialType;\n        vec3 color;\n        vec3 normal;\n        float nEnter = AIR_N;\n        \n        vec3 planeNorm;\n        float planeT = tracePlane(curPos, curDir, planeNorm);\n        if (planeT < t) {\n            t = planeT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel0, worldPos.xz * 0.1).rgb;\n            normal = planeNorm;\n        }\n        vec3 l1Norm;\n        float light1T = traceSphere(curPos - LIGHT1_POS, curDir, LIGHT1_RADIUS, l1Norm, 0.0);\n        if (light1T < t) {\n            t = light1T;\n            materialType = EMISSION;\n            color = LIGHT1_COLOR;\n            normal = l1Norm;\n        }\n        vec3 l2Norm;\n        float light2T = traceSphere(curPos - LIGHT2_POS, curDir, LIGHT2_RADIUS, l2Norm, 0.0);\n        if (light2T < t) {\n            t = light2T;\n            materialType = EMISSION;\n            color = LIGHT2_COLOR;\n            normal = l2Norm;\n        }\n        vec3 l3Norm;\n        float light3T = traceSphere(curPos - LIGHT3_POS, curDir, LIGHT3_RADIUS, l3Norm, 0.0);\n        if (light3T < t) {\n            t = light3T;\n            materialType = EMISSION;\n            color = LIGHT3_COLOR;\n            normal = l3Norm;\n        }\n        //-------------------------\n        vec3 sphNorm;\n        float sphT = tracePyramid(curPos, curDir, 1.1, sphNorm);\n        if (sphT < t) {\n            t = sphT;\n            normal = sphNorm;\n            \n            if (randVals.x < GLASS_R) {\n                //materialType = REFRACTION;\n                materialType = REFLECTION;\n            } else {\n                colorMult *= vec3(1, 1, 1);\n                materialType = REFRACTION;\n                //materialType = REFLECTION;\n                if (n1 == AIR_N) nEnter = GLASS_N;\n                if (n1 == GLASS_N) nEnter = AIR_N;\n                \n            }\n        }\n        float koef1 = 0.6;\n        float koef2 = 3.6;\n        float sph2T = traceSphere(curPos-vec3(0.0, 0.35, 0.0), curDir, 0.35, sphNorm, 1.0);\n        if ((sph2T < t)) {\n            t = sph2T;\n            normal = sphNorm;\n            vec3 worldPos = t * curDir + curPos;\n            \n            if (randVals.x < DIAMOND_R+koef1) {\n                color = texture(iChannel3, worldPos).rgb;\n                materialType = EMISSION;\n            } else {\n                \n                colorMult = texture(iChannel3, worldPos).rgb * koef2;\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = GLASS_N;\n                } else {\n                    nEnter = DIAMOND_N;\n                }\n            }\n        }\n        \n        float sph2T1 = traceSphere(curPos-vec3(0.1, 0.2, 0.1), curDir, 0.2, sphNorm, 1.0);\n        if (sph2T1 < t) {\n            t = sph2T1;\n            normal = sphNorm;\n            vec3 worldPos = t * curDir + curPos;\n            \n            if (randVals.y < DIAMOND_R+koef1) {\n                color = texture(iChannel3, worldPos).rgb;\n                materialType = EMISSION;\n            } else {\n                \n                colorMult = texture(iChannel3, worldPos).rgb * koef2;\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = GLASS_N;\n                } else {\n                    nEnter = DIAMOND_N;\n                }\n            }\n        }\n        float sph2T2 = traceSphere(curPos-vec3(0.2, 0.2, -0.1), curDir, 0.2, sphNorm, 1.0);\n        if (sph2T2 < t) {\n            t = sph2T2;\n            normal = sphNorm;\n            vec3 worldPos = t * curDir + curPos;\n            \n            if (randVals.x < DIAMOND_R+koef1) {\n                color = texture(iChannel3, worldPos).rgb;\n                materialType = EMISSION;\n            } else {\n                \n                colorMult = texture(iChannel3, worldPos).rgb * koef2;\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = GLASS_N;\n                } else {\n                    nEnter = DIAMOND_N;\n                }\n            }\n        }\n        vec3 cylNorm;\n        float cylT = traceCylinder(curPos, curDir, cylNorm);\n        if (cylT < t) {\n            t = cylT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel0, worldPos.xz * worldPos.y).rgb;\n            normal = cylNorm;\n        }\n        if (t != INF) {\n            vec3 worldPos = t * curDir + curPos;\n            fragColor = texture(iChannel0, worldPos.xz);\n            // материал EMISSION = цвет\n            if (materialType == EMISSION) {\n                fragColor.rgb = color * colorMult;\n                break;\n            // материал DIFFUSE = цвет + тени + ,,\n            } else if (materialType == DIFFUSE) {\n                fragColor.rgb = colorMult * computeLight(worldPos + t * curDir, color, normal);\n                break;\n            // материал REFLECTION = отражение\n            } else if (materialType == REFLECTION) {\n                fragColor.rgb = colorMult * computeLight(worldPos + t * curDir, color, normal);\n                curDir = reflect(curDir, normal);\n                curPos = worldPos + curDir * 1e-5;\n                break;\n            // материал REFRACTION = преломление\n            } else if (materialType == REFRACTION) {\n                bool change ;\n                curDir = refraction(curDir, normal, n1, nEnter, change);\n                curPos = worldPos + curDir * 1e-5;\n                \n                \n                \n                //if (change)\n                n1 = nEnter;\n                }\n                \n        } else {\n            fragColor.rgb = texture(iChannel1, curDir).rgb * colorMult;\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv) + texture(iChannel1, uv);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"4dX3Rr","channel":0}],"code":"//afl_ext 2018\n\n#define DRAG_MULT 0.048\n#define ITERATIONS_RAYMARCH 13\n#define ITERATIONS_NORMAL 48\n#define WATER_DEPTH 2.1\n\n#define Mouse (iMouse.xy / iResolution.xy)\n#define Resolution (iResolution.xy)\n#define Time (1.0)\n\n// returns vec2 with wave height in X and its derivative in Y\nvec2 wavedx(vec2 position, vec2 direction, float speed, float frequency, float timeshift) {\n    float x = dot(direction, position) * frequency + timeshift * speed;\n    float wave = exp(sin(x) - 1.0);\n    float dx = wave * cos(x);\n    return vec2(wave, -dx);\n}\n\nfloat getwaves(vec2 position, int iterations){\n\tfloat iter = 0.0;\n    float phase = 6.0;\n    float speed = 2.0;\n    float weight = 1.0;\n    float w = 0.0;\n    float ws = 0.0;\n    for(int i=0;i<iterations;i++){\n        vec2 p = vec2(sin(iter), cos(iter));\n        vec2 res = wavedx(position, p, speed, phase, Time);\n        position += normalize(p) * res.y * weight * DRAG_MULT;\n        w += res.x * weight;\n        iter += 12.0;\n        ws += weight;\n        weight = mix(weight, 0.0, 0.2);\n        phase *= 1.18;\n        speed *= 1.07;\n    }\n    return w / ws;\n}\n\nfloat raymarchwater(vec3 camera, vec3 start, vec3 end, float depth){\n    vec3 pos = start;\n    float h = 0.0;\n    float hupper = depth;\n    float hlower = 0.0;\n    vec2 zer = vec2(0.0);\n    vec3 dir = normalize(end - start);\n    for(int i=0;i<318;i++){\n        h = getwaves(pos.xz * 0.1, ITERATIONS_RAYMARCH) * depth - depth;\n        if(h + 0.01 > pos.y) {\n            return distance(pos, camera);\n        }\n        pos += dir * (pos.y - h);\n    }\n    return -1.0;\n}\n\nfloat H = 0.0;\nvec3 normal(vec2 pos, float e, float depth){\n    vec2 ex = vec2(e, 0);\n    H = getwaves(pos.xy * 0.1, ITERATIONS_NORMAL) * depth;\n    vec3 a = vec3(pos.x, H, pos.y);\n    return normalize(cross(normalize(a-vec3(pos.x - e, getwaves(pos.xy * 0.1 - ex.xy * 0.1, ITERATIONS_NORMAL) * depth, pos.y)), \n                           normalize(a-vec3(pos.x, getwaves(pos.xy * 0.1 + ex.yx * 0.1, ITERATIONS_NORMAL) * depth, pos.y + e))));\n}\nmat3 rotmat(vec3 axis, float angle)\n{\n\taxis = normalize(axis);\n\tfloat s = sin(angle);\n\tfloat c = cos(angle);\n\tfloat oc = 1.0 - c;\n\treturn mat3(oc * axis.x * axis.x + c, oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s, \n\toc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s, \n\toc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c);\n}\n\nvec3 getRay(vec2 uv){\n    uv = (uv * 2.0 - 1.0) * vec2(Resolution.x / Resolution.y, 1.0);\n\tvec3 proj = normalize(vec3(uv.x, uv.y, 1.0) + vec3(uv.x, uv.y, -1.0) * pow(length(uv), 2.0) * 0.05);\t\n    if(Resolution.x < 400.0) return proj;\n\tvec3 ray = rotmat(vec3(0.0, -1.0, 0.0), 3.0 * (Mouse.x * 2.0 - 1.0)) * rotmat(vec3(1.0, 0.0, 0.0), 1.5 * (Mouse.y * 2.0 - 1.0)) * proj;\n    return ray;\n}\n\nfloat intersectPlane(vec3 origin, vec3 direction, vec3 point, vec3 normal)\n{ \n    return clamp(dot(point - origin, normal) / dot(direction, normal), -1.0, 9991999.0); \n}\n\nvec3 getatm(vec3 ray, float roughness){\n    vec3 sharp = mix(vec3( 0.0293, 0.0698, 0.1717) * 10.0, vec3(3.0), pow(1.0 - ray.y, 8.0));\n    vec3 rough = vec3(vec3( 0.0293, 0.0698, 0.1717) + vec3(1.0));\n    return mix(sharp, rough, roughness);\n}\n\nfloat sun(vec3 ray){\n    return pow(max(0.0, dot(ray, normalize(vec3(1.0, 1.0, 0.0)))), 668.0) * 110.0;\n}\n\nvec3 getColor(vec2 uv){\n\tvec3 ray = getRay(uv);\n    \n    if(ray.y >= -0.01){\n        vec3 C = getatm(ray, 0.0) * 1.0 + sun(ray) * 2.0;\n     \treturn C; \n    }\n    \n\tvec3 wfloor = vec3(0.0, -WATER_DEPTH, 0.0);\n\tvec3 wceil = vec3(0.0, 0.0, 0.0);\n\tvec3 orig = vec3(0.0, 2.0, 0.0);\n\tfloat hihit = intersectPlane(orig, ray, wceil, vec3(0.0, 1.0, 0.0));\n\tfloat lohit = intersectPlane(orig, ray, wfloor, vec3(0.0, 1.0, 0.0));\n    vec3 hipos = orig + ray * hihit;\n    vec3 lopos = orig + ray * lohit;\n\tfloat dist = raymarchwater(orig, hipos, lopos, WATER_DEPTH);\n    vec3 pos = orig + ray * dist;\n\n\tvec3 N = normal(pos.xz, 0.01, WATER_DEPTH);\n    vec2 velocity = N.xz * (1.0 - N.y);\n    vec3 R = reflect(ray, N);\n    float roughness = 1.0 - 1.0 / (dist * 0.01 + 1.0);\n    N = normalize(mix(N, vec3(0.0, 1.0, 0.0), roughness));\n    R = normalize(mix(R, N, roughness));\n    R.y = abs(R.y);\n    float fresnel = (0.04 + (1.0-0.04)*(pow(1.0 - max(0.0, dot(-N, ray)), 5.0)));\n\t\n    vec3 C = fresnel * (getatm(R, roughness) + sun(R)) * 2.0;\n    \n\treturn C;\n}\n\nvec3 gammacorrect(vec3 c){\n    return pow(c, vec3(1.0 / 2.4));\n}\n\nvec3 render(vec2 uv){\n \tvec3 ray = getRay(uv);\n    vec3 C = getColor(uv) * 0.3;\n    return gammacorrect(C);  \n}\n\nvoid mainCubemap( out vec4 fragColor, in vec2 fragCoord, in vec3 rayOri, in vec3 rayDir )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\n\tfragColor = vec4(render(uv),1.0);\n}\n/*\nvoid mainCubemap( out vec4 fragColor, in vec2 fragCoord, in vec3 rayOri, in vec3 rayDir )\n{\n    // Ray direction as color\n    vec3 col = 0.5 + 0.5*rayDir;\n\n    // Output to cubemap\n    fragColor = vec4(col,1.0);\n}\n*/","name":"Cube A","description":"","type":"cubemap"}]}