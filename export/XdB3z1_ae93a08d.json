{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"#define MIN_STRIPES 3.0\n#define MAX_STRIPES 50.0\n#define STRIPES_MULTIPLIER (MAX_STRIPES - MIN_STRIPES)\n\nfloat iPart(float num);\nbool isOdd(float num);\nbool shouldPixelBeWhite(float stripeNum);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 normalizedCoord = fragCoord.xy / iResolution.xy;\n\tnormalizedCoord.x -= 0.5;\n\tnormalizedCoord.y -= 0.5;\n\t\n\tfloat normalizedSinOfTime = (sin(iTime) + 1.0) / 2.0;\n\tfloat numStripes = (normalizedSinOfTime * STRIPES_MULTIPLIER) + MIN_STRIPES;\n\t\n\tfloat stripeNumX = (normalizedCoord.x * numStripes);\n\tfloat colorX = 0.0;\n\tif(shouldPixelBeWhite(stripeNumX)) {\n\t\tcolorX = 1.0;\t\n\t}\n\t\n\tfloat stripeNumY = (normalizedCoord.y * numStripes);\n\tfloat colorY = 0.0;\n\tif(shouldPixelBeWhite(stripeNumY)) {\n\t\tcolorY = 1.0;\t\n\t}\n\t\n\tfloat color = clamp(colorX + colorY, 0.0, 1.0) - (colorX * colorY);\n\t\n\tfragColor = vec4(color, color, color, 1.0);\n}\n\nbool shouldPixelBeWhite(float stripeNum) {\n\tfloat iPartOfStripeNum = floor(stripeNum);\n\treturn isOdd(iPartOfStripeNum);\n}\n\nbool isOdd(float num) {\n\tfloat numOverTwo = abs(num / 2.0);\n\tfloat fpartOfNumOverTwo = numOverTwo - floor(numOverTwo);\n\tif(fpartOfNumOverTwo > 0.25) {\n\t\treturn true;\t\n\t} else {\n\t\treturn false;\t\n\t}\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XdB3z1","date":"1383333416","viewed":191,"name":"CheckersBounce","username":"boztalay","description":"Just learning all this stuff","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d","checkers"],"hasliked":0,"parentid":"","parentname":""}}