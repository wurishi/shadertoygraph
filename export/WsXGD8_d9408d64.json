{"ver":"0.1","info":{"id":"WsXGD8","date":"1545927146","viewed":123,"name":"SpinningSquare","username":"Nischi","description":"Square is Spinning!\n\nhttps://www.quora.com/How-do-you-mathematically-spin-a-square/answer/Nikolas-Scholz","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["quora"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159\n\n//-------------------------- Controls -----------------------------\n\nfloat a = 1.;\t\t\t\t\t\t// Size of square\nfloat omega = 2.;\t\t\t\t\t// Turning frequency\n\nvec2 c = vec2(2,1.5);\t\t\t\t// Center of square\nbool moveCenterWithMouse = false;\t// Set on true to override c with mouse position\n\nfloat scale = 3.;\t\t\t\t\t// Scale of the coordinate system\n\n//--------------------------- Calculation --------------------------\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates\n    vec2 x = scale*(2.*fragCoord-iResolution.xy)/iResolution.y;\n    // Normalized mouse coordinates\n    vec2 m = scale*(2.*iMouse.xy-iResolution.xy)/iResolution.y;\n    if(moveCenterWithMouse)\n        c = m;\n   \t\n    // Thickness of lines\n    float thickness = scale*0.01;\n\n    // Rotation angle is linearly increasing with time (periodic, so i cut it with 20*pi)\n    float phi = mod(omega*iTime,20.*PI);\n    // Rotation matrix\n    mat2 M = mat2(vec2(cos(phi),sin(phi)),vec2(-sin(phi),cos(phi)));\n    \n    // Transformed point\n    vec2 xsharp = M*(x-c)+c;\n    \n    // Make a square (maximum norm, will be red)\n    bool isOnSquare = abs(max(abs(xsharp.x-c.x),abs(xsharp.y-c.y))-a) < thickness;\n    // Make a different square (sum norm, will be blue)\n    bool isOnDiffSquare = abs(abs(xsharp.x-c.x)+abs(xsharp.y-c.y)-a) < thickness;\n    // Make a center point\n    bool isOnCenter = length(xsharp-c) < thickness;\n    \n    \n    // Make a coordinate system (will be green)\n    bool isOnAxes = (abs(x.x) < thickness) || (abs(x.y) < thickness);\n    // Make x coordinate ticks\n    bool isOnXTick = (abs(mod(x.x,1.)) < thickness) && (abs(x.y) < thickness*4.);\n    // Make y coordinate ticks\n    bool isOnYTick = (abs(mod(x.y,1.)) < thickness) && (abs(x.x) < thickness*4.);\n    \n    bool isOnCoordinateSystem = isOnAxes || isOnXTick || isOnYTick;\n    \n    // Output to screen (color vector: vec4(R,G,B,A))\n    fragColor = vec4(isOnSquare,0.5*float(isOnCoordinateSystem),isOnDiffSquare,1);\n    fragColor += vec4(isOnCenter);\n}","name":"Image","description":"","type":"image"}]}