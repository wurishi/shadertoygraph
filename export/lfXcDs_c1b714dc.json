{"ver":"0.1","info":{"id":"lfXcDs","date":"1721769939","viewed":117,"name":"PointWeb","username":"ReidTrisler","description":"Interconnected Points","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["web"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define S(a, b, t) smoothstep(a, b, t)\n\nfloat DistLine(vec2 p, vec2 a, vec2 b){\n    vec2 pa = p-a;\n    vec2 ba = b-a;\n    \n    float t = clamp(dot(pa, ba) / dot(ba, ba), 0., 1.);\n    \n    return length(pa - ba*t);\n}\n\nfloat N21(vec2 p){\n    p = fract(p*vec2(233.34, 851.73));\n    p += dot(p, p+23.45);\n    return fract(p.x*p.y);\n}\n\nvec2 N22(vec2 p){\n    float n = N21(p);\n    return vec2(n, N21(p+n));\n}\n\nvec2 GetPos(vec2 id, vec2 offset){\n    vec2 n = N22(id + offset) * iTime;    \n    \n    return offset + sin(n) * .4;\n}\n\nfloat Line(vec2 p, vec2 a, vec2 b){\n    float d = DistLine(p, a, b);\n    float m = S(.03, .01, d);\n    float d2 = length(a-b);\n    m *= S(1.2, .8, d2) *.5 + S(.05, .03, abs(d2-.75));\n    return m;\n}\n\nfloat Layer(vec2 uv){\n    float m = 0.;\n    vec2 gv = fract(uv) - 0.5;\n    vec2 id = floor(uv);        \n    \n    vec2 p[9];\n    \n    int i = 0;\n    for (float y=-1.; y<=1.; y++){\n        for (float x=-1.; x<=1.; x++){\n            p[i++] = GetPos(id, vec2(x, y));\n        }\n    }\n    \n    float t = iTime * 10.;\n    \n    for (int i=0; i<9; i++){\n        m += Line(gv, p[4], p[i]);\n        \n        vec2 j = (p[i]-gv)*20.;\n        float sparkle = 1./dot(j, j);\n        \n        m += sparkle * (sin(t + fract(p[i].x)*10.) * .5 + .5);\n    }\n    \n    m += Line(gv, p[1], p[3]);\n    m += Line(gv, p[1], p[5]);\n    m += Line(gv, p[7], p[3]);\n    m += Line(gv, p[7], p[5]);\n    \n    return m;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;    \n    \n    vec2 mouse = (iMouse.xy / iResolution.xy) -.5;\n    \n    float gradient = uv.y;\n    \n    float m = 0.;    \n    float t = iTime * .1;\n    \n    float s = sin(t);\n    float c = cos(t);\n    \n    mat2 rot = mat2(c, -s, s, c);\n    \n    uv *= rot;\n    mouse *= rot;\n    \n    for (float i=0.; i<=1.; i+=1./4.) {\n        float z = fract(i+t);\n        float size = mix(10., .5, z);\n        float fade = S(0., 0.5, z) * S(1., .8, z);\n        m += Layer(uv * size + i*20. - mouse) * fade;\n    }\n    \n    vec3 base = sin(t*5.*vec3(.345, .456, .657)) *.4 + .6;\n    vec3 col = m*base; \n    float fft = texelFetch(iChannel0, ivec2(.7, 0), 0).x;\n    //gradient *= fft;\n    col -= gradient*base;\n    \n    //if (gv.x > .48 || gv.y > .48) col = vec3(1, 0, 0);    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}