{"ver":"0.1","info":{"id":"msyBz1","date":"1697912780","viewed":74,"name":"Fluid-like visuals from box blur","username":"hope","description":"This shader was an attempt at a fluid sim, what I got was interesting anyway.  This shader repeatedly applies a convolutional box blur on every frame and offsets the kernel based on the colour to create the flowing motion you see.  Then dampen (use mouse)","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["boxblur","convolution","fluidsim","interactable"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    fragColor = vec4(texture(iChannel0, uv).rgb, 1.);\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    \n    float range = 1.;\n    \n    float damp = .9;\n    \n    vec2 vol = vec2(0.) + texture(iChannel0, fragCoord/iResolution.xy).rg*2.-1.;\n    \n    if (length(iMouse.xy - fragCoord) <= 20.) {\n        vol = vec2(-10.,10.);   //Change around this colour here\n    }\n    \n    float i = 0.;\n    \n    if (length(iMouse.xy - fragCoord) < 5. && iMouse.z == 1.) {\n        vol = vec2(1.);\n    }\n    \n    for (float y = -range; y < range+1.; y++) {\n        for (float x = -range; x < range+1.; x++) {\n            \n            vol += texture(iChannel0, (fragCoord + vec2(x, y) - vol)/iResolution.xy).rg*2.-1.;\n            i += 1.;\n            \n        }\n    }\n    \n    vol *= damp;\n    vol /= i;\n    vol += 1.;\n    vol /= 2.;\n    \n    fragColor = vec4(vol, 0., 1.);//clamp(0.5 - (vol.x+vol.y)/2., 0., 1.), 1.);\n    \n}","name":"Buffer A","description":"","type":"buffer"}]}