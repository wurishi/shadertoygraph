{"ver":"0.1","info":{"id":"dsy3Dz","date":"1678391903","viewed":109,"name":"Bilinear extrapolation","username":"jtomsu","description":"MOUSE: visualize the color length\nThis is just a little experiment. A while ago I had to write some bilinear and trilinear interpolation code on the CPU so I just wanted to visualize the colors :))\nThe circles show the actual colors which are interpolated","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["interpolation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void colorPoint(vec2 uv, vec2 p, vec3 col, inout vec3 target) {\n    vec2 ratio = vec2(iResolution.x / iResolution.y, 1.0);\n    float len = length((uv - p) * ratio);\n    const float r = 0.05;\n    if(len < r) {\n        target = col;\n    }\n    target *= smoothstep(abs(len - r), 0.0, 0.002);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec2 lower = vec2(0.3, 0.3);\n    vec2 upper = vec2(0.7, 0.7);\n    \n    vec3 col00 = vec3(0.3, 0, 0);\n    vec3 col01 = vec3(1, 0.5, 0);\n    vec3 col10 = vec3(0.5, 0.5, 0.5);\n    vec3 col11 = vec3(0.5, 1.0, 0);\n    \n    vec2 delta = vec2(uv - lower) / (upper - lower);\n    vec2 oneMinusDelta = 1.0 - delta;\n    \n    // Bilinear interpolation\n    vec3 col0 = col00 * oneMinusDelta.x + col10 * delta.x;\n    vec3 col1 = col01 * oneMinusDelta.x + col11 * delta.x;\n    \n    vec3 col = col0 * oneMinusDelta.y + col1 * delta.y;\n    \n    if(iMouse.z > 0.5) {\n        col = vec3(round(length(col) * 15.0) / 25.0); // vec3(dot(col, vec3(0.299, 0.587, 0.114)));\n    }\n    \n    // Lines\n    col *= smoothstep(abs(uv.x - lower.x), 0.0, 0.001);\n    col *= smoothstep(abs(uv.x - upper.x), 0.0, 0.001);\n    col *= smoothstep(abs(uv.y - lower.y), 0.0, 0.001);\n    col *= smoothstep(abs(uv.y - upper.y), 0.0, 0.001);\n    \n    // Color points\n    colorPoint(uv, lower, col00, col);\n    colorPoint(uv, vec2(lower.x, upper.y), col01, col);\n    colorPoint(uv, vec2(upper.x, lower.y), col10, col);\n    colorPoint(uv, upper, col11, col);\n    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}