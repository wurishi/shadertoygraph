{"ver":"0.1","info":{"id":"dtfGWH","date":"1671678898","viewed":115,"name":"Noisy Contours","username":"gee8sh","description":"Nothing fancy. The same kind of fractalish noise I used in my other shader \"Fractalish Planet\".","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = atan(0.0, -1.0);\n\nconst float animationSpeed = 1.0 / 32.0;\n\n// Noise params\nconst uint depth = 8u;\nconst float spaceScale = sqrt(2.0);\nconst float noiseScale = 1.0 / spaceScale;\nconst float scale = \n    (1.0 - noiseScale) / \n    (1.0 - pow(noiseScale, float(depth) + 1.0));\n\nfloat base(in vec3 v) {\n    vec3 alias = 2.0 * fract(0.5 * v) - 1.0;\n    vec3 a = abs(alias);\n    vec3 s = smoothstep(0.0, 1.0, a);\n    return s.x * s.y * s.z;\n}\n\nfloat noise(in vec3 pos, mat3 matrix, vec3 displacement) {\n    vec3 v = pos;\n    mat3 m = matrix;\n    float s = noiseScale;\n    float result = base(v);\n    for (uint i = 1u; i < depth; i++) {\n        v = spaceScale * matrix * v + displacement;\n        float r = base(v);\n        result += s * r;\n        m *= matrix;\n        s *= noiseScale;\n    }\n    return result * scale;\n}\n\nmat3 rotation() {\n    float angle = iTime * PI * animationSpeed;\n    float s1 = sin(angle / 5.0);\n    float c1 = cos(angle / 5.0);\n    float s2 = sin(angle / 53.0);\n    float c2 = cos(angle / 53.0);\n    return mat3(\n        vec3( c1,  s1, 0.0),\n        vec3(-s1,  c1, 0.0),\n        vec3(0.0, 0.0, 1.0)\n    ) * mat3(\n        vec3(1.0, 0.0, 0.0),\n        vec3(0.0,  c1,  s1),\n        vec3(0.0, -s1,  c1)\n    );\n}\n\nvec2 pixelCoordinates(in vec2 fragCoord, in float halfPixelSize) {\n    float aspect = iResolution.x * halfPixelSize;\n    return 2.0 * halfPixelSize * fragCoord - vec2(aspect, 1.0);\n}\n\nfloat sampleNoise(in vec2 xy, mat3 matrix, vec3 displacement) {\n    vec3 v = vec3(xy, -1.0);\n    float n = noise(rotation() * v, matrix, displacement);\n    return fract(n * 48.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float halfPixelSize = 1.0 / iResolution.y;\n\n    vec3 displacement = vec3(0.6, 0.5, 0.4);\n    vec3 i = normalize(vec3(1.0, 2.0, 3.0));\n    vec3 k = normalize(cross(i, i.zxy));\n    vec3 j = normalize(cross(k, i));\n    mat3 matrix = mat3(i, j, k);\n\n    vec2 xy = pixelCoordinates(fragCoord, halfPixelSize);\n    \n    // Anti-aliasing\n    float n = 0.25 * (\n        sampleNoise(xy, matrix, displacement) +\n        sampleNoise(xy + halfPixelSize * vec2(1.0, 0.0), matrix, displacement) +\n        sampleNoise(xy + halfPixelSize * vec2(0.0, 1.0), matrix, displacement) +\n        sampleNoise(xy + halfPixelSize * vec2(1.0, 1.0), matrix, displacement)\n    );\n\n    // Output to screen\n    fragColor = sqrt(n) * vec4(0.2, 0.4, 0.8, 1.0);\n}","name":"Image","description":"","type":"image"}]}