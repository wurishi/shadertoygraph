{"ver":"0.1","info":{"id":"tsKcR1","date":"1603699115","viewed":497,"name":"3D Structured Cloud Sampling","username":"Rakosi","description":"Original: https://www.shadertoy.com/view/Mt3GWs by huwb\n\nThe region is divided into 3D sampling positions that are repeated on parallel planes.\nWhen marching, the point on the closest plane is considered. This eliminates aliasing when moving / rotating.","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["volume","clouds","sampling","structed"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// This work is a modification of https://www.shadertoy.com/view/Mt3GWs by huwb\n\n// by sending rays through bevelled cube faces. \n// 4 normals are considered to cover all directions: 1 for axes, 3 for planes between axes\n\n//The noise,mapping logic and ray marching (except for choosing \"t\") are taken as-is without any modifications\n\n#define SAMPLE_COUNT 40\n#define PERIOD 1.\n#define M_PI 3.141592657\n\n// mouse toggle\nbool STRUCTURED;\n\n// cam moving in a straight line\nvec3 sundir;\n\n// LUT based 3d value noise\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n    \n    vec2 uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;\n    vec2 rg = textureLod( iChannel0, (uv+ 0.5)/256.0, 0.0 ).yx;\n    return mix( rg.x, rg.y, f.z );\n}\n\n\nvec4 map( in vec3 p )\n{\n\tfloat d = 0.1 + .8 * sin(0.6*p.z)*sin(0.5*p.x) - p.y;\n\n    vec3 q = p;\n    float f;\n    \n    f  = 0.5000*noise( q ); q = q*2.02;\n    f += 0.2500*noise( q ); q = q*2.03;\n    f += 0.1250*noise( q ); q = q*2.01;\n    f += 0.0625*noise( q );\n    d += 2.75 * f;\n\n    d = clamp( d, 0.0, 1.0 );\n    \n    vec4 res = vec4( d );\n    \n    vec3 col = 1.15 * vec3(1.0,0.95,0.8);\n    col += vec3(1.,0.,0.) * exp2(res.x*10.-10.);\n    res.xyz = mix( col, vec3(0.7,0.7,0.7), res.x );\n    \n    return res;\n}\n\n// to share with unity hlsl\n#define float2 vec2\n#define float3 vec3\n#define fmod mod\nfloat mymax (float3 x) {return max(x.x, max(x.y, x.z));}\nfloat mymin (float3 x) {return min(x.x, min(x.y, x.z));}\n\n// compute ray march start offset and ray march step delta and blend weight for the current ray\nvec4 SetupSampling( out vec4 t, out vec4 dt, out vec4 wt, in float3 ro, in float3 rd )\n{    \n    if( !STRUCTURED )\n    {\n        dt = vec4(PERIOD);\n        t = dt;\n        wt = vec4(0.25);\n        return t;\n    }\n    \n    //Every possible direction under each normal type are orthogonal   \n    \n    //Axis planes\n    vec3 n0 = vec3(rd.x * float(abs(rd.x) > abs(rd.y)),\n              rd.y * float(abs(rd.y) > abs(rd.x)),\n              rd.z);\n    n0 = vec3(n0.xy * float(abs(n0.z) < max(abs(n0.x), abs(n0.y))),\n              n0.z  * float(abs(n0.z) > max(abs(n0.x),abs(n0.y))));\n    n0 = normalize(n0);\n    \n    vec3 n1 = float3(sign(rd.x), 0., sign( rd.z )); // XZ diagonals\n    vec3 n2 = float3(sign(rd.x), sign( rd.y ), 0.); //XY diagonals\n    vec3 n3 = float3(0., sign( rd.y ), sign( rd.z )); //YZ diagonals\n        \n    // normal lengths\n    vec4 ln = vec4(length( n0 ), length( n1 ), length( n2 ), length(n3));\n    n0 = normalize(n0);\n    n1 = normalize(n1);\n    n2 = normalize(n2);    \n    n3 = normalize(n3);\n\n    // some useful DPs\n    vec4 ndotro = vec4(dot( ro, n0 ), dot( ro, n1 ), dot(ro, n2), dot(ro, n3));\n    vec4 ndotrd = vec4(dot( rd, n0 ), dot( rd, n1 ), dot(rd, n2), dot(rd, n3));\n\n    // step size\n    // Gets smaller for planes that are orthogonal to the ray\n    // As we always take step until the next closest sample, sample size is independent for each plane type\n    vec4 period = ln * PERIOD;\n    dt = period / abs( ndotrd );\n   \n    // raymarch start offset - skips leftover bit to get from ro to first strata lines\n    t = -sign( ndotrd ) * fmod( ndotro, period ) / abs(ndotrd);\n\n    if( ndotrd.x > 0. ) t.x += dt.x;\n    if( ndotrd.y > 0. ) t.y += dt.y;\n\tif( ndotrd.z > 0. ) t.z += dt.z;\n    if( ndotrd.w > 0. ) t.w += dt.w;\n    \n    // sample weights\n    float minperiod = PERIOD;\n    \n    //This is related to maximum length between parallel lines, sqrt2 for diagonals\n    float maxperiod = sqrt(2.) * PERIOD;\n    wt = smoothstep( maxperiod, minperiod, dt / ln );\n\n    wt /= (wt.x + wt.y + wt.z + wt.w);\n    \n    return vec4(wt);\n}\n\nvec4 raymarch( in vec3 ro, in vec3 rd )\n{\n    vec4 sum = vec4(0, 0, 0, 0);\n    \n    // setup sampling - compute intersection of ray with 2 sets of planes\n    vec4 t, dt;\n    vec4 wt;\n\tSetupSampling( t, dt, wt, ro, rd );\n    \n    // fade samples at far extent\n    float f = .6; // magic number - TODO justify this\n    float endFade = f*float(SAMPLE_COUNT)*PERIOD;\n    float startFade = .8*endFade;\n    \n    for(int i=0; i<SAMPLE_COUNT; i++)\n    {\n        if( sum.a > 0.99 ) continue;\n        \n        vec3 pos;\n        float w;\n        \n        vec4 dataT = vec4(float(t.x <= t.y),\n                          float(t.y < t.x),\n                          float(t.z <= t.w),\n                          float(t.w < t.z));\n\n        dataT = vec4(dataT.xy * float(min(t.z, t.w) >= min(t.x, t.y)),\n                     dataT.zw * float(min(t.z, t.w) < min(t.x, t.y)));\n\n        pos = ro + length(t * dataT) * rd;\n        w = length(wt * dataT);\n        \n        // fade samples at far extend\n        w *= smoothstep( endFade, startFade, length(t * dataT) );\n\n        t += dataT * dt;   \n        \n        vec4 col = map( pos );\n        \n        // iqs goodness\n        float dif = clamp((col.w - map(pos+0.6*sundir).w)/0.6, 0.0, 1.0 );\n        vec3 lin = vec3(0.51, 0.53, 0.63)*1.35 + 0.55*vec3(0.85, 0.57, 0.3)*dif;\n        col.xyz *= lin;\n        \n        col.xyz *= col.xyz;\n        \n        col.a *= 0.75;\n        col.rgb *= col.a;\n\n        // integrate. doesn't account for dt yet, wip.\n        sum += col * (1.0 - sum.a) * w;\n    }\n\n    sum.xyz /= (0.001+sum.w);\n\n    return clamp( sum, 0.0, 1.0 );\n}\n\nvec3 sky( vec3 rd )\n{\n    vec3 col = vec3(0.);\n    \n    float hort = 1. - clamp(abs(rd.y), 0., 1.);\n    col += 0.5*vec3(.99,.5,.0)*exp2(hort*8.-8.);\n    col += 0.1*vec3(.5,.9,1.)*exp2(hort*3.-3.);\n    col += 0.55*vec3(.6,.6,.9);\n    \n    float sun = clamp( dot(sundir,rd), 0.0, 1.0 );\n    col += .2*vec3(1.0,0.3,0.2)*pow( sun, 2.0 );\n    col += .5*vec3(1.,.9,.9)*exp2(sun*650.-650.);\n    col += .1*vec3(1.,1.,0.1)*exp2(sun*100.-100.);\n    col += .3*vec3(1.,.7,0.)*exp2(sun*50.-50.);\n    col += .5*vec3(1.,0.3,0.05)*exp2(sun*10.-10.); \n    \n    float ax = atan(rd.y,length(rd.xz))/1.;\n    float ay = atan(rd.z,rd.x)/2.;\n    float st = texture( iChannel0, vec2(ax,ay) ).x;\n    float st2 = texture( iChannel0, .25*vec2(ax,ay) ).x;\n    st *= st2;\n    st = smoothstep(0.65,.9,st);\n    col = mix(col,col+1.8*st,clamp(1.-1.1*length(col),0.,1.));\n    \n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // click mouse to use naive raymarching\n    STRUCTURED = iMouse.z <= 0.;\n    sundir = normalize(vec3(-1.0,0.0,-1.));\n\n    vec2 q = fragCoord.xy / iResolution.xy;\n    vec2 p = -1.0 + 2.0*q;\n    p.x *= iResolution.x/ iResolution.y;\n    vec2 mo = -1.0 + 2.0*iMouse.xy / iResolution.xy;\n   \n    // camera\n    vec3 lookDir = vec3(cos(.53*iTime), cos(0.5*iTime) - 0.5 ,sin(iTime));    \n\n    vec3 camVel = vec3(-2.,0.,0.);\n\n    vec3 ro = vec3(0.0, cos(iTime) + 1.0, 0.0) + iTime*camVel;    \n\n    vec3 ta = ro + lookDir; //vec3(ro.x, ro.y, ro.z-1.);\n    vec3 ww = normalize( ta - ro);\n    vec3 uu = normalize(cross( vec3(0.0,1.0,0.0), ww ));\n    vec3 vv = normalize(cross(ww,uu));\n    float fov = 1.;\n    vec3 rd = normalize( fov*p.x*uu + fov*1.2*p.y*vv + 1.5*ww );\n    \n    // divide by forward component to get fixed z layout instead of fixed dist layout\n    vec3 rd_layout = rd/mix(dot(rd,ww),1.0,0.0);\n    vec4 clouds = raymarch( ro, rd );\n    \n    vec3 col = clouds.xyz;\n        \n    // sky if visible\n    if( clouds.w <= 0.99 )\n\t    col = mix( sky(rd), col, clouds.w );\n    \n\tcol = clamp(col, 0., 1.);\n    col = smoothstep(0.,1.,col);\n\tcol *= pow( 16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.12 ); //Vign\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}