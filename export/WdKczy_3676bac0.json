{"ver":"0.1","info":{"id":"WdKczy","date":"1603146950","viewed":230,"name":"Angle reflection, letter M","username":"henrmota","description":"Experiment following lessons from The art of code on youtube","likes":3,"published":3,"flags":0,"usePreview":0,"tags":["reflection"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGRr","filepath":"/media/a/d96b229eeb7a08d53adfcf1ff89e54c9ffeebed193d317d1a01cc8125c0f5cca.mp3","previewfilepath":"/media/ap/d96b229eeb7a08d53adfcf1ff89e54c9ffeebed193d317d1a01cc8125c0f5cca.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14115\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy)/iResolution.y;\n\t/*\n    vec2 mouse = iMouse.xy / iResolution.xy;\n    float angle = mouse.x * PI;\n    \n   \t\n    vec2 rotation = vec2(sin(angle), cos(angle));\n    float d = dot(uv, rotation);\n    uv -= min(d,0.)*rotation*2.0;\n    \n    // Time varying pixel color\n    vec3 col = vec3(1. - step(1./iResolution.y, abs(d/3.)));\n\tcol.rg += cos(uv * 60.);\n    */\n    \n    uv *= 4.0;\n    \n    vec3 col = vec3(0);\n\n    vec2 mouse = iMouse.xy / iResolution.xy;\n    float angle = (2./3.)* PI;\n    \n   \t\n    vec2 rotation = vec2(sin(angle), cos(angle));\n    \n    uv.x = abs(uv.x);\n \tuv.x -= 0.5;\n    uv -= min(dot(uv, rotation),0.)*rotation*2.0;\n    float d = distance(uv, vec2(clamp(uv.x, -1., 1.), 0.));\n   \n    col += smoothstep(2./iResolution.y, 0.0, d/3.);\n    // Output to screen\n    vec4 music = texture(iChannel0, abs(uv.xx));\n    fragColor = max(\n        texture(iChannel1, abs(uv)),\n        mix(music.xyyw, music.yyxw, abs(sin(iTime)))\n    ) + (music.yxyw * abs(sin(iTime)));\n    // Uncomment below to see the underlying reflection\n    //fragColor = vec4(vec3(smoothstep(0.03, 0., d)), 1.0);\n}","name":"Image","description":"","type":"image"}]}