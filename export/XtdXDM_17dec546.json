{"ver":"0.1","info":{"id":"XtdXDM","date":"1479983275","viewed":207,"name":"Circle rotation","username":"gigatron","description":"Watching iq youtube shadertoy tutorial... and played quickly with circle distance length !","likes":2,"published":1,"flags":64,"usePreview":0,"tags":["circle","iq","rotation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"MdBGDh","filepath":"https://soundcloud.com/arcade-music-tribute/hybris","previewfilepath":"https://soundcloud.com/arcade-music-tribute/hybris","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// (c) Gigat(ronAN) France  24/11/2016 ;\n#define time iTime\n\n#define tex   // textured ?\n\n\n  \t\n\n\n\nvec2 rotation(in float angle,in vec2 position,in vec2 center)\n{\n    //Function seen from https://www.shadertoy.com/view/XlsGWf\n    float rot = radians(angle);\n    mat2 rotation = mat2(cos(rot), -sin(rot), sin(rot), cos(rot));\n    return vec2((position-center)*rotation);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = fragCoord.xy / iResolution.xy;\n    \n    fragColor = vec4(0.,.0,0.,0.);// ios !\n    \n    \n    float a_xz =  0.002+time*0.02;\n  \t float a_yz = 0.002+time*1.08;\n \t float a_xy = 0.002*time*0.28;\n\t// stolen rotation formula \n \t mat2 rot_xz = mat2(cos(a_xz),sin(a_xz),-sin(a_xz),cos(a_xz));\t\n \t mat2 rot_yz = mat2(cos(a_yz),sin(a_yz),-sin(a_yz),cos(a_yz));\t\t\n \t mat2 rot_xy = mat2(cos(a_xy),sin(a_xy),-sin(a_xy),cos(a_xy));\n    \n    \n    \n       \n \tvec2 q = p*2.-1.  ; // center draw inside this vector ;\n    q.x *=iResolution.x/iResolution.y*.95;\t\n           \n\t q *=-rot_xz;\n    \n    q  *=-0.1+rot_yz+0.2*sin(time*0.02 )*0.002 ;\n\t \n      vec2  tuv = vec2(fract((p*2.-1.)*0.2));\n      tuv =rotation(time*20.,p*2.-1.,vec2(0.,0.));\n      vec3 tx = texture(iChannel1,  tuv).rgb;\n      vec3 col =vec3(0.5,0.5,1.00); // IQ colors\n \t   #ifdef tex\n       col /=tx ;   // enable texture \n       #endif \n    \n\tfloat r = 0.008;\n    for(float i= 0.0;i<46.0;i++){   //0-46 xx\n\t   for(float j= 0.0;j<36.0;j++){ // 0-36 yy \n\t   \n    col *= smoothstep( r, r+j/600., length( q-vec2(-0.9+i/60.0, 0.90-j/20.))/j*36. );\n    \n    q *=rot_xy;\n  \t  \n        \n   \t }\n\t}   \n    \n    col -=vec3(p.x,p.x,p.y*0.8);\n    col.zx *=rot_xz*sin(time)-p.y;\n\n\tfragColor = 0.2-vec4(col,1.0);\n\t\n// vector calculation is now much faster ... paranoimia amiga intro\n// End of Transmission;    \n  \n}\n\n/* Britney iChannel0 \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 tex = texture(iChannel0, uv * vec2(1, 1)).rgba;\n    \n    float l = tex.r * 0.22 + tex.g * 0.11 + tex.b * 0.11;\n   \n    \n    float d = tex.t*8. ;\n  \n    if(tex.g<0.299) l = step(1.0 - l, mod(d, 1.2));\n   \n    \n     fragColor = vec4(tex+l);\n}\n*/","name":"Image","description":"","type":"image"}]}