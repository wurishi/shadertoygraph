{"ver":"0.1","info":{"id":"Mf3GzH","date":"1711376316","viewed":57,"name":"Scottish Tartan Patterns Ex.","username":"billrockx","description":"The Book of Shade Exercise.\nCombine different layers of patterns to compose your own Scottish Tartan Patterns.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["tbos"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265358979323846\n\nvec2 rotate2D(vec2 st, float angle){\n    st -= 0.5;\n    st =  mat2(cos(angle),-sin(angle),\n                sin(angle),cos(angle)) * st;\n    st += 0.5;\n    return st;\n}\n\nvec2 tile(vec2 st, float zoom){\n    st *= zoom;\n    return fract(st);\n}\n\nfloat box(vec2 _st, vec2 _size){\n    _size = vec2(0.5)-_size*0.5;\n    vec2 uv = step(_size,_st);\n    uv *= step(_size,vec2(1.0)-_st);\n    return uv.x*uv.y;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 st = fragCoord.xy/iResolution.xy;\n    vec3 color = vec3(0.0);\n\n    st = rotate2D(st, PI/6.0);\n    \n    st = tile(st,2.);\n    color += (vec3(box(st, vec2(1.1))) - vec3(box(st, vec2(0.9)))) * vec3(0.0, 1.0, 1.0);\n    \n    color -= max(vec3(0.9), color);\n    \n    st = tile(st, 3.0);\n    color += vec3(box(st,vec2(0.5)));\n    color += vec3(box(st,vec2(1.0, 0.5)));\n    color += vec3(box(st,vec2(0.5, 1.0)));\n\n    st = tile(st, 20.0);\n    color += vec3(box(st,vec2(0.5)));\n\n    color = 1.0 - color;\n\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}