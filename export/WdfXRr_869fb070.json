{"ver":"0.1","info":{"id":"WdfXRr","date":"1550413299","viewed":665,"name":"Raymarch Mandelbulb","username":"darkeclipz","description":"Raymarching the Mandelbulb. For more info, see: http://blog.hvidtfeldts.net/index.php/2011/09/distance-estimated-3d-fractals-v-the-mandelbulb-different-de-approximations/\n\nWith a 3D Mandelbrot :)","likes":16,"published":1,"flags":0,"usePreview":0,"tags":["raymarch","mandelbulb"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define R iResolution.xy\n#define MaxSteps 64.\n#define MinDistance 0.0007\n#define eps 0.001\n\nmat3 rotateX(float angle) {\n\tfloat c = cos(angle), s = sin(angle);\n    return mat3(1, 0, 0, 0, c, -s, 0, s, c);\n}\n\nmat3 rotateY(float angle) {\n\tfloat c = cos(angle), s = sin(angle);\n    return mat3(c, 0, -s, 0, 1, 0, s, 0, c);\n}\n\nmat3 rotateZ(float angle) {\n\tfloat c = cos(angle), s = sin(angle);\n    return mat3(c,-s,0,s,c,0,0,0,1);\n}\n\n// http://blog.hvidtfeldts.net/index.php/2011/08/distance-estimated-3d-fractals-iii-folding-space/\nvec2 DE(vec3 pos) {\n        \n    float Iterations = 64.;\n    float Bailout = 2.;\n    float Power = 6. - 4.*cos(iTime/16.);\n    \n    vec3 trap = vec3(0,0,0);\n    float minTrap = 1e10;\n    \n\tvec3 z = pos;\n\tfloat dr = 1.0;\n\tfloat r = 0.0;\n\tfor (float i = 0.; i < Iterations ; i++) {\n\t\tr = length(z);\n\t\tif (r>Bailout) break;\n        \n        minTrap = min(minTrap, z.z);\n\t\t\n\t\t// convert to polar coordinates\n\t\tfloat theta = acos(z.z/r);\n\t\tfloat phi = atan(z.y,z.x);\n\t\tdr =  pow( r, Power-1.0)*Power*dr + 1.0;\n\t\t\n\t\t// scale and rotate the point\n\t\tfloat zr = pow( r,Power);\n\t\ttheta = theta*Power;\n\t\tphi = phi*Power;\n\t\t\n\t\t// convert back to cartesian coordinates\n\t\t//z = zr*vec3(sin(theta)*cos(phi), sin(phi)*sin(theta), cos(theta));\n        z = zr*vec3( cos(theta)*cos(phi), cos(theta)*sin(phi), sin(theta) );\n\t\tz+=pos;\n\t}\n\treturn vec2(0.5*log(r)*r/dr, minTrap);\n}\n\nvec2 scene(vec3 p) {\n    \n\treturn DE(p - vec3(0,.1,0));\n}\n\nfloat shadowScene(vec3 p){\n\treturn DE(p - vec3(0,.1,0)).x;\n}\n\n// from iq\nvec3 calcNormal(vec3 p) {\n    float h = 0.001;\n    vec2 k = vec2(1,-1);\n    vec3 n = normalize( k.xyy*scene( p + k.xyy*h ).x + \n                  k.yyx*scene( p + k.yyx*h ).x + \n                  k.yxy*scene( p + k.yxy*h ).x + \n                  k.xxx*scene( p + k.xxx*h ).x );    \n    return n;\n}\n\n// ro: ray origin, rd: ray direction\n// returns t and the occlusion as a vec2\nvec3 march(vec3 ro, vec3 rd) {\n    float t = 0., i = 0.;\n    for(i=0.; i < MaxSteps; i++) {\n    \tvec3 p = ro + t * rd;\n        vec2 hit = scene(p);\n        float dt = hit.x;\n        t += dt;\n        if(dt < MinDistance) {\n        \treturn vec3(t-MinDistance, 1.-i/MaxSteps, hit.y);  \n        }\n    }\n    return vec3(0.);\n}\n\nfloat marchShadow(vec3 ro, vec3 rd) {\n\tfloat t = 0., i = 0.;\n    for(i=0.; i < MaxSteps; i++) {\n    \tvec3 p = ro + t * rd;\n        float dt = shadowScene(p);\n        t += dt;\n        if(dt < MinDistance) {\n        \treturn t-MinDistance;    \n        }\n    }\n    return 0.;\n}\n\n// https://en.wikipedia.org/wiki/Blinn%E2%80%93Phong_shading_model\nvec3 shadeBlinnPhong(vec3 p, vec3 viewDir, vec3 normal, vec3 lightPos, float lightPower, vec3 lightColor) {\n    vec3 diffuseColor = vec3(0.5);\n    vec3 specColor = vec3(1);\n    float shininess = 16.;\n\n    vec3 lightDir = lightPos - p;\n    float dist = length(lightDir);\n    dist = dist*dist;\n    lightDir = normalize(lightDir);\n    \n    float lambertian = max(dot(lightDir, normal), 0.0);\n    float specular = .0;\n    \n    if(lambertian > 0.) {\n        viewDir = normalize(-viewDir);\n        \n        vec3 halfDir = normalize(viewDir + lightDir);\n        float specAngle = max(dot(halfDir, normal), .0);\n        specular = pow(specAngle, shininess);\n    }\n    \n    vec3 color = /*ambientColor +*/\n                 diffuseColor * lambertian * lightColor * lightPower / dist +\n        \t\t specColor * specular * lightColor * lightPower / dist;\n    \n   \treturn color;\n}\n\n// p: point, sn: surface normal, rd: ray direction (view dir/ray from cam)\nvec3 light(vec3 p, vec3 sn, vec3 rd) {\n    vec3 top = shadeBlinnPhong(p, rd, sn, vec3(0,5,0), 20., vec3(.2));\n    \n    vec3 L1 = shadeBlinnPhong(p, rd, sn, vec3(5,-5,5), 30., vec3(.7));\n    vec3 L2 = shadeBlinnPhong(p, rd, sn, vec3(5,-5,-5), 30., vec3(.4));\n    vec3 L3 = shadeBlinnPhong(p, rd, sn, vec3(-5,-5,5), 30., vec3(.7));\n    vec3 L4 = shadeBlinnPhong(p, rd, sn, vec3(-5,-5,-5), 30., vec3(.4));\n    \n    vec3 ambient = vec3(.1);\n    return L1 + L2 + L3 + L4 + ambient + top;\n}\n\n// https://iquilezles.org/articles/palettes\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d ) {\n    return a + b*cos(6.28318 * (c*t + d));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-R)/R.y;\n    vec3 col = vec3(.0);\n    vec3 ro = vec3(0,0,-3); // ray origin\n    vec3 rd = normalize(vec3(uv.x, uv.y, 0) - ro); // ray direction\n    \n    mat3 rot = rotateX(iTime / 8.) * rotateZ(iTime / 8.) * rotateZ(iTime/4.);\n    \n    ro -= vec3(0,0,1.);\n    ro *= rot;\n    rd *= rot;\n    \n    vec3 hit = march(ro, rd); // returns t and the occlusion value \n    float t = hit.x;\n    \n    if(t > eps) {\n        vec3 p = ro + t * rd;\n    \tvec3 n = calcNormal(p);\n        \n        float trap = fract(hit.z*.5 + .5);\n        col = pal(trap, vec3(.5), vec3(0.5), \n                   vec3(1.0,1.0,1.0), vec3(.0, .10, .2));\n        \n        col *= .2;\n        \n        col += light(p, n, rd);\n        col *= hit.y;   // occlusion \n        \n        float shadow = marchShadow(p + 0.1*n, normalize(vec3(10,10,10) - p));\n        if(shadow > eps) {\n        \tcol = mix(col, vec3(0), .1);    \n        }\n        \n        float fog = 1. / (0.1 + t * t * 0.03);\n        col = mix(vec3(0), col, fog);\n    }\n    else {\n        vec3 topcolor = vec3(127./255., 161./255., 189./255.);\n        vec3 bottomcolor = vec3(84./255., 111./255., 138./255.);\n    \tcol = mix(bottomcolor, topcolor, uv.y);\n        col = vec3(0);\n    }\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}