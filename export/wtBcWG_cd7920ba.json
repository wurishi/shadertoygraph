{"ver":"0.1","info":{"id":"wtBcWG","date":"1595299451","viewed":5037,"name":"Cyclic randomized diffusion","username":"ciphered","description":"When playing with Cyclic DLA, I realized that a simplification to my system could be made with some sort of randomized diffusion. Nice patterns emerge from this solution that reminds me of the Belousov-Zhabotinsky reaction.","likes":16,"published":3,"flags":32,"usePreview":0,"tags":["random","diffusion","pattern","belousov","zhabotinsky","growth"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// @author ciphrd https://instagram.com/ciphrd\n// @license MIT\n//\n// When I was exploring Diffusion-Limited Aggregation, I tried to generate patterns that evolve over\n// time rather than a finite structure. I called this variation the Cyclic DLA, and I describe the \n// idea on my blog:\n// https://ciphered.xyz/2020/07/21/cyclic-diffusion-limited-aggregation/\n//\n// In this variation, the aggregate is subject to decay over time. Once a particle is in contact to\n// enough amount of aggregate, it gets added to it and then its position is randomized within the grid.\n// The particle can still play its role in the aggregation. \n//\n// I realized that when the ratio particles / cells in the aggregation grid gets close to 1, bsacially\n// any cell of the grid can be subject to aggregation. Therefore, it is possible to simulate the same\n// effect without particles, just by considering that a cell has a certain chance to \"aggregate\" at each\n// iteration.\n//\n\n\nfloat hash21 (vec2 n) { return fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453); }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float R = texture(iChannel0, uv).r;\n    vec3 col = vec3(R);\n    col.b*= length(col);\n    col.g*= length(col) - 1.;\n    col+= hash21(uv) * .12;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define DECAY 0.93\n\n\nfloat rand(vec2 n) { return fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453); }\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 res = 1. / iResolution.xy;\n\tvec2 uv = fragCoord * res;\n    \n    float T = min(iTime/60., 1.);\n    \n    if (iFrame < 20) {\n     \tfloat C = smoothstep(0.1, 0.09, length(uv-.5));\n        fragColor = vec4(C, 0., 0., 1.);\n        return;\n    }\n\t\n\tfloat r = 0.0;\n\tr+= texture(iChannel0, uv + vec2(-1,-1) * res).r;\n\tr+= texture(iChannel0, uv + vec2(0,-1) * res).r;\n\tr+= texture(iChannel0, uv + vec2(1,-1) * res).r;\n\tr+= texture(iChannel0, uv + vec2(1,0) * res).r;\n\tr+= texture(iChannel0, uv + vec2(1,1) * res).r;\n\tr+= texture(iChannel0, uv + vec2(0,1) * res).r;\n\tr+= texture(iChannel0, uv + vec2(-1,1) * res).r;\n\tr+= texture(iChannel0, uv + vec2(-1,0) * res).r;\n\t\n\t\n\tfloat tr = rand(uv + vec2(iTime*3., iTime*.2));\n\t\n\tvec4 color = texture(iChannel0, uv);\n\tfloat cr = color.r;\n\tcolor.r*= DECAY;\n\tif (r > 0.2 + 0.7*T && tr > .5 + 0.45 * min(T+.3, 1.) * -cos(uv.x*3.+iTime*.5) && cr < .0005) {\n\t\tcolor.r = 1.0;\n\t}\n    \n\tfragColor = color;\n}\n","name":"Buffer A","description":"","type":"buffer"}]}