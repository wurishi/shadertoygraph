{"ver":"0.1","info":{"id":"sd2czt","date":"1643962941","viewed":111,"name":"sea_ground","username":"kinakomoti","description":"sea","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float frandom(vec2 pos){\n    return fract(sin(dot(pos.xy, vec2(0.8239,0.13)))* 52341.0);\n}\n\nvec2 random2(vec2 st){\n    st = vec2( dot(st,vec2(127.1,311.7)),\n              dot(st,vec2(269.5,183.3)) );\n    return -1.0 + 2.0*fract(sin(st)*43758.5453123);\n}\n\nfloat voronoi(vec2 st){\n    vec2 i_st = floor(st);\n    vec2 f_st = fract(st);\n    float m_dist = 1.0;\n    for(int y = -1; y <= 1; y++)\n    {\n        for(int x = -1; x <= 1; x++)\n        {\n            vec2 neighbor = vec2(float(x),float (y));\n            vec2 point = random2(i_st + neighbor);\n            point = 0.5 + 0.5 * sin(iTime + 6.2391 * point);\n            vec2 diff = neighbor + point - f_st;\n\n            float dist = length(diff);\n            m_dist = min(m_dist,dist);\n        }\n    }\n    return m_dist;\n}\nmat2 rotate2D(float theta){\n    return mat2(cos(theta),sin(theta),-sin(theta),cos(theta));\n}\n\nfloat noise(vec2 st){\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    vec2 a = random2(i);\n    vec2 b = random2(i + vec2(1.0,0.0));\n    vec2 c = random2(i + vec2(0.0,1.0));\n    vec2 d = random2(i + vec2(1.0,1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(\n        mix(dot(a,f),dot(b,f-vec2(1.0,0.0)),u.x),\n        mix(dot(c,f - vec2(0.0,1.0)),dot(d,f-vec2(1.0,1.0)),u.x),u.y);\n}\n\nfloat noise2D (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = frandom(i);\n    float b = frandom(i + vec2(1.0, 0.0));\n    float c = frandom(i + vec2(0.0, 1.0));\n    float d = frandom(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\nfloat fbm(vec2 pos){\n    float value = 0.0;\n    float amplitude = 0.5;\n    float frequency = 0.5;\n    int OCTAVES = 6;\n    for(int i = 0; i < OCTAVES; i++){\n        value += amplitude * noise2D(pos);\n        pos *= 2.0;\n        amplitude *= 0.5;\n    }\n    return value;\n}\n\nfloat distPlane(vec3 p,vec3 n,float h){\n    return dot(p,n) + h;\n}\n    \nfloat dist_sphere(vec3 p){\n    return length(p) - 1.0;\n}\n\nfloat dist_func(vec3 p){\n    float d = distPlane(p,vec3(0,1,0),0.0);\n    d -= fbm(p.xz * 0.4) * 2.0;\n    return d;\n}\n\nvec3 getNormal(vec3 pos){\n    float ep = 0.0001;\n    return normalize(\n        vec3(\n            dist_func(pos) - dist_func(pos - vec3(ep,0.0,0.0)),\n            dist_func(pos) - dist_func(pos - vec3(0.0,ep,0.0)),\n            dist_func(pos) - dist_func(pos - vec3(0.0,0.0,ep))\n        )\n    );\n}\n\nfloat shadow(vec3 pos,vec3 dir,float tmin,float tmax){\n    for(float t = tmin; t<tmax;){\n        float h = dist_func(pos + dir*t);\n        if(h < 0.001){\n            return 0.0;\n        }\n        t += h;\n    } \n    return 1.0;\n}\n\nfloat softshadow(vec3 pos,vec3 dir,float tmin,float tmax,float k){\n    float res = 1.0;\n    for(float t = tmin; t <tmax;){\n        float h = dist_func(pos + dir*t);\n        if(h < 0.001){\n            return 0.0;\n        }\n        res = min(res, k * h/t);\n        t += h;\n    }\n    return res;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 pos = (fragCoord.xy * 2.0 - iResolution.xy)/iResolution.y;\n    vec3 color = vec3(0.0);\n\n    vec3 campos = vec3(iTime,3.0,4.0 + iTime);\n    vec3 camDir = normalize(vec3(sin(iTime * 0.1),0.0,-1.0));\n    vec3 camSide = cross(camDir,vec3(0,1,0));\n    vec3 camUp = cross(camSide,camDir);\n\n    vec3 ray = normalize(camSide * pos.x + camUp * pos.y + camDir);\n\n    float dist = 0.0;\n    float d_fog = 0.0;\n    float rLen = 0.0;\n    vec3 rPos = campos;\n\n    vec3 lightdir = normalize(vec3(-1,1,-1));\n    for(int i = 0; i < 100; i++){\n        dist = dist_func(rPos);\n        d_fog += dist;\n        rLen += dist;\n        rPos = campos + ray * rLen;\n    }\n    if(abs(dist) < 0.001){\n        vec3 normal = getNormal(rPos);\n        float shadow = softshadow(rPos,lightdir,0.1,50.0,0.5);\n        vec3 wi = ray;\n        vec3 wo = lightdir;\n        vec3 h = normalize(wi + wo);\n        float light = dot(h,normal);\n        \n        color = vec3(1.0,0.8,0.8) * light + shadow* vec3(0.0,0.0,0.3) + vec3(1.0) * voronoi(rPos.xz * 2.0) * voronoi(rPos.xz * 2.0);\n    } \n\n    float density = 0.05;\n    float fog = exp(-d_fog * density);\n    color = mix(vec3(0.2,0.2,0.8),color,fog);\n    fragColor = vec4(color,1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}