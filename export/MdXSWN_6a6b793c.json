{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"//\n// Description : Array and textureless GLSL 2D/3D/4D simplex\n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//\n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v)\n{\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289(i);\n  vec4 p = permute( permute( permute(\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\n                                dot(p2,x2), dot(p3,x3) ) );\n}\n\nconst int OCTAVE_COUNT = 5;\n\nfloat noise(vec3 pos) {\n\tfloat fResult = 0.0;\n\tfloat fPersMax = 0.0;\n\tfor (int g = 0; g < OCTAVE_COUNT; g++) {\n\t  float fFreq = pow(2.0, float(g));\n\t  float fPers = pow(0.5, float(g));\n      fPersMax += fPers;\n      fResult += fPers * snoise(fFreq*pos);\n\t}\n\treturn fResult / fPersMax + 0.5;\n}\n\n#define M_PI 3.1415926535897932384626433832795\n\n/*\n * Get the location in\n */\nvec2 getPerlinXY(vec2 coord, vec2 camera, float textureZoom, float cameraZoom) {\n\treturn textureZoom * (camera + coord / iResolution.xy / cameraZoom);\n}\n\nconst float WATER_LEVEL = 0.00001;\n\n/*\n * The input is 0..1.  We want to spread it out to make sharp mountains and long plains.\n */\nfloat shapeLandscape(float height) {\n\treturn pow(3.0 * height - 1.5, 13.0);\n}\n\nfloat shapeWater(float height) {\n\treturn height;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t// Pixel coordinates is cool, but I'd rather have -0.5..0.5 in either direction.\n\tvec2 mouseDeflection = vec2(iMouse.x / iResolution.x - 0.5, iMouse.y / iResolution.y - 0.5);\n\n\t// We'll use the sun to control some lighting.\n\tvec3 sunDirection = normalize(vec3(2.0 * sin(2.0 * iTime), 1.0, -2.0));\n\n    vec3 camera_offset = vec3(mouseDeflection.x * iTime,\n\t\t\t\t\t\t\t  mouseDeflection.y * iTime,\n\t\t\t\t\t\t\t  0.0);\n\n\tvec2 land_offset  = getPerlinXY(fragCoord.xy, camera_offset.xy, 2.0,  1.0);\n\tvec2 water_offset = getPerlinXY(fragCoord.xy, camera_offset.xy, 60.0, 1.0);\n\tvec2 cloud_offset = getPerlinXY(fragCoord.xy, camera_offset.xy, 2.0,  3.0);\n\n\t// Cool.  We now know where all the pieces are.  So let's figure out our color:\n\tvec4 color = vec4(0.0,0.0,0.0,0.0);\n\n\t// First the land.\n\n\t// We need to get the normal, so we'll be doing an extra sample.\n\t// But this is a cheap normal.  We're only concerned about the angle with the sun,\n\t// so we only sample along that direction.\n\tfloat land_altitude = shapeLandscape(noise(vec3(land_offset, 0.0)));\n\tvec2 slope_sample_offset = getPerlinXY(fragCoord.xy + sunDirection.xy, camera_offset.xy, 2.0, 1.0);\n\tvec3 land_normal = vec3(slope_sample_offset - land_offset,\n\t\t\t\t\t\t\tshapeLandscape(noise(vec3(slope_sample_offset, 0.0))) - land_altitude);\n\tland_normal = normalize(vec3(-land_normal.x, land_normal.y, land_normal.z));\n\n\tvec4 ambient_land = vec4(0.23, 0.12, 0.05, 1.0);\n\tvec4 diffuse_land = vec4(0.53, 0.52, 0.35, 1.0);\n\tcolor = ambient_land + dot(sunDirection, land_normal) * diffuse_land;\n\n\t// Are we underwater?  If we are, mix it heavily with the water texture.  The depth\n\t// of the water determines how much water color gets mixed in.\n\tfloat water_depth = WATER_LEVEL - land_altitude;\n\tvec4 water_color = vec4(0.25, 0.44, 0.64, 1.0);\n\tvec4 water_highlight = vec4(1.0, 1.0, 1.0, 1.0) * shapeWater(noise(vec3(water_offset, iTime * 1.5)));\n\tif (water_depth > 0.0) {\n\t\tcolor = mix(color, water_color, 1.0) + 0.2 * water_highlight;\n\t}\n\n\t// Mix in the cloud cover.  We'll restrict this to a certain altitude, but for now\n\t// I just want to see the clouds.  To make them puffy, I raise the perlin result to an\n\t// odd power (odd so that I can keep the negative values).  Now clouds in my world are\n\t// always white.  :-)  The cloud color just sets the transparency.\n\tfloat cloud_alpha = pow(noise(vec3(cloud_offset, 0.05 * iTime)), 3.0);\n\tcolor = mix(color, vec4(1.0, 1.0, 1.0, 1.0), cloud_alpha);\n\n\tfragColor = color;\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MdXSWN","date":"1401175074","viewed":317,"name":"Platypus Perlin Terrain 2","username":"dancingplatypus","description":"Lambertian diffuse lighting without texture (hence the clay look).  Used a cubed perlin texture for the land.  Added some clouds and a water level to make it presentable.  The light source swings back and forth to prove that my normal sampling works.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["procedural","terrain","perlin"],"hasliked":0,"parentid":"","parentname":""}}