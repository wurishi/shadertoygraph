{"ver":"0.1","info":{"id":"msVXD3","date":"1681735535","viewed":66,"name":"Animation et déplacement.","username":"zaka12106670","description":"Animation de surface paramétré et déplacement rectiligne ","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["tpanim"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Encadré par Eric Galin\n// Réalisé par zakaria barka\n// Texturing\nconst float View = 2800.0;  // View distance\n\nconst int Steps = 200;      // Number of steps\nconst float Epsilon = 0.01; // Marching epsilon\n\n\n\n// Structure for objects\n// v : Field value\n// i : Texture index\nstruct V {\n    float v; \n    int i;\n};\n\n// Structure for texture\n// c : Color\n// s : Specular\nstruct T {\nvec3 c;\nfloat s;\n};\n\n//pour v2\nfloat fbm2(in vec2 p,float l,float a,int o){\n    int i;\n    float r=0.0;\n    for(i=0;i<o;i++){\n    r+=a*Noise(p/l);\n    a*=0.5;\n    l*=0.5;\n    }\n   return r;\n}\n//terrain\n//fonction de terrain\nfloat Terrain( in vec2 p )\n{\n    return fbm2(p.xy,10.,10.,8)*sin(p.x/100.)*cos(p.y/100.0);\n} \nV ImplicitTerrain(in vec3 p, int index)\n{\n    float z = Terrain(p.xy)+30.;\n    float h = p.z - z; \n    return V(h,index);\n}\nfloat water(in vec2 p)\n{\n        return 15.*sin(p.x/50.)*cos(p.y/100.);\n}\nvec3 animationwater(in vec3 p)\n{\n    vec3 t=p+vec3(iTime*50.,0,0);\n    return t;\n}\n\nV Implicitwater(in vec3 p, int index)\n{\n    p=animationwater(p);\n    float z = water(p.xy);\n    float h = p.z - z;\n    return V(h,index);\n}\nvec3 animationvoiture(vec3 p)\n{\n   vec3 t=vec3(p.x-300.,p.y-600.,p.z)+vec3(0,cos(iTime*5.)*50.+500.,0);\n\n    return t;\n}\n\n// Primitive functions -----------------------------------------------------------------------------------\n\n// Sphere \n// p : point\n// c : center \n// r : radius\nV Sphere(vec3 p, vec3 c,float r,int index)\n{\n  return V(length(p-c)-r,index);\n}\n\n// Cube \n// p : point\n// c : center \n// r : radius\nV Cube(vec3 p,vec3 c,float r,int index)\n{\n   vec3 q = abs(p-c) - vec3(r);\n  return V(length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0),index);\n}\n\n// Plane \n// p : point\n// n : Normal of plane\n// o : Point on plane\nV Plane(vec3 p, vec3 n, vec3 o,int index)\n{\n    return V(dot((p-o),n),index);\n}\n//Capsule\nV Capsule( vec3 p, vec3 a, vec3 b, float r , int index)\n{\n  vec3 pa = p - a, ba = b - a;\n  float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n  return V(length( pa - ba*h ) - r,index);\n}\nV Tore( vec3 p, vec2 t,int index )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return V(length(q)-t.y,index);\n}\n// Union\n// a : field function of left sub-tree\n// b : field function of right sub-tree\nV Union(V a,V b)\n{\n    if (a.v<b.v)\n        return V(a.v,a.i);\n    else \n    {\n        return V(b.v,b.i);\n    }\n}\n\n// Intersection, preserve the index of first object\n// a, b : field function of left and right sub-trees\nV Intersection(V a,V b)\n{\n    if (a.v>b.v)\n    {\n        return V(a.v,a.i);\n    }\n    else \n    {\n        return V(b.v,a.i);\n    }\n}\n//pour le trou\nV difference(V a, V b)\n{\n       return V(max(a.v,-b.v),a.i);\n  \n}\n// Dice \n// p : point\n// c : center \n// r : radius\nV Dice(vec3 p,vec3 c,float r,int index)\n{\n    p=animationvoiture(p);\n  return Intersection(Cube(p,c,r*0.75,index),Sphere(p,c,r,index));\n}\n\n//Cylinder\n\nV Cylinder( vec3 p, float h, float r,int index )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(h,r);\n  return V(min(max(d.x,d.y),0.0) + length(max(d,0.0)),index);\n}\nV voiture(vec3 p){\n    p=animationvoiture(p);\n    V v= Cube(vec3(p.x+400.,p.y,p.z-15.),vec3(8.,5.,5.),50.,4);\n    v=Union(v,Cube(vec3(p.x+400.,p.y-100.,p.z-15.),vec3(8.,5.,5.),50.,4));\n    v=Union(v,Cube(vec3(p.x+400.,p.y-100.,p.z-50.),vec3(8.,5.,5.),50.,4));\n    v=Union(v, Cube(vec3 (p.x+400.,p.y-200.,p.z-15.),vec3(8.,5.,5.),50.,4));\n    v=Union(v, Cube(vec3 (p.x+400.,p.y-70.,p.z-60.),vec3(8.,5.,5.),30.,6));\n    v=Union(v,Capsule(vec3(p.x+460.,p.y+30.,p.z+3.), vec3 (140.0,1.0,1.0), vec3 (1.0,1.0,1.0),10.,3 ));\n    v=Union(v,Sphere(vec3(p.x+300.,p.y+40.,p.z+3.),vec3(-1.0,10.0,1.0),30.,6));\n    v=Union(v,Sphere(vec3(p.x+480.,p.y+40.,p.z+3.),vec3(-1.0,10.0,1.0),30.,6));\n    v=Union(v,Sphere(vec3(p.x+415.,p.y+60.,p.z-10.),vec3(-1.0,10.0,1.0),15.,3));\n    v=Union(v,Tore(vec3 (p.x+415.,p.y+50.,p.z-9.), vec2 (17.0,5.),7 ));\n    v=Union(v,Sphere(vec3(p.x+370.,p.y+60.,p.z-10.),vec3(-1.0,10.0,1.0),15.,3));\n    v=Union(v,Tore(vec3 (p.x+370.,p.y+50.,p.z-10.), vec2 (17.0,5.),7 ));\n    v=Union(v,Capsule(vec3(p.x+460.,p.y-200.,p.z+3.), vec3 (140.0,1.0,1.0), vec3 (1.0,1.0,1.0),10.,3 ));\n    v=Union(v,Sphere(vec3(p.x+300.,p.y-200.,p.z+3.),vec3(-1.0,10.0,1.0),30.,6));\n    v=Union(v,Sphere(vec3(p.x+480.,p.y-200.,p.z+3.),vec3(-1.0,10.0,1.0),30.,6));\n   \n\n    return v;\n}\n\nV soleil(vec3 p)\n{\n     V v=Sphere(vec3(p.x-600.,p.y-1500.,p.z-200.), vec3(0.0,0.0,0.5),200.,7);\n    return v;\n}\n\n// Potential field of the object\n// p : point\nV object(vec3 p)\n{\n  V u =ImplicitTerrain(p,5);\n  u=difference(u,Sphere(vec3(p.x,p.y,p.z), vec3(0.0,0.0,0.5),200.,1));\n  u=Union(u,Implicitwater(vec3(p.x,p.y,p.z),2));\n  u=Union(u,voiture(vec3(p.x,p.y-200.,p.z-100.)));\n u=Union(u,soleil(p));\n  return u;\n}\n\n// Analysis of the scalar field --------------------------------------------------------------------------\n\n// Calculate object normal\n// p : point\nvec3 ObjectNormal(in vec3 p )\n{\n  float eps = 0.001;\n  vec3 n;\n  V vp = object(p);\n    float v = vp.v;\n  n.x = object( vec3(p.x+eps, p.y, p.z) ).v - v;\n  n.y = object( vec3(p.x, p.y+eps, p.z) ).v - v;\n  n.z = object( vec3(p.x, p.y, p.z+eps) ).v - v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\n// o : ray origin\n// u : ray direction\n// e : Maximum distance \n// h : hit\n// s : Number of steps\nfloat SphereTrace(vec3 o, vec3 u, float e,out bool h,out int s)\n{\n  h = false;\n\n    // Start at the origin\n    float t=0.0;\n\n  for(int i=0; i<Steps; i++)\n  {\n    s=i;\n    vec3 p = o+t*u;\n    float v = object(p).v;\n    // Hit object\n      if (v < 0.0)\n      {\n          s=i;\n          h = true;\n          break;\n      }\n      // Move along ray\n      t += max(Epsilon,v);\n      // Escape marched too far away\n      if (t>e)\n      {\n          break;\n      }\n  }\n  return t;\n}\n\n// Background color\n// d : Ray direction\nvec3 background(vec3 d)\n{\n  return mix(vec3(0.1,0.75,0.995),vec3(0.652,0.697,0.995), d.z*0.5+0.5);\n}\n\n\n// Direct lighting\nfloat Light(vec3 p,vec3 n)\n{\n   // point light\n  const vec3 lp = vec3(5.0, 10.0, 25.0);\n\n  vec3 l = normalize(lp - p);\n\n  // Phong shading\n  float diff = clamp(dot(n, l),0.0,1.0);\n\n    bool h;\n    int s;\n    float t=SphereTrace(p+0.1*n,l,100.0,h,s);\nif (!h)\n    {\n     return diff;\n    }\n    return 0.0; \n}\n//cette fonction sert à rendre x positive sinon ça va afficher un damier avec une forme de \" + \" dans la couleur\nfloat decaler(float x)\n{\n    if(x<0.){\n    return x+= -1.;\n    }\n    else{\n    return x;\n    }\n}\n\n//Damier\nint Checker ( float x , float y , float z ) {\nx= decaler(x);\ny=decaler(y);\nz=decaler(z);\nreturn ( int ( x ) + int ( y ) + int ( z ) ) % 2 ;\n}\n\n// Shading and lighting ---------------------------------------------------------------------------\n\n\n//utilisation de noise\n//return T (vec3 (Noise(p),Noise(p),Noise(p)),0.1);\n//le noise entre 2 couleur \nvec3 entrenoise(in vec3 p){\n    return mix(vec3(0.2,0.7,0.7),vec3(0.25,0.25,0.25),Noise(p));\n}\n//pour deformer\n//la somme des noises version couleur \nfloat turbulencef(in vec3 p)\n{\n    float totale=0.;\n    float l=50.0;\n    float a=5.;\n    for(int i = 0 ; i<4 ; i++)\n    {\n        \n        totale += a*Noise(p/l);\n        l=l/2.;\n        a=a/2.;\n    }\n    \n    return totale;\n}\n//la somme des noises version couleur \nvec3 turbulence(in vec3 p)\n{\n    float totale=0.;\n    float l=1.0;\n    for(int i = 0 ; i<4 ; i++)\n    {\n        \n        totale += Noise(p/l);\n        l=l/2.;\n    }\n    \n    return mix(vec3(0.25,0.65,0.25),vec3(0.7,0.7,0.7),totale/3.);\n}\nvec3 marbre(in vec3 p)\n{\n    p.x = p.x +turbulencef(p);\n    float x = sin(p.x) *0.5+0.5;\n    //float y = sin(p.y);\n    //float z = sin(p.z);\n    return vec3(x,x,x);\n}\nvec3 N3(vec3 p){\n    return vec3(Noise(p),Noise(p+vec3(0.1,0.2,0.3)),Noise(p+vec3(0.4,0.5,0.6)));\n}\nvec3 bois(in vec3 p){\np=p+1.3*N3(p);\n    float d= length(p.xy);\n    return vec3(sin(d*2.));\n}\nvec3 entrenoiseb(in vec3 p){\n    return mix(vec3(222./255.,184./255.,135./255.),vec3(245./255.,222./255.,179./255.),bois(p).x);\n}\n\n//utiliser le bruit(fonction Noise dans comman) pour afficher une couleur \n\n//bois\nT Texture0(in vec3 p)\n{\n  return T (entrenoiseb(p),0.1);\n}\n//damier\n\nT Texture1(in vec3 p)\n{\n  if(Checker(p.x,p.y,p.z)== 0){\n              return T(vec3(0.5,0.5,0.5),0.1);\n  }\n  else if(Checker(p.x,p.y,p.z)==1)\n  {\n   return T(vec3(0.15,0.15,0.15),0.1);\n  }\n}\n//eau\nT Texture2(in vec3 p)\n{\n  return T(vec3(0.,1.,1.),0.1);\n}\n//blanche\nT Texture3(in vec3 p)\n{\n  return T(vec3(254./255., 254./255., 254./255.),0.1);\n}\n//rouge\nT Texture4(in vec3 p)\n{\n  return T(vec3(1.,0.,0.),0.1);\n}\n//vert\nT Texture5(in vec3 p)\n{\n  return T(vec3(20./255., 148./255., 20./255.),0.1);\n}\n//noir\nT Texture6(in vec3 p)\n{\n  return T(vec3(0.,0.,0.),0.1);\n}\n//jaune\nT Texture7(in vec3 p)\n{\n  return T(vec3(1., 1., 107./255.),0.1);\n}\n// Compute texture \n// p : Point\n// n : Normal\nT Color(in vec3 p,in vec3 n)\n{\n    V vp= object(p);\n    if (vp.i==0){\n        \n        return Texture0(p);\n    }\n    else if (vp.i==1)\n    {\n        return Texture1(p);\n    }\n    else if (vp.i==2)\n    {\n        return Texture2(p);\n    }\n    else if (vp.i==3)\n    {\n        return Texture3(p);\n    }\n    else if (vp.i==4)\n    {\n        return Texture4(p);\n    }\n    else if (vp.i==5)\n    {\n        return Texture5(p);\n    }\n    else if (vp.i==6)\n    {\n        return Texture6(p);\n    }\n    else if (vp.i==7)\n    {\n        return Texture7(p);\n    }\n}\n\n// Shadowing\n// p : Point\n// n : Normal\n// l : Light direction\nfloat Shadow(vec3 p,vec3 n,vec3 l)\n{\n    bool h;\n    int s;\n    float t = SphereTrace(p,l,100.0,h,s);\n    if (!h)\n    {\n     return 1.0;\n    }\n    return 0.0; \n}\n\n// Shading and lighting\n// p : Point\n// n : Normal at point\n// e : Eye direction\nvec3 Shade(vec3 p, vec3 n, vec3 e)\n{\n     // Point light\n    const vec3 lp = vec3(5.0, 10.0, 25.0);\n    \n    // Light direction to point light\n    vec3 l = normalize(lp - p);\n\n    T tex=Color(p,n);\n\n    // Ambient color\n    vec3 ambient = 0.5*tex.c;\n        \n    // Shadow computation\n    float s = Shadow(p+0.01*n,n,l);\n\n// Phong diffuse\n    vec3 diffuse = 0.5  * clamp(dot(n, l),0.0,1.0) * tex.c;\n\n    // Specular\n    vec3 r = reflect(e,n);\n    vec3 specular = tex.s * pow(clamp(dot(r,l),0.0,1.0),28.0) * vec3(1.0,1.0,1.0);\n    vec3 c = ambient + s * (diffuse + specular);\n    return c;\n}\n\n// Picture in picture ------------------------------------------------------------------------------\n\n// Shading according to the number of steps in sphere tracing\n// n : Number of steps\nvec3 ShadeSteps(int n)\n{\n   float t=float(n)/(float(Steps-1));\n   return 0.5+mix(vec3(0.05,0.05,0.5),vec3(0.65,0.39,0.65),t);\n}\n\n// Picture in picture\n// pixel : Pixel\n// pip : Boolean, true if pixel was in sub-picture zone\nvec2 Pip(in vec2 pixel, out bool pip)\n{\n    // Pixel coordinates\n    vec2 p = (-iResolution.xy + 2.0*pixel)/iResolution.y;\n   if (pip==true)\n   {    \n    const float fraction=1.0/4.0;\n    // Recompute pixel coordinates in sub-picture\n    if ((pixel.x<iResolution.x*fraction) && (pixel.y<iResolution.y*fraction))\n    {\n        p=(-iResolution.xy*fraction + 2.0*pixel)/(iResolution.y*fraction);\n        pip=true;\n    }\n       else\n       {\n           pip=false;\n       }\n   }\n   return p;\n}\n\n// Rendering \n// ro, rd : Ray origin and direction\n// pip : Picture in picture boolean\nvec4 Render( in vec3 ro, in vec3 rd, bool pip )\n{\n    // Light direction\n    vec3 light1 = normalize( vec3(-0.8,-0.3,0.4) );\n   \n    \n\tT col;\n    int it;\n    bool b;\n    float t = SphereTrace( ro, rd, View,b , it);\n\tvec3 p = ro + t*rd;\n    V vp= object(p);\n    vec3 n = ObjectNormal( p );\n\n\n    col = Color(p,n);\n    // Sky\n    if( b==false )\n    {\n        col.c = vec3(0.35,0.65,0.95) - rd.z*rd.z*2.5;\n    }\n\telse \n\t{\n        vec3 ref = reflect( rd, n );\n        float fre = clamp( 1.0+dot(rd,n), 0.0, 1.0 );\n        vec3 hal = normalize(light1-rd);\n                   \n\n         // Pseudo diffuse lighting\n\t\tfloat dif = 0.5*(1.0+dot( light1, n ));\n        dif*=dif;\n        \n        col.c = 0.45*col.c+0.55*dif*vec3(0.35,0.35,0.35);\n\t}\n    \n    // Shading for iterations\n    if (pip==true)\n    {\n    \tfloat s=float(it)/float(Steps);\n\t\treturn vec4(0.112+0.824*s,0.418+0.556*s,0.611-0.515*s,t);\n    }\n    else\n    {\n    \t// Gamma with square root\n    \treturn vec4( sqrt(col.c), t );\n    }\n}\n\n\nvec2 RayDirection(in vec2 pixel, out bool pip)\n{\n    // Pixel coordinates\n    vec2 p = (-iResolution.xy + 2.0*pixel)/iResolution.y;\n   if (pip==true)\n   {    \n    const float fraction=1.0/4.0;\n    // Picture in picture\n    if ((pixel.x<iResolution.x*fraction) && (pixel.y<iResolution.y*fraction))\n    {\n        p=(-iResolution.xy*fraction + 2.0*pixel)/(iResolution.y*fraction);\n        pip=true;\n    }\n       else\n       {\n           pip=false;\n       }\n   }\n   return p;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   // Time as function of the position of the mouse\n    float a = 3.14*2.0*1.5*iMouse.x/iResolution.x;\n\n    // Camera transform\n    vec3 ro; \n    mat3 cam = Camera( a, ro);   \n\n    // Picture in picture\n    bool pip=true;\n    \n    // Pixel coordinates\n    vec2 p = RayDirection(fragCoord, pip);\n   \n    // Camera ray    \n    vec3 rd = cam * normalize(vec3(p,5.0));\n    \n    // Render\n    vec4 res = Render( ro, rd, pip );\n     \n    fragColor = vec4( res.xyz, 0.0 );\n    \n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"\n//////////////////::\nfloat Hash(in vec2 p)  \n{\n    p  = fract( p*0.3199+0.152 );\n\tp *= 17.0;\n    return fract( p.x*p.y*(p.x+p.y) );\n}\n//////////////////::\nfloat Noise(in vec2 p)\n{\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n  \n    f = f*f*(3.0-2.0*f);\n    return mix(mix( Hash(i+vec2(0,0)), \n                        Hash(i+vec2(1,0)),f.x),\n                   mix( Hash(i+vec2(0,1)), \n                        Hash(i+vec2(1,1)),f.x),f.y);\n}\n\n\nmat3 Camera(float a, out vec3 ro)\n{\n\tfloat range=1350.0;\n    // Origin\n    ro = vec3(range*cos(a),range*sin(a),range/4.0);\n\t\n    // Target\n    vec3 ta = vec3(0.0,0.0,50.0);\n    \n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(0.0, 0.0,1.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\n\n// Texturing and noise \n\n// Hashing function\n// Returns a random number in [-1,1]\n// p : Vector in space\nfloat Hash(in vec3 p)  \n{\n    p  = fract( p*0.3199+0.152 );\n\tp *= 17.0;\n    return fract( p.x*p.y*p.z*(p.x+p.y+p.z) );\n}\n\n// Procedural value noise with cubic interpolation\n// x : Point \nfloat Noise(in vec3 p)\n{\n    vec3 i = floor(p);\n    vec3 f = fract(p);\n  \n    f = f*f*(3.0-2.0*f);\n    // Could use quintic interpolation instead of cubic\n    // f = f*f*f*(f*(f*6.0-15.0)+10.0);\n\n    return mix(mix(mix( Hash(i+vec3(0,0,0)), \n                        Hash(i+vec3(1,0,0)),f.x),\n                   mix( Hash(i+vec3(0,1,0)), \n                        Hash(i+vec3(1,1,0)),f.x),f.y),\n               mix(mix( Hash(i+vec3(0,0,1)), \n                        Hash(i+vec3(1,0,1)),f.x),\n                   mix( Hash(i+vec3(0,1,1)), \n                        Hash(i+vec3(1,1,1)),f.x),f.y),f.z);\n}\n\n// Compute the distance to the Voronoi boundary\n// x : Point\n// Return (closest distance, second closest, cell id)\nvec3 Voronoi( in vec3 x )\n{\n    vec3 p = floor( x );\n    vec3 f = fract( x );\n\n\tfloat id = 0.0;\n    vec2 res = vec2( 100.0 );\n    for( int k=-1; k<=1; k++ )\n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ )\n    {\n        vec3 b = vec3( float(i), float(j), float(k) );\n        vec3 r = vec3( b ) - f + Hash( p + b );\n        float d = dot( r, r );\n\n        if( d < res.x )\n        {\n\t\t\tid = dot( p+b, vec3(1.0,57.0,113.0 ) );\n            res = vec2( d, res.x );\t\t\t\n        }\n        else if( d < res.y )\n        {\n            res.y = d;\n        }\n    }\n\n    return vec3( sqrt( res ), abs(id) );\n}\n\n// Camera -----------------------------------------------------------------------\n\n// Rotation matrix around z axis\n// a : Angle\nmat3 Rz(float a)\n{\n    float sa = sin(a); float ca = cos(a); \n    return mat3(ca,sa,0.0,    -sa,ca,0.0,  0.0,0.0,1.0);\n}\n\n// Compute the ray\n//      m : Mouse position\n//      p : Pixel\n// ro, rd : Ray origin and direction\nvoid Ray(in vec2 m, in vec2 p,out vec3 ro,out vec3 rd)\n{\n    float a = 3.0*3.14*m.x;\n   \tfloat le = 3.8;\n    \n    ro=vec3(35.0,0.0,15.0);\n    ro*=Rz(3.0*3.14*m.x); \n\n    vec3 ta = vec3(0.0,0.0,0.0);\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,0.0,1.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\trd = normalize( p.x*uu + p.y*vv + le*ww );\n}\n\n\n\n\n\n\n\n\n\n\n","name":"Common","description":"","type":"common"}]}