{"ver":"0.1","info":{"id":"wdG3WK","date":"1570964268","viewed":70,"name":"1_beadando_3","username":"Akszipukszis","description":"hupp","likes":0,"published":1,"flags":48,"usePreview":0,"tags":["blabla"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    float pdist=texelFetch(iChannel0,ivec2(fragCoord),0).w;\n        \n    fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0)*2.0;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","previewfilepath":"/media/ap/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","type":"cubemap","channel":2,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// This file contains the \n// --- CONE TRACING 1/1, 1/2 --- Overlay sphere ---\n\nstruct Ray\n{\n\tvec3 P; // Starttin point of the ray\n\tfloat Tmin; // Min distance\n\tvec3 V; // The direction of the ray\n\tfloat Tmax; // Max distance\n};\n\nstruct TraceResult\n{\n    float T;\t\t// Distance taken on ray\n    int flags;\t\t// bit 0:   distance condition:     true if travelled to far t > t_max\n                    // bit 1:   surface condition:      true if distance to surface is small < error threshold\n};                  // bit 2:   iteration condition:    true if took too many iterations\n    \nstruct SphereTraceDesc\n{\n    float epsilon;  //Stopping distance to surface\n    int maxiters;   //Maximum iteration count\n};\n\nTraceResult sphere_trace(in Ray ray, in SphereTraceDesc params)\n{\n    TraceResult ret = TraceResult(ray.Tmin, 0);\n    float d;\n    \n    int i = 0; do\n    {\n        d = sdf(ray.P+ret.T*ray.V);\n        ret.T+=d;\n        ++i;\n    } while (\n\t\tret.T < ray.Tmax &&       \t\t\t// Stay within bound box\n\t\td\t  > params.epsilon * ret.T &&\t// Stop if cone is close to surface\n\t\ti     < params.maxiters\t        \t// Stop if too many iterations\n\t);\n    \n    ret.flags =  int(ret.T >= ray.Tmax)\n              | (int(d <= params.epsilon* ret.T)  << 1)\n              | (int(i >= params.maxiters) << 2);\n    return ret;\n}\n\nfloat distance_function_approximation(in float df, in float t, in float r0, in float tanAlpha)\n{\n    return (df - r0 - t*tanAlpha)/(1.0 + abs(tanAlpha));\n}\n\nTraceResult cone_trace_good(in Ray ray, in SphereTraceDesc params, in float r0, in float tanAlpha)\n{\n    TraceResult ret = TraceResult(ray.Tmin,0);\n    float d;\n    float dd;\n    \n    int i = 0; \n    do\n    {\n        d = sdf(ray.P+ret.T*ray.V);\n        dd = distance_function_approximation(d, ret.T, r0, tanAlpha);\n        ret.T += dd;\n        ++i;\n    } while (\n        ret.T < ray.Tmax && \n\t\tdd     >  params.epsilon* ret.T &&\n\t\ti     < params.maxiters\t        \t// Stop if too many iterations\n\t);\n    \n    ret.flags =  int(ret.T >= ray.Tmax)\n        \t  | (int(dd <= params.epsilon* ret.T) << 1)\n              | (int(i >= params.maxiters) << 2);\n    return ret;\n}\n\nvec3 quadratic_equation_solver(const in vec3 p0, const in vec3 v0, const in float r)\n{\n    //return value:   1) number of solutions\n    //\t\t\t\t  2) first solution\n    //                3) second solution\n\tfloat a = 1.0;\n    float b = 2.0*dot(v0, p0 - light_pos);\n    float c = dot(p0 - light_pos, p0 - light_pos) - r*r;\n    float D = b*b - 4.0*a*c;\n    if (D < 0.0)\n    {\n        return vec3(0., 0., 0.);\n    }\n    else if (D == 0.0)\n    {\n        float sol = -b/(2.*a);\n        return vec3(1.0,sol,0.);\n    }\n    else\n    {\n        float sol1 = (-b+pow(D, 1./2.))/(2.*a);\n        float sol2 = (-b-pow(D, 1./2.))/(2.*a);\n        return vec3(2.,sol1,sol2);\n    }\n}\n\nfloat min_positive_solution(const in vec3 p0, const in vec3 v0, const in float r)\n{\n\tvec3 solution = quadratic_equation_solver(p0, v0, r);\n    if (solution.x == 0.0)\n    {\n    \treturn -1.0;\n    }\n    if (solution.x == 1.0)\n    {\n    \treturn solution.y;\n    }\n    if (solution.x == 2.0)\n    {\n    \tif (solution.y > 0.0)\n        {\n        \tif (solution.z > 0.0)\n            {\n            \treturn (min(solution.y, solution.z));\n            }\n            else\n            {\n            \treturn solution.y;\n            }\n        }\n        else\n        {\n\n            return solution.z;\n        }\n            \n    }\n}\n\nvec3 normal(const in vec3 p)\n{\n    const float eps=0.001;\n    vec3 plus = vec3(sdf(p+vec3(eps,0,0)),sdf(p+vec3(0,eps,0)),sdf(p+vec3(0,0,eps)));\n    vec3 minu = vec3(sdf(p-vec3(eps,0,0)),sdf(p-vec3(0,eps,0)),sdf(p-vec3(0,0,eps)));\n    return normalize(plus-minu);\n}\n\nvec4 missColor(Ray ray)\n{\n    return vec4(texture(iChannel2, ray.V).xyz,1.);\n}\nvec4 errorColor(Ray ray, float t)\n{\n    return vec4(1.,0.,0.,1.);\n}\n\nvec3 radiance\n(\n\tvec3 n,\t\t// normal\n\tvec3 l,\t// direction from x point to light\n\tvec3 v\t// direction from x point to view\n)\n{\n    float m = roughness;\n\t// half vector\n\tvec3 h = normalize( l + v );\n    float hn = max(dot(h, n), 0.0);\n\tfloat vn = max(dot(v, n), 0.0);\n\tfloat ln = max(dot(l, n), 0.0);\n\tfloat vh = max(dot(v, h), 0.0);\n    \n    // Geometric Attenutation Factor\n    \n    float k = (m+1.)*(m+1.)/8.;\n    \n    float G1 = vn/(vn*(1.-k)+k);\n    float G2 = ln/(ln*(1.-k)+k);\n    float G = G1*G2;\n    \n    /*float Gmask = 2.*hn*vn/vh;\n    float Gshadow = 2.*hn*ln/vh;\n    float Gunblocked = 1.0;\n\tfloat G = min( min( Gmask, Gshadow ), Gunblocked );*/\n    \n    // Microfacet density, normal distribution\n    \n    float denominator = pow(m, 2.0)*pow(hn, 4.0)*pi;\n    float arg = -(pow(tan(acos(hn)), 2.0))/pow(m, 2.0);\n\tfloat D = exp(arg) / denominator;\n    \n    //float D = m*m/(pi*(hn*hn*(m*m-1.)+1.)*(hn*hn*(m*m-1.)+1.));\n    \n    //Fresnel reflectance ratio\n    \n    // Specular\n\tvec3 R_spec = R0_spec + ( 1.0  - R0_spec ) * pow( 1.0 - vh, 5.0 );\n\t\n\t// Diffuse\n\tfloat costheta = max(dot(n,l),0.);\n    vec3 k_d = vec3(1./pi);\n\t\n\t// Cook-Torrance BRDF\n    float denominator_spec = vn*ln;\n\tvec3 brdf_spec = R_spec * D * G / denominator_spec;\n\t\n\t// Lambertian BRDF\n\tvec3 brdf_diff = k_d * ( 1.0 - R_spec );\n\t\n\t// Punctual Light Source\n\treturn ( brdf_spec + brdf_diff )* light_int * ln;\n}\n\nvec4 hitColor(Ray ray,float t, vec3 eye)\n{\n    \n    //point, surface normal, direction\n    \n    vec3 p = ray.P + ray.V*t;\n    vec3 n = normal(p);\n   \n    //vector from light pos to p point\n    vec3 l = normalize( light_pos - p );\n    \n    //vector from camera to p point\n    vec3 v = normalize(eye - p);\n    \n    return vec4(radiance(n,l,v),1.);\n}\n\n// ---- CAMERA and EVENTs ----\n// Common key codes (WASD instead of arrows)\n\nconst int KeyLeft  = 65;\nconst int KeyRight = 68;\nconst int KeyUp    = 87;\nconst int KeyDown  = 83;\n\n#define isKeyHeld(k)  (texelFetch(iChannel1, ivec2(k,0), 0).x > 0.)\n\nRay Camera(vec2 fragCoord, out vec3 eye, out vec2 data2)\n{\n\n    eye = texelFetch(iChannel0, ivec2(0,0), 0).yzw;\t\t// camera position\n    data2 = texelFetch(iChannel0, ivec2(1,0), 0).zw;\t// spherical coordinates\n    vec2 uv\t= abs(data2);\n    \n   \tif(iMouse.z>0. || data2.x >= 0.)\t//mouse held or was held last frame\n        uv += (abs(iMouse.zw)-abs(iMouse.xy))*0.01;\n    \n    vec3 w = vec3(cos(uv.x)*cos(-uv.y),\n                  \t\t\tsin(-uv.y),\n                  sin(uv.x)*cos(-uv.y));\n    vec3 u = normalize(cross(vec3(0,1,0),w));\n\tvec3 v = cross(w,u);\n    \n    vec2 px = (fragCoord/iResolution.xy*2.-1.)*1.*normalize(iResolution.xy);\n    \n\tfloat speed = 0.2;\n    if (isKeyHeld(KeyLeft )) eye -= u*speed;\n    if (isKeyHeld(KeyRight)) eye += u*speed;\n    if (isKeyHeld(KeyUp   )) eye += w*speed;\n    if (isKeyHeld(KeyDown )) eye -= w*speed;\n    \n    if(iMouse.z>=0.)\t\t//mouse held\n        data2 = abs(data2.xy);\n\telse if(data2.x >= 0.)\t//mouse released\n        data2 = -mod(uv,2.*pi);\n    \n    return Ray(eye,\t\t\t\t\t\t\t//P\n               0.5,\t\t\t\t\t\t\t//minT\n               normalize(w+px.x*u+px.y*v),\t//V\n               500.);\t\t\t\t\t\t//maxT\n}\n\n// ---- MAIN ----\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 eye; vec2 data;\n    Ray ray = Camera(fragCoord, eye, data);\n        \n    SphereTraceDesc params = SphereTraceDesc(0.006, 64);\n    \n    float r0 = 0.0;\n    float tanAlpha = pow(2.0,1./2.)/length(iResolution);\n    TraceResult result = cone_trace_good(ray, params, r0, tanAlpha);\n    \n    if(bool(result.flags & 1))    fragColor = missColor(ray);    \n    else if(bool(result.flags&2)) fragColor = hitColor(ray, result.T, eye);\n    else \t        \t\t\t  fragColor = errorColor(ray, result.T);\n    \n    vec3 p0 = ray.P;\n    vec3 v0 = ray.V;\n    TraceResult result_gomb = sphere_trace(ray, params);\n    float sol = min_positive_solution(p0, v0, R);\n\n    if (sol > -1.0 && result_gomb.T > sol)\n    {\n        fragColor = vec4(light_int, 1.);\n    }       \n    \n    if(fragCoord.x == 0.5 && fragCoord.y == 0.5) // pixel (0,0)\n        fragColor.yzw = eye;\n    if(fragCoord.x == 1.5 && fragCoord.y == 0.5) //pixel (1,0)\n        fragColor.zw = data;\n        \n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"//This file contains the code for the scene\n\nconst float pi = 3.1415926535897932384626433832795;\n\n//The place, intensity and radius of the light\nconst vec3 light_pos = vec3(8., 8., 8.);\nconst vec3 light_int = vec3(1.0, 1.0, 1.0);\nconst float R = 1.0;\n\n//The roughness, diffuse reflectance and specular reflectance of the surface\nconst float roughness = 0.01;\n\nconst float n1 = 1.0;\nconst float n2 = 0.4;\n\nconst vec3 R0_spec = vec3(pow(((n1-n2)/(n1+n2)),2.0));\t// diffuse  reflectance\n\nfloat sdSphere( vec3 p, float s )\n{\n\treturn length(p)-s;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n\tvec3 d = abs(p) - b;\n\treturn length(max(d,0.0))+min(max(d.x,max(d.y,d.z)),0.0); // remove this line for an only partially signed sdf \n}\n\nfloat sdRoundedCylinder( vec3 p, float ra, float rb, float h )\n{\n    vec2 d = vec2( length(p.xz)-2.0*ra+rb, abs(p.y) - h );\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0)) - rb;\n}\n\nfloat sdf(in vec3 p)\n{\n    p-=vec3(0,0,2);\n    float f = sdSphere(p, 1.0);\n    float g = sdBox(p-vec3(2,0,0),vec3(1,1,1));\n    float h = sdBox(p-vec3(2,2,0),vec3(1,1,1));\n    float i = sdSphere(p-vec3(0,2,0), 1.);\n    \n    float j = sdSphere(p-vec3(4,0,0), 1.);\n    float k = sdSphere(p-vec3(4,2,0), 1.);\n    \n    float l = sdSphere(p-vec3(2,0,2), 1.);\n    float m = sdSphere(p-vec3(2,2,2), 1.);\n    \n    float n = sdRoundedCylinder(p-vec3(2,4,0),1.0, 0.5,0.5);\n    \n    float s = sdSphere(p-vec3(-30, 1, -30), 1.);\n    \n    return min(min(min(min(min(min(min(min(min(min(f,g),h),i),j),k),l),m),n), s),p.y+1.);\n}","name":"Common","description":"","type":"common"}]}