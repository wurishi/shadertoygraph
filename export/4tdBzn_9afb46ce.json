{"ver":"0.1","info":{"id":"4tdBzn","date":"1538526510","viewed":98,"name":"Day & Night","username":"Shadeyboi","description":"Sun & Moon Rotations (Nature project 3/3)","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["natureproject"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define repeat(v, r) (mod(v, r)-r/2.)\n\nstruct Shape{\n  float dist;\n  vec4 color;\n};\n\n\n    \n//=======================\n// Utility Functions\n//=======================\nfloat random(vec2 v) {\n  return fract(sin(dot(v*0.2, vec2(324.654, 156.546)))*46556.2);\n}\n\nmat2 rot(float a){\n  float r = cos(a);\n  float f = sin(a);\n  return mat2(r, f, -f, r);\n}\n\n\nfloat pole(vec2 v, float r){\n  return length(v)-r;\n}\n/*float sphere(vec3 v, float r){\n  return length(v)-r;\n}\nfloat box(vec3 v, float r, float m) {\n  return max(length(v.xy)-r, abs(v.z)-m);\n}\n*/\n\n\nfloat mixColors(float r, float v, float z){\n  return clamp(0.5+0.5*(v-r)/z, 0., 1.);\n}\n\nfloat mixShapes(float v, float f, float r){\n  float z = mixColors(v, f, r);\n  return mix(f,v,z)-r*z*(1.-z);\n}\n\nfloat pModPolar(inout vec2 v, float r){\n  float f = 6.28318/r;\n  float z = atan(v.y, v.x)+f*0.2;\n  float m = floor(z/f);\n  z = mod(z, f)-f*0.5;\n  v = vec2(cos(z), sin(z))*length(v);\n  return m;\n}\n//=======================\n\nShape vines(vec3 c){\n  Shape shape;\n  float vine;\n  shape.dist = 1000.; // Draw Distance\n  shape.color = vec4(1.); // Initial Color\n\n  // Shape Attributes\n  float twist = 20.; // Ray Repeat\n  float vineOffset = 7.; // Ray Offset\n\n\n  // Stems\n  vec3 i = c;\n    //i.x += repeat(i.x, 10.);\n    i.yz *= rot(c.y*.1-1.);\n    i.xz *= rot(c.y*0.1+iTime*.3);\n    float detail = pModPolar(i.yz, twist); //Different coordinates affect the pattern\n    float x = mix(0., 1., mod(detail, 3.)); // Small Ripples\n    i.x -= vineOffset; // Offset Rays, inverts sun & moon\n  \tfloat stemWidth = 0.25;\n  \tvine = pole(i.xz, stemWidth+0.02*sin(i.y*x));\n\n\n  vec4 color = vec4(sin(iTime*.3)+.2, sin(iTime*.3 + .1)-0.2, -sin(iTime*.3), 1.);\n    \n  shape.dist = vine;\n  shape.color = color;\n\n  return shape;\n}\n\n\nShape map(vec3 c){\n  Shape vines = vines(c);\n  return vines;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 v = (fragCoord.xy-0.5 * iResolution.xy) / iResolution.y;\n\n  \n  vec3 cam = vec3(0., sin(iTime*.3)*1.5, -8.);\n  vec3 f = normalize(vec3(v, 1.1));\n  vec3 scene = cam;\n  fragColor = vec4(0.);\n\n  // Ray Marcher\n  for(float z = 0.1 ; z <= 1.; z += 0.03){\n    Shape c = map(scene); // Calc SDF\n    if(c.dist < 0.01){\n      fragColor = c.color*(1.-z); // Hit  - invert pixels\n      break;\n    }\n    scene += f * c.dist;\n\n\n  }\n}\n","name":"Image","description":"","type":"image"}]}