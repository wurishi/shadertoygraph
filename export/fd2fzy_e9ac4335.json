{"ver":"0.1","info":{"id":"fd2fzy","date":"1646568277","viewed":150,"name":"foldX test","username":"takahiroando","description":"based on:\nhttps://gam0022.net/blog/2017/03/02/raymarching-fold/\nhttps://neort.io/product/bvcrf5s3p9f7gigeevf0","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["primitive"],"hasliked":0,"parentid":"7dlfDn","parentname":"cap with max boolean"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n\nfloat map(vec3 p){\n    p -= vec3(2.0, 0.0, 0.0);\n    p.xy*=rot(iTime*1.);\n    p.xz*=rot(iTime*1.);\n    // This is a 2D SDF to 3D trick.\n    // 1. Calculate 2D SDF\n    float sdf2d=abs(length(p.xy)-1.)-.2;\n    // 2. Calculate 1D SDF\n    float d=abs(p.z)-.3;\n    // 3. Combie them by max(boolean)\n    return max(sdf2d,d);\n}\n\n// from: https://gam0022.net/blog/2017/03/02/raymarching-fold/\nvec3 foldX(vec3 p) {\n    // This is the trick to make a mirror\n    p.x = abs(p.x);\n    return p;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv=(gl_FragCoord.xy-.5*iResolution.xy)/iResolution.y;\n    vec3 rd=normalize(vec3(uv,1));\n    vec3 p=vec3(0.0,0,-5);\n    float d=1.,i;\n    for(;++i<99.&&d>.001;)p+=rd*(d=map(foldX(p)));\n    if(d<.001)fragColor+=3./i;\n}","name":"Image","description":"","type":"image"}]}