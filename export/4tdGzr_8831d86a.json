{"ver":"0.1","info":{"id":"4tdGzr","date":"1467704340","viewed":740,"name":"Explosion Sample","username":"qq456cvb","description":"My implementation on GPU Pro 6's volumetric explosions. Further improvements can be done by adding lighting and anti-aliasing.","likes":12,"published":1,"flags":0,"usePreview":1,"tags":["3d","explosion","particle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define time iTime\n#define OCTAVE 4\n#define EPSILON 0.01\n#define PI 3.1415926\n\n// TODO: add anti-aliasing and lighting\nvec4 colorLookup(in float x)\n{\n\tconst vec4 yellow = vec4(1., 1., 0., 1.);\n    const vec4 red = vec4(1., 0., 0., 1.);\n    const vec4 black = vec4(vec3(0.), 1.);\n    const vec4 white = vec4(1.);\n    const vec3 bound = vec3(0.06, 0.11, 0.15);\n    x /= 5.;\n    if (x < bound.z) {\n        if (x < bound.x) {\n            return mix(white, yellow, x * 1. / bound.x);\n        }\n        if (x < bound.y) {\n            return mix(yellow, red, (x-bound.x) * 1./ (bound.y-bound.x));\n        }\n        return mix(red, black, (x-bound.y) / (bound.z-bound.y));\n    } else {\n        return black;\n    }\n}\n\nfloat noise( in float x ){return texture(iChannel0, vec2(x*.01,1.)).x;}\n\nfloat hash( float n ){return fract(sin(n)*43758.5453);}\n\n//iq's ubiquitous 3d noise\nfloat noise(in vec3 p)\n{\n\tvec3 ip = floor(p);\n    vec3 f = fract(p);\n\tf = f*f*(3.0-2.0*f);\n\t\n\tvec2 uv = (ip.xy+vec2(37.0,17.0)*ip.z) + f.xy;\n\tvec2 rg = textureLod( iChannel0, (uv+ 0.5)/256.0, 0.0 ).yx;\n\treturn mix(rg.x, rg.y, f.z);\n}\n\nfloat fractalNoise(in vec3 p)\n{\n    const float amplitudeFactor = 0.5;\n  \tconst float frequencyFactor = 2.03;\n  \tfloat amplitude = 0.5;\n    float noiseValue = 0.;\n    for (int i = 0; i < OCTAVE; i++)\n    {\n        noiseValue += amplitude * noise(p / 30.);\n        amplitude *= amplitudeFactor;\n        p *= frequencyFactor;\n    }\n    return noiseValue;\n}\n\nfloat drawExplosion(in vec3 p, \n                    in float displacement, \n                    in vec3 spherePos,\n                    in float radius, \n                    out float displacementOut)\n{\n    displacementOut = fractalNoise(p);\n    \n    // dist to sphere surface\n    float dist = length(p - spherePos) - radius;\n    dist += displacementOut * displacement;\n    return dist;\n}\n\nbool sphereTracing(in vec3 origin, \n                   in float displacement, \n                   in vec3 spherePos,\n                   in float radius, \n                   in vec3 dir,\n                   inout vec3 hitPoint,\n                   inout vec4 color)\n{\n    const int steps = 20;\n    float dist = 0.;\n    for (int i = 0; i < steps; i++)\n    {\n        vec3 p = origin + dist*dir;\n        float displacementOut;\n        float distToSurface = drawExplosion(p, displacement, spherePos, radius, displacementOut);\n        if (distToSurface < EPSILON)\n        {\n            hitPoint = p;\n            color = colorLookup(displacementOut);\n        }\n        dist += distToSurface;\n    }\n    return false;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2. - 1.;\n    uv.x *= iResolution.x / iResolution.y;\n    fragColor = vec4(vec3(0.), 1.0);\n    \n    float t = mod(time, 3.) / 3.;\n    t = t*t*(3.-2.*t);\n    float displacement = t * 40.;\n    vec3 spherePos = vec3(0, 0, 200.);\n    \n    vec3 hitPoint = vec3(0.);\n    vec3 origin = vec3(0.);\n    float radius = displacement * 3.;\n    vec3 dir = normalize(vec3(uv, 1.0));\n    sphereTracing(origin, displacement, spherePos, radius, dir, hitPoint, fragColor);\n}","name":"Image","description":"","type":"image"}]}