{"ver":"0.1","info":{"id":"ts2fzK","date":"1590439070","viewed":115,"name":"ShATI - Libert√©","username":"Flopine","description":"My former school named ATI decided to launch an everyday challenge from 4th may to 24th may, here is the last subject: liberty! I did it :D :) ","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","animation","isometric","mograph"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan and slerpy for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  https://twitter.com/CookieDemoparty\n\n// Shader made for Everyday ATI challenge\n\n#define PI acos(-1.)\n#define time fract(iTime*0.3)\n\nfloat easeInOutExpo(float x)\n{\n    return x == 0.\n        ? 0.\n        : x == 1.\n            ? 1.\n            : x < 0.5 ? pow(2., 20. * x - 10.) / 2.\n                : (2. - pow(2., -20. * x + 10.)) / 2.;\n}\n\nmat2 rot (float a)\n{return mat2(cos(a),sin(a),-sin(a),cos(a));}\n\nfloat box (vec3 p, vec3 c)\n{\n    vec3 q = abs(p)-c;\n    return min(0.,max(q.x,max(q.y,q.z)))+length(max(q,0.));\n}\n\nfloat sc (vec3 p, float d)\n{\n    p = abs(p);\n    p = max(p.xyz,p.yzx);\n    return min(p.x,min(p.y,p.z))-d;\n}\n\nfloat cage (vec3 p)\n{\n    float per = 15.;\n    p.y -= easeInOutExpo(time*PI/3.)*per;\n    p.y = mod(p.y-per*0.5,per)-per*0.5;\n    vec3 pp = p;\n    float size = 1.8;\n    float cube = max(-sc(p,size*0.8),box(p,vec3(size)));\n\n    p.z = abs(p.z)-size*0.9;\n    p.x = abs(abs(p.x)-0.65)-0.3;\n    float b1 = box(p,vec3(0.12,size,0.1));\n\n    p = pp;\n    p.xz *= rot(PI/2.);\n    p.z = abs(p.z)-size*0.9;\n    p.x = abs(abs(p.x)-0.65)-0.3;\n    float b2 = box(p,vec3(0.12,size,0.1));\n\n    return min(min(b2,b1),cube);\n}\n\nfloat gem (vec3 p)\n{\n    float d = dot(p,normalize(sign(p)))-(.2+sqrt(sin(time*PI)*0.5));\n    return d;\n}\n\nfloat SDF (vec3 p)\n{\n    vec3 pp = p;    \n    pp.yz *= rot(-atan(1./sqrt(2.)));\n    pp .xz *= rot(PI/4.);\n    p = mix(p,pp,easeInOutExpo(clamp(sin(time*PI)*3.-1.,0.,1.)));\n    return min(gem(p),cage(p));\n}\n\nvec3 getnorm (vec3 p)\n{\n    vec2 eps = vec2(0.001,0.);\n    return normalize(SDF(p)-vec3(SDF(p-eps.xyy),SDF(p-eps.yxy),SDF(p-eps.yyx)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n\n    vec3 ro = vec3(uv*3.5,-30.),\n        rd = vec3(0.,0.,1.),\n        p = ro,\n        l = normalize(vec3(1.,2.,-4.)),\n        col = vec3(0.4,0.55,0.5);\n\n    float d=0.;\n    bool hit = false;\n    for (float i=0.; i<100.;i++)\n    {\n        d = SDF(p);\n        if (d < 0.001)\n        {\n            hit = true;\n            break;\n        }\n        p += d*rd*0.8;\n    }\n\n    if (hit)\n    {\n        vec3 n = getnorm(p);\n        col = vec3(max(dot(n,l),0.));\n    }\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}