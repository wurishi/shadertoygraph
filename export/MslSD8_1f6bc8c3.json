{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"/* Compiled with Shaderforth: https://github.com/daeken/Shaderforth\n:globals\n\t@vec3 uniform =iResolution\n\t@float uniform =iTime\n;\n\n:m grad ( p f )\n\t[ 0.0001 0.0 ]v =h\n\tp *f =>v\n\t[\n\t\tp h + *f p h - *f -\n\t\tp h .yx + *f p h .yx - *f -\n\t]v 2.0 h .x * / length =>g\n\tv abs g /\n;\n\n:m pi 3.14159 ;\n:m deg-rad pi 180. / * ;\n\n: cart-polar ( p:vec2 -> vec2 ) [ p .y.x atan2 p length ]v ;\n: polar-cart ( p:vec2 -> vec2 ) [ p .x cos p .x sin ]v p .y * ;\n:m p+ ( p v ) p cart-polar v + polar-cart ;\n\n: rotate ( c:vec3 a:float -> vec3 )\n\ta deg-rad =a\n\ta cos =ca\n\ta sin =sa\n\n\t[\n\t\tc .x ca * c .y sa * -\n\t\tc .y ca * c .x sa * +\n\t\tc .z\n\t]v\n;\n\n:m anim\n\t1.0 iTime 8. mod 4.0 - abs 1. - 1.5 / 0.0 1.0 clamp 3. pow -\n;\n\n: cwarp ( c:vec3 -> vec3 )\n\tanim =t\n\t[\n\t\t\tc .xy 1. t - *\n\t\t\t[ t pi * -1. * 0. ]v\n\t\tp+\n\t\tc .z t 2.5 * 1.0 + *\n\t]v\n;\n\n: p-circle ( p:vec2 c:vec3 -> float )\n\tc cwarp =c\n\tc .xy p - length c .z -\n;\n\n:m circle ( c )\n\tp c p-circle\n;\n\n:m intersect\n\tmax\n;\n\n:m subtract\n\tneg max\n;\n\n:m union\n\tmin\n;\n\n:m shape ( f )\n\t*f\n;\n\nfragCoord .xy iResolution .xy / 2.0 * 1.0 - [ 1.0 iResolution .y.x / neg ]v * 1.2 * =p\n\n: frame ( p:vec2 -> float )\n\t{\n\t\t[ 0. 0. 0.6 ]v circle\n\t\t{\n\t\t\t{\n\t\t\t\t[ 0. 0. 0.4 ]v circle\n\t\t\t\t{\n\t\t\t\t\tfloat 120. * =>a\n\t\t\t\t\t{\n\t\t\t\t\t\t[ 0.13625 -0.04 0.52221283975 ]v a rotate circle\n\t\t\t\t\t\t[ -0.25375 0.135 0.464630229322 ]v a rotate circle intersect\n\t\t\t\t\t\t[ -0.2925 -0.10125 0.46492270863 ]v a rotate circle subtract\n\t\t\t\t\t} shape subtract\n\t\t\t\t} 3 mtimes\n\t\t\t} shape \n\n\t\t\t{\n\t\t\t\t[ 0.0 0.18375 0.29504766564065543 ]v circle\n\t\t\t\t[ 0.0 0.18375 0.29504766564065543 ]v 120. rotate circle intersect\n\t\t\t\t[ 0.0 0.18375 0.29504766564065543 ]v 240. rotate circle intersect\n\t\t\t\t[ 0.0 0.0 0.0434 ]v circle subtract\n\t\t\t} shape subtract\n\t\t} shape subtract\n\t} shape ( 0. max )\n;\n\np &frame grad 100. * 0. 1. clamp =d\n\n[ d d d 1. ]v =fragColor\n*/\n\nvec3 rotate(vec3, float);\nfloat frame(vec2);\nvec2 cart_polar(vec2);\nvec2 polar_cart(vec2);\nfloat p_circle(vec2, vec3);\nvec3 cwarp(vec3);\nvec3 rotate(vec3 c, float a) {\n\ta = (a) * 0.0174532777778;\n\tfloat ca = cos(a);\n\tfloat sa = sin(a);\n\treturn vec3((((c).x) * (ca)) - (((c).y) * (sa)), (((c).y) * (ca)) + (((c).x) * (sa)), (c).z);\n}\nfloat frame(vec2 p) {\n\treturn max(p_circle(p, vec3(0.0, 0.0, 0.6)), - (max(max(max(max(p_circle(p, vec3(0.0, 0.0, 0.4)), - (max(max(p_circle(p, rotate(vec3(0.13625, -0.04, 0.52221283975), 240.0)), p_circle(p, rotate(vec3(-0.25375, 0.135, 0.464630229322), 240.0))), - (p_circle(p, rotate(vec3(-0.2925, -0.10125, 0.46492270863), 240.0)))))), - (max(max(p_circle(p, rotate(vec3(0.13625, -0.04, 0.52221283975), 120.0)), p_circle(p, rotate(vec3(-0.25375, 0.135, 0.464630229322), 120.0))), - (p_circle(p, rotate(vec3(-0.2925, -0.10125, 0.46492270863), 120.0)))))), - (max(max(p_circle(p, rotate(vec3(0.13625, -0.04, 0.52221283975), 0.0)), p_circle(p, rotate(vec3(-0.25375, 0.135, 0.464630229322), 0.0))), - (p_circle(p, rotate(vec3(-0.2925, -0.10125, 0.46492270863), 0.0)))))), - (max(max(max(p_circle(p, vec3(0.0, 0.18375, 0.295047665641)), p_circle(p, rotate(vec3(0.0, 0.18375, 0.295047665641), 120.0))), p_circle(p, rotate(vec3(0.0, 0.18375, 0.295047665641), 240.0))), - (p_circle(p, vec3(0.0, 0.0, 0.0434))))))));\n}\nvec2 cart_polar(vec2 p) {\n\treturn vec2(atan((p).y, (p).x), length(p));\n}\nvec2 polar_cart(vec2 p) {\n\treturn (vec2(cos((p).x), sin((p).x))) * ((p).y);\n}\nfloat p_circle(vec2 p, vec3 c) {\n\tc = cwarp(c);\n\treturn (length(((c).xy) - (p))) - ((c).z);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 p = ((((((fragCoord).xy) / ((iResolution).xy)) * 2.0) - 1.0) * (vec2(1.0, - (((iResolution).y) / ((iResolution).x))))) * 1.2;\n\tvec2 h = vec2(0.0001, 0.0);\n\tfloat d = clamp(((abs(frame(p))) / (length((vec2((frame((p) + (h))) - (frame((p) - (h))), (frame((p) + ((h).yx))) - (frame((p) - ((h).yx))))) / (2.0 * ((h).x))))) * 100.0, 0.0, 1.0);\n\tfragColor = vec4(d, d, d, 1.0);\n}\nvec3 cwarp(vec3 c) {\n\tfloat t = 1.0 - (pow(clamp(((abs((mod(iTime, 8.0)) - 4.0)) - 1.0) / 1.5, 0.0, 1.0), 3.0));\n\treturn vec3(polar_cart((cart_polar(((c).xy) * (1.0 - (t)))) + (vec2(((t) * 3.14159) * -1.0, 0.0))), ((c).z) * (((t) * 2.5) + 1.0));\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MslSD8","date":"1400362347","viewed":147,"name":"DaeLogo Line","username":"daeken","description":"My logo, line form.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["logo","shaderforth"],"hasliked":0,"parentid":"","parentname":""}}