{"ver":"0.1","info":{"id":"md3cDH","date":"1694992390","viewed":105,"name":"Fake Sphere 3d","username":"davidmachadosf","description":"original shader was forked from FabriceNeyret2.\nI forked it trying to make yhis 3d. Its not easy...\nNow Im just experimenting with parameters to understand the algorithm and trying to get interesting results... ;-)\n\n","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["3d","distortions","dots","short","golf","loopless"],"hasliked":0,"parentid":"mdtyzN","parentname":"Sphere fake 3d - loopless & golf"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// loopless + golfing 533 \"Sphere fake 3d\" by SnackEater. https://shadertoy.com/view/dljfWW\n// 272 without Jacobians -  288 with approx J  - 308 with exact J\n\n\n#define ROT mat2(cos( iTime +vec4(.5,33,11,0.)))\n\nvoid mainImage( out vec4 COR, vec2 XY ) {\n\n    bool esq = int(XY.y)%2==0;\n    //if (!esq) {\n    //     XY.y = XY.y-1.;\n    //    return;\n   // }\n    \n\n    vec3  R = iResolution, P;\n    XY = ( 2.*XY - R.xy );\n    XY /= R.y;\n    \n    \n    float S = (1.+sin(iTime/1000.))*.05,\n          Z = 1. - dot(XY,XY);\n    \n    //COR = vec4(esq?1.:0., esq?0.:1., 0., 1.);\n    COR *= 0.;\n    Z > 0.                                                         // if on sphere\n      ? \n        P = vec3( XY, pow(Z,.5) ),                                    // 3D point on front half-sphere\n        P.yz *= ROT,\n        P.xz *= ROT,                                                 // rotate on sphere\n        XY =  vec2( atan(length(P.xy),P.z), atan(P.x,P.y) ),        // get parameterization\n        COR.g= 1. - length( ( mod( XY + S , 2.*S ) -S )               // draw blob at grid centers\n                          // / fwidth(XY) ) * 140./R.y                // compensate distorsion with Jacobian (approx)\n                          * inverse(transpose(mat2(dFdx(XY),dFdy(XY)))) )  * 1e2/R.y  // ( precise )\n      : S\n      ;\n}\n","name":"Image","description":"","type":"image"}]}