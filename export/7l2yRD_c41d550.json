{"ver":"0.1","info":{"id":"7l2yRD","date":"1649337988","viewed":61,"name":"Projet 3D Alexis","username":"zarwax90","description":"projet 3D","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["projet"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int MAX_MARCHING_STEPS = 255;\nconst float MIN_DIST = 0.0;\nconst float MAX_DIST = 100.0;\nconst float PRECISION = 0.001;\nconst float EPSILON = 0.0005;\n\nstruct Surface {\n    float sd; // signed distance value\n    vec3 col; // couleur\n};\n\nSurface sdFloor(vec3 p, vec3 col) {\n  float d = p.y + 1.;\n  return Surface(d, col);\n}\n\n// Création de la sphere\nSurface sdSphere(vec3 p, float r, vec3 offset, vec3 col) {\n  p = (p - offset);\n  float d = length(p) - r;\n  return Surface(d, col);\n}\n\nSurface opUnion(Surface obj1, Surface obj2) {\n  if (obj2.sd < obj1.sd) return obj2;\n  return obj1;\n}\n\n// Renvoie les formes de la scène\nSurface scene(vec3 p) {\n  vec3 floorColor = vec3(0.1 + 0.7 * mod(floor(p.x) + floor(p.z), 2.0));\n  Surface co = sdFloor(p, floorColor);\n  co = opUnion(co, sdSphere(p, 1., vec3(0, 0, -2), vec3(1, 0, 0)));\n return co;\n}\n\n// lancement de rayon\nSurface rayMarch(vec3 ro, vec3 rd) {\n  float depth = MIN_DIST;\n  Surface co; // closest object\n\n  for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n    vec3 p = ro + depth * rd;\n    co = scene(p);\n    depth += co.sd;\n    if (co.sd < PRECISION || depth > MAX_DIST) break;\n  }\n  \n  co.sd = depth;\n  \n  return co;\n}\n\n\n\n// prend un point d'échantillon\nvec3 calcNormal(in vec3 p) {\n    vec2 e = vec2(1, -1) * EPSILON;\n    return normalize(\n      e.xyy * scene(p + e.xyy).sd +\n      e.yyx * scene(p + e.yyx).sd +\n      e.yxy * scene(p + e.yxy).sd +\n      e.xxx * scene(p + e.xxx).sd);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n  vec3 backgroundColor = vec3(0.835, 1, 1);\n\n  vec3 col = vec3(0);\n  vec3 ro = vec3(0, 0, 3); // origine du rayon qui représente la position de la caméra\n  vec3 rd = normalize(vec3(uv, -1)); // direction des rayons\n\n  Surface co = rayMarch(ro, rd); // objet le plus proche\n\n  if (co.sd > MAX_DIST) {\n    col = backgroundColor; // ray n'a rien touché\n  } else {\n    vec3 p = ro + rd * co.sd; // point découvert à partir de la marche des rayons\n    vec3 normal = calcNormal(p);\n\n    vec3 lightPosition = vec3(cos(iTime), 2, sin(iTime)); // position de la lumière\n    vec3 lightDirection = normalize(lightPosition - p); // direction de la lumière\n    \n    // diffuse reflection\n    float dif = clamp(dot(normal, lightDirection), 0., 1.) + 0.5; \n    \n    vec3 newRayOrigin = p + normal * PRECISION * 2.;\n    float shadowRayLength = rayMarch(newRayOrigin, lightDirection).sd; // projeter un rayon d'ombre vers la source de lumière\n   if (shadowRayLength < length(lightPosition - newRayOrigin)) dif *= 0.2; // ombre\n\n    col = dif * co.col; \n    \n  }\n\n  col = pow(col, vec3(1.0/2.2)); // Correction des gammas\n  fragColor = vec4(col, 1.0); // Output to screen\n}\n","name":"Image","description":"","type":"image"}]}