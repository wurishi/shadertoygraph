{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"//If you're new to GLSL or programming in general,\n//I encourage you to play with these variables and values to see what they do! \n\n//Variable declarations\n\n//Sets size of the sphere and brightness of the shine\nfloat sphereScale = 0.7;\nfloat sphereShine = 0.5;\n\n//Sets diffuse colour(red, green, blue), specular colour(red, green, blue), \n//and initial specular point position(x, y)\nvec3 sphereDiff = vec3(0.5, 0.0, 0.5);\nvec3 sphereSpec = vec3(1.0, 1.0, 1.0);\nvec2 specPoint = vec2(0.2, -0.1);\n\n//Draws a hard outline around the edge of the screen\nvec2 outlineCurve(vec2 uv) {\n\t//Set the position of the outline diagonal \n\tuv = (uv - 0.5) * 2.0;\n\tuv *= 1.1;\n\t\n\t//Warps(for lack of a better term) the image on the x and y axis\t\n\tuv.x *= 1.0 + pow((abs(uv.y) / 4.0), 2.5);\n\tuv.y *= 1.0 + pow((abs(uv.x) / 3.5), 2.5);\n\t\n\tuv = (uv / 2.0) + 0.5;\n\tuv = uv * 0.92 + 0.04;\n\t\n\treturn uv;\n}\t\n\n//Main method/function\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\t//Creates shader pixel coordinates\n\tvec2 q = fragCoord.xy / iResolution.xy;\n    \n\tvec2 uv = q;\n\t\n\t//Call to the function where the vignette outline is calculated\n    uv = outlineCurve(uv);\n\n\t//Sets the position of the \"camera\"\n\tvec2 p = uv * 2.3 - 1.0;\n\tp.x *= iResolution.x / iResolution.y;\n\t\n\t//Rotates the sphere in a circle\n\tp.x += cos(-iTime) * 0.35;\n\tp.y += sin(-iTime) * 0.35;\n\t\n\t//Rotates the specular point with the sphere\n\tspecPoint.x += cos(-iTime) * 0.35;\n\tspecPoint.y += sin(-iTime) * 0.35;\n\t\n\t//Sets the radius of the sphere to the middle of the screen\n\tfloat radius = sqrt(dot(p, p));\n\t\n\t//Sets the screen background colour\n\tvec3 col = vec3(0.6, 0.5, 0.6);\n\t\n\t//Sets the initial dark shadow around the edge of the sphere\n\tfloat f = smoothstep(sphereScale * 0.9, sphereScale, length(p + specPoint));\n\tcol -= mix(col, vec3(0.0), f) * 0.2;\n\t\n\t//Only carries out the logic if the radius of the sphere is less than the scale\n\tif(radius < sphereScale) {\n\t\tvec3 bg = col;\n\t\t\n\t\t//Sets the solid (diffuse) colour of the sphere, as defined in the sphereDiff variable\n\t\tcol = sphereDiff;\n\t\t\n\t\t//Adds smooth dark borders to help achieve 3D look\n\t\tf = smoothstep(sphereScale * 0.7, sphereScale, radius);\n\t\tcol = mix(col, sphereDiff * 0.45, f);\n\t\n\t\t//Adds specular glow to help achive 3D look\n\t\tf = 1.0 - smoothstep(-0.2, 0.6, length(p - specPoint));\n\t\tcol += f * sphereShine * sphereSpec;\n\t\t\n\t\t//Smoothes the edge of the sphere\n\t\tf = smoothstep(sphereScale - 0.01, sphereScale, radius);\n\t\tcol = mix(col, bg, f);\n\t}\n\t\n\tfloat vignette = (2.0 * 2.0 * uv.x * uv.y * (1.0 - uv.x));\n\tcol *= vec3(pow(vignette, 0.1));\n\t\n\t//Draws the horizontal scan lines across the screen\n\tfloat scanLines = clamp(0.35 + 0.35 * cos(3.5 + uv.y * iResolution.y * 1.5), 0.0, 1.0);\n\t\n\t//Sets the saturation by taking in the scan lines statement and a brightness value \n\tfloat saturation = pow(scanLines, 4.0);\n\tcol = col * vec3(1.0 + 1.5 * saturation);\t\n\t\n\t//Sets the position of the black outline around the edge of the screen\n\t//If UV on the x axis is less than zero (left of the screen), or is greater than 0.999 (right of the screen)\n\tif (uv.x < 0.0 || uv.x > 0.999) {\n\t\t//Then the colour is set to 0 in that area\n\t\tcol *= 0.0;\n\t}\n\t\n\t//Sets the position of the black outline around the edge of the screen\n\t//If UV on the y axis is less than zero (bottom of the screen), or is greater than 0.999 (top of the screen)\n\tif (uv.y < 0.0 || uv.y > 0.999) {\n\t\t//Then the colour is set to 0 in that area\n\t\tcol *= 0.0;\n\t}\t\n\t\n\t//The final output of the shader logic above\n\t//fragColor is a vector with 4 paramaters(red, green, blue, alpha)\n\t//Only 2 need to be used here, as \"col\" is a vector that already carries r, g, and b values\n\tfragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"Ms23zG","date":"1390347078","viewed":584,"name":"Sphere With Image Effects","username":"_james_h","description":"The rotating sphere from my last shader, but with vignette and scan lines image effects.\nAgain, the code is commented, so you can see what is going on!","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["sphere","animation","fancypantsimageeffects"],"hasliked":0,"parentid":"","parentname":""}}