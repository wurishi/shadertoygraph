{"ver":"0.1","info":{"id":"fltXRn","date":"1638614553","viewed":193,"name":"pastelswirly","username":"HaleyHalcyon","description":"a","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["spiral"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TAU (3.14159265 * 2.)\n#define HEX(x) vec3((ivec3(x) >> ivec3(16, 8, 0)) & 255) / 255.\n#define ZIGZAG(x) (1. - abs(1. - 2. * fract(x)))\nvec3 color(float x){\n    const int colorCount = 6;\n    vec3[] c = vec3[](\n        HEX(0x70c0ff),\n        HEX(0xff70c0),\n        HEX(0xffd070),\n        HEX(0xcf80e0),\n        HEX(0x70ffc0),\n        HEX(0xffa8e0)\n    );\n    x *= float(colorCount);\n    int lo = int(floor(x));\n    \n    return mix(\n        c[lo],\n        c[(lo + 1) % colorCount],\n        smoothstep(0.95, 1., fract(x))\n    );\n}\n\n#define COLWID 0.4\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = fract(iTime / 4.);\n    // Scales pixel coordinates, so that\n    // the center is distance 0 and\n    // diagonals are distance 1\n    vec2 uvR = 2. * fragCoord - iResolution.xy;\n    vec2 uv = uvR / length(iResolution.xy);\n\n    float lenSq = log(uv.x * uv.x + uv.y * uv.y);\n    float angle = atan(uv.y, uv.x) / TAU;\n    \n    vec3 colA = color(fract(\n      ZIGZAG(\n        0.22 * lenSq\n        + -1. * angle + 1. * time\n      ) * COLWID\n      + 0.05 * lenSq\n      + 2. * time\n    ));\n    \n\n    // Time varying pixel color\n    vec3 col = colA;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}