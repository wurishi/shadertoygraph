{"ver":"0.1","info":{"id":"XfdyW4","date":"1730660886","viewed":138,"name":"Conways Watercolor","username":"thexa4","description":"An artistic visualization of Conways game of life","likes":2,"published":3,"flags":48,"usePreview":0,"tags":["noise","life","conway"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec4 bufferBState = texture(iChannel0, fragCoord.xy / iResolution.xy);\n    vec4 bufferAState = texture(iChannel2, fragCoord.xy / iResolution.xy);\n    float gameState = bufferAState.r + bufferAState.g + bufferAState.b;\n\n\tfragColor = vec4(0.03 * vec3(1, 1, 1) * bufferBState.a + pow(bufferBState.rgb, vec3(1, 1, 1) * 0.3) + vec3(gameState * 1.0 , gameState * 1.0, gameState * 1.0) * 0.0, 1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"bool getKeyState(int keyCode, int stateType){\n    return bool(texelFetch(iChannel2, ivec2(keyCode, stateType), 0).x);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 resetCoord = fragCoord.xy / iChannelResolution[1].xy * (mod(iTime, 5.0) + 1.0);\n    resetCoord = abs(mod(resetCoord, 2.0) - 1.0);\n    \n    vec4 resetPixel = texture(iChannel1, resetCoord);\n    vec4 resetFilled  = 1.0 - clamp((mod(resetPixel * 10.0, 1.0) - 0.1) * 1000.0, 0.0, 1.0);\n    \n    vec4 prevPixel = texture(iChannel0, (fragCoord.xy ) / iResolution.xy);\n    \n    vec4 topLeft = texture(iChannel0, (fragCoord.xy + vec2(1, -1)) / iResolution.xy);\n    vec4 topMid = texture(iChannel0, (fragCoord.xy + vec2( 1,  0)) / iResolution.xy);\n    vec4 topRight = texture(iChannel0, (fragCoord.xy + vec2( 1,  1)) / iResolution.xy);\n    vec4 midLeft = texture(iChannel0, (fragCoord.xy + vec2(0, -1)) / iResolution.xy);\n    vec4 midRight = texture(iChannel0, (fragCoord.xy + vec2( 0,  1)) / iResolution.xy);\n    vec4 bottomLeft = texture(iChannel0, (fragCoord.xy + vec2( -1, -1)) / iResolution.xy);\n    vec4 bottomMid = texture(iChannel0, (fragCoord.xy + vec2(-1,  0)) / iResolution.xy);\n    vec4 bottomRight = texture(iChannel0, (fragCoord.xy + vec2(-1,  1)) / iResolution.xy);\n    vec4 n =\n        midLeft +\n        midRight +\n        topMid +\n        topRight +\n        topLeft +\n        bottomLeft +\n        bottomMid +\n        bottomRight;\n       \n    vec4 blinkerTopLeft = texture(iChannel0, (fragCoord.xy + vec2(2, -1)) / iResolution.xy);\n    vec4 blinkerTopMid = texture(iChannel0, (fragCoord.xy + vec2( 2,  0)) / iResolution.xy);\n    vec4 blinkerTopRight = texture(iChannel0, (fragCoord.xy + vec2( 2,  1)) / iResolution.xy);\n    vec4 blinkerBottomLeft = texture(iChannel0, (fragCoord.xy + vec2( -2, -1)) / iResolution.xy);\n    vec4 blinkerBottomMid = texture(iChannel0, (fragCoord.xy + vec2(-2,  0)) / iResolution.xy);\n    vec4 blinkerBottomRight = texture(iChannel0, (fragCoord.xy + vec2(-2,  1)) / iResolution.xy);\n    \n    vec4 blinkWhite =\n        blinkerTopLeft +\n        blinkerTopMid +\n        blinkerTopRight +\n        topLeft +\n        topRight +\n        midLeft +\n        midRight +\n        bottomLeft +\n        bottomRight +\n        blinkerBottomLeft +\n        blinkerBottomMid +\n        blinkerBottomRight;\n    vec4 blinkBlack =\n        topMid +\n        prevPixel +\n        bottomMid;\n    \n    vec4 isBlinkWhite = clamp(1.0 - blinkWhite, 0.0, 1.0);\n    vec4 isBlinkBlack = clamp(blinkBlack - 2.0, 0.0, 1.0);\n    vec4 isBlinker = isBlinkWhite * isBlinkBlack;\n    \n    if(prevPixel.r > 0.5) {\n        if(n.r>3.5 || n.r < 1.5) {\n            prevPixel.r = 0.0;//vec4(0,0,0,0);\n        }\n    } else {\n        if (n.r > 2.5 && n.r < 3.5) {\n            prevPixel.r = 1.0;//vec4(1,1,1,1);\n        }\n    }\n    \n    if(prevPixel.g > 0.5) {\n        if(n.g>3.5 || n.g < 1.5) {\n            prevPixel.g = 0.0;//vec4(0,0,0,0);\n        }\n    } else {\n        if (n.g > 2.5 && n.g < 3.5) {\n            prevPixel.g = 1.0;//vec4(1,1,1,1);\n        }\n    }\n    \n    if(prevPixel.b > 0.5) {\n        if(n.b>3.5 || n.b < 1.5) {\n            prevPixel.b = 0.0;//vec4(0,0,0,0);\n        }\n    } else {\n        if (n.b > 2.5 && n.b < 3.5) {\n            prevPixel.b = 1.0;//vec4(1,1,1,1);\n        }\n    }\n    \n    prevPixel = mix(prevPixel, vec4(0, 0, 0, 0), isBlinker);\n    \n    float isDead = clamp((texture(iChannel3, fragCoord.xy / iResolution.xy).a - 0.95) * 200.0, 0.0, 1.0);\n    prevPixel += isDead * resetFilled;\n \n    fragColor = getKeyState(37, 1) ? vec4(0, 0, 0, 0) : prevPixel;\n    \n    float scanLineWidth = 30.0;\n    float curScanline = mod(iTime * 100.0f + sin(fragCoord.y / 200.0 + iTime) * 300.0 + sin(fragCoord.y / 63.0 - iTime * 3.0) * 80.0, iResolution.x);\n    if (fragCoord.x > curScanline - scanLineWidth && fragCoord.x < curScanline + scanLineWidth) {\n        if ((resetPixel.r + resetPixel.g + resetPixel.b) / 3.0 * texture(iChannel3, fragCoord.xy / iResolution.xy).a > 0.5) {\n            fragColor = vec4(0, 0, 0, 0);\n        }\n    }\n    \n        \n    if (iFrame == 0) {\n        fragColor.rgb = resetFilled.rgb;\n    }\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"bool getKeyState(int keyCode, int stateType){\n    return bool(texelFetch(iChannel2, ivec2(keyCode, stateType), 0).x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 prevPixel = texture(iChannel0, fragCoord.xy / iResolution.xy);\n    vec4 bufferACur = texture(iChannel1, (fragCoord.xy ) / iResolution.xy);\n    \n    float blur = (\n      texture(iChannel0, (fragCoord.xy + vec2(1, 0)) / iResolution.xy).a +\n      texture(iChannel0, (fragCoord.xy + vec2(0, 1)) / iResolution.xy).a +\n      texture(iChannel0, (fragCoord.xy + vec2(-1, 0)) / iResolution.xy).a +\n      texture(iChannel0, (fragCoord.xy + vec2(0, -1)) / iResolution.xy).a) / 4.0;\n        \n    vec4 trailActivity = abs(prevPixel - 0.5) * 2.0;\n    float mostActivity = min(min(trailActivity.r, trailActivity.g), trailActivity.b);\n    \n    float saturatedActivity = clamp((mostActivity - 0.95) * 100.0 + 0.95, 0.0, 1.0);\n\n    \n    vec4 temp = max(bufferACur, mix(bufferACur, prevPixel, 0.99));\n    temp.a = min(saturatedActivity * 0.1 + blur * 0.9, blur) + 0.03 * saturatedActivity;\n    \n    fragColor = getKeyState(37, 0) ? vec4(0, 0, 0, 0) : temp;\n}","name":"Buffer B","description":"","type":"buffer"}]}