{"ver":"0.1","info":{"id":"Wd3GD4","date":"1568494789","viewed":619,"name":"Lissajous oscilloscope","username":"blinry","description":":)","likes":9,"published":3,"flags":0,"usePreview":0,"tags":["oscilloscope","lissajous"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float map(vec2 p, float r, float t) {\n    return distance(0.4*vec2(cos(3.0*t), sin(2.0*t)), p) - r;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int l = 500;\n   \n    vec2 uv = (fragCoord-iResolution.xy*.5)/iResolution.y;\n\n    vec3 col = vec3(.015/distance(0.4*vec2(cos(3.0*iTime), sin(2.0*iTime)), uv));\n    \n    // Would there be a better way to do this? :D\n    for(int i=0; i<l; i++) { \n        col = max(col,\n                 vec3(\n                     smoothstep(-0.005, 0.005, -map(uv, 0.02*float(l-i)/float(l), iTime-float(i)*0.005)))\n                     *pow(float(l-i), 0.8)/float(l));\n    }\n    \n    col *= vec3(1.0, 2.0, 1.0);\n\n    col += vec3((1.0-step(0.002, abs(mod(uv.y, 0.1))))*(1.0-step(0.02, abs(uv.x))));\n    col += vec3((1.0-step(0.002, abs(mod(uv.x, 0.1))))*(1.0-step(0.02, abs(uv.y))));\n    col += vec3((1.0-step(0.002, abs(uv.y))));\n    col += vec3((1.0-step(0.002, abs(uv.x))));\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}