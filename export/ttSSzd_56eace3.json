{"ver":"0.1","info":{"id":"ttSSzd","date":"1566769930","viewed":162,"name":"Julia explorer","username":"Bananaft","description":"Navigate by dragging mouse.\nWatch this if you want to know what's happening here:\nhttps://www.youtube.com/watch?v=vfteiiTfE0c\nhttps://www.youtube.com/watch?v=oCkQ7WK7vuY\n\nSomeday I will maybe add a zoom feature.","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["2d","fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float aspect = iResolution.x/iResolution.y;\n    uv.y /= aspect;\n\tvec2 m = texture( iChannel0, vec2(.5,.5)/iResolution.xy, -100.0 ).zw;\n    vec2 zoom = texture( iChannel0, vec2(1.5,.5)/iResolution.xy, -100.0 ).xy;\n    //m.x = iMouse.x/iResolution.x; m.y = iMouse.y/iResolution.y;\n    m = 2.5 * (vec2(0.5)+m);\n    \n\tvec2 z, c;\n    \n    c.x = m.x;\n    c.y = m.y;\n    \n\tif (uv.x>0.5)\n    {\n       \n        c.x += -2.;\n        c.y += - 1. - 0.5/aspect;\n        z.x = (uv.x - 0.75)*6.;\n  \t\tz.y = (uv.y - 0.5/aspect)*6.;        \n\n    } else {\n        \n     \tc.x += uv.x - 2.25;\n    \tc.y += uv.y - 1.0 - 1.0/aspect;   \n        \n        z = c;\n    }\n     \n    int i;\n\n    \n \n    for(i=0; i<100; i++) {\n        float x = (z.x * z.x - z.y * z.y) + c.x;\n        float y = (z.y * z.x + z.x * z.y) + c.y;\n\n        if((x * x + y * y) > 4.0) break;\n        z.x = x;\n        z.y = y;\n    }\n    \n    vec3 col = vec3(float(i)/100.f);\n    \n\tvec2 csu = abs(vec2(abs(fragCoord.x-iResolution.x/2.) - iResolution.x/4., fragCoord.y-iResolution.y/2.));\n    float hud = (1.-step(1., csu.x)) * (step(12.,csu.y) - step(16.,csu.y)) + (1.-step(1., csu.y)) * (step(12.,csu.x) - step(16.,csu.x)); \n    col = mix(col, vec3(0.,1.,0.), hud);\n\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const int Key_C = 67; \nconst int Key_X = 88; \nconst int Key_Z = 90;\nconst int Key_0 = 48; const int Key_1 = 49; const int Key_2 = 50; const int Key_3 = 51; const int Key_4 = 52;\nconst int Key_5 = 53; const int Key_6 = 54; const int Key_7 = 55; const int Key_8 = 56; const int Key_9 = 57;\nconst int Key_Space = 32;\n\nfloat ReadKeyInternal( int key, bool toggle )\n{\n\treturn texture( iChannel3, vec2( (float(key)+.5)/256.0, toggle?.75:.25 ) ).x;\n}\n\nfloat ReadKey( int key )\n{\n\treturn ReadKeyInternal(key,false);\n}\n\nfloat ReadKeyToggle( int key )\n{\n\treturn ReadKeyInternal(key,true);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if ( int(fragCoord.y) == 0 )\n    {\n       \n            vec4 pos = texture( iChannel0, vec2(.5,.5)/iResolution.xy, -100.0 );\n            vec4 zoom = texture( iChannel0, vec2(1.5,.5)/iResolution.xy, -100.0 );\n      \t\t\n        \tbool press = (iMouse.z > .0);\n       \n            if ( press )\n            {\n                //vec2 mv = \n                pos.xy = (iMouse.xy - abs(iMouse.zw)) * -0.02;\n                pos.xy = clamp(pos.xy,vec2(-4.),vec2(4.));\n            }\n           \t\n        \t       \t\n        \tpos.xy *= 0.95;\n        \tpos.zw += pos.xy*iTimeDelta * 0.1;\n        \tvec2 v = pos.zw;\n        \tpos.zw = clamp(pos.zw,vec2(-0.55),vec2(0.55));\n\t\t\t\n        \tif (iMouse.x <= 1.) \n                pos.zw = 0.15 * vec2(1. + 2.*sin(iTime),0.7+cos(iTime));\n        \n            if ( int(fragCoord.x) == 0 )\n            {\n            \tfragColor = pos;\n            }\n            else\n            {\n            \tfragColor = zoom;\n            }\n            \n\n    } \n}","name":"Buffer A","description":"","type":"buffer"}]}