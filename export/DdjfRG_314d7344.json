{"ver":"0.1","info":{"id":"DdjfRG","date":"1689843693","viewed":23,"name":"learning-symmetry(for set)","username":"bazylevnik0","description":"geometrical and algebraic","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["patterns"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 square(vec2 c) {\n    return vec2(c.x * c.x - c.y * c.y, 2.0*c.x*c.y);\n}// from https://www.shadertoy.com/view/flVfzd\n\nfloat mandelbrot(vec2 c){\n    vec2 z = vec2(0.0,0.0);\n    float n = 0.0;\n    while (abs(length(z)) <= 1.0 && n <= 100.0) {\n        //algebraic symmetry\n        //original   z = square(z) + c;\n        z = square(square(z)) + c;\n        n += 1.0;\n    }\n    return n/100.0;\n}//https://www.codingame.com/playgrounds/2358/how-to-plot-the-mandelbrot-set\n    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = (fragCoord/iResolution.xy-0.5)*2.0;\n    if(uv.x<0.0)uv.x*=(-1.0);\n       // Time varying pixel color\n    float draw = mandelbrot(uv);\n  \n    // Output to screen\n    fragColor = vec4(draw, draw, draw, 1.0);\n}","name":"Image","description":"","type":"image"}]}