{"ver":"0.1","info":{"id":"wlfBzf","date":"1597303770","viewed":118,"name":"A practice of cubemaps","username":"akanarika","description":"A practice to load cubemaps","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["cubemap"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat3 lookat(vec3 cam) {\n    vec3 forward = normalize(-cam);\n    vec3 right = cross(forward, normalize(vec3(0, 1, 0)));\n    vec3 up = cross(right, forward);\n   \n    return mat3(right, up, forward);\n}\n\nmat2 rot(float a) {\n    float c = cos(a);\n    float s = sin(a);\n    return mat2(c, -s, s, c);\n}\n\nbool hitSphere(in vec3 o, in vec3 d, in vec3 p, in float r, out vec3 hit, out vec3 n) {\n    float a = dot(d, d);\n    float b = 2. * dot(o - p, d);\n    float c = dot(o - p, o - p) - r * r;\n    float delta = b * b - 4. * a * c;\n    if (delta < 0.) return false;\n    float t = (-b - sqrt(delta)) / (2. * a);\n    hit = o + d * t;\n    n = normalize(hit - p);\n    return true;\n}\n\nvec3 color(vec3 o, vec3 d) {\n    vec3 light = normalize(vec3(-5, 50, -8));\n    light.xz *= rot(iTime * .1 + iMouse.x * .1);\n    vec3 p = vec3(0, 0, 0);\n    float r = .8;\n    vec3 hit, n;\n    if (hitSphere(o, d, p, r, hit, n)) {\n        vec3 ref = reflect(hit, d);\n        return texture(iChannel0, -ref).xyz * .8\n            + pow(max(0., dot(n, normalize(-d + light))), 64.);\n    }\n    \n\treturn texture(iChannel0, d).xyz;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = 2. * (fragCoord.xy - .5 * iResolution.xy) / iResolution.y;\n    \n    vec3 cam = vec3(1, 0, 1);\n    cam.xz *= rot(iTime * .1 + iMouse.x * .1);\n    vec3 d = lookat(cam) * normalize(vec3(uv, -1));\n    vec3 col = color(cam, d);\n\n    fragColor = vec4(sqrt(col), 1);\n}","name":"Image","description":"","type":"image"}]}