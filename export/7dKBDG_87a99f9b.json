{"ver":"0.1","info":{"id":"7dKBDG","date":"1658855100","viewed":151,"name":"sws3005_06 Ray Tracing ","username":"jimazeyu","description":"The final assignment of 2022 Nus Summer Workshop. Use Real-Time Ray Tracing on GPU to ceate a fantastic scene.","likes":2,"published":1,"flags":0,"usePreview":1,"tags":["raytracing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGRr","filepath":"/media/a/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","previewfilepath":"/media/ap/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//============================================================================\n// PROJECT ID: SWS3005_12\n//\n// GROUP NUMBER: 12\n//\n// STUDENT NAME: Ji Mazeyu\n// NUS User ID.: t0925931\n//\n// STUDENT NAME: Lu Bingyu\n// NUS User ID.: t0925747\n//\n// STUDENT NAME: Wang Tianyi\n// NUS User ID.: t0925770\n//\n// COMMENTS TO GRADER:\n//\n//============================================================================\n\n\n// FRAGMENT SHADER FOR SHADERTOY\n// Run this at https://www.shadertoy.com/new\n// See documentation at https://www.shadertoy.com/howto\n\n// Your browser must support WebGL 2.0.\n// Check your browser at https://webglreport.com/?v=2\n\n\n//============================================================================\n// Constants.\n//============================================================================\n\nconst float PI = 3.1415926536;\n\nconst vec3 BACKGROUND_COLOR = vec3( 0.1, 0.2, 0.6 );\n\n// Vertical field-of-view angle of camera. In radians.\nconst float FOVY = 50.0 * PI / 180.0;\n\n// Use this for avoiding the \"epsilon problem\" or the shadow acne problem.\nconst float DEFAULT_TMIN = 10.0e-4;\n\n// Use this for tmax for non-shadow ray intersection test.\nconst float DEFAULT_TMAX = 10.0e6;\n\n// Equivalent to number of recursion levels (0 means ray-casting only).\n// We are using iterations to replace recursions.\nconst int NUM_ITERATIONS = 2;\n\n// Epsilon\nconst float EPSILON = 10.0e-4;\n\n\n// Max Nums of the scene objects.\nconst int MAX_LIGHTS = 50;\nconst int MAX_MATERIALS = 50;\nconst int MAX_PLANES = 50;\nconst int MAX_SPHERES = 50;\nconst int MAX_CYLINDERS = 50;\nconst int MAX_BOXS = 50;\nconst int MAX_STAIRS = 7;\n\n// Nums of the scene objects.\nint num_lights = 0;\nint num_materials = 0;\nint num_planes = 0;\nint num_spheres = 0;\nint num_cylinders = 0; \nint num_boxs = 0 ;\nint num_stairs = 5;//odd\n\n//============================================================================\n// Define new struct types.\n//============================================================================\nstruct Ray_t {\n    vec3 o;  // Ray Origin.\n    vec3 d;  // Ray Direction. A unit vector.\n};\n\nstruct Light_t {\n    vec3 position;  // Point light 3D position.\n    vec3 I_a;       // For Ambient.\n    vec3 I_source;  // For Diffuse and Specular.\n};\n\nstruct Material_t {\n    vec3 k_a;   // Ambient coefficient.\n    vec3 k_d;   // Diffuse coefficient.\n    vec3 k_r;   // Reflected specular coefficient.\n    vec3 k_rg;  // Global reflection coefficient.\n    float n;    // The specular reflection exponent. Ranges from 0.0 to 128.0.\n};\n\nstruct Plane_t {\n    // The plane equation is Ax + By + Cz + D = 0.\n    float A, B, C, D;\n    int materialID;\n};\n\nstruct Sphere_t {\n    vec3 center;\n    float radius;\n    int materialID;\n};\n\nstruct Cylinder_t{\n    vec3 center;\n    float radius;\n    float height;\n    int materialID;\n};\n\nstruct Box_t {\n    vec3 radius;\n\tint materialID;\n\tmat4 M;   // Transform Matrix\n};\n\n/////////////////////////////////////////////////////////////////////////////\n// Some useful functions.\n/////////////////////////////////////////////////////////////////////////////\n\n// random\nfloat rand(int seed){\n return fract(sin(dot(vec2(seed,seed), vec2(11.9898,28.233))) * 43358.5453);\n}\n\n//============================================================================\n// Global scene data.\n//============================================================================\nPlane_t Plane[MAX_PLANES];\nSphere_t Sphere[MAX_SPHERES];\nLight_t Light[MAX_LIGHTS];\nMaterial_t Material[MAX_MATERIALS];\nCylinder_t Cylinder[MAX_CYLINDERS];\nBox_t Box[MAX_BOXS];\n\nint PlatformColorMap[MAX_STAIRS*MAX_STAIRS];\n\n/////////////////////////////////////////////////////////////////////////////\n// Functions to add components\n/////////////////////////////////////////////////////////////////////////////\n\nvoid AddLights(vec3 position,vec3 I_a,vec3 I_source)\n{\n    Light[num_lights].position = position;\n    Light[num_lights].I_a = I_a;\n    Light[num_lights].I_source = I_source;\n    num_lights++;\n}\n\nvoid AddMaterial(vec3 k_d, float k_a_c, float k_r_c, float k_rg_c, float n)\n{\n    Material[num_materials].k_d = k_d;\n    Material[num_materials].k_a = k_a_c * Material[num_materials].k_d;\n    Material[num_materials].k_r = k_r_c * Material[num_materials].k_d;\n    Material[num_materials].k_rg = k_rg_c * Material[num_materials].k_r;\n    Material[num_materials].n = 64.0;\n    num_materials++;\n}\n\nvoid AddPlane(float A,float B,float C,float D,int materialID)\n{\n    Plane[num_planes].A = A;\n    Plane[num_planes].B = B;\n    Plane[num_planes].C = C;\n    Plane[num_planes].D = D;\n    Plane[num_planes].materialID = materialID;\n    num_planes++;\n}\n\nvoid AddSphere(vec3 center, float radius, int materialID)\n{\n    Sphere[num_spheres].center = center;\n    Sphere[num_spheres].radius = radius;\n    Sphere[num_spheres].materialID = materialID;\n    num_spheres++;\n}\n\nvoid AddCylinder(vec3 center, float radius, float height, int materialID)\n{\n    Cylinder[num_cylinders].center = center;\n    Cylinder[num_cylinders].radius = radius;\n    Cylinder[num_cylinders].height = height;\n    Cylinder[num_cylinders].materialID = materialID;\n    num_cylinders++;\n}\n\nvoid AddBox(vec3 radius, int materialID, mat4 M)\n{\n    Box[num_boxs].radius = radius;\n    Box[num_boxs].materialID = materialID;\n    Box[num_boxs].M = M;\n    num_boxs++;\n}\n\n// Only generate rotation about y axis. \nmat4 GenerateTransformMatrix(vec3 tranlate, float theta)\n{\n    return mat4 (vec4(cos(theta / 180.0 * PI ),0,sin(theta / 180.0 * PI ),0),\n                 vec4(0,1,0,0),\n                 vec4(-sin(theta / 180.0 * PI ),0,cos(theta / 180.0 * PI ),0),\n                 vec4(0,0,0,1))\n          *mat4 (vec4(1,0,0,0),\n                 vec4(0,1,0,0),\n                 vec4(0,0,1,0),\n                 vec4(tranlate,1));\n}\n\n// Generate a platform\nvoid GeneratePlatform()\n{\n    for(int i=0 ;i<num_stairs;i++)\n    {\n        for(int j=0 ;j<num_stairs;j++)\n        {\n            mat4 tranform_matrix=GenerateTransformMatrix(vec3(1.6*float(i-num_stairs/2),-1.0,1.6*float(j-num_stairs/2)),0.0);\n            int rand= int(rand(int(iTime+1.0))*100.0*float(i+1)*float(j+1))%6;\n            float height=0.4*float(rand);\n            int materialID = rand;\n            AddBox(vec3(0.6,height,0.6),materialID,tranform_matrix);\n        }\n    }\n}\n\n// Generate some bumping balls\nvoid GenerateBalls()\n{\n    // ball nums for an edge\n    int num_balls=num_stairs+2;\n    for(int i=0 ;i<num_balls;i++)\n    {\n        for(int j=0 ;j<num_balls;j++)\n        {\n            if(i!=0 && j!=0 && i!=num_balls-1 && j!=num_balls-1)continue;\n            vec3 pos;\n            float big_time = iTime *100.0;\n            float theta = big_time - float(int(big_time/90.0))*90.0;\n            float height  = 0.5+abs(sin(2.0*theta / 180.0 * PI));\n            float delta = 1.73*sin(theta / 180.0 * PI );\n            if(i==0 && j<num_balls-1)\n            {\n                float tmp = 1.73*float(j-num_balls/2)+delta;\n                pos = vec3(1.73*float(num_balls/2),height,tmp);\n            }\n            else if(j==0 && i>=1)\n            {\n                float tmp = 1.73*float(i-num_balls/2)-delta;\n                pos = vec3(tmp,height,1.73*float(num_balls/2));\n            }\n            else if(i==num_balls-1 && j>=1)\n            {\n                float tmp = 1.73*float(j-num_balls/2)-delta;\n                pos = vec3(-1.73*float(num_balls/2),height,tmp);\n            }\n            else if(j==num_balls-1 && i<num_balls)\n            {\n                float tmp = 1.73*float(i-num_balls/2)+delta;\n                pos = vec3(tmp,height,-1.73*float(j-num_balls/2));\n            }\n            int rand= int(rand(int(iTime+1.0))*100.0*float(i+1)*float(j+1))%6;\n            int materialID = rand;\n            AddSphere(pos,0.5,materialID);\n            \n        }\n    }    \n}\n\n/////////////////////////////////////////////////////////////////////////////\n// Initializes the scene.\n/////////////////////////////////////////////////////////////////////////////\nvoid InitScene()\n{\n    // Light 0.\n    AddLights(vec3( 4.0, 8.0, -3.0 ),\n              vec3( 0.1, 0.1, 0.1 ),\n              vec3( 1.0, 1.0, 1.0 ));\n              \n    // Light 1.\n    AddLights(vec3( -4.0, 8.0, 0.0 ),\n              vec3( 0.1, 0.1, 0.1 ),\n              vec3( 1.0, 1.0, 1.0 ));\n    \n\t// change the light color by time\n    Light[0].I_source = vec3( 0.8*abs(sin(0.2*iTime)), 0.4*abs(cos(0.2*iTime)), 0.8*abs(sin(1.2*iTime)) );\n    Light[1].I_source = vec3( 0.8*abs(sin(0.4*iTime)), 0.4*abs(cos(0.1*iTime)), 0.8*abs(sin(1.4*iTime)) );\n   \n    // Red material.\n    AddMaterial( vec3( 1.0, 0.0, 0.0 ),\n                0.2 ,\n                2.0 ,\n                0.5 ,\n                64.0);\n\n    // Green Material\n    AddMaterial( vec3( 0.0, 1.0, 0.0 ),\n                0.2 ,\n                2.0 ,\n                0.5 ,\n                64.0);\n            \n    // Blue Material\n    AddMaterial( vec3( 0.0, 0.0, 1.0 ),\n                0.2 ,\n                2.0 ,\n                0.5 ,\n                64.0);\n    \n    // Other Colors\n    AddMaterial( vec3( 1.0, 0.0, 1.0 ),\n                0.2 ,\n                2.0 ,\n                0.5 ,\n                64.0);\n\n    AddMaterial( vec3( 0.0, 1.0, 1.0 ),\n                0.2 ,\n                2.0 ,\n                0.5 ,\n                64.0);\n                \n    AddMaterial( vec3( 1.0, 1.0, 0.0 ),\n                0.2 ,\n                2.0 ,\n                0.5 ,\n                64.0);\n    \n    // Silver material.\n    AddMaterial(vec3( 0.5, 0.5, 0.5 ),\n                0.2,\n                2.0,\n                0.5,\n                64.0);\n\n    // Gold material.\n    AddMaterial( vec3( 0.8, 0.7, 0.1 ),\n                0.2 ,\n                2.0 ,\n                0.5 ,\n                64.0);\n\n    // My floor material.\n    AddMaterial( vec3( 0.15, 0.15, 0.15 ),\n                0.2 ,\n                2.0 ,\n                0.5 ,\n                64.0);\n\n    // Add floor.\n    AddPlane(0.0, 1.0, 0.0, 0.0, 8);\n    // Add eight silver walls.\n    AddPlane(0.0, 0.0, 1.0, 7.5, 6);\n    AddPlane(1.0, 0.0, 0.0, 7.5, 6);\n    AddPlane(-1.0, 0.0, 0.0, 7.5,6);\n    AddPlane(0.0, 0.0, -1.0, 7.5,6); \n\n    AddPlane(1.0, 0.0, 1.0, 11.5, 6);\n    AddPlane(-1.0, 0.0, -1.0, 11.5, 6);\n    AddPlane(-1.0, 0.0, 1.0, 11.5,6);\n    AddPlane(1.0, 0.0, -1.0, 11.5,6); \n    \n    // Generate a colorful platform\n    GeneratePlatform();\n\n    // Generate some bumping balls\n    GenerateBalls();\n\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a plane and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n// If there is such an intersection, outputs the value of t, the position\n// of the intersection (hitPos) and the normal vector at the intersection\n// (hitNormal).\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectPlane( in Plane_t pln, in Ray_t ray, in float tmin, in float tmax,\n                     out float t, out vec3 hitPos, out vec3 hitNormal )\n{\n    vec3 N = vec3( pln.A, pln.B, pln.C );\n    float NRd = dot( N, ray.d );\n    float NRo = dot( N, ray.o );\n    float t0 = (-pln.D - NRo) / NRd;\n    if ( t0 < tmin || t0 > tmax ) return false;\n\n    // We have a hit -- output results.\n    t = t0;\n    hitPos = ray.o + t0 * ray.d;\n    hitNormal = normalize( N );\n    return true;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a plane and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectPlane( in Plane_t pln, in Ray_t ray, in float tmin, in float tmax )\n{\n    vec3 N = vec3( pln.A, pln.B, pln.C );\n    float NRd = dot( N, ray.d );\n    float NRo = dot( N, ray.o );\n    float t0 = (-pln.D - NRo) / NRd;\n    if ( t0 < tmin || t0 > tmax ) return false;\n    return true;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a sphere and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n// If there is one or two such intersections, outputs the value of the\n// smaller t, the position of the intersection (hitPos) and the normal\n// vector at the intersection (hitNormal).\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectSphere( in Sphere_t sph, in Ray_t ray, in float tmin, in float tmax,\n                      out float t, out vec3 hitPos, out vec3 hitNormal )\n{\n    vec3 Rd = ray.d;\n    vec3 Ro = ray.o - sph.center;\n    float a = dot(Rd, Rd);         // a is actually 1\n    float b = dot(Rd, Ro) * 2.0;\n    float c = dot(Ro, Ro) - sph.radius * sph.radius;\n    float D = b * b - 4.0 * a * c;\n\n    // use D to check if there is solution\n    // use b to check if the ray direction is toward the sphere\n    if (D >= 0.0 && b <= 0.0){\n        t = (-b - sqrt(D)) / (2.0 * a);\n        hitPos = ray.o + t * ray.d;\n        hitNormal = normalize(hitPos - sph.center);\n        return (t >= tmin && t<= tmax);\n    }\n    return false;  // Replace this with your code.\n\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a sphere and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectSphere( in Sphere_t sph, in Ray_t ray, in float tmin, in float tmax )\n{\n    vec3 Rd = ray.d;\n    vec3 Ro = ray.o - sph.center;\n    float a = dot(Rd, Rd);         // a is actually 1\n    float b = dot(Rd, Ro) * 2.0;\n    float c = dot(Ro, Ro) - sph.radius * sph.radius;\n    float D = b * b - 4.0 * a * c;\n\n    // use D to check if there is solution\n    // use b to check if the ray direction is toward the sphere\n    if (D >= 0.0 && b <= 0.0){\n        float t = (-b - sqrt(D)) / (2.0 * a);\n        return (t >= tmin && t<= tmax);\n    }\n\n    return false;  // Replace this with your code.\n\n}\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a sphere and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n// If there is one or two such intersections, outputs the value of the\n// smaller t, the position of the intersection (hitPos) and the normal\n// vector at the intersection (hitNormal).\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectionCylinder(in Cylinder_t cyl, in Ray_t ray, in float tmin, in float tmax, out float t, out vec3 hitPos, out vec3 hitNormal){\n    vec2 rayOriInSphere = ray.o.xz - cyl.center.xz;\n    float a = dot(ray.d.xz, ray.d.xz);\n    float b = 2.0 * dot(ray.d.xz, rayOriInSphere);\n    float c = dot(rayOriInSphere, rayOriInSphere) - cyl.radius * cyl.radius;\n    float d = b*b - 4.0*a*c;\n    if(d<0.0) return false;\n    float t1 = (-1.0*b + sqrt(d))/(2.0*a);\n    float t2 = (-1.0*b - sqrt(d))/(2.0*a);\n    float finalT;\n    bool isSatisfy = false;\n    if(t1>=tmin && t1<=tmax){\n        isSatisfy = true;\n        finalT = t1;\n    }\n    if(t2>=tmin && t2<=tmax){\n        isSatisfy = true;\n        finalT = t2;\n    }\n    if(isSatisfy == false) return false;\n    t = finalT;\n    hitPos = ray.o + finalT * ray.d;\n    hitNormal = hitPos - cyl.center;\n    if(hitNormal.y - cyl.center.y<0.0 || hitNormal.y - cyl.center.y>cyl.height) return false;\n    hitNormal.y = 0.0;\n    hitNormal = hitNormal / cyl.radius;\n    return true;\n}\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a sphere and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectionCylinder(in Cylinder_t cyl, in Ray_t ray, in float tmin, in float tmax)\n{\n    vec2 rayOriInSphere = ray.o.xy - cyl.center.xy;\n    float a = dot(ray.d.xy, ray.d.xy);\n    float b = 2.0 * dot(ray.d.xy, rayOriInSphere);\n    float c = dot(rayOriInSphere, rayOriInSphere) - cyl.radius * cyl.radius;\n    float d = b*b - 4.0*a*c;\n    if(d<0.0) return false;\n    float t1 = (-1.0*b + sqrt(d))/(2.0*a);\n    float t2 = (-1.0*b - sqrt(d))/(2.0*a);\n    float finalT;\n    bool isSatisfy = false;\n    if(t1>=tmin && t1<=tmax){\n        isSatisfy = true;\n        finalT = t1;\n    }\n    if(t2>=tmin && t2<=tmax){\n        isSatisfy = true;\n        finalT = t2;\n    }\n    if(isSatisfy == false) return false;\n    return true;\n}\n\n/////////////////////////////////////////////////////////////////////////////\n// Check if the intersection is in the area of a plane.\n// Returns true if there is an intersection where is in a plane.\n/////////////////////////////////////////////////////////////////////////////\nbool inPlane(vec3 pos,vec3 leftBottom,vec3 rightTop)\n{\n    bool x1=(pos.x<=leftBottom.x+DEFAULT_TMIN)&&(pos.x>=rightTop.x-DEFAULT_TMIN);\n    bool x2=(pos.y>=leftBottom.y-DEFAULT_TMIN)&&(pos.y<=rightTop.y+DEFAULT_TMIN);\n    bool x3=(pos.z>=leftBottom.z-DEFAULT_TMIN)&&(pos.z<=rightTop.z+DEFAULT_TMIN);\n    return x1&&x2&&x3;\n}\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a box and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n// If there is such an intersection, outputs the value of t, the position\n// of the intersection (hitPos) and the normal vector at the intersection \n// (hitNormal).\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectBox(in Box_t box, in Ray_t ray, in float tmin, in float tmax, out float t, out vec3 hitPos, out vec3 hitNormal)\n{\n\tvec3 sco = (box.M * vec4(ray.o,1.0)).xyz;\n\tvec3 scd = normalize((transpose(inverse(box.M))*vec4(ray.d,1.0)).xyz);\n    vec3 m = 1.0/scd;\n    vec3 n = m * sco;\n    vec3 k = abs(m) * box.radius;\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n    \n    float tN = max( max( t1.y, t1.z ), t1.x );\n    float tF = min( min( t2.y, t2.z ), t2.x );\n\t\n    if( tN>tF || tF<0.0) return false;\n\tif ( tN < tmin || tN > tmax ) return false;\n\tt = tN;\n\thitPos = (inverse(box.M) * vec4((sco + t * scd),1.0)).xyz;\n\thitNormal = (transpose(inverse(box.M)) * vec4((-sign(ray.d)*step(t1.zxy,t1.xyz)*step(t1.yzx,t1.xyz)),1.0)).xyz;\n    return true;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a box and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectBox(in Box_t box, in Ray_t ray, in float tmin, in float tmax )\n{\n\n\tvec3 sco = (box.M * vec4(ray.o,1.0)).xyz;\n\tvec3 scd = normalize((transpose(inverse(box.M))*vec4(ray.d,1.0)).xyz);\n    vec3 m = 1.0/scd;\n    vec3 n = m * sco;\n    vec3 k = abs(m) * box.radius;\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n\n    float tN = max( max( t1.y, t1.z ), t1.x );\n    float tF = min( min( t2.y, t2.z ), t2.x );\n\t\n    if( tN>tF || tF<0.0) return false;\n\tif ( tN < tmin || tN > tmax ) return false;\n    return true;\n}\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes (I_a * k_a) + k_shadow * I_source * [ k_d * (N.L) + k_r * (R.V)^n ].\n// Input vectors L, N and V are pointing AWAY from surface point.\n// Assume all vectors L, N and V are unit vectors.\n/////////////////////////////////////////////////////////////////////////////\nvec3 PhongLighting( in vec3 L, in vec3 N, in vec3 V, in bool inShadow,\n                    in Material_t mat, in Light_t light )\n{\n    if ( inShadow ) {\n        return light.I_a * mat.k_a;\n    }\n    else {\n        vec3 R = reflect( -L, N );\n        float N_dot_L = max( 0.0, dot( N, L ) );\n        float R_dot_V = max( 0.0, dot( R, V ) );\n        float R_dot_V_pow_n = ( R_dot_V == 0.0 )? 0.0 : pow( R_dot_V, mat.n );\n\n        return light.I_a * mat.k_a +\n               light.I_source * (mat.k_d * N_dot_L + mat.k_r * R_dot_V_pow_n);\n    }\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Casts a ray into the scene and returns color computed at the nearest\n// intersection point. The color is the sum of light from all light sources,\n// each computed using Phong Lighting Model, with consideration of\n// whether the interesection point is being shadowed from the light.\n// If there is no interesection, returns the background color, and outputs\n// hasHit as false.\n// If there is intersection, returns the computed color, and outputs\n// hasHit as true, the 3D position of the intersection (hitPos), the\n// normal vector at the intersection (hitNormal), and the k_rg value\n// of the material of the intersected object.\n/////////////////////////////////////////////////////////////////////////////\nvec3 CastRay( in Ray_t ray,\n              out bool hasHit, out vec3 hitPos, out vec3 hitNormal, out vec3 k_rg )\n{\n    // Find whether and where the ray hits some object.\n    // Take the nearest hit point.\n\n    bool hasHitSomething = false;\n    float nearest_t = DEFAULT_TMAX;   // The ray parameter t at the nearest hit point.\n    vec3 nearest_hitPos;              // 3D position of the nearest hit point.\n    vec3 nearest_hitNormal;           // Normal vector at the nearest hit point.\n    int nearest_hitMatID;             // MaterialID of the object at the nearest hit point.\n\n    float temp_t;\n    vec3 temp_hitPos;\n    vec3 temp_hitNormal;\n    bool temp_hasHit;\n\n    /////////////////////////////////////////////////////////////////////////////\n    // * Try interesecting input ray with all the planes and spheres,\n    //   and record the front-most (nearest) interesection.\n    // * If there is interesection, need to record hasHitSomething,\n    //   nearest_t, nearest_hitPos, nearest_hitNormal, nearest_hitMatID.\n    /////////////////////////////////////////////////////////////////////////////\n    \n     for (int k = 0; k < num_planes; k ++){\n        temp_hasHit = IntersectPlane(Plane[k], ray, DEFAULT_TMIN, DEFAULT_TMAX,\n                      temp_t, temp_hitPos, temp_hitNormal);\n        \n        // If there is interesection, need to record hasHitSomething,\n        // nearest_t, nearest_hitPos, nearest_hitNormal, nearest_hitMatID.\n        if (temp_hasHit && temp_t < nearest_t){\n            hasHitSomething = true;\n            nearest_t = temp_t;\n            nearest_hitPos = temp_hitPos;\n            nearest_hitNormal = temp_hitNormal;\n            nearest_hitMatID  = Plane[k].materialID;\n        }\n    }\n    \n    // Try interesecting input ray with all the spheres,\n    // and record the front-most (nearest) interesection.\n    for (int k = 0; k < num_spheres; k ++){\n        temp_hasHit = IntersectSphere(Sphere[k], ray, DEFAULT_TMIN, DEFAULT_TMAX,\n                      temp_t, temp_hitPos, temp_hitNormal);\n        \n        // If there is interesection, need to record hasHitSomething,\n        // nearest_t, nearest_hitPos, nearest_hitNormal, nearest_hitMatID.\n        if (temp_hasHit && temp_t < nearest_t){\n            hasHitSomething = true;\n            nearest_t = temp_t;\n            nearest_hitPos = temp_hitPos;\n            nearest_hitNormal = temp_hitNormal;\n            nearest_hitMatID  = Sphere[k].materialID;\n        }\n    }\n    \n    // Intersection with the cylinder\n    for(int i=0; i<num_cylinders; i++){\n        temp_hasHit = IntersectionCylinder(Cylinder[i], ray, DEFAULT_TMIN, DEFAULT_TMAX, temp_t, temp_hitPos, temp_hitNormal);\n        if(temp_hasHit && temp_t<nearest_t){\n            hasHitSomething = true;\n            nearest_t = temp_t;\n            nearest_hitPos = temp_hitPos;\n            nearest_hitNormal = temp_hitNormal;\n            nearest_hitMatID = Cylinder[i].materialID;\n        }\n    }\n    \n    // Intersection with the box\n    for ( int i = 0; i < num_boxs; i++ )\n\t{\n\t\tif (IntersectBox(Box[i], ray, DEFAULT_TMIN, DEFAULT_TMAX))\n\t\t{\n\t\t\tIntersectBox(Box[i], ray, DEFAULT_TMIN, DEFAULT_TMAX, temp_t, temp_hitPos, temp_hitNormal);\n\t\t\tif (temp_t < nearest_t)\n\t\t\t{\n\t\t\t\tnearest_t = temp_t;\n\t\t\t\tnearest_hitPos = temp_hitPos;\n\t\t\t\tnearest_hitNormal = temp_hitNormal;\n\t\t\t\tnearest_hitMatID = Box[i].materialID;\n\t\t\t\thasHitSomething = true;\n\t\t\t}\n\t\t}\n\t}\n\n\n\n    // One of the output results.\n    hasHit = hasHitSomething;\n    if ( !hasHitSomething ) return BACKGROUND_COLOR;\n\n    vec3 I_local = vec3( 0.0 );  // Result color will be accumulated here.\n\n    /////////////////////////////////////////////////////////////////////////////\n    // * Accumulate lighting from each light source on the nearest hit point.\n    //   They are all accumulated into I_local.\n    // * For each light source, make a shadow ray, and check if the shadow ray\n    //   intersects any of the objects (the planes and spheres) between the\n    //   nearest hit point and the light source.\n    // * Then, call PhongLighting() to compute lighting for this light source.\n    /////////////////////////////////////////////////////////////////////////////\n\n    Ray_t ShadowRay[MAX_LIGHTS];\n    bool inshadow[MAX_LIGHTS];\n    for (int l = 0; l < num_lights; l ++){\n        // For each light source, make a shadow ray\n        ShadowRay[l].o = nearest_hitPos;\n        ShadowRay[l].d = normalize(Light[l].position - ShadowRay[l].o);\n\n        // check if the shadow ray intersects any of the planes\n        // between the nearest hit point and the light source.\n        for (int k = 0; k < num_planes; k ++){\n            if(inshadow[l]) break;\n            inshadow[l] = IntersectPlane(Plane[k], ShadowRay[l], DEFAULT_TMIN,\n                          distance(nearest_hitPos, Light[l].position));\n        }\n        \n        // check if the shadow ray intersects any of the spheres\n        // between the nearest hit point and the light source.\n        for (int k = 0; k < num_spheres; k ++){\n            if(inshadow[l]) break;\n            inshadow[l] = IntersectSphere(Sphere[k], ShadowRay[l], DEFAULT_TMIN,\n                          distance(nearest_hitPos, Light[l].position));\n        }\n\n        // Then, call PhongLighting() to compute lighting for this light source.\n        I_local += PhongLighting(ShadowRay[l].d, nearest_hitNormal, -ray.d, inshadow[l],\n                   Material[nearest_hitMatID], Light[l]);\n    }\n\n\n    // Populate output results.\n    hitPos = nearest_hitPos;\n    hitNormal = nearest_hitNormal;\n    k_rg = Material[nearest_hitMatID].k_rg;\n\n    return I_local;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Execution of fragment shader starts here.\n// 1. Initializes the scene.\n// 2. Compute a primary ray for the current pixel (fragment).\n// 3. Trace ray into the scene with NUM_ITERATIONS recursion levels.\n/////////////////////////////////////////////////////////////////////////////\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    InitScene();\n\n    // Scale pixel 2D position such that its y coordinate is in [-1.0, 1.0].\n    vec2 pixel_pos = (2.0 * fragCoord.xy - iResolution.xy) / iResolution.y;\n    \n    // Position the camera.\n    vec3 cam_pos = vec3( 6.0 * cos(iTime*0.1), abs(2.0+8.0* sin(iTime*0.1)), 6.0 * sin(iTime*0.1) );\n    vec3 cam_lookat = vec3( 0.0, 0.0 , 0.0 );\n    vec3 cam_up_vec = vec3( 0.0, 1.0, 0.0 );\n    // Set up camera coordinate frame in world space.\n    vec3 cam_z_axis = normalize( cam_pos - cam_lookat );\n    vec3 cam_x_axis = normalize( cross(cam_up_vec, cam_z_axis) );\n    vec3 cam_y_axis = normalize( cross(cam_z_axis, cam_x_axis));\n\n    // Create primary ray.\n    float pixel_pos_z = -1.0 / tan(FOVY / 2.0);\n    Ray_t pRay;\n    pRay.o = cam_pos;\n    pRay.d = normalize( pixel_pos.x * cam_x_axis  +  pixel_pos.y * cam_y_axis  +  pixel_pos_z * cam_z_axis );\n\n    // Start Ray Tracing.\n    // Use iterations to emulate the recursion.\n\n    vec3 I_result = vec3( 0.0 );\n    vec3 compounded_k_rg = vec3( 1.0 );\n    Ray_t nextRay = pRay;\n\n    for ( int level = 0; level <= NUM_ITERATIONS; level++ )\n    {\n        bool hasHit;\n        vec3 hitPos, hitNormal, k_rg;\n\n        vec3 I_local = CastRay( nextRay, hasHit, hitPos, hitNormal, k_rg );\n\n        I_result += compounded_k_rg * I_local;\n\n        if ( !hasHit ) break;\n\n        compounded_k_rg *= k_rg;\n\n        nextRay = Ray_t( hitPos, normalize( reflect(nextRay.d, hitNormal) ) );\n    }\n\n    fragColor = vec4( I_result, 1.0 );\n}\n","name":"Image","description":"","type":"image"}]}