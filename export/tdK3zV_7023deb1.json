{"ver":"0.1","info":{"id":"tdK3zV","date":"1570603518","viewed":288,"name":"Sphere Outer line 1","username":"Leasel","description":"It uses math to calculate the Outer Line of the sphere.","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["sin","spheres","orthographic","mathematica"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float scale = 25.;\nconst float r = 6.;\nvec3 posCircle= vec3(2,2,3);\nconst float degreeError = 15.;\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord/iResolution.xy);\n    uv -= 0.5;\n    uv.x*= (iResolution.x/iResolution.y);\n    uv *= scale;\n    \n    posCircle.z = sin(iTime)*5. + 5.;\n    posCircle.x = cos(iTime)*(iResolution.x -r)*0.5/scale;\n    \n    float rad = atan(r/posCircle.z);\n    \n    float d = length(-vec3(uv.xy,0.)+posCircle);\n    float radUv = asin(r/d);\n    \n    float radDeg = degreeError/6.298;\n    \n    vec3 col = vec3(0.);\n    \n    if(abs(rad-radUv) < radDeg)\n        {\n            col = vec3((1.-abs(rad-radUv))/d);\n        }\n    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}