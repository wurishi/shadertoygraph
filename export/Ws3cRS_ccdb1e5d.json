{"ver":"0.1","info":{"id":"Ws3cRS","date":"1601091588","viewed":244,"name":"pack/unpack 2x16/3x10/4x8","username":"iY0Yi","description":"Data storage functions.\nmouse.\n\nedit: added.\npack/unpackUnorm3x10Bool2\npack/unpackSnorm3x10Bool2\n","likes":5,"published":1,"flags":32,"usePreview":0,"tags":["pack","data"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\tvec4 data = texelFetch(iChannel0, ivec2(fragCoord), 0);\n\n    float raw = abs(data.w);\n    vec2 unpacked2 = abs(unpack2(data.x));\n    \n    #ifdef WITH_2BOOLS\n    bvec2 b;\n    vec3 unpacked3 = abs(unpack3b2(data.y, b));\n    #else\n    vec3 unpacked3 = abs(unpack3(data.y));\n    #endif\n    \n    vec4 unpacked4 = abs(unpack4(data.z));\n    \n    const float g = .5;\n    if(false)\n        fragColor = vec4(1);\n    \n    // 8bits      : float x4\n    else if(uv.y>=.9 && uv.y<1. && uv.x<unpacked4.x)fragColor=vec4(1,g,g, 1);\n    else if(uv.y>=.8 && uv.y<.9 && uv.x<unpacked4.y)fragColor=vec4(g,1,g, 1);\n    else if(uv.y>=.7 && uv.y<.8 && uv.x<unpacked4.z)fragColor=vec4(g,g,1, 1);\n    else if(uv.y>=.603 && uv.y<.7 && uv.x<unpacked4.w)fragColor=vec4(g,g,g, 1);\n\n    // 10bits     : float x3\n    else if(uv.y>=.5 && uv.y<.6 && uv.x<unpacked3.x)fragColor=vec4(1,g*.5,g*.5, 1);\n    else if(uv.y>=.4 && uv.y<.5 && uv.x<unpacked3.y)fragColor=vec4(g*.5,1,g*.5, 1);\n    else if(uv.y>=.302 && uv.y<.4 && uv.x<unpacked3.z)fragColor=vec4(g*.5,g*.5,1, 1);\n\t\n    // 16bits     : float x2\n    else if(uv.y>=.2 && uv.y<.3 && uv.x<unpacked2.x)fragColor=vec4(1,0,0, 1);\n    else if(uv.y>=.102 && uv.y<.2 && uv.x<unpacked2.y)fragColor=vec4(0,1,0, 1);\n        \n    // 32bits(Raw): float x1\n    else if(uv.y>=.0 && uv.y<.1 && uv.x<raw)fragColor=vec4(1);\n\n\telse fragColor = vec4(vec3(0), 1);\n    \n    #ifdef WITH_2BOOLS\n    // 10bits     : x3float (w/ x2 bool)\n    if(uv.y>=.452 && uv.y<.6 && uv.x>=unpacked3.z && uv.x<unpacked3.z+.05){\n        if(b.x)\n            fragColor.rgb = vec3(1);\n        else\n            fragColor.rgb = vec3(.01);\n    }\n    if(uv.y>=.302 && uv.y<.45 && uv.x>=unpacked3.z && uv.x<unpacked3.z+.05){\n        if(b.y)\n            fragColor.rgb = vec3(1);\n        else\n            fragColor.rgb = vec3(.01);\n    }\n    #endif\n    \n    fragColor.rgb = pow(fragColor.rgb, vec3(.4545));\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define UNSIGNED\n#define WITH_2BOOLS\nconst float SPEED = .001;\n\nuint packSnorm3x10(vec3 x) {\n    x = round(clamp(x,-1., 1.) * 511.);\n    uvec3 sig = uvec3(mix(vec3(0), vec3(1), greaterThanEqual(sign(x),vec3(0))));\n    uvec3 mag = uvec3(abs(x));\n    uvec3 r = sig.xyz << 9 | mag.xyz;\n    return r.x << 22 | r.y << 12 | r.z << 2;\n}\n\nvec3 unpackSnorm3x10(uint x) {\n    uvec3 r = (uvec3(x) >> uvec3(22, 12, 2)) & uvec3(0x3FF);\n    uvec3 sig = r >> 9;\n    uvec3 mag = r & uvec3(0x1FF);\n    vec3 fsig = mix(vec3(-1), vec3(1), greaterThanEqual(sig, uvec3(1)));\n    vec3 fmag = vec3(mag) / 511.;\n    return fsig * fmag;\n}\n\nuint packSnorm3x10Bool2(vec3 x, bvec2 b) {\n    x = round(clamp(x,-1., 1.) * 511.);\n    uvec3 sig = uvec3(mix(vec3(0), vec3(1), greaterThanEqual(sign(x),vec3(0))));\n    uvec3 mag = uvec3(abs(x));\n    uvec3 r = sig.xyz << 9 | mag.xyz;\n    uvec2 ub = uvec2(b);\n    return r.x << 22 | r.y << 12 | r.z << 2 | ub.x << 1 | ub.y;\n}\n\nvec3 unpackSnorm3x10Bool2(in uint x, out bvec2 b) {\n    uvec3 r = (uvec3(x) >> uvec3(22, 12, 2)) & uvec3(0x3FF);\n    uvec3 sig = r >> 9;\n    uvec3 mag = r & uvec3(0x1FF);\n    vec3 fsig = mix(vec3(-1), vec3(1), greaterThanEqual(sig, uvec3(1)));\n    vec3 fmag = vec3(mag) / 511.;\n    b = bvec2((uvec2(x) >> uvec2(1, 0)) & uvec2(0x1));\n    return fsig * fmag;\n}\n\nuint packSnorm4x8(vec4 x) {\n    x = round(clamp(x,-1., 1.) * 127.);\n    uvec4 sig = uvec4(mix(vec4(0), vec4(1), greaterThanEqual(sign(x),vec4(0))));\n    uvec4 mag = uvec4(abs(x));\n    uvec4 r = sig << 7 | mag;\n    return r.x << 24 | r.y << 16 | r.z << 8 | r.w;\n}\n\nvec4 unpackSnorm4x8(uint x) {\n    uvec4 r = (uvec4(x) >> uvec4(24, 16, 8, 0)) & uvec4(0xFF);\n    uvec4 sig = r >> 7;\n    uvec4 mag = r & uvec4(0x7F);\n    vec4 fsig = mix(vec4(-1), vec4(1), greaterThanEqual(sig,uvec4(1)));\n    vec4 fmag = vec4(mag) / 127.;\n    return fsig * fmag;\n}\n\nuint packUnorm3x10(vec3 x) {\n    x = round(clamp(x, 0., 1.) * 1023.);\n    uvec3 r = uvec3(x);\n    return r.x << 22 | r.y << 12 | r.z << 2;\n}\n\nvec3 unpackUnorm3x10Bool2(in uint x, out bvec2 b) {\n    uvec3 r = (uvec3(x) >> uvec3(22, 12, 2)) & uvec3(0x3FF);\n    vec3 v = vec3(r) / 1023.0;\n    b = bvec2((uvec2(x) >> uvec2(1, 0)) & uvec2(0x1));\n    return v;\n}\n\nuint packUnorm3x10Bool2(vec3 x, bvec2 b) {\n    x = round(clamp(x, 0., 1.) * 1023.);\n    uvec3 r = uvec3(x);\n    uvec2 ub = uvec2(b);\n    return r.x << 22 | r.y << 12 | r.z << 2 | ub.x << 1 | ub.y;\n}\n\nvec3 unpackUnorm3x10(uint x) {\n    uvec3 r = (uvec3(x) >> uvec3(22, 12, 2)) & uvec3(0x3FF);\n    vec3 v = vec3(r) / 1023.0;\n    return v;\n}\n\nuint packUnorm4x8(vec4 x) {\n    x = round(clamp(x, 0., 1.) * 255.);\n    uvec4 r = uvec4(x);\n    return r.x << 24 | r.y << 16 | r.z << 8 | r.w;\n}\n\nvec4 unpackUnorm4x8(uint x) {\n    uvec4 r = (uvec4(x) >> uvec4(24, 16, 8, 0)) & uvec4(0xFF);\n    vec4 v = vec4(r) / 255.0;\n    return v;\n}\n#define packS2(x) uintBitsToFloat(packSnorm2x16(x))\n#define unpackS2(x) unpackSnorm2x16(floatBitsToUint(x))\n#define packS3(x) uintBitsToFloat(packSnorm3x10(x))\n#define unpackS3(x) unpackSnorm3x10(floatBitsToUint(x))\n#define packS3B2(x, b) uintBitsToFloat(packSnorm3x10Bool2(x, b))\n#define unpackS3B2(x, b) unpackSnorm3x10Bool2(floatBitsToUint(x), b)\n#define packS4(x) uintBitsToFloat(packSnorm4x8(x))\n#define unpackS4(x) unpackSnorm4x8(floatBitsToUint(x))\n#define packU2(x) uintBitsToFloat(packUnorm2x16(x))\n#define unpackU2(x) unpackUnorm2x16(floatBitsToUint(x))\n#define packU3(x) uintBitsToFloat(packUnorm3x10(x))\n#define unpackU3(x) unpackUnorm3x10(floatBitsToUint(x))\n#define packU3B2(x, b) uintBitsToFloat(packUnorm3x10Bool2(x, b))\n#define unpackU3B2(x, b) unpackUnorm3x10Bool2(floatBitsToUint(x), b)\n#define packU4(x) uintBitsToFloat(packUnorm4x8(x))\n#define unpackU4(x) unpackUnorm4x8(floatBitsToUint(x))\n\n#ifdef UNSIGNED\n\t#define pack2 packU2\n    #define pack3 packU3\n    #define pack3b2 packU3B2\n    #define pack4 packU4\n\t#define unpack2 unpackU2\n    #define unpack3 unpackU3\n    #define unpack3b2 unpackU3B2\n    #define unpack4 unpackU4\n#else\n\t#define pack2 packS2\n    #define pack3 packS3\n    #define pack3b2 packS3B2\n    #define pack4 packS4\n\t#define unpack2 unpackS2\n    #define unpack3 unpackS3\n    #define unpack3b2 unpackS3B2\n    #define unpack4 unpackS4\n#endif","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define PI 3.14159265\nfloat swTri(float v){\n    return asin(sin(v*PI))*2./PI;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 val = vec2(abs(swTri(iTime*SPEED)), 0.);\n    if(iMouse.z>.5){\n        val = iMouse.xy/iResolution.xy;\n    }\n        \n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float x = val.x;\n    float y = val.x;\n    float z = val.x;\n    float w = val.x;\n    #ifdef WITH_2BOOLS\n    bvec2 b = bvec2(mod(val.x*200.,1.) < .5, iMouse.z>.5);\n    fragColor = vec4(pack2(vec2(x,y)), pack3b2(vec3(x,y,z), b), pack4(vec4(x,y,z,w)), x);\n    #else\n    fragColor = vec4(pack2(vec2(x,y)), pack3(vec3(x,y,z)), pack4(vec4(x,y,z,w)), x);\n    #endif\n    \n}","name":"Buffer A","description":"","type":"buffer"}]}