{"ver":"0.1","info":{"id":"7lsfDs","date":"1651704616","viewed":155,"name":"Dune Runner","username":"incre_ment","description":"Dune Runner\nInitial Version: May 04, 2022\nBased on Tutorial by IQ here:\nhttps://iquilezles.org/articles/terrainmarching/\nUses a 2D Simplex Noise implementation by IQ:\nhttps://www.shadertoy.com/view/Msf3WH","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["learning"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Dune Runner\n// Initial Version: May 04, 2022\n// Based on Tutorial by IQ here:\n// https://iquilezles.org/articles/terrainmarching/\n// Uses a 2D Simplex Noise implementation by IQ:\n// https://www.shadertoy.com/view/Msf3WH\n\n\nstruct ray{\n vec3 direction;\n vec3 origin;\n};\n\nbool goRay(vec3 ro, vec3 rd, inout float resT, float nF )\n{\n    float dt = 0.05;\n    float mint = 0.001;\n    float maxt = 20.0;\n    for( float t = mint; t < maxt; t += dt )\n    {\n        vec3 p = ro + rd*t;\n        if( p.y < noise(vec2(nF*p.x+iTime,nF*p.z+iTime)))\n        {\n            resT = t - 0.5f*dt;\n            return true;\n        }\n    }\n    return false;\n}\n\n\nvec3 calcNormal( const vec3 p, float nF )\n{\n    float eps = .0001;\n    return normalize( vec3( noise(vec2(nF*p.x-eps+iTime,nF*p.z+iTime)) - \n                            noise(vec2(nF*p.x+eps+iTime,nF*p.z+iTime)),\n                            2.0f*eps,\n                            noise(vec2(nF*p.x+iTime,nF*p.z-eps+iTime)) - \n                            noise(vec2(nF*p.x+iTime,nF*p.z+eps+iTime))));\n}\n\n\n\nfloat PI = 3.14159256;\nfloat TAU = 2.*3.14159256;\n\nvoid mainImage0( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec2 uv = ( fragCoord - .5* iResolution.xy ) /iResolution.y;\n   \n      uv += 1.0;\n      vec3 col;;\n   \n      // Create ray\n      ray r;\n      r.origin = vec3(0.,1.1,0.); \n      r.direction = normalize(vec3(uv,1.) -r.origin);\n\n      float t;\n      vec3 p;\n      vec3 normal;\n      vec3 light;\n\n      // Noise Factor (Affects \"hilliness\" of the noise)\n      float noiseFactor = .2;\n\n      // Do the ray march.\n      if( goRay( r.origin, r.direction, t, noiseFactor ) )\n      {\n         col = vec3(.0);\n         p = r.origin + t*r.direction;\n         normal = calcNormal(p, noiseFactor);\n        \n         // Overhead light\n         light = vec3(3.5,5.0,3.5);  \n         float dif = clamp(dot(normal, normalize(light-p)),0.,1.);\n         dif *= 22./dot(light - p, light - p);\n         col += vec3(dif);\n                \n      }\n      else\n      {\n         col = vec3(0.);\n      }\n    \n   fragColor = vec4(col,1.0);\n}\n\n// smart AA, from FabriceNeyret (FN).\nvoid mainImage(out vec4 O, vec2 U) {\n    mainImage0(O,U);\n    bool AA = true;  // AA option\n    if(AA)\n    if ( fwidth(length(O)) > .01 ) {  // difference threshold between neighbor pixels\n        vec4 o;\n        for (int k=0; k < 9; k+= k==3?2:1 )\n          { mainImage0(o,U+vec2(k%3-1,k/3-1)/3.); O += o; }\n        O /= 9.;\n      //O.r++;                        // uncomment to see where the oversampling occurs\n    }\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Uses a 2D Simplex Noise implementation by IQ:\n// https://www.shadertoy.com/view/Msf3WH\n\nvec2 hash( vec2 p ) // replace this by something better\n{\n\tp = vec2( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)) );\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise( in vec2 p )\n{\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\n\tvec2  i = floor( p + (p.x+p.y)*K1 );\n    vec2  a = p - i + (i.x+i.y)*K2;\n    float m = step(a.y,a.x); \n    vec2  o = vec2(m,1.0-m);\n    vec2  b = a - o + K2;\n\tvec2  c = a - 1.0 + 2.0*K2;\n    vec3  h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\tvec3  n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n    return dot( n, vec3(70.0) );\n}\n\n","name":"Common","description":"","type":"common"}]}