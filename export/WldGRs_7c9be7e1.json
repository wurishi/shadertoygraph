{"ver":"0.1","info":{"id":"WldGRs","date":"1577273581","viewed":123,"name":"ColorBlend","username":"gq","description":"endcard 颜色渐变","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["bezier","blend"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float rOne = 0.6;\nfloat blurOne = 0.6;\nfloat onceMoveTimeOne = 0.6;\nfloat stepOne = 11.0;\nvec3 colorOne = vec3(0.0, 0.9, 1.0);\nvec2 onePs[33] = vec2[33](\n    vec2(-0.2, 0.1), vec2(0.05, 0.12), vec2(0.3, 0.14),\n    vec2(0.3, 0.14), vec2(0.35, 0.02), vec2(0.2, -0.1),\n    vec2(0.2, -0.1), vec2(0.05, -0.15), vec2(-0.1, -0.15),\n    vec2(-0.1, -0.15), vec2(-0.3, 0.0), vec2(-0.2, 0.1),\n    vec2(-0.2, 0.1), vec2(0.05, 0.12), vec2(0.3, 0.14),\n    vec2(0.3, 0.14), vec2(0.35, 0.02), vec2(0.2, -0.1),\n    vec2(0.2, -0.1), vec2(0.05, -0.15), vec2(-0.1, -0.15),\n    vec2(-0.1, -0.15), vec2(-0.3, 0.0), vec2(-0.2, 0.1),\n    vec2(-0.2, 0.1), vec2(0.05, 0.12), vec2(0.3, 0.14),\n    vec2(0.3, 0.14), vec2(0.1, -0.05), vec2(-0.1, -0.15),\n    vec2(-0.1, -0.15), vec2(-0.3, 0.0), vec2(-0.2, 0.1)\n);\n\nfloat rTwo = 0.5;\nfloat blurTwo = 0.5;\nfloat onceMoveTimeTwo = 0.66;\nfloat stepTwo = 10.0;\nvec3 colorTwo = vec3(0.77, 0.19, 1.0);\n//Last three vec2 doesn't be used.The reason is to use a only unique function getFactor;\nvec2 twoPs[33] = vec2[33](\n    vec2(0.1, -0.35), vec2(-0.1, -0.23), vec2(-0.3, -0.1),\n    vec2(-0.3, -0.1), vec2(-0.25, 0.08), vec2(0.0, 0.1),\n    vec2(0.0, 0.1), vec2(0.1, 0.05), vec2(0.2, -0.2),\n    vec2(0.2, -0.2), vec2(0.4, -0.3), vec2(0.1, -0.35),\n    vec2(0.1, -0.35), vec2(-0.1, -0.23), vec2(-0.3, -0.1),\n    vec2(-0.3, -0.1), vec2(-0.25, 0.08), vec2(0.0, 0.1),\n    vec2(0.0, 0.1), vec2(0.1, 0.05), vec2(0.2, -0.2),\n    vec2(0.2, -0.2), vec2(0.4, -0.3), vec2(0.1, -0.35),\n    vec2(0.1, -0.35), vec2(-0.1, -0.23), vec2(-0.3, -0.1),\n    vec2(-0.3, -0.1), vec2(-0.05, -0.1), vec2(0.2, -0.2),\n    vec2(-0.3, -0.1), vec2(-0.05, -0.1), vec2(0.3, -0.2)\n);\n\nfloat rThree = 0.4;\nfloat blurThree = 0.4;\nfloat onceMoveTimeThree = 0.66;\nfloat stepThree = 10.0;\nvec3 colorThree = vec3(0.77, 0.19, 1.0);\n//Last three vec2 doesn't be used.The reason is to use a only unique function getFactor;\nvec2 threePs[33] = vec2[33](\n    vec2(0.6, 0.0), vec2(0.4, -0.3), vec2(0.0, -0.4),\n    vec2(0.0, -0.4), vec2(-0.4, -0.3), vec2(-0.6, 0.0),\n    vec2(-0.6, 0.0), vec2(-0.4, 0.3), vec2(0.0, 0.4),\n    vec2(0.0, 0.4), vec2(0.4, 0.3), vec2(0.6, 0.0),\n    vec2(0.6, 0.0), vec2(0.4, -0.3), vec2(0.0, -0.4),\n    vec2(0.0, -0.4), vec2(-0.4, -0.3), vec2(-0.6, 0.0),\n    vec2(-0.6, 0.0), vec2(-0.4, 0.3), vec2(0.0, 0.4),\n    vec2(0.0, 0.4), vec2(0.4, 0.3), vec2(0.6, 0.0),\n    vec2(0.6, 0.0), vec2(0.4, -0.3), vec2(0.0, -0.4),\n    vec2(0.0, -0.4), vec2(-0.2, 0), vec2(0.0, 0.4),\n    vec2(0.0, -0.4), vec2(-0.2, 0), vec2(0.0, 0.4)\n);\n\nfloat blurCircle(vec2 uv, vec2 tarPos, float r, float blur){\n    float dis = length(uv - tarPos);\n    return smoothstep(r, r - blur, dis);\n}\n\nvec2 bezier(vec2 pZero, vec2 pOne, vec2 pTwo, float factor){\n    return pow(1.0 - factor, 2.0) * pZero + 2.0 * factor * (1.0 - factor) * pOne + pow(factor, 2.0) * pTwo;\n}\n\nfloat getFactor(vec2 uv, vec2[33] ps, float step, float r, float blur, float onceMoveTime){\n    int startIdx = int(mod(floor(iTime / onceMoveTime), step)) * 3;\n    //int startIdx = int(min(1.0, floor(iTime / onceMoveTime))) * 3;\n    vec2 tarPos = bezier(ps[startIdx], ps[startIdx + 1], ps[startIdx + 2], mix(0.0, 1.0, mod(iTime, onceMoveTime) / onceMoveTime));\n    return blurCircle(uv, tarPos, r, blur);\n}\n     \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    \n    float factorOne = getFactor(uv, onePs, stepOne, rOne, blurOne, onceMoveTimeOne);\n    float factorTwo = getFactor(uv, twoPs, stepTwo, rTwo, blurTwo, onceMoveTimeTwo);\n    float factorThree = getFactor(uv, threePs, stepThree, rThree, blurThree, onceMoveTimeThree);\n\n    float factorSame = factorTwo * (1.0 - factorThree) + factorThree;\n    float factorAll = factorOne * (1.0 - factorSame) + factorSame;\n    fragColor = vec4(colorOne * factorOne * (1.0 - factorSame) + colorTwo * factorSame + vec3(1.0) * (1.0 - factorAll) , 1.0);\n}","name":"Image","description":"","type":"image"}]}