{"ver":"0.1","info":{"id":"lld3Dn","date":"1595944918","viewed":124,"name":"gabakken lucht","username":"Daedelus","description":"preliminary experiments for Uplifting: https://www.pouet.net/prod.php?which=67972","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["gabakkenlucht"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n/* https://www.shadertoy.com/view/ldl3W8 */\nvec2 hash2( vec2 p )\n{\n\t// texture based white noise\n\t//return texture( iChannel0, (p+0.5)/256.0, -100.0 ).xy;\n\t\n    // procedural white noise\t\n\treturn fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);\n}\n\nvec3 voronoi( in vec2 x , out vec2 o )\n{\n    vec2 n = floor(x);\n    vec2 f = fract(x);\n\n    //----------------------------------\n    // first pass: regular voronoi\n    //----------------------------------\n\tvec2 mg, mr;\n\n    float md = 8.0;\n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ )\n    {\n        vec2 g = vec2(float(i),float(j));\n\t\tvec2 o = hash2( n + g );\n        vec2 r = g + o - f;\n        float d = dot(r,r);\n\n        if( d<md )\n        {\n            md = d;\n            mr = r;\n            mg = g;\n        }\n    }\n\n    //----------------------------------\n    // second pass: distance to borders\n    //----------------------------------\n    md = 8.0;\n    for( int j=-2; j<=2; j++ )\n    for( int i=-2; i<=2; i++ )\n    {\n        vec2 g = mg + vec2(float(i),float(j));\n\t\to = hash2(n + g);\t\n        vec2 r = g + o - f;\n\n        if( dot(mr-r,mr-r)>0.00001 )\n        md = min( md, dot( 0.5*(mr+r), normalize(r-mr) ) );\n    }\n\n    return vec3( md, mr );\n}\n\nvoid pR(inout vec2 p, float a)\n{\n    float sa = sin(a), ca = cos(a);\n\tp *= mat2(ca, sa, -sa, ca);\n}\n\nfloat fField(vec3 p, out float m)\n{\n    float landscape = p.y + (sin(p.x) - sin(p.x + p.z)) * 0.3 + (sin(p.x * 3.0 + p.y * 8.0) - sin(p.x + p.z * 3.0)) * 0.05 + (sin(p.x * 8.0) - sin(p.x + p.z * 8.0)) * 0.01;\n    \n    vec2 cell;\n    vec3 c = voronoi(p.xz, cell);\n    landscape += clamp(c.x * 10.0, 0.0, 1.0) * 0.02;\n    landscape -= sin(c.x * 3.0) * 0.1;\n    \n    landscape += texture(iChannel0, p.xz * 0.02).x * 0.06 - texture(iChannel0, p.xz * 0.05).x * 0.03 + texture(iChannel0, p.xz * 0.2).x * 0.008 + texture(iChannel0, p.xz * 0.4).x * 0.003;\n    \n    float k = atan(p.x, p.z) * 9.0;\n    m = floor(fract(k / 3.14159265359 * 0.5) + 0.5);\n    float s = abs(sin(k));\n    p.y += -0.3 * length(p.xz);\n    p.y -= 2.0;\n    float balloon = length(p) - 1.0 - s * 0.035;\n\t\n    if(landscape < balloon)\n        m = 2.0;\n    return min(balloon, landscape);\n}\n\nfloat fField(vec3 p)\n{\n    float m;\n    return fField(p, m);\n}\n\nvec3 Normal(vec3 p, float s)\n{\n    vec2 e = vec2(0.005, 0.0);\n    return normalize(vec3(fField(p + e.xyy), fField(p + e.yxy), fField(p + e.yyx)) - s);\n}\n\n\nvec3 cellTileColor(vec3 p)\n{\n    vec2 cell;\n    vec3 c = voronoi(p.xz, cell);\n    \n\t// https://www.shadertoy.com/view/MslGD8\n    vec3 col = vec3(abs(sin(cell.y)), clamp(max(cell.x, cell.y) * 2.0, 0.6, 0.8), 0.3);\n\t\n    // borders\t\n    col = mix(vec3(0.1,0.2,0.15), col, smoothstep(0.01, 0.03, c.x));\n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy * 2.0 - iResolution.xy) / iResolution.y;\n\tvec3 is, c, fc, n, o = vec3(0.0, 1.0, -10.0 + iTime * 4.0), d = vec3(0.0, 0.0, 1.0);\n    pR(d.xz, uv.x * 0.3);\n    pR(d.yz, uv.y * 0.3 - sin(iTime) * 0.1 - 0.1);\n    pR(d.xz, iTime);\n    \n    float s, m, t = 0.1;\n    for(int i = 0; i < 70 ; ++i)\n    {\n        is = o + d * t;\n        s = fField(is, m) * 0.7;\n        t += s;\n        if(s <= 0.0 || t > 40.0)\n            break;\n    }\n    n = Normal(is, s);\n    fc = vec3(0.1, 0.5, 0.9);\n    vec3 l = vec3(0.5, 1.0, 0.0);\n    if(m == 2.0)\n    \tc = cellTileColor(is);\n    else\n    \tc = vec3(1.0, m, 0.0);\n    c *= (dot(n, l) * 0.5 + 0.5);\n    c = mix(c, fc, min(1.0, t / 40.0));\n    fragColor = vec4(c, 1.0);\n}","name":"Image","description":"","type":"image"}]}