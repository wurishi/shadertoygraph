{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":3,"type":"texture","id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"// Created by inigo quilez - iq/2013\n// Modified by zz85 to add movement of the keys\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nfloat fbm( vec3 p, vec3 n )\n{\n\tp *= 0.15;\n\n\tfloat x = texture( iChannel3, p.yz ).x;\n\tfloat y = texture( iChannel3, p.zx ).x;\n\tfloat z = texture( iChannel3, p.xy ).x;\n\n\treturn x*abs(n.x) + y*abs(n.y) + z*abs(n.z);\n}\n\nfloat hash( float n )\n{\n    return fract(sin(n)*43758.5453);\n}\n\n\nvec3 hash3( float n )\n{\n    return fract(sin(vec3(n,n+1.0,n+2.0))*vec3(43758.5453123,22578.1459123,19642.3490423));\n}\n\nfloat udRoundBox( vec3 p, vec3 b, vec3 r )\n{\n  return length(max(abs(p)-b,0.0))-r.x;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) +\n         length(max(d,0.0));\n}\n\n\nfloat obj1( in vec3 p )\n{\n\tvec3 q = vec3( mod( p.x, 0.2 ), p.yz ) - 0.1;\n\n\tfloat ix = floor( (p.x - 0.2) / 0.2 );\n\tfloat k = mod( 7. - ix, 7.0 );\n\tfloat oct = 6. - floor((p.x + 4.6 + 0.6) / 1.4);\n\tfloat pressed = hash(oct * k * floor(iTime * 1.9));\n\tif (pressed > 0.9) q.y += 0.08;\n\n\treturn udRoundBox( q, vec3(0.091,0.075,0.6)-0.005, vec3(0.01) );\n}\n\nfloat obj2( in vec3 p )\n{\n\tvec3 q = vec3( mod( p.x + 0.1, 0.2 ), p.y-0.085, p.z - 0.2 ) - 0.1;\n\tfloat ix = floor( (p.x + 0.1)/0.2 );\n\tfloat k = mod( ix, 7.0 );\n\n\tfloat oct = 6. - floor((p.x + 4.6 + 0.6) / 1.4); // from right to left, oct 0 to 5 ( g - f)\n\tfloat pressed = hash(oct * k * floor(iTime * 1.9));\n\tif (pressed > 0.9) q.y += 0.04;\n\n\tif( ix<-21.0 || k==2.0 || k==6.0 ) return 10.0;\n\n\treturn udRoundBox( q, vec3(0.06,0.075,0.4)-0.01, vec3(0.01,0.01,0.01) );\n}\n\nfloat sdCylinder( vec3 p, vec2 h )\n{\n  return max( length(p.xz)-h.x, abs(p.y)-h.y );\n}\n\n\nfloat obj3( in vec3 p )\n{\n\tfloat d1 = udRoundBox( p - vec3(0.0, 0.0,1.7), vec3(5.4,0.6,1.0), vec3(0.05) );\n\tfloat d2 = udRoundBox( p - vec3(0.0,-0.3,0.1), vec3(5.4,0.3,0.6), vec3(0.05) );\n\tfloat d3 = udRoundBox( p - vec3(0.0,-1.0,2.5), vec3(5.4,3.0,1.0), vec3(0.05) );\n\n\tfloat d4 = sdCylinder( vec3(abs(p.x),p.y,p.z) - vec3(5.25,-2.2,-0.35), vec2(0.1,2.0) );\n    d4 -= 0.03*smoothstep(-0.7,0.7,sin(18.0*p.y)) + 0.017*p.y + 0.025;\n\n\tfloat d5 = udRoundBox( vec3(abs(p.x),p.y,p.z) - vec3(5.05,0.0,0.3), vec3(0.35,0.2,0.8), vec3(0.05) );\n\t\n\treturn min( min( min( min( d1, d2 ), d3 ), d4 ), d5 );\n}\n\n\nfloat obj4( in vec3 p )\n{\n    return 3.75+p.y;\n}\n\nfloat obj5( in vec3 p )\n{\n    return min( 3.5-p.z, p.x+6.5 );\n}\n\nfloat obj6( in vec3 p )\n{\n\tvec3 q = p - vec3(0.0,1.3,1.1);\n\tfloat x = abs(q.x);\n\tq.z += 0.15*4.0*x*(1.0-x);\n\tq.yz = mat2(0.9,-0.43,0.43,0.9)*q.yz;\n    return 0.5*udRoundBox( q, vec3(1.0,0.7,0.0), vec3(0.01) );\n}\n\n\nfloat obj8( in vec3 p )\n{\n\tvec3 q = p - vec3(0.0,-1.8,-3.0);\n\t\n\tq.xz = mat2( 0.9,0.44,-0.44,0.9)*q.xz;\n\t\n\tfloat y = 0.5 + 0.5*sin(8.0*q.x)*sin(8.0*q.z);\n\ty = 0.1*pow(y,3.0) * smoothstep( 0.1,0.4,q.y );\n    float d = udRoundBox( q, vec3(1.5,0.25,0.6), vec3(0.3) );\n\td += y;\n\t\n\tvec3 s = vec3( abs(q.x), q.y, abs(q.z) );\n\tfloat d2 = sdCylinder( s - vec3(1.4,-1.5,0.6), vec2(0.15,1.5) );\n\treturn min( d, d2 );\n}\n\n\nfloat obj7( in vec3 p )\n{\n\tvec3 q = p - vec3(1.0,-3.6,1.2);\n\tvec3 r = vec3( mod( q.x-0.25, 0.5 ) - 0.25, q.yz );\n    return max( 0.5*udRoundBox( r, vec3(0.05,0.0,0.38), vec3(0.08) ), sdBox( q, vec3(0.75,1.0,1.0) ) );\n}\n\nvec2 map( in vec3 p )\n{\n\t// white keys\n    vec2 res = vec2( obj1( p ), 0.0 );\n\n\t// black keys\n    vec2 ob2 = vec2( obj2( p ), 1.0 );\n\tif( ob2.x<res.x ) res=ob2;\n\tres.x = max( res.x, sdBox( p, vec3(4.6,1.0,4.0) ) );\n\n    // piano body\n    vec2 ob3 = vec2( obj3( p ), 2.0 );\n    if( ob3.x<res.x ) res=ob3;\n\n    // floor\n    vec2 ob4 = vec2( obj4( p ), 3.0 );\n    if( ob4.x<res.x ) res=ob4;\n\n    // wall\n    vec2 ob5 = vec2( obj5( p ), 4.0 );\n    if( ob5.x<res.x ) res=ob5;\n\n\t// paper\n    vec2 ob6 = vec2( obj6( p ), 5.0 );\n    if( ob6.x<res.x ) res=ob6;\n\t\n\t// pedals\n    vec2 ob7 = vec2( obj7( p ), 6.0 );\n    if( ob7.x<res.x ) res=ob7;\n\n\t// bench\n    vec2 ob8 = vec2( obj8( p ), 7.0 );\n    if( ob8.x<res.x ) res=ob8;\n\n\treturn res;\n}\n\n\nfloat floorBump( vec2 pos, out vec2 id )\n{\n    pos *= 0.25;\n    float w = 0.015;\n    float y = mod( pos.x*8.0, 1.0 );\n    float iy = floor(pos.x*8.0);\n    float x = mod( pos.y*1.0 + sin(iy)*8.0, 1.0 );\n    float f = smoothstep( 0.0, w,     y ) - smoothstep( 1.0-w,     1.0, y );\n         f *= smoothstep( 0.0, w/8.0, x ) - smoothstep( 1.0-w/8.0, 1.0, x );\n    id = vec2( iy, floor(pos.y*1.0 + sin(iy)*8.0) );\n    return f;\n}\n\nvec4 floorColor( vec3 pos, out vec3 bnor )\n{\n\tpos *= 0.75;\n\tbnor = vec3(0.0);\n\n\tvec2 id;\n    vec2 e = vec2( 0.005, 0.0 );\n    float er = floorBump( pos.xz, id );\n    vec2 tmp;/*\n    bnor = vec3( -(floorBump( pos.xz+e.xy, tmp ) - er),\n                 150.0*e.x,\n                 -(floorBump( pos.xz+e.yx, tmp ) - er) );\n    bnor = 100.0*normalize(bnor);\n*/\n    vec3 col = vec3(0.6,0.35,0.25);\n\tfloat f = 0.5+0.5*texture( iChannel3, 0.1*pos.xz*vec2(6.0,0.5)+0.5*id ).x;\n    col = mix( col, vec3(0.4,0.15,0.05), f );\n\t\n\tcol.x *= 0.8;\n\n\tcol *= 0.85 + 0.15*texture( iChannel3, 2.0*pos.xz ).x;\n\n    // frekles\n    f = smoothstep( 0.4, 0.9, texture( iChannel3, pos.xz*0.2 - id*10.0).x );\n    col = mix( col, vec3(0.07), f*0.25 );\n\n    col *= 1.0 + 0.2*sin(32.0*(id.x-id.y));\n    col.x += 0.009*sin(0.0+32.0*(id.x+id.y));\n    col.y += 0.009*sin(1.0+32.0*(id.x+id.y));\n    col.z += 0.009*sin(2.0+32.0*(id.x+id.y));\n\n\treturn vec4( col*0.5, 0.35 );\n\n}\n\nvec4 pianoColor( in vec3 pos, in vec3 nor )\n{\n    float o = fbm( 0.25*pos, nor );\n    float f = smoothstep( -0.25, 0.5, fbm( 8.0*o + 1.0*pos*vec3(0.5,8.0,0.5), nor ) );\n\tfloat sp = f;\n\tvec3 col = 0.14*mix( 0.4*vec3(0.24,0.22,0.18), vec3(0.26,0.22,0.18), f );\n\t\t\t\t\t\t\n\tf = hash(floor(pos.y*4.0) + 13.0*floor(abs(nor.x*pos.z + nor.z*pos.x)*0.4) );\t\t\t\t\t\t\n\tcol *= 0.7 + 0.3*f;\n\n\tcol += 0.0012*sin( f*6.2831 + vec3(0.0,1.0,2.0) );\n    return vec4( col*0.5*1.2, 0.007*sp );\n}\n\n\nvec4 wallColor( in vec3 pos, in vec3 nor )\n{\n    vec3 col = 2.0*vec3(0.30,0.30,0.30);\n\n\tfloat f = 1.0-0.4*pow( fbm( 1.5*pos*vec3(1.0,0.25,1.0), nor ), 1.7 );\n    col *= f;\n\n    return vec4(col,0.01*f);\n}\n\nvec4 paperColor( in vec3 pos, in vec3 nor )\n{\n    vec3 col = 0.7*vec3(0.22,0.21,0.18);\n\t\n\tcol = mix( col, col*vec3(1.0,0.9,0.8), clamp(0.5 + 0.5*abs(pos.x),0.0,1.0) );\n\tcol *= clamp(0.75 + 0.25*abs(2.0*pos.x),0.0,1.0);\n\t\n\tfloat f = smoothstep( 0.5,1.0, sin(250.0*pos.y) );\n\tf *=      smoothstep(-0.1,0.1, sin(250.0*pos.y/10.0) );\n\tf *= smoothstep( 0.1,0.11, abs(pos.x) ) - smoothstep( 0.85,0.86, abs(pos.x) );\n\tcol *= 1.0-f;\n\n\tf = smoothstep( -0.8,-0.2, sin(250.0*pos.y) );\n\tf *=      smoothstep(-0.1,0.1, sin(250.0*pos.y/10.0) );\n\tf *= smoothstep( 0.1,0.11, abs(pos.x) ) - smoothstep( 0.85,0.86, abs(pos.x) );\n\n\t\n\tfloat of = floor(0.5*250.0*pos.y/6.2831);\n\tfloat g = 1.0-smoothstep( 0.2,0.3,texture( iChannel3, pos.xy*vec2(0.5,0.01) + 0.15*of).x);\n\tcol *= mix( 1.0, 1.0-g, f );\n\t\n\tcol *= 0.5 + 0.7*texture( iChannel3, 0.02*pos.xy ).x;\n\t\n\t\n    return vec4(col,0.0);\n}\n\nvec4 benchColor( in vec3 pos, in vec3 nor )\n{\n    vec3 col = vec3(0.01,0.01,0.01);\n\t\n\tfloat g = smoothstep( 0.0, 1.0, fbm( 1.0*pos*vec3(1.0,0.5,1.0), nor ) );\n\tcol = mix( col, vec3(0.021,0.015,0.015), g );\n\n\tfloat f = smoothstep( 0.3, 1.0, fbm( 16.0*pos*vec3(1.0,1.0,1.0), nor ) );\n\tcol = mix( col, vec3(0.04,0.03,0.02), f );\n\n\treturn vec4( 0.15*col*vec3(1.3,0.9,1.0), 0.005*(1.0-g) );\n}\t\n\t\n\t\nvec4 calcColor( in vec3 pos, in vec3 nor, float matID, out vec3 bnor )\n{\n    bnor = vec3(0.0);\n\n\tvec4 mate = vec4(0.0);\n\t\n\t     if( matID<0.5 ) mate = vec4(0.22,0.19,0.15,0.2); // white keys\n\telse if( matID<1.5 ) mate = vec4(0.00,0.00,0.00,0.1); // black keys\n\telse if( matID<2.5 ) mate = pianoColor(pos,nor);      // piano\n\telse if( matID<3.5 ) mate = floorColor(pos,bnor);     // floor\n\telse if( matID<4.5 ) mate = wallColor(pos,nor);       // wall\n\telse if( matID<5.5 ) mate = paperColor(pos,nor);      // paper\n\telse if( matID<6.5 ) mate = vec4(0.04,0.03,0.01,0.9); // pedals\n\telse                 mate = benchColor(pos,nor);      // bench\n\n\treturn mate;\n}\n\nvec2 intersect( in vec3 ro, in vec3 rd )\n{\n\tfloat maxd = 25.0;\n\tfloat precis = 0.001;\n    float h=precis*2.0;\n    float t = 0.0;\n    float m = -1.0;\n    for( int i=0; i<48; i++ )\n    {\n        if( abs(h)<precis||t>maxd ) continue;//break;\n        t += h;\n\t    vec2 res = map( ro+rd*t );\n        h = res.x;\n\t    m = res.y;\n    }\n\n    if( t>maxd ) m=-1.0;\n    return vec2( t, m );\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    vec3 eps = vec3(0.0002,0.0,0.0);\n\n\treturn normalize( vec3(\n           map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n           map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n           map(pos+eps.yyx).x - map(pos-eps.yyx).x ) );\n}\n\n\n\nfloat softshadow( in vec3 ro, in vec3 rd, float mint, float k )\n{\n    float res = 1.0;\n    float t = mint;\n    for( int i=0; i<45; i++ )\n    {\n        float h = map(ro + rd*t).x;\n        res = min( res, k*h/t );\n        t += clamp( h, 0.04, 0.1 );\n    }\n    return clamp(res,0.0,1.0);\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat totao = 0.0;\n    float sca = 1.0;\n    for( int aoi=0; aoi<8; aoi++ )\n    {\n        float hr = 0.01 + 1.2*pow(float(aoi)/8.0,1.5);\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        totao += -(dd-hr)*sca;\n        sca *= 0.85;\n    }\n    return clamp( 1.0 - 0.6*totao, 0.0, 1.0 );\n}\n\nfloat calcCurvature( in vec3 pos, in vec3 nor )\n{\n\tfloat totao = 0.0;\n    for( int aoi=0; aoi<4; aoi++ )\n    {\n\t\tvec3 aopos = normalize(hash3(float(aoi)*213.47));\n\t\taopos = aopos - dot(nor,aopos)*nor;\n\t\taopos = pos + aopos*0.5;\n        float dd = clamp( map( aopos ).x*10.0, 0.0, 1.0 );\n        totao += dd;\n    }\n\ttotao /= 4.0;\n\t\n    return smoothstep( 0.5, 1.0, totao );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy / iResolution.xy;\n    vec2 p = -1.0 + 2.0 * q;\n    p.x *= iResolution.x/iResolution.y;\n    vec2 m = iMouse.xy/iResolution.xy;\n\t\n    // camera\n    float r2 = p.x*p.x*0.32 + p.y*p.y;\n    p *= 0.5 + 0.5*(7.0-sqrt(37.5-11.5*r2))/(r2+1.0);\n\tfloat an = 2.0 + 1.5*(0.5+0.5*sin(0.3*iTime - 6.2*m.x));\n    vec3 ro = 8.0*normalize(vec3(sin(an),0.4-0.3*m.y, cos(an)*0.4));\n\tro.y = 1.; ro.z = -1. + m.y * -4.;;\n    vec3 ta = vec3( -1.0, -1.7, 3.0 );\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    vec3 rd = normalize( p.x*uu + p.y*vv + 2.0*ww );\n\n\t// render\n    vec3 col = vec3(0.0);\n\tfloat atten = 1.0;\n\tfor( int k=0; k<2; k++ )\n\t{\n\n\t// raymarch\n    vec2 tmat = intersect(ro,rd);\n    if( tmat.y>-0.5 )\n    {\n        // geometry\n        vec3 pos = ro + tmat.x*rd;\n        vec3 nor = calcNormal(pos);\n        vec3 ref = reflect(rd,nor);\n\t\tvec3 lig = normalize(vec3(-0.5,2.0,-1.0));\n        float cur = calcCurvature(pos,nor);\n\t\tfloat occ = calcAO( pos, nor );\n\n\t\t\n        // material\n\t\tvec3 bnor = vec3(0.0);\n\t\tvec4 mate = calcColor( pos, nor, tmat.y, bnor );\n        nor = normalize( nor + bnor );\n\n\t\tif( tmat.y>1.5 && tmat.y<2.5 ) \n        {\n        float ru = cur*smoothstep( 0.3, 0.6, 0.1-0.2*occ + fbm(pos,nor) );\n        mate = mix( mate, 0.25*vec4(0.3,0.28,0.2,0.0), ru );\n        }\n\t\t\n\t\t// lights\n        float amb = 0.6 + 0.4*nor.y;\n        float dif = max(dot(nor,lig),0.0);\n        float spe = pow(clamp(dot(lig,ref),0.0,1.0),3.0);\n\t\tfloat sha = softshadow( pos, lig, 0.01, 10.0 );\n\n\t\tvec3 win = pos + lig* (-10.0-pos.y)/lig.y;\n\t\twin.xz -= vec2(.0,4.0);\n        float wpa = pow( pow(abs(win.x),16.0) + pow(abs(win.z),16.0), 1.0/16.0 );\n        float wbw = 1.0-smoothstep( 3.0, 6.2, wpa*0.8 );\n        float wbg = 1.0-smoothstep( 3.5,14.0, wpa*0.8 );\n        wpa *= 1.0-smoothstep( 2.5, 3.5, wpa*0.8 );\n        wpa *= smoothstep( 0.1, 0.45, abs(win.x) );\n        wpa *= smoothstep( 0.1, 0.45, abs(win.z) );\n        sha *= wpa;\n\n\t\tvec3 lin = vec3(0.0);\n        lin  = 2.50*dif*vec3(1.0,0.85,0.55)*(0.6+0.4*occ)*pow( vec3(sha), vec3(1.0,1.2,1.4) );\n\t\tlin += 0.85*wbg*wbw*vec3(1.2,0.6,0.3)*(0.5+0.5*clamp(0.5-0.5*nor.y,0.0,1.0))*pow(1.0-smoothstep(0.0,3.5,3.8+pos.y),2.0)*(0.2+0.8*occ);\n\t\tlin += 0.025*wbg*amb*vec3(0.75,0.85,0.9)*(0.1+0.9*occ);\n\t\tlin += (1.0-mate.xyz)*0.15*occ*vec3(1.0,0.5,0.1)*clamp(0.5+0.5*nor.x,0.0,1.0)*pow(clamp(0.5*(pos.x-1.5),0.0,1.0),2.0);\n\n\t\tif( tmat.y>6.5 ) lin += sha*occ*vec3(5.0)*pow( clamp(1.0+dot(rd,nor),0.0,1.0), 3.0 );\n\t\t\n\t\tcol += atten*mate.xyz*lin;\n        col += atten*10.0*mate.w*mate.w*(0.5+0.5*mate.xyz)*spe*sha*occ*vec3(1.0,0.95,0.9);\n\n\t\tatten *= 2.0*mate.w;\n\t\tro = pos + 0.001*nor;\n\t\trd = ref;\n    }\n\t}\n\t\n\t// desat\n\tcol = mix( col, vec3(dot(col,vec3(0.33))), 0.3 );\n\t\n    // gamma\n\tcol = pow( col, vec3(0.45) );\n\n\t// tint\n\tcol *= vec3(1.0,1.04,1.0);\n\t\n\t// vigneting\n\tcol *= 0.5 + 0.5*pow( 16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.1 );\n\t\n    fragColor = vec4( col,1.0 );\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XdBGR3","date":"1391354348","viewed":789,"name":"Playing IQ's Piano","username":"zz85","description":"Forked from https://www.shadertoy.com/view/ldl3zN and modified to make the piano play by itself","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["piano"],"hasliked":0,"parentid":"","parentname":""}}