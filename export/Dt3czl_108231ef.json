{"ver":"0.1","info":{"id":"Dt3czl","date":"1699528353","viewed":58,"name":"complex_roots","username":"Irec","description":"complex_roots","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["complexroots"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define nn 8\n#define max_iters 30\n\n//===============================================================================\nvec3 heatMap(float greyValue) {   \n\tvec3 heat;      \n    heat.r = smoothstep(0.5, 0.8, greyValue);\n    if(greyValue >= 0.90) {\n    \theat.r *= (1.1 - greyValue) * 5.0;\n    }\n\tif(greyValue > 0.7) {\n\t\theat.g = smoothstep(1.0, 0.7, greyValue);\n\t} else {\n\t\theat.g = smoothstep(0.0, 0.7, greyValue);\n    }    \n\theat.b = smoothstep(1.0, 0.0, greyValue);          \n    if(greyValue <= 0.3) {\n    \theat.b *= greyValue / 0.3;     \n    }\n\treturn heat;\n}\n\nvec2 mul(vec2 a, vec2 b)\n{\n  return vec2(a.x*b.x - a.y*b.y, a.x*b.y + a.y*b.x);\n}\n\nfloat len2(vec2 a)\n{\n  return a.x*a.x + a.y*a.y;\n}\n\nvec2 div(vec2 a, vec2 b)\n{\n  float lb = len2(b);\n  return vec2(a.x*b.x + a.y*b.y, a.y*b.x - a.x*b.y)/lb;\n}\n\nvec2 func(vec2 z, inout vec2 roots[nn])\n{\n  vec2 f = vec2(1.0, 1.0);\n  for (int i = 0; i < nn; i++)\n    f = mul(f, z - roots[i]);\n  return f;  \n}\n\nvec2 der(in vec2 z, in vec2 f, inout vec2 roots[nn])\n{\n  vec2 d = vec2(0.0, 0.0);\n  for (int i = 0; i < nn; i++)\n  {\n    //d =+ div(f, z - roots[i]);\n    vec2 f0 = vec2(1.0, 1.0);\n    for (int j = 0; i < nn; i++)\n    {\n      if (i != j)\n      {\n        f0 = mul(f0, z - roots[j]);\n      }\n    }  \n    d =+ f0;   \n  } \n  return d;  \n}\n\nfloat iter(vec2 z0, inout vec2 roots[nn])\n{\n  vec2 z = z0;\n  for (int i = 0; i < max_iters; i++)\n  {\n    vec2 f = func(z, roots);\n    vec2 d = der(z, f, roots);\n    vec2 next = z - div(f, d);\n    if (len2(next - z) < 1e-5)\n    {\n      return 1e5*len2(next - z);//float(i)/float(max_iters);\n    }\n    z = next;\n  }\n  return 1.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float scale = 0.5;\n    \n    vec2 vs[nn];\n    for (int i = 0; i < nn; i++)\n      vs[i] = scale*0.4*vec2(cos(0.1*iTime + 0.5*float(i)), sin(0.5*iTime+ 0.8*float(i)));\n\n    vec3 col = heatMap(iter(scale*(uv - vec2(0.5, 0.5)), vs));\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}