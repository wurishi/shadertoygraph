{"ver":"0.1","info":{"id":"sttGDS","date":"1637250831","viewed":224,"name":"parameterized spectrum function","username":"stokastic","description":"Generates a spectrum gradient with parameterized dispersion. Click and move mouse to control dispersion as a function of mouse.y","likes":14,"published":1,"flags":0,"usePreview":0,"tags":["spectrum"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* Computes a spectrum with parameterized dispersion\n *  - RGB channels are computed as raised cosine pulses\n *  - lambda specifies how much dispersion to use. \n *  - optional violet band can be added by setting the flag below\n *  - demo with graphs of RGB:\n *    https://www.desmos.com/calculator/e0j9ikcjti\n */\n\n#define PI 3.14159265\n#define INCLUDE_VIOLET 0\n//#define QUANTIZE\n\n#define M1 1597334677U     //1719413*929\n#define M2 3812015801U     //140473*2467*11\nfloat hash( uvec2 q )\n{\n    q *= uvec2(M1, M2); \n    \n    uint n = (q.x ^ q.y) * M1;\n    \n    return float(n) * (1.0/float(0xffffffffU));\n}\n\n\nvec3 spectrum(float x, float lambda) {\n    // map lambda from 0 -> 1 to 2/3 -> 1 to prevent dips in perceived lightness\n    // (see graph of L linked above)\n    lambda = (2.0 + lambda) / 3.0;\n    \n    vec3 abc = vec3(x) - vec3(lambda * 0.5, 0.5, 1.0 - lambda * 0.5);\n    vec3 rgb = 0.5 + 0.5 * cos(PI * clamp(abs(2.0 * abc / lambda), 0.0, 1.0));\n\n    if (INCLUDE_VIOLET == 1) {\n        float f = 2.0;\n        rgb.r += (1.0 - lambda) * 0.25 * (1.0 +  cos(PI * clamp(f * abs(2.0 * (x - 1.0 + lambda / (2.0 * f)) / lambda), 0.0, 1.0)));\n    }\n\n    return rgb;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 m = iMouse.xy / iResolution.xy;\n    float aspect = iResolution.y / iResolution.x;\n    \n#ifdef QUANTIZE\n    float Q = 128.0;\n    vec2 q = vec2(Q, Q * aspect);\n    uv = floor(uv * q) / q;\n    uv += 0.1 * hash(uvec2(uv * 10000.0));\n#endif\n\n    if (iMouse.z > 0.0) {\n        fragColor = vec4(spectrum(uv.x, m.y), 1.0);\n        //fragColor = vec4(spectrum(uv.x, smoothstep(0.0, 1.0, m.y)), 1.0);\n    } else {\n        fragColor = vec4(spectrum(uv.x, uv.y), 1.0);\n        //fragColor = vec4(spectrum(uv.x, smoothstep(0.0, 1.0, uv.y)), 1.0);\n    }\n}","name":"Image","description":"","type":"image"}]}