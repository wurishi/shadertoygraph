{"ver":"0.1","info":{"id":"WdjBDt","date":"1591129981","viewed":173,"name":"Colorful Spheres","username":"JacobC","description":"Simple ray cast shader. You can use the mouse to rotate the camera (use left click while moving mouse)","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["3d","light","sphere"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sphere(in vec3 o, in vec3 d, in vec4 c)\n{\n    vec3 oc = o-c.xyz;\n    float B = dot(d, oc);\n    float C = dot(oc, oc) - c.w*c.w;\n    float D = B*B-C;\n    if (D <= 0.)\n        return 0.;\n    return -B-sqrt(D);\n}\n\n#define OBJS 7\n\n#define Kc 1.\n#define Kl 1.7\n#define Kq 4.5\n\n#define S_1 vec3(1., .7, .5)\n#define S_2 vec3(.5, .7, 1.)\n\n#define T iTime*.25\n#define hPi 3.141592*.5\n\n#define AA 2.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 f_col = vec3(0.);\n    vec2 st = fragCoord.xy;\n    vec2 m = iMouse.xy/iResolution.y*2.-1.;\n    for (float y = 0.; y < AA; y++)\n    {   \n    \tfor (float x = 0.; x < AA; x++)\n        {\n            vec2 n = vec2(x, y) / AA - .5;\n            vec2 uv = (st + n - iResolution.xy * .5) / iResolution.y;\n\n            vec3 col = vec3(1.);\n            vec3 o = vec3(sin(m.x*hPi), sin(m.y*hPi), cos(m.x*hPi))*6.;\n            vec3 t = vec3(0., 0., -1.);\n\n            vec3 w = normalize(o-t);\n            vec3 u = normalize(cross(vec3(0., 1., 0.), w));\n            vec3 v = cross(w, u);\n\n            vec3 d = normalize(vec3(uv, -1.));\n            d = u*d.x + v*d.y + w*d.z;\n\n            vec4 c[OBJS] = vec4[]\n                (\n                    vec4(cos(T), -sin(T), -cos(T)*sin(T-90.), 1.5),\n                    vec4(-cos(T+.3)*2., sin(T+.9)*2., cos(T+10.2)*-sin(T), 1.26),\n                    vec4(cos(T+1.95)*2., sin(T+.95)*2., -cos(T)*-sin(T-4.), 1.43),\n                    vec4(cos(T+3.4)*2., -sin(T+3.)*2., cos(T+2.)*sin(T), 1.17),\n                    vec4(cos(T+.05)*2., sin(T+4.05)*2., cos(T-2.)*sin(T), 1.41),\n                    vec4(-cos(T+5.)*2., -sin(T+5.1)*2., cos(T+1.2)*sin(T+3.), 1.29),\n                    vec4(-cos(T+6.1)*2., sin(T+6.14)*2., cos(T+.4)*sin(T-8.), 1.5)\n                );\n            vec3 c_c[OBJS] = vec3[]\n                (\n                    vec3(1.),\n                    vec3(1., 0., 0.),\n                    vec3(1., 1., 0.),\n                    vec3(0., 1., 0.),\n                    vec3(0., 1., 1.),\n                    vec3(0., 0., 1.),\n                    vec3(1., 0., 1.)\n                );\n\n            int index = -1;\n            float max_s = 100.;\n            for (int i = 0; i < OBJS; i++)\n            {\n                float s = sphere(o, d, c[i]);\n                if (s > 0. && s < max_s)\n                {\n                    index = i;\n                    max_s = s;\n                }\n            }\n\n            if (index != -1)\n            {\n                vec3 p = o + d * max_s;\n                vec3 n = (p-c[index].xyz)/c[index].w;\n\t\t\t\tvec3 sky = mix(S_1, S_2, (n.y+1.)*.5); \n                for (int i = 0; i < OBJS; i++)\n                {\n                    if (i == index)\n                        continue;\n                    float s = length(p-c[i].xyz)-c[i].w;\n                    float att = 1. / (Kc + Kl*s + Kq*s*s);\n                    \n                    col *= mix(c_c[i]*sky, c_c[index], 1.-att);\n                }\n                col *= sky;\n            }\n            else\n                col *= mix(S_1, S_2, d.y+.5);\n\n            f_col += col;\n        }\n    }\n    f_col /= pow(AA, 2.);\n    \n    fragColor = vec4(sqrt(f_col),1.0);\n}","name":"Image","description":"","type":"image"}]}