{"ver":"0.1","info":{"id":"dtlSDM","date":"1700975244","viewed":155,"name":"particles23","username":"edwardbraed","description":"set of simple particles system","likes":19,"published":1,"flags":32,"usePreview":1,"tags":["particle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texture(iChannel0, fragCoord/iResolution.xy);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define PARTICLES_CNT 512\n#define EMITT_SPEED 5.0\n\n#define rnd1(a) (texture(iChannel0, 256.0 / vec2(a, 0)).rgb - vec3(0.5))\n#define grad(v, c, siz) max(1.0 - distance(auv, ha + c) / siz, 0.0) * v\n#define ztan(v) max(tan(v), 0.0)\n\nvec3 sparks(int i, vec2 auv, vec2 ha, float t)\n{\n    float g = grad(1.0, 0.0, 0.5);\n    vec2 v = rnd1(i).rg * ztan(t) * vec2(1.0, sin(g) * 0.5);\n    return vec3(0.5, 0.3, 0.8) * (grad(g, v, 0.006) * 0.5 +\n                                  grad(g, v, 0.025) * 0.1);\n}\n\nvec3 implosion(int i, vec2 auv, vec2 ha, float t)\n{\n    float g = grad(1.0, 0.0, 0.2);\n    float st = max(1.0 - tan(t) * g * 10.0, 0.0);\n    vec2 v = rnd1(i).rg * st  * g * (1.0 - g);\n    return vec3(0.05, 0.3, 0.5) * (grad(1.0, v, 0.005) * 0.9 +\n                                   grad(1.0, v, 0.015) * 0.2);\n}\n\nvec3 portal(int i, vec2 auv, vec2 ha, float t)\n{\n    float st = max(1.0 - tan(t), 0.0);\n    vec2 v = rnd1(i).rg * st * grad(1.0, 0.0, 0.2) * 3.0;\n    return vec3(0.1, 0.8, 0.2) * grad(0.2, v, 0.045) *\n                                 (1.0 - grad(1.0, 0.0, 0.25) * 2.0);\n}\n\nvec3 meteor(int i, vec2 auv, vec2 ha, float t)\n{\n    ha.y -= 0.15;\n    vec2 v = rnd1(i).rg + vec2((ha.x - auv.x) , 0.3);\n    return vec3(0.9, 0.5, 0.2) * grad(0.2, v * ztan(t), 0.018) * grad(1.0, 0.0, 0.35);\n}\n\nvec3 signals(int i, vec2 auv, vec2 ha, float t)\n{\n    vec2 v = rnd1(i).rg * sin(auv - ha) * 20.0 + rnd1(i + 1).rg;\n    return vec3(0.9, 0.1, 0.1) * grad(0.5, v * ztan(t), 0.01) * grad(1.0, 0.0, 0.3);\n}\n\nvec3 pulsar(int i, vec2 auv, vec2 ha, float t)\n{\n    float mt = iTime * 10.0;\n    vec2 v = rnd1(i).rg * vec2(sin(mt), cos(mt)) * ztan(t);\n    return vec3(0.5, 1.0, 1.0) * grad(0.1, v, 0.02) * grad(1.0, 0.0, 0.2);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 a = vec2(iResolution.x / iResolution.y, 1.0);\n    vec2 auv = uv * a;\n    \n    vec3 rgb = texture(iChannel1, uv).rgb;\n    for(int x = 0; x < PARTICLES_CNT; x++)\n    {\n        float t = iTime + rnd1(x * 2).x * EMITT_SPEED;\n        \n        if(uv.x < 0.33 && uv.y < 0.5)\n            rgb += sparks(x, auv, a * vec2(0.165, 0.25), t);\n        else if(uv.x < 0.33 && uv.y > 0.5)\n            rgb += implosion(x, auv, a * vec2(0.165, 0.75), t);\n        else if(uv.x < 0.66 && uv.y > 0.5)\n            rgb += meteor(x, auv, a * vec2(0.495, 0.75), t);\n        else if(uv.x < 0.66 && uv.y < 0.5)\n            rgb += portal(x, auv, a * vec2(0.495, 0.25), t);\n        else if(uv.x > 0.66 && uv.y < 0.5)\n            rgb += signals(x, auv, a * vec2(0.825, 0.25), t);\n        else if(uv.x > 0.66 && uv.y > 0.5)\n            rgb += pulsar(x, auv, a * vec2(0.825, 0.75), t);\n    }\n\n    // Output to screen\n    fragColor = vec4(mix(rgb, vec3(0.0), 0.1), 1.0);\n}\n","name":"Buffer A","description":"","type":"buffer"}]}