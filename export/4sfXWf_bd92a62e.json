{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"cubemap","id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}},{"channel":1,"type":"cubemap","id":"4sX3zn","filepath":"/media/a/0681c014f6c88c356cf9c0394ffe015acc94ec1474924855f45d22c3e70b5785.png","sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"code":"const int MAX_STEPS = 50;\nconst vec3 BOX = vec3(1.0);\nconst float SPHERE = 1.2;\nconst vec2 TORUS = vec2(1.0, 0.25);\n\nconst float THRESHOLD = 0.01;\nconst vec3 DX = vec3(THRESHOLD, 0.0, 0.0);\nconst vec3 DY = vec3(0.0, THRESHOLD, 0.0);\nconst vec3 DZ = vec3(0.0, 0.0, THRESHOLD);\n\nfloat udBox(vec3 p, vec3 b) {\n    return length(max(abs(p) - b, 0.0));\n}\n\nfloat sdSphere(vec3 p, float s) {\n    return length(p)-s;\n}\n\nstruct Ray {\n    vec3 position;\n    vec3 direction;\n    bool hit;\n};\n    \nfloat D(vec3 p) {\n    /* Distance function */\n    float dBox = udBox(p, BOX);\n    float dSphere = sdSphere(p, SPHERE);\n    return max(-dSphere, dBox);\n}\n\nRay backstep(Ray ray) {\n    ray.position -= THRESHOLD * ray.direction;\n    return ray;\n}\n\nRay intersect(Ray ray) {\n    for (int i=0; i<MAX_STEPS; i++) {\n        float dist = D(ray.position);\n        if (dist < THRESHOLD) {\n            ray.hit = true;\n            return ray;\n        }\n        ray.position += ray.direction * dist;\n    }\n    return ray;\n}\n\nvec3 normal(vec3 p) {\n    return normalize(vec3(D(p+DX)-D(p-DX),\n                          D(p+DY)-D(p-DY),\n                          D(p+DZ)-D(p-DZ)));\n}\n\nvec3 Rx(vec3 vector, float angle) {\n    float rx = vector.x * cos(angle) + vector.z * sin(angle);\n    float rz = vector.z * cos(angle) - vector.x * sin(angle);\n    return vec3(rx, vector.y, rz);\n}\n\nvec3 render(Ray ray) {\n    ray = backstep(ray);\n    if (ray.hit) {\n        return texture(iChannel1, normal(ray.position)).rgb;\n    } else {\n        return texture(iChannel0, ray.direction).rgb;\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float aspect_ratio = iResolution.x / iResolution.y;\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 p = (uv - vec2(0.5)) * vec2(aspect_ratio, 1.0);\n    \n    float angle = iTime / 4.0;\n    \n    if (iMouse.z > 0.0) {\n    \tangle = iMouse.x / iResolution.x * 6.0 + 0.5;\n    }\n        \n    vec3 camera_loc = 6.0 * vec3(-sin(angle), 0.0, -cos(angle));\n    vec3 camera_dir = vec3(sin(angle), 0.0, cos(angle));\n    \n    Ray ray;\n    ray.position = camera_loc;\n    ray.direction = Rx(normalize(vec3(p, 1.0)), angle);\n    ray.hit = false;\n    \n    ray = intersect(ray);\n    \n    vec3 col = render(ray);\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4sfXWf","date":"1407201507","viewed":332,"name":"Image-based lighting test","username":"hughes","description":"In this test, cubemaps are used to illuminate the object and colour the background.\n\n","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["distancefields","imagebasedlighting"],"hasliked":0,"parentid":"","parentname":""}}