{"ver":"0.1","info":{"id":"Dd23R1","date":"1667427934","viewed":79,"name":"Mandelbrot simple easy","username":"PandaManda","description":"Mandelbrot simple and easy impl","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["simple","mandelbrot","colored","easy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_ITERATIONS 128.\n\n// function to calculate f(x) = x^2+c;\nvec2 f(vec2 z, vec2 c){\n        return vec2(z.x*z.x - z.y*z.y, 2.*z.x* z.y) + c;\n}\n\nvec3 hash13(float m){\n    float x = fract(sin(m) * 5625.246);\n    float y= fract(sin(m + x) * 2216.486);\n    float z = fract(sin(x + y) * 8276.352);\n    return vec3(x,y,z);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = (fragCoord.xy-.5*iResolution.xy) / iResolution.y;\n    //uv.yx *= sin(iTime);\n    vec2 c = uv * 2.5; \n    vec2 z = vec2(0.);\n    float iter = 0.;\n    \n    for(iter = 0.; iter < MAX_ITERATIONS; iter++) {\n    \tz = f(z, c);            \n        if(length(z) > 2.) break;\n    } \n    \n\n    float f = iter/MAX_ITERATIONS;\n    \n    vec3 col = vec3(f);\n    \n    //add colors\n    col += hash13(f);\n    \n    // gamma correction\n    col = pow(col, vec3(.45));\n    \n    if(iter == MAX_ITERATIONS) fragColor = vec4(0.,0.,0.,1.);//makes insides of mandelbrot black\n    else  fragColor = vec4(col, 1.0);\n\n}","name":"Image","description":"","type":"image"}]}