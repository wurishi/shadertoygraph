{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"texture","id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"// ALL TAKEN FROM IQs AMAZING SITE / TUTORIALS / SHADERS:\n// https://iquilezles.org/www/index.htm\n// https://www.shadertoy.com/user/iq\n\n// Specific shaders stolen from\n// ROT FUNCTIONS  : https://www.shadertoy.com/view/XsSSzG\n\n\nconst float MAX_TRACE_DISTANCE = 20.0;           // max trace distance\nconst float INTERSECTION_PRECISION = .01;        // precision of the intersection\nconst int NUM_OF_TRACE_STEPS = 80;\n\t\n\nconst float pi = 3.14159;\n\nvec4 spherePos[8];\nvec3 sphereRot[8];\n\n\nvec4 texCube( sampler2D sam, in vec3 p, in vec3 n, in float k )\n{\n\tvec4 x = texture( sam, p.yz *.4);\n\tvec4 y = texture( sam, p.zx *.4);\n\tvec4 z = texture( sam, p.xy *.4 );\n    vec3 w = pow( abs(n), vec3(k) );\n\treturn (x*w.x + y*w.y + z*w.z) / (w.x+w.y+w.z);\n}\n\n\n// ROTATION FUNCTIONS TAKEN FROM\n//https://www.shadertoy.com/view/XsSSzG\nmat3 xrotate(float t) {\n\treturn mat3(1.0, 0.0, 0.0,\n                0.0, cos(t), -sin(t),\n                0.0, sin(t), cos(t));\n}\n\nmat3 yrotate(float t) {\n\treturn mat3(cos(t), 0.0, -sin(t),\n                0.0, 1.0, 0.0,\n                sin(t), 0.0, cos(t));\n}\n\nmat3 zrotate(float t) {\n    return mat3(cos(t), -sin(t), 0.0,\n                sin(t), cos(t), 0.0,\n                0.0, 0.0, 1.0);\n}\n\n\n\nfloat udRoundBox( vec3 p, vec3 b, float r )\n{\n  return length(max(abs(p)-b,0.0))-r;\n}\n\nfloat sdPlane( vec3 p )\n{\n\n    //float f = fbm( p.xy );\n    //f *= fbm( p.yz );\n    //f = 5. * smoothstep( abs(f) , 0.4 , 0.8 );\n\treturn p.y;// + sin( p.x * 1. * p.z ) * .002; //- (f * .4); //(abs( f) * .3)/ max( 1. , pow( length( p ), 1.));\n\n}\n\n\n\n//----\n// Camera Stuffs\n//----\nmat3 calcLookAtMatrix( in vec3 ro, in vec3 ta, in float roll )\n{\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(sin(roll),cos(roll),0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    return mat3( uu, vv, ww );\n}\n\nvoid doCamera( out vec3 camPos, out vec3 camTar, in float time, in float mouseX )\n{\n    float an = 0.3 + 10.0*mouseX;\n\tcamPos = vec3(3.5*sin(an),1.0,3.5*cos(an));\n    camTar = vec3(0.0,0.0,0.0);\n}\n\n\n\n\n// checks to see which intersection is closer\n// and makes the y of the vec2 be the proper id\nvec2 opU( vec2 d1, vec2 d2 ){\n    \n\treturn (d1.x<d2.x) ? d1 : d2;\n    \n}\n\n// exponential smooth min (k = 32);\nfloat smin( float a, float b, float k ){\n    \n    float res = exp( -k*a ) + exp( -k*b );\n    return -log( res )/k;\n    \n}\n\nfloat opBlend( vec2 d1, vec2 d2 ){\n\n    return smin( d1.x , d2.x , 8.);\n    \n}\n\n\nmat3 fullRotate( vec3 r ){\n \n   return xrotate( r.x ) * yrotate( r.y ) * zrotate( r.z );\n    \n}\n\nfloat rotatedBox( vec3 p , vec3 rot , vec3 size , float rad ){\n    \n    vec3 q = fullRotate( rot ) * p;\n    return udRoundBox( q , size , rad );\n    \n    \n}\n\n\nfloat rotatedPlane( vec3 p , vec3 rot ){\n    \n    vec3 q = fullRotate( rot ) * p;\n    return sdPlane( q );\n\n    \n}\n\n\n//--------------------------------\n// Modelling \n//--------------------------------\nvec2 map( vec3 pos ){  \n    \n   \t//vec2 res = vec2( sdPlane( pos - vec3( 0. , -1. , 0. )), 0.0 );\n    \n    vec2 res = vec2( rotatedPlane( pos - vec3( 0. , -2. , 0. ) , vec3(.9 , 0. , 0)) , 0.);\n    \n    res.x = opBlend( res , vec2( rotatedPlane( pos - vec3( 0. , -2. , 0. ) , vec3(-.7 , 0. , 0)) , 0.));\n    res.x = opBlend( res , vec2( rotatedPlane( pos - vec3( 0. , -2. , 0. ) , vec3(0. , 0. , 1.)) , 0.));\n    //vec2 res = vec2( sdSphere( pos , 8. ) , 0.); , 1.\n   \n    for( int i = 0; i < 8; i++ ){\n   \t\t\n\n        vec3 rot = sphereRot[i];\n        vec3 p = pos- spherePos[i].xyz;\n        vec3 s = vec3( spherePos[i].w , spherePos[i].w / 100. , spherePos[i].w / 100.);\n        float r = spherePos[i].w / 4.;\n        \n        float intersection = rotatedBox( p , rot , s , r );\n      \tvec2 res2 = vec2( intersection , float(i) + 1.);\n       \tres.x = opBlend( res ,  res2 );\n        \n   \t}\n    \n\n   \treturn res;\n    \n}\n\n\n// Calculates our intersection by stepping through the\n// map function, and returning both the object hit and the distance\n// it is hit at\nvec2 calcIntersection( in vec3 ro, in vec3 rd ){\n\n    \n    float h =  INTERSECTION_PRECISION*2.0;\n    float t = 0.0;\n\tfloat res = -1.0;\n    float id = -1.;\n    \n    for( int i=0; i< NUM_OF_TRACE_STEPS ; i++ ){\n        \n        if( h < INTERSECTION_PRECISION || t > MAX_TRACE_DISTANCE ) break;\n\t   \tvec2 m = map( ro+rd*t );\n        h = m.x;\n        t += h;\n        id = m.y;\n        \n    }\n\n    if( t < MAX_TRACE_DISTANCE ) res = t;\n    if( t > MAX_TRACE_DISTANCE ) id =-1.0;\n    \n    return vec2( res , id );\n    \n}\n\n// Calculates the normal by taking a very small distance,\n// remapping the function, and getting normal for that\nvec3 calcNormal( in vec3 pos ){\n    \n\tvec3 eps = vec3( 0.001, 0.0, 0.0 );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\n\n\nfloat softshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<50; i++ )\n    {\n\t\tfloat h = map( ro + rd*t ).x;\n        res = min( res, 20.*h/t );\n        t += clamp( h, 0.02, 0.10 );\n        if( h<0.001 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n\n}\n\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.612*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.5;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    \n\n    for( int i =0; i < 8; i++ ){\n        \n        float x = 1. * cos(iTime *.13 * (float( i )+2.));\n        float y = 1. * sin(iTime * .075 * (float( i )+4.));\n        float z = 1. * sin(iTime * .1 * (float( i )+3.3));\n        float r = .4 * ( sin( iTime * .1  *( float( i) +1.))+2.);\n        \n        spherePos[i] = vec4( x , y , z , r );\n        \n        \n        sphereRot[i] = vec3( \n            iTime  * (float(i)+2.) * .4 ,\n            iTime  * (float(i)+8.2) * .2 ,\n            iTime  * (float(i)+3.6) * .01\n        );\n\n    }\n\n    \n    \n    \n    vec2 p = (-iResolution.xy + 2.0*fragCoord.xy)/iResolution.y;\n    //vec2 m = iMouse.xy/iResolution.xy;\n    vec2 m = vec2( 1.1 +( sin( iTime * 0.4 ) + sin( iTime * 0.01 )) * .04 , 0. );\n\n    //-----------------------------------------------------\n    // camera\n    //-----------------------------------------------------\n    \n    // camera movement\n    vec3 ro, ta;\n    doCamera( ro, ta, iTime, m.x );\n\n    // camera matrix\n    mat3 camMat = calcLookAtMatrix( ro, ta, 0.0 );  // 0.0 is the camera roll\n    \n\t// create view ray\n\tvec3 rd = normalize( camMat * vec3(p.xy,1.5 + abs(sin( iTime * .01 ) + sin( iTime * .0315 ))) ); // 2.0 is the lens length\n    \n    vec2 res = calcIntersection( ro , rd  );\n    \n    \n  //  vec3 pat = texCube( iChannel0, 0.5*pos, nor, 10.0 ).xyz;\n    vec3 col = vec3( .3 , 0.1 , .1 );//vec3( .8 , .8 , .8 ); \n   \n    //vec3 col = texCube( iChannel0, ro + rd * 1. , rd , 1.0 ).xyz;\n    // If we have hit something lets get real!\n    if( res.y > -.5 ){\n\n    \tvec3 pos = ro + rd * res.x;\n    \tvec3 nor = calcNormal( pos );\n        \n        float AO = calcAO( pos , normalize(nor) );\n        \n        float match = -dot( normalize(nor) , rd );\n        \n        vec3 pat = texCube( iChannel0, 0.5*pos, nor, 1.0 ).xyz;\n        col = pat*.2+.1;\n        \n\t\tvec3 light1 =  normalize(vec3( 0. , 1. , 1. ));\n        vec3 color1 = vec3( .1 , .02 , .02 );\n        color1 *=8.;\n        float shadow1 = softshadow( pos , light1 ,  0.1 , 20. );\n        \n        color1 *= max( 0. , dot( light1 , nor ) );\n        color1 *= shadow1;\n        col += color1;  \n        \n        vec3 light2 =  normalize(vec3( -1. , 1. , 0. ));\n        vec3 color2 = vec3( .1 , .05 , .02 );\n        color2 *=8.;\n        float shadow2 = softshadow( pos , light2 ,  0.1 , 20. );\n        \n        color2 *= max( 0. , dot( light2 , nor ) );\n        color2 *= shadow2;\n        col += color2;\n        //*(1.+ abs(sin( shadow1 * 3. ))) / 3.;\n\n\n        //vec3 col = vec3(.8 , 0. , 0. ) * match * AO;//(vec3( 1. , 0. , 0. ) * (vec3( fbm( vec2(match * 10. , AO * 10.) )))) * .5;\n\n        // rim lighting\n        col += pow((1.- match),3.) * vec3( 1. , 1. , 1.);\n        col *= AO * vec3( .8 , .8 , 1. );//pow((1.- AO) , 4.)* vec3( .2 , .1 , .6 );\n        //col *= pow\n        \n        //col += pat;// * .4 * ( nor * .5 + .5 );\n        \n       // col *= vec3( res.y );//vec3( 0. , 1. * sin( res.y *1000.+ 1. ) , 0.);\n       /* if( res.y < .5 ){\n            \n            float f = sin( pos.z * 5. ) * sin( pos.x * 5. );\n            //col *= 5. * smoothstep( abs(f) , 0.4 , 0.8 );\n            col *= abs( f );\n            col /= pow( length( pos ), 4.);\n        }*/\n    }\n    \n    // apply gamma correction\n    col = pow( col, vec3(0.4545) );\n\n    fragColor = vec4( col , 1. );\n    \n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MlX3Rj","date":"1423342165","viewed":586,"name":"SHADE A DAY ( 2 / 7 / 2015 )","username":"cabbibo","description":"geting some shading working","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["metaballs"],"hasliked":0,"parentid":"","parentname":""}}