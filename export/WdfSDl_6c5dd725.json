{"ver":"0.1","info":{"id":"WdfSDl","date":"1552457064","viewed":332,"name":"Draw Lines","username":"kam19_77","description":"Prewitt, Sobel, Laplacian filter","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["filter"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//#define ENABLE_PREWITT_FILTER\n//#define ENABLE_SOBEL_FILTER\n//#define ENABLE_LAPLACIAL4_FILTER\n#define ENABLE_LAPLACIAL8_FILTER\n\nfloat PrewittFilter(in vec2 fragCoord) {\n    const vec3 kernel0 = vec3(-1.0f, -1.0f, -1.0f);\n    const vec3 kernel1 = vec3(+1.0f, +1.0f, +1.0f);\n\tconst vec4 kernel2 = vec4(0.2126f, 0.7152f, 0.0722f, 0.0f);\n    \n    vec2 SRC_SIZE     = iResolution.xy;\n    vec2 INV_SRC_SIZE = vec2(1.0f, 1.0f) / SRC_SIZE;\n    vec2 uv = fragCoord * INV_SRC_SIZE;\n    \n    vec4 c00 = texture(iChannel0, clamp(uv + vec2(-1.0f, -1.0f) * INV_SRC_SIZE, 0.0f, 1.0f));\n    vec4 c01 = texture(iChannel0, clamp(uv + vec2( 0.0f, -1.0f) * INV_SRC_SIZE, 0.0f, 1.0f));\n    vec4 c02 = texture(iChannel0, clamp(uv + vec2(+1.0f, -1.0f) * INV_SRC_SIZE, 0.0f, 1.0f));\n    vec4 c10 = texture(iChannel0, clamp(uv + vec2(-1.0f,  0.0f) * INV_SRC_SIZE, 0.0f, 1.0f));\n    vec4 c12 = texture(iChannel0, clamp(uv + vec2(+1.0f,  0.0f) * INV_SRC_SIZE, 0.0f, 1.0f));\n    vec4 c20 = texture(iChannel0, clamp(uv + vec2(-1.0f, +1.0f) * INV_SRC_SIZE, 0.0f, 1.0f));\n    vec4 c21 = texture(iChannel0, clamp(uv + vec2( 0.0f, +1.0f) * INV_SRC_SIZE, 0.0f, 1.0f));\n    vec4 c22 = texture(iChannel0, clamp(uv + vec2(+1.0f, +1.0f) * INV_SRC_SIZE, 0.0f, 1.0f));\n    \n    \n    float y00 = dot(kernel2, c00);\n    float y01 = dot(kernel2, c01);\n    float y02 = dot(kernel2, c02);\n    float y10 = dot(kernel2, c10);\n    float y12 = dot(kernel2, c12);\n    float y20 = dot(kernel2, c20);\n    float y21 = dot(kernel2, c21);\n    float y22 = dot(kernel2, c22);\n    \n    float u = 0.0f;\n    u += dot(kernel0, vec3(y00, y10, y20));\n    u += dot(kernel1, vec3(y02, y12, y22));\n    \n    float v = 0.0f;\n    v += dot(kernel0, vec3(y00, y01, y02));\n    v += dot(kernel1, vec3(y20, y21, y22));\n    \n    return sqrt(dot(vec2(u, v), vec2(u, v))); \n}\n\nfloat SobelFilter(in vec2 fragCoord) {\n    const vec3 kernel0 = vec3(-1.0f, -2.0f, -1.0f);\n    const vec3 kernel1 = vec3(+1.0f, +2.0f, +1.0f);\n\tconst vec4 kernel2 = vec4(0.2126f, 0.7152f, 0.0722f, 0.0f);\n    \n    vec2 SRC_SIZE     = iResolution.xy;\n    vec2 INV_SRC_SIZE = vec2(1.0f, 1.0f) / SRC_SIZE;\n    vec2 uv = fragCoord * INV_SRC_SIZE;\n    \n    vec4 c00 = texture(iChannel0, clamp(uv + vec2(-1.0f, -1.0f) * INV_SRC_SIZE, 0.0f, 1.0f));\n    vec4 c01 = texture(iChannel0, clamp(uv + vec2( 0.0f, -1.0f) * INV_SRC_SIZE, 0.0f, 1.0f));\n    vec4 c02 = texture(iChannel0, clamp(uv + vec2(+1.0f, -1.0f) * INV_SRC_SIZE, 0.0f, 1.0f));\n    vec4 c10 = texture(iChannel0, clamp(uv + vec2(-1.0f,  0.0f) * INV_SRC_SIZE, 0.0f, 1.0f));\n    vec4 c12 = texture(iChannel0, clamp(uv + vec2(+1.0f,  0.0f) * INV_SRC_SIZE, 0.0f, 1.0f));\n    vec4 c20 = texture(iChannel0, clamp(uv + vec2(-1.0f, +1.0f) * INV_SRC_SIZE, 0.0f, 1.0f));\n    vec4 c21 = texture(iChannel0, clamp(uv + vec2( 0.0f, +1.0f) * INV_SRC_SIZE, 0.0f, 1.0f));\n    vec4 c22 = texture(iChannel0, clamp(uv + vec2(+1.0f, +1.0f) * INV_SRC_SIZE, 0.0f, 1.0f));\n    \n    \n    float y00 = dot(kernel2, c00);\n    float y01 = dot(kernel2, c01);\n    float y02 = dot(kernel2, c02);\n    float y10 = dot(kernel2, c10);\n    float y12 = dot(kernel2, c12);\n    float y20 = dot(kernel2, c20);\n    float y21 = dot(kernel2, c21);\n    float y22 = dot(kernel2, c22);\n    \n    float u = 0.0f;\n    u += dot(kernel0, vec3(y00, y10, y20));\n    u += dot(kernel1, vec3(y02, y12, y22));\n    \n    float v = 0.0f;\n    v += dot(kernel0, vec3(y00, y01, y02));\n    v += dot(kernel1, vec3(y20, y21, y22));\n    \n    return sqrt(dot(vec2(u, v), vec2(u, v))); \n}\n\nfloat Laplacian4Filter(in vec2 fragCoord) {\n    const vec3 kernel0 = vec3(-1.0f, +4.0f, -1.0f);\n    const vec2 kernel1 = vec2(-1.0f, -1.0f);\n\tconst vec4 kernel2 = vec4(0.2126f, 0.7152f, 0.0722f, 0.0f);\n    \n    vec2 SRC_SIZE     = iResolution.xy;\n    vec2 INV_SRC_SIZE = vec2(1.0f, 1.0f) / SRC_SIZE;\n    vec2 uv = fragCoord * INV_SRC_SIZE;\n    \n    vec4 c01 = texture(iChannel0, clamp(uv + vec2( 0.0f, -1.0f) * INV_SRC_SIZE, 0.0f, 1.0f));\n    vec4 c10 = texture(iChannel0, clamp(uv + vec2(-1.0f,  0.0f) * INV_SRC_SIZE, 0.0f, 1.0f));\n    vec4 c11 = texture(iChannel0, clamp(uv, 0.0f, 1.0f));\n    vec4 c12 = texture(iChannel0, clamp(uv + vec2(+1.0f,  0.0f) * INV_SRC_SIZE, 0.0f, 1.0f));\n    vec4 c21 = texture(iChannel0, clamp(uv + vec2( 0.0f, +1.0f) * INV_SRC_SIZE, 0.0f, 1.0f));\n    \n    \n    float y01 = dot(kernel2, c01);\n    float y10 = dot(kernel2, c10);\n    float y11 = dot(kernel2, c11);\n    float y12 = dot(kernel2, c12);\n    float y21 = dot(kernel2, c21);\n    \n    float v = 0.0f;\n    v += dot(kernel0, vec3(y10, y11, y12));\n    v += dot(kernel1, vec2(y01, y21));\n    \n    return v;\n}\n\nfloat Laplacian8Filter(in vec2 fragCoord) {\n    const vec3 kernel0 = vec3(-1.0f, -1.0f, -1.0f);\n    const vec3 kernel1 = vec3(-1.0f, +8.0f, -1.0f);\n    const vec4 kernel2 = vec4(0.2126f, 0.7152f, 0.0722f, 0.0f);\n    \n    vec2 SRC_SIZE     = iResolution.xy;\n    vec2 INV_SRC_SIZE = vec2(1.0f, 1.0f) / SRC_SIZE;\n    vec2 uv = fragCoord * INV_SRC_SIZE;\n    \n    vec4 c00 = texture(iChannel0, clamp(uv + vec2(-1.0f, -1.0f) * INV_SRC_SIZE, 0.0f, 1.0f));\n    vec4 c01 = texture(iChannel0, clamp(uv + vec2( 0.0f, -1.0f) * INV_SRC_SIZE, 0.0f, 1.0f));\n    vec4 c02 = texture(iChannel0, clamp(uv + vec2(+1.0f, -1.0f) * INV_SRC_SIZE, 0.0f, 1.0f));\n    vec4 c10 = texture(iChannel0, clamp(uv + vec2(-1.0f,  0.0f) * INV_SRC_SIZE, 0.0f, 1.0f));\n    vec4 c11 = texture(iChannel0, clamp(uv, 0.0f, 1.0f));\n    vec4 c12 = texture(iChannel0, clamp(uv + vec2(+1.0f,  0.0f) * INV_SRC_SIZE, 0.0f, 1.0f));\n    vec4 c20 = texture(iChannel0, clamp(uv + vec2(-1.0f, +1.0f) * INV_SRC_SIZE, 0.0f, 1.0f));\n    vec4 c21 = texture(iChannel0, clamp(uv + vec2( 0.0f, +1.0f) * INV_SRC_SIZE, 0.0f, 1.0f));\n    vec4 c22 = texture(iChannel0, clamp(uv + vec2(+1.0f, +1.0f) * INV_SRC_SIZE, 0.0f, 1.0f));\n    \n    \n    float y00 = dot(kernel2, c00);\n    float y01 = dot(kernel2, c01);\n    float y02 = dot(kernel2, c02);\n    float y10 = dot(kernel2, c10);\n    float y11 = dot(kernel2, c11);\n    float y12 = dot(kernel2, c12);\n    float y20 = dot(kernel2, c20);\n    float y21 = dot(kernel2, c21);\n    float y22 = dot(kernel2, c22);\n    \n    float v = 0.0f;\n    v += dot(kernel0, vec3(y00, y01, y02));\n    v += dot(kernel1, vec3(y10, y11, y12));\n    v += dot(kernel0, vec3(y20, y21, y22));\n    \n    return v;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float v = 0.0f;\n    #ifdef ENABLE_PREWITT_FILTER\n    \tv = PrewittFilter(fragCoord);\n    #endif\n    #ifdef ENABLE_SOBEL_FILTER\n    \tv = SobelFilter(fragCoord);\n    #endif\n    #ifdef ENABLE_LAPLACIAL4_FILTER\n    \tv = Laplacian4Filter(fragCoord);\n    #endif\n    #ifdef ENABLE_LAPLACIAL8_FILTER\n    \tv = Laplacian8Filter(fragCoord);\n    #endif\n\n    fragColor = vec4(v, v, v, 1.0);\n}","name":"Image","description":"","type":"image"}]}