{"ver":"0.1","info":{"id":"csfcR8","date":"1686550454","viewed":64,"name":"party","username":"bailesdtd","description":"i mess around","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["chud"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.14159265358979323846264338327950288;\n\nmat2 rotationMatrix(float angle)\n{\n    float s=sin(angle), c=cos(angle);\n    return mat2( c, -s, s, c );\n}\n\nfloat flatten(vec3 v){\n    return (v.x + v.y)/max(v.z,0.01);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.0 * fragCoord - iResolution.xy)/iResolution.y;\n    \n    vec2 uv0 = uv;\n    uv.y += 0.02*sin((iTime*2.0)+(iTime * uv.x*0.01));\n\n    vec3 finalCol= vec3(0.0,0.0,0.2);\n    \n    for(float i = 1.0; i < 3.0; i++){\n        uv0 *= rotationMatrix(iTime * PI*i);\n        uv = 2.0*(fract((1.0+sin(iTime*i*0.5)*0.5)*uv*1.0*i) - 0.5);\n        float m = length(uv);\n        vec3 col = vec3(abs(uv0+0.2*(i-1.0)),1.0);\n        m = smoothstep(m,0.0,0.1);\n        m = fract(length(uv)*m);\n        m = 0.2/m+0.1;\n        m = pow(m,1.2);\n        col = col * m;\n        \n        float f = flatten(col);\n        f = 0.8/f;\n        f = pow(f, 1.2);\n        col = col * f;\n        finalCol += col/(i*i);\n        }\n    fragColor = vec4(finalCol, 1.0);\n}","name":"Image","description":"","type":"image"}]}