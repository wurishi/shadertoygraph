{"ver":"0.1","info":{"id":"WtBfz3","date":"1599430365","viewed":80,"name":"AttemptingSierpinskiTriangle","username":"dotsum","description":"My first shadertoy. There Probably much better ways of doing it. I find this folding space in a mathematical way quite fascinating","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["fractal","triangle","folding","sierpinski","sierpinskitriangle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n#define NUMITERS 6\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv *= 2.0;\n    uv -= 1.0;\n    \n    uv.x *= iResolution.x / iResolution.y;\n\n    const float sqrt3 = sqrt(3.0);\n    vec3 col = vec3(0.0);\n    \n    const float angle = (1.0/6.0) * PI;\n    \n    // Two reflection vectors for symmetry\n    vec2 n1 = vec2(sin(angle), cos(angle));\n    vec2 n2 = vec2(-sin(angle), cos(angle));\n    \n    uv -= n1 * min(0.0, dot(uv, n1)) * 2.0;\n    uv -= n2 * min(0.0, dot(uv, n2)) * 2.0;\n    \n    // Iterating the foldings\n    for (int i = 0; i < NUMITERS; i++) {\n        uv *= 2.0;\n        uv.y -= sqrt3/2.0;\n        uv -= n1 * min(0.0, dot(uv, n1)) * 2.0;\n        uv -= n2 * min(0.0, dot(uv, n2)) * 2.0;\n    }\n    \n    float d = 0.0;\n    \n    // Simple 2d equations for lines, desmos can help you visualize the inequalites\n    d += step(0.0, -sqrt3 * uv.x - uv.y);\n    d += step(0.0, sqrt3 * uv.x - uv.y);\n\td += step(sqrt3 / 4.0, uv.y);\n    \n    d -= 2.0 * step(sqrt3 / 2.0, uv.y - sqrt3 * uv.x);\n    d -= 2.0 * step(sqrt3 / 2.0, uv.y + sqrt3 * uv.x);\n    \n    col += d;\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}