{"ver":"0.1","info":{"id":"tdKfDW","date":"1607190746","viewed":166,"name":"20200707_trancy freeform","username":"FMS_Cat","description":"originally made for my own audio live coding app\nhttps://github.com/FMS-Cat/wavenerd-dubplates/blob/master/shaders/20200707_trance_freeform.glsl\n","likes":10,"published":1,"flags":8,"usePreview":0,"tags":["music"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // no image\n    fragColor = vec4(0,0,0,1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"#define TRANSPOSE 0.0\n\n#define PI 3.141592654\n#define TAU 6.283185307\n#define BPM 160.0\n#define P4 1.33483985417\n#define P5 1.49830707688\n#define beat *60.0/BPM\n\n#define saturate(i) clamp(i, 0.,1.)\n#define aSaturate(i) clamp(i, -1.,1.)\n#define linearstep(a,b,x) saturate(((x)-(a))/((b)-(a)))\n#define lofi(i,m) (floor((i)/(m))*(m))\n#define lofir(i,m) (floor((i)/(m)+0.5)*(m))\n#define saw(p) (2.*fract(p)-1.)\n#define pwm(x,d) (step(fract(x),(d))*2.0-1.0)\n#define tri(p) (1.-4.*abs(fract(p)-0.5))\n#define n2f(n) (440.0*pow(2.0,((n)+TRANSPOSE)/12.0))\n#define inRange(a,b,x) ((a)<=(x)&&(x)<(b))\n\nfloat chords[16] = float[](\n  -4.0, 12.0, 14.0, 19.0,\n  -5.0, 9.0, 14.0, 17.0,\n  -4.0, 7.0, 12.0, 17.0,\n  0.0, 10.0, 14.0, 19.0\n);\n\nvec2 noise( float t ) {\n  vec2 uv0, uv1;\n  uv0.x = ( floor( t * iSampleRate ) + 0.5 ) / 256.0;\n  uv1.x = uv0.x += 1.0 / 256.0;\n  uv0.y = ( floor( uv0.x ) + 0.5 ) / 256.0;\n  uv1.y = ( floor( uv1.x ) + 0.5 ) / 256.0;\n  uv0 = fract( uv0 );\n  uv1 = fract( uv1 );\n    \n  float f = smoothstep( 0.0, 1.0, fract( t * iSampleRate ) );\n\n  return mix(\n    texture( iChannel0, uv0 ).xy,\n    texture( iChannel0, uv1 ).xy,\n    f\n  ) * 2.0 - 1.0;\n}\n\nvec2 random2( float t ) {\n  vec2 uv;\n  uv.x = ( floor( t * iSampleRate ) + 0.5 ) / 256.0;\n  uv.y = ( floor( uv.x ) + 0.5 ) / 256.0;\n  uv = fract( uv );\n\n  return texture( iChannel0, uv ).xy;\n}\n\nvec2 wavetable( float time, float speed, float offset ) {\n  if ( time < 0.0 ) { return vec2( 0.0 ); }\n  float p = tri( time );\n  return noise( p * speed + offset );\n}\n\nvec2 kick( float t, float freq ) {\n  float phase = freq * t - 11.0 * ( exp( -25.0 * t ) + exp( -100.0 * t ) + exp( -700.0 * t ) );\n  float fmA = sin( TAU * 1.0 * phase + 1.4 );\n  vec2 fmB = 0.5 * exp( -20.0 * t ) * tri( 0.5 * phase + fmA + vec2( 0.2, 0.24 ) );\n  return aSaturate( 1.0 * vec2( exp( -4.0 * t ) * sin( TAU * phase + fmB ) ) );\n}\n\nvec2 snare( float t ) {\n  if ( t < 0.0 ) { return vec2( 0.0 ); }\n  return aSaturate( (\n    wavetable( 3.0 * t, 0.05, 0.0 ).xy +\n    sin( t * 3800.0 + vec2( 0.0, 0.5 ) - exp( -t * 400.0 ) * 30.0 )\n  ) * 4.0 * exp( -t * 13.0 ) );\n}\n\nvec2 rimshot( float t ) {\n  if ( t < 0.0 ) { return vec2( 0.0 ); }\n  float attack = exp( -t * 400.0 ) * 0.6;\n  vec2 wave = (\n    tri( t * 450.0 * vec2( 1.005, 0.995 ) - attack ) +\n    tri( t * 1800.0 * vec2( 0.995, 1.005 ) - attack )\n  );\n  return aSaturate( 4.0 * wave * exp( -t * 400.0 ) );\n}\n\nvec2 snare909( float t ) {\n  if ( t < 0.0 ) { return vec2( 0.0 ); }\n  return aSaturate( (\n    noise( t ).xy * 2.0 +\n    sin( t * 1400.0 * vec2( 1.005, 0.995 ) - exp( -t * 80.0 ) * 30.0 )\n  ) * 1.0 * exp( -t * 10.0 ) );\n}\n\nvec2 mainSound( in int samp, float _time ) {\n  vec2 dest = vec2( 0.0 );\n    \n  vec4 time = vec4(\n      mod( _time, 1.0 beat ),\n      mod( _time, 4.0 beat ),\n      mod( _time, 64.0 beat ),\n      _time\n  );\n\n  // -- kick ---------------------------------------------------------------------------------------\n  float kickTime = mod( time.x, 1.0 beat );\n  float sidechain = linearstep( 0.0, 0.6 beat, kickTime );\n\n  if ( inRange( 0.0 beat, 61.0 beat, time.z ) ) {\n    dest += 0.5 * kick( kickTime, 50.0 );\n  }\n\n  // -- hihat --------------------------------------------------------------------------------------\n  {\n    float t = mod( time.z, 0.25 beat );\n    float begin = time.z - t;\n    vec2 dice = random2( begin );\n    float open = mix( 30.0, 200.0, dice.x );\n    float amp = 0.4 * mix( 0.2, 1.0, sidechain ) * exp( -open * t );\n    vec2 wave = wavetable( 40.0 * lofi( t, 0.00005 ), 4.0, 0.0 );\n    dest += amp * wave;\n  }\n\n  // -- snare --------------------------------------------------------------------------------------\n  {\n    dest += 0.2 * mix( 0.6, 1.0, sidechain ) * snare( mod( time.y - 1.0 beat, 2.0 beat ) );\n  }\n\n  // -- snare909 -----------------------------------------------------------------------------------\n  if ( inRange( 60.0 beat, 64.0 beat, time.z ) ) {\n    float t = time.y < 2.0 beat ? mod( time.x, 0.25 beat ) : mod( time.x, 0.125 beat );\n    float amp = 0.14 * smoothstep( -4.0 beat, 4.0 beat, time.y );\n    dest += amp * snare909( t );\n  }\n\n  // -- psysaw -------------------------------------------------------------------------------------\n  {\n    float t = mod( time.z, 0.25 beat );\n    float beginStep = floor( time.z / ( 0.25 beat ) );\n    vec2 dice = random2( 0.87 * beginStep );\n    if ( t < ( 0.3 - dice.x * 0.2 ) beat ) {\n      float freq = 5.0 * exp( 1.0 + sin( beginStep * 0.84 ) );\n      dest += 0.09 * saw( 20.0 * exp( -2.0 * fract( 10.0 * exp( -freq * t ) ) ) );\n    }\n  }\n\n  // -- short fx -----------------------------------------------------------------------------------\n  {\n    float t = mod( time.y - 0.25 beat, 2.0 beat );\n    float env = exp( -t * 20.0 );\n    float freq = 1400.0;\n    freq *= 1.0 + mod( floor( t * 300.0 ), 3.0 );\n    vec2 phase = t * freq + vec2( 0.4, 0.9 );\n    vec2 pan = vec2( 0.5, 1.0 );\n    pan = ( mod( time.y, 4.0 beat ) < 2.0 beat ) ? pan : pan.yx;\n    dest += 0.13 * env * pan * pwm( phase, vec2( 0.3 ) );\n  }\n\n  // -- rimshot ------------------------------------------------------------------------------------\n  {\n    float t = mod( mod( time.x + 0.25 beat, 1.0 beat ), 0.75 beat );\n    vec2 pan = vec2( 1.0, 0.5 );\n    dest += 0.3 * rimshot( t );\n  }\n\n  // -- crash --------------------------------------------------------------------------------------\n  {\n    float amp = 0.14 * mix( 0.2, 1.0, sidechain ) * exp( -time.z );\n    dest += amp * noise( time.z );\n  }\n\n  // -- bass ---------------------------------------------------------------------------------------\n  {\n    float t = mod( time.y, 0.25 beat );\n    vec2 dice = random2( 0.94 * lofi( time.y, 0.25 beat ) );\n\n    float pattern[16] = float[](\n      0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0,\n      0.0, 0.0, 0.0, 0.0\n    );\n    int iProg = int( time.z / ( 8.0 beat ) ) % 4;\n    float freq = n2f( -48.0 + pattern[ int( time.y / ( 0.25 beat ) ) ] + chords[ 4 * iProg ] );\n    float amp = 0.25 * sidechain;\n    vec2 fm = 0.5 * exp( -6.0 * t ) * sin( 5.0 * TAU * freq * t + vec2( 1.0, 2.0 ) );\n    fm += 0.5 * exp( -5.0 * t ) * sin( 6.0 * TAU * freq * t + vec2( 4.0, 5.0 ) );\n    fm += 2.0 * exp( -15.0 * t ) * sin( 11.0 * TAU * freq * t + fm );\n    dest += amp * aSaturate( 3.0 * sin( 1.0 * TAU * freq * t + fm ) );\n  }\n\n  // -- pads ---------------------------------------------------------------------------------------\n  {\n    vec2 wave = vec2( 0.0 );\n    int iProg = int( time.z / ( 8.0 beat ) ) % 4;\n  \tvec2 diceTime = random2( 0.37 * floor( time.y / ( 0.25 beat ) ) );\n    for ( int i = 0; i < 8; i ++ ) {\n      vec2 dice = random2( 0.81 * float( i ) + 2.778 );\n      float freq = n2f( chords[ ( i % 4 ) + 4 * iProg ] - 5.0 * float( i < 4 ) - 12.0 + 0.2 * ( dice.x - 0.5 ) );\n      wave += (\n        wavetable( time.z * freq, mix( 0.2E-4, 3E-4, diceTime.x ), -0.0001 * time.z + float( i ) )\n      );\n    }\n    float amp = 0.09 * sidechain;\n    dest += amp * wave;\n  }\n\n  // -- arp ----------------------------------------------------------------------------------------\n  {\n    vec2 wave = vec2( 0.0 );\n    for ( int i = 0; i < 4; i ++ ) {\n      float fi = float( i );\n      float t = mod( time.x, 0.25 beat );\n      float env = exp( -t * 10.0 );\n      int iProg = int( mod( time.z - 0.75 beat * fi, 64.0 beat ) / ( 8.0 beat ) ) % 4;\n      vec2 dice = random2( 0.81 * fi );\n      int hit = ( int( mod( time.z - 0.75 beat * fi, 64.0 beat ) / ( 0.25 beat ) ) * 477 % 800 ) / 100; \n      float freq = n2f( chords[ ( hit % 4 ) + 4 * iProg ] + 12.0 * float( hit / 4 ) - 12.0 + 0.1 * ( dice.x - 0.5 ) );\n      vec2 phase = t * freq + mix( vec2( 1.0, 0.0 ), vec2( 0.0, 1.0 ), dice.y );\n      wave += env * saw( phase ) * exp( -0.7 * fi );\n      wave += env * saw( phase * P5 ) * exp( -0.7 * fi );\n    }\n    dest += 0.14 * sidechain * wave;\n  }\n\n  return aSaturate( 1.2 * dest );\n}\n","name":"Sound","description":"","type":"sound"}]}