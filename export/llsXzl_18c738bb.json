{"ver":"0.1","info":{"id":"llsXzl","date":"1439099183","viewed":346,"name":"Truchet Tiles","username":"anastadunbar","description":"Was very easy to make. Not so smooth when zooming in.","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["procedural","2d","circles","simple","round","random","generative","smooth","tiles"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"//Change these:\n\n#define mode 1\n//1 = round, 2 = triangle\n\n//The round tiles\n#define sharp 35. \n#define thick 0.06\n\n//The right triangle tiles\n#define sharp2 30.\n\n#define uv_size 20.\n#define random_seed 1.\n\n//------------------------------------------------------------------------------------------------------------------\nfloat rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\nfloat manhattan(vec2 uv) {\n    return abs(uv.x)+abs(uv.y);\n}\n//The tiles---------------------------------------------------------------------------------------------------------\n//The round tiles\nfloat tile_1(vec2 uv){\n    float x = clamp((1.-length(uv-vec2(1.,0.))-(0.5-thick))*sharp,0.,1.)+clamp((1.-length(uv-vec2(0.,1.))-(0.5-thick))*sharp,0.,1.);\n    x -= clamp((1.-length(uv-vec2(1.,0.))-(0.5+thick))*sharp,0.,1.)+clamp((1.-length(uv-vec2(0.,1.))-(0.5+thick))*sharp,0.,1.);\n    return x;\n}\nfloat tile_2(vec2 uv){\n    float x = clamp((1.-length(uv-vec2(1.,1.))-(0.5-thick))*sharp,0.,1.)+clamp((1.-length(uv-vec2(0.,0.))-(0.5-thick))*sharp,0.,1.);\n    x -= clamp((1.-length(uv-vec2(1.,1.))-(0.5+thick))*sharp,0.,1.)+clamp((1.-length(uv-vec2(0.,0.))-(0.5+thick))*sharp,0.,1.);\n    return x;\n}\n//The right triangle tiles\nfloat tile_3(vec2 uv) {\n    float a = manhattan(uv)*0.5;\n    a = ((a-0.5)*sharp2)+0.5;\n    return clamp(a,0.,1.);\n}\nfloat tile_4(vec2 uv) {\n    float a = manhattan(vec2(1.-uv.x,uv.y))*0.5;\n    a = ((a-0.5)*sharp2)+0.5;\n    return clamp(a,0.,1.);\n}\n//------------------------------------------------------------------------------------------------------------------\nfloat draw_tiles(vec2 uv,float seed) {\n    if (floor(rand(floor(uv)+(seed/0.12))+0.5) == 0.) {\n        return tile_1(fract(uv));\n    } else {\n        return tile_2(fract(uv));\n    }\n}\nfloat draw_tiles2(vec2 uv,float seed) {\n    float random_tile = floor(rand(floor(uv)+(seed/0.12))*4.);\n    if (random_tile == 0.) {\n        return tile_3(fract(uv));\n    }\n    if (random_tile == 1.) {\n        return tile_4(fract(uv));\n    }\n    if (random_tile == 2.) {\n        return 1.-tile_3(fract(uv));\n    }\n    if (random_tile == 3.) {\n        return 1.-tile_4(fract(uv));\n    }\n    return 0.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = iTime;\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 suv = vec2(((uv.x-0.5)*(iResolution.x / iResolution.y))+0.5,uv.y);\n    \n    vec2 warped_uv = ((suv-0.5)*(uv_size+(sin(time+uv.x)*2.)))+0.5;\n    \n    //Change colors right here!\n    vec3 COLOR_B = vec3(0.5,0.1,0.0);\n\tvec3 COLOR_F = vec3(1.,0.8,0.1);\n    //-------------------------\n    float draw = draw_tiles(warped_uv,random_seed);\n    if (mode == 2) {\n    draw = draw_tiles2(warped_uv,random_seed);\n    }\n\tfragColor = vec4(mix(COLOR_B,COLOR_F,draw),1.0);\n}","name":"","description":"","type":"image"}]}