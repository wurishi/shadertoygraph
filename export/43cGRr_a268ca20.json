{"ver":"0.1","info":{"id":"43cGRr","date":"1715962077","viewed":85,"name":"Gravity field representation","username":"neuneutrinos","description":"First attempt to draw intensity of gravity field","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["gravity"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//TODO add circle to represent astres\n\nstruct Astre\n{\n vec3 location;\n float intensity;\n};\n\nconst int NB_ASTRE=3;\nAstre astres[NB_ASTRE] = Astre[NB_ASTRE]\n(\n    Astre(vec3(0.,0.,1.0),500.0),\n    Astre(vec3(0.,8.,0.),100.0),\n    Astre(vec3(-8.,0.,0.),200.0)\n);\n\nstruct Plan\n{\n vec3 loc00;\n vec3 loc01;\n vec3 loc10;\n vec3 loc11;\n};\n\nPlan plan=Plan(\n    vec3(0.,0.,0.),\n    vec3(0.,10.,0.),\n    vec3(10.,0.,0.),\n    vec3(10.,10.,0.)\n);\n\nvec3 toVec3(vec2 coord)\n{\n    return mix(mix(plan.loc00,plan.loc10,coord.x),mix(plan.loc01,plan.loc11,coord.x),coord.y);\n}\n\nvec3 computeGravity(Astre astre,vec3 loc)\n{\n    vec3 v=astre.location-loc;\n    return v*astre.intensity/dot(v,v);\n}\n\nvec3 computeAllGravity(vec3 loc)\n{\n    vec3 v=vec3(0.,0.,0.);\n    for(int i=0;i<NB_ASTRE;++i)\n    {\n        v+=computeGravity(astres[i],loc);\n    }\n    return v;\n}\n\nvec3 getColorPalette(float value,vec2 minMax,float subDiv)\n{\n    value = clamp((value-minMax.x)/(minMax.y-minMax.x),0.,1.);\n    value*=floor(value*subDiv)/subDiv;\n    return vec3(value,value,value);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv=(fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    astres[0].location.x+=5.*sin(iTime);\n    astres[0].location.y+=4.*cos(iTime);\n    \n    vec3 loc=toVec3(uv);\n    vec3 v  =computeAllGravity(loc);\n    float value=length(v);\n\n    vec3 col = getColorPalette(value,vec2(20.,200.0),10.0);\n\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}