{"ver":"0.1","info":{"id":"XttcWX","date":"1534393973","viewed":197,"name":"zktest3","username":"zk","description":"zktest3","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n\nA quick experiment with rain drop ripples.\n\nThis effect was written for and used in the launch scene of the\n64kB intro \"H - Immersion\", by Ctrl-Alt-Test.\n\n > http://www.ctrl-alt-test.fr/productions/h-immersion/\n > https://www.youtube.com/watch?v=27PN1SsXbjM\n\n-- \nZavie / Ctrl-Alt-Test\n\n*/\n\n// Maximum number of cells a ripple can cross.\n#define MAX_RADIUS 2\n\n// Set to 1 to hash twice. Slower, but less patterns.\n#define DOUBLE_HASH 0\n\n// Hash functions shamefully stolen from:\n// https://www.shadertoy.com/view/4djSRW\n#define HASHSCALE1 .1031\n#define HASHSCALE3 vec3(.1031, .1030, .0973)\n\n\n\n#define S(a, b, t) smoothstep(a, b, t)\n#define sat(x) clamp(x, 0., 1.)\n#define HEARTCOL vec3(1., .01, .01)\n#define NUM_HEARTS 50.\n#define LIGHT_DIR vec3(.577, -.577, -.577)\n\n// Polynomial smooth max from IQ\nfloat smax( float a, float b, float k ) {\n\tfloat h = sat( .5 + .5*(b-a)/k );\n\treturn mix( a, b, h ) + k*h*(1.-h);\n}\n\n\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat Cicle(vec2 uv,vec2 p, float r,float blur){\n    float d = length(uv - p);\n    float c = smoothstep(r,r-blur,d);\n    return c;\n}\n\nfloat Heart(vec2 uv, float b) {\n\tuv.x*=.5;\n    float shape = smax(sqrt(abs(uv.x)), b, .3*b)*.5;\n    uv.y -= shape*(1.-b);\n\n    return S(b, -b, length(uv)-.5);\n}\n\n\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * HASHSCALE3);\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 color = texture(iChannel0, uv).rgb;\n    uv -= 0.5;\n    //uv.x *= iResolution.x/iResolution.y;\n\n    float mask = Heart(uv*1.3, 0.1);//Cicle(uv,vec2(0.0,0.0),.45,.01);\n    vec3 colorMask = vec3(1.0,1.0,1.0);\n    vec3 ret = mix(colorMask*mask,color, smoothstep(.4,.41,mask));\n\tfragColor = vec4(ret, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}