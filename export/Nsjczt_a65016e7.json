{"ver":"0.1","info":{"id":"Nsjczt","date":"1643953346","viewed":756,"name":"Hilbert/R1 multiple spp","username":"matte","description":"Testing methods for using an R1 sequence driven by a Hilbert curve index, with multiple samples per pixel. Least variance is using a continuous sequence that runs through pixels along the hilbert curve, eg.\nPixel 0 (index 1-10) -> Pixel 1 (index 11-20) ","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["random","sampling","hilbert","r1"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2022 Matt Ebb\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// Modified version of https://www.shadertoy.com/view/WldXR4\n// by TinyTexel\n// License: CC0 (https://creativecommons.org/publicdomain/zero/1.0/)\n\nuint hilbert_idx(uvec2 uv, uint offset)\n{\n    // Hilbert curve:\n    uint C = 0xB4361E9Cu;// cost lookup\n    uint P = 0xEC7A9107u;// pattern lookup\n    \n    uv += uint(offset) * uvec2(2447445397u, 3242174893u);\n    \n    uint c = 0u;// accumulated cost\n    uint p = 0u;// current pattern\n\n    const uint N = 7u;// tile size = 2^N\n    for(uint i = N; --i < N;)\n    {\n        uvec2 m = (uv >> i) & 1u;// local uv\n        uint n = m.x ^ (m.y << 1u);// linearized local uv\n        uint o = (p << 3u) ^ (n << 1u);// offset into lookup tables\n        c += ((C >> o) & 3u) << (i << 1u);// accu cost (scaled by layer)\n        p = (P >> o) & 3u;// update pattern\n    }\n    \n    return c;\n}\n\nfloat hash( uvec2 x )\n{\n    uvec2 q = 1103515245U * ( (x>>1U) ^ (x.yx   ) );\n    uint  n = 1103515245U * ( (q.x  ) ^ (q.y>>3U) );\n    return float(n) * (1.0/float(0xffffffffU));\n}\n\n// see  http://extremelearning.com.au/unreasonable-effectiveness-of-quasirandom-sequences/\nfloat sample_R1(uint i) {\n    const uint r  = 2654435761u; // prime[(2^32-1) / phi_1  ]\n    \n    // fibonacci hashing (aka 1d Roberts):\n    // 2^32-1 = 4294967295\n    return float(i * r) * (1.0 / 4294967295.0);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 pcol = vec3(0.0);\n\n    // cycle through 1-30 pixel samples,\n    // incrementing each second\n    uint pixel_samples = 1u + uint(mod(iTime, 30.0));\n    \n    for (uint p=0u; p<pixel_samples; p++) {\n        vec3 col = vec3(0.0);\n    \n        float u;\n        \n        // TOP LEFT\n        if (uv.x < 0.5 && uv.y > 0.5) {\n            // just random\n            u = hash(uvec2(fragCoord) + p * uvec2(2447445397u, 3242174893u));\n        }\n        \n        // TOP RIGHT\n        else if (uv.x > 0.5 && uv.y > 0.5) {\n        \n            // R1 sequence, with 2D hilbert curve pixel index\n            // offsetting hilbert pattern in uv space per sample\n            uint h = hilbert_idx(uvec2(fragCoord), p);\n            u = sample_R1( h );\n        }\n        \n        // BOTTOM LEFT\n        else if (uv.x < 0.5 && uv.y < 0.5) {\n        \n            // R1 sequence, with 2D hilbert curve pixel index\n            // offsetting hilbert pattern index each pixel\n            // starting offset from 0 each time\n            uint h = hilbert_idx(uvec2(fragCoord), 0u);\n            u = sample_R1( h+p );\n        }\n        \n        // BOTTOM RIGHT\n        else if (uv.x > 0.5 && uv.y < 0.5) {\n        \n            // R1 sequence, with 2D hilbert curve pixel index\n            // offsetting hilbert pattern index continuously,\n            // so adjacent pixels continue R1 sequence without breaks\n            uint h = hilbert_idx(uvec2(fragCoord), 1u);\n            u = sample_R1( h*pixel_samples+p );\n        }\n        \n\n#if 0\n        // colour version\n        col[ int(u*3.0) ] = 1.0;\n#else    \n        // greyscale verision\n        col = vec3(u);\n#endif\n\n        pcol += col;\n    }\n    pcol /= float(pixel_samples);\n    \n    // Output to screen\n    fragColor = vec4(pcol,1.0);\n}","name":"Image","description":"","type":"image"}]}