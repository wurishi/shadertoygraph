{"ver":"0.1","info":{"id":"lsKcRV","date":"1522694906","viewed":88,"name":"PerlinNoiseTexture","username":"AlejandroMolinaQuesada","description":"Texture with perlin noise.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat NoiseInterpolation(in vec2 i_coord, in float i_size){\n    vec2 grid = i_coord * i_size;\n    vec2 randomInput = floor(grid);\n    vec2 weights = fract(grid);\n    \n    float p0 = rand(randomInput);\n    float p1 = rand(randomInput + vec2(1.0, 0.0));\n    float p2 = rand(randomInput + vec2(0.0, 1.0));\n    float p3 = rand(randomInput + vec2(1.0));\n    weights = smoothstep(vec2(0.0), vec2(1.0), weights);\n    \n    return p0 + (p1-p0)*weights.x + (p2-p0) * weights.y * (1.0-weights.x) + (p3-p1) * (weights.y*weights.x); \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    //Noise loop\n    float scale = 10.0;\n    float amplitude = 0.5;\n    float frecuency = 1.0;\n    int octaves = 8;\n    float noiseValue = 0.0;\n    \n    for(int i=0; i<octaves; i++){\n        noiseValue += NoiseInterpolation(uv, scale*frecuency) * amplitude;\n        amplitude /= 2.0;\n        frecuency *= 2.0;\n    }\n    \n    fragColor = vec4(vec3(noiseValue), 1.0);\n}","name":"Image","description":"","type":"image"}]}