{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"const float PI = 3.14159265358979323846264;\nconst float MaxSteps = 128.0;\nconst float Epsilon = 0.0001;\n\nfloat distanceToSphere(vec3 p, vec3 o, float r) {\n\treturn length(o - p) - r;\n}\n\nfloat distanceFromPlane(vec3 p, vec3 n, float d) {\n\treturn dot(p, n) - d;\n}\n\n\nfloat mixDistanceField(vec3 p, float d1, float d2) {\n\tfloat b = smoothstep(length(p), 0.0, 1.0);\n\treturn mix(d1, d2, b);\n}\n\nfloat distanceFromDistanceField(vec3 p) {\n\t// Construct our distance field\n\t\n\t// Rotation and position calculation for the\n\t// orbiting sphere\n\tfloat orbitDistance = 14.0;\n\tfloat lsxa = cos(2.0 * PI * (iTime * 0.20));\n\tfloat lsza = sin(2.0 * PI * (iTime * 0.20));\n\tvec3 lspos = vec3(.0 + (lsxa * orbitDistance), 0.0, 30.0 + (lsza * orbitDistance));\n\t\n\t// in order to combine the distance fields of each object\n\t// we need to figure out the minimum distance of all fields\n\treturn min(distanceFromPlane(p, vec3(0, 1, 0), -5.0),\n\t\tmin(distanceToSphere(p, lspos, 3.0),\n\t\t\tdistanceToSphere(p, vec3(0, 0, 30), 10.0)));\t\t\t\t\n}\n\n\n\nfloat distanceStep(vec3 o, vec3 dir) {\n\t// Marches the ray\n\tfloat d = 0.0;\n\tfor (float i = 0.0; i < MaxSteps; i++) {\n\t\td = distanceFromDistanceField(o);\n\t\tif (d <= Epsilon) {\n\t\t\treturn i / MaxSteps;\n\t\t\t\n\t\t}\n\t\to += (dir * d);\t\t\n\t}\n\treturn MaxSteps;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec3 p = vec3(0,0,0);\n\t\t\n\t// Aspect ratio\n\tfloat ar = iResolution.x / iResolution.y;\n\t\n\t// Calculate our direction vector based of\n\t// frag coordinate.\n\tvec2 transPoint = vec2(\n\t\t(((fragCoord.x / iResolution.x) - 0.5) * ar),\n\t\t(fragCoord.y / iResolution.y) - 0.5);\n    \n\tvec3 dir = normalize(vec3(transPoint, 1));\n\t\n\t// Sends out the ray\n\tfloat pos = 1.0 - distanceStep(p, dir);\n    \n\t// Colour the result\n\tfragColor = vec4(pos, pos, pos, 1.0);\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4dXSWB","date":"1406118893","viewed":194,"name":"DistanceFieldToy","username":"Sekhat","description":"Just playing around with rendering procedurally generated distance fields using ray-marching.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["3d","distancefield","procedual"],"hasliked":0,"parentid":"","parentname":""}}