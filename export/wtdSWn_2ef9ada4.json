{"ver":"0.1","info":{"id":"wtdSWn","date":"1580844744","viewed":361,"name":"My Curl Noise","username":"DonKarlssonSan","description":"curl","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["noise","curl"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Simplex 2D noise\n// from https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83\nvec3 permute(vec3 x) { return mod(((x*34.0)+1.0)*x, 289.0); }\n\nfloat snoise(vec2 v){\n  const vec4 C = vec4(0.211324865405187, 0.366025403784439,\n           -0.577350269189626, 0.024390243902439);\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n  vec2 i1;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n  i = mod(i, 289.0);\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n  + i.x + vec3(0.0, i1.x, 1.0 ));\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy),\n    dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\n\n//\tSimplex 3D Noise \n//\tby Ian McEwan, Ashima Arts\n//\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\n\nfloat snoise(vec3 v){ \n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n  // First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n  // Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //  x0 = x0 - 0. + 0.0 * C \n  vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n  vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n  vec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n  // Permutations\n  i = mod(i, 289.0 ); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n  // Gradients\n  // ( N*N points uniformly over a square, mapped onto an octahedron.)\n  float n_ = 1.0/7.0; // N=7\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z *ns.z);  //  mod(p,N*N)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n  //Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n  // Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n}\n\n\nvec2 curl(vec2 source)\n{\n\tfloat eps = 1.0; \n    float n1, n2, a, b;\n    \n\tn1 = snoise(source + vec2(0, eps)); \n    n2 = snoise(source - vec2(0, eps)); \n    a = (n1 - n2)/(2.0 * eps);\n    \n\tn1 = snoise(source + vec2(eps, 0)); \n    n2 = snoise(source - vec2(eps, 0)); \n    b = (n1 - n2)/(2.0 * eps);\n    \n\tvec2 curl = vec2(a, -b); \n    \n    return curl;\n}\n\nvec3 curl3(float x, float y, float z) {\n\tfloat eps = 1.0; \n    float n1, n2, a, b; \n    vec3 curl;\n    \n\tn1 = snoise(vec3(x, y + eps, z)); \n    n2 = snoise(vec3(x, y - eps, z)); \n    a = (n1 - n2)/(2.0 * eps);\n\tn1 = snoise(vec3(x, y, z + eps)); \n    n2 = snoise(vec3(x, y, z - eps)); \n    b = (n1 - n2)/(2.0 * eps);\n\tcurl.x = a - b;\n    \n\tn1 = snoise(vec3(x, y, z + eps)); \n    n2 = snoise(vec3(x, y, z - eps)); \n    a = (n1 - n2)/(2.0 * eps);\n\tn1 = snoise(vec3(x + eps, y, z)); \n    n2 = snoise(vec3(x + eps, y, z)); \n    b = (n1 - n2)/(2.0 * eps);\n\tcurl.y = a - b;\n    \n\tn1 = snoise(vec3(x + eps, y, z)); \n    n2 = snoise(vec3(x - eps, y, z)); \n    a = (n1 - n2)/(2.0 * eps);\n\tn1 = snoise(vec3(x, y + eps, z)); \n    n2 = snoise(vec3(x, y - eps, z)); \n    b = (n1 - n2)/(2.0 * eps);\n\tcurl.z = a - b; \n    \n    return curl;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.y;\n\n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    //uv += sin(iTime / 10.0);\n    float x = snoise(uv * 2.0);\n    float y = snoise(uv * 3.0 + 1000.0);\n    float z = snoise(uv * 5.0 + 8000.0);\n     \n\tvec3 c = curl3(x + iTime / 10.0, y + iTime / 10.0, z + iTime / 10.0);\n\t//vec2 c = curl(vec2(uv.x + iTime / 10.0, uv.y - iTime / 10.0));\n\t\n    fragColor = vec4(c.x, c.y, c.z, 1.0);\n \n}","name":"Image","description":"","type":"image"}]}