{"ver":"0.1","info":{"id":"wdGBRD","date":"1606668604","viewed":95,"name":"SchlickBias","username":"antonOTI","description":"from this paper\nhttps://arxiv.org/abs/2010.09714\n\nfound thanks to this tweet\nhttps://twitter.com/jon_barron/status/1318946131078909952","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["curve","bias"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float SchlickBias(float x, float s, float t)\n{\n\tfloat tx = t - x;\n\tfloat eps = .00001;\n\tif (x < t)\n\t{\n\t\treturn t * x / (x + s * tx + eps);\n\t}\n\telse\n\t{\n\t\treturn (1. - t) * (x - 1.) / (1. - x - s * tx + eps) + 1.;\n\t}\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.y;\n\n    float x = clamp(uv.x, 0., 1.);\n    \n    vec2 mouse = clamp(iMouse.xy / iResolution.y, 0., 1.);\n    if(mouse.x == 0. && mouse.y == 0.)\n    {\n        mouse.x = mouse.y = .5;\n    }\n    \n    float s = mouse.x * 60.;\n    float t = mouse.y;\n    \n    float fx = SchlickBias(x, s, t);\n    \n    float line = uv.y - fx;\n\n    // Output to screen\n    fragColor = vec4(0.);\n    if(uv.x <= 1.)\n    {\n    \tfragColor = vec4( 1.5 - abs(line) / fwidth(line) );\n    }\n    \n    fragColor = clamp(fragColor, 0., 1.);\n    fragColor += PrintInt(uv * 10. - vec2(10., 6.) , s);\n    fragColor += PrintInt(uv * 10. - vec2(10., 4.) , t* 1000.);\n    fragColor += step(max(abs(uv.x - 1.07) , abs(uv.y - .363)), .013);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Digit drawing function by P_Malin (https://www.shadertoy.com/view/4sf3RN)\nfloat SampleDigit(in float n, in vec2 vUV)\n{\t\t\n    vUV.y += 0.5;\n\tif(vUV.x  < 0.0) return 0.0;\n\tif(vUV.y  < 0.0) return 0.0;\n\tif(vUV.x >= 1.0) return 0.0;\n\tif(vUV.y >= 1.0) return 0.0;\n\t\n\tfloat data = 0.0;\n\t\n\t     if(n < 0.5) data = 7.0 + 5.0*16.0 + 5.0*256.0 + 5.0*4096.0 + 7.0*65536.0;\n\telse if(n < 1.5) data = 2.0 + 2.0*16.0 + 2.0*256.0 + 2.0*4096.0 + 2.0*65536.0;\n\telse if(n < 2.5) data = 7.0 + 1.0*16.0 + 7.0*256.0 + 4.0*4096.0 + 7.0*65536.0;\n\telse if(n < 3.5) data = 7.0 + 4.0*16.0 + 7.0*256.0 + 4.0*4096.0 + 7.0*65536.0;\n\telse if(n < 4.5) data = 4.0 + 7.0*16.0 + 5.0*256.0 + 1.0*4096.0 + 1.0*65536.0;\n\telse if(n < 5.5) data = 7.0 + 4.0*16.0 + 7.0*256.0 + 1.0*4096.0 + 7.0*65536.0;\n\telse if(n < 6.5) data = 7.0 + 5.0*16.0 + 7.0*256.0 + 1.0*4096.0 + 7.0*65536.0;\n\telse if(n < 7.5) data = 4.0 + 4.0*16.0 + 4.0*256.0 + 4.0*4096.0 + 7.0*65536.0;\n\telse if(n < 8.5) data = 7.0 + 5.0*16.0 + 7.0*256.0 + 5.0*4096.0 + 7.0*65536.0;\n\telse if(n < 9.5) data = 7.0 + 4.0*16.0 + 7.0*256.0 + 5.0*4096.0 + 7.0*65536.0;\n\t\n\tvec2 vPixel = floor(vUV * vec2(4.0, 5.0));\n\tfloat fIndex = vPixel.x + (vPixel.y * 4.0);\n\t\n\treturn mod(floor(data / pow(2.0, fIndex)), 2.0);\n}\n\nfloat PrintInt(in vec2 uv, in float value )\n{\n\tfloat res = 0.0;\n\tfloat maxDigits = 1.0+ceil(log2(value)/log2(10.0));\n\tfloat digitID = floor(uv.x);\n\tif( digitID>0.0 && digitID<maxDigits )\n\t{\n        float digitVa = mod( floor( value/pow(10.0,maxDigits-1.0-digitID) ), 10.0 );\n        res = SampleDigit( digitVa, vec2(fract(uv.x), uv.y) );\n\t}\n\n\treturn res;\t\n}","name":"Common","description":"","type":"common"}]}