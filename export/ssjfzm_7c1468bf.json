{"ver":"0.1","info":{"id":"ssjfzm","date":"1646418299","viewed":122,"name":"Fork Embroidered rug 3","username":"Orm","description":"playing around with jarbles shader.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fractal","rug"],"hasliked":0,"parentid":"ssBfzm","parentname":"Embroidered rug 3"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//V1-V8\n#define V8\n\n#ifdef V1\n//change these constants to get different patterns!\n#define iterations 4\n#define modulo 30\n\n//#define c1 vec3(1.,0.5,1.5)\n#define c1 vec3(sin(iTime*0.03)+2.1, sin(iTime*0.012)+1.1, sin(iTime*.01)+1.1) \n\nvec2 triangle_wave(vec2 a,float scale){\n\n    return abs(fract((a+log(c1.xy))*scale)-.5);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    vec3 col = vec3(0.);\n    float t1 = 4.;\n    vec2 uv = (fragCoord)/iResolution.y/t1/2.0;\n    //uv += vec2(iTime/2.0,iTime/3.0)/t1/1.0;\n    float scale = c1.x;\n    vec2 t2 = vec2(0.);\n    vec2 t3 = vec2(0.);   \n    for(int k = 0; k < 6*iterations; k++){\n        uv -= (t2.yx)/(scale)/float(k^modulo);\n        t2 = triangle_wave(uv.yx-sin(iTime*0.01),scale);\n        //uv = min(uv,t2);\n        t3 = -triangle_wave(uv,scale*2.0);\n        //t3 /= float(1+k%3);\n        uv.yx = -(t2+t3);\n        col.x = abs((+uv.y+uv.x));\n        //col.x = 1.-abs(uv.y+uv.x-col.x);\n        col = col.yzx;\n        uv /= scale*1.7;\n        //uv *= (t2.y-t2.x+1.);\n    }\n    fragColor = vec4(pow(col,vec3(.5)),1.0);\n}\n#endif\n#ifdef V2\n//change these constants to get different patterns!\n#define iterations 4\n#define modulo 30\n\n\n#define c1 vec3(1.,0.5,1.5)\n\nvec2 triangle_wave(vec2 a,float scale){\n    return abs(fract((a+log(c1.xy))*scale)-.5);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    vec3 col = vec3(0.);\n    float t1 = 4.;\n    vec2 uv = (fragCoord)/iResolution.y/t1/2.0;\n    //uv += vec2(iTime/2.0,iTime/3.0)/t1/1.0;\n    float scale = c1.x;\n    vec2 t2 = vec2(0.);\n    vec2 t3 = vec2(0.);   \n    for(int k = 0; k < 7*iterations; k++){\n        uv -= (t2.yx)/(scale)/float(k^modulo);\n        t2 = triangle_wave(uv.yx-sin(iTime*0.01),scale);\n        //uv = min(uv,t2);\n        t3 = -triangle_wave(uv,scale*2.+sin(iTime*0.21)*.2);\n        //t3 /= float(1+k%3);\n        uv.yx = -(t2+t3);\n        col.x = .9-abs((+uv.y+uv.x));\n        //col.x = 1.-abs(uv.y+uv.x-col.x);\n        col = col.yzx;\n        uv /= scale*1.7;\n        //uv *= (t2.y-t2.x+1.);\n    }\n    fragColor = vec4(col,1.0);\n}\n#endif\n\n#ifdef V3\n//change these constants to get different patterns!\n#define iterations 4\n#define modulo 30\n\n\n#define c1 vec3(1.,0.5,1.5)\n\nvec2 triangle_wave(vec2 a,float scale){\n    return abs(fract((sin(iTime*.2)*.1+a+log(c1.xy))*log(scale*3.8))-.5);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    vec3 col = vec3(0.);\n    float t1 = 3.;\n    vec2 uv = (fragCoord)/iResolution.y/t1/2.0;\n    //uv += vec2(iTime/2.0,iTime/3.0)/t1/1.0;\n    float scale = c1.x;\n    vec2 t2 = vec2(0.);\n    vec2 t3 = vec2(0.);   \n    for(int k = 0; k < 5*iterations; k++){\n        uv -= (t2.yx)/(scale)/float(k^modulo);\n        t2 = triangle_wave(uv.yx-sin(iTime*0.01),scale);\n        //uv = min(uv,t2);\n        t3 = -triangle_wave(uv,scale*2.0);\n        //t3 /= float(1+k%3);\n        uv.yx = -(t2+t3);\n        col.x = .9-abs((+uv.y+uv.x));\n        //col.x = 1.-abs(uv.y+uv.x-col.x);\n        col = col.yzx;\n        uv /= scale*1.7;\n        //uv *= (t2.y-t2.x+1.);\n    }\n    fragColor = vec4(col,1.0);\n}\n#endif\n\n#ifdef V4\n//change these constants to get different patterns!\n#define iterations 20\n#define modulo 40\n\n\n#define c1 vec3(1.,0.5,1.5)\n\nvec2 triangle_wave(vec2 a,float scale){\n    return abs(fract((sin(iTime*.2)*.1+a+log(c1.xy))*log(scale*3.2))-.5);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    vec3 col = vec3(0.);\n    float t1 = 2.;\n    vec2 uv = (fragCoord)/iResolution.y/t1/2.0;\n    //uv += vec2(iTime/2.0,iTime/3.0)/t1/1.0;\n    float scale = c1.x;\n    vec2 t2 = vec2(0.);\n    vec2 t3 = vec2(0.);   \n    for(int k = 0; k < iterations; k++){\n        uv -= (t2.yx)/(scale)/float(k^modulo);\n        t2 = triangle_wave(uv.yx-sin(iTime*0.01),scale);\n        //uv = min(uv,t2);\n        t3 = -triangle_wave(uv,scale*2.0);\n        //t3 /= float(1+k%3);\n        uv.yx = -(t2+t3);\n        col.x = 1.5*abs((+uv.y+uv.x));\n        //col.x = 1.-abs(uv.y+uv.x-col.x);\n        col = col.yzx;\n        uv /= scale*1.7;\n        //uv *= (t2.y-t2.x+1.);\n    }\n    fragColor = vec4(col,1.0);\n}\n#endif\n\n#ifdef V5\n//change these constants to get different patterns!\n#define iterations 20\n#define modulo 40\n\n\n#define c1 vec3(1.,0.5,1.5)\n\nvec2 triangle_wave(vec2 a,float scale){\n    return abs(fract((sin(iTime*.2)*.1+a+log(c1.xy))*log(scale*3.2))-.5);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    vec3 col = vec3(0.);\n    float t1 = 2.;\n    vec2 uv = (fragCoord)/iResolution.y/t1/2.0;\n    //uv += vec2(iTime/2.0,iTime/3.0)/t1/1.0;\n    float scale = c1.x;\n    vec2 t2 = vec2(0.);\n    vec2 t3 = vec2(0.);   \n    for(int k = 0; k < iterations; k++){\n        uv -= (t2.yx)/(scale)/float(k^modulo);\n        t2 = triangle_wave(uv.yx+sin(iTime*.02),scale*(sin(iTime*.32)*0.1)+0.75);\n        //uv = min(uv,t2);\n        t3 = -triangle_wave(uv,scale*sin(iTime*.03)*0.4+2.3);\n        //t3 /= float(1+k%3);\n        uv.yx = -(t2+t3);\n        col.x = 1.5*abs((+uv.y+uv.x));\n        //col.x = 1.-abs(uv.y+uv.x-col.x);\n        col = col.yzx;\n        uv /= scale*1.7;\n        //uv *= (t2.y-t2.x+1.);\n    }\n    fragColor = vec4(col,1.0);\n}\n#endif\n\n#ifdef V6\n//change these constants to get different patterns!\n#define iterations 20\n#define modulo 40\n\n\n#define c1 vec3(1.,0.5,1.5)\n\nvec2 triangle_wave(vec2 a,float scale){\n    return abs(fract((sin(iTime*.2)*.1+a+log(c1.xy))*log(scale*3.2))-.5);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    vec3 col = vec3(0.);\n    float t1 = 2.;\n    vec2 uv = (fragCoord)/iResolution.y/t1/2.0;\n    //uv += vec2(iTime/2.0,iTime/3.0)/t1/1.0;\n    float scale = c1.x;\n    vec2 t2 = vec2(0.);\n    vec2 t3 = vec2(0.);   \n    for(int k = 0; k < iterations; k++){\n        uv -= (t2.yx)/(scale)/float(k^modulo);\n        float tr = (sin(iTime*.01)*.3)+.6;\n        t2 = triangle_wave(uv.yx+sin(iTime*.02),scale*(tr)+0.3);\n        //uv = min(uv,t2);\n        t3 = -triangle_wave(uv,scale*sin(iTime*.03)*0.4+2.3);\n        //t3 /= float(1+k%3);\n        uv.yx = -(t2+t3);\n        col.x = 1.5*abs((+uv.y+uv.x));\n        //col.x = 1.-abs(uv.y+uv.x-col.x);\n        col = col.yzx;\n        uv /= scale*1.7;\n        //uv *= (t2.y-t2.x+1.);\n    }\n    fragColor = vec4(col,1.0);\n}\n#endif\n\n#ifdef V7\n//change these constants to get different patterns!\n#define iterations 4\n#define modulo 50\n\n\n#define c1 vec3(1.,0.5,1.5)\n\nvec2 triangle_wave(vec2 a,float scale){\n    return abs(fract((a+log(c1.xy))*scale)-.5);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    vec3 col = vec3(0.);\n    float t1 = 4.;\n    vec2 uv = (fragCoord)/iResolution.y/t1/2.0;\n    //uv += vec2(iTime/2.0,iTime/3.0)/t1/1.0;\n    float scale = c1.x;\n    vec2 t2 = vec2(0.);\n    vec2 t3 = vec2(0.);   \n    for(int k = 0; k < 6*iterations; k++){\n        uv -= (t2.yx)/(scale)/float(k^modulo);\n        t2 = triangle_wave(uv.yx-sin(iTime*0.01),scale);\n        //uv = min(uv,t2);\n        t3 = -triangle_wave(uv,scale*2.2);\n        //t3 /= float(1+k%3);\n        uv.yx = -(t2+t3);\n        col.x = .7-abs((+uv.y+uv.x));\n        //col.x = 1.-abs(uv.y+uv.x-col.x);\n        col = col.yzx;\n        uv /= scale*1.7+sin(iTime*.46)*0.1;\n        //uv *= (t2.y-t2.x+1.);\n    }\n    fragColor = vec4(col,1.0);\n}\n#endif\n#ifdef V8\n//change these constants to get different patterns!\n#define iterations 5\n#define modulo 30\n\n//#define c1 vec3(1.,0.5,1.5)\n//#define c1 vec3(sin(iTime*.03)*1.+2.1, sin(iTime*0.012)+1.1, sin(iTime*.005)+1.1) \n//#define c1 vec3(sin(iTime*.03)*.1+2.1, sin(iTime*0.012)+1.1, sin(iTime*.005)+1.1) \n#define c1 vec3(sin(iTime*.013)*.6+2., sin(iTime*0.012)+1.1, sin(iTime*.005)+1.1) \n\nvec2 triangle_wave(vec2 a,float scale){\n\n    return abs(fract((a-(c1.xy*0.1))*scale)-.5);\n}\n\nvec2 hash2( float n ) { return fract(sin(vec2(n,n+1.0))*vec2(43758.5453123,22578.1459123)); }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    vec3 col = vec3(0.);\n    int iter= 4;\n    vec3 res = vec3(0.);\n    for(int i = 0; i<iter; ++i){\n\n        float t1 = 4.;\n        vec2 r = hash2(fragCoord.x+fragCoord.y+iTime+float(i));\n        vec2 uv = (fragCoord+r)/iResolution.y/t1/2.0;\n        //uv += vec2(iTime/2.0,iTime/3.0)/t1/1.0;\n        float scale = c1.x;\n        vec2 t2 = vec2(0.);\n        vec2 t3 = vec2(0.);   \n\n        for(int k = 0; k < 6*iterations; k++){\n            uv -= (t2.yx)/(scale)/float(k^modulo);\n            t2 = triangle_wave(uv.yx-sin(iTime*0.005),scale);\n            //uv = min(uv,t2);\n            t3 = -triangle_wave(uv,scale*2.0);\n            //t3 /= float(1+k%3);\n            uv.yx = -(t2+t3);\n            col.x = abs(uv.y+uv.x);\n            //col.x = 1.-abs(uv.y+uv.x-col.x);\n            col = col.yzx;\n            uv /= scale*1.68;\n            //uv *= (t2.y-t2.x+1.);\n        }\n        res += col;\n    }\n    res/=float(iter);\n\n    fragColor = vec4(pow(res,vec3(.5)),1.0);\n}\n#endif","name":"Image","description":"","type":"image"}]}