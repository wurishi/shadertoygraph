{"ver":"0.1","info":{"id":"mlfSRH","date":"1674257626","viewed":79,"name":"Snowy ride","username":"ianertson","description":"A snowy ride","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarching","raymarching","ray","snow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rr","filepath":"/media/a/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin","previewfilepath":"/media/ap/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin","type":"volume","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define STEPS 100\n#define NEAR 0.02\n#define FAR 300.0\n\n#define SNOW_STEPS 24.\n#define SNOW_STEPSIZE 0.16\n\n\n#define TAU 6.283185\n#define ONE(g) clamp(g, 0.0, 1.0)\n#define T (iTime*0.3)\n\n\nvec3 snow(vec2 uv) {\n    vec3 n = texture(iChannel0, uv).rgb;\n    vec3 col = vec3(1.0);\n    return col * n.x;\n}\n\nmat2 rot(float a) {\n    float s = sin(a); \n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\nstruct Data {\n    vec3 point;\n    vec3 normal;\n    vec2 uv;\n    float dist;\n};\n\nstruct Light {\n    vec3 pos;\n    vec3 color;\n    float strength;\n};\n\nfloat smin( float a, float b, float k ) {\n    float h = clamp( 0.5+0.5*(b-a)/k, 0., 1. );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat getDistPlane(vec3 p, vec3 normal, vec3 pos) {\n    return dot(p, normal) + length(pos * normal);\n}\n\nfloat getDistSphere(vec3 p, float radius, vec3 pos) {\n    return length(p - pos) - radius;\n}\n\nfloat getDist(vec3 p) {\n    float ground = perlin_get2d(p.xz*1.1, 0.1, 2, 29124);\n    float hills = perlin_get2d(p.xz*1.1, 0.02, 1, 83215);\n    \n    float n = (ground*4.0) + (pow(hills, 3.0)*40.0);\n    p.y += n;\n    \n    float plane = getDistPlane(p, vec3(0, 1, 0), vec3(0, -1.6, 0));\n    return plane / (1.+(n*0.1));\n    \n}\n\n\nvec3 getNormal(vec3 p) {\n    vec2 e = vec2(0.1, 0.0);\n    \n    return normalize(getDist(p) - vec3(\n        getDist(p+e.xyy),\n        getDist(p+e.yxy),\n        getDist(p+e.yyx)\n    ));\n}\n\nvec2 getUv(vec3 p, in Data data) {\n\n    vec3 uv = p / FAR;\n    \n    return (uv.xz);\n}\n\nData getData(vec3 p) {\n    Data data;\n    data.dist = getDist(p);\n    data.normal = getNormal(p);\n    data.uv = getUv(p, data);\n    \n    return data;\n}\n\n\nbool march(vec3 ro, vec3 rd, inout Data data) {\n    float dist = 0.0;\n    \n    float far = FAR;\n    \n    float dotup = max(0.0, dot(rd, vec3(0.0, 1.0, 0.0)));\n    \n    far = max(1.0, far*(1.0 - (dotup*0.9)));\n    \n    for (int i = 0; i < STEPS; i++) {\n        vec3 p = ro+rd*dist;\n        data = getData(p);\n        dist += data.dist;\n        \n        if (abs(data.dist) <= NEAR || abs(dist) >= far) break;\n    }\n    \n    data.dist = min(far, dist);\n    data.point = ro+rd*dist;\n    return data.dist < far;\n}\n\nfloat snowSDF(vec3 p, vec3 rd) {\n    p *= 1.6;\n    p.y += T*40.;\n    p.x += T*40.0;\n    vec3 n = texture(iChannel1, p*0.01).xyz;\n    vec3 n2 = texture(iChannel1, (n*p)*0.01).xyz;\n    float scalar = texture(iChannel0, (p.xz+p.y)*0.001).r;\n    \n    n = cross(n, n2);\n    \n    float dp = abs(dot(normalize(p), normalize(n)));\n    dp  *= scalar;\n    \n    return min(FAR, (dp))/max(0.001, 0.01+length(n));\n}\n\nbool marchSnow(vec3 ro, vec3 rd, inout float dist) {\n    dist = 0.0;\n    float count = 0.0;\n    for (float i = 0.; i < SNOW_STEPS; i+= SNOW_STEPSIZE) {\n        count += 1.0;\n        vec3 p = ro+rd*dist;\n        float d = snowSDF(p, rd);\n        dist += d;\n        if (abs(dist) >= FAR) break;\n    }\n    \n    if (count <= 0.0) return false;\n    \n    dist = abs(dist);\n    dist = (dist <= NEAR || dist >= FAR) ? 0.0 : dist/count;\n    \n    return true;//dist > NEAR && dist < FAR;\n}\n\n\n\nvec3 getRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 \n        f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u;\n    return normalize(i);\n}\n\nvec3 render(vec3 ro, vec3 rd, in Light light) {\n    vec3 col = vec3(0.0);\n    Data data;\n    \n   // light.pos.z = ro.z+10.0;\n   \n    vec3 sky = vec3(0.2, 0.5, 0.67);\n    \n    if (march(ro, rd, data)) {\n        vec2 uv = data.uv;\n        float uvScale = 16.0;\n        \n        vec3 albedo = snow(uv*uvScale);//texture(iChannel0, uv*uvScale).rgb;\n        vec3 bump = extractBump(iChannel0, uv*uvScale, data.normal);\n        \n        vec3 normal = bump;\n        \n        float distLight = 7.0;//distance(data.point, light.pos);\n        vec3 L = normalize(vec3(-1.0, -2.0, 3.0));//normalize(data.point - light.pos);\n        float NdotL = max(0.0, dot(normal, L));\n        float att = NdotL * (pow(light.strength, 2.0) / max(0.0001, pow(distLight, 2.0))); \n        \n        col += albedo * att;\n    } else {\n        col += sky;\n    }\n    \n    float dotup = max(0.0, dot(rd, vec3(0.0, 1.0, 0.0)));\n    float depth = max(NEAR, data.dist - NEAR) / FAR;\n    \n    float snowDist = 0.0;\n    \n    if (marchSnow(ro, rd, snowDist)) {\n        col += ONE(vec3(1.0) * snowDist);\n    }\n    \n    col += pow(depth, 2.0) / (M_PI*0.33);\n  //  col = mix(col, sky, dotup*4.0);\n    return col;\n}\n\nvec3 tonemap(vec3 col) {\n    vec3 x = col;\n    vec3 vio = vec3(0.607843, 0.149019, 0.713725);\n    float dotVio = clamp(dot(col, vio), 0.0, 1.0);\n    \n    x = clamp(\n        (x * (2.51 * x + 0.03)) /\n        (x * (2.23 * x + 1.0392) + 0.98),\n    0.0, 1.0);\n   \n    x = saturate(x, dotVio);\n    x = mix(x, pow(x, vec3(2.0)), 0.3491*pow(dotVio, 2.0));\n    x += luma(x)/6.28;\n    x = clamp(x+(x/6.28), 0.0, 1.0);\n    \n    return pow(x, vec3(0.5125));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fc )\n{\n    vec3 col = vec3(0.0);\n    vec2 uv = (fc-0.5*iResolution.xy)/iResolution.x;\n    vec2 m = iMouse.xy/iResolution.xy;\n    \n    vec3 ro = vec3(0.0, 3.0, -20.0);\n    \n    Light light = Light(vec3(1.0, 6.0, -2.0), vec3(1.0), 8.0);\n    vec3 rd = normalize(vec3(uv.xy, 1.0));\n    if (iMouse.z > 0.01) {\n      rd = controller(rd, iMouse, iResolution.xy);\n      \n      //  rd.yz *= rot(-m.y*M_PI+1.0);\n       // rd.xz *= rot(-m.x*TAU);\n      //  ro.y = max(ro.y, 2.5);\n    } else {\n      float ry = iFrame <= 16 ? 0.0 : mix(radians(34.), radians(30.), 1.6*(0.5+(0.5*cos(T*3.0))));\n      vec3 rot = vec3(0.0, ry, 0.0);\n       rd = controller(rd, vec4(rot.xyz, 1.0), vec2(1.0));\n       rd.x += 0.5*sin(T);\n       //ro.xz *= rot(T);\n    }\n    ro.z += iTime*60.0;\n   // rd = getRayDir(uv, ro, vec3(0,0.,0), 1.);\n    rd = normalize(rd);\n    col += render(ro, rd, light);\n   \n    col = tonemap(col);\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define M_PI 3.14159265359\n\nint HASH[256] = int[256](\n    208, 34,  231, 213, 32,  248, 233, 56,  161, 78,  24,  140, 71,  48,  140,\n    254, 245, 255, 247, 247, 40,  185, 248, 251, 245, 28,  124, 204, 204, 76,\n    36,  1,   107, 28,  234, 163, 202, 224, 245, 128, 167, 204, 9,   92,  217,\n    54,  239, 174, 173, 102, 193, 189, 190, 121, 100, 108, 167, 44,  43,  77,\n    180, 204, 8,   81,  70,  223, 11,  38,  24,  254, 210, 210, 177, 32,  81,\n    195, 243, 125, 8,   169, 112, 32,  97,  53,  195, 13,  203, 9,   47,  104,\n    125, 117, 114, 124, 165, 203, 181, 235, 193, 206, 70,  180, 174, 0,   167,\n    181, 41,  164, 30,  116, 127, 198, 245, 146, 87,  224, 149, 206, 57,  4,\n    192, 210, 65,  210, 129, 240, 178, 105, 228, 108, 245, 148, 140, 40,  35,\n    195, 38,  58,  65,  207, 215, 253, 65,  85,  208, 76,  62,  3,   237, 55,\n    89,  232, 50,  217, 64,  244, 157, 199, 121, 252, 90,  17,  212, 203, 149,\n    152, 140, 187, 234, 177, 73,  174, 193, 100, 192, 143, 97,  53,  145, 135,\n    19,  103, 13,  90,  135, 151, 199, 91,  239, 247, 33,  39,  145, 101, 120,\n    99,  3,   186, 86,  99,  41,  237, 203, 111, 79,  220, 135, 158, 42,  30,\n    154, 120, 67,  87,  167, 135, 176, 183, 191, 253, 115, 184, 21,  233, 58,\n    129, 233, 142, 39,  128, 211, 118, 137, 139, 255, 114, 20,  218, 113, 154,\n    27,  127, 246, 250, 1,   8,   198, 250, 209, 92,  222, 173, 21,  88,  102,\n    219);\n\nint noise2(int x, int y, int seed) {\n  int yindex = (y + seed) % 256;\n  if (yindex < 0) yindex += 256;\n  int xindex = (HASH[yindex] + x) % 256;\n  if (xindex < 0) xindex += 256;\n  return HASH[xindex];\n}\n\nfloat lin_inter(float x, float y, float s) {\n  return x + s * (y - x);\n}\n\nfloat smooth_inter(float x, float y, float s) {\n  return lin_inter(x, y, s * s * (3. - 2. * s));\n}\n\nfloat noise2d(float x, float y, int seed) {\n  int x_int = int(floor(x));\n  int y_int = int(floor(y));\n  float x_frac = float(x - float(x_int));\n  float y_frac = y - float(y_int);\n  int s = noise2(x_int, y_int, seed);\n  int t = noise2(x_int + 1, y_int, seed);\n  int u = noise2(x_int, y_int + 1, seed);\n  int v = noise2(x_int + 1, y_int + 1, seed);\n  float low = smooth_inter(float(s), float(t), float(x_frac));\n  float high = smooth_inter(float(u), float(v), float(x_frac));\n  return smooth_inter(float(low), float(high), float(y_frac));\n}\n\nfloat perlin_get2d(vec2 p, float freq, int depth, int seed) {\n  depth = min(depth, 8); // too slow otherwise\n  float xa = p.x * freq;\n  float ya = p.y * freq;\n  float amp = 1.0;\n  float fin = 0.;\n  float div = 0.0;\n  for (int i = 0; i < depth; i++) {\n    div += 256. * amp;\n    fin += noise2d(xa, ya, seed) * amp;\n    amp /= 2.;\n    xa *= 2.;\n    ya *= 2.;\n  }\n  return clamp(fin / div, -1.0, 1.0);\n}\n\nfloat perlin_get2d(vec2 p, float freq, float depth, float seed) {\n  return perlin_get2d(p, freq, int(depth), int(seed));\n}\n\nvec3 perlin_vec3(vec2 p, float freq, int depth, int seed) {\n  float x = perlin_get2d(p, freq, depth, seed);\n  float y = perlin_get2d(p, freq, depth, int(seed+int(freq)));\n  float z = perlin_get2d(p, freq, depth, int(seed+int(ceil(freq))+int(ceil(freq))));\n  \n  return vec3(x, y, z);\n}\n\n\nvec3 extractBump(sampler2D tex, vec2 uv, vec3 normal) {\n    vec3 color = texture(tex, uv).rgb;\n    vec2 texelSize = 1.0 / vec2(textureSize(tex, 0)).xy;\n    vec3 dx = texture(tex, uv + vec2(texelSize.x, 0)).rgb - color;\n    vec3 dy = texture(tex, uv + vec2(0, texelSize.y)).rgb - color;\n    float l = (abs(dy.r - dx.r) + abs(dx.g - dy.g)) / 2.0;\n    vec3 n = normalize(vec3(dy.r - dx.r, dx.g - dy.g, 0.033*0.6));\n    return mix(normal, normalize(normal+n), 0.6);\n}\nvec2 rot2D(vec2 p, float angle) {\n  angle = radians(angle);\n  float s = sin(angle);\n  float c = cos(angle);\n  return p * mat2(c, s, -s, c);\n}\n\n\nvec3 controller(vec3 dir, vec4 c, vec2 res) {\n    vec2 m = ((c.xy == vec2(0.) ? vec2(.5) : (c.xy / res.xy)) * 2. - 1.) * vec2(360.,90.);\n    dir.yz = rot2D(dir.yz, m.y);\n    dir.xz = rot2D(dir.xz, m.x);\n    return normalize(dir);\n}\n\nfloat luma(vec3 color) {\n  return dot(color, vec3(0.299, 0.587, 0.114));\n}\n\nvec3 saturate(vec3 color, float amnt) {\n  float l = color.r * 0.2 + color.g * 0.7 + color.b * 0.1;\n  vec3 gray = vec3(l,l,l);\n  vec3 diff = color.rgb - gray.rgb;\n  diff *= (1.0 + amnt);\n  vec3 saturated = clamp(gray + diff,0.0,1.0);\n  return mix(color, saturated, clamp(amnt, 0.0, 1.0));\n}\n","name":"Common","description":"","type":"common"}]}