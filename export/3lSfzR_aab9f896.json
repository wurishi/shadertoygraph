{"ver":"0.1","info":{"id":"3lSfzR","date":"1598143700","viewed":99,"name":"colored voronoi","username":"soggymongoose","description":"voronoi","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["voronoi"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define scale 10.\n\nfloat random21 (vec2 uv) {\n    return fract(sin(dot(uv,vec2(12.9898,78.233)))*43958.5453123);\n}\n\nvec2 random22(vec2 uv) {\n    return fract(sin(vec2(dot(uv,vec2(127.1,311.7)),dot(uv,vec2(269.5,183.3))))*43958.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\tuv -= .5;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    //divide screen into tiles\n    uv *= scale;\n    vec2 tUV = fract(uv);\n    vec2 tID = floor(uv); \n    \n    float minDist = 2.; //declared early to save during for loop\n    vec2 minPoint;\n    \n    //get closest dist with neighbor checking\n    for (float y = -1.; y <= 1.; y++) {\n        for (float x = -1.; x <= 1.; x++) {\n            //calc neighbor \n            vec2 neighbor = vec2(x,y);\n            \n            //calc neighbor point\n            vec2 point = random22(tID + neighbor);\n            \n            //animate point location\n            if (random21(point) > .5) {\n            \tpoint = 0.5 + 0.5*sin(iTime + 3.2831*point);\n            } else {\n                point = 0.5 + 0.5*cos(iTime + 4.2831*point);\n            }\n            \n            //calc dist between neighbor point and current\n            vec2 diff = (neighbor + point) - tUV; //length(neighbor offset + pos in neighbor - home tile UV)\n            float dist = length(diff); \n            \n            //update minimun distance and point \n            if( dist < minDist ) {\n        \t\tminDist = dist;\n                \n        \t\tminPoint = point;\n    \t\t} \n        }\n    }\n    \n    vec3 col = vec3(0.);\n\n    // tint acording the closest point position\n    col = vec3(vec2(minPoint),.5);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}