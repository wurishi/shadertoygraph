{"ver":"0.1","info":{"id":"wsfSWB","date":"1552013031","viewed":80,"name":"goodness","username":"santosonicholas","description":"latihan","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["sd"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// \"ShaderToy Tutorial - Ray Marching Primitives\" \n// by Martijn Steinrucken aka BigWings/CountFrolic - 2018\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n//\n// This shader is part of a tutorial on YouTube\n// https://youtu.be/Ff0jJyyiVyw\n\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n\n// function for sphere\nfloat sdSphere( vec3 p, float s1 )\n{\n   vec4 s = vec4(0, s1, 6, s1);\n   return  length(p-s.xyz)-s.w;   \n}\n\n// function for box\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return length(max(d,0.0))\n         + min(max(d.x,max(d.y,d.z)),0.0); // remove this line for an only partially signed sdf \n}\n\n// function for torus\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\t\t\n  return length(q)-t.y;\n}\n\n// function for cone\nfloat sdCone( in vec3 p, in vec3 c )\n{\n    vec2 q = vec2( length(p.xz), p.y );\n    float d1 = -q.y-c.z;\n    float d2 = max( dot(q,c.xy), q.y);\n    return length(max(vec2(d1,d2),0.0)) + min(max(d1,d2), 0.);\n}\n\n// function for triangular prism\nfloat sdTriPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n    return max(q.z-h.y,max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5);\n}\n\n\n//function for the placement of the shape\nfloat GetDist(vec3 p) {\t\n\n \t// placement the shape and the sizing\n    \n    float planeDist = p.y;\n  \tfloat sp = sdSphere (p - vec3(-.6, .5, -1.0), 1.0);    \n    \n    float rb = \tsdBox (p - vec3(-.6, .05, 5), vec3 (2., .5, 1));\n    \n    float tr = sdTorus (p - vec3(-.6, 1.5, 5), vec2(1.5, .2));\n    \n    float tp = sdTriPrism (p - vec3(-3.5, .3, 4.7), vec2(0.6));\n    \n    float tp2 = sdTriPrism (p - vec3(2.3, .3, 4.7), vec2(0.6));\n    \n    float cn = sdCone (p - vec3(-2.3 , 1.5 , 4.4), vec3(.9, .3, 1.));\n    \n    float cn2 = sdCone (p - vec3(1.08 , 1.5 , 4.4), vec3(.9, .3, 1.));\n    \n    float d = min(sp, planeDist);   \n    d = min(d,rb);\n    d = min (d, tr);\n    d = min (d, tp); \n    d = min (d,tp2);\n    d = min (d, cn);\n    d = min (d, cn2);\n    return d;\n}\n\n//function for raymarch\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || dS<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\n//function for the lighting\n\nfloat GetLight(vec3 p) {\n    vec3 lightPos = vec3(0, 5, 6);\n    lightPos.xz += vec2(sin(iTime), cos(iTime))*2.;\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l), 0., 1.);\n    float d = RayMarch(p+n*SURF_DIST*2., l);\n    if(d<length(lightPos-p)) dif *= .1;\n    \n    return dif;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0);\n    \n    vec3 ro = vec3(0, 2, 0); // for the stage placement\n    vec3 rd = normalize(vec3(uv.x-.15, uv.y-.2, 1));\n\n    float d = RayMarch(ro, rd);\n    \n    vec3 p = ro + rd * d;\n    \n    float dif = GetLight(p);\n    col = vec3(dif);\n    \n    \n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}