{"ver":"0.1","info":{"id":"wtcBWf","date":"1638856095","viewed":258,"name":"Shader a day 1","username":"MinimilisticBits","description":"day 1","likes":7,"published":3,"flags":0,"usePreview":0,"tags":["fractal","abstract"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 rot(vec2 a, float c){\nfloat l = length(a);\na/=l;\nfloat ang = (a.y<0.)?acos(a.x):2.*3.14159 - acos(a.x);\nang += c;\nreturn vec2(l*cos(ang), l*sin(ang));\n}\n\nfloat DE(vec3 p0){\nvec4 p = vec4(p0, 1.);\nfor(int i = 0; i < 20; i++){\n\np*=5.2 + sin(iTime)*1.4;\np.xyz = mod(p.xyz-1.5, 3.)-1.5;\np.xyz -= vec3(0.4,0.2,0.1)*0.5;\np/=dot(p.xyz,p.xyz);\n}\n\nreturn length(p.xyz)/p.w;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 a = vec3(0.2,0.5,0.3);\n    vec3 b = vec3(0.6,0.2,0.1);\n    vec3 c = vec3(0.2,0.1,0.4);\n    vec3 d = vec3(0.9,0.5,0.5);\n    vec3 color = a + b*cos(6.28318*(c*uv.y+d + iTime));\n   \n   \n   \n    uv = uv * 2.0 - 1.0;\n    uv.x *= 1.3;\n    uv.y /= 1.3;\n   \n    uv = abs(uv);\n    uv = rot(uv, iTime*0.4);\n   \n    uv *= 10.;\n    float dist = DE((mod(vec3(uv.x, uv.y,1.), 12.)-6.)/20.)*20.;\n    vec3 col;\n    //if(dist < 0.01){\n    //col = vec3(1.);  \n   // }\n   col+=dist*0.9;\n    col-=color;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}