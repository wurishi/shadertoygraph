{"ver":"0.1","info":{"id":"4tccD8","date":"1532347687","viewed":147,"name":"syltefar-noise-value-3d","username":"syltefar","description":"Left: 3D value noise\nRight: Same noise, sampled 3 times","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["noise","valuenoise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// 3D value noise, sampled once to the left, and sampled 3 times on the right (fractal noise)\n// - https://thebookofshaders.com/11/\n// - Code based on https://www.shadertoy.com/view/4dS3Wd\n//   By Morgan McGuire @morgan3d, http://graphicscodex.com\n\nfloat hash(float n) { return fract(sin(n) * 1e4); }\n\nfloat noise(vec3 x) {\n    const vec3 step = vec3(110, 241, 171);\n\n    vec3 i = floor(x);\n    vec3 f = fract(x);\n \n    // For performance, compute the base input to a 1D hash from the integer part of the argument and the \n    // incremental change to the 1D based on the 3D -> 1D wrapping\n    float n = dot(i, step);\n\n    vec3 u = f * f * (3.0 - 2.0 * f);\n    return mix(mix(mix( hash(n + dot(step, vec3(0, 0, 0))), hash(n + dot(step, vec3(1, 0, 0))), u.x),\n                   mix( hash(n + dot(step, vec3(0, 1, 0))), hash(n + dot(step, vec3(1, 1, 0))), u.x), u.y),\n               mix(mix( hash(n + dot(step, vec3(0, 0, 1))), hash(n + dot(step, vec3(1, 0, 1))), u.x),\n                   mix( hash(n + dot(step, vec3(0, 1, 1))), hash(n + dot(step, vec3(1, 1, 1))), u.x), u.y), u.z);\n}\n\n// Fractal noise\n#define NUM_NOISE_OCTAVES 3\nfloat fbm(vec3 x) {\n\tfloat v = 0.0;\n\tfloat a = 0.5;\n\tvec3 shift = vec3(100);\n\tfor (int i = 0; i < NUM_NOISE_OCTAVES; ++i) {\n\t\tv += a * noise(x);\n\t\tx = x * 2.0 + shift;\n\t\ta *= 0.5;\n\t}\n\treturn v;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.yy;\n\n    float col;\n    vec3 pos = vec3(uv.x*32.0, uv.y*32.0, iTime);\n    if(fragCoord.x < iResolution.x * 0.499)\n    {\n        col = noise(pos);\n    }\n    else if(fragCoord.x > iResolution.x * 0.501)\n    {\n        col = fbm(pos);\n    }\n    \n    fragColor = vec4(col, col, col,1.0);\n}","name":"Image","description":"","type":"image"}]}