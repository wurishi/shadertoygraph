{"ver":"0.1","info":{"id":"lcj3WG","date":"1704605358","viewed":23,"name":"SimpleFruit","username":"Haelix","description":"Use primitive shapes to draw fruit.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["2d","icon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec4 APPLE_RED = vec4(1.0, 0.0, 0.1, 1.0);\nconst vec4 PEAR_GREEN = vec4(0.2, 1.0, 0.1, 1.0);\nconst vec4 LEAF_GREEN = vec4(0.0, 0.5, 0.15, 1.0);\nconst vec4 STEM_BROWN = vec4(0.8, 0.5, 0.2, 1.0);\nconst vec4 PINEAPPLE_YELLOW = vec4(1.0, 1.0, 0.2, 1.0);\nconst vec4 EMPTY = vec4(0);\n\n//Primitives\nfloat Circle(in vec2 center, in float radius, in vec2 testPoint)\n{\n    return length(testPoint - center) - radius;\n}\n\nfloat Ellipse(in vec2 centerA, in vec2 centerB, in float radius, in vec2 testPoint)\n{\n    //a^2 + b^2 = r^2\n    radius = length(centerA - centerB) + radius;\n    \n    vec2 a = testPoint - centerA;\n    float distA = length(a);\n    vec2 b = testPoint - centerB;\n    float distB = length(b);\n    return distA + distB - radius;\n}\n\nfloat Half(in vec2 pointA, in vec2 pointB, in vec2 testPoint)\n{\n    vec2 line = pointB - pointA;\n    vec2 AtoPoint = testPoint - pointA;\n    return dot(line, AtoPoint);\n}\n\nfloat Line(in vec2 pointA, in vec2 pointB, in vec2 testPoint)\n{\n    vec2 line = pointB - pointA;\n    vec2 AtoPoint = testPoint - pointA;\n    float dist = clamp(dot(AtoPoint, line) / dot(line, line), 0.0, 1.0);\n    return length(AtoPoint - dist * line);\n}\n\nfloat Box(in vec2 minCorner, in vec2 maxCorner, in vec2 testPoint)\n{\n    \n    vec2 distMax = testPoint - maxCorner;\n    vec2 distMin = minCorner - testPoint;\n    \n    return length(max(max(distMax, distMin), vec2(0))) + min(max(max(distMax.x, distMin.x), max(distMax.y, distMin.y)), 0.0);\n}\n\n\n//Boolean Operations\nfloat Intersect(in float dist1, in float dist2)\n{\n    return min(dist1, dist2);\n}\n\nfloat Intersect(in float dist1, in float dist2, in float dist3)\n{\n    return min(min(dist1, dist2), dist3);\n}\n\nfloat Union(in float dist1, in float dist2)\n{\n    return max(dist1, dist2);\n}\nfloat Union(in float dist1, in float dist2, in float dist3)\n{\n    return max(max(dist1, dist2), dist3);\n}\nfloat Union(in float dist1, in float dist2, in float dist3, in float dist4)\n{\n    return max(max(dist1, dist2), max(dist3, dist4));\n}\nfloat Union(in float dist1, in float dist2, in float dist3, in float dist4, in float dist5, in float dist6)\n{\n    return max(max(max(dist1, dist2), max(dist3, dist4)), max(dist5, dist6));\n}\n\nfloat Invert(in float dist)\n{\n    return dist * -1.0;\n}\n\nvoid Pear(in vec2 uv, out vec4 color)\n{\n    float leafDist =\n    Intersect(\n        Invert(Ellipse(vec2(0.42, 0.85), vec2(0.47, 0.9), 0.1, uv)),\n        Invert(Ellipse(vec2(0.4, 0.87), vec2(0.45, 0.92), 0.1, uv))\n    );\n    \n    if(leafDist > 0.0)\n    {\n        color = LEAF_GREEN;\n    }\n    else\n    {\n        float fruitDist =  \n        Union(\n            Union(\n               Invert(Ellipse(vec2(0.35, 0.35), vec2(0.65, 0.35), 0.3, uv)),\n               Invert(Ellipse(vec2(0.5, 0.7), vec2(0.5, 0.7), 0.35, uv))\n            ),\n            Intersect(\n                Invert(Box(vec2(0.5,0.35), vec2(0.8, 0.75), uv)),\n                Ellipse(vec2(1.0, 1.0), vec2(1.0, 0.44), 0.305, uv)\n            ),\n            Intersect(\n                Invert(Box(vec2(0.2,0.35), vec2(0.5, 0.75), uv)),\n                Ellipse(vec2(0.0, 1.0), vec2(0.0, 0.44), 0.305, uv)\n            )\n        );\n        if(fruitDist > 0.0)\n        {\n            color = PEAR_GREEN;\n        }\n        else\n        {\n            float stemDist = \n            Intersect(\n                Invert(Box(vec2(0.475, 0.8), vec2(0.525, 0.98), uv)),\n                Half(vec2(0.5, 0.8), vec2(1.0, 0.85), uv)\n            );\n            color = stemDist > 0.0 ? STEM_BROWN : EMPTY;\n        }    \n    }\n}\n\nvoid Apple(in vec2 uv, out vec4 color)\n{\n    float leafDist =\n    Intersect(\n        Invert(Ellipse(vec2(0.42, 0.85), vec2(0.47, 0.9), 0.1, uv)),\n        Invert(Ellipse(vec2(0.4, 0.87), vec2(0.45, 0.92), 0.1, uv))\n    );\n    \n    if(leafDist > 0.0)\n    {\n        color = LEAF_GREEN;\n    }\n    else\n    {\n        float fruitDist =  \n        Union(\n           Invert(Ellipse(vec2(0.35, 0.7), vec2(0.35, 0.25), 0.33, uv)),\n           Invert(Ellipse(vec2(0.65, 0.7), vec2(0.65, 0.25), 0.33, uv))\n        );\n\n        if(fruitDist > 0.0)\n        {\n            color = APPLE_RED;\n        }\n        else\n        {\n            float stemDist = \n            Intersect(\n                Invert(Box(vec2(0.475, 0.8), vec2(0.525, 0.98), uv)),\n                Half(vec2(0.5, 0.8), vec2(1.0, 0.85), uv)\n            );\n            color = stemDist > 0.0 ? STEM_BROWN : EMPTY;\n        }    \n    }\n}\n\nvoid Pineapple(in vec2 uv, out vec4 color)\n{\n    float zigDist =\n        Intersect(\n            Intersect(\n                Intersect(\n                    Line(vec2(0.425,0.2), vec2(0.375,0.15), uv),\n                    Line(vec2(0.425,0.2), vec2(0.475,0.15), uv)\n                ),\n                Intersect(\n                    Line(vec2(0.575,0.2), vec2(0.625,0.15), uv),\n                    Line(vec2(0.575,0.2), vec2(0.525,0.15), uv)\n                )\n            ),\n            Intersect(\n                Intersect(\n                    Line(vec2(0.425,0.5), vec2(0.375,0.45), uv),\n                    Line(vec2(0.425,0.5), vec2(0.475,0.45), uv)\n                ),\n                Intersect(\n                    Line(vec2(0.575,0.5), vec2(0.625,0.45), uv),\n                    Line(vec2(0.575,0.5), vec2(0.525,0.45), uv)\n                )\n            ),        \n            Intersect(\n                Intersect(\n                    Line(vec2(0.35,0.35), vec2(0.3,0.3), uv),\n                    Line(vec2(0.35,0.35), vec2(0.4,0.3), uv)\n                ),\n                Intersect(\n                    Line(vec2(0.5,0.35), vec2(0.55,0.3), uv),\n                    Line(vec2(0.5,0.35), vec2(0.45,0.3), uv)\n                ),\n                Intersect(\n                    Line(vec2(0.65,0.35), vec2(0.7,0.3), uv),\n                    Line(vec2(0.65,0.35), vec2(0.6,0.3), uv)\n                )\n            )\n\n        );\n            \n    if(zigDist < 0.01)\n    {\n        color = STEM_BROWN;\n    }\n    else\n    {   \n        float fruitDist =\n            Intersect(\n                Invert(Ellipse(vec2(0.5, 0.54), vec2(0.5, 0.14), 0.2, uv)),\n                Half(vec2(0.5, 0.61), vec2(0.5, 0.5), uv)\n            );\n\n        if(fruitDist > 0.0)\n        {\n            color = PINEAPPLE_YELLOW;\n        }\n        else\n        {\n            float stemDist =\n            Union(\n                Intersect(\n                    Ellipse(vec2(0.3, 0.45), vec2(0.3, 0.45), 0.4, uv),\n                    Invert(Ellipse(vec2(0.4, 0.5), vec2(0.4, 0.5), 0.4, uv))\n                ),\n                Intersect(\n                    Ellipse(vec2(0.7, 0.45), vec2(0.7, 0.45), 0.4, uv),\n                    Invert(Ellipse(vec2(0.6, 0.5), vec2(0.6, 0.5), 0.4, uv))\n                ),\n                Intersect(\n                    Ellipse(vec2(0.3, 0.55), vec2(0.3, 0.55), 0.4, uv),\n                    Invert(Ellipse(vec2(0.4, 0.6), vec2(0.4, 0.6), 0.4, uv))\n                ),\n                Intersect(\n                    Ellipse(vec2(0.7, 0.55), vec2(0.7, 0.55), 0.4, uv),\n                    Invert(Ellipse(vec2(0.6, 0.6), vec2(0.6, 0.6), 0.4, uv))\n                ),\n                Intersect(\n                    Ellipse(vec2(0.3, 0.65), vec2(0.3, 0.65), 0.4, uv),\n                    Invert(Ellipse(vec2(0.4, 0.7), vec2(0.4, 0.7), 0.4, uv))\n                ),\n                Intersect(\n                    Ellipse(vec2(0.7, 0.65), vec2(0.7, 0.65), 0.4, uv),\n                    Invert(Ellipse(vec2(0.6, 0.7), vec2(0.6, 0.7), 0.4, uv))\n                )\n            );        \n\n            color = stemDist > 0.0 ? LEAF_GREEN : EMPTY;\n        }\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec2 uvSquare = fragCoord/min(iResolution.x, iResolution.y);\n\n    //Tiled\n    vec2 newUV = mod(uvSquare, 0.2) * 5.0; \n    \n    vec2 centerA = vec2(sin(iTime) * 0.3 + 0.4, cos(iTime) * 0.3 + 0.5);\n    vec2 centerB = vec2(sin(iTime) * -0.3 + 1.2, cos(iTime) * -0.3 + 0.5);\n    float distA = Invert(Circle(centerA, 0.5, uvSquare));\n    float distB = Invert(Circle(centerB, 0.5, uvSquare));\n\n    if(distA > 0.0 && distB > 0.0)\n    {\n        Pineapple(newUV, fragColor);\n    }\n    else if(distB > 0.0 || distA > 0.0)\n    {\n        Pear(newUV, fragColor);\n    }\n    else\n    {\n        Apple(newUV, fragColor);        \n    }\n}","name":"Image","description":"","type":"image"}]}