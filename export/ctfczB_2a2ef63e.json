{"ver":"0.1","info":{"id":"ctfczB","date":"1690875848","viewed":92,"name":"CMYK Halftones","username":"krisp","description":"CMYK halftones with color shifting\nRainbow flag for color shifting demonstrative purposes etc etc ;)\n\nuse the mouse to compare to original","likes":6,"published":1,"flags":32,"usePreview":1,"tags":["halftone","cmyk","benday","eyestrain"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define dotScale 2000.0\n#define misalignment 0.01\n#define seed int(iTime)\n\nvec2 hash21 (float p) {\n\tvec3 p3 = fract(vec3(p) * vec3(0.1031, 0.1030, 0.0973));\n\tp3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nvec4 rgb2cmyk (vec3 col) {\n    float val = max(max(col.r, col.g), col.b);\n    vec3 cmy = val == 0.0 ? vec3(1.0) : 1.0 - col/val;\n    return vec4(cmy, val);\n}\n\n#define pi 3.1415926535\nfloat halftone (vec2 p, float angle, float scale) {\n    vec2 dir0 = vec2(cos(angle), sin(angle));\n    vec2 dir1 = vec2(cos(angle + pi/2.0), sin(angle+ pi/2.0));\n    \n    float sin0 = sin(dot(p, dir0)*scale);\n    float sin1 = sin(dot(p, dir1)*scale);\n    return (sin0+sin1)/4.0 + .5;\n}\n\n#define deg2rad (pi/180.0)\n#define AASize 1000./(dotScale)\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) \n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float dotsC = halftone(fragCoord/iResolution.x, 15.0*deg2rad, dotScale);\n    float dotsM = halftone(fragCoord/iResolution.x, 75.0*deg2rad, dotScale);\n    float dotsY = halftone(fragCoord/iResolution.x,  0.0*deg2rad, dotScale);\n    float dotsK = halftone(fragCoord/iResolution.x, 45.0*deg2rad, dotScale);\n    \n    vec4 cmyk;\n    cmyk.x = rgb2cmyk(texture(iChannel0, uv + (hash21(float(seed+0))-0.5)*misalignment).rgb).x;\n    cmyk.y = rgb2cmyk(texture(iChannel0, uv + (hash21(float(seed+1))-0.5)*misalignment).rgb).y;\n    cmyk.z = rgb2cmyk(texture(iChannel0, uv + (hash21(float(seed+2))-0.5)*misalignment).rgb).z;\n    cmyk.w = rgb2cmyk(texture(iChannel0, uv + (hash21(float(seed+3))-0.5)*misalignment).rgb).w;\n    \n    vec3 col = vec3(1.0);\n    col.r -= float( smoothstep(-AASize, AASize, cmyk.x-dotsC ) );\n    col.g -= float( smoothstep(-AASize, AASize, cmyk.y-dotsM ) );\n    col.b -= float( smoothstep(-AASize, AASize, cmyk.z-dotsY ) );\n    col *=   float( smoothstep(-AASize, AASize, cmyk.w-dotsK ) );\n    \n    if (iMouse.x > fragCoord.x && iMouse.z > 0.0) {\n        col = texture(iChannel0, uv).rgb;\n    }\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) \n{\n    vec2 uv = (fragCoord - iResolution.xy/2.0)/iResolution.x;\n    \n    vec3 col = texture(iChannel0, fragCoord/iResolution.xy).rgb;\n    col *= 0.4+0.6*smoothstep(0.0, 0.05, sdBox(uv-vec2(0.0, -0.01), vec2(.165,.1)));\n    \n    if (sdBox(uv, vec2(.165,.1)) < .02) {\n        col = vec3(1);\n        if (uv.y > .08) {\n            col = vec3(1.0, 0.0, 0.0);\n        } else if (uv.y > .04) {\n            col = vec3(1.000,0.502,0.000);\n        } else if (uv.y > .0) {\n            col = vec3(1.000,0.851,0.000);\n        } else if (uv.y > -.04) {\n            col = vec3(0.000,0.925,0.000);\n        } else if (uv.y > -.08) {\n            col = vec3(0.000,0.502,1.000);\n        } else {\n            col = vec3(0.592,0.145,0.996);\n        }\n    }\n    \n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}