{"ver":"0.1","info":{"id":"wsKSzt","date":"1574780771","viewed":63,"name":"camino de abismo","username":"jorge2017a1","description":"camino de abismo","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["caminodeabismo"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// \"ShaderToy Tutorial - Ray Marching Primitives\" \n// by Martijn Steinrucken aka BigWings/CountFrolic - 2018\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n//\n// This shader is part of a tutorial on YouTube\n// https://youtu.be/Ff0jJyyiVyw\n\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n\n//Torus function\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\n\n\n\n//Sphere function\nfloat sdSphere( vec3 p, float s1 )\n{\n   vec4 s = vec4(0, s1, 9, s1);\n   return  length(p-s.xyz)-s.w;   \n}\n//Box function\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return length(max(d,0.0))\n         + min(max(d.x,max(d.y,d.z)),0.0); // remove this line for an only partially signed sdf \n}\n//Triprism function\nfloat sdTriPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n    return max(q.z-h.y,max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5);\n}\n//Cone function\nfloat sdCone( vec3 p, vec2 c )\n{\n    // c must be normalized\n    float q = length(p.xy);\n    return dot(c,vec2(q,p.z));\n}\n\n\n\n\n\n///--------------------------------------------\n\n// For unions \n/*float unionSDF(float distA, float distB) {\n    return min(distA, distB);\n}\n// For differences \nfloat differenceSDF(float distA, float distB) {\n    return max(distA, -distB);\n}*/\n\nfloat intersectSDF(float distA, float distB) {\n    return max(distA, distB);\n}\n\nfloat unionSDF(float distA, float distB) {\n    return min(distA, distB);\n}\n\nfloat differenceSDF(float distA, float distB) {\n    return max(distA, -distB);\n}\n\n\n\nmat2 Rot2(float a ) {\n    float c = cos( a );\n    float s = sin( a );\n    return mat2( c, -s, s, c );\n    \n}    \n\n\nfloat pathterrain(float x,float z){\n    // Common height function for path and terrain\n    return \n        sin(x*.5 )*1.+cos(z*.3 )*0.3\n        +cos(x*3.+z )*0.1+sin(x-z*.2 )*0.2;\n}    \n\n\n//Coordinate positioning of each shape\nfloat GetDist(vec3 p) {\t\n\n \t\n    float planeDist = p.y;\n  \t\n    float d;\n    \n   \n    float bx1 = sdBox (p-vec3(-4.,0.5,0.),vec3(10.0,1.5,10.0));\n   \n    //float d1 = p.y-pathterrain(p.x,p.z);\n    //float d1 =-pathterrain(p.x,p.z);  //bien\n    \n   \n    vec2 v1= Rot2(60.0)*vec2(p.x, p.z);\n   \n    float d1 =pathterrain(v1.x,v1.y);\n    \n    \n     d=planeDist;  \n    \n    float dif1;\n    dif1=d1;\n    \n    d=max(d,dif1);  \n   \n\n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.2;\n    //Determines size of shadow\n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || dS<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    //Texture of white and black in image\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nfloat GetLight(vec3 p) {\n    vec3 lightPos = vec3(0, 5, 6);\n    //Determine movement of light ex. shadow and light direction and diffusion\n    lightPos.xz += vec2(sin(iTime), cos(iTime)*2.);\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l), 0., 1.);\n    float d = RayMarch(p+n*SURF_DIST*2., l);\n    if(d<length(lightPos-p)) dif *= .1;\n    \n    return dif;\n}\n\n\n\n\nfloat GetLightv2(vec3 p) {\n    vec3 lightPos1 = vec3(1, 5, 6);\n    //Determine movement of light ex. shadow and light direction and diffusion\n    lightPos1.xz += vec2(sin(iTime), cos(iTime)*2.);\n    vec3 l1 = normalize(lightPos1-p);\n    vec3 n1 = GetNormal(p);\n    \n    float dif1 = clamp(dot(n1, l1), 0., 1.);\n    float d1 = RayMarch(p+n1*SURF_DIST*2., l1);\n    if(d1<length(lightPos1-p)) dif1 *= .1;\n    \n    \n    \n    vec3 lightPos2 = vec3(0, 5, -6);\n    //Determine movement of light ex. shadow and light direction and diffusion\n    lightPos2.xz += vec2(sin(iTime), cos(iTime)*2.);\n    vec3 l2 = normalize(lightPos2-p);\n    vec3 n2 = GetNormal(p);\n    \n    float dif2 = clamp(dot(n2, l2), 0., 1.);\n    float d2 = RayMarch(p+n2*SURF_DIST*2., l2);\n    if(d2<length(lightPos2-p)) dif2 *= .1;\n    \n    return (dif1+dif2)/2.0;\n}\n\n\nfloat GetLightv3(vec3 p) {\n    vec3 lightPos1 = vec3(-1, 5, -6);\n    //Determine movement of light ex. shadow and light direction and diffusion\n    lightPos1.xz += vec2(sin(iTime), cos(iTime)*2.);\n    vec3 l1 = normalize(lightPos1-p);\n    vec3 n1 = GetNormal(p);\n    \n    float dif1 = clamp(dot(n1, l1), 0., 1.);\n    float d1 = RayMarch(p+n1*SURF_DIST*2., l1);\n    if(d1<length(lightPos1-p)) dif1 *= .1;\n    \n    \n    \n    vec3 lightPos2 = vec3(2, 5, -6);\n    //Determine movement of light ex. shadow and light direction and diffusion\n    lightPos2.xz += vec2(sin(iTime), cos(iTime)*2.);\n    vec3 l2 = normalize(lightPos2-p);\n    vec3 n2 = GetNormal(p);\n    \n    float dif2 = clamp(dot(n2, l2), 0., 1.);\n    float d2 = RayMarch(p+n2*SURF_DIST*2., l2);\n    if(d2<length(lightPos2-p)) dif2 *= .1;\n    \n    \n    vec3 lightPos3 = vec3(-2.5, 5.5, 0.5);\n    //Determine movement of light ex. shadow and light direction and diffusion\n    lightPos3.xy += vec2(sin(iTime), cos(iTime)*2.);\n    vec3 l3 = normalize(lightPos3-p);\n    vec3 n3 = GetNormal(p);\n    \n    float dif3 = clamp(dot(n3, l3), 0., 1.);\n    float d3 = RayMarch(p+n3*SURF_DIST*2., l3);\n    if(d3<length(lightPos3-p)) dif3 *= .1;\n    \n    \n    return (dif1+dif2+dif3)/3.0;\n}\n\n\n\nfloat GetLightPos(vec3 p, vec3 lpos) {\n    \n    vec3 lightPos1 = vec3(0, 5, 6);\n    //Determine movement of light ex. shadow and light direction and diffusion\n    lightPos1.xz += vec2(sin(iTime), cos(iTime)*2.);\n    vec3 l1 = normalize(lightPos1-p);\n    vec3 n1 = GetNormal(p);\n    \n    float dif1 = clamp(dot(n1, l1), 0., 1.);\n    float d1 = RayMarch(p+n1*SURF_DIST*2., l1);\n    if(d1<length(lightPos1-p)) dif1 *= .1;\n    \n    \n    vec3 lightPos2 =lpos;\n    //Determine movement of light ex. shadow and light direction and diffusion\n    lightPos2.xz += vec2(0.0, cos(iTime)*2.);\n    vec3 l2 = normalize(lightPos2-p);\n    vec3 n2 = GetNormal(p);\n    \n    float dif2 = clamp(dot(n2, l2), 0., 1.);\n    float d2 = RayMarch(p+n2*SURF_DIST*2., l2);\n    if(d2<length(lightPos2-p)) dif2 *= .1;\n    \n    return (dif1+dif2)/2.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0);\n    //Color of each object\n    //vec3 ro = vec3(0, 1.0, 0);\n    \n    vec3 ro = vec3(10.0+10.0*cos(iTime), 4.0+2.*sin(iTime),iTime*0.01);\n    \n    vec3 rd = normalize(vec3(uv.x-1.0, uv.y,1.0));\n    \n    float d = RayMarch(ro, rd);\n    vec3 p = (ro + rd * d );  //+texture(iChannel0, uv).x;\n    \n    float dif = GetLight(p);\n    float dif3= GetLightv3(p);\n    \n    dif=dif+ GetLightPos(p,ro);\n    col = vec3(dif);\n    \n    fragColor = vec4(col,1.0);\n    //Background color is white\n}\n","name":"Image","description":"","type":"image"}]}