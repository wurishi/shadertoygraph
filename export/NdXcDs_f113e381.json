{"ver":"0.1","info":{"id":"NdXcDs","date":"1642945506","viewed":302,"name":"Noise gradients","username":"stegu","description":"Arrows. So many arrows.","likes":20,"published":1,"flags":0,"usePreview":0,"tags":["noise","visualization","gradient","simplex","arrows","flownoise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/min(iResolution.x, iResolution.y);\n\n    const float nscale = 2.0; // Very large noise blobs\n\tfloat gscale = 8.0; // Draw 8x8 arrows in unit square\n\n    const vec2 per = vec2(0.0, 0.0); // 0 means \"no period\"\n    float time = iTime;\n\tfloat alpha = 1.0*iTime; // Morph the pattern with time\n\tvec2 v = vec2(0.2,0.0);  // Move the domain slowly in x\n\n    vec2 g;\n    // This is the noise in the background; g is discarded.\n    vec2 p = nscale * (uv-0.5);\n\tfloat n = 0.5 + 0.5 * psrdnoise(p+time*v, per, alpha, g);\n\n    // Point sample the noise at grid points for visualization\n    // (pq is constant across each of the grid cells).\n    // The value nq is discarded -- we only use g below.\n\tvec2 pq = (floor((uv-0.5)*gscale+0.5)/gscale)*nscale+v*time;\n\tfloat nq = psrdnoise(pq, per, alpha, g);\n\n    // Make sure to supply the matching \"gscale\" here\n    float arrows = vectorfield(g*0.12, uv, gscale, 0.1);\n\n    // Draw a few isoline contours as well, to more\n    // clearly show the structure of the noise pattern.\n    float isolines;\n    isolines = aaline(0.2, n, 2.0);\n    isolines += aaline(0.4, n, 2.0);\n    isolines += aaline(0.6, n, 2.0);\n    isolines += aaline(0.8, n, 2.0);\n    \n\tvec3 mixcolor = vec3(n);\n\tvec3 linecolor = vec3(0.0,1.0,0.0);\n\tvec3 arrowcolor = vec3(1.0,1.0,0.0);\n    mixcolor = mix(mixcolor, linecolor, isolines*0.5);\n\tmixcolor = mix(mixcolor, arrowcolor, arrows);\n\n    fragColor = vec4(mixcolor, 1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// psrdnoise (c) Stefan Gustavson and Ian McEwan,\n// ver. 2021-12-02, published under the MIT license:\n// https://github.com/stegu/psrdnoise/\n\nfloat psrdnoise(vec2 x, vec2 period, float alpha, out vec2 gradient)\n{\n\tvec2 uv = vec2(x.x+x.y*0.5, x.y);\n\tvec2 i0 = floor(uv), f0 = fract(uv);\n\tfloat cmp = step(f0.y, f0.x);\n\tvec2 o1 = vec2(cmp, 1.0-cmp);\n\tvec2 i1 = i0 + o1, i2 = i0 + 1.0;\n\tvec2 v0 = vec2(i0.x - i0.y*0.5, i0.y);\n\tvec2 v1 = vec2(v0.x + o1.x - o1.y*0.5, v0.y + o1.y);\n\tvec2 v2 = vec2(v0.x + 0.5, v0.y + 1.0);\n\tvec2 x0 = x - v0, x1 = x - v1, x2 = x - v2;\n\tvec3 iu, iv, xw, yw;\n\tif(any(greaterThan(period, vec2(0.0)))) {\n\t\txw = vec3(v0.x, v1.x, v2.x);\n\t\tyw = vec3(v0.y, v1.y, v2.y);\n\t\tif(period.x > 0.0)\n\t\t\txw = mod(vec3(v0.x, v1.x, v2.x), period.x);\n\t\tif(period.y > 0.0)\n\t\t\tyw = mod(vec3(v0.y, v1.y, v2.y), period.y);\n\t\tiu = floor(xw + 0.5*yw + 0.5); iv = floor(yw + 0.5);\n\t} else {\n\t\tiu = vec3(i0.x, i1.x, i2.x); iv = vec3(i0.y, i1.y, i2.y);\n\t}\n\tvec3 hash = mod(iu, 289.0);\n\thash = mod((hash*51.0 + 2.0)*hash + iv, 289.0);\n\thash = mod((hash*34.0 + 10.0)*hash, 289.0);\n\tvec3 psi = hash*0.07482 + alpha;\n\tvec3 gx = cos(psi); vec3 gy = sin(psi);\n\tvec2 g0 = vec2(gx.x, gy.x);\n\tvec2 g1 = vec2(gx.y, gy.y);\n\tvec2 g2 = vec2(gx.z, gy.z);\n\tvec3 w = 0.8 - vec3(dot(x0, x0), dot(x1, x1), dot(x2, x2));\n\tw = max(w, 0.0); vec3 w2 = w*w; vec3 w4 = w2*w2;\n\tvec3 gdotx = vec3(dot(g0, x0), dot(g1, x1), dot(g2, x2));\n\tfloat n = dot(w4, gdotx);\n\tvec3 w3 = w2*w; vec3 dw = -8.0*w3*gdotx;\n\tvec2 dn0 = w4.x*g0 + dw.x*x0;\n\tvec2 dn1 = w4.y*g1 + dw.y*x1;\n\tvec2 dn2 = w4.z*g2 + dw.z*x2;\n\tgradient = 10.9*(dn0 + dn1 + dn2);\n\treturn 10.9*n;\n}\n\n// The functions below in this \"Common\" tab are hereby placed in\n// the public domain. They may be used freely without restrictions.\n// To provide legal grounds for the public domain status, I hereby\n// certify that I am the original author of these. The weird name\n// \"ptlined\" is a nod to historic Renderman SL, but I wrote this code.\n// The name \"aastep\" is not really a nod to OSL, though.\n// I doubt that Larry Gritz got the rather obvious name from me,\n// but I was first, and I have a published book chapter from 2012\n// to prove it, and an (unpublished) RSL shader from 2006. :)\n\n// Compute the shortest distance from p to a line segment from p1 to p2.\nfloat ptlined(vec2 p1, vec2 p2, vec2 p) {\n  vec2 p1p2 = p2 - p1;\n  vec2 v = normalize(p1p2);\n  vec2 s = p - p1;\n  float t = dot(v, s);\n  if (t<0.0) return length(s);\n  if (t>length(p1p2)) return length(p - p2);\n  return length(s - t*v);\n}\n\n// Auto-antialiased step function\nfloat aastep(float threshold, float value) {\n  float afwidth = 0.7 * length(vec2(dFdx(value), dFdy(value)));\n  return smoothstep(threshold-afwidth, threshold+afwidth, value);\n}\n\n// Anti-aliased implicit line around v == t, in the spirit of\n// aastep(), with line width w specified in fragment space (pixels)\nfloat aaline(float t, float v, float w) {\n  float fw = 0.7 * length(vec2(dFdx(v), dFdy(v)));\n  return smoothstep(t-0.5*w*fw-fw, t-0.5*w*fw+fw, v)\n\t- smoothstep(t+0.5*w*fw-fw, t+0.5*w*fw+fw, v);\n}\n\n// \"Paint\" a regular grid of implicit arrows to visualize a vector field.\n// The arrows are antialiased. (Jaggies are extra ugly in animated line art.)\n// The value for g should be constant over each grid cell, or you will\n// get strange results (bendy, wiggly or broken-up arrows).\nfloat vectorfield(vec2 g, vec2 st, float gscale, float linewidth) {\n  // pm.xy are coords [-0.5,0.5] relative to nearest arrow origin\n  vec2 pm = fract(st*gscale+0.5)-0.5;\n  float linedist = ptlined(-g*0.5, g*0.5, pm); // distance to arrow \"body\"\n  float line = 1.0 - aastep(linewidth*0.5, linedist);\n  // The arrowhead is an implicit triangle defined by three linear equations\n  float arrowsize = linewidth*0.7; // arrowhead size, eyeballed for nice look\n  vec2 a_vec = pm - g*0.5; // current coords relative to the pointy end\n  vec2 g_ = vec2(-g.y, g.x); // vector orthogonal to g\n  float arrow1 = dot(a_vec, -normalize(g)); // Distance to arrowhead base\n  float arrow2 = dot(a_vec, normalize( g + 1.5*g_ )); // to arrowhead right edge\n  float arrow3 = dot(a_vec, normalize( g - 1.5*g_ )); // to arrowhead left edge\n  float arrowd = max(max(arrow1, arrow2), arrow3); // if<arrowsize: inside triangle\n  float arrowhead = 1.0 - aastep(arrowsize, arrowd);\n  // Mask out cell borders where discontinuities cause errors in aastep()\n  vec2 bordermask = step(-0.45,pm)-step(0.45,pm);\n  float mask = bordermask.x * bordermask.y;\n  return max(line, arrowhead)*mask;\n}\n","name":"Common","description":"","type":"common"}]}