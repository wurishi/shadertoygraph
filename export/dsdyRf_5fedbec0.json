{"ver":"0.1","info":{"id":"dsdyRf","date":"1695316488","viewed":112,"name":"Fork Worley-Noise manhattan","username":"ylegall","description":"Simple implementation of Worley Noise. added manhattan distance metric and distance bands.","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["2d","noise","worley"],"hasliked":0,"parentid":"MstGRl","parentname":"Worley-Noise"},"renderpass":[{"inputs":[],"outputs":[],"code":"\n// Determines how many cells there are\n#define NUM_CELLS 8.0\n\n// Arbitrary random, can be replaced with a function of your choice\nfloat rand(vec2 co){\n    co += 7.96413; // seed\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat mdist(vec2 p1, vec2 p2) {\n    return abs(p1.x - p2.x) + abs(p1.y - p2.y);\n}\n\n// Returns the point in a given cell\nvec2 get_cell_point(ivec2 cell) {\n\tvec2 cell_base = vec2(cell) / NUM_CELLS;\n\tfloat noise_x = rand(vec2(cell));\n    float noise_y = rand(vec2(cell.yx));\n    float dx = 0.1 * sin(iTime + 2.45 * noise_y);\n    float dy = 0.1 * cos(iTime + 5.73 * noise_x);\n    vec2 pos = cell_base + (0.5 + 1.5 * vec2(noise_x + dx, noise_y + dy)) / NUM_CELLS;\n    return pos;\n}\n\n// Performs worley noise by checking all adjacent cells\n// and comparing the distance to their points\nfloat worley(vec2 coord) {\n    ivec2 cell = ivec2(coord * NUM_CELLS);\n    float dist = 1.0;\n    \n    // Search in the surrounding 5x5 cell block\n    for (int x = 0; x < 5; x++) { \n        for (int y = 0; y < 5; y++) {\n        \tvec2 cell_point = get_cell_point(cell + ivec2(x-2, y-2));\n            // dist = min(dist, distance(cell_point, coord));\n            dist = min(dist, mdist(cell_point, coord));\n\n        }\n    }\n    \n    dist /= length(vec2(1.0 / NUM_CELLS));\n    dist = fract(8.0 * dist - iTime); // stripes\n    dist = smoothstep(0.3, 0.5, dist) - smoothstep(0.5, 0.7, dist); // border thickness\n    return dist;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv.y *= iResolution.y / iResolution.x;\n\tfragColor = vec4(worley(uv));\n}","name":"Image","description":"","type":"image"}]}