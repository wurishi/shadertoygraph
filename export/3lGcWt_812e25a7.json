{"ver":"0.1","info":{"id":"3lGcWt","date":"1611926495","viewed":429,"name":"Neural Suzanne","username":"NuSan","description":"copied from blackle Neural Bunny, but with Suzanne from blender and a test of \"jade\" subsurface material\nOriginal shader: https://www.shadertoy.com/view/wtVyWK","likes":14,"published":1,"flags":0,"usePreview":0,"tags":["suzanne"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// copied from blackle Neural Bunny, but with Suzanne from blender and a test of \"jade\" subsurface material\n// Original shader: https://www.shadertoy.com/view/wtVyWK\n\nvec3 erot(vec3 p, vec3 ax, float ro) {\n    return mix(dot(p,ax)*ax,p,cos(ro))+sin(ro)*cross(ax,p);\n}\n\nfloat scene(vec3 p) {\n    // early skip if outside\n    if (length(p) > 3.0) {\n        return length(p)-2.8;\n    }\n    //neural networks can be really compact... when they want to be\n    vec4 f0_0=sin(p.y*vec4(.00,.00,.00,.01)+p.z*vec4(1.20,-.11,-.05,-3.66)+p.x*vec4(-2.55,.14,-4.41,-.07)+vec4(-3.04,-3.15,-1.75,-4.00));\n    vec4 f0_1=sin(p.y*vec4(-.00,-.00,-2.96,-.00)+p.z*vec4(2.84,-.30,-1.07,-2.13)+p.x*vec4(.10,-.38,-.75,-.36)+vec4(-.49,3.12,1.50,3.14));\n    vec4 f0_2=sin(p.y*vec4(2.96,.00,-.00,.00)+p.z*vec4(-1.08,.00,-1.10,-.47)+p.x*vec4(-.76,.00,1.15,-.15)+vec4(-4.79,-1.57,-2.81,-3.25));\n    vec4 f0_3=sin(p.y*vec4(-.00,-.01,.00,.00)+p.z*vec4(2.89,3.26,2.06,.47)+p.x*vec4(2.78,3.55,-2.21,-3.80)+vec4(4.83,2.15,1.87,-2.77));\n    vec4 f1_0=sin(mat4(.10,3.36,-1.58,.75,.19,1.62,-.59,.23,-.26,.84,-.26,-.33,-.21,-.13,.07,-.32)*f0_0+\n        mat4(-.46,-2.33,.84,-.20,-1.29,-1.43,.93,-1.44,-.62,-.91,-.46,-1.05,-.21,1.57,1.21,.60)*f0_1+\n        mat4(-.62,-.92,-.45,-1.06,.03,.19,.10,-.54,.08,-.27,-.26,-.05,-.22,.86,-.40,-.02)*f0_2+\n        mat4(-.22,.02,.20,.08,.56,.05,-.24,.70,.46,.51,1.51,.98,-.82,-1.18,.37,-.84)*f0_3+\n        vec4(.72,.15,-1.14,2.07))/1.0+f0_0;\n    vec4 f1_1=sin(mat4(-.64,1.09,-.42,.08,.85,.28,-.17,-.14,-1.07,-.40,-.00,.02,-.44,-.54,-.36,.03)*f0_0+\n        mat4(1.26,.21,-.40,.05,-1.70,-2.36,.13,-.00,.45,.33,.33,1.92,-.74,.09,-.65,-.11)*f0_1+\n        mat4(.46,.32,.32,-1.91,-.25,-.29,.51,.31,.68,.20,-1.91,.07,.91,.19,-.16,.17)*f0_2+\n        mat4(-1.12,.16,1.30,-.02,-.59,.43,1.29,.00,.07,-.20,-.06,.01,1.29,-.03,-.25,-.05)*f0_3+\n        vec4(-.84,-.53,2.27,-1.30))/1.0+f0_1;\n    vec4 f1_2=sin(mat4(.26,.07,-.40,.47,.04,.38,.43,.50,.05,.64,.33,.13,-.20,.26,-.10,.70)*f0_0+\n        mat4(1.03,.15,.12,-.31,-.39,-.69,-1.47,-1.35,-.88,-.27,1.67,1.13,-.16,-.16,.49,-1.24)*f0_1+\n        mat4(-.88,-.30,1.66,1.14,-.58,-.57,-.15,.38,-1.43,.23,-.05,-.47,-.54,.18,.16,.43)*f0_2+\n        mat4(-.78,.92,.32,-.52,-.74,.53,.43,-.35,1.08,-.74,-.26,-1.09,.64,-.39,.15,.62)*f0_3+\n        vec4(2.06,2.87,.46,-1.97))/1.0+f0_2;\n    vec4 f1_3=sin(mat4(-.32,-1.03,.15,.20,-.19,-.88,.04,-.05,-.44,-.43,1.02,.10,-.02,.17,-.07,-.33)*f0_0+\n        mat4(.06,2.45,-.25,-.22,-.01,-.53,-.12,-.22,.28,.87,-.06,.50,.60,-2.04,-.66,.09)*f0_1+\n        mat4(.29,.85,-.06,.50,.07,-.59,-.61,-.33,-.84,-.81,-.56,.47,-.06,-.17,.42,-.32)*f0_2+\n        mat4(-.77,1.29,.42,-.11,-.69,.91,-.05,.14,-.01,-.41,-1.55,.52,1.10,-.05,-.21,.27)*f0_3+\n        vec4(1.25,2.26,3.59,1.23))/1.0+f0_3;\n    vec4 f2_0=sin(mat4(-.37,1.93,1.64,-.27,-.75,-.24,-.37,-.18,1.51,-1.23,1.02,.27,-.83,.14,.57,.20)*f1_0+\n        mat4(1.66,.53,.54,.55,.37,-3.52,1.62,1.72,-.07,-.29,.15,.23,-.21,1.43,-.13,.21)*f1_1+\n        mat4(-.02,-.52,.14,.25,-.59,1.12,-.75,-.14,-.58,-.34,-.62,.31,-.58,1.11,.92,-.04)*f1_2+\n        mat4(-.17,-1.10,.31,-.94,-.96,.35,-.06,-.12,.38,-1.48,1.04,.27,-.47,1.09,-1.76,1.23)*f1_3+\n        vec4(.78,-1.51,-1.70,-.30))/1.4+f1_0;\n    vec4 f2_1=sin(mat4(1.92,-1.36,.28,1.21,.56,.98,-.21,-.71,.89,-.41,.31,1.48,.47,.09,-.72,-.13)*f1_0+\n        mat4(-.40,-.59,.50,1.09,-.88,.45,.23,-.72,-.09,-.26,-.04,.54,.47,-.20,.02,-.45)*f1_1+\n        mat4(-.21,-.27,-.06,.52,2.09,1.19,.96,.36,-.26,.02,.38,-.69,.42,-.43,-.72,.01)*f1_2+\n        mat4(2.63,.06,-.27,1.52,.53,.47,.07,.11,-.55,-.86,.10,.00,.07,1.05,.50,-.32)*f1_3+\n        vec4(-2.37,5.12,-1.09,-2.25))/1.4+f1_1;\n    vec4 f2_2=sin(mat4(.81,-.14,1.10,.17,.12,-.24,.31,-.08,.81,-.35,-.47,.16,.18,-.27,-.46,.32)*f1_0+\n        mat4(.27,.19,-.66,.24,.74,-.93,-2.85,.28,.11,.15,.26,.86,.32,-.02,.07,.01)*f1_1+\n        mat4(.08,.15,.21,.86,.69,.03,.11,.35,.01,-.31,-.80,-1.88,-.62,.30,.73,1.16)*f1_2+\n        mat4(.76,-.16,1.54,1.22,.13,.27,1.36,.66,-.33,-.12,-.83,-.93,1.23,.06,.11,-1.64)*f1_3+\n        vec4(-2.71,-1.53,.42,-.07))/1.4+f1_2;\n    vec4 f2_3=sin(mat4(-.16,-1.51,-.23,-.90,-.11,-.62,-.74,.63,1.37,-.79,.58,-.96,-.41,-.16,.00,.56)*f1_0+\n        mat4(-.18,.35,.01,-1.15,.07,1.33,1.03,1.26,.18,.63,.29,-.81,.61,.39,-.66,.70)*f1_1+\n        mat4(.12,.60,.35,-.86,.21,-.86,.17,-.52,-.03,.47,-.53,.57,-1.34,.21,1.09,-.35)*f1_2+\n        mat4(.56,-2.60,.27,-.68,.56,-1.01,-.05,.31,-.34,.71,-.07,-.36,-.32,1.49,-1.82,1.04)*f1_3+\n        vec4(-.41,.70,-.56,-1.46))/1.4+f1_3;\n    float d = dot(f2_0,vec4(.02,-.01,-.02,-.06))+\n        dot(f2_1,vec4(-.02,-.04,-.07,-.03))+\n        dot(f2_2,vec4(-.06,-.16,.03,.02))+\n        dot(f2_3,vec4(.06,-.03,-.04,.03))+\n        0.040;\n   // limit to inside unit sphere as neural sdf is not really defined\n   return max(d,length(p)-1.);\n}\n\n// scene used for inside the shape\nfloat scene2(vec3 p) {\n\n    float d=scene(p);\n    if(d<0.) {\n        // put some repeating spheres\n        float s=.2;\n        p=erot(p, vec3(.8,.3,.2),.3+iTime*.25+sin(p.z*2.+iTime*.13));\n        vec3 rp=(fract(p/s-.5)-.5)*s;\n        d=max(d, (.05-length(rp))*5.);\n        p=erot(p-.3, vec3(.3,.2,.7),.7+p.x);\n        s=.27;\n        rp=(fract(p/s-.5)-.5)*s;\n        d=max(d, (.07-length(rp))*5.);\n    }\n    \n    return d;\n\n}\n\nvec3 norm(vec3 p) {\n    mat3 k = mat3(p,p,p)-mat3(0.001);\n    return normalize(scene(p) - vec3(scene(k[0]),scene(k[1]),scene(k[2])));\n}\n\nfloat gao(vec3 p, vec3 n, float d) {\n    return smoothstep(0.,1.,scene(p+n*d)/d);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    vec2 mouse = (iMouse.xy-0.5*iResolution.xy)/iResolution.y;\n\n    vec3 cam = normalize(vec3(1.9,uv));\n    vec3 init = vec3(-3.,0,0);\n    \n    float yrot = 0.3;\n    float zrot = iTime*.2-4.;\n    if (iMouse.z > 0.) {\n        yrot += -4.*mouse.y;\n        zrot = 4.*mouse.x-3.;\n    }\n    cam = erot(cam, vec3(0,1,0), yrot);\n    init = erot(init, vec3(0,1,0), yrot);\n    cam = erot(cam, vec3(0,0,1), zrot);\n    init = erot(init, vec3(0,0,1), zrot);\n    \n    vec3 p = init;\n    bool hit = false;\n    for (int i = 0; i < 150 && !hit; i++) {\n        float dist = scene(p);\n        hit = dist*dist < 1e-6;\n        p+=dist*cam;\n        if (distance(p,init)>5.) break;\n    }\n    vec3 n = norm(p);\n    vec3 r = reflect(cam,n);\n    vec3 l = normalize(vec3(1,2,3));\n    vec3 h = normalize(l-cam);\n    vec3 col = vec3(0);\n    // dithering in the subsurface to avoid banding\n    float rnd=fract(dot(sin(uv*524.741+uv.yx*427.877),vec2(264.724)));\n    // subsurface evaluation\n    // I blend some lighting direction and camera direction to get something interesting\n    for(float i=1.;i<20.; ++i) {\n        float dist=(i+rnd)*.03;\n        col += max(0.,scene2(p+dist*normalize(-l*0.6+cam*1.0)))*vec3(0.4,1.,0.3)*.2;\n    }\n    float spec = max(0.,dot(n,h));\n    float fre = pow(1.-abs(dot(n,cam)),3.);\n    float ao = gao(p,n,.05) * gao(p,n,.1) * gao(p,n,.3) * gao(p,n,.6);\n    col += max(0.,dot(n,l)) * (pow(spec,3.)*vec3(0.2,0.9,0.5) + pow(spec,50.)*8.) * ao;\n    col += (n.z*.5+.5)*fre*vec3(0.4,0.9,0.75)*1.2*ao;\n    float bgdot = length(sin(cam*8.)*.4+.6)/2.;\n    vec3 bg = vec3(0.4,0.5,0.4) * .8 * bgdot + pow(bgdot, 10.);\n    fragColor.xyz = hit ? col : bg;\n    fragColor = smoothstep(-.02,1.05,sqrt(fragColor)) * (1.- length(uv)*.4);\n}","name":"Image","description":"","type":"image"}]}