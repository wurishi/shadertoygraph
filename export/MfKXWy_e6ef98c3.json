{"ver":"0.1","info":{"id":"MfKXWy","date":"1715730945","viewed":171,"name":"Raster Pixels Marbling ","username":"ademdj12","description":"Simulating paper marbling digitally! This code creates digital patterns that mimic the unique swirls and colors of traditional paper marbling.\nexplanation and formulas can be found here: https://people.csail.mit.edu/jaffer/Marbling/Dropping-Paint","likes":14,"published":1,"flags":32,"usePreview":0,"tags":["interactive","art","marbling"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4( texelFetch(iChannel0, ivec2(fragCoord), 0 ).xyz, 1.0 );\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/*\n    Simulating paper marbling digitally! \n    This code creates digital patterns \n    that mimic the unique swirls and colors\n    of traditional paper marbling.\n    explanation and formulas can be found here: \n        https://people.csail.mit.edu/jaffer/Marbling/Dropping-Paint\n*/\n\n#define DROP_RADIUS 15.0\n// make this 0 and have fun making shapes\n#define AUTO 1\n\n\nvec4 drop(vec2 pixel_pos, vec2 drop_pos, vec4 color,float radius)\n{\n    // distance from the drop to the pixel\n    float d = length(pixel_pos - drop_pos);\n    if(d < radius){\n        // if pixel inside the drop make it the drop's color\n        return color;\n    }else{\n        // if oustide apply displacement in reverse\n        // takes the color of the pixel that will be displaced there\n        vec2 q = (pixel_pos - drop_pos);\n        q *= (1.0 - ( radius * radius ) / ( d * d ) ) ;\n        q += drop_pos;\n        return vec4( texelFetch( iChannel0, ivec2(q), 0 ).xyz, 1.0 );\n    }\n}\n\n\nvec4 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return vec4(a + b*cos( 6.28318*(c*t+d)), 1.0);\n}\n\nvec2 leminiscate(float t){\n    float x = iResolution.x/2.0 + iResolution.y * 0.5 * cos(t) / (1.0 + sin(t) * sin(t));\n    float y = iResolution.y/2.0 + iResolution.y * 0.5 * sin(t) * cos(t) / (1.0 + sin(t) * sin(t));\n    return vec2(x, y);\n}\n\nfloat hash(float n)\n{\n    return fract(10000.0 * sin(n));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    if(iFrame % 2 + int(hash(iTime)) * 10 == 0 && AUTO == 1){\n        // auto placing dont bother with this\n        vec4 col = pal( iTime, \n                        vec3(0.5,0.5,0.5),\n                        vec3(0.5,0.5,0.5),\n                        vec3(1.0,1.0,1.0),\n                        vec3(0.0,0.10,0.20) \n                        );\n        fragColor = drop(\n            fragCoord, \n            leminiscate(iTime*20.0), \n            col,\n            DROP_RADIUS + 25.0 * hash(iTime)\n        );\n    }else if(iMouse.z > 0.0){ \n        // Mouse click make a drop\n        vec4 col = pal( iTime, \n                        vec3(0.5,0.5,0.5),\n                        vec3(0.5,0.5,0.5),\n                        vec3(1.0,1.0,1.0),\n                        vec3(0.0,0.10,0.20) \n                        );\n        fragColor = drop(fragCoord, iMouse.xy, col, DROP_RADIUS + 15.0);\n    }else{ \n        // keep same color if nothing is happening\n        fragColor = vec4( texelFetch( iChannel0, ivec2(fragCoord), 0 ).xyz, 1.0 );\n    }\n    \n}","name":"Buffer A","description":"","type":"buffer"}]}