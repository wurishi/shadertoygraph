{"ver":"0.1","info":{"id":"3lyGRm","date":"1578475300","viewed":130,"name":"Dodecahedron Colored Sphere","username":"novogrammer","description":"Dodecahedron Colored Sphere","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["sphere","dodecahedron"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//rotate function from https://wgld.org/d/glsl/g017.html\nvec3 rotate(vec3 p, float angle, vec3 axis){\n    vec3 a = normalize(axis);\n    float s = sin(angle);\n    float c = cos(angle);\n    float r = 1.0 - c;\n    mat3 m = mat3(\n        a.x * a.x * r + c,\n        a.y * a.x * r + a.z * s,\n        a.z * a.x * r - a.y * s,\n        a.x * a.y * r - a.z * s,\n        a.y * a.y * r + c,\n        a.z * a.y * r + a.x * s,\n        a.x * a.z * r + a.y * s,\n        a.y * a.z * r - a.x * s,\n        a.z * a.z * r + c\n    );\n    return m * p;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //from -1 to 1\n    vec2 pos2d=( 2.*fragCoord - iResolution.xy )/iResolution.y;\n    \n    vec3 pos=vec3(pos2d,0.);\n    float length2dSquared=dot(pos2d,pos2d);\n    if(length2dSquared<=1.){\n        pos.z=sqrt(1.0-length2dSquared);\n    }else{\n        discard;\n    }\n    pos=rotate(pos,iTime,vec3(0.,1.,0.));\n    \n    float t=(1.+sqrt(5.))/2.;\n    vec3 planes[12];\n    planes[0]=normalize(vec3(-1.,+t,0.));\n    planes[1]=normalize(vec3(+1.,+t,0.));\n    planes[2]=normalize(vec3(-1.,-t,0.));\n    planes[3]=normalize(vec3(+1.,-t,0.));\n\n    planes[4]=normalize(vec3(0.,-1.,+t));\n    planes[5]=normalize(vec3(0.,+1.,+t));\n    planes[6]=normalize(vec3(0.,-1.,-t));\n    planes[7]=normalize(vec3(0.,+1.,-t));\n    \n    planes[8]=normalize(vec3(+t,0.,-1.));\n    planes[9]=normalize(vec3(+t,0.,+1.));\n    planes[10]=normalize(vec3(-t,0.,-1.));\n    planes[11]=normalize(vec3(-t,0.,+1.));\n    \n    vec3 colorR=vec3(1.,0.,0.);\n    vec3 colorG=vec3(0.,1.,0.);\n    vec3 colorB=vec3(0.,0.,1.);\n    vec3 colorC=vec3(0.,1.,1.);\n    vec3 colorM=vec3(1.,0.,1.);\n    vec3 colorY=vec3(1.,1.,0.);\n    vec3 colors[12];\n    colors[0]=colorR;\n    colors[1]=colorG;\n    colors[2]=colorG;\n    colors[3]=colorR;\n\n    colors[4]=colorB;\n    colors[5]=colorC;\n    colors[6]=colorC;\n    colors[7]=colorB;\n\n    colors[8]=colorM;\n    colors[9]=colorY;\n    colors[10]=colorY;\n    colors[11]=colorM;\n    \n    int nearestIndex=0;\n    float nearestCos=-1.;\n    for(int i=0;i<12;i++){\n        float c=dot(pos,planes[i]);\n        if(nearestCos<c){\n            nearestIndex=i;\n            nearestCos=c;\n        }\n    }\n    fragColor=vec4(colors[nearestIndex]*nearestCos*nearestCos,1.);\n    \n}","name":"Image","description":"","type":"image"}]}