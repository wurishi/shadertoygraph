{"ver":"0.1","info":{"id":"flKSDR","date":"1640500328","viewed":135,"name":"Santa Face 2D","username":"pdcxs","description":"Merry Christmas!","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["2d","christmas","santa"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// 2D SDF:\n// https://iquilezles.org/articles/distfunctions2d\n\nfloat sdCircle(in vec2 p, in float r) {\n    return length(p) - r;\n}\n\nfloat sdEllipse(in vec2 p, in vec2 ab) {\n    p = abs(p);\n    if(p.x > p.y) {\n        p = p.yx;\n        ab = ab.yx;\n    }\n    float l = ab.y * ab.y - ab.x * ab.x;\n    float m = ab.x * p.x / l;\n    float m2 = m * m;\n    float n = ab.y * p.y / l;\n    float n2 = n * n;\n    float c = (m2 + n2 - 1.0) / 3.0;\n    float c3 = c * c * c;\n    float q = c3 + m2 * n2 * 2.0;\n    float d = c3 + m2 * n2;\n    float g = m + m * n2;\n    float co;\n    if(d < 0.0) {\n        float h = acos(q / c3) / 3.0;\n        float s = cos(h);\n        float t = sin(h) * sqrt(3.0);\n        float rx = sqrt(-c * (s + t + 2.0) + m2);\n        float ry = sqrt(-c * (s - t + 2.0) + m2);\n        co = (ry + sign(l) * rx + abs(g) / (rx * ry) - m) / 2.0;\n    } else {\n        float h = 2.0 * m * n * sqrt(d);\n        float s = sign(q + h) * pow(abs(q + h), 1.0 / 3.0);\n        float u = sign(q - h) * pow(abs(q - h), 1.0 / 3.0);\n        float rx = -s - u - c * 4.0 + 2.0 * m2;\n        float ry = (s - u) * sqrt(3.0);\n        float rm = sqrt(rx * rx + ry * ry);\n        co = (ry / sqrt(rm - rx) + 2.0 * g / rm - m) / 2.0;\n    }\n    vec2 r = ab * vec2(co, sqrt(1.0 - co * co));\n    return length(r - p) * sign(p.y - r.y);\n}\n\nfloat sdOrientedBox(in vec2 p, in vec2 a, in vec2 b, float th) {\n    float l = length(b - a);\n    vec2 d = (b - a) / l;\n    vec2 q = (p - (a + b) * 0.5);\n    q = mat2(d.x, -d.y, d.y, d.x) * q;\n    q = abs(q) - vec2(l, th) * 0.5;\n    return length(max(q, 0.0)) + min(max(q.x, q.y), 0.0);\n}\n\nvec2 fixUV(in vec2 c) {\n    vec2 uv = (2. * c - iResolution.xy);\n    uv /= min(iResolution.x, iResolution.y);\n    uv += vec2(0., .15);\n    uv *= .8;\n    return uv;\n}\n\nvec3 plot(float dist, vec3 bgColor, vec3 shapeColor) {\n    vec3 color = bgColor;\n    float d = smoothstep(.01, .009, abs(dist));\n    color = mix(shapeColor, color, step(0., dist));\n    color = mix(color, vec3(0.), d);\n    return color;\n}\n\nfloat face(vec2 uv) {\n    float d;\n    // left ellipse\n    d = sdEllipse(uv + vec2(.2, 0.), vec2(.3, .5));\n    // right ellipse\n    d = min(d, sdEllipse(uv - vec2(.2, 0.), vec2(.3, .5)));\n    // bottom\n    d = min(d, sdEllipse(uv + vec2(0., .1), vec2(.3, .45)));\n    // top\n    d = min(d, sdEllipse(uv - vec2(0., .35), vec2(.38, .2)));\n\n    return d;\n}\n\nvec3 frontFace(vec2 uv, vec3 bgColor) {\n    float d = sdEllipse(uv, vec2(.41, .46));\n    d = max(-1. * sdEllipse(uv + vec2(0., .1), vec2(.42, .19)), d);\n    d = max(-1. * sdEllipse(uv + vec2(0., .32), vec2(.62, .4)), d);\n\n    vec3 color = bgColor;\n    float f = 1. - step(0., d);\n    color = mix(color, vec3(1., .92, .84), f);\n    color = mix(color, vec3(1., .73, .55), f * smoothstep(.05, 0., sdCircle(uv - vec2(.25, .03), .1)));\n    color = mix(color, vec3(1., .73, .55), f * smoothstep(.05, 0., sdCircle(uv - vec2(-.25, .03), .1)));\n\n    color = mix(color, vec3(0.), smoothstep(.01, .009, abs(d)));\n\n    return color;\n}\n\nfloat Segment(in vec2 p, vec2 a, vec2 b, float w) {\n    vec2 ba = b - a;\n    vec2 pa = p - a;\n    vec2 d = pa - clamp(dot(pa, ba) / dot(ba, ba), 0., 1.) * ba;\n    return smoothstep(w, .99 * w, length(d));\n}\n\nvec3 hat(vec2 uv, vec3 bgColor) {\n    vec3 color = bgColor;\n    float d1 = sdCircle(uv - vec2(0.15, .35), .5);\n    float d2 = sdOrientedBox(uv, vec2(-0.5, -0.5), vec2(1.5, .5), 1.4);\n    float d3 = sdEllipse(uv - vec2(0.1, .4), vec2(.2, .3));\n    float d4 = sdOrientedBox(uv, vec2(-0.5, 0.), vec2(-0.5, 1.), .5);\n    color = plot(max(-d2, d1), color, vec3(1., 0., 0.));\n    color = mix(vec3(1., 0., 0.), color, smoothstep(0., .01, max(-d4, d3)));\n    color = mix(color, vec3(0.), Segment(uv, vec2(.34, .4), vec2(.2, .7), .01));\n    color = plot(sdCircle(uv - vec2(.45, .75), .05), color, vec3(1.));\n    return color;\n}\n\nfloat mouth(vec2 uv) {\n    float d1 = sdCircle(uv - vec2(0., .07), .25);\n    float d2 = sdOrientedBox(uv, vec2(-1., .2), vec2(1., .2), .4);\n    return max(-d2, d1);\n}\n\nvec3 santa(vec2 uv) {\n    vec3 color = vec3(1., .33, .48);\n\n    // hat\n    color = hat(uv, color);\n\n    // face\n    color = plot(face(uv), color, vec3(1.));\n\n    // front face\n    // color = plot(f, color, vec3(1., .92, .84));\n    color = frontFace(uv, color);\n    // nose\n    color = plot(sdCircle(uv - vec2(0., .09), .05), color, vec3(1., 0., 0.));\n    // eyes\n    color = plot(sdCircle(uv - vec2(.15, .15), .01), color, vec3(0.));\n    color = plot(sdCircle(uv + vec2(.15, -0.15), .01), color, vec3(0.));\n    // mouth\n    color = plot(mouth(uv + vec2(0., .03)), color, vec3(1., 0., 0.));\n    return color;\n}\n\n#define AA 3\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec3 color = vec3(0.);\n\n    for(int n = 0; n < AA; n++) {\n        for(int m = 0; m < AA; m++) {\n            vec2 offset = vec2(float(n), float(m)) / float(AA) - .5;\n            vec2 uv = fixUV(fragCoord + offset);\n            color += santa(uv);\n        }\n    }\n    color /= float(AA * AA);\n\n    fragColor = vec4(color, 1.);\n}","name":"Image","description":"","type":"image"}]}