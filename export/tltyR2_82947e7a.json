{"ver":"0.1","info":{"id":"tltyR2","date":"1609541758","viewed":320,"name":"SoftClip2","username":"TinyTexel","description":"Another soft clip that generalizes the Reinhard tonemapping transfer function.","likes":7,"published":3,"flags":0,"usePreview":0,"tags":["function","tonemapping","clip","transfer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// License: CC0 (https://creativecommons.org/publicdomain/zero/1.0/)\n\n/*\n\tAnother soft clip that generalizes the Reinhard tonemapping transfer function:\n    \n    (    x + x^2 + x^3 + ... + x^n)\n    -------------------------------\n    (1 + x + x^2 + x^3 + ... + x^n) \n    \n    This version discretely truncates the series to n terms instead of \n    smoothly blending the higher order terms out as the orignal did.    \n    \n    related: https://www.shadertoy.com/view/wdtfRS | SoftClip\n*/\n\nfloat Reinhard(float x) { return x / (x + 1.0); }\nfloat ExpClip (float x) { return 1.0 - exp(-x); }\nfloat HardClip(float x) { return   min(x, 1.0); }\n\n// x: [0, inf], n: [1, inf] / (soft, hard]\nfloat SoftClipN(float x, const int n)\n{\n    float u = x;\n    \n    for(int i = 1; i < n; ++i)\n    u = u * x + x;\n    \n    return u / (u + 1.0);\n}\n\nfloat SoftClip2(float x)\n{\n    float u = x + x*x;\n    \n    return u / (u + 1.0);\n}\n\nfloat SoftClip3(float x)\n{\n    float u = (x + x*x) * x + x;\n    \n    return u / (u + 1.0);\n}\n\nfloat SoftClip4(float x)\n{\n    float u = ((x + x*x) * x + x) * x + x;\n    \n    return u / (u + 1.0);\n}\n\nfloat SoftClip5(float x)\n{\n    float u = (((x + x*x) * x + x) * x + x) * x + x;\n    \n    return u / (u + 1.0);\n}\n\n\nvoid mainImage( out vec4 outCol, in vec2 uv0 )\n{\n\tvec2 uv = uv0 - 0.5;\n    uv0 += .0;\n    \n    vec2 tex = uv0;\n    tex -= iResolution.xy * 0.125;\n    tex /= iResolution.xx * 0.125;\n\n    tex *= 0.25+0.0375;\n    \n\n    vec3 col = vec3(0.0);\n    \n\tcol = mix(vec3(1.0), vec3(0.9), Grid(tex.xy * 4.0, 0.0));        \n\tcol = mix(col, vec3(0.5), Grid(tex.xy * 1.0, 0.0));        \n\tcol = mix(col, vec3(0.125), Cross(tex.xy * 1.0, 0.)); \t\n    \n    \n    // relevant plotting code:\n    \n    // black\n    col = mix(col, vec3(0.), Graph(HardClip(tex.x) -tex.y, 1.));  \n    col = mix(col, vec3(0.), Graph(Reinhard(tex.x) -tex.y, 1.));  \n    \n    // grey\n    col = mix(col, vec3(0.5), Graph(ExpClip(tex.x) -tex.y, 1.) * 0.5);  \n    \n    // blue\n    col = mix(col, vec3(0.125, 0.5, 1.0), Graph(SoftClip2(tex.x) -tex.y, 1.));  \n    col = mix(col, vec3(0.125, 0.6, 1.0), Graph(SoftClip3(tex.x) -tex.y, 1.));  \n    col = mix(col, vec3(0.125, 0.7, 1.0), Graph(SoftClip4(tex.x) -tex.y, 1.));  \n    col = mix(col, vec3(0.125, 0.8, 1.0), Graph(SoftClip5(tex.x) -tex.y, 1.));  \n    \n    col = mix(col, vec3(0.125, 0.9, 1.0), Graph(SoftClipN(tex.x, 16) -tex.y, 1.));  \n    \n    \n    #if 1\n    vec2 s = (uv0/iResolution.xy*2.0-1.0);\n    s.x = 1.0-Pow2(s.x);    s.y = 1.0-Pow2(s.y);\n    col *= mix(1.0, 0.4, Pow2(1.0-sqrt(s.x*s.y)));\n    #endif\n    \n    outCol = vec4(GammaEncode(clamp01(col)), 1.0);    \n\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"\n#define Frame float(iFrame)\n#define Time iTime\n#define PixelCount iResolution.xy\n#define clamp01(x) clamp(x, 0.0, 1.0)\n#define rsqrt inversesqrt\n\nconst float Pi = 3.14159265359;\nconst float Pi05 = Pi * 0.5;\nconst float Pi2  = Pi * 2.0;\nconst float RcpPi= 1.0 / Pi;\n\nfloat Pow2(float x) {return x*x;}\nfloat Pow3(float x) {return x*x*x;}\nfloat Pow4(float x) {return Pow2(Pow2(x));}\n\nfloat GammaEncode(float x) {return pow(x, 1.0 / 2.2);}\nvec2 GammaEncode(vec2 x) {return pow(x, vec2(1.0 / 2.2));}\nvec3 GammaEncode(vec3 x) {return pow(x, vec3(1.0 / 2.2));}\nvec4 GammaEncode(vec4 x) {return pow(x, vec4(1.0 / 2.2));}\n\nfloat ddxyLen(float v) { return length(vec2(dFdx(v), dFdy(v))); }\nfloat ddxyRcpLen(float v) { return rsqrt( Pow2(dFdx(v)) + Pow2(dFdy(v)) ); }\n\n\nfloat rescale(float v) { return v * ddxyRcpLen(v); }\n\nfloat Graph(float f, float b)\n{\n    return clamp01(1.0 - (abs(rescale(f))-0.5-b)); \n}\n\n\nfloat Line(float u, float b) { return Graph(u, b); }\nfloat Lines(float u, float b) { return Graph(sin(u * Pi), b); }\n\nfloat Grid(vec2 uv, float b)\n{\n    float xl = Lines(uv.x, b);    \n    float yl = Lines(uv.y, b);\n\n    return max(xl, yl);\n}\n\nfloat Cross(vec2 uv, float b)\n{\n    float xl = Line(uv.x, b);    \n    float yl = Line(uv.y, b);\n\n    return max(xl, yl);\n}\n\nfloat Dot(vec2 sp, vec2 dp, float dr)\n{\n    float v = length(sp - dp) - dr;\n    \n    if(v > dr) return 0.0;\n    \n    v *= ddxyRcpLen(v);\n    v = 1.0 - clamp(v * 1.0, 0.0, 1.0);\n    \n    return v;\n}","name":"Common","description":"","type":"common"}]}