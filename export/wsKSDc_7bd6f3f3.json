{"ver":"0.1","info":{"id":"wsKSDc","date":"1575247588","viewed":57,"name":"eEstes_CheckerboardAssignment","username":"eestes","description":"assignment for GPR-200-02","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["graphicsprogramming"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float rows = 8.0;\nfloat columns = 8.0;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    uv.x *= ceil(rows);\n    uv.y *= ceil(columns);\n\n    //Get the x and y coordinate of each uv \"tile\" as a 1 or a 0\n    vec2 tile = vec2(mod(trunc(uv.x), 2.0), mod(trunc(uv.y),2.0));\n    \n    //set color channels to a 1 or a 0 based on the relative value of the x or y\n    vec3 col = vec3(abs(tile.x-tile.y), abs(tile.x-tile.y), abs(tile.x-tile.y));\n    \n    uv = fract(uv);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}