{"ver":"0.1","info":{"id":"XtKXWd","date":"1486508623","viewed":308,"name":"Simple Binary Clock","username":"ptrgags","description":"I've never used a binary clock. So I decided to make one.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","clock"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define CENTER (iResolution.xy / 2.0)\n#define THIRD (1.0 / 3.0)\n#define SIXTH (1.0 / 6.0)\n#define TWELFTH (1.0 / 12.0)\n#define ON_COLOR vec4(1.0, 0.0, 0.0, 1.0)\n#define OFF_COLOR vec4(0.3, 0.3, 0.3, 1.0)\n#define BACKGROUND vec4(0.0, 0.0, 0.2, 1.0)\n#define BLACK vec4(0.0)\n#define RADIUS 0.06\n\nvec4 display_digit(float decimal, vec2 uv, float x) {\n    vec4 color = BLACK;\n    \n    for (float i = 0.0; i < 4.0; i++) {\n        float bit_val = pow(2.0, i);\n        float bit = floor(mod(decimal / bit_val, 2.0));\n        vec2 center = vec2(x, i * 0.2 - 0.3);\n        float dist = distance(uv, center);\n        float circle = 1.0 - smoothstep(RADIUS - 0.005, RADIUS, dist);\n        color += circle * mix(OFF_COLOR, ON_COLOR, bit);\n\t}\n    \n    return color;\n}\n\n//Display the hours component in two columns\nvec4 display_hours(float hours, vec2 uv) {\n    float tens = hours / 10.0;\n    float ones = mod(hours, 10.0);\n    return display_digit(tens, uv, -4.0 * SIXTH + TWELFTH) \n        + display_digit(ones, uv, -3.0 * SIXTH + TWELFTH);\n}\n\n//Display the minutes component in two columns\nvec4 display_minutes(float minutes, vec2 uv) {\n    float tens = minutes / 10.0;\n    float ones = mod(minutes, 10.0);\n    return display_digit(tens, uv, -TWELFTH)\n        + display_digit(ones, uv, TWELFTH);\n}\n\n\n//Display the seconds component in two columns\nvec4 display_seconds(float seconds, vec2 uv) {\n    float tens = seconds / 10.0;\n    float ones = mod(seconds, 10.0);\n    return display_digit(tens, uv, 3.0 * SIXTH - TWELFTH)\n        + display_digit(ones, uv, 4.0 * SIXTH - TWELFTH);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //Get the UV Coordinates\n    vec2 uv = (fragCoord - CENTER) / iResolution.y;\n    \n    //Normalize the time components\n\tfloat hours = floor(iDate.w / 60.0 / 60.0);\n    float minutes = floor(mod(iDate.w / 60.0, 60.0));\n    float seconds = floor(mod(iDate.w, 60.0));\n    \n    fragColor = BACKGROUND;\n    \n    //Display HH MM SS in binary\n    if (uv.x < -THIRD) {\n        fragColor += display_hours(hours, uv);\n    } else if (uv.x < THIRD) {\n        fragColor += display_minutes(minutes, uv);\n    } else {\n        fragColor += display_seconds(seconds, uv);\n    }\n}","name":"Image","description":"","type":"image"}]}