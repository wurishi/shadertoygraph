{"ver":"0.1","info":{"id":"Mc2fWK","date":"1725538863","viewed":52,"name":"blitFrameBuffer test perf test","username":"jonasfrey","description":"performance test","likes":0,"published":3,"flags":32,"usePreview":0,"tags":["blitframebuffer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n        vec4 neighbor = texture(iChannel0, uv );\n    // Output to screen\n    fragColor = neighbor;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    // Size of a single pixel in texture coordinates\n    vec2 pixelSize = 1.0 / iResolution.xy;\n\n    // Initialize variables for the sum of neighbor values\n    float sum = 0.0;\n    int count = 0;\n\n    // Loop through a 9x9 kernel around the current pixel\n    for (int y = -33; y <= 33; y++) {\n        for (int x = -33; x <= 33; x++) {\n            // Offset texture coordinates for neighboring pixels\n            vec2 offset = vec2(float(x), float(y)) * pixelSize;\n            vec4 neighbor = texture(iChannel0, uv + offset);\n\n            // Here we assume we are interested in the red channel (neighbor.r)\n            sum += neighbor.r; // Sum up the red values\n            count += 1; // Keep track of the number of samples\n        }\n    }\n\n    // Calculate the average value of the neighbors\n    float average = sum / float(count);\n\n    // Apply some simple rule based on the average\n    float newState = average > 0.5 ? 1.0 : 0.0; // Example rule: if average > 0.5, set to 1, else 0\n\n    // Set the fragment color based on the new state\n    fragColor = vec4(vec3(newState), 1.0); // Grayscale output\n\n}","name":"Buffer A","description":"","type":"buffer"}]}