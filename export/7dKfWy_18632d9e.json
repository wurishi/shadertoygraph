{"ver":"0.1","info":{"id":"7dKfWy","date":"1658833002","viewed":87,"name":"Red Cuts UV","username":"CanadianWarship","description":"A variation of my Red Cuts shader using UV instead of pixel resolution, with better timing in the \"cutting\" of the center circle\nTry changing line 9 to sqrt(sqrt(...)), do you understand what happens?","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["red"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//optimized for 16:9\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n float mx = min(iResolution.x, 1e8);\n vec2 uv = gl_FragCoord.xy / mx;\n float Ratio = iResolution.y/(2.*iResolution.x);\n uv-=vec2(0.5, Ratio);\n uv *=2.0; // scale factor, larger = tighter circles\n float dist = (sqrt(dot(uv, uv))); //distance function, try sqrt(sqrt(...))\n float ang = atan(uv.y,uv.x);\n float invdist =0.1/dist;\n float spiral = dist*42.0 + .0*ang - (iTime); // spiral function\n    float primary = ceil(sin(spiral)); // circles\n    float opposite = min(1.,\n      ceil(invdist + sin(ang*5.+0.35*iTime)+0.25*sin(iTime))); // black zones\n    float result = 0.420*min(primary, opposite);\n \n\n fragColor = vec4(result, float(0) ,0.,1.);\n}","name":"Image","description":"","type":"image"}]}