{"ver":"0.1","info":{"id":"mtGSD3","date":"1686422880","viewed":75,"name":"KalaJda","username":"deep2universe","description":"I'm learning.  Playing with numbers and can't decide what looks best.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["experiment"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// cosine based palette, 4 vec3 params\nvec3 palette( in float t)\n{\n    //vec3 a = vec3(-0.602, 0.958, 0.714);\n    //vec3 b = vec3(1.728, 1.888, 2.407);\n    //vec3 c = vec3(1.208, 2.168, 2.976);\n    //vec3 d = vec3(0.148, 3.138, 2.578);\n    \n    vec3 a = vec3(2.5, 0.5, 2.5);\n    vec3 b = vec3(1.5, 2.9, 3.5);\n    vec3 c = vec3(3.3, 0.2, 1.5);\n    vec3 d = vec3(0.148, 0.138, 0.578);\n    \n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;    \n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.0);\n    \n    for(float i=0.0; i< 0.5; i++){ \n    \n        //uv = fract(uv * sin(i)/uv.x) -0.5;\n        //uv = fract(uv * 1.5) -0.5;\n\n        float d = length(uv) * exp(length(uv0)) * sin(i);\n        // Polar coordinates\n        float r = length(uv);\n        float a = atan(uv.y, uv.x);\n        float k = 3.0;\n        float m = cos(k*a + iTime / 2.) / (r + 0.001);\n        //m = sin(m*7.9 + iTime)/3.;\n     \n       \n\n        //vec3 col = palette(length(uv0) + d+r*0.4 + sin(iTime*0.4-r));\n        //vec3 col = palette(length(uv0) + -d+r*4.4 + sin(iTime*4.4-r));\n        //vec3 col = palette(length(uv0) + -d+r*4.4*cos(r) + cos(iTime*2.4+r*r));\n        //vec3 col = palette(length(uv0) + m+r*0.4 + sin(iTime*0.4-r));\n        vec3 col = palette(length(uv0) + m+d*0.4 + sin(iTime*0.4-r));\n        //vec3 col = palette(length(uv0) + m+d*0.4 + tan(iTime*0.4-m));\n        //vec3 col = palette(length(uv0) + m+m*1.4 + tan(iTime*0.6-m*2.));\n\n        //d = sin(d*8. + iTime)/8.;\n        //d = 3.*sin(d)/d;\n        //d = abs(d);\n        //d = pow(0.01/d, 0.2);\n        \n        m = sin(m*2. + iTime)/3.;\n        \n        finalColor += col *m;\n        \n    }\n    \n    fragColor = vec4(finalColor, .1);\n}","name":"Image","description":"","type":"image"}]}