{"ver":"0.1","info":{"id":"sllyDr","date":"1648551833","viewed":185,"name":"Distribution Golden_angle","username":"tbx","description":"Sampler distribution Golden_angle;\n\n","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["sampler"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// sampler point distribution with gloden angle\n\n#define GOLDEN_ANGLE 2.3998276806\n#define ITERATIONS 128\n\nfloat line(vec2 st, float width)\n{\n    return smoothstep(width, 0.0, abs(st.y - st.x));\n}\n\nfloat drawPoint(vec2 uv, vec2 p, float radius)\n{\n    float d = distance(uv, p);\n    return d < radius ? 1.0 : 0.0;\n}\n\nmat2 rotateMatrix(float rad)\n{\n    return mat2(cos(rad), sin(rad),\n                    -sin(rad), cos(rad));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    // uv.y *= iResolution.x / iResolution.y;\n    \n    // to[-1, 1]\n    uv = uv * 2.0 - 1.0;\n    \n    float colorR = 0.0;\n    float colorG = 0.0;\n    float colorB = 0.0;\n    \n    colorR = line(vec2(0.0, uv.x), 0.005);\n    colorG = line(vec2(uv.y, 0.0), 0.005);\n    \n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec2 startPos = vec2(0.0);\n    float step = 0.007;\n    float rad = 0.0;\n    float result = 0.0;\n    \n    for(int i = 0; i < ITERATIONS; i++)\n    {\n        float moveStep = float(i);\n\n        vec2 p = startPos + vec2(step * moveStep, 0.0);\n        rad = moveStep * (GOLDEN_ANGLE);\n        p = rotateMatrix(rad) * p;\n        \n        float d = 1.0 - distance(p, vec2(0.0));\n        \n        result += drawPoint(uv, p, 0.0085);\n    }\n    \n    vec3 col = vec3(colorR, colorG, colorB) + result;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}