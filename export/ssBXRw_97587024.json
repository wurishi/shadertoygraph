{"ver":"0.1","info":{"id":"ssBXRw","date":"1619870865","viewed":71,"name":"MorphingBox314","username":"Domain314","description":"intresting outcome of a short pre-breakfast shader session. kinda funny to watch. :D","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100    // int\n#define MAX_DIST 100.    // float\n#define SURF_DIST .01\n\nfloat Box(vec3 p, vec3 s) {\n    return length(max(abs(p)-s, 0.));\n}\n\nfloat GetDist(vec3 p) {   \n    float planeDist= p.y+2.1;\n    float boxDist = Box(p-vec3(-1., 0., 6.), vec3(1.3));\n    \n    float d = min(boxDist, planeDist);\n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n    float dO = 0.;\n    for(int i = 0; i < MAX_STEPS; i++){\n        vec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if (dO > MAX_DIST || dS < SURF_DIST) break;\n    }    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    float d = GetDist(p);\n    vec2 e = vec2(.01, 0.);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy), \n        GetDist(p-e.yxy), \n        GetDist(p-e.yyx));\n    return normalize(n);\n}\n\nfloat GetLight(vec3 p) {\n    vec3 lightPos = vec3(-4., 6., -4.);\n    vec3 l = normalize(lightPos - p);\n    vec3 n = GetNormal(p);\n    \n    float dif = dot(n, l); \n    float d = RayMarch(p+n*SURF_DIST*2., l);\n    if (d < length(lightPos-p)) dif *=.15;\n    return dif;\n}\n\nmat2 Rot (float i) {\n    float s = sin(i), c = cos(i);\n    return mat2(c, -s, s, c);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    uv *= 1.;\n    //uv *= Scale(uv*-1.);\n\n    // \"Whole magic of this shader\"\n    uv *= vec2(Rot(iTime));\n    // End of \"Whole magic of this shader\"\n    \n    vec3 col = vec3(0.);\n    \n    vec3 ro = vec3(sin(iTime)*2., cos(iTime), sin(iTime));\n    //vec3 ro = vec3(0., 1., 0.);\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1.));\n\n    float d = RayMarch(ro, rd);    \n    vec3 p = ro + rd * d;\n   \n    float dif = GetLight(p);\n    \n    col = vec3(dif);\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}