{"ver":"0.1","info":{"id":"lXyGzy","date":"1717793227","viewed":89,"name":"LiveArchive #04","username":"Flopine","description":"I'm digging up old shaders made during VJ sessions to archive them here! \n\nAlgorave Nogozon 2019","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","psychedelic","animation","vj"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan, slerpy, wwrighter \n// BigWings, FabriceNeyret and Blackle for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  \n// https://twitter.com/CookieDemoparty\n\n//Algorave Nogozon 2019\n\n\n#define PI 3.141592\n#define time iTime\n\nfloat hash1d (vec2 x)\n{return fract(sin(dot(x,vec2(1.45,8.151)))*45.489);}\n\nmat2 rot (float a)\n{return mat2(cos(a),sin(a),-sin(a),cos(a));}\n\nfloat moda (inout vec2 p, float rep)\n{\n    float per = 2.*PI/rep;\n    float a = atan(p.y,p.x);\n    float l = length(p);\n    float id = floor(a/per);\n    a = mod(a, per) - per*.5;\n    p = vec2(cos(a),sin(a))*l;\n    if (abs(id) >= rep/2.)id = abs(id);\n    return id;\n}\n\nvoid mo (inout vec2 p, vec2 d)\n{\n    p = abs(p)-d;\n    if (p.y>p.x) p.xy = p.yx;\n}\n\nvec2 rep2d (inout vec2 p, float rep)\n{\n    vec2 id = floor((p)/rep);\n    p = mod(p,rep)-rep*0.5;\n    return id;\n}\n\n// polynomial smooth min (k = 0.1);\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat stmin (float a, float b, float k, float n)\n{\n    float st = k/n;\n    float u = b-k;\n    return min(min(a,b),0.5*(u+a+abs(mod(u-a+st, 2.*st)-st)));\n}\n\nvec3 palette (float t, vec3 a, vec3 b, vec3 c, vec3 d)\n{return a+b*cos(2.*PI*(c*t+d));}\n\nfloat sphe (vec3 p, float r)\n{return length(p)-r;}\n\nfloat od (vec3 p, float r)\n{return dot(p, normalize(sign(p)))-r;}\n\nfloat box (vec3 p , vec3 c)\n{\n    vec3 q = abs(p)-c;\n    return min(0., max(q.x,max(q.y,q.z)))+length(max(q,0.));\n}\n\nfloat cyl (vec3 p, float r, float h)\n{return max(length(p.xy)-r, abs(p.z)-h);}\n\n\nfloat prim1 (vec3 p )\n{\n    float d = smin(od(p,.2), box(p, vec3(.5)), 0.5); \n    p.xz*= rot(time);\n    p.xz *= rot(p.y);   \n    float id = moda(p.xz, 3.);\n    p.x -= 1.;\n    d = min(d, cyl(p.xzy, 0.1, 4.));\n    return d;\n}\n\nfloat g3 = 0.;\nfloat fractal (vec3 p, float count)\n{\n    p.y += 1.;\n    float d = prim1(p);\n    for (float i=count; i>0.; i--)\n    {\n        float ratio = i/count;\n        p.xz = abs(p.xz) - 1.;\n\n        p.xz *= rot(PI/4.);\n        p.yz *= rot(time+ratio);\n        p.xz -= 1.8;\n        d = stmin(d, prim1(p),2., 5.);\n    }\n    \n    g3 += 0.1/(0.1+d*d);\n    \n    return d;\n}\n\nfloat water (vec3 p)\n{\n    p.y += sin(length(p.xz)-time*(5.))*0.5;\n    return abs(p.y)-0.5;\n}\n\nfloat g1 = 0.;\nfloat cylinders (vec3 p)\n{\n    vec2 ids = rep2d(p.xz, 15.); \n    \n    float s = max(-od(p-vec3(0.,10.,0.), .8),sphe(p-vec3(0.,10.,0.), 1.));\n    \n    p.xz *= rot(time);\n    p.xz *= rot(p.y*0.5);\n    float id = moda(p.xz, 5.);\n    p.x -= 2.;\n    float d = min(s,cyl(p.xzy, 0.2, 1e10));\n    \n    g1 += 0.1/(0.1+d*d);\n    \n    return d;\n}\n\nfloat SDF (vec3 p)\n{   \n    p.y +=2.;\n    return smin(fractal(p,3.),smin(water(p), cylinders(p), 0.8), 1.);\n}\n\n\n\nvec3 camera(vec3 ro, vec2 uv, vec3 ta) \n{\n    vec3 fwd = normalize(ta - ro);\n    vec3 left = normalize(cross(vec3(0, 1, 0), fwd));\n    vec3 up = normalize(cross(fwd, left));\n    return normalize(fwd + uv.x*left + up * uv.y);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = 2.*(fragCoord/iResolution.xy)-1.;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    float dither = hash1d(uv);\n    \n    uv.x += .3;\n    uv.y += .4;\n    \n    vec3 ro = vec3(-10.*sin(time)*0.8,3.,-15.* cos(time)); vec3 p = ro;\n    vec3 tar = vec3(0.,-2.,0.);\n    vec3 rd = camera(ro, uv, tar);\n    vec3 col = vec3(0.);\n    \n    float shad = 0.;\n    bool hit = false;\n\n    for (float i=0.; i<64.; i++)\n    {\n        float d = SDF(p);\n        if (d<0.001)\n        {\n            shad = i/64.;\n            hit = true;\n            break;\n        }\n        p += d*rd*0.8;\n    }\n\n    if (hit)\n    {\n        col = vec3(shad);\n        col += g1 * vec3(0.3,0.,0.3)*0.5;\n        col += g3*palette(p.z, vec3(0.5),vec3(0.5), vec3(0.2), vec3(0.2,0.1,.5))*0.2;\n    }\n    \n    float t = length(ro-p);\n    col = mix(col, palette(uv.y, vec3(0.5), vec3(0.5), vec3(0.5), vec3(0.3,0.6,0.5)), 1.-exp(-0.001*t*t));\n\n    fragColor = vec4(pow(col, vec3(2.1)), 1.);\n}","name":"Image","description":"","type":"image"}]}