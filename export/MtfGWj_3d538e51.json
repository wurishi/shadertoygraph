{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"// ALL TAKEN FROM IQs AMAZING SITE / TUTORIALS / SHADERS:\n// https://iquilezles.org/www/index.htm\n// https://www.shadertoy.com/user/iq\n\n\nconst float MAX_TRACE_DISTANCE = 10.0;           // max trace distance\nconst float INTERSECTION_PRECISION = 0.001;        // precision of the intersection\nconst int NUM_OF_TRACE_STEPS = 200;\n\n\n\n\nconst vec3 uDimensions = vec3(3. );\n//---\n// Camera Stuffs\n//----\nmat3 calcLookAtMatrix( in vec3 ro, in vec3 ta, in float roll )\n{\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(sin(roll),cos(roll),0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    return mat3( uu, vv, ww );\n}\n\nvoid doCamera( out vec3 camPos, out vec3 camTar, in float time, in float mouseX )\n{\n    float an = 0.3 + 10.0*mouseX;\n\tcamPos = vec3(3.5*sin(an),.0,3.5*cos(an));\n    camTar = vec3(0.0,0.0,0.0);\n}\n\nfloat sdSphere( vec3 p, float s ){\n  return length(p)-s;\n}\n\nfloat opRepSphere( vec3 p, vec3 c , float r)\n{\n    vec3 q = mod(p,c)-0.5*c;\n    vec3 re = (q-p)/c;\n    return sdSphere( q  , r * 1.9 - .1 * length(re) );\n}\n\n\nfloat opS( float d1, float d2 )\n{\n    return max(-d1,d2);\n}\n\nvec2 opS( vec2 d1, vec2 d2 )\n{\n    return  -d1.x > d2.x ? d2 : d1;\n}\n\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) +\n         length(max(d,0.0));\n}\n\n\nfloat subCube( vec3 pos ){\n\n  float r = opRepSphere( pos , vec3( .05 * uDimensions.x * 2. )  , .025 * uDimensions.x * 2.8);\n  r = opS( r ,sdBox( pos , vec3( .125 * uDimensions.x * 2. )) );\n\n  return r;\n\n}\n\n\n\n\n// checks to see which intersection is closer\n// and makes the y of the vec2 be the proper id\nvec2 opU( vec2 d1, vec2 d2 ){\n    \n\treturn (d1.x<d2.x) ? d1 : d2;\n    \n}\n\n\n//--------------------------------\n// Modelling \n//--------------------------------\nvec2 map( vec3 pos ){\n\n  //mat4 rot = rotateX(.5 + uTime * .3 ) * rotateZ( .3 + uTime * .2 );\n\n  //vec3 nPos = (rot * vec4( pos , 1. )).xyz;\n\n  vec2 res = vec2(subCube(pos) , 1.);\n\n  return res;\n\n}\n\n\nvec2 calcIntersection( in vec3 ro, in vec3 rd ){\n\n    \n    float h =  INTERSECTION_PRECISION*2.0;\n    float t = 0.0;\n\tfloat res = -1.0;\n    float id = -1.;\n    \n    for( int i=0; i< NUM_OF_TRACE_STEPS ; i++ ){\n        \n        if( h < INTERSECTION_PRECISION || t > MAX_TRACE_DISTANCE ) break;\n\t   \tvec2 m = map( ro+rd*t );\n        h = m.x;\n        t += h;\n        id = m.y;\n        \n    }\n\n    if( t < MAX_TRACE_DISTANCE ) res = t;\n    if( t > MAX_TRACE_DISTANCE ) id =-1.0;\n    \n    return vec2( res , id );\n    \n}\n\n\n\n// Calculates the normal by taking a very small distance,\n// remapping the function, and getting normal for that\nvec3 calcNormal( in vec3 pos ){\n    \n\tvec3 eps = vec3( 0.001, 0.0, 0.0 );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (-iResolution.xy + 2.0*fragCoord.xy)/iResolution.y;\n    vec2 m = iMouse.xy/iResolution.xy;\n\n    //-----------------------------------------------------\n    // camera\n    //-----------------------------------------------------\n    \n    // camera movement\n    vec3 ro, ta;\n    doCamera( ro, ta, iTime, m.x );\n\n    // camera matrix\n    mat3 camMat = calcLookAtMatrix( ro, ta, 0.0 );  // 0.0 is the camera roll\n    \n\t// create view ray\n\tvec3 rd = normalize( camMat * vec3(p.xy,2.0) ); // 2.0 is the lens length\n    \n    vec2 res = calcIntersection( ro , rd  );\n\n\n    vec3 col = vec3( 0. );\n\n    if( res.y > -.5 ){\n        \n        vec3 pos = ro + rd * res.x;\n        vec3 norm = calcNormal( pos );\n        \n        vec3 refrR = refract( rd , norm , 1. / 1.3 );\n        vec3 refrG = refract( rd , norm , 1. / 1.5 );\n        vec3 refrB = refract( rd , norm , 1. / 1.9 );\n\n\n        float dR = dot( refrR , rd );\n        float dG = dot( refrG , rd );\n        float dB = dot( refrB , rd );\n       \n        col = vec3( dR , dG , dB  );\n\t\t//col *= .3;\n  \n        \n    }\n\n    fragColor = vec4( col , 1. );\n\n\n\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MtfGWj","date":"1425114217","viewed":1361,"name":"refract shading cube test 1","username":"cabbibo","description":"Trying to see what I can do with refract in terms of shading","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["glsl","raytrace"],"hasliked":0,"parentid":"","parentname":""}}