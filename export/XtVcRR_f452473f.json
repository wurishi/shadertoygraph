{"ver":"0.1","info":{"id":"XtVcRR","date":"1534864208","viewed":160,"name":"Amplitude Varying Noise 2","username":"il_presidente","description":"A simple variation of the more classic Perlin Noise. In this variation, the initial amplitude is given by another Perlin Noise seed, properly scaled and shifted.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["perlinnoise","terraingeneration","amplitudevaryingnoise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float Random2D(in vec2 st)\n{\n\treturn fract(sin(dot(st.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nfloat hash1( vec2 p )\n{\n    p  = 50.0*fract( p*0.3183099 );\n    return fract( p.x*p.y*(p.x+p.y) );\n}\n\nfloat Interpolate(float a, float b, float x) {  // cosine interpolation\n\tfloat ft = x * 3.1415927f;\n\tfloat f = (1. - cos(ft)) * 0.5;\n\treturn  a * (1. - f) + b * f;\n}\n\nfloat InterpolatedNoise(float x, float y) {\n\tint integer_X = int(floor(x));\n\tfloat fractional_X = fract(x);\n\tint integer_Y = int(floor(y));\n\tfloat fractional_Y = fract(y);\n    \n\tvec2 randomInput = vec2(integer_X, integer_Y);\n\tfloat v1 = Random2D(randomInput + vec2(0.0, 0.0));\n\tfloat v2 = Random2D(randomInput + vec2(1.0, 0.0));\n\tfloat v3 = Random2D(randomInput + vec2(0.0, 1.0));\n\tfloat v4 = Random2D(randomInput + vec2(1.0, 1.0));\n    \n    \n\tfloat i1 = mix(v1, v2, smoothstep(0.0, 1.0, fractional_X));\n\tfloat i2 = mix(v3, v4,  smoothstep(0.0, 1.0, fractional_X));\n    \n   // float y1 = Interpolate(i1, i2, fractional_Y);\n    \n    \n\treturn mix(i1, i2, smoothstep(0.0, 1.0, fractional_Y));\n}\n\nconst mat2 m2 = mat2(  0.80,  0.60,\n                      -0.60,  0.80 );\n\nfloat perlin(vec2 st, in int nOctaves, float ampSeed){\n    \n    //st *= freq;\n    \n    //int numOctaves = 10;\n\tfloat persistence = 0.55;\n\tfloat total = 0.0,\n\t\tfrequency = 0.25,\n\t\tamplitude = ampSeed;\n\tfor (int i = 0; i < nOctaves; ++i) {\n\t\tfrequency *= 1.9;\n\t\tamplitude *= persistence;\n        st = frequency*m2*st;\n\t\ttotal += InterpolatedNoise(st.x,st.y) * amplitude;\n\t}\n\treturn total;\n}  \n\n#define THRESHOLD(x, t) (x < t ? 0.0 : x)\n#define SATURATE(x) clamp(x, 0.0, 1.0)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = fragCoord/iResolution.xy;\n    uv += 12.312421;\n    \n\tuv *= 3.0;\n\tfloat ampSeedSeed = SATURATE( (perlin ( (uv - 5.0)*5.0, 2, 1.0))*2.0 );\n    float ampSeed = SATURATE( (perlin((uv- 10.0)*10.0, 3, ampSeedSeed)-0.2)*3.0);\n    float col = perlin( (uv + 4.0)*13.0, 15, ampSeed);\n\n    //col = ampSeed;\n    fragColor = vec4(col);\n}","name":"Image","description":"","type":"image"}]}