{"ver":"0.1","info":{"id":"XXjfzV","date":"1731443900","viewed":94,"name":"Frequency clamped checkerboard","username":"stegu","description":"Demonstration of edge AA and frequency clamping. Magnifications are handled well by aastep(), but minifications are not. The fade-out color is too dark because I didn't do any gamma correction. (It would be guesswork anyway.)","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["checkerboard","aa"],"hasliked":0,"parentid":"X3jBDR","parentname":"Checkerboard pattern with AA"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float aastep(float threshold, float value) {\n  float afwidth = fwidth(value);  // fwidth(v) is |dFdx(v)| + |dFdy(v)|\n  return smoothstep(threshold-afwidth, threshold+afwidth, value);\n}\n\nvec2 aastep(vec2 threshold, vec2 value) {\n    vec2 afwidth;\n    afwidth = fwidth(value);\n    return smoothstep(threshold-afwidth, threshold+afwidth, value);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Semi-normalized pixel coordinates (-0.5 to 0.5 in y, uniform scaling)\n    vec2 st = (fragCoord.xy - iResolution.xy * 0.5) / iResolution.y;\n\n    float lr = fragCoord.x - iResolution.x * 0.5; // left/right in pixels\n\n    // Rotate a little to show the jaggies, and scale to show more squares\n    float a = 0.1 * (iTime);\n    float s = sin(a);\n    float c = cos(a);\n\n    st.y *= 3.5;\n    st /= 0.1*(2.0 - st.y); // Fake perspective\n\n    st = mat2(c, -s, s, c) * st; // Rotation\n\n    // Jaggy checkerboard pattern (quick but ugly)\n    vec2 steps = floor( 2.0*st - 0.5 ); // Line up to match AA version\n    float jaggycheckers = mod(steps.s + steps.t, 2.0); // A classic example\n\n    // Anti-aliased checkerboard pattern\n\tvec2 ramps = 2.0 * abs( fract( st ) - 0.5); // “Triangle waves”\n\tvec2 stripes = aastep( vec2(0.5, 0.5), ramps ); // 50% stripes\n\tfloat aacheckers = abs( stripes.x - stripes.y ); // “XOR” for overlaps\n\n    // Create a thin vertical line in the middle, with AA for good measure\n    float line = aastep(-1.0, lr) - aastep(1.0, lr); // 2 pixels wide\n    vec3 linecolor = vec3(1.0, 0.5, 0.0);\n\n    vec3 bgcol = vec3(1.0, 1.0, 0.7);\n    vec3 fgcol = vec3(0.5, 0.8, 0.5);\n    \n    mat2 J = mat2(dFdx(st), dFdy(st));\n    float freq = length(abs(vec4(J)));\n    float clampedcheckers = mix(aacheckers, 0.5, smoothstep(0.2, 0.35, freq));\n    vec3 clampedpattern = mix(bgcol, fgcol, clampedcheckers);\n    vec3 unclampedpattern = mix(bgcol, fgcol, aacheckers); // try \"jaggycheckers\"\n\n    // Show aliasing to the left, clamping to the right\n    vec3 col = (lr < 0.0) ? unclampedpattern : clampedpattern;\n    col = mix(col, linecolor, line); // Mix in the line\n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}