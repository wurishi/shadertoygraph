{"ver":"0.1","info":{"id":"dlSXDV","date":"1676739489","viewed":102,"name":"zackpudil sierpinski remix","username":"pb","description":"this is a Fork of https://www.shadertoy.com/view/4tGGRV, zackpudil deserves all the credit for how cool the lighting looks. I replaced the mandelbox with sierpinksi gasket and made some other changes.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["volumetric","sierpinski"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// fork of https://www.shadertoy.com/view/4tGGRV by zackpudil\n// zackpudil deserves all the credit for how cool the lighting looks. \n// I replaced the mandelbox with sierpinksi gasket and made some other changes.\n// philip.bertani@gmail.com\n\nint max_iter = 5;\nfloat ifs_scale = 1.9;\nvec3 ro;\n\nvec3[] d4 = vec3[] (\nvec3(1.,1.,1.),\nvec3(-1.,-1.,1.),\nvec3(1.,-1.,-1.),\nvec3(-1.,1.,-1)\n);\n\n\nfloat hash(float n) {\n    return fract(sin(n)*43578.5453);\n}\n\n\nmat3 rot(float an) {\n    float cc = cos(an), ss=sin(an);\n    return mat3(1,0.,0.,0.,cc,-ss,0.,ss,cc);\n\n}\n\n\nfloat de(vec3 z) {\n    \n    vec3 min_vtx;\n    vec3 orig_z = z;\n    int n=0;\n    float min_dist,dist_to_vtx;\n\n\n    for (int i=0; i<100; i++) {\n       \n        if ( i > max_iter ) break;\n\n        float sc = 1.0 + max(-.8,sin(iTime/2.));\n        float w = iTime;\n        vec3 dd_0 = rot(w)*d4[0]*sc;\n        min_vtx = dd_0;\n        min_dist=length(z-dd_0);\n        for (int j=1; j<4; j++) {\n            vec3 ddj = rot(w)*d4[j]*sc;\n            dist_to_vtx=length(z-ddj); \n            if (dist_to_vtx<min_dist) {min_vtx=ddj; min_dist=dist_to_vtx;}\n            \n        }\n        \n        z = min_vtx + ifs_scale*(z-min_vtx);\n        \n        n++;\n        \n    }\n\n    float dz = pow(ifs_scale, float(n) );\n    \n    float f = (length(z)-2.)/dz;\n    \n    float sz = 6.;\n \n    f = min(f, orig_z.y + sz);\n    f = min(f, min(orig_z.x + sz, -orig_z.x + sz));\n    f = min(f, min(orig_z.z + sz, -orig_z.z + sz));\n    \n    return f;\n}\n\nfloat trace(vec3 ro, vec3 rd, float mx) {\n    float t = 0.0;\n    for(int i = 0; i < 80; i++) {\n        float d = de(ro + rd*t);\n        if(d < 0.001 || t >= mx) break;\n        t += d;\n    }\n    \n    if(t < mx) return t;\n    return -1.0;\n}\n\n// Improvement thanks to Shane. vstrace= shadow trace in volumentric loop.\n// less detailed, dithering and breaks quicker.\nfloat vstrace(vec3 ro, vec3 rd, float mx) {\n    float t = 0.1*hash(dot(ro, rd));\n    for(int i = 0; i < 50; i++) {\n        float d = de(ro + rd*t);\n        if(d < 0.01 || t >= mx) break;\n        t += d;\n    }\n    \n    if(t < mx) return t;\n    return -1.0;\n}\n\nvec3 normal(vec3 p, out float e) {\n    vec2 h = vec2(0.001, 0.0);\n    \n    vec3 n1 = vec3(\n        de(p + h.xyy),\n        de(p + h.yxy),\n        de(p + h.yyx)\n\t);\n    \n    vec3 n2 = vec3(\n        de(p - h.xyy),\n        de(p - h.yxy),\n        de(p - h.yyx)\n\t);\n    \n    return normalize(n1 - n2);\n}\n\nvec4 texcube(sampler2D s, vec3 p, vec3 n) {\n    vec3 m = pow(n, vec3(30.0));\n    vec4 x = texture(s, p.zy);\n    vec4 y = texture(s, p.xz);\n    vec4 z = texture(s, p.xy);\n    \n    return (m.x*x + m.y*y + m.z*z)/(m.x + m.y + m.z);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n    \n    \n    vec3 ro = vec3(-2.9*sin(iTime*0.5), -1, 2.9*cos(iTime*0.5));\n    vec3 ww = normalize(vec3(0, -0.5, 0)-ro);\n    vec3 uu = normalize(cross(vec3(0, 1, 0), ww));\n    vec3 vv = normalize(cross(ww, uu));\n    vec3 rd = normalize(uv.x*uu + uv.y*vv + 1.97*ww);    \n    \n    \n    vec3 col = vec3(0.2);\n    \n    float t = trace(ro, rd, 30.0);\n    if(t > 0.0) {\n        float edg;\n        vec3 pos = ro + rd*t;\n        vec3 nor = normal(pos, edg);\n        \n        // ambient occlusion.\n        float occ = 0.0, sca = 1.0, ste = 0.003;\n        for(int i = 0; i < 15; i++) {\n            float d = de(pos + nor*ste);\n            occ += (ste - d)*sca;\n            sca *= 1.0;\n            ste += ste/(float(i) + 1.0);\n        }\n        occ = 1.0 - clamp(occ, 0.0, 1.0);\n        \n        vec3 lig = normalize(-pos);\n        float dis = length(pos);\n        \n        // direct lighting with hard shadows.\n        col += 0.3*clamp(dot(lig, nor), 0.0, 1.0)\n            *step(0.0, -trace(pos + nor*0.001, lig, dis));\n        \n        // indirect lighting with ambient occlusion.\n        col += 0.1*clamp(dot(-lig, nor), 0.0, 1.0)*occ;\n        \n        // material.\n        col *= texcube(iChannel0, 0.5*pos, nor).xyz;\n        \n        // edge emission texture           // avoid pixel dancing by fading the effect while the veiwer is farther away.\n        col += mix(col, vec3(0, 0.1, 2.1), edg/(0.7*length(ro))) * exp(-t/2.);\n    }\n    \n    // volumetric shadows\n    float s = hash(dot(uv, vec2(12.23, 39.343)))*0.05;\n    float vol = 0.0;\n    // need less light strength the closer you are to the light.\n    float e = 0.1*smoothstep(0.0, 4., length(ro));\n    for(int i = 0; i < 90; i++) {\n        if(s > t) break;\n        vec3 pos = ro + rd*s;\n        \n        vec3 lig = normalize(- pos);\n        float dis = length( pos);\n        \n        // shadow trace at each position along the march.\n        float l = step(0.0, -vstrace(pos, lig, dis));\n        // light strength is proportional to distance from light.\n        l *= e/dis;\n        \n        vol += l;\n        s += 0.05;\n    }\n    \n    // blue light rays.\n    col += 0.6*vec3(0.2*vol, 0.2*vol, vol);\n    \n    // vignetting\n    vec2 q = fragCoord/iResolution.xy;\n\tcol *= pow( 16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.25 );\n\n\tfragColor = vec4(col, 1);\n}","name":"Image","description":"","type":"image"}]}