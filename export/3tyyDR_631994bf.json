{"ver":"0.1","info":{"id":"3tyyDR","date":"1610748359","viewed":237,"name":"Line drawing & distance to line","username":"twenkid","description":"+ An optical illusion - the faster moving part of the line appears gray due to the motion (on my screen at least).\nhttps://stackoverflow.com/questions/52805523/distance-from-a-line-shadertoy  +\n","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["line","distance","smoothstep"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nhttps://stackoverflow.com/questions/52805523/distance-from-a-line-shadertoy\nAuthors: Notaduck, Rabbig76, Twenkid\n#15.1.2021\n*/\n\nfloat dfLine(vec2 O, vec2 dir, vec2 P)\n{\n    vec2 D = normalize(dir);\n    vec2 X = O + D * dot(P-O, D);\n\n    return distance(P, X);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x -= 0.5; //Puts the origin at the center of the screen\n\n    float lm = sin(iTime); //slope, 1.1\n    float lb = mix(0.5, 1.0, sin(iTime)); //0.5; //intercept    \n    vec2 P = vec2(uv.x, uv.y);\n    //float dist = dfLine(vec2(0.0, lb), vec2(1.0, lm),  vec2(uv.x,uv.y));\n    float dist = dfLine(vec2(0.0, lb), vec2(1.0, lm),  P);\n    \n    //vec3  color  = dist * vec3(1.0); \n    //float onLine = step(dist, 0.01);   // 1.0 if on line, else 0.0\n    float onLine = 1.0 - smoothstep(0.0, 0.02, dist);   // 1.0 if on line, else 0.0\n  \n    vec3  color  = onLine * vec3(1.0); \n\n    fragColor = vec4(color, 1.0);\n    \n}","name":"Image","description":"","type":"image"}]}