{"ver":"0.1","info":{"id":"mlj3Dd","date":"1674151584","viewed":107,"name":"Polypolar Jacobi Theta Function","username":"Crystalize","description":"Jacobi Theta Function on Domain Coloring! :D Gosh, is this the first thing I've made public? :O","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["domain","coloring","jacobi","theta"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//if you start with a megenta screen, try moving the y position of the mouse ;)\n\n#define TWOPI 6.283185307179586476\n#define PI 3.141592653589793238\n\n\n#define inf 25\n#define speed 0.25\n#define N 3.\n\nvec2 cmul(vec2 z, vec2 c) {\n    return vec2(z.x * c.x - z.y * c.y, z.x * c.y + z.y * c.x);\n}\n\n//not using cpow here, but it's a nifty function so we'll leave it alone :P\nvec2 cpow(vec2 z, vec2 p) {\n    float a = atan(z.y, z.x);\n    float lnr = 0.5 * log(dot(z,z));\n    float m = exp(p.x * lnr - p.y * a);\n    float angle = p.x * a + p.y * lnr + TWOPI;\n    return vec2(cos(angle), sin(angle)) * m;\n}\n\nvec2 cexp(vec2 z) {\n    return vec2(cos(z.y), sin(z.y)) * exp(z.x);\n}\n\nvec2 clog(vec2 z) {\n    return vec2(0.5 * log(dot(z,z)), atan(z.y, z.x));\n}\n\nvec2 jacTheta(vec2 z, float time, float t) {\n    vec2 T = vec2(time, abs(t));\n    vec2 sum = vec2(0.0);\n    for(int i = -inf; i < inf; i++) {\n        vec2 f = cexp(cmul(cmul(vec2(0.0, PI), vec2(i*i,0.0)), T) + cmul(cmul(vec2(0.0, TWOPI), vec2(i,0.0)), z));\n        sum += f;\n    }\n    return sum;\n}\n\nfloat l(float r) {\n    return 2.0 / PI * atan(r);\n}\n\n\nfloat hue2rgb(float p, float q, float t) {\n    do{\n      if(t < 0.0) t += 1.0;\n      if(t > 1.0) t -= 1.0;\n    } while (t < 0.0 || t > 1.0);\n\n  if(t < 1.0 / 6.0) return p + (q - p) * 6.0 * t;\n  if(t < 1.0 / 2.0) return q;\n  if(t < 2.0 / 3.0) return p + (q - p) * (2.0 / 3.0 - t) * 6.0;\n  return p;\n}\n\nvec3 hslToRgb(float h, float s, float l) {\n  float r, g, b;\n\n  if(s == 0.0) {\n    r = g = b = l; // achromatic\n  } else {\n    float q = l < 0.5 ? l * (1.0 + s) : l + s - l * s;\n    float p = 2.0 * l - q;\n\n    r = hue2rgb(p, q, h + 1.0 / 3.0);\n    g = hue2rgb(p, q, h);\n    b = hue2rgb(p, q, h - 1.0 / 3.0);\n  }\n\n  return vec3(r,g,b);\n}\n\nvec3 domainColoring(vec2 z) {\n    float H = atan(z.y/z.x) - TWOPI / 3.0;\n    float S = 1.0;\n    float L = l(length(z));\n    return hslToRgb(H,S,L);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = 2.0 * (fragCoord.xy - 0.5*iResolution.xy) / -iResolution.y;\n    float time = iTime*speed;\n    uv = cmul(uv, vec2(cos(time), sin(time)));\n    uv = clog(uv)*(N*0.5);\n    uv = cexp(uv);\n    \n    uv = jacTheta(uv, iTime*speed + iMouse.x/iResolution.x, iMouse.y/iResolution.y*5.0-2.5);\n    \n    vec3 col = domainColoring(uv);\n    \n    \n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}