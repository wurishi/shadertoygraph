{"ver":"0.1","info":{"id":"l3XcW8","date":"1726098463","viewed":10,"name":"Dizzy Flower","username":"cocokneer","description":"CIS 5660 Lab 1","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["toolbox"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/**\n * @author rah, inspired by jonobr1 / http://jonobr1.com/\n */\n\n/* \n * Output circle colors at given center pos and radius\n */\nvec4 circle(vec2 uv, vec2 center, float radius, vec3 color)\n{\n    // Get distance of point from center, get difference from given radius\n\tfloat d = length(center - uv) - radius;\n\tfloat t = clamp(d, 0.0, 1.0);\n    \n    vec3 red = rgb(225.0, 50.0, 70.0);\n    vec3 pink = rgb(215.0, 150.0, 100.0);\n    vec3 blue = rgb(176.f, 224.f, 230.f);\n    vec4 flower = vec4(mix(pink, red, length(center - uv) * 0.8f/radius), 1.0 - t);\n    float time = (cos(2.f * iTime) + 1.f)*0.5f;\n    time = bias(time, 0.2f);\n    vec4 backGround = vec4(mix(blue, pink, mix(0.5f, (sin(length(center - uv) * fract(0.2f * iTime)) + 1.f) * 0.5f, time)), 1.f);\n    vec4 outColor = d >= 0.f ? backGround : flower; \n    // If point is smaller than radius, set color alpha to 1, otherwise 0\n\treturn outColor;\n}\n\n/*\n * Your work here!\n */\nfloat computeRadius(vec2 uv)\n{\n    float radius = 0.25 * iResolution.y;\n    \n    // Centered uv\n    vec2 uvCenter = (2.0f * uv - iResolution.xy);\n    uvCenter = rotatePoint2d(uvCenter, vec2(0.f, 0.f), 0.8f * iTime);\n    float a = atan(uvCenter.x,uvCenter.y);\n    \n    float t = fract(0.18f * iTime);\n    float targetPos = 0.f;\n    float t2 = 0.f;\n    if (t < 0.5f)\n    {\n        if (t < 0.25f)\n        {\n            t2 = mix(0.f, 1.f, t/0.25f);\n        }else{\n            t2 = mix(1.f, 0.f, (t - 0.25f)/0.25f);\n        }\n        targetPos = radius + 40.f * triangleWave(a, 8.f, 10.f) + 25.f * sin(15.f*a);\n    }else\n    {\n        if (t < 0.75f)\n        {\n            t2 = mix(0.f, 1.f, (t - 0.5f)/0.25f);\n        }else{\n            t2 = mix(1.f, 0.f, (t - 0.75f)/0.25f);\n        }\n        targetPos = radius - 20.f * triangleWave(a, 8.f, 10.f) - 25.f * sin(15.f*a);\n    }\n    return mix(radius, targetPos, bias(t2, 0.7f));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n\tvec2 uv = fragCoord.xy;\n\tvec2 center = iResolution.xy * 0.5;\n\tfloat radius = computeRadius(uv);\n    \n    // Background layer\n\tvec4 layer1 = vec4(rgb(255.0, 215.0, 210.0), 1.0);\n\t\n\t// Circle\n\tvec3 red = rgb(225.0, 50.0, 70.0);\n\tvec4 layer2 = circle(uv, center, radius, red);\n\t\n\t// Blend the two\n\tfragColor = mix(layer1, layer2, layer2.a);\n\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/*\n * Toolbox functions! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n */ \nfloat bias(float t, float b) {\n    return (t / ((((1.0/b) - 2.0)*(1.0 - t))+1.0));\n}\n\n/*\n * Basic Utilities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n */\n\n\n/* \n * Rotate an input point about some center by angle\n */\nvec2 rotatePoint2d(vec2 uv, vec2 center, float angle)\n{\n    vec2 rotatedPoint = vec2(uv.x - center.x, uv.y - center.y);\n    float newX = cos(angle) * rotatedPoint.x - sin(angle) * rotatedPoint.y;\n    rotatedPoint.y = sin(angle) * rotatedPoint.x + cos(angle) * rotatedPoint.y;\n    rotatedPoint.x = newX;\n    return rotatedPoint;\n}\n\nfloat triangleWave(float x, float freq, float amplitude)\n{\n    return abs(mod((x*freq), amplitude) - (0.5 * amplitude));\n}\n\n/*\n * Make a vec3 color from rgb values [0, 255]\n */\nvec3 rgb(float r, float g, float b)\n{\n\treturn vec3(r / 255.0, g / 255.0, b / 255.0);\n}\n","name":"Common","description":"","type":"common"}]}