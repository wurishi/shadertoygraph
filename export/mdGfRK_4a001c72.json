{"ver":"0.1","info":{"id":"mdGfRK","date":"1698385618","viewed":48,"name":"Vortex of Silver","username":"Syntaxxor","description":"Click around on the screen to see the effect.\n\nPut together while listening to The Silver Cord by King Gizzard and the Lizard Wizard. Real good album.","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["2d","mousecontrolled"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 col_fun(float val) {\n    vec3 cols[6] = vec3[](\n        vec3(0.0),\n        vec3(0.8, 0.4, 0.6),\n        vec3(1.0, 0.5, 0.5),\n        vec3(0.2, 0.8, 1.0),\n        vec3(0.8, 1.0, 0.5),\n        vec3(1.0)\n    );\n    if(val > 1.0) {\n        return mix(cols[4], cols[5], (val - 1.0) * 4.0);\n    } else if(val > 0.75) {\n        return mix(cols[3], cols[4], (val - 0.75) * 4.0);\n    } else if(val > 0.5) {\n        return mix(cols[2], cols[3], (val - 0.5) * 4.0);\n    } else if(val > 0.25) {\n        return mix(cols[1], cols[2], (val - 0.25) * 4.0);\n    } else {\n        return mix(cols[0], cols[1], val * 4.0);\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = vec4(col_fun(texture(iChannel0, uv).x), 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n#define NUM_ORBS 16\n#define DIST_PER 16.0\n#define ROT_OFF_PER 1.5\n\nconst float ORB_SPEED[NUM_ORBS] = float[](\n    1.6,\n    1.5,\n    1.4,\n    1.3,\n    1.2,\n    1.1,\n    1.0,\n    0.9,\n    0.8,\n    0.7,\n    0.6,\n    0.5,\n    0.4,\n    0.3,\n    0.2,\n    0.1\n);\n\n// Map function by companje on GitHub\nfloat map(float value, float min1, float max1, float min2, float max2) {\n  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}\n\nfloat update(in vec2 fragCoord) {\n    vec2 dir_to_mouse = iMouse.xy - fragCoord;\n    \n    \n    float dist = map(1.0 / (length(dir_to_mouse) * 0.002 + 1.0), 0.9, 1.0, 0.0, 1.0);\n    \n    dist = clamp(dist, 0.0, 1.0);\n    \n    return dist * dist;\n}\n\nvec2 transform(vec2 point, float offset, float rotation) {\n    float s = sin(rotation);\n    float c = cos(rotation);\n    \n    return vec2(s, c) * offset + point;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float d = update(fragCoord);\n    for(int i = 1; i < NUM_ORBS; i++) {\n        float rot_dir = 1.0;\n        if(i % 2 == 0) {\n            rot_dir = -1.0;\n        }\n        rot_dir *= ORB_SPEED[i];\n        \n        float dist_off = sin(iTime * 4.0) * rot_dir;\n        \n        d += update(transform(fragCoord, (float(i) + dist_off) * DIST_PER, iTime * rot_dir + float(i) * ROT_OFF_PER * rot_dir));\n    }\n    fragColor = vec4(d, 0.0, 0.0, 0.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if(iFrame == 0){\n        fragColor = vec4(0.0);\n    } else {\n        vec2 uv = fragCoord / iResolution.xy;\n    \n        //float prev_value = texture(iChannel1, uv).x;\n        float prev_value = textureOffset(iChannel1, uv, ivec2(1.0, 0.0)).x;\n        prev_value += textureOffset(iChannel1, uv, ivec2(-1.0, 0.0)).x;\n        prev_value += textureOffset(iChannel1, uv, ivec2(0.0, 1.0)).x;\n        prev_value += textureOffset(iChannel1, uv, ivec2(0.0, -1.0)).x;\n        prev_value *= 0.25;\n        prev_value -= iTimeDelta * 0.2;\n        \n        float max_val = max(max(texture(iChannel0, uv).x, prev_value), 0.0);\n\n        fragColor = vec4(vec3(max_val), 1.0);\n    }\n}","name":"Buffer B","description":"","type":"buffer"}]}