{"ver":"0.1","info":{"id":"clKBzD","date":"1701889693","viewed":38,"name":"fractal space","username":"nayk","description":"fractal,random,space,new,copypast","likes":3,"published":1,"flags":1,"usePreview":0,"tags":["fractal","random","space","new","copypast"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*original https://www.shadertoy.com/view/lslyRn, /* original https://www.shadertoy.com/view/lsyXDK https://www.shadertoy.com/view/lslyRn https://www.shadertoy.com/view/DlycWR and other*/\n#define iterations 17\n#define formuparam 0.53\n\n#define volsteps 20\n#define stepsize 0.1\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.000\n\n#define brightness 0.0015\n#define darkmatter 0.300\n#define distfading 0.730\n#define saturation 0.850\n#define R(p,a,r)mix(a*dot(p,a),p,cos(r))+sin(r)*cross(p,a)\n#define H(h)(cos((h)*6.3+vec3(0,23,21))*.5+.5)\n\nprecision mediump float;\n\nfloat PI = 3.1415926;\nfloat pix;\n\nfloat rand(float x) {\n  return fract(sin(x));\n}\n\nfloat noise(float x) {\n  float i = floor(x);\n  float f = fract(x);\n  return mix(rand(i), rand(i+10.), smoothstep(0.,1.,f));\n}\n\nfloat sdBox(in vec2 p, in vec2 b) {\n  vec2 d = abs(p) - b;\n  return length(max(d, 0.0)) + min(max(d.x, d.y), 0.0);\n}\n\nvec3 palette(float t) {\n  vec3 a = vec3(1.000,0.500,0.500);\n  vec3 b = vec3(0.500,0.500,0.500);\n  vec3 c = vec3(0.750,1.000,0.667);\n  vec3 d = vec3(0.800,1.000,0.333);\n  return a + b * cos(6.28318 * (c * t + d));\n}\n\n\nvec2 rotate(vec2 p, float a) {\n  float s = sin(a);\n  float c = cos(a);\n  mat2 matrix = mat2(c,-s,s,c);\n  return p * matrix;\n}\n\nvec3 createBox(vec2 st, float seed) {\n  float i = (noise(iTime+seed))*10.;\n\n  float theta = sin(noise(iTime+i)) * PI*4.;\n  st = rotate(st, theta);\n  float size = abs(sin(noise(iTime+i)));\n  float xoff = (sin(noise(iTime+i)))/10.;\n  float yoff = (sin(noise(iTime+i)))/10.;\n  st += vec2(xoff,yoff);\n  vec3 color = palette(noise(iTime*i));\n\n  float box = sdBox(st,vec2(size,size));\n  float smoothStart = abs(sin(noise(iTime * i)))*10.*pix;\n  float smoothEnd = abs(sin(noise(iTime * i)))*40.*pix;\n  float b = 1. - smoothstep(smoothStart,smoothEnd,abs(box-0.1));\n\n  return b*color;\n}\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 ro, in vec3 rd )\n{\n//get coords and direction\nvec3 dir=rd;\nvec3 from=ro;\n\n//volumetric rendering\nfloat s=0.1,fade=1.;\nvec3 v=vec3(0.);\nfor (int r=0; r<volsteps; r++) {\nvec3 p=from+s*dir*.5;\np = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\nfloat pa,a=pa=0.;\nfor (int i=0; i<iterations; i++) {\np=abs(p)/dot(p,p)-formuparam; // the magic formula\na+=abs(length(p)-pa); // absolute sum of average change\npa=length(p);\n}\n//dark matter\na*=a*a; // add contrast\nif (r>6) fade*=1.2; // dark matter, don't render near\n//v+=vec3(dm,dm*.5,0.);\nv+=fade;\nv+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\nfade*=distfading; // distance fading\ns+=stepsize;\n}\nv=mix(vec3(length(v)),v,saturation); //color adjust\nfragColor = vec4(v*.01,1.);\n}\nfloat cheap_star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\n\nfloat random (vec2 st) {\n    return fract(tan(dot(vec2(cos(iTime),sin(iTime)),st.xy))* 10.5453123);\n}\n#define Rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n//get coords and direction\nvec2 uv=fragCoord.xy/iResolution.xy-.5;\nuv.y*=iResolution.y/iResolution.x;\nvec3 dir=vec3(uv*zoom,1.);\nfloat time=iTime*speed+.25;\n    vec4 O =fragColor;\n    vec2 C =fragCoord;\n   float rnd = random(uv.xy);\n O=vec4(0);\n    vec3 p,q,r=iResolution,\n    d=normalize(vec3((C*2.-r.xy)/r.y,1));  \n    for(float i=0.,a,s,e,g=0.;\n        ++i<110.;\n        O.xyz+=mix(vec3(3),H(g*2.1),sin(2.8))*1./e/8e3\n    )\n    {\n        p=g*d;\n        float rnd2 = noise(20.);\n        p.z+=-iTime*3.5;\n        a=60.;\n        p=mod(p-a,a*2.)-a;\n        s=5.;\n          \n            float t = mod(iTime*0.1,4.);\n     vec2 st = (fragCoord.xy * 2. - iResolution.xy) / min(iResolution.x, iResolution.y);\n  pix = 1./iResolution.y;\n  vec3 fin_c = vec3(0., 0., 0.);\nst*=fract(iTime*0.1);\n  for(float i=0.;i<10.;i++) {\n    vec3 box = createBox(st, i*0.11);\n    fin_c += box;\n  }\n    if(t<1.){\n       p.xz*=Rot(iTime);\n       p.yx*=Rot(-iTime);\n       \n    } else if (t>=1. && t<2.){\n     p.yz*=Rot(-iTime);\n       p.xz*=Rot(-iTime);\n    } else if (t>=2. && t<3.){\n         \n          p.xz*=Rot(iTime);\n    } else if (t>=3. && t<4.){\n        p.yx*=Rot(-iTime);\n   p.yz*=Rot(-iTime);\n       \n        }    \n        for(int i=0;i++<8;){\n            p=.23-abs(p);\n            ;\n            p.x<p.z?p=p.zyx:p;\n            p.z<p.y?p=p.xzy:p;\n     \n            s*=e=1.4+sin(-iTime*.234)*.1;\n            p=abs(p)*e- vec3( 10.+cos(iTime)+1.*sin(iTime*rnd)*0.2,101., 5.+cos(iTime-rnd2)*2. );\n         }\n         g+=e=length(p.yz)/s;\n            \n    }\n     uv *= 2.0 * ( cos(iTime * 2.0) -2.5);\n     \n    // anim between 0.9 - 1.1\n    float anim = sin(iTime * 12.0) * 0.1 + 1.0;    \nvec3 from=vec3(1.,.5,0.5)+O.xyz;\nfrom+=vec3(time*2.,time,-2.);\n\nmainVR(fragColor, fragCoord, from, dir);\n    fragColor+=O;\n        fragColor*= vec4(cheap_star(uv,anim) * vec3(0.35,0.52,0.75)*.3, 1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}