{"ver":"0.1","info":{"id":"dtfcRN","date":"1690454684","viewed":47,"name":"glow shader particle dots","username":"nayk","description":"glow shader particle dots","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["glowshaderparticledots"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define time iTime*1.0025\n\n\nconst float numParticles = 50.;\nconst float numRings = 8.;\nconst float offsetMult = 30.;\nconst float tau = 6.23813;\nconst float PI = 3.14;\n\nmat2 rotationMatrix(float angle)\n{\n\tangle *= PI / 180.0;\n    float s=sin(angle), c=cos(angle);\n    return mat2( c, s, -s, c );\n}\n\nfloat stepup(float t, float len, float smo)\n{\n    float tt = mod(t += smo, len);\n    float stp = floor(t / len) - 1.0;\n    return smoothstep(1.0, smo, tt) + stp;\n}\n\nvec3 palette( float t ) {\n    vec3 a = vec3(cos(iTime*stepup(iTime*0., 0.50, 0.5))*1.2, 0.2, 0.5);\n    vec3 b = vec3(0.5, stepup(sin(iTime*5.5), cos(iTime*5.5), 0.5), 0.5);\n    vec3 c = vec3(1.0, sin(iTime*stepup(iTime*0., 0.50, 0.5))*1.0, 1.0);\n    vec3 d = vec3(1.263,0.416,0.557*sin(iTime*stepup(iTime*0.15, 0.50, 0.5) * 0.05)*1.0);\n\n    return a*c + b*cos( 6.28318*(c*t+d) );\n}\n\nvec3 particleColor(vec2 uv, float radius, float offset, float periodOffset)\n{\n     vec3 color = palette(length(uv));\n    uv *= pow(periodOffset, .75) * sin(periodOffset * iTime) + sin(periodOffset + iTime);\n    vec2 pos = vec2(cos(offset * offsetMult + time + periodOffset),\n        \t\tsin(offset * offsetMult + time * 5. + periodOffset * tau));\n    \n    float dist = radius / distance(uv, pos);\n    return color * pow(dist, 2.) * 0.75;\n} \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2. * fragCoord - iResolution.xy) / iResolution.x;\n     float speed = stepup(sin(iTime*5.5), cos(iTime*5.5), 0.5) * 0.00;\n     uv *= rotationMatrix( 10.*speed * iTime );\n\n\n    fragColor.rgb = vec3(0.2);\n    \n    for (float n = 0.; n <= numRings; n++)\n    {\n        for (float i = 0.; i <= numParticles; i++) {\n        \tfragColor.rgb += particleColor(uv, .03, i / numParticles, n / 2.);\n    \t}\n    }\n}","name":"Image","description":"","type":"image"}]}