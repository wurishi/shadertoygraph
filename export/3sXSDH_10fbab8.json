{"ver":"0.1","info":{"id":"3sXSDH","date":"1551135161","viewed":166,"name":"Complex domain coloring","username":"darkeclipz","description":"Trying out domain coloring, see:\n\nVisualizing complex analytic functions using domain coloring\nhttp://users.mai.liu.se/hanlu09/complex/domain_coloring.html","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["domain","complex","coloring"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define R iResolution.xy\n#define pi 3.1415926535\n#define AA 4.\n#define AA2 (AA*AA)\n#define D 0.05\n\n// complex number operations, from iq\nvec2 cadd( vec2 a, float s ) { return vec2( a.x+s, a.y ); }\nvec2 cmul( vec2 a, vec2 b )  { return vec2( a.x*b.x - a.y*b.y, a.x*b.y + a.y*b.x ); }\nvec2 cdiv( vec2 a, vec2 b )  { float d = dot(b,b); return vec2( dot(a,b), a.y*b.x - a.x*b.y ) / d; }\nvec2 csqrt( vec2 z ) { float m = length(z); return sqrt( 0.5*vec2(m+z.x, m-z.x) ) * vec2( 1.0, sign(z.y) ); }\nvec2 conj( vec2 z ) { return vec2(z.x,-z.y); }\nvec2 cpow( vec2 z, float n ) { float r = length( z ); float a = atan( z.y, z.x ); return pow( r, n )*vec2( cos(a*n), sin(a*n) ); }\n\nvec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d ) {\n    return a + b*cos( 2.*3.1415*(c*t+d) );\n}\n\nvec3 color1(float t) {\n\tvec3 a = vec3(.5), b = vec3(.5), c = vec3(1.0), d = vec3(0., .33, .67);\n    return palette(t, a, b, c, d);\n}\n\nvec3 color2(float t) {\n\tvec3 a = vec3(.821, .328, .242), b = vec3(.659, .481, .896), c = vec3(0.612, 0.34, 0.296), d = vec3(2.82, 3.026, -0.273);\n    return palette(t, a, b, c, d);\n}\n\nfloat checker(vec2 p, float scale) {\n    p = trunc(fract(p)*scale);\n    if(mod(p.x + p.y, 2.) == 0.) return 1.;\n    return 0.;\n}\n\nvoid mainImage( out vec4 O, in vec2 U )\n{\n    vec3 samples = vec3(0);\n    for(float aax=0.; aax < AA; aax++)\n    for(float aay=0.; aay < AA; aay++)\n    {\n    \tvec2 uv = (2.*(U+vec2(aax, aay)/AA)-R)/R.y;  \n        \n        uv *= 3.;\n        uv = cmul(cmul(cpow(uv + vec2(2.,0), 2.), (uv - vec2(1., 2.))), uv + vec2(0,1.)); \n\t\t//uv = cmul(cpow(uv, 6.), uv - vec2(0,cos(iTime/4.)));\n       \t//uv = cdiv( conj(uv - vec2(1,0)), conj(uv + vec2(1,0))); \n        \n       \n        vec3 col = vec3(0);\n        float a = (pi + atan(uv.y, uv.x)) / (2.*pi);\n        float b = fract(log2(length(uv)));       \n        vec2 c = smoothstep(D, 0., abs(fract(uv)-D));\n        samples += color1(a) * clamp(b, .5, 1.) - (c.x+c.y); // grid\n        //samples += color1(a) * clamp(b, .5, 1.) * clamp(checker(uv, 4.), .4, 1.); // checker\n    }\n   \n    O = vec4(samples/AA2, 1.0);\n}","name":"Image","description":"","type":"image"}]}