{"ver":"0.1","info":{"id":"wtKBDy","date":"1615007489","viewed":279,"name":"A cubic marble","username":"I_am_6r1d","description":"I saw a \"Playing marble\" shader by S. Guillitte and decided to change its code a bit. I think there's some result.\n\nI also want to know how to make an octahedron intersection function. If someone can tell, that'll be great!","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["3d","fractal","volumetric"],"hasliked":0,"parentid":"MtX3Ws","parentname":"Playing marble"},"renderpass":[{"inputs":[],"outputs":[],"code":"// A fork of \"Playing marble\" by S. Guillitte 2015.\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// (original: https://www.shadertoy.com/view/MtX3Ws)\n\n// Uses a box intersection function by iq and animates the fractal part.\n\n// I wish I knew how to make an octahedron intersection function, too!\n// Aand I lost my train of thought long ago, anyway.\n\nconst float PI = 3.14159265;\n\nfloat zoom=1.5;\n\nvec2 cmul( vec2 a, vec2 b )  { return vec2( a.x*b.x - a.y*b.y, a.x*b.y + a.y*b.x ); }\nvec2 csqr( vec2 a )  { return vec2( a.x*a.x - a.y*a.y, 2.*a.x*a.y  ); }\n\n\nmat2 rot(float a) {\n\treturn mat2(cos(a),sin(a),-sin(a),cos(a));\t\n}\n\nvec2 iBox( in vec3 ro, in vec3 rd, in vec3 rad) \n{\n\t// ray-box intersection in box space\n    vec3 m = 1.0/rd;\n    vec3 n = m*ro;\n    vec3 k = abs(m)*rad;\n\t\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n    \n\tfloat tN = max(max( t1.x, t1.y ), t1.z);\n\tfloat tF = min(min( t2.x, t2.y ), t2.z);\n\n\treturn vec2(max(tN,0.0), tF);\n}\n\nfloat map(in vec3 p) {\n\t\n\tfloat res = 0.;\n\t\n    vec3 c = p;\n\tfor (int i = 0; i < 10; ++i) {    \n        p =.7*abs(p)/dot(p,p) -.7;\n        p=p.zxy;\n        res += exp(-33. * abs(dot(p,0.65*c)));        \n\t}\n\treturn res;\n}\n\nvec3 raymarch( in vec3 ro, vec3 rd, vec2 tminmax )\n{\n    float t = tminmax.x;\n    float dt = .02;\n    vec3 col= vec3(0.);\n    float c = 0.;\n    for( int i=0; i<128; i++ )\n\t{\n        t+=exp((-sin(2.*iTime)+sin(iTime+PI))*c);\n        if(t>tminmax.y) break;\n        vec3 pos = ro+t*rd;\n        \n        c = map(ro+t*rd);               \n        \n        col = .99*col+ .08*vec3(c*c*c, c*c, c);\n    }    \n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfloat time = iTime;\n    vec2 q = fragCoord.xy / iResolution.xy;\n    vec2 p = -1.0 + 2.0 * q;\n    p.x *= iResolution.x/iResolution.y;\n    vec2 m = vec2(0.);\n\tif( iMouse.z>0.0 )m = iMouse.xy/iResolution.xy*3.14;\n    m.x-=.5;\n    m.y+=.4;\n\n    // camera\n\n    vec3 ro = zoom*vec3(4.);\n    ro.yz*=rot(m.y);\n    ro.xz*=rot(m.x+ 0.1*time);\n    vec3 ta = vec3( 0.0 , 0.0, 0.0 );\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(1.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    vec3 rd = normalize( p.x*uu + p.y*vv + 4.0*ww );\n\n    vec2 tmm = iBox( ro, rd, vec3(1.5,1.5,1.5) );\n\n\t// raymarch\n    vec3 col = raymarch(ro, rd, tmm);\n    // texture(iChannel0, rd).rgb\n    if (tmm.x<0.) col = vec3(0.0);\n\t\n\t// shade\n    \n    col = .8*(log(1.+col));\n    col = clamp(col,0.,1.);\n    fragColor = vec4( col, 1.0 );\n\n}\n","name":"Image","description":"","type":"image"}]}