{"ver":"0.1","info":{"id":"fdyyDW","date":"1654821867","viewed":82,"name":"Fusion Generator B","username":"JupiterDude","description":"Taking advantage of a mistake when implementing Perlin noise.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926535897932384626433832795\n#define PI2 6.283185307179586476925286766559\n#define PI4 12.566370614359172953850573533118\n\n#define OCTAVES 3\n#define SPEEDX (0.07)\n#define SPEEDY (SPEEDX * .4)\n#define RSCALE 2.1\n#define GSCALE 2.2\n#define BSCALE 2.3\n\nvec2 random(vec2 uv){\n    uv = vec2( dot(uv, vec2(123.7, 31.9) ),\n               dot(uv, vec2(609.2, 183.71) ) );\n    return -1.0 + 2.0 * fract( sin(uv) * 343803.23346);\n}\n\nfloat noise(vec2 uv, float scale) {\n    uv *= scale;\n    uv = abs(uv);\n    vec2 index = floor(uv);\n    vec2 fraction = fract(uv);\n    vec2 blend = smoothstep(0.0, 1.0, fraction);\n    return mix(\n        mix(\n            dot( random(index + vec2( 0.0, 0.0 ) ), fraction - vec2( 0.0, 0.0 ) ),\n            dot( random(index + vec2( 1.0, 0.0 ) ), fraction - vec2( 1.0, 0.0 ) ),\n            blend.x),\n        mix(\n            dot( random(index + vec2( 0.0, 1.0 ) ), fraction - vec2( 0.0, 1.0 ) ),\n            dot( random(index + vec2( 1.0, 1.0 ) ), fraction - vec2( 1.0, 1.0 ) ),\n            blend.x),\n        blend.y) * 0.5 + 0.5;\n}\n\nfloat noiseX(vec2 tuv, vec2 uv, float scale) {\n    // vec2 tuv = abs(uv);\n    uv *= scale;\n    uv = abs(uv);\n    vec2 index = floor(uv);\n    vec2 fraction = fract(uv);\n    vec2 blend = smoothstep(0.0, 1.0, fraction);\n    \n    if (tuv.x > (iMouse.x / iResolution.x)-.5) {\n        return mix(\n            mix(\n                dot( random(index + vec2( 0.0, 0.0 ) ), fraction - vec2( 2.0, 0.0 ) ),\n                dot( random(index + vec2( 1.0, 0.0 ) ), fraction - vec2( 1.0, 0.0 ) ),\n                blend.x),\n            mix(\n                dot( random(index + vec2( 0.0, 1.0 ) ), fraction - vec2( 0.0, 1.0 ) ),\n                dot( random(index + vec2( 1.0, 0.0 ) ), fraction - vec2( 1.0, 2.0 ) ),\n                blend.x),\n            blend.y) * 0.5 + 0.5;\n     } else {\n        return mix(\n            mix(\n                dot( random(index + vec2( 0.0, 0.0 ) ), fraction - vec2( 0.0, 0.0 ) ),\n                dot( random(index + vec2( 1.0, 0.0 ) ), fraction - vec2( 1.0, 0.0 ) ),\n                blend.x),\n            mix(\n                dot( random(index + vec2( 0.0, 1.0 ) ), fraction - vec2( 0.0, 1.0 ) ),\n                dot( random(index + vec2( 1.0, 1.0 ) ), fraction - vec2( 1.0, 1.0 ) ),\n                blend.x),\n            blend.y) * 0.5 + 0.5;\n     }\n}\n\nfloat bnoise(vec2 c, float scale) {\n    float t = 0.0;\n    vec2 tc = c;\n    c = abs(c);\n    float octave = .7;\n    float r0 = (12.0 + iTime * SPEEDX) * -sign(c.x);\n    float r1 = (13.0 + iTime * SPEEDY) * -sign(c.y);\n    float ot = noise(c + 12.0, 2.0);\n    for( int a=0; a<OCTAVES; a++ ){\n        c.x += r0;\n        c.y += r1;\n        float n = noiseX(tc, c + ot, scale) * octave;\n        ot = n;\n        octave /= 2.0;\n        scale *= 2.0;\n        t += n; // t = max(t, n);\n    }\n    return t;\n}\n\nfloat color(float t) {\n    return pow(cos((1.0-t)*PI)*.5 + .5, 3.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord ){\n\tvec2 uv = fragCoord.xy/iResolution.xy;\n    float aspect = iResolution.x / iResolution.y;\n    // uv = (uv - 1.0) * 2.0;\n    vec2 c = uv - .5;\n    // c *= 2.0;\n    uv.x *= aspect;\n    float r = bnoise(c, RSCALE);\n    float g = bnoise(c, GSCALE);\n    float b = bnoise(c, BSCALE);\n    r = color(r);\n    g = color(g);\n    b = color(b);\n    float rr = (r+g) / 2.0;\n    float gg = (g+b) / 2.0;\n    float bb = (b+r) / 2.0;\n    fragColor = vec4(rr, gg, bb, 1.0);\n}\n\n\n","name":"Image","description":"","type":"image"}]}