{"ver":"0.1","info":{"id":"MccXW2","date":"1714453478","viewed":28,"name":"Union,Intersect Mask","username":"HyperQuantum","description":"0+1:union OR\n-0.5+0.5:intersect AND","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    \n    \n    //sphere shapes\n    float radius[3] = float[3](\n        0.6f,\n        0.5f,\n        0.3f\n    );\n    \n    vec3 positions[3] = vec3[3](\n        vec3(-0.2,0.5,0.8),\n        vec3(0.3,0.4,0.5),\n        vec3(0,0,0)    \n    );\n    \n    //light source\n    vec3 org = vec3(0,0,-1);\n    vec3 dir = normalize(vec3(p,1));\n    \n    \n    //this photon for each object\n    float mask = 0.0f;\n    float mask2 = 0.0f;\n    for(int i = 0;i < 3;i++){\n        vec3 T = org - positions[i];\n        //dir is normalized . length(dir)=1 . cos = 1 . dir^2 = 1*1*1\n        float a = 1.0f;\n        float b = 2.0f * dot(T,dir);\n        float c = dot(T,T) - radius[i]*radius[i]*abs(sin(iTime))*2.0f;\n        \n        float x1 = 0.0f;\n        float x2 = 0.0f;\n        float delta = b * b - 4.0f * a * c;\n        \n        mask += ceil(clamp(delta,0.0f,1.0f))-abs(sin(iTime));\n        mask2 += ceil(clamp(delta,0.0f,1.0f))-abs(sin(iTime))*abs(sin(iTime));\n    }\n    \n    \n    fragColor = vec4(mask);\n}","name":"Image","description":"","type":"image"}]}