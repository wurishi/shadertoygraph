{"ver":"0.1","info":{"id":"ttS3Rm","date":"1558869420","viewed":124,"name":"metball in room","username":"aadebdeb","description":"metall with fresnel reflection","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","metaball"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define BPM 120.0\n\nconst float GRID_SPACING = 5.0;\nconst vec3 WALL_SIZE = vec3(10.0, 5.0, 10.0) * GRID_SPACING + 0.5 * GRID_SPACING;\n\n#define LIGHT_BLUE vec3(0.05, 0.3, 1.2)\n#define LIGHT_ORANGE vec3(1.2, 0.15, 0.05)\n\nfloat timeToBeat(float time) {\n    return time / 60.0 * BPM;\n}\n\n// 1 bar = 4 beat\nfloat timeToBar(float time) {\n    return timeToBeat(time * 0.25);\n}\n\nfloat random(float x){\n    return fract(sin(x * 12.9898) * 43758.5453);\n}\n\nfloat random(vec4 x){\n    return fract(sin(dot(x,vec4(12.9898, 78.233, 39.425, 27.196))) * 43758.5453);\n}\n\nmat2 rotate(float r) {\n    float c = cos(r);\n    float s = sin(r);\n    return mat2(c, s, -s, c);\n}\n\nfloat usin(float x) {\n    return sin(x) * 0.5 + 0.5;\n}\n\nvoid setNormalEnvironmentStatus(out vec3 color0, out vec3 color1, out float borderEdge0, out float borderEdge1, out ivec3 lines) {\n    color0 = vec3(0.75);\n    color1 = vec3(0.0, 0.075, 0.185);\n    borderEdge0 = 0.01;\n    borderEdge1 = 0.05;\n    lines = ivec3(1, 1, 1);\n}\n\nvoid setUnlightedEnvironmentStatus(out vec3 color0, out vec3 color1, out float borderEdge0, out float borderEdge1, out ivec3 lines) {\n    color0 = vec3(0.0);\n    color1 = vec3(0.0);\n    borderEdge0 = 0.0;\n    borderEdge1 = 0.0;\n    lines = ivec3(0, 0, 0);\n}\n\nvoid setLightBorderEdge(out float borderEdge0, out float borderEdge1) {\n    borderEdge0 = 0.0;\n    borderEdge1 = 0.1;\n}\n\nvoid setEnvironmentStatus(vec3 pos, int hit, out vec3 color0, out vec3 color1, out float borderEdge0, out float borderEdge1, out ivec3 lines) {\n    float beat = timeToBeat(iTime);\n    beat = mod(beat, 32.0);\n    float bar = timeToBar(iTime);\n\n    if (beat < 8.0) {\n        if (beat < 7.0) {\n            setNormalEnvironmentStatus(color0, color1, borderEdge0, borderEdge1, lines);\n            return;\n        } else {\n            float r = random(ceil(fract(beat) * 20.0) / 20.0);\n            if (r > fract(beat)) {\n                setNormalEnvironmentStatus(color0, color1, borderEdge0, borderEdge1, lines);\n                return;\n            } else {\n                setUnlightedEnvironmentStatus(color0, color1, borderEdge0, borderEdge1, lines);\n                return;\n            }\n        }\n    } else if (beat < 16.0) {\n        if (hit == 0 || hit == 2) {\n            color0 = vec3(0.0);\n            color1 = mix(LIGHT_ORANGE, LIGHT_BLUE, usin(pos.y * 0.05 + iTime * 10.0));\n            setLightBorderEdge(borderEdge0, borderEdge1);\n            lines = ivec3(0, 1, 0);\n            return;\n        } else { \n            setUnlightedEnvironmentStatus(color0, color1, borderEdge0, borderEdge1, lines);\n            return;\n        }\n    } else if (beat < 24.0) {\n        if (hit == 0 || hit == 1) {\n            color0 = vec3(0.0);\n            float end0 = WALL_SIZE.z - max(fract(bar) * 2.0 - 1.0, 0.0) * 2.0 * WALL_SIZE.z;\n            float end1 = WALL_SIZE.z - min(fract(bar) * 2.0, 1.0) * 2.0 * WALL_SIZE.z;\n            color1 = mix(LIGHT_ORANGE, LIGHT_BLUE, smoothstep(-WALL_SIZE.z, WALL_SIZE.z, pos.z));\n            color1 = mix(vec3(0.0), color1, (1.0 - step(end0, pos.z)) * step(end1, pos.z));\n            setLightBorderEdge(borderEdge0, borderEdge1);\n            lines = ivec3(0, 0, 1);\n            return;\n        } else { \n            setUnlightedEnvironmentStatus(color0, color1, borderEdge0, borderEdge1, lines);\n            return;\n        }\n    } else if (beat < 32.0) {\n        if (beat < 31.0) {\n            color0 = vec3(0.0);\n            color1 = mix(LIGHT_ORANGE, LIGHT_BLUE, usin(pos.y * 0.05 - iTime * 8.0));\n            setLightBorderEdge(borderEdge0, borderEdge1);\n            lines = ivec3(1, 1, 1);\n            return;\n        } else {\n            float r = random(ceil(fract(beat) * 20.0) / 20.0);\n            if (r < fract(beat)) {\n                setNormalEnvironmentStatus(color0, color1, borderEdge0, borderEdge1, lines);\n                return;\n            } else {\n                setUnlightedEnvironmentStatus(color0, color1, borderEdge0, borderEdge1, lines);\n                return;\n            }\n        }\n    }\n}\n\nvec3 environment(vec3 ro, vec3 rd) {\n    float t = 1e6;\n    int hit = 0;\n    for (int i = 0; i < 3; i++) {\n        if (rd[i] != 0.0) {\n            float tn = (-WALL_SIZE[i] - ro[i]) / rd[i];\n            if (tn > 0.0 && tn < t) {\n                t = tn;\n                hit = i;\n            }\n            float tp = (WALL_SIZE[i] - ro[i]) / rd[i];\n            if (tp > 0.0 && tp < t) {\n                t = tp;\n                hit = i;\n            }\n        }\n    }\n    if (t == 1e6) {\n        return vec3(0.0);\n    }\n    vec3 p = ro + t * rd;\n\n    vec3 color0, color1;\n    float borderEdge0, borderEdge1; // 0 <= borderEdge0 <= birderEdge1 <= 0.5\n    ivec3 lines;\n    setEnvironmentStatus(p, hit, color0, color1, borderEdge0, borderEdge1, lines);\n\n    float v = 0.0;\n    for (int i = 0; i < 3; i++) {\n        if (lines[i] == 1) {\n            v = max(v, smoothstep(borderEdge1, borderEdge0, 0.5 - abs(fract(p[i] / GRID_SPACING) - 0.5)));\n        }\n    }\n\n    return mix(color0, color1, v);\n}\n\nfloat smoothUnion(float d1, float d2, float k) {\n    float h = clamp(0.5 + 0.5 * (d2 - d1) / k, 0.0, 1.0);\n    return mix(d2, d1, h) - k * h * (1.0 - h);\n}\n\nfloat random(float x, inout float seed) {\n    seed += 0.1;\n    return random(x + seed);\n}\n\nfloat map(vec3 p) {\n    float d = 1e6;\n    float seed = 0.0;\n    for (float i = 1.0; i <=15.0; i += 1.0) {\n        vec3 c = vec3(20.0 * sin(iTime + 100.0 * random(i, seed)), 0.0, 0.0);\n        c.xy *= rotate(iTime * random(i, seed) + 100.0 * random(i, seed));\n        c.xz *= rotate(iTime * random(i, seed) + 100.0 * random(i, seed));\n        float r = mix(1.0, 10.0, smoothstep(0.0, 1.0, random(i, seed)));\n        d = smoothUnion(d, length(p - c) - r, 6.0);\n    }\n    return d;\n}\n\nvec3 calcNormal(vec3 p) {\n    float d = 0.01;\n    return normalize(vec3(\n        map(p + vec3(d, 0.0, 0.0)) - map(p - vec3(d, 0.0, 0.0)),\n        map(p + vec3(0.0, d, 0.0)) - map(p - vec3(0.0, d, 0.0)),\n        map(p + vec3(0.0, 0.0, d)) - map(p - vec3(0.0, 0.0, d))\n    ));\n}\n\nvec3 schlickFresnel(vec3 f90, float cosine) {\n    return f90 + (1.0 - f90) * pow(1.0 - cosine, 5.0);\n}\n\nvec3 raymarch(vec3 ro, vec3 rd) {\n    vec3 p = ro;\n    for (int i = 0; i < 64; i++) {\n        float d = map(p);\n        p += d * rd;\n        if (d < 0.01) {\n            vec3 n = calcNormal(p);\n            vec3 reflectDir = reflect(rd, n);\n            float dotNR = max(0.0, dot(n, reflectDir));\n            vec3 specColor = vec3(0.001);\n            vec3 fresnel = schlickFresnel(specColor, dotNR);\n            return fresnel * environment(p, reflectDir);\n        }\n    }\n    return environment(ro, rd);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 st = (2.0 * fragCoord.xy - iResolution.xy) / min(iResolution.x, iResolution.y);\n\n    vec3 ro = vec3(20.0, -10.0, 38.0);\n    vec3 ta = vec3(0.0);\n    vec3 z = normalize(ta - ro);\n    vec3 up = vec3(0.0, 1.0, 0.0);\n    vec3 x = normalize(cross(z, up));\n    vec3 y = normalize(cross(x, z));\n    vec3 rd = normalize(x * st.x + y * st.y + z * 1.5);\n\n    vec3 c = raymarch(ro, rd);\n\n    fragColor = vec4(pow(c, vec3(1.0 / 2.2)), 1.0);\n}","name":"Image","description":"","type":"image"}]}