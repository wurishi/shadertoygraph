{"ver":"0.1","info":{"id":"csBGRK","date":"1667835744","viewed":167,"name":"PinkFlow for Inércia'2022","username":"jin_x","description":"Shader for Fast Challenge on Inércia demoparty 2022\nVersion with sound and beat rection ;)","likes":3,"published":1,"flags":64,"usePreview":1,"tags":["raymarching","reflections","inercia","inrcia","pinkflow","fastchallenge"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4l2XDh","filepath":"https://soundcloud.com/jin-xonik/gloom-and-flipside-same-old-big-beat-norwegian-soundtrack-for-stomping-robots-apparently","previewfilepath":"https://soundcloud.com/jin-xonik/gloom-and-flipside-same-old-big-beat-norwegian-soundtrack-for-stomping-robots-apparently","type":"musicstream","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// If you don't hear music please place cursor into editor\n// and sequentially press Alt+Up then Alt+Down then Alt+Up\n// or buttons under the shader screen: pause || back |< resume >\n\n\n#define FLOW 25  // number of bullets\n#define GEN_TEX  // generate texture\n#define SOUND_BEAT  // beat reaction\n\n#define PI 3.14159265358979\n#define EPS .001\n\nfloat time, beat = 0., fade = 1.;\nint idx, idx2;\n\nmat2 rot(float a)\n{\n  return mat2(cos(a), -sin(a), sin(a), cos(a));\n}\n\nfloat rand(vec2 p)\n{\n    return fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nfloat rand(int a, int b)\n{\n    return rand(vec2(float(a)*PI, float(b)*PI));\n}\n\nvec3 hash3(vec2 p)\n{\n    vec3 q = vec3(dot(p,vec2(127.1,311.7)), \n\t\t\t\t  dot(p,vec2(269.5,183.3)), \n\t\t\t\t  dot(p,vec2(419.2,371.9)));\n\treturn fract(sin(q)*43758.5453);\n}\n\nfloat voronoise(vec2 p)\n{\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n    \n\tvec2 a = vec2(0);\n    for (int y=-2; y<=2; y++)\n    for (int x=-2; x<=2; x++)\n    {\n        vec2  g = vec2(x, y);\n\t\tvec2  d = g - f;\n\t\tfloat w = 1.0-smoothstep(0.0,1.414,length(d));\n\t\ta += vec2(hash3(i+g).z*w,w);\n    }\n\t\n    return a.x/a.y;\n}\n\nfloat sdf(vec3 p)\n{\n    float s[3];\n    float d = length(p.xy + vec2(cos(p.z*.5), sin(p.z*.5)));\n#ifdef GEN_TEX\n    s[0] = 2. - beat*.3 - d + voronoise(vec2(abs(atan(p.y, p.x)), p.z)*7.)*.3;  // walls\n    s[1] = 2.2 - beat*.3 - d;  // mirror\n#else\n    s[0] = 2. - d + texture(iChannel0, vec2((atan(p.y, p.x)+PI)/PI, p.z*.1)).x*.3;  // walls\n    s[1] = 2.125 - d;\n#endif\n    s[2] = 1000.;  // bullet flow\n    for (int i = 5; i < 5+FLOW; ++i) {\n      float len = rand(i,-1)*.45+.05, thick = rand(i,-2)*.09+.01+beat*.1, freq = rand(i,-3)*5.+5., speed = rand(i,-4)*4.;\n      vec3 q = mod(p + vec3(rand(i,0), rand(i,1), rand(i,2))*3.-1.5 + vec3(freq*.5,freq*.5,time*speed), freq) - freq*.5;\n      float d = length(vec3(q.xy, q.z-clamp(q.z, 0., len))) - thick;\n      if (d < s[2]) { idx2 = i; s[2] = d; }\n    }\n    idx = 0;\n    for (int i = 1; i < s.length(); ++i)\n      if (s[i] < s[idx]) idx = i;\n    return s[idx];\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy - .5;\n    uv *= vec2(iResolution.x / iResolution.y, 1);\n\n    time = iTime;\n#ifdef SOUND_BEAT\n    float snd_time = iChannelTime[1];\n    beat = snd_time > 21.4 && snd_time < 69.5 ? pow(1.-abs(sin((snd_time-21.8)*PI*1.1)), 5.) : 0.;\n#endif\n\n    // Ray marching\n    vec3 rp = vec3(sin(time)*.25, cos(time)*.25, time), rd = normalize(vec3(uv, 1));\n    rd.xy *= rot(sin(time*.2)*PI);\n\n    int i = 0, rc = 0;\n    int rc_limit = 10, i_limit = 100;\n    for(;;) {\n        float d, td = 0.;\n        while (++i < i_limit) {\n            d = sdf(rp)*.5;\n            if (d < EPS) break;\n            td += d;\n            if (td > 100.) { idx = 3; break; }\n            rp += d*rd;\n        }\n        if (idx != 1 || i == i_limit || ++rc == rc_limit || td > 100.) break;\n        // Reflection\n        vec2 e = vec2(.01, 0);\n        vec3 n = normalize(d - vec3(sdf(rp-e.xyy), sdf(rp-e.yxy), sdf(rp-e.yyx))*.5);\n        rp += n*EPS*2.;\n        rd = reflect(rd, n);\n        i /= 2;\n    }\n    if (i == i_limit || rc == rc_limit) idx = 3;\n\n    // Pixel color\n    float br = clamp(pow(12./float(i), 2.), 0., 1.);\n    vec3 c[] = vec3[](vec3(.5+.5*cos(6.2832*((time+PI)*.1+vec3(0,.33,.67)))),\n                      vec3(.7,.75,.9), vec3(2,0,2)*float(idx2)/float(FLOW), vec3(0));\n#ifdef SOUND_BEAT\n    fade = snd_time == 0. ? 1. : smoothstep(0., 10., snd_time) - smoothstep(64., 74., snd_time);\n#endif\n    vec3 col = br * c[idx] * fade;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}