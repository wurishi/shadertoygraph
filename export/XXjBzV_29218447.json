{"ver":"0.1","info":{"id":"XXjBzV","date":"1729702273","viewed":189,"name":"cosmos universe ","username":"nayk","description":"source https://www.shadertoy.com/view/4sBfDw https://www.shadertoy.com/view/tllfRX","likes":4,"published":3,"flags":1,"usePreview":0,"tags":["fbm","stars","cosmos","universe"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","previewfilepath":"/media/ap/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\n#define iterations 10\n#define formuparam 0.53\n\n#define volsteps 20\n#define stepsize 0.1\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.000 \n\n#define brightness 0.0015\n#define darkmatter 0.300\n#define distfading 0.730\n#define saturation 0.850\n\n\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 ro, in vec3 rd )\n{\n\t//get coords and direction\n\tvec3 dir=rd;\n\tvec3 from=ro;\n\t\n\t//volumetric rendering\n\tfloat s=0.1,fade=1.;\n\tvec3 v=vec3(0.);\n\tfor (int r=0; r<volsteps; r++) {\n\t\tvec3 p=from+s*dir*.5;\n\t\tp = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\n\t\tfloat pa,a=pa=0.;\n\t\tfor (int i=0; i<iterations; i++) { \n\t\t\tp=abs(p)/dot(p,p)-formuparam;\n            p.xy*=mat2(cos(iTime*0.01), sin(iTime*0.01),-sin(iTime*0.01), cos(iTime*0.01));// the magic formula\n\t\t\ta+=abs(length(p)-pa); // absolute sum of average change\n\t\t\tpa=length(p);\n\t\t}\n\t\tfloat dm=max(0.,darkmatter-a*a*.001); //dark matter\n\t\ta*=a*a; // add contrast\n\t\tif (r>6) fade*=1.1-dm; // dark matter, don't render near\n\t\t//v+=vec3(dm,dm*.5,0.);\n\t\tv+=fade;\n\t\tv+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\n\t\tfade*=distfading; // distance fading\n\t\ts+=stepsize;\n\t}\n\tv=mix(vec3(length(v)),v,saturation); //color adjust\n\tfragColor = vec4(v*.03,1.);\t\n}\n#define NUM_LAYERS 10.\n#define TAU 6.28318\n#define PI 3.141592\n#define Velocity .025 //modified value to increse or decrease speed, negative value travel backwards\n#define StarGlow 0.025\n#define StarSize 02.\n#define CanvasView 20.\n\nfloat Star(vec2 uv, float flare){\n    float d = length(uv);\n  \tfloat m = sin(StarGlow*1.2)/d;  \n    float rays = max(0., .5-abs(uv.x*uv.y*1000.)); \n    m += (rays*flare)*2.;\n    m *= smoothstep(1., .1, d);\n    return m;\n}\n\nfloat Hash21(vec2 p){\n    p = fract(p*vec2(123.34, 456.21));\n    p += dot(p, p+45.32);\n    return fract(p.x*p.y);\n}\n\n\nvec3 StarLayer(vec2 uv){\n    vec3 col = vec3(0);\n    \t\n    vec2 gv = fract(uv);\n    vec2 id = floor(uv);\n    for(int y=-1;y<=1;y++){\n        for(int x=-1; x<=1; x++){\n            vec2 offs = vec2(x,y);\n            float n = Hash21(id+offs);\n            float size = fract(n);\n            float star = Star(gv-offs-vec2(n, fract(n*34.))+.5, smoothstep(.1,.9,size)*.46);\n            vec3 color = sin(vec3(.2,.3,.9)*fract(n*2345.2)*TAU)*.25+.75;\n            color = color*vec3(.5,.5,.5+size);\n            star *= sin(iTime*.6+n*TAU)*.5+.5;\n            col += star*size*color;\n        }\n    }\n    return col;\n}\n\n#define M_PI 3.14159265359\n\n\n\nvec3 mod289(vec3 x) {\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n    return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n    return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v)\n{ \n    const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n    const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n    // First corner\n    vec3 i  = floor(v + dot(v, C.yyy) );\n    vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n    // Other corners\n    vec3 g = step(x0.yzx, x0.xyz);\n    vec3 l = 1.0 - g;\n    vec3 i1 = min( g.xyz, l.zxy );\n    vec3 i2 = max( g.xyz, l.zxy );\n\n    //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n    //   x1 = x0 - i1  + 1.0 * C.xxx;\n    //   x2 = x0 - i2  + 2.0 * C.xxx;\n    //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n    vec3 x1 = x0 - i1 + C.xxx;\n    vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n    vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n    // Permutations\n    i = mod289(i); \n    vec4 p = \n        permute\n        (\n            permute\n            ( \n                permute\n                (\n                    i.z + vec4(0.0, i1.z, i2.z, 1.0)\n                )\n                + i.y + vec4(0.0, i1.y, i2.y, 1.0 )\n            )\n            + i.x + vec4(0.0, i1.x, i2.x, 1.0 )\n        );\n\n    // Gradients: 7x7 points over a square, mapped onto an octahedron.\n    // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n    float n_ = 0.142857142857; // 1.0/7.0\n    vec3  ns = n_ * D.wyz - D.xzx;\n\n    vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n    vec4 x_ = floor(j * ns.z);\n    vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n    vec4 x = x_ *ns.x + ns.yyyy;\n    vec4 y = y_ *ns.x + ns.yyyy;\n    vec4 h = 1.0 - abs(x) - abs(y);\n\n    vec4 b0 = vec4( x.xy, y.xy );\n    vec4 b1 = vec4( x.zw, y.zw );\n\n    //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n    //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n    vec4 s0 = floor(b0)*2.0 + 1.0;\n    vec4 s1 = floor(b1)*2.0 + 1.0;\n    vec4 sh = -step(h, vec4(0.0));\n\n    vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n    vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n    vec3 p0 = vec3(a0.xy,h.x);\n    vec3 p1 = vec3(a0.zw,h.y);\n    vec3 p2 = vec3(a1.xy,h.z);\n    vec3 p3 = vec3(a1.zw,h.w);\n\n    //Normalise gradients\n    vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n    p0 *= norm.x;\n    p1 *= norm.y;\n    p2 *= norm.z;\n    p3 *= norm.w;\n\n    // Mix final noise value\n    vec4 m = max(0.5 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n    m = m * m;\n    return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3) ) );\n}\n\n// p: position\n// o: how many layers\n// f: frequency\n// lac: how fast frequency changes between layers\n// r: how fast amplitude changes between layers\nfloat fbm4(vec3 p, float theta, float f, float lac, float r)\n{\n    mat3 mtx = mat3(\n        cos(theta), -sin(theta), 0.0,\n        sin(theta), cos(theta), 0.0,\n        0.0, 0.0, 1.0);\n\n    float frequency = f;\n    float lacunarity = lac;\n    float roughness = r;\n    float amp = 1.0;\n    float total_amp = 0.0;\n\n    float accum = 0.0;\n    vec3 X = p * frequency;\n    for(int i = 0; i < 4; i++)\n    {\n        accum += amp * snoise(X);\n        X *= (lacunarity + (snoise(X) + 0.1) * 0.006);\n        X = mtx * X;\n\n        total_amp += amp;\n        amp *= roughness;\n    }\n\n    return accum / total_amp;\n}\n\nfloat fbm8(vec3 p, float theta, float f, float lac, float r)\n{\n    mat3 mtx = mat3(\n        cos(theta), -sin(theta), 0.0,\n        sin(theta), cos(theta), 0.0,\n        0.0, 0.0, 1.0);\n\n    float frequency = f;\n    float lacunarity = lac;\n    float roughness = r;\n    float amp = 1.0;\n    float total_amp = 0.0;\n\n    float accum = 0.0;\n    vec3 X = p * frequency;\n    for(int i = 0; i < 8; i++)\n    {\n        accum += amp * snoise(X);\n        X *= (lacunarity + (snoise(X) + 0.1) * 0.006);\n        X = mtx * X;\n\n        total_amp += amp;\n        amp *= roughness;\n    }\n\n    return accum / total_amp;\n}\n\nfloat turbulence(float val)\n{\n    float n = 1.0 - abs(val);\n    return n * n;\n}\n\nfloat pattern(in vec3 p, inout vec3 q, inout vec3 r)\n{\n    q.x = fbm4( p + 0.0, 0.0, 1.0, 2.0, 0.33 );\n    q.y = fbm4( p + 2.0, 0.0, 1.0, 2.0, 0.33 );\n\n    r.x = fbm8( p + q - 2.4, 0.0, 1.0, 3.0, 0.5 );\n    r.y = fbm8( p + q + 8.2, 0.0, 1.0, 3.0, 0.5 );\n\n    q.x = turbulence( q.x );\n    q.y = turbulence( q.y );\n\n    float f = fbm4( p + (1.0 * r), 0.0, 1.0, 2.0, 0.5);\n\n    return f;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t//get coords and direction\n\tvec2 uv=fragCoord.xy/iResolution.xy-.5;\n    \n\tuv.y*=iResolution.y/iResolution.x;\n\tvec3 dir=vec3(uv*zoom,tan(iTime*0.031));\n\tfloat time=iTime*speed+.25;\n  // pixel position normalised to [-1, 1]\n\tvec2 cPos = -1.0 + 2.0 * fragCoord.xy / iResolution.xy;\nvec4 o= fragColor;\nvec2 F =fragCoord;\n\nvec2 st = fragCoord.xy / iResolution.xy;\n    float aspect = iResolution.x / iResolution.y;\n    st.x *= aspect;\n\n    vec2 uv2 = st;\n\n    float t = iTime * 0.11;\n\n    vec3 spectrum[4];\n    spectrum[0] = vec3(0.94, 0.02, 0.03);\n    spectrum[1] = vec3(0.04, 0.04, 0.22);\n    spectrum[2] = vec3(0.00, 0.80, 1.00);\n    spectrum[3] = vec3(0.20, 0.40, 0.50);\n\n    uv -= 0.5;\n    uv *= 5.5;\n\n    vec3 p = vec3(uv.x, uv.y, t);\n   \n    vec3 q = vec3(0.0);\n    vec3 r = vec3(0.0);\n    float f = pattern(p, q, r);\n\n    vec3 color = vec3(0.0);\n    color = mix(spectrum[1], spectrum[3], pow(length(q), 4.0));\n    color = mix(color, spectrum[0], pow(length(r), 1.4));\n    color = mix(color, spectrum[2], f);\n\n    color = pow(color, vec3(2.0));\n\nvec2 R = iResolution.xy; \n    o-=o;\n    for(float d,t = iTime*.001, i = 0. ; i > -1.; i -= .06 )          \t\n    {   d = fract( i -3.*t );                                          \t\n        vec4 c = vec4( ( F - R *.5 ) / R.y *d ,i,0 ) * 28.;            \t\n        for (int j=0 ; j++ <27; )                                      \t\n            c.xzyw = abs( c / dot(c,c)                                 \t\n                    -vec4( 7.-.2*sin(t) , 6.3 , .7 , 1.-cos(t/.8))/7.);\t\n       o -= c * c.yzww  * d--*d  / vec4(3,5,1,1);                     \n    }\n    // distance of current pixel from center\n\tfloat cLength = length(cPos);\n\n\t\n\tvec2 M = vec2(0);\n    M -= vec2(M.x+sin(iTime*0.22), M.y-cos(iTime*0.22));\n    M +=(iMouse.xy-iResolution.xy*.5)/iResolution.y;\n    float t2 = iTime*Velocity; \n    vec3 col = vec3(0);  \n    for(float i=0.; i<1.; i+=1.0/NUM_LAYERS){\n        float depth = fract(i+t2);\n        float scale = mix(CanvasView, .5, depth);\n        float fade = depth*smoothstep(1.,.9,depth);\n        col += StarLayer(uv*scale+i*455.2-iTime*.05+M)*fade;}   \n    float s = .1;\n\n    float speed2= 1.1;\n    float b = .037;\n    vec4 noise = texture(iChannel0, uv*s);\n    \n     dir.xy*= vec2(uv.x + cos(iTime*speed2+uv.x*speed2)*b*noise.r*noise.a, uv.y + sin(iTime*speed2+uv.y*speed2)*b*noise.g*noise.b);\n\n    \n\t\n\tvec3 from=vec3(1.,.5,0.5)*col+o.xyz*+color*2.;\n\n\t\n\tmainVR(fragColor, fragCoord, from, dir);\n    fragColor*=vec4(col*10.+color*vec3(0.5,0.5,1.5)*2.,1.);\n    \n}\n","name":"Image","description":"","type":"image"}]}