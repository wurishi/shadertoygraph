{"ver":"0.1","info":{"id":"Dl2BWW","date":"1694229240","viewed":19,"name":"rainbow real pallete morf","username":"davidmachadosf","description":"generate color pallet by wave frequency in Terahertz","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["physicspallete"],"hasliked":0,"parentid":"csjcDK","parentname":"rainbow physical real pallete"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI   =    3.141592;\nconst float pot  =     .5;\nconst float freq =    10.;\nconst float c    =   299792458.;// in nanometers by seconds\n\n\nfloat uniform_to_widthNanometers (float u){\n    return 380. + 400.*(1.-u);\n}\n\n\n\nfloat uniform_to_freqTeraHertz (float u){\n    return (384. + 405.*u)*1.e3;\n}\n\nvec3 paletteReal( float w ) {\n    \n    float red, green, blue;\n\n    if (w >= 380. && w < 440.) {\n        red   = -(w - 440.) / (440. - 380.);\n        green = 0.;\n        blue  = 1.;\n    }\n    else \n    if (w >= 440. && w < 490.) {\n        red   = 0.;\n        green = (w - 440.) / (490. - 440.);\n        blue  = 1.;\n    }\n    else \n    if (w >= 490. && w < 510.) {\n        red   = 0.;\n        green = 1.;\n        blue  = -(w - 510.) / (510. - 490.);\n    }\n    else \n    if (w >= 510. && w < 580.) {\n        red   = (w - 510.) / (580. - 510.);\n        green = 1.;\n        blue  = 0.;\n    }\n    else \n    if (w >= 580. && w < 645.) {\n        red   = 1.;\n        green = -(w - 645.) / (645. - 580.);\n        blue  = 0.;\n    }\n    else \n    if (w >= 645. && w < 781.) {\n        red   = 1.;\n        green = 0.;\n        blue  = 0.;\n    }\n    else {\n        red   = 0.;\n        green = 0.;\n        blue  = 0.;\n    }\n\n\n    // Let the intensity fall off near the vision limits\n    float factor;\n    if (w >= 380. && w < 420.)\n        factor = .3 + .7*(w - 380.) / (420. - 380.);\n    else \n    if (w >= 420. && w < 701.)\n        factor = 1.;\n    else \n    if (w >= 701. && w < 781.)\n        factor = .3 + .7*(780. - w) / (780. - 700.);\n    else\n        factor = 0.;\n\n    float gamma = .8;\n    float R = (red   > 0. ? 255.*pow(red   * factor, gamma) : 0.);\n    float G = (green > 0. ? 255.*pow(green * factor, gamma) : 0.);\n    float B = (blue  > 0. ? 255.*pow(blue  * factor, gamma) : 0.); \n    \n    return vec3(R/255.,G/255.,B/255.);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    float yRat = (iResolution.y/iResolution.x);\n    \n    vec2 uv = 2.*(fragCoord/iResolution.x - vec2(.5,yRat/2.));\n    \n    float x = uv.x;\n    float y = uv.y;\n\n   \n    float t = .5*iTime;\n    float valxy = (x+.5)/1.;\n    \n    vec3 col = vec3(0,0,0);\n    if(y>.5) {\n        // linear to width (phisical prismatic effect)\n        col += paletteReal(uniform_to_widthNanometers(valxy));\n    }\n    else \n    if(y<-.5) {\n        // linear to frequency (not real, only theory)\n        col += paletteReal(c/uniform_to_freqTeraHertz(valxy));\n    }\n    else{\n    \n        float w1 = uniform_to_widthNanometers(valxy);\n        float w2 = c/uniform_to_freqTeraHertz(valxy);\n        \n        float wm = w1*(y+.5) + w2*(.5-y);\n        col += paletteReal(wm);\n    }\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}