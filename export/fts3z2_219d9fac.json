{"ver":"0.1","info":{"id":"fts3z2","date":"1622454130","viewed":83,"name":"try Voronoi","username":"cailuming","description":"try Voronoi, make some fun","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["voronoi2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926\n//from iq\nvec3 palete(float h,float s,float v){\n   vec3 a = vec3(v,v,v);\n   vec3 b = vec3(s,s,s);\n   vec3 c = vec3(1,1,1);\n   \n   vec3 d = vec3(0.0,0.33,0.67);\n   return a+b*cos(2.0*PI*(c*h+d)); \n} \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n       \n    vec3 color = vec3(.0);\n    \n    vec2 stepv = 1.0/iResolution.xy;\n    vec3 c0 = texture(iChannel0,uv).xyz;\n    vec3 cx = texture(iChannel0,uv+vec2(stepv.x,0)).xyz;\n    vec3 cy = texture(iChannel0,uv+vec2(0,stepv.y)).xyz;\n    \n    vec2 dtv = vec2(cx.x-c0.x,cy.x-c0.x);\n    vec3 norm = normalize(vec3(dtv.x,c0.x*0.002,dtv.y));\n    vec3 lightPos = vec3(vec3(cos(iTime),1,sin(iTime))); \n    vec3 light = normalize(lightPos);\n    float nl = clamp(dot(norm,light),0.0,1.0);\n    color= c0*palete(c0.x*0.00,0.65,1.9)+pow(nl,160.0);\n    color = smoothstep(0.0,1.,color); \n    color = pow(color,vec3(2.0));\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define CELL_STEP 3 \n// it's weird when modify CELL_STEP to 1\n\nvec2 hash( vec2 p ) // hash from iq\n{\n\tp = vec2( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)) );\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n//Basically from iq\n//https://iquilezles.org/articles/smoothvoronoi\n\nfloat WorelyTest(in vec2 uv){\n    vec2 n = floor(uv);\n    vec2 f = fract(uv);\n   \n    float time = iTime;     \n    float minres = 10.0;\n    for(int i=-CELL_STEP;i<=CELL_STEP;i++){// cell space\n      for(int j=-CELL_STEP;j<=CELL_STEP;j++){\n         vec2 ib = vec2(i,j);\n         vec2 flow = normalize(hash(n+ib))*sin(iTime);\n         \n         vec2 r = ib+hash(n+ib)-f+flow;\n         float d = dot(r,r);// distance from points surrounded\n         //minres = min(minres,d);\n         minres += 1./pow(d,7.0);\n      }\n    }\n    return pow(1./minres,0.1);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec2 cuv = uv- vec2(0.5);\n    \n    vec3 color = vec3(.0);\n    \n    cuv.x*= iResolution.x/iResolution.y;    \n    \n    float v = WorelyTest(cuv*10.0);\n    \n    v = exp(-v*v);\n   \n    color+= v*0.5;\n     \n    fragColor = vec4(color,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}