{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"#define S(a,b,t) smoothstep(a,b,t)\n#define NUM_LAYERS 5.0\n#define MOD3 vec3(.1031,.11369,.13787)\n\n// 随机函数\nfloat hash11(float p) {\n    vec3 p3 = fract(vec3(p)*MOD3);\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract((p3.x+p3.y)*p3.z);\n}\n\nfloat hash12(vec2 p) {\n    vec3 p3 = fract(vec3(p.xyx)*MOD3);\n    p3 += dot(p3,p3.yzx+19.19);\n    return fract((p3.x+p3.y)*p3.z);\n}\n\n// 在圆内随机分布点\nvec2 randomInCircle(float seed) {\n    float r = sqrt(hash11(seed));\n    float theta = hash11(seed+23.45)*6.28318;\n    return vec2(cos(theta), sin(theta))*r;\n}\n\n// 线段距离\nfloat df_line(vec2 a, vec2 b, vec2 p) {\n    vec2 pa = p - a, ba = b - a;\n    float h = clamp(dot(pa,ba)/dot(ba,ba),0.0,1.0);\n    return length(pa - ba*h);\n}\n\nfloat lineDist(vec2 a, vec2 b, vec2 p) {\n    float d = df_line(a,b,p);\n    float r1=0.03, r2=0.005;\n    return S(r1,r2,d);\n}\n\n// 单层模式生成函数（针对一个单元格）\nfloat CellPattern(vec2 st, float seed, float t) {\n    int N=25; \n    vec2 points[25];\n    for (int i=0; i<N; i++){\n        float sid = float(i)+seed;\n        vec2 p = randomInCircle(sid);\n        // 时间扰动让点略微有动感\n        p += vec2(sin(t+sid), cos(t*1.1+sid*2.0))*0.1;\n        points[i]=p;\n    }\n\n    float m=0.0;\n    // 绘制点光\n    for(int i=0;i<N;i++){\n        float d = length(st - points[i]);\n        float val = S(0.04,0.01,d);\n        m += val*0.7; \n    }\n    // 点之间连线\n    for(int i=0;i<N;i++){\n        for(int j=i+1;j<N;j++){\n            float d=lineDist(points[i],points[j],st);\n            float dist=length(points[i]-points[j]);\n            float fade=S(1.0,0.2,dist);\n            m+=d*fade*0.4;\n        }\n    }\n    return m;\n}\n\n// 单层的模式生成，将uv映射到平铺网格\nfloat LayerPattern(vec2 uv, float layerIndex, float t) {\n    // 每层有不同缩放\n    float scale = mix(1.5,6.0, fract(layerIndex*0.31+sin(t*0.07)));\n    uv *= scale;\n\n    // 平铺：设定tile数量，如5x5\n    float tileCount = 5.0;\n    vec2 gridUV = uv * tileCount;\n    vec2 id = floor(gridUV); // 网格坐标\n    vec2 st = fract(gridUV)-0.5; // 单元格坐标(-0.5~0.5)\n\n    float seed = layerIndex*37.23 + floor(t)*1.7 + id.x*12.45 + id.y*57.12;\n\n    float cellVal = CellPattern(st, seed, t);\n\n    // 根据层index和时间淡入淡出\n    float fade = S(0.0,0.8,fract(t+layerIndex))*S(1.0,0.7,fract(t+layerIndex));\n    return cellVal*fade;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // 标准化uv，以屏幕中心为原点\n    vec2 uv=(fragCoord - iResolution.xy*0.5)/iResolution.y;\n    float t = iTime*0.3;\n\n    float m=0.0;\n    // 多层叠加\n    for(float i=0.0;i<NUM_LAYERS;i++){\n        float layerVal = LayerPattern(uv,i,t);\n        float depthFade = S(0.0,1.0,1.0 - i/NUM_LAYERS);\n        m += layerVal * depthFade;\n    }\n\n    // 色彩映射\n    vec3 baseCol=vec3(sin(t*0.9)*0.5+0.5, cos(t*1.1)*0.5+0.5, sin(t*1.3+0.5)*0.5+0.5);\n    baseCol = baseCol*0.6+0.4;\n    vec3 col = baseCol*m;\n\n    // 中心晕影\n    float rad=dot(uv,uv);\n    col*=1.0 - rad*0.3;\n\n    // 无闪烁，全局稳定亮度\n    fragColor = vec4(col,1.0);\n}\n\n\n\n\n\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"McKfWD","date":"1734063320","viewed":21,"name":"Nebula Nest","username":"EileenXxx","description":"Neon Cubes","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["cube"],"hasliked":0,"parentid":"","parentname":""}}