{"ver":"0.1","info":{"id":"dstyDr","date":"1694970133","viewed":97,"name":"Circles and circles","username":"FFFFFFear1","description":"Just a check","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["learing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 _ColorCircle = vec3(1,0.3,0.1);\nfloat _RadiusCircle = 0.1;\nfloat _OutlineRadius = 0.01;\nfloat _OutlineSmoothRadius = 0.02;\nfloat _Speed = 0.4;\n\nfloat circle(vec2 pt, vec2 center, float radius, float _sizeOutline, float edge)\n{\n    vec2 newPt = pt - center;\n\n    float len = length(newPt);\n    float half_line_width = _sizeOutline / 2.0;\n    float result = smoothstep(radius - edge, radius, len + half_line_width) - smoothstep(radius, radius + edge, len - half_line_width);\n                \n    return result;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = ( fragCoord -.5* iResolution.xy ) / iResolution.y;\n    vec3 circles = vec3(0.);\n    \n    for(float j = 1.0; j < 4.0; j++) \n    { \n        for(float i = 1.0; i < 20.0; i++) \n        { \n            float T = iTime * _Speed;\n            vec2 time = vec2(cos(T / j), sin(T * j / i)) * i;\n\n            vec2 S = max(_RadiusCircle * abs(time), .5); \n            float speed = S.x * S.y;\n\n\n            vec2 randomPosition = time /10.0;\n            vec3 updatedColor = _ColorCircle * speed;\n            vec2 offset = vec2((j/i) * speed, 0.);\n\n            circles += updatedColor * circle(uv, randomPosition + offset, speed, _OutlineRadius, _OutlineSmoothRadius);;\n        }\n    }\n    \n   \n \n    fragColor = vec4(circles,1.0);\n}","name":"Image","description":"","type":"image"}]}