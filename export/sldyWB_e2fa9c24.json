{"ver":"0.1","info":{"id":"sldyWB","date":"1660495476","viewed":101,"name":"Procedual Weave Pattern (func)","username":"shiyuugo","description":"simple weave pattern function","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["procedural","texture","weave"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"// Fork of \"Procedual Weave Pattern\" by shiyuugo. https://shadertoy.com/view/stdyWB\n// 2022-08-14 16:40:40\n\n// weave()\n// UV    : canvasUV (px)\n// width : thread width(px)\n// yarn  : thread grouping number\n// over  : warp over number\n// under : warp under number\n// sett  : thread group showing pattern number \n//       : width*yarn*sett = tile pattern size (px) \nvec2 weave(vec2 UV, int width, int yarn, int over, int under, int sett){\n    \n\tfloat xp = floor(UV.x/float(yarn)/float(width));\n\tfloat yp = floor(UV.y/float(yarn)/float(width));\n    bool warp = mod(abs(xp-yp), float(over+under))>=float(under);\n    \n\tfloat m = fract( (warp?UV.x:UV.y) / float(width));\n          m = m>0.5 ? 1.-m : m;\n    float s = fract( (warp?xp:yp) / float(sett));\n          s = s>0.5 ? 1.-s : s; // symmetry\n    return vec2(m, s);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float zoom = 1.;\n    vec2 w = weave(fragCoord.xy * zoom, 5, 1, 2,1, 50);\n    //fragColor = vec4(w.x); return;\n\n\tvec4 col = vec4(0.9,0.1,0.1,1.0);\n         col = w.y <.1 ? vec4(0.0,.5,0.0,1.0) :\n               w.y <.2 ? vec4(1.0,1.0,0.0,1.0) : col;\n\n\tvec4 bgCol = vec4(0.0);\n\tfragColor = w.x <.2 ? bgCol : col; // TODO: maybe you need change threshold number a bit to avoid moire or no bgCol\n\t\n}\n","name":"Image","description":"","type":"image"}]}