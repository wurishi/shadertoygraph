{"ver":"0.1","info":{"id":"dllGz7","date":"1671553921","viewed":91,"name":"truchet uv.","username":"VL","description":".","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["pattern"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3Rn","filepath":"/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","previewfilepath":"/media/ap/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define int2 vec2\n#define float2 vec2\n#define int3 vec3\n#define float3 vec3\n#define int4 vec4\n#define float4 vec4\n#define frac fract\n#define sincos(x,s,c) s = sin(x),c = cos(x)\n#define mul(x,y) (x*y)\n#define atan2 atan\n#define fmod mod\n\nconst float InvPI = 0.318309886f;\nconst float PId2 = 1.57079632f;\nconst float PI = 3.141592653f;\nconst float PI2 = 6.2831853f;\nconst float MaxDist = 100.f;\nconst float SurfaceDist = 0.0001f;\nconst float FloatMax = 3.402823466e+38F;\n\nfloat2 hash(float2 p)\n{\n    float3 p3 = frac(float3(p.xyx) * float3(143.1031, 133.1030, 174.0973));\n    p3 += dot(p3, p3.yzx + 33.33);\n    return frac((p3.xx + p3.yz) * p3.zy);\n}\n\nfloat3 hash(float3 p3)\n{\n    p3 = frac(p3 * float3(134.1031, 154.1030, 177.0973));\n    p3 += dot(p3, p3.yxz + 33.33);\n    return frac((p3.xxy + p3.yxx) * p3.zyx);\n}\n\nfloat truchet(float2 p, float thickness)\n{\n    int2 idx = floor(p);\n    float2 rand = hash(idx);\n    \n    p -= 0.5f + idx;\n    p.x = rand.x > 0.5f ? p.x : -p.x;    \n    p.y = rand.y > 0.5f ? p.y : -p.y;    \n    p = p.y > -p.x ? p : -p;\n    \n    float dist = abs(length(p-0.5)-0.5) - thickness * 0.5;    \n    return smoothstep(0.01f, 0.f, dist);\n}\n\nfloat2 truchetUVsym(float2 p, float thickness, float flow)\n{\n    int2 idx = floor(p);\n    float2 rand = hash(idx);\n    \n    p -= 0.5f + idx;    \n    p.x = rand.x > 0.5f ? p.x : -p.x;\n    p.y = rand.y > 0.5f ? p.y : -p.y;    \n    p = p.y > -p.x ? p : -p;\n    \n    p -= 0.5;    \n    float hT = thickness*0.5;\n    float v = clamp(length(p) - 0.5, -hT, hT) + hT;\n    v /= thickness;\n    v = abs(2.f*v-1.f);\n\n    bool flip = bool((int(idx.x) + int(idx.y)) & 1); \n    float u = atan2(p.y, p.x) + (flip ? flow : -flow);\n    u = flip ? -u : u;    \n\n    return float2(frac(u/PI),v);\n}\n\nfloat2 truchetUV(float2 p, float thickness, float flow)\n{\n    int2 idx = floor(p);\n    float2 rand = hash(idx);\n    \n    p -= 0.5f + idx;    \n    bool flipX = rand.x > 0.5f, flipY  = rand.y > 0.5f;   \n    p.x = flipX ? p.x : -p.x;\n    p.y = flipY ? p.y : -p.y;    \n    p = p.y > -p.x ? p : -p;\n    \n    p -= 0.5;   \n    bool flip = bool((int(idx.x) + int(idx.y)) & 1); \n    float u = atan2(p.y, p.x) + (flip ? flow : -flow);\n    u = flip ? -u : u;    \n    \n    float hT = thickness*0.5;\n    float v = clamp(length(p) - 0.5, -hT, hT) + hT;\n    v /= thickness;\n    v = flip ^^ flipX ^^ flipY ? v : 1.f - v;\n\n    return float2(frac(u/PI),v);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.y * 2.f+iTime*0.5;    \n\n    vec3 col = vec3(0.f);\n    col = texture(iChannel0,truchetUV(uv,0.3,iTime)).rgb*truchet(uv,0.3);\n    //col.rg = truchetUV(uv,0.3,iTime)* truchet(uv,0.3f);\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}