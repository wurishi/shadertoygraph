{"ver":"0.1","info":{"id":"XcGcWR","date":"1731672174","viewed":23,"name":"ShaderAmp Sonic Pulse","username":"ArthurTent","description":"Example on YT: https://www.youtube.com/watch?v=8FmvUGyTrwc\nShaderAmp version is currently available in 'dev/more-shaders' branch.\nhttps://github.com/ArthurTent/ShaderAmp/tree/dev/more-shaders/dist/shaders","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["audiovisualiser"],"hasliked":0,"parentid":"4dcyD2","parentname":"Sonic Pulse"},"renderpass":[{"inputs":[{"id":"XdfGzn","filepath":"/media/a/894a09f482fb9b2822c093630fc37f0ce6cfec02b652e4e341323e4b6e4a4543.mp3","previewfilepath":"/media/ap/894a09f482fb9b2822c093630fc37f0ce6cfec02b652e4e341323e4b6e4a4543.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/4dcyD2\n// Modified by ArthurTent\n// Created by WillKirkby\n// Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// https://creativecommons.org/licenses/by-nc-sa/3.0/\n\n#define FFT(a) pow(texelFetch(iChannel0, ivec2(a, 0), 0).x, 5.)\nfloat snd = 0.;\nconst float PI = 3.1415926;\n\n// MIT Licensed hash From Dave_Hoskins (https://www.shadertoy.com/view/4djSRW)\nvec3 hash33(vec3 p)\n{\n    p = fract(p * vec3(443.8975,397.2973, 491.1871));\n    p += dot(p.zxy, p.yxz+19.27);\n    return fract(vec3(p.x * p.y, p.z*p.x, p.y*p.z));\n}\n\nvec3 stars(in vec3 p)\n{\n    vec3 c = vec3(0.);\n    float res = iResolution.x*0.8;\n    \n\tfor (float i=0.;i<4.;i++)\n    {\n        vec3 q = fract(p*(.15*res))-0.5;\n        //q*= snd/10.;\n        vec3 id = floor(p*(.15*res));\n        vec2 rn = hash33(id).xy;\n        float c2 = 1.-smoothstep(0.,.6,length(q));\n        c2 *= step(rn.x,.0005+i*i*0.001);\n        c += c2*(mix(vec3(1.0,0.49,0.1),vec3(0.75,0.9,1.),rn.y)*0.25+0.75);\n        p *= 1.4;\n    }\n    return c*c*.65;\n}\nvoid camera(vec2 fragCoord, out vec3 ro, out vec3 rd, out mat3 t)\n{\n    float a = 1.0/max(iResolution.x, iResolution.y);\n    //rd = normalize(vec3((fragCoord - iResolution.xy*0.5)*a, 0.5));\n    rd = normalize(vec3(fragCoord, 1.0));\n\n    ro = vec3(0.0, 0.0, -15.);\n\n    //float ff = min(1.0, step(0.001, iMouse.x) + step(0.001, iMouse.y));\n    float ff = min(1.0, step(0.001, iMouse.x) + step(0.001, iMouse.y))+sin(iTime/20.);\n    vec2 m = PI*ff + vec2(((iMouse.xy + 0.1) / iResolution.xy) * (PI*2.0));\n    //m.y = -m.y;\n    m.y = sin(m.y*0.5)*0.3 + 0.5;\n\n    //vec2 sm = sin(m)*sin(iTime), cm = cos(m)*(1.+sin(iTime));\n    vec2 sm = sin(m)*(1.+sin(iTime/10.)/2.), cm = cos(m);\n    mat3 rotX = mat3(1.0, 0.0, 0.0, 0.0, cm.y, sm.y, 0.0, -sm.y, cm.y);\n    mat3 rotY = mat3(cm.x, 0.0, -sm.x, 0.0, 1.0, 0.0, sm.x, 0.0, cm.x);\n\n    t = rotY * rotX;\n\n    ro = t * ro;\n    rd = t * rd;\n\n    rd = normalize(rd);\n}\n\nfloat circle(vec2 p, float r){\n\treturn r-length(p);\n}\n\nfloat scene(vec2 p){\n    vec2 p1=p;\n    if(abs(p.x)<.85&&abs(p.y)<.35)\n        p1=mod(p+.05,.1)-.05;  \n    \n    //p-=mod(p+.05,.1)-.05;\n    float r = texture(iChannel0, vec2(length(p)*.5,0)).r;\n    return circle(p1,.06*r*r);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int max_freq = 100;\n    for(int i=1; i < max_freq; i++){\n        snd +=FFT(i)*float(i);\n    }\n    snd /=float(max_freq*20);\n\tconst float cinematicAspect = 2.35;\n\tfloat currAspect = iResolution.x/iResolution.y;\n    \n    vec2 uv = fragCoord/iResolution.xy-.5;\n    \n\t//camera + rd for stars\n    vec3 ro = vec3(0.0);//rd = vec3( 0.0 );\n\tvec3 rd = normalize(vec3(uv,-1.5));\n    mat3 t = mat3(1.0);\n\tcamera(uv, ro, rd, t);\n\n\tvec4 wave = texture(iChannel0,uv/256.);\n    uv.x *= currAspect;\n    \n    float d = scene(uv);\n    \n    fragColor = 1.-clamp(vec4(d*iResolution.y*.5),0.,1.);\n    fragColor.rgb = mix(\n    \t//vec3(11,231,184)/255.,\n        vec3(int(sin(wave.r)*200.),75+int(sin(wave.r)*10.),75+int(cos(wave.r)*50.))/255.,\n        vec3(30,57,77)/255.,\n        fragColor.rgb\n    );\n    \n    if (abs(uv.y) > .75*(currAspect/cinematicAspect))\n    {\n\t\tfragColor *= 0.;\n\t}\n    else\n    {\n        //gl_FragColor = gl_FragColor * (length(uv)*-.5+1.) + texture(iChannel0,uv/256.)*.004;\n                //                      ^ vignette           ^ noise to hide banding\n        fragColor = fragColor * (length(uv)*-.5+1.);\n        fragColor *= pow(max(fragColor - .2, 0.), vec4(1.4)) * (wave.r*100.);\n\t}\n    rd.x+=sin(iTime/1000.)*2.;\n\tvec3 bg = stars(rd)*(1.+30.*snd);\n\tfragColor+=vec4(bg, 1.);\n}","name":"Image","description":"","type":"image"}]}