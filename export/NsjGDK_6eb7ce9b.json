{"ver":"0.1","info":{"id":"NsjGDK","date":"1619012472","viewed":119,"name":"CG assignment #2","username":"EgorDubrovsky","description":"Dodecahedron+Inclusions visualization for assignment #2","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["cg","dodecahedron","inclusions"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv) / float(iFrame + 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float INF = 1e10;\n\nconst vec3 CAMERA_POS = vec3(0, 1.2, -6);\n\nconst vec3 LIGHT1_POS = vec3(-3, 1.0, 5);\nconst float LIGHT1_RAD = 0.5;\nconst vec3 LIGHT1_COL = vec3(1, 1, 1);\n\nconst vec3 LIGHT2_POS = vec3(1, 1.2, -0.5);\nconst float LIGHT2_RAD = 0.25;\nconst vec3 LIGHT2_COL = vec3(1, 1, 0.1);\n\nconst float PHI = 1.6180339;\n\nvec3 randDir;\n\n\n// Intersection with y = -1.2 plane\nfloat tracePlane(vec3 pos, vec3 dir, out vec3 normal)\n{\n    float t = (-1.2 - pos.y) / dir.y;\n    if (t <= 0.0)\n    {\n        return INF;\n    }\n    \n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) >= 100.0)\n    {\n        return INF;\n    }\n    normal = vec3(0, 1, 0);\n    return t;\n}\n\n// Intersection with triangles\nfloat traceTriangle(vec3 pos, vec3 dir, vec3 verts[3], out vec3 normal)\n{\n    normal = normalize(cross(verts[1] - verts[0], verts[2] - verts[0]));\n    if (dot(dir, normal) > 0.0)\n    {\n        normal = -normal;\n    }\n    float t = dot(verts[0] - pos, normal)/dot(dir, normal);\n    if (t <= 0.0)\n    {\n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    //  Check if worldPos is in triangle\n    float sq1 = 0.5 * length(cross(verts[0] - worldPos, verts[1] - worldPos));\n    float sq2 = 0.5 * length(cross(verts[1] - worldPos, verts[2] - worldPos));\n    float sq3 = 0.5 * length(cross(verts[0] - worldPos, verts[2] - worldPos));\n    float sq  = 0.5 * length(cross(verts[0] - verts[1], verts[0] - verts[2]));\n    if (abs(sq1 + sq2 + sq3 - sq) > 0.001)\n    {\n        return INF;\n    }\n    return t;\n}\n\n// Intersection with pentagons\nfloat tracePentagon(vec3 pos, vec3 dir, vec3 verts[5], out vec3 normal)\n{\n    float to_output;\n    vec3 pent_normal;\n    vec3 triangleVerts[3] = vec3[3](verts[0], verts[1], verts[2]);\n    to_output = traceTriangle(pos, dir, triangleVerts, pent_normal);\n    normal = pent_normal;\n    if (to_output < INF)\n        return to_output;\n    triangleVerts = vec3[3](verts[2], verts[3], verts[4]);\n    to_output = traceTriangle(pos, dir, triangleVerts, pent_normal);\n    normal = pent_normal;\n    if (to_output < INF)\n        return to_output;\n    triangleVerts = vec3[3](verts[0], verts[2], verts[4]);\n    to_output = traceTriangle(pos, dir, triangleVerts, pent_normal);\n    normal = pent_normal;\n    return to_output;\n}\n\n// Intersection with spheres\nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal)\n{\n    float b = dot(pos, dir);\n    float D = b * b - dot(pos, pos) + r * r;\n    if (D < 0.0)\n    {\n        return INF;\n    }\n    float t = -b - sqrt(D);\n    if (t > 0.0)\n    {\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    t = -b + sqrt(D);\n    if (t < 0.0)\n    {\n        return INF;\n    }\n    normal = normalize(pos + t * dir);\n    return t;\n}\n\n// Intersection with the cylinder base\nfloat traceCylinder(vec3 pos, vec3 dir, out vec3 normal) \n{\n    float t = (-1.0 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) < 0.5) {\n        normal = vec3(0, 1, 0);\n        return t;\n    }\n\n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - 0.5;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    t = (-b - sqrt(D)) / a;\n    if (t > 0.0) {\n        worldPos = t * dir + pos;\n        if (worldPos.y <= -1.0) {\n            normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n            return t;\n        }\n    }\n    t = (-b + sqrt(D)) / a;\n    if (t < 0.0) {\n        return INF;\n    }\n    worldPos = t * dir + pos;\n    if (worldPos.y <= -1.0) {\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    }\n    return INF;\n}\n\n//  Dodecahedron tracing\nvec3 dodecVerts[20] = vec3[20]\n(\n    //  Orange (0 - 7)\n    vec3(1, 1, 1), vec3(1, 1, -1), vec3(1, -1, 1), vec3(1, -1, -1),\n    vec3(-1, 1, 1), vec3(-1, 1, -1), vec3(-1, -1, 1), vec3(-1, -1, -1),\n    //  Green (8 - 11)\n    vec3(0, PHI, 1.0/PHI), vec3(0, PHI, -1.0/PHI), vec3(0, -PHI, 1.0/PHI), vec3(0, -PHI, -1.0/PHI),\n    //  Blue (12 - 15)\n    vec3(1.0/PHI, 0, PHI), vec3(1.0/PHI, 0, -PHI), vec3(-1.0/PHI, 0, PHI), vec3(-1.0/PHI, 0, -PHI),\n    //  Pink (16 - 19)\n    vec3(PHI, 1.0/PHI, 0), vec3(PHI, -1.0/PHI, 0), vec3(-PHI, 1.0/PHI, 0), vec3(-PHI, -1.0/PHI, 0)\n);\nfloat traceDodecahedron(vec3 pos, vec3 dir, vec3[20] verts, out vec3 normal)\n{\n    float to_output = INF;\n    float t;\n    vec3[5] pentVerts;\n    vec3 pentNorm;\n    vec3 center = vec3(0, 0, 0);\n    \n    for (int i = 0; i < 20; i++)\n        center += verts[i];\n    center /= 20.0;\n    \n    // 1\n    pentVerts = vec3[5](verts[6], verts[14], verts[12], verts[2], verts[10]);\n    t = tracePentagon(pos, dir, pentVerts, pentNorm);\n    if (t < to_output)\n    {\n        to_output = t;\n        normal = pentNorm;\n        if (dot(verts[6] - center, normal) < 0.0)\n            normal = -normal;\n    }\n    \n    // 2\n    pentVerts = vec3[5](verts[2], verts[12], verts[0], verts[16], verts[17]);\n    t = tracePentagon(pos, dir, pentVerts, pentNorm);\n    if (t < to_output)\n    {\n        to_output = t;\n        normal = pentNorm;\n        if (dot(verts[2] - center, normal) < 0.0)\n            normal = -normal;\n    }\n    \n    // 3\n    pentVerts = vec3[5](verts[7], verts[19], verts[6], verts[10], verts[11]);\n    t = tracePentagon(pos, dir, pentVerts, pentNorm);\n    if (t < to_output)\n    {\n        to_output = t;\n        normal = pentNorm;\n        if (dot(verts[7] - center, normal) < 0.0)\n            normal = -normal;\n    }\n    \n    // 4\n    pentVerts = vec3[5](verts[2], verts[17], verts[3], verts[11], verts[10]);\n    t = tracePentagon(pos, dir, pentVerts, pentNorm);\n    if (t < to_output)\n    {\n        to_output = t;\n        normal = pentNorm;\n        if (dot(verts[2] - center, normal) < 0.0)\n            normal = -normal;\n    }\n    \n    // 5\n    pentVerts = vec3[5](verts[3], verts[13], verts[1], verts[16], verts[17]);\n    t = tracePentagon(pos, dir, pentVerts, pentNorm);\n    if (t < to_output)\n    {\n        to_output = t;\n        normal = pentNorm;\n        if (dot(verts[3] - center, normal) < 0.0)\n            normal = -normal;\n    }\n    \n    // 6\n    pentVerts = vec3[5](verts[7], verts[11], verts[3], verts[13], verts[15]);\n    t = tracePentagon(pos, dir, pentVerts, pentNorm);\n    if (t < to_output)\n    {\n        to_output = t;\n        normal = pentNorm;\n        if (dot(verts[7] - center, normal) < 0.0)\n            normal = -normal;\n    }\n    \n    // 7\n    pentVerts = vec3[5](verts[0], verts[8], verts[4], verts[14], verts[12]);\n    t = tracePentagon(pos, dir, pentVerts, pentNorm);\n    if (t < to_output)\n    {\n        to_output = t;\n        normal = pentNorm;\n        if (dot(verts[0] - center, normal) < 0.0)\n            normal = -normal;\n    }\n    \n    // 8\n    pentVerts = vec3[5](verts[4], verts[14], verts[6], verts[19], verts[18]);\n    t = tracePentagon(pos, dir, pentVerts, pentNorm);\n    if (t < to_output)\n    {\n        to_output = t;\n        normal = pentNorm;\n        if (dot(verts[4] - center, normal) < 0.0)\n            normal = -normal;\n    }\n    \n    // 9\n    pentVerts = vec3[5](verts[0], verts[16], verts[1], verts[9], verts[8]);\n    t = tracePentagon(pos, dir, pentVerts, pentNorm);\n    if (t < to_output)\n    {\n        to_output = t;\n        normal = pentNorm;\n        if (dot(verts[0] - center, normal) < 0.0)\n            normal = -normal;\n    }\n    \n    // 10\n    pentVerts = vec3[5](verts[5], verts[18], verts[4], verts[8], verts[9]);\n    t = tracePentagon(pos, dir, pentVerts, pentNorm);\n    if (t < to_output)\n    {\n        to_output = t;\n        normal = pentNorm;\n        if (dot(verts[5] - center, normal) < 0.0)\n            normal = -normal;\n    }\n    \n    // 11\n    pentVerts = vec3[5](verts[5], verts[15], verts[7], verts[19], verts[18]);\n    t = tracePentagon(pos, dir, pentVerts, pentNorm);\n    if (t < to_output)\n    {\n        to_output = t;\n        normal = pentNorm;\n        if (dot(verts[5] - center, normal) < 0.0)\n            normal = -normal;\n    }\n    \n    // 12\n    pentVerts = vec3[5](verts[5], verts[9], verts[1], verts[13], verts[15]);\n    t = tracePentagon(pos, dir, pentVerts, pentNorm);\n    if (t < to_output)\n    {\n        to_output = t;\n        normal = pentNorm;\n        if (dot(verts[5] - center, normal) < 0.0)\n            normal = -normal;\n    }\n    \n    \n    return to_output;\n}\n\n\nvec3 refraction(vec3 v, vec3 normal, float n1, float n2, float rand_float, float threshold)\n{\n    if (dot(v, normal) < 0.0)\n        normal = -normal;\n    float cosA = dot(v, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3 tangent = normalize(v - cosA * normal);\n    float sinB = sinA / n2 * n1; \n    if (sinB >= 1.0)\n            return reflect(v, normal);\n    float cosB = sqrt(1.0 - sinB * sinB);\n    return sinB * tangent + cosB * normal;\n}\n\nfloat pow2(float x)\n{\n    return x * x;\n}\n\nfloat rand(float frame)\n{\n    return fract(sin( dot(vec3(frame), vec3(12.9898,78.233,45.5432) )) * 43758.5453);\n}\n\nbool isOccluded(vec3 pos, vec3 target, vec3[20] dodecVerts)\n{\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n    \n    vec3 dodecNorm;\n    float dodT = traceDodecahedron(pos, dir, dodecVerts, dodecNorm);\n    if (dodT < dist) \n        return true;\n    vec3 standNorm;\n    float standT = traceCylinder(pos, dir, standNorm);\n    return (standT < dist);\n}\n\nvec3 computeLight(vec3 pos, vec3 color, vec3 normal, vec3[20] dodecVerts)\n{\n    vec3 toLight1 = LIGHT1_POS - pos;\n    float distSq1 = dot(toLight1, toLight1);\n    float att1 = isOccluded(pos, LIGHT1_POS + randDir * LIGHT1_RAD, dodecVerts) ? 0.0 : 20.0f / distSq1;\n    vec3 toLight2 = LIGHT2_POS - pos;\n    float distSq2 = dot(toLight2, toLight2);\n    float att2 = isOccluded(pos, LIGHT2_POS + randDir * LIGHT2_RAD, dodecVerts) ? 0.0 : 10.0f / distSq2;\n    return color * (max(0.0, dot(normal, normalize(toLight1))) * att1 * LIGHT1_COL +\n                    max(0.0, dot(normal, normalize(toLight2))) * att2 * LIGHT2_COL +\n                    texture(iChannel1, normal).rgb * 0.3);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    randDir = normalize(randVals - 0.5);\n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (randVals.xy - 0.5) * 2.0)/iResolution.x;\n    vec3 front = normalize(-CAMERA_POS);\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = normalize(cross(front, up));\n    up = normalize(cross(right, front));\n    vec3 viewVec = normalize(front + right * uv.x + up * uv.y);\n    \n    const int EMISSION = 0;\n    const int DIFFUSE = 1;\n    const int REFLECTION = 2;\n    const int REFRACTION = 3;\n    \n    vec3 curPos = CAMERA_POS;\n    vec3 curDir = viewVec;\n    \n    const float AIR_N = 1.0;\n    const float GLASS_N = 1.5;\n    const float DIAMOND_N = 2.5;\n    float n1 = AIR_N;\n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N + GLASS_N);\n    float DIAMOND_R = pow2(DIAMOND_N - GLASS_N) / pow2(DIAMOND_N + GLASS_N);\n    vec3 colorMult = vec3(1, 1, 1);\n    \n    //  Dodecahedron requisites\n    const vec3 INCL1_POS = vec3(0,-0.2,0);\n    const float INCL1_RAD = 0.3;\n    \n    const vec3 OFFSET = vec3(0,(1.0-PHI)*0.5,0);\n    const vec3 ROTATION = vec3(0, 0.3, 0);\n    const float SCALE = 0.5;\n    for (int i = 0; i < 20; i++)\n    {\n        dodecVerts[i] = (dodecVerts[i] + OFFSET) * SCALE;\n        vec3 before_rot = dodecVerts[i];\n        //  x-axis rotation\n        dodecVerts[i][1] = before_rot[1] * cos(ROTATION[0]) -\n                           before_rot[2] * sin(ROTATION[0]);\n        dodecVerts[i][2] = before_rot[1] * sin(ROTATION[0]) +\n                           before_rot[2] * cos(ROTATION[0]);\n        //  y-axis rotation\n        before_rot = dodecVerts[i];\n        dodecVerts[i][0] = before_rot[0] * cos(ROTATION[1]) +\n                           before_rot[2] * sin(ROTATION[1]);\n        dodecVerts[i][2] = - before_rot[0] * sin(ROTATION[1]) +\n                           before_rot[2] * cos(ROTATION[1]);\n        //  z-axis rotation\n        before_rot = dodecVerts[i];\n        dodecVerts[i][0] = before_rot[0] * cos(ROTATION[2]) -\n                           before_rot[1] * sin(ROTATION[2]);\n        dodecVerts[i][1] = before_rot[0] * sin(ROTATION[2]) +\n                           before_rot[1] * cos(ROTATION[2]);\n    }\n    \n    for (int i = 0; i < 10; ++i)\n    {\n        float t = INF;\n        int materialType = EMISSION;\n        vec3 color;\n        vec3 normal;\n        vec3 planeNorm;\n        vec3 l1Norm;\n        vec3 l2Norm;\n        vec3 sphNorm;\n        vec3 standNorm;\n        vec3 dodecNorm;\n        vec3 i1Norm;\n        \n        float nEnter = AIR_N;\n        \n        vec3 triNorm;\n        vec3 pentNorm;\n        \n        float planeT = tracePlane(curPos, curDir, planeNorm);\n        if (planeT < t)\n        {\n            t = planeT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel0, worldPos.xz).rgb;\n            normal = planeNorm;\n            \n            if (randVals.y < 0.2)\n                materialType = REFLECTION;\n        }\n        \n        float light1T = traceSphere(curPos - LIGHT1_POS, curDir, LIGHT1_RAD, l1Norm);\n        if (light1T < t)\n        {\n            t = light1T;\n            materialType = EMISSION;\n            color = LIGHT1_COL;\n            normal = l1Norm;\n        }\n        \n        float light2T = traceSphere(curPos - LIGHT2_POS, curDir, LIGHT2_RAD, l2Norm);\n        if (light2T < t)\n        {\n            t = light2T;\n            materialType = EMISSION;\n            color = LIGHT2_COL;\n            normal = l2Norm;\n        }\n\n        float dodT = traceDodecahedron(curPos, curDir, dodecVerts, dodecNorm);\n        if (dodT < t)\n        {\n            t = dodT;\n            materialType = REFRACTION;\n            normal = dodecNorm;\n            if (dot(curDir, normal) > 0.0)\n                nEnter = AIR_N;\n            else\n                nEnter = GLASS_N;          \n            if (randVals.x  < GLASS_R * 10.0)\n                materialType = REFLECTION;\n            else\n            {\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0)\n                    nEnter = AIR_N;\n                else\n                    nEnter = GLASS_N;\n            }\n            \n        }\n\n        float incl1T = traceSphere(curPos - INCL1_POS, curDir, INCL1_RAD, i1Norm);\n        if (incl1T < t)\n        {\n            t = incl1T;\n            normal = i1Norm;\n            if (randVals.x < DIAMOND_R)\n                materialType = REFLECTION;\n            else\n            {\n                colorMult *= vec3(0.6, 0.6, 1);\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0)\n                    nEnter = GLASS_N;\n                else\n                    nEnter = DIAMOND_N;\n            }\n           \n        }\n       \n        float standT = traceCylinder(curPos, curDir, standNorm);\n        if (standT < t)\n        {\n            t = standT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel2, worldPos.xz * worldPos.y).rgb;\n            normal = standNorm;\n        }\n        \n        if (t != INF)\n        {\n            vec3 worldPos = t * curDir + curPos;\n            fragColor = texture(iChannel0, worldPos.xz);\n            if (materialType == EMISSION)\n            {\n                fragColor.rgb = color * colorMult;\n                break;\n            }\n            else if (materialType == DIFFUSE)\n            {\n                fragColor.rgb = computeLight(worldPos, color, normal, dodecVerts) * colorMult;\n                break;\n            }\n            else if (materialType == REFLECTION)\n            {\n                curDir = reflect(curDir, normal);\n                curPos = worldPos + curDir * 1e-4;\n            }\n            else if (materialType == REFRACTION)\n            {\n                curDir = refraction(curDir, normal, n1, nEnter, randVals.x, GLASS_R);\n                curPos = worldPos + curDir * 1e-4;\n                n1 = nEnter;\n            }\n        }\n        else\n        {\n            fragColor.rgb = texture(iChannel1, curDir).rgb * colorMult;\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv) + texture(iChannel1, uv);\n}","name":"Buffer B","description":"","type":"buffer"}]}