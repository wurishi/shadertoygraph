{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"#define IT 600\n\nvec3 Mandelbrot(vec2 pix)\n{\n    vec2 uv = (pix / iResolution.xy) * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    // Position the camera  \n    float rad = -2.0;\n    uv = mat2(cos(rad), sin(rad), -sin(rad), cos(rad)) * uv;\n    uv += vec2(4.91, 22.91);\n    uv *= 0.028;\n    \n    vec2 c = uv;\n\tvec3 col = vec3(0.05);    \n    vec2 z = vec2(0.0);\n    float curIt = 0.0;\n    \n    // Calculate the actual Mandelbrot\n    for(int i=0; i<IT; i++)\n    {       \n    \tz = vec2( (z.x*z.x)-(z.y*z.y), 2.0*z.x*z.y) + c;\n\t\tif(dot(z,z) > 4.0)\n\t\t{\n            curIt = float(i);\n            break;\n\t\t}\n    }\n    \n    col = vec3(1.0);\n    col -= min(1.0, curIt / float(20)) * vec3(0.1,0.4,0.5);\n    col -= min(1.0, curIt / float(40))* vec3(0.2,0.2,0.2);\n    col -= min(1.0, curIt / float(100)) * vec3(0.0,0.5,0.4);\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 pix = fragCoord.xy;\n    \n    // Basic AA Mandelbrot\n    vec3 col = vec3(0.0);\n    for(int i=-2; i<=2 ; i++)\n    {\n    \tcol += Mandelbrot(pix + vec2(float(i) * 0.3));\n    }\n    col /= 5.0;\n    \n    // Vignetting : Thanks IQ :)\n    vec2 q = pix / iResolution.xy;\n    col *= 0.5 + 0.5*pow( 16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 1.0 );\n    \n    // Gamma correction\n    col = pow(col, vec3(1.0/2.22));\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MtsGzn","date":"1418152604","viewed":2821,"name":"Mandelost","username":"poljere","description":"Somewhere inside a Mandelbrot fractal.","likes":4,"published":3,"flags":0,"usePreview":0,"tags":["2d","fractal","mandelbrot"],"hasliked":0,"parentid":"","parentname":""}}