{"ver":"0.1","info":{"id":"ssScRG","date":"1644886819","viewed":100,"name":"Sheep, singular","username":"stegu","description":"By request: one cartoony sheep from my shader \"beaming down sheep\", separated from its peers and without animation, for easier re-use.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["noise","baa"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 sheep(vec2 uv, vec2 noiseoffset, float time) {\n    // A cartoon-style drawing of a sheep (RGB color and alpha mask).\n    // Copyright 2022 Stefan Gustavson (stefan.gustavson@gmail.com).\n    // This function is released under the MIT license:\n    // https://opensource.org/licenses/MIT\n    //\n    // The sheep is centered at (0.5,0.5), with a body of radius ~ 0.3.\n    // It has a bounding box of approximately (0.15, 0.1, 0.85, 0.85),\n    // and fits inside a circle of radius 0.4 centered at (0.5, 0.45).\n    float r = length(uv-0.5);\n    vec2 g;\n    float rn = r - 0.025*abs(psrdnoise((uv+noiseoffset)*6.0, vec2(0.0), 0.0, g));\n    rn -= 0.012*abs(psrdnoise((uv+noiseoffset)*12.0, vec2(0.0), 0.0, g));\n\n    float sheepbody = 1.0-aastep(0.3, rn);\n    float sheepoutline = aaline(0.3, rn, 2.0);\n    vec2 headpos = vec2(0.62, 0.55);\n    float sheephead = 1.0-aastep(0.1, lined(headpos, headpos+vec2(0.05, -0.08), uv));\n    float sheepleftear = 1.0 - aastep(0.03, \n        lined(headpos+vec2(-0.07, 0.01), headpos+vec2(-0.13, -0.07), uv));\n    float sheeprightear = 1.0 - aastep(0.03, \n        lined(headpos+vec2(0.05, 0.05), headpos+vec2(0.14, 0.03), uv));\n    const vec2 eyepos1 = vec2(-0.01, -0.01);\n    const vec2 eyepos2 = vec2(0.06, 0.01);\n    float sheepeyes = 1.0-aastep(0.03, min(length(uv-vec2(headpos+eyepos1)),\n                                           length(uv-vec2(headpos+eyepos2))));\n    vec2 sheeplook = vec2(0.0,-0.01); // gaze direction, keep within radius 0.015\n    float sheeppupils = 1.0-aastep(0.015, min(length(uv-vec2(headpos+eyepos1+sheeplook)),\n                                              length(uv-vec2(headpos+eyepos2+sheeplook))));\n    float sheepleg1 = aastep(0.03,lined(vec2(0.45,0.25), vec2(0.43,0.15), uv));\n    float sheepleg2 = aastep(0.03,lined(vec2(0.65,0.25), vec2(0.67,0.15), uv));\n    float sheepfrontlegs = 1.0 - min(sheepleg1, sheepleg2);\n    float sheepleg3 = aastep(0.03,lined(vec2(0.35,0.28), vec2(0.33,0.18), uv));\n    float sheepleg4 = aastep(0.03,lined(vec2(0.55,0.28), vec2(0.57,0.18), uv));\n    float sheephindlegs = 1.0 - min(sheepleg3, sheepleg4);\n    vec3 bgcolor = vec3(0.0); // \"Transparent black\" outside alpha-mask\n    vec3 woolcolor = vec3(1.0); // Snow white - this is a very tidy animal\n    vec3 skincolor = vec3(0.0); // Black\n    vec3 sheepcolor;\n    sheepcolor = mix(bgcolor, vec3(0.0), sheephindlegs);\n    sheepcolor = mix(sheepcolor, woolcolor, sheepbody);\n    sheepcolor = mix(sheepcolor, skincolor, sheepfrontlegs);\n    sheepcolor = mix(sheepcolor, skincolor, sheepoutline);\n    sheepcolor = mix(sheepcolor, skincolor, sheepleftear); // our left, the sheep's right\n    sheepcolor = mix(sheepcolor, skincolor, sheeprightear); // sheep's left, our right\n    sheepcolor = mix(sheepcolor, skincolor, sheephead);\n    sheepcolor = mix(sheepcolor, vec3(1.0), sheepeyes); // flat white\n    sheepcolor = mix(sheepcolor, vec3(0.0), sheeppupils); // flat black\n    \n    float sheepmask = max(max(sheepbody, sheepoutline), max(sheephindlegs, sheepfrontlegs));\n    sheepmask = max(sheepmask, sheeprightear); // This ear pokes out for some noise offsets\n    return vec4(sheepcolor, sheepmask);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Our fluffy friend wants coordinates in the range [0,1]\n    vec2 uv = vec2(0.5)+(fragCoord-0.5*iResolution.xy)/min(iResolution.x, iResolution.y);\n\n    // The noise offset is used for individual variations (a \"seed\" of sorts)\n    vec2 noiseoffset = vec2(0.0, 0.0);\n\n    // The time variable is unused for now, because there's no animation\n    vec4 sheepRGBA = sheep(uv, noiseoffset, iTime);\n\n    // The alpha channel is meant for compositing, like this:\n    vec3 mixcolor = mix(vec3(0.0,0.6,0.0), sheepRGBA.rgb, sheepRGBA.a);\n\n    fragColor = vec4(mixcolor,1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// A convenient anti-aliased step() using auto derivatives\nfloat aastep(float threshold, float value) {\n    float afwidth = 0.7 * length(vec2(dFdx(value), dFdy(value)));\n    return smoothstep(threshold-afwidth, threshold+afwidth, value);\n}\n\n// Anti-aliased implicit line around v == t, in the spirit of\n// aastep(), with line width w specified in fragment space (pixels)\nfloat aaline(float t, float v, float w) {\n  float fw = 0.7 * length(vec2(dFdx(v), dFdy(v)));\n  return smoothstep(t-0.5*w*fw-fw, t-0.5*w*fw+fw, v)\n\t- smoothstep(t+0.5*w*fw-fw, t+0.5*w*fw+fw, v);\n}\n\n// Compute the shortest distance from p to a line segment from p1 to p2.\nfloat lined(vec2 p1, vec2 p2, vec2 p) {\n    vec2 p1p2 = p2 - p1;\n    vec2 v = normalize(p1p2);\n    vec2 s = p - p1;\n    float t = dot(v, s);\n    if (t<0.0) return length(s);\n    if (t>length(p1p2)) return length(p - p2);\n    return length(s - t*v);\n}\n\n// Compute the shortest distance from p to a circle\n// with center at c and radius r.\nfloat circled(vec2 c, float r, vec2 p) {\n    return abs(length(p - c) - r);\n}\n\n// psrdnoise (c) Stefan Gustavson and Ian McEwan,\n// ver. 2021-12-02, published under the MIT license:\n// https://github.com/stegu/psrdnoise/\nfloat psrdnoise(vec2 x, vec2 period, float alpha, out vec2 gradient)\n{\n\tvec2 uv = vec2(x.x+x.y*0.5, x.y);\n\tvec2 i0 = floor(uv), f0 = fract(uv);\n\tfloat cmp = step(f0.y, f0.x);\n\tvec2 o1 = vec2(cmp, 1.0-cmp);\n\tvec2 i1 = i0 + o1, i2 = i0 + 1.0;\n\tvec2 v0 = vec2(i0.x - i0.y*0.5, i0.y);\n\tvec2 v1 = vec2(v0.x + o1.x - o1.y*0.5, v0.y + o1.y);\n\tvec2 v2 = vec2(v0.x + 0.5, v0.y + 1.0);\n\tvec2 x0 = x - v0, x1 = x - v1, x2 = x - v2;\n\tvec3 iu, iv, xw, yw;\n\tif(any(greaterThan(period, vec2(0.0)))) {\n\t\txw = vec3(v0.x, v1.x, v2.x);\n\t\tyw = vec3(v0.y, v1.y, v2.y);\n\t\tif(period.x > 0.0)\n\t\t\txw = mod(vec3(v0.x, v1.x, v2.x), period.x);\n\t\tif(period.y > 0.0)\n\t\t\tyw = mod(vec3(v0.y, v1.y, v2.y), period.y);\n\t\tiu = floor(xw + 0.5*yw + 0.5); iv = floor(yw + 0.5);\n\t} else {\n\t\tiu = vec3(i0.x, i1.x, i2.x); iv = vec3(i0.y, i1.y, i2.y);\n\t}\n\tvec3 hash = mod(iu, 289.0);\n\thash = mod((hash*51.0 + 2.0)*hash + iv, 289.0);\n\thash = mod((hash*34.0 + 10.0)*hash, 289.0);\n\tvec3 psi = hash*0.07482 + alpha;\n\tvec3 gx = cos(psi); vec3 gy = sin(psi);\n\tvec2 g0 = vec2(gx.x, gy.x);\n\tvec2 g1 = vec2(gx.y, gy.y);\n\tvec2 g2 = vec2(gx.z, gy.z);\n\tvec3 w = 0.8 - vec3(dot(x0, x0), dot(x1, x1), dot(x2, x2));\n\tw = max(w, 0.0); vec3 w2 = w*w; vec3 w4 = w2*w2;\n\tvec3 gdotx = vec3(dot(g0, x0), dot(g1, x1), dot(g2, x2));\n\tfloat n = dot(w4, gdotx);\n\tvec3 w3 = w2*w; vec3 dw = -8.0*w3*gdotx;\n\tvec2 dn0 = w4.x*g0 + dw.x*x0;\n\tvec2 dn1 = w4.y*g1 + dw.y*x1;\n\tvec2 dn2 = w4.z*g2 + dw.z*x2;\n\tgradient = 10.9*(dn0 + dn1 + dn2);\n\treturn 10.9*n;\n}\n","name":"Common","description":"","type":"common"}]}