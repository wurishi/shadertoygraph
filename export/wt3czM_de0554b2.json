{"ver":"0.1","info":{"id":"wt3czM","date":"1608659018","viewed":109,"name":"- helical gear -","username":"anahit_movsesyan","description":":octopus:","likes":4,"published":3,"flags":0,"usePreview":0,"tags":["sphere","twist"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define EPS 0.001\n#define MAX_DIST 20.\n\nfloat sdBox(vec3 p) {\n    vec3 d = abs(p) - 0.5;\n  \treturn min(max(d.x, max(d.y, d.z)), 0.) + length(max(d, 0.));\n}\n\nfloat sdTorus(vec3 p) {\n  \treturn length(vec2(length(p.xz) - 0.6, p.y)) - 0.4;  \n}\n\nvec3 rotateY(vec3 p, float k) {\n    float c = cos(k);\n    float s = sin(k);\n    return mat3(c,  0, -s,\n                0,  1,  0,\n                s,  0,  c) * p;\n}\n\nvec3 twistY(vec3 p, float k) {\n    float c = cos(k * p.y);\n    float s = sin(k * p.y);\n    return vec3(mat2(c, -s, s, c) * p.xz, p.y);\n}\n\nvec3 calcBoxPos() {\n    float y = 1. - 4. * abs(round(iTime / 12.) - iTime / 12.);\n    vec3 origin = vec3(sin(iTime / 0.3), y, cos(iTime / 0.3));\n    origin.xz *= cos(y * 3.14 / 2.);\n    return origin;\n}\n\nfloat calcDist(vec3 p) {\n    float dBox = sdBox(twistY(1.2 * (p + 3. * calcBoxPos()), 6.)) - 0.4;\n    float dSphere = sdTorus(0.3 * twistY(rotateY(p, iTime), 8.));\n    \n    float morphK = 1.8;\n    return -log(exp(-morphK * dSphere) + exp(-morphK * dBox)) / morphK;\n}\n\nfloat rayMarch(vec3 rayO, vec3 rayD) {\n    float distFromO = 0.;\n    for (int i = 0; i < 150; ++i) {\n\t    float dS = calcDist(rayO + rayD * distFromO);\n        distFromO += dS;\n        if (dS < EPS || distFromO > MAX_DIST) break;\n    }\n    \n    return distFromO;\n}\n\nvec3 calcNormal(vec3 p) {\n    float d = calcDist(p);\n\treturn normalize(vec3(d - calcDist(p - vec3(EPS, 0,  0 )),\n\t\t\t\t\t  \t  d - calcDist(p - vec3( 0, EPS, 0 )),\n\t\t\t\t\t   \t  d - calcDist(p - vec3( 0,  0, EPS))));\n}\n\nvec3 calcLight(vec3 fragPos, vec3 lightPos, vec3 lightCol, vec3 camDir) {    \n\tvec3 normal = calcNormal(fragPos);\n    vec3 lightDir = normalize(lightPos - fragPos);\n    \n    vec3 ambient = vec3(0.1);\n    vec3 diffuse = vec3(max(dot(normal, lightDir), 0.0));\n    vec3 specular = vec3(0.15 * pow(max(dot(-camDir, reflect(-lightDir, normal)), 0.), 16.));\n    \n    return lightCol * (ambient + diffuse + specular);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 xy = (fragCoord.xy - iResolution.xy / 2.) / min(iResolution.x, iResolution.y);\n    \n    vec3 camPos = vec3(0, 0, -10);\n\tvec3 camDir = normalize(vec3(xy, 1.));\n    \n    float dist = rayMarch(camPos, camDir);\n    \n    vec3 col = vec3(smoothstep(2., 0., length(xy))) * vec3(0.5, 0.6, 0.7);\n    \n    if (dist < MAX_DIST) { \n        col = calcLight(camPos + dist * camDir, \n                        vec3(5, 0, -15), \n                        vec3(0.9, 0.5, 0.4), \n                        camDir);\n    } \n    \n\tfragColor = vec4(col, 1.);\n}\n","name":"Image","description":"","type":"image"}]}