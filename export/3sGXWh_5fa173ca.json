{"ver":"0.1","info":{"id":"3sGXWh","date":"1575731691","viewed":1697,"name":"Convolution wiki","username":"csblo","description":"convolution","likes":7,"published":1,"flags":0,"usePreview":1,"tags":["wikipedia"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// author : csblo\n// Work made just by consulting :\n// https://en.wikipedia.org/wiki/Kernel_(image_processing)\n\n// Define kernels\n#define identity mat3(0, 0, 0, 0, 1, 0, 0, 0, 0)\n#define edge0 mat3(1, 0, -1, 0, 0, 0, -1, 0, 1)\n#define edge1 mat3(0, 1, 0, 1, -4, 1, 0, 1, 0)\n#define edge2 mat3(-1, -1, -1, -1, 8, -1, -1, -1, -1)\n#define sharpen mat3(0, -1, 0, -1, 5, -1, 0, -1, 0)\n#define box_blur mat3(1, 1, 1, 1, 1, 1, 1, 1, 1) * 0.1111\n#define gaussian_blur mat3(1, 2, 1, 2, 4, 2, 1, 2, 1) * 0.0625\n#define emboss mat3(-2, -1, 0, -1, 1, 1, 0, 1, 2)\n\n// Find coordinate of matrix element from index\nvec2 kpos(int index)\n{\n    return vec2[9] (\n    \tvec2(-1, -1),    \n        vec2(0, -1),\n        vec2(1, -1),\n        vec2(-1, 0),\n        vec2(0, 0),\n        vec2(1, 0),\n        vec2(-1, 1),\n        vec2(0, 1),\n        vec2(1, 1)\n    )[index] / iResolution.xy;\n}\n\n\n// Extract region of dimension 3x3 from sampler centered in uv\n// sampler : texture sampler\n// uv : current coordinates on sampler\n// return : an array of mat3, each index corresponding with a color channel\nmat3[3] region3x3(sampler2D sampler, vec2 uv)\n{\n    // Create each pixels for region\n    vec4[9] region;\n    \n    //\n    for (int i = 0; i < 9; i++)\n        region[i] = texture(sampler, uv + kpos(i));\n\n    // Create 3x3 region with 3 color channels (red, green, blue)\n    mat3[3] mRegion;\n    \n    for (int i = 0; i < 3; i++)\n        mRegion[i] = mat3(\n        \tregion[0][i], region[1][i], region[2][i],\n        \tregion[3][i], region[4][i], region[5][i],\n        \tregion[6][i], region[7][i], region[8][i]\n    \t);\n    \n    return mRegion;\n\n}\n\n// Convolve a texture with kernel\n// kernel : kernel used for convolution\n// sampler : texture sampler\n// uv : current coordinates on sampler\nvec3 convolution(mat3 kernel, sampler2D sampler, vec2 uv)\n{\n    vec3 fragment;\n    \n    // Extract a 3x3 region centered in uv\n    mat3[3] region = region3x3(sampler, uv);\n    \n    // for each color channel of region\n    for (int i = 0; i < 3; i++)\n    {\n        // get region channel\n        mat3 rc = region[i];\n        \n        // component wise multiplication of kernel by region channel\n        mat3 c = matrixCompMult(kernel, rc);\n        \n        // add each component of matrix\n        float r = c[0][0] + c[1][0] + c[2][0]\n                + c[0][1] + c[1][1] + c[2][1]\n                + c[0][2] + c[1][2] + c[2][2];\n        \n        // for fragment at channel i, set result\n        fragment[i] = r;\n    }\n    \n    return fragment;    \n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Convolve kernel with texture\n    vec3 col = convolution(emboss, iChannel0, uv);\n    \n\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}