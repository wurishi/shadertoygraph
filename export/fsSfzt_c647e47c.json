{"ver":"0.1","info":{"id":"fsSfzt","date":"1646824603","viewed":137,"name":"Fireflies 50b1","username":"ninofiliu","description":"Points run around the map based on slightly unphased trigonometric functions\n\nA smooth minimum of distances to points defines green and blue colors","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["smoothmin"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int n = 7;\nvec2[n] points;\n\nvoid mainImage(out vec4 color, in vec2 coord) {\n    float size = min(iResolution.x, iResolution.y);\n    vec2 uv = (coord.xy - 0.5 * iResolution.xy) / size * 2.;\n    \n    for (int i = 0; i < n; i++) {\n        points[i] = 0.6 * vec2(cos(0.3 * iTime * float(i+1)), sin(0.4 * iTime * float(i+1)));\n    }\n    \n    color = vec4(vec3(0.), 1.);\n    \n    for (int i = 0; i < n; i++) {\n        if (distance(uv, points[i]) < 0.015) {\n            color.r = 1.;\n        }\n    }\n    \n    float sma = 10.;\n    float sme = 0.;\n    for (int i = 0; i < n; i++) {\n        sme += exp(-sma * distance(uv, points[i]));\n    }\n    float sm = -log(sme)/sma;\n    color.g = exp(-4. * sm);\n    color.b = 2. - 100. * abs(sm - 0.15);\n}","name":"Image","description":"","type":"image"}]}