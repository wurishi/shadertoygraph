{"ver":"0.1","info":{"id":"7l2XRW","date":"1627230217","viewed":59,"name":"SDF Color with Struct","username":"ChaosOfZen","description":"Learning SDF with color using struct to contain position and color","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["3d","sdf","color","struct"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int MAX_MARCHING_STEPS = 255;\nconst float MIN_DIST = 0.0;\nconst float MAX_DIST = 100.0;\nconst float PRECISION = 0.001;\n\nstruct Surface {\n    float signedDistance;\n    vec3 color;\n};\n\nSurface unionColor(Surface obj1, Surface obj2) {\n    if (obj2.signedDistance < obj1.signedDistance) return obj2; // The sd component of the struct holds the \"signed distance\" value\n    return obj1;\n}\n\n\nSurface sdSphere(vec3 p, float r, vec3 offset, vec3 col)\n{\n    float d = length(p - offset) - r;\n    return Surface(d, col); // We're initializing a new \"Surface\" struct here and then returning it\n}\n\nSurface sdFloor(vec3 p, vec3 col) {\n    float d = p.y + 1.;\n    return Surface(d, col);\n}\n\nSurface sdScene(vec3 p) {\n    Surface sphereLeft = sdSphere(p, 1., vec3(-2.5, 0, -2), vec3(0, .8, .8));\n    Surface sphereRight = sdSphere(p, 1., vec3(2.5, 0, -2), vec3(1, 0.58, 0.29));\n    Surface co = unionColor(sphereLeft, sphereRight); // co = closest object containing \"signed distance\" and color\n    co = unionColor(co, sdFloor(p, vec3(1, 0.5, 0.1)));\n    return co;\n}\n\nSurface rayMarch(vec3 ro, vec3 rd, float start, float end) {\n    float depth = start;\n    Surface co; // closest object\n\n    for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n        vec3 p = ro + depth * rd;\n        co = sdScene(p);\n        depth += co.signedDistance;\n        if (co.signedDistance < PRECISION || depth > end) break;\n    }\n\n    co.signedDistance = depth;\n\n    return co;\n}\n\nvec3 calcNormal(in vec3 p) {\n    vec2 e = vec2(1.0, -1.0) * 0.0005; // epsilon\n    return normalize(\n      e.xyy * sdScene(p + e.xyy).signedDistance +\n      e.yyx * sdScene(p + e.yyx).signedDistance +\n      e.yxy * sdScene(p + e.yxy).signedDistance +\n      e.xxx * sdScene(p + e.xxx).signedDistance);\n}\n\nvec3 shader(vec2 uv) {\n    vec3 backgroundColor = vec3(0.835, .1, .1);\n\n    vec3 col = vec3(0);\n    vec3 ro = vec3(0, 0, 3); // ray origin that represents camera position\n    vec3 rd = normalize(vec3(uv, -1)); // ray direction\n\n    Surface co = rayMarch(ro, rd, MIN_DIST, MAX_DIST); // closest object\n\n    if (co.signedDistance > MAX_DIST) {\n        col = backgroundColor; // ray didn't hit anything\n    } else {\n        vec3 p = ro + rd * co.signedDistance; // point on sphere or floor we discovered from ray marching\n        vec3 normal = calcNormal(p);\n        vec3 lightPosition = vec3(2, 2, 7);\n        vec3 lightDirection = normalize(lightPosition - p);\n\n        // Calculate diffuse reflection by taking the dot product of \n        // the normal and the light direction.\n        float dif = clamp(dot(normal, lightDirection), 0.3, 1.);\n\n        // Multiply the diffuse reflection value by an orange color and add a bit\n        // of the background color to the sphere to blend it more with the background.\n        col = dif * co.color + backgroundColor * .2;\n    }\n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = shader(uv);\n\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}