{"ver":"0.1","info":{"id":"DtVBWc","date":"1702569446","viewed":84,"name":"Old TV horizontal stripes","username":"Kampfhund","description":"Creates random thin white stripes, similar to how they might appear in historical footage.\n\nThe frequency of these stripes can be adjusted in the code.","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["tv","effect","old","stripes"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    //If speed is 1, noise will be sampled at the same coordinate every frame.\n    float speed = 10.0;\n    //A frequency of 1 will cause the effect to barely ever appear.\n    //A frequency of 0 will cause the effect to always appear\n    float frequency = 0.85;\n    \n    \n    \n    \n    vec4 noise = texture(iChannel0, vec2(sin(iTime - (speed * iTime)), sin(iTime - (speed * iTime))));\n    vec4 tex = texture(iChannel1, uv);\n    \n    \n    vec4 col = vec4(0.0, 0.0, 0.0, 1.0);\n    \n    //Left condition serves as a clamp to reduce the frequency of the stripes\n    //Right condition serves to reduce the effect to only a small amount of y coordinates (with a somewhat random heigth).\n    if(noise.r >= frequency && abs(uv.y - abs(sin(iTime - (10.0 * iTime)))) <= abs(sin(noise.r * iTime)) * 0.005)\n    {\n      //Changes the intensity of the effect based on the x coordinate\n      //The math is somewhat randomly put together, just thought it looked decent\n      float randomizer = abs(sin(uv.x * noise.r + iTime) / 3.0);\n      \n      col = vec4(randomizer, randomizer, randomizer, 1.0); \n    }\n\n    \n    fragColor = tex + col;\n}","name":"Image","description":"","type":"image"}]}