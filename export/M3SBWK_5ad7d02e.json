{"ver":"0.1","info":{"id":"M3SBWK","date":"1729946930","viewed":172,"name":"cube subedevision","username":"nayk","description":"source fractal 62 and https://www.shadertoy.com/view/X3GXDc and stars by BigWings","likes":7,"published":3,"flags":0,"usePreview":0,"tags":["fractal","cube","rotatate"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define R(p,a,r)mix(a*dot(p,a),p,cos(r))+sin(r)*cross(p,a)\n#define H(h)(cos((h)*6.3+vec3(0,23,21))*.5+.5)\n#define PI 3.14159265359\nmat3 rot_x(float t)\n{\n    return mat3(\n        1., 0., 0.,\n        0., cos(t), -sin(t),\n        0., sin(t), cos(t)\n    );\n}\n\nmat3 rot_y(float t)\n{\n    return mat3(\n        cos(t), 0., -sin(t),\n        0., 1., 0.,\n        sin(t), 0., cos(t)\n    );\n}\n\nmat3 rot_z(float t)\n{\n    return mat3(\n        cos(t), -sin(t), 0.,\n        sin(t), cos(t), 0.,\n        0., 0., 1.\n    );\n}\n\nmat3 look_at(vec3 d)\n{\n    vec3 front = normalize(d);\n    vec3 right = cross(front, vec3(0.,1.,0.));\n    vec3 up = cross(right, front);\n   \n    return mat3(right, up, front);\n}\n\nmat3 look_at(vec3 d, vec3 o)\n{\n    vec3 front = normalize(d-o);\n    vec3 right = cross(vec3(0.,1.,0.), front);\n    vec3 up = cross(front, right);\n   \n    return mat3(right, up, front);\n}\n#define MIN_DIST .001\n#define MAX_DIST 100.\n#define STEPS 80\n\n// https://www.shadertoy.com/view/Xds3zN\nfloat sd_box_frame( vec3 p, vec3 b, float e )\n{\n       p = abs(p  )-b;\n  vec3 q = abs(p+e)-e;\n\n  return min(min(\n      length(max(vec3(p.x,q.y,q.z),0.0))+min(max(p.x,max(q.y,q.z)),0.0),\n      length(max(vec3(q.x,p.y,q.z),0.0))+min(max(q.x,max(p.y,q.z)),0.0)),\n      length(max(vec3(q.x,q.y,p.z),0.0))+min(max(q.x,max(q.y,p.z)),0.0));\n}\n\nfloat SDF(vec3 p)\n{\n \n    return sd_box_frame(p-vec3(0,0,5), vec3(1), 0.0012);\n}\n\nvec3 raymarch(vec3 o, vec3 d)\n{\n \n    vec3 col = vec3(0.);\n   \n    float t = 0.;\n    float shortest_dist = MAX_DIST;\n   \n    for (int i=0; i<STEPS; i++)\n    {\n        vec3 p = o+d*t;\n        float dist = SDF(p);\n        t += dist;\n       \n        if (dist < shortest_dist)\n            shortest_dist = dist;\n       \n        if (t > MAX_DIST)\n            break;\n       \n        if (dist < MIN_DIST)\n        {\n            col = vec3(1.);\n            break;\n        }\n    }\n     \n    return 1.-(col+(1.-shortest_dist));\n}\n\nvec3 render(vec2 U)\n{\n    vec2 ires = iResolution.xy;\n    vec3 o = vec3(\n        cos(iTime)*5.,\n        0,\n        sin(iTime)*5.+5.\n    );\n   o.yz*=mat2(cos(iTime), sin(iTime),-sin(iTime),cos(iTime));\n      o.xz*=mat2(cos(iTime), sin(iTime),-sin(iTime),cos(iTime));\n        o.xy*=mat2(cos(iTime), sin(iTime),-sin(iTime),cos(iTime));\n    vec3 d = normalize(vec3(\n        (U-.5*ires.xy)/ires.y*tan(.5*90.*PI/180.),\n        1.\n    ));\n   \n    d = look_at(vec3(0,0,5), o)*d;\n    return raymarch(o,d);\n}\n#define BURST\n#define NUM_LAYERS 5.\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c,-s,s,c);\n}\n#define n1Q(p) p *= 2.*ri(round(atan(p.x, p.y) * 4.) / 4.)\n#define ri(a) mat2(cos(a + asin(vec4(0,1,-1,0))))\n\nfloat Star(vec2 uv, float a, float sparkle) {\n    vec2 av1 = abs(uv);\n  vec2 av2 = abs(uv*Rot(a));\n    vec2 av = min(av1, av2);\n   \n    vec3 col = vec3(0);\n    float d = length(uv);\n    float star = av1.x*av1.y;\n    star = max(av1.x*av1.y, av2.x*av2.y);\n    star = max(0., 1.-star*1e3);\n   \n    float m = min(5., 1e-2/d);\n   \n    return m+pow(star, 4.)*sparkle;\n}\n\nfloat Hash21(vec2 p) {\n    p = fract(p*vec2(123.34,145.54));\n    p += dot(p, p+45.23);\n    return fract(p.x*p.y);\n}\n\nvec3 StarLayer(vec2 uv, float t, float sparkle) {\n    vec2 gv = fract(uv)-.5;\n    vec2 id = floor(uv);\nvec3 col = vec3(0);\n    n1Q(gv);\n      n1Q(id);\n        n1Q(uv);\n    #ifndef BURST\n    t = 0.;\n    #endif\n   \n    for(int y=-1; y<=1; y++) {\n        for(int x=-1; x<=1; x++) {\n            vec2 offs = vec2(x, y);\n            float n = Hash21(id-offs);\nvec3 N = fract(n*vec3(10,100,1000));\n            vec2 p = (N.xy-.5)*.7;\n           \n            float brightness = Star(gv-p+offs, n*6.2831+t, sparkle);\n            vec3 star = brightness*vec3(.6+p.x, .4, .6+p.y)*N.z*N.z;\n           \n           \n           \n            star *= 1.+sin((t+n)*20.)*smoothstep(sin(t)*.5+.5, 1., fract(10.*n));\n           \n            float d = length(gv+offs);\n           \n            col += star*smoothstep(1.5, .8, d);\n        }\n    }\n    return col;\n}\n\n\nfloat s1(float x){return sin(x)*.1-.05;}\n#define n1Q(p) p *= 2.*ri(round(atan(p.x, p.y) * 4.) / 4.)\n#define ri(a) mat2(cos(a + asin(vec4(0,1,-1,0))))\nvoid mainImage(out vec4 O, vec2 C)\n{\n    O=vec4(0);\n    vec2 uv = C/iResolution.xy;\n    float m = clamp(texture(iChannel0, uv).r, 0., 1.);\n    float a = 0.0;\n    float t = 0.02;\n    vec2 uv2 = (C-.5*iResolution.xy)/iResolution.y;\n    \n    float m2 = smoothstep(a, a+t, m);\n    vec3 col = render(C);\n     \n      col+= mix(1.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4)), col*vec3(0.1,2.,1.), m2);\n   \nfloat t2 = -iTime*.3;\n\n    float twirl = sin(t2*.1);\n    twirl *= twirl*twirl*sin(dot(uv,uv));\n    uv2 *= Rot(-t2*.2);\n   \n    uv2 *= 5.;\n   \n    vec3 col2 = vec3(0);\n    float speed = -.2;\n   \n    speed = .1;\n    float bla = sin(t2+sin(t2+sin(t2)*.5))*.5+.5;\n    float d = dot(uv2,uv2);\n   \n    float a2 = atan(uv2.x, uv2.y);\n    uv2 /= d;\n    float burst = sin(iTime*.05);\n    uv *= burst+.2;\n   \n   \n    float stp = 1./NUM_LAYERS;\n       \n    for(float i=0.; i<1.; i+=stp) {\n    float lt = fract(t*speed+i);\n        float scale = mix(10., .25, lt);\n        float fade = smoothstep(0., .4, lt)*smoothstep(1., .95, lt);\n        vec2 sv = uv2*scale+i*134.53-iTime;\n        //sv.x += t;\n        col2 += StarLayer(sv, t2, fade)*fade;\n    }\n   \n   \n    //t = iTime*.5;\n    float burstFade = smoothstep(0., .02, abs(burst));\n    float size = .9*sin(t2)+1.;\n    size = max(size, sqrt(size));\n    float fade = size/d;\n    col2 *= mix(1., fade, burstFade);\n    col2 += fade*.2*vec3(1., 0.5, 2.1)*bla*burstFade;\n   \n    t2*=1.5;\n   \n    a2 -= iTime*.1;\n    float rays = sin(a2*5.+t*3.)-cos(a2*7.-t);\n    rays *= sin(a+t+sin(a*4.)*10.)*.5+.5;\n    col2 += rays*bla*.1*burstFade;\n    col2 += 1.-burstFade;\n  \n    vec3 p,q,r=iResolution,\n    d2=normalize(vec3((C*2.-r.xy)/r.y,1));  \n    for(float i=0.,a,s,e,g=0.;\n        ++i<70.;\n        O.xyz+=mix(vec3(0.1,0.2,1.),H(g*.1),.8)*15./e/8e3\n    )\n    {\n        p=g*d2*col;\n       \n\n       \n        a=30.;\n        p=mod(p-a,a*2.)-a;\n        s=2.;\n           p.yz*=mat2(cos(iTime*1.05), sin(iTime*1.05),-sin(iTime*1.05),cos(iTime*1.05));\n      p.xz*=mat2(cos(iTime*1.05), sin(iTime*1.05),-sin(iTime*1.05),cos(iTime*1.05));\n        p.xy*=mat2(cos(iTime*1.05), sin(iTime*1.05),-sin(iTime*1.05),cos(iTime*1.05));\n        for(int i=0;i++<8;){\n       \n            p=.3-abs(p);\n            p.x<p.z?p=p.zyx:p;\n            p.z<p.y?p=p.xzy:p;\n            s*=e=1.7+sin(iTime*.1)*.1;\n            p=abs(p)*e-\n                vec3(\n                    5.+sin(iTime*.3+.5*sin(iTime*.3))*3.,\n                    120,\n                    10.*5.\n                 )*col;\n         }\n         g+=e=length(p.yzzz)/s;\n    }\n    O+=vec4(col2,1.);\n}\n\n","name":"Image","description":"","type":"image"}]}