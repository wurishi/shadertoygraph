{"ver":"0.1","info":{"id":"4ff3zS","date":"1703170786","viewed":32,"name":"black and white line","username":"nayk","description":"color, rotate,new, combination, line copypast and combination","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["line","color","rotate","new","combination"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*original https://www.shadertoy.com/view/ctGyWK https://www.shadertoy.com/view/DtXfDr*/\n#define R mat2(cos(a/4.+vec4(0,11,33,0)))\n#define S smoothstep\n\nvec4 Line(vec2 uv, float speed, float height, vec3 col) {\n    uv.y += S(1., 0., abs(uv.x)) * sin(iTime * speed + uv.x * height) * .2;\n    uv.x += S(1., 0., abs(uv.y)) * sin(iTime * speed + uv.y * height) * .2;\n    return vec4(S(.06 * S(.2, .9, abs(uv.x)), 0., abs(uv.y) - .004) * col, 1.0) * S(1., .3, abs(uv.x));\n}\n\nvoid mainImage(out vec4 O, vec2 I )\n{\n    //Initialize hue and clear fragcolor\n    vec4 h; O=++h;\n    vec2 uv = (I - .5 * iResolution.xy) / iResolution.y;\n    O = vec4 (0.);\n    vec4 O2= O;\n    for (float i = 0.; i <= 5.; i += 1.) {\n        float t = i / 5.;\n        O2 += Line(uv*cos(iTime), 3. + t, 4. + t, vec3(.2 + t * .7, .2 + t * .4, 0.3));\n    }\n    //Uvs and resolution for scaling\n    vec2 u,r=iResolution.xy;\n    //Alpha, length, angle and iterator/radius\n    for(float A,l,L,a,i=7.;--i>0.;\n            //A = anti-aliased alpha using SDF\n            //Pick layer color\n            O=mix(h=sin(i*2.+a/3.+vec4(4,3,5,21))*.2+.7,O, A=min(--l*r.y*.02,1.))*\n            //Soft shading\n            (l + h + .5*A*u.y/L )+L)\n     \n        a-=sin(a-=sin(a=iTime*4.+i*.4))*O2.y,\n       \n        u=(I+I-r)/r.y/.1,\n        //Compute round square SDF\n        L = l = max(length(u -= R*clamp(u*R,-i,i)),1.)*O2.y;\n       \n       \n}\n\n\n","name":"Image","description":"","type":"image"}]}