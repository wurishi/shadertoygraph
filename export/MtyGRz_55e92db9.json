{"ver":"0.1","info":{"id":"MtyGRz","date":"1488703826","viewed":499,"name":"Polyhedra","username":"OctopusX","description":"  ","likes":30,"published":1,"flags":64,"usePreview":0,"tags":["raymarch","polyhedra"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"MdBGDV","filepath":"https://soundcloud.com/alessandro-ito/the-crystal-method-keep-hope","previewfilepath":"https://soundcloud.com/alessandro-ito/the-crystal-method-keep-hope","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n//global animation speed\n#define animSpeed 1.0\n\n//alternative Z fold anim\n//#define advFold\n\n#define Phi (0.5*(1.+sqrt(5.0)))\nvec3 n1 = normalize(vec3(-Phi,Phi-1.0,1.0));\nvec3 n2 = normalize(vec3(1.0,-Phi,Phi+1.0));\nvec3 n3 = normalize(vec3(0.0,0.0,-1.0));\nmat4 m;\n\n\n\n//std matrix ------------------\n\nmat4 rotationMatrix(vec3 v, float angle)\n{\n   float c = cos(radians(angle));\n   float s = sin(radians(angle));\n   \n   return mat4(c + (1.0 - c) * v.x * v.x, (1.0 - c) * v.x * v.y - s * v.z, (1.0 - c) * v.x * v.z + s * v.y, 0.0,\n      (1.0 - c) * v.x * v.y + s * v.z, c + (1.0 - c) * v.y * v.y, (1.0 - c) * v.y * v.z - s * v.x, 0.0,\n      (1.0 - c) * v.x * v.z - s * v.y, (1.0 - c) * v.y * v.z + s * v.x, c + (1.0 - c) * v.z * v.z, 0.0,\n      0.0, 0.0, 0.0, 1.0);\n}\nmat4 translate(vec3 v) {\n   return mat4(1.0,0.0,0.0,0.0,\n      0.0,1.0,0.0,0.0,\n      0.0,0.0,1.0,0.0,\n      v.x,v.y,v.z,1.0);\n}\nmat4 scale4(float s) {\n   return mat4(s,0.0,0.0,0.0,\n      0.0,s,0.0,0.0,\n      0.0,0.0,s,0.0,\n      0.0,0.0,0.0,1.0);\n}\n\n// polynomial smooth min (k = 0.1);\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\n//sdf --------------------------\n\nfloat sdPlane( vec3 p )\n{\n\treturn p.y;\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n    return length(p)-s;\n}\n\nfloat polyhedra(vec3 z)\n{\n    const int steps = 2;\n    \n    //timespeed\n    float ts = iTime *animSpeed;\n    float a = 0.3, a2 = 0.6;\n    \n    float scale = 2.0;\n    float size = 0.66;\n    \n    float ang1 = sin(ts *0.01)*120.0;\n    float ang2 = 64.0;\n        \n    vec3 rot1;\n    rot1.x = sin(ts)*a;\n    rot1.z = cos(ts)*a;\n    rot1.y = sin(0.5 +ts *0.25)*a;\n    \n    vec3 rot2;\n    rot2.x = sin(ts *0.25) *a2;\n    rot2.z = cos(ts *0.5) *a2;\n    rot2.y = sin(0.5 +ts *0.15)*a2;\n\n    \n    vec3 offset;\n    \n    offset.x = sin(ts *2.0) *0.1;\n    offset.z = cos(ts *1.9) *0.1;\n    offset.y = sin(0.5 +ts *1.8)*0.1;\n    \n    vec3 plNormal = normalize(vec3(1.0,-0.1, 0.55));\n    \n    mat4 fracRotation2 = rotationMatrix(normalize(rot2), ang1);\n    mat4 fracRotation1 = rotationMatrix(normalize(rot1), ang2);\n    m =  fracRotation2 * translate(offset) * scale4(scale)\n        \t\t\t   * translate(-offset) * fracRotation1;\n    \n    float s=1.0;\n    float t;\n    \n    //folds\n    float dmin = -10000.0; \n    for(int i=0; i<steps; i++)\n    {\n      \tz = abs(z);\n      \tt=dot(z,n1); if (t>0.0) { z-=2.0*t*n1; }\n      \tt=dot(z,n2); if (t>0.0) { z-=2.0*t*n2; }\n      \tz = abs(z);\n      \tt=dot(z,n1); if (t>0.0) { z-=2.0*t*n1; }\n        t=dot(z,n2); if (t>0.0) { z-=2.0*t*n2; }\n      \tz = abs(z);\n        \n      \t//combine\n      \tdmin=max(dmin, s*dot(z-vec3(size,0.0,0.0),plNormal));\n      \tz = (m*vec4(z,1.0)).xyz;  s /= scale;\n        \n        float saw = mod(z.y,0.2);\n        z.y = mix(z.y, saw, sin(ts));\n   \t}\n    \n    #ifdef advFold\n    \tz.x = mod(z.z,1.5);\n    #endif\n    \n    return dmin;\n}\n\n//----------------------------------------------------------------------\n\nvec2 map( in vec3 pos )\n{\n    vec2 res = vec2 (polyhedra(pos),2.5) *0.9;\n\n    return res;\n}\n\nvec2 castRay( in vec3 ro, in vec3 rd )\n{\n    float tmin = 1.0;\n    float tmax = 20.0;\n\tfloat precis = 0.002;\n    float t = tmin;\n    float m = -1.0;\n    \n    //raymarch\n    for (int i=0; i<50; i++)\n    {\n\t    vec2 res = map( ro +rd*t );\n        if (res.x < precis || t > tmax) break;\n        t += res.x;\n\t    m = res.y;\n    }\n\n    if (t > tmax) m = -1.0;\n    return vec2( t, m );\n}\n\n\nfloat softshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<16; i++ )\n    {\n\t\tfloat h = map( ro + rd*t ).x;\n        res = min( res, 8.0*h/t );\n        t += clamp( h, 0.02, 0.10 );\n        if( h<0.001 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n\tvec3 eps = vec3( 0.001, 0.0, 0.0 );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\n\nvec3 render( in vec3 ro, in vec3 rd )\n{ \n    //bg\n    vec3 col = vec3(0.12, 0.2, 0.25)*0.35 +rd.y*0.1;\n    \n    //march\n    vec2 res = castRay(ro,rd);\n    float t = res.x;\n\tfloat m = res.y;\n    \n    \n    if (m > -0.5)\n    {\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal( pos );\n        vec3 ref = reflect( rd, nor );\n        col = 0.45 + 0.3*sin( vec3(0.05,0.08,0.10)*(m-1.0) );\n\t\t//col = vec3(0.15,0.15,0.15);\n\t\t\n        if( m<1.5 )\n        {\n            \n            float f = mod( floor(5.0*pos.z) + floor(5.0*pos.x), 2.0);\n            col = 0.4 + 0.1*f*vec3(1.0);\n        }\n\n        // lighitng        \n        float occ = calcAO( pos, nor );\n\t\tvec3  lig = normalize( vec3(-0.6, 0.7, -0.5) );\n\n\t\tfloat amb = clamp( 0.5+0.5*nor.y, 0.0, 1.0 );\n        float dif = clamp( dot( nor, lig ), 0.0, 1.0 );\n        float bac = clamp( dot( nor, normalize(vec3(-lig.x,0.0,-lig.z))), 0.0, 1.0 )*clamp( 1.0-pos.y,0.0,1.0);\n        float dom = smoothstep( -0.1, 0.1, ref.y );\n        float fre = pow( clamp(1.0+dot(nor,rd),0.0,1.0), 2.0 );\n\t\tfloat spe = pow(clamp( dot( ref, lig ), 0.0, 1.0 ),16.0);\n        \n        dif *= softshadow( pos, lig, 0.02, 2.5 );\n        dom *= softshadow( pos, ref, 0.02, 2.5 );\n\n\t\tvec3 lin = vec3(0.0);\n        lin += 1.20*dif*vec3(1.00,0.85,0.55);\n\t\tlin += 1.20*spe*vec3(1.00,0.85,0.55)*dif;\n        lin += 0.20*amb*vec3(0.50,0.70,1.00)*occ;\n        lin += 0.30*dom*vec3(0.50,0.70,1.00)*occ;\n        lin += 0.30*bac*vec3(0.25,0.25,0.25)*occ;\n        lin += 0.40*fre*vec3(1.00,1.00,1.00)*occ;\n\t\tcol = col*lin;\n        \n        float base = (1.0-amb) + (1.0-fre);\n        float g = pow(base,0.2);\n        g = clamp(g,0.1,1.0);\n        vec3 glow = vec3(0.5-g, 0.99-g, 1.0-g)*1.0;\n\n    \tcol = mix( col, vec3(0.8,0.9,1.0), 1.0-exp( -0.002*t*t ) );\n        col += glow;\n\n    }\n\n\treturn vec3( clamp(col,0.0,1.0) );\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy/iResolution.xy;\n    vec2 p = -1.0+2.0*q;\n\tp.x *= iResolution.x/iResolution.y;\n    vec2 mo = iMouse.xy/iResolution.xy;\n\t\t \n\tfloat time = 15.0 + iTime *5.0;\n\n\t// camera\n    float sh = 2.5;\n\tvec3 ro = vec3( sh*cos(0.1*time + 6.0*mo.x), 2.0*mo.y, sh*sin(0.1*time + 6.0*mo.x) );\n\tvec3 ta = vec3(0.0, 0.0, 0.0);//vec3( -0.5, -0.4, 0.5 );\n\t\n\t// camera-to-world transformation\n    mat3 ca = setCamera( ro, ta, 0.0 );\n    \n    // ray direction\n\tvec3 rd = ca * normalize( vec3(p.xy,2.0) );\n\n    // render\t\n    vec3 col = render( ro, rd );\n\n    //gamma\n\tcol = pow( col, vec3(0.4545) );\n\n    fragColor=vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"}]}