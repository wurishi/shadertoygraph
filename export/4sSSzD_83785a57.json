{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"/*\n  Written by Alan Wolfe\n  http://demofox.org/\n  http://blog.demofox.org/\n\n  1D bezier curves:\n  http://blog.demofox.org/2014/08/28/one-dimensional-bezier-curves/\n\n  helpful table of frequencies:\n  http://www.phy.mtu.edu/~suits/notefreqs.html\n*/\n\n#define A  0.4\n#define B  0.95\n#define C  0.05\n#define D  0.7\n\n#define EDGE   0.005\n#define SMOOTH 0.0025\n\n#define FREQUENCY_SCALE 1000.0\n#define TIME_SCALE 4.0\n\n// F(x,y) = F(x) - y\nfloat F ( in vec2 coords )\n{\n    float T = coords.x;\n    return\n        (A * (1.0-T) * (1.0-T) * (1.0-T)) + \n        (B * 3.0 * (1.0-T) * (1.0-T) * T) +\n        (C * 3.0 * (1.0-T) * T * T) +\n        (D * T * T * T) -\n        coords.y;\n}\n\n// gradiant function for finding G for a generic function when you can't\n// get it analytically using partial derivatives.  We could do\n// partial derivatives of F above, but I'm being lazy.\nvec2 Grad( in vec2 coords )\n{\n    vec2 h = vec2( 0.01, 0.0 );\n    return vec2( F(coords+h.xy) - F(coords-h.xy),\n                 F(coords+h.yx) - F(coords-h.yx) ) / (2.0*h.x);\n}\n\n// signed distance function for F(x,y)\nfloat SDF( in vec2 coords )\n{\n    float v = F(coords);\n    vec2  g = Grad(coords);\n    return abs(v)/length(g);\n}\n\n// signed distance function for Circle, for control points\nfloat SDFCircle( in vec2 coords, in vec2 offset )\n{\n    coords -= offset;\n    float v = coords.x * coords.x + coords.y * coords.y - EDGE*EDGE;\n    vec2  g = vec2(2.0 * coords.x, 2.0 * coords.y);\n    return v/length(g); \n}\n\n//-----------------------------------------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n    float aspectRatio = iResolution.x / iResolution.y;\n    vec2 percent = ((fragCoord.xy / iResolution.xy) - vec2(0.25,0.0));\n    percent.x *= aspectRatio;\n    \n    // show the ball moving across the curve\n    vec3 color = vec3(1.0,1.0,1.0);\n    float ballX = fract(iTime/TIME_SCALE);\n    float ballY = max(0.0,min(1.0,F(vec2(ballX,0.0))));\n    float dist = SDFCircle(percent,vec2(ballX,ballY));\n\tif (dist < 2.0*EDGE + SMOOTH)\n    {\n        dist = max(dist, 0.0);\n        dist = smoothstep(2.0*EDGE,2.0*EDGE + SMOOTH,dist);\n        color *= mix(vec3(0.0,1.0,1.0),vec3(1.0,1.0,1.0),dist);\n    }    \n\n    dist = SDFCircle(percent, vec2(0.0,A));\n\tif (dist < EDGE + SMOOTH)\n    {\n        dist = max(dist, 0.0);\n        dist = smoothstep(EDGE,EDGE + SMOOTH,dist);\n        color *= mix(vec3(1.0,0.0,0.0),vec3(1.0,1.0,1.0),dist);\n    }\n    \n    dist = SDFCircle(percent, vec2(0.33,B));\n\tif (dist < EDGE + SMOOTH)\n    {\n        dist = max(dist, 0.0);\n        dist = smoothstep(EDGE,EDGE + SMOOTH,dist);\n        color *= mix(vec3(0.0,1.0,0.0),vec3(1.0,1.0,1.0),dist);\n    }    \n    \n    dist = SDFCircle(percent, vec2(0.66,C));\n\tif (dist < EDGE + SMOOTH)\n    {\n        dist = max(dist, 0.0);\n        dist = smoothstep(EDGE,EDGE + SMOOTH,dist);\n        color *= mix(vec3(1.0,1.0,0.0),vec3(1.0,1.0,1.0),dist);\n    }    \n    \n    dist = SDFCircle(percent, vec2(1.0,D));\n\tif (dist < EDGE + SMOOTH)\n    {\n        dist = max(dist, 0.0);\n        dist = smoothstep(EDGE,EDGE + SMOOTH,dist);\n        color *= mix(vec3(0.0,0.0,1.0),vec3(1.0,1.0,1.0),dist);\n    }      \n    \n    dist = SDF(percent);\n    if (dist < EDGE + SMOOTH)\n    {\n        dist = smoothstep(EDGE - SMOOTH,EDGE + SMOOTH,dist);\n        color *= (percent.x >= 0.0 && percent.x <= 1.0) ? vec3(dist) : vec3(0.95);\n    }\n    \n\tfragColor = vec4(color,1.0);\n}\n","name":"Image","description":"","type":"image"},{"outputs":[],"inputs":[],"code":"/*\n  Written by Alan Wolfe\n  http://demofox.org/\n  http://blog.demofox.org/\n\n  1D bezier curves:\n  http://blog.demofox.org/2014/08/28/one-dimensional-bezier-curves/\n\n  helpful table of frequencies:\n  http://www.phy.mtu.edu/~suits/notefreqs.html\n*/\n\n#define A  0.4\n#define B  0.95\n#define C  0.05\n#define D  0.7\n\n#define FREQUENCY_SCALE 1000.0\n#define TIME_SCALE 4.0\n\n#define ENVELOPE_TIME (0.2 / TIME_SCALE)\n\n#define TWO_PI \t\t\t6.2831\n\n//========================= WAVE FORMS\nfloat makeSine(float revolutions)\n{\n    return sin(revolutions*TWO_PI);\n}\n\nfloat Integral(float x)\n{\n    // 1d quadtratic bezier indefinite integral:\n    // A*(-x^4/4+x^3-(3 x^2)/2+x) +\n    // B*((3 x^4)/4-2 x^3+(3 x^2)/2) +\n    // C*(x^3-(3 x^4)/4) +\n    // D*(x^4/4)\n    return\n        A * FREQUENCY_SCALE * (pow(x,4.0)/-4.0 + pow(x,3.0) - (3.0 * pow(x,2.0)) / 2.0 + x) +\n        B * FREQUENCY_SCALE * (3.0 * pow(x,4.0)/4.0 - 2.0 * pow(x, 3.0) + 3.0 * pow(x,2.0) / 2.0) +\n        C * FREQUENCY_SCALE * (pow(x,3.0) - (3.0 * pow(x,4.0)/4.0)) +\n        D * FREQUENCY_SCALE * (pow(x,4.0) / 4.0);\n    ;\n    \n}\n\n//========================= DRIVER CODE\n\nfloat makeSound(float time)\n{\n\t// make time repeat\n    time /= TIME_SCALE;\n    time = fract(max(time, 0.0));\n\n    // put a short envelope at the front and back to prevent popping\n    float envelope = 1.0;\n    if (time < ENVELOPE_TIME)\n        envelope = time / ENVELOPE_TIME;\n    else if (time > 1.0 - ENVELOPE_TIME)\n        envelope = ((1.0 - time) / ENVELOPE_TIME);   \n    \n    float revolutions = (Integral(time) - Integral(0.0)) * TIME_SCALE;\n    \n    return makeSine(revolutions) * envelope;\n}\n\nvec2 mainSound( in int samp,float time)\n{\n    // generate a mono channel sound\n    float monoSound = makeSound(time);\n    \n    // return our mono sound as a stereo sound, using it for both channels\n    return vec2(monoSound);\n}","name":"Sound","description":"","type":"sound"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":true,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4sSSzD","date":"1409341695","viewed":313,"name":"Note Slider 2","username":"demofox","description":"Using 1d bezier curves to do note sliding. More info on 1d bezier curves here:\nhttp://blog.demofox.org/2014/08/28/one-dimensional-bezier-curves/","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["bezier","audio"],"hasliked":0,"parentid":"","parentname":""}}