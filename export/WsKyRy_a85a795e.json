{"ver":"0.1","info":{"id":"WsKyRy","date":"1603138789","viewed":71,"name":"Very simple double helix","username":"benjm","description":"My first shader project, use your mouse to move it.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//It took a lot of time to wrap my head around how fragCoord work and go through\n//and try to understand the tutorials\n\n\n//rect was taken from GLSL 2D tutorial https://www.shadertoy.com/view/Md23DV\nfloat rect(vec2 r, vec2 bottomLeft, vec2 topRight) {\n\tfloat ret;\n\tfloat d = 0.005;\n\tret = smoothstep(bottomLeft.x-d, bottomLeft.x+d, r.x);\n\tret *= smoothstep(bottomLeft.y-d, bottomLeft.y+d, r.y);\n\tret *= 1.0 - smoothstep(topRight.y-d, topRight.y+d, r.y);\n\tret *= 1.0 - smoothstep(topRight.x-d, topRight.x+d, r.x);\n\treturn ret;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 r =  2.0*vec2(fragCoord.xy - 0.5*iResolution.xy)/iResolution.y;\n\t//normalized mouse coordinates\n    vec2 mouse = 2.0*vec2(iMouse.xy - 0.5*iResolution.xy)/iResolution.y;\n    vec3 col3 = vec3(0.867, 0.910, 0.247);\n    vec3 col2 = vec3(1.000, 0.627, 0.478);\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 ret = vec3(0.3);\n\n        //lines between rectangles\n    for(float i = -1.0; i<1.0; i+= 0.2){\n        float xLeft = 1.*cos(iTime*5.0 + i*3.14) + mouse.x;\n        float xRight = -1.*cos(iTime*5.0 + i*3.14) + mouse.x;\n        \n\n        float y = i + mod(iTime,4.2) - 2.;\n\n        \n        if(abs(r.y - y) < 0.01 && (r.x > xLeft && r.x < xRight)){\n            ret = col2 + mouse.x;//sin(iTime+uv.xyx);;\n        }\n        else if(abs(r.y - y) < 0.01 && (r.x > xRight && r.x < xLeft)){\n            ret = col2 + 0.2* mouse.x; //+ sin(iTime+uv.xyx);;\n        }\n\n            \n    }\n    \n    //left rectangles\n    for(float i=-1.0; i<1.0; i+= 0.2) {\n\t\t\tfloat x = 1.*cos(iTime*5.0 + i*3.14) + mouse.x;\n\t\t\t// y coordinate is the loop value\n\t\t\tfloat y = i + mod(iTime,4.2) - 2.;\n\t\t\tvec2 s = r - vec2(x,y);\n\t\t\t// each box has a different phase\n\t\t\tfloat angle = iTime*3. + i;\n\t\t\tmat2 rot = mat2(cos(angle), -sin(angle), sin(angle),  cos(angle));\n\t\t\ts = rot*s;\n        \n\t\t\tret = mix(ret, col3 + sin(iTime+uv.xyx), rect(s, vec2(-0.2, -0.02), vec2(0.01, 0.01)) );\n        \t\n\t\t}\n    //right rectangles\n        for(float i=-1.0; i<1.0; i+= 0.2) {\n\t\t\tfloat x = -1.*cos(iTime*5.0 + i*3.14) + mouse.x;\n\t\t\t// y coordinate is the loop value\n\t\t\tfloat y = i + mod(iTime,4.2) - 2.;\n\t\t\tvec2 s = r - vec2(x,y);\n\t\t\t// each box has a different phase\n\t\t\tfloat angle = iTime*3. + i;\n\t\t\tmat2 rot = mat2(cos(angle), -sin(angle), sin(angle),  cos(angle));\n\t\t\ts = rot*s;\n        \n\t\t\tret = mix(ret, col3 + sin(iTime+uv.xyx), rect(s, vec2(-0.2, -0.02), vec2(0.01, 0.01)) );\t\n            \n\t\t}\n\n    // update color\n    vec3 col =  ret;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}