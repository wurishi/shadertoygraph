{"ver":"0.1","info":{"id":"stc3z7","date":"1636163776","viewed":52,"name":"High Precision Attempt 2","username":"ChrisCoombes","description":"numbers","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["math"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"precision highp int;\n\n#define BNDigits 5\n#define BN int[BNDigits]\n#define BNInt(x) BN(0,0,0,0,x)\n#define BNZero BN(0,0,0,0,0)\n// 2^14     (Requires 15 bits)\n#define BNMax 16384\n// 2^14-1   (Max held in 14 bits)\n#define BNMask 16383\n// 14\n#define BNShift 14\n\n// 2^7-1 (Max held in 7 bits)\n#define BNLoMask 127\n// 2^14-2^7\n#define BNHiMask 16256\n// 7\n#define BNHiShift 7\n#define BNLo(x) (x & BNLoMask)\n#define BNHi(x) ((x & BNHiMask) >> BNHiShift)\n#define BNMkHi(x) (x << BNHiShift)\n\n#define BNClearCarryBit(x) x &= BNMask\n#define BNGetCarryBit(x) ((x >> BNShift) & 1)\n// 2^13 = 8192\n#define BNIsNegative(a) (a[BNDigits - 1] >= 8192)\n\n\nBN BNConst2 = BNInt(2);\n\nvoid BNNegate(inout BN a) {\n    int carry = 1;\n    for (int i = 0; i < BNDigits; i++) {\n        a[i] = BNMask - a[i] + carry;\n        carry = BNGetCarryBit(a[i]);\n        BNClearCarryBit(a[i]);\n    }\n}\nBN BNNegative(BN a) {\n    BNNegate(a);\n    return a;\n}\n\nfloat BNToFloat(BN a) {\n    bool isNeg = BNIsNegative(a);\n    if (isNeg) BNNegate(a);\n    float x = 0.0;\n    for (int i = 0; i < BNDigits; i++) {\n        x += float(a[i]) / pow(float(BNMax), float(BNDigits-1-i));\n    }\n    return isNeg ? -x : x;\n}\nBN BNFromFloat(in float x) {\n    bool isNeg = x < 0.0;\n    if (isNeg) x *= -1.0;\n    BN a = BNZero;\n    for (int i = 0; i < BNDigits; i++) {\n        a[i] = int(x * pow(float(BNMax), float(BNDigits-1-i))) & BNMask;\n    }\n    if (isNeg) BNNegate(a);\n    return a;\n}\n\nvoid BNAddTo(inout BN a, inout BN b) {\n    int carry = 0;\n    for (int i = 0; i < BNDigits; i++) {\n        a[i] += b[i] + carry;\n        carry = BNGetCarryBit(a[i]);\n        BNClearCarryBit(a[i]);\n    }\n}\nBN BNAdd(BN a, BN b) {\n    BNAddTo(a, b);\n    return a;\n}\n\nint BNMulCarry(int a, int b, inout int carry) {\n    int a0 = BNLo(a);\n    int a1 = BNHi(a);\n    int b0 = BNLo(b);\n    int b1 = BNHi(b);\n       \n    int r0 = a0 * b0;\n    int r1 = BNHi(r0) + a1 * b0 + a0 * b1;\n    carry = BNHi(r1) + a1 * b1;\n    return BNLo(r0) + BNMkHi(BNLo(r1));\n}\nBN BNMul(BN a, BN b) {\n    bool isNegA = BNIsNegative(a);\n    bool isNegB = BNIsNegative(b);\n    if (isNegA) BNNegate(a);\n    if (isNegB) BNNegate(b);\n    isNegA = isNegA != isNegB;\n    BN result;\n    \n    int carry, i, temp;\n    for (int ai = 0; ai < BNDigits; ai++) {\n        for (int bi = max(BNDigits - ai - 1, 0); bi < BNDigits; bi++) {\n            i = ai + bi + 1 - BNDigits;\n            temp = BNMulCarry(a[ai], b[bi], carry);\n            if (i >= 0) {\n                result[i] += temp;\n            }\n            if (i + 1 < BNDigits) {\n                carry += BNGetCarryBit(result[i]);\n                BNClearCarryBit(result[i]);\n                result[i + 1] += carry;\n                if (i + 2 < BNDigits) {\n                    carry = BNGetCarryBit(result[i + 1]);\n                    BNClearCarryBit(result[i + 1]);\n                    result[i + 2] += carry;\n                }\n            }\n        }\n    }\n    \n    if (isNegA) BNNegate(result);\n    return result;\n    //return BNFromFloat(BNToFloat(a) * BNToFloat(b));\n}\n// Rewrite multiplication?\n\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nvec2 normCoord(vec2 coord) {\n    return (2.0 * coord - iResolution.xy) / min(iResolution.x, iResolution.y);\n}\n\nvoid BNNormCoord(vec2 coord, inout BN xout, inout BN yout) {\n    BN x = BNFromFloat(coord.x);\n    BN y = BNFromFloat(coord.y);\n    BN rx = BNFromFloat(-iResolution.x);\n    BN ry = BNFromFloat(-iResolution.y);\n    BN d = BNFromFloat(1.0 / min(iResolution.x, iResolution.y));\n    xout = BNMul(BNAdd(BNMul(BNConst2, x), rx), d);\n    yout = BNMul(BNAdd(BNMul(BNConst2, y), ry), d);\n}\n\n/*float m(float a, float b) {\n    return BNToFloat(BNMul(BNFromFloat(a), BNFromFloat(b)));\n}*/\n\n#define MIters 100\nint fMandelbrot(vec2 c) {\n    vec2 z = vec2(0.0);\n    for (int i = 1; i < MIters; i++) {\n        if (dot(z,z) > 4.0) return i;\n        z = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + c;\n        //z = vec2(m(z.x, z.x) - m(z.y, z.y), m(2.0, m(z.x, z.y))) + c;\n    }\n    return -1;\n}\n\nint bnMandelbrot(BN cr, BN ci) {\n    BN zr = BNZero;\n    BN zi = BNZero;\n    BN temp1, temp2;\n    for (int i = 1; i < MIters; i++) {\n        temp1 = BNMul(zr, zr);\n        temp2 = BNMul(zi, zi);\n        if (BNToFloat(BNAdd(temp1,temp2)) > 4.0) {\n            return i;\n        }\n        zi = BNAdd(BNMul(BNConst2, BNMul(zr, zi)), ci);\n        BNNegate(temp2);\n        zr = BNAdd(BNAdd(temp1, temp2), cr);\n    }\n    \n    return -1;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    /*\n    // Addition Test:\n    BN x = BNFromFloat(fragCoord.x / iResolution.x * 0.001);\n    BN y = BNFromFloat(fragCoord.y / iResolution.y * 0.001);\n    x = BNAdd(x, y);\n    fragColor = vec4(BNToFloat(x) * 1000.0 * 0.5, 0.0, 0.0, 1.0);*/\n    \n    /*\n    // Carry Multiplication Test\n    int x = int(fragCoord.x);\n    int y = int(fragCoord.y);\n    int mul1 = x * y;\n    int carry;\n    int mul2 = BNMulCarry(x, y, carry);\n    //fragColor = vec4(float(mul1) * 0.00003, 0.0, 0.0, 1.0);\n    fragColor = vec4((float(mul2) + float(carry) * float(BNMax)) * 0.00003, 0.0, 0.0, 1.0);*/\n    \n    /*\n    // Multiplication Test\n    float fx = -fragCoord.x / iResolution.x;\n    float fy = -fragCoord.y / iResolution.y;\n    float fMul = fx * fy;\n    \n    BN x = BNFromFloat(fx);\n    BN y = BNFromFloat(fy);\n    BN bnMul = BNMul(x, y);\n    \n    float factor = 1.5;\n    //fragColor = vec4(-fMul * factor, 0.0, 0.0, 1.0);\n    fragColor = vec4(BNToFloat(bnMul) * factor, 0.0, 0.0, 1.0);*/\n    \n    vec2 uv = normCoord(fragCoord) * pow(0.5, iTime) + vec2(-1.783, 0.0);\n    if (uv.y < 0.0) {\n        int i = fMandelbrot(uv);\n        if (i >= 0) {\n            float k = float(i) / 100.0;\n            fragColor = vec4(k, 1.0 - k, 1.0 - k, 1.0);\n        } else {\n            fragColor = vec4(vec3(0.0), 1.0);\n        }\n    } else {\n        BN cr, ci;\n        BNNormCoord(fragCoord, cr, ci);\n        cr = BNAdd(BNMul(cr, BNFromFloat(pow(0.5, iTime))), BNFromFloat(-1.783));\n        ci = BNMul(ci, BNFromFloat(pow(0.5, iTime)));\n        int i = bnMandelbrot(cr, ci);\n        \n        if (i >= 0) {\n            float k = float(i) / 100.0;\n            fragColor = vec4(k, 1.0 - k, 1.0 - k, 1.0);\n        } else {\n            fragColor = vec4(vec3(0.0), 1.0);\n        }\n    }\n}\n\n\n\n\n","name":"Image","description":"","type":"image"}]}