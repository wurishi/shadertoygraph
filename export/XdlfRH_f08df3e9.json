{"ver":"0.1","info":{"id":"XdlfRH","date":"1494863645","viewed":5861,"name":"Rounded Box Outline (SDF)","username":"VB","description":"answering http://stackoverflow.com/questions/43970170/bordered-rounded-rectangle-in-glsl","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// unsigned round box\nfloat udRoundBox( vec3 p, vec3 b, float r )\n{\n  return length(max(abs(p)-b,0.0))-r;\n}\n\n// substracts shape d1 from shape d2\nfloat opS( float d1, float d2 )\n{\n    return max(-d1,d2);\n}\n\n// to get the border of a udRoundBox, simply substract a smaller udRoundBox !\nfloat udRoundBoxBorder( vec3 p, vec3 b, float r, float borderPercent )\n{\n  return opS(udRoundBox(p, b*borderPercent, r), udRoundBox(p, b, r));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // get screen pos in [0-1]\n    // we want a 1:1 aspect ratio, this is why we use iResolution.yy\n\tvec2 uv = fragCoord.xy / iResolution.yy;\n\t\n    // box setup\n    vec3 boxPosition = vec3(0.5,0.5,0.0);\n    vec3 boxSize = vec3(0.1,0.1,0.0);\n    float boxRounding = 0.05;\n    \n    // render the box\n    vec3 curPosition = vec3(uv, 0.0);    \n    float dist = udRoundBoxBorder(curPosition - boxPosition, boxSize, boxRounding, 0.9);    \n    float THRESHOLD = 0.0001;\n    if (dist <= THRESHOLD)\n        fragColor.rgb = vec3(1.0, 0.0, 0.0);\n}","name":"Image","description":"","type":"image"}]}