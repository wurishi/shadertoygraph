{"ver":"0.1","info":{"id":"XfSczy","date":"1722484527","viewed":19,"name":"AmigaStretchTwister","username":"vschwaberow","description":"Some try with stretch and twist","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["retro","amiga","twist","stretch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat noise(float t) {\n    return fract(sin(t * 12345.6789) * 43758.5453);\n}\n\n\nfloat smoothNoise(float t) {\n    float f0 = noise(floor(t));\n    float f1 = noise(ceil(t));\n    return mix(f0, f1, smoothstep(0.0, 1.0, fract(t)));\n}\n\nvec2 distort(vec2 uv, float time) {\n\n    float waveAmount = 0.1 * (smoothNoise(time * 0.1) + 0.5);\n    float waveSpeed = 2.0 + smoothNoise(time * 0.05) * 1.5;\n    float twistAmount = 0.5 * (smoothNoise(time * 0.07) + 0.5);\n    float twistSpeed = 1.5 + smoothNoise(time * 0.03) * 1.0;\n    float stretchAmount = 0.2 * (smoothNoise(time * 0.08) + 0.5);\n    float stretchSpeed = 1.0 + smoothNoise(time * 0.04) * 0.5;\n\n\n    uv.y += sin(uv.x * 10.0 + time * waveSpeed) * waveAmount;\n    uv.x += cos(uv.y * 8.0 + time * waveSpeed * 0.7) * waveAmount * 0.5;\n    \n\n    float angle = (uv.y - 0.5) * twistAmount * sin(time * twistSpeed);\n    angle += (uv.x - 0.5) * twistAmount * 0.5 * cos(time * twistSpeed * 0.8);\n    mat2 rotationMatrix = mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n    uv = rotationMatrix * (uv - 0.5) + 0.5;\n    \n    float stretchY = (sin(time * stretchSpeed) * 0.5 + 0.5) * stretchAmount;\n    float stretchX = (cos(time * stretchSpeed * 1.2) * 0.5 + 0.5) * stretchAmount * 0.7;\n    uv.y += stretchY * (uv.y - 0.5);\n    uv.x += stretchX * (uv.x - 0.5);\n    \n    float wobbleAmount = 0.02 * smoothNoise(time * 0.1);\n    uv.x += sin(uv.y * 20.0 + time * 2.0) * wobbleAmount;\n    uv.y += cos(uv.x * 20.0 + time * 1.8) * wobbleAmount;\n\n    return uv;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 distortedUV = distort(uv, iTime);\n    \n    vec4 logo = texture(iChannel0, distortedUV);\n    \n    vec3 cycledColor = vec3(\n        sin(iTime * 0.3) * 0.5 + 0.5,\n        sin(iTime * 0.3 + 2.0) * 0.5 + 0.5,\n        sin(iTime * 0.3 + 4.0) * 0.5 + 0.5\n    );\n    \n    logo.rgb = mix(logo.rgb, logo.rgb * cycledColor, 0.3 * logo.a);\n    \n    fragColor = logo;\n}","name":"Image","description":"","type":"image"}]}