{"ver":"0.1","info":{"id":"csfBDn","date":"1688604127","viewed":22,"name":"Pentagono Animado","username":"arthurguilherme","description":"Base do fractal do pentágono de Dürer com animação","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["pentagono"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3zn","filepath":"/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","previewfilepath":"/media/ap/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fonte de pesquisa: https://inspirnathan.com/posts/47-shadertoy-tutorial-part-1\n\nconst int MAX_MARCHING_STEPS = 255;\nconst float MIN_DIST = 0.0;\nconst float MAX_DIST = 100.0;\nconst float PRECISION = 0.001;\nconst float EPSILON = 0.0005;\nconst float PI = 3.14159265359;\nconst vec3 COLOR_BACKGROUND = vec3(.741, .675, .82);\nconst vec3 COLOR_AMBIENT = vec3(0.42, 0.0, 0.1)*0.2;\nconst vec3 COLOR_TORUS1 = vec3(0.8, 0.3, 0.0);\nconst vec3 COLOR_TORUS2 = vec3(0.9, 0.8, 0.0);\nconst vec3 COLOR_TORUS3 = vec3(0.8, 0.2, 0.9);\nconst vec3 COLOR_TORUS4 = vec3(0.0, 0.8, 0.3);\nconst vec3 COLOR_TORUS5 = vec3(0.0, 0.3, 0.8);\n\n\nstruct Surface {\n  float sd; // signed distance\n  vec3 col; // diffuse color\n};\n\nmat2 rotate2d(float theta) {\n  float s = sin(theta), c = cos(theta);\n  return mat2(c, -s, s, c);\n}\n\n// Rotation matrix around the X axis.\nmat3 rotateX(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(1, 0, 0),\n        vec3(0, c, -s),\n        vec3(0, s, c)\n    );\n}\n\n// Rotation matrix around the Y axis.\nmat3 rotateY(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, 0, s),\n        vec3(0, 1, 0),\n        vec3(-s, 0, c)\n    );\n}\n\n// Rotation matrix around the Z axis.\nmat3 rotateZ(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, -s, 0),\n        vec3(s, c, 0),\n        vec3(0, 0, 1)\n    );\n}\n\n// Identity matrix.\nmat3 identity() {\n    return mat3(\n        vec3(1, 0, 0),\n        vec3(0, 1, 0),\n        vec3(0, 0, 1)\n    );\n}\n\nfloat opUnion(float d1, float d2) { \n  return min(d1, d2);\n}\n\nSurface opUnion(Surface d1, Surface d2) {\n  if (d2.sd < d1.sd) return d2;\n  return d1;\n}\n\n\nfloat sdTorus(vec3 p, float r1, float r2, vec3 offset)\n{\n  vec3 q = vec3(length(p.xy - offset.xy) - r2, p.z - offset.z, 0.0);\n  return (length(q) - r1);\n}\n\n\n\nSurface sdFloor(vec3 p) {\n  float torusFloor = p.y + 2.0 + texture(iChannel0, p.xz).x*0.1 ;\n  vec3 torusFloorCol = mix(vec3(1.5), vec3(1), texture(iChannel0, p.xz/1.).x);\n  return Surface(torusFloor, torusFloorCol);\n}\n\nSurface sdTorus(vec3 p, float r1, float r2, vec3 offset, vec3 color, mat3 transform){\n    p *= transform;\n    return Surface(sdTorus(p, r1, r2, offset),color);\n}\n\nSurface pentagono(vec3 p){\n  p *= rotateY(iTime);\n\n  Surface torus_1 = sdTorus(p, 0.2, 0.5, vec3(0.0, 1.5, 0.0),COLOR_TORUS1,rotateY(iTime));\n  Surface torus_2 = sdTorus(p, 0.2, 0.5, vec3(-1.0, 0.5, 0.0),COLOR_TORUS2,identity());\n  Surface torus_3 = sdTorus(p, 0.2, 0.5, vec3(1.0, 0.5, 0.0),COLOR_TORUS3,identity());\n  Surface torus_4 = sdTorus(p, 0.2, 0.5, vec3(-0.75, -0.90, 0.0),COLOR_TORUS4,rotateY(-2.0*iTime));\n  Surface torus_5 = sdTorus(p, 0.2, 0.5, vec3(0.75, -0.90, 0.0),COLOR_TORUS5,rotateY(iTime));\n\n  \n  Surface d = opUnion(torus_1, torus_2);\n  d = opUnion(d, torus_3);\n  d = opUnion(d, torus_4);\n  return opUnion(d, torus_5);\n}\n\nSurface scene(vec3 p) {\n  Surface d = pentagono(p);\n  return opUnion(d, sdFloor(p));\n}\n\nSurface rayMarch(vec3 ro, vec3 rd) {\n  float depth = MIN_DIST;\n  Surface co; // closest object\n\n  for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n    vec3 p = ro + depth * rd;\n    co = scene(p);\n    depth += co.sd;\n    if (co.sd < PRECISION || depth > MAX_DIST) break;\n  }\n  \n  co.sd = depth;\n  \n  return co;\n}\n\nvec3 calcNormal(in vec3 p) {\n    vec2 e = vec2(1, -1) * EPSILON;\n    return normalize(\n      e.xyy * scene(p + e.xyy).sd +\n      e.yyx * scene(p + e.yyx).sd +\n      e.yxy * scene(p + e.yxy).sd +\n      e.xxx * scene(p + e.xxx).sd);\n}\n\nmat3 camera(vec3 cameraPos, vec3 lookAtPoint) {\n\tvec3 cd = normalize(lookAtPoint - cameraPos);\n\tvec3 cr = normalize(cross(vec3(0, 1, 0), cd));\n\tvec3 cu = normalize(cross(cd, cr));\n\t\n\treturn mat3(-cr, cu, -cd);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n  vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n  vec2 mouseUV = iMouse.xy / iResolution.xy;\n\n  if (mouseUV == vec2(0.0)) mouseUV = vec2(0.5); // trick to center mouse on page load\n\n  vec3 col = vec3(0);\n  vec3 lp = vec3(0); // lookat point\n  vec3 ro = vec3(-3, 0.5, 3); // ray origin that represents camera position\n\n  float cameraRadius = 2.;\n  ro.yz = ro.yz * cameraRadius * rotate2d(mix(-PI / 2., PI / 2., mouseUV.y));\n  ro.xz = ro.xz * rotate2d(mix(-PI, PI, mouseUV.x)) + vec2(lp.x, lp.z);\n\n  vec3 rd = camera(ro, lp) * normalize(vec3(uv, -1)); // ray direction\n\n  Surface co = rayMarch(ro, rd);; // signed distance value to closest object\n\n  if (co.sd > MAX_DIST) {\n    col = COLOR_BACKGROUND; // ray didn't hit anything\n  }\n  else {\n    vec3 p = ro + rd * co.sd; // point discovered from ray marching\n    vec3 normal = calcNormal(p); // surface normal\n\n    vec3 lightPosition = vec3(2, 2, 2);\n    vec3 lightDirection = normalize(lightPosition - p) * 0.5; // The 0.65 is used to decrease the light intensity a bit\n\n    float dif = clamp(dot(normal, lightDirection), 0., 1.) * 0.5 + 0.5; // diffuse reflection mapped\n\n    col = dif * co.col + COLOR_AMBIENT;\n\n  }\n\n  fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}