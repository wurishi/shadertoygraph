{"ver":"0.1","info":{"id":"ctGXWc","date":"1686404425","viewed":104,"name":"Kuwahara Filter - NatLab","username":"NatShadLab","description":"Kuwahara Filter Implementation.","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["kuwahara","stylized"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord / iResolution.xy);\n    \n    vec4 ch = texture(iChannel0, uv);\n    \n    // Output to screen\n    fragColor = vec4(ch);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float str = 1.5;\n    str /= iResolution.y;\n    float maxiter = 6.;\n    \n    vec2 uv = (fragCoord / iResolution.xy);\n    vec2 uvX = uv;\n    vec2 uvXX = uv;\n    vec2 uvx = uv;\n    vec2 uvxx = uv;\n    vec2 uvY = uv;\n    vec2 uvYY = uv;\n    vec2 uvy = uv;\n    vec2 uvyy = uv;\n    vec2 uvXY = uv;\n    vec2 uvXYY = uv;\n    vec2 uvXy = uv;\n    vec2 uvXyy = uv;\n    vec2 uvXXY = uv;\n    vec2 uvXXYY = uv;\n    vec2 uvXXy = uv;\n    vec2 uvXXyy = uv;\n    vec2 uvxY = uv;\n    vec2 uvxYY = uv;\n    vec2 uvxy = uv;\n    vec2 uvxyy = uv;\n    vec2 uvxxY = uv;\n    vec2 uvxxYY = uv;\n    vec2 uvxxy = uv;\n    vec2 uvxxyy = uv;\n    \n    uvX.x += 1.0 * str;\n    uvXX.x += 2.0 * str;\n    uvx.x -= 1.0 * str;\n    uvxx -= 2.0 * str;\n    uvY.y += 1.0 * str;\n    uvYY.y += 2.0 * str;\n    uvy.y -= 1.0 * str;\n    uvyy.y -= 2.0 * str;\n    uvXY += (1.0 * str, 1.0 * str);\n    uvXYY += (1.0 * str, 2.0 * str);\n    uvXy += (1.0 * str, -1.0 * str);\n    uvXyy += (1.0 * str, -2.0 * str);\n    uvXXY += (2.0 * str, 1.0 * str);\n    uvXXYY += (2.0 * str, 2.0 * str);\n    uvXXy += (2.0 * str, -1.0 * str);\n    uvXXyy += (2.0 * str, -2.0 * str);\n    uvxY  += (-1.0 * str, 1.0 * str);\n    uvxYY += (-1.0 * str, 2.0 * str);\n    uvxy += (1.0 * str, -1.0 * str);\n    uvxyy += (1.0 * str,-21.0 * str);\n    uvxxY += (-2.0 * str, 1.0 * str);\n    uvxxYY += (-2.0 * str, 2.0 * str);\n    uvxxy += (-2.0 * str, -1.0 * str);\n    uvxxyy += (-2.0 * str, -2.0 * str);\n    \n    vec4 ch ;\n    vec4 chX ;\n    vec4 chXX;\n    vec4 chx;\n    vec4 chxx ;\n    vec4 chY;\n    vec4 chYY;\n    vec4 chy;\n    vec4 chyy;\n    vec4 chXY;\n    vec4 chXYY;\n    vec4 chXy;\n    vec4 chXyy;\n    vec4 chXXY;\n    vec4 chXXYY;\n    vec4 chXXy;\n    vec4 chXXyy;\n    vec4 chxY;\n    vec4 chxYY;\n    vec4 chxy;\n    vec4 chxyy;\n    vec4 chxxY;\n    vec4 chxxYY;\n    vec4 chxxy;\n    vec4 chxxyy;\n    \n    vec4 chose1 = vec4(0.0);\n    vec4 chose2 = vec4(0.0);\n    vec4 chose3 = vec4(0.0);\n    \n    vec4 quadA = vec4(0.0);\n    vec4 quadB = vec4(0.0);\n    vec4 quadC = vec4(0.0);\n    vec4 quadD = vec4(0.0);\n    \n    vec3 col = vec3(0.);\n    \n    \n    \n    for( float i = 0.0; i< maxiter; i++){\n        if( i<=0.){\n            ch = texture(iChannel1, uv);\n            chX = texture(iChannel1, uvX);\n            chXX = texture(iChannel1, uvXX);\n            chx = texture(iChannel1, uvx);\n            chxx = texture(iChannel1, uvxx);\n            chY = texture(iChannel1, uvY);\n            chYY = texture(iChannel1, uvYY);\n            chy = texture(iChannel1, uvy);\n            chyy = texture(iChannel1, uvyy);\n            chXY = texture(iChannel1, uvXY);\n            chXYY = texture(iChannel1, uvXYY);\n            chXy = texture(iChannel1, uvXy);\n            chXyy = texture(iChannel1, uvXyy);\n            chXXY = texture(iChannel1, uvXXY);\n            chXXYY = texture(iChannel1, uvXXYY);\n            chXXy = texture(iChannel1, uvXXy);\n            chXXyy = texture(iChannel1, uvXXyy);\n            chxY = texture(iChannel1, uvxY);\n            chxYY = texture(iChannel1, uvxYY);\n            chxy = texture(iChannel1, uvxy);\n            chxyy = texture(iChannel1, uvxyy);\n            chxxY = texture(iChannel1, uvxxY);\n            chxxYY = texture(iChannel1, uvxxYY);\n            chxxy = texture(iChannel1, uvxxy);\n            chxxyy = texture(iChannel1, uvxxyy);\n        }\n         if( i > 0.){\n            ch = .5 * (ch + texture(iChannel0, uv));\n            chX = .5 * (chX + texture(iChannel0, uvX));\n            chXX = .5 * (chXX + texture(iChannel0, uvXX));\n            chx = .5 * (chx + texture(iChannel0, uvx));\n            chxx = .5 * (chxx + texture(iChannel0, uvxx));\n            chY = .5 * (chY + texture(iChannel0, uvY));\n            chYY = .5 * (chYY + texture(iChannel0, uvYY));\n            chy = .5 * (chy + texture(iChannel0, uvy));\n            chyy = .5 * (chyy + texture(iChannel0, uvyy));\n            chXY = .5 * (chXY + texture(iChannel0, uvXY));\n            chXYY = .5 * (chXYY + texture(iChannel0, uvXYY));\n            chXy = .5 * (chXy + texture(iChannel0, uvXy));\n            chXyy = .5 * (chXyy + texture(iChannel0, uvXyy));\n            chXXY = .5 * (chXXY + texture(iChannel0, uvXXY));\n            chXXYY = .5 * (chXXYY + texture(iChannel0, uvXXYY));\n            chXXy = .5 * (chXXyy + texture(iChannel0, uvXXy));\n            chXXyy = .5 * (chXXyy + texture(iChannel0, uvXXyy));\n            chxY = .5 * (chxY + texture(iChannel0, uvxY));\n            chxYY = .5 * (chxYY + texture(iChannel0, uvxYY));\n            chxy = .5 * (chxy + texture(iChannel0, uvxy));\n            chxyy = .5 * (chxyy + texture(iChannel0, uvxyy));\n            chxxY = .5 * (chxxY + texture(iChannel0, uvxxY));\n            chxxYY = .5 * (chxxYY + texture(iChannel0, uvxxYY));\n            chxxy = .5 * (chxxy + texture(iChannel0, uvxxy));\n            chxxyy = .5 * (chxxyy + texture(iChannel0, uvxxyy));\n        \n        }\n\n        \n\n        quadA = (ch + chx + chxx + chY + chYY + chxY + chxYY + chxxY + chxxYY) / 9.0;\n        quadB = (ch + chX + chXX + chY + chYY + chXY + chXYY + chXXY + chXXYY) / 9.0;\n        quadC = (ch + chx + chxx + chy + chyy + chxy + chxyy + chxxy + chxxyy) / 9.0;\n        quadD = (ch + chX + chXX + chy + chyy + chXy + chXyy + chXXy + chXXyy) / 9.0;\n\n        if(length(abs(quadA - ch))<length(abs(quadB - ch))){\n            chose1 = quadA;\n        }else{\n            chose1 = quadB;\n        }\n\n        if(length(abs(quadC - ch))<length(abs(quadD - ch))){\n            chose2 = quadC;\n        }else{\n            chose2 = quadD;\n        }\n\n        if(length(abs(chose1 - ch))<length(abs(chose2 - ch))){\n            chose3 = chose1;\n        }else{\n            chose3 = chose2;\n        }\n        col = chose3.xyz;\n        fragColor = vec4(col, 1.0);\n        \n    }    \n    \n    // Output to screen\n\n}\n","name":"Buffer A","description":"","type":"buffer"}]}