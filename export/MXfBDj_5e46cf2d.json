{"ver":"0.1","info":{"id":"MXfBDj","date":"1728916448","viewed":103,"name":"Liquid Smudge","username":"drgmitev","description":"Liquified screen smudge, using Snell's Law","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["oil","liquid","snell","smudge","syrup"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec2 CameraOrigin = vec2(0., 1.);\nconst float LightAngle = 315.;\nconst float N1 = 1.; // air\nconst float N2 = 1.5343; // oil\n\n//clamp color mixing \nconst vec2 ColorMix = vec2(.55, .75);\nconst vec3 WColor = vec3(0.5, 0.2, 0.8);\n\n//clamp texture alpha\nconst vec2 alphaLimit = vec2(.05, .15);\nconst float R = .0055;\n\n\nfloat alpha(vec3 color) {\n return (color.r + color.b + color.g) / 3.;\n}\n\nvec2 N(float alpha, float radius) {\n    radius = radius * sqrt(pow(iResolution.x, 2.) + pow(iResolution.y, 2.)); //normalized\n\n   // calculate angle between camera and light \n    vec2 light = vec2(sin(radians(LightAngle)), cos(radians(LightAngle)));\n    float dot = CameraOrigin.x * light.x + CameraOrigin.y * light.y;\n    float phi = acos(dot);\n\n    //snell's law\n    float phi_ = N1 * sin(phi) / N2;\n\n    float r = pow(alpha, 2.) * radius;\n    return vec2(sin(phi_), cos(phi_)) * r;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    vec4 col = textureLod(iChannel1, uv, 1.);\n    float a = alpha(col.rgb); \n    if(a < alphaLimit[0] || a > alphaLimit[1]) {\n        fragColor = textureLod(iChannel0, uv, 1.);\n        return;\n    }\n    \n    vec4 bgCol = textureLod(iChannel0, uv + N(a, R), 1.);\n    fragColor = vec4(mix(WColor, bgCol.rgb, max(ColorMix[0], min(a, ColorMix[1]))), 1.);\n}","name":"Image","description":"","type":"image"}]}