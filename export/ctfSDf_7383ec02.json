{"ver":"0.1","info":{"id":"ctfSDf","date":"1675599130","viewed":184,"name":"Pythagorean tuning","username":"celifan","description":"Pythagorean tuning  &  equal temperament \n*  box = octave bounds\n*  Blue lines : Construction steps for Pythagorean tuning.\n*  White line : Interval size corresponding to equal temperament.\n\n","likes":6,"published":1,"flags":8,"usePreview":0,"tags":["sounds","pythagoras"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat msign( in float x ) { return (x>0.0)?1.0:-1.0; }\n\n\n// https://iquilezles.org/articles/distfunctions2d\n// bottom left corner is origin\nfloat sdBox( in vec2 p, in vec2 b ) \n{\n    vec2 q = abs(p-b*.5) - b*.5;\n    return min(max(q.x,q.y),0.0) + length(max(q,0.0));\n}\n\n// segment bottom point is origin\nfloat sdVertline( in vec2 p, float h)\n{\n    vec2 q = abs(p-vec2(0.0,h*.5))-vec2(0.0,h*.5);\n    return q.y <0.0 ?abs(max(q.x,0.0)): length(q);\n}\n\n// number of notes\nconst float n_notes =12.0;\n// border width\nconst float b = .01;\n// border half width\nconst float b2 = b*.5;\n// unisson ratio\nconst float h = (2.0-(n_notes+1.0)*5.0*b)/(n_notes);\nconst float h2 = h*.5;\n//unisson size\nconst float u = .685;\nconst float u2 = u*.5;\n// octave ratio \nconst float o = u*2.0;\n// colors\nconst vec3 c0 = vec3(0.9,0.6,0.3);\nconst vec3 c1 = 1.5*vec3(1.0)-c0;\nconst vec3 c2 = vec3(.9,.9,.9);\nconst vec3 c_play = vec3(0.0,1.0,0.0);\n\n\nvoid grid (vec2 p, float sf, inout vec3 col)\n{\n    float d1  = sdBox(p,vec2(u,h));\n    float d2  = sdBox(p -vec2(u,0.0),vec2(u,h));\n    \n    \n    col*=.5*(1.0+((1.0-smoothstep( 0.0,sf, d1+b2 )) +(smoothstep( b2,b2+sf, d1 ))));  \n    col*=.5*(1.0+((1.0-smoothstep( 0.0,sf, d2+b2 )) +(smoothstep( b2,b2+sf, d2 ))));  \n    \n}\nfloat ratio_vis(vec2 p, float l,float ah, float ratio_n, float ratio_d,\n                float sf, inout vec3 col, float lf, int mat, float played_note)\n{\n    \n    //\n    float r = (float(ratio_n))/(float(ratio_d));\n    float dratio  = sdBox(p,vec2(l*r,ah));\n    bool playing = abs(played_note -r) <1e-5;\n    \n    col = mix((mat ==0? c1 : c2)*lf, col, smoothstep(0.0, sf,dratio));\n   \n    // visualize l \n    float d0 =sdVertline(p-vec2(l,0.0),ah);\n    col*= .25*(3.0+smoothstep( 0.0,sf*3.0, d0)); \n    // visualize l/ratio_d.\n    float s = l/ratio_d;\n    sf = min(sf,s);\n    for(float i=1.0; i<ratio_d; ++i)\n    {\n        float d1 =sdVertline(p-vec2(s*i,0.0),ah);\n        col*= .25*(3.0+smoothstep( 0.0,sf*3.0, d1)); \n   \n    }\n    if (ratio_n > ratio_d)\n    {\n        for(float i=1.0; i<ratio_d; ++i)\n        {\n            float d1 =sdVertline(p -vec2(s*i+l,0.0),ah);\n            col*= .25*(3.0+smoothstep( 0.0,sf*3.0, d1));\n\n        }\n    }\n    col = mix(playing ? c_play :col , col, smoothstep(0.0, sf,dratio));\n    return  l*r;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float aspect = iResolution.x/iResolution.y;\n    // normalized pixel coordinates\n    vec2 p = (fragCoord*2.0-iResolution.xy)/iResolution.y;\n     \n   \n    // smoothing factor.\n    float sf = 1.0 /iResolution.y;\n    //\n   \n    vec3 col = c0;\n    vec2 pos = vec2(-aspect+5.0*b,1.0 - h-5.0*b ); \n  \n    // compute note\t\n    float t = mod((iTime )/0.18,55.0);\n    \n    // highlight current note\n    vec2 tn  = get_note_ascendent(h,t );\n    float played_ratio = ratios[int(tn.y)%12];\n    \n   \n    // **** Going Down : scaling with incremental 2/3 ratio \n    //                then scale by ( 2)^n when oustide the Octave bounds.\n    \n    float l_down_fourth= u*2.0/3.0;\n    float l_down_sev =  l_down_fourth*2.0/3.0;\n    float l_down_third= l_down_sev*2.0/3.0;\n    float l_down_six= l_down_third*2.0/3.0;\n    \n    // minor third |Eb [(2/3)^3 *2^2] = 32/27\n    ratio_vis(p -pos-vec2(0.0,3.0*h/4.0),l_down_sev,h/4.0,2.0,3.0,sf,col,.5,0,0.0); \n    ratio_vis(p -pos-vec2(0.0,h/2.0),l_down_third,h/4.0,4.0,1.0,sf,col,.66,0,0.0); \n    ratio_vis(p -pos-vec2(0.0,h/4.0),u,h/4.0,32.0,27.0,sf,col,1.0,0,played_ratio);\n    // equal temperament interval\n    ratio_vis(p -pos,u,h/4.0,pow(2.0,3.0/12.0),1.0,sf,col,1.0,1,0.0);\n    grid(p -pos,sf,col); \n    pos.y -=h+b*5.0; \n    \n    // minor seven |Bb [(2/3)^2 *2^2] = 16/9\n    ratio_vis(p -pos-vec2(0.0,3.0*h/4.0),l_down_fourth,h/4.0,2.0,3.0,sf,col,.5,0,0.0); \n    ratio_vis(p -pos-vec2(0.0,h/2.0),l_down_sev,h/4.0,4.0,1.0,sf,col,.66,0,0.0); \n    ratio_vis(p -pos-vec2(0.0,h/4.0),u,h/4.0,16.0,9.0,sf,col,1.0,0,played_ratio);\n    // equal temperament interval\n    ratio_vis(p -pos,u,h/4.0,pow(2.0,10.0/12.0),1.0,sf,col,1.0,1,0.0);\n    grid(p -pos,sf,col); \n    pos.y -=h+b*5.0; \n    \n    // perfect fourth |F [ (2/3) * 2 ] = 4/3\n    ratio_vis(p -pos-vec2(0.0,3.0*h/4.0),u,h/4.0,2.0,3.0,sf,col,.5,0,0.0); \n    ratio_vis(p -pos-vec2(0.0,h/2.0),l_down_fourth,h/4.0,2.0,1.0,sf,col,.66,0,0.0); \n    ratio_vis(p -pos-vec2(0.0,h/4.0),u,h/4.0,4.0,3.0,sf,col,1.0,0,played_ratio);\n    // equal temperament interval\n    ratio_vis(p -pos,u,h/4.0,pow(2.0,5.0/12.0),1.0,sf,col,1.0,1,0.0);\n    grid(p -pos,sf,col); \n    pos.y -=h+b*5.0; \n    \n    // ###  unisson |C [ 1 ] \n    float l_up = ratio_vis(p -pos-vec2(0.0,h/4.0),u,3.0*h/4.0,1.0,1.0,sf,col,1.0,0,played_ratio); \n    // equal temperament interval\n    ratio_vis(p -pos,u,h/4.0,pow(2.0,0.0/12.0),1.0,sf,col,1.0,1,0.0);\n    grid(p -pos,sf,col); \n    pos.y -=h+b*5.0; \n    \n    // **** Going UP : scaling with incremental 3/2 ratio \n    //                then scale by ( 1/2)^n when oustide the Octave bounds.\n    // \n    \n    // perfect fith |G  [ 3/2 ]\n    l_up= ratio_vis(p -pos-vec2(0.0,h/4.0),l_up,3.0*h/4.0,3.0,2.0,sf,col,1.0,0,played_ratio); \n    // equal temperament interval\n    ratio_vis(p -pos,u,h/4.0,pow(2.0,7.0/12.0),1.0,sf,col,1.0,1,0.0);\n    grid(p -pos,sf,col); \n    pos.y -=h+b*5.0; \n    \n\t// major second |D [ (3/2)^2 * 0.5 ] = [9/8]\n    float l_up_sec = ratio_vis(p -pos-vec2(0.0,3.0*h/4.0),l_up,h/4.0,3.0,2.0,sf,col,.5,0,0.0); \n    l_up= ratio_vis(p -pos-vec2(0.0,h/2.0),l_up_sec,h/4.0,1.0,2.0,sf,col,.66,0,0.0); \n    l_up= ratio_vis(p -pos-vec2(0.0,h/4.0),u,h/4.0,9.0,8.0,sf,col,1.0,0,played_ratio); \n    // equal temperament interval\n    ratio_vis(p -pos,u,h/4.0,pow(2.0,2.0/12.0),1.0,sf,col,1.0,1,0.0);\n    \n    grid(p -pos,sf,col); \n    pos.y -=h+b*5.0; \n    // major sixth |A  [ (3/2)^3 * 0.5 ] = [27/16]\n    float l_up_six= ratio_vis(p -pos-vec2(0.0,3.0*h/4.0),l_up_sec,h/4.0,3.0,2.0,sf,col,.5,0,0.0); \n    l_up= ratio_vis(p -pos-vec2(0.0,h/2.0),l_up_six,h/4.0,1.0,2.0,sf,col,.66,0,0.0); \n    l_up= ratio_vis(p -pos-vec2(0.0,h/4.0),u,h/4.0,27.0,16.0,sf,col,1.0,0,played_ratio); \n    // equal temperament interval\n    ratio_vis(p -pos,u,h/4.0,pow(2.0,9.0/12.0),1.0,sf,col,1.0,1,0.0);\n    grid(p -pos,sf,col); \n    pos.y -=h+b*5.0; \n   \n    // major third |E  [ (3/2)^4 * 0.5^2 ] = [81/64]\n    float l_up_third= ratio_vis(p -pos-vec2(0.0,3.0*h/4.0),l_up_six,h/4.0,3.0,2.0,sf,col,.5,0,0.0); \n    l_up= ratio_vis(p -pos-vec2(0.0,h/2.0),l_up_third,h/4.0,1.0,4.0,sf,col,.66,0,0.0); \n    l_up= ratio_vis(p -pos-vec2(0.0,h/4.0),u,h/4.0,81.0,64.0,sf,col,1.0,0,played_ratio); \n    // equal temperament interval\n    ratio_vis(p -pos,u,h/4.0,pow(2.0,4.0/12.0),1.0,sf,col,1.0,1,0.0);\n    grid(p -pos,sf,col); \n    pos.y -=h+b*5.0; \n    \n    // major seven |B  [ (3/2)^5 * 0.5^2 ] = [243/128]\n    float l_up_seven= ratio_vis(p -pos-vec2(0.0,3.0*h/4.0),l_up_third,h/4.0,3.0,2.0,sf,col,.5,0,0.0); \n    l_up= ratio_vis(p -pos-vec2(0.0,h/2.0),l_up_seven,h/4.0,1.0,4.0,sf,col,.66,0,0.0); \n    l_up= ratio_vis(p -pos-vec2(0.0,h/4.0),u,h/4.0,243.0,128.0,sf,col,1.0,0,played_ratio); \n    // equal temperament interval\n    ratio_vis(p -pos,u,h/4.0,pow(2.0,11.0/12.0),1.0,sf,col,1.0,1,0.0);\n    grid(p -pos,sf,col); \n    pos.y -=h+b*5.0; \n    \n     // major augmented four |F#  [ (3/2)^6 * 0.5^3 ] = [729/512]\n    float l_up_au_four= ratio_vis(p -pos-vec2(0.0,3.0*h/4.0),l_up_seven,h/4.0,3.0,2.0,sf,col,.5,0,0.0); \n    l_up= ratio_vis(p -pos-vec2(0.0,h/2.0),l_up_au_four,h/4.0,1.0,8.0,sf,col,.66,0,0.0); \n    l_up= ratio_vis(p -pos-vec2(0.0,h/4.0),u,h/4.0,729.0,512.0,sf,col,1.0,0,played_ratio); \n    // equal temperament interval\n    ratio_vis(p -pos,u,h/4.0,pow(2.0,6.0/12.0),1.0,sf,col,1.0,1,0.0);\n    grid(p -pos,sf,col); \n    pos.y -=h+b*5.0; \n    \n    // __0   |C#  [ (3/2)^7 * 0.5^4 ] = [2187/2048]\n    float l_up_0 = ratio_vis(p -pos-vec2(0.0,3.0*h/4.0),l_up_au_four,h/4.0,3.0,2.0,sf,col,.5,0,0.0); \n    l_up= ratio_vis(p -pos-vec2(0.0,h/2.0),l_up_0,h/4.0,1.0,16.0,sf,col,.66,0,0.0); \n    l_up= ratio_vis(p -pos-vec2(0.0,h/4.0),u,h/4.0,2187.0,2048.0,sf,col,1.0,0,played_ratio); \n    // equal temperament interval\n    ratio_vis(p -pos,u,h/4.0,pow(2.0,1.0/12.0),1.0,sf,col,1.0,1,0.0);\n    grid(p -pos,sf,col); \n    pos.y -=h+b*5.0; \n    \n    // __1   |G#  [ (3/2)^8 * 0.5^4 ] = [6561/4096]\n    float l_up_1 = ratio_vis(p -pos-vec2(0.0,3.0*h/4.0),l_up_0,h/4.0,3.0,2.0,sf,col,.5,0,0.0); \n    l_up= ratio_vis(p -pos-vec2(0.0,h/2.0),l_up_1,h/4.0,1.0,16.0,sf,col,.66,0,0.0); \n    l_up= ratio_vis(p -pos-vec2(0.0,h/4.0),u,h/4.0,6561.0,4096.0,sf,col,1.0,0,played_ratio); \n    // equal temperament interval\n    ratio_vis(p -pos,u,h/4.0,pow(2.0,8.0/12.0),1.0,sf,col,1.0,1,0.0);\n    grid(p -pos,sf,col); \n    pos.y -=h+b*5.0; \n    \n   \n    // output\n\tfragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// adapted from \n// Created by inigo quilez - iq/2014\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n//https://en.m.wikipedia.org/wiki/Pythagorean_tuning#:~:text=%EE%80%80Pythagorean%20tuning%EE%80%81%20is%20a%20system%20of%20musical%20tuning,to%20me%20to%20be%20particularly%20correct%20natural%20\n//https://web.archive.org/web/20060506221411/http://www.midicode.com/tunings/Tuning10102004.pdf\n\nvec2 mainSound( in int samp, float time )\n{\n  time = mod( time, 40.0 );\n\n  // do 3 echo/reverb bounces\n  vec2 tot = vec2(0.0);\n  for( int i=0; i<3; i++ )\n  {\n    float h = float(i)/(3.0-1.0);\n    \n  \n    // compute note\t\n    float t = (time - 0.53*h)/0.18;\n    t = mod(t,55.0);\n    vec2 tn  = get_note_ascendent(h, t);\n        \n    // calc frequency and time for note\t\n    float octave = floor(tn.y/12.0)-1.0;\n    float noteFreq = 440.0*pow(2.0,octave-4.0)* ratios[int(tn.y)%12];//pow( 2.0, (n-69.0)/12.0 );\n    float noteTime = 0.18*(t-tn.x);\n\t\n    // compute instrument\t\n    float y  = 0.5*sin(6.2831*1.00*noteFreq*noteTime)*exp(-0.0015*1.0*noteFreq*noteTime);\n\t      y += 0.3*sin(6.2831*2.01*noteFreq*noteTime)*exp(-0.0015*2.0*noteFreq*noteTime);\n\t      y += 0.2*sin(6.2831*4.01*noteFreq*noteTime)*exp(-0.0015*4.0*noteFreq*noteTime);\n          y += 0.1*y*y*y;\t  \n          y *= 0.9 + 0.1*cos(40.0*noteTime);\n\t      y *= smoothstep(0.0,0.01,noteTime);\n          \n    // accumulate echo\t  \n    tot += y * vec2(0.5+0.2*h,0.5-0.2*h) * (1.0-sqrt(h)*0.85);\n  }\n  tot /= 3.0;\n\t\n  return tot;\n}\n","name":"Sound","description":"","type":"sound"},{"inputs":[],"outputs":[],"code":"// Chromatic C scale \n// C , C#, D, Eb, E, F, F#, G, G#, A, Bb, B\nfloat ratios[12] = float[12](1.0/1.0,\n                             2187.0 / 2048.0 ,\n                             9.0/8.0 ,\n                             32.0/27.0,\n                             81.0/64.0,\n                             4.0/3.0,\n                             729.0/512.0, \n                             3.0/2.0,\n                             6561.0/4096.0,\n                             27.0/16.0,\n                             16.0/9.0,\n                             243.0/128.0);\n    \nvec2 get_note( float h,float t )\n{\n   \n    float n = 0.0, b = 0.0, x = 0.0;\n    #define D(u,v)   b+=float(u);if(t>b){x=b;n=float(v);}\n    D(10,71)D(2,76)D(3,79)D(1,78)D( 2,76)D( 4,83)D(2,81)D(6,78)D(6,76)D(3,79)\n    D( 1,78)D(2,74)D(4,77)D(2,71)D(10,71)D( 2,76)D(3,79)D(1,78)D(2,76)D(4,83)\n    D( 2,86)D(4,85)D(2,84)D(4,80)D( 2,84)D( 3,83)D(1,82)D(2,71)D(4,79)D(2,76)\n    D(10,79)D(2,83)D(4,79)D(2,83)D( 4,79)D( 2,84)D(4,83)D(2,82)D(4,78)D(2,79)\n    D( 3,83)D(1,82)D(2,70)D(4,71)D( 2,83)D(10,79)D(2,83)D(4,79)D(2,83)D(4,79)\n    D( 2,86)D(4,85)D(2,84)D(4,80)D( 2,84)D( 3,83)D(1,82)D(2,71)D(4,79)D(2,76) \n    \n    return vec2(x,n);\n}\n\nvec2 get_note_ascendent( float h,float t )\n{\n   \n    float n = 0.0, b = 0.0, x = 0.0;\n    #define D(u,v)   b+=float(u);if(t>b){x=b;n=float(v);}\n    D(5,69+3)D(5,70+3)D(5,71+3)D(5,72+3)D( 5,73+3)D( 5,74+3)D(5,75+3) D(5,76+3) \n    D(5,77+3)D(5,78+3)D(5,79+3)D(5,80+3) D(5,81+3)\n    \n    return vec2(x,n);\n}","name":"Common","description":"","type":"common"}]}