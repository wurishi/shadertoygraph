{"ver":"0.1","info":{"id":"WtlBWN","date":"1596757268","viewed":112,"name":"Voronoi displacement sphere","username":"ptemoche","description":"displacement distance created with a voronoi.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","voronoi","displacement"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//RayMarching practice \n//from https://www.youtube.com/watch?v=PGtv-dBi2wE\n\n\n#define MAX_STEPS 100\n#define MAX_DIST 1000.\n#define SURF_DIST .01\n#define PI 3.14159265\n#define VSD 10.0\n\nfloat random21(vec2 st){\n \n    return fract(sin(dot(st.xy,vec2(12.9898,78.233)))*43758.5453123);\n    \n}\n\nvec2 random22(vec2 st){\n \treturn vec2(random21(st),fract(random21(st.yx*1793.45786)*9848.588456));   \n}\n\n\n\nvec4 voronoi(vec2 st, float n){\n \n    float c = 0.0;\n    st*=n;\n    vec2 id = floor(st);\n    vec2 uv = fract(st);\n    vec2 color = vec2(0,0);\n    c = 1.0;\n    for(float i = -1.0; i<=1.0; i+=1.0){\n        for(float j = -1.0; j<=1.0; j+=1.0){\n         \tvec2 offset = vec2(i,j);\n            vec2 idNew = ((id+offset)+n);\n            idNew = mod(idNew,n);\n            vec2 pos = (sin(random22(idNew)*iTime)*0.5+0.5)+offset;\n            if(length(pos-uv)<c){\n                c=length(pos-uv);\n                color = random22(idNew);\n            }\n            \n        }\n    }\n    color=color*0.5+0.5;\n   \n    //return smoothstep(0.02,0.01,length(((random22(id))-uv)));\n    return vec4(color.x,color.y,random21(color)*0.5+0.5,clamp((1.0-c),0.0,sin(iTime*0.5)*0.5+0.5)*0.1);\n}\n\n\nmat2 Rot(float a) {\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\nvec4 GetDist(vec3 p) {\n    \n    p+=vec3(0,0,-6);\n   \tp.xz*=Rot(iTime*0.1);\n\tvec4 sphere = vec4(0, 0, 0, 2);\n    \n    float sphereDist =  length(p-sphere.xyz)-sphere.w;\n    vec3 s_dir = p-sphere.xyz;\n    float cosT = acos(dot(normalize(vec3(s_dir.x,0.0,s_dir.z)),vec3(1,0,0)));\n    if(s_dir.z>0.0)\n        cosT=2.0*PI-cosT;\n    \n    float s = cosT/(2.0*PI);\n    float t = acos(dot(normalize(vec3(0.0,s_dir.y,1.0)),vec3(0,-1,0)))/PI;\n    //float planeDist = p.y-voronoi(p.xz*0.3,2.0);\n    vec4 voronoiVec = voronoi(vec2(s,t),VSD);\n    //voronoiVec.w = 0.0;/////////////////////////////////////////////////////////////////////////\n    voronoiVec.w = sphereDist-voronoiVec.w;\n    //voronoiVec.xyz = vec3(t);\n    //float d = min(sphereDist, planeDist);\n    return voronoiVec;\n}\n\nvec4 RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    vec4 distVec = vec4(0);\n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        distVec= GetDist(p);\n        float dS = distVec.w;\n        dO += dS;\n        if(dO>MAX_DIST || dS<SURF_DIST) break;\n    }\n    distVec.w = dO;\n    return distVec;\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p).w;\n    vec2 e = vec2(.01, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).w,\n        GetDist(p-e.yxy).w,\n        GetDist(p-e.yyx).w);\n    \n    return normalize(n);\n}\n\nfloat GetLight(vec3 p) {\n    vec3 lightPos = vec3(3, 5, 1);\n    lightPos.xz += vec2(sin(iTime), cos(iTime))*2.;\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    float occ = (n.y+0.5+0.5)*0.75;\n    float dif = 0.1;//clamp(dot(n, vec3(0,-1,0)), 0., 1.)*0.15;\n    \n    dif += (clamp(dot(n, l), 0., 1.))*0.5;\n    \n    float d = RayMarch(p+n*SURF_DIST*2., l).w;\n    if(d<length(lightPos-p)) dif *= 0.75;\n    //dif = 0.5;//////////////////////////////////////////////\n    return dif*occ;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-iResolution.xy*0.5)/iResolution.y;\n\tvec3 col = vec3(0);\n    \n    vec3 ro = vec3(0, 0, 0);\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1));\n\n    vec4 marching = RayMarch(ro, rd);\n    float d = marching.w;\n    \n    vec3 p = ro + rd * d;\n    float back = smoothstep(0.0,1.0,uv.y+0.5)*0.2;\n    col=vec3(back);\n    if(d<500.0){\n        float dif = GetLight(p);\n        col = marching.xyz*dif;\n    }\n    //float dif = (d>500.0)? back:GetLight(p);\n    //dif=1.0;\n    //marching.xyz=vec3(1);//////////////////////////////////////////\n    \n    \n    col = pow(col, vec3(.4545));\t\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}