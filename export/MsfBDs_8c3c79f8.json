{"ver":"0.1","info":{"id":"MsfBDs","date":"1498832468","viewed":480,"name":"Heart beat","username":"gaz","description":"fake particle","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI radians(180.0)\n#define PI2 PI*2.0\n#define R 3.5\n#define A fract(iTime / R)\n#define T sin(PI2 * A)*0.5+0.5\n\nmat2 rotate(in float a)\n{\n    return mat2(cos(a),sin(a),-sin(a),cos(a));\n}\n\nmat3 lookat(in vec3 eye, in vec3 target)\n{\n\tvec3 w = normalize(eye-target);\n\tvec3 u = normalize(cross(w,vec3(0.0,1.0,0.0)));\n\tvec3 v = normalize(cross(u,w));\n    return mat3(u,v,w);\n}\n\n// https://www.shadertoy.com/view/MtsGWH\nvec4 boxmap(in sampler2D sam, in vec3 p, in vec3 n)\n{\n    vec3 m = pow(abs(n), vec3(8));\n\tvec4 x = textureLod(sam, p.yz, 0.0);\n\tvec4 y = textureLod(sam, p.zx, 0.0);\n\tvec4 z = textureLod(sam, p.xy, 0.0);\n\treturn (x*m.x + y*m.y + z*m.z)/(m.x+m.y+m.z);\n}\n\n// http://qiita.com/muripo_life/items/f24408ca1d06eb0658e3\nfloat sdHeart(in vec3 p, in float h)\n{\n    p.y += .5; // position ajust\n    \n    p.z *= 1.5;\n    return ( sqrt( dot(p,p) - pow(p.x*p.x+p.z*p.z/20., .33) *p.y ) - h ) / 2.;\n    \n    /*\n    p.y *= -1.0;\n    p.y -=0.5;\n    vec3 q = vec3(p.x, p.y, 1.5*p.z);\n    float de = sqrt(length(q)*length(q) + pow(p.x*p.x+0.1125*p.z*p.z, 0.33)*p.y)- h;\n    return 0.5*de;\n\t*/\n}\n\nfloat udRoundBox(in vec3 p, in vec3 b, in float r )\n{\n  return length(max(abs(p)-b,0.0))-r;\n}\n\nfloat map(in vec3 p)\n{  \n    float de = abs(mix(sdHeart(p,1.7), udRoundBox(p,vec3(1),0.3), T)) - 0.01;\n    //return max(de, -de - boxmap(iChannel0, p * 0.4, p).x + 0.6);\n    \n    p=normalize(p);\n    vec2 uv = vec2(atan(p.x, p.y), acos(p.z));\n    uv = floor(uv  * 100.0) / 100.0;\n    return max(de, -de - fract(sin(uv.x + uv.y * 100.0) * 1e4) + 0.6);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec3 ro = vec3(0, 2, 3.5);\n    vec3 rd = normalize(vec3(p, -2));    \n    vec3 ta = vec3(0,0,0);\n    ro.xz *= rotate(PI * A + 0.8);\n    rd = lookat(ro,ta) * rd;\n    vec3 col = vec3(0.1);\n\tconst float maxd = 10.0, precis = 0.001;\n\tfloat t = 0.0, d;\n \tfor(int i = 0; i < 32; i++)\n  \t{\n    \tt += d = map(ro + rd * t);\n    \tif(d < precis || t > maxd) break;\n  \t}\n  \tif(d < precis) col = mix(vec3(1,0.2,0.2), vec3(0.8), T);\n    fragColor = vec4(col, 1.0);\n}\n\n/*\n#define PI radians(180.0)\n#define PI2 radians(360.0)\n#define R 3.7\n\nmat3 rotate(in vec3 axis, in float theta)\n{\n  axis = normalize(axis);\n  float x = axis.x, y = axis.y, z = axis.z, s = sin(theta), c = cos(theta), o = 1.0-c;\n  return mat3(\n    o*x*x+c,o*x*y+z*s,o*z*x-y*s,\n    o*x*y-z*s,o*y*y+c,o*y*z+x*s,\n    o*z*x+y*s,o*y*z-x*s,o*z*z+c\n    );\n}\n\nmat3 lookat(in vec3 eye, in vec3 target)\n{\n\tvec3 w = normalize(eye-target);\n\tvec3 u = normalize(cross(w,vec3(0.0,1.0,0.0)));\n\tvec3 v = normalize(cross(u,w));\n    return mat3(u,v,w);\n}\n\n// https://www.shadertoy.com/view/MtsGWH\nvec4 boxmap(sampler2D sam, in vec3 p, in vec3 n)\n{\n    vec3 m = pow(abs(n), vec3(8));\n\tvec4 x = textureLod(sam, p.yz, 0.0);\n\tvec4 y = textureLod(sam, p.zx, 0.0);\n\tvec4 z = textureLod(sam, p.xy, 0.0);\n\treturn (x*m.x + y*m.y + z*m.z)/(m.x+m.y+m.z);\n}\n\n// http://qiita.com/muripo_life/items/f24408ca1d06eb0658e3\nfloat sdHeart(vec3 p, float h)\n{\n    p.y *= -1.0;\n    p.y -=0.5;\n    vec3 q = vec3(p.x, p.y, 1.5*p.z);\n    float de = sqrt(length(q)*length(q) + pow(p.x*p.x+0.1125*p.z*p.z, 0.33)*p.y)- h;\n    return 0.5*de;\n}\n\nfloat udRoundBox(in vec3 p, in vec3 b, in float r )\n{\n  return length(max(abs(p)-b,0.0))-r;\n}\n\nfloat map(in vec3 p)\n{  \n    float de = abs(mix(\n        sdHeart(p,1.7),\n        udRoundBox(p,vec3(1),0.3),\n        sin(PI2 * fract(iTime / R))*0.5+0.5)\n        ) - 0.01;\n    return max(de, -de - boxmap(iChannel0, p * 0.4, p).x + 0.6);\n}\n\nvec3 doColor(vec3 p){\n    return mix(\n        \tvec3(1,0.2,0.2),\n        \tvec3(0.8),\n       \t\tsin(PI2 * fract(iTime / R))*0.5+0.5\n        );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec3 ro = vec3(0, 2, 3.5);\n    vec3 rd = normalize(vec3(p, -2));\n    \n    vec3 ta = vec3(0,0,0);\n    ro = rotate(vec3(0,1,0), PI * fract(iTime / R) + 0.8) * ro;\n    rd = lookat(ro,ta) * rd;\n\n    vec3 col = vec3(0.);\n\tconst float maxd = 10.0, precis = 0.001;\n\tfloat t = 0.0, d;\n \tfor(int i = 0; i < 32; i++)\n  \t{\n    \tt += d = map(ro + rd * t);\n    \tif(d < precis || t > maxd) break;\n  \t}\n  \tif(d < precis)\n  \t{\n\t  \tvec3 p = ro + rd * t;\n        col = doColor(p);\n    }\n    fragColor = vec4(col, 1.0);\n}\n*/","name":"Image","description":"","type":"image"}]}