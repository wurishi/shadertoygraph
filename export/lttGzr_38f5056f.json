{"ver":"0.1","info":{"id":"lttGzr","date":"1467766841","viewed":1482,"name":" Pathmarcher : Menger Sponge","username":"Gijs","description":"Pathmarching. Camera can be controlled! WASD+Shift+Space+Mouse. Now with adaptive precision.","likes":48,"published":1,"flags":48,"usePreview":0,"tags":["3d","raymarching","fractal","gi","pathtracing","mengersponge"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float exposure = 1.;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec4 buf = texture(iChannel0,fragCoord.xy / iResolution.xy);\n    \n    vec3 col = buf.xyz/buf.w;\n    \n    col = vec3(1.0) - exp(-col * exposure);\n    col = pow(col,vec3(1./2.2)); \n    \n\tfragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void raymarch(in vec3 p, in vec3 d, float eps, inout int steps, inout float dis, inout float meps, inout float t){\n\tfor (;steps<MAX_STEPS;steps++){\n\t\tdis = getDistance(p + d*t);     \n        t += dis;\n        meps = abs(t)*eps;\n\n\t\tif(dis<meps){\n            t -= (meps-dis);\n            break;\n        }\n        \n        if(t>MAX_MARCH) break;\n\t}\n}\n\nvec3 getNormal(vec3 p, float eps){\n    eps = max(eps,1e-7);\n    vec2 k = vec2(1,-1);\n    vec2 d = k*eps;\n    return normalize( k.xyy*getDistance( p + d.xyy ) + \n                      k.yyx*getDistance( p + d.yyx ) + \n                      k.yxy*getDistance( p + d.yxy ) + \n                      k.xxx*getDistance( p + d.xxx ) );\n}\n\nvec3 pathmarcher(vec3 p, vec3 d, float eps, inout uint seed){\n    vec3 luminance = vec3(1);\n    vec3 direct    = vec3(0);\n \n    for(int depth=0;depth<MAX_DEPTH;depth++){\n        \n        int   steps = 0;\n        float dis = 0.;\n        float meps = 0.;\n        float t = 0.;\n        raymarch(p,d,eps,steps,dis,meps,t);\n        vec3 hitPos    = p + d*t;\n            \n        if(dis<meps){\n  \n            vec3 hitColor  = getColor(hitPos);\n            vec3 hitNormal = getNormal(hitPos,meps);\n            \n            luminance *= hitColor;\n\n            vec3  SunSampleDir = getRandomConeSample(SUN_VECTOR,SUN_SIZE,seed++);\n            float SunLight = dot(hitNormal,SunSampleDir);\n            if(SunLight>0.){\n                int   steps = 0;\n                float dis = 0.;\n                float mmeps = 0.;\n                float t = 0.;            \n                raymarch(hitPos + hitNormal*meps,SunSampleDir,meps,steps,dis,mmeps,t);\n                if (t>MAX_MARCH){\n                    direct += luminance*SunLight*SUN_COLOR;\n                }\n            }\n\n            d = getRandomCosWeightedHemiSphereSample(hitNormal,seed++);\n\n        }else if(t>MAX_MARCH){\n            \n        \treturn direct + luminance*getSkyColor(d); \n            \n        }\n        \n        p = hitPos;\n        \n    }\n\n    return direct;\n}\n\n\nvoid mainImage( out vec4 fragcolor, in vec2 fragCoord ){\n    float minResolution = min(iResolution.x,iResolution.y);\n    float maxResolution = max(iResolution.x,iResolution.y);\n    float eps = DETAIL*ZOOM/maxResolution;\n    \n    //camera\n    vec3 cameraPosition = texelFetch(iChannel1,ivec2(0,0),0).rgb;\n  \tvec3 cameraForward  = texelFetch(iChannel1,ivec2(1,0),0).rgb;\n    vec3 cameraRight    = texelFetch(iChannel1,ivec2(2,0),0).rgb;\n    vec3 cameraUpward   = texelFetch(iChannel1,ivec2(3,0),0).rgb;\n\n    //Seed\n    uvec2 up = uvec2(fragCoord);\n    uint seed =  up.x + 1920U*up.y + (1920U*1080U)*uint(iFrame);\n    \n    //Scaling\n    vec2 p = fragCoord + vec2(hash(seed++),hash(seed++))*2.-1.;//anti-aliasing\n    vec2 sp  = (p*2.-iResolution.xy)/minResolution*ZOOM;\n     \n   \t//Pixel Ray\n\tvec3 direction = normalize(cameraForward+sp.x*cameraRight+sp.y*cameraUpward);\n    \n    //Focal Point \n    vec3 focalPoint = direction*FOCAL_LENGTH;\n    \n    //Pick random point on Aperture\n    float randomAngle       = TAU*hash(seed++);\n    float randomRadius      = hash(seed++)*APERTURE;\n    vec3  randomAperturePos = (cos(randomAngle)*cameraRight+sin(randomAngle)*cameraUpward)*sqrt(randomRadius);\n    \n    //Point on Aperture to Focal Point\n    direction = normalize(focalPoint-randomAperturePos);\n\n    //Final\n    fragcolor = vec4(\n        pathmarcher(\n            cameraPosition+randomAperturePos,\n            direction,\n            eps,\n            seed\n        ),1.0);\n    \n    if(!(texture(iChannel1,vec2(0)).w>.0)){//No movement detected so keep previous frames\n    \tfragcolor += texture(iChannel0,fragCoord/iResolution.xy);\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"//This buffer handles the Camera\n//if ANY movement is done fragColor.w becomes 1 for ALL pixels\n\nvoid rot(inout vec3 a, inout vec3 b, float angle){\n    float c = cos(angle);\n    float s = sin(angle);\n    vec3 na =  c*a + s*b;\n    vec3 nb = -s*a + c*b;\n    a = na;\n    b = nb;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    \n    ivec2 p = ivec2(fragCoord);\n    \n    if(p.x>4 || p.y > 0) return;\n    \n    vec3 cameraPosition = texelFetch(iChannel0,ivec2(0,0),0).rgb;\n  \tvec3 cameraForward  = texelFetch(iChannel0,ivec2(1,0),0).rgb;\n    vec3 cameraRight    = texelFetch(iChannel0,ivec2(2,0),0).rgb;\n    vec3 cameraUpward   = texelFetch(iChannel0,ivec2(3,0),0).rgb;\n    vec3 mouseOld       = texelFetch(iChannel0,ivec2(4,0),0).rgb;\n    \n    if(iFrame==0){\n        cameraPosition  = CAMERA_POSITION;\n        cameraForward   = normalize(CAMERA_LOOK-cameraPosition);\n        cameraRight     = normalize(cross(vec3( 0, 1, 0),cameraForward));\n        cameraUpward    = normalize(cross(cameraForward,cameraRight));\n        mouseOld        = vec3(iMouse.xy, 0);\n    } \t\t\n    \n    bool forward     = texelFetch(iChannel1,ivec2(87,0),0).x + texelFetch(iChannel1,ivec2(38,0),0).x >0.;\n    bool left        = texelFetch(iChannel1,ivec2(65,0),0).x + texelFetch(iChannel1,ivec2(37,0),0).x >0.;\n    bool backward    = texelFetch(iChannel1,ivec2(83,0),0).x + texelFetch(iChannel1,ivec2(40,0),0).x >0.;\n    bool right       = texelFetch(iChannel1,ivec2(68,0),0).x + texelFetch(iChannel1,ivec2(39,0),0).x >0.;\n    bool rollleft    = texelFetch(iChannel1,ivec2(81,0),0).x > 0.;\n    bool rollright   = texelFetch(iChannel1,ivec2(69,0),0).x > 0.;\n    bool down        = texelFetch(iChannel1,ivec2(16,0),0).x + texelFetch(iChannel1,ivec2(34,0),0).x > 0.;\n    bool up          = texelFetch(iChannel1,ivec2(32,0),0).x + texelFetch(iChannel1,ivec2(33,0),0).x > 0.;\n    bool mouseLeft   = iMouse.z>0.;\n    bool interaction = forward||left||backward||right||rollleft||rollright||down||up||mouseLeft;\n    \n    float stepSize = clamp(\n        getDistance(cameraPosition)*MOVEMENT_SPEED,\n        MIN_SPEED,\n        MAX_SPEED\n    )*iTimeDelta*ZOOM;\n    \n    cameraPosition += (cameraForward*(float(forward) - float(backward)) +\n        \t\t       cameraRight  *(float(right)   - float(left)    ) +\n        \t           cameraUpward *(float(up)      - float(down)    )\n                      )*stepSize;\n    \n    float r = (float(rollleft)-float(rollright))*iTimeDelta*CAMERA_ROLL_SENSITIVITY;\n    rot(cameraRight, cameraUpward , r);\n    \n    if(mouseLeft){\n        if(mouseOld.z==0.){\n            mouseOld.xy = iMouse.zw;\n            mouseOld.z = 1.;\n        }\n\t\tvec2 s = iMouse.xy-mouseOld.xy;\n        rot(cameraForward, cameraUpward, s.y*CAMERA_SENSITIVITY);\n        rot(cameraForward, cameraRight , s.x*CAMERA_SENSITIVITY);\n    }else{\n    \tmouseOld.z = 0.;   \n    }\n    \n    GramSchmidt33(cameraForward, cameraUpward, cameraRight);\n    \n    if(p.x==0){\n    \tfragColor.rgb = cameraPosition;\n    }else if(p.x==1){\n        fragColor.rgb = cameraForward;\n    }else if(p.x==2){\n        fragColor.rgb = cameraRight;\n    }else if(p.x==3){\n        fragColor.rgb = cameraUpward;\n    }else if(p.x==4){\n        fragColor.rgb = vec3(iMouse.xy, mouseOld.z);\n    }\n    \n    fragColor.w = float(interaction);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"//constants\n    #define PI  3.14159\n    #define TAU 6.28318\n\n//floor\n\t#define FLOOR\n\n//Fractal\n\t#define FRACTAL\n    #define ITERATIONS 10\n    #define SCALE      3.\n    #define OFFSET     vec3(.95,1.1,.5)\n\t#define ANGLE      vec3(0)\n\n//Render\n\t#define DETAIL       1.5\n    #define MAX_STEPS    128\n    #define MAX_DEPTH    3\n    #define MAX_MARCH    10.\n\n//Lighting\n    #define SKY_COLOR     vec3(.45,.56,1.)\n    #define SUN_VECTOR    vec3(0.57735026919)\n    #define SUN_COLOR     vec3(1.)\n    #define SUN_SIZE      0.0001\n\n//Camera\n    #define APERTURE        .0\n    #define FOCAL_LENGTH    2.\n\t#define ZOOM            .5\n\t#define MOVEMENT_SPEED  10.\n\t#define MAX_SPEED       8.\n\t#define MIN_SPEED       1e-3\n\t#define CAMERA_LOOK     vec3(0,0,0)\n\t#define CAMERA_POSITION vec3(0,0,-3)\nconst float CAMERA_SENSITIVITY      = 0.003;\nconst float CAMERA_ROLL_SENSITIVITY = 1.;\n\n//makes sure that three 3 dimensional vectors are orthonormal\nvoid GramSchmidt33(inout vec3 a, inout vec3 b, inout vec3 c){\n    a = normalize(a);\n    b = b - dot(b,a)*a;\n    b = normalize(b);\n    c = c - dot(c,a)*a - dot(c,b)*b;\n    c = normalize(c);\n}\n\n\n//rotates vector around another\nvec3 rotate(vec3 p, float angle, vec3 v){\n\tfloat c = cos(angle);\n\tvec3 s = sin(angle) * v;\n\tvec3 d =  (1.0 - c) * v;\n    return dot(p,d)*v + p*mat3(c,-s.z,s.y, s.z,c,-s.x, -s.y,s.x,c);\n}\n\n//Create rotation Matrix\nmat3 getRotationMatrix( in vec3 xyz ){\n    vec3 si = sin(xyz*TAU);\n    vec3 co = cos(xyz*TAU);   \n    mat3 xrot = mat3(\n         1   , 0   , 0   ,\n         0   , co.x, si.x,\n         0   ,-si.x, co.x\n    );       \n\tmat3 yrot = mat3(\n         co.y, 0   ,-si.y,\n         0   , 1   , 0   ,\n         si.y, 0   , co.y\n    );\n    mat3 zrot = mat3(\n         co.z, si.z, 0   ,\n        -si.z, co.z, 0   ,\n         0   , 0   , 1\n    );      \n   return xrot*yrot*zrot;\n}\n\n//Palette Creator\nvec3 getPaletteColor( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d ){\n    return a + b*cos(TAU*(c*t+d) );\n}\n\n\n//hashing noise by IQ\nfloat hash( uint n ) {\n\tn = (n << 13U) ^ n;\n    n = n * (n * n * 15731U + 789221U) + 1376312589U;\n    return uintBitsToFloat( (n>>9U) | 0x3f800000U ) - 1.0;\n}\n\n//random cos-weighted hemi-sphere sample\nvec3 getRandomCosWeightedHemiSphereSample(vec3 n, uint seed) {\n  \tvec2  r  = vec2(hash(seed++),hash(seed++));;\n    \n\tvec3  uu = normalize(cross(n,vec3(0,1,1)));\n\tvec3  vv = cross( uu, n );\n\t\n\tfloat ra = sqrt(r.y);\n\tfloat rx = cos(TAU*r.x); \n\tfloat ry = sin(TAU*r.x);\n\tfloat rz = sqrt( 1.-r.y );\n    \n    return normalize( ra*(rx*uu + ry*vv) + rz*n );\n}\n\n//random cos-weighted cone sample\nvec3 getRandomConeSample(vec3 dir, float extent, uint seed) {\n    vec2  r  =  vec2(hash(seed++),hash(seed++));\n    \n\tvec3  uu = normalize(cross(dir,vec3(0,1,1)));\n\tvec3  vv = cross(dir, uu);\n    \n    float rx = cos(TAU*r.x); \n\tfloat ry = sin(TAU*r.x);\n    float rz = 1.0-r.y*extent;\n    \n\tfloat ra = sqrt(1.0-rz*rz);\n    \n\treturn ra*(rx*uu+ry*vv)+rz*dir;\n}\n\n//simple sky model\nvec3 getSkyColor(vec3 dir){\n    vec3 d = dir-SUN_VECTOR;\n    return SKY_COLOR + SUN_COLOR*min(SUN_SIZE/dot(d,d),1000.);\n}\n\n//distance to box \nfloat sdBox( vec3 p, vec3 b ){\n  vec3 d = abs(p) - b;\n  return length(max(d,0.0))\n         + min(max(d.x,max(d.y,d.z)),0.0); // remove this line for an only partially signed sdf \n}\n\n//initializing a const rotation matrix based in ANGLE\nconst vec3 si = sin(ANGLE*TAU);\nconst vec3 co = cos(ANGLE*TAU);   \nconst mat3 xrot = mat3(\n         1   , 0   , 0   ,\n         0   , co.x, si.x,\n         0   ,-si.x, co.x\n    );  \nconst mat3 yrot = mat3(\n         co.y, 0   ,-si.y,\n         0   , 1   , 0   ,\n         si.y, 0   , co.y\n    );\nconst mat3 zrot = mat3(\n         co.z, si.z, 0   ,\n        -si.z, co.z, 0   ,\n         0   , 0   , 1\n    );  \nconst mat3 m = xrot*yrot*zrot;\n\n//Menger Sponge Distance&Coloring\nvec2 mengerSponge(vec3 p){\n\tfloat orbit = 1e20;\n    float s = 1.;\n    \n    for(int n=0;n < ITERATIONS;n++) {        \n        p *= m;\n        \n        //folding\n    \tp = abs(p);  \n    \tif(p.x<p.y) p.xy = p.yx;\n    \tif(p.x<p.z) p.xz = p.zx;\n    \tif(p.y<p.z) p.zy = p.yz;\t \n        \n        //offset\n    \tp.z -=  .5*OFFSET.z*(SCALE-1.)/SCALE;\n    \tp.z  = -abs(p.z);\n    \tp.z +=  .5*OFFSET.z*(SCALE-1.)/SCALE;\n              \n        //scale\n   \t\tp *= SCALE; \n        s /= SCALE;\n        \n\t\tp.x -= OFFSET.x*(SCALE-1.);\n\t\tp.y -= OFFSET.y*(SCALE-1.);  \n        \n        //simple origin point orbit\n        orbit = min(orbit,dot(p,p));\n    }\n\n    float dis = sdBox(p,vec3(1));\n          dis *= s;\n    \n    return vec2(dis,sqrt(orbit)); \n}\n\nfloat getDistance(vec3 p){\n    float mindis = MAX_MARCH;\n\n    #ifdef FLOOR\n        float floorDistance = p.y+1.1;\n        mindis = min(mindis,floorDistance);\n    #endif\n    \n    #ifdef FRACTAL\n        float fractalDistance = mengerSponge(p).x;\n        mindis = min(mindis,fractalDistance);\n\t#endif\n    \n    return mindis;\n}\n\nvec3 getColor(vec3 p){\n    float mindis = MAX_MARCH;\n    vec3  color  = vec3(1);\n\n    #ifdef FLOOR\n        float floorDistance = p.y+1.1;\n        if(floorDistance<mindis){\n            mindis = floorDistance;\n            color    = vec3(1.);\n        }\n    #endif\n    \n    #ifdef FRACTAL\n        vec2  fractalInfo = mengerSponge(p);\n        float fractalDistance = fractalInfo.x;\n        if(fractalDistance<mindis){\n            mindis = fractalDistance;\n            color    = getPaletteColor(sqrt(fractalInfo.y)*2., vec3(.5),vec3(.5),vec3(1),vec3(0,.1,.2) );\n        }\n\t#endif\n    return color;\n}   ","name":"Common","description":"","type":"common"}]}