{"ver":"0.1","info":{"id":"llcfRn","date":"1552430761","viewed":142,"name":"lasergrid_2","username":"kvick","description":"a very expensive screensaver?","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["laser"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 jitter(vec2 st, float hash)\n{\n    return vec2(\n        fract(sin(hash) * 5.2361 * hash),\n        fract(cos(hash) * 1.2361 * hash)\n        );\n}\n\nfloat line(vec2 st, vec2 a, vec2 b, float w)\n{\n    vec2 ab = b - a;\n    vec2 toSt = st - a;\n    float t = clamp(dot(ab, toSt) / dot(ab, ab), 0., 1.);\n    float d = length(st - a - ab * t);\n    return step(d, w);\n}\n\nfloat circ(vec2 st, vec2 p, float r)\n{\n    return step(length(st - p) - r, 0.);\n}\n\nfloat vLine(vec2 st, vec2 a, vec2 b, float w)\n{\n    a += jitter(st, iTime) * 0.001;\n    b += jitter(st, iTime * 2.) * 0.00;\n    vec2 ab = b - a;\n    vec2 toSt = st - a;\n    float t = clamp(dot(toSt, ab) / dot(ab, ab),0., 1.);\n    return max(length((a + ab * t) - st) - w * 0.5, 0.);\n}\n\nfloat checker(vec2 st)\n{\n    vec2 uv = abs(st);\n    //st /= uv.y;\n    \n    float roomHeight = 10.0;\n    float heightFromFloor = sin(iTime * 0.4) * 2.0 + 5.0;\n    float y = (st.y > 0.) ? roomHeight - heightFromFloor : -heightFromFloor;\n    float z = (y / st.y);\n    float x = st.x * z;\n    \n    float yVal = floor(mod(z + iTime, 2.0));\n    float val = floor(mod(x + yVal, 2.0));\n    \n    //val = yVal;\n    \n    //val = floor(mod(st.y, 2.0));\n    \n    \n    //val = z;\n    \n    return val;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 st = (2.*fragCoord - iResolution.xy)/iResolution.y;\n    \n    //st.x = abs(st.x);\n    st.y = abs(st.y);\n    st.x += sin(iTime + st.y * 3.14) * 0.1;\n    \n    float modTime = iTime * 0.2;\n    \n    //st.y += sin(iTime + uv.x * 5.);\n    \n    vec3 col = texture(iChannel0, st).xyz;\n    \n    \n    vec2 a = vec2(0.9, 0.2) + jitter(st, modTime * 2.) * 0.00;\n    vec2 b = vec2(0.9 + cos(modTime) * 0.85, 0.5) + jitter(st, modTime) * 0.00;\n    \n    vec3 laserColor = vec3(0.0, 1.0, 0.0);\n    vec2 ab = b - a;\n    vec2 aToSt = st - a;\n    float t = clamp(dot(ab, aToSt) / dot(ab, ab), 0., 1.);\n    float d = length((a + (b - a) * t) - st);\n    \n    col = vec3(0.);\n    \n    //col += 1. / (d * 15.1);\n    //col = vec3(0.01 / (d * 2.)) * laserColor;\n    \n    for (float i = 0.; i < 6.25 * 2.0; i += 0.05)\n    {\n        //col += vec3(0.01 / (vLine(st, vec2(i * 0.25, 0.), vec2(cos(modTime + i) * 0.5 + 0.5, sin(modTime + i) * 0.5 + 0.5), 0.0) * 15.)) * laserColor;\n        \n        float startRadius = 0.85;\n        vec2 pCircA = vec2(cos(modTime + i) * startRadius, sin(modTime + i) * startRadius);\n        \n        float timeOffset = 0.5;\n        float angle = sin(i * 3.5 + modTime * 4.0) * 0.5 + 0.5;\n        float sinner = sin(modTime) * 1.2 * angle;\n        vec2 pCircB = vec2(cos(timeOffset + modTime + i) * sinner, sin(timeOffset + modTime + i) * sinner * 0.35) * sinner;\n        //vec2 pCircB = vec2(cos(timeOffset + modTime + i) * startRadius * 0.5, sin(timeOffset + modTime + i) * startRadius * 0.5);\n        col += vec3(0.0025 / (vLine(st, pCircA, pCircB, 0.0) * 15.)) * laserColor;\n        \n    }\n    \n    vec2 ra = vec2(0.2, 0.9) + ((sin(iTime) * 0.5) * ab);\n    \n    float mag = max(0.0, length(col) - 1.0) * 0.2;\n    col += vec3(1., 0., 1.) * mag;\n    \n    float gamma = 0.6;\n    col /= gamma;\n    \n    if (uv.y < 0.5)\n    {\n        col *= 0.45 * vec3(checker(st));\n    }\n    \n    //col = vec3(checker(st));\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}