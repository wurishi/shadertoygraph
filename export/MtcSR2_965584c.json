{"ver":"0.1","info":{"id":"MtcSR2","date":"1480580039","viewed":256,"name":"meta balls","username":"balkhan","description":"experimenting with IO and metaballs\n","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarch","sound","metaballs","de"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dfGzn","filepath":"/media/a/ec8a6ea755d34600547a5353f21f0a453f9f55ff95514383b2d80b8d71283eda.mp3","previewfilepath":"/media/ap/ec8a6ea755d34600547a5353f21f0a453f9f55ff95514383b2d80b8d71283eda.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define I_MAX\t50\n#define E\t\t0.0001\n\n/*\n* License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n*/\n\nfloat\tde(vec3 pos);\nfloat\tde(vec3 pos, vec4 rad);\nfloat\tsdTorus( vec3 p, vec2 t );\nvec4\tmarch(vec3 pos, vec3 dir);\nvec3\tcamera(vec2 uv);\nvec3\tcalcNormal(in vec3 pos, float e, vec3 dir);\nfloat\tsmin(float a, float b, float k);\nvec2\trot(vec2 p, vec2 ang);\nvec2\tuv;\n\n// must be >= 2\n#define NUM_BALLS 15\n\nfloat\tsound[NUM_BALLS];\nvec4\tballs[NUM_BALLS];\n\nvoid\tinit_balls(inout vec4 balls[NUM_BALLS], in float[NUM_BALLS] sound)\n{\n    for (int i = 0; i <= NUM_BALLS; i++)\n    {\n        balls[i] = vec4((float(NUM_BALLS)/4.-.5*float(i))/(float(NUM_BALLS)*0.1),\t// X-axis aligned\n                        sound[i]+2.,\t\t\t\t\t\t\t\t\t\t\t\t// Y-axis depend on sound\n                        1.-sound[i],\t\t\t\t\t\t\t\t\t\t\t\t// Z-axis too\n                        abs(sound[i]/4.)+5./float(NUM_BALLS));\t\t\t\t\t\t// so is Radius\n        //balls[i].xy = rot(balls[i].zz, vec2(sin(sound[i]+iChannelTime[0]))); // this make a worms, kinda boring\n        balls[i].xy = rot(balls[i].yx, vec2(sin(sound[i]+iChannelTime[0])));\n    }\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord )\n{\n\t// trying to get something from audio\n    for (int i = 0; i <= NUM_BALLS; i++)\n    {\n    \tsound[i] = texture(iChannel0, vec2((1./float(NUM_BALLS))*float(i), float(i)/(float(NUM_BALLS) * float(0)))).r;\n        {\n        \tsound[i] -= texture(iChannel0, vec2((1./float(NUM_BALLS))*float(i), float(i)/(float(NUM_BALLS) * float(1)))).r;\n            sound[i] -= texture(iChannel0, vec2((1./float(NUM_BALLS))*float(i), float(i)/(float(NUM_BALLS) * float(2)))).r;\n            sound[i] -= texture(iChannel0, vec2((1./float(NUM_BALLS))*float(i), float(i)/(float(NUM_BALLS) * float(3)))).r;\n            sound[i] -= texture(iChannel0, vec2((1./float(NUM_BALLS))*float(i), float(i)/(float(NUM_BALLS) * float(4)))).r;\n            sound[i] -= texture(iChannel0, vec2((1./float(NUM_BALLS))*float(i), float(i)/(float(NUM_BALLS) * float(5)))).r;\n            sound[i] -= texture(iChannel0, vec2((1./float(NUM_BALLS))*float(i), float(i)/(float(NUM_BALLS) * float(6)))).r;\n            sound[i] -= texture(iChannel0, vec2((1./float(NUM_BALLS))*float(i), float(i)/(float(NUM_BALLS) * float(7)))).r;\n            sound[i] -= texture(iChannel0, vec2((1./float(NUM_BALLS))*float(i), float(i)/(float(NUM_BALLS) * float(8)))).r;\n        }\n\t\tsound[i] += 2.;\n    }\n    // giving balls position\n    init_balls(balls, sound);\n\n    uv  = fragCoord.xy / iResolution.xy;\n    uv.x *= iResolution.x / iResolution.y;\n\tvec3\tdir = camera(uv);\n    vec4\tcol = vec4(0.0);\n    vec3\tpos = vec3(.0, .0, 10.0);\n\n    vec4\tinter = (march(pos, dir));\n\n    if (inter.w <= 20.)\n\t{\n        /*\n\t\t* taken from here : https://www.shadertoy.com/view/XsB3Rm\n\t\t*/\n        vec3\tn = calcNormal(pos, E, dir);\n\t\tvec3\tv = pos+inter.w*dir;\n        vec3\tev = normalize(v - pos);\n\t\tvec3\tref_ev = reflect(ev, n);\n        vec3\tlight_pos   = vec3(10.0, 10.0, 50.0);\n        light_pos.zx = rot(light_pos.xz, vec2(sin(iTime)));\n\t\tvec3\tlight_color = vec3(.40, .5, 0.2);\n        light_color.zx = rot(vec2(1.), vec2(sin(sound[0]+iTime/3.),cos(iTime/3.)));\n        vec3\tvl = normalize(light_pos - v);\n\t\tfloat\tdiffuse  = max(0.0, dot(vl, n));\n\t\tfloat\tspecular = pow(max(0.0, dot(vl, ref_ev)), 42.);\n        col.xyz = light_color * (diffuse + specular);\n    }\n    // texture\n    else\n    {\n    \tcol = vec4(texture(iChannel1, vec2((fragCoord.xy)/iResolution.xy)+vec2(2.0*cos(iResolution.x+iTime/20.),2.0*sin(iResolution.y+iTime/20.))).rgb, 1.);\n    }\n   \tfragColor = col;\n}\n\nfloat\tscene(vec3 p, vec4 balls[NUM_BALLS])\n{\n    float\tmind = 1e5;\n\n    for (int i = 0; i <= NUM_BALLS; i++)\n\t\tmind = smin(smin(mind, de(p, balls[i]), 6.28), sdTorus(p, vec2(4.2,.07)), 6.28);\n    return(mind);\n}\n\nvec4\tmarch(vec3 pos, vec3 dir)\n{\n    vec2\tdist = vec2(0.0);\n    vec3\tp = vec3(0.0);\n    vec4\tstep = vec4(0.0);\n\n    for (int i = -1; i < I_MAX; ++i)\n    {\n    \tp = pos + dir * dist.y;\n        dist.x = scene(p, balls);\n        dist.y += dist.x;\n        if (dist.x < E || dist.y > 20.)\n           break;\n        step.x++;\n    }\n    step.w = dist.y;\n    return (step);\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n\tvec2 q = vec2(length(p.xy)-t.x,p.z);\n\n    q.y *= rot(q.xy, vec2(-1., 0.)).x;\n    return length(q)-t.y;\n}\n\n\nfloat de(vec3 pos, vec4 rad)\n{\n    float\tr = length(pos+rad.xyz)-rad.w;\n\n\treturn (r);\n}\n\nvec2\trot(vec2 p, vec2 ang)\n{\n\tfloat\tc = cos(ang.x);\n    float\ts = sin(ang.y);\n    mat2\tm = mat2(c, -s, s, c);\n    \n    return (p * m);\n}\n\n//taken from an iq shader\nvec3 calcNormal( in vec3 pos, float e, vec3 dir)\n{\n    vec3 eps = vec3(e,0.0,0.0);\n\n\treturn normalize(vec3(\n           march(pos+eps.xyy, dir).w - march(pos-eps.xyy, dir).w,\n           march(pos+eps.yxy, dir).w - march(pos-eps.yxy, dir).w,\n           march(pos+eps.yyx, dir).w - march(pos-eps.yyx, dir).w ));\n}\n\nvec3\tcamera(vec2 uv)\n{\n    float   fov = 1.;\n\tvec3    forw  = vec3(0.0, 0.0, -1.0);\n\tvec3    right = vec3(1.0, 0.0, 0.0);\n\tvec3    up    = vec3(0.0, 1.0, 0.0);\n\n    return (normalize((uv.x-1.) * right + (uv.y-0.5) * up + fov * forw));\n}\n\n//https://iquilezles.org/articles/smin\nfloat smin( float a, float b, float k )\n{\n\tfloat res = exp( -k*a ) + exp( -k*b );\n    return -log( res )/k;\n}\n","name":"Image","description":"","type":"image"}]}