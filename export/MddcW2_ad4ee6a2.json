{"ver":"0.1","info":{"id":"MddcW2","date":"1520300901","viewed":233,"name":"roundedrects","username":"hellotanjent","description":"testing rounded rectangles\n","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["distancefield","rectangles","ui","rounded"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float rx = 100.0;\nfloat ry = 100.0;\n\nfloat rw = 300.0;\nfloat rh = 200.0;\nfloat rc = 8.0;\n\nfloat roundedRect(vec2 p, float rx, float ry, float rw, float rh, float rc, float feather) {\n    float hw = rw / 2.0;\n    float hh = rh / 2.0;\n    float cx = rx + hw;\n    float cy = ry + hh;\n    \n    p -= vec2(cx, cy);\n    p = abs(p);\n \n    p.x -= clamp(p.x, 0.0, hw - rc);\n    p.y -= clamp(p.y, 0.0, hh - rc);\n    float d = length(p);\n    d -= rc;\n    d = (d / feather) + 0.5;\n    d = 1.0 - clamp(d, 0.0, 1.0);\n\n    return d;\n}\n\nfloat wedge(vec2 p, float rx, float ry, float feather) {\n    if (p.x + p.y > 200.0) {\n        return 0.0;\n    }\n    float d1 = p.x - 0.6 * p.y;\n    d1 = clamp(d1, 0.0, 1.0);\n    float d2 = -0.6 * p.x + p.y;\n    d2 = clamp(d2, 0.0, 1.0);\n    return min(d1, d2);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord;\n    \n    float border = 40.0;\n    float outside = 0.0;\n    if (uv.x < rx - border) outside = 1.0;\n    if (uv.x > rx + rw + border) outside = 1.0;\n    if (uv.y < ry - border) outside = 1.0;\n    if (uv.y > ry + rh + border) outside = 1.0;\n\n    float bounce = sin(iTime * 10.0) * 10.0 + 11.0;\n    bounce *= 2.0;\n    float offset = bounce;\n    \n    float d1 = roundedRect(uv, rx - offset / 4.0, ry + offset / 3.0, rw, rh, rc, 1.0);\n    float d2 = roundedRect(uv, rx, ry, rw, rh, rc + offset / 40000.0, 1.0 + offset / 8.0);\n    float d3 = wedge(vec2(uv.x + border - rx + offset / 4.0, uv.y + border - ry - offset / 3.0), rx, ry, 1.0);\n    \n    d2 *= 0.3;\n    vec4 background = vec4(1.0, 1.0, 1.0, 1.0);\n    vec4 shadow = vec4(0.0, 0.0, 0.0, 1.0);\n    vec4 fill = vec4(0.6, 0.6, 1.0, 1.0);\n                     \n    vec4 c = mix(background, shadow, d2);\n    c = mix(fill, c, 1.0 - d1);\n    c = mix(c, fill, d3);\n                     \n    fragColor = c;\n                     \n                     \n    //float d = max(d1, d2);\n    //float d = d2;\n    //fragColor = vec4(d, d, d, 1.0);\n    \n    \n    //fragColor = vec4(0.4 * d, 0.4 * d, d, 1.0);\n    \n    //if (outside > 0.0) fragColor = vec4(0, 0, 0.5, 1.0);\n }","name":"Image","description":"","type":"image"}]}