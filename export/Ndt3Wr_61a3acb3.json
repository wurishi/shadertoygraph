{"ver":"0.1","info":{"id":"Ndt3Wr","date":"1629577374","viewed":98,"name":"Simple 3d rotation Test - MS","username":"MSchaefer","description":"Simple rotation test","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["3drotation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat3 rotateX(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(1, 0, 0),\n        vec3(0, c, -s),\n        vec3(0, s, c)\n    );\n}\n\nmat3 rotateY(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, 0, s),\n        vec3(0, 1, 0),\n        vec3(-s, 0, c)\n    );\n}\n\nmat3 rotateZ(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, -s, 0),\n        vec3(s, c, 0),\n        vec3(0, 0, 1)\n    );\n}\n\nmat3 identity() {\n    return mat3(\n        vec3(1, 0, 0),\n        vec3(0, 1, 0),\n        vec3(0, 0, 1)\n    );\n}\n\nmat3 point1 = mat3(\n        //x  //y   //z\n    vec3(1.0, 0.0, 0.5), //0\n    vec3(0.0, 1.0, 0.5), //1\n    vec3(0.0, 0.0, 0.5)  //2\n);\n\nmat3 point2 = mat3(\n        //x  //y   //z\n    vec3(1.0, 0.0, -0.7), //0\n    vec3(0.0, 1.0, -0.2), //1\n    vec3(0.0, 0.0, -0.5)  //2\n);\n\nmat3 point3 = mat3(\n        //x  //y   //z\n    vec3(1.0, 0.0, 0.7), //0\n    vec3(0.0, 1.0, 0.2), //1\n    vec3(0.0, 0.0, 0.0)  //2\n);\n\n\nvoid drawCircle(out vec4 fragColor, in mat3 point, in vec2 uv){  \n\n    float dist = sqrt(pow(point[0].z - uv.x, 2.0) + pow(point[1].z - uv.y, 2.0));\n    float distZ = sqrt(pow(point[2].z - 2.0, 2.0));\n    if (dist < 0.3 - distZ * 0.08)\n    {   \n        fragColor = vec4(0.0, 3.1 - distZ, 0.0, 1.0);\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(.0, .0, .0 ,1.0);\n    vec2 uv = fragCoord/iResolution.xy * 5.0;\n    uv += vec2(-2.0, -2.0);\n   \n    //matrix multiplikation mit rotationsmatrix\n    point1 = point1 * (rotateX(iTime) + rotateY(iTime)); \n    point2 = point2 * rotateY(iTime);\n    point3 = point3 * rotateZ(iTime);\n    \n    \n    drawCircle(fragColor, point1, uv);\n    drawCircle(fragColor, point2, uv);\n    drawCircle(fragColor, point3, uv);\n}\n","name":"Image","description":"","type":"image"}]}