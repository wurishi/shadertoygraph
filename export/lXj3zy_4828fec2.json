{"ver":"0.1","info":{"id":"lXj3zy","date":"1711788571","viewed":16,"name":"Anneaux_olympiques ","username":"Faik","description":"anneaux avec ombre","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["anneaux"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Modeling - 2023.02.06\n// Eric Galin\n\n// Rotation matrix around z axis\n// a : Angle\nmat3 Rz(float a)\n{\n  float sa=sin(a);float ca=cos(a);\n  return mat3(ca,sa,0.,-sa,ca,0.,0.,0.,1.);\n}\n\nstruct ray {\nvec3 ro; // Ray origin\nvec3 rd; // Direction\n};\n\nray CreateRay(vec2 m,vec2 p)\n{\n  float a=3.*3.14*m.x; \n  float le=3.5;\n  \n  // Origin\n  vec3 ro=vec3(20.,10.,-10.);\n  \n  // Target point\n  vec3 ta=vec3(0.,0.,3.);\n  \n  // Orthonormal frame\n  vec3 w=normalize(ta-ro);\n  vec3 u=normalize(cross(w,vec3(0.,0.,1.)));\n  vec3 v=normalize(cross(u,w));\n  vec3 rd=normalize(p.x*u+p.y*v+le*w);\n  return ray(ro,rd);\n}\n\n// Compute the ray\n//      m : Mouse position\n//      p : Pixel\n// ro, rd : Ray origin and direction\nvoid Ray(vec2 m,vec2 p,out vec3 ro,out vec3 rd)\n{\n  float a=3.*3.14*m.x;\n  float le=3.5;\n  \n  // Origin\n  ro=vec3(40.,20.,0.);\n  ro*=Rz(a);\n  \n  // Target point\n  vec3 ta=vec3(0.,5.,-7.);\n  \n  // Orthonormal frame\n  vec3 w=normalize(ta-ro);\n  vec3 u=normalize(cross(w,vec3(0.,0.,5.)));\n  vec3 v=normalize(cross(u,w));\n  rd=normalize(p.x*u+p.y*v+le*w);\n}\n\n\n\n\n\n// Sphere\n// p : point\n// c : center of skeleton\n// r : radius\nfloat Sphere(vec3 p,vec3 c,float r)\n{\n  return length(p-c)-r;\n}\n\n// plan\n// p : point\n// c : center of skeleton\n// d : distance\nfloat plan(vec3 p, vec3 c,vec3 d)\n{\n    return dot(p-c,d);\n}\n\n\n// Cercle\n// p : point\n// c : center of skeleton\n// n : normale \n// R : radius\nfloat cercle(vec3 p,vec3 c,vec3 n,float R)\n{\n    float h = dot((p-c),n);\n    float m = sqrt(dot((p-c),(p-c)) - h*h);\n    float l = m - R;\n    float d = sqrt(h*h + l*l);\n    \n    \n    return d;\n}\n\n//Tore\n// p : point\n// c : center of skeleton\n// n : normale \n// R : radius\n// r : radius in large\nfloat tore(vec3 p,vec3 c,vec3 n,float R,float r)\n{\n    return cercle(p,c,n,R) - r;\n}\n\n// Capsule \n// p : point\n// a : point dans capsule \n// b : point formant segment avec a dans capsule \nfloat capsule(vec3 p,vec3 a, vec3 b)\n{\nfloat d;\nvec3 u = (b-a)/length(b-a);\n    if(dot((p-a),u) < 0.)\n    {\n        d= length(p-a);\n        return d;\n    }\n    else if(dot((p-b),u) > 0.)\n    {\n        d= length(p-b);\n        return d;\n    }\n    else{\n    float l = dot((p-a),u);\n    d = sqrt(dot(length(p-a),length(p-a))-dot(l,l));\n    }\n    return d;\n}\n\n\n\n\n\n\n\n\n// Operators\n\n// Union\n// a,b : field function of left and right sub-trees\nfloat Union(float a,float b)\n{\n  return min(a,b);\n}\n\n\n// intersect\n// a,b : field function of left and right sub-trees\nfloat intersect(float a,float b)\n{\n    return max(a,b);\n}\n\n\n// difference\n// a,b : field function of left and right sub-trees\nfloat difference(float a,float b)\n{\n    return max(a,-b);\n}\n\n\n//translation\n//p : point\n//d : distance\n//ajoute une distance décidée à la figure de base sur l'axe x,y et z\nvec3 translation(vec3 p, vec3 dist) {\n    return p - dist;\n}\n\n\n\n\n\n// Potential field of the object\n// p : point\nfloat object(vec3 p)\n{\n  //Sert à créer les anneaux\n  float a = tore(p,vec3(0.,1.5,2.),normalize(vec3(1.,0.,0.)),2.7,0.5);\n  float b = tore(p,vec3(-0.7,4.,-1.),normalize(vec3(1.,0.5,0.)),2.7,0.5);\n  float c = tore(p,vec3(-2.3,6.3,2.),normalize(vec3(1.,0.8,0.)),2.7,0.5);\n  float d = tore(p,vec3(-4.,8.7,-1.),normalize(vec3(1.,0.9,0.2)),2.7,0.5);\n  float e = tore(p,vec3(-5.5,11.,2.),normalize(vec3(1.,0.2,0.)),2.7,0.5);\n  \n  //Sert à créer le rectangle\n  float p1=plan(p,vec3(0,0,-4.2),vec3(0,0,5));\n  float p2=plan(p,vec3(0,-3,0),vec3(0,-1,0));\n  float p3=plan(p,vec3(5,0,0),vec3(1,0,0));\n  float p4=plan(p,vec3(-8,0,0),vec3(-1,0,0));\n  float p5=plan(p,vec3(0,12.5,0),vec3(0,1,0));\n  float p6=plan(p,vec3(0,0,-5),vec3(0,0,-5));\n  float cube = intersect(p1,intersect(p2,intersect(p3,intersect(p4,intersect(p5,p6)))));\n  \n  //Sert à créer le pillier\n  float a1= capsule(p,vec3(-2.,5.,-5.),vec3(-2.,5.,-15.))-4.;\n  float b1=plan(p,vec3(-2.,2.,-5.),vec3(0,0,1));\n  float c1=plan(p,vec3(-2.,2.,-15.),vec3(0,0,1));\n  float cylindrique = intersect(difference(a1,c1),b1);\n  \n  //Sert à créer la demi sphère creuse en base de figure\n  float demisphere=difference(Sphere(p,vec3(-2,5.,-14.5),4.25),\n    Sphere(p,vec3(-2,5.,-15.5),4.25));\n    \n  //Sert à créer les deux pillier à l'horizontale en ajoutant un troisième plan de coupe lui aussi horizontal\n      float a2= capsule(p,vec3(-8.,-1.,-5.),vec3(15.,-1.,-5.))-2.;\n      float b2=plan(p,vec3(-8.,2.5,-5.),vec3(-1,0,0));\n      float c2=plan(p,vec3(5.,-1.2,-5.),vec3(-1,0,0));\n      float d2=plan(p,vec3(5.,-1.2,-5.),vec3(0,0,1));\n      float cylindrique1 = intersect(intersect(difference(a2,c2),b2),d2);\n      \n      float a3= capsule(p,vec3(-8.,10.5,-5.),vec3(15.,10.5,-5.))-2.;\n      float b3=plan(p,vec3(-8.,2.5,-5.),vec3(-1,0,0));\n      float c3=plan(p,vec3(5.,-1.2,-5.),vec3(-1,0,0));\n      float d3=plan(p,vec3(5.,-1.2,-5.),vec3(0,0,1));\n      float cylindrique2 = intersect(intersect(difference(a3,c3),b3),d3);\n      \n      //Sert à créer le sorte d'escalier portant la figure grâce à des cylindres\n      float a4= capsule(p,vec3(-2.,5.,-15.),vec3(-2.,5.,-15.5))-4.35;\n      float b4=plan(p,vec3(-2.,2.,-15.),vec3(0,0,1));\n      float c4=plan(p,vec3(-2.,2.,-15.5),vec3(0,0,1));\n      float cylindrique3 = intersect(difference(a4,c4),b4);\n      \n      float a5= capsule(p,vec3(-2.,5.,-15.3),vec3(-2.,5.,-15.6))-4.5;\n      float b5=plan(p,vec3(-2.,2.,-15.3),vec3(0,0,1));\n      float c5=plan(p,vec3(-2.,2.,-15.6),vec3(0,0,1));\n      float cylindrique4 = intersect(difference(a5,c5),b5);\n      \n      float a6= capsule(p,vec3(-2.,5.,-15.6),vec3(-2.,5.,-15.9))-4.75;\n      float b6=plan(p,vec3(-2.,2.,-15.6),vec3(0,0,1));\n      float c6=plan(p,vec3(-2.,2.,-15.9),vec3(0,0,1));\n      float cylindrique5 = intersect(difference(a6,c6),b6);\n      \n      float a7= capsule(p,vec3(-2.,5.,-15.9),vec3(-2.,5.,-16.2))-5.;\n      float b7=plan(p,vec3(-2.,2.,-15.9),vec3(0,0,1));\n      float c7=plan(p,vec3(-2.,2.,-16.2),vec3(0,0,1));\n      float cylindrique6 = intersect(difference(a7,c7),b7);\n   \n\n   return Union(Union(Union(Union(Union(Union(Union(Union(Union(Union(Union(Union(Union(Union(a,b),c),d),e),cube),cylindrique),demisphere),cylindrique1),cylindrique2),cylindrique3),cylindrique4),cylindrique5),cylindrique6),\n    plan(p,vec3(0.,0.,-16.5),vec3(0.,0.0,1.0)));\n  \n}\n\n// Analysis of the scalar field\n\nconst int Steps=200;// Number of steps\nconst float Epsilon=.001;// Marching epsilon\n\n\n// Compute a point on the ray\n// ray : Ray\n// t   : depth\nvec3 Point(ray ray,float t)\n{\n  return ray.ro+t*ray.rd;\n}\n\n// Trace ray using ray marching\n// ray : Ray \n// e : Maximum distance\n// h : hit\n// s : Number of steps\nfloat SphereTrace(ray ray,float e,out bool h,out int s)\n{\n  h=false;\n  \n  // Start at the origin\n  float t=0.;\n  \n  for(int i=0;i<Steps;i++)\n  {\n    s=i;\n    vec3 p=Point(ray,t);\n    float v=object(p);\n    // Hit object\n    if(v<0.)\n    {\n      h=true;\n      break;\n    }\n    // Move along ray\n    t+=max(Epsilon,v);\n    // Escape marched too far away\n    if(t>e)\n    {\n      break;\n    }\n  }\n  return t;\n}\n\n//Hard shadow\n//p : point\n//s : source de lumière\nfloat HardShadow(vec3 p, vec3 s){\n    ray dist = ray(s,normalize(s-p));\n    bool touche;\n    int pas;\n    SphereTrace(dist, 50., touche, pas); //le deuxième paramètre sert à savoir qu'elle taille fait le rayon\n    if(touche){\n        return 0.;\n    }\n    else{\n        return 1.;\n    }\n}\n\n//fibonacci points\n//p : point\n//nb : nombre de points\n//o : origine de la sphère\n//radius : rayon de la sphère\nvec3 Fibonacci_sphere(float i, float nb)\n{\n    const float phi = 3. - sqrt(5.);\n    float phi_incr = 3.14*(i * phi); //i fois nombre d'or\n    float increment = 1. - (i/nb)  ;\n    float theta = sqrt( dot(dot(phi_incr,increment),2.)); //le théta change en fonction de phi et de l'incrément (accumulateur)\n    return vec3(cos(theta) * cos(phi_incr), sin(theta)*sin(phi_incr),  sin(phi_incr)); //formule vue lors du dernier cours\n}\n\n\nfloat SoftShadow2(vec3 p,vec3 o, int nb)\n{\n    float acc = 0.0; //accumulateur\n    float nb2=float(nb); //variable stockant le nombre total de rayons\n    for(int i=0;i<nb;i++)\n        {\n            nb2=float(nb)-float(i); //permet d'avoir une décrémentation progressive engendrant un dégradé d'ombre\n            vec3 sp = Fibonacci_sphere(float(i),float(nb)); // sp =spirale de philotaxie lorsque Fibonacci est rappelé plusieurs fois\n            acc+=HardShadow(p,sp); //incrémentation de l'accumulateur\n            \n        }\n        return acc/float(nb);\n      \n}\n\n\n// Object normal\n// p : point\nvec3 ObjectNormal(vec3 p)\n{\n  const float eps=.001;\n  vec3 n;\n  float v=object(p);\n  n.x=object(vec3(p.x+eps,p.y,p.z))-v;\n  n.y=object(vec3(p.x,p.y+eps,p.z))-v;\n  n.z=object(vec3(p.x,p.y,p.z+eps))-v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\n// o : ray origin\n// u : ray direction\n// e : Maximum distance\n// h : hit\n// s : Number of steps\nfloat SphereTrace(vec3 o,vec3 u,float e,out bool h,out int s)\n{\n  h=false;\n  \n  // Start at the origin\n  float t=0.;\n  \n  for(int i=0;i<Steps;i++)\n  {\n    s=i;\n    vec3 p=o+t*u;\n    float v=object(p);\n    // Hit object\n    if(v<0.)\n    {\n      h=true;\n      break;\n    }\n    // Move along ray\n    t+=max(Epsilon,v);\n    // Escape marched too far away\n    if(t>e)\n    {\n      break;\n    }\n  }\n  return t;\n}\n\n// Lighting\n\n// Background color\n// d : Ray direction\nvec3 background(vec3 d)\n{\n  return mix(vec3(.100,.0,.99),vec3(.65,.75,.99),d.z*.5+.5);\n}\n\n// Shadowing\n// p : Point\n// n : Normal\n// l : Light direction\nfloat Shadow(vec3 p,vec3 n,vec3 l)\n{\n  bool h;\n  int s;\n  float t=SphereTrace(p+Epsilon*n,l,100.,h,s);\n  if(!h)\n  {\n    return 1.;\n  }\n  return 0.;\n}\n\n// Shading and lighting\n// p : Point\n// n : Normal at point\n// e : Eye direction\nvec3 Shade(vec3 p,vec3 n,vec3 e)\n{\n  // Point light\n  const vec3 lp=vec3(30.,5.,0.);\n  \n  // Light direction to point light\n  vec3 l=normalize(lp-p);\n  \n  // Ambient color\n  vec3 ambient=.25+.25*background(n);\n  \n  // Shadow computation\n  float shadow=SoftShadow2(p , vec3(30,30.5,50.), 1);\n  \n  // Phong diffuse\n  vec3 diffuse=.35*clamp(dot(n,l),0.,1.)*vec3(1.,1.,1.);\n  \n  // Specular\n  vec3 r=reflect(e,n);\n  vec3 specular=.15*pow(clamp(dot(r,l),0.,1.),5.)*vec3(1.,1.,1.);\n  vec3 c=ambient+shadow*(diffuse+specular);\n  return c;\n}\n\n// Shading according to the number of steps in sphere tracing\n// n : Number of steps\nvec3 ShadeSteps(int n)\n{\n  float t=float(n)/(float(Steps-1));\n  return.5+mix(vec3(.05,.05,.5),vec3(.70,.39,.65),t);\n}\n\n// Picture in picture\n// pixel : Pixel\n// pip : Boolean, true if pixel was in sub-picture zone\nvec2 Pip(in vec2 pixel,out bool pip)\n{\n  // Pixel coordinates\n  vec2 p=(-iResolution.xy+2.*pixel)/iResolution.y;\n  if(pip==true)\n  {\n    const float fraction=1./4.;\n    // Recompute pixel coordinates in sub-picture\n    if((pixel.x<iResolution.x*fraction)&&(pixel.y<iResolution.y*fraction))\n    {\n      p=(-iResolution.xy*fraction+2.*pixel)/(iResolution.y*fraction);\n      pip=true;\n    }\n    else\n    {\n      pip=false;\n    }\n  }\n  return p;\n}\n\n// Image\nvoid mainImage(out vec4 color,in vec2 pxy)\n{\n  // Picture in picture on\n  bool pip=true;\n  \n  // Pixel\n  vec2 pixel=Pip(pxy,pip);\n  \n  // Mouse\n  vec2 m=iMouse.xy/iResolution.xy;\n  \n  // Camera\n  vec3 ro,rd;\n  Ray(m,pixel,ro,rd);\n  \n  // Trace ray\n  \n  // Hit and number of steps\n  bool hit;\n  int s;\n  \n  float t=SphereTrace(ro,rd,100.,hit,s);\n  \n  // Shade background\n  vec3 rgb=background(rd);\n  \n  if(hit)\n  {\n    // Position\n    vec3 p=ro+t*rd;\n    \n    // Compute normal\n    vec3 n=ObjectNormal(p);\n    \n    // Shade object with light\n    rgb=Shade(p,n,rd);\n  }\n  \n  // Uncomment this line to shade image with false colors representing the number of steps\n  if(pip==true)\n  {\n    rgb=ShadeSteps(s);\n  }\n  \n  color=vec4(rgb,1.);\n}\n\n","name":"Image","description":"","type":"image"}]}