{"ver":"0.1","info":{"id":"MlfSDH","date":"1436318206","viewed":368,"name":"Smoothstep SD","username":"xorgy","description":"Smoothstepped boolean signed distance rendering.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["signeddistancefield","smoothstep"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"float sdfCircle( const vec2 c, const float r, const vec2 coord )\n{\n    vec2 offset = coord - c;\n    \n    return sqrt((offset.x * offset.x) + (offset.y * offset.y)) - r;\n}\n\nfloat sdfUnion( const float a, const float b )\n{\n    return min(a, b);\n}\n\nfloat sdfDifference( const float a, const float b)\n{\n    return max(a, -b);\n}\n\nfloat sdfIntersection( const float a, const float b )\n{\n    return max(a, b);\n}\n\nfloat signedDistance( const vec2 coord )\n{\n    float a = sdfCircle(vec2(0.4, 0.5), 0.5, coord);\n    float b = sdfCircle(vec2(0.6, 0.5), 0.4, coord);\n    float c = sdfIntersection(a, b);\n    float d = sdfCircle(vec2(0.9, 0.5), 0.2, coord);\n    float e = sdfUnion(c, d);\n    float f = sdfCircle(vec2(0.9, 0.5), 0.1, coord);\n    float g = sdfDifference(e, f);\n    return g;   \n}\n\nvec4 render( const float distance, const float pixSize, const float strokeWidth, const float gamma, const vec3 color)\n{\n    float halfStroke = strokeWidth * 0.5;\n    if (distance < -halfStroke + pixSize) {\n        float factor = smoothstep(-halfStroke - pixSize, -halfStroke + pixSize, distance);\n\t\treturn vec4(mix(color, vec3(0.0), factor * gamma), 1.0);\n    } else if (distance <= halfStroke - pixSize) {\n        return vec4(0.0, 0.0, 0.0, 1.0);\n    } else {\n        float factor = smoothstep(halfStroke - pixSize, halfStroke + pixSize, distance);\n        return vec4(vec3(factor * gamma), 1.0);\n    }    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float size = min(iResolution.x, iResolution.y);\n    float pixSize = 1.0 / size;\n\tvec2 uv = fragCoord.xy / size;\n    \n    float d = signedDistance(uv);\n    \n    fragColor = render(d, pixSize, 0.010, 1.1, vec3(0.3, 0.5, 0.2));\n       \n}","name":"","description":"","type":"image"}]}