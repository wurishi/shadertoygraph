{"ver":"0.1","info":{"id":"ctlGW7","date":"1671857707","viewed":97,"name":"Sine Flower","username":"sigkillsdottir","description":".","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["turbulence","lookslikecabbage"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#define PI 3.14159265358979323846\n\n\n\nmat2 rotate2d(float angle){\n    return mat2(cos(angle),-sin(angle),\n    sin(angle),cos(angle));\n}\n\n\n\nfloat sine_curve(vec2 base, float freq, float amp, float offset) {\n    vec2 _uv = amp * sin(base * freq) + offset;\n    return _uv.x*_uv.y;\n}\n\n// Some useful functions\nvec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec2 mod289(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec3 permute(vec3 x) { return mod289(((x*34.0)+1.0)*x); }\n\n//\n// Description : GLSL 2D simplex noise function\n//      Author : Ian McEwan, Ashima Arts\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License :\n//  Copyright (C) 2011 Ashima Arts. All rights reserved.\n//  Distributed under the MIT License. See LICENSE file.\n//  https://github.com/ashima/webgl-noise\n//\nfloat snoise(vec2 v) {\n\n    // Precompute values for skewed triangular grid\n    const vec4 C = vec4(0.211324865405187,\n                        // (3.0-sqrt(3.0))/6.0\n                        0.366025403784439,\n                        // 0.5*(sqrt(3.0)-1.0)\n                        -0.577350269189626,\n                        // -1.0 + 2.0 * C.x\n                        0.024390243902439);\n                        // 1.0 / 41.0\n\n    // First corner (x0)\n    vec2 i  = floor(v + dot(v, C.yy));\n    vec2 x0 = v - i + dot(i, C.xx);\n\n    // Other two corners (x1, x2)\n    vec2 i1 = vec2(0.0);\n    i1 = (x0.x > x0.y)? vec2(1.0, 0.0):vec2(0.0, 1.0);\n    vec2 x1 = x0.xy + C.xx - i1;\n    vec2 x2 = x0.xy + C.zz;\n\n    // Do some permutations to avoid\n    // truncation effects in permutation\n    i = mod289(i);\n    vec3 p = permute(\n            permute( i.y + vec3(0.0, i1.y, 1.0))\n                + i.x + vec3(0.0, i1.x, 1.0 ));\n\n    vec3 m = max(0.5 - vec3(\n                        dot(x0,x0),\n                        dot(x1,x1),\n                        dot(x2,x2)\n                        ), 0.0);\n\n    m = m*m ;\n    m = m*m ;\n\n    // Gradients:\n    //  41 pts uniformly over a line, mapped onto a diamond\n    //  The ring size 17*17 = 289 is close to a multiple\n    //      of 41 (41*7 = 287)\n\n    vec3 x = 2.0 * fract(p * C.www) - 1.0;\n    vec3 h = abs(x) - 0.5;\n    vec3 ox = floor(x + 0.5);\n    vec3 a0 = x - ox;\n\n    // Normalise gradients implicitly by scaling m\n    // Approximation of: m *= inversesqrt(a0*a0 + h*h);\n    m *= 1.79284291400159 - 0.85373472095314 * (a0*a0+h*h);\n\n    // Compute final noise value at P\n    vec3 g = vec3(0.0);\n    g.x  = a0.x  * x0.x  + h.x  * x0.y;\n    g.yz = a0.yz * vec2(x1.x,x2.x) + h.yz * vec2(x1.y,x2.y);\n    return 130.0 * dot(m, g);\n}\n\n\n\n#define OCTAVES 5\n// #define OCTAVES 3\nfloat turbulence (in vec2 st) {\n    // Initial values\n    float value = 0.;\n    float amplitude = 0.5;\n    float frequency = 0.;\n\n    for (int i = 0; i < OCTAVES; i++) {\n        value += amplitude * abs(snoise(st));\n        st *= 2.;\n        amplitude *= .5;\n    }\n\n    return value;\n}\n\nfloat lines(in vec2 pos,float b){\n    float scale=2.;\n    pos*=scale;\n\n    return smoothstep(0.,\n            .07+b*0.02,\n            abs((sin(pos.x*PI*0.2)+snoise(vec2(b*2.)))));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 st=fragCoord.xy/iResolution.x;\n    st.y*=0.7*iResolution.x/iResolution.y;\n    st *= 5.;\n    \n    vec2 p = vec2(2.5, 1.25)-st;\n    float r = length(p);\n    float a = atan(p.x,p.y);\n    st = vec2(r, a);\n    \n    float angle = sine_curve(st, 30.*turbulence(st), .5, 0.);\n    vec2 pos = rotate2d(angle)*st;\n\n    float lines1 = lines(pos, 100.);\n    vec3 color=vec3(lines1);\n\n    fragColor=vec4(color,1.0);\n}\n","name":"Image","description":"","type":"image"}]}