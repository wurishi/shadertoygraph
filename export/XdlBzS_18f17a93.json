{"ver":"0.1","info":{"id":"XdlBzS","date":"1496727986","viewed":375,"name":"Infinite Zoom Test","username":"CriticalMammal","description":"A modified version of Ebanflo's experiment: https://www.shadertoy.com/view/MdXBzS\n\nThe original effect was produced by sheepmaster, and contains a good overview for how all this works: https://www.shadertoy.com/view/4tcXDl","likes":10,"published":1,"flags":64,"usePreview":0,"tags":["2d","zoom","infinite"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"MssXD8","filepath":"https://soundcloud.com/perera-elsewhere/somethings-up-1","previewfilepath":"https://soundcloud.com/perera-elsewhere/somethings-up-1","type":"musicstream","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int numWaves = 5;\nfloat numStripes = .3;\nconst float numFreqs = 10.0;\nconst float meanFreq = 4.0;\nconst float stdDev = 2.0;\nconst float period = .5;\nconst float pi = 4.0 * atan(1.0);\nconst float pi2 = 2.0 * pi;\nconst float ln2 = log(2.0);\nconst float mean = meanFreq * .69314718;\n\nfloat wavething(int n, float x){\n    float l = ln2 * float(n) + log(x);\n    l -= mean;\n    return exp(-l * l / stdDev) / 2.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float scale = exp2(-fract(iTime / period));\n    float sum1 = 0.0;\n    for(int n = 0; n < int(numFreqs); n++)\n    {\n        sum1 += wavething(n, scale);\n    }\n    \n    vec2 xy = pi2 * numStripes\n        * (2.0 * fragCoord.xy / iResolution.y - vec2(iResolution.x / iResolution.y, 1.0));\n    //xy -= pi2 * numStripes * (2.0 * iMouse.xy / iResolution.y - vec2(iResolution.x / iResolution.y, 1.0));\n    \n    // oscillate position offset based on time (sloppy, can be done much cleaner)\n    vec2 xyCalc = pi2 * numStripes * (2.0 * vec2(0.0) / iResolution.y - vec2(iResolution.x / iResolution.y, 1.0));\n    float xCalc = xyCalc.x;\n    float yCalc = xyCalc.y;\n    \n    float max = xCalc * -0.025;\n    float min = xCalc * 0.025;\n    float oscilationRange = (max - min)/2.0;\n    float oscilationOffset = oscilationRange + min;\n    float xVal = oscilationOffset + sin(iTime / 1.) * oscilationRange;\n    \n    max = yCalc * -0.025;\n    min = yCalc * 0.025;\n    oscilationRange = (max - min)/2.0;\n    oscilationOffset = oscilationRange + min;\n    float yVal = oscilationOffset + sin(iTime / .5) * oscilationRange;\n    \n    xy.x -= xVal;\n    xy.y -= yVal;\n    \n    float sum2 = 0.0;\n    for(int n = 0; n < numWaves; n++)\n    {\n        float theta = pi * float(n) / float(numWaves);\n        vec2 waveVec = vec2(cos(theta), sin(theta));\n        float phase = dot(xy, waveVec);\n        for(int k = 0; k < int(numFreqs); k++){\n            sum2 += cos(phase * scale * exp2(float(k))) * wavething(k, scale);\n        }\n    }\n    //fragColor = vec4(0.0, sum2 / sum1, sum2 / sum1, 1.0);\n    \n    /*\n    float rAmt = 0.2;\n    float gAmt = 0.7;\n    float bAmt = 0.5;\n    fragColor = vec4(sum2 / sum1 * rAmt, sum2 / sum1 * gAmt, sum2 / sum1 * bAmt, 1.0);\n    \n    float rTint = 0.45;\n    float gTint = 0.1;\n    float bTint = 0.3;\n    fragColor += vec4(rTint, gTint, bTint, 0.0);\n    */\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = vec4(sum2 / sum1 * .5 * sin(iTime / period), sum2 / sum1 * 0.5 * sin(iTime / period), sum2 / sum1 + sin(iTime / period), 1.0);\n}","name":"Image","description":"","type":"image"}]}