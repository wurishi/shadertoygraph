{"ver":"0.1","info":{"id":"3tfGD7","date":"1556468740","viewed":495,"name":"Bubble fades","username":"farious","description":"Testing some grid visualizations.\n\nFirst test: a bubbles popping in semi-random pattern effect.\n\nThis tests are being inspired and heavily based on https://www.youtube.com/watch?v=VmrIDyYiJBA\nShoutout to @BigWings.","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["grid","bubble","fade"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n\nmat2 rot(float a) { return mat2(cos(a), -sin(a), sin(a), cos(a)); }\n\nfloat circle(vec2 uv) {\n    return sqrt(dot(uv, uv));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t// ** UV\n    vec2 uv = ((fragCoord-.5*iResolution.xy)/iResolution.y); // Normalized pixel coordinates (from 0 to 1)\n    uv = uv * rot(iTime*0.1); // Normalized rotating uv\n    \n    // Rotation matrix\n    float n = 6.+abs(sin(iTime*0.1)*2.); // Grid size\n    \n    // Cell ID\n    vec2 idv2 = (floor(uv*n) + vec2(n,0));;\n    float id = idv2.x*n + idv2.y;\n    \n    // ** Grids\n    vec2 guv = fract(uv*n) -.5; // Grid uv\n    vec2 roguv = guv; roguv *= rot(iTime); // Rotating grid uv - around self origin\n\n    // Circle uv\n    float r1 = 0.45 * sin(dot(idv2, idv2) + iTime)*sin(id*0.5), r2 = 0.5;\n    vec2 croguv = roguv * (1.-smoothstep(r1,r2, circle(roguv)));\n    \n    // Final color\n    vec3 fc = dot(croguv,croguv)/0.25*vec3(1.);\n    vec3 col = fc;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}