{"ver":"0.1","info":{"id":"dlcGWf","date":"1683222397","viewed":95,"name":"glass blob","username":"svantana","description":"transparency with reflections and color abberation","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["glass"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n#define GridSize 160.0\nfloat bell(vec2 x) {\n    return 1.0 / (1.0 + dot(x,x));\n}\nfloat BG(vec2 p, float aa) {\n    float g=GridSize;\n    float lin = abs(abs(mod(p.x+p.y, 2.*GridSize)-GridSize) - abs(mod(p.x-p.y, 2.0*GridSize)-GridSize));\n    return aa / (aa*aa + lin*lin);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float noise = fract(dot(sin(fragCoord), vec2(12.9898, 78.233)) * 143758.5453) - 0.5;\n    float gPos = uv.x + .2 * noise;\n    //vec3 grad = .5+.5*cos(PI * clamp(-.5 + abs(2.0 * gPos - vec3(-.5,.5,1.5)),0.0,1.0));\n    vec3 grad = clamp(vec3(1.0-.0*gPos, 1.0+1.0*(gPos-.8), 1.0 - 1.0*abs(gPos-.4)),0.0,1.0);\n    grad*=grad;\n    \n    float A = 0.0;\n    vec2 G = vec2(0.0,0.0);\n    for (float i=0.0; i<3.0; i+=.35) {\n        vec2 mid = 13.0*(uv - vec2(.5+.3*sin((-.46+.54*i)*iTime+i),.5+.25*cos((.32+.47*i)*iTime)));\n        float b_i = bell(mid);\n        A += b_i;\n        G += mid * b_i;\n    }\n    \n    float mid = uv.x*(uv.x-1.) * uv.y*(uv.y-1.);\n    float vignette = mid / (.001 + mid);\n    float blob = smoothstep(0.55,0.6, A * vignette);// + .05*sin(14.0*A);\n    \n    vec2 c = fragCoord;\n    vec2 d = -blob*G*A;\n    float aa = 1.0 + 7.0*A*blob;\n    vec3 col = .6*vec3(BG(c+40.0*d,aa), BG(c+50.0*d,aa), BG(c+60.0*d,aa));\n    col += blob * (.5 * grad - .5 * col);\n    \n    //specular\n    vec2 dMouse = (iMouse.xy - fragCoord.xy) / iResolution.x;\n    vec3 lightPos = vec3(dMouse, 0.1);\n    float camLight = reflect(-normalize(lightPos), normalize(vec3(G,.8))).z;\n    col += .33*camLight * blob + 0.1*bell(6.0*dMouse);//+ 0.0033*blob*pow(max(0.0, camLight),20.0);\n    \n    // Output to screen\n    fragColor = vec4(sqrt(clamp(col,0.0,1.0)), 1.0);\n}","name":"Image","description":"","type":"image"}]}