{"ver":"0.1","info":{"id":"Dly3DV","date":"1699555859","viewed":56,"name":"Flower fields","username":"kryden","description":"Hello Summer, Goodbye. ","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","sdf","domainrepetition"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"int id = 0;\n\n#define GRASS_COLOR  vec3(0.0, 1.0, 0.0)\n#define BRANCH_COLOR vec3(1.0, 1.0, 1.0)\n#define PETAL_COLOR  vec3(1.0, 1.0, 0.0)\n#define SUN_POSITION vec3(0.5, 0.5, -1.0)\n\nmat2 repeat_angle(vec2 p, float n) {\n  float sp = 2.0 * PI / n;\n  float an = atan(p.y, p.x);\n  float id = floor(an / sp);\n  return rotate(sp * id);\n}\n\nfloat smin(float a, float b, float k) {\n  float h = max( k - abs(a - b), 0.0 ) / k;\n  return min(a, b) - h * h * k * 0.25;\n}\n\n// https://iquilezles.org/articles/fog/\nvec3 applyFog(in vec3 rgb, in float distance) {\n  float fogAmount = 1.0 - exp( -distance * 0.03);\n  vec3  fogColor  = vec3(0.5, 0.6, 0.7);\n  return mix(rgb, fogColor, fogAmount);\n}\n\nfloat getHeight(vec2 p) {\n  return 0.002 * texture(iChannel0, p).x;\n}\n\nvec3 sky(vec2 uv) {\n  float sun = 1.0 - smoothstep(length(uv - SUN_POSITION.xy), 0.0, 0.2);\n  return vec3(sun, sun, 0.72 + uv.y);\n}\n\nfloat getPlant(vec3 p) {\n  float s = 1.5;\n  vec2 idxz = round(p.xz / s);\n  vec3 r = p;\n  r.xz = p.xz - s * idxz + 0.6 * random2D(idxz);\n  float body = sdCylinder(r, vec3(0.0, 0.1, 0.0), vec2(0.02, 2.0));\n\n  r.y -= 0.3 * round(clamp(r.y / 0.3 , 0.0, 7.0));\n\n  r.xz *= repeat_angle(r.xz, 12.0);\n  r.xz *= rotate(PI / 12.0);\n  r.xz -= vec2(0.2, 0.0);\n  r.xy *= rotate(PI / 6.0);\n  r  *= vec3(1.5, 5.0, 5.5);\n  \n  float branch = smin(body, sdSphere(r, vec4(0.0, 0.0, 0.0, 0.2)), 0.2);\n  float hit = min(body, branch);\n\n  if (hit == body) id = 1;\n  else if (hit == branch) id = 2;\n  return hit;\n}\n\nfloat scene(vec3 p) {\n  float h = p.y - getHeight(p.xz);\n  h = min(h, getPlant(p));\n\n  if (h != getPlant(p)) id = 0;\n\n  return h;\n}\n\n// https://iquilezles.org/articles/normalsSDF/\nvec3 getNormal(in vec3 p) {\n  vec3 epsilon = vec3(EPSILON, 0.0, 0.0);\n  vec3 normal = vec3(\n      scene(p + epsilon.xyy) - scene(p - epsilon.xyy),\n      scene(p + epsilon.yxy) - scene(p - epsilon.yxy),\n      scene(p + epsilon.yyx) - scene(p - epsilon.yyx));\n  return normalize(normal);\n}\n\n#define STEP_SIZE(X) 0.1 * X\n\nHit rayMarch(in Ray ray, float near) {\n  Hit hit;\n  hit.id = -1;\n  float t = near;\n  for (int i = 0; i < MAXIMUM_STEPS; i++) {\n    vec3 p = ray.origin + ray.direction * t;\n    float d = scene(p);\n    if (d < EPSILON) {\n      hit.id = 1;\n      hit.position = p;\n      hit.normal = getNormal(hit.position);\n      hit.distance = length(hit.position - ray.origin);\n      break;\n    }\n\n    t += 0.1 * d;\n\n    if (t > FAR) {\n      break;\n    }\n  }\n  return hit;\n}\n\n// https://iquilezles.org/articles/rmshadows/\n\nfloat softShadow(in Ray ray, float near) {\n\tfloat ret = 1.0;\n  float t = near;\n  for (int i = 0; i < 32; i++) {\n\t\tvec3 p = ray.origin + ray.direction * t;\n    float d = scene(p);\n    ret = min(ret, 10.0 * d / t);\n    t += d;\n    if (ret < EPSILON || t > FAR) break;\n  }\n  ret = clamp(ret, 0.0, 1.0);\n  return ret * ret * (3.0 - 2.0 * ret);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {    \n  vec2 uv = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n\n  Ray ray;\n  ray.origin = vec3(0.5, 3.5, -iTime);\n  ray.direction = normalize(vec3(uv, -1.0));\n\n  ray.origin.y += getHeight(ray.origin.xz);\n\n  Hit hit = rayMarch(ray, 0.0);\n\n  vec3 light = SUN_POSITION + vec3(0.3, 0.3, 0.0);\n\n  vec3 color = vec3(0.0);\n\n  if (hit.id != -1) {\n    if (id == 1) {\n      color = BRANCH_COLOR;\n    } else if (id == 2) {\n      color = PETAL_COLOR;\n    } else {\n      color = GRASS_COLOR;\n    }\n\n    Ray shadow = Ray(hit.position, normalize(light));\n\n    float s = softShadow(shadow, 0.01);\n\n    color *= s * getDiffuse(hit.normal, light);\n  } else {\n    color = sky(uv);\n  }\n\n  color = applyFog(color, hit.distance);\n\n  fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"struct Ray {\n  vec3 origin;\n  vec3 direction;\n};\n\nstruct Hit {\n  int id;\n  vec3 normal;\n  vec3 position;\n  float distance;\n};\n\nmat2 rotate(float angle) {\n  float c = cos(angle);\n  float s = sin(angle);\n  return mat2(c, s, -s, c);\n}\n\nvec2 random2D(in vec2 p) {\n  vec2 q = vec2(dot(p, vec2(127.1, 311.7)), dot(p, vec2(269.5, 183.3)));\n  return fract(sin(q) * 43758.5453123);\n}\n\n// https://iquilezles.org/articles/distfunctions/\nfloat sdSphere(in vec3 p, in vec4 sphere) {\n  return length(p - sphere.xyz) - sphere.w;\n}\n\nfloat sdCylinder(in vec3 p, vec3 origin, vec2 size) {\n  vec2 d = vec2(length(p.xz - origin.xz), abs(p.y - origin.y)) - vec2(size.x, size.y);\n  return min(max(d.x, d.y), 0.0) + length(max(d, 0.0));\n}\n\nfloat getDiffuse(in vec3 normal, in vec3 light_direction) {\n  float diffuse = max(dot(normal, light_direction), 0.0);\n  return diffuse;\n}\n\n#define PI 3.141592653\n#define EPSILON 0.001\n#define MAXIMUM_STEPS 1000\n#define FAR 20.0\n","name":"Common","description":"","type":"common"}]}