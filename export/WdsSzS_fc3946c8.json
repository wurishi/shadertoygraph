{"ver":"0.1","info":{"id":"WdsSzS","date":"1551558857","viewed":225,"name":"Babylonian multiplication tiling","username":"saidwho12","description":"Saw this post and implemented the tiling https://twitter.com/iquilezles/status/956305119410180098. Thanks for the idea IQ :)","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["2d","noise","sdf","iq","tiling","multiplication","babylonian"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define r(x) mat2(cos(x),-sin(x),sin(x),cos(x))\n\n#define PI acos(-1.)\n#define TAU (PI+PI)\n\nfloat sdBox(vec2 p, vec2 b) {\n  vec2 d = abs(p) - b;\n  return length(max(d,0.0)) + min(max(d.x,d.y),0.0); \n}\n\nvec2 udTile(in vec2 uv, in vec2 b) {\n    float w = b.x+b.y;\n    float id = 0.;\n    float t = 1000.;\n    \n    vec3 p = vec3(uv,1)*2.-vec3(1,1,0);\n\n    for(int i = 0; i<4; i++) {\n    \tvec3 p0 = (p*.5+vec3(.5,.5,0))*w;\n    \n        float t0 = sdBox(p0.xy - .5*b, .5*b);\n    \tt = min(t, abs(t0)/p0.z);\n        if(t0<=0.) id = float(i+1);\n        \n    \tp.xy = vec2(-p.y,p.x);\n    }\n    \n    return vec2(t/p.z,id);\n}\n\nfloat noise4(in vec2 p) {\n\treturn \n          .5    * texture(iChannel0,    p).r\n        + .25   * texture(iChannel0, p*2.).r\n        + .125  * texture(iChannel0, p*4.).r\n        + .0625 * texture(iChannel0, p*8.).r;\n}\n\nvoid mainImage(out vec4 O, in vec2 u) {\n    vec2 R = iResolution.xy;\n    vec3 p = vec3(r(sin(.25*iTime*PI) * radians(5.)) * (u+u-R)/R.y + vec2(0,.5*iTime),1) * 1.5;\n    \n    vec2 uv = fract(p.xy);\n    ivec2 ip = ivec2(floor(p.xy));\n    \n    //uv = (ip.x%2 ^ ip.y%2) == 0 ? uv : vec2(uv.x,1.-uv.y);\n    \n    vec2 b = iMouse.z > 0. ? floor(iMouse.xy/R * 5. + 1.) : vec2(2,1); \n    vec2 m = udTile(uv,b);\n    \n    float t0 = m.x/p.z;\n    float t = (m.x-8./R.y)/p.z;\n    float x = smoothstep(3./R.y, 0., -t);\n    \n    vec3 c1 = m.y >= 1. ? vec3(.97,.84,.45) : vec3(.3,.2,.05);\n    \n    vec3 c0 = mix(vec3(.7,.55,.25), c1, .7*pow(noise4(p.xy*.07),2.3) * float(m.y >= 1.) );\n    //if(m.y >= 1.) x *= noise4(.05*p.xy)*.75 + .25*x*pow(noise4(p.xy*.04),.5);\n    //else x *= noise4(.05*p.xy)*.5 + .8 *x* noise4(p.xy*.05);\n    \n    x *= .6*noise4(.05*p.xy);\n    O.rgb = mix(c0, c1, x);\n    \n    O *= 1.-.2*exp(-.25*(t0-1.5/R.y)*R.y);\n    \n    //O *= 1.-.4*clamp(pow(length((u+u-R)/R.y)-.9,1.25),0.1,1.);\n}","name":"Image","description":"","type":"image"}]}