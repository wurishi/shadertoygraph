{"ver":"0.1","info":{"id":"mtlSD7","date":"1674915539","viewed":168,"name":"Simple Raymarcher Test","username":"Bricktronic","description":"Just a simple raymarched noise sphere for now. I'm not very good at math, so I'm just messing around a bit :)","likes":4,"published":3,"flags":0,"usePreview":0,"tags":["raymarched","sphere"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"struct Ray\n{\n    vec3 Pos;\n    vec3 Dir;\n};\n\n// https://iquilezles.org/articles/distfunctions/\nfloat sdSphere( vec3 p, vec3 p2, float s )\n{\n      return length(p - p2)-s;\n}\n\n// https://michaelwalczyk.com/blog-ray-marching.html\nfloat sinNoise(vec3 p, float s)\n{\n    return sin(s * p.x) * sin(s * p.y) * sin(s * p.z);\n}\n\nfloat displace(vec3 p)\n{\n    return sinNoise(p, sin(iTime * 0.1) * 10.);\n}\n\n// https://www.shadertoy.com/view/4lVXRm\nmat3 camRotation( vec2 m )\n{\n    m.y = -m.y;\n    \n    vec2 s = sin(m);\n    vec2 c = cos(m);\n    mat3 rotX = mat3(1.0, 0.0, 0.0, 0.0, c.y, s.y, 0.0, -s.y, c.y);\n    mat3 rotY = mat3(c.x, 0.0, -s.x, 0.0, 1.0, 0.0, s.x, 0.0, c.x);\n    \n    return rotY * rotX;\n}\n\nconst float EPS = 0.001;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float div = (iResolution.x / iResolution.y);\n    vec2 sUV = vec2((uv.x * div) - 0.4, uv.y);\n    vec3 color = vec3(0, 0, 0);\n    \n    float rot = iTime * 0.2;\n    vec3 cameraPos = vec3(-sin(rot) * 2.0, 0, -cos(rot) * 2.0);\n    mat3 cameraDir = camRotation(-vec2(rot, 0));\n    \n    float offset = (length(texture(iChannel0, uv * 1.0)) * 0.1) + 1.0;\n    \n    Ray ray;\n    ray.Pos = cameraPos;\n    ray.Dir = vec3((sUV * 2.0 - 1.0), 1) * cameraDir;\n    ray.Dir = normalize(ray.Dir);\n    \n    float totalDist = 0.0;\n    for(int i = 0; i < 100; i++)\n    {\n        float dist = sdSphere(ray.Pos, vec3(0, 0, 0), 1.0) + displace(ray.Pos);\n        \n        if(dist < EPS)\n        {\n           color = vec3(1, 1, 1) / ((float(i) + 1.) * 0.025);\n           break;\n        }\n        \n        float travel = min(dist, 0.025);\n        ray.Pos += ray.Dir * (travel * offset);\n        totalDist += travel;\n    }\n    \n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}