{"ver":"0.1","info":{"id":"4fS3D1","date":"1704140021","viewed":21,"name":"PIE MAN","username":"matthewbier","description":"NICEEE","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["chill"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 palette( float t ) {\nvec3 a = vec3((.0001), sin(50.2), sin(.0001));\n    vec3 b = vec3(.3, .3, 1.3);\n    vec3 c = vec3(.5, .5, .5);\n    vec3 d = vec3(10.,5000.,9.);\n\n    return a + b*(fract(cos(1.*(c*t+d)) ));\n}\n\n// Take this and multiply your UV by the resulting mat2 to get the rotation\n#define UV_ORIGIN 0.5\n#define ZOOM 3.\n#define SPEED 10.\nconst float PI = 3.14;\nmat2 rotationMatrix(float angle)\n{\n\tangle *= PI / 360.0;\n    float sine = sin(angle), cosine = cos(angle);\n    return mat2( cosine, +sine, \n                 sine,    cosine );\n}\n\n\n        float Xshape( in vec2 p, in float w, in float r, out float hi)\n{\n    p = (p*w)*.080;\n    return length(p-min(p.x+p.y,w)*1.5) - r;\n}\n    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - UV_ORIGIN * iResolution.xy) / iResolution.y;\n    vec2 p = (fragCoord.xy-iResolution.xy-UV_ORIGIN)/iResolution.y;\n    uv.x *=iResolution.x*UV_ORIGIN/iResolution.y;\n    \n    p = (fract(abs(p)) * 1.) - .5;\n    \n     uv *= (rotationMatrix( SPEED * iTime )) / ZOOM;\n    \n    \n     // width\n\tfloat wi = 500.5 + 0.3*( iTime + 20.0 );\n    // radious\n    float ra = 15.8*(iTime*.40);\n    // height\n    float hi = ((fract(ra/wi)));\n \n    float d = Xshape(uv, wi, ra, hi);\n    fragColor = vec4(.2, .1, .3, d);\n    \n\n     vec3 col = (palette(tan(d)));\n     \n     \n     d = (fract((d*10.+iTime)/40.));\n     d -= .5;\n     d = abs(d);\n     d = 0.10/d;\n    uv *= .5;\n    uv = (abs(uv));\n    uv -= .5;\n    \n    \n    col *=d;\n    \n    fragColor = vec4(col, 10.0);\n    \n    }\n    ","name":"Image","description":"","type":"image"}]}