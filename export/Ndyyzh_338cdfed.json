{"ver":"0.1","info":{"id":"Ndyyzh","date":"1662428307","viewed":302,"name":"Radial menu","username":"T3sT3ro","description":"My first original shader, adds configurable radial menu with selection and uniformly wide gaps between segments instead as seen in many games.\n\nIs it possible to store samplers in array to index into them?","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["radial","polar","menu","ui","widget"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// MIT license\n// backlinks to this shader would be appreciated\n#define PI       3.14159265359\n#define PI_2     (2. * PI)\n#define HALF_PI  (.5 * PI)\n\n// TODO: https://www.youtube.com/watch?v=M2Lk6upvEjI\n\n// square wave   \nfloat square(float rise, float fall, float t, float blur){ \n    return smoothstep(rise-blur,rise+blur, t)\n    *smoothstep(t-blur,t+blur, fall); \n}\n    \n// origin - center of pie menu\n// uv - screen coords\n// M - mouse coords\n// parts - how many items there are\n// r - smaller radius\n// R - bigger radius\n// d - gap width\n// outline - outline width\n// out selection - number in [0..parts-1] for selected item\nvec4 piemenu(vec2 origin, vec2 uv, vec2 M, float parts, float r, float R, float d, float outline, float blur, out float selection) {\n    vec2 p = uv - origin;\n    vec2 mp = M - origin;\n    mp = vec2(length(mp)*2.0, mod(atan(mp.y, mp.x), PI_2));\n    p = vec2(length(p)*2.0, mod(atan(p.y, p.x), PI_2)); // R:[0,1], theta:[0, PI_2]\n    float part = floor(p.t/PI_2*parts);\n    selection = floor(mp.t/PI_2*parts);\n    \n    // segment color\n    vec4 col = vec4(part/parts, .1, .20, 1.); //graphite -> red\n    if(selection == part){\n        col.rg = vec2(.87, .62);\n        R+=.1;\n    }\n    \n    // torus stencil with outline in alpha\n    col.a *= square(r-outline-0.01, R+outline+0.01, p.s, blur); // torus\n    col.rgb *= square(r, R, p.s, blur);\n    \n    // fan stencil\n    float angle = PI_2/parts;\n    float phi1 = mod(p.t, angle); // bring all segments CW to first\n    float phi2 = mod(-p.t, angle); // bring all segments CCW to first \n    vec2 modp1 = p.s * vec2(cos(phi1), sin(phi1)); // to cartesian\n    vec2 modp2 = p.s * vec2(cos(phi2), sin(phi2)); // ^\n    \n    col.a *= smoothstep(outline-blur, outline+blur, modp1.y)*smoothstep(outline-blur, outline+blur, modp2.y);\n    col.rgb *= smoothstep(d/2.-blur, d/2.+blur, modp1.y)*smoothstep(d/2.-blur,d/2.+blur, modp2.y); // gaps have size 2d\n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 p =  ( fragCoord - 0.5 * iResolution.xy )/ iResolution.y; // 0 at middle, 1.0 at top\n    vec2 M = (iMouse.xy - 0.5*iResolution.xy)/iResolution.y; // [0,0] Bottom left -> [1,1] Top right\n  \n    //vec2 p = vec2(length(uv)*2.0, atan(uv.y, uv.x)); // R:[0,1], theta:[-PI, +PI]\n    vec2 P = vec2(length(p.s)*2.0, mod(atan(uv.y, uv.x), PI_2)/PI_2); // R:[0,1], theta:[0, 1]\n   \n        \n    \n    \n    float sel;\n    vec4 pieColor = piemenu(vec2(0.), p, M, 5.,  .3, .5, .1, .02, 2./iResolution.y, sel);\n    vec4 texColor;\n    if (sel == 0.)      texColor = texture(iChannel0, uv);\n    else if (sel == 1.) texColor = texture(iChannel1, uv);\n    else if (sel == 2.) texColor = texture(iChannel2, uv);\n    else if (sel == 3.) texColor = texture(iChannel3, uv);\n    \n    fragColor = mix(texColor, pieColor, pieColor.a);\n}","name":"Image","description":"","type":"image"}]}