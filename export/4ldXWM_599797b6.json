{"ver":"0.1","info":{"id":"4ldXWM","date":"1481062973","viewed":986,"name":"Watery Scene","username":"Jrice06","description":"This shader looks to recreate a watery resolution on a texture. The water rises and falls, showing off how the bricks would look if the camera was underwater","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float pi = 3.141592654;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    fragColor = (uv.y + .1) * texture(iChannel0, uv);\n    \n    float level = .25 + .25 * (sin(iTime / 4.0) + 1.0);\n    if (uv.y < level)\t{\n        float temp1 = uv.x * 8.0 * pi + iTime;\n        float temp2 = uv.y * 8.0 * pi + iTime;\n    \tuv.y += sin(temp1) * .01 * cos(temp2);\n    \tuv.x += sin(temp2) * .01 * cos(temp1);\n    \n    \n    \tvec4 texture = texture(iChannel0, uv);\n    \n    \n\t\tfragColor = (texture * (uv.y + .1)) + vec4(0.0, 0.0, .1, 1.0);\n    }\n    \n}","name":"Image","description":"","type":"image"}]}