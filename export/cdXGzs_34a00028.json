{"ver":"0.1","info":{"id":"cdXGzs","date":"1666617117","viewed":155,"name":"Vertical Video Enlargement","username":"turboplay","description":"Assuming you have a vertical video (thats why pass #1 crops the input), it blurs and zooms the rest. Similar to what I 've seen in shows. Enhancement of my https://www.shadertoy.com/view/flVcDz","likes":0,"published":3,"flags":32,"usePreview":0,"tags":["video","blur"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// MIT\n\n// Second, enlarge\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 Radius = Size / iResolution.xy;\n\n    if (uv.x < left || uv.y < top || uv.x > right || uv.y > bottom)\n    {\n        float HorizontalZoom = 1. / (1. - (left + (1. - right)));\n        float VerticalZoom = 1. / (1. - (top + (1. - bottom)));\n\n        // https://www.shadertoy.com/view/wtKfWt\n        // Convert uv range to -1 to 1\n        vec2 xy = uv;\n        xy = xy * 2.0 - 1.0;\n\n        // Scale uv\n        xy.x /= HorizontalZoom;\n        xy.y /= VerticalZoom;\n\n        // Convert back to 0 to 1 range\n        xy = (xy + 1.) / 2.0f;\n\n        vec4 Color = texture(iChannel0,xy);\n\n        // Blur\n        // https://www.shadertoy.com/view/Xltfzj\n        for (float d = 0.0; d < Pi2; d += Pi2 / Directions)\n        {\n            for (float i = 1.0 / Quality; i <= 1.0; i += 1.0 / Quality)\n            {\n                Color += texture(iChannel0,xy + vec2(cos(d), sin(d)) * Radius * i);\n            }\n        }\n        Color /= Quality * Directions - 15.0;\n        fragColor = Color;\n    }\n    else\n        fragColor = texture(iChannel0,uv);\n\n\n\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// MIT\n\n// First, crop the video\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // crop enough\n    if (uv.x < left || uv.x > right || uv.y < top || uv.y > bottom)\n        fragColor = vec4(0);\n    else\n        fragColor = texture(iChannel0,uv);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"// MIT\n\n// crop %\nfloat left = 0.25;\nfloat right = 0.75;\nfloat top = 0.0f;\nfloat bottom = 1.0f;\n\n\n// Gaussian Blur Settings\nfloat Directions = 16.; // BLUR DIRECTIONS (Default 16.0 - More is better but slower), 8,64,32\nfloat Quality = 32.; // BLUR QUALITY (Default 4.0 - More is better but slower) 4,64,32\nfloat Size = 32.; // BLUR SIZE (Radius) 0-128\n\n// Constants\nconst float Pi2 = 6.28318530718; // Pi*2","name":"Common","description":"","type":"common"}]}