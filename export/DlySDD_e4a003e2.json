{"ver":"0.1","info":{"id":"DlySDD","date":"1686108034","viewed":6639,"name":"Nebula Explained","username":"Xor","description":"An explanation for my [url=https://twitter.com/XorDev/status/1666179395260694529]\"Nebula\"[/url] shader.\n","likes":115,"published":1,"flags":32,"usePreview":1,"tags":["space","nebula","explained","golf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n    Explanation for \"Nebula\":\n    https://twitter.com/XorDev/status/1666179395260694529\n*/\n\nvoid mainImage(out vec4 color, vec2 coord)\n{\n    vec3 res = iResolution;\n    //Output Buf A\n    color = texture(iChannel0, coord/res.xy);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sfGRr","filepath":"/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","previewfilepath":"/media/ap/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","type":"volume","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":2,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage(out vec4 color, vec2 coord)\n{\n    //Resolution for scaling\n    vec3 res = iResolution, \n    //Compute ray direction ranging from -1 to 1 (aspect corrected, with +z forward)\n    dir = vec3(res.xy-coord*2.,res.x) / res.x,\n    //Sample position\n    pos;\n    \n    //Use RG channels of last frame for the GB (brightened by /.7)\n    //This produces a simple chromatic aberration effect!\n    color = vec4(0, texture(iChannel0,coord/res.xy)/.7);\n    \n    //Loop 100 times\n    for(float i = 0.; i<1e2; i++)\n        //Compute sample point along ray direction plus an arbitrary offset\n        //Starts at random point between 0 and 0.1 and increments 0.1 each step\n        pos = dir*(texture(iChannel2,coord/1e3).r+i)*.1 + 9.,\n        //Rotate about the y-axis\n        pos.xz *= mat2(cos(iTime*.1+asin(vec4(0,1,-1,0)))),\n        //Add sample point, decreasing intensity with each interation (down to 0)\n        color.r += (1e2-i) / 1e5 /\n        //Attenuate from the absolute distance to the noise + gyroid shape\n        abs(texture(iChannel1,pos*.1).r + dot(sin(pos),cos(pos.yzx)));\n}","name":"Buffer A","description":"","type":"buffer"}]}