{"ver":"0.1","info":{"id":"MclcRr","date":"1720727451","viewed":11,"name":"2k lavalamp","username":"arkanoid2","description":"chill lavalamp screensaver. ","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["effecttextures"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xdf3zn","filepath":"/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","previewfilepath":"/media/ap/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Function to calculate the current phase from time\nfloat timeToPhase()\n{\n    return mod(iTime / 128.0, 1.0);\n}\n\n// Function to calculate a triangle low frequency oscillator\nfloat triangleLfo(in float phase)\n{\n    // The fractional part of the phase\n    float fractionalPhase = fract(phase);\n    \n    // Triangle wave calculation\n    return 2.0 * abs(fractionalPhase - 0.5);\n}\n\n// Function to calculate a sine-based low frequency oscillator\nfloat sineLfo(in float phase)\n{\n    // Sine function to create the LFO waveform\n    // The range of sin is from -1 to 1, but we want it from 0 to 1, so we adjust\n    return 0.5 + 0.5 * sin(phase);\n}\n\n// Function to calculate a sawtooth low frequency oscillator\nfloat sawLfo(in float phase)\n{\n    // Sawtooth wave oscillates linearly from 0 to 1 over the phase period\n    return mod(phase, 1.0);\n}\n\n// Function to apply a transformation and rotation\nvec2 transform(in vec2 uv, float time)\n{\n    // Scale transformation using sine LFO\n    float scale = triangleLfo(timeToPhase());\n\n    // Calculate the rotation angle using sawtooth LFO\n    float angle = sawLfo(timeToPhase()) * 2.0 * 3.14159265359;\n\n    // Rotation matrix\n    mat2 rotation = mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n\n    // Apply scale and rotation\n    return (uv - 0.5) * scale * rotation + 0.5;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalize pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n    // Sample the texture with the transformed UV coordinates\n    vec4 color = texture(iChannel0, transform(uv, iTime * 1.0 + iTime / 10000.0));\n    vec4 color2 = texture(iChannel1, transform(transform(uv, iTime / 3.0), iTime * 2.0 + iTime / 100.0));\n    vec4 color4 = texture(iChannel2, transform(uv, iTime / 2.0));\n    \n    // Output the color\n    fragColor.g = 0.5 * (color.r + 0.6 * sineLfo(mod(iTime, 3.0)));\n    fragColor.r = 0.7 * (color2.r + 0.3 * sineLfo(mod(iTime, 37.0)));\n    fragColor.b = 0.1 * color4.r;\n}\n","name":"Image","description":"","type":"image"}]}