{"ver":"0.1","info":{"id":"7dGcWy","date":"1655481669","viewed":334,"name":"luminescent tiles","username":"pb","description":"I mangled the noise function from my previous shader and got this.  Seems cool to me.","likes":16,"published":1,"flags":0,"usePreview":0,"tags":["noise","raymarch","fbm"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// philip.bertani@gmail.com\n\n#define oct 5   //number of fbm octaves\n#define pi  3.14159265\n\nfloat random(vec3 p) {\n    //a random modification of the one and only random() func\n    return fract( sin( dot( p, vec3(12., 90., -.8)))* 1e5 );\n}\n\n\n//this is taken from Visions of Chaos shader \"Sample Noise 2D 4.glsl\"\n//and mangled to use vec3s at corners of tetrahedron\nfloat noise(vec3 p) {\n    vec3 i = floor(p);\n    vec3 f = fract(p);\n    float a = random(i + vec3(1.,1.,1.));\n    float b = random(i + vec3(1.,-1.,-1.));\n    float c = random(i + vec3(-1.,1.,1.));\n    float d = random(i + vec3(-1.,1.,-1.));\n    vec2 u = f.yz *f.xy*(3.-2.*f.xz); //smoothstep here, it also looks good with u=f\n    \n    //bilinear interpolation\n    return mix(a,b,u.x) + (c-a)*u.y*(1.-u.x) + (d-b)*u.x*u.y;\n\n}\n\nfloat fbm3d(vec3 p) {\n    float v = 0.;\n    float a = .5;\n  \n    for (int i=0; i<oct; i++) {\n        v += a * noise(p);\n        p = p * 2.;\n        a *= .7;  //changed from the usual .5\n    }\n    return v;\n}\n\nmat3 rxz(float an){\n    float cc=cos(an),ss=sin(an);\n    return mat3(cc,0.,-ss,\n                0.,1.,0.,\n                ss,0.,cc);                \n}\nmat3 ryz(float an){\n    float cc=cos(an),ss=sin(an);\n    return mat3(1.,0.,0.,\n                0.,cc,-ss,\n                0.,ss,cc);\n}   \n\nvec3 get_color(vec3 p) {\n    vec3 q;\n    q.x = fbm3d(p);\n    q.y = fbm3d(p.yzx);\n    q.z = fbm3d(p.zxy);\n\n    float f = fbm3d(p + q);\n    \n    return q*f;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 mm = (2.*iMouse.xy-iResolution.xy)/iResolution.y;\n\n    vec3 rd = normalize( vec3(uv, -2.) );  \n    vec3 ro = vec3(0.,0.,0.);\n    \n    float delta = 2.*pi/10.;\n\n    //add this back if you want mouse\n    //mat3 rot = rxz(-mm.x*delta) * ryz(-mm.y*delta);\n \n    mat3 rot = rxz(-2.*delta) * ryz(.2*delta); \n    \n    ro -= rot[2]*iTime/4.;\n    \n    rd = rot * rd;\n    \n    vec3 p = ro + rd;\n    \n    vec3 cc = vec3(0.);\n\n    float stepsize = .01;\n    float totdist = stepsize;\n    \n    for (int i=0; i<16; i++) {\n       vec3 cx = get_color(p);\n       p += stepsize*rd;\n       float fi = float(i);\n       cc += exp(-totdist*totdist*float(i))* cx;\n       totdist += stepsize;\n       rd = ryz(.4)*rd;   //yz rotation here\n    }\n    \n    \n    cc = .5 + 1.3*(cc-.5);  //more contrast makes nice shimmering blobs\n    cc = pow( cc/15. , vec3(3.));    //play with this\n\n    fragColor = vec4(cc,1.0);\n    \n    \n}\n","name":"Image","description":"","type":"image"}]}