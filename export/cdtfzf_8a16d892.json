{"ver":"0.1","info":{"id":"cdtfzf","date":"1697479319","viewed":37,"name":"Wright ω function","username":"scholarius","description":"The Wright omega function and its inverse, x + ln x.\nIt is equal to the Lambert W function with exponential argument, but can be calculated more efficiently.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["approximation","function","omega","wright"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// Computes the real valued Wright omega (ω) function,\n// which is the principal branch of the Lambert W function\n// with an exponential argument:\n//\n// ω(x) = W( exp(x) )\n\n// Relevant Wiki:\n// https://en.wikipedia.org/wiki/Wright_omega_function\n\n// See also: Lambert W approximation\n// https://www.shadertoy.com/view/ctlXDS\n\nconst float PI = 4. * atan(1.);\nconst float TAU = 2. * PI;\n\n#define logistic(x) ( 1. / ( 1. + exp( -(x) ) ) ) \n\nfloat wrightOmega( float x )\n{\n    float y = x < 2. ? logistic(x) : x - log(x);\n    y = ( 1. + y ) * logistic( x - y );\n    y = ( 1. + y ) * logistic( x - y );\n    y = ( 1. + y ) * logistic( x - y );\n    return y;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = 4. * ( fragCoord - iResolution.xy / 2. ) / iResolution.y;\n    uv.y++;\n\tfloat x = uv.x;    \n    vec2 y = vec2( wrightOmega(x), log(x) + x );\n    vec2 invddx = vec2( ( 1. + y.x ) / y.x , uv.x / ( 1. + uv.x ) );\n    \n    vec3 d = vec3(1.);\n    d.x = min( d.x, .875 + .03125 * iResolution.y * abs( uv.y - round( uv.y * 10. ) / 10. ) );\n    d.x = min( d.x, .875 + .03125 * iResolution.y * abs( uv.x - round( uv.x * 10. ) / 10. ) );\n    d.x = min( d.x, .5 + .125 * iResolution.y * abs( uv.y - round( uv.y ) ) );\n    d.x = min( d.x, .5 + .125 * iResolution.y * abs( uv.x - round( uv.x ) ) );\n\n    d.y = min( d.y, -.5 + .25 * iResolution.y * abs( y.x - uv.y ) * min( 1., abs( invddx.x ) ) );  \n    \n    if( uv.x > 0. )\n        d.z = min( d.z, -.5 + .25 * iResolution.y * abs( y.y - uv.y ) * min( 1., abs( invddx.y ) ) );  \n\n    fragColor.xyz = vec3( clamp( d.x, 0., 1. ) );\n    fragColor.xyz = mix( vec3(1,0,0), fragColor.xyz, clamp( d.y, 0., 1. ) );\n    fragColor.xyz = mix( vec3(0,.5,1), fragColor.xyz, clamp( d.z, 0., 1. ) );\n    fragColor.xyz = pow( fragColor.xyz, vec3(0.4545) );\n}\n","name":"Image","description":"","type":"image"}]}