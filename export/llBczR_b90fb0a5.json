{"ver":"0.1","info":{"id":"llBczR","date":"1507240140","viewed":79,"name":"Reveal_JB","username":"JacobB","description":"homework","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["mix","blur","homework"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// By Jacob Biederman, 2017\n// Based on a project\n// Originally by Nikos Papadopoulos, 4rknova / 2015\n// Heavily modified by Dr. Sajid Farooq, 2016\n\n//==circle size modifier==//\nfloat revealPercent = 0.10;\n\nint key = 6;\n/*\n 1. edge detection\n 2. emboss\n 3. emboss2\n 4. random mess\n 5. Gaussian Blur approximation\n 6. blur\n 7. sharpen\n*/\n\nmat3 blur = mat3(\n 0.111, 0.111, 0.111, \n 0.111, 0.111, 0.111, \n 0.111, 0.111, 0.111 \n);\n\nmat3 sharpen = mat3(\n 0., -1, 0.0, \n -1, 5, -1, \n 0., -1, 0.0 \n);\n\nmat3 emboss = mat3(\n    2, 0, 0,\n    0, -1, 0,\n    0, 0, -1\n    );\nmat3 random = mat3(\n    -1, -1, -1, \n    -1, 9, -1,\n    -1, -1, -1\n\t);\n\nmat3 emboss2 = mat3(\n    -2, -1, 0, \n    -1, 1, 1, \n    0, 1, 2\n\t);\nmat3 gaussBlur = 1.0/16.0*mat3(\n    1, 2, 1, \n    2, 4, 2, \n    1, 2, 1\n    );\nmat3 edgeDetec = mat3(\n    0, 1, 0,\n    1, -4, 1,\n    0, 1, 0\n    );\n\n//==returns a specific pixel from img offset from uv by x and y pixels==//\nvec3 aSample(const int x, const int y, in vec2 fragCoord, in sampler2D img)\n{\n vec2 imgSize = vec2(float(textureSize(img,0).x), float(textureSize(img,0).y));\n vec2 uv = fragCoord.xy / iResolution.xy * imgSize;\n uv = (uv + vec2(x, y)) / imgSize;\n return texture(img, uv).xyz;\n}\n//==Convolution. Applies the given kernel to the given image==//\nvec3 aFilter(in vec2 fragCoord, mat3 kernel, in sampler2D img)\n{\n vec3 sum;\n    for(int r = -1; r < 2; r++){\n        for(int c = -1; c < 2; c++){\n\t\t\tsum+= aSample(r, c, fragCoord, img) * kernel[r+1][c+1];\n        }\n    }\n    return sum;\n\n}\n\n\n\nfloat mouseCircle(in vec2 uv){\n    uv.y*=iResolution.y / iResolution.x;\n    \n    float radius = revealPercent; \n    vec2 mousePos = iMouse.xy/iResolution.xy;\n    mousePos.y*=iResolution.y / iResolution.x;\n    float temp = step(length(mousePos-uv), radius);\n    return temp;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n \tvec2 uv = fragCoord.xy / iResolution.xy;\n \tvec2 fc = fragCoord.xy;\n \tvec3 cf;\n    switch (key){\n  \tcase 1:      \n \t\tcf = aFilter(fc, edgeDetec, iChannel0);\n        break;\n\tcase 2:\n \t\tcf = aFilter(fc, emboss, iChannel0); \n        break;\n\tcase 3:\n \t\tcf = aFilter(fc, emboss2, iChannel0); \n        break;\n\tcase 4:\n \t\tcf = aFilter(fc, random, iChannel0); \n        break;\n\tcase 5:\n \t\tcf = aFilter(fc, gaussBlur, iChannel0); \n        break;\n\tcase 6:\n\t\tcf = aFilter(fc, blur, iChannel0);\n        break;\n\tcase 7:\n \t\t cf = aFilter(fc, sharpen, iChannel0);\n        break;\n\tdefault:\n        cf = aFilter(fc, blur, iChannel0);\n        break;\n    }\n   \t\n\tvec4 layer1 = vec4(cf, 1.0);\n \tvec4 layer2 = vec4(aFilter(fc, sharpen, iChannel1), mouseCircle(uv));\n    \n   \n fragColor = mix(layer1, layer2, layer2.a);\n    \n}\n\n\n\n\n","name":"Image","description":"","type":"image"}]}