{"ver":"0.1","info":{"id":"MfGyDW","date":"1731862906","viewed":282,"name":"[SESSIONS2024] 【ゆっくり解説】3分で分かる！「C","username":"FoRenard","description":"Winning entry in the Code Graphics Compo for SESSIONS 2024\nport from twigl(MRT)\nhttps://twigl.app/?ol=true&ss=-OBizEQsMADi_j40QI53\nusing 美咲フォント","likes":18,"published":1,"flags":32,"usePreview":1,"tags":["sessions"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 O,vec2 F){O=texelFetch(iChannel0,ivec2(F),0);}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec3 defo()\n{\n    vec2 r = resolution,p = (gl_FragCoord.xy * 2. - r) / min(r.x,r.y) - mouse;\n    for(int i = 0; i < 8; ++i)\n    {\n        p.xy = abs(p) / dot(p,p) - vec2(.9 + cos(TIME * .2) * .4);\n    }\n    return p.xxy;\n}\nfloat hashi(vec3 p,float x,float s,float w)\n{\n    vec3 q = p;\n    q.x = abs(q.x) - x;\n    float d = length(q.xz);\n    float iy = (floor(p.y / s) + .5) * s;\n    p.y = mod(p.y,s) - s * .5;\n    p.x -= clamp(p.x,-x,x);\n    return min(d,length(p)) - w;\n}\nconst vec2 _e = vec2(1e-2,0);\n#define normal(_s,_p) norm(vec3(_s(_p+_e.xyy)-_s(_p-_e.xyy),_s(_p+_e.yxy)-_s(_p-_e.yxy),_s(_p+_e.yyx)-_s(_p-_e.yyx)))\nvec3 getsuv(vec3 wp,vec3 ro,mat3 m,float z)\n{\n    vec3 od = (ro - wp) * m;\n    vec2 wuv = od.xy / od.z * z;\n    return vec3(wuv,length(ro - wp));\n}\nfloat batu(vec2 p)\n{\n    p *= rot(PI * .25);\n    p = abs(p);\n    return max(min(p.x,p.y),max(p.x,p.y) - .03);\n}\n\nfloat sdf(vec3 p)\n{\n    float r = PI / 24. * 3.;\n    vec3 q = p;\n    float d = 1e9;\n    if(PH == 12)\n    {\n        d = hashi(q,1.,1.,.2);\n    }\n    else if(PH == 13)\n    {\n        q.xz *= rot(q.y * r);\n        d = hashi(q,1.,1.,.2);\n    }\n    else if(PH == 14)\n    {\n        q.xy *= rot(q.z * .2);\n        q.x = abs(q.x) - 1.5;\n        d = hashi(q.yzx,1.,1.,.2);\n        q = p + vec3(0,0,3);\n        q.xy *= rot(floor(q.z / 6.) * 2.4);\n        q.z = mod(q.z,6.) - 3.;\n        q.xy = vec2(length(q.xy) - 3.,atan(q.y,q.x) / PI * 12.);\n        q.xz *= rot(q.y * r);\n        d = min(d,hashi(q,1.,1.,.2));\n    }\n    else if(PH == 15)\n    {\n        q.xy = vec2(length(q.xy) - 6.,atan(q.y,q.x) / PI * 12.);\n        q.xz *= rot(q.y * r + T);\n        q.x = abs(q.x) - 4.;\n        q.xz *= rot(-q.y * r);\n        q.x = abs(q.x) - 2.;\n        q.xz *= rot(q.y * r);\n        q.x = abs(q.x) - 1.;\n        d = hashi(q.zyx,1.,1.,.3);\n    }\n    else\n    {\n        d = 10. - length(p);\n    }\n    return d * .5;\n}\n\nvec3 sn(vec2 suv)\n{\n    vec3 c = vec3(0);\n    vec3 rd,rp,ro,dir;\n    mat3 m;\n    float l = .0,d,z = .5;\n    if(PH < 14)\n        ro = vec3(0,T,-5);\n    else if(PH == 14)\n        ro = vec3(0,0,T * 2.);\n    else\n        ro = vec3(0,0,-5);\n    dir = vec3(0,0,1);\n    z = 1. - length(suv) * .5;\n    if(PH == 15)\n        z = FT * .5 - length(suv) + .5;\n    m = bnt(dir);\n    rd = m * norm(vec3(suv,z));\n    rep(i,99)\n    {\n        rp = rd * l + ro;\n        l += d = sdf(rp);\n        if(d < 1e-3 || 1e4 < l)\n            break;\n    }\n\n    vec3 n = normal(sdf,rp);\n    vec3 rl = reflect(rd,n);\n    vec3 ld = norm(vec3(1,1,-1));\n    c = vec3(1.5) * ceil(sat((sdf(rp + ld * .1) - sdf(rp)) / .1) * 3.) / 3.;\n    if(PH == 15)\n        c = .5 + .5 * cos(vec3(1,2,3) + cyc(rl * .5).x * TAU + T * TAU);\n    vec3 sky = vec3(0);\n    c = mix(sky,c,exp(-l * .05));\n    // overlay\n    float r = PI / 24. * 3.;\n    float px = length(fwidth(suv));\n    if(PH == 12)\n    {\n        rep(i,16)\n        {\n            vec3 wp = vec3(1,int(floor(ro.y) / 2.) * 2 + i * 2 - 16,0) + vec3(0,.5,0);\n            vec3 h = pcg3(wp - floor(T * 4.) * .24);\n            vec3 h2 = pcg3(wp.yzx);\n            if(dot(wp - ro,rp - ro) < 1.)\n                continue;\n            vec3 wq = wp + m * vec3(mix(vec2(0,-1),vec2(2,1),h2.xy),-.5);\n            vec2 wuv = getsuv(wp,ro,m,z).xy;\n            vec2 ouv = getsuv(wq,ro,m,z).xy;\n            vec2 sc = vec2(2,1) * mix(24.,10.,h2.z);\n            vec2 ruv = (suv - ouv) * sc,iuv = floor(ruv),fuv = fract(ruv);\n            vec3 h3 = pcg3(vec3(wp.y,iuv) + floor(T * 15.) * 2.4);\n            int cl = max(TEXTLEN[52] - 1,1),ci = h.x < .3 ? int(h3.x * float(HEXCOUNT)) : TEXT52[int(iuv.x) % cl];\n            vec2 tuv = vec2(clamp(wuv.x,ouv.x,ouv.x + (vec2(cl,0.) / sc).x),ouv.y);\n            float s = step(seg(suv,wuv,tuv),px) + step(batu(suv - wuv),px);\n            float ph = printHalf(fuv,ci);\n            s += (h3.y < .05 ? 1. - ph : ph + step(fuv.y,.1)) * float(inuv(iuv / vec2(cl,1)));\n            c = mix(c,vec3(0,0,1),sat(s));\n        }\n    }\n    else if(PH == 13)\n    {\n        rep(i,16)\n        {\n            vec3 wp = vec3(-1,int(floor(ro.y) / 2.) * 2 + i * 2 - 16,0) + vec3(0,.5,0);\n            vec3 h = pcg3(wp - floor(T * 4.) * .24);\n            vec3 h2 = pcg3(wp.yzx);\n            wp.xz *= rot(-wp.y * r);\n            if(dot(wp - ro,rp - ro) < 1.)\n                continue;\n            vec3 wq = wp + m * vec3(mix(vec2(-2,-1),vec2(-6,1),h2.xy),-.5);\n            vec2 wuv = getsuv(wp,ro,m,z).xy;\n            vec2 ouv = getsuv(wq,ro,m,z).xy;\n            vec2 sc = vec2(2,1) * mix(24.,10.,h2.z);\n            vec2 ruv = (suv - ouv) * sc,iuv = floor(ruv),fuv = fract(ruv);\n            vec3 h3 = pcg3(vec3(wp.y,iuv) + floor(T * 15.) * 2.4);\n            int cl = max(TEXTLEN[53] - 1,1),ci = h.x < .3 ? int(h3.x * float(HEXCOUNT)) : TEXT53[int(iuv.x) % cl];\n            vec2 tuv = vec2(clamp(wuv.x,ouv.x,ouv.x + (vec2(cl,0.) / sc).x),ouv.y);\n            float s = step(seg(suv,wuv,tuv),px) + step(batu(suv - wuv),px);\n            float ph = printHalf(fuv,ci);\n            s += (h3.y < .05 ? 1. - ph : ph + step(fuv.y,.1)) * float(inuv(iuv / vec2(cl,1)));\n            c = mix(c,vec3(0,0,1),sat(s));\n        }\n    }\n    else if(PH == 14)\n    {\n        rep(i,16)\n        {\n            vec3 wp = vec3(0,0,int(floor(ro.z)) + i - 2);\n            vec3 h = pcg3(wp - floor(T * 4.) * .24);\n            vec3 h2 = pcg3(wp.yzx);\n            wp.xy += norm(h2.yz - .5) * 2.;\n            vec3 wq = wp + m * vec3(-mix(vec2(0),vec2(3),h2.xy) * sign(wp.xy),0);\n            if(dot(wp - ro,rp - ro) < 1. || dot(wq - ro,rp - ro) < 1.)\n                continue;\n            vec3 wuv3 = getsuv(wp,ro,m,z);\n            vec2 wuv = wuv3.xy;\n            vec2 ouv = getsuv(wq,ro,m,z).xy;\n            vec2 sc = vec2(2,1) * mix(24.,10.,h2.z);\n            vec2 ruv = (suv - ouv) * sc,iuv = floor(ruv),fuv = fract(ruv);\n            vec3 h3 = pcg3(vec3(wp.y,iuv) + floor(T * 15.) * 2.4);\n            int cl = max(TEXTLEN[54] - 1,1),ci = h.x < .3 ? int(h3.x * float(HEXCOUNT)) : TEXT54[int(iuv.x) % cl];\n            vec2 tuv = vec2(clamp(wuv.x,ouv.x,ouv.x + (vec2(cl,0.) / sc).x),ouv.y);\n            float s = step(seg(suv,wuv,tuv),px) + step(batu(suv - wuv),px);\n            float ph = printHalf(fuv,ci);\n            s += (h3.y < .05 ? 1. - ph : ph + step(fuv.y,.1)) * float(inuv(iuv / vec2(cl,1)));\n            c = mix(c,vec3(0,0,1),sat(s) * smoothstep(8.,4.,wuv3.z));\n        }\n    }\n    else if(PH == 15)\n    {\n        rep(i,16)\n        {\n            vec3 wp = vec3(1,2,int(floor(ro.z)) + i + int(floor(T * 8.)));\n            vec3 h = pcg3(wp - floor(T * 4.) * .24);\n            vec3 h2 = pcg3(wp.yzx);\n            wp = vec3(vec2(4,0) * rot(h2.x * TAU),h2.y - .5);\n            vec3 wq = wp + m * vec3(-wp.xy * .5,0);\n            if(dot(wp - ro,rp - ro) < 1. || dot(wq - ro,rp - ro) < 1.)\n                continue;\n            vec3 wuv3 = getsuv(wp,ro,m,z);\n            vec2 wuv = wuv3.xy;\n            vec2 ouv = getsuv(wq,ro,m,z).xy;\n            vec2 sc = vec2(2,1) * mix(24.,10.,h2.z);\n            vec2 ruv = (suv - ouv) * sc,iuv = floor(ruv),fuv = fract(ruv);\n            vec3 h3 = pcg3(vec3(wp.y,iuv) + floor(T * 15.) * 2.4);\n            int cl = max(TEXTLEN[55] - 1,1),ci = h.x < .3 ? int(h3.x * float(HEXCOUNT)) : TEXT55[int(iuv.x) % cl];\n            // vec2 tuv=vec2(clamp(wuv.x,ouv.x,ouv.x+(vec2(cl,0.)/sc).x),ouv.y);\n            vec2 tuv = vec2(mix(ouv.x,ouv.x + (vec2(cl,0.) / sc).x,step(ouv.x + (vec2(cl,0.) / sc).x * .5,wuv.x)),ouv.y);\n            float s = step(seg(suv,wuv,tuv),px) + step(batu(suv - wuv),px);\n            float ph = printHalf(fuv,ci);\n            s += (h3.y < .05 ? 1. - ph : ph + step(fuv.y,.1)) * float(inuv(iuv / vec2(cl,1)));\n            c = mix(c,vec3(1,0,1),sat(s));\n        }\n    }\n    return c;\n}\nvec3 bg(vec2 uv)\n{\n    vec3 c = vec3(0);\n    vec2 suv = (uv * 2. - 1.) * asp,auv = uv * asp2;\n\n    if(PH < 9)\n    {\n        c = vec3(.2);\n    }\n    else if(PH < 11)\n    {\n        c = defo();\n    }\n    else if(PH == 11)\n    {\n        c = vec3(uv,0);\n    }\n    else if(PH < 16)\n    {\n        c = sn(suv);\n    }\n    else if(PH == 16)\n    {\n        c = vec3(0);\n    }\n    else if(PH == 17)\n    {\n        vec3 ro,rd,dir;\n        float l,z = 1.;\n        z = 1. - length(suv) * .3;\n        ro = vec3(0,0,-3) + cyc(vec3(T) * .03);\n        dir = vec3(0,0,1);\n        rd = bnt(dir) * norm(vec3(suv,z));\n        vec3 pd = vec3(0,0,1);\n        vec3 pn = plane(ro,rd,pd,1.);\n        vec2 puv = pn.xy,res = puv;\n        vec2 sc = vec2(8,16);\n        PH = 15;\n        rep(i,16)\n        {\n            float f = float(i) / 16.;\n            float sp = .1;\n            float rt = T * sp + f,it = floor(rt),ft = fract(rt);\n            vec3 h = pcg3(vec3(i,34. + it,12));\n            vec2 p = (puv - mix(-sc,sc,vec2(h.y,ft))) * .5;\n            if(p == clamp(p,-asp,asp))\n            {\n                res = p;\n                PH = int(mix(12.1,15.9,h.z));\n            }\n        }\n        c = sn(res) * .75;\n        // vec4 ov = ov((res / asp + 1.) * .5);\n        // c = mix(c,ov.rgb,ov.a);\n        PH = 17;\n    }\n    else if(PH < 20)\n    {\n        vec2 sc = vec2(4,1.5);\n        float spf = (PH == 19 ? sat(FT / SPAN * 1.1) : .0);\n        int cl = max(1,TEXTLEN[56] - 1);\n        vec2 ruv = uv * asp * vec2(2,1) * 8.;\n        float iy = floor(ruv.y);\n        vec3 h = pcg3(vec3(1,2,iy));\n        ruv.x += float(cl) * iy / 8. + T * mix(-8.,8.,h.x);\n        vec2 iuv = floor(ruv),fuv = fract(ruv);\n        bool isl = h.z < spf;\n        int ch = isl ? TEXT57[(int(iuv.x) + 23 * 128) % 23] : TEXT56[(int(iuv.x) + cl * 128) % cl];\n        float nya = printHalf(fuv,ch);\n        c = (isl ? 1. - nya : nya) * (isl ? vec3(1,0,0) : vec3(1));\n    }\n    else if(PH == 20)\n    {\n        vec3 h1 = pcg3(vec3(1,2,3) + floor(T * 8.) * 2.4) * 2. - 1.,h2 = pcg3(vec3(4,3,2) - floor(T * 8.) * .32) * 2. - 1.;\n        suv = (suv + h1.xy * .1 - vec2(0,1.2)) * rot(h1.z * .5) * mix(.4,1.,h2.x * .5 + .5);\n        int cl = max(1,TEXTLEN[57] - 1 - 9);\n        vec2 ruv = (suv * .5 + .5) * vec2(cl,4);\n        vec2 iuv = floor(ruv),fuv = fract(ruv);\n        int ch = TEXT57[int(iuv.x) % cl + 9];\n        c += printHalf(fuv,ch) * float(inuv(ruv / vec2(cl,1))) * vec3(1,0,0);\n    }\n    else if(PH == 21)\n    {\n        vec2 ruv = auv * vec2(72.,36.),iuv = floor(ruv),fuv = fract(ruv);\n        int d = 58,u = 68;\n        int iy = u - int(iuv.y) + 8;\n        float ftl = sat(FT / SPAN * 1.5) * 12.;\n        int up = u - 12 + int(ftl);//76\n        bool tin = d <= iy && iy < (up + 1);\n        int aaa = iy;\n        iy = clamp(iy,d,up);\n        int cl = max(1,TEXTLEN[iy]),ch = getText(iy)[int(iuv.x) % cl];\n        float pha = printHalf(fuv,ch);\n        c += (aaa == up ? 1. - pha : pha) * float(tin) * float(iuv.x < float(cl) * (aaa == up ? fract(ftl) : aaa < up ? 1. : .0));\n    }\n    else if(PH < 25)\n    {\n        #define _T(_x,_s) int(texelFetch(iChannel0,((ivec2(gl_FragCoord.xy)/_s+_x)%(ivec2(resolution)/_s))*_s,0).r+.5)\n        int n = _T(0,8),s = -n;\n        for(int i = 0; i < 9; i++) s += _T(ivec2(i % 3 - 1,i / 3 - 1),8);\n        c = vec3(s == 3 || (n == 1 && s == 2) ? 1 : 0);\n        if(int(frame) % 10 != 0)\n            c = vec3(n);\n        if(PH == 24 && SPAN * .5 < FT)\n            c = vec3(0);\n    }\n    return c;\n}\nvoid mainImage(out vec4 O,vec2 F)\n{\n    float fnyan = mod(time,MAXTIME + SPAN * 3.);\n    TIME = (MAXTIME + SPAN * 2.) < fnyan ? mix(MAXTIME + SPAN * 2.,.0,linearstep(MAXTIME + SPAN * 2.,MAXTIME + SPAN * 3.,fnyan)) : fnyan;\n    T = clamp(TIME - SPAN,.0,MAXTIME);\n    PH = int(floor(T / SPAN)) + 1;\n    FT = mod(T,SPAN);\n    fc = gl_FragCoord.xy,res = resolution,asp = res / min(res.x,res.y),asp2 = res / max(res.x,res.y);\n    vec2 uv = fc / res,suv = (uv * 2. - 1.) * asp;\n\n    vec3 c = bg(uv);\n    O = vec4(c,1);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define resolution vec2(iResolution.xy)\n#define mouse vec2(iMouse.xy/iResolution.xy)\n#define frame float(iFrame)\n#define time iTime\n\n\nconst int HEXCOUNT = 298;\nconst int TEXTCOUNT = 69;\nconst int MAXTEXTLEN = 73;\nconst uint[] HEX = uint[HEXCOUNT](0x00000000u,//Null\n0x25575520u,//0\n0x23222270u,//1\n0x25422170u,//2\n0x25424520u,//3\n0x46557440u,//4\n0x71354520u,//5\n0x25135520u,//6\n0x75422220u,//7\n0x25525520u,//8\n0x25564520u,//9\n0x00200200u,//:\n0x00421000u,///\n0x00000020u,//.\n0x00000210u,//,\n0x42222240u,//(\n0x12222210u,//)\n0x00200210u,//;\n0x25124520u,//S\n0x71131170u,//E\n0x72222270u,//I\n0x25555520u,//O\n0x35555550u,//N\n0x35535550u,//R\n0x25557550u,//A\n0x35555530u,//D\n0xC20802C0u,//３(l)\n0x34434430u,//３(r)\n0x442D8430u,//分(l)\n0x11272230u,//分(r)\n0x0F844480u,//で(l)\n0x07050030u,//で(r)\n0x4F4221D0u,//か(l)\n0x02551100u,//か(r)\n0xE8C2D2C0u,//る(l)\n0x30344530u,//る(r)\n0xE84E5520u,//み(l)\n0x00272210u,//み(r)\n0x884C2210u,//ん(l)\n0x00005520u,//ん(r)\n0x4F429580u,//な(l)\n0x06223630u,//な(r)\n0x001E0000u,//ー(l)\n0x00070000u,//ー(r)\n0x8D315940u,//ゆ(l)\n0x03555300u,//ゆ(r)\n0x00C300C0u,//っ(l)\n0x00122100u,//っ(r)\n0x08616800u,//く(l)\n0x21000120u,//く(r)\n0xA62200C0u,//り(l)\n0x12222100u,//り(r)\n0x00257160u,//e\n0x00355550u,//n\n0x00346560u,//a\n0x00531110u,//r\n0x44655560u,//d\n0x4F422910u,//だ(l)\n0x50701070u,//だ(r)\n0x22F222C0u,//ぜ(l)\n0x52723030u,//ぜ(r)\n0x84B0E0C0u,//今(l)\n0x01703100u,//今(r)\n0xE22E22E0u,//日(l)\n0x74474470u,//日(r)\n0x1D11D3D0u,//は(l)\n0x17111350u,//は(r)\n0x88888800u,//「(l)\n0x70000000u,//「(r)\n0x25111520u,//C\n0x32222220u,//l\n0x00612430u,//s\n0x20222220u,//i\n0x00611160u,//c\n0x25155560u,//G\n0x11111170u,//L\n0x00355310u,//p\n0x11355550u,//h\n0x088888F0u,//」(l)\n0x0E995380u,//の(l)\n0x03444430u,//の(r)\n0x42B22220u,//作(l)\n0x17171710u,//作(r)\n0x8F4C4210u,//方(l)\n0x07032230u,//方(r)\n0x19119590u,//に(l)\n0x03000070u,//に(r)\n0x0C3000C0u,//つ(l)\n0x03444210u,//つ(r)\n0x01111520u,//い(l)\n0x02444000u,//い(r)\n0x07000030u,//て(r)\n0x65EEEAD0u,//解(l)\n0x76572720u,//解(r)\n0x9F4D8B70u,//説(l)\n0x27472260u,//説(r)\n0x222222C0u,//し(l)\n0x00004210u,//し(r)\n0x47C46540u,//ね(l)\n0x03446560u,//ね(r)\n0x8F8FA9E0u,//ま(l)\n0x07070160u,//ま(r)\n0x0F42C0C0u,//ず(l)\n0x57111100u,//ず(r)\n0x00000120u,//、(l)\n0x8F4E94C0u,//を(l)\n0x03061170u,//を(r)\n0x8FD8F870u,//実(l)\n0x07507070u,//実(r)\n0xA1E32220u,//行(l)\n0x30722230u,//行(r)\n0x17111100u,//す(r)\n0xF6EBA700u,//環(l)\n0x75723510u,//環(r)\n0x2EBEAB40u,//境(l)\n0x17273360u,//境(r)\n0x4FE5FAF0u,//整(l)\n0x65257370u,//整(r)\n0xE0F8C210u,//え(l)\n0x30301170u,//え(r)\n0x0F000860u,//ブ(l)\n0x57442100u,//ブ(r)\n0xE0F000C0u,//ラ(l)\n0x30744300u,//ラ(r)\n0x8F1100C0u,//ウ(l)\n0x07442100u,//ウ(r)\n0x2F2200C0u,//ザ(l)\n0x57222100u,//ザ(r)\n0xF0888860u,//ア(l)\n0x74210000u,//ア(r)\n0x444C4440u,//ド(l)\n0x50016000u,//ド(r)\n0x22222A60u,//レ(l)\n0x00042100u,//レ(r)\n0x0E000C30u,//ス(l)\n0x03221240u,//ス(r)\n0x44422210u,//バ(l)\n0x50224440u,//バ(r)\n0x02722260u,//t\n0x00557750u,//w\n0x00656430u,//g\n0x444C21E0u,//と(l)\n0x00300070u,//と(r)\n0xE8844210u,//入(l)\n0x00011240u,//入(r)\n0x8F844210u,//力(l)\n0x07444460u,//力(r)\n0x03222260u,//れ(r)\n0x0E0021E0u,//こ(l)\n0xE0E100C0u,//う(l)\n0x30344300u,//う(r)\n0x4F444210u,//カ(l)\n0x07444430u,//カ(r)\n0x005AA0C0u,//ッ(l)\n0x00222100u,//ッ(r)\n0x0F0000F0u,//コ(l)\n0x07444470u,//コ(r)\n0xF8DDD1F0u,//画(l)\n0x70555470u,//画(r)\n0xF8F5D5F0u,//面(l)\n0x70755570u,//面(r)\n0x50551100u,//が(r)\n0x8AAE99F0u,//出(l)\n0x02234470u,//出(r)\n0x0F0E12C0u,//さ(l)\n0x17123010u,//さ(r)\n0xE84F8480u,//そ(l)\n0x30070030u,//そ(r)\n0x68340860u,//シ(l)\n0x00E888E0u,//ェ(l)\n0x00300030u,//ェ(r)\n0x4C2D0860u,//ダ(l)\n0x57452100u,//ダ(r)\n0x8E8F8FE0u,//書(l)\n0x03630730u,//書(r)\n0x00555570u,//u\n0x00555220u,//v\n0x8FD8AAD0u,//定(l)\n0x07503070u,//定(r)\n0x2F8F4F40u,//義(l)\n0x27075350u,//義(r)\n0x53000070u,//ご(r)\n0x4F5F55F0u,//曲(l)\n0x17575570u,//曲(r)\n0x1D111180u,//げ(l)\n0x00701070u,//た(r)\n0x1FAFAF50u,//無(l)\n0x07272750u,//無(r)\n0xFDBDDB90u,//限(l)\n0x74747250u,//限(r)\n0x2D2D6B60u,//続(l)\n0x17174260u,//続(r)\n0x00016000u,//ト(r)\n0x34000860u,//ン(l)\n0x8F00CB80u,//ネ(l)\n0x03212400u,//ネ(r)\n0x04444210u,//ル(l)\n0x11115530u,//ル(r)\n0x000C3000u,//イ(l)\n0x42111110u,//イ(r)\n0xE0F88860u,//デ(l)\n0x50700000u,//デ(r)\n0xEAEAE3D0u,//思(l)\n0x32323550u,//思(r)\n0x1C181D10u,//浮(l)\n0x72032710u,//浮(r)\n0x57111350u,//ば(r)\n0xC2BAA220u,//何(l)\n0x74767460u,//何(r)\n0xE02D30C0u,//ら(l)\n0x01034210u,//ら(r)\n0x2DAD6BA0u,//締(l)\n0x17275320u,//締(r)\n0x2A65D520u,//め(l)\n0x13554430u,//め(r)\n0xA2722680u,//切(l)\n0x75555560u,//切(r)\n0x75757840u,//明(l)\n0x75757460u,//明(r)\n0x000F0000u,//一(l)\n0x00270000u,//一(r)\n0x4E3A6A20u,//体(l)\n0x17135310u,//体(r)\n0x50300070u,//ど(r)\n0x88888080u,//！(l)\n0x00377750u,//m\n0x00255520u,//o\n0x62722220u,//f\n0xE2FAAF80u,//最(l)\n0x32745250u,//最(r)\n0x8F4CF5D0u,//高(l)\n0x07117550u,//高(r)\n0x8FD0F430u,//完(l)\n0x07507170u,//完(r)\n0x0E2EAA50u,//成(l)\n0x27226250u,//成(r)\n0x2FE8F870u,//美(l)\n0x27307070u,//美(r)\n0x27A2BA70u,//提(l)\n0x33726270u,//提(r)\n0x8F2EA3D0u,//忘(l)\n0x07032550u,//忘(r)\n0x96D8FCB0u,//楽(l)\n0x43507160u,//楽(r)\n0x98401950u,//次(l)\n0x07511240u,//次(r)\n0xF1D5D1F0u,//回(l)\n0x74555470u,//回(r)\n0x8F4F4480u,//も(l)\n0x03034430u,//も(r)\n0xE2E2E430u,//見(l)\n0x32323570u,//見(r)\n0x8888E960u,//よ(l)\n0x03001240u,//よ(r)\n0x55575550u,//H\n0x00556430u,//y\n0x22222020u,//!\n0x72222220u,//T\n0x22000000u,//'\n0x11355530u,//b\n0x00552550u,//x\n0x11553550u,//k\n0x55000000u,//\"\n0x40444520u,//j\n0x71131110u,//F\n0x55522220u,//Y\n0x25422020u,//?\n0x64200000u,//’(l)\n0x35535530u,//B\n0xC2008080u,//？(l)\n0x34430000u,//？(r)\n0x000CB880u,//ィ(l)\n0x02100000u,//ィ(r)\n0x4C210860u,//グ(l)\n0xEAEAE520u,//界(l)\n0x32323510u,//界(r)\n0x771F5F50u,//開(l)\n0x77475750u,//開(r)\n0xE52DE430u,//発(l)\n0x25253170u,//発(r)\n0x8E8FCB80u,//老(l)\n0x43173070u,//老(r)\n0x292FA2E0u,//後(l)\n0x10572160u,//後(r)\n0xF88CB880u,//不(l)\n0x70024000u,//不(r)\n0x8F9E4870u,//安(l)\n0x07431160u,//安(r)\n0x57555750u,//#\n0x00000070u,//_\n0x02272200u,//+\n0x42212240u,//{\n0x00707000u,//=\n0x04212400u,//<\n0x01421400u,//%\n0x22222220u,//|\n0x25525160u,//&\n0x12242210u//}\n);\nconst int[] TEXT0 = int[MAXTEXTLEN](1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,18,18,20,21,22,18,23,19,22,24,23,25,26,27,28,29,30,31,28,29,32,33,34,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);\nconst int[] TEXT1 = int[MAXTEXTLEN](0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);\nconst int[] TEXT2 = int[MAXTEXTLEN](36,37,38,39,40,41,42,43,42,43,42,43,42,43,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);\nconst int[] TEXT3 = int[MAXTEXTLEN](44,45,46,47,48,49,50,51,23,52,53,54,55,56,57,58,59,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);\nconst int[] TEXT4 = int[MAXTEXTLEN](61,62,63,64,65,66,67,68,69,70,54,71,71,72,73,0,74,75,18,75,0,74,55,54,76,77,72,73,71,78,0,79,80,81,82,50,51,83,84,85,86,87,88,89,90,30,91,92,93,94,95,96,97,30,91,89,90,48,49,59,60,0,0,0,0,0,0,0,0,0,0,0,0);\nconst int[] TEXT5 = int[MAXTEXTLEN](44,45,46,47,48,49,50,51,96,97,30,91,89,90,46,47,30,91,98,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);\nconst int[] TEXT6 = int[MAXTEXTLEN](0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);\nconst int[] TEXT7 = int[MAXTEXTLEN](100,101,102,103,65,66,104,0,74,75,18,75,105,106,107,108,109,110,102,111,34,35,112,113,114,115,105,106,116,117,118,119,34,35,38,39,57,58,59,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);\nconst int[] TEXT8 = int[MAXTEXTLEN](120,121,122,123,124,125,126,127,79,80,128,129,130,131,132,133,134,135,136,137,42,43,85,86,67,68,138,139,72,140,70,13,54,76,76,78,0,141,142,143,144,145,146,96,97,30,91,48,49,98,147,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);\nconst int[] TEXT9 = int[MAXTEXTLEN](148,86,149,150,89,90,149,150,151,152,153,154,155,156,89,90,89,90,157,158,159,160,32,161,162,163,30,91,48,49,34,35,65,66,102,103,57,58,59,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);\nconst int[] TEXT10 = int[MAXTEXTLEN](164,165,46,47,166,167,48,49,168,133,169,170,42,43,171,172,42,43,105,106,173,174,89,90,30,91,89,90,48,49,59,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);\nconst int[] TEXT11 = int[MAXTEXTLEN](175,176,105,106,177,178,179,180,102,111,34,35,59,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);\nconst int[] TEXT12 = int[MAXTEXTLEN](65,66,96,97,148,181,105,106,81,82,34,35,59,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);\nconst int[] TEXT13 = int[MAXTEXTLEN](182,183,184,103,30,91,25,22,24,36,37,57,185,89,90,85,86,102,111,34,35,59,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);\nconst int[] TEXT14 = int[MAXTEXTLEN](186,187,188,189,85,86,190,191,48,49,130,192,193,133,194,195,196,197,57,58,59,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);\nconst int[] TEXT15 = int[MAXTEXTLEN](40,41,38,39,32,33,104,0,40,41,38,39,32,33,57,58,59,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);\nconst int[] TEXT16 = int[MAXTEXTLEN](13,13,13,13,13,13,13,13,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);\nconst int[] TEXT17 = int[MAXTEXTLEN](89,90,89,90,128,129,198,199,200,201,128,129,32,161,104,0,202,203,89,90,204,205,32,33,65,206,40,41,89,90,38,39,57,58,59,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);\nconst int[] TEXT18 = int[MAXTEXTLEN](207,208,105,106,81,82,50,51,57,185,89,90,79,80,32,33,104,0,28,29,32,33,209,210,40,41,48,49,40,41,46,47,30,91,96,97,100,101,46,47,57,185,59,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);\nconst int[] TEXT19 = int[MAXTEXTLEN](211,212,213,214,215,216,50,51,65,66,217,218,63,64,57,58,96,97,104,0,219,220,221,222,141,223,149,150,102,111,98,147,65,206,13,13,13,13,13,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);\nconst int[] TEXT20 = int[MAXTEXTLEN](224,0,224,0,224,0,224,0,224,0,224,0,224,0,224,0,224,0,224,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);\nconst int[] TEXT21 = int[MAXTEXTLEN](74,54,225,52,0,226,227,0,75,72,227,52,65,66,228,229,230,231,57,58,32,33,209,210,104,0,81,82,34,35,59,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);\nconst int[] TEXT22 = int[MAXTEXTLEN](232,233,234,235,57,58,59,60,224,0,0,0,40,41,38,39,30,91,236,237,96,97,89,90,38,39,57,58,13,13,13,13,13,13,13,13,13,13,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);\nconst int[] TEXT23 = int[MAXTEXTLEN](139,175,227,175,85,86,238,239,162,163,102,111,34,35,79,80,105,106,240,241,98,147,102,103,85,86,224,0,0,0,18,19,18,18,20,21,22,18,32,161,242,243,96,97,36,37,57,58,59,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);\nconst int[] TEXT24 = int[MAXTEXTLEN](0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);\nconst int[] TEXT25 = int[MAXTEXTLEN](141,142,89,90,149,150,98,80,184,111,30,31,104,0,61,62,63,64,65,66,148,86,148,86,100,101,30,31,57,58,59,60,0,0,244,245,246,247,248,249,250,251,30,91,48,49,98,147,252,253,40,41,224,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);\nconst int[] TEXT26 = int[MAXTEXTLEN](0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);\nconst int[] TEXT27 = int[MAXTEXTLEN](254,52,255,0,52,176,52,55,255,226,53,52,42,43,42,43,42,43,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);\nconst int[] TEXT28 = int[MAXTEXTLEN](44,45,46,47,48,49,50,51,23,52,53,54,55,56,0,77,52,55,52,256,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);\nconst int[] TEXT29 = int[MAXTEXTLEN](257,226,56,54,255,14,0,20,258,70,70,0,259,52,0,52,260,76,70,54,72,53,72,53,140,0,77,226,139,0,138,226,0,225,54,261,52,0,262,69,70,54,71,71,72,73,0,74,75,18,75,0,74,55,54,76,77,72,73,71,262,0,0,0,0,0,0,0,0,0,0,0,0);\nconst int[] TEXT30 = int[MAXTEXTLEN](19,53,263,226,255,256,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);\nconst int[] TEXT31 = int[MAXTEXTLEN](0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);\nconst int[] TEXT32 = int[MAXTEXTLEN](264,72,55,71,138,14,0,70,52,138,258,71,0,71,52,138,0,175,76,0,138,77,52,0,52,53,176,72,55,226,53,225,52,53,138,0,138,226,0,55,175,53,0,74,75,18,75,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);\nconst int[] TEXT33 = int[MAXTEXTLEN](257,255,76,52,0,262,138,139,72,140,70,13,54,76,76,262,0,72,53,138,226,0,255,226,175,55,0,259,55,226,139,71,52,55,258,71,0,54,56,56,55,52,71,71,0,259,54,55,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);\nconst int[] TEXT34 = int[MAXTEXTLEN](265,226,175,0,71,77,226,175,70,56,0,71,52,52,0,54,0,73,226,226,70,0,71,73,55,52,52,53,0,70,72,261,52,0,138,77,72,71,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);\nconst int[] TEXT35 = int[MAXTEXTLEN](75,52,138,258,71,0,71,138,54,55,138,0,139,55,72,138,72,53,140,0,71,226,225,52,0,71,77,54,56,52,55,71,256,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);\nconst int[] TEXT36 = int[MAXTEXTLEN](264,72,55,71,138,14,0,56,52,227,72,53,52,0,175,176,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);\nconst int[] TEXT37 = int[MAXTEXTLEN](22,52,260,138,14,0,139,52,258,70,70,0,225,54,261,52,0,54,0,70,54,56,56,52,55,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);\nconst int[] TEXT38 = int[MAXTEXTLEN](257,77,52,53,14,0,139,52,258,70,70,0,259,52,53,56,0,72,138,0,138,226,0,70,226,226,261,0,70,72,261,52,0,25,22,24,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);\nconst int[] TEXT39 = int[MAXTEXTLEN](22,226,139,14,0,54,53,0,52,53,56,70,52,71,71,70,255,0,71,138,55,52,138,73,77,72,53,140,0,138,175,53,53,52,70,256,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);\nconst int[] TEXT40 = int[MAXTEXTLEN](24,53,56,14,0,139,52,70,70,14,0,175,77,13,13,13,0,255,52,54,77,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);\nconst int[] TEXT41 = int[MAXTEXTLEN](13,13,13,13,13,13,13,13,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);\nconst int[] TEXT42 = int[MAXTEXTLEN](20,0,73,54,53,258,138,0,73,226,225,52,0,175,76,0,139,72,138,77,0,54,53,255,0,140,226,226,56,0,72,56,52,54,71,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);\nconst int[] TEXT43 = int[MAXTEXTLEN](20,258,176,52,0,70,226,71,138,0,138,55,54,73,261,0,226,227,0,139,77,54,138,0,20,0,52,176,52,53,0,139,54,53,138,0,138,226,0,225,54,261,52,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);\nconst int[] TEXT44 = int[MAXTEXTLEN](257,77,52,0,56,52,54,56,70,72,53,52,258,71,0,138,226,225,226,55,55,226,139,14,0,71,226,0,139,77,54,138,0,71,77,226,175,70,56,0,20,0,56,226,13,13,13,266,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);\nconst int[] TEXT45 = int[MAXTEXTLEN](224,0,224,0,224,0,224,0,224,0,224,0,224,0,224,0,224,0,224,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);\nconst int[] TEXT46 = int[MAXTEXTLEN](74,54,225,52,0,226,227,0,75,72,227,52,0,72,71,0,54,139,52,71,226,225,52,14,0,71,226,0,20,258,70,70,0,225,54,261,52,0,256,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);\nconst int[] TEXT47 = int[MAXTEXTLEN](20,138,267,0,71,0,73,226,225,76,70,52,138,52,256,0,20,71,53,258,138,0,72,138,0,259,52,54,175,138,72,227,175,70,13,13,13,266,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);\nconst int[] TEXT48 = int[MAXTEXTLEN](25,226,53,258,138,0,227,226,55,140,52,138,0,138,226,0,71,175,259,225,72,138,0,72,138,0,138,226,0,139,175,227,175,256,0,20,258,225,0,70,226,226,261,72,53,140,0,227,226,55,139,54,55,56,0,138,226,0,18,19,18,18,20,21,22,18,256,256,256,0,0,0,0);\nconst int[] TEXT49 = int[MAXTEXTLEN](0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);\nconst int[] TEXT50 = int[MAXTEXTLEN](24,53,56,0,138,77,54,138,258,71,0,54,70,70,0,227,226,55,0,138,226,56,54,255,256,0,268,52,0,71,175,55,52,0,138,226,0,73,77,52,73,261,0,72,138,0,226,175,138,0,53,52,260,138,0,138,72,225,52,256,0,0,0,0,0,0,0,0,0,0,0,0,0);\nconst int[] TEXT51 = int[MAXTEXTLEN](0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);\nconst int[] TEXT52 = int[MAXTEXTLEN](65,66,96,97,148,181,269,270,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);\nconst int[] TEXT53 = int[MAXTEXTLEN](25,22,24,85,86,65,66,250,251,118,119,40,41,89,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);\nconst int[] TEXT54 = int[MAXTEXTLEN](130,192,193,133,194,195,196,197,269,270,269,270,269,270,269,270,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);\nconst int[] TEXT55 = int[MAXTEXTLEN](207,208,148,86,79,80,168,133,169,170,42,43,200,201,271,272,193,133,273,121,269,270,269,270,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);\nconst int[] TEXT56 = int[MAXTEXTLEN](211,212,215,216,0,23,54,255,225,54,55,73,77,72,53,140,0,188,189,274,275,276,277,278,279,0,75,43,18,255,71,138,52,225,0,280,281,282,283,79,80,284,285,286,287,0,264,55,54,73,138,54,70,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);\nconst int[] TEXT57 = int[MAXTEXTLEN](69,226,53,139,54,255,258,71,0,74,54,225,52,0,226,227,0,75,72,227,52,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);\nconst int[] TEXT58 = int[MAXTEXTLEN](76,55,52,73,72,71,72,226,53,0,77,72,140,77,76,0,227,70,226,54,138,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);\nconst int[] TEXT59 = int[MAXTEXTLEN](175,53,72,227,226,55,225,0,71,54,225,76,70,52,55,3,25,0,259,54,73,261,259,175,227,227,52,55,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);\nconst int[] TEXT60 = int[MAXTEXTLEN](226,175,138,0,176,52,73,5,0,226,175,138,69,226,70,226,55,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);\nconst int[] TEXT61 = int[MAXTEXTLEN](288,56,52,227,72,53,52,0,257,15,260,16,0,72,53,138,15,138,52,260,52,70,264,52,138,73,77,15,259,54,73,261,259,175,227,227,52,55,14,72,176,52,73,3,15,140,70,289,264,55,54,140,69,226,226,55,56,13,260,255,16,290,260,14,1,16,13,55,290,13,6,16,0);\nconst int[] TEXT62 = int[MAXTEXTLEN](176,226,72,56,0,225,54,72,53,15,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);\nconst int[] TEXT63 = int[MAXTEXTLEN](291,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);\nconst int[] TEXT64 = int[MAXTEXTLEN](0,0,72,53,138,0,73,292,257,15,1,16,14,71,292,43,73,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);\nconst int[] TEXT65 = int[MAXTEXTLEN](0,0,227,226,55,15,72,53,138,0,72,292,1,17,72,293,10,17,72,290,290,16,71,290,292,257,15,72,176,52,73,3,15,72,294,4,14,72,12,4,16,43,2,16,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);\nconst int[] TEXT66 = int[MAXTEXTLEN](0,0,226,175,138,69,226,70,226,55,292,176,52,73,5,15,71,292,292,4,295,295,15,73,292,292,2,296,296,71,292,292,3,16,266,2,11,1,16,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);\nconst int[] TEXT67 = int[MAXTEXTLEN](297,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);\nconst int[] TEXT68 = int[MAXTEXTLEN](0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);\nint[] TEXTLEN = int[TEXTCOUNT](43,1,15,19,62,21,1,41,52,41,33,15,15,24,23,19,10,37,45,41,21,33,40,51,1,55,1,19,21,62,7,1,49,50,40,34,18,27,38,37,23,10,37,45,49,21,40,39,70,1,61,1,9,16,17,25,54,24,23,30,19,73,12,2,19,46,41,2,0);\nint[MAXTEXTLEN] getText(int i)\n{\n    int[MAXTEXTLEN] t;\n    if(i == 0)\n        t = TEXT0;\n    else if(i == 1)\n        t = TEXT1;\n    else if(i == 2)\n        t = TEXT2;\n    else if(i == 3)\n        t = TEXT3;\n    else if(i == 4)\n        t = TEXT4;\n    else if(i == 5)\n        t = TEXT5;\n    else if(i == 6)\n        t = TEXT6;\n    else if(i == 7)\n        t = TEXT7;\n    else if(i == 8)\n        t = TEXT8;\n    else if(i == 9)\n        t = TEXT9;\n    else if(i == 10)\n        t = TEXT10;\n    else if(i == 11)\n        t = TEXT11;\n    else if(i == 12)\n        t = TEXT12;\n    else if(i == 13)\n        t = TEXT13;\n    else if(i == 14)\n        t = TEXT14;\n    else if(i == 15)\n        t = TEXT15;\n    else if(i == 16)\n        t = TEXT16;\n    else if(i == 17)\n        t = TEXT17;\n    else if(i == 18)\n        t = TEXT18;\n    else if(i == 19)\n        t = TEXT19;\n    else if(i == 20)\n        t = TEXT20;\n    else if(i == 21)\n        t = TEXT21;\n    else if(i == 22)\n        t = TEXT22;\n    else if(i == 23)\n        t = TEXT23;\n    else if(i == 24)\n        t = TEXT24;\n    else if(i == 25)\n        t = TEXT25;\n    else if(i == 26)\n        t = TEXT26;\n    else if(i == 27)\n        t = TEXT27;\n    else if(i == 28)\n        t = TEXT28;\n    else if(i == 29)\n        t = TEXT29;\n    else if(i == 30)\n        t = TEXT30;\n    else if(i == 31)\n        t = TEXT31;\n    else if(i == 32)\n        t = TEXT32;\n    else if(i == 33)\n        t = TEXT33;\n    else if(i == 34)\n        t = TEXT34;\n    else if(i == 35)\n        t = TEXT35;\n    else if(i == 36)\n        t = TEXT36;\n    else if(i == 37)\n        t = TEXT37;\n    else if(i == 38)\n        t = TEXT38;\n    else if(i == 39)\n        t = TEXT39;\n    else if(i == 40)\n        t = TEXT40;\n    else if(i == 41)\n        t = TEXT41;\n    else if(i == 42)\n        t = TEXT42;\n    else if(i == 43)\n        t = TEXT43;\n    else if(i == 44)\n        t = TEXT44;\n    else if(i == 45)\n        t = TEXT45;\n    else if(i == 46)\n        t = TEXT46;\n    else if(i == 47)\n        t = TEXT47;\n    else if(i == 48)\n        t = TEXT48;\n    else if(i == 49)\n        t = TEXT49;\n    else if(i == 50)\n        t = TEXT50;\n    else if(i == 51)\n        t = TEXT51;\n    else if(i == 52)\n        t = TEXT52;\n    else if(i == 53)\n        t = TEXT53;\n    else if(i == 54)\n        t = TEXT54;\n    else if(i == 55)\n        t = TEXT55;\n    else if(i == 56)\n        t = TEXT56;\n    else if(i == 57)\n        t = TEXT57;\n    else if(i == 58)\n        t = TEXT58;\n    else if(i == 59)\n        t = TEXT59;\n    else if(i == 60)\n        t = TEXT60;\n    else if(i == 61)\n        t = TEXT61;\n    else if(i == 62)\n        t = TEXT62;\n    else if(i == 63)\n        t = TEXT63;\n    else if(i == 64)\n        t = TEXT64;\n    else if(i == 65)\n        t = TEXT65;\n    else if(i == 66)\n        t = TEXT66;\n    else if(i == 67)\n        t = TEXT67;\n    else if(i == 68)\n        t = TEXT68;\n    return t;\n}\n\n#define FRAME int(frame)\n#define rep(i,n) for(int i=0;i<n;i++)\n#define remap(x,a,b,c,d) ((((x)-(a))/((b)-(a)))*((d)-(c))+(c))\n#define remapc(x,a,b,c,d) clamp(remap(x,a,b,c,d),min(c,d),max(c,d))\n#define uvmap(x,a,b) remap(x,a,b,vec2(0),vec2(1))\n#define uvmapc(x,a,b) remapc(x,a,b,vec2(0),vec2(1))\n#define sat(x) min(max(x,0.),1.)\n#define saturate(x) min(max(x,0.),1.)\n#define linearstep(a, b, x) min(max(((x) - (a)) / ((b) - (a)), 0.), 1.)\n#define norm(x) normalize(x)\n#define SPAN 6.\n\nconst float PI = acos(-1.);\nconst float TAU = PI * 2.;\nconst float MAXTIME = SPAN * 25.;\n\nvec2 fc,res,asp,asp2;\nint PH;\nfloat FT,T,TIME;\n\nvec2 orbit(float a)\n{\n    return vec2(cos(a),sin(a));\n}\nvec2 pmod(vec2 p,float d)\n{\n    return orbit(mod(atan(p.y,p.x),TAU / d) - PI / d) * length(p);\n}\nfloat gauss(vec2 p,float s)\n{\n    return exp(-dot(p,p) / (2. * s * s)) / (TAU * s * s);\n}\nfloat box(vec2 p,vec2 b)\n{\n    vec2 d = abs(p) - b;\n    return length(max(d,.0)) + min(max(d.x,d.y),.0);\n}\nbool inuv(vec2 p)\n{\n    return all(lessThanEqual(vec2(0),p)) && all(lessThan(p,vec2(1)));\n}\nmat2 rot(float a)\n{\n    vec2 p = orbit(a);\n    return mat2(p.x,p.y,-p.y,p.x);\n}\nfloat seg(vec2 p,vec2 a,vec2 b)\n{\n    vec2 pa = p - a,ba = b - a;\n    return length(pa - ba * sat(dot(pa,ba) / dot(ba,ba)));\n}\nfloat box(vec3 p,vec3 b)\n{\n    vec3 q = abs(p) - b;\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\nvec3 pcg3(vec3 x)\n{\n    uvec3 v = floatBitsToUint(x);\n    v = v * 1664525u + 1013904223u;\n    v.x += v.y * v.z;\n    v.y += v.z * v.x;\n    v.z += v.x * v.y;\n    v ^= v >> 16u;\n    v.x += v.y * v.z;\n    v.y += v.z * v.x;\n    v.z += v.x * v.y;\n    return vec3(v) / float(0xffffffffu);\n}\nfloat dot2(vec2 v)\n{\n    return dot(v,v);\n}\nfloat cross2(vec2 a,vec2 b)\n{\n    return a.x * b.y - a.y * b.x;\n}\nvec3 hex2rgb(int hex)\n{\n    return vec3((hex >> 16) & 0xff,(hex >> 8) & 0xff,hex & 0xff) / 255.0;\n}\nmat3 bnt(vec3 t)\n{\n    vec3 b,n = vec3(0,1,0);\n    t = norm(t);\n    b = norm(cross(n,t));\n    n = norm(cross(t,b));\n    return mat3(b,n,t);\n}\nvec3 cyc(vec3 p)\n{\n    vec3 s = vec3(1,2,3);\n    vec4 n = vec4(0);\n    mat3 m = bnt(s);\n    float f = 1.5;\n    rep(i,8)\n    {\n        p += sin(p.yzx);\n        n += vec4(cross(cos(p),sin(p.zxy)),1);\n        p *= m * f;\n    }\n\n    return n.xyz / n.w;\n}\nvec3 plane(vec3 ro,vec3 rd,vec3 pd,float w)\n{\n    pd = norm(pd);\n    float l = -(dot(ro,pd) - w) / dot(rd,pd);\n    vec3 rp = ro + rd * l;\n    mat3 m = bnt(pd);\n    vec2 uv = vec2(dot(rp,m[0]),dot(rp,m[1]));\n    return vec3(uv,l < 0. ? 1e5 : l);\n}\nfloat printHalf(vec2 p,int t)\n{\n    ivec2 i = ivec2(p * vec2(4,8));\n    return float(inuv(p) && ((HEX[t] >> (i.x + i.y * 4)) & 1u) == 1u);\n}\n// https://www.shadertoy.com/view/MlKcDD\nfloat sdBezier(in vec2 pos,in vec2 A,in vec2 B,in vec2 C,out vec2 outQ)\n{\n    vec2 a = B - A;\n    vec2 b = A - 2.0 * B + C;\n    vec2 c = a * 2.0;\n    vec2 d = A - pos;\n    float kk = 1.0 / dot(b,b);\n    float kx = kk * dot(a,b);\n    float ky = kk * (2.0 * dot(a,a) + dot(d,b)) / 3.0;\n    float kz = kk * dot(d,a);\n    float res = 0.0;\n    float sgn = 0.0;\n    float p = ky - kx * kx;\n    float q = kx * (2.0 * kx * kx - 3.0 * ky) + kz;\n    float p3 = p * p * p;\n    float q2 = q * q;\n    float h = q2 + 4.0 * p3;\n    if(h >= 0.0)\n    {\n        h = sqrt(h);\n        vec2 x = (vec2(h,-h) - q) / 2.0;\n        if(abs(p) < 0.001)\n        {\n            float k = p3 / q;\n            x = vec2(k,-k - q);\n        }\n        vec2 uv = sign(x) * pow(abs(x),vec2(1.0 / 3.0));\n        float t = uv.x + uv.y;\n        t -= (t * (t * t + 3.0 * p) + q) / (3.0 * t * t + 3.0 * p);\n        t = clamp(t - kx,0.0,1.0);\n        vec2 w = d + (c + b * t) * t;\n        outQ = w + pos;\n        res = dot2(w);\n        sgn = cross2(c + 2.0 * b * t,w);\n    }\n    else\n    {   // 3 roots\n        float z = sqrt(-p);\n        float v = acos(q / (p * z * 2.0)) / 3.0;\n        float m = cos(v);\n        float n = sin(v);\n        n *= sqrt(3.0);\n        vec3 t = clamp(vec3(m + m,-n - m,n - m) * z - kx,0.0,1.0);\n        vec2 qx = d + (c + b * t.x) * t.x;\n        float dx = dot2(qx),sx = cross2(a + b * t.x,qx);\n        vec2 qy = d + (c + b * t.y) * t.y;\n        float dy = dot2(qy),sy = cross2(a + b * t.y,qy);\n        if(dx < dy)\n        {\n            res = dx;\n            sgn = sx;\n            outQ = qx + pos;\n        }\n        else\n        {\n            res = dy;\n            sgn = sy;\n            outQ = qy + pos;\n        }\n    }\n\n    return sqrt(res) * (sgn < .0 ? -1. : 1.);\n}\nfloat sdTri(vec2 p,float r)\n{\n    const float k = sqrt(3.0);\n    p.x = abs(p.x) - r;\n    p.y = p.y + r / k;\n    if(p.x + k * p.y > 0.0)\n        p = vec2(p.x - k * p.y,-k * p.x - p.y) / 2.0;\n    p.x -= clamp(p.x,-2.0 * r,0.0);\n    return -length(p) * sign(p.y);\n}\n\nvec4 start(vec2 suv,float t)\n{\n    vec4 c = vec4(0);\n    c = vec4(vec3(0),.5);\n    float im = smoothstep(.0,.1,t) * smoothstep(.3,.1,t);\n    c = mix(c,vec4(vec3(im),1),step(length(suv),.8) * .5);\n    vec2 auv = abs(suv);\n    vec2 ruv = vec2(length(suv),0) * rot(mod(atan(suv.y,suv.x),TAU / 3.) - PI / 3.);\n    float d = mix(ruv.x - .2,box(auv - vec2(.2,0),vec2(.05,.4)),smoothstep(.0,.2,t));\n    c = mix(c,vec4(1),step(d,.0));\n    c.a *= smoothstep(.8,.6,t);\n    return c;\n}\nvec4 stop(vec2 suv,float t)\n{\n    vec4 c = vec4(0);\n    c = vec4(vec3(0),.5);\n    float im = smoothstep(.0,.1,t) * smoothstep(.3,.1,t);\n    c = mix(c,vec4(vec3(im),1),step(length(suv),.8) * .5);\n    vec2 auv = abs(suv);\n    float d = box(auv - vec2(.2,0),vec2(.05,.4));\n    c = mix(c,vec4(1),step(d,.0));\n    c.a *= smoothstep(.0,.1,t);\n    return c;\n}\n\nint printText(vec2 _auv,int _l,int _gl,int[MAXTEXTLEN] _text)\n{\n    ivec2 _cuv = ivec2(floor(_auv * vec2(4 * _gl) - vec2(2 * _gl - 2 * _l,float(_gl) * .36 - 4.)));\n    ivec2 _fuv = _cuv % ivec2(4,8);\n    return int((((HEX[_text[(_cuv.x / 4) % _l]] >> (_fuv.x + _fuv.y * 4)) & 1u) == 1u) && (0 <= _cuv.y && _cuv.y < 8 && 0 <= _cuv.x && _cuv.x < 4 * _l));\n}\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"#define F_DEF 0\n#define F_SAD 1\n#define F_SLP 2\n#define F_HIG 3\nvec4 renard(vec2 suv,int ft)\n{\n    float w = .1;\n    float d = 1e9;\n    vec2 p = vec2(asp.x - .5,.2),q = vec2(asp.x,-.8),f = vec2(.5,.1);\n    vec2 m = (mouse * 2. - 1.) * asp;\n    p = mix(q,m,.75) + cyc(vec3(1,2,T * .02)).xy * .3;\n    if((TIME - SPAN < .0) || (MAXTIME <= TIME - SPAN))\n        p = vec2(.5,-.2);\n    vec2 A,B,C,nv0,nv1;\n    A = p;\n    C = (p + q) * .5;\n    B = A + f;\n    d = min(d,abs(sdBezier(suv,A,B,C,nv0)));\n    A = C;\n    C = q;\n    B = C - f;\n    d = min(d,abs(sdBezier(suv,A,B,C,nv1)));\n    d -= w;\n    vec2 auv = suv - p;\n    vec2 an = vec2(sin(T * 2.),cos(T * 2.)) * w * .1;\n    float a = atan(f.y,f.x);\n    d = min(d,sdTri((auv * rot(a) - vec2(0,w * 1.5 + an.x)) * rot(ft == F_HIG ? T * PI : .0),w * .4));\n    d = min(d,sdTri((auv * rot(a) - vec2(w * 1.5,w * 1.5 + an.y)) * rot(ft == F_HIG ? T * PI + PI : .0),w * .4));\n    // body+ear\n    vec3 bc = vec3(1);\n    if(ft == F_SAD)\n        bc = vec3(.5,.8,1);\n    else if(ft == F_SLP)\n        bc = vec3(.5);\n    else if(ft == F_HIG)\n        bc = .5 + .5 * cos(TAU * (vec3(0,1,2) / 3. + T + dot(nv0,vec2(2))));\n    vec4 c = vec4(bc,step(d,.0));\n    c.rgb *= c.a;\n    c = mix(c,vec4(vec3(0),1),smoothstep(.01,.01 - .005,abs(d)));\n    auv -= vec2(.5) * w;\n    d = length(auv) - w * .25;\n    if(ft == F_SAD)\n    {\n        d = min(d,length(vec2(auv.x,mod(auv.y + T * w,.4 * w) - .2 * w)) - .05 * w);\n        d = max(d,auv.y);\n    }\n    else if(ft == F_SLP)\n    {\n        d = box(auv,vec2(.3,.05) * w);\n    }\n    else if(ft == F_HIG)\n    {\n        d = max(d,-mod(length(auv) - T * w,w * .4) + w * .2);\n    }\n    c = mix(c,vec4(vec3(0),c.a),smoothstep(.01,.0,d));\n    // c.a *= step(.0,box(auv + vec2(1.25,1) * w,vec2(.5,.2*(FT<SPAN*.5?sin(FT*TAU*4.)*.5+.5:.0))*w));// mouse\n    vec2 ruv = (auv - vec2(0,3. * w)) / w * vec2(2,1);\n    ruv.y += sin(floor(ruv.x) + T * PI) * .2;\n    vec2 iuv = floor(ruv) + vec2(3,0),fuv = (fract(ruv) - .5) * 1.5 + .5;\n    float ch = printHalf(fuv,int[](23,19,22,24,23,25)[int(iuv.x) % 6]) * float(inuv(iuv / vec2(6,1)));\n    // heiro\n    d = abs(length((auv - vec2(0,2. * w + sin(T * 2.) * w * .3)) * vec2(.5,3)) - w) - w * .2;\n    c = mix(c,vec4(bc,1),step(d,.0));\n    c = mix(c,vec4(vec3(0),1),smoothstep(.01,.01 - .005,abs(d)));\n\n    c = mix(c,vec4(1),ch);\n    c.rgb *= c.a;\n    return c;\n}\n\nvec4 ov(vec2 uv)\n{\n    vec4 c = vec4(0);\n    vec2 suv = (uv * 2. - 1.) * asp,auv = uv * asp2;\n    vec2 wuv = auv - clamp(auv,vec2(.03),vec2(.97,.14));\n    // renard\n    int fi = F_DEF;\n    if(PH == 1 || PH == 16)\n        fi = F_SLP;\n    else if(PH == 2 || PH == 22 || PH == 23 || (PH == 24 && FT < SPAN * .5))\n        fi = F_HIG;\n    else if(PH == 17 || PH == 18 || PH == 19)\n        fi = F_SAD;\n    c = renard(suv,fi);\n    // TODO:make smoother\n    // window\n    float d = abs(auv.y - .1) - .1 + .03;\n    c = mix(c,vec4(vec3(0),1),sat(step(max(-d,auv.y - .2),.0) + step(d,.0) * .5) * smoothstep(.0,.3,1. - 2. * abs(auv.x - .5)));\n    // texts\n\n    int ph,mc,l,gl,ch,ch0,ch1;\n    float wb = .1,pu = 5.;\n    // ja\n    ph = (PH) % 27;\n    int[MAXTEXTLEN] tx = getText(ph);\n    mc = TEXTLEN[ph];\n    l = int(linearstep(.0,SPAN * .5,FT) * float(mc));\n    gl = max(36,l + 4);\n    ch0 = printText((auv - (vec2(0,pu) + wb) / vec2(gl * 4)),l,gl,tx);\n    ch1 = printText((auv - (vec2(0,pu) - wb) / vec2(gl * 4)),l,gl,tx);\n    ch = ch0 + ch1;\n    c = ch == 1 ? vec4(vec3(1),1) : ch == 2 ? vec4(vec3(1,0,0),1) : c;\n    // en\n    ph = (PH) % 27 + 25;\n    tx = getText(ph);\n    mc = TEXTLEN[ph];\n    l = int(linearstep(.0,SPAN * .5,FT) * float(mc));\n    gl = max(54,l + 4);\n    ch0 = printText((auv - (vec2(0,-pu) + wb) / vec2(gl * 4)),l,gl,tx);\n    ch1 = printText((auv - (vec2(0,-pu) - wb) / vec2(gl * 4)),l,gl,tx);\n    ch = ch0 + ch1;\n    c = ch == 1 ? vec4(vec3(0),1) : ch == 2 ? vec4(vec3(1,1,0),1) : c;\n\n    c.a = sat(c.a);\n    // transition\n    if(PH == 6 || PH == 24)\n    {\n        vec2 ruv = suv * 4. * rot(-.4);\n\n        int iy = int(floor(ruv.y)) + 1024;\n        ruv.x += sign(float(iy % 2) - .5) * 48. * (pow(smoothstep(.0,SPAN / 3.,FT),.2) + pow(smoothstep(SPAN * 2. / 3.,SPAN,FT),.2) - 1.);\n        vec2 iuv = floor(ruv),fuv = fract(ruv);\n        vec3 col = mix(vec3(242,162,12) / 255.,vec3(223,242,194) / 255.,float(iy % 2));\n        col *= printHalf(fuv,int[10](18,19,18,18,20,21,22,18,0,0)[int(iuv.x + 1024.) % 10]);\n        float a = float(ruv.x == clamp(ruv.x,-20.,20.));\n        c = mix(c,vec4(col,1),a);\n    }\n    // bottom ui\n    vec2 ui = uvmap(auv,vec2(.05,0),vec2(.1,.05));\n    c = mix(c,vec4(1),step(pmod(ui - .5,3.).x - .15,.0));\n    ui.x -= 1.;\n    c = mix(c,vec4(1),step(min(pmod(ui - .5,3.).x - .15,box(ui - vec2(.85,.5),vec2(.05,.26))),.0));\n    ui = ui * 4. - vec2(6,1.3);\n    // T bar\n    float t = min(MAXTIME,T);\n    int nse = int(t) % 60,nmi = int(t) / 60,mse = int(MAXTIME) % 60,mmi = int(MAXTIME) / 60;\n    c = mix(c,vec4(1),float(inuv(ui / vec2(11,1))) * printHalf(fract(ui),(int[]((nmi / 10) % 10,nmi % 10,10,(nse / 10) % 10,nse % 10,11,(mmi / 10) % 10,mmi % 10,10,(mse / 10) % 10,mse % 10)[int(ui.x) % 11] + 1)));\n    c = mix(c,vec4(1),step(abs(auv.y - .05),.002) * .5);\n    c = mix(c,vec4(vec3(1,0,0),1),step(abs(auv.y - .05),.002) * step(auv.x,T / MAXTIME));\n    return c;\n}\n\nvoid mainImage(out vec4 O,vec2 F)\n{\n    float fnyan = mod(time,MAXTIME + SPAN * 3.);\n    TIME = (MAXTIME + SPAN * 2.) < fnyan ? mix(MAXTIME + SPAN * 2.,.0,linearstep(MAXTIME + SPAN * 2.,MAXTIME + SPAN * 3.,fnyan)) : fnyan;\n    T = clamp(TIME - SPAN,.0,MAXTIME);\n    PH = int(floor(T / SPAN)) + 1;\n    FT = mod(T,SPAN);\n    fc = gl_FragCoord.xy,res = resolution,asp = res / min(res.x,res.y),asp2 = res / max(res.x,res.y);\n    vec2 uv = fc / res,suv = (uv * 2. - 1.) * asp;\n    vec3 c = texture(iChannel0,uv).rgb;\n    vec4 ov = ov(uv);\n    c = mix(c,ov.rgb,ov.a);\n    if(TIME - SPAN < .0)\n    {\n        // さむね\n        c = vec3(0);\n        vec4 s = renard(suv,F_HIG);\n        c = mix(c,s.rgb,s.a);\n        int cl = 12;\n        vec2 ruv = vec2(uv.x,1. - uv.y - .03) * asp2 * vec2(cl) * vec2(1,.5);\n        vec2 iuv = floor(ruv),fuv = fract(ruv);\n        fuv = vec2(fuv.x,1. - fuv.y);\n        int ch = TEXT0[31 + int(iuv.x) % cl];\n        c = mix(c,mix(vec3(0),vec3(2,0,0),smoothstep(.0,1.,fuv.y)),printHalf(fuv,ch) * float(inuv(ruv / vec2(cl,1))));\n        cl = 33;\n        ruv = vec2(uv.x,uv.y - .03) * asp2 * vec2(cl) * vec2(1,.5);\n        iuv = floor(ruv),fuv = fract(ruv);\n        ch = TEXT4[6 + int(iuv.x) % cl];\n        c = mix(c,mix(vec3(0),vec3(2,0,0),smoothstep(.0,1.,fuv.y)),printHalf(fuv,ch) * float(inuv(ruv / vec2(cl,1))));\n        // start\n        s = start(suv * 5.,linearstep(SPAN - 3.,SPAN,TIME));\n        c = mix(c,s.rgb,s.a);\n    }\n    if(MAXTIME <= TIME - SPAN)\n    {\n        // stop\n        vec4 s = stop(suv * 5.,linearstep(.0,3.,TIME - SPAN - MAXTIME));\n        c = mix(c,s.rgb,s.a);\n    }\n    O = vec4(c,1);\n}","name":"Buffer B","description":"","type":"buffer"}]}