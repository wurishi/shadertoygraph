{"ver":"0.1","info":{"id":"tsK3RK","date":"1570580533","viewed":82,"name":"Raymarch for practice ","username":"specialsaucewc","description":"Learning how to raymarch in shaders.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarch","learning"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define SURFACE_DIST .06\n#define MAX_DIST 100.\n#define CAMERA_POS vec3(0, 1, 0)\n\n#define SPHERE_POS vec4(0, 1.2, 6, 1)\n#define MATERIAL vec3(.12, .5, .99)\n\n#define LIGHT_COLOR vec3(1, 0, 0)\n#define LIGHT_RAD .01\n#define LIGHT_POS vec3(0, 3, 5)\n#define LIGHT_SPEED 1.5\n\nvec4 GetLightPos() {\n    vec3 lightPos = LIGHT_POS;\n    float speed = iTime * LIGHT_SPEED;\n    lightPos.xz += vec2(sin(speed), cos(speed))*3.;\n    lightPos.y += sin(speed/4.)*2.;\n    return vec4(lightPos, LIGHT_RAD);\n}\n\nvec3 GetLightColor() {\n    return 0.5 + 0.5*cos(iTime+LIGHT_COLOR.xyz+vec3(0,2,4));\n}\n\nfloat GetDist (vec3 p, bool shadow) {\n    vec4 sphere = SPHERE_POS;\n    sphere.y += sin(iTime)*.5 + .5;\n    vec4 light = GetLightPos();\n    float dS = length(p - sphere.xyz)-sphere.w;\n    float dL = length(p - light.xyz)-light.w;\n    float dP = p.y;\n    float d = min(dS, shadow ? dP : min(dP, dL));\n    return d;\n}\n\nfloat RayMarch (vec3 ro, vec3 rd, bool shadow) {\n    float dO = 0.;\n    for (int i=0; i<MAX_STEPS; i++) {\n        vec3 p = ro+dO*rd;\n        float ds = GetDist(p, shadow);\n        dO += ds;\n        if (ds < SURFACE_DIST || dO > MAX_DIST) break;\n    }\n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    float d = GetDist(p, false);\n    vec2 e = vec2(SURFACE_DIST, 0.);\n    vec3 n = d - vec3(\n        GetDist(p - e.xyy, false),\n        GetDist(p - e.yxy, false),\n        GetDist(p - e.yyx, false));\n    return normalize(n);\n}\n\nvec3 GetLight(vec3 o, vec3 p) {\n    vec3 lightPos = vec3(GetLightPos().xyz);\n    vec3 l = normalize(lightPos - p);\n    vec3 v = normalize(p - o);\n    vec3 n = GetNormal(p);\n    vec3 r = reflect(l, n);\n    \n    float dif = clamp(dot(n, l), 0., 1.);\n    float spec = pow(max(dot(v, r), 0.), 32.);\n    vec3 wVal = vec3(1., dif, spec) * MATERIAL;\n    float s = wVal.y + wVal.z;\n    \n    float d = RayMarch(p+n*SURFACE_DIST*2., l, true);\n    if (d < length(lightPos-p)) {\n        s *= .1;\n    }\n    vec3 lCol = GetLightColor();\n    \n    return (wVal.x + s) * lCol;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -.5 to .5)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    \n    vec3 col = vec3(0.);\n    \n    vec3 ro = CAMERA_POS;\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1));\n    float d = RayMarch(ro, rd, false);\n    \n    if (d < MAX_DIST) {\n    \tvec3 p = ro + d * rd;\n        vec3 l = GetLightPos().xyz;\n        if (length(p - l) < 2.*SURFACE_DIST) {\n            col = GetLightColor();\n        }\n        else {\n    \t\tcol = GetLight(ro, p);\n        }\n    }\n    else {\n        col = vec3(0.);\n    }\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}