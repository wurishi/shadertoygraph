{"ver":"0.1","info":{"id":"fsV3R3","date":"1631891933","viewed":465,"name":"Single-pass gaussian blur opti","username":"CarlBateman","description":"Optimised version of https://www.shadertoy.com/view/4tSyzy\nStill single pass but somewhat optimised.","likes":4,"published":1,"flags":0,"usePreview":1,"tags":["2d","blur","filter","gaussian","pass","single"],"hasliked":0,"parentid":"4tSyzy","parentname":"Single-pass gaussian blur"},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float pi = radians(180.);\nconst int samples = 35;\nconst float sigma = float(samples) * 0.25;\n\n// we don't need to recalculate these every time\nconst float sigma2 = 2. * sigma * sigma;\nconst float pisigma2 = pi * sigma2;\n\nfloat gaussian(vec2 i) {\n    float top = exp(-((i.x * i.x) + (i.y * i.y)) / sigma2);\n    float bot = pisigma2;\n    return top / bot;\n}\n\nvec3 blur(sampler2D sp, vec2 uv, vec2 scale) {\n    vec2 offset;\n    float weight = gaussian(offset);\n    vec3 col = texture(sp, uv).rgb * weight;\n    float accum = weight;\n    \n    // we need to use x <= samples / 2\n    // to ensure symmetry\n    for (int x = 0; x <= samples / 2; ++x) {\n        for (int y = 1; y <= samples / 2; ++y) {\n            offset = vec2(x, y);\n            weight = gaussian(offset);\n            col += texture(sp, uv + scale * offset).rgb * weight;\n            accum += weight;\n\n            // since values are symmetrical\n            // we can re-use the \"weight\" value, saving 3 function calls\n\n            col += texture(sp, uv - scale * offset).rgb * weight;\n            accum += weight;\n\n            offset = vec2(-y, x);\n            col += texture(sp, uv + scale * offset).rgb * weight;\n            accum += weight;\n\n            col += texture(sp, uv - scale * offset).rgb * weight;\n            accum += weight;\n        }\n    }\n    \n    return col / accum;\n}\n\nvoid mainImage(out vec4 color, vec2 coord) {\n    vec2 ps = vec2(1.0) / iResolution.xy;\n    vec2 uv = coord * ps;\n    \n    color.rgb = blur(iChannel0, uv, ps);\n    color.a = 1.0;\n}\n","name":"Image","description":"","type":"image"}]}