{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"// ray marching\nconst int max_iterations = 260;\nconst float eps = 0.001;\nconst float clip_far = 10000.0;\n\n// math\nconst float PI = 3.14159265359;\nconst float DEG_TO_RAD = PI / 180.0;\n\nconst vec3 fog = vec3(0.4, 0.5, 1.0);\n\n\n\nfloat dist_box( vec3 pos, vec3 size, float radius ) {\n\t\n\tfloat radFac = 1.1 + sin(iTime) * 0.9;\n\tradius = radFac;\n\tsize-=radFac;\n\t\n\tpos = mod(pos,vec3(8.0)) - vec3(4.0);\n\t\n\treturn length( max( abs( pos ) - size, 0.0 ) ) - radius;\n}\n\n// get distance in the world\nfloat dist_field( vec3 pos ) {\n\treturn  dist_box( pos, vec3( 2.0 ), 0.4 );\n}\n\n// phong shading\nvec3 shading( vec3 v, vec3 n, vec3 eye, float distance, vec2 uv, float steps ) {\n\t// ...add lights here...\n\t\n\tfloat shininess = 122.0;\n\t\n\tvec3 final = vec3( 0.0 );\n\t\n\tvec3 ev = normalize( v - eye );\n\tvec3 ref_ev = reflect( ev, n );\n\t\n\t{\n\t\tvec3 light_pos   = vec3( 20.0, 20.0, 20.0 );\n\t\tvec3 light_color = vec3( 0.3, 0.7, 0.7 );\n\t\n\t\tvec3 vl = normalize( light_pos - v );\n\t\n\t\tfloat diffuse  = max( 0.0, dot( vl, n ) );\n\t\tfloat specular = max( 0.0, dot( vl, ref_ev ) );\n\t\tspecular = pow( specular, shininess );\n\t\t\n\t\tfinal += light_color * ( diffuse + specular ); \n\t}\n\t\n\t{\n\t\tvec3 light_pos   = vec3( -20.0, -2.0, -20.0 );\n\t\tvec3 light_color = vec3( 0.3, 0.4, 0.7 );\n\t\n\t\tvec3 vl = normalize( light_pos - v );\n\t\n\t\tfloat diffuse  = max( 0.0, dot( vl, n ) );\n\t\tfloat specular = max( 0.0, dot( vl, ref_ev ) );\n\t\tspecular = pow( specular, shininess );\n\t\t\n\t\tfinal += light_color * ( diffuse + specular ); \n\t}\n\n\tfloat fogFactor = min(1.0, 1.0 - 10.0 / distance);\n\t\n\tif(uv.x < 0.5)\n\t\treturn final + (fog - final) * fogFactor;\n\telse if(uv.y < 0.5)\n\t\treturn vec3(n);\n\t\telse\n\t\treturn vec3(1.0 - steps);\n}\n\n// get gradient in the world\nvec3 gradient( vec3 pos ) {\n\tconst vec3 dx = vec3( eps, 0.0, 0.0 );\n\tconst vec3 dy = vec3( 0.0, eps, 0.0 );\n\tconst vec3 dz = vec3( 0.0, 0.0, eps );\n\treturn normalize (\n\t\tvec3(\n\t\t\tdist_field( pos + dx ) - dist_field( pos - dx ),\n\t\t\tdist_field( pos + dy ) - dist_field( pos - dy ),\n\t\t\tdist_field( pos + dz ) - dist_field( pos - dz )\t\t\t\n\t\t)\n\t);\n}\n\n// ray marching\nfloat ray_marching( vec3 origin, vec3 dir, float start, float end, out float steps ) {\n\tfloat depth = start;\n\tsteps = 0.0;\n\tfor ( int i = 0; i < max_iterations; i++ ) {\n\t\tfloat dist = dist_field( origin + dir * depth );\n\t\tsteps += 1.0 / float(max_iterations);\n\t\tif ( dist < eps ) {\n\t\t\treturn depth;\n\t\t}\n\t\tdepth += dist;\n\t\tif ( depth >= end) {\n\t\t\treturn end;\n\t\t}\n\t\t\n\t}\n\treturn end;\n}\n\n// get ray direction\nvec3 ray_dir( float fov, vec2 size, vec2 pos ) {\n\tvec2 xy = pos - size * 0.5;\n\n\tfloat cot_half_fov = tan( ( 90.0 - fov * 0.5 ) * DEG_TO_RAD );\t\n\tfloat z = size.y * 0.5 * cot_half_fov;\n\t\n\treturn normalize( vec3( xy, -z ) );\n}\n\n// camera rotation : pitch, yaw\nmat3 rotationXY( vec2 angle ) {\n\tvec2 c = cos( angle );\n\tvec2 s = sin( angle );\n\t\n\treturn mat3(\n\t\tc.y      ,  0.0, -s.y,\n\t\ts.y * s.x,  c.x,  c.y * s.x,\n\t\ts.y * c.x, -s.x,  c.y * c.x\n\t);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec3 col = vec3(0.0);\n\t\n\t// default ray dir\n\tvec3 dir = ray_dir( 45.0, iResolution.xy, fragCoord.xy );\n\t\n\t// default ray origin\n\tvec3 eye = vec3( 0.0, 0.0, iTime );\n\t\n\t// rotate camera\n\tmat3 rot = rotationXY(-iMouse.yx / 100.0);\n\tdir = rot * dir;\n\t//eye = rot * eye;\n\t\n\t// ray marching\n\tfloat steps;\n\tfloat depth = ray_marching( eye, dir, 0.0, clip_far, steps );\n\t\n\tvec3 pos = eye + dir * depth;\n\tvec3 n = gradient( pos );\n\t\n\tcol = shading( pos, n, eye, depth, fragCoord.xy / iResolution.xy, steps );\n\t\n\t\n\tfragColor = vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XdfXR4","date":"1397141393","viewed":211,"name":"ray marching - test #1","username":"remonvv","description":"Simple ray marching test. Upper right shows steps (light = less steps, dark = more steps), lower right shows normals","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","distancefields","roundedcubes"],"hasliked":0,"parentid":"","parentname":""}}