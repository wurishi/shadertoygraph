{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"/// The amount of 'sparks' to use (spark count between about 73-206 is known to crash Win7/Chrome)\n#define SPARKS 40    // Low-end\n//#define SPARKS 100   // Low-mid\n//#define SPARKS 210   // Mid-high (recommended)\n//#define SPARKS 500   // High\n//#define SPARKS 1000  // Really High\n//#define SPARKS 2000  // Insane\n\n/// Switch between defines to choose different sets of settings\n#define ORIGINAL_SPARKS\n//#define WATER_SPOUT\n//#define FIRE_STREAM\n//#define STAR_BOMB\n//#define WATER_LINE\n\n#define BRIGHTNESS 1.0   /// 0.0 == auto-brightness\n\n#ifdef ORIGINAL_SPARKS\n\t#define SPEED_FACTOR 1.5\n\t#define LENGTH_FACTOR 0.6\n\t#define GROUP_FACTOR 1.0\n\t#define SPREAD_FACTOR 0.3\n\t#define MIN_ANGLE 0.1\n\t#define RAND_FACTOR 1.0\n#endif\n\n#ifdef WATER_SPOUT\n\t#define SPEED_FACTOR 1.5\n\t#define LENGTH_FACTOR 1.5\n\t#define GROUP_FACTOR 0.5\n\t#define SPREAD_FACTOR 0.1\n\t#define MIN_ANGLE 0.1\n\t#define RAND_FACTOR 1.0\n\t#define BLUE\n#endif\n\n#ifdef FIRE_STREAM\n\t#define SPEED_FACTOR 1.5\n\t#define LENGTH_FACTOR 1.5\n\t#define GROUP_FACTOR 1.0\n\t#define SPREAD_FACTOR 0.1\n\t#define MIN_ANGLE 0.1\n\t#define RAND_FACTOR 0.0\n#endif\n\n#ifdef STAR_BOMB\n\t#define SPEED_FACTOR 0.5\n\t#define LENGTH_FACTOR 0.2\n\t#define GROUP_FACTOR 1.0\n\t#define SPREAD_FACTOR 0.2\n\t#define MIN_ANGLE 0.3\n\t#define RAND_FACTOR 0.0\n\t#define DOT_SPREAD\n#endif\n\n#ifdef WATER_LINE\n\t#define SPEED_FACTOR 1.5\n\t#define LENGTH_FACTOR 1.5\n\t#define GROUP_FACTOR 0.7\n\t#define SPREAD_FACTOR 0.1\n\t#define MIN_ANGLE 0.1\n\t#define RAND_FACTOR 1.0\n\t#define LINEAR_SPREAD\n\t#define BLUE\n#endif\n\nconst float brightness = (float(BRIGHTNESS) == 0.0) ? 200.0 / (float(SPARKS) + 40.0) : float(BRIGHTNESS);\n\nvec3 sampleAngle(float u1) {\n\tfloat r = sqrt(u1);\n\treturn vec3(-r * -0.809017, -sqrt(1.0 - u1), r * 0.587785);\n}\n\nfloat rand(vec2 co) {\n    return fract(sin(dot(co.xy, vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat spread(vec2 co) {\n#ifdef LINEAR_SPREAD\n\treturn fract(co.x * 0.618033988749895);\n#else\n\t#ifdef DOT_SPREAD\n\t\treturn fract(co.x * 1.0);\n\t#else\n    \treturn fract(sin(dot(co.xy, vec2(12.9898,78.233))) * 43758.5453);\n\t#endif\n#endif\n}\n\nfloat planeIntersection(vec3 rpos, vec3 rdir, vec3 n) {\n\treturn -dot(n, rpos) / dot(rdir, n);\n}\n\nfloat cylinder(vec3 pos, vec3 dir, float len) {\n\tfloat x = dot(pos, dir);\n\treturn max(max(length(pos - dir * x) - 0.2, x), -x-len);\n}\n\nvec4 color(float age) {\n\tfloat f = 1.0 - age * 0.05;\n\t#ifdef BLUE\n\treturn vec4(0.2*f*f, 0.5*f*f+0.05, 0.5*f+0.4, min(f*2.0, 1.0));\n\t#else\n\treturn vec4(0.5*f+0.4, 0.5*f*f+0.05, 0.2*f*f, min(f*2.0, 1.0));\n\t#endif\n}\n\nvec3 trace(vec3 rpos, vec3 rdir, vec2 fragCoord) {\n\tfloat sparkT = planeIntersection(rpos, rdir, vec3(0.587785, 0.0, -0.809017));\n\tfloat floorT = -rpos.y / rdir.y;\n\t\n\tvec4 col = vec4(0.0, 0.0, 0.0, rdir.y < 0.0 ? 1.0 : 0.0);\n\tvec3 sparkCol = vec3(0.0, 0.0, 0.0);\n\t\n\tvec3 floorPos = rpos + rdir * floorT;\n\tvec3 sparkPos = rpos + rdir * sparkT;\n\t\n\tfloat time = iTime * SPEED_FACTOR;\n\tfor (int i = 0; i < SPARKS; i++)\n\t{\n\t\t// Calculate spark position and velocity\n\t\tfloat a = spread(vec2(i, 1.0))*SPREAD_FACTOR+MIN_ANGLE;\n\t\tfloat b = spread(vec2(i, 3.0))*RAND_FACTOR;\n\t\tfloat startTime = spread(vec2(i, 5.0)) * GROUP_FACTOR;\n\t\tvec3 dir = sampleAngle(a) * 10.0;\n\t\t\n\t\tvec3 start = dir * (1.35 + b * 0.3);\n\t\tvec3 force = -start * 0.02 + vec3(0.0, 1.2, 0.0);\n\t\tfloat c = fract(time + startTime) * 20.0;\n\t\tvec3 offset = start * c + force * c * c * 0.5;\n\t\t\n\t\tvec3 v = start + force * c;\n\t\tfloat vel = length(v) * LENGTH_FACTOR;\n\t\tvec3 vdir = normalize(-v);\n\t\tvec4 sc = color(c);\n\t\t\t\t\n\t\t// Shade floor\n\t\tif (rdir.y < 0.0) {\n\t\t\tvec3 spos = floorPos + offset;\n\t\t\tfloat h = cylinder(spos, vdir, vel);\n\t\t\t\t\t\t\n\t\t\tfloat invRad = 10.0;\n\t\t\tfloat dist = h * 0.05;\n\t\t\tfloat atten = 1.0 / (1.0 + 2.0 * invRad * dist + invRad * invRad * dist * dist);\n\t\t\tif (floorT <= sparkT && sparkT > 0.0) {\n\t\t\t\tdist += 0.8;\n\t\t\t\tatten += 1.0 / (1.0 + 100.0*dist*dist*dist);\n\t\t\t}\n\t\t\tcol += vec4(sc.xyz * sc.w * atten, 0.0) * brightness;\n\t\t}\n\t\n\t\t// Shade sparks\n\t\tif (floorT > sparkT && sparkT > 0.0 || floorT < 0.0) {\n\t\t\tvec3 spos = sparkPos + offset;\t\t\t\n\t\t\tfloat h = cylinder(spos, vdir, vel);\n\t\t\t\t\n\t\t\tif (h < 0.0) {\n\t\t\t\tsparkCol += vec3(sc.xyz * sc.w);\n\t\t\t} else {\n\t\t\t\tfloat dist = h * 0.05 + 0.8;\n\t\t\t\tfloat atten = 1.0 / (1.0 + 100.0 * dist * dist * dist);\n\t\t\t\tsparkCol += sc.xyz * sc.w * (atten + clamp(1.0 - h * sparkT * 0.05, 0.0, 1.0));\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Shade sky\n\tfloat fade = sqrt(length((fragCoord.xy / iResolution.xy) - vec2(0.7, 0.5)));\n\tvec3 sky = vec3(0.01, 0.01, 0.05) * (1.0 - fade);\n\tvec3 final = mix(sky, col.xyz, col.w) + sparkCol * brightness;\n\treturn final + vec3(rand(vec2(fragCoord.x * fragCoord.y, iTime))) * 0.002;\n}\n\n// Ray-generation\nvec3 camera(vec2 px) {\n\tvec2 rd = (px / iResolution.yy - vec2(iResolution.x/iResolution.y*0.5-0.5, 0.0)) * 2.0 - 1.0;\n\tvec3 rdir = normalize(vec3(rd.x*0.5, rd.y*0.5, 1.0));\n\treturn trace(vec3(-40.0, 20.0, -150), rdir, px);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tfragColor = vec4(pow(camera(fragCoord.xy), vec3(0.4545)), 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4ss3DM","date":"1372179233","viewed":5998,"name":"Sparks","username":"vanburgler","description":"Particle-effects in 2D. Has a few presets to play around with.\nv1.1 - Added auto/manual brightness, wider range of spark counts and crash warning for win7/chrome","likes":124,"published":1,"flags":0,"usePreview":0,"tags":["raytracing","fire","water","particles","sparks"],"hasliked":0,"parentid":"","parentname":""}}