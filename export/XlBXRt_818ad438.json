{"ver":"0.1","info":{"id":"XlBXRt","date":"1445798773","viewed":501,"name":"Dusty thing","username":"kuvkar","description":"Asteroid flying through dust, leaving a burning trail. Mouse to look around. Some optimization needed. ","likes":16,"published":1,"flags":0,"usePreview":0,"tags":["volumetric","asteroid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat3 rotx(float a) { mat3 rot; rot[0] = vec3(1.0, 0.0, 0.0); rot[1] = vec3(0.0, cos(a), -sin(a)); rot[2] = vec3(0.0, sin(a), cos(a)); return rot; }\nmat3 roty(float a) { mat3 rot; rot[0] = vec3(cos(a), 0.0, sin(a)); rot[1] = vec3(0.0, 1.0, 0.0); rot[2] = vec3(-sin(a), 0.0, cos(a)); return rot; }\nmat3 rotz(float a) { mat3 rot; rot[0] = vec3(cos(a), -sin(a), 0.0); rot[1] = vec3(sin(a), cos(a), 0.0); rot[2] = vec3(0.0, 0.0, 1.0); return rot; }\n\n// noise from iq's hell shader\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\tf = f*f*(3.0-2.0*f);\n\t\n\tvec2 uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;\n\tvec2 rg = textureLod( iChannel0, (uv+ 0.5)/256.0, 0.0 ).yx;\n\treturn mix( rg.x, rg.y, f.z ) - 0.5;\n}\n\n\nfloat planet(in vec3 rp)\n{\n    rp = rotx(iTime * 6.0) * rp;\n    \n    float rock = 0.02 + texture(iChannel1, rp.xz * 0.13, -100.0).r * 0.1;\n\tfloat L = length(rp) + rock;\n    return L;\n}\n\n\nvec3 planetGrad(in vec3 rp)\n{\n    vec2 off = vec2(0.01, 0.00);\n    vec3 g = vec3(planet(rp + off.xyy) - planet(rp - off.xyy),\n                  planet(rp + off.yxy) - planet(rp - off.yxy),\n                  planet(rp + off.yyx) - planet(rp - off.yyx));\n    return normalize(g);\n}\n\nvoid shadePlanet(in vec3 rp, inout vec4 color)\n{\n    vec3 g = planetGrad(rp);\n    float d = dot(g, vec3(-1.0, 0.0, .0));\n    d = clamp(d, 0.4, 1.0);\n    color += vec4(d * .1);\n    \n    float d2 = dot( normalize(rp), vec3(-1.0, 0.0, 0.0));\n    d2 = clamp(d2, 0., 1.0);\n    d2 = pow(d2, 1.0);\n    color += d2 * 0.5;\n    \n}\n\nvoid trace(in vec3 rp, in vec3 rd, inout vec4 color)\n{\n    vec3 ro = rp;\n    float T = iTime * 1.5;\n    float B = .8;\n    vec3 srd = rd;\n    \n    vec4 fog = vec4(0.0);\n    vec3 sampleP = rp;\n    bool doPlanet = false;\n    int steps = 240;\n    for (int i = 0; i < steps; ++i)\n    {\n        vec3 D = vec3(-T, 0.0, 0.0);\n        float f = noise(B * sampleP + D);\n        f += noise( (sampleP + D) * B * 2.0) * 0.5;\n        f += noise( (sampleP + D * 1.0) * B * 4.0) * 0.45;\n        f += noise( (sampleP + D * 2.0) * B * 8.0) * 0.35;\n        f += noise( (sampleP + D * 4.0) * B * 16.0) * 0.25;\n        \n        float R = 1.;\n        float DD = dot(vec3(-1.0, 0.0, 0.0), rp);\n        \n        float morph = (1.5 - sin( DD * .32) * 0.5) * 0.3; // morph sphere to capsule for the fire\n        float LM = length(vec3(-0.7, 0., 0.0) + vec3(.2, morph, morph) * rp);\n        \n        float c = LM - R;\n        vec3 N = -normalize(rp);\n        \n        srd += -min(c * pow(LM, 1.5) * .04, 0.0) * N; //  sampling ray direction change for fire effect\n        srd = normalize(srd);\n        \n        float MINSTEP = 0.03;\n    \tsampleP += srd * max(f * 0.25, MINSTEP);\n        rp += rd * max(f * 0.25, MINSTEP);\n        float asteroidSize = -.45;\n        \n        {\n            float x = max(-f * 0.01, 0.0);\n\t        fog.rgb +=vec3(1.0, .6, .0) * x * 0.7 + (1. - clamp(dot(rd, srd), 0.0, 1.0)) * 0.05;\n            \n            vec3 diff = - rp;\n            vec3 nrm = normalize(diff);\n            \n            float frontBurn = clamp(dot(vec3(1.0, 0.0, 0.0), nrm), -.0, 1.0) * (1.0 / dot(diff, diff) * 0.35);\n            fog.rgb += vec3(1.0) * frontBurn * 0.03;            \n            fog.a += x;\n        }\n    \t\n        float pl = planet(rp);\n        float c2 = pl - R;\n        if(c2 < asteroidSize)\n        {\n          \t  \n            doPlanet = true;\n            break;\n        }\n        \n        if(fog.a >= 1.0)\n        {\n            break;\n        }\n        \n        if(length(ro - rp) > 10.0)\n        {\n            break;\n        }\n    }\n    \n    if(doPlanet)\n    {\n        shadePlanet(rp, color);\n    }\n    \n    color += fog;\n}\n\n\nmat3 lookat(vec3 from, vec3 to)\n{\n    vec3 f = normalize(to - from);\n    vec3 _tmpr = normalize(cross(f, vec3(0.0, 1.0, 0.0)));\n    vec3 u = normalize(cross(f, _tmpr));\n    vec3 r = normalize(cross(u, f));\n    \n    mat3 m;\n    m[0] = r;\n    m[1] = u;\n    m[2] = f;\n    return m;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    fragColor = mix(vec4(0.2, 0., 0., 0.0), vec4(0.2, 0.1, 0., 0.), uv.y);\n    uv -= vec2(0.5);\n\tuv.y /= iResolution.x / iResolution.y;\n    vec2 m = iMouse.xy / iResolution.xy;\n    m -= vec2(0.5);\n    if(iMouse.xy == vec2(0.0))\n    {\n        m = vec2(-0.2, 0.);\n    }\n    \n    vec3 rp = vec3(m.x * 10.0, m.y * 10.0, -3.0 + sin(iTime * .7));\n    vec3 rd = normalize(vec3(uv, .5));\n    mat3 lat = lookat( rp, vec3(0.0));\n    \n    // cam shake\n    float shake = 0.021;\n    rp += lat[0] * shake * sin(iTime * 80.0);\n    rp += lat[1] * shake * sin(iTime * 80.0);\n    rd = lat * rd;\n    \n    trace(rp, rd, fragColor);\n    \n    // darkening\n    float l = length(uv);\n    fragColor *= smoothstep(0.9, 0.0, l);\n    \n}","name":"Image","description":"","type":"image"}]}