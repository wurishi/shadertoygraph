{"ver":"0.1","info":{"id":"fssXDr","date":"1618683569","viewed":54,"name":"roor","username":"droor","description":"CG 2021 Task 2","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["cg","cmc","msu","2021"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv) / float(iFrame + 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float INF = 1e10;\nconst float EPS = 0.001;\n\nconst vec3 CAMERA_POS = vec3(3, 1.2, -9);\nvec3 randDir;\n\nconst vec3 LIGHT1_POS = vec3(2, 2, 2);\nconst float LIGHT1_RADIUS = 0.5;\nconst vec3 LIGHT1_COLOR = vec3(1, 1, 1);\n\nconst vec3 LIGHT2_POS = vec3(-1.15, 0.25, -3);\nconst float LIGHT2_RADIUS = 0.5;\nconst vec3 LIGHT2_COLOR = vec3(1, 1, 0);\n\nconst vec3 STAND_POS = vec3(0,-0.55,0);\nconst float STAND_RADIUS = sqrt(0.5); \n\nconst vec3 TABLE_POS = vec3(0,-0.5,0);\nconst float TABLE_RADIUS = 10.0;\n\nconst float phi = (sqrt(5.0) + 1.0) / 2.0;\n\nconst vec3[] ICOS_POS = vec3[] (vec3(0.0, 1.0, phi) /*0*/, vec3( 1.0, phi,0.0) /* 1*/, vec3( phi,0.0, 1.0) /*2*/,\n                                vec3(0.0, 1.0,-phi) /*3*/, vec3( 1.0,-phi,0.0) /* 4*/, vec3( phi,0.0,-1.0) /*5*/,\n                                vec3(0.0,-1.0, phi) /*6*/, vec3(-1.0, phi,0.0) /* 7*/, vec3(-phi,0.0, 1.0) /*8*/,\n                                vec3(0.0,-1.0,-phi) /*9*/, vec3(-1.0,-phi,0.0) /*10*/, vec3(-phi,0.0,-1.0) /*11*/);\n                      \nconst vec3[] ICOS_FACES = vec3[] (vec3(0,1, 2), vec3(0,1, 7), vec3(0,2, 6), vec3(0, 7, 8), vec3(0,6, 8), \n                                  vec3(1,2, 5), vec3(1,3, 7), vec3(1,3, 5), vec3(2, 4, 5), vec3(2,4, 6), \n                                  vec3(4,6,10), vec3(6,8,10), vec3(3,7,11), vec3(7, 8,11), vec3(3,5, 9), \n                                  vec3(3,9,11), vec3(4,9,10), vec3(4,5, 9), vec3(8,10,11), vec3(9,10,11));\n\nconst vec3 ICOS_COLOR = vec3(1,1,1);\n\nconst float VISION_RADIUS = 0.8;\nconst vec3 VISION_POS = vec3(0.2, 0.3, 0.5);\nconst vec3 WATER_COLOR = vec3(0.0, 0.3, 0.6);\n\n// Трейсинг деревянного стола\nfloat traceTable(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.5 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    \n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) >= TABLE_RADIUS * TABLE_RADIUS) {\n        return INF;\n    }\n    normal = vec3(0, 1, 0);\n    return t;\n}   \n\n// Трейсинг сцены в кристалле (круг из воды)\nfloat traceVision(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.5 - pos.z) / dir.z;\n    if (t <= 0.0) {\n        return INF;\n    }\n    \n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xy, worldPos.xy) >= VISION_RADIUS * VISION_RADIUS) {\n        return INF;\n    }\n    normal = vec3(0, 0, 1);\n    return t;\n}   \n    \n// Трейсинг треугольника-грани икосаэдра\nfloat traceTriangle(vec3 curPos,vec3 a,vec3 b,vec3 c, vec3 dir, out vec3 normal) {\n\n    // Алгоритм Моллера — Трумбора\n\n    vec3 edge1, edge2, h, s, q;\n    float p,f,u,v;\n    edge1 = b - a;\n    edge2 = c - a;\n    h = cross(dir,edge2);\n    p = dot(edge1,h);\n    if (abs(p) < EPS) {\n        return INF;    // Луч паралеллен треугольнику\n    }\n    f = 1.0 / p;\n    s = curPos - a;\n    u = f * dot(s,h);\n    if (u < 0.0 || u > 1.0) {\n        return INF;\n    }\n    q = cross(s,edge1);\n    v = f * dot(dir,q);\n    if (v < 0.0 || u + v > 1.0) {\n        return INF;\n    }\n    \n    float t = f * dot(edge2,q);\n    if (t < EPS) { // Луч пересекает треугольник не в точке, а по отрезку\n        return INF;\n    }\n    \n    normal = normalize(cross(edge1, edge2));\n    return t;\n}\n\n// Трейсинг сферических источников света\nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal) {\n    // dot(pos + t * dir, pos + t * dir) == r * r;\n    // dot(pos, pos) + 2 * t * dot(pos, dir) + t * t * dot(dir, dir) == r * r\n    // t * t + 2.0 * t * dot(pos, dir) + dot(pos, pos) - r * r == 0\n    float a = dot(dir, dir);\n    float b = dot(pos, dir);\n    float c = dot(pos, pos) - r * r;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    float t = -b - sqrt(D);\n    if (t > 0.0) {\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    t = -b + sqrt(D);\n    if (t < 0.0) {\n        return INF;\n    }\n    normal = normalize(pos + t * dir);\n    return t;\n}\n\n// Трейсинг цилиндрической подставки\nfloat traceStand(vec3 pos, vec3 dir, float r, out vec3 normal) {\n    float t = (-1.0 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) < 0.5) {\n        normal = vec3(0, 1, 0);\n        return t;\n    }\n    \n    // dot(pos + t * dir, pos + t * dir) == r * r;\n    // dot(pos, pos) + 2 * t * dot(pos, dir) + t * t * dot(dir, dir) == r * r\n    // t * t + 2.0 * t * dot(pos, dir) + dot(pos, pos) - r * r == 0\n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - r * r;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    t = (-b - sqrt(D)) / a;\n    if (t > 0.0) {\n        worldPos = t * dir + pos;\n        if (worldPos.y <= -1.0) {\n            normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n            return t;\n        }\n    }\n    t = (-b + sqrt(D)) / a;\n    if (t < 0.0) {\n        return INF;\n    }\n    worldPos = t * dir + pos;\n    if (worldPos.y <= -1.0) {\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    }\n    return INF;\n}\n\n//Проверка точки на затенение\nbool isOccluded(vec3 pos, vec3 target) {\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n    \n    vec3 normal;\n    float sphT = traceSphere(pos, dir, 1.0, normal);\n    if (sphT < dist)\n        return true;\n    \n    float standT = traceStand(pos, dir, STAND_RADIUS, normal);\n    return (standT < dist);\n}\n\n// Вычисление интенсивности света для диффузных материалов\nvec3 computeLight(vec3 pos, vec3 color, vec3 normal) {\n    vec3 toLight1 = LIGHT1_POS - pos;\n    float distSq1 = dot(toLight1, toLight1);\n    float att1 = isOccluded(pos, LIGHT1_POS + randDir * LIGHT1_RADIUS) ? 0.0 : 50.0f / distSq1;\n    vec3 toLight2 = LIGHT2_POS - pos;\n    float distSq2 = dot(toLight2, toLight2);\n    float att2 = isOccluded(pos, LIGHT2_POS + randDir * LIGHT2_RADIUS) ? 0.0 : 10.0f / distSq2;\n    return color * (\n        max(0.0, dot(normal, normalize(toLight1))) * att1 * LIGHT1_COLOR\n        + max(0.0, dot(normal, normalize(toLight2))) * att2 * LIGHT2_COLOR\n        + texture(iChannel1, normal).rgb * 0.1\n    );\n}\n\nvec3 refract1(vec3 v, vec3 normal, float n1, float n2, out float n) {\n    if (dot(v, normal) < 0.0) {\n        normal = -normal;\n    }\n    float cosA = dot(v, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3 tang = normalize(v - cosA * normal);\n    float sinB = sinA / n2 * n1;\n    \n    //Полное внутреннее отражение\n    if (abs(sinB) > 1.0) {\n        n = n1;\n        return reflect(v, normal);\n    }\n    n = n2;\n    float cosB = sqrt(1.0 - sinB * sinB);\n    return sinB * tang + cosB * normal;\n}\n\nfloat pow2(float x) {\n    return x * x;\n}\n\nfloat rand(float frame)\n{\n    return fract(sin( dot(vec3(frame), vec3(12.9898,78.233,45.5432) )) * 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec3 randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    randDir = normalize(randVals - 0.5);\n    \n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + /*anti aliasing*/ (randVals.xy - 0.5)) / iResolution.x;\n    vec3 front = normalize(-CAMERA_POS);\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = normalize(cross(front, up));\n    up = normalize(cross(right, front));\n    vec3 viewVec = normalize(front + right * uv.x + up * uv.y);\n    \n    const int EMISSION = 0;\n    const int DIFFUSE = 1;\n    const int REFLECTION = 2;\n    const int REFRACTION = 3;\n    const int TRANSPARENT = 4;\n    \n    vec3 curPos = CAMERA_POS;\n    vec3 curDir = viewVec;\n    const float GLASS_N = 1.5;\n    const float AIR_N = 1.0;\n    float n1 = AIR_N;\n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N + GLASS_N);\n    const float VISION_N = 2.5;\n    float VISION_R = pow2(VISION_N - GLASS_N) / pow2(VISION_N + GLASS_N);\n    \n    vec3 colorMult = vec3(1, 1, 1);\n    \n    for (int i = 0; i < 10; ++i) {\n        float t = INF;\n        int materialType;\n        vec3 color;\n        vec3 normal, buf_normal;\n        float nEnter = AIR_N;\n        float dist;\n        \n        dist = traceTable(curPos - TABLE_POS, curDir, buf_normal);\n        if (dist < t) {\n            t = dist;\n            normal = buf_normal;\n            \n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel0, worldPos.xz * 0.1).rgb;\n        }\n        \n        dist = traceSphere(curPos - LIGHT1_POS, curDir, LIGHT1_RADIUS, buf_normal);\n        if (dist < t) {\n            t = dist;\n            normal = buf_normal;\n            \n            materialType = EMISSION;\n            color = LIGHT1_COLOR;\n        }\n        \n        dist = traceSphere(curPos - LIGHT2_POS, curDir, LIGHT2_RADIUS, buf_normal);\n        if (dist < t) {\n            t = dist;\n            normal = buf_normal;\n            \n            materialType = EMISSION;\n            color = LIGHT2_COLOR;\n        }\n        \n        \n        //trace icosahedron\n        for (int i = 0; i < 20; ++i) {\n            vec3 face = ICOS_FACES[i];\n            vec3 ta = ICOS_POS[int(face.x)];\n            vec3 tb = ICOS_POS[int(face.y)];\n            vec3 tc = ICOS_POS[int(face.z)];\n            \n            dist = traceTriangle(curPos, ta, tb, tc, curDir, buf_normal);\n            if (dist < t) {\n                t = dist;\n                normal = buf_normal;\n            \n                if (randVals.x < GLASS_R) {\n                    materialType = DIFFUSE;\n                    vec3 worldPos = t * curDir + curPos;\n                    color = texture(iChannel3, worldPos.xz * 0.1).rgb;\n                } else {\n                    colorMult *= ICOS_COLOR;\n                    materialType = REFRACTION;\n                    if (dot(curDir, normal) > 0.0) {\n                        nEnter = AIR_N;\n                    } else {\n                        nEnter = GLASS_N;\n                    }\n                }\n            \n            }\n        }\n        \n        dist = traceVision(curPos - VISION_POS, curDir, buf_normal);\n        if (dist < t) {\n            t = dist;\n            normal = buf_normal;\n          \n            vec3 worldPos = t * curDir + curPos;\n            \n            float k = 3.5 / (1.0 + 10.0 * dot(worldPos - VISION_POS, worldPos - VISION_POS));\n            \n            if (randVals.x * k < VISION_R) {\n                materialType = DIFFUSE;\n                color = texture(iChannel3, (worldPos.xy + vec2(1.9, 0.0)) * 0.1).rgb * WATER_COLOR;\n            } else {\n                materialType = TRANSPARENT;\n            }\n        }\n        \n        \n        dist = traceStand(curPos - STAND_POS, curDir, STAND_RADIUS, buf_normal);\n        if (dist < t) {\n            t = dist;\n            normal = buf_normal;\n            materialType = REFLECTION;\n        }\n        if (t != INF) {\n            vec3 worldPos = t * curDir + curPos;\n            fragColor = texture(iChannel0, worldPos.xz);\n            if (materialType == EMISSION) {\n                fragColor.rgb = color * colorMult;\n                break;\n            } else if (materialType == DIFFUSE) {\n                fragColor.rgb = computeLight(worldPos, color, normal) * colorMult;\n                break;\n            } else if (materialType == REFLECTION) {\n                curDir = reflect(curDir, normal);\n                curPos = worldPos + curDir * 1e-5;\n            } else if (materialType == REFRACTION) {\n                curDir = refract1(curDir, normal, n1, nEnter,\n                                  /*Меняем показатель преломления, если не происходит\n                                    полное внутреннее отражение*/ n1);\n                //Смещение: преломленный луч должен перейти через поверхность, чтобы\n                // не попасть снова на нее\n                curPos = worldPos + curDir * 1e-5;\n                \n            } else if (materialType == TRANSPARENT) {\n                //curDir не изменяется\n                \n                //Смещение: отраженный луч должен отдалиться от поверхности, чтобы\n                // не попасть снова на нее\n                curPos = worldPos + curDir * 1e-5;\n            }\n        } else {\n            fragColor.rgb = texture(iChannel1, curDir).rgb * colorMult;\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv) + texture(iChannel1, uv);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"float avg(vec4 color) {\n    return (color.r + color.g + color.b) / 3.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Скокрость течения воды.\n    float speed = 1.0;\n    // Масштабирование.\n    float scale = 0.8;\n    // Непрозрачность (чем она больше, тем больше света отражается).\n    float opacity = 0.5;\n \n    \n    vec2 uv = (fragCoord/iResolution.xy);\n    vec2 uv_scaled = uv * scale;\n\n    // Два слоя воды\n    vec4 layer1 = texture(iChannel0, uv_scaled    + 0.02               * iTime * speed - 0.1);\n    vec4 layer2 = texture(iChannel0, uv_scaled.xy + vec2(-0.02, -0.02) * iTime * speed + 0.1);\n    \n    // Блики на воде\n    vec4 glare1 = texture(iChannel2, uv_scaled.xy + iTime * speed / vec2(-10, 100));\n    vec4 glare2 = texture(iChannel2, uv_scaled.xy + iTime * speed / vec2( 10, 100));\n    \n    // Дно сосуда/водоёма\n    vec4 bottom = texture(iChannel1, vec2(uv) + avg(layer1) * 0.05);\n    \n    // Усреднение цветов воды\n    layer1.rgb = vec3(avg(layer1));\n    layer2.rgb = vec3(avg(layer2));\n    \n    // Усреднение и сглаживание бликов\n    glare1.rgb = vec3(avg(glare1) / 1.5);\n    glare2.rgb = vec3(avg(glare2) / 1.5);\n    \n    if(avg(layer1 + layer2 + glare1 + glare2) > 0.75) {\n        opacity *= 5.0;\n    } else if (avg(layer1 + layer2) > 0.3) {\n        opacity = 0.0;\n    }\n   \n    fragColor = (layer1 + layer2) * opacity + bottom;\n}\n","name":"Buffer C","description":"","type":"buffer"}]}