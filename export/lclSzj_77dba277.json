{"ver":"0.1","info":{"id":"lclSzj","date":"1705473204","viewed":75,"name":"not sdf but pipeline","username":"Zjx","description":"Create 3D model similar to render pipeline","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["3d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 GetScreenPoint(vec3 vertexPos)\n{\nmat4 mMatrix = mat4(1.);\n\nmat4 vMatrix = mat4(1.);\nvec3 cameraPos = vec3(10.0*sin(iTime), 5.0, 10.0*cos(iTime));\nvec3 lookAtPos = vec3(0.0,0.0,0.0);\nvec3 up = vec3(0.0,1.0,0.0);\n\nvec3 cameraZ = normalize(cameraPos - lookAtPos);\nvec3 cameraX = normalize(cross(up, cameraZ));\nvec3 cameraY = normalize(cross(cameraZ, cameraX));\n\nvMatrix = transpose(mat4(\ncameraX, 0.,\ncameraY, 0.,\ncameraZ, 0.,\n0.,0.,0.,1.\n))\n*\nmat4(\n1.,0.,0.,0.,\n0.,1.,0.,0.,\n0.,0.,1.,0.,\n-cameraPos.x,-cameraPos.y,-cameraPos.z,1.\n);\n\nfloat aspect = iResolution.x/iResolution.y;\nfloat fovy = radians(65.);\nfloat n = 0.01;\nfloat f = 1000.;\nfloat t = tan(fovy/2.)*n;\nfloat b = -t;\nfloat l = -aspect*t;\nfloat r = -l;\n\nmat4 pMatrix = mat4(\n2.*n/(r-l), 0., 0., 0.,\n0., 2.*n/(t-b), 0., 0.,\n(r+l)/(r-l), (t+b)/(t-b), -(f+n)/(f-n), -1.,\n0., 0., -2.*f*n/(f-n), 0.\n);\n\nvec4 VertexShaderResult = pMatrix*vMatrix*mMatrix*vec4(vertexPos,1.0);\nreturn (VertexShaderResult.xy/VertexShaderResult.w+1.0)/2.*iResolution.xy;\n}\n\nfloat DrawLine(in vec2 uv, in vec2 x1, in vec2 x2)\n{\n    vec2 a = uv - x1;\n    vec2 b = x2 - x1;\n    float t = clamp(dot(a,b)/dot(b,b), 0.0, 1.0);\n    vec2 r = a - t*b;\n    float d = length(r);\n    float coef = smoothstep(5., 3., d);\n    return coef;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord;\n    vec3 input1 = vec3(-2.,-2.,2.);\n    vec3 input2 = vec3(-2.,2.,2.);\n    vec3 input3 = vec3(2.,2.,2.);\n    vec3 input4 = vec3(2.,-2.,2.);\n    vec3 input5 = vec3(-2.,-2.,-2.);\n    vec3 input6 = vec3(-2.,2.,-2.);\n    vec3 input7 = vec3(2.,2.,-2.);\n    vec3 input8 = vec3(2.,-2.,-2.);\n    \n    vec2 point1 = GetScreenPoint(input1);\n    vec2 point2 = GetScreenPoint(input2);\n    vec2 point3 = GetScreenPoint(input3);\n    vec2 point4 = GetScreenPoint(input4);\n    vec2 point5 = GetScreenPoint(input5);\n    vec2 point6 = GetScreenPoint(input6);\n    vec2 point7 = GetScreenPoint(input7);\n    vec2 point8 = GetScreenPoint(input8);\n    \n    vec3 bgColor = vec3(1.0);\n    vec3 pointColor = vec3(0.0, 0.0, 0.0);\n    \n    /*\n    float c1 = smoothstep(7.0,5.0,length(fragCoord - point1));\n    float c2 = smoothstep(7.0,5.0,length(fragCoord - point2));\n    float c3 = smoothstep(7.0,5.0,length(fragCoord - point3));\n    float c4 = smoothstep(7.0,5.0,length(fragCoord - point4));\n    float c5 = smoothstep(7.0,5.0,length(fragCoord - point5));\n    float c6 = smoothstep(7.0,5.0,length(fragCoord - point6));\n    float c7 = smoothstep(7.0,5.0,length(fragCoord - point7));\n    float c8 = smoothstep(7.0,5.0,length(fragCoord - point8));\n    */\n    \n    float c1 = DrawLine(fragCoord, point1, point2);\n    float c2 = DrawLine(fragCoord, point2, point3);\n    float c3 = DrawLine(fragCoord, point3, point4);\n    float c4 = DrawLine(fragCoord, point4, point1);\n    \n    float c5 = DrawLine(fragCoord, point5, point6);\n    float c6 = DrawLine(fragCoord, point6, point7);\n    float c7 = DrawLine(fragCoord, point7, point8);\n    float c8 = DrawLine(fragCoord, point8, point5);\n    \n    float c9 = DrawLine(fragCoord, point1, point5);\n    float c10 = DrawLine(fragCoord, point2, point6);\n    float c11 = DrawLine(fragCoord, point3, point7);\n    float c12 = DrawLine(fragCoord, point4, point8);\n    \n    vec3 result = mix(bgColor, pointColor, c1);\n    result = mix(result, pointColor, c2);\n    result = mix(result, pointColor, c3);\n    result = mix(result, pointColor, c4);\n    result = mix(result, pointColor, c5);\n    result = mix(result, pointColor, c6);\n    result = mix(result, pointColor, c7);\n    result = mix(result, pointColor, c8);\n    result = mix(result, pointColor, c9);\n    result = mix(result, pointColor, c10);\n    result = mix(result, pointColor, c11);\n    result = mix(result, pointColor, c12);\n    \n    fragColor = vec4(result, 1.0);\n    ;\n}","name":"Image","description":"","type":"image"}]}