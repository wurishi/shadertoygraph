{"ver":"0.1","info":{"id":"NtlSz7","date":"1625363473","viewed":195,"name":"Endless Tunnel","username":"EzaExponential","description":"endless 3d tunnel of circles","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["circles","colors","endless","spinning","colours"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 rotate(vec3 v, float a) {\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\tmat2 m = mat2(c,-s, s, c);\n\treturn vec3(m * v.xy, v.z);\n}\n\nfloat DistLine(vec3 ro, vec3 rd, vec3 p) { \n    return length(cross(p-ro, rd))/length(rd);\n} \n\nfloat DrawPoint(vec3 ro, vec3 rd, vec3 p) { \n    float d = DistLine(ro, rd, p); \n    d = smoothstep(.06, .05, d); \n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{ \n    float t = iTime;\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy; \n    //make 0,0 centre\n    uv -= 0.5;  \n    //correct aspect ratio\n    uv.x *= iResolution.x/iResolution.y;\n\n    //camera stuff \n    vec3 camPos = vec3(sin(iTime)/5., cos(iTime)/5., iTime*2.); \n    vec3 ro = camPos; \n    vec3 lookat = vec3(camPos.xy, 1.); \n    float zoom = 1.;\n    vec3 f = normalize(lookat-ro); \n    vec3 r = cross(rotate(vec3(0., 1., 0.), -iTime/4.), f); \n    vec3 u = cross(f, r);     \n    vec3 c = ro + f*zoom; \n    vec3 i = c + uv.x*r + uv.y*u;    \n    vec3 rd = i - ro; \n   \n   \n    float d = 0.;     \n    //8 cube points\n    { \n    for(float i = (floor(camPos.z)) + 1.; i<(floor(camPos.z)) + 100.; i+=0.5){\n    d+= DrawPoint(ro, rd, rotate(vec3(-0.5, -0.5, float(i)), float(i)/2.));  \n    d+= DrawPoint(ro, rd, rotate(vec3(-0.5, 0.5, float(i)), float(i)/2.)); \n    d+= DrawPoint(ro, rd, rotate(vec3(0.5, 0.5, float(i)), float(i)/2.)); \n    d+= DrawPoint(ro, rd, rotate(vec3(0.5, -0.5, float(i)), float(i)/2.));  \n    }\n    } \n    \n    //colour: \n    vec3 col = vec3(abs(sin(iTime + uv.x)), abs(cos(iTime+ uv.y)), abs(sin(iTime*2.3 + uv.x))*2.0);\n    \n    // Output to screen \n    fragColor = vec4(vec3(d) * col,1.0);\n}","name":"Image","description":"","type":"image"}]}