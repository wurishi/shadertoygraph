{"ver":"0.1","info":{"id":"3sGXWw","date":"1574124634","viewed":499,"name":"simple line-plane intersection","username":"neur0sys","description":"Simple line-plane intersection with basic lighting and texture","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["lineplaneintersection"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://en.wikipedia.org/wiki/Line%E2%80%93plane_intersection\n// https://en.wikipedia.org/wiki/Specular_reflection#Law_of_reflection\n// https://en.wikipedia.org/wiki/Lambertian_reflectance\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    uv.y = 1.0 - uv.y;\n    uv = uv * 2.0 - 1.0;\n \tuv *= iResolution.x / iResolution.y;\n    \n    // plane equation\n    // (p - p0) . n = 0\n    \n    // ray equation\n    // p = l0 + l * t\n    \n    // solve for parameter t\n    // t = ((p0 - l0) . n) / (l . n)\n    \n    vec3 n = vec3(0.0, 1.0, 0.0);\n    vec3 p0 = vec3(-1.0, -1.0, -1.0);\n\tvec3 l0 = vec3(0.0, 0.0, 1.0);\n    vec3 l = normalize(vec3(uv, -1.0));\n \n    vec3 dis = vec3(\n        sin(iTime) * 2.0 + 2.0,\n        cos(iTime) * 3.0 + 3.0,\n        cos(iTime) * 4.0 + 4.0\n    );\n    \n    l0 += dis;\n    \n    float denom = dot(n, l);\n    \n    if (denom > 1e-6) {\n    \tfloat t = dot((p0 - l0), n) / denom;\n        vec3 hit = l0 + l * t;\n        \n\t\tfloat t0 = iTime;\n\n        vec3 lightPos = vec3(0.0, 2.0, 5.0);\n        //lightPos.y += sin(t0) * 4.0 + 4.0;\n        lightPos.z += cos(t0) * 8.0 + 8.0;\n        lightPos.x += sin(t0) * 8.0 + 8.0;\n        \n\t\tvec3 lightDir = normalize(lightPos - hit);\n        \n        // ambient\n        float ambientStrength = 0.1;\n    \tvec3 ambient = ambientStrength * vec3(1.0);\n        \n        // diffuse\n        float diff = max(dot(n, lightDir), 0.0);\n\t\tvec3 diffuse = diff * vec3(1.0);\n        \n        // specular\n        vec3 viewDir = normalize(hit - l0);\n        vec3 reflectDir = reflect(lightDir, n); \n        \n        float spec = pow(max(dot(viewDir, reflectDir), 0.0), 128.0);\n         vec3 c = vec3(\n            sin(iTime) * 0.1 + cos(iTime) * 0.25 + 1.0,\n            sin(iTime) * 0.2 + cos(iTime) * 0.25 + 1.0,\n            cos(iTime) * 0.2 + cos(iTime) * 0.25 + 1.0\n        );\n        \n        c += -1.0 * texture(iChannel0, hit.xz / 7.0).xyz * vec3(0.2, 0.8, 0.8);\n\n        // checker board\n        float u = mod(hit.x, 2.0);\n        float v = mod(hit.z, 2.0);\n        \n        if ((u > 1.0 && v > 1.0) || (u < 1.0 && v < 1.0)) {\n            c -= 0.5;\n        }\n\n\n        fragColor = vec4(c * (ambient + diffuse + spec), 1.0);\n    } else {\n    \tfragColor = vec4(vec3(0.0), 1.0);\n    }\n}\n","name":"Image","description":"","type":"image"}]}