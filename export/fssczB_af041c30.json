{"ver":"0.1","info":{"id":"fssczB","date":"1642307294","viewed":113,"name":"Simple stary sky","username":"Milk","description":"Really simple starry sky. Just uses a psuedo-random number generator and a gaussian blur\n\nGaussian blur shamelessly stolen from this wonderful shader: https://www.shadertoy.com/view/Xltfzj","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float Pi = 6.28318530718; // Pi*2\n    \n    // GAUSSIAN BLUR SETTINGS {{{\n    float Directions = 16.0; // BLUR DIRECTIONS (Default 16.0 - More is better but slower)\n    float Quality = 3.0; // BLUR QUALITY (Default 4.0 - More is better but slower)\n    float Size = 2.0; // BLUR SIZE (Radius)\n    // GAUSSIAN BLUR SETTINGS }}}\n   \n    vec2 Radius = Size/iResolution.xy;\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    // Pixel colour\n    vec4 Color = texture(iChannel0, uv);\n    \n    // Blur calculations\n    for( float d=0.0; d<Pi; d+=Pi/Directions)\n    {\n\t\tfor(float i=1.0/Quality; i<=1.0; i+=1.0/Quality)\n        {\n\t\t\tColor += texture( iChannel0, uv+vec2(cos(d),sin(d))*Radius*i);\t\t\n        }\n    }\n    \n    // Output to screen\n    Color /= Quality * Directions - 15.0;\n    fragColor =  Color * 1.5;\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float pass(float a) {\n    return sin((a) * 3.14)- 0.9996;\n}\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nfloat shootingStar(vec2 uv) {\n    float passed = min(pass(uv.x + (iTime)), pass(uv.y + iTime * 0.3));\n\n    // Time varying pixel color\n    return passed * 1000.0;\n}\n\nfloat starsBG(vec2 fragCoord) {\n    float pass = 0.99;\n    \n    float bigNoise = rand(floor(fragCoord/4.0));//texture(iChannel0, vec2(uv.x, uv.y) * 2.0).x;\n    float smallNoise = rand(floor(fragCoord));//texture(iChannel0, vec2(uv.x, uv.y) * 2.0).x;\n    float noise = max(bigNoise, smallNoise);\n    float passed = max(0.0, (noise - pass)) * 100.0;\n\n    return passed;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;    \n    \n    vec3 col = vec3(max(starsBG(fragCoord), shootingStar(uv)));\n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}