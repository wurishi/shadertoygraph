{"ver":"0.1","info":{"id":"3ld3zs","date":"1590976328","viewed":81,"name":"59751-0-","username":"jorge2017a1","description":"Unknown author !!!----59751-0-","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["597510"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"///Unknown author !!!\n//Scene Start\nfloat hash(vec2 p)  \n{\n    p  = 50.0*fract( p*0.3183099 + vec2(0.71,0.113));\n    return -1.0+2.0*fract( p.x*p.y*(p.x+p.y) );\n}\n\nfloat noise( in vec2 p )\n{\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n\t\n\tvec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( hash( i + vec2(0.0,0.0) ), \n                     hash( i + vec2(1.0,0.0) ), u.x),\n                mix( hash( i + vec2(0.0,1.0) ), \n                     hash( i + vec2(1.0,1.0) ), u.x), u.y);\n}\n\nfloat mapH(in vec3 pos) \n{\n\t    pos.x += sin(iTime+pos.z*2.2);\n    \n    \tfloat h = 0.0;\n    \tvec2 q = pos.xz * 0.1;\n    \tfloat s = 0.03;\n    \n    \tfor (int i = 0; i < 3; i++)\n\t     {\n        \tq += vec2(i)+iTime*0.3;\n        \th += s * noise(q);\n    \t}\n    \n    \n    \treturn pos.y + h * 58.0;\n}\n\n//Floor\nvec2 obj0(in vec3 pos) \n{\n    \treturn vec2(min(mapH(pos), 1.),0.);   \n}\n\n\n//Floor Color (checkerboard)\nvec3 obj0_c(in vec3 p){\n if (fract(p.x*.15)>.5)\n   if (fract(p.z*.15)>.5)\n     return vec3(0.6,0.3,0.7);\n   else\n     return vec3(0.7,0.3,0.3);\n else\n   if (fract(p.z*.15)>.5)\n     return vec3(0.55,0.4,0.5);\n   else\n     \treturn vec3(0.8,0.5,0.8);\n}\n\n//Scene End\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 vPos=-1.0+2.0*fragCoord.xy/iResolution.xy;\n\n  //Camera animation\n  vec3 vuv=vec3(0,2,sin(iTime*0.1));//Change camere up vector here\n  vec3 prp=vec3(-sin(iTime*0.6)*16.0+iTime,7,cos(iTime*0.4)*16.0+iTime); //Change camera path position here\n  vec3 vrp=vec3(40.+iTime,-45,20.+iTime); //Change camere view here\n\n\n  //Camera setup\n  vec3 vpn=normalize(vrp-prp);\n  vec3 u=normalize(cross(vuv,vpn));\n  vec3 v=cross(vpn,u);\n  vec3 vcv=(prp+vpn);\n  vec3 scrCoord=vcv+vPos.x*u*iResolution.x/iResolution.y+vPos.y*v;\n  vec3 scp=normalize(scrCoord-prp);\n\n  //Raymarching\n  const vec3 e=vec3(0.1,0,0);\n  const float maxd=80.0; //Max depth\n\n  vec2 s=vec2(0.1,0.0);\n  vec3 c,p,n;\n\n  float f=1.0;\n  for(int i=0;i<86;i++){\n    if (abs(s.x)<.01||f>maxd) break;\n    f+=s.x;\n    p=prp+scp*f;\n    s=obj0(p);\n  }\n  \n  if (f<maxd){\n    if (s.y==0.0)\n      c=obj0_c(p);\n    n=normalize(\n      vec3(s.x-obj0(p-e.xyy).x,\n           s.x-obj0(p-e.yxy).x,\n           s.x-obj0(p-e.yyx).x));\n    float b=dot(n,normalize(prp-p));\n    fragColor=vec4(b*c*(2.0-f*.02),1.0);\n  }\n  else fragColor=vec4(0.4,0.2,0.3,1); //background color\n}\n\n\n\n","name":"Image","description":"","type":"image"}]}