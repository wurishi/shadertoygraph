{"ver":"0.1","info":{"id":"l32Gzh","date":"1708213782","viewed":128,"name":"Manhole","username":"Cellulose","description":"A hole the size of a man!\nClick to pan around.","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["gui","gooey"],"hasliked":0,"parentid":"4Xl3zj","parentname":"The Like's Nest-Pool"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"precision highp float;\n\nconst vec3 LIGHT_VEC = normalize(vec3(-2, 7, 3));\n\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\n\nfloat map(vec3 pos)\n{\n    float axial_dist = length(pos.xz);\n    \n    if (abs(abs(pos.x*pos.z) / dot(pos.xz, pos.xz) - .29) > .20) axial_dist -= .01;\n\n    float shaft_xz = .60 - axial_dist;\n    float surface_y = pos.y;\n    \n    float rim_xz = .65 - axial_dist;\n    float rim_y = .05 + pos.y;\n    \n    float fringe_xz = .70 - axial_dist;\n    float fringe_y = .01 + pos.y;\n    \n    \n    float dist = max(max(max(shaft_xz, surface_y), min(rim_xz, rim_y)), min(fringe_xz, fringe_y));\n    \n    dist = min(dist, length(pos - clamp(pos, vec3(-10,-10,+5), vec3(+10,+10,+15))));\n    \n    {\n        vec3 pos_mod = pos;\n        pos_mod.y = mod(min(pos_mod.y, 0.0), .3) - .15;\n        \n        vec3 rung = clamp(pos_mod, vec3(.5, .0, -.2), vec3(1.1, .0, +.2));\n        rung.xz += normalize(pos.xz-rung.xz) * .1;\n        \n        dist = min(dist, length(pos_mod - rung) - .02);\n    }\n    \n    return dist;\n}\n\n\nfloat ambient_occlusion (vec3 pos, vec3 normal)\n{\n    float sum = 0., sum_w = 0., dist = .01;\n    for (int i = 0; i < 8; i ++)\n    {\n        //float dist = float(i+1) * .01;\n        vec3 p = pos + normal * dist;\n        sum   += map(p) / dist;\n        sum_w += 1.0;\n        dist *= 1.414;\n        //w *= .5;\n    }\n    return .7 + .3 * min(sum / sum_w, 1.0);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.y;\n    \n    \n    vec2 fovTan = 2.0 * ((fragCoord.xy - .5*iResolution.xy) / iResolution.y);\n    vec3 rd = normalize(vec3(fovTan.xy, -2.5));\n    \n    \n    float yaw = -6.282 * (iMouse.x / iResolution.x);\n    float pitch = -1.1 + .8 * (iMouse.y / iResolution.y);\n    \n    \n    mat3 rotY = mat3(\n        vec3( cos( yaw ), 0.0, -sin( yaw ) ),\n\t\tvec3( 0.0, 1.0, 0.0 ),        \n        vec3( sin( yaw ), 0.0, cos( yaw ) )\n        );          \n    \n    mat3 rotZ = mat3(\n        vec3( 1.0, 0.0, 0.0 ),\n        vec3( 0.0, cos( pitch ), sin( pitch ) ),\n        vec3( 0.0, -sin( pitch ), cos( pitch ) )\n        );\n    \n    rd = normalize(rotY * rotZ * rd);\n    \n    \n    //uv += vec2(.15, -.9);\n    \n    vec3 rayOrigin = rotY * rotZ * vec3(0.0, 0.0, 3.0);\n    vec3 pos = rayOrigin;\n    \n    float pos_dist = 100000.0;\n    \n    \n    int STEPS = 0;\n    bool ray_miss = false;\n    for (; STEPS < 32; ++STEPS)\n    {\n        float new_dist = map(pos);\n        \n        if (new_dist - pos_dist > 10.0) {ray_miss = true; break;}\n        pos_dist = new_dist;\n        if (pos_dist < .000001) break;\n        \n        pos += rd * max(pos_dist, .001);\n    }\n    \n    \n    vec3 normal;\n    {\n        vec2 eps = vec2(.001, 0.0);\n        \n        normal = normalize(vec3(\n            map(pos + eps.xyy) - map(pos - eps.xyy),\n            map(pos + eps.yxy) - map(pos - eps.yxy),\n            map(pos + eps.yyx) - map(pos - eps.yyx)));\n    }\n    \n    \n    vec3 col;\n    {\n        float shine_dot = dot(normal, LIGHT_VEC);\n        \n        vec3 sun_tint = .5 + .5*vec3(1,.5,-.5)*shine_dot + vec3(0,.3,.4);\n        \n        col = .75 * vec3(.5 + .5 * shine_dot) + sun_tint * .1;\n        \n        if (pos.y > -.07 && pos.y < -.005) col *= .5;\n        \n        col *= exp2(min(0.0, pos.y / .6));\n    }\n    \n    {\n        col *= ambient_occlusion(pos, normal);\n    }\n    \n    //if (pos.y >= -.001) col = vec3(.72 + rand(pos.xz) * .05);\n    \n    vec3 sky_col = vec3(.72, .92, .95);\n    \n    col = mix(sky_col, col, float(!ray_miss));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}