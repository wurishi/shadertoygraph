{"ver":"0.1","info":{"id":"cdtXD7","date":"1688376469","viewed":49,"name":"Fork Fork ray m jurimimi 872","username":"jurimimi","description":"Source: https://youtu.be/PGtv-dBi2wE","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarching"],"hasliked":0,"parentid":"DstSD7","parentname":"modulo point"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 25\n#define MAX_DIST 100.\n#define SURF_DIST .001\nfloat signedDstToScene(vec3 p) {\n    float dstA = dot(sin(p*.09), vec3(1.));\n    float dstB = dot(mod(p, .09), vec3(1.));\n    return mix(dstA, dstB, 10000.);\n}\nfloat GetDist(vec3 p ){\n    vec4 sphere = vec4(0, 1, 6, 1);\n    vec4 cube = vec4(1, .3, 3, .3);\n    float dS = length(mod(p-sphere.xyz, 3.2) - vec3(3.2/2.))-sphere.w;\n    float dC = length(max(abs(p-cube.xyz)-cube.w, 0.));\n    float dP = p.y;\n    float d = min(dS, dP);\n    d = min(d, dC);\n    return dS;\n}\nfloat RayMarch(vec3 ro, vec3 rd) {\n    float dO = 0.;\n    for (int i=0; i<MAX_STEPS; i++) {\n        vec3 p = ro+dO*rd;\n        float dS = GetDist(p);\n        dO+= dS;\n        if (dS<SURF_DIST || dO>MAX_DIST) break;\n    } \n    return dO;\n}\n\nvec3 GetNormal (vec3 p) {\n    vec2 e = vec2(.01, 0);\n    float d = GetDist(p);\n    vec3 n = d- vec3(GetDist(p-e.xyy),\n                     GetDist(p-e.yxy),\n                     GetDist(p-e.yyx));\n    return normalize(n);\n}\nfloat GetLight(vec3 p ) {\n    vec3 lightPos = vec3(0, 5, 6. + iTime);\n    //lightPos.xz += vec2(sin(iTime), cos(iTime));\n    vec3 l = normalize(lightPos - p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l), 0., 1.);\n    float d = RayMarch(p+n*SURF_DIST*2., l);\n    if(d<length(lightPos-p)) dif *= .1;\n    return dif;\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0);\n    vec3 ro = vec3(0, 1, 0. + iTime);\n    vec3 rd = normalize(vec3(uv.x+.33, uv.y+.5, 1.));\n    \n    float d = RayMarch(ro, rd);\n    \n    vec3 p = ro + rd*d;\n    \n    float dif = GetLight(p);\n    //float nonsense = signedDstToScene(p);\n    col = vec3(dif);\n    fragColor = vec4(col.x*0.78, col.y*0.2, 0.11 ,1.0);\n}\n","name":"Image","description":"","type":"image"}]}