{"ver":"0.1","info":{"id":"mlc3zf","date":"1682850329","viewed":68,"name":"3d primitives","username":"schzna","description":"3d primitive practice","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["3d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 sphere(vec3 ray, vec3 pos, float r){\n    float rc = dot(ray, pos);\n    float sqc = dot(pos, pos);\n    float sqr = dot(ray, ray);\n    \n    //|k*ray - pos| = r satisfied when k*ray hits sphere surface\n    //k = \\frac{b \\pm \\sqrt{b^2 - ac}}{a} for ak^2 - 2bk + c = 0\n    //for now, we want a point which is looked first by ray\n    float k = (rc - sqrt(rc * rc - sqr*(sqc - r*r)))/sqr;\n    return vec4(normalize(k * ray - pos), k);\n}\n\nstruct plane{\n    vec3 b1;\n    vec3 b2;\n};\n\nplane gen_plane(vec3 n){\n    plane base;\n    float x = n.x;\n    float y = n.y;\n    float z = n.z;\n    if(x == 0.0){\n        base.b1 = vec3(1.0, 0.0, 0.0);\n    }else{\n        base.b1 = normalize(vec3(-1.0-y/x, x/y, y/z));\n    }\n    base.b2 = cross(n, base.b1);\n    return base;\n}\n\nvec2 projection_plane(plane p, vec3 v){\n    return vec2(dot(p.b1, v), dot(p.b2, v));\n}\n\nvec4 cylinder(vec3 ray, vec3 pos, float r, float l, vec3 dir){\n    plane pln = gen_plane(dir);\n    vec2 pr = projection_plane(pln, ray);\n    vec2 c = projection_plane(pln, pos);\n    \n    float rr = dot(pr, pr);\n    float rc = dot(pr, c);\n    float cc = dot(c, c);\n    \n    float k = (rc - sqrt(rc*rc - rr*(cc - r*r)))/rr;\n    float h = dot(k*ray - pos, dir);\n    float hl = 0.5*l;\n    if(abs(h) < hl && length(c) > r){\n        return vec4(normalize(k * ray - h*dir - pos), k);\n    }else {\n        if(dot(dir, ray) > 0.0){\n            float kkm = dot(-hl*dir+pos,dir)/dot(dir, ray);\n            if(length(kkm*ray-(-hl)*dir-pos) < r){\n                return vec4(-dir, kkm);\n            }\n        }else{\n            float kkp = dot(hl*dir+pos,dir)/dot(dir, ray);\n            if(length(kkp*ray-hl*dir-pos) < r){\n                return vec4(dir, kkp);\n            }\n        }\n    }\n    return vec4(0.0);\n}\n\nvec4 cone(vec3 ray, vec3 pos, float r, float l, vec3 dir){\n    plane pln = gen_plane(dir);\n    vec2 pr = projection_plane(pln, ray);\n    vec2 c = projection_plane(pln, pos);\n    \n    float rr = dot(pr, pr);\n    float rc = dot(pr, c);\n    float cc = dot(c, c);\n    \n    float rd = dot(ray, dir);\n    float pd = dot(pos, dir);\n    \n    float R = r/l;\n    \n    float ka = rr - R*R*rd*rd;\n    //-b/2\n    float kb = rc - R*R*rd*pd;\n    float kc = cc - R*R*pd*pd;\n    \n    float k = (kb - sqrt(kb*kb - ka*kc))/ka;\n    float h = dot(k*ray - pos, dir);\n    if(0.0 < h && h < l && (length(c) > r || dot(ray, dir) > 0.0)){\n        return vec4(normalize(k * ray - h*dir - pos), k);\n    }else {\n        float kkp = dot(l*dir+pos,dir)/dot(dir, ray);\n        if(length(kkp*ray-(l)*dir-pos) < r){\n            return vec4(dir, kkp);\n        }\n    }\n    return vec4(0.0);\n}\n\nvec3 ray(vec2 v, float d){\n    return normalize(vec3(v.x, v.y, d));\n}\n\nfloat light_para(vec4 lp[4], vec3 light){\n    int mi = 0;\n    for(int i=0; i<4;i++){\n        if(lp[i].w > 0.0){\n             mi = i;\n             break;\n        }\n    }\n    for(int i=0; i<4;i++){\n        if(lp[i].w > 0.0 && lp[i].w < lp[mi].w){\n            mi = i;\n        }\n    }\n    return pow(max(dot(lp[mi].xyz, -light), 0.0), 0.8);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 v = (fragCoord-iResolution.xy*0.5)/iResolution.yy;\n    vec3 r = ray(v, 1.0);\n    \n    float time = iTime * 1.0;\n    \n    vec4 sph = sphere(r, vec3(2.0*cos(time), 0.0, 3.0), 0.4);\n    vec4 x = cylinder(r, vec3(0.0, 0.0, 3.0), 0.4, 1.0, normalize(vec3(0.0, cos(time), sin(time))));\n    vec4 y = cone(r, vec3(1.0, 0.0, 3.0), 0.4, 1.0, normalize(vec3(0.0, cos(time), sin(time))));\n    vec3 l1 = normalize(vec3(1.0, -1.0, 1.0));\n    float m = light_para(vec4[](x,y,sph,x),l1) + 0.1;\n    vec3 col = m*vec3(1.0);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}