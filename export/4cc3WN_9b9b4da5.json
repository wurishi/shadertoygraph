{"ver":"0.1","info":{"id":"4cc3WN","date":"1711671574","viewed":26,"name":"Fork L2 - TP3 - Mamadou 553","username":"Mamadou","description":"TP4 - Shadowing","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["shadowing"],"hasliked":0,"parentid":"4XBSR1","parentname":"L2 - TP3 - Shadows"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Modeling - 2024.02.06\n// Eric Galin\n\n// Constant for number of steps\n/*const int Steps = 200;  // Number of steps for ray marching\n// Epsilon for ray marching\nconst float Epsilon = 0.01;  // Small value to prevent self-intersection\n\n// Rotation matrix around z axis\n// a : Angle\nmat3 Rz(float a)\n{\n    float sa = sin(a); \n    float ca = cos(a);\n    return mat3(ca, sa, 0.0, -sa, ca, 0.0, 0.0, 0.0, 1.0);\n}\n\nstruct Ray {\n    vec3 ro; // Ray origin\n    vec3 rd; // Direction\n};\n\n// Compute a point on the ray\n// ray : Ray\n// t   : depth\nvec3 Point(Ray ray, float t)\n{\n    return ray.ro + t * ray.rd;\n}\n\n// Compute the ray\n//     m : Mouse position\n//     p : Pixel\nRay CreateRay(vec2 m, vec2 p)\n{\n    float a = 3.0 * 3.14 * m.x; \n    float le = 3.5;\n  \n    // Origin\n    vec3 ro = vec3(35.0, 0.0, 10.0) * Rz(a);\n  \n    // Target point\n    vec3 ta = vec3(0.0, 0.0, 3.0);\n  \n    // Orthonormal frame\n    vec3 w = normalize(ta - ro);\n    vec3 u = normalize(cross(w, vec3(0.0, 0.0, 1.0)));\n    vec3 v = normalize(cross(u, w));\n    vec3 rd = normalize(p.x * u + p.y * v + le * w);\n    return Ray(ro, rd);\n}\n\n// Primitives\n\n// Sphere\n// p : point\n// c : center of skeleton\n// r : radius\nfloat Sphere(vec3 p, vec3 c, float r)\n{\n    return length(p - c) - r;\n}\n\n// Plane\n// p : point\n// c : center of skeleton\n// n : Normal\nfloat Plane(vec3 p, vec3 c, vec3 n)\n{\n    return dot(p - c, n);\n}\n\n// Operators\n\n// Union\n// a,b : field function of left and right sub-trees\nfloat Union(float a, float b)\n{\n    return min(a, b);\n}\n\n// Union, extension to four sub-trees\n// a,b,c : field function of left and right sub-trees\nfloat Union(float a, float b, float c, float d)\n{\n    return min(min(a, b), min(c, d));\n}\n\n// Difference\n// a,b : field function of left and right sub-trees\nfloat Difference(float a, float b)\n{\n    return max(a, -b);\n}\n\n// Potential field of the object\n// p : point\nfloat Sphere1(vec3 p)\n{\n    return Sphere(p, vec3(3.0, 0.0, 4.0), 4.0);\n}\n\nfloat Sphere2(vec3 p)\n{\n    return Sphere(p, vec3(-3.0, 0.0, 8.0), 3.0);\n}\n\nfloat Sphere3(vec3 p)\n{\n    return Sphere(p, vec3(5.0, 2.0, 12.0), 3.0);\n}\n\nfloat Sphere4(vec3 p)\n{\n    return Sphere(p, vec3(-1.0, 1.0, 16.0), 3.0);\n}\n\nfloat Sphere5(vec3 p)\n{\n    return Sphere(p, vec3(-1.0, 2.0, 20.0), 3.0);\n}\n\nfloat Sphere6(vec3 p)\n{\n    return Sphere(p, vec3(1.0, 1.0, 24.0), 3.0);\n}\n\n\n\nfloat object(vec3 p)\n{\n    float v = Sphere1(p);\n\n    v = Difference(v, Sphere2(p));\n    v = Difference(v, Sphere3(p));\n    v = Difference(v, Sphere4(p));\n    v = Difference(v, Sphere5(p));\n    v = Difference(v, Sphere6(p));\n\n    v = Union(v, Sphere(p, vec3(0.0, 4.0, 28.0), 1.5));\n    v = Union(v, Sphere(p, vec3(4.0, 3.0, 32.0), 2.5));\n    v = Union(v, Sphere(p, vec3(-4.0, 2.0, 36.0), 2.0));\n\n    v = Difference(v, Plane(p, vec3(0.0, -2.0, 0.0), vec3(0.0, 1.0, 0.0)));\n\n    return v;\n}\n\n// Function to calculate hard shadows\nfloat Shadow(const vec3 fragCoord, const vec3 lightPosition, float objectRadius) {\n    // Shadow radius\n    float shadowRadius = 0.0; // Adjust as needed for your scene\n\n    // Light direction\n    vec3 lightDir = normalize(lightPosition - fragCoord);\n\n    // Ray step size\n    float stepSize = 0.01; // Adjust as needed for your scene\n\n    // Traverse ray from light towards pixel\n    for (float t = stepSize; t < shadowRadius; t += stepSize) {\n        // Position on the ray\n        vec3 pointOnRay = fragCoord + t * lightDir;\n\n        // Distance from point on ray to light source\n        float distanceToLight = length(pointOnRay - lightPosition);\n\n        // If distance is less than object radius, point is in shadow\n        if (distanceToLight < objectRadius) {\n            return 0.0; // Point in shadow\n        }\n    }\n\n    return 1.0; // Point lit\n}\n\n// Fonction Fibonacci pour générer les points sur une sphère\nvec3 FibonacciSpherePoint(int i, int n) {\n    float phi = float(i) * (3.1415926535897932384626433832795 / ((1.0 + sqrt(5.0)) / 2.0));\n    float y = 1.0 - float(i) / float(n - 1) * 2.0;\n    float radius = sqrt(1.0 - y * y);\n\n    float x = cos(phi) * radius;\n    float z = sin(phi) * radius;\n\n    return vec3(x, y, z);\n}\n\n\n// Fonction pour générer des directions unitaires sur un hémisphère\nvec3 Hemisphere(int i, int n) {\n    float phi = float(i) * (3.1415926535897932384626433832795 / float(n));\n    float theta = acos(sqrt(float(i) / float(n)));\n    float x = cos(phi) * sin(theta);\n    float y = sin(phi) * sin(theta);\n    float z = cos(theta);\n    return vec3(x, y, z);\n}\n\n// Fonction d'occlusion ambiante\nfloat AmbientOcclusion(vec3 fragCoord, vec3 normal, int n, float maxDistance) {\n    float occlusion = 0.0;\n    float radius = 0.1; // Rayon pour tester l'occlusion ambiante, ajusté\n\n    for (int i = 0; i < n; i++) {\n        vec3 direction = Hemisphere(i, n);\n\n        // Rayon dans la direction de l'hémisphère\n        vec3 ray = fragCoord + radius * direction;\n\n        // Calculer la distance au point le long du rayon\n        float distance = length(ray - fragCoord);\n\n        // Estimation de l'occlusion\n        if (distance < maxDistance) {\n            float dotProduct = dot(normal, direction);\n            occlusion += max(dotProduct, 0.0);\n        }\n    }\n\n    // Normaliser l'occlusion en fonction du nombre de points et retourner une valeur dans [0, 1]\n    occlusion /= float(n);\n    return clamp(occlusion, 0.0, 1.0);\n}\n\nvec3 ObjectNormal(vec3 p)\n{\n    const float eps = 0.001;\n    vec3 n;\n    float v = object(p);\n    n.x = object(vec3(p.x + eps, p.y, p.z)) - v;\n    n.y = object(vec3(p.x, p.y + eps, p.z)) - v;\n    n.z = object(vec3(p.x, p.y, p.z + eps)) - v;\n    return normalize(n);\n}\n\nfloat SphereTrace(Ray ray, float e, out bool h, out int s)\n{\n    h = false;\n    float t = 0.0;\n  \n    for (int i = 0; i < Steps; i++)\n    {\n        s = i;\n        vec3 p = Point(ray, t);\n        float v = object(p);\n      \n        if (v < 0.0)\n        {\n            h = true;\n            break;\n        }\n      \n        t += max(Epsilon, v);\n      \n        if (t > e)\n        {\n            break;\n        }\n    }\n  \n    return t;\n}\n\nvec3 Background(vec3 d)\n{\n    return mix(vec3(0.45, 0.55, 0.99), vec3(0.65, 0.69, 0.99), d.z * 0.5 + 0.5);\n}\n\nfloat SoftShadow(vec3 fragCoord, vec3 lightPosition, float objectRadius, int n) {\n    float shadow = 0.0;\n    float radius = 1.0; // Rayon pour tester l'ombre douce, ajusté\n\n    // Générer les points sur une sphère avec la suite de Fibonacci\n    for (int i = 0; i < n; i++) {\n        vec3 pointOnSphere = FibonacciSpherePoint(i, n);\n        vec3 pointOnRay = fragCoord + radius * pointOnSphere;\n\n        // Distance au point de lumière\n        float distanceToLight = length(pointOnRay - lightPosition);\n\n        // Si la distance est inférieure au rayon de l'objet, ajouter à l'ombre\n        if (distanceToLight < objectRadius) {\n            shadow += 1.0;\n        }\n    }\n\n    // Normaliser l'ombre en fonction du nombre de points et retourner une valeur dans [0, 1]\n    shadow /= float(n);\n    return clamp(shadow, 0.0, 1.0);\n}\n\nvec3 Shade(vec3 p, vec3 n, vec3 e)\n{\n    const vec3 lp = vec3(5.0, 10.0, 20.0); // Position de la lumière, ajustée\n    vec3 l = normalize(lp - p);\n    vec3 ambient = vec3(0.25) + vec3(0.25) * Background(n);\n    float shadow = SoftShadow(p, lp, 0.2, 10); // Nombre de points pour l'ombre douce, ajusté\n    float ao = AmbientOcclusion(p, n, 20, 1.0); // Nombre de points pour l'occlusion ambiante, ajusté\n    vec3 diffuse = vec3(0.35) * clamp(dot(n, l), 0.0, 1.0) * vec3(1.0);\n    vec3 r = reflect(e, n);\n    vec3 specular = vec3(0.15) * pow(clamp(dot(r, l), 0.0, 1.0), 35.0) * vec3(1.0);\n    \n    // Combinaison des ombres et de l'occlusion ambiante\n    vec3 c = ambient + (1.0 - shadow) * (ao * diffuse + specular);\n    \n    return c;\n}\n\nvoid mainImage(out vec4 color, in vec2 pxy)  \n{\n    // Pixel\n    vec2 pixel = (-iResolution.xy + 2.0 * pxy) / iResolution.y;\n\n    // Mouse\n    vec2 m = iMouse.xy / iResolution.xy;\n  \n    // Camera\n    Ray ray = CreateRay(m, pixel);\n  \n    // Hit and number of steps\n    bool hit;\n    int s;\n  \n    // Trace ray\n    float t = SphereTrace(ray, 75.0, hit, s);\n  \n    // Shade background\n    vec3 rgb = Background(ray.rd);\n  \n    if (hit)\n    {\n        // Position\n        vec3 p = Point(ray, t);\n    \n        // Compute normal\n        vec3 n = ObjectNormal(p);\n    \n        // Define different values of n to test\n        int[] nValues = int[](10, 50, 100, 200); // Example values, adjust as needed\n        \n        // Test different n values for Soft Shadows and Ambient Occlusion\n        for (int i = 0; i < nValues.length(); i++) {\n            int nSoftShadow = nValues[i];\n            int nAmbientOcclusion = nValues[i];\n            \n            // Calculate shadow\n            float shadow = Shadow(p, vec3(5.0, 10.0, 20.0), 0.2); // Adjust parameters as needed\n            \n            // Calculate ambient occlusion with different n values\n            float ao = AmbientOcclusion(p, n, nAmbientOcclusion, 2.0); // Adjust parameters as needed\n            \n            // Shade object with light\n            vec3 c = Shade(p, n, ray.rd);\n            \n            // Apply shadow and ambient occlusion\n            c = c * (1.0 - shadow) * ao;\n            \n            // Alternatively, if you want to just apply the shadow and ambient occlusion without modifying the object's color:\n            // c *= (1.0 - shadow) * ao;\n            \n            rgb += c; // Accumulate results for different n values\n        }\n        \n        // Normalize by the number of tests (average)\n        rgb /= float(nValues.length());\n    }\n    \n    color = vec4(rgb, 1.0);\n}*/\n// Modeling - 2024.02.06\n// Eric Galin\n\n// Rotation matrix around z axis\n// a : Angle\nmat3 Rz(float a)\n{\n  float sa=sin(a);float ca=cos(a);\n  return mat3(ca,sa,0.,-sa,ca,0.,0.,0.,1.);\n}\n\nstruct Ray {\nvec3 ro; // Ray origin\nvec3 rd; // Direction\n};\n\n// Compute a point on the ray\n// ray : Ray\n// t   : depth\nvec3 Point(Ray ray,float t)\n{\n  return ray.ro+t*ray.rd;\n}\n\n// Compute the ray\n//     m : Mouse position\n//     p : Pixel\nRay CreateRay(vec2 m,vec2 p)\n{\n  float a=3.*3.14*m.x;\n  float le=3.5;\n \n  // Origin\n  vec3 ro=vec3(35.,0.,10.)*Rz(a);\n \n  // Target point\n  vec3 ta=vec3(0.,0.,3.);\n \n  // Orthonormal frame\n  vec3 w=normalize(ta-ro);\n  vec3 u=normalize(cross(w,vec3(0.,0.,1.)));\n  vec3 v=normalize(cross(u,w));\n  vec3 rd=normalize(p.x*u+p.y*v+le*w);\n  return Ray(ro,rd);\n}\n\n// Primitives\n\n// Sphere\n// p : point\n// c : center of skeleton\n// r : radius\nfloat Sphere(vec3 p,vec3 c,float r)\n{\n  return length(p-c)-r;\n}\n\n// Plane\n// p : point\n// c : center of skeleton\n// n : Normal\nfloat Plane(vec3 p,vec3 c,vec3 n)\n{\n  return dot(p-c,n);\n}\n\n// Operators\n\n// Union\n// a,b : field function of left and right sub-trees\nfloat Union(float a,float b)\n{\n  return min(a,b);\n}\n\n// Union, extension to four sub-trees\n// a,b,c : field function of left and right sub-trees\nfloat Union(float a,float b,float c,float d)\n{\n  return min(min(a,b),min(c,d));\n}\n\n// Difference\n// a,b : field function of left and right sub-trees\nfloat Difference(float a,float b)\n{\n  return max(a,-b);\n}\n\n// Potential field of the object\n// p : point\nfloat object(vec3 p)\n{\n\n  float v=  Sphere(p,vec3(3.,0.,6.),4.);\n\n  v=Union(v,\n    Sphere(p,vec3(0.,2.,3.),3.));\n \n  float d=Union(\n      Sphere(p,vec3(5.,1.,5.),3.),\n    Sphere(p,vec3(-1.,1.,6.),3.),\n    Sphere(p,vec3(-1.,2.,2.),2.),\n    Sphere(p,vec3(1.,1.,6.),2.));\n  v=Difference(v,d);\n \n  v=Union(v,\n    Plane(p,vec3(0.,0.,-1.),vec3(0.,0.0,1.0))\n  );\n \n  return v;\n}\n\n\n\n\n// Analysis of the scalar field\n\nconst int Steps=200;// Number of steps\nconst float Epsilon=.01;// Marching epsilon\n\n// Object normal\n// p : point\nvec3 ObjectNormal(vec3 p)\n{\n  const float eps=.001;\n  vec3 n;\n  float v=object(p);\n  n.x=object(vec3(p.x+eps,p.y,p.z))-v;\n  n.y=object(vec3(p.x,p.y+eps,p.z))-v;\n  n.z=object(vec3(p.x,p.y,p.z+eps))-v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\n// ray : Ray\n// e : Maximum distance\n// h : hit\n// s : Number of steps\nfloat SphereTrace(Ray ray,float e,out bool h,out int s)\n{\n  h=false;\n \n  // Start at the origin\n  float t=0.;\n \n  for(int i=0;i<Steps;i++)\n  {\n    s=i;\n    vec3 p=Point(ray,t);\n    float v=object(p);\n    // Hit object\n    if(v<0.)\n    {\n      h=true;\n      break;\n    }\n    // Move along ray\n    t+=max(Epsilon,v);\n    // Escape marched too far away\n    if(t>e)\n    {\n      break;\n    }\n  }\n  return t;\n}\n\n// Lighting\n\n// Background color\n// d : Ray direction\nvec3 Background(vec3 d)\n{\n  return mix(vec3(.45,.55,.99),vec3(.65,.69,.99),d.z*.5+.5);\n}\n// Ombre\n// p : Le point pour lequel on vérifie s'il y a une ombre.\n// lum : La position de la source de lumière.\n\nbool ombre(vec3 p,vec3 lum)\n{\n \n Ray ray=Ray(p,normalize(lum-p));\n bool hit;\n int s;\n float t=SphereTrace(ray,length(lum-p),hit,s);\n \n return hit;\n \n}\n\n// ombredure\n// p : Le point pour lequel on calcule l'ombre douce.\n// lump : La position de la source de lumière.\n// tailleL : La taille de la source de lumière.\n// n : Le nombre d'échantillons utilisés pour calculer l'ombre douce.\nfloat Hard_shadow(vec3 p, vec3 s)\n{\n \n bool hit;\n int s_steps;\n SphereTrace(Ray(p, normalize(s - p)), length(s - p), hit, s_steps);\n\n if (hit)\n {\n   return 0.0;\n }\n   else\n    {\n        return 1.0;\n    }\n}\n\n\n\n// Shading and lighting\n// p : Point\n// n : Normal at point\n// e : Eye direction\n\nvec3 Shade(vec3 p,vec3 n,vec3 e)\n{\n  // Point light\n  const vec3 lp=vec3(5.,0.,30.);\n \n  // Light direction to point light\n  vec3 l=normalize(lp-p);\n \n  // Ambient color\n  vec3 ambient=.15+.15*Background(n);\n \n  // Shadow computation en utilisant la fonction Hard_shadow pour calculer les ombres dures\nfloat shadow = Hard_shadow(p + 0.1 * n, lp);\n  // Phong diffuse\n  vec3 diffuse=.35*clamp(dot(n,l),0.,1.)*vec3(-6.,6.,6.);\n \n  // Specular\n  vec3 r=reflect(e,n);\n  vec3 specular=.15*pow(clamp(dot(r,l),0.,1.),35.)*vec3(2.,3.,3.);\n  vec3 c=ambient+shadow*(diffuse+specular);\n  return c;\n}\n\n// Image\nvoid mainImage(out vec4 color,in vec2 pxy)  \n{\n  // Pixel\n  vec2 pixel=(-iResolution.xy+2.*pxy)/iResolution.y;\n\n  // Mouse\n  vec2 m=iMouse.xy/iResolution.xy;\n \n  // Camera\n  Ray ray=CreateRay(m,pixel);\n \n \n  // Hit and number of steps\n  bool hit;\n  int s;\n \n   // Trace ray\n float t=SphereTrace(ray,75.,hit,s);\n \n  // Shade background\n  vec3 rgb=Background(ray.rd);\n \n  if(hit)\n  {\n    // Position\n    vec3 p=Point(ray,t);\n    \n    // Compute normal\n    vec3 n=ObjectNormal(p);\n    \n    // Shade object with light\n    rgb=Shade(p,n,ray.rd);\n  }\n    \n  color=vec4(rgb,1.);\n}\n\n\n","name":"Image","description":"","type":"image"}]}