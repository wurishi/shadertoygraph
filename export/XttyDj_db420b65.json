{"ver":"0.1","info":{"id":"XttyDj","date":"1534116851","viewed":152,"name":" smin3 - three way smin demo ","username":"TLC123","description":"Slight expansion of https://www.shadertoy.com/view/4sSyRy\n1  To the left: regular nested smin, asymmetric result. (Thanks Doug for pointing this example out.)\n2  Middle: smin3 sorted nested smin acending order, rounded result\n3  Right:  -||- ..decending","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d","sort","smin","3way","threeway"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define time iTime\n#define tau 6.28318530718\n\n//  Slight expansion of https://www.shadertoy.com/view/4sSyRy\n//  Symetric multi smin\n\n//  Expandable to any n distances if efficient sorting can be found.\n//  Really only the smallest 3-4 distances needs to be found to cover most cases. \n\n//  To the left: regular nested smin, asymmetric result. (Thanks Doug for pointing this example out.)\n//  Middle: smin3 sorted nested smin acending order, expected rounded result\n//  Right: smin3 sorted nested smin decending order, Blended but sharp result\n\n\nfloat smin(float a, float b, float k)\n{\n\tfloat h = clamp(.5 + .5*(a-b)/k, 0., 1.);\n\treturn mix(a, b, h) - k*h*(1.-h);\n}\nfloat smin3maxfirst(float a, float b, float c, float k)\n{\n    float mini=min(a,min(b,c));\n    float maxi=max(a,max(b,c));\n\tfloat medi=(a+b+c)-(mini+maxi);\n    return smin( mini,smin(maxi, medi, k), k);  // combined from max to min \n    //return smin( maxi,smin(mini, medi, k), k); // gives diffrent result than from min to max\n    //return smin( a,smin(b,c, k), k); // Bad 3 way smin \n    \n}\nfloat smin3(float a, float b, float c, float k)\n{\n    float mini=min(a,min(b,c));\n    float maxi=max(a,max(b,c));\n\tfloat medi=(a+b+c)-(mini+maxi);\n   // return smin( mini,smin(maxi, medi, k), k);  // combined from max to min \n    return smin( maxi,smin(mini, medi, k), k); // gives diffrent result than from min to max\n    //return smin( a,smin(b,c, k), k); // Bad 3 way smin \n    \n}\nfloat smin3bad(float a, float b, float c, float k)\n{\n   // float mini=min(a,min(b,c));\n   // float maxi=max(a,max(b,c));\n   // float medi=(a+b+c)-(mini+maxi);\n   // return smin( mini,smin(maxi, medi, k), k);  // combined from max to min \n    //return smin( maxi,smin(mini, medi, k), k); // gives diffrent result than from min to max\n    return smin( a,smin(b,c, k), k); // Bad 3 way smin \n    \n}\n\n\n\nfloat map(vec2 uv)\n{float rs=0.75;\n    float rv=.125*rs;float rr=.5;\nfloat r=(abs(sin(time+3.) )*0.35+0.5)*rs;\n\tfloat ac0 = length(uv-vec2(0.,0.25)-vec2( r*rr*sin(1.*time),\t-r*rr*cos(1.*time)\t))-rv;\n\tfloat ac1 = length(uv-vec2(0.,0.25)-vec2( r*rr*sin(1.*time+tau/3.),\t-r*rr*cos(1.*time+tau/3.)\t))-rv;\n\tfloat ac2 = length(uv-vec2(0.,0.25)-vec2( r*rr*sin(1.*time+tau*2./3.),\t-r*rr*cos(1.*time+tau*2./3.)\t))-rv;\n\tfloat bc0 = length(uv-vec2(.75,-0.25)-vec2( r*rr*sin(1.*time),\tr*rr*cos(1.*time)\t))-rv;\n\tfloat bc1 = length(uv-vec2(.75,-0.25)-vec2( r*rr*sin(1.*time+tau/3.),\tr*rr*cos(1.*time+tau/3.)\t))-rv;\n\tfloat bc2 = length(uv-vec2(.75,-0.25)-vec2( r*rr*sin(1.*time+tau*2./3.),\tr*rr*cos(1.*time+tau*2./3.)\t))-.1;\n\tfloat cc0 = length(uv-vec2(-.75,-0.25)-vec2( r*rr*sin(1.*time),\tr*rr*cos(1.*time)\t))-rv;\n\tfloat cc1 = length(uv-vec2(-.75,-0.25)-vec2( r*rr*sin(1.*time+tau/3.),\tr*rr*cos(1.*time+tau/3.)\t))-rv;\n\tfloat cc2 = length(uv-vec2(-.75,-0.25)-vec2( r*rr*sin(1.*time+tau*2./3.),\tr*rr*cos(1.*time+tau*2./3.)\t))-rv;\nfloat prop1= smin3( ac0,ac1,ac2,.75*rs);\nfloat propmax= smin3maxfirst( bc0,bc1,bc2,.75*rs);\nfloat propbad= smin3bad( cc0,cc1,cc2,.75*rs);\n    return smin3(prop1,propmax,propbad,0.025);\n   // return prop1;\n}\n\nvec3 draw_line(float d, float thickness) {\n  const float aa = 3.0;\n  return vec3(smoothstep(0.0, aa / iResolution.y, max(0.0, abs(d) - thickness)));\n}\n\nvec3 draw_line(float d) {\n  return draw_line(d, 0.0025);\n}\n\nfloat draw_solid(float d) {\n  return smoothstep(0.0, 3.0 / iResolution.y, max(0.0, d));\n}\n\nvec3 draw_distance(float d) {\n  float t = clamp(d * 0.85, 0.0, 1.0);\n  vec3 grad = mix(vec3(1, 0.8, 0.5), vec3(0.3, 0.8, 1), t);\n\n  float d0 = abs(1.0 - draw_line(mod(d + 0.1, 0.2) - 0.1).x);\n  float d1 = abs(1.0 - draw_line(mod(d + 0.025, 0.05) - 0.025).x);\n  float d2 = abs(1.0 - draw_line(d).x);\n  vec3 rim = vec3(max(d2 * 0.85, max(d0 * 0.25, d1 * 0.06125)));\n\n  grad -= rim;\n  grad -= mix(vec3(0.05, 0.35, 0.35), vec3(0.0), draw_solid(d));\n\n  return grad;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = ((2.*fragCoord.xy-iResolution.xy)/iResolution.y)/1.4;\n\tfloat t = 1./iResolution.y;\n float d=map(uv);\n\tfloat c = smoothstep(-t,t,d)-length(uv)/8.;\n    \tfloat c1 = d;//smoothstep(-1.,1.,d)-length(uv)/8.;\n\t\tfragColor = mix(vec4(  c),vec4(   vec2(cos(c1*150.)),sign(d),1.),sin(iTime*.2)-.25);\n\n\t //fragColor =  vec4(   draw_distance(  d*2.),0.  );\n}\n","name":"Image","description":"","type":"image"}]}