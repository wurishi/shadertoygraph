{"ver":"0.1","info":{"id":"tl2fR1","date":"1598357279","viewed":83,"name":"Mein march","username":"akoskovacs","description":"Ray marching","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MARCH_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .1\n\nfloat distance(vec3 p)\n{\n    vec4 sphere = vec4(0, 1, 6, 1);\n    float sphereDist = length(p - sphere.xyz) - sphere.w; // len(p-sphere) - radius(sphere)\n    float planeDist = p.y;\n    \n    return min(sphereDist, planeDist);\n    \n}\n\nvec3 deriveNormal(vec3 p)\n{\n    float d = distance(p);\n    vec2 e = vec2(.01, 0);\n    vec3 n = d - vec3(\n        distance(p - e.xyy),\n        distance(p - e.yxy),\n        distance(p - e.yyx));\n    \n    return normalize(n);\n}\n\nfloat getLight(vec3 p)\n{\n    vec3 lightPos = vec3(0, 5, 1);\n    lightPos.xz += vec2(sin(iTime), cos(iTime))*10.;\n    vec3 l = normalize(lightPos - p);\n    vec3 n = deriveNormal(p);\n    float dif = clamp(dot(n, l), 0., 1.);\n    return dif;\n}\n\nfloat rayMarchDistance(vec3 rayOrig, vec3 rayDir)\n{\n\tfloat distOrig = 0.;\n    for (int i = 0; i < MARCH_STEPS; i++) {\n    \tvec3 p = rayOrig + rayDir * distOrig;\n        float sceneDist = distance(p);\n        distOrig += sceneDist;\n        if (distOrig > MAX_DIST || sceneDist < SURF_DIST) {\n            break;\n        }\n        \n    }\n    \n    return distOrig;\n}\n    \n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (fragCoord - iResolution.xy*.5)/iResolution.y;\n\n    vec3 col = vec3(0);\n        \n    vec3 camPos = vec3(0, 1, 0);\n    vec3 rayDir = normalize(vec3(uv.x, uv.y, 1));\n    float d = rayMarchDistance(camPos, rayDir);\n    vec3 p = camPos + rayDir * d;\n    float diffused = getLight(p);\n    \n    col = vec3(diffused);\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}