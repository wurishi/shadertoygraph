{"ver":"0.1","info":{"id":"4cScDR","date":"1722111096","viewed":33,"name":"Fork Glowing wa sleeplessm 792","username":"sleeplessmonk","description":"Big glowing fractal","likes":1,"published":1,"flags":4,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"XcfcWl","parentname":"Glowing warping fractal"},"renderpass":[{"inputs":[{"id":"XdXGRr","filepath":"/presets/mic.png","previewfilepath":"/presets/mic.png","type":"mic","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float hash(float n) { return fract(sin(n) * 43758.5453123); }\n\nvec3 palette(float t) {\n    return 0.5 + 0.5 * cos(6.28318 * (vec3(0.5, 0.5, 0.5) * t + vec3(0.0, 0.1, 0.2)));\n}\n\nmat2 rotate2D(float angle) {\n    return mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec2 mousePos = (vec2(iMouse) * 2.0 - iResolution.xy) / iResolution.y;\n\n    // Initial distance calculation for UV manipulation\n    float md = length(uv - mousePos);\n    md -= 0.2;\n    md = abs(md);\n    md = 0.01 / md;\n\n    // Apply initial transformations\n    for (float i = 0.0; i < 7.0; i++) {\n        uv = abs(uv);\n        uv.x -= 0.6;\n        uv *= 1.4;\n        float angle = (iTime + (i * radians(45.0))) * 0.5;\n        uv *= rotate2D(angle + (i * 0.2));\n    }\n\n    // Distance calculation for color modulation\n    float d = length(uv);\n    d -= 0.05;\n    d = abs(d);\n    d = 0.5 / d;\n\n    // Base color using the palette function\n    float t = iTime * 0.1;\n    vec3 col = palette(t + d) * 0.5 + palette(t * 0.7) * 0.5;\n\n    // Sacred geometry and fractal morphing\n    vec2 p = uv;\n    for (int i = 0; i < 5; i++) {\n        p = abs(p) / dot(p, p) - 0.5;\n        p *= rotate2D(iTime * 0.1 + float(i));\n    }\n\n    // Color modulation based on fractal geometry\n    float f = length(p);\n    col += palette(f * 0.5 + iTime * 0.2) * 0.5;\n\n    // Final color output\n    fragColor = vec4(col * d, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}