{"ver":"0.1","info":{"id":"XlfBDM","date":"1511996345","viewed":328,"name":"Toon Water","username":"rafaelcastrocouto","description":"water shader WIP","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["voronoi"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\n// 0 = Antialias the water texture\n// 1 = Do not antialias the water texture\n\n#define FAST_CIRCLES 1\n#define ANIMATE 1\n\n\nvec2 hash2( vec2 p ) {\n\t// texture based white noise\n\treturn textureLod( iChannel0, (p+0.5)/256.0, 0.0 ).xy;\n\t\n    // procedural white noise\t\n\t//return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);\n}\n\nvec3 voronoi( in vec2 x ) {\n    vec2 n = floor(x);\n    vec2 f = fract(x);\n\n    //----------------------------------\n    // first pass: regular voronoi\n    //----------------------------------\n\tvec2 mg, mr;\n\n    float md = 4.0;\n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ ) {\n        vec2 g = vec2(float(i),float(j));\n\t\tvec2 o = hash2( n + g );\n#ifdef ANIMATE\n        o = 0.5 + 0.5*sin( 0.1 * iTime + 6.2831*o );\n#endif\t\n        vec2 r = g + o - f;\n        float d = dot(r,r);\n\n        if( d<md+0.5 ) {\n            md = d;\n            mr = r;\n            mg = g;\n        }\n    }\n\n    //----------------------------------\n    // second pass: distance to borders\n    //----------------------------------\n   \n    md = 4.0;\n    for( int j=-2; j<=2; j++ )\n    for( int i=-2; i<=2; i++ ) {\n        vec2 g = mg + vec2(float(i),float(j));\n\t\tvec2 o = hash2( n + g );\n#ifdef ANIMATE\n        o = 0.5 + 0.5*sin( 0.1 * iTime + 6.2831*o );\n#endif\t\n        vec2 r = g + o - f;\n\n        if( dot(mr-r,mr-r)>0.5 ) \n            md = min( md, dot( mr+r, normalize(r-mr) ) );\n    }\n\n    return vec3( md, mr );\n}\n\nfloat circle(vec2 pos, vec2 c, float s) {\n    c = abs(pos - c);\n    c = min(c, 1.0 - c);\n#if FAST_CIRCLES\n    return dot(c, c) < s ? 1.0 : 0.0;\n#else\n    return smoothstep(0.0, 0.04, sqrt(s) - sqrt(dot(c, c)));\n#endif\n}\n\nfloat vos = 4.0;\nfloat circleArray (vec2 uv, vec3 vo) {\n    float s = 24.0;\n    float c = 0.0;\n    float r = vo.x;\n    for( int j=0; j<=int(s); j++ )\n    for( int i=0; i<=int(s); i++ ) {\n        vec2 rc = vec2(float(j)/s, float(i)/s);\n        vec2 su = abs(uv-rc);\n        float l = 0.15;\n        if (su.x < l && su.y < l) {\n            vec3 vo = voronoi( vos*rc );\n            r = vo.x;\n            c += circle(uv, rc, (0.2 - r) * 0.0005);\n        }\n    }\n    return c;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord/iResolution.xx;\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    vec3 vo = voronoi( vos*p );\n    float c =  circleArray(p, vo);\n    fragColor = vec4( mix(vec3(0.3,0.5,0.8),vec3(1.0), smoothstep( 0.0, 0.1,  c)), 1.0);\n}\n","name":"Image","description":"","type":"image"}]}