{"ver":"0.1","info":{"id":"ld2BWG","date":"1502030625","viewed":156,"name":"Floating bubbles in room.","username":"Cierpliwy","description":"Simple shader with shadows.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["3d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX 10.0\n#define N 3.0\n#define PI 3.14159265359\n#define time iTime\n\nfloat map(vec3 p) {\n    float d = MAX;\n    for (float i = 0.; i < N; i++) {\n        for (float j = 0.; j < N; j++) {\n            float a = PI * i / N + time * 0.1;\n            float b = 2.0 * PI * j / N;\n            vec3 p2 = vec3(sin(a+time*0.1)*sin(b+time), sin(a)*cos(b), cos(a));\n        \td = min(d, length(p-p2) - 0.2);\n        }\n    }\n\n    d += 0.01 * (sin(time + 20.*p.x + p.z) + cos(time + 20.*p.y));\n    d = min(d, abs(p.y + 1.5));\n    d = min(d, abs(p.z - 3.5));\n    d = min(d, abs(abs(p.x) - 3.5));\n    d = min(d, length(p-vec3(2,-1.4,0)) - 1.0 + sin(p.y*10.)*0.1);\n    return d;\n}\n\nfloat march(vec3 o, vec3 r) {\n    float t = 0.0;\n    for(int i = 0; i < 64; i++) {\n        vec3 p = o + r  *t;\n \t\tfloat d = map(p);\n        t += d * 0.47;\n        if (t > MAX || t < 0.01) break;\n    }\n    return t;\n}\n\nfloat shadow(vec3 o, vec3 r) {\n    float t = 0.0;\n    for(int i = 0; i < 32; i++) {\n        vec3 p = o + r  *t;\n \t\tfloat d = map(p);\n        t += d * 0.4;\n        if (t > MAX || t < 0.01) break;\n    }\n    return t;\n}\n\nfloat light(vec3 o, vec3 r, vec3 p2) {\n    float t = 0.0;\n    for(int i = 0; i < 8; i++) {\n        vec3 p = o + r * t;\n \t\tfloat d = length(p - p2) - 0.01;\n        t += d * 0.9;\n    }\n    return t;\n}\n\nvec3 normal(in vec3 pos)\n{\n\tvec3 eps = vec3(0.0001, 0.0, 0.0);\n\tvec3 nor = vec3(\n\t   map(pos+eps.xyy) - map(pos-eps.xyy),\n\t   map(pos+eps.yxy) - map(pos-eps.yxy),\n\t   map(pos+eps.yyx) - map(pos-eps.yyx) );\n\treturn normalize(nor);\n}\n\nfloat fog(in float t) {\n    return 1.0 / (1.0 + t * t * 0.05);\n}\n    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    // Normal eye\n    vec3 r = normalize(vec3(uv, 1.0));\n    vec3 o = vec3(0.0, 0.0, -3.0);\n    \n    // Get distance and hit point\n    float d = march(o, r);\n    vec3 p = o + r * d;\n    \n    // Shadow eye\n    vec3 so = vec3(sin(time), cos(time) + 1.0, 0.5*sin(time) - 0.0);\n    \n    // Get shadow ray parameters\n    vec3 srt = p - so;\n    vec3 sr = normalize(srt);\n    float sd = srt.x / sr.x;\n    float sd2 = shadow(so, sr);\n    float diff = clamp(100.0 * (sd - sd2), 0.0, 1.0);\n\n    // Calculate color\n    vec3 color = vec3(fog(d));\n    \n    // Mix color with shadow\n    color = (1.0 - diff * 0.2) * color;\n    \n    // Draw Light Source\n    float ld = light(o, r, so);\n    ld = ld - length(p - so);\n    ld = 1.0 - clamp(ld, 0.0, 1.0);\n    color = (vec3(1., 1., 1.) * ld) + color * (1.0 - ld);\n    \n    // Draw light\n    vec3 n = normal(p);\n    vec3 ray = normalize(so - p);\n    vec3 r2 = ray - 2.0 * dot(ray, n) * n;\n    float ra = clamp(dot(r, r2), 0.0, 1.0);\n    ra = ra * 0.2 * (1.0 - diff);\n    color = (vec3(0., 1., 1.) * ra) + color * (1.0 - ra);\n    \n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}