{"ver":"0.1","info":{"id":"XXjcz1","date":"1727014828","viewed":41,"name":"Dynamic heartbeat monitor ","username":"HalbFettKaese","description":"First attempt at making a heartbeat monitor.\nUse cursor to adjust heart rate.","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["heartbeat"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float lineSegment(vec2 coord, vec2 p0, vec2 p1, float r) {\n    coord -= p0;\n    p1 -= p0;\n    float t = dot(coord, p1)/dot(p1, p1);\n    t = clamp(t, 0.0, 1.0);\n    float d = distance(coord, p1 * t);\n    return 1. - smoothstep(0.0, r, d);\n}\n\nvec2 getPoint(float x) {\n    float y = texelFetch(iChannel0, ivec2(mod(x, iResolution.x), 0), 0).r;\n    return vec2(x, (0.5 * y + 0.5) * iResolution.y);\n}\n\nvoid drawGraph(inout vec3 col, vec2 coord, float t) {\n    // Light up line to the left of cursor\n    float light = smoothstep(0.9, 1.0, t);\n    \n    vec3 lineCol = mix(vec3(0.4, 0.9, 0.6), vec3(1), light);\n    float r = mix(2.5, 6.0, light);\n    \n    float x = floor(coord.x - r);\n    vec2 p0 = getPoint(x);\n    float v = 0.0;\n    for (x += 1.0; x <= ceil(coord.x + r); x += 1.0) {\n        vec2 p1 = getPoint(x);\n        float v1 = lineSegment(coord, p0, p1, r);\n        v = max(v, v1);\n        p0 = p1;\n    }\n    // Lay shadow to the right of cursor\n    v *= smoothstep(0.1, .5, t);\n    \n    col = mix(col, lineCol, v);\n}\n\nvoid drawGrid(inout vec3 col, vec2 coord) {\n    vec2 uv = (coord - 0.5 * iResolution.xy) / iResolution.xx;\n    uv *= 40.0;\n    float pixel = dFdx(uv.x);\n    uv -= 0.5;\n    uv = fract(uv);\n    float xLine = abs(uv.x - 0.5);\n    float yLine = abs(uv.y - 0.5);\n    float v = min(xLine, yLine);\n    v = 1. - smoothstep(0.0, pixel * 1.5, v);\n    col = mix(col, vec3(0.2, 0.6, 0.3), v);\n}\n\nfloat vignette(vec2 coord) {\n    vec2 uv = coord / iResolution.xy - 0.5;\n    \n    uv = 1. - abs(uv) * 2.;\n    return 1. - 2. / (1./uv.x + 1./uv.y);\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xx;\n\n    // Time varying pixel color\n    \n    float t = fract(uv.x - fract(iTime * graphSpeed) + 0.01);\n    \n    vec3 col = vec3(0.1, 0.4, 0.2);\n    \n    col = mix(col, vec3(0), vignette(fragCoord));\n    \n    drawGrid(col, fragCoord);\n    \n    drawGraph(col, fragCoord, t);\n    \n    col *= mix(1.0, 0.3, pow(vignette(fragCoord), 4.));\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Rate in Hz\n    float heartRate = mix(1.0, 3.0, iMouse.x / iResolution.x);\n\n    vec2 uv = fragCoord / iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n    vec4 marker0 = texelFetch(iChannel0, ivec2(0, 1), 0);\n    float currentBeat = marker0.r;\n    float currentRate = marker0.g;\n    \n    if (int(fragCoord.y) == 0) {\n        if (fract(iTime * graphSpeed - uv.x) < iTimeDelta * graphSpeed) {\n            float v = currentBeat + (fract(uv.x - iTime * graphSpeed + 0.5) - 0.5) * currentRate / graphSpeed;\n            \n            v = f(v);\n            fragColor.rgb = vec3(v);\n        }\n    }\n    if (ivec2(fragCoord.xy) == ivec2(0, 1)) {\n        currentBeat += iTimeDelta * currentRate;\n        currentBeat = fract(currentBeat);\n        if (currentBeat <= iTimeDelta * currentRate) {\n            fragColor.g = heartRate;\n        }\n        fragColor.r = currentBeat;\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"\nfloat graphSpeed = 0.4;\n\nvoid function_line(float x, inout float y, vec2 p0, vec2 p1) {\n    if (x < p0.x || x > p1.x) {\n        return;\n    }\n    float t = (x-p0.x) / (p1.x-p0.x);\n    y = mix(p0.y, p1.y, t);\n}\n\nfloat f(float x) {\n    float y = 0.0;\n    function_line(x, y, vec2(0.25, 0.00), vec2(0.30, 0.07));\n    function_line(x, y, vec2(0.30, 0.07), vec2(0.35, 0.00));\n    function_line(x, y, vec2(0.44, 0.00), vec2(0.49, 0.60));\n    function_line(x, y, vec2(0.49, 0.60), vec2(0.51,-0.20));\n    function_line(x, y, vec2(0.51,-0.20), vec2(0.55, 0.00));\n    function_line(x, y, vec2(0.70,-0.00), vec2(0.85, 0.11));\n    function_line(x, y, vec2(0.85, 0.11), vec2(0.94, 0.0));\n    return y;\n}","name":"Common","description":"","type":"common"}]}