{"ver":"0.1","info":{"id":"msBfWt","date":"1690309595","viewed":75,"name":"pbNoise","username":"pb","description":"fluffy colors and scrolling land masses","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["perlin"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//philip.bertani@gmail.com\n//took the Perlin noise generator from a Visions of Chaos shader...\n\nfloat time;\n\n// ******************* taken from Visions of Chaos Sample Perlin Noise 1 *************//\nvec4 mod289(vec4 x){return x - floor(x * (1.0 / 289.0)) * 289.;}\nvec4 permute(vec4 x){return mod289(((x*37.0)+1.0)*x);}\nvec2 fade(vec2 t) {    \n    return t*t*(3.-2.*t);\n    //return t;  //without smoothstep it looks tiled which is kind of cool too\n}\nfloat cnoise(vec2 P) { // Classic Perlin noise\n    vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);\n    vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);\n    vec4 ix = Pi.xzxz, iy = Pi.yyww, fx = Pf.xzxz, fy = Pf.yyww;\n    vec4 i = permute(permute(ix) + iy);\n    vec4 gx = fract(i * (1.0 / 31.0)) * 2.0 - 1.0 ;\n    vec4 gy = abs(gx) - 0.5 ;\n    vec4 tx = floor(gx + 0.5);\n    gx = gx - tx;\n    vec2 g00=vec2(gx.x,gy.x),g10=vec2(gx.y,gy.y),g01=vec2(gx.z,gy.z),g11=vec2(gx.w,gy.w);\n    vec4 norm = (vec4(dot(g00,g00),dot(g01,g01),dot(g10,g10),dot(g11,g11)));\n    g00*=norm.x;g01*=norm.y;g10*=norm.z;g11*=norm.w;  \n    float n00 = dot(g00,vec2(fx.x, fy.x));\n    float n10 = dot(g10,vec2(fx.y, fy.y));\n    float n01 = dot(g01,vec2(fx.z, fy.z));\n    float n11 = dot(g11,vec2(fx.w, fy.w));\n    vec2 fade_xy = fade(Pf.xy);\n    vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x );\n    return 4.*mix(n_x.x, n_x.y, fade_xy.y); }\nfloat fbm(vec2 P, const int octaves, float lacunarity, float gain) {\n\tfloat sum = 0.0;\n\tfloat amp = 1.0;\n    vec2 pp = P;\n\tfor(int i=0 ; i < octaves; i++)\n\t{\n        amp *= gain; \n\t\tsum += amp * cnoise(pp);\n        pp *= lacunarity;\n    }\n\treturn sum; }\n\n// ******************* end of stuff taken from Visions of Chaos Sample Perlin Noise 1 *************//\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    \n    time = iTime/100.;\n    \n    vec2 p = (2.*fragCoord.xy - iResolution.xy) / iResolution.y ;\n\n    float l = 2.;\n    float g = 0.5;\n    \n    float c1 = fbm( p +vec2(0., time*12.) ,10,l,g),\n          c2 = fbm( p +vec2(0., time*41.) ,5,l,g),\n          c3 = fbm( p + vec2(c1,c2) + vec2(0.,time*10.) ,25,l*1.51,g/1.5);\n    \n    vec4 c = 1.3*vec4( c1, c1/3., 20.*c1*c1,1.); \n    c.g += .5*(c2 + c3)* (1.+abs(sin(iTime/6.)));\n    c.b += 5.*c.g*c.g;\n\n    float lx = iResolution.x / 15. + 300./sqrt(iResolution.x);\n \n    float myTime = mod(iTime,18.);\n    \n    int sceneNum = int( floor( (myTime)/6.) );\n    \n    //play with this stuff to make your own variations\n    switch (sceneNum) {\n     case 0:\n       c *= 5.;\n       fragColor =  1. - exp( -lx*fwidth(c)) + .03*lx*(.5*c + .3*c.b);\n       fragColor = 1. - exp(-sqrt(fragColor)*fragColor); \n       break;\n     case 1:\n       c *= 5.;\n       fragColor =  1. - exp( .3*lx*fwidth(c));\n       fragColor = 1. - exp(-2.*fragColor*fragColor); \n       break;\n     case 2:\n       c = sqrt(c);\n       fragColor =  1. - exp( -.7*lx*fwidth(c)) + .02*lx*(.5*c + .2*c.b);\n       fragColor = 1. - exp(-fragColor);\n       break;\n    }\n    \n}","name":"Image","description":"","type":"image"}]}