{"ver":"0.1","info":{"id":"4dc3DN","date":"1449588454","viewed":337,"name":"Sphere Cell Noise?","username":"reza","description":"Faking it till I make it. ","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["noise","sphere"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"#define TWO_PI 6.2831853072\n#define PI 3.14159265359\n#define HALF_PI 1.57079632679\n\nconst vec3 cGammaCorrection = vec3( 0.4545454545 );\n\nvec3 gamma( in vec3 color )\n{\n  return pow( color, cGammaCorrection );\n}\n\nvec4 gamma( in vec4 color )\n{\n  return vec4( gamma( color.rgb ), color.a );\n}\n\n\n//\n// Description : Array and textureless GLSL 2D simplex noise function.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n// \n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec2 mod289(vec2 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec3 permute(vec3 x) {\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nfloat snoise(vec2 v)\n  {\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\n                      0.024390243902439); // 1.0 / 41.0\n// First corner\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n\n// Other corners\n  vec2 i1;\n  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\n  //i1.y = 1.0 - i1.x;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  // x0 = x0 - 0.0 + 0.0 * C.xx ;\n  // x1 = x0 - i1 + 1.0 * C.xx ;\n  // x2 = x0 - 1.0 + 2.0 * C.xx ;\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n\n// Permutations\n  i = mod289(i); // Avoid truncation effects in permutation\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n\t\t+ i.x + vec3(0.0, i1.x, 1.0 ));\n\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n\n// Gradients: 41 points uniformly over a line, mapped onto a diamond.\n// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n\n// Normalise gradients implicitly by scaling m\n// Approximation of: m *= inversesqrt( a0*a0 + h*h );\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n\n// Compute final noise value at P\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\n\nconst vec3 light = vec3(0.0,0.0,1.0); //ui:-1.0,1.0,1.0\nconst float rad = 2.0;  //slider:0.0,2.0,1.0\nconst float shinyness = 6.0;  //slider:0.0,6.0,1.0\nconst float noiseScale = 0.10;  //slider:0.0,1.0,1.0\n\nfloat blinnPhongSpecular( vec3 lightDirection, vec3 viewDirection, vec3 surfaceNormal, float shininess ) {\n  vec3 H = normalize(viewDirection + lightDirection);\n  return pow(max(0.0, dot(surfaceNormal, H)), shininess);\n}\n\nvec3 sphere( in vec2 pos, in float radius, in vec2 fragCoord )\n{\n    vec2 uv = ( fragCoord.xy / iResolution.xy );\n  \tuv.x *= iResolution.x / iResolution.y;   \n    vec2 sp = - 1.0 + 2.0 * uv;\n  \tfloat r = 1.0 / radius;\n  \tvec2 p = - 1.0 * r + 2.0 * r * ( uv - pos );\n\n  vec3 pt = vec3( sp, 1.0 - length( p ) );\n  vec3 diff = pt - light;\n  float clr = clamp( dot( pt, light ), 0.0, 1.0 );\n  clr = blinnPhongSpecular( light, vec3( 0.0, 0.0, 1.0 ), pt, shinyness );\n  vec3 col = vec3( clr );\n  return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = iTime;\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    for( int i = 0; i < 40; i++) {\n\t    vec2 pos = vec2( snoise( noiseScale * vec2( float( i ) * 10.0, time ) ), snoise( noiseScale * vec2( -float(i) * 10.0, -time ) ) );\n\t    pos.x *= iResolution.x / iResolution.y;\n\t\tvec3 sp = clamp( sphere( pos, rad * ( 1.0 + abs( snoise( noiseScale * vec2( float(i) + time ) ) ) ), fragCoord ), 0.0, 1.0 );\n    \tfragColor.rgb = max( fragColor.rgb, sp );\n    }\n    fragColor.rgb = 1.0 - fragColor.rgb;\n    fragColor = gamma( fragColor );\n}","name":"","description":"","type":"image"}]}