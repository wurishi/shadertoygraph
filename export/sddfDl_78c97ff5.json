{"ver":"0.1","info":{"id":"sddfDl","date":"1657487473","viewed":81,"name":"Shifting grid","username":"rodgzilla","description":"Mix of space repetition, kifs and space twisting. it should take a very long time for it to repeat the same pattern.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["fractal","grid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define time .6 * iTime\n#define ZPOS -15. //+ .1 * time\n\n\nvec3 glow = vec3(0, 0, 0);\n\nmat2 rot2d(float a){\n  float c = cos(a), s = sin(a);\n  \n  return mat2(c, s, -s, c);\n}\n\nfloat cyl(vec3 p, vec3 c){\n  return length(p.xy - c.xy) - c.z;\n}\n\n\nvec3 kifs(vec3 p, float m1, float m2, float s, float r, float it) {\n  for (float i = 0.; i < it; i++) {\n    p.xy *= rot2d(time * m1 + i);\n    p.yz *= rot2d(time * m2 - i);\n    p = abs(p);\n    p -= s;\n    s *= r;\n  }\n  \n  return p;\n}\n\n\nvec3 repeat(vec3 p, vec3 r) {\n  vec3 q = mod(p, r) - .5 * r;\n  return q;\n}\n\n\nfloat at = 0.;\nfloat map(vec3 p) {\n  vec3 orig_p = p;\n  float d = 1000.;\n  \n  p.xy = p.xy * rot2d(p.z * 0.03 * sin(0.25 * time));\n  p.yz = p.yz * rot2d(p.x * 0.045 * cos(0.3 * time));\n  p.xy = p.xy * rot2d(p.z * 0.02 * sin(0.15 * time));\n  p.xz = p.xz * rot2d(p.y * 0.01 * sin(0.05 * time));\n  vec3 p_rot = p;\n  \n  p = kifs(p, 0.0125, 0.015, 0.2, 2., 3.);\n  \n  p = mix(\n    p, \n    mix(\n      p.yzx,\n      p.zxy,\n      .5 * sin(0.033 * time) + 0.5\n    ), \n    .5 * sin(.06* time) + 0.5\n  );\n  \n  float w1 = 0.5 * sin(time * 0.01) + 0.5;\n  float w2 = 0.5 * sin(time * 0.011) + 0.5;\n  float w3 = 0.5 * sin(time * 0.017) + 0.5;\n  p = repeat(p, vec3(5. + 4. * w1, 5. +5. * w2, 5. + 2. * w3));\n\n  \n  d = min(d, cyl(p - vec3(0. + .0 * sin(time * 0.7), 0, 0), vec3(.5, .5, .3)));\n  d = min(d, cyl(p.zyx - vec3(4, 0, 0), vec3(-5, .2, .3)));\n  d = min(d, cyl(p.xzy - vec3(4, 0, 0), vec3(-5, .2, .3)));\n\n  at += 1. / (d * 2.1);\n  \n  return d;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n  uv -= 0.5;\n  uv /= vec2(iResolution.y / iResolution.x, 1);\n\n  vec3 col = vec3(0);\n  vec3 ro = vec3(0, 0, ZPOS);\n  vec3 rd = normalize(vec3(uv.x, uv.y, 1.));\n  float d = 0.;\n  vec3 glow = vec3(0);\n\n  for (int i = 0; i < 100; i++) {\n    vec3 p = ro + d * rd;\n    float ds = map(p);\n    \n    if (ds < 0.01 || ds > 50.) {\n      break;\n    }\n    d += ds * .8;\n    glow += .001 * at * vec3(\n      .75 * (1. + .25 * sin(p.y * .05)), \n      .33 * (1. + .3 * cos(p.x * 0.2)), \n      .4  * (1. + 0.4 * cos(p.z * 0.1))\n    );\n  }\n  \n  vec3 p = ro + d * rd;\n  vec2 e = vec2(0.01, 0);\n  vec3 n = normalize(map(p) - \n    vec3(\n      map(p - e.xyy),\n      map(p - e.yxy),\n      map(p - e.yyx)\n    )\n  );\n\n  vec3 lp = vec3(0., 0., ZPOS);\n  vec3 tl = lp - p;\n  vec3 tln = normalize(tl);\n  float dif = dot(tln, n);\n  \n  col = vec3(dif);\n  col = dif * glow;\n  fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"}]}