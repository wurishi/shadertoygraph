{"ver":"0.1","info":{"id":"DlycDy","date":"1700582715","viewed":125,"name":"perception of blue til. w.transf","username":"FabriceNeyret2","description":"exact tiling of random points is easily perceived,\nwhile random tile orientation (among 2) masks it.\nbluenoise version of https://shadertoy.com/view/mlKczd\nClick to see tiles.","likes":4,"published":3,"flags":0,"usePreview":1,"tags":["tiling"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// variant of https://shadertoy.com/view/mlKczd\n// using tilable bluenoise of https://www.shadertoy.com/view/4dSyDR\n// variant of https://shadertoy.com/view/dtKczd\n\nfloat hash( uint n ) { // from https://www.shadertoy.com/view/llGSzw  Base: Hugo Elias. ToFloat: https://iquilezles.org/articles/sfrand\n\tn = (n << 13U) ^ n;\n    n = n * (n * n * 15731U + 789221U) + 1376312589U;\n    return uintBitsToFloat( (n>>9U) | 0x3f800000U ) - 1.;\n}\nvec2 M = vec2(128.);\nvec4 noise(vec2 U) {\n    U = mod(U,M.x) + M.y; // avoids grid glitch by doing modulo here\n    U-=.5; return vec4( hash(uint(U.x+iResolution.x*U.y)) );\n}\n\nvec4 H(vec2 U) {\n#define V(i,j)  noise(U+vec2(i,j))\n  //U=floor(U/8.); \n    vec4 N = 8./9.* noise( U ) \n           - 1./9.*( V(-1,-1)+V(0,-1)+V(1,-1) +V(-1,0)+V(1,0) +V(-1,1)+V(0,1)+V(1,1) );  \n    return N*2. + .5;   // or *1 to avoid saturation at the price of low contrast\n}\n\n//#define H(v)     fract(1e3*sin(dot(v,vec2(73,91))))          // hash\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    u /= 128.;\n    int  h = iFrame/180 % 2 > 0 ? int(8.*H(floor(u))) : 0;   // rand in {0,...7}\n    vec2 U = fract(u);                                       // local frame\n    O *= 0.;\n    if ( iMouse.z>0. && min(U.x,U.y)<2./128. ) O.r++;        // if click draw tiles borders\n    if ( h/4   > 0 ) U = U.yx;                               // rand bit3: symmetry\n    if ( h/2%2 > 0 ) U = 1.-U;                               // rand bit2: rot Pi\n    if ( h%2   > 0 ) U = vec2(1.-U.y,U);                     // rand bit1: rot Pi/2\n    O += vec4( H(U*128.).x  );                                 // draw random dots (same in each tile)\n  }","name":"Image","description":"","type":"image"}]}