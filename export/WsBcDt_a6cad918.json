{"ver":"0.1","info":{"id":"WsBcDt","date":"1587486641","viewed":108,"name":"Lick","username":"reinvdwoerd","description":"The Lick","likes":1,"published":1,"flags":8,"usePreview":0,"tags":["musicjazz"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float circle(in vec2 _st, in float _radius){\n    vec2 dist = _st-vec2(0.5);\n\treturn 1.-smoothstep(_radius-(_radius*0.01),\n                         _radius+(_radius*0.01),\n                         dot(dist,dist)*4.0);\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x *= uv.x / uv.y;\n    \n    float lick[] = float[](1., 1., 1., 1., 1., 1., 1., 1.);\n    \n    float t = iTime; // with speed\n    int currentNoteIndex = int(floor(mod(t, 8.)));\n    float currentNote = lick[currentNoteIndex];\n    \n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4)) - circle(uv + fatSynth(uv.x / 10., 0., fract(t) * 2.) / 10., exp(-2.*fract(t)) * currentNote) * 0.5;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"\n// Main\nvec2 mainSound( in int samp, float time )\n{\n    float lick[] = float[](D5, E5, F5, G5, E5, C5, D5, 0.);\n    \n    float t = time * 4.; // with speed\n    int currentNoteIndex = int(floor(mod(t, 8.)));\n    float currentNote = lick[currentNoteIndex];\n    \n    float horn = (synthSin(65.41, t)) * exp(-sin(t)*4. * fract(t / 4.));\n    float kick = synthSin(32.70, t) * exp(-4. * fract(t / 4.));\n\tfloat snare = maybeWhiteNoise(t)  * exp(-64. * fract(t / 8. - 0.5)) * 2.;\n    \n    \n    // A 440 Hz wave that attenuates quickly overt time\n    float tremolo = sin(t*8.);\n    \n    \n    //float mono =  + ;  // * 2 causes overdrive\n    float pan = sin(time); \n    float left = fatSynth(currentNote, 2., time) * (fract(t) + tremolo) * 2. + snare;\n    float right = kick * 2. + horn / 8.;\n    \n    return vec2(left, right);  //vec2(mix(mono, 0.1, pan), mix(0.1, mono, pan));\n}\n\n\n","name":"Sound","description":"","type":"sound"},{"inputs":[],"outputs":[],"code":"\n#define TAU 6.283185\n\n\n// Notes\n#define C5 523.25\n#define Cs5 554.37\n\n#define D5 587.33\n#define Ds5 622.25\n\n#define E5 659.26\n\n#define F5 698.46\n#define Fs5 739.99\n\n#define G5 783.99\n#define Gs5 830.61\n\n#define A5 880.00\n#define As5 932.33\n\n#define B5 987.77\n\n\n\n// Intruments\nfloat synthSin(float f, float t) {\n    return sin(mod(f * t * TAU, TAU));\n}\n\nfloat synthSquare(float f, float t)\n{\n    return floor( 2.0 * floor( f * t ) - floor( 2.0 * f * t ) + 1.0 );\n}\n\nfloat synthNoise(float t)\n{\n    return fract( sin( 123523.9898 * t ) * 43758.5453 );\n}\n\n\n\nfloat maybeWhiteNoise(float t) \n{\n\treturn synthNoise(sin(t));\n}\n\n\n\nfloat fatSynth(float f, float detune, float t)\n{\n\treturn (synthSin(f - detune * 2., t) +  synthSin(f - detune, t) +  \n            synthSin(f + detune, t) +  synthSin(f + detune * 2., t)) / 5.;\n}\n\n\n","name":"Common","description":"","type":"common"}]}