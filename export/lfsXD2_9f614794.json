{"ver":"0.1","info":{"id":"lfsXD2","date":"1705767175","viewed":153,"name":"Wave-o-scope","username":"FordPerfect","description":"Simple numerical 2D wave equation solver, to produce a \"video surface\".","likes":9,"published":3,"flags":32,"usePreview":1,"tags":["wave","solver","equation","numeric"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Public Domain under http://unlicense.org, see link for details.\n\n// Actual solver is in Buffer A, the\n// Image part computes refraction.\n// NOTE: bunch of coefficients are chosen pretty\n// arbitrarily.\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord)\n{\n    vec2 R=iResolution.xy,p=fragCoord/R;\n    vec3 e=vec3(1.0/R,0.0);\n    float N=texture(iChannel0,p+e.zy).y;\n    float E=texture(iChannel0,p+e.xz).y;\n    float S=texture(iChannel0,p-e.zy).y;\n    float W=texture(iChannel0,p-e.xz).y;\n    vec2 d=vec2(E-S,N-S);\n    d=refract(vec3(0,0,-1),normalize(vec3(-d,0.25)),1.0/1.33).xy; // Snell's law.\n    vec3 rgb=texture(iChannel1,(2.0*fragCoord+128.0*d)/vec2(textureSize(iChannel1,0))).xyz;\n    fragColor=vec4(rgb,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Public Domain under http://unlicense.org, see link for details.\n\n// Super-basic 2D wave equation numerical solver,\n// which is good enough for our use-case.\n// Uses leapfrog scheme from\n//     http://web.archive.org/web/20110514181414/https://www.aei.mpg.de/~rezzolla/lnotes/Evolution_Pdes/evolution_pdes_lnotes.pdf\n// see eq. (7.33).\n// Previous step is in r, current step is in g.\n\n//#define T(v) v // Wraparound boundary.\n#define T(v) clamp(v,vec2(0),vec2(1)) // Clamp boundary.\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord)\n{\n    vec2 R=iResolution.xy,p=fragCoord/R;\n    vec3 e=vec3(1.0/R,0.0);\n    vec2 C=texture(iChannel0,p).xy;\n    vec2 N=texture(iChannel0,T(p+e.zy)).xy;\n    vec2 E=texture(iChannel0,T(p+e.xz)).xy;\n    vec2 S=texture(iChannel0,T(p-e.zy)).xy;\n    vec2 W=texture(iChannel0,T(p-e.xz)).xy;\n    float a=0.25; // c*dt/dx, called alpha in the doc. above.\n    C=vec2(C.y,a*a*(N+W+S+E).y+2.0*(1.0-2.0*a*a)*C.y-C.x);\n    // Add impact from videostream.\n    C.y+=0.0625*dot(vec3(0.2126,0.7152,0.0722),texture(iChannel2,p).xyz);\n    // Artificial dampening, in part to offset\n    // the energy influx which the above adds.\n    C.y*=0.98;\n    fragColor=vec4(C,0,0);\n}","name":"Buffer A","description":"","type":"buffer"}]}