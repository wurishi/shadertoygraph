{"ver":"0.1","info":{"id":"XllSRf","date":"1438581458","viewed":144,"name":"Mmmm, circles","username":"paulsuda","description":"Fidlding around, got some circles. Try it full screen, click and drag the mouse.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d","circles"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"\nfloat numTiles = 32.0;\n\n/**\n * Returns 0.0 if out of the circle, 1.0 if in the circle.\n */\nvec2 origin = vec2(0.5, 0.5);\nfloat unitCircle(in vec2 uv, in float size){\n    return floor(distance(uv, origin) / size);\n}\n\n/**\n * Vary output from 0.0 to 1.0.\n */\nvec2 tile(in vec2 tileDivisor, in vec2 uv, out vec2 tileProgress){\n    tileProgress = uv / tileDivisor;\n    return mod(tileProgress, 1.0);\n}\n\nfloat circleSizeFactor(in vec2 tileDivisor, in vec2 tileProgress){\n    vec2 mousePosition = vec2(iMouse.x, iMouse.y) / tileDivisor;\n    float dist = distance(tileProgress, mousePosition);\n    return (dist / (numTiles * 1.0));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 tileRes = vec2(iResolution.x, iResolution.x);\n    vec2 tileDivisor = tileRes / numTiles;\n\n    vec2 uv = fragCoord.xy;\n    vec2 tileProgress = vec2(0.0, 0.0);\n    float circleSize = 1.0;\n    /* Set tileProgress here. */\n    uv = tile(tileDivisor, uv, tileProgress);\n    circleSize = circleSize * circleSizeFactor(tileDivisor, tileProgress);\n    //circleSize += 0.2;\n    float r = unitCircle(uv, circleSize / 2.0);\n    fragColor = vec4(r/1.0, 1.0, 1.0, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}