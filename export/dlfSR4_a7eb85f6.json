{"ver":"0.1","info":{"id":"dlfSR4","date":"1674357272","viewed":121,"name":"Hash23","username":"ianertson","description":"Hash23 function","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["noise","random","hash","hash23"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 hash23(vec2 v) {\n   v -= 0.00001727738;\n   float z = fract(tan(v.x*3.14+v.y))*10.751135;\n   vec3 a = fract(vec3(v.x/1.000383,v.y/1.000401,z)*3.14)*10.8372611876;\n   float w = fract(dot(a, vec3(1.3774, 8.2446, 2.2883)))*10.0973326;\n   return fract(7.817082*tan(9.726749*reflect(a, vec3(w, z, fract(z*43.28)*10.114865))));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = hash23(uv*0.5);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}