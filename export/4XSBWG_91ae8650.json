{"ver":"0.1","info":{"id":"4XSBWG","date":"1729856546","viewed":33,"name":"MDG","username":"mehull26","description":"A simple shader using random noise.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float hash(vec2 p) {\n    return fract(sin(dot(p ,vec2(127.1,311.7))) * 43758.5453123);\n}\n\n// 2D noise function\nfloat noise(vec2 p) {\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n    \n    // Four corner values for interpolation\n    float a = hash(i);\n    float b = hash(i + vec2(1.0, 0.0));\n    float c = hash(i + vec2(0.0, 1.0));\n    float d = hash(i + vec2(1.0, 1.0));\n    \n    // Fade function to smooth interpolation\n    vec2 u = f * f * (3.0 - 2.0 * f);\n    \n    // Interpolate the four corner values\n    return mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    //vec2 lol = uv *iChannel0;\n    \n    float n = clamp(noise(uv * 10.0+ iTime * 0.2),0.2,1.0) + 0.5;\n    float d = clamp(noise(uv * 15.0 - iTime * 0.3),0.2,1.0) + 0.5;\n    float k = clamp(noise(uv * 5.0 + iTime * 0.1),0.2,1.0) + 0.25;\n \n    \n    // Time varying pixel color\n    vec3 col = 0.5 + 0.25*cos(iTime+uv.xyx+vec3(0,2,4)) + 0.25*sin(iTime*0.5 + uv.yxy + vec3(2,1,0));\n \n    // Output to screen\n    fragColor = vec4(col*n*d*k + 0.3,1.0);\n}","name":"Image","description":"","type":"image"}]}