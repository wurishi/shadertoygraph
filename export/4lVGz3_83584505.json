{"ver":"0.1","info":{"id":"4lVGz3","date":"1475890579","viewed":723,"name":"Gaussian Blur Discrete Sampling","username":"clockwise","description":"Gaussian Blur implementation exercise with discrete sampling\ndrag mouse to show blurred vs unblurred","likes":6,"published":1,"flags":32,"usePreview":0,"tags":["blur","filter","gaussian"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SIGMA 11.16\n#define KERNEL_SIZE 67\n\nfloat gaussian(in float x) {\n\treturn exp(-( pow(x, 2.0) / (pow(SIGMA, 2.0) * 2.0)));   \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const float bar_width = 5.0;\n    if (fragCoord.x < iMouse.x - bar_width) {\n    \tfragColor = texture(iChannel0, fragCoord / iResolution.xy);\n        return;\n    }\n    \n    if (abs(fragCoord.x - iMouse.x) < bar_width) {\n    \tfragColor = vec4(0.0, 0.0, 0.0, 1.0);\n        return;\n    }\n    \n    const int num_weights = (KERNEL_SIZE + 1) / 2;\n    float w[num_weights];\n    float sum = 0.0;\n    for (int i = 0; i < num_weights; ++i) {\n    \tw[i] = gaussian(float(i));\n    \tsum += 2.0 * w[i];\n    }\n    sum -= w[0];\n    \n    vec3 col = texture(iChannel0, fragCoord / iResolution.xy).rgb * w[0];\n    for (int i = 1; i < num_weights; ++i) {\n    \tcol += texture(iChannel0, (fragCoord - vec2(0, i)) / iResolution.xy).rgb * w[i];\n        col += texture(iChannel0, (fragCoord + vec2(0, i)) / iResolution.xy).rgb * w[i];\n    }\n    \n    fragColor.rgb = col / sum;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define SIGMA 11.16\n#define KERNEL_SIZE 67\n\nfloat gaussian(in float x) {\n\treturn exp(-( pow(x, 2.0) / (pow(SIGMA, 2.0) * 2.0)));   \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (fragCoord.x < iMouse.x) {\n    \tfragColor = texture(iChannel0, fragCoord / iResolution.xy);\n        return;\n    }\n    \n    const int num_weights = (KERNEL_SIZE + 1) / 2;\n    float w[num_weights];\n    float sum = 0.0;\n    for (int i = 0; i < num_weights; ++i) {\n    \tw[i] = gaussian(float(i));\n    \tsum += 2.0 * w[i];\n    }\n    sum -= w[0];\n    \n    vec3 col = texture(iChannel0, fragCoord / iResolution.xy).rgb * w[0];\n    for (int i = 1; i < num_weights; ++i) {\n    \tcol += texture(iChannel0, (fragCoord - vec2(i, 0)) / iResolution.xy).rgb * w[i];\n        col += texture(iChannel0, (fragCoord + vec2(i, 0)) / iResolution.xy).rgb * w[i];\n    }\n    \n    fragColor.rgb = col / sum;\n}","name":"Buf A","description":"","type":"buffer"}]}