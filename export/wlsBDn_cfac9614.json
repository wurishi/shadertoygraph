{"ver":"0.1","info":{"id":"wlsBDn","date":"1596495352","viewed":122,"name":"Billiards in toroidal space","username":"CoolerZ","description":"Just trying out physics in toroidal spaces. I just called it billiards because it's collision between hard balls in 2D.","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["toroid","ohysics"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nfloat circle_d(vec2 p, vec2 pos)\n{\n    const float radius = .5;\n    return length(p-pos)-radius;\n}\n*/\n\nfloat circle_d(vec2 p, vec2 pos, float radius)\n{\n    float d = length(p-pos);\n\n    d = min(d, length(p-(pos+vec2(-2,0))));\n    d = min(d, length(p-(pos+vec2(2,0))));\n    d = min(d, length(p-(pos+vec2(0,-2))));\n    d = min(d, length(p-(pos+vec2(0,2))));\n\n    d = min(d, length(p-(pos+vec2(-2,-2))));\n    d = min(d, length(p-(pos+vec2(-2, 2))));\n    d = min(d, length(p-(pos+vec2( 2,-2))));\n    d = min(d, length(p-(pos+vec2( 2, 2))));\n\n    return d-radius;\n}\n\nfloat scene_d(vec2 p)\n{\n    float d = circle_d(p, vec2(0.), .5);\n    vec2 pos = texelFetch(iChannel0, ivec2(0,0),0).xy;\n    d = min(d, circle_d(p, pos, PARTICLE_SIZE));\n    return d;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = 2.*uv-1.;\n    uv.x *= iResolution.x/iResolution.y;\n\n    float d = scene_d(uv);\n    float mask = 1.-smoothstep(0.,.01,d);\n\n    vec3 inside_col = vec3(5.,.3,0);\n    vec3 outside_col = 1.-inside_col;\n    vec3 col = mix(outside_col, inside_col, mask);\n    float waves = .8+.2*sin(140.*d);\n    col *= waves;\n    float falloff = 1.-exp(-4.*abs(d));\n    col *= falloff;\n    float border = 1.-smoothstep(0.,.01,abs(d));\n    col = mix(col, vec3(1.), border);\n    if(uv.x < -1. || uv.x > 1.)col = vec3(0);\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define time iTime\n#define delta_t iTimeDelta\n\nvec2 Z(vec2 p)\n{\n    return 2.*fract(.5+.5*p)-1.;\n}\n\nfloat circle_d(vec2 p, vec2 pos, float radius)\n{\n    float d = length(p-pos);\n\n    d = min(d, length(p-(pos+vec2(-2,0))));\n    d = min(d, length(p-(pos+vec2(2,0))));\n    d = min(d, length(p-(pos+vec2(0,-2))));\n    d = min(d, length(p-(pos+vec2(0,2))));\n\n    d = min(d, length(p-(pos+vec2(-2,-2))));\n    d = min(d, length(p-(pos+vec2(-2, 2))));\n    d = min(d, length(p-(pos+vec2( 2,-2))));\n    d = min(d, length(p-(pos+vec2( 2, 2))));\n\n    return d-radius;\n}\n\nfloat scene_d(vec2 p)\n{\n    return circle_d(p, vec2(0.), .5);\n}\n\nvec2 get_normals(vec2 p)\n{\n    return normalize(p);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec4 pos_vel = texelFetch(iChannel0, ivec2(fragCoord-.5),0);\n    if(iFrame < 32)\n    {\n        // SETUP\n        pos_vel = vec4(.5,.5,1.,0);\n    }\n    else\n    {\n        vec2 pos = pos_vel.xy;\n        vec2 vel = pos_vel.zw;\n        float d = scene_d(pos);\n        if(d <= PARTICLE_SIZE)\n        {\n            vec2 normals = get_normals(pos);\n            vel = reflect(vel, normals);\n        }\n        pos = Z(pos + vel*delta_t);\n        pos_vel = vec4(pos, vel);\n    }\n\n    fragColor = pos_vel;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define PARTICLE_SIZE .1","name":"Common","description":"","type":"common"}]}