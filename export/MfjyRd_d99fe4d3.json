{"ver":"0.1","info":{"id":"MfjyRd","date":"1722873377","viewed":20,"name":"Estructura del lenguaje 1.4","username":"jpupper","description":"\n1.4\nEstructura del lenguaje inicial parte 4\nCoordenadas cartesianas.\n ","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["tutorial","shaders","shaders","livecoding","taller","tutoriales","estructuradellenguaje"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n//Taller de Livecoding con visuales en GLSL\n//1.4\n//Estructura del lenguaje inicial parte 4\n//Coordenadas cartesianas.\n \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n     vec2 uv = gl_FragCoord.xy / iResolution.xy; // De esta manera obtenemos las coordenadas cartesianas\n    //La variable uv tendra en su componente X (es decir el primer componente del vector).\n    //                       y su componente Y (es decir el segundo componente del vector).\n       \n    // vec3 color = vec3(uv.y,0.0,0.0); // De mas brillante a menos brillante en Y segun el valor del pixel  \n    //vec3 color = vec3(0.0,uv.x,0.0); // De mas brillante a menos brillante en X segun el valor del pixel  \n    vec3 color = vec3(uv.x,0.2,uv.y); // De mas brillante a menos brillante en X e Y segun el valor del pixel  \n    //vec3 color = vec3(1.-uv.x,0.0,0.0); // Invertimos la coordenada en X \n    //vec3 color = vec3(1.-uv.y,1.-uv.y,0.0); // Invertimos la coordenada en Y\n    //vec3 color = vec3(uv,0.8); //Aca directamente mandamos las UV (un vec2 y sumamos otro numero mas para as√≠ tener las 3 componentes).\n    fragColor = vec4(color,1.0); \n    \n}","name":"Image","description":"","type":"image"}]}