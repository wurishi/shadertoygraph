{"ver":"0.1","info":{"id":"WdycW1","date":"1602684780","viewed":149,"name":"Sliced Ring SDF 2D","username":"jniac","description":"2d shader for UI widget\nbased on https://iquilezles.org/articles/distfunctions2d/distfunctions2d.htm\nnegative part is not exact, but don't care","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["2d","sdf","ring"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 uv_cover(in vec2 p, in vec2 rect) {\n    vec2 uv = p / rect.x;\n    uv.y += (1.0 - rect.y / rect.x) / 2.0;\n    return uv;\n}\nvec2 uv_contain(in vec2 p, in vec2 rect) {\n    vec2 uv = p / rect.y;\n    uv.x += (1.0 - rect.x / rect.y) / 2.0;\n    return uv;\n}\n\nconst float PI = 3.141592653589793;\n\nfloat safeAngle01(vec2 p, float offset) {\n    \n    float a = fract(atan(p.y, p.x) / PI * 0.5 + offset);\n    return a < 0.0 ? a + 1.0 : a;\n}\n\nvec2 fromPolar(float angle, float radius) {\n    \n    return vec2(radius * cos(angle), radius * sin(angle));\n}\n\n// https://iquilezles.org/articles/distfunctions2d\nfloat sdSegment(in vec2 p, in vec2 a, in vec2 b) {\n    \n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nfloat sdSliceRing(vec2 p, float r, float r2, float opening, float openingOffset) {\n\t\n    float angle01 = safeAngle01(p, -openingOffset);\n    \n    if (angle01 > opening) {\n        float compOpening = 1.0 - opening;\n        if (angle01 < opening + compOpening * 0.5) {\n            float a = (opening + openingOffset) * 2.0 * PI;\n\t        return sdSegment(p, fromPolar(a, r - r2), fromPolar(a, r + r2));\n        } else {\n            float a = openingOffset * 2.0 * PI;\n\t        return sdSegment(p, fromPolar(a, r - r2), fromPolar(a, r + r2));\n        }\n    }\n    \n    float d = length(p) - r;\n    d = abs(d) - r2;\n    return d;\n}\n\nvec3 distanceToInigoColor(float d) {\n    vec3 col = vec3(1.0) - sign(d)*vec3(0.1,0.4,0.7);\n\tcol *= 1.0 - exp(-4.0*abs(d));\n\tcol *= 0.8 + 0.2*cos(128.0*abs(d));\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.015,abs(d)) );\n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = uv_contain(fragCoord, iResolution.xy) - 0.5;\n\t\n    float radius = .3 + .1 * sin(iTime);\n    float opening = sin(iTime) * .5 + .5;\n    float offset = fract(iTime * .02);\n    float d = sdSliceRing(p, radius, 0.1, opening, offset);\n    \n\n    fragColor = vec4(distanceToInigoColor(d),1.0);\n}","name":"Image","description":"","type":"image"}]}