{"ver":"0.1","info":{"id":"mlX3RS","date":"1671909141","viewed":71,"name":"CG vent","username":"matheusfc","description":"Ventilador com coisas voando e um pe√£o em volta","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","texture","bumpmapping"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGRn","filepath":"/media/a/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg","previewfilepath":"/media/ap/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Martijn Steinrucken\n//\n// https://twitter.com/the_artofcode?lang=en\n// https://www.youtube.com/TheArtOfCodeIsCool \n//\n// https://www.youtube.com/watch?v=PGtv-dBi2wE\n// https://www.youtube.com/watch?v=Ff0jJyyiVyw\n// https://www.youtube.com/watch?v=AfKGMUDWfuE\n// https://www.youtube.com/watch?v=Vmb7VGBVZJA\n//\n// https://michaelwalczyk.com/blog-ray-marching.html\n// https://www.lcg.ufrj.br/cwdc/13-webgl/shaderToy.mp4\n//\n// A very simple ray marching implementation,\n// with a few SDF functions: sphere, torus, box, cylinder.\n// Boolean operations are also available: \n// union, intersection, difference and blend.\n// \n// The beauty of the method is that there are no more polygons or vertices, \n// but objects are just scalar fields, given by Signed Distance Functions (SDFs).\n//\n// Paulo Roma\n// 17/07/2022\n\n#define MAX_STEPS 100\n#define MAX_DIST 100.0\n#define SURF_DIST 0.01\n#define PI 3.1415925359\n#define PERSISTENCE 0.5\n#define LACUNARITY 1.0\n#define FIRST 0.01\n#define SECOND 0.01\n#define OCTAVES 1.0\n#define MAX_OCTAVES 8\n#define EPSILON 0.00001\n\n// Cellular noise (\"Worley noise\") in 3D in GLSL.\n// Copyright (c) Stefan Gustavson 2011-04-19. All rights reserved.\n// This code is released under the conditions of the MIT license.\n// See LICENSE file for details.\n// https://github.com/stegu/webgl-noise\n\n// Modulo 289 without a division (only multiplications)\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\n// Modulo 7 without a division\nvec3 mod7(vec3 x) {\n  return x - floor(x * (1.0 / 7.0)) * 7.0;\n}\n\n// Permutation polynomial: (34x^2 + 6x) mod 289\nvec3 permute(vec3 x) {\n  return mod289((34.0 * x + 10.0) * x);\n}\n\n// Cellular noise, returning F1 and F2 in a vec2.\n// 3x3x3 search region for good F2 everywhere, but a lot\n// slower than the 2x2x2 version.\n// The code below is a bit scary even to its author,\n// but it has at least half decent performance on a\n// modern GPU. In any case, it beats any software\n// implementation of Worley noise hands down.\n\nvec2 cellular(vec3 P) {\n#define K 0.142857142857 // 1/7\n#define Ko 0.428571428571 // 1/2-K/2\n#define K2 0.020408163265306 // 1/(7*7)\n#define Kz 0.166666666667 // 1/6\n#define Kzo 0.416666666667 // 1/2-1/6*2\n#define jitter 1.0 // smaller jitter gives more regular pattern\n\n\tvec3 Pi = mod289(floor(P));\n \tvec3 Pf = fract(P) - 0.5;\n\n\tvec3 Pfx = Pf.x + vec3(1.0, 0.0, -1.0);\n\tvec3 Pfy = Pf.y + vec3(1.0, 0.0, -1.0);\n\tvec3 Pfz = Pf.z + vec3(1.0, 0.0, -1.0);\n\n\tvec3 p = permute(Pi.x + vec3(-1.0, 0.0, 1.0));\n\tvec3 p1 = permute(p + Pi.y - 1.0);\n\tvec3 p2 = permute(p + Pi.y);\n\tvec3 p3 = permute(p + Pi.y + 1.0);\n\n\tvec3 p11 = permute(p1 + Pi.z - 1.0);\n\tvec3 p12 = permute(p1 + Pi.z);\n\tvec3 p13 = permute(p1 + Pi.z + 1.0);\n\n\tvec3 p21 = permute(p2 + Pi.z - 1.0);\n\tvec3 p22 = permute(p2 + Pi.z);\n\tvec3 p23 = permute(p2 + Pi.z + 1.0);\n\n\tvec3 p31 = permute(p3 + Pi.z - 1.0);\n\tvec3 p32 = permute(p3 + Pi.z);\n\tvec3 p33 = permute(p3 + Pi.z + 1.0);\n\n\tvec3 ox11 = fract(p11*K) - Ko;\n\tvec3 oy11 = mod7(floor(p11*K))*K - Ko;\n\tvec3 oz11 = floor(p11*K2)*Kz - Kzo; // p11 < 289 guaranteed\n\n\tvec3 ox12 = fract(p12*K) - Ko;\n\tvec3 oy12 = mod7(floor(p12*K))*K - Ko;\n\tvec3 oz12 = floor(p12*K2)*Kz - Kzo;\n\n\tvec3 ox13 = fract(p13*K) - Ko;\n\tvec3 oy13 = mod7(floor(p13*K))*K - Ko;\n\tvec3 oz13 = floor(p13*K2)*Kz - Kzo;\n\n\tvec3 ox21 = fract(p21*K) - Ko;\n\tvec3 oy21 = mod7(floor(p21*K))*K - Ko;\n\tvec3 oz21 = floor(p21*K2)*Kz - Kzo;\n\n\tvec3 ox22 = fract(p22*K) - Ko;\n\tvec3 oy22 = mod7(floor(p22*K))*K - Ko;\n\tvec3 oz22 = floor(p22*K2)*Kz - Kzo;\n\n\tvec3 ox23 = fract(p23*K) - Ko;\n\tvec3 oy23 = mod7(floor(p23*K))*K - Ko;\n\tvec3 oz23 = floor(p23*K2)*Kz - Kzo;\n\n\tvec3 ox31 = fract(p31*K) - Ko;\n\tvec3 oy31 = mod7(floor(p31*K))*K - Ko;\n\tvec3 oz31 = floor(p31*K2)*Kz - Kzo;\n\n\tvec3 ox32 = fract(p32*K) - Ko;\n\tvec3 oy32 = mod7(floor(p32*K))*K - Ko;\n\tvec3 oz32 = floor(p32*K2)*Kz - Kzo;\n\n\tvec3 ox33 = fract(p33*K) - Ko;\n\tvec3 oy33 = mod7(floor(p33*K))*K - Ko;\n\tvec3 oz33 = floor(p33*K2)*Kz - Kzo;\n\n\tvec3 dx11 = Pfx + jitter*ox11;\n\tvec3 dy11 = Pfy.x + jitter*oy11;\n\tvec3 dz11 = Pfz.x + jitter*oz11;\n\n\tvec3 dx12 = Pfx + jitter*ox12;\n\tvec3 dy12 = Pfy.x + jitter*oy12;\n\tvec3 dz12 = Pfz.y + jitter*oz12;\n\n\tvec3 dx13 = Pfx + jitter*ox13;\n\tvec3 dy13 = Pfy.x + jitter*oy13;\n\tvec3 dz13 = Pfz.z + jitter*oz13;\n\n\tvec3 dx21 = Pfx + jitter*ox21;\n\tvec3 dy21 = Pfy.y + jitter*oy21;\n\tvec3 dz21 = Pfz.x + jitter*oz21;\n\n\tvec3 dx22 = Pfx + jitter*ox22;\n\tvec3 dy22 = Pfy.y + jitter*oy22;\n\tvec3 dz22 = Pfz.y + jitter*oz22;\n\n\tvec3 dx23 = Pfx + jitter*ox23;\n\tvec3 dy23 = Pfy.y + jitter*oy23;\n\tvec3 dz23 = Pfz.z + jitter*oz23;\n\n\tvec3 dx31 = Pfx + jitter*ox31;\n\tvec3 dy31 = Pfy.z + jitter*oy31;\n\tvec3 dz31 = Pfz.x + jitter*oz31;\n\n\tvec3 dx32 = Pfx + jitter*ox32;\n\tvec3 dy32 = Pfy.z + jitter*oy32;\n\tvec3 dz32 = Pfz.y + jitter*oz32;\n\n\tvec3 dx33 = Pfx + jitter*ox33;\n\tvec3 dy33 = Pfy.z + jitter*oy33;\n\tvec3 dz33 = Pfz.z + jitter*oz33;\n\n\tvec3 d11 = dx11 * dx11 + dy11 * dy11 + dz11 * dz11;\n\tvec3 d12 = dx12 * dx12 + dy12 * dy12 + dz12 * dz12;\n\tvec3 d13 = dx13 * dx13 + dy13 * dy13 + dz13 * dz13;\n\tvec3 d21 = dx21 * dx21 + dy21 * dy21 + dz21 * dz21;\n\tvec3 d22 = dx22 * dx22 + dy22 * dy22 + dz22 * dz22;\n\tvec3 d23 = dx23 * dx23 + dy23 * dy23 + dz23 * dz23;\n\tvec3 d31 = dx31 * dx31 + dy31 * dy31 + dz31 * dz31;\n\tvec3 d32 = dx32 * dx32 + dy32 * dy32 + dz32 * dz32;\n\tvec3 d33 = dx33 * dx33 + dy33 * dy33 + dz33 * dz33;\n\n\t// Sort out the two smallest distances (F1, F2)\n#if 0\n\t// Cheat and sort out only F1\n\tvec3 d1 = min(min(d11,d12), d13);\n\tvec3 d2 = min(min(d21,d22), d23);\n\tvec3 d3 = min(min(d31,d32), d33);\n\tvec3 d = min(min(d1,d2), d3);\n\td.x = min(min(d.x,d.y),d.z);\n\treturn vec2(sqrt(d.x)); // F1 duplicated, no F2 computed\n#else\n\t// Do it right and sort out both F1 and F2\n\tvec3 d1a = min(d11, d12);\n\td12 = max(d11, d12);\n\td11 = min(d1a, d13); // Smallest now not in d12 or d13\n\td13 = max(d1a, d13);\n\td12 = min(d12, d13); // 2nd smallest now not in d13\n\tvec3 d2a = min(d21, d22);\n\td22 = max(d21, d22);\n\td21 = min(d2a, d23); // Smallest now not in d22 or d23\n\td23 = max(d2a, d23);\n\td22 = min(d22, d23); // 2nd smallest now not in d23\n\tvec3 d3a = min(d31, d32);\n\td32 = max(d31, d32);\n\td31 = min(d3a, d33); // Smallest now not in d32 or d33\n\td33 = max(d3a, d33);\n\td32 = min(d32, d33); // 2nd smallest now not in d33\n\tvec3 da = min(d11, d21);\n\td21 = max(d11, d21);\n\td11 = min(da, d31); // Smallest now in d11\n\td31 = max(da, d31); // 2nd smallest now not in d31\n\td11.xy = (d11.x < d11.y) ? d11.xy : d11.yx;\n\td11.xz = (d11.x < d11.z) ? d11.xz : d11.zx; // d11.x now smallest\n\td12 = min(d12, d21); // 2nd smallest now not in d21\n\td12 = min(d12, d22); // nor in d22\n\td12 = min(d12, d31); // nor in d31\n\td12 = min(d12, d32); // nor in d32\n\td11.yz = min(d11.yz,d12.xy); // nor in d12.yz\n\td11.y = min(d11.y,d12.z); // Only two more to go\n\td11.y = min(d11.y,d11.z); // Done! (Phew!)\n\treturn sqrt(d11.xy); // F1, F2\n#endif\n}\n\nfloat noise3(vec3 p) {\n  vec2 v = cellular(p);\n  return v.x * FIRST + v.y * SECOND; \n}\n\n\nfloat octaveType (vec3 p) {\n  float total = 0.;\n  float frequency = 1.;\n  float rangeOctave = 1.;\n  float value = 0.;\n  for (int i = 0; i < MAX_OCTAVES; ++i) {\n    if (float(i) >= OCTAVES) break;\n    value += noise3(p * frequency) * rangeOctave;\n    total += rangeOctave;\n    rangeOctave *= PERSISTENCE;\n    frequency *= LACUNARITY;\n  }\n  return value / total;\n}\n\nvec3 normalnoise(vec3 p) {\n  return normalize(vec3(octaveType(p+vec3(EPSILON,0.0,0.0))-octaveType(p-vec3(EPSILON,0.0,0.0)),\n                          octaveType(p+vec3(0.0,EPSILON,0.0))-octaveType(p-vec3(0.0,EPSILON,0.0)),\n                          octaveType(p+vec3(0.0,0.0,EPSILON))-octaveType(p-vec3(0.0,0.0,EPSILON))\n                      ));\n}\n\n\n// Rotation matrix.\nmat2 Rot (float a) {\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\n// SDF of a torus at the origin given its two radius.\nvec4 dTorus(vec3 p, vec2 r, vec3 col) {\n    float x = length(p.xz) - r.x;\n    \n    return vec4(length(vec2(x, p.y)) - r.y, col);\n}\n\nvec4 sdEllipsoid(vec3 p, vec3 r, vec3 col) {\n  float k0 = length(p/r);\n  float k1 = length(p/(r*r));\n  \n  return vec4(k0*(k0-1.0)/k1, col);\n}\n\n// SDF of a box at the origin given its size (width, height and depth).\nvec4 dBox(vec3 p, vec3 s, vec3 col) {\n    return vec4(length(max(abs(p) - s, 0.0)), col);\n}\n\n// SDF of a sphere, given its center and radius.\nvec4 dSphere(vec3 p, vec4 s, vec3 col) {\n    return vec4(length(p - s.xyz) - s.w, col);\n}\n\n// SDF of a cylinder given a segment and a radius.\nvec4 dCylinder(vec3 p, vec3 a, vec3 b, float r, vec3 col) {\n    vec3 ab = b - a;\n    vec3 ap = p - a;\n    \n    float t = dot(ab, ap) / dot(ab, ab);\n    \n    vec3 c = a + t * ab;\n    \n    float x = length(p - c) - r;\n    float y = (abs(t - 0.5) - 0.5) * length(ab);\n    float e = length(max(vec2(x, y), 0.0));\n    float i = min(max(x, y), 0.0);\n    \n    return vec4(e + i, col);\n}\n\nvec4 sdRoundedCylinder( vec3 p, float ra, float rb, float h, vec3 col )\n{\n  vec2 d = vec2( length(p.xz)-2.0*ra+rb, abs(p.y) - h );\n  return vec4(min(max(d.x,d.y),0.0) + length(max(d,0.0)) - rb, col);\n}\n\nvec4 sdOctahedron( vec3 p, float s, vec3 col)\n{\n  p = abs(p);\n  float m = p.x+p.y+p.z-s;\n  vec3 q;\n       if( 3.0*p.x < m ) q = p.xyz;\n  else if( 3.0*p.y < m ) q = p.yzx;\n  else if( 3.0*p.z < m ) q = p.zxy;\n  else return vec4(m*0.57735027, col);\n    \n  float k = clamp(0.5*(q.z-q.y+s),0.0,s); \n  return vec4(length(vec3(q.x,q.y-s+k,q.z-k)), col); \n}\n\n// B + A\nfloat unionSDF (float sda, float sdb) {\n    return min(sda, sdb);\n}\n\n// B * A\nfloat intersectionSDF (float sda, float sdb) {\n    return max(sda, sdb);\n}\n\n// B - A\nfloat differenceSDF (float sda, float sdb) {\n    return max(-sda, sdb);\n}\n\n// Blend A and B\nfloat blendSDF(float sda, float sdb, float k) {\n    float h = clamp(0.5 + 0.5 * (sdb - sda) / k, 0.0, 1.0);\n    return mix(sdb, sda, h) - k * h * (1.0 - h);\n}\n\nvec4 minWithColor(vec4 obj1, vec4 obj2) {\n    if (obj2.x < obj1.x) return obj2;\n    return obj1;\n}\n\n// Scene SDF: signed distance function.\nvec4 getDist(vec3 p) {\n\n    vec4 planeDist = vec4(p.y, vec3(0, .8, .8));\n    \n    float s = sin(iTime);\n    \n    // vent scene\n    \n    vec3 vent =  p-vec3(0,0,6);\n    vent.xz *= Rot(5.0 * iTime);\n    vec3 vent2 =  p-vec3(0,0,6);\n    \n    float boxOffset = 1.7 + (sin(1.2 * iTime)/1.2);\n    vec3 box = p-vec3(0.8, boxOffset, 6);\n    box.xy *= Rot(iTime*3.0);\n    box.xz *= Rot(iTime*4.0);\n    box.yz *= Rot(iTime*2.0);\n    \n    float boxOffset2 = 2.0 + cos(2.0 * iTime);\n    vec3 box2 = p-vec3(-0.7, boxOffset2, 6.5);\n    box2.xy *= Rot(iTime*4.0);\n    box2.xz *= Rot(iTime*5.0);\n    box2.yz *= Rot(iTime*2.0);\n\n    float sphereOffset = 1.2 + (sin(0.8 * iTime)/1.8);\n    vec3 sphere = p-vec3(-0.2, sphereOffset, 5);\n    sphere.yz *= Rot(iTime);\n    sphere.xz *= Rot(iTime);\n    sphere.yz *= Rot(iTime);\n    \n    float donutOffset = 1.6 + (sin(3.0 * iTime)/0.8);\n    vec3 donut = p-vec3(0, donutOffset, 6);\n    donut.xz += vec2(2.0 * sin(iTime * 1.2), 2.0 * cos(iTime * 1.2));\n    donut.xy *= Rot(iTime*9.0);\n    donut.yz *= Rot(iTime*12.0);\n    \n    float cylinderOffset = 1.6 + (sin(3.0 * iTime)/1.5);\n    vec3 cylinder = p-vec3(0, cylinderOffset, 6);\n    cylinder.xz += vec2(1.5 * sin(iTime * 0.8), 1.5 * cos(iTime * 0.8));\n    cylinder.xy *= Rot(iTime*2.0);\n    cylinder.yz *= Rot(iTime);\n\n    vec4 dVent = sdEllipsoid(vent, vec3(3,0.2,0.5), texture(iChannel0, vent.xz).xyz);\n    vec4 dVent2 = sdEllipsoid(vent, vec3(0.5,0.2,3), texture(iChannel0, vent.xz).xyz);\n    \n    vec3 cor = normalnoise(vent);\n    vec4 dLamp = dSphere(vent, vec4(0,0,0,0.65), cor.xxx);\n    \n    vec3 col1XZ = texture(iChannel2, box.xz*.5+.5).rgb;\n    vec3 col1YZ = texture(iChannel2, box.yz*.5+.5).rgb;\n    vec3 col1XY = texture(iChannel2, box.xy*.5+.5).rgb;\n    vec3 n1 = normalize(box);\n    vec3 textureBox1 =  col1YZ*n1.x + col1XZ*n1.y + col1XY*n1.z;\n    vec4 dCaixa = dBox(box, vec3(0.2,0.2,0.2), textureBox1);\n    \n    vec3 col2XZ = texture(iChannel2, box2.xz*.5+.5).xyz;\n    vec3 col2YZ = texture(iChannel2, box2.yz*.5+.5).xyz;\n    vec3 col2XY = texture(iChannel2, box2.xy*.5+.5).xyz;\n    vec3 n2 = normalize(box2);\n    vec3 textureBox2 =  col2YZ*n2.x + col2XZ*n2.y + col2XY*n2.z;\n    vec4 dCaixa2 = dBox(box2, vec3(0.15,0.15,0.15), textureBox2);\n    \n    vec4 dBola = dSphere(sphere, vec4(0,0,0, 0.25), texture(iChannel1, sphere.xz).xyz);\n    \n    vec4 dDonut = dTorus(donut, vec2(0.1,0.01), vec3(.8, .75, .0));\n    vec4 dCylinder = sdRoundedCylinder(cylinder, 0.1, 0.1, 0.12, texture(iChannel1, cylinder.xz).xyz);\n    \n    // beyblade scene\n    vec3 bey1 = p-vec3(0, 0.71, 6);\n    bey1.xz += vec2(1.0 - (6.0 * sin(iTime)), 1.0 + (6.0 * cos(iTime)));\n    bey1.xz *= Rot(10.0 * iTime);\n    vec4 dBey1 = sdOctahedron(bey1, 0.7, texture(iChannel3, sphere.xz).xyz);\n\n    vec4 d = minWithColor(dVent, planeDist);\n    d = minWithColor(d, dVent2);\n    d = minWithColor(d, dLamp);\n    \n    d = minWithColor(d, dCaixa);\n    d = minWithColor(d, dCaixa2);\n    d = minWithColor(d, dBola);\n    d = minWithColor(d, dDonut);\n    d = minWithColor(d, dCylinder);\n    \n    d = minWithColor(d, dBey1);\n    \n    return d;\n}\n\n// The normal is the gradient of the SDF scalar field at point p.\n// By using finite difference: \n// https://en.wikipedia.org/wiki/Finite_difference#Relation_with_derivatives \nvec3 getNormal(vec3 p) {\n    // arbitrary ‚Äî should be smaller than any surface detail in your distance function, \n    // but not so small as to get lost in float precision\n    vec2 e = vec2(0.001, 0);\n    \n    vec3 n = \n        vec3(\n        getDist(p + e.xyy).x,\n        getDist(p + e.yxy).x,\n        getDist(p + e.yyx).x) - \n        vec3(\n        getDist(p - e.xyy).x,\n        getDist(p - e.yxy).x,\n        getDist(p - e.yyx).x);\n        \n    return normalize(n);\n}\n\n// Walk through empty spheres until the ray hits an object\n// or is beyond MAX_DIST, meaning no hit. \nvec4 rayMarch(vec3 ro, vec3 rd) {\n    float dO = 0.0;\n    vec4 dS;\n    \n    for (int i = 0; i < MAX_STEPS; i++) {\n        vec3 p = ro + rd * dO;\n        dS = getDist(p);\n        dO += dS.x;\n        if (dO > MAX_DIST || dS.x < SURF_DIST) break;\n    }\n    \n    vec3 col = vec3(dS.yzw);\n    \n    return vec4(dO, col);\n}\n\nvec3 bumpMappedTexture(sampler2D bumpMap, vec3 tex, vec2 texCoord, float bumpDepth) {\n  // Sample the bump map at the texture coordinate\n  vec3 bump = texture(bumpMap, texCoord).rgb;\n\n  // Calculate the perturbation vector by scaling the bump value and rotating it by 90 degrees\n  vec2 perturb = bumpDepth * bump.rg;\n  perturb = vec2(-perturb.y, perturb.x);\n\n  // Perturb the texture coordinate and sample the texture\n  vec3 texel = tex + vec3(perturb,0);\n\n  return texel;\n}\n\n// Phong illumination model, given a point and camera position.\nfloat getLight(vec3 p, vec3 ro) {\n    vec3 lightPos = vec3(0, 5, 6);\n    \n    lightPos.xz += vec2(sin(iTime), cos(iTime)) * 2.0;\n    \n    vec3 l = normalize(lightPos - p);\n    vec3 n = getNormal(p);\n    n = normalize(bumpMappedTexture(iChannel0,n,p.xy,texture(iChannel0,p.xy).r));\n    vec3 r = reflect(-l,n);\n    \n    // ambient component\n    float amb = 0.1;\n    // ambient reflection coefficient\n    float ka = 1.0;\n    \n    // diffuse component - apply Lambert's cosine law\n    float dif = clamp(dot(n, l), 0.0, 1.0);\n    // diffuse reflection coefficient\n    float kd = 0.8;\n    \n    // specular component\n    float shininess = 100.;\n    vec3 v = normalize(ro-p);\n    float spec = clamp(dot(r, v), 0.0, 1.0);\n    spec = pow(spec,shininess);\n    // specular reflection coefficient\n    float ks = 1.0;\n    \n    // slightly move point p in the direction of the normal,\n    // so the distance is not zero. Otherwise, the first hit \n    // will be at the plane.\n    vec4 d = rayMarch(p + 2. * n * SURF_DIST , l);\n    \n    // cast a ray to the light\n    if (d.x < length(lightPos - p)) {\n        // point in the shadow\n        dif *= 0.1;\n        spec *= 0.5;\n    }\n    \n    // ambient + diffuse + specular components\n    return ka * amb + kd * dif + ks * spec;\n}\n\n// Fragment shader.\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // normalized pixel coordinates (from -0.5 to 0.5)\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / min(iResolution.x, iResolution.y);\n\n    // camera position\n    vec3 ro = vec3(0, 2, 0);\n    \n    // projection plane z = 1\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1));\n    \n    // Rotate camera down about the x-axis\n    rd.yz *= Rot(PI * 10. / 180.); \n    \n    vec4 d = rayMarch(ro, rd);\n    \n    // point hit by the ray\n    vec3 p = ro + rd * d.x;\n    \n    // illumination at point p\n    float light_intensity = getLight(p, ro);\n    \n    // dark grey\n    // vec3 background_color = vec3(.2, .2, .2);\n    vec3 background_color = vec3(1).rgb;\n    \n    // Antique White color #FAEBD7\n    vec3 surface_color = vec3(250, 235, 215) / 255.;\n    \n    // pixel color\n    vec3 color;\n    \n    if (d.x < MAX_DIST) \n        // modulate surface color by the light intensity\n        color = d.yzw * vec3(light_intensity);\n    else \n        color = background_color;\n\n    // output to screen\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}