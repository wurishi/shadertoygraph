{"ver":"0.1","info":{"id":"4sSyDW","date":"1491998976","viewed":615,"name":"zooming grid layers","username":"public_int_i","description":"zooming grid layers, buffers didnt work this morning so i went for something 2D","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["grid","layers","zooming"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"\n#define gridsize 0.5\n\n\n#define draw(dc) c = mix(dc,c,clamp(d/pixelSize, 0., 1.))\n\n\n//2d box signed distance\nfloat sdBox(vec2 p, vec2 b)\n{\n  vec2 d = abs(p) - b;\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float pixelSize = length(1.0/iResolution.xy);\n\tvec2 uv = (fragCoord*2. - iResolution.xy)/iResolution.x;\n    \n    //infinite zoom, repeating offset and scaling\n    float zoomRepeat = fract(iTime)*(1.0+1e-4),\n        scale = zoomRepeat;\n    uv += zoomRepeat*0.5;\n    uv *= 1.0-scale*0.5;\n    \n    \n    vec3 c = vec3(1.);//start with white background\n    \n    //layers of grids, first smallest is fading in\n    for (int i = 1; i < 3; i++) {\n        float sz = gridsize/pow(2.,float(3-i)),\n              sz2 = sz/2.0;\n      \tfloat d = abs(sdBox(mod(abs(uv),sz)-sz2, vec2(sz2)))-0.004*(1.0-scale*0.75);\n    \t\n        vec3 rc = vec3(0.);\n        if (i == 1) rc = vec3(1.-zoomRepeat);\n        draw(rc);\n    }\n    \n    //output color\n    fragColor = vec4(c, 1.);\n}","name":"Image","description":"","type":"image"}]}