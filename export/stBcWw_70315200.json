{"ver":"0.1","info":{"id":"stBcWw","date":"1649765661","viewed":69,"name":"simplest_camera","username":"yoquo","description":"i create a simplest camera.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["etude"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat DistLine(vec3 ro,vec3 rd, vec3 p){\n    return length(cross(p-ro,rd)/length(rd));\n}\nfloat DrawPoint(vec3 ro,vec3 rd, vec3 p){\n    float d = DistLine(ro,rd,p);//どうしてdを求めないといけないのか分からない\n    d = smoothstep(.1,.09,d);\n    return d;//1が入るようになっている。\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    float t = iTime;\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv -= .5;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    \n    //camera\n    //vec3 ro = vec3(0.,2.,-3.); //これは点\n    //vec3 ro = vec3(3.*sin(t),2.,-3.*cos(t));\n    vec3 ro = vec3(2.,2.+sin(t),2.+sin(t));\n    \n    vec3 lookat = vec3(.9);\n    \n    float zoom = 0.5;\n    \n    vec3 f = normalize(lookat -ro); //forward\n    vec3 r = cross(vec3(0.,1.,0.),f);//\"right\" vector\n    vec3 u = cross(f,r); //\"up\" vector\n    \n    vec3 c = ro + f*zoom;//center\n    vec3 i = c + uv.x*r + uv.y*u;\n    vec3 rd = i - ro;\n    \n    //vec3 rd = vec3(uv.x,uv.y,0.) -ro; //これはベクトル\n  \n    \n    //vec3 p = vec3(sin(t),0.,1.+cos(t)); //これは対象の点\n    //vec3 p = vec3(sin(t),0.,cos(t));\n    \n    //float d = DrawPoint(ro,rd,p);\n    float d = 0.;\n    d += DrawPoint(ro,rd,vec3(0.,0.,0.));\n    d += DrawPoint(ro,rd,vec3(0.,0.,1.));\n    d += DrawPoint(ro,rd,vec3(0.,1.,0.));\n    d += DrawPoint(ro,rd,vec3(0.,1.,1.));\n    d += DrawPoint(ro,rd,vec3(1.,0.,0.));\n    d += DrawPoint(ro,rd,vec3(1.,0.,1.));\n    d += DrawPoint(ro,rd,vec3(1.,1.,0.));\n    d += DrawPoint(ro,rd,vec3(1.,1.,1.));\n    \n    //dに1が入る理由が分からない。\n    fragColor = vec4(vec3(d),1.);\n    \n    \n    \n    \n}","name":"Image","description":"","type":"image"}]}