{"ver":"0.1","info":{"id":"mts3zH","date":"1671340165","viewed":238,"name":"Free Lightning","username":"creikey","description":"Lightning","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["lightning","opensimplex"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Port of Humus Electro demo http://humus.name/index.php?page=3D&ID=35\n// without usage of simplex noise so is cc0. Licensed as cc0\n\n// https://www.shadertoy.com/view/4scGWj it's this but with open simplex noise\n\nvec4 permute(vec4 t) {\n    return t * (t * 34.0 + 133.0);\n}\n\n// Gradient set is a normalized expanded rhombic dodecahedron\nvec3 grad(float hash) {\n    \n    // Random vertex of a cube, +/- 1 each\n    vec3 cube = mod(floor(hash / vec3(1.0, 2.0, 4.0)), 2.0) * 2.0 - 1.0;\n    \n    // Random edge of the three edges connected to that vertex\n    // Also a cuboctahedral vertex\n    // And corresponds to the face of its dual, the rhombic dodecahedron\n    vec3 cuboct = cube;\n    cuboct[int(hash / 16.0)] = 0.0;\n    \n    // In a funky way, pick one of the four points on the rhombic face\n    float type = mod(floor(hash / 8.0), 2.0);\n    vec3 rhomb = (1.0 - type) * cube + type * (cuboct + cross(cube, cuboct));\n    \n    // Expand it so that the new edges are the same length\n    // as the existing ones\n    vec3 grad = cuboct * 1.22474487139 + rhomb;\n    \n    // To make all gradients the same length, we only need to shorten the\n    // second type of vector. We also put in the whole noise scale constant.\n    // The compiler should reduce it into the existing floats. I think.\n    grad *= (1.0 - 0.042942436724648037 * type) * 3.5946317686139184;\n    \n    return grad;\n}\n\n// BCC lattice split up into 2 cube lattices\nvec4 bccNoiseDerivativesPart(vec3 X) {\n    vec3 b = floor(X);\n    vec4 i4 = vec4(X - b, 2.5);\n    \n    // Pick between each pair of oppposite corners in the cube.\n    vec3 v1 = b + floor(dot(i4, vec4(.25)));\n    vec3 v2 = b + vec3(1, 0, 0) + vec3(-1, 1, 1) * floor(dot(i4, vec4(-.25, .25, .25, .35)));\n    vec3 v3 = b + vec3(0, 1, 0) + vec3(1, -1, 1) * floor(dot(i4, vec4(.25, -.25, .25, .35)));\n    vec3 v4 = b + vec3(0, 0, 1) + vec3(1, 1, -1) * floor(dot(i4, vec4(.25, .25, -.25, .35)));\n    \n    // Gradient hashes for the four vertices in this half-lattice.\n    vec4 hashes = permute(mod(vec4(v1.x, v2.x, v3.x, v4.x), 289.0));\n    hashes = permute(mod(hashes + vec4(v1.y, v2.y, v3.y, v4.y), 289.0));\n    hashes = mod(permute(mod(hashes + vec4(v1.z, v2.z, v3.z, v4.z), 289.0)), 48.0);\n    \n    // Gradient extrapolations & kernel function\n    vec3 d1 = X - v1; vec3 d2 = X - v2; vec3 d3 = X - v3; vec3 d4 = X - v4;\n    vec4 a = max(0.75 - vec4(dot(d1, d1), dot(d2, d2), dot(d3, d3), dot(d4, d4)), 0.0);\n    vec4 aa = a * a; vec4 aaaa = aa * aa;\n    vec3 g1 = grad(hashes.x); vec3 g2 = grad(hashes.y);\n    vec3 g3 = grad(hashes.z); vec3 g4 = grad(hashes.w);\n    vec4 extrapolations = vec4(dot(d1, g1), dot(d2, g2), dot(d3, g3), dot(d4, g4));\n    \n    // Derivatives of the noise\n    vec3 derivative = -8.0 * mat4x3(d1, d2, d3, d4) * (aa * a * extrapolations)\n        + mat4x3(g1, g2, g3, g4) * aaaa;\n    \n    // Return it all as a vec4\n    return vec4(derivative, dot(aaaa, extrapolations));\n}\n\n\n// Gives X and Y a triangular alignment, and lets Z move up the main diagonal.\n// Might be good for terrain, or a time varying X/Y plane. Z repeats.\nvec4 bccNoiseDerivatives_XYBeforeZ(vec3 X) {\n    \n    // Not a skew transform.\n    mat3 orthonormalMap = mat3(\n        0.788675134594813, -0.211324865405187, -0.577350269189626,\n        -0.211324865405187, 0.788675134594813, -0.577350269189626,\n        0.577350269189626, 0.577350269189626, 0.577350269189626);\n    \n    X = orthonormalMap * X;\n    vec4 result = bccNoiseDerivativesPart(X) + bccNoiseDerivativesPart(X + 144.5);\n    \n    return vec4(result.xyz * orthonormalMap, result.w);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = fragCoord.xy / iResolution.xy;    \n  uv = uv * 2. -1.;  \n \n  vec2 p = fragCoord.xy/iResolution.x;\n  vec3 p3 = vec3(p, iTime*0.2);    \n    \n  vec3 noise_input = vec3(p3*25.0+12.0);\n  //float intensity = noise(noise_input);\n  float intensity = 0.0;\n  intensity += bccNoiseDerivatives_XYBeforeZ(noise_input).w*0.4;\n  intensity += bccNoiseDerivatives_XYBeforeZ(noise_input*0.55).w*0.7;\n  intensity += bccNoiseDerivatives_XYBeforeZ(noise_input*0.44).w*0.8;\n  \n                          \n  float t = clamp((uv.x * -uv.x * 0.16) + 0.15, 0., 1.);                         \n  //fragColor.rgb = vec3(t);\n  \n  float dist = length(uv);\n  \n  float y = abs( dist - 0.5 - intensity * 0.1);\n    \n  float g = pow(y, 0.2);\n                          \n  vec3 col = vec3(1.50, 1.48, 1.78);\n  col = col * -g + col;                    \n  col = col * col;\n  col = col * col;\n                          \n  fragColor.rgb = col;                          \n  fragColor.w = 1.;  \n  \n}\n\n/* Origial shader and setup source\n\n!!ARBfp1.0\n\nOUTPUT output = result.color;\nTEMP glow, turb, y, t, mid;\n\nPARAM glowFallOff = 0.2;\nPARAM color = { 1.70, 1.48, 1.78, 0 };\n\nTEX\t\tturb, fragment.texcoord[0], texture[0], 3D;\nMAD\t\tturb.x, turb.x, 2, -1;\n\nMAD_SAT\tt.x, fragment.texcoord[1].y, -fragment.texcoord[1].y, 0.15;\n\nMAD\t\ty, turb.x, -t.x, fragment.texcoord[1].x;\nABS\t\ty, y;\n\nPOW\t\tglow.x, y.x, glowFallOff.x;\nMAD\t\tglow, -glow.x, color, color;\nMUL\t\tglow, glow, glow;\nMUL\t\toutput, glow, glow;\n\nEND \n*/\n\n/*\n\tfloat z = currTime * 0.8f;\n\tfloat y = z * 1.82f;\n\n\tglBegin(GL_TRIANGLE_STRIP);\n\t\tglMultiTexCoord3fARB(GL_TEXTURE0_ARB, -1, y - 1, z);\n\t\tglMultiTexCoord2fARB(GL_TEXTURE1_ARB,  1, -0.4f);\n\t\tglVertex2f(-1,  1);\n\t\tglMultiTexCoord3fARB(GL_TEXTURE0_ARB,  1, y - 1, z);\n\t\tglMultiTexCoord2fARB(GL_TEXTURE1_ARB,  1, 0.4f);\n\t\tglVertex2f( 1,  1);\n\t\tglMultiTexCoord3fARB(GL_TEXTURE0_ARB, -1, y,     z);\n\t\tglMultiTexCoord2fARB(GL_TEXTURE1_ARB,  0, -0.4f);\n\t\tglVertex2f(-1,  0);\n\t\tglMultiTexCoord3fARB(GL_TEXTURE0_ARB,  1, y,     z);\n\t\tglMultiTexCoord2fARB(GL_TEXTURE1_ARB,  0, 0.4f);\n\t\tglVertex2f( 1,  0);\n\t\tglMultiTexCoord3fARB(GL_TEXTURE0_ARB, -1, y - 1, z);\n\t\tglMultiTexCoord2fARB(GL_TEXTURE1_ARB, -1, -0.4f);\n\t\tglVertex2f(-1, -1);\n\t\tglMultiTexCoord3fARB(GL_TEXTURE0_ARB,  1, y - 1, z);\n\t\tglMultiTexCoord2fARB(GL_TEXTURE1_ARB, -1, 0.4f);\n\t\tglVertex2f( 1, -1);\n\tglEnd();\n\n*/","name":"Image","description":"","type":"image"}]}