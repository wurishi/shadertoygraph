{"ver":"0.1","info":{"id":"3s3GDN","date":"1615294368","viewed":69,"name":"2D distance visualizer","username":"Pro_Coder","description":"visualizes distance of 3D distance functions in 2D","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["simple"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//x and z axis is green\n\n//distances very very close to 0.0 are white, to draw an outline of the object\n//distances above 0.0 are blue\n//distances below 0.0 are red\n\n//this defines which y-slice of the 3D object we are looking at\n#define Y_SLICE 0.0\n//#define Y_SLICE (sin(iTime*.3))*.25\n\n#define LINE_THICKNESS 0.009\n#define DISTANCE_TO_COLOR_FACTOR 4.;\n\nfloat vmax(vec3 a){\n    return max(a.z, max(a.x, a.y));\n}\n\nfloat sdfBox(vec3 p, vec3 size){\n    vec3 d = abs(p) - size*.5;\n    float m = (vmax(d));\n    return max(length(min(sign(d) + vec3(1.), 1.) * d), abs(m)) * sign(m);\n}\n\nfloat sdfSphere(vec3 p, float radius ){\n    return length(p) - radius;\n}\n\n//the distance function\nfloat dist(vec3 p){\n     float d = 1.0;\n     \n     d = sdfBox(p, vec3(0.5));\n     //d = sdfSphere(p, .3);\n    \n    return d;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - iResolution.xy*.5)/iResolution.yy;\n    vec3 c = vec3(0.0, 0.0, 0.0);\n    \n    if(uv.x > 0. && abs(uv.y) < LINE_THICKNESS*.5){\n        c.g = 1.0;\n    }\n    \n    if(uv.y > 0. && abs(uv.x) < LINE_THICKNESS*.5){\n        c.g = 1.0;\n    }\n    \n    c.b = dist(vec3(uv.x, Y_SLICE, uv.y))*DISTANCE_TO_COLOR_FACTOR;\n    c.r = -min(c.b, 0.0);\n    //c.g = fract(c.b*10.)*sign(c.b);\n    c.g *= .5;\n    \n    if(abs(c.b) < LINE_THICKNESS*.5){\n        c = vec3(1.);\n    }\n    \n    \n    \n    \n\n    fragColor = vec4(c ,1.0);\n}","name":"Image","description":"","type":"image"}]}