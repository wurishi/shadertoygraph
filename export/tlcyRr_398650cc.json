{"ver":"0.1","info":{"id":"tlcyRr","date":"1608334223","viewed":49,"name":"SimpleMandelbrot","username":"johnnyp","description":"Mandelbrot's Set","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fractal","mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_ITERATIONS 600\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    // Scale where Julia's set is visible\n    //float x0 = (uv.x * (1. + 2.5) - 2.5) / (1. + iTime * iTime) - 1.36;\n    // float y0 = (uv.y * (1. + 1.) - 1.) / (1. + iTime * iTime) + 0.03;\n    \n    float scale = 1. / (1. + iTime);\n    \n    float x0 = scale * (uv.x * (1. + 2.5) - 2.5) - iMouse.x / iResolution.x;\n    float y0 = scale * (uv.y * (1. + 1.) - 1.) - iMouse.y / iResolution.y;\n    \n    float x = 0.;\n    float y = 0.;\n    \n    int iter = 0;\n    \n    for (int i = 0; i < MAX_ITERATIONS; i++) {\n    \n        if (x * x + y * y >= 4.)\n            break;\n            \n        float x_new = x * x - y * y + x0;\n        float y_new = 2. * x * y + y0;\n        \n        x = x_new;\n        y = y_new;\n        iter++;  \n    }\n     \n    // Time varying pixel color)\n    float t = float(iter) / float(MAX_ITERATIONS) + 0.6 + 0.1 * iTime;\n    \n    vec3 col = pal(t, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,0.5),vec3(0.8,0.90,0.30) );\n    \n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}