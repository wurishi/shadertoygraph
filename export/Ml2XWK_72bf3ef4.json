{"ver":"0.1","info":{"id":"Ml2XWK","date":"1446649194","viewed":326,"name":"GridNoise","username":"jt","description":"Voronoi-cells placed on a grid with random offsets\n (for a variant placing spheres inside cells see [url]https://www.shadertoy.com/view/Ml2XDK[/url]).","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["voronoi","grid","random"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","previewfilepath":"/media/ap/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"// GridNoise (randomly assigned colors to displaced-grid voronoi-cells) by Jakob Thomsen\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// iq's hash function from https://www.shadertoy.com/view/MslGD8\nvec2 hash( vec2 p ) { p=vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))); return fract(sin(p)*18.5453); }\n\nfloat simplegridnoise(vec2 v)\n{\n    //float s = 0.01; // NOTE: this setting causes the horizontal-line-artifacts (thanks, iq!)\n    float s = 1.0 / 256.0;\n    vec2 fl = floor(v);\n    vec2 fr = fract(v);\n    float mindist = 1000.0;\n    for(float y = -1.0; y <= 1.0; y++)\n    {\n        for(float x = -1.0; x <= 1.0; x++)\n        {\n            vec2 offset = vec2(x, y);\n    \t\t//vec4 r = texture(iChannel0, (fl + offset) * s + iTime * 0.001);\n            //vec2 pos = r.xy;\n            //vec4 r = texture(iChannel0, (fl + offset) * s);\n            //float phi = 3.1415926 * 2.0 * (iTime * 0.1 + r.z);\n            float phi = 3.1415926 * 2.0 * (iTime * 0.1 + hash(fl + offset).x);\n            vec2 pos = 0.5 + 0.5 * vec2(cos(phi), sin(phi));\n            float d = length(fr - (pos + offset));\n            mindist = min(mindist, d);\n        }\n    }\n    \n    return mindist;\n}\n\nvec3 gridnoise(vec2 v)\n{\n    //float s = 0.01; // NOTE: this setting causes the horizontal-line-artifacts (thanks, iq!)\n    float s = 1.0 / 256.0;\n    vec2 fl = floor(v);\n    vec2 fr = fract(v);\n    vec2 nearest = vec2(0.0, 0.0);\n    float mindist = 1.0;\n    for(float y = -1.0; y <= 1.0; y++)\n    {\n        for(float x = -1.0; x <= 1.0; x++)\n        {\n            vec2 offset = vec2(x, y);\n    \t\t//vec4 r = texture(iChannel0, (fl + offset) * s + iTime * 0.001);\n            //vec2 pos = r.xy;\n            //vec4 r = texture(iChannel0, (fl + offset) * s);\n            //float phi = 3.1415926 * 2.0 * (iTime * 0.1 + r.z);\n            float phi = 3.1415926 * 2.0 * (iTime * 0.1 + hash(fl + offset).x);\n            vec2 pos = 0.5 + 0.5 * vec2(cos(phi), sin(phi));\n            float d = length(fr - (pos + offset));\n            if(d < mindist)\n            {\n                mindist = d;\n                nearest = offset;\n            }\n        }\n    }\n    \n    return vec3(fl + nearest, mindist);\n}\n\nvec4 gridNoise(vec2 v)\n{\n    return texture(iChannel1, gridnoise(v).xy * 0.01);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv.x *= iResolution.x / iResolution.y;\n\t//fragColor = vec4(vec3(simplegridnoise(uv * 10.0)), 1.0);\n    //fragColor = vec4(vec3(fract(gridnoise(uv * 10.0) / 2.0).xy * 2.0, 0.0), 1.0);\n    //fragColor = vec4(fract(gridnoise(uv * 10.0) / 2.0) * 2.0, 1.0);\n    //fragColor = gridNoise(uv * 10.0);\n    fragColor = mix(vec4(simplegridnoise(uv * 10.0)), gridNoise(uv * 10.0), vec4(0.5 + 0.5 * cos(3.1415926 * 2.0 * iTime * 0.2)));\n}\n","name":"","description":"","type":"image"}]}