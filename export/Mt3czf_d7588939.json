{"ver":"0.1","info":{"id":"Mt3czf","date":"1533424337","viewed":1524,"name":"Grainy Blur","username":"aferriss","description":"Extremely Inefficient for smooth blurs, but not bad if you want a grainy one.  I think mipmaps are doing a lot of the work.","likes":19,"published":3,"flags":0,"usePreview":1,"tags":["blur","random","grain"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float dist = 4.0; // how far to sample from\nint loops = 6; // how many times to sample, more = smoother\n\nfloat rand(vec2 uv){\n return fract(sin(dot(uv, vec2(12.9898,78.233)))*43578.5453);   \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 t = vec4(0.0);\n    \n    vec2 texel = 1.0 / iResolution.xy;\n    vec2 d = texel * dist;\n    \n    for(int i = 0; i < loops; i++){\n    \t\n\t\tfloat r1 = clamp(rand(uv * float(i))*2.0-1.0, -d.x, d.x);\n    \tfloat r2 = clamp(rand(uv * float(i+loops))*2.0-1.0, -d.y, d.y);\n    \n    \tt += texture(iChannel0, uv + vec2(r1 , r2));\n    }\n    \n    t /= float(loops);\n\n    fragColor = t;\n}","name":"Image","description":"","type":"image"}]}