{"ver":"0.1","info":{"id":"WsfGR8","date":"1544806133","viewed":77,"name":"Julia c = (0.285, 0)","username":"virgil81188","description":"Learning Julia sets","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["julia"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 julia(vec2 z, vec2 c)\n{\n    int it = 0;\n    int maxIt = 100;\n    float x = 0.0;\n    vec2 oldZ = z;\n    while (dot(z,z) < 4.0 && it < maxIt)\n    {\n        x = z.x*z.x - z.y*z.y;\n        z.y = 2.0*z.x*z.y + c.y;\n        z.x = x + c.x;\n        it++;\n    }\n    if (it == maxIt)\n    {\n\t\treturn vec3(1,1,1);\n    }\n    else\n    {\n        float v;\n    \tv = pow(0.5 * 2.0 * 3.141592 * float(it)/float(maxIt), 0.25);\n        return vec3(pow(v, 2.0 + (0.5 + 0.5 * sin(iTime))), pow(v, 2.0 + (0.5 + 0.5 * sin(iTime * 0.7))), pow(v, 2.0 + (0.5 + 0.5 * sin(iTime * 0.5))));\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float aspectRatio = iResolution.x / float(iResolution.y);\n\n    // Time varying pixel color\n    vec2 c = vec2(0.285 + 0.025 * sin(0.66 * iTime), 0.01 * sin(iTime * 0.5));\n    float size = 2.5;\n    vec3 col = julia((uv - vec2(0.5, 0.5)) * vec2(size * aspectRatio, size) - c*0.5, c);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}