{"ver":"0.1","info":{"id":"Wtl3Wf","date":"1557915536","viewed":150,"name":"Blob bands","username":"ThaRemo","description":"Moving blob with banding","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["banding","blob","bands"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Counts amount of bits in 8 bit int\n// Seems to be built-in for Nvidia GPUs (at least not available on my AMD RX480, Chrome)\nuint bitCount(in uint num) {\n  uint n = num;\n  n = ((0xaau & n) >> 1) + (0x55u & n);\n  n = ((0xccu & n) >> 2) + (0x33u & n);\n  n = ((0xf0u & n) >> 4) + (0x0fu & n);\n  return n;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    \n    // Bit attr\n    uint attr = 0u;\n    for (int i = 0; i < 8; ++i) {\n        if (length(uv - vec2(0.5) - 0.1 * sin(uv * 5.0 * sin(iTime + iMouse.xy / iResolution.xy))) * 2.0 < float(i) / 8.0) {\n         \tattr |= 1u << i;   \n        }\n    }\n    \n    uint nBits = bitCount(attr);\n    \n    float t = (float(attr) / 255.0);\n\tcol = vec3(float(nBits) / 8., t * uv.x, t * uv.y);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}