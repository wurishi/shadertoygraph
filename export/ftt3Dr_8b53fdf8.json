{"ver":"0.1","info":{"id":"ftt3Dr","date":"1636096018","viewed":510,"name":"Motion Tracking","username":"ladberg","description":"Testing out some rudimentary motion tracking to create a datamosh-esque effect.\n\nClick to place a debug point.\nHold space to freeze the webcam (e.g. to swap a different person in and track their face on yours)\nR to reset\nD to see the tracking view (debug)","likes":6,"published":1,"flags":50,"usePreview":0,"tags":["webcam"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    if (texelFetch(iChannel2, ivec2(68, 0), 0).x != 0.0) {\n        // For debugging, hold space to see raw pointer data\n        fragColor = (texture(iChannel1, uv / float(BLOCKDIM)) - 0.5) * 50.0 + 0.5;\n    } else {\n        fragColor = texture(iChannel0, uv);\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Buffers A and B just maintain a copy of the last frame's camera\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    if (iFrame % 2 == 0) {\n        fragColor = texture(iChannel1, uv);\n    } else {\n        fragColor = texture(iChannel0, uv);\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// Buffers A and B just maintain a copy of the last frame's camera\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    if (iFrame % 2 == 1) {\n        fragColor = texture(iChannel1, uv);\n    } else {\n        fragColor = texture(iChannel0, uv);\n    }\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"// Buffer C provides pointers from the previous frame to the current frame\n\nvec2 dim;\n\nvec4 prevTex(vec2 uv) {\n    if (iFrame % 2 == 0) {\n        return texture(iChannel1, uv);\n    } else {\n        return texture(iChannel0, uv);\n    }\n}\n\nvec4 curTex(vec2 uv) {\n    return texture(iChannel2, uv);\n}\n\nfloat blockDist(vec2 curUV, vec2 prevUV) {\n    float dist = 0.0;\n    \n    for (int i = 0; i < BLOCKDIM; i++) {\n        for (int j = 0; j < BLOCKDIM; j++) {\n            vec2 offset = vec2(float(i) * dim.x, float(j) * dim.y);\n            dist += distance(curTex(curUV + offset), prevTex(prevUV + offset));\n        }\n    }\n    \n    return dist;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy * float(BLOCKDIM);\n    fragColor = vec4(0.5, 0.5, 0.0, 1.0);\n    if (uv.x > 1.0 || uv.y > 1.0) {\n        return;\n    }\n    \n    dim = 1.0/iResolution.xy;\n    \n    float minDist = blockDist(uv, uv) - 0.5; // The -0.5 biases towards no movement a bit to make it more stable\n    vec2 minPointer = vec2(0.0, 0.0);\n    \n    for (int i = 0; i < 8; i++) { // up, up-right, right, down-right, down, down-left, left, up-left\n        vec2 dir = vec2(0.0, 0.0);\n        switch (i) {\n        case 0:\n            dir.y = dim.y;\n            break;\n        case 1:\n            dir.x = dim.x;\n            dir.y = dim.y;\n            break;\n        case 2:\n            dir.x = dim.x;\n            break;\n        case 3:\n            dir.x = dim.x;\n            dir.y = -dim.y;\n            break;\n        case 4:\n            dir.y = -dim.y;\n            break;\n        case 5:\n            dir.x = -dim.x;\n            dir.y = -dim.y;\n            break;\n        case 6:\n            dir.x = -dim.x;\n            break;\n        case 7:\n            dir.x = -dim.x;\n            dir.y = dim.y;\n            break;\n        }\n        \n        for (int j = 1; j <= ITERS; j++) {\n            vec2 pointer = dir * float(j * STRIDE);\n            float dist = blockDist(uv, uv + pointer);\n            if (dist < minDist) {\n                minDist = dist;\n                minPointer = pointer;\n            }\n        }\n    }\n    \n    fragColor.xy += minPointer;\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 d = 1.0/iResolution.xy;\n    \n    if (iFrame < 5 || texelFetch(iChannel3, ivec2(82, 0), 0).x != 0.0) {\n        // Start off with webcam data (or reset if r held down)\n        fragColor = texture(iChannel2, uv);\n        return;\n    } else if (texelFetch(iChannel3, ivec2(32, 0), 0).x != 0.0) {\n        // If space is held down then pause tracking\n        fragColor = texture(iChannel1, uv);\n        return;\n    } else if (iMouse.z > 0.0 && distance(fragCoord, iMouse.zw) < 10.0) {\n        // Place a tracking dot on click\n        fragColor = vec4(1.0, 0.0, 0.0, 1.0);\n        return;\n    }\n    \n    // Move current buffer by pointer from tracking data\n    vec2 pointer = texture(iChannel0, uv / float(BLOCKDIM)).xy - 0.5;\n    fragColor = texture(iChannel1, uv + pointer) * float(DECAY) + texture(iChannel2, uv) * (1.0 - float(DECAY));\n}","name":"Buffer D","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"// How big of a block to move around (1 for individual pixels)\n#define BLOCKDIM 12\n\n// Check ITERS * STRIDE pixels in each direction for match\n#define ITERS 4\n#define STRIDE 2\n\n// How slow the image should refresh (1 = never)\n#define DECAY 0.99","name":"Common","description":"","type":"common"}]}