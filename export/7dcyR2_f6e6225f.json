{"ver":"0.1","info":{"id":"7dcyR2","date":"1653738822","viewed":42,"name":"Rational Bezier Curve","username":"Envy24","description":"BufferA - drawing spline\nBufferB - drawing control points\nBufferC - drawind dashed convex hull\nImage - mixing and coloroing\n\nFour passes used for better readability of code.","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["bezier","curve","interpolation","rational"],"hasliked":0,"parentid":"7d3yR2","parentname":"Rational Cubic Bezier"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 O, in vec2 SC )\n{\n    vec4 spline      = TEXF0(SC);\n    vec4 knot        = TEXF1(SC);\n    vec4 convex_hull = TEXF2(SC);\n    \n    float min = MIN3(spline.r, knot.r, convex_hull.r);\n    \n    O = \n        min == 1.0 ?\n            vec4(1) :                            // Background color\n            min == spline.r ?\n                vec4(0, spline.r, spline.r, 1) : // Spline color\n                min == knot.r ?\n                    vec4(0, knot.r, 0, 1) :      // Knot color\n                    vec4(convex_hull);           // Convex hull  color\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define R                           iResolution\n#define TO_CENTERED_NDC(SC)       ( ((SC)+(SC)-R.xy) / R.y )         // in range x=[-AR; AR], y=[-1.0; 1.0]\n#define INITIALLY_FAR               9e30\n#define TEXF0(SC)                 ( texelFetch(iChannel0, ivec2(SC), 0) )\n#define TEXF1(SC)                 ( texelFetch(iChannel1, ivec2(SC), 0) )\n#define TEXF2(SC)                 ( texelFetch(iChannel2, ivec2(SC), 0) )\n#define MIN3(a, b, c)             ( min(min((a), (b)), (c)) )\n#define NMY                       ( iMouse.y / R.y )                 // in range [0.0; 1.0]\n#define NMX                       ( iMouse.x / R.x )                 // in range [0.0; 1.0]\n#define LMB_IS_HOLD               ( iMouse.z > 0.0 )\n\n#define RANDOM\n\nconst int num_of_ctrls = 7; /* 2 control points minimum */\nvec2 ctrls[num_of_ctrls];\nfloat weights[num_of_ctrls];\n/**\nvec2 ctrls[num_of_ctrls] = vec2[num_of_ctrls](\n    vec2( -1.5, -0.9),\n    vec2( -1.0,  0.9),\n    vec2(  1.0,  0.9),\n    vec2(  1.5, -0.9),\n    vec2(  0.0, 0.0)\n);\nfloat weights[num_of_ctrls] = float[num_of_ctrls](\n    1., 1., 10., 1., 1. // can be any positive numbers\n);\n/**/\n\n\nfloat circleSQSDF(\n    in vec2 S,           // sample coordinates\n    in vec2 C,           // circle center\n    in float r,          // circle radius\n    in float smoothness) // AA parameter\n{\n    // Sample coordinates relative to circle center.\n    float _x = S.x - C.x; float _y = S.y - C.y;\n    \n    // Signed distance of areas (squared distancies).\n    float sds = _x * _x + _y *_y - r * r;\n    \n    float ss = smoothness * smoothness;\n    \n    // Smoothstep interpolation.\n    return smoothstep(-ss, ss, sds);\n    //return smoothstep(-ss, ss, sds * sds); // outline\n}\n\n/* \n    Returns random vec2([-1.0; 1.0], [-1.0; 1.0]).\n*/\nvec2 vector2HashUI32(\n    const uint x,\n    const uint y)\n{\n    // Pick some enthropy source values.\n    // Try different values.\n    const uint entropy0 = 123u;\n    const uint entropy1 = 456u;\n    const uint entropy2 = 789u;\n\n    // Use linear offset method to mix coordinates.\n    uint value0 = y * entropy2 + x;\n    uint value1 = x * entropy2 + y;\n\n    // Calculate hash.\n\tvalue0 += entropy1; value0 *= 445593459u; value0 ^= entropy0;\n    value1 += entropy1; value1 *= 445593459u; value1 ^= entropy0;\n    \n    // 2.0f / 4294967295.0f = 4.6566128730773926e-10\n\n    return \n        vec2(\n            float(value0 * value0 * value0) * 4.6566128730773926e-10f - 1.0f,\n            float(value1 * value1 * value1) * 4.6566128730773926e-10f - 1.0f);\n}\n\n/*  \n    Returns hash in range [0.0; 1.0].\n*/\nfloat sample1DHashUI32(uint value)\n{\n    // Pick some enthropy source values.\n    // Try different values.\n    const uint entropy0 = 12345u;\n    const uint entropy1 = 67890u;\n\n    // Calculate hash.\n\tvalue += entropy1;\n\tvalue *= 445593459u;\n\tvalue ^= entropy0;\n\n    // 1.0f / 4294967295.0f = 2.32830644e-10\n    \n    return float(value * value * value) * 2.32830644e-10;\n}\nvoid randomize_ctrls(float time)\n{\n    time *= 0.5;\n    float t = fract(time);\n    uint T = uint(time);\n\n    for (int k = 0; k < num_of_ctrls; ++k)\n    {\n        uint x = T + uint(k);\n        uint y = 2u * T + uint(k * 2);\n        vec2 c = vector2HashUI32(x, y);\n        vec2 n = vector2HashUI32(x + 1u, y + 2u);\n    \n        ctrls[k] = c * (1. - t) + n * t;\n    }\n}","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"uint factorialTableM12(int n)\n{\n    switch (n)\n    {\n    case 0:\n    case 1: return 1u;\n    case 2: return 2u;\n    case 3: return 6u;\n    case 4: return 24u;\n    case 5: return 120u;\n    case 6: return 720u;\n    case 7: return 5040u;\n    case 8: return 40320u;\n    case 9: return 362880u;\n    case 10: return 3628800u;\n    case 11: return 39916800u;\n    case 12: return 479001600u;\n    default: break;\n    }\n    return 0u;\n}\n\nuint binomialCoefficient32(\n    int rowIdx, // [0; 34]\n    int colIdx) // [0; 34]\n{\n    if (rowIdx == 0 || colIdx == 0 || rowIdx == colIdx) { return 1u; }\n    if (rowIdx <= 12)\n    {\n        return\n            factorialTableM12(rowIdx) /\n            (factorialTableM12(colIdx) * factorialTableM12(rowIdx - colIdx));\n    }\n\n    uint buffer[70];\n    buffer[0] = 1u;   buffer[1] = 13u;   buffer[2] = 78u;   buffer[3] = 286u;\n    buffer[4] = 715u; buffer[5] = 1287u; buffer[6] = 1716u; buffer[7] = 1716u;\n\n    if (rowIdx == 13) { return buffer[colIdx > 6 ? 13 - colIdx : colIdx]; }\n\n    for (int c = 13, b = 0; c >= 7; --c, ++b) { buffer[c] = buffer[b]; }\n\n    int r_buff = 0;\n    buffer[35] = 1u;\n\n    for (int r = 14; r <= rowIdx; ++r)\n    {\n        int r_offset = r_buff * 35;\n        int w_offset = ((r_buff + 1) & 1) * 35;\n        buffer[w_offset + r] = 1u;\n\n        for (int c = 1; c < r; ++c)\n        {\n            buffer[w_offset + c] = buffer[r_offset + c - 1] + buffer[r_offset + c];\n        }\n\n        r_buff = (r_buff + 1) & 1;\n    }\n\n    return buffer[r_buff * 35 + colIdx];\n}\n\nfloat Bernstein(\n    in uint bcs[num_of_ctrls],\n    in int n,\n    in int i,\n    in float t)\n{\n    float f = 1. - t;\n    \n    float powt = 1.;\n    float powf = 1.;\n    \n    int j = i;\n    int ni = n - i;\n     \n    while (j-- > 0) { powt *= t; }\n    while (ni-- > 0) { powf *= f; }\n    \n    return float(bcs[i]) * powt * powf;\n}\n\nvec2 rationalBezierCurve(\n    vec2[num_of_ctrls] C,   // control points\n    float[num_of_ctrls] W,  // weights\n    uint[num_of_ctrls] BCS,  // binomial coeffitients\n    float t)\n{\n    float WB[num_of_ctrls];\n    \n    for (int i = 0; i < num_of_ctrls; ++i)\n    {\n        WB[i] = W[i] * Bernstein(BCS, num_of_ctrls, i, t);   \n    }\n\n    vec2 N = vec2(0.0);\n    float D = 0.0;\n    \n    for (int w = 0; w < num_of_ctrls; ++w)\n    {\n        N += WB[w] * C[w];\n        D += WB[w];\n    }\n\n    return N/D;\n}\n\nvec2 find_closest_curve_point_to_pixel(\n    in vec2[num_of_ctrls] ctrls,\n    in vec2 NDC)\n{\n    vec2 closestP = vec2(0);\n    float minSqDist = INITIALLY_FAR;\n    \n    float dt = 0.005;\n    \n    weights[1] = \n        LMB_IS_HOLD ?\n            NMX * 10. :\n            2.0;\n    weights[2] = \n        LMB_IS_HOLD ?\n            NMY * 10. :\n            2.0;\n    \n    uint bcs[num_of_ctrls];\n    for (int i = 0; i < num_of_ctrls; ++i)\n    {\n        bcs[i] = binomialCoefficient32(num_of_ctrls, i);\n        \n        weights[i] = sample1DHashUI32(uint(i) + uint(iTime));\n    }\n    \n    for (float t = 0.; t <= 1.; t += dt)\n    {\n        vec2 P = rationalBezierCurve(ctrls, weights, bcs, t);\n\n        vec2 diff = P - NDC;\n        float sqDist = dot(diff, diff);\n\n        minSqDist = min(minSqDist, sqDist);\n\n        closestP = \n            minSqDist == sqDist ? \n                P :\n                closestP;\n    }\n    \n    return closestP;\n}\n\nvoid mainImage( out vec4 O, in vec2 SC )\n{\n    vec2 NDC = TO_CENTERED_NDC(SC);\n\n#ifdef RANDOM\n    randomize_ctrls(iTime);\n#endif\n\n    O = vec4(circleSQSDF(\n        find_closest_curve_point_to_pixel(ctrls, NDC),\n        NDC,\n        0.01,\n        0.011));\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"XsXGR8","channel":0}],"code":"vec2 find_closest_control_point_to_pixel(\n    in vec2[num_of_ctrls] ctrls,\n    in vec2 NDC)\n{\n    vec2 closestP = vec2(0);\n    float minSqDist = INITIALLY_FAR;\n\n    for (int k = 0; k < num_of_ctrls; ++k)\n    {\n        vec2 diff = ctrls[k] - NDC;\n        float sqDist = dot(diff, diff);\n       \n        minSqDist = min(minSqDist, sqDist);\n        \n        closestP = \n            minSqDist == sqDist ? \n                ctrls[k] :\n                closestP;\n    }\n    \n    return closestP;\n}\n\nvoid mainImage( out vec4 O, in vec2 SC )\n{\n    vec2 NDC = TO_CENTERED_NDC(SC);\n\n#ifdef RANDOM\n    randomize_ctrls(iTime);\n#endif\n\n    O = vec4(circleSQSDF(\n        find_closest_control_point_to_pixel(ctrls, NDC),\n        NDC,\n        0.02,\n        0.018));\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"4sXGR8","channel":0}],"code":"vec2 find_closest_convex_hull_point_to_pixel(\n    in vec2[num_of_ctrls] ctrls,\n    in vec2 NDC)\n{\n    vec2 closestP = vec2(0);\n    float minSqDist = INITIALLY_FAR;\n    \n    int num_of_lines = num_of_ctrls - 1; // 2 knots per line\n     \n    for (int l = 0; l < num_of_lines; ++l)\n    {\n        for (float t = 0.; t <= 1.; t += 0.1)\n        {\n            vec2 P = ctrls[l] * (1. - t) + ctrls[l + 1] * t;\n\n            vec2 diff = P - NDC;\n            float sqDist = dot(diff, diff);\n\n            minSqDist = min(minSqDist, sqDist);\n\n            closestP = \n                minSqDist == sqDist ? \n                    P :\n                    closestP;\n        }\n    }\n    \n    return closestP;\n}\n\nvoid mainImage( out vec4 O, in vec2 SC )\n{\n    vec2 NDC = TO_CENTERED_NDC(SC);\n\n#ifdef RANDOM\n    randomize_ctrls(iTime);\n#endif\n\n    O = vec4(circleSQSDF(\n        find_closest_convex_hull_point_to_pixel(ctrls, NDC),\n        NDC,\n        0.008,\n        0.0088));\n}","name":"Buffer C","description":"","type":"buffer"}]}