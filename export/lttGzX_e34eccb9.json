{"ver":"0.1","info":{"id":"lttGzX","date":"1470675091","viewed":196,"name":"Diffusion Anim","username":"daeken","description":"Animated version of my freestyle gfx entry from TRSAC 2015.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["trsac"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* Compiled with Shaderforth: https://github.com/daeken/Shaderforth\nimport[ engine ]\nimport[ noise ]\n\n:globals\n\ttrue =>shadertoy\n\t\t{\n\t\t\t@vec3 uniform =iResolution @float uniform =iTime\n\t\t\tiResolution .xy =>resolution\n\t\t\tiTime =>time\n\t\t}\n\t\t{\n\t\t\t@vec2 uniform =R @float uniform =T\n\t\t\tR =>resolution\n\t\t\tT =>time\n\t\t}\n\tshadertoy cif\n\n\t@vec3 32 array uniform =H\n\tH =>current\n;\n\n: scene ( p:vec3 -> vec2 )\n\t[ [\n\t\tp [ 0 0 -3.5 ] + =>tp\n\t\t[\n\t\t\t{ ( rp )\n\t\t\t\t[\n\t\t\t\t\t[\n\t\t\t\t\t\trp [ .27 6 6 ] box\n\t\t\t\t\t\trp 1.5 ty [ 6 .8 1 ] box\n\t\t\t\t\t\trp -1.5 ty [ 6 .8 1 ] box\n\t\t\t\t\t] .4 unionsmooth\n\t\t\t\t\t{ ( ryp )\n\t\t\t\t\t\tryp 1.9 ty .1 tz [ 6 .9 .5 ] box\n\t\t\t\t\t} rp 25 rotate-x\n\t\t\t\t] union\n\t\t\t} p -60 rotate-z\n\t\t\ttp 3 sphere\n\t\t] subtract\n\t\t[\n\t\t\t{ ( rp )\n\t\t\t\t1 rp .y abs 3.5 - 0 1 clamp time .7 * sin * - =>rampcenter\n\t\t\t\t1 rp .y abs 2.75 - 0 1 clamp - time 1.7 * sin * =>rampside\n\t\t\t\t[\n\t\t\t\t\trp [ .09 4.5 .25 rampcenter * ] box\n\t\t\t\t\trp .18 tx [ .09 3.75 .3 rampside * ] box\n\t\t\t\t\trp -.18 tx [ .09 3.75 .3 rampside * ] box\n\t\t\t\t] union\n\t\t\t} p -2 tz -60 rotate-z\n\t\t\tp [ 0 0 -1 2 ] plane\n\t\t] union\n\t] union 0 ]\n;\n\n:m palette ( t )\n\t[\n\t\t[ 0 ##00A0B0 ]\n\t\t[ .2 ##6A4A3C ]\n\t\t[ .4 ##CC333F ]\n\t\t[ .6 ##EB6841 ]\n\t\t[ .8 ##F7BC05 ]\n\t\t[ 1 ##000 ]\n\t] t envelope\n;\n\n:m stripe-texture ( uvm n )\n\t{ ( p )\n\t\tp .xy -60 deg->rad rotate-2d =rp\n\t\tp .z 10 * sin abs .025 swap step drop 1 =band\n\t\trp .x 6 * 1 - round 5 / 1 mod palette =pcol\n\t\t\t1 pcol - pcol band mix\n\t\t\trp .y 6 + 7 / 0 1 clamp 1 swap - time 2 * cos .5 * .5 + *\n\t\tdesaturate\n\t} uvm filter-texture\n;\n\n:m get-material ( pos id n )\n\t[\n\t\tpos n stripe-texture\n\t\t.6 .75 .2 .5\n\t] material\n;\n\n:m ambient-color ##fff ;\n\n:m lights ( )\n\t##fff .3 [ -.25 -.2 1 ] directional\n\t##fff .12 [ .25 -.2 1 ] directional\n\t##fee .45 [ .5 3 1.25 - -4 ] [ .3 1 -1 ] 60 1.5 spot\n\t##866 .8 [ 5 -1.35 -2.5 ] [ .3 -.55 -.5 ] 60 1.5 spot\n\t##111 1.5 [ -10 0 1 ] directional\n;\n\n: sky ( origin:vec3 dir:vec3 -> vec3 )\n\t##3A464A ##2E525E dir .y .3 + mix\n;\n\n:m focus 1.45 ;\n:m fog 0 ;\n:m fog-factor 7 ;\n:m close 0.01 ;\n:m far 100 ;\n:m max-steps 100 ;\n:m shadow-steps 30 ;\n:m shadow-dist close ;\n:m shadow-hardness 10 ;\n:m filter-textures? true ;\n\n[ 0 -2.5 -4 ] =>origin\n[\n\t0 0 3\n\t0\n] =>target\n\nresolution frag->position =pos\n\npos origin target render\n1.05 desaturate\n1.55 1.95 pos 325 * snoise-2d 2 / .5 + mix enhance-contrast\n.9 .0 brighten\n-.1 .9 vignette\n0 1 clamp ->fragcolor\n*/\n\nvec3 sky(vec3 origin, vec3 dir) {\n\treturn mix(vec3(.22745, .27451, .2902), vec3(.18039, .32157, .36863), dir.y + .3);\n}\nvec4 q_0(vec4 a, vec4 b) {\n\treturn vec4(a.w * b.x + a.x * b.w + a.y * b.z - a.z * b.y, a.w * b.y + a.y * b.w + a.z * b.x - a.x * b.z, a.w * b.z + a.z * b.w + a.x * b.y - a.y * b.x, a.w * b.w + a.x * b.x + a.y * b.y - a.z * b.z);\n}\nvec3 qrotate(vec4 a, vec3 b) {\n\treturn q_0(a, q_0(normalize(vec4(b, 0.)), vec4(-a.xyz, a.w))).xyz;\n}\nfloat snoise_12d(vec2 v) {\n\tvec4 C = vec4(.211325, .366025, -.57735, .02439);\n\tvec2 i = floor(dot(v, C.yy) + v);\n\tvec2 x0 = v - i + dot(i, C.xx);\n\tvec2 i1 = (x0.x > x0.y ? vec2(1., 0.) : vec2(0., 1.));\n\tvec4 x12 = x0.xyxy + C.xxzz - vec4(i1, 0., 0.);\n\ti = mod(i, 289.);\n\tvec3 p = mod(((mod(((vec3(0., i1.y, 1.) + i.y) * 34. + 1.) * (vec3(0., i1.y, 1.) + i.y), 289.) + i.x + vec3(0., i1.x, 1.)) * 34. + 1.) * (mod(((vec3(0., i1.y, 1.) + i.y) * 34. + 1.) * (vec3(0., i1.y, 1.) + i.y), 289.) + i.x + vec3(0., i1.x, 1.)), 289.);\n\tvec3 m = pow(max(.5 - vec3(dot(x0, x0), dot(x12.xy, x12.xy), dot(x12.zw, x12.zw)), 0.), vec3(4.));\n\tvec3 x = fract(p * C.w) * 2. - 1.;\n\tvec3 h = abs(x) - .5;\n\tvec3 a0 = x - floor(x + .5);\n\tm *= inversesqrt(a0 * a0 + h * h);\n\treturn dot(m, vec3(a0.x * x0.x + h.x * x0.y, a0.yz * x12.xz + h.yz * x12.yw)) * 130.;\n}\nfloat box(vec3 p, vec3 b) {\n\tvec3 d = abs(p) - b;\n\treturn min(max(max(d.x, d.y), d.z), 0.) + length(max(d, 0.));\n}\nvec2 rotate_22d(vec2 c, float a) {\n\tfloat ca = cos(a);\n\tfloat sa = sin(a);\n\treturn vec2(c.x * ca - c.y * sa, c.y * ca + c.x * sa);\n}\nfloat smin_3poly(float a, float b, float k) {\n\tfloat h = clamp(.5 + .5 * (b - a) / k, 0., 1.);\n\treturn mix(b, a, h) - k * h * (1. - h);\n}\nvec2 scene(vec3 p) {\n\tvec3 var_1 = p + vec3(0., 0., -2.);\n\treturn vec2(min(max(-min(smin_3poly(smin_3poly(box(vec3(rotate_22d(p.xy, -1.0472), p.z), vec3(.27, 6., 6.)), box(vec3(rotate_22d(p.xy, -1.0472), p.z) + vec3(0., 1.5, 0.), vec3(6., .8, 1.)), .4), box(vec3(rotate_22d(p.xy, -1.0472), p.z) + vec3(0., -1.5, 0.), vec3(6., .8, 1.)), .4), box(vec3(vec3(rotate_22d(p.xy, -1.0472), p.z).x, rotate_22d(vec3(rotate_22d(p.xy, -1.0472), p.z).yz, .43632)) + vec3(0., 1.9, 0.) + vec3(0., 0., .1), vec3(6., .9, .5))), length(p + vec3(0., 0., -3.5)) - 3.), min(min(min(box(vec3(rotate_22d(var_1.xy, -1.0472), var_1.z), vec3(.09, 4.5, .25 * (1. - clamp(abs(vec3(rotate_22d(var_1.xy, -1.0472), var_1.z).y) - 3.5, 0., 1.) * sin(iTime * .7)))), box(vec3(rotate_22d(var_1.xy, -1.0472), var_1.z) + vec3(.18, 0., 0.), vec3(.09, 3.75, .3 * (1. - clamp(abs(vec3(rotate_22d(var_1.xy, -1.0472), var_1.z).y) - 2.75, 0., 1.)) * sin(iTime * 1.7)))), box(vec3(rotate_22d(var_1.xy, -1.0472), var_1.z) + vec3(-.18, 0., 0.), vec3(.09, 3.75, .3 * (1. - clamp(abs(vec3(rotate_22d(var_1.xy, -1.0472), var_1.z).y) - 2.75, 0., 1.)) * sin(iTime * 1.7)))), dot(p, vec3(0., 0., -1.)) + 2.)), 0.);\n}\nfloat shadow(vec3 ray, vec3 dir) {\n\tfloat dist = .01;\n\tfloat ret = 1.;\n\tfor(int temp_28 = 0; temp_28 < 30; ++temp_28) {\n\t\tvec2 cur = scene(ray + dir * dist);\n\t\tret = min(ret, cur.x / dist * 10.);\n\t\tdist += max(abs(cur.x), .01);\n\t}\n\treturn clamp(ret, 0., 1.);\n}\nfloat calc_4directional(vec3 origin, vec3 pos, vec3 normal, vec3 lightdir, float dif, float spec) {\n\tvec3 ivec = normalize(lightdir);\n\tfloat incidence = max(dot(ivec, normal), 0.);\n\treturn clamp((incidence * dif + pow(max(dot(normalize(ivec + origin), normal), 0.), spec) / 100. * sign(spec) * max(sign(incidence), 0.)) * shadow(pos, lightdir), 0., 1.);\n}\nfloat calc_5point(vec3 origin, vec3 pos, vec3 normal, vec3 lightpos, float dif, float spec) {\n\tvec3 ivec = normalize(lightpos - pos);\n\tfloat incidence = max(dot(ivec, normal), 0.);\n\tfloat shade = shadow(pos, normalize(lightpos - pos));\n\treturn clamp(incidence * dif * shade + pow(max(dot(normalize(ivec + origin), normal), 0.), spec) / length(lightpos - pos) * sign(spec) * max(sign(incidence), 0.) * shade, 0., 1.);\n}\nfloat calc_6spot(vec3 origin, vec3 pos, vec3 normal, vec3 lightpos, vec3 lightdir, float cone_7angle, float cone_8falloff, float dif, float spec) {\n\tvec3 ivec = normalize(lightpos - pos);\n\tfloat incidence = max(dot(ivec, normal), 0.);\n\tfloat shade = shadow(pos, -lightdir);\n\tfloat a = abs(dot(ivec, normalize(lightdir)));\n\tfloat fa = a - cos(cone_7angle);\n\treturn clamp((incidence * dif * shade + pow(max(dot(normalize(ivec + origin), normal), 0.), spec) / length(lightpos - pos) * sign(spec) * max(sign(incidence), 0.) * shade) * clamp(1. - pow(1. - (a - cos(cone_7angle - cone_8falloff)) / (fa + .00001), 3.), 0., 1.) * sign(a - cos(cone_7angle)), 0., 1.);\n}\nvec3 render(vec2 pos, vec3 origin, vec4 target) {\n\tvec3 no;\n\tfloat tilt = target.w * .017453;\n\tvec3 ww = normalize(target.xyz - origin);\n\tvec3 uu = normalize(cross(ww, vec3(sin(tilt), cos(tilt), 0.)));\n\tvec3 dir = normalize(mat3(uu, normalize(cross(uu, ww)), ww) * vec3(pos, 1.45));\n\tfloat t = .1;\n\tvec2 closest = vec2(100.);\n\tvec2 cur;\n\tfor(int temp_41 = 0; temp_41 < 100; ++temp_41) {\n\t\tcur = scene(origin + dir * t);\n\t\tt += cur.x;\n\t\tif(cur.x <= .01) {\n\t\t\tbreak;\n\t\t}\n\t}\n\tvec3 fray = origin + dir * t;\n\tvec3 cursky = sky(origin, dir);\n\tif(cur.x <= .01) {\n\t\tvec3 neps = vec3(max(.01, pow(.0001 * t, 2.)), 0., 0.);\n\t\tvec3 normal = normalize(vec3(scene(fray + neps).x - scene(fray - neps).x, scene(fray + neps.yxy).x - scene(fray - neps.yxy).x, scene(fray + neps.yyx).x - scene(fray - neps.yyx).x));\n\t\tvec3 ddx = dFdx(fray);\n\t\tvec3 ddy = dFdy(fray);\n\t\tint sx = int(clamp(length(ddx) * 4., 0., 9.)) + 1;\n\t\tint sy = int(clamp(length(ddy) * 4., 0., 9.)) + 1;\n\t\tno = vec3(0.);\n\t\tfor(int temp_44 = 0; temp_44 < 10; ++temp_44) {\n\t\t\tfor(int temp_46 = 0; temp_46 < 10; ++temp_46) {\n\t\t\t\tif(temp_44 < sy && temp_46 < sx) {\n\t\t\t\t\tvec2 st = vec2(float(temp_46), float(temp_44)) / vec2(float(sx), float(sy));\n\t\t\t\t\tvec2 rp = rotate_22d((fray + st.x * ddx + st.y * ddy).xy, -1.0472);\n\t\t\t\t\tfloat band = 1.;\n\t\t\t\t\tfloat macro_envelope_t = mod(floor(rp.x * 6. - 1. + .5) / 5., 1.);\n\t\t\t\t\tvec3 pcol = mix(mix(mix(mix(mix(vec3(0., .62745, .6902), vec3(.41569, .2902, .23529), clamp(macro_envelope_t / .2, 0., 1.)), vec3(.8, .2, .24706), clamp((macro_envelope_t - .2) / .2, 0., 1.)), vec3(.92157, .40784, .2549), clamp((macro_envelope_t - .4) / .2, 0., 1.)), vec3(.96863, .73725, .019608), clamp((macro_envelope_t - .6) / .2, 0., 1.)), vec3(0.), clamp((macro_envelope_t - .8) / .2, 0., 1.));\n\t\t\t\t\tvec3 macro_desaturate_col = mix(1. - pcol, pcol, band);\n\t\t\t\t\tvec3 lum = vec3(macro_desaturate_col.r * .299 + macro_desaturate_col.g * .587 + macro_desaturate_col.b * .114);\n\t\t\t\t\tno += mix(lum, macro_desaturate_col, (1. - clamp((rp.y + 6.) / 7., 0., 1.)) * (cos(iTime * 2.) * .5 + .5));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tvec3 col = no / float(sx * sy);\n\t\tfloat amb = .6;\n\t\tfloat dif = .75;\n\t\tfloat ao_9dif = .2;\n\t\tfloat spec = .5;\n\t\tfloat ao = clamp((1. - (max((.5 - scene(fray + normal * .5).x) / .5, 0.) + max(1. - scene(fray + normal).x, 0.) + max((1.5 - scene(fray + normal * 1.5).x) / 1.5, 0.) + max((2. - scene(fray + normal * 2.).x) / 2., 0.) + max((2.5 - scene(fray + normal * 2.5).x) / 2.5, 0.)) * .1) * (1. - shadow(fray, normal) * .2), 0., 1.);\n\t\tdif *= 1. - ao_9dif * ao;\n\t\tvec3 var_35 = vec3(ao) * amb;\n\t\tvec3 var_36 = vec3(calc_4directional(origin, fray, normal, normalize(-vec3(-.25, -.2, 1.)), dif, spec) * .3);\n\t\tvec3 var_37 = vec3(calc_4directional(origin, fray, normal, normalize(-vec3(.25, -.2, 1.)), dif, spec) * .12);\n\t\tvec3 var_38 = calc_6spot(origin, fray, normal, vec3(.5, 1.75, -4.), normalize(-vec3(.3, 1., -1.)), 1.0472, .02618, dif, spec) * .45 * vec3(1., .93333, .93333);\n\t\tvec3 var_39 = calc_6spot(origin, fray, normal, vec3(5., -1.35, -2.5), normalize(-vec3(.3, -.55, -.5)), 1.0472, .02618, dif, spec) * .8 * vec3(.53333, .4, .4);\n\t\tfloat var_40 = calc_4directional(origin, fray, normal, normalize(-vec3(-10., 0., 1.)), dif, spec) * 1.5 * .066667;\n\t\treturn col * (var_35 + var_36 + var_37 + var_38 + var_39 + var_40);\n\t} else {\n\t\treturn cursky;\n\t}\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\tvec2 pos = (fragCoord.xy / iResolution.xy * 2. - 1.) * vec2(iResolution.x / iResolution.y, 1.);\n\tvec3 macro_desaturate_col = render(pos, vec3(0., -2.5, -4.), vec4(0., 0., 3., 0.));\n\tvec3 lum = vec3(macro_desaturate_col.r * .299 + macro_desaturate_col.g * .587 + macro_desaturate_col.b * .114);\n\tfragColor = vec4(clamp((clamp(.9 / length(pos), 0., 1.) * 1.1 + -.1) * clamp((mix(lum, macro_desaturate_col, 1.05) - .5) * mix(1.55, 1.95, snoise_12d(pos * 325.) / 2. + .5) + .5, 0., 1.) * .9, 0., 1.), 1.);\n}\n","name":"Image","description":"","type":"image"}]}