{"ver":"0.1","info":{"id":"tstSz2","date":"1572528500","viewed":239,"name":"CRT BloomTest101","username":"cedricl","description":"CRT fx + bloom test","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["crt","bloom"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 GetUV(vec2 uv) { return vec2(uv.x, floor(uv.y*ScanH) * ScanH_Inv); }\nfloat Rnd(float In) { return fract(sin(In * 37549.54368976) + sin(In * 375.4567)); }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    uv.x = (uv.x-0.5) / cos(Roundness*abs(uv.y - .5)) + 0.5;\n    uv.y = (uv.y-0.5) / cos(Roundness*abs(uv.x - .5)) + 0.5;\n    uv.x += HNOISE_AMOUNT * Rnd(iTime + 0.1*uv.y) * abs(uv.x - .5);\n    \n    fragColor = texture(iChannel0, GetUV(uv));\n    fragColor += CHROMA_AMOUNT * vec4(1., 0., 0.5, 0.) * texture(iChannel0, GetUV(uv + vec2(CHROMA_DIST, 0.)));\n    fragColor += CHROMA_AMOUNT * vec4(0., 1., 0.5, 0.) * texture(iChannel0, GetUV(uv - vec2(CHROMA_DIST, 0.)));\n    fragColor /= 1. + 2.*CHROMA_AMOUNT;\n\n    fragColor += GHOST_AMOUNT * (0.3-texture(iChannel0, GetUV(uv - vec2(GHOST_DIST, 0.))));\n    \n    vec4 Coeff = vec4(2. - (fragColor.x + fragColor.y + fragColor.z) * 0.33);\n    Coeff *= mix(pow(abs(sin(uv.y*ScanH*3.14159)), 2.6), 1., ScanDep);\n    vec4 Mask = vec4(0.);\n    float P = (uv.x*GridW + floor(uv.y * GridH)) * 3.14159;\n    Mask.x = mix(pow(max(0., sin(P)), GridPow), 1.15*Gain, GridDep);\n    Mask.y = mix(pow(max(0., sin(P+2.2)), GridPow), 1.25*Gain, GridDep);\n    Mask.z = mix(pow(max(0., sin(P+4.4)), GridPow), 1.25*Gain, GridDep);\n    Coeff *= Mask;\n    Coeff *= pow(1. - length(uv-vec2(0.5)), Vignetting);  \n    \n    fragColor *= mix(vec4(1.), Coeff, GLOBALMIX);\n    fragColor *= smoothstep(0.0, BorderSharpness, 0.5 - abs(uv.x - 0.5));\n    fragColor *= smoothstep(0.0, BorderSharpness, 0.5 - abs(uv.y - 0.5));\n}\n\n\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec4 blurH(vec2 uv, float r, float sampleNum )\n{\n    vec4 col = vec4(0);\n    vec2 unit = 1.0 / iResolution.xy;\n\n    float sampleStep = r / sampleNum;\n\n    float count = 0.0;\n\n    for(float x = -r; x < r; x += sampleStep)\n    {\n        float weight = pow(r - abs(x), BLUR_CURVE_POW);\n        col += texture(iChannel0, uv + vec2(x * unit.x, uv.y * unit.y) ) * weight;\n        count += weight;\n    }\n\n    return col / count;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = mix(blurH(uv, BLUR_RADIUS, BLUR_SAMPLES ), texture(iChannel0, uv), BLUR_MIX);\n    fragColor = mix(fragColor, texture(iChannel1, uv), PERSISTENCE);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define ScanH 240.\n#define ScanH_Inv (1./ScanH)\n#define ScanDep 0.8\n#define GridW 360.\n#define GridH 180.\n#define GridPow 2.1\n#define GridDep 0.85\n#define Roundness 0.6\n#define Gain 1.15\n#define Vignetting .5\n#define BorderSharpness .006\n\n#define BLUR_MIX 0.8\n#define BLUR_RADIUS 40.\n#define BLUR_CURVE_POW 0.45\n#define BLUR_SAMPLES 8.\n\n#define PERSISTENCE 0.2\n\n#define CHROMA_DIST 0.0025\n#define CHROMA_AMOUNT .7\n\n#define GHOST_AMOUNT 0.2\n#define GHOST_DIST 0.01\n\n#define HNOISE_AMOUNT 0.003\n\n#define GLOBALMIX 0.9","name":"Common","description":"","type":"common"},{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"vec4 blurH(vec2 uv, float r, float sampleNum )\n{\n    vec4 col = vec4(0);\n    vec2 unit = 1.0 / iResolution.xy;\n\n    float sampleStep = r / sampleNum;\n\n    float count = 0.0;\n\n    for(float x = -r; x < r; x += sampleStep)\n    {\n        float weight = pow(r - abs(x), BLUR_CURVE_POW);\n        col += texture(iChannel0, uv + vec2(uv.x * unit.x, x * unit.y) ) * weight;\n        count += weight;\n    }\n\n    return col / count;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = mix(blurH(uv, BLUR_RADIUS, BLUR_SAMPLES ), texture(iChannel0, uv), BLUR_MIX);\n    fragColor = mix(fragColor, texture(iChannel1, uv), PERSISTENCE);\n}","name":"Buffer B","description":"","type":"buffer"}]}