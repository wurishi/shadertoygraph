{"ver":"0.1","info":{"id":"XdKXD1","date":"1464160392","viewed":221,"name":"Balls Texture","username":"gigatron","description":"Phong ball textured... bordel ce code !!","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["phong","texture","balls"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define T 3.*iTime\n\n\nfloat intersect(vec3 rayOrigin, vec3 rayDir, vec3 sphereCenter, float radius)\n{\n  vec3  r = rayOrigin - sphereCenter;\n  float a = dot(rayDir, rayDir),\n        b = dot(r, rayDir),\n        c = dot(r, r) - radius*radius,\n        d = b*b - a*c;\n    \n  return  d < 0. ? -1. : (-b -sqrt(d)) / a;\n}\n\nvec4 getColor(vec3 p, vec3 center, vec4 diffuseColor, vec3 lightPosition)\n{\n \n    vec3 cameraPosition = vec3(.5, .5, 10),\n                       li = vec3(5.*cos(T), 10.*sin(T), 20.);\n    \n    vec3 n = normalize(p - center),\n       l = normalize(lightPosition - p),\n       v = normalize(cameraPosition - p),\n       h = normalize(v + l);\n  return diffuseColor * max(0., dot(n,l)) + max(0., pow(dot(n,h), 100.));\n}  \n\nvec4 drawSphere(vec3 rayDir, vec3 pos, float r, vec4 color, vec3 light)\n{\n  \n    vec3 cameraPosition = vec3(.5, .5, 10),\n                       li = vec3(5.*cos(T), 10.*sin(T), 20.);\n    float t = intersect(cameraPosition, rayDir, pos, r);\n  return t > -1. ? getColor(cameraPosition + t*rayDir, pos, color, light)\n                 : vec4(-1,0,0,0);\n}\n\nvoid mainImage( out vec4 fragColor, vec2 fragCoord )\n{\n   vec2 g=fragCoord.xy/iResolution.xy ;\n   \n    \n   vec2 uv  = fragCoord.xy  ; \n   vec4 col = vec4(0.,0.,0.,1.0); \n    \n    vec3 cameraPosition = vec3(.5, .5, 10),\n                       li = vec3(5.*cos(T), 10.*sin(T), 20.);\n    \n    uv   /= iResolution.xy ; \n    uv.x *= iResolution.x/iResolution.y;\n     \n    \n  vec3 npos = vec3(uv,0),\n     rayDir = normalize(npos - cameraPosition),\n          C = vec3(floor(uv*25.+.5)/25., 0);\n    \n  float r = .02;\n  vec4 cl = texture(iChannel0,g),\n     sphC = drawSphere(rayDir , C, r, cl, li);      \nfragColor = vec4(sphC.x > -1. ? sphC*1.2 : col-col);\n}","name":"Image","description":"","type":"image"}]}