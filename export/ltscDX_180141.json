{"ver":"0.1","info":{"id":"ltscDX","date":"1506777294","viewed":151,"name":"Fun.","username":"marcthenarc","description":"Still exploring The Book of Shaders and basic 2D forms.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["procedural","2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float GRID = 5.;\nconst float DIV = 0.5 / GRID;\n\nfloat random (vec2 st)\n{\n    return fract(sin(dot(st.xy,\n        vec2(12.9898,78.233))) *\n        43758.5453123);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 st = fragCoord.xy / iResolution.y;\n\n    st += iTime * 0.05;\n\n    vec2 fpos = floor(st * GRID) / GRID;\n\n    // Used as RED component and for variation amongst cells.\n    float r = random(fpos);\n\n    vec3 c = vec3(r,\n        random(fpos + 1.),\n        random(fpos + 2.));\n        \n    if (distance(st, fpos + DIV) < DIV / 2. * (sin(iTime * 2. * r) * 0.5 + 1.))\n        c = 1. - c;\n\n    fragColor = vec4(c, 1.0);\n}","name":"Image","description":"","type":"image"}]}