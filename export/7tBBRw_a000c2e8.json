{"ver":"0.1","info":{"id":"7tBBRw","date":"1702246953","viewed":21,"name":"Double Stereographic Projection","username":"Hatchling","description":"By performing the stereographic projection twice, you can fit a full 360 range into a finite viewport.\n\nZoom in and out with Mouse (horizontal axis).","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["stereographic"],"hasliked":0,"parentid":"tdtyR4","parentname":"3D Template"},"renderpass":[{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float modulo(float x)\n{\n    return x - floor(x);\n}\nstruct Ray\n{\n    vec3 origin;\t\n    vec3 direction;\t\t\n};\nstruct Hit\n{\n    float distance;\n    vec3 normal;\t\n};\nconst Hit noHit = Hit(1e10, vec3(0.));\n\nstruct Sphere\n{\n\tfloat radius;\n    vec3 center;\n};\n\nHit intersectSphere(Sphere sphere, Ray ray)\n{\n\tvec3 op = sphere.center - ray.origin;\n    float b = dot(op, ray.direction);\n    float det = b * b - dot(op, op) + sphere.radius * sphere.radius;\n    det = sqrt(det);\n    float t = b + det;\n\n    return Hit(t, (ray.origin + t*ray.direction - sphere.center) / sphere.radius);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float fieldOfViewMultiplier = 2.;//pow(2., 1.0 / (1.0 + iMouse.x / iResolution.x));\n\n    vec2 coord = (fragCoord - iResolution.xy * 0.5) * fieldOfViewMultiplier / iResolution.xx;\n    \n    //vec3 c = vec3(modulo(coord.x * 1.0), modulo(coord.y * 1.0), modulo(length(coord) * 1.0)); \n    fragColor = vec4(0);\n    Ray ray;\n    Sphere sphere;\n    Hit hit;\n    vec3 dir;\n    \n    //if(fragCoord.x > iResolution.x / 2.)\n    {\n        float distAhead = 1.-(iMouse.x / iResolution.x);\n\n        dir = normalize(vec3(coord, 1));\n        ray = Ray(vec3(0), dir);\n        sphere = Sphere(1.0, vec3(0,0,distAhead));\n        hit = intersectSphere(sphere, ray);\n        //dir = -reflect(dir, hit.normal);//ray.origin + ray.direction * hit.distance - sphere.center;\n        dir = hit.normal;//ray.origin + ray.direction * hit.distance - sphere.center;\n        \n        \n        \n        coord = dir.xy / (dir.z);\n\n        if(dir.z <= 0.) return;\n        dir = normalize(vec3(coord, 1));\n        ray = Ray(vec3(0), dir);\n        sphere = Sphere(1.0, vec3(0,0,distAhead));\n        hit = intersectSphere(sphere, ray);\n        dir = ray.origin + ray.direction * hit.distance - sphere.center;\n        coord = dir.xy / (dir.z);\n    }\n    /*else\n    {    \n        float distAhead = iMouse.x / iResolution.x;\n\n        vec3 dir = normalize(vec3(coord, 1));\n        ray = Ray(vec3(0), dir);\n        sphere = Sphere(1.0, vec3(0,0,distAhead));\n        hit = intersectSphere(sphere, ray);\n        dir = ray.origin + ray.direction * hit.distance - sphere.center;\n    }*/\n    \n    fragColor = texture(iChannel0, dir);\n}","name":"Image","description":"","type":"image"}]}