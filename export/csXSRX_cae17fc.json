{"ver":"0.1","info":{"id":"csXSRX","date":"1669245109","viewed":122,"name":"SNR ðŸ”Š","username":"blurryroots","description":"Because the noise is more valued, than the signal.","likes":3,"published":1,"flags":64,"usePreview":0,"tags":["2d","sound","fft","audio","weird","quicksand"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"MtBXDw","filepath":"https://soundcloud.com/blurryroots/snr","previewfilepath":"https://soundcloud.com/blurryroots/snr","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Shadertoy Educational License\n// You cannot host, display, distribute or share this Work in any form,\n// including physical and digital. You cannot use this Work in any\n// commercial or non-commercial product, website or project. You cannot\n// sell this Work and you cannot mint an NFTs of it.\n// I share this Work for educational purposes, and you can link to it,\n// through an URL, proper attribution and unmodified screenshot, as part\n// of your educational material. If these conditions are too restrictive\n// please contact me and we'll definitely work it out.\n// You are free however, to incorporate this work within the Shadertoy\n// ecosystem, e.g. by forking.\n// This work may incorporate other permissivly shared, educational work,\n// which is attributed appropriatly. Please do so as well.\n// Thanks to https://www.shadertoy.com/user/iq for inspiring this license.\n\n// === icon message: \"sound in\". link: https://www.shadertoy.com/view/MtyXRW\n\nfloat message(vec2 uv) { // to alter in the icon\n    uv-=vec2(1.,10.); if ((uv.x<0.)||(uv.x>=32.)||(uv.y<0.)||(uv.y>=3.)) return -1.; \n    int i=1, bit=int(pow(2.,floor(32.-uv.x)));\n    if (int(uv.y)==2) i=  928473456/bit; // 00110111 01010111 01100001 01110000\n    if (int(uv.y)==1) i=  626348112/bit; // 00100101 01010101 01010000 01010000\n    if (int(uv.y)==0) i= 1735745872/bit; // 01100111 01110101 01100001 01010000\n \treturn float(i-2*(i/2));\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n         //  if (iResolution.y<200.) to display only in the icon \n    if (iResolution.y<2000.) {float c=message(fragCoord.xy/8.);if(c>=0.){fragColor=vec4(c);return;}}  \n\n    float fft;\n    float mask;\n    vec2 p;\n    {\n        // Based on uNiversal's fft at https://www.shadertoy.com/view/Mlj3WV\n    \n        // create pixel coordinates\n        vec2 uv = fragCoord.xy / iResolution.xy;\n\n        // quantize coordinates\n        const float bands = 64.0;\n        const float segs = 16.0;\n        \n        p.x = floor(uv.x*bands) / bands;\n        p.y = floor(uv.y*segs) / segs;\n\n        // read frequency data from first row of texture\n        fft  = texture(iChannel0, vec2(p.x,0.0)).x;\n        mask = (p.y < fft) ? 1.0 : 0.1;\n    }\n\n    vec2 uv = (fragCoord.xy * 2.0 - iResolution.xy)\n            / min(iResolution.x, iResolution.y)\n            ;\n   \n    // I have no idea what I'm doing ðŸ™ˆ\n    float circle2 = (0.2+0.4*fft) / distance(uv.xy, vec2(-0.1, 0.2));\n    vec3 col2 = mask * vec3(circle2) * vec3(mask, 0.5+mask*0.5, 1.0-mask);\n   \n    fragColor = vec4(col2, 1.0);\n}","name":"Image","description":"","type":"image"}]}