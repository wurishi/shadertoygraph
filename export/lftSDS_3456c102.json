{"ver":"0.1","info":{"id":"lftSDS","date":"1714413124","viewed":32,"name":"Union, Intersect . Min & Max SDF","username":"HyperQuantum","description":"Note that Union-Min , Intersect-Max is only for SDF (dist3(x,y,z))\nMin value is less than Radius : There must be one sphere collided with the photon ( 001->1 , OR)\nMax value is less than Radius : All spheres are collided with the photon ( 111 -> 1, AND)\n","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    \n    //sphere shapes\n    float SphereRadius = 0.22;\n    vec3 Locations[3] = vec3[3](\n        vec3(0.25,0,-0.1),\n        vec3(0,0.-0.1,0.2),\n        vec3(.1,.1,0)\n    );\n    \n    /*\n    For sdf\n    Min value is less than Radius : There must be one sphere collided with the photon ( 001->1 , OR)\n    Max value is less than Radius : All spheres are collided with the photon ( 111 -> 1, AND)\n    For mask\n    001 min 0 max 1\n    111 min 1 max 1\n    000 min 0 max 0\n    And == min if we 're going to draw 1 in 0s\n    And == max if we 're going to draw 0 in 1s\n    Or == max if we 're going to draw 1 in 0s\n    Or == min if we 're going to draw 0 in 1s\n    */\n    //ray\n    float FOV = 2.0f;\n    vec3 org = vec3(0,0,-1.8);\n    vec3 dir = normalize(vec3(p,1.0f*FOV));\n    \n    \n    //raycast\n    int Maximum = 2000;\n    float JumpTo = 0.0f;\n    float Output = 0.0f;\n    for(int Iterator = 0;Iterator<Maximum;Iterator++){\n        \n        //Photon's next position to test collision\n        vec3 Arrival = org + dir * JumpTo;\n        \n        //loop over shapes\n        float DUnion     =  1000000.0f;\n        float DIntersect = -1000000.0f;\n        for(int i = 0; i < 3; i++){\n            float dist = length(Arrival-Locations[i]);\n            DUnion     = min(DUnion,    dist);\n            DIntersect = max(DIntersect,dist);\n        }\n        \n        if(DUnion <= SphereRadius){\n            Output = 0.5f;\n            if(DIntersect <= SphereRadius){\n                Output = 1.0f;\n                break;\n            }\n        }\n        \n        JumpTo += 0.001f;\n    \n    }\n    \n\n    fragColor = vec4(vec3(Output),1.0);\n}","name":"Image","description":"","type":"image"}]}