{"ver":"0.1","info":{"id":"3s2cRc","date":"1587084796","viewed":105,"name":"Maticals Font","username":"mikelsv","description":"Maticals Font - GLSL font project.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["font"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Maticals Font - GLSL font project.\n// Research for Maticals http://maticals.senin.world/\n\n// Very simple font.\n// Today '0 - 9' and '.' sumbols only.\n\n// Created: 2020-04-16\n//\n// [+] Add sumbols 0 - 9 and '.'.\n// [!] Bug: first element in MaticalFontData structure draw badly. What that?\n// [!] Problem: Very hard, some data in MaticalFontData.\n//\n// Updated: 2020-04-17\n// [+] Defines for char = _c + Char = int value\n// [+] Create ASCII table \n// [+] Add DrawString();\n// [+] Add special sumbols. ASCII 32 - 47.\n\n\n// [~] Project in process ...\n\n// [@] Need add more sumbols and refactory font data structure.\n\n\n#define RGBC_GREEN vec4(19. / 255., 229. / 225., 19. / 225., 1.)\n#define RGBC_BLUE vec4(47. / 255., 206. / 225., 208. / 225., 1.)\n#define RGBC_RED vec4(222. / 255., 52. / 225., 81. / 225., 1.)\n#define RGBC_PURPLE vec4(224. / 255., 15. / 225., 222. / 225., 1.)\n#define RGBC_YELLOW vec4(148. / 255., 134. / 225., 78. / 225., 1.)\n#define RGBC_ORANGE vec4(255. / 255., 165. / 225., 0. / 225., 1.)\n\n\n// Font Char Defines //\n// https://theasciicode.com.ar/ascii-printable-characters/exclamation-mark-ascii-code-33.html\n\n#define _c_sp 32\n#define _c_em 33\n#define _c_dq 34\n#define _c_ns 35\n#define _c_ds 36\n#define _c_ps 37\n#define _c_ap 38\n#define _c_sq 39\n#define _c_or 40\n#define _c_cr 41\n\n\n#define _c0\t48\n#define _c1\t49\n#define _c2\t50\n#define _c3\t51\n#define _c4\t52\n#define _c5\t53\n#define _c6\t54\n#define _c7\t55\n#define _c8\t56\n#define _c9\t57\n\n// Font Data ASCII //\n\n// Sumbol position\n// pos -= 32;\n// return MaticalFontAscii[pos] + MaticalFontAscii2[pos / 16];\n\n// ASCII position, from 32 to 128\nint MaticalFontAscii[] = int[](\n0, 1, 3, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n0, 4, 5, 8, 12, 15, 18, 23, 25, 30, 0, 0, 0, 0, 0, 0\n);\n\n// ASCII box position\nint MaticalFontAscii2[] = int[](\n0, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n);\n\n// Font Data Draw //\n#define MF_Null\t0., 0., 0., 0., 0., 0.\n\n// from.x, from.y, to.x to.y, special, bold \n\nstruct MaticalFontDataV{\n  vec4 pos;\n  vec4 opt;\n};\n    \nMaticalFontDataV MaticalFontData[] = MaticalFontDataV[](\n    // sp space ( Space )\n    MaticalFontDataV(vec4(-1., -1., -1., -1.), vec4(0., 0., 0., 0.)),  \n    // em ! ( Exclamation mark )\n\tMaticalFontDataV(vec4(.45, .1, .55, .1), vec4(0., 3., 0., 1.)),  \n    MaticalFontDataV(vec4(.5, .3, .5, .9), vec4(0., 3., 0., 0.)),\n    // dq \" ( Double quotes )\n\tMaticalFontDataV(vec4(.3, .1, .3, .2), vec4(0., 3., 0., 1.)),\n    MaticalFontDataV(vec4(.6, .1, .6, .2), vec4(0., 3., 0., 0.)),\n    // ns # ( Number sign )\n    MaticalFontDataV(vec4(.2, .1, .5, .9), vec4(0., 0., 0., 1.)),\n\tMaticalFontDataV(vec4(.5, .1, .8, .9), vec4(0., 0., 0., 1.)),\n    MaticalFontDataV(vec4(.1, .3, .9, .3), vec4(0., 0., 0., 1.)),\n    MaticalFontDataV(vec4(.1, .6, .9, .6), vec4(0., 0., 0., 0.)),\n    // ds $ ( Dollar sign )\n    MaticalFontDataV(vec4(.5, .1, .5, .9), vec4(0., 0., 0., 1.)),\n    MaticalFontDataV(vec4(.1, .1, .9, .3), vec4(0., 0., 0., 1.)),\n    MaticalFontDataV(vec4(.1, .6, .9, .3), vec4(0., 0., 0., 1.)),\n    MaticalFontDataV(vec4(.1, .6, .9, .9), vec4(0., 0., 0., 0.)),\n    // ps % ( Percent sign )\n    MaticalFontDataV(vec4(.1, .1, .9, .9), vec4(0., 0., 0., 1.)),\n    MaticalFontDataV(vec4(.3, .6, .3, .6), vec4(0., 3., 0., 1.)),\n    MaticalFontDataV(vec4(.6, .3, .6, .3), vec4(0., 3., 0., 0.)),\n    // & ( Ampersand )\n    MaticalFontDataV(vec4(.9, .1, .1, .9), vec4(0., 0., 0., 1.)),\n    MaticalFontDataV(vec4(.1, .9, .9, .9), vec4(0., 0., 0., 1.)),\n    MaticalFontDataV(vec4(.1, .1, .9, .9), vec4(0., 0., 0., 1.)),\n    MaticalFontDataV(vec4(.1, .1, .9, .3), vec4(0., 0., 0., 0.)),\n    // sq ' ( Single quote )\n    MaticalFontDataV(vec4(.3, .1, .3, .2), vec4(0., 3., 0., 0.)),\n    // or ( ( Open round )\n    MaticalFontDataV(vec4(.6, .1, .3, .5), vec4(0., 0., 0., 1.)),\n    MaticalFontDataV(vec4(.6, .9, .3, .5), vec4(0., 0., 0., 0.)),\n    // cr ) ( Close round )\n    MaticalFontDataV(vec4(.6, .1, .3, .5), vec4(0., 0., 0., 1.)),\n    MaticalFontDataV(vec4(.6, .9, .3, .5), vec4(0., 0., 0., 0.)),\n    \n/*\nASCII code 42 = * ( Asterisk )\nASCII code 43 = + ( Plus sign )\nASCII code 44 = , ( Comma )\nASCII code 45 = - ( Hyphen , minus sign )\nASCII code 46 = . ( Dot, full stop )\nASCII code 47 = / ( Slash , forward slash , fraction bar , division slash )    \n*/    \n    \n     // dt Dot\n    MaticalFontDataV(vec4(.3, .1, .7, .1), vec4(0., 0., 0., 1.)),\n    MaticalFontDataV(vec4(.2, .2, .8, .2), vec4(0., 0., 0., 1.)),\n    MaticalFontDataV(vec4(.3, .3, .7, .3), vec4(0., 0., 0., 0.)),\n\n\t// Numbers. ASCII 48.\n    // 0\n    MaticalFontDataV(vec4(.1, .1, .9, .1), vec4(0., 0., 0., 1.)),\n    MaticalFontDataV(vec4(.1, .9, .9, .9), vec4(0., 0., 0., 1.)),\n    MaticalFontDataV(vec4(.1, .1, .1, .9), vec4(0., 0., 0., 1.)),\n    MaticalFontDataV(vec4(.9, .1, .9, .9), vec4(0., 0., 0., 0.)),\n\n    // 1\n    MaticalFontDataV(vec4(.51, .1, .5, .9), vec4(0., 0., 0., 0.)),\n\n    // 2\n    MaticalFontDataV(vec4(.1, .1, .9, .1), vec4(0., 0., 0., 1.)),\n    MaticalFontDataV(vec4(.1, .1, .9, .9), vec4(0., 0., 0., 1.)),\n    MaticalFontDataV(vec4(.1, .9, .9, .9), vec4(0., 0., 0., 0.)),\n\n\t// 3\n    MaticalFontDataV(vec4(.1, .1, .9, .1), vec4(0., 0., 0., 1.)),\n    MaticalFontDataV(vec4(.1, .5, .9, .5), vec4(0., 0., 0., 1.)),\n    MaticalFontDataV(vec4(.1, .9, .9, .9), vec4(0., 0., 0., 1.)),\n    MaticalFontDataV(vec4(.9, .1, .9, .9), vec4(0., 0., 0., 0.)),\n\n\t// 4\n    MaticalFontDataV(vec4(.1, .9, .1, .5), vec4(0., 0., 0., 1.)),\n    MaticalFontDataV(vec4(.1, .5, .9, .5), vec4(0., 0., 0., 1.)),\n\tMaticalFontDataV(vec4(.9, .1, .9, .9), vec4(0., 0., 0., 0.)),\n\n    // 5\n    MaticalFontDataV(vec4(.1, .1, .9, .1), vec4(0., 0., 0., 1.)),\n    MaticalFontDataV(vec4(.9, .1, .1, .9), vec4(0., 0., 0., 1.)),\n    MaticalFontDataV(vec4(.1, .9, .9, .9), vec4(0., 0., 0., 0.)),\n\n    // 6\n\tMaticalFontDataV(vec4(.1, .1, .9, .1), vec4(0., 0., 0., 1.)),\n    MaticalFontDataV(vec4(.1, .5, .9, .5), vec4(0., 0., 0., 1.)),\n    MaticalFontDataV(vec4(.1, .1, .1, .5), vec4(0., 0., 0., 1.)),\n    MaticalFontDataV(vec4(.9, .1, .9, .5), vec4(0., 0., 0., 1.)),    \n    MaticalFontDataV(vec4(.1, .5, .9, .9), vec4(0., 0., 0., 0.)),\n\n\t// 7\n    MaticalFontDataV(vec4(.1, .1, .9, .9), vec4(0., 0., 0., 1.)),\n\tMaticalFontDataV(vec4(.1, .9, .9, .9), vec4(0., 0., 0., 0.)),\n\n    // 8\n    MaticalFontDataV(vec4(.1, .1, .9, .1), vec4(0., 0., 0., 1.)),\n    MaticalFontDataV(vec4(.1, .5, .9, .5), vec4(0., 0., 0., 1.)),\n    MaticalFontDataV(vec4(.1, .9, .9, .9), vec4(0., 0., 0., 1.)),\n    MaticalFontDataV(vec4(.1, .1, .1, .9), vec4(0., 0., 0., 1.)),\n    MaticalFontDataV(vec4(.9, .1, .9, .9), vec4(0., 0., 0., 0.)),\n\n    // 9\n    MaticalFontDataV(vec4(.1, .1, .9, .5), vec4(0., 0., 0., 1.)),\n    MaticalFontDataV(vec4(.1, .5, .9, .5), vec4(0., 0., 0., 1.)),\n    MaticalFontDataV(vec4(.1, .9, .9, .9), vec4(0., 0., 0., 1.)),\n    MaticalFontDataV(vec4(.1, .5, .1, .9), vec4(0., 0., 0., 1.)),\n    MaticalFontDataV(vec4(.9, .5, .9, .9), vec4(0., 0., 0., 0.))    \n);\n\n\nfloat MaticalFontData_New[] = float[](\n\t// sp space ( Space )\n    -1., -1., -1., -1., 0., 0.,\n    MF_Null,\n    // em ! ( Exclamation mark )\n\t.45, .1, .55, .1, 0., 3.,\n    .5, .3, .5, .9, 0., 3.,\n    MF_Null,\n    // dq \" ( Double quotes )\n\t.3, .1, .3, .2, 0., 3.,\n    .6, .1, .6, .2, 0., 3.,\n    MF_Null,\n    // ns # ( Number sign )\n    .2, .1, .5, .9, 0., 0.,\n\t.5, .1, .8, .9, 0., 0.,\n    .1, .3, .9, .3, 0., 0.,\n    .1, .6, .9, .6, 0., 0.,    \n    MF_Null,\n    // ds $ ( Dollar sign )\n    .5, .1, .5, .9, 0., 0.,\n    .1, .1, .9, .3, 0., 0.,\n    .1, .6, .9, .3, 0., 0.,\n    .1, .6, .9, .9, 0., 0.,\n    MF_Null,\n    // ps % ( Percent sign )\n    .1, .1, .9, .9, 0., 0.,\n    .3, .6, .3, .6, 0., 3.,\n    .6, .3, .6, .3, 0., 3.,\n    MF_Null,\n    // & ( Ampersand )\n    .9, .1, .1, .9, 0., 0.,\n    .1, .9, .9, .9, 0., 0.,\n    .1, .1, .9, .9, 0., 0.,\n    .1, .1, .9, .3, 0., 0.,\n    MF_Null,\n    // sq ' ( Single quote )\n    .3, .1, .3, .2, 0., 3.,\n    MF_Null,\n    // or ( ( Open round )\n    .6, .1, .3, .5, 0., 0.,    \n    .6, .9, .3, .5, 0., 0.,    \n    MF_Null,\n    // cr ) ( Close round )\n    .6, .1, .3, .5, 0., 0.,\n    .6, .9, .3, .5, 0., 0.,\n\tMF_Null,\n    \n    \n/*\nASCII code 42 = * ( Asterisk )\nASCII code 43 = + ( Plus sign )\nASCII code 44 = , ( Comma )\nASCII code 45 = - ( Hyphen , minus sign )\nASCII code 46 = . ( Dot, full stop )\nASCII code 47 = / ( Slash , forward slash , fraction bar , division slash )    \n*/    \n    \n    // dt Dot\n    .3, .1, .7, .1, 0., 0.,\n    .2, .2, .8, .2, 0., 0.,\n    .3, .3, .7, .3, 0., 0.,\n    MF_Null,\n    \n    // Numbers. ASCII 48.\n    // 0\n    .1, .1, .9, .1, 0., 0.,\n    .1, .9, .9, .9, 0., 0.,\n    .1, .1, .1, .9, 0., 0.,\n    .9, .1, .9, .9, 0., 0.,      \n    MF_Null,\n    // 1\n    .51, .1, .5, .9, 0., 0.,\n    MF_Null,\n    // 2\n    .1, .1, .9, .1, 0., 0.,\n    .1, .1, .9, .9, 0., 0.,\n    .1, .9, .9, .9, 0., 0.,\n    MF_Null,\n\t// 3\n    .1, .1, .9, .1, 0., 0.,\n    .1, .5, .9, .5, 0., 0.,\n    .1, .9, .9, .9, 0., 0.,\n    .9, .1, .9, .9, 0., 0.,\n    MF_Null,\n\t// 4\n    .1, .9, .1, .5, 0., 0.,\n    .1, .5, .9, .5, 0., 0.,\n\t.9, .1, .9, .9, 0., 0.,\n\tMF_Null,\n    // 5\n    .1, .1, .9, .1, 0., 0.,\n    .9, .1, .1, .9, 0., 0.,\n    .1, .9, .9, .9, 0., 0.,\n\tMF_Null,\n    // 6\n\t.1, .1, .9, .1, 0., 0., \n    .1, .5, .9, .5, 0., 0.,\n    .1, .1, .1, .5, 0., 0.,\n    .9, .1, .9, .5, 0., 0.,    \n    .1, .5, .9, .9, 0., 0.,\n    MF_Null,\n\t// 7\n    .1, .1, .9, .9, 0., 0.,\n\t.1, .9, .9, .9, 0., 0.,\n    MF_Null,\n    // 8\n    .1, .1, .9, .1, 0., 0.,\n    .1, .5, .9, .5, 0., 0.,\n    .1, .9, .9, .9, 0., 0.,\n    .1, .1, .1, .9, 0., 0.,\n    .9, .1, .9, .9, 0., 0.,\n\tMF_Null,\n    // 9\n    .1, .1, .9, .5, 0., 0.,    \n    .1, .5, .9, .5, 0., 0.,\n    .1, .9, .9, .9, 0., 0.,\n    .1, .5, .1, .9, 0., 0.,\n    .9, .5, .9, .9, 0., 0.,\n    MF_Null,\n    \n    \n    \n    MF_Null\n);\n\n\nint MF_GetFontChrPos(int chr){\n\tif(chr < 32 || chr > 127)\n        return 0;\n    \n    chr -= 32;\n\n    return (MaticalFontAscii[chr] + MaticalFontAscii2[chr / 16]) * 1;\n}\n\n\n// Draw Float //\nstruct MaticalFont{\n    vec4 rect; // rectangle\n\tfloat val; // value\n    float len; // value len\n    float dec; // decimal size\n    float pw; // 10 ^ pw\n    float weight; // weight\n    vec4 color; // color\n    vec4 pcolor; // pixel color\n};\n    \nMaticalFont MF_DrawFloatNew(float val, vec4 rect, vec4 color, float dec){\n    MaticalFont ret;\n    \n    // Set data\n    ret.val = val;\n    ret.rect = rect;\n    ret.color = color;\n    ret.dec = dec;\n    ret.weight = 1.;\n    ret.pcolor = vec4(0., 0., 0., 1.);\n    \n    // Count len\n    ret.len = 1. + dec + (dec > 0. ? 1. : 0.);\n    ret.pw = 0.;\n    float i = floor(val);\n    \n    while(i >= 10.){\n        i /= 10.;\n        \n        ret.len ++;\n        ret.pw ++;\n    }\n    \n    return ret;\n}\n\nMaticalFont MF_DrawStringNew(vec4 rect, vec4 color){\n    MaticalFont ret;\n    \n    // Set data\n    ret.val = 0.;\n    ret.rect = rect;\n    ret.color = color;\n    ret.dec = 0.;\n    ret.weight = 1.;\n    ret.pcolor = vec4(0., 0., 0., 1.);\n    \n    // String pos\n    ret.len = 0.;\n    \n    return ret;\n}\n\n#define MaticalFontFloat MaticalFont\n\n    \n// InRect\nbool MF_InRect(vec2 coord, vec4 rect, float len){\n    return rect.x <= coord.x && rect.y <= coord.y \n        && rect.x + rect.z * len > coord.x && rect.y + rect.w > coord.y;\n}\n\nbool MF_InRectStr(vec2 coord, vec4 rect, float len){\n    len -= 1.;\n    return rect.x <= coord.x && rect.y <= coord.y \n        && rect.x + rect.z * (len + 0.) <= coord.x\n        && rect.x + rect.z * (len + 1.) > coord.x && rect.y + rect.w > coord.y;\n}\n\n\nvec2 MF_GetRect(vec2 coord, vec4 rect){\n    return vec2((coord.x - rect.x) / rect.z, (coord.y - rect.y) / rect.w);\n}\n\nfloat g_pos = 0.;\n\n// Draw char\nvec4 MF_DrawChar(vec2 coord, out MaticalFontFloat font, int chr){\n    int pos = MF_GetFontChrPos(chr);\n    \n    while(1 == 1){\n        MaticalFontDataV char = MaticalFontData[pos];\n        \n        vec2 a = vec2(char.pos.xy), b = vec2(char.pos.zw);\n        \n        float wg = char.opt.x == 0. ? 1. : char.opt.x;\n        \n        vec3 tr = vec3(length(a - coord), length(b - coord), length(a - b));\n        \n        float bs = sqrt(tr.x * tr.y * (tr.x + tr.y + tr.z) * (tr.x + tr.y - tr.z)) / (tr.x + tr.y);\n        if(bs < .02 * font.weight * wg){\n            font.pcolor = font.color;\n        \treturn font.color;\n        }\n        \n        if(char.opt.w == 0.)\n            break;\n\n        \n        /*\n        \n        if(MaticalFontData_New[pos + 0] == 0. && MaticalFontData_New[pos + 1] == 0.)\n            break;\n        \n        vec2 a = vec2(MaticalFontData_New[pos + 0], MaticalFontData_New[pos + 1]),\n            b = vec2(MaticalFontData_New[pos + 2], MaticalFontData_New[pos + 3]);\n        \n        float wg = MaticalFontData_New[pos + 5] == 0. ? 1. : MaticalFontData_New[pos + 5];\n        \n        vec3 tr = vec3(length(a - coord), length(b - coord), length(a - b));\n        \n        float bs = sqrt(tr.x * tr.y * (tr.x + tr.y + tr.z) * (tr.x + tr.y - tr.z)) / (tr.x + tr.y);\n        if(bs < .02 * font.weight * wg){\n            font.pcolor = font.color;\n        \treturn font.color;\n        }\n*/\n    \n        pos += 1;\n    }\n    \n\treturn vec4(0., 0., 0., 1.0);    \n}\n\n// Draw float\nvec4 MF_DrawFloat(vec2 coord, out MaticalFontFloat font){\n    if(!MF_InRect(coord, font.rect, font.len))\n        return vec4(0., 0., 0., 1.0);\n    \n    coord = MF_GetRect(coord, font.rect);\n    if(coord.x > 30.)\n\t\treturn vec4(1., 0., 0., 1.0);\n    \n    float pw = pow(10., font.pw - floor(coord.x) + 1. );\n    int val = _c0 + int(mod(font.val, pw) / (pw / 10.));\n    \n    // Point\n    if(font.dec > 0. && coord.x >= font.len - font.dec - 1.){\n        if(coord.x <= font.len - font.dec){\n    \t\tcoord.x = mod(coord.x, 1.);\n        \tval = _c_ns;\n        } else{\n        \tcoord.x -= font.len - font.dec;\n            pw = pow(10., floor(coord.x));\n            val = _c0 + int(mod(font.val * pw, 1.) * 10.);\n        }\n    }\n    \n    coord.x -= floor(coord.x);\n    \n    return MF_DrawChar(coord, font, val);\n}\n\n// Draw string\nvec4 MF_DrawString(vec2 coord, out MaticalFontFloat font, int chr){\n    font.len ++;\n    \n\tif(!MF_InRectStr(coord, font.rect, font.len))\n\t\treturn vec4(0., 0., 0., 1.0);\n    \n    coord = MF_GetRect(coord, font.rect);    \n    coord.x -= floor(coord.x);\n\n    // Draw\n    return MF_DrawChar(coord, font, chr);\n}\n\n#define MFD_DRAWSTRING(chr) if((fcol = MF_DrawString(coord, font, chr)) != vec4(0., 0., 0., 1.0)) return fcol;\n\nvec4 MF_DrawString(vec2 coord, out MaticalFontFloat font, int chr1, int chr2){\n    vec4 fcol; MFD_DRAWSTRING(chr1); MFD_DRAWSTRING(chr2); return fcol;\n}\n\nvec4 MF_DrawString(vec2 coord, out MaticalFontFloat font, int chr1, int chr2, int chr3){\n    vec4 fcol; MFD_DRAWSTRING(chr1); MFD_DRAWSTRING(chr2); MFD_DRAWSTRING(chr3); return fcol;\n}\n\nvec4 MF_DrawString(vec2 coord, out MaticalFontFloat font, int chr1, int chr2, int chr3, int chr4){\n    vec4 fcol; MFD_DRAWSTRING(chr1); MFD_DRAWSTRING(chr2); MFD_DRAWSTRING(chr3); MFD_DRAWSTRING(chr4); return fcol;\n}\n\nvec4 MF_DrawString(vec2 coord, out MaticalFontFloat font, int chr1, int chr2, int chr3, int chr4, int chr5){\n    vec4 fcol; MFD_DRAWSTRING(chr1); MFD_DRAWSTRING(chr2); MFD_DRAWSTRING(chr3); MFD_DRAWSTRING(chr4); MFD_DRAWSTRING(chr5); return fcol;\n}\n\nvec4 MF_DrawString(vec2 coord, out MaticalFontFloat font, int chr1, int chr2, int chr3, int chr4, int chr5, int chr6){\n    vec4 fcol; MFD_DRAWSTRING(chr1); MFD_DRAWSTRING(chr2); MFD_DRAWSTRING(chr3); MFD_DRAWSTRING(chr4); MFD_DRAWSTRING(chr5);\n    MFD_DRAWSTRING(chr6); return fcol;\n}\n\n// Draw End\n#define MF_DrawEnd if(font.pcolor != vec4(0., 0., 0., 1.0)){ fragColor = font.pcolor; return ; }\n\n// Main\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord){\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Font\n    MaticalFontFloat font;\n    vec4 ret, fcol;\n   \n    // Configure.\n    // MF_DrawFloatNew() set float value, rectangle to draw, color, digits count. Rectangle for first sumbol!\n    // MF_DrawStringNew() set rectangle to draw, color. Rectangle for first sumbol!\n    \n    // Draw\n    // MF_DrawFloat() set normalized pixel, font.\n    // MF_DrawString() set normalized pixel, font, chars ...\n    \n    // End\n    // MF_DrawEnd; test result and set to fragColor.\n\n    \n     // Draw numbers\n    font = MF_DrawStringNew(vec4(.0, .8, .1, .2), RGBC_RED);\n    fcol = MF_DrawString(uv, font, _c0, _c1, _c2, _c3, _c4);\n    fcol = MF_DrawString(uv, font, _c5, _c6, _c7, _c8, _c9);\n    MF_DrawEnd;   \n    \n    // Draw Hello World!\n    font = MF_DrawStringNew(vec4(.0, .5, .1, .2), RGBC_RED);\n    //fcol = MF_DrawString(uv, font, _H, _e, _l, _l, _o, _sp);\n    fcol = MF_DrawString(uv, font, _c5, _c6, _c7, _c8, _c9);\n    MF_DrawEnd;\n    \n\n    \n    // Draw Bold\n    font = MF_DrawFloatNew(g_pos, vec4(.01, .2, .05, .1), RGBC_RED, 0.);\n    font.weight = 2.;\n    ret = MF_DrawFloat(uv, font);\n    MF_DrawEnd;\n    \n    // Draw this year, date, month, day\n    font = MF_DrawFloatNew(iDate.x, vec4(.01, .01, .05, .1), RGBC_RED, 0.);\n    ret = MF_DrawFloat(uv, font);\n   \tMF_DrawEnd;\n    \n    font = MF_DrawFloatNew(iDate.y, vec4(.3, .01, .05, .1), RGBC_RED, 0.);\n    ret = MF_DrawFloat(uv, font);\n    MF_DrawEnd;\n    \n    font = MF_DrawFloatNew(iDate.z, vec4(.4, .01, .05, .1), RGBC_RED, 0.);\n    ret = MF_DrawFloat(uv, font);   \n    MF_DrawEnd;\n    \n    // Draw time\n    font = MF_DrawFloatNew(iTime, vec4(.6, .01, .05, .1), RGBC_RED, 2.);\n    ret = MF_DrawFloat(uv, font);\n    MF_DrawEnd;\n\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}