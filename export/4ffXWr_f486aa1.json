{"ver":"0.1","info":{"id":"4ffXWr","date":"1705150090","viewed":90,"name":"particular particles attempt 1","username":"rucksack","description":"simple particle simulation thingy","likes":2,"published":1,"flags":32,"usePreview":1,"tags":["particles","genuary","genuary1","genuary2024"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// YOU MAY NEED TO RESTART THE SHADER FROM THE BEGINNING with the |< icon\n// otherwise the positions may not be initialized properly for some reason aaaa\n\n// TODO add field with particle density for splitting the blob\n\nconst int NUM_PARTICLES = 400;\nconst float DATA_STEP = 1. / float(NUM_PARTICLES);\nconst float INTENSITY_STEP = .01;\nconst float PARTICLE_SIZE = .01;\n\nfloat dist(in vec2 uv, out float intensity)\n{\n    float d = 1000000.;\n    intensity = 0.;\n    // TODO fix intensity?\n    for (int i = 0; i < NUM_PARTICLES; i++)\n    {\n        ivec2 xy = ivec2(i % int(iResolution.x), floor(float(i) / float(iResolution.x)));\n        vec2 p = texelFetch(iChannel0, xy, 0).xy;\n        intensity += INTENSITY_STEP*length(uv - p);\n        d = min(d, length(uv - p) - PARTICLE_SIZE);\n    }\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - iResolution.xy*.5)/iResolution.y;\n\n    float intensity;\n    float d = dist(uv, intensity);\n\n    float dinv = 1./d;\n    fragColor = .05 * max(10., dinv) * vec4(.3, .2, .5, 1);\n    if (d < 0.) fragColor.rgb += intensity*10.*vec3(.3, .2, .9);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float SPEED_SCALE = .05;\nconst float ACCELERATION = .01;\n\nvoid mainImage( out vec4 color, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 m = (iMouse.xy - iResolution.xy*.5) / iResolution.y;\n\n    if (iFrame < 2) {\n        // Initialize\n        color = (texture(iChannel1, uv) - .5)*2.;\n        return;\n    }\n\n    color = texture(iChannel0, uv);\n    vec2 pos = color.xy;\n    vec2 vel = color.zw;\n\n    // attraction to a moving point (or the cursor if it appears)\n    vec2 target = vec2(cos(iTime) + sin(iTime+.2) * .3, sin(iTime-.3) + cos(iTime)*.2)*.3;\n    if (iMouse.z > 1. || iMouse.w > 1.)\n    {\n        target = m;\n            \n    }\n    \n    // update the speed with acceleration towards that point\n    vec2 target_dir = normalize(target - pos);\n    vel += ACCELERATION * target_dir;\n\n    // TODO better noise field\n    //vel += texture(iChannel1, uv + pos + vel).rg*ACCELERATION*.9;\n    pos += SPEED_SCALE*vel;\n    \n    // Dampen speed\n    vel *= .99;\n\n    color = vec4(pos, vel);\n}","name":"Buffer A","description":"","type":"buffer"}]}