{"ver":"0.1","info":{"id":"M3f3zs","date":"1707839965","viewed":96,"name":"my first raymarching guys","username":"destroyerman","description":"raymarching","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 rot2D(float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat2(c,-s,s,c);\n}\n\n// sphere SDF\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\n// box SDF\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\n\nfloat smin( float a, float b, float k )\n{\n    float h = max( k-abs(a-b), 0.0 )/k;\n    return min( a, b ) - h*h*k*(1.0/4.0);\n}\n\nfloat map(vec3 p) {\n    vec3 spherePos = vec3(sin(iTime) * 3.,0.,0.);\n    float sphere = sdSphere(p - spherePos, 1.);\n    \n    vec3 q = p; // copy input\n    \n    q = fract(q) - .5;\n    \n    \n    float box = sdBox(q, vec3(.1)); // paste the copy to the box func\n    \n    float ground = p.y + 0.75;\n   \n    \n    return smin(ground,smin(sphere,box, 2.), 1.);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2. - iResolution.xy) / iResolution.y;\n    vec2 m = (iMouse.xy * 2. - iResolution.xy) / iResolution.y;\n    \n    \n    // init\n    vec3 ro = vec3(0., 0., -3.);            // ray origin\n    vec3 rd = normalize(vec3(uv, 1.));      // ray direction \n    float t = 0.;                           // total distance travelled\n    vec3 col = vec3(0.);                    // final pixel color\n    \n    \n    // Vertical cam move\n    ro.yz *= rot2D(-m.y); \n    rd.yz *= rot2D(-m.y); \n    \n    // Horizontal cam move\n    ro.xz *= rot2D(-m.x); \n    rd.xz *= rot2D(-m.x); \n    \n    // raymarching\n    for (int i = 0; i < 80; i++) {\n        vec3 p = ro + rd * t;   // position along the ray\n\n        float d = map(p);       // current distance to the scene\n\n        t += d;                 // march the ray\n        \n        \n        //col = vec3(i) / 80.;\n        \n        if (d < .001 ||t > 100.) break; // early stop if close enough or too far\n    }\n    \n    // coloring\n    col = vec3(t * .2);\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}