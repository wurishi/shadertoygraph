{"ver":"0.1","info":{"id":"tdKGzR","date":"1569618944","viewed":88,"name":"Conic Shader","username":"srishti87","description":"circle gradient","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["gradientcircle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float tFactor(vec2 pointInCircle)\n{\n    float PI =3.14f;\n    float tanTheta = pointInCircle.y/pointInCircle.x;\n    float theta = atan(tanTheta);\n    float t = theta/PI;\n    return t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 pos = fragCoord/iResolution.xy;\n\n\tfloat r1 =0.25f;\n    vec2 origin =vec2(0.5f,0.5f);\n    if(((pos.y-origin.y)*(pos.y-origin.y) +(pos.x-origin.x)*(pos.x-origin.x)) <= r1*r1)\n    {\n        float x = pos.x -origin.x;\n        float y = pos.y-origin.y;\n        vec2 tanPos =vec2(x,y);\n        float t = tFactor(tanPos);\n\t\tfragColor = vec4(t,t,t,1.0);\n    }\n    else\n        fragColor = vec4(0.0,0.0,1.0,1.0);    \n}","name":"Image","description":"","type":"image"}]}