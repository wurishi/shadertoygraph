{"ver":"0.1","info":{"id":"msVfzt","date":"1698541405","viewed":70,"name":"Mandelbrot set viewer","username":"ztunedd","description":"WASD - move camera\nQE - zoom in and zoom out\nXC - decrease and increase amount of iterations","likes":2,"published":1,"flags":48,"usePreview":0,"tags":["2d","fractal","mandelbrot","interactive","zoom","keyboard"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Welcome to my first project!\n\n\n// Number of iterations.\nint ITERATIONS = 100;\n\n//@ Number of iterations required for a hue to loop.\nfloat HUELOOP = 50.0;\n\n//@ Hue shift. 0 - 1\nfloat HUESHIFT = 0.0;\n\nvec2 uv;\n\n// Main mandelbrot function\nvec2 f( vec2 a ) {\n    return vec2(a.x*a.x - a.y*a.y + uv.x, 2.0*a.x*a.y + uv.y);\n}\n\n// Hsv to rgb converting function\nvec3 hsv2rgb( vec3 c ) {\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n\n// Main function\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n    // Get output from buffer a\n    vec4 outp = texelFetch( iChannel0, ivec2(0,0), 0 ).xyzw;\n    \n    // Split the output into 3 variables\n    vec2 movepoint = outp.xy;\n    int zoom = int(outp.z);\n    int iter = int(outp.w);\n    \n    ITERATIONS = max( 1, ITERATIONS + iter );\n    \n    // Normalized pixel coordinates\n    uv = (fragCoord.xy * 2.0 - iResolution.xy) * 2.0 / iResolution.x / pow(2.0, float(zoom)/4.0) + movepoint;\n    \n    // Sets point to f( point ) n times\n    vec2 point = vec2(0.0);\n    int iCopy = ITERATIONS;\n    for ( int i=0; i<ITERATIONS; i++ ) {\n        point = f(point);\n        if ( dot(point, point) > 4.0 ) {\n            iCopy = i;\n            break;\n        }\n    }\n    \n    // Sets the color based on how many iterations the point\n    // has gone through before getting out of the r=2 circle\n    vec3 color = hsv2rgb(vec3(float(iCopy)/HUELOOP+HUESHIFT, 1.0, 1.0));\n    \n    \n    if ( dot(point, point) > 4.0 ) {\n        fragColor = vec4( color, 1.0 );\n    } else {\n        fragColor = vec4( 0.0, 0.0, 0.0, 0.0 );\n    }\n}\n// I can't believe i have managed to do this :D","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Assigning variables\nconst int K_W = 87;\nconst int K_A = 65;\nconst int K_S = 83;\nconst int K_D = 68;\nconst int K_Q = 81;\nconst int K_E = 69;\nconst int K_X = 88;\nconst int K_C = 67;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // It's like 4 am for me as of making this. You'll probably have to figure out all of this by yourself.\n    float zoom = texelFetch( iChannel0, ivec2(0, 0), 0 ).z;\n    \n    float zoomin = texelFetch( iChannel1, ivec2(K_Q, 0), 0 ).x;\n    float zoomout = -texelFetch( iChannel1, ivec2(K_E, 0), 0 ).x;\n    zoom += zoomin + zoomout;\n    \n    vec2 point = texelFetch( iChannel0, ivec2(0, 0), 0).xy;\n    \n    int up = int(texelFetch( iChannel1, ivec2(K_W, 0), 0 ).x);\n    int down = int(-texelFetch( iChannel1, ivec2(K_S, 0), 0 ).x);\n    int left = int(-texelFetch( iChannel1, ivec2(K_A, 0), 0 ).x);\n    int right = int(texelFetch( iChannel1, ivec2(K_D, 0), 0 ).x);\n    point += vec2(left + right, up + down)  / pow(2.0, float(zoom)/4.0) / 4.0;\n    \n    int iter = int(texelFetch( iChannel0, ivec2(0, 0), 0).w);\n    \n    int iterinc = int(texelFetch( iChannel1, ivec2(K_C, 0), 0 ).x);\n    int iterdec = int(-texelFetch( iChannel1, ivec2(K_X, 0), 0 ).x);\n    iter += iterinc + iterdec;\n    \n    fragColor = vec4(point, zoom, iter);\n}","name":"Buffer A","description":"","type":"buffer"}]}