{"ver":"0.1","info":{"id":"lXS3Rh","date":"1708182480","viewed":63,"name":"Quadratic bezier","username":"liubi","description":"Quadratic bezier for dummies","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["bezier"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"# define SEGMENT 25\n\nfloat Circle(vec2 pos, vec2 center) {\n    float d = length(pos - center);\n    return smoothstep(fwidth(d), 0., d-0.02);\n    // return d;\n}\n\nfloat Line(vec2 pos, vec2 a, vec2 b) {\n    vec2 pa = pos - a;\n    vec2 ba = b - a;\n    float t = clamp(dot(pa, ba) / dot(ba, ba), .0, 1.);\n    vec2 c = a + ba * t;\n    float d = length(c - pos);\n    return smoothstep(fwidth(d), 0.001, d-0.001);\n}\n\nvec2 toBezier(vec2 A, vec2 B, vec2 C, float t) {\n    return mix(mix(A, C, t), mix(C, B, t), t);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-iResolution.xy*.5)/iResolution.x;\n\n    float t = sin(iTime) * 0.5 + 0.5;\n    vec3 col = vec3(0);\n    vec2\n        A = vec2(-0.2, -0.2),\n        B = vec2(0.2, 0.2),\n        C = (iMouse.xy-iResolution.xy*.5)/iResolution.x;\n    vec2 AC = mix(A, C, t);\n    vec2 CB = mix(C, B, t); \n    vec2 ACB = mix(AC, CB, t);\n    \n    col += \n        vec3(1, 0, 0)*Circle(uv, A) + \n        vec3(0, 0, 1)*Circle(uv, B) + \n        vec3(0, 1, 0)*Circle(uv, C);\n        //vec3(1, 1, 0)*Circle(uv, AC) +\n        //vec3(0, 1, 1)*Circle(uv, CB);\n        //Line(uv, A, C) + \n        //Line(uv, B, C);\n    // col += Line(uv, AC, CB);\n    col += vec3(1, 1, 1)*Circle(uv, ACB);\n\n    vec2 P, PP = A;\n    for (int i = 1; i <= SEGMENT; i++){\n        float t = float(i) / float(SEGMENT);\n        vec2 P = toBezier(A, B, C, t);\n        col = max(col, Line(uv, PP, P));\n        PP = P;\n        \n    }\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}