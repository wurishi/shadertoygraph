{"ver":"0.1","info":{"id":"dsccW8","date":"1694982115","viewed":60,"name":"trigonal oriented random blocks","username":"jt","description":"Loopless random blocks oriented in three directions.\nFor interesting placement of buildings in procedurally generated city maps than just rectangular grid,\nwhile at the same time being reasonably easy addressable, for grid-based simulation and wayfinding.","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["procedural","2d","rectangles","grid","grid","grid","triangle","triangles","patterns","random","rectangle","barycentric","city","pattern","hex"],"hasliked":0,"parentid":"DddyWr","parentname":"triagonal oriented random blocks"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/dsccW8 trigonal oriented random blocks, 2023 by jt\n// black white variant of https://www.shadertoy.com/view/DddyWr triagonal oriented random blocks\n// based on https://www.shadertoy.com/view/ds3cWn random rotated triangles checker\n// based on of https://www.shadertoy.com/view/DljBDm three directions city grid patch\n// https://www.shadertoy.com/view/dtBBRw three dir grid patches essence\n// 2d essence of https://www.shadertoy.com/view/DtsBWl three directional grid patches\n\n// Black-white variant to visuality the structure more clearly.\n\n// Loopless random blocks oriented in three directions.\n// For interesting placement of buildings in procedurally generated city maps than just rectangular grid,\n// while at the same time being reasonably easy addressable, for grid-based simulation and wayfinding.\n// The underlying triangular structure facilitates seamless inclusion of terrain (via heightmap & triangle mesh).\n\n// Algorithm:\n// For each triangle in tiling choose (1 of 3) directions randomly.\n// If orientation matches neighbor triangle color half-triangle with primary color.\n// Apply other color to unmatched half triangles.\n\n// Alternates between independent triangles and triangles grouped to hexagons.\n// Click to show underlying triangular grid.\n\n// tags: procedural, 2d, rectangles, grid, grid, triangle, triangles, patterns, random, rectangle, barycentric, city, pattern, hex, grids\n\n// The MIT License\n// Copyright (c) 2023 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n/*\n// https://www.shadertoy.com/view/WttXWX \"Best\" Integer Hash by FabriceNeyret2\n// implementing Chris Wellons https://nullprogram.com/blog/2018/07/31/\nuint triple32(uint x)\n{\n    x ^= x >> 17;\n    x *= 0xed5ad4bbU;\n    x ^= x >> 11;\n    x *= 0xac4c1b51U;\n    x ^= x >> 15;\n    x *= 0x31848babU;\n    x ^= x >> 14;\n    return x;\n}\n\nuint uhash(ivec3 v)\n{\n    return triple32(uint(v.x) + triple32(uint(v.y) + triple32(uint(v.z))));\n}\n*/\nuint uhash(ivec3 f) // faster prng suggested by Fabrice\n{\n    uvec3  x = uvec3(f);\n    uint   k = 1103515245U;\n           x = ((x>>8U)^x.yzx)*k;\n           x = ((x>>8U)^x.yzx)*k;\n    return uint(((x>>8U)^x.yzx)*k);\n}\n\nvec3 barycentric(vec2 p)\n{\n    float s = sqrt(3.0);\n    return vec3((vec2(-1,+1) * p.x - p.y/s + 1.0)/2.0, p.y / s);\n}\n\n// https://www.shadertoy.com/view/DtjyWD integer division - rounding down\nivec3 div_floor(ivec3 a, int b) // vector version thanks to Fabrice\n{\n    ivec3  S = (sign(abs(a*b))-sign(a*b))/2; // 0 if a*b >= 0\n    return S * ((1 - abs(a)) / abs(b) - 1)+(1-S)*(a / b); // emulates ()?:\n}\n\nivec3 mod_positive(ivec3 a, int b)\n{\n    return a - div_floor(a, b) * b;\n}\n\nivec3 hexagonal(ivec3 i) // group triangular coordinates to hexagonal coordinates (jt)\n{\n    return div_floor(i.zxy-i.yzx+ivec3(0,-1,+1),3); // NOTE: permutate 0,-1,+1 to align hexagons differently\n}\n\nuint orientation(ivec3 tile)\n{\n    if((int(iTime/2.0)&1)!=0) tile = hexagonal(tile); // alternate triangular-hexagonal structure\n    return uhash(tile + int(iTime)) % 3u;\n}\n\nvec3 permute(uint direction, vec3 local)\n{\n    return direction == 0u ? local : direction == 1u ? local.yzx : local.zxy; // this configuration would also work with directions 0,+1,-1\n}\n\nivec3 permute(uint direction, ivec3 local)\n{\n    return direction == 0u ? local : direction == 1u ? local.yzx : local.zxy; // this configuration would also work with directions 0,+1,-1\n}\n\nivec3 unpermute(uint direction, ivec3 local)\n{\n    return direction == 0u ? local : direction == 1u ? local.zxy : local.yzx; // this configuration would also work with directions 0,+1,-1\n}\n\nivec2 permute(bool flag, ivec2 v)\n{\n    return flag ? v.yx : v;\n}\n\nvec3 color(uint direction)\n{\n    return direction == 0u ? vec3(1,0,0) : direction == 1u ? vec3(0,1,0) : vec3(0,0,1) ; // this configuration would also work with directions 0,+1,-1\n}\n\n#define scale (10.0*sqrt(3.0))\n//#define e (3./R.y*scale) /* smooth but blurry */\n#define e (1./R.y*scale) /* less blurry */\n\nvoid mainImage( out vec4 o, in vec2 I )\n{\n    float s = 0.05;\n    float r = 1.25;\n    vec2 R = iResolution.xy;\n    //I = 2.0 * I/R - 1.0;\n    I = (2.0 * I - R) / R.y; // mind aspect ratio\n\n    vec3 global = barycentric(I*scale);\n\n    ivec3 tile = ivec3(floor(global));\n    bool flip = tile.x + tile.y + tile.z == 0;\n    //bool tri = any(lessThan(global, vec3(0))); // fundamental triangle\n    vec3 local = fract(global);\n    //vec3 local = global - vec3(tile);\n    if(!flip) local = 1.0 - local;\n\n    uint direction = orientation(tile);\n    local = permute(direction, local);\n\n    bool side = (local.y-local.x) <= 0.0;\n\n    // group triangle halfs with matching adjacent direction\n    o = vec4(vec3(orientation(tile + unpermute(direction, ivec3(permute(side, ivec2(flip?-1:+1,0)),0))) != direction), 1);\n\n    if(iMouse.z > 0.0)\n    {\n        o = mix(o, vec4(0.2*(direction == 2u ? vec3(0,0,1) : direction == 1u ? vec3(0,1,0) : vec3(1,0,0)), 1.0), 0.75);\n        o *= 0.5 + 0.5 * min(smoothstep(0.0,0.0+e,local.x), min(smoothstep(0.0,0.0+e,local.y), smoothstep(0.0,0.0+e,local.z)));\n    }\n    //if(tri) o.xyz = vec3(0,0,1); // fundamental triangle\n    //if(flip) o.xyz = vec3(1,0,0);\n    o = sqrt(o); // gamma\n}\n","name":"Image","description":"","type":"image"}]}