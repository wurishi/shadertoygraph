{"ver":"0.1","info":{"id":"7tKfRd","date":"1727564764","viewed":19,"name":"GPT-3 Forest","username":"sferrando","description":"GPT3 generated Forest","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["gpt3"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t// constants\n\tconst float PI = 3.14159265359;\n\tconst float TWO_PI = 2.0 * PI;\n\t\n\t// user parameters\n\tfloat treeDensity = 0.25;\n\tfloat treeSize = 0.1;\n\t\n\t// random number generator\n\tfloat seed = fragCoord.x * 0.0001 + fragCoord.y * 0.001;\n\tfloat r = fract( sin( seed ) * 43758.5453 );\n\t\n\t// determine if a tree should be drawn at this pixel\n\tif( r < treeDensity )\n\t{\n\t\t// calculate the position of the tree\n\t\tfloat x = fragCoord.x + r * treeSize;\n\t\tfloat y = fragCoord.y + r * treeSize;\n\t\t\n\t\t// calculate the angle of the tree\n\t\tfloat angle = r * TWO_PI;\n\t\t\n\t\t// draw the tree\n        \n        // calculate the position of the tree's leaves\n        float leavesX = x + cos( angle ) * treeSize * 0.5;\n        float leavesY = y + sin( angle ) * treeSize * 0.5;\n\n        // draw the leaves\n        // constants\n        const float TWO_PI = 2.0 * 3.14159265359;\n\n        // calculate the number of leaves\n        int numLeaves = int(treeSize) * 5;\n\n        // draw the leaves\n        for( int i = 0; i < numLeaves; i++ )\n        {\n            // calculate the position and angle of the leaf\n            float leafAngle = float( i ) / float( numLeaves ) * TWO_PI;\n            float leafX = x + cos( leafAngle ) * treeSize * 0.2;\n            float leafY = y + sin( leafAngle ) * treeSize * 0.2;\n\n            // draw the leaf\n            // constants\n            const float TWO_PI = 2.0 * 3.14159265359;\n\n            // calculate the number of vertices\n            int numVertices = 3;\n\n            // draw the vertices\n            for( int i = 0; i < numVertices; i++ )\n            {\n                // calculate the position and angle of the vertex\n                float vertexAngle = float( i ) / float( numVertices ) * TWO_PI + angle;\n                float vertexX = x + cos( vertexAngle ) * treeSize * 0.1;\n                float vertexY = y + sin( vertexAngle ) * treeSize * 0.1;\n\n                // draw the vertex\n                // set the color of the vertex\n                vec4 color = vec4( 0.5, 0.25, 0.0, 1.0 );\n\n                // draw the vertex\n                fragColor = color;\n            }\n        }\n        // draw the trunk\n        // constants\n\n        // calculate the number of vertices\n        int numVertices = 3;\n\n        // draw the vertices\n        for( int i = 0; i < numVertices; i++ )\n        {\n            // calculate the position and angle of the vertex\n            float vertexAngle = float( i ) / float( numVertices ) * TWO_PI + angle + 3.14159265359 * 0.5;\n            float vertexX = x + cos( vertexAngle ) * treeSize * 0.05;\n            float vertexY = y + sin( vertexAngle ) * treeSize * 0.05;\n\n            // draw the vertex\n            // set the color of the vertex\n            vec4 color = vec4( 0.5, 0.25, 0.0, 1.0 );\n\n            // draw the vertex\n            fragColor = color;\n        }\n\t}\n\telse\n    {\n        // output color\n        fragColor = vec4( 0.0, 0.5, 0.0, 1.0 );\n    }\n\t\n}","name":"Image","description":"","type":"image"}]}