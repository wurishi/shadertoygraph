{"ver":"0.1","info":{"id":"l3jSDV","date":"1711118222","viewed":24,"name":"Procedural Planet with stars","username":"PiouPiou","description":"TP2","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"struct Surface\n{\n    float sd; // signed distance value\n    vec3 col; // color\n};\n\nstruct Noise\n{\n    float factor; // factor to multiply the noise by   \n    int octaves; // number of octaves that represent how many times the noise is repeated\n    float lacunarity; // factor that determines how much the frequency of the noise increases with each octave\n    float gain; // factor that determines how much the amplitude of the noise decreases with each octave\n};\n\nfloat opSmoothUnion(float d1, float d2, float k)\n{\n    float h = clamp(0.5 + 0.5 * (d2 - d1) / k, 0.0, 1.0);\n    return mix(d2, d1, h) - k * h * (1.0 - h);\n}\n\nSurface sdSphere(vec3 p, float s, vec3 col)\n{\n    float d = length(p) - s;\n    return Surface(d, col);\n}\n\nfloat rand(float n)\n{\n    return fract(sin(n) * 43758.5453123);\n}\n\nvec3 get_random_star_color(float n, vec3 k)\n{\n    float r = rand(n + 1.0);\n    float g = rand(n + 2.0);\n    float b = rand(n + 3.0);\n\n    return vec3(r, g, b);\n}\n\nvec3 apply_coloring_by_height(in Surface s)\n{\n        // Coloring depending on the distance\n    const vec3 high_color = vec3(0.39, 0.17, 0.04);\n    float high_level = 0.2;\n    const vec3 mid_color = vec3(0.13, 0.52, 0.11);\n    float mid_level = 0.1;\n    const vec3 low_color = vec3(0.04, 0.16, 0.53);\n    float low_level = 0.0;\n\n        // Coloring\n    float d = s.sd * 1.2;\n\n    if(d >= high_level)\n    {\n        return high_color;\n    }\n    else if(d >= mid_level && d < high_level)\n    {\n        return mix(mid_color, high_color, (d - mid_level) / (high_level - mid_level));\n    }\n    else if(d >= low_level && d < mid_level)\n    {\n        return mix(low_color, mid_color, (d - low_level) / (mid_level - low_level));\n    }\n    else if(d < low_level)\n    {\n        return low_color;\n    }\n}\n\n//rotate around point\nvec3 rotate(vec3 p, vec3 axis, float angle)\n{\n    float s = sin(angle);\n    float c = cos(angle);\n    float oc = 1.0 - c;\n    return vec3(p.x * (axis.x * axis.x * oc + c) +\n        p.y * (axis.x * axis.y * oc - axis.z * s) +\n        p.z * (axis.x * axis.z * oc + axis.y * s), p.x * (axis.y * axis.x * oc + axis.z * s) +\n        p.y * (axis.y * axis.y * oc + c) +\n        p.z * (axis.y * axis.z * oc - axis.x * s), p.x * (axis.z * axis.x * oc - axis.y * s) +\n        p.y * (axis.z * axis.y * oc + axis.x * s) +\n        p.z * (axis.z * axis.z * oc + c));\n}\n\n// Simplex noise\nvec3 mod289(vec3 x)\n{\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x)\n{\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x)\n{\n    return mod289(((x * 34.0) + 1.0) * x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n    return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v)\n{\n    const vec2 C = vec2(1.0 / 6.0, 1.0 / 3.0);\n    const vec4 D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n    vec3 i = floor(v + dot(v, C.yyy));\n    vec3 x0 = v - i + dot(i, C.xxx);\n\n// Other corners\n    vec3 g = step(x0.yzx, x0.xyz);\n    vec3 l = 1.0 - g;\n    vec3 i1 = min(g.xyz, l.zxy);\n    vec3 i2 = max(g.xyz, l.zxy);\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n    vec3 x1 = x0 - i1 + C.xxx;\n    vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n    vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n    i = mod289(i);\n    vec4 p = permute(permute(permute(i.z + vec4(0.0, i1.z, i2.z, 1.0)) + i.y + vec4(0.0, i1.y, i2.y, 1.0)) + i.x + vec4(0.0, i1.x, i2.x, 1.0));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n    float n_ = 0.142857142857; // 1.0/7.0\n    vec3 ns = n_ * D.wyz - D.xzx;\n\n    vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n    vec4 x_ = floor(j * ns.z);\n    vec4 y_ = floor(j - 7.0 * x_);    // mod(j,N)\n\n    vec4 x = x_ * ns.x + ns.yyyy;\n    vec4 y = y_ * ns.x + ns.yyyy;\n    vec4 h = 1.0 - abs(x) - abs(y);\n\n    vec4 b0 = vec4(x.xy, y.xy);\n    vec4 b1 = vec4(x.zw, y.zw);\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n    vec4 s0 = floor(b0) * 2.0 + 1.0;\n    vec4 s1 = floor(b1) * 2.0 + 1.0;\n    vec4 sh = -step(h, vec4(0.0));\n\n    vec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;\n    vec4 a1 = b1.xzyw + s1.xzyw * sh.zzww;\n\n    vec3 p0 = vec3(a0.xy, h.x);\n    vec3 p1 = vec3(a0.zw, h.y);\n    vec3 p2 = vec3(a1.xy, h.z);\n    vec3 p3 = vec3(a1.zw, h.w);\n\n//Normalise gradients\n    vec4 norm = taylorInvSqrt(vec4(dot(p0, p0), dot(p1, p1), dot(p2, p2), dot(p3, p3)));\n    p0 *= norm.x;\n    p1 *= norm.y;\n    p2 *= norm.z;\n    p3 *= norm.w;\n\n// Mix final noise value\n    vec4 m = max(0.6 - vec4(dot(x0, x0), dot(x1, x1), dot(x2, x2), dot(x3, x3)), 0.0);\n    m = m * m;\n    return 42.0 * dot(m * m, vec4(dot(p0, x0), dot(p1, x1), dot(p2, x2), dot(p3, x3)));\n}\n\nfloat accumulateNoises(Noise[10] noises, vec3 pos, float height)\n{\n    float result = 0.0;\n\n    for(int i = 0; i < noises.length(); i++)\n    {\n        Noise noise = noises[i];\n\n        if(noise.factor == 0.0)\n            continue;\n\n        float acc = 0.0;\n        for(int j = 0; j < noise.octaves; j++)\n        {\n            acc += noise.gain * snoise(vec3(pos * noise.lacunarity));\n        }\n\n        result += noise.factor * acc;\n    }\n\n    return result;\n}\n\n// Used to create mountains and valleys\nSurface applyUpperNoises(Surface s, vec3 pos, Noise[10] noises)\n{\n    Surface result = s;\n    result.sd += accumulateNoises(noises, pos, s.sd);\n    return result;\n}\n\n// Used to create oceans and lakes reliefs\nSurface applyLowerNoises(Surface s, vec3 pos, Noise[10] noises)\n{\n    Surface result = s;\n    result.sd -= abs(accumulateNoises(noises, pos, s.sd));\n    return result;\n}\n\n//---------------------------------\n\nSurface map(in vec3 pos)\n{\n    vec3 k = pos;\n    Surface s = sdSphere(k, 2.5, vec3(0.0));\n\n    Noise[10] planetUpperNoises;\n    planetUpperNoises[0] = Noise(0.4, 1, 0.65, 0.7);\n    planetUpperNoises[1] = Noise(0.3, 1, 1.4, 0.2);\n    planetUpperNoises[2] = Noise(0.3, 3, 3., 0.01);\n    planetUpperNoises[3] = Noise(0.2, 5, 9., 0.005);\n\n    Surface s2 = applyUpperNoises(s, pos, planetUpperNoises);\n    s2.sd = min(s.sd + 0.03, s2.sd);\n    s2.col = apply_coloring_by_height(s);\n\n    return s2;\n}\n\nvec3 calcNormal(in vec3 pos)\n{\n    const float ep = 0.0001;\n    vec2 e = vec2(1.0, -1.0) * 0.5773;\n    return normalize(e.xyy * (map(pos + e.xyy * ep).sd) +\n        e.yyx * (map(pos + e.yyx * ep).sd) +\n        e.yxy * (map(pos + e.yxy * ep).sd) +\n        e.xxx * (map(pos + e.xxx * ep).sd));\n}\n\nfloat calcSoftshadow(in vec3 ro, in vec3 rd, float tmin, float tmax, const float k)\n{\n    float res = 1.0;\n    float t = tmin;\n    for(int i = 0; i < 50; i++)\n    {\n        Surface s = map(ro + rd * t);\n        float h = s.sd;\n        res = min(res, k * h / t);\n        t += clamp(h, 0.02, 0.20);\n        if(res < 0.005 || t > tmax)\n            break;\n    }\n    return clamp(res, 0.0, 1.0);\n}\n\n// Camera\n\n// Set up a camera looking at the scene.\n// origin - camera is positioned relative to, and looking at, this point\n// dist(ance) - how far camera is from origin\n// rotation - about x & y axes, by left-hand screw rule, relative to camera looking along +z\n// zoom- the relative length of the lens\nvec3 localRay;\nvoid handleCamera(out vec3 pos, out vec3 ray, in vec3 origin, in vec2 rotation, in float dist, in float zoom, in vec2 fragCoord)\n{\n\t// get rotation coefficients\n    vec2 c = vec2(cos(rotation.x), cos(rotation.y));\n    vec4 s;\n    s.xy = vec2(sin(rotation.x), sin(rotation.y)); // worth testing if this is faster as sin or sqrt(1.0-cos);\n    s.zw = -s.xy;\n\n\t// ray in view space\n    ray.xy = fragCoord.xy - iResolution.xy * .5;\n    ray.z = iResolution.y * zoom;\n    ray = normalize(ray);\n    localRay = ray;\n\n\t// rotate ray\n    ray.yz = ray.yz * c.xx + ray.zy * s.zx;\n    ray.xz = ray.xz * c.yy + ray.zx * s.yw;\n\n\t// position camera\n    pos = origin - dist * vec3(c.x * s.y, s.z, c.x * c.y);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec3 tot = vec3(0.0);\n\n   // 1) Set up the Camera (primary ray for this pixel) \n    vec2 p = (-iResolution.xy + 2.0 * fragCoord) / iResolution.y;\n\n   // Camera Handling\n    float roationSpeed = 0.05;\n    vec2 cameraRotation = vec2(.5, .5) + vec2(-.35, 4.5) * vec2(iTime * roationSpeed, iTime * roationSpeed);\n    vec3 ro, rd;\n    float minRenderDistance = 0.1, maxRenderDistance = 20.0;\n\n    handleCamera(ro, rd, vec3(0.), cameraRotation, 10.0, 1., fragCoord);\n\n    Surface s;\n   // 2) Raymarching \n    for(int i = 0; i < 256; i++)\n    {\n        vec3 p = ro + minRenderDistance * rd;\n        s = map(p);\n        float h = s.sd;\n        if(abs(h) < 0.0001 || minRenderDistance > maxRenderDistance)\n            break;\n        minRenderDistance += h;\n    }\n\n    vec3 col = vec3(0.0);\n\n   // 3) Shading\n    vec3 ambiant_color = vec3(0.0, 0.02, 0.03);\n    vec3 light_color = vec3(0.97, 0.85, 0.78);\n\n    if(minRenderDistance < maxRenderDistance)\n    {\n        vec3 pos = ro + minRenderDistance * rd;\n        vec3 nor = calcNormal(pos);\n        vec3 lig = normalize(vec3(0.8, 0.8, -1.));\n        lig = rotate(lig, vec3(0.1, 0.1, 0.), 1. * iTime); // Rotate the light around the planet\n        float dif = clamp(dot(nor, lig), 0.0, 1.0);\n        float sha = calcSoftshadow(pos, lig, 0.001, 1.0, 16.0);\n        float amb = 0.5 + 0.5 * nor.y;\n        col = ambiant_color * amb + light_color * dif * sha * s.col;\n    }\n    else\n    {\n        vec3 k = vec3(p, 0.);\n        vec3 atmColor = vec3(0.12, 0.53, 0.88);\n        Surface atm = sdSphere(k, 0.6, atmColor);\n\n        // Coloring depending on the distance to create a atmosphere effect\n        if(atm.sd < 0.0)\n        {\n            float d = atm.sd * 1.2;\n            col = atm.col * smoothstep(0.0, 0.1, -d);\n        }\n        else\n        {\n            // use the noise to add some colored stars in the sky\n            Noise[10] starNoise1;\n            starNoise1[0] = Noise(1., 3, 30.0, 0.43);\n\n            float n = accumulateNoises(starNoise1, k, 0.0);\n\n            if(n > 0.98)\n            {\n                vec3 starColor = get_random_star_color(n, k);\n\n                // Add random twinkle effect\n                float twinkle = 0.5 + 0.5 * sin(iTime * 3.0 + n * 100.0);\n\n                vec3 star = starColor * n * twinkle;\n\n                col = star;\n            }\n        }\n    }\n\n    // Gamma correction\n    col = sqrt(col);\n\n    tot += col;\n\n    fragColor = vec4(tot, 1.0);\n}","name":"Image","description":"","type":"image"}]}