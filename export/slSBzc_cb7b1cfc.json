{"ver":"0.1","info":{"id":"slSBzc","date":"1652500929","viewed":172,"name":"Doodle dither","username":"feresr","description":"colorful gamedev sprite dithering\n\noriginal by:  \n@TRASEVOL_DOG\n \nhttps://trasevoldog.files.wordpress.com/2017/02/pico-8_451.gif","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["colorful","sprite","gamedev"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float FUZZ = .7;\nconst float PI = 3.141592;\nconst float ROTATION = -PI / 7.0;\nconst int PIXEL_RESOLUTION = 100;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.x;\n    // 0 to PIXEL_RESOLUTION\n    vec2 uvp = floor(uv * float(PIXEL_RESOLUTION));\n    uv = uvp / float(PIXEL_RESOLUTION);\n    \n    uv = rotateUV(uv, ROTATION);\n    vec4 tex = texture(iChannel0, uv);\n    \n    bool set = false;\n    float pixel_size = 1.0/float(PIXEL_RESOLUTION);\n    float salt = rand(floor(iTime * 6.0));\n    \n    if (rand(salt + uvp + vec2(0.0, 0.0)).x > FUZZ) {\n       //tex *= 0.0; // for debugging puposes\n       //tex.r = 255.0; // for debugging puposes\n       set = true;\n    }\n    \n    // check surrounding pixels. \n    //If they are 'selected', this pixel should copy its color\n    if (rand(salt + uvp + vec2(1.0, 0.0)).x > FUZZ) {\n       tex = texture(iChannel0, uv + vec2(pixel_size, 0.0));\n       set = true;\n    }\n    if (rand(salt + uvp + vec2(0.0, 1.0)).x > FUZZ) {  \n        tex = texture(iChannel0, uv + vec2(0.0, pixel_size));\n        set = true;\n    }\n    if (rand(salt + uvp + vec2(0.0, -1.0)).x > FUZZ) {\n       tex = texture(iChannel0, uv + vec2(0.0, -pixel_size));\n       set = true;\n    }\n    if (rand(salt + uvp + vec2(-1.0, 0.0)).x > FUZZ) {\n        tex = texture(iChannel0, uv + vec2(-pixel_size, 0.0));\n        set = true;\n    }\n    \n    \n    // only update if set\n    if (!set) discard;\n\n    fragColor = tex;\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"int STRIPE_COUNT = 6;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord / iResolution.xy;\n    vec2 m =  uv * float(STRIPE_COUNT);\n\n    m.x += iTime * 0.5;\n    m.x = mod(m.x, float(STRIPE_COUNT));\n\n    vec3 color = vec3(1.0);\n    if (m.x <= 1.0) {\n        color = rgb(255,0,77);\n    } else if (m.x <= 2.0) {\n        color = rgb(254,162,0);\n    } else if (m.x <= 3.0) {\n        color = rgb(254,237,37);\n    } else if (m.x <= 4.0) {\n        color = rgb(0,228,52);\n    } else if (m.x <= 5.0) {\n        color = rgb(40,173,254);\n    } else if (m.x <= 6.0) {\n        color = rgb(131,117,156);\n    }\n    \n\tfragColor = vec4(color.xyz, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"vec2 rand(vec2 co){\n    return vec2(\n        fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453),\n        fract(cos(dot(co.yx ,vec2(8.64947,45.097))) * 43758.5453)\n    )*2.0-1.0;\n}\n\nfloat rand(float t) {\n    return rand(vec2(t)).x;\n}\n\n\nvec3 rgb(int r, int g, int b) {\n   return vec3(r, g, b) / 255.0;\n}\n\n\nvec2 rotateUV(vec2 uv, float rotation)\n{\n    float mid = 0.5;\n    return vec2(\n        cos(rotation) * (uv.x - mid) + sin(rotation) * (uv.y - mid) + mid,\n        cos(rotation) * (uv.y - mid) - sin(rotation) * (uv.x - mid) + mid\n    );\n}\n\n","name":"Common","description":"","type":"common"}]}