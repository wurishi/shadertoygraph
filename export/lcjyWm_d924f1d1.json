{"ver":"0.1","info":{"id":"lcjyWm","date":"1722442571","viewed":40,"name":"Scratchapixel Sphere Render","username":"elifront","description":"conversion of: https://www.scratchapixel.com/lessons/3d-basic-rendering/volume-rendering-for-developers/intro-volume-rendering.html to Shadertoy GLSL","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarch","sphere"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* conversion of: \nhttps://www.scratchapixel.com/lessons/3d-basic-rendering/volume-rendering-for-developers/intro-volume-rendering.html\n\nto Shadertoy GLSL\n*/\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n\n    // Correct aspect ratio by adjusting uv coordinates\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n\n    // Ray origin and direction\n    vec3 rayOrig = vec3(0.0, 0.0, 2.0); // Start the ray in front of the camera\n    vec3 rayDir = normalize(vec3(uv, -1.0)); // Look towards the negative z-axis\n\n    vec3 sphereCenter = vec3(0.0, 0.0, 0.0); // Center the sphere at the origin\n    float sphereRadius = 1.0;\n\n    vec3 lightDir = normalize(vec3(-0.315798, 0.719361, 0.618702));\n    vec3 lightColor = vec3(20.0);\n    vec3 backgroundColor = vec3(0.572, 0.772, 0.921);\n\n    float sigma_a = 0.5;\n    float sigma_s = 0.5;\n    float sigma_t = sigma_a + sigma_s;\n    float g = 0.0; // Henyey-Greenstein asymmetry factor\n\n    float tMin = 0.0;\n    float tMax = 10.0;\n    float stepSize = 0.05;\n    int numSteps = int(ceil((tMax - tMin) / stepSize));\n    float Tvol = 1.0; // Transmission\n    vec3 Lvol = vec3(0.0); // Radiance\n\n    for (int n = 0; n < numSteps; ++n) {\n        float t = tMin + stepSize * (float(n) + 0.5);\n        vec3 samplePos = rayOrig + rayDir * t;\n\n        // Check if the sample position is inside the sphere\n        float distanceToCenter = length(samplePos - sphereCenter);\n        if (distanceToCenter < sphereRadius) {\n            // Density function inside the sphere\n            float density = exp(-distanceToCenter * 0.5); // Example density function\n\n            float Tsample = exp(-stepSize * density * sigma_t);\n            Tvol *= Tsample;\n\n            float lightAttenuation = exp(-length(samplePos - lightDir) * sigma_t);\n            vec3 scattering = lightColor * lightAttenuation * sigma_s * density;\n            Lvol += scattering * (1.0 - Tsample);\n\n            if (Tvol < 1e-3) break; // Early exit if transmission is too low\n        }\n    }\n\n    vec3 color = backgroundColor * Tvol + Lvol;\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}