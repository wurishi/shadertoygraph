{"ver":"0.1","info":{"id":"M3XBW2","date":"1728916379","viewed":91,"name":"gestos-2d","username":"jorge2017a2","description":"gestos-2d","likes":16,"published":1,"flags":0,"usePreview":0,"tags":["2d","icons","gestos2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n//por jorge2017a2\n//------gestos-2d\n//----14-oct-2024-\n//referencia\n//https://iquilezles.org/articles/distfunctions2d\n///\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n\n#define S(d,b) smoothstep(antialiasing(1.5),0. , d - (b) )\n#define S2(d,b) smoothstep(8.0*antialiasing(1.5),0.,d - (b) )\n#define S3(d,b) smoothstep(1.0/antialiasing(0.5),0. , d - (b) )\n\n#define opU2(d1, d2) ( d1.x < d2.x ? d1 : d2 )\n\n\n#define PI     3.14159265\n#define TWO_PI 6.28318530\n\n\n\nfloat opRep1D( float p, float c )\n\t{ float q = mod(p+0.5*c,c)-0.5*c; return  q ;}    \n\n\n\nfloat Sdf_I(float distA, float distB)\n\t{ return max(distA, distB);}\nfloat Sdf_U(float distA, float distB)\n\t{ return min(distA, distB);}\nfloat Sdf_D(float distA, float distB)\n\t{ return max(distA, -distB);}\n\n\nvec3 DFB(vec3 pColObj, vec3 colOut, float distObj )\n{ colOut = mix(colOut,pColObj ,S3( distObj,0.0));\n  colOut = mix(colOut,vec3(0.0),S3(abs( distObj)-0.005,0.0));\n  return colOut;\n}\n\n\n\nvec3 DFS(vec3 pColObj, vec3 colOut, float distObj )\n{ colOut = mix(colOut,pColObj ,S( distObj,0.0)); return colOut;\n  return colOut;\n}\n\n\n\n///oneshade    \nvec2 Rotate(in vec2 p, in vec2 o, in float r) \n{   float c = cos(r), s = sin(r);\n    return (p - o) * mat2(c, -s, s, c) + o;\n}\n\nvec2 rotatev2(vec2 p, float ang)\n{   float c = cos(ang);\n    float s = sin(ang);\n    return vec2(p.x*c - p.y*s, p.x*s + p.y*c);\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{ vec2 d = abs(p)-b;  return length(max(d,0.0)) + min(max(d.x,d.y),0.0);  }\n\nfloat sdCircle( vec2 p, float r )\n{ return length(p) - r;}\n\n\nvec3 Gesto01(vec2 p, vec3 colout)\n{\n\nvec2 A,B, med,pr;\nfloat dfin;\nfloat  r1,ang, he ;\n\nA=vec2(0.5,0.5033784);\nr1=0.3716216;\nfloat d1=sdCircle(p-A,r1);\ncolout= DFB(vec3(1.0,0.5,0.0), colout, d1);\n\nA=vec2(0.347973,0.5540541);\nr1=0.0472973;\nfloat d2=sdCircle(p-A,r1);\ncolout= DFB(vec3(0.0), colout, d2);\n\nA=vec2(0.6587838,0.5506757);\nr1=0.0472973;\nfloat d3=sdCircle(p-A,r1);\ncolout= DFB(vec3(0.0), colout, d3);\n\nA=vec2(0.6587838,0.5709459);\nr1=0.01351351;\nfloat d4=sdCircle(p-A,r1);\ncolout= DFB(vec3(1.0), colout, d4);\n\nA=vec2(0.3513514,0.5608108);\nr1=0.01351351;\nfloat d5=sdCircle(p-A,r1);\ncolout= DFB(vec3(1.0), colout, d5);\n\nvec2 p0=vec2(0.2398649,0.5912162);\nvec2 p1=vec2(0.3040541,0.6351351);\nvec2 p2=vec2(0.3344595,0.6925676);\nfloat d6=sdBezier(p,p0,p1,p2);\ncolout= DFB(vec3(0.0), colout, d6);\n\n p0=vec2(0.7533784,0.5912162);\n p1=vec2(0.6655405,0.6216216);\n p2=vec2(0.6486486,0.6858108);\nfloat d7=sdBezier(p,p0,p1,p2);\ncolout= DFB(vec3(0.0), colout, d7);\n\n p0=vec2(0.3614865,0.2466216);\n p1=vec2(0.5,0.3851351);\n p2=vec2(0.6418919,0.2432432);\nfloat d8=sdBezier(p,p0,p1,p2);\ncolout= DFB(vec3(0.0), colout, d8);\n\n    return colout;\n}\n\n\nvec3 Gesto02(vec2 p, vec3 colout)\n{\n    \n    \nvec2 A,B, med,pr;\nfloat dfin;\nfloat  r1,ang, he ;\n\nA=vec2(0.5,0.5);\nr1=0.375;\nfloat d1=sdCircle(p-A,r1);\ncolout= DFB(vec3(1.0,0.5,0.0), colout, d1);\n\nA=vec2(0.3310811,0.4493243);\nr1=0.05405406;\nfloat d2=sdCircle(p-A,r1);\ncolout= DFB(vec3(0.0), colout, d2);\n\nA=vec2(0.6587838,0.4493243);\nr1=0.05405406;\nfloat d3=sdCircle(p-A,r1);\ncolout= DFB(vec3(0.0), colout, d3);\n\nvec2 p0=vec2(0.402027,0.4898649);\nvec2 p1=vec2(0.3243243,0.5405405);\nvec2 p2=vec2(0.2567568,0.5641892);\nfloat d4=sdBezier(p,p0,p1,p2);\ncolout= DFB(vec3(0.0), colout, d4);\n\n p0=vec2(0.5810811,0.4864865);\n p1=vec2(0.652027,0.5405405);\n p2=vec2(0.7263514,0.5574324);\nfloat d5=sdBezier(p,p0,p1,p2);\ncolout= DFB(vec3(0.0), colout, d5);\n\n p0=vec2(0.3513514,0.2635135);\n p1=vec2(0.4966216,0.3243243);\n p2=vec2(0.6047297,0.2702703);\nfloat d6=sdBezier(p,p0,p1,p2);\ncolout= DFB(vec3(0.0), colout, d6);\n    \n    return colout;\n}\n\n\n\nvec3 Gesto03(vec2 p, vec3 colout)\n{\n\n    \nvec2 A,B, med,pr;\nfloat dfin;\nfloat  r1,ang, he ;\n\nA=vec2(0.5,0.5);\nr1=0.375;\nfloat d1=sdCircle(p-A,r1);\ncolout= DFB(vec3(1.0,0.5,0.0), colout, d1);\n\nA=vec2(0.3141892,0.5574324);\nr1=0.05405406;\nfloat d2=sdCircle(p-A,r1);\ncolout= DFB(vec3(0.0), colout, d2);\n\nA=vec2(0.6722973,0.5574324);\nr1=0.05405406;\nfloat d3=sdCircle(p-A,r1);\ncolout= DFB(vec3(0.0), colout, d3);\n\nA=vec2(0.6790541,0.5743243);\nr1=0.02027027;\nfloat d4=sdCircle(p-A,r1);\ncolout= DFB(vec3(1.0), colout, d4);\n\nA=vec2(0.3243243,0.5777027);\nr1=0.02027027;\nfloat d5=sdCircle(p-A,r1);\ncolout= DFB(vec3(1.0), colout, d5);\n\nA=vec2(0.5135135,0.3581081);\nr1=0.07094595;\nfloat d6=sdCircle(p-A,r1);\ncolout= DFB(vec3(0.0), colout, d6);\n\nvec2 p0=vec2(0.2195946,0.6283784);\nvec2 p1=vec2(0.2668919,0.6959459);\nvec2 p2=vec2(0.3445946,0.7195946);\nfloat d7=sdBezier(p,p0,p1,p2);\ncolout= DFB(vec3(0.0), colout, d7);\n\n p0=vec2(0.777027,0.6114865);\n p1=vec2(0.7027027,0.7060811);\n p2=vec2(0.6283784,0.7263514);\nfloat d8=sdBezier(p,p0,p1,p2);\ncolout= DFB(vec3(0.0), colout, d8);\n    return colout;\n\n}\n\n\n\nvec3 Gesto04(vec2 p,vec3 colout )\n{\n\n    \nvec2 A,B, med,pr;\nfloat dfin;\nfloat  r1,ang, he ;\n\nA=vec2(0.4966216,0.5067568);\nr1=0.375;\nfloat d1=sdCircle(p-A,r1);\ncolout= DFB(vec3(1.0,0.5,0.0), colout, d1);\n\nA=vec2(0.3513514,0.6452703);\nmed=vec2(0.04054054,0.06756756);\nfloat d2=sdEllipse(p-A,med);\ncolout= DFB(vec3(0.0), colout, d2);\n\nA=vec2(0.6148649,0.6385135);\nmed=vec2(0.04054054,0.06756756);\nfloat d3=sdEllipse(p-A,med);\ncolout= DFB(vec3(0.0), colout, d3);\n\n\nA=vec2(0.3547297,0.6858108);\nr1=0.01689189;\nfloat d4=sdCircle(p-A,r1);\ncolout= DFB(vec3(1.0), colout, d4);\n\nA=vec2(0.6148649,0.6756757);\nr1=0.01689189;\nfloat d5=sdCircle(p-A,r1);\ncolout= DFB(vec3(1.0), colout, d5);\n\n\nA=vec2(0.5,0.3175676);\nmed=vec2(0.2094595,0.1283784);\nfloat d6=sdEllipse(p-A,med);\n\n\nA=vec2(0.4898649,0.402027);\nmed=vec2(0.2905405,0.08108108);\nfloat d7=sdEllipse(p-A,med);\n\n\nd6=Sdf_D(d6,d7);\ncolout= DFB(vec3(0.0), colout, d6);\n\n\n//dientes\nA=vec2(0.4898649,0.3682432);\nmed=vec2(0.2533784,0.08108108);\nfloat d8=sdEllipse(p-A,med);\nd8=Sdf_I(d6,d8);\ncolout= DFB(vec3(1.0), colout, d8);\n\n//lengua\nA=vec2(0.4898649,0.2162162);\nmed=vec2(0.08108108,0.06418919);\nfloat d9=sdEllipse(p-A,med);\n\n\nA=vec2(0.4898649,0.277027);\nmed=vec2(0.1486486,0.07432432);\nfloat d10=sdEllipse(p-A,med);\n\nd10=Sdf_I(d9,d10);\ncolout= DFB(vec3(1.0), colout, d10);\n\n    return colout;\n}\n\n\n\n\nvec3 Gesto05(vec2 p,vec3 colout )\n{    \n\nvec2 A,B, med,pr;\nfloat dfin;\nfloat  r1,ang, he ;\n\nA=vec2(0.4966216,0.5067568);\nr1=0.3682432;\nfloat d1=sdCircle(p-A,r1);\ncolout= DFB(vec3(1.0,0.5,0.0), colout, d1);\n\nA=vec2(0.3175676,0.5033784);\nr1=0.06418919;\nfloat d2=sdCircle(p-A,r1);\ncolout= DFB(vec3(0.0), colout, d2);\n\nA=vec2(0.6858108,0.4898649);\nr1=0.06418919;\nfloat d3=sdCircle(p-A,r1);\ncolout= DFB(vec3(0.0), colout, d3);\n\nA=vec2(0.3175676,0.5033784);\nr1=0.03040541;\nfloat d4=sdCircle(p-A,r1);\ncolout= DFB(vec3(1.0), colout, d4);\n\nA=vec2(0.6790541,0.4966216);\nr1=0.03040541;\nfloat d5=sdCircle(p-A,r1);\ncolout= DFB(vec3(1.0), colout, d5);\n\nvec2 p0=vec2(0.2162162,0.6013514);\nvec2 p1=vec2(0.2939189,0.6216216);\nvec2 p2=vec2(0.3412162,0.6824324);\nfloat d6=sdBezier(p,p0,p1,p2);\ncolout= DFB(vec3(0.0), colout, d6);\n\n p0=vec2(0.7871622,0.6114865);\n p1=vec2(0.6891892,0.6216216);\n p2=vec2(0.6081081,0.6891892);\nfloat d7=sdBezier(p,p0,p1,p2);\ncolout= DFB(vec3(0.0), colout, d7);\n\n\n//boca\nA=vec2(0.5,0.3344595);\nmed=vec2(0.1182432,0.06418919);\nfloat d8=sdEllipse(p-A,med);\n\n//boca a\nA=vec2(0.4222973,0.3074324);\nmed=vec2(0.05067568,0.06418919);\nang=30.0*PI/180.0;\npr = Rotate(p-A, med/2.0, ang);\nfloat d9=sdEllipse(pr,med);\n\n//boca b\nA=vec2(0.5844595,0.3074324);\nmed=vec2(0.05067568,0.06418919);\nang=-30.0*PI/180.0;\npr = Rotate(p-A, med/2.0, ang);\nfloat d10=sdEllipse(pr,med);\n\n\nfloat dboca=min(d8,d9);\ndboca=min(dboca,d10);\n\nA=vec2(0.4966216,0.2398649);\nmed=vec2(0.0777027,0.06418919);\nfloat d11=sdEllipse(p-A,med);\n\ndboca=Sdf_D(dboca,d11);\ncolout= DFB(vec3(0.0), colout, dboca);\n\n    return colout;\n}\n\n\n\nvec3 Gesto06(vec2 p,vec3 colout )\n{\n    \nvec2 A,B, med,pr;\nfloat dfin;\nfloat  r1,ang, he ;\n\nA=vec2(0.5,0.5033784);\nr1=0.3783784;\nfloat d1=sdCircle(p-A,r1);\ncolout= DFB(vec3(1.0,0.5,0.0), colout, d1);\n\nvec2 p0=vec2(0.2635135,0.5912162);\nvec2 p1=vec2(0.347973,0.4425676);\nvec2 p2=vec2(0.3986486,0.6047297);\nfloat d2=sdBezier(p,p0,p1,p2);\ncolout= DFB(vec3(0.0), colout, d2);\n\n p0=vec2(0.625,0.6013514);\n p1=vec2(0.6756757,0.4358108);\n p2=vec2(0.7398649,0.6047297);\nfloat d3=sdBezier(p,p0,p1,p2);\ncolout= DFB(vec3(0.0), colout, d3);\n\n p0=vec2(0.2702703,0.6655405);\n p1=vec2(0.3141892,0.7432432);\n p2=vec2(0.3817568,0.6824324);\nfloat d4=sdBezier(p,p0,p1,p2);\ncolout= DFB(vec3(0.0), colout, d4);\n\n p0=vec2(0.625,0.6722973);\n p1=vec2(0.6925676,0.7398649);\n p2=vec2(0.7432432,0.6790541);\nfloat d5=sdBezier(p,p0,p1,p2);\ncolout= DFB(vec3(0.0), colout, d5);\n\n p0=vec2(0.3918919,0.3716216);\n p1=vec2(0.4797297,0.2398649);\n p2=vec2(0.6148649,0.347973);\nfloat d6=sdBezier(p,p0,p1,p2);\ncolout= DFB(vec3(0.0), colout, d6);\n    return colout;\n}\n\n\n\nvec3 hash32(vec2 p) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n    vec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\n\n\n// Function to generate a random number based on tile position\nfloat random(vec2 st) {\n    return fract(sin(dot(st.xy, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\n\n// Definición de los 6 tiles (suponiendo que cada tile tiene un valor único de 0 a 5)\nint numTiles = 6;\n\n\n// Función para seleccionar un tile aleatorio\nint selectRandomTile(vec2 st)\n{\n    float randVal = random(st); // Genera un valor aleatorio entre 0.0 y 1.0\n    int tileIndex = int(randVal * float(numTiles)); // Convierte a índice entero entre 0 y 5\n    return tileIndex;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    vec2 uv = ( 2. * fragCoord - iResolution.xy ) / iResolution.y;\n    uv-=vec2(0.0,-0.5);\n    float esc=2.0;\n    uv*=esc;\n    uv += iTime * 0.5;\n    vec2 uv0=uv;\n    vec3 col=vec3(1.0);\n   \n   vec2 rep=uv*0.5+vec2(-0.25,0.25);\n   \n \n    vec2 pos;\n     vec2 tile = floor(uv);\n    pos = fract(uv) - 0.5;\n    \n   \n     int tileIndex = selectRandomTile(tile);\n\n     if (tileIndex == 0) {\n         col = Gesto01(pos + vec2(0.5, 0.5), col);\n     } else if (tileIndex == 1) {\n         col = Gesto02(pos + vec2(0.5, 0.5), col);\n         \n     } else if (tileIndex == 2) {         \n         col = Gesto03(pos + vec2(0.5, 0.5), col);\n\n     } else if (tileIndex == 3) {      \n         col = Gesto04(pos + vec2(0.5, 0.5), col);\n\n     } else if (tileIndex == 4) {\n         col = Gesto05(pos + vec2(0.5, 0.5), col);\n         \n     } else if (tileIndex == 5) {\n         col = Gesto06(pos + vec2(0.5, 0.5), col);\n         \n    \n     }\n   \n    \n    col=pow(col,  vec3(0.554545));\n    \n    \n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//iq\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat dot2( in vec3 v ) { return dot(v,v); }\nfloat ndot( in vec2 a, in vec2 b ) { return a.x*b.x - a.y*b.y; }\n\n\n\nfloat sdEllipse( in vec2 p, in vec2 ab )\n{\n    p = abs(p); if( p.x > p.y ) {p=p.yx;ab=ab.yx;}\n    float l = ab.y*ab.y - ab.x*ab.x;\n    float m = ab.x*p.x/l;      float m2 = m*m; \n    float n = ab.y*p.y/l;      float n2 = n*n; \n    float c = (m2+n2-1.0)/3.0; float c3 = c*c*c;\n    float q = c3 + m2*n2*2.0;\n    float d = c3 + m2*n2;\n    float g = m + m*n2;\n    float co;\n    if( d<0.0 )\n    {\n        float h = acos(q/c3)/3.0;\n        float s = cos(h);\n        float t = sin(h)*sqrt(3.0);\n        float rx = sqrt( -c*(s + t + 2.0) + m2 );\n        float ry = sqrt( -c*(s - t + 2.0) + m2 );\n        co = (ry+sign(l)*rx+abs(g)/(rx*ry)- m)/2.0;\n    }\n    else\n    {\n        float h = 2.0*m*n*sqrt( d );\n        float s = sign(q+h)*pow(abs(q+h), 1.0/3.0);\n        float u = sign(q-h)*pow(abs(q-h), 1.0/3.0);\n        float rx = -s - u - c*4.0 + 2.0*m2;\n        float ry = (s - u)*sqrt(3.0);\n        float rm = sqrt( rx*rx + ry*ry );\n        co = (ry/sqrt(rm-rx)+2.0*g/rm-m)/2.0;\n    }\n    vec2 r = ab * vec2(co, sqrt(1.0-co*co));\n    return length(r-p) * sign(p.y-r.y);\n}\n\n\n\n\n\n//Quadratic Bezier - exact   (https://www.shadertoy.com/view/MlKcDD)\n\nfloat sdBezier( in vec2 pos, in vec2 A, in vec2 B, in vec2 C )\n{    \n    vec2 a = B - A;\n    vec2 b = A - 2.0*B + C;\n    vec2 c = a * 2.0;\n    vec2 d = A - pos;\n    float kk = 1.0/dot(b,b);\n    float kx = kk * dot(a,b);\n    float ky = kk * (2.0*dot(a,a)+dot(d,b)) / 3.0;\n    float kz = kk * dot(d,a);      \n    float res = 0.0;\n    float p = ky - kx*kx;\n    float p3 = p*p*p;\n    float q = kx*(2.0*kx*kx-3.0*ky) + kz;\n    float h = q*q + 4.0*p3;\n    if( h >= 0.0) \n    { \n        h = sqrt(h);\n        vec2 x = (vec2(h,-h)-q)/2.0;\n        vec2 uv = sign(x)*pow(abs(x), vec2(1.0/3.0));\n        float t = clamp( uv.x+uv.y-kx, 0.0, 1.0 );\n        res = dot2(d + (c + b*t)*t);\n    }\n    else\n    {\n        float z = sqrt(-p);\n        float v = acos( q/(p*z*2.0) ) / 3.0;\n        float m = cos(v);\n        float n = sin(v)*1.732050808;\n        vec3  t = clamp(vec3(m+m,-n-m,n-m)*z-kx,0.0,1.0);\n        res = min( dot2(d+(c+b*t.x)*t.x),\n                   dot2(d+(c+b*t.y)*t.y) );\n        // the third root cannot be the closest\n        // res = min(res,dot2(d+(c+b*t.z)*t.z));\n    }\n    return sqrt( res );\n}\n\n\n\n// psuedo random noise foundation\nfloat randNoise(vec2 uv)\n{\n    // feel free to change these parameters, \n    // had them low for more floating point accuracy\n    return fract(sin(uv.x*63.+uv.y*59.+16.)*32672.93);\n}\n","name":"Common","description":"","type":"common"}]}