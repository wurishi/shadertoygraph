{"ver":"0.1","info":{"id":"4tjcD1","date":"1519532201","viewed":1258,"name":"Hyperbola tonemapping","username":"ishiyama","description":"A Tonemapping function composed of a linear function (y=ax+b) and rectangular hyperbola functions (y=-a/(x+b)+c).\n\nMove each point to change the shape of the curve.\nIf the curve has singularities, the color turns red.","likes":15,"published":1,"flags":0,"usePreview":0,"tags":["tonemapping","tonemap"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright (c) 2018 ishiyama\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// This is a demonstration of the tonemapping function created by http://technorgb.blogspot.jp/2018/02/hyperbola-tone-mapping.html\n\n/*\n\tTonemap(x) = {Toe(x), Mid(x), Shoulder(x)}\n\t\tToe(x) = - mToe.x / (x + mToe.y) + mToe.z\n\t\tMid(x) = mMid.x * x + mMid.y\n\t\tShoulder(x) = - mShoulder.x / (x + mShoulder.y) + mShoulder.z\n\n\tBoundary points\n\t\tToe\t\t\t: (0,0) - (mBx.x, mBy.x)\n\t\tMid\t\t\t: (mBx.x, mBy.x) - (mBx.y, mBy.y)\n\t\tShoulder\t: (mBx.y, mBy.y) - (Point given to PrepareTonemapParams (..))\n*/\nstruct TonemapParams\n{\n\tvec3 mToe;\n\tvec2 mMid;\n\tvec3 mShoulder;\n\tvec2 mBx;\n\tvec2 mBy;\t// only used for InvTonemap\n};\n\n// Do tonemapping on x\nvec3 Tonemap(const TonemapParams tc, vec3 x)\n{\n\tvec3 toe = - tc.mToe.x / (x + tc.mToe.y) + tc.mToe.z;\n\tvec3 mid = tc.mMid.x * x + tc.mMid.y;\n\tvec3 shoulder = - tc.mShoulder.x / (x + tc.mShoulder.y) + tc.mShoulder.z;\n\n\tvec3 result = mix(toe, mid, step(tc.mBx.x, x));\n\tresult = mix(result, shoulder, step(tc.mBx.y, x));\n\treturn result;\n}\n\n// Do inverse tonemapping on x\nvec3 InvTonemap(const TonemapParams tc, vec3 y)\n{\n\tvec3 inv_toe = - tc.mToe.x / (y - tc.mToe.z) - tc.mToe.y;\n\tvec3 inv_mid = (y - tc.mMid.y) / tc.mMid.x;\n\tvec3 inv_shoulder = - tc.mShoulder.x / (y - tc.mShoulder.z) - tc.mShoulder.y;\n\n\tvec3 result = mix(inv_toe, inv_mid, step(tc.mBy.x, y));\n\tresult = mix(result, inv_shoulder, step(tc.mBy.y, y));\n\treturn result;\n}\n\n// Check if the tonemapping function has any singularities\nbool HasSingularity(const vec2 p1, const vec2 p2, const vec2 p3, const TonemapParams tc)\n{\n\tvec2 pointAtInfinity = vec2(1e6, 1e6);\n\n\tbool hasSingularity = false;\n\tif (p1.x < 0.0 || p1.y < 0.0) { hasSingularity = true; }\n\tif (p2.x < p1.x || p2.y < p1.y) { hasSingularity = true; }\n\tif (p3.x < p2.x || p3.y < p2.y) { hasSingularity = true; }\n\t\n    // toe -> mid\n\tif (0.0 < -tc.mToe.y && -tc.mToe.y <= p1.x) { hasSingularity = true; }\n\t\n    // mid -> shoulder\n\tif (p2.x < -tc.mShoulder.y && -tc.mShoulder.y <= p3.x) { hasSingularity = true; }\n\t\n    // shoulder -> infinity\n\tif (p3.x < -tc.mShoulder.y && -tc.mShoulder.y <= pointAtInfinity.x) { hasSingularity = true; }\n\t\n    return hasSingularity;\n}\n\n/*\n\tPrecompute the coefficients of the tonemapping function\n\n\tp1: a point connecting toe and mid\n\tp2: a point connecting mid and shoulder\n\tp3: point controlling the termination of shoulder\n\n\tEach functions are connected with the Cauchy boundary condition at the boundary points.\n*/\nvoid PrepareTonemapParams(vec2 p1, vec2 p2, vec2 p3, out TonemapParams tc)\n{\n\tfloat denom = p2.x - p1.x;\n\tdenom = abs(denom) > 1e-5 ? denom : 1e-5;\n\tfloat slope = (p2.y - p1.y) / denom;\n\n\t{\n\t\ttc.mMid.x = slope;\n\t\ttc.mMid.y = p1.y - slope * p1.x;\n\t}\n\n\t{\n\t\tfloat denom = p1.y - slope * p1.x;\n\t\tdenom = abs(denom) > 1e-5 ? denom : 1e-5;\n\t\ttc.mToe.x = slope * p1.x * p1.x * p1.y * p1.y / (denom * denom);\n\t\ttc.mToe.y = slope * p1.x * p1.x / denom;\n\t\ttc.mToe.z = p1.y * p1.y / denom;\n\t}\n\n\t{\n\t\tfloat denom = slope * (p2.x - p3.x) - p2.y + p3.y;\n\t\tdenom = abs(denom) > 1e-5 ? denom : 1e-5;\n\t\ttc.mShoulder.x = slope * pow(p2.x - p3.x, 2.0) * pow(p2.y - p3.y, 2.0) / (denom * denom);\n\t\ttc.mShoulder.y = (slope * p2.x * (p3.x - p2.x) + p3.x * (p2.y - p3.y) ) / denom;\n\t\ttc.mShoulder.z = (-p2.y * p2.y + p3.y * (slope * (p2.x - p3.x) + p2.y) ) / denom;\n\t}\n\n    tc.mBx = vec2(p1.x, p2.x);\n\ttc.mBy = vec2(p1.y, p2.y);\n}\n\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec2 uv = fragCoord.xy / iResolution.yy;\n\n\tconst float graph_scale = 0.8;\n\tconst float graph_region = 0.1;\n\tvec2 uv0 = uv - vec2(0.0, graph_region);\n\tuv0 /= graph_scale;\n\tfloat p = uv0.y / fragCoord.y;\n\tvec4 m = iMouse / (iResolution.yyyy * graph_scale);\n\tm.yw -= graph_region;\n\n\tvec2 p1\t= vec2(0.10, 0.05);\n\tvec2 p2\t= vec2(0.50, 0.55);\n\tvec2 p3 = vec2(2.00, 1.00);\n\tif (m.z > 0.0)\n\t{\n\t\tif (length(m.zw - p1) < 0.08) { p1 = m.xy; }\n\t\tif (length(m.zw - p2) < 0.08) { p2 = m.xy; }\n\t\tif (length(m.zw - p3) < 0.08) { p3 = m.xy; }\n\t}\n\n\tTonemapParams tc;\n\tPrepareTonemapParams(p1, p2, p3, tc);\n\n\tvec3 func_color = vec3(0.1, 0.4, 1.2);\n\tfunc_color = HasSingularity(p1, p2, p3, tc) ? vec3(1.0, 0.0, 0.0) : func_color;\n\tvec3 color = vec3(0.0);\n\n\t// Draw a image\n\t{\n\t\tvec2 localFragCoord\t= fragCoord.xy - vec2(0.45, 0.1) * iResolution.xy;\n\t\tvec2 localResolution= vec2(0.55) * iResolution.xy;\n\t\tvec2 localUV = localFragCoord / localResolution;\n\n\t\tcolor = texture(iChannel0, localUV).xyz;\n        color = pow(color, vec3(2.2));\n\t\tcolor = Tonemap(tc, color);\n\t\tcolor *= step(0.0, localUV.x) * step(localUV.x, 1.0);\n\t\tcolor *= step(0.0, localUV.y) * step(localUV.y, 1.0);\n\t}\n\n\t// Plot the tonemapping function\n\t{\n        // horizontal, vertical axis\n\t\tconst vec3 axis_color = vec3(1.0, 1.0, 1.0);\n\t\tcolor = mix(color, axis_color, 1.0 - smoothstep(0.0, 3.0 * p, abs(uv0.y - 1.0)));\n\t\tcolor = mix(color, axis_color, 1.0 - smoothstep(0.0, 3.0 * p, abs(uv0.x - 1.0)));\n\n\t\tfloat y;\n\n        // tonemap\n       \ty = Tonemap(tc, uv0.xxx).x;\n\t\tcolor = mix(color, func_color, 1.0 - smoothstep(0.0, 5.0 * p, abs(uv0.y - y)));\n\n        // inverse tonemap\n\t\ty = InvTonemap(tc, uv0.xxx).x;\n\t\tcolor = mix(color, func_color * 0.2, 1.0 - smoothstep(0.0, 5.0 * p, abs(uv0.y - y)));\n\n        // Make sure that the inverse function of the tonemapping works correctly\n\t\ty = InvTonemap(tc, Tonemap(tc, uv0.xxx)).x;\n\t\tcolor = mix(color, func_color * 0.2, 1.0 - smoothstep(0.0, 5.0 * p, abs(uv0.y - y)));\n\n        // Boundary points\n\t\tcolor = mix( color, func_color, 1.0-smoothstep(0.03,0.035, length(uv0-p1)) );\n\t\tcolor = mix( color, func_color, 1.0-smoothstep(0.03,0.035, length(uv0-p2)) );\n\t\tcolor = mix( color, func_color, 1.0-smoothstep(0.03,0.035, length(uv0-p3)) );\n    }\n\t\n\t// Draw gradient\n\t{\n\t\tcolor = uv.y < 0.1 ? vec3(Tonemap(tc, vec3(uv0.xxx))) : color;\n\t\tcolor = uv.y < 0.05 ? vec3(uv0.xxx) : color;\n\t}\n\t\n\tcolor = pow(color, vec3(1.0/2.2));\n\tfragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}