{"ver":"0.1","info":{"id":"4clBzn","date":"1723310845","viewed":48,"name":"{Sacred Geometry}","username":"inverse_transpose","description":"Just some pretty patterns made up from circles.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["circles"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 rot(in float t) { float c = cos(t); float s = sin(t); return mat2(c, -s, s, c); }\n#define TAU 6.28318530717\n#define PI_OVER_4 0.78539816\n#define WIDTH .005\n\nfloat circle(vec2 p, float r, float w)\n{\n    float d = length(p),\n         dd = fwidth(d);\n    return smoothstep( dd, -dd, abs(d-r) - .5*w );\n}\n\nfloat disk(vec2 p, in vec2 c, in float r)\n{\n    float d = distance(p,c);\n    float dd = fwidth(d);\n    return smoothstep(d, -d, (d - r) / dd);\n}\n\nvec3 render(in vec2 U, in vec3 col)\n{\n    float r = .5;\n    const float K = TAU / 4.;\n\n    vec2 A = U-vec2(r, 0);\n    vec2 B = U+rot(-PI_OVER_4)*vec2(-.5,0);\n    vec2 C = U+vec2(0, -r);\n    vec2 D = U+rot(PI_OVER_4)*vec2(.5,0);\n    vec2 E = U+rot(3.*K)*vec2(0,-r);\n    vec2 F = U+rot(-PI_OVER_4)*vec2( .5,0);\n    vec2 G = U+vec2(0,  r);\n    vec2 H = U+rot( PI_OVER_4)*vec2(-.5,0);\n    \n#define COL vec3(.15,.39,.35)\n\n    if (length(A)<r && length(B)<r && length(C)<r && length(D)<r)\n        col = COL;\n    else\n    if (length(B)<r && length(C)<r && length(D)<r && length(E)<r)\n        col = COL;\n    else\n    if (length(C)<r && length(D)<r && length(E)<r && length(F)<r)\n        col = COL;\n    else\n    if (length(D)<r && length(E)<r && length(F)<r && length(G)<r)\n        col = COL;\n    else\n    if (length(E)<r && length(F)<r && length(G)<r && length(H)<r)\n        col = COL;\n    else\n    if (length(F)<r && length(G)<r && length(H)<r && length(A)<r)\n        col = COL;\n    else\n    if (length(G)<r && length(H)<r && length(A)<r && length(B)<r)\n        col = COL;\n    else\n    if (length(H)<r && length(A)<r && length(B)<r && length(C)<r)\n        col = COL;\n        \n#define LINE_COL vec3(.7,1,.9)*.75\n    float e = r+0.0001;\n    col = mix(col, LINE_COL, circle(U, e, WIDTH));\n    col = mix(col, LINE_COL, circle(A, e, WIDTH));\n    col = mix(col, LINE_COL, circle(B, e, WIDTH));\n    col = mix(col, LINE_COL, circle(C, e, WIDTH));\n    col = mix(col, LINE_COL, circle(D, e, WIDTH));\n    col = mix(col, LINE_COL, circle(E, e, WIDTH));\n    col = mix(col, LINE_COL, circle(F, e, WIDTH));\n    col = mix(col, LINE_COL, circle(G, e, WIDTH));\n    col = mix(col, LINE_COL, circle(H, e, WIDTH));\n\n    col = mix(col, vec3(.07,.135,.12), disk(U, vec2(0), .055));\n    col = mix(col, LINE_COL, circle(U, .055, WIDTH));\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 Fr )\n{\n    vec2 R = iResolution.xy,\n         U = (2. * Fr - R.xy) / R.y;\n\n    vec2 p0 = U*1.125;\n    vec2 p1 = U*4.5;\n    \n    p0 = 2.*fract(p0)-1.;\n    p1 = fract(p1)-.5;\n\n    vec3 col = vec3(.1,.2,.15);\n    col = render(p0, col);\n    col = mix(col, render(p1, COL), .3);\n\n    fragColor = vec4(sqrt(col),1.0);\n}","name":"Image","description":"","type":"image"}]}