{"ver":"0.1","info":{"id":"ssBXDc","date":"1621507476","viewed":128,"name":"Metaballs retro","username":"Sfora","description":"some retro demoscene effect","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["retro","metaballs","learning"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\n\nvec3 kolko(vec2 centrum, vec2 uv){\n\nfloat od = distance(uv, centrum );\nfloat kolko = smoothstep(0.385,0.1,od); //wielkość kulki i kosmatość, zależy od wielkości smootha\nreturn vec3(0.,pow(kolko,4.),kolko); //This place!!!!!\n                                       \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\nvec2 uv = fragCoord.xy / iResolution.xy;\nuv=uv-vec2(0.5,0.5);\nuv.x = uv.x*iResolution.x/iResolution.y; \nvec2 kulki[5];\nkulki[0] = vec2(0.02,0.15);\nkulki[1] = vec2(0.08,0.07);\nkulki[2] = vec2(0.15,-0.1);\nkulki[3] = vec2(-0.15,-0.15);\nkulki[4] = vec2(-0.07,-0.17);\nvec3 kulkiw[5];\nvec3 color;\n\nfor (int i=0;i<5;i++){\nfloat a=float(i);//Pamiętać o komentowaniu kodu :)\nfloat b = mod(a,3.)*sin(iTime*a)*0.08;//zakres odlatywania\n//jak te cholerne kulki odróżnić\nkulkiw[i] = kolko(kulki[i],uv);\nif (mod(a,2.)==0.){\nkulkiw[i] = kolko(vec2(kulki[i].x+0.45*cos(iTime)+b,kulki[i]+0.25*sin(iTime)+b),uv);}//te trasy są też ciekawe, pamiętać żeby dokładnie zrozumieć czemu :)\nif (mod(a,3.)==0.){\nkulkiw[i] = kolko(vec2(kulki[i].x+0.25*cos(iTime)+b,kulki[i]+0.75*sin(iTime)+b),uv);}\ncolor = color+kulkiw[i];\n};\n\nfragColor = vec4(color, 0.3);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","name":"Image","description":"","type":"image"}]}