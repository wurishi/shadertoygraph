{"ver":"0.1","info":{"id":"3djBzK","date":"1590412051","viewed":137,"name":"twisty stars","username":"HaleyHalcyon","description":"spiral","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["spiral"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.14159265;\nconst float PI_2 = PI / 2.;\n\nfloat fold(float x) {\n    return abs(mod(x, 2.0) - 1.0);\n}\n\nfloat foldPlus(float x) {\n    return log(1.0 + fold(x));\n}\n\nfloat smoothThres(float x, float strength) {\n    return smoothstep(0.5 - strength, 0.5 + strength, x);\n}\n\nfloat smoothFold(float x, float strength) {\n    return smoothThres(fold(x), strength);\n}\n\nvec3 colMap(float x, vec3 a, vec3 b) {\n    return a * (1.0 - x) + b * x;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t = fract(iTime * 64. / 60.);\n    \n    // Normalized pixel coordinates\n    float scale = min(iResolution.x, iResolution.y);\n    vec2 uv = fragCoord / scale;\n\tuv -= iResolution.xy / scale / 2.;\n    uv *= 2.;\n    float dist = log(uv.x*uv.x+uv.y*uv.y); // not real distance, but useful for log spirals\n    float angle = atan(uv.y, uv.x) / PI;\n    \n    //angle -= t * 1. / 5.;\n    \n    float twistiness = 0.5 * (fold(t * 2.) - 0.5);\n    twistiness += cos(t * 2. * PI) * 0.2;\n    \n    float value = foldPlus(angle * 5. + (dist - 1.) * twistiness);\n    \n    value = smoothFold(value * 1.5 + dist * 1. + t * 02.0, 0.05);\n    \n    vec3 colA0 = vec3(1.0, 0.3, 0.8);\n    vec3 colA1 = vec3(0.2, 0.4, 0.7);\n    vec3 colB0 = vec3(0.6, 0.2, 0.4);\n    vec3 colB1 = vec3(0.4, 0.8, 1.0);\n    vec3 colA = colMap(value, colA0, colA1);\n    vec3 colB = colMap(value, colB0, colB1);\n    \n    vec3 col = colMap(smoothFold((angle * 5. + 0.5) + (dist - 1.) * twistiness, 0.02),\n                     colA, colB);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}