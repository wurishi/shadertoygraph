{"ver":"0.1","info":{"id":"mslXWM","date":"1669046379","viewed":579,"name":"drain vortex marching-less -golf","username":"FabriceNeyret2","description":"Hey, I  never golfed that guy ! :-p\ngolfing 1439 chars [url]https://shadertoy.com/view/ws23D3[/url]\nsimplifying 2586 chars skaplun's [url]https://www.shadertoy.com/view/3s2GW3[/url]","likes":45,"published":3,"flags":0,"usePreview":0,"tags":["cubic","polynomial","tuto","solve","degree3"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4sfGRr","filepath":"/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","previewfilepath":"/media/ap/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","type":"volume","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// golfing 1439 chars https://shadertoy.com/view/ws23D3\n// inspired by 2586 chars skaplun's https://www.shadertoy.com/view/3s2GW3 , but with analytical ray-intersection instead of marching.\n\n#define N          normalize\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2  R = iResolution.xy,\n          U = u+u - R;\n    vec3  P = vec3(0, 6, 3.2),\n          D = N( vec3(0,1,0) - P ), f;\n      //  f = N(vec3(D.y,0,9));    // right\n      //  D = N( D*3.5*R.y + U.x*f + U.y*cross(f,D) );\n          D = N( D*3.5*R.y - U.xyy*vec3(1,-D.z,D.y) );\n    float t = iTime,\n          l = dot(R=D.xy,R),\n          L = 36.,     // dot(P.xy,P.xy),\n          o = 12.*D.y, // dot(P.xy,D.xy)*2.,\n          b = ( P/D + o/l ).z /3., \n          c = ( L +o*P/D ).z /l, \n          p = b*b - c/3.,\n          s = sqrt(abs(p)),\n          q = b*c - ( L*P.z + 1. ) /l/D.z - 2.*b*b*b; // -\n         \n    if ( q*q/4. < p*p*p )                     // --- if 3 sol\n        l = acos(q/2./s/s/s), \n        l = 2.*s* cos((l+round(1.5-l/6.283)*6.283)/3.);  // sol(k)\n    else                                      // --- if 1 sol\n        l = s+s,\n        L = abs(q/p/l), q = sign(q),\n        l *= p < 0. ? sinh(q*asinh(L)/3.) // - sinh(asinh(-q/p/-l)/3.) , fix asinh() symetry error \n                    : q*cosh(acosh(L)/3.);\n    l -= b;\n    O *= 0.;\n    if ( l > 0. )\n        P += l*D,\n        P.xy *= mat2(cos( (length(P.xy) + P.z) /2. -t/2. + vec4(0,33,11,0))), // rot(time/2.), twist(P, -.25);\n        P = vec3( length(P.xy)*4. + t+t , atan(P.y,P.x) * 25. , t * .05 ),\n        f = fract(P), P -= f,\n        f = f*f*(3.-f-f),                      \n     // U = textureLod( iChannel0, ((P.xy+vec2(37,17)*P.z) + f.xy+.5)/256., 0. ).yx, // old fashion t3D emulation\n     // c =  mix( U.x, U.y, f.z ) -.3 ,                   //  noise( P );\n        c =  texture( iChannel1, (P+f+.5)/32. ).x -.3,\n        O += smoothstep(.75, -.75, c/fwidth(c) );\n}","name":"Image","description":"","type":"image"}]}