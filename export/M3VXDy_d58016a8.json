{"ver":"0.1","info":{"id":"M3VXDy","date":"1720467905","viewed":63,"name":"The fork","username":"ODtian","description":"null","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float dot2(vec2 x) {\n    return dot(x, x);\n}\n\nfloat sdUnevenCapsule(vec2 p, float r1, float r2, float h) {\n    p.x = abs(p.x);\n    float b = (r1-r2)/h;\n    float a = sqrt(1.0-b*b);\n    float k = dot(p,vec2(-b,a));\n    if(k < 0.0) return length(p) - r1;\n    if(k > a*h) return length(p-vec2(0.0,h)) - r2;\n    return dot(p, vec2(a,b)) - r1;\n}\n\nfloat sdTunnel(in vec2 p, in vec2 wh) {\n    p.x = abs(p.x); p.y = -p.y;\n    vec2 q = p - wh;\n    \n    float d1 = dot2(vec2(max(q.x,0.0),q.y));\n    q.x = (p.y>0.0) ? q.x : length(p)-wh.x;\n    float d2 = dot2(vec2(q.x,max(q.y,0.0)));\n    float d = sqrt(min(d1,d2));\n    \n    return (max(q.x,q.y)<0.0) ? -d : d;\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat opUni(float a, float b) {\n    return min(a, b);\n}\n\nfloat opInter(float a, float b) {\n    return max(a, b);\n}\n\nfloat opSub(float a, float b) {\n    return max(a, -b);\n}\n\n\nfloat time() {\n    return iTime * 0.14;\n}\n\nfloat map(vec2 pos) {\n    float scene = sdUnevenCapsule(pos - vec2(0.0, -1.0), 0.07, 0.07, 0.8);\n    scene = opUni(scene, sdTunnel(pos * vec2(1.0, -1.0) + vec2(0.0, -0.2), vec2(0.2, 0.2)));\n    scene = opSub(scene, sdUnevenCapsule((pos - vec2(-0.14, -0.2)) * 3.0, 0.1, 0.12, 1.0));\n    scene = opSub(scene, sdUnevenCapsule((pos - vec2(-0.045, -0.28)) * 3.0, 0.1, 0.12, 1.0));\n    scene = opSub(scene, sdUnevenCapsule((pos - vec2(0.045, -0.28)) * 3.0, 0.1, 0.12, 1.0));\n    scene = opSub(scene, sdUnevenCapsule((pos - vec2(0.14, -0.2)) * 3.0, 0.1, 0.12, 1.0));\n\n    scene = opSub(scene, sdBox(pos - vec2(0.0, 0.0), vec2(0.15, 0.1)));\n    \n    return scene;\n}\n\nfloat fracal(vec2 pos) {\n    float res = map(pos);\n    // vec2 p1, p2, p3;\n    float d1, d2, d3;\n    for (int i = 0; i < 32; ++i) {\n        vec2 p1 = pos, p2 = pos, p3 = pos;\n        p1 *= 8.5;\n        d1 = map(p1);\n\n        p2 *= 6.0;\n        p2.x -= 0.56;\n        d2 = map(p2);\n\n        p3 *= 6.0;\n        p3.x += 0.56;\n        d3 = map(p3);\n\n        if (d1 < d2 && d1 < d3) {\n            pos = p1;\n            res = opUni(res, d1);\n            \n        } else if (d2 < d3 && d2 < d1) {\n            pos = p2;\n            res = opUni(res, d2);\n        } else if (d3 < d1 && d3 < d2) {\n            pos = p3;\n            res = opUni(res, d3);\n        } \n    }\n    return res;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    float asp = iResolution.x / iResolution.y;\n    vec2 pos = uv - 0.5;\n    pos.y /= asp;\n    float t = iTime;\n    if (t > 7.0) {\n        t = mod(t - 7.0, 49.0) + 7.0;\n    }\n    fragColor.xyz = vec3(smoothstep(-0.002, 0.002, fracal(pos / exp(t))));\n}","name":"Image","description":"","type":"image"}]}