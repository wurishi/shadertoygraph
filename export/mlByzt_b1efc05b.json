{"ver":"0.1","info":{"id":"mlByzt","date":"1692157570","viewed":233,"name":"Study for Terrain Gen - v4","username":"pdcxs","description":"Previous Version: https://www.shadertoy.com/view/DdBcW3","likes":17,"published":1,"flags":0,"usePreview":0,"tags":["3d","terrain","noised"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define EPSILON 0.001\n#define MAX_DIST 300.\n#define MAX_ITER 128\n\nvec2 fixUV(vec2 uv) {\n    return (2. * uv - iResolution.xy) / iResolution.x;\n}\n\nfloat hash12(vec2 p) {\n    vec2 p2 = 55.1876653 * fract(p * 10.1321513);\n    return fract((p2.x + p2.y) * p2.x * p2.y);\n}\n\nfloat random(vec2 pos) {\n    return hash12(pos);\n}\n\nvec3 noise(vec2 pos) {\n    vec2 i = floor(pos);\n    vec2 f = fract(pos);\n    vec2 u = f * f * (3.0 - 2.0 * f);\n    vec2 du = 6. * u * (1. - u);\n\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    return vec3(a + (b - a) * u.x * (1. - u.y) +\n        (c - a) * (1. - u.x) * u.y +\n        (d - a) * u.x * u.y, du * (vec2(b - a, c - a) +\n        (a - b - c + d) * u.yx));\n}\n\nmat2 mat = mat2(0.6, -0.8, 0.8, 0.6);\n\nfloat ground(vec2 x) {\n    vec2 p = 0.003 * x;\n    float a = 0.;\n    float b = 1.;\n    vec2 d = vec2(0);\n\n    for(int i = 0; i < 8; i++) {\n        vec3 n = noise(p);\n        d += n.yz;\n        a += b * n.x / (1. + dot(d, d));\n        p = mat * p * 2.;\n        b *= 0.5;\n    }\n\n    return 120. * a;\n}\n\nfloat groundH(vec2 x) {\n    vec2 p = 0.003 * x;\n    float a = 0.;\n    float b = 1.;\n    vec2 d = vec2(0);\n\n    for(int i = 0; i < 16; i++) {\n        vec3 n = noise(p);\n        d += n.yz;\n        a += b * n.x / (1. + dot(d, d));\n        p = mat * p * 2.;\n        b *= 0.5;\n    }\n\n    return 120. * a;\n}\n\nfloat groundL(vec2 x) {\n    vec2 p = 0.003 * x;\n    float a = 0.;\n    float b = 1.;\n    vec2 d = vec2(0);\n\n    for(int i = 0; i < 3; i++) {\n        vec3 n = noise(p);\n        d += n.yz;\n        a += b * n.x / (1. + dot(d, d));\n        p = mat * p * 2.;\n        b *= 0.5;\n    }\n\n    return 120. * a;\n}\n\nfloat rayMarch(vec3 ro, vec3 rd, float tmin, float tmax) {\n    float t = tmin;\n    for(int i = 0; i < MAX_ITER; i++) {\n        vec3 p = ro + t * rd;\n        float h = p.y - ground(p.xz);\n        if(abs(h) < EPSILON * t || t > tmax)\n            break;\n        t += 0.4 * h;\n    }\n    return t;\n}\n\nfloat softShadow(in vec3 ro, in vec3 rd, float dis) {\n    float minStep = clamp(0.01 * dis, 0.5, 50.0);\n    float res = 1.0;\n    float t = 0.001;\n    for(int i = 0; i < 80; i++) {\n        vec3 p = ro + t * rd;\n        float h = p.y - ground(p.xz);\n        res = min(res, 8.0 * h / t);\n        t += max(minStep, h);\n        if(res < 0.001 || p.y > 200.0)\n            break;\n    }\n    return clamp(res, 0.0, 1.0);\n}\n\nvec3 calcNorm(vec3 p, float t) {\n    vec2 epsilon = vec2(0.001 * t, 0);\n    return normalize(vec3(groundH(p.xz - epsilon.xy) - groundH(p.xz + epsilon.xy), 2.0 * epsilon.x, groundH(p.xz - epsilon.yx) - groundH(p.xz + epsilon.yx)));\n}\n\nmat3 setCamera(vec3 ro, vec3 target, float cr) {\n    vec3 z = normalize(target - ro);\n    vec3 up = normalize(vec3(sin(cr), cos(cr), 0));\n    vec3 x = cross(z, up);\n    vec3 y = cross(x, z);\n    return mat3(x, y, z);\n}\n\nvec3 render(vec2 uv) {\n    vec3 col = vec3(0);\n\n    float an = iTime * 0.05;\n    float r = 300.;\n    vec2 pos2d = vec2(r * sin(an), r * cos(an));\n    float h = groundL(pos2d) + 25.;\n    vec3 ro = vec3(pos2d.x, h, pos2d.y);\n    vec3 target = vec3(r * sin(an + 0.01), h, r * cos(an + 0.01));\n    mat3 cam = setCamera(ro, target, 0.);\n\n    float fl = 1.;\n    vec3 rd = normalize(cam * vec3(uv, fl));\n\n    float tmin = 0.01;\n    float tmax = 1000.;\n\n    float maxh = 300.;\n\n    float tp = (maxh - ro.y) / rd.y;\n    if(tp > 0.) {\n        if(maxh > ro.y)\n            tmax = min(tmax, tp);\n        else\n            tmin = max(tmin, tp);\n    }\n    float t = rayMarch(ro, rd, tmin, tmax);\n    vec3 sunlight = normalize(vec3(0.8, 0.5, -0.2));\n    float sundot = clamp(dot(rd, sunlight), 0., 1.);\n\n    if(t > tmax) {\n    // if (true) {\n        // sky\n        col = vec3(0.3, 0.5, 0.85) - rd.y * rd.y * 0.5;\n        col = mix(col, 0.85 * vec3(0.7, 0.75, 0.85), pow(1.0 - max(rd.y, 0.0), 4.0));\n\n        // sun\n        col += 0.25 * vec3(1.0, 0.7, 0.4) * pow(sundot, 5.0);\n        col += 0.25 * vec3(1.0, 0.8, 0.6) * pow(sundot, 64.0);\n        col += 0.2 * vec3(1.0, 0.8, 0.6) * pow(sundot, 512.0);\n    } else {\n        vec3 p = ro + t * rd;\n        vec3 n = calcNorm(p, t);\n        vec3 difColor = vec3(0.67, 0.57, 0.44);\n        col = 0.1 * difColor;\n\n        vec3 lin = vec3(0.);\n\n        float dif = clamp(dot(sunlight, n), 0., 1.);\n        float sh = softShadow(p + 0.01 * sunlight, sunlight, t);\n        float amb = clamp(0.5 + 0.5 * n.y, 0., 1.);\n        float bac = clamp(0.2 + 0.8 * dot(vec3(-sunlight.x, 0., sunlight.z), n), 0., 1.);\n        lin += dif * vec3(8.0, 5.0, 3.0) * 1.3 * vec3(sh, sh * sh * 0.5 + 0.5 * sh, sh * sh * 0.8 + 0.2 * sh);\n        lin += amb * vec3(0.4, 0.6, 1.) * 5.2;\n        lin += bac * vec3(0.4, 0.5, 0.6);\n\n        col *= lin;\n\n        col = mix(col, 0.65 * vec3(0.5, 0.75, 1.0), 1. - exp(-pow(0.002 * t, 1.5)));\n    }\n\n    // sun scatter\n    col += 0.3 * vec3(1.0, 0.7, 0.3) * pow(sundot, 8.0);\n\n    // return sqrt(col);\n    return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fixUV(fragCoord);\n    vec3 col = render(uv);\n    // fragColor = vec4(color, 1.);\n    fragColor = vec4(1. - exp(-col * 2.), 1.);\n}","name":"Image","description":"","type":"image"}]}