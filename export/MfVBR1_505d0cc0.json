{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"cubemap","id":"4sfGzn","filepath":"/media/a/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png","sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}},{"channel":1,"type":"texture","id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}},{"channel":2,"type":"texture","id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}},{"channel":3,"type":"texture","id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}}],"code":"/*\n    ⚪⚫ Time to Go! ⚪⚫ by chronos\n    --------------------------------------------------\n\n    The performance is terrible, the code is ugly and there's a lot of artifacts, but whatevs ¯\\_(ツ)_/¯\n\n    Also I don't know how to play Go so this is just a random stone placement :D\n\n    Huge thanks to shadertoy user oneshade for help with the Go stone sdf approximation! :)\n    \n    --------------------------------------------------\n    self link: https://www.shadertoy.com/view/MfVBR1\n\n*/\n\nfloat oneshade_sdGoStone(vec3 q) {\n\n    vec2 p = vec2( length(q.xz), q.y );\n\n    const float h = 0.65;\n    const float k = 0.017;\n    const float c = 2.68;\n    const float o = 0.12;\n\n    float sy = p.y / h;\n    float r2 = dot(p, p);\n    float a = sqrt(sy * sy + k);\n    float b = pow(r2, 0.5 * c);\n    float de = a + b + o - 1.0;\n\n    vec2 g = b / r2 * c * p;\n    g.y += sy / (h * a);\n\n    return de / length(g);\n}\n\nfloat sdGoStone(vec3 p)\n{\n    return oneshade_sdGoStone(2.*(p-vec3(.5,0.47,.5)))/2.;\n}\n\nbool filled(vec3 p)\n{\n    return texelFetch(iChannel3, (1024+ivec2(p.xz+2.))%1024, 0).r > 1.-0.75 *(cos(iTime*.5)*.5+ .5);\n}\n\nfloat map(vec3 p)\n{\n    vec3 q = p-vec3(0.5,.0,0.5);\n    p.xz = fract(q).xz;\n    \n    float dist = length(vec3(0.05,max(p.y-.5, 0.05),0));\n    \n    for(float i = -1.; i <= 1.; i++)\n    for(float j = -1.; j <= 1.; j++)\n    {\n        vec3 neighbor = q + vec3(i, 0, j);\n        if(filled(neighbor)) dist = min(dist, sdGoStone(p + vec3(i, 0, j)));\n    }\n    \n    return dist;\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat calcSoftshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n    // bounding volume\n    float tp = (0.8-ro.y)/rd.y; if( tp>0.0 ) tmax = min( tmax, tp );\n\n    float res = 1.0;\n    float t = mint;\n    for( int i=0; i<24; i++ )\n    {\n\t\tfloat h = map( ro + rd*t );\n        float s = clamp(8.0*h/t,0.0,1.0);\n        res = min( res, s );\n        t += clamp( h, 0.01, 0.2 );\n        if( res<0.004 || t>tmax ) break;\n    }\n    res = clamp( res, 0.0, 1.0 );\n    return res*res*(3.0-2.0*res);\n}\n\n// https://iquilezles.org/articles/nvscene2008/rwwtt.pdf\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.01 + 0.12*float(i)/4.0;\n        float d = map( pos + h*nor );\n        occ += (h-d)*sca;\n        sca *= 0.95;\n        if( occ>0.35 ) break;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 ) * (0.5+0.5*nor.y);\n}\n\nconst float eps = 1e-3;\nvec3 normal(vec3 p)\n{\n    vec2 e = vec2(eps,0);\n    float m = map(p);\n    float dx = map(p+e.xyy)-m;\n    float dy = map(p+e.yxy)-m;\n    float dz = map(p+e.yyx)-m;\n    return normalize(vec3(dx, dy, dz)/eps);\n}\n\nvec3 render(vec3 N, vec3 R, vec3 L, vec3 p)\n{\n    float NdotL = max(dot(N, L), 0.);\n    float RdotL = pow(max(dot(R, L), 0.), 5.);\n    float ss = calcSoftshadow( p, L, 0.02, 2.5 );\n    float occ = calcAO( p, N );\n    vec2 rowcol = floor(p.xz+.5);\n    vec3 albedo = vec3(float(mod(rowcol.x, 2.) != mod(rowcol.y, 2.))*.985+.015);\n    albedo = step(.5, texelFetch(iChannel2, (64+ivec2(p.xz+.5))%64, 0).rrr);\n    vec3 color = albedo * (NdotL + .25)*mix(1., occ, .33)*mix(1., ss, .33);\n    color += (albedo*.875+.125)*RdotL*mix(1., occ, .33)*mix(1., ss, .1);\n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n\n    vec3 color = vec3(0);\n\n    float focal = 2.;\n    vec3 ro = vec3(0,4.*(cos(iTime*.5+0.)*.45+1.55),18);\n    vec3 rd = normalize(vec3(uv,-focal));\n    \n    float PI = 3.14159265;\n    float angle = (cos(iTime*.5+0.)*.5+.5)*PI/8.;\n    float c = cos(angle), s = sin(angle);\n    rd.zy = mat2(c,s,-s,c)*rd.zy;\n    \n    c = cos(iTime*.5), s = sin(iTime*.5);\n    ro.xz = mat2(c,s,-s,c) * ro.xz;\n    rd.xz = mat2(c,s,-s,c) * rd.xz;\n    \n    \n    vec3 L  = normalize(vec3(0,1,0));\n    vec3 L0 = normalize(vec3(1,1,0));\n    vec3 L1 = normalize(vec3(-1,1,0));\n    \n    float t = (0.-ro.y)/rd.y;\n    \n    \n    float t_max = 1e3;\n    \n    t = 0.;\n    for(int i = 0; i < 30; i++) // trace board\n    {\n        vec3 p = ro + rd * t;\n        \n        float d = length(p - clamp(vec3(p.x, 0., p.z), -10., 9.))-.2;\n        \n        if(d < eps) {  break; }\n        t+=d;\n        if(t > t_max) break;\n    }\n    \n    if(t > 0.)\n    {\n        vec3 p = ro + rd * t;\n        vec2 rowcol = floor(p.xz);\n        vec2 crowcol = fract(clamp(p.xz+.5, -9., 9.));\n        float mask = \n            ( step(-11., p.z) - step(11., p.z) )\n            *\n            ( step(-11., p.x) - step(11., p.x) );\n          \n        float occ = calcAO( p-vec3(0.5, 0., 0.5), vec3(0,1,0) );\n        float shadowmask = \n            smoothstep(-10.5, -9.5, p.x) * \n            smoothstep(9.3, 8.75, p.x) * \n            smoothstep(9.5, 8.75, p.z) * \n            smoothstep(-10.5, -9.5, p.z);\n        color += \n            mix(\n            texture(iChannel0, rd).rgb,\n            //(float(mod(rowcol.x, 2.) != mod(rowcol.y, 2.))*.985+.015)\n            pow(texture(iChannel1, p.xz*.125).rgb, vec3(1.)) *(1.-\n            max(\n                smoothstep(0.0035, -0.0005, min(crowcol.x, 1.-crowcol.x)/22.),\n                smoothstep(0.0035, -0.0005, min(crowcol.y, 1.-crowcol.y)/22.)\n            )*\n                ( step(-9.5, p.z) - step(8.5, p.z) )\n                *\n                ( step(-9.5, p.x) - step(8.5, p.x) )\n            )\n            *\n               mix(1., \n               (calcSoftshadow( p-vec3(0.5, 0., 0.5), L0, 0.02, 1.5 )+calcSoftshadow( p-vec3(0.5, 0., 0.5), L1, 0.02, 1.5 ))/2.\n               ,\n               shadowmask*0.85)\n               *\n               mix(1., occ, shadowmask*0.85),\n               mask)\n               ;\n        t_max = t;\n    }\n    else\n    {\n        color = pow(texture(iChannel0, rd).rgb, vec3(1.));\n    }\n\n    t = 0.;\n    for(int i = 0; i < 100; i++)\n    {\n        vec3 p = ro + rd * t-vec3(.5,0, 0.5);\n        \n        float d = map(p);\n        \n        if(d < eps) { \n            // render\n            vec3 N = normal(p);\n            vec3 R = reflect(rd, N);\n            if(p.x > -10.5 && p.x <  8.5 && p.z > -10.5 && p.z <  8.5)\n            color = \n                (\n                //2.*render(N, R, L, p) +\n                render(N, R, L0, p) +\n                render(N, R, L1, p)\n                ) / 2.;\n                ;\n            break;\n        }\n        t+=d*0.85;\n        if(t > t_max) break;\n    }\n\n    float contrast = 1.09;\n    color = tanh(contrast * pow(color, vec3(contrast)));\n    fragColor = vec4(pow(color, vec3(1./2.2)), 1);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MfVBR1","date":"1733766083","viewed":245,"name":"⚪⚫ Time to Go! ⚪⚫","username":"chronos","description":"Fairly straightforward render randomly placed stones on a Go board. I was mainly interested in the nice shape of the Go stones, with which I got help from shadertoy user oneshade :)","likes":29,"published":1,"flags":0,"usePreview":0,"tags":["game","go","boardgame"],"hasliked":0,"parentid":"","parentname":""}}