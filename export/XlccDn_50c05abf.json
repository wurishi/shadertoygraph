{"ver":"0.1","info":{"id":"XlccDn","date":"1532130396","viewed":182,"name":"I heard you like Fourier Series","username":"flerovium","description":"how did this happen","likes":5,"published":1,"flags":8,"usePreview":0,"tags":["lol","fourier","series"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define M_PI (3.14159265359)\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Normalized pixel coordinates (from -1.0 to 1.0)\n    vec2 coord  = (uv - 0.5) * 2.0;\n    \n    coord.x *= (iResolution.x/iResolution.y);\n    \n    float x = atan(coord.y/coord.x);\n    \n    vec2 v = vec2(0.0);\n    int num_harmonics = int(sin(iTime*0.8)*50.0+50.0);\n    \n    for (int i = 1; i <= num_harmonics; i++) {\n   \t\tv.x += (1.0/float(i)) * cos(float(i) * 2.0 * M_PI * x);\n        v.y += (1.0/float(i)) * sin(float(i) * 2.0 * M_PI * x);\n    }\n    \n    float radius = 0.2 * length(v);\n    float intens = 1.0 - sqrt(abs(length(coord) - radius));\n    \n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = vec4(col * intens,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define M_PI (3.14159265359)\n\nvec2 mainSound( in int samp,float time) {\n    float v = 0.0;\n    int num_harmonics = int(sin(time*0.8)*50.0+50.0);\n    \n    const int NUM_UNISON = 9;\n    const float UNISON_STEP = 0.2;\n    \n    for (int i = 1; i <= num_harmonics; i++) {\n        for (int j = 0; j < NUM_UNISON; j++) {\n   \t\t\tv += (1.0/float(i)) * sin(float(i) * (440.0 + UNISON_STEP * float(j)) * 2.0 * M_PI * time);\n        }\n    }\n    v *= 1.0/float(NUM_UNISON);\n    \n    return vec2(v);\n}","name":"Sound","description":"","type":"sound"}]}