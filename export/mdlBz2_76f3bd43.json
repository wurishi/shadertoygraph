{"ver":"0.1","info":{"id":"mdlBz2","date":"1715381798","viewed":69,"name":"Fuzzy blob","username":"StarstruckDreaming","description":"Circles. ","likes":3,"published":3,"flags":0,"usePreview":0,"tags":["circle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float Circle(vec2 uv,vec2 p, float r, float blur)\n{\n    float s = length(uv - p);\n    float c = smoothstep(r, r - blur, s);\n    \n    return c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= .5;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    // Cool effect from using a circle to determine how blurred another circle is. \n    float c = Circle(uv, vec2(.5*sin(iTime), 0), .3 - .2*sin(iTime)*sin(iTime), .05 + Circle(uv,vec2(0, 0), .35, .3));\n    // Output to screen\n    fragColor = vec4(vec3(c), 1.0);\n}","name":"Image","description":"","type":"image"}]}