{"ver":"0.1","info":{"id":"mlySW3","date":"1732098245","viewed":32,"name":"Cell Alignment model with Shader","username":"NatShadLab","description":"Tutorial by Programmable Artificial Life:\nhttps://www.youtube.com/watch?v=dCDOFsgNnnQ&ab_channel=ProgrammableArtificialLife","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["cell","buffer","alignement"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    \n    vec4 ch = texture(iChannel1, uv);\n    \n    vec2 uvX = uv;\n    vec2 uvx = uv;\n    vec2 uvY = uv;\n    vec2 uvy = uv;\n    vec2 uvXY = uv;\n    vec2 uvXy = uv;\n    vec2 uvxY = uv;\n    vec2 uvxy = uv;\n    \n    float str = 1. / iResolution.y;\n    uvX.x += 1.0 * str;\n    uvx.x -= 1.0 * str;\n    uvY.y += 1.0 * str;\n    uvy.y -= 1.0 * str;\n    uvXY += (1.0 * str, 1.0 * str);\n    uvXy += (1.0 * str, -1.0 * str);\n    uvxY += (-1.0 * str, 1.0 * str);\n    uvxy += (-1.0 * str, -1.0 * str);\n        \n    \n    vec4 chX = texture(iChannel0, uvX);\n    vec4 chx = texture(iChannel0, uvx);\n    vec4 chY = texture(iChannel0, uvY);\n    vec4 chy = texture(iChannel0, uvy);\n    vec4 chXY = texture(iChannel0, uvXY);\n    vec4 chXy = texture(iChannel0, uvXy);\n    vec4 chxY = texture(iChannel0, uvxY);\n    vec4 chxy = texture(iChannel0, uvxy);\n    \n    vec4 newch = vec4(1./length(8. * ch + (-1. * (chX + chx + chY + chy + chXY + chXy + chxY + chxy))));\n\n    \n    // Output to screen\n    fragColor = .5* (newch + ch);\n    //vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float PI = 3.14159265359;\n\nfloat hash13(vec3 p3)\n{\n\tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.zyx + 31.32);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec2 ang2vec(float a){\n    return vec2(cos(a), sin(a));\n}\n\nvec2 read(vec2 p ){\n    return texture(iChannel0, p/iResolution.xy).xy;\n}\n\nvec2 avgpool(vec2 p) {\n    vec2 acc = vec2(0.0);\n    for (int y =-1; y <=1; y++)\n    for (int x = -1; x<=1; x++) {\n        acc += read(p + vec2(x, y));\n    }\n    return acc / 9.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    if (iFrame ==0) {\n        float a = hash13(vec3(fragCoord, iFrame)) * 2.0 * PI;\n         \n        fragColor = vec4(ang2vec(a), 0.0, 0.0);\n        return;\n    }\n    vec2 v = normalize(avgpool(fragCoord));\n    fragColor = vec4(v,0.0,0.0);\n    \n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 ch = texture(iChannel0, uv) * 0.5 + 0.5;\n    \n    float steps = 4.0;\n    \n    float ch0= floor(ch.x * steps) / steps;\n    float ch1 = floor(ch.y * steps) / steps;\n    \n    ch = vec4(ch0, ch1, 0., 0.);\n    fragColor = ch;\n}","name":"Buffer B","description":"","type":"buffer"}]}