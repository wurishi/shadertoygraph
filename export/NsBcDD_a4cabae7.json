{"ver":"0.1","info":{"id":"NsBcDD","date":"1643511499","viewed":251,"name":"Toroidal Disk Distance","username":"demofox","description":"Shows the distance field of a point on a \"toroidal disk\"\nmouse drag to choose source location\nhttps://blog.demofox.org/2022/01/29/distance-between-points-on-a-toroidal-disk/","likes":7,"published":3,"flags":0,"usePreview":0,"tags":["distance"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// walking past the end of the circle brings you back to the center, and vice versa\n// Assumes your points are in [0,1)^N with a disk center of (0.5, 0.5, ...)\nfloat DistanceUnitDiskTorroidal(vec2 v1, vec2 v2)\n{\n    // Calculate the distance between the points going through the disk.\n    // This is the \"internal\" distance.\n    float distanceInternal = length(v1 - v2);\n\n    // The external distance is the distance between the points if going through the center\n    // or past the edges.\n    // This is the sum of the distance between each point and either the circle edge or the\n    // circle center, whichever is closer.\n    float distanceExternal1 = length(v1 - 0.5f);\n    distanceExternal1 = min(distanceExternal1, 0.5 - distanceExternal1);\n\n    float distanceExternal2 = length(v2 - 0.5f);\n    distanceExternal2 = min(distanceExternal2, 0.5 - distanceExternal2);\n\n    float distanceExternal = distanceExternal1 + distanceExternal2;\n\n    // return whichever is less, between the internal and external distance.\n    return min(distanceInternal, distanceExternal);\n}\n\nvec2 UVToWorld(vec2 uv)\n{\n    uv.y = 0.5 + (uv.y - 0.5) * iResolution.y / iResolution.x;\n    uv = 0.5 + (uv - 0.5) * 2.0;\n    return uv;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 sourcePos = UVToWorld(iMouse.xy / iResolution.xy);\n    if (length(sourcePos - 0.5) > 0.5)\n        sourcePos = 0.5 + normalize(sourcePos - 0.5) * 0.5;\n    \n    vec2 pos = UVToWorld(fragCoord/iResolution.xy);\n    \n    if (length(pos - sourcePos) < 0.01)\n    {\n        fragColor = vec4(0.0, 0.0, 1.0 ,1.0);\n        return;    \n    }    \n\n    if (length(pos - 0.5) > 0.5)\n    {\n        fragColor = vec4(1.0, 1.0, 1.0 ,1.0);\n        return;\n    }\n\n    // Time varying pixel color\n    float dist = DistanceUnitDiskTorroidal(sourcePos, pos);\n    \n    // dist multiplied by 2 because the radius is 0.5, so that's the maximum distance.\n    // multiply by 2 to make the max distance be 1\n    vec3 col = mix(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 0.0), dist * 2.0);\n    \n    col *= 0.75+0.25*(cos(6.28*20.0*dist));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n\n// TODO: click to change where the source point is","name":"Image","description":"","type":"image"}]}