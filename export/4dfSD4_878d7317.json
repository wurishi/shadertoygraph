{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"//\n// GLSL textureless classic 2D noise \"cnoise\",\n// with an RSL-style periodic variant \"pnoise\".\n// Author:  Stefan Gustavson (stefan.gustavson@liu.se)\n// Version: 2011-08-22\n//\n// Many thanks to Ian McEwan of Ashima Arts for the\n// ideas for permutation and gradient selection.\n//\n// Copyright (c) 2011 Stefan Gustavson. All rights reserved.\n// Distributed under the MIT license. See LICENSE file.\n// https://github.com/ashima/webgl-noise\n//\n\nvec4 mod289(vec4 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x)\n{\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec2 fade(vec2 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n\n// Classic Perlin noise\nfloat cnoise(vec2 P)\n{\n  vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);\n  vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);\n  Pi = mod289(Pi); // To avoid truncation effects in permutation\n  vec4 ix = Pi.xzxz;\n  vec4 iy = Pi.yyww;\n  vec4 fx = Pf.xzxz;\n  vec4 fy = Pf.yyww;\n\n  vec4 i = permute(permute(ix) + iy);\n\n  vec4 gx = fract(i * (1.0 / 41.0)) * 2.0 - 1.0 ;\n  vec4 gy = abs(gx) - 0.5 ;\n  vec4 tx = floor(gx + 0.5);\n  gx = gx - tx;\n\n  vec2 g00 = vec2(gx.x,gy.x);\n  vec2 g10 = vec2(gx.y,gy.y);\n  vec2 g01 = vec2(gx.z,gy.z);\n  vec2 g11 = vec2(gx.w,gy.w);\n\n  vec4 norm = taylorInvSqrt(vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11)));\n  g00 *= norm.x;  \n  g01 *= norm.y;  \n  g10 *= norm.z;  \n  g11 *= norm.w;  \n\n  float n00 = dot(g00, vec2(fx.x, fy.x));\n  float n10 = dot(g10, vec2(fx.y, fy.y));\n  float n01 = dot(g01, vec2(fx.z, fy.z));\n  float n11 = dot(g11, vec2(fx.w, fy.w));\n\n  vec2 fade_xy = fade(Pf.xy);\n  vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);\n  float n_xy = mix(n_x.x, n_x.y, fade_xy.y);\n  return 2.3 * n_xy;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t//0.0-20.0 so we can loop the effect\n\tfloat timeMod20 = mod(iTime, 20.0);\n\t\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\ttimeMod20 += 10.0; //because starting at 0.0 is boring\n\tif (timeMod20 < 15.0) {\n\t\t//appear to zoom from the lower left corner\n\t\tfragColor = vec4(vec3(cnoise(timeMod20*uv)),1.0);\n\t}\n\telse if (timeMod20 < 20.0) {\n\t\tuv.x = 1.0 - uv.x; //appear to zoom from the lower right corner\n\t\tfragColor = vec4(vec3(cnoise(timeMod20*uv)),1.0);\n\t}\n\telse if (timeMod20 < 25.0) {\n\t\tuv.xy = 1.0 - uv.xy; //appear to zoom from the upper right corner\n\t\tfragColor = vec4(vec3(cnoise(timeMod20*uv)),1.0);\n\t}\n\telse {\n\t\tuv.y = 1.0 - uv.y; //appear to zoom from the upper left corner\n\t\tfragColor = vec4(vec3(cnoise(timeMod20*uv)),1.0);\n\t}\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4dfSD4","date":"1400727597","viewed":810,"name":"Perlin Noise - Ken Burns effect","username":"slade","description":"A really simple Ken Burns effect on classic Perlin noise to make it slightly more interesting.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["noise","perlin","ken","burns"],"hasliked":0,"parentid":"","parentname":""}}