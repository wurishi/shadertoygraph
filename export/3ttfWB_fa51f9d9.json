{"ver":"0.1","info":{"id":"3ttfWB","date":"1613388166","viewed":114,"name":"vortex rainbow distortion","username":"Osakazaur","description":"Now it is rainbow\nIt is Windows98 skreensaver, but a bit psychedelic","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["2d","distortion","vortex"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat pi = 3.14;\nfloat timeScale = .75;\nfloat R = .4;\n\nfloat step2(float x){\n\treturn x*x;\n}\n\nvec2 decToPolar(vec2 xy){\n    float x = xy.x; float y = xy.y;\n    \n    float r = sqrt(step2(x) + step2(y));\n    float fi = 0.;\n\n\tif (x > 0.){\n        if (y > 0.){fi = atan(y/x);}\n        else if (y < 0.){fi = atan(y/x) + 2.*pi;}\n        else if (y == 0.){fi = 0.;};\n    }\n    else if (x < 0.){\n        fi = atan(y/x) + pi;\n    }\n    else if (x == 0.){\n        if (y > 0.){fi = pi/2.;}\n        else if (y < 0.){fi = 3.*pi/2.;}\n        else if (y == 0.){fi = 0.;}\n    }\n    \n    return vec2(r, fi);\n}\n\nvec2 polarToDec(vec2 rf){\n\treturn vec2 (rf.x * cos(rf.y), rf.x * sin(rf.y));\n}\n\n\nvec2 vortex(vec2 rf){\n    float delFi = pi*(1. - rf.x / R);\n    rf.y -= delFi;\n    return polarToDec(rf);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    R = R * iResolution.y;\n    #define iTime iTime * timeScale\n    vec2 cen = vec2(iResolution.x*(0.5 + (distance(fract(iTime/2.), 0.5)- 0.25)*1.75),\n        \t\t\tiResolution.y*(0.5 + sin(fract(iTime)*2.*pi)*0.4));\n    \n    vec2 xy = fragCoord.xy / iResolution.xy;\n    \n    vec2 rf = decToPolar(fragCoord - cen);\n   \n    float modif = sin(fract(iTime*1.75)*pi)*.3;\n    if (rf.x < R*(1. - modif)) {xy = (vortex(rf) + cen).xy / iResolution.xy;}\n\n    fragColor = texture(iChannel0, xy);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float timeScale = 0.5;\nfloat pi = 3.14;\n\nfloat fractured(float offset){\n    float _fractured = fract(iTime*timeScale + offset);\n    _fractured = distance(_fractured, 0.5) * 2.;\n    _fractured = 1. - _fractured;\n    return _fractured;\n}\n\nvec4 rainbowColor(vec2 Coord)\n{\n    vec2 xy = Coord/iResolution.xy;\n    float geometry = -1.*(sin(xy.x*pi/2.)+cos(xy.y*pi/2.))/6.;\n    vec4 texColor = vec4(\n        fractured(0. + geometry),\n        fractured(0.33 + geometry),\n        fractured(0.67 + geometry),\n        1.0);\n    return texColor;\n    \n}\n\nvec4 textured(vec2 pos){\n    \n    int textureScale = 1;\n\tivec2 P = ivec2(pos) / textureScale % 1024;\n    return texelFetch(iChannel0, P, 0);\n}\n\n\nvec4 lighting(vec4 color){\n    vec3 col = vec3(color) * 1.7;\n    return vec4 (col, 1.);\n}\n\nvec4 colored(vec4 base, vec2 coord_){\n    vec3 col = vec3(rainbowColor(coord_)) * 1.7 * base.r;\n    return vec4(col, 1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = colored(textured(fragCoord), fragCoord);\n}","name":"Buffer A","description":"","type":"buffer"}]}