{"ver":"0.1","info":{"id":"DdjyzG","date":"1687841244","viewed":55,"name":"gdljs-fin","username":"toylee","description":"tutorial step","likes":2,"published":1,"flags":2,"usePreview":0,"tags":["tutorial"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 WebCamPixelAt(vec2 pos) {\n    return texture(iChannel0, pos);\n}\n\n// Abrbitrary color scale\nvec3 palette (float t ) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.263,0.416,0.557);\n    return a + b*cos( 6.28318* (c*t+d) );\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    float d = length(uv);\n    vec3 col = WebCamPixelAt(fragCoord/iResolution.xy).xyz;\n    col *= palette(d);\n    d = sin(d*8. + (iTime*2.0))/16.;\n\n    d = 0.05 / d;\n    d = abs(d);\n    col *= d; \n    fragColor = vec4 (col, 1.0);\n}","name":"Image","description":"","type":"image"}]}