{"ver":"0.1","info":{"id":"lXcSR2","date":"1719266256","viewed":30,"name":"First Sample gradient (short)","username":"L1x3N","description":"Shader that aims to reproduce the Sample Gradient node from Unity's Shader Graph, but without the 8 colors limit\nShortened in order to make it more easily usable in future works","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["test","gradient","compact"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec3[] COLORS_VALUES = vec3[](vec3(0), vec3(1), vec3(0.5), vec3(0));\nconst float[] COLORS_POS = float[](0.f, 1.f / 3.f, 2.f / 3.f, 1.f);\n\nconst float ZOOM_X = 2.f;\nconst float ZOOM_Y = 2.f;\nconst float MOVE_SPEED = 0.5f;\nconst bool ASPECT_RATIO = false;\n\nconst bool GRADIENT_BLEND_MODE = false;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = gl_FragCoord.xy / iResolution.xy;\n    if(ASPECT_RATIO)\n        uv.x *= iResolution.x / iResolution.y;\n    float uvPos = fract(uv.x * ZOOM_X + uv.y * ZOOM_Y + (iTime * MOVE_SPEED));\n\n    int colorPosIndex;\n    for(colorPosIndex = 0; colorPosIndex < (COLORS_POS.length()); colorPosIndex ++) {\n        if(uvPos < COLORS_POS[colorPosIndex])\n            break;\n    }\n    vec3 myColor;\n\n    if(GRADIENT_BLEND_MODE) {\n        float colorUv = (uvPos - COLORS_POS[colorPosIndex - 1]) / (COLORS_POS[colorPosIndex] - COLORS_POS[colorPosIndex - 1]);\n        myColor = mix(COLORS_VALUES[colorPosIndex - 1], COLORS_VALUES[colorPosIndex], colorUv);\n    } else {\n        myColor = COLORS_VALUES[colorPosIndex];\n    }\n    fragColor = vec4(myColor, 1.0f);\n}","name":"Image","description":"","type":"image"}]}