{"ver":"0.1","info":{"id":"7sfBD7","date":"1644935075","viewed":259,"name":"sunqirui_fire","username":"sqraaa","description":"sunqirui_fire","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["sunqiruifire"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float firenum = 12.0;\nfloat fireheight = 14.0;//高度\nvec3 vcolor = vec3(1.0,1.0,1.0);\nint blendMode = 1; //正常:0,正片叠底:1,滤色:2\nfloat alpha = 1.0;\n\nfloat normalStrength\t\t= 40.0;\nfloat distortionStrength\t= 0.1;\n\n\n\n\n#define timeScale \t\t\tiTime * 1.0\n#define fireMovement \t\tvec2(-0.01, -0.5)\n#define distortionMovement\tvec2(-0.01, -0.3)\n\n\n// #define DEBUG_NORMAL\n\n/** NOISE **/\nfloat rand(vec2 co) {\n  return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvec2 hash( vec2 p ) {\n\tp = vec2( dot(p,vec2(127.1,311.7)),\n\t\t\t  dot(p,vec2(269.5,183.3)) );\n\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise( in vec2 p ) {\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\n\tvec2 i = floor( p + (p.x+p.y)*K1 );\n\t\n    vec2 a = p - i + (i.x+i.y)*K2;\n    vec2 o = step(a.yx,a.xy);    \n    vec2 b = a - o + K2;\n\tvec2 c = a - 1.0 + 2.0*K2;\n\n    vec3 h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\n\tvec3 n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n\n    return dot( n, vec3(70.0) );\n}\n\nfloat fbm ( in vec2 p ) {\n    float f = 0.0;\n    mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\n    f  = 0.5000*noise(p); p = m*p;\n    f += 0.2500*noise(p); p = m*p;\n    f += 0.1250*noise(p); p = m*p;\n    f += 0.0625*noise(p); p = m*p;\n    f = 0.5 + 0.5 * f;\n    return f;\n}\n\n/** DISTORTION **/\nvec3 bumpMap(vec2 uv) { \n    vec2 s = 1. / iResolution.xy;\n    float p =  fbm(uv);\n    float h1 = fbm(uv + s * vec2(1., 0));\n    float v1 = fbm(uv + s * vec2(0, 1.));\n       \n   \tvec2 xy = (p - vec2(h1, v1)) * normalStrength;\n    return vec3(xy + .5, 1.);\n}\n\n/** MAIN **/\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 normal = bumpMap(uv * vec2(1.0, 0.3) + distortionMovement * timeScale);\n    \n    #ifdef DEBUG_NORMAL\n    \tfragColor = vec4(normal, 1.0);\n    \treturn;\n    #endif\n    \n    vec2 displacement = clamp((normal.xy - .5) * distortionStrength, -1., 1.);\n    uv += displacement ; \n    \n    \n    vec2 uvT = (uv * vec2(1.0, 0.5)) + timeScale * fireMovement;\n    float n = pow(fbm(8.0 * uvT), 1.0);    \n    \n   \n    float gradient = pow(1.0 - uv.y, 20.0 - fireheight) * 1.1 * firenum;\n    float finalNoise = n * gradient ;\n    \n    vec3 color = finalNoise * vec3(2.*n, 2.*n*n*n, n*n*n*n) * vcolor;\n    color = color + texture(iChannel0,uv).rgb;\n    \n   \n    \n    vec4 texColor = vec4(color, 1.);\n    vec4 compColor = texture(iChannel0,uv);\n    \n   \n     vec4 result;\n\n                if( blendMode==1 ) {\n                    result = vec4((compColor.rgb/compColor.a)*color.rgb,1.0) * compColor.a;\n                } else if( blendMode==2 ) {\n                    result = vec4( 1.-((1.-(compColor.rgb/texColor.a))*(1.-color.rgb)),1.0) * texColor.a;\n                } else {\n                    result = vec4(color.rgb,1.0)*compColor.a;\n                }\n                fragColor = mix(compColor,result,alpha);\n              \n}","name":"Image","description":"","type":"image"}]}