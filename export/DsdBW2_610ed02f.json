{"ver":"0.1","info":{"id":"DsdBW2","date":"1697654287","viewed":34,"name":"Block cellular automaton sand","username":"Masterchef365","description":"Block cellular automaton sand","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["block","ca"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Time varying pixel color\n    vec3 col = vec3(texelFetch(iChannel0, ivec2(fragCoord), 0).r);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float rand(vec2 co){\n    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\n/*\nconst vec4 lut[16] = vec4[16](\n    vec4(0, 0, 0, 0), // 0\n    vec4(1, 0, 0, 0), // 1\n    vec4(0, 1, 0, 0), // 2\n    vec4(1, 1, 0, 0), // 3\n    vec4(0, 0, 1, 0), // 4\n    vec4(1, 0, 1, 0), // 5\n    vec4(0, 1, 1, 0), // 6\n    vec4(1, 1, 1, 0), // 7\n    vec4(0, 0, 0, 1), // 8\n    vec4(1, 0, 0, 1), // 9\n    vec4(0, 1, 0, 1), // 10\n    vec4(1, 1, 0, 1), // 11\n    vec4(0, 0, 1, 1), // 12\n    vec4(1, 0, 1, 1), // 13\n    vec4(0, 1, 1, 1), // 14\n    vec4(1, 1, 1, 1)  // 15\n);\n*/\n\nconst vec4 lut[16] = vec4[16](\n    vec4(0, 0, 0, 0), // 0\n    vec4(0, 0, 1, 0), // 1\n    vec4(0, 0, 0, 1), // 2\n    vec4(0, 0, 1, 1), // 3\n    vec4(0, 0, 1, 0), // 4\n    vec4(0, 0, 1, 1), // 5\n    vec4(0, 0, 1, 1), // 6\n    vec4(1, 0, 1, 1), // 7\n    vec4(0, 0, 0, 1), // 8\n    vec4(0, 0, 1, 1), // 9\n    vec4(0, 0, 1, 1), // 10\n    vec4(0, 1, 1, 1), // 11\n    vec4(0, 0, 1, 1), // 12\n    vec4(1, 0, 1, 1), // 13\n    vec4(0, 1, 1, 1), // 14\n    vec4(1, 1, 1, 1)  // 15\n);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 px = ivec2(fragCoord);\n    //px.y = int(iResolution.y) - px.y;\n    \n    ivec2 alternate = px + (iFrame & 1);\n    ivec2 corner = alternate & 1;\n    ivec2 offset = -corner;\n    \n    vec4 read_pixels = vec4(\n        texelFetch(iChannel0, px + ivec2(0, 0) + offset, 0).r,\n        texelFetch(iChannel0, px + ivec2(1, 0) + offset, 0).r,\n        texelFetch(iChannel0, px + ivec2(0, 1) + offset, 0).r,\n        texelFetch(iChannel0, px + ivec2(1, 1) + offset, 0).r\n    );\n    \n    int corner_idx = corner.x + corner.y * 2;\n    \n    int lut_idx = int(dot(read_pixels, vec4(1., 2., 4., 8.)));\n    \n    float out_value = lut[lut_idx].zwxy[corner_idx];\n    \n    /*if (iFrame < 60*1) {\n        out_value = float(rand(fragCoord/iResolution.xy) > 0.5);\n        out_value = 0.;\n    }*/\n\n    if (distance(iMouse.xy, vec2(px)) < 30. && bool(iMouse.w)) {\n        out_value = 1. - out_value;\n    }\n    \n    if (px.y < 5) {\n        out_value = 1.;\n    }\n    \n    fragColor = vec4(out_value,0.0,0.0,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}