{"ver":"0.1","info":{"id":"DlSSRm","date":"1675800478","viewed":73,"name":"metaverse shader","username":"venomflop","description":"Me learning: metaverse shader","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["pixelgridmoving"],"hasliked":0,"parentid":"7sXyRl","parentname":"moving pixel grid"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float nsin(float n) {\n    return sin(n) * .5 + .5;\n}\n\nfloat rnd21(vec2 p) {\n    p = fract(p * vec2(233.34, 851.73));\n    p += dot (p, p + 23.45) ;\n    return fract(p.x * p.y);\n}\n\nfloat rnd(vec2 st) {\n    return fract(sin(dot(st.xy, vec2(12.9898,78.233))) * 43758.5453123);\n}\n\n\n// color pallet: #cf3c72, #49edb0, #2d89e7\nvec3 red = vec3(0.812,0.235,0.447);\nvec3 green = vec3(0.286,0.929,0.69);\nvec3 blue = vec3(0.176,0.537,0.906);\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // normalize\n    vec2 uv = fragCoord / iResolution.xy;\n\n    float aspectHeight = iResolution.y / iResolution.x;\n    float aspectWidth = iResolution.x / iResolution.y;\n    \n    // grid uv\n    float gridSize = aspectWidth * 4.;\n    \n    vec2 gUv = vec2(uv.x * gridSize, uv.y * (gridSize * aspectHeight));\n    \n    // move grid\n    gUv.x += iTime * 0.3;\n    \n    // grid id\n    vec2 id = floor(gUv);\n    float rndById = rnd21(id);\n    \n    vec4 col1;\n    vec4 col2;\n    if (rndById < 0.333) {\n        col1 = vec4(red, 1.);\n        col2 = vec4(green, 1.);\n    } else if (rndById < 0.666) {\n        col1 = vec4(green, 1.);\n        col2 = vec4(blue, 1.);\n    } else if (rndById < 1.0) {\n        col1 = vec4(blue, 1.);\n        col2 = vec4(red, 1.);\n    }\n    \n    \n    // pixel fade\n    col1 *= nsin((iTime * 1.) * rndById);\n\n    fragColor = mix(col1, col2, mod(gUv.y, 1.));\n}","name":"Image","description":"","type":"image"}]}