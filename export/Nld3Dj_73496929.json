{"ver":"0.1","info":{"id":"Nld3Dj","date":"1636808257","viewed":94,"name":"CPS-Sphere","username":"peremoya2000","description":"A short phong lit sphere render shader based on a circle.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["phong","interactive","lighting","sphere","short"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Define vars\nvec3 sphereCol = vec3(0.8,.15,.15);\nvec3 viewDir = vec3(0,0,-1);\nvec3 ambientLight = vec3(.06);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    \n    //Calculate lightDir by mouse\n    vec2 mousePos = iMouse.xy / iResolution.xy +.5;\n    vec3 lightDir = normalize(vec3(1.-mousePos,-.6));\n    \n    //Define and Phong Shade circle\n    float r = (sin(iTime)*.05+.15);\n    vec3 surface3DPoint = vec3 (uv, sqrt(r - uv.x*uv.x - uv.y*uv.y));\n    vec3 normal = normalize(surface3DPoint);\n    \n    float lambertian = max(dot(normal, -lightDir) , 0.);\n    \n    vec3 reflectionRay = reflect(lightDir,normal);\n    float specular = pow(max(0.,dot(-viewDir,reflectionRay)),10.);\n    \n    vec3 col = (lambertian*sphereCol*.6)+(specular*.4)+ambientLight*length(normal);\n    \n    // Output to screen\n    fragColor = vec4(col,1.);\n}","name":"Image","description":"","type":"image"}]}