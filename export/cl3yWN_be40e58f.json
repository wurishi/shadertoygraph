{"ver":"0.1","info":{"id":"cl3yWN","date":"1699198502","viewed":44,"name":"First Hafen","username":"Sheda","description":"A Shader that follows the tutorial provided by kishimisu on YouTube.\nIt is my first ever shader and I feel like I barely even scratched the surface of what GLSL can do.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["hafen"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float ndot(vec2 a, vec2 b ) { return a.x*b.x - a.y*b.y; }\nfloat sdRhombus( in vec2 p, in vec2 b ) \n{\n    p = abs(p);\n    float h = clamp( ndot(b-2.0*p,b)/dot(b,b), -1.0, 1.0 );\n    float d = length( p-0.5*b*vec2(1.0-h,1.0+h) );\n    return d * sign( p.x*b.y + p.y*b.x - b.x*b.y );\n}\n\nvec3 palette( in float t)\n{\n    vec3 a = vec3(0.500, 0.508, 0.808);\n    vec3 b = vec3(0.588, 0.458, 0.078);\n    vec3 c = vec3(1.018, 1.000, 2.638);\n    vec3 d = vec3(0.418, 0.928, 0.118);\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord *2.0 - iResolution.xy )/ iResolution.y;\n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(.0);\n    \n    for(float i = 0.0; i<2.0; i++){\n        \n        uv = fract(uv * 1.5) - .5;\n        \n        vec2 edges = vec2(sin(length(uv)*2.+2. + iTime),cos(length(uv)*2.+2. +iTime));\n    \n        float d = sdRhombus(uv, edges) * exp(-length(uv0));\n    \n        vec3 color = palette(length(uv0) + i*.4 +iTime*.3);\n    \n        d = sin(d*8. + iTime)/8.;\n        d = abs(d);\n        d = pow(.01/d, 1.1);\n    \n        finalColor += color * d;\n    }\n\n    fragColor = vec4(finalColor,1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}