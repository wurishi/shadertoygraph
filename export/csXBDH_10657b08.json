{"ver":"0.1","info":{"id":"csXBDH","date":"1688740455","viewed":108,"name":"Caterpillar Crawl","username":"gunthern","description":"Caterpillar sketch with sdf circles.","likes":14,"published":1,"flags":0,"usePreview":0,"tags":["caterpillarcrawl"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdfCircle ( in vec2 uv, in vec2 pos, in float radius )\n{\n    float d = smoothstep(radius, radius - 0.001, distance(uv, pos));\n    return d;\n}\n\nfloat triangleWave ( in float a, in float f, in float offset )\n{\n    return a*(abs(mod(f,2.0)-1.0))+offset;\n}\n\nvec2 uvTriangle ( in vec2 uv, in float offset ) {\n\n     // Resolution + radius\n    float xRes = iResolution.x/iResolution.y * (1.0 - circleRad);\n    float yRes = 1.0 - circleRad * 2.0;\n    \n    // Triangle waves\n    vec2 uvTriangle = \n        vec2(\n            uv.x + triangleWave(xRes, iTime * xRes * crawlSpeed + offset, -xRes*0.5),\n            uv.y + triangleWave(yRes, iTime * yRes * crawlSpeed + offset * 0.2, -yRes*0.5)\n        );\n        \n    return uvTriangle;\n}\n\n// Segment from https://www.shadertoy.com/view/MlcGDB\nfloat segment( in vec2 uv, in vec2 a, in vec2 b, in float r ) \n{\n    vec2 g = b - a;\n    vec2 h = uv - a;\n    float d = length(h - g * clamp(dot(g, h) / dot(g,g), 0.0, 1.0));\n\treturn smoothstep(r, 0.99*r, d);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    // Background\n    vec3 col = vec3(0.0, 0.04, 0.2);\n    \n    // Geometry\n    for (int i = 0; i < circleCount; i++)\n    {\n        \n        // Bulge effect time modifier\n        float bulgeMod = max(sin(float(i)*0.5+iTime*4.0)*0.12, 0.0) * max(sin(iTime*0.4), 0.0) * 0.5;\n    \n        // Body\n        float circle = sdfCircle(uvTriangle(uv, 0.5 + float(i)*circleOffset - float(circleCount-1)*circleOffset), vec2(0.0), (sin(float(i)+iTime)+5.5)*0.01+0.06 + bulgeMod);\n        vec3 color = vec3(float(i) / float(circleCount) - bulgeMod*3.0, sin(iTime) * 0.1 + 0.5 + bulgeMod, 1.0 - float(i) / float(circleCount) - bulgeMod*3.0);\n        col *= 1.0 - vec3(circle);\n        col += vec3(circle) * color;\n        \n        // Feet\n        float footLCircle = sdfCircle(uvTriangle(uv, 0.5 + float(i)*circleOffset - float(circleCount-1)*circleOffset) + vec2(0.1, 0.12 + sin(iTime*3.0+float(i))*0.023) + vec2(bulgeMod, bulgeMod), vec2(0.0), 0.02);\n        col *= 1.0 - vec3(footLCircle);\n        col += vec3(footLCircle) * color*0.8;\n        \n        float footRCircle = sdfCircle(uvTriangle(uv, 0.5 + float(i)*circleOffset - float(circleCount-1)*circleOffset) + vec2(-0.1, 0.12 + sin(iTime*3.0+float(-i))*0.023) + vec2(-bulgeMod, bulgeMod), vec2(0.0), 0.02);\n        col *= 1.0 - vec3(footRCircle);\n        col += vec3(footRCircle) * color*0.8;\n        \n        // Legs\n        float legL = segment(uvTriangle(uv, 0.5 + float(i)*circleOffset - float(circleCount-1)*circleOffset) + vec2(0.1, 0.12 + sin(iTime*3.0+float(i))*0.023) + vec2(bulgeMod, bulgeMod), vec2(0.0), vec2(0.01, 0.1 + bulgeMod), 0.01);\n        col *= 1.0 - vec3(legL);\n        col += vec3(legL) * mix(color, color*0.8, clamp((uvTriangle(uv, 0.5 + float(i)*circleOffset - float(circleCount-1)*circleOffset)).y *-8.0 + bulgeMod, 0.0, 1.0));\n        \n        float legR = segment(uvTriangle(uv, 0.5 + float(i)*circleOffset - float(circleCount-1)*circleOffset) + vec2(-0.1, 0.12 + sin(iTime*3.0+float(-i))*0.023) + vec2(-bulgeMod, bulgeMod), vec2(0.0), vec2(-0.01, 0.1 + bulgeMod), 0.01);\n        col *= 1.0 - vec3(legR);\n        col += vec3(legR) * mix(color, color*0.8, clamp((uvTriangle(uv, 0.5 + float(i)*circleOffset - float(circleCount-1)*circleOffset)).y*-8.0 + bulgeMod, 0.0, 1.0));\n    }\n    \n    float antennaLseg = segment(uvTriangle(uv, 0.5) + vec2(sin(iTime) * 0.004, cos(iTime) * 0.01) + vec2(0.06, -0.16 + sin(iTime)*0.01), vec2(0.0), vec2(0.02, -0.08), 0.01);\n    col *= 1.0 - vec3(antennaLseg);\n    col += vec3(antennaLseg) * vec3(float(circleCount - 1) / float(circleCount) - (max(sin(float(circleCount - 1)*0.5+iTime*4.0)*0.12, 0.0) * max(sin(iTime*0.4), 0.0))*3.0, sin(iTime) * 0.1 + 0.5, 1.0 - float(circleCount - 1) / float(circleCount) - (max(sin(float(circleCount - 1)*0.5+iTime*4.0)*0.12, 0.0) * max(sin(iTime*0.4), 0.0))*3.0);\n    \n    float antennaL = sdfCircle(uvTriangle(uv, 0.5) + vec2(sin(iTime) * 0.004, cos(iTime) * 0.01) + vec2(0.06, -0.16 + sin(iTime)*0.01), vec2(0.0), 0.01 * (sin(iTime)*0.2 + 1.75));\n    col *= 1.0 - vec3(antennaL);\n    col += vec3(antennaL) * vec3(1.0, 0.3 * sin(iTime), 0.2);\n    \n    float antennaRseg = segment(uvTriangle(uv, 0.5) + vec2(sin(iTime) * 0.004, cos(iTime) * 0.01) + vec2(-0.06, -0.16 + cos(iTime)*0.01), vec2(0.0), vec2(-0.02, -0.08), 0.01);\n    col *= 1.0 - vec3(antennaRseg);\n    col += vec3(antennaRseg) * vec3(float(circleCount - 1) / float(circleCount) - (max(sin(float(circleCount - 1)*0.5+iTime*4.0)*0.12, 0.0) * max(sin(iTime*0.4), 0.0))*3.0, sin(iTime) * 0.1 + 0.5, 1.0 - float(circleCount - 1) / float(circleCount) - (max(sin(float(circleCount - 1)*0.5+iTime*4.0)*0.12, 0.0) * max(sin(iTime*0.4), 0.0))*3.0);\n    \n    float antennaR = sdfCircle(uvTriangle(uv, 0.5) + vec2(sin(iTime) * 0.004, cos(iTime) * 0.01) + vec2(-0.06, -0.16 + cos(iTime)*0.01), vec2(0.0), 0.01 * (cos(iTime)*0.2 + 1.75));\n    col *= 1.0 - vec3(antennaR);\n    col += vec3(antennaR) * vec3(1.0, 0.3 * cos(iTime), 0.2);\n    \n    float faceCircle = sdfCircle(uvTriangle(uv, 0.5) + vec2(sin(iTime) * 0.004, cos(iTime) * 0.01), vec2(0.0), 0.08);\n    col *= 1.0 - vec3(faceCircle);\n    col += vec3(faceCircle) * vec3(1.0, 0.83, 0.9);\n\n    float eyeL = sdfCircle(uvTriangle(uv, 0.5) + vec2(sin(iTime) * 0.004, cos(iTime) * 0.01) + vec2(0.02, -0.03), vec2(0.0), 0.005 + max(sin(float(circleCount - 1)*0.5+iTime*4.0)*0.12, 0.0) * max(sin(iTime*0.4), 0.0)*0.04);\n    col *= 1.0 - vec3(eyeL);\n    \n    float eyeR = sdfCircle(uvTriangle(uv, 0.5) + vec2(sin(iTime) * 0.004, cos(iTime) * 0.01) + vec2(-0.02, -0.03), vec2(0.0), 0.005 + max(sin(float(circleCount - 1)*0.5+iTime*4.0)*0.12, 0.0) * max(sin(iTime*0.4), 0.0)*0.04);\n    col *= 1.0 - vec3(eyeR);\n    \n    float nose = sdfCircle(uvTriangle(uv, 0.5) + vec2(sin(iTime) * 0.004, cos(iTime) * 0.01) + vec2(0.0, 0.01), vec2(0.0), 0.03);\n    col *= 1.0 - vec3(nose);\n    col += vec3(nose) * vec3(0.9, 0.75, 0.75);\n\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define circleRad 0.14\n#define circleOffset 0.05\n#define circleCount 12\n#define crawlSpeed 0.03","name":"Common","description":"","type":"common"}]}