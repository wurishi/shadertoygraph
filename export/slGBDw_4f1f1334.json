{"ver":"0.1","info":{"id":"slGBDw","date":"1664595395","viewed":197,"name":"Recursive Circles","username":"isaacchurchill","description":"Each circle contains the others! The nesting depth is adjustable.","likes":5,"published":3,"flags":0,"usePreview":0,"tags":["2d","circles","recursive"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define ANIMATE\n#define NEST_DEPTH 7\n#define SIZE_RATIO 0.45;\n\nvec4 nestedCircles(vec2 uv)\n{\n    const vec4 outsideColor = vec4(0.2, 0.2, 0.25, 1.0);\n    const vec4 circleColors[4] = vec4[](\n        vec4(1.0, 0.9, 0.0, 1.0),\n        vec4(1.0, 0.0, 0.0, 1.0),\n        vec4(0.0, 1.0, 0.0, 1.0),\n        vec4(0.0, 0.0, 1.0, 1.0));\n    const int circleChildren[12] = int[](\n        1, 2, 3,\n        2, 3, 0,\n        3, 0, 1,\n        0, 1, 2);\n    const vec2 topLeftOffset = vec2(-0.45, 0.3);\n    const vec2 topRightOffset = vec2(0.45, 0.3);\n    const vec2 bottomOffset = vec2(0.0, -0.5);\n\n\n    vec2 pos = uv;\n    float scale = 1.0;\n    if (length(pos) * scale <= 1.0) {\n        int currentColor = 0;\n        for (int i = 0; i < NEST_DEPTH; i++) {\n            #ifdef ANIMATE\n            float theta = i % 2 == 0 ? iTime * 0.5 : iTime * -0.5;\n            mat2 rotMat = mat2(\n                cos(theta), -sin(theta),\n                sin(theta), cos(theta));\n            pos *= rotMat;\n            #endif\n            \n            float smallerScale = scale * SIZE_RATIO;\n            if (length(pos - topLeftOffset * scale) <= smallerScale) {\n                pos -= topLeftOffset * scale;\n                scale = smallerScale;\n                currentColor = circleChildren[currentColor * 3];\n            } else if (length(pos - topRightOffset * scale) <= smallerScale) {\n                pos -= topRightOffset * scale;\n                scale = smallerScale;\n                currentColor = circleChildren[currentColor * 3 + 1];\n            } else if (length(pos - bottomOffset * scale) <= smallerScale) {\n                pos -= bottomOffset * scale;\n                scale = smallerScale;\n                currentColor = circleChildren[currentColor * 3 + 2];\n            } else {\n                break;\n            }\n        }\n        float gradient = 1.0 - 0.5 * dot(pos, pos) / (scale * scale);\n        return circleColors[currentColor] * gradient;\n    } else {\n        float gradient = min(dot(pos, pos) * 0.25, 1.0);\n        return outsideColor * gradient;\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    fragColor = nestedCircles(uv);\n}","name":"Image","description":"","type":"image"}]}