{"ver":"0.1","info":{"id":"4s3SD2","date":"1461444562","viewed":218,"name":"Flow (Figure in report)","username":"imagicien","description":"Render I have done for a report for project 'Le Lounge' at Universite de Sherbrooke.\n\nHold the left mouse button to see something HOT.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["perlin"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Render done for a report for project \"Le Lounge\"\n// Carl Lemaire, UniversitÃ© de Sherbrooke\n\n#define X0 0.0\n#define Y0 0.5\n#define ALIVE_RADIUS 0.3\n#define DIEOUT_SIGMA 0.35\n#define Y_AXIS_SCALE 0.625\n\nvec3 getColor(float value)\n{\n    return clamp(vec3(\n        3.0 *  value,\n        3.0 * (value - 0.33),\n        3.0 * (value - 0.67)\n        ), 0.0, 1.0);\n}\n\nfloat dieOut(vec2 p)\n{\n    float dieOutSigma = DIEOUT_SIGMA * 1.0;\n\n    float x = p.x - X0;\n    float y = (p.y - Y0) * Y_AXIS_SCALE;\n    float rho = sqrt(x*x + y*y);\n\n    if (rho <= ALIVE_RADIUS)\n    {\n        return 1.0;\n    }\n    else\n    {\n        rho = rho - ALIVE_RADIUS;\n        return exp(-rho*rho / (2.0*dieOutSigma*dieOutSigma));\n    }\n}\n\n// Noise function adapted from a shader found on ShaderToy.com\nfloat hash(float n) { return fract(sin(n)*753.5453123); }\nfloat noise(in vec3 x)\n{\n    // Perlin noise\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n    f = f*f*(3.0 - 2.0*f);\n\n    float n = p.x + p.y*157.0 + 113.0*p.z;\n    return mix(mix(mix(hash(n + 0.0),   hash(n + 1.0),   f.x),\n                   mix(hash(n + 157.0), hash(n + 158.0), f.x), f.y),\n               mix(mix(hash(n + 113.0), hash(n + 114.0), f.x),\n                   mix(hash(n + 270.0), hash(n + 271.0), f.x), f.y), f.z);\n}\n\n#define SPACE_SCALE 16.0\n#define TIME_SCALE 0.2\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    float time = iTime * TIME_SCALE * (float(iMouse.z > 0.0) * 0.5 + 1.0);\n    float x = uv.x;\n    float y = uv.y;\n\n    // The more a pixel is far from the Synaesthesis core, the more it is transparent.\n    float dieOutIntensity = dieOut(uv);\n\n    // Fractal-like sum of noises; each element of the sum has its own a frequency range.\n    // Adding up multiple noises gives a much more interesting and smooth effect.\n    float noiseIntensity = \n        noise(vec3(x, y,  time * 1.0) * SPACE_SCALE *  1.0) /  1.0 +\n        noise(vec3(x, y, -time * 1.2) * SPACE_SCALE *  2.0) /  2.0 +\n        noise(vec3(x, y,  time * 1.4) * SPACE_SCALE *  4.0) /  4.0 +\n        noise(vec3(x, y, -time * 1.6) * SPACE_SCALE *  8.0) /  8.0 +\n        noise(vec3(x, y,  time * 1.8) * SPACE_SCALE * 16.0) / 16.0 +\n        0.0;\n\t//noiseIntensity /= (1.0 + 1.0/2.0 + 1.0/4.0 + 1.0/8.0 + 1.0/16.0);\n    \n    float gray = dieOutIntensity - (1.0 - dieOutIntensity) * noiseIntensity;\n    \n    if (iMouse.z > 0.0)\n    \tfragColor = vec4(getColor(gray), 1.0);\n    else\n    \tfragColor = vec4(vec3(gray), 1.0);\n}","name":"Image","description":"","type":"image"}]}