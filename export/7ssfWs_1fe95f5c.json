{"ver":"0.1","info":{"id":"7ssfWs","date":"1645571192","viewed":76,"name":"Major scale example","username":"Chosko","description":"A Major scale repeated over and over","likes":3,"published":1,"flags":40,"usePreview":0,"tags":["sound","music"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Plot function taken from another shader I can't find anymore\nfloat plot(vec2 uv, vec2 p, vec2 pDelta){\n  vec2 delta = pDelta - p;\n  float cosPhi = delta.x / length(delta); //cos(atan(delta.y, delta.x));\n  float height = LINE_WIDTH / 2.0 / max(cosPhi, .04);\n  float d = abs(uv.y - p.y) - height;\n  return smoothstep(0.01, 0.0, d);\n}\n\nvoid mainImage( out vec4 O, in vec2 U )\n{\n    O -= O;\n    vec2 pSize = vec2(1.0) / iResolution.xy;\n    U = U / iResolution.xy;\n    \n    int graphId = int(floor(U.y * 4.));\n    U.y = fract(U.y * 4.) - .5;\n    \n    vec4 p = PLOT_HEIGHT * texture(iChannel0, vec2(U.x, 0.0)).xyzw;\n    vec4 pDelta = PLOT_HEIGHT * texture(iChannel0, vec2(U.x + pSize.x, 0.0)).xyzw;\n\n    vec3 leftColor = vec3(1., .8, .4);\n    vec3 rightColor = vec3(.6, .6, .9);\n\n    switch(graphId) {\n        case 3: O.xyz = vec3(plot(U, vec2(U.x, p.x), vec2(U.x + pSize.x, pDelta.x))) * leftColor;\n            break;\n        case 2: O.xyz = vec3(plot(U, vec2(U.x, p.y), vec2(U.x + pSize.x, pDelta.y))) * rightColor;\n            break;\n        case 1: O.xyz = vec3(plot(U, vec2(U.x, p.z), vec2(U.x + pSize.x, pDelta.z))) * leftColor;\n            break;\n        case 0: O.xyz = vec3(plot(U, vec2(U.x, p.w), vec2(U.x + pSize.x, pDelta.w))) * rightColor;\n            break;\n    }\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec2 mainSound( int samp, float time )\n{\n    vec2 s = sound(STIME, time);\n    \n    return s;\n}","name":"Sound","description":"","type":"sound"},{"inputs":[],"outputs":[],"code":"// PLOT\n#define LINE_WIDTH 0.003\n#define PLOT_LENGTH_HIGH_SCALE (0.02 * TIMESCALE)\n#define PLOT_LENGTH_LOW_SCALE (1.0 * TIMESCALE)\n#define PLOT_HEIGHT 1.0\n\n// COMMON\n#define TIMESCALE 1.0\n#define TIME (iTime * TIMESCALE)\n#define STIME (time * TIMESCALE)\n#define PI2 6.28318530718\n\n// SOUND FEATURES\n#define HARDNESS 0.001\n\n\nfloat square (float time, float pitch) {\n    return (step(fract(time * pitch), 0.5) - .5) * 2.;\n}\n\nfloat saw (float time, float pitch) {\n    return fract(time * pitch);\n}\n\nfloat sine (float time, float pitch) {\n    return sin(time * pitch * PI2);\n}\n\nfloat note (float signal, float time, float start) {\n    return \n        smoothstep(start, start + HARDNESS, time) *\n        exp(-4. * (time - start)) * signal;\n}\n\nfloat emix (float start, float end, float t) {\n    return exp2(mix(log2(start), log2(end), t));\n}\n\nfloat majorScale (float x) {\n    return floor(x * 7.)/12. * 2. - (floor(x) / 12.) - floor(x + 4./7.) / 12.;\n}\n\nvec2 sound( float time, float unscaledTime )\n{\n    float t = fract(time / 8.) * 8.;\n    \n    float baseTone = 220.;\n    \n    float pitch = emix(baseTone, 2.0 * baseTone, majorScale(t / 7.));\n    float signal = sine(unscaledTime, pitch);\n    \n    float sound = \n        note(signal, t, 0.) +\n        note(signal, t, 1.) +\n        note(signal, t, 2.) +\n        note(signal, t, 3.) +\n        note(signal, t, 4.) +\n        note(signal, t, 5.) +\n        note(signal, t, 6.) +\n        note(signal, t, 7.) +\n        note(signal, t, 8.);\n    \n    return vec2(sound, sound);    \n}","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 O, in vec2 U )\n{\n    O -= O;\n    \n    U = U / iResolution.xy;\n    \n    // High scale\n    float t = TIME - ((1.0 - U.x) * PLOT_LENGTH_HIGH_SCALE);\n    O.xy = sound(t, iTime);\n    \n    // Low scale\n    t = TIME - ((1.0 - U.x) * PLOT_LENGTH_LOW_SCALE);\n    O.zw = sound(t, iTime);\n}","name":"Buffer A","description":"","type":"buffer"}]}