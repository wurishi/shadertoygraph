{"ver":"0.1","info":{"id":"msd3Dj","date":"1677871022","viewed":183,"name":"smooth mandelbrot - Mikeyaboy","username":"mikeyaboy","description":"Interpolated mandelbrot escape time coloring.","likes":3,"published":3,"flags":0,"usePreview":0,"tags":["mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define iters 500\n#define power 2.0\n#define AA 1\n\nfloat mandelbrotSmooth(vec2 c)\n{\n    vec2 z = c;\n    float ret;\n    float d;\n    float a;\n    for(int i = 0; i<iters; i++)\n    {\n        d = length(z);\n        if(d>4.0) break;\n        a = atan(z.x, z.y);\n        \n        d = pow(d, power);\n        a*=power;\n        z = vec2(sin(a)*d, cos(a)*d)+c;\n        ret = float(i);\n        \n    }\n    if(ret+1.0 == float(iters)) ret = 0.0;\n    float sm = float(ret) - log2(max(1.0, log2(d)));\n    return sm;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv-=0.5;\n    uv.x*=iResolution.x/iResolution.y;\n    uv*=3.0;\n    uv/=pow(10.0, (-0.5*cos(iTime/10.0)+0.5)*5.5);\n    uv-=vec2(-0.100013, 0.748);\n    \n    float final = 0.0;\n\n    // Time varying pixel color\n    vec3 col = 1.0-vec3((0.5*cos(mandelbrotSmooth(uv)/5.0)+0.5));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}