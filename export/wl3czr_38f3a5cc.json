{"ver":"0.1","info":{"id":"wl3czr","date":"1608601763","viewed":111,"name":"Koi Pond","username":"xingyzt","description":"Fish AI is done outside of shader as this is being developed for a mobile app. Might implement it here as a buffer someday though.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fish","koi"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* \n * Koi Pond by Xing Liu (MIT License, 2020)\n * [WIP]\n *\n * Includes code by...\n * - Dave Hoskins: Hash without Sine (https://www.shadertoy.com/view/4djSRW)\n * - Inigo Quilez: 2D SDFs (https://iquilezles.org/articles/distfunctions2d)\n *\n */\n\n//-- UTILS\nfloat smin(float a, float b, float k)\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\nmat2 rot(float theta)\n{\n    float x = cos(theta);\n    float y = sin(theta);\n    return mat2(x,-y,y,x);\n}\n\nfloat gradient(vec2 p)\n{\n    return texture2D(gradientSampler,p-.5).r-.5;\n}\n//-- DISTANCE FUNCTIONS\nfloat sdCircle( vec2 p, float r )\n{\n    return length(p) - r;\n}\nfloat sdDroplet( vec2 p, float r )\n{\n    return length(p-vec2(0,r)) - r;\n}\nfloat sdEgg( vec2 p, float r )\n{\n    const float k = sqrt(3.0);\n    p.x = abs(p.x);\n    return ((p.y<0.0)       ? length(vec2(p.x,  p.y    )) - r :\n            (k*(p.x+r)<p.y) ? length(vec2(p.x,  p.y-k*r)) :\n                              length(vec2(p.x+r,p.y    )) - 2.0*r);\n}\nfloat sdFins(vec2 p, float r, float size)\n{\n    float side = sign(p.x)*PI/2.;\n    p.x = abs(p.x)-r/2.-size*3.;\n    return smin(\n        sdCircle(p-vec2(0,cos(4.*iTime+p.y*8.+side)/8.-r/8.)/4.,size/2.),\n        sdCircle(p,size),\n        1.2*r\n    );\n}\nfloat sdTail(vec2 p)\n{      \n    float d = 1.;\n    for(float i = 0.; i<4.; i++){\n        float t = 3.*iTime;\n        vec2 q = vec2(\n            cos(0.9*t+i*PI/2.)/24.,\n            sin(1.1*t+i*PI/2.)/64.\n        );\n        d = min(d,\n            sdCircle(p-q,0.)\n        );\n    }\n    return d;\n}\nvec3 palette(float style)\n{\n    float s = mod(style,10.);\n    \n    if ( s<1. )\n        return vec3(.1,.1,.2); // black\n\n    if ( s<2. )\n        return vec3(.96,.33,.13); // chestnut\n\n    if ( s<3. )\n        return vec3(.9,.2,.2); // red\n        \n    if ( s<4. )\n        return vec3(.9,.8,.8); // white\n        \n    if ( s<5. )\n        return vec3(.8,.8,.9); //sky\n        \n    if ( s<6. )\n        return vec3(.9,.3,.2); // orange\n        \n    if ( s<7. )\n        return vec3(.9,.6,.7); // pink\n        \n    if ( s<8. )\n        return vec3(.9,.9,.8); // sand\n        \n    if ( s<9. )\n        return vec3(.3,.3,.9); // blue\n    \n    return vec3(.99,.72,.33); // gold\n    \n}\nvec4 Koi(vec2 p,float style)\n{    \n    vec3 primary = palette(style);\n    vec3 col = vec3(0);\n\n    float d = 1.;\n\n    float R = MAX_KOI_SIZE / (1.+fract(style)/4.);\n    float r =    0.20*R; // length of koi's semi-minor axis\n    float body = 0.50*R;\n    float tail = 0.10*R;\n    float fins = 0.04*R;\n    float eyes = 0.02*R;\n\n    float dx = sin(4.*(iTime+style)+p.y*4.);\n    dx /= 8.;\n    dx *= p.y;\n    p.x += dx;\n\n    d = sdEgg(p,r); // body\n    \n    d = smin(d,\n        sdCircle(p+r*V,r/2.),\n        1.5*r); // head\n    d = smin(d,\n        sdDroplet(p-body*V,tail),\n        1.8*r); // tail\n    d = smin(d,\n        sdTail(p-(body+tail*1.5)*V),\n        1.4*r);\n\n    float sdEyes = length(vec2(abs(p.x)-5.*eyes,p.y+1.2*r));\n\n    float f = sdFins(p,r,fins);\n\n    {\n        vec2 q = (p+fract(style))/MAX_KOI_SIZE;\n\n        float mask = gradient(q/2.);\n        mask /= 1e1;\n        \n        vec3 secondary = palette(style+2.);\n        \n        col = mix(primary,secondary,smoothstep(aa,-aa,mask));\n        col = mix(secondary,col,smoothstep(aa,-aa,(p.y-body*.5)/r/2e2));\n        col = mix(primary,col,smoothstep(aa,-aa,(d-f)/r/2e2));\n        \n        if(sdEyes<eyes) col = vec3(0);\n    }\n\n    d = min(d,f);\n\n    col = clamp(col,0.,1.);\n    \n    return vec4(col,d);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.0*fragCoord-iResolution.xy)/min(iResolution.x,iResolution.y); // normalize coordinates    \n    vec4 col = vec4(0);\n\n    for(int id=0; id<MAX_POPULATION; id++) // front to back\n    {\n        if(id==population) break;\n\n        vec4 koi = kois[id];\n        \n        vec2 p = koi.xy;\n        float style = koi.w;\n     \n        p += uv;\n        p = mod(p-1.,2.)-1.; // tile\n        p *= rot(koi.z);\n        \n        if(length(vec2(p.x*2.,p.y*1.4-.1))>MAX_KOI_SIZE) continue; // skip to next koi if outside bounding circle\n        vec4 koiCol = Koi(p,style); // exact bounds\n\n        col = mix(col,vec4(koiCol.rgb,1.),smoothstep(aa,-aa,koiCol.a));        \n    }\n    fragColor = col;  \n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"const vec4 kois[4] = vec4[4](vec4(.3,0.5,4.,8.1234),vec4(0.02),vec4(-.1,-.1,-.1,9.3452),vec4(-.5,-.5,-.5,2.999));\nconst vec2 ripples[2] = vec2[2](vec2(.234,.134534),vec2(-.234,-1.34));\nconst int SEED = 23;\nconst int population = 4;\n\nconst int MAX_POPULATION = 64;\nconst int RIPPLE_COUNT = 2;\nconst float MAX_KOI_SIZE = .25;\nconst float PI = 3.14159;\nconst float TAU = 6.28319;\nconst float PHI = 1.61803;\nconst vec2 V = vec2(0,1);\nconst vec2 H = vec2(1,0);\n\n#define aa 3./iResolution.x\n\n\n#define texture2D g\n#define gradientSampler 0.\n\n\nvec2 hash2(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nvec3 g(float a, vec2 p )\n{\n    p *= 4.;\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n\t\n\tvec2 u = f*f*(3.0-2.0*f);\n\n    return vec3(mix( mix( dot( hash2( i + vec2(0,0) ), f - vec2(0,0) ), \n                     dot( hash2( i + vec2(1,0) ), f - vec2(1,0) ), u.x),\n                mix( dot( hash2( i + vec2(0,1) ), f - vec2(0,1) ), \n                     dot( hash2( i + vec2(1,1) ), f - vec2(1,1) ), u.x), u.y))+.5;\n}\n","name":"Common","description":"","type":"common"}]}