{"ver":"0.1","info":{"id":"wtScR1","date":"1593699511","viewed":130,"name":"Binet fractal","username":"stduhpf","description":"A fractal based on the binet formula, which is some kind of half-twisted hyperbolic sine which gives the n-th fibonnaci number when you input n. Inspired by [url=https://youtu.be/ghxQA3vvhsk?t=251]matt parker's video[/url].","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nBinet Fractal\nAntialiasing using FabriceNeyret2's trick (see at the end)\nIt's visualizing the evolution of the series u(n) = B(u(n-1))\nwith B being the Binet's formula: B(z) = (phi^z-(-phi)^(-z))/sqrt(5.),\n(phi is the golden ratio: (1.+sqrt(5.))/2.)\nNote that B(n) is the n-th term of the Fibonacci sequence\n*/\n#define mainImage _mainImage\n\n\nvec2 toPol(vec2 a){\n return vec2(length(a),atan(a.y,a.x));\n}\nvec2 toAlg(vec2 a){\n return a.x*vec2(cos(a.y),sin(a.y));\n}\n\nvec2 cpow(vec2 a, vec2 b){//complex exponentiation using the polar form of the numbers\n \ta= toPol(a);\n    return toAlg(vec2(pow(a.x,b.x)*exp(-b.y*a.y),b.y*log(a.x)+b.x*a.y));\n}\n\n\nvec2 binet(vec2 n){\n    const float phi = .5+.5*sqrt(5.);\n    const float minvphi = .5-.5*sqrt(5.);//-1./phi == 1.-phy, it's a property of the golden ration\n    return (cpow(vec2(phi,0.),n)-cpow(vec2(minvphi,0.),n))/sqrt(5.);\n} \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float scale = exp2(6.-25.*iMouse.x/iResolution.x-(iMouse.x<=0.?6.:0.))*2./iResolution.x;\n    vec2 uv = (fragCoord-.5*iResolution.xy)*scale;\n    float d = 1e6;\n    vec2 z  =uv;\n    bool div = false;\n    for(int i =0;i<64;i++){\n        uv=-binet(uv);\n        d=min(d,.01*length(uv.yx-z)/scale);\n        bvec2 a = isinf(uv),b=isnan(uv);\n\t\tif(div=(a.x||a.y||b.x||b.y))\n            break;\n        z=uv;\n    }\n   \n\t\n    fragColor = clamp(sqrt(vec4(toPol(z)/6.+vec2(0.,.5),d,1.0)),0.,1.);\n    \n}\n\n\n//Plug and play AA by FabriceNeyret : https://www.shadertoy.com/view/WlfyW8 (adapted because an update broke it)\n#undef mainImage\n#define AA 3\nvoid mainImage(out vec4 O,vec2 U){                                 \n    vec4 T;                                            \n    for (int k=0; k<AA*AA; k++, O+=T*T)                  \n        _mainImage(T,U+.33*vec2(k%AA-AA/2,k/AA-AA/2));  \n    O /= float(AA*AA);\t\t\t\t\t\t\t\t\t\n    O=sqrt(O);\n}\n        \n","name":"Image","description":"","type":"image"}]}