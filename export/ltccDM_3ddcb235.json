{"ver":"0.1","info":{"id":"ltccDM","date":"1532839691","viewed":147,"name":"breathe","username":"TanayStyle","description":"first attempt at shaders","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["sin"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sin01(float x) {\n\treturn (sin(x) + 1.) / 2.;\n}\n\nfloat cos01(float x) {\n\treturn (cos(x) + 1.) / 2.;\n}\n\nfloat map01(float x, float min, float max) {\n    return x*(max - min) + min;\n}\n\nfloat sinClamped(float x, float min, float max) {\n\treturn map01(sin01(x), min, max);\n}\n\nfloat cosClamped(float x, float min, float max) {\n\treturn map01(cos01(x), min, max);\n}\n\nfloat f(vec2 uv, float t, float c) {\n    return smoothstep(c, 0., pow(length(uv), t));\n}        \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Even out coordinate system\n    float aspectRatio = iResolution.x / iResolution.y;\n    vec2 uv = 2.*((fragCoord/iResolution.xy) - 0.5);\n\tuv.x *= aspectRatio;\n    \n    float t = iTime + 3.14;\n    \n    // Define dilation for each color\n    float redDil = cosClamped(t, .6, 2.);\n    float greenDil = sinClamped(t, .5, 1.);\n    float blueDil = sinClamped(t, .6, 2.);\n    \n    // Define size for each color\n    float minSize = 0.8;\n    float maxSize = 1.2;\n    \n    float redSize = sinClamped(t, minSize, maxSize);\n    float greenSize = cosClamped(t, minSize, maxSize);    \n    float blueSize = greenSize;\n    \n    // Set colors\n    float r = f(uv, redDil, redSize);\n    float g = f(uv, greenDil, greenSize);\n    float b = f(uv, blueDil, blueSize);\n    \n    vec3 col = vec3(r, g, b);\n    fragColor = vec4(col, 1.);   \n}","name":"Image","description":"","type":"image"}]}