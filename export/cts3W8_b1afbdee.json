{"ver":"0.1","info":{"id":"cts3W8","date":"1671701918","viewed":162,"name":"Bezier from Tutorial","username":"MeDope","description":"Thanks BigWings for nice quadratic bezier explanation!\nMade a cubic one after watching your tutorial.\n(https://www.youtube.com/watch?v=a4zMX6dDVXI)","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["2d","noise","tutorial","bezier","random","glow","curve","cubic","bigwings"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//#define RANDOM_POINTS\n#define GLOW_MODE\n#define STEPS 50\n\n#define saturate(x) clamp(x, 0.0, 1.0)\n#if defined(GLOW_MODE)\n#define circle(p, s) saturate(0.5 * s / saturate(length(p)))\n#define line(p, x, y, s) saturate(0.5 * s / saturate(length(p - x - (y - x) * saturate(dot(p - x, y - x) / dot(y - x, y - x)))))\n#else\n#define st0(x) saturate((x) / fwidth(x) + 0.5)\n#define circle(p, s) st0(-length(p) + s)\n#define line(p, x, y, s) st0(-length(p - x - (y - x) * saturate(dot(p - x, y - x) / dot(y - x, y - x))) + s)\n#endif\n#define interpolate(A, B, C, D, x) mix(mix(mix(A, B, x), mix(B, C, x), x), mix(mix(B, C, x), mix(C, D, x), x), x)\n#define m ((iMouse.xy - 0.5 * iResolution.xy) / iResolution.x)\n#define rndpos(X, Y, Z) vec2(noise(vec2(X, Y) + Z - 91.7125), noise(vec2(X, Y) + Z + 27.8751)) * vec2(0.5, 0.3)\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.x;\n\n    float\n        t = iTime + 1.0,\n        t1 = sin(t * 0.4) * 0.5 + 0.5,\n        t2 = sin(t * 2.5) * 0.5 + 0.5,\n        t3 = sin(t * 2.5) * 0.4 + 0.6;\n    vec2 \n#if defined(RANDOM_POINTS)\n        A = iMouse.x / iResolution.x != 0.0 ? m : rndpos(31.4274, 12.5277, iTime*0.1),\n        B = rndpos(92.7432, 51.2335, iTime*0.1),\n        C = rndpos(19.3591, 42.1356, iTime*0.1),\n        D = rndpos(14.6731, 36.2925, iTime*0.1),\n#else\n        A = vec2(-0.43, 0.24*sin(t)),\n        B = iMouse.x / iResolution.x != 0.0 ? m : vec2(-0.26,-0.26),\n        C = vec2(+0.18,+0.27*cos(t-0.33)),\n        D = vec2(+0.43,-0.24*sin(t)),\n#endif\n        AB = mix(A, B, t1),\n        BC = mix(B, C, t1),\n        CD = mix(C, D, t1),\n        ABC = mix(AB, BC, t1),\n        BCD = mix(BC, CD, t1),\n        ABCD = mix(ABC, BCD, t1),\n        P1,\n        P2 = A;\n    vec3 \n        c = vec3(0);\n\n    for(int i = 0; i <= STEPS; i++)\n    {\n        float x = float(i) / float(STEPS);\n        P1 = interpolate(A, B, C, D, x);\n        c = max(c, line(uv, P1, P2, 0.002) * t3);\n        P2 = P1;\n    }\n    \n    c = max(c, line(uv, A, B, 0.0015) * 0.5 * t2);\n    c = max(c, line(uv, B, C, 0.0015) * 0.5 * t2);\n    c = max(c, line(uv, C, D, 0.0015) * 0.5 * t2);\n    c = max(c, line(uv, AB, BC, 0.002) * 0.5 * t2);\n    c = max(c, line(uv, BC, CD, 0.002) * 0.5 * t2);\n    c = max(c, line(uv, ABC, BCD, 0.0025) * 0.5 * t2);\n    \n    c = max(c, vec3(1,0,0)*circle(uv - A, 0.006));\n    c = max(c, vec3(1,0,0)*circle(uv - B, 0.006));\n    c = max(c, vec3(1,0,0)*circle(uv - C, 0.006));\n    c = max(c, vec3(1,0,0)*circle(uv - D, 0.006));\n    c = max(c, vec3(0,1,0)*circle(uv - AB, 0.004));\n    c = max(c, vec3(0,1,0)*circle(uv - BC, 0.004));\n    c = max(c, vec3(0,1,0)*circle(uv - CD, 0.004));\n    c = max(c, vec3(0,0,1)*circle(uv - ABC, 0.005));\n    c = max(c, vec3(0,0,1)*circle(uv - BCD, 0.005));\n    c = max(c, circle(uv - ABCD, 0.008));\n    \n    fragColor = vec4(c, 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// The MIT License\n// Copyright Â© 2013 Inigo Quilez\nvec2 hash(vec2 p)\n{\n\tp = vec2(dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)));\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise(in vec2 p)\n{\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\n\tvec2  i = floor( p + (p.x+p.y)*K1 );\n    vec2  a = p - i + (i.x+i.y)*K2;\n    float m = step(a.y,a.x); \n    vec2  o = vec2(m,1.0-m);\n    vec2  b = a - o + K2;\n\tvec2  c = a - 1.0 + 2.0*K2;\n    vec3  h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\tvec3  n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n    return dot( n, vec3(70.0) );\n}","name":"Common","description":"","type":"common"}]}