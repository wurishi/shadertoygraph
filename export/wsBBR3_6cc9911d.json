{"ver":"0.1","info":{"id":"wsBBR3","date":"1590513010","viewed":403,"name":"SDF for Moss's Egg - for comment","username":"sylvain69780","description":"SDF for Moss's Egg\n[url]https://en.wikipedia.org/wiki/Moss%27s_Egg[/url]","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["2d","sdf","egg","moss"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n    SDF for Moss's Egg - for comment\n    --------------------------------\n\n    As I just discovered the magic of distance functions, I had the idea to try\n    the calculation for the Moss's Egg, found in an elementary school math lesson.\n    There is many \"Egg's shape\" formulas and there is no clear definition for it.\n    \n    Related references:\n    \n    IQ Distance functions\n    https://iquilezles.org/articles/distfunctions2d\n    \n    Simple Egg - distance 2D \n    https://www.shadertoy.com/view/Wdjfz3\n    \n    Moss's egg - Wikipedia\n    https://en.wikipedia.org/wiki/Moss%27s_Egg\n\n*/\n\nfloat sdMossEgg( in vec2 p)\n{\n    p.x = abs(p.x);\n    return ((p.y <= 0.)          ? length(p)   - 1.0 :\n           ((p.y-1.0) > p.x)     ? length(p-vec2( 0.0,1.0)) - (2.-sqrt(2.)) : \n                                   length(p-vec2(-1.0,0.0)) - 2.);\n}\n\n// 2 Other functions\n\n// Function without division to have more shapes (can be usefull) \n// Moss's Egg with this fonction is simple with l=h=a  \n\nfloat sdEgg2( in vec2 p, float a,in float l, in float h )\n{\n    p.x = abs(p.x);\n    return ((p.y <= 0.)          ? length(p)   - a :\n           ((p.y-h)*l > p.x*h)   ? length(p-vec2(0.,h)) - ((a+l)-length(vec2(h,l))) : \n                                   length(p+vec2(l,0.)) - (a+l));\n}\n\n// Function that takes the diameters of the base and top circles and the elevation h.\n\nfloat sdEgg( in vec2 p, float a,in float b, in float h ) \n{\n    p.x = abs(p.x);\n    float r = (a-b);\n    h+=r;\n    float l=(h*h - r*r)/(2.*r);  \n    return ((p.y <= 0.)          ? length(p)   - a :\n           ((p.y-h)*l > p.x*h)   ? length(p-vec2(0.,h)) - ((a+l)-length(vec2(h,l))) : \n                                   length(p+vec2(l,0.)) - (a+l));\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // normalized pixel coordinates\n    vec2 uv = (fragCoord*2.0-iResolution.xy)/iResolution.y;\n    \n    // animation\n    float t =            3.14*(0.5+0.5*cos(iTime*0.52));\n    vec2  w = vec2(0.50,0.25)*(0.5+0.5*cos(iTime*vec2(1.1,1.3)+vec2(0.0,2.0)));\n    float a=0.5+0.1*sin(iTime/2.);    \n    // all gives Moss's Egg but you can change parameters.\n //   float len = sdEgg2(uv+vec2(0.,0.2),a,a,a);\n //   float len = sdEgg(uv+vec2(0.,0.2),a,a*(2.-sqrt(2.)),a*(2.-sqrt(2.)))\n    float len = sdMossEgg((uv+vec2(0.,0.2))/a)*a;\n    // coloring\n    vec3 col = vec3(1.0) - sign(len)*vec3(0.1,0.4,0.7);\n\tcol *= 1.0 - exp(-2.0*abs(len));\n\tcol *= 0.8 + 0.2*cos(128.0*abs(len));\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.015,abs(len)) );\n\n\tfragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}