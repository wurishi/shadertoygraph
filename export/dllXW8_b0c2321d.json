{"ver":"0.1","info":{"id":"dllXW8","date":"1674702717","viewed":119,"name":"magnify brightness","username":"cwervo","description":"magnifies brightness from the webcam","likes":0,"published":1,"flags":2,"usePreview":0,"tags":["luma"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415\n// this is a common glsl function of unknown origin to convert rgb colors to luminance\n// it performs a dot product of the input color against some known values that account for our eyes perception of brighness\n// Adam Ferriss pulled this one from here https://github.com/hughsk/glsl-luma/blob/master/index.glsl\nfloat luma(vec3 color) {\n  return dot(color, vec3(0.299, 0.587, 0.114));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n     // float i = iTime;\n     vec2 uv = fragCoord.xy / iResolution.xy;\n     \n     vec4 pixels = texture(iChannel0,uv);\n     \n     \n     float lumaValue = luma(pixels.rgb);\n     \n     if (lumaValue > 0.99) {\n         //pixels.rgb *= 0.75;\n         pixels.r *= 10.0;\n     } else {\n         pixels.rgb *= 0.25;\n     }\n     fragColor = pixels;\n}","name":"Image","description":"","type":"image"}]}