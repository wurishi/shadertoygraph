{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"texture","id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"// Created by inigo quilez - iq/2013\n//   https://www.youtube.com/c/InigoQuilez\n//   https://iquilezles.org/\n// I share this piece (art and code) here in Shadertoy and through its Public API, only for educational purposes. \n// You cannot use, sell, share or host this piece or modifications of it as part of your own commercial or non-commercial product, website or project.\n// You can share a link to it or an unmodified screenshot of it provided you attribute \"by Inigo Quilez, @iquilezles and iquilezles.org\". \n// If you are a teacher, lecturer, educator or similar and these conditions are too restrictive for your needs, please contact me and we'll work it out.\n\nvec3 deform( in vec2 p )\n{\n    float time = 0.5*iTime;\n    \n    vec2 q = sin( vec2(1.1,1.2)*time + p );\n\n    float a = atan( q.y, q.x );\n    float r = sqrt( dot(q,q) );\n\n    vec2 uv = p*sqrt(1.0+r*r);\n    uv += sin( vec2(0.0,0.6) + vec2(1.0,1.1)*time);\n         \n    return texture( iChannel0, uv*0.3).yxx;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = -1.0 + 2.0*fragCoord/iResolution.xy;\n\n    vec3  col = vec3(0.0);\n    vec2  d = (vec2(0.0,0.0)-p)/64.0;\n    float w = 1.0;\n    vec2  s = p;\n    for( int i=0; i<64; i++ )\n    {\n        vec3 res = deform( s );\n        col += w*smoothstep( 0.0, 1.0, res );\n        w *= .99;\n        s += d;\n    }\n    col = col * 3.5 / 64.0;\n\n\tfragColor = vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4sfGRn","date":"1357136829","viewed":12318,"name":"Radial Blur","username":"iq","description":"A GLSL version of the oldschool radialblur effect","likes":152,"published":3,"flags":0,"usePreview":0,"tags":["2d","blur","radial"],"hasliked":0,"parentid":"","parentname":""}}