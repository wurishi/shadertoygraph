{"ver":"0.1","info":{"id":"XsycRc","date":"1522728173","viewed":1644,"name":"rotation matrix","username":"romualdo97","description":"playing with rotations","likes":1,"published":1,"flags":0,"usePreview":1,"tags":["rotation","transformation","examples"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//#define DEBUG\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/512.0; \t\t\t\t\t\t\t// Divide by the image size\n    \n    // Rotation matrix\n    float theta = -uv.x*1.1; \t\t\t\t\t\t\t// negate for make positive the anti-clockwise direction\n    mat2 mat = mat2(vec2(cos(theta), sin(theta)), \t\t// first column (not row!)    \n             \t\tvec2(-sin(theta), cos(theta)));\t\t// second column\n    \n    vec2 tuv; // Transformed uv\n    \n#ifdef DEBUG\n   \ttuv = mat * uv;\t\t\t\t\t\t\t\t\t\t// Apply matrix transformation \n    fragColor = vec4(step(0.5, uv.x/*tuv.x*/));  \t\t\t\t// Output to screen\n#else\n    tuv = uv - 0.5;\t\t\t\t\t\t\t\t\t\t// Translate to desired pivot\n    vec4 texel = texture(iChannel0, mat * tuv + 0.5); \t// Read texel from texture\n    fragColor = texel;\n#endif\n}\n\n/*\nRead GLSL docs here:\n\t- Data Type (GLSL)\n\t\thttps://www.khronos.org/opengl/wiki/Data_Type_(GLSL)#Matrix_constructors\n\t- GLSL Programming/Vector and Matrix Operations\n\t\thttps://en.wikibooks.org/wiki/GLSL_Programming/Vector_and_Matrix_Operations\n*/","name":"Image","description":"","type":"image"}]}