{"ver":"0.1","info":{"id":"fdfXRn","date":"1618310008","viewed":89,"name":"Tunnel explorer","username":"theott","description":"Experimenting with raymarching. Learned most of  what is used here from BigWings' Youtube tutorials. Use mouse to look around. FPS is horrible (for now)","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"3tcfDM","parentname":"Raymarching for dummies - exp"},"renderpass":[{"inputs":[{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Inspiration :\n// \"ShaderToy Tutorial - Ray Marching for Dummies!\" \n// by Martijn Steinrucken aka BigWings/CountFrolic - 2018\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// https://youtu.be/PGtv-dBi2wE\n\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .01\n\nmat2 Rot(float a) {\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat smin( float a, float b, float k ) {\n    float h = clamp( 0.5+0.5*(b-a)/k, 0., 1. );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nvec3 dig(float i){\n    return vec3(sin(float(i)),cos(float(i)),1.);//vec3(-1,floor(sin(float(100*i)/seed)),floor(cos(seed*float(200*i))));\n}\n\nfloat tunnel(vec3 p, float seed){\n    float d = 10000.;\n    for(int i=0; i<50; i++) {\n        float size = sin(float(i)*1.02)+1.5;\n        //size *= 4.*(sin(iTime)*.5+1.);\n        d = smin(d, length(p)-size, 1.);\n        // displacement \n        d += sin(p.x*3.)*.05;\n        // same with time variation\n        // d += sin(p.x*3.*(1.+sin(iTime/5.)))*.05;\n        // texture displacement\n        //d -= length(texture(iChannel1, p.yz*.05))*0.02;\n        vec3 translation = dig(float(i));\n        p -= size*0.9 * translation/length(translation);\n    }\n    return d*.2;\n}\n\nfloat GetDist(vec3 p) {\n    vec3 q = abs(p-vec3(0)) - 100.;\n    float mbox = max(q.x, max(q.y, q.z));\n    \n    float tun = tunnel(p, 1.);\n    \n    vec3 q0 = abs(p-vec3(0)) - 2.;\n    float bbox = max(q0.x, max(q0.y, q0.z));\n\n    p.xz = mod(p.xz, 4.0);\n    p.xz *= Rot(iTime);\n    p.yz *= Rot(-.5);\n    \n    vec3 q1 = abs(p) - 1.2;\n    float box = max(q1.x, max(q1.y, q1.z));\n    \n    //float d = max(-box, mbox);\n    //float d = max(mbox, -bbox);\n    float d = max(mbox, -tun);\n       \n    return d;\n}\n\nvec2 RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    float hit = 0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST) {\n            hit = 1.;\n            break;\n        } else if (abs(dS)<SURF_DIST) break;\n    }\n    \n    return vec2(dO, hit);\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.01, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetLight(vec3 p, vec3 ro, vec3 lightPos, vec3 lightCol) {\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    vec3 v = normalize(ro-p);\n    \n    float dif = clamp(dot(n, l), 0., 1.);\n    vec2 ray = RayMarch(p+n*SURF_DIST*2., l);\n    float d = ray.x;\n    \n    //vec3 r = normalize(2.0 * n * dot(n,l) - l);\n    //float phong = clamp(dot(r,v), 0.5, 1.);\n    \n    float lightStrength = smoothstep(0.,pow(length(lightPos-p),2.),20.);\n    float directLightStrength = smoothstep(0.,pow(length(lightPos-ro),2.),20.);\n   \n    //twinkle\n    float twinkle = sin(11.*iTime)*.5+.5 + sin(7.*iTime)*.5+.5 + sin(5.*iTime)*.5+.5;\n    float twinkleAmount = .1;\n    twinkle = twinkle*twinkleAmount + 1.-twinkleAmount ;\n    lightStrength *= twinkle;\n    directLightStrength *= pow(twinkle,2.);\n\n    float phong = 0.;\n    float dl = 0.;\n    float shadowDist = length(lightPos-p) - d;\n    if(shadowDist > 0.) {\n        dif *= 0.2;\n    } else {\n        vec3 b = normalize(l + v);\n        phong = clamp(dot(b,n), 0., 1.);\n        phong = pow(phong, 300.);\n        phong *= .7; // limit phong\n        float lightAngle = dot(normalize(lightPos - ro), normalize(p - ro));\n        if (lightAngle > 0.999) dl += pow(lightAngle, 30000./directLightStrength);\n    }\n    \n    //phong=0.;\n    //dl=0.;\n    \n    // texture mapping\n    vec3 texelXZ = texture(iChannel0, p.xz*.5+.5).rgb;\n    vec3 texelYZ = texture(iChannel0, p.yz*.5+.5).rgb;\n    vec3 texelXY = texture(iChannel0, p.xy*.5+.5).rgb;\n    n = abs(n); \n    n = pow(n, vec3(3.));\n    n /= n.x+n.y+n.z;\n    vec3 texel = texelYZ*n.x + texelXZ*n.y + texelXY*n.z;\n    // vec2 uv = p.yz*.2;\n    // vec3 texel = texture(iChannel0, uv).rgb;\n    \n    phong *= pow(smoothstep(0.,1.,length(texel)),5.); //phong of texture\n    vec3 col = texel;\n    float ambient = lightStrength/4.; // variable ambient\n    col = col*(ambient+dif); // fake global illumination\n    col += phong;\n    col *= lightStrength; //(1./(length(lightPos - p))); // light attenuation\n    col += dl;//direct light\n    col *= lightCol; \n    col = pow(col, vec3(.4));\t// gamma correction\n    \n    //col = n;\n    \n    return col;\n}\n\nvec3 translation(float t){\n    return 6.*vec3(.5,0,1.2)*(sin(t)*.5+1.)+ vec3(0,.5,0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = vec3(0);\n    \n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec3 ro = vec3(0,0.5,-.5) + translation(iTime/4.);\n    vec3 rd = vec3(uv.x, uv.y, 1);\n    rd.yz *= Rot(smoothstep(iResolution.y, 0., iMouse.y) * 2. -1.); // X cam rot\n    rd.xz *= Rot(smoothstep(iResolution.x, 0., iMouse.x) * 4. -2.); // Y cam rot\n    rd = normalize(rd);\n\n    vec2 ray = RayMarch(ro, rd);\n    float d = ray.x;\n    float hit = ray.y;\n    \n    vec3 p = ro + rd * d;\n    vec3 LightTranslation = translation(iTime/2.);\n    \n    //white\n    vec3 LightPos = vec3(0);\n    LightPos += LightTranslation;\n    vec3 LightCol = vec3(1,.7,.6);\n    //green\n    //vec3 greenLightPos = vec3(0);//vec3(2.9*cos(iTime), sin(iTime)+1.1, sin(iTime));\n    //greenLightPos += LightTranslation;\n    //vec3 greenLightCol = vec3(0,1,0);\n    //red\n    //vec3 redLightPos = vec3(0);//vec3(2.9*cos(iTime + 2.0943), sin(iTime + 2.0943)+1.1, sin(iTime + 2.0943));\n    //redLightPos += LightTranslation;\n    //vec3 redLightCol = vec3(1,0,0);\n    //blue\n    //vec3 blueLightPos = vec3(0);//vec3(2.9*cos(iTime + 4.1887), sin(iTime + 4.1887)+1.1, sin(iTime + 4.1887));\n    //blueLightPos += LightTranslation;\n    //vec3 blueLightCol = vec3(0,0,1);\n    \n    col += GetLight(p,ro, LightPos, LightCol);\n    //col += GetLight(p, ro, greenLightPos, greenLightCol);\n    //col += GetLight(p, ro, redLightPos, redLightCol);    \n    //col += GetLight(p, ro, blueLightPos, blueLightCol); \n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}