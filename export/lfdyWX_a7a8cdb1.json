{"ver":"0.1","info":{"id":"lfdyWX","date":"1731283602","viewed":160,"name":"Particle explosion arcs","username":"halohalo","description":"Small particle effect resembling a small explosion","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["fire"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Random function\nfloat random(vec2 st) {\n    return fract(sin(dot(st.xy, vec2(12.9898,78.233))) * 43758.5453123);\n}\n\n// Returns velocity vector for a particle\nvec2 getParticleVelocity(float index, float seed) {\n    float angle = random(vec2(index, seed)) * 6.28; // Random angle\n    \n    // Base speed reduced by 30% with wider variation\n    float baseSpeed = 0.56;  // 0.8 * 0.7 = 0.56\n    float speedVariation = random(vec2(index, seed + 1.0)) * 0.6 + 0.7; // 0.7 to 1.3 multiplier\n    float speed = baseSpeed * speedVariation;\n    \n    return vec2(cos(angle), sin(angle)) * speed;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalize coordinates\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    \n    // Create explosion seed based on time\n    float seed = floor(iTime);\n    float t = fract(iTime);\n    \n    // Initialize color\n    vec3 color = vec3(0.0);\n    \n    // Number of particles\n    const int NUM_PARTICLES = 25;\n    \n    // Gravity effect (pulls particles down over time)\n    float gravity = 0.8;\n    \n    // Generate particles\n    for(int i = 0; i < NUM_PARTICLES; i++) {\n        float fi = float(i);\n        \n        // Get random velocity for this particle\n        vec2 velocity = getParticleVelocity(fi, seed);\n        \n        // Apply gravity effect to particle position\n        vec2 particlePos = velocity * t * 2.0;\n        particlePos.y -= gravity * t * t; // Quadratic fall-off for gravity\n        \n        // Distance from current pixel to particle\n        float dist = length(uv - particlePos);\n        \n        // Particle size shrinks over time\n        float size = 0.05 * (1.0 - t * 0.5);\n        \n        // Create soft particles with falloff\n        float brightness = smoothstep(size, 0.0, dist);\n        \n        // Fade out over time\n        brightness *= 1.0 - t;\n        \n        // Random color variation for each particle\n        vec3 particleColor = mix(\n            vec3(1.0, 0.3, 0.1), // Orange/red core\n            vec3(1.0, 0.8, 0.3), // Yellow/white hot\n            random(vec2(fi, seed + 2.0))\n        );\n        \n        // Add this particle's contribution\n        color += particleColor * brightness;\n    }\n    \n    // Add glow effect\n    color *= 1.2;\n    \n    // Output final color\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}