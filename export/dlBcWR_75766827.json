{"ver":"0.1","info":{"id":"dlBcWR","date":"1691644648","viewed":40,"name":"explore recursive fractals","username":"dingus","description":"fractals made out of recursively running functions in an odd way, use WASD to move and the UP and DOWN arrows to zoom out and zoom in\nfeel free to change the function and comment on what cool functions you found output cool fractals","likes":1,"published":1,"flags":48,"usePreview":0,"tags":["fractal","map","recursive","function"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// WASD to move and the UP and DOWN arrows to zoom out and zoom in\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy*texelFetch(iChannel1, ivec2(0, 0), 0).x;\n    \n    uv += texelFetch(iChannel0, ivec2(0, 0), 0).xy;\n\n    vec3 col = vec3(uv.x);\n    for (int i = 0; i < 10; i++)\n    {\n        // feel free to change the function and tell me what you find\n        col = sin(log(col * uv.y * 2.));\n    }\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const int KEY_LEFT  = 65;\nconst int KEY_RIGHT = 68;\nconst int KEY_UP    = 87;\nconst int KEY_DOWN  = 83;\n\nvec2 keyboardMovement(vec2 movement) {\n    float velocity = 0.05*texelFetch(iChannel2, ivec2(0, 0), 0).x;\n    \n    vec2 left = texelFetch(iChannel1, ivec2(KEY_LEFT, 0), 0).x * vec2(-1, 0);\n    vec2 right = texelFetch(iChannel1, ivec2(KEY_RIGHT, 0), 0).x * vec2(1, 0);\n    vec2 up = texelFetch(iChannel1, ivec2(KEY_UP, 0), 0).x * vec2(0, 1);\n    vec2 down = texelFetch(iChannel1, ivec2(KEY_DOWN,0), 0).x * vec2(0, -1);\n    \n    movement += (left + right + up + down) * velocity;\n\n    return movement;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 movement = texelFetch(iChannel0, ivec2(0, 0), 0).xy;\n    \n    movement = keyboardMovement(movement);\n\n    fragColor = vec4(movement, 0, 0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"const int ZOOM_IN   = 38;\nconst int ZOOM_OUT  = 40;\n\nfloat keyboardZoom(float zoom)\n{\n    float velocity = .03*zoom;\n    \n    float zoomin = texelFetch(iChannel1, ivec2(ZOOM_IN,0),0).x;\n    float zoomout = texelFetch(iChannel1, ivec2(ZOOM_OUT,0),0).x;\n    \n    zoom += (zoomin - zoomout) * velocity;\n    \n    return zoom;\n} \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float zoom = texelFetch(iChannel0, ivec2(0, 0), 0).x;\n    \n    if (zoom == 0.0)\n    {\n        zoom = 10.0;\n    }\n    zoom = keyboardZoom(zoom);\n\n    fragColor = vec4(zoom, 0, 0, 0);\n}","name":"Buffer B","description":"","type":"buffer"}]}