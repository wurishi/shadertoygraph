{"ver":"0.1","info":{"id":"NllBWX","date":"1651579113","viewed":188,"name":"Storybook","username":"kopaka","description":"simple edge detection shader that uses the pixel color as edge color.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["edgedetection"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4df3Rr","filepath":"/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","previewfilepath":"/media/ap/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec2 step = vec2(1.0) / iResolution.xy;\n\n    // read 3x3 pixel neighborhood (c00 - c22)\n    // bottom row\n    vec3 c00 = texture(iChannel0, uv + vec2(-step.x, -step.y)).xyz;\n    vec3 c10 = texture(iChannel0, uv + vec2(    0.0, -step.y)).xyz;\n    vec3 c20 = texture(iChannel0, uv + vec2( step.x, -step.y)).xyz;\n    // middle row\n    vec3 c01 = texture(iChannel0, uv + vec2(-step.x,     0.0)).xyz;\n    vec3 c11 = texture(iChannel0, uv + vec2(    0.0,     0.0)).xyz;\n    vec3 c21 = texture(iChannel0, uv + vec2( step.x,     0.0)).xyz;\n    // top row\n    vec3 c02 = texture(iChannel0, uv + vec2(-step.x,  step.y)).xyz;\n    vec3 c12 = texture(iChannel0, uv + vec2(    0.0,  step.y)).xyz;\n    vec3 c22 = texture(iChannel0, uv + vec2( step.x,  step.y)).xyz;\n    \n    // calculate edges via color differences (horizontal, vertical and diagonal)\n    vec3 c = vec3(1.0);\n    float diag1 = dot(abs(c00-c22), c);\n    float diag2 = dot(abs(c20-c02), c);\n    float dx = dot(abs(c01-c21), c);\n    float dy = dot(abs(c10-c12), c);\n    \n    // d=0 => no color difference (flat surface)\n    // d=1 => color difference (edge)\n    float d = (dx+dy+diag1+diag2) / (dot(c11+c10+c02+c22,c) + 0.2);\n    //float d = (dx+dy+diag1+diag2);\n    d = 0.2 + d * 1.2;\n    \n    // brown paper background\n    vec3 background = vec3(0.82, 0.7, 0.55) * (texture(iChannel1, uv).r * 0.2 + 0.8);\n    // color of center pixel\n    vec3 foreground = c11;\n    \n    // mix color based on edge intensity\n    vec3 finalColor = mix(background, foreground, clamp(d, 0.0, 1.0));\n\n    // Output to screen\n    fragColor = vec4(finalColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}