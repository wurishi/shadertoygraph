{"ver":"0.1","info":{"id":"M3sBD7","date":"1728505683","viewed":41,"name":"Winding Noise","username":"curice","description":"the idea here is we compute the winding number to random lines at each grid vertex and then weight them with smoothstep weights. see the \"Notes\" comment for more info. Play with the controls in the shader :)","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["noise","numbers","atan","winding","shard","windingnumbers"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2024 Jake Rice\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n/*\n\nNotes:\n\nVery similar to Shard Noise from ENDESGA, and Cubism Noise from Brian Sharpe.\nthe idea here is we compute the winding number to random lines at each grid vertex and then weight them with smoothstep weights.\nThe upside to this method is it only relies on 4 sampling points, and the 3D version relies only on 8 sampling points.\nBy using winding numbers we also get the benefit of a known value range, in the base case it's always between -1 and 1.\nThe downside is unlike Shard Noise from ENDESGA this method doesn't smooth out over a wide range since it has a \nsmaller vertex neighborhood.\n\n\nI've also included a \"smooth\" version, which lets you shrink the shard size to some small value, removing the shard look.\n\n\nThis generalizes to 3D, instead of a line at each vertex it becomes a randomly oriented triangle.\n\n*/\n\n\n\n\n\n\n/* CONTROLS - PLAY WITH THESE!!!!!!!  */\n\n#define SMOOTH_NOISE 0\n\n#define ABS_NOISE 0\n\n#define SCROLL_NOISE 1\n\n#define FIT_VALS_BETWEEN_0_AND_1  0\n\n#define CLAMP_NEGATIVE_VALUES 0\n\n#define RANDOMIZE_SHARD_SIZE 1\n\n\n//noise settings:\n    const float NOISE_FREQUENCY = 2.0;\n    \n    \n//shard settings:\n\n    //regular shard size:\n    #if !SMOOTH_NOISE\n        //0 - 1, lower values will be darker, unless smooth noise is turned on\n        const float SHARD_SIZE = 1.0;\n    \n    //smooth noise shard size:\n    #else       \n        //0-1, lower values reduce the \"shard\"ness.\n        const float SHARD_SIZE = 1e-4;\n    \n    #endif\n\n\n    //0 - 1, jitters the shards positions\n    const float SHARD_JITTER_STRENGTH = 1.;\n\n\n\n//octaves settings:\n    const int NUMBER_OF_OCTAVES =5;\n    const float OCTAVE_BIAS = 0.5;\n\n\n/* END CONTROLS */ \n\n\n\n\n\n#define PI 3.1415926535\n\nfloat random (vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\n\nvec2 rand_dir(vec2 p){\n    float r = random(p);\n    r *= PI * 2.0;\n    return vec2(cos(r), sin(r));   \n\n}\n\nfloat interp(float u){\n    return 1.0 - smoothstep(0.0, 1.0, abs(u));\n}\n\nvec2 interp2(vec2 u){\n    return vec2(interp(u.x), interp(u.y));\n}\n\n\nfloat winding_noise(vec2 p, float shard_size){\n    vec2 noise_p = floor(p);\n    vec2 noise_f = fract(p);\n    \n    float out_val = 0.0;\n    \n    vec2 blend = interp2(noise_f);\n    \n    for(int i = 0; i <= 1; i++)\n    for(int j = 0; j <= 1; j++){\n\n        vec2 o = vec2(i,j);\n        \n        vec2 g = noise_p  + o;\n        \n        \n        vec2 r = rand_dir(g) * shard_size;\n        \n        #if RANDOMIZE_SHARD_SIZE\n        r *= random(g + vec2(352.));\n        #endif\n        \n        \n        vec2 offset =  rand_dir(rand_dir(g)) * random(g) * SHARD_JITTER_STRENGTH;\n        \n        vec2 v = o - noise_f;\n                \n        vec2 a =  normalize(v - r + offset);\n        vec2 b =  normalize(v + r + offset);\n\n        float detab = a.x * b.y - b.x * a.y;\n        float dotab = dot(a,b);\n        \n        //compute the winding number\n        float winding = -atan(detab,dotab) / PI;\n        \n        float s = winding;\n        \n        #if SMOOTH_NOISE\n        s = smoothstep(0.0, 1.0, abs(s) / shard_size)  * sign(s);\n        #endif\n        \n        \n        #if ABS_NOISE\n        s = abs(s);\n        #endif\n        \n        //note that at larger neighborhoods this weighting scheme will need to change :) \n        vec2 wv = abs(o-blend);\n\n        \n        \n        out_val += s * wv.x * wv.y;\n\n        \n    }    \n       \n    \n    return out_val;\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 p = uv;\n    \n    \n    \n    p -= .5;\n    p *= 2.;\n    p.x *= iResolution.x / iResolution.y;\n    \n    #if SCROLL_NOISE\n    p.y += iTime * .1;\n    #endif\n    \n\n\n    \n    float bias = OCTAVE_BIAS;\n    float freq = NOISE_FREQUENCY;\n    int octaves = NUMBER_OF_OCTAVES;\n\n    \n    float out_val = 0.0;\n    for(int i = 0; i < octaves; i++){\n        out_val += pow(bias, float(i)) * winding_noise(pow(2.0, float(i)) * p * freq, SHARD_SIZE);\n        #if CLAMP_NEGATIVE_VALUES\n        out_val = max(out_val,0.);\n        #endif\n    }\n    \n    \n\n    #if FIT_VALS_BETWEEN_0_AND_1\n    out_val = (out_val + 1.0) * .5;\n    #endif\n\n\n    vec3 col = vec3(out_val);\n\n    \n\n    // Output to screen\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}