{"ver":"0.1","info":{"id":"NtlGD2","date":"1622889775","viewed":216,"name":"Vector Field test","username":"RiceFields","description":"vector field","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["vectorfield"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n#define TWO_PI 6.28318530718\n\n// check comments for better implementation\n\nvec3 hash( vec3 p ) {\n\tp *= mat3( 127.1,311.7,-53.7,\n\t\t\t   269.5,183.3, 77.1,\n\t\t\t  -301.7, 27.3,215.3 );\n\n\treturn 2.*fract(sin(p)*43758.5453123) -1.;\n}\n\n// random noise [-1, 1]\nfloat noise( vec3 p ) {\n    vec3 i = floor( p ),\n         f = fract( p ),\n\t     u = f*f*(3.-2.*f);\n     \n \n    return 2.*mix(\n              mix( mix( dot( hash( i + vec3(0,0,0) ), f - vec3(0,0,0) ), \n                        dot( hash( i + vec3(1,0,0) ), f - vec3(1,0,0) ), u.x),\n                   mix( dot( hash( i + vec3(0,1,0) ), f - vec3(0,1,0) ), \n                        dot( hash( i + vec3(1,1,0) ), f - vec3(1,1,0) ), u.x), u.y),\n              mix( mix( dot( hash( i + vec3(0,0,1) ), f - vec3(0,0,1) ), \n                        dot( hash( i + vec3(1,0,1) ), f - vec3(1,0,1) ), u.x),\n                   mix( dot( hash( i + vec3(0,1,1) ), f - vec3(0,1,1) ), \n                        dot( hash( i + vec3(1,1,1) ), f - vec3(1,1,1) ), u.x), u.y), u.z);\n}\n\n\nfloat line_segment(vec2 p, vec2 a, vec2 b) {\n\tvec2 ba = b - a;\n\tvec2 pa = p - a;\n\tvec2 projPa = clamp(dot(pa, ba) / dot(ba, ba), 0., 1.) * ba; // project pa on ba\n\treturn abs(length(pa - projPa)); // length between pa and porject of pa on ba\n}\n\nfloat aastep(float threshold, float value) {\n    float afwidth = 20.0f/iResolution.y; // pixel width for smoothstep edge\n    return smoothstep(threshold-afwidth, threshold+afwidth, value);\n}\n\nfloat fill(float f, float size) {\n    return 1.0f - aastep(size, f);\n}\n\nvec3 drawVectors(vec2 fuv, float angle, float len) {\n    vec2 xy = vec2(len*cos(angle), len*sin(angle));\n    vec2 cuv = fuv - 0.5f;\n    \n    float draw = line_segment(cuv, vec2(0.0f), xy);\n\n    return vec3(fill(draw, 0.03f));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord/iResolution.y;\n    vec2 tuv = 20.0f*uv;\n    \n    vec2 fuv = fract(tuv);\n    \n    float noise = noise(vec3(uv, iTime*0.7f));\n    float angle = noise * TWO_PI;\n    float len = noise;\n    \n    fragColor = vec4(drawVectors(fuv, angle, len),1.0);\n}","name":"Image","description":"","type":"image"}]}