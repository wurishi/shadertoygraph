{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"// Calculate the circle\nfloat calcCircle(vec2 p, vec2 center, float radius)\n{\n    // Calculate the distance to the center of the circle\n\tfloat d = length(center - p);\n    \n    // Calculate the border of the circle\n    d = smoothstep(radius, radius + 0.01, d);\n    return d;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Convert texture coordinates to [-1,1]\n\tvec2 q = fragCoord.xy / iResolution.xy;\n    vec2 p = -1.0 + 2.0 * q;\n    p.x *= iResolution.x/iResolution.y;    // Fix the aspect ratio\n    \n    // Calculate the circle shape\n    //vec2  center = vec2(sin(iTime), cos(iTime)) * 0.1;\n\tvec2 center;\n    float radius;\n    //float d      = calcCircle(p, center, radius);\n    float d = 0.9;\n    float m = iMouse.x;\n    \n    if (m == 0.0) {\n        radius = 0.03;\n        for (int i = 2500; i>0; i--){\n        \tcenter.x = float(i) / 600.0 - 1.0;\n        \tcenter.y = sin(iTime - float(i) * 50.0 / 10.0) + 1.0;\n        \td *= calcCircle(p + 0.1, center - 1.0, radius);\n    \t}\n    }\n    else {\n        radius = 100.0 / iMouse.x / 40.0;\n        for (int i = 2500; i>0; i--){\n        \tcenter.x = float(i) / 600.0 - 1.0;\n        \tcenter.y = sin(iTime - float(i) * m / 10.0) + 1.0;\n        \td *= calcCircle(p + 0.1, center - 1.0, radius);\n    \t}  \n    }\n    \n\t// Calculate the color based on the circle shape\n    vec3 backgroundColor = vec3(p.x * -0.2, 0.05, 0.1);\n\tvec3 circleColor     = vec3(1.0, p.x, p.y);\n    vec3 col             = mix(circleColor, backgroundColor, d);\n    \n   \n    // Send the color to the screen\n\tfragColor = vec4(col, 1.0);\n\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4dlXWs","date":"1407869109","viewed":150,"name":"[SIG2014] Val's 2D Shader","username":"val","description":"This is the first shader I've ever written. Click and drag the mouse for sine wave magic.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["sig2014"],"hasliked":0,"parentid":"","parentname":""}}