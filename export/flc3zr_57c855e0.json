{"ver":"0.1","info":{"id":"flc3zr","date":"1635571911","viewed":165,"name":"jneen - 3d hexels","username":"jneen","description":"rendering with hexels this time. built originally in bonzo, not quite sure how to get the fft to behave in shadertoy lol. if anyone knows a fancy way to get the equivalent of texFFTIntegrated that'd be super cool\n\ntry playing the music!","likes":16,"published":1,"flags":0,"usePreview":0,"tags":["hexels"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sfGzn","filepath":"/media/a/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png","previewfilepath":"/media/ap/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4dX3zn","filepath":"/media/a/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png","previewfilepath":"/media/ap/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png","type":"cubemap","channel":3,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4sX3zn","filepath":"/media/a/0681c014f6c88c356cf9c0394ffe015acc94ec1474924855f45d22c3e70b5785.png","previewfilepath":"/media/ap/0681c014f6c88c356cf9c0394ffe015acc94ec1474924855f45d22c3e70b5785.png","type":"cubemap","channel":2,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGRr","filepath":"/media/a/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","previewfilepath":"/media/ap/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define pmod(p,m) (mod(p,m)-.5*(m))\n#define time (iTime*.6)\n#define NYQ (.5*iSampleRate)\n#define fft(oct) (texture(iChannel0, vec2(0.,1024./NYQ*pow(2., (oct)))).r)/FFTMAX\n#define BPM 120.\n// this was supposed to use texFFTIntegrated but uh idk how to do that\n// also it seems to want a vec2 which is silly... it's a 1d texture...\n#define fftint(oct) texture(iChannel0, vec2(0.,.5*1024./NYQ*pow(2., (oct)))).g/FFTMAX\n\n#define v2Resolution iResolution\n\nfloat FFTMAX = 1.;\n\nfloat ffta(float a, float b) {\n  float iter=10.;\n  float x=0.;\n  for (float i=0.;i<1.;i+=1./iter) x+=fft(mix(a,b,i));\n  return x/iter;\n}\nfloat fftinta(float a, float b) {\n  float iter=10.;\n  float x=0.;\n  for (float i=0.;i<1.;i+=1./iter) x+=fftint(mix(a,b,i));\n  return x/iter;\n}\n\nmat2 hexel = mat2(2., 0., -1., sqrt(3.))/3.;\nmat2 pixel = mat2(3.,0.,sqrt(3.),2.*sqrt(3.))/2.;\n\nvec3 to_cubic(vec2 p) { return vec3(p.x, -p.y-p.x, p.y); }\n\nvec3 round_cubic(vec3 p, float m) {\n  p *= m;\n  vec3 r = round(p);\n  \n  vec3 d = abs(p-r);\n  vec3 alt = -r.yzx-r.zxy;\n  float big = max(d.x,max(d.y,d.z));\n  \n  return mix(r, alt, step(big, d))/m;\n}\n\nfloat box(vec3 p, vec3 a) {\n  vec3 q = abs(p)-a;\n  return length(max(q,0.))+min(0., max(q.x, max(q.y,q.z)));\n}\n\nfloat sphere(vec3 p, float r) {\n  return length(p) - r;\n}\n\nmat2 rot(float a) {float s=sin(a),c=cos(a); return mat2(c,s,-s,c); }\n\nfloat boxle(vec3 p, float r, float m) {\n  r*=.8;\n  float o = .1+.3*ffta(0.,2.);\n  float B = box(p, vec3(r))-1.2*o;\n  \n  float S = sphere(p+vec3(mix(-.8,1.,2.*o)), m*r)-o;\n  return max(B,-S);\n}\nfloat glow=0.;\nfloat MAT=-1.;\nfloat S(vec3 p) {\n  // i don't know how to get the equivalent of bonzo's texFFTIntegrated out of this texture\n  float tt=mix(time, fftinta(7.,9.), 0.);\n  float T=floor(tt);\n  float t=fract(tt);\n  \n\n  //t=mix(t, smoothstep(0.,1.,t),.5);\n  glow+=.01;\n  float O = 1001.;\n  \n  for (float i=0.; i<3.; i+=1.) {\n    float r=t+i;\n    //if (r < -.5) continue;\n    p.xz *= rot(.8*log(1.+r*r));\n    //p.xy *= rot(r*.8);\n    p.yz *= rot(r*.2);\n    float B = boxle(p, r, 1.+log(1.+.3*r));\n    \n    if (B<O) MAT=mod(T-i+9.,3.);\n\n    O = min(O, B);\n\n  }\n  return O;\n}\n\n#define MISS(d) (d > 1000.)\n\nfloat ray(vec3 p, vec3 dir) {\n  float d=0.;\n  for (int i=0;i<500;i++) {\n    float c = S(p+d*dir);\n    d+=c;\n    if (c<.00001) return d;\n    if (MISS(d)) return d;\n  }\n  return 1001.;\n}\n\nvec3 normal(vec3 p) {\n  mat3 k = mat3(p,p,p)-mat3(1e-4);\n  return normalize(S(p) - vec3(S(k[0]), S(k[1]), S(k[2])));\n}\n#define desat(x, R) mix(x, vec3(x.r+x.g+x.b)/3., R)\n\n#define TAU (2*acos(-1))\n#define nsin(x) (.5+.5*sin(TAU*(x)))\n\n\nvec3 light(vec3 cam, vec3 dir, float dist, vec3 hex, float mat) {\n  vec3 hit = cam + dir*dist;\n  \n  vec3 n = normal(hit);\n  \n  float diff = dot(dir, -n);\n  vec3 rdir = reflect(dir,n);\n  \n  vec3 C = vec3(diff);\n  vec3 T;\n  if (mat<1.) { T= texture(iChannel1, rdir).xyz; }\n  else if (mat<2.) { T= texture(iChannel2, rdir).xyz; }\n  else { T= texture(iChannel3, rdir).xyz; }\n  \n  C = mix(C,T,.5);\n  \n  \n  return C;\n}\n\n\n#define gmix(a, b, q) ((a)*pow((b)/(a), (q))) \n\n#define tri(x) (abs(fract(x)-.5)*2.)\n#define bump(x) (sqrt(abs(sin(x))))\n\nfloat hex_dist = .5*sqrt(3.);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 uv = gl_FragCoord.xy / v2Resolution.xy - .5;\n  vec2 uu = gl_FragCoord.xy / v2Resolution.xy;\n  uv.x *= v2Resolution.x/v2Resolution.y;\n  \n  uv *= rot(time*.5);\n  \n  float res = gmix(20., 100., ffta(2., 6.));\n  \n  vec2 axial = uv * hexel;\n  vec3 cubic = to_cubic(axial);\n  \n  \n  \n  vec3 hex = round_cubic(cubic, res);\n  vec2 hex_center = hex.xz*pixel;\n  \n  float center_d = length(hex_center-uv);\n  \n  if (center_d > .9*hex_dist/res) {\n    fragColor = vec4(0.);\n    return;\n  }\n  \n  vec3 cam = vec3(0,0,-2);\n  cam -= vec3(0,0,.5);\n  vec3 dir = normalize(vec3(hex_center, 1));\n  vec3 real_dir = normalize(vec3(uv,1));\n  \n  float dist = ray(cam, dir);\n  \n    vec3 C;\n    \n  \n\n  \n  if (MISS(dist)) {\n    C = hex;\n  }\n  else {\n    C = light(cam,dir,dist,hex,MAT);\n  }\n    glow=0.;\n  float real_dist = ray(cam+vec3(0,0,.5), real_dir);\n  \n  //if (MISS(dist) || real_dist < dist) C-=(1.-desat(hex,.5))*glow;\n  \n  fragColor = vec4(sqrt(C), 0.);\n}","name":"Image","description":"","type":"image"}]}