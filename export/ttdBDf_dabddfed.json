{"ver":"0.1","info":{"id":"ttdBDf","date":"1613634487","viewed":44,"name":"Genuary 2021 – 14 – SUBDIV (A01)","username":"endymion","description":"Genuary 2021 – 14 – SUBDIVISION (A01)\n\nGot a Cleu?","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fractal","circle","subdivision","cleu"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n#define e 2.7182818\n\n\n/**\n * Rotate coordinate system from the center by angle\n * @src https://thebookofshaders.com/08/\n * @param coordinates {vec2}\n * @param angle {float} - angle in radians (360 degrees = 2 * PI)\n * @return {vec2}\n */\nvec2 rotate2d(vec2 coordinate, float angle){\n    coordinate = mat2(\n        cos(angle),\n        -sin(angle),\n        sin(angle),\n        cos(angle)\n    ) * coordinate; // Rotate coordinate\n    return coordinate;\n}\n\n/**\n * Map range to new range\n */\nfloat map(float value, float min1, float max1, float min2, float max2) {\n    return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}\n\n/**\n * Simplex noise\n * @src https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83#simplex-noise\n */\nvec3 permute(vec3 x) { return mod(((x*34.0)+1.0)*x, 289.0); }\n\nfloat snoise(vec2 v){\n  const vec4 C = vec4(0.211324865405187, 0.366025403784439,\n           -0.577350269189626, 0.024390243902439);\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n  vec2 i1;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n  i = mod(i, 289.0);\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n  + i.x + vec3(0.0, i1.x, 1.0 ));\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy),\n    dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return map(130.0 * dot(m, g), -1., 1., 0., 1.);\n}\n\n/**\n * Fractional Brownian Motion\n * @src https://thebookofshaders.com/13/\n */\nfloat fbm(in vec2 _st, in int octaves) {\n    float v = 0.0;\n    float a = 0.5;\n    vec2 shift = vec2(100.0);\n    // Rotate to reduce axial bias\n    mat2 rot = mat2(cos(0.5), sin(0.5), -sin(0.5), cos(0.50));\n    for (int i = 0; i < octaves; ++i) {\n        v += a * snoise(_st);\n        _st = rot * _st * 2.0 + shift;\n        a *= 0.5;\n    }\n    return v;\n}\n\n/**\n * HSB to RGB\n * All components are in the range [0…1], including hue.\n * @src https://stackoverflow.com/a/17897228\n */\nvec3 hsb2rgb(in vec3 c) {\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n \n/**\n * Pseudo-random based on sine with float input\n * @src https://thebookofshaders.com/10/\n * @param seed {float}\n * @return {float}\n */\nfloat random(float seed) {\n    return fract(sin(seed)*1e4);\n}\n\n/**\n * Distance field circle\n * @src https://thebookofshaders.com/07/\n * @param coordinate {vec2} - normalized (0-1, 0-1) coordinate\n * @param radius {float} - radius\n * @return {float} distance\n */\nfloat circle(in vec2 coordinate, in vec2 center, in float radius, in float edge) {\n    float dist = length(coordinate - center) / radius;\n    return dist;\n}\n\nfloat circle(in vec2 uv, in vec2 center, in float radius) {\n    return circle(uv, center, radius, 1./iResolution.x);\n}\n\n/** \n * Got a Cleu?\n * @param coordinate {vec2} - normalized (0-1, 0-1) coordinate\n * @param radius {float} - radius\n */\nvec2 cleu(in vec2 uv, in vec2 center, in float radius, in float count, in float part) {\n    float i = 0.;\n    float d = 1.;\n    \n    // Create outer circle (A)\n    float dist = circle(uv, center, radius);\n    if (dist < 1.) {\n        d = 1. - dist;\n        i++;\n    \n        for (float t = 0.; t < count / 2.; t++) {\n            if (i >= count) break;\n            // Create big inner circle (B)\n            center.y -= radius;\n            radius = radius * (1. - part);\n            center.y += radius;\n        \n            float distB = circle(uv, center, radius);\n            \n            if (distB < 1.) {\n                i++;\n                d = 1. - distB;\n            };\n            if (i >= count - 1.) break;\n            \n            // Create small inner circle (C)\n            center.y += radius;\n            radius = radius * (1. + part / (1. - part)) * part;\n            center.y += radius;\n            \n            float distC = circle(uv, center, radius);\n            \n            if (distC < 1.) {\n                i += 2.;\n                d = 1. - distC;\n            };\n        }\n    }\n    \n    \n    return vec2(i, d);\n}\n\n/** \n * @main\n */\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord.xy - 0.5 * iResolution.xy) / iResolution.y;\n    uv *= map(sin(iTime * 0.5), -1., 1., 1., 0.9);\n    \n    vec2 cl = cleu(uv, vec2(0.), 0.38, 4., 1./e);\n    \n    float pixelNoise = snoise(uv * 300.);\n    \n    vec3 bg = hsb2rgb(vec3(\n        0., \n        0.,\n        0.175 * (circle(uv, vec2(0.), 0.75)) + pixelNoise * 0.025 \n    ));\n\n    vec2 r = vec2(0.);\n    r.x = fbm(uv + random(cl.x) + 0.10, 1);\n\n    float f = fbm(uv + r, 10);\n    f = f * 0.5 + fbm(vec2(f * 0.5) + iTime * 0.05, 2);\n    f = f * 0.5 + fbm(vec2(f * 0.25) + -iTime * 0.05, 2);\n    \n    vec3 color = vec3(f);\n    \n    color = hsb2rgb(vec3(\n        color.x * 0.75 + cl.y * 0.25,\n        min(color.y, 1.) - (1. - cl.y) * 0.25,\n        min(color.z, 1.) * 1.6 + pixelNoise * 0.125\n    ));\n    \n    if (cl.x == 0. && cl.y == 1.) color = bg * 0.85 + color * 0.15;\n    \n    fragColor = vec4(color, 1.);\n}","name":"Image","description":"","type":"image"}]}