{"ver":"0.1","info":{"id":"ct23Rt","date":"1673737572","viewed":110,"name":"Ripples in Black","username":"DwayneBrah","description":"Colourful sine-based plasma-ish dynamic inteference paterning.\n\nMy first one! It's addictive - once you get over that learning curve!!","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["simple","ripples","plasma","psychedelic","sine","colourful","trippy","easy","pretty","inteference"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float ar;\nvec2 outTexCoord;\nvec4 final_color;\n\n// A 2D point, moving in time with a sine wave function \nfloat dist_moving(float x_speed, float y_speed, float ripple_speed) {\n\t\n    // Centre and correct aspect ratio\n\tvec2 corrected_coord = vec2(outTexCoord.x*ar-0.50, outTexCoord.y);\n\t\n    // Set pace\n\tfloat time_adjusted = iTime*1.25;\n\t\n    // The point and distance from curent XY\n\tvec2 point_1 = vec2(0.5*(sin(time_adjusted*x_speed)+1.00), 0.5*(sin(time_adjusted*y_speed)-0.50)+1.00);\n\tfloat point_1_dist = distance(point_1, corrected_coord);\n\t\n    // Adjust distance scale ratio and return distance value\n\tfloat distance_multiplyer = 0.50;\n    return(point_1_dist*distance_multiplyer);\n\t\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    \n    // Set aspect ratio\n    ar = iResolution.x/iResolution.y;\n\n    // Normalise X & Y\n    outTexCoord = vec2(fragCoord.x/iResolution.x, fragCoord.y/iResolution.y);\n    \n    // Create points and ripple the distance with a sine function\n\tfloat point_1_dist = dist_moving(-0.11, 0.17, 0.00);\n\tfloat point_1_dist_rippled = sin((point_1_dist)*30.00);\n\t\n\tfloat point_2_dist = dist_moving(0.04, -0.09, 0.04);\n\tfloat point_2_dist_rippled = sin(point_2_dist*30.00);\n\t\n\tfloat point_3_dist = dist_moving(0.09, 0.07, 0.33);\n\tfloat point_3_dist_rippled = sin(point_3_dist*30.00);\n\t\n\t// Create the coloured 'layer' \n\tvec4 colorful_rings = vec4(abs(point_1_dist_rippled), abs(point_2_dist_rippled), abs(point_3_dist_rippled), 1.00);\n\t\n    // Create the black & white 'layer' and ripple with a sinwave\n\tfloat color_intensity = (colorful_rings.r+colorful_rings.g+colorful_rings.b)/3.00;\n\tvec4 bw_rings = vec4(color_intensity, color_intensity, color_intensity, 1.00);\n\tfloat bw_rings_rippled = (sin(color_intensity*20.00));\n\t\n    // Chose between 'layers'\n    if (bw_rings_rippled > 0.50) {\n\t\tfinal_color = colorful_rings*colorful_rings;\n\t} else {\n\t\tfinal_color = vec4(bw_rings_rippled, bw_rings_rippled, bw_rings_rippled, 1.00);\n\t};\n\t\n\t// Output colour\n\tfragColor = final_color;\n\t\n}\n","name":"Image","description":"","type":"image"}]}