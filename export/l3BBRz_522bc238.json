{"ver":"0.1","info":{"id":"l3BBRz","date":"1729105909","viewed":76,"name":"poobumpants","username":"shirleyquirk","description":"how do we assign indices please","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["voronoi"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2013 Inigo Quilez\n// https://www.youtube.com/c/InigoQuilez\n// https://iquilezles.org/\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// I've not seen anybody out there computing correct cell interior distances for Voronoi\n// patterns yet. That's why they cannot shade the cell interior correctly, and why you've\n// never seen cell boundaries rendered correctly. \n//\n// However, here's how you do mathematically correct distances (note the equidistant and non\n// degenerated grey isolines inside the cells) and hence edges (in yellow):\n//\n// https://iquilezles.org/articles/voronoilines\n//\n// More Voronoi shaders:\n//\n// Exact edges:  https://www.shadertoy.com/view/ldl3W8\n// Hierarchical: https://www.shadertoy.com/view/Xll3zX\n// Smooth:       https://www.shadertoy.com/view/ldB3zc\n// Voronoise:    https://www.shadertoy.com/view/Xd23Dh\n\nconst float pi = 3.14159265358979;\n\n#define ANIMATE\n\nvec2 hash2( vec2 p )\n{\n\t// texture based white noise\n\t//return textureLod( iChannel0, (p+0.5)/256.0, 0.0 ).xy;\n\t\n    // procedural white noise\t\n\treturn fract(\n      sin(\n        vec2(dot(p,vec2(127.1,311.7)),\n             dot(p,vec2(269.5,183.3))\n            )\n         )*43758.5453);\n}\n\n\nvec3 voronoi( in vec2 x)\n{\n    vec2 ip = floor(x);// int part \n    // is this not the grid index? tooootally\n    vec2 fp = fract(x);// fract part\n\n    //----------------------------------\n    // first pass: regular voronoi\n    //----------------------------------\n\tvec2 mg, mr; // no clue\n\n    float md = 4.0; // minimum distance?\n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ )\n    {\n        vec2 g = vec2(float(i),float(j));\n\t\tvec2 o = hash2( ip + g ); // noise value at all 9 points\n        // i think o.x == o.y\n\t\t#ifdef ANIMATE\n        o = 0.5 + 0.5*sin( iTime/8.0 + 6.2831*o );\n        #endif\t\n        vec2 r = g + o - fp; // radius = (-1..1) + (0..1)\n        float d = dot(r,r);\n\n        if( d<md )\n        {\n            md = d;\n            mr = r;\n            mg = g;\n        }\n    }\n\n    //----------------------------------\n    // second pass: distance to borders\n    //----------------------------------\n    md = 4.0;\n    for( int j=-2; j<=2; j++ )\n    for( int i=-2; i<=2; i++ )\n    {\n        vec2 g = mg + vec2(float(i),float(j)); //starting at Gmin\n        // and looking at each pixel in a 5x5 grid around it\n\t\tvec2 o = hash2( ip + g ); // noise value at that point\n\t\t#ifdef ANIMATE\n        o = 0.5 + 0.5*sin( iTime/8.0 + 6.2831*o );\n        #endif\n        vec2 r = g + o - fp; // rvalue again\n\n        if( dot(mr-r,mr-r)>0.00001 )\n          {\n            md = min( md, dot( 0.5*(mr+r), normalize(r-mr) ) );\n          }\n    }\n    return vec3( md, mr);\n}\n\n// we hash it?\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\nvec3 rgb2hsv(vec3 c)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\nconst vec2 voronoiFrequency=vec2(10.0,8.63);\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord/iResolution.xy;\n    vec3 c = voronoi( voronoiFrequency*p);\n\n\t// isolines\n    vec3 col = c.x*(0.5 + 0.5*sin(64.0*c.x))*vec3(1.0);\n    col = mix(vec3(p + c.yz/voronoiFrequency,0.0),col,0.5);\n    \n    vec2 centr = vec2(p+c.yz/voronoiFrequency);\n    vec2 centrblock = floor(centr*voronoiFrequency);\n    float id = centrblock.x + centrblock.y*voronoiFrequency.x;\n    if (abs(id - 45.0) < 0.001){\n        col = mix( vec3(1.0,1.0,1.0), col, 0.5);\n    }\n    \n    // borders\t\n    col = mix( vec3(0.6,0.6,0.3), col, smoothstep( 0.01, 0.04, c.x ) );\n    // feature points\n\tfloat dd = length( c.yz );\n\t//col = mix( vec3(1.0,0.6,0.1), col, smoothstep( 0.0, 0.64, dd) );\n\tcol += vec3(1.0,0.6,0.1)*(1.0-smoothstep( 0.0, 0.04, dd));\n\n\tfragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}