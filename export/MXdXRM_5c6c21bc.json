{"ver":"0.1","info":{"id":"MXdXRM","date":"1718820758","viewed":42,"name":"Log Spiral v1","username":"valvw","description":"Log Spiral","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["spiral","log"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float rand(vec2 co)\n{\n    return fract(sin(dot(co.xy ,vec2(12,70))) * 40000.0);\n}\n\nfloat noise(vec2 co)\n{\n    vec2 i = floor(co);\n    vec2 f = fract(co);\n    float a = rand(i);\n    float b = rand(i + vec2(1.0, 0.0));\n    float c = rand(i + vec2(0.0, 1.0));\n    float d = rand(i + vec2(1.0, 1.0));\n    vec2 u = f * f * (3.0 - 2.0 * f);\n    return mix(a, b, u.x) + (c - a)* u.y * (1.0 - u.x) + (d - b) * u.x * u.y;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Преобразуем координаты в диапазон от 0 до 1\n    vec2 uv = fragCoord / iResolution.xy;\n\n    // Центрируем координаты\n    uv = uv * 2.0 - 1.0;\n    uv.y *= iResolution.y / iResolution.x;  // Сохранение пропорций\n\n    // Параметры логарифмической спирали\n    float a = 0.1; // Начальный радиус\n    float b = 0.1; // Скорость роста\n    float lineWidth = 0.05; // Ширина линии спирали\n\n\n    // Добавляем время для анимации\n    float time = iTime * 0.2;\n\n    // Плавающий центр с использованием функции шума\n    vec2 center = vec2(noise(vec2(time, 0.0)), noise(vec2(0.0, time))) * 2.0 - 1.0;\n    \n\n    // Начальное значение угла с добавлением искажения\n    float angle = atan(uv.y - center.y, uv.x - center.x) + noise(vec2(time + uv.x, uv.y)) * 3.14159 * 2.0;\n\n    // Начальное значение радиуса с добавлением искажения\n    float currentRadius = length(uv - center) * (1.0 + noise(vec2(uv.x, time + uv.y)) * 0.5);\n\n    // Переменная для хранения минимального расстояния до спирали\n    float minDistance = 1e10;\n\n    // Пробегаем несколько оборотов спирали\n    for (int i = 0; i < 50; i++)\n    {\n        // Угол на текущем витке\n        float theta = angle + 2.0 * 3.14159 * float(i);\n        \n        // Радиус спирали на текущем витке\n        float radius = a * exp(b * theta);\n        \n        // Расстояние до текущего витка спирали\n        float distanceToSpiral = abs(currentRadius - radius);\n\n        // Обновляем минимальное расстояние\n        minDistance = min(minDistance, distanceToSpiral);\n    }\n\n    // Определение цвета фона и градиента для линии\n    vec3 backgroundColor = vec3(0.0, 0.0, 0.0); // Цвет фона\n    vec3 lineColorStart = vec3(0, 0.0, 1); // Начальный цвет линии (красный)\n    vec3 lineColorEnd = vec3(0.5, 0.0, 0.5); // Конечный цвет линии (синий)\n    \n    // Градиентный цвет линии\n    float gradient = smoothstep(0.0, lineWidth, minDistance);\n    vec3 lineColor = mix(lineColorStart, lineColorEnd, gradient);\n\n    // Определение цвета в зависимости от расстояния до спирали\n    vec3 col = mix(lineColor, backgroundColor, gradient);\n   \n   // Добавление блёсток шума\n    float sparkle = rand(uv + time + 1.0);\n    if (sparkle > 0.99) {\n        col = vec3(0.5, 0.0, 0.5); \n    }\n\n\n    // Вывод на экран\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}