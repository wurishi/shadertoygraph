{"ver":"0.1","info":{"id":"4cl3R7","date":"1702902565","viewed":14,"name":"Circle Fractal seven_dc","username":"seven_dc","description":"simple Fractal test","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"mtBcWR","parentname":"seven_dc fractal test3"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 Rotate(float a) {\n  float s = sin(a);\n  float c = cos(a);\n  return mat2(c, -s, s, c);\n}\n\n\nfloat getFractalValue(vec2 uv, float angle) { \n    uv -= .5;\n    uv *= 22. + angle;\n    for (float i=0.; i < 10.; i+= 1.) {\n        uv = abs(uv  / dot(uv, uv )) - 1.3 - angle*.01;\n        uv = uv * length(uv) + length(uv);\n        uv *= Rotate(.5);\n    }\n    return length(uv);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float angle = 1. + (sin(iTime*.5) * 1.);\n    \n    float value = getFractalValue(uv, angle);\n    vec3 col = value * vec3(.1,.2,.5);\n    col.r += tanh(uv.y*.5) * value;\n    \n    // Output to screen\n    fragColor = vec4(col ,1.0);\n}\n","name":"Image","description":"","type":"image"}]}