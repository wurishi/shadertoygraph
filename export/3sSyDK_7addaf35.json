{"ver":"0.1","info":{"id":"3sSyDK","date":"1589375589","viewed":169,"name":"Physics: Wave Equation + CPML","username":"xlambein","description":"Wave equation with CPML (absorbing) boundaries.\n\nChanged integration fields into a Yee lattice, to handle higher frequencies.","likes":9,"published":1,"flags":32,"usePreview":0,"tags":["physics"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 ij )\n{\n    vec2 uv = ij/iResolution.xy;\n    \n    float pos = vec2float(texture(iChannel0, uv).xy);\n    \n    /*vec2 s = sigma(iResolution, ij);\n    if (abs(s.x) > 0. || abs(s.y) > 0.) {\n        pos = 0.;\n    }*/\n    \n    if (pos > 0.) {\n        pos = sqrt(pos);\n    } else {\n        pos = -sqrt(-pos);\n    }\n    //pos = step(0., pos);\n    \n    // Output to screen\n    //fragColor = vec4(pos, pos, pos, 1.0);\n    \n    fragColor = vec4(\n        vec3(1.0, 1.0, 1.0)\n        - mix(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 0.0), -clamp(pos, -1., 0.))\n        - mix(vec3(0.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0), clamp(pos, 0., 1.)),\n        1.0\n    );\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"const float dx = 1.;\nconst float dt = dx * 0.707;  // Stable if < dx / sqrt(2)\nconst float a = 1.;\nconst float b = 1.;\nconst float TAU = 6.2831;\nconst float sMax = 100.;\nconst float pmlSize = 20.;\n\nfloat vec2float(in vec2 u) {\n    u = clamp(u, 0., 1.);\n    float val = u.x + u.y / 255.;\n    //float val = u.x;\n    return val * 2. - 1.;\n}\n\nvec2 float2vec(in float val) {\n    val = (val + 1.) / 2.;\n    val = clamp(val, 0., 1.);\n    \n    float hi = val - mod(val, 1.0 / 255.0);\n\tfloat lo = (val - hi) * 255.0;\n    //float hi = val, lo = 0.;\n    \n    return vec2(hi, lo);\n}\n\nvec4 fields2col(float x, float y) {\n    return vec4(\n        float2vec(x),\n        float2vec(y)\n    );\n}\n\nvec2 sigma(vec3 iResolution, vec2 ij) {\n    float sx = 0., sy = 0.;\n    \n    if (ij.x < pmlSize) {\n        sx = pow(1. - ij.x / pmlSize, 2.) * sMax;\n    } else if (iResolution.x - ij.x < pmlSize) {\n        sx = pow(1. - (iResolution.x - ij.x) / pmlSize, 2.) * sMax;\n    }\n    if (ij.y < pmlSize) {\n        sy = pow(1. - ij.y / pmlSize, 2.) * sMax;\n    } else if (iResolution.y - ij.y < pmlSize) {\n        sy = pow(1. - (iResolution.y - ij.y) / pmlSize, 2.) * sMax;\n    }\n    \n    /*if (abs(ij.x - iResolution.x * .35) < pmlSize) {\n        sx = pow(1. - abs(ij.x - iResolution.x * .04) / pmlSize, 2.) * sMax;\n        sy = pow(1. - abs(ij.x - iResolution.x * .04) / pmlSize, 2.) * sMax;\n    }\n    vec2 uv = ij.xy / iResolution.xy;\n    if (uv.x > 0.4 && uv.x < 0.45) {\n        if (uv.y < 0.48 || uv.y > 0.52){\n        \tsx = sMax;\n        \tsy = sMax;\n        }\n    }*/\n    return vec2(sx, sy);\n}\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float U(vec2 loc) {\n    return vec2float(texture(iChannel0, loc/iResolution.xy).xy);\n}\n\nvec2 V(vec2 loc) {\n    return vec2(\n        vec2float(texture(iChannel1, loc/iResolution.xy).xy),\n        vec2float(texture(iChannel1, loc/iResolution.xy).zw)\n    );\n}\n\nfloat PsiU(vec2 loc) {\n    return vec2float(texture(iChannel2, loc/iResolution.xy).xy);\n}\n\nvec2 PsiV(vec2 loc) {\n    return vec2(\n        vec2float(texture(iChannel3, loc/iResolution.xy).xy),\n        vec2float(texture(iChannel3, loc/iResolution.xy).zw)\n    );\n}\n\n// du / dt = b * (dv / dx + dv / dy) - sx * u + psi\n// du(t) / dt = - s * u(t)\n// (u(t) - u(t-1)) / dt = ... - s * u(t)\n// u(t) - u(t-1) = dt * ... - dt * s * u(t)\n// u(t) = u(t-1) + dt * ... - dt * s * u(t)\n// u(t) + dt * s * u(t) = u(t-1) + dt * ...\n// u(t) * (1 + dt * s) = u(t-1) + dt * ...\n\nvoid mainImage( out vec4 fragColor, in vec2 ij )\n{\n    float time = float(iFrame)/60. * dt;\n    vec2 uv = ij/iResolution.xy;\n    vec2 uv2 = vec2(ij.xy - 0.5*iResolution.xy)/iResolution.y;\n    vec2 mouse = iMouse.xy/iResolution.xy-.5;\n    mouse.x *= iResolution.x/iResolution.y;\n    \n    float u = U(ij);\n    vec2 s = sigma(iResolution, ij);\n    \n    // Integrate\n    u += dt * b * (\n        V(ij + vec2(1,0)).x - V(ij + vec2(0,0)).x\n      + V(ij + vec2(0,1)).y - V(ij + vec2(0,0)).y\n    ) / dx;\n    // CPML\n    u += dt * (\n        b * (PsiV(ij).x + PsiV(ij).y) - PsiU(ij)\n    );\n    u /= (1. + dt * (s.x + s.y));\n    \n    float y = sin(.05 * TAU * iTime * dt) * 100.;\n    y = 20.;\n    vec2 xy = vec2(ij.xy + vec2(0.,y) - vec2(.7, .5)*iResolution.xy)/iResolution.y;\n    if (length(xy) < .005) {\n        float f = 7.;\n        //float f = 4. + sin(1. * TAU * time) * 1.;\n        u = sin(f * TAU * time) * .5;\n    }\n    \n    if (uv.x > 0.35 && uv.x < 0.65) {\n        if (uv.y < 0.48 || uv.y > 0.52){\n        \tu -= u * 1. * dt;\n            //u *= 0.1;\n        }\n    }\n    \n    if (iFrame == 0) {\n        u = 0.0;\n    } else {\n        if (length(mouse - uv2) < .01 && iMouse.z > 0.0) {\n            u = 0.7 * (1.0 - smoothstep(0.0, 0.05, length(mouse - uv2)));\n            //u = max(u, u + (1.0 - smoothstep(0.0, 0.05, length(mouse - uv2))) * .00001);\n        }\n    }\n    \n    /*if (uv.x < margin || uv.x > 1. - margin || uv.y < margin || uv.y > 1. - margin) {\n        u = 0.;\n    }*/\n    \n    fragColor = fields2col(u, 0.);\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"float U(vec2 loc) {\n    return vec2float(texture(iChannel0, loc/iResolution.xy).xy);\n}\n\nvec2 V(vec2 loc) {\n    return vec2(\n        vec2float(texture(iChannel1, loc/iResolution.xy).xy),\n        vec2float(texture(iChannel1, loc/iResolution.xy).zw)\n    );\n}\n\n// dvx(t) / dt = a * du/dx - sx * dvx(t)\n// dvx(t) - dvx(t-1) = dt * a * du/dx - dt * sx * dvx(t)\n// dvx(t) + dt * sx * dvx(t) - dvx(t-1) = dt * a * du/dx\n// dvx(t) + dt * sx * dvx(t) = dvx(t-1) + dt * a * du/dx\n// dvx(t) * (1 + dt * sx) = dvx(t-1) + dt * a * du/dx\n\nvoid mainImage( out vec4 fragColor, in vec2 ij )\n{\n    float vx = V(ij).x;\n    float vy = V(ij).y;\n    vec2 s = sigma(iResolution, ij - vec2(.5, .5));\n    \n    \n    // Integrate\n    vx += dt * a * (\n        U(ij + vec2(0,0)) - U(ij + vec2(-1,0))\n    ) / dx;\n    vy += dt * a * (\n        U(ij + vec2(0,0)) - U(ij + vec2(0,-1))\n    ) / dx;\n    // CPML\n    vx /= 1. + dt * s.x;\n    vy /= 1. + dt * s.y;\n    \n    if (iFrame == 0) {\n        vx = 0.0;\n        vy = 0.0;\n    }\n    \n    fragColor = fields2col(vx, vy);\n}\n","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"float U(vec2 loc) {\n    return vec2float(texture(iChannel0, loc/iResolution.xy).xy);\n}\n\nfloat PsiU(vec2 loc) {\n    return vec2float(texture(iChannel2, loc/iResolution.xy).xy);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 ij )\n{\n    vec2 s = sigma(iResolution, ij);\n    \n    float pU = PsiU(ij);\n    \n    pU += dt * s.x * s.y * U(ij);\n    \n    if (iFrame == 0) {\n        pU = 0.0;\n    }\n    \n    fragColor = fields2col(pU, 0.);\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"vec2 V(vec2 loc) {\n    return vec2(\n        vec2float(texture(iChannel1, loc/iResolution.xy).xy),\n        vec2float(texture(iChannel1, loc/iResolution.xy).zw)\n    );\n}\n\nvec2 PsiV(vec2 loc) {\n    return vec2(\n        vec2float(texture(iChannel3, loc/iResolution.xy).xy),\n        vec2float(texture(iChannel3, loc/iResolution.xy).zw)\n    );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 ij )\n{\n    vec2 s = sigma(iResolution, ij);\n    \n    float pVx = PsiV(ij).x;\n    float pVy = PsiV(ij).y;\n    \n    pVx += dt * s.y * (V(ij + vec2(1,0)).x - V(ij + vec2(0,0)).x) / dx;\n    pVy += dt * s.x * (V(ij + vec2(0,1)).y - V(ij + vec2(0,0)).y) / dx;\n    \n    \n    if (iFrame == 0) {\n        pVx = 0.;\n        pVy = 0.;\n    }\n    \n    fragColor = fields2col(pVx, pVy);\n}\n","name":"Buffer D","description":"","type":"buffer"}]}