{"ver":"0.1","info":{"id":"4sscWl","date":"1490340883","viewed":254,"name":"simple sphere","username":"rhos","description":"simple rotating sphere with lighting","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["simple","lighting","sphere"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265358979323844\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float scale = 0.85;\n    vec2 res = iResolution.xy;\n    vec2 xy = (2. * fragCoord.xy - res ) / res.y / scale;\n    \n    float r = sqrt(dot(xy,xy));\n    if( r > 1.0 )\n    {\n    \tfragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n        return;\n    }\n    \n    vec3 p = vec3( xy, sqrt( 1.0 - r*r ));\n    float angle = iTime * 0.5;\n    vec3 axis = vec3(0.2, 1, 0.6);\n    \n    // rotational matrix\n    float ca = cos(angle);\n    float sa = sin(angle);\n    axis = normalize(axis);\n    \n    mat3 rot = mat3(\n    ca + axis.x*axis.x*(1.-ca), axis.x*axis.y*(1.-ca) - axis.z*sa, axis.x*axis.z*(1.-ca) + axis.y*sa,\n    axis.y*axis.x*(1.-ca) + axis.z*sa, ca + axis.y*axis.y*(1.-ca), axis.y*axis.z*(1.-ca) - axis.x*sa,\n    axis.z*axis.x*(1.-ca) - axis.y*sa, axis.y*axis.z*(1.-ca) + axis.x*sa, ca + axis.z*axis.z*(1.-ca));\n\t\n    vec3 rp = rot * p;\n\n    float u = 0.5 + atan(rp.z,rp.x) / PI;\n    float v = 0.5 - asin(rp.y) / PI;\n    fragColor = texture( iChannel0, vec2( u, v ));\n\n    // directional light\n    vec3 lightDir = normalize( vec3( -1.1, -0.3, 1.0 )); \n    float mflight = max(dot( p, lightDir), 0.0);\n    fragColor.rgb *= mflight;\n    \n\n    // point light\n    vec3 light1pos = vec3( 0.6, 0.5, 0.6 ); \n    vec3 light1col = vec3( 1.0, 2.0, 3.0 ); \n    float dis = 1.0 - length( p - light1pos ) / 2.0;\n    fragColor.rgb += light1col * pow( dis, 8.0);\n}\n","name":"Image","description":"","type":"image"}]}