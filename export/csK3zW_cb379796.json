{"ver":"0.1","info":{"id":"csK3zW","date":"1678273603","viewed":243,"name":"Arrows Bend","username":"kokodayo","description":"Arrow bending animation","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["arrow","2dsdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdBox(in vec2 p, in vec2 a)\n{\n    vec2 q = abs(p)-a;\n    return length(max(q, vec2(0.0))) + min(max(q.x, q.y), 0.0);\n}\n\nfloat sdArc( in vec2 p, in float l, in float a, float w)\n{\n    // if perfectly straight\n    if( abs(a)<0.001 )\n    {\n        return sdBox(p - vec2(0.0, 0.5*l), vec2(w, 0.5*l));\n    }\n    \n    // parameters\n    vec2  sc = vec2(sin(a),cos(a));\n    float ra = 0.5*l/a;\n    \n    // recenter\n    p.x -= ra;\n    \n    // reflect\n    vec2 q = p - 2.0*sc*max(0.0,dot(sc,p));\n\n\t// distance\n    float u = abs(ra)-length(q);\n    float d = max(length( vec2(q.x+ra-clamp(q.x+ra,-w,w), q.y) )*sign(-q.y),abs(u) - w);\n    \n    return d;\n}\n\nmat2 rotate2d(float _angle){\n  return mat2(cos(_angle),-sin(_angle),sin(_angle),cos(_angle));\n}\n\nfloat sdArrowL(in vec2 p, float w, float h, float r,float bl, float a)\n{\n    p = rotate2d(a) * p;\n\n    p.x = abs(p.x);\n    float d1 = p.y+h/w*(p.x-w);\n    float d2 = abs(p.y)>r ? length(p - vec2(w, 0.0)) : abs(p.x-w);\n    float u = p.x < w ? abs(d1) - r : d2;\n    \n    if(d1 < 0.0)\n        u = min(sdBox(p - vec2(0.0, h - bl), vec2(r, bl)), u);\n    \n    return u;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // normalized pixel coordinates\n    vec2 uv = (fragCoord*2.0-iResolution.xy)/iResolution.y;\n    float as = 4.0 / iResolution.y; //For anti-aliasing\n    \n    // Animation Location\n    uv += vec2(0.0, 0.1);\n    \n    \n    /****** Parameters of the animation **********\n    wi: the width of the line\n    Arrow_color: the color of the arrow\n    le : the circumference of the arc\n    an : the angle of the arc\n    hw&hl: control the size of the arrow\n    al : controls the length of the arrow\n    boxl : the length of the rectangle at the bottom of the arrow\n    */\n    float wi = 0.15;\n    vec4 Arrow_color = vec4(0.8,1.0,1.0,1.0); //CCFFFF\n#if 1\n    float le = 0.2+0.3*abs(sin(iTime));\n    float an = radians(90.0)*abs(sin(iTime));\n    float hw = 0.335;\n    float hl = 0.335;\n    float al = 0.18;\n    float box_l = 0.35;\n#else\n    float le = 0.0+0.1*abs(sin(iTime));\n    float an = radians(130.0)*abs(sin(iTime));\n    float hw = 0.22;\n    float hl = 0.22;\n    float al = 0.25;\n    float box_l = 0.3;\n#endif\n\n\n    /*****   2D SDF calculation *****/\n    le*=2.0;\n    // Distance of the arc\n    float d1 = sdArc(uv, le, an/2.0, wi);\n    \n    // The stationary rectangular area of the arrow\n    float d2 = sdBox(uv + vec2(0.0, box_l), vec2(wi, box_l));\n    \n    // Distance of the arrow\n    float ra = le/an; //l=angle*r, r=l/angle\n    vec2 center_Arrow = an > 0.001 ? vec2(ra - ra*cos(an), ra * sin(an)) : vec2(0.0, le);\n    float d3 = sdArrowL(uv - center_Arrow - (2.0*al - hl)*vec2(sin(an),cos(an)), hw, hl, wi, al, -an);\n\n    // Graphics Fusion\n    float d = min(min(d1, d2), d3);\n    \n    // coloring\n    vec4 outcolor = smoothstep(as, 0.00, d) * Arrow_color;\n\n\tfragColor = outcolor;\n}","name":"Image","description":"","type":"image"}]}