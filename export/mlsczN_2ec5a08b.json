{"ver":"0.1","info":{"id":"mlsczN","date":"1691296921","viewed":149,"name":"fractal-shader","username":"notmysql","description":"fractal","likes":5,"published":3,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Squares a given complex number\nvec2 cSquare( in vec2 z ) \n{\n    return vec2(\n            z.x * z.x - z.y * z.y,\n            2.0 * z.x * z.y\n        );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 c = fragCoord/iResolution.x;\n    \n    // Scale [lower is more zoomed in]\n    float scale = 5.0;\n    \n    c *= scale;\n    \n    // Move set into view\n    c += vec2(-3.0,-1.5);\n    \n    // Maximum number of iterations\n    int maxIterations = 256;\n\n\t// Starting point\n\tvec2 Z = vec2(0,0);\n    \n    for(int i = 0; i < maxIterations; i++)\n    {\n        // Z(n+1) = Z(n)^2 + C\n        vec2 oldZ = Z;\n        Z = cSquare(cSquare(oldZ)) + (c/2.0) + (oldZ * sin(iTime/5.0)*2.0);\n        \n        if(dot(Z, Z) > sin(iTime) * 4.0 + 20.0) {\n            // get smooth iters\n            float sn = float(i) - log2(log2(dot(Z,Z))) + 4.0;\n            \n            // multipliers for ( R   G   B ) values\n            vec3 weights = vec3(10.0 + sin(iTime) * 5.0,10.0 + cos(iTime) * 5.0,2.0);\n            \n            fragColor = vec4(vec3(float(sn)/float(maxIterations)) * weights, 1.0);\n            break;\n        } else {\n            fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n        }\n    }\n    \n    // Output to screen\n    //fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n}","name":"Image","description":"","type":"image"}]}