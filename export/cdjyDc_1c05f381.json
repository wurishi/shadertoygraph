{"ver":"0.1","info":{"id":"cdjyDc","date":"1688275782","viewed":401,"name":"20230702_cyclic noise wavetable","username":"0b5vr","description":"haha","likes":23,"published":1,"flags":8,"usePreview":0,"tags":["noise","audio"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 drawTarget = vec4( 0.0, 0.0, 0.0, 1.0 );\nvec4 drawColor = vec4( 1.0 );\n\nvec4 blend( vec4 src, vec4 dst ) {\n  float a = mix( dst.a, 1.0, src.a );\n  return a == 0.0\n    ? vec4( 0.0 )\n    : vec4(\n      mix( dst.rgb * dst.a, src.rgb, src.a ) / a,\n      a\n    );\n}\n\nvoid plot( vec2 uv, float frame ) {\n  float audio = 0.1 * wt( uv.x, frame );\n  float dAudio = abs( dFdx( audio ) );\n\n  float off = -0.3 + 0.6 * frame;\n  float shape = linearstep( 2.0 / iResolution.y, 0.0, abs( uv.y - 0.5 - audio - off ) - 0.5 * dAudio );\n  drawTarget = blend( drawColor * vec4( 1.0, 1.0, 1.0, shape ), drawTarget );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 uv = fragCoord / iResolution.xy;\n  vec2 p = uv * 2.0 - 1.0;\n  p.x *= iResolution.x / iResolution.y;\n  \n  drawTarget = vec4( 0.03, 0.03, 0.03, 1.0 );\n  \n  for ( int i = 0; i <= 40; i ++ ) {\n    drawColor = vec4( 0.2, 0.2, 0.2, 1.0 );\n    float frame = float( i ) / 40.0;\n    plot( uv, frame );\n  }\n  \n  float frameModPhase = fract( LFO_FREQ * iTime );\n  float frame = 0.5 + 0.5 * sin( TAU * frameModPhase );\n  drawColor = vec4( 1.0, 0.7, 0.2, 1.0 );\n  plot( uv, frame );\n\n  fragColor = drawTarget;\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define PRESET 0\n\n#define saturate(i) clamp(i, 0.,1.)\n#define linearstep(a,b,t) saturate(((t)-(a))/((b)-(a)))\n#define p2f(i) (pow(2.,((i)-69.)/12.)*440.)\n#define fs(i) fract(sin(114.514*i)*1919.810)\n\nconst float FREQ = 55.0;\nconst float LFO_FREQ = 0.25;\n\nconst float PI = acos( -1.0 );\nconst float TAU = 2.0 * PI;\n\nvec2 cis( float t ) {\n  return vec2( cos( t ), sin( t ) );\n}\n\nmat3 orthBas( vec3 z ) {\n  z = normalize( z );\n  vec3 up = abs( z.y ) < 0.999 ? vec3( 0.0, 1.0, 0.0 ) : vec3( 0.0, 0.0, 1.0 );\n  vec3 x = normalize( cross( up, z ) );\n  return mat3( x, cross( z, x ), z );\n}\n\nvec3 cyclicNoise( vec3 p, float pers, float lacu ) {\n  mat3 b = orthBas( vec3( -3.0, 4.0, -5.0 ) );\n  float amp = 0.5;\n  vec4 sum = vec4( 0.0 );\n  \n  for ( int i = 0; i < 5; i ++ ) {\n    p *= b;\n    p += sin( p.yzx );\n    sum += amp * vec4( cross( cos( p ), sin( p.zxy ) ), 1.0 );\n    amp *= pers;\n    p *= lacu;\n  }\n  \n  return sum.xyz / sum.w;\n}\n\nfloat wt( float phase, float frame ) {\n  #if PRESET == 0\n    float radius = 1.0;\n    float z = frame;\n    float pers = 0.5;\n    float lacu = 1.0 + frame;\n  #elif PRESET == 1\n    float radius = 0.5 + 0.5 * frame;\n    float z = 200.0;\n    float pers = 0.5;\n    float lacu = 2.0;\n  #elif PRESET == 2\n    float radius = 1.0;\n    float z = 12.0 - frame;\n    float pers = frame;\n    float lacu = 2.0;\n  #else\n    float radius = 1.0;\n    float z = 0.0;\n    float pers = 0.5;\n    float lacu = 1.0 + frame;\n  #endif\n\n  return cyclicNoise( vec3( radius * cis( TAU * phase ), z ), pers, lacu ).x;\n}\n","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[],"code":"vec2 mainSound( int samp, float time ) {\n  int framesPerCycle = int( iSampleRate / FREQ );\n  float phase = float( samp % framesPerCycle ) / float( framesPerCycle );\n\n  int framesPerFrameMod = int( iSampleRate / LFO_FREQ );\n  float frameModPhase = float( samp % framesPerFrameMod ) / float( framesPerFrameMod );\n  float frame = 0.5 + 0.5 * sin( TAU * frameModPhase );\n\n  return 0.3 * vec2( wt( phase, frame ) );\n}\n","name":"Sound","description":"","type":"sound"}]}