{"ver":"0.1","info":{"id":"XXsSRn","date":"1709082838","viewed":76,"name":"Hypnotic rainbow","username":"jcponcemath","description":"Partterns with functions","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["rainbow","functions"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n\nfloat Patterns (vec2 z, float t){\n  return sin(2.0*atan((z.y)/(z.x))+1.0*t) + sin(z.x * z.x / 16.0 + z.y * z.y / 16.0);\n  //return sin(z.x * z.x / .03 + z.y * z.y / .03 - t);\n}\n\n// A mapping function from p5js\nfloat map(float value, float min1, float max1, float min2, float max2) {\n  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}\n\n\n// https://github.com/d3/d3-color\nvec3 cubehelix(vec3 c) {\n  float a = c.y * c.z * (1.0 - c.z);\n  float cosh = cos(c.x + PI / 2.0);\n  float sinh = sin(c.x + PI / 2.0);\n  return vec3(\n    (c.z + a * (1.78277 * sinh - 0.14861 * cosh)),\n    (c.z - a * (0.29227 * cosh + 0.90649 * sinh)),\n    (c.z + a * (1.97294 * cosh))\n  );\n}\n\n// https://github.com/d3/d3-scale-chromatic\nvec3 cubehelixDefault(float t) {\n  return cubehelix(vec3(mix(300.0 / 180.0 * PI, -240.0 / 180.0 * PI, t), 0.5, t));\n}\n\n// https://github.com/d3/d3-scale-chromatic\nvec3 cubehelixRainbow(float t) {\n  if (t < 0.0 || t > 1.0) t -= floor(t);\n  float ts = abs(t - 0.5);\n  return cubehelix(vec3((360.0 * t - 100.0) / 180.0 * PI, 1.5 - 1.5 * ts, 0.8 - 0.9 * ts));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = ( fragCoord -.5* iResolution.xy ) / iResolution.y;\n    \n    float col = Patterns(uv, iTime * 1.5);\n    \n    float c1 = map(col, -1.0, 1.0, 0.0, 0.9);\n\n    // Output to screen\n    fragColor = vec4(cubehelixRainbow(c1),1.0);\n}","name":"Image","description":"","type":"image"}]}