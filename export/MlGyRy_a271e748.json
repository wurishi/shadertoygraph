{"ver":"0.1","info":{"id":"MlGyRy","date":"1536761446","viewed":257,"name":"sieve","username":"skaplun","description":"Repro of https://necessarydisorder.files.wordpress.com/2018/07/agif5_2.gif?w=982\nfrom this post https://necessarydisorder.wordpress.com/\nNeed to add MB","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["raymarch","volumetric"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define thickness .0025\n#define sqrt3 1.73205080757\n#define cell .033333333\n#define speed 5.\n#define boxmin -1.\n#define boxmax 1.\n#define fff(x) floor(x / thickness) * thickness\n\nfloat rnd(in vec2 st) {\n    return fract(sin(dot(st.xy, vec2(12.9898,78.233))) * 43758.5453123);\n}\n\nbool intersect(in vec3 orig, in vec3 dir, out float minDist, out float maxDist) {\n    float tmin = (boxmin - orig.x) / dir.x; \n    float tmax = (boxmax - orig.x) / dir.x; \n \n    if (tmin > tmax){\n    \tfloat tmp = tmin;\n        tmin = tmax;\n        tmax = tmp;\n    }\n \n    float tymin = (boxmin - orig.y) / dir.y; \n    float tymax = (boxmax - orig.y) / dir.y; \n \n    if (tymin > tymax){\n    \tfloat tmp = tymin;\n        tymin = tymax;\n        tymax = tmp;\n    }\n \n    if ((tmin > tymax) || (tymin > tmax)) \n        return false; \n \n    if (tymin > tmin) \n        tmin = tymin; \n \n    if (tymax < tmax) \n        tmax = tymax; \n \n    float tzmin = (boxmin - orig.z) / dir.z; \n    float tzmax = (boxmax - orig.z) / dir.z; \n \n    if (tzmin > tzmax){\n    \tfloat tmp = tzmin;\n        tzmin = tzmax;\n        tzmax = tmp;\n    }\n \n    if ((tmin > tzmax) || (tzmin > tmax)) \n        return false; \n \n    if (tzmin > tmin) \n        tmin = tzmin; \n \n    if (tzmax < tmax)\n        tmax = tzmax;\n \n    minDist = tmin;\n    maxDist = tmax;\n    return true;\n}\n\nvec3 rayDirection(float fieldOfView, vec2 size, vec2 fragCoord) {\n    vec2 xy = fragCoord - size / 2.;\n    float z = size.y / tan(radians(fieldOfView) / 2.);\n    return normalize(vec3(xy, -z));\n}\n\nmat4 viewMatrix(vec3 eye, vec3 center, vec3 up) {\n    vec3 f = normalize(center - eye),\n         s = normalize(cross(f, up)),\n         u = cross(s, f);\n    return mat4(vec4(s, 0.), vec4(u, 0.), vec4(-f, 0.), vec4(vec3(0.), 1.));\n}\n\nvec3 clrInside(in float lmin, in float lmax, in vec3 origin,  vec3 dir){\n\tfloat tc = fff(fract(iTime * .25));\n    float tp = fff(fract(iTime * .25 + .5));\n    float t1 = max(tc, tp);\n    float t2 = min(tc, tp);\n    \n    float iter = lmin + .01;\n    while(iter < lmax){\n    \tvec3 intersectionNormalized = vec3(.5) + (origin + dir * iter) * .5;\n        float y = fff(intersectionNormalized.y);\n        \n        float r = rnd(floor(intersectionNormalized.xz/cell + floor(iTime * .25)));\n        float deltatime = t1 - (.5 + r * .35);\n        float deltapos = (speed + (r * 2. - 1.)) * deltatime * step(0., deltatime);\n        float n = fff((t1 - deltapos));\n        \n        vec2 muv = abs(mod(intersectionNormalized.xz, cell) * 2. - cell);\n        if(y == max(n, t2) && step(muv.x, cell * .66) == 1. && step(muv.y, cell * .66) == 1.)\n        \treturn vec3(1.);\n        iter += .01;\n    }\n    return vec3(0.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec3 viewDir = rayDirection(45.0, iResolution.xy, fragCoord);\n    vec3 eye = vec3(0., .75, 3.5);\n    mat4 viewToWorld = viewMatrix(eye, vec3(0.0, 0.0, 0.0), vec3(0.0, 1.0, 0.0));\n    vec3 worldDir = (viewToWorld * vec4(viewDir, 0.0)).xyz;\n    \n    float lmin, lmax;\n    if (intersect(eye, worldDir, lmin, lmax)) {\n        vec3 point = eye + worldDir * lmin;\n        fragColor = vec4(clrInside(lmin, lmax, eye, worldDir), 1.);\n        return;\n    }\n    \n    fragColor = vec4(0);\n}","name":"Image","description":"","type":"image"}]}