{"ver":"0.1","info":{"id":"3sfBRj","date":"1588567983","viewed":54,"name":"simple 3d ball","username":"betseyliu","description":"simple 3d ball","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["learn"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float DistLine(vec3 ro, vec3 rd, vec3 p){\n\treturn length(cross(p-ro, rd))/length(rd); \n}\n\nfloat DrawPoint(vec3 ro, vec3 rd, vec3 p, float pointSize) {\n\n    float d = DistLine(ro, rd, p);\n    d = smoothstep(pointSize, pointSize - .01, d);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)   \n    vec2 uv = fragCoord/iResolution.xy;\n\tuv -= .5;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    \n    \n    float t = iTime;\n    \n    vec3 ro = vec3(3. * sin(t), -1., -3.* cos(t));\n    vec3 lookat = vec3(0.);\n    \n    float zoom = 1.;\n    vec3 f = normalize(lookat - ro);\n  \tvec3 r = cross(vec3(0., 1., 0.), f);\n        vec3 u = cross(f, r);\n    \n    vec3 c = ro + f * zoom;\n    vec3 i = c + uv.x *r + uv.y * u;\n    \n    vec3 rd = i - ro;\n    \n   \tfloat d = 0.;\n   \tfloat size = 1.;\n    size /= 2.;\n    \n    d += DrawPoint(ro, rd, vec3(-size, size, -size), .05);\n    d += DrawPoint(ro, rd, vec3(-size, -size, -size), .05);\n    d += DrawPoint(ro, rd, vec3(size, size, -size), .05);\n    d += DrawPoint(ro, rd, vec3(size, -size, -size), .05);\n    d += DrawPoint(ro, rd, vec3(-size, size, size), .05);\n    d += DrawPoint(ro, rd, vec3(-size, -size, size), .05);\n    d += DrawPoint(ro, rd, vec3(size, size, size), .05);\n    d += DrawPoint(ro, rd, vec3(size, -size, size), .05);\n    \n    \n    \n    fragColor = vec4(d);\n    \n} ","name":"Image","description":"","type":"image"}]}