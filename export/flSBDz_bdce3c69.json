{"ver":"0.1","info":{"id":"flSBDz","date":"1651995995","viewed":478,"name":"Basic Ray Marching Sphere","username":"Rrrrichard","description":"Basic Ray marching sphere","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 600\n#define MAX_DIST 1e10\n#define EPS .001\n\nfloat GetSceneDistance(vec3 point)\n{\n    vec4 sphere = vec4(0, 1., 6, 1.); // (xyz, radius)\n  \n    float sphere_dist = length(point - sphere.xyz)-sphere.w;\n    float plane_dist = point.y + 0.1; \n    \n    float d = min(sphere_dist, plane_dist); \n    \n    return d; \n}\n\nfloat RayMarch(vec3 ray_origin, vec3 ray_dir)\n{\n    float d = 0.; \n    for(int i = 0; i < MAX_STEPS; i++)\n    {\n        vec3 p = ray_origin + ray_dir * d;\n        float ds = GetSceneDistance(p); \n        d += ds; \n        if(d > MAX_DIST || ds < EPS) \n            break;  // hit object or out of scene\n    }\n    return d; \n}\n\nvec3 GetNormal(vec3 point)\n{\n    float d = GetSceneDistance(point); \n    vec2 e = vec2(0.01, 0); \n    vec3 n = d - vec3(\n        GetSceneDistance(point - e.xyy),\n        GetSceneDistance(point - e.yxy),\n        GetSceneDistance(point - e.yyx)\n    );\n    \n    return normalize(n); \n}\n\nfloat GetLight(vec3 point)\n{    \n    vec3 light_pos = vec3(3, 5, 2); \n     \n    vec3 to_light = normalize(light_pos - point); \n    vec3 normal = GetNormal(point); \n    \n    float intensity = 0.6;\n    float light = intensity * clamp(dot(to_light, normal), 0., 1.); \n    \n    float d = RayMarch(point+normal*2.*EPS, to_light);\n    \n    if (d < length(light_pos - point))\n        light *= 0.6;\n    \n    return light;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -0.5 to 0.5)\n    vec2 uv = (fragCoord - .5*iResolution.xy)/iResolution.x;\n\n    // Time varying pixel color\n    vec3 ray_origin = vec3(0, 1, -1);\n    vec3 ray_dir = normalize(vec3(uv.x, uv.y, 1.));\n   \n    float d = RayMarch(ray_origin, ray_dir);\n    \n    vec3 point = ray_origin + d * ray_dir; \n   \n    float diffuse_light = GetLight(point); \n    \n    vec3 col = vec3(diffuse_light);\n    \n    col = pow(col, vec3(0.4545)); // Gamma correction\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}