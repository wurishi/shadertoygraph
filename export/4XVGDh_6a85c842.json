{"ver":"0.1","info":{"id":"4XVGDh","date":"1718018181","viewed":51,"name":"EUROPE","username":"Dalmador","description":"EUROPEE","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["europa","flagge"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define pi 3.14159\n\n// rotate coordinate around (0, 0)\nvec2 rotated(vec2 coords, float angle){\n    vec2 result;\n    angle = angle * pi / 180.;\n    result.x = coords.x * cos(angle) + coords.y * sin(angle);\n    result.y = -coords.x * sin(angle) + coords.y * cos(angle);\n    return result;\n}\n\n// credit: https://stackoverflow.com/questions/2049582/how-to-determine-if-a-point-is-in-a-2d-triangle\nfloat sgn (vec2 p1, vec2 p2, vec2 p3)\n{\n    return (p1.x - p3.x) * (p2.y - p3.y) - (p2.x - p3.x) * (p1.y - p3.y);\n}\n\nbool pointInTriangle (vec2 pt, vec2 v1, vec2 v2, vec2 v3)\n{\n    float d1, d2, d3;\n    bool has_neg, has_pos;\n\n    d1 = sgn(pt, v1, v2);\n    d2 = sgn(pt, v2, v3);\n    d3 = sgn(pt, v3, v1);\n\n    has_neg = (d1 < 0.) || (d2 < 0.) || (d3 < 0.);\n    has_pos = (d1 > 0.) || (d2 > 0.) || (d3 > 0.);\n\n    return !(has_neg && has_pos);\n}\n\nbool inStar(vec2 pos, vec2 center, float radius, float funFactor, int points, int variant)\n{\n    pos -= center;\n    float count = 0.;\n    float angle = 360. / float(points);\n    for (int i = 0; i < points; i++)\n    {\n        vec2 p1 = rotated(vec2(0. , radius), float(i) * angle);\n        vec2 p2 = rotated(vec2(0. , radius), float(i + variant) * angle);\n        vec2 p3 = rotated(vec2(0. , radius), float(i - variant) * angle + funFactor);\n        if (pointInTriangle(pos, p1, p2, p3))\n        {\n            count++;\n        }\n    }\n    return (count > 1. && count <= float(points)) && !(count == 2. && points == 8 && variant == 3);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    \n    float radius = 2./3.;\n    float starRadius = 1./9.;\n    int starCount = 12;\n    \n    float angle = 360. / float(starCount);\n    \n    fragColor = vec4( 0., 0.2, 0.6, 0.);\n    float fun = iTime * 50.;\n    for (int i = 0; i < starCount; i++)\n    {    \n        vec2 center = rotated(vec2(0., radius), float(i) * angle);\n        if (inStar(uv, center, starRadius, fun, 5, 2))\n        {\n            fragColor = vec4(1., 0.8, 0., 0.);\n        }\n    }\n\n}","name":"Image","description":"","type":"image"}]}