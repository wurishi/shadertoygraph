{"ver":"0.1","info":{"id":"4llfWj","date":"1513351677","viewed":151,"name":"Inefficient Cube","username":"MetCodeMass","description":"So, as you can see, I'm a beginner and I tried to make a cube, but it barely runs at 30 fps on my PC. Anyway, enjoy!","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["cube","inefficient"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.1415926535897932384626433832795;\n\nvec3 lightDirection = vec3(.5, -.25, -1);\nvec3 rotationAxis = vec3(0, 1, .25);\nfloat rotationSpeed = .5;\n\n// front\n\nvec3 p1_1 = vec3(-100, -100, 100);\nvec3 p2_1 = vec3(100, -100, 100);\nvec3 p3_1 = vec3(100, 100, 100);\n\nvec3 p1_2 = vec3(-100, -100, 100);\nvec3 p2_2 = vec3(-100, 100, 100);\nvec3 p3_2 = vec3(100, 100, 100);\n\n// back\n\nvec3 p1_3 = vec3(-100, -100, -100);\nvec3 p2_3 = vec3(100, -100, -100);\nvec3 p3_3 = vec3(100, 100, -100);\n\nvec3 p1_4 = vec3(-100, -100, -100);\nvec3 p2_4 = vec3(-100, 100, -100);\nvec3 p3_4 = vec3(100, 100, -100);\n\n// left\n\nvec3 p1_5 = vec3(-100, -100, 100);\nvec3 p2_5 = vec3(-100, 100, 100);\nvec3 p3_5 = vec3(-100, 100, -100);\n\nvec3 p1_6 = vec3(-100, -100, 100);\nvec3 p2_6 = vec3(-100, -100, -100);\nvec3 p3_6 = vec3(-100, 100, -100);\n\n// right\n\nvec3 p1_7 = vec3(100, -100, 100);\nvec3 p2_7 = vec3(100, 100, 100);\nvec3 p3_7 = vec3(100, 100, -100);\n\nvec3 p1_8 = vec3(100, -100, 100);\nvec3 p2_8 = vec3(100, -100, -100);\nvec3 p3_8 = vec3(100, 100, -100);\n\n// bottom\n\nvec3 p1_9 = vec3(100, -100, 100);\nvec3 p2_9 = vec3(-100, -100, 100);\nvec3 p3_9 = vec3(-100, -100, -100);\n\nvec3 p1_10 = vec3(100, -100, 100);\nvec3 p2_10 = vec3(100, -100, -100);\nvec3 p3_10 = vec3(-100, -100, -100);\n\n// top\n\nvec3 p1_11 = vec3(100, 100, 100);\nvec3 p2_11 = vec3(-100, 100, 100);\nvec3 p3_11 = vec3(-100, 100, -100);\n\nvec3 p1_12 = vec3(100, 100, 100);\nvec3 p2_12 = vec3(100, 100, -100);\nvec3 p3_12 = vec3(-100, 100, -100);\n\nfloat lineSign(vec3 p1, vec3 p2, vec3 p3)\n{\n    return (p1.x - p3.x) * (p2.y - p3.y) - (p2.x - p3.x) * (p1.y - p3.y);\n}\n\nbool pointInTriangle(vec3 pt, vec3 v1, vec3 v2, vec3 v3)\n{\n    bool b1, b2, b3;\n\n    b1 = lineSign(pt, v1, v2) < 0.0;\n    b2 = lineSign(pt, v2, v3) < 0.0;\n    b3 = lineSign(pt, v3, v1) < 0.0;\n\n    return ((b1 == b2) && (b2 == b3));\n}\n\nvec4 intersect(vec3 p) {\n    vec3 direction = cross(vec3(p2_1 - p1_1), vec3(p3_1 - p1_1));\n\tvec3 normal = direction / length(direction);\n    \n    float lightIntensity = \tPI - acos(\n        \t\t\t\t\t\tdot(-lightDirection, normal) /\n                            \t(length(-lightDirection) * length(normal)));\n    \n    if (abs(dot(p - p1_1, normal)) < 1.0 && pointInTriangle(p, p1_1, p2_1, p3_1)) {\n        return lightIntensity / PI * vec4(1, 1, 1, 0);\n    }\n    \n    if (abs(dot(p - p1_2, normal)) < 1.0 && pointInTriangle(p, p1_2, p2_2, p3_2)) {\n        return lightIntensity / PI * vec4(1, 1, 1, 0);\n    }\n    \n    \n    direction = -cross(vec3(p2_3 - p1_3), vec3(p3_3 - p1_3));\n\tnormal = direction / length(direction);\n    \n    lightIntensity =\tPI - acos(\n                            dot(-lightDirection, normal) /\n                            (length(-lightDirection) * length(normal)));\n        \n    if (abs(dot(p - p1_3, normal)) < 1.0 && pointInTriangle(p, p1_3, p2_3, p3_3)) {\n        return lightIntensity / PI * vec4(1, 1, 1, 0);\n    }\n        \n    if (abs(dot(p - p1_4, normal)) < 1.0 && pointInTriangle(p, p1_4, p2_4, p3_4)) {\n        return lightIntensity / PI * vec4(1, 1, 1, 0);\n    }\n    \n    \n    direction = cross(vec3(p2_5 - p1_5), vec3(p3_5 - p1_5));\n\tnormal = direction / length(direction);\n    \n    lightIntensity =\tPI - acos(\n                            dot(-lightDirection, normal) /\n                            (length(-lightDirection) * length(normal)));\n        \n    if (abs(dot(p - p1_5, normal)) < 1.0 && pointInTriangle(p, p1_5, p2_5, p3_5)) {\n        return lightIntensity / PI * vec4(1, 1, 1, 0);\n    }\n        \n    if (abs(dot(p - p1_6, normal)) < 1.0 && pointInTriangle(p, p1_6, p2_6, p3_6)) {\n        return lightIntensity / PI * vec4(1, 1, 1, 0);\n    }\n    \n    \n    direction = -cross(vec3(p2_7 - p1_7), vec3(p3_7 - p1_7));\n\tnormal = direction / length(direction);\n    \n    lightIntensity =\tPI - acos(\n                            dot(-lightDirection, normal) /\n                            (length(-lightDirection) * length(normal)));\n        \n    if (abs(dot(p - p1_7, normal)) < 1.0 && pointInTriangle(p, p1_7, p2_7, p3_7)) {\n        return lightIntensity / PI * vec4(1, 1, 1, 0);\n    }\n    \n    if (abs(dot(p - p1_8, normal)) < 1.0 && pointInTriangle(p, p1_8, p2_8, p3_8)) {\n        return lightIntensity / PI * vec4(1, 1, 1, 0);\n    }\n    \n    \n    direction = cross(vec3(p2_9 - p1_9), vec3(p3_9 - p1_9));\n\tnormal = direction / length(direction);\n    \n    lightIntensity =\tPI - acos(\n                            dot(-lightDirection, normal) /\n                            (length(-lightDirection) * length(normal)));\n        \n    if (abs(dot(p - p1_9, normal)) < 1.0 && pointInTriangle(p, p1_9, p2_9, p3_9)) {\n        return lightIntensity / PI * vec4(1, 1, 1, 0);\n    }\n    \n    if (abs(dot(p - p1_10, normal)) < 1.0 && pointInTriangle(p, p1_10, p2_10, p3_10)) {\n        return lightIntensity / PI * vec4(1, 1, 1, 0);\n    }\n    \n    \n    direction = -cross(vec3(p2_11 - p1_11), vec3(p3_11 - p1_11));\n\tnormal = direction / length(direction);\n    \n    lightIntensity =\tPI - acos(\n                            dot(-lightDirection, normal) /\n                            (length(-lightDirection) * length(normal)));\n        \n    if (abs(dot(p - p1_11, normal)) < 1.0 && pointInTriangle(p, p1_11, p2_11, p3_11)) {\n        return lightIntensity / PI * vec4(1, 1, 1, 0);\n    }\n        \n    if (abs(dot(p - p1_12, normal)) < 1.0 && pointInTriangle(p, p1_12, p2_12, p3_12)) {\n        return lightIntensity / PI * vec4(1, 1, 1, 0);\n    }\n    \n    \n    return vec4(0, 0, 0, 0);\n}\n\nmat4 rotationMatrix(vec3 axis, float angle)\n{\n    axis = normalize(axis);\n    float s = sin(angle);\n    float c = cos(angle);\n    float oc = 1.0 - c;\n    \n    return mat4(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,\n                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,\n                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,\n                0.0,                                0.0,                                0.0,                                1.0);\n}\n\nvoid rotate(float angle) {\n\tvec4 p1_1_temp = rotationMatrix(rotationAxis, angle) * vec4(p1_1.x, p1_1.y, p1_1.z, 0);\n    p1_1 = vec3(p1_1_temp.x, p1_1_temp.y, p1_1_temp.z);\n    \n    vec4 p2_1_temp = rotationMatrix(rotationAxis, angle) * vec4(p2_1.x, p2_1.y, p2_1.z, 0);\n    p2_1 = vec3(p2_1_temp.x, p2_1_temp.y, p2_1_temp.z);\n    \n    vec4 p3_1_temp = rotationMatrix(rotationAxis, angle) * vec4(p3_1.x, p3_1.y, p3_1.z, 0);\n    p3_1 = vec3(p3_1_temp.x, p3_1_temp.y, p3_1_temp.z);\n    \n    vec4 p1_2_temp = rotationMatrix(rotationAxis, angle) * vec4(p1_2.x, p1_2.y, p1_2.z, 0);\n    p1_2 = vec3(p1_2_temp.x, p1_2_temp.y, p1_2_temp.z);\n    \n    vec4 p2_2_temp = rotationMatrix(rotationAxis, angle) * vec4(p2_2.x, p2_2.y, p2_2.z, 0);\n    p2_2 = vec3(p2_2_temp.x, p2_2_temp.y, p2_2_temp.z);\n    \n    vec4 p3_2_temp = rotationMatrix(rotationAxis, angle) * vec4(p3_2.x, p3_2.y, p3_2.z, 0);\n    p3_2 = vec3(p3_2_temp.x, p3_2_temp.y, p3_2_temp.z);\n    \n    \n    vec4 p1_3_temp = rotationMatrix(rotationAxis, angle) * vec4(p1_3.x, p1_3.y, p1_3.z, 0);\n    p1_3 = vec3(p1_3_temp.x, p1_3_temp.y, p1_3_temp.z);\n    \n    vec4 p2_3_temp = rotationMatrix(rotationAxis, angle) * vec4(p2_3.x, p2_3.y, p2_3.z, 0);\n    p2_3 = vec3(p2_3_temp.x, p2_3_temp.y, p2_3_temp.z);\n    \n    vec4 p3_3_temp = rotationMatrix(rotationAxis, angle) * vec4(p3_3.x, p3_3.y, p3_3.z, 0);\n    p3_3 = vec3(p3_3_temp.x, p3_3_temp.y, p3_3_temp.z);\n    \n    vec4 p1_4_temp = rotationMatrix(rotationAxis, angle) * vec4(p1_4.x, p1_4.y, p1_4.z, 0);\n    p1_4 = vec3(p1_4_temp.x, p1_4_temp.y, p1_4_temp.z);\n    \n    vec4 p2_4_temp = rotationMatrix(rotationAxis, angle) * vec4(p2_4.x, p2_4.y, p2_4.z, 0);\n    p2_4 = vec3(p2_4_temp.x, p2_4_temp.y, p2_4_temp.z);\n    \n    vec4 p3_4_temp = rotationMatrix(rotationAxis, angle) * vec4(p3_4.x, p3_4.y, p3_4.z, 0);\n    p3_4 = vec3(p3_4_temp.x, p3_4_temp.y, p3_4_temp.z);\n    \n    \n    vec4 p1_5_temp = rotationMatrix(rotationAxis, angle) * vec4(p1_5.x, p1_5.y, p1_5.z, 0);\n    p1_5 = vec3(p1_5_temp.x, p1_5_temp.y, p1_5_temp.z);\n    \n    vec4 p2_5_temp = rotationMatrix(rotationAxis, angle) * vec4(p2_5.x, p2_5.y, p2_5.z, 0);\n    p2_5 = vec3(p2_5_temp.x, p2_5_temp.y, p2_5_temp.z);\n    \n    vec4 p3_5_temp = rotationMatrix(rotationAxis, angle) * vec4(p3_5.x, p3_5.y, p3_5.z, 0);\n    p3_5 = vec3(p3_5_temp.x, p3_5_temp.y, p3_5_temp.z);\n    \n    vec4 p1_6_temp = rotationMatrix(rotationAxis, angle) * vec4(p1_6.x, p1_6.y, p1_6.z, 0);\n    p1_6 = vec3(p1_6_temp.x, p1_6_temp.y, p1_6_temp.z);\n    \n    vec4 p2_6_temp = rotationMatrix(rotationAxis, angle) * vec4(p2_6.x, p2_6.y, p2_6.z, 0);\n    p2_6 = vec3(p2_6_temp.x, p2_6_temp.y, p2_6_temp.z);\n    \n    vec4 p3_6_temp = rotationMatrix(rotationAxis, angle) * vec4(p3_6.x, p3_6.y, p3_6.z, 0);\n    p3_6 = vec3(p3_6_temp.x, p3_6_temp.y, p3_6_temp.z);\n    \n    \n    vec4 p1_7_temp = rotationMatrix(rotationAxis, angle) * vec4(p1_7.x, p1_7.y, p1_7.z, 0);\n    p1_7 = vec3(p1_7_temp.x, p1_7_temp.y, p1_7_temp.z);\n    \n    vec4 p2_7_temp = rotationMatrix(rotationAxis, angle) * vec4(p2_7.x, p2_7.y, p2_7.z, 0);\n    p2_7 = vec3(p2_7_temp.x, p2_7_temp.y, p2_7_temp.z);\n    \n    vec4 p3_7_temp = rotationMatrix(rotationAxis, angle) * vec4(p3_7.x, p3_7.y, p3_7.z, 0);\n    p3_7 = vec3(p3_7_temp.x, p3_7_temp.y, p3_7_temp.z);\n    \n    vec4 p1_8_temp = rotationMatrix(rotationAxis, angle) * vec4(p1_8.x, p1_8.y, p1_8.z, 0);\n    p1_8 = vec3(p1_8_temp.x, p1_8_temp.y, p1_8_temp.z);\n    \n    vec4 p2_8_temp = rotationMatrix(rotationAxis, angle) * vec4(p2_8.x, p2_8.y, p2_8.z, 0);\n    p2_8 = vec3(p2_8_temp.x, p2_8_temp.y, p2_8_temp.z);\n    \n    vec4 p3_8_temp = rotationMatrix(rotationAxis, angle) * vec4(p3_8.x, p3_8.y, p3_8.z, 0);\n    p3_8 = vec3(p3_8_temp.x, p3_8_temp.y, p3_8_temp.z);\n    \n    \n    vec4 p1_9_temp = rotationMatrix(rotationAxis, angle) * vec4(p1_9.x, p1_9.y, p1_9.z, 0);\n    p1_9 = vec3(p1_9_temp.x, p1_9_temp.y, p1_9_temp.z);\n    \n    vec4 p2_9_temp = rotationMatrix(rotationAxis, angle) * vec4(p2_9.x, p2_9.y, p2_9.z, 0);\n    p2_9 = vec3(p2_9_temp.x, p2_9_temp.y, p2_9_temp.z);\n    \n    vec4 p3_9_temp = rotationMatrix(rotationAxis, angle) * vec4(p3_9.x, p3_9.y, p3_9.z, 0);\n    p3_9 = vec3(p3_9_temp.x, p3_9_temp.y, p3_9_temp.z);\n    \n    vec4 p1_10_temp = rotationMatrix(rotationAxis, angle) * vec4(p1_10.x, p1_10.y, p1_10.z, 0);\n    p1_10 = vec3(p1_10_temp.x, p1_10_temp.y, p1_10_temp.z);\n    \n    vec4 p2_10_temp = rotationMatrix(rotationAxis, angle) * vec4(p2_10.x, p2_10.y, p2_10.z, 0);\n    p2_10 = vec3(p2_10_temp.x, p2_10_temp.y, p2_10_temp.z);\n    \n    vec4 p3_10_temp = rotationMatrix(rotationAxis, angle) * vec4(p3_10.x, p3_10.y, p3_10.z, 0);\n    p3_10 = vec3(p3_10_temp.x, p3_10_temp.y, p3_10_temp.z);\n    \n    \n    vec4 p1_11_temp = rotationMatrix(rotationAxis, angle) * vec4(p1_11.x, p1_11.y, p1_11.z, 0);\n    p1_11 = vec3(p1_11_temp.x, p1_11_temp.y, p1_11_temp.z);\n    \n    vec4 p2_11_temp = rotationMatrix(rotationAxis, angle) * vec4(p2_11.x, p2_11.y, p2_11.z, 0);\n    p2_11 = vec3(p2_11_temp.x, p2_11_temp.y, p2_11_temp.z);\n    \n    vec4 p3_11_temp = rotationMatrix(rotationAxis, angle) * vec4(p3_11.x, p3_11.y, p3_11.z, 0);\n    p3_11 = vec3(p3_11_temp.x, p3_11_temp.y, p3_11_temp.z);\n    \n    vec4 p1_12_temp = rotationMatrix(rotationAxis, angle) * vec4(p1_12.x, p1_12.y, p1_12.z, 0);\n    p1_12 = vec3(p1_12_temp.x, p1_12_temp.y, p1_12_temp.z);\n    \n    vec4 p2_12_temp = rotationMatrix(rotationAxis, angle) * vec4(p2_12.x, p2_12.y, p2_12.z, 0);\n    p2_12 = vec3(p2_12_temp.x, p2_12_temp.y, p2_12_temp.z);\n    \n    vec4 p3_12_temp = rotationMatrix(rotationAxis, angle) * vec4(p3_12.x, p3_12.y, p3_12.z, 0);\n    p3_12 = vec3(p3_12_temp.x, p3_12_temp.y, p3_12_temp.z);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    rotate(PI * .75 + sin(rotationSpeed * iTime) * .5);\n    \n    vec3 camPos = vec3(0, 0, 1000);\n\tvec3 screenPos = vec3(fragCoord.x - iResolution.x * .5, fragCoord.y - iResolution.y * .5, 200);\n    vec3 ray = normalize(screenPos - camPos);\n    \n    vec3 p = screenPos;\n    \n    for (int i = 0; i < 300; i++) {\n        vec4 color = intersect(p);\n        \n        if (color != vec4(0, 0, 0, 0)) {\n            fragColor = color * (1.0 - sqrt(distance(p, screenPos)) * .05) * 2.0;\n            return;\n        }\n        \n        p += ray;\n    }\n    \n    fragColor = vec4(0, 0, 0, 0);\n}\n","name":"Image","description":"","type":"image"}]}