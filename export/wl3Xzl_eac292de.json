{"ver":"0.1","info":{"id":"wl3Xzl","date":"1581520188","viewed":48,"name":"Cuarto chico-color-v2--II-a","username":"jorge2017a1","description":"Cuarto chico-color-v2--II-a","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["cuartochicocolorv2iia"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n\n\n\n\nconst int CInf = 1;\nconst int CSup = 2;\nconst int CDer = 3;\nconst int CIzq = 4;\nconst int CAtras = 5;\nconst int CPlane = 6;\nconst int CLight = 7;\nconst int CSky = 8;\nconst int CPlane2 =9;\n\nvec3 camPos = vec3(0.0);\nvec3 lightPos = vec3(0.0);\nconst float PI = 3.14159;\n\n\nfloat closeObj = 0.0;\n\nstruct TObj\n{\n    float tipo;\n    float dist;\n};\n    \n\nTObj mObj;\n\n\n\n//------------------------------------\nfloat circleDist(vec2 p, float radius)\n{\n\treturn length(p) - radius;\n}\n\n///---------------------------------------\n\n\n//Torus function\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n//Sphere function\nfloat sdSphere( vec3 p, float s1 )\n{\n   vec4 s = vec4(0, s1, 9, s1);\n   return  length(p-s.xyz)-s.w;   \n}\n//Box function\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return length(max(d,0.0))\n         + min(max(d.x,max(d.y,d.z)),0.0); // remove this line for an only partially signed sdf \n}\n//Triprism function\nfloat sdTriPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n    return max(q.z-h.y,max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5);\n}\n//Cone function\nfloat sdCone( vec3 p, vec2 c )\n{\n    // c must be normalized\n    float q = length(p.xy);\n    return dot(c,vec2(q,p.z));\n}\n\n///--------------------------------------------\n\n\n\nfloat intersectSDF(float distA, float distB) {\n    return max(distA, distB);\n}\n\nfloat unionSDF(float distA, float distB) {\n    return min(distA, distB);\n}\n\nfloat differenceSDF(float distA, float distB) {\n    return max(distA, -distB);\n}\n\n\nvec2 opU(vec2 d1, vec2 d2 ) {\n  vec2 resp;\n    if (d1.x < d2.x){ \n        resp = d1;\n    }\n    else\n    {\n        resp = d2;\n    }\n     \n   return resp; \n}\n\n///----------------------------------------------\n\n\nvec3 getSphereColor(int i)\n{\n\tswitch(i)\n    {\n    case 0:\n        return vec3(85./255., 205./255., 252./255.);\n    case 1:\n        //return vec3(247./255., 168./255.,  184./255.);\n        return vec3(1, 0.5, 0);\n    case 2:\n        return vec3(1.0, 1.0, 1.0);\n    case 3:\n        return vec3(247./255., 168./255.,  184./255.); \n    case 4:\n        //return vec3(85./255., 205./255., 252./255.);\n        return vec3(0, 1, 1);\n        \n    case 5:\n        return vec3(85./255., 205./255., 252./255.);\n    case 6:\n        //return vec3(247./255., 168./255.,  184./255.);\n        return  vec3(0.5, 0.8, 0.9);\n        \n    case 7:\n        return vec3(1.0, 1.0, 1.0);\n    case 8:\n        //return vec3(247./255., 168./255.,  184./255.); \n        //return vec3(55./255., 30./255.,  255./255.); \n        return vec3(0.425, 0.56, 0.9); \n    case 9:\n        //return vec3(85./255., 205./255., 252./255.); \n        return vec3(0.5, 0.6, 0.6); \n    case 10:\n        return vec3(0.0, 1.0, 0.0);\n    \n    \n        \n    } \n}\n\n//---------------------------------------------------\nfloat GetDist(vec3 p  ) {\t\n\n \t\n    \n    float d;\n    float dif1;\n    float dif2;\n    float dif3;\n    \n    d=999.9;\n    float planeDist = p.y;\n    \n   \n    \n    \n    \n    \n    vec2 res;\n    res = vec2(9999, 0);\n    \n    res = opU(res, vec2(planeDist, 6));\n    \n    \n    float bxInf = sdBox (p-vec3(0.0,1,4.5),vec3(1.65,0.1,0.5));\n    float bxDer = sdBox (p-vec3(-1.6,1.9,4.5),vec3(0.1,1.0,0.5));\n    float bxIzq = sdBox (p-vec3(1.6,1.9,4.5),vec3(0.1,1.0,0.5));\n    float bxSup = sdBox (p-vec3(-0.0,3.0,4.5),vec3(2.5,0.1,0.5));\n    float bxAtras = sdBox(p-vec3(-0.1,2.1,5.0),vec3(1.65,1.0,0.1));\n    \n    res = opU(res, vec2(bxInf, CInf));\n    \n    \n    float bxAtrasVentana = sdBox (p-vec3(-0.5,2.1,5.0),vec3(0.5,0.5,0.4));\n    float bxAtrasPuerta = sdBox (p-vec3(0.8,1.8,5.0),vec3(0.45,0.8,0.4));\n    float bxSupVentana = sdBox (p-vec3(0.0,3.0,4.5),vec3(0.5,0.21,0.4));\n    float bxIzqVentana = sdBox (p-vec3(1.6,1.9,4.5),vec3(0.11,0.30,0.25));\n    float bxDerVentana = sdBox (p-vec3(-1.6,1.9,4.5),vec3(0.11,0.55,0.25));\n    \n    \n    dif2=differenceSDF(bxIzq,bxIzqVentana);     \n    res = opU(res, vec2(dif2, CIzq));\n    \n    \n    dif1 = differenceSDF(bxAtras,bxAtrasVentana);\n    dif1= differenceSDF(dif1,bxAtrasPuerta);\n    res = opU(res, vec2(dif1, CAtras));\n    \n    \n    \n    \n       \n    dif2=differenceSDF(bxSup,bxSupVentana);     \n    res = opU(res, vec2(dif2, CSup));\n    \n    \n    \n    dif3=differenceSDF(bxDer,bxDerVentana);     \n    res = opU(res, vec2(dif3, CDer));\n    \n    \n    d = res.x;\n    mObj.dist = res.x;\n    mObj.tipo = res.y;\n        \n    return d;\n}\n\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.2;\n    //Determines size of shadow\n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || dS<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    //Texture of white and black in image\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\n\n//-------------------------------------------------\n\nfloat occlusion(vec3 ro, vec3 rd){\n    float k = 1.0;\n    float d = 0.0;\n    float occ = 0.0;\n    \n    for(int i = 0; i < 25; i++){\n        d = GetDist(ro + 0.1 * k * rd);\n        occ += 1.0 / pow(2.0, k) * (k * 0.1 - d);\n        k += 1.0;\n    }\n    return 1.0 - clamp(2.0 * occ, 0.0, 1.0);\n}\n\n\n//Determine if a point is in shadow - 1.0 = not in shadow\nfloat shadow(vec3 ro, vec3 rd){\n    float t = 0.01;\n    float d = 0.0;\n    float shadow = 1.0;\n    for(int iter = 0; iter < 256; iter++){\n        d = GetDist(ro + rd * t);\n        if(d < 0.0001){\n            return 0.0;\n        }\n        if(t > length(ro - lightPos) - 0.5){\n            break;\n        }\n        shadow = min(shadow, 128.0 * d / t);\n        t += d;\n    }\n    return shadow;\n}\n\n\n\n//Square\nfloat sqr(float x){\n  return x * x;\n}\n\n//Diffusion normalisation\nfloat diff(float albedo){\n  return albedo / PI;\n}\n\n//GGX NDF\nfloat specD(float NdotH, float a){\n  float asqr = sqr(a);\n  float NdotHsqr = sqr(NdotH);\n  return asqr / (PI * sqr((NdotHsqr) * (asqr - 1.0) + 1.0));\n}\n\nfloat G1(float NdotX, float k){\n  return NdotX / (NdotX * (1.0 - k) + k);\n}\n\n//Geometric attenuation term\nfloat specG(float NdotV, float NdotL, float k){\n  k /= 2.0;\n  return G1(NdotV, k) * G1(NdotL, k);\n}\n\n//Schlick fresnel approximation used by Unreal Engine\nfloat fresnel(float AdotB){\n  float power = pow(2.0, (-5.55473 * AdotB - 6.98316) * AdotB);\n  return 0.04 + (1.0 - 0.04) * power;\n}\n\n\nvec3 BRDF(vec3 L, vec3 V, vec3 N, vec3 c, float metallic, float roughness, float s, float o){\n  vec3 H = normalize(L + V);\n  float NdotH = dot(N, H);\n  float NdotL = dot(N, L);\n  float NdotV = dot(N, V);\n  \n  if (NdotL < 0.0 || NdotV < 0.0) return vec3(0.0);\n  \n  float VdotH = dot(V, H);\n  float alpha = roughness * roughness;\n\n  float conductor = 1.0 - metallic;\n\n  vec3 specCol = mix(vec3(1.0), c, metallic);\n  \n  float FresL = fresnel(NdotL);\n  float FresV = fresnel(NdotV);\n  float Fresd90 = 0.5 + 2.0 * sqr(VdotH) * roughness;\n  float Fresd = mix(1.0, Fresd90, FresL) * mix(1.0, Fresd90, FresV); \n  \n  float Ds = specD(NdotH, alpha);\n  float FresH = fresnel(VdotH);\n  vec3 Fress = mix(specCol, vec3(1.0), FresH);\n  float Gs = specG(NdotV, NdotL, roughness);\n\n  return (diff(conductor) * Fresd * max(0.0, NdotL) * o * c + Gs * Fress * Ds * floor(s)) - (0.25 - 0.25 * s) * c;\n}\n\nvec3 colour(vec3 p, float id){\n    vec3 n = GetNormal(p);\n    vec3 l = normalize(lightPos - p);\n    vec3 v = normalize(camPos - p);\n    \n    vec3 amb = 0.25 * vec3(1.0);\n    \n    float s = shadow(p, l);\n    \n    float o = occlusion(p, n);\n    \n    if(id == 1.0){\n        vec3 col;\n        vec2 t = mod(floor(p.xz), 2.0);\n        if(t == vec2(0.0) || t == vec2(1.0)){\n            col = getSphereColor(int(id));\n        }else{\n            col = getSphereColor(int(id));\n        }\n        return BRDF(l, v, n, col, 0.4, 0.2, s, o);\n    }\n    if(id == 2.0){\n        float metal = iMouse.x / iResolution.x;\n        float rough = iMouse.y / iResolution.y;\n        if(rough == 0.0 && metal == 0.0){\n            metal = 0.1;\n            rough = 0.1;\n        }\n        return BRDF(l, v, n, getSphereColor(int(id)), metal, rough, s, o);\n    }\n    \n    //return vec3(0.0, 1.0, 0.0);\n    \n    return getSphereColor(int(id));\n}\n\n\n\nvec3 colourV2(vec3 p, float id,vec3 plightPos, vec3 pcamPos  ){\n    \n    vec3 n = GetNormal(p);\n    vec3 l = normalize(plightPos - p);\n    vec3 v = normalize(pcamPos - p);\n    \n    vec3 amb = 0.25 * vec3(1.0);\n    \n    float s = shadow(p, l);\n    \n    float o = occlusion(p, n);\n    \n    \n    \n    float metal = iMouse.x / iResolution.x;\n        float rough = iMouse.y / iResolution.y;\n        if(rough == 0.0 && metal == 0.0){\n            metal = 0.1;\n            rough = 0.1;\n        }\n        return BRDF(l, v, n, vec3(1.0), metal, rough, s, o);\n    \n    \n  \n}\n\n\n\n//-------------------------------------------------\n//-------------------------------------------------------\n\n\n// HSV to RGB conversion \n// [iq: https://www.shadertoy.com/view/MsS3Wc]\nvec3 hsv2rgb_smooth(float x, float y, float z) {\n    vec3 rgb = clamp( abs(mod(x*6.+vec3(0.,4.,2.),6.)-3.)-1., 0., 1.);\n\trgb = rgb*rgb*(3.-2.*rgb); // cubic smoothing\t\n\treturn z * mix( vec3(1), rgb, y);\n}\n\n\nvec3 hsv2rgb_smoothv2(vec3 p) {\n    vec3 rgb = clamp( abs(mod(p.x*6.+vec3(0.,4.,2.),6.)-3.)-1., 0., 1.);\n\trgb = rgb*rgb*(3.-2.*rgb); // cubic smoothing\t\n\treturn p.z * mix( vec3(1), rgb, p.y);\n}\n\n\n\n\n\n\nfloat GetLight(vec3 p) {\n    vec3 lightPos = vec3(0, 5, 6);\n    //Determine movement of light ex. shadow and light direction and diffusion\n    lightPos.xz += vec2(sin(iTime), cos(iTime)*2.);\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l), 0., 1.);\n    float d = RayMarch(p+n*SURF_DIST*2., l );\n    if(d<length(lightPos-p)) dif *= .1;\n    \n    return dif;\n}\n\n\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0);\n    \n    TObj Obj;\n    \n    //Color of each object\n\n    vec3 ro = vec3(0, 1.5, 1.0+1.5*sin(iTime));\n\n    vec3 rLuz=vec3(-0.5, 5.5, -5.5);\n    \n    vec3 rd = normalize(vec3(uv.x, uv.y, 1.0));\n\n    float d = RayMarch(ro, rd);\n    Obj=mObj;\n    //float occd=occlusion(ro,rd);\n    \n    \n    \n    vec3 c= (ro + rd * d );\n    vec3 p= (ro + rd * d );\n    vec3 pluz=(rLuz + rd * d );\n    \n    float dif = GetLight(p);\n    \n    \n     p = (ro + rd * d ); \n \n\n    vec3 colobj;\n    vec3 col1=vec3(dif);\n    colobj=getSphereColor(int( Obj.tipo));\n    \n    \n    \n    \n    col=(colourV2(p, Obj.tipo,ro,rd)*colobj+col1+colobj*dif)/1.5;\n    \n    \n    \n    \n    col = pow( col, vec3(0.4545) );\n    \n\tfragColor = vec4(col,1.0);\n    \n    //Background color is white\n}\n","name":"Image","description":"","type":"image"}]}