{"ver":"0.1","info":{"id":"llKSD1","date":"1484241113","viewed":1130,"name":"Trying to make a optical flow sh","username":"vamoss","description":"I could not detect the movement vector field from the edge detection on buffer A\nFor now, this effect is interesting","likes":11,"published":1,"flags":32,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Trying to make a optical flow shader\n//I could not detect the movement vector field from the edge detection on buffer A\n//For now, this effect is interesting\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//frame difference\n//it need three frames to detect\n//first:  draw difference\n//second: clear\n//third: calc the frame diffference\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    if(mod(float(iFrame), 3.)==0.) fragColor = texture(iChannel1, uv);\n    if(mod(float(iFrame), 3.)==1.) fragColor = vec4(0.);\n\telse fragColor = texture(iChannel0, uv)-texture(iChannel1, uv);\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"//fix image flickering\n//capture the edged detection from buffer A, and display the same image for the next two frames\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tif(mod(float(iFrame), 3.)==0.) fragColor = texture(iChannel0, uv);\n\telse fragColor = texture(iChannel1, uv);\n}","name":"Buf B","description":"","type":"buffer"},{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"vec2 angledUv(vec2 uv){\n    float angle = uv.x;\n    float radius = length(uv);\n    \n    //uv.x = angle;\n    //uv.y = radius;\n    uv.x += cos(angle)*radius/10.;\n    uv.y += sin(angle)*radius/10.;\n\treturn uv;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 buf0 = texture(iChannel0, uv);\n    vec4 buf1 = texture(iChannel1, uv);\n    \n    vec2 r = uv+angledUv(buf0.xy);\n    \n    //see the edge detection\n    //fragColor = vec4(r.x, r.y, 0.0, 1.0);\n    \n    \n    //PB\n    fragColor = vec4(mix(texture(iChannel2, r).r,texture(iChannel1, uv).r, 0.03));\n    \n    //RGB\n    //fragColor = vec4(mix(texture(iChannel2, r),texture(iChannel1, uv), 0.3));\n}","name":"Buf C","description":"","type":"buffer"}]}