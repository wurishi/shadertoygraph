{"ver":"0.1","info":{"id":"cdjfz1","date":"1689438520","viewed":62,"name":"vanilla waves","username":"AntonJeva","description":"pulses with some nice patterns in it","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["shader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//variables to play with\n#define scale 3.\n#define speed .15\n\n#define deviance .15\n\n#define In_scale .4\n#define Out_scale .9\n\n#define off_white vec3(.8, .8, .7)\n\n#define nubs 10.\n#define dot_size .04\n\n//distance\nfloat dist(vec2 p1, vec2 p2) {\n    vec2 d = p1-p2;\n    d.x *= d.x;\n    d.y *= d.y;\n    return sqrt(d.x + d.y);\n}\n\n//random position\nvec2 pos(float t) {\n    return normalize(vec2(sin(t*99.)*1234., cos(t*99.)*431.))*deviance;\n}\n\n//gradient by time and distance\nvec2 pulse(vec2 uv, float t, float id) {\n\n    vec2 point = pos(id);\n    vec2 pd = point-uv;\n    float d = dist(uv, point)-t;\n    float a = atan(pd.x, pd.y);\n    return vec2 (a, d);\n}\n\n//color at the inside of a pulse\nvec3 colIn(float t) {\n    return normalize(vec3(sin(t*100.)*.5+.5, cos(t*95.)*.6+.5, sin(t*91.)*.7+.5))*In_scale;\n}\n//color at the outside of a pulse\nvec3 colOut(float t) {\n    return normalize(vec3(sin(t*230.)*.8+1., cos(t*395.)*.7+1., sin(t*191.)*.7+1.))*Out_scale;\n}\n\n//polar -> carthesian\nvec2 cart(vec2 polar) {\n    return vec2(polar.y*cos(polar.x), polar.y*sin(polar.x));\n}\n\n//carthesian -> polar\nvec2 polar(vec2 cart) {\n    return vec2(atan(cart.x, cart.y), length(cart));\n}\n\n//random polar coordinate, with a distance smaller than d\nvec2 rand_pol(float i, float d) {\n    float a = (sin(i*101.)+cos(i*2345.))*3.14;\n    float di = sin(a*101010.)*.5*d+.4;\n    return vec2(a, di);\n}\n\n//a cool pattern\nvec3 pattern(float i, vec2 p) {\n    p.x += i;\n    p.y -=.06;\n    float f = sin(i*21.);\n    float s = sin(p.x*nubs + f);\n    s = pow(s, 9.);\n    float l = .85 + .06*s;\n    \n    //adding all the little dots\n    for (float id = 0.; id < 12.; id++) {    \n        if (dist(cart(p), cart(rand_pol(id, p.y))) < dot_size) return off_white;\n    }\n    \n    //adding the white ring around\n    if (p.y > l) return off_white;\n    //returning the color value\n    return mix(colIn(i), colOut(i), p.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates\n    vec2 uv = fragCoord.xy/iResolution.xy - .5;\n    uv.x *= iResolution.x/iResolution.y;\n    uv *= scale;\n    \n    float t = iTime*speed;\n    vec3 col = vec3(0.);\n    \n    //place each pulse\n    for (float i = floor(t)-scale; i < floor(t)+scale; i++) {\n        if (i < 1.) continue;//black in th beginning\n        \n        vec2 p = pulse(uv, t-i, i);\n        \n        //aplying the pattern\n        if (p.y <= 1.) {\n            col = pattern(i, p);\n        }\n    }\n    \n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}