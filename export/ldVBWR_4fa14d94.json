{"ver":"0.1","info":{"id":"ldVBWR","date":"1528379559","viewed":860,"name":"Droste effect with webcam","username":"JamesGriffin","description":"Just a simple and quick implementation of the Droste effect using the webcam as input.\n\nPlace a round object close to and in the centre of the webcam.  The \"ok hand\" is a good place to start. ðŸ‘Œ","likes":13,"published":1,"flags":2,"usePreview":0,"tags":["droste","webcam"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float inv_webcam_aspect = 480.0/640.0,\n    two_pi = 6.28318530718,\n    inner_radius = 0.1,\n    outer_radius = 0.5,\n\tspiral_factor = 1.0;\n\nvec2 wrap(vec2 pos, float r1, float r2) {\n    float theta = pos.x * two_pi,\n        r = pos.y * (r2-r1) + r1;\n    return vec2(0.5 + inv_webcam_aspect * r * cos(theta), 0.5 + r * sin(theta));\n}\n\nvec2 unwrap(vec2 pos, float factor) {\n    vec2 centred = pos - vec2(0.5, 0.5);\n    float theta = atan(centred.y, centred.x),\n        phi = theta / two_pi,\n        r2 = dot(centred, centred),\n        logr = 0.5 * log(r2) * factor,\n        y = logr - phi;\n       \n \treturn vec2(phi, y - floor(y));   \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = (fragCoord.xy - 0.5 * iResolution.xy) / iResolution.y + vec2(0.5, 0.5);\n\tfragColor = texture(iChannel0, wrap(unwrap(uv, spiral_factor), inner_radius, outer_radius));\n}","name":"Image","description":"","type":"image"}]}