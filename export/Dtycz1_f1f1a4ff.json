{"ver":"0.1","info":{"id":"Dtycz1","date":"1699927159","viewed":79,"name":"(3, infinity) tiling","username":"zenzicubic","description":"The (3, infinity) tiling: simple and beautiful in my opinion","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["tiling","hyperbolic","iis"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float RT3 = 1.73205080757;\n\nbool invert(inout vec2 pt, vec2 cen, float radSq) {\n    // Inversion in a circle defined by center and square radius\n    vec2 diff = pt - cen;\n    float dis = dot(diff, diff);\n   \n    if (dis < radSq) {\n        pt = cen + diff * (radSq / dis);\n        return false;\n    }\n    return true;\n}\n\nvec3 getCol(vec2 pt) {\n    pt = (2. * pt - iResolution.xy) / iResolution.y;\n    if (dot(pt, pt) > 1.) return vec3(0.);\n    \n    bool fund;\n    float n;\n    for (int i = 0; i < 50; i ++) {\n        // Invert about edges of central ideal triangle\n        fund = invert(pt, vec2(2., 0.), 3.);\n        fund = fund && invert(pt, vec2(-1., RT3), 3.);\n        fund = fund && invert(pt, vec2(-1., -RT3), 3.);\n        \n        // If we are already in the fundamental domain break\n        if (fund) break;\n        n ++;\n    }\n    return vec3(mod(n, 2.));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 pos) {\n    vec3 col = getCol(pos);\n    \n    // Antialiasing\n    col += getCol(pos + vec2(.5));\n    col += getCol(pos + vec2(-.5));\n    col += getCol(pos + vec2(-.5, .5));\n    col += getCol(pos + vec2(.5, -.5));\n    col += getCol(pos + vec2(.5, 0.));\n    col += getCol(pos + vec2(-.5, 0.));\n    col += getCol(pos + vec2(0., .5));\n    col += getCol(pos + vec2(0., -.5));\n    col *= .11111;\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}