{"ver":"0.1","info":{"id":"NtBcDG","date":"1650172256","viewed":63,"name":"Procedural noise by TeamwinFTW","username":"TeamwinFTW","description":"Noisey boyo","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Sets the scale of the noise\n\n#define SCALE 0.5\n\n\n//Interpolation used when blending between cell corners\nfloat sineint (float x){\n\n   float sineval = (0.5+cos(x*3.14159)*0.5);\n   float floatval = 1.0-x;\n   float mixfac = 1.0;\n   \n   //return pow(sineval,0.85)*mixfac + floatval*(1.0-mixfac);\n   return pow(1.0-x,1.3);\n\n}\n//Pseudo-RNG used to determine values at set points\nfloat PRNG2d(vec2 coord,float seed){\n\n    seed = mod(seed+ 0.01,100.0);\n    seed = seed/20.0;\n    coord = mod(coord,1000.0);\n    float x = mod(pow(coord.x,1.541523) * 0.1588235 + seed/20.65546689 + pow(coord.y * seed/8.51325,1.563) * 5.55464, 0.2)/0.2;\n    x = clamp(x,0.0,1.0);\n    x = mod(coord.x * 1.365448 * (seed/5.23648564) + coord.y * 2.21658+ x*2.05213,x)/x;\n    x = clamp(x,0.0,1.0);\n    x = mod(pow (coord.y + coord.x,x)*20.0,1.0);\n    \n    return x;\n}\n\nfloat Noise(vec2 InputCoord, float seed, float scale)\n{\n\n    InputCoord = InputCoord*scale;\n    \n    //Cell corner positions\n    vec2 cor1 = vec2(floor(InputCoord.x),floor(InputCoord.y));\n    vec2 cor2 = vec2(ceil(InputCoord.x),floor(InputCoord.y));\n    vec2 cor3 = vec2(floor(InputCoord.x),ceil(InputCoord.y));\n    vec2 cor4 = vec2(ceil(InputCoord.x),ceil(InputCoord.y));\n    //Distances to Cell corners\n    float dist1 = distance(InputCoord,cor1);\n    float dist2 = distance(InputCoord,cor2);\n    float dist3 = distance(InputCoord,cor3);\n    float dist4 = distance(InputCoord,cor4);\n    //Values of cell corners\n    float val1 = PRNG2d(cor1,seed);\n    float val2 = PRNG2d(cor2,seed);\n    float val3 = PRNG2d(cor3,seed);\n    float val4 = PRNG2d(cor4,seed);\n    //Absolute weight of corners based on proximity \n    float weight1 = sineint(clamp(dist1,0.0,1.0));\n    float weight2 = sineint(clamp(dist2,0.0,1.0));\n    float weight3 = sineint(clamp(dist3,0.0,1.0));\n    float weight4 = sineint(clamp(dist4,0.0,1.0));\n    \n    //Factor used to trim weights to add to 1.0\n    float TrimFactor = 1.0/(weight1 + weight2 + weight3 + weight4);\n    //TrimFactor = 1.0;\n    float value = val1*weight1*TrimFactor + val2*weight2*TrimFactor + val3*weight3*TrimFactor + val4*weight4*TrimFactor;\n    return value;   \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    //Coord offset animation\n    fragCoord = fragCoord + vec2(iTime*50.0,0.0);\n    float scale = SCALE/100.0;\n    \n    //6 Octaves of noise\n    vec3 color;\n    //color = vec3(Noise(fragCoord.xy ,20.0,scale),Noise(fragCoord.xy ,10.0,scale),Noise(fragCoord.xy ,3.0,scale));\n    color = vec3(Noise(fragCoord.xy,1.0,scale)*0.5 + Noise(fragCoord.xy,2.0,scale*2.0)*0.25 + \n    Noise(fragCoord.xy,3.0,scale*4.0)*0.125 + Noise(fragCoord.xy,4.0,scale*8.0)*0.0625 \n    + Noise(fragCoord.xy,5.0,scale*16.0)*0.03125 + Noise(fragCoord.xy,6.0,scale*32.0)*0.015625);\n    \n    fragColor = vec4(color.xyz,1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}