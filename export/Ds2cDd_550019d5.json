{"ver":"0.1","info":{"id":"Ds2cDd","date":"1688377591","viewed":40,"name":"Testing1 StrifeStg","username":"striifeStg","description":"Test shader","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["color"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://iquilezles.org/articles/palettes/\n// http://dev.thi.ng/gradients/\n// https://graphtoy.com/\nvec3 waveColors(float d){\n    vec3 dcOffset = vec3(0.500,0.500,0.500);\n    vec3 amp = vec3(0.500,0.500,0.900);\n    vec3 freq = vec3(0.800,1.118,0.538);\n    vec3 phase = vec3(0.000,0.200,0.500);\n    \n    return dcOffset+ amp*cos(6.28*(freq*d+phase));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    //vec2 uv = fragCoord/iResolution.xy;\n    vec2 uv = ((fragCoord/iResolution.xy -0.5)*2.0);\n    uv.x *= iResolution.x/iResolution.y;\n    vec2 uvTemp = uv;\n    \n    vec3 color = vec3(0.0);\n    //float maxValue = 6.0;\n    //float va = max(iTime/3.14, maxValue);\n    \n    //vec3 col = vec3(1.0,2.0,3.0);\n    for(float i =0.0;i<3.0;i++){\n        uv = fract(uv*1.5)-0.5;\n        float d = length(uv)*exp(-length(uvTemp)) ;\n        vec3 col = waveColors(length(uvTemp)+i*0.5+iTime*.5);\n        d = sin(d*8.0+iTime);\n        d = abs(d);\n        d= smoothstep(0.0,0.6,d);\n        //d = 0.1/d;\n        d = pow(0.2/d,1.5);\n        //d = (1.0-d);\n        color += col*d;\n    }\n    // Time varying pixel color\n    // vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}