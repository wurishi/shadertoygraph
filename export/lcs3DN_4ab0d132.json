{"ver":"0.1","info":{"id":"lcs3DN","date":"1703101790","viewed":48,"name":"Mandala Vortex","username":"brunorealities","description":"A shader featuring a dynamic, color-shifting mandala surrounded by expanding geometric patterns, part of my study of artistic shader pattern creation.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fractal","color","psychedelicart","mandalaful"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Inspired and based on my learnings of Kishimisu tutorials about shader art coding\n\n\nvec3 pal(in float t) {\n    vec3 a =  vec3(0.5,0.5,0.5);// Updated color 1\n    vec3 b = vec3(0.5,0.5,0.5); // Updated color 2\n    vec3 c = vec3(1.0,0.7,0.4); // Updated color 3\n    vec3 d = vec3(0.0,0.15,0.20);  // Updated color 4\n    \n  \n    // Return the color by applying a cosine function to create smooth transitions between colors\n    return a + b * cos(6.28318 * (c * t + d));\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord * 2. - iResolution.xy)/ iResolution.y;\n    \n    vec2 uv0 = uv;\n    vec3 finalCol = vec3(0.0);\n    \n    \n    for(float i = 0.; i < 2.; i++)\n    {\n     float t = iTime;\n\n    //float tr = clamp(length(uv0) + sin(i + t * 0.2), 0.6,1.2);\n    \n      uv = fract(uv * 1.5) - .5;\n    float d = length(uv) * exp(length(uv0));\n\n\n    vec3 col = sin(1.8 * pal(-length(uv0)+ t * .11));\n\n    //distance to the center\n    d = max(cos(d * 8. + t)/8.,sin(d * 2. + t))/2.;\n    d = abs(d);\n    d= pow(0.012/d,.8);\n    \n    vec3 mon_color = vec3(0.,0.,1.);\n    mon_color += col;\n    \n    finalCol += mon_color * d;\n    \n    \n    }\n  \n \n    // Output to screen\n   // fragColor =  vec4(vec3(d),1.);\n   \n   fragColor = vec4(finalCol,1.);\n}","name":"Image","description":"","type":"image"}]}