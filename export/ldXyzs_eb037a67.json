{"ver":"0.1","info":{"id":"ldXyzs","date":"1489438773","viewed":179,"name":"360 lunar scanlines","username":"zproxy","description":"360","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["360"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//#define xWebGLTexture360height iResolution.y \n#define xWebGLTexture360height iResolution.y\n\n\n#define uIPD 0.0\n    \nmat3 rotationMatrix(vec3 axis, float angle)\n{\n    axis = normalize(axis);\n    float s = sin(angle);\n    float c = cos(angle);\n    float oc = 1. - c;\n    return mat3(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,\n                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,\n                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c);\n}\n\n\n\n\n\n\nvec3 rotx(vec3 p, float a){\n    float s = sin(a), c = cos(a);\n    return vec3(p.x, c*p.y - s*p.z, s*p.y + c*p.z);\n}\n \n  \nfloat stars(in vec3 p)\n{\n   \n    //vec3 q = fract(p*22.)-0.5;\n    //vec3 q = fract(p*2.)-0.5;\n    vec3 q = fract(p*3.)-0.5;\n   \n    \n\n    \n    return 1.-smoothstep(0.,.5,length(q));\n}\n\nvec3 startrails(in vec3 rd)\n{\n \n\n    //        if (rd.z < 0.)\n    //    if (rd.y < 0.)\n    //if (rd.x < 0.)\n    //return vec3(1.0, 0,0);\n    \n    float col0 = stars( normalize(rotx(rd, iTime * 0.01)));\n\n    float col = col0;\n\n    for (int i = -180; i < -30; i++)\n    {\n    \tfloat col1 = stars( normalize(rotx(rd, iTime * 0.01 + (float(i) * (1./20.) ))));\n        \n    \tcol += col1;    \n    }\n    \n    \n    if (col < 0.)\n        col = 0.;\n    if (col > 1.)\n        col = 1.;\n    \n    return vec3(1.0 - col);\n}\n\n\n\nfloat atan2(float y, float x)\n{\n  float t0, t1, t2, t3, t4;\n\n  t3 = abs(x);\n  t1 = abs(y);\n  t0 = max(t3, t1);\n  t1 = min(t3, t1);\n  t3 = float(1) / t0;\n  t3 = t1 * t3;\n\n  t4 = t3 * t3;\n  t0 =         - float(0.013480470);\n  t0 = t0 * t4 + float(0.057477314);\n  t0 = t0 * t4 - float(0.121239071);\n  t0 = t0 * t4 + float(0.195635925);\n  t0 = t0 * t4 - float(0.332994597);\n  t0 = t0 * t4 + float(0.999995630);\n  t3 = t0 * t3;\n\n  t3 = (abs(y) > abs(x)) ? float(1.570796327) - t3 : t3;\n  t3 = (x < 0.) ?  float(3.141592654) - t3 : t3;\n  t3 = (y < 0.) ? -t3 : t3;\n\n  return t3;\n}\n\n void mainImage0( out vec4 fragColor, in vec2 fragCoord, vec2 thetaphi, vec3 rd, float IPD )\n {\n  \n    vec3 col = startrails( rd);\n\n  \n\n    //float tOver = clamp(iTimeDelta-(1./60.),0.,1.);\n    \n    \n    //col = (col + past.rgb) * 0.995;\n    //col = (col + past.gbr) * 0.995;\n    \n    \n\tfragColor = vec4(col, 1.0);\n }\n\n \nvoid line (\n    inout vec4 fragColorR, \n    in float lat180,  \n    in float lat180target, \n    in float lat180radius,\n\n\tfloat a)\n{\n    if (lat180 < (lat180target + lat180radius))\n        if (lat180 >( lat180target - lat180radius))\n            \n \t\t//if (lat180 < 108.)\n     //   if (lat180 > 72.)            \n        {\n\n            \n            //float a = 0.3;\n\n            \n\n            fragColorR.r = a;\n            fragColorR.b = a;\n            fragColorR.g = a;\n\n        }\n}\n\nvoid line_rgb (\n    inout vec4 fragColorR, \n    in float lat180,  \n    in float lat180target, \n    in float lat180radius,\n\n\tvec3 rgb)\n{\n    if (lat180 < (lat180target + lat180radius))\n        if (lat180 >( lat180target - lat180radius))\n            \n \t\t//if (lat180 < 108.)\n     //   if (lat180 > 72.)            \n        {\n\n            \n            //float a = 0.3;\n\n            \n\n            fragColorR.rgb = rgb;\n            //fragColorR.b = a;\n            //fragColorR.g = a;\n\n        }\n}\n\n// called by drawArrays\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord )\n{\n    bool drag = iMouse.w > 0.0;\n    \n    float grid = 16.;\n    float gridt = 2.;\n    \n    bool indexx = int(int(fragCoord.x  / grid) * int(grid)) == int(fragCoord.x);\n    bool indexy = int(int(fragCoord.y  / grid) * int(grid)) == int(fragCoord.y);\n    //bool indext = int(int(float(iFrame)  / grid) * int(grid)) == int(iFrame);\n    bool indext = int(int(float(iTime)  / gridt) * int(gridt)) == int(iTime);\n    \n    \n    \n    if (drag || (indext&&(indexy||indexx)))\n\n\n    {\n   if ( int(fragCoord.x + 2.) > int(iMouse.x))\n   if ( int(fragCoord.x - 2.) < int(iMouse.x))\n    {\n        fragColor = vec4(1.0, 0.0, 0.0, 1.0);\n        return;\n    }\n    \n      if ( int(fragCoord.y + 2.) > int(iMouse.y))\n   if ( int(fragCoord.y - 2.) < int(iMouse.y))\n    {\n        fragColor = vec4(0.0, 0.0, 1.0, 1.0);\n        return;\n    }\n    }\n  \n\n\t\n\tbool RvL = true;\n\t \n\tvec4 fragColorR = vec4(1.0, 0.0, 0.0, 1.0);\n\tvec2 fragCoordR = vec2(gl_FragCoord.x, gl_FragCoord.y / 1.0);\n\tvec2 texCoordR0 = vec2((iResolution.x - fragCoordR.x)/iResolution.x, fragCoordR.y/(iResolution.y/1.0))  + vec2(0.25, 0.0);\n\tvec2 thetaphiR = ((texCoordR0 * vec2(2.0, 2.0)) - vec2(1.0)) * vec2(3.1415926535897932384626433832795, 1.5707963267948966192313216916398); \n\t\n    vec3 rd = vec3(\n        // x:\n        cos(thetaphiR.y) * cos(thetaphiR.x ), \n        // y:\n        sin(thetaphiR.y), \n        \n        // z:\n        cos(thetaphiR.y) * sin(thetaphiR.x )\n    );\n    \n    \n    \n    vec2  mousexy = iMouse.xy;\n    \n    \n    // no mouse\n    mousexy = vec2(0);\n    \n       //rd *= rotationMatrix(vec3(1.0, 0.0, 0.0), 90.);\n    \n    //rd *= rotationMatrix(vec3(0.0, 1.0, 0.0), ((-0. -  mousexy.x * 2.) / 360.) * 3.14);\n    //rd *= rotationMatrix(vec3(0.0, 0.0, 1.0), 90.);\n    //rd *= rotationMatrix(vec3(0.0, 0.0, 1.0), ((90. + cos(iTime) * 1. -  mousexy.y * 2.0) / 360.) * 3.14);\n    \n    \n    \t// -37!\n    float uSHIFTrot = -35.; // need to move it a bit? up?\n    rd *= rotationMatrix(vec3(0.0, 1.0, 0.0), (uSHIFTrot / 360.) * -3.14);\n    \n\t// NICE WE GET THE SAME INRO\n    float y0to50 = min(1.0, max(0., (float(iFrame) - 300.) / 300.));\n    float y0to50max = (32.); // more up?\n\n    rd *= rotationMatrix(vec3(0.0, 0.0, 1.0), ((90. + y0to50 * y0to50max) / 180.) * -3.14);\n    \n \n    if(indext)\n         if(false)\n    {\n\tmainImage0(\n\tfragColorR, \n\t fragCoordR, \n\tthetaphiR , \n\t rd, \n\t uIPD  \n\t\n\t);\n    }\n\t\n    \n    //if(indext)\n    {\n   \t\t// lat=atan2(z,sqrt(x*x+y*y))\n        // lng=atan2(y,x)\n        \n        // http://http.developer.nvidia.com/Cg/atan2.html\n        \n        vec3 rdn = normalize(rd);\n        \n        //float lng = atan2(rdn.y, rdn.x);\n           float lng = asin(rd.y);\n        \n        //  arccos(sqrt(x^2+y^2)/x)\n         //float lat=atan2(sqrt(rdn.x*rdn.x+rdn.y*rdn.y),rdn.z);\n         //float lat=acos(sqrt(rdn.x*rdn.x+rdn.y*rdn.y)*sign(rdn.y));\n        float lat=acos(rdn.x);\n        float lat1 = lat / 3.14;\n        float lat180 = lat * 180. / 3.14;\n        \n        vec2 tex1 = vec2 (\n            -(atan(rd.z, rd.x) / 6.283185307179586476925286766559) + 0.5,\n            acos(-rd.y) / 3.1415926535897932384626433832795\n        );\n        \n        //lat1 = tex1.x;\n        //lat180 = tex1.x * 180.;\n            \n        // 0..314\n    //if (lat > 1.2)\n   \n        \n        // show y\n        \n        //if (lat < 3.0)\n        {\n            // north is red\n            \n            \n            fragColorR.r = 0.;\n            //fragColorR.g = 0.;\n            //fragColorR.b = 0.;\n           // \n           // if (lat1 > 0.5)\n           // \tfragColorR.r = lat / 3.14;\n//\n           //  if (lat1 < 0.5)\n           // fragColorR.b = 1.-lat / 3.14;\n  \n            \n            \n            // our lat calc is wrong here.\n//            if (iFrame < 600)\n                \n                 if (iFrame < 0)\n          //  if(indext)\n             if (lat180 < 108.)\n                 if (lat180 > 72.)\n                 {\n                     float a = (1. + lng) /2.0;\n                     //float a = (0. + lng) /1.0;\n                           \n                     //float a = 0.3;\n                     \n            \t\t\tfragColorR.r = (0. + lng) /1.0;\n            \t\t\tfragColorR.b = (0. + -lng) /1.0;\n                     \n                     \n                     fragColorR.r = a;\n            \t\t\tfragColorR.b = 1. - a;\n                     \t//fragColorR.g = 0.;\n            \n                 }\n           \n            \n            \n            \n            \n            // upper line\n\n           line_rgb(fragColorR, lat180, 90. -16., 0.3, vec3(1.0, 0, 0));\n            \n            \n            // center line\n\n            //line(fragColorR, lat180, 90. - 19., 1., 0.8);\n            line_rgb(fragColorR, lat180, 90., 0.1, vec3(1.0, 1.0, 0));\n\n            \n              // lower line\n            //line(fragColorR, lat180, 90. + 19., 1., 0.4);\n            line_rgb(fragColorR, lat180, 90.+ 16., 0.3, vec3(0.0, 0.0,1.0));\n\n            \n            // allow rewind and fullscreen\n             if (iFrame > 10)\n             {\n            \n\n\t\t\t// 20170228 4% \n            line_rgb(fragColorR, lat180, 90. - 0.55, 0.1, vec3(1.0, 1.0,1.0));\n\n            // 20170301 12%\n            line_rgb(fragColorR, lat180, 90. - 4.3, 0.1, vec3(1.0, 1.0,1.0));\n\n            // 20170304 ? upmost white line\n            line_rgb(fragColorR, lat180, 90. - 13.0, 0.1, vec3(1.0, 1.0,1.0));\n            \n            \n            \n            // 09 ??\n            // 20170310 97% climbing down, steps out of scanline? needs wider lines?\n            line_rgb(fragColorR, lat180, 90. - 11.0, 0.1, vec3(0.0, 1.0,1.0));\n\n            // 20170311 99% climbing down\n            line_rgb(fragColorR, lat180, 90. - 8., 0.1, vec3(0.0, 0.6, 0.6));\n\n             }\n            \n            // 20170306 is as up as it goes. edge near it. 05 just below it. step as before?\n            \n            \n            // goto fullscreen and screencapture a frame to see if it matches our video?\n            \n        }\n            \n     //fragColorR.g = lng + 0.5;\n    \n    }\n    \n\n\n\tfragColor = fragColorR;\n    \n}\n\n\n","name":"Image","description":"","type":"image"}]}