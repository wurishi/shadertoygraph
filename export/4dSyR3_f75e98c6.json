{"ver":"0.1","info":{"id":"4dSyR3","date":"1496832947","viewed":654,"name":"Sum ray marching","username":"public_int_i","description":"ray marching with additive sampling, modified version of my old 'Blurry ray/cone marching' shader.","likes":4,"published":3,"flags":0,"usePreview":0,"tags":["ray","marching","sum"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsX3Rn","filepath":"/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","previewfilepath":"/media/ap/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Ethan Alexander Shulman 2017\n\n\n\nfloat ground(vec3 p) {\n    return abs(p.y+10.);\n}\n\nfloat walls(vec3 p) {\n    return length(max(abs(p+vec3(10.,0.,0.))-vec3(10.,10.,1.), 0.));\n}\n\nfloat spheres(vec3 p){\n    return length(abs(p)-8.)-2.;\n}\n\n\n\n#define join(d,c) s.xyz = mix(s.xyz,c,clamp((s.w-d)/s.w,0.,1.)); if (d < s.w) s.w = d;\n\n/*\nvec4 input:\nxyz = position\nw = mipmap level\n\nvec4 output:\nxyz = color\nw = min distance\n*/\nvec4 scene(vec4 p) {\n    //ground\n    vec4 s = vec4(textureLod(iChannel1, p.xz*.05, p.w).xyz, ground(p.xyz));\n    \n    //wall\n    float d = walls(p.xyz);\n    join(d, textureLod(iChannel0, p.xy*.1, p.w).xyz);\n    \n    //spheres\n   \td = spheres(p.xyz);\n    join(d, vec3(0.,0.,1.));\n    \n    \n    return s;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 rp = vec4(0.,2.,20.,1.),\n        rd = vec4(normalize(vec3((fragCoord*2.-iResolution.xy)/iResolution.x,-.5)),0.);\n    \n    float blur = sin(iTime)*.5+.5;\n    if (iMouse.w > 0.) blur = (iMouse.y/iResolution.y)*10.;\n\n    //blur must be non-zero\n    rd.w = blur = max(blur, 1e-2);\n    \n    vec4 c = vec4(0.);\n    float d = 0.;\n    for (int i = 1; i < 64; i++) {\n        if (c.w >= 1.) break;\n        \n        vec4 s = scene(rp+rd*d);\n        s.w = max(s.w, blur);\n        c += vec4(s.xyz,1.)*max(0., 1.-s.w/(d*blur)) / max(1., d*blur);\n        d += mix(s.w, float(i)*.1, min(1.,blur));\n    }\n\t\n    \n    fragColor = vec4(mix(vec3(0.),c.xyz/c.w,min(c.w,1.)),1.);\n}","name":"Image","description":"","type":"image"}]}