{"ver":"0.1","info":{"id":"dlf3WX","date":"1672584777","viewed":81,"name":"pythagtripmaybe v0.2","username":"spontificus","description":"i thought it'd be fun to try to contain and visualise the line generated from self-multiplying triangles by reducing common factors, but instead the python algorithm just tends to uselessly spit out prime coordinate pairs off to infinity :(","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["hexagonal","postaesthetic"],"hasliked":0,"parentid":"md2XD3","parentname":"pythagtripfractlinemaybe v.01"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nbool myInRange(int t, int v1, int v2) {\n    return (abs(t - v1) + abs(v2 - t) <= abs(v2 - v1));\n}\n\n// centered and anti-square\nivec3 screenToHex( vec2 p ) {\n    int j = int(iResolution.y-p.y)/2 - int(iResolution.y/4.);\n    int i = (int(p.x) - j )/2 - int(iResolution.x/4.);\n    return ivec3(i,j,-(i+j));\n}\n\n\n\nint hexantOrder[] = int[](0, 3, 1, 2, 5, 4);\nint getHexant(ivec3 v) {\n    int num = 0;\n    if (v.x >= 0) {\n        num += 4;\n    }\n    \n    if (v.y >= 0) {\n        num += 2;\n    }\n        \n    if (v.z >= 0) {\n        num += 1;\n    }\n    \n    return hexantOrder[num % 6];\n}\n\n\n#define PI 3.1415926538\n\nfloat hexAngle(ivec3 inputs) {\n    int i = inputs.x;\n    int j = inputs.y;\n    int k = inputs.z;\n    \n    int tot = abs(i)+abs(j);\n    \n    int hexant = getHexant(inputs);\n    int targetIndex = hexant % 3;\n    int targetSign = hexant % 2;\n    int target = inputs[2-targetIndex];\n    if (targetSign == 0) {\n        target *= -1;\n    }\n    \n    int progIndex = (targetIndex + 1) % 3;\n    int prog = inputs[2-progIndex];\n    if (targetSign == 1) {\n        prog *= -1;\n    }\n    \n    return (float((hexant*target + prog))/float(target*6))*PI*2.;\n}\n\n\nivec3 hex2reducing(ivec3 p) {\n    int i = p.x;\n    int j = p.y;\n    int k = p.z;\n    \n    int oi = -j;\n    int oj = -k;\n    //ok = -i;\n    int ni = i*i + j*oi;\n    int nj = i*j + j*oj;\n    \n    if (ni % 3 == 0 && nj % 3 == 0) {\n        ni /= 3;\n        nj /= 3;\n    }\n    \n    return ivec3(ni,nj, -(ni+nj));\n}\n\n\nivec3 hex2(ivec3 p) {\n    int i = p.x;\n    int j = p.y;\n    int k = p.z;\n    \n    int oi = -j;\n    int oj = -k;\n    //ok = -i;\n    int ni = i*i + j*oi;\n    int nj = i*j + j*oj;\n    return ivec3(ni,nj, -(ni+nj));\n}\n\n\nvec4 drawLine(ivec3 frag, ivec3 p1, ivec3 p2) {\n    vec4 col = vec4(0., 0., 0., 0.);\n\n    // get angle of p2 from p1\n    float forwardTarget = hexAngle(p2-p1);\n    float forwardPoint = hexAngle(frag-p1);\n\n    float reverseTarget = hexAngle(p1-p2);\n    float reversePoint = hexAngle(frag-p2);\n    \n    if (abs(forwardPoint - forwardTarget) <0.025 && abs(reversePoint - reverseTarget) <0.025) {\n      col = vec4(1., 0., 1., 1.);\n    }\n    \n\n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec3 center = ivec3(0,0,0);\n    ivec3 fragHex = screenToHex(fragCoord.xy);\n    int fragI = fragHex.x;\n    int fragJ = fragHex.y;\n    int fragK = fragHex.z;\n    \n    ivec3 mouseHex = screenToHex(iMouse.xy);  \n    int mouseI = mouseHex.x;\n    int mouseJ = mouseHex.y;\n    int mouseK = mouseHex.z;\n\n    vec4 col = vec4(.1,.1,.1,1.);\n\n    if ( fragHex == mouseHex ) {\n        col = vec4(1., 1., 1., 1.);\n    }\n    \n    // line\n    int i = mouseI; // e.g. 6, 7, [-13]\n    int j = mouseJ;\n    int k = mouseK;\n  \n    // center dot\n    if (fragI == 0 && fragJ == 0 ) {\n        col = vec4(0., 0., 0., 1.);   \n    }   \n    \n    // 30 degree lines\n    if ( abs(fragI) == abs(fragJ) || abs(fragJ) == abs(fragK) || abs(fragI) == abs(fragK)) {\n        col += vec4(.2, .2, .2, 1.);\n    }\n    \n\n    // draw i,j,k axes\n//    if (fragI == 0) col = vec4(1., 0., 0., 1.);\n//    if (fragJ == 0) col = vec4(0., 1., 0., 1.);\n//    if (fragK == 0) col = vec4(0., 0., 1., 1.);\n \n    \n    col += drawLine(fragHex,center,mouseHex);\n        \n    ivec3 cv = mouseHex;\n    ivec3 nv = mouseHex;\n    \n    for (int l=0; l<5;l++) {\n        nv = hex2(nv);\n        if ( fragHex == nv ) {\n            col = vec4(1., 1., 1., 1.);\n        }\n        \n        col += drawLine(fragHex,cv,nv);\n        cv = nv;\n    }\n    \n    fragColor = col;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","name":"Image","description":"","type":"image"}]}