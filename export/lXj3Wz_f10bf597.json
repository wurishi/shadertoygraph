{"ver":"0.1","info":{"id":"lXj3Wz","date":"1708378504","viewed":73,"name":"edges noise generator","username":"endertrekkie","description":"this is a noise generator that I thought up with the concept of \"each position takes the average of its neighbors, then adds a small random value.\" Nucleation sites are also selected. generation parameters are in the Common tab.","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["2d","proceduralgeneration","noisemap"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec4 rand(vec2 dSeed){\n    seed += texture(iChannel1, seed + dSeed).xy;\n    return texture(iChannel1, seed + dSeed);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 duv =  1.0 / iResolution.xy;\n    fragColor = texture( iChannel0, uv );\n    \n    \n    //init\n    if(iFrame == 0){\n        fragColor = vec4(0.0);\n    }\n    //update\n    else{\n        //neighbors\n        vec4 picker = rand(uv+vec2(iTime));\n        picker = vec4(picker.r < keepProb, picker.g < keepProb, picker.b < keepProb, picker.a < keepProb);\n        vec4 rPix = texture( iChannel0, uv + vec2(1.,0.)*duv);\n        vec4 lPix = texture( iChannel0, uv + vec2(-1.,0.)*duv);\n        vec4 uPix = texture( iChannel0, uv + vec2(0.,-1.)*duv);\n        vec4 dPix = texture( iChannel0, uv + vec2(0.,1.)*duv);\n        \n        //only on unassigned pixels\n        if(fragColor.x == 0.){\n            vec4 sampOpac = vec4(ceil(rPix.a),ceil(lPix.a),ceil(uPix.a),ceil(dPix.a)) * picker;\n            vec4 sampCol = vec4(rPix.x, lPix.x, uPix.x, dPix.x) * picker;\n            float sum = (sampCol.x+sampCol.y+sampCol.z+sampCol.w);\n            float count = (sampOpac.x+sampOpac.y+sampOpac.z+sampOpac.w);\n            if(count == 0.){\n                if((rand(uv+vec2(iTime)).x+rand(uv).x+rand(uv).x) < nucProb){\n                    fragColor = vec4(0.5);\n                }else{\n                    discard;\n                }\n            }\n            else{\n                fragColor = vec4(sum/count + DVal*(rand(uv).x-0.5));\n            }\n            /*\n            //don't do anything if there are no neighbors\n            if(count == 0.){\n                if((rand(uv + vec2(iTime))+rand(uv)+rand(uv)).x < 0.01){\n                    fragColor = vec4(0.5);\n                }else{\n                    discard;\n                }\n            }else{\n                //assign the cell, but have chance to not so that image gets rounded\n                if(rand(uv).x > count/4.0){\n                \n                    fragColor = vec4(sum / count + 0.03*(rand(uv).x-0.5));\n                }else{\n                    discard;\n                }\n                \n            }*/\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"vec2 seed = vec2(0.1);//  seed for generation\nfloat keepProb = 0.4;//   0 - 0.5 = noisy circular sections, 0.5 - 1 = diamond expansion\nfloat nucProb = 0.000001;//   probability of a location being a nucleation site. keep it low.\nfloat DVal = 0.04;//       change in brightness per cell.\n\n//explanation:\n//random pixels are updated each frame. the update algorithm goes as follows:\n//1. compute average of pixels on each side (up down left right), ignoring unset pixels\n//2. if no pixels exist, have a tiny chance to become a \"nucleation site\" (set value to 0.5)\n//3. if 1 or more exist, add a small random value and set the pixel's value to that.\n//this algorithm effectively grows diverging values from nucleation sites.\\\\\n\n//effects:\n//extremely low nucleation probability makes faint edges between sites\n//shards of low/high values grow from nucleation sites\n//","name":"Common","description":"","type":"common"}]}