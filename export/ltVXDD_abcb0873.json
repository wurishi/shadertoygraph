{"ver":"0.1","info":{"id":"ltVXDD","date":"1484503273","viewed":161,"name":"Sphere Practice","username":"tudordot","description":"Just a practice in sphere texturing and lighting in 2d","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["sphere"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec3 circlePos = vec3(0.0);\nconst float circleRad = 0.9;\n\nconst vec3 lightPos = vec3(-0.3, -0.7, 2.5);\nconst vec3 viewerPos = vec3(-2, -0.7, 3.0);\nconst vec3 ambientCol = vec3(0.3);\nconst vec3 lightCol = vec3(0.23, 0.2, 0.22);\n\n\nvec3 spherePos(vec2 pos, vec2 center, float rad)\n{\n    vec2 dir = pos - center;\n    return vec3(dir, sqrt(rad * rad - dot(dir, dir)));\n}\n\nvec2 sphereMap(vec3 pos, float rad)\n{\n    return vec2(atan(pos.z, pos.x), acos(pos.y / rad));\n}\n\nvec3 light(vec3 pos, vec3 inColor)\n{\n    vec3 norm = normalize(pos);\n    vec3 lightDir = normalize(lightPos - pos);\n    \n    float cosIncidence = dot(lightDir, norm);\n    float diffuse = clamp(cosIncidence, 0., 1.);\n    \n    vec3 refl = reflect(lightDir, norm);\n    vec3 viewDir = normalize(pos - viewerPos);\n\n    float specularTerm = clamp(dot(viewDir, refl), 0., 1.);\n    float specular = pow(specularTerm, 4.);\n    \n    return vec3(ambientCol * inColor.xyz + lightCol * (diffuse + specular));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 pos = 2.0 * vec2(fragCoord.xy - 0.5 * iResolution.xy) / iResolution.y;\n    \n    fragColor = vec4(0.23, 0.2, 0.33, 1.0);\n    \n    float ln = length(circlePos.xy - pos);\n    float bgMask = smoothstep(ln, ln + 0.01, circleRad);\n    \n    vec3 sphereP = spherePos(circlePos.xy, pos, circleRad);\n    vec4 sphereColor = texture(iChannel0, sphereMap(sphereP, circleRad));\n    \n    \n    sphereColor = vec4(light(sphereP, sphereColor.xyz), 1.0);\n    \n    \n\tfragColor =  fragColor * (1.0 - bgMask) + sphereColor * bgMask; \n}","name":"Image","description":"","type":"image"}]}