{"ver":"0.1","info":{"id":"DdXfWf","date":"1689680120","viewed":83,"name":"Fork pingpong84 haleyhalcy 707","username":"HaleyHalcyon","description":"a","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["aa"],"hasliked":0,"parentid":"mdXBW2","parentname":"pingpong8464973040"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// set to 0 to make colors buttery-smooth\n// set to 1 to dither colors (for GIF export)\n#define DITHER 1\n\n// generate an ordered dithered pattern based on pixel coordinates\n#if DITHER == 1\nfloat crosshatch(vec2 xyf) {\n    ivec2 xy = ivec2(xyf) & 3;\n    return (float(\n        + ((xy.y >> 1) & 1)\n        + ((xy.x & 2) ^ (xy.y & 2))\n        + ((xy.y & 1) << 2)\n        + ((((xy.x) & 1) ^ (xy.y & 1)) << 3)\n    ) + 0.5) / 16.;\n}\n\nfloat dither(float x, vec2 xyf) {\n    float thres = crosshatch(xyf);\n    x *= 4.;\n    float y = floor(x) + step(thres, fract(x));\n    return y / 4.;\n}\n#endif\n\n#define HEX(x) vec3((ivec3(x) >> ivec3(16, 8, 0)) & 255) / 255.\nvec3 color(float x, float side){\n    vec3[] c = vec3[](\n        vec3(0),\n        HEX(0xe020c0),\n        HEX(0xf0e040),\n        HEX(0xc0ff80),\n        vec3(1),\n        vec3(0),\n        HEX(0x8000a0),\n        HEX(0x7080F0),\n        HEX(0xa0ffe0),\n        vec3(1)\n    );\n    x = clamp(x, 0., 1.) * 4.;\n    int lo = int(floor(x) + 5. * side);\n    \n    return mix(\n        c[lo],\n        c[lo + 1],\n        fract(x)\n    );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (2. * fragCoord - iResolution.xy) / length(iResolution.xy);\n    float t = fract(iTime / 16.);\n    float r = -log(length(uv));\n    float angle = atan(uv.x, -uv.y) / acos(-1.);\n    float steps = floor(r * 2.);\n    angle += 0.25 * steps;\n    \n    float timescale0 = 8. + steps;\n    float timescale1 = 3.;\n    \n    float v0 = -1. + 2. * fract(0.5 * angle - timescale0 * (t));\n    float v1 = -1. + 2. * fract(-0.5 * angle - timescale1 * (t));\n\n    // Time varying pixel color\n    vec3 col = color(\n#if DITHER == 1\n        dither(max(v0, v1), fragCoord.xy)\n#else\n        max(v0, v1)\n#endif\n    , step(v0, v1));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}