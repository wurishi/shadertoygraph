{"ver":"0.1","info":{"id":"XddGRS","date":"1450439243","viewed":300,"name":"Basic : Newton Fractal","username":"Gijs","description":"Use your mouse.","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["2d","fractal","julia","newton"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int Iterations = 16;\n\nvec2 function(vec2 z){\n    //z^3-1\n    return vec2( z.x*z.x*z.x - 3.*z.x*z.y*z.y, 3.*z.x*z.x*z.y - z.y*z.y*z.y )-vec2(1,0);\n}\n\nvec2 derivative(vec2 z){\n    //derivative of z^3-1 which is 3z^2\n    return 3.*vec2( z.x*z.x - z.y*z.y, 2.*z.x*z.y );\n}\n\nvec2 complexMultiply(vec2 a, vec2 b){\n    return vec2(a.x*b.x-a.y*b.y, a.y*b.x + a.x*b.y );\n}\n\nvec2 complexDivide(vec2 a, vec2 b){\n    return vec2(a.x*b.x+a.y*b.y,a.y*b.x-a.x*b.y)/(b.x*b.x+b.y*b.y);\n}\n\nvec2 Scale(vec2 p){\n    return (2.*p-iResolution.xy)/iResolution.y;\n}\n\n//roots of z^3-1\nconst vec2 Root1 = vec2(  1,0.00001);\nconst vec2 Root2 = vec2(-.5, .86603);\nconst vec2 Root3 = vec2(-.5,-.86603);\n\n\n//color of roots\nconst vec3 color1 = vec3(.75,.25,.25);\nconst vec3 color2 = vec3(.25,.75,.25);\nconst vec3 color3 = vec3(.25,.25,.75);\n\nvec2 NewtonsMethod(vec2 z){\n    for(int i=0;i<Iterations;i++){\n        z = z-complexMultiply((iMouse.z>0.)?Scale(iMouse.xy):vec2(1,0),complexDivide(function(z),derivative(z)));\n    }\n\treturn z;\n}\n\nvec3 NewtonFractal(vec2 z){\n    z = NewtonsMethod(z);\n\n    float dr1 = distance(z,Root1);\n    float dr2 = distance(z,Root2);\n    float dr3 = distance(z,Root3);\n    \n    return normalize(color1/dr1+color2/dr2+color3/dr3);\n}\n        \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tfragColor = vec4(NewtonFractal(Scale(fragCoord.xy)),1.0);\n}","name":"Image","description":"","type":"image"}]}