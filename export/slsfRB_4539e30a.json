{"ver":"0.1","info":{"id":"slsfRB","date":"1651073741","viewed":346,"name":"Shuffling Mosaic [338 chars]","username":"Xor","description":"Experimenting with shuffling patterns that preserve their patterns","likes":30,"published":1,"flags":0,"usePreview":0,"tags":["golf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Tweet: https://twitter.com/XorDev/status/1519343739419959297\n//Twigl: https://t.co/FELzNSfU40\n//Based on \"Molecules 2\": https://www.shadertoy.com/view/7llBzS\n\n//<512 Chars playlist: shadertoy.com/playlist/N3SyzR\n\nvoid mainImage(out vec4 O, vec2 I)\n{\n    vec3 r=iResolution,\n    c = vec3(0,2,1),\n    T=iTime+c,\n    P=(I+I-r.xy)/r.y*mat3x2(-7,4, 0,-8, 7,4) / 6.+.2;\n    int A=int(T.z)/2%3;\n    O=min((.08-length(max(abs(fract(\n    P+=(T-sin(T*6.283)/6.).x*floor(mod(T,3.)-1.)*cos(ceil(P[int(T.y)%3])*3.14)\n    )-.5)-.4,0.)))*.2*r.y,1.)\n    *(sin(dot(mod(ceil(P+vec3(A<1,A<2,A-1)),2.),c+7.)-c)*.5+.5).xzyz;\n}","name":"Image","description":"","type":"image"}]}