{"ver":"0.1","info":{"id":"3sVBRG","date":"1607417581","viewed":510,"name":"Ease abs & Smooth abs","username":"gaz","description":"3d","likes":21,"published":1,"flags":0,"usePreview":0,"tags":["3d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TAU atan(1.)*8.\n\nvoid lookAt(inout vec3 rd,vec3 ro,vec3 ta,vec3 up){\n    vec3 w=normalize(ta-ro),u=normalize(cross(w,up));\n    rd=rd.x*u+rd.y*cross(u,w)+rd.z*w;\n}\n\nvoid rot(inout vec3 p,vec3 a,float t){\n\ta=normalize(a);\n\tvec3 u=cross(a,p),v=cross(a,u);\n\tp=u*sin(t)+v*cos(t)+a*dot(a,p);   \n}\n\nvoid rot(inout vec2 p,float t){\n    p=p*cos(t)+vec2(-p.y,p.x)*sin(t);\n}\n\nfloat ease(float x)\n{\n    return exp(-x*x*20.)*.4;\n}\n\n\nfloat easeAbs1(float x)\n{\n    return sqrt(x*x+1e-2)+ease(x);\n}\n\nfloat easeAbs2(float x)\n{\n    return abs(x)+ease(x);\n}\n\n// iq's abs\nfloat polyAbs(float x)\n{\n    const float m = 0.2;\n    const float n = 0.1;\n\n    x = abs(x);\n    if( x>m ) return x;\n    float a = 2.0*n - m;\n    float b = 2.0*m - 3.0*n;\n    float t = x/m;\n    return (a*t + b)*t*t + n;\n}\n\n// // https://shadertoy.com/view/ltf3W2\nfloat smoothAbs(float x)\n{\n    if(fract(iTime*.5)<.5)\n    {\n    \treturn polyAbs(x);\n    }else{\n    \treturn sqrt(x*x+3e-2);\n    }\n}\n\nfloat easeMin1(float a, float b){\n    return (a+b-easeAbs1(a-b))*.5;\n}\nfloat easeMin2(float a, float b){\n    return (a+b-easeAbs2(a-b))*.5;\n}\nfloat smoothMin(float a, float b){\n    return (a+b-smoothAbs(a-b))*.5;\n}\n\nfloat easeMax1(float a, float b){\n    return (a+b+easeAbs1(a-b))*.5;\n}\nfloat easeMax2(float a, float b){\n    return (a+b+easeAbs2(a-b))*.5;\n}\nfloat smoothMax(float a, float b){\n    return (a+b+smoothAbs(a-b))*.5;\n}\n\nvoid smoothFold(inout vec2 p, vec2 v)\n{\n    float g=dot(p,v);\n    p-=(g-smoothAbs(g))*v;\n}\n\n// inspired https://twitter.com/7CIT/status/1235459606840610816\nvoid signedSmoothFold(inout vec2 p, vec2 v)\n{\n    float g=dot(p,v);\n    p=(p-(g-smoothAbs(g))*v)*vec2(sign(g),1);\n}\n\nvoid easeFold1(inout vec2 p, vec2 v)\n{\n    float g=dot(p,v);\n    p-=(g-easeAbs1(g))*v;\n}\n\nvoid signedEaseFold1(inout vec2 p, vec2 v)\n{\n    float g=dot(p,v);\n    p=(p-(g-easeAbs1(g))*v)*vec2(sign(g),1);\n}\n\nvoid easeFold2(inout vec2 p, vec2 v)\n{\n    float g=dot(p,v);\n    p-=(g-easeAbs2(g))*v;\n}\n\nvoid signedEaseFold2(inout vec2 p, vec2 v)\n{\n    float g=dot(p,v);\n    p=(p-(g-easeAbs2(g))*v)*vec2(sign(g),1);\n}\n\nvec2 mirrorVic(float a)\n{\n    a=radians(a)*.5;\n    return vec2(cos(a),sin(a));\n}\n\nfloat de0(vec3 p)\n{\n    float de0=length(p.xz)-.5;\n    vec2 q=vec2(length(p.xz)-1.5,abs(p.y)-1.);\n    vec2 v=mirrorVic(-90.); // normalize(vec2(1,-1))\n    smoothFold(q.xy,v);\n    float de1=q.x;\n    return easeMax1(-de0,de1);\n    //return smoothMax(-de0,de1);\n}\n\nfloat de1(vec3 p)\n{\n    p.x+=2.5;\n    signedSmoothFold(p.xy,mirrorVic(60.*sin(iTime)));\n    p.x+=1.5;\n    signedSmoothFold(p.xy,mirrorVic(-60.*sin(iTime)));\n    p.x+=1.5;\n    p.x-=clamp(p.x,0.,4.);\n    return length(p)-.4;\n}\n\nfloat de2(vec3 p)\n{\n    p.x+=2.5;\n    signedEaseFold1(p.xy,mirrorVic(60.*sin(iTime)));\n    p.x+=1.5;\n    signedEaseFold1(p.xy,mirrorVic(-60.*sin(iTime)));\n    p.x+=1.5;\n    p.x-=clamp(p.x,0.,4.);\n    return length(p)-.4;\n}\n\nfloat de3(vec3 p)\n{\n    p.x+=2.5;\n    signedEaseFold2(p.xy,mirrorVic(60.*sin(iTime)));\n    p.x+=1.5;\n    signedEaseFold2(p.xy,mirrorVic(-60.*sin(iTime)));\n    p.x+=1.5;\n    p.x-=clamp(p.x,0.,4.);\n    return length(p)-.4;\n}\n\nfloat map(in vec3 p)\n{\n    rot(p.xz,iTime*.3);\n\tfloat de= de0(p);\n    de= smoothMin(de,de1(p));\n    rot(p.xz,TAU/3.);\n    de= easeMin1(de,de2(p));\n    rot(p.xz,TAU/3.);\n    de= easeMin2(de,de3(p));\n    return de;\n}\n\n\n\nvec3 calcNormal(vec3 p)\n{\n  vec3 n=vec3(0);\n  for(int i=0; i<4; i++){\n    vec3 e=.001*(vec3(9>>i&1, i>>1&1, i&1)*2.-1.);\n    n+=e*map(p+e);\n  }\n  return normalize(n);\n}\n\nfloat march(vec3 ro, vec3 rd, float near, float far)\n{\n    float t=near,d;\n    for(int i=0;i<70;i++)\n    {\n        t+=d=map(ro+rd*t);\n        if (d<.001) return t;\n        if (t>=far) return far;\n    }\n    return far;\n}\n\nvec3 doColor(vec3 p)\n{\n    return (vec3(.3,.5,.8)+cos(p)*.5+.5)*.7;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy*2.-iResolution.xy)/iResolution.y;\n    vec3 ro = vec3(0,4,5);\n    vec3 rd = normalize(vec3(uv,2));\n    vec3 ta =vec3(0);\n    lookAt(rd,ro,ta,vec3(0,1,0));    \n    vec3 col= vec3(0);\n\tconst float maxd=50.;\n    float t=march(ro,rd,0.,maxd);\n    if(t<maxd)\n    {\n        vec3 p=ro+rd*t;\n        col=doColor(p); \n        vec3 n=calcNormal(p);      \n\t\tvec3 lightPos=ro+vec3(2,5,2);\n    \tvec3 li=lightPos-p;\n\t\tfloat len=length(li);\n\t\tli/=len;\n\t\tfloat dif=clamp(dot(n,li),0.,1.);\n        col*=max(dif,.2);\n        col*=max(.5+.5*n.y,.3);\n        col*=exp2(-2.*pow(max(0.,1.-map(p+n*.8)/.8),2.));\n        col+=vec3(.3,.3,.3)*pow(clamp(dot(reflect(rd,n),li),0.,1.),80.);\n    }\n    \n    for(int i=0;i<4;i++)\n    {\n        vec2 q,p=uv+(vec2(i>>1&1,i&1)-.5)*vec2(2,1);\n        p.y-=.08;\n        q=p;\n        q.x-=clamp(q.x,-.3,.3);\n        col=mix(col,vec3(1,0,0),smoothstep(.01,.0,length(q)));\n        q=p;\n        q.y-=clamp(q.y,-.3,.3);\n        col=mix(col,vec3(0,1,0),smoothstep(.01,.0,length(q)));\n        q=p;\n    \tq=abs(q);\n        if(q.x<q.y)q=q.yx;\n        q-=.3;\n    \tcol=mix(col,vec3(1),smoothstep(.01,.0,abs(q.x)));\n        q=p;\n        switch(i)\n        {\n         \tcase 0: q.y-=sqrt(q.x*q.x+.001);break;\n         \tcase 1: q.y-=abs(q.x)+exp(-q.x*q.x*300.)*.08;break;\n         \tcase 2: q.y-=abs(q.x);break;\n         \tcase 3: q.y-=sqrt(q.x*q.x+.001)+exp(-q.x*q.x*300.)*.08;break;\n        }\n        q.x-=clamp(q.x,-.28,.28);\n        col=mix(col,vec3(1),smoothstep(.01,.0,length(q)));\n        \n        vec2 uv=p;\n\t    uv-=vec2(-.35,-.47);\n    \tfloat de= 1.;\n        switch(i)\n        {\n         \tcase 0:\n            \tM(char_s)\n\t\t\t    M(char_m)\n    \t\t\tM(char_o)\n    \t\t\tM(char_o)\n    \t\t\tM(char_t)\n    \t\t\tM(char_h)\n    \t\t\tM(char_A)\n    \t\t\tM(char_b)\n    \t\t\tM(char_s)\n            \tbreak;\n         \tcase 1:\n            \tM(char_e)\n\t\t\t    M(char_a)\n    \t\t\tM(char_s)\n    \t\t\tM(char_e)\n    \t\t\tM(char_A)\n    \t\t\tM(char_b)\n    \t\t\tM(char_s)\n            \tM(char_2)\n            \tbreak;\n         \tcase 2:\n    \t\t\tM(char_a)\n    \t\t\tM(char_b)\n    \t\t\tM(char_s)\n            \tbreak;\n         \tcase 3:\n            \tM(char_e)\n\t\t\t    M(char_a)\n    \t\t\tM(char_s)\n    \t\t\tM(char_e)\n    \t\t\tM(char_A)\n    \t\t\tM(char_b)\n    \t\t\tM(char_s)\n            \tM(char_1)\n            \tbreak;\n        }\n        col=mix(col,vec3(.2,.5,7),smoothstep(.01,0.,de));\n    }\n\n    fragColor.xyz=col;    \n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// font type ->> https://www.shadertoy.com/view/MsyGzz\n// ++++++++++++++++++++++++++++++++++++++\n\n#define FONT(f,arr)\\\n    float f(inout vec2 p){\\\n        int data[]=arr;\\\n        float de=1., rate=.004, k=.4;\\\n        for(int i=0;i<int(data.length())/4;i++){\\\n            vec2 a=rate*vec2(data[i*4+1],data[i*4+2]),\\\n            b=rate*vec2(data[i*4+3],data[i*4+4]);\\\n            a.x+=a.y*k,b.x+=b.y*k;\\\n            vec2 pa=p-a,ba=b-a;\\\n            de=min(de,length(pa-ba*clamp(dot(pa,ba)/dot(ba,ba),0.,1.)));\\\n        }\\\n        p.x-=rate*float(data[0]);\\\n        return de;\\\n    }\n    \nFONT(char_0,int[](20,9,21,6,20,6,20,4,17,4,17,3,12,3,12,3,9,3,9,4,4,4,4,6,1,6,1,9,0,9,0,11,0,11,0,14,1,14,1,16,4,16,4,17,9,17,9,17,12,17,12,16,17,16,17,14,20,14,20,11,21,11,21,9,21))\nFONT(char_1,int[](20,6,17,8,18,8,18,11,21,11,21,11,0))\nFONT(char_2,int[](20, 4,16,4,17,4,17,5,19,5,19,6,20,6,20,8,21,8,21,12,21,12,21,14,20,14,20,15,19,15,19,16,17,16,17,16,15,16,15,15,13,15,13,13,10,13,10,3,0,3,0,17,0))\nFONT(char_3,int[](20,5,21,16,21,16,21,10,13,10,13,13,13,13,13,15,12,15,12,16,11,16,11,17,8,17,8,17,6,17,6,16,3,16,3,14,1,14,1,11,0,11,0,8,0,8,0,5,1,5,1,4,2,4,2,3,4 ))\nFONT(char_4,int[](20,13,21,3,7,3,7,18,7,13,21,13,0))\nFONT(char_5,int[](20,15,21,5,21,5,21,4,12,4,12,5,13,5,13,8,14,8,14,11,14,11,14,14,13,14,13,16,11,16,11,17,8,17,8,17,6,17,6,16,3,16,3,14,1,14,1,11,0,11,0,8,0,8,0,5,1,5,1,4,2,4,2,3,4))\nFONT(char_6,int[](20,16,18,15,20,15,20,12,21,12,21,10,21,10,21,7,20,7,20,5,17,5,17,4,12,4,12,4,7,4,7,5,3,5,3,7,1,7,1,10,0,10,0,11,0,11,0,14,1,14,1,16,3,16,3,17,6,17,6,17,7,17,7,16,10,16,10,14,12,14,12,11,13,11,13,10,13,10,13,7,12,7,12,5,10,5,10,4,7))\nFONT(char_7,int[](20,17,21,7,0,3,21,17,21))\nFONT(char_8,int[](20,8,21,5,20,5,20,4,18,4,18,4,16,4,16,5,14,5,14,7,13,7,13,11,12,11,12,14,11,14,11,16,9,16,9,17,7,17,7,17,4,17,4,16,2,16,2,15,1,15,1,12,0,12,0,8,0,8,0,5,1,5,1,4,2,4,2,3,4,3,4,3,7,3,7,4,9,4,9,6,11,6,11,9,12,9,12,13,13,13,13,15,14,15,14,16,16,16,16,16,18,16,18,15,20,15,20,12,21,12,21,8,21))\nFONT(char_9,int[](20,16,14,15,11,15,11,13,9,13,9,10,8,10,8,9,8,9,8,6,9,6,9,4,11,4,11,3,14,3,14,3,15,3,15,4,18,4,18,6,20,6,20,9,21,9,21,10,21,10,21,13,20,13,20,15,18,15,18,16,14,16,14,16,9,16,9,15,4,15,4,13,1,13,1,10,0,10,0,8,0,8,0,5,1,5,1,4,3))\n\nFONT(char_A,int[](18,9,21,1,0,9,21,17,0,4,7,14,7))\nFONT(char_B,int[](21,4,21,4,0,4,21,13,21,13,21,16,20,16,20,17,19,17,19,18,17,18,17,18,15,18,15,17,13,17,13,16,12,16,12,13,11,4,11,13,11,13,11,16,10,16,10,17,9,17,9,18,7,18,7,18,4,18,4,17,2,17,2,16,1,16,1,13,0,13,0,4,0))\nFONT(char_C,int[](21,18,16,17,18,17,18,15,20,15,20,13,21,13,21,9,21,9,21,7,20,7,20,5,18,5,18,4,16,4,16,3,13,3,13,3,8,3,8,4,5,4,5,5,3,5,3,7,1,7,1,9,0,9,0,13,0,13,0,15,1,15,1,17,3,17,3,18,5))\nFONT(char_D,int[](21,4,21,4,0,4,21,11,21,11,21,14,20,14,20,16,18,16,18,17,16,17,16,18,13,18,13,18,8,18,8,17,5,17,5,16,3,16,3,14,1,14,1,11,0,11,0,4,0))\nFONT(char_E,int[](19,4,21,4,0,4,21,17,21,4,11,12,11,4,0,17,0))\nFONT(char_F,int[](18,4,21,4,0,4,21,17,21,4,11,12,11))\nFONT(char_G,int[](21,18,16,17,18,17,18,15,20,15,20,13,21,13,21,9,21,9,21,7,20,7,20,5,18,5,18,4,16,4,16,3,13,3,13,3,8,3,8,4,5,4,5,5,3,5,3,7,1,7,1,9,0,9,0,13,0,13,0,15,1,15,1,17,3,17,3,18,5,18,5,18,8,13,8,18,8))\nFONT(char_H,int[](22,4,21,4,0,18,21,18,0,4,11,18,11))\nFONT(char_I,int[](15,  3,21,12,21,  3,0,12,0,  8,21,8,0))\nFONT(char_J,int[](17,  5,21,14,21,    12,21,12,5,12,5,11,2,11,2,10,1,10,1,8,0,8,0,6,0,6,0,4,1,4,1,3,2,3,2,2,5,2,5,2,7))\nFONT(char_K,int[](21,4,21,4,0,18,21,4,7,9,12,18,0))\nFONT(char_L,int[](17,4,21,4,0,4,0,16,0))\nFONT(char_M,int[](24,4,21,4,0,4,21,12,0,20,21,12,0,20,21,20,0))\nFONT(char_N,int[](22,4,21,4,0,4,21,18,0,18,21,18,0))\nFONT(char_O,int[](22,9,21,7,20,7,20,5,18,5,18,4,16,4,16,3,13,3,13,3,8,3,8,4,5,4,5,5,3,5,3,7,1,7,1,9,0,9,0,13,0,13,0,15,1,15,1,17,3,17,3,18,5,18,5,19,8,19,8,19,13,19,13,18,16,18,16,17,18,17,18,15,20,15,20,13,21,13,21,9,21))\nFONT(char_P,int[](21,4,21,4,0,4,21,13,21,13,21,16,20,16,20,17,19,17,19,18,17,18,17,18,14,18,14,17,12,17,12,16,11,16,11,13,10,13,10,4,10))\nFONT(char_Q,int[](22,9,21,7,20,7,20,5,18,5,18,4,16,4,16,3,13,3,13,3,8,3,8,4,5,4,5,5,3,5,3,7,1,7,1,9,0,9,0,13,0,13,0,15,1,15,1,17,3,17,3,18,5,18,5,19,8,19,8,19,13,19,13,18,16,18,16,17,18,17,18,15,20,15,20,13,21,13,21,9,21,12,4,18,-2))\nFONT(char_R,int[](21,4,21,4,0,4,21,13,21,13,21,16,20,16,20,17,19,17,19,18,17,18,17,18,15,18,15,17,13,17,13,16,12,16,12,13,11,13,11,4,11,11,11,18,0))\nFONT(char_S,int[](20,17,18,15,20,15,20,12,21,12,21,8,21,8,21,5,20,5,20,3,18,3,18,3,16,3,16,4,14,4,14,5,13,5,13,7,12,7,12,13,10,13,10,15,9,15,9,16,8,16,8,17,6,17,6,17,3,17,3,15,1,15,1,12,0,12,0,8,0,8,0,5,1,5,1,3,3))\nFONT(char_T,int[](16,8,21,8,0,1,21,15,21))\nFONT(char_U,int[](22,4,21,4,6,4,6,5,3,5,3,7,1,7,1,10,0,10,0,12,0,12,0,15,1,15,1,17,3,17,3,18,6,18,6,18,21))\nFONT(char_V,int[](18,1,21,9,0,17,21,9,0))\nFONT(char_W,int[](24,2,21,7,0,12,21,7,0,12,21,17,0,22,21,17,0))\nFONT(char_X,int[](20,3,21,17,0,17,21,3,0))\nFONT(char_Y,int[](18,1,21,9,11,9,11,9,0,17,21,9,11))\nFONT(char_Z,int[](20,17,21,3,0,3,21,17,21,3,0,17,0))\n\nFONT(char_a,int[](19,15,14,15,0,15,11,13,13,13,13,11,14,11,14,8,14,8,14,6,13,6,13,4,11,4,11,3,8,3,8,3,6,3,6,4,3,4,3,6,1,6,1,8,0,8,0,11,0,11,0,13,1,13,1,15,3))\nFONT(char_b,int[](19,4,21,4,0,4,11,6,13,6,13,8,14,8,14,11,14,11,14,13,13,13,13,15,11,15,11,16,8,16,8,16,6,16,6,15,3,15,3,13,1,13,1,11,0,11,0,8,0,8,0,6,1,6,1,4,3))\nFONT(char_c,int[](18,15,11,13,13,13,13,11,14,11,14,8,14,8,14,6,13,6,13,4,11,4,11,3,8,3,8,3,6,3,6,4,3,4,3,6,1,6,1,8,0,8,0,11,0,11,0,13,1,13,1,15,3))\nFONT(char_d,int[](19,15,21,15,0,15,11,13,13,13,13,11,14,11,14,8,14,8,14,6,13,6,13,4,11,4,11,3,8,3,8,3,6,3,6,4,3,4,3,6,1,6,1,8,0,8,0,11,0,11,0,13,1,13,1,15,3))\nFONT(char_e,int[](18,3,8,15,8,15,8,15,10,15,10,14,12,14,12,13,13,13,13,11,14,11,14,8,14,8,14,6,13,6,13,4,11,4,11,3,8,3,8,3,6,3,6,4,3,4,3,6,1,6,1,8,0,8,0,11,0,11,0,13,1,13,1,15,3))\nFONT(char_f,int[](12,10,21,8,21,8,21,6,20,6,20,5,17,5,17,5,0,2,14,9,14))\nFONT(char_g,int[](19,15,14,15,-2,15,-2,14,-5,14,-5,13,-6,13,-6,11,-7,11,-7,8,-7,8,-7,6,-6,15,11,13,13,13,13,11,14,11,14,8,14,8,14,6,13,6,13,4,11,4,11,3,8,3,8,3,6,3,6,4,3,4,3,6,1,6,1,8,0,8,0,11,0,11,0,13,1,13,1,15,3))\nFONT(char_h,int[](19,4,21,4,0,4,10,7,13,7,13,9,14,9,14,12,14,12,14,14,13,14,13,15,10,15,10,15,0))\nFONT(char_i,int[](8,3,21,4,20,4,20,5,21,5,21,4,22,4,22,3,21,4,14,4,0))\nFONT(char_j,int[](10,5,21,6,20,6,20,7,21,7,21,6,22,6,22,5,21,6,14,6,-3,6,-3,5,-6,5,-6,3,-7,3,-7,1,-7))\nFONT(char_k,int[](17,4,21,4,0,14,14,4,4,8,8,15,0))\nFONT(char_l,int[](8,4,21,4,0))\nFONT(char_m,int[](30,4,14,4,0,4,10,7,13,7,13,9,14,9,14,12,14,12,14,14,13,14,13,15,10,15,10,15,0,15,10,18,13,18,13,20,14,20,14,23,14,23,14,25,13,25,13,26,10,26,10,26,0))\nFONT(char_n,int[](19,4,14,4,0,4,10,7,13,7,13,9,14,9,14,12,14,12,14,14,13,14,13,15,10,15,10,15,0))\nFONT(char_o,int[](19,8,14,6,13,6,13,4,11,4,11,3,8,3,8,3,6,3,6,4,3,4,3,6,1,6,1,8,0,8,0,11,0,11,0,13,1,13,1,15,3,15,3,16,6,16,6,16,8,16,8,15,11,15,11,13,13,13,13,11,14,11,14,8,14))\nFONT(char_p,int[](19,4,14,4,-7,4,11,6,13,6,13,8,14,8,14,11,14,11,14,13,13,13,13,15,11,15,11,16,8,16,8,16,6,16,6,15,3,15,3,13,1,13,1,11,0,11,0,8,0,8,0,6,1,6,1,4,3))\nFONT(char_q,int[](19,15,14,15,-7,15,11,13,13,13,13,11,14,11,14,8,14,8,14,6,13,6,13,4,11,4,11,3,8,3,8,3,6,3,6,4,3,4,3,6,1,6,1,8,0,8,0,11,0,11,0,13,1,13,1,15,3))\nFONT(char_r,int[](13,4,14,4,0,4,8,5,11,5,11,7,13,7,13,9,14,9,14,12,14))\nFONT(char_s,int[](17,14,11,13,13,13,13,10,14,10,14,7,14,7,14,4,13,4,13,3,11,3,11,4,9,4,9,6,8,6,8,11,7,11,7,13,6,13,6,14,4,14,4,14,3,14,3,13,1,13,1,10,0,10,0,7,0,7,0,4,1,4,1,3,3))\nFONT(char_t,int[](12,5,21,5,4,5,4,6,1,6,1,8,0,8,0,10,0,2,14,9,14))\nFONT(char_u,int[](19,4,14,4,4,4,4,5,1,5,1,7,0,7,0,10,0,10,0,12,1,12,1,15,4,15,14,15,0))\nFONT(char_v,int[](16,2,14,8,0,14,14,8,0))\nFONT(char_w,int[](22,3,14,7,0,11,14,7,0,11,14,15,0,19,14,15,0))\nFONT(char_x,int[](17,3,14,14,0,14,14,3,0))\nFONT(char_y,int[](16,2,14,8,0,14,14,8,0,8,0,6,-4,6,-4,4,-6,4,-6,2,-7,2,-7,1,-7))\nFONT(char_z,int[](17,14,14,3,0,3,14,14,14,3,0,14,0))\n\nFONT(char_dot,int[](10,5,2,4,1,4,1,5,0,5,0,6,1,6,1,5,2))\n\n#define M(a)de=min(de,a(uv));\n","name":"Common","description":"","type":"common"}]}