{"ver":"0.1","info":{"id":"M3X3Df","date":"1710680008","viewed":41,"name":"LIFgraphique TP2","username":"Jackenouille","description":"lifgraphique tp2","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["lifgraphique"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Texturing and noise \n\n// Hashing function\nfloat Hash(in vec3 p)  \n{\n    // Returns a random number in [-1,1]\n    // p : Vector in space\n    p  = fract( p*0.3199+0.152 );\n\tp *= 17.0;\n    return fract( p.x*p.y*p.z*(p.x+p.y+p.z) );\n}\n\nfloat Noise(in vec3 p)\n{\n    // Procedural value noise with cubic interpolation\n    // x : Point \n    vec3 i = floor(p);\n    vec3 f = fract(p);\n  \n    f = f*f*(3.0-2.0*f);\n    // Could use quintic interpolation instead of cubic\n    // f = f*f*f*(f*(f*6.0-15.0)+10.0);\n\n    return mix(mix(mix( Hash(i+vec3(0,0,0)), \n                        Hash(i+vec3(1,0,0)),f.x),\n                   mix( Hash(i+vec3(0,1,0)), \n                        Hash(i+vec3(1,1,0)),f.x),f.y),\n               mix(mix( Hash(i+vec3(0,0,1)), \n                        Hash(i+vec3(1,0,1)),f.x),\n                   mix( Hash(i+vec3(0,1,1)), \n                        Hash(i+vec3(1,1,1)),f.x),f.y),f.z);\n}\n\nvec3 Voronoi( in vec3 x )\n{\n    // Compute the distance to the Voronoi boundary\n    // x : Point\n    // Return (closest distance, second closest, cell id)\n    vec3 p = floor( x );\n    vec3 f = fract( x );\n\n\tfloat id = 0.0;\n    vec2 res = vec2( 100.0 );\n    for( int k=-1; k<=1; k++ )\n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ )\n    {\n        vec3 b = vec3( float(i), float(j), float(k) );\n        vec3 r = vec3( b ) - f + Hash( p + b );\n        float d = dot( r, r );\n\n        if( d < res.x )\n        {\n\t\t\tid = dot( p+b, vec3(1.0,57.0,113.0 ) );\n            res = vec2( d, res.x );\t\t\t\n        }\n        else if( d < res.y )\n        {\n            res.y = d;\n        }\n    }\n\n    return vec3( sqrt( res ), abs(id) );\n}\n\n// Camera -----------------------------------------------------------------------\n\nmat3 Rz(float a)\n{\n    // Rotation matrix around z axis\n    // a : Angle\n    float sa = sin(a); float ca = cos(a); \n    return mat3(ca,sa,0.0,    -sa,ca,0.0,  0.0,0.0,1.0);\n}\n\nvoid Ray(in vec2 m, in vec2 p,out vec3 ro,out vec3 rd)\n{\n    // Compute the ray\n    //      m : Mouse position\n    //      p : Pixel\n    // ro, rd : Ray origin and direction\n    float a = 3.0*3.14*m.x;\n   \tfloat le = 3.8;\n    \n    ro=vec3(35.0,0.0,15.0);\n    ro*=Rz(3.0*3.14*m.x); \n\n    vec3 ta = vec3(0.0,0.0,0.0);\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,0.0,1.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\trd = normalize( p.x*uu + p.y*vv + le*ww );\n}\n\n// Texturing\n// Eric Galin\n\nconst int Steps = 200;      // Number of steps\nconst float Epsilon = 0.01; // Marching epsilon\n\nstruct V {\n    // Structure for objects\n    // v : Field value\n    // i : Texture index\n    float v; \n    int i;\n};\n\nstruct T {\n    // Structure for texture\n    // c : Color\n    // s : Specular\n    vec3 c;\n    float s;\n};\n\n// Primitive functions -----------------------------------------------------------------------------------\n\nV Sphere(vec3 p, vec3 c,float r,int index)\n{\n    // Sphere \n    // p : point\n    // c : center \n    // r : radius\n  return V(length(p-c)-r,index);\n}\n\nV Cube(vec3 p,vec3 c,float r,int index)\n{\n    // Cube \n    // p : point\n    // c : center \n    // r : radius\n    vec3 q = abs(p-c) - vec3(r);\n    return V(length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0),index);\n}\n\nV Box(vec3 p, vec3 b, int index)\n{\n    vec3 d = abs(p) - b;\n    float distance = min(max(d.x, max(d.y, d.z)), 0.0) + length(max(d, 0.0));\n    return V(distance, index);\n}\n\nV Cylinder(vec3 p, vec2 c, int index)\n{\n    vec2 d = abs(vec2(length(p.xy), p.z)) - c;\n    return V(min(max(d.x, d.y), 0.0) + length(max(d, 0.0)), index);\n}\n\nV Plane(vec3 p, vec3 n, vec3 o,int index)\n{\n    // Plane \n    // p : point\n    // n : Normal of plane\n    // o : Point on plane\n    return V(dot((p-o),n),index);\n}\n\nV Union(V a,V b)\n{\n    // Union\n    // a : field function of left sub-tree\n    // b : field function of right sub-tree\n    if (a.v<b.v)\n        return V(a.v,a.i);\n    else \n    {\n        return V(b.v,b.i);\n    }\n}\n\nV Intersection(V a,V b)\n{\n    // Intersection, preserve the index of first object\n    // a, b : field function of left and right sub-trees\n    if (a.v>b.v)\n    {\n        return V(a.v,a.i);\n    }\n    else \n    {\n        return V(b.v,a.i);\n    }\n}\n\n\n// Dice \nV Dice(vec3 p,vec3 c,float r,int index)\n{\n  // p : point\n  // c : center \n  // r : radius\n  return Intersection(Cube(p,c,r*0.75,index),Sphere(p,c,r,index));\n}\n\nfloat Noise(vec2 p) {\n    return Noise(vec3(p, 0.0));\n}\n\nfloat turbulence(vec3 p, float lacunarity, float gain, int octaves) {\n    float value = 0.0;\n    float amplitude = 1.0;\n    vec3 pp = p;\n    for (int i = 0; i < octaves; i++) {\n        value += amplitude * Noise(pp);\n        pp *= lacunarity;\n        amplitude *= gain;\n    }\n    return value;\n}\n\nfloat gradientNoise(vec3 p) {\n    float xy = Noise(p.xy);\n    float yz = Noise(p.yz);\n    float zx = Noise(p.zx);\n    float yx = Noise(p.yx);\n    float zy = Noise(p.zy);\n    float xz = Noise(p.xz);\n    return (xy + yz + zx + yx + zy + xz) / 6.0;\n}\n\nfloat marbleWithVeins(vec3 p, float lacunarity, float gain, int octaves, float veinScale) {\n    float marble = turbulence(p, lacunarity, gain, octaves);\n    float veins = turbulence(p * veinScale, lacunarity, gain, octaves);\n    return marble + veins;\n}\n\nfloat rouilleNoise(vec3 p) {\n    return turbulence(p, 2.0, 0.5, 5);\n}\n\nvec3 rouilleTexture(vec3 p) {\n    vec3 rouilleColor = vec3(0.6, 0.3, 0.1);\n    float grain = rouilleNoise(p);\n    vec3 color = mix(rouilleColor * 0.8, rouilleColor * 1.2, grain);\n    float density = turbulence(p * 5.0, 2.0, 0.5, 5);\n    vec3 color2 = vec3(0.2, 0.1, 0.05);\n    color = mix(color, color2, density);\n    return color;\n}\n\nvec3 Wood(vec3 p, float dist) {\n\n    float d = sqrt(p.x*p.x + p.y * p.y)/dist;\n    d+= 0.6*Noise(p*0.5);\n    \n    float v = sin(d*0.6*3.14);\n    v = (v + 0.7);\n    v = smoothstep(-0.3, v, 0.2);\n\n    return mix(vec3(0.4,0.2,0.),vec3(.7,0.5,0.3),v);\n}\n\nT WoodTexture(in vec3 p)\n{\n    return T(Wood(p, 0.5),0.);\n}\n\nV Chair(vec3 p)\n{\n    V assise = Box(p, vec3(3.0, 3.0, 0.5), 1);\n    V pied1 = Cylinder(p - vec3(2.5, 2.5, 0.0), vec2(0.5, 5.0), 6);\n    V pied2 = Cylinder(p - vec3(-2.5, 2.5, 0.0), vec2(0.5, 5.0), 6);\n    V pied3 = Cylinder(p - vec3(-2.5, -2.5, -5.0), vec2(0.5, 5.0), 6);\n    V pied4 = Cylinder(p - vec3(2.5, -2.5, -5.0), vec2(0.5, 5.0), 6);\n    V dos = Box(p - vec3(0.,2.5, 4.), vec3(3.0, 0.5, 1.5), 6);\n    V chair = Union(assise, Union(pied1, Union(pied2, Union(pied3, Union(dos, pied4)))));\n\n    return chair;\n}\n\nV Table(vec3 p)\n{\n    V pied1 = Cylinder(p - vec3(4, 4., -5.0), vec2(0.5, 5.0), 4);\n    V pied2 = Cylinder(p - vec3(-4, 4., -5.0), vec2(0.5, 5.0), 4);\n    V pied3 = Cylinder(p - vec3(-4, -4, -5.0), vec2(0.5, 5.0), 4);\n    V pied4 = Cylinder(p - vec3(4., -4., -5.0), vec2(0.5, 5.0), 4);\n    V t = Box(p, vec3(5.,5.,0.5), 4);\n    V nappe = Box(p - vec3(0.,0.,0.5), vec3(5.,5.,0.1),3);\n    V table = Union(t, Union(pied1, Union(pied2, Union(pied3, Union(pied4, nappe)))));\n    return table;\n}\n\nV Verre(vec3 p)\n{\n    V v = Cylinder(p - vec3(0.,0.,-5.),vec2(0.5, 0.5),6);\n    V eau = Cylinder(p - vec3(0.,0.,-5.),vec2(0.35,0.5),5);\n    V verre = Union(v,eau);\n    return verre;\n}\n\n// Potential field of the object\nV object(vec3 p)\n{\n  // p : point\n  V u = Plane(p,normalize(vec3(0.0,0.0,1.0)),vec3(0.0,0.0,-4.0),0);\n  \n  u=Union(u,Sphere(p,vec3(-10.,0.,2.),5.,2));\n  u=Union(u,Chair(p));\n  u=Union(u,Table(p + vec3(0.,10.,0.)));\n  u=Union(u,Verre(p + vec3(0.,6.,-6.0)));\n \n  return u;\n}\n\n// Analysis of the scalar field --------------------------------------------------------------------------\n\n// Calculate object normal\nvec3 ObjectNormal(in vec3 p )\n{\n  // p : point\n  float eps = 0.001;\n  vec3 n;\n  V vp = object(p);\n    float v = vp.v;\n  n.x = object( vec3(p.x+eps, p.y, p.z) ).v - v;\n  n.y = object( vec3(p.x, p.y+eps, p.z) ).v - v;\n  n.z = object( vec3(p.x, p.y, p.z+eps) ).v - v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\nfloat SphereTrace(vec3 o, vec3 u, float e,out bool h,out int s)\n{\n  // o : ray origin\n  // u : ray direction\n  // e : Maximum distance \n  // h : hit\n  // s : Number of steps\n  h = false;\n\n    // Start at the origin\n    float t=0.0;\n\n  for(int i=0; i<Steps; i++)\n  {\n    s=i;\n    vec3 p = o+t*u;\n    float v = object(p).v;\n    // Hit object\n      if (v < 0.0)\n      {\n          s=i;\n          h = true;\n          break;\n      }\n      // Move along ray\n      t += max(Epsilon,v);\n      // Escape marched too far away\n      if (t>e)\n      {\n          break;\n      }\n  }\n  return t;\n}\n\n// Background color\nvec3 background(vec3 d)\n{\n  // d : Ray direction\n  return mix(vec3(0.65,0.75,0.995),vec3(0.652,0.697,0.995), d.z*0.5+0.5);\n}\n\n\n// Direct lighting\nfloat Light(vec3 p,vec3 n)\n{\n   // point light\n  const vec3 lp = vec3(5.0, 10.0, 25.0);\n\n  vec3 l = normalize(lp - p);\n\n  // Phong shading\n  float diff = clamp(dot(n, l),0.0,1.0);\n\n    bool h;\n    int s;\n    float t=SphereTrace(p+0.1*n,l,100.0,h,s);\nif (!h)\n    {\n     return diff;\n    }\n    return 0.0; \n}\n\n\n// Shading and lighting ---------------------------------------------------------------------------\n\nT Texture0(in vec3 p)\n{\n  return T(vec3(0.80,0.80,0.80),0.25);   \n}\n\nT Texture1(in vec3 p)\n{\n  return T(vec3(0.82,0.81,0.90),0.25);   \n}\n\nT Texture2(in vec3 p)\n{\n  return T(vec3(0.82,0.91,0.80),0.0);   \n}\n\nT Texture3(in vec3 p)\n{\n  return T(vec3(0.82,0.91,0.90),0.0);   \n}\n\nT TextureUniform(vec3 color)\n{\n  return T(color, 0.25);\n}\n\nT TextureCheckerboard(in vec3 p, float size)\n{\n    int x = int(floor(p.x / size));\n    int y = int(floor(p.y / size));\n    int z = int(floor(p.z / size));\n    if ((x + y + z) % 2 == 0)\n    {\n        return T(vec3(1.0, 1.0, 1.0), 0.0);\n    }\n    else\n    {\n        return T(vec3(1., 0.0, 0.0), 0.0);\n    }\n}\n\n// Compute texture \nT Color(in vec3 p,in vec3 n)\n{\n  // p : Point\n  // n : Normal\n    V vp= object(p);\n    if (vp.i==0){\n        vec3 color = vec3(0.3, 0.8, 0.2);\n        return TextureUniform(color);\n    }\n    else if (vp.i==1)\n    {\n        vec3 color = vec3(0.2, 0.0, 0.0);\n        return TextureUniform(color);\n    }\n    else if (vp.i==2)\n    {\n        float marbleDensity = marbleWithVeins(p, 2.0, 0.5, 5, 0.5);\n        return T(vec3(0.5 + 0.5 * marbleDensity), 0.0);\n    }\n    else if (vp.i==3)\n    {\n        return TextureCheckerboard(p, 0.8);\n    }\n    else if (vp.i==4)\n    {\n        vec3 rouilleColor = rouilleTexture(p);\n        return T(rouilleColor, 0.0);\n    }\n    else if (vp.i == 5)\n    {\n        return T(Voronoi(p), 1.);\n    }\n    \n    else if (vp.i==6)\n    {   \n        return WoodTexture(p);\n    }\n}\n\n// Shadowing\nfloat Shadow(vec3 p,vec3 n,vec3 l)\n{\n  // p : Point\n  // n : Normal\n  // l : Light direction\n    bool h;\n    int s;\n    float t = SphereTrace(p,l,100.0,h,s);\n    if (!h)\n    {\n     return 1.0;\n    }\n    return 0.0; \n}\n\n// Shading and lighting\nvec3 Shade(vec3 p, vec3 n, vec3 e)\n{\n  // p : Point\n  // n : Normal at point\n  // e : Eye direction\n     // Point light\n    const vec3 lp = vec3(5.0, 10.0, 25.0);\n    \n    // Light direction to point light\n    vec3 l = normalize(lp - p);\n\n    T tex=Color(p,n);\n\n    // Ambient color\n    vec3 ambient = 0.5*tex.c;\n        \n    // Shadow computation\n    float s = Shadow(p+0.01*n,n,l);\n\n// Phong diffuse\n    vec3 diffuse = 0.5  * clamp(dot(n, l),0.0,1.0) * tex.c;\n\n    // Specular\n    vec3 r = reflect(e,n);\n    vec3 specular = tex.s * pow(clamp(dot(r,l),0.0,1.0),28.0) * vec3(1.0,1.0,1.0);\n    vec3 c = ambient + s * (diffuse + specular);\n    return c;\n}\n\n// Picture in picture ------------------------------------------------------------------------------\n\n// Shading according to the number of steps in sphere tracing\nvec3 ShadeSteps(int n)\n{\n  // n : Number of steps\n   float t=float(n)/(float(Steps-1));\n   return 0.5+mix(vec3(0.05,0.05,0.5),vec3(0.65,0.39,0.65),t);\n}\n\n// Picture in picture\nvec2 Pip(in vec2 pixel, out bool pip)\n{\n  // pixel : Pixel\n  // pip : Boolean, true if pixel was in sub-picture zone\n    // Pixel coordinates\n    vec2 p = (-iResolution.xy + 2.0*pixel)/iResolution.y;\n   if (pip==true)\n   {    \n    const float fraction=1.0/4.0;\n    // Recompute pixel coordinates in sub-picture\n    if ((pixel.x<iResolution.x*fraction) && (pixel.y<iResolution.y*fraction))\n    {\n        p=(-iResolution.xy*fraction + 2.0*pixel)/(iResolution.y*fraction);\n        pip=true;\n    }\n       else\n       {\n           pip=false;\n       }\n   }\n   return p;\n}\n\n// Image\nvoid mainImage( out vec4 color, in vec2 pxy )\n{\n    // Picture in picture on\n    bool pip=true;\n    \n   // Pixel\n     vec2 pixel=Pip(pxy, pip);\n    \n    // Mouse\n    vec2 m=iMouse.xy/iResolution.xy;\n\n    // Camera\n    vec3 ro,rd;\n    Ray(m,pixel,ro,rd);\n\n  // Trace ray\n\n  // Hit and number of steps\n  bool hit;\n  int s;\n\n  float t = SphereTrace(ro, rd, 100.0,hit, s);\n  \n    // Position \n    vec3 pt = ro + t * rd;\n    \n  // Shade background\n  vec3 rgb = background(rd);\n\n  if (hit)\n  {\n    // Compute normal\n    vec3 n = ObjectNormal(pt);\n\n    // Shade object with light\n    rgb = Shade(pt, n, rd);\n  }\n\n  // Uncomment this line to shade image with false colors representing the number of steps\n  if (pip==true)\n  {\n      rgb = ShadeSteps(s); \n  }\n\n\n  color=vec4(rgb, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}