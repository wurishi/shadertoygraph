{"ver":"0.1","info":{"id":"3slfR4","date":"1587837551","viewed":494,"name":"Uctumi - Seed of Eucalyptus","username":"Kali","description":"My attempt to recreate a music video made in blender by Uctumi, a great chiptune musician and member of our demogroup LIA. \nYoutube video: https://www.youtube.com/watch?v=Riq1D7ngPi0\n","likes":14,"published":1,"flags":64,"usePreview":0,"tags":["raymarching","video","music"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Mt2GWD","filepath":"https://soundcloud.com/uctumi/seed-of-eucalyptus","previewfilepath":"https://soundcloud.com/uctumi/seed-of-eucalyptus","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float det=.005;\nconst float maxdist=13.;\nconst float pi=3.1459;\nconst vec4 blue=vec4(0.,0.3,1.,0.);\nconst vec4 cyan=vec4(.2,.7,1.5,1.);\nconst vec4 pink=vec4(1.,0.,1.,2.);\nconst vec4 yellow=vec4(1.,1.,0.,3.);\nconst vec4 green=vec4(0.,1.,0.,4.);\nconst vec4 white=vec4(.8, .8,.8,5.);\nfloat id1,id2,id3,id4;\nfloat gdist;\nfloat hitplane;\nfloat rotspeed;\n#define iTime (iChannelTime[0]+step(iChannelTime[0],119.5)*step(118.5,iChannelTime[0])*abs(.5-fract(iChannelTime[0]*2.)))\n\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nmat2 rot(float a) {\n\tfloat s=sin(a), c=cos(a);\n    return mat2(c,s,-s,c);\n}\n\n\nfloat eq(float a, float b) {\n\treturn step(abs(a-b),.001);\n}\n\nfloat box( vec3 p, vec3 c)\n{\n  vec3 q = abs(p) - c + .05;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - .05;\n}\n\nvec4 radialfold(vec3 p, float s, float o) {\n\tfloat id=floor(atan(p.x,p.z)/pi*s*.5+o+s*.5);\n\tp=vec3(abs(.5-fract(atan(p.x,p.z)/pi*s*.5+o)),p.y,length(p.xz));\n    return vec4(p,id);\n}\n\nfloat ring1(vec3 p) {\n\tvec4 pp=radialfold(p,32.,0.);\n    id1=0.;\n    id1+=yellow.a*eq(pp.a,0.);\n    id1+=yellow.a*eq(pp.a,6.);\n    id1+=yellow.a*eq(pp.a,23.);\n    id1+=pink.a*eq(pp.a,3.);\n    id1+=pink.a*eq(pp.a,15.);\n    id1+=pink.a*eq(pp.a,29.);\n    id1+=green.a*eq(pp.a,11.);\n    id1+=green.a*eq(pp.a,19.);\n    id1+=green.a*eq(pp.a,27.);\n    float d=box(pp.xyz-vec3(0.,0.,5.),vec3(.3));\n    return d;\n}\n\nfloat ring2(vec3 p) {\n\tvec4 pp=radialfold(p,16.,.25);\n    id2=0.;\n    id2+=cyan.a*eq(pp.a,2.);\n    id2+=cyan.a*eq(pp.a,7.);\n    id2+=cyan.a*eq(pp.a,10.);\n    id2+=cyan.a*eq(pp.a,14.);\n    float d=box(pp.xyz-vec3(0.,0.,5.),vec3(.3));\n    return d;\n}\n\nfloat ring3(vec3 p) {\n\tvec4 pp=radialfold(p,32.,0.);\n    id3=0.;\n    id3+=white.a*eq(pp.a,2.);\n    id3+=white.a*eq(pp.a,4.);\n    id3+=white.a*eq(pp.a,6.);\n    id3+=white.a*eq(pp.a,8.);\n    id3+=white.a*eq(pp.a,11.);\n    id3+=white.a*eq(pp.a,13.);\n    id3+=white.a*eq(pp.a,16.);\n    id3+=white.a*eq(pp.a,18.);\n    id3+=white.a*eq(pp.a,21.);\n    id3+=white.a*eq(pp.a,23.);\n    id3+=white.a*eq(pp.a,26.);\n    id3+=white.a*eq(pp.a,30.);\n    id3+=white.a*eq(pp.a,31.);\n    float d=box(pp.xyz-vec3(0.,0.,5.),vec3(.2,.35,.3));\n    return d;\n}\n\nfloat ring4(vec3 p) {\n\tvec4 pp=radialfold(p,18.,.2);\n    id4=0.;\n    id4+=pink.a*eq(pp.a,7.);\n    id4+=pink.a*eq(pp.a,13.);\n    id4+=pink.a*eq(pp.a,17.);\n    id4+=yellow.a*eq(pp.a,10.);\n    id4+=yellow.a*eq(pp.a,3.);\n    float d=box(pp.xyz-vec3(0.,0.,5.),vec3(.3));\n    return d;\n}\n\nvec3 getcolor(float id) {\n\tvec3 col=vec3(0.);\n    col+=blue.rgb*eq(id,blue.a);\n    col+=cyan.rgb*eq(id,cyan.a);\n    col+=pink.rgb*eq(id,pink.a);\n    col+=yellow.rgb*eq(id,yellow.a);\n    col+=green.rgb*eq(id,green.a);\n    col+=white.rgb*eq(id,white.a);\n\treturn col;\n}\n\nfloat tex(vec3 p) {\n    p=abs(.5-fract(p*.3));\n    for (int i=0; i<6; i++) {\n        p=abs(p)/(dot(p,p)+.1)-.8;\n    }\n    return abs(p.y)*.003;\n}\n\n\nfloat planes(vec3 p) {\n    float t=tex(p);\n    float d=p.y+t+.4;\n    d=min(d,-p.y+t+7.5);\n    return d;\n}\n\nvec3 rotscene(vec3 p) {\n\tp.xz*=rot(iTime*rotspeed);\n    return p;\n}\n\n\nvec4 de(vec3 p) {\n    p=rotscene(p);\n\tfloat r1=ring1(p);\n\tfloat r2=ring2(p+vec3(0.,-2.,0.));\n\tfloat r3=ring3(p+vec3(0.,-4.,0.));\n\tfloat r4=ring4(p+vec3(0.,-6.,0.));\n    float d=min(r1,min(r2,min(r3,r4)));\n    float pla=planes(p);\n    d=min(d,pla);\n    hitplane=step(pla,d);\n\tvec3 col=vec3(0.,0.,.5)*hitplane;\n    col+=getcolor(id1)*eq(d,r1);\n    col+=getcolor(id2)*eq(d,r2);\n    col+=getcolor(id3)*eq(d,r3);\n    col+=getcolor(id4)*eq(d,r4);\n    return vec4(col,d);\n}\n\nvec3 normal(vec3 p) {\n\tvec2 d=vec2(0.,.01);\n    return normalize(vec3(de(p+d.yxx).a,de(p+d.xyx).a,de(p+d.xxy).a)-de(p).a);\n}\n\n\n\nvec3 shade(vec3 p, vec3 dir, vec3 col) {\n    vec3 pr=rotscene(p);\n\tif (col!=blue.rgb && hitplane<.5) return col;\n    if (hitplane>.5) {\n    \tcol*=1.+smoothstep(1.,5.,length(p.xz))*(max(0.,sin(atan(pr.x,pr.z)*3.)));\n        col+=smoothstep(0.,5.,length(p.xz)-p.y)*.3;\n    }\n    vec3 n=normal(p);\n\tfloat amb=max(0.,dot(dir,-n))*.3;\n    vec3 ref=reflect(vec3(1.,0.,0.),-n);\n    float spe=pow(max(0.,dot(dir,-ref)),20.);\n    float dif=max(0.,dot(normalize(vec3(1.,.5,0.)),-n));\n    dif+=max(0.,dot(normalize(vec3(0.,-.5,-1.)),-n));\n    return (amb+dif)*col+spe*.3;\n}\n\n\nvec3 march(vec3 from, vec3 dir) {\n\tvec4 d;\n    float td=0.,ref=0.,std=0.;\n    vec3 glow=vec3(0.);\n    vec3 p=from, back=vec3(0.,0.,.1), col=back;\n    vec3 savecol=vec3(0.);\n    vec3 odir=dir;\n    for (int i=0; i<100; i++) {\n    \tp+=dir*d.a;\n        d=de(p);\n        if ((d.a<det && (hitplane<.5 || ref>0.)) || td>maxdist) break;\n        if (d.a<det && hitplane>.5) {\n\t\t\tvec3 n=normal(p);\n            savecol=mix(shade(p, dir, d.rgb),back,smoothstep(5.,8.,length(p.xz)));\n            dir=reflect(dir,n);\n            p+=dir*.1;\n            ref=.5;\n        }\n        td+=d.a;\n    }\n    if (d.a<det) {\n    \tp-=det*2.*dir;\n        col=shade(p, dir, d.rgb);\n    } else {\n        p=from+dir*maxdist;\n        p=rotscene(p);\n        p.y-=2.;\n    \tcol*=1.+pow(max(0.,dot(normalize(p),vec3(1.,0.,0.))),20.)*2.;\n    \tcol*=1.+pow(max(0.,dot(normalize(p),vec3(-1.,0.,0.))),20.)*2.;\n    }\n    col=mix(col,savecol,ref);\n    vec3 sp=p;\n    p=from; d.a=0.;\n    float gtd=0.;\n    float h=hash12(gl_FragCoord.xy)*.05;\n    for (int i=0; i<50; i++) {\n    \tp+=odir*(max(.15,d.a)+h);\n        d=de(p);\n        gtd+=d.a;\n        if (td<maxdist && distance(from,p)>distance(from,sp)+.5) break;\n        //if (length(p.xz)>6.) break;\n        if (d.a<1. && d.rgb!=blue.rgb && hitplane < .5) glow+=d.rgb*exp(-7.*d.a)*(1.2-length(d.rgb)*.2);\n    }\n    \n    float mus=pow(smoothstep(.0,.6,texture(iChannel0,vec2(.3)).r),3.);\n    \n    return col+glow*.3*mus;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv=(fragCoord-iResolution.xy*.5)/iResolution.y;\n    vec3 dir, from;\n    if (iTime < 32. || (iTime > 95.5 && iTime < 118.5) || (iTime > 150.)) {\n\t    rotspeed=.5;\n        uv.y+=.1;\n        from=vec3(0.,2.2+sin(iTime*.7)*2.2,-4.);\n        dir=normalize(vec3(uv,.7));\n        dir.yz*=rot(.05);\n    }\n    if ((iTime > 32. && iTime < 65.) || (iTime > 118.5 && iTime < 150.)) {\n\t    rotspeed=1.;\n        float s=sin(iTime*.7)*2.5;\n        from=vec3(0.,2.5+s,-6.3);\n        dir=normalize(vec3(uv,.7));\n        dir.yz*=rot(.05-(s+1.)*.1);\n    }\n    if (iTime > 65. && iTime < 95.5) {\n\t    rotspeed=-1.;\n\t    uv.y+=.1;\n        from=vec3(0.,0.2,-4.);\n        dir=normalize(vec3(uv,.7));\n        dir.yz*=rot(.1);\n    }\n\n\n    vec3 col=march(from, dir);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}