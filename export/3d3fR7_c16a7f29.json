{"ver":"0.1","info":{"id":"3d3fR7","date":"1604591951","viewed":1044,"name":"Quick and dirty tv static noise","username":"PelicanPolice","description":"I am learning how shaders work. If a similar effect can be achieved with less function calls, let me know!\nIt should last infinitely as the input gets looped. Also does not require any source.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["noise","tv","interference","not","analog","in","signal","lost","connection","plugged"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Free for any purpose, commercial or otherwise. \n// But do post here so I can see where it got used!\n// If using on shadertoy, do link to this project on yours :)\n\nfloat noise(vec2 pos, float evolve) {\n    \n    // Loop the evolution (over a very long period of time).\n    float e = fract((evolve*0.01));\n    \n    // Coordinates\n    float cx  = pos.x*e;\n    float cy  = pos.y*e;\n    \n    // Generate a \"random\" black or white value\n    return fract(23.0*fract(2.0/fract(fract(cx*2.4/cy*23.0+pow(abs(cy/22.4),3.3))*fract(cx*evolve/pow(abs(cy),0.050)))));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    // Increase this number to test performance\n    int intensity = 1;\n    \n    vec3 colour;\n    for (int i = 0; i < intensity; i++)\n        {\n        // Generate a black to white pixel\n        colour = vec3(noise(fragCoord,iTime));\n        }\n\t\n    // Output to screen\n    fragColor = vec4(colour,1.0);\n}","name":"Image","description":"","type":"image"}]}