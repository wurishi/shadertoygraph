{"ver":"0.1","info":{"id":"Ws3fR7","date":"1604593504","viewed":935,"name":"Ocean effect","username":"PelicanPolice","description":"It's just Jaybird's shader, with different colours, the ability to move the camera, and lots and lots of comments as I try to discover how it works so I can use it in my game.\n\nSee https://www.shadertoy.com/view/3d3yRj","likes":31,"published":1,"flags":0,"usePreview":0,"tags":["ray","refraction","water","light","ocean","ripple","ripple","caustic","realistic","pool"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Jaybird's Simple Water Caustic Pattern\n// https://www.shadertoy.com/view/3d3yRj\n// \n// Adapted from https://www.shadertoy.com/view/Ws23RD\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n\tvec2 p = (-iResolution.xy + 2.0*fragCoord) / iResolution.y;\n    \n    // Uncomment, and then set any settings value to either prevX/Y to preview it with the mouse\n    float prevX  = (iMouse.x/iResolution.x)*4.0-2.0;\n    float prevY  = (iMouse.y/iResolution.y)*4.0-2.0;\n    \n    // Settings\n    float invertY    = -1.0; // 1.0 = invert y axis (application), -1.0= don't invert (shadertoy)\n    float yaw        = -0.03;  // Rotate camera on z axis (like saying no with your head).\n    float pitch      = 0.6;  // Rotate camera like saying yes with your head\n    float roll       = 0.0;  // Rotate camera like putting your head to your shoulder\n    float height     = 2.0;  // Height of the room, BUT also changes the pitch downwards.\n    float fov        = 1.0;  // Basically zoom, comes with perspective distortion too. \n    float scale      = 8.0; // Size of the rays (also changes the speed)\n    float speed      = 0.16; // How quickly the rays dance\n    float brightness = 1.7;  // Smaller = brighter, more intense rays\n    float contrast   = 2.0;  // Difference between ray and darkness. Smaller = more grey.\n    float multiply   = 0.2;  // Alpha/transparency and colour intensity of final result\n    vec3  rayColour  = vec3(1.0,0.964,0.690); // rgb colour of rays\n    \n    // Move the camera\n    float offsetX    = -prevX*15.0;\n    float offsetY    = prevY*15.0;\n    \n    // Camera matrix complicated maths stuff\n    vec3 ww = normalize(invertY*vec3(yaw, height, pitch));\n    vec3 uu = normalize(cross(ww, vec3(roll, 1.0, 0.0)));\n    vec3 vv = normalize(cross(uu,ww));\n\tvec3 rd = p.x*uu + p.y*vv + fov*ww;\t// view ray\n    vec3 pos = -ww + rd*(ww.y/rd.y);\t// raytrace plane\n    pos.y = iTime*speed;\t\t\t\t// animate noise slice\n    pos *= scale;\t\t\t\t        // tiling frequency\n    \n    // Apply the offsets to camera position\n    pos.x += offsetX;\n    pos.z += offsetY;\n    \n    // Generate some noise\n    vec4 noise = snoise( pos );\n    \n    // Offset it and regenerate x2\n    pos -= 0.07*noise.xyz;\n    noise = snoise( pos );\n\n    pos -= 0.07*noise.xyz;\n    noise = snoise( pos );\n\n    // Calculate intensity of this pixel\n    float intensity = exp(noise.w*contrast - brightness);\n    \n    // Generate a lovely warm oceany gradient\n    vec4 c = vec4(234.0/255.0-(fragCoord.y/iResolution.y)*0.7,235.0/255.0-(fragCoord.y/iResolution.y)*0.4,166.0/255.0-(fragCoord.y/iResolution.y)*0.1,1.0);\n    \n    // Generate final rgba of this pixel\n\tfragColor = c+vec4(rayColour*multiply*intensity, intensity);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// 3D simplex noise adapted from https://www.shadertoy.com/view/Ws23RD\n// * Removed gradient normalization\n\nvec4 mod289(vec4 x)\n{\n    return x - floor(x / 289.0) * 289.0;\n}\n\nvec4 permute(vec4 x)\n{\n    return mod289((x * 34.0 + 1.0) * x);\n}\n\nvec4 snoise(vec3 v)\n{\n    const vec2 C = vec2(1.0 / 6.0, 1.0 / 3.0);\n\n    // First corner\n    vec3 i  = floor(v + dot(v, vec3(C.y)));\n    vec3 x0 = v   - i + dot(i, vec3(C.x));\n\n    // Other corners\n    vec3 g = step(x0.yzx, x0.xyz);\n    vec3 l = 1.0 - g;\n    vec3 i1 = min(g.xyz, l.zxy);\n    vec3 i2 = max(g.xyz, l.zxy);\n\n    vec3 x1 = x0 - i1 + C.x;\n    vec3 x2 = x0 - i2 + C.y;\n    vec3 x3 = x0 - 0.5;\n\n    // Permutations\n    vec4 p =\n      permute(permute(permute(i.z + vec4(0.0, i1.z, i2.z, 1.0))\n                            + i.y + vec4(0.0, i1.y, i2.y, 1.0))\n                            + i.x + vec4(0.0, i1.x, i2.x, 1.0));\n\n    // Gradients: 7x7 points over a square, mapped onto an octahedron.\n    // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n    vec4 j = p - 49.0 * floor(p / 49.0);  // mod(p,7*7)\n\n    vec4 x_ = floor(j / 7.0);\n    vec4 y_ = floor(j - 7.0 * x_); \n\n    vec4 x = (x_ * 2.0 + 0.5) / 7.0 - 1.0;\n    vec4 y = (y_ * 2.0 + 0.5) / 7.0 - 1.0;\n\n    vec4 h = 1.0 - abs(x) - abs(y);\n\n    vec4 b0 = vec4(x.xy, y.xy);\n    vec4 b1 = vec4(x.zw, y.zw);\n\n    vec4 s0 = floor(b0) * 2.0 + 1.0;\n    vec4 s1 = floor(b1) * 2.0 + 1.0;\n    vec4 sh = -step(h, vec4(0.0));\n\n    vec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;\n    vec4 a1 = b1.xzyw + s1.xzyw * sh.zzww;\n\n    vec3 g0 = vec3(a0.xy, h.x);\n    vec3 g1 = vec3(a0.zw, h.y);\n    vec3 g2 = vec3(a1.xy, h.z);\n    vec3 g3 = vec3(a1.zw, h.w);\n\n    // Compute noise and gradient at P\n    vec4 m = max(0.6 - vec4(dot(x0, x0), dot(x1, x1), dot(x2, x2), dot(x3, x3)), 0.0);\n    vec4 m2 = m * m;\n    vec4 m3 = m2 * m;\n    vec4 m4 = m2 * m2;\n    vec3 grad =\n      -6.0 * m3.x * x0 * dot(x0, g0) + m4.x * g0 +\n      -6.0 * m3.y * x1 * dot(x1, g1) + m4.y * g1 +\n      -6.0 * m3.z * x2 * dot(x2, g2) + m4.z * g2 +\n      -6.0 * m3.w * x3 * dot(x3, g3) + m4.w * g3;\n    vec4 px = vec4(dot(x0, g0), dot(x1, g1), dot(x2, g2), dot(x3, g3));\n    return 42.0 * vec4(grad, dot(m4, px));\n}\n","name":"Common","description":"","type":"common"}]}