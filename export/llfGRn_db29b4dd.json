{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"// Created by Marc Lepage in Dec 2014\n// by hacking up Inigo Quilez's raymarching demo:\n// https://www.shadertoy.com/view/Xds3zN\n\n#define M_PI 3.1415926535897932384626433832795\n\nfloat sdPlane( vec3 p )\n{\n    return p.y;\n}\n\nfloat udRoundBox( vec3 p, vec3 b, float r )\n{\n    return length(max(abs(p)-b, 0.0)) - r;\n}\n\n// h.x is radius, h.y is length\nfloat sdDrupelet( vec3 p, vec2 h)\n{\n    vec2 d = abs(vec2(length(p.xy),p.z)) - h;\n    return min(length(p-vec3(0.0, 0.0, h.y))-h.x, min(max(d.x,d.y),0.0) + length(max(d,0.0)));\n}\n\nvec2 opU( vec2 d1, vec2 d2 )\n{\n\treturn (d1.x<d2.x) ? d1 : d2;\n}\n\n// A B\n//     C\n// D E\n//     F\n//   G\nfloat sdLogo( vec3 p, float r)\n{\n    // TODO need to figure out the exact skew\n    // TODO need to figure out the exact vertical position of third column\n    // TODO need to center it better (it's off by half a drupelet sphere)\n\n    // Rotate by r radians\n    float c = cos(r);\n    float s = sin(r);\n\tfloat x = -(p.x*c + p.z*s);\n\tfloat z = -(p.x*s - p.z*c);\n    p.x = x;\n    p.z = z;\n        \n    // Skew\n    p.z -= p.y/8.0;\n\n    float d = sdDrupelet( p, vec2(0.1,0.1) ); // E\n    d = min(d, sdDrupelet( p-vec3(0.0,  0.3,  0.0), vec2(0.1,0.1) )); // B\n    d = min(d, sdDrupelet( p-vec3(0.0, -0.3,  0.0), vec2(0.1,0.1) )); // G\n    d = min(d, sdDrupelet( p-vec3(0.0,  0.3, -0.4), vec2(0.1,0.1) )); // A\n    d = min(d, sdDrupelet( p-vec3(0.0,  0.0, -0.4), vec2(0.1,0.1) )); // D\n    d = min(d, sdDrupelet( p-vec3(0.0,  0.125, 0.4), vec2(0.1,0.1) )); // C\n    d = min(d, sdDrupelet( p-vec3(0.0, -0.175, 0.4), vec2(0.1,0.1) )); // F\n    return d;\n}\n\nvec2 map( in vec3 pos )\n{\n    vec2 res = opU( vec2( sdPlane(     pos), 1.0 ),\n\t                vec2( udRoundBox(  pos-vec3( 0.0,2.0,0.0), vec3(1.0), 0.1 ), 2.0 ) );\n\n   \tres = opU( res, vec2( sdLogo(  pos-vec3(-1.1, 2.0, 0.0), 0.0), 4.0 ) );\n    \n   \tres = opU( res, vec2( sdLogo(  pos-vec3( 1.1, 2.0, 0.0), M_PI), 4.0 ) );\n\n    res = opU( res, vec2( sdLogo(  pos-vec3( 0.0, 2.0, -1.1), M_PI/2.0), 4.0 ) );\n\n    res = opU( res, vec2( sdLogo(  pos-vec3( 0.0, 2.0, 1.1), -M_PI/2.0), 4.0 ) );\n\n    return res;\n}\n\nvec2 castRay( in vec3 ro, in vec3 rd )\n{\n    float tmin = 1.0;\n    float tmax = 20.0;\n    \n\tfloat precis = 0.0001;\n    float t = tmin;\n    float m = -1.0;\n    for( int i=0; i<50; i++ )\n    {\n\t    vec2 res = map( ro+rd*t );\n        if( res.x<precis || t>tmax ) break;\n        t += res.x;\n\t    m = res.y;\n    }\n\n    if( t>tmax ) m=-1.0;\n    return vec2( t, m );\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n\tvec3 eps = vec3( 0.001, 0.0, 0.0 );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\nfloat softshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<16; i++ )\n    {\n\t\tfloat h = map( ro + rd*t ).x;\n        res = min( res, 8.0*h/t );\n        t += clamp( h, 0.02, 0.10 );\n        if( h<0.001 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\nvec3 render( in vec3 ro, in vec3 rd )\n{        \n    vec3 col = vec3(0.9, 0.9, 0.9);\n    vec2 res = castRay(ro,rd);\n    float t = res.x;\n\tfloat m = res.y;\n    if( m>-0.5 )\n    {\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal( pos );\n        vec3 ref = reflect( rd, nor );\n        \n        // material        \n\t\tcol = 0.45 + 0.3*sin( vec3(0.5,0.08,0.10)*(m-1.0) );\n\t\t\n        if( m<1.5 )\n        {\n            \n            float f = mod( floor(5.0*pos.z) + floor(5.0*pos.x), 2.0);\n            col = 0.4 + 0.1*f*vec3(1.0);\n        }\n        else if (m == 2.0)\n        {\n            // box\n            col = vec3(0.05, 0.05, 0.05);\n        }\n        else if (m == 4.0)\n        {\n            // drupelet\n            col = vec3(0.75, 0.75, 0.75);\n        }\n\n        // lighting        \n        float occ = calcAO( pos, nor );\n\t\tvec3  lig = normalize( vec3(-0.6, 0.7, -0.5) );\n\t\tfloat amb = clamp( 0.5+0.5*nor.y, 0.0, 1.0 );\n        float dif = clamp( dot( nor, lig ), 0.0, 1.0 );\n        float bac = clamp( dot( nor, normalize(vec3(-lig.x,0.0,-lig.z))), 0.0, 1.0 )*clamp( 1.0-pos.y,0.0,1.0);\n        float dom = smoothstep( -0.1, 0.1, ref.y );\n        float fre = pow( clamp(1.0+dot(nor,rd),0.0,1.0), 2.0 );\n\t\tfloat spe = pow(clamp( dot( ref, lig ), 0.0, 1.0 ),16.0);\n        \n        dif *= softshadow( pos, lig, 0.02, 2.5 );\n        dom *= softshadow( pos, ref, 0.02, 2.5 );\n\n\t\tvec3 brdf = vec3(0.0);\n        brdf += 1.20*dif*vec3(1.00,0.90,0.60);\n\t\tbrdf += 1.20*spe*vec3(1.00,0.90,0.60)*dif;\n        brdf += 0.30*amb*vec3(0.50,0.70,1.00)*occ;\n        brdf += 0.40*dom*vec3(0.50,0.70,1.00)*occ;\n        brdf += 0.30*bac*vec3(0.25,0.25,0.25)*occ;\n        brdf += 0.40*fre*vec3(1.00,1.00,1.00)*occ;\n\t\tbrdf += 0.02;\n\t\tcol = col*brdf;\n\n    \tcol = mix( col, vec3(0.8,0.9,1.0), 1.0-exp( -0.0005*t*t ) );\n    }\n\n\treturn vec3( clamp(col,0.0,1.0) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy/iResolution.xy;\n    vec2 p = -1.0+2.0*q;\n\tp.x *= iResolution.x/iResolution.y;\n    vec2 mo = iMouse.xy/iResolution.xy;\n\t\t \n\tfloat time = 40.0 + iTime;\n\n\t// camera\t\n\tvec3 ro = vec3( -0.4+3.2*cos(0.1*time + 6.0*mo.x), 2.0 + 2.0*mo.y, 0.5 + 3.2*sin(0.1*time + 6.0*mo.x) );\n\tvec3 ta = vec3( 0.0, 1.5, 0.0 );\n\t\n\t// camera tx\n\tvec3 cw = normalize( ta-ro );\n\tvec3 cp = vec3( 0.0, 1.0, 0.0 );\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n\tvec3 rd = normalize( p.x*cu + p.y*cv + 2.5*cw );\n\n    vec3 col = render( ro, rd );\n\n    // gamma\n\tcol = pow( col, vec3(0.4545) );\n\n    fragColor=vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"llfGRn","date":"1417739635","viewed":213,"name":"BlackBerry Logo","username":"mlepage","description":"Playing with raymarching for the first time. I altered Inigo Quilez's raymarching primitives example to produce a cube of BlackBerry logos.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["procedural"],"hasliked":0,"parentid":"","parentname":""}}