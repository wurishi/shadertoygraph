{"ver":"0.1","info":{"id":"4ltBW7","date":"1539880425","viewed":145,"name":"Ahziel - They see me rollin'","username":"Ahziel","description":"Journey through the \"Book of shader\" - Shape / Matrix\nI do shaders to learn and have fun. If you have any advice, don't hesitate to tell me ! ","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["circle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n\nfloat circle(in vec2 pos, in vec2 uv, in float radius)\n{\n    float dist = distance(pos,uv);\n    return 1.0 - smoothstep(radius - 0.01,radius, dist);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 aspect = iResolution.xy / min(iResolution.x, iResolution.y);\n    uv *= aspect;\n    \n    vec3 background = vec3(0.0, 0.0, 0.0);\n    vec2 center = vec2(0.5) * aspect;\n    float radius = 0.5;\n    const float number = 10.;\n    float speed = 0.5;\n\n    // Time varying pixel color\n    vec3 col = background;\n    \n    for(float i = 0.0; i < number; i++)\n    {\n        float ste = 1.0/number;\n        float turn = mod(iTime * speed, 2.0) - 1.0;\n        \n        vec3 circleColor = vec3(0., ste * i, ste * i);\n        vec2 circleCenter = center - vec2(0.0,i * (ste/2.));\n        float circleRadius = radius - i * (ste/2.);\n        \n        circleCenter = circleCenter - center;\n        circleCenter = rotate2d(turn*PI ) * circleCenter;\n        circleCenter = circleCenter + center;\n        \n        col = mix(col,circleColor,circle(circleCenter,uv,circleRadius));\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}