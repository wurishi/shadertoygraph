{"ver":"0.1","info":{"id":"tsByDh","date":"1586529535","viewed":121,"name":"ALTERNATE","username":"os0450","description":"dailycodingchallenge. Day 9: ALTERNATE.","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["dailycodingchallenge"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 rot(float a) {\n    float c = cos(a), s = sin(a);\n    return mat2(c, s, -s, c);\n}\n\nfloat circle(vec2 p, float r, float w) {\n    return abs(length(p)-r)-w;\n}\n\nfloat half_pi = acos(0.);\n\nvec2 dist(vec2 p, float t) {\n    float d;\n    float w = 0.004;\n\n    vec2 q = p - vec2(-0.75, -0.5);\n    float d1 = min(\n        circle(q, 0.3, w),\n        circle(q, 0.4, w));\n    \n    float a = -(t-half_pi);\n    vec2 q1 = q-0.35*vec2(cos(a), sin(a));\n    float d2 = circle(q1, 0.04, 0.04);\n    d = min(d1, d2);\n\n    vec2 q2 = q - vec2(0., 1.0 + cos(t)*0.4);\n    float d3 = circle(q2, 0.04, 0.04);\n    d = min(d, d3);\n\n    vec2 q3 = q2;\n    float d4 = abs(dot(q3, normalize(q1-q2)*rot(half_pi)));\n    d = min(d, d4);\n\n    float d5 = abs(dot(q, normalize(q-q1)*rot(half_pi)));\n    d = min(d, d5);\n\n    float d6 = circle(q, 0.04, 0.04);\n    d = min(d, d6);\n\n    float s1 = dot(normalize(q1-q2)*rot(half_pi), q2+vec2(-0.005, 0.));\n    float s2 = dot(normalize(q-q1)*rot(half_pi), q+vec2(-0.005, 0.));\n    float s = ((s1 > 0.) && (s2 > 0.)) || ((s1 < 0.) && (s2 < 0.)) ? 1. : -1.;\n\n    if(s > 0.) {\n    \tfloat d7 = abs(sin( q.x*9.+t+half_pi)*0.4 - q.y + 1.0) - w*2.;\n    \td = min(d, d7);\n    } else {\n \t   float d8 = circle(mod((p+vec2(t*0.3, 0.))+0.1, 0.2)-0.1, 0.005, 0.005);\n    \td = min(d, d8);\n    }\n    \n    return vec2(d, s);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (fragCoord.xy*2.0 - iResolution.xy)/min(iResolution.x, iResolution.y);\n    vec4 col = vec4(0.);\n\n    float l = 0.2;\n\n    vec2 m = dist(p, iTime*3.2);\n    float d = m.x;\n    float r = m.y;\n    float e = 0.1;\n\n    if(r > 0.0) {\n      col = vec4(smoothstep(0.02, 0.0, d)*0.8+0.1);\n    } else {\n      col = vec4(smoothstep(0.0, 0.02, d)*0.8+0.1);\n    }\n\n    fragColor = vec4(col.xyz, 1.);\n}\n","name":"Image","description":"","type":"image"}]}