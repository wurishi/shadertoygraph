{"ver":"0.1","info":{"id":"sd23zK","date":"1676264364","viewed":103,"name":"more pyramids with fast normals","username":"nbardy","description":"Exact distance to a pyramid. Beware this computes the correct euclidean distance, not a just a bound based on half spaces. The base of the pyramid is 1x1, and the height is variable.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["3d","sdf","distance","piramid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of \"Pyramid - distance\" by iq. https://shadertoy.com/view/Ws3SDl\n// 2021-04-06 05:30:46\n\n// The MIT License\n// Copyright Â© 2019 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// EXACT distance to a pyramid. This shader computes the exact euclidean\n// distances (not a bound based on half spaces). This allows to do\n// operations on the shape such as rounding (see https://iquilezles.org/articles/distfunctions)\n// while other implementations don't. Unfortunately the maths require us to do\n// one square root sometimes to get the exact distance.\n\n// List of other 3D SDFs: https://www.shadertoy.com/playlist/43cXRl\n//\n// and https://iquilezles.org/articles/distfunctions\n\nfloat sdTriangle( in vec2 p, in vec2 p0, in vec2 p1, in vec2 p2 )\n{\n\tvec2 e0 = p1 - p0;\n\tvec2 e1 = p2 - p1;\n\tvec2 e2 = p0 - p2;\n\n\tvec2 v0 = p - p0;\n\tvec2 v1 = p - p1;\n\tvec2 v2 = p - p2;\n\n\tvec2 pq0 = v0 - e0*clamp( dot(v0,e0)/dot(e0,e0), 0.0, 1.0 );\n\tvec2 pq1 = v1 - e1*clamp( dot(v1,e1)/dot(e1,e1), 0.0, 1.0 );\n\tvec2 pq2 = v2 - e2*clamp( dot(v2,e2)/dot(e2,e2), 0.0, 1.0 );\n    \n    float s = e0.x*e2.y - e0.y*e2.x;\n    vec2 d = min( min( vec2( dot( pq0, pq0 ), s*(v0.x*e0.y-v0.y*e0.x) ),\n                       vec2( dot( pq1, pq1 ), s*(v1.x*e1.y-v1.y*e1.x) )),\n                       vec2( dot( pq2, pq2 ), s*(v2.x*e2.y-v2.y*e2.x) ));\n\n\treturn -sqrt(d.x)*sign(d.y);\n}\n\nvec3 fold(vec3 p) { \n    return vec3(abs(p.x),p.y, abs(p.z));\n}\n\nfloat sdPyramid(in vec3 p, float h) {\n    vec3 top = vec3(0.0);   \n    //base if above the point\n    vec3 base = top + vec3(0.0,h,0.0);\n    float epsilon = 0.0001;\n    vec3 corner ;\n    vec3 cornerx;\n    vec3 cornerz;\n    \n    float final = 100.0;\n    p = fold(p);\n\n        corner = vec3(base.x + h/2.0, base.y, base.z + h/2.0);\n        cornerx = vec3(base.x - h/2.0, base.y, base.z + h/2.0);\n        cornerz = vec3(base.x + h/2.0, base.y, base.z - h/2.0);\n        float d1 = sdTriangle(p.xy, top.xy, cornerx.xy, corner.xy);\n        float d2 = sdTriangle(p.zy, top.zy, cornerz.zy, corner.zy);\n        float d = max(d1, d2);\n        \n        return d;\n\n}\n float D = 5.0;\n// signed distance to a pyramid of base 1x1 and height h\nfloat sdSerp( in vec3 p, in float h )\n{\n    vec3 top = vec3(0.0);   \n    //base if above the point\n    vec3 base = top + vec3(0.0,h,0.0);\n    float epsilon = 0.0001;\n    vec3 corner ;\n    vec3 cornerx;\n    vec3 cornerz;\n    \n    float final = 100.0;\n    p = fold(p);\n    for(float i = 0.0;  i < D; i++) {\n        float h2 = h/2.0 + 0.;\n        corner = vec3(base.x + h2, base.y, base.z + h2);\n        cornerx = vec3(base.x - h2, base.y, base.z + h2);\n        cornerz = vec3(base.x + h2, base.y, base.z - h2);\n        float d1 = sdTriangle(p.xy, top.xy, cornerx.xy, corner.xy);\n        float d2 = sdTriangle(p.zy, top.zy, cornerz.zy, corner.zy);\n        float d = max(d1, d2);\n        \n        if( d > epsilon) { return d;}\n        \n        float topd = length(p-top);\n        float cornerd = length(p-corner);\n        \n        \n        // TODO matmin instead of if\n        if( topd < cornerd) {\n           top = top;\n           h /= 2.0;\n           base = top + vec3(0.0,h,0.0);\n        } else {\n           h /= 2.0;\n           top = top + vec3(h/2.0, h, h/2.0);\n           base = top + vec3(0.0,h,0.0);\n           p = fold(p - top) + top;\n        }\n        \n        final = min(final,d);\n    }\n    \n    return final;\n}\n\n// signed distance to a pyramid of base 1x1 and height h\nfloat sdSerpInv( in vec3 p, in float h )\n{\n    vec3 top = vec3(0.0);   \n    //base if above the point\n    vec3 base = top + vec3(0.0,h,0.0);\n    float epsilon = 0.0001;\n    vec3 corner ;\n    vec3 cornerx;\n    vec3 cornerz;\n    \n    float final = 100.0;\n   \n    p = fold(p);\n    for(float i = 0.0;  i < D; i++) {\n        float h2 = h/2.0 + 0.;\n        float h4 = h2/2.0;\n        \n        corner = vec3(base.x + h2, base.y, base.z + h2);\n        vec3 base2 = base - vec3(0.,h2,0.);\n        \n        vec3 midcorner = vec3(base2.x + h4, base2.y, base2.z + h4);\n        cornerx = vec3(base2.x - h4, base2.y, base2.z + h4);\n        cornerz = vec3(base2.x + h4, base2.y, base2.z - h4);\n        float d1 = sdTriangle(p.xy, base.xy, cornerx.xy, midcorner.xy);\n        float d2 = sdTriangle(p.zy, base.zy, cornerz.zy, midcorner.zy);\n        float d = max(d1, d2);\n        \n        if( d < epsilon) { return d;}\n        \n        float topd = length(p-top);\n        float cornerd = length(p-corner);\n        \n        corner = vec3(base.x + h2, base.y, base.z + h2);\n        // TODO matmin instead of if\n        if( topd < cornerd) {\n           top = top;\n           h /= 2.0;\n           base = top + vec3(0.0,h,0.0);\n        } else {\n           h /= 2.0;\n           top = top + vec3(h/2.0, h, h/2.0);\n           base = top + vec3(0.0,h,0.0);\n           p = fold(p - top) + top;\n        }\n        \n        final = min(final,d);\n    }\n    \n    return final;\n}\n\n\n\nfloat map( in vec3 pos )\n{\n    vec3 p = pos;\n    float h = 1.0;\n    \n    float d;\n    d = sdSerp(pos + vec3(0.,-0.2,0.), h);\n    float sd = sdSerpInv(p + vec3(0., 0.8,0.), h);\n\n    return min(sd,d);\n}\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal( in vec3 pos )\n{\n    vec2 e = vec2(1.0,-1.0)*0.5773;\n    const float eps = 0.001;\n    return normalize( e.xyy*map( pos + e.xyy*eps ) + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx*eps ) + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy*eps ) + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx*eps ) );\n}\n    \n#define AA 1\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n     // camera movement\t\n\tfloat an = 0.5*iTime;\n\tvec3 ro = vec3( 3.0*cos(an), 1.2, 3.0*sin(an) );\n    vec3 ta = vec3( 0.0, 0.5, 0.0 );\n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\n    \n    \n    vec3 tot = vec3(0.0);\n    \n    #if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord+o))/iResolution.y;\n        #else    \n        vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n        #endif\n\n\t    // create view ray\n        vec3 rd = normalize( p.x*uu + p.y*vv + 1.8*ww );\n\n        // raymarch\n        const float tmax = 60.0;\n        float t = 0.0;\n        for( int i=0; i<1024; i++ )\n        {\n            vec3 pos = ro + t*rd;\n            float h = map(pos);\n            if( h<0.0001 || t>tmax ) break;\n            t += h;\n        }\n        \n    \n        // shading/lighting\t\n        vec3 col = vec3(0.0);\n        if( t<tmax )\n        {\n            vec3 pos = ro + t*rd;\n            vec3 nor = calcNormal(pos);\n            float dif = clamp( dot(nor,vec3(0.7,0.6,0.4)), 0.0, 1.0 );\n            float amb = 0.5 + 0.5*dot(nor,vec3(0.0,0.8,0.6));\n            col = vec3(0.2,0.3,0.4)*amb + vec3(0.8,0.7,0.5)*dif;\n            col = nor;\n        }\n\n        // gamma        \n        col = sqrt( col );\n        col = \n\t    tot += col;\n    #if AA>1\n    }\n    tot /= float(AA*AA);\n    #endif\n\n\tfragColor = vec4( tot, 1.0 );\n}","name":"Image","description":"","type":"image"}]}