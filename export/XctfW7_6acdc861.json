{"ver":"0.1","info":{"id":"XctfW7","date":"1733177357","viewed":53,"name":"Christmas Tree SDF","username":"Circled123","description":"Christmas tree using signed distance functions","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["christmas","sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float isoscelesTriangleSDF(in vec2 p, in vec2 q)\n{\n    p.x = abs(p.x);\n    vec2 a = p - q*clamp( dot(p,q)/dot(q,q), 0.0, 1.0 );\n    vec2 b = p - q*vec2( clamp( p.x/q.x, 0.0, 1.0 ), 1.0 );\n    float s = -sign( q.y );\n    vec2 d = min( vec2( dot(a,a), s*(p.x*q.y-p.y*q.x) ),\n                  vec2( dot(b,b), s*(p.y-q.y)  ));\n    return -sqrt(d.x)*sign(d.y);\n}\n\nfloat isosceles(in vec2 samplePos, in vec2 pos, in vec2 dimensions)\n{\n    return isoscelesTriangleSDF(samplePos - pos, dimensions) - 0.05;\n}\n\nfloat treeSDF(in vec2 samplePos, in vec2 pos, in float spacing, in vec2 triangleDimensions)\n{\n    float sdf = isosceles(samplePos, pos, triangleDimensions);\n    int i = 1;\n    for (int i = 1; i < 4; i++)\n    {\n        sdf = min(isosceles(samplePos, pos + vec2(0.0, float(i) * spacing), triangleDimensions), sdf);\n    }\n    return sdf;\n}\n\nfloat tree(in vec2 samplePos, in vec2 pos)\n{\n    float treeSDF = treeSDF(samplePos, pos, 0.25, vec2(0.3, -0.5));\n    treeSDF = clamp(treeSDF, -1.0, 1.0);\n    if(treeSDF < 0.0)\n    {\n        treeSDF = 1.0 - abs(treeSDF);\n        treeSDF = pow(treeSDF, 5.0);\n    }\n    else\n    {\n        treeSDF = 1.0 - treeSDF;\n        treeSDF = pow(treeSDF, 15.0);\n    }\n    return treeSDF;\n}\n\nfloat circleSDF(in vec2 samplePos, in vec2 pos, in float radius)\n{\n    float sdf = distance(samplePos, pos) - radius;\n    return sdf;\n}\n\nfloat snow(in vec2 samplePos, in float xPos, in float time)\n{\n    vec2 pos = vec2(xPos, (fract(-time / 4.0) * 4.0 - 2.0));\n    float snowSDF = circleSDF(samplePos, pos, 0.0);\n    snowSDF = clamp(snowSDF, 0.0, 1.0);\n    snowSDF = 1.0 - snowSDF;\n    snowSDF = pow(snowSDF, 15.0);\n    return snowSDF;\n}\n\nfloat decoration(in vec2 samplePos, in vec2 pos, in float time)\n{\n    float sdf = circleSDF(samplePos, pos, 0.05);\n    sdf = clamp(sdf, 0.0, 1.0);\n    sdf = 1.0 - sdf;\n    sdf = pow(sdf, 15.0);\n    sdf *= 1.25;\n    sdf *= 0.5 + abs(sin(time)) / 2.0;\n    return sdf;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0, 0.0, 0.05, 0.0);\n\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5;\n    vec2 correctedUV = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    \n    float snow0 = snow(correctedUV, -0.47, iTime * 0.4);\n    fragColor.rgb += snow0;\n    float snow1 = snow(correctedUV, 1.1, iTime * 0.4 + 1.2);\n    fragColor.rgb += snow1;\n    float snow2 = snow(correctedUV, -0.85, iTime * 0.4 + 2.8);\n    fragColor.rgb += snow2;    \n    float snow3 = snow(correctedUV, -1.32, iTime * 0.4 + 0.3);\n    fragColor.rgb += snow3;    \n    float snow4 = snow(correctedUV, -0.78, iTime * 0.4 + 1.7);\n    fragColor.rgb += snow4;\n    float snow5 = snow(correctedUV, 1.65, iTime * 0.4 + 2.18);\n    fragColor.rgb += snow5;\n    float snow6 = snow(correctedUV, 0.65, iTime * 0.4 + 0.73);\n    fragColor.rgb += snow6;\n    float snow7 = snow(correctedUV, 1.25, iTime * 0.4 + 2.4);\n    fragColor.rgb += snow7;\n    \n    float tree = tree(correctedUV, vec2(0.0, 0.0));\n    fragColor.g += tree;\n    \n    float decoration0 = decoration(correctedUV, vec2(0.1, 0.3), iTime);\n    fragColor.g -= decoration0 / 3.0;\n    fragColor.r += decoration0;\n    float decoration1 = decoration(correctedUV, vec2(-0.05, 0.7), iTime + 0.3);\n    fragColor.g -= decoration1 / 3.0;\n    fragColor.b += decoration1;\n    float decoration2 = decoration(correctedUV, vec2(-0.13, -0.05), iTime +0.74);\n    fragColor.g -= decoration2 / 3.0;\n    fragColor.b += decoration2;\n    \n}\n\n\n\n\n\n","name":"Image","description":"","type":"image"}]}