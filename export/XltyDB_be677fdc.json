{"ver":"0.1","info":{"id":"XltyDB","date":"1533914175","viewed":78,"name":"RMK2018003","username":"Morendil","description":"ray","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["ray"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat scene(vec3 p) {\n    float twists = sin(iTime/11.)*2.;\n    float c = cos(twists*p.y);\n    float s = sin(twists*p.y);\n    mat2  m = mat2(c,-s,s,c);\n    vec3  q = vec3(m*p.xz,p.y);\n    \n    float d1 = sdSphere(p, 1.1);\n    float d2 = sdBox(q, vec3(.6+cos(iTime)*.2));\n    return smin(d1,d2, .2);\n}\n\nvec3 normal(vec3 where) {\n    vec3 xe = vec3(0.001,0,0);\n    vec3 ye = vec3(0,0.001,0);\n    vec3 ze = vec3(0,0,0.001);\n    return normalize(\n        vec3(scene(where+xe)-scene(where-xe),\n             scene(where+ye)-scene(where-ye),\n             scene(where+ze)-scene(where-ze)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord/iResolution.xy) - .5;\n    uv.x *= iResolution.x/iResolution.y;\n\n    float focal = 10.;\n    vec3 camera = vec3(20.+sin(iTime)*10.,20.,20);\n    vec3 lookat = vec3(0);\n    vec3 camdir = normalize(lookat-camera);\n    vec3 xvec = cross(vec3(0,1,0),-camdir);\n    vec3 yvec = cross(-camdir,xvec);\n    vec3 projection = camera+focal*camdir+xvec*uv.x+yvec*uv.y;\n\n    vec3 light1 = vec3(5.+cos(iTime),5,-5);\n    vec3 light2 = vec3(-cos(iTime*4.)*.1,-5.,0);\n    \n    vec3 raydir = normalize(projection-camera);\n\n    vec3 col = vec3(0);\n    \n    int steps = 32;\n    float march = 0.;\n    for (int i=0; i<steps; i++) {\n        vec3 raytip = camera + march * raydir;\n        float dist = scene(raytip);\n        if (dist < 0.001) {\n            vec3 normal = normal(raytip);\n            vec3 incident1 = normalize(raytip-light1);\n            vec3 incident2 = normalize(raytip-light2);\n            float diffuse = dot(incident1,normal)*dot(incident2,normal);\n            vec3 reflected = reflect(-incident2,normal);\n            float spec = dot(reflected,-raydir);\n            col = vec3(0,diffuse+.2,spec);\n            break;\n        }\n        march += dist;\n    }\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}