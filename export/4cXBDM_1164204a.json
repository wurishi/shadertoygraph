{"ver":"0.1","info":{"id":"4cXBDM","date":"1723826721","viewed":28,"name":"Dog__Vision","username":"jeanclaude","description":"Try to simulate dog vision.\n-colors\n-Flickering\n-Blur\n-Grayscale","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["dog","vision"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n\nconst float BLUR_BASE = 1.;\nconst float BLUR_INTENSITY = 0.1;\nconst float LEVELS = 40.;\nconst float FLICKER_SPEED = 10.;\n\n\nfloat Mask(float pos1, vec2 uv) {\n    float color = 0.0;\n    pos1 /= iResolution.x;\n    if(pos1<uv.x) {\n    \tcolor=1.0;\n    \t}\n    return color;\n}\n\n\nvec3 dogProcess(vec3 source){\n\tfloat r = source.r;\n\tfloat g = source.g;\n\tfloat b = source.b;\n\n\tfloat nG = .5 * ( r + g );\n\tfloat nR = nG;\n\tfloat nB = b;\n\n\treturn vec3(nG, nR, nB);\n\t}\n    \nvec2 blurUV(vec2 uv, int step){\n\tvec2 blurredUV = uv;\n\tfor(int n=0; n<step; ++n){\n\t\tvec2 blurredUV1 = texture(iChannel0,uv * BLUR_BASE * float(step)).rg * (BLUR_INTENSITY/float(step));\n\t\tvec2 blurredUV2 = texture(iChannel0,uv * BLUR_BASE * float(step) + 0.005).rg * (BLUR_INTENSITY/float(step));\n\t\tblurredUV += mix(blurredUV1, blurredUV2, mod(iTime/60.,1.));\n\t\t}\n\n\treturn blurredUV;\n\t}\n    \n\nvec3 quantizeColor(vec3 color){\n\t\tcolor.r = floor(color.r * LEVELS) / LEVELS;\n\t\tcolor.g = floor(color.g * LEVELS) / LEVELS;\n\t\tcolor.b = floor(color.b * LEVELS) / LEVELS;\n\t\t\n\t\treturn color;\n\t}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 camera = texture(iChannel1, uv).rgb;\n    \n    float dist = length(uv - vec2(0.5, 0.5));\n    \n    vec2 blurredUV = uv;\n    \n    float peripheralSharpness = smoothstep(0.2, 0.8, dist);\n    blurredUV = mix(blurredUV, uv, peripheralSharpness);\n    \n    float depthBlur = smoothstep(0.2, 0.5, dist);\n    blurredUV = mix(blurredUV, blurUV(uv, 5 + int(depthBlur * 10.0)), depthBlur);\n    \n\n    \n    vec3 dogCamera = texture(iChannel1, blurredUV).rgb;\n    float flicker = 0.98 + 0.02 * sin(iTime * FLICKER_SPEED);\n\tvec3 dogView = dogProcess(dogCamera) * flicker;\n    dogView = quantizeColor(dogView);\n    \n    float contrastFactor = 1.0 + 0.5 * smoothstep(0.3, 0.8, dist);\n    dogView = mix(vec3(0.5), dogView, contrastFactor);\n\n\n    vec3 enhancedLowLight = mix(dogView, dogView * 1.2, smoothstep(0.0, 0.3, length(dogView)));\n\n\n    \n    vec3 color = vec3(0.0);\n\tfloat mask = Mask(iMouse.x, uv);\n    \n    if(iTime<1.){\n        mask = Mask(.5 * iResolution.x, uv);\n    }\n    \n    color += mask * camera;\n\tcolor += (1.-mask) * enhancedLowLight;\n        \n\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}