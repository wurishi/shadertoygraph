{"ver":"0.1","info":{"id":"ctKBWc","date":"1702570347","viewed":58,"name":"GLSL dFdx and dFdy","username":"playbyan1453","description":"Hardware derivative seems lower quality but better than computing 4 noise at different offsets just for the slope.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["derivative","dfdx","dfxy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Gradient noise by iq : https://www.shadertoy.com/view/Xsl3Dl\nvec3 hash(vec3 p) {\n\tp = vec3(dot(p, vec3(127.1,311.7, 74.7)),\n\t\t\t dot(p, vec3(269.5,183.3,246.1)),\n\t\t\t dot(p, vec3(113.5,271.9,124.6)));\n\n\treturn fract(sin(p)*43758.5453123)*2.0-1.0;\n}\n\nfloat noise(vec3 p) {\n    vec3 i = floor(p);\n    vec3 f = fract(p);\n\n    vec3 u = f*f*f*(f*(f*6.0-15.0)+10.0); \n\n    return mix(mix(mix(dot(hash(i + vec3(0, 0, 0)), f - vec3(0, 0, 0)), \n                       dot(hash(i + vec3(1, 0, 0)), f - vec3(1, 0, 0)), u.x),\n                   mix(dot(hash(i + vec3(0, 1, 0)), f - vec3(0, 1, 0)), \n                       dot(hash(i + vec3(1, 1, 0)), f - vec3(1, 1, 0)), u.x), u.y),\n               mix(mix(dot(hash(i + vec3(0, 0, 1)), f - vec3(0, 0, 1)), \n                       dot(hash(i + vec3(1, 0, 1)), f - vec3(1, 0, 1)), u.x),\n                   mix(dot(hash(i + vec3(0, 1, 1)), f - vec3(0, 1, 1)), \n                       dot(hash(i + vec3(1, 1, 1)), f - vec3(1, 1, 1)), u.x), u.y), u.z);\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n    float cd = 1.0 / max(iResolution.x, iResolution.y);\n    vec2 uv = (2.0 * fragCoord - iResolution.xy) * cd;\n    \n    vec2 res;\n    \n    if(fragCoord.x > iMouse.x) {\n        // Derivative using hardware\n        float ns = noise(vec3(uv * 5.0, iTime));\n        res = vec2(dFdx(ns), dFdy(ns));\n    } else {\n        // Better quality but slower\n        float ns0 = noise(vec3((uv + vec2( cd,  0)) * 5.0, iTime));\n        float ns1 = noise(vec3((uv + vec2(-cd,  0)) * 5.0, iTime));\n        float ns2 = noise(vec3((uv + vec2(  0, cd)) * 5.0, iTime));\n        float ns3 = noise(vec3((uv + vec2(  0,-cd)) * 5.0, iTime));\n        res = vec2(ns0 - ns1, ns2 - ns3);\n    }\n    float split = smoothstep(1.0-cd, 1.0+cd, abs(fragCoord.x - iMouse.x));\n    \n    fragColor = vec4(normalize(res) * split, 0.0, 1.0);\n}","name":"Image","description":"","type":"image"}]}