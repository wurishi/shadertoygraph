{"ver":"0.1","info":{"id":"wlSGRc","date":"1560461322","viewed":285,"name":"[TWITCH] Coral beast","username":"Flopine","description":"This is a shader I made during a live session on Twitch. You can watch them here: https://www.twitch.tv/flopine\nIt's heavily inspired by the book \"Art Forms in Nature\" by Ernst Haeckel. https://www.amazon.fr/Art-Forms-Nature-Ernst-Haeckel/dp/0486229874","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","fractal","nature","symmetry","coral"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, Coyhot, Alkama and YX for teaching me\n// Thanks LJ for giving me the love of shadercoding :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  https://twitter.com/CookieDemoparty\n\n#define time iTime\nfloat PI = acos(-1.);\n\n\n// taken from YX here : https://www.shadertoy.com/view/tdlXW4\n// rough shadertoy approximation of the bonzomatic noise texture\nvec4 texNoise (vec2 uv)\n{\n    float f = 0.;\n    f += texture(iChannel0, uv*.125).r*.5;\n    f += texture(iChannel0, uv*.25).r*.25;\n    f += texture(iChannel0, uv*.5).r*.125;\n    f += texture(iChannel0, uv*1.).r*.125;\n    f=pow(f,1.2);\n    return vec4(f*.45+.05);\n}\n\nvoid moda (inout vec2 p, float rep)\n{\n    float per = 2.*PI/rep;\n    float a = atan(p.y, p.x);\n    float l = length(p);\n    a = mod(a,per)-per*0.5;\n    p = vec2(cos(a),sin(a))*l;\n}\n\n\nvoid mo (inout vec2 p, vec2 d)\n{\n    p = abs(p)-d;\n    if (p.y > p.x) p =p.yx;\n}\n\nmat2 rot (float a)\n{return mat2(cos(a),sin(a),-sin(a),cos(a));}\n\n\n// polynomial smooth iq\nfloat smin (float a, float b, float k)\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat stmin (float a, float b, float k, float n)\n{\n    float st = k/n;\n    float u = b-k;\n    return min(min(a,b),0.5*(u+a+abs(mod(u-a+st,2.*st)-st)));\n}\n\nfloat cyl (vec3 p, float r, float h)\n{return max(length(p.xy)-r,abs(p.z)-h);}\n\nfloat torus (vec3 p, vec2 t)\n{\n    vec2 q = vec2(length(p.xy)-t.x,p.z);\n    return length(q)-t.y;\n}\n\nfloat inner_body (vec3 p)\n{\n    vec3 pp = p;\n    p.y += 1.;\n    float t = torus (p.xzy, vec2(0.8,0.5));\n\n    p=pp;\n    float c = cyl(p.xzy, .4-abs(p.y)*p.y*0.5+sin(p.y*2.+time)*0.1+0.15, 1.5);\n\n    return stmin(c,t,0.2,3.);\n}\n\nfloat first_tentacles (vec3 p)\n{\n    moda(p.xz, 7.);\n    p.x -= 1.5;\n    p.x += sin(p.y*2.+time)*0.3;\n    float c1 = cyl(p.xzy, 0.2-p.y*0.1, 2.); \n\n    p.y -= 2.;\n    p.xy *= rot(time*0.5);\n    float t = torus(p, vec2(0.3,0.05));\n    moda(p.xy, 5.);\n    p.x -= 0.5;\n    p.y += sin(p.x*5.+time)*0.1;\n    float c2 = cyl(p.yzx, 0.05-p.x*0.1, 0.2);\n\n    return min(min(t,c2),c1);\n}\n\nfloat second_tentacles (vec3 p)\n{\n    vec3 pp = p;\n    p.y += 2.5;\n    float t = torus(p.xzy,vec2(2.5,1.));\n\n    p = pp;\n    p.xz *= rot(PI/7.);\n    moda(p.xz, 7.);\n    p.x -= 2.;\n    p.x += sin(p.y*2.-time)*0.3;\n    float c1 = cyl(p.xzy, 0.2-p.y*0.3, 2.);\n    return smin(c1,t, 0.5);\n}\n\nfloat beating_dots (vec3 p)\n{\n    p.y += 2.5;\n    moda(p.xz, 15.);\n    p.x -= 3.5;\n    return length(p)-(0.2+exp(-fract(time))*0.15);\n}\n\nfloat background (vec3 p)\n{\n    p.x += texNoise(p.yz*0.04).r*0.6;\n    p.y += texNoise(p.xz*0.04).r*0.5;\n    return -cyl(p,20.,1e10);\n}\n\nint mat_id;        \nfloat SDF (vec3 p)\n{\n    float b = background(p);\n    mo(p.xz,vec2(2.5,1.));\n    p.xz *= rot(PI/2.);\n    mo(p.yz, vec2(3.8));\n    p.xz*=rot(time*0.5);\n    float s = min(stmin(beating_dots(p),second_tentacles(p),0.1,3.),\n                  min(inner_body(p),first_tentacles(p))\n                 );\n    float d = min(b,s);\n    if (d == b) mat_id = 1;\n    if (d == s) mat_id = 2;\n    return d;\n}\n\nvec3 getnorm (vec3 p)\n{\n    vec2 eps = vec2(0.01,0.);\n    return normalize(SDF(p)-vec3(SDF(p-eps.xyy),SDF(p-eps.yxy),SDF(p-eps.yyx)));\n}\n\nfloat lighting (vec3 n, vec3 l)\n{return dot(n, normalize(l))*0.5+0.5;}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n    uv -= 0.5;\n    uv /= vec2(iResolution.y / iResolution.x, 1);\n\n    vec3 ro = vec3(0.001,0.001,-20.5), p = ro, col = vec3(0.);\n    vec3 rd = normalize(vec3 (uv,1.));\n\n    float shad = 0.;\n    bool hit = false;\n\n    for (float i =0.; i<64.; i++)\n    {\n        float d = SDF(p);\n        if (d<0.001)\n        {\n            shad = i/64.;\n            hit = true;\n            break;\n        }\n        p+=d*rd*0.85;\n    }\n    float t = length(ro-p);\n    if (hit) \n    {\n        vec3 n = getnorm(p);\n        vec3 l = vec3(0., -5., -2.);\n        if (mat_id == 1) col = vec3(shad)*0.4;\n        if (mat_id == 2) col = mix(vec3(0.1,0.,0.2),vec3(0.8,1.,0.8),lighting(n,l));\n    }\n    else col = vec3(0.);\n\n    fragColor = vec4(col,1.);\n}","name":"Image","description":"","type":"image"}]}