{"ver":"0.1","info":{"id":"csfcWl","date":"1687388364","viewed":44,"name":"Thomas's radial noise","username":"thimmythimble","description":"a","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n//pseudo random number generator for a float seed\nfloat random(float value) {\n    float a = 12.9898;\n    float b = 78.233;\n    float c = 43758.5453;\n    \n    float result = sin(value * a) * c;\n    return fract(result);\n}\n\n\n\n\n//1d gradient noise generator thatloops back between 1 and 0\nfloat gradientRadialNoise(float degree, int numStops, float seedOffset)\n{\n    //work out what fraction of the radial we are at\n    float fraction = degree;\n    //work out the two stops we are between\n    float increment = 1. / float(numStops);\n    float prevIncrement = floor(fraction / increment) / float(numStops);\n    float nextIncrement = (floor(fraction / increment)+1.)/ float(numStops);\n    bool changed = false;\n    if(floor(fraction / increment)+1. >= float(numStops)-0.001)\n    {\n        changed = true;\n        nextIncrement -= 1.;\n    }\n\n\n    //work out the random noise for each of the increments\n    float prevNum = random(prevIncrement +1330.345465+ seedOffset);\n    float nextNum = random(nextIncrement +1330.345465+ seedOffset);\n    if(changed)\n    {\n        nextIncrement += 1.;\n    }\n    //interpolate between the two using a smoothstep\n    return mix(prevNum, nextNum, smoothstep(prevIncrement, nextIncrement, fraction));\n       \n}\n\n\n\n//calculate the \"angle\" of a uv coord as a vector to the x axis\nfloat calculateNormalizedAngle(vec2 uv) {\n\n\n  float angle = atan(uv.y, uv.x);\n  \n  return (angle + 3.14159265359) / (2.0 * 3.14159265359);\n}\n\n\nfloat calculateSplatRadius(vec2 uv, float splatSubtlty, int splatResolution)\n{\n\n    return 0.5 + (0.5-gradientRadialNoise(calculateNormalizedAngle(uv), splatResolution, 19.))*splatSubtlty;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord;\n    uv -= iResolution.xy/2.;\n    uv /= iResolution.y;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    float radialLength = calculateSplatRadius(uv, 0.07, 60);\n    fragColor = vec4(0.0);\n    if(length(uv) > radialLength)\n    {\n        fragColor = vec4(1.0);\n    }\n    //fragColor = vec4(radialLength);\n\n}","name":"Image","description":"","type":"image"}]}