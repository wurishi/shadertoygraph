{"ver":"0.1","info":{"id":"Dlccz8","date":"1698912623","viewed":83,"name":"[TUT] Koch Snowflake Tut Fork4","username":"sarahannstarmer","description":"Inspired by The Art Of Code video tutorial on YouTube. ","likes":5,"published":1,"flags":0,"usePreview":1,"tags":["fractal","curve","kifs","snowflake","koch","artofcode"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nvec2 N(float angle) {\n    return vec2(sin(angle), cos(angle));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 mouse = iMouse.xy/iResolution.xy; // 0 1 \n    //start scale entire animation\n    uv*=2.7;\n    //end scale entire animation\n    vec3 col = vec3(0);\n    vec2 n;\n    float d ;\n    float numb=1.;\n    float warpNumb =sin(iTime*0.5)-.1;//add or suntract small amounts to the warpNumb to change start and end points\n    //start reflect around y-axis\n     uv.x = abs(uv.x);\n    //end reflect around y-axis   \n    //start reflect around x-axis\n    uv.y = abs(uv.y);\n    //end reflect around x-axis \n    //start move sideways\n    uv.x+=0.5;\n    //end move sideways\n    //start move up\n    uv.y+=0.0;\n    //end move up\n    // start reflection iterations\n    for(int i=0; i<2; i++){ \n        //start code for reflection\n        n = N((numb/6.)*3.1415);\n        d = dot(uv-vec2(0.5,0.),n);\n        uv -= n*max(0.,  d)*2.;\n        //end code for reflection\n        //start code for reflection\n        n = N(((numb+2.)/6.)*3.1415);\n        d = dot(uv-vec2(.5,0.),n);\n        uv -= n*max(0.,  d)*2.;\n        //end code for reflection\n        //start code for reflection\n        n = N(((numb+4.)/6.)*3.1415);\n        d = dot(uv-vec2(.5,0.),n);\n        uv -= n*max(0.,  d)*2.;\n        //end code for reflection\n        numb+=1.;\n    }\n    // col+=smoothstep(0.01,.0,abs(d));\n    n = N((2./3.)*3.1415);\n    uv.x +=.5;\n    float scale =1.;   \n\n    // start fold iterations\n    for(int i=0; i<5; i++){ \n        uv *=3.+warpNumb;\n        scale*=3.+warpNumb;\n        uv.x -=1.5+warpNumb;\n        uv.x=abs(uv.x);\n        uv.x-=.5;\n        uv -= n*min(0., dot(uv, n))*2.;\n    }\n    // end fold iterations\n   \n    d = length(uv - vec2(clamp(uv.x,-1., 1.), 0));\n    col += smoothstep(3./iResolution.y, .0, d/scale);\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}