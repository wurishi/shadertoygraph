{"ver":"0.1","info":{"id":"DtfXzS","date":"1675007874","viewed":247,"name":"Triangle Terrain (via Voxel DDA)","username":"jt","description":"Proof-of-concept: implementation of a triangular heightmap by stepping through a 2d triangle grid using a VOXEL DDA along the plane orthogonal to the main diagonal (1,1,1).\n(Note: This method could be extended to use an octree to store triangle heights.)","likes":14,"published":1,"flags":0,"usePreview":0,"tags":["3d","raytracing","grid","terrain","raycasting","triangle","triangles","voxel","heightmap","slice","dda","step","polygonal"],"hasliked":0,"parentid":"mlfXD7","parentname":"Triangle DDA via Voxel DDA Slice"},"renderpass":[{"inputs":[{"id":"4sfGRr","filepath":"/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","previewfilepath":"/media/ap/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","type":"volume","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/DtfXzS Triangle Terrain (via Voxel DDA) by jt\n// based on https://www.shadertoy.com/view/mlfXD7 Triangle DDA via Voxel DDA Slice by jt\n// based on https://www.shadertoy.com/view/mtfXDM Branchless Voxel Raycasting Tex2\n// clean-up of https://www.shadertoy.com/view/7dK3D3 Branchless Voxel Raycasting Tex\n// using voxel DDA of https://www.shadertoy.com/view/4dX3zl Branchless Voxel Raycasting by fb39ca4\n// (with loop optimization by kzy), DDA based on http://lodev.org/cgtutor/raycasting.html\n\n// Proof-of-concept: implementation of a triangular heightmap\n// by stepping through a 2d triangle grid using a VOXEL DDA\n// along the plane orthogonal to the main diagonal (1,1,1).\n\n// tags: 3d, raytracing, grid, terrain, raycasting, triangle, triangles, voxel, heightmap, slice, dda, step\n\n// The MIT License\n// Copyright (c) 2023 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// (Note: This method could be extended to use an octree to store triangle heights.)\n\n//#define RANDOM_HEIGHTS\n\n#define pi 3.1415926\n\nmat3 yaw_pitch_roll(float yaw, float pitch, float roll)\n{\n    mat3 R = mat3(vec3(cos(yaw), sin(yaw), 0.0), vec3(-sin(yaw), cos(yaw), 0.0), vec3(0.0, 0.0, 1.0));\n    mat3 S = mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, cos(pitch), sin(pitch)), vec3(0.0, -sin(pitch), cos(pitch)));\n    mat3 T = mat3(vec3(cos(roll), 0.0, sin(roll)), vec3(0.0, 1.0, 0.0), vec3(-sin(roll), 0.0, cos(roll)));\n\n    return R * S * T;\n}\n\n#define DIST_MAX 1000.0\n\n#define MAX_RAY_STEPS 64\n\n// modified https://iquilezles.org/articles/intersectors\nvec2 boxIntersection(vec3 ro, vec3 rd, vec3 s)\n{\n    vec3 m = 1.0 / rd;\n    vec3 n = m * ro;\n    vec3 k = abs(m) * s;\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n    float tN = max(max(t1.x, t1.y), t1.z);\n    float tF = min(min(t2.x, t2.y), t2.z);\n    if(tN > tF || tF < 0.0) return vec2(DIST_MAX);\n    return vec2(tN, tF);\n}\n\nvec3 triangle_center(vec3 a, vec3 b, vec3 c)\n{\n    return (a+b+c)/3.0;\n}\n\nvec3 triangle_normal(vec3 a, vec3 b, vec3 c)\n{\n    return normalize(cross(a - b, c - b));\n}\n\nfloat plane_intersection(vec3 pp, vec3 pn, vec3 ro, vec3 rd)\n{\n    return dot(pp - ro,pn)/dot(rd,pn);\n}\n\n#ifdef RANDOM_HEIGHTS\n// https://www.shadertoy.com/view/WttXWX \"Best\" Integer Hash by FabriceNeyret2,\n// implementing Chris Wellons https://nullprogram.com/blog/2018/07/31/\nuint triple32(uint x)\n{\n    x ^= x >> 17;\n    x *= 0xed5ad4bbU;\n    x ^= x >> 11;\n    x *= 0xac4c1b51U;\n    x ^= x >> 15;\n    x *= 0x31848babU;\n    x ^= x >> 14;\n    return x;\n}\n\nuint uhash(uvec3 v)\n{\n    return triple32(v.x + triple32(v.y + triple32(v.z)));\n}\n\nfloat hash(ivec3 v)\n{\n    return float(uhash(uvec3(v))) / float(0xffffffffU);\n}\n\nfloat height(ivec3 i)\n{\n    vec3 p = vec3(i);\n    return hash(ivec3(p));\n    // or try using 3d-texture here\n    //return 2.0*texture(iChannel0, p/100.0).x; // set filter linear or nearest but NOT mipmap\n}\n#else\nfloat height(ivec3 i)\n{\n    vec3 p = vec3(i);\n    float s = 10.0;\n    //return (0.5+0.5*cos(iTime/10.0))*sin(2.0*pi*(p.x+iTime)/s) * sin(2.0*pi*(p.y+iTime)/s) * sin(2.0*pi*(p.z+iTime)/s);\n    //return cos(iTime/10.0)*sin(2.0*pi*(p.x+iTime)/s) * sin(2.0*pi*(p.y+iTime)/s) * sin(2.0*pi*(p.z+iTime)/s);\n    //return cos(2.0*pi*(length(p)-iTime)/s) * exp(-dot(p/s,p/s));\n    return mix(cos(iTime/10.0)*sin(2.0*pi*(p.x+iTime)/s) * sin(2.0*pi*(p.y+iTime)/s) * sin(2.0*pi*(p.z+iTime)/s), cos(2.0*pi*(length(p)-iTime)/s) * exp(-dot(p/s,p/s)), 0.5+0.5*cos(2.0*pi*iTime/23.0));\n}\n#endif\n\n#define ESSENTIAL_MATRIX\n\nvec4 triangle_trace(vec3 ray_pos_orig, vec3 ray_dir_orig) // step triangles by stepping through voxels along plane orthogonal to main diagonal (jt)\n{\n#ifdef ESSENTIAL_MATRIX\n    // coordinate-system along plane orthogonal to diagonal (1,1,1)\n    mat2x3 T =\n        mat2x3\n        (\n            normalize(vec3(+1,-1, 0)),\n            normalize(vec3(-1,-1,+2))\n        );\n\n    // step through voxels along plane orthogonal to main diagonal (1,1,1)\n    vec3 ray_pos = T * ray_pos_orig.xy;\n    vec3 ray_dir = T * ray_dir_orig.xy;\n#else\n    // coordinate-system along plane orthogonal to diagonal (1,1,1)\n    mat3 T =\n        mat3\n        (\n            normalize(vec3(+1,-1, 0)),\n            normalize(vec3(-1,-1,+2)),\n            normalize(vec3(-1,-1,-1))\n        );\n\n    // step through voxels along plane orthogonal to main diagonal (1,1,1)\n    vec3 ray_pos = T * vec3(ray_pos_orig.xy, 0);\n    vec3 ray_dir = T * vec3(ray_dir_orig.xy, 0);\n#endif\n    // initialization from https://www.shadertoy.com/view/4dX3zl Branchless Voxel Raycasting by fb39ca4 implementing https://lodev.org/cgtutor/raycasting.html\n    ivec3 map_pos = ivec3(floor(ray_pos));\n    vec3 delta_dist = 1.0 / abs(ray_dir);\n    ivec3 ray_step = ivec3(sign(ray_dir));\n    vec3 side_dist = (sign(ray_dir) * (vec3(map_pos) - ray_pos) + (sign(ray_dir) * 0.5) + 0.5) * delta_dist;\n\n    for (int i = 0; i < MAX_RAY_STEPS; i++)\n    {\n        // It appears to be safer to just do the box-intersection here (potential for optimization).\n        vec2 bounds = boxIntersection(ray_pos - vec3(map_pos) - 0.5, ray_dir, vec3(0.5)); // bounding box\n        float tmin = bounds.x; float tmax = bounds.y;\n\n        //if(((uint(map_pos.x) ^ uint(map_pos.y) ^ uint(map_pos.z)) & 1u) == 0u)\n        if(abs(map_pos.x + map_pos.y + map_pos.z) == 2)\n        {\n#ifdef ESSENTIAL_MATRIX\n            vec3 a = vec3(vec3(map_pos - ivec3(1,0,0))*T, height(map_pos - ivec3(1,0,0)));\n            vec3 b = vec3(vec3(map_pos - ivec3(0,1,0))*T, height(map_pos - ivec3(0,1,0)));\n            vec3 c = vec3(vec3(map_pos - ivec3(0,0,1))*T, height(map_pos - ivec3(0,0,1)));\n#else\n            vec3 a = vec3(map_pos - ivec3(1,0,0))*T;\n            vec3 b = vec3(map_pos - ivec3(0,1,0))*T;\n            vec3 c = vec3(map_pos - ivec3(0,0,1))*T;\n            a.z += height(map_pos - ivec3(1,0,0))-sqrt(3.0);\n            b.z += height(map_pos - ivec3(0,1,0))-sqrt(3.0);\n            c.z += height(map_pos - ivec3(0,0,1))-sqrt(3.0);\n#endif\n            vec3 n = triangle_normal(a, b, c);\n            vec3 m = triangle_center(a,b,c);\n            float d = plane_intersection(m, n, ray_pos_orig, ray_dir_orig);\n            if(d >= max(0.0, tmin) && d <= tmax) return vec4(n,d); // hit plane\n        }\n        else\n        {\n#ifdef ESSENTIAL_MATRIX\n            vec3 a = vec3(vec3(map_pos - ivec3(0,1,1))*T, height(map_pos - ivec3(0,1,1)));\n            vec3 b = vec3(vec3(map_pos - ivec3(1,0,1))*T, height(map_pos - ivec3(1,0,1)));\n            vec3 c = vec3(vec3(map_pos - ivec3(1,1,0))*T, height(map_pos - ivec3(1,1,0)));\n#else\n            vec3 a = vec3(map_pos - ivec3(0,1,1))*T;\n            vec3 b = vec3(map_pos - ivec3(1,0,1))*T;\n            vec3 c = vec3(map_pos - ivec3(1,1,0))*T;\n            a.z += height(map_pos - ivec3(0,1,1))-sqrt(3.0);\n            b.z += height(map_pos - ivec3(1,0,1))-sqrt(3.0);\n            c.z += height(map_pos - ivec3(1,1,0))-sqrt(3.0);\n#endif\n            vec3 n = triangle_normal(a, b, c);\n            vec3 m = triangle_center(a,b,c);\n            float d = plane_intersection(m, n, ray_pos_orig, ray_dir_orig);\n            if(d >= max(0.0, tmin) && d <= tmax) return vec4(n,d); // hit plane\n        }\n\n        // core from https://www.shadertoy.com/view/4dX3zl Branchless Voxel Raycasting by fb39ca4 implementing https://lodev.org/cgtutor/raycasting.html\n        bvec3 mask = lessThanEqual(side_dist.xyz, min(side_dist.yzx, side_dist.zxy)); // fb39ca4: \"Thanks kzy for the suggestion!\"\n        side_dist += vec3(mask) * delta_dist;\n        map_pos += ivec3(vec3(mask)) * ray_step;\n    }\n\n    return vec4(-ray_dir_orig, DIST_MAX); // sky-sphere\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 I )\n{\n    bool demo = all(lessThan(iMouse.xy, vec2(10.0)));\n    vec2 R = iResolution.xy;\n    //I = 2.0 * I.xy / R - 1.0;\n    //I.x *= R.x / R.y;\n    I = (2.0 * I - R) / R.y; // concise pixel-position mapping thanks to Fabrice\n    float yaw = 2.0 * pi * float(iMouse.x) / float(R.x);\n    float pitch = pi - pi / 2.0 * float(iMouse.y) / float(R.y);\n    yaw = !demo ? yaw : 2.0 * pi * fract(iTime * 0.01);\n    pitch = !demo ? pitch : 1.25 * pi/2.0;\n\n    vec3 ray_pos = vec3(0.0, 0.0, -12.0);\n    vec3 ray_dir = vec3(I.x, I.y, 2.0); // NOTE: un-normalized direction appears to work fine here!\n    //ray_dir = normalize(ray_dir); // looks like ray-direction does not need to be normalized\n\n    mat3 M = yaw_pitch_roll(yaw, pitch, 0.0);\n    ray_pos = M * ray_pos;\n    ray_dir = M * ray_dir;\n    ray_pos.z += 0.5;\n\n    vec3 color = vec3(0);\n    vec4 result = triangle_trace(ray_pos, ray_dir);\n    if(result.w < DIST_MAX)\n    {\n        color = vec3(1);\n        if(false)\n        {\n            //vec3 light_dir = normalize(vec3(1,2,3));\n            vec3 light_dir = normalize(vec3(cos(iTime),sin(iTime),1));\n            float diffuse = max(0.0, dot(result.xyz, light_dir));\n            color *= diffuse;\n        }\n        else\n        {\n            vec3 dst = ray_pos + ray_dir * result.w;\n            //vec3 light_pos = vec3(0,0,2);\n            vec3 light_pos = vec3(3.0*vec2(cos(iTime),sin(iTime)),5);\n            vec3 light_diff = light_pos - dst;\n            float light_dist = length(light_diff);\n            vec3 light_dir = light_diff / light_dist;\n            vec3 light_color = vec3(1) * 10.0;\n            vec3 diffuse = light_color * max(0.0, dot(result.xyz, light_dir)) / (light_dist * light_dist);\n            float ambient = 0.005;\n            color = (diffuse + ambient) * (0.5 + 0.5 * result.xyz); // visualize normals\n            //color = vec3(fract(result.w));\n        }\n    }\n    color = tanh(color); // soft-clamp overly bright colors\n    fragColor = vec4(sqrt(color), 1.0); // gamma\n}\n","name":"Image","description":"","type":"image"}]}