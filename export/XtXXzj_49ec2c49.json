{"ver":"0.1","info":{"id":"XtXXzj","date":"1437790043","viewed":290,"name":"julia fractal .","username":"kaminate","description":"All criticism appreciated","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["juliafractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// following mandelbrot tutorial at\n// http://warp.povusers.org/Mandelbrot/\n\n//https://iquilezles.org/articles/palettes\n#define GetColor( a, b, c, d, t)   a + b * cos( 6.28 * ( c * t + d ) )\n\n#define JULIA\n\nvoid mainImage( out vec4 fragColor, vec2 uv )\n{\n  float t = ( cos( iTime / 2. ) + 1.0 ) / 2.0;\n  \n  vec2 R = iResolution.xy;\n  uv /= R;\n  float aspect = R.x / R.y;\n\n  vec2 vsPos = ( uv * 2. - 1. ) / aspect;\n\n  float scale = mix( .2, .3, t );\n  vec2 camPos = vec2( 0 );\n  float camRot = iTime / 7.;\n  float c = cos( camRot );\n  float s = sin( camRot );\n  mat3 cam = mat3(\n      scale * vec3( c, -s , 0 ),\n      scale * vec3( s, c , 0 ),\n      vec3( camPos, 1. ) );\n\n  // z starts out as the pixel coordinate\n  vec2 z0, z = ( cam * vec3( vsPos, 1.0 ) ).xy;\n\n#ifdef JULIA\n  z0 = vec2( 0., mix( 0.8, 0.81, t ) );\n#else\n  // for mandelbrot, z0 is unique for every pixel\n  z0 = z;\n#endif\n\n  float iterPercent = 1.;\n  const float maxIters = 100.;\n  for( float n = 0.; n < maxIters; ++n )\n  {\n    if( dot( z, z ) > 4. )\n    {\n      iterPercent = n / maxIters;\n      break;\n    }\n    z = z0 + vec2( z.x*z.x - z.y*z.y, 2.0 * z.x * z.y );\n  }\n\n  fragColor = GetColor( .5, .5, 1.,\n      vec4( .0, .3, 0.6, 1. ),\n      iterPercent );\n}\n","name":"Image","description":"","type":"image"}]}