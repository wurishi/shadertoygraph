{"ver":"0.1","info":{"id":"XtXBWS","date":"1513035749","viewed":85,"name":"Oceania checkers","username":"DCsquared2","description":"CSC 550 final project","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["rotate","checkerboard","buffers","layered"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//https://www.shadertoy.com/view/XdffR7 for rotate\n//https://www.shadertoy.com/view/MtsyDH for checkerboard pattern\n\nmat2 rotateR(float a) {\n\treturn mat2(cos(a), -sin(a), -sin(a), cos(a));\n}\n\nmat2 rotate(float a) {\n\treturn mat2(cos(a), -sin(a), sin(a), cos(a));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = vec4(uv,0.5+0.5*sin(iTime),1.0);\n    \n    float xTiles = 2.0;\n\tfloat yTiles = 2.0;\n\n\tvec4 tb = vec4(0.0, 0.0, 0.0, 1.0);\n\tvec4 tw= vec4(1.0, 1.0, 1.0, 1.0);\n\n    \n    vec4 t0 = texture(iChannel0, uv);\n    vec4 t1 = texture(iChannel1, uv);\n\n    \n    int currentTileX = int(xTiles * uv.x* rotate(iTime / 3.0));\n    int currentTileY = int(yTiles * uv.y* rotate(iTime / 3.0));\n    \n    if ((currentTileX + currentTileY) % 2 == 0)\n    {\tfragColor = t0;   \n    }\n    else\n    {\n        fragColor = t1;\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"mat2 rotateR(float a) {\n\treturn mat2(cos(a), -sin(a), -sin(a), cos(a));\n}\n\nmat2 rotate(float a) {\n\treturn mat2(cos(a), -sin(a), sin(a), cos(a));\n}\n\nfloat xTiles = 5.0;\nfloat yTiles = 5.0;\n\nvec4 tb = vec4(0.0, 0.0, 0.0, 1.0);\nvec4 tw = vec4(1.0, 1.0, 1.0, 1.0);\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec4 t0 = texture(iChannel0, uv * rotateR(iTime / 3.0));\n    vec4 t1 = texture(iChannel1, uv * rotate(iTime / 3.0));\n\n    \n    int currentTileX = int(xTiles * uv.x);\n    int currentTileY = int(yTiles * uv.y);\n    \n    if ((currentTileX + currentTileY) % 2 == 0)\n    {\n     \tfragColor = t0;   \n    }\n    else\n    {\n        fragColor = t1;\n    }\n    \n\t\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"float xTiles = 15.0;\nfloat yTiles = 15.0;\n\nvec4 tb = vec4(0.0, 0.0, 0.0, 1.0);\nvec4 tw= vec4(1.0, 1.0, 1.0, 1.0);\n\nmat2 rotateR(float a) {\n\treturn mat2(cos(a), -sin(a), -sin(a), cos(a));\n}\n\nmat2 rotate(float a) {\n\treturn mat2(cos(a), -sin(a), sin(a), cos(a));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec4 t0 = texture(iChannel0, uv* rotate(iTime / 3.0));\n    vec4 t1 = texture(iChannel1, uv * rotateR(iTime / 3.0));\n\n    \n    int currentTileX = int(xTiles * uv.x);\n    int currentTileY = int(yTiles * uv.y);\n    \n    if ((currentTileX + currentTileY) % 2 == 0)\n    {\n     \tfragColor = tb;   \n    }\n    else\n    {\n        fragColor = t1;\n    }\n    \n\t\n}","name":"Buf B","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"float xTiles = 20.0;\nfloat yTiles = 20.0;\n\nvec4 tBlack = vec4(0.0, 0.0, 0.0, 1.0);\nvec4 tWhite = vec4(1.0, 1.0, 1.0, 1.0);\n\nmat2 rotateR(float a) {\n\treturn mat2(cos(a), -sin(a), -sin(a), cos(a));\n}\n\nmat2 rotate(float a) {\n\treturn mat2(cos(a), -sin(a), sin(a), cos(a));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec4 t0 = texture(iChannel0, uv* rotate(iTime / 3.0));\n    vec4 t1 = texture(iChannel1, uv);\n\n    \n    int currentTileX = int(xTiles * uv.x);\n    int currentTileY = int(yTiles * uv.y);\n    \n    if ((currentTileX + currentTileY) % 2 == 0)\n    {\n     \tfragColor = t0;   \n    }\n    else\n    {\n        fragColor = t1;\n    }\n    \n\t\n}","name":"Buf C","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"XdfGR8","channel":0}],"code":"mat2 rotateR(float a) {\n\treturn mat2(cos(a), -sin(a), -sin(a), cos(a));\n}\n\nmat2 rotate(float a) {\n\treturn mat2(cos(a), -sin(a), sin(a), cos(a));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    fragColor = vec4(uv,0.3+0.5*sin(iTime),5.0* rotate(iTime / 3.0));\n}\n    ","name":"Buf D","description":"","type":"buffer"}]}