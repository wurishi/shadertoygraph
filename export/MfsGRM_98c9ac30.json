{"ver":"0.1","info":{"id":"MfsGRM","date":"1702913566","viewed":43,"name":"Dynamic Circular Symphony","username":"cross_citrus","description":"Dynamic Circular Symphony","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["001"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy * 2.0 - iResolution.xy)/max(iResolution.x, iResolution.y);\n    vec2 uv0 = uv;\n\n    vec3 col = cos(iTime + uv.xyx+vec3(0, 2, 4));\n    \n    // circle\n    float circles = sin(length(fract(uv0 * 0.5) - 0.5) * 120.0 + iTime * 4.0);\n    circles = smoothstep(0.85, 0.9, circles);\n\n    col += circles * 0.3;\n\n\n    for (float i = 0.0; i < 3.0; i++) {\n        uv = fract(uv * 2.0) - 0.5;\n\n        float cCircles = sin(length(uv) * 16.0 + iTime * 4.0);\n        cCircles = smoothstep(0.6, 0.9, cCircles);\n\n\n        float size = 0.6;\n        float thickness = 0.2;\n\n        vec2 dist = abs(uv);\n        float pattern = 0.5 + 0.5 * sin(iTime + 10.0 * (dist.x - dist.y));\n        pattern = smoothstep(size, size + thickness, pattern);\n        vec3 color = vec3(pattern);\n\n        col += cCircles * 0.2 + color * 0.6; \n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}