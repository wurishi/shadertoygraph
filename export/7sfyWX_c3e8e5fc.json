{"ver":"0.1","info":{"id":"7sfyWX","date":"1643234850","viewed":263,"name":"Fresnel glass","username":"SimonL","description":"Code by Simon LUCAS - 26/01/2022\n\nhttps://twitter.com/SimonLUCAS_CG","likes":24,"published":1,"flags":32,"usePreview":0,"tags":["2d","raytracing","glass","diffraction","wavelength","spectral","pcg"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Simon LUCAS - 26/01/2022\n\nvoid mainImage( out vec4 Col, in vec2 Coo )\n{\n    vec2 p = Coo/R;\n    \n    Col = texture(iChannel0,p,10.);\n    Col/= Col.w;\n    \n    // XYZ to RGB\n    Col.xyz = xyz_to_rgb*vec3(Col.xyz);\n    \n    #if 0\n    // Isoline\n    float d = length((Coo-R.xy/2.)/R.y);\n    Col = Col * 0.2 + smoothstep(1./R.y/(d*d),0.,abs(Col - 2.*MP.x));\n    #else\n    // Tonemapping\n    Col = 1.0 - exp( -Col );\n    // Gamma correction\n    Col = pow(Col,vec4(1./2.2));\n    #endif\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Code by Simon LUCAS - 26/01/2022\n\n// Scene\nconst int nSphere = 11;\nSphere spheres[nSphere] = Sphere[nSphere](\n  Sphere(vec2(0.1,0.2), 0.05,false),\n  Sphere(vec2(-0.05,0.3), 0.06,false),\n  Sphere(vec2(0.2,-0.27), 0.07,false),\n  Sphere(vec2(-0.4,-0.2), 0.08,false),\n  Sphere(vec2(0.3,-0.1), 0.09,false),\n  Sphere(vec2(-0.1,-0.25), 0.10,false),\n  Sphere(vec2(-0.3,0.1), 0.11,false),\n  Sphere(vec2(0.4,0.2), 0.13,false),\n  Sphere(vec2(-0.52,0.01), 0.08,false),\n  Sphere(vec2(0.52,-0.01), 0.05,false),\n  Sphere(vec2(0.), 0.02,true));\n\n// return distance to intersection\n// intersection valid if len is positive\nfloat intersect_sphere(in vec2 ro,in vec2 rd,in int i) {\n    vec2 oc = spheres[i].pos - ro;\n    float l = dot(rd, oc);\n    float det = l*l - dot(oc, oc) + spheres[i].rad*spheres[i].rad;\n    if (det < 0.0) return -1.;\n    float len = l - sqrt(det);\n    if (len < 0.0) len = l + sqrt(det);\n    return len;\n}\n\n// return Inter\n//  - distance to intersection\n//  - intersection point position\n//  - intersection point normal\n//  - intersection point emission\nInter intersect(in vec2 ro,in vec2 rd) {\n    Inter i;\n    i.t = -1.;\n    float d = 10000.;\n    \n    for(int s = 0; s < nSphere; s++){\n        float d_ = intersect_sphere(ro,rd,s);\n        if(d_ > 0. && d_ < d){\n            d = d_;\n            i.t = d;\n            i.pos = ro + rd * i.t;\n            i.nor = normalize(i.pos - spheres[s].pos);\n            i.emi = spheres[s].emi;\n        }\n    }\n    \n    return i;\n   \n}\n\nvoid mainImage( out vec4 Col, in vec2 Coo )\n{\n    Col = vec4(0.);\n    // Higher number of sample can cause problems with the PRNG\n    if(iFrame > 20000){\n        Col = texture(iChannel0,Coo/R.xy);\n        return;\n    }\n    \n    // Set seed for the PRNG (pcg)\n    seed = vec2(float(iFrame+1) * Coo);\n    \n    // Evaluation point position\n    vec2 p = (Coo-R.xy/2.)/R.y;\n    // Jitter for anti-aliasing\n    p += (vec2(hash(),hash())-0.5)/R.y;\n\n    // Interate over random wavelengths\n    for(int idx = 0; idx < NUM_WL_SAMPLES; idx++){\n    \n    // Sample random wavelength\n    float wl = hash() * WL_SAMPLES_ + WL_START;\n    // Sample random direction\n    float th = hash() * 2. * Pi;\n    \n    // Setup ray tracing\n    vec2 ro = p;\n    vec2 rd = vec2(cos(th),sin(th));\n    Inter i;\n    i.emi = false;\n    \n    float t = 0.;\n    for(int dep = 0; dep < MAX_DEPTH && !i.emi ; dep++){\n        i = intersect(ro,rd);\n        \n        if(i.t > 0.){\n            t += i.t;\n            // wavelength dependant index of refraction\n            float ior = cauchy_ior(wl);\n            vec2 pi = ro + i.t * rd;\n            float n1,n2;\n            if(dot(i.nor,rd)>0.){ // hit from inside\n                n1 = ior;\n                n2 = N1;\n                i.nor = -i.nor;\n            } else { // hit from outside\n                n1 = N1;\n                n2 = ior;\n            }\n            \n            if(i.emi){ // hit light\n                int wl_idx = wavelength_to_idx(wl);\n                Col.xyz += 0.5*d65[wl_idx]*xyz_bar[wl_idx];\n                //Col.xyz += pow(cos(acos(dot(i.nor,vec2(1.,0.)))*2.),8.)*0.5*d65[wl_idx]*xyz_bar[wl_idx];\n                //Col.xyz += max(pow(dot(-rd,i.nor),100.),0.)*0.5*d65[wl_idx]*xyz_bar[wl_idx];\n                //Col.xyz += dot(-rd,i.nor)>0.1?vec3(0.):20.*d65[wl_idx]*xyz_bar[wl_idx];\n                // Stop the path\n                break;\n            }\n            else { // hit glass\n                // Compute fresnel approx\n                float cosTheta = dot(-rd,i.nor);\n                float s1 = (ior - N1);\n                float s2 = (ior + N1);\n                float f0 = s1*s1/(s2*s2);\n                float fr =  f0 + (1.0 - f0)*pow(1.0 - cosTheta, 5.0);\n                float r = hash();\n                // Change ray direction based on fresnel\n                if(r < fr){\n                    rd = reflect(rd, i.nor);   \n                    pi += rd * EPS;\n                } else {\n                    rd = refract(rd, i.nor, n1/n2);\n                    pi += rd * EPS;\n                }                 \n\n            }\n            \n            // Set the new ray origin\n            ro = pi;\n            \n        }\n        else{break;}\n        \n    }\n    \n    } // wavelengths iteration\n    \n    // Color in XYZ\n    Col /= float(NUM_WL_SAMPLES);\n    \n    // Add previous frame\n    Col.w = 1.;\n    Col += texture(iChannel0,Coo/R.xy);\n\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"// Code by Simon LUCAS - 26/01/2022\n\n#define R iResolution.xy\n#define MP (iMouse.xy/iResolution.xy)\n#define Pi 3.141593\n#define EPS 0.001\n\n#define N1 1.\n\n#define MAX_DEPTH 10\n#define NUM_WL_SAMPLES 10\n\n\n// RANDOM\n\nvec2 seed;\n\nuint pcg(uint v) {\n  uint state = v * uint(747796405) + uint(2891336453);\n  uint word = ((state >> ((state >> uint(28)) + uint(4))) ^ state) * uint(277803737);\n  return (word >> uint(22)) ^ word;\n}\n\nfloat hash () {\n    seed += 1.;\n\treturn float(pcg(pcg(uint(seed.x)) + uint(seed.y))) / float(uint(0xffffffff));\n}\n\n// STRUCTS\n\nstruct Inter\n{\n    float t;\n    vec2 nor;\n    vec2 pos;\n    bool emi;\n};\n\nstruct Sphere\n{\n    vec2 pos;\n    float rad;\n    bool emi;\n};\n\n// WAVELENGTHS\n// source : stack_overflow ( https://www.shadertoy.com/view/WtlSWM )\n#define WL_START   400.0\n#define WL_SAMPLES 300\n#define WL_SAMPLES_ 300.\n\nconst float light[WL_SAMPLES] = float[](0.0, 0.08, 0.16, 0.24, 0.32, 0.4, 0.48, 0.56, 0.64, 0.72, 0.8, 0.88, 0.96, 1.04, 1.12, 1.2, 1.28, 1.36, 1.44, 1.52, 1.6, 1.68, 1.76, 1.84, 1.92, 2.0, 2.08, 2.16, 2.24, 2.32, 2.4, 2.48, 2.56, 2.64, 2.72, 2.8, 2.88, 2.96, 3.04, 3.12, 3.2, 3.28, 3.36, 3.44, 3.52, 3.6, 3.68, 3.76, 3.84, 3.92, 4.0, 4.08, 4.16, 4.24, 4.32, 4.4, 4.48, 4.56, 4.64, 4.72, 4.8, 4.88, 4.96, 5.04, 5.12, 5.2, 5.28, 5.36, 5.44, 5.52, 5.6, 5.68, 5.76, 5.84, 5.92, 6.0, 6.08, 6.16, 6.24, 6.32, 6.4, 6.48, 6.56, 6.64, 6.72, 6.8, 6.88, 6.96, 7.04, 7.12, 7.2, 7.28, 7.36, 7.44, 7.52, 7.6, 7.68, 7.76, 7.84, 7.92, 8.0, 8.076, 8.152, 8.228, 8.304, 8.379999999999999, 8.456, 8.532, 8.608, 8.684000000000001, 8.76, 8.836, 8.911999999999999, 8.988, 9.064, 9.14, 9.216, 9.292, 9.368, 9.444, 9.52, 9.596, 9.672, 9.748000000000001, 9.824, 9.9, 9.975999999999999, 10.052, 10.128, 10.204, 10.28, 10.356, 10.431999999999999, 10.508, 10.584, 10.66, 10.736, 10.812000000000001, 10.888, 10.963999999999999, 11.04, 11.116, 11.192, 11.268, 11.344000000000001, 11.42, 11.496, 11.572, 11.648, 11.724, 11.8, 11.876, 11.952, 12.028, 12.104, 12.18, 12.256, 12.332, 12.408000000000001, 12.483999999999998, 12.559999999999999, 12.636, 12.712, 12.788, 12.864, 12.940000000000001, 13.015999999999998, 13.091999999999999, 13.168, 13.244, 13.32, 13.395999999999999, 13.472, 13.548, 13.624, 13.7, 13.776, 13.852, 13.927999999999999, 14.004, 14.08, 14.156, 14.232, 14.308, 14.384, 14.46, 14.536000000000001, 14.611999999999998, 14.687999999999999, 14.764, 14.84, 14.916, 14.992, 15.068000000000001, 15.144, 15.219999999999999, 15.296, 15.372, 15.448, 15.524, 15.6, 15.627999999999998, 15.656, 15.684, 15.712, 15.739999999999998, 15.767999999999999, 15.796, 15.824, 15.852, 15.879999999999999, 15.908000000000001, 15.936, 15.963999999999999, 15.992, 16.02, 16.048, 16.076, 16.104, 16.132, 16.16, 16.188, 16.216, 16.244, 16.272, 16.299999999999997, 16.328, 16.356, 16.384, 16.412, 16.439999999999998, 16.468, 16.496, 16.523999999999997, 16.552, 16.58, 16.608, 16.636, 16.664, 16.692, 16.72, 16.747999999999998, 16.776, 16.804000000000002, 16.832, 16.86, 16.887999999999998, 16.916, 16.944, 16.972, 17.0, 17.028, 17.055999999999997, 17.084, 17.112, 17.14, 17.168, 17.195999999999998, 17.224, 17.252, 17.28, 17.308, 17.336, 17.363999999999997, 17.392, 17.419999999999998, 17.448, 17.476, 17.503999999999998, 17.531999999999996, 17.56, 17.587999999999997, 17.616, 17.644, 17.672, 17.7, 17.727999999999998, 17.756, 17.784, 17.811999999999998, 17.839999999999996, 17.868, 17.895999999999997, 17.924, 17.951999999999998, 17.98, 18.008, 18.035999999999998, 18.064, 18.092, 18.119999999999997, 18.148, 18.176000000000002, 18.203999999999997, 18.232, 18.259999999999998, 18.287999999999997, 18.316, 18.344, 18.371999999999996);\nconst float d65[WL_SAMPLES] = float[](49.9755, 50.44276000000001, 50.910019999999996, 51.37728, 51.844539999999995, 52.3118, 52.77908, 53.246359999999996, 53.71364, 54.18092, 54.6482, 57.45886, 60.26952, 63.08018, 65.89084, 68.7015, 71.51218, 74.32285999999999, 77.13354, 79.94422, 82.7549, 83.62800000000001, 84.50110000000001, 85.3742, 86.2473, 87.1204, 87.99352, 88.86664, 89.73976, 90.61287999999999, 91.486, 91.68058, 91.87516000000001, 92.06974, 92.26432, 92.4589, 92.65348, 92.84806, 93.04264, 93.23722, 93.4318, 92.75684000000001, 92.08188, 91.40692, 90.73196, 90.057, 89.38206000000001, 88.70712, 88.03218000000001, 87.35723999999999, 86.6823, 88.50056, 90.31882, 92.13708, 93.95534, 95.7736, 97.59188, 99.41015999999999, 101.22844, 103.04672, 104.865, 106.0792, 107.2934, 108.5076, 109.72180000000002, 110.936, 112.15040000000002, 113.3648, 114.5792, 115.7936, 117.008, 117.08840000000001, 117.16879999999999, 117.2492, 117.3296, 117.41, 117.4904, 117.57079999999999, 117.65119999999999, 117.7316, 117.812, 117.5168, 117.2216, 116.9264, 116.6312, 116.336, 116.04100000000001, 115.746, 115.45100000000001, 115.156, 114.861, 114.9672, 115.0734, 115.1796, 115.28580000000001, 115.392, 115.49820000000001, 115.6044, 115.7106, 115.8168, 115.923, 115.21180000000001, 114.50059999999999, 113.7894, 113.07820000000001, 112.367, 111.65580000000001, 110.94460000000001, 110.23340000000002, 109.52220000000001, 108.811, 108.86520000000002, 108.91940000000001, 108.9736, 109.0278, 109.082, 109.13640000000001, 109.1908, 109.2452, 109.2996, 109.354, 109.1988, 109.0436, 108.8884, 108.73320000000001, 108.578, 108.42280000000001, 108.2676, 108.11240000000001, 107.9572, 107.802, 107.50080000000001, 107.1996, 106.89840000000001, 106.59720000000002, 106.296, 105.99480000000001, 105.6936, 105.39240000000001, 105.0912, 104.79, 105.0798, 105.3696, 105.6594, 105.9492, 106.239, 106.52900000000001, 106.819, 107.10900000000001, 107.399, 107.689, 107.3606, 107.0322, 106.7038, 106.3754, 106.047, 105.71860000000001, 105.3902, 105.0618, 104.73339999999999, 104.405, 104.369, 104.333, 104.297, 104.261, 104.225, 104.1892, 104.1534, 104.1176, 104.08180000000002, 104.046, 103.64140000000002, 103.2368, 102.8322, 102.42760000000001, 102.023, 101.61840000000001, 101.21379999999999, 100.8092, 100.40459999999999, 100.0, 99.63342, 99.26684, 98.90026, 98.53368, 98.1671, 97.80052, 97.43394, 97.06736, 96.70078000000001, 96.3342, 96.27958000000001, 96.22496, 96.17034, 96.11572000000001, 96.0611, 96.00648000000001, 95.95185999999998, 95.89724000000001, 95.84261999999998, 95.788, 95.07776, 94.36752, 93.65728, 92.94703999999999, 92.2368, 91.52656, 90.81632, 90.10607999999999, 89.39583999999999, 88.6856, 88.81766, 88.94971999999999, 89.08178000000001, 89.21383999999999, 89.3459, 89.47796, 89.61002, 89.74208, 89.87414000000001, 90.0062, 89.96548000000001, 89.92475999999999, 89.88404, 89.84331999999999, 89.8026, 89.7619, 89.72120000000001, 89.6805, 89.63980000000001, 89.5991, 89.40906000000001, 89.21902, 89.02897999999999, 88.83894000000001, 88.6489, 88.45886000000002, 88.26882, 88.07878, 87.88874, 87.6987, 87.25768000000001, 86.81666, 86.37564, 85.93462, 85.4936, 85.0526, 84.61160000000001, 84.17060000000001, 83.7296, 83.2886, 83.32966, 83.37072, 83.41178, 83.45284, 83.4939, 83.53496, 83.57602, 83.61708, 83.65814, 83.6992, 83.33196000000001, 82.96472, 82.59747999999999, 82.23024000000001, 81.863, 81.49576, 81.12852, 80.76128, 80.39403999999999, 80.0268, 80.04558, 80.06436, 80.08314, 80.10191999999999, 80.1207, 80.13947999999999, 80.15826000000001, 80.17704, 80.19582, 80.2146, 80.42092000000001, 80.62724, 80.83356, 81.03988, 81.2462, 81.45252, 81.65884, 81.86516, 82.07148000000001, 82.2778, 81.87844000000001, 81.47908, 81.07972000000001, 80.68036, 80.281, 79.88164, 79.48228, 79.08292, 78.68356);\n\nconst vec3 xyz_bar[WL_SAMPLES] = vec3[](vec3(0.01431,0.000396,0.06785001), vec3(0.016086,0.0004448,0.07632000800000001), vec3(0.017862,0.0004936000000000001,0.084790006), vec3(0.019638,0.0005424,0.09326000400000001), vec3(0.021414,0.0005912000000000001,0.10173000200000001), vec3(0.02319,0.00064,0.1102), vec3(0.027254,0.0007540000000000001,0.12964000000000003), vec3(0.031318,0.0008680000000000001,0.14908), vec3(0.035382,0.000982,0.16852), vec3(0.039445999999999995,0.001096,0.18796000000000002), vec3(0.04351,0.00121,0.2074), vec3(0.050334000000000004,0.001404,0.24018), vec3(0.057158,0.001598,0.27296), vec3(0.063982,0.001792,0.30574), vec3(0.07080600000000001,0.001986,0.33852000000000004), vec3(0.07763,0.00218,0.3713), vec3(0.08898,0.0025440000000000003,0.42616), vec3(0.10033,0.002908,0.48102), vec3(0.11168,0.0032719999999999997,0.53588), vec3(0.12303,0.003636,0.5907399999999999), vec3(0.13438,0.004,0.6456), vec3(0.150458,0.00466,0.72429002), vec3(0.166536,0.00532,0.80298004), vec3(0.18261399999999997,0.00598,0.88167006), vec3(0.19869199999999998,0.00664,0.9603600800000001), vec3(0.21477,0.0073,1.0390501), vec3(0.228596,0.00816,1.1083600800000002), vec3(0.24242199999999997,0.00902,1.17767006), vec3(0.256248,0.00988,1.24698004), vec3(0.270074,0.01074,1.3162900199999998), vec3(0.2839,0.0116,1.3856), vec3(0.29281999999999997,0.012648,1.433072), vec3(0.30174,0.013696,1.480544), vec3(0.31066,0.014744,1.528016), vec3(0.31958000000000003,0.015792,1.575488), vec3(0.3285,0.01684,1.62296), vec3(0.33245600000000003,0.018072,1.64778), vec3(0.336412,0.019304,1.6726), vec3(0.340368,0.020536,1.69742), vec3(0.34432399999999996,0.021768,1.7222400000000002), vec3(0.34828,0.023,1.74706), vec3(0.348236,0.02436,1.7541680000000002), vec3(0.34819199999999995,0.02572,1.761276), vec3(0.348148,0.02708,1.768384), vec3(0.34810399999999997,0.02844,1.7754919999999998), vec3(0.34806,0.0298,1.7826), vec3(0.345688,0.03144,1.780502), vec3(0.343316,0.03308,1.7784039999999999), vec3(0.34094399999999997,0.03472,1.776306), vec3(0.338572,0.036359999999999996,1.774208), vec3(0.3362,0.038,1.77211), vec3(0.33270000000000005,0.04,1.766508), vec3(0.3292,0.041999999999999996,1.760906), vec3(0.3257,0.044,1.755304), vec3(0.3222,0.046,1.749702), vec3(0.3187,0.048,1.7441), vec3(0.31312,0.0504,1.72912), vec3(0.30754,0.0528,1.71414), vec3(0.30196,0.0552,1.69916), vec3(0.29638,0.0576,1.68418), vec3(0.2908,0.06,1.6692), vec3(0.28286,0.06278,1.64098), vec3(0.27492,0.06556,1.61276), vec3(0.26698,0.06834,1.58454), vec3(0.25904,0.07111999999999999,1.55632), vec3(0.2511,0.0739,1.5281), vec3(0.239952,0.077316,1.480008), vec3(0.228804,0.080732,1.431916), vec3(0.21765600000000002,0.084148,1.383824), vec3(0.206508,0.087564,1.335732), vec3(0.19536,0.09098,1.28764), vec3(0.184708,0.095304,1.238492), vec3(0.174056,0.09962800000000001,1.189344), vec3(0.163404,0.10395199999999999,1.140196), vec3(0.152752,0.10827600000000001,1.091048), vec3(0.1421,0.1126,1.0419), vec3(0.132808,0.11788400000000002,0.99611002), vec3(0.12351600000000001,0.123168,0.95032004), vec3(0.11422399999999999,0.128452,0.90453006), vec3(0.104932,0.133736,0.85874008), vec3(0.09564,0.13902,0.8129501), vec3(0.08810200200000001,0.145076,0.77360008), vec3(0.080564004,0.151132,0.73425006), vec3(0.073026006,0.157188,0.69490004), vec3(0.065488008,0.163244,0.65555002), vec3(0.05795001,0.1693,0.6162), vec3(0.052762008000000006,0.177044,0.585996), vec3(0.047574006,0.184788,0.5557920000000001), vec3(0.042386004000000005,0.192532,0.5255879999999999), vec3(0.037198001999999994,0.200276,0.495384), vec3(0.03201,0.20802,0.46518), vec3(0.028547999999999997,0.218136,0.44280400000000003), vec3(0.025085999999999997,0.228252,0.42042799999999997), vec3(0.021623999999999997,0.238368,0.398052), vec3(0.018161999999999998,0.248484,0.375676), vec3(0.0147,0.2586,0.3533), vec3(0.01274,0.27148,0.33704), vec3(0.01078,0.28436,0.32078), vec3(0.00882,0.29724,0.30452), vec3(0.006859999999999999,0.31012,0.28826), vec3(0.0049,0.323,0.272), vec3(0.004399999999999999,0.33986000000000005,0.26006), vec3(0.0039,0.35672000000000004,0.24812), vec3(0.0034,0.37358,0.23618), vec3(0.0029,0.39044,0.22424), vec3(0.0024,0.4073,0.2123), vec3(0.0037799999999999995,0.42644000000000004,0.20148), vec3(0.00516,0.44558,0.19066), vec3(0.006539999999999999,0.46472,0.17984), vec3(0.00792,0.48386,0.16902), vec3(0.0093,0.503,0.1582), vec3(0.013260000000000001,0.5240400000000001,0.1489), vec3(0.01722,0.54508,0.1396), vec3(0.02118,0.56612,0.1303), vec3(0.025140000000000003,0.58716,0.121), vec3(0.0291,0.6082,0.1117), vec3(0.03593400000000001,0.62856,0.105009998), vec3(0.042768,0.6489199999999999,0.09831999599999999), vec3(0.04960200000000001,0.66928,0.09162999399999999), vec3(0.05643600000000001,0.6896399999999999,0.084939992), vec3(0.06327,0.71,0.07824999), vec3(0.07253600000000002,0.72664,0.07404999400000001), vec3(0.08180200000000001,0.7432799999999999,0.069849998), vec3(0.09106800000000001,0.7599199999999999,0.065650002), vec3(0.100334,0.7765599999999999,0.061450006), vec3(0.1096,0.7932,0.05725001), vec3(0.12078000000000001,0.80696,0.054232008000000005), vec3(0.13196000000000002,0.82072,0.05121400599999999), vec3(0.14314,0.83448,0.048196004), vec3(0.15432,0.84824,0.045178001999999995), vec3(0.1655,0.862,0.04216), vec3(0.17754998000000002,0.87257002,0.039696), vec3(0.18959996,0.88314004,0.037232), vec3(0.20164994,0.89371006,0.034768), vec3(0.21369992000000002,0.90428008,0.032304), vec3(0.2257499,0.9148501,0.02984), vec3(0.23867992000000002,0.92268008,0.027932000000000002), vec3(0.25160994,0.93051006,0.026024), vec3(0.26453996,0.9383400399999999,0.024116), vec3(0.27746998,0.94617002,0.022208), vec3(0.2904,0.954,0.0203), vec3(0.30426,0.95926,0.01892), vec3(0.31811999999999996,0.9645199999999999,0.01754), vec3(0.33198,0.9697799999999999,0.01616), vec3(0.34584,0.97504,0.014779999999999998), vec3(0.3597,0.9803,0.0134), vec3(0.37444998,0.98323002,0.012469999800000001), vec3(0.38919996,0.9861600399999999,0.0115399996), vec3(0.40394994,0.98909006,0.0106099994), vec3(0.41869992,0.9920200799999999,0.009679999199999999), vec3(0.4334499,0.9949501,0.008749999), vec3(0.44916994,0.9959600799999999,0.008149999), vec3(0.46488998,0.99697006,0.007549999), vec3(0.48061001999999997,0.99798004,0.006949999), vec3(0.49633005999999996,0.9989900199999999,0.006349999), vec3(0.5120501,1.0,0.005749999), vec3(0.52854008,0.9990000000000001,0.005379999200000001), vec3(0.54503006,0.998,0.0050099994), vec3(0.56152004,0.997,0.0046399996), vec3(0.57801002,0.996,0.0042699998), vec3(0.5945,0.995,0.0039), vec3(0.61128,0.99172,0.0036699998), vec3(0.6280600000000001,0.98844,0.0034399995999999993), vec3(0.6448400000000001,0.98516,0.0032099994), vec3(0.66162,0.98188,0.0029799991999999997), vec3(0.6784,0.9786,0.002749999), vec3(0.69514,0.97328,0.0026199991999999997), vec3(0.7118800000000001,0.96796,0.0024899994), vec3(0.72862,0.9626399999999999,0.0023599996), vec3(0.74536,0.95732,0.0022299998), vec3(0.7621,0.952,0.0021), vec3(0.77818,0.9446800000000001,0.00204), vec3(0.79426,0.93736,0.00198), vec3(0.81034,0.93004,0.00192), vec3(0.82642,0.92272,0.0018599999999999999), vec3(0.8425,0.9154,0.0018), vec3(0.85726,0.9063200000000001,0.0017700002000000002), vec3(0.87202,0.89724,0.0017400004), vec3(0.8867799999999999,0.8881600000000001,0.0017100006), vec3(0.90154,0.8790800000000001,0.0016800008), vec3(0.9163,0.87,0.001650001), vec3(0.92876,0.8592600000000001,0.0016000008000000001), vec3(0.94122,0.84852,0.0015500006), vec3(0.9536800000000001,0.83778,0.0015000004), vec3(0.96614,0.82704,0.0014500002), vec3(0.9786,0.8163,0.0014), vec3(0.98814,0.80444,0.00134), vec3(0.99768,0.7925800000000001,0.0012799999999999999), vec3(1.00722,0.7807200000000001,0.0012200000000000002), vec3(1.0167599999999999,0.76886,0.00116), vec3(1.0263,0.757,0.0011), vec3(1.03238,0.74458,0.0010800000000000002), vec3(1.03846,0.7321599999999999,0.00106), vec3(1.04454,0.71974,0.0010400000000000001), vec3(1.0506199999999999,0.70732,0.00102), vec3(1.0567,0.6949,0.001), vec3(1.0578,0.68212,0.00096), vec3(1.0589,0.66934,0.00092), vec3(1.06,0.65656,0.00088), vec3(1.0611,0.64378,0.00084), vec3(1.0622,0.631,0.0008), vec3(1.05888,0.61816,0.00076), vec3(1.05556,0.60532,0.0007199999999999999), vec3(1.05224,0.59248,0.00068), vec3(1.04892,0.5796399999999999,0.0006399999999999999), vec3(1.0456,0.5668,0.0006), vec3(1.0370000000000001,0.55404,0.000548), vec3(1.0284,0.54128,0.000496), vec3(1.0198,0.52852,0.00044399999999999995), vec3(1.0112,0.51576,0.000392), vec3(1.0026,0.503,0.00034), vec3(0.98976,0.49064,0.0003200000000000001), vec3(0.97692,0.47828000000000004,0.00030000000000000003), vec3(0.96408,0.46592,0.00028000000000000003), vec3(0.95124,0.45355999999999996,0.00026), vec3(0.9384,0.4412,0.00024), vec3(0.92160998,0.42916,0.00023), vec3(0.90481996,0.41711999999999994,0.00022), vec3(0.88802994,0.40508,0.00021), vec3(0.87123992,0.39304,0.00019999999999999998), vec3(0.8544499,0.381,0.00019), vec3(0.83383992,0.369,0.000172), vec3(0.81322994,0.357,0.000154), vec3(0.7926199599999999,0.345,0.000136), vec3(0.77200998,0.333,0.000118), vec3(0.7514,0.321,0.0001), vec3(0.7296,0.3098,8.9999998e-05), vec3(0.7078,0.2986,7.999999600000001e-05), vec3(0.6859999999999999,0.2874,6.9999994e-05), vec3(0.6642,0.2762,5.9999992e-05), vec3(0.6424,0.265,4.999999e-05), vec3(0.6223000000000001,0.2554,4.5999992e-05), vec3(0.6022,0.24580000000000002,4.1999994e-05), vec3(0.5821000000000001,0.2362,3.7999996000000005e-05), vec3(0.562,0.2266,3.3999998e-05), vec3(0.5419,0.217,3e-05), vec3(0.5231000000000001,0.2086,2.8000000000000003e-05), vec3(0.5043000000000001,0.2002,2.6000000000000002e-05), vec3(0.48550000000000004,0.1918,2.4e-05), vec3(0.4667,0.18339999999999998,2.2e-05), vec3(0.4479,0.175,2e-05), vec3(0.43048000000000003,0.16763999999999998,1.8000000000000004e-05), vec3(0.41306,0.16027999999999998,1.6000000000000003e-05), vec3(0.39564,0.15292,1.4000000000000001e-05), vec3(0.37822,0.14555999999999997,1.2e-05), vec3(0.3608,0.1382,1e-05), vec3(0.34534,0.13196,8.000000000000001e-06), vec3(0.32988,0.12572,6e-06), vec3(0.31442,0.11947999999999999,4.000000000000001e-06), vec3(0.29896,0.11324000000000001,2e-06), vec3(0.2835,0.107,0.0), vec3(0.27054,0.10192000000000001,0.0), vec3(0.25758,0.09684,0.0), vec3(0.24462,0.09176000000000001,0.0), vec3(0.23165999999999998,0.08668000000000001,0.0), vec3(0.2187,0.0816,0.0), vec3(0.20794,0.07748000000000001,0.0), vec3(0.19718000000000002,0.07336000000000001,0.0), vec3(0.18641999999999997,0.06924,0.0), vec3(0.17566,0.06512,0.0), vec3(0.1649,0.061,0.0), vec3(0.15616000000000002,0.057716,0.0), vec3(0.14742,0.054432,0.0), vec3(0.13868,0.051148,0.0), vec3(0.12994,0.047864,0.0), vec3(0.1212,0.04458,0.0), vec3(0.11444000000000001,0.042064000000000004,0.0), vec3(0.10768,0.039548,0.0), vec3(0.10092000000000001,0.037031999999999995,0.0), vec3(0.09416000000000001,0.034516,0.0), vec3(0.0874,0.032,0.0), vec3(0.08264000000000002,0.030240000000000003,0.0), vec3(0.07788,0.02848,0.0), vec3(0.07312,0.02672,0.0), vec3(0.06836,0.02496,0.0), vec3(0.0636,0.0232,0.0), vec3(0.06023400000000001,0.02196,0.0), vec3(0.056868,0.02072,0.0), vec3(0.05350200000000001,0.01948,0.0), vec3(0.050136,0.01824,0.0), vec3(0.04677,0.017,0.0), vec3(0.043996,0.015984,0.0), vec3(0.041222,0.014968000000000002,0.0), vec3(0.038447999999999996,0.013951999999999999,0.0), vec3(0.035674,0.012936,0.0), vec3(0.0329,0.01192,0.0), vec3(0.03086,0.011178,0.0), vec3(0.02882,0.010436,0.0), vec3(0.026779999999999998,0.009694000000000001,0.0), vec3(0.02474,0.008952,0.0), vec3(0.0227,0.00821,0.0), vec3(0.021328000000000003,0.007712600000000001,0.0), vec3(0.019956,0.0072152,0.0), vec3(0.018584000000000003,0.0067178,0.0), vec3(0.017211999999999998,0.006220399999999999,0.0), vec3(0.01584,0.005723,0.0), vec3(0.014943832,0.0053988,0.0), vec3(0.014047664000000001,0.0050746,0.0), vec3(0.013151496,0.0047504,0.0), vec3(0.012255328,0.0044262,0.0));\nconst mat3 xyz_to_rgb = mat3(\n        vec3( 3.2406, -0.9689,  0.0557),\n        vec3(-1.5372,  1.8758, -0.2040),\n        vec3(-0.4986,  0.0415,  1.0570));\n\nint wavelength_to_idx(in float wavelength) {\n    return int(wavelength - WL_START);\n}\n\nfloat cauchy_ior(in float lambda_nm) {\n    float lambda_mum = lambda_nm*1e-3;\n    return 1.6 + 0.01342 / (lambda_mum*lambda_mum);\n}","name":"Common","description":"","type":"common"}]}