{"ver":"0.1","info":{"id":"mtccWH","date":"1699124853","viewed":49,"name":"Light blue bubbles","username":"NihilMea","description":"Light blue bubbles.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["bubbles"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // translate uv coords to center\n\tvec2 uv = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n\n\tfloat scale = iResolution.x / iResolution.y; // ONLY FOR X AXIS scaling maps [-1.0, 1.0] to range from left to right border\n\n\t// background color \n\t//vec3 color = vec3(0.6, 0.84, 1.0);\n\t//vec3 bubble_color1 = vec3(0.1, 0.1, 0.8);\n\t//vec3 bubble_color2 = vec3(0.2, 0.2, 0.9);\n    vec3 color = vec3(0.6, 0.84, 1.0);\n\tvec3 bubble_color1 = vec3(0.1, 0.4, 0.8);\n\tvec3 bubble_color2 = vec3(0.2, 0.5, 0.9);\n    // inital parameters\n\tfloat PI = 3.1415926;\n\tint bubble_num = 30;\n\tfloat min_R = 0.2;\n\tfloat max_R = 0.35;\n\tfloat min_v = 0.6;\n\tfloat max_v = 0.9;\n\n    // bubbles stuff\t\n\tfor(int i = 0; i < bubble_num; ++i) {\n\t\tfloat k = float(i) / float(bubble_num);\n\t\t// generating bubble\n\t\tfloat size = sin(k * 10.51 * PI) * 0.5 + 0.5; // from 0 to 1\n\t\tfloat R = min_R + (max_R - min_R) * size;\n\t\tfloat v_x = 0.0; //sin(0.0) *0.45 + 0.55; // speed from 0.1 to 1\n\t\t// float v_y = ((sin(k * 17.43 * PI) + 1.0) / 2.0 * (max_v - min_v) + min_v) * (max_R * 1.5 - R); // speed from 0.1 to 1\n\t\tfloat v_y = min_v*(max_R*1.5-R);\n        float pos_x = sin(k * 4.2 * PI);\n\t\tfloat pos_y = sin(k * 2.4 * PI);\n\n        // bubble size, position and color\n\t\t// vec2 position = vec2(pos_x * scale, -(R + 1.0) + mod(pos_y + v_y * iTime, 2.0 * (R + 1.0)));\n\t\tvec2 position = vec2((-(R + 1.0) + 2.0 * (R + 1.0)*mod(pos_x + v_x * iTime, 1.0)) * scale, -(R + 1.0) + 2.0 * (R + 1.0)*mod(pos_y + v_y * iTime, 1.0));\n\t\t// vec3  col = mix( bubble_color1, bubble_color2, 0.5+0.1*sin(float(i)*1.2+1.9));\n\t\tvec3 col = mix(bubble_color1, bubble_color2, position.y);\n\n\t\t// calculating distance from bubble center to current fragment\n\t\tfloat dist = length(uv - position);\t\t\n\t\t// coloring only inside bubble\n\t\tif(dist <= R) {\n\t\t\tcolor = col * smoothstep(0.0, 1.0, dist) + color * smoothstep(1.0, 0.0, dist);\n\t\t}\n\t}\n\n\tfragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}