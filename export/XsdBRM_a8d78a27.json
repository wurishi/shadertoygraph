{"ver":"0.1","info":{"id":"XsdBRM","date":"1524596546","viewed":289,"name":"Fake Reflections (Quick & Dirty)","username":"slerpy","description":"Quick and dirty fake reflection test","likes":7,"published":1,"flags":32,"usePreview":0,"tags":["3d","reflection","fake"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 screen(vec2 p, float b)\n{\n    p.x *= iResolution.y/iResolution.x;\n    p.x += .5;\n    return texture(iChannel0, p, b);\n}\n\nmat3 rx(float a)\n{\n    float sa=sin(a), ca=cos(a);\n    return mat3(1.,0.,0.,0.,ca,sa,0.,-sa,ca);\n}\n\nmat3 ry(float a)\n{\n    float sa=sin(a), ca=cos(a);\n    return mat3(ca,0.,sa,0.,1.,0.,-sa,0.,ca);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 rd = normalize(vec3(2.*fragCoord-iResolution.xy, 4.*iResolution.y));\n    vec3 ro = vec3(0, .3, -3);\n    \n    mat3 rm = rx(-.4) * ry(.5*cos(.3*iTime));\n    ro *= rm, rd *= rm;\n    \n    vec3 uv = ro+rd*(-ro.z/rd.z);\n    vec3 sp = ro+rd*(-ro.y/rd.y);\n    \n    \n    float d = 4. / iResolution.y;\n    float gate = smoothstep(-d, d, uv.z-sp.z);\n    \n    vec4 tex = texture(iChannel1, sp.xz);\n    float wood = mix(1., tex.r, gate);\n    float blur = 8.0 * tex.g * tex.g * gate;\n    uv.y += 0.2 * tex.b * gate;\n    \n    \n    uv.y = abs(uv.y);\n    fragColor = wood * screen(uv.xy, blur);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define ITER 120\n\nvec2 csq(vec2 c) \n{\n    return vec2(\n        c.x*c.x - c.y*c.y,\n        c.y*c.x + c.x*c.y\n    );\n}\n\nfloat julia(vec2 z, vec2 c)\n{   \n    int i = 0;\n    for(;++i<ITER;)\n    {\n        z = csq(z) + c;\n        if(dot(z,z) > 4.0) break;\n    }\n    return float(i) / float(ITER);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 z = (2.*fragCoord - iResolution.xy) / iResolution.y;\n    z = z.yx + vec2(.6, 0);\n    vec2 c = vec2(-0.835,-0.2321);\n    fragColor = vec4(3. * pow(julia(z, c), 1.5));\n}","name":"Buf A","description":"","type":"buffer"}]}