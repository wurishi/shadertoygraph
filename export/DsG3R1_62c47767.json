{"ver":"0.1","info":{"id":"DsG3R1","date":"1679727900","viewed":113,"name":"cartoon bouncing ball","username":"celyk","description":"This is the ideal bouncing ball. You may not like it, but this is what peak bouncing looks like.","likes":16,"published":1,"flags":32,"usePreview":0,"tags":["a"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = textureLod(iChannel0,fragCoord/iResolution.xy,0.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"PointMass ball;\n//PointMass spring;\n\nconst int iteration_steps = 9;\n\nvoid applyForce(inout PointMass point_mass, vec2 force){\n    point_mass.linear_acc += force * point_mass.inv_mass;\n}\n\nvoid integrate(float dt){\n    dt /= float(iteration_steps);\n    for(int i = 0; i < iteration_steps; i++){\n        float dist_ball = sceneSDF(ball.linear_pos);\n        vec2 g = vec2(D(sceneSDF,ball.linear_pos,vec2(.001,0)), D(sceneSDF,ball.linear_pos,vec2(0,.001)));\n        ball.linear_vel += g * max(-(dist_ball-0.2)*400.0 ,0.0) * dt;\n        \n        ball.linear_vel += ball.linear_acc * dt;\n        ball.linear_pos += ball.linear_vel * dt;\n    }\n    \n    ball.linear_acc = vec2(0);\n}\n\nvoid mainImage( out vec4 fragColor, vec2 fragCoord )\n{\n    vec2 m = getNormalizedCoords(iMouse.xy);\n    \n    fragColor = vec4(0.0);\n    //if(iFrame < 1) return;\n    \n    // LOAD\n    ball = LOAD_POINT_MASS(0,0);\n    \n    \n    //m = vec2(0);\n    ball.inv_mass = 1.0;\n    applyForce(ball, vec2(0,-5)/ball.inv_mass);\n    applyForce(ball, -ball.linear_vel*.3);\n    \n\n    if(iMouse.z>0.0) {\n        applyForce(ball,-ball.linear_vel*16.0);\n        applyForce(ball,(m - ball.linear_pos)*200.0);\n    }\n    \n    \n    integrate(1.0/30.0);\n    \n    // init\n    if(iFrame < 1){\n        ball.linear_pos = vec2(1.32,.6);\n    }\n    \n    // STORE\n    STORE_POINT_MASS(0,0,ball);\n    \n    //STORE(0,0,vec4(p,0,0));\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define STORE(X,Y,A) \\\n    if(ivec2(fragCoord) == ivec2(X,Y)) { \\\n        fragColor = vec4(A); \\\n        return; \\\n    }\n#define LOAD(X,Y) textureLod(iChannel0,(vec2(X,Y)+0.5)/iResolution.xy,0.0)\n\n\n#define D(F,P,E) (  ( F( (P)+(E) ) - F( P ) )/length(E)  )\n\nstruct PointMass{\n    vec2 linear_pos;\n    vec2 linear_vel;\n    vec2 linear_acc;\n    float inv_mass;\n};\n#define STORE_POINT_MASS(X,Y,A) \\\nSTORE(X,Y,vec4(A.linear_pos,0,0)); \\\nSTORE(X,Y+1,vec4(A.linear_vel,0,0)); \\\nSTORE(X,Y+2,vec4(A.linear_acc,0,0)); \\\nSTORE(X,Y+3,vec4(A.inv_mass,0,0,0));\n\n#define LOAD_POINT_MASS(X,Y) PointMass(LOAD(X,Y).xy,LOAD(X,Y+1).xy,LOAD(X,Y+2).xy,LOAD(X,Y+3).x)\n\n#define getNormalizedCoords(P) ( (2.0*P - iResolution.xy)/iResolution.y )\n\nfloat dot2(vec2 a){return dot(a,a);}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\nfloat sdStairs( in vec2 p, in vec2 wh, in float n )\n{\n    vec2 ba = wh*n;\n    float d = min(dot2(p-vec2(clamp(p.x,0.0,ba.x),0.0)), \n                  dot2(p-vec2(ba.x,clamp(p.y,0.0,ba.y))) );\n    float s = sign(max(-p.y,p.x-ba.x) );\n\n    float dia = length(wh);\n    p = mat2(wh.x,-wh.y, wh.y,wh.x)*p/dia;\n    float id = clamp(round(p.x/dia),0.0,n-1.0);\n    p.x = p.x - id*dia;\n    p = mat2(wh.x, wh.y,-wh.y,wh.x)*p/dia;\n\n    float hh = wh.y/2.0;\n    p.y -= hh;\n    if( p.y>hh*sign(p.x) ) s=1.0;\n    p = (id<0.5 || p.x>0.0) ? p : -p;\n    d = min( d, dot2(p-vec2(0.0,clamp(p.y,-hh,hh))) );\n    d = min( d, dot2(p-vec2(clamp(p.x,0.0,wh.x),hh)) );\n    \n    return sqrt(d)*s;\n}\n\n// polynomial smooth min\nfloat smin( float a, float b, float k )\n{\n    float h = max( k-abs(a-b), 0.0 )/k;\n    return min( a, b ) - h*h*k*(1.0/4.0);\n}\n\nfloat sceneSDF(vec2 p){\n    float d = -sdBox(p,vec2(1.5,.9));\n    \n    //p.y = fract(p.y-0.8)-0.8;\n    d = min(d, sdStairs(p+vec2(.5,.6),vec2(.7,.3),5.0) );\n    \n    return d;\n}\n\n\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"PointMass ball;\n\nvoid draw( out vec4 fragColor, vec2 fragCoord ){   \n    float dt = 1.0/60.0;     \n    fragColor = vec4(1,1,1,1);\n    \n    vec2 uv = getNormalizedCoords(fragCoord);\n\n    float d = sceneSDF(uv);\n    vec2 g = vec2(D(sceneSDF,uv,vec2(.001,0)), D(sceneSDF,uv,vec2(0,.001)));\n    //fragColor.xy *= abs(g);\n    //fragColor.z = 0.0;\n    //d = min(d,length(uv - p) - .25);\n    \n    float frame = LOAD(16,0).x;\n    float rn = (textureLod(iChannel1,floor(frame + iTime*34.)*.0777+uv*.1,0.0).x-0.5);\n    \n    uv -= ball.linear_pos;\n    float l = length( ball.linear_vel );\n    vec2 v = ball.linear_vel/l;\n    l = 1.0+pow(7.0*l*dt,3.);\n    uv = dot(uv,v)*v/l + (uv - dot(uv,v)*v)*sqrt(l);\n    float d0 = -smin(d,-(length(uv) - rn*.04 - .2 - max(0.15-sceneSDF(ball.linear_pos),0.0)*.5 ),.05);\n\n    d /= fwidth(d);\n    d = min(d,abs(d0)/length(vec2(dFdx(d0),dFdy(d0))) - 3.0 - rn*3.);\n    \n    fragColor.xyz *= max(clamp(d,0.0,1.0),0.0);\n}\n\nvoid mainImage( out vec4 fragColor, vec2 fragCoord )\n{\n    fragColor = textureLod(iChannel3,fragCoord/iResolution.xy,0.0);\n    \n    ball = LOAD_POINT_MASS(0,0);\n    \n    float frame = textureLod(iChannel3,(vec2(16,0)+0.5)/iResolution.xy,0.0).x; //LOAD(16,0).x;\n    float new_frame = frame + clamp(length(ball.linear_vel)*15.,4.0,30.0) / 60.0 + texture(iChannel1,vec2(iTime)).x*.1;\n    \n    STORE(16,0,vec4(new_frame,0,0,0));\n    \n    if( int(frame) < int(new_frame)){\n        draw(fragColor,fragCoord);\n    }\n}\n\n\n/*\n{\nfloat frame = LOAD(16,0).x;\n    \n    float new_frame = frame + 24.0/60.0;\n    \n    STORE(16,0,vec4(new_frame,0,0,0));\n    \n    if( int(frame) < int(new_frame) || (iFrame == 0)){\n        fragColor = textureLod(iChannel1,fragCoord/iResolution.xy,0.0);\n        return;\n    }\n    \n    fragColor = textureLod(iChannel0,fragCoord/iResolution.xy,0.0);\n}*/","name":"Buffer B","description":"","type":"buffer"}]}