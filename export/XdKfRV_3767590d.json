{"ver":"0.1","info":{"id":"XdKfRV","date":"1539617772","viewed":178,"name":"Ahziel - Multicolor sin waves","username":"Ahziel","description":"Journey through the \"Book of shader\" - Functions\nI do shaders to learn and have fun. If you have any advice, don't hesitate to tell me ! ","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["graph"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TWO_PI 6.28318530718\n\nfloat plotX(vec2 st, float pct){\n  return  smoothstep( pct-0.01, pct, st.y) -\n          smoothstep( pct, pct+0.01, st.y);\n}\n\nfloat plotY(vec2 st, float pct){\n  return  smoothstep( pct-0.01, pct, st.x) -\n          smoothstep( pct, pct+0.01, st.x);\n}\n\nvec3 hsb2rgb( in vec3 c ){\n    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),\n                             6.0)-3.0)-1.0,\n                     0.0,\n                     1.0 );\n    rgb = rgb*rgb*(3.0-2.0*rgb);\n    return c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nfloat wave(in vec2 st, in float freq, bool isVertical, bool isLfromR)\n{\n    float coord;\n    coord = st.y * float(isVertical) + (1.0 - float(isVertical)) * st.x;\n    float amplitude = 1.0 - coord;\n    \n    float pct;\n    \n    if(isLfromR)\n    {\n        pct = cos((coord + iTime) * freq) / 2.0 + 0.5;\n    \tpct = 0.5 * coord + pct * amplitude ;\n    }\n    else\n    {\n        pct = -cos((amplitude + iTime) * freq) / 2.0 + 0.5;\n    \tpct = 0.5 * amplitude + pct * coord ;\n    }\n    \n    float pos = plotY(st, pct) * float(isVertical) + (1.0 - float(isVertical)) * plotX(st, pct);\n    return pos;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 st = fragCoord/iResolution.xy;\n    \n    float freq = 0.1;\n    \n    vec2 toCenter = vec2(0.5)-st;\n    float angle = atan(toCenter.y,toCenter.x);\n    float radius = length(toCenter)*2.0;\n\n    vec3 color = hsb2rgb(vec3((angle/TWO_PI)+0.5,radius,1.0));    \n    \n    float waves;\n    const float size = 10.0;\n    \n    for(float i = 0.0; i < size; i++)\n    {\n\t\twaves = waves + wave(st,freq * float(i),false,false);\n\t\twaves = waves + wave(st,freq * float(i),false,true);\n\t\twaves = waves + wave(st,freq * float(i),true,false);\n\t\twaves = waves + wave(st,freq * float(i),true,true);\n    }\n    \n    \n    vec3 res;\n    res = res + vec3(waves) * color;\n\n    // Output to screen\n    fragColor = vec4(res,1.0);\n}","name":"Image","description":"","type":"image"}]}