{"ver":"0.1","info":{"id":"wldXDM","date":"1581120934","viewed":280,"name":"marching army","username":"monsterkodi","description":"These guys came out of nowhere, \nI wanted to do something completely different :)\nSorry for the long compile time :(","likes":6,"published":1,"flags":16,"usePreview":1,"tags":["sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define keys(x,y)  texelFetch(iChannel0, ivec2(x,y), 0)\nbool keyState(int key) { return keys(key, 2).x < 0.5; }\nbool keyDown(int key)  { return keys(key, 0).x > 0.5; }\n\n#define ZERO min(iFrame,0)\n#define CAM_DIST   25.0\n#define MAX_STEPS  256\n#define MIN_DIST   0.001\n#define MAX_DIST   260.0\n\n#define NONE 0\n#define FLOR 1\n#define SKIN 2\n#define DBLU 3\n#define LBLU 4\n#define BLCK 5\n\nMat[5] material = Mat[5](\n    //  hue   sat  lum    shiny  glossy\n    Mat(0.5,  0.0, 0.005, 0.0,   0.0 ), // FLOR\n    Mat(0.05, 1.0, 1.0,   0.3,   0.5 ), // SKIN\n    \n    Mat(0.67, 0.5, 0.25,  0.1,   0.0 ), \n    Mat(0.67, 1.0, 0.75,  0.3,   0.6 ),\n    Mat(0.5,  0.0, 0.01,  0.0,   0.0 )\n);\n\nbool space, anim, soft, occl, light, dither, foggy, rotate, normal, depthb;\n\nvec3 grid(vec3 bg)\n{\n    vec2 guv = gl.frag.xy - iResolution.xy / 2.;\n    float grid = dot(step(mod(guv.xyxy, vec4(10,10,100,100)), vec4(1)), vec4(.5, .5, 1., 1.));\n    return mix(bg, vec3(0.02,0.02,0.1), grid);\n}\n\n// 00     00   0000000   00000000   \n// 000   000  000   000  000   000  \n// 000000000  000000000  00000000   \n// 000 0 000  000   000  000        \n// 000   000  000   000  000        \n\nvoid dummy(vec2 id)\n{\n    vec3 bp = -vz*0.3 + sin(iTime*5.0)*0.2*vy;\n    vec3 hp = bp+1.8*vz+vy*(1.8+0.2*sin(id.x*0.08+0.07*id.y+iTime*4.0));\n    \n    float boxDist = sdBox(bp, vec3(1), 0.5);\n    if (gl.sdf.dist < boxDist - 1.5) { return; }\n    \n    float d = sdCapsule (hp-0.5*vy, hp+0.5*vy, 1.0);          // head\n    d = opDiff(d, sdLine(hp+vz*0.6+vy*0.5, vx, 0.32), 0.2);   // eyes\n    sdMat(SKIN, d);                                           // head\n    sdMat(LBLU, sdCylinder(bp-vx*1.5+vy, bp+vx*1.5+vy,  0.6, 0.5)); // shoulder\n    sdMat(LBLU, sdCylinder(bp-vx+vy,     bp+vx+vy,     1.0, 0.5));  // neck\n    sdMat(DBLU, boxDist);                // body\n    \n    vec3 lap = bp+1.25*vy-1.75*vx -smoothstep(-0.6, 0.6, cos(iTime*5.0+PI))*0.1*vy;\n    vec3 rap = bp+1.25*vy+1.75*vx -smoothstep(-0.6, 0.6, cos(iTime*5.0))*0.1*vy;\n    \n    sdMat(LBLU, sdCylinder(lap,lap-1.6*vy, 0.4, 0.35)); // larm\n    sdMat(LBLU, sdCylinder(rap,rap-1.6*vy, 0.4, 0.35)); // rarm\n    sdMat(SKIN, sdSphere  (lap-2.25*vy, 0.75)); // lhand\n    sdMat(SKIN, sdSphere  (rap-2.25*vy, 0.75)); // rhand\n    \n    sdMat(BLCK, sdCapsule(lap-2.25*vy-0.2*vx, lap-(2.25+0.25*smoothstep(-0.2, 0.3, sin(id.x*0.08+0.07*id.y+iTime*4.0)))*vy-0.2*vx+2.9*vz, 0.25)); // baton\n        \n    vec3 llp = bp-(1.0-0.4*max(0.0,sin(iTime*5.0)))*vy-0.75*vx -cos(iTime*5.0)*0.2*vz;\n    vec3 rlp = bp-(1.0-0.4*max(0.0,sin(iTime*5.0+PI)))*vy+0.75*vx -cos(iTime*5.0+PI)*0.2*vz;\n    \n    sdMat(LBLU,  sdCylinder(llp,    llp-vy,     0.5, 0.25)); // leg\n    sdMat(LBLU,  sdCylinder(rlp,    rlp-vy,     0.5, 0.25)); // leg\n    sdMat(DBLU,  sdBox     (llp-1.5*vy+vz*0.25, vec3(0.35,0.25,0.70), 0.5)); // foot\n    sdMat(DBLU,  sdBox     (rlp-1.5*vy+vz*0.25, vec3(0.35,0.25,0.70), 0.5)); // foot\n        \n    sdMat(BLCK, sdBox(bp+1.5*vy-1.75*vz, vec3(0.75,0.75,0.1), 0.5)); // rucksack\n}\n\nfloat map(vec3 p)\n{\n    float rep = 10.0;\n    vec2 id = vec2(round(p.x/rep)*rep, round(p.z/rep)*rep);\n    vec3 q = p-vec3(id.x, 0, id.y);\n\n    gl.sdf = SDF(MAX_DIST, q, NONE);\n    \n    if (cam.pos.y > -3.25) sdMat(FLOR, sdPlane(-3.25*vy, vy));\n    \n    dummy(id);\n    \n    // id.y -= rep;\n    // gl.sdf.pos = p-vec3(id.x, 0, id.y);\n    // dummy(id);\n       \n    return gl.sdf.dist;\n}\n\n// 000   000   0000000   00000000   00     00   0000000   000      \n// 0000  000  000   000  000   000  000   000  000   000  000      \n// 000 0 000  000   000  0000000    000000000  000000000  000      \n// 000  0000  000   000  000   000  000 0 000  000   000  000      \n// 000   000   0000000   000   000  000   000  000   000  0000000  \n\nvec3 getNormal(vec3 p)\n{\n    vec3 n = v0;\n    for (int i=ZERO; i<4; i++)\n    {\n        vec3 e = 0.5773*(2.0*vec3((((i+3)>>1)&1),((i>>1)&1),(i&1))-1.0);\n        n += e*map(p+e*0.0001);\n    }\n    return normalize(n);\n}\n\n// 00     00   0000000   00000000    0000000  000   000  \n// 000   000  000   000  000   000  000       000   000  \n// 000000000  000000000  0000000    000       000000000  \n// 000 0 000  000   000  000   000  000       000   000  \n// 000   000  000   000  000   000   0000000  000   000  \n\nfloat rayMarch(vec3 ro, vec3 rd)\n{\n    float dz = 0.0;\n    for (int i = ZERO; i < MAX_STEPS; i++)\n    {\n        vec3 p = ro + dz * rd;\n        float d = map(p);\n        dz += d;\n        if (d < MIN_DIST) return dz;\n        if (dz > MAX_DIST) break;\n    }\n    gl.sdf.mat = NONE;\n    return dz;\n}\n\n//  0000000  000   000   0000000   0000000     0000000   000   000  \n// 000       000   000  000   000  000   000  000   000  000 0 000  \n// 0000000   000000000  000000000  000   000  000   000  000000000  \n//      000  000   000  000   000  000   000  000   000  000   000  \n// 0000000   000   000  000   000  0000000     0000000   00     00  \n\nfloat softShadow(vec3 ro, vec3 lp, float k)\n{\n    float shade = 1.0;\n    float dist = MIN_DIST;    \n    vec3 rd = (lp-ro);\n    float end = max(length(rd), MIN_DIST);\n    float stepDist = end/25.0;\n    rd /= end;\n    for (int i = ZERO; i < 25; i++)\n    {\n        float h = map(ro+rd*dist);\n        shade = min(shade, k*h/dist);\n        dist += clamp(h, 0.02, stepDist*2.0);\n        if (h < 0.0 || dist > end) break; \n    }\n    return min(max(shade, 0.0)+gl.shadow, 1.0); \n}\n\n//  0000000    0000000   0000000  000      000   000   0000000  000   0000000   000   000  \n// 000   000  000       000       000      000   000  000       000  000   000  0000  000  \n// 000   000  000       000       000      000   000  0000000   000  000   000  000 0 000  \n// 000   000  000       000       000      000   000       000  000  000   000  000  0000  \n//  0000000    0000000   0000000  0000000   0000000   0000000   000   0000000   000   000  \n\nfloat getOcclusion(vec3 p, vec3 n)\n{\n    if (!occl) return 1.0;\n    float a = 0.0;\n    float weight = 1.0;\n    for (int i = ZERO; i <= 6; i++)\n    {\n        float d = (float(i) / 6.0) * 0.3;\n        a += weight * (d - map(p + n*d));\n        weight *= 0.8;\n    }\n    float f = clamp01(1.0-a);\n    return f*f;\n}\n\n// 000      000   0000000   000   000  000000000  \n// 000      000  000        000   000     000     \n// 000      000  000  0000  000000000     000     \n// 000      000  000   000  000   000     000     \n// 0000000  000   0000000   000   000     000     \n\nvec3 getLight(vec3 p, vec3 n, int mat)\n{\n    if (mat == NONE) return black;\n    \n    Mat m = material[mat-1];\n\n    vec3 fakeL2 = vec3(p.x, gl.light2.yz);\n    \n    vec3  col = hsl(m.hue, m.sat, m.lum);\n    float dl1 = dot(n,normalize(gl.light1-p));\n    float dl2 = dot(n,normalize(fakeL2-p));\n    float dnl = max(dl1, dl2);\n    \n    col  = (light) ? gray(col) : col;\n    \n    col *=  clamp(pow(dnl, 1.0+m.shiny*20.0), gl.ambient, 1.0) * \n            softShadow(p, gl.light1, 6.0) * \n            softShadow(p, fakeL2, 6.0) * \n            getOcclusion(p, n);\n            \n    col += pow(m.glossy, 3.0)*vec3(pow(smoothstep(0.0+m.glossy*0.9, 1.0, dnl), 1.0+40.0*m.glossy));\n    \n    return clamp01(col);\n}\n\n// 00     00   0000000   000  000   000\n// 000   000  000   000  000  0000  000\n// 000000000  000000000  000  000 0 000\n// 000 0 000  000   000  000  000  0000\n// 000   000  000   000  000  000   000\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    initGlobal(fragCoord, iResolution, iMouse, iTime);\n    gl.zero = ZERO;\n    for (int i = KEY_1; i <= KEY_9; i++) { if (keyDown(i)) { gl.option = i-KEY_1+1; break; } }\n    \n    rotate =  keyState(KEY_R);\n    anim   =  keyState(KEY_RIGHT);\n    occl   =  keyState(KEY_UP);\n    dither =  keyState(KEY_D);\n    normal = !keyState(KEY_X);\n    depthb = !keyState(KEY_Z);\n    light  = !keyState(KEY_LEFT);\n    soft   = !keyState(KEY_DOWN);\n    space  = !keyState(KEY_SPACE);\n    foggy  =  keyState(KEY_F);\n    \n    vec3 cols = v0, col = v0;\n    \n    int AA = (soft) ? 2 : 1;\n    \n    vec2 ao = vec2(0);\n            \n    initCam(CAM_DIST+(rotate ? CAM_DIST*(sin(iTime*0.15)*0.5+0.5) : 0.0), \n            (iMouse.z > 0.0 ? -gl.mp : (rotate ? vec2(2.0+0.5*cos(iTime*0.15), 0.25+0.0625*sin(iTime*0.3)) : -gl.mp)));\n    \n    #ifndef TOY\n    if (space) lookAtFrom(iCenter, iCamera);\n    #endif\n    \n    gl.light1 = cam.pos + 5.0*vy - 3.0*vx;\n    gl.light2 = vec3(0.0, 20.0, -10.0+60.0*(sin(iTime*0.3)*0.5+0.5));\n    \n    if (gl.option > 3) cam.fov += float(gl.option);\n    \n    for (int am=ZERO; am<AA; am++)\n    for (int an=ZERO; an<AA; an++)\n    {\n        if (AA > 1) ao = vec2(float(am),float(an))/float(AA)-0.5;\n\n        gl.uv = (2.0*(fragCoord+ao)-iResolution.xy)/iResolution.y;\n    \n        vec3 rd = normalize(gl.uv.x*cam.x + gl.uv.y*cam.up + cam.fov*cam.dir);\n        float d = rayMarch(cam.pos, rd);\n        int mat = gl.sdf.mat;\n        float dst = d;\n        vec3  p = cam.pos + d * rd;\n        vec3  n = getNormal(p);\n        \n        if (normal || depthb)\n        {\n            vec3 nc = normal ? mat == NONE ? black : n : white;\n            vec3 zc = depthb ? vec3(1.0-pow(dst/MAX_DIST,0.1)) : white;\n            col = nc*zc;\n        }\n        else\n        {\n            col = getLight(p, n, mat);\n            if (foggy) col = mix(col, vec3(0.005), smoothstep(MAX_DIST*0.1, MAX_DIST*0.5, d));\n        }\n\n        cols += col;\n    }\n    col = cols/float(AA*AA);\n    \n    #ifndef TOY\n    col += vec3(print(0,0,iFrameRate));\n    #endif    \n    \n    fragColor = postProc(col, dither, true, true);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define TOY\n#define PI   3.141592653589\n#define TAU  6.283185307178\n#define E    2.718281828459\n#define EPS  0.000000000001\n#define PHI  1.618033988750\n#define EPS1 1.00001\n\n#define KEY_LEFT  37\n#define KEY_UP    38\n#define KEY_RIGHT 39\n#define KEY_DOWN  40\n#define KEY_SPACE 32\n#define KEY_1     49\n#define KEY_9     57\n#define KEY_A     65\n#define KEY_C     67\n#define KEY_D     68\n#define KEY_E     69\n#define KEY_F     70\n#define KEY_N     78\n#define KEY_Q     81\n#define KEY_R     82\n#define KEY_S     83\n#define KEY_W     87\n#define KEY_X     88\n#define KEY_Z     90\n\nconst vec3 v0 = vec3(0,0,0);\nconst vec3 vx = vec3(1,0,0);\nconst vec3 vy = vec3(0,1,0);\nconst vec3 vz = vec3(0,0,1);\n\nconst vec3 red   = vec3(0.8,0.0,0.0);\nconst vec3 green = vec3(0.0,0.5,0.0);\nconst vec3 blue  = vec3(0.2,0.2,1.0);\nconst vec3 white = vec3(1.0,1.0,1.0);\nconst vec3 black = vec3(0.0,0.0,0.0);\n\n#define sdMat(m,d)  if (d < gl.sdf.dist) { gl.sdf.dist = d; gl.sdf.mat = m; }\n    \n//  0000000   000       0000000   0000000     0000000   000      \n// 000        000      000   000  000   000  000   000  000      \n// 000  0000  000      000   000  0000000    000000000  000      \n// 000   000  000      000   000  000   000  000   000  000      \n//  0000000   0000000   0000000   0000000    000   000  0000000  \n\nstruct Text {\n    ivec2 size;\n    ivec2 adv;\n} text;\n\nstruct SDF {\n    float dist;\n    vec3  pos;\n    int   mat;\n};\n\nstruct _gl {\n    vec2  uv;\n    vec2  frag;\n    vec2  mouse;\n    vec2  mp;\n    ivec2 ifrag;\n    float aspect;\n    vec4  color;\n    int   option;\n    float time;\n    vec3  light1;\n    vec3  light2;\n    float ambient;\n    float shadow;\n    int   zero;\n    SDF   sdf;\n} gl;\n\nstruct _cam {\n    vec3  tgt;\n    vec3  pos;\n    vec3  pos2tgt;\n    vec3  dir;\n    vec3  up;\n    vec3  x;\n    float dist;\n    float fov;\n} cam;\n\nstruct Mat {\n    float hue;\n    float sat;\n    float lum;\n    float shiny;\n    float glossy;\n};\n\nuniform sampler2D fontChannel;\n\nvoid initGlobal(vec2 fragCoord, vec3 resolution, vec4 mouse, float time)\n{\n    text.size = ivec2(16,32)*2;\n    text.adv  = ivec2(text.size.x,0);\n    \n    mouse.xy = min(mouse.xy,resolution.xy);\n    if (mouse.z < 1.0)\n    {\n        if (mouse.z > -1.0)\n            gl.mouse = resolution.xy*0.5;\n        else\n            gl.mouse = mouse.xy;\n    }\n    else gl.mouse = mouse.xy;\n    \n    gl.mp = (2.0*abs(gl.mouse)-vec2(resolution.xy))/resolution.y;    \n\n    gl.aspect = resolution.x / resolution.y;\n    gl.frag   = fragCoord;\n    gl.ifrag  = ivec2(fragCoord);\n    gl.uv     = (fragCoord+fragCoord-resolution.xy)/resolution.y;\n    \n    gl.ambient = 0.03;\n    gl.shadow  = 0.25;\n}\n\nfloat powi(int a, int b) { return pow(float(a), float(b)); }\nfloat log10(float a) { return log(a)/log(10.0); }\nfloat clamp01(float v) { return clamp(v, 0.0, 1.0); }\nvec3  clamp01(vec3 v) { return clamp(v, 0.0, 1.0); }\n\n// 00000000   00000000   000  000   000  000000000  \n// 000   000  000   000  000  0000  000     000     \n// 00000000   0000000    000  000 0 000     000     \n// 000        000   000  000  000  0000     000     \n// 000        000   000  000  000   000     000     \n\n#ifndef TOY\nfloat print(ivec2 pos, int ch)\n{\n    ivec2 r = gl.ifrag-pos; bool i = r.y>0 && r.x>0 && r.x<=text.size.y && r.y<=text.size.y;\n    return i ? texelFetch(iChannel2,ivec2((ch%16)*64,(1024-64-64*(ch/16)))+r*64/text.size.y,0).r : 0.0;\n}\n\nfloat print(ivec2 pos, float v)\n{\n    float c = 0.0; ivec2 a = text.adv; \n    float fv = fract(v);\n    v = (fv > 0.995 || fv < 0.005) ? floor(v) : v;\n    float f = abs(v);\n    int i = (fv == 0.0) ? 1 : fract(v*10.0) == 0.0 ? -1 : -2;\n    int ch, u = max(1,int(log10(f))+1);\n    ivec2 p = pos+6*a;\n    for (; i <= u; i++) {\n        if (i == 0)     ch = 46;\n        else if (i > 0) ch = 48+int(mod(f, powi(10,i))/powi(10,i-1));\n        else            ch = 48+int(mod(f+0.005, powi(10,i+1))/powi(10,i));\n        c = max(c, print(p-i*a, ch)*float(i+3)/30.0); }\n    if (v < 0.0) c = max(c, print(p-i*a, 45)*float(i)/30.0);\n    return c;\n}\n\nfloat print(ivec2 pos, vec4 v)\n{\n    float c = 0.0;\n    for (int i = 0; i < 4; i++) {\n        c = max(c, print(pos, v[i]));\n        pos += text.adv*8; }\n    return c;\n}\n\nfloat print(ivec2 pos, vec3 v)\n{\n    float c = 0.0;\n    for (int i = 0; i < 3; i++) {\n        c = max(c, print(pos, v[i]));\n        pos += text.adv*8; }\n    return c;\n}\n\nfloat print(ivec2 pos, vec2 v)\n{\n    float c = 0.0;\n    for (int i = 0; i < 2; i++) {\n        c = max(c, print(pos, v[i]));\n        pos += text.adv*8; }\n    return c;\n}\n\nfloat print(int x, int y, int v)   { return print(ivec2(text.size.x*x,text.size.y*y), float(v)); }\nfloat print(int x, int y, float v) { return print(ivec2(text.size.x*x,text.size.y*y), v); }\nfloat print(int x, int y, vec4 v)  { return print(ivec2(text.size.x*x,text.size.y*y), v); }\nfloat print(int x, int y, vec3 v)  { return print(ivec2(text.size.x*x,text.size.y*y), v); }\nfloat print(int x, int y, vec2 v)  { return print(ivec2(text.size.x*x,text.size.y*y), v); }\nfloat print(int x, int y, ivec3 v) { return print(ivec2(text.size.x*x,text.size.y*y), vec3(v)); }\n#endif\n\n// 000   000   0000000    0000000  000   000  \n// 000   000  000   000  000       000   000  \n// 000000000  000000000  0000000   000000000  \n// 000   000  000   000       000  000   000  \n// 000   000  000   000  0000000   000   000  \n\nfloat hash11(float p)\n{\n    p = fract(p * 0.1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\nvec3 hash33(vec3 p3)\n{\n    p3 = fract(p3 * vec3(12.3,456.7,8912.3));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n}\n\nvec3 hash31(float p)\n{\n   return hash33(vec3(p));\n}\n\nfloat hash12(vec2 p)\n{\n    vec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat gradientNoise(vec2 v)\n{\n    return fract(52.9829189 * fract(dot(v, vec2(0.06711056, 0.00583715))));\n}\n\n// 000   000   0000000  000      \n// 000   000  000       000      \n// 000000000  0000000   000      \n// 000   000       000  000      \n// 000   000  0000000   0000000  \n\nvec3 hsl2rgb( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n    return c.z + c.y * (rgb-0.5)*(1.0-abs(2.0*c.z-1.0));\n}\n\nvec3 hsl(float h, float s, float l) { return hsl2rgb(vec3(h,s,l)); }\n\nvec3 rgb2hsl( vec3 col )\n{\n    float minc = min( col.r, min(col.g, col.b) );\n    float maxc = max( col.r, max(col.g, col.b) );\n    vec3  mask = step(col.grr,col.rgb) * step(col.bbg,col.rgb);\n    vec3 h = mask * (vec3(0.0,2.0,4.0) + (col.gbr-col.brg)/(maxc-minc + EPS)) / 6.0;\n    return vec3( fract( 1.0 + h.x + h.y + h.z ),              \n                 (maxc-minc)/(1.0-abs(minc+maxc-1.0) + EPS),  \n                 (minc+maxc)*0.5);\n}\n\nvec3 colsat(vec3 col, float sat)\n{\n    vec3 h = rgb2hsl(col);\n    return hsl(h.x,sat,h.z);\n}\n\nvec3 gray(vec3 col)\n{\n    return colsat(col, 0.0);\n}\n\n// 00     00   0000000   000000000  00000000   000  000   000  \n// 000   000  000   000     000     000   000  000   000 000   \n// 000000000  000000000     000     0000000    000    00000    \n// 000 0 000  000   000     000     000   000  000   000 000   \n// 000   000  000   000     000     000   000  000  000   000  \n\nmat3 alignMatrix(vec3 dir) \n{\n    vec3 f = normalize(dir);\n    vec3 s = normalize(cross(f, vec3(0.48, 0.6, 0.64)));\n    vec3 u = cross(s, f);\n    return mat3(u, s, f);\n}\n\n// 00000000    0000000   000000000  \n// 000   000  000   000     000     \n// 0000000    000   000     000     \n// 000   000  000   000     000     \n// 000   000   0000000      000     \n\nfloat rad2deg(float r) { return 180.0 * r / PI; }\nfloat deg2rad(float d) { return PI * d / 180.0; }\n\nvec3  rad2deg(vec3 v) { return 180.0 * v / PI; }\nvec3  deg2rad(vec3 v) { return PI * v / 180.0; }\n\nmat3  rotMat(vec3 u, float angle)\n{\n    float s = sin(deg2rad(angle));\n    float c = cos(deg2rad(angle));\n    float i = 1.0-c;\n    \n    return mat3(\n        c+u.x*u.x*i, u.x*u.y*i-u.z*s, u.x*u.z*i+u.y*s,\n        u.y*u.x*i+u.z*s, c+u.y*u.y*i, u.y*u.z*i-u.x*s,\n        u.z*u.x*i-u.y*s, u.z*u.y*i+u.x*s, c+u.z*u.z*i\n        );\n}\n\nvec3 rotAxisAngle(vec3 position, vec3 axis, float angle)\n{\n    mat3 m = rotMat(axis, angle);\n    return m * position;\n}\n\n// 00000000    0000000   000       0000000   00000000   \n// 000   000  000   000  000      000   000  000   000  \n// 00000000   000   000  000      000000000  0000000    \n// 000        000   000  000      000   000  000   000  \n// 000         0000000   0000000  000   000  000   000  \n\nvec3 polar(vec3 v)\n{\n    float radius = length(v);\n    float phi    = atan(v.y, v.x);\n    float rho    = acos(v.z/radius);\n    return vec3(phi, rho, radius);\n}\n\nvec3 unpolar(vec3 v)\n{\n    float s = sin(v.y);\n    float x = s * cos(v.x);\n    float y = s * sin(v.x);\n    float z =     cos(v.y);\n    return vec3(x, y, z)*v.z;\n}\n\nvec3 polar2(vec3 v)\n{\n    float radius = length(v);\n    float phi    = atan(v.z, v.x);\n    float rho    = acos(v.y/radius);\n    return vec3(phi, rho, radius);\n}\n\nvec3 unpolar2(vec3 v)\n{\n    float s = sin(v.y);\n    float x = s * cos(v.x);\n    float z = s * sin(v.x);\n    float y =     cos(v.y);\n    return vec3(x, y, z)*v.z;\n}\n\n//  0000000   000   000   0000000   000000000  \n// 000   000  000   000  000   000     000     \n// 000 00 00  000   000  000000000     000     \n// 000 0000   000   000  000   000     000     \n//  00000 00   0000000   000   000     000     \n\nvec4 quatAxisAngle(vec3 axis, float angle)\n{ \n    float half_angle = deg2rad(angle*0.5);\n    return vec4(axis*sin(half_angle), cos(half_angle));\n}\n\nvec4 quatConj(vec4 q)\n{ \n    return vec4(-q.x, -q.y, -q.z, q.w); \n}\n  \nvec4 quatMul(vec4 q1, vec4 q2)\n{ \n    vec4 qr;\n    qr.x = (q1.w * q2.x) + (q1.x * q2.w) + (q1.y * q2.z) - (q1.z * q2.y);\n    qr.y = (q1.w * q2.y) - (q1.x * q2.z) + (q1.y * q2.w) + (q1.z * q2.x);\n    qr.z = (q1.w * q2.z) + (q1.x * q2.y) - (q1.y * q2.x) + (q1.z * q2.w);\n    qr.w = (q1.w * q2.w) - (q1.x * q2.x) - (q1.y * q2.y) - (q1.z * q2.z);\n    return qr;\n}\n\nvec3 rotAxisAngleQuat(vec3 p, vec3 axis, float angle)\n{ \n    vec4 qr = quatAxisAngle(axis, angle);\n    return quatMul(quatMul(qr, vec4(p, 0)), quatConj(qr)).xyz;\n}\n\nvec3 rotRayAngle(vec3 p, vec3 ro, vec3 rd, float angle)\n{ \n    return rotAxisAngle(p-ro, rd-ro, angle)+ro;\n}\n\nvec3 rotY(vec3 v, float d)\n{\n    float r = deg2rad(d);\n    float c = cos(r);\n    float s = sin(r);\n    return vec3(v.x*c+v.z*s, v.y, v.z*c+v.x*s);\n}\n\nvec3 rotX(vec3 v, float d)\n{\n    float r = deg2rad(d);\n    float c = cos(r);\n    float s = sin(r);\n    return vec3(v.x, v.y*c+v.z*s, v.z*c+v.y*s);\n}\n\nvec3 rotZ(vec3 v, float d)\n{\n    float r = deg2rad(d);\n    float c = cos(r);\n    float s = sin(r);\n    return vec3(v.x*c+v.y*s, v.y*c+v.x*s, v.z);\n}\n\n//  0000000   00000000   0000000   00     00    \n// 000        000       000   000  000   000    \n// 000  0000  0000000   000   000  000000000    \n// 000   000  000       000   000  000 0 000    \n//  0000000   00000000   0000000   000   000    \n\nvec3 posOnPlane(vec3 p, vec3 a, vec3 n)\n{\n    return p-dot(p-a,n)*n;\n}\n\nvec3 posOnRay(vec3 ro, vec3 rd, vec3 p)\n{\n    return ro + max(0.0, dot(p - ro, rd) / dot(rd, rd)) * rd;\n}\n\nbool rayIntersectsSphere(vec3 ro, vec3 rd, vec3 ctr, float r)\n{\n    return length(posOnRay(ro, rd, ctr) - ctr) < r;\n}\n\n//  0000000   00000000   \n// 000   000  000   000  \n// 000   000  00000000   \n// 000   000  000        \n//  0000000   000        \n\nfloat opUnion(float d1, float d2, float k)\n{\n    float h = clamp(0.5 + 0.5*(d2-d1)/k, 0.0, 1.0);\n    return mix(d2, d1, h) - k*h*(1.0-h);\n}\n\nfloat opDiff(float d1, float d2, float k) \n{\n    float h = clamp(0.5 - 0.5*(d2+d1)/k, 0.0, 1.0);\n    return mix(d1, -d2, h) + k*h*(1.0-h);\n}\n\nfloat opInter(float d1, float d2, float k) \n{\n    \n    float h = clamp(0.5 - 0.5*(d2-d1)/k, 0.0, 1.0);\n    return mix(d2, d1, h) + k*h*(1.0-h);\n}\n\nfloat opDiff (float d1, float d2) { return opDiff (d1, d2, 0.0); }\nfloat opUnion(float d1, float d2) { return opUnion(d1, d2, 0.5); }\nfloat opInter(float d1, float d2) { return opInter(d1, d2, 0.2); }\n\n//  0000000  0000000    \n// 000       000   000  \n// 0000000   000   000  \n//      000  000   000  \n// 0000000   0000000    \n\nfloat sdSphere(vec3 a, float r)\n{\n    return length(gl.sdf.pos-a)-r;\n}\n\nfloat sdPill(vec3 a, float r, vec3 n)\n{\n    vec3 p = gl.sdf.pos-a;\n    float d = abs(dot(normalize(n),normalize(p)));\n    float f = smoothstep(0.0, 1.3, d);\n    return length(p) - r + f * length(n);\n}\n\nfloat sdPlane(vec3 a, vec3 n)\n{   \n    return dot(n, gl.sdf.pos-a);\n}\n\nfloat sdPlane(vec3 n)\n{   \n    return dot(n, gl.sdf.pos);\n}\n\nfloat sdBox(vec3 a, vec3 b, float r)\n{\n  vec3 q = abs(gl.sdf.pos-a)-b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;\n}\n\nfloat sdEllipsoid(vec3 a, vec3 r)\n{\n    vec3 p = gl.sdf.pos-a;\n    float k0 = length(p/r);\n    float k1 = length(p/(r*r));\n    return k0*(k0-1.0)/k1;\n}\n\nfloat sdCone(vec3 a, vec3 b, float r1, float r2)\n{\n    vec3 ab = b-a;\n    vec3 ap = gl.sdf.pos-a;\n    float t = dot(ab,ap) / dot(ab,ab);\n    t = clamp(t, 0.0, 1.0);\n    vec3 c = a + t*ab;\n    return length(gl.sdf.pos-c)-(t*r2+(1.0-t)*r1);      \n}\n\nfloat sdLine(vec3 a, vec3 n, float r)\n{\n    vec3 p = gl.sdf.pos-a;\n    return length(p-n*dot(p,n))-r;\n}\n\nfloat sdCapsule(vec3 a, vec3 b, float r)\n{\n    vec3 ab = b-a;\n    vec3 ap = gl.sdf.pos-a;\n    float t = dot(ab,ap) / dot(ab,ab);\n    t = clamp(t, 0.0, 1.0);\n    vec3 c = a + t*ab;\n    return length(gl.sdf.pos-c)-r;        \n}\n\nfloat sdCylinder(vec3 a, vec3 b, float r, float cr)\n{\n  vec3  ba = b - a;\n  vec3  pa = gl.sdf.pos - a;\n  float baba = dot(ba,ba);\n  float paba = dot(pa,ba);\n  float x = length(pa*baba-ba*paba) - r*baba;\n  float y = abs(paba-baba*0.5)-baba*0.5;\n  float x2 = x*x;\n  float y2 = y*y*baba;\n  float d = (max(x,y)<0.0)?-min(x2,y2):(((x>0.0)?x2:0.0)+((y>0.0)?y2:0.0));\n  return sign(d)*sqrt(abs(d))/baba - cr;\n}\n\nvec3 posOnPlane(vec3 p, vec3 n)\n{\n    return p-dot(p,n)*n;\n}\n\nfloat sdTorus(vec3 p, vec3 a, vec3 n, float rl, float rs)\n{\n    vec3 q = p-a;\n    return length(vec2(length(posOnPlane(q, n))-rl,abs(dot(n, q))))-rs;\n}\n\n// 0000000     0000000    0000000  000   0000000  \n// 000   000  000   000  000       000  000       \n// 0000000    000000000  0000000   000  0000000   \n// 000   000  000   000       000  000       000  \n// 0000000    000   000  0000000   000  0000000   \n\nvoid basis(vec3 n, out vec3 right, out vec3 front) \n{\n    if (n.y < -0.999999)\n    {\n        right = -vz;\n        front = -vx;\n    } \n    else \n    {\n        float a = 1.0/(1.0+n.y);\n        float b = -n.x*n.z*a;\n        right = vec3(1.0-n.x*n.x*a,-n.x,b);\n        front = vec3(b,-n.z,1.0-n.z*n.z*a);\n    }\n}\n\n//  0000000   0000000   00     00  \n// 000       000   000  000   000  \n// 000       000000000  000000000  \n// 000       000   000  000 0 000  \n//  0000000  000   000  000   000  \n\nvoid lookAtFrom(vec3 tgt, vec3 pos) \n{ \n    cam.tgt     = tgt;\n    cam.pos     = pos;\n    cam.pos2tgt = cam.tgt-cam.pos;\n    cam.dir     = normalize(cam.pos2tgt);\n    cam.x       = normalize(cross(cam.dir, vy));\n    cam.up      = normalize(cross(cam.x,cam.dir));\n    cam.dist    = length(cam.pos2tgt);\n}\nvoid lookAt  (vec3 tgt) { lookAtFrom(tgt, cam.pos); }\nvoid lookFrom(vec3 pos) { lookAtFrom(cam.tgt, pos); }\n\nvoid initCam(float dist, vec2 rot)\n{\n    lookAtFrom(v0, rotAxisAngle(rotAxisAngle(vec3(0,0,-dist), -vx, 89.0*rot.y), vy, -90.0*rot.x));\n    cam.fov = 4.0;\n}\n\n// 00000000    0000000    0000000  000000000  \n// 000   000  000   000  000          000     \n// 00000000   000   000  0000000      000     \n// 000        000   000       000     000     \n// 000         0000000   0000000      000     \n\nvec4 postProc(vec3 col, bool dither, bool gamma, bool vignette)\n{\n    if (dither)   col -= vec3(gradientNoise(gl.frag)/256.0); \n    if (gamma)    col  = pow(col, vec3(1.0/2.2));\n    if (vignette) col *= vec3(smoothstep(1.8, 0.5, length(gl.uv)/max(gl.aspect,1.0)));\n    return vec4(col, 1.0);\n}","name":"Common","description":"","type":"common"}]}