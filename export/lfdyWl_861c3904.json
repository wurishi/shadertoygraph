{"ver":"0.1","info":{"id":"lfdyWl","date":"1731383731","viewed":78,"name":"bananalight","username":"ryanbowz","description":"bananalight","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["3d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Interactive Picture with Surrounding Lights\n// Original Texture: iChannel0\n// Normal Map: iChannel2\n// Depth Map: iChannel1\n\n// Lighting function for diffuse and specular shading\nvec3 calculateLighting(vec3 lightPos, vec3 fragPos, vec3 normal, vec3 viewDir, vec3 lightColor) {\n    // Diffuse shading\n    vec3 lightDir = normalize(lightPos - fragPos);\n    float diff = max(dot(normal, lightDir), 0.0);\n\n    // Specular shading\n    vec3 reflectDir = reflect(-lightDir, normal);\n    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 16.0);\n\n    // Combine ambient, diffuse, and specular components\n    vec3 ambient = 0.2 * lightColor;\n    vec3 diffuse = diff * lightColor;\n    vec3 specular = spec * lightColor;\n\n    return ambient + diffuse + specular;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Screen coordinates\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n    // Retrieve original texture color\n    vec3 textureColor = texture(iChannel0, uv).rgb;\n\n    // Retrieve normal from iChannel1 and adjust to [-1,1]\n    vec3 normal = texture(iChannel2, uv).rgb * 2.0 - 1.0;\n\n    // Retrieve depth from iChannel2\n    float depth = texture(iChannel1, uv).r;\n\n    // Calculate fragment position based on depth\n    vec3 fragPos = vec3(uv * 2.0 - 1.0, depth);\n\n    // Light positions and colors\n    vec3 lightPos1 = vec3(2.0, 4.0, 3.0);   // Fixed light source\n    vec3 lightColor1 = vec3(0.4, 0.4, 0.4); // Warm light color\n\n    // Mouse-controlled light (for interactivity)\n    vec3 lightPos2 = vec3(iMouse.xy / iResolution.xy * 4.0 - 2.0, 1.5);\n    vec3 lightColor2 = vec3(0.2, 0.2, 1.0); // Cool light color\n    \n    vec2 offsetXy = vec2(3.0, 2.0);\n    vec3 lightPos3 = vec3(iMouse.xy / iResolution.xy * 4.0 - 2.0 + offsetXy, 1.5);\n    vec3 lightColor3 = vec3(1.0, 0.2, 0.2); // Cool light color\n    \n    vec2 offsetXy2 = vec2(2.0, -3.0);\n    vec3 lightPos4 = vec3(iMouse.xy / iResolution.xy * 4.0 - 2.0 + offsetXy2, 1.5);\n    vec3 lightColor4 = vec3(0.2, 1.0, 0.2);\n\n    \n    // View direction (assuming camera at (0,0,1))\n    vec3 viewDir = normalize(vec3(0.0, 0.0, 1.0) - fragPos);\n\n    // Calculate lighting effects from both light sources\n    vec3 lighting1 = calculateLighting(lightPos1, fragPos, normal, viewDir, lightColor1);\n    vec3 lighting2 = calculateLighting(lightPos2, fragPos, normal, viewDir, lightColor2);\n    vec3 lighting3 = calculateLighting(lightPos3, fragPos, normal, viewDir, lightColor3);\n    vec3 lighting4 = calculateLighting(lightPos4, fragPos, normal, viewDir, lightColor4);\n\n    // Combine lighting effects and apply to texture color\n    vec3 finalColor = (lighting1 + lighting2 + lighting3 + lighting4) * textureColor;\n\n    // Output final color\n    fragColor = vec4(finalColor, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}