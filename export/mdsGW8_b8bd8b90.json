{"ver":"0.1","info":{"id":"mdsGW8","date":"1666095486","viewed":265,"name":"Fluid Simulation With Obstacles","username":"Plati","description":"This is a quit cheap fluid simulation using some noise sampling. It's not physically correct. It's heavily relying on curl and dispersion.","likes":16,"published":1,"flags":32,"usePreview":0,"tags":["noise","fluid","fluidsimulation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3Rr","filepath":"/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","previewfilepath":"/media/ap/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// created by Ronny Mühle (Plati) - 2022\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// physically not correct fluid simulation using curl, dispersion and noise sampling\n// it can be used with a 2-axis blue noise to reduce the sample count\n\n// RENDERING\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // DISPLAY WATER REFRACTION\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec3 flow_map = texture(iChannel0, uv).xyz;\n    \n    // DENSITY\n    float density = 0.0;\n    density += (flow_map.y - 0.5) - (texture(iChannel0, uv + vec2(0.0, 0.005)).y - 0.5);\n    density += (flow_map.x - 0.5) - (texture(iChannel0, uv + vec2(0.005, 0.0)).x - 0.5);\n    \n    // SPEED\n    float flow_speed = length(flow_map.xy * 2.0 - 1.0);\n    \n    // UNDERWATER\n    vec3 color_out = texture(iChannel1, uv - (flow_map.xy - 0.5) * 0.2 ).xyz;\n    \n    // MASKING OUT STONES\n    color_out = mix(color_out * texture(iChannel2, uv).xxx * vec3(1.7, 1.7, 1.7), color_out * vec3(0.5), flow_map.z);\n    \n    // ADDING DENSITY AND SPEED\n    color_out += vec3(density);\n    color_out += vec3(flow_speed) * vec3(0.4, 0.6, 1.0) * 0.6;\n    \n    // RENDERING FLAKES\n    color_out += texture(iChannel3, uv).xxx * 0.5;\n    \n    fragColor = vec4(vec3(color_out),1.0);\n    \n    // DISPLAY FLOW MAP\n    //fragColor = vec4(flow_map, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// created by Ronny Mühle (Plati) - 2022\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// physically not correct fluid simulation using curl, dispersion and noise sampling\n// it can be used with a 2-axis blue noise to reduce the sample count\n\n// FLUID SIMULATION (FLOW BUFFER)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec2 uv = fragCoord/iResolution.xy;\n   vec4 mouse = iMouse.xyzw;\n   \n   // FLUID BEHAVIOR\n   int sample_count = 1;\n   float sample_offset = 0.007;\n   float sample_modifier = 2.3;\n   float energy_loss = 1.003;\n   \n   // MOUSE INPUT (fix on start)\n   vec2 mouse_pos = vec2(iResolution.xy * 0.5);\n   if(iMouse.xy != vec2(0.0)) {\n       mouse_pos = iMouse.xy;\n   }   \n   \n   // FLOW INJECTION\n   vec3 flow_out;\n   float flow_input_mask = smoothstep(0.03, 0.02, length( uv.xy - mouse_pos / iResolution.xy ) );\n   vec2 flow_input_vector = vec2(sin(iTime) * 2.0, cos(iTime) * 2.0) * 0.5 + 0.5;\n   flow_out.xy = (flow_input_vector * flow_input_mask);\n   \n   // FLOW BLOCKER\n   float flow_blocker_mask = smoothstep(0.60, 0.50, texture(iChannel1, uv).x);\n   flow_out.z = flow_blocker_mask;\n      \n   // FLOW COMPUTE\n   vec2 combined = vec2(0.0);\n   for(int i=0; i < sample_count; ++i)\n   {\n       // NORMALIZED NOISE VECTOR, MOVED BY TIME\n       vec2 noise_sample = texture(iChannel2, (fragCoord / 256.0) + iTime * 1.0 + vec2(float(i) * 0.01,0.0) ).xy * 2.0 - 1.0;\n       // SAMPLING OFFSET BASE ON FLOW\n       vec2 s_base = (texture(iChannel0, uv ).xy * 2.0 - 1.0) * sample_offset;\n       // 3 SAMPLES WITH RANDOM NOISE DIRECTION\n       vec3 s0 = texture(iChannel0, uv - s_base).xyz;\n       s0 = mix(texture(iChannel0, uv - s_base.yx).xyz,s0,  s0.z);\n       s0.xy = s0.xy * 2.0 - 1.0;\n       vec3 s1 = texture(iChannel0, uv + noise_sample * sample_offset - s_base ).xyz;\n       s1.xy = s1.xy * 2.0 - 1.0;\n       vec3 s2 = texture(iChannel0, uv + noise_sample * sample_offset * 2.0 - s_base * sample_modifier ).xyz;\n       s2.xy = s2.xy * 2.0 - 1.0;\n       // CURL AND DISPERSION\n       vec2 curl = (s1.xy - (s2.xy - s1.xy));\n       curl = mix(-s2.xy, curl, s1.z);\n       curl = mix(length(curl) * normalize(noise_sample), curl, s0.z);\n       //curl = mix(length(curl) * -normalize(noise_sample), curl, s1.z);\n       //curl = mix(length(curl) * -normalize(noise_sample), curl, s2.z);\n       //curl = mix(vec2(0.0), curl, s0.z * s1.z * s2.z);\n       vec2 disp = ((s1.xy + s2.xy) * 0.5);\n       disp = mix(s0.xy, disp, s1.z);\n       disp = mix(s0.xy, disp, s2.z);\n       //disp = mix(s0.xy, disp, s1.z * s2.z);\n       // COMBINED AVERAGED\n       combined += curl * 0.55 + disp * 0.45 + s0.xy * 0.0; // SUM MUST BE 1\n   }\n   \n   combined /= float(sample_count);\n   combined *= energy_loss;\n   combined = combined * 0.5 + 0.5;\n   \n   flow_out.xy += combined * (1.0 - flow_input_mask);\n   \n   // SET WINDOW COLOR TO 0.5 ON START\n   if(iFrame == 1) {\n       flow_out.xy = vec2(0.5);\n   };\n                   \n   fragColor = vec4(flow_out,1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// created by Ronny Mühle (Plati) - 2022\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// physically not correct fluid simulation using curl, dispersion and noise sampling\n// it can be used with a 2-axis blue noise to reduce the sample count\n\n// SIMULATE FLAKES\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec3 flow_map = texture(iChannel0, uv).xyz;\n    \n    float density = 0.0;\n    density += (flow_map.y - 0.5) - (texture(iChannel0, uv + vec2(0.0, 0.005)).y - 0.5);\n    density += (flow_map.x - 0.5) - (texture(iChannel0, uv + vec2(0.005, 0.0)).x - 0.5);\n    \n    float flakes = texture(iChannel1, uv - (texture(iChannel0, uv).xy * 2.0 - 1.0) * 0.005  ).x;\n    \n    flakes += smoothstep(0.90, 0.95, texture(iChannel2, (fragCoord / 512.0) + iTime * 0.1 ).x ) * smoothstep(0.05, 0.06, abs(density));\n    flakes *= 0.99;\n    \n    fragColor = vec4(vec3(flakes),1.0);\n}","name":"Buffer B","description":"","type":"buffer"}]}