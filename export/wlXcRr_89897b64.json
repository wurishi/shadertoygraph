{"ver":"0.1","info":{"id":"wlXcRr","date":"1591258165","viewed":89,"name":"Funky mist world","username":"MikeXenix","description":"Used https://www.shadertoy.com/view/Xds3zN by iq as starting point, Combined with my old https://www.shadertoy.com/view/tlt3WN\nAdded some ray-marched mist also, for funky feeling","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["mist"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2013 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Modified by MikeXenix\n\n#define RAY_MARCH_STEPS 100\n\n//------------------------------------------------------------------\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat dot2( in vec3 v ) { return dot(v,v); }\nfloat ndot( in vec2 a, in vec2 b ) { return a.x*b.x - a.y*b.y; }\nvec3 lerp(in vec3 a,in vec3 b, float t){return (1.0-t)*a+t*b;}\nfloat lerp(float a,float b, float t){return (1.0-t)*a+t*b;}\nfloat sdPlane( vec3 p )\n{\n\treturn p.y;\n}\n\nfloat sdHexPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n\n    const vec3 k = vec3(-0.8660254, 0.5, 0.57735);\n    p = abs(p);\n    p.xy -= 2.0*min(dot(k.xy, p.xy), 0.0)*k.xy;\n    vec2 d = vec2(\n       length(p.xy - vec2(clamp(p.x, -k.z*h.x, k.z*h.x), h.x))*sign(p.y - h.x),\n       p.z-h.y );\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n\n//------------------------------------------------------------------\n\nvec2 opU( vec2 d1, vec2 d2 )\n{\n\treturn (d1.x<d2.x) ? d1 : d2;\n}\n\n//------------------------------------------------------------------\n\n#define ZERO (min(iFrame,0))\n\n//------------------------------------------------------------------\n\nvec2 map( in vec3 pos )\n{\n    vec2 res = vec2( 1e10, 0.0 );\n    res = opU(res, vec2(sdHexPrism(vec3(pos.xzy)-vec3(1,1,0),vec2(0.2,0.5)),50.0));\n    res = opU(res, vec2(sdHexPrism(vec3(pos.xzy)-vec3(-1,1,0),vec2(0.2,0.5)),50.0));\n    res = opU(res, vec2(sdHexPrism(vec3(pos.xzy)-vec3(1,-1,0),vec2(0.2,0.5)),50.0));\n    res = opU(res, vec2(sdHexPrism(vec3(pos.xzy)-vec3(-1,-1,0),vec2(0.2,0.5)),50.0));\n\n    return res;\n}\n\n// https://iquilezles.org/articles/boxfunctions\nvec2 iBox( in vec3 ro, in vec3 rd, in vec3 rad ) \n{\n    vec3 m = 1.0/rd;\n    vec3 n = m*ro;\n    vec3 k = abs(m)*rad;\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n\treturn vec2( max( max( t1.x, t1.y ), t1.z ),\n\t             min( min( t2.x, t2.y ), t2.z ) );\n}\n\nvec2 castRay( in vec3 ro, in vec3 rd )\n{\n    vec2 res = vec2(-1.0,-1.0);\n\n    float tmin = 1.0;\n    float tmax = 20.0;\n\n    // raytrace floor plane\n    float tp1 = (0.0-ro.y)/rd.y;\n    if( tp1>0.0 )\n    {\n        tmax = min( tmax, tp1 );\n        res = vec2( tp1, 1.0 );\n    }\n    //else return res;\n    \n    // raymarch primitives   \n    vec2 tb = iBox( ro-vec3(0.5,0.4,-0.5), rd, vec3(2.0,0.41,3.0) );\n    if( tb.x<tb.y && tb.y>0.0 && tb.x<tmax)\n    {\n        tmin = max(tb.x,tmin);\n        tmax = min(tb.y,tmax);\n\n        float t = tmin;\n        for( int i=0; i<70 && t<tmax; i++ )\n        {\n            vec2 h = map( ro+rd*t );\n            if( abs(h.x)<(0.0001*t) )\n            { \n                res = vec2(t,h.y); \n                break;\n            }\n            t += h.x;\n        }\n    }\n    \n    return res;\n}\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal( in vec3 pos )\n{\n#if 0\n    vec2 e = vec2(1.0,-1.0)*0.5773*0.0005;\n    return normalize( e.xyy*map( pos + e.xyy ).x + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx ).x + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy ).x + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx ).x );\n#else\n    // inspired by tdhooper and klems - a way to prevent the compiler from inlining map() 4 times\n    vec3 n = vec3(0.0);\n    for( int i=ZERO; i<4; i++ )\n    {\n        vec3 e = 0.5773*(2.0*vec3((((i+3)>>1)&1),((i>>1)&1),(i&1))-1.0);\n        n += e*map(pos+0.0005*e).x;\n      //if( n.x+n.y+n.z>100.0 ) break;\n    }\n    return normalize(n);\n#endif    \n}\n\n// https://iquilezles.org/articles/checkerfiltering\nfloat checkersGradBox( in vec2 p, in vec2 dpdx, in vec2 dpdy )\n{\n    // filter kernel\n    vec2 w = abs(dpdx)+abs(dpdy) + 0.001;\n    // analytical integral (box filter)\n    vec2 i = 2.0*(abs(fract((p-0.5*w)*0.5)-0.5)-abs(fract((p+0.5*w)*0.5)-0.5))/w;\n    // xor pattern\n    return 0.5 - 0.5*i.x*i.y;                  \n}\nfloat hexTex(vec2 Tex)\n{\n    float degAlpha = 57.0;\n    \n    float alpha = (degAlpha) / 360.0 * 2.0 * 3.14159, cal = cos(alpha), sal = sin(alpha);\n\tfloat beta = ((90.0 - degAlpha) / 360.0 * 2.0 * 3.14159), cbe = cos(beta), sbe = sin(beta);\n\tfloat r = 0.5 / cbe;\n\tvec2 P1 = vec2(r*sbe, r*cbe);\n\tvec2 P2 = vec2(2.0 * r*cal, 0.0);\n\tvec2 N = normalize(P2 - P1);\n\tfloat D = dot(vec2(-N.y, N.x), P1);\n    \n\tfloat v = 1.0 - 2.0 * abs(0.5 - mod(abs(Tex.y), 1.0));\n\tfloat v2 = 1.0 - 2.0 * abs(0.5 - mod(abs(Tex.x), 1.0));\n\tfloat d = (dot(vec2(-N.y, N.x), vec2(v2, v)) - D);\n\tfloat d2 = (dot(vec2(-N.y, -N.x), vec2(v2, v)));\n\n\tif (v2 <= r * cal)\n\t{\n\t\tif (d2 > 0.0)\n\t\t\td = abs(d) / D;\n\t\telse if (v < 0.5)\n\t\t\td = abs(0.5 - v) * 2.0;\n\t\telse if (d > 0.0)\n\t\t\td = abs(d2) / D;\n\t\telse\n\t\t\td = abs(0.5 - v) * 2.0;\n\t}\n\telse if (d <= 0.0)\n\t{\n\t\td = abs(d) / D;\n\t}\n\telse\n\t{\n\t\tif (v2 >= 2.0 * r*cal)\n\t\t{\n\t\t\tif (v < 0.5)\n\t\t\t{\n\t\t\t\tvec2 P3 = vec2(0.25, 0.5);\n\t\t\t\tvec2 N2 = normalize(P3 - P2);\n\t\t\t\tfloat D2 = dot(vec2(-N2.y, N2.x), P2);\n\t\t\t\tfloat d3 = (dot(vec2(-N2.y, -N2.x), vec2(v2, v)) - D2);\n\t\t\t\tif (d3 < 0.0)\n\t\t\t\t\td = 1.0 - abs(0.5 - v) * 2.0;\n\t\t\t\telse\n\t\t\t\t\td = abs(d) / D;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfloat d4 = (dot(vec2(-N.y, N.x), vec2(v2, v)) - D * 2.0);\n\t\t\t\tif (d4 > 0.0)\n\t\t\t\t\td = 1.0 - abs(0.5 - v) * 2.0;\n\t\t\t\telse\n\t\t\t\t\td = abs(d2) / D;\n\t\t\t}\n\t\t}\n\t\telse if (v > 0.5)\n\t\t\td = abs(dot(vec2(-N.y, -N.x), vec2(v2, v))) / D;\n\t\telse\n\t\t\td = abs(d) / D;\n\t}\n\n    return min(0.999, d);\n}\nvec3 render( in vec3 ro, in vec3 rd, in vec3 rdx, in vec3 rdy )\n{ \n    // background\n    vec3 col = vec3(0.7, 0.7, 0.9) - max(rd.y,0.0)*0.3;\n    \n    // raycast scene\n    vec2 res = castRay(ro,rd);\n    float t = res.x;\n\tfloat m = res.y;\n    if( m>-0.5 )\n    {\n        vec3 pos = ro + t*rd;\n        vec3 nor = (m<1.5) ? vec3(0.0,1.0,0.0) : calcNormal( pos );\n        vec3 ref = reflect( rd, nor );\n        \n        // material        \n        col = 0.2 + 0.2*sin( m*2.0 + vec3(0.0,1.0,2.0) );\n        float ks = 1.0;\n        \n        if( m<1.5 )\n        {\n            // project pixel footprint into the plane\n            vec3 dpdx = ro.y*(rd/rd.y-rdx/rdx.y);\n            vec3 dpdy = ro.y*(rd/rd.y-rdy/rdy.y);\n\n            float f = pow(1.0-hexTex(pos.xz),10.0);//checkersGradBox( 3.0*pos.xz, 3.0*dpdx.xz, 3.0*dpdy.xz );\n            col = 0.15 + vec3(0,f,f);\n            ks = 0.4;\n        }\n\n        // sky\n        {\n            float dif = sqrt(clamp( 0.5+0.5*nor.y, 0.0, 1.0 ));\n            float spe = smoothstep( -0.2, 0.2, ref.y );\n                  spe *= dif;\n                  spe *= 0.04+0.96*pow(clamp(1.0+dot(nor,rd),0.0,1.0), 5.0 );\n        }\n        // back\n        {\n        \tfloat dif = clamp( dot( nor, normalize(vec3(0.5,0.0,0.6))), 0.0, 1.0 )*clamp( 1.0-pos.y,0.0,1.0);\n        }\n        \n        col = mix( col, vec3(0.7,0.7,0.9), 1.0-exp( -0.0001*t*t*t ) );\n        \n    }\n        \n    // mist\n    float density = 0.0;\n    vec3 mpos = ro;\n    float delta = t/float(RAY_MARCH_STEPS);\n    for(int i=0;i<RAY_MARCH_STEPS;i++)\n    {\n        float noise = lerp(texture(iChannel0,mpos.xz*0.1).r*texture(iChannel0,mpos.xy*0.5).r,1.0,abs(sin(iTime*0.3)));\n        float heightFog = clamp(1.0-mpos.y*(2.0+0.5*sin(iTime*2.0+mpos.x*0.5*cos(iTime*2.0)+mpos.z*sin(iTime))),0.0,1.0);\n        density+= delta * lerp(1.0,10.0,abs(sin(iTime*0.4))) * heightFog*noise;\n        mpos+=rd*delta;\n    }\n\n\treturn vec3( clamp(lerp(col,vec3(0,1,1),clamp(density,0.0,1.0)),0.0,1.0) );\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv =          ( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 mo = iMouse.xy/iResolution.xy;\n\tfloat time = 32.0 + iTime*1.5;\n\n    // camera\t\n    vec3 ta = vec3( 0.5, -0.4, -0.5 );\n    vec3 ro = ta + vec3( 4.5*cos(0.1*time + 6.0*mo.x), 1.5 + 2.0*mo.y, 4.5*sin(0.1*time + 6.0*mo.x) );\n    // camera-to-world transformation\n    mat3 ca = setCamera( ro, ta, 0.0 );\n\n    vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n\n    // ray direction\n    vec3 rd = ca * normalize( vec3(p,2.5) );\n\n    // ray differentials\n    vec2 px = (2.0*(fragCoord+vec2(1.0,0.0))-iResolution.xy)/iResolution.y;\n    vec2 py = (2.0*(fragCoord+vec2(0.0,1.0))-iResolution.xy)/iResolution.y;\n    vec3 rdx = ca * normalize( vec3(px,2.5) );\n    vec3 rdy = ca * normalize( vec3(py,2.5) );\n\n    // render\t\n    \n    fragColor = vec4( render( ro, rd, rdx, rdy ), 1.0 );\n}","name":"Image","description":"","type":"image"}]}