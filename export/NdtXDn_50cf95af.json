{"ver":"0.1","info":{"id":"NdtXDn","date":"1639246168","viewed":136,"name":"3d cylinder rotation","username":"space_sheep","description":"3d cylinder rotation","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["3dcylinderrotation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nthis is an example use of quadratic forms. \na 3d cylinder function ( x^2 + y^2 = r^2 ) \nis a quadratic form that equawls the radius squared, \ntherfore it can be viewed in a different basis. \nif we poot standard basis vectors in the cylinder equation\nin the new basis, we achive a transformation on the 3d space.\n*/\n\nfloat pi = 3.1415;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = vec4(0, 0, 0, 0);\n    uv = ( fragCoord - .5*iResolution.xy ) /iResolution.y;\n    \n    float rad = iTime; \n    float a1 = cos(rad); float b1 = sin(rad);\n    float a2 = cos(cos(rad*.5)); float b2 = sin(cos(rad*.5));\n    float a3 = cos(rad*1.2); float b3 = sin(rad*1.2);\n    mat3 mx = mat3( vec3(1.,.0,.0), vec3(.0,a1,b1), vec3(.0,-b1,a1) );\n    mat3 my = mat3( vec3(a2,.0,-b2), vec3(.0,1.,.0), vec3(b2,.0,a2) );\n    mat3 mz = mat3( vec3(a3,b3,.0), vec3(-b3,a3,.0), vec3(.0,.0,1.) );\n    mat3 ms = mat3( vec3(.1,.0,.0), vec3(.0,.1,.0), vec3(.0,.0,.1) );\n    mat3 raw = mat3(vec3(1.,.0,.0),vec3(.0,1.,.0),vec3(.0,.0,.0));\n    mat3 base = ms*mx*my*mz;\n    mat3 invb = inverse(base);\n    // change basis of the cylinder equation\n    mat3 m = transpose(invb) * raw * invb;\n    \n    // get z coordinate\n    float radius = 1.;\n    float a = m[2][2];\n    float b = m[2][0]*uv.x+m[2][1]*uv.y+m[1][2]*uv.y+m[0][2]*uv.x;\n    float c = uv.x*(m[0][0]*uv.x+m[1][0]*uv.y) + uv.y*(m[0][1]*uv.x+m[1][1]*uv.y) - radius;\n    \n    float temp = sqrt(b*b-4.*a*c);\n    float z1 = (-b + temp)/(2.*a);\n    float z2 = (-b - temp)/(2.*a);\n    \n    // front side\n    vec3 ve = vec3(uv, z2);\n    vec3 vb = invb * ve;\n\n    vec2 p = vec2(atan(vb.y/vb.x)*pi,vb.z);\n    vec2 pm = vec2(mod(floor(p.x),2.), mod(floor(p.y),2.));\n    \n    if(vb.z < 5. && vb.z > -5.)\n    {\n        if(pm.x==.0 && pm.y==.0) { fragColor.y = .2; }\n        else if(pm.x!=.0 && pm.y!=.0) { fragColor.y = .2; }\n        else { fragColor.z = .2; }\n    }\n    \n    // back side\n    ve = vec3(uv, z1);\n    vb = invb * ve;\n\n    p = vec2(atan(vb.y/vb.x)*pi,vb.z);\n    pm = vec2(mod(floor(p.x),2.), mod(floor(p.y),2.));\n    \n    if(vb.z < 5. && vb.z > -5.)\n    {\n        if(pm.x==.0 && pm.y==.0) { fragColor.y = .5; }\n        else if(pm.x!=.0 && pm.y!=.0) { fragColor.y = .5; }\n        else { fragColor.z = .5; }\n    }\n}","name":"Image","description":"","type":"image"}]}