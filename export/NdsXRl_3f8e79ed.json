{"ver":"0.1","info":{"id":"NdsXRl","date":"1619056269","viewed":176,"name":"Simple function stroke","username":"raph","description":"This is a very simple render stroke render of a function that maintains a consistent stroke width based on the derivative. It's much simpler than generic bezier rendering, but can handle a pretty wide range of functions.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["2d","stroke","function"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Simple antialised render of function.\n\n// This works when y = f(x) and the derivative is tractable.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float x = (uv.x - 0.5);\n    float scale = iMouse.y/iResolution.y - 0.5;\n    float xscale = 5.0;\n    float t = tanh(xscale * x);\n    float c = cosh(xscale * x);\n    float y = scale * t;\n    float dydx = scale * xscale / (c * c);\n    float sd = iResolution.y / iResolution.x * dydx;\n\n    float dy = (uv.y - 0.5) - y;\n    float sdy = dy / sqrt(1.0 + sd * sd);\n    float b = smoothstep(0.0, 1.0, 1.0 - 0.5 * iResolution.y * abs(sdy));\n\n    // Time varying pixel color\n    vec3 col = vec3(b, b, b);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}