{"ver":"0.1","info":{"id":"lscfRj","date":"1525879698","viewed":175,"name":"Olympic Rings Theme","username":"Rafbeam","description":"Olympic rings made with simple rings and caps on them. Made by Rafbeam.\n\nMusic: CBCMusic.cs - CBC Olympic Games Theme 2018: PyeyongChang by CBCMusic.ca","likes":0,"published":1,"flags":96,"usePreview":0,"tags":["2d","sound","cloud","rings","logo","art","sport","olympic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//olympic logo functions\nvec2 rotate(vec2 point, vec2 center, float angle);\nvec3 ring(vec3 color, vec3 background, vec2 position, float radius, float size_scale, vec2 uv);\nvec3 cap(vec3 color, vec3 background, vec2 position, float radius, float size_scale, vec2 uv);\n//music visualizer functions\nvec3 rectangle(vec3 color, vec3 background, vec4 region, vec2 uv);\nvec3 bar(vec3 color, vec3 background, vec2 position, vec2 diemensions, vec2 uv);\nvec3 bars(vec3 color, vec3 background, int bars, sampler2D sound, vec2 uv);\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    fragColor = vec4(texture(iChannel0, uv).rgb,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4lXGW7","filepath":"https://soundcloud.com/cbc_music/cbc-olympic-games-theme-2018-pyeongchang","previewfilepath":"https://soundcloud.com/cbc_music/cbc-olympic-games-theme-2018-pyeongchang","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//olympic logo functions\nvec2 rotate(vec2 point, vec2 center, float angle);\nvec3 ring(vec3 color, vec3 background, vec2 position, float radius, float size_scale, vec2 uv);\nvec3 cap(vec3 color, vec3 background, vec2 position, float radius, float size_scale, vec2 uv);\n//music visualizer functions\nvec3 rectangle(vec3 color, vec3 background, vec4 region, vec2 uv);\nvec3 bar(vec3 color, vec3 background, vec2 position, vec2 diemensions, vec2 uv);\nvec3 bars(vec3 color, vec3 background, int bars, sampler2D sound, vec2 uv);\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x *= iResolution.x / iResolution.y;\n    vec3 color = vec3(0.95);\n    //draw logo\n    color = ring(vec3(0.0, 0.5, 1.0), color, vec2(0.45, 0.6), 0.2, 0.95, uv); //BLUE\n    color = ring(vec3(0.95, 0.85, 0.0), color, vec2(0.675, 0.4), 0.2, 0.95, uv); //YELLOW\n    color = ring(vec3(0.0, 0.0, 0.0), color, vec2(0.9, 0.6), 0.2, 0.95, uv); //BLACK\n    color = ring(vec3(0.0, 0.75, 0.0), color, vec2(1.125, 0.4), 0.2, 0.95, uv); //GREEN\n    color = ring(vec3(0.9, 0.0, 0.0), color, vec2(1.35, 0.6), 0.2, 0.95, uv); //RED\n    \n    color =  cap(vec3(0.0, 0.5, 1.0), color, vec2(0.45, 0.6), 0.2, 0.95, rotate(uv, vec2(0.45, 0.6), 23.0)); //BLUE CAP\n    color =  cap(vec3(0.95, 0.85, 0.0), color, vec2(0.675, 0.4), 0.2, 0.95, rotate(uv, vec2(0.675, 0.4), 202.0)); //YELLOW CAP\n    color =  cap(vec3(0.95, 0.85, 0.0), color, vec2(0.675, 0.4), 0.2, 0.95, rotate(uv, vec2(0.675, 0.4), 300.0)); //YELLOW CAP\n    color =  cap(vec3(0.0, 0.0, 0.0), color, vec2(0.9, 0.6), 0.2, 0.95, rotate(uv, vec2(0.9, 0.6), 120.0)); //BLACK CAP\n    color =  cap(vec3(0.0, 0.0, 0.0), color, vec2(0.9, 0.6), 0.2, 0.95, rotate(uv, vec2(0.9, 0.6), 22.0)); //BLACK CAP\n    color =  cap(vec3(0.0, 0.75, 0.0), color, vec2(1.125, 0.4), 0.2, 0.95, rotate(uv, vec2(1.125, 0.4), 203.0)); //GREEN CAP\n    color =  cap(vec3(0.0, 0.75, 0.0), color, vec2(1.125, 0.4), 0.2, 0.95, rotate(uv, vec2(1.125, 0.4), 300.0)); //GREEN CAP\n    color =  cap(vec3(0.9, 0.0, 0.0), color, vec2(1.35, 0.6), 0.2, 0.95, rotate(uv, vec2(1.35, 0.6), 120.0)); //RED CAP\n    \n    //draw visualizer\n    uv.x *= iResolution.y / iResolution.x;\n    color = bars(vec3(0.05), color, 64, iChannel0, uv);\n    \n    fragColor = vec4(color,1.0);\n}\n//music visualizer functions\nvec3 bars(vec3 color, vec3 background, int bars, sampler2D sound, vec2 uv)\n{\n    for(int i = 1; i <= bars; i++)\n    {\n        float len = 0.6 * texture(sound, vec2(float(i)/float(bars), 0.0)).x;\n        background = bar(1.0 - color - len*.2, background, vec2(float(i)/float(bars+1), len*.9), vec2(1.0/float(bars+1)*0.2, len/1.5), uv);\n    }\n    return background;\n}\n\nvec3 bar(vec3 color, vec3 background, vec2 position, vec2 diemensions, vec2 uv)\n{\n    return rectangle(color, background, vec4(position.x, position.y+diemensions.y/2.0, diemensions.x/2.0, diemensions.y/2.0), uv); //Just transform rectangle a little\n}\n\nvec3 rectangle(vec3 color, vec3 background,  vec4 region, vec2 uv) //simple rectangle\n{\n    if(uv.x > (region.r-region.b) && uv.x < (region.r+region.b) &&\n       uv.y > (region.g-region.a) && uv.y < (region.g+region.a))\n    \treturn color;\n    else return background;\n}\n//olympic logo functions\nvec3 cap(vec3 color, vec3 background, vec2 position, float radius, float size_scale, vec2 uv)\n{\n    if(uv.y > position.y && rotate(uv, position, 155.0).y > position.y)\n    {\n        background = ring(vec3(0.95), background, position, 1.05*radius, 1.13*size_scale, uv);\n    \tbackground = ring(color, background, position, radius, size_scale, uv);\n    }\n    return background;\n}\n\nvec3 ring(vec3 color, vec3 background, vec2 position, float radius, float size_scale, vec2 uv)\n{\n    if(distance(uv, position) < radius && distance(uv, position) > radius*0.8/size_scale)\n        return color;\n    return background;\n}\n\nvec2 rotate(vec2 point, vec2 center, float angle)\n{\n    float s = sin(radians(angle));\n    float c = cos(radians(angle));\n    \n    point.x -= center.x;\n    point.y -= center.y;\n    \n    float x = point.x * c - point.y * s;\n    float y = point.x * s + point.y * c;\n    \n    point.x = x + center.x;\n    point.y = y + center.y;\n    \n    return point;\n}","name":"Buffer A","description":"","type":"buffer"}]}