{"ver":"0.1","info":{"id":"lfS3zd","date":"1704516126","viewed":27,"name":"ChaCha20 High Quality Noise","username":"sampajama","description":"A high quality random hash that takes in the resolution, mouse position, previous pixel value, pixel position, and time / frame data using floatBitsToUint and produces 4 random floats from [0.0, 1.0]","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["noise","math","random","hash","whitenoise","rng","chacha"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define ROUNDS 20\n#define ROTL(a,b) (((a) << (b)) | ((a) >> (32 - (b))))\n#define QUARTER_ROUND(a, b, c, d) \\\n    a += b; d ^= a; d = ROTL(d,16); \\\n    c += d; b ^= c; b = ROTL(b,12); \\\n    a += b; d ^= a; d = ROTL(d, 8); \\\n    c += d; b ^= c; b = ROTL(b, 7);\n\n#define uintBitsToUnorm(b) (float(b) / 4294967296.0)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    uint m11 = 0x65787061u; // \"expa\"\n    uint m12 = 0x6E642033u; // \"nd 3\"\n    uint m13 = 0x322D6279u; // \"2-by\"\n    uint m14 = 0x7465206Bu; // \"te k\n\n    uint m21 = floatBitsToUint(iResolution.x);\n    uint m22 = floatBitsToUint(iResolution.y);\n    uint m23 = floatBitsToUint(iMouse.x);\n    uint m24 = floatBitsToUint(iMouse.y);\n    \n    vec4 pre = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    uint m31 = floatBitsToUint(pre.x);\n    uint m32 = floatBitsToUint(pre.y);\n    uint m33 = floatBitsToUint(pre.z);\n    uint m34 = floatBitsToUint(pre.w);\n    \n    uint m41 = floatBitsToUint(fragCoord.x);\n    uint m42 = floatBitsToUint(iTime);\n    uint m43 = floatBitsToUint(fragCoord.y);\n    uint m44 = uint(iFrame);\n\n    for (int r = 0; r < ROUNDS; r += 2) \n    {\n        // EVEN ROUND\n        QUARTER_ROUND(m11, m12, m13, m14);\n        QUARTER_ROUND(m21, m22, m23, m24);\n        QUARTER_ROUND(m31, m32, m33, m34);\n        QUARTER_ROUND(m41, m42, m43, m44);\n        \n        // ODD ROUND\n        QUARTER_ROUND(m11, m22, m33, m44);\n        QUARTER_ROUND(m21, m32, m43, m14);\n        QUARTER_ROUND(m31, m42, m13, m24);\n        QUARTER_ROUND(m41, m12, m23, m34);\n    }\n\n    fragColor = vec4(\n        uintBitsToUnorm(m11 ^ m21 ^ m31 ^ m41),\n        uintBitsToUnorm(m12 ^ m22 ^ m32 ^ m42),\n        uintBitsToUnorm(m13 ^ m23 ^ m33 ^ m43),\n        uintBitsToUnorm(m14 ^ m24 ^ m34 ^ m44)\n    );\n}","name":"Buffer A","description":"","type":"buffer"}]}