{"ver":"0.1","info":{"id":"4XjSWW","date":"1710601736","viewed":26,"name":"Prime Sphere","username":"inverse_transpose","description":"Procedural texture pattern on sphere and projection onto plane.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raytracing","prime"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 get_tuv(in vec3 p)\n{\n    return vec2(atan(p.z / p.x), acos(p.y));\n}\n\nfloat iSphere(in vec3 ro, in vec3 rd, in vec3 sc, in float r)\n{\n    vec3 oc = ro - sc;\n    float b = dot(rd, oc);\n    float c = dot(oc, oc) - r*r;\n    float t = b*b - c;\n    \n    if (0.0 > t)\n        return -1.0;\n        \n    float g = sqrt(t);\n    return min((-b + g), (-b - g));\n}\n\nbool prime(float n)\n{\n    int a = int(round(abs(n)));\n    if (1 == a || 0 == a) return false;\n    if (4 > a) return true;\n    if (0 == (a & 1)) return false;\n    \n    int k = int(floor(sqrt(float(a))));\n    for (int i = 3; i <= k; ++i)\n    {\n        if (0 == (a % i))\n            return false;\n    }\n    \n    return true;\n}\n\nfloat iPlaneQ(in vec3 ro, in vec3 rd, in vec3 n, in vec3 q)\n{\n    vec3 nn = normalize(n);\n    return -dot(nn, ro - q) / dot(nn, rd);\n}\n\nvec3 stex(in vec3 p, in vec3 sc, in vec3 col)\n{\n    float time = 0.05*iTime;\n    float cct = cos(time);\n    float sst = sin(time);\n    mat3 m3 = mat3(\n        cct, 0.0, sst,\n        0.0, 1.0, 0.0,\n       -sst, 0.0, cct\n    );\n\n    vec3 n = normalize(p - sc);\n    n = normalize(m3*n);\n    vec2 tuv = get_tuv(n) * 39.0;\n    float theta = atan(0.5);\n    float ct = cos(theta);\n    float st = sin(theta);\n    mat2 mat = mat2(\n        ct, -st,\n        st,  ct\n    );\n\n    vec2 mouse = iMouse.xy * 0.025;\n    return prime(tuv.x + mouse.x + sin(iTime+tuv.x)) && prime(tuv.y + mouse.y + cos(iTime+tuv.y))\n        ? vec3(0.2, 0.8, 0.7) * 1.2\n        : col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = 2.0 * fragCoord/iResolution.xy - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    uv.y -=0.2;\n    vec3 ro = vec3(0.0, 0.0, 1.0);\n    vec3 rd = normalize(vec3(uv, -1.0));\n    vec3 sc = vec3(0.0, 0.195, -1.0);\n    float radius = 0.85;\n    float t = iSphere(ro, rd, sc, radius);\n    float dist = 10000.0;\n    \n    vec3 col = vec3(0.9);\n    \n    if (!(0.0 > t))\n    {\n        dist = t;\n        col = stex(ro + t*rd, sc, vec3(0.1));\n    }\n   \n    t = iPlaneQ(ro+vec3(0.0,0.3,0.0), rd, vec3(0.0, 1.0, 0.0), vec3(0.0, -0.5, 0.0));\n    if (!(0.0 > t) && t < dist)\n    {\n        dist = t;\n        vec3 p = ro + t*rd;\n        vec3 ts = sc - p;\n        float l = length(ts);\n        vec3 fs = normalize(p - sc);\n        vec3 ps = fs * radius + sc;\n        float k = 0.5 + 0.5*dot(normalize(ts), vec3(0.0, 1.0, 0.0));\n        col = mix(vec3(0.9), stex(ps, sc, vec3(0.1)), k / (l*l));\n    }\n\n    col = pow(col, vec3(1.0/1.4));\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}