{"ver":"0.1","info":{"id":"3lKcRW","date":"1610578506","viewed":400,"name":"halftone effect","username":"manu210404","description":"this shader gives some sort of halftone look to the rendered values ","likes":11,"published":3,"flags":0,"usePreview":0,"tags":["halftone","distance","dot","dist","manhattandistance"],"hasliked":0,"parentid":"WlVyRW","parentname":"halftone shader"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define d(p) length(p-.5)\n#define R iResolution.xy\nfloat halftone(in vec2 p, in float val, in float scale) {\n    p = fract(p);\n    vec2 o = vec2(-.5,.5);\n    vec2 t = p+o.xx;\n    float eps = 1./iResolution.y*scale;\n    return smoothstep(val + eps, \n                      val - eps, \n                      mix(d(p),                                                         // distance from center of cell\n                          1.-min(min(d(p+o.xx), d(p+o.xy)), min(d(p+o.yy), d(p+o.yx))), // negative distance from the corners of cell plus one\n                          smoothstep(0.,1.,abs(t.x) + abs(t.y))                         // manhattan distance from center of cell with smoothstep\n                                                                                        // the smoothstep is to make it look round faster\n                        //abs(t.x) + abs(t.y)                                           // here would be the normal manhattan distance\n                          )\n                      );\n}\n\nfloat s(in vec2 p) {\n    return fract(d(p)-iTime-atan(p.x-.5, p.y-.5)/3.1415*.5);\n}\n\nvoid mainImage( out vec4 O, in vec2 u )\n{\n    float scale = 16.;\n    vec2 uv = u/R.y-vec2(R.x/R.y-1.,0)*.5,\n          p = uv*scale,\n        pfr = smoothstep(0.,1.,fract(p));\n    vec4 pf = vec4(floor(p)/scale,ceil(p)/scale);\n    \n    float val = mix(mix(s(pf.xy), s(pf.zy), pfr.x), mix(s(pf.xw), s(pf.zw), pfr.x), pfr.y);\n    val = halftone(p, val, scale);\n    \n    O = vec4(vec3(val),1);\n}","name":"Image","description":"","type":"image"}]}