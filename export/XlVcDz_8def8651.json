{"ver":"0.1","info":{"id":"XlVcDz","date":"1535829578","viewed":916,"name":"slit scanner","username":"ufffd","description":"fork of https://www.shadertoy.com/view/XtsSW8","likes":5,"published":3,"flags":34,"usePreview":0,"tags":["scanline","slitscan","backbuffer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{  \n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 px = 1./iResolution.xy;\n    vec3 col = texture(iChannel0,uv).rgb;\n    vec3 cam = texture(iChannel1,uv).rgb;\n    if (uv.x > scanline) col = mix(col,cam,smoothstep(0.2,0.02,distance(uv.x,scanline))) + smoothstep(px.x,0.,distance(uv.x,scanline));\n    // else col = mix(col,cam,distance(uv.x,scanline));\n    fragColor = vec4(col,1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 colors = vec3(0.);\n    if ( scanline < uv.x + (1./iResolution.x) && scanline > uv.x) {\n        colors = texture(iChannel0,uv).rgb;\n    } else {\n        colors = texture(iChannel1,uv).rgb;\n    }\n    fragColor = vec4(colors,1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define scanline (mod(float(iFrame)/iResolution.x,1.))","name":"Common","description":"","type":"common"}]}