{"ver":"0.1","info":{"id":"4sdcRr","date":"1517800189","viewed":206,"name":"VFB","username":"rory618","description":"use 1 and 2 with mouse to change scaling, rotation, and translation. Hold space for smooth changes. 3-6 toggle various reflections.\nSuture Fluid by cornusammonis is in buffer c, which can be switched out with any kind of kernel based multipass shader.","likes":3,"published":1,"flags":48,"usePreview":0,"tags":["videofeedback"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texelFetch( iChannel0, ivec2(fragCoord), 0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texelFetch( iChannel0, ivec2(fragCoord), 0);\n    for(int i = 0; i < 9; i++){\n        if(texelFetch( iChannel3, ivec2(32,0), 0 ).x>.5) {\n            if(iMouse.z>0.&&ivec2(fragCoord)==ivec2(0,i) && texelFetch( iChannel3, ivec2(49+i,0), 0 ).x>.5){\n                fragColor.xy += (iMouse.xy-iMouse.zw)/100.;\n            }\n        } else {\n            if(iMouse.z>0.&&ivec2(fragCoord)==ivec2(0,i) && texelFetch( iChannel3, ivec2(49+i,0), 0 ).x>.5){\n                fragColor.xy = iMouse.xy;\n            }\n        }\n    }\n    if(iFrame<3){\n        if(fragCoord.y>1.){\n        \tfragColor.xy = iResolution.xy/2.-212.*texelFetch( iChannel1, ivec2(fragCoord), 0).xy;\n        } else {\n            fragColor.xy = iResolution.xy/2. + 25.;\n        }\n    }\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"vec2 ballFold(float r, vec2 x){\n    float mag = length(x);\n    if(mag<r){\n        mag/=r*r;\n    } else if (mag<1.0){\n        mag = 1.0/mag;\n    }\n    return x/length(x) * mag;\n}\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+19.19);\n    return fract(vec3((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y, (p3.y+p3.z)*p3.x));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 a = 4.*(texelFetch( iChannel0, ivec2(0,0), 0).xy);\n    vec2 b = 4.*(texelFetch( iChannel0, ivec2(0,1), 0).xy/iResolution.xy-.5);\n    vec2 fc = fragCoord;\n    \n    if(texelFetch( iChannel3, ivec2(57,2), 0 ).x<.5){\n    \ta += sin(iTime/2.+vec2(0,1.5))*10.;\n        //b += sin(iTime/2.23+vec2(0,1.5))/30.;\n        b = length(b)*vec2(cos(iTime/4.23),sin(iTime/4.23));\n    }\n    \n    if(texelFetch( iChannel3, ivec2(51,2), 0 ).x<.5)\n    \tfc.x = iResolution.x/2.-abs(iResolution.x/2.-fc.x);\n    \n    if(texelFetch( iChannel3, ivec2(52,2), 0 ).x<.5)\n    \tfc.y = iResolution.y/2.-abs(iResolution.y/2.-fc.y);\n    \n    \n    if(texelFetch( iChannel3, ivec2(48,2), 0 ).x>.5)\n    \tfc = ballFold(.2,fc/iResolution.x)*iResolution.x;\n\n    fc += a-iResolution.xy*2.;\n    \n    fc = (fc-iResolution.xy/2.) * mat2(b.x,-b.y,b.y,b.x)+iResolution.xy/2.;\n    \n    \n    if(texelFetch( iChannel3, ivec2(53,2), 0 ).x>.5)\n    \tfc.y = abs(fc.y);\n    if(texelFetch( iChannel3, ivec2(54,2), 0 ).x<.5)\n    \tfc.x = abs(fc.x);\n    if(texelFetch( iChannel3, ivec2(55,2), 0 ).x<.5)\n    \tfc.y = mod(fc.y,iResolution.y);//-abs(iResolution.y-fc.y);\n    if(texelFetch( iChannel3, ivec2(56,2), 0 ).x<.5)\n    \tfc.x = mod(fc.x,iResolution.x);// iResolution.x-abs(iResolution.x-fc.x);\n    \n\n    \n    if(\n        //length(fc-iResolution.xy/2.)<iResolution.y/2.\n       fc.x<iResolution.x&&fc.y<iResolution.y&&fc.x>0.&&fc.y>0.\n    ){\n    \tfragColor =cos(2.*texture(iChannel1,fc/iResolution.xy));\n    } else {\n        fragColor =cos(2.*texture(iChannel1,vec2(.5)));\n    }\n    fragColor.xyz += (hash33(vec3(fragCoord.xy,iFrame))-.5)/10.;\n    fragColor = mix(fragColor,texture(iChannel2,fragCoord/iResolution.xy),.75);\n   \n}","name":"Buf B","description":"","type":"buffer"},{"inputs":[{"id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","previewfilepath":"/media/ap/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"// Sharpening\n// I know about texelFetch, but my browser doesn't seem to support it :(\n#define T(x,y) vec4(texture(iChannel0, fract((fragCoord+vec2(x,y))/iResolution.xy)).xyz, 1)\n#define F(i) (f(i))\n#define BLUR (G(-4) + G(-3) + G(-2) + G(-1) + G(0) + G(1) + G(2) + G(3) + G(4))\n\nconst float PI = atan(0., -1.);\nfloat f(float i)\n{\n    return exp(-i*i/4.)/sqrt(4.*PI);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/iResolution.xy-0.5;\n    vec4 col = T(-1, -1)*0.0625 + T( 0, -1)*0.125 + T( 1, -1)*0.0625 +\n               T(-1,  0)*0.125 + T( 0,  0)*0.25 + T( 1,  0)*0.125 +\n               T(-1,  1)*0.0625 + T( 0,  1)*0.125 + T( 1,  1)*0.0625;\n    //col /= 8.0;\n    //col = T(0, 0) - col*50.0;\n    //col -= 0.5;\n    //col = col*0.7;\n    //col = smoothstep(vec4(-0.5), vec4(0.5), col);\n    //col = mix(col, vec4(length(col.xyz)/sqrt(3.)), 0.1);\n    fragColor = col;\n}","name":"Buf C","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"// Sharpening\n// I know about texelFetch, but my browser doesn't seem to support it :(\n#define T(x,y) vec4(texture(iChannel0, fract((fragCoord+vec2(x,y))/iResolution.xy)).xyz, 1)\n#define F(i) (f(i))\n#define BLUR (G(-4) + G(-3) + G(-2) + G(-1) + G(0) + G(1) + G(2) + G(3) + G(4))\n\nconst float PI = atan(0., -1.);\nfloat f(float i)\n{\n    return exp(-i*i/4.)/sqrt(4.*PI);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/iResolution.xy-0.5;\n    vec4 col = T(-1, -1)*0.05 + T( 0, -1)*0.20 + T( 1, -1)*0.05 +\n               T(-1,  0)*0.20 - T( 0,  0)*1.00 + T( 1,  0)*0.20 +\n               T(-1,  1)*0.05 + T( 0,  1)*0.20 + T( 1,  1)*0.05;\n    col /= 8.0;\n    col = T(0, 0) - col*50.0;\n    col -= 0.5;\n    col = col*0.7;\n    col = smoothstep(vec4(-0.5), vec4(0.5), col);\n    col = mix(col, vec4(length(col.xyz)/sqrt(3.)), 0.1);\n    fragColor = col;\n}","name":"Buf D","description":"","type":"buffer"}]}