{"ver":"0.1","info":{"id":"mlXSDf","date":"1675425651","viewed":38,"name":"Rotating object in clouds","username":"sanivel","description":"GLSL Partiel 2023 \nJade (Hyunsun) Park\n","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["rotating","boolean","union"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// ATI Jade (Hyunsun) Park\n// Based on Remy's code from GLSL class\n// Also based on @patriciogv\n// http://patriciogonzalezvivo.com\n\n//Effects\nfloat opSmoothUnion( float d1, float d2, float k ) \n{\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n\n    return mix( d2, d1, h ) - k*h*(1.0-h); \n}\nvec2 rot(vec2 st, float a)\n{\n    return st * mat2(cos(a), -sin(a), sin(a), cos(a));\n}\nvec2 unionMaterials(vec2 d1, vec2 d2)\n{\n    return (d1.x < d2.x) ? d1 : d2;\n}\nfloat opUnion( float d1, float d2 )\n{\n    return min(d1, d2);\n}\n\n//Objects\nfloat sdBox(vec3 p, vec3 b)\n{\n    vec3 q = abs(p) - b;\n\n    return length(max(q, 0.)) + min(max(q.x,max(q.y,q.z)),0.);\n}\nfloat sdSphere(vec3 p, float s)\n{\n    return length(p)-s;\n}\n\n\n//Background\nfloat random (in vec2 _uv) \n{\n    return fract(sin(dot(_uv.xy,\n           vec2(12.9898,78.233)))*\n           43758.5453123);\n}\nfloat noise (in vec2 _uv) \n{\n    vec2 i = floor(_uv);\n    vec2 f = fract(_uv);\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n#define NUM_OCTAVES 5\nfloat fbm ( in vec2 _uv) \n{\n    float v = 0.0;\n    float a = 0.5;\n    vec2 shift = vec2(100.0);\n    mat2 rot = mat2(cos(0.5), sin(0.5),\n               -sin(0.5), cos(0.50));\n    for (int i = 0; i < NUM_OCTAVES; ++i) \n    {\n        v += a * noise(_uv);\n        _uv = rot * _uv * 2.0 + shift;\n        a *= 0.5;\n    }\n    \n    return v;\n}\n\n\n//Scene\nvec2 map(vec3 pos) \n{  \n \n    float sBase = sdSphere(pos, 4.0);\n    float cBase = sdBox(pos, vec3(10.0, 0.5, 10.0));\n    float volume = opUnion(sBase, cBase);\n    \n    vec3 sp1 = pos + vec3(20.0, 1.0, 0.0);\n    vec2 sphere = vec2(sdSphere(sp1, 6.0), 0.0); \n    vec2 sdf = unionMaterials(sphere, vec2(volume, 1.0));\n\n    return sdf;\n}\nvec2 CastRay(vec3 ro, vec3 rd)\n{\n    float contact = 0.0;\n    for(int i=0; i<60; i++)\n    {\n        vec2 ray = map(ro + rd * contact);\n\n        if(ray.x < (0.0001*contact))\n        {\n            return vec2(contact, ray.y);\n        }\n        contact += ray.x;\n    }\n    \n    return vec2(-1.0, 0.0);\n}\nvec3 render(vec3 ro, vec3 rd) \n{\n    vec2 contact = CastRay(ro, rd);\n    vec3 col = vec3(0.0);\n    if(contact.x == -1.0)\n    {\n        col = vec3(0.0);\n    }\n    else\n    {\n    if(contact.y == 0.0)\n    {\n        col = vec3(0.101961,0.619608,0.666667);}\n        else if(contact.y == 1.0)\n        {\n        col = vec3(0.2345, 0.1, 0.987657);\n        }\n    }\n    \n    return col;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = 2.0 * fragCoord/iResolution.xy - 1.;\n    uv.x *= iResolution.x/iResolution.y;\n    vec3 col = vec3(0.0);\n    \n    //Set Camera\n    vec3 cameraPos = vec3(-6., 3.0, -10.0);\n    vec3 cameraTar = vec3(0.0);    \n    cameraPos.xz = rot(cameraPos.xz, iTime*2.);    \n    vec3 forward = normalize(cameraTar - cameraPos);\n    vec3 right = normalize(cross(vec3(0., -1, 0.), forward));\n    vec3 up = normalize(cross(right, forward));\n    vec3 viewDir = normalize(uv.x * right + uv.y * up + forward);\n    \n    //Set the clouds behind\n    vec2 q = vec2(0.);\n    q.x = fbm( uv + 0.00*iTime);\n    q.y = fbm( uv + vec2(1.0));\n    vec2 r = vec2(0.);\n    r.x = fbm( uv + 1.0*q + vec2(1.7,9.2)+ 0.15*iTime );\n    r.y = fbm( uv + 1.0*q + vec2(8.3,2.8)+ 0.126*iTime);\n    float f = fbm(uv+r);\n    col = mix(vec3(0.101961,0.619608,0.666667),\n              vec3(0.666667,0.666667,0.498039),\n              clamp((f*f)*4.0,0.0,1.0));\n    col = mix(col,vec3(0,0,0.164706),\n              clamp(length(q),0.0,1.0));\n    col = mix(col,vec3(0.666667,1,1),\n              clamp(length(r.x),0.0,1.0));\n             \n    //Combine rendered object and background\n    col += render(cameraPos, viewDir);\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}