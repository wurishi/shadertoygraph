{"ver":"0.1","info":{"id":"NscSDB","date":"1633810677","viewed":212,"name":"aa Hexagon Tiles Edwy","username":"Edwy","description":"Tiled hexagons obstructing chroma wave.  I'm new to this so it's not very elegant but the math is pretty straightforward.  Forks Boilerplate MSAA by clepirelli.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["template","hexagon","pattern","tile","msaa"],"hasliked":0,"parentid":"7sSGDW","parentname":"MSAA, gamma and UV boilerplate"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 hex(vec2 point){\n    return vec2( (point.x + 1.7321 * point.y) / 3.0, (point.x + 1.7321 * point.y) / 3.0 - 1.1547 * point.y);\n}\n\nvec2 point(vec2 hex){\n    return vec2(3.0 * (hex.x + hex.y), 1.7321 * (hex.x - hex.y)) / 2.0;\n}\n\nfloat inhex(vec2 p, vec2 c, float s){\n    return step(max(abs(c.y - p.y), dot(abs(p - c), normalize(vec2(1.7321, 1.0)))), s / 2.0);\n}\n\nvec3 Image(vec2 uv)\n{\n    vec3 col = 0.5 + 0.5*cos(iTime / 5.0 +uv.xyx+vec3(0,2,4));\n    \n    vec2 nuv = 15.0 * uv;\n    \n    nuv += vec2(iTime / 350.0);\n    \n    float s = 1.69 + 0.006 * sin(iTime / 5.0);\n\n    vec2 nc = round(hex(nuv));\n    \n    col *= 1.0 - inhex(nuv, point(nc), s) - inhex(nuv, point(nc + vec2(1 ,0)), s) - inhex(nuv, point(nc + vec2(-1, 0)), s) - inhex(nuv, point(nc + vec2(0, 1)), s) - inhex(nuv, point(nc + vec2(0, -1)), s);\n    \n    return col;\n}\n\nMAIN_FUNCTION(Image)","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"const int aa = 8;\nconst float aperture = 1.0;\n\nvec4 colorCorrect(vec3 color)\n{\n    vec3 x = max(vec3(.0), color*aperture-.004);\n    vec3 retColor = (x*(6.2*x+.5))/(x*(6.2*x+1.7)+0.06);\n    return vec4(min(retColor, 1.0), 1.0);\n}\n\n#define MAIN_FUNCTION(function) \\\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\\\n{\\\n    vec3 total = vec3(.0);\\\n    /*MSAA*/\\\n    for(int i = 0; i <aa;i++)\\\n    for(int j = 0; j <aa;j++)\\\n    {\\\n    \t/*offset the uv for MSAA*/\\\n    \tvec2 uv = (fragCoord+vec2(float(i),float(j))/float(aa)-.5)/iResolution.xy - vec2(.5);\\\n    \tuv.x *= iResolution.x/iResolution.y;\\\n    \t\\\n        total+= function(uv);\\\n    }\\\n    total /= float(aa*aa);\\\n    \\\n    /*Output to screen*/\\\n    fragColor = colorCorrect(total);\\\n}","name":"Common","description":"","type":"common"}]}