{"ver":"0.1","info":{"id":"lsSfW3","date":"1502412068","viewed":366,"name":"Voronoi Cells","username":"Homaniac","description":"simple voronoi noise where the space is tiled and a point within the tile randomly moves within it. Shader function finds the tile the pixel is in, and checks all the neighboring ones to find the nearest moving point.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["cells","voronoinoise","nearestcell"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 random2( vec2 p ) {\n    return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);\n}\n\nvec3 hsb2rgb( in vec3 c ){\n  vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),\n                           6.0)-3.0)-1.0,\n                   0.0,\n                   1.0 );\n  rgb = rgb*rgb*(3.0-2.0*rgb);\n  return c.z * mix(vec3(1.0), rgb, c.y);\n}\n\n// Value Noise by Inigo Quilez - iq/2013\n// https://www.shadertoy.com/view/lsf3WH\nfloat noise(vec2 st) {\n  vec2 i = floor(st);\n  vec2 f = fract(st);\n\n  vec2 u = f*f*(3.0-2.0*f);\n\n  return mix( mix( dot( random2(i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ), \n                   dot( random2(i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),\n              mix( dot( random2(i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ), \n                   dot( random2(i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 st = fragCoord.xy/iResolution.xy;\n    st.x *= iResolution.x/iResolution.y;\n    vec3 color = vec3(.0);\n\n    // Scale\n    st *= 10.;\n\n    // Tile the space\n    vec2 i_st = floor(st);\n    vec2 f_st = fract(st);\n\n    float m_dist = 1.;  // minimun distance\n\n    for (int y= -1; y <= 1; y++) {\n        for (int x= -1; x <= 1; x++) {\n          // Neighbor place in the grid\n          vec2 neighbor = vec2(float(x),float(y));\n\n          // Random position from current + neighbor place in the grid\n          vec2 point = random2(i_st + neighbor);\n\n          // Animate the point\n          point = 0.5 + 0.5*sin(iTime + 6.2831*point);\n\n          // Vector between the pixel and the point\n          vec2 diff = neighbor + point - f_st;\n\n          // Distance to the point\n          // float dist = length(diff);\n          float dist = length(diff)*((0.25*sin(iTime*0.3) + 0.25) + 0.6);\n\n          // Keep the closer distance\n          m_dist = min(m_dist, dist);\n          // m_dist = min(m_dist, 3.0*dist*dist*dist - 2.0*dist*dist + dist);\n        }\n    }\n\n\n    // Draw the min distance (distance field)\n    // color += m_dist;\n    // color += smoothstep(0.0,1.0,m_dist);\n    // color += hsb2rgb(vec3(0.4,1.0,m_dist + 0.2*sin(iTime*0.5)));\n\n      // color += mix(hsb2rgb(vec3(0.385, 1.0, 0.9)),\n      //              hsb2rgb(vec3(0.6, 1.0, 0.1)),\n      //              smoothstep(0.0, 1.0, 1.2*m_dist*m_dist));\n\n      color += mix(hsb2rgb(vec3(0.385, 1.0, 0.7)),\n                   hsb2rgb(vec3(0.6, 1.0, 0.1)),\n                   smoothstep(0.0, 1.0, 1.2*m_dist*m_dist));\n\n      color += mix(hsb2rgb(vec3(0.385,1.0,0.3)),\n                   hsb2rgb(vec3(0.7,1.0,0.5)),\n                   smoothstep(0.0, 0.5, m_dist));\n\n      color += mix(hsb2rgb(vec3(0.0,0.9,1.0*(0.5*sin(iTime + st.x)*cos(iTime + st.y) + 0.5))),\n                   hsb2rgb(vec3(0.0,0.0,0.0)),\n                   smoothstep(0.0, 0.35, m_dist));\n\n      color += mix(hsb2rgb(vec3(0.8,0.0,0.0)),\n                   hsb2rgb(vec3(0.9,1.0,0.8)),\n                   smoothstep(0.8, 1.9, m_dist));\n\n      // color += mix(hsb2rgb(vec3(0.385, 1.0, 0.9)),\n      //              hsb2rgb(vec3(0.6, 1.0, 0.3)),\n      //              1.0 / m_dist);\n\n    // Draw cell center\n    // color += 1.-step(.02, m_dist);\n\n    // Draw grid\n    // color.r += step(.98, f_st.x) + step(.98, f_st.y);\n\n    // Show isolines\n    // color -= step(.7,abs(sin(27.0*m_dist)))*.5;\n\n    fragColor = vec4(1.0 - color,1.0);\n}\n","name":"Image","description":"","type":"image"}]}