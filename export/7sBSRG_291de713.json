{"ver":"0.1","info":{"id":"7sBSRG","date":"1620455802","viewed":80,"name":"Silly little fractal noise test","username":"GeorgeHWFan420","description":"test perlin noise ","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    \n    vec2 uv = fragCoord/iResolution.x;\n    uv.x += (iTime/5.);\n    float noise = perlinishNoise(16., uv, 10, 2.);\n    // Output to screen\n    if(noise > (sin(iTime)+1.)*0.5){\n        fragColor =  vec4(1.0, .0, .0, 1.0);\n    }\n    else{\n        fragColor =  vec4(.0, noise, .0, 1.0);\n    }\n    //fragColor =  vec4(.0, noise, .0, 1.0);\n\n    //fragColor = vec4(noise, noise, noise, 1.0);\n    //fragColor = vec4(sampleBias, .0 ,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define PI 3.1415\n\nfloat rand(int x, int y){\n    vec2 co = vec2(float(x), float(y));\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat cubicInterpolate (vec4 p, float x) {\n\treturn p[1] + 0.5 * x*(p[2] - p.r + x*(2.0*p.r - 5.0*p[1] + 4.0*p[2] - p[3] + x*(3.0*(p[1] - p[2]) + p[3] - p[0])));\n}\n\nfloat bicubicInterpolate (mat4 p, float x, float y) {\n\tvec4 arr;\n\tarr.x = cubicInterpolate(p[0], x);\n\tarr.y = cubicInterpolate(p[1], x);\n\tarr.z = cubicInterpolate(p[2], x);\n\tarr.w = cubicInterpolate(p[3], x);\n\treturn cubicInterpolate(arr, y);\n}\n\nfloat randomNoise(float scale, vec2 uv){\n    float inverseScale = 1./scale;\n    vec2 modUv = mod(uv, vec2(inverseScale, inverseScale));\n    vec2 sampleBias = (modUv)/inverseScale;\n    \n    int x = int(uv.x * scale);\n    int y = int(uv.y * scale);\n\n    mat4 samples;\n    \n    samples[0][0] = rand(x - 1,y - 1);\n    samples[0][1] = rand(x    ,y - 1);\n    samples[0][2] = rand(x + 1,y - 1);\n    samples[0][3] = rand(x + 2,y - 1);\n    samples[1][0] = rand(x - 1,y    );\n    samples[1][1] = rand(x    ,y    );\n    samples[1][2] = rand(x + 1,y    );\n    samples[1][3] = rand(x + 2,y    );\n    samples[2][0] = rand(x - 1,y + 1);\n    samples[2][1] = rand(x    ,y + 1);\n    samples[2][2] = rand(x + 1,y + 1);\n    samples[2][3] = rand(x + 2,y + 1);\n    samples[3][0] = rand(x - 1,y + 2);\n    samples[3][1] = rand(x    ,y + 2);\n    samples[3][2] = rand(x + 1,y + 2);\n    samples[3][3] = rand(x + 2,y + 2);\n    \n    \n    float val = bicubicInterpolate(samples, sampleBias.x, sampleBias.y);\n   \n    return(val);\n\n}\n\nfloat perlinishNoise(float scale, vec2 uv, int iter, float scaleFalloff){\n    float noise;\n    for(int i=0;i<iter;i++) {\n        float iterScale = scale * pow(2., float(i));\n        noise += randomNoise(iterScale, uv)*1./pow(2., float(i+1));\n    }\n    return noise;\n\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0,0.0,1.0,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}