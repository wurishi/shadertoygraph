{"ver":"0.1","info":{"id":"DstBz4","date":"1697430400","viewed":77,"name":"fractal plant things","username":"MonterMan","description":"a failed attempt at tree, but generates some interesting patterns regardless","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["tree"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TWEAK1 (iMouse.x/iResolution.x)\n#define TWEAK2 (iMouse.y/iResolution.y)\n\nfloat sdBox(vec2 p, vec2 dim)\n{\n    p = abs(p) - 0.5*dim;\n    return max(p.x, p.y);\n}\n\nmat2 rot2d(float theta)\n{\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat2(\n        c, s,\n        -s, c);\n}\n        \nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat opMirror(float x, out float outId)\n{\n    outId = sign(x);\n    return abs(x);\n}\n\nfloat sdBranch(vec2 p, vec2 dim)\n{\n    p.y -= 0.5*dim.y;\n    return sdBox(p, dim);\n}\n\nfloat sdTree(vec2 uv, float version)\n{\n    float branchW = 0.07;\n    float branchH = 0.35;\n\n    float dist = sdBranch(uv, vec2(branchW, branchH));\n    \n    float iterRot = -0.25;\n    //iterRot = -TWEAK1;\n    float iterScale = 0.93;\n    //iterScale = TWEAK2;\n    \n    float s = 1.0;\n    float surviveChance = 0.99;\n    for (int i = 0; i < 20; ++i)\n    {\n        float r = hash12(vec2(i, version));\n        if (r < surviveChance)\n        {               \n            float sideId;\n            uv.x = opMirror(uv.x, sideId); \n        }\n\n        uv.y -= branchH*s;\n        uv *= rot2d(iterRot);\n        dist = min(dist, sdBranch(uv, s*vec2(branchW,branchH)));\n        s *= iterScale;\n        surviveChance *= 0.9;\n    }\n\n    return dist;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = 2.0 * uv - 1.0;\n    uv.x *= iResolution.x/iResolution.y;\n\n    uv.y += 0.75;\n    uv *= 2.0;\n    \n    float ft = fract(iTime);\n    float version = floor(iTime);\n    \n    float dist = sdTree(uv, 800.0*version);\n    \n    float animT = 0.2;\n    if (ft > 1.0 - animT)\n    {\n        float lerpT = (ft - 1.0 + animT) / animT;\n        lerpT = smoothstep(0.0, 1.0, lerpT);\n        dist = mix(dist, sdTree(uv, 800.0*(version+1.0)), lerpT);\n    }\n\n    float col_t = smoothstep(dFdx(uv).x, 0.0, dist);\n    vec3 col = vec3(col_t);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}