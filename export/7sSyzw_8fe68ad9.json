{"ver":"0.1","info":{"id":"7sSyzw","date":"1643235505","viewed":98,"name":"bowl shrub","username":"jt","description":"Project TLC123's tree sdf [url]https://www.shadertoy.com/view/sl2SRt[/url] onto a bowl to create a 3d shrub.","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["2d","3d","sdf","tree","distance","project","sweep","bound","extrude","2dto3d","insulate","embed","wireify","stringify","3dify","shrub","carrier"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/7sSyzw bowl shrub 2022-1-26 by Jakob Thomsen\n// previous versions:\n// https://www.shadertoy.com/view/7dByRz\n// https://www.shadertoy.com/view/fdSyRW\n// Project TLC123's 2d tree sdf onto a 3d bowl sdf carrier.\n// Additional credits:\n//  * TLC123 for the original 2d tree SDF\n//  * FabriceNeyret2 & Shane for additional 3dify functions\n//  * iq for fundamental raymarching functions\n\n#define EPSILON 0.001\n#define DIST_MAX 50.0\n\nfloat halfspace(vec3 p, float d)\n{\n    return p.z - d;\n}\n\nfloat sphere(vec3 p, float r)\n{\n    return length(p) - r;\n}\n\n// https://www.shadertoy.com/view/sl2SRt 2d tree branching SDF by TLC123\nfloat PI = acos(-1.0);\nfloat TAU = acos(-1.0) * 2.0;\n\nfloat smin(float a, float b,float k )\n{\n    float h = clamp(0.5 + 0.5 * (b - a) / k, 0.0, 1.0) ;\n    return mix(b, a, h ) - k * h * (1.0 - h);\n}\n\nfloat smax(float a, float b, float k)\n{\n    return -smin(-a,-b, k);\n}\n\nfloat TLC123_tree2d(vec2 uv, int branches)\n{\n    // to polar\n    vec2 p = vec2((atan(uv.x, uv.y) / TAU) * float(branches), length(uv));\n\n    float Y, y, X;\n    Y = exp2(floor(p.y));\n    y = 0.5 + (pow(fract(p.y), 0.85)) * 0.5 + 0.5;\n    X = abs(p.x * Y);\n    p.x = abs(fract(X - y * .5) - 0.5) * 2.0;\n    p.x = max(p.x, abs(fract(X + y * 0.5) - 0.5) * 2.0);\n \n    float branchwidth = 0.1 / (0.25 + p.y);\n    float outerlimit = p.y - 4.6;\n    float scaleAdjusted = 1.5 * (((1.0 - p.x) / Y) * p.y);\n    return smax(outerlimit, scaleAdjusted - branchwidth, 0.2) * 0.5;\n}\n\nfloat project_tree(vec3 p, float h)\n{\n    int N = 6; // number of variants\n    //int variant = int(floor(fract(0.2*iTime/float(N)) * float(N)));\n    //int variant = int(floor(mod(0.2*iTime, float(N))));\n    int variant = int(mod(0.2*iTime, float(N)));\n    \n    // 3d sdf carrier / host\n    float dc = DIST_MAX;\n    \n    if(variant == 0) // original implementation (jt)\n    {\n        //dc = p.z; // distance to plane\n        //dc = sphere(p, 2.0); // distance to sphere\n        //dc = max(p.z, sphere(p, 2.0)); // distance to half sphere (bound)\n        dc = max(p.z, max(sphere(p, 2.0),-sphere(p-vec3(0,0,0.25), 2.1))); // distance to bowl (bound)\n    }\n    else if(variant == 1) // Dome-variant suggested by jorge2017a2\n    {\n        p.z *= -1.0;\n        p.z -= 3.0;\n        dc = max(p.z, max(sphere(p, 2.0),-sphere(p-vec3(0,0,0.25), 2.1))); // distance to bowl (bound)\n    }\n    else if(variant == 2) // Bowl variant by FabriceNeyret2\n    {\n        p.z += 1.4;\n        dc = length(p)-1.;\n        p.xy = vec2( atan(p.y,p.x), atan(p.z,length(p.xy)) );\n    }\n    else if(variant == 3) // Sphere by FabriceNeyret2\n    {\n        p.z = -p.z-1.2;\n        dc = length(p)-1.;\n        p.xy = vec2( atan(p.y,p.z), atan(p.x,length(p.zy)) )/1.57 ;\n    }\n    else if(variant == 4) // Cup by FabriceNeyret2\n    {\n        p.z += 1.; \n        dc = length(p)-1.; \n        p.xy *= .5*(3.14+atan(p.z,length(p.xy))) / length(p.xy);\n    }\n    else if(variant == 5) // Cage by FabriceNeyret2\n    {\n        p.z += 1.2; \n        dc = length(p)-1.; p*=1.85;\n    }\n\n    //float s = 0.42 * h; // scale tree\n    float s = 0.4 * h; // scale tree\n    float t = 0.01; // thickness\n    float df = TLC123_tree2d(p.xy/s, 3)*s; // distance to \"surface\"/outline given by 2d distance function\n\n    return sqrt(dc*dc+df*df)-t; // expand/3dify 2d SDF (circular cross-section) by jt\n    //return min(max(abs(dc),df+t), sqrt(dc*dc+df*df))-t; // FILLED (takes interior into accound) by FabriceNeyret2\n    //return df+.2*abs(dc); // even nicer, more subtle paper-like style\n    //return max(df,dc) - t; // rectangle\n    //return max(df,abs(dc)) - t; // flat rectangle\n    \n    // Variants suggested by Shane\n    //return max(abs(df), abs(dc) - .15) - t; // \"Hacky rectangle cross section\"\n    //return max((abs(df) + abs(dc))*.7071, max(abs(df), abs(dc))) - t; // \"Hacky octagon cross section\"\n    //return length(vec2(df, dc)) - t; // Circle\n}\n\nfloat map(vec3 p)\n{\n    float s = 1.5;\n    //float h = mix(1.0, 0.75, 0.5 + 0.5 * cos(iTime*0.5));\n    float h = 1.0;\n    return\n        min\n        (\n            project_tree((p+vec3(0,0,-2.25))/s, h)*s,\n            halfspace(p, -1.2)\n        );\n}\n\n// https://iquilezles.org/articles/normalsSDF tetrahedron normals\nvec3 normal(vec3 p)\n{\n    const float h = EPSILON;\n    const vec2 k = vec2(1,-1);\n    return\n        normalize\n        (\n            k.xyy * map(p + k.xyy*h)\n            +\n            k.yyx * map(p + k.yyx*h)\n            +\n            k.yxy * map(p + k.yxy*h)\n            +\n            k.xxx * map(p + k.xxx*h)\n        );\n}\n\nfloat trace(vec3 ro, vec3 rd)\n{\n    for(float t = 0.0; t < DIST_MAX;)\n    {\n        float h = map(ro + rd * t);\n        if(h < EPSILON)\n            return t;\n        t += h;\n        //t += h * 0.5; // some variants require this due to inexact distance\n    }\n    return DIST_MAX;\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat shadow( in vec3 ro, in vec3 rd, float mint, float maxt )\n{\n    for( float t=mint; t<maxt; )\n    {\n        float h = map(ro + rd*t);\n        if( h<EPSILON )\n            return 0.0;\n        t += h;\n    }\n    return 1.0;\n}\n\n// https://www.shadertoy.com/view/Xds3zN raymarching primitives\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n    float occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.01 + 0.12*float(i)/4.0;\n        float d = map( pos + h*nor );\n        occ += (h-d)*sca;\n        sca *= 0.95;\n        if( occ>0.35 ) break;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 ) ;\n}\n\n#define pi 3.1415926\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 ndc = 2.0 * fragCoord.xy / iResolution.xy - 1.0;\n    ndc.x *= iResolution.x / iResolution.y;\n    vec2 m = length(iMouse.xy) <= 10. // click in lower left corner...\n           ? pi * vec2(2.0 * fract(iTime * 0.01), 2.5 / 4.0) // ...for demo mode\n           : pi * vec2(2.0 * iMouse.x / iResolution.x, 0.5 + 0.5 * iMouse.y / iResolution.y); // mouse look\n\n    mat2 R = mat2(cos(m.x), sin(m.x), -sin(m.x), cos(m.x));\n    vec3 ro = vec3(0.0, 0.0,-5.0);\n    mat2 S = mat2(cos(m.y), sin(m.y), -sin(m.y), cos(m.y));\n    ro.yz = S * ro.yz;\n    ro.xy = R * ro.xy;\n\n    vec3 rd = normalize(vec3(0.5 * ndc.xy, 1.0)); // NOTE: omitting normalization results in clipped edges artifact\n    rd.yz = S * rd.yz;\n    rd.xy = R * rd.xy;\n\n    float dist = trace(ro, rd);\n    vec3 dst = ro + rd * dist;\n    vec3 n = normal(dst);\n\n    vec3 lightdir = normalize(vec3(1.0, 1.0, 1.0));\n    vec3 ambient = vec3(0.4);\n    float brightness = max(dot(lightdir, n), 0.0);\n    brightness *= shadow(ro+rd*dist,lightdir, 0.01, DIST_MAX);\n    vec3 color = vec3(1.0);\n    color *= (n * 0.5 + 0.5);\n    color = (ambient * calcAO(dst, n) + brightness) * color;\n\n    fragColor = (dist < DIST_MAX) ? vec4(color, 1.0) : vec4(0.0);\n    fragColor = sqrt(fragColor); // approximate gamma\n}\n","name":"Image","description":"","type":"image"}]}