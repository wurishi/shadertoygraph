{"ver":"0.1","info":{"id":"cdG3Wd","date":"1679167086","viewed":12118,"name":"Dust [415 Chars]","username":"Xor","description":"I wanted to see how small I could make a volumetric lighting shader. What do ya'll think? Line 37 or line 39?","likes":218,"published":1,"flags":96,"usePreview":1,"tags":["3d","fractal","volume","raymarch","city","dust","golf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sc3zn","filepath":"https://soundcloud.com/nyanara/for-a-moment-i-was-there-1?in=spacelady87/sets/various-ambient-chill-lt-dub&utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing","previewfilepath":"https://soundcloud.com/nyanara/for-a-moment-i-was-there-1?in=spacelady87/sets/various-ambient-chill-lt-dub&utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing","type":"musicstream","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n    \"Dust\" by @XorDev\n\n    I wanted to see how small I could make a volumetric lighting shader.\n\n    This is alteration of \"Radioactive\":\n    https://shadertoy.com/view/mdG3Wy\n\n    This pass simply outputs the results from buffer A\n    \n    <512 Chars playlist: shadertoy.com/playlist/N3SyzR\n*/\n\nM;\n    //Output iChannel0 texture\n    O = T;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":1,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/*\n    \"Dust\" by @XorDev\n\n    The concept here is similar to \"Radioactive\":\n    https://shadertoy.com/view/mdG3Wy\n\n    The difference is, after 100 raymarch iterations, the ray gets\n    set to a random point between the intersection and the camera.\n    Then the ray direction is set to vec3(1,1,1).\n    The finally raymarched depth determines where to shade.\n\n    -7 Thanks to FabriceNeyret2\n    -8 Thanks coyote\n*/\n\nM,\n\n    //Camera ray direction (+z forward, +y up)\n    d = vec3(I+I,r)-r,\n    //Raymarch position, camera position, transformation vector, and step size\n    p = iTime/r/.3-6., c=p, v, s;\n    \n    //Initialize fractal, loop number, and raymarcher iterators\n    float i, n=1e2, l=-n;\n    //Rotate pitch down 0.3 radians and raymarch loop\n    for(d.yz*=R-.3)); l++<n; )\n    //Fractal loop\n    for(s=v=p+=d/length(d)*s.y, i=n; i>.1; i*=.4)\n        //Rotate octave 2 radians\n        v.xz*=R+2.)),\n        //Subtract cube SDFs\n        s = max(s,min(min(v=i*.8-abs(mod(v,i+i)-i),v.x),v.z)),\n        //After 100 iterations\n        l==0.? \n        //Pick a random point between the camera intersection\n        //p += (c-p)/exp(texture(iChannel1,I/1024.).r*2e1),\n        //Alternative animated variant:\n        p += (c-p)/exp(texture(iChannel1,I/1e3+iTime).r*2e1),\n        //Raymarch in vec3(1,1,1) direction\n        d /= d,\n        //Clear color\n        O *= l :\n        //Add raymarch step distance\n        O += s.y;\n    \n    \n    //Basic aberration effect\n    O.rg = T.gb;\n    //Alternative variant\n    //O = T*.5+clamp(O,0.,.5);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"//Rotation matrix trick learned from FabriceNeyret2\n#define R mat2(cos(vec4(0,11,33,0)//\n//\n//Shortened main function with resolution\n#define M void mainImage(out vec4 O, vec2 I) {vec3 r = iResolution//\n//\n//Sample texture0 using screen uvs.\n#define T texture(iChannel0,I/r.xy)","name":"Common","description":"","type":"common"}]}