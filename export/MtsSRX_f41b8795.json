{"ver":"0.1","info":{"id":"MtsSRX","date":"1528148875","viewed":98,"name":"Subtle hallucination","username":"Josh1billion","description":"Experimenting with stuff from http://pixelshaders.com/examples/noise.html","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"float random(float p)\n{\n    return fract(sin(p)*10000.0);\n}\n\nfloat noise(vec2 p) {\n    return random(p.x + p.y*10000.0);\n}\n\nfloat stepNoise(vec2 p) {\n    return noise(floor(p));\n}\n\nvec2 sw(vec2 p) { return vec2( floor(p.x), floor(p.y) ); }\nvec2 se(vec2 p) { return vec2( ceil(p.x), floor(p.y) ); }\nvec2 nw(vec2 p) { return vec2( floor(p.x), ceil(p.y) ); }\nvec2 ne(vec2 p) { return vec2( ceil(p.x), ceil(p.y) ); }\n\nfloat smoothNoise(vec2 p) {\n  vec2 inter = smoothstep(0., 1., fract(p));\n  float s = mix(noise(sw(p)), noise(se(p)), inter.x);\n  float n = mix(noise(nw(p)), noise(ne(p)), inter.x);\n  return mix(s, n, inter.y);\n  return noise(nw(p));\n}\n\nfloat fractalNoise(vec2 p) {\n  float total = 0.0;\n  total += smoothNoise(p);\n  total += smoothNoise(p*2.) / 2.;\n  total += smoothNoise(p*4.) / 4.;\n  total += smoothNoise(p*8.) / 8.;\n  total += smoothNoise(p*16.) / 16.;\n  total /= 1. + 1./2. + 1./4. + 1./8. + 1./16.;\n  return total;\n}\n\nfloat normalizedSin(float x) {\n    return abs(sin(x));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n/*fragColor = vec4(\n        \t\t 0.2*random(uv.x*55.0 + uv.y*100.0 * iTime),\n                 0.8*random(uv.x*335.0 + uv.y*1440.0),\n                     random(uv.x + uv.y*1000.0),\n                     1.0);\n*/\n    \n    vec2 p = uv * 6.0;\n    float brightness = fractalNoise(p + iTime*0.4);\n    \n    float fogIntensity = 0.4 + 0.2*(normalizedSin(iTime));\n    \n    fragColor = vec4(brightness, brightness, brightness, 1.0)*fogIntensity + texture(iChannel0, uv)*(1.0 - fogIntensity);\n}","name":"Image","description":"","type":"image"}]}