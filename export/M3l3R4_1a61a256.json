{"ver":"0.1","info":{"id":"M3l3R4","date":"1707218950","viewed":40,"name":"Metropolis-Hasting 2D","username":"antl","description":"2D Metropolis-Hasting random walk convergence process.\nThe target pseudo-PDF is provided by the gray-scaled image in iChannel1 / BufferA.","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["sampling","mcmc"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 colormap(in float t)\n{\n    const vec3 c0 = vec3( 0.277727327223417,   0.005407344544966,   0.33409980533530);\n    const vec3 c1 = vec3( 0.105093043108577,   1.404613529898575,   1.38459016259468);\n    const vec3 c2 = vec3(-0.330861828725556,   0.214847559468213,   0.09509516302823);\n    const vec3 c3 = vec3(-4.634230498983486,  -5.799100973351585, -19.33244095627987);\n    const vec3 c4 = vec3( 6.228269936347081,  14.179933366805090,  56.69055260068105);\n    const vec3 c5 = vec3( 4.776384997670288, -13.745145377746010, -65.35303263337234);\n    const vec3 c6 = vec3(-5.435455855934631,   4.645852612178535,  26.31243524958320);\n\n    return c0+t*(c1+t*(c2+t*(c3+t*(c4+t*(c5+t*c6)))));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 bl = vec2(0.0);\n    vec2 ur = iResolution.xy;\n    ivec2 nbin = ivec2((ur - bl) / float(SPATIAL_BINNING));\n    \n    // Background\n    fragColor = vec4(BACKGROUND_COLOR, 1.0);\n    \n    // Draw estimated pdf\n    if (SHOW_ESTIMATED_PDF == 1) \n    {\n        int count = int(texelFetch(iChannel1, ivec2(fragCoord), 0).x);\n        float estimated_pdf = float(count) / float((iFrame + 1) * N);\n        float flat_pdf = 1.0 / float(nbin.x * nbin.y);\n        fragColor = vec4(colormap(estimated_pdf / flat_pdf / 2.0), 1.0);\n    }\n    \n    // Draw particles\n    if (SHOW_PARTICULES == 1) for (int k = 0; k < N; ++k)\n    {\n        vec3 O = texelFetch(iChannel0, k2ji(k, int(iResolution.x)), 0).xyz;\n        if (disk(fragCoord, O.xy, PARTICULE_SIZE / 2.0) <= 0.0)\n        {\n            if (USE_COLORMAP_FOR_PARTICULES == 1)\n            {\n                if (USE_ESTIMATED_PDF_MAP == 1)\n                {\n                    int count = int(texelFetch(iChannel1, ivec2(O.xy), 0).x);\n                    float estimated_pdf = float(count) / float((iFrame + 1) * N);\n                    float flat_pdf = 1.0 / float(nbin.x * nbin.y);\n                    fragColor = vec4(colormap(estimated_pdf / flat_pdf / 2.0), 1.0);\n                }\n                else\n                {\n                    fragColor = vec4(colormap(O.z), 1.0);\n                }\n            }\n            else\n            {\n                fragColor = vec4(PARTICULE_COLOR, 1.0);\n            }\n        }\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//////////////////////////////////////////////////////////////\n////////////////////////// PARMETERS /////////////////////////\n//////////////////////////////////////////////////////////////\n\n// Resolution (needs reset)\n#define SPATIAL_BINNING 1\n\n// Particule parameter (needs reset)\n#define STEP_SIZE 10.0\n#define N 3000\n\n// Display\n#define BACKGROUND_COLOR vec3(64.0/255.0)\n#define SHOW_ESTIMATED_PDF 1\n#define SHOW_PARTICULES 1\n#define PARTICULE_SIZE 4.0\n#define USE_COLORMAP_FOR_PARTICULES 0\n#define USE_ESTIMATED_PDF_MAP 0\n#define PARTICULE_COLOR vec3(1.0)\n\n//////////////////////////////////////////////////////////////\n/////////////////////////// COMMONS //////////////////////////\n//////////////////////////////////////////////////////////////\n\n#define PI 3.14159265359\n\n// https://www.shadertoy.com/view/4djSRW\nvec2 randf2(vec2 seed)\n{\n\tvec3 p3 = fract(vec3(seed.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nvec2 nrandf2(vec2 seed)\n{\n\treturn (randf2(seed + 05.0)+randf2(seed + 07.0)+randf2(seed + 11.0)+randf2(seed + 13.0)) / 4.0;\n}\n\nfloat disk(in vec2 p, in vec2 O, in float r)\n{\n    return length(p - O) - r;\n}\n\nvec2 direction(in float angle)\n{\n    return vec2(cos(angle), sin(angle));\n}\n\nivec2 k2ji(in int k, in int nx)\n{\n    return ivec2(k % nx, k / nx);\n}\n\nint ji2k(in ivec2 ji, in int nx)\n{\n    return ji.y * nx + ji.x;\n}\n\n//////////////////////////////////////////////////////////////\n/////////////////////////// PROBLEM //////////////////////////\n//////////////////////////////////////////////////////////////\n\n// PDF\nfloat pseudo_pdf(in vec2 p, in vec2 bb, sampler2D tex)\n{\n    vec4 c = texelFetch(tex, ivec2(p * vec2(textureSize(tex, 0)) / bb), 0);\n    return (c.r + c.g + c.b) / 3.0;\n}\n\n// Metropolis-Hasting particule initialization\nvec2 init(in vec2 seed, in vec2 bl, in vec2 ur)\n{\n    return bl + randf2(seed) * (ur - bl);\n}\n\n// Metropolis-Hasting step\nvec2 randomStep(in float strength, in vec2 seed)\n{\n    return strength * (2.0 * nrandf2(seed) - 1.0);\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec3 particule(in vec2 P, in vec2 bl, in vec2 ur)\n{\n    return vec3(P, pseudo_pdf(P, ur - bl, iChannel1));\n}\n\nvoid metropolis_hasting(inout vec3 current, float strength, in vec2 seed, in vec2 bl, in vec2 ur)\n{\n    if (current.z <= 0.0)\n    {\n        // Invalid state\n        current = particule(init(seed, bl, ur), bl, ur);\n    }\n    else\n    {\n        // Next move candidate\n        vec3 next = particule(mod(current.xy + randomStep(strength, seed * 05.0) - bl, ur - bl) + bl, bl, ur);\n\n        // Acceptance\n        float acceptance = next.z / current.z;\n        if (randf2(seed * 07.0).y < acceptance)\n        {\n            current = next;\n        }\n    }\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 bl = vec2(0.0);\n    vec2 ur = iResolution.xy;\n    \n    // Input\n    int k = ji2k(ivec2(fragCoord), int(iResolution.x));\n    \n    // Compute position\n    vec3 P = texelFetch(iChannel0, k2ji(k, int(iResolution.x)), 0).xyz;\n    if (iFrame == 0) P.z = 0.0;\n    metropolis_hasting(P, STEP_SIZE, fragCoord * (iTime+1.0), bl, ur);\n\n    // Output\n    fragColor.xyz = P;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"bool inRange(in float x, in float minV, in float maxV)\n{\n    return minV <= x && x <= maxV;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 bl = vec2(0.0);\n    vec2 ur = iResolution.xy;\n    ivec2 nbin = ivec2((ur - bl) / float(SPATIAL_BINNING));\n    vec2 bin = (ur - bl) / vec2(nbin);\n    \n    // Input\n    vec2 p = floor(fragCoord / bin) * bin;\n    \n    // Init\n    int count = iFrame > 0 ? int(texelFetch(iChannel1, ivec2(fragCoord), 0).x) : 0;\n    \n    // Cumulate\n    for (int k = 0; k < N; ++k)\n    {\n        vec2 O = texelFetch(iChannel0, k2ji(k, int(iResolution.x)), 0).xy;\n        if (inRange(O.x - p.x, 0.0, bin.x) && inRange(O.y - p.y, 0.0, bin.y))\n        {\n            ++count;\n        }\n    }\n    \n    // Output\n    fragColor.x = float(count);\n}","name":"Buffer B","description":"","type":"buffer"}]}