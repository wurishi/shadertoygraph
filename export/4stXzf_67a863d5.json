{"ver":"0.1","info":{"id":"4stXzf","date":"1460674101","viewed":280,"name":"The Union Jack","username":"akohdr","description":"Use flags to choose St. George, St. Andrew and St. Patrick.\nAspect ratio should be 2:1 mouse resizes and shows guides.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["flags"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Created by Andrew Wild - akohdr/2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n/*\n\t\"And that the Union Flag shall be Azure, the Crosses Saltires of St. Andrew and \n     St. Patrick Quarterly per Saltire, counterchanged Argent and Gules; the latter \n     fimbriated of the Second, surmounted by the Cross of St. George of the Third, \n     fimbriated as the Saltire : ...\"\n\n\thttps://en.wikipedia.org/wiki/Union_Jack\n*/\n\n#define SHOW_ST_ANDREW\n#define SHOW_ST_PATRICK\n#define SHOW_ST_GEORGE\n#define SHOW_GUIDES\n\n// despite working elsewhere quads/triangles not working on iPhone?!\n// ...and now it works after resuffling to add Fab's code golf,  hmmm.....\n//\n// FIXED: see large quad OR on return of Fimbriation()\n#define USE_TRIANGLES\n\n#define RED vec4(.811, .078, .168, 1.)\n#define WHT vec4(1.00, 1.00, 1.00, 1.)\n#define BLU vec4(.000, .140, .488, 1.)\n#define BLK vec4(.000, .000, .000, 1.)\n\n#define DIM  vec2(60,30)\n#define DIM2 vec2(30,15)\n#define DX(i) (1.479*i)\n#define DY(i) (0.739*i)\n\nbool baryT(const in vec4 a,   // \"The entire British empire was built on cups of tea...\"  :)\n           const in vec4 b) \n{\n    vec4 p =(vec4(a.z,b.wxy) - vec4(b.xyz,a.w)) * a.yxyx,\n         q = vec4(a.wz, b.yx) * b,\n         r = vec4(q.zx - q.wy, a.zw * b.wz);\n    vec2 t = (r.xy + p.yw + p.zx)/(r.x + r.y + r.z - r.w);\n    return !(t.x<0.||t.y<0.||(t.x + t.y)>1.);\n}\n#define inTri(p,a,b,c) baryT(vec4(p,a),vec4(b,c))\n#define inQuad(p,a,b,c,d) (inTri(p,a,b,c)||inTri(p,c,d,a))\n\nfloat distLine(vec2 p, float x, float y, float z) {\n    return abs(x*p.x + y*p.y + z)/sqrt(x*x + y*y);\n}\n\nbool inDiagonalCross(in vec2 p, in float w)\n{\n#ifdef USE_TRIANGLES\n    // Works fine on iPad, I just dont get it !! (see FIX below)\n    vec2 d = vec2(DX(w),-DY(w)),\n         a = DIM+d,\n         b = DIM-d,\n         pa = abs(p-DIM2);\n    \n    return inQuad(pa,a,b,-a,-b);\n#else    \n    float a = 1./DX(1.),\n          b = 1./DY(1.);\n    \n    vec2 po = p-DIM2;;\n        \n    return distLine(po,a, b,.0)<w ||\n           distLine(po,a,-b,.0)<w;\n#endif\n}\n\nbool inCross(in vec2 p, in float w) \n{\n    vec2 a = abs(p-DIM2);\n    return a.x<w || a.y<w;\n}\n\nbool Fimbriation(in vec2 p) \n{\n    if (inCross(p,5.)) return true;\n    \n#ifdef USE_TRIANGLES\n    float r = .3,\n          s = 1.2;\n#else\n    float r = .5,\n          s = 1.55;\n#endif\n    \n    vec2 y1 = vec2(0,DY(4.)),\n         y2 = vec2(0,DY(2.5)),\n         a = p-y1,\t\t\n         b = p+y2,\n         c = p+y1,\n         d = p-y2,\n         q = p-DIM2;\n    \n    bool qx = q.x<0.,\n         qy = q.y<0.;\n    \n    #define inDX inDiagonalCross\n\n/* FIX: Apparently this is where iPhone compiler was choking\n    return (!qx && !qy && (inDX(a,r)||inDX(b,s)))||  // top right clockwise\n           (!qx &&  qy && (inDX(a,r)||inDX(b,s)))||\n           ( qx &&  qy && (inDX(c,r)||inDX(d,s)))||\n           ( qx && !qy && (inDX(c,r)||inDX(d,s)));\n*/\n    \n    bool b1 = (!qx && !qy && (inDX(a,r)||inDX(b,s))),  // top right clockwise\n         b2 = (!qx &&  qy && (inDX(a,r)||inDX(b,s))),\n         b3 = ( qx &&  qy && (inDX(c,r)||inDX(d,s))),\n         b4 = ( qx && !qy && (inDX(c,r)||inDX(d,s)));\n\n    return b1 || b2 || b3 || b4;\n}\n\n#ifdef SHOW_GUIDES\nvoid showGuides( inout vec4 fragColour, in vec2 fragCoord ){\n    bool isMouse = iMouse.z>0.;\n    vec2 ir = isMouse ? iMouse.xy : iResolution.xy;\n    if(isMouse) \n    {\n        float ar = ir.x/ir.y;\n        vec2 ps = ir/DIM,\n             pc = fragCoord-ir/2.;\n\n        for(int i =-3; i<4; i++) {\n            float f = float(i),\n                a = ps.y*DY(f)+ps.x*DX(f),\n                b = pc.x,\n                c = pc.y*ar;\n            if((abs(a+b-c)<1.)||(abs(a-b-c)<1.))\n            {\n                fragColour = BLK; \n                return;\t\t//early exit\n            }\n        }\n    }\n}\n#endif\n\nvoid mainImage1( out vec4 fragColour, in vec2 fragCoord )\n{\n    fragColour = WHT;  // Let's spell 'colour' correctly shall we.\n    bool isMouse = iMouse.z>0.;\n\n    if(isMouse && (fragCoord.x>iMouse.x || fragCoord.y>iMouse.y)) return;\n\n    vec2 ir = isMouse ? iMouse.xy : iResolution.xy;\n    vec2 p = DIM * (fragCoord.xy / ir);\n\n#ifdef SHOW_ST_ANDREW\n\tfragColour = !inDiagonalCross(p,2.2) ? BLU : fragColour;\n#endif\n    \n#ifdef SHOW_ST_PATRICK\n    fragColour = inDiagonalCross(p,2.2) ? RED : fragColour;\n#endif\n\n#ifdef SHOW_ST_GEORGE\n\tfragColour = Fimbriation(p) ? WHT : fragColour;\n\tfragColour = inCross(p,3.)  ? RED : fragColour;\n#endif\n    \n#ifdef SHOW_GUIDES\n\tshowGuides(fragColour, fragCoord);\n#endif\n}\n\n// Fab's code golf\nvoid mainImage2( out vec4 O, vec2 u )\n{\n    vec2 U = u;  //reusing input var breaks guides\n    \n    vec2 R =  iResolution.xy,V,S;\n\tU += U-R;\n\t\n    V = abs(S=U/R*mat2(1,-1,1,1)*.7); S*=U; U = abs(U/R.y); \n    float v = min(U.x,U.y), d = min(V.x,V.y);\n    O = vec4(.8,0,0,1);\n    O =   v < .2  ? O\n        : v < .34 ? ++O\n        : d < .12&&min(S.x,S.y)<0. ? O \n        : d < .16  ? ++O \n        :           vec4(0,0,.5,1);\n#ifdef SHOW_GUIDES\n    showGuides(O,u);\n#endif\n}\n\n// Toggle impls.\n#define mainImage mainImage1\n\n\n\n","name":"Image","description":"","type":"image"}]}