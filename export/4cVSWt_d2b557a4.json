{"ver":"0.1","info":{"id":"4cVSWt","date":"1716318511","viewed":39,"name":"Saving 3 (boucle)","username":"TWIX3RA","description":"https://www.shadertoy.com/view/Mc3SDj","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["boucle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord / iResolution.xy * 100.; //Mettre l'imgae sur une échelle de 0 à 100 (écran normalisé)\n    uv.x *= iResolution.x / iResolution.y; //Correction d'image pour tout type de fenêtre\n    \n    //Variables\n    float ay = -9.8;  //(m/s^2)\n    float mb = 4.;    //(Kg)\n    float Hi = 83.;   //(m)\n    float X0 = 18.;   //(m)\n    float Vxi = 3.;   //(m/s)\n    float Kp = 0.5;   //Perte d'énergie (Selon les matériaux de la balle)\n    float r = 2.;     //Rayon de la balle (m)\n    \n    //Au premier rebond\n    float t1 = sqrt(2.*-(Hi-9.)/ay);\n    float Vxa = Vxi;\n    float Vya = ay*t1;\n    float VTa = sqrt(pow(Vxa,2.)+pow(Vya,2.));\n    float Ea = mb*pow(VTa,2.)/2.;\n    float Ed = Ea * Kp;\n    float VTd = sqrt(2.*Ed/mb);\n    float Ac = atan(-Vya/Vxa);\n    float Vxd = cos(Ac)*VTd;\n    float Vyd = sin(Ac)*VTd;\n    \n    //Aux autres rebonds\n    float tn =-2.*Vyd/ay;\n    float tni = t1;\n    \n    if (false)\n        {\n        fragColor = vec4(0.,0.,1.,0.);\n        if (false) fragColor=vec4(1.,0.,0.,0.);\n        } \n    else \n        {\n    \n    \n        if (iTime < t1) // Premier rebond\n            {\n            float X = X0 + Vxi*iTime ;\n            float Y = Hi + ay*pow(iTime,2.)/2.;\n            \n\n            if (pow((uv.x - X),2.) + pow((uv.y - Y),2.) <= pow(r,2.)) //Un cercle de rayon 40 et centré en (100;500)\n                {\n                fragColor = vec4(0.9, 0.4, 0., 1.);\n                }\n\n            }\n        else\n            {\n            for (int l = 1; l < 4; l++)\n                {\n                if (iTime-tni < tn)\n                    {\n                    float X = X0 + Vxi*iTime ;\n                    float Y;\n                    float Xi = X;\n                    float Yi = 9.; //Hauteur du sol\n                    float Vxa = Vxd;\n                    float Vya = Vyd;\n                    float VTa = sqrt(pow(Vxa,2.)+pow(Vya,2.));\n                    float Ea = mb*pow(VTa,2.)/2.;\n                    float Ed = Ea * Kp;\n                    float VTd = sqrt(2.*Ed/mb);\n                    float Ac = atan(-Vya/Vxa);\n                    float Vxd = cos(Ac)*VTd;\n                    float Vyd = sin(Ac)*VTd;\n\n\n                    X = Xi + Vxa*(iTime-tni);\n                    Y = Yi + Vya*(iTime-tni) + ay*pow((iTime-tni),2.)/2.; \n\n\n                    if (pow((uv.x - X),2.) + pow((uv.y - Y),2.) <= pow(r,2.)) //Un cercle de rayon 40\n                        {\n                        fragColor = vec4(0.9, 0.4, 0., 1.);\n                        }    \n                    }\n                else\n                    {\n                    //fragColor = vec4 (0.,0.,0.,0.);\n                    float tni = tn;\n                    float tn = -2.*Vyd/ay;\n                    l=l+1;\n                    }\n                }\n        }\n    if (uv.y > 80. && uv.y < 81. && uv.x < 17.)// Crée une ligne pour les pixels qui ont\n        {                                         // une coordonnée\n        fragColor= vec4(0.5, 0.5, 0.5, 1);\n        }\n    else if (uv.x > 17. && uv.x < 18. && uv.y < 81. && uv.y > 6.)\n        {\n        fragColor= vec4(0.5, 0.5, 0.5, 1);\n        }\n    else if (uv.y > 6. && uv.y < 7.)\n        {\n        fragColor= vec4(0.5, 0.5, 0.5, 1);\n        }\n        }\n}","name":"Image","description":"","type":"image"}]}