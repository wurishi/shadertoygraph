{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"const float maxDistance = 1e2;\n\nstruct ray {\n\t\t\n\tvec3 origin;\n\tvec3 direction;\n};\n\n\nstruct sphere{\n\t\n\tvec3 center;\n\tfloat radius;\n};\n\n\nstruct plane{\n\t\n\tvec3 normal;\n\tvec3 orientation;\n\tfloat offset;\n};\n\n\nstruct light{\n\t\t\n\tvec3 direction;\n\tfloat intensity;\n};\n\t\n\n\t\t\n\t\n\t\nfloat intersectSphere(const in ray r,const in sphere s){\n\t\n   \n    float a = pow(r.direction.x,2.)+pow(r.direction.y,2.)+pow(r.direction.z,2.);\n   \n    float b = (r.origin.x-s.center.x)*r.direction.x+(r.origin.y-s.center.y)*r.direction.y+(r.origin.z-s.center.z)*r.direction.z;\n\n    float c = pow(r.origin.x-s.center.x,2.)+pow(r.origin.y-s.center.y,2.)+pow(r.origin.z-s.center.z,2.) - pow(s.radius,2.);\n   \n    float delta = 4.0*(b*b - a*c);\n   \n    if(!(delta < 0.0)){\n      \tfloat x1 = (-b + sqrt(delta))/(2.0*a);\n        float x2 = (-b - sqrt(delta))/(2.0*a);\n        return    min(x1,x2);\n    }\n    else\n    {   \n        return maxDistance;\n    }\n   \n}\n\n\n\nfloat intersectPlane(const in ray r,const in plane p)\n{    \n    float a = p.normal.x;\n    float b = p.normal.y;\n    float c = p.normal.z;\n    float result = -(p.offset+ a*r.origin.x + b*r.origin.y+c*r.origin.z)/(a*r.direction.x+b*r.direction.y+c*r.direction.z);\n    if(result > 0.0){\n        return   result;\n    }\n    else\n    {   \n        return maxDistance;\n    }\n   \n}\n\n\nfloat intersect(const in ray r){\n   \n\tsphere s;\n    s.center = vec3(0.0,5.0,0.0);\n    s.radius = 3.0;  \n    \n    plane p;\n    p.normal = vec3(0.2, 0.8, 0.14);\n    p.offset= 0.1;\n\t\n\t\n    \n    return min( intersectPlane(r, p), intersectSphere(r, s));\n\n\t\n\t\n\t\n}\n\nvec4 intersect2( const in ray r){\n\t\n\tsphere s;\n    s.center = vec3(0.0,5.0,0.0);\n    s.radius = 3.0;  \n    \n    plane p;\n    p.normal = vec3(0.2, 0.8, 0.14);\n    p.offset= 0.1;\n\n\tfloat myMin = min( intersectPlane(r, p), intersectSphere(r, s));\n\t\n\tif(myMin == maxDistance)\n\t{\n\t\treturn vec4(0.0,0.0,0.0,myMin);\n\t}\n\telse if(myMin == intersectSphere(r, s))\n\t{\n\t\tvec3 posSurface = r.origin + myMin*r.direction - s.center;\n\t\tposSurface = posSurface - s.center;\n\t\treturn vec4(posSurface,myMin);\n\t}\n\telse if(myMin == intersectPlane(r, p))\n\t{\n\t\treturn vec4(p.normal,myMin);\n\t}\n\n\treturn vec4(0.0,0.0,0.0,myMin);\n\t\n}\n\nvoid light0_information(out light l)\n{\n\tl.direction = vec3(0.0,1.0,0.0);\n\tl.intensity = 1.0;\n}\n\nvoid light1_information(out light l)\n{\n\tl.direction = vec3(cos(iTime*50.0),1.0,0.0);\n\tl.intensity = 1.0;\n}\n\nfloat illumination(ray r, const in vec3 surf, const in light l)\n{\n\tfloat diffuse = max(0.0, dot(surf,l.direction));\n\tvec3 reflected = reflect(r.direction,surf);\n\tfloat specular = pow(dot(normalize(reflected),surf),5000.);\n\tfloat result = diffuse*l.intensity + pow(specular,5000.);\n\treturn result;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 screenCoordonate = fragCoord.xy/iResolution.xy;\n    vec2 screenCoordonateCentered = 2.0 * screenCoordonate -1.0;\n    \n    float aspectRatio = iResolution.x/iResolution.y;\n    vec2  screenCoordonateF = vec2(aspectRatio, 1.0)*screenCoordonateCentered;\n\t\n\tray r;\n    r.origin = vec3(0.3, 0.5,mix(1000.,3.0,0.5+0.5*sin(iTime)));\n    r.direction = normalize(vec3(screenCoordonateF,-1.5));  \n\t\n\t\n\t\n\t//float distanceFromOrigin = intersect(r);\n\t\n\tvec4 normal = intersect2(r);\n\t\n\t/*if(distanceFromOrigin < maxDistance)\n    {\n        vec3 sphereColor = vec3(.5,0.,0.5);\n        fragColor = vec4(sphereColor,1);\n    }\n    else\n    {\n        const vec3 backgroundColor = vec3(1.0,1.0,1.0);\n        fragColor = vec4(backgroundColor,1.0);       \n    }*/\n\t\n\tif(normal.w<maxDistance)\n\t{\n\t\tlight l;\n\t\tlight0_information(l);\n\t\tfragColor = vec4(illumination(r,normal.xyz,l),illumination(r,normal.xyz,l),illumination(r,normal.xyz,l),1.0);\n\t}\n\telse\n\t{\n\t\tconst vec3 background_color = vec3(0.0,0.0,0.0);\n        fragColor = vec4(background_color,1.0);    \n\t}\t\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"Ms23zc","date":"1399048531","viewed":125,"name":"testLight","username":"Cochi","description":"ras","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["light"],"hasliked":0,"parentid":"","parentname":""}}