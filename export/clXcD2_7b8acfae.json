{"ver":"0.1","info":{"id":"clXcD2","date":"1691180347","viewed":62,"name":"Sketch #3: Polygons","username":"MOONtyzoo","description":"Based on what I learned here: https://thndl.com/square-shaped-shaders.html\n\nLearning the polar function for polygons was pretty difficult but is rewarding since it allows you to change the number of sides very easily.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["sketch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n\n/* \n   Polar function that forms a polygon.\n*/\n// N is the number of sides\n// size is measured from center to edge midpoint\n// if vertexRadius is true, then size is measured from center to vertex instead\n// r and a are the radius and angle (must be 0 ~ 2PI) values to build the polygon around\nfloat polygon(in int N, in float size, in bool vertexSize, in float _r, in float _a)\n{\n    float arc = (2.0*PI)/float(N); // the angle range corresponding to one side of the polygon\n    if (vertexSize)\n    {\n        size = size*cos(arc/2.0);\n    }\n    \n    float phase = arc*floor(_a/arc + 0.5);\n    float boundary = size/cos(_a - phase); // distance to the boundary\n    \n    return boundary;\n}\n\n//  Function from IÃ±igo Quiles\n//  https://www.shadertoy.com/view/MsS3Wc\nvec3 hsv2rgb( in vec3 c ){\n    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),\n                             6.0)-3.0)-1.0,\n                     0.0,\n                     1.0 );\n    rgb = rgb*rgb*(3.0-2.0*rgb);\n    return c.z * mix(vec3(1.0), rgb, c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    uv = 2.0*(uv - 0.5);\n    uv.x *= iResolution.x/iResolution.y;\n    \n    float r = length(uv);\n    float a = atan(-uv.y, -uv.x) + PI; // 0 ~ 2PI counterclockwise\n    float t = fract(iTime/20.0); // 0 ~ 1 loop every 20s\n    \n    // Create a ring of 4 concentric polygons\n    vec3[4] polygons = vec3[](vec3(0.0), vec3(0.0), vec3(0.0), vec3(0.0));\n    float size = 1.0;\n    for(int i = 0; i < 4; i++)\n    {\n        size *= cos(PI/(float(7-i)));\n        float boundary = polygon(6-i, size, true, r, a + (2.0 + float(i))*2.0*PI*t);\n        polygons[i][0] = 4.0*t + float(i)*0.15;\n        polygons[i][1] = r/boundary;\n        polygons[i][2] = (1.0 - pow(r, 2.0)/boundary)*(1.0-step(0.0, r-boundary));\n    }\n    \n    // Draw the polygons on top of one another (higher i is on top)\n    vec3 pixColor = vec3(0.0);\n    for (int i = 0; i < 4; i++)\n    {\n        if (polygons[i][2] != 0.0)\n        {pixColor = hsv2rgb(polygons[i]);}\n    }\n    \n    fragColor = vec4(pixColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}