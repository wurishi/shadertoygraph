{"ver":"0.1","info":{"id":"ts2yWz","date":"1586515447","viewed":121,"name":"Shader 02 : Ray Marching","username":"Melokey","description":"My Second Shader :D\nThanks Ridgen, iq","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","zdepth"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEP 100\n#define MAX_DIST 100.\n#define MIN_DIST 0.1\n\nfloat sdBox( vec3 coord, vec3 size )\n{\n  vec3 q = abs(coord) - size;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat getdist(vec3 raypos)\n{\n    // All elements of the scene\n    \n    float planedist = raypos.y;\n    \n    vec4 sphere = vec4(0., 1., 0., 1.);\n    float spheredist = length(raypos - sphere.xyz) - sphere.w;\n    \n    \n    \n    vec3 box = abs(raypos - vec3(0., 0., 0.)) - vec3(0.5);\n    float boxdist_in = length(max(box, 0.0));\n    float boxdist_out = min(max(box.x, max(box.y, box.z)), 0.0);\n    float boxdist = boxdist_in + boxdist_out;\n    \n    //return min(planedist, spheredist);\n    //return min(planedist, boxdist);\n    //return spheredist;\n    return boxdist;\n}\n\nfloat raymarch(vec3 cam_pos, vec3 cam_forward)\n{\n    float dist = 0.;\n    \n    // Reapet until the ray hasn't reached a shape\n    for (int i=0; i<MAX_STEP; i++)\n    {\n        // Get the distance with the nearest shape\n        float step = getdist(cam_pos + cam_forward * dist);\n        // Add step to dist to get a new farther position along the ray\n        dist += step;\n        \n        // If the nearest shape is too far / too close\n        if (dist>MAX_DIST || dist<MIN_DIST) return MAX_DIST;\n    }\n    \n    return dist;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // - Normalize Coordinate -\n    vec2 uv = (2. * fragCoord - iResolution.xy) / iResolution.y;\n    // uv.y = uv.y * sin(uv.y);\n    \n    // - Set Camera Position / Orientation - \n    vec3 cam_pos = vec3(cos(iTime) * 2., 1., sin(iTime) * 2.);\n\tvec3 cam_lookat = vec3(0., 0., 0.);\n    \n    // - Get Camera Space - \n    vec3 forward = normalize(cam_lookat - cam_pos);\n    vec3 right = normalize(cross(vec3(0., -1., 0.), forward));\n    vec3 up = normalize(cross(right, forward));\n    \n    vec3 view_dir = normalize(uv.x * right + uv.y * up + forward);\n    \n    // - Get Scene's ZDepth - \n    float depth = raymarch(cam_pos, view_dir);\n    vec3 col = vec3( 1. / depth );\n\n    // - Output -\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}