{"ver":"0.1","info":{"id":"3lXBWS","date":"1597531341","viewed":113,"name":"Sky - Q1","username":"Izhido","description":"An almost exact copy of the code used in the Quake rendering engine (1997) to create the illusion of a sky. Click & drag inside the viewport to change the angle of the camera. ","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["sky","quake"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Shader input:\n    vec2 fragmentTexCoords;\n    float width;\n    float height;\n    float maxSize;\n    float forwardX;\n    float forwardY;\n    float forwardZ;\n    float rightX;\n    float rightY;\n    float rightZ;\n    float upX;\n    float upY;\n    float upZ;\n    float speed;\n\n    \n    \n    \n    // Setting shader input from shadertoy uniforms and other values:\n    fragmentTexCoords.x = fragCoord.x / iResolution.x;\n    fragmentTexCoords.y = fragCoord.y / iResolution.y;\n    width = iResolution.x;\n    height = iResolution.y;\n    maxSize = max(iResolution.x, iResolution.y);\n    float yaw = ((iMouse.x / iResolution.x) - 0.5) * 3.14159*2.0;\n    float pitch = ((iMouse.y / iResolution.y) - 0.5) * 3.14159;\n    forwardX = cos(yaw) * cos(pitch);\n    forwardY = -sin(yaw);\n    forwardZ = cos(yaw) * sin(pitch);\n    rightX = sin(yaw) * cos(pitch);\n    rightY = cos(yaw);\n    rightZ = sin(yaw) * sin(pitch);\n\tupX = -sin(pitch);\n    upY = 0.0;\n    upZ = cos(pitch);\n\tspeed = iTime * 8.0 * 8.0; // skyspeed * skytime;\n    \n\n    \n    \n    \n    //Texture dimensions (set these to the dimensions of iChannel0):\n    ivec2 texSize;\n    texSize.x = 512;\n    texSize.y = 512;\n    \n    \n    \n    \n    // The proper algorithm:\n\tint u = int(fragmentTexCoords.x * width);\n\tint v = int(fragmentTexCoords.y * height);\n\tfloat\twu, wv, temp;\n\tvec3\tend;\n\ttemp = maxSize;\n\twu = 8192.0 * float(u-int(int(width) / 2)) / temp;\n\twv = 8192.0 * float(int(int(height) / 2)-v) / temp;\n\tend[0] = 4096.0*forwardX + wu*rightX + wv*upX;\n\tend[1] = 4096.0*forwardY + wu*rightY + wv*upY;\n\tend[2] = 4096.0*forwardZ + wu*rightZ + wv*upZ;\n\tend[2] *= 3.0;\n\tend = normalize(end);\n\ttemp = speed;\n\tfloat s = float((temp + 6.0*float(texSize.x/2-1)*end[0]));\n\tfloat t = float((temp + 6.0*float(texSize.y/2-1)*end[1]));\n\tvec2 texCoords = vec2(s / float(texSize.x), t / float(texSize.y));\n    \n    \n    \n    \n    \n    // Outputting the resulting color;\n    fragColor = texture(iChannel0, texCoords);\n    \n    // This should always place the output at the back, so everything else is in front of the sky:\n\t//gl_FragDepth = 1;\n\n}","name":"Image","description":"","type":"image"}]}