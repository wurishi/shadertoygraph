{"ver":"0.1","info":{"id":"XcKGzy","date":"1712927767","viewed":53,"name":"Dynamic Spectrum Mandelbrot","username":"1Noxah","description":"Dynamic Spectrum Mandelbrot","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Anpassen des Bereichs und Zentrums\n    float zoom = 0.6; // Zoom-Faktor f√ºr das Fraktal\n    vec2 center = vec2(-0.5, 0.0); // Zentrum des Fraktals im komplexen Raum\n\n    // Umwandeln der Bildschirmkoordinaten in komplexe Zahlen\n    vec2 c = (fragCoord - iResolution.xy * 0.5) * (4.0 / min(iResolution.x, iResolution.y) * zoom) + center;\n\n    vec2 z = vec2(0.0, 0.0);\n    int maxIter = 100; // Maximale Anzahl von Iterationen\n    int i;\n    for(i = 0; i < maxIter; i++)\n    {\n        if(dot(z, z) > 4.0)\n            break;\n        z = vec2(z.x*z.x - z.y*z.y, 2.0*z.x*z.y) + c;\n    }\n\n    float t = float(i) / float(maxIter);\n    float color = 0.5 + 0.5 * cos(6.28318 * t + iTime); // Dynamische Farbe basierend auf der Iterationszahl und Zeit\n\n    fragColor = vec4(vec3(color, t, sin(color)), 1.0);\n}\n","name":"Image","description":"","type":"image"}]}