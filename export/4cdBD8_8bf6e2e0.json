{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"vec2 multiply_complex(vec2 a, vec2 b) {\n    return vec2(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);\n}\n\nvec2 pow_complex(vec2 z, int n) {\n    vec2 res = vec2(1., 0.);\n    for (int i = 0; i < n; ++i) {\n        res = multiply_complex(res, z);\n    }\n    return res;\n}\n\nfloat len2(vec2 z) {\n    return z.x * z.x + z.y * z.y;\n}\n\n\nvoid mainImage( out vec4 fragColor,in vec2 fragCoord )\n{   \n    float slowmo = 50.0,\n    t = iTime / slowmo,\n    radius = 200.;\n    \n    vec2 wh = vec2(iResolution.x, iResolution.y),\n    center = vec2(wh.x/2., wh.y/2.),\n    uv = (fragCoord - center)/radius;\n    // uv -= vec2(0.1300146746943211, 0.653512527011278);\n    int iter = 100, i;\n    vec2 c = vec2(sin(t), cos(t * 3.213)), z = uv;\n    // c = z;\n    c = normalize(log(abs(c)*1.4159) * sign(c));\n    for (i = 0; i < iter; i++) {\n        z = pow_complex(z, 2) + c;\n        if (len2(z) > 4.0) {\n            break;\n        }\n    }\n    float i_float = float(i);\n    vec3 col = vec3(sin(i_float / 6. + 0.1), sin(i_float / 4. + 0.2), sin(i_float / 4. + 0.2));\n    col = 0.2 * vec3(1.5, 2.5, 3.);\n    i_float = i_float*i_float/float(iter);\n    col *= sqrt(i_float);\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}\n\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4cdBD8","date":"1733938497","viewed":44,"name":"Fractals by nidu42","username":"nidu42","description":"Shader for drawing a Mandelbrot Set or Julia Set","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["julia","mandelbrot","fractals","animation"],"hasliked":0,"parentid":"","parentname":""}}