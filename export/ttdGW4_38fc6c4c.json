{"ver":"0.1","info":{"id":"ttdGW4","date":"1576418196","viewed":130,"name":"ProjetSMA","username":"guilhermecorreagv","description":"Projet SMA de Guilherme et Carolina","likes":5,"published":1,"flags":32,"usePreview":0,"tags":["randomwalk"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    fragColor = texture(iChannel0,uv);\n}\n\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define N_WALKERS 200\n\nconst float step_size = 0.01;\n\nivec2 indexToCoords( int i, float xResolution )\n{\n    int ixResolution = int(xResolution);\n    int x = i % ixResolution;\n    int y = i / ixResolution;\n    \n    return ivec2(x, y);\n}\n\nint coordsToIndex( vec2 coords, float xResolution )\n{\n    return int((coords.y - 0.5) * xResolution + (coords.x - 0.5));\n}\n\nfloat rand( vec2 co )\n{\n    return fract(sin(dot(co.xy, vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvec2 rand2( vec2 co )\n{\n    float v0 = rand(co);\n    float v1 = rand(vec2(co.y, v0));\n    \n    return vec2(v0, v1);\n}\n\nvec3 rand3( vec2 co )\n{\n    float v0 = rand(co);\n    float v1 = rand(vec2(co.y, v0));\n    float v2 = rand(vec2(co.x, v1));\n    \n    return vec3(v0, v1, v2);\n}\n\nvec4 getParticlePositionAndDirection( int index )\n{\n    return texelFetch(iChannel0, indexToCoords(index, iChannelResolution[0].x), 0);\n}\n\nvec2 getLastResolution()\n{\n    return texelFetch(iChannel0, indexToCoords(N_WALKERS * 2, iChannelResolution[0].x), 0).rg;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tint i = coordsToIndex(fragCoord, iResolution.x);\n    \n    if (iFrame == 0) \n    {\n        // Initialisation \n        if (i < N_WALKERS) \n        {\n            // Walker position and direction\n            vec2 pos = (rand2(fragCoord / iResolution.xy) - vec2(.5)) * 1.3;\n            vec2 dir = normalize(rand(pos) - vec2(.5));\n            fragColor = vec4(pos, dir);\n        }\n        else if (i >= N_WALKERS && i < N_WALKERS * 2) \n        {\n            // Walker color\n            fragColor = vec4(rand3(fragCoord), 1.0);\n        }\n    }\n    else\n    {\n        // Simulation\n        fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n        \n        if (i < N_WALKERS) \n        {\n            // Walker position and direction\n            vec4 data = getParticlePositionAndDirection(i);\n            vec2 pos = data.xy + data.zw * step_size;\n            vec2 auxPos = data.xy;\n            auxPos.y *= iChannelResolution[0].x/iChannelResolution[0].y;\n            auxPos *= 0.5;\n            auxPos += vec2(.5);\n            \n            vec2 dir;\n            dir = normalize(rand2(fragCoord * iTime) - vec2(.5));\n            vec4 ballTexture = texture(iChannel1,auxPos);\n            if(ballTexture.w < 0.999)\n            {\n                float atenuation = 1.0;\n                if(rand(fragCoord) < atenuation*ballTexture.z)\n                {\n                    vec2 a;\n                    a = vec2(ballTexture.x - 0.5*pos.x, ballTexture.y - 0.9*pos.y);\n                    dir = normalize(a);\n                }\n            }\n            fragColor = vec4(pos, dir);\n        }\n    }\n   \n    if (i >= N_WALKERS * 2)\n    {\n        if (i >= N_WALKERS * 2 + 1 && i < N_WALKERS * 2 + 2)\n        {\n            // Flag resolution change\n            if (getLastResolution() != iResolution.xy) \n            {\n        \t\tfragColor = vec4(1.0);\n            }\n            else\n            {\n                fragColor = vec4(0.0);\n            }\n        }\n        \n        if (i < N_WALKERS * 2 + 1)\n        {\n            // Save last resolution\n        \tfragColor = vec4(iResolution, 0.0);\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"#define N_WALKERS 200\n\nconst float radius = 0.005;\nconst float fadeout = 0.9775;\n\nivec2 indexToCoords( int i, float xResolution )\n{\n    int ixResolution = int(xResolution);\n    int x = i % ixResolution;\n    int y = i / ixResolution;\n    \n    return ivec2(x, y);\n}\n\nvec4 getParticlePositionAndDirection( int index )\n{\n    return texelFetch(iChannel0, indexToCoords(index, iChannelResolution[0].x), 0);\n}\n\nvec3 getParticleColor( int index )\n{\n    return texelFetch(iChannel0, indexToCoords(N_WALKERS + index, iChannelResolution[0].y), 0).rgb;\n}\n\nbool resolutionChanged()\n{\n    return texelFetch(iChannel0, indexToCoords(N_WALKERS * 2 + 1, iChannelResolution[0].y), 0).r > 0.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iChannelResolution[1].xy;\n    vec2 aux3 = uv;\n    vec4 oldColor = texture(iChannel1,uv);\n    vec2 muv = vec2(0.0);\n    bool clicked = false;\n    float border = 7.0;\n    float distanceCentre=0.0;\n    if (iMouse.z > 0.0) \n    {\n        clicked = true;\n    \tmuv = iMouse.xy / iResolution.xy;\n        muv -= vec2(.5);\n    }\n  \tfragColor = vec4(texture(iChannel1, uv).xyz*fadeout, texture(iChannel1,uv).w);\n  \n    if (resolutionChanged()) \n    {\n        fragColor = vec4(0.0);\n    }\n    \n    uv -= vec2(.5);\n    vec2 aux2 = uv;\n    uv *= 2.0;\n    uv.y *= iChannelResolution[1].y / iChannelResolution[1].x;\n    \n    for (int i=0; i<N_WALKERS; i++)\n    {\n        float d = distance(getParticlePositionAndDirection(i).xy, uv);\n        fragColor.rgb += smoothstep(0.0, radius, radius - d) * getParticleColor(i);\n    }\n    fragColor = vec4(clamp(fragColor, 0.0, 1.0).rgb, 1.0);\n    \n    if(oldColor.w < 0.999999 && iFrame!=0)\n    {\n        if( (fragColor.x<0.01) && (fragColor.y<0.01) && (fragColor.z<0.01))\n        {\n            vec4 ballTexture = texture(iChannel2,aux3);\n        \tfragColor = vec4(ballTexture.z,ballTexture.z,ballTexture.z,ballTexture.w);\n        }\n        \n       \telse\n            fragColor = vec4(fragColor.xyz,0.999);\n    }\n    else\n    {\n        if(clicked)\n        {\n            float a = (aux2.x - muv.x)*iChannelResolution[1].x/iChannelResolution[1].y;\n            float b = (aux2.y - muv.y);\n            distanceCentre = sqrt(pow(a,2.0) + pow(b,2.0))/sqrt(2.0);\n            if( (fragColor.x<0.1) && (fragColor.y<0.1) && (fragColor.z<0.1) && distanceCentre<1.0/border)\n                fragColor = vec4((1.0-distanceCentre*border),(1.0-distanceCentre*border),(1.0-distanceCentre*border),0.999);\n        }\n    }\n    \n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iChannelResolution[0].xy;\n    \n    vec4 oldColor = texture(iChannel0,uv);\n    vec2 muv = vec2(0.0);\n    bool clicked = false;\n    float border = 7.0;\n    float distanceCentre=0.0;\n    if (iMouse.z > 0.0) \n    {\n        clicked = true;\n    \tmuv = iMouse.xy / iResolution.xy;\n        muv -= vec2(.5);\n    }\n    uv -= vec2(.5);\n    vec2 aux2 = uv;\n    if(iFrame==0)\n        fragColor = vec4(0.0,0.0,0.0,1.0);\n    else\n    {\n        if(clicked)\n        {\n            float a = (aux2.x - muv.x)*iChannelResolution[0].x/iChannelResolution[0].y;\n            float b = (aux2.y - muv.y);\n            distanceCentre = sqrt(pow(a,2.0) + pow(b,2.0))/sqrt(2.0);\n            if( distanceCentre<1.0/border)\n                fragColor = vec4(muv.x,muv.y,max((1.0-distanceCentre*border),oldColor.z),0.9);\n\t\t\telse\n                fragColor = oldColor;\n        }\n        else\n                fragColor = oldColor;\n    }\n}","name":"Buffer C","description":"","type":"buffer"}]}