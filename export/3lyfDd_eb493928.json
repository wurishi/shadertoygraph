{"ver":"0.1","info":{"id":"3lyfDd","date":"1615260799","viewed":1067,"name":"rayTracingTesting1","username":"CoderHusk","description":"raytracing","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raytracing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float bound(float minv, float maxv, float v) {\n  return (-minv+v)/(-minv+maxv);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5;\n    vec3 col = vec3(0);\n    uv.x *= iResolution.x/iResolution.y;\n    vec3 cameraPosition = vec3(cos(iTime),sin(iTime),0);\n    vec3 pixelToCameraDirection = normalize(vec3(uv.x, uv.y, 1));\n    \n    vec3 p = vec3(0.0,0.0,4.0);\n    float r = 1.0f;\n    float t = dot(p-cameraPosition, pixelToCameraDirection);\n    vec3 pEqu = cameraPosition + pixelToCameraDirection*t;\n    \n    float y = length(p-pEqu);\n    if (y<r) {\n        float x = sqrt(r*r - y*y);\n        float t1 = t-x;\n        float c = bound(p.z, p.z-r, t1);\n        col = vec3(c);\n    }\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}