{"ver":"0.1","info":{"id":"MlcGDf","date":"1472052336","viewed":1952,"name":"Motion Detection","username":"lachnblach","description":"motion detection","likes":20,"published":3,"flags":34,"usePreview":0,"tags":["detection","edge","motion","toon","motiondetection"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#ifdef GL_ES\nprecision mediump float;\n#endif\n\nfloat normpdf(in float x, in float sigma)\n{\n                return 0.39894*exp(-0.5*x*x/(sigma*sigma))/sigma;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n                vec3 c = texture(iChannel0, fragCoord.xy / iResolution.xy).rgb;\n                if (fragCoord.x < iMouse.x)\n                {\n                                fragColor = vec4(c, 1.0); \n                } else {\n                                \n                                //declare stuff\n                                const int mSize = 8;\n                                const int kSize = (mSize-1)/2;\n                                float kernel[mSize];\n                                vec3 final_colour = vec3(0.0);\n                                \n                                //create the 1-D kernel\n                                float sigma = 7.0;\n                                float Z = 0.0;\n                                for (int j = 0; j <= kSize; ++j)\n                                {\n                                                kernel[kSize+j] = kernel[kSize-j] = normpdf(float(j), sigma);\n                                }\n                                \n                                //get the normalization factor (as the gaussian has been clamped)\n                                for (int j = 0; j < mSize; ++j)\n                                {\n                                                Z += kernel[j];\n                                }\n                                \n                                //read out the texels\n                                for (int i=-kSize; i <= kSize; ++i)\n                                {\n                                                for (int j=-kSize; j <= kSize; ++j)\n                                                {\n                                                                final_colour += kernel[kSize+j]*kernel[kSize+i]*texture(iChannel0, (fragCoord.xy+vec2(float(i),float(j))) / iResolution.xy).rgb;\n                \n                                                }\n                                }\n                                \n                                \n                                fragColor = vec4(final_colour/(Z*Z), 1.0);\n                }\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 c_t1 = texture( iChannel0, uv );   \n    vec4 c_t0 = texture( iChannel1, uv );\n    float value = float(iFrame);\n    fragColor = mod(value,2.0) == 0. ?c_t0:c_t1;\n}\n","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 c_t0 = texture( iChannel0, uv );\n    vec4 c_t1 = texture( iChannel1, uv );\n    \n        \n    vec4 diff = vec4(abs(c_t0.r - c_t1.r) ,abs(c_t0.g - c_t1.g) , abs(c_t0.b - c_t1.b),1.0);\n    \n    float threshold = 0.15;\n    \n    diff = step(threshold, diff);\n    \n    if(diff.r >= threshold || diff.g >= threshold || diff.b >= threshold)\n        diff.r = diff.g = diff.b = 1.;\n    \n    vec4 motion = diff;\n\tfragColor = diff;               \n}\n\n","name":"Buf B","description":"","type":"buffer"}]}