{"ver":"0.1","info":{"id":"sdySDz","date":"1634745481","viewed":175,"name":"Improved CelShading ","username":"zhengxiangkui","description":"cel shading","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarch","toon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 200\n#define MAX_DEPTH 100.\n#define HIT_VAL 0.001\n\n#define Cel_STEP_WIDTH 0.3\n#define Cel_STEP_AMOUNT 3.\n\nfloat sdSphere(vec3 p) {\n    return length(p) - 1.;\n}\n\nfloat sdTorus(vec3 p, vec2 t)\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\nfloat getSDF(vec3 pos) {\n    return min(sdTorus(pos, vec2(2., .8)), sdSphere(pos - vec3(0, 1.8, 0)));\n}\n\nvec3 getNormal(vec3 pos) {\n    float curDis = getSDF(pos);\n    vec2 offset = vec2(-1., 0.);\n    return normalize(curDis - vec3(\n    getSDF(pos + offset.xyy),\n    getSDF(pos + offset.yxy),\n    getSDF(pos + offset.yyx)\n    )); \n}\n\nfloat rayMarch(vec3 origin, vec3 dir) {\n    float depth = 0.;\n    for(int i = 0; i < MAX_STEPS; i++) {\n        vec3 pos = origin + dir * depth;\n        float curDis = getSDF(pos);\n        if(depth > MAX_DEPTH || curDis < HIT_VAL) {\n            break;\n        }\n        depth += curDis;\n    }\n    return depth;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = uv * 2. - 1.;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    vec4 sceneColor = vec4(col,1.0);\n    vec3 origin = vec3(0, sin(iTime) * 5., 5.);\n    vec3 lookAt = vec3(0,0,0);\n    vec3 forward = normalize(lookAt - origin);\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = normalize(cross(up, forward));\n    up = normalize(cross(forward, right));\n    \n    vec3 dir = normalize(right * uv.x + up * uv.y + forward);\n    float depth = rayMarch(origin, dir);\n    vec3 pos = origin + dir * depth;\n    if(abs(getSDF(pos)) < HIT_VAL) {\n        vec3 lightDir = vec3(0., 5., 5.);\n        vec3 normal = getNormal(pos);\n        vec3 lightNor = normalize(lightDir);\n        float diffuseF = dot(lightNor, normal);\n        diffuseF = diffuseF / Cel_STEP_WIDTH;\n        float intense = ceil(diffuseF);\n        intense = intense / Cel_STEP_AMOUNT;\n        intense = clamp(0., 1., intense);\n        float diffuseFChange = fwidth(intense);\n        sceneColor = vec4(intense * vec4(0.933,0.906,0.125,1));\n    }\n    \n    fragColor = sceneColor;\n}","name":"Image","description":"","type":"image"}]}