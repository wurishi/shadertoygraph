{"ver":"0.1","info":{"id":"l3jXD3","date":"1711165628","viewed":78,"name":"Repeato-march","username":"Jonkel","description":"Trying to get some nice repeating patterns with raymarching, also played with some sounds to get some sort of middle piece going.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGzn","filepath":"/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3","previewfilepath":"/media/ap/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// <3 kishimisu && <3 iquilez\n\nmat2 rot2D(float a) {\n    return mat2(cos(a), -sin(a), sin(a), cos(a));\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\n\nfloat sdSphere(vec3 p, float size) {\n    return length(p) - size;\n}\n\nvec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d)\n{\n    return a + b*cos(6.28318*(c*t+d));\n}\n\n\nfloat map(vec3 p) {\n\n    // sampling middle made it be a bit calmer, should reasonably find a more stable way to reduce the jitter\n    vec4 soundSample = texture(iChannel0, vec2(0.5, 0.5) / iChannelResolution[0].xy); \n\n    float d = sdBox(p, soundSample.xyx * 0.2 * 5. + vec3(0, .15, .15));\n\n    d = min(d,sdBox(p, soundSample.yxx * 0.2 * 5. + vec3(.15, 0, .15)));\n\n    p.z += iTime * .4;\n    p.xy = fract(p.xy) - .5;\n    p.z = mod(p.z, .25) - .125;\n\n    d = min(d, sdSphere(p, .2));\n\n\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n    vec2 uv = (fragCoord * 2. - iResolution.xy) / iResolution.y;\n\n    vec3 ro = vec3(0,0,-3);\n    vec3 rd = normalize(vec3(uv,1));\n\n    float t = 0.;            // distance travelled\n\n    vec3 col;\n\n    int i = 0;\n    for (; i < 80; ++i)\n    {\n        vec3 p = ro + rd * t;   // position along the ray\n        p.xy *= rot2D(t*.15 * sin(iTime * 0.5) * t);\n\n        float d = map(p);\n\n        t += d;\n\n        if (d < .001 || t > 100.) break;\n    }\n\n\n    if (i < 80)\n        col = palette(float(i)*.005 + t * 0.1 * rd.x * abs(sin(iTime)), vec3(0.5,0.3,0.5),vec3(0.5,0.5,0.5),vec3(2.0,1.0,0.0),vec3(0.5,0.20,0.25) );\n    else \n        col = vec3(0.25, 0, 0);\n\n\n    fragColor = vec4(col, 1);\n}","name":"Image","description":"","type":"image"}]}