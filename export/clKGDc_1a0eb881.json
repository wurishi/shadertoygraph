{"ver":"0.1","info":{"id":"clKGDc","date":"1684792015","viewed":69,"name":"TV Static Noise","username":"ikrr_","description":"TV static noise\n* NOISE ALGORITHM BY https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83 *","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["noise","tv","static"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Noise from \"GLSL Noise Algorithms\", by patriciogonzalezvivo on GitHub\n// https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83\n\nfloat mod289(float x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 mod289(vec4 x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 perm(vec4 x){return mod289(((x * 34.0) + 1.0) * x);}\n\nfloat noise(vec3 p, float scale){\n    p *= scale; // Tweak for allowing scale of noise\n    vec3 a = floor(p);\n    vec3 d = p - a;\n    d = d * d * (3.0 - 2.0 * d);\n\n    vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);\n    vec4 k1 = perm(b.xyxy);\n    vec4 k2 = perm(k1.xyxy + b.zzww);\n\n    vec4 c = k2 + a.zzzz;\n    vec4 k3 = perm(c);\n    vec4 k4 = perm(c + 1.0);\n\n    vec4 o1 = fract(k3 * (1.0 / 41.0));\n    vec4 o2 = fract(k4 * (1.0 / 41.0));\n\n    vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);\n    vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);\n\n    return o4.y * d.y + o4.x * (1.0 - d.y);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float slice = iTime; // slice of 3d noise\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    float n = noise(vec3(uv.x, uv.y, slice), 100.0); // noise\n    \n    // Output to screen\n    fragColor = vec4(vec3(n),1.0); // color\n}","name":"Image","description":"","type":"image"}]}