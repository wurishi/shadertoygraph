{"ver":"0.1","info":{"id":"3l2BDD","date":"1599590478","viewed":68,"name":"Inflatable Tentacles","username":"DawCrash","description":"Inflatable Tentacles\n\nDone while learning noise","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["noise","random","polar"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.141592\n\nvec2 hash( vec2 x )\n{\n    const vec2 k = vec2( 0.3183099, 0.3678794 );\n    x = x*k + k.yx;\n    return -1.0 + 2.0*fract( 16.0 * k*fract( x.x*x.y*(x.x+x.y)) );\n}\n\nfloat rand(float i){\n    vec2 co = vec2(i, i+1.0);\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat noise(float x) {\n    float i = floor(x);  // integer\n\tfloat f = fract(x);  // fraction\n    \n\treturn mix(rand(i), rand(i + 1.0), smoothstep(0.,1.,f));   \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5;\n    uv.x *= iResolution.x / iResolution.y; // normalize aspect ratio\n    \n    // Polar coordinates\n    float dist = sqrt(pow(uv.x, 2.0) + pow(uv.y, 2.0));\n    float angle = atan(uv.y, uv.x);    \n    \n    vec3 color = vec3(0.0);\n    \n    float timeLimit = PI * 2.0;\n    float compareAngle = PI;\n    //float compareAngle = mod(iTime*3.0, timeLimit) - PI;\n    \n    //float compareDist = abs(sin(iTime)/10.0+sin(noise(abs(angle))*4.0)*0.5) + noise(abs(angle)+iTime)/2.0;\n    float compareDist = abs(sin(iTime)/7.0+sin(angle*4.0)*0.5) + noise(abs(angle)+iTime)/2.0;\n    \n    float c = step(compareDist, dist) - step(compareDist + 0.05, dist);\n    c += step(compareDist + 0.1, dist) - step(compareDist + 0.15, dist);\n    c += step(compareDist + 0.2, dist) - step(compareDist + 0.25, dist);\n    \n    color = vec3(c);\n\n    // Output to screen\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}