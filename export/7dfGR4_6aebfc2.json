{"ver":"0.1","info":{"id":"7dfGR4","date":"1615562715","viewed":984,"name":"AA with fwidth","username":"Xor","description":"Here's a quick SDF anti-aliasing demo. On the left is fwidth, on the right is using length with the dx,dy derivatives. Notice how with fwidth, the diagonals extend further than they should.","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//AA radius (high for demonstration)\n#define AA 10.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 c1 = vec4(1.,.7,.1,1);\n    vec4 c2 = vec4(.1,.1,.1,1);\n    vec2 coord = mod(fragCoord+iTime*32.,128.)-64.;\n    \n    //Side divider\n    float side = fragCoord.x-iResolution.x/2.;\n\n    //Distance function\n    float dis = length(coord)-48.;\n    //SDF derivative\n    vec2 der = vec2(dFdx(dis),dFdy(dis));\n    //Derivative width\n    float wid = (side>0.)? length(der) : fwidth(dis);\n    //Anti-alias value\n    float aa = clamp(dis/wid/AA,0.,1.);\n    \n    //Divider line\n    float edge = min(side*side/8.,1.);\n    fragColor = mix(c1,c2,aa)*edge;\n}","name":"Image","description":"","type":"image"}]}