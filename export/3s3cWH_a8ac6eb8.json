{"ver":"0.1","info":{"id":"3s3cWH","date":"1600802672","viewed":219,"name":"Gen. with Material Maker: Portal","username":"RodzLabs","description":"This shader was generated using Material Maker.\nBased on @NaturallyCG Substance Designer Beginner Quick Tip 57","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["2d","generated"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//---\n\nfloat rand(vec2 x) {\n    return fract(cos(dot(x, vec2(13.9898, 8.141))) * 43758.5453);\n}\n\nvec2 rand2(vec2 x) {\n    return fract(cos(vec2(dot(x, vec2(13.9898, 8.141)),\n\t\t\t\t\t\t  dot(x, vec2(3.4562, 17.398)))) * 43758.5453);\n}\n\nvec3 rand3(vec2 x) {\n    return fract(cos(vec3(dot(x, vec2(13.9898, 8.141)),\n                          dot(x, vec2(3.4562, 17.398)),\n                          dot(x, vec2(13.254, 5.867)))) * 43758.5453);\n}\n\nvec3 rgb2hsv(vec3 c) {\n\tvec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n\tvec4 p = c.g < c.b ? vec4(c.bg, K.wz) : vec4(c.gb, K.xy);\n\tvec4 q = c.r < p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);\n\n\tfloat d = q.x - min(q.w, q.y);\n\tfloat e = 1.0e-10;\n\treturn vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\nvec3 hsv2rgb(vec3 c) {\n\tvec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n\tvec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n\treturn c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nfloat perlin(vec2 uv, vec2 size, int iterations, float persistence, int seed) {\n\tvec2 seed2 = rand2(vec2(float(seed), 1.0-float(seed)));\n    float rv = 0.0;\n    float coef = 1.0;\n    float acc = 0.0;\n    for (int i = 0; i < iterations; ++i) {\n    \tvec2 step = vec2(1.0)/size;\n\t\tvec2 xy = floor(uv*size);\n        float f0 = rand(seed2+mod(xy, size));\n        float f1 = rand(seed2+mod(xy+vec2(1.0, 0.0), size));\n        float f2 = rand(seed2+mod(xy+vec2(0.0, 1.0), size));\n        float f3 = rand(seed2+mod(xy+vec2(1.0, 1.0), size));\n        vec2 mixval = smoothstep(0.0, 1.0, fract(uv*size));\n        rv += coef * mix(mix(f0, f1, mixval.x), mix(f2, f3, mixval.x), mixval.y);\n        acc += coef;\n        size *= 2.0;\n        coef *= persistence;\n    }\n    \n    return rv / acc;\n}\nvec2 transform(vec2 uv, vec2 translate, float rotate, vec2 scale, bool repeat) {\n \tvec2 rv;\n\tuv -= translate;\n\tuv -= vec2(0.5);\n\trv.x = cos(rotate)*uv.x + sin(rotate)*uv.y;\n\trv.y = -sin(rotate)*uv.x + cos(rotate)*uv.y;\n\trv /= scale;\n\trv += vec2(0.5);\n    if (repeat) {\n\t\treturn fract(rv);\n\t} else {\n\t\treturn clamp(rv, vec2(0.0), vec2(1.0));\n\t}\t\n}float fbm_value(vec2 coord, vec2 size, float seed) {\n\tvec2 o = floor(coord)+rand2(vec2(float(seed), 1.0-float(seed)))+size;\n\tvec2 f = fract(coord);\n\tfloat p00 = rand(mod(o, size));\n\tfloat p01 = rand(mod(o + vec2(0.0, 1.0), size));\n\tfloat p10 = rand(mod(o + vec2(1.0, 0.0), size));\n\tfloat p11 = rand(mod(o + vec2(1.0, 1.0), size));\n\tvec2 t = f * f * (3.0 - 2.0 * f);\n\treturn mix(mix(p00, p10, t.x), mix(p01, p11, t.x), t.y);\n}\n\nfloat fbm_perlin(vec2 coord, vec2 size, float seed) {\n\tvec2 o = floor(coord)+rand2(vec2(float(seed), 1.0-float(seed)))+size;\n\tvec2 f = fract(coord);\n\tfloat a00 = rand(mod(o, size)) * 6.28318530718;\n\tfloat a01 = rand(mod(o + vec2(0.0, 1.0), size)) * 6.28318530718;\n\tfloat a10 = rand(mod(o + vec2(1.0, 0.0), size)) * 6.28318530718;\n\tfloat a11 = rand(mod(o + vec2(1.0, 1.0), size)) * 6.28318530718;\n\tvec2 v00 = vec2(cos(a00), sin(a00));\n\tvec2 v01 = vec2(cos(a01), sin(a01));\n\tvec2 v10 = vec2(cos(a10), sin(a10));\n\tvec2 v11 = vec2(cos(a11), sin(a11));\n\tfloat p00 = dot(v00, f);\n\tfloat p01 = dot(v01, f - vec2(0.0, 1.0));\n\tfloat p10 = dot(v10, f - vec2(1.0, 0.0));\n\tfloat p11 = dot(v11, f - vec2(1.0, 1.0));\n\tvec2 t = f * f * (3.0 - 2.0 * f);\n\treturn 0.5 + mix(mix(p00, p10, t.x), mix(p01, p11, t.x), t.y);\n}\n\nfloat fbm_perlinabs(vec2 coord, vec2 size, float seed) {\n\treturn abs(2.0*fbm_perlin(coord, size, seed)-1.0);\n}\n\nfloat fbm_cellular(vec2 coord, vec2 size, float seed) {\n\tvec2 o = floor(coord)+rand2(vec2(float(seed), 1.0-float(seed)))+size;\n\tvec2 f = fract(coord);\n\tfloat min_dist = 2.0;\n\tfor(float x = -1.0; x <= 1.0; x++) {\n\t\tfor(float y = -1.0; y <= 1.0; y++) {\n\t\t\tvec2 node = rand2(mod(o + vec2(x, y), size)) + vec2(x, y);\n\t\t\tfloat dist = sqrt((f - node).x * (f - node).x + (f - node).y * (f - node).y);\n\t\t\tmin_dist = min(min_dist, dist);\n\t\t}\n\t}\n\treturn min_dist;\n}\n\nfloat fbm_cellular2(vec2 coord, vec2 size, float seed) {\n\tvec2 o = floor(coord)+rand2(vec2(float(seed), 1.0-float(seed)))+size;\n\tvec2 f = fract(coord);\n\tfloat min_dist1 = 2.0;\n\tfloat min_dist2 = 2.0;\n\tfor(float x = -1.0; x <= 1.0; x++) {\n\t\tfor(float y = -1.0; y <= 1.0; y++) {\n\t\t\tvec2 node = rand2(mod(o + vec2(x, y), size)) + vec2(x, y);\n\t\t\tfloat dist = sqrt((f - node).x * (f - node).x + (f - node).y * (f - node).y);\n\t\t\tif (min_dist1 > dist) {\n\t\t\t\tmin_dist2 = min_dist1;\n\t\t\t\tmin_dist1 = dist;\n\t\t\t} else if (min_dist2 > dist) {\n\t\t\t\tmin_dist2 = dist;\n\t\t\t}\n\t\t}\n\t}\n\treturn min_dist2-min_dist1;\n}\n\nfloat fbm_cellular3(vec2 coord, vec2 size, float seed) {\n\tvec2 o = floor(coord)+rand2(vec2(float(seed), 1.0-float(seed)))+size;\n\tvec2 f = fract(coord);\n\tfloat min_dist = 2.0;\n\tfor(float x = -1.0; x <= 1.0; x++) {\n\t\tfor(float y = -1.0; y <= 1.0; y++) {\n\t\t\tvec2 node = rand2(mod(o + vec2(x, y), size))*0.5 + vec2(x, y);\n\t\t\tfloat dist = abs((f - node).x) + abs((f - node).y);\n\t\t\tmin_dist = min(min_dist, dist);\n\t\t}\n\t}\n\treturn min_dist;\n}\n\nfloat fbm_cellular4(vec2 coord, vec2 size, float seed) {\n\tvec2 o = floor(coord)+rand2(vec2(float(seed), 1.0-float(seed)))+size;\n\tvec2 f = fract(coord);\n\tfloat min_dist1 = 2.0;\n\tfloat min_dist2 = 2.0;\n\tfor(float x = -1.0; x <= 1.0; x++) {\n\t\tfor(float y = -1.0; y <= 1.0; y++) {\n\t\t\tvec2 node = rand2(mod(o + vec2(x, y), size))*0.5 + vec2(x, y);\n\t\t\tfloat dist = abs((f - node).x) + abs((f - node).y);\n\t\t\tif (min_dist1 > dist) {\n\t\t\t\tmin_dist2 = min_dist1;\n\t\t\t\tmin_dist1 = dist;\n\t\t\t} else if (min_dist2 > dist) {\n\t\t\t\tmin_dist2 = dist;\n\t\t\t}\n\t\t}\n\t}\n\treturn min_dist2-min_dist1;\n}\n\nfloat fbm_cellular5(vec2 coord, vec2 size, float seed) {\n\tvec2 o = floor(coord)+rand2(vec2(float(seed), 1.0-float(seed)))+size;\n\tvec2 f = fract(coord);\n\tfloat min_dist = 2.0;\n\tfor(float x = -1.0; x <= 1.0; x++) {\n\t\tfor(float y = -1.0; y <= 1.0; y++) {\n\t\t\tvec2 node = rand2(mod(o + vec2(x, y), size)) + vec2(x, y);\n\t\t\tfloat dist = max(abs((f - node).x), abs((f - node).y));\n\t\t\tmin_dist = min(min_dist, dist);\n\t\t}\n\t}\n\treturn min_dist;\n}\n\nfloat fbm_cellular6(vec2 coord, vec2 size, float seed) {\n\tvec2 o = floor(coord)+rand2(vec2(float(seed), 1.0-float(seed)))+size;\n\tvec2 f = fract(coord);\n\tfloat min_dist1 = 2.0;\n\tfloat min_dist2 = 2.0;\n\tfor(float x = -1.0; x <= 1.0; x++) {\n\t\tfor(float y = -1.0; y <= 1.0; y++) {\n\t\t\tvec2 node = rand2(mod(o + vec2(x, y), size)) + vec2(x, y);\n\t\t\tfloat dist = max(abs((f - node).x), abs((f - node).y));\n\t\t\tif (min_dist1 > dist) {\n\t\t\t\tmin_dist2 = min_dist1;\n\t\t\t\tmin_dist1 = dist;\n\t\t\t} else if (min_dist2 > dist) {\n\t\t\t\tmin_dist2 = dist;\n\t\t\t}\n\t\t}\n\t}\n\treturn min_dist2-min_dist1;\n}\nvec3 blend_normal(vec2 uv, vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*c1 + (1.0-opacity)*c2;\n}\n\nvec3 blend_dissolve(vec2 uv, vec3 c1, vec3 c2, float opacity) {\n\tif (rand(uv) < opacity) {\n\t\treturn c1;\n\t} else {\n\t\treturn c2;\n\t}\n}\n\nvec3 blend_multiply(vec2 uv, vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*c1*c2 + (1.0-opacity)*c2;\n}\n\nvec3 blend_screen(vec2 uv, vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*(1.0-(1.0-c1)*(1.0-c2)) + (1.0-opacity)*c2;\n}\n\nfloat blend_overlay_f(float c1, float c2) {\n\treturn (c1 < 0.5) ? (2.0*c1*c2) : (1.0-2.0*(1.0-c1)*(1.0-c2));\n}\n\nvec3 blend_overlay(vec2 uv, vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*vec3(blend_overlay_f(c1.x, c2.x), blend_overlay_f(c1.y, c2.y), blend_overlay_f(c1.z, c2.z)) + (1.0-opacity)*c2;\n}\n\nvec3 blend_hard_light(vec2 uv, vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*0.5*(c1*c2+blend_overlay(uv, c1, c2, 1.0)) + (1.0-opacity)*c2;\n}\n\nfloat blend_soft_light_f(float c1, float c2) {\n\treturn (c2 < 0.5) ? (2.0*c1*c2+c1*c1*(1.0-2.0*c2)) : 2.0*c1*(1.0-c2)+sqrt(c1)*(2.0*c2-1.0);\n}\n\nvec3 blend_soft_light(vec2 uv, vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*vec3(blend_soft_light_f(c1.x, c2.x), blend_soft_light_f(c1.y, c2.y), blend_soft_light_f(c1.z, c2.z)) + (1.0-opacity)*c2;\n}\n\nfloat blend_burn_f(float c1, float c2) {\n\treturn (c1==0.0)?c1:max((1.0-((1.0-c2)/c1)),0.0);\n}\n\nvec3 blend_burn(vec2 uv, vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*vec3(blend_burn_f(c1.x, c2.x), blend_burn_f(c1.y, c2.y), blend_burn_f(c1.z, c2.z)) + (1.0-opacity)*c2;\n}\n\nfloat blend_dodge_f(float c1, float c2) {\n\treturn (c1==1.0)?c1:min(c2/(1.0-c1),1.0);\n}\n\nvec3 blend_dodge(vec2 uv, vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*vec3(blend_dodge_f(c1.x, c2.x), blend_dodge_f(c1.y, c2.y), blend_dodge_f(c1.z, c2.z)) + (1.0-opacity)*c2;\n}\n\nvec3 blend_lighten(vec2 uv, vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*max(c1, c2) + (1.0-opacity)*c2;\n}\n\nvec3 blend_darken(vec2 uv, vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*min(c1, c2) + (1.0-opacity)*c2;\n}\n\nvec3 blend_difference(vec2 uv, vec3 c1, vec3 c2, float opacity) {\n\treturn opacity*clamp(c2-c1, vec3(0.0), vec3(1.0)) + (1.0-opacity)*c2;\n}\nfloat shape_circle(vec2 uv, float sides, float size, float edge) {\n    uv = 2.0*uv-1.0;\n\tedge = max(edge, 1.0e-8);\n    float distance = length(uv);\n    return clamp((1.0-distance/size)/edge, 0.0, 1.0);\n}\n\nfloat shape_polygon(vec2 uv, float sides, float size, float edge) {\n    uv = 2.0*uv-1.0;\n\tedge = max(edge, 1.0e-8);\n    float angle = atan(uv.x, uv.y)+3.14159265359;\n    float slice = 6.28318530718/sides;\n    return clamp((size-cos(floor(0.5+angle/slice)*slice-angle)*length(uv))/(edge*size), 0.0, 1.0);\n}\n\nfloat shape_star(vec2 uv, float sides, float size, float edge) {\n    uv = 2.0*uv-1.0;\n\tedge = max(edge, 1.0e-8);\n    float angle = atan(uv.x, uv.y);\n    float slice = 6.28318530718/sides;\n    return clamp((size-cos(floor(1.5+angle/slice-2.0*step(0.5*slice, mod(angle, slice)))*slice-angle)*length(uv))/(edge*size), 0.0, 1.0);\n}\n\nfloat shape_curved_star(vec2 uv, float sides, float size, float edge) {\n    uv = 2.0*uv-1.0;\n\tedge = max(edge, 1.0e-8);\n    float angle = 2.0*(atan(uv.x, uv.y)+3.14159265359);\n    float slice = 6.28318530718/sides;\n    return clamp((size-cos(floor(0.5+0.5*angle/slice)*2.0*slice-angle)*length(uv))/(edge*size), 0.0, 1.0);\n}\n\nfloat shape_rays(vec2 uv, float sides, float size, float edge) {\n    uv = 2.0*uv-1.0;\n\tedge = 0.5*max(edge, 1.0e-8)*size;\n\tfloat slice = 6.28318530718/sides;\n    float angle = mod(atan(uv.x, uv.y)+3.14159265359, slice)/slice;\n    return clamp(min((size-angle)/edge, angle/edge), 0.0, 1.0);\n}\n\nfloat dots(vec2 uv, float size, float density, int seed) {\n\tvec2 seed2 = rand2(vec2(float(seed), 1.0-float(seed)));\n\tuv /= size;\n\tvec2 point_pos = floor(uv)+vec2(0.5);\n\tfloat color = step(rand(seed2+point_pos), density);\n    return color;\n}const float p_o36306_amount = 1.000000000;\nconst float p_o36288_gradient_0_pos = 0.000000000;\nconst float p_o36288_gradient_0_r = 0.000000000;\nconst float p_o36288_gradient_0_g = 0.021973001;\nconst float p_o36288_gradient_0_b = 0.351563007;\nconst float p_o36288_gradient_0_a = 1.000000000;\nconst float p_o36288_gradient_1_pos = 1.000000000;\nconst float p_o36288_gradient_1_r = 0.328125000;\nconst float p_o36288_gradient_1_g = 0.748046994;\nconst float p_o36288_gradient_1_b = 1.000000000;\nconst float p_o36288_gradient_1_a = 1.000000000;\nvec4 o36288_gradient_gradient_fct(float x) {\n  if (x < p_o36288_gradient_0_pos) {\n    return vec4(p_o36288_gradient_0_r,p_o36288_gradient_0_g,p_o36288_gradient_0_b,p_o36288_gradient_0_a);\n  } else if (x < p_o36288_gradient_1_pos) {\n    return mix(vec4(p_o36288_gradient_0_r,p_o36288_gradient_0_g,p_o36288_gradient_0_b,p_o36288_gradient_0_a), vec4(p_o36288_gradient_1_r,p_o36288_gradient_1_g,p_o36288_gradient_1_b,p_o36288_gradient_1_a), ((x-p_o36288_gradient_0_pos)/(p_o36288_gradient_1_pos-p_o36288_gradient_0_pos)));\n  }\n  return vec4(p_o36288_gradient_1_r,p_o36288_gradient_1_g,p_o36288_gradient_1_b,p_o36288_gradient_1_a);\n}\nconst float p_o36272_translate_x = 0.000000000;\nconst float p_o36272_translate_y = 0.000000000;\nconst float p_o36272_rotate = 264.989990000;\nconst float p_o36272_scale_x = 1.000000000;\nconst float p_o36272_scale_y = 1.000000000;\nconst float p_o36273_repeat = 1.000000000;\nconst float p_o36273_gradient_0_pos = 0.000000000;\nconst float p_o36273_gradient_0_r = 1.000000000;\nconst float p_o36273_gradient_0_g = 1.000000000;\nconst float p_o36273_gradient_0_b = 1.000000000;\nconst float p_o36273_gradient_0_a = 1.000000000;\nconst float p_o36273_gradient_1_pos = 1.000000000;\nconst float p_o36273_gradient_1_r = 0.214844003;\nconst float p_o36273_gradient_1_g = 0.214844003;\nconst float p_o36273_gradient_1_b = 0.214844003;\nconst float p_o36273_gradient_1_a = 1.000000000;\nvec4 o36273_gradient_gradient_fct(float x) {\n  if (x < p_o36273_gradient_0_pos) {\n    return vec4(p_o36273_gradient_0_r,p_o36273_gradient_0_g,p_o36273_gradient_0_b,p_o36273_gradient_0_a);\n  } else if (x < p_o36273_gradient_1_pos) {\n    return mix(vec4(p_o36273_gradient_0_r,p_o36273_gradient_0_g,p_o36273_gradient_0_b,p_o36273_gradient_0_a), vec4(p_o36273_gradient_1_r,p_o36273_gradient_1_g,p_o36273_gradient_1_b,p_o36273_gradient_1_a), (x-p_o36273_gradient_0_pos)/(p_o36273_gradient_1_pos-p_o36273_gradient_0_pos));\n  }\n  return vec4(p_o36273_gradient_1_r,p_o36273_gradient_1_g,p_o36273_gradient_1_b,p_o36273_gradient_1_a);\n}\nconst float p_o36268_radius = 1.500000000;\nconst float p_o36268_repeat = 1.000000000;\nconst float p_o36271_translate_x = 0.000000000;\nconst float p_o36256_translate_x = 0.500000000;\nconst float p_o36256_translate_y = 0.500000000;\nconst float p_o36256_rotate = 0.000000000;\nconst float p_o36256_scale_x = 1.000000000;\nconst float p_o36256_scale_y = 1.000000000;\nconst int seed_o36257 = 30752;\nconst float p_o36257_scale_x = 8.000000000;\nconst float p_o36257_scale_y = 8.000000000;\nconst float p_o36257_iterations = 3.000000000;\nconst float p_o36257_persistence = 0.800000000;\nconst float p_o36286_translate_x = 0.000000000;\nconst int seed_o36269 = -53367;\nconst float p_o36269_scale_x = 8.000000000;\nconst float p_o36269_scale_y = 8.000000000;\nconst float p_o36269_iterations = 4.000000000;\nconst float p_o36269_persistence = 0.850000000;\nfloat o36269_fbm(vec2 coord, vec2 size, int octaves, float persistence, float seed) {\n\tfloat normalize_factor = 0.0;\n\tfloat value = 0.0;\n\tfloat scale = 1.0;\n\tfor (int i = 0; i < octaves; i++) {\n\t\tvalue += fbm_perlin(coord*size, size, seed) * scale;\n\t\tnormalize_factor += scale;\n\t\tsize *= 2.0;\n\t\tscale *= persistence;\n\t}\n\treturn value / normalize_factor;\n}\nconst float p_o36308_gradient_0_pos = 0.000000000;\nconst float p_o36308_gradient_0_r = 0.000000000;\nconst float p_o36308_gradient_0_g = 0.000000000;\nconst float p_o36308_gradient_0_b = 0.000000000;\nconst float p_o36308_gradient_0_a = 1.000000000;\nconst float p_o36308_gradient_1_pos = 0.963636000;\nconst float p_o36308_gradient_1_r = 1.000000000;\nconst float p_o36308_gradient_1_g = 1.000000000;\nconst float p_o36308_gradient_1_b = 1.000000000;\nconst float p_o36308_gradient_1_a = 1.000000000;\nvec4 o36308_gradient_gradient_fct(float x) {\n  if (x < p_o36308_gradient_0_pos) {\n    return vec4(p_o36308_gradient_0_r,p_o36308_gradient_0_g,p_o36308_gradient_0_b,p_o36308_gradient_0_a);\n  } else if (x < p_o36308_gradient_1_pos) {\n    return mix(vec4(p_o36308_gradient_0_r,p_o36308_gradient_0_g,p_o36308_gradient_0_b,p_o36308_gradient_0_a), vec4(p_o36308_gradient_1_r,p_o36308_gradient_1_g,p_o36308_gradient_1_b,p_o36308_gradient_1_a), 0.5-0.5*cos(3.14159265359*(x-p_o36308_gradient_0_pos)/(p_o36308_gradient_1_pos-p_o36308_gradient_0_pos)));\n  }\n  return vec4(p_o36308_gradient_1_r,p_o36308_gradient_1_g,p_o36308_gradient_1_b,p_o36308_gradient_1_a);\n}\nconst float p_o36287_sides = 2.000000000;\nconst float p_o36287_radius = 1.000000000;\nconst float p_o36287_edge = 0.450000000;\nconst float p_o36303_radius = 1.500000000;\nconst float p_o36303_repeat = 1.000000000;\nconst float p_o36304_translate_x = 0.000000000;\nconst int seed_o36305 = 63002;\nconst float p_o36305_scale_x = 16.000000000;\nconst float p_o36305_scale_y = 5.000000000;\nconst float p_o36305_iterations = 5.000000000;\nconst float p_o36305_persistence = 0.850000000;\nfloat o36305_fbm(vec2 coord, vec2 size, int octaves, float persistence, float seed) {\n\tfloat normalize_factor = 0.0;\n\tfloat value = 0.0;\n\tfloat scale = 1.0;\n\tfor (int i = 0; i < octaves; i++) {\n\t\tvalue += fbm_perlin(coord*size, size, seed) * scale;\n\t\tnormalize_factor += scale;\n\t\tsize *= 2.0;\n\t\tscale *= persistence;\n\t}\n\treturn value / normalize_factor;\n}\nconst int seed_o303116 = 39743;\nconst float p_o303116_density = 0.001100000;\n\n\t\tfloat o303116_f(vec2 uv) {\n\t\t\treturn dots(uv, 1.0/512.000000000, p_o303116_density, seed_o303116);\n\t\t}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\nfloat minSize = min(iResolution.x, iResolution.y);\nvec2 UV = vec2(0.0, 1.0) + vec2(1.0, -1.0) * (fragCoord-0.5*(iResolution.xy-vec2(minSize)))/minSize;\nvec4 o36273_0_1_rgba = o36273_gradient_gradient_fct(fract(p_o36273_repeat*1.41421356237*length(fract((UV))-vec2(0.5, 0.5))));\nfloat o36257_0_1_f = perlin(((vec2(fract(p_o36268_repeat*atan((transform((UV), vec2(p_o36272_translate_x*(2.0*1.0-1.0), p_o36272_translate_y*(2.0*1.0-1.0)), p_o36272_rotate*0.01745329251*(2.0*(dot((o36273_0_1_rgba).rgb, vec3(1.0))/3.0)-1.0), vec2(p_o36272_scale_x*(2.0*1.0-1.0), p_o36272_scale_y*(2.0*1.0-1.0)), false)).y-0.5, (transform((UV), vec2(p_o36272_translate_x*(2.0*1.0-1.0), p_o36272_translate_y*(2.0*1.0-1.0)), p_o36272_rotate*0.01745329251*(2.0*(dot((o36273_0_1_rgba).rgb, vec3(1.0))/3.0)-1.0), vec2(p_o36272_scale_x*(2.0*1.0-1.0), p_o36272_scale_y*(2.0*1.0-1.0)), false)).x-0.5)*0.15915494309), min(0.99999, 2.0/p_o36268_radius*length((transform((UV), vec2(p_o36272_translate_x*(2.0*1.0-1.0), p_o36272_translate_y*(2.0*1.0-1.0)), p_o36272_rotate*0.01745329251*(2.0*(dot((o36273_0_1_rgba).rgb, vec3(1.0))/3.0)-1.0), vec2(p_o36272_scale_x*(2.0*1.0-1.0), p_o36272_scale_y*(2.0*1.0-1.0)), false))-vec2(0.5)))))-vec2(p_o36271_translate_x, (-iTime*0.2))), vec2(p_o36257_scale_x, p_o36257_scale_y), int(p_o36257_iterations), p_o36257_persistence, seed_o36257);\nfloat o36257_0_3_f = perlin((transform(((vec2(fract(p_o36268_repeat*atan((transform((UV), vec2(p_o36272_translate_x*(2.0*1.0-1.0), p_o36272_translate_y*(2.0*1.0-1.0)), p_o36272_rotate*0.01745329251*(2.0*(dot((o36273_0_1_rgba).rgb, vec3(1.0))/3.0)-1.0), vec2(p_o36272_scale_x*(2.0*1.0-1.0), p_o36272_scale_y*(2.0*1.0-1.0)), false)).y-0.5, (transform((UV), vec2(p_o36272_translate_x*(2.0*1.0-1.0), p_o36272_translate_y*(2.0*1.0-1.0)), p_o36272_rotate*0.01745329251*(2.0*(dot((o36273_0_1_rgba).rgb, vec3(1.0))/3.0)-1.0), vec2(p_o36272_scale_x*(2.0*1.0-1.0), p_o36272_scale_y*(2.0*1.0-1.0)), false)).x-0.5)*0.15915494309), min(0.99999, 2.0/p_o36268_radius*length((transform((UV), vec2(p_o36272_translate_x*(2.0*1.0-1.0), p_o36272_translate_y*(2.0*1.0-1.0)), p_o36272_rotate*0.01745329251*(2.0*(dot((o36273_0_1_rgba).rgb, vec3(1.0))/3.0)-1.0), vec2(p_o36272_scale_x*(2.0*1.0-1.0), p_o36272_scale_y*(2.0*1.0-1.0)), false))-vec2(0.5)))))-vec2(p_o36271_translate_x, (-iTime*0.2))), vec2(p_o36256_translate_x*(2.0*o36257_0_1_f-1.0), p_o36256_translate_y*(2.0*o36257_0_1_f-1.0)), p_o36256_rotate*0.01745329251*(2.0*1.0-1.0), vec2(p_o36256_scale_x*(2.0*1.0-1.0), p_o36256_scale_y*(2.0*1.0-1.0)), true)), vec2(p_o36257_scale_x, p_o36257_scale_y), int(p_o36257_iterations), p_o36257_persistence, seed_o36257);\nvec4 o36256_0_1_rgba = vec4(vec3(o36257_0_3_f), 1.0);\nvec4 o36271_0_1_rgba = o36256_0_1_rgba;\nfloat o36269_0_1_f = o36269_fbm(((vec2(fract(p_o36268_repeat*atan((transform((UV), vec2(p_o36272_translate_x*(2.0*1.0-1.0), p_o36272_translate_y*(2.0*1.0-1.0)), p_o36272_rotate*0.01745329251*(2.0*(dot((o36273_0_1_rgba).rgb, vec3(1.0))/3.0)-1.0), vec2(p_o36272_scale_x*(2.0*1.0-1.0), p_o36272_scale_y*(2.0*1.0-1.0)), false)).y-0.5, (transform((UV), vec2(p_o36272_translate_x*(2.0*1.0-1.0), p_o36272_translate_y*(2.0*1.0-1.0)), p_o36272_rotate*0.01745329251*(2.0*(dot((o36273_0_1_rgba).rgb, vec3(1.0))/3.0)-1.0), vec2(p_o36272_scale_x*(2.0*1.0-1.0), p_o36272_scale_y*(2.0*1.0-1.0)), false)).x-0.5)*0.15915494309), min(0.99999, 2.0/p_o36268_radius*length((transform((UV), vec2(p_o36272_translate_x*(2.0*1.0-1.0), p_o36272_translate_y*(2.0*1.0-1.0)), p_o36272_rotate*0.01745329251*(2.0*(dot((o36273_0_1_rgba).rgb, vec3(1.0))/3.0)-1.0), vec2(p_o36272_scale_x*(2.0*1.0-1.0), p_o36272_scale_y*(2.0*1.0-1.0)), false))-vec2(0.5)))))-vec2(p_o36286_translate_x, (-iTime*0.1))), vec2(p_o36269_scale_x, p_o36269_scale_y), int(p_o36269_iterations), p_o36269_persistence, float(seed_o36269));\nvec4 o36286_0_1_rgba = vec4(vec3(o36269_0_1_f), 1.0);\nvec4 o36270_0_s1 = o36271_0_1_rgba;\nvec4 o36270_0_s2 = o36286_0_1_rgba;\nfloat o36270_0_a = (sin(iTime)*0.25+0.25)*1.0;\nvec4 o36270_0_2_rgba = vec4(blend_normal((vec2(fract(p_o36268_repeat*atan((transform((UV), vec2(p_o36272_translate_x*(2.0*1.0-1.0), p_o36272_translate_y*(2.0*1.0-1.0)), p_o36272_rotate*0.01745329251*(2.0*(dot((o36273_0_1_rgba).rgb, vec3(1.0))/3.0)-1.0), vec2(p_o36272_scale_x*(2.0*1.0-1.0), p_o36272_scale_y*(2.0*1.0-1.0)), false)).y-0.5, (transform((UV), vec2(p_o36272_translate_x*(2.0*1.0-1.0), p_o36272_translate_y*(2.0*1.0-1.0)), p_o36272_rotate*0.01745329251*(2.0*(dot((o36273_0_1_rgba).rgb, vec3(1.0))/3.0)-1.0), vec2(p_o36272_scale_x*(2.0*1.0-1.0), p_o36272_scale_y*(2.0*1.0-1.0)), false)).x-0.5)*0.15915494309), min(0.99999, 2.0/p_o36268_radius*length((transform((UV), vec2(p_o36272_translate_x*(2.0*1.0-1.0), p_o36272_translate_y*(2.0*1.0-1.0)), p_o36272_rotate*0.01745329251*(2.0*(dot((o36273_0_1_rgba).rgb, vec3(1.0))/3.0)-1.0), vec2(p_o36272_scale_x*(2.0*1.0-1.0), p_o36272_scale_y*(2.0*1.0-1.0)), false))-vec2(0.5))))), o36270_0_s1.rgb, o36270_0_s2.rgb, o36270_0_a*o36270_0_s1.a), min(1.0, o36270_0_s2.a+o36270_0_a*o36270_0_s1.a));\nvec4 o36268_0_1_rgba = o36270_0_2_rgba;\nvec4 o36272_0_1_rgba = o36268_0_1_rgba;\nvec4 o36288_0_0_rgba = o36288_gradient_gradient_fct((dot((o36272_0_1_rgba).rgb, vec3(1.0))/3.0));\nfloat o36301_0_0_f = o36288_0_0_rgba.r;\nfloat o36301_1_2_f = o36288_0_0_rgba.g;\nfloat o36301_2_3_f = o36288_0_0_rgba.b;\nfloat o36305_0_1_f = o36305_fbm(((vec2(fract(p_o36303_repeat*atan((UV).y-0.5, (UV).x-0.5)*0.15915494309), min(0.99999, 2.0/p_o36303_radius*length((UV)-vec2(0.5)))))-vec2(p_o36304_translate_x, (-iTime*0.05))), vec2(p_o36305_scale_x, p_o36305_scale_y), int(p_o36305_iterations), p_o36305_persistence, float(seed_o36305));\nvec4 o36304_0_1_rgba = vec4(vec3(o36305_0_1_f), 1.0);\nvec4 o36303_0_1_rgba = o36304_0_1_rgba;\nfloat o36287_0_1_f = shape_circle((UV), p_o36287_sides, p_o36287_radius*1.0, p_o36287_edge*(dot((o36303_0_1_rgba).rgb, vec3(1.0))/3.0));\nvec4 o36308_0_0_rgba = o36308_gradient_gradient_fct(o36287_0_1_f);\nvec4 o36302_0_0_rgba = vec4(o36301_0_0_f, o36301_1_2_f, o36301_2_3_f, (dot((o36308_0_0_rgba).rgb, vec3(1.0))/3.0));\nfloat o303116_0_1_f = o303116_f((UV));\nvec4 o36306_0_s1 = o36302_0_0_rgba;\nvec4 o36306_0_s2 = vec4(vec3(o303116_0_1_f), 1.0);\nfloat o36306_0_a = p_o36306_amount*1.0;\nvec4 o36306_0_2_rgba = vec4(blend_normal((UV), o36306_0_s1.rgb, o36306_0_s2.rgb, o36306_0_a*o36306_0_s1.a), min(1.0, o36306_0_s2.a+o36306_0_a*o36306_0_s1.a));\nfragColor = o36306_0_2_rgba;\n}\n","name":"Image","description":"","type":"image"}]}