{"ver":"0.1","info":{"id":"mtXXRs","date":"1675231771","viewed":110,"name":"2D Triangle Properties","username":"iradicator","description":"Shows inscribed and circumcenter circles as well as angle and perpendicular bisectors with their respective intersection points with the triangle.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["2d","math","triangle","circle","animated","geometry","circumcircle","circumcenter","perp","bisectors","properties","inscribedcircle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"////////////////////////////////////////////////////////////////////////////////////////////\n// 2D Triangle Propoerties (Legend):                                                      //\n// Yellow - center of mass                                                                //\n// Green - angle bisectors                                                                //\n// Purple - inscribed circle                                                              //\n// Red - perpendicular bisectors                                                          //\n// Blue - circumcenter                                                                    //\n// Gold - \"mixed\" center (circumcircle which its center forced to be inside the triangle) //\n//                                                                                        //\n// 3D version: https://www.shadertoy.com/view/ctXSDB                                      //\n////////////////////////////////////////////////////////////////////////////////////////////\n\n/////////\n// SDF //\n/////////\n\n// REF: https://iquilezles.org/articles/distfunctions2d/\nfloat sdSegment(vec2 p, vec2 a, vec2 b)\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\nfloat sdCircle(vec2 p, float r)\n{\n    return length(p) - r;\n}\n\n///////////\n// Utils //\n///////////\n\n#define sqr(x) ((x)*(x))\n#define mag(x) (length(x))\n#define sqrMag(x) (dot((x),(x)))\n\n#define fwidthFine(v) (length(vec2(dFdx(v),dFdy(v))))\nvec3 mixnoaasdf(vec3 fg, float th, float d) { return (1.0-step(th,d))*fg; }\nvec3 mixaasdf(vec3 fg, float th, float d) { return (1.0-smoothstep(fwidthFine(d),th,d))*fg; }\n\n//////////\n// Geom //\n//////////\n\nfloat cross2(vec2 a, vec2 b) { return a.x*b.y-a.y*b.x; }\nvec2 perp(vec2 v) { return vec2(-v.y,v.x); }\n\n// line <-> line intersection\nvec2 intersect(vec2 a1, vec2 m1, vec2 a2, vec2 m2)\n{\n#if 0\n    float t1 = -cross2(a1-a2,m2)/cross2(m1,m2);\n    return a1+m1*t1;\n#else\n    float t2 = cross2(a1-a2,m1)/cross2(m2,m1);\n    return a2+m2*t2;\n#endif\n}\n\n// point <-> line intersection of the \"shortest distance\" (perpendicular)\nvec2 shortest_intersect(vec2 p, vec2 a, vec2 m)\n{\n    float t = dot(p-a,m)/dot(m,m);\n    return a+m*t;\n}\n\nvec2 tri_centermass(vec2 p0, vec2 p1, vec2 p2)\n{\n    return (p0+p1+p2)/3.0;\n}\n\n// REF: https://www.cuemath.com/geometry/incenter/\nvec3 tri_inscribed_circle(vec2 p0, vec2 p1, vec2 p2, out vec2 q0, out vec2 q1, out vec2 q2)\n{\n    vec2 a0 = normalize(p1-p0)+normalize(p2-p0);\n    vec2 a1 = normalize(p0-p1)+normalize(p2-p1);\n    vec2 a2 = normalize(p0-p2)+normalize(p1-p2);    \n\n    vec2 pc = intersect(p0,a0,p2,a2); // == intersect(pi,ai,pj,aj) for i != j        \n    q0 = shortest_intersect(pc,p1,p2-p1);\n    q1 = shortest_intersect(pc,p0,p2-p0);\n    q2 = shortest_intersect(pc,p0,p1-p0);\n    float r = mag(pc-q0); // == mag(pc-qi) for i\n    \n    return vec3(pc,r);\n}\n\n// REF: https://www.cuemath.com/geometry/circumcenter/\nvec3 tri_circum_circle(vec2 p0, vec2 p1, vec2 p2)\n{\n    vec2 p10 = (p1+p0)/2.0;\n    vec2 m10 = perp(p1-p0);\n    vec2 p21 = (p2+p1)/2.0;\n    vec2 m21 = perp(p2-p1);\n    vec2 p02 = (p0+p2)/2.0;\n    vec2 m02 = perp(p0-p2);\n    \n    vec2 pc = intersect(p10,m10,p02,m02); // == intersect(pij,mij,plk,mlk) for i != l and j != k    \n    float r = mag(pc-p0); // == mag(pc-pi) for i\n    return vec3(pc,r);\n}\n\nvec3 tri_mixed_circle(vec2 p0, vec2 p1, vec2 p2)\n{\n    if (dot(p1-p0,p2-p0) < 0.0)\n        return 0.5*vec3(p1+p2,mag(p1-p2));\n    if (dot(p0-p1,p2-p1) < 0.0)\n        return 0.5*vec3(p0+p2,mag(p0-p2));\n    if (dot(p0-p2,p1-p2) < 0.0)\n        return 0.5*vec3(p0+p1,mag(p0-p1));\n    return tri_circum_circle(p0,p1,p2);\n}\n\nvoid tri_angle_bisectors(vec2 p0, vec2 p1, vec2 p2, out vec2 q0, out vec2 q1, out vec2 q2)\n{\n    vec2 a0 = normalize(p1-p0)+normalize(p2-p0);\n    vec2 a1 = normalize(p0-p1)+normalize(p2-p1);\n    vec2 a2 = normalize(p0-p2)+normalize(p1-p2);\n    \n    q0 = intersect(p0,a0,p1,p2-p1);\n    q1 = intersect(p1,a1,p0,p2-p0);\n    q2 = intersect(p2,a2,p0,p1-p0);    \n}\n\nvoid tri_perpendicular_bisectors(vec2 p0, vec2 p1, vec2 p2, out vec2 q0, out vec2 q1, out vec2 q2)\n{\n    q0 = (p2+p1)/2.0;\n    q1 = (p0+p2)/2.0;\n    q2 = (p1+p0)/2.0;\n}\n\n//////////\n// Main //\n//////////\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    float aspect = iResolution.x/iResolution.y;\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = 2.0*uv-1.0;\n    uv.x *= aspect;\n    \n    vec2 p0 = vec2(aspect*sin(0.1273*iTime),cos(0.4128*iTime));\n    vec2 p1 = vec2(aspect*sin(0.7953*iTime),cos(0.6295*iTime));\n    vec2 p2 = vec2(aspect*sin(0.5112*iTime),cos(0.9815*iTime));\n    \n#if 0 // force right triangle\n    p0 = vec2(-0.5,-0.5);\n    p1 = vec2(+0.5,-0.5);\n    p2 = vec2(-0.5,+0.5);\n#elif 0 // force equilateral triangle\n    p0 = vec2(-0.5,-0.5);\n    p1 = vec2(+0.5,-0.5);\n    p2 = vec2( 0.0,-0.5+sqrt(3.0/4.0));\n#elif 0 // force obtuse isosceles triangle\n    p0 = vec2(-1.5,-0.5);\n    p1 = vec2(+1.5,-0.5);\n    p2 = vec2( 0.0, 0.0);\n#endif\n\n    float timer = 68.0 * fract(iTime / 68.0);\n\n    float tAngleBisectors = smoothstep(3.0, 10.0, timer) - smoothstep(18.0, 28.0, timer);\n    float tInscribedCircle = smoothstep(12.0, 17.0, timer) - smoothstep(30.0, 35.0, timer);\n    float tInscribedIntersection = smoothstep(22.0, 26.0, timer) - smoothstep(33.0, 35.0, timer);\n    float tPerpendicularBisectors = smoothstep(39.0, 42.0, timer) - smoothstep(43.0, 60.0, timer);\n    float tCircumCircle = smoothstep(42.0, 45.0, timer) - smoothstep(59.0, 67.0, timer);\n    float tMixedCircle = smoothstep(52.0, 57.0, timer) - smoothstep(59.0, 67.0, timer);\n    \n#if 0 // force showing all inscribed circle realted properties\n    tAngleBisectors = 1.0;\n    tInscribedCircle = 1.0;\n    tInscribedIntersection = 1.0;\n    tPerpendicularBisectors = 0.0;\n    tCircumCircle = 0.0;\n    tMixedCircle = 0.0;\n#endif\n#if 0 // force showing all cirumcircle realted properties\n    tAngleBisectors = 0.0;\n    tInscribedCircle = 0.0;\n    tInscribedIntersection = 0.0;\n    tPerpendicularBisectors = 1.0;\n    tCircumCircle = 1.0;\n    tMixedCircle = 1.0;\n#endif\n\n    vec3 col = sqr(vec3(0.05,0.06,0.03));\n\n    // draw triangle's edges\n    col += mixaasdf(vec3(0.8,0.72,0.63),0.012,sdSegment(uv, p0, p1));\n    col += mixaasdf(vec3(0.8,0.72,0.63),0.012,sdSegment(uv, p1, p2));\n    col += mixaasdf(vec3(0.8,0.72,0.63),0.012,sdSegment(uv, p2, p0));\n\n    // draw triangle's center of mass\n    col += mixaasdf(vec3(0.58,0.52,0.14),0.036,mag(uv-tri_centermass(p0,p1,p2)));\n\n    // draw traingle's angle bisector\n    vec2 a0,a1,a2;\n    tri_angle_bisectors(p0,p1,p2,a0,a1,a2);\n    col += tAngleBisectors*mixaasdf(vec3(0.23,0.63,0.44),0.05,mag(uv-a0));\n    col += tAngleBisectors*mixaasdf(vec3(0.23,0.63,0.44),0.008,sdSegment(uv, p0, a0));\n    col += tAngleBisectors*mixaasdf(vec3(0.23,0.63,0.44),0.05,mag(uv-a1));\n    col += tAngleBisectors*mixaasdf(vec3(0.23,0.63,0.44),0.008,sdSegment(uv, p1, a1));\n    col += tAngleBisectors*mixaasdf(vec3(0.23,0.63,0.44),0.05,mag(uv-a2));\n    col += tAngleBisectors*mixaasdf(vec3(0.23,0.63,0.44),0.008,sdSegment(uv, p2, a2));\n\n    // draw triangle's incenter and its inscribed circle\n    vec2 q0,q1,q2;\n    vec3 insribedCircle = tri_inscribed_circle(p0,p1,p2,q0,q1,q2);\n    col += tInscribedCircle*mixaasdf(vec3(0.48,0.12,0.83),0.020,mag(uv-insribedCircle.xy));\n    col += tInscribedCircle*mixaasdf(vec3(0.48,0.12,0.83),0.015,abs(sdCircle(uv-insribedCircle.xy,insribedCircle.z)));\n    \n    col += tInscribedIntersection*mixaasdf(vec3(0.58,0.22,0.93),0.05,mag(uv-q0));\n    col += tInscribedIntersection*mixaasdf(vec3(0.58,0.22,0.93),0.05,mag(uv-q1));\n    col += tInscribedIntersection*mixaasdf(vec3(0.58,0.22,0.93),0.05,mag(uv-q2));\n\n    // draw triangle's circumcenter and its cirumcircle\n    vec3 circumCircle = tri_circum_circle(p0,p1,p2);\n    col += tCircumCircle*mixaasdf(vec3(0.14,0.23,0.87),0.020,mag(uv-circumCircle.xy));\n    col += tCircumCircle*mixaasdf(vec3(0.14,0.23,0.87),0.015,abs(sdCircle(uv-circumCircle.xy,circumCircle.z)));\n\n    // draw trinagle's mixed circle (circumcenter whose center \"forced\" to be inside the triangle)\n    vec3 mixedCircle = tri_mixed_circle(p0,p1,p2);\n    if (mag(mixedCircle - circumCircle) > 0.0)\n    {\n        col += tMixedCircle*mixaasdf(vec3(0.97,0.36,0.11),0.020,mag(uv-mixedCircle.xy));\n        col += tMixedCircle*mixaasdf(vec3(0.97,0.36,0.11),0.015,abs(sdCircle(uv-mixedCircle.xy,mixedCircle.z)));\n    }\n\n    // draw triangle's perpendicular bisectors\n    vec2 g0,g1,g2;\n    tri_perpendicular_bisectors(p0,p1,p2,g0,g1,g2);\n    col += tPerpendicularBisectors*mixaasdf(vec3(0.98,0.03,0.08),0.05,mag(uv-g0));\n    col += tPerpendicularBisectors*mixaasdf(vec3(0.88,0.03,0.08),0.008,sdSegment(uv, g0, circumCircle.xy));\n    col += tPerpendicularBisectors*mixaasdf(vec3(0.98,0.03,0.08),0.05,mag(uv-g1));\n    col += tPerpendicularBisectors*mixaasdf(vec3(0.88,0.03,0.08),0.008,sdSegment(uv, g1, circumCircle.xy));\n    col += tPerpendicularBisectors*mixaasdf(vec3(0.98,0.03,0.08),0.05,mag(uv-g2));\n    col += tPerpendicularBisectors*mixaasdf(vec3(0.88,0.03,0.08),0.008,sdSegment(uv, g2, circumCircle.xy));\n                       \n    col = pow(col/(col+vec3(1.0)),vec3(1.0/2.2));\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}