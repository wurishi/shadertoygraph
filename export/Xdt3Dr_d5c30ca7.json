{"ver":"0.1","info":{"id":"Xdt3Dr","date":"1449074330","viewed":910,"name":"Palettization + OrderedDithering","username":"104","description":"Reducing image to fixed C64 palette, plus bayer 8x8 dithering. Webcam is fun on this one.","likes":26,"published":1,"flags":0,"usePreview":0,"tags":["palette","dithering","bayer","ordered"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xdf3zn","filepath":"/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","previewfilepath":"/media/ap/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","type":"texture","channel":1,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"const float ResolutionDivisor = 4.;\n\n\n//----------------------------------------------------------------------------\n\nfloat bayer8x8(vec2 uvScreenSpace)\n{\n    return texture(iChannel1, uvScreenSpace/(ResolutionDivisor*8.)).r;\n}\n\n\n//----------------------------------------------------------------------------\n// c64 palette\nvec3 color0 = vec3(0,0,0);// black\nvec3 color1 = vec3(1,1,1);// white\nvec3 color2 = vec3(0.41,0.22,0.17);// red\nvec3 color3 = vec3(0.44,0.64,0.70);// cyan\nvec3 color4 = vec3(0.44,0.24,0.53);// violet\nvec3 color5 = vec3(0.35,0.55,0.26);// green\nvec3 color6 = vec3(0.21,0.16,0.47);// blue\nvec3 color7 = vec3(0.72,0.78,0.44);// yellow\nvec3 color8 = vec3(0.44,0.31,0.15);// orange\nvec3 color9 = vec3(0.26,0.22,0);// brown\nvec3 colorA = vec3(0.60,0.40,0.35);// light red\nvec3 colorB = vec3(0.27,0.27,0.27);// grey1\nvec3 colorC = vec3(0.42,0.42,0.42);// grey2\nvec3 colorD = vec3(0.60,0.82,0.52);// light green\nvec3 colorE = vec3(0.42,0.37,0.71);// light blue\nvec3 colorF = vec3(0.58,0.58,0.58);// grey3\n\nvec3 selectIfCloser (in vec3 idealColor, in vec3 paletteColor, in vec3 bestColorSoFar, inout float currentDistance) \n{\n    float thisDistance = distance(idealColor, paletteColor);\n    if(thisDistance < currentDistance)\n    {\n        currentDistance = thisDistance;\n        return paletteColor;\n    }\n    return bestColorSoFar;\n}\n\n// a more optimized version of this could do something like a binary search\n// or order by luminocity and short-circuit search that way.\nvec3 palettize(vec3 idealColor)\n{\n    // init with first palette color\n\tfloat dmin = distance(idealColor, color0);\n    vec3 closest = color0;\n\n    closest = selectIfCloser(idealColor, color1, closest, dmin);\n    closest = selectIfCloser(idealColor, color2, closest, dmin);\n    closest = selectIfCloser(idealColor, color3, closest, dmin);\n    closest = selectIfCloser(idealColor, color4, closest, dmin);\n    closest = selectIfCloser(idealColor, color5, closest, dmin);\n    closest = selectIfCloser(idealColor, color6, closest, dmin);\n    closest = selectIfCloser(idealColor, color7, closest, dmin);\n    closest = selectIfCloser(idealColor, color8, closest, dmin);\n    closest = selectIfCloser(idealColor, color9, closest, dmin);\n    closest = selectIfCloser(idealColor, colorA, closest, dmin);\n    closest = selectIfCloser(idealColor, colorB, closest, dmin);\n    closest = selectIfCloser(idealColor, colorC, closest, dmin);\n    closest = selectIfCloser(idealColor, colorD, closest, dmin);\n    closest = selectIfCloser(idealColor, colorE, closest, dmin);\n    closest = selectIfCloser(idealColor, colorF, closest, dmin);\n    return closest;\n}\n\nvec3 getSceneColor(in vec2 uv )\n{\n    return texture(iChannel0, uv).rgb;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;// 0-1\n    \n    // space between values of the dest palette\n    vec3 quantizationPeriod = vec3(1./16.);\n    \n\tvec2 uvPixellated = floor(fragCoord / ResolutionDivisor)*ResolutionDivisor;\n    \n    // original color panel---------------------\n    vec3 originalCol = getSceneColor(uv);\n    \n    // dithered panel---------------------\n    vec3 dc = getSceneColor(uvPixellated / iResolution.xy);\n\tdc += (bayer8x8(fragCoord)-.5)*(quantizationPeriod);\n\n    dc = palettize(dc);\n\n    fragColor = vec4(dc, 1);\n}\n\n\n\n\n\n","name":"","description":"","type":"image"}]}