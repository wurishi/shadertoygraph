{"ver":"0.1","info":{"id":"MdyGWG","date":"1456109546","viewed":1752,"name":"Another Pinball","username":"eiffie","description":"Credit to the original by public_int_i [url]https://www.shadertoy.com/view/MdyGDz[/url]\nI made another just cause I wanted to play it. (arrows, space bar to restart)","likes":34,"published":3,"flags":48,"usePreview":0,"tags":["game","pinball"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//another pinball by eiffie (i just wanted to play it)\n//all credit to the original by public_int_i https://www.shadertoy.com/view/MdyGDz\n//this isn't his code - i started from scratch thinking it would be easy ... wasn't\n\n#define RADIUS 0.075\n#define PI 3.14159\n\n#define inside(a) (fragCoord.y-a.y == 0.5 && (fract(a.x) == 0.1 || fragCoord.x-a.x == 0.5))\n#define load(a) texture(iChannel0,(vec2(a,0.0)+0.5)/iResolution.xy)\n#define save(a,b) if(inside(vec2(a,0.0))){fragColor=b;return;}\n\nfloat Paddle(vec2 pa, vec2 ba){\n\tfloat t=clamp(dot(pa,ba)/dot(ba,ba),0.0,1.0);\n\treturn length(pa-ba*t)+t*0.01;\n}\nfloat Tube(vec2 pa, vec2 ba){return length(pa-ba*clamp(dot(pa,ba)/dot(ba,ba),0.0,1.0));}\n\nvec2 pdl,pdr,bp;\nfloat mld=100.0;\nfloat DE2(in vec2 p){//2d version\n\tfloat y=p.y*0.12;\n\tfloat dP=min(Paddle(p-vec2(-0.5,-1.0),pdl),Paddle(p-vec2(0.5,-1.0),pdr));\n\tp.x=abs(p.x);\n\tfloat d=min(max(p.x-1.0,abs(p.y)-1.55),length(p-vec2(0.0,1.5))-1.0);\n\tp.y=abs(p.y);\n\td=min(abs(d),Tube(p-vec2(0.47-y,0.95),vec2(0.32,-0.12)));\n\tp.y=abs(p.y-1.0);\n\td=min(d,Tube(p-vec2(0.26,1.0),vec2(0.15,-0.14)));\n\tfloat dB=length(p-vec2(0.74-y,0.79));\n\tmld=min(mld,dB);\n\td=min(min(d,dB),dP);\n\td-=0.05;\n\treturn d;\n}\nvec3 Color(in vec3 p0){\n\tvec2 p=p0.xz;\n\tfloat y=p.y*0.12;\n\tfloat dP=min(Paddle(p-vec2(-0.5,-1.0),pdl),Paddle(p-vec2(0.5,-1.0),pdr));\n\tp.x=abs(p.x);\n    float r=length(p-vec2(0.0,1.5))-1.0;\n\tfloat d=min(max(p.x-1.0,abs(p.y)-1.55),r);\n\tp.y=abs(p.y);\n\td=min(abs(d),Tube(p-vec2(0.47-y,0.95),vec2(0.32,-0.12)));\n\tp.y=abs(p.y-1.0);\n\td=min(d,Tube(p-vec2(0.26,1.0),vec2(0.15,-0.14)));\n\tfloat dB=length(p-vec2(0.74-y,0.79));\n\tif(dP<d && dP<dB)return vec3(1.0,0.9,0.8);\n\tvec3 col=vec3(0.5);\n\tif(dB<d){\n\t\tcol+=0.4*sin(p0.zxx*9.0)+sin(p0.y*150.0)*0.1;\n\t}else {\n\t\tif(p0.y>1.0)col=vec3(0.4,0.6,0.7);\n\t\tif(p0.y<-0.5)col=vec3(0.7,0.6,0.5);\n\t\tif(p0.y>0.4)col.b+=0.3;\n        vec3 h=fract(p0*20.0)-0.5;\n        col+=vec3((h.x*h.z+h.y)*0.1+p0.y*2.0)+smoothstep(0.05,0.04,abs(p0.y))*0.3;\n        col=mix(col,vec3(1.0),smoothstep(0.0,0.005,max(p.x-0.95,min(p0.z-1.5,r+0.05))));\n\t}\n\treturn col+sin(p0.xyy*3.0)*0.1;\n}\nfloat RoundedIntersection(float a, float b, float r) {//modified from Mercury SDF http://mercury.sexy/hg_sdf/\n\treturn max(max(a,b),length(max(vec2(0.0),vec2(r+a,r+b)))-r);\n}\nfloat DE(in vec3 p){//another pinball\n\treturn RoundedIntersection(DE2(p.xz),p.y-RADIUS,0.02);\n}\nfloat Sphere( in vec3 ro, in vec3 rd, in vec3 p, in float r)\n{//intersect a sphere - based on iq's\n\tfloat t=100.0;\n\tp=ro-p;\n\tfloat b=dot(p,rd);\n\tfloat h=b*b-dot(p,p)+r*r;\n\tif(h>=0.0){\n\t\tfloat t=-b-sqrt(h);\n\t\tif(t>0.0)return t;\n\t}\t\n\treturn 10.0;\n}\n\nvec2 rotate(vec2 v, float angle) {return cos(angle)*v+sin(angle)*vec2(v.y,-v.x);}\nvec3 faketexture(sampler2D s,vec2 p){\n\tp.x*=106.0;p.y*=150.0;\n\treturn vec3(0.7,0.6,0.5)*(0.9+0.1*(sin(p.x+sin(p.y))+sin(p.y+sin(p.x))));\n}\nvec4 st2;\nvec3 scene(vec3 ro, vec3 rd){\n\tfloat maxt=(-RADIUS+0.005-ro.y)/rd.y;\n\tfloat tball=Sphere(ro,rd,vec3(bp.x,0.0,bp.y),RADIUS);\n\tfloat t=(RADIUS+0.005-ro.y)/rd.y,d,od=1.0;\n\tfor(int i=0;i<24;i++){\n\t\tt+=d=DE(ro+rd*t);\n\t\tif(d<0.001 || t>maxt)break;\n\t\tod=d;\n\t}\n\tvec3 col=vec3(0.0);\n\tvec2 p=ro.xz+rd.xz*maxt;\n\tfloat d2=min(max(abs(p.x)-1.0,abs(p.y)-1.55),length(p-vec2(0.0,1.5))-1.0);\n\tif(d2<0.0){\n\t\tvec3 P=ro+rd*maxt+vec3(-0.03,0.0,0.03);\n\t\td2=DE(P);\n\t\td2=min(d2,length(P-vec3(bp.x,-RADIUS+0.005,bp.y)));\n\t\td2=smoothstep(0.0,0.1,d2);\n\t\tcol=texture(iChannel1,p.yx).rgb*(0.7+0.3*d2)+abs(sin(floor(p.x*20.0)))*0.2*d2;\n\t}\n\tif(d<0.01){\n\t\tfloat dif=clamp(1.0-d/od,0.6,1.0);\n\t\tcol=mix(Color(ro+rd*t)*dif,col,smoothstep(0.0,0.01,d));\n\t}\n\tif(tball<t){\n\t\tt=tball;\n\t\tvec3 N=normalize(ro+rd*tball-vec3(bp.x,0.0,bp.y));\n\t\td=dot(N,-rd);\n\t\tfloat dif=max(0.0,d);\n\t\tcol=mix(col,vec3(1.0,1.0,0.7)*dif,smoothstep(0.0,0.56,d));\n\t}\n\tif(st2.x>0.0){\n\t\tcol+=st2.x*vec3(1.0)/(0.5+1000.0*mld*mld);\n\t}\n\treturn col;\n}\n\nfloat segment(vec2 uv){//from Andre https://www.shadertoy.com/view/Xsy3zG\n\tuv = abs(uv);return (1.0-smoothstep(0.0,0.28,uv.x)) * (1.0-smoothstep(0.4-0.14,0.4+0.14,uv.y+uv.x));\n}\nfloat sevenSegment(vec2 uv,int num){\n\tuv=(uv-0.5)*vec2(1.5,2.2);\n\tfloat seg=0.0;if(num>=2 && num!=7 || num==-2)seg+=segment(uv.yx);\n\tif (num==0 || (uv.y<0.?((num==2)==(uv.x<0.) || num==6 || num==8):(uv.x>0.?(num!=5 && num!=6):(num>=4 && num!=7) )))seg += segment(abs(uv)-0.5); \n\tif (num>=0 && num!=1 && num!=4 && (num!=7 || uv.y>0.))seg += segment(vec2(abs(uv.y)-1.0,uv.x)); \n\treturn seg;\n}\n//prints a \"num\" filling the \"rect\" with \"spaces\" # of digits including minus sign\nfloat formatInt(vec2 uv, vec2 rect, float num, int spaces){//only good up to 6 spaces!\n\tuv/=rect;if(uv.x<0.0 || uv.y<0.0 || uv.x>1.0 || uv.y>1.0)return 0.0;\n\tuv.x*=float(spaces);\n\tfloat place=floor(uv.x);\n\tfloat decpnt=floor(max(log(num)/log(10.0),0.0));//how many digits before the decimal place\n\tuv.x=fract(uv.x);\n\tnum+=0.000001*pow(10.,decpnt);\n\tnum /= pow(10.,float(spaces)-place-1.0);\n\tnum = mod(floor(num),10.0);\n\treturn sevenSegment(uv,int(num));\n}\n\nmat3 lookat(vec3 fw){\n\tfw=normalize(fw);vec3 rt=normalize(cross(fw,vec3(0.0,1.0,0.0)));return mat3(rt,cross(rt,fw),fw);\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n\tvec4 st0=load(0),st1=load(1);\n\tst2=load(2);\n\tbp=st1.xy;\n\tpdl=rotate(vec2(0.33,0.0),st0.x);pdr=rotate(vec2(-0.33,0.0),st0.y);\n\tvec3 ro=vec3(0.0,2.5,-2.5);\n\tvec3 rd=vec3((fragCoord-0.5*iResolution.xy)/iResolution.x,1.0);\n\trd=lookat(vec3(st0.z*0.05,0.0,st0.w*0.2)-ro)*normalize(rd);\n\tfragColor=vec4(scene(ro,rd),1.0);\n\tvec2 uv=fragCoord/iResolution.xy;\n\tfloat d=formatInt(uv-vec2(0.1,0.9), vec2(0.1,0.05), floor(st2.y), 5);\n\td+=formatInt(uv-vec2(0.85,0.9),vec2(0.02,0.05), floor(st2.z)+1.0, 1);\n\tfragColor=mix(fragColor,vec4(1.0,0.0,0.0,1.0),d);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//The \"physics\" is more complicated then the image! How can one ball bouncing off the surface\n//be harder to mimic than 1000s of photons?\n#define RADIUS 0.075\n#define PI 3.14159\n#define KEY_LEFT 39\n#define KEY_RIGHT 37\n\n#define inside(a) (fragCoord.y-a.y == 0.5 && (fract(a.x) == 0.1 || fragCoord.x-a.x == 0.5))\n#define load(a) texture(iChannel0,(vec2(a,0.0)+0.5)/iResolution.xy)\n#define save(a,b) if(inside(vec2(a,0.0))){fragColor=b;return;}\n\nbool KeyDown(in int key){\n\treturn (texture(iChannel1,vec2((float(key)+0.5)/256.0, 0.25)).x>0.0);\n}\nfloat Paddle(vec2 pa, vec2 ba){\n\tfloat t=clamp(dot(pa,ba)/dot(ba,ba),0.0,1.0);\n\treturn length(pa-ba*t)+t*0.01;\n}\nfloat Tube(vec2 pa, vec2 ba){return length(pa-ba*clamp(dot(pa,ba)/dot(ba,ba),0.0,1.0));}\nvec2 Tube2(vec2 pa, vec2 ba){\n\tfloat t=clamp(dot(pa,ba)/dot(ba,ba),0.0,1.0);\n\treturn vec2(length(pa-ba*t)+t*0.01,t);\n}\n\nvec2 pdl,pdr;\nvec4 st2;\nfloat DEP(in vec2 p, bool bNoFlip){//determine the push from paddles\n\tvec2 dl=Tube2(p-vec2(-0.5,-1.0),pdl)-0.05;\n\tvec2 dr=Tube2(p-vec2(0.5,-1.0),pdr)-0.05;\n\tfloat y=p.y*0.12;\n\tp=abs(p);p.y=abs(p.y-1.0);\n\tfloat dB=length(p-vec2(0.74-y,0.79))-0.05;\n\tif(dB<RADIUS){\n\t\tst2.x=1.0;//light on\n\t\tst2.y+=(y>0.1?50.0:1.0);//points\n\t\treturn 2.0;\n\t}\n\tif(!bNoFlip && min(dl.x,dr.x)<RADIUS){//possible push\n\t\tint key=KEY_RIGHT;\n\t\tif(dl.x<dr.x){\n\t\t\tkey=KEY_LEFT;\n\t\t\tdr=dl;\n\t\t}\n\t\tif(KeyDown(key))return 5.0*dr.y;\n\t}\n\treturn 0.0;\n}\n\nfloat DE(in vec2 p){//2d version\n\tfloat y=p.y*0.12;\n\tfloat dP=min(Paddle(p-vec2(-0.5,-1.0),pdl),Paddle(p-vec2(0.5,-1.0),pdr));\n\tp.x=abs(p.x);\n\tfloat d=min(max(p.x-1.0,abs(p.y)-1.5),length(p-vec2(0.0,1.5))-1.0);\n\tp.y=abs(p.y);\n\td=min(abs(d),Tube(p-vec2(0.47-y,0.95),vec2(0.32,-0.12)));\n\tp.y=abs(p.y-1.0);\n\td=min(d,Tube(p-vec2(0.26,1.0),vec2(0.15,-0.14)));\n\tfloat dB=length(p-vec2(0.74-y,0.79));\n\td=min(min(d,dB),dP);\n\td-=0.05;\n\treturn d;\n}\n\nvec2 rotate(vec2 v, float angle) {return cos(angle)*v+sin(angle)*vec2(v.y,-v.x);}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n\tif(fragCoord.y>1.0 || fragCoord.x>4.0)discard;\n\t//st0=paddle rotation,old ball pos st1=ball position, velocity\n\tvec4 st0=vec4(0.5,-0.5,0.0,0.0),st1=vec4(-0.94+RADIUS,1.0,0.0,0.0);\n    //st3=last time\n    vec4 st3=vec4(iTime-0.02,0.0,0.0,0.0);\n\tif(iFrame==0 || KeyDown(32)){\n\t\tst2=vec4(0.0,0.0,2.0,-1.0);// lightup, score, balls left, new ball\n\t}else{\n\t\tst0=load(0);\n\t\tst1=load(1);\n\t\tst2=load(2);\n        st3=load(3);\n\t}\n\tif(st2.z<0.0)discard;\n\tif(st2.w<0.0){st1=vec4(-0.94+RADIUS,0.0,0.0,2.75+sin(iTime));st2.w=0.0;}\n    float dt=iTime-st3.x;//iTimeDelta;\n\tst2.x=max(0.0,st2.x-3.0*dt);\n#define GRAVITY 1.5\n\tst1.w-=GRAVITY*dt;\n\tvec2 oflp=st0.xy;\n#define FLIPPER_SPEED 3.0\n\tif(KeyDown(KEY_LEFT))st0.x-=FLIPPER_SPEED*dt;\n\telse st0.x+=FLIPPER_SPEED*dt*0.5;\n\tif(KeyDown(KEY_RIGHT))st0.y+=FLIPPER_SPEED*dt;\n\telse st0.y-=FLIPPER_SPEED*dt*0.5;\n\tst0.xy=clamp(st0.xy,vec2(-0.25,-0.5),vec2(0.5,0.25));\n\tbool bNoFlip=(oflp==st0.xy);\n\tfloat t=0.0,d;\n#define ITERS 16\n\tfloat sdt=dt/float(ITERS);\n\tvec2 sflp=(st0.xy-oflp)/float(ITERS);\n\tvec2 v=vec2(RADIUS*0.5,0.0);\n\tfor(int i=0;i<ITERS;i++){//cutting the step into subframes (really important on show machines)\n\t\tpdl=rotate(vec2(0.33,0.0),oflp.x);pdr=rotate(vec2(-0.33,0.0),oflp.y);\n\t\td=DE(st1.xy+st1.zw*t);\n\t\tif(d<RADIUS){//i put this inside the loop so there can be multiple subframe bounces\n\t\t\tst1.xy+=st1.zw*t;\n\t\t\tvec2 N=normalize(vec2(DE(st1.xy+v.xy)-DE(st1.xy-v.xy),DE(st1.xy+v.yx)-DE(st1.xy-v.yx)));\n\t\t\tif(dot(N,st1.zw)<0.0){//if the ball has gone more than half way thru we are screwed\n\t\t\t\tst1.zw=reflect(st1.zw,N)/(1.1+dot(-st1.zw,N)*0.2);\n\t\t\t\tst1.zw+=N*DEP(st1.xy,bNoFlip);\n\t\t\t}\n\t\t\tt=0.0;\n\t\t}\n\t\tt+=sdt;\n\t\toflp+=sflp;\n\t}\n\tst1.xy+=st1.zw*t;\n\tif(st1.y<-1.45+RADIUS*1.1){st2.z-=1.0;st2.w=-1.0;}\n\tst0.zw=st0.zw*0.9+st1.xy*0.1;\n    st3.x=iTime;\n\tsave(0,st0);\n\tsave(1,st1);\n\tsave(2,st2);\n    save(3,st3);\n}","name":"Buf A","description":"","type":"buffer"}]}