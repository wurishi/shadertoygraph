{"ver":"0.1","info":{"id":"lcjXWW","date":"1706366802","viewed":125,"name":"Falling Sand Automataâ€‹","username":"Borusse29","description":"inspired by https://www.youtube.com/watch?v=L4u7Zy_b868","likes":5,"published":1,"flags":32,"usePreview":0,"tags":["2d","automata"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define BACKGROUND_COLOR vec3(.0,.075,.15)\n#define _pi 3.1415926535\n\n// https://iquilezles.org/articles/palettes/\nvec3 radiantGradient(float a) // a in radiants!\n{\n    return vec3(.5) * cos(vec3(a)+2.*_pi*vec3(.0, .33, .67)) + vec3(.5);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 intRes = ivec2(iResolution);\n    ivec2 intFC = ivec2(fragCoord);\n    \n    vec4 prev       = texelFetch(iChannel0, intFC,                       0);\n    vec4 above      = texelFetch(iChannel0, ivec2(intFC.x,   intFC.y+1), 0);\n    vec4 below      = texelFetch(iChannel0, ivec2(intFC.x,   intFC.y-1), 0);\n    vec4 right      = texelFetch(iChannel0, ivec2(intFC.x+1, intFC.y),   0);\n    vec4 left       = texelFetch(iChannel0, ivec2(intFC.x-1, intFC.y),   0);\n    vec4 rightAbove = texelFetch(iChannel0, ivec2(intFC.x+1, intFC.y+1), 0);\n    vec4 leftAbove  = texelFetch(iChannel0, ivec2(intFC.x-1, intFC.y+1), 0);\n    vec4 rightBelow = texelFetch(iChannel0, ivec2(intFC.x+1, intFC.y-1), 0);\n    vec4 leftBelow  = texelFetch(iChannel0, ivec2(intFC.x-1, intFC.y-1), 0);\n    vec4 twoRight   = texelFetch(iChannel0, ivec2(intFC.x+2, intFC.y),   0);\n    \n    vec2 mp = iMouse.xy != vec2(0.) ? iMouse.xy : iResolution.xy/4.+iTime*vec2(20.,5.);\n    if (distance(mp, fragCoord) <= 20. && prev.a == 0.) {\n        fragColor = vec4(radiantGradient(2.*_pi*fract(0.1*iTime)), 1.);\n        return;\n    }\n    \n    fragColor = vec4(BACKGROUND_COLOR, 0.);\n    \n    if (prev.a == 0.) {\n        if (above.a != 0.)\n            fragColor = above;\n        else if (left.a != 0. && leftAbove.a != 0.)\n            fragColor = leftAbove;\n        else if (right.a != 0. && rightAbove.a != 0. && twoRight.a != 0.)\n            fragColor = rightAbove;     \n    }\n    else {\n        if (intFC.y > 0 && intFC.x > 0 && intFC.x < intRes.x-1 && (below.a == 0. || (right.a == 0. && rightBelow.a == 0.) || (left.a == 0. && leftBelow.a == 0.))) {\n            fragColor = vec4(BACKGROUND_COLOR, 0.);\n            return;\n        }\n        \n        fragColor = prev;\n    }\n}\n\n\n// more readable version\n/*void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 intRes = ivec2(iResolution);\n    ivec2 intFC = ivec2(fragCoord);\n    \n    vec4 prev       = texelFetch(iChannel0, intFC,                       0);\n    vec4 above      = texelFetch(iChannel0, ivec2(intFC.x,   intFC.y+1), 0);\n    vec4 below      = texelFetch(iChannel0, ivec2(intFC.x,   intFC.y-1), 0);\n    vec4 right      = texelFetch(iChannel0, ivec2(intFC.x+1, intFC.y),   0);\n    vec4 left       = texelFetch(iChannel0, ivec2(intFC.x-1, intFC.y),   0);\n    vec4 rightAbove = texelFetch(iChannel0, ivec2(intFC.x+1, intFC.y+1), 0);\n    vec4 leftAbove  = texelFetch(iChannel0, ivec2(intFC.x-1, intFC.y+1), 0);\n    vec4 rightBelow = texelFetch(iChannel0, ivec2(intFC.x+1, intFC.y-1), 0);\n    vec4 leftBelow  = texelFetch(iChannel0, ivec2(intFC.x-1, intFC.y-1), 0);\n    vec4 twoRight   = texelFetch(iChannel0, ivec2(intFC.x+2, intFC.y),   0);\n    \n    bool prevFilled       = prev.a       != 0.;\n    bool aboveFilled      = above.a      != 0.;\n    bool belowFilled      = below.a      != 0.;\n    bool rightFilled      = right.a      != 0.;\n    bool leftFilled       = left.a       != 0.;\n    bool rightAboveFilled = rightAbove.a != 0.;\n    bool leftAboveFilled  = leftAbove.a  != 0.;\n    bool rightBelowFilled = rightBelow.a != 0.;\n    bool leftBelowFilled  = leftBelow.a  != 0.;\n    bool twoRightFilled   = twoRight.a   != 0.;\n    \n    vec2 mp = iMouse.xy != vec2(0.) ? iMouse.xy : iResolution.xy/2.+iTime*vec2(20.,5.);\n    if (distance(mp, fragCoord) <= 20. && prev.a == 0.) {\n        fragColor = vec4(radiantGradient(2.*_pi*fract(0.1*iTime)), 1.);\n        return;\n    }\n    \n    fragColor = vec4(BACKGROUND_COLOR, 0.);\n    \n    if (!prevFilled) {\n        if (aboveFilled)\n            fragColor = above;\n        else if (leftFilled && leftAboveFilled)\n            fragColor = leftAbove;\n        else if (rightFilled && rightAboveFilled && twoRightFilled)\n            fragColor = rightAbove;     \n    }\n    else {\n        if (intFC.y > 0 && intFC.x > 0 && intFC.x < intRes.x-1 && (!belowFilled || (!rightFilled && !rightBelowFilled) || (!leftFilled && !leftBelowFilled))) {\n            fragColor = vec4(BACKGROUND_COLOR, 0.);\n            return;\n        }\n        \n        fragColor = prev;\n    }\n}*/","name":"Buffer A","description":"","type":"buffer"}]}