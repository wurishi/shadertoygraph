{"ver":"0.1","info":{"id":"NlKBzG","date":"1664741133","viewed":247,"name":"Artober - Light canon","username":"Flopine","description":"2nd day of Artober, still no prompt XD ","likes":27,"published":1,"flags":32,"usePreview":1,"tags":["raymarching","animation","glow","chromatic","isometric","everyday"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan, slerpy, wwrighter \n// BigWings, FabriceNeyret and Blackle for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  \n// https://twitter.com/CookieDemoparty\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 cent_uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    fragColor = vec4(   texture(iChannel1, uv+cent_uv*0.004).r,\n                        texture(iChannel1, uv).g,\n                        texture(iChannel1, uv-cent_uv*0.008).b,\n                        1.\n                    );\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define hr vec2(1.,sqrt(3.))\n#define circle(uv,s) (length(uv)-s)\n#define AAstep(thre, val) smoothstep(-.7,.7,(val-thre)/min(0.07,fwidth(val-thre)))\n#define noise(p) textureLod(iChannel0,p,1.).x\n\n#define PI acos(-1.)\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n#define crep(p,c,l) p-=c*clamp(round(p/c), -l, l)\n\n#define dt(s,o) fract((iTime+o)*s) \n#define loopanim(s,o) easeInExpo(abs(-1.+2.*dt(s,o)))\n#define anim(s,o) easeInExpo(dt(s,o))\n\nfloat easeInExpo(float x)\n{ return x == 0. ? 0. : exp2(10. * x - 10.); }\n\nvoid mo (inout vec2 p, vec2 d)\n{\n    p=abs(p)-d;\n    if(p.y>p.x) p=p.yx;\n}\n\nfloat truchet (vec2 u)\n{\n    vec2 ga=mod(u, hr)-hr*.5, gb=mod(u-hr*.5, hr)-hr*.5, \n    gu=dot(ga,ga)<dot(gb,gb)?ga:gb, gid=u-gu;\n    if(noise(gid*0.8)<.5) gu.x*=-1.;\n    float s = (gu.x*sqrt(3.) > - gu.y) ? 1. : -1.;\n    float diag = abs(gu.x*sqrt(3.)+gu.y);\n    gu -= vec2(1., 1./sqrt(3.))*s*.5;\n    \n    return abs(circle(gu, sqrt(3.)/6.))*diag;\n}\n\nfloat box (vec3 p, vec3 c)\n{\n    vec3 q = abs(p)-c;\n    return min(0.,max(q.x,max(q.y,q.z)))+length(max(q,0.));\n}\n\nfloat box2d (vec2 p, float c)\n{\n    vec2 q = abs(p)-c;\n    return min(0.,max(q.x,q.y))+length(max(q,0.));\n}\n\nfloat tore (vec3 p, vec3 h)\n{\n    vec2 q = vec2(box2d(p.xy, h.x) ,p.z);\n    return  length(max(abs(q)-h.yz,0.));\n}\n\n// iq's distance function\n// https://iquilezles.org/articles/distfunctions/\nfloat extrude (vec3 p, float d, float h)\n{\n    vec2 w = vec2( d, abs(p.z) - h );\n    return min(max(w.x,w.y),0.0) + length(max(w,0.0));\n}\n\nfloat prim1 (vec3 p)\n{\n    float r = 2.;\n    float b = box(p, vec3(r, 1e10, r))-0.05; \n    \n    mo(p.zx , vec2(r*.98));\n    float size= .8;\n    p *= size;\n    p.y -= iTime;\n    float ts = (extrude(p, truchet(p.xy), 0.15)-0.015)/size;\n    \n    return  min(b,ts);\n}\n\nfloat prim2 (vec3 p)\n{\n    p.y -= 2.;\n    p.x += 5.;\n    float per = 2.;\n    float id = round(p.x/per);\n    crep(p.x, per, 3.);\n    p.yz *= rot(anim(1.2,id*.1)*PI);\n    float t = tore(p.yzx, vec3(2.+loopanim(1.2,id*.1),.5, .2))-0.03;\n    return t;\n}\n\nfloat ground (vec3 p)\n{\n    p.y += 5.;\n    float per = 1.;\n    crep(p.xz,per,22.);\n    \n    return box(p,vec3(0.45));\n}\n\nfloat g1=0.;\nfloat ball (vec3 p)\n{\n    p.y -= 2.;\n    p.x += dt(5.,0.)*10.;\n    float r = sin(p.x*.5);\n    float d = length(p.yz)-r;\n    g1 += 0.1/(0.1+d*d);\n   return d;\n}\n\nfloat SDF (vec3 p)\n{\n    p.yz *= rot(-atan(1./sqrt(2.)));\n    p.xz *= rot(PI/4.);\n    \n    p.xz -= vec2(7., 1.);\n    \n    float g = ground(p);\n    float p2 = prim2(p);\n    float b = ball(p);\n    \n    mo(p.xz, vec2(6.));\n    float scene = min(p2,prim1(p));\n    scene = min(scene, g);\n    scene = min(scene, b);\n    \n    return scene;\n}\n\nvec3 gn (vec3 p)\n{\n    vec2 e = vec2(0.01,0.);\n    return normalize(SDF(p)-vec3(SDF(p-e.xyy),SDF(p-e.yxy),SDF(p-e.yyx)));\n}\n\nfloat ao (vec3 p, vec3 n, float e)\n{return clamp( SDF(p+e*n)/e  , 0., 1. );}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    \n    vec3 ro = vec3(uv*6., -20.),rd=vec3(0.,0.,1.),\n    p=ro, col=vec3(0.), l=normalize(vec3(-1.,-1.5,-2.));\n    \n    bool hit=false;\n    for(float i=0.; i<64.; i++)\n    {\n        float d = SDF(p);\n        if (d<0.001)\n        {\n            hit=true; break;\n        }\n        p += d*rd*.55;\n    }\n\n    if (hit)\n    {\n        vec3 n = gn(p);\n        float li = max(dot(n,l),0.)+.05;\n        float AO = ao(p,n,0.05) + ao(p,n,0.15) + ao(p,n,0.2);\n        col = vec3(li)*(AO/3.);\n    }\n    col += g1;\n    \n    fragColor = vec4(sqrt(col),1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}