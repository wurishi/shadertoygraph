{"ver":"0.1","info":{"id":"lfs3z4","date":"1702836783","viewed":25,"name":"mipt-hw","username":"honoody","description":"1 hw","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["hw"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_ITER 100000\n#define THRES_CLOSE .0001\n#define MAX_TRACE 1000.\n#define FAR_PLANE 510.\n#define NEAR_PLANE 490.\n\nin vec2 fragTexCoord;\nin vec4 fragColor;\n\nvec3 move(vec3 pos, vec3 delta)\n{\n    return pos - delta;\n}\n\nvec4 sdExpand(vec4 sd, float val)\n{\n    return vec4(sd.xyz, sd.w - val);\n}\n\nvec4 sdUnion(vec4 sd1, vec4 sd2)\n{\n    float weight = step(sd1.w, sd2.w);\n    float len = min(sd1.w, sd2.w);\n    vec3 nrm = sd1.xyz * weight + sd2.xyz * (1.-weight);\n    return vec4(nrm, len);\n}\n\nvec4 sdIntersect(vec4 sd1, vec4 sd2)\n{\n    float weight = step(sd2.w, sd1.w);\n    float len = max(sd1.w, sd2.w);\n    vec3 nrm = sd1.xyz * weight + sd2.xyz * (1.-weight);\n    return vec4(nrm, len);\n}\n\nvec4 sdSubstract(vec4 sd, vec4 sub)\n{\n    return sdIntersect(sd, -sub);\n}\n\nvec4 sdPoint(vec3 pos, vec3 size)\n{\n    vec3 p = abs(pos) - size;\n    float d = max(max(p.x, p.y), p.z);\n    float s = smoothstep(-THRES_CLOSE, THRES_CLOSE, d);\n    // Закругление углов\n    vec3 rounded = vec3(max(p.x, 0.0), max(p.y, 0.0), max(p.z, 0.0));\n    float roundness = 0.5;\n    float r = smoothstep(roundness, -roundness, (size.x - rounded.x));\n\n    return vec4(pos, d + r) * s;\n}\n\n\nvec4 sdPlanet(vec4 sd, vec3 pos, float x, float y, float z, vec3 cubeSize)\n{\n    pos = move(pos, 12.*vec3(sin(x), sin(y), sin(z)));\n    sd = sdUnion(sd, sdExpand(sdPoint(pos, cubeSize), 1.));\n    return sd;\n}\n\nvec4 sdWorld(vec3 pos)\n{\n    vec4 sd = sdPoint(pos, vec3(4.));\n\n\n\n    sd = sdPlanet(sd, pos, iTime, 1.1*iTime, 1.3*iTime, vec3(1.));\n    sd = sdPlanet(sd, pos, 1.1*iTime, 1.3*iTime, 1.7*iTime, vec3(1.));\n    sd = sdPlanet(sd, pos, 1.3*iTime, 1.7*iTime, 1.9*iTime, vec3(1.));\n    sd = sdPlanet(sd, pos, 1.7*iTime, 1.9*iTime, 2.3*iTime, vec3(1.)); \n    sd = sdPlanet(sd, pos, 1.9*iTime, 2.3*iTime, 2.7*iTime, vec3(1.)); \n    return sd;\n}\n\nvec4 march(vec3 pos, vec3 dir)\n{\n    float len;\n    for (int i=0; i<MAX_ITER; ++i)\n    {\n        vec4 sd = sdWorld(pos);\n        pos += sd.w * dir;\n        len += sd.w;\n        if (sd.w < THRES_CLOSE)\n        {\n            return vec4(sd.xyz, len);\n        }\n        else if (len > MAX_TRACE)\n        {\n            return vec4(-dir, MAX_TRACE);\n        }\n    }\n    return vec4(-dir, MAX_TRACE);\n}\n\nvec3 lighting(vec3 origin, vec3 hit, vec3 normal, vec3 albedo)\n{\n    vec3 lightPos = vec3(50. * cos(iTime), 50. * sin(iTime), 30.);\n    vec3 lightColor = vec3(.7+.3*sin(iTime*.1),.7+.3*sin(iTime*.2),.7+.3*sin(iTime*.5));\n    float intensity = .7;\n    float lightDist = length(lightPos - hit);\n\n    vec3 view = normalize(origin - hit);\n    vec3 light = (lightPos - hit) / lightDist;\n    vec3 halfNormal = normalize(view + light);\n\n    float shadow = step(lightDist - 1., march(hit+.1*normal, light).w);\n\n    vec3 diffuse = albedo * max(0.,dot(light, normal)) * lightColor * intensity;\n    vec3 specular = pow(max(0., dot(halfNormal, normal)), 120.) * lightColor;\n    vec3 ambient = .4 * albedo;\n\n    return shadow * (diffuse + specular) + ambient;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = gl_FragCoord.xy / iResolution.xy;\n    vec2 view = (gl_FragCoord.xy - .5 * iResolution.xy) / iResolution.y;\n\n    vec3 origin = vec3(0., 00., 500.);\n    vec3 camDir = vec3(0., -.0, -1.);\n    vec3 camUp = vec3(0., 1., 0.);\n\n    camDir = normalize(camDir);\n    vec3 camRight = cross(camUp, camDir);\n    camUp = cross(camDir, camRight);\n\n    float fov = 0.05;\n    vec3 viewDir = camDir + fov * (camUp * view.y + camRight * view.x);\n    vec4 ret = march(origin, viewDir);\n\n    vec3 hit = origin + ret.w * viewDir;\n    vec3 normal = ret.xyz;\n    vec3 albedo = vec3(uv, .5 + .5 *sin(.2 * iTime));\n\n    float bg = step(ret.w, MAX_TRACE - 1.);\n    vec3 col = lighting(origin, hit, normal, albedo) * bg + albedo * (1.-bg) * .2;\n    fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"}]}