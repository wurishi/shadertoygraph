{"ver":"0.1","info":{"id":"3djSzR","date":"1552697491","viewed":201,"name":"Radix 2 FFT","username":"rory618","description":"A pretty nice radix 2 fft template for later use. Currently using 16 frames to do two forward and reverse 256x256 FFT's. Meant for use with 16x speed.\nSpace to toggle draw type and r to reset","likes":6,"published":1,"flags":48,"usePreview":0,"tags":["fft"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define R iResolution\n\n#define ch_dat iChannel0\n#define ch_fft iChannel1\n\n#define T(A,B) texelFetch(A,B,0)\n\n#define dat(A) T(ch_dat, ivec2(A))\n#define fft(A) T(ch_fft, ivec2(A))\n\nvoid mainImage( out vec4 O, in vec2 I )\n{\n    vec2 c = vec2(1.5,.5)*f_FFT_N;\n    float s = min(R.x/(f_FFT_N*3.),R.y/(f_FFT_N));\n    O = dat((I-R.xy/2.)/s+c);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define ch_in iChannel1\n#define ch_self iChannel0\n#define ch_fft iChannel2\n\n#define T(A,B) texelFetch(A,B,0)\n\n#define inp(A) T(ch_in, ivec2(A))\n#define dat(A) T(ch_self, ivec2(A))\n#define fft(A) T(ch_fft, ivec2(A))\n\nvoid mainImage( out vec4 O, in vec2 I )\n{\n    if(int(I.x)>=FFT_N ||int(I.y)>=FFT_N){\n        O = vec4(0);\n        return;\n    }\n    if(CLK==0 || CLK==FFT_M*2){\n        if(iTime<1. && CLK==FFT_M*2){\n        \tO = inp(I);\n        } else {\n        \tO = fft(I)/(f_FFT_N);\n        }\n        vec2 c = vec2(1.5,.5)*f_FFT_N;\n        float s = min(R.x/(f_FFT_N*3.),R.y/(f_FFT_N));\n        if(CLK==0){\n            //Frequency domain operations\n            vec2 m = (iMouse.xy-R.xy/2.)/s+vec2(1.5,.5)*f_FFT_N;\n            if(m.x<f_FFT_N){\n                m = mod(m+f_FFT_N/2.,f_FFT_N);\n                if(length(m-I)<5.){\n                    O = vec4(T(iChannel3,ivec2(32,2)).x>.5);\n                }\n            }\n        } else {\n            //Spatial domain operations\n            vec2 m = (iMouse.xy-R.xy/2.)/s+vec2(0.5,.5)*f_FFT_N;\n            if(length(m-I)<5.){\n                O = vec4(T(iChannel3,ivec2(32,2)).x>.5);\n            }\n            if(T(iChannel3,ivec2(82,0)).x>.5) O *=0.;\n        }\n    } else {\n        O = dat(I);\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define zmod(a,b) (((a)+(b))-(((a)+(b))/(b))*(b))\n#define R iResolution\n\n//Size N\n//Stages M\n//Must have 2^M==N\n\n#define FFT_N 256\n#define FFT_M 8\n\n#define f_FFT_N float(FFT_N)\n//#define f_FFT_M float(FFT_M)\n#define CLK (iFrame%(FFT_M*4))\n#define pi 3.14159265\n#define W(i,n) cexp(vec2(0,2.*pi*float(i)/float(n)))\n\n\nvec2 cprod(vec2 a, vec2 b){\n    return mat2(a,-a.y,a.x) * b;\n}\nvec2 cis(float t){\n    return cos(t - vec2(0,pi/2.));\n}\nvec2 cexp(vec2 z) {\n    return exp(z.x)*cis(z.y);\n}\n\nint reverseBits(int i, int n){\n    int l;\n    for(int k = 0; k < n; k++){\n        l *= 2;\n        l += i&1;\n        i /= 2;\n    }\n    return l;\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"#define ch_in iChannel0\n#define ch_self iChannel1\n\n#define T(A,B) texelFetch(A,B,0)\n\n#define inp(A) T(ch_in, ivec2(A))\n#define dat(A) T(ch_self, zmod(ivec2(A),FFT_N))\n\n\nvoid mainImage( out vec4 O, in vec2 I )\n{\n    if(int(I.x)>=FFT_N ||int(I.y)>=FFT_N){\n        O = vec4(0);\n        return;\n    }\n    int FFT_DIR = int(CLK >= (FFT_M*2))*2 - 1;\n    int stage = CLK/2 % FFT_M;\n    int stage_size = 1 << stage;\n    int dim = CLK%2;\n    \n    int index = int(I[dim]);\n    int b_index = index | stage_size;\n    int a_index = b_index ^ stage_size;\n    \n    ivec2 I_a = ivec2(I);\n    ivec2 I_b = ivec2(I);\n    \n    I_a[dim] = a_index;\n    I_b[dim] = b_index;\n    \n    vec4 A, B;\n    if(CLK!=0 && CLK!=FFT_M*2){\n        A = dat(I_a);\n        B = dat(I_b);\n    } else {\n        A = inp(ivec2(reverseBits(I_a.x,FFT_M),reverseBits(I_a.y,FFT_M)));\n        B = inp(ivec2(reverseBits(I_b.x,FFT_M),reverseBits(I_b.y,FFT_M)));\n    }\n    \n    float butterfly_factor = bool(index & stage_size)?-1.:1.;\n    \n    vec2 twiddle_factor = W((index % stage_size) * (FFT_N/2/stage_size) * FFT_DIR, FFT_N);\n    \n    B.xy = cprod(B.xy, twiddle_factor);\n    B.zw = cprod(B.zw, twiddle_factor);\n    \n    vec4 sum = A + B * butterfly_factor;\n    \n    \n    O = sum;\n    \n    \n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"#define ch_self iChannel0\n#define ch_fft iChannel1\n\n#define T(A,B) texelFetch(A,B,0)\n\n#define dat(A) T(ch_self, ivec2(A))\n#define fft(A) T(ch_fft, ivec2(A))\n\nvoid mainImage( out vec4 O, in vec2 I )\n{\n    O = dat(I);\n    if(CLK+1==FFT_M*4 && I.x<f_FFT_N && I.y<f_FFT_N){\n        O = fft(mod(I+f_FFT_N/2.,f_FFT_N))/sqrt(f_FFT_N);\n    }\n    if(CLK+1==FFT_M*2 && I.x>f_FFT_N && I.y<f_FFT_N) {\n        O = fft(I-vec2(f_FFT_N,0))/(f_FFT_N);;;\n    }\n    if(I.x>f_FFT_N*2. && I.y<f_FFT_N){\n        \n        O = fft(I-vec2(f_FFT_N*2.,0))/(f_FFT_N);;;\n    }\n}","name":"Buffer C","description":"","type":"buffer"}]}