{"ver":"0.1","info":{"id":"3tsBDX","date":"1597927289","viewed":159,"name":"Stacked layers of noise","username":"enz0","description":"I'm attempting to mimic this piece of work: https://jacobjoaquin.tumblr.com/post/188120374046/jacobjoaquin-volumetric-noise-20190225\n- Isometric stacked layers of animated 2d noise (so... 3d noise).\nThis is my first non-trivial shader!","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["noise","layers"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Trying to build stacked crosssectional plates of animated 3d noise, to mimic this gif: \n//https://jacobjoaquin.tumblr.com/post/188120374046/jacobjoaquin-volumetric-noise-20190225\n//\n// Using the noise algorithm from this shader by iq: https://www.shadertoy.com/view/4sfGzS\n// then making it have octaves.\n//\n// TODO: Make the plates square and isometric.\n// TODO: Fix the noise so that builds in from both up as well as down.\n// TODO: Correctly just overlay the colours of each upper disc on the lower discs, if the upper pixel is not transparent.  Need to model alpha.\n// TODO: don't calculate a noise value that is going to be thrown away!\n// DONE: add contour border colour to separate the layers of noise, and then make them opaque.\n//         - sort of.  Not sure of simulating blend mode blend and just overlaying the pixels.\n\n// DONE: add border colour to the rim of each plate (discs, for now), then make them otherwise transparent.\n\n\n\n//license from the noise sketch: https://www.shadertoy.com/view/4sfGzS\n// The MIT License\n// Copyright Â© 2013 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// Value    Noise 2D, Derivatives: https://www.shadertoy.com/view/4dXBRH\n// Gradient Noise 2D, Derivatives: https://www.shadertoy.com/view/XdXBRH\n// Value    Noise 3D, Derivatives: https://www.shadertoy.com/view/XsXfRH\n// Gradient Noise 3D, Derivatives: https://www.shadertoy.com/view/4dffRH\n// Value    Noise 2D             : https://www.shadertoy.com/view/lsf3WH\n// Value    Noise 3D             : https://www.shadertoy.com/view/4sfGzS\n// Gradient Noise 2D             : https://www.shadertoy.com/view/XdXGW8\n// Gradient Noise 3D             : https://www.shadertoy.com/view/Xsl3Dl\n// Simplex  Noise 2D             : https://www.shadertoy.com/view/Msf3WH\n// Wave     Noise 2D             : https://www.shadertoy.com/view/tldSRj\n\n\n\n//===============================================================================================\n//===============================================================================================\n//===============================================================================================\n\nfloat hash(vec3 p)  // replace this by something better\n{\n    p  = fract( p*0.3183099+.1 );\n\tp *= 17.0;\n    return fract( p.x*p.y*p.z*(p.x+p.y+p.z) );\n}\n\nfloat noise( in vec3 x )\n{\n    vec3 i = floor(x);\n    vec3 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n\t\n    return mix(mix(mix( hash(i+vec3(0,0,0)), \n                        hash(i+vec3(1,0,0)),f.x),\n                   mix( hash(i+vec3(0,1,0)), \n                        hash(i+vec3(1,1,0)),f.x),f.y),\n               mix(mix( hash(i+vec3(0,0,1)), \n                        hash(i+vec3(1,0,1)),f.x),\n                   mix( hash(i+vec3(0,1,1)), \n                        hash(i+vec3(1,1,1)),f.x),f.y),f.z);\n}\n\n\n//===============================================================================================\n//===============================================================================================\n//===============================================================================================\n//===============================================================================================\n//===============================================================================================\n\nconst mat3 m = mat3( 0.00,  0.80,  0.60,\n                    -0.80,  0.36, -0.48,\n                    -0.60, -0.48,  0.64 );\n\n\nfloat octaveNoise(in vec2 realuv, in float time){\n    float f = 0.0;\n    \n    //scale\n    vec2 uv = realuv * 8.0;\n    \n    mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\n    \n    f  = 0.7 * noise( vec3(uv, time*0.6)  ); \n    \n    uv = m*uv;    \n\tf += 0.3 * noise( vec3(uv, time*0.2+100.)  ); \n\n\treturn 0.5 + 0.5*f;\n}\n\nfloat findEdgeOfNoise(in float n, in float a, in float b, in float borderWidth){\n    float f1 = smoothstep( a, b, n);\n\tfloat f2 = smoothstep( b, b+borderWidth, n);\n\treturn f1 - f2;\n}\n\n\nfloat circleMask(in float r, in vec2 realuv){\n    vec2 squishedUV = (realuv-vec2(0, .5))*vec2(1., 2);\n    float distToCentre =1.- length(squishedUV - vec2(1.,0.50));\n    return smoothstep(r, r+0.003, distToCentre);\n}\n\nfloat circleBorderMask(in float r, in vec2 realuv){\n    vec2 squishedUV = (realuv-vec2(0, .5))*vec2(1., 2);\n    float distToCentre =1.- length(squishedUV - vec2(1.,0.50));\n    return 1.-smoothstep(0., 0.005, abs(r- distToCentre));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tbool doSecondColour = false;\n\tbool doPlateBorders = true;\n    \n    vec2 p = fragCoord.xy / iResolution.xy;\n\n\tvec2 realuv = p*vec2(iResolution.x/iResolution.y,1.0);\n    \n\n    float discRadius =0.65;\n    int numLayers = 20;\n    float layerSpacing = 0.5 / float(numLayers);\n    float time = iTime;\n    \n    vec3 col = vec3(0.);\n    for(int i =0; i < numLayers; i++){\n\t    vec3 plateCol = vec3(0.);\n        vec2 plateOffset = vec2(0., 0.45-layerSpacing * float(i));\n\n        vec2 apparentUV = realuv.xy + plateOffset;\n        float apparentTime = time*1. + 0.3 * float(i);\n        \n\t\t//generate noise, find the stepped body of it, find the edge of it.\n        float f = octaveNoise(apparentUV, apparentTime);\t\n\t\tfloat n1 = smoothstep( 0.79, 0.791, f);\n\t\tfloat n2 = smoothstep( 0.62, 0.625, f);\n        \n        \n        float nBorder = findEdgeOfNoise(f, 0.782, 0.79, 0.001);\n        float nBorder2 = findEdgeOfNoise(f, 0.62, 0.625, 0.001);\n        \n        float discMaskV = circleMask(discRadius, realuv + plateOffset);\n        \n        // Mask the noise by the shape of the disk (and set alpha to 40%)\n        plateCol.xy += 1. * n1 * discMaskV;\n        \n        if (doSecondColour){\n            plateCol.xz += 1. * (1. - n2) * discMaskV;\n        }\n\n\t\t// Add a circular border/rim to each plate\n        // First, delete whatever was underneath - hacky.  just blend a top plate with black\n        if (doPlateBorders){\n            col *= 1. - vec3(circleBorderMask(discRadius, realuv + plateOffset));\n\t\t\tplateCol += 0.2 * vec3(circleBorderMask(discRadius, realuv + plateOffset));\n        }\n\n        // Add black border around noise\n        col *= 1. - nBorder* discMaskV;\n        if (doSecondColour){\n\t        // Add black border around second colour of noise\n        \tcol *= 1. - nBorder2* discMaskV;\n        }\n\n        //TODO: we want to draw the colours of this plate over the top of existing colours not add.  However, we need to track pixel alpha for that, too.\n        // Put the plate colour over the existing colours\n        col += plateCol;\n    }\n    \n \tfragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}