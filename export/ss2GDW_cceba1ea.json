{"ver":"0.1","info":{"id":"ss2GDW","date":"1617479747","viewed":7169,"name":"game of life screen saver","username":"grevel","description":"SCREEN SAVER GAME OF LIFE\nbest on fullscreen\nclick to reset","likes":5,"published":1,"flags":32,"usePreview":0,"tags":["colors","automata","screensaver","colours","gameoflife","fading","gol"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nSCREEN SAVER GAME OF LIFE\nbest on fullscreen\nclick to reset\n\n\nchannels:\nBuffer A - Cells states\nBuffer B - background trails\nBuffer C - density mask ( used to fill blanks mid-game)\n*/\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //ZOOM = 2.+sin(iTime/20.);\n\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    uv -= .5;\n    uv /= ZOOM;\n    uv += .5;\n\n    if(texture(iChannel0, uv).x > .5) // cell\n        fragColor = texture(iChannel0, uv);\n    else // background\n        fragColor = mix(vec4(0., 0., 0., 1.), vec4(0.4 + 0.4*cos(iTime+uv.xyx*3.+vec3(0,30,60)), 1.), vec4(texture(iChannel1, uv)).x);\n        //fragColor = mix(vec4(0., 0., 0., 1.), vec4(0.5 + 0.5*cos(iTime+uv.xyx*3.+vec3(0,30,60)), 1.), step(.05, texture(iChannel1, uv, 4.)));\n        //fragColor = .5*texture(iChannel2, uv);\n        //fragColor = vec4(vec3(roughNoise2(uv*30., 8, .6, uint(iTime*10.))), 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define tex(pos) texture(iChannel0, pos).x\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n        //ZOOM = 2.+sin(iTime/20.);\n\n        vec2 uv = fragCoord/iResolution.xy;\n        float col = tex(uv);\n\n        if(texture(iChannel2, uv).x<1. && roughNoise2(uv*3., 8, .6, uint(iTime/3.)) >= .8) // fill blank space with cells\n        {\n                fragColor = vec4(1.);\n        }\n        else{\n            if(fract(float(iFrame)/3.)==0.){\n                vec3 p = vec3(vec2(1.)/iResolution.xy, 0.);\n\n                if(iMouse.z > .5 && length(uv-((iMouse.xy-iResolution.xy/2.)/ZOOM+iResolution.xy/2.)/iResolution.xy) < .01/ZOOM) col = 1.;\n                else\n                {\n                    int n = 0; // game of life logics\n                    n += int(tex(vec2(uv.x-p.x, uv.y-p.y)));\n                    n += int(tex(vec2(uv.x-p.x, uv.y+p.y)));\n                    n += int(tex(vec2(uv.x+p.x, uv.y-p.y)));\n                    n += int(tex(vec2(uv.x+p.x, uv.y+p.y)));\n\n                    n += int(tex(vec2(uv.x+p.x, uv.y)));\n                    n += int(tex(vec2(uv.x-p.x, uv.y)));\n                    n += int(tex(vec2(uv.x, uv.y-p.y)));\n                    n += int(tex(vec2(uv.x, uv.y+p.y)));\n\n                    if(col == 0. && n == 3) col = 1.;\n                    else if(col == 1. && !(n == 2 || n == 3)) col = 0.;\n                }\n\n\n\n            }\n            \n            //if(iMouse.z > .5) fragColor = vec4(vec3(0.0), 1.); // reset\n            //else \n                fragColor = vec4(vec3(col), 1.0);\n        }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"#define tex0(pos) texture(iChannel0, pos).x\n#define tex1(pos) texture(iChannel1, pos).x\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n    float A = tex0(uv);\n    float B = tex1(uv);\n    \n    B+=A;\n    B *= .987;\n    B = clamp(B, 0., 1.);\n\n    fragColor = vec4(vec3(B),1.0);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"float ZOOM = 3.;\n\n\n// VV 2d Noise code VV \nuint Hash(uint s)\n{\n    s ^= 2747636419u;\n    s *= 2654435769u;\n    s ^= s >> 16;\n    s *= 2654435769u;\n    s ^= s >> 16;\n    s *= 2654435769u;\n    return s;\n}\n\nuint seed1 = uint(0);\nfloat r(uint s)  // random float\n{\n    return float(Hash(s)) / 4294967295.0;\n}\n\nuint seed2 = uint(0);\nfloat r2(vec2 p) // random float for vec2\n{\n    if(p == vec2(0.)) return r(uint(p.x*100.));\n    else return fract(sin(dot(p, vec2(12.9898, 78.233))) * (43758.5453+float(seed2)));\n}\n\nfloat map(float v, float a1, float a2, float b1, float b2) // mapping function\n{\n    return (v-a1)/(a2-a1)*(b2-b1)+b1;\n}\n\nfloat pixelNoise(vec2 uv) // uper left quadrant\n{\n    return r2(round(uv));\n}\n\nfloat smoothNoise(vec2 uv)\n{\n    float BL = pixelNoise(floor(uv)); // take samples of four surrounding squares\n    float TR = pixelNoise(ceil(uv));\n    float BR = pixelNoise(vec2(ceil(uv.x), floor(uv.y)));\n    float TL = pixelNoise(vec2(floor(uv.x), ceil(uv.y)));\n    \n    uv = fract(uv); // make uv fit in 0-1 to use it in interpolation\n    uv = smoothstep(0., 1., uv); // make interpolation smooth (try commenting it out, it will be uglier)\n    \n    return mix(mix(BL, BR, uv.x), mix(TL, TR, uv.x), uv.y); // interpolate between surrounding colors\n}\n\nfloat roughNoise1(vec2 uv, int depth, float roughness, uint s)\n{\n    float col = smoothNoise(uv);\n    float basis = 1./(roughness);\n    \n    for(int i = 1; i < depth; i++) //tweaking initial color by multiplying it by smaller scale noise\n    {\n        uv += vec2(4.3487*r(s), 5.754*r(s)); //move uv to avoid radial repetition effect\n        col *= map(smoothNoise(uv*pow(2., float(i))), 0., 1., 1.-1./pow(basis, float(i)), 1.+1./pow(basis, float(i)));\n    }\n\n    return col;\n}\n\nfloat roughNoise2(vec2 uv, int depth, float roughness, uint s)\n{\n    uv += vec2(27.238*r(s), 16.162*r(s+uint(1)));\n\n    float col = smoothNoise(uv);\n    float normalizer = 0.;\n    float basis = 1./(roughness);\n    \n    for(int i = 1; i < depth; i++) //tweaking initial color by adding it to smaller scale noise\n    {\n        uv += vec2(4.3487*r(s+uint(2)), 5.754*r(s+uint(3))); //move uv to avoid radial repetition effect\n        col += map(smoothNoise(uv*pow(2., float(i))), 0., 1., -1./pow(basis, float(i)), 1./pow(basis, float(i)));\n        normalizer += 1./pow(basis, float(i));\n    }\n\n    return smoothstep(0., 1., map(col, -normalizer, 1.+normalizer, 0., 1.)); // normalize the value\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = smoothstep(0.05, 0.2, texture(iChannel0, fragCoord.xy/iResolution.xy, 6.)*20.);\n}","name":"Buffer C","description":"","type":"buffer"}]}