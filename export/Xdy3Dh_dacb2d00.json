{"ver":"0.1","info":{"id":"Xdy3Dh","date":"1454148868","viewed":146,"name":"distance excersise","username":"flush_11","description":"extension of a sample of the book of shaders","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["thebookofshaders"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"// 2D Random\nfloat random (in vec2 st) { \n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))\n                 * 43758.5453123);\n}\n\n// 2D Noise based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    // Smooth Interpolation\n\n    // Cubic Hermine Curve.  Same as SmoothStep()\n    vec2 u = f*f*(3.0-2.0*f);\n    // u = smoothstep(0.,1.,f);\n\n    // Mix 4 coorners porcentages\n    return mix(a, b, u.x) + \n            (c - a)* u.y * (1.0 - u.x) + \n            (d - b) * u.x * u.y;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec3 color = vec3(0.0);\n  float d1,d2,d3,d4 = 0.0;\n\n  vec2 st = 0.5*(2.0* fragCoord.xy - iResolution.xy)/min(iResolution.x, iResolution.y);\n\n  d1 = length( abs(st)- vec2(0.1)*noise(vec2(1.0,iTime)));\n  d2 = length( abs(st)- vec2(0.3)*noise(vec2(3.0,iTime)));\n  d3 = length( abs(st)- vec2(0.5)*noise(vec2(5.0,iTime)));\n  d4 = length( abs(st)- vec2(0.7)*noise(vec2(7.0,iTime)));\n\n  fragColor = vec4(vec3(1.0,0.0,0.0)*fract(d1*10.0) + vec3(0.0,1.0,0.0)*fract(d2*10.0) + vec3(0.0,0.0,1.0)*fract(d3*10.0)+ vec3(1.0,1.0,1.0)*fract(d4*10.0),1.0);\n}","name":"","description":"","type":"image"}]}