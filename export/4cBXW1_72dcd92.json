{"ver":"0.1","info":{"id":"4cBXW1","date":"1706244783","viewed":72,"name":"volumetric DDA","username":"Elsio","description":"tentando entender a matemática por trás do dda. ","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["tutorial","voxel","cubes","dda","sub900ch"],"hasliked":0,"parentid":"lflXW4","parentname":"DDA is NOT simple"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define Q(z) P((z), .2, 3., .3, 2., 0.)\n#define P(z, a, b, c, d, e) vec3(sin(z * a) * b, cos(z * c) * d - e, z)\n\nbool glass;\nfloat map(vec3 p){\n    float \n        t1 = length(p - P(p.z, .2, 1., .3, 4., 1.)),   \n        t2 = length(p - P(p.z, .3, 3., .2, 1., 1.)),\n        ret = \n            1.5 - min(                                              \n                      length(p - Q(p.z)),                           \n                      min(t1, t2)\n                  );\n                  \n    glass = t1 < t2;\n    return ret;\n}\n\n#define r33(p) fract(sin(p * vec3(124,245.32,1234.343))*2234.3)\n#define r31(p) fract(sin(dot(p, vec3(124,245.32,1234.343)))*2234.3)\n\nvoid mainImage(out vec4 o, vec2 u) {\n    float t = 2. * iTime, res = .5, z;\n    vec3 R = iResolution,\n         norm, mask, side, p, q, border, volum = vec3(1), \n         ro = Q(t),\n         fw = normalize(Q(t + 1.) - ro),\n         rt = vec3(fw.z, 0, -fw.x),\n         D = fw + mat2x3(rt, cross(fw, rt)) \n                    * (u - .5 * R.xy) / R.y / 1.2; // (!)\n    \n    ro /= res;\n    p = floor(ro);\n    side = (p - ro + .5) / D + .5 / abs(D);\n    \n    int i, far = 80;\n    while (q = p * res, i++ < far){\n        if(map(q) < .0) {\n            if(r31(p*.3) < .1) \n                volum *= r33(p) * (cos(t + 6.3 * r31(p*.1)) + 1.5);\n            else break;\n        }\n        \n        side += mask / abs(D);\n        mask = step(side, side.yzx) * step(side, side.zxy);\n        p += norm = mask * sign(D);\n    }\n\n    z = dot(side, mask);\n    q = abs(fract(ro + z * D) - .5);\n    border = vec3(.3 + smoothstep(\n                              .0, 18. / R.y,        // border\n                              .4 - dot(max(q.yzx, q.zxy), mask)));\n                              \n    o.rgb = .8 * (2.5 / z + .2 * volum - .3)\n               * volum\n               * border;\n}\n\n","name":"Image","description":"","type":"image"}]}