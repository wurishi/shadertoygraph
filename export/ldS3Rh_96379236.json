{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"// Tracer code by Ben Weston - 2013\n// Geometry, colouring and and animation by Wouter van Nifterick 2013\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nconst float pi2 = 6.28318530717958647692;\n\nconst float epsilon = .003;\nconst float normalPrecision = .1;\nconst float shadowOffset = .2;\nconst int traceDepth = 50; // takes time\nconst float drawDistance = 150.0;\nconst float stepScale = .9;\n\nconst vec3 CamPos = vec3(0,20.0,-20.0);\nconst vec3 CamLook = vec3(0,0,0);\n\nconst vec3 lightDir = vec3(0,1,1);\nconst vec3 fillLightDir = vec3(0,0,-1);\nconst vec3 lightColour = vec3(1,.8,.6);\nconst vec3 fillLightColour = vec3(.05,.15,.25);\n\t\n\nfloat Isosurface( vec3 at )\n{\n  float res=.6;\n  float n=(1.0+sqrt(5.0))*0.49;\n\t\n  at /= 2.5;\n  if(length(at) < 5.9)  \n  {\n\t float t =    \n\t   res =2.0 - \n\t\t   (cos(at.x + n * at.y) + \n\t\t\tcos(at.x - n * at.y) + \n\t\t\tcos(at.y + n * at.z) + \n\t\t\tcos(at.y - n * at.z) + \n\t\t\tcos(at.z + n * at.x) + \n\t\t\tcos(at.z - n * at.x)) ;\n  }\t\n  return res;\n}\n\nvec3 Shading( vec3 pos, vec3 norm, float shadow, vec3 rd )\n{\n\tvec3 albedo = vec3(.4);\n\n\tvec3 l = shadow*lightColour*max(0.0,dot(norm,lightDir));\n\tvec3 fl = fillLightColour*(dot(norm,fillLightDir)*.5+.5);\n\t\n\tvec3 view = normalize(-rd);\n\tvec3 h = normalize(view+lightDir);\n\tfloat specular = pow(max(0.0,dot(h,norm)),200.0);\n\tvec3 res =  albedo*(l+fl) + shadow*specular*22.0*lightColour*0.1;\n\treturn res;\n}\n\n\nfloat Trace( vec3 ro, vec3 rd )\n{\n\tfloat t = 0.0;\n\tfloat dist = 1.0;\n\tfor ( int i=0; i < traceDepth; i++ )\n\t{\n\t\tif ( abs(dist) < epsilon || t > drawDistance || t < 0.0 )\n\t\t\tcontinue;\n\t\tdist = Isosurface( ro+rd*t );\n\t\tt = t+dist*stepScale;\n\t}\n\t\n\treturn t;\n}\n\n// get normal\nvec3 GetNormal( vec3 pos )\n{\n\tconst vec2 delta = vec2(normalPrecision, 0);\n\tvec3 n;\n\tn.x = Isosurface( pos + delta.xyy ) - Isosurface( pos - delta.xyy );\n\tn.y = Isosurface( pos + delta.yxy ) - Isosurface( pos - delta.yxy );\n\tn.z = Isosurface( pos + delta.yyx ) - Isosurface( pos - delta.yyx );\n\treturn normalize(n);\n}\t\t\t\t\n\n// camera function by TekF\n// compute ray from camera parameters\nvec3 GetRay( vec3 dir, float zoom, vec2 uv )\n{\n\tuv = uv - .5;\n\tuv.x *= iResolution.x/iResolution.y;\n\t\n\tdir = zoom*normalize(dir);\n\tvec3 right = normalize(cross(vec3(0,1,0),dir));\n\tvec3 up = normalize(cross(dir,right));\n\t\n\treturn dir + right*uv.x + up*uv.y;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\n\tvec3 camPos = CamPos;\n\tvec3 camLook = CamLook;\n\t\n\tvec2 camRot = .5*pi2*(iMouse.xy-iResolution.xy*.5)/iResolution.x;\n\tcamRot += iTime*0.5;\n\tcamRot.y = 0.0;\n\n\tcamPos.yz = cos(camRot.y)*camPos.yz* (0.5+sin (iTime)*0.2) + sin(camRot.y)*camPos.zy*vec2(1,-1);\n\tcamPos.xz = cos(camRot.x)*camPos.xz + sin(camRot.x)*camPos.zx*vec2(1,-1);\n\n\tvec3 rd, ro = camPos;\n\trd = GetRay( camLook-camPos, 1.0, uv );\n\t\n\tfloat t = Trace(ro,rd);\n\n\tvec3 result = vec3(0);\n\tif ( t > 0.0 && t < drawDistance )\n\t{\n\t\tvec3 pos = ro+t*rd;\n\t\t\t\n\t\tvec3 norm = GetNormal(pos);\n\n\t\t// shadow test\n\t\tfloat shadow = 0.0;\n\t\tif ( Trace( pos+lightDir*shadowOffset, lightDir ) < drawDistance )\n\t\t\tshadow = 0.15;\n\t\t\n\t\tresult = Shading( pos, norm, shadow, rd )*6.0;\n\t\t\n\t\t// fog\n\t\tresult = mix ( vec3(.6+sin(1.0+iTime)*0.6,.9+cos(iTime)*0.2,1.1+sin(iTime)*0.1), result, exp(-t*t*.0005) )*2.0-0.5;\n\t\tresult -= distance(vec2(0),pos.xy)*0.03;\n\t}\t\n\n\tfragColor = vec4( result, 1.0 );\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"ldS3Rh","date":"1383432322","viewed":809,"name":"Icosahedron","username":"WouterVanNifterick","description":"Flying in and out of an icosahedron.. I started out by tweaking TekF's https://www.shadertoy.com/view/MsfGRl (which is awesome!), and ended up with this :-)","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["icosahedron"],"hasliked":0,"parentid":"","parentname":""}}