{"ver":"0.1","info":{"id":"XsjyDy","date":"1493638123","viewed":222,"name":"Simple Chroma Key ","username":"Birkemose","description":"Fast simple chroma key for iOS usage.","likes":6,"published":1,"flags":32,"usePreview":0,"tags":["videochroma"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//  chroma-key.fsh\n//  Emote\n//\n//  Created by Lars Birkemose on 01/05/17.\n//  Copyright 2017 Bros.B. All rights reserved.\n//\n\n#define COLOR_KEY vec4(0.0508, 0.6328, 0.1484, 1.0000)\n#define LEVEL 0.5\n#define THRESHOLD 0.35\n\n// --------------------------------------------------------\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // get the textures\n\tvec2 xy = fragCoord.xy / iResolution.xy;\n    vec4 background = texture(iChannel0,xy);\n    vec4 color = texture(iChannel1,xy); // NEAREST filter\n    \n    // normalize colors\n    // normLength is used to filter false color matches\n    float normLength = clamp(length(color.rgb) / length(COLOR_KEY.rgb), 0.0, 1.0);\n    vec3 normColor = normalize(color.rgb) * normLength;\n\tvec3 normKey = normalize(COLOR_KEY.rgb);    \n    \n    // Calculate difference from KEY_COLOR\n    float colorDiff = length(normColor - normKey); \n    \n    // remove green edge glow\n    colorDiff = smoothstep(LEVEL - THRESHOLD, LEVEL + THRESHOLD, colorDiff);\n    color.g = color.g - (COLOR_KEY.g * (1.0 - colorDiff));\n    \n    // NOTE!\n    // In reality, filtered image should not be mixed, but rendered in a seperate pass\n    // This will also enable removal of dark alpha edges (maybe that is the buffer functionality)\n    \n    // Thus, this line has no effect here, but will soften dark edges in a two pass rendering \n    color.a = colorDiff;\n\n    // finish output (testing only)\n    float level = clamp(((colorDiff - 0.5) * 1.5) + 0.5, 0.0, 1.0);\n   \tfragColor = mix(background, color, level);\n}\n\n// --------------------------------------------------------\n\n\n\n\n\n\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0,0.0,1.0,1.0);\n}","name":"Buf A","description":"","type":"buffer"}]}