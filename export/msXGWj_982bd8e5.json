{"ver":"0.1","info":{"id":"msXGWj","date":"1666793627","viewed":429,"name":"[phreax] dancing smoke","username":"phreax","description":"Getting closer to my vision of intricate, curved, ever transforming yet playful and light forms.\n\nThe base is a kifs of a twisted torus knot rendered with a transparency raymarcher and some motion blur.\n\nVariation of\nhttps://shadertoy.com/view/3tcBz7","likes":30,"published":1,"flags":32,"usePreview":0,"tags":["raymarching","kifs","multipass"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Copyright Michael Thomas a.k.a phreax, 2022 \n// I am the sole copyright owner of this Work.\n// You cannot host, display, distribute or share this Work in any form,\n// including physical and digital. You cannot use this Work in any\n// commercial or non-commercial product, website or project. You cannot\n// sell this Work and you cannot mint an NFTs of it.\n// I share this Work for educational purposes, and you can link to it,\n// through an URL, proper attribution and unmodified screenshot, as part\n// of your educational material. If these conditions are too restrictive\n// please contact me and we'll definitely work it out.\n\n// copyright statement borrowed from Inigo Quilez\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec3 col = texture(iChannel0, uv).rgb;\n\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Copyright Michael Thomas a.k.a phreax, 2022 \n// I am the sole copyright owner of this Work.\n// You cannot host, display, distribute or share this Work in any form,\n// including physical and digital. You cannot use this Work in any\n// commercial or non-commercial product, website or project. You cannot\n// sell this Work and you cannot mint an NFTs of it.\n// I share this Work for educational purposes, and you can link to it,\n// through an URL, proper attribution and unmodified screenshot, as part\n// of your educational material. If these conditions are too restrictive\n// please contact me and we'll definitely work it out.\n\n// copyright statement borrowed from Inigo Quilez\n\n\n#define PI 3.141592\n#define SIN(x)(sin(x) * .5 + .5)\n#define hue(v)(.6 + .6 * cos(6.3 * (v) + vec3(0, 23, 21)))\n#define SYMMETRICAL 0\n#define PALETTE 4\n\nfloat tt;\nfloat time;\nvec3 ro;\n\nmat2 rot2(float a) {\n\treturn mat2(cos(a), sin(a), -sin(a), cos(a));\n}\n\n// from \"Palettes\" by iq. https://shadertoy.com/view/ll2GD3\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d) {\n\treturn a + b * cos(6.28318 * (c * t + d));\n}\n\nvec3 getPal(int id, float t) {\n\n\tid = id % 7;\n\n\tvec3 col = pal(t, vec3(.5, 0.5, 0.5), vec3(0.5, 0.5, 0.5), vec3(1.0, 1.0, 1.0), vec3(0.0, -0.33, 0.33));\n\tif (id == 1) col = pal(t, vec3(0.5, 0.5, 0.5), vec3(0.5, 0.5, 0.5), vec3(1.0, 1.0, 1.0), vec3(0.0, 0.10, 0.20));\n\tif (id == 2) col = pal(t, vec3(0.5, 0.5, 0.5), vec3(0.5, 0.5, 0.5), vec3(1.0, 1.0, 1.0), vec3(0.3, 0.20, 0.20));\n\tif (id == 3) col = pal(t, vec3(0.5, 0.5, 0.5), vec3(0.5, 0.5, 0.5), vec3(1.0, 1.0, 0.5), vec3(0.8, 0.90, 0.30));\n\tif (id == 4) col = pal(t, vec3(0.5, 0.5, 0.5), vec3(0.5, 0.5, 0.5), vec3(1.0, 0.7, 0.4), vec3(0.0, 0.15, 0.20));\n\tif (id == 5) col = pal(t, vec3(0.5, 0.5, 0.5), vec3(0.5, 0.5, 0.5), vec3(2.0, 1.0, 0.0), vec3(0.5, 0.20, 0.25));\n\tif (id == 6) col = pal(t, vec3(0.8, 0.5, 0.4), vec3(0.2, 0.4, 0.2), vec3(2.0, 1.0, 1.0), vec3(0.0, 0.25, 0.25));\n\n\treturn col;\n}\n\n\n/*float curve(float t, float d) {\n  t/=d;\n  return mix(floor(t), floor(t)+1., pow(smoothstep(0.,1.,fract(t)), 10.));\n}\n*/\n\n\n// by Nusan\nfloat rnd(float t) {\n\treturn fract(sin(t * 784.685) * 827.542);\n}\n\nfloat curve(float t, float d) {\n\tfloat g = t / d;\n\treturn mix(rnd(floor(g)), rnd(floor(g) + 1.0), pow(smoothstep(0.0, 1.0, fract(g)), 7.));\n}\n\nvec3 transform(vec3 p) {\n\tfloat a = sin(2. * PI * curve(time, 4.));\n\tfloat a2 = sin(2. * PI * curve(time + 5., 4.));\n\n\t// rotate object\n\tp.xz *= rot2(a);\n\tp.xy *= rot2(a2);\n\treturn p;\n}\n\nfloat map(vec3 p) {\n\n\tvec3 bp = p;\n\n\tp = transform(p);\n\n\t#if SYMMETRICAL\n\tp.y = -(abs(p.y) - .5);\n\t#endif\n\n\t//x\n\t//p.x *= 1.+SIN(curve(time, 4.))*(smoothstep(-0.9, 0.9, -p.y));\n\t//p.z *= 1.+.5*(smoothstep(-0.9, 1.5, -p.y));\n\n\n\tp.x = abs(p.x) - .5 * SIN(tt * .5);\n\tp.y = abs(p.y) - .9 * SIN(tt * .8);\n\tp.y -= 0.1;\n\tp.y = abs(p.y) - .1;\n\tp.x -= 0.2;\n\tp.x = abs(p.x) - .9;\n\tp.z = abs(p.z) - .5;\n\n\tp.zy -= 0.5;\n\tp.xy *= rot2(0.1 * tt);\n\tp.zy *= rot2(-.04 * tt);\n\n\n\t// torus\n\tfloat r1 = 1.0;\n\tfloat r2 = mix(0.02, 0.2, SIN(tt * .3));\n\n\tvec2 cp = vec2(length(p.xz) - r1, p.y);\n\n\n\t// torus knots by BigWings\n\tfloat a = atan(p.z, p.x);\n\tcp *= rot2(3. * a + tt);\n\n\tcp *= vec2(3., .4);\n\tcp.x = abs(cp.x) - .3;\n\tcp *= rot2(2. * a);\n\n\t// kifs\n\tfloat n = 10.;\n\tfor (float i = 0.; i < n; i++) {\n\n\t\tcp.y = abs(cp.y) - .05 * (.5 * sin(tt) + .9);\n\n\t\tcp *= rot2(0.1 * a * sin(0.1 * time));\n\t\tcp -= i * 0.01 / n;\n\t}\n\n\n\tfloat d = length(cp) - r2;\n\n\td = max(.09 * d, -length(bp.xy - ro.xy) - 4.);\n\n\treturn d;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\tvec2 uv = (fragCoord - .5 * iResolution.xy) / iResolution.y;\n\n\n\tfloat zoom = .99;\n    //time = iTime*(.2+.08*curve(.05*iTime, 1.));\n\n    time = iTime + 5.;\n\tvec3 previousColor = texture(iChannel0, ((fragCoord - .5 * iResolution.xy) * zoom / iResolution.xy + 0.5)).rgb;\n\tfloat cz = -8. + 4. * SIN(2.*PI*curve(time, 3.));\n\n\n\tro = vec3(0, .0, cz);\n\tvec3 lp = vec3(0, 1, cz);\n\tvec3 rd = normalize(vec3(uv, .7));\n\n\tvec3 p = ro;\n\tvec3 col;\n\n\tfloat t, d = 0.1;\n\n\ttt = time * 5. * (1. + .03 * sin(curve(time, 2.))) + 2. * curve(time, 4.);\n\n\tfloat acc = 0.001;\n\tfor (float i = .0; i < 200.; i++) {\n\n\t\td = map(p);\n\n\t\tif (t > 150.) break;\n\n\t\t// Phantom mode https://www.shadertoy.com/view/MtScWW\n\t\tacc += .01 + d * .4;\n\t\td = max(abs(d), 0.00002);\n\n\t\tt += d;\n\t\tp += rd * d;\n\n\n\t\tcol += 2. * clamp(1., 0., .7 * abs(cz) / (acc * acc));\n\n\t\tfloat sl = dot(p, p);\n\n\t\t/// col *= 0.5*getPal(PALETTE, 1.-0.15*sqrt(sl)+0.2*p.z+.25*iTime+curve(iTime, 8.));\n\t\tcol *= 0.5 * getPal(PALETTE, 1. - 0.15 * sqrt(sl) + 0.2 * p.z + mix(3.0, 4.0, SIN(curve(time, 4.))));\n\t\tcol = clamp(vec3(.4), vec3(0.0), col);\n\t}\n\n\tif (d < 0.001) {\n\t\tvec2 e = vec2(0.0035, -0.0035);\n\t\tvec3 n = normalize(e.xyy * map(p + e.xyy) + e.yyx * map(p + e.yyx) +\n                           e.yxy * map(p + e.yxy) + e.xxx * map(p + e.xxx));\n\n\t\tvec3 l = normalize(lp - p);\n\t\tfloat dif = max(dot(n, l), .0);\n\t\tfloat spe = pow(max(dot(reflect(-rd, n), -l), .0), 40.);\n\t\tfloat sss = smoothstep(0., 1., map(p + l * .4)) / .4;\n\n\t\tcol *= mix(1., .4 * spe + .8 * (dif + 2.5 * sss), .4);\n\n\t\tcol = clamp(vec3(1.), vec3(0), col);\n\t}\n\n\n\tvec3 old = texture(iChannel0, uv).rgb;\n\n\tcol = vec3(0.922, 1.000, 1.000) * mix(.7, 0.1, length(uv) - .75) - pow(col, vec3(1.3)) * 3.;\n\n    if(dot(old, old) > 0.0001) {\n\t col = mix(col, previousColor, .7);\n    }\n\t// Output to screen\n\tfragColor = vec4(col, 1.0 - t * 0.3);\n}","name":"Buffer A","description":"","type":"buffer"}]}