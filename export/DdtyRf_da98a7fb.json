{"ver":"0.1","info":{"id":"DdtyRf","date":"1695336819","viewed":75,"name":"Fireball TDD","username":"dw218192","description":"Simple fire shader","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"stjSDt","parentname":"Fire using noise"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float DENSITY = 4.5;\nfloat hash(vec3 p3) {\n\tp3  = fract(p3 * vec3(.1031,.11369,.13787));\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\nvec3 grad(vec3 p) {\n    return normalize(-1.0 + 2.0 * vec3(hash(p.xyz), hash(p.yxy), hash(p.zyx)));\n}\nvec3 fade(vec3 p, vec3 corner) {\n    vec3 t = abs(p - corner);\n    return vec3(1.0) - (6.0*t*t*t*t*t - 15.0*t*t*t*t + 10.0*t*t*t);\n}\nfloat perlin(vec3 p) {\n    p *= DENSITY;\n    vec3 min_corner = floor(p);\n    vec3 local = fract(p);\n    float ret = 0.0;\n    for (int dx=0; dx<=1; ++dx) {\n        for (int dy=0; dy<=1; ++dy) {\n            for (int dz=0; dz<=1; ++dz) {\n                vec3 corner = min_corner + vec3(dx, dy, dz);\n                vec3 g = grad(corner);\n                vec3 d = local - vec3(dx, dy, dz);\n                vec3 f = fade(p, corner);\n                ret += dot(g, d) * f.x * f.y * f.z;\n            }\n        }\n    }\n    return ret;\n}\nfloat fbm(vec3 p) {\n    float ret = 0.0;\n    float amp = 1.0;\n    for (int i=0; i<4; ++i) {\n        ret += amp * perlin(p);\n        p *= 2.0;\n        amp *= 0.5;\n    }\n    return ret;\n}\nvec4 rayMarch(vec3 ro, vec3 rd) {\n    float t = 0.0;\n    vec4 color = vec4(0.);\n    for(int i = 0; i < 50; i++) {\n        vec3 p = ro + t * rd;\n        float sdf = length(p) - 1.;\n        float noise = fbm(p * 0.45 + iTime * 0.45);\n        noise = (noise + 0.7) / 3.;\n        float density = pow(7.2, -1.66*sdf) * noise;\n\n        if(density > 1e-3) {\n            vec4 c = vec4(\n                mix(\n                    vec3(1.0, 0.19, 0.0), \n                    vec3(1.0, 0.91, 0.0),\n                density), density);\n            c.a *= 0.2;\n            c.rgb *= c.a;\n            color += c * (1.0 - color.a);\n        }\n        t += sdf;\n    }\n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (2.0 * fragCoord - iResolution.xy) \n        / min(iResolution.y, iResolution.x);\n    \n    vec3 ro = vec3(0.0, 0.0, -2.0);\n    vec3 rd = normalize(vec3(uv, 1.0));  \n    fragColor = rayMarch(ro, rd);\n}","name":"Image","description":"","type":"image"}]}