{"ver":"0.1","info":{"id":"lcKyDy","date":"1732352824","viewed":22,"name":"Yroeht Gnirts","username":"HyPeRbLaH","description":"Forcing orbit to stay in bounds, and coloring based on the sum of the lengths of all excess distance.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float mbl(vec2 uv) {\n    vec2 z = vec2(0.0);\n    \n    float t = 0.0;\n    \n    int m = 164;\n    \n    for (int i = 0; i < m; ++i) {\n        z = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + uv;\n        float l = length(z);\n        if (l > 2.0) {\n            t += l - 2.0;\n            l = mod(l, 4.0) - 2.0;\n        }\n        z = normalize(z) * l;\n    }\n    \n    return t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t = sin(iTime * 0.1) * 0.5 + 0.5;\n    float t2 = sin(iTime * 0.01) * 0.5 + 0.5;\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord.xy -.5* iResolution.xy)*2.0/iResolution.y;\n    float aa = 1.0 / iResolution.y;\n    \n    float zoom = pow(.01,t*2.0);\n    \n    uv *= zoom;\n    aa *= zoom * 0.5;\n    \n    uv += mix(vec2(0.0), vec2(-0.67026, 0.4581), 1.0 - zoom);\n    //uv += vec2(-0.67026, 0.4581);\n    \n    float v = mbl(uv + vec2(-aa, 0.0));\n    v += mbl(uv + vec2(aa, 0.0));\n    v += mbl(uv + vec2(0.0, -aa));\n    v += mbl(uv + vec2(0.0, aa));\n    v /= 4.0;\n    \n    float s = 0.4;\n    \n    vec3 c = vec3(\n        sin(v * s + iTime),\n        sin(v * s + 3.14 / 3.0 + iTime),\n        sin(v * s + 6.28 / 3.0 + iTime)\n    ) * 0.5 + 0.5;\n    c *= 0.5 - cos(length(c) * 3.14) * 0.5;\n\n    // Output to screen\n    fragColor = vec4(c, 1.0);\n}","name":"Image","description":"","type":"image"}]}