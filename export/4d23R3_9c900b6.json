{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"texture","id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"// Created by inigo quilez - iq/2013\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// I've not seen anybody out there computing correct cell interior distances for Voronoi\n// patterns yet. That's why they cannot shade the cell interior correctly, and why you've\n// never seen cell boundaries rendered correctly. \n//\n// However, here's how you do mathematically correct distances (note the equidistant and non\n// degenerated grey isolines inside the cells) and hence edges (in yellow):\n//\n// https://iquilezles.org/articles/voronoilines\n\n\n#define ANIMATE\n\n\nvec2 hash( vec2 p )\n{\n\treturn texture( iChannel0, (p+0.5)/200.0, -100.0 ).xy;\n//    p = vec2( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)) );\n//\treturn fract(sin(p)*43758.5453);\n}\n\nvec3 voronoi( in vec2 x )\n{\n    vec2 n = floor(x);\n    vec2 f = fract(x);\n\n    //----------------------------------\n    // first pass: regular voronoi\n    //----------------------------------\n\tvec2 mg, mr;\n\n    float md = 8.0;\n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ )\n    {\n        vec2 g = vec2(float(i),float(j));\n\t\tvec2 o = hash( n + g );\n\t\t#ifdef ANIMATE\n        o = 0.5 + 0.5*sin( iTime*0.5 + 6.2831*o );\n        #endif\t\n        vec2 r = g + o - f;\n        float d = dot(r,r);\n\n        if( d<md )\n        {\n            md = d;\n            mr = r;\n            mg = g;\n        }\n    }\n\n    //----------------------------------\n    // second pass: distance to borders\n    //----------------------------------\n    md = 8.0;\n    for( int j=-2; j<=2; j++ )\n    for( int i=-2; i<=2; i++ )\n    {\n        vec2 g = mg + vec2(float(i),float(j));\n\t\tvec2 o = hash( n + g );\n\t\t#ifdef ANIMATE\n        o = 0.5 + 0.5*sin( iTime*0.5 + 6.2831*o );\n        #endif\t\n        vec2 r = g + o - f;\n\n\t\t\n        if( dot(mr-r,mr-r)>0.000001 )\n\t\t{\n        // distance to line\t\t\n        float d = dot( 0.5*(mr+r), normalize(r-mr) );\n\n        md = min( md, d );\n\t\t}\n    }\n\n    return vec3( md, mr );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord.xy/iResolution.xx*3.;\n\n    vec3 c = voronoi( 8.0*p );\n\tfloat centerDist = length( c.yz );\n\tfloat borderDist = c.x;\n\t\n\t// isolines for border distance\n    //vec3 col = c.x*(0.5 + 0.5*sin(32.0*c.x))*vec3(1.0);\n\t\n\t// isolines for point distance\n\tvec3 col = mix( vec3(1.0,1.0,1.0), vec3(1.0, 0.0, 0.0),\n\t\t\t\t   sin(8.*centerDist));\n\t\t\n    // borders\t\n    col = mix( vec3(0.9,0.,0.0), col, smoothstep( 0.0, 0.1, borderDist ) );\n    // feature points\n\t\n\tcol = mix( vec3(0.0,0.0,0.0), col, smoothstep( 0.15, 0.25, centerDist) );\n\t//col += vec3(0.0,0.6,0.9)*(1.0-smoothstep( 0.0, 0.04, dd));\n\n\tfragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4d23R3","date":"1391676984","viewed":602,"name":"Voronoi Squeeeeeze","username":"steverock","description":"based off of IQ's voronoi edges shader. very cool stuff","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["voronoi"],"hasliked":0,"parentid":"","parentname":""}}