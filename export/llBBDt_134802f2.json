{"ver":"0.1","info":{"id":"llBBDt","date":"1517530461","viewed":150,"name":"Radar Sweep","username":"salaark","description":"Modification of a class demonstration.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["toolboxfunctions"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 scrPt = uv * 2.0 - 1.0; // Transform to NDC\n    scrPt.x *= iResolution.x / iResolution.y; // Account for aspect ratio\n    \n    // Create rotation matrix based on time\n    mat2 rot;\n    float theta = -iTime * 1.0 * 3.14159 - 2.2; // The 2.2 was visually tweaked, repeatedly guess values until it looks right :)\n    float cosTheta, sinTheta;\n    cosTheta = cos(theta);\n    sinTheta = sin(theta);\n    rot[0][0] = cosTheta;\n    rot[0][1] = -sinTheta;\n    rot[1][0] = sinTheta;\n    rot[1][1] = cosTheta;\n    \n    vec2 scrPtRot = rot * scrPt;\n    \n    // Parameterize radar shape\n    float angle = 1.0 - (atan(scrPtRot.y, scrPtRot.x) / 6.2831 + 0.5);\n    float falloff = 1.0 - length(scrPtRot);\n    \n    // Color accumulator\n    vec3 col = vec3(0);\n    \n    // Rings\n    float ringSpacing = 0.23;\n    if(mod(length(scrPtRot), ringSpacing) < 0.015 && length(scrPtRot) / ringSpacing < 5.0) {\n        col += vec3(0, 0.5, 0);\n    }\n    \n    // 2D SDF (you should actually use step()!) with color intensity function made in GraphToy (https://iquilezles.org/apps/graphtoy/)\n    if(length(scrPt - vec2(0.5, 0.5)) < 0.05) {\n        //col.r = 2.0 * max(0.0, fract(-iTime * 0.5) - 0.5); // Old function described in class\n        \n        // New way to animate the point! While the above function does work, it is difficult to make it\n        // visually align with the radar line. If we make the dot color a function of the angle, the blinking\n        // dot will match up perfectly. \n        col.g = angle * angle * angle; // Why angle^3? It makes the the dot's color intensity fall off faster.\n        // Try:\n        // col.r = angle;\n        // or\n        // col.r = pow(angle, 5.0);\n        // to see this in action. Keep in mind that angle is on the range [0, 1] when thinking about why this works!\n    }\n    \n    // Rings with no branching\n    col += vec3(0, 0.8, 0) * step(mod(length(scrPtRot), ringSpacing), 0.01) * step(length(scrPtRot), 1.0);\n    \n    fragColor = vec4(vec3(pow(angle, 2.0) * falloff) * vec3(0, 1, 0) + col, 1);\n}","name":"Image","description":"","type":"image"}]}