{"ver":"0.1","info":{"id":"XscfR2","date":"1525865325","viewed":173,"name":"Flood Fill Areas","username":"xyzw","description":"GLSL Flood Fill\n10-30 iterations are usually enough to fill areas of medium complexity","likes":2,"published":1,"flags":32,"usePreview":1,"tags":["2d","floodfill"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float f = texelFetch(iChannel0, ivec2(fragCoord), 0).g;\n    fragColor = f == 1.0 ? vec4(1.0) : f == 0.0 ? vec4(0.0) :\n                vec4((sin(f * 9390315.1) + 1.0) * 0.45 + 0.1,\n                     (sin(f * 5150327.2) + 1.0) * 0.45 + 0.1,\n                     (sin(f * 2740330.3) + 1.0) * 0.45 + 0.1, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0);\n    \n    if (iTime < 1.5)\n    {\n\t    vec2 uv = fragCoord / iResolution.xy;\n\t\tfloat f = texture(iChannel0, uv + uv.yx*0.1).g;\n\t    f = f > 0.21 ? 1.0 : 0.0;\n\t    fragColor = vec4(f);\n    }\n    else if (iTime < 2.0)\n    {\n        float c00 = texelFetch(iChannel1, ivec2(fragCoord), 0).g;\n        float c10 = texelFetch(iChannel1, ivec2(fragCoord) - ivec2(1, 0), 0).g;\n        float c01 = texelFetch(iChannel1, ivec2(fragCoord) - ivec2(0, 1), 0).g;\n        if (c00 >= 1.0 && c01 == 0.0 && c10 == 0.0)\n            c00 = fract(fragCoord.x * 0.001 + fragCoord.y * 0.0032) * 0.5 + 0.3;\n\n        fragColor = vec4(c00);\n    }\n    else\n    {\n        float c00 = texelFetch(iChannel1, ivec2(fragCoord), 0).g;\n        if (c00 > 0.0)// && iFrame % 65 == 0)\n        {\n            int horzFillDist = (iFrame & 1) == 0 ? 512 : 0;\n            int vertFillDist = (iFrame & 1) == 1 ? 512 : 0;\n            for (int i = 1; i < horzFillDist; i++)\n            {\n\t            float p = texelFetch(iChannel1, ivec2(fragCoord) + ivec2(i, 0), 0).g;\n                if (p == 0.0)\n                    break;\n\t            if (p < c00)\n\t                c00 = p;               \n            }\n            for (int i = 1; i < horzFillDist; i++)\n            {\n\t            float p = texelFetch(iChannel1, ivec2(fragCoord) - ivec2(i, 0), 0).g;\n                if (p == 0.0)\n                    break;\n\t            if (p < c00)\n\t                c00 = p;               \n            }\n            for (int i = 1; i < vertFillDist; i++)\n            {\n\t            float p = texelFetch(iChannel1, ivec2(fragCoord) + ivec2(0, i), 0).g;\n                if (p == 0.0)\n                    break;\n\t            if (p < c00)\n\t                c00 = p;               \n            }\n            for (int i = 1; i < vertFillDist; i++)\n            {\n\t            float p = texelFetch(iChannel1, ivec2(fragCoord) - ivec2(0, i), 0).g;\n                if (p == 0.0)\n                    break;\n\t            if (p < c00)\n\t                c00 = p;               \n            }\n        }\n        \n        fragColor = vec4(c00);\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}