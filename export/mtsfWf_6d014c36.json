{"ver":"0.1","info":{"id":"mtsfWf","date":"1693560502","viewed":192,"name":"Adaptive Threshold + Camera","username":"soofgo","description":"Adaptive Threshold with webcam","likes":0,"published":3,"flags":34,"usePreview":0,"tags":["adaptivethreshold"],"hasliked":0,"parentid":"NtdSRM","parentname":"Camera Driven Game of Life"},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tfragColor = texture(iChannel0, fragCoord/iResolution.xy);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// 16x acceleration of https://www.shadertoy.com/view/4tSyzy\n// by applying gaussian at intermediate MIPmap level.\n\nconst int samples = 35,\n          LOD = 2,         // gaussian done on MIPmap at scale LOD\n          sLOD = 1 << LOD; // tile size = 2^LOD\nconst float sigma = float(samples) * .25;\n\nfloat gaussian(vec2 i) {\n    return exp( -.5* dot(i/=sigma,i) ) / ( 6.28 * sigma*sigma );\n}\n\nvec4 blur(sampler2D sp, vec2 U, vec2 scale) {\n    vec4 O = vec4(0);  \n    int s = samples/sLOD;\n    \n    for ( int i = 0; i < s*s; i++ ) {\n        vec2 d = vec2(i%s, i/s)*float(sLOD) - float(samples)/2.;\n        O += gaussian(d) * textureLod( sp, U + scale * d , float(LOD) );\n    }\n    \n    return O / O.a;\n}\n\nvec4 threshold(in vec4 tx){\n    const float Soft = 0.001;\n    const float Threshold = 0.02;\n    float f = Soft / 5.0;\n\tfloat a = Threshold - f;\n\tfloat b = Threshold + f;\n    float l = (tx.x + tx.y + tx.z) / 3.0;\n\t\n\tfloat v = smoothstep(a, b, l);\n\t\n\treturn vec4(v);\n\n}\n\nvoid mainImage(out vec4 Result, vec2 U) {\n    vec4 blurred = blur( iChannel0, U/iResolution.xy, 1./iChannelResolution[0].xy);\n    vec4 subbed = texture(iChannel0, U/iResolution.xy) - blurred;\n    Result = threshold(subbed);\n    \n}","name":"Buffer B","description":"","type":"buffer"}]}