{"ver":"0.1","info":{"id":"ctl3Dj","date":"1672436993","viewed":127,"name":"TriangleRenderer","username":"MrHAX00","description":"Once I figure out how to project vertices in 3d space into the screen this will allow me to render 3d things without the help of SDFs!\n\nAs long as I'm credited properly I'm okay with anyone using this!","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["triangle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define Line(uv, P1, P2) ((uv.x - P1.x) * (P1.y - P2.y) / (P1.x - P2.x) + P1.y)\n\nfloat Triangle(vec2 uv, vec2 P1, vec2 P2, vec2 P3)\n{\n    vec2 Center = (P1 + P2 + P3) / 3.;\n    \n    float Sign1 = sign(Center.y - Line(Center, P1, P2));\n    float Line1 = sign((uv.y - Line(uv, P1, P2)) * Sign1) * .5 + .5;\n    \n    float Sign2 = sign(Center.y - Line(Center, P2, P3));\n    float Line2 = sign((uv.y - Line(uv, P2, P3)) * Sign2) * .5 + .5;\n    \n    float Sign3 = sign(Center.y - Line(Center, P3, P1));\n    float Line3 = sign((uv.y - Line(uv, P3, P1)) * Sign3) * .5 + .5;\n    \n    return Line1 * Line2 * Line3;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - iResolution.xy * .5) / iResolution.y;\n\n    float Sum = Triangle(\n        uv,\n        vec2(0.),\n        vec2(sin(iTime * 2.3446) * .3, sin(iTime * 5.653) * .3),\n        vec2(sin(iTime) * .3, sin(iTime * 1.653) * .3)\n    );\n\n    // Output to screen\n    fragColor = vec4(vec3(Sum), 1.);\n}","name":"Image","description":"","type":"image"}]}