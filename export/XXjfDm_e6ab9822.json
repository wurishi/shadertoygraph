{"ver":"0.1","info":{"id":"XXjfDm","date":"1729546891","viewed":45,"name":"White Balance Colors","username":"izutionix","description":" A-B G-M coordinate white balance colors.\nTemperature Horizontal, Tint Vertical.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["whitebalance","colorbalance","abgm"],"hasliked":0,"parentid":"4X2fWm","parentname":"The All Seeing Green Orb"},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.141592653589793\n#define smoothGain(x, b) b*x/(b*abs(x)-abs(x)+1.)\n\n/*vec3 smoothGain(vec3 original, vec3 brightness) {\n    vec3 brightnessOverflow = (abs(original) * brightness) - abs(original);\n    return (original * brightness) / brightnessOverflow;\n}*/\n\nvec3 rgbToYuv(vec3 rgb) {\n    float luma = rgb.g;\n    float blueness = rgb.b - luma;\n    float redness = rgb.r - luma;\n    return vec3(luma, redness, blueness);\n}\n\nvec3 yuvToRgb(vec3 yuv) {\n    float green = yuv.x;\n    float red = yuv.y + green;\n    float blue = yuv.z + green;\n    return vec3(red, green, blue);\n}\n\nvec3 adjustSaturation(vec3 color, float sat) {\n    float grey = dot(color, vec3(1./3.));\n    vec3 chroma = color - grey;\n    return grey + smoothGain(chroma, sat);\n}\n\nvec3 whiteBalanceColor(vec2 uv) {\n    float epsilon = 1e-4;\n    //float angle = -PI/4.;\n    \n    uv.y *= -1.; // flip vertically\n    \n    //uv *= mat2( cos(angle), -sin(angle), sin(angle), cos(angle) );\n    uv *= mat2( 0.707107, 0.707107, -0.707107, 0.707107 ); // -45 degrees rotation matrix\n    vec3 col = yuvToRgb(vec3(0.5, uv*epsilon));\n    col = adjustSaturation(col, 1./epsilon);\n    return normalize(col) * 2.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 mouse = iMouse.xy/iResolution.xy;\n\n    vec3 col = texture(iChannel0, uv).rgb;\n    \n    vec3 multiplier = whiteBalanceColor(2.*mouse-1.);\n    col = smoothGain(col, multiplier);\n    col = whiteBalanceColor(2.*uv-1.) / 2.;\n\n    //col = vec3(uv, 0.);\n    fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"}]}