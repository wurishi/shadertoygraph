{"ver":"0.1","info":{"id":"ss33Rf","date":"1630341809","viewed":246,"name":"Casino Carpet","username":"104","description":"watch & stare","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["quickndirty"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float Complexity = 10.;\n\nvec4 hash42(vec2 p)\n{\n\tvec4 p4 = fract(vec4(p.xyxy) * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}\n\nmat2 rot2D(float r){\n    return mat2(cos(r), sin(r), -sin(r), cos(r));\n}\n\n\nvoid mainImage(out vec4 o, vec2 C)\n{\n    vec2 uv = C/iResolution.x;\n    vec2 N = C/iResolution.xy;\n    float ND = min(N.x, min(N.y, min(1.-N.x, 1.-N.y))); // dist to edge of screen.\n    ND = 1.-pow(1.-ND,9.);\n    \n    uv += 2.;\n    o = vec4(0);\n\n    for (float i = 1.0; i <= Complexity;++i) {\n        vec2 cell = floor(uv);\n        vec2 p = fract(uv);\n        float Z = length(p-.5);\n        vec4 h = hash42(cell);\n        float sdsq = min(p.x, min(p.y, min(1.-p.x, 1.-p.y)));\n        o = mix(o,h/i,sdsq*sdsq*sdsq);\n        // rotating uv is pretty much the entire effect, though it destroys\n        // continuity between layers. voronoi would be a better basis tbh\n        uv = cell + (p * rot2D(Z+iTime *.1  * (i-1.) * (h.z-.5)));\n        uv *= 2.;\n        //uv *= 1.+ND; // cool variation imo\n    }\n    \n    o = smoothstep(0.,.07,o);\n    o = clamp(o,0.,1.);\n    N -= .5;\n    o *= 1.-dot(N,N*2.);\n}\n\n","name":"Image","description":"","type":"image"}]}