{"ver":"0.1","info":{"id":"fscXWs","date":"1634140617","viewed":74,"name":"Rorschach toi-mÃªme","username":"hu9o","description":"yep","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["simple","rorschach"],"hasliked":0,"parentid":"7stXWf","parentname":"Simple Rorschach"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Stolen from https://www.shadertoy.com/view/Xltfzj\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float Pi = 6.28318530718; // Pi*2\n    \n    // GAUSSIAN BLUR SETTINGS {{{\n    float Directions = 16.0; // BLUR DIRECTIONS (Default 16.0 - More is better but slower)\n    float Quality = 4.0; // BLUR QUALITY (Default 4.0 - More is better but slower)\n    float Size = 6.0; // BLUR SIZE (Radius)\n    // GAUSSIAN BLUR SETTINGS }}}\n   \n    vec2 Radius = Size/iResolution.xy;\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    // Pixel colour\n    float spec = texture(iChannel1, uv).r;\n    \n    // Blur calculations\n    for( float d=0.0; d<Pi; d+=Pi/Directions)\n    {\n\t\tfor(float i=1.0/Quality; i<=1.0; i+=1.0/Quality)\n        {\n\t\t\tspec += texture( iChannel1, uv+vec2(cos(d),sin(d))*Radius*i).r;\t\n        }\n    }\n    \n    // Output to screen\n    spec /= Quality * Directions - 15.0;\n    \n    if (spec < 0.55)\n        spec = 0.0;\n        \n    spec -= 1.0;\n    spec *= spec;\n    spec = 1.0 - spec;\n    spec *= 0.85;\n    \n    vec4 white = vec4(1., 1., 1., 1.);\n    vec4 ink = vec4(0., .1, .25, 1.);\n    \n    float color = texture(iChannel0, uv).r;\n    \n    fragColor = mix(ink, white, color + spec);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xsf3Rr","filepath":"/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","previewfilepath":"/media/ap/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Forked from https://www.shadertoy.com/view/7stXWf\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float speed = 0.05;\n    float size = 0.045;\n    float alphaCut = 0.4;\n    float timeOffset = 106.70;\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x = uv.x > 0.5 ? 1.0 - uv.x : uv.x;\n    \n    float circleMask = 1.0 - length((uv - vec2(0.5, 0.5))*2.0);\n    float tex1 = texture(iChannel0, (uv + (iTime + timeOffset) * speed) * size).r;\n    float tex2 = texture(iChannel0, (uv - (iTime + timeOffset) * speed) * size).r;\n    float noise = tex1 * tex2;\n    \n    float col = mix(1.0, noise, circleMask);\n    col = step(alphaCut, col);\n    \n    // Output to screen\n    fragColor = vec4(col, col, col, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// Specular (crappy edge-detection)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float ratio = iResolution.x/iResolution.y;\n    float scale = 1.;\n\n    float a = texture(iChannel0, uv).r;\n    float b = texture(iChannel0, uv + vec2(-2., 2.*ratio)/iResolution.y*scale).r;\n    float c = texture(iChannel0, uv + vec2(-3.5, 3.5*ratio)/iResolution.y*scale).r;\n    float d = texture(iChannel0, uv + vec2(-3.5, -1.*ratio)/iResolution.y*scale).r;\n    float e = texture(iChannel0, uv + vec2(5., -1.*ratio)/iResolution.y*scale).r;\n    \n    float col = (b < c && a == d && a == e) ? 1.0 : 0.0;\n    \n    fragColor = vec4(col, col, col, col);\n}","name":"Buffer B","description":"","type":"buffer"}]}