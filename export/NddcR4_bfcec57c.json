{"ver":"0.1","info":{"id":"NddcR4","date":"1653172882","viewed":144,"name":"Mationi - White Border","username":"juanpetrik","description":"White Border","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["mationiwhiteborder"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define A .0 // Amplitude\n#define V 8. // Velocity\n#define W 9. // Wavelength\n#define T .07 // Thickness\n#define S 2. // Sharpness\n#define GAP vec2(0.006, 0.008) //gap for edge\n\nfloat sine(vec2 p){\n    return pow(T / abs((p.y + 0.0)), S);\n}\n\nbool detectEdge(vec2 fCoord, vec2 gap) {\n    vec2 uv = fCoord.xy / iResolution.xy;\n    vec2 edgeDistance = 0.5 -  abs(uv - 0.5);\n    \n    bvec2 edgeCompare = lessThan(edgeDistance, gap);\n    bool isEdge = edgeCompare.x || edgeCompare.y;\n    \n    return isEdge;\n}\n\nfloat blurEdge(vec2 fCoord, vec2 gap) {\n    vec2 uv = fCoord.xy / iResolution.xy;\n    \n    if(uv.y > (1.0 - gap.y)) {\n    \tfloat blurValue = 1.0 - pow(T / abs(uv.y - (1.0 - gap.y)), S);\n        return blurValue;\n    } \n    \n    if(uv.y < gap.y) {\n    \tfloat blurValue = 1.0 - pow(T / abs(uv.y - gap.y), S);\n        return blurValue;\n    }\n    \n    if(uv.x > (1.0 - gap.x)) {\n    \tfloat blurValue = 1.0 - pow(T / abs(uv.x - (1.0 - gap.x)), S);\n        return blurValue;\n    } \n    \n    if(uv.x < gap.x) {\n    \tfloat blurValue = 1.0 - pow(T / abs(uv.x - gap.x), S);\n        return blurValue;\n    } \n    \n    return 1.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    if(detectEdge(fragCoord, GAP)) {\n        float channelColor = blurEdge(fragCoord, GAP);\n    \tfragColor = vec4(1.0, 1.0, 1.0, 1.0);\n    } else {\n    \tfragColor = vec4(0.0, 0.0, 0.0, 0.0);\n    }\n}","name":"Image","description":"","type":"image"}]}