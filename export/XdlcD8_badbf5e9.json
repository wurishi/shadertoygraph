{"ver":"0.1","info":{"id":"XdlcD8","date":"1487987989","viewed":98,"name":"JS Mandelbrot Set","username":"jscoggin","description":"Mandelbrot Set","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float smooth_step( float edge0, float edge1, float x )\n{\n    float p = clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0);\n    float v = p * p * (3.0 - 2.0 * p); // smoothstep formula\n    \n    //v = smoothstep( edge0, edge1, x ); // Compare with built-in\n    \n    return v;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if(fragCoord.y < iResolution.y / 100.0)\n    {\n        float pct = (fragCoord.x / iResolution.x) + (iTime / 400.0);\n        fragColor = vec4(sin(mix(0.0, 125.664, pct)),sin(mix(0.0, 125.664, pct + 0.33)),sin(mix(0.0, 125.664, pct + 0.66)),1.0);\n    }\n    else\n    {\n        float localTime = smooth_step(0.0, 1.0, mod(iTime, 30.0) / 30.0);\n        float time = sqrt(sin(localTime * 3.14159));\n        //float time = mod(iTime, 32.0) * 0.2;\n        //float scale = min(200.0, 2.0 / pow(time, time));\n        float scale = mix(1.5, 0.00001, time);\n        float sizeX = 3.5 * scale;\n        float sizeY = 2.0 * scale;\n        //float centerX = -0.75;\n        //float centerY = 0.0;\n        float centerX = -1.78;\n        float centerY = 0.0;\n        float minX = centerX - sizeX / 2.0;\n        float maxX = minX + sizeX;\n        float minY = centerY - sizeY / 2.0;\n        float maxY = minY + sizeY;\n        float xPercent = fragCoord.x / iResolution.x;\n        float yPercent = fragCoord.y / iResolution.y;\n        float x0 = mix(minX, maxX, xPercent); //scaled x coordinate of pixel (scaled to lie in the Mandelbrot X scale (-2.5, 1))\n        float y0 = mix(minY, maxY, yPercent); //scaled y coordinate of pixel (scaled to lie in the Mandelbrot Y scale (-1, 1))\n        float x = 0.0;\n        float y = 0.0;\n        int iteration = 0;\n        int max_iteration = 1000;\n        while (x*x + y*y < 2.0*2.0  &&  iteration < max_iteration) {\n            float xtemp = x*x - y*y + x0;\n            y = 2.0*x*y + y0;\n            x = xtemp;\n            iteration = iteration + 1;\n        }\n        //float color = sin(float(iteration) / float(max_iteration)); //palette[iteration]\n        //fragColor = vec4(color);\n        float pct = (float(iteration) / float(max_iteration)) + (iTime / 400.0);\n        fragColor = vec4(sin(mix(0.0, 125.664, pct)),sin(mix(0.0, 125.664, pct + 0.33)),sin(mix(0.0, 125.664, pct + 0.66)),1.0);\n    }\n}\n\n\n\n","name":"Image","description":"","type":"image"}]}