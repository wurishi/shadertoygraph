{"ver":"0.1","info":{"id":"4fSGWt","date":"1704752196","viewed":75,"name":"[steve] a star","username":"import_shader_steve","description":"just a star, but not drawn using normal functions. Drawn using polar coords. Method from Texturing & modeling 2nd edition book p45.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["astar"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159\n#define blur 0.002\n#define WHITE (1., 1., 1.)\n#define BLACK (0., 0., 0.)\n\nconst float numOfAngles = 5.;\nconst float rmin = 0.3;\nconst float rmax = 0.8;\n\nfloat circle(vec2 p, float r) {\n    float d = length(p) - r;\n    return smoothstep(blur, -blur, d);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2. - iResolution.xy) / iResolution.y;\n    \n    vec3 col = vec3(0.);\n    \n    float angle = atan(-uv.x, -uv.y) + PI; // [0., 2PI], from top center position, in clockwise direction, 1 round, back to top center position\n    //col += vec3(1.) * angle;\n    \n    float fullAngle = 360. / numOfAngles;\n    float halfAngle = 360. / numOfAngles / 2.;\n    \n    float a = degrees(angle); // [0., 360.]\n    a = mod(a, fullAngle); // [0., 72.]\n    if (a > halfAngle) {\n        a = fullAngle - a; // [0., 36.] & [36., 0.]\n    }\n    a = radians(a); // convert back to radians\n    \n    float r = length(uv);\n    \n    vec3 p0 = vec3(sin(0.), cos(0.), 0.) * rmax;\n    vec3 p1 = vec3(sin(radians(halfAngle)), cos(radians(halfAngle)), 0.) * rmin;\n    vec3 d0 = p1 - p0;\n    vec3 d1 = vec3(sin(a), cos(a), 0.) * r - p0;\n    \n    float f = cross(d0, d1).z;\n    \n    // float in_out = smoothstep(blur, -blur, cross(d0, d1).z);\n    float in_out = smoothstep(fwidth(f), -fwidth(f), f);\n    col += mix(BLACK, WHITE, in_out);\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}