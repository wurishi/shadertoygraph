{"ver":"0.1","info":{"id":"XttGW8","date":"1469052436","viewed":316,"name":"Julia Practice","username":"Milk","description":"just trying to figure out fractals ","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fractal","julia","set"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","previewfilepath":"/media/ap/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float maxSteps = 200.0;\n\nvec2 complexSquare( vec2 v ) {\n\treturn vec2(\n\t\tv.x * v.x - v.y * v.y,\n\t\tv.x * v.y * 2.0\n\t);\n}\n\n//steps coloring\nfloat calc(vec2 z, vec2 c) {\n    for(float i = 0.0; i < maxSteps; i++){\n    \tz = complexSquare(z) + c;\n        if (dot(z,z) > 40.0) {\n            return i;\n            break;\n        }\n    }\n    return 0.0;\n}\n\n//orbit trap point coloring\nfloat orbitTrap(vec2 z, vec2 c, vec2 point) {\n\tfloat dist = 1000.0;\n    float prevDist;\n    float nextDist;\n    for(float i = 1.0; i < maxSteps; i++){\n        \n    \tz = complexSquare(z) + c;\n        \n        prevDist = dist;\n        nextDist = abs(sqrt(z.x-point.x/z.y-point.y));\n        dist = min(prevDist, nextDist);\n    }\n    return dist;\n}\n\nfloat saturation(vec4 color) {\n    float Radj = color.r/255.0;\n    float Gadj = color.g/255.0;\n    float Badj = color.b/255.0;\n    \n    float PCmax = max(Radj, Gadj);\n    float Cmax = max(PCmax, Badj);\n    \n    float PCmin = min(Radj, Gadj);\n    float Cmin = min(PCmax, Badj);\n    \n    float saturation;\n    \n    if (Cmax == 0.0) {\n        saturation = 0.0;\n    } else {\n    \tsaturation = (Cmax-Cmin)/Cmax;\n    }\n    return saturation;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy - iResolution.xy * 0.5;\n\tuv *= 2.5 / min( iResolution.x, iResolution.y );\n    float xPre = uv.x+(iTime/10.0);\n    \n    float pi = 3.1415;\n\n    \n    vec2 driftUV = vec2(uv.x, (.1*sin(20.0 * xPre))+uv.y);\n    vec2 driftUV2 = vec2(uv.x, (.1*sin((20.0 * xPre) + pi/8.0))+uv.y);\n    vec2 driftUV3 = vec2(uv.x, (.1*sin((20.0 * xPre) + 2.0*pi/8.0))+uv.y);\n\n    vec2 texCoord = vec2(iTime/60.0,(iTime/60.0)/iResolution.x);\n    vec4 texColor = texture(iChannel0,texCoord);\n\n    float fft  = texture( iChannel1, vec2(uv.x,0.75) ).x; \n    \n    //vec2 c = vec2(saturation(texColor), sin(iTime/10.0));\n    vec2 c = vec2(sin(iTime/10.0), sin(iTime/10.0));\n    //vec2 c = vec2(fft, sin(iTime/10.0));\n    //vec2 c = vec2(.25,.5);\n    \n    vec2 redPoint = vec2(3.0*iResolution.x/4.0*sin(iTime),3.0*iResolution.y/4.0*sin(iTime));\n    vec2 bluePoint = vec2(iResolution.x/4.0*sin(iTime),iResolution.y/2.0*sin(iTime));\n    vec2 greenPoint = vec2(iResolution.x/4.0*sin(iTime),3.0*iResolution.y/4.0*sin(iTime));\n    \n    float dim = 0.04;\n    \n    float red = (orbitTrap(uv,c,redPoint)*dim);\n    float green = (orbitTrap(uv,c,greenPoint)*dim);\n    float blue = (orbitTrap(uv,c,bluePoint)*dim);\n    \n    fragColor = vec4(red,green,blue,1);\n}","name":"Image","description":"","type":"image"}]}