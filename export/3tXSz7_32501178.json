{"ver":"0.1","info":{"id":"3tXSz7","date":"1562362688","viewed":330,"name":"[TWITCH] Shader101 - 2D","username":"Flopine","description":"This is a shader I made during a live session on Twitch, about teaching people the basics of shadercoding. You can watch them here: https://www.twitch.tv/flopine","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["2d","glsl","repeat"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, Coyhot, Alkama and YX for teaching me\n// Thanks LJ for giving me the love of shadercoding :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  https://twitter.com/CookieDemoparty\n\n\n// This was a Twitch session where I gave people a course about the basics\n// of shadercoding.\n// Sorry Fabrice Neyret for not using smoothstep function for anti-aliasing ^^\"\n\n#define fGlobalTime iTime\n\n// rotation matrice function\nmat2 rot (float a)\n{return mat2 (cos(a), sin(a), -sin(a),cos(a));}\n\n// split the screen in two in the x axis\nfloat banding (vec2 uv)\n{\n    // 3 ways of doing it:\n    // 1.\n    //if(uv.x < 0.) return 0.;\n    //else return 1.;\n\t// 2.\n    //return (uv.x<0.) ? 0.: 1.;\n\t// 3.\n    return smoothstep(0., 0.1,uv.x);\n\n}\n\nfloat triangle (vec2 uv, float size)\n{\n    // symmetry in the y axis\n    uv.x = abs(uv.x);\n    return step(max(-uv.y,dot(uv,vec2(1.,0.6))), size);\n}\n\nfloat square (vec2 uv, float size)\n{\n    uv = abs(uv);\n    return step(max(uv.x, uv.y),size);\n}\n\n\nfloat circle (vec2 uv, float size)\n{return step(length(uv), size);}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = 2.*(fragCoord/iResolution.xy)-1.;\n    uv.x /= iResolution.y / iResolution.x;\n\t// scale the uv\n    uv *= 5.;\n    // repeating the uv into a grid in 2 ways\n    // 1.\n    //vec2 guv = mod(uv,1)-.5;\n    // 2.\n    vec2 guv = fract(uv)-.5;\n    // id of each cells\n    vec2 id = floor(uv);\n    guv *= rot(fGlobalTime*(length(id)+0.8)*0.3);\n    \n    float b = banding(uv);\n    // clamp the value is a security if you want to use those shapes as \n    // mask for example\n    float t = clamp(triangle(guv,0.15)-triangle(guv,0.05),0.,1.);\n    float s = clamp(square(guv, 0.35) - square(guv, 0.31),0.,1.);\n    float c = clamp(circle(uv,.8) - circle(uv,.7), 0., 1.);\n\t\n    // also necessary here because when the square and triangle intersect\n    // the color value is 2\n    vec3 col = clamp(vec3(s+t),0.,1.); \n\n    fragColor = vec4(col,1.);\n}","name":"Image","description":"","type":"image"}]}