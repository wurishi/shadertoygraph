{"ver":"0.1","info":{"id":"3lcyW4","date":"1609023307","viewed":220,"name":"Tribal Song (sound)","username":"athibaul","description":"You've been caught by an unknown tribe. What shall happen of you?","likes":9,"published":1,"flags":8,"usePreview":0,"tags":["sound","filtering","lowpass","resonant"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3Rr","filepath":"/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","previewfilepath":"/media/ap/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Tribal Song\n// by athibaul\n\n// You've been caught by an unknown tribe.\n// What shall happen of you?\n\n\n// Just some saturday night fun: \n// - Filtered-sawtooth-based sound (see Common tab)\n// - Simple 2D \"hand-drawn spiral\" shader\n\n#define TAU (2.*3.1415926535)\n#define R(th) mat2(cos(th), sin(th), -sin(th), cos(th))\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord*2.-iResolution.xy)/iResolution.y;\n    uv *= R(-iTime*(1.-exp(-iTime/200.))*30.);\n    float uvSpeed = (1.-exp(-iTime/200.))*60. * length(uv);\n    float lod = log2(uvSpeed*1024.*0.5*iTimeDelta); // Blur based on point speed\n    \n    vec3 ground = textureLod(iChannel0, uv*0.5, lod).rgb;\n    \n    float r = length(uv);\n    float theta = atan(uv.y, uv.x);\n    float rPerTurn = 0.2;\n    // Find closest point on the spiral\n    float rSpiral = rPerTurn * (theta/TAU + round(r/rPerTurn-theta/TAU));\n    float rSpiralMax = mix(0.9, 3.0, smoothstep(20., 50., iTime));\n    rSpiral = clamp(rSpiral, 0.1, rSpiralMax);\n    float thetaSpiral = TAU*rSpiral/rPerTurn;\n    rSpiral += 0.005 * sin(thetaSpiral*10.*rSpiral) + 0.01 * sin(thetaSpiral*thetaSpiral * 0.07);\n    vec2 pSpiral = rSpiral * vec2(cos(thetaSpiral), sin(thetaSpiral));\n    \n    float thickness = 0.04 + 0.005*sin(thetaSpiral*thetaSpiral*0.16)*(sin(thetaSpiral*thetaSpiral*0.3)-cos(thetaSpiral*thetaSpiral*0.2));\n    float dist = length(uv-pSpiral) - thickness;\n    //dist = min(dist, r-thickness);\n    \n    //vec3 col = vec3(theta/TAU + 0.5);\n    #if 0\n    vec3 col = vec3(0.);\n    float w = 2./iResolution.y;\n    col += smoothstep(w, -w, dist);\n    #else\n    float w = 2./iResolution.y;\n    vec3 blood = ground * vec3(0.3, 0.05, 0.02);\n    vec3 col = mix(ground, blood, smoothstep(w, -w, dist));\n    #endif\n    \n    col = pow(col, vec3(1.) + smoothstep(0.0, 3.0, r));\n    col *= smoothstep(3.0, 0.0, length(uv));\n    col *= smoothstep(-3.0, 3.0, uv.y);\n    col *= 3.0;\n    \n    \n    col = pow(col, vec3(1./2.2));\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"\nfloat lpfSaw(float t, float f, float fc, float Q)\n{\n    // Low-pass-filtered sawtooth wave\n    // See https://www.shadertoy.com/view/wsGyWm\n    // arguments are time, frequency, cutoff frequency, and resonance quality factor\n    float omega_c = 2.*3.14159*fc/f; // relative\n    t = f*t - floor(f*t);\n    // Compute the exact response of a second order system with those parameters\n    // (value and derivative are continuous)\n    // It is expressed as\n    // 1 - 2t + A exp(-omega_c*t/Q) * cos(omega_c*t+phi)\n    // We need to compute the amplitude A and phase phi.\n    float alpha = omega_c/Q, beta=exp(-alpha), c = cos(omega_c), s = sin(omega_c);\n    float tanphi = (alpha*beta*c + beta*omega_c*s - alpha) / (omega_c + alpha*beta*s - beta*omega_c*c);\n    // We could use more trigonometric identities to avoid computing the arctangent, but whatever.\n    float phi = atan(tanphi);\n    float A = -2./(cos(phi) - beta*cos(omega_c+phi));\n    \n    float v = 1.-2.*t + A*exp(-alpha*t) * cos(omega_c*t+phi);\n    return v;\n}\n\nvec3 vowelFormants(float vowelNum)\n{\n    if(vowelNum < 1.)\n        return vec3(300, 2100, 3000);\n    if(vowelNum < 2.)\n        return vec3(400, 2050, 2700);\n    if(vowelNum < 3.)\n        return vec3(600, 1950, 2500);\n    if(vowelNum < 4.)\n        return vec3(800, 1700, 2400);\n    if(vowelNum < 5.)\n        return vec3(700, 1100, 2200);\n    if(vowelNum < 6.)\n        return vec3(500, 1000, 2100);\n    if(vowelNum < 7.)\n        return vec3(400, 800, 2000);\n    return vec3(300, 800, 2000);\n}\n\nvec3 vowelInterp(float vowelNum)\n{\n    float vi = floor(vowelNum);\n    float vf = fract(vowelNum);\n    return mix(vowelFormants(vi),\n               vowelFormants(vi+1.),\n               vf);\n}\n\nfloat vowel(float t, float f, float vowelNum)\n{\n    float dphase = sin(t*0.01*f) * 0.005 + cos(t*0.0162*f) * 0.005;\n    t += dphase/t * 2.; // Slight detune\n    float v = 0.;\n    vec3 formants = vowelInterp(vowelNum);\n    v += lpfSaw(t, f, formants.x, min(10., 2.*formants.x/f));\n    v += lpfSaw(t, f, formants.y, 10.) * 0.8 * (2000./formants.y);\n    v += lpfSaw(t, f, formants.z, 10.) * 0.4 * (2000./formants.z);\n    return v/3.;\n}\n\nvec2 pan(float panning)\n{\n    float width = 0.8;\n    return normalize(vec2(0.5) + width*panning*vec2(-0.5, 0.5));\n}\n\n\nvec2 mainSound( in int samp, float time )\n{\n    #if 1\n    vec2 v = vec2(0);\n    v += 0.1 * vowel(time, 220., 4.+2.5*sin(13.*time)+1.5*sin(21.*time)) * pan(sin(time)) * smoothstep(0.0, 1.0, time);\n    v += 0.1 * vowel(time, 110., 4.+2.5*sin(8.*time)-1.5*sin(13.*time)) * (0.5+0.3*sin(time)) * pan(cos(0.8*time)) * smoothstep(5.0, 6.0, time);\n    v += 0.1 * vowel(time*0.9, 55./0.9, 4.+2.5*sin(5.*time)-1.5*sin(8.*time)) * (0.5-0.4*cos(0.5*time)) * pan(-cos(0.5*time)) * smoothstep(10.0, 11.0, time);\n    v += 0.1 * vowel(time, 165., 4.+2.5*sin(16.2*time)-1.5*sin(10.*time)) * (0.5-0.4*cos(time)) * pan(-sin(0.62*time))* smoothstep(15.0, 16.0, time);\n    v += 0.1 * vowel(time*1.1, 300., 4.+2.5*sin(6.2*time)-1.5*sin(25.*time)) * (0.5-0.4*sin(0.8*time)) * pan(-sin(0.62*time))* smoothstep(20.0, 21.0, time);\n    v += 0.1 * vowel(time*1.1, 400., 4.-2.5*sin(16.2*time)-1.5*sin(10.*time)) * (0.5-0.4*cos(0.62*time)) * pan(sin(1.62*time))* smoothstep(25.0, 26.0, time);\n    return v * smoothstep(0.0, 1.0, time);\n    \n    #else\n    vec2 v = vec2(0);\n    float vowelNum = 4.+1.5*sin(15.*time)+1.5*sin(20.*time)+1.*sin(2.5*time);\n    float f0 = 220.;\n    v += 0.1 * vowel(time, f0, vowelNum) * pan(0.) * smoothstep(0.0, 1.0, time);\n    v += 0.1 * vowel(time, f0/2., vowelNum-0.1) * pan(0.) * smoothstep(0.0, 1.0, time);\n    return v * smoothstep(0., 1., time);\n    #endif\n    \n} \n\n\n\n\n\n","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[],"code":"\n\n// mainSound() defined in Common Tab","name":"Sound","description":"","type":"sound"}]}