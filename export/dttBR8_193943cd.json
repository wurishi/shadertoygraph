{"ver":"0.1","info":{"id":"dttBR8","date":"1700955596","viewed":206,"name":"GM Shaders: Phi, Disk Blur","username":"Xor","description":"How to use the Golden Angle for even disk sampling in one pass\nWritten for my [url=https://mini.gmshaders.com/p/phi]Phi Tutorial[/url]","likes":29,"published":1,"flags":0,"usePreview":1,"tags":["tut","vogel","gmshaders"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n    \"GM Shaders: Phi, Rect Blur\" by @XorDev\n\n    Written for my Phi tutorial:\n    https://mini.gmshaders.com/p/phi\n*/\n\n//Golden Angle, Tau*(2-Phi)\n#define G_A 2.399963\n//Half pi, Tau/4.0\n#define HPI 1.570796\n\n//Gamma for blurring\n#define GAMMA 6.0\n//I chose 6 for clarity\n//2.2 is most accurate\n//2.0 is a fast approximation\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //Compute texel size from screen resolution\n    vec2 texel = 1.0 /iResolution.xy;\n    //Compute screen uvs\n    vec2 uv = fragCoord * texel;\n    \n    //Time value for range dimensions\n    float t = iTime - sin(iTime*8.0)/8.0;\n    //Compute kernel range\n    float radius = sin(t) * iResolution.y * 0.05;\n    //Use mouse when pressed\n    if (iMouse.z>0.) radius = (iMouse.x - iResolution.x*0.5)*0.3;\n    \n    //Sample quality level\n    float level = floor(roundEven(fragCoord.x)*texel.x*4.0);\n    //Compute sample number: 20, 40, 80 and 160\n    float num = 20.0 * exp2(level);\n    \n    //Blur total for averaging\n    vec4 blur = vec4(0);\n    for(float i=0.0; i<num; i++)\n    {\n        //Compute sample coordinates\n        //To optimize this, precompute the Golden Angle rotation matrix\n        //Then you can just multiply a fixed vector by that with each iteration.\n        //See: https://www.shadertoy.com/view/4d2Xzw\n        vec2 c = uv + cos(i*G_A + vec2(0,HPI)) * sqrt(i/num) * radius * texel;\n        //Apply gamma correction\n        blur += pow(texture(iChannel0, c), vec4(GAMMA));\n    }  \n    //Compute average and convert back to sRGB (with level dividers)\n    fragColor = pow(blur / num, vec4(1.0/GAMMA)) - fwidth(level);\n}","name":"Image","description":"","type":"image"}]}