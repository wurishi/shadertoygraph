{"ver":"0.1","info":{"id":"dtsXR8","date":"1674309990","viewed":92,"name":"triangle defination","username":"gauravalgo","description":"triangle sdf","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["sdf","triangle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define PI 3.1415926535\n\n#define ROT(x) mat2(cos(x), -sin(x), sin(x), cos(x))\n\n#define RADIUS .7\n#define HALF_RADIUS RADIUS * .5\n#define NAVY_BLUE vec3(0., 0., .534)\nvec3 RED = vec3(255,153,51)/255.;\nvec3 GREEN = vec3(51,255,51)/255.;\nvec3 WHITE=vec3(255,255,255)/255.;\n//The flag is coincidentally very similar to the civil flag of Andorra and \n//the state flag of Chad. \n//The similarity with Chad's flag, which is identical apart from allowing a broader range of shades of \n//blue, yellow and red, has caused international discussion. \n//see https://en.wikipedia.org/wiki/Flag_of_Romania\n//the gl_FragColor is a vec4 type of float values in the range 0 to 1.\nfloat sdTriangle( in vec3 refrence_coordinate_system, in vec3 Dpoint0, in vec3 Dpoint1, in vec3 Dpoint2 )\n{\n     \n    vec3 vector0 =  refrence_coordinate_system - Dpoint0;\n    vec3 vector1 =  refrence_coordinate_system - Dpoint1;\n    vec3 vector2 =  refrence_coordinate_system - Dpoint2;\n    \n    \n    vec3 edge0 = vector1 -  vector0;\n    vec3 edge1 = vector2 -  vector1;\n    vec3 edge2 = vector0 -  vector2;\n    \n    float test1=dot(cross(edge0,vector0) , cross(edge0,-edge2));\n    float test2=dot(cross(edge1,vector1) , cross(edge1,-edge0));\n      float test3=dot(cross(edge2,vector2) , cross(edge2,-edge1));\n      \n      if(test1 < 0.0 && test2 < 0.0 && test3 < 0.0)\n      {\n          vec3 area_of_a_triangle = 0.5 * cross(edge0,edge1);\n          float len = clamp(length(area_of_a_triangle),0.0,1.0);\n          //distance1 += 0.1;\n          return len;\n      }\n      else\n      {\n          return 1.0;\n      }\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    //mapping the co-ordinate system to -1 to 1\n    vec2 c = 2.0*uv - 1.0;\n    \n    // please add the aspect ratio which i will calculate in x direction\n    float aspectratio = iResolution.x / iResolution.y;\n    \n    c.x *= aspectratio;\n    \n    vec3 colour = vec3(1.0,1.0,1.0);\n    \n    vec2 point0 = vec2(-0.6,0.5);\n    vec2 point1 = vec2(0.1,-0.5);\n    vec2 point2 = vec2(0.6,0.5);\n    \n     vec2 point01 = vec2(0.1,-0.5);\n    vec2 point12 = vec2(1.5,-0.7);\n    vec2 point23 = vec2(0.6,0.5);\n    \n    if(dot(c-point0,c-point0)<0.001) \n        colour = vec3(1.0,0.0,0.0);\n    if(dot(c-point1,c-point1)<0.001)\n        colour = vec3(0.0,1.0,0.0);\n    if(dot(c-point2,c-point2)<0.001)\n        colour = vec3(0.0,0.0,1.0);\n   \n    vec3 refrence_coordinate_system = vec3(c.x,c.y,0.0);\n    \n    vec3 Dpoint0 = vec3(point0,0.0);\n    vec3 Dpoint1 = vec3(point1,0.0);\n    vec3 Dpoint2 = vec3(point2,0.0);\n    \n     vec3 Dpoint01 = vec3(point01,0.0);\n    vec3 Dpoint11 = vec3(point12,0.0);\n    vec3 Dpoint22 = vec3(point23,0.0);\n    \n    \n    float d = sdTriangle( refrence_coordinate_system, Dpoint0, Dpoint1, Dpoint2 );\n     d *= sdTriangle( refrence_coordinate_system, Dpoint01, Dpoint11, Dpoint22 );\n   \n   \n    float spokes = 0., spokeThickness = .03, notches = 0., theta = 2. * PI / 24.;\n   \n   \n   \n   colour *= vec3(d,d,d);\n    \n    \n    \n   \n    fragColor=vec4(colour,1.0);\n    \n    \n    \n    \n    // Output to screen\n    // fill the screen with red\n   // fragColor = vec4(RED,0);\n    // fill the 2/3 of size with white color\n    //if(uv.y<(1.0/1.5))\n    //fragColor = vec4(WHITE,0);\n    // fill the last 1/3 with the green color \n    //if(uv.y<1.0/3.0)\n    //fragColor = vec4(GREEN,0);\n    \n    \n}\n\n","name":"Image","description":"","type":"image"}]}