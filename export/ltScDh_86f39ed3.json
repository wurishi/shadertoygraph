{"ver":"0.1","info":{"id":"ltScDh","date":"1508342230","viewed":119,"name":"Nostaligia","username":"digorydoo","description":"This is a very simple demo.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["2ddemoscrolltext"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float grid (vec2 screenPos)\n{\n    float x = mod (screenPos.x - 0.024, 0.2);\n    float y = mod (screenPos.y - 0.024, 0.2);\n    return (x < 0.15 && y < 0.15) ? 1.0 : 0.0;\n}\n\nfloat background (vec2 screenPos, float t)\n{\n    float a = cos (3.0 * screenPos.x + 1.75);\n    float b = sin (3.0 * screenPos.y);\n    float c = cos (a + sin (b + t));\n    float d = sin (b + cos (a + t));\n    float e = 2.0 * cos (4.0 * c + t) * sin (4.0 * d + t);\n    return (c + d) * e * 0.5; //  + 0.1 * grid (screenPos);\n}\n\nvec3 palette (float g)\n{\n    if (g < 0.0)\n    {\n        return vec3 (0.0, 0.0, 0.0);\n    }\n    else if (g < 0.5)\n    {\n        float p = g / 0.5;\n        float q = 1.0 - p;\n        vec3 c1 = vec3 (1.0, 0.5, 0.0);\n        vec3 c2 = vec3 (0.0, 0.0, 1.0);\n        return p * c1 + q * c2;\n    }\n    else\n    {\n        float p = (g - 0.5) / 0.5;\n        float q = 1.0 - p;\n        vec3 c1 = vec3 (0.0, 0.0, 1.0);\n        vec3 c2 = vec3 (0.5, 1.0, 0.0);\n        return p * c1 + q * c2;\n    }\n}\n\nint LETTER_A[7] = int[](6, 9, 9, 15, 9, 9, 9);\nint LETTER_B[7] = int[](14, 9, 9, 14, 9, 9, 14);\nint LETTER_C[7] = int[](7, 8, 8, 8, 8, 8, 7);\nint LETTER_D[7] = int[](14, 9, 9, 9, 9, 9, 14);\nint LETTER_E[7] = int[](15, 8, 8, 14, 8, 8, 15);\nint LETTER_F[7] = int[](15, 8, 8, 14, 8, 8, 8);\nint LETTER_G[7] = int[](7, 8, 8, 11, 9, 9, 7);\nint LETTER_H[7] = int[](9, 9, 9, 15, 9, 9, 9);\nint LETTER_I[7] = int[](2, 0, 0, 6, 2, 2, 15);\nint LETTER_J[7] = int[](15, 1, 1, 1, 2, 2, 12);\nint LETTER_K[7] = int[](9, 10, 12, 12, 10, 9, 9);\nint LETTER_L[7] = int[](8, 8, 8, 8, 8, 8, 15);\nint LETTER_M[7] = int[](9, 15, 9, 9, 9, 9, 9);\nint LETTER_N[7] = int[](9, 13, 11, 9, 9, 9, 9);\nint LETTER_O[7] = int[](6, 9, 9, 9, 9, 9, 6);\nint LETTER_P[7] = int[](14, 9, 9, 14, 8, 8, 8);\nint LETTER_Q[7] = int[](6, 9, 9, 9, 9, 11, 7);\nint LETTER_R[7] = int[](14, 9, 9, 14, 9, 9, 9);\nint LETTER_S[7] = int[](7, 8, 8, 6, 1, 1, 14);\nint LETTER_T[7] = int[](4, 15, 4, 4, 4, 4, 3);\nint LETTER_U[7] = int[](9, 9, 9, 9, 9, 9, 6);\nint LETTER_V[7] = int[](9, 9, 9, 9, 9, 5, 3);\nint LETTER_W[7] = int[](9, 9, 9, 9, 9, 15, 9);\nint LETTER_X[7] = int[](9, 9, 9, 6, 9, 9, 9);\nint LETTER_Y[7] = int[](9, 9, 5, 6, 2, 2, 12);\nint LETTER_Z[7] = int[](15, 1, 2, 6, 4, 8, 15);\n\nfloat letter (vec2 screenPos, int offset, int arr[7])\n{\n    float t = mod (iTime, 26.0);\n    float xoff = 1.4 + 0.19 * float (offset) - 0.4 * t;\n    float x = (screenPos.x - xoff)*7.0;\n    float y = (screenPos.y - 0.03)*7.0;\n    \n    if (x < 0.0 || x >= 1.0 || y < 0.0 || y >= 1.0)\n    {\n        return 0.0;\n    }\n    else\n    {\n        int px = 3 - int (floor (x * 4.0));\n        int py = 6 - int (floor (y * 7.0));\n        int val = arr[py];\n        int bit = (1 << px) & val;\n        return (bit > 0 ? 1.0 : 0.0);\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 screenPos = fragCoord.xy / iResolution.xy;\n    float ratio = iResolution.y / iResolution.x;\n    screenPos.x /= ratio;\n    screenPos.x -= 0.5 * (iResolution.x - iResolution.y)\n        / iResolution.y;\n    \n    float g =\n        letter (screenPos,  0, LETTER_T) +\n        letter (screenPos,  1, LETTER_H) +\n        letter (screenPos,  2, LETTER_I) +\n        letter (screenPos,  3, LETTER_S) +\n\n        letter (screenPos,  5, LETTER_I) +\n        letter (screenPos,  6, LETTER_S) +\n\n        letter (screenPos,  8, LETTER_A) +\n\n        letter (screenPos, 10, LETTER_V) +\n        letter (screenPos, 11, LETTER_E) +\n        letter (screenPos, 12, LETTER_R) +\n        letter (screenPos, 13, LETTER_Y) +\n\n        letter (screenPos, 15, LETTER_S) +\n        letter (screenPos, 16, LETTER_I) +\n        letter (screenPos, 17, LETTER_M) +\n        letter (screenPos, 18, LETTER_P) +\n        letter (screenPos, 19, LETTER_L) +\n        letter (screenPos, 20, LETTER_E) +\n\n        letter (screenPos, 22, LETTER_D) +\n        letter (screenPos, 23, LETTER_E) +\n        letter (screenPos, 24, LETTER_M) +\n        letter (screenPos, 25, LETTER_O) +\n\n        letter (screenPos, 27, LETTER_F) +\n        letter (screenPos, 28, LETTER_O) +\n        letter (screenPos, 29, LETTER_R) +\n\n        letter (screenPos, 31, LETTER_P) +\n        letter (screenPos, 32, LETTER_U) +\n        letter (screenPos, 33, LETTER_R) +\n        letter (screenPos, 34, LETTER_E) +\n\n        letter (screenPos, 36, LETTER_N) +\n        letter (screenPos, 37, LETTER_O) +\n        letter (screenPos, 38, LETTER_S) +\n        letter (screenPos, 39, LETTER_T) +\n        letter (screenPos, 40, LETTER_A) +\n        letter (screenPos, 41, LETTER_L) +\n        letter (screenPos, 42, LETTER_G) +\n        letter (screenPos, 43, LETTER_I) +\n        letter (screenPos, 44, LETTER_A);\n        \n    vec3 c;\n    \n    if (g > 0.0)\n    {\n        c = vec3 (g, g, g);\n    }\n    else\n    {\n\t    g = background (screenPos, iTime);\n        c = palette (g);\n        c = mix (c, vec3 (\n            0.5 + 0.5 * sin (iTime),\n            0.5 + 0.5 * cos (iTime),\n            0.5),\n        0.5);\n\n        if (screenPos.y < 0.2 || screenPos.y > 0.8)\n        {\n            c.x /= 2.0;\n            c.y /= 2.0;\n            c.z /= 2.0;\n        }\n    }\n    \n    fragColor = vec4 (c, 1.0);\n    \n}","name":"Image","description":"","type":"image"}]}