{"ver":"0.1","info":{"id":"4lKGzh","date":"1473171325","viewed":109,"name":"raymarching test","username":"RonvE","description":"test shader for raymarching","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// using https://iquilezles.org/articles/distfunctions\n// using https://iquilezles.org/articles/rmshadows\n\nconst int MAX_ITER = 30;\nconst float EPSILON = 0.001;\n\nfloat sphere(vec3 pos, float radius)\n{\n    return length(pos) - radius;\n}\n\nfloat box(vec3 pos, vec3 size)\n{\n    return length(max(abs(pos) - size, 0.0));\n}\n\nfloat torus(vec3 p, vec2 t)\n{\n    vec2 q = vec2(length(p.xz)-t.x,p.y);\n    return length(q)-t.y;\n}\n\n\n\nfloat map(vec3 pos)\n{\n    vec3 pos2 = fract(pos) * 2.0 -1.0;\n      \n    float c = cos(cos(iTime)* 1.5 *pos2.y);\n    float s = sin(cos(iTime) * 1.5 *pos2.y);\n    mat2  m = mat2(c,-s,s,c);\n    vec3  q = vec3(m*pos2.xz,pos2.y);\n       \n    return torus(q,vec2(0.5, 0.1));\n}\n\nfloat softShadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<16; i++ )\n    {\n\t\tfloat h = map( ro + rd*t );\n        res = min( res, 8.0*h/t );\n        t += clamp( h, 0.02, 0.10 );\n        if( h<0.001 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\nfloat trace(vec3 rayOrigin, vec3 rayDir)\n{\n    float t = 0.0;\n    \n    for (int i = 0; i < MAX_ITER; i++)\n    {\n        vec3 p = rayOrigin + rayDir * t;\n        float dist = map(p);\n        t += dist * 0.5;\n    }    \n        \n    return t;\n}\n\nvec3 render( vec3 rayOrigin, vec3 rayDir)\n{\n    vec3 ret = vec3(0.0);\n    float t = trace(rayOrigin, rayDir);\n    vec3 pos = rayOrigin + t * rayDir;\n    \n    vec3 col = vec3(\n        clamp(sin(iTime * 2.0),  0.4, 1.0),\n        clamp(-cos(iTime * 0.5), 0.4, 1.0),\n        clamp(-sin(iTime * 0.1), 0.4, 1.0));\n    \n    vec2 eps = vec2(0.0, EPSILON);\n    vec3 normal = normalize(vec3(\n          \tmap(pos + eps.yxx) - map(pos - eps.yxx),\n            map(pos + eps.xyx) - map(pos - eps.xyx),\n            map(pos + eps.xxy) - map(pos - eps.xxy)));\n    \n    float diffuse = max(0.0, dot(-rayDir, normal));\n    float specular  = pow(diffuse, 32.0);\n    ret = vec3((diffuse * col) + specular);    \n          \n    return ret;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = 2.0 * uv - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 rayDir = normalize(vec3(uv, 1.0));\n    \n    float time = iTime * 0.6;\n    rayDir.yz *= mat2(cos(time), -sin(time), sin(time), cos(time));\n    rayDir.xz *= mat2(cos(time), -sin(time), sin(time), cos(time));\n    \n    vec3 rayOrigin = vec3(0.0, iTime * 0.5, 0.0);\n    \n    vec3 col = render(rayOrigin, rayDir);\n       \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}