{"ver":"0.1","info":{"id":"XfByRd","date":"1722796092","viewed":19,"name":"Gravity Fractal (3 Planets)","username":"ajoohuhbir","description":"Tracks which planet each pixel falls into","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal","gravity"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float circleSDF(vec2 point, vec2 center, float radius){\n    return length(point - center) - radius;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const float drag = 0.005;\n    const float dt = 0.001;\n    \n    const vec2 planetA = vec2(0.3, 0.7);\n    const vec2 planetB = vec2(0.24, 0.47);\n    const vec2 planetC = vec2(1.21,0.54);\n    \n    const float planetRadius = 0.015;\n    const float planetMass = 10000.0;\n    const float gravitationalConstant = 1.0;\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    // equalize\n    uv.x *= iResolution.x/iResolution.y;\n    \n    \n    const int numIters = 500;\n    vec2 point = uv;\n    vec2 velocity = vec2(0.0);\n    \n    float slowdown = 1.0 - drag;\n    \n    for (int i = 0; i < numIters; i++){\n        vec2 accelA = (point - planetA)*gravitationalConstant * planetMass\n                    / pow(distance(point, planetA), 3.0);\n        vec2 accelB = (point - planetB)*gravitationalConstant * planetMass\n                    / pow(distance(point, planetB), 3.0);\n        vec2 accelC = (point - planetC)*gravitationalConstant * planetMass\n                    / pow(distance(point, planetC), 3.0);\n                   \n        vec2 totalAccel = accelA + accelB + accelC;\n        velocity += totalAccel * dt;\n        point += velocity * dt;\n        \n        velocity *= slowdown;\n    }\n    \n    vec3 planetCol = vec3(0.0);\n    \n    \n    float distA = distance(point, planetA);\n    float distB = distance(point, planetB);\n    float distC = distance(point, planetC);\n    \n    // icky if statement\n    if (distA > max(distB, distC)){\n        planetCol = vec3(1.0, 0.0, 0.0);\n    } else if (distB > distC){\n        planetCol = vec3(0.0, 1.0, 0.0);\n    } else {\n        planetCol = vec3(0.0, 0.0, 1.0);\n    }\n    \n\n\n    float insidePlanet = circleSDF(uv, planetA, planetRadius)\n                       * circleSDF(uv, planetB, planetRadius)\n                       * circleSDF(uv, planetC, planetRadius);\n    vec3 col = vec3(step(0.0, insidePlanet))*planetCol;\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}