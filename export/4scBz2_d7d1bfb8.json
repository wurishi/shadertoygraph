{"ver":"0.1","info":{"id":"4scBz2","date":"1525870628","viewed":189,"name":"RotatingShine","username":"OursBleu","description":"Animated shine.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["shine"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926535897932384626433832795\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float speed = .1;\n    float rayCount = 10.;\n    float gradientLenght = 2.;\n    vec3 color = vec3(1.0,1.0,0.);\n    \n    vec2 uv = fragCoord/iResolution.y;\n    \n    // center uv\n    uv.x -= .5 * (iResolution.x/iResolution.y);\n\tuv.y -= .5;\n    \n    // convert cartesian to polar\n\tfloat angle = atan(uv.y, uv.x);\n    \n    // normalize angle\n    angle += PI;\n    angle /= (2.*PI);\n    \n    // animate angle\n    angle += iTime * speed;\n    \n    // fraction angle\n    float mask = fract(angle * rayCount);\n    \n    // smooth fract output\n    mask = min(1. - mask, mask) * 2.;\n    mask = smoothstep(.4, .6, mask);\n    \n    // substract gradient\n    float grad = distance(vec2(0.), uv);\n    \n    //animate gradient\n    grad *= gradientLenght * (2. - ((sin(iTime * 2.) + 1.0) * .5));\n    \n    mask -= grad;\n    \n    // Output to screen\n    fragColor = vec4(vec3(color * mask),1.0);\n}","name":"Image","description":"","type":"image"}]}