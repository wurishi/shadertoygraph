{"ver":"0.1","info":{"id":"WlGfWR","date":"1614129325","viewed":198,"name":"Darkness Noise Texture","username":"Patate1er","description":"reference : https://twitter.com/Sam_Makes_Games/status/1309983076714385408","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["noise","fbm"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"////////////////////////////////////////////////////////////////////////////////\n//simplex noise from the book of shader\n//cloudy noise octaves from here :\n//https://www.shadertoy.com/view/4tdSWr\n\nconst vec3[3] c = vec3[3](vec3(.14,0.,.27),\n                             vec3(.73,0.,.84),\n                             vec3(.96,.45,.91));//colors\nconst float t = .98;//threshold for last color\nconst float o = .47;//noise octave diminution\nconst float s = .2;//scale\nconst float d = 1.1;//distorsion\nconst float f = 1.;//factor before color\nconst float e = 1.;//exponent before color\nconst float ts = .05;//time speed\n\n//usefull for snoise\nvec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec2 mod289(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec3 permute(vec3 x) { return mod289(((x*34.0)+1.0)*x); }\n\nfloat snoise(vec2 v) {\n    const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                        0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                        -0.577350269189626,  // -1.0 + 2.0 * C.x\n                        0.024390243902439); // 1.0 / 41.0\n    vec2 i  = floor(v + dot(v, C.yy) );\n    vec2 x0 = v -   i + dot(i, C.xx);\n    vec2 i1;\n    i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n    vec4 x12 = x0.xyxy + C.xxzz;\n    x12.xy -= i1;\n    i = mod289(i); // Avoid truncation effects in permutation\n    vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n        + i.x + vec3(0.0, i1.x, 1.0 ));\n\n    vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n    m = m*m ;\n    m = m*m ;\n    vec3 x = 2.0 * fract(p * C.www) - 1.0;\n    vec3 h = abs(x) - 0.5;\n    vec3 ox = floor(x + 0.5);\n    vec3 a0 = x - ox;\n    m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n    vec3 g;\n    g.x  = a0.x  * x0.x  + h.x  * x0.y;\n    g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n    return 130.0 * dot(m, g);\n}\n\n//cloudy noise octaves\nconst mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\n\nfloat fbm(vec2 n) {\n\tfloat total = 0.0, amplitude = 1.;\n\tfor (int i = 0; i < 7; i++) {\n\t\ttotal += snoise(n) * amplitude;\n\t\tn = m * n;\n\t\tamplitude *= o;\n\t}\n\treturn total;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.y;\n\t\n    float n = ((fbm(uv*0.7+iTime*ts)+\n            fbm(uv*0.7-iTime*ts)+\n            fbm(uv*3.))+3.)/6.;\n    uv+=n * d;\n    uv*= s;\n    n = (fbm(uv*3.)+1.)/2. * n * f;\n    n = clamp(n, 0.,1.);\n    \n    n = (0.5-abs(n-0.5))*2.;\n    n = pow(n,e);\n    vec3 col;\n    if(n>=t){\n        col = c[2];\n    }\n    else{ \n        col = mix(c[0], c[1], n);\n    }\n    \n    // Output to screen\n    fragColor = vec4(col,1.);\n}","name":"Image","description":"","type":"image"}]}