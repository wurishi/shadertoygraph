{"ver":"0.1","info":{"id":"MdtXWr","date":"1458846630","viewed":1061,"name":"Gaussian blur mouse","username":"bmolynea","description":"Applies a Guassian blur filter with sigma proportional to the distance to the mouse.","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["filter"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int   filterSize    = 15;  // must be odd\nconst float textureSize = 512.0;\n\nconst int   halfFilterSize = filterSize / 2;\nconst float pixelSize = (1.0 / textureSize);\n\nfloat Gaussian (float x, float sigma)\n{\n    return exp(-(x*x) / (2.0 * sigma*sigma));\n}\n\nvec3 BlurredPixel (in vec2 uv)\n{\n    float sigma = 5.0 * length(iMouse.xy / iResolution.xy - uv);\n    \n    float total = 0.0;\n    vec3 ret = vec3(0);\n        \n    for (int iy = 0; iy < filterSize; iy++)\n    {\n        float fy = Gaussian (float(iy) - float(halfFilterSize), sigma);\n        float offsety = float(iy-halfFilterSize) * pixelSize;\n        \n        for (int ix = 0; ix < filterSize; ix++)\n        {\n            float fx = Gaussian (float(ix) - float(halfFilterSize), sigma);\n            float offsetx = float(ix-halfFilterSize) * pixelSize;\n            \n            float f = fx*fy;\n            total += f;\n            ret += texture(iChannel0, uv + vec2(offsetx, offsety)).rgb * f;\n        }\n    }\n    return ret / total;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = vec4(BlurredPixel(uv), 1.0);\n}","name":"Image","description":"","type":"image"}]}