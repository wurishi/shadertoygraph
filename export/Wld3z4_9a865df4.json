{"ver":"0.1","info":{"id":"Wld3z4","date":"1576341191","viewed":122,"name":"2d SDF Test","username":"Sciman101","description":"e","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec3 RING_COL = vec3(.6,.2,.1);\nconst float SCALE = 2.5;\n\nfloat sdCircle(vec2 p, float r) {\n    return length(p) - r;\n}\n\nfloat sdSquare(vec2 p, vec2 s) {\n    vec2 b = abs(p) - s;\n\treturn max(b.x,b.y);    \n}\n\n//Thanks iq\nfloat opSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\n//Thanks again iq\nfloat sdRoundedX( in vec2 p, in float w, in float r )\n{\n    p = abs(p);\n    return length(p-clamp(p.x+p.y,0.0,w)*0.5) - r;\n}\n\n//Rotate a point about the origin\nvec2 rotate(vec2 p, float a) {\n    float s = sin(a);\n  \tfloat c = cos(a);\n    \n    float xnew = p.x * c - p.y * s;\n  \tfloat ynew = p.x * s + p.y * c;\n    \n    return vec2(xnew,ynew);\n}\n\n//Given a point, find the closest distance\nfloat scene(vec2 p) {\n    \n    float st = sin(iTime);\n    \n    //p = rotate(p,length(p)*st);\n    \n    float repeat = .75;\n    vec2 pr = mod(p,repeat)-repeat/2.;\n    \n    float square = abs(sdSquare(rotate(pr,iTime),vec2(.2)))-.025;\n    float x = sdRoundedX(rotate(pr,0.7853982),.75,.1);\n    \n  \t//float circle = sdCircle(p-vec2(sin(iTime),cos(iTime))*.5,.2);\n    \n    return max(square,-x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -0.5 to 0.5)\n    vec2 uv = (fragCoord/iResolution.xy - .5) * SCALE;\n\n    //Multiply by aspect\n    uv.x *= iResolution.x / iResolution.y;\n    \n    //Get distance from point to nearest surface\n    float dist = scene(uv);\n    vec3 col;\n    if (dist <= 0.) {\n        col = vec3(1.);\n    }else{\n        //Get ring\n        float rings = step(mod(dist*100.0-iTime*5.0,7.5),.5);\n\n        col = mix(RING_COL,RING_COL*.75,rings)*(3.-dist);\n        col = col * .5;\n        \n        //Get mouse position\n        vec2 mp = (iMouse.xy / iResolution.xy - .5) * SCALE;\n        mp.x *= iResolution.x / iResolution.y;\n        \n        float mDist = distance(uv,mp);\n        vec2 mDir = normalize(mp-uv);\n        \n        //Gradient for light, thanks cleiprelli\n        col /= 1. + mDist*mDist;\n        \n        float t = 0.;\n        float k;\n        float minK = 1000.;\n        while (t < mDist) {\n            k = scene(uv+mDir*t);\n            minK = min(k,minK);\n            if (k < .0001) {\n                col *= .5;\n                break;\n            }\n            t += k;\n        }\n    }\n\t\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}