{"ver":"0.1","info":{"id":"mtcyzj","date":"1699407148","viewed":236,"name":"boids with cellular tracers","username":"Boogaloo","description":"An experiment combining cellular automata and agent based modeling.","likes":24,"published":1,"flags":32,"usePreview":0,"tags":["cellularautomata","boids"],"hasliked":0,"parentid":"mlcyD7","parentname":"boids + ca 1"},"renderpass":[{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 O, in vec2 I )\n{\n    O = texelFetch(iChannel0, ivec2(I), 0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float r = 150.;\n\nvec2 wrap(vec2 a){\nreturn vec2(mod(a.x,R.x), mod(a.y,R.y));}\n\nvec2 rel(vec2 a, vec2 b){\nvec2 c = b;\nif(a.x-b.x>R.x/2.){c.x=b.x+R.x;}\nif(a.x-b.x<-R.x/2.){c.x=b.x-R.x;}\nif(a.y-b.y>R.y/2.){c.y=b.y+R.y;}\nif(a.y-b.y<-R.y/2.){c.y=b.y-R.y;}\nreturn c;\n}\n\nfloat ang(float a, float b){\nif(b-a>pi){return b-a-tau;}\nif(b-a<-pi){return b-a+tau;}\nreturn b-a;\n}\n\nfloat dirTo(vec2 a, vec2 b){\nreturn atan((b.y-a.y),(b.x-a.x));\n}\n\nvoid mainImage( out vec4 O, in vec2 I )\n{\n    O = vec4(0.);\n    if(I.y>1.){return;}\n    if(I.x>40.){return;}\n    if(iFrame < 2) {\n    O = vec4(fract(sin(iDate[3]/100.*dot(vec2(I.x,-I.x),vec2(12.9898,78.233))))*R.x,fract(sin(iDate[3]/100.*dot(vec2(I.x,-I.x),vec2(31.43598,27.233))))*R.y,cir(400.*fract(sin(iDate[3]/100.*dot(vec2(I.x,-I.x),vec2(55.2348,8.3453))))), 2.);\n    return;\n    }\n    vec4 me = texelFetch(iChannel0, ivec2(I), 0);\n    float fCount = 0.;\n    float fAngs = 0.;\n    float nCount = 0.;\n    float nAngs = 0.;\n    vec2 cMass = vec2(0.);\n    for(float k=0.; k<=40.;k++){\n    if(k==I.x){continue;}\n    vec4 them = texelFetch(iChannel0, ivec2(k,0.), 0);\n    them.xy = rel(me.xy, them.xy);\n    float d = distance(me.xy,them.xy);\n    if(d<=0. || d>r){continue;}\n    fCount++;\n    fAngs += ang(me.z,them.z);\n    cMass += them.xy;\n    if(d>r*.25){continue;}\n    nCount++;\n    nAngs += ang(me.z, dirTo(them.xy, me.xy));\n    }\n    if(fCount>0.){\n    me.z+=.001*fAngs/fCount;\n    me.z+=.01*ang(me.z,dirTo(me.xy,cMass/fCount));\n    if(nCount>0.){\n    me.z+=.03*nAngs/nCount;\n    }\n    }\n    \n    me.z = cir(me.z);\n    me.xy = wrap(vec2(me.x+me.w*cos(me.z), me.y+me.w*sin(me.z)));\n    O = me;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define R iResolution\n#define pi 3.14\n#define tau 6.28\n#define cir(x) mod(x,tau)","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 O, in vec2 I )\n{\n    O = vec4(0.);\n    for(int k=0; k<40; k++){\n    if(distance(texelFetch(iChannel0, ivec2(k,0), 0).xy,I) < 1.){\n    O = vec4(1.);\n    break;\n    }    \n    }\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"mat3 mats[9];\n\nfloat cutit(float inp){\nreturn clamp(inp, 0., 1.);\n}\n\nfloat act(float x, float y){\nif(y>.002){return cutit(y)*.93;}\nreturn cutit(abs(x));\n}\n\nfloat checkX(float x){\nif(x<1.){\nreturn iResolution.x-1.;\n}\nif(x>iResolution.x-1.){\nreturn 1.;\n}\nreturn x;\n}\n\nfloat checkY(float y){\nif(y<1.){\nreturn iResolution.y-1.;\n}\nif(y>iResolution.y-1.){\nreturn 1.;\n}\nreturn y;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\nif(texelFetch(iChannel1, ivec2(fragCoord), 0).x>.1){\nfragColor = vec4(1.);\nreturn;\n}\n\nfloat ra = -.9;\nfloat rb = .9;\nfloat rc = .00;\n\nfloat ga = -.95;\nfloat gb = .8;\nfloat gc = .0;\n\nfloat ba = -.8;\nfloat bb = 1.1;\nfloat bc = 0.;\n\nfloat d = -.3;\nfloat e = -.3;\nfloat f = .0;\n\nvec4 me = texelFetch(iChannel0, ivec2(fragCoord), 0);\n\n//The configuration tensor (change these values for different patterns):\nmats[0] = mat3(ra, d, -d, -d, ga, d, d, -d, ba);\nmats[1] = mat3(rb, e, -e, -e, gb, e, e, -e, bb);\nmats[2] = mat3(ra, d, -d, -d, ga, d, d, -d, ba);\nmats[3] = mat3(rb, e, -e, -e, gb, e, e, -e, bb);\nmats[4] = mat3(rc, f, -f, -f, gc, f, f, -f, bc);\nmats[5] = mat3(rb, e, -e, -e, gb, e, e, -e, bb);\nmats[6] = mat3(ra, d, -d, -d, ga, d, d, -d, ba);\nmats[7] = mat3(rb, e, -e, -e, gb, e, e, -e, bb);\nmats[8] = mat3(ra, d, -d, -d, ga, d, d, -d, ba);\n      \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 rtot = vec3(0.,0.,0.);\n    int ind = 0;    \n    \n//the convolution kernel is just the Moore neighborhood of a given cell\n//take the RGB values as vectors and apply a matrix transform specified via the configuration tensor, then sum\n    for(float i = -1.0; i <= 1.0; i += 1.0)\n    {\n        for( float j = -1.0; j <= 1.0; j += 1.0)\n        {\n        \tvec4 data = texelFetch(iChannel0, ivec2(checkX(fragCoord.x+i),checkY(fragCoord.y+j)), 0);\n        \trtot += mats[ind]*data.rgb;\n            ind++;\n        }\n    }\n    \n    \n    vec3 rfin = vec3(act(rtot.x, me.x), act(rtot.y, me.y), act(rtot.z, me.z));    \n   \n    if(iFrame < 2) {\n    rfin = .05*vec3(fract(sin(iDate[3]/100.*dot(uv, vec2(12.9898, 78.233))) * 43758.5453), fract(sin(iDate[3]/100.*dot(uv, vec2(12.9898, 78.233))) * 53768.5453), fract(sin(iDate[3]/100.*dot(uv, vec2(12.9898, 78.233))) * 41258.5453));\n    }\n//paint on pixels manually with the mouse\n    if(iMouse.z > 0.0 && abs(fragCoord.x-iMouse.x)<1.0 && abs(fragCoord.y-iMouse.y)<1.0){\n    rfin = vec3(1.0,1.0,1.0);\n    }\n      \n    \n    fragColor = vec4(rfin,1.0);\n}","name":"Buffer C","description":"","type":"buffer"}]}