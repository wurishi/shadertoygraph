{"ver":"0.1","info":{"id":"lXsBWf","date":"1729022344","viewed":71,"name":"First raymarching for me","username":"lolaitu","description":"An introduction to Raymarching tutorial from kishimisu.","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.141592;\nconst float fov = 1.; \n\n\nfloat sdSphere( vec3 p, float s) {\n    return length(p) - s;\n}\n\nfloat sdBox( vec3 p, vec3 b) {\n  vec3 q = abs(p) - b;\n  return length(max(q, 0.)) + min(max(q.x, max(q.y, q.z)), 0.);\n}\n\nfloat smin(float a, float b, float k){\n    float h = max(k-abs(a-b), 0.) / k;\n    return min(a, b) - h*h*h*k*(1./6.);\n}\n\nmat2 rot2D(float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat2(c, -s, s, c);\n}\n    \n\nfloat map(vec3 p) \n{\n    vec3 r = mod(p, 1.) - .5;\n    \n    vec3 spherePos = vec3(sin(iTime) * 2.4, sin(iTime * 2.), 0);     // sphere position\n    float sphere = sdSphere((p - spherePos) * 2., 1.) / 2.;          // sphere SDF\n    \n    float box = sdBox(p, vec3(.75));                                 // cube SDF\n    \n    vec3 box2Pos = vec3(0., cos(iTime * 2. + PI) * .5 + 1.5, 0.);\n    vec3 q = p - box2Pos;\n    q.xy *= rot2D(iTime);                                            // apply rotation around box2Pos\n    q += box2Pos;\n    float box2 = sdBox(q * 2., vec3(.75)) / 2.;\n    \n    float ground = p.y + 1.;                                         // ground SDF\n    \n    // closest distance to the scene\n    return smin(smin(smin(sphere, box, 2.), box2, 2.), ground, .7);\n\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2. - iResolution.xy) / iResolution.y;\n    vec2 m  = (iMouse.xy * 2. - iResolution.xy) / iResolution.y;\n    \n    // Initialization\n    vec3 ro = vec3(0, 0, -3);                  // ray origin\n    vec3 rd = normalize(vec3(uv * fov, 1));    // ray direction\n    vec3 col = vec3(0.);                       // final pixel color\n    \n    float t = 0.;                              // total distance travel \n    \n    // Vertical camera rotation\n    ro.yz *= rot2D(clamp(-m.y + .5, -0.3, 1.1));\n    rd.yz *= rot2D(clamp(-m.y + .5, -0.3, 1.1));\n    \n    // Horizontal camera rotation\n    ro.xz *= rot2D(-m.x);\n    rd.xz *= rot2D(-m.x);\n    \n    // Raymarching\n    int i;\n    for (i = 0; i < 80; i++) {\n        vec3 p = ro + rd * t;                  // position along the ray\n\n        float d = map(p);\n\n        t += d;\n        \n        //col =  vec3(i) / 80.;\n        \n        if (d < 0.01 || t > 100.) break;\n    }\n    \n    \n    col =  vec3(1., 1., 1.) * t * 0.1;\n    col += vec3(0., 0., 1.) * float(i) / 80.;\n    \n    fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"}]}