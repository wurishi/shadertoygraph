{"ver":"0.1","info":{"id":"NllXDn","date":"1625488867","viewed":160,"name":"a candle","username":"j0","description":"A simple stylized 2D candle","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["fire"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\n// Simplex 2D noise\n//\nvec3 permute(vec3 x) { return mod(((x*34.0)+1.0)*x, 289.0); }\n\nfloat snoise(vec2 v){\n  const vec4 C = vec4(0.211324865405187, 0.366025403784439,\n           -0.577350269189626, 0.024390243902439);\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n  vec2 i1;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n  i = mod(i, 289.0);\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n  + i.x + vec3(0.0, i1.x, 1.0 ));\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy),\n    dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\n//\tSimplex 3D Noise \n//\tby Ian McEwan, Ashima Arts\n//\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\n\nfloat snoise(vec3 v){ \n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //  x0 = x0 - 0. + 0.0 * C \n  vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n  vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n  vec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n// Permutations\n  i = mod(i, 289.0 ); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients\n// ( N*N points uniformly over a square, mapped onto an octahedron.)\n  float n_ = 1.0/7.0; // N=7\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z *ns.z);  //  mod(p,N*N)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n}\n\n\n\n\n\n\nvec3 glow(vec3 original, vec3 col, vec2 uv, vec2 pos, float radius){\n    return original + col * ((1.0-length((uv - pos)/radius)));\n}\n\nvec3 rect(vec3 original, vec3 col, vec2 uv, vec2 pos, vec2 size){\n    pos -= size * 0.5;\n    vec2 r = vec2(step(pos.x, uv.x), step(pos.y, uv.y));\n    r *= vec2(step(uv.x, pos.x + size.x), step(uv.y, pos.y + size.y));\n    return original + col * (r.x * r.y);\n}\n\nvec3 fire(vec3 col, vec2 uv, float t){\n    uv = (uv - vec2(0.5, 0.61)) * 8.0 + 0.5;\n    uv.x += snoise(vec2(uv.y * 2.0, t)) * 0.08;\n    uv.x = (uv.x - 0.5) * clamp(uv.y, 0.1, 1.0) * 18.0 + 0.5;\n    t *= 2.0;\n    float f = mix(0.6, 1.0, snoise(vec3(uv * 50.0 - vec2(0.0, t * 30.0), t * 5.0)));\n    f *= mix(0.6, 1.0, snoise(vec3(uv * 10.0 - vec2(0.0, t * 5.0), t * 2.0)));\n    f *= mix(0.6, 1.0, snoise(vec3(uv * 9.0 - vec2(0.0, t * 3.0), t * 1.5)));\n    if(f < 0.2) f = 0.0; else f = 1.0;\n    f *= clamp(1.0 - length((uv - vec2(0.5, 0.15)) * 3.0), 0.0, 1.0) * 5.0;\n    f *= pow(clamp(1.0 - length((uv - 0.5) * vec2(5.0, 1.5)), 0.0, 1.0), 0.5);\n    f *= clamp(0.3 - uv.y, 0.0, 1.0);\n    return col * f;\n}\n\nvec3 smoke(vec3 col, vec2 uv, float iTime){\n    return mix(col, rect(col, vec3(2.0), vec2(uv.x + snoise(vec2(uv.y * 10.0 - iTime, iTime)) * 0.005, uv.y), vec2(0.5, 1.02), vec2(0.005, 1.0)), clamp(uv.y - 0.61, 0.0, 1.0));\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.y = ((uv.y - 0.5) / iResolution.x * iResolution.y) + 0.5;\n    \n    float intensity = snoise(vec2(iTime * 1.0, 0.0));\n    intensity += snoise(vec2(iTime * 5.0, 1.0)) * 0.2;\n    \n    vec3 col = glow(vec3(mix(0.0, 0.1, intensity)), vec3(0.3), uv, vec2(0.5, 0.5), 1.0);\n    col = rect(col, vec3(0.5, 0.55, 0.4), vec2(uv.x + sin(uv.y * 50.0) * 0.001, uv.y + uv.x * 0.07), vec2(0.5, 0.04), vec2(0.06, 1.03));\n    col = glow(col, vec3(2.0, 1.0, 0.5) * 0.6, uv, vec2(0.5, 0.55), mix(0.1, 0.11, intensity));\n    col = rect(col, vec3(-0.3), vec2(uv.x + sin(iTime * -10.0 + uv.y * 100.0) * 0.0005, uv.y), vec2(0.5, 0.53), vec2(0.003, 0.03));\n    \n    col += fire(vec3(1.0, 0.4, 0.4), uv, iTime);\n    col += fire(vec3(1.0, 1.0, 1.0), uv, iTime * 1.3);\n    col = smoke(col, uv, iTime);\n    col = smoke(col, uv, iTime + 1872.298);\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}