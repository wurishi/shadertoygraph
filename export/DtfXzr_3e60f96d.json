{"ver":"0.1","info":{"id":"DtfXzr","date":"1674177340","viewed":154,"name":"Rippled *Faked Reflections","username":"DwayneBrah","description":"reflective liquid effect","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["waves","ripples","water","fluid","specular","reflections","reflective"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float ar;\nvec2 outTexCoord;\nvec4 final_color;\nfloat phase;\n\n// Note: This is a very verbose version for easy interpretation\n// It could be a lot more concise\n\nvec2 distorted(vec2 coords, float amount) {\n    \n    float severity = 0.10;\n    amount *= severity;\n    \n    float xx = coords.x + amount;\n    float yy = coords.y + amount;\n    \n    vec2 out_coords = vec2(xx, yy);\n    \n    return(out_coords);\n    \n}\n\nvec2 facing_vector(vec2 point_a, vec2 point_b) {\n    \n    vec2 out_vec;\n    \n    return(out_vec);\n    \n}\n\nfloat dist_rippled(vec2 point_a, vec2 point_b) {\n\n    float dist = distance(point_a, point_b);\n\tfloat dist_rippled = sin((dist+phase)*20.00);\n    \n    return((dist_rippled+2.00) / 4.00);\n\n}\n\nvec3 facing_rippled(vec2 point_a, vec2 point_b, float diminish) {\n    \n    float ripple_frequency = 30.00;\n    \n    float measure_distance = 0.01;\n    \n    float dist = distance(point_a, point_b);\n    float diminish_factor = (0.09/(abs(dist*diminish)));\n\tfloat dist_rippled = sin((dist+phase)*ripple_frequency)*diminish_factor;\n    \n    vec2 point_a_above = vec2(point_a.x, point_a.y+measure_distance);\n    float dist_above = distance(point_a_above, point_b);\n\tfloat dist_rippled_above = sin((dist_above+phase)*ripple_frequency)*diminish_factor;\n    \n    vec2 point_a_right = vec2(point_a.x+measure_distance, point_a.y);\n    float dist_right = distance(point_a_right, point_b);\n\tfloat dist_rippled_right = sin((dist_right+phase)*ripple_frequency)*diminish_factor;\n    \n    float dif_above = dist_rippled_above - dist_rippled;\n    float dif_right = dist_rippled_right - dist_rippled;\n    \n    vec3 facing_vector = vec3(dif_right, dif_above, dist_rippled);\n    \n    \n    return(facing_vector);\n\n}\n\nvec2 reflected(vec2 coords, vec2 reflect_vector) {\n    \n    float multiplyer = 0.50;\n    \n    vec2 distort_vector = reflect_vector*multiplyer;\n    \n    vec2 final_vector = vec2(coords.x+distort_vector.x, coords.y+distort_vector.y);\n    \n    return(final_vector);\n    \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    \n    // Set aspect ratio\n    ar = iResolution.x/iResolution.y;\n    \n    phase = iTime/-10.00;\n\n    // Normalise X & Y\n    outTexCoord = vec2(fragCoord.x/iResolution.x, fragCoord.y/iResolution.y);\n    vec2 outTexCoord_adjusted = vec2(outTexCoord.x*ar, outTexCoord.y);\n    \n    // Create points\n\tvec2 point_1 = vec2(0.20, 0.00);\n\tvec2 point_2 = vec2(-0.11, -0.17);\n    \n    vec3 facing_vec_1_xyz = facing_rippled(point_1, outTexCoord_adjusted, 0.20);\n    vec3 facing_vec_2_xyz = facing_rippled(point_2, outTexCoord_adjusted, 0.20);\n    //vec3 facing_vec_xyz = facing_vec_1_xyz+facing_vec_2_xyz;\n    vec3 facing_vec_xyz = facing_vec_1_xyz;\n    \n    vec2 facing_vec = vec2(facing_vec_xyz.x, facing_vec_xyz.y);\n    \n    float reflection_amplifier = 0.25;\n    vec4 reflection = texture(iChannel0, reflected(outTexCoord, facing_vec*reflection_amplifier));\n    \n    \n       \n    float slope_factor = abs(facing_vec.x)+abs(facing_vec.y);\n    float reflect_amount = clamp(slope_factor*1.40-0.50, 0.00, 0.30)+0.11;\n    \n    float refract_amount = facing_vec_xyz.z/80.00;\n    vec2 refract_distortion = 0.00-vec2(0.25*refract_amount, 1.00*refract_amount);\n    \n    vec4 background_tex = texture(iChannel1, outTexCoord+refract_distortion);\n    vec4 background = vec4(background_tex.r*0.75, background_tex.r*0.88, background_tex.r, 1.0);\n    \n    vec4 specular_color = vec4(1.00, 1.00, 1.00, 1.00);\n    vec2 specular_center = vec2(0.12, 0.09);\n    float specular_dist = abs(distance(specular_center, facing_vec));\n    float specular_amount = 0.01/specular_dist;\n    \n    vec4 final_color = (background*1.20+(reflection*reflect_amount))*0.80;\n    \n    final_color += specular_color*specular_amount;\n    \n    vec4 facing_vec_visualised = vec4(slope_factor, facing_vec.x+0.5, facing_vec.y+0.5, 1.00);\n    if (outTexCoord.y < 0.15) {\n        final_color = facing_vec_visualised;\n    }\n    \n\t// Output colour\n\tfragColor = final_color;\n\t\n}\n","name":"Image","description":"","type":"image"}]}