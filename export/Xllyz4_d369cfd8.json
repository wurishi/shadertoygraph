{"ver":"0.1","info":{"id":"Xllyz4","date":"1503737183","viewed":249,"name":"snow mountain","username":"sw","description":"based on \nhttps://www.shadertoy.com/view/4tlSDS\n\nplease tell me.\ndelete mottled pettern on the mountain.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["snow","mountain"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// noise:https://www.shadertoy.com/view/Msf3WH\nvec2 hash( vec2 p ) // replace this by something better\n{\n\tp = vec2( dot(p,vec2(127.1,311.7)),\n\t\t\t  dot(p,vec2(269.5,183.3)) );\n\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise( in vec2 p )\n{\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\n\tvec2 i = floor( p + (p.x+p.y)*K1 );\n\t\n    vec2 a = p - i + (i.x+i.y)*K2;\n    vec2 o = step(a.yx,a.xy);    \n    vec2 b = a - o + K2;\n\tvec2 c = a - 1.0 + 2.0*K2;\n\n    vec3 h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\n\tvec3 n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n\n    return dot( n, vec3(70.0) );\n\t\n}\n\n\nconst mat2 m2 = mat2(0.8, -0.6,\n                     0.6, 0.8); \n\n//float noise(vec2 pos)\n//{\n//    return 0.5*(sin(pos.x) + sin(pos.y));\n//}\n\nfloat map(vec3 pos)\n{\n    float h=0.;\n    float s = 0.5;\n    vec2 p=pos.xz;\n    for(int i = 0; i<6; i++){\n        h += s*noise(p*0.3);\n        s *= 0.5;\n        p += p * m2*1.;\n    }\n    h*=2.3;\n    return pos.y - h;\n}\n\nvec3 calcNormal(in vec3 pos){\n    vec3 nor;\n    vec2 e = vec2(0.2,0.0);\n    nor.x = map(pos + e.xyy) - map(pos - e.xyy);\n    nor.y = map(pos + e.yxy) - map(pos - e.yxy);\n    nor.z = map(pos + e.yyx) - map(pos - e.yyx);\n    return normalize(nor);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    fragColor = vec4(uv,0.5+0.5*sin(iTime),1.);\n    vec2 p = uv*2.-1.;\n    vec3 camerapos=vec3(0,1.5,-iTime);\n    vec3 raydir=normalize(vec3(p,-1.));\n    \n    float t=0.;\n    float tmax=40.;\n    float height=0.;\n    for( int i=0 ; i<128 ; ++i )\n    {\n    \tvec3 raypos = camerapos + raydir*t;\n    \theight = map(raypos);\n    \tif( height < 0.01 || height>50. ) break;\n    \tt += height*0.3;\n    }\n\n    vec3 lightdir=normalize(vec3(1.,-0.8,0.3));\n    if( t<tmax )\n    {\n    \t// mountain\n        vec3 pos=camerapos+raydir*t;\n        vec3 diffuse=mix(vec3(0.3,0.3,0.4),vec3(0.5,0.5,0.9),pos.y);\n        vec3 lightdir=normalize(vec3(0.4,0.4,0.4));\n        vec3 normal=calcNormal(pos);\n        float lighting = clamp(dot(normal,lightdir),0.3,1.);\n\t\t// snow\n        float snow=smoothstep(0.5,1.,normal.y);\n        vec3 snowcolor=vec3(0.7,0.9,1.0);\n        diffuse=mix(diffuse,snowcolor,snow);\n            \n    \tfragColor.xyz = diffuse * lighting;\n        \n        // fog\n        float fog=exp(-t*t*0.02);\n        fragColor.xyz+=vec3(0.7,0.8,0.9)*(1.-fog)*0.9;\n    }else\n    {\n    \t//sky\n    \tfragColor = vec4(0.6,0.9,1.,1.);\n        //\n        vec2 sunpos = vec2(1.4,0.8); \n        uv.x*=iResolution.x/iResolution.y;\n        // sun\n        fragColor+=smoothstep(0.8,1.,1.-length(sunpos-uv));\n        // sun fade\n        fragColor+=(1.-length(sunpos-uv))*0.3;\n    }\n}\n\n","name":"Image","description":"","type":"image"}]}