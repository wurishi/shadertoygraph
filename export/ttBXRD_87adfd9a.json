{"ver":"0.1","info":{"id":"ttBXRD","date":"1684412955","viewed":50,"name":"glowing Raymarching","username":"poipoi34","description":"zda","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["azd"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 crossProduct (vec3 p1,vec3 p2)\n{\n    return vec3(p1.y*p2.z-p1.z*p2.y,p1.z*p2.x-p1.x*p2.z,p1.x*p2.y-p1.y*p2.x);\n}\n\n\nfloat dBox(vec3 p,vec3 size)\n{\n    return length(max(vec3(0.,0.,0.),abs(p)-size/2.));\n}\nfloat dSphere(vec3 p,float r)\n{\n    return length(p)-r;\n}\nfloat dScene(vec3 p)\n{\n    //dMin = min(dMin,);\n    float dMin = 1000000.;\n    vec3 boxSize = vec3(2.,1.,1.)*2.0;\n    vec3 boxPos = vec3(0.,0.,0.);\n    dMin = min(dMin,dBox(p-boxPos,boxSize));\n    \n    float sphereR = 1.;\n    vec3 spherePos = vec3(0.+cos(iTime)*2.,1.+sin(iTime)*5.,0.);\n    dMin = min(dMin,dSphere(p-spherePos,sphereR));\n    \n    float d1 = dSphere(p-spherePos,sphereR);\n    float d2 = dBox(p-boxPos,boxSize);\n    \n    float m = 3.;\n    \n    //return dMin;\n    return min(d1-exp(-m*d2),d2-exp(-m*d1));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = fragCoord/iResolution.xy*2.-1.;\n\tuv.x *= iResolution.x/iResolution.y;\n    \n    \n    vec3 ro = vec3(0.,3.,-6.);\n    vec3 rd = normalize(vec3(uv,1.0));\n    vec3 rdNx = normalize(vec3(1.,1.,(-rd.x-rd.y)/rd.z));\n    vec3 rdNy = normalize (crossProduct(rd,rdNx));\n    vec3 rp = ro;\n    float k = 0.;\n    \n    int it = 0;\n    \n    vec3 glowC = vec3(1.,0.,0.);\n    float glowF = .3;\n    \n    float d = dScene(ro);\n    float dMin = 1000.;\n    \n    while (d>0.001 && it <100 && k<100.)\n    {\n        k += d;\n        rp = ro + k*rd ;\n        d = dScene(rp);\n        dMin = min(d,dMin);\n        it++;\n    }\n    \n    vec3 col = fract(rp);\n    \n\tif (it==100 || k>=100.)\n    {\n            \n        col = vec3(0.6,0.7,0.8);\n        if (dMin <glowF)\n            col = dMin/glowF*col + (glowF-dMin)/glowF*glowC; \n    }\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}