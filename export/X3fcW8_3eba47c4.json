{"ver":"0.1","info":{"id":"X3fcW8","date":"1726068624","viewed":10,"name":"Fork Flower (Custom)","username":"charleszw","description":"Try to match the given flower patterns!\n\nBrownie points: how do you change the color of the flower from the center?","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["circle"],"hasliked":0,"parentid":"XXXyW8","parentname":"Fork Flower (Spinning)"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/**\n * @author rah, inspired by jonobr1 / http://jonobr1.com/\n */\n\n#define PI 3.1415927\n\n/* \n * Output circle colors at given center pos and radius\n */\nvec4 circle(vec2 uv, vec2 center, float radius, vec3 color)\n{\n    // Get distance of point from center, get difference from given radius\n\tfloat d = length(center - uv) - radius;\n\tfloat t = clamp(d, 0.0, 1.0);\n    \n    // If point is smaller than radius, set color alpha to 1, otherwise 0\n\treturn vec4(color, 1.0 - t);\n}\n\n/*\n * Your work here!\n */\nfloat computeRadius(vec2 uv)\n{\n    float radius = 0.4 * iResolution.y;\n    \n    // Rotate about point first\n    float t1 = 0.5 * sin(iTime * 3.0) + 0.5;\n    vec2 rotated = rotatePoint2d(uv, 0.5 * iResolution.xy, mix(0.0, 1.0 * PI, t1));\n    \n    // Centered uv\n    vec2 uvCenter = (2.0f * rotated - iResolution.xy);\n\n    // Get pixel angle around the center\n    float a = atan(uvCenter.x,uvCenter.y);\n    float t = 0.5 * sin(iTime) + 0.5;\n    \n    return radius + mix(30.0, 400.0, -1.0 * t) * cos(20.0 * a + iTime * -15.0);\n}\n\nfloat computeRadius2(vec2 uv)\n{\n    float radius = 0.25 * iResolution.y;\n    \n    // Centered uv\n    vec2 uvCenter = (2.0f * uv - iResolution.xy);\n\n    // Get pixel angle around the center\n    float a = atan(uvCenter.x,uvCenter.y);\n    float b = a + iTime / 1.3;\n    \n    float p = 0.785;\n    float wave = 2.0 * (b / p - floor(0.5 + b / p));\n    if (a > 0.0) {\n        wave = sign(sin(2.0 * PI * b / p));\n    }\n    \n    float t = 0.5 * sin(iTime / 1.5) + 0.5;\n    t = gain(t, 0.7);\n    float ampl = mix(-400.0, 400.0, t);\n    \n    return radius + ampl * wave;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n\tvec2 uv = fragCoord.xy;\n\tvec2 center = iResolution.xy * 0.5;\n\tfloat radius = computeRadius(uv);\n    \n    float t = 0.5 * sin(iTime) + 0.5;\n    float tBounce = easeInOutBounce(t);\n    \n    // Background layer\n\tvec4 layer1 = vec4(mix(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0), tBounce), 1.0);\n\t\n\t// Circle\n\tvec3 red = mix(vec3(1.0, 1.0, 1.0), vec3(0.0, 0.0, 0.0), tBounce);\n\tvec4 layer2 = circle(uv, center, radius, red);\n    \n    vec4 background = mix(layer1, layer2, layer2.a);\n    \n    vec3 actuallyRed = rgb(225.0, 50.0, 70.0);\n    vec2 uvCenter = (2.0f * uv - iResolution.xy);\n    float a = atan(uvCenter.x,uvCenter.y);\n    if (a > 0.0) {\n        float t2 = 0.5 * sin(iTime * 5.0) + 0.5;\n        actuallyRed = mix(rgb(0.0, 255.0, 0.0), rgb(0.0, 0.0, 255.0), t2);\n    }\n    \n    float radius2 = computeRadius2(uv);\n    vec4 layer3 = circle(uv, center, radius2, actuallyRed);\n\t\n\t// Blend the two\n\tfragColor = mix(background, layer3, layer3.a);\n\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/*\n * Toolbox functions! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n */ \nfloat bias(float t, float b) {\n    return (t / ((((1.0/b) - 2.0)*(1.0 - t))+1.0));\n}\n\nfloat gain(float time, float gain)\n{\n  if(time < 0.5)\n    return bias(time * 2.0,gain)/2.0;\n  else\n    return bias(time * 2.0 - 1.0,1.0 - gain)/2.0 + 0.5;\n}\n\n/*\n * Basic Utilities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n */\n\n\n/* \n * Rotate an input point about some center by angle\n */\nvec2 rotatePoint2d(vec2 uv, vec2 center, float angle)\n{\n    vec2 rotatedPoint = vec2(uv.x - center.x, uv.y - center.y);\n    float newX = cos(angle) * rotatedPoint.x - sin(angle) * rotatedPoint.y;\n    rotatedPoint.y = sin(angle) * rotatedPoint.x + cos(angle) * rotatedPoint.y;\n    rotatedPoint.x = newX;\n    return rotatedPoint;\n}\n\n/*\n * Make a vec3 color from rgb values [0, 255]\n */\nvec3 rgb(float r, float g, float b)\n{\n\treturn vec3(r / 255.0, g / 255.0, b / 255.0);\n}\n\nfloat easeInExpo(float x) {\n    return x == 0.0 ? 0.0 : pow(2.0, 10.0 * x - 10.0);\n}\n\nfloat easeOutBounce(float x) {\n    float n1 = 7.5625;\n    float d1 = 2.75;\n\n    if (x < 1.0 / d1) {\n        return n1 * x * x;\n    } else if (x < 2.0 / d1) {\n        return n1 * (x -= 1.5 / d1) * x + 0.75;\n    } else if (x < 2.5 / d1) {\n        return n1 * (x -= 2.25 / d1) * x + 0.9375;\n    } else {\n        return n1 * (x -= 2.625 / d1) * x + 0.984375;\n    }\n}\n\nfloat easeInOutBounce(float x) {\nreturn x < 0.5\n  ? (1.0 - easeOutBounce(1.0 - 2.0 * x)) / 2.0\n  : (1.0 + easeOutBounce(2.0 * x - 1.0)) / 2.0;\n}","name":"Common","description":"","type":"common"}]}