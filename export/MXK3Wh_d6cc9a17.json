{"ver":"0.1","info":{"id":"MXK3Wh","date":"1717608471","viewed":48,"name":"Julia Set simple example","username":"saxha","description":"The Julia Set example\n\nMove the mouse to change coordinates.\nIf time adjustment is needed, move the mouse to the left, towards the top part of the viewport.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal","example","julia","fast","perfomance"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Parameters\nfloat speed = 1.0;\nfloat speed_distance = 0.02;\nint maxIterations = 100;\n\nvec2 pos = vec2(0.0, 0.0);\nfloat scale = 1.5;\n\n// Convert HEX color, to vec3 color\nvec3 hexToColor(int hex) {\n    float r = float((hex >> 16) & 0xFF) / 255.0;\n    float g = float((hex >> 8) & 0xFF) / 255.0;\n    float b = float(hex & 0xFF) / 255.0;\n    return vec3(r, g, b);\n}\n\n\n// Function to generate a color from a distance\nvec3 palette(float dist, vec3 interior, vec3[8] exterior) {\n    // Return the interior palette colors if dist is 1.0\n    if (dist == 1.0) {\n        return interior;\n    }\n\n    // Calculate the index for interpolation\n    float index = mod(dist * 7.0, 7.0);\n    int i = int(floor(index));\n    float t = fract(index);\n\n    // Blend between interior and exterior colors based on distance\n    vec3 color = mix(exterior[i], exterior[i+1], t);\n    return color;\n}\n\n// Main function to render the image\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalize pixel coordinates and maintain aspect ratio\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 cuv = (uv * 2.0 - 1.0) * vec2(iResolution.x / iResolution.y, 1.0) * (scale * scale) + pos;\n    \n    // Time \n    float t = iTime * speed;\n    t = mod(t, 100.0);\n    float d = t * speed_distance;\n    \n    // Calculate Julia set constant\n    bool mouse = (iMouse.x < 14.0);\n    vec2 julia_c = (mouse\n        ? vec2(sin(t) * d, cos(t) * d)\n        : (iMouse.xy / iResolution.xy - 0.5) * 5.0);\n\n    // Julia set iteration\n    vec2 z = cuv;\n    int i;\n    for (i = 0; i < maxIterations; i++) {\n        if (dot(z, z) > 4.0) break;\n        z = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + julia_c;\n    }\n\n    // Palette colors\n    vec3 interior;\n    vec3 exterior[8];\n    interior = vec3(0.0);\n    exterior[0] = hexToColor(0xf0b6ad);\n    exterior[1] = hexToColor(0xdc8864);\n    exterior[2] = hexToColor(0xba4848);\n    exterior[3] = hexToColor(0xc75a1b);\n    exterior[4] = hexToColor(0xf7c435);\n    exterior[5] = hexToColor(0x818b2e);\n    exterior[6] = hexToColor(0x0b5227);\n    exterior[7] = hexToColor(0x85a993);\n\n    // Calculate color based on iterations\n    float fi = float(maxIterations);\n    float s = pow(float(i) / fi, 40.0 / fi);\n    vec3 col = palette(s, interior, exterior);\n\n    // Vignette effect\n    col *= smoothstep(2.0, 0.1, length(uv - 0.5));\n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}