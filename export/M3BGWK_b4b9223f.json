{"ver":"0.1","info":{"id":"M3BGWK","date":"1708877563","viewed":39,"name":"Two points problem","username":"jorendorff","description":"Two points are selected at random from a square. The segment between the two points form the diameter of a circle. What's the probability the circle is contained in the square? Press play then click in the black box. See source for details.\n ","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["math","puzzle","calculus"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Two points are selected at random, independently and uniformly, from a square. The segment between the two points\n// forms the diameter of a circle. What's the probability the circle is contained in the square?\n//\n// This shader illustrates the probability. Click anywhere to place the first point. The shader will highlight all\n// points that, if selected as the second point, would generate a circle contained in the square.\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    float scale = min(iResolution.x, iResolution.y);\n\n    // The \"first point\" is whatever point the user last clicked on.\n    vec2 p1 = iMouse.xy / scale; // dividing scales the coordinates to the range 0..1.\n\n    // Now let's paint white the region of all points where, if _that point_ was the second random point,\n    // the smallest circle touching those two points would be entirely inside the unit square.\n    //\n    // That is, we paint the current pixel white if it is such a point, else black.\n    vec2 p2 = fragCoord / scale; // second point (this pixel)\n    vec2 c = (p1 + p2) / 2.0; // center of circle\n    float r = length(p1 - c); // radius of circle\n\n    // How far is the center from the edge?\n    float e = min(min(c.x, c.y), min(1.0 - c.x, 1.0 - c.y)); \n\n    vec3 col = vec3(p2.x > 1.0 || p2.y > 1.0 ? 0.3 : r < e ? 1.0 : 0.0);\n    fragColor = vec4(col, 1);\n}\n","name":"Image","description":"","type":"image"}]}