{"ver":"0.1","info":{"id":"wtsSDN","date":"1563204674","viewed":560,"name":"dct lossy image compression 3","username":"public_int_i","description":"Testing discrete cosine transform lossy compression, click to see source. Compression ratio of 8:1. Look in Common for options/settings.","likes":2,"published":3,"flags":32,"usePreview":0,"tags":["cos","compression","cosine","transformation","discrete","transform","dct","lossy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Ethan Alexander Shulman 2019 - https://xaloez.com/ https://twitter.com/ethanshulman\n\n//For image comparing compressed and downscaled(of same compression ratio) look here https://twitter.com/EthanShulman/status/1150840392016891904\n\nvoid mainImage( out vec4 o, in vec2 u)\n{\n    vec2 uv = (u*2.-R)/R.y;\n    if (max(abs(uv.x),abs(uv.y)) > 1.) {\n        o = vec4(0);\n        return;\n    }\n    uv = (uv*.5+.5)*(SIZEF/R);\n    if (iMouse.w <= 0.) o = vec4(abs(textureLod(iChannel1,uv,0.).x));\n    else o = vec4(textureLod(iChannel0,uv,0.).x);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//Buffer A - Source testing image\n\nvoid mainImage( out vec4 o, in vec2 u)\n{\n    if (max(u.x,u.y)-SIZEF >= 0.) return;\n    \n    //varying checkerboard\n    float cs = floor(1.+pow(u.y*3./SIZEF,2.))*8./SIZEF;\n    o = vec4(mod(floor(u.x*cs)+floor(u.y*cs),2.));\n    //o = vec4(1);\n    \n    //texture\n    //o = vec4(length(texelFetch(iChannel0,ivec2(u),0).xyz)/length(vec3(1)),0,0,1);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"//Ethan Alexander Shulman 2019\n//Buffer B - X-axis Forward/inverse discrete cosine transform\n\nvoid mainImage( out vec4 o, in vec2 u)\n{\n    if (iFrame > SFFRAME) {\n        o = texelFetch(iChannel1,ivec2(u),0);\n        return;\n    }\n    if (max(u.x,u.y)-SIZEF >= 0.) return;\n    \n    //bruteforce discrete cosine transform\n    float v = 0.;\n    if (iFrame == 1) {\n        //type 2 dct\n   \t\tfor (float x = 0.; x < SIZEF; x++) v += texelFetch(iChannel0,ivec2(x,u.y),0).x*cos(floor(u.x)*(x+.5)*(PI/SIZEF));\n    } else {\n        //type 3 dct\n     \tfor (float x = 0.; x < SIZEF; x++) v += texelFetch(iChannel0,ivec2(x,u.y),0).x*cos(u.x*x*(PI/SIZEF));\n    \tv -= texelFetch(iChannel0,ivec2(0,u.y),0).x*0.5;\n    }\n    o = vec4(v,0,0,1);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"\n#define R iResolution.xy\n#define SIZE 256\n#define SIZEF float(SIZE)\n#define PI 3.14159265358979\n#define COMPRESSION_RATIO 8.\n#define COMPV (length(vec2(SIZEF))/sqrt(COMPRESSION_RATIO/(PI*.25)))\n#define SHARPENESS 1.\n\n//#define SHOW_FREQUENCY\n\n#ifdef SHOW_FREQUENCY\n#define SFFRAME 1\n#else\n#define SFFRAME 2\n#endif","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"//Ethan Alexander Shulman 2019\n//Buffer C - Y-axis Forward/inverse discrete cosine transform + compression filter\n\nvoid mainImage( out vec4 o, in vec2 u)\n{    \n    if (iFrame == 0) {\n        //first frame initializes with source texture\n        o = texelFetch(iChannel2,ivec2(u),0);\n        return;\n    }\n    if (iFrame > SFFRAME) {\n        o = texelFetch(iChannel1,ivec2(u),0);\n        return;\n    }\n    if (max(u.x,u.y)-SIZEF >= 0.) return;\n    \n    //bruteforce discrete cosine transform\n    float v = 0.;\n    if (iFrame == 1) {\n        //type 2 dct\n   \t\tfor (float y = 0.; y < SIZEF; y++) v += texelFetch(iChannel0,ivec2(u.x,y),0).x*cos(floor(u.y)*(y+.5)*(PI/SIZEF));\n    } else {\n        //type 3 dct\n     \tfor (float y = 0.; y < SIZEF; y++) v += texelFetch(iChannel0,ivec2(u.x,y),0).x*cos(u.y*y*(PI/SIZEF));\n    \tv -= texelFetch(iChannel0,ivec2(u.x,0),0).x*0.5;\n    }\n    \n    if (iFrame == 1) {\n        v /= SIZEF*SIZEF*.25;\n\n       \t//compression filter applied to frequency values\n        float mxy = max(u.x,u.y),\n\t\t\tscale = mxy*.5;//scale frequency values for better quantization, pseudo normalizing\n        v = pow(abs(v*scale),.5)*sign(v);\n        v = round(clamp(v,-1.,1.)*(127.99))/127.;//quantize to simulate 10bit(-1024 to 1024) per pixel storage\n        #ifndef SHOW_FREQUENCY\n        v = pow(abs(v),1./.5)*sign(v)/scale;//undo scaling\n        #endif\n        \n        //fade out higher frequency values for compression\n        v *= pow(clamp(SHARPENESS-length(u)*SHARPENESS/COMPV,0.,1.),.5);\n        \n        //slicing off higher frequencies without fading is sharper but causes more artifacts\n\t\t//if (length(u) > COMPV) v = 0.;\n    }\n    \n    o = vec4(v,0,0,1);\n}","name":"Buffer C","description":"","type":"buffer"}]}