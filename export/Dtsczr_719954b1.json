{"ver":"0.1","info":{"id":"Dtsczr","date":"1690351806","viewed":85,"name":"Julia_Set_Animation","username":"brechrt","description":"Julia set animation","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["fractal","juliaset"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 mapColor(float d){\n    vec3 colors[5] = vec3[](\n        vec3(0.00784313725490196, 0.18823529411764706, 0.2784313725490196),\n        vec3(0.9450980392156862, 0.9803921568627451, 0.9333333333333333),\n        vec3(0.6588235294117647, 0.8549019607843137, 0.8627450980392157),\n        vec3(0.27058823529411763, 0.4823529411764706, 0.615686274509804),\n        vec3(0.11372549019607843, 0.20784313725490197, 0.3411764705882353)\n    );\n    \n    int i = int(d*4.);\n    float f = d*4. - float(i);\n    return mix(colors[i], colors[i+1], f);\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5;\n    uv.x *= iResolution.x/iResolution.y;\n    uv *= 2.5;\n    vec2 z = uv;\n    \n    float t = fract(iTime*0.05)*2.*3.1415;\n    \n    vec2 c = vec2( cos(t),sin(t))*0.7885;\n    int i = 0;\n    int st = 64;\n    for(i = 0; i < st; i++){\n        z = vec2(z.x*z.x - z.y*z.y, 2.0*z.x*z.y) + c;\n        if(length(z) > 2.) break;\n    }\n    \n\n    \n    float len = length(z);\n    float si = float(i) - log(max(1.0, log(len)/log(1.2)))/log(1.2);\n    float d = float(si) / float(st);\n    vec3 col = mapColor(d);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n    \n}","name":"Image","description":"","type":"image"}]}