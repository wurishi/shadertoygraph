{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"// Fast Edge detection by nimitz (twitter: @stormoid)\n// https://www.shadertoy.com/view/4s2XRd\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n// Contact the author for other licensing options\n\n#define EDGE_SIZE 0.07\n#define SMOOTH 0.025\n\n#define ITR 80\n#define FAR 40.\n#define time iTime\nfloat hash( float n ) { return fract(sin(n)*43758.5453); }\n\nvec3 rotx(vec3 p, float a)\n{\n    float s = sin(a), c = cos(a);\n    return vec3(p.x, c*p.y - s*p.z, s*p.y + c*p.z);\n}\nvec3 roty(vec3 p, float a)\n{\n    float s = sin(a), c = cos(a);\n    return vec3(c*p.x + s*p.z, p.y, -s*p.x + c*p.z);\n}\n\nvec2 map(vec3 p)\n{\n    vec3 id = floor( (p+3.)/6.0);\n    p = mod( p+3., 6.0 ) - 3.;\n    float rid = hash(dot(id,vec3(7.,43,113)));\n    p = rotx(p,time*.5+rid+sin(rid*5.+time));\n    p = roty(p,time*0.5+rid*1.1);\n    \n    float d = mix((max(abs(p.x),max(abs(p.y),abs(p.z)))-0.5),max(length(p)-1.,-(length(p)-0.4)),rid);\n    return vec2(d*.85,rid);\n}\n\n\n/*\t\n\tKeeping track of min distance, then, when the min distance \n\tis both under a given threshold and starts increasing (meaning that\n\ta fold was just passed) then I mark that pixel as an edge. The min\n\tdistance can then be smoothed allowing for arbitrarily smooth edges.\n*/\nvec4 march(in vec3 ro, in vec3 rd)\n{\n\tfloat precis = 0.001;\n    float h=precis*2.0;\n    vec2 d = vec2(0.,10000.);\n    float md = 1.;\n    float id = 0.;;\n    bool stp = false;\n    for( int i=0; i<ITR; i++ )\n    {\n        if( abs(h)<precis || d.x>=FAR ) break;\n        d.x += h;\n\t   \tvec2 res = map(ro+rd*d.x);\n        if (!stp) \n        {\n            md = min(md,res.x);\n            if (h < EDGE_SIZE && h < res.x && i>0)\n            {\n                stp = true;\n                d.y = d.x;\n            }\n        }\n        h = res.x;\n        id = res.y;\n    }\n    \n    if (stp) md = smoothstep(EDGE_SIZE-SMOOTH, EDGE_SIZE+0.01, md);\n    else md = 1.;\n\treturn vec4(d, md, id);\n}\n\nvec3 normal(in vec3 p, in float d)\n{  \n    vec2 e = vec2(-1., 1.)*0.003*d;\n\treturn normalize(e.yxx*map(p + e.yxx).x + e.xxy*map(p + e.xxy).x +\n\t\t\t\t\t e.xyx*map(p + e.xyx).x + e.yyy*map(p + e.yyy).x );   \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n    vec2 q = fragCoord.xy/iResolution.xy;\n    vec2 p = -1.0 + 2.0*q;\n\tp.x*=iResolution.x/iResolution.y;\n\tvec2 mo = iMouse.xy/iResolution.xy*2.-1.;\n    mo = (mo==vec2(-1.))?mo=vec2(0.):mo;\n\tmo.x *= iResolution.x/iResolution.y;\n\t\n    //camera\n    vec3 ro = vec3(4.1,-time*2.,time-0.5);\n    vec3 rd = normalize(vec3(p,2.5));\n    rd = roty(rd,sin(time*0.2)*0.5+0.9+mo.x);\n    rd = rotx(rd,sin(time*0.12+sin(time*.5)*1.)+0.9);\n\t\n\tvec4 rz = march(ro,rd);\n\tvec3 ligt = normalize( vec3(-.5, 0.2, -0.2) );\n    float sun = dot(rd,ligt);\n    vec3 bg = vec3(0.5,0.6,.9)*sun*0.5+0.6;\n    vec3 col = bg;\n    \n    if ( rz.x < FAR )\n    {\n        vec3 pos = ro+rz.x*rd;\n        float d = distance(ro,pos);\n        vec3 nor= normal(pos,d);\n        vec3 h = normalize(ligt - rd);\n        col = sqrt(col);\n        col = mix(sin(vec3(1,2,3)*rz.w*1.9)*0.5+0.35,col,0.2);\n        \n        float dif = clamp( dot(nor, ligt), 0., 1.);\n        float spe = pow(clamp(dot(nor,h), 0., 1.),70.);\n        float fre = 0.1*pow(clamp(1. + dot(nor, rd), 0., 1.), 2.);\n        vec3 brdf = 1.5*vec3(.10, .11, .11);\n        brdf += 1.30*dif*vec3(1., .9, .75);\n        col = col*brdf + col*spe + fre*col;\n    }\n    \n    col  = mix(col,bg,smoothstep(30.,40.,rz.x)); //Distance fog\n    col *= mix(rz.z,1.,smoothstep(30.,40.,rz.y)); //Edges + Fog (using edge-eye distance)\n    \n\tcol = pow(col, vec3(.8))*1.;\n\t//vignetting from iq\n    col *= 0.4 + 0.6*pow( 16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.2 );\n\t\n\tfragColor = vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4s2XRd","date":"1415049399","viewed":7398,"name":"Fast edge detection","username":"nimitz","description":"One thing to keep in mind: The edge detection is sensitive to degenerate or non-continuous SDFs (due to false positives), under-stepping can fix that.","likes":151,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","edgedetection","antialiased","technique"],"hasliked":0,"parentid":"","parentname":""}}