{"ver":"0.1","info":{"id":"7slXW2","date":"1619290195","viewed":47,"name":"Quilez Basic Raytracer II","username":"GuroGuru","description":"Studying IÃ±igo Quilez basic raytracer. Using sphere intersector.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raytracing","sphere","intersector"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Intersectors: https://iquilezles.org/articles/intersectors\nfloat sphereIntersector( vec3 ro, vec3 rd ) \n{\n    vec3 ce = vec3(4.0*sin(iTime));\n    vec3 oc = ro - ce;\n    float r = 2.0;\n    float b = 2.0 * dot(oc,rd);\n    float c = dot(oc, oc) - r*r;\n    float h = b*b - 4.0*c;\n    return h < 0.0 ? -1.0 : (-b - sqrt(h))/2.0;\n}\n\n// Raytracer: https://www.youtube.com/watch?v=9g8CdctxmeU\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos( iTime+uv.xyx + vec3( 0, 2, 4 ) );\n\n    // Ray\n    vec3 ro = vec3( 0.0, 0.0, 4.0 );\n    vec3 rd = normalize( vec3( ( -1.0 + 2.0 * uv ) * vec2( 1.78, 1.0 ), -1.0 ) );\n\n    // Intersection\n    float id = sphereIntersector( ro, rd ) * 1.5; \n    \n\n    // Output to screen\n    fragColor = vec4(col + 0.15, 1.0) * id + vec4(col + 0.1, 1.0) * (1.0 - id);\n    \n}\n","name":"Image","description":"","type":"image"}]}