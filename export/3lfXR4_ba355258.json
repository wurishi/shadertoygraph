{"ver":"0.1","info":{"id":"3lfXR4","date":"1626422667","viewed":82,"name":"Morphing solids","username":"martytram","description":"An example of solid union, intesetion and minus using smooth min/max functions.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarch","morph","shaded"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100.\n#define MAX_DIST 100.\n#define EPSILON .0001\n#define PI 3.14159\n\nstruct ray{ vec3 org, dir; };\n\nray getRay(vec2 uv, vec3 camPos, vec3 lookAt, float zoom){\n    ray ray;\n    vec3 f = normalize(lookAt - camPos);\n    vec3 r = cross(vec3(0,1,0), f);\n    vec3 u = cross(f, r);\n    vec3 centre = camPos + f*zoom;\n    vec3 intersection = centre + uv.x*r + uv.y*u;\n    \n    ray.org = camPos;\n    ray.dir = normalize(intersection - camPos);\n    return ray;\n}\n\nfloat sMin(float a, float b, float k){\n    float h = clamp(.5+.5*(b-a)/k, 0., 1.);\n    return mix(b, a, h) - k*h*(1.-h);\n}\n\nfloat sMax(float a, float b, float k){\n    return sMin(a,b,-k);\n}\n\nfloat soUnion(float a, float b){\n    return min(a, b);\n}\n\nfloat smUnion(float a, float b, float k){\n    return sMin(a, b, k);\n}\n\nfloat soIntersect(float a, float b){\n    return max(a, b);\n}\n\nfloat smIntersect(float a, float b, float k){\n    return sMax(a, b, k);\n}\n\nfloat soMinus(float a, float b){\n    return max(a, -b);\n}\n\nfloat smMinus(float a, float b, float k){\n    return sMax(a, -b, k);\n}\n\nfloat sMorph(float a, float b, float k){\n    return mix(a, b, k);\n}\n\nfloat sdSphere(vec3 p, vec3 c, float r){\n    return length(p-c)-r;\n}\n\nfloat sdBox(vec3 p, vec3 c, vec3 dims){\n    vec3 off = abs(p-c)-dims;\n    float outside = length(max(off, 0.));\n    float inside = min(max(off.x, max(off.y, off.z)), 0.);\n    return outside+inside;\n}\n\nfloat sdTorus(vec3 p, vec3 c, vec2 r){\n    p -= c;\n    float x = length(p.xz)-r.x;\n    return length(vec2(x, p.y))-r.y;\n}\n\nfloat fastSin(float x) {\n    x = abs(mod(x-PI/2.,2.*PI)-PI)-PI/2.;\n    return x-pow(x,3.)/6.;//+pow(x,5.)/120.;\n}\n\nfloat getSceneDist(vec3 p){\n    float ground = p.y;\n    float d = ground;\n    \n    float sD = sdSphere(p, vec3(0,1,0), 1.);\n    float sD2 = sdSphere(p, vec3(0,1.3,0), 1.);\n    float sD3 = sdSphere(p, vec3(0,1,0), .5);\n    float bD = sdBox(p, vec3(0,1,0), vec3(1.));\n    float tD = sdTorus(p, vec3(0,1,0), vec2(1., .5));\n    \n    sD = smMinus(sD, sD2, .2);\n    sD = smUnion(sD, sD3, .7);\n    float t = sin(iTime)+1.;\n    //float t = fastSin(iTime)+1.; // no added fps\n    if(t<=1.){\n        sD = sMorph(sD, bD, t);\n    }else{\n        sD = sMorph(bD, tD, t-1.);\n    }\n    \n    d = soUnion(d, sD);\n    \n    return d;\n}\n\nfloat rayMarchDist(ray ray){\n    float dist = 0.;\n    for(float i = 0.; i<MAX_STEPS; i+=1.){\n        vec3 p = ray.org + dist*ray.dir;\n        float currD = getSceneDist(p);\n        dist += currD;\n        \n        if(dist >= MAX_DIST)\n            return MAX_DIST;\n        if(currD <= EPSILON)\n            return dist;\n    }\n    return dist;\n}\n\nvec3 getNormal(vec3 p){\n    float d = getSceneDist(p);\n    vec2 e = vec2(EPSILON, 0);\n    \n    vec3 n = d - vec3(\n        getSceneDist(p-e.xyy),\n        getSceneDist(p-e.yxy),\n        getSceneDist(p-e.yyx)\n    );\n    return normalize(n);\n}\n\nvec3 getLight(vec3 p, vec3 v){\n    vec3 lPos1 = vec3(8.*sin(iTime),10,8.*cos(iTime));\n    vec3 lPos2 = vec3(6.*sin(iTime*.4),10,6.*cos(iTime*.4));\n    float ambC = .15;\n    float difC = .5;\n    float speC = .2;\n    float phongC = 3.;\n    \n    vec3 l1 = normalize(lPos1 - p);\n    vec3 l2 = normalize(lPos2 - p);\n    vec3 n = getNormal(p);\n    vec3 r1 = normalize(2.*dot(n, l1)*n - l1);\n    vec3 r2 = normalize(2.*dot(n, l2)*n - l2);\n    \n    float amb = ambC;\n    float dif = difC * (dot(n, l1)+.6*dot(n, l2));\n    float spe = speC * (pow(dot(v,r1), phongC)+.8*pow(dot(v,r2), phongC));\n    \n    float intensity = dif + spe;\n    //shadow\n    float d1 = rayMarchDist(ray(p+.01*n, l1));\n    float d2 = rayMarchDist(ray(p+.01*n, l2));\n    if(d1<length(lPos1-p))\n        intensity *= .3;\n    if(d2<length(lPos2-p))\n        intensity *= .5;\n    \n    intensity += amb;\n    \n    vec3 col = vec3(.7,.8,1.);\n    return intensity * col;\n}\n\nmat2 rot(float a) {\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\nvec3 getColor(vec2 uv, vec3 camPos, vec3 lookAt) {\n    ray ray = getRay(uv, camPos, lookAt, 1.);\n    \n    float d = rayMarchDist(ray);\n    vec3 p = ray.org + d*ray.dir;\n    \n    return getLight(p, -ray.dir);\n}\n\n\n// weird complicated way of AA\nvec3 getColorAAv1(vec2 uv, vec3 camPos, vec3 lookAt) {\n    const float eps = 4.*EPSILON;\n    vec3[9] mat;\n    \n    for(int i = 0; i < 3; i++){\n        for(int j = 0; j < 3; j++){\n            mat[i*3+j] = getColor(uv+vec2(float(i-1)*eps, float(j-1)*eps), camPos, lookAt);\n        }\n    }\n    \n    vec3 res = vec3(0);\n    for(int i = 0; i < 3; i++){\n        for(int j = 0; j < 3; j++){\n            res += mat[i*3+j];\n        }\n    }\n    \n    return res/9.;\n}\n\n// subdivide pixel\nvec3 getColorAA(vec2 uv, vec3 camPos, vec3 lookAt) {\n    const float subdivCount = 2.;\n    vec2 subdivDim = (1./iResolution.xy) * (1./subdivCount);\n    \n    vec3 res = vec3(0);\n    for(float i = 0.; i < subdivCount; i+=1.){\n        for(float j = 0.; j < subdivCount; j+=1.){\n            res += getColor(uv+vec2(i*subdivDim.x, j*subdivDim.y), camPos, lookAt);\n        }\n    }\n    \n    return res/pow(subdivCount, 2.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 m = iMouse.xy/iResolution.xy;\n    vec3 col = vec3(0.);\n    \n    vec3 camPos = vec3(0, 3. ,-6);\n    camPos.yz *= rot(-m.y+.4);\n    camPos.xz *= rot(-m.x*6.2831);\n    vec3 lookAt = vec3(0, 1., 0);\n    \n    \n    //col = getColor(uv, camPos, lookAt);\n    col = getColorAA(uv, camPos, lookAt);\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}