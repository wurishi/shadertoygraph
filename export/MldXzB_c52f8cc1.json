{"ver":"0.1","info":{"id":"MldXzB","date":"1480411827","viewed":276,"name":"Conways game of life automata","username":"freedick","description":"Simulates Conways game of life automata from a texture input. Uses no if statements.","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["game","automata","automata","life","branchless","conway","of","conways"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Draw Buffer A to the display\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n#define INITIAL_DELAY 2.0\n#define PIXELS_PER_CELL 1.0\n// Returns r value from texture iChannel1\nfloat texCh1(vec2 uv)\n{\n    return texture(iChannel1, uv).r;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Calculate some coordinates\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 CELLSIZE = vec2(iResolution.x, iResolution.y)/PIXELS_PER_CELL;\n    vec2 PIXELSIZE = 1./CELLSIZE;\n    \n    uv = (round(uv*CELLSIZE+vec2(0.5))-vec2(0.5))/CELLSIZE;\n    \n    // Check whether currently alive or dead\n    float curCell = texture(iChannel1, uv).r;\n    \n    // Count surrounding living cells\n    float surroundingCells =\n        texCh1(uv+PIXELSIZE*vec2(1.0,  0.0))+\n        texCh1(uv+PIXELSIZE*vec2(1.0,  1.0))+\n        texCh1(uv+PIXELSIZE*vec2(0.0,  1.0))+\n        texCh1(uv+PIXELSIZE*vec2(-1.0, 1.0))+\n        texCh1(uv+PIXELSIZE*vec2(-1.0, 0.0))+\n        texCh1(uv+PIXELSIZE*vec2(-1.0,-1.0))+\n        texCh1(uv+PIXELSIZE*vec2(0.0, -1.0))+\n        texCh1(uv+PIXELSIZE*vec2(1.0, -1.0));\n    \n    float oAuto = \n        // If alive check whether to stay alive or not\n        curCell\t       * (float(surroundingCells>1.5) - float(surroundingCells>3.5))\n        // If dead check whether to get born or not\n        +(1.0-curCell) * (float(surroundingCells>2.5) - float(surroundingCells>3.5));\n    \n    // Draw the texture until INITIAL_DELAY seconds have passed\n    fragColor = \n        round(texture(iChannel0, uv)-0.2)*(1.0-float(iTime>INITIAL_DELAY))\n        + round(vec4(vec3(oAuto),1.0))\n        + float(round(0.1*fragCoord.xy)==round(0.1*iMouse.xy*sign(iMouse.zw)));\n}","name":"Buffer A","description":"","type":"buffer"}]}