{"ver":"0.1","info":{"id":"Wlj3Dd","date":"1561583432","viewed":612,"name":"GPU hacks #09 - OpenCL PTX asm","username":"PrzemyslawZaworski","description":"Programming graphics cards with assembly is cool !","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["framework","tutorial","code","twotweet"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*  \nAuthor: Przemyslaw Zaworski\nOpenCL PTX assembly demo\nSave as dawn.cl and compile: nvcc -x cu -o dawn.exe dawn.cl -luser32 -lgdi32 -lOpenCL\nOpenCL C code was initially converted to assembly by clGetProgramInfo, then \nmanually optimized. To reduce initial 600 asm instructions to about 120, I replaced some built-in\nfunctions by custom algorithms, for example (pseudocode):\n\nfloat Sinus (float _x)\n{\n\tfloat ptr = 0.0f;\n\tfloat x = fabs(fract((_x - 0.017453292*90.0) / (0.017453292*360.0),&ptr)*2.0-1.0);     \n\treturn x * x * (3.0 - 2.0 * x) * 2.0 - 1.0;\n}\n\nCosinus (x) = Sinus(x+1.57079632679);\n\nnormalize(N) = rsqrt(N.x*N.x+N.y*N.y+N.z*N.z) * N;\n*/\n\n\n/*\n#include <windows.h>\n#include <CL/cl.h>\n\n#define width 1280\n#define height 720\n\nstatic const char* ComputeKernel =\n\"__kernel void mainImage(__global uchar4 *fragColor, float iTime)\"\n\"{\"\t\n\t\"asm(\\\"\"\n\t\".reg .pred \t%p<3>;\"\n\t\".reg .b16 \t%rs<3>;\"\n\t\".reg .f32 \t%f<49>;\"\n\t\".reg .b32 \t%r<10>;\"\n\t\".reg .f64 \t%fd<38>;\"\n\t\".reg .b64 \t%rd<6>;\"\n\t\"ld.param.u64 \t%rd1, [mainImage_param_0];\"\n\t\"ld.param.f32 \t%f1, [mainImage_param_1];\"\n\t\"mov.b32\t%r1, %envreg3;\"\n\t\"mov.u32 \t%r2, %ntid.x;\"\n\t\"mov.u32 \t%r3, %ctaid.x;\"\n\t\"mad.lo.s32 \t%r4, %r3, %r2, %r1;\"\n\t\"mov.u32 \t%r5, %tid.x;\"\n\t\"add.s32 \t%r6, %r4, %r5;\"\n\t\"mul.wide.u32 \t%rd2, %r6, -858993459;\"\n\t\"shr.u64 \t%rd3, %rd2, 42;\"\n\t\"cvt.u32.u64\t%r7, %rd3;\"\n\t\"mul.lo.s32 \t%r8, %r7, 1280;\"\n\t\"sub.s32 \t%r9, %r6, %r8;\"\n\t\"cvt.rn.f64.s32\t%fd1, %r9;\"\n\t\"fma.rn.f64 \t%fd2, %fd1, 0d4000000000000000, 0dC094000000000000;\"\n\t\"add.f64 \t%fd3, %fd2, 0dBFF0000000000000;\"\n\t\"div.rn.f64 \t%fd4, %fd3, 0d4086800000000000;\"\n\t\"cvt.rn.f64.s32\t%fd5, %r7;\"\n\t\"fma.rn.f64 \t%fd6, %fd5, 0d4000000000000000, 0dC086800000000000;\"\n\t\"div.rn.f64 \t%fd7, %fd6, 0d4086800000000000;\"\n\t\"cvt.f64.f32\t%fd8, %f1;\"\n\t\"fma.rn.f64 \t%fd9, %fd8, 0d3FC999999999999A, 0d3FF921FB5443D6F4;\"\n\t\"cvt.rn.f32.f64\t%f2, %fd9;\"\n\t\"cvt.f64.f32\t%fd10, %f2;\"\n\t\"sub.f64 \t%fd11, %fd10, 0d3FF921FB47B47491;\"\n\t\"div.rn.f64 \t%fd12, %fd11, 0d401921FB47B47491;\"\n\t\"cvt.rn.f32.f64\t%f3, %fd12;\"\n\t\"cvt.rmi.f32.f32\t%f4, %f3;\"\n\t\"sub.f32 \t%f5, %f3, %f4;\"\n\t\"mov.f32 \t%f6, 0f00000000;\"\n\t\"max.f32 \t%f7, %f5, %f6;\"\n\t\"mov.f32 \t%f8, 0f3F7FFFFF;\"\n\t\"min.f32 \t%f9, %f7, %f8;\"\n\t\"abs.f32 \t%f10, %f3;\"\n\t\"setp.gtu.f32\t%p1, %f10, 0f7F800000;\"\n\t\"selp.f32\t%f11, %f3, %f9, %p1;\"\n\t\"cvt.f64.f32\t%fd13, %f11;\"\n\t\"fma.rn.f64 \t%fd14, %fd13, 0d4000000000000000, 0dBFF0000000000000;\"\n\t\"abs.f64 \t%fd15, %fd14;\"\n\t\"cvt.rn.f32.f64\t%f12, %fd15;\"\n\t\"mul.f32 \t%f13, %f12, %f12;\"\n\t\"cvt.f64.f32\t%fd16, %f13;\"\n\t\"cvt.f64.f32\t%fd17, %f12;\"\n\t\"fma.rn.f64 \t%fd18, %fd17, 0dC000000000000000, 0d4008000000000000;\"\n\t\"mul.f64 \t%fd19, %fd18, %fd16;\"\n\t\"fma.rn.f64 \t%fd20, %fd19, 0d4000000000000000, 0dBFF0000000000000;\"\n\t\"cvt.rn.f32.f64\t%f14, %fd20;\"\n\t\"mul.f64 \t%fd21, %fd8, 0d3FC999999999999A;\"\n\t\"cvt.rn.f32.f64\t%f15, %fd21;\"\n\t\"cvt.f64.f32\t%fd22, %f15;\"\n\t\"sub.f64 \t%fd23, %fd22, 0d3FF921FB47B47491;\"\n\t\"div.rn.f64 \t%fd24, %fd23, 0d401921FB47B47491;\"\n\t\"cvt.rn.f32.f64\t%f16, %fd24;\"\n\t\"cvt.rmi.f32.f32\t%f17, %f16;\"\n\t\"sub.f32 \t%f18, %f16, %f17;\"\n\t\"max.f32 \t%f19, %f18, %f6;\"\n\t\"min.f32 \t%f20, %f19, %f8;\"\n\t\"abs.f32 \t%f21, %f16;\"\n\t\"setp.gtu.f32\t%p2, %f21, 0f7F800000;\"\n\t\"selp.f32\t%f22, %f16, %f20, %p2;\"\n\t\"cvt.f64.f32\t%fd25, %f22;\"\n\t\"fma.rn.f64 \t%fd26, %fd25, 0d4000000000000000, 0dBFF0000000000000;\"\n\t\"abs.f64 \t%fd27, %fd26;\"\n\t\"cvt.rn.f32.f64\t%f23, %fd27;\"\n\t\"mul.f32 \t%f24, %f23, %f23;\"\n\t\"cvt.f64.f32\t%fd28, %f24;\"\n\t\"cvt.f64.f32\t%fd29, %f23;\"\n\t\"fma.rn.f64 \t%fd30, %fd29, 0dC000000000000000, 0d4008000000000000;\"\n\t\"mul.f64 \t%fd31, %fd30, %fd28;\"\n\t\"fma.rn.f64 \t%fd32, %fd31, 0d4000000000000000, 0dBFF0000000000000;\"\n\t\"cvt.rn.f32.f64\t%f25, %fd32;\"\n\t\"mul.f32 \t%f26, %f25, 0f42480000;\"\n\t\"mul.f32 \t%f27, %f14, 0f42480000;\"\n\t\"mul.f32 \t%f28, %f27, %f27;\"\n\t\"fma.rn.f32 \t%f29, %f6, 0f00000000, %f28;\"\n\t\"fma.rn.f32 \t%f30, %f26, %f26, %f29;\"\n\t\"rsqrt.approx.f32 \t%f31, %f30;\"\n\t\"mul.f32 \t%f32, %f26, %f31;\"\n\t\"mul.f32 \t%f33, %f31, 0f00000000;\"\n\t\"mul.f32 \t%f34, %f27, %f31;\"\n\t\"cvt.rn.f32.f64\t%f35, %fd7;\"\n\t\"mul.f32 \t%f36, %f35, %f35;\"\n\t\"cvt.rn.f32.f64\t%f37, %fd4;\"\n\t\"fma.rn.f32 \t%f38, %f37, %f37, %f36;\"\n\t\"cvt.f64.f32\t%fd33, %f38;\"\n\t\"mov.f64 \t%fd34, 0d3FD0000000000000;\"\n\t\"sub.f64 \t%fd35, %fd34, %fd33;\"\n\t\"abs.f64 \t%fd36, %fd35;\"\n\t\"sqrt.rn.f64 \t%fd37, %fd36;\"\n\t\"cvt.rn.f32.f64\t%f39, %fd37;\"\n\t\"fma.rn.f32 \t%f40, %f39, %f39, %f38;\"\n\t\"rsqrt.approx.f32 \t%f41, %f40;\"\n\t\"mul.f32 \t%f42, %f39, %f41;\"\n\t\"mul.f32 \t%f43, %f37, %f41;\"\n\t\"mul.f32 \t%f44, %f35, %f41;\"\n\t\"mul.f32 \t%f45, %f34, %f44;\"\n\t\"fma.rn.f32 \t%f46, %f43, %f33, %f45;\"\n\t\"fma.rn.f32 \t%f47, %f42, %f32, %f46;\"\n\t\"mul.f32 \t%f48, %f47, 0f437F0000;\"\n\t\"mul.wide.u32 \t%rd4, %r6, 4;\"\n\t\"add.s64 \t%rd5, %rd1, %rd4;\"\n\t\"cvt.rzi.u16.f32\t%rs1, %f48;\"\n\t\"mov.u16 \t%rs2, 255;\"\n\t\"st.global.v4.u8 [%rd5], {%rs1, %rs1, %rs1, %rs2};\"\n\t\"ret;\"\n\t\"\\\");\"\n\"}\";\n\nstatic LRESULT CALLBACK WindowProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam)\n{\n\tif( uMsg==WM_CLOSE || uMsg==WM_DESTROY || (uMsg==WM_KEYDOWN && wParam==VK_ESCAPE) )\n\t{\n\t\tPostQuitMessage(0); return 0;\n\t}\n\telse\n\t{\n\t\treturn DefWindowProc(hWnd, uMsg, wParam, lParam);\n\t}\n}\n\nint WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow)\n{\n\tint exit = 0;\n\tMSG msg;\n\tWNDCLASS win = {CS_OWNDC|CS_HREDRAW|CS_VREDRAW, WindowProc, 0, 0, 0, 0, 0, (HBRUSH)(COLOR_WINDOW+1), 0, \"OpenCL Demo\"};\n\tRegisterClass(&win);\n\tHDC hdc = GetDC(CreateWindowEx(0, win.lpszClassName, \"OpenCL Demo\", WS_VISIBLE|WS_OVERLAPPEDWINDOW, 0, 0, width, height, 0, 0, 0, 0));\n\tconst BITMAPINFO bmi = { {sizeof(BITMAPINFOHEADER),width,height,1,32,BI_RGB,0,0,0,0,0},{0,0,0,0} };\n\tunsigned char* host = (unsigned char*) malloc(width*height*sizeof(uchar4));\n\tsize_t bytes;\t\n\tcl_uint platformCount;\n\tclGetPlatformIDs(0, 0, &platformCount);\n\tcl_platform_id* platforms = (cl_platform_id*) malloc(sizeof(cl_platform_id) * platformCount);\n\tclGetPlatformIDs(platformCount, platforms, 0);\n\tcl_context_properties properties[] = {CL_CONTEXT_PLATFORM, (cl_context_properties)platforms[0], 0};\n\tcl_context context = clCreateContextFromType (properties, CL_DEVICE_TYPE_GPU, 0, 0, 0);\n\tclGetContextInfo (context, CL_CONTEXT_DEVICES, 0, 0, &bytes);\n\tcl_device_id* info = (cl_device_id*) malloc (bytes);\t\n\tclGetContextInfo (context, CL_CONTEXT_DEVICES, bytes, info, 0);\t\n\tcl_program program = clCreateProgramWithSource (context, 1, &ComputeKernel, 0, 0);\n\tclBuildProgram (program, 0, 0, 0, 0, 0);\n\tcl_kernel kernel = clCreateKernel (program, \"mainImage\", 0);\t\n\tcl_command_queue queue = clCreateCommandQueue (context, info[0], 0, 0); \n\tcl_mem buffer = clCreateBuffer (context, CL_MEM_WRITE_ONLY, width*height*sizeof(uchar4), 0, 0);\n\tclSetKernelArg (kernel, 0, sizeof(cl_mem), (void*)&buffer);\n\tsize_t size = width * height;\n\tfloat s = GetTickCount()*0.001f;\n\twhile (!exit)\n\t{\n\t\twhile(PeekMessage(&msg, 0, 0, 0, PM_REMOVE))\n\t\t{\n\t\t\tif( msg.message==WM_QUIT ) exit = 1;\n\t\t\tTranslateMessage( &msg );\n\t\t\tDispatchMessage( &msg );\n\t\t}\n\t\tfloat time = GetTickCount()*0.001f - s;\n\t\tclSetKernelArg (kernel, 1, sizeof(cl_float), (void*)&time);\n\t\tclEnqueueNDRangeKernel(queue,kernel, 1, 0, &size, 0, 0, 0, 0);\t\n\t\tclEnqueueReadBuffer (queue, buffer, CL_TRUE, 0, width*height*sizeof(uchar4), host, 0, 0, 0);\t\t\n\t\tStretchDIBits(hdc,0,0,width,height,0,0,width,height,host,&bmi,DIB_RGB_COLORS,SRCCOPY);\n\t}\n\treturn 0;\n}\n*/\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n\tvec3 L = normalize(vec3(0.0,50.0*cos(iTime*0.2),50.0*sin(iTime*0.2)));\n\tvec3 N = normalize(vec3(p,sqrt(abs(0.25-dot(p,p)))));\n\tfragColor = vec4(vec3(max(dot(N,L),0.0)),1.0); \n}","name":"Image","description":"","type":"image"}]}