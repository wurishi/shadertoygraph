{"ver":"0.1","info":{"id":"MtffW8","date":"1511721704","viewed":812,"name":"Alien Spawning Pool","username":"ChristinaCoffin","description":"warning: code has lots of number constant hacks to get desired visual effect, see reference source for proper fbm+noise code as a starting point.","likes":25,"published":1,"flags":0,"usePreview":0,"tags":["procedural","fbm","distortion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// 'Alien Spawning Pool' by @christinacoffin \n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n//\n// hacked up version of https://www.shadertoy.com/view/4s23zz#\n// See https://iquilezles.org/articles/warp for details\n// \n//\n#define iGlobalTime iTime\nfloat noise( in vec2 x )\n{\n    x.x +=0.3*cos(x.y+(iTime*0.3));//crawling under myyyy skinnn!\n    x.y +=0.3*sin(x.x);\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n \n    //edit: using texture instead of textureLod so this compiles+runs on mobile\n    vec4 a_vec = texture(iChannel0,(p+vec2(0.5,0.5))/256.0,-32.0);\n\tvec4 b_vec = texture(iChannel0,(p+vec2(1.5,0.5))/256.0,-32.0);\n\tvec4 c_vec = texture(iChannel0,(p+vec2(0.5,1.5))/256.0,-32.0);\n\tvec4 d_vec = texture(iChannel0,(p+vec2(1.5,1.5))/256.0,-32.0);   \n   \n    float a = a_vec.x;\n    float b = b_vec.x;\n    float c = c_vec.x;\n    float d = d_vec.x;    \n    \n    return mix(mix( a, b,f.x), mix( c, d,f.x),f.y);\n}\n\nconst mat2 mtx = mat2( 0.480,  0.60, -0.60,  0.480 );\n\nfloat fbm4( vec2 p )\n{\n    float f = 0.0;\n\n    f += 0.15000*(-1.0+2.0*noise( p )); p = mtx*p*2.02;\n    f += 0.2500*(-1.0+2.0*noise( p )); p = mtx*p*2.03;\n    f += 0.1250*(-1.0+2.0*noise( p )); p = mtx*p*2.01;\n    f += 0.0625*(-1.0+2.0*noise( p ));\n\n    return f/0.9375;\n}\n\nfloat fbm6( vec2 p )\n{\n    float f = 0.0;\n\n    f += 0.500000*noise( p ); p = mtx*p*2.02;\n    f += 0.250000*noise( p ); p = mtx*p*2.03;\n    f += 0.63125000*noise( p ); p = mtx*p*2.01;\n    f += 0.062500*noise( p ); p = mtx*p*2.04;\n    f += 0.031250*noise( p ); p = mtx*p*2.01;\n    f += 0.015625*noise( p );\n\n    return f/0.996875;\n}\n\nfloat func( vec2 q, out vec2 o, out vec2 n )\n{\n    float ql = length( q );\n    q.x += 0.015*sin(0.11*iGlobalTime+ql*14.0);\n    q.y += 0.035*sin(0.13*iGlobalTime+ql*14.0);\n    q *= 0.7 + 0.2*cos(0.05*iGlobalTime);\n\n    q = (q+1.0)*0.5;\n\n    o.x = 0.5 + 0.5*fbm4( vec2(2.0*q*vec2(1.0,1.0)          )  );\n    o.y = 0.5 + 0.5*fbm4( vec2(2.0*q*vec2(1.0,1.0)+vec2(5.2))  );\n\n    float ol = length( o*o );\n    o.x += 0.003*sin(0.911*iGlobalTime*ol)/ol;\n    o.y += 0.002*sin(0.913*iGlobalTime*ol)/ol;\n\n\n    n.x = fbm6( vec2(4.0*o*vec2(1.0,1.0)+vec2(9.2))  );\n    n.y = fbm6( vec2(4.0*o*vec2(1.0,1.0)+vec2(5.7))  );\n\n    vec2 p = 11.0*q + 3.0*n;\n\n    float f = 0.5 + 0.85*fbm4( p );\n\n    f = mix( f, f*f*f*-3.5, -f*abs(n.x) );\n\n    float g = 0.5+0.5*sin(1.0*p.x)*sin(1.0*p.y);\n    f *= 1.0-0.5*pow( g, 7.0 );\n\n    return f;\n}\n\nfloat funcs( in vec2 q )\n{\n    vec2 t1, t2;\n    return func(q,t1,t2);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = fragCoord.xy / iResolution.xy;\n\tvec2 q = (-iResolution.xy + 2.0*fragCoord.xy) /iResolution.y;\n    vec2 o, n;\n    float f = func(q, o, n);\n    vec3 col = vec3(-0.91620);  \n\tcol = mix( vec3(0.2,0.1,0.4), col, f ); \n    col = mix( vec3(0.2,0.1,0.4), col * vec3(0.13,0.05,0.05), f );\n    col = mix( col, vec3(0.19,0.9,0.9), dot(n,n)*n.x*1.357 );\n    col = mix( col, vec3(0.5,0.2,0.2), 0.5*o.y*o.y );\n\tcol += 0.05*mix( col, vec3(0.9,0.9,0.9), dot(n,n) );\n    col = mix( col, vec3(0.0,0.2,0.4), 0.5*smoothstep(1.02,1.3,abs(n.y)+abs(n.x*n.x)) );\n    col *= f*(5.92+(1.1*cos(iTime)));//animate glowy translucent underbits\n   \n\tcol = mix( col, vec3(-1.0,0.2,0.4), 0.5*smoothstep(1.02,1.3,abs(n.y)+abs(n.x*n.x)) );   \n\tcol = mix( col, vec3(0.40,0.92,0.4), 0.5*smoothstep(0.602,1.93,abs(n.y)+abs(n.x*n.x)) );    \n    \n    vec2 ex = -1.* vec2( 2.0 / iResolution.x, 0.0 );\n    vec2 ey = -1.*vec2( 0.0, 2.0 / iResolution.y );\n\tvec3 nor = normalize( vec3( funcs(q+ex) - f, ex.x, funcs(q+ey) - f ) );\n    vec3 lig = normalize( vec3( 0.19, -0.2, -0.4 ) );\n    float dif = clamp( 0.03+0.7*dot( nor, lig ), 0.0, 1.0 );\n\n    vec3 bdrf;\n    bdrf  = vec3(0.85,0.90,0.95)*(nor.y*0.5+0.5);\n    bdrf += vec3(0.15,0.10,0.05)*dif;\n    col *= bdrf/f;\n    col = vec3(0.8)-col;\n    col = col*col;\n    col *= vec3(0.8,1.15,1.2);    \n\tcol *= 0.45 + 0.5 * sqrt(16.0*p.x*p.y*p.y*(2.0-p.x)*(1.0-p.y)) * vec3(1.,0.3,0.);\n\n    col = clamp(col,0.0,1.0);\n\tfragColor = vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"}]}