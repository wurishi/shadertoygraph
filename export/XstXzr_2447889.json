{"ver":"0.1","info":{"id":"XstXzr","date":"1457395630","viewed":1275,"name":"naive multipass gaussian blur","username":"teadrinker","description":"just curious about the performance. Huge improvement comparing to without multipass. Still not usable for realtime stuff if you want a lot of blur.\n\nThis is very neat btw:\nhttps://www.shadertoy.com/view/Xd33Dl","likes":11,"published":1,"flags":32,"usePreview":0,"tags":["gaussianblur"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 gamma(vec3 c,float g) { return vec3(pow(c.r,g), pow(c.g,g), pow(c.b,g)); }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    fragColor = vec4(gamma(texture( iChannel0, uv).rgb, 1.0/2.2), 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsXGRn","filepath":"/media/a/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg","previewfilepath":"/media/ap/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nvec3 gamma(vec3 c,float g) { return vec3(pow(c.r,g), pow(c.g,g), pow(c.b,g)); }\n\n\n// testimage generation, by hornet: https://www.shadertoy.com/view/Xd33Dl\n\nvec4 pattern( vec2 p )\n{\n    float aspect = iResolution.x/iResolution.y;\n    float p0 = step(abs(p.x-0.125), 0.01) * step(abs(p.y-0.27), 0.01);\n    float p1 = step( length( p-vec2(0.125, 0.45) ), 0.025 );\n    \n    float p2_0 = step( length( p-vec2(0.08, 0.14) ), 0.0125 );\n    float p2_1 = step( length( p-vec2(0.16, 0.125) ), 0.0125 );\n    float p2_2 = step( length( p-vec2(0.1, 0.07) ), 0.0125 );\n    float p2 = max(p2_0, max(p2_1,p2_2));\n    \n    return vec4( max( p0, max(p1,p2) ) );\n}\n\nvec3 sampletex( vec2 uv )\n{\n    float t = fract( 0.1*iTime );\n    if ( t < 1.0/3.0)\n    \treturn texture( iChannel0, uv).rgb ;\n    else if ( t < 2.0/3.0 )\n        return texture( iChannel1, uv).rgb ;\n    else\n\t    return texture( iChannel2, uv).rgb ;    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    if(fragCoord.x < 1.0 || fragCoord.x > iResolution.x - 1.0 ||\n       fragCoord.y < 1.0 || fragCoord.y > iResolution.y - 1.0 ) {\n        \n        fragColor = vec4(vec3(0.0),1.0);\n        \n    } else {\n        \n    \tfragCoord += 25.0 * vec2( cos(iTime), sin(iTime ) );\n    \n\t\tvec2 suv = fragCoord / iResolution.xy; \n    \tvec2 uv = fragCoord / iResolution.xx;\n    \n    \tvec3 sumcol;\n\n\t\tif ( suv.x < 0.25 )\n\t\t\tsumcol = pattern( uv ).rgb;\n\t\telse\n            sumcol = sampletex(uv); \n\n    \tfragColor = vec4( gamma(sumcol, 2.2) , 1.0 );\n    }\n}\n","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"#define SAMPLES_DIV_2 50\n\nfloat gauss(float x) {\n    return exp(-x*x*3.1415926535897932384626433);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 suv = fragCoord / iResolution.xy; \n    vec2 uv = fragCoord / iResolution.xx;\n    vec2 dx = vec2(1.0,0.0) / iResolution.xy;\n    \n    float blur = (iMouse.z>0.5) ? iResolution.x/iMouse.x : 1.0;\n\n    vec3 sum = vec3(0.0);\n    const int n = SAMPLES_DIV_2;\n    float oon = blur*2.0/float(n*2+1);\n    for(int i = -n; i <= n; i++) {\n       float ci = float(i);\n       sum += gauss(ci*oon) * texture( iChannel0, suv+dx*ci).rgb*oon;\n    }\n    fragColor = vec4(sum,1.0);\n}","name":"Buf B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"#define SAMPLES_DIV_2 50\n\nfloat gauss(float x) {\n    return exp(-x*x*3.1415926535897932384626433);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 suv = fragCoord / iResolution.xy; \n    vec2 uv = fragCoord / iResolution.xx;\n    vec2 dy = vec2(0.0,1.0) / iResolution.xy;\n    \n    float blur = (iMouse.z>0.5) ? iResolution.x/iMouse.x : 1.0;\n    \n    vec3 sum = vec3(0.0);\n    const int n = SAMPLES_DIV_2;\n    float oon = blur*2.0/float(n*2+1);\n    for(int i = -n; i <= n; i++) {\n       float ci = float(i);\n       sum += gauss(ci*oon) * texture( iChannel0, suv+dy*ci).rgb*oon;\n    }\n    fragColor = vec4(sum,1.0);\n}","name":"Buf C","description":"","type":"buffer"}]}