{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"// \"Ancient Temple\" by Kali\n\nconst int Iterations=14;\nconst float detail=.00002;\nconst float Scale=2.;\n\nvec3 lightdir=normalize(vec3(0.,-0.3,-1.));\n\n\nfloat ot=0.;\nfloat det=0.;\n\nfloat hitfloor;\nfloat hitrock;\n\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat tt;\n\nfloat de(vec3 pos) {\n\thitfloor=0.;\n\thitrock=0.;\n\tvec3 p=pos;\n\tp.xz=abs(.5-mod(pos.xz,1.))+.01;\n\tfloat DEfactor=1.;\n\tot=1000.;\n\tfor (int i=0; i<Iterations; i++) {\n\t\tp = abs(p)-vec3(0.,2.,0.);  \n\t\tfloat r2 = dot(p, p);\n\t\tfloat sc=Scale/clamp(r2,0.4,1.);\n\t\tp*=sc; \n\t\tDEfactor*=sc;\n\t\tp = p - vec3(0.5,1.,0.5);\n\t}\n    float rr=length(pos+vec3(0.,-3.03,1.85-tt))-.017;\n    float fl=pos.y-3.013;\n    float d=min(fl,length(p)/DEfactor-.0005);\n\td=min(d,-pos.y+3.9);\n    d=min(d,rr);\n    if (abs(d-fl)<.0001) hitfloor=1.;\n    if (abs(d-rr)<.0001) hitrock=1.;\n    return d;\n}\n\n\n\nvec3 normal(vec3 p) {\n\tvec3 e = vec3(0.0,det,0.0);\n\t\n\treturn normalize(vec3(\n\t\t\tde(p+e.yxx)-de(p-e.yxx),\n\t\t\tde(p+e.xyx)-de(p-e.xyx),\n\t\t\tde(p+e.xxy)-de(p-e.xxy)\n\t\t\t)\n\t\t);\t\n}\n\nfloat shadow(vec3 pos, vec3 sdir) {\n\t\tfloat totalDist =2.0*det, sh=1.;\n \t\tfor (int steps=0; steps<30; steps++) {\n\t\t\tif (totalDist<1.) {\n\t\t\t\tvec3 p = pos - totalDist * sdir;\n\t\t\t\tfloat dist = de(p)*1.5;\n\t\t\t\tif (dist < detail)  sh=0.;\n\t\t\t\ttotalDist += max(0.05,dist);\n\t\t\t}\n\t\t}\n\t\treturn max(0.,sh);\t\n}\n\nfloat calcAO( const vec3 pos, const vec3 nor ) {\n\tfloat aodet=detail*80.;\n\tfloat totao = 0.0;\n    float sca = 10.0;\n    for( int aoi=0; aoi<5; aoi++ ) {\n        float hr = aodet + aodet*float(aoi*aoi);\n        vec3 aopos =  nor * hr + pos;\n        float dd = de( aopos );\n        totao += -(dd-hr)*sca;\n        sca *= 0.75;\n    }\n    return clamp( 1.0 - 5.0*totao, 0.0, 1.0 );\n}\n\n\n\nfloat kset(vec3 p) {\n\tp=abs(.5-fract(p*20.));\n\tfloat es, l=es=0.;\n\tfor (int i=0;i<13;i++) {\n\t\tfloat pl=l;\n\t\tl=length(p);\n\t\tp=abs(p)/dot(p,p)-.5;\n\t\tes+=exp(-1./abs(l-pl));\n\t}\n\treturn es;\t\n}\n\nmat2 rot;\n\nvec3 light(in vec3 p, in vec3 dir) {\n\tfloat hf=hitfloor;\n\tfloat hr=hitrock;\n\tvec3 n=normal(p);\n\tfloat sh=clamp(shadow(p, lightdir)+hf+hr,.4,1.);\n\tfloat ao=calcAO(p,n);\n\tfloat diff=max(0.,dot(lightdir,-n))*sh*1.3;\n\tfloat amb=max(0.2,dot(dir,-n))*.4;\n\tvec3 r = reflect(lightdir,n);\n\tfloat spec=pow(max(0.,dot(dir,-r))*sh,10.)*(.5+ao*.5);\n\tfloat k=kset(p)*.18; \n\tvec3 col=mix(vec3(k*1.1,k*k*1.3,k*k*k),vec3(k),.45)*2.;\n\tvec3 pp=p-vec3(0.,3.03,tt);\n    pp.yz*=rot;\n    if (hr>0.) col=vec3(.9,.8,.7)*(1.+kset(pp*2.)*.3);\n    col=col*ao*(amb*vec3(.9,.85,1.)+diff*vec3(1.,.9,.9))+spec*vec3(1,.9,.5)*.7;\t\n\treturn col;\n}\n\n\nvec3 raymarch(in vec3 from, in vec3 dir) \n{\n\tfloat t=iTime;\n\tfloat cc=cos(t*.03); float ss=sin(t*.03);\n    rot=mat2(cc,ss,-ss,cc);\n    vec2 lig=vec2(sin(t*2.)*.6,cos(t)*.25-.25);\n\tfloat fog,glow,d=1., totdist=glow=fog=0.;\n\tvec3 p, col=vec3(0.);\n\tfloat ref=0.;\n\tfloat steps;\n\tfor (int i=0; i<130; i++) {\n\t\tif (d>det && totdist<3.5) {\n\t\t\tp=from+totdist*dir;\n\t\t\td=de(p);\n\t\t\tdet=detail*(1.+totdist*55.);\n\t\t\ttotdist+=d; \n\t\t\tglow+=max(0.,.02-d)*exp(-totdist);\n\t\t\tsteps++;\n\t\t}\n\t}\n\t//glow/=steps;\n\tfloat l=pow(max(0.,dot(normalize(-dir),normalize(lightdir))),10.);\n\tvec3 backg=vec3(.8,.85,1.)*.25*(2.-l)+vec3(1.,.9,.65)*l*.4;\n\tfloat hf=hitfloor;\n\tif (d<det) {\n\t\tcol=light(p-det*dir*1.5, dir); \n\t\tif (hf>0.5) col*=vec3(1.,.85,.8)*.6;\n\t\tcol*=min(1.2,.5+totdist*totdist*1.5);\n\t\tcol = mix(col, backg, 1.0-exp(-1.3*pow(totdist,1.3)));\n\t} else { \n\t\tcol=backg;\n\t}\n\tcol+=glow*vec3(1.,.9,.8)*.34;\n\tcol+=vec3(1,.8,.6)*pow(l,3.)*.5;\n\treturn col; \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\ttt=iTime*.05;\n    vec2 uv = fragCoord.xy / iResolution.xy*2.-1.;\n\tuv.y*=iResolution.y/iResolution.x;\n\tvec2 mouse=(iMouse.xy/iResolution.xy-.5);\n\tfloat t=iTime*.15;\n\tfloat y=(cos(iTime*.1+3.)+1.);\n\tif (iMouse.z<1.) mouse=vec2(sin(t*2.),cos(t)+.3)*.15*(.5+y)*min(1.,iTime*.1);\n\tuv+=mouse*1.5;\n\tuv.y-=.1;\n\t//uv+=(texture(iChannel1,vec2(iTime*.15)).xy-.5)*max(0.,h)*7.;\n\tvec3 from=vec3(0.0,3.04+y*.1,-2.+iTime*.05);\n\tvec3 dir=normalize(vec3(uv*.85,1.));\n\tvec3 color=raymarch(from,dir); \n\t//col*=length(clamp((.6-pow(abs(uv2),vec2(3.))),vec2(0.),vec2(1.)));\n\tcolor*=vec3(1.,.94,.87);\n\tcolor=pow(color,vec3(1.2));\n\tcolor=mix(vec3(length(color)),color,.85)*.95;\n\tcolor+=vec3(1,.85,.7)*pow(max(0.,.3-length(uv-vec2(0.,.03)))/.3,1.5)*.65;\n\tfragColor = vec4(color,1.);\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4lX3Rj","date":"1423183233","viewed":2658,"name":"Ancient Temple","username":"Kali","description":"A neverending visit to a fractal temple.","likes":109,"published":1,"flags":0,"usePreview":0,"tags":["3dfractal"],"hasliked":0,"parentid":"","parentname":""}}