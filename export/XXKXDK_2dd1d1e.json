{"ver":"0.1","info":{"id":"XXKXDK","date":"1720507472","viewed":28,"name":"Tricorn&Julia_Automatic Movement","username":"Reversion","description":"This shader is for a course, Fragment Shading Art(course code: ARTS1308) in ShanghaiTech University.\nReference: https://www.shadertoy.com/view/fdtcD2\n","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["julia","tricorn"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// CC BY-SA 3.0 License\n// This shader is for a course, Fragment Shading Art(course code: ARTS1308) in ShanghaiTech University.\n// Reference: https://www.shadertoy.com/view/fdtcD2\n\n#define PI 3.1415926535\n\nfloat tricorn(vec2 z, vec2 c) {\n    float l = 0.0;\n    for (l = 0.0; l < 100.0; l += 1.0) {\n        z = vec2(z.x * z.x - z.y * z.y, -2.0 * z.x * z.y) + c;\n        if(dot(z, z) > 65536.0) break;\n    }\n    return l - log2(log2(dot(z,z))) + 4.0;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = ((2.0 * fragCoord - iResolution.xy) / iResolution.x) * 2.0;\n    \n    \n    vec2 ms;\n    float radius = .6;\n    \n    const int type = 1;\n    // Following: move through three axises in cosine curve. Choose type = 1 to see.\n    if (type == 1){\n        if (mod(iTime, 12.) < 4.) {ms = vec2(-.7,.0) + radius * vec2(.5*(1.-cos(iTime*PI/2.)),sin(PI/3.)*(1.-cos(iTime*PI/2.)));}\n        else if (mod(iTime, 12.) < 8.) {ms = vec2(-.7,.0) + radius * vec2(-1.*(1.-cos(iTime*PI/2.)),.0);}\n        else {ms = vec2(-.7,.0) + radius * vec2(.5*(1.-cos(iTime*PI/2.)),-sin(PI/3.)*(1.-cos(iTime*PI/2.)));}\n    }\n    \n    // Following: move in cos(3\\theta) curve. Choose type = 2 to see.\n    if (type == 2){\n        radius = .8;\n        float T = 3.;\n        float theta = iTime/T*PI/3.;\n        float r = -cos(3.*theta);\n        ms = vec2(-.7,.0) + radius * vec2(r*cos(theta),r*sin(theta));\n    }\n    \n    \n    \n    vec2 mnduv = vec2(uv.x + .7, uv.y) * 2.0;\n    vec2 julms = vec2(ms.x + .7, ms.y) * 2.0;\n    vec2 juluv = vec2(uv.x - 1., uv.y);\n    \n    vec3 col = vec3(0);\n    \n    if (fragCoord.x > iResolution.x / 2.0) {\n        float j = tricorn(juluv * 2.0, julms);\n        col = vec3((j > 99.0) ? 0.0 : sin(j / 20.0)) * vec3(0.4, 0.8, 1.0);\n    } else {\n        float m = tricorn(vec2(0), mnduv);\n        col = vec3((m > 99.0) ? 0.0 : sin(m / 20.0)) * vec3(0.4, 0.8, 1.0);\n    }\n    \n    const float gamma = 0.7;\n    col.x = pow(col.x, gamma);\n    col.y = pow(col.y, gamma);\n    col.z = pow(col.z, gamma);\n    \n    float p = length(uv - ms) - 0.025;\n    \n    if (p < 0.0) fragColor = vec4(vec3(1.0, 0.0, 0.0), 1.0);\n    else fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}