{"ver":"0.1","info":{"id":"ctsyzN","date":"1690471434","viewed":270,"name":"Outline and Pixelify","username":"daiksoul","description":"Draws outline and Pixelify image","likes":1,"published":3,"flags":2,"usePreview":1,"tags":["pixel"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// pixel scale\n#define SCALEFAC 1.\n// color unification\n#define COLFAC 1.\n// outline threshold\n#define THRESHLD 0.05\n// line thickness\n#define STEPS 3\n// line color\n#define LINECOL vec4(0.2,0.2,0.2,1.)\n\nvec4 colorAt(vec2 uv){\n    vec4 t = texture(iChannel0,uv);\n    float r = floor( t.r * 255. / COLFAC ) * COLFAC / 255.;\n    float g = floor( t.g * 255. / COLFAC ) * COLFAC / 255.;\n    float b = floor( t.b * 255. / COLFAC ) * COLFAC / 255.;\n    return vec4(r*1.,g*1.,b,t.a);\n}\n\nvec4 colorAtO(vec2 uv){\n    return texture(iChannel0,uv);\n}\n\nvec2 deScale(vec2 uv, float factor){\n    float u = floor( uv.x / factor) * factor;\n    float v = floor( uv.y / factor) * factor;\n    return vec2(u,v);\n}\n\nfloat colorDe(vec4 col1, vec4 col2){\n    vec4 t = col1 - col2;\n    return (abs(t.r) + abs(t.g) + abs(t.b))/3.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    // vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 uvO = fragCoord/iResolution.xy;\n    if(uvO.x < 0. ){\n        fragColor = colorAtO(uvO);\n        return;\n    }\n    \n    vec2 uvi = deScale(fragCoord,SCALEFAC);\n    //vec2 uvi = fragCoord;\n    \n    if(uvO.x < 0.){\n        uvi = fragCoord;\n    }\n    \n    vec2 uv = uvi/iResolution.xy;\n    \n    float t1 = 0.;\n    for(int i = 1; i<=STEPS; i++){\n        vec2 uuv = uvi - vec2(0.,float(i));\n        vec2 duv = uvi + vec2(0.,float(i));\n        t1 = t1 + colorDe(colorAt(uuv/iResolution.xy),colorAt(duv/iResolution.xy));\n    }\n    t1 = t1/float(STEPS);\n    \n    float t2 = 0.;\n    for(int i = 1; i<=STEPS; i++){\n        vec2 luv = uvi - vec2(float(i),0.);\n        vec2 ruv = uvi + vec2(float(i),0.);\n        t2 = t2 + colorDe(colorAt(luv/iResolution.xy),colorAt(ruv/iResolution.xy));\n    }\n    t2 = t2/float(STEPS);\n\n    // Time varying pixel color\n    // vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    if(t1>=THRESHLD|| t2>=THRESHLD){\n        fragColor = LINECOL;\n    }\n    else{\n        fragColor = colorAt(uv);\n    }\n}","name":"Image","description":"","type":"image"}]}