{"ver":"0.1","info":{"id":"Msfcz7","date":"1487466842","viewed":339,"name":"Distance Deforming Effect","username":"Frizzil","description":"Simple pixel-space deformation effect. Distance from the a point (here, the mouse) is interpolated with the distance taken to a power within a specified radius.","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["distort","deform","postprocess","gravity"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nconst float scrunchDistance = 200.0; // In \"pixel space\"\nconst float scrunchPower = 0.5;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Deformation is performed in \"pixel space\"\n    // This is necessary to use since \"screen space\" rescales to aspect ratio!\n\tvec2 screenPos = fragCoord.xy;\n    \n    vec2 mousePos;\n    if (iMouse.w <= 0.0)\n    {\n        float t = iTime * 2.5;\n        float r = 0.3;\n        mousePos = iResolution.xy * (0.5 + r * vec2( sin(t), cos(t) ) );\n    }\n    else\n        mousePos = iMouse.xy;\n        \n    vec2 dirFromMouse = screenPos - mousePos;\n    float distance = length( dirFromMouse );\n    dirFromMouse /= distance;\n    \n    float weight = clamp( distance / scrunchDistance, 0.0, 1.0 );\n    float distanceDeformed = pow( weight, scrunchPower ) * scrunchDistance;\n    distanceDeformed = mix( distanceDeformed, distance, weight );\n    vec2 screenPosDeformed = mousePos + dirFromMouse * distanceDeformed;\n    \n    // Transform from \"pixel space\" to \"texture space\" (depends on application)\n    // We could optionally clamp the uvs here, but better to specify wrap behavior in sampler or texture definition.\n    vec2 uv = screenPosDeformed / iResolution.xy;\n    \n\tfragColor = texture( iChannel0, uv );\n}","name":"Image","description":"","type":"image"}]}