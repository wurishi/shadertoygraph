{"ver":"0.1","info":{"id":"DdfBRS","date":"1688845868","viewed":74,"name":"Curled strands","username":"vete","description":"kind of looks like hair","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["sine","rotation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n\nfloat len(vec2 uv){\n\nreturn length(uv);\n\n}\n\n//https://www.shadertoy.com/view/NlVfWh\nfloat slin(vec2 p, vec2 a, vec2 b) {\n    float h = min(1.0, max(0.0, dot(p - a, b - a) / dot(b - a, b - a))); //dot(b - a, b - a) == b-a * b-a\n    return length(p - (a + h * (b - a))); // return distance from point to line\n\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    vec2 uv2 = uv;\n    \n    \n    vec2 id = fract(uv);\n    float t =iTime/11.;\n    uv2 += vec2(sin(t*11.),0.);\n    // Time varying pixel color\n    vec3 col;\n    float i;\n    uv *= 4.*(2.4+cos(t*3.));\n\n    while(i < 2.){\n    \n    \n    \n    uv *= rot(i+t);\n\n    for(float j = 0.; j<2. ;  j+=.1){\n    uv2 += uv2*rot(j)*sin(t)/111.;\n    col += float(slin(uv2+sin(t*3.+len(uv2)),uv*rot(-j*j)+i,uv*rot(-i*i-t))< 0.001+0.0004*len(uv))*len(0.2/uv);\n   \n    }\n\n    i+=0.3;\n    \n    }\n    \n    \n    \n \n\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}