{"ver":"0.1","info":{"id":"sd23zd","date":"1617845697","viewed":49,"name":"Re-making a Cornell Box SM","username":"eurekazheng","description":"Re-making a Cornell Box","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["cis561"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int RAY_STEPS = 256;\nconst float FOVY = 0.25 * 3.14159;\n\nstruct Intersection\n{\n    float t;\n    vec3 color;\n    vec3 p;\n    int object;\n};\n    \nfloat sphere(vec3 p, float r, vec3 c)\n{\n    return distance(p, c) - r;\n}\n\nvec3 rotateY(vec3 p, float a) {\n    return vec3(cos(a) * p.x + sin(a) * p.z, p.y, -sin(a) * p.x + cos(a) * p.z);\n}\n\nfloat plane( vec3 p, vec4 n )\n{\n  return dot(p,n.xyz) + n.w;\n}\n\nfloat box(vec3 p, vec3 b)\n{\n  return length(max(abs(p) - b, 0.0));\n}\n\nfloat sceneMap3D(vec3 pos)\n{\n    float t = plane(pos, vec4(0.0, 0.0, -1.0, 5.0));\n    t = min(t, plane(pos, vec4(1.0, 0.0, 0.0, 5.0)));\n    t = min(t, plane(pos, vec4(0.0, -1.0, 0.0, 7.5)));\n    t = min(t, plane(pos, vec4(-1.0, 0.0, 0.0, 5.0)));\n    t = min(t, plane(pos, vec4(0.0, 1.0, 0.0, 2.5)));   \n    t = min(t, box(rotateY(pos + vec3(-2, 1, 0.75), -25. * 3.14159 / 180.0), vec3(1.4, 1.4, 1.4)));\n    t = min(t, box(rotateY(pos + vec3(2, 1, -0.75), 25. * 3.14159 / 180.0), vec3(1.4, 3.5, 1.4)));\n    return t;\n}\n\nvoid sceneMap3D(vec3 pos, out float t, out int obj)\n{\n    t = plane(pos, vec4(0.0, 0.0, -1.0, 5.0));\n    obj = 0;\n    \n    float t2;\n    if((t2 = plane(pos, vec4(1.0, 0.0, 0.0, 5.0))) < t)\n    {\n        t = t2;\n        obj = 1;\n    }\n    if((t2 = plane(pos, vec4(-1.0, 0.0, 0.0, 5.0))) < t)\n    {\n        t = t2;\n        obj = 2;\n    }\n    if((t2 = plane(pos, vec4(0.0, -1.0, 0.0, 7.5))) < t)\n    {\n        t = t2;\n        obj = 3;\n    }\n    if((t2 = plane(pos, vec4(0.0, 1.0, 0.0, 2.5))) < t)\n    {\n        t = t2;\n        obj = 4;\n    }\n    if((t2 = box(rotateY(pos + vec3(-2, 1, 0.75), -25. * 3.14159 / 180.0), vec3(1.4, 1.4, 1.4))) < t)\n    {\n        t = t2;\n        obj = 5;\n    }\n    if((t2 = box(rotateY(pos + vec3(2, 1, -0.75), 25. * 3.14159 / 180.0), vec3(1.4, 3.5, 1.4))) < t)\n    {\n        t = t2;\n        obj = 6;\n    }\n}\n\nvec3 computeNormal(vec3 pos)\n{\n    vec3 epsilon = vec3(0.0, 0.001, 0.0);\n    return normalize( vec3( sceneMap3D(pos + epsilon.yxx) - sceneMap3D(pos - epsilon.yxx),\n                            sceneMap3D(pos + epsilon.xyx) - sceneMap3D(pos - epsilon.xyx),\n                            sceneMap3D(pos + epsilon.xxy) - sceneMap3D(pos - epsilon.xxy)));\n}\n\nvoid march(vec3 origin, vec3 dir, out float t, out int hitObj)\n{\n    t = 0.001;\n    for(int i = 0; i < RAY_STEPS; ++i)\n    {\n        vec3 pos = origin + t * dir;\n    \tfloat m;\n        sceneMap3D(pos, m, hitObj);\n        if(m < 0.01)\n        {\n            return;\n        }\n        t += m;\n    }\n    t = -1.0;\n    hitObj = -1;\n}\n\nvec3 computeMaterial(int hitObj, vec3 p, vec3 n, vec3 lightVec)\n{\n    float lambertian = dot(-lightVec, n);\n    switch(hitObj){\n        case 0:\n        return vec3(1., 1., 1.) * lambertian;\n        break;\n        case 1:\n        return vec3(0., 1., 0.) * lambertian;\n        break;\n        case 2:\n        return vec3(1., 0., 0.) * lambertian;\n        break;\n        case 3:\n        return vec3(1., 1., 1.) * lambertian;\n        break;\n        case 4:\n        return vec3(1., 1., 1.) * lambertian;\n        break;\n        case 5:\n        return vec3(1., 1., 1.) * lambertian;\n        break;\n        case 6:\n        return vec3(1., 1., 1.) * lambertian;\n        break;\n        case -1:\n        return vec3(0., 0., 0.);\n        break;\n    }\n    return vec3(1.);\n}\n\nIntersection sdf3D(vec3 dir, vec3 eye)\n{\n    float t;\n    int hitObj;\n    march(eye, dir, t, hitObj);\n\n    vec3 isect = eye + t * dir;\n    vec3 nor = computeNormal(isect);\n    \n    vec3 lightPos = vec3(0., 7.4, -3.5);\n    vec3 lightVec = normalize(isect - lightPos);\n    \n    vec3 surfaceColor = computeMaterial(hitObj, isect, nor, lightVec);    \n    return Intersection(t, surfaceColor, isect, hitObj);\n}\n\nvoid rayCast(vec2 uv, out vec3 dir, out vec3 eye, out vec3 ref)\n{\n    eye = vec3(0, 5, -20);\n    ref = vec3(0, 3, 0);\n    \n    float len = tan(3.14159 * 0.125) * distance(eye, ref);\n    vec3 H = normalize(cross(vec3(0.0, 1.0, 0.0), ref - eye));\n    vec3 V = normalize(cross(H, eye - ref));\n    V *= len;\n    H *= len * iResolution.x / iResolution.y;\n    vec3 p = ref + uv.x * H + uv.y * V;    \n    dir = normalize(p - eye);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = uv * 2.0 - vec2(1.0, 1.0);\n    \n    vec3 eye;    \n    vec3 ref;\n    vec3 dir;\n    rayCast(uv, dir, eye, ref);\n    \n    Intersection isect = sdf3D(dir, eye);\n    fragColor = vec4(isect.color, 1.0);\n}","name":"Image","description":"","type":"image"}]}