{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"texture","id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}},{"channel":1,"type":"texture","id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"\nmat4 rotateY(in float a)\n{\n   float cosa = cos(a);\n   float sena = sin(a);\n   return mat4( cosa, 0.0, -sena, 0.0,\n               0.0  , 1.0, 0.0, 0.0,\n               sena , 0.0, cosa , 0.0\t,\n               0.0  , 0.0, 0.0 , 1.0\t);\n}\n\nmat4 rotateX(in float a)\n{\n   float cosa = cos(a);\n   float sena = sin(a);\n   return mat4( 1.0, 0.0, 0.0, 0.0,\n             0.0,\tcosa , sena, 0.0,\n             0.0, -sena , cosa , 0.0,\n             0.0  , 0.0, 0.0 , 1.0\t);\n}\n\nmat4 rotateZ(in float a)\n{\n   float cosa = cos(a);\n   float sena = sin(a);\n   return mat4( cosa ,sena , 0.0,  0.0,\n                -sena, cosa, 0.0,   0.0,\n             \t0.0\t ,0.0  , 1.0,  0.0,\n             \t0.0  ,0.0  , 0.0,  1.0\t);\n}\n\nfloat fbm(vec2 p);\n    \n\nfloat noise(vec2 uv)\n{\n \treturn texture(iChannel0, uv).r;   \n}\n\n\nfloat fbm(vec2 p)\n{\n    float f;\n    f += 0.1375 * noise(p); p *= 2.042;\n    f += 0.025 * noise(p); p *= 2.072;\n    f += 0.0775 * noise(p); p *= 2.01;\n    f += 0.095 * noise(p); p *= 2.03;\n    \n    \n    return f / 0.335;   \n}\n\nbool intersectPlane(in vec3 o, in vec3 d, in vec3 p, in vec3 n, out float t)\n{\n\tfloat dotP=dot(d, n);\n\tif(abs(dotP)<0.001)\n\t\treturn false;\n\tt=-(dot(o,n)-dot(p,n))/dotP - 0.12 * fbm(o.xz + d.xz * 8.73);\n\tif(t>0.0)\n        return true;\n\treturn false;\n}\n\nvec3 camera(in vec3 dir)\n{\n    vec3 cam =  dir;\n   \n        \n    vec2 m = iMouse.xy;\n    m /= iResolution.xy;\n   \n    mat4 rotY = rotateY(-(m.x * 4.0 - 2.0));\n    mat4 rotX = rotateX(m.y * 4.0 - 2.0);\n\n\n    cam = normalize(vec3(rotY *rotX *  vec4(cam, 0.0))); \n    \n   return cam;\n}\n\n\n#define FREQUENCY 0.0088\n#define MFREQUENCY 0.019\n#define WATERSPEED\t0.125\n#define NORMALOFFSET 0.1\n#define ITERATIONS 4\n#define EXPONENT 40.4\n#define MAXDIFANDSPEC 1.0 / ITERATIONS \n#define NORMCOSSIN(x) ((x) * 0.5 + 1.0)\n#define FDIST 2800.0\n\n\n\nfloat f(vec2 p)\n{\n    float fy = smoothstep(0.01, 0.3, \tNORMCOSSIN( sin(iTime * 0.3)));\n    float fx = smoothstep(0.02, 0.2,\tNORMCOSSIN( cos(iTime * 0.1)));\n    \n \treturn (fbm(p) * (NORMCOSSIN(sin(iTime * p.x * fx)) + NORMCOSSIN(cos(iTime * p.y * fy))));   \n    \n}\n\nvec3  getNormal(vec2 p)\n{\n    float fT = f(vec2(p.x, p.y + NORMALOFFSET));\n    float fL = f(vec2(p.x - NORMALOFFSET, p.y ));\n    float fR = f(vec2(p.x + NORMALOFFSET, p.y ));\n    \n    vec3 p0 = vec3(0.0, NORMALOFFSET, fT);\n    vec3 p1 = vec3(-NORMALOFFSET, 0.0, fL);          \n    vec3 p2 = vec3(NORMALOFFSET,  0.0, fR);            \n    \n    vec3 v0 = p1 - p0;\n    vec3 v1 = p2 - p0;\n                   \n    return normalize(cross(v0, v1));\n    \n}\nconst vec4 wColor = vec4(0.0, 0.1, 0.89, 1.0);\nconst vec4 fColor = vec4(0.0, 0.0, 0.1, 1.0);\nconst vec4 sColor = vec4(0.0, 0.0, 0.1, 1.0);\nconst vec4 wSColor = vec4(1.0, 1.0, 1.0, 1.0);\nconst float fMaxAportation = 1.0 / float(ITERATIONS + 1);\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 ss = uv * 2.0 - 1.0;\n    ss.y *= iResolution.y / iResolution.x;\n    vec3 ld = normalize(vec3(0.0, sin(iTime * 0.2), -3.0));\n    vec3 cd = normalize(vec3(0.0, 0.0, 1.0));\n    cd = camera(vec3(ss, -1.0));\n    vec3 cp = vec3(0.0, 1.0, 0.0);\n    \n    vec3 n = vec3(0.0);\n    vec4 color = sColor;\n\tvec3 wpp = vec3(0.0, -1.0, 0.0);\n    vec3 wpn = vec3(0.0, 1.0, 0.0);\n    float t = FDIST * FDIST;\n    bool col = false;\n    if(intersectPlane (cp, cd, wpp, wpn, t))\n    {\n        vec2 wp = (cp + cd * t).xz + vec2(iTime * WATERSPEED);\n    \tcolor = texture(iChannel1 , wp) * fMaxAportation;\n        //float height = fbm(wp * FREQUENCY);\n        for(int i = 0; i < ITERATIONS; ++i)\n        {\n            n = (getNormal(wp * float(i) *  float(i) * FREQUENCY));\n\n\n            float fDiffuse = max(dot(ld, -n), fMaxAportation * 0.5);\n            vec4 c = mix(wColor, vec4(0.9,0.9,0.9, 1.0), fDiffuse * fDiffuse );\n            vec3 e = -cd;\n            vec3 r = normalize(reflect(ld, -n));\n            c += max(pow(max(-dot(r, e), 0.0), EXPONENT), fMaxAportation * 0.5) * wSColor; //specular\n            c /= float(i + 1);\n            color += c ;\n\t\t\t\n        }\n        col = true;\n    }\n    \n    float fogFactor = (t*t)/FDIST;\n\tfloat m = dot(ld, cd);\n    float cosangle = cos(radians(10.0));\n    vec4 fauxColor = mix(vec4(1.0), fColor, smoothstep(0.0, 1.0, (abs(m )+ cosangle) / radians(10.0)));\n    //distance based fog computation\n   \tif(col)color = mix(color, fauxColor,smoothstep(0.0, 1.0,  ( t * t) / FDIST));\n    \n\tif(!col || fogFactor >= 0.9)\n    {\n       \n\t\t\n        if(m > cosangle)\n        {\n           // vec4 mTexel = texture(iChannel1, vec2(ss.x, ss.y) * 0.06);\n            vec4 mTexel = vec4(fbm((-cd.xy + ld.xy) * MFREQUENCY) + 0.4);\n            mTexel = vec4(mTexel.x * 0.2 + mTexel.y * 0.7 + mTexel.z * 0.1);\n        \tcolor = mix(color, vec4(1.0) * mTexel, smoothstep(1.0, 0.8, acos(m) / radians(10.0) ) ); \n            col = true;            \n        }\n    }\n   \tif(!col)color = mix(color, fColor,smoothstep(0.0, 1.0,  ( t * t) / FDIST));\n    \n   \tfragColor = color;\n\n    \n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"Xs2SRV","date":"1415303948","viewed":313,"name":"Waterish","username":"bolt304","description":"Some stuff generating water normals based on a noise texture.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["inprogress"],"hasliked":0,"parentid":"","parentname":""}}