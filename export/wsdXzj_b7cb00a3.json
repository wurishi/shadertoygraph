{"ver":"0.1","info":{"id":"wsdXzj","date":"1572441970","viewed":431,"name":"Distance-to-alpha methods +mouse","username":"104","description":"Some fundamental ways of converting signed distance to alpha.\nMouse click = dither+black&white","likes":25,"published":1,"flags":0,"usePreview":0,"tags":["2d","distancefield"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nfloat bayer4x4(vec2 fragCoord) {\n    const int dim = 4;\n    const float kern[dim*dim] = float[dim*dim]\n        (0.     ,0.5    ,0.125  ,0.625,\n 0.75   ,0.25   ,0.875  ,0.375,\n 0.1875 ,0.6875 ,0.0625 ,0.5625,\n 0.9375 ,0.4375 ,0.8125 ,0.3125);\n    \n    ivec2 idx = ivec2(fragCoord)% dim;\n    return kern[idx.x + (idx.y * dim)]-.5;\n}\n\nfloat bayer8x8(vec2 fragCoord) {\n    const int dim = 8;\n    const float kern[dim*dim] = float[dim*dim]\n (0.       ,0.5      ,0.125    ,0.625    ,0.03125  ,0.53125  ,0.15625  ,0.65625 ,\n 0.75     ,0.25     ,0.875    ,0.375    ,0.78125  ,0.28125  ,0.90625  ,0.40625 ,\n 0.1875   ,0.6875   ,0.0625   ,0.5625   ,0.21875  ,0.71875  ,0.09375  ,0.59375 ,\n 0.9375   ,0.4375   ,0.8125   ,0.3125   ,0.96875  ,0.46875  ,0.84375  ,0.34375 ,\n 0.046875 ,0.546875 ,0.171875 ,0.671875 ,0.015625 ,0.515625 ,0.140625 ,0.640625,\n 0.796875 ,0.296875 ,0.921875 ,0.421875 ,0.765625 ,0.265625 ,0.890625 ,0.390625,\n 0.234375 ,0.734375 ,0.109375 ,0.609375 ,0.203125 ,0.703125 ,0.078125 ,0.578125,\n 0.984375 ,0.484375 ,0.859375 ,0.359375 ,0.953125 ,0.453125 ,0.828125 ,0.328125)    ;\n    ivec2 idx = ivec2(fragCoord)% dim;\n    return kern[idx.x + (idx.y * dim)]-.5;\n}\n\n\nfloat dtoa(float sd, int v)\n{\n    switch(v)\n    {\n        case 0:// bottom left\n        \tsd -= .02;\n        \tfloat expAmt = 100.;\n        \treturn clamp(1.-exp(sd*expAmt), 0., 1.);\n        case 2: // bottom right\n    \t\tfloat divAmt = 200.;\n        \treturn 1. / clamp(sd*divAmt, 1., divAmt);\n        case 3:// upper right\n        \tfloat sqrtAmt = 30.;\n        \treturn 1.-sqrt(max(sd*sqrtAmt,0.));\n    }\n    // upper left\n    float sswidth = .03;\n    return smoothstep(sswidth, 0.,sd);\n}\n\nvoid tex( out vec4 o, in vec2 fragCoord, vec2 R, int variation )\n{\n    vec2 uv = fragCoord / R - .5;\n    uv.x *= R.x/R.y;\n    uv *= .8;\n    uv.y += .1;\n    \n    // just generate some interfering waves\n    float sd = 1e6;\n    float s = .05;\n    for (float i = 1.; i <= 8.; ++ i) {\n    \tuv.x += iTime*s;\n        float sd2 = uv.y + sin(uv.x*i)*.2;\n        sd2 = max(sd2, -uv.y-sin(uv.x*i+s*i*.3)*.2);\n        sd = min(sd, sd2);\n        s = -s * 1.2;\n        uv+= s;\n    }\n    \n    o = vec4(dtoa(sd, variation));\n    // dither.\n    if (iMouse.z > 0.) {\n        o += bayer8x8(fragCoord)*.8;\n        o = vec4(step(.5, o.r));\n    }\n    o = clamp(o, 0.,1.);\n}\n\n#define C(c) U.x-=.5; O+= char(U,64+c)\nvec4 char(vec2 p, int c) \n{\n    if (p.x<.0|| p.x>1. || p.y<0.|| p.y>1.) return vec4(0,0,0,1e5);\n\treturn textureGrad( iChannel0, p/16. + fract( vec2(c, 15-c/16) / 16. ), dFdx(p/16.),dFdy(p/16.) );\n}\n\nvoid mainImage( out vec4 o, in vec2 fragCoord )\n{\n    float halfLineW = 2.;\n    vec2 windowRes = iResolution.xy * .5;\n    vec2 windowFrag = mod(fragCoord, windowRes);\n    vec2 uv = windowFrag / iResolution.y;\n    uv.x -= .4;\n    uv.y -= .4;\n    vec2 U = uv*12.;\n    vec4 O = vec4(0);// char alpha\n    if (fragCoord.x <= iResolution.x * .5 - halfLineW) {\n        if (fragCoord.y <= iResolution.y * .5 - halfLineW) {\n            // BOTTOM LEFT\n    \t\ttex(o, windowFrag, windowRes, 0);\n            C(5);C(24);C(16);\n        } else if (fragCoord.y <= iResolution.y * .5 + halfLineW) {\n        \to = vec4(1);\n        } else {\n            // TOP LEFT\n\t    \ttex(o, windowFrag, windowRes, 1);\n            C(19);C(13);C(15);C(15);C(20);C(8);\n            C(19);C(20);C(5);C(16);\n        }\n    }\n    else if (fragCoord.x <= iResolution.x * .5 + halfLineW) {\n        \to = vec4(1);\n    } else {\n        if (fragCoord.y <= iResolution.y * .5 - halfLineW) {\n            // BOTTOM RIGHT\n\t    \ttex(o, windowFrag, windowRes, 2);\n    \t\tC(4);C(9);C(22);\n        } else if (fragCoord.y <= iResolution.y * .5 + halfLineW) {\n        \to = vec4(1);\n        } else {\n            // TOP RIGHT\n\t    \ttex(o, windowFrag, windowRes, 3);\n            C(19);C(17);C(18);C(20);\n        }\n    }\n    \n    o = mix(o, vec4(1.), O.x);// text\n}\n","name":"Image","description":"","type":"image"}]}