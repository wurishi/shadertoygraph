{"ver":"0.1","info":{"id":"MdscRM","date":"1487554011","viewed":138,"name":"3 blobs","username":"BattleJohnFantastica","description":"blobs","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["blobs"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define time iTime\n\nfloat dist(vec2 x, vec3 y) {\n    float a = abs(sqrt(pow((x.x - y.x),2.0) + pow((x.y - y.y),2.0)));\n    return a;\n\n}\nvec3 position(vec3 deft, vec2 alternative, float speed){\n    float move = abs(sin(time * speed));\n    vec2 difference = deft.xy - alternative.xy;\n    vec2 factor = difference * vec2(move);\n    vec2 position = deft.xy - factor;\n    return vec3(position,deft.z);\n}\n\nvec4 layer1(vec2 uv){\n    #define NUM 4\n    vec3 point[NUM];\n    point[0] = position(vec3(0.1,0.5,0.03),vec2(0.1, 0.1),0.5);\n    point[1] = position(vec3(0.3,0.5,0.05),vec2(0.3, 0.1),0.9);\n    point[2] = position(vec3(0.5,0.1,0.03),vec2(0.5, 0.5),3.14159);\n    point[3] = position(vec3(0.8,0.4,0.09),vec2(0.8, 0.1),0.5);\n    vec4 color = vec4(uv,0.5+0.5*sin(iTime),1.0);\n        for(int i = 0; i < NUM; i++){\n            float borderSize = 1.02;\n            float fixedBorder = 0.002;\n            float totalRadius = point[i].z * borderSize;\n            float totalRadiusFixedBorder = point[i].z + fixedBorder;\n            float different = sqrt(pow((uv.x - point[i].x),2.0) + pow((uv.y - point[i].y),2.0));\n            vec4 main = vec4(1.0,1.0,1.0,1.0);\n            if(different < point[i].z){   \n           \t\tcolor = main;\n            } else if(different < totalRadiusFixedBorder) {\n            \tfloat radius = point[i].z;\n           \t\tvec4 diff = abs(vec4(uv,0.5+0.5*sin(iTime),1.0) -  main);\n                float a = dist(uv, point[i]) - point[i].z;\n            \tfloat b = a / (totalRadiusFixedBorder - point[i].z);\n            \tcolor = main - (diff *vec4(b));\n            }\n        }\n    return color;\n}\n\n\nvec4 layer2(vec4 x, vec2 y) {\n    vec3 post = position(vec3(0.9, 0.9, 1.0), vec2(0.1, 0.1), 1.0);\n    float size = 0.09;\n    float total = size + 0.3;\n    vec4 bright = x + vec4(vec3(0.4), 1.0);\n    vec4 dark = x - vec4(vec3(0.9), 1.0);\n    if (dist(y, post) < size){   \n\t\treturn bright;\n    } else if (dist(y, post) < total) {\n    \tfloat percent = (dist(y, post) - size) / (total - size);\n    \tvec3 difference = bright.xyz - dark.xyz;\n        vec3 color = bright.xyz - (difference * pow(percent, 1.4));\n        return vec4( color ,1.0);\n    } else {\n    \treturn dark;\n    }\n\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.x;\n    fragColor = layer2(layer1(uv), uv);\n}","name":"Image","description":"","type":"image"}]}