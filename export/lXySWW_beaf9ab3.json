{"ver":"0.1","info":{"id":"lXySWW","date":"1719937103","viewed":38,"name":"Bobbing Ellipse alpha","username":"MajorCallisto","description":"Using an ellipse as an alpha channel on layered images","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["ellipse","alpha"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 rgb(float r, float g, float b) {\n\treturn vec3(r / 255.0, g / 255.0, b / 255.0);\n}\n\nvec4 circle(vec2 uv, vec2 pos, float rad, vec3 color) {\n\tfloat d = length(pos - uv) - rad;\n\tfloat t = clamp(d, 0.0, 1.0);\n\treturn vec4(color, 1.0 - t);\n}\n\n//dimensions:vec2 the radius width and height\n//center: x, y\nvec4 ellipse(vec2 uv, vec2 dimensions, vec2 center) {\n\n    // Example rotation in radians (you can modify this value or animate it using iTime)\n    float u_Rotation = radians(0.0);\n\n    // Center the coordinates based on the center uniform\n    vec2 coord = uv - center;\n\n    // Apply rotation\n    float cosTheta = cos(u_Rotation);\n    float sinTheta = sin(u_Rotation);\n    vec2 rotatedCoord = vec2(\n        cosTheta * coord.x - sinTheta * coord.y,\n        sinTheta * coord.x + cosTheta * coord.y\n    );\n\n    // Scale according to ellipse dimensions\n    vec2 scaledCoord = vec2(rotatedCoord.x / dimensions.x, rotatedCoord.y / dimensions.y);\n\n    // Check if the point is inside the ellipse\n    float value = dot(scaledCoord, scaledCoord);\n    \n    // Color based on the ellipse\n    vec3 col = vec3(0.0); // Default color is black\n    if (value <= 1.0) {\n        col = vec3(1.0); // White color inside the ellipse\n    }\n\n    // Output to screen\n    return vec4(0.,0.,0., col);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = fragCoord/iResolution.xy;\n\tvec2 center = iResolution.xy * 0.5;\n\tfloat radius = (0.5 * iResolution.y)/2.0;\n\n    float alpha = 0.5; //Src alpha is this\n\n    vec4 c0 = texture(iChannel0, uv);\n    vec4 c1 = texture(iChannel1, uv);\n    \n\n\n\t// Circle\n\t//vec3 white = rgb(255.0, 255.0, 255.0);\n\t//vec4 layerCircle = circle(fragCoord.xy, center, radius, white);\n    \n    // Ellipse\n    float ar = iResolution.x/iResolution.y;\n    vec4 layerEllipse = ellipse(uv, vec2(0.25/ar,0.25), vec2(0.5,0.5));\n\n    // Background layer\n\tvec4 layerBG = vec4(rgb(210.0, 222.0, 228.0), 1.0);\n    \n    // Output to screen\n    //fragColor.a =1.;\n    fragColor = mix(c0, c1, layerEllipse.a);\n    //fragColor = layerEllipse;\n}","name":"Image","description":"","type":"image"}]}