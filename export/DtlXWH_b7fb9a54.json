{"ver":"0.1","info":{"id":"DtlXWH","date":"1674690788","viewed":103,"name":"Rainbow Refraction","username":"mattdeeds","description":"Calculating refraction for five different frequencies of light and summing the result.\n\nYou can change the index of refraction on lines 63 to 67 for a different effect.  Try values larger than 1.0.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["refraction","raytrace"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 background(in vec3 dir) {\n  float theta = atan(dir.x, dir.z);\n  return vec3(smoothstep(0.98, 1.0, sin(theta * 30.0)));\n}\n\nbool intersectRaySphere(vec3 o, vec3 i, vec3 p, float r, out vec3 intersection) {\n    vec3 op = o - p;\n    float b = dot(op, i);\n    float c = dot(op, op) - r * r;\n    float disc = b * b - c;\n    if (disc < 0.0) {\n        return false;\n    } else {\n        float d = sqrt(disc);\n        float t1 = -b - d;\n        float t2 = -b + d;\n        if (t1 > 0.0) {\n            intersection = o + t1 * i;\n            return true;\n        } else if (t2 > 0.0) {\n            intersection = o + t2 * i;\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n\nvec3 refractOrReflect(vec3 i, vec3 n, float eta) {\n  vec3 o = refract(i, n, eta);\n  if (length(o) < 0.001) {\n    return reflect(i, n);\n  }\n  return o;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = 2.0 * ((fragCoord - 0.5 * iResolution.xy) /iResolution.y);\n    \n    vec3 camera = vec3(0.0);\n    vec3 incident = normalize(vec3(uv.x, uv.y, -1.0));\n    \n\n    // Time varying pixel color\n    vec3 col = vec3(background(incident));\n\n\n    vec3 intersection;\n    vec3 spherePosition = vec3(0.0, 0.0, -0.5);\n    \n    if (iMouse.x > 0.0) {\n        spherePosition = vec3(iMouse.xy / iResolution.xy - 0.5, -0.5);\n    }else {\n      spherePosition = vec3(0.8 * sin(iTime * 0.91), 0.5 * cos(iTime * 1.52), -0.5);\n    }\n    \n    \n    if (intersectRaySphere(camera, incident, spherePosition, 0.2, intersection)) {\n      vec3 normal = normalize(intersection - spherePosition);\n      \n      vec3 lensOutR = background(refractOrReflect(incident, normal, 0.510));\n      vec3 lensOutY = background(refractOrReflect(incident, normal, 0.515));\n      vec3 lensOutG = background(refractOrReflect(incident, normal, 0.520));\n      vec3 lensOutC = background(refractOrReflect(incident, normal, 0.525));\n      vec3 lensOutB = background(refractOrReflect(incident, normal, 0.530));\n      \n      col = vec3(lensOutR.r + lensOutY.r, \n                 (lensOutY.g + lensOutG.g + lensOutC.g) * (2.0 / 3.0), \n                 lensOutC.b + lensOutB.b);\n    }\n\n\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}