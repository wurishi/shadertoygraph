{"ver":"0.1","info":{"id":"mtdBWH","date":"1701199086","viewed":48,"name":"colorful and line","username":"nayk","description":"colorful, neon, light","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["light","colorful","neon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* original https://www.shadertoy.com/view/DtXfDr https://www.shadertoy.com/view/cttXRl#*/\n#define R(p,a,r) mix(a*dot(p,a),p,cos(r)) + sin(r)*cross(p,a)\n#define H(h) (cos((h)*6.3+vec3(0,23,21))*.5+.5)\n\nvec3 color(float t) {\n  vec3 c1 = vec3(1.0, 0.0, 0.0);\n  vec3 c2 = vec3(0.0, 1.0, 0.0);\n  vec3 c3 = vec3(0.0, 0.0, 1.0);\n  vec3 c4 = vec3(1.0, 1.0, 0.0);\n  vec3 c5 = vec3(1.0, 0.0, 1.0);\n  vec3 c6 = vec3(0.0, 1.0, 1.0);\n\n  float r = cos(t) * 0.5 + 0.5;\n  if (r < 0.23) return mix(c1, c2, r * 5.0);\n  if (r < 0.44) return mix(c2, c3, (r - 0.2) * 5.0);\n  if (r < 0.65) return mix(c3, c4, (r - 0.4) * 5.0);\n  if (r < 0.86) return mix(c4, c5, (r - 0.6) * 5.0);\n  return mix(c5, c6, (r - 0.8) * 7.0);\n}\nvec2 rotate(vec2 v, float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    return vec2(v.x * c - v.y * s, v.x * s + v.y * c);\n}\nfloat cheap_star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\n\n\n#define PI 3.14159265359\n#define TWO_PI 6.28318530718\n#define SEED 1.\n#define FBM_ITER 5\n\nfloat random1D(in vec2 uv,in int seed){\n    return fract(sin(dot(uv.xy,vec2(12.9898,78.233))+float(seed))*43758.5453123);\n}\n\nfloat valueNoise(in vec2 uv,in int seed){\n    vec2 x=floor(uv);\n    vec2 m=fract(uv);\n    \n    float bl=random1D(x,seed);\n    float br=random1D(x+vec2(1.,0.),seed);\n    float tl=random1D(x+vec2(0.,1.),seed);\n    float tr=random1D(x+vec2(1.,1.),seed);\n    \n    vec2 cf=smoothstep(vec2(0.),vec2(1.),m);\n    \n    float tm=mix(tl,tr,cf.x);\n    float bm=mix(bl,br,cf.x);\n    \n    return mix(bm,tm,cf.y);\n}\n\nfloat fbm(in vec2 st,in int seed){\n    float v=0.;\n    float a=.5;\n    float f=0.;\n    for(int i=0;i<FBM_ITER;i++){\n        v+=a*valueNoise(st,seed);\n        st*=2.;\n        a*=.5;\n    }\n    return v;\n}\n\nfloat cosine(in float x,in float s){\n    float y=cos(fract(x)*PI);\n    return floor(x)+.5-(.5*pow(abs(y),1./s)*sign(y));\n}\n\nvec2 cosine(in vec2 p,in float s){\n    return vec2(cosine(p.x,s),cosine(p.y,s));\n}\n\nvec3 cosine(in vec3 p,in float s){\n    return vec3(cosine(p.xy,s),cosine(p.z,s));\n}\n\nvec4 cosine(in vec4 p,in float s){\n    return vec4(cosine(p.xy,s),cosine(p.zw,s));\n}\n\nmat2 rot2(in float a){\n    float c=cos(a);\n    float s=sin(a);\n    return mat2(c,-s,s,c);\n}\n\nfloat fold(in float x){\n    return abs(mod(x+1.,2.)-1.);\n}\n\nvec2 fold(in vec2 p){\n    return vec2(fold(p.x),fold(p.y));\n}\n\nvec3 fold(in vec3 p){\n    return vec3(fold(p.xy),fold(p.z));\n}\n\nvec4 fold(in vec4 p){\n    return vec4(fold(p.xy),fold(p.zw));\n}\n\nfloat scale(in float x,in float a,in float b,in float c,in float d){\n    return(x-a)/(b-a)*(d-c)+c;\n}\n\nvec2 scale(in vec2 p,in float a,in float b,in float c,in float d){\n    return vec2(scale(p.x,a,b,c,d),scale(p.y,a,b,c,d));\n}\n\nvec3 scale(in vec3 p,in float a,in float b,in float c,in float d){\n    return vec3(scale(p.xy,a,b,c,d),scale(p.z,a,b,c,d));\n}\n\nvec4 scale(in vec4 p,in float a,in float b,in float c,in float d){\n    return vec4(scale(p.xy,a,b,c,d),scale(p.zw,a,b,c,d));\n}\n\nvec3 gradient(in float t,in vec3 a,in vec3 b,in vec3 c,in vec3 d){\n    return a+b*cos(TWO_PI*(c*t+d));\n}\n\nvec2 adjustViewport(in vec2 uv,in vec2 r){\n    return(uv*2.-r)/(r.x<r.y?r.x:r.y);\n}\n\nfloat ltime;\n\nfloat noise(vec2 p)\n{\n  return sin(p.x*10.) * sin(p.y*(3. + sin(ltime/11.))) + .2; \n}\n\nmat2 rotate(float angle)\n{\n  return mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n}\n\n\nfloat fbm(vec2 p)\n{\n  p *= 1.1;\n  float f = 0.;\n  float amp = .5;\n  for( int i = 0; i < 3; i++) {\n    mat2 modify = rotate(ltime/50. * float(i*i));\n    f += amp*noise(p);\n    p = modify * p;\n    p *= 2.;\n    amp /= 2.2;\n  }\n  return f;\n}\n\nfloat pattern(vec2 p, out vec2 q, out vec2 r) {\n  q = vec2( fbm(p + vec2(1.)),\n\t    fbm(rotate(.1*ltime)*p + vec2(3.)));\n  r = vec2( fbm(rotate(.2)*q + vec2(0.)),\n\t    fbm(q + vec2(0.)));\n  return fbm(p + 1.*r);\n\n}\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n#define S smoothstep\n\nvec4 Line(vec2 uv, float speed, float height, vec3 col) {\n    uv.y += S(1., 0., abs(uv.x)) * sin(iTime * speed + uv.x * height) * .2;\n    return vec4(S(.06 * S(.2, .9, abs(uv.x)), 0., abs(uv.y) - .004) * col, 1.0) * S(1., .3, abs(uv.x));\n}\nvoid mainImage(out vec4 fragColor, vec2 fragCoord)\n{\n vec2 uv = ( fragCoord - .5*iResolution.xy ) / iResolution.y;\n    fragColor = vec4(0);\n    vec3 p, r = iResolution, d = normalize(vec3((fragCoord-.5*r.xy)/r.y,0.7));  \n    float t2 = -iTime * .1 + ((.25 + .05 * sin(iTime * .1))/(length(p.xy) + 0.07)) * 10.2;\n\tfloat si = sin(t2);\n\tfloat co = cos(t2);\n\n\tmat2 ma = mat2(co, si, -si, co);\n     vec4 O = fragColor;\n     vec2 I = fragCoord;\n   \n    O = vec4 (0.);\n    for (float i = 0.; i <= 23.; i += 1.) {\n        float t = i / 10.;\n        uv.xy*=mat2(cos(iTime*0.01),-sin(iTime*0.01),sin(iTime*0.01),cos(iTime*0.01));\n        uv.yx*=mat2(cos(iTime*0.01),sin(iTime*0.01),-sin(iTime*0.01),cos(iTime*0.01));\n        O += Line(uv, 1. + t, 4. + t, vec3(.2 + t * .7, .2 + t * .4, 0.3));\n    }\n    // anim between 0.9 - 1.1\n    float anim = sin(iTime * 12.0) * 0.1 + 1.0;    \n\n     \n    for(float i = 0., g = 0., e, s; i < 160.; ++i)\n    {\n        p = g * atan(d);\n        p.z -= 0.60;\n        \n        p.xy*=mat2(cos(iTime),sin(iTime),-sin(iTime),cos(iTime));\n        \n          \n            p.xy*=ma;\n        p = R(p, normalize(vec3(15,100,100)), iTime *0.);\n        s = 2.;\n    p.z += fract((iTime))*0.2101;\n        for(int j = 0; j++ < 20;)\n        {\n        \n            p = abs(p);\n            p = p.x < p.y ? p.zxy : p.zyx;\n            s *= e = 1.7 / min(dot(p, p), 1.3);\n            p = p * e - vec3(20,2,2);\n            \n        }\n\n        g += e = length(p.xz) / s;\n        fragColor.rgb += color(iTime * 0.1 + cos(i)) * mix(r / r, H(log(s)), 0.7) * 0.08 * exp(-i * i * e);\n          \n    }\n\n    fragColor = pow(fragColor, vec4(3));\n       fragColor+= vec4(cheap_star(uv,anim) * vec3(0.55,0.5,0.55)*0.15, 1.0);\n      fragColor+=O;\n \n}","name":"Image","description":"","type":"image"}]}