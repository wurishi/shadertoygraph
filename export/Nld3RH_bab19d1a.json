{"ver":"0.1","info":{"id":"Nld3RH","date":"1635776713","viewed":70,"name":"Sine Wave Animation 2","username":"SerialSniper","description":"Sine.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["animation","sine"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// decrease for higher framerate\n#define QUALITY 10.0\n\nconst float radius = 0.03;\nconst float gap = 2.5;\nconst float amplitude = .1;\n\nfloat speed = 1.0;\nfloat freq = 1.0;\nfloat invert = 1.0;\n\nfloat start = -.5 * 1.1;\nfloat end = .5 * 1.1;\n\n// separated method for performance\nvoid update(float x) {\n    if(cos(iTime * 2. - gap) >= 0.0)\n        start = sin(iTime * 2. - gap) / 2.0 * 1.1;\n    if(cos(iTime * 2.) >= 0.0)\n        end = sin(iTime * 2.) / 2.0 * 1.1;\n        \n    if(start == -.5 * 1.1 && end == .5 * 1.1) {\n        start = .5 * 1.1;\n        end = -.5 * 1.1;\n    }\n    \n    invert = sin(iTime * 2.0);\n    speed = sin(iTime) + 1.0;\n}\n\nfloat func(float x) {\n    if(x <= end && x >= start)\n        return -10.;\n    return sin((x + speed + iTime / 2.0) * 30.0) * amplitude * invert;\n}\n\nbool wave(float x, float y) {\n    vec2 ratio = vec2(iResolution.x / iResolution.y, 1.0);\n    \n    float left = (x - radius * ratio.x) * iResolution.x;\n    float right = (x + radius * ratio.x) * iResolution.x;\n    \n    update(x);\n    \n    // Remove too distant pixels from calculation\n    if(abs(y) > amplitude / 2. + radius * 2. + .1)\n        return false;\n    \n    float leftSin = func(left / iResolution.x);\n    float rightSin = func(right / iResolution.x);\n    \n    for(float i = left; i <= right; i += 10.0 / QUALITY) {\n        float x2 = i / iResolution.x;\n        if(distance(vec2(x, y) * ratio, vec2(x2, func(x2)) * ratio) <= radius)\n            return true;\n    }\n    \n    return false;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy - vec2(0.5);\n    vec3 background = vec3(0);\n    \n    vec3 col = 0.5 + 0.5 * cos(iTime + uv.xyx + vec3(0, 2, 4));\n    \n    background = mix(vec3(0), col, -cos(iTime) / 2.0 + 0.5);\n    col = mix(col, vec3(0), -cos(iTime) / 2.0 + 0.5);\n    \n    if(wave(uv.x, uv.y))\n        fragColor = vec4(col, 0.0);\n    else\n        fragColor = vec4(background, 0.0);\n}","name":"Image","description":"","type":"image"}]}