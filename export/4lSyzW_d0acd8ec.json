{"ver":"0.1","info":{"id":"4lSyzW","date":"1507558895","viewed":101,"name":"Rects test","username":"luluco250","description":"Don't mind this, I'm just playing around with rects.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","rect"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define BALL_W 25\n#define BALL_H 25\n#define BALL_COLOR 255, 255, 255\n\n#define PADDLE_DIST 75\n#define PADDLE_W 25\n#define PADDLE_H 200\n#define PADDLE_LEFT_COLOR 0, 125, 255\n#define PADDLE_RIGHT_COLOR 255, 25, 125\n\nstruct Rect {\n    float x, y, w, h;\n};\n    \nstruct Object {\n    Rect rect;\n    vec3 color;\n};\n    \nbool ShouldRender(Rect rect, vec2 coord);\nvoid Render(inout vec3 col_dest, Object obj, vec2 coord);\n\nvoid mainImage(out vec4 col_out, vec2 coord) {\n    vec2 res = iResolution.xy;\n    coord.y = res.y - coord.y;\n    vec2 ps = vec2(1.0) / res.xy;\n    vec2 uv = coord * ps;\n    \n    vec3 col = vec3(0.0);\n    \n    Object objects[3];\n    \n    // Ball\n    objects[0] = Object(\n        Rect(\n        \tres.x * 0.5 - float(BALL_W) * 0.5,\n        \tres.y * 0.5 - float(BALL_H) * 0.5,\n        \tfloat(BALL_W),\n        \tfloat(BALL_H)\n    \t), \n    \tvec3(BALL_COLOR)\n    );\n    \n    // Left paddle\n    objects[1] = Object(\n        Rect(\n            float(PADDLE_DIST) - float(PADDLE_W) * 0.5,\n            res.y * 0.5 - float(PADDLE_H) * 0.5,\n            float(PADDLE_W),\n            float(PADDLE_H)\n        ),\n        vec3(PADDLE_LEFT_COLOR)\n    );\n    \n    // Right paddle\n    objects[2] = Object(\n        Rect(\n            res.x - float(PADDLE_DIST) - float(PADDLE_W) * 0.5,\n            res.y * 0.5 - float(PADDLE_H) * 0.5,\n            float(PADDLE_W),\n            float(PADDLE_H)\n        ),\n        vec3(PADDLE_RIGHT_COLOR)\n    );\n    \n    objects[1].rect.y = res.y - iMouse.y - objects[1].rect.h * 0.5;\n    \n    for (int i = 0; i < 3; ++i)\n        Render(col, objects[i], coord);\n    \n    col_out = vec4(col, 1.0);\n}\n\nbool ShouldRender(Rect rect, vec2 coord) {    \n    return (coord.x >= rect.x && coord.x <= rect.w + rect.x)\n        && (coord.y >= rect.y && coord.y <= rect.h + rect.y);\n}\n\nvoid Render(inout vec3 col_dest, Object obj, vec2 coord) {\n    col_dest = ShouldRender(obj.rect, coord) ? obj.color / vec3(255.0) : col_dest;\n}\n","name":"Image","description":"","type":"image"}]}