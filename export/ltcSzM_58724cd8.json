{"ver":"0.1","info":{"id":"ltcSzM","date":"1478746230","viewed":551,"name":"Foggy Sea","username":"VoidChicken","description":"A foggy sea. Of course, Seascape will always top this. Was laggy.","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarch","sea","clouds","foggy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsX3Rn","filepath":"/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","previewfilepath":"/media/ap/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 sky ( vec3 d ) {\n    vec3 f = vec3(0.52941, 0.80784, 1.);\n    float dt = .5*(dot(d, vec3(0, 1, 0))+1.);\n    dt=pow(dt,1./2.);\n    return dt*f+(1.-dt);\n}\nfloat noise ( vec2 v ) {\n\tfloat f = 0.;\n    float mip = 20./length(vec2 (0, iTime*5.)-v);\n    f += texture(iChannel0, v/10., mip).r/5.;  \n    f += texture(iChannel0, v/20., mip).r/5.;  \n    f += texture(iChannel0, v/30., mip).r/5.;  \n    f += texture(iChannel0, v/40., mip).r/5.;  \n    f += texture(iChannel0, v/50., mip).r/5.;  \n\treturn f/1.5;\n}\nfloat ground( vec3 r ) {\n    float t = iTime/10.;\n    float he = noise(r.xz/4.+t)*2.5+noise(r.xz/4.-t)*2.5;\n\tfloat g = r.y+2.;\n    return g-he;\n}\n\nfloat clouds ( vec3 r ) {\n    \n    float t = iTime/100.;\n    float t2 = iTime/10.;\n\tfloat g = 12.-r.y;\n    float he = noise(r.xz/4.+t+t2)*2.5+noise(r.xz/4.-t+t2)*2.5;\n    return g-he;\n}\nfloat map ( vec3 r ) {\n\tfloat df = 0.;\n    \n    df = ground( r );\n    df = min(df, clouds( r ));\n    return df;\n}\nvec3 normal( in vec3 x )\n{\n    vec2 e = vec2( .001, 0.0 );\n    return normalize( vec3( map(x+e.xyy) - map(x-e.xyy),\n                            map(x+e.yxy) - map(x-e.yxy),\n                            map(x+e.yyx) - map(x-e.yyx) ) );\n}\nfloat march( vec3 ro, vec3 rd ) {\n    float t = 0.;\n    for (int i = 0; i < 32; ++i) {\n    \tfloat df = map( ro + rd * t);\n        if (t>30.||df<.02) break;\n        t+=df;\n    }\n    return t;\n}\nvoid render ( vec2 uv, out vec4 c ) {\n    vec3 col = vec3(0);\n    vec3 rd = normalize(vec3(uv*2.-1.,1));\n    rd.x/=iResolution.x/iResolution.y;\n    float t = 0.;\n    vec3 ro = vec3 (0, 3, iTime*5.);\n    t = march(ro,rd);\n    vec3 r = ro+rd*t;\n    bool cl = map(r)<.5;\n\tbool dls = map(r)==clouds(r);\n    vec3 ba = sky(rd);//vec3 ba = vec3â€Ž(0.5294117647, 0.80784313725, 1.);\n    col=ba;\n    \n    if (cl) {\n        if (!dls) {\n            float fit = (r.y+2.+noise(r.xz)*10.)/rd.y;\n            vec3 n = normal(r);\n            vec3 j = vec3(.3, .6, 1.)*noise(r.xz*2.);\n            float fresnel = .5*(dot(rd, n)+1.);\n            vec3 u = texture(iChannel1, .1*(r.xz-fit*rd.xz)).rgb;\n            j+=.4*sky(n);\n            col = mix(u*vec3(.3, .6, 1.), j, fresnel*.75+.75);\n        } else\n        {\n\t\t\tcol+=(noise(r.xz)-(clouds(r)*clouds(r)*clouds(r)*clouds(r)*clouds(r)));\n        }\n        float b = 10./max(t,4.);\n        col = \n            mix (ba, col, min(b*b,1.));\n    }\n    \n    c=vec4(min(iTime,1.)*col,1.0);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\trender(uv, fragColor);\n}","name":"Image","description":"","type":"image"}]}