{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"precision highp float;\n\nconst vec2 offset = vec2(-0.502457, 0.60741);\n\nvec3 rainbow(float v) {\n\tv *= 6.283185;\n\treturn 0.5 + 0.5 * vec3(cos(v), cos(v - 2.094395), cos(v + 2.094395));\n}\n\nvec2 compSqrt(vec2 a) {\n    float x2 = a.x * a.x;\n    float y2 = a.y * a.y;\n    return vec2(x2 - y2, 2.0 * a.x * a.y);\n}\n\nvec2 mandelbrot(vec2 a, int iterations) {\n\tfloat x = a.x - 0.25;\n    float y2 = a.y * a.y;\n    float q = x * x + y2;\n    if (q * (q + x) < 0.25 * y2) return vec2(0.0, iterations);\n    if ((a.x + 1.0) * (a.x + 1.0) + y2 < 0.0625) return vec2(0.0, iterations);\n\n    vec2 z = a;\n\tint i = 0;\n\twhile(i < iterations) {\n\t\tz = compSqrt(z);\n\t\tz += a;\n\t\tif(dot(z, z) > 4.0) return vec2(10.0, i);\n\t\ti ++;\n\t}\n\treturn vec2(length(z), i);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float zoom = sin(iTime/10.0) * 0.5 + 0.5;\n    zoom = pow(zoom, 2.0) * 50000000.0 + 200.0;\n    \n    int iterations = int(sqrt(zoom)) + 100;\n    \n    vec2 uv = (fragCoord.yx - iResolution.yx / 2.0) / zoom - offset;\n\tvec2 mdb = mandelbrot(-uv, iterations);\n\tfloat v = mdb.y / float(iterations);\n    if(mdb.x > 2.4) {\n        fragColor = vec4(rainbow(v), 1.0);\n    } else {\n        fragColor = vec4(0.0);\n    }\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"lcVBWh","date":"1734017354","viewed":28,"name":"Mandelbrot zoom in and out","username":"Rizzi001","description":"A simple mandelbrot implementation","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["mandelbrot"],"hasliked":0,"parentid":"","parentname":""}}