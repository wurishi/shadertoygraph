{"ver":"0.1","info":{"id":"mtj3RR","date":"1672775427","viewed":157,"name":"Mandelbrot with Lights","username":"Mandelbrot837","description":"A combination of Orbit Trap and Escape Time!\nChange the palette at line 165.","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["fractal","mandelbrot","orbittrap"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Palette\n\nstruct palette {\n    vec3 c0, c1, c2, c3, c4, c5;\n};\npalette palette_solar() {\n    palette p;\n    p.c0 = vec3(0,0,0)/255.;\n    p.c1 = vec3(176,16,0)/255.;\n    p.c2 = vec3(255,128,16)/255.;\n    p.c3 = vec3(255,192,125)/255.;\n    p.c4 = vec3(255,255,192)/255.;\n    p.c5 = vec3(255,255,255)/255.;\n    return p;\n}\n\npalette palette_black_holes() {\n    palette p;\n    p.c0 = vec3(253,248,255)/255.;\n    p.c1 = vec3(196,4,224)/255.;\n    p.c2 = vec3(64,0,160)/255.;\n    p.c3 = vec3(16,2,96)/255.;\n    p.c4 = vec3(0,16,36)/255.;\n    p.c5 = vec3(0,0,0)/255.;\n    return p;\n}\n\npalette palette_phoenix() {\n    palette p;\n    p.c0 = vec3(0,0,0)/255.;\n    p.c1 = vec3(64,3,0)/255.;\n    p.c2 = vec3(224,9,0)/255.;\n    p.c3 = vec3(255,24,16)/255.;\n    p.c4 = vec3(255,165,156)/255.;\n    p.c5 = vec3(255,255,255)/255.;\n    return p;\n}\n\n// Random\n\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\nfloat randSeed = 0.;\nvec2 nextRand2() {\n    vec2 v = vec2( randSeed++, randSeed++ );\n\treturn vec2( random( v+0.34 ), random( v+0.75 ) );    \n}\n\n// Mapping\n\nvec3 cmap( float t, palette p ) {\n    vec3 col = vec3(0);\n    col = mix( p.c0,  p.c1, smoothstep(0. , .2, t));\n    col = mix( col, p.c2, smoothstep(.2, .4 , t));\n    col = mix( col, p.c3, smoothstep(.4 , .6, t));\n    col = mix( col, p.c4, smoothstep(.6,  .8, t));\n    col = mix( col, p.c5, smoothstep(.8, 1.,  t));\n    col = sqrt(sqrt(col));\n    return col;\n}\n\n#define MAX_ITER 288.\n#define THRESHOLD 4294967296.\n\n// Light Factors\n#define LIGHT_FACTOR 4.\n#define LIGHT_FACTOR2 1.5\n#define REPETITIVE true\n\nfloat mandelbrot(vec2 uv, float time) {\n    bool repetitive = REPETITIVE;\n\n    if(false)\n    {\n        if(mod(iTime,2.) > 1.)\n        {\n            repetitive = false;\n        }\n        else\n        {\n            repetitive = true;\n        }\n    }\n    \n    // z = ( |Re(z)| + i|Im(z)| )^2\n    vec2 op1 = LIGHT_FACTOR*vec2(0.3264266*sin(0.7707143*iTime+0.3075933)-0.1909382*sin(0.2756964*iTime+0.7760465),0.2683287*sin(0.7873485*iTime+0.2646250)+0.8615084*sin(0.3388009*iTime+0.3395951));\n    vec2 op2 = LIGHT_FACTOR*vec2(0.4473953*sin(0.3804113*iTime+0.8662698)-0.0853766*sin(0.2991371*iTime+0.1632158),0.6640502*sin(0.8080518*iTime+0.8144175)+0.8347609*sin(0.3894851*iTime+0.0853754));\n    vec2 op3 = LIGHT_FACTOR*vec2(0.6486342*sin(0.4109053*iTime+0.3572219)-0.5143195*sin(0.3378669*iTime+0.6800464),0.9184436*sin(0.1214750*iTime+0.3396933)+0.1838176*sin(0.0629437*iTime+0.1425097));\n    vec2 op4 = LIGHT_FACTOR*vec2(0.7738594*sin(0.4447521*iTime+0.4946261)-0.4166640*sin(0.9523713*iTime+0.9705005),0.7903863*sin(0.8391020*iTime+0.4000817)+0.4981633*sin(0.5718725*iTime+0.9403773));\n   \n    float os1 = LIGHT_FACTOR2*0.1450185*cos(0.4698390*iTime+0.3169971) + 0.1445760*sin(0.0660394*iTime+0.3946276) + (0.375*LIGHT_FACTOR2);\n    float os2 = LIGHT_FACTOR2*0.0544016*cos(0.4373305*iTime+0.2641885) + 0.5273625*sin(0.4345478*iTime+0.7793232) + (0.625*LIGHT_FACTOR2);\n    float os3 = LIGHT_FACTOR2*0.4887080*cos(0.0559532*iTime+0.8564074) + 0.0219571*sin(0.0680302*iTime+0.3817833) + (0.625*LIGHT_FACTOR2);\n    float os4 = LIGHT_FACTOR2*0.9866597*cos(0.4656667*iTime+0.9069666) + 0.0680626*sin(0.1896652*iTime+0.8978838) + (1.250*LIGHT_FACTOR2);\n    \n\tvec2 c = 4.1*(uv - vec2(.2,0)) - vec2(-1.1892,0.1099); \n    vec2 z = vec2(0); \n    float i = 0.;\n    float c0 = 0.;\n    bool escaped = false;\n    \n    if(repetitive)\n    {\n        for(; ++i <= MAX_ITER ;) {\n            z = mat2(z, -z.y, z.x) * z + c;\n            if(mod(i,4.) == 0.)\n            {\n                c0 += os1 / dot(z+op1,z+op1);\n            }\n            if(mod(i,4.) == 1.)\n            {\n                c0 += os2 / dot(z+op2,z+op2);\n            }\n            if(mod(i,4.) == 2.)\n            {\n                c0 += os3 / dot(z+op3,z+op3);\n            }\n            if(mod(i,4.) == 3.)\n            {\n                c0 += os4 / dot(z+op4,z+op4);\n            }\n            \n            if( dot(z,z) > THRESHOLD ) break;\n            if(c0 > MAX_ITER)\n            {\n                i = MAX_ITER;\n                break;\n            }\n        }\n    }\n    else\n    {\n        for(; ++i <= MAX_ITER ;) {\n            z = mat2(z, -z.y, z.x) * z + c;\n            c0 += os1 / dot(z+op1,z+op1);\n            c0 += os2 / dot(z+op2,z+op2);\n            c0 += os3 / dot(z+op3,z+op3);\n            c0 += os4 / dot(z+op4,z+op4);\n            if( dot(z,z) > THRESHOLD ) break;\n            if(c0 > MAX_ITER)\n            {\n                i = MAX_ITER;\n                break;\n            }\n        }\n    }\n    \n    if(i >= MAX_ITER-8.) return 512.;\n  \n    float l2 = log(2.);\n    return i+c0 - log(log(dot(z,z))/l2)/l2;\t\t    \n}\n\n// Main\n\n#define SAMPLES 3.\n#define ZOOM_SPEED 0.03125\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 R = iResolution.xy;\n        \n    palette pal = palette_solar();\n    \n    vec3 col = vec3(0);\n\n    for(float i=0.; i < SAMPLES; i++) {\n        vec2 p = pow(0.2,(-3.*cos(ZOOM_SPEED*iTime)+3.6))*(2.*fragCoord-R+nextRand2())/R.y ;\n        p.y = -p.y;\n        float orbit = mandelbrot(p, iTime) / MAX_ITER;\n    \tcol += cmap( orbit   , pal ); \n    }\n    \n    col /= SAMPLES;\n\n    fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"}]}