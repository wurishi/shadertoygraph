{"ver":"0.1","info":{"id":"lXd3Dj","date":"1717043791","viewed":26,"name":"voronoi crystal effect","username":"int_45h","description":"basic fracture effect using voronoi noise","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["e"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// This part here is all post processing. All of the meat is in Buffer A\n\n#define POST_PROCESSING\n\n// https://www.shadertoy.com/view/lsKSWR\nfloat vignette(vec2 uv, float intensity, float extent)\n{\n    uv *= 1.-uv.yx;   \n    return pow(uv.x*uv.y*intensity, extent);\n}\n\nvec4 render(vec2 fc)\n{\n    vec2 uv = fc / iResolution.xy;\n    vec3 color = texture(iChannel0, uv).rgb;\n    #ifdef POST_PROCESSING\n    color *= vec3(.75,.95,1.);\n    color *= vec3(clamp(hash13(vec3(fc,iTime*100.))*.28+.72,0.,1.));\n    color *= vignette(fc/iResolution.xy, 36., .7);\n    #endif\n    return vec4(color, 1);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = render(fragCoord);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec3 hash33(vec3 p)\n{\n\tuvec3 q = uvec3(ivec3(p)) * uvec3(1597334673U, 3812015801U, 2798796415U);\n\tq = (q.x ^ q.y ^ q.z)*uvec3(1597334673U, 3812015801U, 2798796415U);\n\treturn vec3(q) * 2.328306437080797e-10;\n}\n\nvec2 hash23(vec3 p)\n{\n\tuvec3 q = uvec3(ivec3(p)) * uvec3(1597334673U, 3812015801U, 2798796415U);\n\tuvec2 n = (q.x ^ q.y ^ q.z) * uvec2(1597334673U, 3812015801U);\n\n\treturn vec2(n) * 2.328306437080797e-10;\n}\n\nfloat hash13(vec3 p)\n{\n\tuvec3 q = uvec3(ivec3(p)) * uvec3(1597334673U, 3812015801U, 2798796415U);\n\tuint n = (q.x ^ q.y ^ q.z) * 1597334673U;\n\treturn float(n) * 2.328306437080797e-10;\n}\n\nfloat hash12(vec2 p)\n{\n\tuvec2 q = uvec2(ivec2(p)) * uvec2(1597334673U, 3812015801U);\n\tuint n = (q.x ^ q.y) * 1597334673U;\n\treturn float(n) * 2.328306437080797e-10;\n}\n\nmat3 rot_x(float t)\n{\n    return mat3(\n        1., 0., 0.,\n        0., cos(t), -sin(t),\n        0., sin(t), cos(t)\n    );\n}\n\nmat3 rot_y(float t)\n{\n    return mat3(\n        cos(t), 0., -sin(t),\n        0., 1., 0.,\n        sin(t), 0., cos(t)\n    );\n}\n\nmat3 rot_z(float t)\n{\n    return mat3(\n        cos(t), -sin(t), 0.,\n        sin(t), cos(t), 0.,\n        0., 0., 1.\n    );\n}\n\nmat2 rot2d(float t)\n{\n    return mat2(\n        cos(t),-sin(t),\n        sin(t), cos(t)\n    );\n}\n\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define PI 3.14159265359\n#define FOV 90.\nstruct vor3D_tile\n{\n    vec4 pd;\n    vec3 id;\n};\n\nvor3D_tile voronoi3d_uv(vec3 p)\n{\n    vec3 pg = floor(p);\n    vec3 pc = fract(p);\n    \n    float d = 8.;\n    float d2 = 8.;\n    \n    vec3 c = vec3(100.);\n    vec3 c2 = vec3(100.);\n    \n    vec3 puv = vec3(0);\n    vec3 puv2 = vec3(0);\n    \n    for (int i=0;i<27;i++)\n    {\n        vec3 n = vec3(\n            float(i%3),\n            float((i/3)%3),\n            float(i/9)\n        )-1.;\n        vec3 s = hash33(n+pg);\n        float dn = length(n+s-pc);\n        \n        if (dn < d)\n        {\n            d2 = d;\n            c2 = c;\n            puv2 = puv;\n            \n            d = dn;\n            c = n;\n            puv = n+s-pc;\n        }\n        \n        else if (dn < d2)\n        {\n            d2 = dn;\n            c2 = n;\n            puv2 = n+s-pc;\n        }\n    }\n    \n    return vor3D_tile(\n        vec4(puv,d2-d),\n        pg+c\n    );\n}\n\nvec3 get_bg(vec3 d) { return texture(iChannel0, d).rgb; }\nvec3 get_bg_cr(vec3 d, vec2 v, int steps)\n{\n    vec3 c = vec3(0);\n    vec3 o = vec3(0);\n    float dist = .005;\n    for (int i=0;i<steps;i++)\n    {\n        o += vec3(v,0)*dist;\n        c += vec3(\n            texture(iChannel0, d).r,\n            texture(iChannel0, d+o).gb\n        );\n    }\n    c /= float(steps);\n    \n    return c;\n}\n\nfloat gradient(vec2 d, vec2 p)\n{\n    d = normalize(d);\n    float t = atan(d.y,d.x);\n    return (rot2d(t)*p).x;\n}\n\nvec4 render(vec2 fc)\n{\n    vec2 uv = (fc-.5*iResolution.xy)/iResolution.y;\n    //uv = vec2(dot(abs(uv),vec2(1)),atan(uv.y,uv.x));\n    vec3 s = vec3(9.);\n    vec3 d2 = vec3(uv, 1.)*tan(.5*FOV*PI/180.);\n    vec3 d = normalize(d2);\n    \n    vor3D_tile tile = voronoi3d_uv(d2*s+vec3(0,0,iTime));\n    vec2 offset = hash23(tile.id)*2.-1.;\n    //return vec4(get_bg(d+vec3(offset*.08, 0.)),1);\n    \n    float f = (tile.pd.z*.5+.5)*length(tile.id.xy/s.xy);\n    float i = mix(.01, .05, f);\n    \n    float m = gradient(offset, tile.pd.xy);\n    vec3 color = get_bg_cr(d+vec3(offset*i,0), m*offset*1.5, 8);\n    \n    return vec4(color,1);\n    //return vec4(vec3(tile.pd.xyz),1);\n    //return vec4(get_bg_cr(d,uv,8), 1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = render(fragCoord);\n}","name":"Buffer A","description":"","type":"buffer"}]}