{"ver":"0.1","info":{"id":"WtSGzc","date":"1560401951","viewed":144,"name":"Cube by planes combining","username":"edo_m18","description":"Cube by planes combining","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["distancefunction","cube"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 rot(float a)\n{\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, s, -s, c);\n}\n\nfloat sdPlanes(vec3 p)\n{\n    p = abs(p);\n    \n    return max(max(p.x, p.y), p.z) - 0.5;\n}\n\nfloat map(vec3 p)\n{\n    return sdPlanes(p);\n}\n\nvec3 normal(vec3 p)\n{\n    vec2 e = vec2(0.001, 0);\n    float d = map(p);\n    \n    vec3 n = d - vec3(\n        map(p - e.xyy),\n        map(p - e.yxy),\n        map(p - e.yyx));\n    return normalize(n);\n}\n\nvoid mainImage( out vec4 O, in vec2 U )\n{\n    vec2 uv = (U.xy - 0.5 * iResolution.xy) / iResolution.y;\n\n    vec3 ro = vec3(0, 0, 5);\n    vec3 ta = vec3(0, 0, 0);\n    \n    mat2 m = rot(sin(iTime));\n    ro.xz = m * ro.xz;\n    ro.xy = m * ro.xy;\n    \n    vec3 up = normalize(vec3(0, 1, 0));\n    vec3 ray = camera(ro, ta, up) * normalize(vec3(uv, 1.5));\n    \n    const int max_march = 128;\n    \n    \n    vec3 p = ro;\n    \n    float d = 0.;\n    \n    for (int i = 0; i < max_march; i++)\n    {\n        d = map(p);\n        \n        if (d < 0.01) break;\n        \n        p += ray * d;\n    }\n    \n    vec3 col = vec3(0);\n    \n    if (d < 0.01)\n    {\n        vec3 n = normal(p);\n        vec3 light = normalize(vec3(1));\n        float diff = clamp(dot(n, light), 0.1, 1.0);\n        col = vec3(diff) + vec3(0.5, 0.7, 1.5) * 0.3;\n    }\n    else\n    {\n        float y = abs(uv.y - 1.0);\n        col = vec3(0.5, 0.7, 1.5) * y;\n    }\n    \n    O.rgb = col;\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"mat3 camera(vec3 ro, vec3 ta, vec3 up)\n{\n    vec3 cw = normalize(ta - ro);\n    vec3 cu = normalize(cross(cw, up));\n    vec3 cv = normalize(cross(cu, cw));\n    return mat3(cu, cv, cw);\n}","name":"Common","description":"","type":"common"}]}