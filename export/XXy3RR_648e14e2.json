{"ver":"0.1","info":{"id":"XXy3RR","date":"1718087546","viewed":89,"name":"ApertureTube","username":"Data_chan","description":"YouTube if it was good. A quick shader I made to test out drawing shapes, text, and video then combining them. Part of a larger project I'm working on.","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["test","meme","interface"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//A quick shader I made to test out drawing shapes, text, and video then combining them. Part of a larger project I'm working on.\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = vec4(texture(iChannel0, uv).rgb,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//buffer for compositing results\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec4 out_color;\n    \n    vec4 gui = vec4(texture(iChannel2, uv));\n    \n    vec4 text = vec4(texture(iChannel1, uv));\n    \n    vec4 video = vec4(texture(iChannel3, uv));\n    \n    out_color = mix(gui, text, text.w);\n    \n    out_color = mix(out_color, video, video.w);\n    \n    fragColor = vec4(out_color);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"//buffer for drawing text\n\n//login screen\nvec4 ScreenText(vec2 uv, vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    float textScale = 0.5;\n    vec2 textOffset = vec2(1.0, 2.0);\n    \n    int text_length = 16;\n    \n    vec4 out_color;\n    \n    vec2[16] text2 = vec2[16](\n    vec2(4.0, 5.0),\n    vec2(15.0, 6.0),\n    vec2(0.0, 7.0),\n    vec2(0.0, 2.0),\n    vec2(1.0, 3.0),\n    vec2(0.0, 3.0),\n    vec2(0.0, 2.0),\n    vec2(3.0, 4.0),\n    vec2(2.0, 5.0),\n    vec2(1.0, 4.0),\n    vec2(10.0, 5.0),\n    vec2(9.0, 4.0),\n    vec2(5.0, 4.0),\n    vec2(3.0, 5.0),\n    vec2(4.0, 5.0),\n    vec2(0.0, 2.0)\n    );\n    \n    vec2[16] text3 = vec2[16](\n    vec2(4.0, 5.0),\n    vec2(5.0, 6.0),\n    vec2(3.0, 7.0),\n    vec2(4.0, 7.0),\n    vec2(9.0, 6.0),\n    vec2(14.0, 6.0),\n    vec2(7.0, 6.0),\n    vec2(0.0, 2.0),\n    vec2(13.0, 4.0),\n    vec2(15.0, 6.0),\n    vec2(13.0, 6.0),\n    vec2(5.0, 6.0),\n    vec2(14.0, 6.0),\n    vec2(4.0, 7.0),\n    vec2(3.0, 7.0),\n    vec2(1.0, 2.0)\n    );\n    \n    vec2[16] text = vec2[16](\n    vec2(1.0, 4.0),\n    vec2(0.0, 7.0),\n    vec2(5.0, 6.0),\n    vec2(2.0, 7.0),\n    vec2(4.0, 7.0),\n    vec2(5.0, 7.0),\n    vec2(2.0, 7.0),\n    vec2(5.0, 6.0),\n    vec2(4.0, 5.0),\n    vec2(5.0, 7.0),\n    vec2(2.0, 6.0),\n    vec2(5.0, 6.0),\n    vec2(0.0, 2.0),\n    vec2(0.0, 2.0),\n    vec2(0.0, 2.0),\n    vec2(0.0, 2.0)\n    );\n    \n    vec2 newiResolution = vec2(512, 256);\n    vec2 newfragCoord = vec2(ivec2((fragCoord/iResolution.xy)*newiResolution));\n    \n    out_color = vec4(drawText(iChannel1, text, newiResolution.xy, newfragCoord, 0.25, vec2(1.0, 1.0), text_length, vec4(1.0, 0.5, 0.0, 1.0), vec4(0.0)));\n    \n    out_color = vec4(drawText(iChannel1, text2, newiResolution.xy, newfragCoord, 0.25, vec2 (1.0, 10.0), text_length, vec4(0.0, 0.0, 0.0, 0.75), out_color));\n    \n    out_color = vec4(drawText(iChannel1, text3, newiResolution.xy, newfragCoord, 0.25, vec2 (1.0, 11.0), text_length, vec4(0.0, 0.0, 0.0, 0.75), out_color));\n    \n    //out_color = vec4((blockCoord), 0.0, 0.0);\n    \n    // Output to screen\n    return vec4(out_color);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec4 out_color;\n    \n    out_color = vec4(texture(iChannel0, uv));\n    out_color = vec4(ScreenText(uv, fragCoord));\n    \n    fragColor = vec4(out_color);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"//buffer for handling drawing objects to the screen.\n\n//login screen\nvec4 ScreenObjects(vec2 uv)\n{\n    vec4 image;\n    \n    vec2 iMouseUV = vec2(iMouse.xy/iResolution.xy);\n    \n    vec4[16] rectangleCoords;\n    vec4[16] rectangleColors;\n    \n    rectangleCoords = vec4[16] (\n        vec4(0.0 ,0.0 ,1.0 ,1.0),\n        vec4(0.0 ,0.95 ,1.0 ,1.0),\n        vec4(0.0 ,0.85 ,1.0 ,0.95),\n        vec4(0.05 ,0.4 ,0.5 ,0.8),\n        vec4(0.3 ,0.1 ,0.4 ,0.2),\n        vec4(0.5 ,0.1 ,0.6 ,0.2),\n        vec4(0.7 ,0.1 ,0.8 ,0.2),\n        vec4(0.0 ,0.0 ,0.0 ,0.0),\n        vec4(0.0 ,0.0 ,0.0 ,0.0),\n        vec4(0.0 ,0.0 ,0.0 ,0.0),\n        vec4(0.0 ,0.0 ,0.0 ,0.0),\n        vec4(0.0 ,0.0 ,0.0 ,0.0),\n        vec4(0.0 ,0.0 ,0.0 ,0.0),\n        vec4(0.0 ,0.0 ,0.0 ,0.0),\n        vec4(0.0 ,0.0 ,0.0 ,0.0),\n        vec4(0.0 ,0.0 ,0.0 ,0.0)\n    );\n    \n    rectangleColors = vec4[16] (\n        vec4(0.75 ,0.75 ,0.75 ,1.0),\n        vec4(0.25 ,0.25 ,0.25 ,1.0),\n        vec4(0.25 ,0.75 ,1.0 ,1.0),\n        vec4(0.0 ,0.0 ,0.0 ,1.0),\n        vec4(0.5 ,1.0 ,0.7 ,1.0),\n        vec4(0.5 ,0.5 ,1.0 ,1.0),\n        vec4(0.0 ,0.0 ,0.0 ,1.0),\n        vec4(0.0 ,0.0 ,0.0 ,1.0),\n        vec4(0.0 ,0.0 ,0.0 ,1.0),\n        vec4(0.0 ,0.0 ,0.0 ,1.0),\n        vec4(0.0 ,0.0 ,0.0 ,1.0),\n        vec4(0.0 ,0.0 ,0.0 ,1.0),\n        vec4(0.0 ,0.0 ,0.0 ,1.0),\n        vec4(0.0 ,0.0 ,0.0 ,1.0),\n        vec4(0.0 ,0.0 ,0.0 ,1.0),\n        vec4(0.0 ,0.0 ,0.0 ,1.0)\n    );\n    \n    \n    for (int j = 0; j<16; j+= 1) {\n        image = vec4(drawRectangle(rectangleCoords[j], rectangleColors[j], uv, vec4(image)));\n    };\n    \n    if (isWithin(rectangleCoords[6], iMouseUV) == 1)\n    {\n        image = vec4(0.0);\n    }\n    \n    \n    return vec4(image);\n\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec4 out_color;\n    \n    out_color = vec4(texture(iChannel0, uv));\n    out_color = vec4(ScreenObjects(uv));\n    \n    fragColor = vec4(out_color);\n}\n","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"//buffer for drawing the video\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec4 out_color;\n    \n    \n    \n    out_color = vec4(texture(iChannel1, (uv-vec2(0.05, 0.4))/vec2(0.45, 0.4)));\n    \n    float key;\n    \n    key = distance(out_color, vec4(0.0, 1.0, 0.0, 1.0));\n    \n    key = float(greaterThan(vec2(key), vec2(0.6)).x);\n    \n    out_color = vec4(mix(texture(iChannel2, (uv-vec2(0.05, 0.4))/vec2(0.45, 0.4)), out_color, key));\n    \n    out_color = vec4(out_color.xyz, drawRectangle(vec4(0.05, 0.4, 0.5, 0.8), vec4(1.0), uv, vec4(0.0)));\n    \n    fragColor = vec4(out_color);\n}","name":"Buffer D","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"vec4 drawRectangle( vec4 rectangle, vec4 color, vec2 uv, vec4 image)\n{\n    vec4 out_color;\n    \n    out_color = vec4(0.0 ,0.0 ,0.0 ,(int(greaterThan(vec2(uv.x), vec2(rectangle.x)).x)*int(greaterThan(vec2(uv.y), vec2(rectangle.y)).y))*(int(lessThan(vec2(uv.x), vec2(rectangle.z)).x)*int(lessThan(vec2(uv.y), vec2(rectangle.w)).x)));\n    \n    out_color = vec4(mix(image, color, out_color.w*color.w));\n    \n    return vec4(out_color.xyzw);\n}\n\n\n\nvec4 drawPixel( vec4 color, vec2 selected, vec2 coordinate, vec4 image)\n{\n    return vec4(mix(image, color, vec4(int(equal(selected.xy, coordinate.xy).x)*int(equal(selected.xy, coordinate.xy).y))));\n} \n\nint isWithin( vec4 rectangle, vec2 position)\n{\n    return (int(greaterThan(vec2(position.x), vec2(rectangle.x)).x)*int(greaterThan(vec2(position.y), vec2(rectangle.y)).y))*(int(lessThan(vec2(position.x), vec2(rectangle.z)).x)*int(lessThan(vec2(position.y), vec2(rectangle.w)).x));\n}\n\nvec4 drawText( sampler2D iChannel0, vec2[16] text, vec2 iResolution, vec2 fragCoord, float textScale, vec2 textOffset, int text_length, vec4 color, vec4 background )\n{\n\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 newfragCoord = vec2(fragCoord.x, iResolution.y-fragCoord.y);\n    //float textScale = 0.5;\n    //vec2 textOffset = vec2(1.0, 1.0);\n    newfragCoord = vec2(newfragCoord/textScale);\n    \n    //int text_length = 5;\n    \n    float out_value;\n    \n    float mask;\n    \n    vec2 textCoord;\n    \n    vec2 localCoord;\n    \n    localCoord = fract(newfragCoord/64.0)*64.0;\n    \n    vec2 blockCoord;\n    \n    blockCoord = (trunc(newfragCoord/64.0)*64.0)/64.0;\n    \n    blockCoord = vec2(blockCoord-textOffset);\n    \n    \n    mask = (float(lessThan(blockCoord.xx, vec2(text_length)).x));\n    mask = mask*(float(lessThan(blockCoord.yy, vec2(0.5)).x));\n    \n    mask = mask*(float(greaterThan(vec2(blockCoord.xx), vec2(-0.5)).x));\n    mask = mask*(float(greaterThan(vec2(blockCoord.yy), vec2(-0.5)).x));\n\n    blockCoord = vec2(text[int(blockCoord.x)]);\n    \n\n    textCoord = (blockCoord*64.0)+localCoord;\n    textCoord = vec2(textCoord.x, 1024.0-textCoord.y);\n    \n    out_value = texelFetch(iChannel0, ivec2(textCoord), 0).r;\n    \n    out_value = clamp(out_value*mask, 0.0, 1.0);\n    \n    out_value = float(greaterThan(vec2(out_value), vec2(0.5)).x);\n    \n    //draw text on top of image\n    vec4 out_color;\n    \n    out_color = mix(background, vec4(out_value*color), out_value*color.w);\n    \n    return out_color;\n}\n\nvec4 drawLine( vec2 point1, vec2 point2, vec2 sampleCoord, float lineThickness, vec4 color, vec4 background)\n{\n    //Input Guide:\n    //vec2 point1 - Coordinate of first point.\n    //vec2 point2 - Coordinate of second point.\n    //vec2 sampleCoord - Coordinate of pixel. The function checks if this coordinate is in the line.\n    //float lineThickness - Thickness of the line.\n    \n    \n    //we get the slope from point 1 to point 2 then normalize it\n    vec2 slope = normalize(point2-point1);\n    \n    float inLine;\n    \n    //We calculate wether the point is on the line. Both points are calculated seperately, because each one returns a ray.\n    //We can combine the two results to get a line segment. You could also replace the max( with min( to get an infinite line\n    inLine = max(\n                float(distance((((distance(sampleCoord, point2))*slope)+sampleCoord), point2)),  \n                float(distance((((distance(sampleCoord, point1))*(slope*-1.0))+sampleCoord), point1))\n                );\n    \n    //turn the line gradient into a solid shape\n    inLine = float(lessThan(vec2(inLine), vec2(lineThickness)).x);\n    \n    vec4 out_color = mix(background, color, inLine);\n    \n    return vec4(out_color);\n}","name":"Common","description":"","type":"common"}]}