{"ver":"0.1","info":{"id":"XcK3Wh","date":"1712693052","viewed":55,"name":"Random Noise Cube","username":"anAccount","description":"Not a real cube.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["noise","cube","random"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#ifdef GL_ES\nprecision mediump float;\n#endif\n\n// Random function\nfloat random(vec2 st) {\n    return fract(sin(dot(st.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\n// 3D rotation matrix\nmat2 rotate(float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat2(c, -s, s, c);\n}\n\nvec4 renderScene() {\n    vec2 st = gl_FragCoord.xy / iResolution.xy;\n\n    // Grid cell size\n    vec2 cellSize = vec2(1.0) / 100.0;\n\n    // Grid cell index\n    vec2 cellIndex = floor(st / cellSize);\n\n    // Progress (0 to 1)\n    float progress = fract(iTime);\n\n    // Flip a coin for the first cell\n    float coin = step(random(cellIndex * iTime), 0.5);\n\n    // Shade the cell based on coin flip and progress\n    vec3 cellColor = mix(vec3(0.00, 0.0, 0.0), vec3(1.0, 1.0, 1.0), coin);\n\n    // 3D cube\n    vec2 uv = (st - 0.5) * 5.0;\n    uv *= rotate(iTime * -1.28 + iTime * 0.28); // Rotate the UV coordinates\n\n    // Create three faces of the cube\n    float cubeX = step(abs(uv.x), 1.0);\n    float cubeY = step(abs(uv.y), 1.0);\n    float cubeZ = step(abs(uv.x - uv.y), 1.414); // sqrt(2)\n\n    // Calculate lighting for each face of the cube\n    vec3 lightIntensity = vec3(0.0);\n    if (cubeY > 0.0) {\n        // Top face\n        lightIntensity = vec3(0.6, .0, .0);\n    } else if (cubeX > 0.0) {\n        // Right face\n        lightIntensity = vec3(0.,0.6, 0.);\n    } else if (cubeZ > 0.0) {\n        // Left face\n        lightIntensity = vec3(0.0, 0.0, 0.6);\n    }\n\n    // Combine the cube with the cell color and lighting\n    vec3 finalColor = cellColor + -lightIntensity /(cubeY) + -lightIntensity /(cubeX) + -lightIntensity /(cubeZ);\n\n    return vec4(finalColor, 1.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = renderScene();\n}\n","name":"Image","description":"","type":"image"}]}