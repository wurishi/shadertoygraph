{"ver":"0.1","info":{"id":"XfB3zc","date":"1704457845","viewed":41,"name":"Fork Stanford b miffy99 812","username":"miffy99","description":"Encoding the Stanford Bunny using radial basis functions. Ray marcher by FabriceNeyret2","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["sdf"],"hasliked":0,"parentid":"7dtGR2","parentname":"Stanford bunny in 2k"},"renderpass":[{"inputs":[{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Bunny SDF using radial basis functions.\n// The RBF is a sphere SDF. Number of RBFs have been adjusted to deliver a shader in\n// 2048 chars.\n//\n// Yes, missing some detail. But not half bad for a 2k model with renderer!\n//\n// Gist for the generating the model:\n\n\n#define S(a,b,c,d) a*length(p-.01*vec3(b,c,d))\nfloat scene(vec3 p){\n  return .782\n    + S(.247,25,21,-52)\n    + S(.657,-6,53,-135)\n    - S(.567,54,68,64)\n    - S(.428,83,-60,-22)\n    + S(.241,1,-67,16)\n    - S(.315,83,30,18)\n    + S(.542,47,25,-63)\n    + S(.552,71,-3,1)\n    - S(.388,75,-31,11)\n    + S(.274,22,-56,16)\n    - S(.353,99,31,32)\n    + S(.381,2,-78,-15)\n    + S(.421,40,-1,53)\n    + S(.357,32,-50,-55)\n    - S(.802,78,35,-23)\n    + S(.588,111,-10,-17)\n    - S(.445,8,-7,-29)\n    - S(.253,-17,-37,32)\n    - S(.245,-2,-74,59)\n    + S(.396,5,72,155)\n    - S(.467,75,-41,-30)\n    + S(.196,3,57,-23)\n    + S(.288,25,44,11)\n    + S(.24,4,-71,121)\n    - S(.505,26,-116,-15)\n    + S(.249,25,21,-52)\n    - S(.776,6,109,-65)\n    + S(.294,19,49,15)\n    - S(.333,96,-3,37)\n    - S(.5,10,-6,-94)\n    + S(.367,-12,-3,38)\n    + S(.359,-1,68,-31)\n    + S(.41,-4,83,161)\n    - S(.318,-16,34,34)\n    + S(.265,-56,46,-11)\n    - S(.494,37,-2,-4)\n    + S(.327,29,-35,-3)\n    - S(.388,20,-68,66)\n    + S(.364,40,-1,53)\n    - S(.483,44,3,-26)\n    - S(.514,15,66,62)\n    + S(.403,8,-80,-137)\n    + S(.449,33,-51,-55)\n    + S(.502,4,-30,-56)\n    + S(.265,16,54,18)\n    + S(.097,13,-23,90)\n    + S(.197,-26,63,10)\n    - S(.398,-5,-6,-29)\n    + S(.624,77,-3,-7)\n    - S(.353,46,-72,76)\n    - S(.289,75,-18,-58)\n    - S(.627,-139,-4,-55)\n    + S(.21,16,37,-4)\n    - S(.488,62,-14,-75)\n    + S(.65,96,-6,-8)\n    - S(.383,60,89,-19)\n    + S(.169,6,-62,11)\n    - S(.474,81,-78,76)\n    + S(.397,46,51,14)\n    - S(.332,37,-12,-37)\n    + S(.362,38,-55,19)\n    - S(.307,-25,85,50)\n    - S(.418,84,3,-56)\n    - S(.527,-84,73,47)\n    - S(.383,-83,-71,35)\n    + S(.319,-46,-57,7)\n    - S(.4,-16,-18,-98)\n    + S(.383,46,-56,-89)\n    - S(.267,-49,-3,-77)\n    + S(.382,26,-56,158)\n    - S(.164,-9,-64,53)\n    + S(.323,41,-54,17)\n    + S(.368,-22,-84,168)\n    + S(.548,44,49,-50)\n    - S(.333,-48,-85,49)\n    + S(.446,44,49,-136)\n    - S(.36,91,-28,28)\n    - S(.463,29,-6,-91);\n}\n\n\n// Ray marcher by FabriceNeyret2\n\n#define rot(a) mat2(cos(a+vec4(0,11,33,0)))\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 R = iResolution.xy, U = ( u -.5 * R ) / R.y, M = ( iMouse.xy - .5*R ) / R.y;\n    vec3 D = normalize(vec3(1.5,U)), p = vec3(-3,0,0);\n    float y = .5, z = iTime*.1, l = 0., d = l;\n    if (iMouse.z > 0.) y += -4.*M.y, z = -4.*M.x;\n    D.xz *= rot(y); D.xy *= rot(z);\n    p.xz *= rot(y); p.xy *= rot(z);\n    bool hit = false;\n    for (int i = 0; i < 150 && d < 5. && !hit; i++)\n        d = scene(p),\n        hit = d < 1e-3,\n        p += d*D,\n        l += d;\n\n    vec3 e = vec3(.01,0,0), n = normalize(scene(p) - vec3(scene(p-e),scene(p-e.yxy),scene(p-e.yyx)));\n    O = hit ? .2*max(0.,n.z)+.8*texture(iChannel0, reflect(D,n).xzy) : texture(iChannel0, D.xzy);\n}","name":"Image","description":"","type":"image"}]}