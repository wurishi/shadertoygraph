{"ver":"0.1","info":{"id":"dlBSzV","date":"1676321890","viewed":129,"name":"Particle Repulsions","username":"Rugged","description":"Particle behaviors for fluid. Not perfect I know, but it's a good start.","likes":6,"published":1,"flags":32,"usePreview":0,"tags":["fluid","particles"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec4 col = vec4(0.);\n\n    //vec4 p;\n\n    //for(int i = 0; i < 100; i++){\n    //    p = texelFetch(iChannel0, ivec2(i, 0), 0);\n    //    col += .001 / (distance(uv, p.xy) + .001);\n    //}\n    \n    //col = 500. * pow(texture(iChannel0, uv), vec4(4.));\n    col = texture(iChannel0, uv);\n\n    fragColor = col;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define viscosity .995\n#define surfaceTension .00001\n#define particleRepulsion .085\n\nvec2 force(vec2 p, vec2 p1){\n    vec2 to = p1 - p;\n    float d = length(to) + .1;\n    vec2 dir = to / d;\n    float mag = .00001 * (1. / d);//(10. - (d / 10.)) / (d * d);\n    \n    \n    return ((surfaceTension * .01 / (d * d)) - pow((particleRepulsion / d), 10.)) * dir;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    vec4 col = vec4(0.);\n    \n    //float viscosity = .998;\n    \n    if(iFrame == 0){\n        col = vec4(hash3(uv), hash3(uv.yx), 0., .0);\n    }\n    else{\n        vec4 p;\n        \n        col = texelFetch(iChannel0, ivec2(fragCoord), 0);\n        \n        float closest = 2.;\n        \n        for(int i = 0; i < 300; i++){\n            p = texelFetch(iChannel0, ivec2(i, 0), 0);\n            col.zw += force(col.xy, p.xy) * iTimeDelta;\n            closest = min(closest, distance(col.xy, p.xy));\n        }\n        \n        //add force from human input cursor\n        if(iMouse.z > 0.){\n            col.zw += -normalize(col.xy - (iMouse.xy / iResolution.xy)) * .01 * iTimeDelta;\n        }\n        \n        \n        //col = texelFetch(iChannel0, ivec2(fragCoord), 0);\n        col.w += -.006 * iTimeDelta * ((col.y - .011) / abs(col.y - .011));\n        //col.w *= ((1. + ) / 2.) * -((col.y - 1.) / abs(col.y - 1.));\n        col.zw *= ((1. - viscosity) * (closest * closest)) + viscosity;\n        //col.z *= (col.x / abs(col.x)) * -((col.x - 1.) / abs(col.x - 1.));\n        \n        \n        col.xy += col.zw;\n        col.xy = clamp(col.xy, .01, .99);\n        \n        \n    }\n    \n    fragColor = col;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec4 col = vec4(0.);\n\n    vec4 p;\n    \n    float attenuation = 1.;\n    \n    for(int i = 0; i < 300; i++){\n        p = texelFetch(iChannel0, ivec2(i, 0), 0);\n        col += pow(.0001 / (distance(uv, p.xy) + .00001), attenuation);\n    }\n    \n    float threshold = .1;\n    \n    float toggleLeftRight = (uv.x - .5) / abs(uv.x - .5);\n    \n    col += ((col - threshold) / abs(col - threshold)) * (1. + toggleLeftRight) / 2.;\n    \n    col += 500. * col * col * col * col * (1. - toggleLeftRight) / 2.;\n    \n    fragColor = col;\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"float hash3(vec2 xy){\n    xy = mod(xy, .19);\n    float h = dot(xy.yyx, vec3(.013, 27.15, 2027.3));\n    h *= h;\n    h *= fract(h);\n    \n    return fract(h);\n}\n","name":"Common","description":"","type":"common"}]}