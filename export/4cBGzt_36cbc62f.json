{"ver":"0.1","info":{"id":"4cBGzt","date":"1704496385","viewed":51,"name":"double_spiral","username":"scalp","description":"onsenbalek","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["simplespiral"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* This animation is the material of my first youtube tutorial about creative \n   coding, which is a video in which I try to introduce programmers to GLSL \n   and to the wonderful world of shaders, while also trying to share my recent \n   passion for this community.\n                                       Video URL: https://youtu.be/f4s1h2YETNY\n*/\n\n#define pi     3.14159265\n\nfloat rand(float co) { return fract(sin(co*(91.3458)) * 47453.5453); }\n\nmat2 rotation(float angle)\n{\n\tfloat c = cos(angle);\n    float s = sin(angle);\n    return mat2( c, -s, s, c);\n}\n\nvec2 cart2pol(vec2 cart){\n    return vec2(length(cart), atan(cart.y, cart.x));\n}\n\nvec2 pol2cart(vec2 pol){\n    return vec2(pol[0]*cos(pol[1]), pol[0]*sin(pol[1]));\n}\n\nbool sdCircle( in vec2 p, in vec2 center, in float r ) \n{\n    return length(p-center)-r <0.0;\n}\n\n\nfloat initPoint(float i, float n, float thlimit) \n{\n    float th = thlimit / n * i;\n    return th;\n}\n\nfloat initPoint2(float i, float n, float thlimit) \n{\n    float th = thlimit / n * i + pi;\n    return th;\n}\n\nvec2 spiralpoint(float th0, float thlimit) \n{    \n    float w = 0.8;\n    \n    float th = th0 + w*iTime;\n    \n    float a = 0.3;    \n    th = mod(th, thlimit);\n    float r = a * th;\n    \n    return vec2(r*cos(th), r*sin(th));\n}\n\nvec2 spiralpoint2(float th0, float thlimit) \n{    \n    float w = 0.8;\n    \n    float th = th0 + w*iTime;\n    \n    float a = 0.3;    \n    th = mod(th, thlimit) + pi;\n    float r = a * (th-pi);\n    \n    return vec2(r*cos(th), r*sin(th));\n}\n\nvec3 palette( float t ) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(221./255., 77./255., 215./255.);\n    \n    vec3 d1 = vec3(0.463 * iTime,0.416,0.557*iTime);\n    //vec3 d = vec3(0.263,0.416,0.557);\n    vec3 d2 = vec3(0.00, 0.00, 0.00);\n    vec3 d3 = vec3(0.5, 0.80, 0.50);\n    // vec3 d =  alpha * d1 + (1 - alpha) * d2;\n    vec3 d = d1;\n\n    //return a * (0.5 + sin(iTime)) + b*cos( 6.2830*(c*t+d) );\n    return a+ (b+0.1)*cos( 6.2830*(c+t+d1) );\n    //return mix(a * (0.5 + sin(iTime)) + b*cos( 6.2830*(c*t+d1) ), a * (0.5 + sin(iTime)) + b*cos( 6.2830*(c*t+d2) ), alpha);\n}\n// Box-filter by Greg Rostami\n// Add this code to the bottom of any shader that has aliasing problems:\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Set up \n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    uv *= 2.;\n    \n    \n    float n = 40.;\n    float thlimit = 4.* pi;\n    \n    vec3 col;\n    float th0;\n    vec2 center;\n    for (float i = 0.; i < n; i+= 1.) {\n        float th0 = initPoint(i, n, thlimit);\n        vec2 center = spiralpoint(th0, thlimit);\n        float radius = length(uv) * (1.+ sin(4.*center[0]))/2.;\n        col += sdCircle(uv, center, radius/10.) ? palette(length(uv)) : vec3(0.,0.,0.);\n        \n        center = spiralpoint2(th0, thlimit);\n        col += sdCircle(uv, center, radius/10.) ? palette(length(uv)) : vec3(0.,0.,0.);\n    }\n    \n    //vec3 col = palette(cart2pol(uv)[0] * 1. * (1.+sin(iTime)));\n   \n        \n\tfragColor =vec4(col, 1);\n}","name":"Image","description":"","type":"image"}]}