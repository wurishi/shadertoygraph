{"ver":"0.1","info":{"id":"wdsyzn","date":"1584040919","viewed":369,"name":"Squared Numbers Grid","username":"BackwardsCap","description":"Trying to help https://www.shadertoy.com/view/wssyRn with a potential solution","likes":4,"published":3,"flags":0,"usePreview":0,"tags":["grid","id","squarednumbers"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define p 1.25\n\n/*\nfloat applyRound(float i)\n{\n    if(fract(i)<0.5)return floor(i);\n    return ceil(i);\n}\n*/\n\nbool isPower(float id)\n{\n    //thanks to rory618 for pointing out the err of my ways with floating point values\n    return floor(pow(id-.5,1.0/p))!=floor(pow(id+.5,1.0/p));\n\n    \n    //my alternate solution that would be WAY faster but I still don't quite understand why it doesnt work\n    \n    //return 0.0==fract(pow(id,1.0/p));\n    //this works for p==2.0 but everything else does not work\n    \n    //for(int i=0;i<n;i++)\n    //{\n    //    if(id==round(pow(float(i),p))) return true;\n    //}\n    //return false;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    //adjust aspect ratio\n    float ratio=iResolution.x/iResolution.y;\n    uv.x*=ratio;\n    \n    //scale our grid\n    float size = 200.;\n    uv*=size/ratio;\n    \n    \n    \n    //get our cell id, starting 0 at bottom left, counting up looping each row\n    float id = floor(uv.x+floor(uv.y)*size);\n    \n    //output variables and the size of our grid lines\n    float o = 0., l=0., gline=size/iResolution.x;\n   \t\n    //if our id is in the array we calculated, set it white\n    if(isPower(id))o=1.;\n    \n    //add grid lines\n    uv=fract(uv);\n    if(uv.x<gline||uv.y<gline) l = 1.0;\n    \n    //set the output color\n    fragColor.rgb = vec3(l+o);\n    //if floor(iTime)^2 == our cell id, set it red \n    if(round(pow(floor(iTime),p))==id&&l==0.)fragColor.rgb=vec3(1,0,0);\n}","name":"Image","description":"","type":"image"}]}