{"ver":"0.1","info":{"id":"WsKGDV","date":"1570996223","viewed":448,"name":"Utils - Keyboard codes","username":"AntoineC","description":"Grid showing key codes and the key events: Is Key Down (red), Key Pressed (green) and Is Key Toggled (blue).","likes":13,"published":1,"flags":16,"usePreview":0,"tags":["2d","keyboard","utils"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Arrange in 16x16 grid:\n    float dp  = 1.0 / iResolution.y;\n    vec2  p   = fragCoord * dp;\n    vec2  pi  = floor(16.0*p);\n    vec2  pf  = fract(16.0*p);\n    int   key = int(pi.x+16.0*pi.y);\n \n    // Key events:\n    //  The texel x coordinate defines the code of the key to scan.\n    //  The texel y coordinate defines the type of events to fetch for that key.\n    float isKeyDown    = texelFetch( iChannel0, ivec2(key, 0),0 ).x;\n    float keyPressed   = texelFetch( iChannel0, ivec2(key, 1),0 ).x;\n    float isKeyToggled = texelFetch( iChannel0, ivec2(key, 2),0 ).x;\n    \n    // Draw:\n    vec3 col = vec3(0);\n    Glyph(iChannel1, (pi.y < 10.0 ? 0x30 : 0x57)+int(pi.y), pf, dp*16.0, vec2(0.3,-0.3), vec3(0.3), 0.8, 1.0, col);\n    Glyph(iChannel1, (pi.x < 10.0 ? 0x30 : 0x57)+int(pi.x), pf, dp*16.0, vec2(1.3,-0.3), vec3(0.3), 0.8, 1.0, col);\n\n    col += (isKeyDown    == 1.0) && (pf.x < 0.5) && (pf.y < 0.5) ? vec3(1.0, 0.0, 0.0) : vec3(0); // Red\n    col += (keyPressed   == 1.0) && (pf.x > 0.5) && (pf.y < 0.5) ? vec3(0.0, 1.0, 0.0) : vec3(0); // Green\n    col += (isKeyToggled == 1.0) && (pf.x > 0.5) && (pf.y > 0.5) ? vec3(0.0, 0.0, 1.0) : vec3(0); // Blue\n    \n    col = 0.8*col + 0.2*mix(vec3(0.5), vec3(1), mod(pi.x+pi.y, 2.0));\n    col = pi.x < 16.0 ? col : vec3(0);\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Additional spacing based on typeface weight:\n#define WeightWidth(weight) (0.05*0.4*(weight))\n\n// Char spacing:\n#define CharSpacing(size, weight) ((size)*(0.42 + 2.0*WeightWidth(weight)))\n\n\n// Draw a glyph:\n//  ascii:  ASCII character value\n//  p:      pixel coordinate. (0,0) is left border and base line of char (corrected for weight).\n//  eps:    pixel size.\n//  coord:  coordinate of the character. \n//  color:  color.\n//  size:   font size.\n//  weight: Typeface weight [0.20 3], regular 1.\n//  o:      frag color (in/out).\nvoid Glyph(sampler2D sampler, int ascii, vec2 p, float eps, vec2 coord, vec3 color, float size, float weight, inout vec3 o)\n{\n    // Scaling:\n    p   /= size;\n    eps /= size;\n    \n    // Weight width:\n    float weightWidth = WeightWidth(weight);\n\n    // Typeface Width (condensed = 1.5):\n    //p.x *= 1.5;\n    \n    // Set char position:\n    float charSpacing = CharSpacing(size, weight) / size; // divide by size since p is already scaled\n    float dx = 0.31 - weightWidth; // bottom left corner of char\n    float dy = 0.24 - weightWidth; \n    p += vec2(dx - charSpacing*coord.x, coord.y + dy);\n\n    // Italic:\n    //p.x += -0.30*(p.y-dy);\n    \n    // Is uv inside of [0 1] for both components?\n    if(all(greaterThanEqual(vec4(p,1,1), vec4(0,0,p))))\n    {\n        // Get the distance (.w component of the sprite sheet):\n        float g = texture(sampler, 0.0625*(p + vec2(ascii - ascii/16*16,15 - ascii/16))).w;\n\n        // Fill interior:\n        float b = 0.5*0.95 + weightWidth;\n        float c = smoothstep(b + 0.5*eps, b - 0.5*eps , g);\n        \n        // Add to output:\n        //o = mix(mix(o, vec3(1.,0.,0.), 0.20), color, c);\n        o = mix(o, color, c);\n    }\n}\n\n","name":"Common","description":"","type":"common"}]}