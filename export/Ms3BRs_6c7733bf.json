{"ver":"0.1","info":{"id":"Ms3BRs","date":"1526327736","viewed":89,"name":"Cumbersome Circle","username":"timeiskey","description":"Calculates the radius of a circle at any distance from the center.\nThis is a tool for another shader im working on.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["shapes","inefficient"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 uvm = vec2( 1.0 ) / iResolution.xy;\n\t\n    \n    vec2 cp = vec2( 0.5, 0.5 );\n        \n    float diameter = 50.0;\n    float radius = diameter / 2.0;\n    \n    float c = 0.0;\n    \n    for( int i = 0; i <= int(diameter); i++ )\n    {\n        float d2c = -(radius - float(i));    \n        float y = d2c * uvm.y + cp.y;\n        \n        float radiusAtY = 2.0 * sqrt( pow( radius, 2.0) - pow( abs(d2c), 2.0) );\n        radiusAtY = floor( radiusAtY / 2.0 );\n  \n        for( float ix = -radiusAtY; ix <= radiusAtY; ix++ )\n        {\n            float x = ix * uvm.x + cp.x;\n            vec2 cpp = vec2( abs(x), abs(y) );\n            if( distance(uv, cpp) < 0.002  )\n            {\n                c = 1.0;\n            }\n        }\n    }\n\n    // Output to screen\n    fragColor = vec4(vec3(c),1.0);\n}","name":"Image","description":"","type":"image"}]}