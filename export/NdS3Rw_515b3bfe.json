{"ver":"0.1","info":{"id":"NdS3Rw","date":"1621425261","viewed":57,"name":"ray-casting","username":"quatreb","description":"samples of ray-casting method","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["3d","raycast","rays","graphics"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 ro = vec3(-5.0, 0.0, 0.0);    // rayOrigin\nvec3 rd;                           // rayDirection\n\nvec3 light = vec3(-3.0, 3.0, 6.0);\nfloat ka = 0.2, kd = 0.8;          // ambient & diffuse\n\nvec2 sphIntersect(vec3 ce, float ra) {\n\n    vec3 delta = ro - ce;\n    float b = dot(delta, rd);\n    float c = dot(delta, delta) - ra * ra;\n    \n    float D = b * b - c;\n    if (D < 0.0) return vec2(-1.0);\n    else return vec2(-b - sqrt(D), -b + sqrt(D));\n}\n\nvec3 sphCe = vec3(2.5, 0.0, 0.0);\nfloat sphRa = 1.0;\n\nvec3 rayCast() {\n    vec2 t = sphIntersect(sphCe, sphRa);\n    if (t.x == -1.0) return vec3(0.0);\n    vec3 pos = ro + t.x * rd;\n    vec3 n = (pos - sphCe) / sphRa;\n    vec3 l = (light - pos) / normalize(light - pos);\n    //return vec3(kd * dot(light, n));\n    return vec3(kd * (n * l) / (sqrt(dot(n, n)) * sqrt(dot(l,l))));\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord) {\n    \n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.x;\n    uv.y = -uv.y;\n    rd = normalize(vec3(1.0, uv));\n    vec3 col = rayCast();\n    fragColor = vec4(col, 0.0);\n    \n}","name":"Image","description":"","type":"image"}]}