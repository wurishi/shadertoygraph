{"ver":"0.1","info":{"id":"wtS3Dy","date":"1560926293","viewed":327,"name":"Birefringence Gradient","username":"blackle","description":"This is a small function that emulates the Michel-Lévy interference gradient, as one would see in many birefringent effects, such as viewing stressed plastic through cross polarizers. It was used in my demo \"scaleMARK\"","likes":17,"published":1,"flags":0,"usePreview":0,"tags":["birefringence"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Michel-Lévy interference in linear sRGB, given path difference F expressed in micrometers.\n// Note that for some F this function will return colours with some channels in the negative.\n// This is because some interference colours are outside the linear sRGB gamut, and therefore\n// must be represented with negative values for some channels.\nvec3 ML(float F) {\n    return mat3(1.5,-.2,-.1,-.6,1.1,.2,-.1,.1,1.5)*(.5-.5*cos(2.*F*vec3(5.2,5.7,7.2)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-iResolution.xy/2.0)/iResolution.yy;\n\n    vec3 col = ML(pow(texture(iChannel0, uv*0.5).x*(0.5+sin(iTime)*0.5),cos(iTime)+2.0)*1.6);\n\n    col *= pow(max(1.0 - pow(length(uv)*1.1, 4.0), 0.0),3.0); //vingetting lol\n    if (uv.y > 0.4) col = ML((fragCoord.x/iResolution.x)*1.5);\n    fragColor.xyz = sqrt(max(col,0.0)); //gamma correct to non-linear sRGB\n}\n","name":"Image","description":"","type":"image"}]}