{"ver":"0.1","info":{"id":"DdyXDt","date":"1681758054","viewed":373,"name":"Fork Galaxy of  altunenes 747","username":"altunenes","description":"my first attempt to make \"readable\" the following code to learn this beautiful language. So I thought I can get some insights into what's going on in the matrix XD\nhttps://www.shadertoy.com/view/XdsSRS","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["galaxy","universes"],"hasliked":0,"parentid":"XdsSRS","parentname":"Galaxy of Universes (2)"},"renderpass":[{"inputs":[],"outputs":[],"code":"//ref for some noise functions and Brownian motion: frankenburgh, (2016) https://www.shadertoy.com/view/lty3Rt \n// Dave_Hoskins, (2014) https://www.shadertoy.com/view/MdXSzS ; FabriceNeyret2, (2014) https://www.shadertoy.com/view/XdsSRS\nvec3 lightDirection = normalize(vec3(1.0, 1.0, 1.0)); \nuniform float zoomLevel; \n\n\nfloat fbmslow( in vec2 p ) {\n    float f = 0.0;\n    f += 1.001 * length(p);\n    p = p * 2.02;\n    f += 2.001 * length(p);\n    p = p * 2.03;\n    f += 0.1250 * length(p);\n    p = p * 0.001;\n    f += 0.0625 * length(p);\n    return f / 2.9375;\n}\n\nfloat noise(vec2 p) {\n    return fbmslow(p + iTime * 0.05);\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord.xy / iResolution.xy) - 0.5;\n    float distanceFromCenter = length(uv.xy)*1.0; //adjust 1.0\n    vec2 flow = vec2(noise(uv), noise(uv + vec2(0.1)));\n\n    float timeFactor = 0.1 * iTime;\n    float adjustedTime = timeFactor + (5.0 + sin(timeFactor)) * 0.1 / (distanceFromCenter + 0.07);\n    float sineTime = sin(adjustedTime), cosineTime = cos(adjustedTime);\n    uv *= mat2(cosineTime, sineTime, -sineTime, cosineTime);\n    uv += flow * 0.008;\n\n    float baseColor = 0.0, color1 = 0.0, color2 = 0.0, color3;\n    vec3 point;\n\n    for (int i = 0; i < 150; i++) {\n        point = 0.09 * float(i) * vec3(uv, 1.0);\n        point += vec3(0.1, 0.01, -3.5 - sin(timeFactor * 0.1) * 0.01);\n\n        for (int j = 0; j < 11; j++) {\n            point = abs(point) / dot(point, point) - 0.52;\n        }\n\n        float pointIntensity = dot(point, point) * 0.000828;\n        color1 += pointIntensity * (3.8 + sin(distanceFromCenter * 13.0 + 3.5 - timeFactor * 2.0));\n        color2 += pointIntensity * (1.5 + sin(distanceFromCenter * 13.5 + 2.2 - timeFactor * 3.0));\n        color3 += pointIntensity * (2.4 + sin(distanceFromCenter * 14.5 + 1.5 - timeFactor * 2.5));\n\n    }\n\n    baseColor = (3.1 / (1.3 + zoomLevel)) * length(point.xy) * 0.12;\n    color1 = color1 * 0.5;\n    color2 = color2 * 0.5; \n    color3 = smoothstep(0.18, 0.0, distanceFromCenter);\n    color3 = color3 * 0.3;\n\n    vec3 direction = normalize(vec3(uv, 0.0)); \n    float sundot = dot(lightDirection, direction);\n\n    vec3 finalColor = vec3(baseColor, (color1 + baseColor) * 0.25, color2);\n    finalColor = finalColor + color3 * 2.9;\n\n\n    finalColor.g += color3 * 0.45;\n\n    fragColor = vec4(finalColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}