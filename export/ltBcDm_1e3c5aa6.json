{"ver":"0.1","info":{"id":"ltBcDm","date":"1508798674","viewed":1669,"name":"Simple gaussian blur","username":"luluco250","description":"Simple gaussian blur filter.","likes":9,"published":3,"flags":32,"usePreview":1,"tags":["2d","blur","filter","gaussian"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Vertical blur\n\nvoid mainImage(out vec4 color, vec2 coord)\n{\n    vec3 ps = vec3(vec2(1.0) / iResolution.xy, 0.0);\n    vec2 uv = coord * ps.xy;\n    \n    color = GaussianBlur1D(\n        iChannel0,\n        uv,\n        ps.zy * BlurScale,\n        BlurSigma,\n        BlurSamples);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Horizontal blur\n\nvoid mainImage(out vec4 color, vec2 coord)\n{\n    vec3 ps = vec3(vec2(1.0) / iResolution.xy, 0.0);\n    vec2 uv = coord * ps.xy;\n    \n    color = GaussianBlur1D(\n        iChannel0,\n        uv,\n        ps.xz * BlurScale,\n        BlurSigma,\n        BlurSamples);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"const vec2 BlurScale = vec2(2.0);\nconst int BlurSamples = 21;\nconst float BlurSigma = sqrt(float(BlurSamples));\n\nconst bool UseSimplifiedGaussian = true;\n\nconst float Pi = atan(1.0) * 4.0;\n\nfloat Gaussian1D(float x, float sigma)\n{\n    if (UseSimplifiedGaussian)\n    {\n        return exp(-(x * x) / (2.0 * sigma * sigma));\n    }\n    \n    float o = sigma * sigma;\n    float a = 1.0 / sqrt(2.0 * Pi * o);\n    float b = (x * x) / (2.0 * o);\n\n    return a * exp(-b);\n}\n\nvec4 GaussianBlur1D(\n\tsampler2D sp,\n\tvec2 uv,\n\tvec2 dir,\n\tfloat sigma,\n\tint samples)\n{\n\tfloat halfSamples = float(samples) * 0.5;\n\n\tvec4 color = vec4(0.0);\n\tfloat accum = 0.0;\n\n\tuv -= halfSamples * dir;\n\n\tfor (int i = 0; i < samples; ++i)\n\t{\n\t\tfloat weight = Gaussian1D(float(i) - halfSamples, sigma);\n\n\t\tcolor += texture(sp, uv) * weight;\n\t\taccum += weight;\n\n\t\tuv += dir;\n\t}\n\n\treturn color / accum;\n}\n","name":"Common","description":"","type":"common"}]}