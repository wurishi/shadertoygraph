{"ver":"0.1","info":{"id":"3dlBWS","date":"1588972219","viewed":85,"name":"voronoi with color scheme","username":"sidchou","description":"voronoi with color scheme\n\nreference :\nvoronoi: https://www.shadertoy.com/view/MslGD8\nvoronoi: https://www.shadertoy.com/view/ldl3W8","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["voronoicolor"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//color pick\nvec3 color(float t) {\n    vec3 col;\n\tvec3 a = vec3(0.15,0.26,0.91);\n    vec3 b = vec3(0.34,0.78,0.94);\n    vec3 c = vec3(0.89,0.25,0.91);\n    \n    col = step(t,0.333)*a;\n    col +=step(0.333,t)*step(t,0.667)*b;\n    col +=step(0.667,t)*c;\n    \n    return col;\n}\n\n//hash (random) function\nvec2 hash( vec2 p ) {\n    p=vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))); \n    return fract(p);}\n\n// return distance as x, and xy as y\nvec3 voronoi( in vec2 x )\n{\n    vec2 n = floor( x );\n    vec2 f = fract( x );\n\n    vec2 mg, mr;\n    \n\tvec3 m = vec3( 8.0 );\n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ )\n    {\n        vec2  g = vec2( float(i), float(j) );\n        vec2  o = hash( n + g );\n        \n        vec2  r = g - f + o;\n        //o = 0.5 + 0.5*sin( iTime + 6.2831*o );\n \n\t    //vec2  r = g - f; // square\n\t\tfloat d = dot( r, r );\n\n        if( d<m.x ){\n\t\t\tmr = r;\n\t\t\tmg = g;\n            m = vec3( d, o.x,o.y);\n        } \n       \n    }\n    \n    \n    //distance to\n    float md = 8.0 ;\n  for( int j=-2; j<=2; j++ ){\n\tfor( int i=-2; i<=2; i++ ){\n        vec2 g = mg + vec2(float(i),float(j));\n\t\tvec2 o = hash( n + g );\n        //o = 0.5 + 0.5*sin( iTime + 6.2831*o );\n        //o = 0.2*sin( iTime + 6.2831*o );\n        vec2 r =  g - f + o;\n\n        if( dot(mr-r,mr-r)>0.00001 )\n        md = min( md, dot( 0.5*(mr+r), normalize(r-mr) ) );\n    }\n  }\n\n\n    return vec3( sqrt(m.x), m.y*m.z, md );\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 p = fragCoord.xy/max(iResolution.x,iResolution.y);\n    p.x-=iTime*.02;\n    p.y-=iTime*.01;\n        \n    // voronoi patterm\n\tvec3 c = voronoi(10.*p);\n    c.y += floor(iTime/5.);\n    \n    //randomize order\n    vec2 hashing = hash(vec2(0.,c.y))*30.;\n\tc.y *= hashing.x*hashing.y;\n    c.y = fract(c.y);\n    \n    // colorize\n    vec3 col;\n    col = vec3(c.y);\n    col = vec3(color(c.y));\n\t\n    //edge\n    vec3 edge = vec3(smoothstep( 0.04, 0.07,c.z));\n\n    col = min(col,edge);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}