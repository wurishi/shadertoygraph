{"ver":"0.1","info":{"id":"NtccR7","date":"1659445839","viewed":91,"name":"Gut feeling","username":"Mojomajor","description":"let it run for a while, it will become more wobbly\n\nyummy, yummy, yummy, I got love in my tummy..\n\nplay around with the defines\n#define RAINBOW 1\n#define LIQUID 1\n#define MUSIC 0\n#define VORONOI 0","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["truchet","guts","digest"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGRr","filepath":"/media/a/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","previewfilepath":"/media/ap/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","type":"music","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define time (160.+iTime)*0.1\n#define RAINBOW 1\n#define LIQUID 0\n#define MUSIC 0\n#define VORONOI 0\n#define tau 6.2831\n\n// Basic Quad Truchet by Martijn Steinrucken aka BigWings - 2019\n// countfrolic@gmail.com\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// \n// This is the end result of one of my video tutorials\n// on YouTube that you can see here:\n// https://youtu.be/2R7h76GoIJM\nvec2 hash( vec2 p )\n{\n    //p = mod(p, 4.0); // tile\n    p = vec2(dot(p,vec2(127.1,311.7)),\n             dot(p,vec2(269.5,183.3)));\n    return fract(sin(p)*18.5453);\n}\n// return distance, and cell id\nvec2 voronoi( in vec2 x )\n{\n    vec2 n = floor( x );\n    vec2 f = fract( x );\n\n\tvec3 m = vec3( 8.0 );\n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ )\n    {\n        vec2  g = vec2( float(i), float(j) );\n        vec2  o = hash( n + g );\n      //vec2  r = g - f + o;\n\t    vec2  r = g - f + (0.5+0.5*sin(iTime+tau*o));\n\t\tfloat d = dot( r, r );\n        if( d<m.x )\n            m = vec3( d, o );\n    }\n\n    return vec2( sqrt(m.x), m.y+m.z );\n}\n\nfloat hash21(in vec2 n){ return fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453); }\nmat2 makem2(in float theta){float c = cos(theta);float s = sin(theta);return mat2(c,-s,s,c);}\nfloat noise( in vec2 x ){return texture(iChannel0, x*.01).x;}\n\nvec2 gradn(vec2 p)\n{\n\tfloat ep = .09;\n\tfloat gradx = noise(vec2(p.x+ep,p.y))-noise(vec2(p.x-ep,p.y));\n\tfloat grady = noise(vec2(p.x,p.y+ep))-noise(vec2(p.x,p.y-ep));\n\treturn vec2(gradx,grady);\n}\n\n// adjusted\nfloat flowLava(in vec2 p) {\n\tfloat z=2.;\n\tfloat rz = 0.;\n\tvec2 bp = p;\n\tfor (float i= 1.;i < 7.;i++ )\n\t{\n\t\t//primary flow speed\n\t\tp += time*.6;\n\t\t\n\t\t//secondary flow speed (speed of the perceived flow)\n\t\tbp += time*.9;\n\t\t\n\t\t//displacement field (try changing time multiplier)\n\t\tvec2 gr = gradn(i*p*.34+time*1.);\n\t\t\n\t\t//rotation of the displacement field\n\t\tgr*=makem2(time*6.-(0.05*p.x+0.03*p.y)*40.);\n\t\t\n\t\t//displace the system\n\t\tp += gr*.5;\n\t\t\n\t\t//add noise octave\n\t\trz+= (sin(noise(p)*7.)*0.5+0.5)/z;\n\t\t\n\t\t//blend factor (blending displaced system with base system)\n\t\t//you could call this advection factor (.5 being low, .95 being high)\n\t\tp = mix(bp,p,.95);\n\t\t\n\t\t//intensity scaling\n\t\tz *= 1.7;\n\t\t//octave scaling\n\t\tp *= 1.;\n\t\tbp *= .9;\n\t}\n\treturn rz;\t\n}\n\n\nfloat Hash21(vec2 p) {\n\tp = fract(p*vec2(234.34, 435.345));\n    p += dot(p, p+34.23);\n    return fract(p.x*p.y);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 UV = fragCoord.xy/iResolution.xy;\n    \n    vec3 col = vec3(0);\n    \n    uv += iTime*.05;\n    uv *= 4.;\n    vec2 gv = fract(uv)-.5;\n    vec2 id = floor(uv);\n    \n    float n = Hash21(id); // random number between 0 and 1\n    \n    //float width = .1;0.21*sin(UV.y*time)*0.5+0.5;\n    float sinZeroToOne = sin(dot(UV.x,UV.y)*time/1.)*0.5+0.5;\n    float aNoise = noise(UV);\n    float width = .1 + sinZeroToOne/10. + aNoise/10.;\n    \n    if(n<.5) gv.x *= -1.;\n    float d = abs(abs(gv.x+gv.y)-.5);\n    vec2 cUv = gv-sign(gv.x+gv.y+.001)*.5;\n    d = length(cUv);\n    float mask = smoothstep(.01, -.01, abs(d-.5)-width);\n\tfloat angle = atan(cUv.x, cUv.y*2.); // -pi to pi\n    float checker = mod(id.x+id.y, 2.)*2.-1.;\n    float flow = sin(iTime+checker*angle*10.);\n    \n    #if MUSIC\n    vec3 ampl = texture(iChannel1, uv).xyz;\n    float x = (checker*angle/ampl.x+time);\n    #else\n    float x = (checker*angle/1.57-iTime*.3);\n    #endif\n    float y = (d-(.5-width))/(2.*width);\n    y = abs(y-.5)*2.;\n    vec2 tUv = vec2(x, y);\n    #if VORONOI\n    // compute voronoi pattern\n    vec2 c = voronoi( (50.0+0.0*sin(0.2*iTime))*tUv );\n    vec3 colV =  vec3(cos(c.x),sin(c.y),1.-tUv.x) ;\n    col += colV;\n    //tUv += c;\n    #endif\n    \n    float rz = flowLava(uv);\n    vec3 colLava = vec3(.2,0.07,0.01)/rz;\n\tcolLava=pow(colLava,vec3(1.4));\n    \n    \n    col += texture(iChannel0, tUv).rgb*mask;\n    // lava on snake\n    col += colLava*mask;\n    // tighter\n    col *= tUv.y;\n    // fadenwÃ¼rmer\n    col *= 2.5-tUv.y;\n    \n    \n    \n    #if RAINBOW\n    vec3 colC = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    col -= colC;\n    #endif\n    \n    // underglow\n    col = mix(col, colLava, 0.25);\n    \n    #if LIQUID\n    // trippy\n    col /= colLava;\n    #endif\n    \n    \n    \n    // if(gv.x>.48 || gv.y>.48) col = vec3(1,0,0);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}