{"ver":"0.1","info":{"id":"dt3yzn","date":"1700999443","viewed":39,"name":"[RXO] Angle floor","username":"Raxmo","description":"angled floor ray-casting","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raycast"],"hasliked":0,"parentid":"dtccRn","parentname":"Ray Base"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    //-------------------------------------------//\n    // -->> initialize \"static\" stuffs <<-- //\n    vec2 uv = 2.0 * (fragCoord - 0.5 * iResolution.xy) / iResolution.x;\n\n    mat3x3 camdir = mat3x3\n    (\n    vec3(1.0, 0.0, 0.0),\n    vec3(0.0, 1.0, 0.0),\n    vec3(0.0, 0.0, 1.0)\n    );\n\n    vec3 col = vec3(0.0);\n    \n    vec3 rd = camdir * vec3(uv.x, 1.0, uv.y);\n    vec3 ro = vec3(0.0, 0.0, 0.0);\n    \n    //------------------------------------------//\n    // -->> Camera set-up <<-- //\n    \n    ro = vec3(0.5, 0.5, 5.5);\n    camdir[1] = normalize(vec3(ro.xy, -0.250));\n    camdir[0] = normalize(vec3(camdir[1].y, -camdir[1].x, 0.0));\n    camdir[2] = normalize(cross(camdir[0], camdir[1]));\n    rd = camdir * vec3(uv.x, 1.0, uv.y);\n    \n    //-------------------------------------------//\n    // -->> Initialization of values <<-- //\n    \n    ivec2 cell = ivec2(floor(ro));\n    ivec2 celldir = ivec2(sign(rd));\n    vec3 dts = abs(1.0 / rd);\n    float t = 0.0;\n    \n    vec2 rts = vec2(0.0);\n    float It = 0.0;\n    vec3 I = ro + rd * It;\n    \n    vec3 P = I;\n    \n    vec2 nts = vec2\n    (\n        dts.x * (1.0 - fract(float(celldir.x) * fract(I.x))),\n        dts.y * (1.0 - fract(float(celldir.y) * fract(I.y)))\n    );\n    float Ot = min(nts.x, nts.y);\n    vec3 O = ro + rd * Ot;\n    \n    //-------------------------------------------//\n    // -->> DDA loop <<-- //\n    \n    for(int i = 0; i < 2048; i++)\n    {\n        float floorheight = 0.0;\n        float ceilheight = -1.0;\n        \n        //vec2 fgrad = vec2(sin(float(cell.x)), cos(float(cell.y)));\n        vec2 fgrad = vec2(0.0);\n        vec2 cgrad = vec2(0.0, 0.0);\n        fgrad = vec2(sin(vec2(cell)));\n        \n        float deltat = (Ot - It);\n        \n        float Ihf = I.z - dot(I.xy - vec2(cell) - vec2(0.5), fgrad) + floorheight;\n        float Ohf = O.z - dot(O.xy - vec2(cell) - vec2(0.5), fgrad) + floorheight;\n        \n        float Ihc = ceilheight + floorheight + dot(I.xy - vec2(cell) - vec2(0.5), cgrad) - I.z;\n        float Ohc = ceilheight + floorheight + dot(O.xy - vec2(cell) - vec2(0.5), cgrad) - O.z;\n        \n        float floort = It + ((Ihf * deltat) / (Ihf - Ohf));\n        float ceilt = It + ((Ihc * deltat) / (Ihc - Ohc));\n        \n        // floor cruff\n        if(floorheight >= 0.0)\n        {\n            if(Ihf <= 0.0)\n            {\n                t = It;\n                break;\n            }\n\n            if(floort > It && floort < Ot)\n            {\n                t = floort;\n                break;\n            }\n        }\n        // ceiling cruff\n        if(ceilheight >= 0.0)\n        {\n            if(Ihc <= 0.0)\n            {\n                t = It;\n                break;\n            }\n\n            if(ceilt > It && ceilt < Ot)\n            {\n                t = ceilt;\n                break;\n            }\n        }\n        // rest of the cruff\n        t = Ot;\n        It = Ot;\n        I = O;\n        \n        if(nts.x < nts.y)\n        {\n            cell.x += celldir.x;\n            rts.x = nts.x;\n            nts.x += dts.x;\n        }\n        else\n        {\n            cell.y += celldir.y;\n            rts.y = nts.y;\n            nts.y += dts.y;\n        }\n        \n        Ot = min(nts.x, nts.y);\n        O = ro + rd * Ot;\n    }\n    \n    P = ro + rd * t;\n    \n    //-------------------------------------------//\n    \n    float test = fract(-iTime + t * 10.0);\n    \n    vec3 cuv = P - vec3(cell, 0.0);\n    \n    col = vec3(fract(1.0 * t));\n    \n    col = cuv;\n    \n    //-------------------------------------------//\n    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}