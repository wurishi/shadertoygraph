{"ver":"0.1","info":{"id":"wdj3zD","date":"1548365072","viewed":2827,"name":"Register Allocation","username":"iq","description":"Shows how register allocation can kill GPU parallelism, even if the amount of computations are the same and the same number of registers are touched. Change NUM in line 23 to see the effects.","likes":21,"published":3,"flags":0,"usePreview":0,"tags":["performance","gpu","reguster"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2019 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// Shows how register allocation can kill GPU parallelism, even if the amount of computations\n// are the same and the same number of registers are touched. This is the performance I get in\n// my laptop as a function of the buffer size NUM: \n//\n// NUM     fps\n//\n//  128    120\n//  192    108\n//  224     98\n//  256     85\n//  384     60\n//  448     52\n//  512     45\n//  768     31\n// 1024     24\n// 2048     12\n\n#define NUM 256   // change this\n\nvec4 data[NUM];\n    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int id = (int(fragCoord.x) + iFrame) % NUM;\n\n    data[0    ] = vec4(sin(iTime+0.0), 0.0, 0.0, 1.0 );\n\tdata[id   ] = vec4(0.0, sin(iTime+2.0), 0.0, 1.0 );\n\tdata[NUM-1] = vec4(0.0, 0.0, sin(iTime+4.0), 1.0 );\n    \n    fragColor = data[0] + data[id] + data[NUM-1];\n}","name":"Image","description":"","type":"image"}]}