{"ver":"0.1","info":{"id":"lXVSzd","date":"1720393629","viewed":55,"name":"CA GI Bounce Lighting     ","username":"DerEchteKarsten","description":"CA test\n","likes":1,"published":1,"flags":48,"usePreview":0,"tags":["ca"],"hasliked":0,"parentid":"tscGRB","parentname":"Cellular Automata with Diffusion"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define AGX_LOOK 0\n\n// Mean error^2: 3.6705141e-06\nvec3 agxDefaultContrastApprox(vec3 x) {\n  vec3 x2 = x * x;\n  vec3 x4 = x2 * x2;\n  \n  return + 15.5     * x4 * x2\n         - 40.14    * x4 * x\n         + 31.96    * x4\n         - 6.868    * x2 * x\n         + 0.4298   * x2\n         + 0.1191   * x\n         - 0.00232;\n}\n\nvec3 agx(vec3 val) {\n  const mat3 agx_mat = mat3(\n    0.842479062253094, 0.0423282422610123, 0.0423756549057051,\n    0.0784335999999992,  0.878468636469772,  0.0784336,\n    0.0792237451477643, 0.0791661274605434, 0.879142973793104);\n    \n  const float min_ev = -12.47393f;\n  const float max_ev = 4.026069f;\n\n  // Input transform (inset)\n  val = agx_mat * val;\n  \n  // Log2 space encoding\n  val = clamp(log2(val), min_ev, max_ev);\n  val = (val - min_ev) / (max_ev - min_ev);\n  \n  // Apply sigmoid function approximation\n  val = agxDefaultContrastApprox(val);\n\n  return val;\n}\n\nvec3 agxEotf(vec3 val) {\n  const mat3 agx_mat_inv = mat3(\n    1.19687900512017, -0.0528968517574562, -0.0529716355144438,\n    -0.0980208811401368, 1.15190312990417, -0.0980434501171241,\n    -0.0990297440797205, -0.0989611768448433, 1.15107367264116);\n    \n  // Inverse input transform (outset)\n  val = agx_mat_inv * val;\n  \n  // sRGB IEC 61966-2-1 2.2 Exponent Reference EOTF Display\n  // NOTE: We're linearizing the output here. Comment/adjust when\n  // *not* using a sRGB render target\n  val = pow(val, vec3(2.2));\n\n  return val;\n}\n\nvec3 agxLook(vec3 val) {\n  const vec3 lw = vec3(0.2126, 0.7152, 0.0722);\n  float luma = dot(val, lw);\n  \n  // Default\n  vec3 offset = vec3(0.0);\n  vec3 slope = vec3(1.0);\n  vec3 power = vec3(1.0);\n  float sat = 1.0;\n \n#if AGX_LOOK == 1\n  // Golden\n  slope = vec3(1.0, 0.9, 0.5);\n  power = vec3(0.8);\n  sat = 0.8;\n#elif AGX_LOOK == 2\n  // Punchy\n  slope = vec3(1.0);\n  power = vec3(1.35, 1.35, 1.35);\n  sat = 1.4;\n#endif\n  \n  // ASC CDL\n  val = pow(val * slope + offset, power);\n  return luma + sat * (val - luma);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Output to screen\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 val = texture(iChannel0, uv);\n\n    vec3 color;\n    if(val.r < 0.0 || val.g < 0.0 || val.b < 0.0 || val.a < 0.0) {\n        color = vec3(0.8, 0.8, 0.8); \n    }else {\n        color = vec3((val.r + val.g + val.b + val.a)/4.0);\n    }\n    color = agx(color);\n    color = agxLook(color);\n    color = agxEotf(color);\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec4 nearby(vec2 fragCoord, ivec2 offset, inout ivec4 samples) {\n    vec2 position = (fragCoord / 8.0) + vec2(offset);\n    if (position.x > iResolution.x / 4.0 || position.y > iResolution.y / 4.0 || position.x < 0.0 || position.y < 0.0) {\n        return vec4(0.0);\n    }\n    //vec2 uv = position / iResolution.xy;\n    vec4 val = texelFetch(iChannel0, ivec2(position), 0);\n    if(val.r > 0.0) {\n        samples.r++;\n    }\n    if(val.g > 0.0) {\n        samples.g++;\n    }\n    if(val.b > 0.0) {\n        samples.b++;\n    }\n    if(val.a > 0.0) {\n        samples.a++;\n    }\n    return max(val, 0.0);\n}\n\nfloat average(vec2 fragCoord, ivec2 main, ivec2 side1, ivec2 side2, int layer) {\n    ivec4 mainsamples = ivec4(0);\n    float mainval = nearby(fragCoord, main, mainsamples)[layer];\n    ivec4 currentsamples = ivec4(0);\n    float currentval = nearby(fragCoord, ivec2(0,0), currentsamples)[layer];\n    ivec4 side1samples = ivec4(0);\n    float side1val = nearby(fragCoord, side1, side1samples)[layer];\n    ivec4 side2samples = ivec4(0);\n    float side2val = nearby(fragCoord, side2, side2samples)[layer];\n    \n    return (mainval + side1val + side2val + currentval) / float(mainsamples[layer] + side1samples[layer] + side2samples[layer] + currentsamples[layer]);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec4 val = texture(iChannel0, uv / 8.0);\n    if(val.r < 0.0 || val.g < 0.0 || val.b < 0.0 || val.a < 0.0) {\n        fragColor = val;\n    }else {\n        float top = average(fragCoord, ivec2(0, 1), ivec2(-1, 1), ivec2(1, 1), 3);\n        float left = average(fragCoord, ivec2(-1, 0), ivec2(-1, 1), ivec2(-1, -1), 2);\n        float right = average(fragCoord, ivec2(1, 0), ivec2(1, -1), ivec2(1, 1), 1);\n        float bottom = average(fragCoord, ivec2(0, -1), ivec2(-1, -1), ivec2(1, -1), 0);\n\n        vec4 sum = vec4(top, left, right, bottom);\n\n        fragColor = sum;\n    }\n    fragColor = val;\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"bool draw = false;\nconst float REFLECTANCE = 0.8;\nconst float FALLOFF = 1.12;\nconst float ANGFALLOFF = 1.3;\nconst float SIDEFALLOFF = 0.0;\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"bvec4 nearbycollision(vec2 fragCoord, ivec2 offset) {\n    vec2 position = fragCoord + vec2(offset);\n    if (position.x > iResolution.x || position.y > iResolution.y || position.x < 0.0 || position.y < 0.0) {\n        return bvec4(true);\n    }\n    \n    vec4 val = texelFetch(iChannel0, ivec2(position), 0);\n    bvec4 col = bvec4(false);\n    if(val.r < 0.0) {\n        col.r = true;\n    }\n    if(val.g < 0.0) {\n        col.g = true;\n    }\n    if(val.b < 0.0) {\n        col.b = true;\n    }\n    if(val.a < 0.0) {\n        col.a = true;\n    }\n    return col;\n}\n\n\nconst float STREIGHT = 0.5;\nconst float SIDE = 0.25;\n\nvec4 nearby(vec2 fragCoord, ivec2 offset) {\n    vec2 position = fragCoord + vec2(offset);\n    if (position.x > iResolution.x / 4.0 || position.y > iResolution.y / 4.0 || position.x < 0.0 || position.y < 0.0) {\n        return vec4(0.0);\n    }\n    //vec2 uv = position / iResolution.xy;\n    vec4 val = texelFetch(iChannel0, ivec2(position), 0);\n    return max(val, vec4(0.0));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if(fragCoord.x == 0.0 || fragCoord.y == 0.0) {\n        fragColor = vec4(1.0);\n        return;\n    }\n    vec2 uv = fragCoord/iResolution.xy;\n\n    bool mouseDown = false;\n    if(length(abs(iMouse.xy / 8.0-fragCoord)) < 1.0) {\n        if (iMouse.z > 0.0) {\n            mouseDown = true;\n        }\n        if(texelFetch(iChannel2, ivec2(32, 0), 0).r == 1.0) {\n            draw = true;\n        }else {\n            draw = false;\n        }\n    }\n\n    vec4 next = vec4(0.0);   \n    vec4 last = texture(iChannel0, uv);\n    \n    if(mouseDown) {\n        if(draw) {\n            next = vec4(-1.0);\n        }else {\n            next = vec4(last.a < 0.0 ? 0.0 : 1000.0, 0.0, 0.0, 0.0);        \n        }\n    } else if(iFrame == 0) {\n        next = vec4(0.0);\n    }else{\n        vec4 bottomleft = nearby(fragCoord, ivec2(-1,-1));\n        vec4 bottomright = nearby(fragCoord, ivec2(1,-1));\n        vec4 bottom = nearby(fragCoord, ivec2(0,-1));\n        vec4 topright = nearby(fragCoord, ivec2(1,1));\n        vec4 top = nearby(fragCoord, ivec2(0,1));\n        vec4 topleft = nearby(fragCoord, ivec2(-1,1));\n        vec4 right = nearby(fragCoord, ivec2(1,0));\n        vec4 left = nearby(fragCoord, ivec2(-1, 0));\n                \n        next.r = max(max(bottom.r / FALLOFF, max(bottomleft.r, bottomright.r) / ANGFALLOFF), max(left.r,right.r) * SIDEFALLOFF);\n        next.g = max(max(right.g / FALLOFF, max(topright.g, bottomright.g) / ANGFALLOFF), max(top.g,bottom.g) * SIDEFALLOFF);\n        next.b = max(max(left.b / FALLOFF, max(topleft.b, bottomleft.b) / ANGFALLOFF), max(top.b,bottom.b) * SIDEFALLOFF);\n        next.a = max(max(top.a / FALLOFF, max(topleft.a, topright.a) / ANGFALLOFF), max(left.a,right.a) * SIDEFALLOFF);\n        \n                \n        vec4 reflected_light = vec4(0);\n        int num_reflect = 0;\n        if(nearbycollision(fragCoord, ivec2(0, 1)).r) {\n            reflected_light.a = next.r * REFLECTANCE;\n            num_reflect++;\n        }\n        if(nearbycollision(fragCoord, ivec2(0, -1)).a) {\n            reflected_light.r = next.a * REFLECTANCE;\n            num_reflect++;\n        }\n        if(nearbycollision(fragCoord, ivec2(-1, 0)).g) {\n            reflected_light.b = next.g * REFLECTANCE;\n            num_reflect++;\n        }\n        if(nearbycollision(fragCoord, ivec2(1, 0)).b) {\n            reflected_light.g = next.b * REFLECTANCE;\n            num_reflect++;\n        }\n        if(num_reflect != 0) {\n            next += reflected_light / float(num_reflect);\n        }\n        \n        if(last.r < 0.0) {\n            next.r = -1.0;\n        }\n        if(last.g < 0.0) {\n            next.g = -1.0;\n        }\n        if(last.b < 0.0) {\n            next.b = -1.0;\n        }\n        if(last.a < 0.0) {\n            next.a = -1.0;\n        }\n    }\n    \n    \n    // Output to screen\n    fragColor = next;\n}","name":"Buffer B","description":"","type":"buffer"}]}