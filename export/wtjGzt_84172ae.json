{"ver":"0.1","info":{"id":"wtjGzt","date":"1560792314","viewed":1985,"name":"antialiasing fract","username":"FabriceNeyret2","description":"left: fract discontinuity creates aliasing.\ntop right: A simple way to get rid of it is to replace the step by a 1 pixel slope, using fwidth.\n\nbottom: if fract is just used for bars (instead of ramps), just use smooth squares thank to simple shift.","likes":44,"published":3,"flags":0,"usePreview":0,"tags":["antialiasing","fract","tuto","short"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Self-ref: https://www.shadertoy.com/view/wtjGzt\n\n// Dealing with antialiasing of 2 use-case of fract: ramps and bars\n\n// See also a more complete version here: https://www.shadertoy.com/view/3tSGWy\n// adding the filtering of high frequencies.\n\nfloat aafract(float x) {    // --- antialiased fract\n    float v = fract(x),\n          w = fwidth(x);    // NB: x must not be discontinuous or factor discont out\n    return v < 1.-w ? v/(1.-w) : (1.-v)/w; // replace right step by down slope (-> chainsaw is continuous).\n            // shortened slope : added downslope near v=1 \n}\nfloat aastep(float x) {     // --- antialiased step(.5)\n    float w = fwidth(x);    // pixel width. NB: x must not be discontinuous or factor discont out\n    return smoothstep(.7,-.7,(abs(fract(x-.25)-.5)-.25)/w); // just use (offseted) smooth squares\n}\n\nvoid mainImage( out vec4 O, in vec2 u )\n{\n    vec2 R = iResolution.xy,\n         U = ( u - .5*R ) / R.y;            // normalized coordinates\n    float a = atan(U.y,U.x), l = length(U); // polar coordinates\n \n    float v = 20.*a/6.28 + 10.*l +iTime; // + sin(10.*l); // some fancy field\n\n    v = U.y > 0.\n            // top:  spiral displayed with ramps, using fract\n            ? U.x < 0. ? fract( v ) : aafract( v )\n            // bottom: spiral displayed with bars, using step(fract)\n            : U.x < 0. ? step(.5,fract(v)) : aastep(v);\n    \n    O = vec4( pow(v, 1./2.2) ); // final conversion to sRGB ( NB: sqrt(v) would be a good approx )\n    if ( abs(U.x) < 1./R.y ) O = vec4(1,0,0,0); // red separator\n}","name":"Image","description":"","type":"image"}]}