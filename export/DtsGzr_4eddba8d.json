{"ver":"0.1","info":{"id":"DtsGzr","date":"1671201538","viewed":76,"name":"Exposure checker","username":"scry","description":"Not exactly a histogram, but close enough that its usable to judge over/underexposure. The lump should be in the middle of the screen, to the left is underexposed, and to the right is overexposed. It gets pointier with ","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["graph","exposure","print"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = texture(iChannel0,uv).rgb;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define SAMPLE_RES 40\nfloat histogram(vec2 uv) {\n    int hr = SAMPLE_RES;\n    vec2 gp = vec2(0.);\n    vec3 col = vec3(0.);\n    \n    vec3 bak = texture(iChannel0,uv).rgb;\n    vec3 hg = vec3(0.);\n    float ht = 0.;\n    for (int i=0;i<hr;i++) {\n        vec2 ogp = gp;\n        for (int j=0;j<hr;j++) {\n            vec3 p = texture(iChannel0,gp).rgb;\n            float b = (p.x+p.y+p.z)/3.;\n            float t = (abs(uv.y)+abs(uv.x-b)*8.);\n            float da = pow(float(hr),2.);\n            ht += (uv.y/da)+(t/da/2.);\n            gp.y += 1./float(hr-1);\n            \n        }\n        gp = ogp;\n        gp.x += 1./float(hr-1);\n    }\n    col += step(abs((ht-2.)),0.01);\n    return col.r;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx*10.+vec3(0,2,4))+sin(iTime+uv.x*7.)*0.6;\n    col += histogram(uv);\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}