{"ver":"0.1","info":{"id":"lsBcWG","date":"1493539551","viewed":118,"name":"Julia Edit","username":"rodolphito","description":"All credit to Ebanflo, I just played around with it a bit.\n\nHit space to clear, drag mouse while it is forming to get different results.\n\nShameless rip from https://www.shadertoy.com/view/Md2cRd","likes":1,"published":1,"flags":48,"usePreview":0,"tags":["fractal","julia"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nconst float pi = 3.1415926535;\n\nvec4 getCol(vec3 n){ //smoother coloration\n    float s = 0.08 * (4.0-length(n.xy)) + n.z;\n    if (n.z>=50.0)return vec4(0);\n    float arg = pi * s / 20.;\n    vec3 col = sin(vec3(arg - pi / 2., arg - pi, arg - 3. * pi / 2.)) * 0.5 + 0.5;\n    return vec4(col*col, 1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 j = texture(iChannel0, uv).rgb;\n    fragColor = getCol(j);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const int it = 50;\n\nbool recursive = true;\n\nvec2 compSqr(vec2 c){\n    return vec2(c.x * c.x - c.y * c.y, 2. * c.y * c.x);\n}\n\n\nvec3 julia(vec2 xy, int iterations){\n    vec2 z = xy;\n    vec2 c = 2. * iMouse.xy / iResolution.xy - 1.;\n    if(iMouse.xy == vec2(0.) || length(c) < .1){\n        c = z;\n        z = vec2(0.);\n    }\n    for(int n = 0; n < iterations; n++){\n        z = compSqr(z);\n        z += c;\n        if(length(z) > 4.){\n        \treturn vec3(z, float(n));\n        }\n    }\n    return vec3(z, float(iterations));\n}\n\nvec3 juliaStep(vec2 xy, float t){\n    vec2 z = xy;\n    if(length(z) > 4.){\n        return vec3(z, t);\n    }\n    vec2 c = 2. * iMouse.xy / iResolution.xy - 1.;\n    z = compSqr(z);\n    z += c;\n    return vec3(z, t+1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 xy = 2. * uv - 1.;\n    xy.x *= iResolution.x / iResolution.y;\n    if (!recursive)\n    {\n    \tfragColor = vec4(julia(xy, it),1.0);\n    }\n    else\n    {\n    \tvec3 o = texture(iChannel0, uv).rgb;\n        if (iFrame % 600000 == 0 || o == vec3(0.0) || texture(iChannel1,vec2(32.5/256.0,0.5)).x > 0.5) o = vec3(xy,0.);\n        if (iFrame % 10 == 0) o = juliaStep(o.xy,o.z);\n    \tfragColor = vec4(o,1.0);\n    }\n}","name":"Buf A","description":"","type":"buffer"}]}