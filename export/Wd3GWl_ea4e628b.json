{"ver":"0.1","info":{"id":"Wd3GWl","date":"1569437095","viewed":169,"name":"rainbow gears","username":"sushila","description":"just playing around while learning glsl.\n\nThanks to FabriceNeyret2 for the suggestions.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["2d","learning"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = ( fragCoord -.5 * iResolution.xy ) / iResolution.y;\n    \n    // shift over time\n    uv += iTime*0.1;\n    \n    // Divide into grid\n    float gridSize = 3.;\n    \n    // Magick?\n    //float px = 0.01;\n    float px = 1.5*gridSize/iResolution.y;\n    \n    // grid uv is fractional part of uv\n    vec2 gv = fract(uv*gridSize)-0.5;\n    // grid id is integer part of uv\n    vec2 id = floor(uv*gridSize);\n    \n\t// start with black and add color where appropriate\n    vec3 col = vec3(0);\n    \n    // loop over neighboring grid areas to draw overlapping/intermeshing gears\n    for (int x = -1; x <= 1; x++) {\n        for ( int y = -1; y <= 1; y++) {\n            vec2 offs = vec2(x, y);\n            // Distance to center of grid\n            float cd = length(gv+offs);\n            // angle relative to center of grid\n            float a = atan(gv.y+offs.y, gv.x+offs.x);\n           \n            // Alternate rotation direction by grid id\n            float dir = (mod(id.x+id.y+offs.x+offs.y, 2.)-0.5)*2.;\n\n            \n            // gear shape - radius as a function of angle, direction, and time\n            float ra = 0.495+0.1*clamp(sin(10.*a+dir*5.*iTime), -.4, .5);\n            float mask = 0.9 * smoothstep(ra+px, ra-px, cd);\n            \n            // remove center\n            mask -= smoothstep(0.2+px, 0.2-px, cd);\n            \n            // get color for grid - not sure why this needs to be minus offs??\n            vec3 icol = (0.5 + 0.5*cos((id.xyx-offs.xyx)/2.+vec3(0,2,4)));\n            // add color with mask\n            col += mask * icol;\n        }\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}