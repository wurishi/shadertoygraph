{"ver":"0.1","info":{"id":"cddGDr","date":"1677232077","viewed":100,"name":"TP1- LifGraphique","username":"salma","description":".","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["tp1"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Modeling - 2023.02.06\n// Salma Ahizoune\n\n// Rotation matrix around z axis\n// a : Angle\nmat3 Rz(float a)\n{\n  float sa=sin(a);float ca=cos(a);\n  return mat3(ca,sa,0.,-sa,ca,0.,0.,0.,1.);\n}\n\n// Compute the ray\n//      m : Mouse position\n//      p : Pixel\n// ro, rd : Ray origin and direction\nvoid Ray(vec2 m,vec2 p,out vec3 ro,out vec3 rd)\n{\n  float a=3.*3.14*m.x;\n  float le=3.5;\n  \n  // Origin\n  ro=vec3(60.,0.,50.);\n  ro*=Rz(a);\n  \n  // Target point\n  vec3 ta=vec3(0.,0.,1.);\n  \n  // Orthonormal frame\n  vec3 w=normalize(ta-ro);\n  vec3 u=normalize(cross(w,vec3(0.,0.,1.)));\n  vec3 v=normalize(cross(u,w));\n  rd=normalize(p.x*u+p.y*v+le*w);\n}\n\n\n\n// Primitives\n\n// Sphere\n// p : point\n// c : center of skeleton\n// r : radius\nfloat Sphere(vec3 p,vec3 c,float r)\n{\n  return length(p-c)-r;\n}\n\n\n\n//plan\n// p : point\n// c : center of skeleton\n// r : radius\n// n : normale\n\nfloat Plan(vec3 p, vec3 o, vec3 n)\n{\n  n = normalize(n);\n  return(dot(p-o, n));\n}\n\n\n\n// Operators\n\n\n// Union\n// a,b : field function of left and right sub-trees\nfloat Union(float a,float b)\n{\n  return min(a,b);\n}\n\n\n/// Segment\n// p : point\n// a,b\nfloat Segment(vec3 p, vec3 a, vec3 b) {\n    vec3 ba = b - a;\n    vec3 pa = p - a;\n    float t = dot(pa, ba) / dot(ba, ba);\n    vec3 c = ba * clamp(t, 0.0, 1.0);\n    return length(pa - c);\n}\n\n\n\n//cube \n// p : point\n// c : center of skeleton\n// r\n\nfloat Cube(vec3 p, vec3 c, float r)\n{\n  vec3 p1 = c + vec3(r,0,0);\n  vec3 p2 = c + vec3(-r,0,0);\n  vec3 p3 = c + vec3(0,r,0);\n  vec3 p4 = c + vec3(0,-r,0);\n  vec3 p5 = c + vec3(0,0,r);\n  vec3 p6 = c + vec3(0,0,-r);\n  float plan1 = Plan(p, p1, vec3(1.0,0,0));\n  float plan2 = Plan(p, p2, vec3(-1.0,0,0));\n  float plan3 = Plan(p, p3, vec3(0,1.0,0));\n  float plan4 = Plan(p, p4, vec3(0,-1.0,0));\n  float plan5 = Plan(p, p5, vec3(0,0,1.0));\n  float plan6 = Plan(p, p6, vec3(0,0,-1.0));\n  \n  float v = max(plan6,\n            max(plan5,\n            max(plan4,\n            max(plan3,\n            max(plan1, plan2)))));\n  \n  return v;\n  \n}\n\n\n/// Demi Sphere\n// p : point\n// c : centre\n// r : rayon\n// n : normale\nfloat DemiSphere(vec3 p, vec3 c, float r, vec3 n) {\n    float s = Sphere(p, c, r);\n    float pl = Plan(p, c, n);\n    return max(s, pl);\n}\n\n\n/// Capsule\n// p : point\n// a\n// r : rayon\n\nfloat Capsule(vec3 p, vec3 a, vec3 b, float r) {\n\n    return Segment(p, a, b) - r;\n}\n\n\n \n\n/// Cylindre\n// p : point\n// c : centre\n// r : rayon\n\nfloat Cylindre(vec3 p, vec3 a, vec3 b, float r) {\n\n    float v = max(Capsule(p, a, b, r),\n                  -dot(p-b, normalize(a-b)));\n\n    v = max(v, -dot(p-a, normalize(b-a)));\n    return v;\n}\n\n\n\n\n//tore\n// p :\n// r\nfloat tore(vec3 p , vec2 r ){\n    float x =length(p.xz)-r.x;\n    return length(vec2(x,p.y))-r.y;\n}\n\n\n//boite\n// epy : epaisseur y\n// epx : epaisseur x\n// epz : epaisseur z\n// c: centre de la boite\nfloat boite(vec3 p, vec3 c, float r, float epx, float epy, float epz)\n{\n  vec3 p1 = c + vec3(r+epx,0,0);\n  vec3 p2 = c + vec3(-r-epx,0,0);\n  vec3 p3 = c + vec3(0,r+epy,0);\n  vec3 p4 = c + vec3(0,-r-epy,0);\n  vec3 p5 = c + vec3(0,0,r+epz);\n  vec3 p6 = c + vec3(0,0,-r-epz);\n  float plan1 = Plan(p, p1, vec3(1.,0,0));\n  float plan2 = Plan(p, p2, vec3(-1.,0,0));\n  float plan3 = Plan(p, p3, vec3(0,1.,0));\n  float plan4 = Plan(p, p4, vec3(0,-1.,0));\n  float plan5 = Plan(p, p5, vec3(0,0,1.));\n  float plan6 = Plan(p, p6, vec3(0,0,-1.));\n  \n  float v = max(plan6,\n            max(plan5,\n            max(plan4,\n            max(plan3,\n            max(plan1, plan2)))));\n  \n  return v;\n  \n}\n\n//colonne\n//h : hauteur de la demi sphere\nfloat colonne(vec3 p, vec3 a, vec3 b, float r, float h){\n  \n  float v = Cylindre(p, a+vec3(0,0,h), b+vec3(0,0,-h), r);\n  \n  float v1 = Cylindre(p, a + vec3(0,0.5,h), b + vec3(0,0.5,-h), r*0.55);\n  float v2 = Cylindre(p, a + vec3(0,-0.5,h), b + vec3(0,-0.5,-h), r*0.55);\n\n  float v3 = max(max(v,-v1),-v2);\n  \n  float v4 = DemiSphere(p, a + vec3(0,0,-a.z-h), r*1.2, vec3(0,0,-1));\n  \n  float v5 = DemiSphere(p, a + vec3(0,0,h), r*1.2, vec3(0,0,1));\n  \n  float v10 = Union(Union(v3, v4),v5);\n  \n  \n  \n  return v10;\n}\n\n\n//piliers\nfloat piliers(vec3 p, vec3 a, vec3 b, float r, float h, float lar){\n  \n  float v = Union(colonne(p, a + vec3 (lar,-lar,-h), b + vec3 (lar,-lar,0), r,h),\n      Union(colonne(p, a + vec3 (-lar,lar,-h), b + vec3 (-lar,lar,0), r, h),\n      Union(colonne(p, a + vec3 (-lar,-lar,-h), b + vec3 (-lar,-lar,0), r, h),\n      colonne(p, a+vec3(lar,lar,-h), b+vec3(lar,lar,0), r, h)\n      )));\n  return v;\n}\n\n\n//temple\n// lar : longueur du temple\n// h : hauteur du temple\nfloat temple(vec3 p, float h, float lar){\n    float v1, v2, v3, v4, v5, v6, v7;\n  \n      \n      v1 = Plan(p, vec3(0,0,-5), vec3(0, 0, 10));\n      \n      v2 = Union(Union(Union(\n              Capsule(p,vec3(-lar,-lar,h-0.5),vec3(lar,-lar,h-0.5),1.), \n              Capsule(p,vec3(lar,lar,h-0.5),vec3(lar,-lar,h-0.5),1.)),\n              Capsule(p,vec3(-lar,lar,h-0.5),vec3(-lar,-lar,h-0.5),1.)),\n              Capsule(p,vec3(-lar,lar,h-0.5),vec3(lar,lar,h-0.5),1.));\n      \n      v3 = piliers(p, vec3(0,0,h-1.), vec3(0,0,-h-1.), 1., h, lar);\n      \n      v4 = Union(v3,v1); //piliers et plan\n      \n      v5 = boite(p,vec3(0,0,h-0.5), 3., lar, lar, -2.8); //\n      \n      v6 = Union(v5,v4); //toit, piliers et plan\n      \n      v7 = DemiSphere(p, vec3(0,0,h), lar, vec3(0,0,-1));\n  \n  return Union(v2,Union(v7,v6));\n}\n\n\n\n\n//pyramide base carre\n// h : hauteur \n// \nfloat pyramide (vec3 p, vec3 o, float h, float epx, float epy, float epz)\n{\n    float v = max(Plan(p,o, vec3(0., h, dot(h, epx))), \n              max(Plan(p,o, vec3(0., -h, dot(h, epx))),\n              max(Plan(p,o, vec3(h, 0., dot(h, epy))),\n              max(Plan(p,o, vec3(-h, 0., dot(h, epy))),\n                  Plan(p, vec3(0, 0, epz),vec3(0, 0, -1))))));\n              \n    return v;\n}\n\n\n\n//maison\n// h : hauteur maison\nfloat maison(vec3 p, float h){\n\n    \n    float v = max(max(boite(p, vec3(0,0,0), 3., 3., 3., h),\n                     -boite(p, vec3(0,0,0), 3., 2., 2., h*0.7)),\n                     -boite(p, vec3(0,1,0), h*0.38, 0.3, 2., h*0.5));\n    \n    float final = max(v, -boite(p, vec3(2,0,6), 3., 2., 1., 1.));    \n    \n    return final;\n}\n\n\nfloat maison01(vec3 p, float h, float epx, float epy){\n    float v = max(max(boite(p, vec3(0,0,0), 4., 10., 3., h),\n                     -boite(p, vec3(0,0,0), 4., 9., 2., h*0.1)),\n                     -boite(p, vec3(0,3,0), 4., 0.5, 2., h*0.3));\n    \n    float toit = pyramide(p, vec3(0,0,h*3.5), h, epx, epy, h);\n    \n    float v1 = max(v, -boite(p, vec3(-1,0,6), 4., 10., 1., 1.));    \n   \n   \n    float final = Union(v1, toit);\n    \n    return final;\n}\n\n\nfloat Village(vec3 p){\n\n   float maison1 = maison01(p+vec3(-20, -10, 0), 6., 0.65, 1.3);\n   \n   float temple1 = temple(p+vec3(10, 10, 0), 15., 8.);\n   \n   float test = maison(p+vec3(20,-20,0), 8.);\n   \n   float v = Union(Union(maison1, temple1), test);\n  \n   return v;\n}\n\n\n/*\n//fontaine 1\nfloat fontaine1(vec3 p){\n  float coupe = max(DemiSphere(p, vec3(10,-5,0), 3., vec3(0,0,2)),\n                    -DemiSphere(p, vec3(10,-5,0), 2.9, vec3(0,0,1)));\n                    \n  float pilier = Cylindre(p, vec3(10,-5,-2), vec3(10,-5,-10), 0.5);\n                    \n  return Union(coupe,pilier);\n}\n*/\n\n\n// Potential field of the object\n// p : point\nfloat object(vec3 p)\n{\n      float plan = Plan(p, vec3(0,0,-5), vec3(0, 0, 10));\n      \n      float temple = temple(p, 7., 3.); \n      \n      \n      //float fontaine = Union(Union(fontaine1(p),plan),fontaine2(p));\n      \n      boite(p,vec3(0,0,0), 1., 4., 3. ,5.);\n      \n      float maison1 = Union(plan, maison(p, 6.));\n      \n      float vi = Village(p);\n      \n      return vi;\n}\n\n\n\n\n\n\n\n// Analysis of the scalar field\n\nconst int Steps=200;// Number of steps\nconst float Epsilon=.01;// Marching epsilon\n\n\n\n// Object normal\n// p : point\nvec3 ObjectNormal(vec3 p)\n{\n  const float eps=.001;\n  vec3 n;\n  float v=object(p);\n  n.x=object(vec3(p.x+eps,p.y,p.z))-v;\n  n.y=object(vec3(p.x,p.y+eps,p.z))-v;\n  n.z=object(vec3(p.x,p.y,p.z+eps))-v;\n  return normalize(n);\n}\n\n\n\n// Trace ray using ray marching\n// o : ray origin\n// u : ray direction\n// e : Maximum distance\n// h : hit\n// s : Number of steps\nfloat SphereTrace(vec3 o,vec3 u,float e,out bool h,out int s)\n{\n  h=false;\n  \n  // Start at the origin\n  float t=0.;\n  \n  for(int i=0;i<Steps;i++)\n  {\n    s=i;\n    vec3 p=o+t*u;\n    float v=object(p);\n    // Hit object\n    if(v<0.)\n    {\n      h=true;\n      break;\n    }\n    // Move along ray\n    t+=max(Epsilon,v);\n    // Escape marched too far away\n    if(t>e)\n    {\n      break;\n    }\n  }\n  return t;\n}\n\n// Lighting\n\n// Background color\n// d : Ray direction\nvec3 background(vec3 d)\n{\n  return mix(vec3(.45,.55,.99),vec3(.65,.69,.99),d.z*.5+.5);\n}\n\n// Shadowing\n// p : Point\n// n : Normal\n// l : Light direction\nfloat Shadow(vec3 p,vec3 n,vec3 l)\n{\n  bool h;\n  int s;\n  float t=SphereTrace(p+Epsilon*n,l,100.,h,s);\n  if(!h)\n  {\n    return 1.;\n  }\n  return 0.;\n}\n\n// Shading and lighting\n// p : Point\n// n : Normal at point\n// e : Eye direction\nvec3 Shade(vec3 p,vec3 n,vec3 e)\n{\n  // Point light\n  const vec3 lp=vec3(5.,10.,25.);\n  \n  // Light direction to point light\n  vec3 l=normalize(lp-p);\n  \n  // Ambient color\n  vec3 ambient=.25+.25*background(n);\n  \n  // Shadow computation\n  float shadow=Shadow(p,n,l);\n  \n  // Phong diffuse\n  vec3 diffuse=.35*clamp(dot(n,l),0.,1.)*vec3(1.,1.,1.);\n  \n  // Specular\n  vec3 r=reflect(e,n);\n  vec3 specular=.15*pow(clamp(dot(r,l),0.,1.),35.)*vec3(1.,1.,1.);\n  vec3 c=ambient+shadow*(diffuse+specular);\n  return c;\n}\n\n// Shading according to the number of steps in sphere tracing\n// n : Number of steps\nvec3 ShadeSteps(int n)\n{\n  float t=float(n)/(float(Steps-1));\n  return.5+mix(vec3(.05,.05,.5),vec3(.65,.39,.65),t);\n}\n\n// Picture in picture\n// pixel : Pixel\n// pip : Boolean, true if pixel was in sub-picture zone\nvec2 Pip(in vec2 pixel,out bool pip)\n{\n  // Pixel coordinates\n  vec2 p=(-iResolution.xy+2.*pixel)/iResolution.y;\n  if(pip==true)\n  {\n    const float fraction=1./4.;\n    // Recompute pixel coordinates in sub-picture\n    if((pixel.x<iResolution.x*fraction)&&(pixel.y<iResolution.y*fraction))\n    {\n      p=(-iResolution.xy*fraction+2.*pixel)/(iResolution.y*fraction);\n      pip=true;\n    }\n    else\n    {\n      pip=false;\n    }\n  }\n  return p;\n}\n\n// Image\nvoid mainImage(out vec4 color,in vec2 pxy)\n{\n  // Picture in picture on\n  bool pip=true;\n  \n  // Pixel\n  vec2 pixel=Pip(pxy,pip);\n  \n  // Mouse\n  vec2 m=iMouse.xy/iResolution.xy;\n  \n  // Camera\n  vec3 ro,rd;\n  Ray(m,pixel,ro,rd);\n  \n  // Trace ray\n  \n  // Hit and number of steps\n  bool hit;\n  int s;\n  \n  float t=SphereTrace(ro,rd,100.,hit,s);\n  \n  // Shade background\n  vec3 rgb=background(rd);\n  \n  if(hit)\n  {\n    // Position\n    vec3 p=ro+t*rd;\n    \n    // Compute normal\n    vec3 n=ObjectNormal(p);\n    \n    // Shade object with light\n    rgb=Shade(p,n,rd);\n  }\n  \n  // Uncomment this line to shade image with false colors representing the number of steps\n  if(pip==true)\n  {\n    rgb=ShadeSteps(s);\n  }\n  \n  color=vec4(rgb,1.);\n}\n\n","name":"Image","description":"","type":"image"}]}