{"ver":"0.1","info":{"id":"MffBzj","date":"1724020778","viewed":37,"name":"Test perso","username":"Luxdum","description":"pero test from a yt tuto","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nmat2 rot2D(float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat2(c, -s, s, c);\n}\n\nfloat sdPlane(vec3 p, float d) {\n    return p.y + d;\n}\n\nfloat sdBox( vec3 p, vec3 b ) {\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat sdSphere(vec3 p, float r) {\n    return length(p) - r;\n}\n\nfloat map(vec3 p, float t) {\n    vec3 q = p;\n    q.z += iTime * .4;\n    q.xy *= rot2D(t * .2);\n    q.xy = fract(q.xy) - .5;\n    q.z = mod(q.z, .2) - .2;\n    \n    float time = t / (abs(sin(iTime) * 4.) + .4);\n    float radius = abs(fract(time) - .5) / 2. + .1;\n    float sphere = sdSphere(q, radius);\n    \n    vec3 bPos = p - vec3(0., 0., -1.5);\n    bPos.zy *= rot2D(iTime); // x rotation\n    bPos.xz *= rot2D(iTime); // y rotation\n    bPos.xy *= rot2D(iTime); // z rotation\n    \n    float box = sdBox(bPos, vec3(time / 4.));\n    \n    return min(sphere, box); \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Initialization\n    vec2 uv = (fragCoord * 2. - iResolution.xy) / iResolution.y;\n    \n    vec3 ro = vec3(0, 0, -3);\n    vec3 rd = normalize(vec3(uv, 1));\n    vec3 col = vec3(0);\n    \n    float t = 0.;\n    \n    // Raymarchin\n    int i = 0;\n    for (i = 0; i < 80; i++) {\n        vec3 p = ro + rd * t;\n        // p.xy += sin(t) * .45;\n        \n        float d = map(p, t);\n        \n        t += d;\n        if (d < .001 || d > 100.) break;\n    }\n        \n    // Calcul Output color\n    col = vec3(1., .3, .6) * t * .2 + float(i) * .01;\n    \n    // Output to screen\n    fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"}]}