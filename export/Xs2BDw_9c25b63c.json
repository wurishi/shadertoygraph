{"ver":"0.1","info":{"id":"Xs2BDw","date":"1651038503","viewed":136,"name":"Underwater Reef","username":"clayjohn","description":"Experiment in a coral reef scene while im on vacation. \n\nNote:Originally written on the flight home from my honeymoon, I never got around to finishing it.","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["noise","underwater","lut"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define MAXDISTANCE 4.0\n\nfloat noise(vec3 x) {\n        vec3 p = floor(x);\n    vec3 f = fract(x);\n\tf = f*f*(3.0-2.0*f);\n\tvec2 uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;\n\tvec2 rg = textureLod( iChannel0, (uv+0.5)/256.0, 0.0).yx;\n\treturn mix( rg.x, rg.y, f.z );\n}\n\nfloat terrain(vec3 x) {\n    return noise(x*2.0)*0.5+\n        noise(x*4.0)*0.25+\n        noise(x*8.0)*0.125+\n        noise(x*16.0)*0.06125+\n        noise(x*32.0)*0.036125;\n}\n\nfloat map(vec3 x) {\n    float density = (x.y*0.3+(terrain(x)-0.7)*(1.0-smoothstep(0.6, 1.0, x.y)));\n    //add floor\n    density = min(density, x.y+0.2);// (max(0.0,min( 1.0, (0.5-x.y)*1.0)));\n    return density;\n}\n\nfloat march(vec3 ro, vec3 rd )\n{\n\tfloat maxd = MAXDISTANCE;\n    float t = 0.1;\n    for( int i=0; i<160; i++ )\n    {\n\t    float h = map( ro+rd*t );\n        if( h<(0.001*t) || t>maxd ) break;\n        t += h*0.7;\n    }\n\n    if( t>maxd ) t=-1.0;\n    return t;\n}\n\n\n\nvec3 calcNormal( in vec3 pos, in float t )\n{\n    vec3 eps = vec3( max(0.02,0.001*t),0.0,0.0);\n\treturn normalize( vec3(\n           map(pos+eps.xyy) - map(pos-eps.xyy),\n           map(pos+eps.yxy) - map(pos-eps.yxy),\n           map(pos+eps.yyx) - map(pos-eps.yyx) ) );\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 ro = vec3(0.0, 1.5-map(vec3(0.0, 0.0, iTime)), iTime);\n    vec3 rd = normalize(vec3(uv*2.0-0.5-vec2(0.0, 0.7), 1.0));\n    float t = march(ro, rd);\n    vec3 col = vec3(0.0);\n    vec3 water = vec3(0.1, 0.5, 0.9);\n    if (t<0.0) {\n     col = water;   \n    } else {\n        vec3 pos = ro+rd*t;\n        col = calcNormal(pos, t);\n        col = mix(col, water, sqrt(t/MAXDISTANCE));\n        vec2 texuv = pos.xz*0.3;\n        col += texture(iChannel1, fract(texuv)).xxx*0.6; \n    }\n\tfragColor = vec4(col,1.0);\n    //fragColor = texture(iChannel1, uv);\n\t//fragColor.xyz = vec3(uv*2.0-0.5, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//from https://www.shadertoy.com/view/4djGRh\n// Dave Hoskins 'Tileable Cells'\n#define NUM_CELLS\t16.0\t// Needs to be a multiple of TILES!\n#define TILES \t\t1.0\t\t// Normally set to 1.0 for a creating a tileable texture.\n\n#define SHOW_TILING\t\t\t// Display yellow lines at tiling locations.\n#define ANIMATE\t\t\t// Basic movement using texture values.\n\n//------------------------------------------------------------------------\nvec2 Hash2(vec2 p)\n{\n\t#ifdef ANIMATE\n\t\n\tfloat t = fract(iTime*.0006);\n\treturn texture(iChannel0, p*vec2(.135+t, .2325-t), -100.0).xy;\n\t\n\t#else\n\t\n\tfloat r = 523.0*sin(dot(p, vec2(53.3158, 43.6143)));\n\treturn vec2(fract(15.32354 * r), fract(17.25865 * r));\n\t\n\t#endif\n}\n\n//------------------------------------------------------------------------\nfloat Cells(in vec2 p, in float numCells)\n{\n\tp *= numCells;\n\tfloat d = 1.0e10;\n\tfor (int xo = -1; xo <= 1; xo++)\n\t{\n\t\tfor (int yo = -1; yo <= 1; yo++)\n\t\t{\n\t\t\tvec2 tp = floor(p) + vec2(xo, yo);\n\t\t\ttp = p - tp - Hash2(mod(tp, numCells / TILES));\n\t\t\td = min(d, dot(tp, tp));\n\t\t}\n\t}\n\treturn sqrt(d);\n\t//return 1.0 - d;// ...Bubbles.\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0,1.0,1.0,1.0);\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor.xyz = vec3(Cells(uv+iTime*.05, NUM_CELLS));\n}","name":"Buffer A","description":"","type":"buffer"}]}