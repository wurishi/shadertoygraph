{"ver":"0.1","info":{"id":"wlyXDh","date":"1582585582","viewed":328,"name":"Simple Gear Monochromatic","username":"Istalri","description":"A simple gear shader. If you have any advice, feel free to comment. ","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["gears","white","gear","shape","black","primitive","student"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//properties\nfloat sphereSize = 0.5;\nfloat innerRadius = 0.1;\nfloat gearCenterSize = 0.1;\nfloat theetSize = 0.2;\nfloat theetNumber = 10.0;\nfloat squareSize = 0.04;\nfloat speed = -1.0;\nfloat padding = 0.005;\nfloat backgroundIntensity = 0.1;\nfloat pi = 3.14159265359;\nfloat degToRad = 0.01745329251;\n\n// Make a rotation matrice from an angle in radians\nmat2x2 Rotation(float angle)\n{\n    mat2x2 rot = mat2x2(cos(angle), -sin(angle),\n                        sin(angle), cos(angle));\n    return rot;\n}\n\n//Create a square shape and center it in the center of the screen\nfloat Square(vec2 squareUV, vec2 offset, float sizeX, float sizeY, float rotation)\n{\n    float screenRatio = iResolution.x / iResolution.y;\n    mat2x2 rot = Rotation(rotation);\n    \n    squareUV -= vec2(screenRatio * 0.5,0.5);\n    squareUV = rot * squareUV;\n    squareUV += vec2(screenRatio * 0.5,0.5);\n    \n    squareUV -= offset;\n    squareUV = abs(squareUV - vec2(screenRatio *0.5,0.5));\n        \n    return smoothstep(sizeX + padding , sizeX, squareUV.x) * smoothstep(sizeY + padding , sizeY, squareUV.y);\n    //return clamp( min( sizeX - squareUV.x, sizeY - squareUV.y) / fwidth(squareUV.x) + 0.5, 0.0, 1.0);\n}\n\n//Create a sphere at the center of the screen\nfloat Sphere(float radius, vec2 sphericalUV)\n{\n    float sphere = length(sphericalUV);\n    return smoothstep(radius + padding,radius,sphere);\n}\n\n//Place a bunch of square around the center of the screen and orient them\nfloat Theet(float numberTheet, float offset, vec2 resizeUV, float squareSize)\n{\n    float square = 0.0;\n    for(int i = 0; i < int(numberTheet); i++)\n    {\n        float segment = 360.0 / numberTheet;\n        float rotation = segment * float(i);\n        rotation *= degToRad;\n        \n        square += Square(resizeUV, vec2(offset,0.0), squareSize, squareSize, rotation);\n    } \n    return square;\n}\n\n\nfloat Gear(vec2 uv, vec2 offset, float size, float speed, float numberTheet, float supportNumber, float theetSize, float timeOffset)\n{\n    float screenRatio = iResolution.x / iResolution.y;\n    \n    \n    //Make base UV  \n    uv *= size;\n    uv -= (size - 1.0) * 0.5;\n    \n    \n    vec2 sphericalUV = -1. + 2. * uv;        \n    vec2 resizeUV = uv;\n    resizeUV.x *= screenRatio;\n    sphericalUV.x *= screenRatio;\n    resizeUV -= offset * 0.5;\n\n    //Make uv Rotate\n    mat2x2 rot = Rotation((iTime + timeOffset) * speed);\n    resizeUV -= vec2(screenRatio * 0.5,0.5);\n    resizeUV = rot * resizeUV;\n    resizeUV += vec2(screenRatio * 0.5,0.5);\n    \n    sphericalUV -= offset;\n    \n    //Create two annulus, one for the exterior and one for the interior\n    float gearCenter = Sphere(gearCenterSize, sphericalUV);\n    float innerCircle = Sphere(sphereSize - innerRadius, sphericalUV);\n    float gearHole = Sphere(gearCenterSize * 0.5, sphericalUV);\n    float sphere = Sphere(sphereSize, sphericalUV);\n    sphere -= innerCircle;\n    sphere += gearCenter;\n    sphere -= gearHole * (supportNumber + 1.0) * 5.0;\n    \n    //Create Theets\n    float square = Theet(numberTheet, sphereSize * 0.5 + theetSize * 0.5, resizeUV, theetSize);\n    \n    //Add theets to the gear\n    float gear = square + sphere;\n    \n    //Add support line for the gear\n    float support = 0.0;\n    for(int i = 0; i < int(supportNumber); i++)\n    {\n        float segment = 180.0 / supportNumber;\n        support += Square(resizeUV, vec2(0.0,0.0), innerRadius * 0.2, sphereSize * 0.45, segment * float(i) * degToRad);\n    }\n    gear += support;    \n    \n    //Clamp the result between 0 and 1\n    gear = clamp(gear,0.0,1.0);\n    return gear;\n}\n\n\n//\n//Compute image\n//\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    //Base UV\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    float screenRatio = iResolution.x / iResolution.y;\n    \n    //Generate Gears and create a composition\n    //Composition 1\n    float gear = Gear(uv, vec2(0.0,0.0), 1.0, -1.0, theetNumber, 3.0, squareSize, 0.0);\n    //Composition 2\n    vec2 comp2Offset = vec2(1.3,-1.5);\n    float comp2Size = 1.6;\n    \n    gear += Gear(uv, vec2(0.0,0.0) + comp2Offset, 1.0 * comp2Size, -1.0, theetNumber, 1.0, squareSize, 0.0);\n    gear += Gear(uv, vec2(1.7,0.0) + comp2Offset * 2.0, 2.0 * comp2Size, 2.0, theetNumber * 0.5, 2.0, squareSize * 1.8, 0.0);\n    gear += Gear(uv, vec2(1.2,0.8) + comp2Offset, 1.0 * comp2Size, -1.0, theetNumber, 4.0, squareSize, 0.45);  \n    gear += Gear(uv, vec2(-1.7,0.0) + comp2Offset * 2.0, 2.0 * comp2Size, 2.0, theetNumber * 0.5, 2.0, squareSize * 1.8, 0.3); \n    \n    //Composition 3\n    vec2 comp3Offset = vec2(-2.5,1);\n    float comp3Size = 1.6;\n    \n    gear += Gear(uv, vec2(0.0,0.0) + comp3Offset, 1.0 * comp3Size, -1.0, theetNumber, 2.0, squareSize, 0.0);\n    gear += Gear(uv, vec2(-0.5,-1.66) + comp3Offset * 2.0, 2.0 * comp3Size, 2.0, theetNumber * 0.5, 3.0, squareSize * 2.0, 0.35);\n    gear += Gear(uv, vec2(1.45,0.95) + comp3Offset * 2.0, 2.0 * comp3Size, 2.0, theetNumber * 0.5, 1.0, squareSize * 2.0, 0.25);\n    gear += Gear(uv, vec2(2.65,0.95) + comp3Offset * 2.0, 2.0 * comp3Size, -2.0, theetNumber * 0.5, 4.0, squareSize * 2.0, 0.25);\n    \n    //Composition4\n    float background = 0.0;\n    int number = 4;\n    for(int i = 0; i < (number*number); i++)\n    {\n        vec2 comp4Offset = vec2(-0.55 + 2.2*float(i%number),0.55 + 2.2*float(i/number));\n        comp4Offset -= vec2(2.2*float(number-1),2.2*float(number-1))*0.5;\n        float comp4Size = 2.25;\n        \n        background += Gear(uv, vec2(0.0,0.0) + comp4Offset, 1.0 * comp4Size, -1.0, theetNumber, 1.0, squareSize, 0.0);\n        background += Gear(uv, vec2(0.0,-1.1) + comp4Offset, 1.0 * comp4Size, 1.0, theetNumber, 2.0, squareSize, 0.3);\n        background += Gear(uv, vec2(1.1,0.0) + comp4Offset, 1.0 * comp4Size, 1.0, theetNumber, 4.0, squareSize, 0.3);\n        background += Gear(uv, vec2(1.1,-1.1) + comp4Offset, 1.0 * comp4Size, -1.0, theetNumber, 3.0, squareSize, 0.0);\n    }\n    background = clamp(background, 0.0, 1.0);\n    \n    gear += background * backgroundIntensity;\n    gear = clamp(gear, 0.0, 1.0);\n    //Show Gear\n    fragColor = vec4(gear,gear,gear, 1.0);\n}","name":"Image","description":"","type":"image"}]}