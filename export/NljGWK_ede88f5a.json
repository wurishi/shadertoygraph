{"ver":"0.1","info":{"id":"NljGWK","date":"1624736062","viewed":149,"name":"The Fern","username":"elefAntti","description":"Barnsley fern","likes":22,"published":1,"flags":32,"usePreview":0,"tags":["ifs","multibuffer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 border(vec2 uv)\n{\n  vec3 bordercolor=vec3(0.01, 0.5, 0.01);\n  uv = abs(uv);\n  vec3 color = vec3(0);\n  vec2 uv2 = uv;\n  uv2.y += 0.05*step(0.4043, uv.x) - 0.3*step(0.4543, uv.x);\n  color += smoothstep( 0.005, 0.002, abs(uv2.y - 0.25)) ;\n  uv2 = uv;\n  uv2.x += 0.05*step(0.1957, uv.y) - 0.3*step(0.25, uv.y);\n  color += smoothstep( 0.005, 0.002, abs(uv2.x - 0.45));\n  \n  uv2 = uv;\n  uv2.x -= 0.3*step(0.25, uv.y);\n  color += smoothstep( 0.002, 0.001, abs(uv2.x - 0.42));\n  \n  uv2 = uv;\n  uv2.y -= 0.3*step(0.45, uv.x);\n  color += smoothstep( 0.002, 0.001, abs(uv2.y - 0.22));\n\n  uv2 = uv;\n  uv2.y -= 0.3*step(0.45, uv.x);\n  color += smoothstep( 0.002, 0.001, abs(uv2.y - 0.22));\n  \n  color += smoothstep( 0.002, 0.001, abs(uv.y - 0.25))\n      * (step(0.418, uv.x) - step(0.4515, uv.x));\n      \n  color += smoothstep( 0.002, 0.001, abs(uv.x - 0.45))\n      * (step(0.218, uv.y) - step(0.25, uv.y));\n\n  return color * bordercolor;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - iResolution.xy*0.5)/iResolution.x;\n    \n    //Tile three ferns\n    vec2 texCoord = uv;\n    texCoord.x += 0.15;\n    texCoord.x = mod(texCoord.x, 0.3);\n    texCoord.x -= 0.15;\n    \n    //Smooth the in-between bits, si there is no sharp border\n    float smoothing = (cos(texCoord.x / 0.3 * 3.14159) + 1.0) * 0.5;\n    texCoord *= iResolution.x;\n    texCoord += iResolution.xy*0.5;\n    fragColor = vec4(1.0, 0.9, 0.8, 1.0)-texelFetch(iChannel0, ivec2(texCoord), 0)*smoothing;\n   \n    fragColor += vec4(border(uv), 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float capsule(vec2 pos, float height)\n{\n    vec2 nearPoint = vec2(0.0, clamp(pos.y, 0.0, height));\n    float len = length(pos - nearPoint);\n    return len;\n}\n\nfloat stem(vec2 uv)\n{\n    uv.y -= 5.0;\n    uv /= 20.0;\n    return 0.002/max(0.002, capsule(uv + vec2(0.0, 0.24), 0.08));\n    \n}\n\nvec3 sampleFern(vec2 uv)\n{\n    uv.y -= 5.0;\n    uv /= 30.0;\n    uv *= iResolution.x;\n    uv += iResolution.xy*0.5;\n    return texelFetch(iChannel0, ivec2(uv), 0).xyz;\n}\n\n\n//The fern formulae usually start iteration from 0, pick one branch at random and do a corresponding\n//affine transform. \n//Here I've inverted the formulae and do all of the branches simultaneously\n//The only tricky part is the stem transform, for which the matrix is not full-rank\n//To draw the stem, I instead simply draw a capsule.\n\nvec3 fernReverse(vec2 uv, float time)\n{\n    uv *= 30.0;\n    uv.y += 5.0;\n\n    float x = uv.x;\n    float y = uv.y;\n    \n    //Drawing in inverse color as it will get inverted in the final drawing phase\n    vec3 col = stem(vec2(x,y)) * vec3(0.99, 0.5, 0.99);\n\n    float y2 = y - 1.6;\n    float nextX =  1.174 * x + -0.0552 * y2;\n    float nextY = 0.0552 * x + 1.174 * y2;\n    col += sampleFern(vec2(nextX, nextY) )* 0.87;\n\n    y2 = y - 1.6;\n    nextX =  2.119 * x + 2.505*y2;\n    nextY =  -2.216 * x + 1.927*y2;\n    col += sampleFern(vec2(nextX, nextY) )* 0.87;\n\n\n    y2 = y - 0.44;\n    nextX = -2.206 * x + 2.2574 * y2;\n    nextY =  2.39 * x + 1.379* y2;\n    col += sampleFern(vec2(nextX, nextY) )* 0.87;\n\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - iResolution.xy*0.5)/iResolution.x;\n    vec3 col = vec3(0.0);\n    \n    col += fernReverse(uv, iTime);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}