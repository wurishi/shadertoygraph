{"ver":"0.1","info":{"id":"tdfSWn","date":"1551052355","viewed":103,"name":"Space GIF Test","username":"IsaacAndersen","description":"playing around with some help from: https://www.youtube.com/watch?v=cQXAbndD5CQ","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float quadraticInOut(float t) {\n  float p = 2.0 * t * t;\n  return t < 0.5 ? p : -p + (4.0 * t) - 1.0;\n}\n\nfloat cubicInOut(float t) {\n  return t < 0.5\n    ? 4.0 * t * t * t\n    : 0.5 * pow(2.0 * t - 2.0, 3.0) + 1.0;\n}\n\nfloat cubicIn(float t) {\n  return t * t * t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv -= 0.5;\n    uv *= iResolution.x / iResolution.y;\n    \n    //vec2 uv = (fragCoord.xy-iResolution.xy*.5)/iResolution.xy;\n    float t = 3.1415*iTime;\n    \n    vec3 col = vec3(0.0);\n    \n    uv *= 2.5-2.0*sin((floor(t/4.0) + fract(t/4.0)));\n    \n   \tfloat angle = (3.1415/4.0)* (floor(t/4.0) + quadraticInOut(fract(t/4.0)));\n    \n    \n    float s = sin(angle);\n    float c = cos(angle);\n    \n    uv *= mat2(c, -s, s, c);\n    \n    \n    vec2 gv = fract(uv);\n    \n     gv.x += 0.01*sin(16.0*3.14*gv.x);\n    gv.y += 0.05*cos(16.0*3.14*gv.y);\n    \n    vec2 id = floor(uv); // uniquely identifies each cell\n    \n    for (int k = 0; k < 3; k++) {\n        float m = 0.0;\n        t += 0.2;\n        for (float i = -1.; i <= 1.; i++) {\n            for (float j = -1.; j <= 1.; j++) {\n                vec2 offset = vec2(j,i);\n\n                float d = length(gv+offset);//((gv+offset).x + (gv+offset).y)/4.0;\n                float dist = length(id-offset);//((id-offset.xy).x + (id-offset.xy).y)/4.0;\n                \n                float d2 = length(0.11/gv.xx + 0.1/gv.yy);\n                \n                float specialDist = 0.9+0.05*sin(-t+dist);\n\n                float r = mix(0.3,.75,.5*sin(-t+dist)+.5);\n                \n                \n                float c = smoothstep(r,r*specialDist,(d-abs((0.5-gv.x)*(0.5-gv.y))));\n\n                m =  m*(1.0-c) + c*(1.0-m);\n            }\n        }\n\t\tcol[k] += m;\n    }\n    fragColor = vec4(col.rgb,1.0);\n}","name":"Image","description":"","type":"image"}]}