{"ver":"0.1","info":{"id":"cdVSR1","date":"1680733889","viewed":66,"name":"QuadTree Pattern Attempt","username":"izutionix","description":"Forked from [url=https://www.shadertoy.com/view/7tX3D2]First Quad Tree Attempt by Yusef28[/url]\nMight be possibe to get a pattern out of it that is useful for sampling?","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["pattern","quadtree"],"hasliked":0,"parentid":"WssBRS","parentname":".Starting Shader"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//forked from First Quad Tree Attempt by Yusef28 https://www.shadertoy.com/view/7tX3D2\n\n//#define animateTresholt\n\nfloat mirror(float p, float size) {\n    return abs(mod(p + size, 2.0 * size) - size); // https://www.shadertoy.com/view/dlXGDj\n}\n\nfloat rand(vec2 n) { \n    return fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\nfloat selectorPattern(vec2 u) {\n    float f = step(u.x, 0.);\n    if (u.y > 0.) f = (2.-f) / 3.;\n    return f;\n}\n\nconst float kMAX = 10.;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-iResolution.xy*0.5)/iResolution.y;\n\n    //uv += iTime*.05;\n    \n    vec2 newST = uv;\n    vec2 newID = floor(newST);\n    vec2 newCoor = fract(newST)-0.5;\n    \n    float ksum = 0.;\n    \n    for(float k = 1.; k < kMAX; k++){\n        newST = newST*2.;\n            //get 2d vector id for this pixel's 1x1 block\n        newID = floor(newST);\n            //get the -0.5 - 0.5 coord of this pixel for quad partitioning\n        newCoor = fract(newST)-0.5;\n        \n        //IDsum = IDsum*0.5 + newID;\n        ksum += k/kMAX * selectorPattern(newCoor); //atan(newCoor.x,newCoor.y)/(2.*3.141592653589793);\n        \n        //if (fract(newID/2.)==vec2(0.) )//|| fract(newID/2.+0.5)==vec2(0.))\n        //    break;\n        /*\n        float rnd = rand(newID);\n            //if not then break out of the loop and move to coloring\n        if(step(0.5, rnd) < 0.5){\n            break;\n            }\n        */\n\n    }\n    \n    float f = ksum/3./1.4;\n#ifdef animateTresholt\n    f = step(ksum/3./1.4, mirror(iTime/10., 1.));\n#endif\n    fragColor = vec4(vec3(f), 1.0);\n    //fragColor = vec4(abs(newID)/iResolution.y*50., 0., 1.0);\n}","name":"Image","description":"","type":"image"}]}