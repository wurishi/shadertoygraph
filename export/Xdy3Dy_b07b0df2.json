{"ver":"0.1","info":{"id":"Xdy3Dy","date":"1456182984","viewed":223,"name":"a World","username":"MMGS","description":"Controls: Mouse, drag around","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["planet","world"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdXGzr","filepath":"/media/a/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg","previewfilepath":"/media/ap/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// by mmgs@2016\n\nvoid doCamera( out vec3 camPos, out vec3 camTar, in float time, in float mouseX )\n{\n    vec2 m = iMouse.xy;\n    m.x = iMouse.x*2.0-1.0;\n     m.y = iMouse.y*2.0-1.0;\n    m.x *= 2.*iMouse.x/iResolution.x;\n    \n    float an = 0.3*iTime*0.01 + m.x*0.001;\n\tcamPos = vec3(3.5*sin(an),1.0,3.5*cos(an))+0.5-m.y*0.001;\n    camTar = vec3(0.0,0.0,0.0);\n}\n\n#define TI iTime\n#define PI 3.1415926535897932384626433832795\n#define TWOPI (2.0*PI)\nvec3 doBackground( vec2 uv )\n{\n    vec3 tex=texture(iChannel0,uv).xyz;\n    if(tex.x<0.95) tex=vec3(0);\n    return tex;\n}\n#define FBM_Iteration 6\nvec2 polar(vec3 norm)\n{\n\tvec2 res;\n    res.y = (norm.y+1.0)/2.0;\n    res.x = atan(norm.z, norm.x) / TWOPI;\n    return res.xy;\n}\n\nvec2 polarWrap(vec3 norm)\n{\n\tvec2 res = polar(norm);\n    res.x = abs(res.x-0.5)*2.0;\n    return res; \n}\n\n\nfloat perlin_noise3(vec3 p){\n \n    /*\n     not perlin noise anymore*/\n    \n    vec3 tex = texture(iChannel1,polarWrap(p)).xyz;\n    return length(p+tex*.5)*0.5;\n}\nfloat smin( float a, float b, float k ) {\n    float h = clamp( 0.5 + 0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\n\nfloat fbm3(vec3 p){\n    float n=0.0;\n    n=perlin_noise3(p);\n\n    float a=0.1;\n    for (int i=0;i<2;i++){\n        n+=a*perlin_noise3(p-float(i)*42.);\n        p=p*2.0;\n        a=a*0.5;\n    }\n    return n;\n}\nvec2 doModel( vec3 p )\n{\n     float id = 0.0;\n    float r=.50;\n    float s = length(p) - (r+ 0.5*( .5 + ( .5 * fbm3( p * .5  )*2.015  ) ));\n\n    if(s>=length(p+cos(p.x*222.+iTime*2.)*0.0001+sin(p.z*222.+iTime*2.)*0.00001 )-r*4.0){id=2.0;s=length(p)-r*4.;} //water\n    if(s<length(p)-r*4.13){id=3.0;} //snow\n    if(s>length(p)-r*4.05 && s<length(p)-r*4.015){id=4.0;s=length(p)-r*4.05;}\n    \n   vec3 pos = vec3(0.+cos(iTime*0.1)*2.3,-1,0.+sin(iTime*0.1)*2.3);\n    float s1 = length(p*0.5+0.5+pos) - .2*s;\n\n  \t\ts =min(s,s1);\n    if(s==s1)id=5.0;\n   \n  //if(id==2.)s+= ((p.y*222.+iTime)*.1)*0.001;\n\n    return vec2(s,id);\n}\n\n\n\n\nmat3 m = mat3( 0.00,  0.80,  0.60,\n              -0.80,  0.36, -0.48,\n              -0.60, -0.48,  0.64 );\nfloat hash( float n )\n{\n    return fract(sin(n)*43758.5453);\n}\n\n\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\n    f = f*f*(3.0-2.0*f);\n\n    float n = p.x + p.y*57.0 + 113.0*p.z;\n\n    float res = mix(mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\n                        mix( hash(n+ 57.0), hash(n+ 58.0),f.x),f.y),\n                    mix(mix( hash(n+113.0), hash(n+114.0),f.x),\n                        mix( hash(n+170.0), hash(n+171.0),f.x),f.y),f.z);\n    return res;\n}\n\nfloat fbm( vec3 p )\n{\n    float f = 0.0;\n\n    f += 0.5000*noise( p ); p = m*p*2.02;\n    f += 0.2500*noise( p ); p = m*p*2.03;\n    f += 0.1250*noise( p ); p = m*p*2.01;\n    f += 0.0625*noise( p );\n\n    return f/0.9375;\n}\n\nvec3 appleColor( in vec3 pos, in vec3 nor, out vec2 spe )\n{\n    spe.x = 1.0;\n    spe.y = 1.0;\n\n    float a = atan(pos.x,pos.z);\n    float r = length(pos.xz);\n\n    // red\n    vec3 col = vec3(2.0,0.0,0.0);\n\n    // green\n    float f = smoothstep( 0.1, 1.0, fbm(pos*1.0) );\n    col = mix( col, vec3(0.8,1.0,0.2), f );\n\n    // dirty\n    f = smoothstep( 0.0, 1.0, fbm(pos*4.0) );\n    col *= 0.8+0.2*f;\n\n    // frekles\n    f = smoothstep( 0.0, 1.0, fbm(pos*48.0) );\n    f = smoothstep( 0.7,0.9,f);\n    col = mix( col, vec3(0.9,0.9,0.6), f*0.5 );\n\n    // stripes\n    f = fbm( vec3(a*7.0 + pos.z,3.0*pos.y,pos.x)*2.0);\n    f = smoothstep( 0.2,1.0,f);\n    f *= smoothstep(0.4,1.2,pos.y + 0.75*(noise(4.0*pos.zyx)-0.5) );\n    col = mix( col, vec3(0.4,0.2,0.0), 0.5*f );\n    spe.x *= 1.0-0.35*f;\n    spe.y = 1.0-0.5*f;\n\n    // top\n    f = 1.0-smoothstep( 0.14, 0.2, r );\n    col = mix( col, vec3(0.6,0.6,0.5), f );\n    spe.x *= 1.0-f;\n\n\n    float ao = 0.5 + 0.5*nor.y;\n    col *= ao*1.;\n\n    return col;\n}\n\n\n\n\nvec3 doMaterial( in vec3 pos, in vec3 nor )\n{\n    vec3 col;\n    vec3  lig = normalize(vec3(1.0,0.7,0.9))*1.5;\n    vec2 spec = vec2(1);\n     vec3 apl = appleColor(pos*32.,  nor, spec).xyz;\n    \n    float test = doModel(pos).y;\n       vec3 tex = texture(iChannel1,polarWrap(nor)).xyz;\n   \t vec3 wtex = texture(iChannel1,polarWrap(cos(tex*8.+iTime*0.03)+sin(tex*6.+iTime*0.03)  )).xyz\n         +texture(iChannel1,polarWrap(cos(tex*25.+iTime*0.5)*0.25-sin(tex*25.-iTime*0.15)*0.5  )).xyz\n         +texture(iChannel1,polarWrap(cos(tex*25.-iTime*0.5)*0.35+sin(tex*25.-iTime*0.25)*0.5  )).xyz;\n    \n      col =vec3(0.2,0.07,0.01)*tex+apl*0.1;\n    \n      //  tex = texture(iChannel1,polarWrap(nor*.5)).xyz;\n     //  \t vec3 cluuud = texture(iChannel1,polarWrap(2.*cos(tex*2.+iTime*0.03+pos.x)+1.5*sin(pos.y*2.+tex*6.+iTime*0.03)  )).xyz;\n    \n    \n\n     if(test==1.0)col=vec3(0,0,0.4);\n    if(test==2.0){col=vec3(0,0,0.15);}\n    if(test==3.0)col=vec3(0.4)+(tex*0.01);\n    if(test==4.0)col=vec3(0,0.4,0)*tex*apl;\n      if(test==5.0)col+=vec3(0.3+dot(nor,lig)*0.1);\n  //  if(test==2.0 && col.z <0.3) col += vec3(0.1);\n    \n  //  if(cluuud.x < 0.35) col += vec3(0.7);\n    \n    \n    return col;\n}\n\n//------------------------------------------------------------------------\n// Lighting\n//------------------------------------------------------------------------\nfloat calcSoftshadow( in vec3 ro, in vec3 rd );\n\nvec3 doLighting( in vec3 pos, in vec3 nor, in vec3 rd, in float dis, in vec3 mal )\n{\n    vec3 lin = vec3(0.0);\n\n    // key light\n    //-----------------------------\n    vec3  lig = normalize(vec3(1.0,0.7,0.9));\n    float dif = max(dot(nor,lig),0.0);\n    float sha = 0.0; if( dif>0.01 ) sha=calcSoftshadow( pos+0.01*nor, lig );\n    lin += dif*vec3(4.00,4.00,4.00)*sha;\n\n    // ambient light\n    //-----------------------------\n    lin += vec3(0.50,0.50,0.50);\n\n    \n    // surface-light interacion\n    //-----------------------------\n    vec3 col = mal*lin;\n     lig = -normalize(vec3(1.0,0.7,0.9));\n   vec3 resCol=1.0 * sin( vec3(0.06,0.08,0.1)* dis);\n\n        \n        float diffuse=.50*max(0.0,dot(-lig,nor) );\n        vec3 ref=reflect(-rd,nor);\n        vec3 h=normalize(-lig-rd);\n        float specular=1.0*pow(max(0.0,dot(h, nor) ),10.0 );\n\t\tvec3 amb=vec3(.001);\n      vec3  finalCol=lin*(diffuse+specular)*col +amb;\n    \n    // fog    \n    //-----------------------------\n\tcol *= exp(-0.01*dis*dis);\n\n    return finalCol;\n}\n\nfloat calcIntersection( in vec3 ro, in vec3 rd )\n{\n\tconst float maxd = 10.0;           // max trace distance\n\tconst float precis = 0.001;        // precission of the intersection\n    float h = precis*2.0;\n    float t = 0.0;\n\tfloat res = -1.0;\n    for( int i=0; i<90; i++ )       \n    {\n        if( h<precis||t>maxd ) break;\n\t    h = doModel( ro+rd*t ).x;\n        t += h;\n    }\n\n    if( t<maxd ) res = t;\n    return res;\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    const float eps = 0.002;             // precision of the normal computation\n\n    const vec3 v1 = vec3( 1.0,-1.0,-1.0);\n    const vec3 v2 = vec3(-1.0,-1.0, 1.0);\n    const vec3 v3 = vec3(-1.0, 1.0,-1.0);\n    const vec3 v4 = vec3( 1.0, 1.0, 1.0);\n\n\treturn normalize( v1*doModel( pos + v1*eps ).x + \n\t\t\t\t\t  v2*doModel( pos + v2*eps ).x + \n\t\t\t\t\t  v3*doModel( pos + v3*eps ).x + \n\t\t\t\t\t  v4*doModel( pos + v4*eps ).x );\n}\n\nfloat calcSoftshadow( in vec3 ro, in vec3 rd )\n{\n    float res = 1.0;\n    float t = 0.0005;                 // selfintersection avoidance distance\n\tfloat h = 1.0;\n    for( int i=0; i<35; i++ )         // 40 is the max numnber of raymarching steps\n    {\n        h = doModel(ro + rd*t).x;\n        res = min( res, 64.0*h/t );   // 64 is the hardness of the shadows\n\t\tt += clamp( h, 0.02, 2.0 );   // limit the max and min stepping distances\n    }\n    return clamp(res,0.0,1.0);\n}\n\nmat3 calcLookAtMatrix( in vec3 ro, in vec3 ta, in float roll )\n{\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(sin(roll),cos(roll),0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    return mat3( uu, vv, ww );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (-iResolution.xy + 2.0*fragCoord.xy)/iResolution.y;\n    vec2 m = iMouse.xy/iResolution.xy;\n\n    //-----------------------------------------------------\n    // camera\n    //-----------------------------------------------------\n    \n    // camera movement\n    vec3 ro, ta;\n    doCamera( ro, ta, iTime, m.x );\n\n    // camera matrix\n    mat3 camMat = calcLookAtMatrix( ro, ta, 0.0 );  // 0.0 is the camera roll\n    \n\t// create view ray\n\tvec3 rd = normalize( camMat * vec3(p.xy,2.0) ); // 2.0 is the lens length\n\n    //-----------------------------------------------------\n\t// render\n    //-----------------------------------------------------\n\n\tvec3 col = doBackground(fragCoord.xy/iResolution.xy);\n\t vec3  lig = normalize(vec3(1.0,0.7,0.9));\n\t// raymarch\n    float t = calcIntersection( ro, rd );\n    if( t>-0.5 )\n    {\n        // geometry\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal(pos);\n\n        // materials\n        vec3 mal = doMaterial( pos, nor );\n\n        col = doLighting( pos, nor, rd, t, mal );\n\n\t}\n\n\t//-----------------------------------------------------\n\t// postprocessing\n    //-----------------------------------------------------\n    // gamma\n\tcol = pow( clamp(col,0.0,1.0), vec3(0.4545) );\n\t \n    if(col.x<0.01)\n    col+= dot(rd,lig)*0.5+vec3(0,0,0.2)+1.0-length(p)*0.4;\n    \n    fragColor = vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"}]}