{"ver":"0.1","info":{"id":"3lsSWH","date":"1562739433","viewed":89,"name":"practice raytraicing by suraimu","username":"suraimu752","description":"practice raytraicing by suraimu752","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raytraicing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"struct Sphere{\n    vec3 pos;\n    vec3 col;\n    float radius;\n};\n\nSphere nearest(vec3 R, in Sphere S[3]){\n    int o = 0;\n    for(int i = 1; i < 3; i++){\n        if(distance(S[i].pos, R) < distance(S[o].pos, R)){\n            o = i;\n        }\n    }\n    return S[o];\n}\n\nmat3 rotate(float x){\n    return mat3(\n                cos(x),     0, sin(x),\n                     0,     1,      0,\n               -sin(x),     0, cos(x)\n    );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 p = (fragCoord * 2. - iResolution.xy) / min(iResolution.x, iResolution.y);\n    vec3 col = vec3(0.);\n\n    float screenZ = -5. * exp(sin(iTime))*sin(iTime*3.)*cos(iTime);\n    vec3 rayOrigin = vec3(0, 0, screenZ);\n    vec3 rayPos = rayOrigin;\n    vec3 rayDirection = normalize(vec3(p, 0) - rayOrigin);\n\n    vec3 lightDirection = vec3(1., 1.5, -1.) * rotate(iTime*0.5);\n\n    Sphere sphere[3];\n    for(int i = 0; i < 3; i++){\n        sphere[i].col = vec3(1., 1., 1.);\n        sphere[i].radius = .5;\n    }\n    sphere[0].pos = vec3(.8, 0, 0);\n    sphere[1].pos = vec3(-.8, .4, 1);\n    sphere[2].pos = vec3(0, .6, 3.);\n\n    sphere[0].col = vec3(1, 0, 0);\n    sphere[1].col = vec3(0, 1, 0);\n    sphere[2].col = vec3(0, 0, 1);\n\n    //col = distFunc(rayPos, rayDirection, sphere);\n\n    float depth = 0.;\n    for(int i = 0; i < 300; i++){\n        rayPos = rayOrigin + rayDirection * depth;\n        Sphere sph = nearest(rayPos, sphere);\n        float dist = distance(rayPos, sph.pos) - sph.radius;\n        depth += dist;\n        if(dist < 0.0001){\n            col = sph.col * clamp(dot(rayPos - sph.pos, lightDirection) + .3, 0.05, 1.);\n            break;\n        }\n    }\n\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}