{"ver":"0.1","info":{"id":"tdV3z3","date":"1570696503","viewed":179,"name":"Olympian Nights Visualizer","username":"AnnoidJohnny","description":"Music visualizer for Olympian Nights by Neb: https://soundcloud.com/drurylain/olympian-nights","likes":2,"published":1,"flags":64,"usePreview":0,"tags":["music","visualizer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4tj3zK","filepath":"https://soundcloud.com/drurylain/olympian-nights","previewfilepath":"https://soundcloud.com/drurylain/olympian-nights","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float audio = texture(iChannel0, vec2(0.0,0.0)).r;\n    \n    \n    vec2 transformedUV = (uv - vec2(0.5,0.5)) * mat2(cos(iTime * sin(iTime*0.01)), sin(iTime * sin(iTime*0.01)), -sin(iTime * sin(iTime*0.01)), cos(iTime * sin(iTime*0.01)));\n    \n    vec2 transformedUV2 = (uv - vec2(0.5 + cos(iTime*1.5)*0.25,0.5 + sin(iTime*1.5) * 0.25)) * mat2(cos((-iTime + distance(uv, vec2(0.5,0.5))*5.) * sin(iTime*0.01)), sin((-iTime + distance(uv, vec2(0.5,0.5))*5.) * sin(iTime*0.01)), -sin((-iTime + distance(uv, vec2(0.5,0.5))*5.) * sin(iTime*0.01)), cos((-iTime + distance(uv, vec2(0.5,0.5))*5.) * sin(iTime*0.01)));\n    \n    vec3 col = 0.5 + 0.5*cos(iTime + audio+uv.xyx+vec3(0,2,4)) + (texture(iChannel1, transformedUV).rgb) + texture(iChannel2, uv + vec2(cos(iTime + uv.y*5.), 0.0)).b*audio;\n\n    bool checka = distance(fragCoord.xy, (iResolution.xy/2.0) + vec2(cos(iTime*5.0)*12.0,sin(iTime*5.0)*cos(iTime*5.0)*5.0)*10.0) < ((75.0 * iResolution.y/300.0) + audio*70.0* iResolution.y/300.0);\n    bool checkb = distance(fragCoord.xy, (iResolution.xy/2.0) + vec2(cos(iTime*5.0)*12.0,sin(iTime*5.0)*cos(iTime*5.0)*5.0)*10.0) > ((50.0 * iResolution.y/300.0) + audio*80.0* iResolution.y/300.0);\n   \tbool checkc = distance(fragCoord.xy, (iResolution.xy/2.0) + vec2(cos(iTime*5.0)*12.0,sin(iTime*5.0)*cos(iTime*5.0)*5.0)*10.0) < ((25.0 * iResolution.y/300.0) + audio*90.0* iResolution.y/300.0);\n    \n    if(checka && (checkb || checkc))\n        col =  0.5 + 0.5*cos(-iTime+uv.xyx+vec3(0,6,8)+audio) + texture(iChannel1,transformedUV2).rgb;\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}