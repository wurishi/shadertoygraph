{"ver":"0.1","info":{"id":"4lGBzt","date":"1543537188","viewed":160,"name":"Static Scene TAA","username":"slembcke","description":"A novice implementation of TAA on a static 2D scene.  Click to magnify.\n\nKind of uninteresting without moving objects, but that's for another day.","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["taa"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord){\n    // Magnifier lens.\n    if(length(fragCoord - iMouse.xy) < 200.0){\n        fragCoord = (fragCoord - iMouse.xy)/4.0 + iMouse.xy;\n    }\n    \n    // Sample from the buffer.\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 accum = texture(iChannel0, uv/1.0);\n    \n    // Resolve and gamma.\n    float i = pow(accum.r/accum.a, 1.0/2.2);\n\tfragColor = vec4(i, i, i, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// http://extremelearning.com.au/unreasonable-effectiveness-of-quasirandom-sequences/\nconst vec2 JITTER = vec2(0.7548776662466927, 0.5698402909980532);\nvec2 jitter(int n){return fract(JITTER*vec2(n)) - 0.5;}\n\n// Camera scrolling.\nvec2 scroll(int n){\n    float t = float(n)/100.0;\n    return 100.0*vec2(cos(t), sin(t));\n}\n\n// Red is b/w intensity\n// Green/Blue will be velocity when I get to moving objects?\n// Alpha is the total blend weight.\nvec4 scene_func(vec2 jitteredCoord){\n    vec2 uv2 = 2.0*fract(jitteredCoord/32.0) - 1.0;\n    float dist = step(0.0, sin(20.0*length(uv2)));\n    return vec4(dist, 0.0, 0.0, 1.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    // Scroll offset for the prev frame and this one.\n    vec2 offset0 = scroll(iFrame - 1);\n    vec2 offset1 = scroll(iFrame);\n    \n    // Reproject into previous frame and clip.\n    vec2 prevUV = (fragCoord + (offset1 - offset0))/iResolution.xy;\n\tvec4 accum = texture(iChannel0, prevUV);\n    vec2 clip = step(0.0, prevUV) - step(1.0, prevUV);\n    accum *= clip.x*clip.y;\n\t\n    // Render scene.\n    vec2 jitteredCoord = fragCoord + jitter(iFrame) + offset1;\n    vec4 scene = scene_func(jitteredCoord);\n    \n    // Blend with previous frames.\n    // Simple exponential decay seems to work ok.\n\tfragColor = 0.75*accum + scene;\n}","name":"Buffer A","description":"","type":"buffer"}]}