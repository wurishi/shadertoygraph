{"ver":"0.1","info":{"id":"WtyfWW","date":"1614299176","viewed":214,"name":"Fluid simple jets","username":"niels747","description":"This is just to test a performance difference between texelfetch() and texture() \nTo my surprice I have not been able to see any difference. (I am measuring GPU usage)","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["simulation","fluid","convection"],"hasliked":0,"parentid":"3l3fDs","parentname":"Super Simple Fluid texture()"},"renderpass":[{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec4 fluid = texture(iChannel0,uv);\n    \n    vec2 normMouse = iMouse.xy / iResolution.xy;\n    \n    // temperature view\n    //fragColor = vec4(hsv2rgb(vec3(-fluid.w*0.31+0.3,1.0,1.0)),1.0); // hue\n    fragColor = vec4(1.0 + fluid.w, 1.0 - abs(fluid.w),1.0 - fluid.w, 1.0); // red and blue\n    \n    // presure view\n   // fragColor = vec4(1.0 + fluid.z*2., 1.0 - abs(fluid.z*2.),1.0 - fluid.z*2., 1.0); // red and blue\n    \n    /*\n    // Draw high velocity indicator\n    #define lowTresh 0.70\n    #define medTresh 0.85\n    #define highTresh 0.99\n    \n    if(abs(fluid.x) > highTresh || abs(fluid.y) > highTresh)\n       fragColor = vec4(0,0,0,1);\n       \n    else if(abs(fluid.x) > medTresh || abs(fluid.y) > medTresh)\n       fragColor = vec4(1,1,0,1);\n    \n    else if(abs(fluid.x) > lowTresh || abs(fluid.y) > lowTresh)\n       fragColor = vec4(0,1,0,1);     \n*/\n\n/*\n   // draw isobars for negative pressure\n   for(float p = -0.9; p < -0.05; p+=0.03){\n   \n   if(abs(fluid.z - p) < 0.003){\n   fragColor = vec4(0,0,0,1);\n   break;\n }\n }\n*/\n    \n    \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/*\nx = horizontal velocity\ny = vertical velocity\nz = pressure\nw = temperature\n*/\n\nfloat powI(float x,int p) // p > 0\n{\nfloat result = x;\nfor(int i = 1; i<p; i++){\nresult *= x;\n}\nreturn result;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 iRes = ivec2(iResolution);\n    vec2 center = fragCoord / iResolution.xy;\n    vec2 right  = (fragCoord + vec2(1,0)) / iResolution.xy;\n    vec2 up     = (fragCoord + vec2(0,1)) / iResolution.xy;\n    \n    //vec2 norm = vec2(center.x / (iResolution.y/iResolution.x), center.y);\n    \n\tvec2 uv = (fragCoord.xy / iResolution.xy);\n    uv -= 0.5;\n    uv.y *= iResolution.y / iResolution.x;\n    \n    \n    vec4 t = texture(iChannel0, center);\n    \n    // velocity changes proportional to pressure gradient across point\n    t.x += t.z - texture(iChannel0,right).z; \n    t.y += t.z - texture(iChannel0,up).z; \n\n    //t.x *= 0.9999; // linear drag\n    //t.y *= 0.9999; // not a good idea\n    \n    t.x -= powI(t.x * 1.5 ,9)*0.001; // drag to prevent too high velocities\n    t.y -= powI(t.y * 1.5 ,9)*0.001; // simulation is only stable and accurate if x and y velocies < 1.0 (fragments/iteration)\n   \n/*\n    // mouse adds heat\n    if(length(iMouse.xy - fragCoord) < 30.1 && iMouse.z > 0.5){\n        t.w += 0.1;\n    }\n    */\n    \n    \n    if(length(uv - vec2(-0.06,0.05)) < 0.02){\n     t.xy += vec2(0.012,-0.010);\n     t.w = 1.0;\n   }else if(length(uv - vec2(0.06,-0.05)) < 0.02){\n  t.xy += vec2(-0.012,0.010);\n    t.w = -1.0; \n   }\n  \n    //t.w = clamp(t.w,-1.0,1.0); // constrain temperature\n    \n    fragColor = vec4(t.x ,t.y, t.z, t.w);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"/*\nx = horizontal velocity\ny = vertical velocity\nz = pressure\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 iRes = ivec2(iResolution);\n    vec2 center = fragCoord / iResolution.xy;\n    vec2 left  = (fragCoord + vec2(-1,0)) / iResolution.xy;\n    vec2 down  = (fragCoord + vec2(0,-1)) / iResolution.xy;\n      \n   vec4 t = texture(iChannel0,center);\n   \n   // pressure changes proportional to the net inflow - outflow of the cell\n   t.z += (texture(iChannel0,left).x - t.x + texture(iChannel0,down).y - t.y) *0.499; // multiplier has to be < 0.5\n\n   fragColor = vec4(t.x, t.y, t.z, t.w);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"// Advection\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\nvec4 t = texture(iChannel0,fragCoord / iResolution.xy);\n\nvec2 center = fragCoord/iResolution.xy;\nvec2 backtracedPos = center - t.xy/iResolution.xy;\n\n    fragColor = texture(iChannel0,backtracedPos);\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 center = fragCoord / iResolution.xy;\n    vec2 right  = (fragCoord + vec2(1,0)) / iResolution.xy;\n    vec2 up     = (fragCoord + vec2(0,1)) / iResolution.xy;\n    \n    vec4 cell = texture(iChannel0, center);\n    \n    float curl = texture(iChannel0,up).x - cell.x - texture(iChannel0,right).y + cell.y;\n    \n    fragColor = vec4(curl, 0.0, 1.0, 1.0);\n}","name":"Buffer D","description":"","type":"buffer"}]}