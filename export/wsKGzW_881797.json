{"ver":"0.1","info":{"id":"wsKGzW","date":"1569857358","viewed":1076,"name":"Rounded Box Example","username":"red","description":"An example answer to the stack overflow question https://stackoverflow.com/questions/58169154/glsl-rounded-rectangle-corners-are-stretched","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["sdf","box"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Input info\n    vec2 boxPos; // The position of the center of the box (in normalized coordinates)\n    vec2 boxBnd; // The half-bounds (radii) of the box (in normalzied coordinates)\n    float radius;// Radius\n    \n    \n   \tboxPos = vec2(0.5, 0.5);\t// center of the screen\n    boxBnd = vec2(0.25, 0.25);  // half of the area\n    radius = 0.1;\n    \n    // Normalize the pixel coordinates (this is \"passTexCoords\" in your case)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 aspectRatio = vec2(iResolution.x/iResolution.y, 1.0);\n    \n    // In order to make sure visual distances are preserved, we multiply everything by aspectRatio\n    uv *= aspectRatio;\n    boxPos *= aspectRatio;\n    boxBnd *= aspectRatio;\n    \n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    // Output to screen\n    float alpha = length(max(abs(uv - boxPos) - boxBnd, 0.0)) - radius;\n    \n\t// Shadertoy doesn't have an alpha in this case\n    if(alpha <= 0.0){\n    \tfragColor = vec4(col,1.0);\n    }else{\n        fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    }\n}","name":"Image","description":"","type":"image"}]}