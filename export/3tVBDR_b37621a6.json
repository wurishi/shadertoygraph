{"ver":"0.1","info":{"id":"3tVBDR","date":"1614180680","viewed":54,"name":"Tchoutchou Waw","username":"Nashoute","description":"An exercice about rail tracks","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","train","rail"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//thank you Iq https://iquilezles.org/articles/distfunctions\n//and thank you GreenChicken for your tutorials https://www.shadertoy.com/user/GreenChicken\n\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n\nvec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat sdBox( vec3 p, vec3 b){\n    vec3 q = abs(p) -b;\n    return length(max(q,0.)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;\n}\n\nvec3 opRepet(vec3 pos,vec3 bound){\n    return mod(pos+0.5*bound,bound)-0.5*bound;\n}\n\nfloat opSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); \n}\n\nvec2 opSmoothUnionVec2( vec2 d1, vec2 d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2.x-d1.x)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); \n}\n\nvec2 opUnion( vec2 d1, vec2 d2 ) { \n    return (d1.x < d2.x) ? d1 : d2; \n}\n\n\nfloat opSubtraction( float d1, float d2 ) { return max(-d1,d2); }\n\nfloat opIntersection( float d1, float d2 ) { return max(d1,d2); }\n\nvec2 map(vec3 pos){\n    vec3 pos2 = pos;\n    float offsetY = sin(pos2.x+iTime)/2.;\n    float offsetz = sin(pos2.x+iTime)*1.2;\n    vec2 world = vec2(pos.y+offsetY,0.0);\n    \n    pos = opRepet(pos, vec3(1.0,0.0,4.0));\n\n    //float world = sdRoundBox(pos,vec3(0.05+sin(iTime+4.8)/8.+0.5,0.05+sin(iTime)/8.+0.3,0.05+sin(iTime)/8.+0.4),01.);\n    vec2 planche = vec2(sdRoundBox(pos+vec3(0.0,offsetY-0.05,0.0-offsetz), vec3(0.2,0.005,0.8),0.05),0.5);\n    vec2 rail1 = vec2(sdRoundBox(pos+vec3(0,offsetY-0.2,0.5-offsetz), vec3(1.,0.01,0.05),0.03),0.8);\n    vec2 rail2 = vec2(sdRoundBox(pos+vec3(0,offsetY-0.2,-0.5-offsetz), vec3(1.,0.01,0.05),0.03),0.8);\n    world = opUnion(world, planche);\n    world = opUnion(world, rail1);\n    world = opUnion(world, rail2);\n    return world;\n}\n\nvec2 CastRay(vec3 ro, vec3 rd){\n    float c = 0.0; //si y'a contact, on aura la distance\n    \n    for(int i = 0; i<128; i++){\n    \n        vec2 ray = map(ro + rd*c);\n        \n        if(ray.x < (0.005*c)){\n            return vec2(float(i)/32.,ray.y);\n        }\n        \n        c+=ray.x;\n    }\n    \n    return vec2(-1.0, 0.0);\n}\n\nvec3 render(vec3 ro,vec3 rd){ //rayon origin, rayon direction\n    \n    vec2 contact = CastRay(ro,rd);         \n    \n    \n    vec3 col = vec3(0.);\n    \n    if(contact.x == -1.){\n        col = vec3(0.0);\n        //col = palette(iTime,vec3(0.8,0.4,0.32),vec3(0.4,0.4,0.32),vec3(0.7,0.8,0.32),vec3(0.4,0.4,0.32));\n    }else{\n        col = vec3(1.-contact.x)*palette(contact.y+iTime/4.,vec3(0.5),vec3(0.5),vec3(1.),vec3(0.0,0.33,0.67) );\n    }\n    return col;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float fov = 2.; //fieldOfView\n    vec2 uv = 2.*fragCoord/iResolution.xy-1.;\n    uv.x*=iResolution.x/iResolution.y;\n    \n    //Camera\n    vec3 cameraPos = vec3(3.,3.,5.);\n    vec3 cameraTarget = vec3(0.,0.,0.);\n    \n    //view Direction/ RayD Direction\n    vec3 forward = normalize(cameraTarget-cameraPos);\n    vec3 right = normalize(cross(vec3(0.,-1.,0.),forward));\n    vec3 up = normalize(cross(right,forward));\n    vec3 viewDir = normalize(uv.x * right+uv.y*up+forward*fov);\n    //viewDir.xy*=rot(iTime);\n\n    \n    vec3 col = vec3(uv.x,uv.y,0.0);\n    \n    col = render(cameraPos,viewDir);\n\n    \n    fragColor = vec4(col,1.0);\n    \n}","name":"Image","description":"","type":"image"}]}