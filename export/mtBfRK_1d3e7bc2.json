{"ver":"0.1","info":{"id":"mtBfRK","date":"1694223207","viewed":17,"name":"schwanzi8 rotating box","username":"schwanzi8","description":"rotating box","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["box"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat sdLink( vec3 p, float le, float r1, float r2 )\n{\n  vec3 q = vec3( p.x, max(abs(p.y)-le,0.0), p.z );\n  return length(vec2(length(q.xy)-r1,q.z)) - r2;\n}\n\nvec3 checker(vec2 Pos) {\n    Pos = floor(Pos);\n    return vec3(mod(Pos.x + mod(Pos.y, 3.0), 4.0));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    float s = sin(iTime);\n    float c = cos(iTime);\n    mat3 rotateX = mat3(\n        1.0, 0.0, 0.0,\n        0.0, c,   s,\n        0.0, -s,  c\n      );\n    mat3 rotateY = mat3(\n        s, 0.0, c,\n        0.0, 1.0,   0.0,\n        c, 0.0,  -s\n      ); \n      \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.xy -= 0.5;\n    \n    vec3 col = checker(fragCoord.xy /40.0 + vec2(c));\n    vec3 rayPoint = vec3(uv.xy, 0);\n    vec3 rayPoint_dx = vec3(uv.x + 0.00001, uv.y, 0);\n    vec3 rayPoint_dy = vec3(uv.x, uv.y + 0.00001, 0);\n    //vec3 rayDir = vec3(0,0,1);\n    vec3 eyePos = vec3(0,0,-10);\n    vec3 rayDir = normalize(vec3(uv.xy, 0) - eyePos);\n    float t = 0.0, t_dx = 0.0, t_dy = 0.0;\n    //float t1 = 0.0, t1_dx = 0.0, t1_dy = 0.0;\n\n    for(int i = 0; i < 20; i++){\n        //calculate a point 5 units along the ray\n        vec3 position = rayPoint + rayDir * t;    \n        vec3 position_dx = rayPoint_dx + rayDir * t_dx;\n        vec3 position_dy = rayPoint_dy + rayDir * t_dy;\n        \n        vec3 linkProperties = vec3(0.2, 0.05, 0.05);\n        vec3 linkPosition = vec3(0.0,0.0,40.0);\n        vec3 boxProperties = vec3(0.2, 0.1, 0.2);\n        vec3 boxPosition = vec3(0.0,0.0,5.0);\n        \n        //subtract object position from ray position and check if that point\n        //is in the world origin sphere\n        float dist = min(sdBox(rotateX*(position - boxPosition), boxProperties),\n                        sdLink(rotateY*(position - linkPosition), 0.05, 1.0, 1.0));\n        float dist_dx = min(sdBox(rotateX*(position_dx - boxPosition), boxProperties),\n                        sdLink(rotateY*(position_dx - linkPosition), 0.05, 1.0, 1.0));\n        float dist_dy = min(sdBox(rotateX*(position_dy - boxPosition), boxProperties),\n                        sdLink(rotateY*(position_dy - linkPosition), 0.05, 1.0, 1.0));\n        //float dist1 = sdLink(rotateX*(position - boxPosition), 3.0, 2.0, 2.0);\n        //float dist1_dx = sdLink(rotateX*(position_dx - boxPosition), 3.0, 2.0, 2.0);\n        //float dist1_dy = sdLink(rotateX*(position_dy - boxPosition), 3.0, 2.0, 2.0);\n        \n        if(dist < 0.001  && dist_dx < 0.001 && dist_dy < 0.001){\n        \n            vec3 lightDir = rayDir;\n            //vec3 boxCol = vec3(1,0,1);\n            //vec3 boxCol = mix(col,vec3(texture(iChannel0, uv.xy).rrr), 1.0);\n            vec3 linkCol = mix(col,vec3(texture(iChannel0, uv.xy).rrr), 1.0);\n            \n            //col = boxCol*dot(-lightDir, normalize(cross(position_dy - position, position_dx - position)));\n            col = linkCol*dot(-lightDir, normalize(cross(position_dy - position, position_dx - position)));\n            \n            break;\n        } \n                \n        t = t + dist;\n        t_dx = t_dx + dist_dx;\n        t_dy = t_dy + dist_dy;\n        //t1 = t1 + dist1;\n        //t1_dx = t1_dx + dist1_dx;\n        //t1_dy = t1_dy + dist1_dy;\n    }\n\n    col = mix(col,vec3(texture(iChannel1, uv.xy).rrr), 0.5);\n    //col = max(col,-vec3(cos(iTime + fragCoord.x/10.0)));\n    //col = mix(col,\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}