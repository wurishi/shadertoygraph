{"ver":"0.1","info":{"id":"4d2Bzh","date":"1499450265","viewed":138,"name":"purwins glider","username":"b34npour","description":"Ported H.-G. Purwins' glider example from \"glider.vti\" in Ready 0.8: https://github.com/GollyGang/ready/releases\n\nThis was a good lesson for me in the differences between Open CL and GLSL - in CL this runs at thousands of passes per second. ","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["glider","laplacian","purwins"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec4 col = texture(iChannel0, uv);\n    \n    col.xyz = (col.xyz + 1.5) * 0.33333;\n    \n\tfragColor = col;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// constants from Ready's Purwins example:\nconst float D_a = 0.000150;\nconst float D_b = 0.000150;\nconst float D_c = 0.009600;\nconst float k3 = 8.500000;\nconst float lambda = 2.000000;\nconst float k1 = -6.920000;\nconst float theta = 1.000000;\nconst float tau = 48.000000;\nconst float dx = 0.009000;\nconst float timestep = 0.002000;\n\n// Circle function from jonobr1's example: https://www.shadertoy.com/view/XsjGDt\nvec4 circle(vec2 uv, vec2 pos, float rad, vec3 color) {\n\tfloat d = length(pos - uv) - rad;\n\tfloat t = clamp(d, 0.0, 1.0);\n\treturn vec4(color*(1.0-t), 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 texel = 1.0 / iResolution.xy;\n    \n    float a = texture(iChannel0, uv).x;\n    float b = texture(iChannel0, uv).y;\n    float c = texture(iChannel0, uv).z;\n    \n    // LAPLACIAN from cornusammonis' suture fluid, which seems to match Ready's built-in laplacian well: https://www.shadertoy.com/view/XddSRX\n    const float _K0 = -20.0/6.0; // center weight\n    const float _K1 = 4.0/6.0; // edge-neighbors\n    const float _K2 = 1.0/6.0; // vertex-neighbors\n    \n    // 3x3 neighborhood coordinates\n    float step_x = texel.x;\n    float step_y = texel.y;\n    vec2 n  = vec2(0.0, step_y);\n    vec2 ne = vec2(step_x, step_y);\n    vec2 e  = vec2(step_x, 0.0);\n    vec2 se = vec2(step_x, -step_y);\n    vec2 s  = vec2(0.0, -step_y);\n    vec2 sw = vec2(-step_x, -step_y);\n    vec2 w  = vec2(-step_x, 0.0);\n    vec2 nw = vec2(-step_x, step_y);\n\n    vec4 is =    texture(iChannel0, uv);\n    vec4 is_n =  texture(iChannel0, uv+n);\n    vec4 is_e =  texture(iChannel0, uv+e);\n    vec4 is_s =  texture(iChannel0, uv+s);\n    vec4 is_w =  texture(iChannel0, uv+w);\n    vec4 is_nw = texture(iChannel0, uv+nw);\n    vec4 is_sw = texture(iChannel0, uv+sw);\n    vec4 is_ne = texture(iChannel0, uv+ne);\n    vec4 is_se = texture(iChannel0, uv+se);\n\n    // laplacian of all components\n    vec4 lapl  = _K0*is + _K1*(is_n + is_e + is_w + is_s) + _K2*(is_nw + is_sw + is_ne + is_se);\n    \n    // main formula from Ready's Purwins example: \n    // delta of components\n    vec3 delta = vec3(0.0);\n    \n    delta.x = D_a * lapl.x / (dx*dx) - b - k3*c + lambda*a - a*a*a + k1;\n\tdelta.y = ( D_b * lapl.y / (dx*dx) + a - b ) / tau;\n\tdelta.z = ( D_c * lapl.z / (dx*dx) + a - c ) / theta;\n    \n    // initialize with overlapping circles to produce gliders\n    if(iFrame == 0) {\n        fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n        vec2 pos1 = vec2(0.5, 0.5) * iResolution.xy;\n        vec2 pos2 = vec2(0.52, 0.51) * iResolution.xy;\n        float rad = 0.05 * iResolution.x;\n        vec3 ccol1 = vec3(1.5, -0.75, 0.0);\n        vec3 ccol2 = vec3(-0.75, 1.5, 0.0);\n        vec4 oColor = circle(fragCoord.xy, pos1, rad, ccol1);\n        oColor += circle(fragCoord.xy, pos2, rad, ccol2);\n        fragColor = oColor;\n        return;\n    }\n    \n    fragColor = vec4(texture(iChannel0, uv).xyz + delta * timestep,1.0);\n}","name":"Buf A","description":"","type":"buffer"}]}