{"ver":"0.1","info":{"id":"3ddBRH","date":"1604524574","viewed":89,"name":"Alien 3d","username":"iuryBorgesRodrigues","description":"Alien 3d","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["alien3d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define AA 1\n\nmat3 rotate_x(float a){float sa = sin(a); float ca = cos(a); return mat3(1.,.0,.0,    .0,ca,sa,   .0,-sa,ca);}\nmat3 rotate_y(float a){float sa = sin(a); float ca = cos(a); return mat3(ca,.0,sa,    .0,1.,.0,   -sa,.0,ca);}\nmat3 rotate_z(float a){float sa = sin(a); float ca = cos(a); return mat3(ca,sa,.0,    -sa,ca,.0,  .0,.0,1.);}\n\n\n\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat dot2( in vec3 v ) { return dot(v,v); }\nfloat ndot( in vec2 a, in vec2 b ) { return a.x*b.x - a.y*b.y; }\n\nfloat sdRoundCone( vec3 p, float r1, float r2, float h )\n{\n  vec2 q = vec2( length(p.xz), p.y );\n    \n  float b = (r1-r2)/h;\n  float a = sqrt(1.0-b*b);\n  float k = dot(q,vec2(-b,a));\n    \n  if( k < 0.0 ) return length(q) - r1;\n  if( k > a*h ) return length(q-vec2(0.0,h)) - r2;\n        \n  return dot(q, vec2(a,b) ) - r1;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\nfloat sdCone( in vec3 p, in vec2 c, float h )\n{\n  // c is the sin/cos of the angle, h is height\n  // Alternatively pass q instead of (c,h),\n  // which is the point at the base in 2D\n  vec2 q = h*vec2(c.x/c.y,-1.0);\n    \n  vec2 w = vec2( length(p.xz), p.y );\n  vec2 a = w - q*clamp( dot(w,q)/dot(q,q), 0.0, 1.0 );\n  vec2 b = w - q*vec2( clamp( w.x/q.x, 0.0, 1.0 ), 1.0 );\n  float k = sign( q.y );\n  float d = min(dot( a, a ),dot(b, b));\n  float s = max( k*(w.x*q.y-w.y*q.x),k*(w.y-q.y)  );\n  return sqrt(d)*sign(s);\n}\nfloat sdEllipsoid( vec3 p, vec3 r )\n{\n  float k0 = length(p/r);\n  float k1 = length(p/(r*r));\n  return k0*(k0-1.0)/k1;\n}\n\nfloat sdCappedCone( vec3 p, float h, float r1, float r2 )\n{\n  vec2 q = vec2( length(p.xz), p.y );\n  vec2 k1 = vec2(r2,h);\n  vec2 k2 = vec2(r2-r1,2.0*h);\n  vec2 ca = vec2(q.x-min(q.x,(q.y<0.0)?r1:r2), abs(q.y)-h);\n  vec2 cb = q - k1 + k2*clamp( dot(k1-q,k2)/dot2(k2), 0.0, 1.0 );\n  float s = (cb.x<0.0 && ca.y<0.0) ? -1.0 : 1.0;\n  return s*sqrt( min(dot2(ca),dot2(cb)) );\n}\n\n\n\nfloat sdCappedCylinder( vec3 p, float h, float r )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(h,r);\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\nfloat sdVerticalCapsule( vec3 p, float h, float r )\n{\n  p.y -= clamp( p.y, 0.0, h );\n  return length( p ) - r;\n}\nfloat opSmoothSubtraction( float d1, float d2, float k )\n{\n    float h = max(k-abs(-d1-d2),0.0);\n    return max(-d1, d2) + h*h*0.25/k;\n\t//float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\n\t//return mix( d2, -d1, h ) + k*h*(1.0-h);\n}\n\nfloat opSmoothUnion( float d1, float d2, float k )\n{\n    float h = max(k-abs(d1-d2),0.0);\n    return min(d1, d2) - h*h*0.25/k;\n\t//float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n\t//return mix( d2, d1, h ) - k*h*(1.0-h);\n}\n\n\n\nvec2 opU( vec2 d1, vec2 d2 )\n{\n\treturn (d1.x<d2.x) ? d1 : d2;\n}\nvec2 map( in vec3 p, float atime )\n{\n    p.x+=0.3;\n    p.z-=0.8;\n    p.y-=0.5;\n    p/=vec3(0.5);\n    vec3 p1=p;\n    \n    p1+=vec3(0.0,-0.5,-0.1);\n    p1*=rotate_x(-2.2);\n    \n    \n    vec3 p2=p;\n    p2+=vec3(0.0,0.28,0.58);\n    p2/=vec3(.7);\n    p2*=rotate_x(-0.8);\n\t\n    vec3 p3=p;\n    p3+=vec3(0.0,0.4,0.4);\n    p3/=vec3(.7);\n    p3*=rotate_x(2.);\n    \n    \n    vec3 p4=p;\n    p4/=vec3(1.05,1.6,1.05);\n    p4+=vec3(0.0,0.6,0.2);\n    \n    p4*=rotate_x(2.0);\n    \n    \n    vec3 p5=p;\n    p5/=vec3(1.15);\n    p5+=vec3(0.0,0.45,0.1);\n    \n    p5*=rotate_x(2.3);\n    \n    \n    vec3 p6=p;\n    p6/=vec3(0.95,1.3,0.95);\n    p6+=vec3(0.0,0.6,-0.045);\n    \n    p6*=rotate_x(2.6);\n    \n    vec3 p7=vec3(abs(p.x),p.yz);\n    p7+=vec3(-0.2,1.1,-0.1);\n    p7/=vec3(0.4);\n    p7*=rotate_z(1.0);\n    \n    vec3 p8=vec3(abs(p.x),p.yz);\n    p8+=vec3(-0.3,1.16,-0.1);\n    p8/=vec3(0.32);\n    p8*=rotate_z(-2.3);\n    \n    vec3 p9=vec3(abs(p.x),p.yz);\n    p9+=vec3(-0.75,1.5,-0.1);\n    p9/=vec3(0.32);\n    p9*=rotate_z(1.0);\n    \n    vec3 p10=vec3(abs(p.x),p.yz);\n    p10+=vec3(-0.77,1.8,-0.25);\n    p10*=rotate_x(-0.5);\n    \n    \n    vec3 p11=vec3(abs(p.x),p.yz);\n    p11+=vec3(-0.25,0.6,0.18);\n    p11/=vec3(0.4);\n    p11*=rotate_z(1.0);\n    \n    p/=vec3(0.8);\n    p+=vec3(-0.008,0.15,0.01);\n    \n    vec3 p12=vec3(abs(p.x),p.yz);\n    p12+=vec3(-0.42,0.65,0.2);\n    p12/=vec3(0.4);\n    p12*=rotate_z(-3.0);\n    \n    vec3 p13=vec3(abs(p.x),p.yz);\n    p13+=vec3(-0.45,1.15,0.2);\n    p13/=vec3(0.3);\n    p13*=rotate_z(-3.0);\n    p13*=rotate_x(-1.0);\n    \n    vec3 p14=vec3(abs(p.x),p.yz);\n    p14+=vec3(-0.45,1.48,0.8);\n    p14/=vec3(0.3);\n    p14*=rotate_z(3.0);\n    p14*=rotate_x(2.0);\n    \n    p/=vec3(1.0);\n    vec3 p15=p;\n    p15+=vec3(0.08,1.2,-0.35);\n    p15*=rotate_x(-1.0);\n  \n    vec3 p16=p;\n    p16+=vec3(0.08,1.55,-0.9);\n    p16*=rotate_x(-1.0);\n    \n    vec3 p17=p;\n    p17/=vec3(0.8);\n    p17+=vec3(0.08,2.12,-1.8);\n    p17*=rotate_x(-1.3);\n    \n    vec3 p18=p;\n    p18/=vec3(0.5);\n    p18+=vec3(0.08,3.4,-3.0);\n    p18*=rotate_x(1.3);\n    \n    vec3 p19=p;\n    p19+=vec3(0.0,0.0,0.99);\n    \n    \n    \n    vec3 p20=vec3(abs(p.x),p.yz);\n    p20+=vec3(-0.15,0.0,1.13);\n    p20*=rotate_y(-0.5);\n    \n    vec3 p21=p;\n    p21+=vec3(0.0,0.15,0.9);\n    \n    \n    float parteCimaCabeca=sdEllipsoid(p19,vec3(0.15,0.15,0.28));\n    float olho=sdEllipsoid(p20,vec3(0.02,0.025,0.07));\n    float rosto=sdEllipsoid(p21,vec3(0.15,0.15,0.28));\n    \n    \n    \n    float cabeca=sdRoundCone(p1,0.05,0.16,1.0);\n    float pescoco=sdCappedCone(p2,0.15,0.08,0.15);\n    float pescoco2=sdCappedCone(p3,0.2,0.08,0.2);\n    float body=sdVerticalCapsule(p5,0.1,0.2);\n    float body2=sdVerticalCapsule(p6,0.1,0.2);\n    float coxa=sdCappedCone(p7,0.3,0.1,0.3);\n\tfloat coxa2=sdRoundCone(p8,0.15,0.25,0.8);\n    float coxa3=sdRoundCone(p9,0.15,0.25,0.8);\n    float perna1=sdVerticalCapsule(p10,0.3,0.05);\n    float braco=sdCappedCone(p11,0.3,0.1,0.3);\n    float braco2=sdRoundCone(p12,0.1,0.2,1.2);\n    float braco3=sdRoundCone(p13,0.2,0.2,1.2);\n    float braco4=sdRoundCone(p14,0.1,0.2,1.0);\n    float rabo=sdCappedCone(p15,0.15,0.08,0.15);\n    float rabo2=sdVerticalCapsule(p16,0.7,0.08);\n    float rabo3=sdVerticalCapsule(p17,0.7,0.08);\n    float rabo4=sdRoundCone(p18,0.12,0.08,1.0);\n    \n    \n    pescoco=opSmoothUnion(pescoco,pescoco2,0.01);\n    braco3=opSmoothUnion(braco4,braco3,0.05);\n    braco2=opSmoothUnion(braco2,braco3,0.05);\n    braco=opSmoothUnion(braco2,braco,0.05);\n    rabo3=opSmoothUnion(rabo3,rabo4,0.05);\n    rabo2=opSmoothUnion(rabo3,rabo2,0.01);\n    rabo=opSmoothUnion(rabo,rabo2,0.01);\n    body=opSmoothUnion(body,rabo,0.01);\n    body=opSmoothUnion(body,braco,0.01);\n    body=opSmoothUnion(body,pescoco,0.01);\n    coxa2=opSmoothUnion(coxa2,perna1,0.01);\n    coxa2=opSmoothUnion(coxa2,coxa3,0.01);\n    body2=opSmoothUnion(body2,coxa,0.01);\n    coxa=opSmoothUnion(coxa,coxa2,0.05);\n    body2=opSmoothUnion(body2,coxa,0.01);\n    cabeca=min(cabeca,body);\n    cabeca=min(cabeca,body2);\n    \n    \n    \n\tcabeca=opSmoothUnion(cabeca,parteCimaCabeca,0.1);\n    cabeca=opSmoothUnion(cabeca,rosto,0.1);\n    cabeca=min(cabeca,olho);\n  \n    vec2 res = vec2( cabeca*0.1, 1.0 );\n    \n    \n    \n    return res;\n}\n\nvec2 castRay( in vec3 ro, in vec3 rd, float time )\n{\n    vec2 res = vec2(-1.0,-1.0);\n\n    float tmin = 0.5;\n    float tmax = 20.0;\n    \n    float t = tmin;\n    for( int i=0; i<512 && t<tmax; i++ )\n    {\n        vec2 h = map( ro+rd*t, time );\n        if( h.x<0.001 )\n        { \n            res = vec2(t,h.y); \n            break;\n        }\n        t += h.x;\n    }\n    \n    return res;\n}\n\nvec3 calcNormal( in vec3 pos, float time )\n{\n/*\n    vec2 e = vec2(0.0005,0.0);\n    return normalize( vec3( \n        map( pos + e.xyy, time ).x - map( pos - e.xyy, time ).x,\n\t\tmap( pos + e.yxy, time ).x - map( pos - e.yxy, time ).x,\n\t\tmap( pos + e.yyx, time ).x - map( pos - e.yyx, time ).x ) );\n*/\n    vec3 n = vec3(0.0);\n    for( int i=min(iFrame,0); i<4; i++ )\n    {\n        vec3 e = 0.5773*(2.0*vec3((((i+3)>>1)&1),((i>>1)&1),(i&1))-1.0);\n        n += e*map(pos+0.0005*e,time).x;\n    }\n    return normalize(n);    \n}\n\nfloat calcOcclusion( in vec3 pos, in vec3 nor, float time )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.01 + 0.11*float(i)/4.0;\n        vec3 opos = pos + h*nor;\n        float d = map( opos, time ).x;\n        occ += (h-d)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 2.0*occ, 0.0, 1.0 );\n}\n\nvec3 render( in vec3 ro, in vec3 rd, float time )\n{ \n    // sky dome\n    vec3 col = vec3(0.5, 0.8, 0.9) - max(rd.y,0.0)*0.5;\n    \n    vec2 res = castRay(ro,rd, time);\n    if( res.y>-0.5 )\n    {\n        float t = res.x;\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal( pos, time );\n        vec3 ref = reflect( rd, nor );\n        \n\t\tcol = vec3(0.2);\n        float ks = 1.0;\n\n        if( res.y==3.5 ) // eyeball\n        { \n            col = vec3(0.4,0.5,0.6);\n        } \n        else if( res.y==2.5 ) // iris\n        { \n            col = vec3(0.0);\n        } \n        else if( res.y==2.0 ) // body\n        { \n            col = vec3(1.0);\n        }\n\t\telse // terrain\n        {\n            col = vec3(0.05,0.09,0.02);\n        }\n        \n        // lighting\n        vec3  sun_lig = normalize( vec3(0.6, 0.35, 0.5) );\n        float sun_dif = clamp(dot( nor, sun_lig ), 0.0, 1.0 );\n        vec3  sun_hal = normalize( sun_lig-rd );\n        float sun_sha = step(castRay( pos+0.001*nor, sun_lig,time ).y,0.0);\n\t\tfloat sun_spe = ks*pow(clamp(dot(nor,sun_hal),0.0,1.0),8.0)*sun_dif*(0.04+0.96*pow(clamp(1.0+dot(sun_hal,rd),0.0,1.0),5.0));\n\t\tfloat sky_dif = sqrt(clamp( 0.5+0.5*nor.y, 0.0, 1.0 ));\n        float bou_dif = sqrt(clamp( 0.1-0.9*nor.y, 0.0, 1.0 ))*clamp(1.0-0.1*pos.y,0.0,1.0);\n\n\t\tvec3 lin = vec3(0.0);\n        lin += sun_dif*vec3(8.10,6.00,4.20)*sun_sha;\n        lin += sky_dif*vec3(0.50,0.70,1.00);\n        lin += bou_dif*vec3(0.40,1.00,0.40);\n\t\tcol = col*lin;\n\t\tcol += sun_spe*vec3(8.10,6.00,4.20)*sun_sha;\n        \n        col = mix( col, vec3(0.5,0.7,0.9), 1.0-exp( -0.0001*t*t*t ) );\n    }\n\n    return col;\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv =          ( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\n#define ZERO (min(iFrame,0))\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    \t vec3 tot = vec3(0.0);\n\n    for( int m=ZERO; m<AA; m++ )\n    for( int n=ZERO; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5; \n\t\n\t\n    vec2 p = (-iResolution.xy + 2.0*fragCoord+o)/iResolution.y;\n    float time = iTime;\n\n    time *= 0.9;\n\n    // camera\t\n    float an = 10.57*iMouse.x/iResolution.x;\n    vec3  ta = vec3( 0.0, 0.0, 0.4);\n    vec3  ro = ta + vec3( 1.3*cos(an), -0.250, 1.3*sin(an) );\n\n    mat3 ca = setCamera( ro, ta, 0.0 );\n\n    vec3 rd = ca * normalize( vec3(p,1.8) );\n\n    vec3 col = render( ro, rd, time );\n\n    col = pow( col, vec3(0.4545) );\n\n    tot += col;\n    }\n     tot /= float(AA*AA);\n    fragColor = vec4(tot,1.0);\n}\n","name":"Image","description":"","type":"image"}]}