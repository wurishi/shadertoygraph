{"ver":"0.1","info":{"id":"WtKXz3","date":"1583278564","viewed":77,"name":"2/2020","username":"rimina","description":"Second shader of my second take on daily shaders. Well it's kind of nothing but I'll get back to it.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define STEPS 64\n#define E 0.001\n#define FAR 20.0\n\nfloat scene(in vec3 p){\n    return length(p)-1.5;\n}\n\nfloat march(in vec3 o, in vec3 d, out vec3 p, out bool hit){\n    float t = E;\n    for(int i = 0; i < STEPS; ++i){\n        p = o + d*t;\n        float dist = scene(p);\n        t += dist;\n        if(dist < E || t > FAR){\n            if(dist < E ){\n            \thit = true;\n            }\n            break;\n        }\n    }\n    \n    return t;\n}\n\nvec3 normal(in vec3 p){\n    vec3 eps = vec3(E, 0.0, 0.0);\n    return normalize(vec3(\n        scene(p+eps.xyy) - scene(p-eps.xyy),\n        scene(p+eps.yxy) - scene(p-eps.yxy),\n        scene(p+eps.yyx) - scene(p-eps.yyx)\n    ));\n}\n\nvec3 shade(in vec3 p, in vec3 d, in vec3 ld){\n    \n    vec3 n = normal(p);\n    float lamb = max(dot(n,ld), 0.0);\n    vec3 angle = reflect(n, ld);\n    float spec = pow(max(dot(d, angle), 0.0), 20.0);\n    \n    return vec3(0.5, 0.3, 0.8)*0.3 + lamb*vec3(0.5, 0.0, 0.5)*0.5 + spec*vec3(1.0, 0.5, 1.0)*0.8;\n}\n\nmat3 camera(in vec3 o, in vec3 t, in vec3 up){\n    \n    vec3 z = normalize(t-o);\n    vec3 x = normalize(cross(z, up));\n    vec3 y = normalize(cross(x, z));\n    \n    return mat3(x, y, z);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = uv*2.0-1.0;//scaling from -1 to 1\n    uv.x *= (iResolution.x/iResolution.y);\n    \n    vec3 origin = vec3(0.0, 0.0, 3.0);\n    vec3 target = vec3(0.0, 0.0, -1.0);\n    vec3 up = vec3(0.0, 1.0, 0.0);\n    \n    mat3 cam = camera(origin, target, up);\n    vec3 dir = normalize(cam*vec3(uv, radians(50.0)));\n    \n    vec3 p = vec3(0.0);\n    bool hit = false;\n    float t = march(origin, dir, p, hit);\n    vec3 col = vec3(1.0);\n    \n    vec3 lp = vec3(0.0, 0.5, 1.0);\n    vec3 lt = vec3(0.0, 0.0, -1.0);\n    vec3 ld = normalize(lt-lp);\n    \n    if(hit){\n        col = shade(p, dir, ld);\n    }\n    if(t >= FAR){\n        col = vec3(1.0);\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}