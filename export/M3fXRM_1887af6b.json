{"ver":"0.1","info":{"id":"M3fXRM","date":"1710867452","viewed":69,"name":"Smooth Voronoi VFX","username":"Eboman","description":"Mouse x = FX amount\nMouse y = FX parameter control\nPress key 1 to 6 on keyboard = FX parameter on/off\nFX parameter descriptions in top shader comment","likes":4,"published":1,"flags":16,"usePreview":0,"tags":["voronoi","vfx","smooth"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n/*\n\nCONTROLS_________________:\n\nMouse x = FX amount\nMouse y = FX parameter control\nPress key 1 to 6 on keyboard = FX parameter on/off\n\nFX parameters:\n1 = Amplify amount *3. on/off\n2 = Crunch\n3 = Voronoi variation 01\n4 = Voronoi variation 02\n5 = Liney\n6 = Wrap\n\n\nCREDITS__________________:\n\nBased on the Smooth Voronoi Contours shader by Shane  \nhttps://www.shadertoy.com/view/4sdXDX\n\nRemixed into a video effect by:\nwww.eboman.com\n\n*/\n\n#define uMzero  (1.-(iMouse.x/iResolution.x))\n//#define uMone   ((iMouse.y/iResolution.y) * kp(49) + (1.   *(1.-kp(49)))) \n#define uMtwo   ((iMouse.y/iResolution.y) * kp(50) + (0.   *(1.-kp(50))))\n#define uMthree ((iMouse.y/iResolution.y) * kp(51) + (0.5  *(1.-kp(51))))\n#define uMfour  ((iMouse.y/iResolution.y) * kp(52) + (0.8  *(1.-kp(52))))\n#define uMfive  ((iMouse.y/iResolution.y) * kp(53) + (0.   *(1.-kp(53))))\n#define uMsix   ((iMouse.y/iResolution.y) * kp(54) + (0.   *(1.-kp(54))))\n\nfloat kp(int k){\n    float kp = texelFetch( iChannel1, ivec2(k,2), 0 ).x;\n    return kp;\n}\n\nvec3 ifcrcl(vec3 fcolif, vec2 uvif, vec2 m, vec3 ifcolor, vec2 ifpos, int k, float korm){   \n    fcolif = mix( fcolif, ifcolor, \n        (1.-smoothstep(.3,.31,length(uvif-ifpos)*15.))*kp(k)*max(m.y,korm));\n    fcolif = mix( fcolif, ifcolor*kp(k)+.5-kp(k)/2., \n        (1.0-smoothstep(0.0,0.06,abs(length(uvif-ifpos)*15.-0.3))));\n    return fcolif;\n}\n\nvec2 hash22(vec2 p) {\n    float n = sin(dot(p, vec2(41, 289)));\n    p = fract(vec2(2097152, 262144)*n);\n    return cos(p*6.283 + iTime)*.5;\n}\n\nfloat smoothVoronoi(vec2 p, float falloff) {\n    vec2 ip = floor(p); \n         p -= ip;\n    float d = 1., \n          res = .0;    \n    for(int i = -1; i <= 2; i++) {\n        for(int j = -1; j <= 2; j++) {           \n            vec2 b = vec2(i, j);\n            vec2 v = b - p + hash22(ip + b);\n            d = max(dot((100000.*pow(uMsix, 10.)+1.)*v,v), 1e-4);       \n            res += 1.0/pow( d, falloff);\n        }\n    }\n    return pow( 1./res, .5/falloff );\n}\n\n\nfloat func2D(vec2 p){    \n    float d = smoothVoronoi(p*2., 4.)*.66*((uMthree)*4.) + smoothVoronoi(p*6., 4.)*.34*((uMfour*(1.-uMtwo))*4.); \n    return sqrt(d);   \n}\n\nfloat smoothFract(float x, float sf){\n    x = fract(x); return min(x, x*(1.-x)*sf);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy-iResolution.xy*.5) / iResolution.y;\n    vec2 uv1 = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y); \n    \n    vec2 m = vec2(iMouse.x/iResolution.x, pow(iMouse.y/iResolution.y, 0.5));\n    \n    vec2 e = vec2(0.001, 0); \n    float f = func2D(uv); \n    float g = length( vec2(f - func2D(uv-e.xy), f - func2D(uv-e.yx)) )/(e.x);\n    float freq = 12.; \n    float smoothFactor = iResolution.y*0.0125;\n    \n    g = 1./max(g, 0.001);\n\n    float c = clamp(cos(f*freq*3.14159*2.)*g*smoothFactor, 0., 1.);\n    \n    vec2 uv2 = vec2(f, g); uv2 = fract(uv2*(10.*(uMfive)+1.));\n         \n    vec2 uv3 = mix(uv1, uv2+vec2(1.1-uMzero*1.1,uMzero*1.1), pow((uMzero*(2.*kp(49)+1.))/3., 2.));\n                  \n    vec2 uv4 = mix(uv3, mix(uv3*(f*3.)-uMtwo, fract(uv3*(f*3.)-uMtwo), uMsix), uMtwo);\n    \n    vec4 video=texture(iChannel0, uv4);\n\n   // Interface\n    vec2 uvif = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n    uvif -= 0.5; \n    uvif /= vec2(iResolution.y / iResolution.x, 1);   \n    vec3 fcolif = video.rgb;\n    \n    // Interface Mouse.x    \n    fcolif = mix( fcolif, vec3(0.,1.,1.), \n        (1.-smoothstep(0.3,0.31,length(uvif-vec2(-0.84,0.45))*15.))*(1.-m.x));\n    fcolif = mix( fcolif, vec3(0.,1.,1.), \n        (1.0-smoothstep(0.0,0.06,abs(length(uvif-vec2(-0.84,0.45))*15.-0.3))));\n        \n    // Interface Mouse.y        \n    fcolif = ifcrcl(fcolif, uvif, m, vec3(1.,0.,0.), vec2(-.84,.38), 49, 1.);   \n    fcolif = ifcrcl(fcolif, uvif, m, vec3(1.,0.,0.), vec2(-.84,.31), 50, 0.);\n    fcolif = ifcrcl(fcolif, uvif, m, vec3(1.,0.,0.), vec2(-.84,.24), 51, 0.);   \n    fcolif = ifcrcl(fcolif, uvif, m, vec3(1.,0.,0.), vec2(-.84,.17), 52, 0.);\n    fcolif = ifcrcl(fcolif, uvif, m, vec3(1.,0.,0.), vec2(-.84,.10), 53, 0.);   \n    fcolif = ifcrcl(fcolif, uvif, m, vec3(1.,0.,0.), vec2(-.84,.03), 54, 0.);\n  \n    // Final output\n    fragColor = vec4(fcolif, 1.0 );  \n}\n\n\n \n\n\n\n\n\n\n\n\n","name":"Image","description":"","type":"image"}]}