{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"texture","id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}},{"channel":1,"type":"texture","id":"Xsf3Rr","filepath":"/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}}],"code":"// Based on shaders :\n//   - https://www.shadertoy.com/view/fsdyzB\n//   - https://www.shadertoy.com/view/ltScRG\n//   - https://www.shadertoy.com/view/XsKSWc\n\n\n// TODO: Shadow 'u_colorShadow.a' is unused; Only used 'u_colorShadow.rgb' components\n\n\n// from https://iquilezles.org/articles/distfunctions\n// additional thanks to iq for optimizing conditional block for individual corner radii!\nfloat roundedBoxSDF(vec2 CenterPosition, vec2 Size, vec4 Radius)\n{\n    Radius.xy = (CenterPosition.x > 0.0) ? Radius.xy : Radius.zw;\n    Radius.x  = (CenterPosition.y > 0.0) ? Radius.x  : Radius.y;\n    \n    vec2 q = abs(CenterPosition)-Size+Radius.x;\n    return min(max(q.x,q.y),0.0) + length(max(q,0.0)) - Radius.x;\n}\n\n\n// Applying gaussian at intermediate MIPmap level.\nconst int maxSamples = 4,\n          LOD = 2,         // gaussian done on MIPmap at scale LOD\n          sLOD = 1 << LOD; // tile size = 2^LOD\nconst float sigma = float(maxSamples) * .25;\nfloat gaussian(vec2 i) {\n    return exp( -.5* dot(i/=sigma,i) ) / ( 6.28 * sigma*sigma );\n}\nvec4 blur(sampler2D sp, vec2 U, vec2 scale) {\n    vec4 O = vec4(0);  \n    int s = int(maxSamples)/sLOD;\n    \n    for ( int i = 0; i < s*s; i++ ) {\n        vec2 d = vec2(i%s, i/s)*float(sLOD) - float(maxSamples)/2.;\n        O += gaussian(d) * textureLod( sp, U + scale * d , float(LOD) );\n    }\n    return O / O.a;\n}\n \n// Photoshop Blending https://www.shadertoy.com/view/XdS3RW & https://en.wikipedia.org/wiki/Blend_modes\nvec3 multiply( vec3 s, vec3 d )\n{\n\treturn s * d;\n}\nvec3 screen( vec3 s, vec3 d )\n{\n    return 1.0 - ( 1.0 - s ) * ( 1.0 - d );\n}\nfloat overlay( float s, float d )\n{\n\treturn (s < 0.5) ? 2.0 * s * d : 1.0 - 2.0 * (1.0 - s) * (1.0 - d);\n}\nvec3 overlay( vec3 s, vec3 d )\n{\n\tvec3 c;\n\tc.x = overlay(s.x,d.x);\n\tc.y = overlay(s.y,d.y);\n\tc.z = overlay(s.z,d.z);\n\treturn c;\n}\nfloat softLight( float s, float d )\n{\n\treturn (s < 0.5) ? d - (1.0 - 2.0 * s) * d * (1.0 - d) \n\t\t: (d < 0.25) ? d + (2.0 * s - 1.0) * d * ((16.0 * d - 12.0) * d + 3.0) \n\t\t\t\t\t : d + (2.0 * s - 1.0) * (sqrt(d) - d);\n}\nvec3 softLight( vec3 s, vec3 d )\n{\n\tvec3 c;\n\tc.x = softLight(s.x,d.x);\n\tc.y = softLight(s.y,d.y);\n\tc.z = softLight(s.z,d.z);\n\treturn c;\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // =========================================================================\n    // Inputs (uniforms)\n\n    vec2  u_rectSize   = vec2(450.0, 250.0);     // The pixel-space scale of the rectangle.\n    vec2  u_rectCenter = (iResolution.xy / 2.0); // The pixel-space rectangle center location\n    \n    float u_edgeSoftness   = 2.0; // How soft the edges should be (in pixels). Higher values could be used to simulate a drop shadow.\n    vec4  u_cornerRadiuses = vec4(10.0, 10.0, 10.0, 10.0); // The radiuses of the corners(in pixels): [topRight, bottomRight, topLeft, bottomLeft]\n    \n    // Border\n    float u_borderThickness = 2.0; // The border size (in pixels) \n    float u_borderSoftness  = 1.0; // How soft the (internal) border should be (in pixels)\n    \n    // Shadow & Light Softness\n    float u_shadowSoftness = 40.0;            // The (half) shadow radius (in pixels)\n    vec2  u_shadowOffset   = vec2(-25.0, 25.0); // The pixel-space shadow offset from rectangle center\n    float u_lightSoftness = 40.0;            // The (half) light radius (in pixels)\n    vec2  u_lightOffset   = vec2(25.0, -25.0); // The pixel-space light offset from rectangle center\n    \n    // Colors\n    vec4  u_colorBg     = vec4(0.93, 0.93, 0.93, 1.0); // The color of background\n    vec4  u_colorRect   = vec4(1.0,  0.30, 0.45, 1.0); // The color of rectangle\n    vec4  u_colorBorder = vec4(0.0,  0.0, 0.95, 0.0); // The color of (internal) border\n    vec4  u_colorShadow = vec4(0.0,  0.0,  0.0,  1.5); // The color of shadow ( bottom right )\n    vec4  u_colorLight = vec4(1.0,  1.0,  1.0,  1.5); // The color of light ( top left )\n    \n    // Animation ( set this to 1.0 to prevent animation )\n    float progress = ( sin(iTime) + 1.0 ) / 2.0;\n    //progress = 1.0;\n    \n    // Change Color BG into a texture from iChannel0\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    u_colorBg = vec4( texture(iChannel0, uv).xyz, 1.0 );\n    \n    // Change Color Rect into a Blurred version of iChannel0 ( using iChannel1 as noise )\n    float noiseAmount = 0.05 * progress;\n\n    vec3 noise = texture(iChannel1, uv).xyz;\n    float blurAmount = 4.0 + float(maxSamples) * progress;\n\t//u_colorRect = vec4( texture(iChannel0, uv + noise.xy * noiseAmount).xyz, 1.0 );\n    u_colorRect = blur( iChannel0, uv + noise.xy * noiseAmount, 1./iChannelResolution[0].xy );\n    u_colorRect.a = progress;\n    \n    // Change Color Border with Overlayed version of iChannel0\n    \n    \n    \n    // =========================================================================\n\n    vec2 halfSize = (u_rectSize / 2.0); // Rectangle extents (half of the size)\n    \n    vec4 radius = vec4((sin(iTime) + 1.0)) * u_cornerRadiuses; // Animated corners radiuses\n    radius = u_cornerRadiuses;\n    \n    // -------------------------------------------------------------------------\n    \n    // Calculate distance to edge.   \n    float distance = roundedBoxSDF(fragCoord.xy - u_rectCenter, halfSize, u_cornerRadiuses);\n       \n    // Smooth the result (free antialiasing).\n    float smoothedAlpha = 1.0-smoothstep(0.0, u_edgeSoftness, distance);\n    \n    // -------------------------------------------------------------------------\n    // Border.\n    \n    float borderAlpha   = 1.0-smoothstep(u_borderThickness - u_borderSoftness, u_borderThickness, abs(distance));\n    \n    // -------------------------------------------------------------------------\n    // Apply a drop shadow effect.\n    float shadowDistance  = roundedBoxSDF(fragCoord.xy - u_rectCenter + u_shadowOffset, halfSize, u_cornerRadiuses);\n    float shadowAlpha \t  = 1.0-smoothstep(-u_shadowSoftness, u_shadowSoftness, shadowDistance);\n    \n    // Apply a drop light effect.\n    float lightDistance  = roundedBoxSDF(fragCoord.xy - u_rectCenter + u_lightOffset, halfSize, u_cornerRadiuses);\n    float lightAlpha \t  = 1.0-smoothstep(-u_lightSoftness, u_lightSoftness, lightDistance);\n\n\n    // -------------------------------------------------------------------------\n    // Apply colors layer-by-layer: background <- light ( screen ) <- shadow ( mix ) <- rect <- border ( overlay ).\n    \n    // Blend background with light\n    vec4 res_light_color = mix( u_colorBg, vec4( softLight( u_colorBg.rgb, screen( u_colorBg.rgb, u_colorBg.rgb ) ), 1.0 ), u_colorShadow.a * lightAlpha * progress );\n\n    // Blend background with shadow\n    vec4 res_shadow_color = mix( res_light_color, vec4( multiply( res_light_color.rgb, overlay( u_colorBg.rgb, u_colorBg.rgb ) ), 1.0 ), u_colorShadow.a * shadowAlpha * progress );\n\n\n    // Blend (background+shadow) with rect\n    //   Note:\n    //     - Used 'min(u_colorRect.a, smoothedAlpha)' instead of 'smoothedAlpha'\n    //       to enable rectangle color transparency\n    vec4 res_shadow_with_rect_color = \n        mix(\n            res_shadow_color,\n            u_colorRect,\n            min(u_colorRect.a, smoothedAlpha)\n        );\n        \n    // Blend (background+shadow+rect) with border\n    //   Note:\n    //     - Used 'min(borderAlpha, smoothedAlpha)' instead of 'borderAlpha'\n    //       to make border 'internal'\n    //     - Used 'min(u_colorBorder.a, alpha)' instead of 'alpha' to enable\n    //       border color transparency\n    vec4 res_shadow_with_rect_with_border =\n        mix(\n            res_shadow_with_rect_color,\n            u_colorBorder,\n            min(u_colorBorder.a, min(borderAlpha, smoothedAlpha))\n        );\n    \n    // -------------------------------------------------------------------------\n     \n    fragColor = res_shadow_with_rect_with_border;\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"McyBD3","date":"1734524806","viewed":81,"name":"Blurred Frosted Glass + Rounded","username":"m4g1c14n","description":"Rounded Corner Rectangle With Shadow which material looks like a Blurred Frosted Glass\nAlso added the Before and After animation using a simple sin(iTime), where at 0 it will be minimally blurred and not noised","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","refraction","blur","filter","dof","gaussian","integration","frosted","pass","single","gpmipmap"],"hasliked":0,"parentid":"","parentname":""}}