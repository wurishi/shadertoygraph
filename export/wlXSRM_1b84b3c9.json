{"ver":"0.1","info":{"id":"wlXSRM","date":"1562372110","viewed":408,"name":"Rainbow waves","username":"ParaBellum","description":"Colors many colors :D. Move light with the mouse while clicking left button of the mouse","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["2d","colors","light","rainbow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.141592\n\nvec3 red = vec3(1., 0., 0.);\nvec3 orange = vec3(1., .49803, .0);\nvec3 yellow = vec3(1., 1., 0.);\nvec3 green = vec3(0., 1., 0.);\nvec3 blue = vec3(0., 0., 1.);\nvec3 purple = vec3(.2941, .0, .5098);\nvec3 pink = vec3(.5803, .0, .8274);\n\n// This shader is inspired from this shader: \n// https://www.shadertoy.com/view/4l2XWK made by Shane.\n\n// Function based on https://www.shadertoy.com/view/MlSSDV\n// from FabriceNeyret2's shader\n// originated from Fantomas' shader - https://www.shadertoy.com/view/ltSSDV\nfloat mixing(vec2 p)\n{\n    p *= 2.6;\n    float t = iTime*.1;\n    for (int i = 0; i <= 1; i++)\n    {\n    \tp += cos(p.yx * 3. + vec2(t, 1.6)) / 3.;\n        p += sin(p.yx + vec2(1.6+t, t)) / 2.;\n        p *= .6;\n    }\n    \n    p = abs(fract(p)*2.-1.);\n    return max(p.x,p.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 colors[7];\n    colors[0] = red;\n    colors[1] = orange;\n    colors[2] = yellow;\n    colors[3] = green;\n    colors[4] = blue;\n    colors[5] = purple;\n    colors[6] = pink;\n    \n    vec2 frag = fragCoord.xy;\n    vec2 uv = frag/iResolution.xy*2.-1.;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    vec2 e = vec2(1., 0.);\n    vec2 ms = iMouse.xy/iResolution.xy*2.-1.;\n    ms.x *= iResolution.x/iResolution.y;\n    \n    vec2 r_uv = (frag+e.xy)/iResolution.xy*2.-1.;\n    r_uv.x *= iResolution.x/iResolution.y;\n    \n    vec2 a_uv = (frag+e.yx)/iResolution.xy*2.-1.;\n    a_uv.x *= iResolution.x/iResolution.y;\n    \n    float h = mixing(uv);\n    float r_h = mixing(r_uv);\n    float a_h = mixing(a_uv);\n    \n    vec3 fragPos = vec3(uv, h);\n    vec3 r_fragPos = vec3(r_uv, r_h);\n    vec3 a_fragPos = vec3(a_uv, a_h);\n    \n    vec3 a = (r_fragPos - fragPos);\n    vec3 b = (a_fragPos - fragPos);\n    \n    vec3 nor = normalize(cross(a, b));\n    vec3 lightPos = vec3(ms, 3.);\n    vec3 lightDir = normalize(lightPos-fragPos);\n    float al = h*.5;\n    float dl = max(dot(nor, lightDir), 0.)*.75;\n    vec3 eyePos = vec3(0., 0., 2.);\n    vec3 halfWay = normalize(lightPos+eyePos);\n    float sl = pow(max(dot(nor, halfWay), 0.), 32.);\n    vec3 light = al*vec3(0.5) + dl*vec3(1., .9, .7) + sl*vec3(.9, .8, .8);\n    \n    vec3 col = vec3(0.);\n    col += light;\n    \n    for (int i = 0; i < 7; i++)\n        if (h > (1./7.*float(i)) && h < (1./7.*float(i+1)))\n            col *= mix(colors[i], colors[6-i], sin(iTime*.5))*light;\n    \n    fragColor = vec4(sqrt(clamp(col, 0., 1.)),1.0);\n}","name":"Image","description":"","type":"image"}]}