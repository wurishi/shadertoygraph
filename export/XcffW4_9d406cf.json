{"ver":"0.1","info":{"id":"XcffW4","date":"1723728364","viewed":28,"name":"simple uv playground","username":"poxel","description":"A simple playground for us newbies to visualize what happens when we transform coordinates of the screen. Shows a grid centered at (0,0) with marks for every unit legth 1. Modify uv before feeding it into the grid function.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["grid","noob","playground"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define LINE_THICKNESS 0.025\n#define MARKER_LENGTH 0.25\n\nfloat grid(vec2 uv) {\n    float x = step(MARKER_LENGTH, abs(uv.x));\n    float y = step(MARKER_LENGTH, abs(uv.y));\n    float markersMask = x*y;\n    \n    float Xlines = step(0.5 - LINE_THICKNESS, abs(fract(uv.x) - 0.5));\n    float Ylines = step(0.5 - LINE_THICKNESS, abs(fract(uv.y) - 0.5));\n    return Xlines + Ylines - markersMask;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    uv -= 0.5; // move to center\n    uv *= 6.; // scale the grid (zoom out and in)\n    uv *= iResolution.xy / min(iResolution.x, iResolution.y); // scale aspect ratio to get nice squares\n\n    // Time varying pixel color\n    vec3 col = vec3(grid(uv));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}