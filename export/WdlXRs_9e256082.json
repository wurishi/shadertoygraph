{"ver":"0.1","info":{"id":"WdlXRs","date":"1551901388","viewed":797,"name":"lens: bokeh blur, bruteforce","username":"hornet","description":"1-pass bokeh\nLMB to vary blursize.\nsee also https://www.shadertoy.com/playlist/ssdBWB","likes":17,"published":1,"flags":32,"usePreview":1,"tags":["blur","lens","filter","dof","bokeh","hexagon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float BLURDIST_PX = 64.0;\n\nvec3 srgb2lin(vec3 c) { return c*c; }\nvec3 lin2srgb(vec3 c) { return sqrt(c); }\n\nfloat remap( float a, float b, float t )\n{\n    return clamp( (t-a)/(b-a), 0.0, 1.0);\n}\n\n//note: uniform pdf rand [0;1[\nfloat hash12n(vec2 p)\n{\n\tp  = fract(p * vec2(5.3987, 5.4421));\n    p += dot(p.yx, p.xy + vec2(21.5351, 14.3137));\n\treturn fract(p.x * p.y * 95.4307);\n}\n//note: uniform pdf rand [0;1[\nvec2 hash22n(vec2 p)\n{\n\tp  = fract(p * vec2(5.3987, 5.4421));\n    p += dot(p.yx, p.xy +  vec2(21.5351, 14.3137));\n\treturn fract(vec2(p.x * p.y * 95.4307, p.y * p.x * 97.5901));\n}\n//////////////////////////////////////////////////////\n//note: from https://www.shadertoy.com/view/4d2Xzw\n// The Golden Angle is (3.-sqrt(5.0))*PI radians\nconst float GOLDEN_ANGLE = 2.39996323;\nmat2 rot = mat2(cos(GOLDEN_ANGLE), sin(GOLDEN_ANGLE), -sin(GOLDEN_ANGLE), cos(GOLDEN_ANGLE));\nvec3 Bokeh(sampler2D tex, vec2 uv, float radius)\n{\n    const int NUM_SAMPLES = 128;\n    const float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\n    vec3 sumcol = vec3(0.0);\n    vec2 rcp_pixelsiz = 1.0 / iResolution.xy;\n    float r = 1.0;\n    vec2 vangle = vec2(0.0, radius / float(NUM_SAMPLES/2)); //TODO: NUM_SAMPLES/2 is a random scale factor\n        \n\tfor (int j = 0; j < NUM_SAMPLES; j++)\n    {  \n        r += 1.0 / r; //TODO: what function fits this recursive series?\n\t    vangle = rot * vangle;\n        vec2 ofs = (r-1.0) * rcp_pixelsiz * vangle;\n\t\tsumcol += srgb2lin( texture(tex, uv + ofs, -10.0).rgb );\n\t}\n\treturn sumcol / float(NUM_SAMPLES);\n}\n\n//////////////////////////////////////////////////////\n//note: from http://blog.tuxedolabs.com/2018/05/04/bokeh-depth-of-field-in-single-pass.html\n//\nconst float RAD_SCALE = 1.0; // Smaller = nicer blur, larger = faster\nvec3 Bokeh_tuxedo(sampler2D tex, vec2 uv, float blursiz)\n{\n    vec3 color = texture(tex, uv).rgb;\n\tfloat tot = 1.0;\n\tfloat radius = RAD_SCALE;\n\tfor (float ang = 0.0; radius<blursiz; ang += GOLDEN_ANGLE)\n\t{\n\t\tvec2 tc = uv + vec2(cos(ang), sin(ang)) / iResolution.xy * radius;\n\t\tvec3 sampleColor = srgb2lin(texture(tex, tc, -10.0).rgb);\n\t\t//float m = smoothstep(radius-0.5, radius+0.5, blursiz); //note: from org\n        float m = remap(radius-0.5, radius+0.5, blursiz);\n\t\tcolor += mix(color/tot, sampleColor, m);\n\t\ttot += 1.0;\n        radius += RAD_SCALE/radius; //TODO: what function fits this recursive series?\n\t}\n\treturn color / tot;\n}\n\n//////////////////////////////////////////////////////\n\nvec3 Bokeh_tuxedo_jitter(sampler2D tex, vec2 uv, float blursiz, vec2 rnd2 )\n{\n    vec3 sumc = texture(tex, uv).rgb;\n\tfloat sumw = 0.0;\n\tfloat radius = RAD_SCALE;\n\n    const int NUM_SAMPLES = 16;\n    const float NUM_SAMPLES_F = float(NUM_SAMPLES);\n\n    float ang = rnd2.x * 6.28;\n    \n    float rad_stepsiz = blursiz / NUM_SAMPLES_F; //TODO: not the same as tuxedo, stepsize depends on distance from center...\n    float r = rad_stepsiz * rnd2.y;\n    for ( int i=0; i<NUM_SAMPLES; ++i )\n\t{\n        r += rad_stepsiz;\n\n        vec2 tc = uv + r * vec2(cos(ang), sin(ang)) / iResolution.xy;        \n\t\tvec3 sampleColor = srgb2lin(texture(tex, tc, -10.0).rgb);\n\t\t        \n        float w = r; //TODO: more efficient to set to 1 and distribute r better...\n        sumc += w * sampleColor;\n        sumw += w;\n        \n        //radius += RAD_SCALE/radius; //TODO: what function fits this recursive series?\n        \n        ang += GOLDEN_ANGLE;\n\t}\n\treturn sumc / sumw;\n}\n\n//////////////////////////////////////////////////////\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    float sinblur = ( 0.55 + 0.45 * sin( 5.0 * uv.x + iTime ) );\n    float blurdist = (iMouse.z>0.5) ? BLURDIST_PX * iMouse.x/iResolution.x : BLURDIST_PX * sinblur;\n\n    //vec2 rnd2 = hash22n( uv + iTime );\n    vec2 rnd2 = texelFetch( iChannel3, (ivec2( fragCoord.xy ) +1337*iFrame) % textureSize(iChannel3,0).xy, 0 ).rg;\n\n    //note: factors between methods are... uh... empirical.\n    //vec3 sumcol = Bokeh(iChannel0, uv, blurdist * 2.0);\n    vec3 sumcol = Bokeh_tuxedo(iChannel0, uv, blurdist/2.0);\n    //vec3 sumcol = Bokeh_tuxedo_jitter(iChannel0, uv, blurdist/2.0, rnd2);\n    \n    fragColor = vec4( lin2srgb(sumcol), 1.0 );\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsX3Rn","filepath":"/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","previewfilepath":"/media/ap/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define USE_RANDOM\n\nconst float blurdist_px = 64.0;\nconst int NUM_SAMPLES = 16;\n\nconst float THRESHOLD = 0.1;\nconst float MULT = 4.0;\n\nvec3 srgb2lin(vec3 c) { return c*c; }\nvec3 lin2srgb(vec3 c) { return sqrt(c); }\n\n//note: uniform pdf rand [0;1[\nfloat hash12n(vec2 p)\n{\n\tp  = fract(p * vec2(5.3987, 5.4421));\n    p += dot(p.yx, p.xy + vec2(21.5351, 14.3137));\n\treturn fract(p.x * p.y * 95.4307);\n}\n\nvec4 pattern( vec2 p )\n{\n    float aspect = iResolution.x/iResolution.y;\n    float p0 = step(abs(p.x-0.125), 0.01) * step(abs(p.y-0.27), 0.01);\n    float p1 = step( length( p-vec2(0.125, 0.45) ), 0.025 );\n    \n    float p2_0 = step( length( p-vec2(0.08, 0.14) ), 0.0125 );\n    float p2_1 = step( length( p-vec2(0.16, 0.125) ), 0.0125 );\n    float p2_2 = step( length( p-vec2(0.1, 0.07) ), 0.0125 );\n    float p2 = max(p2_0, max(p2_1,p2_2));\n    \n    return vec4( max( p0, max(p1,p2) ) );\n}\n\nvec3 sampletex( vec2 uv )\n{\n    float t = fract( 0.1*iTime );\n    if ( t < 1.0/3.0)\n    \treturn srgb2lin( texture( iChannel0, uv, -10.0 ).rgb );\n    else if ( t < 2.0/3.0 )\n        return srgb2lin( texture( iChannel1, uv, -10.0 ).rgb );\n    else\n\t    return srgb2lin( texture( iChannel2, uv, -10.0 ).rgb );    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 suv = fragCoord / iResolution.xy; \n    vec2 uv = fragCoord / iResolution.xx;\n    \n    vec3 sumcol = vec3(0);\n    if ( suv.x < 0.25 )\n        sumcol += pattern( uv ).rgb;\n    else\n    {\n        vec3 smpl = (sampletex(uv) - THRESHOLD) / (1.0-THRESHOLD);\n        sumcol += smpl*smpl; //wtf\n    }\n    //fragColor = vec4( lin2srgb(sumcol), 1.0 ); return;\n    \n    fragColor = vec4( lin2srgb( sumcol * MULT ), 1.0 );\n}\n","name":"Buffer A","description":"","type":"buffer"}]}