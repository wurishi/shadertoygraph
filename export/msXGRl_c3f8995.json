{"ver":"0.1","info":{"id":"msXGRl","date":"1666621439","viewed":66,"name":"3D Shader / Baskic Practice","username":"Baskic","description":"Just Practice","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["3d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float distLine(vec3 camOrigin, vec3 rayDirection, vec3 point)\n{\n    return length(cross(point - camOrigin, rayDirection))/length(rayDirection);\n}\n\nfloat drawPoint(vec3 camOrigin, vec3 rayDirection, vec3 pos)\n{\n    float t = iTime;\n    float d = distLine(camOrigin, rayDirection, pos*sin(t)*2.0);\n    d = smoothstep(0.9, 0.09, d);\n    return d;\n}\n\nfloat drawCube(vec3 cO, vec3 rD, vec3 pos)\n{\n    vec3 pos1 = pos + vec3(1.0, 0.0, 0.0);\n    vec3 pos2 = pos + vec3(-1.0, 0.0, 0.0);\n    vec3 pos3 = pos + vec3(1.0, 2.0, 0.0);\n    vec3 pos4 = pos + vec3(-1.0, 2.0, 0.0);\n    vec3 pos5 = pos + vec3(1.0, 0.0, 2.0);\n    vec3 pos6 = pos + vec3(-1.0, 0.0, 2.0);\n    vec3 pos7 = pos + vec3(1.0, 2.0, 2.0);\n    vec3 pos8 = pos + vec3(-1.0, 2.0, 2.0);\n    \n    float p1 = drawPoint(cO, rD, pos1);\n    float p2 = drawPoint(cO, rD, pos2);\n    float p3 = drawPoint(cO, rD, pos3);\n    float p4 = drawPoint(cO, rD, pos4);\n    float p5 = drawPoint(cO, rD, pos5);\n    float p6 = drawPoint(cO, rD, pos6);\n    float p7 = drawPoint(cO, rD, pos7);\n    float p8 = drawPoint(cO, rD, pos8);\n    float c = p1 + p2 + p3 + p4 + p5 + p6 + p7 + p8;\n    return c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t = iTime;\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    // (from -0.5 to 0.5)\n    uv -= 0.5;\n    // aspect ratio adjustment\n    uv.x *= iResolution.x / iResolution.y;\n\n    vec3 camOrigin = vec3(10.0*sin(t), 10.0*sin(t), -10.0*cos(t));\n    vec3 rayDirection = vec3(uv.x, uv.y, 0.0) - camOrigin;\n    float zoom = 1.0;\n    \n    vec3 pos = vec3(0.0, 0.0, 0.0);\n    \n    vec3 lookat = vec3(1.0);\n    vec3 f = normalize(lookat - camOrigin);\n    vec3 r = cross(vec3(0.0, 1.0, 0.0), f);\n    vec3 u = cross(f, r);\n    \n    vec3 center = camOrigin + f * zoom;\n    vec3 intersection = center + uv.x*r + uv.y*u;\n    rayDirection = intersection - camOrigin;\n    \n    float d = drawCube(camOrigin, rayDirection, pos);\n    vec4 cube = vec4(d) * vec4(1.0, 0.5, 0.0, 1.0); \n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.1*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = vec4(vec4(col, 1.0) + (cube));\n}","name":"Image","description":"","type":"image"}]}