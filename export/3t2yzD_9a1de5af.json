{"ver":"0.1","info":{"id":"3t2yzD","date":"1593978331","viewed":116,"name":"moon and stars","username":"wingei","description":"Just a beginner exercice.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["moon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat moonSize = .4;\nvec3 moonColor = vec3(1.,.98,.95);\n//vec3 moonColor = vec3(.8,.7,.90) * 2.;\nfloat moonNoiseOffset = 16.26 * 0.1;\nfloat starDensity = 50.;\n\n\nvec3 starColor = vec3(.90,.98,1.);\n\nfloat horizon(vec2 uv) {\n    // return smoothstep( .1, .005, uv.y);\n    vec2 earthOrigin = normalizePoint(iResolution, vec2(.5, -1.5));\n    return smoothstep( 2., .1, distance(uv, earthOrigin));\n}\n\nfloat moonShape(vec2 uv, vec2 moonOrigin) {\n    moonOrigin = normalizePoint(iResolution, moonOrigin);\n    \n\t//return smoothstep(moonSize,moonSize-.04, distance(uv, moonOrigin));\n    return smoothstep(moonSize,moonSize-.01, distance(uv, moonOrigin));\n}\n\nvec3 moonCraters(vec2 uv, vec2 moonOrigin) {\n    moonOrigin = normalizePoint(iResolution, moonOrigin);\n    \n    // Spheric moon\n    vec2 p = uv - moonOrigin;\n    float r = dot(p,p);\n\tfloat f = (1.-sqrt(1.-r))/(r);\n\tuv.x = p.x*f;\n\tuv.y = p.y*f;\n    \n    \n    float cloudSlice = .45;\n    float cloudSliceSize = .5;\n    \n    // float clouded = cloud(uv + 6.58 * 0.1);\n    float clouded = cloud(uv + moonNoiseOffset);\n    clouded = clamp(clouded, .6, 1.);\n    \n    // vec3 craters = 1. - clamp(cloud(uv + moonNoiseOffset) * 1.2, cloudSlice, cloudSlice + cloudSliceSize) - moonColor;\n    vec3 craters = clouded - moonColor;\n    // increase value\n    craters *= 1.3;\n    \n    // Sharpen\n    // craters -= cloud(0.1 - uv + 6.58 * 0.1)*.3;\n       \n    \n    return craters;\n}\n\n\nfloat star(vec2 uv, vec2 starOrigin, float starSize) {    \n    float star = smoothstep(starSize,starSize-.04, distance(uv, starOrigin));\n    \n    float y = pow(star, 5.);\n    star = y * star;\n    \n    return star;\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    // Start with black\n    vec3 color = vec3(.0,.0,0.);\n    \n    // \"Clouded\" moon\n    vec2 moonOrigin = vec2(0.5, .55);\n    vec3 craters = moonCraters(uv, moonOrigin);\n    color.rgb = moonShape(uv, moonOrigin) * (moonColor + craters);\n    \n    // increase moon light\n    color *= 1.8;\n    \n    // Draw the earth horizon\n    color.b += horizon(uv);\n    \n    \n    // compute here for moon phases\n    \n    \n    // Draw random stars on remaining space\n    if (rgbSum(color) <= .1) {\n        vec2 st = uv;\n        st *= starDensity;\n        vec2 ipos = floor(st);  // integer\n        vec2 fpos = fract(st);  // fraction\n\n        bool hasStar = random(ipos) > .9;\n        if (hasStar) {\n            vec2 tile = fpos;\n\n\n            // draw star\n            \n            // Randomize star size\n            float tileId = fract(pow(sin(ipos.x), 4.)) * sin(ipos.y);\n            float starSize = abs(random(vec2(tileId)) * .24);\n            \n            starColor = vec3(.5,.5,.5);\n            \n            vec3 thisStarColor = vec3(\n                starColor.r + fract(starSize * 100.),\n                starColor.g + fract(starSize * 100.),\n                starColor.b + fract(starSize * 100.)\n            );\n            \n            // there is a bug i don't understand yet (black squares on the blueish bottom)\n            if (starSize > 0.) {\n            \tcolor += star(tile, tile*0.25 + 0.5, starSize) * thisStarColor * cloud(vec2(tileId + iTime * 0.1));\n            }\n        }\n    }\n    \n    fragColor.rgb = color;\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Essentially functions from the book of shaders\n\n\n// Correct x with aspect ratio\nvec2 normalizePoint(vec3 iResolution, vec2 point) {\n    point.x *= iResolution.x/iResolution.y;\n    return point;\n}\n\n// Float random\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))\n                * 43758.5453123);\n}\n\n\n// Vec2 random\nvec2 random2( vec2 p ) {\n    return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);\n}\n\n\nfloat parabola( float x, float k ){\n    return pow( 4.0*x*(1.0-x), k );\n}\n\nvec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec2 mod289(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec3 permute(vec3 x) { return mod289(((x*34.0)+1.0)*x); }\n\n\n\nfloat snoise(vec2 v) {\n    const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                        0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                        -0.577350269189626,  // -1.0 + 2.0 * C.x\n                        0.024390243902439); // 1.0 / 41.0\n    vec2 i  = floor(v + dot(v, C.yy) );\n    vec2 x0 = v -   i + dot(i, C.xx);\n    vec2 i1;\n    i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n    vec4 x12 = x0.xyxy + C.xxzz;\n    x12.xy -= i1;\n    i = mod289(i); // Avoid truncation effects in permutation\n    vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n        + i.x + vec3(0.0, i1.x, 1.0 ));\n\n    vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n    m = m*m ;\n    m = m*m ;\n    vec3 x = 2.0 * fract(p * C.www) - 1.0;\n    vec3 h = abs(x) - 0.5;\n    vec3 ox = floor(x + 0.5);\n    vec3 a0 = x - ox;\n    m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n    vec3 g;\n    g.x  = a0.x  * x0.x  + h.x  * x0.y;\n    g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n    return 130.0 * dot(m, g);\n}\n\nfloat cloud(vec2 st) {\n    float n = 0.0;\n    for (float i = 1.0; i < 8.0; i ++) {\n        float m = pow(2.0, i);\n        n += snoise(st * m) * (1.0 / m);\n    }\n    return n * 0.5 + 0.5;\n}\n\nfloat rgbSum(vec3 col) {\n    return col.r + col.g + col.b;\n}\n","name":"Common","description":"","type":"common"}]}