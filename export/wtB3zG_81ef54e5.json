{"ver":"0.1","info":{"id":"wtB3zG","date":"1559953614","viewed":454,"name":"Bees & Boms GIF","username":"BigWIngs","description":"See comments. I challenge you to code golf this!","likes":21,"published":1,"flags":0,"usePreview":0,"tags":["checker","gif"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Quick and dirty recreation of \n// https://twitter.com/InfinityLoopGIF/status/1137051249373798400\n//\n// Done for fun in 20 minutes, could be much smaller and more elegant, I know ;)\n// \n// I challenged people to golf it, so...\n\n// latest version from Fabrice, 398 chars!\n#define r *= mat2( cos(t + vec4(0,11,33,0)) ) //\n#define k(s) max( s f +.02 , .7* abs(s cos(h-t*3.75)/h -P.y) ) -.01//\nvoid mainImage(out vec4 O, vec2 U) {\n    float d = 1e2, f,e,h, t = .8;\n    vec3 b = iResolution, c,\n         P = vec3(0, 1.8, -3),\n         D = vec3((U+U-b.xy)/b.y, 1);\n    D.zy r;  t = .4*iTime;\n    for ( D.zx r, P.zx r; --d > 1.;\n          e = max( min(k(),k(-)), max(c.x,c.z) -2.2 ))\n        b = abs(c = abs( fract(P += D*e) -.5 ) -.25 ),\n        f = c.x*c.z / max(b.x,b.z),\n        h = dot(P,P)*.6+1., c = abs(P),\n    O = f > e  ? vec4(.2,.6,1,1) : ++O*e; }\n\n        /*\n// 834144373 version, 412 chars. Might not work well on mac, if it doesn't please comment\n#define r(a) *= mat2( cos(a + vec4(0,11,33,0)) )\n#define k(s) max( s f +.02 , .7* abs(s cos(h-t*3.75)/h -P.y) ) -.01\n\n#define mainImage(O,U)                              \\\n    float d = 1e2, f,e,h,                           \\\n          t = .4*iTime;                             \\\n    vec3 b = iResolution, c,                        \\\n         P = vec3(0,1.8,-3),                        \\\n         D = vec3((U+U-b.xy)/b.y, 1);                   \\\n    D.zy r(.8);                                     \\\n    for (D.zx r(t), P.zx r(t); --d > 1.; )          \\\n        c /= b = abs(c = abs( fract(P += D*e) -.5 ) -.25 ),\\\n        f = min(b.x,b.z)*c.x*c.z,                   \\\n        h = dot(P,P)*.6+1., c = abs(P),             \\\n        e = max( min(k(),k(-)), max(c.x,c.z) -2.2 );\\\n    O = f > e  ? vec4(.2,.6,1,1) : ++O*e\n */       \n/*\n// Abje and Fabrice bring it to 424 chars!\n#define r(a) *= mat2( cos(a + vec4(0,11,33,0)) )\n#define k(s) max( s f +.02 , .7* abs(s cos(h-t*3.75)/h -P.y) ) -.01\n\n#define mainImage(O,U)                              \\\n    float d = 1e2, f,e,h,                           \\\n          t = .4*iTime;                             \\\n    vec3 b = iResolution, c,                        \\\n         P = vec3(0,1.8,-3),                        \\\n         D = vec3(U+U-b.xy, b.y);                   \\\n    D.zy r(.8);                                     \\\n    for (D.zx r(t), P.zx r(t); --d > 0.; )          \\\n        c /= b = abs(c = abs( fract(P += D/length(D)*e) -.5 ) -.25 ),\\\n        f = min(b.x,b.z)*c.x*c.z,                   \\\n        h = dot(P,P)*.6+1., c = abs(P),             \\\n        e = max( min(k(),k(-)), max(c.x,c.z) -2.2 );\\\n    e < .1 ? f >0. ? O = vec4(.2,.6,1,1) : O : O++\n */\n\n/*\n// 834144373 shaved off another 34 characters!\n#define r(s) mat2(cos(s+vec4(0,11,33,0)))\n#define k(p) max(p f+.01,abs(p h-t.y)*.7)\n\n#define mainImage(O,U)                           \\\n    float d = 99.,                                 \\\n          f,e,h,                                  \\\n          u = iTime;                              \\\n    vec3 R = iResolution,                         \\\n         t = vec3(0,1.8,-3),                      \\\n         g = normalize(vec3(U+U-R.xy, R.y)),     \\\n         a,b,c,s;                                 \\\n    g.zy *= r(.8);                                \\\n    mat2 o = r(u*.4);                             \\\n    g.zx *= o;                                    \\\n    t.zx *= o;                                    \\\n    O = vec4(.2,.6,.9,1);                         \\\n    while (--d>0.)               \t\t\t  \t  \\\n        b = abs(a = abs(fract(t += g*e)-.5)-.25),       \\\n        c = a/b,                                  \\\n        f = min(b.x,b.z)*c.x*c.z,                 \\\n        h = dot(t,t)*.6+1.,\t\t\t\t\t      \\\n        h = cos(h-u*1.5)/h,              \t      \\\n        s = abs(t)-2.2,                           \\\n        e = max(min(k(),k(-)),max(s.x,s.z)),  \t \\\n        e < .01 ? d=0.: d;                       \\\n    O = e < .01 ? f >0. ? O : O-O : O/O\t\t\t  \\\n  */\n\n/*\n// abje version - 496 chars\n#define r(s) mat2(cos(s+vec4(0,11,33,0)))\n#define k(p) max(p f+.01,abs(p h-t.y)*.7)\n\n#define mainImage(O,U)                            \\\n    float d = 0.,                                 \\\n          f,e,h,l,                                \\\n          u = iTime;                              \\\n    vec3 R = iResolution,                         \\\n         t = vec3(0,1.8,-3),                      \\\n         g = normalize(vec3(U+U-R.xy, R.y)),      \\\n         a,b,c,s;                                 \\\n    g.zy *= r(0.8);                               \\\n    mat2 o = r(u*.4);                             \\\n    g.zx *= o;                                    \\\n    t.zx *= o;                                    \\\n    for (int i = 0; i < 99; i++) {                \\\n        a = abs(fract(t)-.5)-.25,                 \\\n        b = abs(a),                               \\\n        c = a/b;                                  \\\n        f = min(b.x,b.z)*c.x*c.z;                 \\\n        e = dot(t,t)*.6,                          \\\n        h = cos(e-iTime*1.5)/(e+1.),              \\\n        l = min(k(),                              \\\n                k(-));                            \\\n        s = abs(t);                               \\\n        l = max(l, max(s.x,s.z)-2.2);             \\\n        if (l < .01) break;                       \\\n        t += g*l;                                 \\\n    }                                             \\\n    O = l < .01 ? f <0. ? vec4(.2,.6,.9,0) : vec4(.12) : vec4(1)\n  */      \n        \n        \n// After Fabrice is done with it...  517 characters\n/*\n#define v vec3//\n#define N normalize//\n#define C(b) S(( B - abs( mod( b-p, T ) -T/2.) ))               //\n#define M(s) max( .5* abs(s-cos(d-2.*iTime) / d + p.y) -.0025 , \\\n                  s min( C(), C(v(.2,0,.2)) ) )                 //\n#define S(b) length( min(b,.0)) - max( min(b.x,min(b.y,b.z)),.0)//\n#define mainImage(O,U)                                          \\\n    v B = v(.1, 1, .1), T = v(.4,1,.4),                         \\\n      R = iResolution,                                          \\\n      p = 2.* v( sin( iTime*.3 + vec2(0,11)), 1).xzy,           \\\n      f = N( v(0,-.3,0) - p ),                                  \\\n      r = N( v(f.z,0,-f.x)  );                                  \\\n    float d, e, V, n=0.;                                        \\\n    for( ; n++ < 2e2 ; )                                        \\\n        d = 2.* dot(p.xz, p.xz) +2.,                            \\\n        e = max( min( V=M(-), d=M() ), S( .99-abs(p-.1)) ),     \\\n        p += e * N( mat3(f,r,cross(f,r)) * v(R.y,U-.5*R.xy) );  \\\n    e<.001 ? V < d ? O : O = B.xxyy    : O++\n*/\n        \n/* original shader.... 1462 characters\n\n// IQ\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return length(max(d,0.0))\n         + min(max(d.x,max(d.y,d.z)),0.0); // remove this line for an only partially signed sdf \n}\n\nfloat Map(vec3 p) {\n\t\n    float cd = dot(p.xz, p.xz);\n    float w = .5*cos(cd*2.-iTime*2.)/max(cd+1., 1.);\n    \n    float d = (abs(p.y+w)-.005)*.5;\n    vec3 bp1 = mod(p, vec3(.4, 1, .4))- vec3(.2, .5, .2);\n    vec3 bp2 = mod(p-vec3(.2, 0., .2), vec3(.4, 1, .4))- vec3(.2, .5, .2);\n    float checker = min(sdBox(bp1, vec3(.1, 1., .1)), sdBox(bp2, vec3(.1, 1, .1)));\n    \n    d = max(d, -checker);\n    \n    float d2 = (abs(p.y-w)-.005)*.5;\n    d2 = max(d2, checker);\n    \n    d = min(d, d2);\n    \n    \n    d = max(d, sdBox(p-vec3(.1), vec3(.99)));\n    \n    return d;\n}\n\nint Mat(vec3 p) {\n\t\n    float cd = dot(p.xz, p.xz);\n    float w = .5*cos(cd*2.-iTime*2.)/max(cd+1., 1.);\n    \n    float d = (abs(p.y+w)-.005)*.5;\n    vec3 bp1 = mod(p, vec3(.4, 1, .4))- vec3(.2, .5, .2);\n    vec3 bp2 = mod(p-vec3(.2, 0., .2), vec3(.4, 1, .4))- vec3(.2, .5, .2);\n    float checker = min(sdBox(bp1, vec3(.1, 1., .1)), sdBox(bp2, vec3(.1, 1, .1)));\n    \n    d = max(d, -checker);\n    \n    float d2 = (abs(p.y-w)-.005)*.5;\n    d2 = max(d2, checker);\n    \n    return d<d2 ? 0 : 1;\n}\n\nmat2 Rot(float a) {\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c,-s,s,c);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(1);\n\n    vec3 ro = vec3(0, 2, -2);\n\tro.xz *= Rot(iTime*.3);\n    \n    vec3 f = normalize(vec3(0,-.3,0)-ro),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f, r),\n        c = ro + f,\n        i = c + uv.x*r + uv.y*u,\n        rd = normalize(i-ro);\n    \n    float dS, dO;\n    vec3 p;\n    for(int i=0; i<200; i++) {\n        p = ro + dO * rd;\n        dS = Map(p);\n        dO += dS;\n        if(dS<.001 || dO>4.) break;\n    }\n    \n    if(dS<.001) {\n        vec3 n = Normal(p);\n        \n        int mat = Mat(p);\n        \n        if(mat==0)\n            col = vec3(0);\n        else\n            col = vec3(.1, .1, 1);\n    }\n    \n    fragColor = vec4(col,1.0);\n}\n*/","name":"Image","description":"","type":"image"}]}