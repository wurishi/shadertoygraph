{"ver":"0.1","info":{"id":"fljSW1","date":"1627575522","viewed":592,"name":"Lucerna Silva-Pastorensis","username":"evvvvil","description":"Lucerna Silva-Pastorensis - Result of an improvised live coding session on Twitch\nLIVE SHADER CODING, SHADER SHOWDOWN STYLE, EVERY TUESDAYS 21:00 Uk time:\nhttps://www.twitch.tv/evvvvil_\n","likes":45,"published":1,"flags":0,"usePreview":0,"tags":["demoscene","flower","organic","petals","leaves","london","buds","bush","stems","horticulture","shepherd"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3Rr","filepath":"/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","previewfilepath":"/media/ap/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Lucerna Silva-Pastorensis - \"The light of Shepherd's Bush\"\n// I discovered this flower growing in London on Shepherd'Bush high-street, between KFC and McDonalds.\n// Aptly named in ye-olde-broken-horticultural-Latin by yours truly.\n\n//\"Yeah I seen this fucking flower round Bush... Bloody thing popped out of my Happy Meal box...\n//\"Never been so fucking scared in my life, bruvs. It put me right off my chicken nuggets.\" Aaron Buckwheat - clearly easily shook local QPR fan.\n\n// LIVE SHADER CODING, SHADER SHOWDOWN STYLE, EVERY TUESDAYS 21:00 Uk time: \n// https://www.twitch.tv/evvvvil_\n\nvec2 z,v,e=vec2(.00035,-.00035);float t,tt,g,tn,b,bb,bbb,ridges;vec3 po,no,al,ld,pp; //GLOBAL VARS\nfloat cy(vec3 p,vec2 r){ return max(length(p.xz)-r.x,abs(p.y)-r.y);} //CYLINDER ALONG Y PRIMITIVE\nfloat smin(float a,float b,float k){float h=max(0.,k-abs(a-b));return min(a,b)-h*h*.25/k;  } //SMOOTH BLENd\nfloat smax(float a,float b,float k){float h=max(0.,k-abs(-a-b));return max(-a,b)+h*h*.25/k;  } //SMOOTH SUBSTRACTION\nvec2 smin( vec2 a, vec2 b,float k ){ float h=clamp(.5+.5*(b.x-a.x)/k,.0,1.);return mix(b,a,h)-k*h*(1.0-h);} //SMOOTH BLEND WITH MATERIAL ID AS WELL\nmat2 r2(float r){ return mat2(cos(r),sin(r),-sin(r),cos(r)); } //ROTATE 2D FUNCTION\nvec4 texNoise(vec2 uv,sampler2D tex ){ float f = 0.; f+=texture(tex, uv*.125).r*.5; f+=texture(tex,uv*.25).r*.25; //Funciton simulating the perlin noise texture we have in Bonzomatic shader editor, written by yx\n                       f+=texture(tex,uv*.5).r*.125; f+=texture(tex,uv*1.).r*.125; f=pow(f,1.2);return vec4(f*.45+.05);}\nfloat leaf( vec3 p){ //CREATES A LEAF\n  float leafD=cos(p.z*2.)*.3; //LEAF DEFORMER\n  vec3 lp=pp=p;  //LEAF+RIDGE POSITION\n  pp.z=abs(pp.z); //ABS SYMETRY RIDGES POSITION\n  pp.xz*=r2(.785-sin(pp.x*2.)*.2);   //ROTATE POSITION TOWARDS END OF LEAF\n  float bulge=sin(abs(p.z*1.5))*.4; //BULGE LEAF WITH SEAM IN MIDDLE WHERE STEM IS\n  ridges=abs(sin(pp.x*10.))*.1;  //RDIGES ON LEAF ITSELF\n  pp.z=abs(pp.z);  // EXTRA SPLIT VEIN / RIDGE\n  pp.xz*=r2(-.185);  //EXTRA RIDGE SPLIT LIKE FORK\n  ridges+=abs(sin(pp.x*10.))*.1;  //EXTRA RIDGE ADDED\n  lp.y-=bulge+ridges*.5*(min(1.,1.-(length(p.xz*vec2(.7,1.))-1.))); //MODIFY LEAF POSITION WITH DEFORMERS, BULGE ETC\n  lp.z-=sin(abs(pp.x)*10.)*.1;  //MAKE LEAF MORE PINCHED . LONGER LIKE ELLIPSI RATHER THAN CYLINDER\n  float t=.55*cy(lp+tn,vec2(2.+leafD,.02-ridges/tn*.0135));// ACTUAL LEAF, WITH THE EATEN OUT THING //float t=.5*cy(lp+tn,vec2(2+leafD,.02)); //NON EATEN LEAF   \n  float stem=0.7*max(length(p.yz-vec2(0.1+cos(p.x*.5)*.05,0.))-.08-min(.03,p.x*.02),abs(p.x-2.7)-7.);//leaf stem\n  t=smin(stem,t,.25);//add stem to leaf\n  return t;\n}\nfloat petal( vec3 p){  \n  p.y-=tn;//GIVE PETAL CRUNCHY DETAILS BY RE-USING TEXTURE NOISE\n  pp=p;pp.xz*=r2(.785);  //ROTATE PETALS AWAY FROM LEAF BRANCHES\n  float t=0.7*cy(p,vec2(2.-cos(p.x*2.)*.3-tn*3.,.015)); //PETAL MADE OF DEFORMED CYLINDER\n  t=smin(t,0.75*max(length(abs(pp.yz)-vec2(0,1.5-pp.x*.25))-.1,abs(pp.x)-7.0),.5); //ADD CYLINDER ON EDGES OF PETAL TO GIVE IT MORE MENACING / UNUSUAL LOOK\n  return t;\n}\nvec2 mp( vec3 p, float ga){\n  vec3 np,bp,rp,op; //DEFINE VARIABLES\n  op=np=p; //REMEMBER OP AS ORIGINAL POS AS WE WILL CHANGE IT\n  p.xz*=r2(sin(p.y*.3+tt*.3+bb)*.3);  //TWIST WHOLE FLOWER A BIT\n  p.xy*=r2(sin(p.y*.1+tt*.3+bb)*.3); //TWIST WHOLE FLOWER A BIT AGAIN\n  tn=texNoise(p.xz*.05,iChannel0).r*.6; //SAMPLE PERLIN NOISE TEXTURE TO ADD ORGANIC FEEL\n  np=bp=pp=rp=p; //SETUP POSITIONS VARIABLES FOR LATER\n  pp.x=abs(pp.x)-6.5;    //LEAVES POSITION\n  pp.y+=sin(pp.x)*.6; //WAVE THE LEAVES\n  pp.x*=-1.; //BULLSHIT SHIFT TO CORRECT MISTAKE IN LEAF FUNCTION\n  pp.z=abs(pp.z)-6.5; //MAKE MORE LEAVES\n  pp.xz*=r2(-.785);    //SHIFT IN POSITION\n  pp.y=mod(pp.y,5.)-2.5; //INFINITE AMOUNT OF LEAF NODES ALONG Y\n  vec2 h,t=vec2(max(leaf(pp),abs(p.y-3.8)-7.),0.); //LEAVES, CUT ONES ABOVE CERTAIN HEIGHT\n  float trunkD=sin(p.y*1.75)*.2; //TRUNK DEFORMER\n  float trunk=length(p.xz)-.75-trunkD; //TRUNK\n  float core=trunk+.1; //OPTIMIZED WAY TO CREATE A CORE BASED ON GEOM BY JUST SHIFTING DF FURTHER\n  np.xz*=r2(.785); //SIDE TRUNKS POSITION\n  np.xz=abs(np.xz)-.5-trunkD; \n  trunk=smax(length(np.xz)-.3-trunkD,trunk,.1); //SIDE TRUNK cut hole to reveal core in trunk \n  t.x=smin(t.x,trunk,.5);   // ADD TRUNK TO SCENE\n  bp.y=abs(abs(bp.y)-5.)-2.5; //TRUNK BUDS POSITION\n  bp.xz=abs(bp.xz)-1.; //CLONE SYMETRY TO GET MORE\n  bp.xz-=trunkD;  //SHIFT TRUNK BUDS POSITION ALONG TRUNK\n  pp=vec3(np.x,abs(bp.y+0.05)-.2,np.z); //SMALL BALLS POISTION  \n  pp.xz+=trunkD; //SHIFT SMALL BALLS POS ALONG TRUNK\n  t.x=smin(t.x,length(pp)-0.1,.15);   //ADD SMALL BALLS TO SCENE\n  float trunkBuds=length(bp-vec3(.5,0.,.5))-.5; //TRUNK BUDS BIG BALLS\n  bp.xz=abs(bp.xz)-.2;   //TUBES POSITION\n  float taper=cos(bp.y*3.5-1.)*.1; //TAPER TUBES\n  trunkBuds=smin(trunkBuds,max(abs(length(bp.xz)-.04-taper-tn*2.)-.07,abs(bp.y)-1.85-tn*2.),.5);//TRUNK TUBES  \n  t.x=smin(t.x,trunkBuds,.5);  //ADD TRUNK BUDS + TUBES TO SCENE\n  vec3 fp=p-vec3(0,9.1,0);  //FLOWER HEAD POSITON\n  h=vec2(.8*(length(fp)-1.5-sin(fp.y*2.)*.7),1);  //FLOWER HEAD\n  h.x=min(h.x,core+tn*2.);  //FLOWER CORE\n  rp.xz*=r2(cos(op.y*.4)+.785); //PARTICLES POSITON\n  rp.xz=abs(rp.xz)-2.5-sin(rp.y*.5+.5);rp.y=mod(rp.y-tt*1.019+bbb,2.)-1.;  \n  float part=0.7*max(length(rp)-.05,-p.y+7.5); //PARTICLES\n  g+=0.1/(0.1+part*part*20.)*ga;   //MAKE PARTICLES GLOW\n  t.x=smin(t.x,part,1.);  //ADD PARTICLES TO SCENE\n  t=smin(t,h,.2);  //SMOOTH MERGE GREEN AND BLACK GEOMETRIES AND MATERIAL IDS\n  h=vec2(max(0.8*length(bp.xz),abs(p.y)-9.5),6); //YELLOW GLOW LINES\n  g+=0.1/(0.1+h.x*h.x*(400.-390.*sin(p.y-tt+bbb)))*ga;  //MAKE LINES GLOW\n  float ter=0.65*(p.y+15.+sin(length(p)));  //WAVEY TERRAIN\n  ter=smin(ter,max(abs(length(p.xz)-5.)-.5,abs(p.y+10.)-5.),5.5); //FLOWER POT\n  h.x=min(h.x,ter); //ADD TERRAIN TO SCENE\n  fp.xz*=r2(.785); //SPETAL POSITION\n  fp.xz=abs(fp.xz)-2.5; \n  fp.y-=sin(fp.x+fp.z)*.4;\n  h.x=min(h.x,petal(fp-ridges*.5));  //PETALS\n  t=t.x<h.x?t:h; //ADD GLOW + PETAL WHITE MATERIAL TO SCENE\n  return t;\n}\nvec2 tr( vec3 ro, vec3 rd ){//RAYMARCHING LOOP\n  vec2 h,t=vec2(.1); //NEAR PLANE\n  for(int i=0;i<128;i++){ //LOOOP MAX 128 STEPS\n    h=mp(ro+rd*t.x,1.); //GET DISTANCE TO GEOM\n    if(abs(t.x)<.0001|| t.x>50.) break;  //IF WE CLOSE ENOUGH OR IF WE TOO FAR, BREAK\n    t.x+=h.x;t.y=h.y; //BIG JUMP TO GEOMETRY IN NEXT ITERATION, REMEMBER MATERIAL ID\n  }\n  if(t.x>50.) t.y=-1.; //IF WE TOO FAR RETURN -1 MAT ID\n  return t;\n}\n#define a(d) clamp(mp(po+no*d,0.).x,0.,1.)\n#define s(d) smoothstep(0.,1.,mp(po+ld*d,0.).x)\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){ //LINES ABOVE ARE ambient ollcusion and sss\nvec2 uv=(fragCoord.xy/iResolution.xy-0.5)/vec2(iResolution.y/iResolution.x,1);   //GET UVS\n  tt=mod(iTime,62.83); //MOD TIME TO AVOID ARTIFACT\n  b=smoothstep(0.,1.,clamp(cos(tt*.3),-.25,.25)*2.+.5);bb=b*3.14;bbb=bb*2.;  //ANIMATION VARIABLE FOR CAMERA ETC\n  vec3 ro=mix(vec3(sin(tt*.3)*15.,5,cos(tt*.2)*15.),vec3(sin(tt*.3)*4.,cos(tt*.3)*5.+10.,10.),b), //RAY ORIGINA = CAMERA POSITION\n  cw=normalize(vec3(0)-ro),cu=normalize(cross(cw,vec3(0,1,0))),cv=normalize(cross(cu,cw)),rd=mat3(cu,cv,cw)*normalize(vec3(uv,.5)),co,fo;//CAMERA STUFF\n  ld=normalize(vec3(.2,.5,-.2));  //LIGHT DIRECTION\n  co=fo=vec3(.15,.3,.5)-length(uv)*.15-rd.y*.3-sin(rd.y*40.)*.01+vec3(1,.5,0)*pow(clamp(dot(ld,rd),0.,1.),3.);  //BACKGROUND COLOUR\n  z=tr(ro,rd);t=z.x; //LET'S TRACE THIS PIXEL\n  if(z.y>-1.){ //IF WE HIT SOMETHING THEN DO LIGHTING\n    po=ro+rd*t; //GET WHERE WE AT\n    no=normalize(e.xyy*mp(po+e.xyy,0.).x+e.yyx*mp(po+e.yyx,0.).x+e.yxy*mp(po+e.yxy,0.).x+e.xxx*mp(po+e.xxx,0.).x);//DERIVE NORMALS FROM WEHERE WE AT\n    al=mix(vec3(.4,.7,.6)-tn*3.,vec3(0.),min(z.y*1.0,1.)); //ALBEDO IS BASE COLOUR OF GEWOMETRIES BLENDED BETWEEN THEM WITH MATERIAL ID\n    if(z.y>5.) al=vec3(1.); //IF MAT ID IS MORE THAN 5 THEN MAKE IT WHITE\n    float dif=max(0.,dot(no,ld)), //DIFFUSE LIGHTING\n    fr=pow(1.+dot(no,rd),4.), //FRESNEL \n    sp=0.5*pow(max(dot(reflect(-ld,no),-rd),0.),50.); // SPECULAR\n    co=mix(sp+al*(a(.1)+.2)*(dif+s(1.)),fo,min(fr,.5));     //FINAL COLOUR MIX\n    co=mix(fo,co,exp(-.00003*t*t*t)); //FOG\n  }  \n  fragColor = vec4(pow(co+g*.1*vec3(1,.5,0.2),vec3(.55)),1); //ADD GLOW AT END AND DOM SOME GAMMA CORRECTION\n}","name":"Image","description":"","type":"image"}]}