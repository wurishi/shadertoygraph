{"ver":"0.1","info":{"id":"DsXBDM","date":"1688766783","viewed":74,"name":"black hole sorta","username":"arkanon","description":"a black hole based on the fact that gravity is independent of the affected object","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["raymarching","blackhole","spacetime"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float mass = 20.0;\n\n#define STEP 0.5\n#define ITERS 2048\n\n#define REDRAW\n\nvec3 ray(vec3 pos, vec3 vel) {\n    vec3 col = vec3(0);\n    for (int i = 0; i < ITERS; i++) {\n        if (abs(pos.x) > 20.) { col = texture(iChannel0, pos.zy * 0.025).rgb; break; }\n        if (abs(pos.y) > 20.) { col = texture(iChannel0, pos.zx * 0.025).rgb; break; }\n        if (abs(pos.z) > 20.) { col = texture(iChannel0, pos.xy * 0.025).rgb; break; }\n        vel += mass / dot(pos, pos) * STEP * (-pos);\n        pos += vel * STEP;\n    }\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //vec2 uv = (fragCoord * 2.0 - iResolution.xy)/iResolution.y;\n    //float c = cos(iTime), s = sin(iTime);\n    //vec3 pos = vec3(s * -15., 0, c * -15.);\n    //vec3 dir = normalize(vec3(c * uv.x + s * 0.7, uv.y, c * 0.7 - s * uv.x));\n    //vec3 col = ray(pos, dir);\n    vec3 col = texture(iChannel1, fragCoord / iResolution.xy).rgb;\n\n#ifndef REDRAW\n    // Output to screen\n    fragColor = vec4(col / float(iFrame),1.0);\n#else\n    fragColor = vec4(col, 1.0);\n#endif\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//float mass = 0.2;\n\n#define mass (iTime * 0.05)\n#define STEP 0.05\n#define SLOW (float(ITERS)/STEP)\n#define ITERS 2048\n\n#define REDRAW\n\nvec3 ray(vec3 pos, vec3 vel) {\n    vec3 col = vec3(0);\n    for (int i = 0; i < ITERS; i++) {\n        if (abs(pos.x) > 20.) { col = texture(iChannel0, pos.zy * 0.025).rgb; break; }\n        if (abs(pos.y) > 20.) { col = texture(iChannel0, pos.zx * 0.025).rgb; break; }\n        if (abs(pos.z) > 20.) { col = texture(iChannel0, pos.xy * 0.025).rgb; break; }\n        vec3 vc = mass / dot(pos, pos) * STEP * (-pos);\n        vel += vc;\n        pos += vel * STEP * 1.0 / (1.0 + dot(vc, vc) * SLOW);\n    }\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy)/iResolution.y;\n    uv += vec2(cos(0.01 * iTime), sin(0.0137 * iTime)) * 0.02;\n    float c = cos(0.), s = sin(0.);\n    vec3 pos = vec3(s * -19., 0, c * -19.);\n    vec3 dir = normalize(vec3(c * uv.x + s * 0.7, uv.y, c * 0.7 - s * uv.x));\n    vec3 col = ray(pos, dir);\n    \n#ifndef REDRAW\n    vec3 ocol = texture(iChannel1, fragCoord / iResolution.xy).rgb;\n    // Output to screen\n    fragColor = vec4(ocol + col,1.0);\n#else\n    fragColor = vec4(col, 1.0);\n#endif\n}","name":"Buffer A","description":"","type":"buffer"}]}