{"ver":"0.1","info":{"id":"clB3Rz","date":"1672727643","viewed":140,"name":"Skysphere Panoramic Projection","username":"Dayrook","description":"Needed a simple way to transform shaders for skyspheres - where HDRI's are generally used.\nI found cool shaders that probably do similar, but they do other stuff, too - making it hard to parse.\nHope it's useful to someone else.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["projection","panorama","skysphere","hdri"],"hasliked":0,"parentid":"Xss3Dr","parentname":"Procedural Checkerboard"},"renderpass":[{"inputs":[],"outputs":[],"code":"#define S 5. // Checkerboard Scale\n#define PI 3.1415\n\nvec2 sphereProject(vec2 p){\n    float phi = (2.*p.y-1.)*PI/2.;\n    return vec2((2.*p.x-1.)*cos(phi), p.y );\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord)\n{\n    vec2 p = fragCoord.xy / iResolution.xy;\n    p = sphereProject(p);\n    \n    // AA Checkerboard by FabriceNeyret2\n\tvec2 uv = mod( S * p, 2. );\n    uv = smoothstep(0., 15./iResolution.y, abs(uv - 1.) -.5 )*2.-1.;\n\tfragColor = vec4( uv.x * uv.y );\n}","name":"Image","description":"","type":"image"}]}