{"ver":"0.1","info":{"id":"XfBBzW","date":"1724684092","viewed":48,"name":"hey jude v2","username":"jorge2017a2","description":"hey jude v2","likes":5,"published":1,"flags":8,"usePreview":0,"tags":["sound","heyjude"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n//por jorge2017a2\n\n//referencia\n//https://iquilezles.org/articles/distfunctions2d\n///\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n\n#define S(d,b) smoothstep(antialiasing(1.5),0. , d - (b) )\n#define S2(d,b) smoothstep(8.0*antialiasing(1.5),0.,d - (b) )\n#define S3(d,b) smoothstep(0.25/antialiasing(0.5),0. , d - (b) )\n\n\n#define opU2(d1, d2) ( d1.x < d2.x ? d1 : d2 )\n\n#define HALFPI 1.5707\n\n#define PI acos(-1.)\n#define PIH (PI*.5)\n#define TAU (PI*2.)\n#define TWO_PI 6.2831\n\n\n\nfloat sdCircle( vec2 p, float r )\n{ return length(p) - r;}\n\n\nfloat sdBox( in vec2 p, in vec2 b )\n{ vec2 d = abs(p)-b;  return length(max(d,0.0)) + min(max(d.x,d.y),0.0);  }\n\nfloat divf(float a, float b)\n{\n    //evita crash por 1/0.0 =Infinito=error, en compilar\n    if(b==0.0)\n    {b=0.00001;}\n    return a/b;\n}\n\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{  vec2 pa = p-a, ba = b-a;\n    float h = clamp( divf( dot(pa,ba),dot(ba,ba)), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\n\nfloat Sdf_I(float distA, float distB) { return max(distA, distB);}\nfloat Sdf_U(float distA, float distB) { return min(distA, distB);}\nfloat Sdf_D(float distA, float distB) { return max(distA, -distB);}\n\n\nvec3 DFB(vec3 pColObj, vec3 colOut, float distObj )\n{ colOut = mix(colOut,pColObj ,S3( distObj,0.0));\n  colOut = mix(colOut,vec3(0.0),S3(abs( distObj)-0.005,0.0));\n  return colOut;\n}\n\n\nvec3 DFS(vec3 pColObj, vec3 colOut, float distObj )\n{ colOut = mix(colOut,pColObj ,S( distObj,0.0)); return colOut;\n  return colOut;\n}\n\n\n///oneshade    \nvec2 Rotate(in vec2 p, in vec2 o, in float r) \n{   float c = cos(r), s = sin(r);  return (p - o) * mat2(c, -s, s, c) + o;  }\n\n\nvec3 anime_ojo(vec2 p, vec3 colout)\n{\nvec2 A,B, med,pr;\nfloat dfin;\nfloat  r1,ang, he ;\n\n\nA=vec2(1.720548,0.7753425);\nr1=0.3561644;\nfloat d2=sdCircle(p-A,r1);\n\nA=vec2(1.394521,0.7260274);\nr1=0.1643836;\nfloat d3=sdCircle(p-A,r1);\n\nA=vec2(1.416438,0.830137);\nmed=vec2(0.2123288,0.1191781);\nang=10.0*PI/180.0;\npr=Rotate(p-A,med/2.0,ang);\nfloat d4=sdBox(pr,med);\n\nA=vec2(1.432877,0.8438356);\nmed=vec2(0.2123288,0.1191781);\nang=10.0*PI/180.0;\npr=Rotate(p-A,med/2.0,ang);\nfloat d5=sdBox(pr,med);\n\nA=vec2(1.189041,0.6328767);\nr1=0.2739726;\nfloat d6=sdCircle(p-A,r1);\n\nA=vec2(1.241096,0.509589);\nr1=0.2739726;\nfloat d7=sdCircle(p-A,r1);\n\nfloat d102=Sdf_I(d2,d3);\nfloat d103=Sdf_D(d102,d4);\nfloat d104=Sdf_I(d6,d7);\nfloat d105=Sdf_I(d103,d104);\n\ncolout= DFB(vec3(1.0), colout,d105);\n\np.x-=0.325;\np.y+=0.1;\nA=vec2(1.054167,0.7208334);\nr1=0.0625;\nfloat d1a=sdCircle(p-A,r1);\n\nA=vec2(1.079167,0.7541667);\nmed=vec2(0.02083333,0.04166667);\nang=-20.0*PI/180.0;\npr = Rotate(p-A, med/2.0, ang);\nfloat d2a=sdEllipse(pr,med);\n\nA=vec2(1.085417,0.7166666);\nmed=vec2(0.03125,0.03125);\nang=-20.0*PI/180.0;\npr=Rotate(p-A,med/2.0,ang);\nfloat d3a=sdBox(pr,med);\n\nfloat d108=Sdf_I(d1a,d105);\ncolout= DFB(vec3(0.0), colout, d108);\nfloat d109=Sdf_D(d2a,d3a);\n\ncolout= DFB(vec3(1.0), colout, d109);\n\n    return colout;\n}\n\n\nvec3 ceja(vec2 p, vec3 colout)\n{\n\nvec2 A,B, med,pr;\nfloat dfin;\nfloat  r1,ang, he ;\n\nA=vec2(1.413699,0.4547945);\nr1=0.3561644;\nfloat d1=sdCircle(p-A,r1);\n\nA=vec2(1.413699,0.4438356);\nr1=0.3561644;\nfloat d2=sdCircle(p-A,r1);\n\nA=vec2(1.416438,0.7589041);\nmed=vec2(0.1506849,0.1164384);\nfloat d3=sdBox(p-A,med);\n\nfloat d101=Sdf_D(d1,d2);\nfloat d102=Sdf_I(d101,d3);\ncolout= DFB(vec3(0.0), colout,d102);\nreturn colout;\n}\n\n\nvec3 anime_rostro(vec2 p, vec3 colout)\n{\nvec2 A,B, med,pr;\nfloat dfin;\nfloat  r1,ang, he ;\n\n\nA=vec2(1.120833,0.6770833);\nmed=vec2(0.234375,0.375);\nang=-20.0*PI/180.0;\npr=Rotate(p-A,med/2.0,ang);\nfloat d1=sdBox(pr,med);\n\nA=vec2(0.9553333,0.6545833);\nr1=0.07866667;\nfloat d2=sdCircle(p-A,r1);\n\nA=vec2(1.166667,0.725);\nmed=vec2(0.1833333,0.35625);\nang=-20.0*PI/180.0;\npr = Rotate(p-A, med/2.0, ang);\nfloat d3=sdEllipse(pr,med);\n\nA=vec2(1.054167,0.8604167);\nmed=vec2(0.13125,0.2208333);\nang=-20.0*PI/180.0;\npr = Rotate(p-A, med/2.0, ang);\nfloat d4=sdEllipse(pr,med);\n\nA=vec2(1.097917,0.4833333);\nmed=vec2(0.121875,0.1625);\nang=-22.0*PI/180.0;\npr=Rotate(p-A,med/2.0,ang);\nfloat d5=sdBox(pr,med);\n\nA=vec2(1.04375,0.2854167);\nmed=vec2(0.06145833,0.10333);\nang=-52.0*PI/180.0;\npr=Rotate(p-A,med/2.0,ang);\nfloat d6=sdBox(pr,med);\n\nA=vec2(0.9208333,0.49375);\nmed=vec2(0.05,0.06666667);\nfloat d7=sdEllipse(p-A,med);\n\nA=vec2(1.0,0.3854167);\nmed=vec2(0.05,0.06666667);\nfloat d8=sdEllipse(p-A,med);\n\nA=vec2(0.96875,0.4166667);\nmed=vec2(0.05,0.06666667);\nfloat d9=sdEllipse(p-A,med);\n\nA=vec2(1.016667,0.65);\nr1=0.06875;\nfloat d10=sdCircle(p-A,r1);\n\nfloat d101=Sdf_U(d3,d4);\nfloat d102=Sdf_U(d10,d101);\nfloat d103=Sdf_D(d102,d2);\nfloat d104=Sdf_U(d103,d5);\nfloat d105=Sdf_D(d104,d6);\n\nfloat d106=Sdf_U(d7,d9);\nfloat d107=Sdf_U(d106,d8);\n\nfloat d108=Sdf_D(d105,d107);\n\nfloat d101b=Sdf_D(d1,d2);\n\ncolout= DFB(vec3(0.86396,0.67324,0.2916), colout,d108);\n    return colout;    \n}\n\nvec3 anime_pelo(vec2 p, vec3 colout)\n{\nvec2 A,B, med,pr;\nfloat dfin;\nfloat  r1,ang, he ;\n\nvec2 p0=p;\np.x-=0.025;\n\nA=vec2(0.9333333,0.9375);\nr1=0.25625;\nfloat d1=sdCircle(p-A,r1);\n\nA=vec2(0.9958333,0.9083334);\nr1=0.25625;\nfloat d2=sdCircle(p-A,r1);\n\nA=vec2(0.9708334,0.95);\nr1=0.25625;\nfloat d3=sdCircle(p-A,r1);\n\nA=vec2(1.164583,0.9520833);\nr1=0.25625;\nfloat d4=sdCircle(p-A,r1);\n\np=p0;\n\nA=vec2(1.279167,0.9416667);\nr1=0.3291667;\nfloat d5=sdCircle(p-A,r1);\n\nA=vec2(1.245833,1.075);\nr1=0.2875;\nfloat d6=sdCircle(p-A,r1);\n\nA=vec2(1.433333,0.95);\nr1=0.2875;\nfloat d7=sdCircle(p-A,r1);\n\nA=vec2(1.495833,0.5833333);\nr1=0.1833333;\nfloat d8=sdCircle(p-A,r1);\n\nA=vec2(1.19375,0.69375);\nr1=0.1416667;\nfloat d9=sdCircle(p-A,r1);\n    \n    float d101=Sdf_D(d1,d2);\n    float d102=Sdf_D(d3,d4);\n    float d103=Sdf_I(d5,d6);\n    \n    \n    float d104=Sdf_I(d7,d8);\n    \n    colout= DFB(vec3(0.0), colout, d101);\n    colout= DFB(vec3(0.0), colout, d102);\n    colout= DFB(vec3(0.0), colout, d103);\n    colout= DFB(vec3(0.0),colout, d7);\n    colout= DFB(vec3(0.0),colout, d8);\n    return colout;\n\n}\n\n\nvec3 anime_boca(vec2 p, vec3 colout)\n{\nvec2 A,B, med,pr;\nfloat dfin;\nfloat  r1,ang, he ;\np.x-=0.325;\np.y+=0.1;\n\nA=vec2(1.041875,0.4729167);\nB=vec2(0.9979166,0.4729167);\nfloat d1=sdSegment(p,A,B);\n    colout= DFB(vec3(0.0), colout, d1);\n    return colout;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    vec2 uv = ( 2. * fragCoord - iResolution.xy ) / iResolution.y;\n    uv-=vec2(-0.5,-0.15);\n    float esc=0.95;\n    uv*=esc;\n    vec2 q=uv;\n\n    vec3 col = vec3(0.5);\n    if(uv.x<0.5)\n    {\n    vec3 col2 = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    col*=col2+col;\n    }\n    \n    col=anime_rostro(uv-vec2(0.25,0.0), col);\n    col=anime_ojo(uv,col);\n    col=ceja(uv,col);\n    col=anime_pelo(uv-vec2(0.30,0.0),col);\n    col= anime_boca(uv,col);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//por jorge2017a2\n//Referencia de sonido \n//IQ,AeroShark333, Gaz ,etc. muchos :)\n\n///Name Piano:The Beatles - Hey Jude - Piano Tutorial + SHEETS-2\n//https://www.youtube.com/watch?v=1quG5-kzP2w\n\n#define PI acos(-1.)\n#define PIH (PI*.5)\n#define TAU (PI*2.)\n#define TWO_PI 6.2831\n\n\nconst float ttotal=23.0; \nconst float pi = 3.1415927;\nconst float tau = 6.283185;\nfloat ms;\nfloat mresp;\nfloat mtime;\nfloat mtempo;\n\n\n//https://www.shadertoy.com/view/ss3cDN\n// Created by AeroShark333\nfloat squareWave750( float f, float x)\n{ return (min(1.0, floor( 4.0 * floor( f * x ) - floor( 4.0 * f * x ) + 3.0 ))); }\n\nfloat squareWave500( float f, float x)\n{ return (floor( 2.0 * floor( f * x ) - floor( 2.0 * f * x ) + 1.0 )); }\n\nfloat squareWave250( float f, float x)\n{ return (max(0.0, floor( 4.0 * floor( f * x ) - floor( 4.0 * f * x ) + 1.0 ))); }\n\nvec2 squareWave250( vec2 f, float x)\n{ return (max(vec2(0.0), floor( 4.0 * floor( f * x ) - floor( 4.0 * f * x ) + 1.0 ))); }\n\nfloat triangleWave500( float q, float x)\n{ float f = 1.0-2.0*abs(0.5-mod(q*x,1.0));  return (f); }\n\nfloat triangleWave250( float q, float x)\n{ float f = max(0.0,1.0-2.0*abs(0.5-2.0*mod(q*x,1.0))); return (f); }\n\nfloat convertBassFreq (float f)\n{ return (f/2.0); }\n\nfloat  sawf(float t , float freq)\n{  return fract(t * freq) - 0.5; }\n\nfloat wave1( float x, float dxdt, in vec2 v, float t , float w)\n{   float f2;\n    float sampleX=0.0;\n    float f=w;\n    float v1,v2;\n    v1=squareWave250(f,t);\n    v2=triangleWave250(f,t);\n    sampleX =v1*v2*exp(-2.5*t);\n    f2=(sampleX+sawf(t,f));\n    float fx=f2*1.5;\n    return fx;\n}\n\n\nfloat D3(float ton, float tid, float toff)\n{   vec3 n3;\n    float resp;\n    n3=vec3(ton,tid, toff);\n    \n    \n    if(ms>=ton && ms<=toff)\n    {      // lower one octave\n      //n3.y -=12.; //12 notas\n      //n3.y +=12.; //12 notas\n\n      // compute note frequency and time  \n      float f = 440.0*pow( 2.0, float(n3.y-69.)/12.0 );\n      float t = mtime - float(n3.x)/mtempo;\n      if( n3.x==0.0 ) return 0.0;\n\n      // prepare wave parameters\n      float w = tau*f;\n      \n      float dwdt = w/iSampleRate; // derivative\n\n      // mix between bandlimited and raw saw waves  \n      vec2 v = smoothstep(-0.2,0.2,sin(t*vec2(1.0,0.5)) );\n      // build instrument\n\n      float f1,y;\n      f1=wave1(w*t,1.00*dwdt,v,t,w);\n      float wf  = 0.4*f1;\n      y=f1*wf;\n      float offset=n3.x;\n       y*=exp(-1.0/n3.z * (t -offset) );\n        \n       mresp+=y;\n    }\n    \n}\n\n\n\nfloat SoundIq(float time)\n{ ///referencia de notas musicales... iq \n  time = mod( time+1.0, ttotal);\n // tune\n  float tempo = 0.45;\n  float s = time*tempo;\n vec3 n3=vec3(0.0);\n \n //variables globales\n ms=s;\n mresp=0.0;\n mtime=time;\n mtempo=tempo;\n \n\n\nD3(0.000,48.0,0.250); D3(0.250,24.0,0.375); D3(0.250,29.0,0.375); D3(0.250,33.0,0.375); D3(0.250,45.0,0.875); D3(0.375,24.0,0.500);\n D3(0.500,29.0,0.625); D3(0.500,33.0,0.625); D3(0.625,24.0,0.750); D3(0.750,29.0,0.875); D3(0.750,33.0,0.875); D3(0.938,24.0,1.063);\n D3(0.938,45.0,1.063); D3(1.063,29.0,1.188); D3(1.063,33.0,1.188); D3(1.063,48.0,1.188); D3(1.188,24.0,1.313); D3(1.188,50.0,1.313);\n D3(1.313,24.0,1.438); D3(1.313,28.0,1.438); D3(1.313,31.0,1.438); D3(1.313,43.0,2.063); D3(1.438,24.0,1.563); D3(1.563,28.0,1.688);\n D3(1.563,31.0,1.688); D3(1.688,24.0,1.813); D3(1.813,28.0,1.938); D3(1.813,31.0,1.938); D3(1.938,24.0,2.125); D3(2.125,28.0,2.250);\n D3(2.125,31.0,2.250); D3(2.125,43.0,2.250); D3(2.250,24.0,2.375); D3(2.250,45.0,2.375); D3(2.375,24.0,2.500); D3(2.375,28.0,2.500);\n D3(2.375,31.0,2.500); D3(2.375,34.0,2.500); D3(2.375,46.0,2.625); D3(2.500,24.0,2.625); D3(2.625,28.0,2.750); D3(2.625,31.0,2.750);\n D3(2.625,34.0,2.750); D3(2.625,53.0,3.000); D3(2.750,24.0,2.875); D3(2.875,28.0,3.000); D3(2.875,31.0,3.000); D3(2.875,34.0,3.000);\n D3(3.000,24.0,3.125); D3(3.000,53.0,3.125); D3(3.125,28.0,3.250); D3(3.125,31.0,3.250); D3(3.125,34.0,3.250); D3(3.125,52.0,3.250);\n D3(3.250,24.0,3.375); D3(3.250,48.0,3.375); D3(3.375,24.0,3.500); D3(3.375,29.0,3.500); D3(3.375,33.0,3.500); D3(3.375,50.0,3.500);\n D3(3.500,24.0,3.625); D3(3.500,48.0,3.563); D3(3.563,46.0,3.625); D3(3.625,29.0,3.750); D3(3.625,33.0,3.750); D3(3.625,45.0,4.125);\n D3(3.750,24.0,3.875); D3(3.875,29.0,4.000); D3(3.875,33.0,4.000); D3(4.000,24.0,4.125); D3(4.125,29.0,4.250); D3(4.125,33.0,4.250);\n D3(4.250,24.0,4.375); D3(4.250,48.0,4.375); D3(4.375,29.0,4.500); D3(4.375,34.0,4.500); D3(4.375,38.0,4.500); D3(4.375,50.0,4.500);\n D3(4.500,29.0,4.625); D3(4.500,50.0,4.750); D3(4.625,34.0,4.750); D3(4.625,38.0,4.750); D3(4.750,29.0,4.875); D3(4.750,50.0,4.875);\n D3(4.875,34.0,5.000); D3(4.875,38.0,5.000); D3(4.875,55.0,4.938); D3(4.938,53.0,5.063); D3(5.000,29.0,5.125); D3(5.063,52.0,5.188);\n D3(5.125,34.0,5.250); D3(5.125,38.0,5.250); D3(5.188,53.0,5.250); D3(5.250,29.0,5.375); D3(5.250,50.0,5.375); D3(5.375,24.0,5.500);\n D3(5.375,29.0,5.500); D3(5.375,33.0,5.500); D3(5.375,48.0,5.875); D3(5.500,24.0,5.625); D3(5.625,29.0,5.750); D3(5.625,33.0,5.750);\n D3(5.750,24.0,5.875); D3(5.875,29.0,6.000); D3(5.875,33.0,6.000); D3(5.875,41.0,6.000); D3(6.000,24.0,6.125); D3(6.000,43.0,6.125);\n D3(6.125,29.0,6.250); D3(6.125,33.0,6.250); D3(6.125,45.0,6.250); D3(6.250,24.0,6.375); D3(6.250,50.0,6.375); D3(6.375,24.0,6.500);\n D3(6.375,28.0,6.500); D3(6.375,31.0,6.500); D3(6.375,34.0,6.500); D3(6.375,48.0,6.750); D3(6.500,24.0,6.625); D3(6.625,28.0,6.750);\n D3(6.625,31.0,6.750); D3(6.625,34.0,6.750); D3(6.750,24.0,6.875); D3(6.750,48.0,6.875); D3(6.875,28.0,7.000); D3(6.875,31.0,7.000);\n D3(6.875,34.0,7.000); D3(6.875,46.0,7.000); D3(7.000,24.0,7.125); D3(7.000,45.0,7.250); D3(7.125,28.0,7.250); D3(7.125,31.0,7.250);\n D3(7.125,34.0,7.250); D3(7.250,24.0,7.375); D3(7.250,40.0,7.500); D3(7.375,24.0,7.500); D3(7.375,29.0,7.500); D3(7.375,33.0,7.500);\n D3(7.500,24.0,7.625); D3(7.500,41.0,7.875); D3(7.625,29.0,7.750); D3(7.625,33.0,7.750); D3(7.750,24.0,7.875); D3(7.875,29.0,8.375);\n D3(7.875,33.0,8.375); D3(8.125,48.0,8.375); D3(8.375,17.0,8.625); D3(8.375,41.0,8.500); D3(8.375,45.0,8.500); D3(8.500,36.0,8.625);\n D3(8.625,29.0,8.750); D3(8.625,41.0,8.750); D3(8.625,45.0,8.750); D3(8.750,24.0,8.875); D3(8.750,36.0,8.875); D3(8.875,17.0,9.000);\n D3(8.875,41.0,9.000); D3(8.875,45.0,9.000); D3(9.000,17.0,9.125); D3(9.000,33.0,9.125); D3(9.000,45.0,9.125);\n\n  return mresp;\n}\n\nvec2 mainSound( in int samp, float time )\n{ float t1=mod(time, ttotal);\n  float y= SoundIq(t1)*0.5;\n  return vec2(y);\n}   \n","name":"Sound","description":"","type":"sound"},{"inputs":[],"outputs":[],"code":"//iq\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat dot2( in vec3 v ) { return dot(v,v); }\nfloat ndot( in vec2 a, in vec2 b ) { return a.x*b.x - a.y*b.y; }\n\n\n\nfloat sdEllipse( in vec2 p, in vec2 ab )\n{\n    p = abs(p); if( p.x > p.y ) {p=p.yx;ab=ab.yx;}\n    float l = ab.y*ab.y - ab.x*ab.x;\n    float m = ab.x*p.x/l;      float m2 = m*m; \n    float n = ab.y*p.y/l;      float n2 = n*n; \n    float c = (m2+n2-1.0)/3.0; float c3 = c*c*c;\n    float q = c3 + m2*n2*2.0;\n    float d = c3 + m2*n2;\n    float g = m + m*n2;\n    float co;\n    if( d<0.0 )\n    {\n        float h = acos(q/c3)/3.0;\n        float s = cos(h);\n        float t = sin(h)*sqrt(3.0);\n        float rx = sqrt( -c*(s + t + 2.0) + m2 );\n        float ry = sqrt( -c*(s - t + 2.0) + m2 );\n        co = (ry+sign(l)*rx+abs(g)/(rx*ry)- m)/2.0;\n    }\n    else\n    {\n        float h = 2.0*m*n*sqrt( d );\n        float s = sign(q+h)*pow(abs(q+h), 1.0/3.0);\n        float u = sign(q-h)*pow(abs(q-h), 1.0/3.0);\n        float rx = -s - u - c*4.0 + 2.0*m2;\n        float ry = (s - u)*sqrt(3.0);\n        float rm = sqrt( rx*rx + ry*ry );\n        co = (ry/sqrt(rm-rx)+2.0*g/rm-m)/2.0;\n    }\n    vec2 r = ab * vec2(co, sqrt(1.0-co*co));\n    return length(r-p) * sign(p.y-r.y);\n}\n\n\n\n\n\n//Quadratic Bezier - exact   (https://www.shadertoy.com/view/MlKcDD)\n\nfloat sdBezier( in vec2 pos, in vec2 A, in vec2 B, in vec2 C )\n{    \n    vec2 a = B - A;\n    vec2 b = A - 2.0*B + C;\n    vec2 c = a * 2.0;\n    vec2 d = A - pos;\n    float kk = 1.0/dot(b,b);\n    float kx = kk * dot(a,b);\n    float ky = kk * (2.0*dot(a,a)+dot(d,b)) / 3.0;\n    float kz = kk * dot(d,a);      \n    float res = 0.0;\n    float p = ky - kx*kx;\n    float p3 = p*p*p;\n    float q = kx*(2.0*kx*kx-3.0*ky) + kz;\n    float h = q*q + 4.0*p3;\n    if( h >= 0.0) \n    { \n        h = sqrt(h);\n        vec2 x = (vec2(h,-h)-q)/2.0;\n        vec2 uv = sign(x)*pow(abs(x), vec2(1.0/3.0));\n        float t = clamp( uv.x+uv.y-kx, 0.0, 1.0 );\n        res = dot2(d + (c + b*t)*t);\n    }\n    else\n    {\n        float z = sqrt(-p);\n        float v = acos( q/(p*z*2.0) ) / 3.0;\n        float m = cos(v);\n        float n = sin(v)*1.732050808;\n        vec3  t = clamp(vec3(m+m,-n-m,n-m)*z-kx,0.0,1.0);\n        res = min( dot2(d+(c+b*t.x)*t.x),\n                   dot2(d+(c+b*t.y)*t.y) );\n        // the third root cannot be the closest\n        // res = min(res,dot2(d+(c+b*t.z)*t.z));\n    }\n    return sqrt( res );\n}\n\n\n\n// psuedo random noise foundation\nfloat randNoise(vec2 uv)\n{\n    // feel free to change these parameters, \n    // had them low for more floating point accuracy\n    return fract(sin(uv.x*63.+uv.y*59.+16.)*32672.93);\n}\n","name":"Common","description":"","type":"common"}]}