{"ver":"0.1","info":{"id":"mdGcRh","date":"1695845205","viewed":99,"name":"Super Fast Blur","username":"Oreomaster598","description":"A fast blur efftect.","likes":1,"published":1,"flags":0,"usePreview":1,"tags":["blur","bloom","guassian"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// The max kernel size (impacts performance)\n#define maxKernel 4.0\n\n// The max offset (doesn't impact performance)\n#define maxOffset 34.0\n\nvec3 fastBlur(vec2 uv, vec2 texel, vec2 kd)\n{\n    float r = kd.x * kd.y;\n    float rr = 1.0/r;\n    \n    vec3 col = vec3(0.0);\n    float a = 1.0;\n    for(float x = -r; x <= r; x += kd.y)\n    {       \n        for(float y = -r; y <= r; y += kd.y)\n        {\n            a++;\n            vec2 c = uv + vec2(x,y) * texel;\n\n            col += texture(\n            \n            iChannel0, \n            \n            c \n            + fract(sin(dot(c, vec2(12.9898, 78.233))) * 43758.5453) * texel * kd.y * 2.0\n            - kd.yy * texel\n            \n            ).rgb * (2.0 - distance(vec2(x,y) * rr, vec2(0.0)));\n        }\n        \n    }\n    return col / a;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 texel = vec2(1.0)/iResolution.xy;\n    \n    vec2 mouse = iMouse.xy / iResolution.xy;\n    \n    // Mouse X for distance, Mouse Y for kernel\n    \n    vec3 blur = fastBlur(uv, texel, round(vec2(mouse.y * maxKernel + 1.0, mouse.x * maxOffset + 1.0)));\n\n    fragColor = vec4(blur, 1.0);\n}","name":"Image","description":"","type":"image"}]}