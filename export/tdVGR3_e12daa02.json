{"ver":"0.1","info":{"id":"tdVGR3","date":"1570675013","viewed":108,"name":"More balls","username":"hippietrail","description":"More balls","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["bounce","state"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float getVar(int i) {\n    return texelFetch(iChannel0, ivec2(i, 0), 0).a;\n}\n\nvoid mainImage(out vec4 col, in vec2 pixel)\n{\n    vec3 colm = vec3(0);\n    for (int i = 0; i < NUMBALLS; ++i) {\n        int ii = int(mod(float(i), 3.));\n        float red = float(ii == 0);\n        float green =float(ii == 1);\n        float blue = float(ii == 2);\n        \n\t    vec3 colt = vec3(0);\n    \n        vec2 ball = vec2(getVar(i * 5 + 0) * iResolution.x,\n                         getVar(i * 5 + 1) * iResolution.y);\n\n        float dist = distance(pixel, ball);\n        if (dist < RAD) {\n            colt.r = red * (1. - dist/RAD);\n            colt.g = green * (1. - dist/RAD);\n            colt.b = blue * (1. - dist/RAD);\n        }\n        /*if (abs(dist-RAD) < 1.) {\n            colt.g = .4;\n        }\n        if (dist < 1.) {\n            colt.g = 1.;\n        }*/\n\n        float flashbg = getVar(i * 5 + 4) * 10.;\n        //if (flashbg == 3.) colt.r = 1.;\n        \n        colm += colt;\n    }\n    \n    if (colm.r != 0. || colm.g != 0. || colm.b != 0.)\n\t    col = vec4(colm, 1.0);\n    else if (TRAILS != 0.)\n        discard;\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define NUMBALLS 65\n#define RAD 55.\n#define VELOCITY_MULTIPLIER 5.\n#define TRAILS 0.\n#define WILDNESS 1.5\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float hash1(float n)\n{\n    return fract(sin(n*74274.35673));\n}\n\nfloat getVar(int i) {\n    return texelFetch(iChannel0, ivec2(i, 0), 0).a;\n}\n\nvoid mainImage(out vec4 ret, in vec2 pixel)\n{\n    vec3 col = vec3(0);\n    float alphadata;\n\n    if (floor(pixel.y) != 0. || floor(pixel.x) >= float(NUMBALLS * 5)) {\n        discard;\n    } else {\n    \tfor (int b = 0; b < NUMBALLS; ++b) {\n            float fb = float(b);\n\n            vec2 ball = vec2(getVar(b * 5 + 0) * iResolution.x,\n                        \t getVar(b * 5 + 1) * iResolution.y);\n            vec2 velocity = vec2(getVar(b * 5 + 2) * 10.,\n                                 getVar(b * 5 + 3) * 10.);\n            float flashbg = 0.;\n\n            if (iFrame == 0) {\n                ball = iResolution.xy / 2.;\n                velocity.x = hash1(fb + ball.x);\n                velocity.y = hash1(fb + velocity.y);\n                velocity = (velocity * 5. - 2.5) * VELOCITY_MULTIPLIER;\n            }\n\n            ball += velocity;\n\n            if ((velocity.x > 0. && ball.x > iResolution.x - RAD)\n                || (velocity.x < 0. && ball.x < RAD)) {\n                velocity.x = -velocity.x;\n                velocity.y += hash1(fb + velocity.y+iTime)*WILDNESS - WILDNESS/2.;\n                flashbg = .1;\n            }\n            if ((velocity.y > 0. && ball.y > iResolution.y - RAD)\n                || (velocity.y < 0. && ball.y < RAD)) {\n                velocity.y = -velocity.y;\n                velocity.x += hash1(fb + velocity.x+iTime)*WILDNESS - WILDNESS/2.;\n                flashbg = .2;\n            }\n\n            if (length(velocity) > 2. * VELOCITY_MULTIPLIER) {\n                velocity *= .75;\n                flashbg = .3;\n            }\n\n            //float i = floor(/*float(b * 5)*/ + pixel.x);\n            int i = int(pixel.x);\n\n            if      (i == b * 5 + 0) alphadata = ball.x / iResolution.x;\n            else if (i == b * 5 + 1) alphadata = ball.y / iResolution.y;\n            else if (i == b * 5 + 2) alphadata = velocity.x / 10.;\n            else if (i == b * 5 + 3) alphadata = velocity.y / 10.;\n            else if (i == b * 5 + 4) alphadata = flashbg;\n        }\n    }\n    \n\tret = vec4(col, alphadata);\n}","name":"Buffer A","description":"","type":"buffer"}]}