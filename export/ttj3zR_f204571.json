{"ver":"0.1","info":{"id":"ttj3zR","date":"1558340827","viewed":414,"name":"Chain structure","username":"gaz","description":"3d","likes":25,"published":1,"flags":0,"usePreview":0,"tags":["3d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI acos(-1.0)\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n\n\n// https://www.shadertoy.com/view/ltf3W2\nfloat SAbs(float x, float k)\n{\n    return sqrt(x * x + k);\n}\n\nfloat SRamp1(float x, float k)\n{\n    return 0.5 * (x - SAbs(x, k));\n}\n\nfloat SMin1(float a, float b, float k)\n{\n    return a + SRamp1(b - a, k);\n}\n\n#define sabs(a) SAbs(a,0.005)\n#define smin(a,b) SMin1(a,b,0.0003)\n\n\nvec2 fold(vec2 p, int n)\n{\n    //p.x=abs(p.x);\n    p.x=sabs(p.x);\n    vec2 v=vec2(0,1);\n    for(int i=0;i<n;i++)\n    {\n        //p-=2.0*min(0.0,dot(p,v))*v;\n        p-=2.0*smin(0.0,dot(p,v))*v;\n        v=normalize(vec2(v.x-1.0,v.y));\n    }\n    return p;    \n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\nfloat map(vec3 p)\n{\n#if 1\n\tfloat A=5.566;\n    float c=7.0;\n    p=mod(p,c)-c*0.5;\n    p.xz=fold(p.xz,5);\n    for(int i=0;i<5;i++)\n    {\n    \tp.xy=abs(p.xy)-2.0;\n    \tp.yz=abs(p.yz)-2.5;\n    \tp.xy*=rot(A);\n    \tp.yz*=rot(A*0.5);\n    \tp=abs(p)-2.0;\n    }\n#endif\n\n    vec2 s=vec2(0.05,0.02);\n    float h=0.08;\n    float de=1.0;\n    vec3 q=p;\n    q.xy=fold(q.xy,5);\n    q.y-=2.;\n    q.x-=clamp(q.x,-h,h);\n    de=min(de,sdTorus(q,s));\n    q=p;\n    q.xy*=rot(PI/exp2(5.0));\n    q.xy=fold(q.xy,5);\n    q.y-=2.0;\n    q.x-=clamp(q.x,-h,h);\n    de=min(de,sdTorus(q.xzy,s));\n    return de;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv=(fragCoord*2.0-iResolution.xy)/iResolution.y;\n\tvec3 ro=vec3(0,1,3);\n    ro.xz*=rot(iTime*0.2);\n    vec3 ta=vec3(1,sin(iTime*0.7),1);\n    vec3 w=normalize(ta-ro);\n    vec3 u=normalize(cross(w,vec3(0,1,0)));\n    vec3 rd=mat3(u,cross(u,w),w)*normalize(vec3(uv,2));\n    vec3 col=vec3(0);\n    vec3 p=ro;\n    for(float i=1.0;i>0.0;i-=1.0/80.0)\n    {\n     \tfloat d=map(p);\n        if(d<0.001)\n        {\n            col+=i*i;\n            break;\n        }\n        p+=d*rd;\n    }\n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}