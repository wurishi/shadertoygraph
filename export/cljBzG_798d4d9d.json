{"ver":"0.1","info":{"id":"cljBzG","date":"1694246465","viewed":115,"name":"sec to star poly","username":"ChunderFPV","description":"Using polar transformed secant waves to form regular & star polygons.\n\nUnlisted poly shaders:\nTakes a fraction: https://www.shadertoy.com/view/mlSBR3\nTakes arc radian: https://www.shadertoy.com/view/dtSfzt","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["waves","complex","trig","polar","polygon","secant"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define T(u) vec2(atan(u.x, u.y), length(u))             // polar transform\n#define P(r,o) ls/abs(r/cos((fract(u.x/a+o)-.5)*a)-u.y)  // polygon (radius, offset)\n\nvoid mainImage( out vec4 C, in vec2 U )\n{\n    bool b = iMouse.z > 0.; // clicking\n    vec2 R = iResolution.xy,\n         m = (iMouse.xy-.5*R)/R.y*3.,\n         u = (U-.5*R)/R.y*3., p;\n    \n    // polar\n    if (u.y < 1.) u = T(u);\n    if (m.y < 1.) m = T(m);\n    \n    float l = 20.,  // poly loop\n          ls = .01, // line size\n          t = iTime/30.,\n          pi2 = 6.2832,\n          a = b ? m.x: (mod(t-.3, 1.)-.5)*pi2, // arc\n          sa = sign(a),   // arc polarity\n          ir = cos(a/2.), // inradius\n          i = 0.;\n    \n    vec3 c = vec3(0),\n         k = cos(vec3(0, 2, 4)+a)*.5+.7;\n    \n    c += min(.5*ls/abs(u.y-1.), 1.)*k.gbr; // unit circle\n    if (b) c += fwidth(u.x/4.)/abs(u.x-m.x); // slope\n    \n    for (; i++<l;)\n        p.x = P(ir, 0.), // inner\n        p.y = P(1., .5), // outer\n        c += min(p.x*k + p.y*k.brg, 2.)/i*abs(a)/pi2, // color\n        u.x += pi2*sa;\n    \n    C = vec4(sqrt(c)+c, 1);\n}","name":"Image","description":"","type":"image"}]}