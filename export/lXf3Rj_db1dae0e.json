{"ver":"0.1","info":{"id":"lXf3Rj","date":"1707674137","viewed":171,"name":"Purple Magnetic Field","username":"EthanZappa","description":"Magnetic Field","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["purplemagneticfield"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float modIntegers(float f){\n    // return the number f modulo the integers in the range (-0.5,0.5)\n    f += 1.5;\n    return f-floor(f)-0.5;\n}\n\nfloat smoothModInteger(float f){\n    return 1.-smoothstep(1.0,0.05,abs(modIntegers(f)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = 1.2*(fragCoord-iResolution.xy/2.)/iResolution.y;\n\n    mat2 m = mat2(\n        0 , 1,\n        -1, iTime\n        );\n        \n    mat2 mm = inverse(m);\n    \n    vec2 preNum   = mm[0][0]*uv+mm[0][1]*vec2(1.,0.);\n    vec2 preDenon = mm[1][0]*uv+mm[1][1]*vec2(1.,0.);\n    \n    vec2 numerator = vec2(\n        preNum.x*preDenon.x+preNum.y*preDenon.y,\n        preNum.y*preDenon.x-preNum.x*preDenon.y);\n    float denominator = length(preDenon);\n    denominator *= denominator;\n\n    vec2 z = numerator/denominator;\n\n    float x = modIntegers(z.x);\n    \n    float y = modIntegers(z.y);\n    \n    float d = modIntegers(length(z));\n\n\n    // Output to screen\n    vec3 color = vec3(\n        smoothModInteger(z.x),\n        smoothModInteger(z.y),\n        smoothModInteger(length(z))\n        );\n    fragColor = vec4(color,2.0);\n}","name":"Image","description":"","type":"image"}]}