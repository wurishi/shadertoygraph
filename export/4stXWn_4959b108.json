{"ver":"0.1","info":{"id":"4stXWn","date":"1458811085","viewed":1477,"name":"Glow Curve Test","username":"Lawliet","description":"This is compared to linear equation and parabolic equation and Gaussian distribution of glow effect.","likes":17,"published":3,"flags":0,"usePreview":0,"tags":["test","glow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define INSIDE_DIAMETER 0.10\n#define OUTSIDE_DIAMETER 0.12\n#define GLOW_DISTANCE 0.025\n#define SQRT_2PI 2.5066282746\n#define GLOW_COLOR vec4(0.098,0.878,0.815,1.0)\n\nvec4 linear(float d){\n    vec4 color;\n    \n    /*if(d <= (OUTSIDE_DIAMETER - INSIDE_DIAMETER) * 0.5 + INSIDE_DIAMETER){\n        color = clamp((d - INSIDE_DIAMETER + GLOW_DISTANCE) / GLOW_DISTANCE, 0.0, 1.0) * GLOW_COLOR;\n    }else{\n        color = clamp((OUTSIDE_DIAMETER + GLOW_DISTANCE - d) / GLOW_DISTANCE, 0.0, 1.0) * GLOW_COLOR;\n    }*/\n    \n    //optimize:y = k * |x + a| + b;\n    \n    float k = -1.0 / GLOW_DISTANCE;\n    \n    float a = -(OUTSIDE_DIAMETER + INSIDE_DIAMETER) * 0.5;\n    \n    float b = -k * (OUTSIDE_DIAMETER + GLOW_DISTANCE + a);\n    \n    color = clamp(k * abs(d + a) + b, 0.0, 1.0) * GLOW_COLOR;\n    \n    return color;\n}\n\nvec4 parabola(float d){\n    vec4 color;\n    \n    float v = (d - INSIDE_DIAMETER + GLOW_DISTANCE) * (d - OUTSIDE_DIAMETER - GLOW_DISTANCE) / ( GLOW_DISTANCE * (INSIDE_DIAMETER - OUTSIDE_DIAMETER - GLOW_DISTANCE));\n    \n    color = clamp(v, 0.0, 1.0) * GLOW_COLOR;\n    \n    return color;\n}\n\nvec4 gaussian(float d){\n    vec4 color;\n    \n    float mu = (OUTSIDE_DIAMETER + INSIDE_DIAMETER) * 0.5;\n    \n    float sigma = (OUTSIDE_DIAMETER - INSIDE_DIAMETER + GLOW_DISTANCE * 2.0) / 6.0;\n    \n    float v = exp(-0.5*(d - mu)*(d - mu)/(sigma*sigma)) / sigma / SQRT_2PI ;\n    \n    //position 1.5sigma equal to 1\n    float scale = exp(-0.5 * 1.5 * 1.5) / sigma / SQRT_2PI;\n    \n    color = clamp(v / scale, 0.0, 1.0) * GLOW_COLOR;\n    \n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    float p = iResolution.x / iResolution.y;\n    \n    uv.y = uv.y / p;\n\n    /*if(uv.x < 1.0 / 3.0){  \n   \t\tfragColor += linear(distance(uv,vec2(1.0/6.0,0.5 / p)));\n    }else if(uv.x < 2.0 / 3.0){\n        fragColor += parabola(distance(uv,vec2(3.0/6.0,0.5 / p)));\n    }else{\n        fragColor += gaussian(distance(uv,vec2(5.0/6.0,0.5 / p)));\n    }*/\n    \n    fragColor = linear(distance(uv,vec2(1.0/6.0,0.5 / p)));\n    fragColor += parabola(distance(uv,vec2(3.0/6.0,0.5 / p)));\n    fragColor += gaussian(distance(uv,vec2(5.0/6.0,0.5 / p)));\n}","name":"Image","description":"","type":"image"}]}