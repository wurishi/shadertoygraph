{"ver":"0.1","info":{"id":"dsdfWn","date":"1697055842","viewed":86,"name":"11. Wander","username":"Ladus","description":"Inktober 2023 Day 11. Somebody who uses a wand is a wander right?","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["inktober","wander"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n\n//  Function from Iñigo Quiles - https://www.shadertoy.com/view/MsS3Wc\nvec3 hsb2rgb( in vec3 c ){\n    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),\n                             6.0)-3.0)-1.0,\n                     0.0,\n                     1.0 );\n    rgb = rgb*rgb*(3.0-2.0*rgb);\n    return c.z * mix(vec3(1.0), rgb, c.y);\n}\n// SDF Functions from Iñigo Quiles - https://iquilezles.org/articles/distfunctions2d/\nfloat sdStar5(in vec2 p, in float r, in float rf)\n{\n    const vec2 k1 = vec2(0.809016994375, -0.587785252292);\n    const vec2 k2 = vec2(-k1.x,k1.y);\n    p.x = abs(p.x);\n    p -= 2.0*max(dot(k1,p),0.0)*k1;\n    p -= 2.0*max(dot(k2,p),0.0)*k2;\n    p.x = abs(p.x);\n    p.y -= r;\n    vec2 ba = rf*vec2(-k1.y,k1.x) - vec2(0,1);\n    float h = clamp( dot(p,ba)/dot(ba,ba), 0.0, r );\n    return length(p-ba*h) * sign(p.y*ba.x-p.x*ba.y);\n}\nfloat sdUnevenCapsule( vec2 p, float r1, float r2, float h )\n{\n    p.x = abs(p.x);\n    float b = (r1-r2)/h;\n    float a = sqrt(1.0-b*b);\n    float k = dot(p,vec2(-b,a));\n    if( k < 0.0 ) return length(p) - r1;\n    if( k > a*h ) return length(p-vec2(0.0,h)) - r2;\n    return dot(p, vec2(a,b) ) - r1;\n}\n\nvec2 normalizeScreenSpace(vec2 fragCoord, out float aa) {\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x *= iResolution.x / iResolution.y;\n    uv.x -= 1.-(iResolution.y/iResolution.x);\n    uv = (uv - vec2(0.5))*2.;\n    aa = 0.01; // I should probably calculate the anti aliasing res with the iResolution...\n    return uv;\n}\n\nmat2 rotate(float a) {\n    a *= PI * 2.;\n    float s = sin(a), c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\nvec4 sdWand(vec2 p, vec2 pos, float rotation, float scale, float aa) {\n    mat2 rotationMat = rotate(rotation);\n    p *= rotationMat;\n    p += vec2(0.,0.7);\n    p += vec2(-pos.x, -pos.y)*rotationMat;\n    float starSdf = sdStar5((p+vec2(0.,-0.5))*scale*5., 1., .5);\n    float handleSdf = sdUnevenCapsule((p+vec2(0.,.5))*scale*5., 0.3,.1, 4.5);\n    float wandSdf = min(handleSdf, starSdf);\n    vec3 color = vec3(1.,0.5,1.) * 1.-(clamp(0.,1.,wandSdf) + 1.)+0.7;\n    return vec4(color,1.-smoothstep(0.-aa,0.+aa,wandSdf));\n}\n\nvec2 figureEight(float position) {\n    position = position*PI*2.;\n    // Uses \"lemniscate of Bernoulli\" @ Ilmari Karonen's answer on https://gamedev.stackexchange.com/questions/43691/how-can-i-move-an-object-in-an-infinity-or-figure-8-trajectory\n    float scale = 2. / (3. - cos(position*2.));\n    return vec2(scale * cos(position), scale * sin(position*2.)/2.);\n}\n\nfloat glow(vec2 p, vec2 figurePos){\n    return 1.-smoothstep(-0.5,0.2,distance(p, figurePos)-0.001);\n}\n\nfloat trail(vec2 p, float position, float trailLength, float steps) {\n    float v = 0.;\n    for(float i = 0.; i < trailLength; i+= trailLength/steps) {\n        v += glow(p, figureEight(position-i)) * (1.-i);\n    }\n    return clamp(0.,1.,v);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalize coordinates & antialiasing\n    float aa = 0.;\n    vec2 p = normalizeScreenSpace(fragCoord, aa);\n    \n    float loopingTime = fract(iTime/5.);\n    \n    // Get figure eight location animation\n    vec2 figureEight = figureEight(loopingTime);\n    \n    vec3 background = vec3(0.,0.,0.);\n    vec4 wand = sdWand(p, figureEight, atan(figureEight.x-1.,figureEight.y+2.)/PI, 1., aa);\n    float glow = 1.-distance(p, figureEight)*0.5;\n    float trail = trail(p, loopingTime, 0.9, 150.);\n    \n    // Combine the colors\n    vec3 color = mix(background, hsb2rgb(vec3((trail/3.)+0.55, 1., 1.)), trail);\n    color = mix(color, wand.rgb, wand.a);\n    \n    fragColor = vec4((color+clamp(0.,1.,glow)*0.1), 0.);\n}","name":"Image","description":"","type":"image"}]}