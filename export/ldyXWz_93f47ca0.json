{"ver":"0.1","info":{"id":"ldyXWz","date":"1463759947","viewed":404,"name":"Diamond HSV2RGB","username":"MichaelPohoreski","description":"HSL to recolor texture demo.  Click and Drag the mouse:\n* up/down to change the saturation (bottom = 0%, top = 100%)\n* left/right to change the lightness (left = 0%, right = 100%)\nVersion 1 = HSV, Version 2 = HSL","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["procedural","diamond","hsv"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3zn","filepath":"/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","previewfilepath":"/media/ap/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Demo by Michael Pohoreski aka mysticreddit\n// Reddit Thread: \n// * https://www.reddit.com/r/gamedev/comments/4k8l33/using_an_hsl_shader_to_recolor_textures/\n\n// 1 == HSV\n// 2 == HSL\n#define VERSION 2\n\n\n// Original\nvec3 hsl2rgb(vec3 HSL)\n{\n   float R = abs(HSL.x * 6.0 - 3.0) - 1.0;\n   float G = 2.0 - abs(HSL.x * 6.0 - 2.0);\n   float B = 2.0 - abs(HSL.x * 6.0 - 4.0);\n   vec3 RGB = clamp(vec3(R,G,B), 0.0, 1.0);\n   float C = (1.0 - abs(2.0 * HSL.z - 1.0)) * HSL.y;\n   return (RGB - 0.5) * C + HSL.z;\n}\n\n// References:\n// * http://lolengine.net/blog/2013/07/27/rgb-to-hsv-in-glsl\n// * http://gamedev.stackexchange.com/questions/59797/glsl-shader-change-hue-saturation-brightness\n// Optimized by Michael Pohoreski\nvec3 hsv2rgb( vec3 c )\n{\n    vec3 K = vec3(3,2,1) / 3.0;\n    vec3 p = abs(fract(c.rrr + K.rgb) * 6.0 - vec3(3));\n    return c.b * mix(K.rrr, clamp(p - K.rrr, 0.0, 1.0), c.g);\n}\n\n// no texture, so simulate one\n// /\\\n// \\/\nvec4 diamond( vec2 uv )\n{\n#if VERSION == 1\n    // Ideally,\n    // R = Saturation\n    // A = lightness (outside = 0, inside = 0.5 to 1.0) \n\n    vec2  p = uv*2.0 - 1.0; // remap [0,1] -> [-1,+1]\n    float d =      abs(p.x)+abs(p.y); // diamond shape\n    float curvature  = d*16.0;\n    float a = 1.0-(abs(p.x)*abs(p.y)*curvature); // simple alpha fade\n    bool  inside     = (d < 1.0);\n    float g          = inside ? 1.0 : 0.0; // in or out\n    //return vec4(       vec3(g), d ); // flat  , hard-diamond\n    //return vec4( 1.0 - vec3(d), d ); // smooth, hard-diamond\n    if( !inside ) return vec4(0.); // force to black if outside diamond\n    return vec4(       vec3(a), g ); // smooth, 1/x\n#endif\n    \n#if VERSION == 2\n    // sphere\n    vec2  p      = uv*2.0 - 1.0; // remap [0,1] -> [-1,+1]\n    float d      = dot(p,p);\n    float dist   = smoothstep( 0.2, 0.8, d );\n    bool  inside = (dist < 1.0); \n    float lit  = inside ? 1. - dist : 0.0;\n\n\n    // mix with diamond\n#if 1\n    float g      = abs(p.x) + abs(p.y);\n    float grid   = g;\n    lit *= (1.0 - (grid*2.0)/2.0); // OR: lit *= 1.0 - clamp( 0.0, 1.0, grid );    \n#endif\n\n    vec4 color =       vec4( 1.0, 0.0, 0.0, lit  ); // outside=white, edge=pure     pure .. center=black\n//  vec4 color = 1.0 - vec4( 0.0, 0.0, 0.0, lit  ); // outside=white, edge=white .. pure .. center=black \n//  vec4 color =       vec4( 1.0, 0.0, 0.0, grid ); // outside=white, edge=color .. pur  .. center=black\n//  vec4 color = 1.0 - vec4( 0.0, 0.0, 0.0, grid ); // outside=color, edge=black .. pure .. center=white \n    return color;\n#endif\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 m  = iMouse.xy / iResolution.xy;\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 color = diamond( uv ); // or texture( iChannel0, uv );\n    \n    float duration = 10.0;\n    float u_Hue    = fract( iTime / duration );\n\n    if( iMouse.z < 0.1 ) // if mouse left button not down default to nice saturation\n        m = vec2( 1.0, 0.75 ); // default to top-right mouse position\n    \n#if VERSION == 1\n    float u_Sat    = m.y;\n    float u_Light  = color.r + color.r*m.x; // HACK! // 0.5 + m.x; // color.r*m.x;\n    float u_Alpha  = color.a;\n#else\n    float u_Sat    = color.r * m.y;\n    float u_Light  = color.a * m.x;\n    float u_Apha   = color.a;\n#endif\n\n// Original    \n//   gl_FragColor = texture(u_TextureUnit, v_TextureCoordinates);\n//   vec3 rgb = hsl2rgb(vec3(u_Hue / 360.0, u_Sat / 100.0, gl_FragColor.x + gl_FragColor.x * u_Light / 100.0));\n//   gl_FragColor = vec4(rgb.r, rgb.g, rgb.b, gl_FragColor.a * u_Alpha / 100.0);\n    \n    // Fixed\n#if VERSION == 1\n    vec3 rgb = hsv2rgb( vec3( u_Hue, u_Sat, u_Light ));\n#else\n    vec3 rgb = hsl2rgb( vec3( u_Hue, u_Sat, u_Light ));\n#endif\n    fragColor = vec4( rgb, 1. );\n\n    // Debug 1 HSL\n    //fragColor.rgb = hsl2rgb( vec3( u_Hue, m.y, m.x ) ); // Verified\n    // Debug 2 HSV\n    //fragColor.rgb = hsv2rgb( vec3( u_Hue, m.y, m.x ) ); // Verified\n    // Debug 3 Diamond \"Texture\" \n    //fragColor = color;\n}\n","name":"Image","description":"","type":"image"}]}