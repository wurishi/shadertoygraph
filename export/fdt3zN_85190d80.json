{"ver":"0.1","info":{"id":"fdt3zN","date":"1629284449","viewed":431,"name":"Page Turn Effect","username":"tuntibaba","description":"simple page turn effect\ncontrols: hold LMB and drag around to turn the page","likes":10,"published":1,"flags":0,"usePreview":1,"tags":["pageturn"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n#define radius .1\n#define foldRadius 0.2\n#define opacity 1.0\n#define EPSILON 1e-5\n\nfloat ifLessThan(float val, float compareVal) {\n    return max(sign(compareVal - val), 0.0);\n}\n\nfloat ifGreaterThan(float val, float compareVal) {\n    return max(sign(val - compareVal), 0.0);\n}\n\nfloat mirrored_repeat(float x) {\n    x = mod(x, 2.0);\n    x += (2.0 - 2.0 * x) * ifGreaterThan(x, 1.0);\n    return x;\n}\n\nvec2 getFoldPosition() {\n    // starts from bottom right and folds to top left\n    return vec2(iResolution.x, 0.0) - vec2(iResolution.x, -iResolution.y) * mirrored_repeat(iTime);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 textureSize = iResolution.xy;\n    float aspectRatio = textureSize.x / textureSize.y;\n    vec2 invAspect = vec2(1.0 / aspectRatio, 1.0);\n    vec2 uv = fragCoord / textureSize;\n    uv.x *= aspectRatio;\n    \n    vec2 cornerPosition = iMouse.z > 0.0 ? abs(iMouse.zw) : vec2(iResolution.x, 0.0);\n    vec2 foldPosition = iMouse.z > 0.0 ? iMouse.xy : getFoldPosition();\n    \n    vec2 normalizedFoldPosition = foldPosition * vec2(aspectRatio, 1.0) / textureSize;\n    vec2 dir = normalize(foldPosition - cornerPosition + 0.1);\n    vec2 origin = normalizedFoldPosition - dir * (normalizedFoldPosition.x - aspectRatio * ifGreaterThan(dir.x, -EPSILON)) / (dir.x + EPSILON);\n    float curlDist = length(normalizedFoldPosition - origin) + (cornerPosition.x / textureSize.x * aspectRatio - aspectRatio * ifLessThan(dir.x, EPSILON)) / (dir.x + EPSILON);\n\n    float proj = dot(origin - uv, dir);\n    float dist = proj - curlDist;\n    vec2 linePoint = uv + dist * dir;\n\n    vec4 outColor;\n    if (dist > foldRadius)\n    {\n        outColor = vec4(0.0);\n    }\n    else if (dist > EPSILON)\n    {\n        float theta = asin(dist / foldRadius);\n        vec2 p1 = linePoint - dir * theta * foldRadius;\n        vec2 p2 = linePoint - dir * (PI - theta) * foldRadius;\n\n        // outside curl\n        if (p2.x < (aspectRatio + EPSILON) && p2.y < (1.0 + EPSILON) && p2.x > 0.0 && p2.y > 0.0)\n        {\n            vec4 frontPage = texture(iChannel0, p1 * invAspect);\n            vec4 backPage = texture(iChannel0, p2 * invAspect);\n            float alpha = backPage.a * frontPage.a;\n            float light = smoothstep(0.0f, 1.0f, (foldRadius - dist) / foldRadius) * 0.3f;\n            backPage.rgb += light * backPage.a;\n            outColor = vec4(mix(frontPage.rgb, backPage.rgb, backPage.a * opacity), max(backPage.a, frontPage.a));\n            outColor.rgb *= pow((foldRadius - dist) / foldRadius, 0.2);\n        }\n        // inside curl\n        else\n        {\n            outColor = texture(iChannel0, p1 * invAspect);\n            outColor.rgb *= pow((foldRadius - dist) / foldRadius, 0.2);\n        }\n    }\n    else\n    {\n        vec2 p = linePoint - dir * (abs(dist) + PI * foldRadius);\n\n        // outside curl\n        if (p.x < (aspectRatio + EPSILON) && p.y < (1.0 + EPSILON) && p.x > 0.0 && p.y > 0.0)\n        {\n            vec4 frontPage = texture(iChannel0, uv * invAspect);\n            vec4 backPage = texture(iChannel0, p * invAspect);\n            float light = smoothstep(0.0f, 1.0f, (foldRadius + dist) / foldRadius) * 0.3f;\n            backPage.rgb += light * backPage.a;\n            outColor = vec4(mix(frontPage.rgb, backPage.rgb, backPage.a * opacity), max(backPage.a, frontPage.a));\n        }\n        // flat surface\n        else\n        {\n            outColor = texture(iChannel0, uv * invAspect);\n        }\n    }\n    fragColor = outColor;\n}","name":"Image","description":"","type":"image"}]}