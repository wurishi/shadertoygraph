{"ver":"0.1","info":{"id":"MttBDS","date":"1540916333","viewed":135,"name":"feedback shader mipmap generatio","username":"mds2","description":"demonstration of how one might generate mipmaps using shader feedback instead of glGenerateMipmaps","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["experiment","mipmap"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = texture(iChannel0, uv).rgb;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (2.0 * fragCoord.x < iResolution.x && \n        2.0 * fragCoord.y < iResolution.y) {\n        vec2 coord = (floor(2.0 * fragCoord.xy))/iResolution.xy;\n        vec4 colsum = vec4(0.0);\n        colsum += texture(iChannel1, coord);\n        colsum += texture(iChannel1, coord + (vec2(1.0, 0.0))/iResolution.xy);\n        colsum += texture(iChannel1, coord + (vec2(1.0, 1.0))/iResolution.xy);\n        colsum += texture(iChannel1, coord + (vec2(0.0, 1.0))/iResolution.xy);\n        fragColor = 0.25 * colsum;\n        return;\n    }\n    float new_x_0 = mix((fragCoord.x * 2.0 - iResolution.x), fragCoord.x, \n                      step(fragCoord.x, 0.5 * iResolution.x)) / iResolution.x;\n    float new_x_1 = mix((fragCoord.x * 2.0 - iResolution.x) + 1.0, fragCoord.x, \n                      step(fragCoord.x, 0.5 * iResolution.x)) / iResolution.x;\n    float new_y_0 = mix((fragCoord.y * 2.0 - iResolution.y), fragCoord.y, \n                      step(fragCoord.y, 0.5 * iResolution.y)) / iResolution.y;\n    float new_y_1 = mix((fragCoord.y * 2.0 - iResolution.y) + 1.0, fragCoord.y, \n                      step(fragCoord.y, 0.5 * iResolution.y)) / iResolution.y;\n    fragColor = 0.25 * (\n        texture(iChannel0, vec2(new_x_1, new_y_0)) +\n        texture(iChannel0, vec2(new_x_1, new_y_1)) +\n        texture(iChannel0, vec2(new_x_0, new_y_1)) +\n        texture(iChannel0, vec2(new_x_0, new_y_0)));\n}","name":"Buffer A","description":"","type":"buffer"}]}