{"ver":"0.1","info":{"id":"lX23z1","date":"1708221833","viewed":49,"name":"P3 Inspired Water","username":"Mazure3D","description":"Shader I made for a friend's project.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["water"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Mazure3D 2024\n\nconst float SPEED = 0.0055;\nconst float INTERVAL = 1.0 / 6.0;\n\n// Sample noise in 4 opposing directions with time offsets\nvec4 noise(vec2 uv) {\n    vec4 noise1 = texture(iChannel0, vec2(fract(uv.x + trunc(iTime/INTERVAL)* SPEED), uv.y)).rrra;\n    vec4 noise2 = texture(iChannel0, vec2(fract(0.7 + uv.x - trunc(iTime/INTERVAL) * SPEED), uv.y)).rrra;\n    vec4 noise3 = texture(iChannel0, vec2(uv.x, fract(0.3 + uv.y + trunc(iTime/INTERVAL) * SPEED))).rrra;\n    vec4 noise4 = texture(iChannel0, vec2(uv.x, fract(0.8 + uv.y - trunc(iTime/INTERVAL) * SPEED))).rrra;\n    \n    return vec4(noise1.rgb * noise2.rgb * noise3.rgb * noise4.rgb, 1.0);\n}\n\nvec4 noise(vec2 uv, float speed) {\n    vec4 noise1 = texture(iChannel0, vec2(fract(uv.x + iTime * speed), uv.y)).rrra;\n    vec4 noise2 = texture(iChannel0, vec2(fract(0.7 + uv.x - iTime * speed), uv.y)).rrra;\n    vec4 noise3 = texture(iChannel0, vec2(uv.x, fract(0.3 + uv.y + iTime * speed))).rrra;\n    vec4 noise4 = texture(iChannel0, vec2(uv.x, fract(0.8 + uv.y - iTime * speed))).rrra;\n    \n    return vec4(noise1.rgb * noise2.rgb * noise3.rgb * noise4.rgb, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Bright ripples mask\n    vec4 brightMask = noise(uv);\n    \n    // Dark ripples mask\n    vec4 darkMask = noise(uv / 3.0);\n    \n    // Masks out ripples at the lower parts of the screen. Combine the ripple masks with gradient\n    vec4 gradientMask = vec4(smoothstep(0.7, 1.0, uv.y));\n    vec4 combinedMask = brightMask * gradientMask;\n    vec4 combinedMask2 = darkMask * gradientMask;\n    \n    // Colors\n    vec4 bg = vec4(0.0, smoothstep(0.0, 1.0, uv.y - 0.1), smoothstep(0.0, 1.0, uv.y + 0.8), 1.0);\n    vec4 ripples = vec4(0.5, 1.0, 1.0, 1.0);\n    \n    // Layer mixing and image display\n    vec4 col;\n    vec2 distorted = clamp(uv + noise(uv/10.0, 0.01).xy * 0.1, 0.0, 1.0);\n    \n    bg = mix(bg, texture(iChannel1, distorted), 0.2);\n    col = mix(bg, mix(bg, ripples, 0.4), step(0.06, combinedMask2.r));\n    col = mix(col, ripples, step(0.06, combinedMask.r));\n            \n    fragColor = col;\n}","name":"Image","description":"","type":"image"}]}