{"ver":"0.1","info":{"id":"Wt2BRK","date":"1599340904","viewed":122,"name":"Minimalism #13","username":"Flopine","description":"Thirteenth piece of a shader serie about minimalism, how to do small and quick artwork that are about composition and animation.\nI tried to reproduce and play with a FX from Kevin McGloughlin clip for Max Cooper: \nhttps://youtu.be/VGfayDKveAs ","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["2d","wave","colour","daily"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan and slerpy for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  https://twitter.com/CookieDemoparty\n\n   \n// I tried to reproduce and play with a FX from Kevin McGloughlin clip for Max Cooper: \n// https://youtu.be/VGfayDKveAs \n\n#define TAU 6.283185\n\n#define BPM (120./60.)\n#define time(speed) fract(iTime*speed)\n#define AnimOutExpoLoop(speed) easeOutExpo(abs(-1.+2.*time(speed)))\n\n#define AAstep(thre, val) smoothstep(-.7,.7,(val-thre)/min(0.07,fwidth(val-thre)))\n\n#define xor(a,b) ((1.-b)*a+(1.-a)*b)\n\nfloat easeOutExpo (float x) \n{return x == 1. ? 1. : 1. - pow(2., -10. * x);}\n\nfloat line (vec2 uv, vec2 a, vec2 b, float r)\n{\n    vec2 pa = uv - a, ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h ) - r*h;\n}\n\nfloat frame (vec2 uv)\n{\n    uv.y += 2.;\n    float pery = 1.85;\n    float idy = floor(uv.y/pery);\n    uv.y = mod(uv.y,pery)-pery*0.5;\n    \n    float perx = .5;\n    float id = floor(uv.x/perx);\n    float up = -1.+2.*AnimOutExpoLoop((id-6.)*0.02*(idy+2.));\n\n    float id2 = floor((uv.x-perx*.5)/perx);\n    float down = 1.-2.*AnimOutExpoLoop((id2-6.)*0.02*(idy+2.));\n\n    uv.x = mod(uv.x,perx)-perx*0.5;\n    float mask = AAstep(0.016,abs(abs(line(uv,vec2(0.,-.8),vec2(0.,up*0.8), 0.07))-0.04));\n   \n    uv.x = mod(uv.x,perx)-perx*0.5;\n    mask *= AAstep(0.008,line(uv,vec2(0.,.8),vec2(0.,down*0.8),0.1));\n\n    return mask;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n\t\n    float steps = 4.;\n    uv *= mix(1., 8., clamp(round(time(BPM/6.)*steps+.5)/steps,0.,1.));\n    \n    vec3 col = vec3(frame(uv));\n    col = xor(col,vec3(0.,0.5,0.4));\n    fragColor = vec4(sqrt(col),1.0);\n}","name":"Image","description":"","type":"image"}]}