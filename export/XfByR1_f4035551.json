{"ver":"0.1","info":{"id":"XfByR1","date":"1722219713","viewed":30,"name":"rotating white star","username":"ShaddyNormals","description":"wave under the white sun Inspired by \"Cosmic Jellyfish\" and \"Fractal Cartoon\"\n","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["rotating","whitestar"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// \"rotating white star\" - Inspired by \"Cosmic Jellyfish\" and \"Fractal Cartoon\"\n\n#define RAY_STEPS 100\n#define BRIGHTNESS 1.0\n#define GAMMA 1.5\n#define SATURATION .8\n\n#define detail .005\n#define t iTime*.5\n\nconst vec3 origin = vec3(0., 1., -4.);\nfloat det = 0.0;\n\n// 2D rotation function\nmat2 rot(float a) {\n    return mat2(cos(a), sin(a), -sin(a), cos(a));    \n}\n\n\nfloat city(vec3 p) {\n    p.xz = abs(p.xz+0.5) - abs(p.xz-0.5) - p.xz;\n    p.xy *= rot(radians(45.));\n    return max(abs(p.y-0.1), length(p.xz) - 0.2);\n}\n\n\nfloat de(vec3 pos) {\n    pos.y += sin(pos.z-t*3.)*0.1; // Wavy motion\n    float d = city(pos);\n    pos.z = abs(0.25-mod(pos.z,0.5));\n    d = min(d, max(abs(pos.z)-.2, pos.y-0.15));\n    return d;\n}\n\n// Camera path\nvec3 path(float ti) {\n    ti *= 1.5;\n    vec3 p = vec3(sin(ti), (1.-sin(ti*2.))*.5, -ti*2.)*0.5;\n    return p;\n}\n\nfloat edge = 0.;\nvec3 normal(vec3 p) { \n    vec3 e = vec3(0.0, det*5., 0.0);\n\n    float d1=de(p-e.yxx), d2=de(p+e.yxx);\n    float d3=de(p-e.xyx), d4=de(p+e.xyx);\n    float d5=de(p-e.xxy), d6=de(p+e.xxy);\n    float d=de(p);\n    edge = abs(d-0.5*(d2+d1))+abs(d-0.5*(d4+d3))+abs(d-0.5*(d6+d5));\n    edge = min(1., pow(edge, .55)*15.);\n    return normalize(vec3(d1-d2, d3-d4, d5-d6));\n}\n\nvec3 raymarch(in vec3 from, in vec3 dir) {\n    edge = 0.;\n    vec3 p, norm;\n    float d = 100.;\n    float totdist = 0.;\n    for (int i=0; i<RAY_STEPS; i++) {\n        if (d>det && totdist<25.0) {\n            p = from + totdist * dir;\n            d = de(p);\n            det = detail*exp(.13*totdist);\n            totdist += d;\n        }\n    }\n    vec3 col = vec3(0.);\n    p -= (det-d)*dir;\n    norm = normal(p);\n    col = vec3(0.0, 0.5, 0.7) * (1. - abs(norm)) * max(0., 1. - edge * .8); // Underwater blue tone\n    \n    totdist = clamp(totdist, 0., 26.);\n    dir.y -= .02;\n    float an = atan(dir.x,dir.y)+iTime*1.5;\n    float s = pow(clamp(1.0-length(dir.xy)*5.-abs(.2-mod(an,.4)),0.,1.),.1);\n    \n    // Custom color palette \n    vec3 backg = vec3(0.0, 0.2, 0.5) + vec3(0.5)*s;\n    backg += vec3(0.0, 0.3, 0.6) * sin(an * 10. + iTime); // Darker tones\n    \n    col = mix(vec3(0.1, 0.6, 0.8), col, exp(-.004 * totdist * totdist));\n    if (totdist > 25.) col = backg;\n    col = pow(col, vec3(GAMMA)) * BRIGHTNESS;\n    col = mix(vec3(length(col)), col, SATURATION);\n    col *= vec3(1.0, 1.1, 1.2);\n    return col;\n}\n\nvec3 move(inout vec3 dir) {\n    vec3 go = path(t);\n    vec3 adv = path(t + .7);\n    float hd = de(adv);\n    vec3 advec = normalize(adv - go);\n    float an = adv.x - go.x;\n    an *= min(1., abs(adv.z - go.z)) * sign(adv.z - go.z) * .7;\n    dir.xy *= mat2(cos(an), sin(an), -sin(an), cos(an));\n    an = advec.y * 1.7;\n    dir.yz *= mat2(cos(an), sin(an), -sin(an), cos(an));\n    an = atan(advec.x, advec.z);\n    dir.xz *= mat2(cos(an), sin(an), -sin(an), cos(an));\n    return go;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy / iResolution.xy * 2. - 1.;\n    uv.y *= iResolution.y / iResolution.x;\n    vec2 mouse = (iMouse.xy / iResolution.xy - .5) * 3.;\n    if (iMouse.z < 1.) mouse = vec2(0., -0.05);\n    float fov = .9 - max(0., .7 - iTime * .3);\n    vec3 dir = normalize(vec3(uv * fov, 1.));\n    dir.yz *= rot(mouse.y);\n    dir.xz *= rot(mouse.x);\n    vec3 from = origin + move(dir);\n    vec3 color = raymarch(from, dir); \n    fragColor = vec4(color, 1.);\n}\n","name":"Image","description":"","type":"image"}]}