{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"// Raymarching steps\n#define STEP 0.05\n#define TMIN 1.0\n#define TMAX 4.5\n// Partial derivative step\n#define DSTEP 0.01\n\n// Colors\n#define DIFFUSE vec4(1,0,0,1)\n#define SPECULAR vec4(1,1,1,1)\n#define AMBIENT vec4(0.2,0.2,0.2,1)\n#define LIGHT vec4(0.9,0.8,0,1)\n#define SHINE 100.0\n\n// Fbm parameters\n#define OCTAVES 6\n#define GAIN 0.5\n#define LACUNARITY 2.0\n\nprecision highp float;\n\nstruct Ray {\n    vec3 origin;\n    vec3 direction;\n};\n\n// GLSL textureless classic 2D noise \"cnoise\",\n// with an RSL-style periodic variant \"pnoise\".\n// Author:  Stefan Gustavson (stefan.gustavson@liu.se)\n// Version: 2011-08-22\n//\n// Many thanks to Ian McEwan of Ashima Arts for the\n// ideas for permutation and gradient selection.\n//\n// Copyright (c) 2011 Stefan Gustavson. All rights reserved.\n// Distributed under the MIT license. See LICENSE file.\n// https://github.com/ashima/webgl-noise\n//\n// Copyright (C) 2011 by Ashima Arts (Simplex noise)\n// Copyright (C) 2011 by Stefan Gustavson (Classic noise)\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nvec4 mod289(vec4 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x)\n{\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec2 fade(vec2 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n\n// Classic Perlin noise\nfloat cnoise(vec2 P)\n{\n  vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);\n  vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);\n  Pi = mod289(Pi); // To avoid truncation effects in permutation\n  vec4 ix = Pi.xzxz;\n  vec4 iy = Pi.yyww;\n  vec4 fx = Pf.xzxz;\n  vec4 fy = Pf.yyww;\n\n  vec4 i = permute(permute(ix) + iy);\n\n  vec4 gx = fract(i * (1.0 / 41.0)) * 2.0 - 1.0 ;\n  vec4 gy = abs(gx) - 0.5 ;\n  vec4 tx = floor(gx + 0.5);\n  gx = gx - tx;\n\n  vec2 g00 = vec2(gx.x,gy.x);\n  vec2 g10 = vec2(gx.y,gy.y);\n  vec2 g01 = vec2(gx.z,gy.z);\n  vec2 g11 = vec2(gx.w,gy.w);\n\n  vec4 norm = taylorInvSqrt(vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11)));\n  g00 *= norm.x;  \n  g01 *= norm.y;  \n  g10 *= norm.z;  \n  g11 *= norm.w;  \n\n  float n00 = dot(g00, vec2(fx.x, fy.x));\n  float n10 = dot(g10, vec2(fx.y, fy.y));\n  float n01 = dot(g01, vec2(fx.z, fy.z));\n  float n11 = dot(g11, vec2(fx.w, fy.w));\n\n  vec2 fade_xy = fade(Pf.xy);\n  vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);\n  float n_xy = mix(n_x.x, n_x.y, fade_xy.y);\n  return 2.3 * n_xy;\n}\n\n// Fractal Brownian Motion\nfloat fbm(vec2 P)\n{\n  float total = 0.0;\n  float frequency = 1.0;\n  float amplitude = GAIN;\n\n  for (int i = 0; i < OCTAVES; i++)\n  {\n    float noise = cnoise( P * frequency );\n    total += (noise + 1.0) / 2.0 * amplitude;         \n    frequency *= LACUNARITY;\n    amplitude *= GAIN;\n  }\n\n  return total;\n}\n\nfloat map(vec2 P)\n{\n  return fbm(P + iTime/5.0);\n}\n/////////////////////////////////////////////////////////////////////\n\n// Ray marching\nfloat intersect(Ray r)\n{\n  float lastError = 0.0;\n\n  for (float t = TMIN; t < TMAX; t += STEP)\n  {\n    vec3 p = r.origin + t*r.direction;\n    float h = map(p.xy);\n    float error = p.z - h;\n    \n    if( error < 0.0 ) // Hit\n    {\n      float alpha = error/(lastError - error);\n      return t + alpha*STEP;\n    }\n    else\n    {\n      lastError = error;\n    }\n  }\n  return 0.0;\n}\n\nvec3 calcNorm(vec2 P)\n{\n  vec2 dx = vec2(DSTEP/2.0,0);\n  vec2 dy = vec2(0,DSTEP/2.0);\n  float partialx = (map(P + dx) - map(P - dx))/DSTEP;\n  float partialy = (map(P + dy) - map(P - dy))/DSTEP;\n  return normalize(vec3(-partialx, -partialy, 1));\n}\n\nvec4 shade(vec2 P, vec3 dir, vec3 light)\n{\n  vec3 l = normalize(light - vec3(P, map(P)));\n  vec3 n = calcNorm(P);\n  float nl = max(0.0, dot(n,l));\n\n  vec3 h = normalize(-dir + l);\n  float nh = max(0.0, pow(dot(n,h), SHINE));\n\n  return DIFFUSE*AMBIENT + LIGHT*(DIFFUSE*nl + SPECULAR*nh);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 pos = fragCoord.xy/iResolution.xy;\n  vec3 u = normalize(vec3(0, 1, -1));\n  vec3 v = vec3(1,0,0);\n  vec3 w = normalize(vec3(0,1,1));\n  vec3 camera = -2.0*u;\n  vec3 dir = u + 0.7*(pos.x*v + pos.y*w);\n  Ray r = Ray(camera, dir);\n  vec3 light = vec3((4.0*iMouse.xy/iResolution.xy) - vec2(1,1),1);\n  float t = intersect(r);\n\n  if(t == 0.0)\n  {\n    fragColor = vec4(0,0,0,1);\n  }\n  else\n  {\n    fragColor = shade((r.origin + r.direction*t).xy, r.direction, light);\n  }\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MsfXW7","date":"1402173031","viewed":166,"name":"Terrain Marcher","username":"faturan","description":"Terrain marcher made for a computer graphics course. Click and hold to move light source.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarcher"],"hasliked":0,"parentid":"","parentname":""}}