{"ver":"0.1","info":{"id":"3tcyD4","date":"1609030847","viewed":87,"name":"flatpack circles","username":"HaleyHalcyon","description":"a","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["spiral"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TAU (3.14159265358979 * 2.)\n\n// A single iteration of Bob Jenkins' One-At-A-Time hashing algorithm.\nuint hash( uint x ) {\n    x += ( x << 10u );\n    x ^= ( x >>  6u );\n    x += ( x <<  3u );\n    x ^= ( x >> 11u );\n    x += ( x << 15u );\n    return x;\n}\n\nmat2x3 randCol(uint x) {\n    uvec3 col0 = uvec3(\n         x        & 1u,\n        (x >> 1u) & 1u,\n        (x >> 2u) & 1u\n    );\n    uint y = x ^ ((x >> 3u) % 6u + 1u);\n    uvec3 col2 = uvec3(\n         y        & 1u,\n        (y >> 1u) & 1u,\n        (y >> 2u) & 1u\n    );\n    return mat2x3(col0, col2);\n}\n\nfloat logStripe(vec2 uv, float offset, float angleAdd) {\n    return fract(offset + 2. * log(abs(dot(\n        uv, vec2(cos(angleAdd), sin(angleAdd))\n    ))+0.03));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float rotLen = 10.;\n    float distLen = 0.4;\n    float loopLen = 60. * rotLen * distLen;\n    \n    float T = mod(iTime, loopLen);\n    // Normalized pixel coordinates (from 0 to 1)\n    float scale = length(iResolution);\n    vec2 uv = fragCoord / scale;\n\tuv -= (iResolution.xy / scale) / 2.;\n    uv *= 2.0;\n    \n    float distSq = uv.x*uv.x+uv.y*uv.y;\n    float angle = atan(uv.x, uv.y);\n    float angleAdd = fract(T / rotLen);\n    float distAdd = fract(T / distLen);\n    \n    float which = (step(fract(angleAdd * 2. + angle * 2. / TAU + distSq * 0.21), .5));\n    \n    float progress = mod(which * 4. + distSq * 3. + T, loopLen);\n    \n    uint colID = hash(uint(int(progress)));\n    mat2x3 colors = randCol(colID);\n    vec3 colA = mix(colors[0], colors[1],\n      logStripe(uv, distAdd, angleAdd * TAU)\n    );\n    vec3 colB = mix(colors[0], colors[1],\n      logStripe(uv, distAdd, angleAdd * TAU + TAU / 4.)\n    );\n    \n    vec3 col = mix(colA, colB, which) * 0.8 + fract(progress) * 0.2;\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}