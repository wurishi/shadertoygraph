{"ver":"0.1","info":{"id":"mlyBzy","date":"1702214533","viewed":29,"name":"capsulating light","username":"nayk","description":"tunnel, star, space, galaxy, universe, copypast","likes":0,"published":1,"flags":1,"usePreview":0,"tags":["tunnel","star","space","galaxy","universe","copypast"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* original https://www.shadertoy.com/view/lsyXDK https://www.shadertoy.com/view/lslyRn https://www.shadertoy.com/view/DlycWR https://www.shadertoy.com/view/4ljXDy*/\n#define iterations 17\n#define formuparam 0.53\n\n#define volsteps 20\n#define stepsize 0.1\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.000\n\n#define brightness 0.0015\n#define darkmatter 0.300\n#define distfading 0.730\n#define saturation 0.850\n#define R(p,a,r)mix(a*dot(p,a),p,cos(r))+sin(r)*cross(p,a)\n#define H(h)(cos((h)*6.3+vec3(0,23,21))*.5+.5)\nfloat T;\n\n#define pi 3.1415926\n\n// iq's hash function from https://www.shadertoy.com/view/MslGD8\nvec2 hash( vec2 p ) { p=vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))); return fract(sin(p)*18.5453); }\n\nfloat simplegridnoise(vec2 v)\n{\n    float s = 1. / 256.;\n    vec2 fl = floor(v), fr = fract(v);\n    float mindist = 1e9;\n    for(int y = -1; y <= 1; y++)\n        for(int x = -1; x <= 1; x++)\n        {\n            vec2 offset = vec2(x, y);\n            vec2 pos = .5 + .5 * cos(2. * pi * (T*.1 + hash(fl+offset)) + vec2(0,1.6));\n            mindist = min(mindist, length(pos+offset -fr));\n        }\n    \n    return mindist;\n}\n\nfloat blobnoise(vec2 v, float s)\n{\n    return pow(.5 + .5 * cos(pi * clamp(simplegridnoise(v)*2., 0., 1.)), s);\n}\n\nvec3 blobnoisenrm(vec2 v, float s)\n{\n    vec2 e = vec2(.01,0);\n    return normalize(\n           vec3(blobnoise(v + e.xy, s) - blobnoise(v -e.xy, s),\n                blobnoise(v + e.yx, s) - blobnoise(v -e.yx, s),\n                1.0));\n}\n\nfloat blobnoises(vec2 uv, float s)\n{\n    float h = 0.0;\n    const float n = 3.0;\n    for(float i = 0.0; i < n; i++)\n    {\n        vec2 p = vec2(0.0, 1.0 * iTime * (i + 1.0) / n) + 1.0 * uv;\n    \th += pow(0.5 + 0.5 * cos(pi * clamp(simplegridnoise(p * (i + 1.0)) * 2.0, 0.0, 1.0)), s);\n    }\n    \n    return h / n;\n}\n\nvec3 blobnoisenrms(vec2 uv, float s)\n{\n    float d = 0.01;\n    return normalize(\n           vec3(blobnoises(uv + vec2(  d, 0.0), s) - blobnoises(uv + vec2( -d, 0.0), s),\n                blobnoises(uv + vec2(0.0,   d), s) - blobnoises(uv + vec2(0.0,  -d), s),\n                d));\n}\n\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 ro, in vec3 rd )\n{\n//get coords and direction\nvec3 dir=rd;\nvec3 from=ro;\n\n//volumetric rendering\nfloat s=0.1,fade=1.;\nvec3 v=vec3(0.);\nfor (int r=0; r<volsteps; r++) {\nvec3 p=from+s*dir*.5;\np = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\nfloat pa,a=pa=0.;\nfor (int i=0; i<iterations; i++) {\np=abs(p)/dot(p,p)-formuparam; // the magic formula\na+=abs(length(p)-pa); // absolute sum of average change\npa=length(p);\n}\n//dark matter\na*=a*a; // add contrast\nif (r>6) fade*=1.2; // dark matter, don't render near\n//v+=vec3(dm,dm*.5,0.);\nv+=fade;\nv+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\nfade*=distfading; // distance fading\ns+=stepsize;\n}\nv=mix(vec3(length(v)),v,saturation); //color adjust\nfragColor = vec4(v*.01,1.);\n}\nfloat cheap_star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\n\nvec2 rotate(vec2 v, float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    return vec2(v.x * c - v.y * s, v.x * s + v.y * c);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n//get coords and direction\nvec2 uv=fragCoord.xy/iResolution.xy-.5;\nuv.y*=iResolution.y/iResolution.x;\nvec3 dir=vec3(uv*zoom,1.);\nfloat time=iTime*speed+.25;\n    vec4 O =fragColor;\n    vec2 C =fragCoord;\n     T = iTime;\n\n    vec2 r2 = vec2(1.0, iResolution.y / iResolution.x);\n\tvec2 uv2 = fragCoord.xy / iResolution.xy;\n    vec3 n = blobnoisenrms(25.0 * uv2 * r2, 1.);\n    fragColor = texture(iChannel0, uv + 0.05 * n.xy);\n O=vec4(0);\n    vec3 p,q,r=iResolution,\n    d=normalize(vec3((C*2.-r.xy)/r.y,1));  \n    for(float i=0.,a,s,e,g=0.;\n        ++i<110.;\n        O.xyz+=mix(vec3(3),H(g*2.1),sin(2.8))*1./e/8e3\n    )\n   \n    {\n        p=g*d;\n        p.z+=-iTime*3.5;\n        a=60.;\n  \n        p=mod(p-a,a*2.)-a;\n        s=5.;\n         p.xy*=rotate(p.xz,-iTime/15.-length(p.xz)*1.5); \n             \n        for(int i=0;i++<8;){\n            p=.23-abs(p);\n         \n            p.x<p.z?p=p.zyx:p;\n            p.z<p.y?p=p.xzy:p;\n     \n            s*=e=1.4+sin(-iTime*.234)*.1;\n            p=abs(p)*e-\n                vec3(\n                    5.+cos(iTime*.3+.5*sin(iTime*.3))*2.,\n                    100,\n                    8.+cos(iTime*.5)*5.\n                 )+n;\n         }\n         g+=e=length(p.yz)/s;\n         \n         \n    }\n     uv *= 2.0 * ( cos(iTime * 2.0) -2.5);\n     \n    // anim between 0.9 - 1.1\n    float anim = sin(iTime * 12.0) * 0.1 + 1.0;    \nvec3 from=vec3(1.,.5,0.5)+O.xyz;\nfrom+=vec3(time*2.,time,-2.);\n\nmainVR(fragColor, fragCoord, from, dir);\n    fragColor+=O;\n        fragColor*= vec4(cheap_star(uv,anim) * vec3(0.55,0.52,0.55)*0.3, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}