{"ver":"0.1","info":{"id":"7lcyzn","date":"1659102866","viewed":274,"name":"persistant city shader","username":"Carandiru","description":"slowly solving over a great amount of time. should be coherent for all viewers. so 20 years from now we all see the same thing even though its changed over time.\nmouse to pan","likes":3,"published":3,"flags":32,"usePreview":0,"tags":["time","city","hash","data","persistant"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://iquilezles.org/articles/distfunctions2d/\nfloat sdPie( in vec3 p, in vec3 c, in float r )\n{\n    p.x = abs(p.x);\n    float l = length(p) - r;\n    float m = length(p-c*clamp(dot(p,c),0.0,r)); // c=sin/cos of aperture\n    return max(l,m*sign(c.y*p.x-c.x*p.y));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 color = vec3(0);\n\n    vec4 state = textureLod(iChannel0, (uv + 2.0f * (iMouse.xy / iResolution.xy)), 0.0f);\n    \n    // distance\n    float d = sdPie(vec3(uv * 2.0f - 1.0f + state.xy, state.z),vec3(cos(iTime/20.0f),-sin(iTime/20.0f),sin(iTime/20.0f)), state.w);\n    \n    float hw = fwidth(d) * 0.5;\n    \n    color.rgb = vec3( smoothstep(-d, d, hw * 2.0f - 1.0f) ); \n    color.rgb = vec3(1.0f / (1.0f + d*d ));\n    \n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define golden_ratio 1.61803398874989484820f\n\n#define activity ((golden_ratio * 0.9f))  // higher = slower and more detailed but less change over time\n\n// Very fast hash function - https://www.shadertoy.com/view/ftsfDf\nfloat hash(ivec2 p) {\n    ivec2 q = p * ivec2(1317301, 1712759) + p.yx;\n    return float((((q.x ^ q.y) * 3536471) & 0xFFFF)) * 0.00001526;\n}","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float scl = 0.4f;\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 color = vec3(0);\n    \n    float coherent_time = (iDate.x) + (iDate.y) + (iDate.z) + iDate.w - 1.0f + iTime;\n    \n    float nw = hash(ivec2(coherent_time - fragCoord.x * scl, coherent_time - fragCoord.y * scl));\n    float ne = hash(ivec2(coherent_time - fragCoord.x * scl, coherent_time + fragCoord.y * scl));\n    float sw = hash(ivec2(coherent_time + fragCoord.x * scl, coherent_time - fragCoord.y * scl));\n    float se = hash(ivec2(coherent_time + fragCoord.x * scl, coherent_time + fragCoord.y * scl));\n    \n    float sum = nw + ne + sw + se;\n    float mini = min(nw, min(ne, min(sw, se)));\n    float maxi = max(nw, max(ne, max(sw, se)));\n    \n    color.xyz = vec3(normalize(maxi - mini)) * sum * 0.5f - 0.5f;\n\n    color.rgb = clamp(color.rgb, 0.0f, 1.0f);\n    \n    fragColor = vec4(color,1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec4 past = textureLod(iChannel1, uv, 0.0f);\n    \n    vec3 new_direction = textureLod(iChannel0, uv, 0.0f).xyz * 2.0f - 1.0f;\n    \n    vec3 p = past.xyz;\n    float last = past.w;\n    float now = iTime;\n    \n    p += new_direction * (now - last) / activity;\n    \n    fragColor = vec4(p,now);\n}","name":"Buffer B","description":"","type":"buffer"}]}