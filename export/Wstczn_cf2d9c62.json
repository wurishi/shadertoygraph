{"ver":"0.1","info":{"id":"Wstczn","date":"1600295693","viewed":97,"name":"Grid on SDF of Polygon","username":"gvameta","description":"Grid on SDF of Polygon","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["grid","sdf","polygon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2020 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// Signed distance and circle\n\n// List of some other 2D distances:\n//\n// Circle:               https://www.shadertoy.com/view/3ltSW2\n// Segment:              https://www.shadertoy.com/view/3tdSDj\n// Triangle:             https://www.shadertoy.com/view/XsXSz4\n// Isosceles Triangle:   https://www.shadertoy.com/view/MldcD7\n// Regular Triangle:     https://www.shadertoy.com/view/Xl2yDW\n// Regular Pentagon:     https://www.shadertoy.com/view/llVyWW\n// Regular Octogon:      https://www.shadertoy.com/view/llGfDG\n// Rounded Rectangle:    https://www.shadertoy.com/view/4llXD7\n// Rhombus:              https://www.shadertoy.com/view/XdXcRB\n// Trapezoid:            https://www.shadertoy.com/view/MlycD3\n// Polygon:              https://www.shadertoy.com/view/wdBXRW\n// Hexagram:             https://www.shadertoy.com/view/tt23RR\n// Regular Star:         https://www.shadertoy.com/view/3tSGDy\n// Star5:                https://www.shadertoy.com/view/wlcGzB\n// Ellipse 1:            https://www.shadertoy.com/view/4sS3zz\n// Ellipse 2:            https://www.shadertoy.com/view/4lsXDN\n// Quadratic Bezier:     https://www.shadertoy.com/view/MlKcDD\n// Uneven Capsule:       https://www.shadertoy.com/view/4lcBWn\n// Vesica:               https://www.shadertoy.com/view/XtVfRW\n// Cross:                https://www.shadertoy.com/view/XtGfzw\n// Pie:                  https://www.shadertoy.com/view/3l23RK\n// Arc:                  https://www.shadertoy.com/view/wl23RK\n// Horseshoe:            https://www.shadertoy.com/view/WlSGW1\n// Parabola:             https://www.shadertoy.com/view/ws3GD7\n// Parabola Segment:     https://www.shadertoy.com/view/3lSczz\n// Rounded X:            https://www.shadertoy.com/view/3dKSDc\n// Joint:                https://www.shadertoy.com/view/WldGWM\n// Simple Egg:           https://www.shadertoy.com/view/Wdjfz3\n//\n// and many more here:   https://iquilezles.org/articles/distfunctions2d\n\n\n   \nvec3 udSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 ba = b-a;\n    vec2 pa = p-a;\n    float h =clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    \n    return vec3(length(pa-h*ba),h, ba.x*pa.y-ba.y*pa.x);\n}\n\n// polynomial smooth min (k = 0.1);\nfloat smin( float a, float b, float k )\n{\n    float h = max( k-abs(a-b), 0.0 )/k;\n    return min( a, b ) - h*h*k*(1.0/4.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    p *= 1.4;\n    float time = 10.0;//iTime;\n    vec2 v1 = vec2(-0.5,-1.25);//sin( time/10.0 + vec2(0.0,2.00) + 0.0 );\n\tvec2 v2 = vec2(1.0,-1.0);//cos( time/10.0 + vec2(0.0,1.50) + 1.5 );\n    vec2 v3 = vec2(0.25+0.5*cos(time),0.25+0.5*sin(time));//0.5*v1-2.0*sin(time/20.0);\n    vec2 v4 = vec2(-1.0,1.0);//0.5*v2-1.0*cos(time);\n    \n    float th = 0.5+0.1*(0.5+0.5*sin(time*1.1));\n    float length1 = length(v2-v1);\n    \n\tvec3 dd1 = udSegment( p, v1, v2 );\n    vec3 dd2 = udSegment(p,v2,v3);\n    float length2 = length(v2-v3);\n    \n    vec3 dd3 = udSegment(p,v3,v4);\n    float length3 = length(v3-v4);\n    \n    vec3 dd4 = udSegment(p,v4,v1);\n    float length4 = length(v4-v1);\n    \n    float d = min(min(min(dd1.x,dd2.x),dd3.x),dd4.x);\n    float dd = 0.0;//min(dd1.y,dd2.y);\n    float len3 = dd1.x+dd2.x+dd3.x+dd4.x;\n    \n   /* dd = ((len3-dd3.x)/len3)*dd3.y+\n        //*length3/(length1+length2+length3)+\n        ((len3-dd1.x)/len3)*dd1.y+\n        //*length1/(length1+length2+length3)+\n        ((len3-dd2.x)/len3)*dd2.y;//*length2/(length1+length2+length3);\n   \n    dd = ((len3-dd3.x)/len3)*(0.5-abs(dd3.y-0.5))+ //(dd1.y+dd2.y+dd3.y)+\n        //*length3/(length1+length2+length3)+\n        ((len3-dd1.x)/len3)*(0.5-abs(dd1.y-0.5))+ //(dd1.y+dd2.y+dd3.y)+\n        //*length1/(length1+length2+length3)+\n        ((len3-dd2.x)/len3)*(0.5-abs(dd2.y-0.5));//(dd1.y+dd2.y+dd3.y);//*length2/(length1+length2+length3);\n      *'/ \n    dd = (1.0-(dd3.x)/len3)*(1.0-(dd3.x)/len3)*((dd3.y))+ //(dd1.y+dd2.y+dd3.y)+\n        //*length3/(length1+length2+length3)+\n        (1.0-(dd1.x)/len3)*(1.0-(dd1.x)/len3)*((dd1.y))+ //(dd1.y+dd2.y+dd3.y)+\n        //*length1/(length1+length2+length3)+\n        (1.0-(dd2.x)/len3)*(1.0-(dd2.x)/len3)*((dd2.y));//*length2/(length1+length2+length3);\n    dd = 10.0*dd;\n  \n    */\n    if(dd1.x<=dd2.x)\n        if(dd3.x<=dd1.x)\n            if(dd4.x<=dd3.x)\n                dd = dd4.y*length4/(length1+length2+length3+length4);\n            else\n            \tdd = dd3.y*length3/(length1+length2+length3+length4);//+((dd1.x+dd2.x+dd3.x)/dd1.x)*dd1.y*length1/(length1+length2+length3);\n        else if(dd4.x<=dd1.x)\n            dd = dd4.y*length4/(length1+length2+length3+length4);\n        else\n            dd = dd1.y*length1/(length1+length2+length3+length4);//mix(dd1.y,dd2.y,(dd1.x)/len3);//dd1.y*length1/(length1+length2+length3);\n           /* \n            if(dd2.x<=dd3.x)\n\t            dd = dd1.y*length1/(length1+length2+length3);//mix(dd1.y,dd2.y,(dd1.x)/len3);//dd1.y*length1/(length1+length2+length3);\n            else\n                dd = dd1.y*length1/(length1+length2+length3);//mix(dd1.y,dd3.y,(dd1.x)/len3);//dd1.y*length1/(length1+length2+length3);\n*/\n    else\n        if(dd3.x<=dd2.x)\n            if(dd4.x<=dd3.x)\n                dd = dd4.y*length4/(length1+length2+length3+length4);\n            else\n            \tdd = dd3.y*length3/(length1+length2+length3+length4);//+((dd1.x+dd2.x+dd3.x)/dd1.x)*dd1.y*length1/(length1+length2+length3);\n//            dd = dd3.y*length3/(length1+length2+length3);//mix(dd3.y,dd2.y,(dd3.x)/len3);//,dd3.y*length3/(length1+length2+length3);\n        else if(dd4.x<=dd2.x)\n            dd = dd4.y*length4/(length1+length2+length3+length4);\n//\t            dd = dd2.y*length2/(length1+length2+length3);//mix(dd2.y,dd3.y,(dd2.x)/len3);//*length2/(length1+length2+length3);\n        else\n            dd = dd2.y*length2/(length1+length2+length3+length4);//mix(dd2.y,dd1.y,(dd2.x)/len3);//*length2/(length1+length2+length3);\n    dd *= 30.0;\n   //*/\n    vec3 col = vec3(1.0) - sign(d)*vec3(0.1,0.4,0.7);\n\t//col *= 1.0 - exp(-3.0*abs(d));\n\t//col *= 0.8 + 0.2*cos(40.0*d);\n    //vec3 col1 = vec3(0.0);\n    //vec3 col2 = vec3(0.0);\n   // if((dd1.z>=0.0)&&(dd2.z>=0.0)&&(dd3.z>=0.0)&&(dd4.z>=0.0))\n    {\n       // if(mod(iTime,10.0)<5.0)\n        {\n            col *=0.8 + 0.8*sin(16.0*(dd));//other lines\n        //\tcol *= (0.8 + 0.8*cos(64.0*sin(iTime/20.0)*(d)));//sdf lines\n        }\n      //  else if(mod(iTime,10.0)>5.0)\n        {\n      //      col *=0.8 + 0.8*sin(64.0*cos(iTime/20.0)*(dd));//other lines\n        \tcol *= (0.8 + 0.8*cos(64.0*(d)));//sdf lines\n        }\n        //col = col*mix((0.8 + 0.8*sin(512.0*(dd))),(0.8 + 0.8*cos(64.0*(d))),1.0-smoothstep(0.0,1.0,d));\n            //smin((0.8 + 0.8*sin(512.0*(dd))),(0.8 + 0.8*cos(64.0*(d))),0.01);//1.0-smoothstep(0.0,0.15,0.5));\n    }\n//    col = min(col1,col2);//mix(col1,col2,smoothstep(0.0,0.1,abs(d)));\n    col = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.015,abs(d)) );\n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}