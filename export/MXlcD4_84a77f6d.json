{"ver":"0.1","info":{"id":"MXlcD4","date":"1726781191","viewed":18,"name":" Neon Pulse Tunnel","username":"madrune","description":"creates an audio-reactive tunnel that pulses and shifts between square and circular shapes, with a vibrant neon glow. The tunnel responds to sound, providing an immersive visual experience, enhanced by infinite zoom and soft blur effects.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["audioreactive","sdfshapes","neonglow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGzn","filepath":"/media/a/29de534ed5e4a6a224d2dfffab240f2e19a9d95f5e39de8898e850efdb2a99de.mp3","previewfilepath":"/media/ap/29de534ed5e4a6a224d2dfffab240f2e19a9d95f5e39de8898e850efdb2a99de.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// \"Neon Pulse Tunnel\"\n// Author: Master Of CP (assisted by Guardian Of Debug)\n// Date: September 2024\n// Special thanks to: Inigo Quilez (SDF Techniques) and Matteo Basei (Audio-Reactive Inspiration)\n\n// This shader creates a dynamic, audio-reactive tunnel effect with neon glow, infinite zoom, and pulsing shapes.\n// The tunnel alternates between square and circular geometries based on the intensity of the audio input.\n// A vibrant neon palette, real-time pulse effect, and soft blur come together to enhance the visual experience.\n// The infinite zoom effect provides continuous motion, while gamma correction and saturation adjustment\n// are used to fine-tune the appearance. \n//\n// Techniques used:\n//  - Signed Distance Functions (SDF): Used for creating smooth shapes (square and circle tunnels).\n//  - Audio-Reactivity: Audio amplitude is sampled and applied to the pulse and tunnel shapes.\n//  - Pulse Effect: Shapes pulse dynamically based on real-time audio input.\n//  - Neon Glow: A glow effect is applied to create the impression of a neon light.\n//  - Infinite Zoom: Continuous zoom to simulate infinite tunnel motion.\n//  - Blur: A simple box blur effect is applied to soften transitions.\n//  - Gamma, Brightness, and Saturation Adjustments: Fine-tuning for color appearance and vibrancy.\n\n\n// Tunnel shape functions using SDF\nfloat squareSDF(vec2 p, vec2 size) {\n    vec2 d = abs(p) - size;\n    return length(max(d, 0.0)) + min(max(d.x, d.y), 0.0);\n}\n\nfloat circleSDF(vec2 p, float radius) {\n    return length(p) - radius;\n}\n\n// Neon color palette with adjusted range to avoid white\nvec3 neonPalette(float t) {\n    return 0.4 + 0.4 * sin(vec3(0.1, 0.6, 0.9) + t * 6.2831);\n}\n\n// Infinite zoom function using modulo to loop back\nfloat infiniteZoom(float z, float zoomFactor) {\n    return mod(z * zoomFactor, 1.0);\n}\n\n// Modified pulse effect to include audioAmplitude\nfloat pulseEffect(float d, float iTime, float amplitude) {\n    return (sin(iTime * 5.0 + d * 10.0) * 0.5 + 0.5) * amplitude;\n}\n\n// Sample audio data from iChannel0\nfloat getAudioAmplitude() {\n    // Sample from the center of the texture to get the amplitude\n    vec2 uv = vec2(0.5, 0.5);\n    return texture(iChannel0, uv).r; // Assuming red channel holds the amplitude\n}\n\n// Function to adjust gamma\nvec3 adjustGamma(vec3 color, float gamma) {\n    return pow(color, vec3(1.0 / gamma));\n}\n\n// Function to adjust brightness\nvec3 adjustBrightness(vec3 color, float brightness) {\n    return color * brightness;\n}\n\n// Function to adjust saturation\nvec3 adjustSaturation(vec3 color, float saturation) {\n    float gray = dot(color, vec3(0.299, 0.587, 0.114)); // Luminosity method for grayscale\n    return mix(vec3(gray), color, saturation);\n}\n\n// Function to apply a simple box blur effect\nvec3 applyBlur(vec2 uv) {\n    vec3 blur = vec3(0.0);\n    float blurAmount = 1.0 / iResolution.x; // Adjust blur amount based on resolution\n\n    // Basic box blur\n    for (int x = -1; x <= 1; x++) {\n        for (int y = -1; y <= 1; y++) {\n            vec2 offset = vec2(x, y) * blurAmount;\n            blur += texture(iChannel0, uv + offset).rgb;\n        }\n    }\n    return blur / 9.0; // Average the sampled colors\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy / iResolution.xy * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y; // Aspect ratio correction\n\n    // Set up tunnel properties with infinite zoom\n    float zoomFactor = 1.5;  // Controls zoom speed\n    float scaledTime = infiniteZoom(iTime, zoomFactor);  // Infinite zoom effect\n    //uv *= scaledTime;  // Apply zoom to UV coordinates\n\n    // Get audio amplitude\n    float audioAmplitude = getAudioAmplitude();\n    \n    // Set the tunnel size\n    float tunnelSize = 0.2 + audioAmplitude; // Adjusted for better visibility\n    float dist;\n    \n    // Choose the shape based on audio amplitude\n    if (audioAmplitude < 0.4) {\n        dist = squareSDF(uv, vec2(tunnelSize));\n    } else {\n        dist = circleSDF(uv, tunnelSize);\n    }\n\n    // Calculate the pulsing effect with audio\n    float pulse = pulseEffect(dist, iTime, audioAmplitude);\n    \n    // Get the neon color palette\n    vec3 color = neonPalette(iTime + dist);\n\n    // Apply the pulsing effect\n    color *= pulse;\n\n    // Neon glow effect\n    float glow = smoothstep(0.05, 0.1, abs(dist));\n\n    // Final color mixing\n    vec3 finalColor = mix(vec3(0.0), color, glow);\n\n    // Adjust gamma, brightness, and saturation\n    float gamma = 1.5;        // Moderate gamma correction\n    float brightness = 2.5;   // Reduced brightness\n    float saturation = 2.9;   // Less intense saturation\n\n    finalColor = adjustGamma(finalColor, gamma);\n    finalColor = adjustBrightness(finalColor, brightness);\n    finalColor = adjustSaturation(finalColor, saturation);\n\n    // Apply blur effect\n    vec3 blurredColor = applyBlur(uv);  // Declare and assign blurredColor\n\n    // Optional: mix the blurred color with the final color\n    finalColor = mix(finalColor, blurredColor, 0.02); // Adjust blend factor for blur intensity\n\n    fragColor = vec4(finalColor, 1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}