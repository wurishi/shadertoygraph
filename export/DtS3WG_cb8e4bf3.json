{"ver":"0.1","info":{"id":"DtS3WG","date":"1673828291","viewed":76,"name":"ray marching test shader","username":"DeltaT","description":"learning 3d stuffs","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_DIST 100.\n#define MAX_STEPS 100\n#define HIT_DIST .01\n\nfloat GetDist(vec3 p) {\n    vec4 sphere = vec4(1, 1, 1, sin(iTime)/5.+.6); // xyz = pos, w = sphere radius\n    p.y += cos(iTime);\n    p.z += iTime*2.;\n    float sdfSphere = length(mod(p,2.)-sphere.xyz) - sphere.w;\n    //float sdfPlane = -p.z+iTime+40.;\n    \n    //return min(sdfSphere, sdfPlane);\n    return sdfSphere;\n}\n    \n\nfloat RayMarch(vec3 ro, vec3 rd) {\n    float dO = 0.; // dist from ray origin\n    for(int i=0; i<MAX_STEPS; ++i) {\n        vec3 p = ro + rd*dO; // current point, ray vector * dist from origin = ray vector with magnitude of dist from origin = new location\n        float dS = GetDist(p); // dist from scene\n        dO += dS;\n        if(dS<HIT_DIST || dO>MAX_DIST) break;\n    }\n    //return dO/((cos(iTime)+1.2)*10.);\n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    float d = GetDist(p);\n    vec2 e = vec2(.01, 0);\n    \n    vec3 n = d-vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nfloat GetLight(vec3 p) {\n    vec3 lightPos = vec3(0, 0, (cos(iTime/2.)/2.+1.)*15.+2.);\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l), 0., 1.);\n    p += n*.02; // nudge the point away a bit so the ray march doesn't instantly terminate\n    float d = RayMarch(p, l);\n    \n    if(d<length(lightPos-p)) dif *= .1;\n    \n    return dif;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    \n    vec3 ro = vec3(0, 0, 0);\n    vec3 rd = normalize(vec3(uv.xy, 1.0));\n    \n    float d = RayMarch(ro, rd);\n    vec3 p = ro + rd*d;\n    \n    float dif = GetLight(p);\n    \n    vec3 col = vec3(dif);\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}