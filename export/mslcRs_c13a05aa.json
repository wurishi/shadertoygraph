{"ver":"0.1","info":{"id":"mslcRs","date":"1687122005","viewed":50,"name":"CIE94 Palette qauntization","username":"krisp","description":"palette quantization with CIE94 color difference\n1: Input\n2: RGB (euclidean distance)\n3: CIE94","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["palette","quantization","lab","colorspace","cie94","colordifference"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define dot2(a) dot(a,a)\n#define scale 10.\n\n// Conversions from https://www.shadertoy.com/view/wt23Rt\nvec3 rgb2xyz(vec3 c)\n{\n\tvec3 tmp=vec3(\n\t\t(c.r>.04045)?pow((c.r+.055)/1.055,2.4):c.r/12.92,\n\t\t(c.g>.04045)?pow((c.g+.055)/1.055,2.4):c.g/12.92,\n\t\t(c.b>.04045)?pow((c.b+.055)/1.055,2.4):c.b/12.92\n\t);\n\tmat3 mat=mat3(\n\t\t.4124,.3576,.1805,\n\t\t.2126,.7152,.0722,\n\t\t.0193,.1192,.9505\n\t);\n\treturn 100.*(tmp*mat);\n}\n\nvec3 xyz2lab(vec3 c)\n{\n\tvec3 n=c/vec3(95.047,100.,108.883),\n\t     v=vec3(\n\t\t(n.x>.008856)?pow(n.x,1./3.):(7.787*n.x)+(16./116.),\n\t\t(n.y>.008856)?pow(n.y,1./3.):(7.787*n.y)+(16./116.),\n\t\t(n.z>.008856)?pow(n.z,1./3.):(7.787*n.z)+(16./116.)\n\t);\n\treturn vec3((116.*v.y)-16.,500.*(v.x-v.y),200.*(v.y-v.z));\n}\n\n// Perceptual color difference\nfloat CIE94( vec3 a, vec3 b ) \n{\n\tfloat aC = sqrt(a.y*a.y+a.z*a.z);\n\tfloat bC = sqrt(b.y*b.y+b.z*b.z);\n\n\tfloat L2 = (a.x-b.x)*(a.x-b.x);\n\tfloat C2 = (aC - bC)*(aC - bC);\n\tfloat H2 = (a.y-b.y)*(a.y-b.y) + (a.z-b.z)*(a.z-b.z) - C2;\n\n\treturn sqrt(\n\t\tL2 + \n\t\tC2 / ((1.+ 0.045*aC)*(1.+ 0.045*aC)) +\n\t\tH2 / ((1.+ 0.015*aC)*(1.+ 0.015*aC))\n\t);\n}\n\nfloat colorDiff( vec3 a, vec3 b )\n{\n    a = xyz2lab(rgb2xyz(a));\n    b = xyz2lab(rgb2xyz(b));\n    return CIE94(a,b);\n}\n\n// Palette from https://lospec.com/palette-list/mulfok32\n#define paletteSize 32\nvec3 palette[] = vec3[](\nvec3(0.357,0.651,0.459), // #5ba675\nvec3(0.420,0.788,0.424), // #6bc96c\nvec3(0.671,0.867,0.392), // #abdd64\nvec3(0.988,0.937,0.553), // #fcef8d\nvec3(1.000,0.722,0.475), // #ffb879\nvec3(0.918,0.384,0.384), // #ea6262\nvec3(0.800,0.259,0.369), // #cc425e\nvec3(0.639,0.157,0.345), // #a32858\nvec3(0.459,0.090,0.337), // #751756\nvec3(0.224,0.035,0.278), // #390947\nvec3(0.380,0.094,0.318), // #611851\nvec3(0.529,0.208,0.333), // #873555\nvec3(0.651,0.333,0.373), // #a6555f\nvec3(0.788,0.451,0.451), // #c97373\nvec3(0.949,0.682,0.600), // #f2ae99\nvec3(1.000,0.765,0.949), // #ffc3f2\nvec3(0.933,0.561,0.796), // #ee8fcb\nvec3(0.831,0.431,0.702), // #d46eb3\nvec3(0.529,0.243,0.518), // #873e84\nvec3(0.122,0.063,0.165), // #1f102a\nvec3(0.290,0.188,0.322), // #4a3052\nvec3(0.482,0.329,0.502), // #7b5480\nvec3(0.651,0.522,0.624), // #a6859f\nvec3(0.851,0.741,0.784), // #d9bdc8\nvec3(1.000,1.000,1.000), // #ffffff\nvec3(0.682,0.886,1.000), // #aee2ff\nvec3(0.553,0.718,1.000), // #8db7ff\nvec3(0.427,0.502,0.980), // #6d80fa\nvec3(0.518,0.396,0.925), // #8465ec\nvec3(0.514,0.302,0.769), // #834dc4\nvec3(0.490,0.176,0.627), // #7d2da0\nvec3(0.306,0.094,0.486)  // #4e187c \n);\n\n// Quantize with distances in RGB\nvec3 quantizeRGB( vec3 inCol )\n{\n    vec3 col = vec3(0);\n    float nearest = 100.0;\n    \n    for (int i = 0; i < paletteSize; i++)\n    {\n        vec3 paletteCol = palette[i];\n        float dist = dot2(paletteCol - inCol);\n        \n        if (dist < nearest) \n        {\n            col = paletteCol;\n            nearest = dist;\n        }\n    }\n    \n    return col;\n}\n\n// Quantize with CIE94 Color difference\nvec3 quantizeCIE94( vec3 inCol )\n{\n    vec3 col = vec3(0);\n    float nearest = 100.0;\n    \n    for (int i = 0; i < paletteSize; i++)\n    {\n        vec3 paletteCol = palette[i];\n        float dist = colorDiff(paletteCol, inCol);\n        \n        if (dist < nearest) \n        {\n            col = paletteCol;\n            nearest = dist;\n        }\n    }\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Square coordinates\n    vec2 uv = (fragCoord - vec2((iResolution.x - iResolution.y)/2.,0))/iResolution.y;\n    uv.y = 1. - uv.y;\n\n    // Tiling\n    vec3 col = vec3(fract(uv * scale),floor(uv.x * scale) / (scale*scale) + floor(uv.y * scale) / scale);\n\n    // Border\n    if (uv.x < 0. || uv.x >= 1.) \n    {\n        col = uv.x > -.35 ? vec3(0) : palette[int(uv.y*float(paletteSize))];\n    }\n    \n    // Quantization type\n\n    int type = (int(iTime) / 2) % 3;\n    if (type == 1)\n    {\n        col = quantizeRGB(col);\n    } \n    else if (type == 2) \n    {\n        col = quantizeCIE94(col);\n    }\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}