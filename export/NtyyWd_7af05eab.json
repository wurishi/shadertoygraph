{"ver":"0.1","info":{"id":"NtyyWd","date":"1674337999","viewed":117,"name":"Soulflame","username":"vodski","description":"flame","likes":8,"published":1,"flags":32,"usePreview":0,"tags":["flame"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float xPixels = 96.0;\nconst vec3 flameColour1 = vec3(0.0,0.6,0.3);\nconst vec3 flameColour2 = vec3(0.75,1.0,1.7);\nconst float colours = 4.0;\nconst float brightness = 2.0;\n\nvec2 pixelate(vec2 uv){\n  float ar = iResolution.y/iResolution.x;\n  float yPixels = xPixels * ar;\n  return vec2(floor(uv.x * xPixels) / xPixels, floor(uv.y * yPixels) / yPixels);\n}\n\nvec4 posterise(vec4 fragColor){\n    float stepped = floor(fragColor.x * colours) / colours;\n    \n  return mix(\n        mix(vec4(0.0), vec4(flameColour1, 1.0), stepped),\n        mix( vec4(flameColour1, 1.0), vec4(flameColour2,1.0), stepped),\n        stepped\n  );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  \n  vec2 uv = fragCoord/iResolution.xy;\n \n  //uv = uv.y > 0.5 ? uv : 1.0 - uv;\n \n  uv = pixelate(uv); \n\n  fragColor = texture(iChannel0, uv);\n  \n  // POSTERISE\n  fragColor = posterise(fragColor * brightness);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"struct Circle {\n    vec2 position;\n    float radius;\n};\n\nfloat circularIn(float t) {\n  return 1.0 - sqrt(1.0 - t * t);\n}\n\nfloat quadraticOut(float t) {\n  return -t * (t - 2.0);\n}\n\nfloat exponentialOut(float t) {\n  return t == 1.0 ? t : 1.0 - pow(2.0, -10.0 * t);\n}\n\nfloat quadraticInOut(float t) {\n  float p = 2.0 * t * t;\n  return t < 0.5 ? p : -p + (4.0 * t) - 1.0;\n}\n\n\nconst float speed = 1.0;\n\nconst float particleSize = 0.4;\nconst float xMovement = 0.75;\nconst float PI = 3.1423;\n\nvec4 renderCircle(in vec2 fragCoord, Circle circle, float opacity)\n{\n    float d = distance(fragCoord,circle.position);\n    float nd = 1.0 - (d /  circle.radius);\n    vec3 colour = vec3(quadraticOut(nd));\n    //return d < circle.radius ? vec4(1.0) : vec4(0.0);\n    return d < circle.radius ? vec4(colour, nd*opacity) : vec4(0.0); \n}\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nfloat skewedSine(float t){\n    return pow(sin(t + sin(t) * 0.5), 0.8);\n}\n\nvec4 renderParticle(in vec2 fragCoord, float delay)\n{\n    float delayedTime = iTime + delay;\n    float random = rand(vec2(delay));\n    //float randomSpeed = clamp(speed * random, 0.0,2.0);\n    float randomSpeed = speed;\n    \n    float y = mod(delayedTime * randomSpeed,1.0);\n    \n    float size = particleSize * skewedSine(1.0 * y * PI);\n    \n    float randomXMovement = xMovement * random;\n    float x = sin(delayedTime * 5.0 * random) * randomXMovement - xMovement * 0.5;\n    x *= size;\n    x += sin(iTime);\n    \n    return renderCircle(\n        fragCoord, \n        Circle(vec2(x,y), size),\n        0.25\n    );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    fragColor = vec4(0.0);\n    \n    fragCoord.x /= iResolution.x;\n    fragCoord.y /= iResolution.x;\n    float ar = iResolution.x / iResolution.y;\n   \n    // MOVE\n    fragCoord.x -= 0.5;\n    fragCoord.y -= 0.5 / ar;\n    fragCoord.y += 0.1;\n    \n     // SCALE\n    fragCoord *= 3.0;\n    \n    float secondsPerLoop = 1.0 / speed;\n    float staggerDuration = 0.05;\n    for(float i = staggerDuration; i <= secondsPerLoop; i+= staggerDuration){\n        vec4 particle = renderParticle(fragCoord, i);\n        fragColor = mix(fragColor, particle, particle.w);\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"vec4 sampleAvg(int size, int resdiv, vec2 uv) {\n    \n    vec4 sum = vec4(0.);\n    int iter = 0;\n    \n    for (int y = -size/2; y <= size/2; y += resdiv) {\n        for (int x = -size/2; x <= size/2; x += resdiv) {\n            sum += texture(iChannel0, uv + vec2(x, y)/iResolution.xy);\n            iter++; // figures out how many things get added\n        }\n    }\n    \n    return sum / vec4(iter);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = sampleAvg(1, 1, uv);\n}","name":"Buffer B","description":"","type":"buffer"}]}