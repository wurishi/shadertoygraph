{"ver":"0.1","info":{"id":"ddy3DD","date":"1679609819","viewed":133,"name":"ðŸŽ¶ Tequilla Rainbow","username":"wj","description":"The result of playing with avin's \"Rainbow soundviz\" (https://www.shadertoy.com/view/ttfGzH) trying to make it a bit more flashy.","likes":3,"published":1,"flags":64,"usePreview":0,"tags":["circles","musicvisualizer","audioreactive"],"hasliked":0,"parentid":"ttfGzH","parentname":"ðŸŽ¶ Rainbow soundviz ðŸŽ¶"},"renderpass":[{"inputs":[{"id":"Ms33zn","filepath":"https://soundcloud.com/lil_peep/spotlight-1","previewfilepath":"https://soundcloud.com/lil_peep/spotlight-1","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// \"Tequilla Rainbow\" by wj\n// based on avin's \"Rainbow soundviz\": https://www.shadertoy.com/view/ttfGzH\n// license: CC-BY-NC-SA\n\n\n#define PI 3.1415926 \n#define PI2 6.2831852 \n \n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\nconst vec4 hsv2rgb_K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 hsv2rgb(vec3 c) {\n  vec3 p = abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www);\n  return c.z * mix(hsv2rgb_K.xxx, clamp(p - hsv2rgb_K.xxx, 0.0, 1.0), c.y);\n}\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\n//  Macro version of above to enable compile-time constants\n#define HSV2RGB(c)  (c.z * mix(hsv2rgb_K.xxx, clamp(abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www) - hsv2rgb_K.xxx, 0.0, 1.0), c.y))\n\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n { \n    vec2 uv = (fragCoord - iResolution.xy * 0.5) / iResolution.y;\n    \n    float CIRCLES = 9.;\n    float cS = .93275;\n    \n    float sm = 1.0 / iResolution.y * 25.0;\n    float ps = 1.0 / iResolution.y * sqrt(iResolution.y) * 1.9; \n    \n    float d = length(uv);\n    \n    float a = atan(uv.y, uv.x);\n    a = a < 0.0 ? PI + (PI - abs(a)) : a;\n    \n    float lPos = a /PI2;\n    \n    float m = 0.0;\n    float partSize = 1.0 / CIRCLES * 1.05;\n    vec3 col;\n    \n    float t= iTime;\n  \n    for(float i = CIRCLES; i > 1.0; i -= 1.0) {\n        \n        float ilPos = fract(lPos + i*0.1 + t * 0.1);\n        float cPos = partSize * i + ilPos * partSize;\n        float invPos = partSize * (i + 1.0) - ilPos * partSize;\n        float nzF = (1.0 - ilPos);\n        float mP0 = texture(iChannel0, vec2(partSize * i, 0.0)).x * 0.8;\n        float mP = texture(iChannel0, vec2(cPos, 0.0)).x * 0.8;\n        float mPInv = texture(iChannel0, vec2(invPos, 0.0)).x * 0.8;\n        \n        mP = (mP + mPInv) * .5 ;\n        \n        float rDiff = i*(1.0 / CIRCLES * .8);\n        float r = mP * (1.0 / CIRCLES * 5.0) - rDiff;\n        \n        float subm = smoothstep(cS - ps + r, cS - ps + sm + r, d) * smoothstep(cS + r, cS - sm + r, d);\n        \n        if (subm > 0.0) {\n//            col += HSV2RGB(vec3(i / CIRCLES * 0.5 + t * 0.05 + mP0 * 0.184, 0.95, .0025))*400.;   // cycle hue\n            col += HSV2RGB(vec3(i / CIRCLES * 0.5 + 14.4*0.05 + mP0 * 0.184, 0.95, .0025))*400.; \n            m += subm;\n        }\n    }\n    \n    m = clamp(m, 0.0, 1.0);\n        \n    float r =  (sin(t * 0.5) * 0.5 + 0.5);\n    float b = (cos(t * 0.5) * 0.5 + 0.5);\n    vec3 backCol = vec3(r, 0.0, b) * length(uv * 0.75) * 0.5;\n       \n    col = mix(backCol, col, m);\n        \n    fragColor = vec4(col, 1.0);\n} \n","name":"Image","description":"","type":"image"}]}