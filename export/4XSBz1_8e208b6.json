{"ver":"0.1","info":{"id":"4XSBz1","date":"1729443875","viewed":21,"name":"Curious Dynamical System, Part 4","username":"vuenc","description":".","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["dynamicalsystem"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//vec4[9] palette = vec4[9](vec4(0.400, 0.020, 0.208, 1.0), vec4(0.549, 0.549, 0.549, 1.0), vec4(0.059, 0.059, 0.059, 1.0), vec4(0.031, 0.388, 0.827, 1.0), vec4(0.961, 0.824, 0.086, 1.0), vec4(0.957, 0.220, 0.035, 1.0), vec4(0.031, 0.698, 0.200, 1.0), vec4(0.600, 0.075, 0.749, 1.0), vec4(0.000, 0.000, 0.000, 1.0));\n//vec4[23] palette = vec4[23](vec4(0.000, 0.000, 0.000, 1.0), vec4(0.024, 0.706, 0.690, 1.0), vec4(0.031, 0.388, 0.827, 1.0), vec4(0.031, 0.698, 0.200, 1.0), vec4(0.059, 0.059, 0.059, 1.0), vec4(0.125, 0.188, 0.318, 1.0), vec4(0.267, 0.392, 0.631, 1.0), vec4(0.294, 0.541, 0.373, 1.0), vec4(0.400, 0.020, 0.208, 1.0), vec4(0.427, 0.208, 0.541, 1.0), vec4(0.549, 0.549, 0.549, 1.0), vec4(0.600, 0.075, 0.749, 1.0), vec4(0.702, 0.863, 0.878, 1.0), vec4(0.812, 0.220, 0.584, 1.0), vec4(0.886, 0.941, 0.953, 1.0), vec4(0.929, 0.212, 0.102, 1.0), vec4(0.949, 0.922, 0.541, 1.0), vec4(0.953, 0.596, 0.765, 1.0), vec4(0.957, 0.220, 0.035, 1.0), vec4(0.961, 0.824, 0.086, 1.0), vec4(0.988, 0.518, 0.020, 1.0), vec4(0.996, 0.816, 0.000, 1.0), vec4(1.000, 0.773, 0.780, 1.0));\n//vec4[23] palette = vec4[23](vec4(0.000, 0.000, 0.000, 1.0), vec4(0.059, 0.059, 0.059, 1.0), vec4(0.549, 0.549, 0.549, 1.0), vec4(0.929, 0.212, 0.102, 1.0), vec4(0.957, 0.220, 0.035, 1.0), vec4(0.988, 0.518, 0.020, 1.0), vec4(0.996, 0.816, 0.000, 1.0), vec4(0.961, 0.824, 0.086, 1.0), vec4(0.949, 0.922, 0.541, 1.0), vec4(0.031, 0.698, 0.200, 1.0), vec4(0.294, 0.541, 0.373, 1.0), vec4(0.024, 0.706, 0.690, 1.0), vec4(0.702, 0.863, 0.878, 1.0), vec4(0.886, 0.941, 0.953, 1.0), vec4(0.031, 0.388, 0.827, 1.0), vec4(0.267, 0.392, 0.631, 1.0), vec4(0.125, 0.188, 0.318, 1.0), vec4(0.427, 0.208, 0.541, 1.0), vec4(0.600, 0.075, 0.749, 1.0), vec4(0.812, 0.220, 0.584, 1.0), vec4(0.400, 0.020, 0.208, 1.0), vec4(0.953, 0.596, 0.765, 1.0), vec4(1.000, 0.773, 0.780, 1.0));\n//vec4[23] palette = vec4[23](vec4(0.000, 0.000, 0.000, 1.0), vec4(0.059, 0.059, 0.059, 1.0), vec4(0.125, 0.188, 0.318, 1.0), vec4(0.400, 0.020, 0.208, 1.0), vec4(0.294, 0.541, 0.373, 1.0), vec4(0.427, 0.208, 0.541, 1.0), vec4(0.549, 0.549, 0.549, 1.0), vec4(0.267, 0.392, 0.631, 1.0), vec4(0.031, 0.698, 0.200, 1.0), vec4(0.024, 0.706, 0.690, 1.0), vec4(0.600, 0.075, 0.749, 1.0), vec4(0.812, 0.220, 0.584, 1.0), vec4(0.031, 0.388, 0.827, 1.0), vec4(0.702, 0.863, 0.878, 1.0), vec4(0.929, 0.212, 0.102, 1.0), vec4(0.949, 0.922, 0.541, 1.0), vec4(0.886, 0.941, 0.953, 1.0), vec4(0.953, 0.596, 0.765, 1.0), vec4(0.957, 0.220, 0.035, 1.0), vec4(0.961, 0.824, 0.086, 1.0), vec4(0.988, 0.518, 0.020, 1.0), vec4(0.996, 0.816, 0.000, 1.0), vec4(1.000, 0.773, 0.780, 1.0));\n//vec4[23] palette = vec4[23](vec4(0.000, 0.000, 0.000, 1.0), vec4(0.059, 0.059, 0.059, 1.0), vec4(0.125, 0.188, 0.318, 1.0), vec4(0.400, 0.020, 0.208, 1.0), vec4(0.294, 0.541, 0.373, 1.0), vec4(0.427, 0.208, 0.541, 1.0), vec4(0.549, 0.549, 0.549, 1.0), vec4(0.267, 0.392, 0.631, 1.0), vec4(0.031, 0.698, 0.200, 1.0), vec4(0.024, 0.706, 0.690, 1.0), vec4(0.600, 0.075, 0.749, 1.0), vec4(0.812, 0.220, 0.584, 1.0), vec4(0.031, 0.388, 0.827, 1.0), vec4(0.702, 0.863, 0.878, 1.0), vec4(0.929, 0.212, 0.102, 1.0), vec4(0.949, 0.922, 0.541, 1.0), vec4(0.957, 0.220, 0.035, 1.0), vec4(0.886, 0.941, 0.953, 1.0), vec4(0.953, 0.596, 0.765, 1.0), vec4(0.961, 0.824, 0.086, 1.0), vec4(0.988, 0.518, 0.020, 1.0), vec4(0.996, 0.816, 0.000, 1.0), vec4(1.000, 0.773, 0.780, 1.0));\n//vec4[23] palette = vec4[23](vec4(0.000, 0.000, 0.000, 1.0), vec4(0.059, 0.059, 0.059, 1.0), vec4(0.125, 0.188, 0.318, 1.0), vec4(0.400, 0.020, 0.208, 1.0), vec4(0.549, 0.549, 0.549, 1.0), vec4(0.294, 0.541, 0.373, 1.0), vec4(0.427, 0.208, 0.541, 1.0), vec4(0.267, 0.392, 0.631, 1.0), vec4(0.031, 0.698, 0.200, 1.0), vec4(0.024, 0.706, 0.690, 1.0), vec4(0.600, 0.075, 0.749, 1.0), vec4(0.812, 0.220, 0.584, 1.0), vec4(0.031, 0.388, 0.827, 1.0), vec4(0.702, 0.863, 0.878, 1.0), vec4(0.929, 0.212, 0.102, 1.0), vec4(0.949, 0.922, 0.541, 1.0), vec4(0.957, 0.220, 0.035, 1.0), vec4(0.886, 0.941, 0.953, 1.0), vec4(0.961, 0.824, 0.086, 1.0), vec4(0.953, 0.596, 0.765, 1.0), vec4(0.988, 0.518, 0.020, 1.0), vec4(0.996, 0.816, 0.000, 1.0), vec4(1.000, 0.773, 0.780, 1.0));\n//vec4[23] palette = vec4[23](vec4(1.000, 0.773, 0.780, 1.0), vec4(0.988, 0.518, 0.020, 1.0), vec4(0.886, 0.941, 0.953, 1.0), vec4(0.957, 0.220, 0.035, 1.0), vec4(0.929, 0.212, 0.102, 1.0), vec4(0.024, 0.706, 0.690, 1.0), vec4(0.400, 0.020, 0.208, 1.0), vec4(0.000, 0.000, 0.000, 1.0), vec4(0.059, 0.059, 0.059, 1.0), vec4(0.125, 0.188, 0.318, 1.0), vec4(0.549, 0.549, 0.549, 1.0), vec4(0.294, 0.541, 0.373, 1.0), vec4(0.427, 0.208, 0.541, 1.0), vec4(0.267, 0.392, 0.631, 1.0), vec4(0.031, 0.698, 0.200, 1.0), vec4(0.600, 0.075, 0.749, 1.0), vec4(0.812, 0.220, 0.584, 1.0), vec4(0.031, 0.388, 0.827, 1.0), vec4(0.702, 0.863, 0.878, 1.0), vec4(0.949, 0.922, 0.541, 1.0), vec4(0.961, 0.824, 0.086, 1.0), vec4(0.953, 0.596, 0.765, 1.0), vec4(0.996, 0.816, 0.000, 1.0));\nvec4[28] palette_ = vec4[28](vec4(1.000, 0.773, 0.780, 1.0), vec4(0.988, 0.518, 0.020, 1.0), vec4(0.886, 0.941, 0.953, 1.0), vec4(0.957, 0.220, 0.035, 1.0), vec4(0.929, 0.212, 0.102, 1.0), vec4(0.024, 0.706, 0.690, 1.0), vec4(0.400, 0.020, 0.208, 1.0), vec4(0.000, 0.000, 0.000, 1.0), vec4(0.059, 0.059, 0.059, 1.0), vec4(0.125, 0.188, 0.318, 1.0), vec4(0.549, 0.549, 0.549, 1.0), vec4(0.294, 0.541, 0.373, 1.0), vec4(0.427, 0.208, 0.541, 1.0), vec4(0.267, 0.392, 0.631, 1.0), vec4(0.031, 0.698, 0.200, 1.0), vec4(0.600, 0.075, 0.749, 1.0), vec4(0.812, 0.220, 0.584, 1.0), vec4(0.031, 0.388, 0.827, 1.0), vec4(0.702, 0.863, 0.878, 1.0), vec4(0.949, 0.922, 0.541, 1.0), vec4(0.961, 0.824, 0.086, 1.0), vec4(0.953, 0.596, 0.765, 1.0), vec4(0.996, 0.816, 0.000, 1.0), vec4(0.000, 0.796, 1.000, 1.0), vec4(0.000, 0.847, 1.000, 1.0), vec4(0.000, 0.898, 1.000, 1.0), vec4(0.000, 0.949, 1.000, 1.0), vec4(0.000, 1.000, 1.000, 1.0));\n//vec4[28] palette = vec4[28](vec4(0.000, 0.000, 0.400, 1.0), vec4(0.102, 0.000, 0.460, 1.0), vec4(0.221, 0.000, 0.497, 1.0), vec4(0.353, 0.000, 0.529, 1.0), vec4(0.496, 0.000, 0.558, 1.0), vec4(0.584, 0.000, 0.519, 1.0), vec4(0.609, 0.000, 0.406, 1.0), vec4(0.633, 0.000, 0.281, 1.0), vec4(0.656, 0.000, 0.146, 1.0), vec4(0.678, 0.000, 0.000, 1.0), vec4(0.699, 0.000, 0.000, 1.0), vec4(0.720, 0.160, 0.000, 1.0), vec4(0.740, 0.329, 0.000, 1.0), vec4(0.760, 0.506, 0.000, 1.0), vec4(0.779, 0.692, 0.000, 1.0), vec4(0.709, 0.798, 0.000, 1.0), vec4(0.544, 0.816, 0.000, 1.0), vec4(0.371, 0.834, 0.000, 1.0), vec4(0.189, 0.852, 0.000, 1.0), vec4(0.000, 0.869, 0.000, 1.0), vec4(0.000, 0.886, 0.197, 1.0), vec4(0.000, 0.903, 0.401, 1.0), vec4(0.000, 0.920, 0.613, 1.0), vec4(0.000, 0.936, 0.832, 1.0), vec4(0.000, 0.847, 0.953, 1.0), vec4(0.000, 0.646, 0.969, 1.0), vec4(0.000, 0.437, 0.984, 1.0), vec4(0.000, 0.222, 1.000, 1.0));\n//vec4[28] palette = vec4[28](vec4(0.094, 0.098, 0.110, 1.0), vec4(0.800, 0.808, 0.855, 1.0), vec4(0.839, 0.635, 0.125, 1.0), vec4(0.306, 0.380, 0.400, 1.0), vec4(0.510, 0.173, 0.102, 1.0), vec4(0.627, 0.529, 0.365, 1.0), vec4(0.200, 0.369, 0.702, 1.0), vec4(0.635, 0.635, 0.667, 1.0), vec4(0.169, 0.106, 0.094, 1.0), vec4(0.722, 0.404, 0.188, 1.0), vec4(0.886, 0.867, 0.894, 1.0), vec4(0.867, 0.706, 0.188, 1.0), vec4(0.816, 0.580, 0.682, 1.0), vec4(0.804, 0.537, 0.365, 1.0), vec4(0.188, 0.235, 0.263, 1.0), vec4(0.569, 0.384, 0.345, 1.0), vec4(0.102, 0.224, 0.686, 1.0), vec4(0.612, 0.698, 0.757, 1.0), vec4(0.498, 0.592, 0.318, 1.0), vec4(0.749, 0.514, 0.133, 1.0), vec4(0.694, 0.125, 0.110, 1.0), vec4(0.431, 0.522, 0.710, 1.0), vec4(0.349, 0.165, 0.125, 1.0), vec4(0.816, 0.663, 0.612, 1.0), vec4(0.451, 0.502, 0.541, 1.0), vec4(0.396, 0.369, 0.255, 1.0), vec4(0.769, 0.647, 0.310, 1.0), vec4(0.196, 0.271, 0.376, 1.0));\n//vec4[28] palette = vec4[28](vec4(0.816, 0.459, 0.141, 1.0), vec4(0.953, 0.949, 0.941, 1.0), vec4(0.451, 0.631, 0.220, 1.0), vec4(0.329, 0.388, 0.522, 1.0), vec4(0.973, 0.000, 0.000, 1.0), vec4(0.922, 0.725, 0.298, 1.0), vec4(0.412, 0.718, 0.984, 1.0), vec4(0.016, 0.992, 0.008, 1.0), vec4(0.400, 0.349, 0.294, 1.0), vec4(0.192, 0.427, 0.063, 1.0), vec4(0.949, 0.604, 0.988, 1.0), vec4(0.522, 0.788, 0.859, 1.0), vec4(0.820, 0.161, 0.204, 1.0), vec4(0.965, 0.667, 0.082, 1.0), vec4(0.180, 0.580, 0.110, 1.0), vec4(0.949, 0.702, 0.620, 1.0), vec4(0.373, 0.192, 0.071, 1.0), vec4(0.698, 0.569, 0.839, 1.0), vec4(0.980, 0.439, 0.137, 1.0), vec4(0.741, 0.827, 0.788, 1.0), vec4(0.208, 0.937, 0.086, 1.0), vec4(0.251, 0.212, 0.200, 1.0), vec4(0.980, 0.804, 0.000, 1.0), vec4(0.286, 0.604, 0.812, 1.0), vec4(0.565, 0.004, 0.012, 1.0), vec4(0.502, 0.890, 0.286, 1.0), vec4(0.153, 0.318, 0.533, 1.0), vec4(0.635, 0.533, 0.016, 1.0));\n//vec4[28] palette = vec4[28](vec4(0.035, 0.157, 0.286, 1.0), vec4(0.875, 0.816, 0.733, 1.0), vec4(0.243, 0.357, 0.475, 1.0), vec4(0.565, 0.514, 0.455, 1.0), vec4(0.906, 0.863, 0.788, 1.0), vec4(0.922, 0.957, 0.969, 1.0), vec4(0.357, 0.471, 0.592, 1.0), vec4(0.361, 0.314, 0.271, 1.0), vec4(0.016, 0.133, 0.282, 1.0), vec4(0.722, 0.667, 0.592, 1.0), vec4(0.486, 0.361, 0.227, 1.0), vec4(0.616, 0.569, 0.506, 1.0), vec4(0.792, 0.827, 0.855, 1.0), vec4(0.110, 0.118, 0.412, 1.0), vec4(0.580, 0.624, 0.671, 1.0), vec4(0.125, 0.243, 0.369, 1.0), vec4(0.267, 0.200, 0.137, 1.0), vec4(0.957, 0.902, 0.831, 1.0), vec4(0.796, 0.690, 0.549, 1.0), vec4(0.475, 0.573, 0.678, 1.0), vec4(0.373, 0.498, 0.647, 1.0), vec4(0.471, 0.416, 0.353, 1.0), vec4(0.694, 0.737, 0.776, 1.0), vec4(0.133, 0.192, 0.392, 1.0), vec4(0.965, 0.933, 0.773, 1.0), vec4(0.216, 0.196, 0.180, 1.0), vec4(0.635, 0.729, 0.816, 1.0), vec4(0.620, 0.537, 0.439, 1.0));\n//vec4[31] palette = vec4[31](vec4(1.000, 0.984, 0.902, 1.0), vec4(0.020, 0.020, 0.020, 1.0), vec4(0.671, 0.804, 0.369, 1.0), vec4(0.161, 0.675, 0.624, 1.0), vec4(0.078, 0.592, 0.420, 1.0), vec4(0.702, 0.863, 0.878, 1.0), vec4(0.384, 0.714, 0.871, 1.0), vec4(0.169, 0.404, 0.686, 1.0), vec4(0.961, 0.537, 0.639, 1.0), vec4(0.937, 0.337, 0.184, 1.0), vec4(0.988, 0.518, 0.020, 1.0), vec4(0.976, 0.835, 0.192, 1.0), vec4(0.267, 0.392, 0.631, 1.0), vec4(0.384, 0.714, 0.871, 1.0), vec4(0.702, 0.863, 0.878, 1.0), vec4(0.980, 0.980, 0.980, 1.0), vec4(1.000, 0.773, 0.780, 1.0), vec4(0.933, 0.447, 0.420, 1.0), vec4(0.804, 0.078, 0.251, 1.0), vec4(0.980, 0.980, 0.980, 1.0), vec4(0.953, 0.596, 0.765, 1.0), vec4(0.957, 0.306, 0.141, 1.0), vec4(0.957, 0.843, 0.188, 1.0), vec4(0.137, 0.698, 0.278, 1.0), vec4(0.165, 0.463, 0.827, 1.0), vec4(0.039, 0.039, 0.039, 1.0), vec4(1.000, 1.000, 0.749, 1.0), vec4(0.949, 0.949, 0.094, 1.0), vec4(0.400, 0.020, 0.208, 1.0), vec4(0.949, 0.376, 0.890, 1.0), vec4(1.000, 0.749, 0.973, 1.0));\nvec4[36] palette = vec4[36](vec4(0.031, 0.388, 0.827, 1.0), vec4(0.961, 0.824, 0.086, 1.0), vec4(0.957, 0.220, 0.035, 1.0), vec4(0.031, 0.698, 0.200, 1.0), vec4(0.600, 0.075, 0.749, 1.0), vec4(1.000, 0.984, 0.902, 1.0), vec4(0.020, 0.020, 0.020, 1.0), vec4(0.671, 0.804, 0.369, 1.0), vec4(0.161, 0.675, 0.624, 1.0), vec4(0.078, 0.592, 0.420, 1.0), vec4(0.702, 0.863, 0.878, 1.0), vec4(0.384, 0.714, 0.871, 1.0), vec4(0.169, 0.404, 0.686, 1.0), vec4(0.961, 0.537, 0.639, 1.0), vec4(0.937, 0.337, 0.184, 1.0), vec4(0.988, 0.518, 0.020, 1.0), vec4(0.976, 0.835, 0.192, 1.0), vec4(0.267, 0.392, 0.631, 1.0), vec4(0.384, 0.714, 0.871, 1.0), vec4(0.702, 0.863, 0.878, 1.0), vec4(0.980, 0.980, 0.980, 1.0), vec4(1.000, 0.773, 0.780, 1.0), vec4(0.933, 0.447, 0.420, 1.0), vec4(0.804, 0.078, 0.251, 1.0), vec4(0.980, 0.980, 0.980, 1.0), vec4(0.953, 0.596, 0.765, 1.0), vec4(0.957, 0.306, 0.141, 1.0), vec4(0.957, 0.843, 0.188, 1.0), vec4(0.137, 0.698, 0.278, 1.0), vec4(0.165, 0.463, 0.827, 1.0), vec4(0.039, 0.039, 0.039, 1.0), vec4(1.000, 1.000, 0.749, 1.0), vec4(0.949, 0.949, 0.094, 1.0), vec4(0.400, 0.020, 0.208, 1.0), vec4(0.949, 0.376, 0.890, 1.0), vec4(1.000, 0.749, 0.973, 1.0));\n\n\nuint bitCount(float f, uint maximum) {\n    uint count = 0u;\n    uint u = uint(f);\n    for (uint i = 0u; i < maximum; i++) {\n        //count += uint(u >> i);\n        count += uint((u & (1u << i)) > 0u);\n    }\n    return count;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int a1 = 2, a2 = 16, a3 = 21, a4 = 22;\n    /*vec4[28] palette = vec4[28](palette_[a1], palette_[a2], palette_[a3], palette_[a4],\n        palette_[a1], palette_[a2], palette_[a3], palette_[a4],\n        palette_[a1], palette_[a2], palette_[a3], palette_[a4],\n        palette_[a1], palette_[a2], palette_[a3], palette_[a4],\n        palette_[a1], palette_[a2], palette_[a3], palette_[a4],\n        palette_[a1], palette_[a2], palette_[a3], palette_[a4],palette_[24], palette_[25], palette_[26], palette_[27]);\n    palette = palette_;*/\n\n    vec2 state = fetchDataFrom(iChannel0, fragCoord).xy;\n    \n    vec4 histogramState = fetchDataFrom(iChannel2, fragCoord);\n    float count = float(bitCount(histogramState.x, 24u) + bitCount(histogramState.y, 24u)\n                        + bitCount(histogramState.z, 24u) + bitCount(histogramState.w, 24u));\n    //float countX = float(bitCount(histogramState.x, uint(NUM_SQUARES.x)));\n    //float countY = float(bitCount(histogramState.y, uint(NUM_SQUARES.y)));\n    \n    //fragColor = mod(vec4(0.2 * countX, 0.3 * countY, 0.05 * (countX + countY), 1.0), 1.0);\n    count -= 1.;\n    // fragColor = mod(vec4(0.2 * count, 0.3 * count, 0.05 * count, 1.0), 1.0);\n    fragColor = palette[count < 24. ? int(count / 6.) : int(count)];\n    fragColor = palette[int(count)];\n    fragColor *= mod(count, 2.0) == 0. ? (.9 + 0.4 * (fragCoord.x/iResolution.x)) : (.9 + .4 * (1. - (fragCoord.x/iResolution.x)));\n    //fragColor = palette[int(mod(fragCoord.x/30., 28.))];\n    \n    //fragColor = fetchDataFrom(iChannel1, state);\n    //fragColor = fetchDataFrom(iChannel1, fragCoord);\n    //fragColor = vec4(state.x/iChannelResolution[0].x, state.y/iChannelResolution[0].y, 0.0, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define fetchDataFrom(buf, addr) texelFetch(buf, ivec2(addr), 0)\n\n// Pi, the ratio of a circle's circumference to its diameter.\nconst float PI = 3.14159265358979323846264338327950288;\nconst vec2 NUM_SQUARES = vec2(7, 4);\nconst int WAIT_FRAMES = 100;","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define fetchData(addr) texelFetch(iChannel0, ivec2(addr), 0)\n\nconst float LINE_LENGTH = 10.358;\nconst float MAX_RETRIES = 100.0;\nconst float SQUARE_SIZE = 1.;\n\nvoid mainImage( out vec4 updatedState, in vec2 fragCoord )\n{\n    float width = iChannelResolution[0].x;\n    float height = iChannelResolution[0].y;\n    if (iFrame < WAIT_FRAMES) {\n        //updatedState = vec4(fragCoord.x, fragCoord.y,\n        //    atan(iChannelResolution[0].y-fragCoord.x, iChannelResolution[0].x-fragCoord.y),\n            //0.0,\n        //    0.0);\n        // float x = mod(fragCoord.x + iResolution.x/2., iResolution.x);\n        // float y = mod(fragCoord.y + iResolution.y/2., iResolution.y);\n        float x = fragCoord.x;\n        float y = fragCoord.y;\n        // x = x - mod(x, SQUARE_SIZE) + SQUARE_SIZE/2. + mod(x, SQUARE_SIZE) * 1e-5;\n        // y = y - mod(y, SQUARE_SIZE) + SQUARE_SIZE/2. + mod(y, SQUARE_SIZE) * 1e-5;\n        //x = width * 0.5 + x * 1e-4;\n        //y = height * 0.5 + y * 1e-4;\n        //x = width*0.5 + x * 0.5;\n        //float angle = mod(floor(mod(y/100., 1.0)), 1.0)+mod(x, 10.)*0.001+0.*(x/width - 0.5);//*0.1*(x/width-y/height);\n        //angle = .1 + sin(x*.05)*.1 + PI*.25;\n        // angle = atan(iChannelResolution[0].y-fragCoord.x, iChannelResolution[0].x-fragCoord.y),\n        float angle = 3.4;\n        //x = x * 0.02;\n        //y = y * 0.02;\n        //x = width * 0.1 + x * 0.2;\n        updatedState = vec4(x, y, angle, 0.0);\n        return;\n    }\n    vec4 state = fetchData(fragCoord);\n\n    float retries = 0.0;\n    bool legal = false;\n    float x, y, angle;\n\n    while (!legal && retries < MAX_RETRIES) {\n        x = state.x;\n        y = state.y;\n        angle = state.z;\n        float lineLength = LINE_LENGTH;\n\n        float angleMagnitudeFactor = pow(x / width, 3.0);\n        float angleCcwProbability = y / height;\n        angleCcwProbability = 1./(1. + exp(-(100.*angleCcwProbability-50.)));\n        float pseudorandomNumber = mod(x + y, 1.0) - 0.5;\n        float angleMagnitude =\n            abs((pseudorandomNumber \n                    + float(abs(pseudorandomNumber) < 0.01)\n                    * sign(pseudorandomNumber) * 0.01\n                )\n                * 2.0\n                * (PI * max(0.01, angleMagnitudeFactor) * (retries * retries + 1.0))\n            ) * 8e-1;\n        float angleDirection = float(mod(x+y, 1.0) < angleCcwProbability) * 2.0 - 1.0;\n        \n        //angleMagnitude *= 0e-3;\n        //angleMagnitude = pow(angleMagnitude, 2.0) - 4.;\n        angleMagnitude *= 9e-8;\n        //angleMagnitude += PI/float(iFrame);\n        angleMagnitude += retries * (PI/2.);\n        angleDirection = 1.;\n        //lineLength *= (mod(x+y, 10.)+1.)/10.;\n        /*lineLength = lineLength * (1.0\n            + 5.0 * float(mod(x+y, 100.) > 80.)\n            + 2.0 * float(mod(x+0.6*y, 60.) > 30.)\n            + 1.0 * float(mod(0.6*x+y, 45.) > 20.)\n            + .5 * float(mod(x+y, 20.) > 10.)\n        ) * .5;*/\n        //lineLength *= cos(iTime * 0.1);\n        \n        angle += angleMagnitude * angleDirection;\n        x += cos(angle) * lineLength;\n        y += sin(angle) * lineLength;\n\n        legal = (0.0 <= x) && (x < width) && (0.0 <= y) && (y < height);\n        retries += 1.0;\n    }\n    if (legal) {\n        updatedState = vec4(x, y, angle, 1.0);\n    } else {\n        // updatedState = vec4(-1, -1, -1, -1);\n        updatedState = state;\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"XsXGR8","channel":0}],"code":"float psin ( float t ) {\n    return 0.5 * (1.0 + sin(t));\n}\n\nfloat pcos ( float t ) {\n    return 0.5 * (1.0 + cos(t));\n}\nfloat npsin ( float t ) {\n    return 0.5 * (1.0 - sin(t));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = mod(fragCoord/iResolution.xy + 0.0, 1.0);\n    uv = fragCoord/iResolution.xy;\n    uv.y = 1. - uv.y;\n    uv -= 0.5;\n    //uv = vec2(cos(iTime/5.)*uv.x + sin(iTime/5.)*uv.y, -sin(iTime/5.)*uv.x + cos(iTime/5.)*uv.y);\n    uv.x = cos(iTime/5.)*uv.x + sin(iTime/5.)*uv.y;\n    uv.y = -sin(iTime/5.)*uv.x + cos(iTime/5.)*uv.y;\n    uv += 0.5;\n\n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    //vec3 col = 0.5 + 0.5*cos(iTime+(10.0/sqrt(iTime+2.0))*uv.xyx+vec3(0,2,4));\n\n    // vec3 col = vec3(float(uv.x <= 0.5 || uv.y > 2./3.)-uv.x*0.4, float(uv.y > 2./3.)-uv.x*0.2, float(uv.x > 0.5 && uv.y < 2./3.)-uv.y*0.2);\n    vec3 col = vec3(float(uv.x <= 0.5 || uv.y > 2./3.), float(uv.y > 2./3.), float(uv.x > 0.5 && uv.y < 2./3.));\n    float t = (pow(iTime, 1.1)/15.)+uv.x*.2+uv.y*.2;\n    col = vec3(pcos(1.1*t)*col.x+psin(1.1*t)*col.y, pcos(0.8*t)*col.y+psin(0.8*t)*col.z, npsin(t)*col.x+pcos(t)*col.z);\n\n\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"void mainImage( out vec4 updatedVisitsState, in vec2 fragCoord )\n{\n    vec4 histogramState = fetchDataFrom(iChannel2, fragCoord);\n    if (iFrame < WAIT_FRAMES) {\n        histogramState = vec4(0, 0, 0, 0);\n    }\n    uint[4] state = uint[4](uint(histogramState.x), uint(histogramState.y), uint(histogramState.z), uint(histogramState.w));\n    \n    // uint stateX = uint(histogramState.x);\n    // uint stateY = uint(histogramState.y);\n    vec2 position = fetchDataFrom(iChannel0, fragCoord).xy;\n    \n    vec2 squareCoord = vec2(ivec2(position / (iResolution.xy / NUM_SQUARES)));\n    \n    uint index = uint(mod(squareCoord.x, NUM_SQUARES.x) + squareCoord.y * NUM_SQUARES.x);\n    \n    state[index / 24u] |= (1u << uint(mod(float(index), 24.)));\n    //stateX |= (1u << uint(squareCoord.x));\n    //stateY |= (1u << uint(squareCoord.y));\n    \n    if (mod(float(iFrame) + fragCoord.x, 100.0) < 1.\n        //|| mod(float(iFrame) + 0.*sin(fragCoord.y*0.01)*100., 100.0) < 1.\n        ) {\n        uint carry = 0u;\n        for (int i = 4; i >= 0; i--) {\n            uint nextCarry = state[i] & (1u << 1);\n            state[i] = (state[i] >> 1) | (carry << 24u);\n            carry = nextCarry;\n        }\n        //state[int(mod(float(iFrame), 400.)) / 100] = 1u;\n    }\n    updatedVisitsState = vec4(state[0], state[1], state[2], state[3]);\n}","name":"Buffer C","description":"","type":"buffer"}]}