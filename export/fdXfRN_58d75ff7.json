{"ver":"0.1","info":{"id":"fdXfRN","date":"1644530590","viewed":126,"name":"Subpixel Integer Scaling","username":"mgrant8164","description":"Attempts to utilize font anti-aliasing technology to make integer scaling look not only consistent, but good.\n\nCurrently, this is unfinished.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["subpixel","integer","scaling"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3Rn","filepath":"/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","previewfilepath":"/media/ap/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    fragColor = vec4(vec3(0.),1.);\n    //integereal screen texel coordinates\n    ivec2 cd = ivec2(fragCoord);\n    //uncomment to see the actual pixel colors in large scale\n    //cd = cd / 10;\n    \n    //2:3 upscaling\n    vec3 color;\n    int img_scale = 1;\n    ivec2 img_coords = ((cd / 3) * 2)/img_scale % ivec2(iChannelResolution[0].xy);\n\nswitch((cd.y % 3) * 3 + (cd.x % 3)) {\n        case 0: {\n            color = texelFetch(iChannel0, img_coords + ivec2(0,0)/img_scale, 0).rgb;\n            break;\n        }\n        case 1: {\n            color = vec3(1.0,0.5,0.0) * texelFetch(iChannel0, img_coords + ivec2(0,0)/img_scale, 0).rgb;\n            color+= vec3(0.0,0.5,1.0) * texelFetch(iChannel0, img_coords + ivec2(1,0)/img_scale, 0).rgb;\n            break;\n        }\n        case 2: {\n            color = texelFetch(iChannel0, img_coords + ivec2(1,0)/img_scale, 0).rgb;\n            break;\n        }\n        case 3: {\n            color = vec3(0.5,0.5,0.5) * texelFetch(iChannel0, img_coords + ivec2(0,0)/img_scale, 0).rgb;\n            color+= vec3(0.5,0.5,0.5) * texelFetch(iChannel0, img_coords + ivec2(0,1)/img_scale, 0).rgb;\n            break;\n        }\n        case 4: {\n            color = 0.5 * vec3(1.0,0.5,0.0) * texelFetch(iChannel0, img_coords + ivec2(0,0)/img_scale, 0).rgb;\n            color+= 0.5 * vec3(1.0,0.5,0.0) * texelFetch(iChannel0, img_coords + ivec2(0,1)/img_scale, 0).rgb;\n            color+= 0.5 * vec3(0.0,0.5,1.0) * texelFetch(iChannel0, img_coords + ivec2(1,0)/img_scale, 0).rgb;\n            color+= 0.5 * vec3(0.0,0.5,1.0) * texelFetch(iChannel0, img_coords + ivec2(1,1)/img_scale, 0).rgb;\n            break;\n        }\n        case 5: {\n            color = vec3(0.5,0.5,0.5) * texelFetch(iChannel0, img_coords + ivec2(1,0)/img_scale, 0).rgb;\n            color+= vec3(0.5,0.5,0.5) * texelFetch(iChannel0, img_coords + ivec2(1,1)/img_scale, 0).rgb;\n            break;\n        }\n        case 6: {\n            color = texelFetch(iChannel0, img_coords + ivec2(0,1)/img_scale, 0).rgb;\n            break;\n        }\n        case 7: {\n            color = vec3(1.0,0.5,0.0) * texelFetch(iChannel0, img_coords + ivec2(0,1)/img_scale, 0).rgb;\n            color+= vec3(0.0,0.5,1.0) * texelFetch(iChannel0, img_coords + ivec2(1,1)/img_scale, 0).rgb;\n            break;\n        }\n        case 8: {\n            color = texelFetch(iChannel0, img_coords + ivec2(1,1)/img_scale, 0).rgb;\n            break;\n        }\n    }\n    fragColor.rgb = color;\n\n    if(uv.y > 0.5) {\n        fragColor = texture(iChannel0, (fragCoord.xy * 2. / 3.) / iChannelResolution[0].xy / float(img_scale));\n    }\n}","name":"Image","description":"","type":"image"}]}