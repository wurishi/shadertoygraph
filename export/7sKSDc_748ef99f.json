{"ver":"0.1","info":{"id":"7sKSDc","date":"1635449862","viewed":150,"name":"Hyper Dimensional Meta Balls","username":"wainggan","description":"i was trying to implement AA lol","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["balls","meta"],"hasliked":0,"parentid":"sdyXDc","parentname":"Easy 2D Meta Balls"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"precision highp float;\n\n#define AA 1.0\n\nfloat hash( float n ){\n    return fract(sin(n)*43758.5453);\n}\nfloat smin(float a, float b, float k) {\n  float h = clamp(0.5 + 0.5*(a-b)/k, 0.0, 1.0);\n  return mix(a, b, h) - k*h*(1.0-h);\n}\n\n\nvec3 getPixel(vec2 p, float time) {\n    \n    float colOut = 1.0;\n    \n    for (float i = 0.0; i < 32.0; i += 1.0) {\n    \n        //float rnd = i * 3.141 * 2.0 + 0.412;\n        \n        //vec2 pos = vec2(sin(iTime / 2.0 * 0.9212 + rnd * 0.6512), cos(iTime / 2.0 * 1.0442 + rnd * 0.1264)) / 3.0;\n        float rnd = i*(3.141 * 2.0 + .4123);\n\t\tvec2 pos = vec2(sin(time*0.95 + rnd*3.131), cos(time*1.05 + rnd*5.763));\n\t\tpos *= vec2(sin(time*1.05 + i*i*3.141/7.131), cos(time*.95 + i*(i-1.0)*3.141/4.235));\n        \n        \n        float dist = distance(p, pos);\n        colOut = smin(colOut, dist, 0.47);\n    }\n    \n    vec3 col = vec3(colOut);\n    \n    if (colOut <= 0.14) {\n        \n        if (colOut <= 0.09) {\n            col = vec3(0.44, 0.1, 0.36);\n        } else {\n            col = vec3(0.93, 0.5, 0.8);\n        }\n        \n    } else {\n        float c = (1.0-colOut) * 0.9;\n        col = vec3(c * 0.5, c / 2.0, c * 0.8);\n    }\n    \n    return clamp(col, 0.0, 1.0);\n}\nvec3 render(vec2 p) {\n    vec3 average = vec3(0.0);\n    \n    for (float i = 0.0; i <= 3.0; i += 1.) { \n        float scale = 1.7 - i * 0.2;\n        float x = 0.9;\n        float y = 0.6;\n    \n        average += getPixel( vec2(p*scale +  vec2(x * scale, y * scale)  ), iTime / 50.0 + i * i * 2.5221);\n    }\n    vec3 col = average / 1.6;\n    \n    return clamp(col, 0.0, 1.0);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 mousePos = (iMouse.xy - iResolution.xy*.5) / iResolution.y;\n    \n    //const float AA = 1.0;\n    \n    vec3 average = vec3(0.0);\n    for (float y = 0.0; y < 1.0; y += 1.0 / AA) {\n        for (float x = 0.0; x < 1.0; x += 1.0 / AA) {\n            vec2 p = (fragCoord + vec2(x, y) - iResolution.xy*.5) / iResolution.y;\n            \n            average += render(p);\n        }\n    }\n    vec3 col = average / (AA * AA);\n    \n\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}