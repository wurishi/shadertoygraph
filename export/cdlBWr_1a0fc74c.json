{"ver":"0.1","info":{"id":"cdlBWr","date":"1688633457","viewed":148,"name":"(Broken) XOR SDF demo","username":"AShaderBeginner","description":"Searched up \"xor sdf\" in Shadertoy and found nothing...\n...guess it's time to make one myself!\n\nNOTE: It can be broken. Whoops!","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// #define BREAKME\n\n// https://iquilezles.org/articles/distfunctions2d/\nfloat sdBox(vec2 pos, vec2 bound){\n    vec2 d = abs(pos) - bound;\n    return length(max(d, 0.0)) + min(max(d.x, d.y), 0.0);\n}\n\n// xor\n// Note that this can break.\n\n// We take the positive distance function (abs sd1 and sd2)\n// and invert it whenever sd1 xor sd2 is negative.\n// Negative times negative is positive.\n// So:\n\nfloat sdXor(float sd1, float sd2){\n    return sign(sd1 * sd2) * min(abs(sd1), abs(sd2));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // normalize\n    vec2 uv = fragCoord/iResolution.xy * 2. - 1.;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    // cool transition\n    float a = .1 + .3 * smoothstep(5., 2., iTime);\n#ifdef BREAKME\n    vec2 v = vec2(1., 0.) * a;\n#else\n    vec2 v = vec2(1., 1.) * a;\n#endif\n    \n    // sdf\n    vec2 dims = vec2(0.3);\n    float sd = sdXor(\n                sdBox(uv - v, dims),\n                sdBox(uv + v, dims)\n               );\n    // float sd = sdBox(uv, vec2(0.5));\n    \n    // coloring\n    // Inspired by https://www.shadertoy.com/playlist/MXdSRf\n    float sdm = mod(sd - iTime * .2, .1) / .1;\n    vec3 col = sd > 0. ? vec3(.3, 1., .3) : vec3(1., .3, .3);\n    col *= mix(0.7, 1., smoothstep(0.4, 0.45, sdm) * smoothstep(0.55, 0.6, sdm));\n    col = mix(vec3(1.), col, smoothstep(0.01, 0.02, abs(sd)));\n    \n    fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"}]}