{"ver":"0.1","info":{"id":"XfjyW1","date":"1722433400","viewed":19,"name":"Julia_ARTS1308_Reversion","username":"Reversion","description":"As comment","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d","fractal","julia"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// CC BY-SA 3.0\n// This shader is for a course, Fragment Shader Art (course code: ARTS1308) in ShanghaiTech University as hw6.\n\nmat2 rot(float th){\n    return mat2(cos(th), -sin(th), sin(th), cos(th));\n}\n\nvec2 cmul(vec2 a, vec2 b){\n    return vec2(a.x*b.x-a.y*b.y, a.x*b.y+a.y*b.x);\n}\n\nvec2 cdiv(vec2 a, vec2 b){\n    float d = dot(b,b);\n    return vec2(dot(a,b),a.y*b.x-a.x*b.y)/d;\n}\n\nvec2 cpow(vec2 a, float n){\n    float l = length(a);\n    float an = atan(a.y,a.x);\n    return vec2(cos(an*n),sin(an*n))*pow(l,n);\n}\n\nvec2 integral(vec2 x){\n    x/=2.;\n    return floor(x) + max(2.*fract(x)-1.,0.);\n}\n\nfloat checkerboard(vec2 p){\n    vec2 fw = fwidth(p);\n    vec2 i = integral(p + .5*fw)-integral(p-.5*fw);\n    i/=fw;\n    return i.x+i.y-2.*i.x*i.y;\n}\n\nfloat grid(vec2 p){\n    vec2 q = p*16.;\n    return .5+.5*checkerboard(q);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = 2.4*(fragCoord - .5*iResolution.xy)/iResolution.y;\n    \n    vec3 col = vec3(1.);\n    \n    vec2 z = uv;\n    vec2 c = vec2(0.28,-0.5)*rot(iTime*2.);\n    float t = 1.;\n    \n    vec2 dz = vec2(1.,0.);\n    vec2 phi = z;\n    \n    for(;t<512.;t++){\n        if (length(z) > 1024.) {break;}\n        dz = cmul(z, dz)*2.;\n        \n        // Tried cubic but the effect was not very satisfying. Four the same.\n        //z = cmul(z,cmul(z,z))+c;\n        //z = cmul(cmul(z,z),cmul(z,z))+c;\n        z = cmul(z,z)+c;\n        \n        float n = pow(0.5,t);\n        vec2 c = cdiv(z, z-c);\n        phi = cmul(phi,cpow(c,n));\n    }\n    \n    \n    \n    if (t > 511.){\n        col = vec3(.1,.7,.8);\n        col*=smoothstep(1024.,500.,length(z));\n    }else{\n        float d = length(z) *log(length(z))/length(dz);\n        //col = vec3(0.1,0.8,0.9);\n        col *= grid(phi);\n        col *= smoothstep(0.,.01,d);\n        //col *= 0.4+0.5*sin(120.*d);\n    \n    }\n    \n    \n    \n    \n    \n    fragColor = vec4(col,1.);\n    \n}","name":"Image","description":"","type":"image"}]}