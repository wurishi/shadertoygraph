{"ver":"0.1","info":{"id":"fsByz3","date":"1643828863","viewed":118,"name":"Sierpinski Triangle SDF 3d","username":"jt","description":"Loopless, equilateral, exact embedding of [url=https://www.shadertoy.com/view/fdBcR3]Sierpinski Triangle SDF 2d[/url] in 3d,\neither by 3dify/wireify or extrusion (select #if 0 or #if 1).\n","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["3d","sdf","triangle","distance","sierpinski","exact","extrude","insulate","3dify","wirify"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/fsByz3 Sierpinski Triangle SDF 3d - 2022-2-2 by Jakob Thomsen\n// Loopless, equilateral, exact 3d-embedding of\n// https://www.shadertoy.com/view/fdBcR3 Sierpinski Triangle SDF 2d,\n// either by 3dify/wireify or extrusion (select #if 1 or #if 0).\n//\n// CC0 License\n//\n// To the extent possible under law, the author has dedicated\n// all copyright and related and neighboring rights to this software\n// to the public domain worldwide.\n// This software is distributed without any warranty.\n//\n// For a copy of the CC0 Public Domain Dedication see <http://creativecommons.org/publicdomain/zero/1.0/>.\n\n// tags: 3d, sdf, triangle, distance, sierpinski, insulate, 3dify, wirify, exact\n\n#define EPSILON 0.001\n#define DIST_MAX 500.0\n\n// https://iquilezles.org/articles/distfunctions2d\nfloat halfspace(vec3 p, float d)\n{\n    return p.z - d;\n}\n\nfloat sdEquilateralTriangle( in vec2 p ) // https://www.shadertoy.com/view/Xl2yDW  Regular Triangle - distance 2D by iq\n{\n    const float k = sqrt(3.0);\n    p.x = abs(p.x) - 1.0;\n    p.y = p.y + 1.0/k;\n    if( p.x+k*p.y>0.0 ) p = vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n    p.x -= clamp( p.x, -2.0, 0.0 );\n    return -length(p)*sign(p.y);\n}\n\nfloat SDF_SierpinskiTriangle(vec2 p, uint n) // by jt\n{\n    // For equilateral triangle: h = sqrt(3)/2 so 0.5^2 + h^2 = 0.25 + 0.75 = 1\n    // Vertices 3d (1,0,0),(0,1,0),(0,0,1) projected to 2d (-0.5,sqrt(3)/6),(+0.5,sqrt(3)/6),(0,sqrt(3)/3)\n    // (Note: sqrt(3)/3+sqrt(3)/6 = sqrt(3)*2/6+sqrt(3)*1/6 = sqrt(3)*3/6 = sqrt(3)/2)\n    // Projection:\n    //\n    //    a = -x*0.5+y*0.5\n    //    b = -x*sqrt(3)/6-y*sqrt(3)/6+z*sqrt(3)/3\n    //\n    // Inverse projection using wxMaxima:\n    //\n    //    linsolve([a=y/2-x/2, b=sqrt(3)*(z/3-(x+y)/6),x+y+z=1], [x,y,z]);\n    //\n    // Result:\n    //\n    //    [x=(-sqrt(3)*b-3*a+1)/3,y=(-sqrt(3)*b+3*a+1)/3,z=(2*sqrt(3)*b+1)/3]\n    vec3 q =\n        vec3 // global coordinates (barycentric)\n        (\n            (-sqrt(3.0)*p.y-3.0*p.x+1.0)/3.0,\n            (-sqrt(3.0)*p.y+3.0*p.x+1.0)/3.0,\n            (2.0*sqrt(3.0)*p.y+1.0)/3.0\n        );\n\n    if(any(lessThan(q, vec3(0.0))))\n        return sdEquilateralTriangle(p * 2.0) / 2.0;\n\n    float N = exp2(float(n));\n    q = 1.0 - q;\n    ivec3 i = ivec3(q * N);\n    int f = i.x & i.y & i.z; // inspired by FabriceNeyret2's shortest Sierpinski https://www.shadertoy.com/view/ldlfRM\n    if(f == 0) // \"leaves\" - this would be the base-case if this was a recursive implementation\n    {\n        q = 1.0 - q;\n        q = mod(q, 1.0 / N);\n        return -min(min(q.x, q.y), q.z);\n    }\n\n    float s = exp2(floor(log2(float(f)))) * 2.0 / N;\n    \n    q = mod(q * 2.0, s) / 2.0 * sqrt(3.0) / 2.0; // local coordinates (barycentric)\n\n    return min(min(q.x, q.y), q.z);\n}\n\nfloat wireify_SierpinskiTriangle(vec3 p)\n{\n    float df = SDF_SierpinskiTriangle(p.xz, 20u); // distance to 2d SDF\n#if 0\n    float dp = p.y; // distance to plane\n    return sqrt(dp*dp+df*df); // wireify/insulate/3dify 2d SDF\n#else\n    // from https://www.shadertoy.com/view/4lyfzw Extrusion and Revolution SDF by iq\n    float dp = abs(p.y) - 0.01;\n    return min(max(df,dp),0.0) + length(max(vec2(df, dp),0.0));\n#endif\n}\n\nfloat map(vec3 p)\n{\n    float d = 0.01;\n    float s = 5.0;\n    return\n        min\n        (\n            wireify_SierpinskiTriangle(p/s)*s - d,\n            halfspace(p, -1.5)\n        );\n}\n\n// https://iquilezles.org/articles/normalsSDF tetrahedron normals\nvec3 normal(vec3 p)\n{\n    const float h = EPSILON;\n    const vec2 k = vec2(1,-1);\n    return\n        normalize\n        (\n            k.xyy * map(p + k.xyy*h)\n            +\n            k.yyx * map(p + k.yyx*h)\n            +\n            k.yxy * map(p + k.yxy*h)\n            +\n            k.xxx * map(p + k.xxx*h)\n        );\n}\n\nfloat trace(vec3 ro, vec3 rd)\n{\n    for(float t = 0.0; t < DIST_MAX;)\n    {\n        float h = map(ro + rd * t);\n        if(h < EPSILON)\n            return t;\n        t += h;\n    }\n    return DIST_MAX;\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat shadow( in vec3 ro, in vec3 rd, float mint, float maxt )\n{\n    for( float t=mint; t<maxt; )\n    {\n        float h = map(ro + rd*t);\n        if( h<EPSILON )\n            return 0.0;\n        t += h;\n    }\n    return 1.0;\n}\n\n// https://www.shadertoy.com/view/Xds3zN raymarching primitives\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n    float occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.01 + 0.12*float(i)/4.0;\n        float d = map( pos + h*nor );\n        occ += (h-d)*sca;\n        sca *= 0.95;\n        if( occ>0.35 ) break;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 ) ;\n}\n\n#define pi 3.1415926\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 ndc = 2.0 * fragCoord.xy / iResolution.xy - 1.0;\n    ndc.x *= iResolution.x / iResolution.y;\n    vec2 m = length(iMouse.xy) <= 10. // click in lower left corner...\n           ? pi * vec2(2.0 * fract(iTime * 0.1), 2.0 / 4.0) // ...for demo mode\n           : pi * vec2(2.0 * iMouse.x / iResolution.x, 0.5 + 0.5 * iMouse.y / iResolution.y); // mouse look\n\n    mat2 R = mat2(cos(m.x), sin(m.x), -sin(m.x), cos(m.x));\n    vec3 ro = vec3(0.0, 0.0,-5.0);\n    mat2 S = mat2(cos(m.y), sin(m.y), -sin(m.y), cos(m.y));\n    ro.yz = S * ro.yz;\n    ro.xy = R * ro.xy;\n\n    vec3 rd = normalize(vec3(0.5 * ndc.xy, 1.0)); // NOTE: omitting normalization results in clipped edges artifact\n    rd.yz = S * rd.yz;\n    rd.xy = R * rd.xy;\n\n    float dist = trace(ro, rd);\n    vec3 dst = ro + rd * dist;\n    vec3 n = normal(dst);\n\n    vec3 lightdir = normalize(vec3(1.0, 1.0, 1.0));\n    vec3 ambient = vec3(0.4);\n    float brightness = max(dot(lightdir, n), 0.0);\n    brightness *= shadow(ro+rd*dist,lightdir, 0.01, DIST_MAX);\n    vec3 color = vec3(1.0);\n    color *= (n * 0.5 + 0.5);\n    color = (ambient * calcAO(dst, n) + brightness) * color;\n\n    fragColor = (dist < DIST_MAX) ? vec4(color, 1.0) : vec4(0.0);\n    fragColor = sqrt(fragColor); // approximate gamma\n}\n","name":"Image","description":"","type":"image"}]}