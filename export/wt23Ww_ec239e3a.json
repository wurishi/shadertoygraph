{"ver":"0.1","info":{"id":"wt23Ww","date":"1595511223","viewed":43,"name":"My first shader. Sphere tracing","username":"Balas","description":"My very first shader on my own (with some tutorials)","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["learning"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define RAYMARCH_THRESHOLD 0.01\n#define RAYMARCH_MAXSTEPS 16\n#define MAXDIST 10.\n\n\nvec4 sphere = vec4(0, 1, 8, 1);\n\nfloat sphereDist(vec4 _sphere, vec3 _spot){\n    return distance(_sphere.xyz, _spot)-_sphere.w;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd){\n    \n    float dO = 0.;\n    for(int steps = 0; steps<RAYMARCH_MAXSTEPS; ++steps){\n        vec3 p = ro + rd*dO;\n        float dS = sphereDist(sphere, p);\n        dO+=dS;\n        if(dO > MAXDIST || dS < RAYMARCH_THRESHOLD)\n            break;\n    }\n    return dO;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv-=vec2(0.5);\n    uv*=2.0;\n\n    \n    vec3 camPos = vec3(0, 0, 0);\n    vec3 camDir = normalize(vec3(uv.x, uv.y, 1));\n    \n    vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n    \n    \n    float sphD = RayMarch(camPos, vec3(p, 1));\n    \n\n    // Output to screen\n    fragColor.xyz = vec3(sphD/8.);\n}","name":"Image","description":"","type":"image"}]}