{"ver":"0.1","info":{"id":"lsKBDK","date":"1530647680","viewed":719,"name":"Music Vis 2","username":"TekF","description":"Exploring some variations on my music visualiser - added a feedback effect and some filtering to the spectrum and wave samples, and a lot of tweaks to the colours.\nUse the mouse to explore different variations.","likes":8,"published":3,"flags":96,"usePreview":0,"tags":["spectrum","music","musicvisualizer","musicvisualiser"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColour, in vec2 fragCoord )\n{\n    fragColour = texelFetch(iChannel3,ivec2(fragCoord),0);\n    \n    // gamma correct (convert linear colour values back to monitor-gamma space)\n    fragColour.rgb = pow( fragColour.rgb, vec3(1./2.2) );\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XlsGWX","filepath":"https://soundcloud.com/jennyhvalofficial/lions-feat-vivian-wang","previewfilepath":"https://soundcloud.com/jennyhvalofficial/lions-feat-vivian-wang","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const int blades = 6;\n\n// row 0 = frequency\n// row 1 = waveform\nfloat Sample( float u, int row, int range )\n{\n    float f = 0.;\n    for ( int i=0; i < 128; i++ )\n    {\n        if ( i >= range ) break;\n        \n        float g = texelFetch(iChannel0,ivec2((int(u*iChannelResolution[0].x)+i-range/2)&int(iChannelResolution[0].x-1.),row),0).r;\n        \n\t    // gamma correct (convert to linear, before we do any blending with other samples)\n        // (source texture isn't strictly an image, so this is just a cosmetic tweak)\n    \tf += pow( g, 2.2 );\n    }\n    return f/float(range);\n}\n\nvoid mainImage( out vec4 fragColour, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord*2.-iResolution.xy)/iResolution.y;\n    \n    float l = length(uv)/length(iResolution.xy/iResolution.y);\n    float a = atan(uv.x,uv.y)+iTime;\n    a = abs(fract(float(blades)*a/6.283)*2.-1.)*l;\n    \n    float A = .25;\n    float B = .5;\n    if ( iMouse.z > 0. )\n    {\n        A = iMouse.x / iResolution.x; // strength of chromatic dispersion\n        B = iMouse.y / iResolution.y; // strength of waveform\n    }\n    A *= A; // apply a curve so mouse movements feel better\n    B *= B;\n    \n    fragColour.r = Sample(pow(mix(mix(l,.0,A),    Sample(a,1,1) ,B),2.), 0, 20);\n    fragColour.g = Sample(pow(mix(mix(l,.5,A),(1.-Sample(a,1,64)),B),2.), 0, 8);\n    fragColour.b = Sample(pow(mix(mix(l,1.,A),    Sample(a,1,128) ,B),2.), 0, 1);\n    \n    // tweak the contrast\n    fragColour.rgb = smoothstep(vec3(.3,.2,.4),vec3(.9,1,.8),fragColour.rgb+.2*l);\n\n    // motion blur/trails (use different rates for each component for a nice effect!)\n    vec3 old = texelFetch(iChannel3,ivec2(fragCoord),0).rgb;\n    //old = fract(old+.08); // psychadelic!\n\tfragColour.rgb = mix( old, fragColour.rgb, vec3(.2,.6,.1) );\n    \n    fragColour.a = 1.;\n}\n","name":"Buffer A","description":"","type":"buffer"}]}