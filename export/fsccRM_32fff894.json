{"ver":"0.1","info":{"id":"fsccRM","date":"1653259638","viewed":66,"name":"Moving Squares","username":"Dauthdeart","description":"Inspired by Lucas Lejeune \"Empty Frame\"\nhttps://www.reddit.com/r/Art/comments/uocphc/empty_frame_me_digital_2022/","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["squares"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// This code is awfull please do not hurt yourself reading it\n\nfloat xRatio;\nfloat smoothSize = 0.001;\nfloat l = 0.006;\n\n// The image goes from 0.0 to 1.0 on each axes. rescale the coordinates\nvec2 Point( in float x, in float y)\n{\n    return vec2(x*xRatio, y);\n}\n\n\n// If is iside the rectangle\nbool isInside(in vec2 center, in float size, in vec2 x)\n{\n    vec2 bl = vec2(center.x - size, center.y - size);\n    vec2 tr = vec2(center.x + size, center.y + size);\n    return bl.x < x.x && bl.y < x.y && tr.x > x.x && tr.y > x.y;\n}\n\n// Draw a rectangle using bottomLeft and topRight point as data\nfloat Rect(in vec2 a, in vec2 b, in vec2 x)\n{\n    \n    float band1 = min(smoothstep(a.x-smoothSize, a.x+smoothSize, x.x), 1.0 - smoothstep(b.x-smoothSize, b.x+smoothSize, x.x));\n    float band2 = min(smoothstep(a.y-smoothSize, a.y+smoothSize, x.y), 1.0 - smoothstep(b.y-smoothSize, b.y+smoothSize, x.y));\n    \n    return min(band1, band2);  \n}\n\n// Draw a square using 4 rectangles\nfloat Square(in vec2 center, in float sideSize, vec2 x)\n{\n    vec2 tl = vec2(center.x - sideSize, center.y + sideSize);\n    vec2 tr = vec2(center.x + sideSize, center.y + sideSize);\n    vec2 bl = vec2(center.x - sideSize, center.y - sideSize);\n    vec2 br = vec2(center.x + sideSize, center.y - sideSize);\n    \n    tl.y -= l;\n    float tempRes = Rect(tl, tr, x);\n    br.x -= l;\n    tempRes = max(tempRes, Rect(br, tr, x));\n    br.y += l;\n    tempRes = max(tempRes, Rect(bl, br, x));\n    tl.x += l; \n    return max(tempRes, Rect(bl, tl, x));\n}\n\nfloat firstSizeFunc(in float tf, in float ts, in float st)\n{\n    return sin(iTime + cos(iTime*tf+ts*st));\n}\n    \nfloat secondSizeFunc(in float tf, in float ts, in float st)\n{\n    return sin(iTime*tf+ts*st);\n}\n    \nfloat thirdSizeFunc(in float tf, in float ts, in float st)\n{\n    return cos(iTime*tf+ts*st);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    xRatio = iResolution.x/iResolution.y;\n    vec2 coord = Point(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n    \n    // Final gray value\n    float c = 0.0;\n    \n    vec2 center = Point(0.5, 0.5);\n    \n    // Main raw of squares data\n    float xOffSet0 = 0.0;\n    float yOffSet0 = 0.0;\n    float baseSize0 = 0.01;\n    float addedSize0 = 0.31;\n    float timeFactor0 = 1.8;\n    float timeStep0 = 0.15;\n    \n    // Second raw of squares data\n    float xOffSet1 = 0.0;\n    float yOffSet1 = 0.0;\n    float baseSize1 = 0.085;\n    float addedSize1 = 0.085;\n    float timeFactor1 = 1.0;\n    float timeStep1 = 0.1;\n    \n    // Third raw of squares data\n    float xOffSet2 = 0.0;\n    float yOffSet2 = 0.0;\n    float baseSize2 = 0.04;\n    float addedSize2 = 0.04;\n    float timeFactor2 = 1.5;\n    float timeStep2 = 0.15;\n    \n    \n    \n    for(float i=9.0; i>0.0; i--)\n    {\n        // First Squares\n        vec2 firstCenter = center;\n        float firstSize = baseSize0 + addedSize0*firstSizeFunc(timeFactor0, timeStep0, i);\n        float secondSize = baseSize1 + addedSize1*secondSizeFunc(timeFactor1, timeStep1, i);\n        float thirdSize = baseSize2 + addedSize2*thirdSizeFunc(timeFactor2, timeStep2, i);\n        if (isInside(firstCenter, firstSize, coord)){\n            c += Square(firstCenter, firstSize, coord);\n            i = -1.0;}\n        // If not inside a first squares\n        // tries to draw secondes\n        else{\n            vec2 tl; vec2 tr; vec2 br; vec2 bl;\n            \n            tl = vec2(firstCenter.x - firstSize, firstCenter.y + firstSize);\n            if (isInside(tl, secondSize, coord)){\n                c += Square(tl, secondSize, coord);\n                i = -1.0;}\n            else{\n                \n                vec2 secondCenter = tl;\n                tl = vec2(secondCenter.x - secondSize, secondCenter.y + secondSize);\n                \n                if (isInside(tl, thirdSize, coord)){\n                    c += Square(tl, thirdSize, coord);\n                    i = -1.0;}\n                tr = vec2(secondCenter.x + secondSize, secondCenter.y + secondSize);\n                if (isInside(tr, thirdSize, coord)){\n                    c += Square(tr, thirdSize, coord);\n                    i = -1.0;}\n                bl = vec2(secondCenter.x - secondSize, secondCenter.y - secondSize);\n                if (isInside(bl, thirdSize, coord)){\n                    c += Square(bl, thirdSize, coord);\n                    i = -1.0;}\n                br = vec2(secondCenter.x + secondSize, secondCenter.y - secondSize);\n                if (isInside(br, thirdSize, coord)){\n                    c += Square(br, thirdSize, coord);\n                    i = -1.0;} \n            }\n            \n            \n            tr = vec2(firstCenter.x + firstSize, firstCenter.y + firstSize);\n            if (isInside(tr, secondSize, coord)){\n                c += Square(tr, secondSize, coord);\n                i = -1.0;}\n            else{\n                vec2 secondCenter = tr;\n                tl = vec2(secondCenter.x - secondSize, secondCenter.y + secondSize);\n                if (isInside(tl, thirdSize, coord)){\n                    c += Square(tl, thirdSize, coord);\n                    i = -1.0;}\n                tr = vec2(secondCenter.x + secondSize, secondCenter.y + secondSize);\n                if (isInside(tr, thirdSize, coord)){\n                    c += Square(tr, thirdSize, coord);\n                    i = -1.0;}\n                bl = vec2(secondCenter.x - secondSize, secondCenter.y - secondSize);\n                if (isInside(bl, thirdSize, coord)){\n                    c += Square(bl, thirdSize, coord);\n                    i = -1.0;}\n                br = vec2(secondCenter.x + secondSize, secondCenter.y - secondSize);\n                thirdSize = baseSize2 + addedSize2*cos(iTime*timeFactor2+timeStep2*i);\n                if (isInside(br, thirdSize, coord)){\n                    c += Square(br, thirdSize, coord);\n                    i = -1.0;} \n            }\n            \n            bl = vec2(firstCenter.x - firstSize, firstCenter.y - firstSize);\n            if (isInside(bl, secondSize, coord)){\n                c += Square(bl, secondSize, coord);\n                i = -1.0;}\n            else{\n                vec2 secondCenter = bl;\n                tl = vec2(secondCenter.x - secondSize, secondCenter.y + secondSize);\n                if (isInside(tl, thirdSize, coord)){\n                    c += Square(tl, thirdSize, coord);\n                    i = -1.0;}\n                tr = vec2(secondCenter.x + secondSize, secondCenter.y + secondSize);\n                if (isInside(tr, thirdSize, coord)){\n                    c += Square(tr, thirdSize, coord);\n                    i = -1.0;}\n                bl = vec2(secondCenter.x - secondSize, secondCenter.y - secondSize);\n                if (isInside(bl, thirdSize, coord)){\n                    c += Square(bl, thirdSize, coord);\n                    i = -1.0;}\n                br = vec2(secondCenter.x + secondSize, secondCenter.y - secondSize);\n                if (isInside(br, thirdSize, coord)){\n                    c += Square(br, thirdSize, coord);\n                    i = -1.0;} \n            }\n            \n            br = vec2(firstCenter.x + firstSize, firstCenter.y - firstSize);\n            if (isInside(br, secondSize, coord)){\n                c += Square(br, secondSize, coord);\n                i = -1.0;}\n            else{\n                vec2 secondCenter = br;\n                tl = vec2(secondCenter.x - secondSize, secondCenter.y + secondSize);\n                if (isInside(tl, thirdSize, coord)){\n                    c += Square(tl, thirdSize, coord);\n                    i = -1.0;}\n                tr = vec2(secondCenter.x + secondSize, secondCenter.y + secondSize);\n                if (isInside(tr, thirdSize, coord)){\n                    c += Square(tr, thirdSize, coord);\n                    i = -1.0;}\n                bl = vec2(secondCenter.x - secondSize, secondCenter.y - secondSize);\n                if (isInside(bl, thirdSize, coord)){\n                    c += Square(bl, thirdSize, coord);\n                    i = -1.0;}\n                br = vec2(secondCenter.x + secondSize, secondCenter.y - secondSize);\n                if (isInside(br, thirdSize, coord)){\n                    c += Square(br, thirdSize, coord);\n                    i = -1.0;} \n            }\n        }\n        \n        \n    }\n    \n    fragColor = vec4(c, c, c, 1.0);\n}","name":"Image","description":"","type":"image"}]}