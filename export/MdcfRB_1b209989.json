{"ver":"0.1","info":{"id":"MdcfRB","date":"1525696944","viewed":601,"name":"Tilted Sphere Mapping","username":"pyBlob","description":"Sphere mapping of a twisted texture. The texture blending/twist factor can be faded linearly.","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["texture","sphere","mapping","oblique"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.141592653589793\n#define SQRT2 1.4142135623730951\n#define SQRT1_2 0.7071067811865476\n\nvec3 map(vec3 pos)\n{\n    vec2 uv = vec2(\n        atan(pos.z, pos.x) / PI / 2.0,\n        atan(pos.y, length(pos.xz)) / PI\n    );\n    float r = length(pos) - 1.0;\n    return vec3(r, uv);\n}\n\nvec3 grid(vec2 uv)\n{\n    uv *= 8.0;\n    uv *= PI * 2.0;\n    return 0.5+0.5*vec3(max(sin(uv.x), sin(uv.y)));\n}\n\nvec3 getcol(vec2 uv)\n{\n    vec2 ruv = mat2(\n        1, 1,\n        -1, 1\n    ) * uv;\n    //ruv.x+=iTime*0.05; // don't try it ._.\n    return mix(\n        grid(ruv) * 0.3,\n    \ttexture(iChannel0, ruv*3.0).xyz,\n        0.5+0.5*cos(\n            mix(ruv.x, ruv.y, 0.5+0.5*cos(iTime))\n            *PI*6.0+iTime*2.0)\n    );\n}\n\nvec3 camera(vec3 ta, vec3 po, vec2 pi)\n{\n    vec2 p = pi;\n    vec3 ww = normalize( ta - po );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\n\treturn normalize( p.x*uu + p.y*vv + 2.0*ww );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    vec2 guv = (fragCoord-iResolution.xy/2.0)/iResolution.yy;\n    vec3 ro = vec3(-4.5*sin(iTime*0.3f),4*1,-5.0*cos(iTime*0.3f));\n    vec3 rd = camera(vec3(0,0,0), ro, guv);\n    float r = 2.0;\n    vec3 mat;\n    for (int i=0 ; i<64 ; i++)\n    {\n        vec3 pos = ro + rd * r;\n        mat = map(pos);\n        if (mat.x < 1e-4 || r > 1000.0)\n            break;\n        r += mat.x;\n    }\n    \n    if (mat.x < 1e-3)\n        col = getcol(mat.yz);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}