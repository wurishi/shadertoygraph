{"ver":"0.1","info":{"id":"WtjfDW","date":"1598967380","viewed":119,"name":"nice-cube","username":"jorge2017a1","description":"//autor desconocido","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["nicecube"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//autor desconocido\n vec3 p;\n\n\n// object transformation\nvec3 rotateX(vec3 p, float phi) \n{\n\tfloat c = cos(phi);\n\tfloat s = sin(phi);\n\treturn vec3(p.x, c*p.y - s*p.z, s*p.y + c*p.z);\n}\n\nvec3 rotateY(vec3 p, float phi) \n{\n\tfloat c = cos(phi);\n\tfloat s = sin(phi);\n\treturn vec3(c*p.x + s*p.z, p.y, c*p.z - s*p.x);\n}\n\nvec3 rotateZ(vec3 p, float phi)\n{\n\tfloat c = cos(phi);\n\tfloat s = sin(phi);\n\treturn vec3(c*p.x - s*p.y, s*p.x + c*p.y, p.z);\n}\n\n// ray marching objects\nfloat obj_udRoundBox(vec3 p) \n{\n\tvec3 b = vec3(.3);\n\tp = rotateZ(rotateY(rotateX(p, iTime), iTime), iTime);\n\treturn ((length(max(sin(abs(p)-b),0.0))-.05));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy/max(iResolution.x, iResolution.y);\n\tvec2 vPos = 2.*q;\n\tvPos += vec2(-1., -.5);\n\n\t// Camera setup\n\tvec3 camUp = vec3(0,1,0);\n\tvec3 camlookAt = vec3(0);\n\tvec3 camPos = vec3(1);\n\tvec3 camDir = normalize(camlookAt - camPos);\n\tvec3 u = normalize(cross(camUp, camDir));\n\tvec3 v = cross(camDir, u);\n\tvec3 vcv = camPos + camDir;\n\tvec3 scrCoord = vPos.x*u*1. + vPos.y*v*1.;\n\tvec3 scp = normalize(scrCoord - camPos);\n\n\t// Raymarching\n\tconst vec3 e = vec3(.005, 0., 0.);\n\tconst float maxd = 100.;\n\tfloat d = .005;\n\tvec3 p;\n\n\tfloat f = 1.;\n\tfor(int i = 0; i < 65; i++) {\n\t    \tif ((abs(d) < .001) || (f > maxd)) break;\n\t    \tf += d;\n\t    \tp = vec3(2.) + scp*f;\n\t    \td = obj_udRoundBox(p);\n\t}\n  \n\tif (f < maxd) \n    { // cube\n\t\tvec3 col = vec3(abs(sin(iTime))*.2+.5, abs(sin(iTime-3.1416/8.))*.2+.5, abs(sin(iTime+3.1416/8.))*.2+.5);\n\t\tvec3 n = vec3(d - obj_udRoundBox(p - e.xyy), d - obj_udRoundBox(p - e.yxy), d - obj_udRoundBox(p - e.yyx));\n\t\tfloat b = dot(normalize(n), normalize(camPos - p));\n\t\tfragColor=vec4((b*col + pow(b, 16.))*(1. - f*.01), 1.);\n\t} else \n    { \n    // background, thanks to: heroku\n\t\tvec2 uv = fragCoord.xy/iResolution.xy;\n\t\tvec3 c = vec3(sin(uv.x*5.-0.+iTime*1.), sin(uv.x*5.-4.0-iTime*1.), sin(uv.x*5.-4.+iTime*1.));\n\t\tfloat a = pow(sin(uv.x*3.1416),.9)*pow(sin(uv.y*3.1416),.9);\n\t\tfragColor=mix(vec4(vec3(a),1.0), vec4(c,1.), 0.05);\n\t}\n}\n\n\n","name":"Image","description":"","type":"image"}]}