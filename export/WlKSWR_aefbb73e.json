{"ver":"0.1","info":{"id":"WlKSWR","date":"1582825591","viewed":52,"name":"SmoothMin","username":"thisisjohnbrown","description":"Testing smoothmin","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["smooth"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .01\n\nfloat sdBox(vec3 p, vec3 s) {\n    return length(max(abs(p) - s, 0.));\n}\n\nfloat sdTorus(vec3 p, vec2 r) {\n    float x = length(p.xz)-r.x;\n    return length(vec2(x, p.y)) - r.y;\n}\n\nfloat sdCapsule(vec3 p, vec3 a, vec3 b, float r) {\n    vec3 ab = b - a;\n    vec3 ap = p - a;\n    \n    float t = dot(ab, ap) / dot(ab, ab);\n    t = clamp(t, 0., 1.);\n    \n    vec3 c = a + t * ab;\n    float d = length(p-c) - r;\n    \n    return d;\n}\n\nmat2 Rot(float a) {\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat smin(float a, float b, float k) {\n    float h = clamp(0.5 + 0.5* (b-a/k), 0., 1.);\n    return mix(b, a, h) - k * h * (1.0 - h);\n}\n\nfloat GetDist(vec3 p) {\n    vec4 s = vec4(0, 1, 6, 1.5);\n    \n    float s1 = length(p - vec3(0, 1, 6) + (vec3(sin(iTime), 0, cos(iTime)) * 1.5)) - .5;\n    float s2 = length(p - vec3(0, 1, 6) + (vec3(sin(-iTime * 1.7), 0, cos(-iTime * 1.7)) * .5)) - .5;\n    float planeDist = p.y;\n    \n    //float cd = sdCapsule(p, vec3(0, 1, 6), vec3(1, 2, 6), .2);\n    float td = sdTorus(p - vec3(0, 1, 6), vec2(1.5, .25));\n    \n    vec3 bp = p - vec3(-1, 1, 6);\n    bp.xz *= Rot(iTime);\n    float bd = sdBox(bp, vec3(1));\n    \n    float d = smin(s1, s2, .7);\n    //d = min(d, planeDist);\n    d = smin(d, td, .7);\n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n    float dO = 0.;\n    \n    for (int i = 0; i < MAX_STEPS; i++) {\n        vec3 p = ro + rd * dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if (dO > MAX_DIST || dS < SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    float d = GetDist(p);\n    vec2 e = vec2(.01, 0);\n    vec3 n = d - vec3(\n        GetDist(p - e.xyy),\n        GetDist(p - e.yxy),\n        GetDist(p - e.yyx));\n    return normalize(n);\n        \n}\n\nfloat GetLight(vec3 p) {\n    vec3 lightPos = vec3(3, 5, 3.);\n    //lightPos.xz += vec2(sin(iTime), cos(iTime)) * 2.;\n    vec3 l = normalize(lightPos - p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l), 0., 1.);\n    float d = RayMarch(p + n * SURF_DIST * 10., l);\n    if (d < length(lightPos - p)) dif *= .4;\n    return dif;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - .5 * iResolution.xy) /iResolution.y;\n\n    vec3 col = vec3(0);\n    \n    vec3 ro = vec3(0, 4, 0);\n    vec3 rd = normalize(vec3(uv.x, uv.y - .6, 1.0));\n    \n    float d = RayMarch(ro, rd);\n    vec3 p = ro + rd * d;\n    \n    float dif = GetLight(p);\n\n    col = vec3(dif);\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}