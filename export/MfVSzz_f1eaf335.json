{"ver":"0.1","info":{"id":"MfVSzz","date":"1714745114","viewed":40,"name":"Stationery wave visualiser","username":"HackFight","description":"A visualiser for stationery waves","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float check(float p, float f, float t)\n{\n    return smoothstep( 3./iResolution.y, 0.,  abs(p - f) - t );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2. - iResolution.xy) / iResolution.y;\n    \n    const float t = 0.01;\n    \n    float tWave1 = sin((uv.x - (iTime/5.)) * 5.) / 3.;\n    float tWave2 = sin((uv.x + (iTime/5.)) * 5.) / 3.;\n    float sWave = tWave1 + tWave2;\n    \n    float a = 0.;\n    float b = 0.;\n    float c = 0.;\n    \n    a = check(uv.y, sWave, t);\n    b = check(uv.y, tWave1, t);\n    c = check(uv.y, tWave2, t);\n    \n    vec3 col = vec3(a) * vec3(1, 1, 0) + vec3(b) * vec3(1, 0, 0) + vec3(c) * vec3(0, 1, 0);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}