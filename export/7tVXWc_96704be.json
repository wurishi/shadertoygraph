{"ver":"0.1","info":{"id":"7tVXWc","date":"1641501244","viewed":306,"name":"fp32 - high scores","username":"Carandiru","description":"submit you number and I'll add it to the graph! That is if different gpu's do come up with unique numbers.....\n\nunique number, [AMD / NVIDIA]","likes":3,"published":3,"flags":32,"usePreview":0,"tags":["2d","retro","screen","crt","curve","terminal"],"hasliked":0,"parentid":"lt2SDK","parentname":"vt220 at night"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    \n    \n    vec3 color = textureLod(iChannel0, uv, 0.0f).rgb;\n    \n    \n    fragColor = vec4(color, 1.0f);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// terminal (modified) from https://www.shadertoy.com/view/lt2SDK [vt220 at night] by [sprash3]\n#define MAIN_BLOOM_ITERATIONS 10\n#define MAIN_BLOOM_SIZE 0.01\n\n#define WIDTH 0.875\n#define HEIGHT 0.5\n\n#define PHOSPHOR_COL vec3(0.2, 1.0, 0.2)\n#define AMBIENT 0.2\n\n#define NO_OF_LINES iResolution.y*HEIGHT\n#define SMOOTH 0.004\n\nprecision highp float;\n\nfloat roundSquare(vec2 p, vec2 b, float r)\n{\n    return length(max(abs(p)-b,0.0))-r;\n}\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\n\nvec3 someText(vec2 uv)\n{\n    if(uv.x < 0.0 || uv.x > 1.0 ||  uv.y < 0.0 || uv.y > 1.0) return vec3(0);\n    \n    vec4 samp = textureLod(iChannel0, uv, 0.0f);\n    \n    vec3 color = vec3(0);\n    \n    float switcher = triangle_wave(iTime * 1.5f);\n    \n    color += PHOSPHOR_COL * samp.x;\n    color += PHOSPHOR_COL.grb * samp.y;\n    color += PHOSPHOR_COL * samp.z;\n    color += (switcher * PHOSPHOR_COL + switcher * PHOSPHOR_COL) * samp.w;\n    \n    return(color);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 c = vec3(0);\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n\t// aspect-ratio correction\n\tvec2 aspect = vec2(1.,iResolution.y/iResolution.x);\n\tuv = 0.5 + (uv -0.5)/ aspect.yx;\n    \n    // Screen Content\n    vec2 uvC = (uv - 0.5)* 2.0; // screen content coordinate system\n    uvC *= vec2(0.5/WIDTH, 0.5/HEIGHT);\n    uvC = (uvC / 2.0) + 0.5;\n    \n    c += someText(uvC);\n    \n    // Simple Bloom\n    float B = float(MAIN_BLOOM_ITERATIONS*MAIN_BLOOM_ITERATIONS);\n    for(int i=0; i<MAIN_BLOOM_ITERATIONS; i++)\n    {\n        float dx = float(i-MAIN_BLOOM_ITERATIONS/2)*MAIN_BLOOM_SIZE;\n        for(int j=0; j<MAIN_BLOOM_ITERATIONS; j++)\n        {\n            float dy = float(j-MAIN_BLOOM_ITERATIONS/2)*MAIN_BLOOM_SIZE;\n            c += someText(uvC + vec2(dx, dy))/B;\n        }\n    }           \n    \n    // Ambient\n    c += max(0.0, AMBIENT - 0.3*distance(uv, vec2(0.5,0.5))) *\n        smoothstep(SMOOTH, -SMOOTH, roundSquare(uv-0.5, vec2(WIDTH, HEIGHT), 0.05));\n\n    fragColor = vec4(c, 1.0f);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// vxlmono\n\t\t   // Font Size: 7x6px\n\t\t   // offset = ascii_code(character) - ascii_code(' ')\n\t\t   // data = vxlmono[lut[offset]]\n\nconst ivec2 font_size = ivec2(7, 6);\n\nconst int data[] = int[](\n\t\t0x00,0x00,0x00,0x00,0x00,0x00, // Character 0x20 (32: ' ')\n\t\t0x3F,0x27,0x27,0x3F,0x27,0x3F, // Character 0x21 (33: '!')\n\t\t0x3F,0x3F,0x3F,0x3F,0x3F,0x3F, // Character 0x22 (34: '\"')\n\t\t0x00,0x3F,0x3F,0x3F,0x3F,0x3F, // Character 0x23 (35: '#')\n\t\t0x33,0x21,0x3D,0x27,0x21,0x33, // Character 0x24 (36: '$')\n\t\t0x3F,0x2D,0x37,0x3B,0x2D,0x3F, // Character 0x25 (37: '%')\n\t\t0x00,0x00,0x3F,0x3F,0x3F,0x3F, // Character 0x26 (38: '&')\n\t\t0x00,0x00,0x00,0x3F,0x3F,0x3F, // Character 0x27 (39: ''')\n\t\t0x00,0x00,0x00,0x00,0x3F,0x3F, // Character 0x28 (40: '(')\n\t\t0x00,0x00,0x00,0x00,0x00,0x3F, // Character 0x29 (41: ')')\n\t\t0x00,0x00,0x0A,0x04,0x0A,0x00, // Character 0x2a (42: '*')\n\t\t0x00,0x00,0x04,0x0E,0x04,0x00, // Character 0x2b (43: '+')\n\t\t0x00,0x00,0x00,0x00,0x02,0x02, // Character 0x2c (44: ',')\n\t\t0x00,0x00,0x00,0x0E,0x00,0x00, // Character 0x2d (45: '-')\n\t\t0x00,0x00,0x00,0x00,0x02,0x00, // Character 0x2e (46: '.')\n\t\t0x00,0x10,0x08,0x04,0x02,0x00, // Character 0x2f (47: '/')\n\t\t0x3F,0x23,0x2D,0x2D,0x31,0x3F, // Character 0x30 (48: '0')\n\t\t0x3F,0x27,0x2F,0x2F,0x2F,0x3F, // Character 0x31 (49: '1')\n\t\t0x3F,0x21,0x2F,0x39,0x21,0x3F, // Character 0x32 (50: '2')\n\t\t0x3F,0x21,0x2F,0x27,0x21,0x3F, // Character 0x33 (51: '3')\n\t\t0x3F,0x2D,0x2D,0x21,0x2F,0x3F, // Character 0x34 (52: '4')\n\t\t0x3F,0x21,0x3D,0x27,0x21,0x3F, // Character 0x35 (53: '5')\n\t\t0x3F,0x21,0x3D,0x21,0x21,0x3F, // Character 0x36 (54: '6')\n\t\t0x3F,0x21,0x2F,0x2F,0x2F,0x3F, // Character 0x37 (55: '7')\n\t\t0x3F,0x31,0x25,0x29,0x23,0x3F, // Character 0x38 (56: '8')\n\t\t0x3F,0x21,0x2D,0x21,0x2F,0x3F, // Character 0x39 (57: '9')\n\t\t0x00,0x00,0x02,0x00,0x02,0x00, // Character 0x3a (58: ':')\n\t\t0x1F,0x1F,0x1F,0x1F,0x1F,0x1F, // Character 0x3b (59: ';')\n\t\t0x0F,0x0F,0x0F,0x0F,0x0F,0x0F, // Character 0x3c (60: '<')\n\t\t0x00,0x00,0x0E,0x00,0x0E,0x00, // Character 0x3d (61: '=')\n\t\t0x07,0x07,0x07,0x07,0x07,0x07, // Character 0x3e (62: '>')\n\t\t0x3F,0x21,0x25,0x3F,0x27,0x3F, // Character 0x3f (63: '?')\n\t\t0x3F,0x27,0x2F,0x2D,0x21,0x3F, // Character 0x40 (64: '@')\n\t\t0x00,0x07,0x09,0x0F,0x09,0x00, // Character 0x41 (65: 'A')\n\t\t0x00,0x0F,0x07,0x09,0x0F,0x00, // Character 0x42 (66: 'B')\n\t\t0x00,0x0F,0x01,0x01,0x0F,0x00, // Character 0x43 (67: 'C')\n\t\t0x00,0x07,0x09,0x09,0x07,0x00, // Character 0x44 (68: 'D')\n\t\t0x00,0x0F,0x03,0x01,0x0F,0x00, // Character 0x45 (69: 'E')\n\t\t0x00,0x0F,0x01,0x07,0x01,0x00, // Character 0x46 (70: 'F')\n\t\t0x00,0x0F,0x01,0x0D,0x0F,0x00, // Character 0x47 (71: 'G')\n\t\t0x00,0x09,0x09,0x0F,0x09,0x00, // Character 0x48 (72: 'H')\n\t\t0x00,0x03,0x03,0x00,0x03,0x00, // Character 0x49 (73: 'I')\n\t\t0x00,0x08,0x08,0x08,0x0F,0x00, // Character 0x4a (74: 'J')\n\t\t0x00,0x0D,0x03,0x07,0x0D,0x00, // Character 0x4b (75: 'K')\n\t\t0x00,0x01,0x01,0x01,0x0F,0x00, // Character 0x4c (76: 'L')\n\t\t0x00,0x1B,0x15,0x11,0x11,0x00, // Character 0x4d (77: 'M')\n\t\t0x00,0x0F,0x09,0x09,0x09,0x00, // Character 0x4e (78: 'N')\n\t\t0x00,0x07,0x09,0x09,0x06,0x00, // Character 0x4f (79: 'O')\n\t\t0x00,0x0F,0x09,0x0F,0x01,0x00, // Character 0x50 (80: 'P')\n\t\t0x00,0x07,0x09,0x0D,0x0E,0x00, // Character 0x51 (81: 'Q')\n\t\t0x00,0x0F,0x09,0x07,0x0D,0x00, // Character 0x52 (82: 'R')\n\t\t0x00,0x0F,0x01,0x0C,0x0F,0x00, // Character 0x53 (83: 'S')\n\t\t0x00,0x1F,0x04,0x04,0x04,0x00, // Character 0x54 (84: 'T')\n\t\t0x00,0x09,0x09,0x09,0x0F,0x00, // Character 0x55 (85: 'U')\n\t\t0x00,0x09,0x09,0x02,0x06,0x00, // Character 0x56 (86: 'V')\n\t\t0x00,0x11,0x11,0x15,0x1B,0x00, // Character 0x57 (87: 'W')\n\t\t0x00,0x0D,0x05,0x0A,0x0B,0x00, // Character 0x58 (88: 'X')\n\t\t0x00,0x11,0x1B,0x04,0x04,0x00, // Character 0x59 (89: 'Y')\n\t\t0x00,0x0F,0x0C,0x03,0x0F,0x00, // Character 0x5a (90: 'Z')\n\t\t0x07,0x01,0x01,0x01,0x01,0x07, // Character 0x5b (91: '[')\n\t\t0x03,0x03,0x03,0x03,0x03,0x03, // Character 0x5c (92: '\\')\n\t\t0x07,0x04,0x04,0x04,0x04,0x07, // Character 0x5d (93: ']')\n\t\t0x01,0x01,0x01,0x01,0x01,0x01, // Character 0x5e (94: '^')\n\t\t0x7F,0x5D,0x6B,0x77,0x7F,0x7F, // Character 0x5f (95: '_')\n\t\t0x7F,0x7F,0x5D,0x6B,0x77,0x7F, // Character 0x60 (96: '`')\n\t\t0x3F,0x31,0x2D,0x21,0x2D,0x3F, // Character 0x61 (97: 'a')\n\t\t0x3F,0x21,0x31,0x2D,0x21,0x3F, // Character 0x62 (98: 'b')\n\t\t0x3F,0x21,0x3D,0x3D,0x21,0x3F, // Character 0x63 (99: 'c')\n\t\t0x3F,0x31,0x2D,0x2D,0x31,0x3F, // Character 0x64 (100: 'd')\n\t\t0x3F,0x21,0x39,0x3D,0x21,0x3F, // Character 0x65 (101: 'e')\n\t\t0x3F,0x21,0x3D,0x31,0x3D,0x3F, // Character 0x66 (102: 'f')\n\t\t0x3F,0x21,0x3D,0x25,0x21,0x3F, // Character 0x67 (103: 'g')\n\t\t0x3F,0x2D,0x2D,0x21,0x2D,0x3F, // Character 0x68 (104: 'h')\n\t\t0x3F,0x33,0x33,0x3F,0x33,0x3F, // Character 0x69 (105: 'i')\n\t\t0x3F,0x2F,0x2F,0x2F,0x21,0x3F, // Character 0x6a (106: 'j')\n\t\t0x3F,0x25,0x39,0x31,0x25,0x3F, // Character 0x6b (107: 'k')\n\t\t0x3F,0x3D,0x3D,0x3D,0x21,0x3F, // Character 0x6c (108: 'l')\n\t\t0x7F,0x49,0x55,0x5D,0x5D,0x7F, // Character 0x6d (109: 'm')\n\t\t0x3F,0x21,0x2D,0x2D,0x2D,0x3F, // Character 0x6e (110: 'n')\n\t\t0x3F,0x31,0x2D,0x2D,0x33,0x3F, // Character 0x6f (111: 'o')\n\t\t0x3F,0x21,0x2D,0x21,0x3D,0x3F, // Character 0x70 (112: 'p')\n\t\t0x3F,0x31,0x2D,0x25,0x23,0x3F, // Character 0x71 (113: 'q')\n\t\t0x3F,0x21,0x2D,0x31,0x25,0x3F, // Character 0x72 (114: 'r')\n\t\t0x3F,0x21,0x3D,0x27,0x21,0x3F, // Character 0x73 (115: 's')\n\t\t0x7F,0x41,0x77,0x77,0x77,0x7F, // Character 0x74 (116: 't')\n\t\t0x3F,0x2D,0x2D,0x2D,0x21,0x3F, // Character 0x75 (117: 'u')\n\t\t0x3F,0x2D,0x2D,0x3B,0x33,0x3F, // Character 0x76 (118: 'v')\n\t\t0x7F,0x5D,0x5D,0x55,0x49,0x7F, // Character 0x77 (119: 'w')\n\t\t0x3F,0x25,0x35,0x2B,0x29,0x3F, // Character 0x78 (120: 'x')\n\t\t0x7F,0x5D,0x49,0x77,0x77,0x7F, // Character 0x79 (121: 'y')\n\t\t0x3F,0x21,0x27,0x39,0x21,0x3F, // Character 0x7a (122: 'z')\n\t\t0x7F,0x4D,0x4D,0x4D,0x4D,0x7F, // Character 0x7b (123: '{')\n\t\t0x7F,0x59,0x59,0x59,0x59,0x7F, // Character 0x7c (124: '|')\n\t\t0x7F,0x4B,0x4B,0x4B,0x4B,0x7F, // Character 0x7d (125: '}')\n\t\t0x7F,0x7F,0x7F,0x5D,0x6B,0x77 // Character 0x7e (126: '~')\n\t);\n\n\nconst int lut[] = int[](\n\t\t0, // Character 0x20 (32: ' ')\n\t\t6, // Character 0x21 (33: '!')\n\t\t12, // Character 0x22 (34: '\"')\n\t\t18, // Character 0x23 (35: '#')\n\t\t24, // Character 0x24 (36: '$')\n\t\t30, // Character 0x25 (37: '%')\n\t\t36, // Character 0x26 (38: '&')\n\t\t42, // Character 0x27 (39: ''')\n\t\t48, // Character 0x28 (40: '(')\n\t\t54, // Character 0x29 (41: ')')\n\t\t60, // Character 0x2a (42: '*')\n\t\t66, // Character 0x2b (43: '+')\n\t\t72, // Character 0x2c (44: ',')\n\t\t78, // Character 0x2d (45: '-')\n\t\t84, // Character 0x2e (46: '.')\n\t\t90, // Character 0x2f (47: '/')\n\t\t96, // Character 0x30 (48: '0')\n\t\t102, // Character 0x31 (49: '1')\n\t\t108, // Character 0x32 (50: '2')\n\t\t114, // Character 0x33 (51: '3')\n\t\t120, // Character 0x34 (52: '4')\n\t\t126, // Character 0x35 (53: '5')\n\t\t132, // Character 0x36 (54: '6')\n\t\t138, // Character 0x37 (55: '7')\n\t\t144, // Character 0x38 (56: '8')\n\t\t150, // Character 0x39 (57: '9')\n\t\t156, // Character 0x3a (58: ':')\n\t\t162, // Character 0x3b (59: ';')\n\t\t168, // Character 0x3c (60: '<')\n\t\t174, // Character 0x3d (61: '=')\n\t\t180, // Character 0x3e (62: '>')\n\t\t186, // Character 0x3f (63: '?')\n\t\t192, // Character 0x40 (64: '@')\n\t\t198, // Character 0x41 (65: 'A')\n\t\t204, // Character 0x42 (66: 'B')\n\t\t210, // Character 0x43 (67: 'C')\n\t\t216, // Character 0x44 (68: 'D')\n\t\t222, // Character 0x45 (69: 'E')\n\t\t228, // Character 0x46 (70: 'F')\n\t\t234, // Character 0x47 (71: 'G')\n\t\t240, // Character 0x48 (72: 'H')\n\t\t246, // Character 0x49 (73: 'I')\n\t\t252, // Character 0x4a (74: 'J')\n\t\t258, // Character 0x4b (75: 'K')\n\t\t264, // Character 0x4c (76: 'L')\n\t\t270, // Character 0x4d (77: 'M')\n\t\t276, // Character 0x4e (78: 'N')\n\t\t282, // Character 0x4f (79: 'O')\n\t\t288, // Character 0x50 (80: 'P')\n\t\t294, // Character 0x51 (81: 'Q')\n\t\t300, // Character 0x52 (82: 'R')\n\t\t306, // Character 0x53 (83: 'S')\n\t\t312, // Character 0x54 (84: 'T')\n\t\t318, // Character 0x55 (85: 'U')\n\t\t324, // Character 0x56 (86: 'V')\n\t\t330, // Character 0x57 (87: 'W')\n\t\t336, // Character 0x58 (88: 'X')\n\t\t342, // Character 0x59 (89: 'Y')\n\t\t348, // Character 0x5a (90: 'Z')\n\t\t354, // Character 0x5b (91: '[')\n\t\t360, // Character 0x5c (92: '\\')\n\t\t366, // Character 0x5d (93: ']')\n\t\t372, // Character 0x5e (94: '^')\n\t\t378, // Character 0x5f (95: '_')\n\t\t384, // Character 0x60 (96: '`')\n\t\t390, // Character 0x61 (97: 'a')\n\t\t396, // Character 0x62 (98: 'b')\n\t\t402, // Character 0x63 (99: 'c')\n\t\t408, // Character 0x64 (100: 'd')\n\t\t414, // Character 0x65 (101: 'e')\n\t\t420, // Character 0x66 (102: 'f')\n\t\t426, // Character 0x67 (103: 'g')\n\t\t432, // Character 0x68 (104: 'h')\n\t\t438, // Character 0x69 (105: 'i')\n\t\t444, // Character 0x6a (106: 'j')\n\t\t450, // Character 0x6b (107: 'k')\n\t\t456, // Character 0x6c (108: 'l')\n\t\t462, // Character 0x6d (109: 'm')\n\t\t468, // Character 0x6e (110: 'n')\n\t\t474, // Character 0x6f (111: 'o')\n\t\t480, // Character 0x70 (112: 'p')\n\t\t486, // Character 0x71 (113: 'q')\n\t\t492, // Character 0x72 (114: 'r')\n\t\t498, // Character 0x73 (115: 's')\n\t\t504, // Character 0x74 (116: 't')\n\t\t510, // Character 0x75 (117: 'u')\n\t\t516, // Character 0x76 (118: 'v')\n\t\t522, // Character 0x77 (119: 'w')\n\t\t528, // Character 0x78 (120: 'x')\n\t\t534, // Character 0x79 (121: 'y')\n\t\t540, // Character 0x7a (122: 'z')\n\t\t546, // Character 0x7b (123: '{')\n\t\t552, // Character 0x7c (124: '|')\n\t\t558, // Character 0x7d (125: '}')\n\t\t564 // Character 0x7e (126: '~')\n\t);\n    \n#define space 32        // ' '\n#define exclaim 33      // '!'\n#define quote 34        // '\"'\n#define hashtag 35      // '#'       \n#define dollar 36       // '$'\n#define perc 37         // '%'\n#define amp 38          // '&'\n#define single_quote 39 // '''\n#define cleft 40        // '('\n#define cright 41       // ')'       \n#define star 42         // '*'\n#define plus 43         // '+'\n#define comma 44        // ','\n#define minus 45        // '-'\n#define period 46       // '.'\n#define fwslash 47      // '/'       \n#define zero 48         // '0'\n#define one 49          // '1'\n#define two 50          // '2'\n#define three 51        // '3'\n#define four 52         // '4'\n#define five 53         // '5'       \n#define size 54         // '6'\n#define seven 55        // '7'\n#define eight 56        // '8'\n#define nine 57         // '9'\n#define colon 58        // ':'\n#define semi_colon 59   // ';'       \n#define lessthan 60     // '<'\n#define equal 61        // '='\n#define greaterthan 62  // '>'\n#define question 63     // '?'\n#define at 64           // '@'\n#define up_A 65         // 'A'\n#define up_B 66         // 'B'       \n#define up_C 67         // 'C'\n#define up_D 68         // 'D'\n#define up_E 69         // 'E'\n#define up_F 70         // 'F'       \n#define up_G 71         // 'G'\n#define up_H 72         // 'H'\n#define up_I 73         // 'I'\n#define up_J 74         // 'J'       \n#define up_K 75         // 'K'\n#define up_L 76         // 'L'\n#define up_M 77         // 'M'\n#define up_N 78         // 'N'       \n#define up_O 79         // 'O'\n#define up_P 80         // 'P'\n#define up_Q 81         // 'Q'\n#define up_R 82         // 'R'       \n#define up_S 83         // 'S'\n#define up_T 84         // 'T'\n#define up_U 85         // 'U'\n#define up_V 86         // 'V'       \n#define up_W 87         // 'W'\n#define up_X 88         // 'X'\n#define up_Y 89         // 'Y'\n#define up_Z 90         // 'Z'       \n#define lbrkt 91        // '['   \n#define bkslash 92      // '\\'\n#define rbrkt 93        // ']'   \n#define hat 94          // '^'   \n#define under 95        // '_'\n#define ting 96         // '`' \n#define lo_a 97         // 'a'\n#define lo_b 98         // 'b'\n#define lo_c 99         // 'c'\n#define lo_d 100        // 'd'       \n#define lo_e 101        // 'e'\n#define lo_f 102        // 'f'\n#define lo_g 103        // 'g'\n#define lo_h 104        // 'h'\n#define lo_i 105        // 'i'\n#define lo_j 106        // 'j'       \n#define lo_k 107        // 'k'\n#define lo_l 108        // 'l'\n#define lo_m 109        // 'm'\n#define lo_n 110        // 'n'\n#define lo_o 111        // 'o'\n#define lo_p 112        // 'p'       \n#define lo_q 113        // 'q'\n#define lo_r 114        // 'r'\n#define lo_s 115        // 's'\n#define lo_t 116        // 't'\n#define lo_u 117        // 'u'\n#define lo_v 118        // 'v'       \n#define lo_w 119        // 'w'\n#define lo_x 120        // 'x'\n#define lo_y 121        // 'y'\n#define lo_z 122        // 'z'\n#define lcurly 123      // '{'\n#define rcurly 124      // '}'\n#define wall 125        // '|'\n#define tilda 126       // '~'\n\nvoid draw_character(inout float text_out, in vec2 location, in vec2 uv, int character)\n{\n    int base = character - 32;\n    \n    ivec2 diff = ivec2(floor(uv * iResolution.xy - location * iResolution.xy));\n    \n    if ( all(greaterThanEqual(diff, ivec2(0))) && all(lessThan(diff, font_size)) ) {\n        ivec2 offset = clamp(diff, ivec2(0), font_size - 1);\n        text_out += float(bool( (data[lut[base] + ((font_size.y - 1) - offset.y)] & (1 << offset.x)) ));   \n    }\n}\n\n#define draw_string(text_out, location, uv, characters) for (int i = 0 ; i < characters.length() ; ++i) { draw_character(text_out, (location * iResolution.xy + vec2(i * (font_size.x), 0)) / iResolution.xy, uv, characters[i]); }\n\nvoid draw_number(inout float text_out, in vec2 location, in vec2 uv, float number)\n{\n    uint ipart = uint(floor(abs(number)));\n    \n    // only care about integer part\n    \n    uint i = 0u;\n    while(0u != ipart) {\n        uint ivalue = (ipart % 10u);\n        ipart = ipart / 10u;\n        \n        draw_character(text_out, (location * iResolution.xy - vec2(i * uint(font_size.x), 0)) / iResolution.xy, uv, int(uint(zero) + ivalue));\n        ++i;\n    }\n}\n\n//Distance to a line segment,\nfloat dfLine(vec2 a, vec2 b, vec2 uv)\n{\n\tvec2 line = b - a;\n\tfloat frac = dot(uv - a,line) / dot(line,line);\n\treturn distance(a + line * clamp(frac, 0.0, 1.0), uv);\n}\n\n//line//\nfloat line(in vec2 a, in vec2 b, in vec2 uv)\n{\n    float d = dfLine(a, b, uv);\n    \n    float hd = fwidth(d) * 0.5f;\n    \n    return smoothstep(GOLDEN_PRECISION, hd, d);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const float scale = 0.12;\n    \n    vec2 uv = fragCoord.xy/iResolution.xy;\n    uv.y *= iResolution.x/iResolution.y;\n    \n    float text = 0.0f;\n    \n    draw_string(text, vec2(0.0f, 1.6f) * scale, uv * scale, int[](lo_f, lo_p, three, two, space, up_P, up_R, up_E, up_C, up_I, up_S, up_I, up_O, up_N));\n    \n    draw_string(text, vec2(0.0f, 1.45f) * scale * 1.5f, uv  * scale * 1.5f, int[](up_H, up_I, up_G, up_H, up_E, up_S, up_T, space, up_N, up_U, up_M, up_B, up_E, up_R));\n    \n    draw_string(text, vec2(0.0f, 1.375f) * scale * 1.5f, uv  * scale * 1.5f, int[](up_W, up_I, up_T, up_H, space, plus, fwslash, minus, one, space, up_R, up_E, up_S, up_O, up_L, up_U, up_T, up_I, up_O, up_N));\n    \n    float pat = mod(iTime, 3.0f);\n    float slide = mix(0.45f, 0.95f, smoothstep(1.0f, 0.0f, abs(sin(iTime))));\n    \n    if (pat < 1.0f) {\n    \n        draw_string(text, vec2(slide, 1.2f) * scale, uv * scale, int[](under));\n    \n    }\n    else if (pat < 1.5f) {\n    \n        draw_string(text, vec2(slide, 1.2f) * scale, uv * scale, int[](ting));\n    \n    }\n    else {\n    \n        draw_string(text, vec2(slide, 1.2f) * scale, uv * scale, int[](tilda));\n    \n    }\n    \n    float last = textureLod(iChannel0, fragCoord.xy/iResolution.xy, 0.0f).a;\n    vec4 process = textureLod(iChannel0, fragCoord.xy/iResolution.xy, 0.0f);\n     \n    float maxi = max(process.x, max(process.y, max(process.z, process.w)));\n    \n    float counter = 0.0f;\n    draw_number(counter, vec2(0.95f, 1.1f) * scale, uv * scale, maxi);\n    \n    float counters = 0.0f;\n    \n    draw_number(counters, vec2(0.95f, 0.75f) * scale, uv * scale, process.y);\n    draw_number(counters, vec2(0.95f, 0.55f) * scale, uv * scale, process.z);\n    draw_number(counters, vec2(0.95f, 0.35f) * scale, uv * scale, process.w);\n    \n    counters = counters * smoothstep(0.0f, 50.0f, 10.0f * maxi / last);\n    \n    text += mix(counters, counter, min(1.0f, iTime * iTime * 0.25f));\n    \n    float amd = 0.0f, nvidia = 0.0f, current = 0.0f;\n      \n    if (iTime > (4.0f * GOLDEN_RATIO)) {\n        // scores\n        float number_of_scores[2] = float[2]( (0.0f), (0.0f) ); \n        uint min_height = uint(4294967295);\n        uint max_height = 0u;\n        for (int i = 0 ; i < high_scores.length() ; ++i) {\n\n            min_height = min(min_height, high_scores[i].x);\n            max_height = max(max_height, high_scores[i].x);\n            \n            number_of_scores[AMD] += float(bool(AMD == high_scores[i].y));\n            number_of_scores[NVIDIA] += float(bool(NVIDIA == high_scores[i].y));\n        }\n\n        float new_high_score_text = 0.0f;\n        if (uint(maxi) > max_height) {\n            max_height = uint(maxi);\n\n            draw_string(new_high_score_text, vec2(0.21f, 0.8f) * scale * 1.5f, uv  * scale * 1.5f, int[](lo_n, lo_e, lo_w, space, lo_h, lo_i, lo_g, lo_h, space, lo_s, lo_c, lo_o, lo_r, lo_e, space, exclaim));\n        }\n        min_height = min(min_height, uint(maxi));\n\n        text += mix(new_high_score_text * triangle_wave(iTime * 4.0f), 0.0f, min(1.0f, iTime * 0.15f));\n\n        vec2 last_plot[2] = vec2[2]( vec2(0, 0.5f), vec2(0, 0.5f) );\n        float score[2] = float[2]( (0.0f), (0.0f) ); \n        for (int i = 0 ; i < high_scores.length() ; ++i) {\n                                                                 // auto fitting graph between min & max scores\n            vec2 plot = vec2(0.0f, \n                             smoothstep(float(min_height), float(max_height), float(high_scores[i].x)));\n            \n            if (AMD == high_scores[i].y) {\n                \n                plot.x += (score[AMD] + 0.005f) / float(number_of_scores[AMD]);\n                amd += line(last_plot[AMD], plot, uv);\n                last_plot[AMD] = plot;\n                ++score[AMD];\n            \n            }\n            else {\n            \n                plot.x += (score[NVIDIA] + 0.005f) / float(number_of_scores[NVIDIA]);\n                nvidia += line(last_plot[NVIDIA], plot, uv);\n                last_plot[NVIDIA] = plot;\n                ++score[NVIDIA];\n            }    \n        }\n        // dont forget the current score!\n        vec2 plot = vec2(max(last_plot[AMD].x, last_plot[NVIDIA].x), \n                         smoothstep(float(min_height), float(max_height), maxi));\n\n        current += line(vec2(0.995f, plot.y), plot, uv);\n\n        // highest and lowest\n        draw_number(text, vec2(0.25f, 1.05f) * scale * 2.0f, uv * scale * 2.0f, float(max_height));\n        draw_number(text, vec2(0.25f, 0.005f) * scale * 2.0f, uv * scale * 2.0f, float(min_height));\n    }\n    \n    fragColor = vec4(text, amd, nvidia, current);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    \n    float start = MAX_FLOAT - fragCoord.y * iResolution.x + fragCoord.x;\n    \n    vec4 last = vec4(MAX_FLOAT);\n    \n    for (float lvl = 10.0f; lvl >= 0.0f; --lvl) {\n    \n       last = min(last, textureLod(iChannel0, uv, lvl));\n    }\n     \n    if (iFrame < 2) {\n        \n        last = vec4(start, start - 1.0f, start - 2.0f, start - 3.0f);\n    }\n\n    vec4 now = last - 1.0f;\n    vec4 diff = abs(now - last);\n    \n    if (any(lessThan(diff, vec4(1.0f)))) {\n    \n        now = vec4(max(last.x, max(last.y, max(last.z, last.w))));\n    }\n    \n    fragColor = now;\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define MAX_FLOAT (4.294967295e9f)\n\n#define GOLDEN_RATIO  (0.61803398874989484820f)\n#define GOLDEN_PRECISION (0.01f * GOLDEN_RATIO)\n\n#define AMD 0u\n#define NVIDIA 1u\n\nconst uvec2 high_scores[] = uvec2[](\n    \n    uvec2( 4294312960u - (4294312960u - 4294162432u), AMD ), // start amd\n    uvec2( 4294312960u, AMD ), // actual amd 290\n    uvec2( 4294312960u - 100000u, AMD ), // placeholder\n    uvec2( 4294312960u - 200000u, AMD ), // placeholder \n    uvec2( 4294312960u - 300000u, AMD ), // placeholder\n    uvec2( 4294312960u - 400000u, AMD ), // placeholder\n    uvec2( 4294312960u - 500000u, AMD ), // placeholder\n    uvec2( 4294312960u - 600000u, AMD ), // placeholder \n    uvec2( 4294312960u - 700000u, AMD ), // placeholder\n    uvec2( 4294312960u - 800000u, AMD ), // placeholder\n    uvec2( 4294312960u - 900000u, AMD ), // placeholder\n    uvec2( 4294312960u - 1000000u, AMD ), // placeholder \n    uvec2( 4294312960u - 1100000u, AMD ), // placeholder\n    uvec2( 4294312960u - 1200000u, AMD ), // placeholder\n    uvec2( 4294312960u - 1300000u, AMD ), // placeholder\n    uvec2( 4294312960u - 1400000u, AMD ), // placeholder \n    uvec2( 4294312960u - 1500000u, AMD ), // placeholder\n    uvec2( 4294312960u - 1600000u, AMD ), // placeholder\n    \n    uvec2( 4294162432u - (4294312960u - 4294162432u), NVIDIA ), // start nvda\n    uvec2( 4294162432u, NVIDIA ),  // actual nvda - 3060\n    uvec2( 4294314752u, NVIDIA ),  // actual nvda - 3060 new driver\n    uvec2( 4294162432u - 200000u, NVIDIA ),  // placeholder\n    uvec2( 4294162432u - 300000u, NVIDIA ),  // placeholder\n    uvec2( 4294162432u - 400000u, NVIDIA ),  // placeholder\n    uvec2( 4294162432u - 500000u, NVIDIA ),  // placeholder\n    uvec2( 4294162432u - 600000u, NVIDIA ),  // placeholder\n    uvec2( 4294162432u - 700000u, NVIDIA ),  // placeholder\n    uvec2( 4294162432u - 800000u, NVIDIA ),  // placeholder\n    uvec2( 4294162432u - 900000u, NVIDIA ),  // placeholder\n    uvec2( 4294162432u - 1000000u, NVIDIA ),  // placeholder\n    uvec2( 4294162432u - 1100000u, NVIDIA ),  // placeholder\n    uvec2( 4294162432u - 1200000u, NVIDIA ),  // placeholder\n    uvec2( 4294162432u - 1300000u, NVIDIA ),  // placeholder\n    uvec2( 4294162432u - 1400000u, NVIDIA ),  // placeholder\n    uvec2( 4294162432u - 1500000u, NVIDIA ),  // placeholder\n    uvec2( 4294162432u - 1600000u, NVIDIA )   // placeholder\n    \n);\n\n\n// triangle wave\nfloat triangle_wave(in float time) \n{\n\treturn(abs(fract(time) * 2.0f - 1.0f));\n}","name":"Common","description":"","type":"common"}]}