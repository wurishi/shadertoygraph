{"ver":"0.1","info":{"id":"X32cRR","date":"1726850076","viewed":27,"name":"pumpkin 2","username":"Efim","description":"pumpkin of halloween","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","noise","sdf","halloween","pumpkin"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\npumpkin\nsdf,raymarching,noise,pumpkin,halloween\npumpkin of halloween\n*/\nfloat hash(float n) {\n    return fract(sin(n) * 437558.5453123);\n}\n\nfloat hash(vec2 p) {\n\treturn fract(1e4 * sin(17.0 * p.x + p.y * 0.1) * (0.1 + abs(sin(p.y * 13.0 + p.x))));\n} \n//\t<https://www.shadertoy.com/view/4dS3Wd>\n//\tBy Morgan McGuire @morgan3d, http://graphicscodex.com\n\n\n\n// This one has non-ideal tiling properties that I'm still tuning\nfloat noise(vec3 x) {\n    const vec3 step = vec3(110, 241, 171);\n\n    vec3 i = floor(x);\n    vec3 f = fract(x);\n\n\t// For performance, compute the base input to a 1D hash from the integer part of the argument and the \n\t// incremental change to the 1D based on the 3D -> 1D wrapping\n    float n = dot(i, step);\n\n    vec3 u = f * f * (3.0 - 2.0 * f);\n    return mix(mix(mix(hash(n + dot(step, vec3(0, 0, 0))), hash(n + dot(step, vec3(1, 0, 0))), u.x), mix(hash(n + dot(step, vec3(0, 1, 0))), hash(n + dot(step, vec3(1, 1, 0))), u.x), u.y), mix(mix(hash(n + dot(step, vec3(0, 0, 1))), hash(n + dot(step, vec3(1, 0, 1))), u.x), mix(hash(n + dot(step, vec3(0, 1, 1))), hash(n + dot(step, vec3(1, 1, 1))), u.x), u.y), u.z);\n}\n\nfloat hash(vec3 p) {\n    return fract(sin(dot(p, vec3(127.1, 311.7, 74.7))) * 43758.5453123);\n}\n\n#define PI  3.14159265359\n#define TAU 6.28318530718\n#define rot(f) mat2(cos(f), -sin(f), sin(f), cos(f))\n\nconst float dist_infin = 10.0;\n#define nn 128\nconst float eps = 0.001;\n\nvec3 getSg(vec3 p, float nseg) {\n    float fi = mod(atan(p.y, p.x), TAU);\n    fi = mod(fi + PI / nseg, TAU);\n    float n = floor(fi / TAU * nseg);\n    p.xy *= rot(-n * TAU / nseg);\n    return p;\n}\n\nfloat sdBox(vec3 p, vec3 b) {\n    vec3 q = abs(p) - b;\n    return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0);\n}\n\nfloat smin_out(float d1, float d2, float k) {\n    float h = clamp(0.5 - 0.5 * (d2 + d1) / k, 0.0, 1.0);\n    return mix(d2, -d1, h) + k * h * (1.0 - h);\n}\n\n\nfloat halloween(vec3 p) {\n    p.yz *= rot(PI / 2.);\n    //p.xy *= rot(iTime*0.3);\n    p.xz *= rot(PI / 8.);\n    float n1 = 14., R = 1.5;\n    float d0 = length(p) - 1.45;\n\n    float fi1 = TAU / n1 + PI / n1, li = PI / 4., r = R * cos(li);//PI/n1\n    vec3 e1p = vec3(r * cos(fi1), r * sin(fi1), R * sin(li));\n    float e1 = length(p - e1p) - .45;\n    //fi1+= 3.*TAU/n1;\n    fi1 = -fi1;\n    e1p = vec3(r * cos(fi1), r * sin(fi1), R * sin(li));\n    float e2 = length(p - e1p) - .45;\n\n    fi1 = 0., li = -PI / 10.;\n    vec3 lip = vec3(r * cos(fi1), r * sin(fi1), R * sin(li));\n    vec3 lv = p - lip;\n\n    float lips = sdBox(lv, vec3(0.9, 1., 0.2));\n\n    p = getSg(p, n1);\n    p.xy *= rot(-PI / n1 * sign(p.y));\n    float d = abs(length(p.xz) - R);\n    d = length(vec2(d, p.y)) - 0.35;\n\n    d = max(d, -d0);\n    d = smin_out(e1, d, 0.1);\n    d = smin_out(e2, d, 0.1);\n    d = smin_out(lips, d, 0.2);\n    \n    return d;\n}\n\nfloat map(vec3 p) {\n    return halloween(p);\n}\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal(in vec3 pos) {\n    const float h = 0.0001; // replace by an appropriate value\n    const vec2 k = vec2(1, -1);\n    return normalize(k.xyy * map(pos + k.xyy * h) +\n        k.yyx * map(pos + k.yyx * h) +\n        k.yxy * map(pos + k.yxy * h) +\n        k.xxx * map(pos + k.xxx * h));\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l - p), r = normalize(vec3(f.z, 0, -f.x)), u = cross(f, r), c = f * z, i = c + uv.x * r + uv.y * u;\n    return normalize(i);\n}\n//https://www.shadertoy.com/view/4td3zj\n// Compact, self-contained version of IQ's 3D value noise function.\nfloat n3D(vec3 p){\n    \n\tconst vec3 s = vec3(7, 157, 113);\n\tvec3 ip = floor(p); p -= ip; \n    vec4 h = vec4(0., s.yz, s.y + s.z) + dot(ip, s);\n    p = p*p*(3. - 2.*p); //p *= p*p*(p*(p * 6. - 15.) + 10.);\n    h = mix(fract(sin(mod(h, 6.2831589))*43758.5453), \n            fract(sin(mod(h + s.x, 6.2831589))*43758.5453), p.x);\n    h.xy = mix(h.xz, h.yw, p.y);\n    return mix(h.x, h.y, p.z); // Range: [0, 1].\n}\n\n// Simple environment mapping. Pass the reflected vector in and create some\n// colored noise with it. The normal is redundant here, but it can be used\n// to pass into a 3D texture mapping function to produce some interesting\n// environmental reflections.\nvec3 envMap(vec3 rd, vec3 sn){\n    \n    vec3 sRd = rd; // Save rd, just for some mixing at the end.\n    \n    // Add a time component, scale, then pass into the noise function.\n    rd.xy -= iTime*.25;\n    rd *= 3.;\n    \n    float c = n3D(rd)*.57 + n3D(rd*2.)*.28 + n3D(rd*4.)*.15; // Noise value.\n    c = smoothstep(.4, 1., c); // Darken and add contast for more of a spotlight look.\n    \n    vec3 col = vec3(c, c*c, c*c*c*c); // Simple, warm coloring.\n    //vec3 col = vec3(min(c*1.5, 1.), pow(c, 2.5), pow(c, 12.)); // More color.\n    \n    // Mix in some more red to tone it down and return.\n    return mix(col, col.yzx, sRd*.25+.25); \n    \n}\n\n#if HW_PERFORMANCE==0\n#define AA 1\n#else\n#define AA 2\n#endif\n\n//#define AA 2\nvec3 col0 = vec3(0.776, 0.525, 0.301);\nvec3 col2 = vec3(0.72, 0.01, 0.01);\nfloat npp = 75.;\nfloat lev = 0.995;\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec3 light = normalize(vec3(0.0, .0, 1.)); //light\n    vec3 light2 = normalize(vec3(0.0, 0.0, -1.)); //light\n    vec2 mo = vec2( -0.3 * iTime, 0.);\n    if  (iMouse.z > 0.0)\n    {\n        mo = (-iResolution.xy + 2.0 * (iMouse.xy)) / iResolution.y;\n        mo *= 1.6;\n    }\n    vec3 ro = vec3(0.0, 0.0, 5.); // camera\n    //camera rotation\n    ro.yz *= rot(mo.y);\n    ro.xz *= rot(-mo.x - 1.7);\n\n    const float fl = 1.5; // focal length\n    float dist = dist_infin;\n\n    vec3 b1 = vec3(0.23529411764705882, 0.4235294117647059, 0.7725490196078432), b2 = vec3(0.3686274509803922, 0.5725490196078431, 0.8941176470588236);\n    vec3 bg = mix(b2, b1, fragCoord.y / iResolution.y);  \n    //antialiasing\n    vec3 tot = vec3(0.0);\n    for(int m = 0; m < AA; m++) for(int n = 0; n < AA; n++) {\n            vec2 o = vec2(float(m), float(n)) / float(AA) - 0.5;\n            vec2 p = (-iResolution.xy + 2.0 * (fragCoord + o)) / iResolution.y;\n            vec3 rd = GetRayDir(p, ro, vec3(0, 0., 0), fl); //ray direction\n            vec3 col = bg * bg; // background  \n\n            //================================sky color========================\n            \n            vec2 pp = floor(p * npp) / npp;\n            float fil = hash(pp);\n            if(fil > lev) {\n                if((length(p - (pp + vec2(0.5 / npp, 0.5 / npp)))) < 0.5 / npp)\n                    col = vec3(1.);\n            }\n\n            //==========================raymatch=============================\n            float td = 0.;\n            vec3 pos = vec3(0.);\n            for(int i = 0; i < nn; i++) {\n                pos = ro + rd * td;\n                float h = map(pos);\n                if(h < eps || td >= dist_infin)\n                    break;\n                td += h;\n            }\n            if(td < dist_infin) {\n\n                vec3 nor = calcNormal(pos);\n                if(dot(pos, nor) < 0.0) {\n                    col = col2;\n                    float t = noise(pos * 4.);\n\t                t = fract(t * 2.);\n                    t = smoothstep(0., 0.01, t - 0.3) * smoothstep(0., 0.01, 0.5 - t);\n                    col *= 1.-t;\n                    col*=envMap(rd, nor)*6.;\n                } else {\n                    col = col0 * col0;\n                    float t = noise(pos);\n                    t = smoothstep(0., 0.01, t - 0.3);\n                    col *= t;\n                }\n\n                vec3 R = reflect(light, nor);\n                float specular = pow(max(abs(dot(R, rd)), 0.), 16.);\n                float difu = abs(dot(nor, light));\n                col = col * (clamp(difu, 0., 1.0) + 0.5) + vec3(1., .7, .4) * specular;\n                float fre = pow(clamp(dot(nor, rd) + 1., .0, 1.), 3.); // Fresnel, for some mild glow.\n                col += vec3(.1, .1, 0.1) * fre; //?\n                col = sqrt(col);\n            }\n            //==========================raymatch=============================\n            tot += col;\n        }\n    tot = tot / float(AA) / float(AA);\n    //tot = tot / float(AA);\n    //antialiasing\n    fragColor = vec4(tot, 1.0);\n}","name":"Image","description":"","type":"image"}]}