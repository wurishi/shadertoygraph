{"ver":"0.1","info":{"id":"Xdsfzj","date":"1497013136","viewed":414,"name":"Seven Nation Army","username":"levonchic","description":"Visualizer developed for \"Seven Nation Army\" track\nEnjoy","likes":4,"published":1,"flags":96,"usePreview":0,"tags":["sound","grayscale","visualizer","soundcloud","multipass"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XtfSzr","filepath":"https://soundcloud.com/davidisham/battle-tested-d-levy-ft-blind","previewfilepath":"https://soundcloud.com/davidisham/battle-tested-d-levy-ft-blind","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Visualizer config: appearance\n#define POW_EXPONENT      10.0         // Set to 1.0, if you want see real value\n#define POW_SCALE         64.0         // Pow scale value. SCALE / pow(...)\n#define POW_SCALE_AUTO                 // Uncomment if you want it to auto calculate scale\n#define POW_SCALE_AUTO_F   0.8         // Auto scale factor\n#define EQ_PERIOD          8           // Visualizer lines period\n#define EQ_WIDTH           2           // Thickness of a single line\n#define EQ_COLOR           vec4(.7)    // Color of the visualizer\n//#define EQ_EMPTY                     // Uncomment to make inner part of visualizer empty\n//#define BLUR                         // Blur effect, suddenly it doesn't work\n#define EQ_RED             vec4(0.025) // Hexagon color\n#define EQ_NRED            vec4(0.025) // -Hexagon color\n#define GRAD_SCL           1.6         // Gradiend scalar\n\n// Visualizer config: math\n#define SOUNDV             .25        // V-coordinate of sound channel mapping     \n\n// Ne trogai\n#ifdef POW_SCALE_AUTO\n\t#undef POW_SCALE\n\t#define POW_SCALE iResolution.y / 2.0 * POW_SCALE_AUTO_F\n#endif\n\n// Global fields, redefine\nvoid renderOscill(out vec4 fragColor, in vec2 fragCoord) {\n    int period = int(fragCoord.x);\n    if(period % EQ_PERIOD >= EQ_WIDTH)\n        return;\n    period /= EQ_PERIOD;\n    \n\tfloat fragc = fragCoord.x / iResolution.x;\n    float frags = texture(iChannel0, vec2(float(period) * float(EQ_PERIOD) / iResolution.x, SOUNDV)).x;\n    \n    float screenY = iResolution.y / 2.0;\n    int fragsv  = int(frags * POW_SCALE / pow(POW_EXPONENT, fragc));\n    fragsv = fragsv < 1 ? 1 : fragsv;\n    \n    if(fragCoord.y < screenY + float(fragsv) && fragCoord.y > screenY - float(fragsv)) \n        #ifdef EQ_EMPTY\n        \tif(fragCoord.y > screenY + float(fragsv - 2) || fragCoord.y < screenY - float(fragsv - 2))\n        \t\tfragColor += EQ_COLOR;\n        #else\n        \tfragColor += EQ_COLOR;\n        #endif\n}\n\nfloat signv(vec2 p1, vec2 p2, vec2 p3) {\n    return (p1.x - p3.x) * (p2.y - p3.y) - (p2.x - p3.x) * (p1.y - p3.y);\n}\n\nbool inTriangle(vec2 p, vec2 pos, float d) {\n    float side2 = d * 0.866025405;\n    vec2 v1 = vec2(pos.x,         pos.y + d);\n    vec2 v2 = vec2(pos.x - side2, pos.y - d / 2.0);\n    vec2 v3 = vec2(pos.x + side2, pos.y - d / 2.0);\n    \n    bool b1, b2, b3;\n    b1 = signv(p, v1, v2) < 0.0;\n    b2 = signv(p, v2, v3) < 0.0;\n    b3 = signv(p, v3, v1) < 0.0;\n    \n    return (b1 == b2) && (b2 == b3);\n}\n\nbool inHexagon(vec2 p, vec2 pos, float d, float a) {\n    float x_ = pos.x - p.x;\n    float y_ = pos.y - p.y;\n    float s_ = sin(a);\n    float c_ = cos(a);\n    float dx = abs(x_ * c_ - y_ * s_)/d;\n    float dy = abs(x_ * s_ + y_ * c_)/d;\n    float ar = 0.25 * sqrt(3.0);\n    return (dy <= ar) && (ar * dx + 0.25 * dy <= 0.5 * ar);\n}\n\nvoid renderBackground(out vec4 fragColor, in vec2 fragCoord) {\n\tfloat grad = 1.0 - length(fragCoord - iResolution.xy / 2.0) / length(iResolution.xy) * GRAD_SCL;\n    fragColor += grad / 3.0;\n\n    float d = 0.33 * iResolution.y;\n\tvec2 center = iResolution.xy / 2.0;\n\n    if(inTriangle(fragCoord, center, d * (0.8 + 0.8 * texture(iChannel0, vec2(0.0)).x))) \n        fragColor -= 0.1;\n    if(inHexagon(fragCoord, center, d, iTime))\n        fragColor += EQ_RED;\n    if(inHexagon(fragCoord, center, d * 2.0, -iTime * 0.5))\n        fragColor -= EQ_NRED;\n    if(inHexagon(fragCoord, center, d * 3.0, iTime  * 0.6))\n        fragColor += EQ_RED;\n    if(inHexagon(fragCoord, center, d * 4.0, -iTime * 0.7))\n        fragColor -= EQ_NRED;\n    if(inHexagon(fragCoord, center, d * 5.0, iTime  * 0.8))\n        fragColor += EQ_RED;\n    if(inHexagon(fragCoord, center, d * 6.0, -iTime * 0.9))\n        fragColor -= EQ_NRED;\n    if(inHexagon(fragCoord, center, d * 7.0, iTime  * 1.0))\n        fragColor += EQ_RED;\n    if(inHexagon(fragCoord, center, d * 8.0, -iTime * 1.1))\n        fragColor -= EQ_NRED;\n}\n\nvoid blur(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor += texture(iChannel1, fragCoord / iResolution.xy) * 0.1;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\tfragColor = vec4(0.0);\n    renderBackground(fragColor, fragCoord);\n    renderOscill(fragColor, fragCoord);\n    \n    #ifdef BLUR\n    \tblur(fragColor, fragCoord);\n    #endif\n}","name":"Buffer A","description":"","type":"buffer"}]}