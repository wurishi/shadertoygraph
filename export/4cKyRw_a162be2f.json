{"ver":"0.1","info":{"id":"4cKyRw","date":"1732057470","viewed":102,"name":"Mushroom that took 2 long 2 make","username":"Zalaxci","description":"i made a mushroom :3 i'm a beginner to glsl & couldn't calculate or even approximate the SDF (distance to polynomial curves) so i tried making a shadow underneath, but it was still too hard and the equation came out to be a messy exponential function","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["cute","shadow","shading","polarcoordinates","mushroom","highlight"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Helper function to find which of the 2 float variables provided is the smallest by absolute value\nfloat absolutelyMin(float a, float b) {\n    return (abs(a) <= abs(b))? a : b;\n}\n// Helper function to get a color vector by providing 1 to 255 rgb values\nvec3 rgb(float r, float g, float b) {\n    return vec3(r, g, b) / 255.0;\n}\n// The polar coordinates (radius and angle rotation) if we were to take the sun as the center (radius 0)\nvec2 polarCoordRelativeToTheSun(vec2 inCoord) {\n    vec2 vectorToTheSun = inCoord - vec2(0.05, 7.0);\n    return vec2(\n        atan(vectorToTheSun.y / vectorToTheSun.x),\n        length(vectorToTheSun)\n    );\n}\n// Since I couldn't make an SDF, this is the vertical distance from the mushroom's border\nfloat mushroomVerticalDistance(vec2 coord) {\n    // For x outside the range of the mushroom, return the absolute value of y (always positive as we're outside the mushroom)\n    if (coord.x <= -1.0 || coord.x >= 1.4) return abs(coord.y);\n    // If x is in the appropriate range, take the signed distance to the top, or the bottom, depending on which is (absolutely) closer\n    return absolutelyMin(\n       -coord.y - 0.13*(coord.x + 1.0)*(coord.x - 1.0)*(coord.x - 1.65), // Bottom boundary polynomial\n        coord.y - 0.12*(coord.x + 1.0)*(coord.x - 1.43)*(coord.x - 5.0) // Top boundary polynomial\n    );\n}\n// ...and this the vertical distance to the mushroom stem\nfloat mushroomStemVerticalDistance(vec2 coord) {\n    // If y is outside the range of the mushroom's stem, return the distance from the bottom or top boundary,\n    // if the point it corresponds to is bellow the stem or above it respectively\n    float lowerBound = -1.8, upperBound = 0.123 * coord.x - 0.205;\n    if (coord.y <= lowerBound || coord.y >= upperBound) return max(coord.y - upperBound, lowerBound - coord.y);\n    // If y in the appropriate range, take the signed distance to the top or bottom (whichever's closest)\n    return absolutelyMin(\n       -coord.y + 8.0 * pow(coord.x + 0.1, 3.0) + 2.0 * (coord.x + 0.1) - 1.0,\n        coord.y - 8.0 * pow(coord.x + 0.5, 3.0) - 2.0 * (coord.x + 0.5) + 1.0\n    );\n}\n// Finally what gives realism to our art piece, the (stupendously silly and complex :3) shadow function\nfloat mushroomShadowValue(vec2 coord) {\n    // If the y coord corresponds to a point within, next to or above (instead of below) the mushroom return\n    if (coord.y > 0.05) return 0.0;\n    // We now take the polar coords relative to the sun, i.e. the angle at which it's pointing to the current point and the distance to it\n    vec2 currentPolarCoord = polarCoordRelativeToTheSun(coord);\n    // Finally, the star of the show, a ridiculous exponential with all sorts of magic numbers I came up off of my head or by trial & error\n    return pow(\n        2.0, // Use 2 as the base since e is not a constant & maybe computers are best at calculating powers of 2.0 (?)\n        21.3 // Start out with a large power to get exponent ~0 for the distance to the sun exactly below the mushroom\n        - 3.0 * currentPolarCoord.y // Then subtract a multiple of the distance to the sun, or the y point of the polar coords,\n                                    // so the shadow's value is close to 1.0 near the mushroom and 0.0 at infinity\n        - 1.0 / pow(abs(currentPolarCoord.x/1.45 - 0.015), 48.0) // Finally, to have no shadow far away from the mushroom\n                                                             // add the inverse of a large power of x,\n                                                             // simulating a step function at the edges of the shadow\n    );\n}\n// After all these math, this function paints the color, breathing life into our beautiful little mushroom\nvec3 mushroomWithShadowColorValue(vec2 coord) {\n    float currentDistToMushroom = mushroomVerticalDistance(coord);\n    if (currentDistToMushroom < 0.0)\n        return currentDistToMushroom > -0.08?\n            // Brown border color\n            rgb(100.0, 65.0, 35.0) :\n            // Red color fill + highlight using the gaussian function\n            rgb(145.0, 25.0, 25.0) + pow(2.0, -distance(coord, vec2(-0.35, 0.5))) * rgb(125.0, 100.0, 100.0);\n    float currentDistToStem = mushroomStemVerticalDistance(coord);\n    if (currentDistToStem < 0.0)\n        return currentDistToStem > -0.25?\n            // Brown border color\n            rgb(100.0, 65.0, 35.0) :\n            // Cool gradient\n            rgb(215.0, 200.0, 180.0) - (5.0 * coord.x - 2.0 * coord.y - 0.4) * rgb(55.0, 80.0, 70.0);\n    // Shadow\n    return vec3(1.0 - 0.6 * mushroomShadowValue(coord));\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Subtract half the page length & height from the x & y coords respectively, so the center is at (0, 0)\n    vec2 signedCoord = fragCoord - (iResolution.xy / 2.0);\n    // ...then divide this by the page diagonal length, to achieve the same look across screen sizes (and multiply by 8.0 to make math easier)\n    vec2 responsiveCoord = 8.0 * signedCoord / length(iResolution.xy);\n    // Finally, draw our masterpiece\n    fragColor = vec4(mushroomWithShadowColorValue(responsiveCoord), 1.0);\n}","name":"Image","description":"","type":"image"}]}