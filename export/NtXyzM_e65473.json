{"ver":"0.1","info":{"id":"NtXyzM","date":"1647621165","viewed":254,"name":"adaptive polar lines","username":"FabriceNeyret2","description":"draw a ~screenspace-constant density of lines \nleft: meridians   right: parallels","likes":13,"published":3,"flags":0,"usePreview":0,"tags":["raytracing","intersection","isolines","hatching","balanced"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// variant of https://shadertoy.com/view/NlfcRM\n\n#define fwidth2(v) length(vec2(dFdx(v),dFdy(v)))\n#define r          mat2(cos(.3*iTime+vec4(0,-1,1,0)*1.5708)) // rotation\n#define LOD(v)   ( n* exp2( round(log2(abs(.5/(v)/n)))) )\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec3 R = iResolution,\n         P = vec3( 2.*u - R.xy, 0) / R.y;                // P on sphere surface (or background)\n    float l = length(P), n=30.;     \n    P.z = sqrt(1.-l*l);\n    P.xy *= r; P.yz *= r;                                // rotations\n    \n    vec2 U = vec2( acos(P.x/sqrt(1.-P.y*P.y)) ,          // polar coords\n                   asin(P.y) ),\n\n         z = LOD( vec2( fwidth2(U.x) , fwidth2(U.y) ) ), // LOD\n         p = fwidth(U) * z;\n         U *= z;\n    n = 2.*u.x/R.x; int i = int(n);                      // side chooser\n    O = l > 1. || abs(n-1.)<.01\n          ? vec4(.5)                                     // background\n          : vec4( abs(cos(U)/(sin(U)*p))[i] );           // lines\n\n    O = sqrt(O);                                         // to sRGB\n}","name":"Image","description":"","type":"image"}]}