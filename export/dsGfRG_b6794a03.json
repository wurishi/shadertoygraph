{"ver":"0.1","info":{"id":"dsGfRG","date":"1698322745","viewed":85,"name":"Tetrahedron (SDF)","username":"TheTurk","description":"Distance function (exact) for a regular tetrahedron.\nOther 3D distance functions:\n[url]https://www.shadertoy.com/playlist/73lfR7[/url]","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["3d","distancefield","sdf","tetrahedron","distance","pyramid","polyhedron","platonic","primitive","regular"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float tetrahedron(vec3 position, float halfSize, float cornerRadius) {\n    float s = halfSize - cornerRadius;\n    position.xz = abs(position.xz);\n    if (dot(position, vec3(-sqrt(2.0), -2.0, sqrt(2.0))) < 0.0) {\n        position = vec3(position.z, -position.y, position.x);\n    }\n    vec3 q = position;\n    float h = q.z * sqrt(2.0) - q.y - s;\n    q.yz -= vec2(-1.0, sqrt(2.0)) / 3.0 * h;\n    float m = q.x + q.z - sqrt(2.0) * s;\n    q -= vec3(3.0, sqrt(2.0), 1.0) / 4.0 * max(m, 0.0);   \n    q = clamp(q, vec3(0.0, -s, 0.0), vec3(sqrt(2.0) * s, s, sqrt(2.0) * s));\n    float d = length(position - q); \n    return (h < 0.0 ? -d : d) - cornerRadius;\n}\n\n// https://www.shadertoy.com/view/3ljcRh\nfloat box(vec3 p, vec3 b, float e) {\n  p = abs(p) - b;\n  vec3 q = abs(p + e) - e;\n  return min(min(\n      length(max(vec3(p.x, q.y, q.z), 0.0)) + min(max(p.x, max(q.y, q.z)), 0.0),\n      length(max(vec3(q.x, p.y, q.z), 0.0)) + min(max(q.x, max(p.y, q.z)), 0.0)),\n      length(max(vec3(q.x, q.y, p.z), 0.0)) + min(max(q.x, max(q.y, p.z)), 0.0));\n}\n\nmat3 lookAtMatrix(vec3 from, vec3 to) {\n    vec3 forward = normalize(to - from);\n    vec3 right = normalize(cross(forward, vec3(0.0, 1.0, 0.0)));\n    vec3 up = cross(right, forward);\n    return mat3(right, up, forward);\n}\n\nmat3 rotationMatrixAxisAngle(vec3 axis, float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    vec3 column1 = axis * axis.x * (1.0 - c) + vec3(c, axis.z * s, -axis.y * s);\n    vec3 column2 = axis * axis.y * (1.0 - c) + vec3(-axis.z * s, c, axis.x * s);\n    vec3 column3 = axis * axis.z * (1.0 - c) + vec3(axis.y * s, -axis.x * s, c);\n    return mat3(column1, column2, column3);\n}\n\nfloat sdf(in vec3 position) { \n    float size = 0.35;\n    float cornerRadius = (cos(iTime - 0.5) + 1.0) * 0.5 * (size * 0.8 - 0.01) + 0.01;\n    float d = tetrahedron(position, size, cornerRadius);\n    if (iMouse.z > 0.0) {\n        position = rotationMatrixAxisAngle(vec3(0.0, 1.0, 0.0), 3.14159 * 0.25) * position;\n        d = min(d, box(position, vec3(size), 0.0) - 0.01);\n    }\n    return d;\n}\n\nvec3 normal(vec3 position) {\n    float epsilon = 0.001;\n    vec3 gradient = vec3(\n        sdf(position + vec3(epsilon, 0, 0)) - sdf(position + vec3(-epsilon, 0, 0)),\n        sdf(position + vec3(0, epsilon, 0)) - sdf(position + vec3(0, -epsilon, 0)),\n        sdf(position + vec3(0, 0, epsilon)) - sdf(position + vec3(0, 0, -epsilon))\n    );\n    return normalize(gradient);\n}\n\nfloat raycast(vec3 rayOrigin, vec3 rayDirection) {\n    int stepCount = 256;\n    float maximumDistance = 5.0;\n    float t = 0.0;\n    for (int i = 0; i < stepCount; i++) {\n        if (t > maximumDistance) {\n            break;\n        }\n        vec3 currentPosition = rayOrigin + rayDirection * t;\n        float d = sdf(currentPosition);\n        if (d < 0.0001) {\n            return t;\n        }\n        t += d;\n    }\n    return 0.0;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\tfloat angle = 0.5 * iTime;\n\tvec3 rayOrigin = vec3(1.0 * cos(angle), 0.4, 1.0 * sin(angle));\n    vec3 targetPosition = vec3(0.0);\n    mat3 cameraTransform = lookAtMatrix(rayOrigin, targetPosition);\n    vec3 result = vec3(0.0);\n    ivec2 sampleCount = ivec2(3.0, 3.0);\n    for (int y = 0; y < sampleCount.y; y++) {\n        for (int x = 0; x < sampleCount.x; x++) {\n            vec2 uv = fragCoord + (vec2(float(x), float(y)) / vec2(sampleCount) - 0.5);\n            uv = uv / iResolution.xy;\n            uv = (uv * 2.0) - 1.0;\n            uv.x *= iResolution.x / iResolution.y;\n            vec3 rayDirection = normalize(vec3(uv, 1.5));\n            rayDirection = cameraTransform * rayDirection;\n            float t = raycast(rayOrigin, rayDirection);\n            vec3 color = vec3(0.0);\n            if (t > 0.0) {\n                // same style that Inigo Quilez uses in his shaders\n                vec3 position = rayOrigin + rayDirection * t;\n                vec3 lightDirection = vec3(0.57735);\n                vec3 n = normal(position);\n                float diffuseAngle = max(dot(n, lightDirection), 0.0);\n                // diffuse\n                color = vec3(0.8, 0.7, 0.5) * diffuseAngle;\n                // ambient\n                color += vec3(0.2, 0.3, 0.4) * ((n.y + 1.0) * 0.5);\n            }\n            // gamma        \n            color = sqrt(color);\n            result += color;\n        }\n    }\n    result /= float(sampleCount.x * sampleCount.y);\n\tfragColor = vec4(result, 1.0);\n}","name":"Image","description":"","type":"image"}]}