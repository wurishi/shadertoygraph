{"ver":"0.1","info":{"id":"slBBWm","date":"1652281443","viewed":45,"name":"origdz1105","username":"yung_peppa","description":"1","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["1"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define myPi 3.141592654f\n#define Eps 1e-8\n#define maxZ 100.0\n\nconst int n = 4;\nvec3 colVec[n] = vec3[n](vec3(0.6, 0.6, 0.9), vec3(0.0, 0.8, 0.7), vec3(0.3, 0.1, 0.6), vec3(0.5, 0.7, 0.9));\nvec3 BGcol = vec3(1.0, 1.0,1.0);\n//float zVec[n] = float[n](3.0, 2.0, 1.0);\n\nint sizes[n] = int[n](3, 5, 4,4), inds[n] = int[n](0, 3, 8,12); const int m = 16;\nvec2 polygonsXY[m]; float polygonsZ[m];\n\nvoid initPolygons(out vec2 polygonsXY[m], out float polygonsZ[m], in float time){\n\n// 0 — triangle\npolygonsXY[0] = vec2(0.0, 0.0); polygonsZ[0] = 0.1;\npolygonsXY[1] = vec2(0.99, 0.5); polygonsZ[1] = 0.1;\npolygonsXY[2] = vec2(0.99, 0.8); polygonsZ[2] = 0.1;\n\n\n// 1 — triangle\npolygonsXY[3] = vec2(0.3, 0.2); polygonsZ[3] = 0.11;\npolygonsXY[4] = vec2(0.5, 0.1); polygonsZ[4] = 0.13;\npolygonsXY[5] = vec2(0.7, 0.2); polygonsZ[5] = 0.11;\npolygonsXY[6] = vec2(0.55, 0.6); polygonsZ[6] = 0.09;\npolygonsXY[7] = vec2(0.45, 0.6); polygonsZ[7] = 0.09;\n\n// 2 — rotated square\nfloat w = 2.0;\nvec3 center = vec3(0.6*abs(0.5+0.5*sin(time)), 0.5, 0.1 + 0.05*sin(time*w)); float r = 0.3;\nint i; float j =0.0, phi = myPi/6.0;\nfloat ang = 2.0*myPi/4.0;\nvec3 tmpVec;\nmat3 rot = mat3(vec3(cos(phi), 0.0, sin(phi)), vec3(0.0, 1.0, 0.0), vec3(-sin(phi),0.0, cos(phi)) );\nfor (i = 8; i < 12; i++){\ntmpVec = rot*(r*vec3(cos(j*ang + time), sin(j*ang + time), 0.0));\npolygonsXY[i] = tmpVec.xy + center.xy;\npolygonsZ[i] = tmpVec.z + center.z;\nj = j + 1.0;\n}\n\n// 3 — rotated square\n\ncenter = vec3(0.25, 0.7, 0.1 + 0.05*sin(time*w)); r = 0.1;\nj =0.0; phi = myPi/3.0;\nrot = mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, cos(phi), sin(phi)), vec3(0.0, -sin(phi), cos(phi)) );\nfor (i = 12; i < 16; i++){\ntmpVec = rot*(r*vec3(cos(j*ang + time), sin(j*ang + time), 0.0));\npolygonsXY[i] = tmpVec.xy + center.xy;\npolygonsZ[i] = tmpVec.z + center.z;\nj = j + 1.0;\n}\n\n}\nvoid initColors(out vec3 colVec[n], float time){\n\n    colVec[0] = vec3(0.5*abs(0.1+cos(time)), 0.6*abs(0.5+0.5*sin(time)), 0.2);\n    colVec[1] = vec3(0.1+0.8*abs(cos(time)), 0.1+0.8*abs(cos(time)), 0.4);\n\n    return;\n}\n\n\nint leftTurn(in vec2 a, in vec2 b, in vec2 c)\n{\nfloat tmp = (c.x - a.x)*(b.y - a.y) - (c.y - a.y)*(b.x - a.x);\nif (abs(tmp) < Eps)\nreturn 0;\nelse\nreturn tmp > 0.0 ? 1: -1;\n}\n\nbool inPolygon(in int ind0, in int size, in vec2 vert[m], in vec2 p) // vertices in counter clockwise order\n{\nbool res = leftTurn(vert[ind0 + size-1], vert[ind0], p) <= 0; int i = ind0;\nwhile(res && (i < ind0 + size -1))\n{\nres = res && (leftTurn(vert[i], vert[i+1], p) <= 0); i++;\n}\nreturn res;\n}\n\nfloat zInPlane(in vec3 a, in vec3 b, in vec3 c, in vec2 p) // z coordinate for (x,y) point of a plane (a-b, c-b)\n{\nvec3 nrm = cross(a-b, c-b);\n//float D = - dot(nrm, b);\nif (abs(nrm.z) < Eps) return a.z;\nelse return (dot(nrm, b) - nrm.x*p.x - nrm.y*p.y)/nrm.z;\n}\n\n// vec3 normalize(vec3), vec3 cross(vec3, vec3) are predefined\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n// Normalized pixel coordinates (from 0 to 1)\nvec2 uv = fragCoord/iResolution.xy;\nfloat time = iTime, tmp; //iTime;\ninitPolygons(polygonsXY, polygonsZ, time);\ninitColors(colVec, time);\nvec3 col = BGcol; float z = maxZ;\nint i;\nfor (i =0; i < n; i++){\nif ( inPolygon(inds[i], sizes[i], polygonsXY, uv) ){\ntmp = zInPlane(vec3(polygonsXY[inds[i]].x, polygonsXY[inds[i]].y, polygonsZ[inds[i]]), \\\nvec3(polygonsXY[inds[i]+1].x, polygonsXY[inds[i]+1].y, polygonsZ[inds[i]+1]), \\\nvec3(polygonsXY[inds[i]+2].x, polygonsXY[inds[i]+2].y, polygonsZ[inds[i]+2]), uv);\nif (tmp < z){\nz = tmp; col = colVec[i];\n}\n}\n}\n\n// Output to screen\nfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}