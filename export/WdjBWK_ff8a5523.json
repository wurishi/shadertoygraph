{"ver":"0.1","info":{"id":"WdjBWK","date":"1590857458","viewed":158,"name":"lightning strike 2","username":"acutmore","description":"2nd attempt at lightning","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["lightning"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// Distance from p to ab with bias\nfloat sdLine(in vec2 p,in vec2 a, in vec2 b, in float aBias, in float bBias)\n{\n    vec2 origin = a;    \n    vec2 p2 = p-origin;\n    vec2 b2 = b-origin;\n\n\tfloat lineRatio = dot(p2, b2)/dot(b2, b2);\n    lineRatio = clamp(lineRatio, 0., 1.);\n\n    vec2 pointOnLine = b2*lineRatio;\n    return length(p2 - pointOnLine) - mix(aBias, bBias, lineRatio);\n}\n\n// Distance from p to ab\nfloat sdLine(in vec2 p,in vec2 a, in vec2 b)\n{\n    return sdLine(p, a, b, 0.0, 0.0);\n}\n\n// Randomness from https://www.shadertoy.com/view/tsf3Dn\nint xorshift(in int value) {\n    // Xorshift*32\n    // Based on George Marsaglia's work: http://www.jstatsoft.org/v08/i14/paper\n    value ^= value << 13;\n    value ^= value >> 17;\n    value ^= value << 5;\n    return value;\n}\n\nint seed = 0;\n\nint nextInt() {\n    seed = xorshift(seed);\n    return seed;\n}\n\n// Main\n\nconst vec2 lineStart = vec2(0.5, 1.0);\nconst float lineEndX = 0.5;\nconst float height = 0.9;\nconst int numberOfSegments = 5;\nconst float startingWidth = 0.01;\nconst float widthReduction = startingWidth / float(numberOfSegments);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // setup randomness for frame\n    seed = int(floor(iTime * 10.0));\n\n    // Scaled pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 linePoint = lineStart;\n\n    float brightness = 0.0;\n\n    float lineWidthModifier = 0.000;\n\n    for (int i = 0; i < numberOfSegments; i++) {\n      // 0, 1, 2, or 3\n      int stage = nextInt() % 4;\n      vec2 a = linePoint;\n      vec2 b = vec2(lineEndX, a.y - (height / float(numberOfSegments)));\n      if (i != numberOfSegments - 1) {\n        b.x -= 0.1;\n        b.x += 0.05 * float(stage);\n      }\n      float aBias = lineWidthModifier;\n      float bBias = lineWidthModifier - widthReduction;\n      float dist = sdLine(uv, a, b, aBias, bBias);\n      brightness += 1. - step(0.01, dist);\n\n      // pass end state of line segment to use as start as next line segment\n      linePoint = b;\n      lineWidthModifier = bBias;\n    }\n\n    vec3 colour = vec3(brightness);\n\n    // Output to screen\n    fragColor = vec4(colour,1.0);\n}","name":"Image","description":"","type":"image"}]}