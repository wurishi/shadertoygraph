{"ver":"0.1","info":{"id":"WdsSWB","date":"1552467236","viewed":121,"name":"Practice (Menger Sponge ?)","username":"mochi","description":"Raymarching practice.\nReference: \nhttps://www.shadertoy.com/view/Xds3zN\nhttps://iquilezles.org/articles/menger/menger.htm\n","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 map(in vec3 p)\n{\n    p.y  -= 1.0;\n    \n    // https://iquilezles.org/articles/menger\n   float d = sdBox(p,vec3(1.0));\n\n   float s = 1.0;\n   for( int m=0; m<int(mod(iTime, 5.0)); m++ )\n   {\n      vec3 a = mod( p*s, 2.0 )-1.0;\n      s *= 3.0;\n      vec3 r = abs(1.0 - 3.0*abs(a));\n\n      float da = max(r.x,r.y);\n      float db = max(r.y,r.z);\n      float dc = max(r.z,r.x);\n      float c = (min(da,min(db,dc))-1.0)/s;\n\n      if( c>d )\n      {\n          d = c;\n       }\n   }\n\n   return vec2(d, 46.0);\n}\n\n// -------------------------------------------------------\n// https://iquilezles.org/articles/rmshadows\nfloat calcSoftshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n    // bounding volume\n    float tp = (0.8-ro.y)/rd.y; \n    if( tp>0.0 ) tmax = min( tmax, tp );\n\n    float res = 1.0;\n    float t = mint;\n    for( int i=0; i<16; i++ )\n    {\n\t\tfloat h = map( ro + rd*t ).x;\n        res = min( res, 8.0*h/t );\n        t += clamp( h, 0.02, 0.10 );\n        if( res<0.005 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal( in vec3 pos )\n{\n    vec2 e = vec2(1.0,-1.0)*0.5773*0.0005;\n    return normalize( e.xyy*map( pos + e.xyy ).x + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx ).x + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy ).x + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx ).x );\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 ) * (0.5+0.5*nor.y);\n}\n// -------------------------------------------------------\n\nvec2 castRay(in vec3 ro, in vec3 rd)\n{\n    vec2 res = vec2(-1.0, -1.0);\n    float tmin = 1.0;\n    float tmax = 20.0;\n    \n    // floor\n    float tp = (0.0-ro.y)/rd.y;\n    if( tp>0.0 )\n    {\n        tmax = min( tmax, tp );\n        res = vec2( tp, 1.0 );\n    }\n    \n    // primitive\n    float t = tmin;\n    for(int i =0; i<64 && t< tmax; ++i)\n    {\n        vec2 h = map(ro + rd*t);\n        if(abs(h.x) < 0.0001*t) \n        {\n            res = vec2(t, h.y);\n            break;\n        }\n        t+=h.x;\n    }\n    \n    return res;\n}\n\nvec3 render(in vec3 ro, in vec3 rd)\n{\n    vec3 col = vec3(0.6) +rd.y *0.8;\n    vec2 res = castRay(ro, rd);\n    float t = res.x;\n    float m = res.y;\n    \n    if(m>0.0)\n    {\n        vec3 pos = ro + t*rd;\n        vec3 nor = vec3(0.0, 1.0, 0.0);\n        vec3 ref = reflect(rd, nor);\n        \n        // material \n        col = 0.45 + 0.35*sin( vec3(0.05,0.08,0.10)*(m-1.0) );\n        if(m<1.5){\n        \tcol = vec3(0.45);\n        \tfloat cgb = checkersGradBox(1.0*pos.xz);\n        \tcol = 0.3 * cgb *vec3(0.1);\n        }\n                \n        // lighting\n        float occ = calcAO( pos, nor );\n\t\tvec3 lig = normalize( vec3(0.2, 0.7, 0.5) );\n        vec3 hal = normalize( lig-rd );\n\t\tfloat amb = clamp( 0.5+0.5*nor.y, 0.0, 1.0 );\n        float dif = clamp( dot( nor, lig ), 0.0, 1.0 );\n        float bac = clamp( dot( nor, normalize(vec3(-lig.x,0.0,-lig.z))), 0.0, 1.0 )*clamp( 1.0-pos.y,0.0,1.0);\n        float dom = smoothstep( -0.2, 0.2, ref.y );\n        float fre = pow( clamp(1.0+dot(nor,rd),0.0,1.0), 2.0 );\n         \n        dif *= calcSoftshadow( pos, lig, 0.02, 2.5 );\n        dom *= calcSoftshadow( pos, ref, 0.02, 2.5 );\n\n\t\tfloat spe = pow( clamp( dot( nor, hal ), 0.0, 1.0 ),16.0)*\n                    dif *\n                    (0.04 + 0.96*pow( clamp(1.0+dot(hal,rd),0.0,1.0), 5.0 ));\n\n\t\tvec3 lin = vec3(0.0);\n        lin += 1.40*dif*vec3(1.00,0.80,0.55);\n        lin += 0.20*amb*vec3(0.40,0.60,1.00)*occ;\n        lin += 0.40*dom*vec3(0.40,0.60,1.00)*occ;\n        lin += 0.50*bac*vec3(0.25,0.25,0.25)*occ;\n        lin += 0.25*fre*vec3(1.00,1.00,1.00)*occ;\n\t\tcol = col*lin;\n\t\tcol += 9.00*spe*vec3(1.00,0.90,0.70);\n\n    \tcol = mix( col, vec3(0.8,0.9,1.0), 1.0-exp( -0.0002*t*t*t ) );\n    }\n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 p = 2.0*uv -1.0;\n    p.x *= iResolution.x / iResolution.y;\n    \n    vec2 mo = iMouse.xy / iResolution.xy;\n    float time = 5.0*iTime;\n    \n    // camera\n    vec3 ro = vec3(4.6*cos(0.1*time + 6.0*mo.x), \n                   \t\t\t    3.0 + 2.0*mo.y, \n                   \t\t\t\t0.5 + 4.6*sin(0.1*time + 6.0*mo.x) );\n    vec3 ta = vec3(0.0, 0.5, 0.0);\n    \n    // camera-to-world transformation\n    mat3 ca = setCamera(ro, ta, 0.0);\n    \n    // ray direction\n    vec3 rd = ca * normalize(vec3(p.xy, 2.0));\n    \n    // render\n    vec3 col = render(ro, rd);\n       \n    // tonemap, gamma\n    col *= 1.0 / (max(max(col.r, col.g), col.b) + 1.0);\n    col = pow(col, vec3(0.4545));\n    \n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// -------------------------------------------------------\n// Distance Functions; https://iquilezles.org/articles/distfunctions\n\n// Primitives\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return length(max(d,0.0))\n         + min(max(d.x,max(d.y,d.z)),0.0); // remove this line for an only partially signed sdf \n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n    return length( vec2(length(p.xz)-t.x,p.y) )-t.y;\n}\n\n// Operations\nvec2 opU( vec2 d1, vec2 d2 )\n{\n\treturn (d1.x<d2.x) ? d1 : d2;\n}\n\nvec3 opTwist( vec3 p )\n{\n    float  c = cos(10.0*p.y+10.0);\n    float  s = sin(10.0*p.y+10.0);\n    mat2   m = mat2(c,-s,s,c);\n    return vec3(m*p.xz,p.y);\n}\n\n// -------------------------------------------------------\n\n// -------------------------------------------------------\n// https://iquilezles.org/articles/checkerfiltering\nfloat checkersGradBox( in vec2 p )\n{\n    // filter kernel\n    vec2 w = fwidth(p) + 0.001;\n    // analytical integral (box filter)\n    vec2 i = 2.0*(abs(fract((p-0.5*w)*0.5)-0.5)-abs(fract((p+0.5*w)*0.5)-0.5))/w;\n    // xor pattern\n    return 0.5 - 0.5*i.x*i.y;                  \n}\n// -------------------------------------------------------\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n    vec3 cw = normalize(ta-ro);\n    vec3 cp = vec3(sin(cr), cos(cr),0.0);\n    vec3 cu = normalize( cross(cw,cp) );\n    vec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}","name":"Common","description":"","type":"common"}]}