{"ver":"0.1","info":{"id":"lc3XzB","date":"1714066631","viewed":51,"name":"Star SDF Primitive","username":"Nikio","description":"It's a star. Made by union of three convex polyhedra.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","sdf","star","pimitive"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Wr - win ratio\n// Cp - cam pos\n// Cn - cam normal\n// Cl - cam limit\n// U  - normalized frag coords\n// P  - sample point\n// d  - dist to boundary\n// e  - epsilon\n// Sd - sun dir\n// k  - star thickness\n// h  - star size\nconst int max_steps = 100;\nconst vec3 sky_1 = vec3(0.4823,0.7411,0.9411);\nconst vec3 sky_2 = vec3(0.9607,0.8823,0.7019);\nconst vec3 sky_3 = vec3(1.0058,0.9529,0.7941);\nconst vec3 smoke = vec3(0.1058,0.1254,0.1450);\nconst float e = 0.0001;\nconst float Cl = 20.0;\nfloat flat_step(float edge0,float edge1,float x) {\n    return clamp((x-edge0)/(edge1-edge0),0.0,1.0);\n}\nvec3 sky_color(vec2 U) {\n    return mix(mix(sky_3,\n                   sky_2,\n                   clamp(flat_step(0.0,0.2,U.y),0.0,1.0)),\n               sky_1,\n               clamp(flat_step(0.2,1.0,U.y),0.0,1.0));\n}\nfloat star_sdf(vec3 p,float k,float h) {\n        vec3 c_fwd = p-vec3(0,0,h);\n        vec3 c_bwd = p+vec3(0,0,h);\n        float face_fwd0 = dot(c_fwd,normalize(vec3(cos(radians(0.0)),sin(radians(0.0)),k)));\n        float face_fwd1 = dot(c_fwd,normalize(vec3(cos(radians(216.0)),sin(radians(216.0)),k)));\n        float face_fwd2 = dot(c_fwd,normalize(vec3(cos(radians(72.0)),sin(radians(72.0)),k)));\n        float face_fwd3 = dot(c_fwd,normalize(vec3(cos(radians(288.0)),sin(radians(288.0)),k)));\n        float face_fwd4 = dot(c_fwd,normalize(vec3(cos(radians(144.0)),sin(radians(144.0)),k)));\n        float face_bwd0 = dot(c_bwd,normalize(vec3(cos(radians(0.0)),sin(radians(0.0)),-k)));\n        float face_bwd1 = dot(c_bwd,normalize(vec3(cos(radians(216.0)),sin(radians(216.0)),-k)));\n        float face_bwd2 = dot(c_bwd,normalize(vec3(cos(radians(72.0)),sin(radians(72.0)),-k)));\n        float face_bwd3 = dot(c_bwd,normalize(vec3(cos(radians(288.0)),sin(radians(288.0)),-k)));\n        float face_bwd4 = dot(c_bwd,normalize(vec3(cos(radians(144.0)),sin(radians(144.0)),-k)));\n        float convex_fwd0 = max(max(face_fwd0,face_fwd1),face_fwd4);\n        float convex_fwd1 = max(max(face_fwd1,face_fwd2),face_fwd3);\n        float convex_fwd2 = max(max(face_fwd2,face_fwd3),face_fwd4);\n        float convex_bwd0 = max(max(face_bwd0,face_bwd1),face_bwd4);\n        float convex_bwd1 = max(max(face_bwd1,face_bwd2),face_bwd3);\n        float convex_bwd2 = max(max(face_bwd2,face_bwd3),face_bwd4);\n        return max(min(min(convex_fwd0,convex_fwd1),convex_fwd2),min(min(convex_bwd0,convex_bwd1),convex_bwd2));\n}\nfloat volume_sdf(vec3 P) {\n    return star_sdf(P, 1.0, 0.15);\n}\nvec3 normal(vec3 P) {\n\treturn normalize(vec3(\n\t\tvolume_sdf(vec3(P.x+e,P.yz))-volume_sdf(vec3(P.x-e,P.yz)),\n\t\tvolume_sdf(vec3(P.x,P.y+e,P.z))-volume_sdf(vec3(P.x,P.y-e,P.z)),\n\t\tvolume_sdf(vec3(P.xy,P.z+e))-volume_sdf(vec3(P.xy,P.z-e))));\n}\nvec3 phong(vec3 P,vec3 Cp) {\n    vec3 Sd = normalize(vec3(sin(iTime),1.0,cos(iTime)));\n\tvec3 ambi = smoke;\n    vec3 spec = sky_3;\n\tvec3 Normal = normal(P);\n\tvec3 diff = sky_2*max(dot(Normal,Sd),0.0);\n\tvec3 Reflect = normalize(reflect(Sd,Normal));\n\tvec3 Ray = normalize(P-Cp);\n\tfloat spec_str = pow(max(dot(Ray,Reflect),0.0),16.0);\n\treturn mix(ambi+diff,spec,spec_str);\n}\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord) {\n    float Wr = iResolution.x / iResolution.y;\n    vec2 S = 2.0 * (fragCoord.xy / iResolution.xy) - vec2(1.0, 1.0);\n    vec2 U = fragCoord.xy / iResolution.xy;\n    S.x *= Wr;\n    vec3 Cp = vec3(0.0,0.0,-2.4);\n    vec3 Cn = normalize(vec3(S,4.0));\n    float L = 0.0;\n    for(int i = 0; i < max_steps; i += 1) {\n        vec3 P = Cp + Cn * L;\n        float d = volume_sdf(P);\n        if(d < e) {\n            fragColor.xyz = phong(P, Cp);\n            return;\n        }\n        L += d;\n        if(L >= Cl) {\n            fragColor.xyz = sky_color(U);\n            return;\n        }\n    }\n}","name":"Image","description":"","type":"image"}]}