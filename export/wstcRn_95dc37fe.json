{"ver":"0.1","info":{"id":"wstcRn","date":"1600309398","viewed":54,"name":"happy_Shading","username":"JiexiangScientist","description":"happy_Shading","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n\t*沈捷翔创建-2020/9/17\n\t*最后更新：2020/9/17\n\t*联系: 752523247\n*/\n\n//封装\"画圆\" 传入（二维笛卡尔坐标系，位置移动信息，圆形半径，抗锯齿模糊半径）\nfloat Circle(vec2 uv,vec2 p,float r,float blur)\n{\n    //求出向量的模\n    float d = length(uv-p);\n    \n    //将坐标映射成颜色\n   // float c = d;\n    \n    //通过向量长度变成两色\n   // float r = .3;\n    /*\n\tif(d<.3) \n    {c=1.;}else{c=0.;}\n\t*/\n    \n    //创建一个差值让圆圆滑，消除锯齿\n    //一个四维向量的差值（0001~1111）\n    float c= smoothstep(r,r-blur,d);\n    \n    return c;\n}\n\n//封装\"数值动画\"传入（速度，基数，缩放范围）\nfloat animat(float speed,float orgSize, float scaleSize)\n{\n    float t = iTime*speed;\n    float s = orgSize;\n    s+=cos(t)*scaleSize;\n    return s;\n}\n\n//封装\"脸（坐标）\nfloat Face(vec2 uv)\n{\n    //鼻孔：\n    \n    //圆的缩放值\n    // vec2 p = vec2(.2,-.1);\n    \n    //调用“画圆”画一个大圆\n    float c = Circle(uv,vec2(.0),.4,.02);\n    //调用“画圆”在大圆里扣出一个小圆\n    \n    float s = animat(3.1,.03,0.009);\n    c -= Circle(uv, vec2(.1, -.03), s, .01);\n    c -= Circle(uv, vec2(.2, -.03), s, .01);\n    \n    //耳朵\n   \tc += Circle(uv, vec2(-.3, .33), .13, .01);\n    c += Circle(uv, vec2(.26, .31), .09, .02);\n    \n    //嘴：\n    s = animat(-3.1,.1,0.01);\n\tfloat mouth = Circle(vec2(uv.x/.8,uv.y), vec2(0.1,0.), .3, .02);\n\n\tmouth -= Circle(vec2(uv.x,uv.y), vec2(0.1,s), .25, .02);\n\t\n    //左眼：\n    float rightEye = Circle(vec2(uv.x,uv.y), vec2(-0.04,0.1), .063, .012);\n    \n    \n    //右眼：\n    float leftEye = Circle(vec2(uv.x,uv.y), vec2(0.26,0.1), .05, .02);\n\n\tleftEye -= Circle(vec2(uv.x,uv.y), vec2(0.26,0.07), .05, .02);\n    \n\t\n    c -= mouth+leftEye+rightEye;\n    return c;\n}\n\n//封装\"笑脸动画（坐标，位置，缩放）\nfloat Smiley(vec2 uv, vec2 p, float size)\n{\n    uv -= p;\n    uv /= size;\n    \n    float mask =Face(uv);\n\n    return mask;\n}\n\n//渲染结果\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //uv做归一化处理\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    //把差值移到屏幕中间\n\tuv-=.5;\n    \n    //归一化圆形的比例\n    uv.x=uv.x*iResolution.x/iResolution.y;\n    \n    \n    \n    //引入时间参数\n    float t = iTime;\n    vec2 p = vec2(sin(t)*.1, cos(t)*0.1);\n    \n    float move = Smiley(uv, p, .63);\n    \n    vec3 col = vec3(0.,1.,1.0)*move;\n     \n    \n    //输出\n    fragColor = vec4(vec3(col),1.0);\n    \n    \n\n}\n","name":"Image","description":"","type":"image"}]}