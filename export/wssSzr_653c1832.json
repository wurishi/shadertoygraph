{"ver":"0.1","info":{"id":"wssSzr","date":"1550525268","viewed":182,"name":"Particles study","username":"murchanskii","description":"I was looking at particle implementations and found an incredible simple function by laserdog: https://www.shadertoy.com/view/MsGBz3\nI am looking forward to experiment with it, so this is just the beginning :)","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["particles","rainbow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 particleColor(vec2 uv, vec2 pos, float radius, vec3 color) {\n\tfloat dist = radius / distance(uv, pos);\n    return color * pow(dist, 3.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = 2.0 * fragCoord/iResolution.xy - 1.0;\n    \n    vec4 col = vec4(vec3(0.0), 1.0);\n    \n    vec3 lut = vec3(1.0);\n    \n    float n_particles = 126.0;\n    for (float i = 0.0; i < n_particles; ++i) {\n        float t =  i * 0.05;\n    \tvec2 pos = vec2(16.0 * pow(sin(t), 3.0), \n                        13.0 * cos(t) - 5.0 * cos(2.0 * t) - 2.0 * cos(3.0 * t) - cos(4.0 * t));//pow((y * y + x * x - 1.0), 3.0) - x * x * y * y * y);\n        pos *= 0.06;\n        pos.y *= 1.1;\n        pos.y += 0.15;\n        lut = vec3(abs(sin(t + 3.0 * 3.1415 / 4.0)), \n               abs(sin(t)), abs(cos(t)));\n        \n        col.rgb += particleColor(uv, \n                                 pos, \n                                 0.02 * (0.5 + abs(sin(4.0*iTime * 0.2)*0.5)),// * (n_particles - i), \n                                 lut);\n    }\n        \n    // Output to screen\n    fragColor = col;\n}","name":"Image","description":"","type":"image"}]}