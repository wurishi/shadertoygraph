{"ver":"0.1","info":{"id":"mlcXDn","date":"1685291936","viewed":48,"name":"TestSphereRaymarch","username":"Slaesh","description":"Testing","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdSphere(vec3 pos, float radius, vec3 spherePos) \n{\n    return length(pos - spherePos) - radius;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 posNormalized = fragCoord / iResolution.y;\n    float xyRatio = iResolution.x / iResolution.y;\n    \n    vec3 ro = vec3(0.5 * xyRatio, 0.5, -5.0);\n    vec3 lightSource = vec3(2.0, 6.0, 4.0);\n    \n    float minDist = 10000.0;\n    vec3 marchDir = vec3(0.0, 0.0, 1.0);\n    vec3 pixelPos = vec3(posNormalized.x, posNormalized.y, 0);\n    \n    float posX = sin(iTime);\n    float posY = cos(iTime);\n    float posZ = sin(iTime);\n    \n    vec3 spherePos = vec3(posX * xyRatio, posY, posZ + 3.0);\n    vec3 spherePos2 = vec3(posX * xyRatio + 2.0, posY, posZ + 7.0);\n    vec3 spherePos3 = vec3(posX * xyRatio + 5.0, posY, posZ + 10.0);\n    \n    vec3 dir = normalize(pixelPos - ro);\n    \n    vec3 samplingPos = ro;\n    float distanceTravelled = 0.0;\n    float light = 0.0;\n    float sphereRadius = 2.0 + sin(pixelPos.x * 10.0 + 155.0) + cos(pixelPos.y * 10.0 + 100.0);\n    float sphereRadius2 = 2.0 + sin(pixelPos.x * 20.0 + 157.0) + cos(pixelPos.y * 17.0 + 100.0);\n    float sphereRadius3 = 2.0 + sin(pixelPos.x * 15.0 + 150.0) + cos(pixelPos.y * 14.0 + 100.0);\n    \n    for(int i = 0; i < 512; i++)\n    {\n        minDist = \n            min(\n                min(sdSphere(samplingPos, sphereRadius, spherePos),\n                   sdSphere(samplingPos, sphereRadius2, spherePos2)),\n                   sdSphere(samplingPos, sphereRadius3, spherePos3));\n                      \n        distanceTravelled += minDist;\n        samplingPos += dir * minDist;\n        \n        if (minDist < 0.01)\n        {\n            vec3 toLight = normalize(lightSource - samplingPos);\n            vec3 toLightSorceStep = samplingPos + toLight * 0.1;\n            light = \n                min(\n                    min(sdSphere(toLightSorceStep, sphereRadius, spherePos),\n                        sdSphere(toLightSorceStep, sphereRadius2, spherePos2)),\n                    sdSphere(toLightSorceStep, sphereRadius3, spherePos3));\n            \n            light *= 10.0;\n            break;\n        }\n    }\n    \n    vec4 color1 = vec4(0.0, 0.34, 0.85, 1.0);\n    vec4 color2 = vec4(0.0, 0.0, 0.0, 0.0);\n    \n    vec4 colorRes = mix(color2, color1, light);\n    \n    fragColor = colorRes;\n}\n","name":"Image","description":"","type":"image"}]}