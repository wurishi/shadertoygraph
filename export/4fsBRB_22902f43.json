{"ver":"0.1","info":{"id":"4fsBRB","date":"1723931225","viewed":54,"name":"LiveArchive #08","username":"Flopine","description":"I'm digging up old shaders made during VJ sessions to archive them here! \n\nChipwrecked 2022 for Polar Birds","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","music","isometric","bouncy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGzn","filepath":"/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3","previewfilepath":"/media/ap/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan, slerpy, wwrighter \n// BigWings, FabriceNeyret and Blackle for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  \n// https://twitter.com/CookieDemoparty\n\n// Chipwrecked 2022 for Polar Birds\n\n\n#define PI acos(-1.)\n#define TAU (2.*PI)\n#define hr vec3(1.,sqrt(3.),0.)\n\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n#define repet(p,r) p=(mod(p-r*.5, r)-r*.5)\n#define palette(t,c,d) ( vec3(.5)+vec3(.5)*cos(TAU*(c*t+d)) )\n#define sphere(p,s) (length(p)-s)\n\n#define time iTime\n#define speed (115./60.)\n\n#define ft(sp,off) floor((time+off)*sp)\n#define dt(sp,off) fract((time+off)*sp)\n#define bouncy(sp,off) sqrt(sin(dt(sp,off)*PI))\n#define switchanim(sp) (floor(sin(dt(sp,0.)*TAU))+1.)\n#define IOExpoLoop(sp,off) easeInOutExpo(abs(-1.+2.*dt(sp,off)))\n#define proj_persp (switchanim(speed/6.)>.5)\n\n\nfloat easeInOutExpo (float x)\n{return x == 0. ? 0. : x == 1. ? 1. : x < 0.5 ? exp2(20.*x-10.)/2. : (2.-exp2(-20.*x+10.))/2.;}\n\nstruct obj{\n    float d;\n    vec3 cs;\n    vec3 cl;\n};\n\nfloat hexa (vec3 p, float s)\n{return max(abs(p.x), dot(abs(p),normalize(hr)))-s;}\n\nobj minobj (obj a, obj b)\n{\n    if (a.d<b.d) return a;\n    else return b;\n}\n\nvoid moda (inout vec2 p, float rep)\n{\n    float per = TAU/rep;\n    float a = mod(atan(p.y,p.x), per)-per*.5;\n    p = vec2(cos(a),sin(a))*length(p);\n}\n\nvoid mo (inout vec2 p, vec2 d)\n{\n    p = abs(p)-d;\n    if (p.y>p.x) p=p.yx;\n}\n\nvec4 hexgrid (vec2 uv)\n{\n    vec2 ga=mod(uv,hr.xy)-hr.xy*.5, gb=mod(uv-hr.xy*.5,hr.xy)-hr.xy*.5,guv=dot(ga,ga)<dot(gb,gb)?ga:gb,\n    gid = uv-guv;\n    return vec4(guv, gid);\n}\n\nobj ground (vec3 p)\n{\n    float per = 10.;\n    vec4 hg = hexgrid(p.xz);\n    vec2 tile_id = mod(hg.zw, per)-per*.5;\n    \n    vec3 hp = vec3(hg.xy, 0.);\n    float h = hexa(hp, 0.1);\n    \n    p.y += sin(length(tile_id)+IOExpoLoop(speed,0.))*.2;\n    \n    float d = p.y+h*.3;\n    obj g = obj(d,vec3(-.5),palette(length(tile_id),vec3(0.3),vec3(.0,.36,.64)));\n    \n    return g;\n}\n\nobj prim2 (vec3 p)\n{\n    p.z -= time;\n    \n    float id = floor((p.x-1.)/2.);\n    p.y -= bouncy(2.,id*.1);\n    \n    repet(p.x, 2.);\n    float d = sphere(p, 0.5);\n    \n    return obj(d, vec3(0.5,.1,.2), vec3(1.));\n}\n\nobj map(vec3 p)\n{\n    if (!proj_persp)\n    {\n        p.yz *= rot(-atan(1./sqrt(2.))); \n        p.xz *= rot(PI/4.);\n        p.xz *= rot(PI/2.);\n    }\n    p.z += time;\n    \n    obj scene = minobj(ground(p),prim2(p)); \n    return scene;  \n}\n\nvec3 getnorm (vec3 p, vec2 eps)\n{return normalize(map(p).d-vec3(map(p-eps.xyy).d, map(p-eps.yxy).d, map(p-eps.yyx).d));}\n\nvec3 getcam (vec3 ro, vec3 ta, vec2 uv, float fov)\n{\n    vec3 f = normalize(ta-ro);\n    vec3 l = normalize(cross(vec3(0.,1.,0.),f));\n    vec3 u = normalize(cross(f,l));\n    return normalize(f*fov + l*uv.x + u*uv.y);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = -1. + 2. * (fragCoord/iResolution.xy);\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 ro, rd;\n    if (proj_persp)\n        {ro = vec3(0.001,4.,-1.); rd = getcam(ro, vec3(0.,0.,.5), uv, 1.); }\n    else \n        {ro = vec3(uv*4., -50.); rd = vec3(0.,0.,1.); }\n        \n    vec3 p = ro, \n    col = vec3(0.,0.,0.01), \n    l = normalize(vec3(-1.,2.,-1.));\n    \n    bool hit=false; obj O; float t=0.;\n    for(float i=0.; i<100.; i++)\n    {\n        p = ro+rd*t;\n        O = map(p);\n        if (O.d<0.001)\n        {\n            hit=true; break;\n        }\n        t += O.d*.8;\n    }\n    \n    if (hit)\n    {\n        vec3 n = getnorm(p, vec2(0.001,0.));\n        float light = max(dot(n,l),0.);\n        col = mix(O.cs, O.cl, light); \n    }\n    \n    moda(uv,6.);\n    mo(uv,vec2(.6));\n    col = (texture(iChannel0, abs(uv*.5)).x*.7 <.5) ? col:1.-col;\n    \n    col = sqrt(clamp(col,0.,1.));\n    \n    fragColor =  vec4(col,1.);\n}","name":"Image","description":"","type":"image"}]}