{"ver":"0.1","info":{"id":"Wl3GDM","date":"1576456320","viewed":89,"name":"ColumnaCubosv1","username":"jorge2017a1","description":"ColumnaCubosv1","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["columnacubosv1"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n\n\n\nconst int CCero = 0;\nconst int CInf = 1;\nconst int CSup = 2;\nconst int CDer = 3;\nconst int CIzq = 4;\nconst int CAtras = 5;\nconst int CPlane = 6;\nconst int CLight = 7;\nconst int CSky = 8;\nconst int CPlane2 =9;\n\n\n\nstruct TObj\n{\n    float tipo;\n    float dist;\n};\n    \n\nTObj mObj;\n\n\n//Torus function\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n//Sphere function\nfloat sdSphere( vec3 p, float s1 )\n{\n   vec4 s = vec4(0, s1, 9, s1);\n   return  length(p-s.xyz)-s.w;   \n}\n//Box function\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return length(max(d,0.0))\n         + min(max(d.x,max(d.y,d.z)),0.0); // remove this line for an only partially signed sdf \n}\n//Triprism function\nfloat sdTriPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n    return max(q.z-h.y,max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5);\n}\n//Cone function\nfloat sdCone( vec3 p, vec2 c )\n{\n    // c must be normalized\n    float q = length(p.xy);\n    return dot(c,vec2(q,p.z));\n}\n\n///--------------------------------------------\n\n\n\nfloat intersectSDF(float distA, float distB) {\n    return max(distA, distB);\n}\n\nfloat unionSDF(float distA, float distB) {\n    return min(distA, distB);\n}\n\nfloat differenceSDF(float distA, float distB) {\n    return max(distA, -distB);\n}\n\n\nvec2 opU(vec2 d1, vec2 d2 ) {\n  vec2 resp;\n    if (d1.x < d2.x){ \n        resp = d1;\n    }\n    else\n    {\n        resp = d2;\n    }\n     \n   return resp; \n}\n\n///----------------------------------------------\n\n\nvec3 getSphereColor(int i)\n{\n\tswitch(i)\n    {\n    case 0:\n        return vec3(85./255., 205./255., 252./255.);\n    case 1:\n        //return vec3(247./255., 168./255.,  184./255.);\n        return vec3(1, 0.5, 0);\n    case 2:\n        return vec3(1.0, 1.0, 1.0);\n    case 3:\n        return vec3(247./255., 168./255.,  184./255.); \n    case 4:\n        //return vec3(85./255., 205./255., 252./255.);\n        return vec3(0, 1, 1);\n        \n    case 5:\n        return vec3(85./255., 205./255., 252./255.);\n    case 6:\n        //return vec3(247./255., 168./255.,  184./255.);\n        return  vec3(0.5, 0.8, 0.9);\n        \n    case 7:\n        return vec3(1.0, 1.0, 1.0);\n    case 8:\n        //return vec3(247./255., 168./255.,  184./255.); \n        //return vec3(55./255., 30./255.,  255./255.); \n        return vec3(0.425, 0.56, 0.9); \n    case 9:\n        //return vec3(85./255., 205./255., 252./255.); \n        return vec3(0.5, 0.6, 0.6); \n    case 10:\n        return vec3(0.0, 1.0, 0.0);\n    case 11:\n        return vec3(0.0, 0.8, 0.2);\n    case 12:\n        return vec3(0.3, 0.7, 0.3);\n    case 13:\n    return vec3(0.0, 1.0, 0.4);\n    \n        \n    } \n}\n\n\n\n//--------------------------------------------\nfloat sdCylinder( vec3 p, vec2 h )\n{\n    vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n//-------------------------------------------------\n\n\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;\n}\n\n\nfloat opTwistBx(  in vec3 p )\n{\n    const float k =40.0; //10.0; // or some other amount\n    float c = cos(k*p.y);\n    float s = sin(k*p.y);\n    mat2  m = mat2(c,-s,s,c);\n    vec3  q = vec3(m*p.yx,p.y);\n    //return primitive(q);\n    \n    return  sdBox(q-vec3(-2.0,2.0,4.5),vec3(0.2,2.5,0.5));\n}\n\n\nmat2 rotate(float a) {\n\tfloat c = cos(a);\n\tfloat s = sin(a);\n\treturn mat2(c, s, -s, c);\n}\n\n///--------------------------------------------\nfloat GetDist(vec3 p  ) {\t\n\n \t\n    float d;\n    d=999.9;\n    float planeDist = p.y+3.0;\n    vec2 res;\n    \n \n    res=vec2(planeDist,3);\n   \n   \n    \n    vec3 pbA=vec3(1.0,0.25,1.0);\n    vec3 pt;\n    \n    \n    const int NumBx=13;\n    //NumBx=20;\n    float bxArr[NumBx];\n    \n    float grados;\n    \n    grados=360.0/float( NumBx);\n    \n    vec3 pPosA=vec3(1,1,1);\n    vec3 pPosB=vec3(1,1,1);\n    \n    \n    pPosB=pPosA;\n    \n    pt=p;\n    \n   \n    float tiempoGiro=iTime*0.25;\n    \n    for (int i = 1; i <NumBx ; i++) \n    {\n        pt.xz*= rotate(tiempoGiro);\n        \n        \n        pPosB.y=pPosB.y+0.50;\n\n        pPosB.xz*= rotate(tiempoGiro);\n \n    \tbxArr[i] = sdBox(pt-pPosB,pbA);\n        \n      \tres = opU(res, vec2(bxArr[i], i ));  \n    }\n      \n    \n    d = res.x;\n    mObj.dist = res.x;\n    mObj.tipo = res.y;\n        \n    return d;\n}\n\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.2;\n    //Determines size of shadow\n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || dS<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\n\n\n\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    //Texture of white and black in image\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\n\n\nfloat GetLight(vec3 p) {\n    vec3 lightPos = vec3(0, 5, 6);\n    //Determine movement of light ex. shadow and light direction and diffusion\n    lightPos.xz += vec2(sin(iTime), cos(iTime)*2.);\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l), 0., 1.);\n    float d = RayMarch(p+n*SURF_DIST*2., l );\n    if(d<length(lightPos-p)) dif *= .1;\n    \n    return dif;\n}\n\n\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0);\n    \n    TObj Obj;\n    \n    //Color of each object\n\n    //vec3 ro = vec3(0, 2.5, -1.5+4.5*sin(iTime));\n    //vec3 ro = vec3(0, 2.5, -1.5+4.8*sin(iTime*0.5));\n    vec3 ro = vec3(0, 3.5, -8);\n    \n\n    \n    vec3 rLuz=vec3(-0.5, -4.5, -10.5);\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1.0));\n\n    float d = RayMarch(ro, rd);\n    Obj=mObj;\n    \n    \n    \n    vec3 p = (ro + rd * d ); \n    vec3 pluz=(rLuz + rd * d );\n    \n    \n    \n    float dif = GetLight(p);\n    \n    float dif2 = abs(1.0- GetLight( pluz));\n    vec3 colobj;\n    \n    colobj=getSphereColor(int( Obj.tipo));\n  \n    dif=(dif+dif2)/1.5;\n    \n    \n    col = vec3(dif)*colobj;\n    \n    \n    \n    fragColor = vec4(col,1.0);\n    //Background color is white\n}\n","name":"Image","description":"","type":"image"}]}