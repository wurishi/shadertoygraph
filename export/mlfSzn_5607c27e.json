{"ver":"0.1","info":{"id":"mlfSzn","date":"1674692097","viewed":384,"name":"GM Shaders: Shading","username":"Xor","description":"A simple method for bumping in 2D","likes":26,"published":1,"flags":0,"usePreview":1,"tags":["example","bump","shade","tut","gmshaders"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n    \"GM Shaders: Shading\" by @XorDev\n    A simple method for bumping in 2D\n    \n    Written for a mini tutorial on shading in games:\n    https://xordev.substack.com/p/gm-shaders-mini-shading?sd=pf\n\n*/\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord)\n{\n    //Compute light direction vector\n    vec2 light_dir = vec2(cos(iTime),sin(iTime));\n    //Set light pitch angle\n    float light_pitch = 0.5;\n    \n    //Point light version:\n    /*\n    light_dir = iMouse.xy-fragCoord;\n    float light_len = length(light_dir);\n    light_dir /= light_len;\n    light_pitch = atan(iResolution.y*0.2,light_len);\n    */\n    \n    //Compute texel coordinates:\n    //https://xordev.substack.com/p/gm-shaders-mini-texels-and-pixels-1308242\n    vec2 texel = 1.0 / iResolution.yy;\n    \n    //Convert pixel to texture coordinates\n    vec2 uv0 = fragCoord * texel;\n    //Compute uvs one texel toward the light\n    vec2 uv1 = uv0 + light_dir * texel;\n    \n    //Get the pixel height\n    float height0 = texture(iChannel0,uv0).r;\n    //Get the offset pixel height\n    float height1 = texture(iChannel0,uv1).r;\n    \n    //Depth of heightmap\n    float depth = 0.1;\n    //Compute surface normal along light_dir axis\n    float normal = atan(texel.y, (height0-height1) * depth);\n    \n    //Compute light using Lambert's cosine law\n    float lam = max(cos(normal - light_pitch), 0.0);\n    //Output the results\n    fragColor = vec4(lam, lam, lam, 1.0);\n}","name":"Image","description":"","type":"image"}]}