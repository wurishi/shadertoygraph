{"ver":"0.1","info":{"id":"4fcyRS","date":"1731632258","viewed":44,"name":"Inktober Cactus","username":"overgrownCactus","description":"Simple Inktober shader inspired by Acerola's implementation.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["posterization"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float contrast = 1.0;\n    float lumCorrection = 1.6;\n    float stippleSize = 0.5;\n    \n    // Inspired by Acerola's video on this: https://www.youtube.com/watch?app=desktop&v=E9-LRRDVmo8\n    // Normalized pixel coordinates (from 0 to 1)\n    // iChannel0 is image\n    // iChannel1 is blue noise\n    // iChannel2 is paper texture\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Sampling original image\n    vec4 col = texture(iChannel0, uv);\n    \n    // Edge Detection via sobel filter\n    float w = 1.0 / iResolution.x;\n    float h = 1.0 / iResolution.y;\n    \n    vec4 n[9];\n    \n    n[0] = texture(iChannel0, uv + vec2( -w, -h));\n    n[1] = texture(iChannel0, uv + vec2(0.0, -h));\n    n[2] = texture(iChannel0, uv + vec2(  w, -h));\n    n[3] = texture(iChannel0, uv + vec2( -w, 0.0));\n    n[4] = texture(iChannel0, uv);\n    n[5] = texture(iChannel0, uv + vec2(  w, 0.0));\n    n[6] = texture(iChannel0, uv + vec2( -w, h));\n    n[7] = texture(iChannel0, uv + vec2(0.0, h));\n    n[8] = texture(iChannel0, uv + vec2(  w, h));\n    \n    vec4 sobel_edge_h = n[2] + (2.0*n[5]) + n[8] - (n[0] + (2.0*n[3]) + n[6]);\n      vec4 sobel_edge_v = n[0] + (2.0*n[1]) + n[2] - (n[6] + (2.0*n[7]) + n[8]);\n    vec4 sobel = sqrt((sobel_edge_h * sobel_edge_h) + (sobel_edge_v * sobel_edge_v));\n\n    // Luminosity w/ noise calculations\n    float lum = float(0.2126*sobel.r + 0.7152*sobel.g + 0.0722*sobel.b);\n    \n    vec2 noiseCoord = uv;\n    noiseCoord *= stippleSize;\n    float noise = textureLod(iChannel1, noiseCoord, 0.0).a;\n\n    lum = contrast * (lum - 0.5f) + 0.5f;\n    lum = min(1.0f, max(0.0f, lum));\n    lum = pow(lum, 1.0f / lumCorrection);\n    lum = min(1.0f, max(0.0f, lum));\n    \n    // Paper and Ink coloring/texturing\n    vec3 paper = vec3(0.96, 0.84, 0.70);\n    vec3 ink = vec3(0.15, 0.13, 0.12);\n    vec3 final;\n    \n    if (lum < noise)\n        final = paper;\n    else\n        final = ink;\n    \n    final = final * texture(iChannel2, uv).rgb;\n    \n    // Output to screen\n    fragColor = vec4(final.rgb, 1.0);\n    //fragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"}]}