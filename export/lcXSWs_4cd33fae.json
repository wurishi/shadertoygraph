{"ver":"0.1","info":{"id":"lcXSWs","date":"1705941014","viewed":73,"name":"ray marching tutorial0","username":"Ray_Questing","description":"ray marching","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_ITER 100\n#define MIN_DIST 0.01\n#define MAX_DIST 100.0\n\nfloat opUnion( float d1, float d2 )\n{\n    return min(d1,d2);\n}\nfloat opSubtraction( float d1, float d2 )\n{\n    return max(-d1,d2);\n}\nfloat opIntersection( float d1, float d2 )\n{\n    return max(d1,d2);\n}\n\nfloat opSmoothUnion( float d1, float d2, float k )\n{\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h);\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat map(vec3 p) {\n    float res = sdBox(p - vec3(2, 0, 0), vec3(0.5, 1, 1));\n    res = opSmoothUnion(\n        sdSphere(p - vec3(sin(iTime), 0, 0), 1.0),\n        res, 0.5\n    );\n    res = opUnion(p.y + 1.2, res);\n\n    return res;\n}\n\nfloat rayMarch(vec3 ro, vec3 rd) {\n    float t = 0.0;\n    \n    for (int i = 0; i < MAX_ITER; i++) {\n        vec3 p = ro + rd * t;\n\n        float d = map(p);\n        \n        t += d;\n        \n        if (d < MIN_DIST || t > MAX_DIST) break;\n    }\n    \n    return t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    \n    vec3 ro = vec3(0, 0, -3);\n    vec3 rd = normalize(vec3(uv, 1.0));\n    \n    float dist = rayMarch(ro, rd);\n    \n    vec3 groundColor = vec3(0.3, 1, 0.5);\n    vec3 skyColor = vec3(0.1, 0.2, 0.4);\n    \n    float t = 1.2 / (dist * 0.8);\n    vec3 col = mix(skyColor, groundColor, t);\n    \n    fragColor = vec4(col, 1);\n}","name":"Image","description":"","type":"image"}]}