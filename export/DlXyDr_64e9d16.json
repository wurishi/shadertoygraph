{"ver":"0.1","info":{"id":"DlXyDr","date":"1690624225","viewed":39,"name":"Radial QTE Bar","username":"xynanxdb","description":"This is a sample for a radial QTE Bar that has 3 segments. I'm using a lot of vec4s here, which might not be very optimized. Please let me if there is any optimization that I can do.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["radial","circular","bar","qte"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.14159265359;\n\nconst float aa = 0.001;\nfloat progress = 0.2;\n\nconst float outerRingSize = 0.35;\nconst float innerRingSize = 0.25;\nconst float borderSize = 0.15;\n\nconst vec3 emptyFillColor = vec3(0.84);\nconst vec3 tapZoneColor = vec3(0.247, 0.65, 0.458);\nconst vec3 borderColor = vec3(1.0);\nconst vec3 progressColor = vec3(1.0, 0.33, 0.313);\n\nconst bool isClockwise = true;\n\nconst vec2[3] sectorLimits = vec2[3](vec2(0, 90.0), vec2(110.0, 160.0), vec2(202.0, 277.0));\n///////////////////////////////////////////////////////////////////////////////////\n\nvec4 draw_ring(float d, float outerRadius, float innerRadius, vec3 color) {\n    float mask = smoothstep(outerRadius + aa, outerRadius - aa, d);\n    vec4 canvas = vec4(vec3(mask * color), mask);\n    \n    mask -= smoothstep(innerRadius + aa, innerRadius - aa, d);\n    return vec4(vec3(mask* color), mask);\n}\n\nvec4 draw_tap_zone(vec2 uv, float atanUV, float angleMin, float angleMax) {\n\tfloat polar = (atanUV + PI) * 0.5;\n    float dist = length(uv);\n    vec4 canvas = draw_ring(dist, outerRingSize, innerRingSize, tapZoneColor);\n    angleMin = angleMin / 360.0 * PI;\n    angleMax = angleMax / 360.0 * PI;\n    \n    float dmin = polar - angleMin;\n    dmin = mod(dmin + PI, 2.0 * PI) - PI;\n    \n    float dmax = polar - angleMax;\n    dmax = mod(dmax + PI, 2.0 * PI) - PI;\n    \n    float b = max(smoothstep(aa, 0.0, dmin * dist), smoothstep(-aa, 0.0, dmax* dist));\n    canvas *= vec4(borderColor, 1.0 - b);\n    \n    \n    return canvas;\n}\n\nvec4 draw_border_rings(float d, float outerRadius, float innerRadius) {\n    vec4 canvas = draw_ring(d, outerRadius, outerRadius - borderSize, borderColor);\n    vec4 innerRing = draw_ring(d, innerRadius, innerRadius + borderSize, borderColor);\n    canvas = mix(canvas, innerRing, innerRing.a);\n    return canvas;\n}\n\nvec4 draw_progress_zone(vec2 uv, float atanUV, float angleNormalized) {\n    float polar = (atanUV + PI) * 0.5;\n    float dist = length(uv);\n    \n    vec4 canvas = draw_ring(dist, outerRingSize, innerRingSize, progressColor);\n    angleNormalized *= PI;\n    \n    float dmax = polar - angleNormalized;\n    dmax = mod(dmax + PI, 2.0 * PI) - PI;\n    \n    float b = max(smoothstep(aa, 0.0, dist), smoothstep(-aa, 0.0, dmax * dist));\n    canvas *= vec4(borderColor, 1.0 - b);\n    return canvas;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord - iResolution.xy * 0.5) / iResolution.y;\n    float atanUV = isClockwise ? atan(-uv.x, -uv.y) : atan(uv.x, -uv.y);\n    float mask = 1.0;\n    float dCenter = length(uv);\n    \n    //Borders\n    vec4 layer = draw_border_rings(dCenter, outerRingSize, innerRingSize);\n    \n    //Background\n    vec4 bg = draw_ring(dCenter, outerRingSize, innerRingSize, emptyFillColor);\n    layer = mix(layer, bg, bg.a);\n    \n    //Segments\n    for (int i = 0; i < sectorLimits.length(); i ++) {\n        float x = sectorLimits[i].x;\n        float y = sectorLimits[i].y;\n        \n        if (x == 0.0 && y == 0.0) {\n            continue;\n        }\n        \n        vec4 zone = draw_tap_zone(uv, atanUV, x, y);\n        layer = mix(layer, zone, zone.a);\n    }\n    \n    //Progress\n    progress  = (sin(iTime) + 1.0) * 0.5;\n    float progressAngle = smoothstep(0.0, 2.0 * PI, progress);\n    vec4 progressVec = draw_progress_zone(uv, atanUV, progress);\n    layer = mix(layer, progressVec, progressVec.a);\n    \n    if (progress >= 10.0) {\n        progress = 0.0;\n    }\n    \n    fragColor = layer;\n}","name":"Image","description":"","type":"image"}]}