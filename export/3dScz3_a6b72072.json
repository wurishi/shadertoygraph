{"ver":"0.1","info":{"id":"3dScz3","date":"1587030080","viewed":79,"name":"raymarchShader","username":"newboldTom","description":"raymarching with better lighting","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"int ITERATIONS = 200;\nfloat MAX_VIEWDIS = 90.0;\nfloat SMOOTHING = 0.0005;\n\nvec3 transform(vec3 p, float modFac, vec3 scale, vec3 rot){\n    //rotation modulation\n    rot.x = rot.x+sin(0.25*iTime);\n    rot.y = rot.y-p.x*0.5+cos(0.3*iTime);\n    rot.z = rot.z+2.0*p.z+p.y;\n    //translation\n    p = p + vec3(0,0,-2);\n    //modulo\n    p = mod(p+(0.5*vec3(modFac,modFac,modFac)),vec3(modFac,modFac,modFac))-(0.5*vec3(modFac,modFac,modFac));\n    //add scaling here!\n    \n    \n    //x axis rot\n    p = vec3(p.x, p.y*cos(rot.x) - p.z*sin(rot.x), p.y*sin(rot.x) + p.z*cos(rot.x));\n    //y axis rot\n    p = vec3(p.x*cos(rot.y) + p.z*sin(rot.y), p.y, p.x*sin(rot.y) - p.z*cos(rot.y));\n    //z axis rot\n    p = vec3(p.x*cos(rot.z) - p.y*sin(rot.z), p.x*sin(rot.z) + p.y*cos(rot.z), p.z);\n    return p;\n}\n\nfloat prim_torus(vec3 p, vec2 t){\n    return length(vec2(length(vec2(p.x,p.z))-t.x,p.y)) - t.y;\n}\n\nfloat scene(vec3 p){\n    //tranform points\n    vec3 scale = vec3(0,0,0);\n    vec3 rot = vec3(1.0,0.0,0.5);\n    p = transform(p,7.0,scale,rot);\n    return prim_torus(p, vec2(0.75,0.25));\n}\n\nvec3 calNormal(vec3 p, float smoothVal){\n    return normalize(vec3(\n        scene(p+vec3(smoothVal,0,0))-scene(p+vec3(-smoothVal,0,0)),\n        scene(p+vec3(0,smoothVal,0))-scene(p+vec3(0,-smoothVal,0)),\n        scene(p+vec3(0,0,smoothVal))-scene(p+vec3(0,0,-smoothVal))));\n}\n\nvec3 raymarch(vec2 uv, vec3 cam, vec3 lightDir, vec3 lightCol, vec3 matCol, vec3 ambient, vec3 fogCol){\n    vec3 dir = normalize(vec3(2.0*uv.x-1.0,2.0*uv.y-1.0,1.0));;\n    float totalDis = 0.0;\n    vec3 p;\n    //raymarch\n    for(int i=0;i<ITERATIONS;i++){\n        p = cam + totalDis*dir;\n        totalDis = totalDis + scene(p)*0.5;\n    }\n    //colour modulaion\n    matCol.y = 0.5+0.5*sin(0.25*p.x);\n    //matCol.z = 0.75+0.25*sin(0.25*p.z*p.y);\n    //lighting\n    vec3 normal = calNormal(p,SMOOTHING);\n    float diffuse = dot(lightDir,normal);\n    diffuse = 0.5*diffuse + 0.5;\n    vec3 diffuseLit = diffuse*lightCol*matCol*ambient;\n    return mix(diffuseLit,fogCol,smoothstep(10.0,MAX_VIEWDIS,totalDis));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\t//gen inputs\n    vec3 cam = vec3(3.5+cos(iTime),3.5+5.0*sin(0.25*iTime),6.0*iTime);\n    vec3 lightDir = normalize(vec3(-0.1,-0.2,-0.5));\n    vec3 lightCol = vec3(1.0,1.0,1.0);\n    vec3 matCol = vec3(1.0,0.25,0.4);\n    vec3 ambient = vec3(0.4,0.4,0.0);\n    vec3 fogCol = vec3(0.1,0.0,0.2);\n    //raymarch\n    vec3 col = raymarch(uv,cam,lightDir,lightCol,matCol,ambient,fogCol);\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}