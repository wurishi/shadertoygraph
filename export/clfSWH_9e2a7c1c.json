{"ver":"0.1","info":{"id":"clfSWH","date":"1674789730","viewed":84,"name":"2D_World Music","username":"ssejun","description":"2D, World Music","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["2d","worldmusic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926535\n#define MODE 1\n#define OCTAVES 1\n\n//uniform float iTime;\n//uniform float iResolution;\nuniform float iAmplitude;\nuniform float iFrequency[3];\nuniform sampler2D screenTexture;\n\nvec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec2 mod289(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec3 permute(vec3 x) { return mod289(((x*34.0)+1.0)*x); }\n\nfloat snoise(vec2 v) {\n    const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                        0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                        -0.577350269189626,  // -1.0 + 2.0 * C.x\n                        0.024390243902439); // 1.0 / 41.0\n    vec2 i  = floor(v + dot(v, C.yy) );\n    vec2 x0 = v -   i + dot(i, C.xx);\n    vec2 i1;\n    i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n    vec4 x12 = x0.xyxy + C.xxzz;\n    x12.xy -= i1;\n    i = mod289(i); // Avoid truncation effects in permutation\n    vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n        + i.x + vec3(0.0, i1.x, 1.0 ));\n\n    vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n    m = m*m ;\n    m = m*m ;\n    vec3 x = 2.0 * fract(p * C.www) - 1.0;\n    vec3 h = abs(x) - 0.5;\n    vec3 ox = floor(x + 0.5);\n    vec3 a0 = x - ox;\n    m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n    vec3 g;\n    g.x  = a0.x  * x0.x  + h.x  * x0.y;\n    g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n    return 130.0 * dot(m, g);\n}\n\nfloat random2D(in vec2 st){\n    return (-0.5 + fract(sin(dot(st, vec2(12.3425, 48.2342)))\n                *75421.3425))*2.0;\n}\n\nvec2 grid(in vec2 st, in vec2 n){\n    return st*n;\n}\n\nfloat ridge(float val, float offset, float slope){\n    val = abs(val);\n    val = offset - val;\n    \n    return pow(val, slope);  \n}\n\nfloat turbulence(float val, float slope){\n    val = abs(val);\n    return pow(val, slope);  \n}\n\nfloat fBM(in vec2 st, float volume){\n    float lacunarity = 3.0 + 2.0 * volume;\n    float gain = (0.3  + .2 * volume); \n    \n    float frequency = 1.5;\n    float amplitude = .75;\n    \n    float val = 0.0;\n    for(int i = 0; i < OCTAVES; i++){\n        val += ridge(snoise(st * frequency), 1.0, 4.0) * amplitude;\n        amplitude *= gain;\n        frequency *= lacunarity;\n    }\n    return val;\n}\n\nfloat sampleMusic()\n{\n    return texture(iChannel0, vec2(0.25,0.0)).x * 0.02;\n}    \n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float aspect = iResolution.x / iResolution.y;\n    uv.x *= aspect;\n    \n    float close_up = 1.0;\n    float moving_y = 0.05;\n    uv *= close_up;\n    uv.y += (iTime + 23489.1) * moving_y;\n    \n    float volume = 0.1;\n    vec2 q = vec2(0.0);\n    q.x = fBM(uv/1.0, volume);\n    q.y = fBM(uv/1.0 + vec2(0.0 ,(iTime + 2340.1) * moving_y), volume) * 1.0;\n    \n    float col = pow(fBM(q, volume), 0.25);\n   \n    vec4 col_01 = vec4(1.0,0.2,0.5,1.0);\n    vec4 col_02 = vec4(0.0,1.0,0.0,1.0);\n    vec4 col_03 = vec4(0.2,0.0,1.0,1.0); \n\n    float h = 0.5;\n    vec4 color = mix(mix(col_01, col_02, col), mix(col_02, col_03, (col - h)/(1.0 - h)), smoothstep(h, h + 0.1, col));\n    fragColor = vec4(color);\n}","name":"Image","description":"","type":"image"}]}