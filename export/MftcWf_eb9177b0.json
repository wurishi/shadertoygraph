{"ver":"0.1","info":{"id":"MftcWf","date":"1731298860","viewed":139,"name":"Zellij pattern 21 (music)","username":"jarble","description":"A zellij tile pattern.\nClick and drag to move around.","likes":3,"published":3,"flags":40,"usePreview":0,"tags":["fractal","music","zellij","gamelan"],"hasliked":0,"parentid":"XfdyzX","parentname":"Zellij pattern 20 (music)"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define triangle_wave(a) abs( fract( (a)*1.5 + vec2(0,.25) ) - .5 )\n\n\nvec3 fractal(vec2 uv,vec2 t2){\n    vec3 col = vec3(0.);\n    \n    for(int k = 0; k < 6; k++){\n        uv =\n            (uv+t2)/3.\n        ;\n        \n        uv = abs(fract(vec2(uv+.5)*3.)-.5)/1.5;\n\n        if(\n            uv.y>uv.x\n        ) uv = uv.yx;\n\n        t2 =\n            -triangle_wave(uv-.5).yx\n        ;\n        uv =\n            (t2.yx-triangle_wave(uv.yx)).yx\n        ;\n        col =\n            vec3(col.zx,max(sign((uv.y-uv.x)*(t2.x-t2.y)),0.))\n        ;\n        \n        if(abs(uv.x)<.25)\n        uv.x -= 1./4.;\n\n\n        }\n        return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    fragColor = vec4(0.0);\n    float t1 = 1.;\n    vec2 draggedPos = texelFetch(iChannel0, ivec2(1,0), 0).xy;\n\n    vec2 uv = (fragCoord)/iResolution.y/t1/2.0;\n    uv += vec2(iTime/2.0,iTime/3.0)/t1/8.0;\n    uv -= draggedPos/iResolution.y/t1/2.0;\n    vec2 t2 = vec2(0.);\n    vec3 col = abs(fractal(uv,t2));\n    \n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"\nfloat fract1(float a){\n    return\n        8.*abs(pow(fract(-a),2.)/4.)/8.\n    ;\n}\n\nfloat m1(float a, float b, float c){\n    return floor(floor(floor(a)/b)/c);\n}\n\nfloat mod1(float a, float b){\n    \n    for(float i = 1.; i < mod(floor(a/8.),8.); i++){\n        a += mod(floor(a/2.),b)*i;\n    }\n    \n    return\n        mod(a,b)\n       \n    ;\n}\n\nvoid distort(inout float a, inout float b){\n    for(float i = 1.; i < mod(floor(a/b),3.); i++){\n        a /= 2.;\n        a += mod1(floor(a/2.),b)*i;\n    }\n}\n\nfloat fmod(float a, float b){\n    a +=\n        floor((a+b)/8.)\n    ;\n    \n    float\n        a1 = mod1(floor(a),b),\n        a2 =\n            mod1(floor((a)/b),b)\n    ;\n    \n    return\n        mod1(a1*a2,b)\n    ;\n}\n\n\nfloat prime_rhythm(float time){\n    return\n        (1.+fmod(time/2.,2.))*(1.+fmod(time/3.,2.))/(1.+fmod(time/5.,2.))/(1.+fmod(time/7.,2.))\n    ;\n}\n\nfloat fmod1(float a, float b){\n    return\n        fmod(a,b+fmod(floor(a)/4.,2.))\n    ;\n}\n\n\n#define fract1(a) pow(fract(a),1.+log(2.)-log(1.+fract(a)))\n\nvec2 synth_(vec2 a1,vec2 a,vec2 a2,vec2 a3,vec2 nb,vec2 a4){\n    return log(a1+a*abs(a2-abs(.5-a3*vec2(fract1(nb.x*.998),fract1(nb.y)))*a4));\n}\n#define synth(a1,a,a2,a3,nb,a4) synth_(vec2(a1),vec2(a),vec2(a2),vec2(a3),vec2(nb),vec2(a4))\n\nvec2 mainSound1(int samp, float time,float scale,int instrument,float duration){\n  \n  \n  \n  float tempo1 =\n      prime_rhythm(time)\n  ;\n  float s1 =\n      8.,\n\n  t =\n      s1*time/4./tempo1\n  ,\n  \n  t4 = t/prime_rhythm(time+11.)/(1.+fmod(t/8.,2.)),\n  t1 = fmod1(t4,2.), //one half octave lower or higher\n  t5 = t*2./prime_rhythm(time+7.),\n  t3 = (1.+fmod(t5,2.)),\n  t6 = time*8./t3,\n  m3 =\n      floor(fmod1(t6,s1/2.)/2.),\n      //floor(fmod(t6+floor(time/8./tempo1),s1/2.)/2.),\n  m2 =\n      1. + fmod1(t/t3/2.,s1/2.)\n      //1. + fmod(t/t3/2.+floor(t/8.),s1/2.)\n  ;\n  vec2 a= vec2(\n      //-(log(1./64./4.+fract1(t/2./prime_rhythm(time+14.))/8./duration)),-(log(1./64./4.+fract1(t/prime_rhythm(time+7.))/8./duration))\n      -(log(1./64./4.+fract1(t/prime_rhythm(time+7.))/8./duration))\n\n  ),\n  nb = vec2(\n      t*vec2(pow(2.,(m3+m2-t1*4.)/7.+scale))*tempo1\n  ),\n  gamelan =\n      a/16./4.*abs(log(1./4.+a*abs(1./8.-abs(.5-vec2(fract1(nb.x*4.*.998),fract1(nb.y*4.)))/2.))\n      +.5*log(1./4.+a*abs(1./4.-abs(.5-vec2(fract1(nb.x*2.*.998),fract1(nb.y*2.)))/2.)))\n;\n  \n  return gamelan;\n}\n\nvec2 mainSound1(int samp, float time,float scale,int instrument){\n    return mainSound1(samp, time,scale,instrument,1.);\n}\n\nvec2 mainSound(int a,float b){\n    return abs(mainSound1(a,b,6.5,1,1./2.)-mainSound1(a,b,6.5,1)/2.);\n}","name":"Sound","description":"","type":"sound"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//from https://www.shadertoy.com/view/dtGGzK\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 col = vec4(0);\n    if (floor(fragCoord) == vec2(1,0)) {\n        vec2 prevpos = texelFetch(iChannel0, ivec2(1,0), 0).zw; //previous dragged mouse pos\n        vec4 mp = texelFetch(iChannel0, ivec2(2,0), 0); //prev mouse pos\n        vec4 m = iMouse; //current mouse pos\n        \n        //if mouse button up\n        if (m.z < 0.0 && mp.z >= 0.0){\n            col = texelFetch(iChannel0, ivec2(1,0), 0).xyxy;\n        } else if (m.z >= 0.0){\n            col = vec4(m.xy - abs(m.zw) + prevpos, prevpos);\n        } else {\n            col = texelFetch(iChannel0, ivec2(1,0), 0);\n        }\n    }\n    //the last mouse position\n    if (floor(fragCoord) == vec2(2,0)) {\n        col = iMouse;\n    }\n    fragColor = col;\n}","name":"Buffer A","description":"","type":"buffer"}]}