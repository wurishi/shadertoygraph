{"ver":"0.1","info":{"id":"4fcGDn","date":"1711538377","viewed":100,"name":"Van Damme in the Matrix","username":"Squidz","description":"Playing around with ascii shaders, figured Van Damme was a willing victim.\nClick + drag up and down for grid scaling options","likes":8,"published":1,"flags":0,"usePreview":1,"tags":["matrix","vandamme"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//needed for interpereting the suplied ascii\nconst vec3 texcol = vec3(0.98, 0.38, 0.35);\n\nfloat rgb2grey(vec3 _col){\n    return((_col.r * 0.299) + (_col.g * 0.587) + (_col.b * 0.144));\n}\n\n//list of used chars in order of least to most impact\nvec2 chars[28] = vec2[28](\n                        vec2(11.0,6.0),\n                        vec2(0.0,6.0),\n                        vec2(4.0,7.0),\n                        vec2(12.0,7.0),\n                        vec2(9.0,6.0),\n                        vec2(5.0,6.0),\n                        vec2(10.0,6.0),\n                        vec2(6.0,7.0),\n                        vec2(2.0,7.0),\n                        vec2(3.0,6.0),\n                        vec2(11.0,7.0),\n                        vec2(9.0,7.0),\n                        vec2(8.0,7.0),\n                        vec2(0.0,7.0),\n                        vec2(7.0,7.0),\n                        vec2(15.0,7.0),\n                        vec2(10.0,7.0),\n                        vec2(3.0,7.0),\n                        vec2(5.0,7.0),\n                        vec2(13.0,7.0),\n                        vec2(14.0,7.0),\n                        vec2(1.0,6.0),\n                        vec2(2.0,6.0),\n                        vec2(4.0,6.0),\n                        vec2(6.0,6.0),\n                        vec2(7.0,6.0),\n                        vec2(8.0,6.0),\n                        vec2(1.0,7.0)\n                            );\n\n//get the distance from 0 to a vec3\nfloat dist3(vec3 _val){\n return(sqrt((_val.r * _val.r) + (_val.g * _val.g) + (_val.b * _val.b)));\n}\n\n//find out if a pixel is in the correct position to be text\nbool checkText( vec2 _uv,       //this pixel\n                vec2 _position, //the position to start the draw\n                vec2 _index,    //the index(see ascii page)\n                vec2 _size){    //how big is the text\n    vec2 _tempUV = (_uv - _position)/_size + vec2(0.35, 0.12);\n    _tempUV *= vec2(0.6,0.815);\n    if( _uv.x > _position.x && _uv.x < _position.x + _size.x &&\n        _uv.y > _position.y && _uv.y < _position.y + _size.y\n        ){\n    }else{\n        return(false);\n    };\n    \n    vec2 page_uv = vec2((_tempUV.x / 16.0) + (_index.x/16.0), (_tempUV.y / 16.0) + (_index.y/16.0));\n    \n    if(dist3(texcol - texture(iChannel0, page_uv).rgb) < 0.65){\n        return(true);\n    };\n    \n    return(false);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord)\n{\n    //some colours\n    vec3 green = vec3(0.05,0.67,0.15);\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 ascii_uv = vec2((uv.x / 16.0) + (1.0/16.0), (uv.y / 15.0) + (1.0/15.0));\n    \n    \n    float sideLength = 6.0 + (iMouse.y/iResolution.y) * 8.0;\n    //character size decided here\n    vec2 gridLength = vec2(1.0 / (iResolution.x/sideLength), 1.0 / (iResolution.y/sideLength)); //size (in uv) of each grid square\n    vec2 gridSize = vec2(round(1.0/gridLength.x),round(1.0/gridLength.y)); //how many squares in each direction\n    vec2 gridPosition = floor(uv * gridSize) / gridSize; //what grid is this uv in\n    \n    //pixel color\n    vec3 col = vec3(0.0,0.0,0.0);\n    \n    vec3 col2 = texture(iChannel1, gridPosition).rgb;\n    if(dist3(col2 - green) < 0.05){//turn the greenscreen into black\n       col2 = vec3(0.1,0.1,0.1);\n    };\n    //index based on grey from image\n    vec2 _index = chars[int(floor(rgb2grey(col2) * 28.0))];\n    //check our uv in our grid square to draw a different col based on ascii page\n    if(checkText(uv,gridPosition,_index, gridLength * 1.0)){\n        col = vec3(0.0,rgb2grey(col2),0.0);\n    };\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n    \n}","name":"Image","description":"","type":"image"}]}