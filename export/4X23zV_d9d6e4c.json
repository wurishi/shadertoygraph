{"ver":"0.1","info":{"id":"4X23zV","date":"1708630745","viewed":415,"name":"Raytracer_circle","username":"Robin42","description":"Shader learning","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["cineshader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"struct Circle {\n    vec2 center_pos;\n    float radius;\n};\n\nfloat circle_distance(float x, float y) {\n    return (x * x + y * y);\n}\n\nbool hit_circle(Circle circle, vec2 pos) {\n    return length(circle.center_pos - pos) < circle.radius;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = 2.0*fragCoord/iResolution.xy - 1.0;\n    float ratio = iResolution.x/iResolution.y;\n    uv.x *= ratio;\n\n    // Time varying pixel color\n    // vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    vec3 col = vec3(0.0);\n    Circle circle = Circle(vec2(0.0, 0.0), abs(sin(0.5 * iTime)));\n    \n    if (hit_circle(circle, vec2(uv.x, uv.y))) {\n        col = vec3(1.0);\n    } \n    \n    \n    \n    // if(circle_distance((uv.x - 0.5)*ratio, uv.y - 0.5) < 0.1) {\n    //     col = vec3(1.0);\n    // }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n\n/** SHADERDATA\n{\n\t\"title\": \"Nearby Raytracing Circle\",\n\t\"description\": \"A simple Circle.\",\n\t\"model\": \"person\"\n}\n*/","name":"Image","description":"","type":"image"}]}