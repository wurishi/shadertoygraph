{"ver":"0.1","info":{"id":"cs3Xzj","date":"1680166839","viewed":71,"name":"TP3 - Animation","username":"salma","description":"tp3","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["tp3"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Modeling - 2023.02.06\n//AHIZOUNE Salma\n\n\n\nconst int Steps = 200;      // Number of steps\nconst float Epsilon = 0.01; // Marching epsilon\n\n// Structure for objects\n// v : Field value\n// i : Texture index\nstruct V {\n    float v; \n    int i;\n};\n\n// Structure for texture\n// c : Color\n// s : Specular\nstruct T {\nvec3 c;\nfloat s;\n};\n\n// Primitives\n\n// Terrain heightfield\n// x : Position in the plane\nfloat Surface( in vec2 p )\n{\n\treturn 1.5*sin(p.y/10.-iTime*3.)-1.0;\n} \n\n\n// Implicit surface defining the terrain\n// p : Point\nfloat ImplicitTerrain(in vec3 p)\n{\n    float z = Surface( p.xy );\n    float h = (p.z - z)+2.*Noise(p)/5.0; // Lipschitz is defined as a constant 2.0\n    return h;\n}\n\n\n\n\n\n//----------------------------------------------------------------------------\n\n//aile moulin\n// c : centre \nfloat aile(vec3 p, vec3 c, vec3 a, vec3 b){\n    float v = Intersection(Intersection(\n                    Capsule(c+vec3(0,0,5), a, b, 1.1),\n                    -Plan(p, vec3(0.1,0,0),vec3(1,0,0))),\n                    Plan(p, vec3(0.5,0,0),vec3(1,0,0)));    \n    return v;\n}\n\nfloat roue(vec3 p){\n    float v = Cylindre(p, vec3(-50,5,-10),vec3(-50,5,-20), 15.);\n    float u = Boite(p,vec3(-30,5,-15), 4., 35., 0., -1., -1.);\n    u = Union(u, Boite(p,vec3(-48,5,-15), 4., 3., 13., -1., -1.));\n    \n    v = Intersection(v, -u);\n    float v1 = Intersection(v, -Cylindre(p, vec3(-50,5,-9),vec3(-50,5,-21), 10.));\n    \n    v1 = Union(v1, Cylindre(p, vec3(-50,5,-9),vec3(-50,5,-21), 6.));\n    v1 = Union(v1, Cylindre(p, vec3(-60,-4,-15),vec3(-40,15,-15), 3.));\n    v1 = Union(v1, Cylindre(p, vec3(-60,13,-15),vec3(-40,-4,-13), 3.));\n    \n    return v1;\n}\n\nfloat moulin(vec3 p){ \n    vec3 c = vec3(Rotation(p, vec3(0, 1, 6), vec3(0,0,1.0*iTime)));\n    vec3 d = vec3(RotationH(p, vec3(-7, 1, 5), vec3(0,0,1.0*iTime)));\n    vec3 e = vec3(RotationH(p, vec3(-7.7, 0.3, 6), vec3(0,-1.*iTime,0)));\n    vec3 f = vec3(RotationH(p, vec3(-8, 1, 2), vec3(0,0,1.*iTime)));\n    vec3 g = vec3(RotationH(p, vec3(3,5,-4.5), vec3(0,-1.*iTime,0)));\n    vec3 h = vec3(RotationH(p, vec3(-50,5,-5), vec3(0,-1.*iTime,0)));\n    \n    float pl = Plan(p, vec3(0,0,-20), vec3(0, 0, 1));\n    \n    float x = Union(aile(p,c,vec3(0,0,17), vec3(0,0,5)),\n                    aile(p,c,vec3(-6,0,11), vec3(6,0,11)));\n    x = Union(Cylindre(p, vec3(-4,1,6), vec3(1,1,6), 1.),x);\n    x = Union(Cylindre(p, vec3(-1.5,1,6),vec3(-0.5,1,6), 2.),x);\n    x = Union(Capsule(p, vec3(-1,0,6),vec3(-1,-10,6), 0.5),x);\n    x = Union(Capsule(p, vec3(-1,-10,6),vec3(-1,-10,-20), 0.5),x);\n    \n        \n    float b = Union(pl, x);\n    b = Union(b, Boite(f, vec3(-4,1,2), 1., 20.,-.5,-.5, 5.));\n    b = Union(engrenageHpetit(e),b);\n    b = Union(engrenageVpetit(f),b);\n    b = Union(engrenageVgrand(f),b);\n    b = Union(engrenageHgrand(g), b);\n    b = Union(b, Cylindre(p, vec3(-35,5,-5),vec3(-17.5,5,-5), 2.));\n    b = Union(b, roue(h));\n    \n    return b;\n}\n\n//eau et terre\nfloat eau(vec3 p)\n{\n\tfloat u = Intersection(\n              ImplicitTerrain(p+vec3(0,20,15)),\n              Cylindre(p+vec3(0,0,20),vec3(-100,0,0),vec3(-30,0,0),100.0));\n    u = Union(Boite(p,vec3(0,0,-15), 0.5, 30., 100., 0., 100.),u);\n    \n    return u;\n}\n\n\n// Potential field of the object\n// p : point\nfloat object(vec3 p)\n{\n  float u = DemiSphere(p,vec3(10.0,0.0,0.0),5.0, vec3(0,0,1));\n  float pl = Plan(p, vec3(0,0,-15), vec3(0, 0, 10));\n  \n  float v2 = moulin(p);\n  //v2 = Intersection(pl,v2);\n  v2 = Union(eau(p),v2);\n  \n  return v2;\n}\n\n\n\n// Analysis of the scalar field\n\n\n\n// Object normal\n// p : point\nvec3 ObjectNormal(vec3 p)\n{\n  const float eps=.001;\n  vec3 n;\n  float v=object(p);\n  n.x=object(vec3(p.x+eps,p.y,p.z))-v;\n  n.y=object(vec3(p.x,p.y+eps,p.z))-v;\n  n.z=object(vec3(p.x,p.y,p.z+eps))-v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\n// o : ray origin\n// u : ray direction\n// e : Maximum distance\n// h : hit\n// s : Number of steps\nfloat SphereTrace(vec3 o,vec3 u,float e,out bool h,out int s)\n{\n  h=false;\n  \n  // Start at the origin\n  float t=0.;\n  \n  for(int i=0;i<Steps;i++)\n  {\n    s=i;\n    vec3 p=o+t*u;\n    float v=object(p);\n    // Hit object\n    if(v<0.)\n    {\n      h=true;\n      break;\n    }\n    // Move along ray\n    t+=max(Epsilon,v);\n    // Escape marched too far away\n    if(t>e)\n    {\n      break;\n    }\n  }\n  return t;\n}\n\n// Lighting\n\n// Background color\n// d : Ray direction\nvec3 background(vec3 d)\n{\n  return mix(vec3(.0,.9,.99),vec3(.5,.1,.8),d.z*.5+.5);\n}\n\n// Shadowing\n// p : Point\n// n : Normal\n// l : Light direction\nfloat Shadow(vec3 p,vec3 n,vec3 l)\n{\n  bool h;\n  int s;\n  float t=SphereTrace(p+Epsilon*n,l,100.,h,s);\n  if(!h)\n  {\n    return 1.;\n  }\n  return 0.;\n}\n\n// Shading and lighting\n// p : Point\n// n : Normal at point\n// e : Eye direction\nvec3 Shade(vec3 p,vec3 n,vec3 e)\n{\n  // Point light\n  const vec3 lp=vec3(5.,10.,25.);\n  \n  // Light direction to point light\n  vec3 l=normalize(lp-p);\n  \n  // Ambient color\n  vec3 ambient=.25+.25*background(n);\n  \n  // Shadow computation\n  float shadow=Shadow(p,n,l);\n  \n  // Phong diffuse\n  vec3 diffuse=.35*clamp(dot(n,l),0.,1.)*vec3(1.,1.,1.);\n  \n  // Specular\n  vec3 r=reflect(e,n);\n  vec3 specular=.15*pow(clamp(dot(r,l),0.,1.),35.)*vec3(1.,1.,1.);\n  vec3 c=ambient+shadow*(diffuse+specular);\n  return c;\n}\n\n// Shading according to the number of steps in sphere tracing\n// n : Number of steps\nvec3 ShadeSteps(int n)\n{\n  float t=float(n)/(float(Steps-1));\n  return.5+mix(vec3(.05,.05,.5),vec3(.65,.39,.65),t);\n}\n\n// Picture in picture\n// pixel : Pixel\n// pip : Boolean, true if pixel was in sub-picture zone\nvec2 Pip(in vec2 pixel,out bool pip)\n{\n  // Pixel coordinates\n  vec2 p=(-iResolution.xy+2.*pixel)/iResolution.y;\n  if(pip==true)\n  {\n    const float fraction=1./4.;\n    // Recompute pixel coordinates in sub-picture\n    if((pixel.x<iResolution.x*fraction)&&(pixel.y<iResolution.y*fraction))\n    {\n      p=(-iResolution.xy*fraction+2.*pixel)/(iResolution.y*fraction);\n      pip=true;\n    }\n    else\n    {\n      pip=false;\n    }\n  }\n  return p;\n}\n\n// Image\nvoid mainImage(out vec4 color,in vec2 pxy)\n{\n  // Picture in picture on\n  bool pip=true;\n  \n  // Pixel\n  vec2 pixel=Pip(pxy,pip);\n  \n  // Mouse\n  vec2 m=iMouse.xy/iResolution.xy;\n  \n  // Camera\n  vec3 ro,rd;\n  Ray(m,pixel,ro,rd);\n  \n  // Trace ray\n  \n  // Hit and number of steps\n  bool hit;\n  int s;\n  \n  float t=SphereTrace(ro,rd,100.,hit,s);\n  \n  // Shade background\n  vec3 rgb=background(rd);\n  \n  if(hit)\n  {\n    // Position\n    vec3 p=ro+t*rd;\n    \n    // Compute normal\n    vec3 n=ObjectNormal(p);\n    \n    // Shade object with light\n    rgb=Shade(p,n,rd);\n  }\n  \n  // Uncomment this line to shade image with false colors representing the number of steps\n  if(pip==true)\n  {\n    rgb=ShadeSteps(s);\n  }\n  \n  color=vec4(rgb,1.);\n}\n\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec3 Rotation(vec3 p, vec3 c, vec3 r)\n{\n    \n    float cx = sin(-r.x);\n    float sx = cos(-r.x);\n    float cy = sin(-r.y);\n    float sy = cos(-r.y);\n    float cz = sin(-r.z);\n    float sz = cos(-r.z);\n    p -=c;\n    \n    mat3 Rx = mat3(1.0, 0.0, 0.0,   0.0, cx, -sx,   0.0, sx,cx);\n    mat3 Rz = mat3(cy, 0.0, -sy,    0.0,1.0,0.0,    sy, 0.0, cy);\n    mat3 Ry = mat3(cz, sz, 0.0,    -sz, cz, 0.0,    0, 0,1.0);\n    \n    return (Rx*Ry*Rz*p)+c;\n}\n\n\n//Rotation Horizontale\nvec3 RotationH(vec3 p, vec3 c, vec3 r)\n{\n    \n    float cx = sin(-r.x);\n    float sx = cos(-r.x);\n    float cy = sin(-r.y);\n    float sy = cos(-r.y);\n    float cz = sin(-r.z);\n    float sz = cos(-r.z);\n    p -=c;\n    \n    mat3 Rx = mat3(1.0, 0.0, 0.0,   0.0, cx, -sx,   0.0, sx,cx);\n    mat3 Ry = mat3(cy, 0.0, -sy,    0.0,1.0,0.0,    sy, 0.0, cy);\n    mat3 Rz = mat3(cz, sz, 0.0,    -sz, cz, 0.0,    0, 0,1.0);\n    \n    return (Rx*Ry*Rz*p)+c;\n}\n\n//Rotation Horizontale\nvec3 RotationHo(vec3 p, vec3 c, vec3 r)\n{\n    \n    float cx = sin(-r.x);\n    float sx = cos(-r.x);\n    float cy = sin(-r.y);\n    float sy = cos(-r.y);\n    float cz = sin(-r.z);\n    float sz = cos(-r.z);\n    p -=c;\n    \n    mat3 Rx = mat3(1.0, 0.0, 0.0,   0.0, cx, -sx,   0.0, sx,cx);\n    mat3 Ry = mat3(cy, 0.0, -sy,    0.0,1.0,0.0,    sy, 0.0, cy);\n    mat3 Rz = mat3(cz, sz, 0.0,    -sz, cz, 0.0,    0, 0,1.0);\n    \n    return (Rx*Ry*Rz*p);\n}\n\n\n\n\n//--------------------Operations----------------------------------------------\n\n// Intersection, preserve the index of first object\n// a, b : field function of left and right sub-trees\nfloat Intersection(float a,float b)\n{\n    return max(a,b);\n}\n\n// Union\n// a, b : field function of left and right sub-trees\nfloat Union(float a,float b)\n{\n    return min(a,b);\n}\n\n/// Segment\n// p : point\n// a,b\nfloat Segment(vec3 p, vec3 a, vec3 b) {\n    vec3 ba = b - a;\n    vec3 pa = p - a;\n    float t = dot(pa, ba) / dot(ba, ba);\n    vec3 c = ba * clamp(t, 0.0, 1.0);\n    return length(pa - c);\n}\n\n\n\n\n\n\n//----------------------Objets------------------------------------------------\n\n\n// Sphere \n// p : Point\n// c : Center \n// r : Radius\nfloat Sphere(vec3 p, vec3 c,float r)\n{\n  return length(p-c)-r;\n}\n\n//Plan\nfloat Plan(vec3 p, vec3 o, vec3 n)\n{\n  n = normalize(n);\n  return(dot(p-o, n));\n}\n\n//Demi-Sphere\nfloat DemiSphere(vec3 p, vec3 c, float r, vec3 n) {\n    float s = Sphere(p, c, r);\n    float pl = Plan(p, c, n);\n    return max(s, pl);\n}\n\n//Cube\nfloat Cube(vec3 p,vec3 c,float r)\n{\n    vec3 q = abs(p-c) - vec3(r);\n    return (length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0));\n}\n\n//Capsule\nfloat Capsule(vec3 p, vec3 a, vec3 b, float r) {\n\n    return Segment(p, a, b) - r;\n}\n\n//Cylindre\nfloat Cylindre(vec3 p, vec3 a, vec3 b, float r) {\n\n    float v = max(Capsule(p, a, b, r),\n                  -dot(p-b, normalize(a-b)));\n\n    v = max(v, -dot(p-a, normalize(b-a)));\n    return v;\n}\n\n//Tore\nfloat tore(vec3 p , vec2 r ){\n    float x =length(p.xz)-r.x;\n    return length(vec2(x,p.y))-r.y;\n}\n\n//Boite\n//h: hauteur\nfloat Boite(vec3 p, vec3 c, float r, float x, float y, float z, float h)\n{\n  vec3 p1 = c + vec3(r+h,0,0);\n  vec3 p2 = c + vec3(-r-x,0,0);\n  vec3 p3 = c + vec3(0,r+y,0);\n  vec3 p4 = c + vec3(0,-r-y,0);\n  vec3 p5 = c + vec3(0,0,r+z);\n  vec3 p6 = c + vec3(0,0,-r-z);\n  float plan1 = Plan(p, p1, vec3(1.0,0,0));\n  float plan2 = Plan(p, p2, vec3(-1.0,0,0));\n  float plan3 = Plan(p, p3, vec3(0,1.0,0));\n  float plan4 = Plan(p, p4, vec3(0,-1.0,0));\n  float plan5 = Plan(p, p5, vec3(0,0,1.0));\n  float plan6 = Plan(p, p6, vec3(0,0,-1.0));\n  \n  float v = max(plan6,\n            max(plan5,\n            max(plan4,\n            max(plan3,\n            max(plan1, plan2)))));\n  \n  return v;\n  \n}\n\n\n\n\n//----------------------Objets Complexes--------------------------------------\n\n\n\nfloat engrenageHpetit(vec3 p){\n    float disque = Cylindre(p, vec3(-7.7,0.3,1), vec3(-7.7,0.3,2), 5.);\n        \n    vec3 c = vec3(RotationH(p, vec3(0, 0, 0), vec3(0.8,0,0)));\n    \n    float u = Cube(p, vec3(-3,0.3,1), 1.);\n    u = Union(u, Cube(p, vec3(-12.5,0.3,1), 1.));\n    u = Union(u, Cube(p, vec3(-7.7 ,5,1), 1.));\n    u = Union(u, Cube(p, vec3(-7.7,-4.5,1), 1.));\n    \n    u = Union(u, Cube(c, vec3(1,10.5,5), 1.));\n    u = Union(u, Cube(c, vec3(1,0.7,5), 1.));\n    u = Union(u, Cube(c, vec3(1,5.7,0.3), 1.));\n    u = Union(u, Cube(c, vec3(1,5.7,9.9), 1.));\n    \n    float v = Intersection(disque, -u);\n                   \n    return v;\n}\n\n\nfloat engrenageVpetit(vec3 p){\n    float disque = Cylindre(p, vec3(0,1,2), vec3(1,1,2), 5.);\n        \n    vec3 c = vec3(RotationH(p, vec3(0, 0, 0), vec3(0,1.3,0)));\n    vec3 d = vec3(RotationH(p, vec3(0, 0, 0), vec3(0,0.5,0)));\n    \n    float u = Cube(d, vec3(2.1,4.5,-1), 1.);\n    u = Union(u, Cube(d, vec3(2.1,-4.5,-1), 1.));\n    u = Union(u, Cube(d, vec3(7,0,-1), 1.));\n    u = Union(u, Cube(d, vec3(-2.5,0,-1), 1.));\n    \n    u = Union(u, Cube(c, vec3(6.1,-1.8,-1), 1.));\n    u = Union(u, Cube(c, vec3(-3.1,-1.8,-1), 1.));\n    u = Union(u, Cube(c, vec3(1.5,3,-1), 1.));\n    u = Union(u, Cube(c, vec3(1.5,-6,-1), 1.));\n    \n    float v = Intersection(disque, -u);\n                   \n    return v;\n}\n\n\n\nfloat engrenageHgrand(vec3 p){\n    float disque = Cylindre(p, vec3(3,5,15), vec3(3,5,16), 10.);\n    \n    vec3 p1 = p+vec3(-3,-5,0);\n    \n    vec3 c = vec3(RotationH(p1, vec3(0, 0, 0), vec3(0.8,0,0)));\n    vec3 d = vec3(RotationH(p1, vec3(0, 0, 0), vec3(0,0,0.4)));\n    vec3 e = vec3(RotationH(p1, vec3(0, 0, 0), vec3(0,0,1.2)));\n    \n    float h = 15.;\n    \n    float u = Cube(p1, vec3(0,-10,h), 1.);\n    u = Union(u, Cube(p1, vec3(0,10,h), 1.));\n    u = Union(u, Cube(p1, vec3(10,0,h), 1.));\n    u = Union(u, Cube(p1, vec3(-10,0,h), 1.));\n    \n    u = Union(u, Cube(c, vec3(h,10,0), 1.));\n    u = Union(u, Cube(c, vec3(h,-10,0), 1.));\n    u = Union(u, Cube(c, vec3(h,0,10), 1.));\n    u = Union(u, Cube(c, vec3(h,0,-10), 1.));\n    \n    u = Union(u, Cube(d, vec3(h,10,0), 1.));\n    u = Union(u, Cube(d, vec3(h,-10,0), 1.));\n    u = Union(u, Cube(d, vec3(h,0,10), 1.));\n    u = Union(u, Cube(d, vec3(h,0,-10), 1.));\n    \n    u = Union(u, Cube(e, vec3(h,10,0), 1.));\n    u = Union(u, Cube(e, vec3(h,-10,0), 1.));\n    u = Union(u, Cube(e, vec3(h,0,10), 1.));\n    u = Union(u, Cube(e, vec3(h,0,-10), 1.));\n    \n    float v = Intersection(disque, -u);\n                   \n    return v;\n}\n\nfloat engrenageVgrand(vec3 p){\n    float disque = Cylindre(p, vec3(-25,1,2), vec3(-24,1,2), 10.);\n        \n    vec3 c = vec3(RotationH(p, vec3(0, 0, 0), vec3(0,1.3,0)));\n    vec3 d = vec3(RotationH(p, vec3(0, 0, 0), vec3(0,0.5,0)));\n    vec3 e = vec3(RotationH(p, vec3(0, 0, 0), vec3(0,1.7,0)));\n    vec3 f = vec3(RotationH(p, vec3(0, 0, 0), vec3(0,2.5,0)));\n    \n    float u = Cube(d, vec3(2.1,9.7,25), 1.);\n    u = Union(u, Cube(d, vec3(2.1,-9.7,25), 1.));\n    u = Union(u, Cube(d, vec3(11.8,0,25), 1.));\n    u = Union(u, Cube(d, vec3(-7.5,0,25), 1.));\n    \n    u = Union(u, Cube(c, vec3(11,-1.8,25), 1.));\n    u = Union(u, Cube(c, vec3(-8,-1.8,25), 1.));\n    u = Union(u, Cube(c, vec3(1.5,8,25), 1.));\n    u = Union(u, Cube(c, vec3(1.5,-11.3,25), 1.));\n    \n    u = Union(u, Cube(e, vec3(0.8,7.5,25), 1.));\n    u = Union(u, Cube(e, vec3(0.8,-11.7,25), 1.));\n    u = Union(u, Cube(e, vec3(10.3,-2.2,25), 1.));\n    u = Union(u, Cube(e, vec3(-8.7,-2.,25), 1.));\n    \n    u = Union(u, Cube(f, vec3(-0.6,7.5,25), 1.));\n    u = Union(u, Cube(f, vec3(-1.1,-11.5,25), 1.));\n    u = Union(u, Cube(f, vec3(-10.5,-1.6,25), 1.));\n    u = Union(u, Cube(f, vec3(8.5,-2.2,25), 1.));\n    \n    float v = Intersection(disque, -u);\n    float v1 = Union(disque, u);\n                   \n    return v;\n}\n\n\n//-----------------------------------------------------------------------------\n\n\n// Texturing and noise \n\n// Hashing function\n// Returns a random number in [-1,1]\n// p : Vector in space\nfloat Hash(in vec3 p)  \n{\n    p  = fract( p*0.3199+0.152 );\n\tp *= 17.0;\n    return fract( p.x*p.y*p.z*(p.x+p.y+p.z) );\n}\n\n\n// Procedural value noise with cubic interpolation\n// x : Point \nfloat Noise(in vec3 p)\n{\n    vec3 i = floor(p);\n    vec3 f = fract(p);\n  \n        f = f*f*(5.0-4.1*f);\n    // Could use quintic interpolation instead of cubic\n    // f = f*f*f*(f*(f*6.0-15.0)+10.0);\n\n    return mix(mix(mix( Hash(i+vec3(0,0,0)), \n                        Hash(i+vec3(1,0,0)),f.x),\n                   mix( Hash(i+vec3(0,1,0)), \n                        Hash(i+vec3(1,1,0)),f.x),f.y),\n               mix(mix( Hash(i+vec3(0,0,1)), \n                        Hash(i+vec3(1,0,1)),f.x),\n                   mix( Hash(i+vec3(0,1,1)), \n                        Hash(i+vec3(1,1,1)),f.x),f.y),f.z);\n}\n\n\n\n\n\n\n\n\n//-----------Camera----------------------------------------------------------\n\n// Rotation matrix around z axis\n// a : Angle\nmat3 Rz(float a)\n{\n  float sa=sin(a);float ca=cos(a);\n  return mat3(ca,sa,0.,-sa,ca,0.,0.,0.,1.);\n}\n\n// Compute the ray\n//      m : Mouse position\n//      p : Pixel\n// ro, rd : Ray origin and direction\nvoid Ray(vec2 m,vec2 p,out vec3 ro,out vec3 rd)\n{\n  float a=3.*3.14*m.x;\n  float le=3.5;\n  \n  // Origin\n  ro=vec3(20.,50.,10.);\n  ro*=Rz(a);\n  \n  // Target point\n  vec3 ta=vec3(0.,0.,0.);\n  \n  // Orthonormal frame\n  vec3 w=normalize(ta-ro);\n  vec3 u=normalize(cross(w,vec3(0.,0.,1.)));\n  vec3 v=normalize(cross(u,w));\n  rd=normalize(p.x*u+p.y*v+le*w);\n}\n","name":"Common","description":"","type":"common"}]}