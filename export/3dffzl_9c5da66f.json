{"ver":"0.1","info":{"id":"3dffzl","date":"1588821717","viewed":655,"name":"Hexagonal Automaton","username":"matthen","description":"each tile grows if it has exactly one neighbour","likes":13,"published":1,"flags":32,"usePreview":0,"tags":["cellular","tiling","hexagonal","automaton"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SQRT3 1.73205080757\n\nivec3 getCell(in ivec2 p) {\n    ivec2 r = ivec2(textureSize(iChannel0, 0));\n    p = (p+r) % r;\n    int alive = (texelFetch(iChannel0, p, 0 ).x > 0.5 ) ? 1 : 0;\n    int age = int(texelFetch(iChannel0, p, 0 ).y);\n    int birth = int(texelFetch(iChannel0, p, 0 ).z);\n    return ivec3(alive, age, birth);\n}\n\n\nfloat hexDist(vec2 p) {\n\tp = abs(p);\n    float c = dot(p, normalize(vec2(1, 1.73)));\n    c = max(c, p.x);\n    return c;\n}\n\nvec3 gradient(in float r) {\t\n    r /= 0.8;\n    vec3 rainbow = 0.5 + 0.5 * cos((0.2 + r * vec3(0.3, 0.2, 0.8) + vec3(0.1, 0.45, 0.5)*6.));\n    rainbow = mix(rainbow, vec3(1., 1., 1.), 0.3);\n    return rainbow;\n}\n\n\nvoid hexCoords(vec2 uv, out vec2 hc, out ivec2 id) {\n    // x is theta\n    // y is r\n    // z & w is id\n\tvec2 r = vec2(1., SQRT3);\n    vec2 h = r * .5;\n  \n    \n    vec2 a = mod(uv, r) - h;\n    vec2 b = mod(uv - h, r) - h;\n    \n    vec2 gv = dot(a, a) < dot(b,b) ? a : b;\n    \n    float x = atan(gv.x, gv.y);\n    float y = .5 - hexDist(gv);\n    vec2 idf = uv - gv;\n    idf.x = round(idf.x * 2.);\n    idf.y = round(idf.y * 2. / SQRT3);\n    id = ivec2(idf);\n    hc = vec2(x, y);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - .5*iResolution.xy) / iResolution.y;   \n    uv = vec2(uv.y, uv.x);\n    float t = iTime;\n    float zoom = 7. + 60. * smoothstep(1., 15., t);\n    uv *= zoom;\n    vec2 hc;\n    ivec2 id;\n    hexCoords(uv, hc, id);\n    \n    ivec3 cell = getCell(id);\n    \n    \n    float fill = smoothstep(60., 0., float(cell.y)); \n    float edge = max(0.04, zoom / 400.);\n    \n    vec3 col = gradient(float(cell.z));\n    \n    col *= float(cell.x);\n    col *= 1. - smoothstep(0., 0.01, fill - hc.y + edge);\n    \n    \n    //if (zoom < 22.) {\n\t//    col = max(col, smoothstep(22., 10., zoom) - smoothstep(0., 0.03, hc.y));\n    //}\n    \n    fragColor = vec4(col, 1.);\n\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nivec3 getCell(in ivec2 p) {\n    ivec2 r = ivec2(textureSize(iChannel0, 0));\n    p = (p+r) % r;\n    int alive = (texelFetch(iChannel0, p, 0 ).x > 0.5 ) ? 1 : 0;\n    int age = int(texelFetch(iChannel0, p, 0 ).y);\n    int birth = int(texelFetch(iChannel0, p, 0 ).z);\n    return ivec3(alive, age, birth);\n}\n\nfloat hash(vec2 v) {\n    return fract(\n        sin(196.6 * v.x + 723.3 * v.y) * 128.921 + 238.6 * v.x\n    );\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    ivec2 px = ivec2( fragCoord );\n    \n    if(iFrame < 60 && px.x == 0 && px.y == 0) {\n        fragColor = vec4(1., 60., 0., 0.);\n        return;\n    }\n    \n    ivec3 thisCell = getCell(px);\n    \n    if (iFrame % 30 != 0 || thisCell.x == 1) {\n        int inc = int(thisCell.x == 1);\n        fragColor = vec4(thisCell.x, thisCell.y + inc, thisCell.z, 0.);\n        return;\n    }\n    \n    \n    ivec3 c = ivec3(1, -1, 0);\n    ivec3 c2 = ivec3(2, -2, 0);\n    \n\tint numNeighbours =   (\n        getCell(px+c.xy).x + getCell(px+c2.xz).x + getCell(px+c.xx).x\n      + getCell(px+c.yy).x + getCell(px+c2.yz).x + getCell(px+c.yx).x\n    );\n\n\n    float newCell = (numNeighbours == 1) ? 1. : 0.; \n    \n    \n    \n\t\n\tfragColor = vec4(newCell, 0., float(iFrame), 0.);\n    \n}","name":"Buffer A","description":"","type":"buffer"}]}