{"ver":"0.1","info":{"id":"wtlSRr","date":"1561922211","viewed":222,"name":"riff #3006","username":"nabr","description":"ducks","likes":5,"published":1,"flags":8,"usePreview":0,"tags":["minimal","synth","rhytm","ircamforcows"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":3,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// nabr\n// https://www.shadertoy.com/view/wtlSRr\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// https://creativecommons.org/licenses/by-nc-sa/3.0/\n\n\n\n\n// soundin shader by FabriceNeyret2\n#define C(c) U.x-=.5; T+= U.x<.0||U.x>1.||U.y<0.||U.y>1. ?vec4(0): textureGrad(iChannel3, U/16. + fract( vec2(c, 15-c/16) / 16.), dFdx(U/16.),dFdy(U/16.) )\n#define initMsg vec4 T = vec4(0)\n#define endMsg  return length(T.yz)==0. ? 0. : T.x\n\nfloat message(vec2 U) { // to alter in the icon with the alter message\n    vec4 T = vec4(0);   // or: initMsg;\n    C(83);C(111);C(117);C(110);C(100);C(32);C(105);C(110); // message \"Sound in\"\n    return length(T.yz)==0. ? -1. : T.x; // or: endMsg;\n} // EOL soundin shader\n\n\n\n#define rndp(rng, maxval)((1315313u % (rng + 1u)) % maxval)\nvoid mainImage(out vec4 O, in vec2 U )\n{\n    if (iResolution.y<2000.) {float c=message((U/iResolution.y-vec2(-0.04, .85))*10.);if(c>=0.){O=vec4(c);return;}}   \n    \n    U = (U/iResolution.xy);\n    O += 2. /(20.*sin(2.-U.x*20.)+vec4(0, ceil(sin(iTime*7.)/sin(iTime)), 2, 1));\n    vec2 u = vec2(float(rndp(uint(sin(U.y+10.)+iTime*10.), 5u )),sin(iTime*.2+U.y*15.));\n    O += (6.*sin(.5*u.x*u.y));\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// nabr\n// https://www.shadertoy.com/view/wtlSRr\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// https://creativecommons.org/licenses/by-nc-sa/3.0/\n\n\n\n\n// drums https://www.shadertoy.com/view/WsX3R4\n// by gaz\n\nfloat adsr(float t, vec4 e, float s)\n{\n    return max(0.0, min(1.0, t / max(0.0001, e.x))\n            - min((1.0 - s), max(0.0, t - e.x)\n                  * (1.0 - s) / max(0.0001, e.y))\n            - max(0.0, t - e.z) * s / max(0.0001, e.w));\n}\nfloat square(float f)\n{\n    return sign(fract(f) - 0.5);\n}\nfloat kick(float t)\n{\n    return cos(315.0 * t - 10. * exp(-50. * t) + 0.3) * adsr(t, vec4(0.0, 0.3, 0.0, 0.0), 0.0);\n}\nfloat snare(float t)\n{\n    return square(3063.0 * t * sin(t * 8000.0)) * adsr(t, vec4(0.005, 0.08, 0.0, 0.0), 0.0);\n}\nfloat closeHihat(float t)\n{\n    return square(2763.0 * t * sin(t * 8500.0)) * adsr(t, vec4(0.0, 0.03, 0.0, 0.0), 0.0);\n}\nfloat openHihat(float t)\n{\n    return square(2763.0 * t * sin(t * 8300.0)) * adsr(t, vec4(0.0, 0.05, 0.03, 0.03), 0.5);\n}\n\n\n\n// ---------------- SYNTH\n\n#define rndp(rng, maxval) ((1315313u % (rng + 1u)) % maxval)\n#define tau (8. * atan(1.))\nfloat synth(in float rt)\n{\n    // init\n    float s0 = 0., s0a = 0., s0b = 0.;\n    \n    // randomize pitch\n    float m0 = 440. * float(rndp(uint(.5 * rt), 5u)),\n          m1 = 220. * float((uint(rt * 6.) % 3u) + rndp(uint(rt + 1.), 5u));\n\n    // arpeggiator part\n    s0b += 2. * abs(.25 - sin(1.01 * m1 * tau * rt));\n    s0b *= min(1., 4. * fract(rt * 12.)) * max(0., 1. - fract(rt * 12.));\n    s0b *= exp(-fract(rt * 2.) * 1.5);\n\n    // interations adding sub frequencies \n    const float sps = 6.;\n    for (float n = 0.; n < sps; n++)\n    {\n        // main \n        s0 += (sin(m0 * tau * rt) * 2. + .25);\n        s0 += length(cos(m0 * rt * tau)); //somethin good\n        \n        // will make noise\n        s0a += abs(1. - 2. * sin(m0 * tau * rt));\n        \n        m0 = (m0 *  2. ) * .375; // add ovt overtones x detune\n        \n        // noise timing\n        ((mod(rt, 4.) <= 1.)?\n            (s0 = floor(.5 * s0a))\n              :(s0 += s0b));     \n    };\n    \n\t// env\n    s0 *= pow(2., 1. - fract(rt));\n    // attack decay\n    s0 *= min(1., 2. * fract(rt)) * max(0., 1. - fract(rt));\n    // dividing stuff\n    s0 /= (sps * 4.);\n\n    // out\n    return s0;\n}\n\n\nvec2 mainSound( in int samp,float time)\n{\n    vec2 mst = vec2(0., 0.), snd = vec2(0);\n \n    float pan = (sin(time * 2.) * .75 + .75); //autopan\n    \n    snd = vec2(dot(pan, synth(time * 1.001)), \n               dot(pan, synth(time * 1.0017)));\n    \n    mst = vec2(synth(time + .021), synth(time + .022));\n    mst += .5 * (mst + .25 * snd);\n\t\n    // BMP time / 60. * 110.\n    float tck = time * 1.833334; \n\n    // ---------------- RHYTM\n    \n    // base drum\n    float rbd[] = float[](1., 0., 1., 1., 0., 0., 1.);\n    // tom\n    float rom[] = float[](1., 0., 1., 0., 1.);\n    \n    float k = kick(fract(tck) * rbd[int(tck) % 7]);\n          k += kick(fract(2. * tck) * rom[int(2. * tck) % 5]);\n\n    float rsr[] = float[](0., 0., 1., 0., 1., 1.);\n    \n    float ch = snare(fract(2. * tck) * rsr[int(2. * tck) % 6]);\n\n    // hihats \n    float rcht[] = float[](1., 0., 1., 0., 1., 1.);\n    float roht[] = float[](0., 0., 1., 0., 1., 1.);\n\n    float hht = closeHihat(fract(4. * tck) * rcht[int(4. * tck) % 5]);\n          hht += .5 * closeHihat(fract(2. * tck) * rcht[int(6. * tck) % 5]);\n          hht += .5 - .5 * openHihat(fract(2. * tck) * roht[int(6. * tck) % 6]);\n\n    \n    // ---------------- REVERB\n    \n    // https://www.shadertoy.com/view/XldcRr\n    // by TekF\n    vec2 rev = vec2(1);\n    const float invRate = 1. / 5.5;\n    float sum = 0.;\n    float rand = 1., t2 = 1., amp = 1.;\n    for (float _ii = 0.; (_ii <= 1.); _ii += invRate)\n    {\n        rand = fract(120. * sin(_ii * 1000.));\n        t2 = (invRate + _ii) + (1. * rand);\n        amp = exp2(-_ii * t2);\n        rev += vec2(synth(.51 + time * 1.0002), \n                    synth(.5 + time * 1.0001)) * amp;\n        sum += amp;\n    };\n\n    rev /= sum;\n    \n    // ---------------- MASTER\n\n    // volume synth, drums, master\n    float vs = 0.56, vd = 0.4, vm = min(1., .25*time); //1.6-(exp(-time)*ceil(time*5.)); \n    \n    return ((vs * (.65 * mst - .5 * rev))\n               + (vd * ((vec2(.2 * (ch * .6 + hht), .2 * (ch * .8 + hht * .7)) \n                        + (.55 * k))))) * vm;\n}","name":"Sound","description":"","type":"sound"}]}