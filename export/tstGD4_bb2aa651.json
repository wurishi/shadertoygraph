{"ver":"0.1","info":{"id":"tstGD4","date":"1568579665","viewed":104,"name":"experiment#1","username":"mauriciovander","description":"Experiment #1 after \"Shader Showdown Seminar\"\n\n","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["cube","sphere","rotation","raymatching","subtraction"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 rot(float a) \n{\n  return mat2(\n    cos(a), sin(a),\n    -sin(a), cos(a)\n  );\n}\n\nfloat box(vec3 p, vec3 size)\n{\n    p.xy *= rot(iTime*.9);\n    return length(max(abs(p) - size, 0.));\n}\n\nfloat sphere(vec3 p, float radius)\n{\n  return length(p) - radius;\n}\n\nfloat map(vec3 p)\n{\n  p.xy *= rot(p.z*.2);\n  \n  float period = 1.;\n  p = mod(p,period)-period*.5;\n\n  float d = max( -sphere(p, .2), box(p , vec3(.15)) );\n \n  return d;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = vec2(fragCoord.xy / iResolution.xy);\n  uv -= 0.5;\n  uv /= vec2(iResolution.y / iResolution.x, 1);\n\n  vec3 ro = vec3(0., 1., -3.)*iTime*1.;\n    \n \n  vec3 rd = normalize(vec3(uv, 1.3));  \n\n   \n  vec2 e = vec2(0.000035);\n  \n  vec3 p = ro;\n  float shad = 0.;\n  \n  for(int i=0; i<32; i++)\n  {\n    // distance\n    float d = map(p);\n    if(d <  0.01)\n    {\n      shad = float(i)/30.;\n      break;\n    }\n    p += d * rd;\n  }\n    \n    \n  vec3 color = normalize(vec3(p.x*.2, shad, .3));\n  float c = color.r / color.g + color.b;\n\n  fragColor = vec4(normalize(vec3(c)), 1.);\n    \n}","name":"Image","description":"","type":"image"}]}