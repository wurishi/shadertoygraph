{"ver":"0.1","info":{"id":"ddVyW1","date":"1696079740","viewed":40,"name":"Dynamic wave gen ","username":"shaderwho","description":"wave gen","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["waves","wave","wind"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// OpenGL Shading Language (GLSL) Script for Wind Simulation\n//\n// This script contains various functions to compute noise, which can be used to simulate wind.\n// The functions include modulo operations, permutation, inverse square root approximation, and a fade function.\n//\n// === Instructions ===\n// 1. Modify constants carefully to change approximation accuracy and noise patterns.\n// 2. Alter permutations and modulo operations with caution to retain core properties.\n// 3. Adjust fade function to smooth out the final output of noise as needed.\n// 4. Experiment with different values and observe the results to find optimal settings.\n//\n// === Functions ===\n// - mod289(vec3): Modulo operation for vec3 to prevent tiling artifacts.\n// - mod289(vec4): Modulo operation for vec4 to prevent tiling artifacts.\n// - permute(vec4): Permutation function to shuffle input values.\n// - taylorInvSqrt(vec4): Computes an approximation of 1/sqrt(r) for each component of a vec4.\n// - fade(float): Fade function to smooth out the final output of noise.\n\n// Modulo operation for vec3, prevents tiling artifacts, used for noise computation\nvec3 mod289(vec3 x) {\n    // This can be modified, but be cautious as it may impact the noise pattern\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\n// Modulo operation for vec4, prevents tiling artifacts, used for noise computation\nvec4 mod289(vec4 x) {\n    // This can be modified, but be cautious as it may impact the noise pattern\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\n// Permutation function, shuffles the input values, used for noise computation\nvec4 permute(vec4 x) {\n    // This can be modified to alter the permutation but should retain its core property\n    return mod289(((x*34.0)+1.0)*x);\n}\n\n// Computes an approximation of 1/sqrt(r) for each component of a vec4\nvec4 taylorInvSqrt(vec4 r) {\n    // Modifying constants can change the approximation accuracy\n    return 1.79284291400159 - 0.85373472095314 * r;\n}\n\n// Fade function to smooth out the final output of noise\nfloat fade(float t) {\n    // The constants here (6.0, 15.0, 10.0) can be modified to change the fading curve\n    return t * t * t * (t * (t * 6.0 - 15.0) + 10.0);\n}\n\n// Overloaded fade function to handle vec3\nvec3 fade(vec3 t) {\n    // The constants here (6.0, 15.0, 10.0) can be modified to change the fading curve\n    return t * t * t * (t * (t * 6.0 - 15.0) + 10.0);\n}\n\n// Implementation of Perlin noise\nfloat cnoise(vec3 P)\n{\n    vec3 Pi0 = floor(P); \n    vec3 Pi1 = Pi0 + vec3(1.0); \n    Pi0 = mod289(Pi0);\n    Pi1 = mod289(Pi1);\n    vec3 Pf0 = fract(P); \n    vec3 Pf1 = Pf0 - vec3(1.0); \n    vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n    vec4 iy = vec4(Pi0.yy, Pi1.yy);\n    vec4 iz0 = Pi0.zzzz;\n    vec4 iz1 = Pi1.zzzz;\n\n    vec4 ixy = permute(permute(ix) + iy);\n    vec4 ixy0 = permute(ixy + iz0);\n    vec4 ixy1 = permute(ixy + iz1);\n\n    vec4 gx0 = ixy0 * (1.0 / 7.0);\n    vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n    gx0 = fract(gx0);\n    vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n    vec4 sz0 = step(gz0, vec4(0.0));\n    gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n    gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n    vec4 gx1 = ixy1 * (1.0 / 7.0);\n    vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n    gx1 = fract(gx1);\n    vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n    vec4 sz1 = step(gz1, vec4(0.0));\n    gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n    gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n    vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n    vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n    vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n    vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n    vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n    vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n    vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n    vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n    vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g100, g100), dot(g010, g010), dot(g110, g110)));\n    g000 *= norm0.x;\n    g100 *= norm0.y;\n    g010 *= norm0.z;\n    g110 *= norm0.w;\n    vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g101, g101), dot(g011, g011), dot(g111, g111)));\n    g001 *= norm1.x;\n    g101 *= norm1.y;\n    g011 *= norm1.z;\n    g111 *= norm1.w;\n\n    float n000 = dot(g000, Pf0);\n    float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n    float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n    float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n    float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n    float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n    float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n    float n111 = dot(g111, Pf1);\n\n    vec3 fade_xyz = fade(Pf0);\n    vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n    vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n    float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\n    return 50.2 * n_xyz; //\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = uv * 20.0 - 10.0; // Modified zoom level for better visualization\n\n    float lineDensity = 2.0;\n    vec2 grid = fract(uv * lineDensity);\n\n    float steadyBreeze = uv.x * 0.5; \n    float wind = cnoise(vec3(uv, iTime)) * 10.1 + steadyBreeze; \n    grid.y += wind; \n\n    float intensity = smoothstep(0.02, 0.03, min(grid.x, grid.y));\n\n    vec3 col = mix(vec3(0.5, 0.5, 0.5), // Dark gray color for background\n                   vec3(0.98, 0.5, 0.447), // Salmon red color for lines\n                   intensity); // Interpolate between background and line color based on intensity\n    col *= (.5 + 0.5 * sin(10.0 * intensity + iTime)); // Make lines glow at peaks by modulating the color with a sinusoidal function\n\n    fragColor = vec4(col, 1.0); // Set fragment color\n}\n\n","name":"Image","description":"","type":"image"}]}