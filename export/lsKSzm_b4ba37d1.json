{"ver":"0.1","info":{"id":"lsKSzm","date":"1463642018","viewed":935,"name":"Circular Audio Spectrum","username":"vochsel","description":"A little visualizer I made. Inspired by this image I found on google images: [url=https://s-media-cache-ak0.pinimg.com/736x/8e/16/74/8e1674c64b52ef8688bdf5edbdfe840a.jpg]Reference Image[/url] ","likes":14,"published":1,"flags":96,"usePreview":0,"tags":["2d","music","audio","visualizer","multipass"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Created by Ben Skinner - @vochsel\n//Song - Mr Suicide Sheep - Falling\n\n#define PI 3.141592\n\n#define rgb(r, g, b) vec3(float(r)/255., float(g)/255., float(b)/255.)\n\n#define COL_A rgb(251,184,132)\n#define COL_B rgb(213,50,98) \n#define COL_C rgb(79,202,241)\n\n//HSV convertors http://lolengine.net/blog/2013/07/27/rgb-to-hsv-in-glsl\nvec3 rgb2hsv(vec3 c)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = c.g < c.b ? vec4(c.bg, K.wz) : vec4(c.gb, K.xy);\n    vec4 q = c.r < p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvec2 spec(float q)\n{\n    return texture(iChannel0, vec2(q, 0.0)).xy;\n}\n\nfloat circle(vec2 q, vec2 p, float rad)\n{\n    float l = length(q - p);\n    \n    return smoothstep(rad, rad - 0.005, l);\n}\n\nvec3 rand(float x)\n{\n    return texture(iChannel1, vec2(x, 0.0)).xyz;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 sc = fragCoord.xy / iResolution.xy;\n    vec2 uv = sc * 2.0 - 1.0;\n    float aspect = iResolution.x/iResolution.y;\n    uv.x *= aspect;\n    \n    float t = iTime;\n    \n    vec3 col = vec3(0.15);\n   \n    float cRad = 0.75;\n    const float res = 140.0;\n    \n    for(float i = PI*1.99; i > 0.0; i-=PI/res*2.0)\n    {\n        float x = sin(i) * cRad;\n        float y = cos(i) * cRad;\n        \n        float t = float(i)/res * 2.;\n        \n        vec2 s = spec(t);\n        \n        float r = pow(s.x, 5.5)*.05 + 0.01;\n        //r *= (PI*2.75-i)*0.3;\n        \n        float c = circle(uv, vec2(x,y), r);\n    \t       \n        //vec3 cCol = mix(COL_C, COL_B, smoothstep(0.0, 0.072, r));\n        //cCol = mix(cCol, COL_A, smoothstep(0.072, 0.172, r));\n        vec3 cCol = hsv2rgb(vec3(s.y*0.75, 0.3, .85)) - rand(s.y).x*0.2;    \n        \n    \tcol = mix(col, cCol, c);\n    }\n    col += texture(iChannel1, uv*2.).x*.05;\n    \n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"MtjGRK","filepath":"https://soundcloud.com/eclecticmethod/omle","previewfilepath":"https://soundcloud.com/eclecticmethod/omle","type":"musicstream","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float spec(float x)\n{\n    return texture(iChannel1, vec2(x, 0.0)).x;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 px = 1.0/iResolution.xy;\n   \tvec2 sc = fragCoord.xy / iResolution.xy; \n    \n    vec2 storage = vec2(0.0); \n    \n    if(sc.x < px.x) {\n        //storage = (spec(0.7) + spec(0.52)) / 2.0;\n        storage.x = spec(.01);\n        storage.y = iTime;\n    }\n    else\n\t   storage = texture(iChannel0, sc - vec2(px.x, 0.0)).xy;\n  \n    fragColor = vec4(storage, 0.0, 0.0);\n}\n\n","name":"Buffer A","description":"","type":"buffer"}]}