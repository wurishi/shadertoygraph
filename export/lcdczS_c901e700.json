{"ver":"0.1","info":{"id":"lcdczS","date":"1730838996","viewed":88,"name":"Fork cartoon kid-J","username":"jorge2017a2","description":"cartoon kid I made to practice character modelling","likes":14,"published":1,"flags":0,"usePreview":0,"tags":["cartoon","human"],"hasliked":0,"parentid":"DlfBRr","parentname":"cartoon kid"},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//----------image\n//por jorge2017a2-\n\n//referencia \n/////https://www.shadertoy.com/view/DlfBRr\n//Forked from cartoon kid\n\n#define MAX_STEPS 100\n#define MAX_DIST 255.\n#define MIN_DIST 0.001\n#define EPSILON 0.001\n#define Ka 0.5\n#define Kd 0.4\nvec3 GetColorYMaterial(vec3 p,  vec3 n, vec3 ro,  vec3 rd, int id_color, float id_material);\nvec3 getMaterial( vec3 pp, float id_material);\nvec3 light_pos1;  vec3 light_color1 ;\nvec3 light_pos2;  vec3 light_color2 ;\n\n#define opU2(d1, d2) ( d1.x < d2.x ? d1 : d2 )\n\n\n\n\nfloat Sdf_I(float distA, float distB)\n\t{ return max(distA, distB);}\nfloat Sdf_U(float distA, float distB)\n\t{ return min(distA, distB);}\nfloat Sdf_D(float distA, float distB)\n\t{ return max(distA, -distB);}\n\n\n\n\nfloat sdSphere( vec3 p, float s )\n\t{ return length(p)-s;}\nfloat sdBox( vec3 p, vec3 b )\n\t{ vec3 d = abs(p) - b;   return length(max(d,0.0))+ min(max(d.x,max(d.y,d.z)),0.0); }\n\nfloat sdCylinderYZ( vec3 p, vec2 h )\n\t{ vec2 d = abs(vec2(length(p.yz),p.x)) - h; return min(max(d.x,d.y),0.0) + length(max(d,0.0)); }\nfloat sdCylinderXZ( vec3 p, vec2 h )\n\t{ vec2 d = abs(vec2(length(p.xz),p.y)) - h; return min(max(d.x,d.y),0.0) + length(max(d,0.0)); }\nfloat sdCylinderXY( vec3 p, vec2 h )\n\t{ vec2 d = abs(vec2(length(p.xy),p.z)) - h; return min(max(d.x,d.y),0.0) + length(max(d,0.0)); }\n\n\n\nvec3 rotate_x(vec3 p, float phi)\n{   float c = cos(phi);\tfloat s = sin(phi);\n    return vec3(p.x, c*p.y - s*p.z, s*p.y + c*p.z);\n}\nvec3 rotate_y(vec3 p, float phi)\n{\tfloat c = cos(phi);\tfloat s = sin(phi);\n\treturn vec3(c*p.x + s*p.z, p.y, c*p.z - s*p.x);\n}\nvec3 rotate_z(vec3 p, float phi)\n{\tfloat c = cos(phi);\tfloat s = sin(phi);\n\treturn vec3(c*p.x - s*p.y, s*p.x + c*p.y, p.z);\n}\n\n\nmat2 rot2d(float theta)\n{\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat2(\n        c, -s,\n        s, c);\n}\n\nfloat sdEllipsoid(vec3 p, vec3 r)\n{\n    float l = length(p/r);\n    float grad = length(p/(r*r))/l;\n    return (l-1.0)/grad;\n}\n\nfloat smin(float a, float b, float k)\n{\n    float term = max(0.0, k - abs(a - b));\n    return min(a, b) - 0.25/k*term*term;\n}\n\nfloat smax(float a, float b, float k)\n{\n    float term = max(0.0, k - abs(a - b));\n    return max(a, b) + 0.25/k*term*term;\n}\n\n\nvec2 cs(float theta)\n{  return vec2(sin(theta), cos(theta));  }\n\nfloat sdSegment2(vec3 p, vec3 a, vec3 b, float r)\n{\n    vec3 ap = p - a;\n    vec3 ab = b - a;\n    float t = clamp(dot(ap, ab) / dot(ab, ab), 0.0, 1.0);\n    return length(ap - t * ab) - r;\n}\n\nfloat sdSegment(vec3 p, float h, float r)\n{\n    p.y = abs(p.y);\n    p.y = max(0.0, p.y - 0.5*h);\n    return length(p) - r;\n}\n\n\nvec2 GetDist(vec3 p  ) \n{\tvec2 res= vec2(9999.0, -1.0);  \n     p.y=p.y+10.0;\n       \n     float ang=mix(360.0,400.0, sin(iTime) );\n     p=rotate_y(p, radians(ang));\n     \n     \n    vec3 p0=p;\n\t\n    float head = sdSphere(p, 1.0);\n    float jaw = sdEllipsoid(p-vec3(0,-0.56,-0.3), vec3(0.7, 0.4, 0.7));\n    float dist = smin(head, jaw, 0.25);\n       \n    \n    \n      // mouth\n         float dmouth;\n         float dboca=sdEllipsoid(p-vec3(0.0,-0.55-0.8*p.x*p.x,-1.0), 0.35*vec3(0.3, 0.07, 0.15));\n         dist=Sdf_D(dist,dboca);\n    \n    float blink =0.5*sin(iTime); //shouldBlink? (0.5-0.5*cos(3.14*4.0*ftime)): 0.0;\n\n    \n    vec3 q = p;\n        q.x = abs(q.x);\n        \n        // eye socket\n        q.x -= 0.38;\n        float socket = sdEllipsoid(q-vec3(0.0,-0.13,-0.85),\n                                   vec3(0.27,0.18,0.15));\n        socket = smax(socket, -q.y-0.25, 0.1); // socket bottom\n        //socket = smax(socket, q.y-0.06 + 0.12*blink, 0.1); // socket ceiling\n        dist = smax(dist, -socket, 0.05);\n        res =opU2(res, vec2(dist,21.0)); \n    \n    \n    \n     q.x += 0.1;\n        // eyeball\n        {\n            vec3 eq = q;\n            eq.xz *= rot2d(0.1);\n            float eyes = sdEllipsoid(eq-vec3(0,-0.1,-0.6), vec3(0.4, 0.35, 0.35));\n            \n            \n            float pospup=0.0625*sin(-1.0+iTime);\n            float dpupila= sdCylinderXY(q-vec3(0.0+pospup,-0.1,0.0), vec2(0.08,1.0 ));\n            \n            float dIris= sdCylinderXY(q-vec3(0.0+pospup,-0.08,0.0), vec2(0.02,1.0 ));\n            \n            dpupila=Sdf_I(dpupila,eyes);\n            dIris=Sdf_I(dIris,eyes);\n            \n            res =opU2(res, vec2(eyes,1.0)); \n            res =opU2(res, vec2(dpupila,0.0)); \n            res =opU2(res, vec2(dIris,1.0)); \n            \n                \n           // eyelid\n            float dEyeLid = sdEllipsoid(eq-vec3(0,-0.1,-0.6),\n                                        1.04*vec3(0.4, 0.35, 0.35));\n            float lidY = mix(-0.015, 0.23, blink);\n            dEyeLid = smax(dEyeLid, -p.y-lidY, 0.02);\n            dist = smin(dist, dEyeLid, 0.01);\n            res =opU2(res, vec2(dEyeLid,21.0)); \n        }\n      \n    \n      // eyebrow\n        float temp = q.x - 0.15;\n       \n        float browOffset = mix(0.0, -0.007, blink);\n        float eyeBrow = sdSegment2(q - (0.01 - 1.0*temp*temp),\n                                  vec3(0.05, 0.25+browOffset, -0.91),\n                                  vec3(0.25, 0.22+browOffset, -0.827), 0.008);\n        eyeBrow = min(eyeBrow, sdSegment2(q - (0.01 - 1.0*temp*temp)  ,\n                                  vec3(0.07, 0.225+browOffset, -0.915),\n                                  vec3(0.22, 0.2+browOffset, -0.85), 0.006));                        \n        \n        res =opU2(res, vec2(eyeBrow,0.0)); \n        \n     // ears\n        temp = q.x-0.05;\n        vec3 earR = vec3(0.3,0.3-0.1*temp*temp,0.1);\n        float dEar = sdEllipsoid(q-vec3(0.7,-0.3+0.2*q.x*q.x,-0.2), earR);\n        dEar = smax(dEar, -sdEllipsoid(q-vec3(0.7,-0.28+0.2*q.x*q.x,-0.27), 0.8*earR), 0.03);\n        dist = smin(dist, dEar, 0.02);        \n        res =opU2(res, vec2(dEar,21.0)); \n                \n\n        //nose\n        float dnose=sdEllipsoid(p-vec3(0.0,-0.28+0.05*p.z,-0.98) , vec3(0.05, 0.05, 0.08));\n        dist = smin(dist, dnose,  0.08);\n\n           // hair\n    float hair = sdSphere(p-vec3(0.0, 0.2, 0.05), 1.08);\n    hair = smax(hair, -dot(p, normalize(vec3(0.0, 0.5, 0.2)))-0.08+0.15*fract(-1.8*p.x), 0.03);\n    res =opU2(res, vec2(hair,0.0));\n    \n    res =opU2(res, vec2(dist,21.0)); \n    return res;\n}\n\nvec3 GetNormal(vec3 p)\n{   float d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n    vec3 n = d - vec3(GetDist(p-e.xyy).x,GetDist(p-e.yxy).x,GetDist(p-e.yyx).x);\n    return normalize(n);\n}\n\nvec2 RayMarch(vec3 ro, vec3 rd, int PMaxSteps)\n{   vec3 p;\n    vec2 hit, object=vec2(0.1,0.0);\n    for(int i=0; i <= PMaxSteps; i++) \n    { p = ro + rd*object.x;\n      hit = GetDist(p);\n      object.x += hit.x;\n      object.y = hit.y;\n      if (abs(hit.x) < EPSILON || object.x > MAX_DIST) break;\n    }    \n    return object;\n}\n\n\nfloat getSoftShadow(vec3 p, vec3 lightPos) {\n    float res = 9999.0;\n    float dist = 0.01;\n    float lightSize = 0.03;\n    for (int i = 0; i < MAX_STEPS; i++) {\n      float hit = GetDist(p + lightPos * dist).x;\n      res = min(res, hit / (dist * lightSize));\n      dist += hit;\n      if (hit < 0.0001 || dist > 60.0) break;\n    }\n    return clamp(res, 0.0, 1.0);\n}\n\nfloat occlusion(vec3 pos, vec3 nor)\n{   float sca = 2.0, occ = 0.0;\n    for(int i = 0; i < 10; i++) {    \n      float hr = 0.01 + float(i) * 0.5 / 4.0;\n      float dd = GetDist(nor * hr + pos).x;\n      occ += (hr - dd)*sca;\n      sca *= 0.6;\n    }\n    return clamp( 1.0 - occ, 0.0, 1.0 );    \n}\n\nvec3 pallete(float t) {\n    vec3 a = vec3(0.2);\n    vec3 b = vec3(0.5);\n    vec3 c = vec3(1.0);\n    vec3 d = vec3(0.0, 0.33, 0.67);\n    return a + b * cos(6.28318 * (c*t + d));\n}\n\n//iq cosine based palette, 4 vec3 params\nvec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvec3 lightingv3(vec3 normal,vec3 p, vec3 lp, vec3 rd, vec3 ro,vec3 lightColor, float t) \n{   vec3 lightPos=lp;\n    vec3 worldPos = p;\n     vec3 V = normalize(ro - p);\n    vec3 N = normal;\n    vec3 L = normalize (lightPos - worldPos);\n    vec3 R = reflect (-L, N);\n    float lightDist = max(length(L), .001);\n    float atten=1.0 / (1.0 + lightDist * 0.125 + lightDist * lightDist * .05);\n    L /= (lightDist*atten);\n    float shadow = getSoftShadow(worldPos, L);// shadows\n    float occ = occlusion(worldPos, N);// occ\n    vec3 ambient = Ka + Ka * dot(normal, vec3(0., 1., 0.))*lightColor;\n    ambient*=0.5;\n    vec3 fresnel =  lightColor *  pow(clamp(1.0 + dot(rd, N), 0.0, 1.0), 2.0);;\n    float diff= clamp(dot(N, L), 0.0, 1.0);\n    vec3 diffuse =  lightColor * diff;\n    float shininess=10.0;\n    float specular    = pow(max(dot(R, V), 0.0), shininess);\n    vec3 back = 0.5 * lightColor * clamp(dot(N, -L), 0.0, 1.0); // back\n    vec3 colOut = occ*lightColor*(ambient+diffuse*shadow+.25 +back) + vec3(.5)*specular*specular;\n    return colOut;\n}\n\n\nvec3 Getluz(vec3 ro,vec3 p, vec3 lp, vec3 lcol,vec3 n, float diffp, vec3 specp)\n{\n    vec3 v=normalize(ro-p);\n    vec3 h=normalize(lp+v);\n    vec3 l=normalize(lp-p);\n    float ndh=max(0.0,dot(n,h));\n    float ndl=max(0.0,dot(n,l));\n    float ndv=max(0.0,dot(n,v));\n    \n    float diff=ndl*diffp;\n    vec3  spec=0.8*pow(ndl,10.0)*specp;\n    vec3 col=(diff+spec*lcol);\n    return col;\n    \n}\n\nvec3 getColorTextura( vec3 p, vec3 nor,  int i)\n{\tvec3 col;\n    if (i==100 )\n    { col=tex3D(iChannel0, p/32., nor); return col*2.0; }\n\tif (i==101 ) { return tex3D(iChannel1, p/32., nor); }\n\tif (i==102 ) { return tex3D(iChannel2, p/32., nor); }\n\tif (i==103 ) { return tex3D(iChannel3, p/32., nor); }\n    return vec3(0.0);\n}\n\nvec3 render_sky_color(vec3 rd)\n{   float t = (rd.x + 1.0) / 2.0;\n    vec3 col= vec3((1.0 - t) + t * 0.3, (1.0 - t) + t * 0.5, (1.0 - t) + t);\n    vec3  sky = mix(vec3(.0, .1, .4)*col, vec3(.3, .6, .8), 1.0 - rd.y);\n\treturn sky;\n    //return sky*d;\n}\n\n\n//https://www.shadertoy.com/view/WdsGR7\nvec3 getColor(float v)\n{  float r = cos((v-0.78)*PI*1.66);\n   float g = cos((v-0.58)*PI*1.66);\n   float b = cos((v-0.28)*PI*1.66);\n   return vec3(r,g,b); \n}\n\nvec3 GetMaterial(vec3 p,  vec3 nor, vec3 ro,  vec3 rd, int id_color)\n{  \tvec3 colobj; \n     if (id_color<40) { colobj=getColor(int( id_color));  return colobj; }\n    \n   if (id_color>=100 )\n   { return  getColorTextura( p, nor,id_color); }\n      \n  return vec3(0.0);\n}\n\nvec3 linear2srgb(vec3 c) \n{ return mix(12.92 * c,1.055 * pow(c, vec3(1.0/1.8)) - 0.055, step(vec3(0.0031308), c)); }\n\nvec3 exposureToneMapping(float exposure, vec3 hdrColor) \n{ return vec3(1.0) - exp(-hdrColor * exposure); }\n\nvec3 ACESFilm(vec3 x)\n{   float a,b,c,d,e;\n    a = 2.51; b = 0.03; c = 2.43;d = 0.59; e = 0.14;\n    return (x*(a*x+b))/(x*(c*x+d)+e);\n}\n\nvec3 Render(vec3 ro, vec3 rd)\n{  vec3 col = vec3(0);\n  vec3 p;\n     vec2 hit=RayMarch(ro,rd, MAX_STEPS);\n      if(hit.x<MAX_DIST)\n       {   p = (ro + rd * hit.x );\n        vec3 nor=GetNormal(p);\n        vec3 colobj;\n        colobj=GetMaterial( p, nor, ro, rd,  int(hit.y));\n        vec3 result;\n        \n        result= lightingv3(nor, p,light_pos1, rd,ro,colobj,hit.x)*light_color1;\n        result+= lightingv3(nor, p,light_pos2,rd, ro,colobj,hit.x)*light_color2;\n        col= result/2.0;\n        col= (ACESFilm(col)+linear2srgb(col)+col+ exposureToneMapping(3.0, col))/4.0 ;\n    }\n    else if(hit.x>MAX_DIST)\n    col= render_sky_color(rd);\n   return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n     vec2 uv = fragCoord.xy / iResolution.xy - 0.5;\n    uv.x = uv.x * iResolution.x / iResolution.y;\n    \n    vec2 mouseUV = iMouse.xy/iResolution.xy; // Range: <0, 1>\n   \n    float t0=iTime;\n    float t=mod(t0*5.0,500.0);\n \tlight_pos1= vec3(-50.0, -20.0, -15.); light_color1=vec3( 1.0,1.0,1.0 );\n \tlight_pos2= vec3(-20.0, 20.0, -25.0 ); light_color2 =vec3( 1.0,1.0,1.0 ); \n  \n   vec3 ro=vec3(0.0,-10.0,-3.0);\n   vec3 rd=normalize( vec3(uv.x,uv.y,1.0));\n    vec3 col= Render( ro,  rd);\n    \n\tfragColor=vec4(col,1);\n\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//-------common\n#define PI 3.14159265\n\nstruct Ray\n{   vec3 ro; // origin\n    vec3 rd; // direction\n};\n\n\n\n///Gracias a Shane...16-jun-2020\nvec3 tex3D( sampler2D tex, in vec3 p, in vec3 n ){    \n  n = max(n*n - .2, .001); // max(abs(n), 0.001), etc.\n  n /= dot(n, vec3(1)); \n  vec3 tx = texture(tex, p.yz).xyz;\n  vec3 ty = texture(tex, p.zx).xyz;\n  vec3 tz = texture(tex, p.xy).xyz;\n  return mat3(tx*tx, ty*ty, tz*tz)*n; \n}\n\n\nvec3  Arrcolores[] = vec3[] (\nvec3(0,0,0),  //0\nvec3(1.,1.,1.), //1\nvec3(1,0,0),  //2\nvec3(0,1,0),   //3\nvec3(0,0,1),   //4\nvec3(1,1,0),  //5\nvec3(0,1,1),  //6 \nvec3(1,0,1),   //7\nvec3(0.7529,0.7529,0.7529),  //8\nvec3(0.5,0.5,0.5),  //9\nvec3(0.5,0,0),   //10\nvec3(0.5,0.5,0.0),  //11\nvec3(0,0.5,0),   //12\nvec3(0.5,0,0.5),  //13\nvec3(0,0.5,0.5),  //14\nvec3(0,0,0.5),    //15\nvec3(1.0, 0.8, 0.737),  //16\nvec3(0.8, 0.8, 0.8),  //17\nvec3(0.5, 0.5, 0.8),  //18\nvec3(1, 0.5, 0),      //19\nvec3(1.0, 1.0, 1.0),  //20\nvec3(0.968,0.6588,  0.721),//21\nvec3(0, 1, 1), //22 \nvec3(0.333, 0.803, 0.988),//23\nvec3(0.425, 0.56, 0.9)*vec3( 0.3, 0.2, 1.0 ),//24 \nvec3(0.8,0.8,0.8)*vec3( 0.3, 0.2, 1.0 ),//25  \nvec3(1.0,0.01,0.01)*vec3( 0.3, 0.2, 1.0 ),//26\nvec3(0.1, 0.5, 1.0),//27   \nvec3(0.0, 0.6, 0.0),//28 \nvec3(0.1,0.1,0.7), //29\nvec3(0.99, 0.2, 0.1), //30\nvec3(.395, .95, 1.), //31\nvec3(0.425, 0.56, 0.9), //32\nvec3(0.7333, 0.1412, 0.1412), //33\nvec3(0.1843, 0.3333, 0.1843), //34\n vec3(0.6549, 0.6549, 0.9922), //35\n vec3(0.8549, 0.8549, 0.8549)  //36\n);\n\nvec3 getColor(int i)\n{   //if (i==-2 ) {return mObj.color; }       \n    if (i>-1 )  return Arrcolores[i];\n}\n","name":"Common","description":"","type":"common"}]}