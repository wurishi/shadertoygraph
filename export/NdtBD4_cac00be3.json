{"ver":"0.1","info":{"id":"NdtBD4","date":"1656518396","viewed":149,"name":"Light saber test","username":"stegu","description":"A test for a LED light saber I am building, with procedural noise-based animation for light and sound effects alike. Small microcontrollers have now become fast enough to compute hundreds of thousands of values of 2-D noise per second.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["test","starwars","lightsaber"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = vec2(144.0, 1.0)*fragCoord/iResolution.xy - vec2(0.5);\n    vec3 bgcolor = vec3(0.0);\n\n    // Quantize x coordinate to 144 LED positions\n    float along = floor(uv.x)*0.1;\n    vec2 g;\n    // Red variation, moves and morphs over time\n    float n1 = 0.93+0.07*psrdnoise(vec2(0.5*along-iTime*2.0), vec2(0.0), iTime, g);\n    // Green variation, moves the other way, morphs faster\n    float n2 = 0.95+0.05*psrdnoise(vec2(0.5*along+iTime*3.0), vec2(0.0), iTime*2.0, g);\n    // Overall intensity variation, varies with time only\n    float n3 = 0.95+0.05*psrdnoise(vec2(iTime*5.0), vec2(0.0), 0.0, g);\n    // Some blue added in for the odd purple flash here and there\n    // (this might be better done by an ordinary, non-coherent pseudo-random function)\n    float n4 = clamp(-3.5+5.0*psrdnoise(vec2(0.5*along-iTime*0.2),\n        vec2(0.0), iTime*10.0, g), 0.0, 1.0);\n\n    vec3 bladecolor = n2*vec3(n1, 0.2*n2, 0.0);\n    // Halo. For presentation clarity, it doesn't flicker like the blade. (Impossible IRL)\n    vec3 col = mix(bgcolor, bladecolor, 0.7*(1.0-smoothstep(0.0, 0.2, abs(uv.y))));\n\n    // bladecolor.b += n4; // Sparkles look a bit cheesy, skip them for now\n\n    // The direct view of the blade varies in overall intensity as well (flickers)\n    col = n3*mix(col, bladecolor, 1.0-smoothstep(0.02, 0.04, abs(uv.y)));\n    \n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// psrdnoise (c) Stefan Gustavson and Ian McEwan,\n// ver. 2021-12-02, published under the MIT license:\n// https://github.com/stegu/psrdnoise/\n\nfloat psrdnoise(vec2 x, vec2 period, float alpha, out vec2 gradient)\n{\n\tvec2 uv = vec2(x.x+x.y*0.5, x.y);\n\tvec2 i0 = floor(uv), f0 = fract(uv);\n\tfloat cmp = step(f0.y, f0.x);\n\tvec2 o1 = vec2(cmp, 1.0-cmp);\n\tvec2 i1 = i0 + o1, i2 = i0 + 1.0;\n\tvec2 v0 = vec2(i0.x - i0.y*0.5, i0.y);\n\tvec2 v1 = vec2(v0.x + o1.x - o1.y*0.5, v0.y + o1.y);\n\tvec2 v2 = vec2(v0.x + 0.5, v0.y + 1.0);\n\tvec2 x0 = x - v0, x1 = x - v1, x2 = x - v2;\n\tvec3 iu, iv, xw, yw;\n\tif(any(greaterThan(period, vec2(0.0)))) {\n\t\txw = vec3(v0.x, v1.x, v2.x);\n\t\tyw = vec3(v0.y, v1.y, v2.y);\n\t\tif(period.x > 0.0)\n\t\t\txw = mod(vec3(v0.x, v1.x, v2.x), period.x);\n\t\tif(period.y > 0.0)\n\t\t\tyw = mod(vec3(v0.y, v1.y, v2.y), period.y);\n\t\tiu = floor(xw + 0.5*yw + 0.5); iv = floor(yw + 0.5);\n\t} else {\n\t\tiu = vec3(i0.x, i1.x, i2.x); iv = vec3(i0.y, i1.y, i2.y);\n\t}\n\tvec3 hash = mod(iu, 289.0);\n\thash = mod((hash*51.0 + 2.0)*hash + iv, 289.0);\n\thash = mod((hash*34.0 + 10.0)*hash, 289.0);\n\tvec3 psi = hash*0.07482 + alpha;\n\tvec3 gx = cos(psi); vec3 gy = sin(psi);\n\tvec2 g0 = vec2(gx.x, gy.x);\n\tvec2 g1 = vec2(gx.y, gy.y);\n\tvec2 g2 = vec2(gx.z, gy.z);\n\tvec3 w = 0.8 - vec3(dot(x0, x0), dot(x1, x1), dot(x2, x2));\n\tw = max(w, 0.0); vec3 w2 = w*w; vec3 w4 = w2*w2;\n\tvec3 gdotx = vec3(dot(g0, x0), dot(g1, x1), dot(g2, x2));\n\tfloat n = dot(w4, gdotx);\n\tvec3 w3 = w2*w; vec3 dw = -8.0*w3*gdotx;\n\tvec2 dn0 = w4.x*g0 + dw.x*x0;\n\tvec2 dn1 = w4.y*g1 + dw.y*x1;\n\tvec2 dn2 = w4.z*g2 + dw.z*x2;\n\tgradient = 10.9*(dn0 + dn1 + dn2);\n\treturn 10.9*n;\n}\n","name":"Common","description":"","type":"common"}]}