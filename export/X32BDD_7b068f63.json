{"ver":"0.1","info":{"id":"X32BDD","date":"1729519651","viewed":32,"name":"mandelbulb attempt culegamer","username":"CuleGamer","description":"stole a bit from https://www.shadertoy.com/view/MdXSWn because spherical coordinates are hard","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["mandelbulb"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const uint sdsteps = 16u;\nconst uint rmsteps = 64u;\nconst float power = 8.;\nconst float radius = 0.025;\n\nfloat trap(vec3 p)\n{\n    return 0.05 * length(p) - radius;\n}\nfloat sd(vec3 p)\n{\n    p = p.xzy;\n    vec3 z = p;\n    float dist = 100.;\n    for(uint i; i < sdsteps; i++)\n    {\n        dist = min(dist, trap(z));\n        float rho = length(z);\n        float theta = atan(z.y, z.x);\n        float phi = asin(z.z / rho) + iTime * 0.1;\n        rho = pow(rho, power);\n        theta *= power;\n        phi *= power;\n        z = rho * vec3(cos(theta)*cos(phi), sin(theta)*cos(phi), sin(phi)) + p;\n    }\n    return dist;\n}\n\nvoid mainImage(out vec4 O, in vec2 I)\n{\n    vec2 uv = (2. * I - iResolution.xy) / iResolution.y;\n    vec2 uvMouse = (2. * iMouse.xy - iResolution.xy) / iResolution.y;\n    vec3 camVec = normalize(vec3(uv, 0.5));\n    vec3 camPos = vec3(uvMouse, -1.);\n    vec3 rayPos = camPos;\n    float dist;\n    float minDist = 10000.;\n    for(uint i; i < rmsteps; i++)\n    {\n        dist = sd(rayPos);\n        minDist = min(minDist, dist);\n        rayPos += camVec * dist;\n    }\n    vec3 col = vec3(0.01 / (radius + minDist));\n    O = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}