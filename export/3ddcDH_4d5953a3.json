{"ver":"0.1","info":{"id":"3ddcDH","date":"1600873332","viewed":205,"name":"Blob Circle Visualizer","username":"Superflat","description":"A simple visualizer for my private music visualization tv app.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["music","visualizer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGRr","filepath":"/media/a/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","previewfilepath":"/media/ap/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord - iResolution.xy * 0.5;\n    \n    vec2 circlePos = floor(uv / 20.) * 20. + 10.;\n\tfloat dist = distance(uv, circlePos) / 10.;\n\tfloat delta = fwidth(dist);\n\tfloat alpha = smoothstep(1. - delta, 1., dist);\n    \n    float angle = atan(uv.y, uv.x);\n    if (angle < 0.) { angle += 2. * PI; }\n\t\n    float circleSize = 10.;\n    \n    float steps = ceil(length(uv)/circleSize);\n    alpha = fract(length(uv)/circleSize);\n    \n    float circleCount = 1. + (steps-1.) * 3.;//0.5 * 2. * PI * steps;\n    float angleDivider = PI / circleCount;\n    angle = floor(angle / angleDivider) * angleDivider + angleDivider / 2.;\n    \n    float a = angle;\n    vec2 circleCenter = vec2(circleSize * steps - circleSize * 0.5, 0);\n    circleCenter = vec2(circleCenter.x * cos(a) - circleCenter.y * sin(a), circleCenter.y * cos(a) + circleCenter.x * sin(a));\n    \n    float maxVolume = 0.;\n    float totalImportance = 0.;\n    for (float aI = -0.5; aI <= 0.5; aI += 1.0 / 32.0)\n    {\n        float musicAngle = mod(a, 2.0*PI);\n        float musicPos = mod(iTime * 0.1 + aI + musicAngle / (2. * PI), 1.0);\n        float importance = pow(1. - abs(aI) / 0.5,7.);\n        totalImportance += importance;\n        maxVolume += texture(iChannel0, vec2(musicPos,0.)).x * importance;\n    }\n    maxVolume /= totalImportance * 1.1;\n    maxVolume += 0.38;\n    \n    float circleScale = (maxVolume > steps * 0.03) ? 1. : 0.5;//a / (2. * PI);\n\t//circleScale = 0.25 + 0.75 * smoothstep(0.5, 0.6, 0.5 + max(0.,volume-steps * 0.03));\n    \n    float f = distance(circleCenter, uv)/(circleSize*0.45);\n    delta = fwidth(f);\n\talpha = 1.0 - smoothstep(circleScale - delta, circleScale, f);\n    \n    \n    float colFac = alpha;\n    \n    vec4 color = texture(iChannel1, (circleCenter + iResolution.xy * 0.5)/iResolution.xy);\n    color *= alpha;\n    \n    fragColor = color;\n}","name":"Image","description":"","type":"image"}]}