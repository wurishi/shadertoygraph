{"ver":"0.1","info":{"id":"MXG3Dd","date":"1727994162","viewed":30,"name":"kishimisu tutorial shader - milk","username":"milknolactose","description":"https://youtu.be/f4s1h2YETNY?si=eMo-0pcIcjHF07ZS","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["tutorial"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 palette(float t)\n{\n    // a,b,c,d are all different colors which the gradien of colors is built upon :)\n    vec3 a = vec3(0.000, 0.500, 0.500);\n    vec3 b = vec3(0.000, 0.500, 0.500);\n    vec3 c = vec3(0.000, 0.500, 0.333);\n    vec3 d = vec3(0.000, 0.500, 0.667);\n    \n    // Gradient color picked from: http://dev.thi.ng/gradients/\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalizes pixel coordinates and centers origin of canvas to center of screen.\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    // uv0 is uv coordinates before space repetition has been applied.\n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.0);\n    \n    for(float i = 0.0; i < 4.0; i++)\n    {\n        uv = fract(uv * 1.5) -0.5;\n        // d is the distance of every given pixel from the origin.\n        float d = length(uv) * exp(-length(uv0));\n        // RGB Vector for color customization.\n        // Gradient represented by some cool Cosine math :)\n        // using length(uv0) instead of d so that this gradient is applied to the whole screen, not each circle simultaneously.\n        vec3 col = palette(length(uv0) + i*.4 + iTime*.4);\n        // Signed Distance Math\n        d = sin(d*8.0 + iTime)/8.0;\n        d = abs(d);\n        // Makes subtle darknesses into bright lights by modifying the inverse function to work as a sort of \"reverse smoothstep\".\n        d = pow(0.01/d, 2.0);\n        // At this point, d represents the brightness of each pixel as the color white. This just colors them :)\n        finalColor += col * d;\n    }\n    // \"Swizzling\"\n    // iResolution.xy == vec2(iResolution.x, iResolution.y)\n    // The actual code which tells a given pixel \"Hey! You're this color now!\"\n    fragColor = vec4(finalColor,1.0);\n}","name":"Image","description":"","type":"image"}]}