{"ver":"0.1","info":{"id":"4cSXzR","date":"1705940480","viewed":75,"name":"3d rounded box","username":"jsyishan","description":"3d rounded box","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdRoundBox( vec3 p, vec3 b, float r )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;\n}\n\n\nfloat map( in vec3 pos )\n{\n    float rad = 0.1*(0.1+0.1*0.001);\n    return sdRoundBox(pos, vec3(.3, .1, .05), 0.02) - rad;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    float tt = -1.0;\n    float an = 0.5*(tt-10.0);\n\tvec3 ro = vec3( 1.0*cos(an), 0.4, 1.0*sin(an) );\n    vec3 ta = vec3( 0.0, 0.0, 0.0 );\n\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\n    vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n\n    vec3 rd = normalize( p.x*uu + p.y*vv + 1.5*ww );\n\n    const float tmax = 3.0;\n    float t = 0.0;\n    for( int i=0; i<256; i++ )\n    {\n        vec3 pos = ro + t*rd;\n        float h = map(pos);\n        if( h<0.0001 || t>tmax ) break;\n        t += h;\n    }\n\n\n    vec3 col = vec3(0.0);\n    if( t<tmax )\n    {\n        vec3 pos = ro + t*rd;\n        col = vec3(10.0)*pos;\n    }\n\n\tfragColor = vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"}]}