{"ver":"0.1","info":{"id":"4fVXz1","date":"1714818857","viewed":54,"name":"Fork Fork 2023- swarthy 642","username":"swarthy","description":"...","likes":1,"published":1,"flags":8,"usePreview":0,"tags":["sound","synthfest"],"hasliked":0,"parentid":"XfVXz1","parentname":"Fork 2023-synth swarthy 895"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float tAtX(float x) {\n    float scale = .05;\n    return x/iResolution.x*scale + floor(iTime/scale)*scale;\n}\nfloat yAt(float x) {\n    float t = tAtX(x);\n    vec2 s = t>=0.?sound(t):vec2(0.);\n    return s.x * iResolution.y / 2.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    fragCoord.y -= iResolution.y / 2.;\n    \n    float tx = fragCoord.x;\n    float y0 = yAt(tx-1.), y1 = yAt(tx), y2=yAt(tx+1.), y=fragCoord.y;\n    float y01 = (y0+y1)*.5, dy01 = abs(y0-y1)*.5;\n    float y12 = (y1+y2)*.5, dy12 = abs(y1-y2)*.5;\n    float dy = max(0., max(y01-y, y-y01)-dy01);\n    dy = min(dy, max(0., max(y12-y, y-y12)-dy12));\n    float dist = sqrt(dy*dy + 1.);\n    float col = smoothstep(2., 1., dist);\n    fragColor = vec4(col,col,col,0.);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"float mtof (float n) { return 22. * pow(2., n / 12.); }\n\nfloat voice(float t) {\n\n float pos = mod(floor(t * 4.), 4.);\n    \n    t = fract(t * 4.) / 4.;\n    \n    float n = 49.;\n    \n    if (pos == 1.) n = 52.;\n    if (pos == 2.) n = 55.;\n    if (pos == 3.) n = 59.;\n    \n    \n    float freq = mtof(n);\n    float p = fract(t * freq);\n    \n    float s = 0.;\n    \n    s += (pos == 0.) ? sin(p * 6.2831) : 0.;\n    s += (pos == 1.) ? min(p*4.-1., 3.-4.*p) : 0.;\n    s += (pos == 2.) ? step(p,.5)*2.-1. : 0.;\n    s += (pos == 3.) ? p*2.-1. : 0.;\n    \n    s *= exp(-3. * t);\n    return s;\n}\n \nvec2 sound(float t) {\n    float s = 0.;\n    \n    s = voice(t);\n    \n    s += .5 * voice(t-.33);\n    \n    s += .25 * voice(t-.66);\n    \n    s += .125 * voice(t-.99);\n    \n    s += voice(t * .5);\n    s += voice(-t * .25);\n    \n    s *= 0.25;\n    \n    return vec2(s);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/* \nfloat phase_freq(float f, float t) { return fract(f * t); }\n\nfloat osc_saw(float p) { return p*2.-1.; }\nfloat osc_tri(float p) { return min(p*4.-1., 3.-4.*p); }\nfloat osc_sin(float p) { return sin(p * 6.2831); }\nfloat osc_squ(float p) { return step(p,.5)*2.-1.; }\n\nfloat mtof(float m) { return 22. * pow(2., m / 12.); }\n\nfloat inst1(float t) {\n    t = mod(t, 2.);\n    float n = floor(t/.5);\n    t = mod(t, .5);\n    \n    float freq = mtof(54.);\n    if (n==1.) freq = mtof(56.);\n    if (n==2.) freq = mtof(61.);\n    if (n==3.) freq = mtof(59.);\n\n    float p = phase_freq(freq, t);\n    \n    float env = exp(-3.0*t);\n    float s = 0.;\n    s = osc_tri(p);\n    //s = osc_sin(p);\n    //s = osc_saw(p);\n    //s = osc_squ(p);\n    \n    s *= env;\n    return s;\n}\n\nvec2 sound(float t) {\n    float s = 0.;\n    //s = inst1(t) + .5*inst1(t-.33) + .25*inst1(t-.66) + .125*inst1(t-.99);\n    return vec2(s);\n}\n*/","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[],"code":"vec2 mainSound( int samp, float time ) {\n    return sound(time);\n}","name":"Sound","description":"","type":"sound"}]}