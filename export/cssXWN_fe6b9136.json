{"ver":"0.1","info":{"id":"cssXWN","date":"1668910528","viewed":108,"name":"sin-cos-tan graphs","username":"toyBeaver","description":"My first shader ever :3\nBased on: https://www.shadertoy.com/view/wtVXWR by GCScholar","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["math","function","drawfunctions"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 funcToRender(float sf, float cf, float tf) \n{\n    if (1.0 - sf > 0.25) return vec2(1., sf);\n    if (1.0 - cf > 0.25) return vec2(2., cf);\n    return vec2(3., tf);\n}\n\nvec2 funcToRenderOverlap(float sf, float cf, float tf) \n{\n    if (1.0 - sf >= 1.0 - cf && 1.0 - sf >= 1.0 - tf) return vec2(1., sf);\n    if (1.0 - cf >= 1.0 - sf && 1.0 - cf >= 1.0 - tf) return vec2(2., cf);\n    return vec2(3., tf);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.0 * fragCoord - iResolution.xy)/iResolution.y;\n    \n    float thickness = 15.0 / iResolution.y;\n    float speed     = .3 * iTime;\n    float amp       = .3;\n    \n    vec2 sp = vec2(uv.x, sin(uv.x * speed) * amp);\n    vec2 cp = vec2(uv.x, cos(uv.x * speed) * amp);\n    vec2 tp = vec2(uv.x, tan(uv.x * speed) * amp);\n    \n    float sf = length(uv - sp) / thickness;\n    float cf = length(uv - cp) / thickness;\n    float tf = length(uv - tp) / thickness;\n\n    vec2 func = funcToRender(sf, cf, tf);\n   \n    float f = 1.0 - func[1];\n    f       = smoothstep(.0, .5, f);\n    \n    if      (func[0] == 1.) fragColor = vec4(.2, .5, .2, 1.0) * f;\n    else if (func[0] == 2.) fragColor = vec4(.2, .3, .6, 1.0) * f;\n    else                    fragColor = vec4(.6, .2, .3, 1.0) * f;\n}\n","name":"Image","description":"","type":"image"}]}