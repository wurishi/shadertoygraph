{"ver":"0.1","info":{"id":"X3XXWH","date":"1709412496","viewed":99,"name":"Voronoi Noise Example","username":"mooddood235","description":"Example Voronoi Noise","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec3 cellDims = vec3(0.1);\nconst float scrollSpeedxy = 0.05;\nconst float scrollSpeedz = 0.025;\nfloat GetDist(vec3 uv, vec3 cellId);\nuint GetSeed(vec3 cellId);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 uv = vec3(\n    fragCoord/iResolution.y,\n    iTime * scrollSpeedz)\n    + iTime * scrollSpeedxy;\n    \n    vec3 thisCellId = floor(uv / cellDims);\n    \n    float minDist = GetDist(uv, thisCellId);\n    \n    for (float x = -1.0; x < 2.0; x++){\n        for (float y = -1.0; y < 2.0; y++){\n            for (float z = -1.0; z < 2.0; z++){\n                vec3 otherCellId = thisCellId + vec3(x, y, z); \n                float dist = GetDist(uv, otherCellId);\n                minDist = min(dist, minDist);\n            }\n        }\n    }    \n    minDist /= length(cellDims);\n    //minDist = 1.0 - minDist;\n    vec3 color = vec3(minDist);\n    fragColor = vec4(color, 1.0);\n}\n\nfloat GetDist(vec3 uv, vec3 cellId){\n    uint cellSeed = GetSeed(cellId);\n    uint state = pcg_hash(cellSeed);\n    \n    vec3 cellStart = cellId * cellDims; \n    vec3 pointOffset = vec3(rand(state) * cellDims.x,\n                            rand(state) * cellDims.y,\n                            rand(state) * cellDims.z);\n    vec3 pointLoc = cellStart + pointOffset;\n    \n    return length(uv - pointLoc);\n}\nuint GetSeed(vec3 cellId){\n    float x = cellId.x;\n    float y = cellId.y;\n    float z = cellId.z;\n    float xMax = 1.0 / cellDims.x;\n    float yMax = 1.0 / cellDims.y;\n    float zMax = 1.0 / cellDims.z;\n    return uint((z * xMax * yMax) + (y * xMax) + x);\n}\n\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// PCG hash, see:\n// https://www.reedbeta.com/blog/hash-functions-for-gpu-rendering/\n\n// Used as initial seed to the PRNG.\nuint pcg_hash(uint seed)\n{\n  uint state = seed * 747796405u + 2891336453u;\n  uint word = ((state >> ((state >> 28u) + 4u)) ^ state) * 277803737u;\n  return (word >> 22u) ^ word;\n}\n\n// Used to advance the PCG state.\nuint rand_pcg(inout uint rng_state)\n{\n  uint state = rng_state;\n  rng_state = rng_state * 747796405u + 2891336453u;\n  uint word = ((state >> ((state >> 28u) + 4u)) ^ state) * 277803737u;\n  return (word >> 22u) ^ word;\n}\n\n// Advances the prng state and returns the corresponding random float.\n// Range is [0, 1)\nfloat rand(inout uint state)\n{\n  uint x = rand_pcg(state);\n  state = x;\n  return float(x) / (2.0 * float(0x80000000u));\n}","name":"Common","description":"","type":"common"}]}