{"ver":"0.1","info":{"id":"WsKfDG","date":"1607878058","viewed":181,"name":"hoeled_christmas","username":"hoeled","description":"Merry christmas!","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["christmas"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// I need to mention BigWings starfield tutorial here\n// Part 1 https://www.youtube.com/watch?v=rvDo9LvfoVE\n// Part 2 https://www.youtube.com/watch?v=dhuigO4A7RY\n\n#define PI 3.141592\n\nfloat Hash21(vec2 p) {\n\tp = fract(p*vec2(123.34, 456.21));\n    p += dot (p, p+45.32);\n    return fract(p.x*p.y);\n}\n\nmat2 Rot(float a) {\n\tfloat s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat Star(vec2 uv, float flare) {\n\tfloat d = length(uv);\n    float m = .016/d*.7; // size\n    float rays = max(0., 1.-abs(uv.x*uv.y*10000.));    \n    m += rays*flare;\n    rays = max(0., 1.-abs(uv.x*uv.y*1000.));\n    m += rays*.2*flare;\n    uv *= Rot(PI/4.);\n    rays = max(0., 1.-abs(uv.x*uv.y*1000.)); \n    m += rays*.1*flare;\n    m *= smoothstep(1., .2, d);\n    m *= min(1., sin(iTime*4.+.2*7.*Hash21(vec2(iTime, iTime*.3)))*.5+1.4);\n    return m;\n}\n\nfloat Triangle(vec2 uv, float aa, float size) {\n    uv.y *= .7;\n    int N = 3;\n    float a = atan(uv.x, uv.y)+PI;\n    float r = (PI*2.)/float(N);\n    float d = 0.0;\n    d = cos(floor(.5+a/r)*r-a)*length(uv);\n    return 1.0-smoothstep(size,size+aa,d);\n}\n\nfloat Square(vec2 uv, float aa, float size) {\n\tvec2 s = abs(uv) - vec2(size);\n    float square = length(max(s, .0));\n    square = smoothstep(aa, .0, square);\n    return square;\n}\n\nvec3 Tree(vec2 uv, float aa) {\n    uv.x *= 1.13;\n    vec3 green = vec3(.1, .5, .1);\n    vec3 green2 = vec3(.0, .3, .0);\n    green = mix(green, green2, uv.y*-4.);\n    vec3 brown = vec3(.3, .15, -.1);\n    vec3 tree;\n    float trunk = Square(vec2(uv.x*3., uv.y+.225), aa, .05);\n    float top = Triangle(vec2(uv.x, uv.y-.15), aa, .04);\n    top += Triangle(vec2(uv.x, uv.y-.03), aa, .05);\n    top += Triangle(vec2(uv.x, uv.y+.09), aa, .06);\n    top = clamp(top, 0., 1.);\n    float blackTop = 1.-top;\n    trunk *= blackTop;\n    tree += top * green + trunk * brown;\n    return tree;\n}\n\nfloat Snow(vec2 uv, float aa) {\n    uv.y *= .6;\n    uv.y -= .7;\n    vec2 id = floor(uv);\n    \n    float snow;\n    for(float x=-.1; x<1.1; x+=.05) {\n        for(float y=-.5; y<1.; y+=.1802) {\n            vec2 offset = vec2(x, y);\n        \tfloat n = Hash21(id+offset);\n            float size = 0.002*Hash21(offset);\n            float t = fract((iTime+500.)*n*.08+.08);\n            float xa = sin(iTime*n)*.01;\n            float flake = smoothstep(size+aa, size, length(vec2(uv.x+x+n-1.+xa, uv.y+t)));\n            snow += flake*n*.7;\n        }\n    }\n    return snow;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.xy;\n    uv.y += .1;\n    vec3 col = vec3(0.);\n    float aa = 1.5 / iResolution.y;\n    \n    // background\n    vec3 bg1 = vec3(0., 0., 0.);\n    vec3 bg2 = vec3(0., 0., .5);\n    vec3 bg = mix(bg2, bg1, uv.y+.7);\n    \n    // ground\n    vec3 g1 = vec3(1., 1., 1.);\n    vec3 g2 = vec3(0., 0., .5);\n    vec3 g = mix(g1, g2, uv.y+.5);\n    float ground = smoothstep(2.+aa, 2., length(vec2(uv.x-.2, uv.y+2.25)));\n    \n    // tree\n    vec3 tree = Tree(uv, aa);\n    tree *= 1.-ground;\n    \n    // snow\n    float snow = Snow(uv, aa);\n    \n    // star\n    float star = Star(vec2(uv.x*3.9-1.2, uv.y*2.4-.9), smoothstep(.1, 1., .5*sin(iTime)*.5+.3));\n\n    float bottomGradient = smoothstep(.5, -.4, length(uv.y+.6));\n\n    col += bg;\n    col += ground * g;\n    col += tree;\n    col += snow;\n    col += star * vec3(.9, .9, .4);\n    col += bottomGradient * .1;\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}