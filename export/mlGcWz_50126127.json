{"ver":"0.1","info":{"id":"mlGcWz","date":"1700093123","viewed":46,"name":"fruit salad","username":"jt","description":"Placing circles in the random domino-square tiling.\n","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["random","tiling","squares","tesselation","merge","combine","align","domino","adjacent"],"hasliked":0,"parentid":"mlGcWR","parentname":"random domino square tiling int"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/mlGcWz fruit salad, 2023 by jt\n// based on https://www.shadertoy.com/view/mlGcWR random domino square tiling int\n\n// Placing circles in the random domino-square tiling.\n\n// tags: random, tiling, squares, tesselation, merge, combine, align, domino, adjacent\n\n// The MIT License\n// Copyright (c) 2023 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// https://www.shadertoy.com/view/DlcyWs alternating domino tiling, 2023 by jt\n\n// https://www.shadertoy.com/view/WttXWX \"Best\" Integer Hash by FabriceNeyret2,\n// implementing Chris Wellons https://nullprogram.com/blog/2018/07/31/\nint triple32(int x)\n{\n    x ^= x >> 17;\n    x *= 0xed5ad4bb;\n    x ^= x >> 11;\n    x *= 0xac4c1b51;\n    x ^= x >> 15;\n    x *= 0x31848bab;\n    x ^= x >> 14;\n    return x;\n}\n\n#define HASH(u) triple32(u)\n\nint ihash(ivec2 v)\n{\n    return HASH(v.x + HASH(v.y));\n}\n\nbool bhash(ivec2 v)\n{\n    return (ihash(v) & 1) != 0;\n}\n\n// returns unique tile index (but some indices unused)\nivec4 random_domino_combined_squares(ivec2 position) // https://www.shadertoy.com/view/mlGcWR random domino square tiling int (jt)\n{\n    ivec2 quadrant = position & 1; // [0,0] to [1,1]\n    ivec2 tile = position - quadrant; // round down to even number\n    \n    bool flip = bhash(tile);\n    if(flip)\n    {\n        if(bhash(tile + 2 * ivec2(quadrant.x * 2 - 1, 0))) // neighbor tile aligned?\n        {\n            tile += ivec2(quadrant.x * 2 - 1, 0); // adjust index to merged tile\n            quadrant.x ^= 1; // horizontal merge: flip horizontal quadrant\n            return ivec4(tile, quadrant);\n        }\n    }\n    else\n    {\n        if(!bhash(tile + 2 * ivec2(0, quadrant.y * 2 - 1))) // neighbor tile aligned?\n        {\n            tile += ivec2(0, quadrant.y * 2 - 1); // adjust index to merged tile\n            quadrant.y ^= 1; // vertical merge: flip vertical quadrant\n            return ivec4(tile, quadrant);\n        }\n    }\n\n    return ivec4(tile, quadrant);\n}\n\nbool edge(vec2 I)\n{\n    float e = 0.1;\n    ivec2 a = random_domino_combined_squares(ivec2(floor(I-e))).xy;\n    ivec2 b = random_domino_combined_squares(ivec2(floor(I+e))).xy;\n    return any(not(equal(a, b)));\n}\n\nvec3 hash32(vec2 p) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n    vec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\n\nvoid mainImage(out vec4 o, in vec2 I)\n{\n    vec2 R = iResolution.xy;\n    I = (2. * I - R) / R.y;\n    vec3 color = vec3(0);\n    if(all(lessThan(abs(I), vec2(1))))\n    {\n        I *= 10.0;\n        ivec2 position = ivec2(floor(I));\n        ivec4 result = random_domino_combined_squares(position);\n        color = hash32(vec2(result.xy));\n        //if(length(fract((1.0-2.0*vec2(result.zw))*I)) < 0.5) color *= 0.0;\n        //if(length(fract(I-0.5+vec2(result.zw)*0.5)) < 0.5) color *= 0.0;\n        //if(length(fract((vec2(result.zw)*2.0-1.0)*I)) > 1.0) color *= 0.0;\n        //color = mix(vec3(0), color, smoothstep(0.0,0.1,abs(length(fract((vec2(result.zw)*2.0-1.0)*I))-0.9)));\n        color = mix(1.0 - color, color, smoothstep(0.95,1.0,length(fract((vec2(result.zw)*2.0-1.0)*I))));\n        if(iMouse.z > 0.0)\n        {\n            if(result.z != result.w) color = mix(color, vec3(1), 0.5);\n            //vec2 grid = 1.0 - smoothstep(0.0, 50.0/R.y, abs(fract(I+0.5)-0.5));\n            //color = max(color, max(grid.x, grid.y));\n        }\n        //if(edge(I)) color *= 0.0;\n    }  \n    o = vec4(color, 1);\n}\n","name":"Image","description":"","type":"image"}]}