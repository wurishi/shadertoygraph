{"ver":"0.1","info":{"id":"3dKfzG","date":"1607425923","viewed":64,"name":"Naive Perlin Noise","username":"Harrm","description":"Naive impl of perlin noise","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["noise","perlin"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvec2 randomGradient(int ix, int iy, float seed) {\n    float x = float(ix);\n    float y = float(iy);\n    float random = seed + 2920.f * sin(x * 21942.f + y * 171324.f + 8912.f) * cos(x * 23157.f * y * 217832.f + 9758.f);\n    return vec2(cos(random), sin(random));\n}\n\nfloat interpolate(float a0, float a1, float w) {\n    if (0.0 > w) return a0;\n    if (1.0 < w) return a1;\n    float diff = a1 - a0;\n    return a0 + diff * smoothstep(a0, a1, a0 + diff * w);\n}\n\nfloat get_dot(ivec2 cell_loc, vec2 frag_coord, vec2 grid_size, float seed) {\n\tvec2 cell_size = iResolution.xy / grid_size;\n\n    vec2 grad = randomGradient(cell_loc.x, cell_loc.y, seed);\n    vec2 offset = (frag_coord - vec2(cell_loc) * cell_size) / cell_size;\n    float dot_product = (dot(grad, offset) + 1.0) / 2.0;\n\treturn dot_product;\n}\n\nvec4 get_perlin(float grid_width, vec2 frag_coord) {\n    float grid_height = iResolution.y * grid_width / iResolution.x;\n    vec2 grid_size = vec2(grid_width, grid_height);\n\tvec2 cell_size = iResolution.xy / grid_size;\n    ivec2 cell_loc = ivec2(floor(frag_coord / cell_size));\n\n    float seed = float(iFrame) / 20.0;\n    \n\tfloat dots[] = float[](\n    \tget_dot(cell_loc, frag_coord, grid_size, seed),\n    \tget_dot(cell_loc + ivec2(1, 0), frag_coord, grid_size, seed),\n    \tget_dot(cell_loc + ivec2(0, 1), frag_coord, grid_size, seed),\n    \tget_dot(cell_loc + ivec2(1, 1), frag_coord, grid_size, seed)\n    );\n    \n    vec2 weight = frag_coord / cell_size - vec2(cell_loc);\n    \n    float diff1 = (dots[1] - dots[0]);\n    float diff2 = (dots[3] - dots[2]);\n    float i1 = interpolate(dots[0], dots[1], weight.x);\n    float i2 = interpolate(dots[2], dots[3], weight.x);\n    float i = interpolate(i1, i2, weight.y);\n\treturn vec4(i, 0, 0, 0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 c1 = get_perlin(4.0, fragCoord);\n    vec4 c2 = get_perlin(8.0, fragCoord);\n    vec4 c3 = get_perlin(16.0, fragCoord);\n    vec4 c4 = get_perlin(32.0, fragCoord);\n    fragColor = (c1 + c2 / 2.0 + c3 / 4.0 + c4 / 16.0) / (1.0 + 0.5 + 0.25 + 0.125);\n}","name":"Image","description":"","type":"image"}]}