{"ver":"0.1","info":{"id":"NscSzj","date":"1633476279","viewed":352,"name":"Diffusion Interpolation","username":"paniq","description":"interpolating values using the inverse square law","likes":11,"published":3,"flags":0,"usePreview":0,"tags":["diffusion","interpolation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float tau = 6.283185;\n\nvec3 hue(float hue) {\n    return clamp(\n        abs(mod(hue * 6.0 + vec3(0.0, 4.0, 2.0), 6.0) - 3.0) - 1.0,\n        0.0, 1.0);\n}\n\n// https://iquilezles.org/articles/distfunctions\nfloat sdLine(in vec2 p, vec2 a, vec2 b)\n{\n    vec2 pa = p-a;\n    vec2 ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba),0.0,1.0);\n    return length(pa-h*ba);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy*2.0-1.0;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    const int N = 3;\n    vec3 result = vec3(0.0);\n    float weight = 0.0;\n    for (int i = 0; i < N; ++i) {\n        float x = float(i)/float(N);\n        vec3 c = hue(x - 0.1);\n        float a = x * tau * 0.5;\n        vec2 q = vec2(cos(a),sin(a))*0.8;\n        float d = sdLine(uv, -q, q);\n        float w = 1.0 / (pow(d, 2.0));\n        result += c * w;\n        weight += w;\n    }\n\n    fragColor = vec4(pow(result / weight,vec3(1.0/2.2)),1.0);\n}","name":"Image","description":"","type":"image"}]}