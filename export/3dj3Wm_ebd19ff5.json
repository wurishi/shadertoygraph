{"ver":"0.1","info":{"id":"3dj3Wm","date":"1549041533","viewed":498,"name":"precision of operators","username":"FabriceNeyret2","description":"precision is always finite with float operations, but it depends on the value.\nFrom bottom to top: sqrt, sqrt(1-xÂ²), atan, log, sin. Vertical #range: 1E-6\n( NB: error is computing by applying the inverse function so it shows the cumulated error of both ).","likes":7,"published":3,"flags":0,"usePreview":0,"tags":["glsl","ieeefloats"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define range 1e-6  // error majorant ( i.e. display range )\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 R = iResolution.xy, U = u/R;\n    float x = 2.*U.x, y = U.y*5., i=floor(y), v,e; \n    \n    if (i==0.) v = sqrt(x),      e = (v*v-x) / range;\n    if (i==1.) v = sqrt(1.-x*x), e = ( sqrt(1.-v*v) - x ) / range;\n    if (i==2.) v = atan(x),      e = ( tan(v)  - x ) / range;\n    if (i==3.) v = log(x),       e = ( exp(v)  - x ) / range;\n    if (i==4.) v = sin(x),       e = ( asin(v) - x ) / range;\n    \n    O = vec4( abs(fract(y) - .5 - e) < 2./R.y );\n    O += .3*vec4( fract(y) < .5 + e ); \n    O.x += float(isnan(e));\n    \n    if ( int(u.y)%int(iResolution.y/5.) == 0 ) O = vec4(1,0,0,1);\n}","name":"Image","description":"","type":"image"}]}