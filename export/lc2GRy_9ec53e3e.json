{"ver":"0.1","info":{"id":"lc2GRy","date":"1717670238","viewed":57,"name":"Normal map generator & light e.g","username":"thomThalas","description":"A shader that converts a height texture to a normal map.","likes":4,"published":1,"flags":0,"usePreview":1,"tags":["normal","height","interactable","convertor"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define ic0 iChannel0\n#define imageRes int(iChannelResolution[0].x)\n\nfloat strength = 0.04;\n\nmat2 rot2D(float angle)\n{\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat2(c, -s, s, c);\n}\n\nfloat GreyScale(vec4 color)\n{\n    return (color.x + color.y + color.z) / 3.0;\n    //return color.r;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fc )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fc/iResolution.xy;\n    \n    vec2 mouse = iMouse.xy/iResolution.xy;\n    \n    if(mouse.x < 1.0 / iResolution.x && mouse.y < 1.0 / iResolution.y)\n    {\n        mouse.x = sin(iTime) / 3.0 + 0.5;\n        mouse.y = cos(iTime)  / 3.0 + 0.5;\n    }\n    \n    vec3 normal = vec3(0,0,1./20.);\n    \n    fc *= 1.0;\n    \n    fc = mod(fc, vec2(imageRes));\n    \n    ivec2 rightC = ivec2(fc)+ivec2( 1.,  0.);\n    ivec2 leftC = ivec2(fc)+ivec2(-1.,  0.);\n    ivec2 upC = ivec2(fc)+ivec2( 0.,  1.);\n    ivec2 downC = ivec2(fc)+ivec2( 0., -1.);\n    \n    rightC = rightC % imageRes;\n    leftC = leftC % imageRes;\n    upC = upC % imageRes;\n    downC = downC % imageRes;\n    \n    float center = GreyScale(texelFetch(ic0, ivec2(fc), 0));\n    float right =  GreyScale(texelFetch(ic0, rightC,    0));\n    float left =   GreyScale(texelFetch(ic0, leftC,     0));\n    float up =     GreyScale(texelFetch(ic0, upC,       0));\n    float down =   GreyScale(texelFetch(ic0, downC,     0));\n    \n    normal.x += center - right;\n    normal.x -= center - left;\n    normal.y += center - up;\n    normal.y -= center - down;\n    \n    normal = normalize(normal);\n    \n    \n    if(uv.x < mouse.x)\n    {\n        if(uv.y > mouse.y)\n        {\n            fragColor = vec4(normal.x, normal.y, normal.z, 1);\n        }else\n        {\n            fragColor = texelFetch(iChannel0, ivec2(fc), 0);\n        }\n    }\n    else\n    {\n        vec3 lightSource = vec3(-1., 1., 0.4);\n        //lightSource.xy *= rot2D(iTime);\n        lightSource = normalize(lightSource);\n        fragColor = \n        vec4(\n            vec3(\n                dot(\n                    lightSource,\n                    normal\n                )\n            ), 1.\n        );\n        //fragColor /= 2.;\n        //fragColor += 0.5;\n        \n        //fragColor *= texelFetch(iChannel0, ivec2(fc), 0);\n    }\n    \n    \n}","name":"Image","description":"","type":"image"}]}