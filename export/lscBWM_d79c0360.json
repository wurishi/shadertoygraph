{"ver":"0.1","info":{"id":"lscBWM","date":"1525344604","viewed":172,"name":"Volume Icon","username":"KaleyGoode","description":"Testing for an embedded GUI - making sure it looks OK for all sizes.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["volume","control","icon","speaker"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"bool Mute = false;\nvec3 bg = vec3(0.0, 0.0, 0.0);\nvec3 fg = vec3(0.9, 0.8, 0.4);\nconst float X[6] = float[](1.0, 2.0, 3.0, 6.0, 4.0, 8.0);\nconst float Y[5] = float[](0.0, 3.0, 4.0, 5.0, 7.0);\n\n#define Invert(t) (1.0 - t) // in = [0,1] out = [1,0]\n\n#define SawTooth(x, Period) (mod(x, Period)/Period)\n#define Triangle(x, Period) (abs(Signed(SawTooth(x,Period))))\n\n// Minimise mapping by having everything return normalised ranges [0,1] or [-1,1].\n// Unsigned Interval is [0,1]; Signed interval is [-1,1]; These change between the two (useful for double or float):\n#define Unsigned(t) ((t + 1.0) / 2.0) // in = [-1,1] out = [ 0,1] Optimised version of Parameterize(p, -1,1);\n#define   Signed(t) (2.0 * t - 1.0)   // in = [ 0,1] out = [-1,1] Optimised version of  Interpolate(t, -1,1);\n#define Parameterize(x, a,b) ((x-a)/(b-a)) // x is normally between a and b. returns 0 if x==a, 1 if x==b, 0.5 if x is in the middle of a and b etc. Note a and b MUST be different!!!\n#define  Interpolate(t, a,b) ((a+(b-a)*t)) // The reverse of Parameterize: if t=0.5, returns the value in the middle of a and b.\n#define Map(x, aFrom,bFrom, aTo,bTo) (Interpolate(Parameterize(x,aFrom,bFrom),aTo,bTo)) // The Map X from the range [aFrom,bFrom] to the range [aTo,bTo].\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    const float x0=25.0;\n    Mute = sin(iTime*3.0) > 0.0;\n    float Height = Map(cos(iTime), -1.0,1.0, 14.0,iResolution.y); // [14, iResolution.y]\n    float Scale = Height/14.0; // The y array is 7 coordinates high above and below zero. Scale is the pixel width of one coordinate in the array.\n    float u = Height*fragCoord.x/iResolution.x;\n    float v = Height*fragCoord.y/iResolution.y-(float(Y[4])*Scale);  // v varies from [-7,7]*Scale because the y-coordingates vary [-7,7]\n    float dx = u-X[4];\n    float dy = v;\n    float t = Invert(Scale)+(Scale*(Invert(abs(dy)/Height))); // Bright in the middle horizontally\n    if(u < X[0]) t=0.0;\n    if(u < X[1]) {\n      if(abs(v) > Y[1]) t=0.0; // Speaker base\n    }else if(u <  X[2]) t=0.0; // Space between base and cone\n     else if(u <= X[3]) {      // Speaker Cone:\n      if((abs(v)> Y[1])&&(abs(v) >= u+1.0)) t=0.0;\n    }else if(!Mute) {          // Speaker Sound-wave:\n        const float Thickness = 2.0;\n        const float Radius = X[5]-X[4];\n        float PixelRadius = length(vec2(dx,dy));\n        t=((PixelRadius < (Radius-Thickness))\n        || (PixelRadius > (Radius+Thickness*2.0))\n        || (dx < abs(dy)) ? 0.0 : Invert(Triangle(PixelRadius, Thickness)));\n    }else t=0.0;               // Background\n    vec3 col = mix(bg,fg,t);\n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}