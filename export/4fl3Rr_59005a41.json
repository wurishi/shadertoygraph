{"ver":"0.1","info":{"id":"4fl3Rr","date":"1702757370","viewed":49,"name":"Dimension Slicing","username":"vichoeq","description":"Shapes dance as space tears up. Inspired on kishimisu's tutorial: https://youtu.be/f4s1h2YETNY","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Inspired on kishimisu's tutorial: https://youtu.be/f4s1h2YETNY\n\n\nfloat sdRoundedX( in vec2 p, in float w, in float r )\n{\n    p = abs(p);\n    return length(p-min(p.x+p.y,w)*0.5) - r;\n}\n\n\nvec2 rotate(vec2 v, float a) {\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\tmat2 m = mat2(c, s, -s, c);\n\treturn m * v;\n}\n\n\nvec3 palette( float t ) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(1.0, 0.5, 0.5);\n    vec3 c = vec3(0.5, 1.0, 1.0);\n    vec3 d = vec3(0.263,0.416,0.557);\n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv0 = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    \n    vec3 finalColor = vec3(0.0);\n    \n    vec2 uv = uv0;\n    \n       \n    int par = int(ceil(uv.x*1.5) + ceil(uv.y*1.5)) % 2;\n    uv = fract(uv*1.5) - 0.5;\n\n\n    float dir = float(2 * abs(par) - 1); \n\n    uv = rotate(uv, sin(iTime)*dir*length(uv0)/4.);\n\n    \n    float d = sdRoundedX(uv, 1., 0.1)* exp(-length(uv0));\n\n    d = sin(d * -20. + iTime)/20.0;\n\n    d = smoothstep(0.0, 0.1, abs(d));\n\n    d = pow(0.05 / d, 1.2);\n\n    vec3 col = palette(length(uv0) + iTime*-.1);\n\n    finalColor += 0.3*col * d ;\n    \n    fragColor = vec4(finalColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}