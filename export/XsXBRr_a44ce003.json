{"ver":"0.1","info":{"id":"XsXBRr","date":"1494514924","viewed":89,"name":"Go in mandelbrot set","username":"mjdr","description":"Simple fractal shader.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["mathfractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 color_ramp(int i) {\nconst int max_colors = 50;\nconst float color_scale = 2.0;\nconst float inverse_max_colors = 1.0 / float(max_colors);\n    // Running the index through cos creates a continous ramp.\n    float normalized_mod = mod(float(i), float(max_colors)) * inverse_max_colors;\n\tfloat normalized_cos = (cos(normalized_mod * 2.0 * 3.141592) + 1.0) * 0.5;\n    i = int(float(max_colors) * normalized_cos);\n\n    float factor = float(i) / float(max_colors);\n    float inverse_factor = 1.0 - factor;\n    // An arbritrary ramp of colors\n    return vec4(sqrt(sqrt(factor)), factor, inverse_factor * 0.5, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tconst int n = 1250;\n    \n    float t = iTime;\n    \n    vec2 point = (fragCoord) - iResolution.xy/2.0;\n    vec2 x = point/exp(t) - vec2(1.483,0.0);\n    \n    vec2 y = x;\n    int k = 0;\n    for(int h = 0;h < n;h++){\n        if(length(y) > 2.0)\n            break;\n        \n        vec2 yn = vec2(y.x*y.x - y.y*y.y, 2. * y.x * y.y) + x;\n        y = yn;\n        k++;\n    }\n    \n    fragColor = color_ramp(k);\n    \n    \n}","name":"Image","description":"","type":"image"}]}