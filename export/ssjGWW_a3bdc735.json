{"ver":"0.1","info":{"id":"ssjGWW","date":"1617451445","viewed":1061,"name":"Alien Art (via @aemkei)","username":"Gaeel","description":"Directly based on Martin Kleppe's tweet: https://twitter.com/aemkei/status/1378106731386040322\n\nBitwise XOR'ing pixel coordinates then taking the modulo of a given integer yield interesting patterns.","likes":14,"published":1,"flags":0,"usePreview":0,"tags":["pattern"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Shader version of @aemkei's \"alien art\"\n// Original: https://twitter.com/aemkei/status/1378106731386040322\n\n// Change ZOOM to get blockier or denser pixels\n#define ZOOM 4.0\n\n// Change RATE to control animation rate\n#define RATE 2.0\n\n// Change RBGP to make the colour channels animate at different rates\n#define RBGP 2.0\n\n// Dark mode üï∂\n#define DARK true\n\n// Press the ‚èÆ button under the preview window to restart from the beginning\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Screen coordinates\n    vec2 uv = fragCoord/ZOOM;\n    \n    // Get \"pixel\" coordinates\n    int x = -int(uv.x); // Negative to remove a constant diagonal line ü§∑\n    int y = int(uv.y);\n    \n    // Do the bitwise XOR thing ‚ú®\n    int b = x^y;\n    \n    // Modulo an integer to get the ALIEN ART üëΩ\n    // If RGBP is different to zero, we'll get colour!\n    float xr = mod(float(b), floor(iTime*(RATE)));\n    float xg = mod(float(b), floor(iTime*(RATE+RBGP)));\n    float xb = mod(float(b), floor(iTime*(RATE+RBGP*2.0)));\n    vec3 col = vec3(xr, xg, xb);\n\n    // The original is white on black, and honestly it looks better üï∂\n    if (DARK) col=1.0-col;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}