{"ver":"0.1","info":{"id":"DtfcWj","date":"1691190795","viewed":137,"name":"Random Experiment#001","username":"Shrey_0703","description":"This is a random experiment shader which is based on the tutorials of \"The Art of Code\" yt channel\nLink: https://youtu.be/rvDo9LvfoVE","likes":4,"published":1,"flags":64,"usePreview":0,"tags":["2d","sdf","shader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dcGD4","filepath":"https://soundcloud.com/deeprainsampling/static-brown-noise-loopable?si=bcad2f6a761a476889c6e7d6d6fbf220&utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing","previewfilepath":"https://soundcloud.com/deeprainsampling/static-brown-noise-loopable?si=bcad2f6a761a476889c6e7d6d6fbf220&utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0},{"id":"Xdc3WN","filepath":"https://soundcloud.com/mfmvideogamecomposer/mercurius-fm-ending?si=ff4d29af19674bb8a52977b4969c4447&utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing","previewfilepath":"https://soundcloud.com/mfmvideogamecomposer/mercurius-fm-ending?si=ff4d29af19674bb8a52977b4969c4447&utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing","type":"musicstream","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n   This shader is based on the tutorials of \"The Art of Code\" yt channel\n   Link: https://youtu.be/rvDo9LvfoVE\n   License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n*/\n#define num_of_layers 4.\nfloat Rand(vec2 seed){\n    seed = fract(seed*vec2(123.34f, 456.21f));\n    seed += dot(seed, seed+45.56f);\n    \n    return fract(seed.x*seed.y);\n}\nfloat Rand(float seed){\n    seed = fract(seed*12345.346f);\n    seed += dot(seed, seed+45.5456f);\n    \n    return fract(seed*seed);\n}\nvec3 palette1(float fft) {\n    float t = fft;\n    vec3 a = vec3(1.5,0.5,0.5);\n    vec3 b = vec3(1.5,0.5,0.5);\n    vec3 c = vec3(1.0,1.0,1.0);\n    vec3 d = vec3(0.0,0.10,0.20);\n    \n    return a + b*cos(6.28318*(c*t+d));\n}\nvec3 palette2(float fft) {\n    float t = fft;\n    vec3 a = vec3(0.610f, 0.498f, 0.650f);\n    vec3 b = vec3(0.596f, 0.0f, 0.350f);\n    vec3 c = vec3(0.530f, 0.498f, 0.620f);\n    vec3 d = vec3(3.438f, 3.012f, 4.025f);\n    \n    return a + b*cos(6.28318*(c*t+d));\n}\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\nfloat Noisescreen(vec2 uv, float boxlength) {\n    vec2 box = vec2(boxlength);\n    float dist = sdBox(uv, box);\n    dist = 1.0f/dist; \n    dist = smoothstep(boxlength, boxlength+4.1f, 1.0f-dist);\n    \n    dist = dist*fract(Rand(uv*2345.6f));\n    \n    // first texture row is frequency data\n\tfloat fft  = texture( iChannel0, vec2(Rand(uv.x*iChannelTime[0]),0.25) ).x; \n    \n    return dist*fft;\n}\nvec3 Box(vec2 uv, float boxlength){\n    vec3 col = vec3(0.0f);\n    \n    float framewidth = 0.009f*boxlength;\n    vec2 box = vec2(boxlength);\n    float dist = sdBox(uv, box);\n    dist = framewidth/dist;\n    dist = smoothstep(boxlength, boxlength+0.09f, dist);\n    \n    // first texture row is frequency data\n\tfloat fft1  = texture( iChannel0, vec2(Rand(boxlength*iChannelTime[0]),0.95) ).x;\n    float fft2  = texture( iChannel1, vec2(Rand(boxlength*iChannelTime[1]),0.95) ).x;\n    \n    vec3 c = sin(vec3(0.6f, 0.0f, 0.0f+boxlength)*fract(boxlength*230.54f)*10.2831f)*0.5f+0.5f;\n    \n    col += dist*palette1(fft2)*c;\n    \n    //Adding noise to the box\n    col += Noisescreen(uv, boxlength)*palette2(fft1)*Rand(c.rg);\n    \n    return col;\n}\nvec3 Noiselayer(vec2 uv) {\n    vec2 gv = fract(uv)-0.5f;\n    \n    vec3 color = vec3(0.0f);\n    float intensity = 10.0f;\n    vec2 id = floor(uv);\n    \n    for(float y=-1.0f; y<1.0f; y++){\n        for(float x=-1.0f; x<1.0f; x++) {\n        \n            vec2 offs = vec2(x,y);\n            float random = Rand(id+offs);\n            float size = min(0.4f, fract(random*345.32f));\n            \n            vec3 box = Box(gv-offs-(vec2(random, fract(random*345.6f))-0.1f), smoothstep(0.0f, 0.39f, size)*0.3f);\n            color += box*size*intensity;\n        }\n    }\n    \n    return color;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord/iResolution.xy*2.0f)-1.0f;\n    uv.x *= iResolution.x/iResolution.y;\n    uv*= 2.1f;\n    \n    //if(gv.x>.48f || gv.y>.48f) color.r = 1.0f;\n    \n    vec3 color = vec3(0.0f);\n    float t = iTime*0.01f;\n    \n    for(float i=0.0f; i<1.0f; i+= 1.0f/num_of_layers) {\n        float depth = fract(i+t);\n        float scale = mix(3.0f, 0.01f, depth);\n        float fade = depth* smoothstep(1.0,0.9,depth);\n        float layerfade = mix(0.001f, 0.01f, i);\n        color += Noiselayer(uv*scale+i*453.2f)*fade-layerfade;\n    }\n    \n    // Output to screen\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}