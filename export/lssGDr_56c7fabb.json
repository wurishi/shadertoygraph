{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"texture","id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"// Shoots a ray through screen pixel (with screen plane being at z=f)\n// and intersects with plane at y=h\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t// Calculate normalized screen space (lower left is (-0.5,-0.5))\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tuv -= vec2(0.5, 0.5);\n\t\n\tfloat f = 1.0; // Focal distance\n\tfloat h = -1.0; // Height of plane\n\t\n\t// Intersect with plane at y=h\n\t// a is the factor that makes the direction vector\n\t// from the camera (origin) to the pixel point intersect\n\t// with a point in the plane at height h\n\tfloat a = h / uv.y;\n\tif(a > 0.0) {\n\t  vec3 plane_point = vec3(uv.x * a, uv.y * a, f * a);\n\t  plane_point.z += iTime; // Move forward\n\t  vec2 tex_index = plane_point.xz;\n \t  fragColor = texture(iChannel0, tex_index);\n\t} else {\n\t  // not a useful intersection (behind origin)\n      // hack: hand pick texture color\n\t  fragColor = vec4(0.63, 0.5, 0.45, 1.0);\n\t}\n\t\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"lssGDr","date":"1367995005","viewed":307,"name":"Simple plane walkthrough","username":"mrchebas","description":"Forward motion with view on an infinite plane. The image is calculated by shooting a ray from screen pixel to a plane, and using the plane coordinates to select texel.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raycasting"],"hasliked":0,"parentid":"","parentname":""}}