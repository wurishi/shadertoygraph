{"ver":"0.1","info":{"id":"fdByRz","date":"1643006350","viewed":294,"name":"Wordle clone","username":"fpsunflower","description":"Shader version of the popular Wordle game. Shadertoy themed word will change each day.\n\nUse keyboard for input. Backspace/Return to go back/submit a word.","likes":17,"published":1,"flags":48,"usePreview":0,"tags":["game","wordle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Inspired by the addictive game \"Wordle\" by Josh Wardle\n// Play the real version here: https://www.powerlanguage.co.uk/wordle/\n// Solution is seeded by iDate on reset, dictionary is shadertoy themed.\n\n// I took out spell checking of the guesses since the mere presence of a\n// large array in Buffer A's code was making things slow on my laptop. So\n// this is much easier than the real game :)\n\nconst vec3 COL_ELSE = vec3(177.0,160.0,76.0)/255.0;\nconst vec3 COL_GOOD = vec3(97.0,139.0,85.0)/255.0;\nconst vec3 COL_NOPE = vec3(58.0,58.0,60.0)/255.0;\nconst vec3 COL_NONE = vec3(18.0)/255.0;\nconst vec3 COL_TEXT = vec3(216.0)/255.0;\n\nvec4 load(vec2 fc) { return texture(iChannel0, (0.5+fc)/iChannelResolution[0].xy,-100.0); }\nfloat impulse(float x, float k){ return k*x*exp(1.0-k*x); }\nfloat letter(int code, vec2 off)\n{\n  if (code < _A || code > _Z) return 0.0;\n  if (off.x<0.0||off.x>1.0||off.y<0.0||off.y>1.0) return 0.0;\n  vec2 charPos = vec2(code % 16, (255-code) / 16);\n  return texture(iChannel1, (off+charPos) / 16.0f, -100.0).r;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n  float a = iResolution.x/iResolution.y;\n  float m = max(0.0,0.5*a-5.0/12.0);\n  vec2 uv = fragCoord/iResolution.yy;\n\n  vec3 col = COL_NONE;\n  vec4 coredata = load(vec2(0.0));\n  int numChars = int(coredata.w);\n  int winChars = int(coredata.z);\n  float board = 0.0;\n  if (uv.x>m && a-uv.x>m) {\n    board = 1.0;\n    // draw wordle grid + letters        \n    vec2 pos = vec2(6.*(uv.x-m),6.*uv.y);\n    int cell = int(pos.x)+6*int(6.-pos.y);\n    vec4 celldata = vec4(0.0);\n    if (cell < numChars)\n      celldata = load(vec2(1 + cell,0.));\n    int L = int(celldata.x);\n    vec2 cp=1.1*mod(pos,1.0)-0.05;\n    vec3 fill = COL_NONE;\n    if (cp.x>0.0&&cp.x<1.0&&cp.y>0.0&&cp.y<1.0)\n    {\n      // border\n      float t = 0.04; if (cell == numChars) t *= 2.5;\n      float b = max(\n        1.0-smoothstep(t/2.,t,cp.x)*smoothstep(t/2.,t,1.0-cp.x),\n        1.0-smoothstep(t/2.,t,cp.y)*smoothstep(t/2.,t,1.0-cp.y)\n      );\n      vec3 line=COL_TEXT;\n      if (celldata.y==0.25) { fill=COL_GOOD; }\n      if (celldata.y==0.50) { fill=COL_ELSE; }\n      if (celldata.y==0.75) { fill=COL_NOPE; }\n      \n      float anim = 1.0;\n      if (celldata.w > 0.0) {\n        anim = smoothstep(0.0,1.0,6.0*(iTime-celldata.w)-floor(pos.x));\n        fill = 1.0-cp.y<anim?fill:COL_NONE;\n        if (celldata.y >0.0&&b > 0.001) line = fill;\n      }\n      float fade = (coredata.y>0.)?1.0-smoothstep(0.0,1.0,iTime-coredata.y-2.0):1.0;\n      line = mix(fill,line,fade);\n      col = mix(fill, line, max(b,letter(L, vec2(0.0,anim-1.0)+mod(pos, 1.0))));\n    }\n  }\n  vec2 kuv = uv * 11.0;\n  float smx=11.0*m/2.0-1.5;\n  float smy=1.0;\n  for (int i = 0; i < 26; i++) {\n    int lx = i % 3;\n    int ly = i / 3;\n    vec2 kpos = kuv - vec2(lx,8-ly)-vec2(smx,smy);\n    if (kpos.x>0.&&kpos.x<1.0&&kpos.y>0.&&kpos.y<1.0)\n    {\n      vec2 cp = 1.1*kpos-0.05;\n      if (cp.x>0.0&&cp.x<1.0&&cp.y>0.0&&cp.y<1.0)\n      {\n        float t = 0.04;\n        float b = max(\n          1.0-smoothstep(t/2.,t,cp.x)*smoothstep(t/2.,t,1.0-cp.x),\n          1.0-smoothstep(t/2.,t,cp.y)*smoothstep(t/2.,t,1.0-cp.y)\n        );\n        vec4 letterdata = load(vec2(i,1.0));\n        vec4 keybrddata = load(vec2(i,2.0));\n        float anim = keybrddata.x>0.0?impulse(max(0.0,iTime-keybrddata.x),30.0):0.0;\n        vec3 fill = vec3(0.45);\n        if (letterdata.x==0.25) { fill=COL_GOOD; }\n        if (letterdata.x==0.50) { fill=COL_ELSE; }\n        if (letterdata.x==0.75) { fill=COL_NOPE; }\n        fill = mix(fill,fill*vec3(0.25,0.5,0.75),anim);\n        col = mix(fill, COL_TEXT, max(b,letter(_A+i,cp)));\n        float fade = (coredata.y>0.)?1.0-smoothstep(0.0,1.0,iTime-coredata.y-2.0):1.0;\n        col = mix(COL_NONE,col,fade);\n      }\n      board=1.0;\n    }\n  }\n  if (numChars==36 && winChars==0)\n  {\n    // loosing screen\n    vec4 last = load(vec2(35,0.));\n    float fade = 1.0-smoothstep(0.0,1.0,iTime-last.w-2.0);\n    col = mix(mix(vec3(0.8,0.2,0.2),col,board*0.5), col, fade);\n  }\n  fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define _A 65\n#define _B 66\n#define _C 67\n#define _D 68\n#define _E 69\n#define _F 70\n#define _G 71\n#define _H 72\n#define _I 73\n#define _J 74\n#define _K 75\n#define _L 76\n#define _M 77\n#define _N 78\n#define _O 79\n#define _P 80\n#define _Q 81\n#define _R 82\n#define _S 83\n#define _T 84\n#define _U 85\n#define _V 86\n#define _W 87\n#define _X 88\n#define _Y 89\n#define _Z 90\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"bool keypress(int k) { return texture(iChannel1,vec2((float(k) + 0.5) / 256.0,0.5)).x > 0.5; }\nvec4 load(vec2 fc) { return texture(iChannel0, (0.5+fc)/iChannelResolution[0].xy,-100.0); }\nbool test(vec2 p, vec2 fc) { vec2 d = abs(p-0.5-fc)-0.5; return max(d.x,d.y)<0.;  }\nvoid store(vec2 fc, vec4 value, inout vec4 result, vec2 p) { result = test(p, fc) ? value : result; }\n\n#define NUM_WORDS 25\nconst int[NUM_WORDS] dict=int[](\n 8304879,\n 1444344,\n 8588963,\n 8297087,\n 8297070,\n 5112811,\n 8916819,\n 2021310,\n 1880832,\n 8303535,\n 1863517,\n 8298266,\n 1933680,\n 8809851,\n 3245488,\n 2062000,\n 5112973,\n 2267616,\n 8022458,\n 8692299,\n 8991000,\n 2158168,\n 2037976,\n 2039263,\n 10979358\n);\n\nvoid mainImage( out vec4 result, in vec2 p )\n{\n  result = load(p-0.5);\n  vec4 data = load(vec2(0.0));\n  int numChars = int(data.w);\n  int winChars = int(data.z);\n  float winTime = data.y;\n  int target = int(data.x);\n  if (iFrame == 0)\n  {\n    numChars = 0;\n    int index = 12*int(iDate.x)+31*int(iDate.y)+int(iDate.z);\n    target = dict[index % NUM_WORDS];\n\n#if 0 // cheat here!\n    numChars = 6;\n    for (int i = 0,w=target; i < 6; i++,w/=26)\n      store(vec2(1+i,0.),vec4(_A+(w%26),0.,0.,0.),result,p);\n#endif\n  }\n  int char = 0;\n  if (keypress(_A)) char = _A;\n  if (keypress(_B)) char = _B;\n  if (keypress(_C)) char = _C;\n  if (keypress(_D)) char = _D;\n  if (keypress(_E)) char = _E;\n  if (keypress(_F)) char = _F;\n  if (keypress(_G)) char = _G;  \n  if (keypress(_H)) char = _H;\n  if (keypress(_I)) char = _I;\n  if (keypress(_J)) char = _J;\n  if (keypress(_K)) char = _K;\n  if (keypress(_L)) char = _L;\n  if (keypress(_M)) char = _M;\n  if (keypress(_N)) char = _N;\n  if (keypress(_O)) char = _O;\n  if (keypress(_P)) char = _P;  \n  if (keypress(_Q)) char = _Q;\n  if (keypress(_R)) char = _R;\n  if (keypress(_S)) char = _S;\n  if (keypress(_T)) char = _T;\n  if (keypress(_U)) char = _U;\n  if (keypress(_V)) char = _V;\n  if (keypress(_W)) char = _W;\n  if (keypress(_X)) char = _X;\n  if (keypress(_Y)) char = _Y;\n  if (keypress(_Z)) char = _Z;\n  if (char!=0)\n    store(vec2(char-_A,2.0),vec4(iTime),result,p); // record keypress time\n  if (keypress(8) && (numChars%6)>0)\n  {\n    // backspace\n    numChars--;\n  }\n  \n  if (numChars % 6 == 5) {\n    // check newline\n    char = keypress(13) ? 13 : 0;\n  }\n  \n  if (char != 0 && numChars < 36)\n  {\n    numChars++;\n    store(vec2(numChars,0), vec4(char,0.,0.,0.), result, p);\n    // check word vs target\n    if (char == 13)\n    {\n      int solved = 0;\n      for (int i = 0,w=target; i < 5; i++,w/=26)\n      {\n        vec2 al = vec2(numChars-5+i,0.0); // address\n        vec4 dl = load(al); // content\n        int ul = int(dl.x)-_A;\n        int tl = w % 26;\n        if (ul==tl)\n        {\n          //correct!\n          store(al,dl+vec4(0.,0.25,0.,iTime), result, p);\n          store(vec2(ul,1.0),vec4(0.25),result,p);\n          solved++;\n        }\n        else\n        {\n          // match anywhere else?\n          bool found = false, already_processed=false;\n          for (int j = 0, q=target;j<5;j++,q/=26)\n          {\n            int jl = int(load(vec2(numChars-5+j,0.0)).x)-_A;\n            int ql = q%26;\n            if (jl!=ql && ul==ql) {\n              // make sure we didn't already report on this letter\n              found=true;\n              for (int k=0;k<i;k++){\n                int kl = int(load(vec2(numChars-5+k,0.0)).x)-_A;\n                if (ul==kl)\n                {\n                  already_processed=true;\n                  found=false;\n                  break;\n                }\n              }\n              break;\n            }\n          }\n          store(al,dl+vec4(0.,found?0.5:0.75,0.,iTime), result, p);\n          if (load(vec2(ul,1.0)).x==0.0&&!already_processed)\n            store(vec2(ul,1.0),vec4(found?0.5:0.75),result,p);\n        }\n      }\n      if (solved == 5) { winChars = numChars; winTime = iTime; numChars = 36; }\n    }\n  }\n  store(vec2(0.0), vec4(int(target),winTime,winChars,numChars), result, p);  \n}","name":"Buffer A","description":"","type":"buffer"}]}