{"ver":"0.1","info":{"id":"tllfRM","date":"1596369824","viewed":119,"name":"rotation/mask","username":"tomoyanonymous","description":"illusion test.\n","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["illusion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float PI=3.141595;\nfloat speed = 5.0;\nfloat size = 150.0;\nfloat border_dense = 0.6;\nint polygon_num = 5;\n\nfloat polygon(vec2 p, int n, float size){\n\tfloat a = atan(p.x, p.y) + PI;\n    float nf = float(n);\n\tfloat r = 2.0 * PI / nf;\n\treturn cos(floor(0.5 + a / r) * r - a) * length(p) - size; \n}\n\nfloat border(vec2 p,float rot){\n    mat2 m = mat2(cos(rot), -sin(rot), sin(rot), cos(rot));\n   \t\n    vec2 rotp = m*(p-iResolution.xy/2.0)+iResolution.xy/2.0;\n\treturn max(0.0,min(1.0,cos(rotp.x*border_dense) *2.0));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    float penta = polygon(fragCoord.xy-iResolution.xy/2.0,polygon_num,size);\n    \n   \n   \tfloat mask = max(0.0,min(penta,1.0));\n    float bod = border(fragCoord.xy,iTime*speed);\n    float col = (1.0-mask) *bod; \n    // Output to screen\n    fragColor = vec4(vec3(1.0-col),1.0);\n}","name":"Image","description":"","type":"image"}]}