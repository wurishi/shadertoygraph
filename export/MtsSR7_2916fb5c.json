{"ver":"0.1","info":{"id":"MtsSR7","date":"1435691075","viewed":877,"name":"PlanetMars","username":"kuvkar","description":"Sun setting and rising in planet mars. Mouse to look around. Looks best fullscreen.","likes":39,"published":1,"flags":0,"usePreview":0,"tags":["parallax","godrays","mars"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsX3Rn","filepath":"/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","previewfilepath":"/media/ap/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat3 rotx(float a) { mat3 rot; rot[0] = vec3(1.0, 0.0, 0.0); rot[1] = vec3(0.0, cos(a), -sin(a)); rot[2] = vec3(0.0, sin(a), cos(a)); return rot; }\nmat3 roty(float a) { mat3 rot; rot[0] = vec3(cos(a), 0.0, sin(a)); rot[1] = vec3(0.0, 1.0, 0.0); rot[2] = vec3(-sin(a), 0.0, cos(a)); return rot; }\nmat3 rotz(float a) { mat3 rot; rot[0] = vec3(cos(a), -sin(a), 0.0); rot[1] = vec3(sin(a), cos(a), 0.0); rot[2] = vec3(0.0, 0.0, 1.0); return rot; }\n\nfloat flter(float f, float a)\n{\n    f = clamp(f - a, 0.0, 1.0);\n    return f / (1.0 - a);\n}\n\n\nfloat fbm(vec2 uv)\n{\n    float f1 = (texture(iChannel0, uv).r - 0.5)  * 0.5;\n    f1 += (texture(iChannel0, uv * 2.0).r - 0.5) * 0.25;\n    f1 += (texture(iChannel0, uv * 4.0).r - 0.5) * 0.25 * 0.5;\n    f1 += (texture(iChannel0, uv * 8.0).r - 0.5) * 0.25 * 0.5 * 0.5;\n    f1 += (texture(iChannel0, uv * 16.0).r - 0.5) * 0.25 * 0.5 * 0.5 * 0.5;\n    return clamp(f1 + 0.5, 0.0, 1.0);\n}\n\n\nfloat clouds(in vec3 rp, in vec3 rd, float f)\n{\n    float t = iTime + 14.0;\n    rd.y += rp.z;\n    rd *= 0.15;\n    rd.y += t * 0.1;\n    \n    float f1 = flter(fbm(rd.xz * 0.1), f) * .65;\n    rd.x += t * 0.05;\n    rd.y += t * 0.05;\n    \n    float f2 = flter(fbm(rd.xz * 0.45), f) * 0.25;\n    rd.x += t * 0.01;\n    rd.y += t * 0.01;\n\n    float f3 = flter(fbm(rd.xz * 0.85), f) * .1;\n    \n    return clamp(f1 + f2 + f3, 0.0, 1.0);\n}\n\nvec4 skycolor = vec4(0.6, 0.25, 0.0, 0.0);\nvec4 cloudcol = vec4(1.1, 0.6, 0.4, 1.0);\nvec4 raycolor = vec4(1.0, 1.0, .92, .0);\nvec4 groundcol = vec4(.95, 0.7, 0.7, 0.0);\n\n// godray and cloud controls\nconst float cloudFilter = 0.24;\nconst float rayFilter = 0.78;\nconst float rayStrength = 2.0;\n\n// \nconst int steps = 40;\nconst int cloudsteps = 10;\n\n\nvoid ground(in vec3 rp, in vec3 rd, inout vec4 color)\n{\n    vec3 ro = rp;\n    float ydif = 0.25;\n    rp += rd * (ydif / abs(rd.y));\n    float scale = 0.3;\n    \n    for (int i = 0; i < 10; ++i)\n    {\n        vec4 col = texture(iChannel1, rp.xz * scale);\n        float h = col.r * 0.3;\n        rp += rd * h * 0.05;\n        if(rp.y - h < -0.75) break;\n    }\n    color += texture(iChannel1, rp.xz * scale) * groundcol;\n}\nconst float mouseSpeedX = 2.0;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv -= vec2(0.5);\n    uv.y /= iResolution.x / iResolution.y;\n    \n    vec3 rp = vec3(0.0);\n    vec3 rd = normalize(vec3(uv, 1.0));\n    \n    // mouse\n    vec2 m = (iMouse.xy / iResolution.xy) - 0.5;\n    if(iMouse.xy == vec2(0.0))\n    {\n        m = vec2(0.0, -0.2);\n    }\n    // lookat\n    rd *= rotx(m.y);\n    rd *= roty(m.x * mouseSpeedX);\n    vec3 _rd = rd;\n    \n    // \n    vec4 col = vec4(0.0);\n    vec4 finalcolor = vec4(0.1, 1.0, 1.0, 0.0);\n    \n    float stepsf = float(steps);\n    float cl = clouds(rp, rd / abs(rd.y), cloudFilter);\n    finalcolor = cl * cloudcol;\n    finalcolor = mix(finalcolor, skycolor, 1.0 - cl);\n    \n    // sun\n    vec3 sunpos = vec3(0.0, 5.0 + sin(iTime * 0.25) * 3.0, 21.0);\n    vec3 sd = normalize(sunpos) * rotx(-m.y);\n    \n    sd *= roty(m.x * -mouseSpeedX);\n    vec2 sp = vec2(sd.x / sd.z, sd.y / sd.z);\n    vec4 suncol = 1.0 - smoothstep(0.05, 0.1, length(uv - sp)) * raycolor;\n    suncol += 0.5 * (1.0 - smoothstep(0.02, 0.3, length(uv - sp)) * raycolor);\n    suncol.a = 0.0;\n    \n    finalcolor += suncol;\n\n    // clouds\n    vec4 cloudcl = finalcolor;\n    for (int i = 0; i < cloudsteps; ++i)\n    {\t\n        float fi = float(i + 1);\n        float fl = cloudFilter + fi * 0.01;\n        float fin = fi / stepsf;\n        float c = clouds(rp, rd / abs(rd.y) + 0.2 * fi, fl);\n        cloudcl = mix(cloudcl, cloudcol * c, cloudcl.a);\n    }\n    finalcolor = cloudcl;\n\t// godrays        \n    for (int i = 0; i < steps; ++i)\n    {\t\n        float fi = float(i);\n        float fin = fi / stepsf;\n\n        float offset = 1.0 - fi * .01;\n        float fl = cloudFilter - fi * 0.0001;\n\n        float rlen = offset / abs(rd.y);\n\n        vec3 projpos = rd * rlen;\n        vec3 dif = projpos - sunpos;\n\n        dif = normalize(dif);\n        dif *= -offset;\n        rd = normalize(rd * rlen + dif * 0.035);\n        rd /= abs(rd.y);\n\n        float c = clouds(rp, rd,  fl);\n        c = 1.0 - c;\n        c = flter(c, rayFilter);\n        finalcolor += raycolor * c * (1.0 / stepsf) * rayStrength * (1.0 - finalcolor.a) * (1.0 - fin);\n    }\n    col += finalcolor;\n    \n    // ground\n    if(rd.y < 0.0)\n    {\n        vec4 gc = vec4(0.0);\n\t    ground(rp, _rd, gc);\n        col = mix(gc, finalcolor, .3);\n        col *= cloudcl.r;\n    }\n    \n    float dst = length(vec2(_rd.x / _rd.y, _rd.z / _rd.y));\n    vec4 fog = skycolor;\n    fog = mix(fog, vec4(.2, .09, .0, .0), 1.0 - pow(abs(_rd.y), 0.7));\n    col = mix(col, fog, smoothstep(5.0, 25.0, dst) * 0.7);\n    \n    // mountains\n\tif(rd.y > 0.0)\n    {\n        float x = _rd.x;\n        float y = _rd.y;\n        \n        float s = smoothstep(0.0, 1.0, sin(x * 2.0) * 0.5 + 0.5) * 0.03;\n        s += smoothstep(0.0, 1.0, sin(x * 10.0) * 0.5 + 0.5) * 0.02;\n        s += smoothstep(0.0, 1.0, sin(x * 20.0) * 0.5 + 0.5) * 0.01;\n        s += smoothstep(0.0, 1.0, cos(x * 40.0) * 0.5 + 0.5) * 0.005;\n        \n        float l = smoothstep(0.0, 0.005, y - s);\n        col = mix(mix(fog * 0.85, col, 0.1), col, l);;\n    }\n    fragColor = col;\n    fragColor *= vec4(1.3, 1.3, 1.2, 1.0);\n}","name":"Image","description":"","type":"image"}]}