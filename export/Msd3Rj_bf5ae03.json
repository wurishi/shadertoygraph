{"ver":"0.1","info":{"id":"Msd3Rj","date":"1451020836","viewed":158,"name":"xmas scene","username":"bpt","description":"basically borrowed everything except for layout and a crazy macro","likes":1,"published":1,"flags":64,"usePreview":0,"tags":["xmas","borrowed"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Mds3zH","filepath":"https://soundcloud.com/marisdavis/john-lennon-happy-xmas-war-is","previewfilepath":"https://soundcloud.com/marisdavis/john-lennon-happy-xmas-war-is","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"// Created by inigo quilez - iq/2013\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// A list of usefull distance function to simple primitives, and an example on how to \n// do some interesting boolean operations, repetition and displacement.\n//\n// More info here: https://iquilezles.org/articles/distfunctions\n\nfloat sdPlane( vec3 p )\n{\n\treturn p.y;\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n    return length(p)-s;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat sdEllipsoid( in vec3 p, in vec3 r )\n{\n    return (length( p/r ) - 1.0) * min(min(r.x,r.y),r.z);\n}\n\nfloat udRoundBox( vec3 p, vec3 b, float r )\n{\n  return length(max(abs(p)-b,0.0))-r;\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n  return length( vec2(length(p.xz)-t.x,p.y) )-t.y;\n}\n\nfloat sdHexPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n#if 0\n    return max(q.z-h.y,max((q.x*0.866025+q.y*0.5),q.y)-h.x);\n#else\n    float d1 = q.z-h.y;\n    float d2 = max((q.x*0.866025+q.y*0.5),q.y)-h.x;\n    return length(max(vec2(d1,d2),0.0)) + min(max(d1,d2), 0.);\n#endif\n}\n\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n\tvec3 pa = p-a, ba = b-a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h ) - r;\n}\n\nfloat sdTriPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n#if 0\n    return max(q.z-h.y,max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5);\n#else\n    float d1 = q.z-h.y;\n    float d2 = max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5;\n    return length(max(vec2(d1,d2),0.0)) + min(max(d1,d2), 0.);\n#endif\n}\n\nfloat sdCylinder( vec3 p, vec2 h )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat sdCone( in vec3 p, in vec3 c )\n{\n    vec2 q = vec2( length(p.xz), p.y );\n    float d1 = -q.y-c.z;\n    float d2 = max( dot(q,c.xy), q.y);\n    return length(max(vec2(d1,d2),0.0)) + min(max(d1,d2), 0.);\n}\n\nfloat sdConeSection( in vec3 p, in float h, in float r1, in float r2 )\n{\n    float d1 = -p.y - h;\n    float q = p.y - h;\n    float si = 0.5*(r1-r2)/h;\n    float d2 = max( sqrt( dot(p.xz,p.xz)*(1.0-si*si)) + q*si - r2, q );\n    return length(max(vec2(d1,d2),0.0)) + min(max(d1,d2), 0.);\n}\n\n\nfloat length2( vec2 p )\n{\n\treturn sqrt( p.x*p.x + p.y*p.y );\n}\n\nfloat length6( vec2 p )\n{\n\tp = p*p*p; p = p*p;\n\treturn pow( p.x + p.y, 1.0/6.0 );\n}\n\nfloat length8( vec2 p )\n{\n\tp = p*p; p = p*p; p = p*p;\n\treturn pow( p.x + p.y, 1.0/8.0 );\n}\n\nfloat sdTorus82( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length2(p.xz)-t.x,p.y);\n  return length8(q)-t.y;\n}\n\nfloat sdTorus88( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length8(p.xz)-t.x,p.y);\n  return length8(q)-t.y;\n}\n\nfloat sdCylinder6( vec3 p, vec2 h )\n{\n  return max( length6(p.xz)-h.x, abs(p.y)-h.y );\n}\n\n//----------------------------------------------------------------------\n\nfloat opS( float d1, float d2 )\n{\n    return max(-d2,d1);\n}\n\nvec2 opU( vec2 d1, vec2 d2 )\n{\n\treturn (d1.x<d2.x) ? d1 : d2;\n}\n\nvec3 opRep( vec3 p, vec3 c )\n{\n    return mod(p,c)-0.5*c;\n}\n\nvec3 opTwist( vec3 p )\n{\n    float  c = cos(10.0*p.y+10.0);\n    float  s = sin(10.0*p.y+10.0);\n    mat2   m = mat2(c,-s,s,c);\n    return vec3(m*p.xz,p.y);\n}\n\n//----------------------------------------------------------------------\n\n// WTF preprocessor - why no multi-line macros!!!!\n\n#define START_(PTYPE) ( vec3 pos, vec3 startPos, vec3 endPos, PTYPE startParam, PTYPE endParam, float startColor, float endColor ) {\n#define LINE_001\t\tvec2 res = vec2(1.,startColor);\n#define LINE_002(COUNT)\tfloat ddd = 1./(COUNT - 1.);\n#define LINE_003\t\tvec3 dPos = (endPos - startPos) * ddd;\n#define LINE_004(PTYPE)\tPTYPE dParam = (endParam - startParam) * ddd;\n#define LINE_005\t\tfloat dColor = (endColor - startColor) * ddd;\n#define LINE_006(COUNT) for ( int i = 0; i < COUNT; i++ ) {\n#define LINE_007(PRIM) \t    res = opU( res, vec2( PRIM( pos-startPos, startParam ), startColor ) );\n#define LINE_008        \tstartPos += dPos;\n#define LINE_009        \tstartParam += dParam;\n#define LINE_010         \tstartColor += dColor;\n#define LINE_011 \t\t}\n#define LINE_012    \treturn res;\n#define LINE_013 }\n\n#define MAKE_FN(PRIM,PTYPE,fCOUNT,COUNT) START_(PTYPE) LINE_001 LINE_002(fCOUNT) LINE_003 LINE_004(PTYPE) LINE_005 LINE_006(COUNT) LINE_007(PRIM) LINE_008 LINE_009 LINE_011 LINE_012 LINE_013\n\n//----------------------------------------------------------------------\n\nvec2 sdSphereLine_8 MAKE_FN(sdSphere,float,8.,8)\nvec2 sdSphereLine_4 MAKE_FN(sdSphere,float,4.,4)\nvec2 sdTorusLine_3 MAKE_FN(sdTorus,vec2,3.,3)\n\n//----------------------------------------------------------------------\n    \nvec2 sdPresent( vec3 pos, float size ) {\n    return pos.xy;\n}\n\nvec2 sdPerson( vec3 pos, vec3 feet, float height, float color ) {\n    return sdTorusLine_3( pos, feet, feet + vec3(0,height,0), vec2(0.2,0.1), vec2(0.02,0.1), color, color );\n}\n\nvec2 sdKid( vec3 pos, vec3 feet, float height, float color ) {\n    return sdPerson( pos, feet, height, color );\n}\n\nvec2 sdParent( vec3 pos, vec3 feet, float height, float color ) {\n    return sdPerson( pos, feet, height, color );\n}\n\nvec3 sdJumpingKidPath( vec3 base, float a, float b ) {\n    return base + vec3( b * cos( a + b ), max(0.,b*0.75*sin( a * 15.)), b * sin( a + b ) );\n}\n\nvec3 ellipsePath( vec3 base, float a, float b, float t ) {\n    return base + vec3( a * cos( t ), 0., b * sin( t ) );\n}\n\nvec3 sdTrainPath( vec3 pos, float t ) {\n    return pos + ellipsePath( vec3(0.,0.,0.), 0.4, 0.4, t );\n}\n\nvec2 sdTrainCar( vec3 pos, float t, float color ) {\n\treturn vec2( sdBox( sdTrainPath(pos,t), vec3( 0.05, 0.05, 0.05 ) ), color );\n}\n\nvec2 sdTrain( vec3 pos ) {\n    \n    float t = iTime * 0.75;\n    float s = 0.3;\n    \n    float k = 0.1 + sin( t * 10. ) * 0.1;\n\n    // smoke\n    vec2 res = sdSphereLine_4( sdTrainPath(pos,t+s*7.), vec3(0,0.1,0), vec3(0,0.25+k,0), 0.02, 0.04, 1., 10. );\n    \n    for ( int i = 0; i < 8; i++ ) {\n        \n\t\tres = opU( res, sdTrainCar( pos, t, 50.*t ) );\n        \n        t += s;\n        \n    }\n    \n    return res;\n}\n\n\nvec2 sdBPTScene( vec3 pos ) {\n\n    float t = iTime;\n    \n    // xmas tree\n    vec2 res = sdSphereLine_8( pos, vec3(0,0,0), vec3(0,1.125,0), 0.25, 0.1, 111., 111. );\n    \n    // train\n    res = opU( res, sdTrain( pos ) );\n    \n    // jumping kids\n   \tres = opU( res, sdKid( pos, sdJumpingKidPath( vec3(1,0,0), t, 0.2 ), 0.5, 150. ) ); // kid-1\n   \tres = opU( res, sdKid( pos, sdJumpingKidPath( vec3(-1,0,0), -t, 0.2 ), 0.5, 210. ) ); // kid-2\n    \n    // watching parents\n   \tres = opU( res, sdParent( pos, vec3(0.25,0,-1), 0.75, 160. ) ); // parent-1\n   \tres = opU( res, sdParent( pos, vec3(-0.25,0,-1), 0.75 + sin(t) * 0.05, 120. ) ); // parent-2\n\n    return res;\n    \n}\n\n//----------------------------------------------------------------------\n\nvec2 map( in vec3 pos )\n{\n    vec2 plane = vec2( sdPlane( pos), 1.0 ), res;\n    \n    res = opU( plane, sdBPTScene( pos ) );\n        \n    return res;\n}\n\nvec2 castRay( in vec3 ro, in vec3 rd )\n{\n    float tmin = 1.0;\n    float tmax = 20.0;\n    \n#if 0\n    float tp1 = (0.0-ro.y)/rd.y; if( tp1>0.0 ) tmax = min( tmax, tp1 );\n    float tp2 = (1.6-ro.y)/rd.y; if( tp2>0.0 ) { if( ro.y>1.6 ) tmin = max( tmin, tp2 );\n                                                 else           tmax = min( tmax, tp2 ); }\n#endif\n    \n\tfloat precis = 0.002;\n    float t = tmin;\n    float m = -1.0;\n    for( int i=0; i<50; i++ )\n    {\n\t    vec2 res = map( ro+rd*t );\n        if( res.x<precis || t>tmax ) break;\n        t += res.x;\n\t    m = res.y;\n    }\n\n    if( t>tmax ) m=-1.0;\n    return vec2( t, m );\n}\n\n\nfloat softshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<16; i++ )\n    {\n\t\tfloat h = map( ro + rd*t ).x;\n        res = min( res, 8.0*h/t );\n        t += clamp( h, 0.02, 0.10 );\n        if( h<0.001 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n\tvec3 eps = vec3( 0.001, 0.0, 0.0 );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\n\n\n\nvec3 render( in vec3 ro, in vec3 rd )\n{ \n    vec3 col = vec3(0.7, 0.9, 1.0) +rd.y*0.8;\n    vec2 res = castRay(ro,rd);\n    float t = res.x;\n\tfloat m = res.y;\n    if( m>-0.5 )\n    {\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal( pos );\n        vec3 ref = reflect( rd, nor );\n        \n        // material        \n\t\tcol = 0.45 + 0.3*sin( vec3(0.05,0.08,0.10)*(m-1.0) );\n\t\t\n        if( m<1.5 )\n        {\n            \n            float f = mod( floor(5.0*pos.z) + floor(5.0*pos.x), 2.0);\n            col = 0.4 + 0.1*f*vec3(1.0);\n        }\n\n        // lighitng        \n        float occ = calcAO( pos, nor );\n\t\tvec3  lig = normalize( vec3(0., 1., 0.) ) * 3.0;\n\t\tfloat amb = clamp( 0.5+0.5*nor.y, 0.0, 1.0 );\n        float dif = clamp( dot( nor, lig ), 0.0, 1.0 );\n        float bac = clamp( dot( nor, normalize(vec3(-lig.x,0.0,-lig.z))), 0.0, 1.0 )*clamp( 1.0-pos.y,0.0,1.0);\n        float dom = smoothstep( -0.1, 0.1, ref.y );\n        float fre = pow( clamp(1.0+dot(nor,rd),0.0,1.0), 2.0 );\n\t\tfloat spe = pow(clamp( dot( ref, lig ), 0.0, 1.0 ),16.0);\n        \n      //  dif *= softshadow( pos, lig, 0.02, 2.5 );\n      //  dom *= softshadow( pos, ref, 0.02, 2.5 );\n\n\t\tvec3 lin = vec3(0.0);\n        //lin += 1.20*dif*vec3(1.00,0.85,0.55);\n\t\tlin += 1.20*spe*vec3(1.00,0.85,0.55)*dif;\n        lin += 0.20*amb*vec3(0.50,0.70,1.00)*occ;\n        lin += 0.30*dom*vec3(0.50,0.70,1.00)*occ;\n        lin += 0.30*bac*vec3(0.25,0.25,0.25)*occ;\n        lin += 0.40*fre*vec3(1.00,1.00,1.00)*occ;\n\t\tcol = col*lin;\n\n    \tcol = mix( col, vec3(0.8,0.9,1.0), 1.0-exp( -0.002*t*t ) );\n\n    }\n\n\treturn vec3( clamp(col,0.0,1.0) );\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy/iResolution.xy;\n    vec2 p = -1.0+2.0*q;\n\tp.x *= iResolution.x/iResolution.y;\n    vec2 mo = iMouse.xy/iResolution.xy;\n\t\t \n\tfloat time = 15.0 + iTime;\n\n\t// camera\t\n\tvec3 ro = vec3( -0.5+3.5*cos(0.1*time + 6.0*mo.x), 1.0 + 2.0*mo.y, 0.5 + 3.5*sin(0.1*time + 6.0*mo.x) );\n\tvec3 ta = vec3( -0.5, -0.4, 0.5 );\n\t\n\t// camera-to-world transformation\n    mat3 ca = setCamera( ro, ta, 0.0 );\n    \n    // ray direction\n\tvec3 rd = ca * normalize( vec3(p.xy,2.0) );\n\n    // render\t\n    vec3 col = render( ro, rd );\n\n\tcol = pow( col, vec3(0.4545) );\n\n    fragColor=vec4( col, 1.0 );\n}\n","name":"Image","description":"","type":"image"}]}