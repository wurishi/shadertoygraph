{"ver":"0.1","info":{"id":"ld2cWK","date":"1493900390","viewed":567,"name":"Wibbly Embryo of Light","username":"Hadyn","description":"Spinoff from my Light Orb shader - https://www.shadertoy.com/view/ldjcWy","likes":30,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* \n * Created by Hadyn Lander \n * 3D noise from Nikita Miropolskiy, nikat/2013 https://www.shadertoy.com/view/XsX3zB\n * That basically includes all of this neat looking code up top:\n */\n\n/* discontinuous pseudorandom uniformly distributed in [-0.5, +0.5]^3 */\nvec3 random3(vec3 c) {\n\tfloat j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n\tvec3 r;\n\tr.z = fract(512.0*j);\n\tj *= .125;\n\tr.x = fract(512.0*j);\n\tj *= .125;\n\tr.y = fract(512.0*j);\n\treturn r-0.5;\n}\n\n/* skew constants for 3d simplex functions */\nconst float F3 =  0.3333333;\nconst float G3 =  0.1666667;\n\n/* 3d simplex noise */\nfloat simplex3d(vec3 p) {\n\t /* 1. find current tetrahedron T and it's four vertices */\n\t /* s, s+i1, s+i2, s+1.0 - absolute skewed (integer) coordinates of T vertices */\n\t /* x, x1, x2, x3 - unskewed coordinates of p relative to each of T vertices*/\n\t \n\t /* calculate s and x */\n\t vec3 s = floor(p + dot(p, vec3(F3)));\n\t vec3 x = p - s + dot(s, vec3(G3));\n\t \n\t /* calculate i1 and i2 */\n\t vec3 e = step(vec3(0.0), x - x.yzx);\n\t vec3 i1 = e*(1.0 - e.zxy);\n\t vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\t \t\n\t /* x1, x2, x3 */\n\t vec3 x1 = x - i1 + G3;\n\t vec3 x2 = x - i2 + 2.0*G3;\n\t vec3 x3 = x - 1.0 + 3.0*G3;\n\t \n\t /* 2. find four surflets and store them in d */\n\t vec4 w, d;\n\t \n\t /* calculate surflet weights */\n\t w.x = dot(x, x);\n\t w.y = dot(x1, x1);\n\t w.z = dot(x2, x2);\n\t w.w = dot(x3, x3);\n\t \n\t /* w fades from 0.6 at the center of the surflet to 0.0 at the margin */\n\t w = max(0.6 - w, 0.0);\n\t \n\t /* calculate surflet components */\n\t d.x = dot(random3(s), x);\n\t d.y = dot(random3(s + i1), x1);\n\t d.z = dot(random3(s + i2), x2);\n\t d.w = dot(random3(s + 1.0), x3);\n\t \n\t /* multiply d by w^4 */\n\t w *= w;\n\t w *= w;\n\t d *= w;\n\t \n\t /* 3. return the sum of the four surflets */\n\t return dot(d, vec4(52.0));\n}\n\n/* const matrices for 3d rotation */\nconst mat3 rot1 = mat3(-0.37, 0.36, 0.85,-0.14,-0.93, 0.34,0.92, 0.01,0.4);\nconst mat3 rot2 = mat3(-0.55,-0.39, 0.74, 0.33,-0.91,-0.24,0.77, 0.12,0.63);\nconst mat3 rot3 = mat3(-0.71, 0.52,-0.47,-0.08,-0.72,-0.68,-0.7,-0.45,0.56);\n\n/* directional artifacts can be reduced by rotating each octave */\nfloat simplex3d_fractal(vec3 m) {\n    return   0.5333333*simplex3d(m*rot1)\n\t\t\t+0.2666667*simplex3d(2.0*m*rot2)\n\t\t\t+0.1333333*simplex3d(4.0*m*rot3)\n\t\t\t+0.0666667*simplex3d(8.0*m);\n}\n\n\n/*\n* The Nintendo Super Mess of code below is all me. I am sorryish.\n*/\n\n// Comment out the enxt line to limit the length of \"rays\"\n#define UNLIMITED\t\t\t\n\n#define CENTERSCALE 0.6\n#define CENTERCONNECTEDNESS 0.35\n#define RADIUS 0.5\t\t\t// Has a bigger impact if UNLIMITED is disabled\n#define FLAMEBOOST 0.15\t\t// Adds the flame shape mask over the top of the multiplied noise to maintain more of original shape.\n#define EDGE 0.65\t\t\t// Edge cutoff \n#define FALLOFFPOW 4.0\t\t// Only used is UNLIMITED is disabled\n#define NOISEBIGNESS 1.5 \n#define NIGHTSPEEDBONUS 1.25 \t\t\n#define PI 3.14159265359\n\n\nfloat getNoiseValue(vec2 p, float time)\n{\n    vec3 p3 = vec3(p.x, p.y, 0.0) + vec3(0.0, 0.0, time*0.025);\n    float noise = simplex3d(p3*32.0);// simplex3d_fractal(p3*8.0+8.0);\n\treturn 0.5 + 0.5*noise;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = 28.22+NIGHTSPEEDBONUS*iTime;\n    float bignessScale = 1.0/NOISEBIGNESS;\n\tvec2 p = fragCoord.xy / iResolution.y;\n    float aspect = iResolution.x/iResolution.y;\n    vec2 positionFromCenter = p-vec2(0.5*aspect, 0.5);\n    \n    float innerOrbEdge = (1.0-CENTERCONNECTEDNESS)*CENTERSCALE*RADIUS;\n    vec2 pOffset = normalize(positionFromCenter) * mix(innerOrbEdge-length(positionFromCenter), 1.0, step(CENTERSCALE*RADIUS, length(positionFromCenter)));\n    p = vec2(0.5*aspect, 0.5)+pOffset;//normalize(positionFromCenter)*min(length(positionFromCenter)+CENTERCONNECTEDNESS*CENTERSCALE*RADIUS, CENTERSCALE*RADIUS);    \n    \n    bignessScale = mix(1.2*bignessScale, bignessScale, step(CENTERSCALE*RADIUS, length(positionFromCenter)));\n    \n    \n    float noise = getNoiseValue(bignessScale*0.25*p, time);\n    \n    float distanceFromCenter = clamp(1.0-length(positionFromCenter)/RADIUS, 0.0, 1.0);\n    \n    float scaledDistance = distanceFromCenter * noise;\n    \n    \n    float falloffMask = 1.0; \n    \n    #ifndef UNLIMITED\n        falloffMask =  2.0*scaledDistance-1.0;\n        falloffMask = clamp(1.0-pow(abs(falloffMask), FALLOFFPOW), 0.0, 1.0);\n    #endif\n    \n    float thinnerMask;\n    \n    thinnerMask = 1.0-clamp(abs(distanceFromCenter-(1.0-CENTERSCALE))/CENTERSCALE, 0.0, 1.0);\n    thinnerMask = pow(thinnerMask, 16.0);    \n    thinnerMask = clamp(0.9*thinnerMask, 0.0, 1.0);\n    \n    float finalValue;\n    finalValue = falloffMask;\n    \n    float innerBall = clamp(abs(distanceFromCenter-(1.0-CENTERSCALE))/CENTERSCALE, 0.0, 1.0);\n    innerBall = smoothstep(0.5, 0.85, innerBall);\n    innerBall += noise;\n    \n    finalValue = mix( (noise*falloffMask+thinnerMask)*thinnerMask + innerBall, noise*falloffMask+thinnerMask, step(distanceFromCenter, 1.0-CENTERSCALE));\n    \n    finalValue = smoothstep(EDGE,EDGE+0.1, finalValue);\n    \n    \n    vec3 colorNoise;\n    colorNoise.x\t= getNoiseValue(bignessScale*0.25*p, 10.0+time);\n    colorNoise.y \t= getNoiseValue(bignessScale*0.25*p, 00.0+time);\n    colorNoise.z\t= getNoiseValue(bignessScale*0.25*p, 30.0+time);\n    \n    colorNoise.x = smoothstep(EDGE,EDGE+0.1, colorNoise.x);\n    colorNoise.y = smoothstep(EDGE,EDGE+0.1, colorNoise.y);\n    colorNoise.z = smoothstep(EDGE,EDGE+0.1, colorNoise.z);\n    \n    \n    vec3 finalColor;\n    //finalColor = vec3(colorNoise.x, colorNoise.y, colorNoise.x+colorNoise.y); \n    finalColor = mix(vec3(colorNoise.x, 0.0, 0.2*colorNoise.x), vec3(colorNoise.x, 1.0, 1.0), 1.0-colorNoise.y);\n    finalColor += vec3(1.0) * (pow(clamp(distanceFromCenter+CENTERSCALE, 0.0, 1.0), 8.0));\n    \n    //finalColor = clamp(finalColor, vec3(0.0), vec3(1.0));\n    \n    finalColor *= finalValue;\n    \n    vec3 bgColor = mix(vec3(0.00,0.07,0.15), vec3(0.15,0.35,0.5), distanceFromCenter*0.5);\n    bgColor += vec3(1.0,.2,0.4)* pow(distanceFromCenter, 4.0);\n    finalColor += bgColor;\n    \n\tfragColor = vec4(finalColor,1.0);\n}","name":"Image","description":"","type":"image"}]}