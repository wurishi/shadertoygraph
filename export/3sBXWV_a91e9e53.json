{"ver":"0.1","info":{"id":"3sBXWV","date":"1554914921","viewed":120,"name":"SphereCast","username":"mrsargas","description":"Simple test","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["sphere"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvec2 sphIntersect( in vec3 ro, in vec3 rd, in vec4 sph )\n{\n\tvec3 oc = ro - sph.xyz;\n\tfloat b = dot( oc, rd );\n\tfloat c = dot( oc, oc ) - sph.w*sph.w;\n\tfloat h = b*b - c;\n\tif( h < 0.0 ) return vec2(-1.0);\n\treturn vec2(-b - sqrt( h ), -b + sqrt( h ));\n}\nfloat bump(in float x) \n{\n  return abs(x)>1.0? 0.0: 1.0 - x*x;\n} \nvec3 colormap(in float x) {\n    float r = 0.0, g = 0.0, b = 0.0;\n\n    float c = 3.0;\n    r = bump(c*(x - 0.75));\n    g = bump(c*(x - 0.5));\n    b = bump(c*(x - 0.25));\n    return vec3(r, g, b);\n}\n\nfloat planeIntersect( in vec3 ro, in vec3 rd )\n{\n  if(rd.y == 0.0)\n  return 1e15;\n  float distance = (-1.0 - ro.y)/rd.y;\n  if(distance<0.0)\n    distance = 1e20;\n  return distance;\n}\n\nvec3 getPlaneColor(in vec3 ro, in vec3 rd, in float dist)\n{\n  vec3 v =  ro + rd*dist;\n  float x = v.x*1.0;\n  float y = v.z*1.0;\n  float factor = (sin(x)*sin(x) + cos(y)*cos(y));\n  return vec3(colormap(factor/2.0));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord)\n{\n  float currentDepth = 1e20;\n  float factor = 1.0;\n  vec2 uv = ((fragCoord.xy / iResolution.xy) - 0.5) * 3.0 *vec2(iResolution.x/iResolution.y, 1.0);\n  float x = uv.x;\n  float y = uv.y;\n  const int sizeOffsets = 10;\n  float []rgbOffsets = float[](\n    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,\n    0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 );\n\n   for(int i = 0; i < sizeOffsets; i++ )\n    {\n      rgbOffsets[i] = 1.0 + 0.01 * float(i);\n    }\n\n  vec3 camPos = vec3(0.0, 0.0, -10);\n  vec3 pos = vec3(uv, 0.0);\n  vec4 sph = vec4( cos( iTime + vec3(2.0, 1.0, 3.0) + 0.0 )*vec3(1.0, 1.0, 1.0), 1.0 );\n\n  vec3 camDir = normalize(pos - camPos);\n  float plDist = max(planeIntersect(camPos, camDir), 0.0);\n \n  vec3 planeColor = getPlaneColor(camPos, camDir, plDist);\n  vec2 sphDist = max(sphIntersect(camPos, camDir, sph ), 0.0);\n  vec3 spherePos = camPos + sphDist.x*camDir;\n  vec3 sphereNormal = normalize( spherePos - sph.xyz ); \n  vec3 backgroundColor = vec3( 0.7, 0.7, 0.7);\n  vec4 color = vec4( backgroundColor, 1.0);\n  float ligth = dot( sphereNormal, normalize( sph.xzy ));\n  vec3 sphColor = vec3( 0.0 );\n\n  if(plDist < currentDepth)\n  {\n    color.xyz = planeColor.xyz;\n    currentDepth = plDist;\n  }\n  if( sphDist.x > 0.0)\n  {\n    sphColor = backgroundColor;\n    float colorLength = 0.0;\n    for(int i = 0; i < sizeOffsets; i++ )\n    {\n      float traceDepth = 1e20;\n      vec3 newDir = refract(camDir, sphereNormal, rgbOffsets[i]);\n     \n      vec2 refrCol = abs(sphIntersect(spherePos, newDir, sph ));\n   \n      vec3 refrSpherePos = spherePos + refrCol.y*(newDir);\n\n      vec3 refrSphereNormal = normalize(refrSpherePos - sph.xyz);\n\n      vec3 dir = refract(newDir, refrSphereNormal, rgbOffsets[i]); \n     \n      float refrPlDist = max(planeIntersect(refrSpherePos, dir), 0.0);\n\n      vec3 planeColor = getPlaneColor(refrSpherePos, dir, refrPlDist);\n      vec3 rgbColor = vec3( colormap(float(i) /float(sizeOffsets) ) );\n\n      sphColor.xyz += planeColor*rgbColor;\n      colorLength += length(1.0);\n      if( refrPlDist < traceDepth)\n      {\n        traceDepth = refrPlDist;\n      }\n    \n    }\n    if(sphDist.x < currentDepth)\n    {\n      color.xyz = sphColor.xyz/colorLength ;\n      currentDepth = sphDist.x;\n    }\n    \n  }\n\n  fragColor = vec4( color.xyz, 1.0);\n\n}\n\n","name":"Image","description":"","type":"image"}]}