{"ver":"0.1","info":{"id":"4cVyRG","date":"1732020486","viewed":107,"name":"quasar galaxy and stars","username":"nayk","description":"source combination of  https://www.shadertoy.com/view/msGyzc https://www.shadertoy.com/view/MdXSzS https://www.shadertoy.com/view/tllfRX","likes":3,"published":3,"flags":0,"usePreview":0,"tags":["galaxy","stars","universe"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define NUM_LAYERS 8.\n#define TAU 6.28318\n#define PI 3.141592\n#define Velocity .025 //modified value to increse or decrease speed, negative value travel backwards\n#define StarGlow 0.025\n#define StarSize 02.\n#define CanvasView 20.\n\n\nfloat Star(vec2 uv, float flare){\n    float d = length(uv);\n  \tfloat m = sin(StarGlow*1.2)/d;  \n    float rays = max(0., .5-abs(uv.x*uv.y*1000.)); \n    m += (rays*flare)*2.;\n    m *= smoothstep(1., .1, d);\n    return m;\n}\n\nfloat Hash21(vec2 p){\n    p = fract(p*vec2(123.34, 456.21));\n    p += dot(p, p+45.32);\n    return fract(p.x*p.y);\n}\n\n\nvec3 StarLayer(vec2 uv){\n    vec3 col = vec3(0);\n    vec2 gv = fract(uv);\n    vec2 id = floor(uv);\n    for(int y=-1;y<=1;y++){\n        for(int x=-1; x<=1; x++){\n            vec2 offs = vec2(x,y);\n            float n = Hash21(id+offs);\n            float size = fract(n);\n            float star = Star(gv-offs-vec2(n, fract(n*34.))+.5, smoothstep(.1,.9,size)*.46);\n            vec3 color = sin(vec3(.2,.3,.9)*fract(n*2345.2)*TAU)*.25+.75;\n            color = color*vec3(.0,.0,0.9+size);\n            star *= sin(iTime*.6+n*TAU)*.5+.5;\n            col += star*size*color;\n        }\n    }\n    return col;\n}\n\nvec2 Hash21(float t)\n{\n    float x = fract(sin(t * 136.3) * 45300.2);\n    float y = fract(sin(t * 5400.3) * 453000.2);\n    \n    return vec2(x,y);\n}\n\n#define r(a) mat2(cos(a + asin(vec4(0,1,-1,0)))),\n#define X(p) p *= r(round(atan(p.x, p.y) * 4.) / 4.)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy / iResolution.xy) - .5;\n\t  float t = iTime * 1.1 + ((.25 + .05 * sin(iTime * .1))/(length(uv.xy) + .527)) * 2.2;\nfloat si = tan(t);\nfloat co = cos(t);\nmat2 ma = mat2(co, si, -si, co);\n    uv*=ma;\nvec2 cPos = -1.0 + 2.0 * fragCoord.xy / iResolution.xy;\n    \n    // distance of current pixel from center\n\tfloat cLength = length(cPos);\n\n\t vec3  p, R = iResolution;\n     vec4 O=fragColor;\n      vec2 F=fragCoord;\n    float i, t3, d, a, b, T = iTime * .5 + .5;\n             \n    for(O  *= i; i++ < 44.;\n        O  += .04 * (1. + cos(a + t3*.3 - T*.8 + vec4(0,1,2,0))) \n                  / (1. + abs(d)*30.) )\n        \n        p = t3 * normalize(vec3(F+F-R.xy, R.y)),\n        p.z  -= 4.,\n        p.xz *= r(T/4.)\n        p.yz *= r(sin(T/4.)*.5)\n        X(p.zx)   a = p.x,\n        \n        p.x = mod(b = p.x - T, .5) - .25,\n        \n        t3  += d = length(p) - (2. - a - smoothstep(b+2., b, T)*30.)\n                            * (cos(T/6.+1.)+1.) / 2e2;\n\t\n\tfloat v1, v2, v3;\n\tv1 = v2 = v3 = 0.0;\n\tvec2 M = vec2(0);\n    \n    M -= vec2(M.x+sin(iTime*0.22), M.y-cos(iTime*0.22));\n   \n   uv.xy+= (cPos/cLength)*cos(cLength*12.0-iTime*4.0) * 0.03;\n    float t2 = iTime*Velocity; \n    vec3 col2 = vec3(0);\n   \n    for(float i=0.; i<1.; i+=1./NUM_LAYERS){\n        float depth = fract(i+t);\n        float scale = mix(CanvasView, .5, depth);\n        float fade = depth*smoothstep(1.,.9,depth);\n        col2 += StarLayer(uv*scale+i*453.2-iTime*.05+M)*fade;}   \n\tfloat s = 0.0;\n\tfor (int i = 0; i < 90; i++)\n\t{\n    \n\t\tvec3 p = s * vec3(uv, 0.0);\n       X(p.yz)\n\t\tp.xy+=Hash21(p.xy);\n\t\tp += vec3(.22, .3, s - 1.5 - sin(iTime * .13) * .1)*col2*2.*O.xyz;\n\t\tfor (int i = 0; i < 8; i++)\tp = abs(p) / dot(p,p) - 0.659;\n\t\tv1 += dot(p,p) * .0015 * (1.8 + sin(length(uv.xy * 13.0) + .5  - iTime * .2));\n\t\tv2 += dot(p,p) * .0013 * (1.5 + sin(length(uv.xy * 14.5) + 1.2 - iTime * .3));\n\t\tv3 += length(p.xy*10.) * .0003;\n\t\ts  += .035;\n\t}\n\t\n\tfloat len = length(uv);\n\tv1 *= smoothstep(.7, .0, len);\n\tv2 *= smoothstep(.5, .0, len);\n\tv3 *= smoothstep(.9, .0, len);\n\t\n\tvec3 col = vec3( v3 * (1.5 + sin(iTime * .2) * .4),\n\t\t\t\t\t(v1 + v3) * .3,\n\t\t\t\t\t v2) + smoothstep(0.2, .0, len) * .85 + smoothstep(.0, .6, v3) * .3;\n\n\tfragColor=vec4(min(pow(abs(col+col2+O.xyz), vec3(1.2)), 1.0), 1.0);\n}","name":"Image","description":"","type":"image"}]}