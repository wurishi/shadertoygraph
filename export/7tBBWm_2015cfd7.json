{"ver":"0.1","info":{"id":"7tBBWm","date":"1652353612","viewed":133,"name":"A sea of color","username":"Soleam","description":"Multiple channels of distorted perlin noise, combined with a distorted voronoi for local tint variations.\n\nCode for voronoi taken from : https://www.shadertoy.com/view/Xd23Dh\nCode for noise taken from : https://www.shadertoy.com/view/Msf3WH","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["procedural","distortion","color"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Source for voronoi code : https://www.shadertoy.com/view/Xd23Dh\n//Source for noise code: https://www.shadertoy.com/view/Msf3WH\n\nvec3 hash3( vec2 p )\n{\n    vec3 q = vec3( dot(p,vec2(127.1,311.7)), \n\t\t\t\t   dot(p,vec2(269.5,183.3)), \n\t\t\t\t   dot(p,vec2(419.2,371.9)) );\n\treturn fract(sin(q)*43758.5453);\n}\n\nfloat voronoise( in vec2 p, float u, float v ,in float scale)\n{\n    p = p*scale;\n\tfloat k = 1.0+63.0*pow(1.0-v,6.0);\n\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n    \n\tvec2 a = vec2(0.0,0.0);\n    for( int y=-2; y<=2; y++ )\n    for( int x=-2; x<=2; x++ )\n    {\n        vec2  g = vec2( x, y );\n\t\tvec3  o = hash3( i + g )*vec3(u,u,1.0);\n\t\tvec2  d = g - f + o.xy;\n\t\tfloat w = pow( 1.0-smoothstep(0.0,1.414,length(d)), k );\n\t\ta += vec2(o.z*w,w);\n    }\n\t\n    return a.x/a.y;\n}\n\nvec2 hash(in vec2 p, in float fac ) // replace this by something better\n{\n\tp = vec2( dot(p,vec2(127.1*fac,311.7*fac)), dot(p,vec2(269.5*fac,183.3*fac)) );\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123*fac);\n}\n\nfloat noise( in vec2 p , in float fac)\n{\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\n\tvec2  i = floor( p + (p.x+p.y)*K1 );\n    vec2  a = p - i + (i.x+i.y)*K2;\n    float m = step(a.y,a.x); \n    vec2  o = vec2(m,1.0-m);\n    vec2  b = a - o + K2;\n\tvec2  c = a - 1.0 + 2.0*K2;\n    vec3  h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\tvec3  n = h*h*h*h*vec3( dot(a,hash(i+0.0,fac)), dot(b,hash(i+o,fac)), dot(c,hash(i+1.0,fac)));\n    return dot( n, vec3(70.0) );\n}\nfloat combine(in vec2 p, in float fac, in float scale)\n{\n    vec2 uv = p*vec2(iResolution.x/iResolution.y,1.0);\n\t\n    \n\tfloat f = 0.0;\n    uv *= scale;\n    mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\n    f  = 0.5000*noise( uv , fac); uv = m*uv;\n    f += 0.2500*noise( uv , fac); uv = m*uv;\n    f += 0.1250*noise( uv , fac); uv = m*uv;\n    f += 0.0625*noise( uv , fac); uv = m*uv;\n\n\tf = 0.5 + 0.5*f;\n\t\n    //f *= smoothstep( 0.0, 0.005, abs(p.x-0.6) );\n    \n    return f;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord.xy / iResolution.xy+vec2(iTime*0.005,iTime*0.008);\n    \n    //mouse position corrected for resolution (0 to 1)\n    vec3 mouseCorr = vec3(iMouse.xy/iResolution.xy,0.);\n    //z component stores whether the user clicks or not\n    if(iMouse.z>0.)\n    {\n        mouseCorr.z=1.;\n    }\n    \n    //\"Random\" factors for various functions below\n    float fac1 = 1.764;\n    float fac2 = 2.1938;\n    float fac3 = 5.1394;\n    float fac4 = 0.1938;\n    float fac5 = 3.1394;\n    \n    //Global scale of distortion\n    float distortionScale = 4.;\n    \n    //Two different oscillators, for time variations\n    float osc = 1.+sin(iTime*0.3)*0.5;\n    float osc2 = 0.75+sin(iTime*0.47)*0.25;\n    \n    //Distortion offset, used in pretty much every function below\n    vec2 offset = vec2(combine(p,fac1,distortionScale)-.5,combine(p,fac2,distortionScale)-.5);\n    \n    //\n    float noiseComp1 = combine(p+offset*osc,fac3,6.0);\n    float noiseComp2 = combine(p+offset*osc,fac4,7.0);\n    float noiseComp3 = combine(p+offset*osc,fac5,8.0);\n    float vorComp = voronoise(p+offset*osc,1.,0.,10.0);\n    \n    //Exponents for color saturation\n    float e1 = 0.1+fract(vorComp*fac1)*(1.+cos(iTime*0.0017));\n    float e2 = 0.1+fract(vorComp*fac2)*(1.+cos(iTime*0.0017));\n    float e3 = 0.1+fract(vorComp*fac3)*(1.+cos(iTime*0.0017));\n    \n    //RGB components\n    float rComp = combine(p+offset*osc2,fac2*(fac4),2.0);\n    float gComp = combine(p+offset*osc2,fac2*(fac5),2.0);\n    float bComp = combine(p+offset*osc2,fac3*(fac2),2.0);\n    \n    //Mouse controls saturation in a weird way depending on position\n    if(mouseCorr.z>0.)\n    {\n        e1*=(.5+.5*sin(3.*mouseCorr.x+1.342));\n        e2*=(.5+.5*sin(2.*mouseCorr.y+.8304));\n        e3*=(.5+.5*sin(5.*mouseCorr.x*mouseCorr.y-.1933));\n    }\n    \n    //each component is getting saturated randomly\n    vec3 col = vec3(pow(noiseComp1,e1*rComp),\n    pow(noiseComp2,e2*gComp),\n    pow(noiseComp3,e3*bComp));\n    //vec3 col = vec3(vorComp*noiseComp);\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}