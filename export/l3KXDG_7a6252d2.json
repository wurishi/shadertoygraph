{"ver":"0.1","info":{"id":"l3KXDG","date":"1720459873","viewed":49,"name":"Julia - hw5","username":"Morevita","description":"A shader trying blue and white porcelain color matching Julia fractal pattern","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["2d","fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265\n\nvec3 palette(float t, vec3 a, vec3 b, vec3 c, vec3 d) {\n    return a + b * cos(6.28318 * (c * t + d));\n}\n\nfloat getAngularDist(float angle1, float angle2) {\n    float angle = angle1 - angle2;\n    if (angle > PI) {\n        angle -= 2.0 * PI;\n    } else if (angle <= -PI) {\n        angle += 2.0 * PI;\n    }\n    return angle;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n\n    float zoom =.7 + 0.65 * sin(iTime * 0.2);\n    vec2 offset = vec2(0.0, 0.0);\n    uv = uv * zoom + offset;\n    uv *= mat2(cos(iTime/10.), -sin(iTime/10.), -sin( iTime/10.), -cos(iTime/10.));\n\n    vec2 c = vec2(-0.7, 0.27015);\n    vec2 z = uv;\n    int iterations = 200;\n    float threshold = 2.0;\n\n    for (int i = 0; i < iterations; i++) {\n        float x = (z.x * z.x - z.y * z.y) + c.x;\n        float y = (z.y * z.x + z.x * z.y) + c.y;\n        z = vec2(x, y);\n\n        if (length(z) > threshold) {\n            float angleO = atan(uv.y, uv.x);\n            float angleT = atan(z.y, z.x);\n\n            float eDist = length(uv - z);\n            float aDist = getAngularDist(angleO, angleT);\n            aDist = aDist / (2. * PI);\n\n            // Define the color palette\n            vec3 colA = vec3(0.0, 0.2, 0.6); \n            vec3 colB = vec3(0.4, 0.7, 0.8); \n            vec3 colC = vec3(0.1, 0.2, 0.9); \n            vec3 colD = vec3(0.1, 0.6, 0.0); \n\n            // Use smoothstep to interpolate the colors\n            vec3 color = mix(colA, colB, smoothstep(0.0, 0.2, aDist));\n            color = mix(color, colC, smoothstep(0.2, 0.66, aDist));\n            color = mix(color, colD, smoothstep(0.66, 1.0, aDist));\n\n            fragColor = vec4(color, 1.0);\n            return;\n        }\n    }\n\n    fragColor = vec4(1., 1., 1., 1.);\n}\n","name":"Image","description":"","type":"image"}]}