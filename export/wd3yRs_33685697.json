{"ver":"0.1","info":{"id":"wd3yRs","date":"1601494000","viewed":307,"name":"subtle scales","username":"sukupaper","description":"My first own implementation of a triangle paving (1 year since I've begun learning fragment shader programming)","likes":32,"published":1,"flags":0,"usePreview":0,"tags":["triangles","pattern","paving","scales","trianglepaving"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Author: sukupaperu\n// Title: subtle scales\n\n#define P 6.2831853071795\n\nfloat rand(in vec2 st){ return fract(sin(dot(st.xy,vec2(12.9898,78.233)))*43758.585); }\nvec3 SpectrumPoly(in float x) {\n    // https://www.shadertoy.com/view/wlSBzD\n    return (vec3( 1.220023e0,-1.933277e0, 1.623776e0)+(vec3(-2.965000e1, 6.806567e1,-3.606269e1)+(vec3( 5.451365e2,-7.921759e2, 6.966892e2)+(vec3(-4.121053e3, 4.432167e3,-4.463157e3)+(vec3( 1.501655e4,-1.264621e4, 1.375260e4)+(vec3(-2.904744e4, 1.969591e4,-2.330431e4)+(vec3( 3.068214e4,-1.698411e4, 2.229810e4)+(vec3(-1.675434e4, 7.594470e3,-1.131826e4)+ vec3( 3.707437e3,-1.366175e3, 2.372779e3)*x)*x)*x)*x)*x)*x)*x)*x)*x;\n}\nmat2 rot(in float a) { return mat2(cos(a),sin(a),-sin(a),cos(a)); }\n\nvec4 tri(in vec2 p) {\n    #define R .86602544038\n    vec2 r = vec2(R,1.);\n    vec2 pr = p*r;\n    vec3 floorPy = vec3(floor(p.y)*.5,floor(p.y)*.5 + .5,0.);\n    \n    vec3 pTm1 = (fract(pr.xxy + floorPy.xyz));\n    vec4 pTm2 = (pTm1.xzyz - vec3(.5,1./3.,2./3.).xyxz)/r.xyxy;\n    vec2 pT = fract(pr + vec2(p.y*.5,0.));\n    vec2 pId;\n    if(pT.y < pT.x) {\n        pId = floor(pr + floorPy.xz);\n        pT = pTm2.xy;\n    } else {\n        pId = 1. + floor(pr + floorPy.yz);\n        pT = pTm2.zw;\n    }\n    return vec4(pT,pId);\n}\nfloat cosa(in float x, in float y, in float w) { return cos((x/P)*y + w)*.5+.5; }\nfloat sq(in vec2 p, in float s, in float r) { return length(max(abs(p) - s,0.)) - r; }\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 st = (fragCoord - .5*iResolution.xy )/iResolution.x;\n    float aa = 1./iResolution.x;\n    \n    st -= st*length(st)*.5;\n    float sz = 8.;\n    float t = iTime - 17.;\n    \n    st *= rot(P*.125 + .1*t);\n    vec2 p = st + vec2(t*.1,0.);\n    vec4 pT = tri(p*sz);\n    sz *= 1. + floor(rand(vec2(pT.zw))*15.);\n    pT = tri(p*sz);\n    \n    float taille = cosa(t,12.,pT.w*.25);\n    float d = (length(pT.xy) - taille/3.)/sz;\n    d = max(d,-sq(pT.xy*rot(P/8. + t*2. + pT.w),.2125*taille,.02)/sz);\n    float dd = (.3 - d*2.);\n    d = smoothstep(-aa,aa,-d) + dd;\n    \n    vec3 color = SpectrumPoly(rand(vec2(pT.zw))*.1 + mix(.2,.625, smoothstep(.46,.52,cosa(t + pT.w*.25,1.,0.)) ))*(dd*8.)*d;\n    \n    fragColor = vec4(pow(color - length(st)*length(st)*1.69,vec3(1.2)),1.0);\n}","name":"Image","description":"","type":"image"}]}