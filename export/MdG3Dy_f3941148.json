{"ver":"0.1","info":{"id":"MdG3Dy","date":"1456222331","viewed":397,"name":"sdMiter","username":"paniq","description":"computing the distance to two planes intersecting at zero with a rounding radius. wrote this to solve the problem of rounded capped cones, but it's also useful for beveling strokes.","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["round","intersection","plane","miter"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat dot2( in vec2 v ) { \n    return dot(v,v);\n}\nfloat det(vec2 a, vec2 b) {\n    return a.x * b.y - a.y * b.x;\n}\n\n// d1, d2 must be normalized\n// if one of the planes is axis aligned, the terms are simpler\nfloat sdMiter(vec2 p, vec2 d1, vec2 d2, float r) {\n    float d1d2 = det(d1,d2);\n    float sd1d2 = sign(d1d2);\n    p += (d1 + d2) * r / (dot(d1,d2) + 1.0);\n\n    float h1 = det(p,d1) * 0.5;\n    float h2 = det(p,d2) * 0.5;\n    vec2 l1 = p - vec2(d1.y,-d1.x) * (h1 + abs(h1)*sd1d2);\n    vec2 l2 = p - vec2(d2.y,-d2.x) * (h2 - abs(h2)*sd1d2);\n    \n\treturn sqrt(min(dot2(l1),dot2(l2))) * sign(max(dot(p, d1),dot(p, d2))) - r;\n}\n\nfloat map (vec2 p) {\n    float a = iTime * 0.3;\n    float b = 3.14159 * 0.1 + iTime * 0.1;\n    vec2 d1 = vec2(cos(a),sin(a)); // 1 0\n    vec2 d2 = vec2(cos(b),sin(b)); // -0.70710678118655 0.70710678118655\n    \n    return sdMiter(p,d1,d2,(sin(iTime)*0.5+0.5)*0.5);\n}\n\n//-------------------------------------------------------\n\nfloat circle (vec2 p, float r) {\n    return length(p) - r;\n}\n\nfloat outline (float d) {\n    return 1.0 - smoothstep(0.0, 3.0 / iResolution.y, abs(d));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 p = uv * 2. - 1.;\n    p.x *= iResolution.x / iResolution.y;\n    \n    vec2 m = (iMouse.xy / iResolution.xy)*2.0-1.0;\n    m.x *= iResolution.x / iResolution.y;\n\n    float d = map(p);\n\n    float d2 = abs(map(m));\n    \n    float s = abs(mod(d, 0.1)/0.1 - 0.5);    \n\tfragColor = vec4(((iMouse.z > 0.5)?outline(circle(p-m,d2)):0.0)+s+vec3(outline(d) + 0.3 * step(d,0.0)),1.0);\n}","name":"Image","description":"","type":"image"}]}