{"ver":"0.1","info":{"id":"wd3cDl","date":"1601968477","viewed":167,"name":"2D Perlin Noise with Lights","username":"Dominexis","description":"Same Perlin noise function, but it is lit up by a point hovering above the surface.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["perlinnoise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float rng( in vec2 pos )\n{\n    return fract(sin( pos.y + pos.x*78.233 )*43758.5453)*2.0 - 1.0;\n}\n\nfloat perlin( in vec2 pos )\n{\n    // Get node values\n    \n    float a = rng( vec2(floor(pos.x), floor(pos.y)) );\n    float b = rng( vec2(ceil( pos.x), floor(pos.y)) );\n\tfloat c = rng( vec2(floor(pos.x), ceil( pos.y)) );\n    float d = rng( vec2(ceil( pos.x), ceil( pos.y)) );\n    \n    float a_x = rng( vec2(floor(pos.x+100.0), floor(pos.y)) );\n    float b_x = rng( vec2(ceil( pos.x+100.0), floor(pos.y)) );\n    float c_x = rng( vec2(floor(pos.x+100.0), ceil( pos.y)) );\n    float d_x = rng( vec2(ceil( pos.x+100.0), ceil( pos.y)) );\n    \n    float a_y = rng( vec2(floor(pos.x+200.0), floor(pos.y)) );\n    float b_y = rng( vec2(ceil( pos.x+200.0), floor(pos.y)) );\n    float c_y = rng( vec2(floor(pos.x+200.0), ceil( pos.y)) );\n    float d_y = rng( vec2(ceil( pos.x+200.0), ceil( pos.y)) );\n    \n    a += a_x*fract(pos.x) + a_y*fract(pos.y);\n    b += b_x*(fract(pos.x)-1.0) + b_y*fract(pos.y);\n    c += c_x*fract(pos.x) + c_y*(fract(pos.y)-1.0);\n    d += d_x*(fract(pos.x)-1.0) + d_y*(fract(pos.y)-1.0);\n    \n    \n    \n    // Interpolate values\n    \n    float inter_x = smoothstep(0.0,1.0,fract(pos.x));\n    float inter_y = smoothstep(0.0,1.0,fract(pos.y));\n    \n    return a + (b-a)*inter_x + (c-a)*inter_y + (a-b-c+d)*inter_x*inter_y;\n}\n\nfloat fractal_noise( in vec2 pos )\n{\n\treturn perlin( pos )\n        + perlin( pos*2.0 + vec2(100.0,0.0) )/2.0\n        + perlin( pos*4.0 + vec2(200.0,0.0) )/4.0\n        + perlin( pos*8.0 + vec2(300.0,0.0) )/8.0\n        + perlin( pos*16.0 + vec2(400.0,0.0) )/16.0\n        + perlin( pos*32.0 + vec2(500.0,0.0) )/32.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Initialize values\n    \n    float chunk_size = 10.0;\n    vec2 uv = fragCoord*chunk_size/iResolution.xx;\n    vec2 mouse = iMouse.xy*chunk_size/iResolution.xx;\n    float light = 1.0;\n    \n    \n    \n    // Get elevation\n    \n    float base = fractal_noise( uv )*4.0;\n    float slope_x = fractal_noise( uv + vec2(0.01,0.0) )*4.0 - base;\n    float slope_y = fractal_noise( uv + vec2(0.0,0.01) )*4.0 - base;\n    \n    vec3 ray = cross( vec3( 0.01, 0.0, slope_x ), vec3( 0.0, 0.01, slope_y ) );\n    \n    float a = length(ray);\n    float b = distance( vec3(mouse, light), vec3(uv, 0.0) );\n    float c = distance( vec3(mouse, light), vec3(uv+ray.xy, ray.z) );\n    \n    float pixel = ( a*a + b*b - c*c )/(2.0*a*b*b*b);\n    \n    \n    \n    // Display noise\n    \n    float inside = step( distance(iMouse.xy, fragCoord), 5.0 );\n    float outside = 1.0 - inside;\n    \n    fragColor = vec4( outside*pixel + inside, outside*pixel + inside, outside*pixel + inside, 1.0 );\n}","name":"Image","description":"","type":"image"}]}