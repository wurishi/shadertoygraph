{"ver":"0.1","info":{"id":"4X2SDw","date":"1710705516","viewed":117,"name":"The Ever-Expanding Void","username":"berelium","description":"Two settings: A growing blackhole in space or a hole burning in the atmosphere. Use Fullscreen for the best effect! The in space version will result in a totally black screen (~92s), which is neat. ","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["noise","grid","distance","dist","divisions"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The ever-expanding void.\n// Default setting is in space, and will result in a totally black screen by ~90s\n// Other setting is just for giggles, kind of looks like a hole burning in the sky.\n// Both scenes look best viewed in Fullscreen!\n// Update: Special thanks to @FabriceNeyret2 for the optimizations (and also the golf!)\n\n\nconst bool IN_SPACE = false;\n#define GAMMA 1.6\n\n// Noise functions\nfloat N21(  vec2 p ) {\n    p = fract(p * vec2(233.34,851.73));\n    p += dot(p, p +  23.45);\n    return fract(p.x * p.y);\n}\n\nvec3 hole( in vec2 p, in float r ) {\n    float d = length(p) - r, n;\n    if(d < 0.01) return vec3(1); // get rid of noise in the hole\n    \n    n = d * N21(p.yx * 1e-4);\n    vec3 h = n / vec3(d, d*d, d*d*d);\n    if(IN_SPACE) h = max(h, n);\n    \n    return h;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor *= 0.;\n    \n    float t = iTime / 2.;\n    float scale = IN_SPACE ? exp(t) \n                           : t * t;\n    \n    vec2  R = iResolution.xy,\n          I = round( scale * (fragCoord - 0.5*R ) / R.x ); \n    \n    // Invert, tonemap, and gamma correct\n    vec3 col = 1.0 - sqrt(hole(I, scale / 5.));\n    col = pow(col, vec3(1.0 / GAMMA));\n    \n    fragColor.rgb = col;\n}\n\n/* ====== GOLFED ======\nfloat H(  vec2 p ) {\n    p = fract(p * vec2(233.34,851.73));\n    p += dot(p, p +  23.45);\n    return fract(p.x * p.y);\n}\n\nvoid mainImage( out vec4 O, vec2 u ) {\n    bool  S = true;          // IN_SPACE flag\n    float t = iTime/2., d,n,\n          s = S ? exp(t)\n                : t * t;  \n    vec2  R = iResolution.xy,\n          p = round( s * (u - .5*R ) / R.x ); \n\n    d = length(p) - s/5., n; //  hole(I, s/5.)\n    O = vec4(1);\n    if(d > .01)\n        n = d * H( p.yx * 1e-4 ),\n        O = n / vec4(d, d*d, d*d*d*d, 1),\n        S ? O = max( O, n ) : O;   \n\n    O =  1. - sqrt( O );\n}\n===== @FabriceNeyret2 ===== */","name":"Image","description":"","type":"image"}]}