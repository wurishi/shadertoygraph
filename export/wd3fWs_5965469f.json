{"ver":"0.1","info":{"id":"wd3fWs","date":"1606247131","viewed":426,"name":"Degradaded Vhs Shader","username":"Hakiergrzonzo","description":"Chroma subsampling meant to resemble a VHS tape ","likes":8,"published":1,"flags":32,"usePreview":0,"tags":["vhs"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define blur 80.0\n#define chromaFactor 14.0\n\nfloat downscale(float a, float factor)\n{\n    return floor(a * factor + 2.0 * factor / 100.0) / factor;\n}\n\nvec3 rgb2yuv(vec3 rgb)\n{\n    return vec3(0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b,\n                -0.147 * rgb.r - 0.289 * rgb.g + 0.436 * rgb.b,\n                0.615 * rgb.r - 0.515 * rgb.g - 0.100 * rgb.b);\n}\n\nvec3 yuv2rgb(vec3 yuv)\n{\n    return vec3(yuv.r + 1.140 * yuv.b, yuv.r - 0.395*yuv.g - 0.581*yuv.b, yuv.r + 2.032*yuv.g);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float x_offset = -(fragCoord.x - 1.0) / iResolution.x + uv.x;\n\n    vec2 chroma = vec2(.0, .0);\n    \n    float x_sample = max(uv.x - blur * x_offset, 0.0);\n    \n    int count = 0;\n    int y_count = 0;\n    \n    float Y = .0;\n    \n    while (x_sample < 1. && x_sample < uv.x + blur * x_offset)\n    {\n        vec4 samples = texture(iChannel0, vec2(x_sample, uv.y));\n        if (x_sample > uv.x - (blur * x_offset) / chromaFactor && x_sample < uv.x + (blur * x_offset) / chromaFactor)\n        {\n            Y += samples.r;\n            y_count++;\n        }\n        chroma += samples.gb;\n        count++;\n        x_sample += x_offset;\n    }\n    chroma /= float(count);\n    Y /= float(y_count);\n    \n    fragColor = vec4(yuv2rgb(vec3(Y, chroma)), 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define Cut 0.3\n#define G_cut 0.3\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 sample1 = texture(iChannel0, uv);\n    if (sample1.r < Cut && sample1.b < Cut && sample1.g > G_cut)\n    \tfragColor = texture(iChannel1, uv);\n    else\n       \tfragColor = sample1;\n    if (mod(fragCoord.y, 2.0) > 0.5)\n    {\n        fragColor *= 0.750;\n    }\n\n\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"#define u_res 10.0\n\nfloat downscale(float a, float factor)\n{\n    return floor(a * factor + 2.0 * u_res / 100.0) / factor;\n}\n\nvec3 rgb2yuv(vec3 rgb)\n{\n    return vec3(0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b,\n                -0.147 * rgb.r - 0.289 * rgb.g + 0.436 * rgb.b,\n                0.615 * rgb.r - 0.515 * rgb.g - 0.100 * rgb.b);\n}\n\nvec3 yuv2rgb(vec3 yuv)\n{\n    return vec3(yuv.r + 1.140 * yuv.b, yuv.r - 0.395*yuv.g - 0.581*yuv.b, yuv.r + 2.032*yuv.g);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = rgb2yuv(vec3(texture(iChannel0, uv)));\n\tcol = vec3(col.r, downscale(col.g, u_res), downscale(col.b, u_res));\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}","name":"Buffer B","description":"","type":"buffer"}]}