{"ver":"0.1","info":{"id":"lcjyWh","date":"1722268914","viewed":31,"name":"Exercício CG","username":"Everton","description":"Exercício básico de GLSL: uniforms e animação ","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["exercciobsicodeglsluniformseanimao"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //iResolution: Utilizei para normalizar as coordenadas dos pixels.\n    vec2 uv = fragCoord / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    //iTime: Utilizei para criar um movimento de vai e vem do quadrado e para mudar a cor ao longo do tempo.\n    float xPos = sin(iTime) * 0.5;\n    \n    float size = 0.2;\n    \n    if (uv.x > xPos - size && uv.x < xPos + size && uv.y > -size && uv.y < size)\n    {\n        vec3 squareColor = vec3(0.5 + 0.5 * sin(iTime), 0.5 + 0.5 * sin(iTime + 2.0), 0.5 + 0.5 * sin(iTime + 4.0));\n        fragColor = vec4(squareColor, 1.0);\n    }\n    else\n    {\n        fragColor = vec4(0.0);\n    }\n}\n//Passos para criar a animação\n//Normalizar as Coordenadas: Calcula a posição normalizada dos pixels.\n//Movimento do Quadrado: Usei uma função baseada no tempo para mover o quadrado horizontalmente.\n//Cor do Quadrado: Muda a cor do quadrado ao longo do tempo.\n//Desenhar o Quadrado: Usa a posição do quadrado para verificar se um pixel está dentro do quadrado e aplica a cor correspondente.","name":"Image","description":"","type":"image"}]}