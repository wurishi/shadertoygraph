{"ver":"0.1","info":{"id":"3lKBWy","date":"1615038934","viewed":77,"name":"Blackhole vaporwave","username":"matteoamadio","description":"aaa","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["colors"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float circle(vec2 uv, vec2 p, float r, float blur){\n    float d = length(uv - p);\n    float c = smoothstep(r, r - blur, d);\n   \n    return c;\n}\n\nfloat band(float t, float start, float end, float blur){\n    float step1 = smoothstep(start-blur, start+blur, t);\n    float step2 = smoothstep(end+blur, end-blur, t);\n    \n    return step1*step2;\n}\n\nfloat square(float x){\n    return sign(sin(x));\n}\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat rect(vec2 uv, float left, float right, float bottom, float top, float blur){\n    float band1 = band(uv.x, left, right, blur);\n    float band2 = band(uv.y, bottom, top, blur);\n    return band1*band2;\n}\n\nfloat drawLine(vec2 p1, vec2 p2, vec2 uv, float a){\n    float r = 0.;\n    float one_px = 1. / iResolution.x; //not really one px\n    \n    // get dist between points\n    float d = distance(p1, p2);\n    \n    // get dist between current pixel and p1\n    float duv = distance(p1, uv);\n\n    //if point is on line, according to dist, it should match current uv \n    r = 1.-floor(1.-(a*one_px)+distance (mix(p1, p2, clamp(duv/d, 0., 1.)),  uv));\n        \n    return r;\n}\n\nfloat remap(float a, float b, float t){\n    return (t-a)/(b-a);\n}\nfloat scale(float a, float b, float c, float d, float t, float exp){\n    return pow(remap(a, b, t), exp)*(d-c) + c;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord/iResolution.xy; //0 to 1\n    uv -= .5; //-0.5 to 0.5\n    uv.x *= iResolution.x/iResolution.y;\n    float y = uv.y;\n    float x = uv.x;\n    \n    x+=sin(iTime+y*10.)*.1;\n    \n    \n    //colors\n    vec3 col = .5 + .5 * cos(0.25*iTime + uv.xyx+vec3(0, 2, 4));\n    vec3 col2 = .5 + .5 * sin(0.2*iTime + uv.xyx+vec3(0, 2, 4));\n    \n    //circles\n    float blur = 0.2;\n    float c1 = circle(uv, vec2(0., 0.), 0.4, blur);\n    float c2 = circle(uv, vec2(0.07, -0.07), 0.3, blur);\n    float c3 = circle(uv, vec2(-0.07, 0.07), 0.3, blur);\n    float c4 = circle(uv, vec2(0.07, 0.07), 0.3, blur);\n    float c5 = circle(uv, vec2(-0.07, -0.07), 0.3, blur);\n    //circles modulation params\n    float a2 = pow(sin(0.1*iTime), 3.);\n    float a3 = pow(cos(0.11*iTime), 3.);\n    float a4 = pow(sin(0.07*iTime), 3.);\n    float a5 = pow(cos(0.13*iTime), 3.);\n    //circles modulation\n    float circles = c1 * (a2 * c2 + a3 * c3 - a4 * c4 + a5 * c5);\n    vec3 color = (col2 * circles) / (1. - col) * (1.-circles);\n    \n    //rect mask\n    float blur1 = scale(.5, -.5, 0.01, 0.5, y, 2.);\n    //blur1*=blur1;\n    float mask = square(2.1*iTime)*rect(vec2(x, y), -0.25, 0.25, -0.5, 0.5, blur1);\n    mask -= square(iTime)*rect(vec2(x, y), -0.15, 0.15, -0.35, 0.35, blur1);\n    mask += square(1.7*iTime)*rect(vec2(x, y), -0.05, 0.05, -0.15, 0.15, blur1);\n    //mask mod\n    float mr = rand(round(uv*4.5)*float(iFrame/60));\n    float mg = rand(round(uv*5.)*float(iFrame/60));\n    float mb = rand(round(uv*5.5)*float(iFrame/60));\n    if(mr<0.7)mr=0.;\n    if(mg<0.7)mg=0.;\n    if(mb<0.7)mb=0.;\n    \n    color *= vec3(mask)*vec3(mr, mg, mb);\n    \n    //no smooth, black path\n    //float d = length(uv);\n    //if(d<=0.3) color = col2; else if(d >= .3 && d <= .31) color = vec3(0.); else color = 1. - col;\n    \n    \n    //float lines = 1.- drawLine(vec2(1., 0.2), vec2(-1., -0.3), uv, 1.);\n    //lines -= drawLine(vec2(0., 1.), vec2(0., -1.), uv, 1.);\n    \n    fragColor = vec4(color, 1.0);\n    //fragColor = vec4(vec3(uv.y), 1.0);\n}","name":"Image","description":"","type":"image"}]}