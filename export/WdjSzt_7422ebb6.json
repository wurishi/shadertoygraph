{"ver":"0.1","info":{"id":"WdjSzt","date":"1554729581","viewed":115,"name":"Voronoi_tutorial1","username":"etiennecreator","description":"tuto","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["voronoi"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 N22(vec2 p)\n{\n\tvec3 a = fract(p.xyx * vec3(123.34, 234.34, 345.65));\n    a += dot(a, a + 34.45);\n    return fract(vec2(a.x * a.y, a.y * a.z));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2. * fragCoord-iResolution.xy) / iResolution.y;\n\t\n    float m = 0.;\n    float t = iTime;\n    \n    float minDist = 100.;\n    float cellIndex = 0.;\n    float cellCount = 50.;\n    \n    vec3 col = vec3(0);\n    \n    /*\n\t- Non efficient approach - \n    for (float i = 0.; i < cellCount; i++)\n    {\n    \tvec2 n = N22(vec2(i));\n        vec2 p = sin(n * t);\n        \n        float d = length(uv - p);\n        m += smoothstep(.02, .01, d);\n        \n        if (d < minDist)\n        {\n        \tminDist = d;\n            cellIndex = i;\n        }\n    }\n\n\t*/\n    \n    uv *= 3.;\n    vec2 grid = fract(uv)-.5;\n    vec2 id = floor(uv);\n    vec2 cid = vec2(0);\n    \n    \n    for (float y  = -1.; y <= 1.; y++)\n    {\n    \tfor (float x = -1.; x <= 1.; x++)\n        {\n        \tvec2 offs = vec2(x, y);\n            vec2 n = N22(id + offs);\n            vec2 p = offs + sin(n * t) * .5;\n            \n            float d = length(grid - p);\n            \n        \t\n            if (d < minDist)\n            {\n                minDist = d;\n                cid = id + offs;\n            }\n        }\n    }\n    col = vec3(minDist);\n    //col.rg = cid * .1;\n    \n    \n    \n    \n    \n    \n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}