{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"\t\tprecision highp float;\n\n#define cx 0.37742050900124013;\n#define cy 0.6057686323765665;\n#define epsilon 0.0001\n#define steps 1000\n\n#define scalex 300.0\n#define scaley 300.0\n\t\t\n#define trx 0.5\n#define try 0.0\n\n#define cstart 240.0\n\n\n\n // ***** noise code \n // Created by inigo quilez - iq/2013\n // License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n \nfloat hash( float n )\n{\n    return fract(sin(n)*43758.5453123);\n}\n\n\nfloat noise(vec2 x )\n{\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n\n    f = f*f*(3.0-2.0*f);\n\n    float n = p.x + p.y*57.0;\n\n    float res = mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\n                    mix( hash(n+ 57.0), hash(n+ 58.0),f.x),f.y);\n\n    return res;\n}\n\n        \n// * ****************************************************************** */\n\n        float fbm(vec2 p) {\n\n          float f = 0.0;\n          f  = 0.5000*noise( p ); p = p*2.0;\n          f += 0.2500*noise( p ); p = p*2.0;\n          f += 0.1250*noise( p ); p = p*2.0;\n          f += 0.0625*noise( p );\n          f /= 0.9375;\n\n          return f;\n        }\n\n        vec2 f(vec2 z,vec2 c) {\n            \n            \n            float x = (z.x * z.x - z.y * z.y) - z.x + c.x;\n            float y = (z.y * z.x + z.x * z.y) - z.y + c.y;\n\n            return vec2(x,y);\n        }\n        \n        float SIC(int p, int N,int M, vec2 z) {\n            // smooth iteration count, see http://jussiharkonen.com/gallery/coloring-techniques/\n            // p is the max degree of the polynom used in our julia set definition\n            // N is iteration when reaching bailout value\n            // M is bailout value\n            \n            float r = length(z);\n            return (float(N)+1.0+( log((log(float(M)))/log(r)) / log(float(p)) ));\n        }\n        \n        vec4 myColor(float index, float dist, float dist2, float dist3) {\n            float seuil1=0.100;\n            float seuil2=0.200;\n            float seuil3=0.900;\n            float blurp=8.0;\n            vec3 color;\n            \n            index*=index;\n            vec3 grey  = vec3(180.0/255.0, 212.0/255.0, 229.0/255.0);\n            vec3 dark  = vec3( 40.0/255.0,  48.0/255.0,  64.0/255.0) ;\n            vec3 yellow= vec3(212.0/255.0, 212.0/255.0, 145.0/255.0);\n            vec3 glgl  = vec3(150.0/255.0, 50.0/255.0,  0.0/255.0);\n            vec3 red  = vec3( 212.0/255.0, 30.0/255.0, 0.0/255.0);\n            \n            //4 levels color shading\n            color  = mix ( grey,   dark,  smoothstep(   0.0, seuil1, index ));\n            color  = mix (color, yellow,  smoothstep(seuil1, seuil2, index ));\n            color  = mix (color,    glgl,  smoothstep(seuil2, seuil3, index ));\n            color  = mix (color,    red, smoothstep(seuil3,    1.0, index ));\n            \n            //point orbit traping\n            color  *= mix ( (.5, .0, .0), (1.0, 1.0, 1.0), smoothstep(.0, blurp, blurp-dist ));\n            color  *= mix ( (.0, .5, .0), (1.0, 1.0, 1.0), smoothstep(.0, blurp, blurp-dist2 ));\n            color  *= mix ( (.0, .0, .5), (1.0, 1.0, 1.0), smoothstep(.0, blurp, blurp-dist3 ));\n            \n            //color /= 2.0;   \n                                                        \n            return vec4(color,1.0);\n        }\n\n        void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\t\t\tfloat time = ( cstart +  iTime)*.01 + 0.5*iMouse.x/iResolution.x;\n            \n            float sx=float(iResolution.x);\n            float sy=float(iResolution.y);\n            vec2 z,zn;\n            vec2 orbitPoint = vec2(1.5,1.2);\n            vec2 orbitPoint2 = vec2(-0.7,1.5);\n            vec2 orbitPoint3 = vec2(1.8,-1.2);\n            float dist=1000000000.0;\n            float dist2=1000000000.0;\n            float dist3=1000000000.0;\n            float idx;\n            // convert gl_fragcoord to mathematical coords\n            \n\t\t\t\n            z.x = (fragCoord.x - sx/2.0)/scalex+trx;\n            z.y = (fragCoord.y - sy/2.0)/scaley+try;\n\n\t\t\t//from iq \"julia\" https://www.shadertoy.com/view/4dfGRn\n\t\t\tvec2 cc = 1.1*vec2( 0.5*cos(0.5 * time) - 0.25*cos(1.0 * time), \n\t                            0.5*sin(0.5 * time) - 0.25*sin(1.0 * time) );\n\t\t\t\n\t\t\t\n            fragColor = vec4(0.0,0.0,0.0,1.0);\n            // loop until found or too long\n            for (int n=0; n<500; n++) {\n                zn=f(z,cc); \n                dist = min( dist, length(zn-orbitPoint));\n                dist2 = min( dist2, length(zn-orbitPoint2)); \n                dist3 = min( dist3, length(zn-orbitPoint3));\n                \n                if ( (zn.x*zn.x+zn.y*zn.y)>64.0 ) {\n                    // outside julia\n                    idx = SIC(2, n, 2, zn) /250.0; // * ( 1.0 +(fbm(z*16.0)/4.0) ); \n                    clamp(idx,.0,1.0);                    \n                    fragColor = myColor( idx, dist, dist2, dist3);                                                     \n                    break;\n                }\n                   \n                if ( distance(z,zn) < 0.005 ) {\n                    //inside julia set\n                    fragColor = myColor( SIC(2, n, 2, zn) /250.0, dist, dist2, dist3);                           \n                    break;\n                }            \n                z=zn;\n            } //for\n          \n             \n        }   // main\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4sS3WG","date":"1392592902","viewed":193,"name":"yet another julia","username":"rmotfage","description":"you can use the mouse to go reverse or forward.\ncoloring with 3 points orbit trapping\n julia set's \"c\" changes with time (idea form iq's julia shadertoy)","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fractal","juliaset"],"hasliked":0,"parentid":"","parentname":""}}