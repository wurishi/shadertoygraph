{"ver":"0.1","info":{"id":"flfyzs","date":"1648504904","viewed":142,"name":"TerrainWithFog","username":"MelisaHot","description":"Grass terrain with fog. \nFrom https://www.shadertoy.com/view/MtsSRf tutorial.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["terrain","grass","fog"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3Rr","filepath":"/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","previewfilepath":"/media/ap/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Help from https://www.shadertoy.com/view/MtsSRf\n\nconst int MAX_MARCHING_STEPS = 255;\nconst float MIN_DIST = 0.0;\nconst float MAX_DIST = 100.0;\nconst float PRECISION = 0.001;\n\nstruct Surface {\n  float sd; // signed distance\n};\n\nfloat cosNoise( in vec2 p )\n{\n    return 0.4*( sin(p.x) + sin(p.y) );\n}\n\nconst mat2 m2 = mat2(1.6,-1.2,\n                     1.2, 1.6);\n\nfloat map( in vec3 pos )\n{\n    float h = 0.0;\n    vec2 q = pos.xz*0.5;\n    \n    float s = 0.5;\n    for( int i=0; i<6; i++ )\n    {\n        h += s*cosNoise( q ); \n        q = m2*q*0.9; \n        q += vec2(2., 5.);\n        s *= 0.45 + 0.2*h;\n    }\n    h *= 2.0;\n    return pos.y - h;\n}\n\n\nSurface rayMarch(vec3 ro, vec3 rd) {\n  float depth = MIN_DIST;\n  Surface co;\n\n  for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n    vec3 p = ro + depth * rd;\n    co.sd = map(p);\n    depth += co.sd;\n    if (co.sd < PRECISION || depth > MAX_DIST) break;\n  }\n  \n  co.sd = depth;\n\n  return co;\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    vec2 e = vec2(1.0,-1.0) * 0.0001;\n    \n    return normalize( e.xyy*map( pos + e.xyy ) + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx ) + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy ) + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx ) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = fragCoord.xy / iResolution.xy;\n    vec2 q = (-iResolution.xy + 2.1* fragCoord.xy) / iResolution.y;\n     \n    // ray\n    vec3 ro = vec3( -2.1, 2.2, -2. );\n    \n    vec3 rd = normalize( vec3(q-vec2(-0.2,0.6),-2.));\n    \n    vec3 col = vec3( 0.6, 0.8, 1.0 );\n\n    Surface co = rayMarch(ro, rd);\n    if( co.sd < MAX_DIST )\n    {\n        vec3 pos = ro + co.sd*rd;\n        vec3 nor = calcNormal( pos );\n      \n        vec3 mate = vec3(0.15,0.27,0.12);\n        mate = mix( mate, vec3(0.1,0.22,0.05), smoothstep( 0.7,0.9,nor.y) );\n        mate *= texture( iChannel0, 0.5*pos.xz ).x+0.4;\n        col = mate;\n        \n        float fog = exp( -0.0015*co.sd*co.sd );\n        col *= fog;\n        col += (1.0-fog)*vec3( 0.6, 0.8, 1.0);\n\n       }\n    \n\tfragColor = vec4( col, 1.0 );\n}\n","name":"Image","description":"","type":"image"}]}