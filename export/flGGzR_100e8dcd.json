{"ver":"0.1","info":{"id":"flGGzR","date":"1637143906","viewed":252,"name":"Reaction Diffusion - 164 chars","username":"benoitM","description":"Fast and dirty Reaction  Diffusion\nInspired by https://www.youtube.com/watch?v=ga1xt5zkmPI \nTrying to use only mipmaps for the convolutions (blur and high pass filter)\nPlenty of artefacts due to mipmaps but it works.\nTried also to make a short code \n","likes":6,"published":3,"flags":32,"usePreview":0,"tags":["2d","diffusion","organic","highpass","reaction","mipmaps"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/////////////////////////////////////////////////////////////////////////\n//                                                                     //\n//     Fast & Simple & Dirty Reaction Diffusion Pattern                //\n//                                                                     //\n//             Copyright Benoit Marini - 11/2021                       //     \n//             License Creative Commons Attribution                    //\n//         NonCommercial-ShareAlike 3.0 Unported License.              //\n//                                                                     //\n/////////////////////////////////////////////////////////////////////////\n//                                                                     //\n// Inspired by https://www.youtube.com/watch?v=ga1xt5zkmPI             //\n// Trying to use only mipmaps for \"Kernel operations\", knowing that    //\n// mipmaps are far from gaussian blur...                               //\n// High pass filter from iq  (shadertoy.com/view/XsX3zj)               //\n// Noise in Buffer B is only here for initial pertubation              //\n//                                                                     //\n//                                                                     //  \n//  ////////  Buffer A  ////////            //////  Buffer B  //////   //\n//  //                        //       \\\\   //                    //   //\n//  // 1) High pass filter B  //   \\\\\\\\\\\\\\  // 1) Blur  A         //   //\n//  // 2) threshold B         //   ///////  // 2) Add small noise //   //\n//  //                        //       //   //                    //   //\n//  ////////////////////////////            ////////////////////////   //\n//                                                                     //\n//                /\\                                   ////            //\n//               //\\\\                                  ////            //\n//              ///\\\\\\                                 ////            //\n//               ////                                  ////            //\n//               //////////////////////////////////////////            //\n//               //////////////////////////////////////////            //\n//                                                     ////            //\n//                                                    \\\\\\///           //\n//                                                     \\\\//            //\n//                                                      \\/             //\n//                                                                     //\n//                                            //////   Image  //////   //\n//                                            //                  //   //\n//                                            // 1) Blur B        //   //\n//                                            // 2) threshold B   //   //\n//                                            //                  //   //\n//                                            //////////////////////   //\n//                                                                     //        \n/////////////////////////////////////////////////////////////////////////  \n\n\n\n////////////////////////////////////////////// \n// high pass filter & threshold of Buffer B //\n////////////////////////////////////////////// \n\nM\n     8.*T(0.)-4.; // -3 chars Thanks Fabrice !\n}\n\n// original code (169 chars)\n// M\n//     step(.5,T(0.));\n// }\n//\n// code after #define from Common applied :\n//\n// void mainImage( out vec4 o, in vec2 i )\n// {\n//     o = step (.5,textureLod(iChannel0,i/iResolution.xy,0.));\n// }\n\n\n\n             \n       ","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//////////////////////////////////////////////\n// high pass filter & threshold of Buffer B //\n//////////////////////////////////////////////\n\nM    \n    step (.0, T(0.)-T(4.5)) ; // -1 char Thanks Fabrice !\n}\n\n// original code (169 chars)\n// M\n//     step (.01, T(0.)-T(4.5)); // WARNING Remplacing 0. by .01  is not thresholded well the fake high-pass filter\n// }\n//\n// code after #define from Common applied :\n//\n// void mainImage( out vec4 o, in vec2 i )\n// {\n//     o = step (.02, textureLod(iChannel0,i/iResolution.xy,0.) - textureLod(iChannel0,i/iResolution.xy,3.5+cos(iTime)) ) ;\n// }","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"///////////////////////////////////////////////\n// blur buffer A + add small perturbation    //\n///////////////////////////////////////////////\n\nM\n     T(3.5) + cos(i.x*i.y)/1e2;\n}\n\n\n// code after #define from Common applied :\n//\n// void mainImage( out vec4 o, in vec2 i )\n// {\n//     o = textureLod( iChannel0, i/iResolution.xy, 3.) + cos(i.x*i.y)/1e2;\n// }","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define M void mainImage( out vec4 o, vec2 i ) { o=\n#define T(l) texture(iChannel0,i/iResolution.xy,l)\n","name":"Common","description":"","type":"common"}]}