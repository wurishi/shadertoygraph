{"ver":"0.1","info":{"id":"sldSR2","date":"1674940671","viewed":77,"name":"Stitching_Patterns","username":"David_Wiebe","description":"It draws dynamically drawn Hitomezashi Stitch Patterns.","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["simple","pattern"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int spacing = 90;\nconst int width = 15;\n\nbool isOnStitch(in int point, in int length, in int offset)\n{\n    bool onStitch = false;\n    if( (point+offset)%(length*2)<=(length+width))\n    {\n        onStitch = true;\n    }\n    return onStitch;\n}\n\nbool isOnSpacing(int z)\n{\n    bool onSpacing = false;\n    if (z-spacing*int(z/spacing) <= width)\n    {\n        onSpacing = true;\n    }\n    return onSpacing;\n}\n\nfloat rand(int x)\n{\n    float y = fract(float(x) * .1031);\n    y *= y + 33.33;\n    y *= 2.0*y;\n    return fract(y);\n}\n\nint offsetValue(int spacing, int x, int b)\n{\n    int a = int(x/spacing);\n    float randPhase = 1000.0*rand(a);\n    float magnitude = cos(randPhase + 0.1*(iTime+float(b)/float(spacing)));\n    int isOffset = int(1.01 + magnitude);\n    return spacing*isOffset;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{     \n    int height = int(iResolution[0]);\n    int width = int(iResolution[1]);\n    \n    int X = int(fragCoord[0]);\n    int Y = int(fragCoord[1]);\n    \n    bool setColour = false;\n    \n    // default\n    int offsetX = offsetValue(spacing, Y, X);\n    int offsetY = offsetValue(spacing, X, Y + 78);\n    \n    //syncronous\n    //int offsetX = spacing*int(1.001 + cos(0.1*(iTime+float(X)/float(spacing))));\n    //int offsetY = spacing*int(1.001 + cos(0.1*(iTime+float(Y)/float(spacing))));\n    \n    if (isOnSpacing(X) && isOnStitch(Y,spacing,offsetY))\n    {\n        setColour = true;\n    }\n   \n    if (isOnSpacing(Y) && isOnStitch(X,spacing,offsetX))\n    {\n        setColour = true;\n    }\n    \n    vec3 col;\n    if (setColour == false)\n    {\n        vec2 uv = fragCoord/iResolution.xy;\n        col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    }\n    else\n    {\n        col = vec3(0);\n    }\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}