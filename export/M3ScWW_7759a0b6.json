{"ver":"0.1","info":{"id":"M3ScWW","date":"1727300723","viewed":20,"name":"snow 2789","username":"Lewy2789","description":"snow","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["snow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define LAYERS 5.\n\nmat2 rot2D(float a){\n    float s = sin(a), c = cos(a);\n    return mat2(c,s,-s,c);\n}\n\nvec2 hash( in vec2 x )\n{ \n    const vec2 k = vec2( 0.3183099, 0.3678794 );\n    x = x*k + k.yx;\n    return -1.0 + 2.0*fract( 16.0 * k*fract( x.x*x.y*(x.x+x.y)) );\n}\n\nvec3 noise( in vec2 p )\n{\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n\n    vec2 u = f*f*f*(f*(f*6.0-15.0)+10.0);\n    vec2 du = 30.0*f*f*(f*(f-2.0)+1.0);\n    \n    vec2 ga = hash( i + vec2(0.0,0.0) );\n    vec2 gb = hash( i + vec2(1.0,0.0) );\n    vec2 gc = hash( i + vec2(0.0,1.0) );\n    vec2 gd = hash( i + vec2(1.0,1.0) );\n    \n    float va = dot( ga, f - vec2(0.0,0.0) );\n    float vb = dot( gb, f - vec2(1.0,0.0) );\n    float vc = dot( gc, f - vec2(0.0,1.0) );\n    float vd = dot( gd, f - vec2(1.0,1.0) );\n\n    return vec3( va + u.x*(vb-va) + u.y*(vc-va) + u.x*u.y*(va-vb-vc+vd), \n                 ga + u.x*(gb-ga) + u.y*(gc-ga) + u.x*u.y*(ga-gb-gc+gd) + \n                 du * (u.yx*(va-vb-vc+vd) + vec2(vb,vc) - va));\n}\n\n\nfloat fbm( in vec2 x, in float H )\n{   \n    int numOctaves = 10;\n    float t = 0.0;\n    for( int i=0; i<numOctaves; i++ )\n    {\n        float f = pow( 2.0, float(i) );\n        float a = pow( f, -H );\n        t += a*noise(f*x).x;\n    }\n    return t;\n}\n\nfloat smin( float a, float b, float k )\n{\n    k *= 1.0;\n    float r = exp2(-a/k) + exp2(-b/k);\n    return -k*log2(r);\n}\n\nfloat rand(vec2 seed){\n    seed = fract(seed*vec2(123.45, 234.56));\n    seed += dot(seed, seed + 345.67);\n    return fract(seed.x * seed.y);\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat sdTriangleIsosceles( in vec2 p, in vec2 q )\n{\n    p.x = abs(p.x);\n    vec2 a = p - q*clamp( dot(p,q)/dot(q,q), 0.0, 1.0 );\n    vec2 b = p - q*vec2( clamp( p.x/q.x, 0.0, 1.0 ), 1.0 );\n    float s = -sign( q.y );\n    vec2 d = min( vec2( dot(a,a), s*(p.x*q.y-p.y*q.x) ),\n                  vec2( dot(b,b), s*(p.y-q.y)  ));\n    return -sqrt(d.x)*sign(d.y);\n}\n\nfloat sdEquilateralTriangle( in vec2 p, in float r )\n{\n    const float k = sqrt(3.0);\n    p.x = abs(p.x) - r;\n    p.y = p.y + r/k;\n    if( p.x+k*p.y>0.0 ) p = vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n    p.x -= clamp( p.x, -2.0*r, 0.0 );\n    return -length(p)*sign(p.y);\n}\n\nfloat sdTree(vec2 p, vec2 s){\n    p /= s;\n    float d = sdBox(p+vec2(0.,.5), vec2(.1,.2));\n    d = min(d, sdEquilateralTriangle(p+vec2(0.,.1), .4));\n    d = min(d, sdEquilateralTriangle(p+vec2(0.,-.2), .3));\n    d = min(d, sdEquilateralTriangle(p+vec2(0.,-.5), .2));\n    return d;\n}\n\nfloat sdBackground(vec2 p){\n    float ground = p.y + .8;\n    ground = min(ground, sdTree(p+vec2(.5, .6), vec2(.3,.3)));\n    ground = min(ground, sdTree(p+vec2(.7, .65), vec2(.3,.25)));\n    ground = min(ground, sdTree(p+vec2(.95, .62), vec2(.275,.275)));\n    ground = min(ground, sdTree(p+vec2(1.2, .67), vec2(.35,.26)));\n    ground = min(ground, sdTree(p+vec2(1.4, .62), vec2(.3,.275)));\n    ground = min(ground, sdTree(p+vec2(1.65, .6), vec2(.35,.3)));\n    \n    float box = sdBox(p+vec2(-.5,.7), vec2(.15,.1));\n    float roof = sdTriangleIsosceles(p+vec2(-.5,.5), vec2(.2, -.1));\n    float ch = sdBox(p+vec2(-.41,.52), vec2(.025, .05));\n    roof = min(roof, ch);\n    float house = min(box, roof);\n    return min(ground, house);\n}\n\nfloat sdWindow(vec2 p){\n    float d = sdBox(p+vec2(-.4,.69), vec2(.01));\n    d = min(d, sdBox(p+vec2(-.4,.73), vec2(.01)));\n    d = min(d, sdBox(p+vec2(-.44,.73), vec2(.01)));\n    d = min(d, sdBox(p+vec2(-.44,.69), vec2(.01)));\n    return d;\n}\n\n\n\nfloat sdStar( in vec2 p, in float r, in int n, in float m)\n{\n    float an = 3.141593/float(n);\n    float en = 3.141593/m;\n    vec2  acs = vec2(cos(an),sin(an));\n    vec2  ecs = vec2(cos(en),sin(en));\n\n    float bn = mod(atan(p.x,p.y),2.0*an) - an;\n    p = length(p)*vec2(cos(bn),abs(sin(bn)));\n    p -= r*acs;\n    p += ecs*clamp( -dot(p,ecs), 0.0, r*acs.y/ecs.y);\n    return length(p)*sign(p.x);\n}\n\nfloat repeated( vec2 p, float s )\n{\n    p *= s;\n    p.y += 5.*iTime;\n    vec2 id = round(p);\n    vec2  o = sign(p-id);\n    \n    float d = 1e20;\n    for( int j=0; j<2; j++ )\n    for( int i=0; i<2; i++ )\n    {\n        vec2 rid = id + vec2(i,j)*o;\n        float n = rand(rid);\n        vec2 nm = vec2(n, fract(n*456.78))-.5;\n       \n        vec2 r = p - rid;\n        r *= rot2D(n*6.28);\n        \n        float size = .2+n*.1;\n        int sides = int(n*6. + 3.);\n        float a = (fract(n*789.12))+3.;\n        \n        d = min(d, sdStar(r+nm, size, sides, a));\n    }\n    return d;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord*2.-iResolution.xy)/iResolution.y;\n    \n    float t = iTime * .1;\n    \n    vec3 bckgcol = mix(vec3(0., 0., .19), vec3(.023, .049, .353), fragCoord.y/iResolution.y) * (fbm(uv, 1.)*.5 + .5);\n    if(sdBackground(uv)<0.) bckgcol = vec3(0.);\n    float window = sdWindow(uv);\n    bckgcol += 1./(window*40.+1.)*vec3(1.,1.,.9);\n\n    vec3 snowcol = vec3(.95,.95,1.);\n    \n    vec3 col = bckgcol;\n    float zbuff = 0.;\n    \n    for(float i = 0.; i < 1. ; i+=1./LAYERS){\n        float depth = fract(i+t);\n        float scale = mix(20., 0., depth);\n        float d = repeated(uv+rand(vec2(i*5.)), scale);\n        if(d < 0. && depth > zbuff){\n            col = mix(bckgcol, snowcol, depth);\n            zbuff = depth;\n            \n        }\n        \n    }\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}