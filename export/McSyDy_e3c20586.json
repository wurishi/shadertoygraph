{"ver":"0.1","info":{"id":"McSyDy","date":"1722908631","viewed":21,"name":"Gradient Flow : Multi Color List","username":"shoegz","description":"gradient","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["gradient"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/**\n * Color list 동적으로 구성해본 테스트 \n *\n */\nfloat PI = 3.14159265;\n\nfloat tri(float t) {\n    float ct = t + 0.5 * PI;\n    return sin(ct) - sin(3.0 * ct) / 9.0;\n}\n\n// triangle(N=2)\nfloat f1(float x) {\n    return (tri(PI*x)*0.9+1.0)/2.0;\n}\n\n//cosine\nfloat f2(float x) {\n    return (cos(PI * x) + 1.0) / 2.0;\n}\n\n//cosine ^0.7\nfloat f3(float x) {\n    return pow((cos(PI * x) + 1.0) / 2.0, 0.7);\n}\n\nfloat lc(float t, float a) {\n    float mt = mod(t - a,4.0);\n    if(1.0 < mt && mt < 3.0) return 0.0;\n    \n    //switch here!\n    else return f3(mt);\n}\n\n/**\n * main 문\n */\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    // y값에 따라 변하도록, y값으로 변경\n    float t = uv.y * 2.0 + iTime;\n    float startT = lc(t, 0.0);\n    float midT1 = lc(t, 1.0);\n    float midT2 = lc(t, 2.0);\n    float midT3 = lc(t, 3.0);\n    float endT = lc(t, 4.0);\n  \n \n    // color list를 명시적으로 지정가능\n    // uniform 을 animator로 변경하면 동적으로 변경도 가능\n    vec3 start = vec3(1, 0, 0);\n    vec3 mid1 = vec3(0, 1, 1);\n    vec3 mid2 = vec3(0.5, 0.3, 1);\n    vec3 mid3 = vec3(1, 1, 0.4);\n    vec3 end = vec3(0, 0, 1);\n\n    // Time varying pixel color\n    vec3 col = start * startT + mid1 * midT1 + mid2 * midT2 + mid3 * midT3 + end * endT;\n   \n    // set pixel color : r, g, b, a\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}