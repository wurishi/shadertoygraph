{"ver":"0.1","info":{"id":"csjXWc","date":"1671017602","viewed":113,"name":"Star pattern","username":"yrqian99","description":"star","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["pattern"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.141592653589\n#define C 0.707107\n\nfloat circle(in vec2 _st, in float _radius){\n    \n    //vec2 l = _st-vec2(0.5);\n    //return 1.-smoothstep(_radius-(_radius*0.02),\n                         //_radius+(_radius*0.01),\n                         //dot(l,l)*2.0);\n    //return 0.15 / (distance(vec2(_st.x, (_st.y - 0.5) * 1.0 + 0.5), vec2(0.5)));\n    //return (atan(_st.x - 0.5, _st.y - 0.5) / (PI * 2.0)) + 0.5;\n    \n    // sin(((atan(_st.x - 0.5, _st.y - 0.5) / (PI * 6.0)) + iTime / PI ) * 100.0) ;\n    \n    //return mod(((atan(_st.x - 0.5, _st.y - 0.5) / (PI * 3.0)) + iTime / PI) * 20.0, 1.0);\n    \n    vec2 dubUVX = vec2(_st.x * 0.2 + 0.4, _st.y * 0.5 + 0.25);\n    float shadeX = 0.05 / distance(dubUVX, vec2(0.5));\n    vec2 dubUVY = vec2(_st.y * 0.2 + 0.4, _st.x * 0.5 + 0.25);\n    float shadeY = 0.05 / distance(dubUVY, vec2(0.5));\n    return shadeX * shadeY * 10.0 ;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x = 2.0 * uv.x - 1.0; // map from [0,1] to [-1,+1]\n    uv.x = uv.x * (iResolution.x / iResolution.y); // center x\n    uv.x = 0.5 * (1.0 + uv.x); // map back from [-1,+1] to [0,1]\n    uv.y += iTime / 4.;\n    \n    vec3 color = vec3(0.0);\n    \n    uv *= 5.0;      // Scale up the space by 5\n    uv = fract(uv); // Wrap around 1.0\n    \n    // Now we have 9 spaces that go from 0-1\n    //color = vec3(uv,0.0);\n    color = vec3(circle(uv,0.5));\n    \n    \n    //uv += iTime / 5.;\n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n     //circular\n    //float shade = length(uv - 0.5);\n    //float shade = distance(uv, vec2(0.2, 0.8));\n    //float shade = 1.0 - distance(uv, vec2(0.2, 0.8));\n    \n    //angles 2\n    //float shade = mod(((atan(uv.x - 0.5, uv.y - 0.5) / (PI * 2.0)) + 0.5) * 20.0, 1.0);\n\n    //splash\n    //vec2 wavedUV = vec2(uv.x + sin(uv.y * 30.0) * 0.1, uv.y + sin(uv.x * 30.0) * 0.1);\n    //vec2 wavedUV = vec2(uv.x + sin(uv.y * 100.0) * 0.1, uv.y + sin(uv.x * 100.0) * 0.1);\n    //float shade = 1.0 - step(0.02, abs(distance(wavedUV, vec2(0.5)) - 0.25));\n\n    //repeat X and Y ver3\n    //float shade = min(abs(uv.x - 0.5), abs(uv.y - 0.5));\n    //float shade = max(abs(uv.x - 0.5), abs(uv.y - 0.5));\n\n    vec3 blackCol = vec3(1.0);\n    vec3 uvColor = vec3(uv, 0.2);\n    \n    vec3 colorA = vec3(0.149,0.141,0.912);\n    vec3 colorB = vec3(1.000,0.833,0.224);\n\n    vec3 mixedColor = mix(colorB, colorA, color);\n\n    // Output to screen\n    //fragColor = vec4(shade,1.0);\n    \n    fragColor = vec4(vec3(mixedColor),1.0);\n}","name":"Image","description":"","type":"image"}]}