{"ver":"0.1","info":{"id":"dlXGD2","date":"1672440547","viewed":151,"name":"basic irregular blocks layout","username":"jt","description":"Using [url=https://www.shadertoy.com/view/ftcfWf]Asymmetric Blocks SDF[/url] ids to distribute different shapes in an irregular block layout efficiently,\naccelerated by [url=https://www.shadertoy.com/view/NstSR8]Cast Voxels March Sub-Objects[/url].","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["voxels","blocks","layout","irregular","asymmetric"],"hasliked":0,"parentid":"DsBXWz","parentname":"irregular sub-voxel block layout"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/dlXGD2 basic irregular blocks layout by jt\n// based on https://www.shadertoy.com/view/DsBXWz irregular sub-voxel block layout\n// (based on https://www.shadertoy.com/view/ftcfWf Asymmetric Blocks SDF)\n// accelerated using https://www.shadertoy.com/view/NstSR8 Cast Voxels March Sub-Objects\n// (voxel-marching originally based on https://www.shadertoy.com/view/4dX3zl Branchless Voxel Raycasting by fb39ca4\n//  with loop optimization by kzy, DDA based on http://lodev.org/cgtutor/raycasting.html\n//  with raymarching subobjects addon by jt).\n\n// tags: voxels, blocks, asymmetric, irregular, layout\n\n// Using https://www.shadertoy.com/view/ftcfWf Asymmetric Blocks SDF\n// ids to distribute different shapes in an irregular block layout efficiently,\n// accelerated by https://www.shadertoy.com/view/NstSR8 Cast Voxels March Sub-Objects\n\n// The MIT License\n// Copyright (c) 2022 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n#define pi 3.1415926\n\n#define RES 8\n\n// https://www.shadertoy.com/view/WttXWX \"Best\" Integer Hash by FabriceNeyret2,\n// implementing Chris Wellons https://nullprogram.com/blog/2018/07/31/\nuint triple32(uint x)\n{\n    x ^= x >> 17;\n    x *= 0xed5ad4bbU;\n    x ^= x >> 11;\n    x *= 0xac4c1b51U;\n    x ^= x >> 15;\n    x *= 0x31848babU;\n    x ^= x >> 14;\n    return x;\n}\n\n// TODO: implement uvec2 uhash2(uvec2)\n\nuint uhash(uvec2 v)\n{\n    return triple32(v.x + triple32(v.y));\n}\n\nfloat hash(uint x)\n{\n    return float(triple32(x)) / float(0xffffffffU);\n}\n\nfloat hash(uvec2 v)\n{\n    //return hash(v.x + triple32(v.y));\n    return mix(0.2, 0.8, hash(v.x + triple32(v.y)));\n}\n\nfloat hash(ivec2 v)\n{\n    return hash(uvec2(v));\n}\n\n// Inspired by https://www.shadertoy.com/view/Ws3GRs Asymmetric Blocks by Shane.\n// Checkerboard tiling of alternating (horizontal vs. vertical) (double-T-) crossings.\n// Implementation my own (jt) since I prefer writing code to reading code ;-)\nivec2 blocks_layout(vec2 p) // returns block id\n{\n    ivec2 tile = ivec2(floor(p)); // global coordinates of tile\n    vec2 local = fract(p); // local coordinates inside tile\n    //vec2 local = p - vec2(tile); // local coordinates inside tile\n    //bool flip = (tile.x % 2) == (tile.y % 2); // XXX breaks on windows XXX\n    bool flip = (tile.x & 1) == (tile.y & 1);\n    return \n        flip\n        ? // vertical line goes through\n        (\n            (local.x < hash(0+2*(tile+ivec2( 0, 0)))) // x-coordinate of vertical line through this tile\n            ?\n            (\n                (local.y < hash(1+2*(tile+ivec2(-1, 0)))) // y-coordinate of horizontal line through west tile\n                ?\n                ivec2(tile.x, tile.y) // south-west\n                :\n                ivec2(tile.x, tile.y + 1) // north-west\n            )\n            :\n            (\n                (local.y < hash(1+2*(tile+ivec2(+1, 0)))) // y-coordinate of horizontal line through east tile\n                ?\n                ivec2(tile.x + 1, tile.y) // south-east\n                :\n                ivec2(tile.x + 1, tile.y + 1) // north-east\n            )\n        )\n        : // horizontal line goes through\n        (\n            (local.y < hash(1+2*tile+ivec2( 0, 0))) // x-coordinate of horizontal line through this tile\n            ?\n            (\n                (local.x < hash(0+2*(tile+ivec2( 0,-1)))) // x-coordinate of vertical line through south tile\n                ?\n                ivec2(tile.x, tile.y) // south-west              \n                :\n                ivec2(tile.x + 1, tile.y) // south-east\n            )\n            :\n            (\n                (local.x < hash(0+2*(tile+ivec2( 0,+1)))) // x-coordinate of vertical line through north tile\n                ?\n                ivec2(tile.x, tile.y + 1) // north-west\n                :\n                ivec2(tile.x + 1, tile.y + 1) // north-east\n            )\n        );\n}\n\nfloat box( vec3 p, vec3 b ) // https://iquilezles.org/articles/distfunctions/\n{\n    vec3 q = abs(p) - b;\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat box2(vec3 p, vec3 p0, vec3 p1, float r) // min-max box\n{\n    return box(p-(p1+p0)/2.0, (p1-p0)/2.0-r)-r;\n}\n\nfloat sphere( vec3 p, float s ) // https://iquilezles.org/articles/distfunctions/\n{\n    return length(p)-s;\n}\n\nfloat cylinder( vec3 p, float h, float r ) // https://iquilezles.org/articles/distfunctions/\n{\n    vec2 d = abs(vec2(length(p.xy),p.z)) - vec2(r,h);\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat cone(vec3 p, float r, float h) // modified https://iquilezles.org/articles/distfunctions/\n{\n    p.z -= h;\n    vec2 q = vec2(r,-2.0*h);\n    \n    vec2 w = vec2( length(p.xy), p.z );\n    vec2 a = w - q*clamp( dot(w,q)/dot(q,q), 0.0, 1.0 );\n    vec2 b = w - q*vec2( clamp( w.x/q.x, 0.0, 1.0 ), 1.0 );\n    float k = sign( q.y );\n    float d = min(dot( a, a ),dot(b, b));\n    float s = max( k*(w.x*q.y-w.y*q.x),k*(w.y-q.y)  );\n\n    return sqrt(d)*sign(s);\n}\n\nuint code(ivec2 id)\n{\n    return ((uint(id.x) & 1u) << 0u) | ((uint(id.y) & 1u) << 1u);\n}\n\nfloat map(ivec3 tile, vec3 local)\n{\n    //if(any(equal(tile.xy & ivec2(3), ivec2(0)))) return box(local - 0.5, vec3(0.25));\n    //return sphere(local - 0.5, 0.5);\n\n    ivec2 id = blocks_layout(vec2(tile)/float(RES));\n    switch(code(id))\n    {\n        case 0u: return box(local - 0.5, vec3(0.25));\n        case 1u: return sphere(local - 0.5, 0.5);\n        case 2u: return cone(local - 0.5, 0.5, 0.5);\n        case 3u: return cylinder(local - 0.5, 0.5, 0.25);\n    }\n}\n\nvec3 material(ivec3 tile, vec3 local)\n{\n    ivec2 id = blocks_layout(vec2(tile)/float(RES));\n    return\n        vec3[]\n        (\n            vec3(0.1,0.1,1.0),\n            vec3(1.0,0.1,0.1),\n            vec3(0.1,1.0,0.1),\n            vec3(1.0,1.0,0.1)\n        )\n        [code(id) & 3u];\n}\n\nmat3 yaw_pitch_roll(float yaw, float pitch, float roll)\n{\n    mat3 R = mat3(vec3(cos(yaw), sin(yaw), 0.0), vec3(-sin(yaw), cos(yaw), 0.0), vec3(0.0, 0.0, 1.0));\n    mat3 S = mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, cos(pitch), sin(pitch)), vec3(0.0, -sin(pitch), cos(pitch)));\n    mat3 T = mat3(vec3(cos(roll), 0.0, sin(roll)), vec3(0.0, 1.0, 0.0), vec3(-sin(roll), 0.0, cos(roll)));\n\n    return R * S * T;\n}\n\n// https://iquilezles.org/articles/intersectors\nvec2 boxIntersection( in vec3 ro, in vec3 rd, vec3 boxSize )\n{\n    vec3 m = 1.0/rd;\n    vec3 n = m*ro;\n    vec3 k = abs(m)*boxSize;\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n    float tN = max( max( t1.x, t1.y ), t1.z );\n    float tF = min( min( t2.x, t2.y ), t2.z );\n    if( tN>tF || tF<0.0) return vec2(-1.0);\n    return vec2( tN, tF );\n}\n\nfloat checker(vec3 p)\n{\n    return step(0.0, sin(pi * p.x + pi/2.0)*sin(pi *p.y + pi/2.0)*sin(pi *p.z + pi/2.0));\n}\n\n#define MAX_ITER 200u\n#define MAX_DIST 1000.0\n#define EPSILON 0.001\n\n// raymarch subobject\nfloat march(ivec3 tile, vec3 ro, vec3 rd, float tmin, float tmax)\n{\n    uint i;\n    float t;\n    for(t = tmin, i = 0u; t < tmax && i < MAX_ITER; i++)\n    {\n        float h = map(tile, ro + rd * t);\n        if(h < EPSILON)\n            return t;\n        t += h;\n    }\n    return MAX_DIST;\n}\n\n// based on https://iquilezles.org/articles/normalsSDF tetrahedron normals\nvec3 normal(ivec3 tile, vec3 local)\n{\n    const float h = EPSILON;\n    const vec2 k = vec2(1,-1);\n    return normalize(k.xyy * map(tile, local + k.xyy * h) +\n                     k.yyx * map(tile, local + k.yyx * h) +\n                     k.yxy * map(tile, local + k.yxy * h) +\n                     k.xxx * map(tile, local + k.xxx * h));\n}\n\nvec4 process_subobject(ivec3 tile, vec3 ro, vec3 rd, float tmin, float tmax)\n{\n    float d = march(tile, ro, rd, tmin, tmax);\n    vec3 n = normal(tile, ro + rd * d);\n    return vec4(n, d);\n}\n\n// \"The raycasting code is somewhat based around a 2D raycasting toutorial found here:\n//  http://lodev.org/cgtutor/raycasting.html\" (fb39ca4)\n\n#define MAX_RAY_STEPS 128\n\nvoid mainImage(out vec4 fragColor, in vec2 I)\n{\n    bool demo = all(lessThan(iMouse.xy, vec2(10.0)));\n    vec2 R = iResolution.xy;\n    //I = 2.0 * I.xy / R - 1.0;\n    //I.x *= R.x / R.y;\n    I = (2.0 * I - R) / R.y;\n    vec3 ray_dir = normalize(vec3(I.x, 2.0, I.y)); // must be normalized!\n    vec3 ray_pos = vec3(0.0,-14.0, 0.0);\n\n    float yaw = -2.0 * pi * float(iMouse.x) / float(iResolution.x);\n    float pitch = -pi / 2.0 + pi * float(iMouse.y) / float(iResolution.y);\n    yaw = !demo ? yaw : 2.0 * pi * fract(iTime * 0.01);\n    pitch = !demo ? pitch : -pi / 6.0;\n\n    mat3 M = yaw_pitch_roll(yaw, pitch, 0.0);\n    ray_pos = M * ray_pos;\n    ray_dir = M * ray_dir;\n\n    vec3 color = vec3(0.0);\n    vec4 result = vec4(vec3(0.0), MAX_DIST);\n\n    {\n        vec3 delta_dist = 1.0 / abs(ray_dir);\n        ivec3 ray_step = ivec3(sign(ray_dir));\n        ivec3 map_pos = ivec3(floor(ray_pos + 0.0));\n        vec3 side_dist = (sign(ray_dir) * (vec3(map_pos) - ray_pos) + (sign(ray_dir) * 0.5) + 0.5) * delta_dist;\n\n        for (int i = 0; i < MAX_RAY_STEPS; i++)\n        //for (int i = min(iFrame,0); i < MAX_RAY_STEPS; i++) // prevent unrolling loop to prevent crash\n        {\n            if(map_pos.z == 0)\n            {\n                // Near bounding-box side can be reconstructed from dda, howvever we need far bounding-box side, too.\n                // float d = length(vec3(mask) * (sideDist - deltaDist)) / length(rayDir);\n                // It appears to be easier to just do the box-intersection here (potential for optimization).\n                vec2 bounds = boxIntersection(ray_pos - vec3(map_pos) - vec3(0.5), ray_dir, vec3(0.5) ); // bounding box\n                if(min(abs(map_pos.x), min(abs(map_pos.y),abs(map_pos.z))) > 5) // explicit sky-box (letting loop run-out without hitting a wall causes blocky artifacts)\n                    break;\n                //result = process_subobject(map_pos, ray_pos - vec3(map_pos) - vec3(0.5), ray_dir, bounds.x, bounds.y);\n                result = process_subobject(map_pos, ray_pos - vec3(map_pos), ray_dir, bounds.x, bounds.y);\n                if(result.w > 0.0 && result.w < bounds.y)\n                {\n                    color = vec3(1.0);\n                    //color *= 0.5 + 0.5 * normalize(result.xyz);\n                    vec3 dst = ray_pos + ray_dir * result.w;\n                    color *= vec3(0.5 + 0.5 * checker(dst));\n                    color *= material(ivec3(floor(dst)), fract(dst));\n                    //color *= vec3(step(vec2(0.5), material(ivec3(floor(dst)), fract(dst))), 0.0);\n\n                    //vec3 fogcolor = vec3(0.25, 0.4, 0.5); // fog\n                    //vec3 fogcolor = vec3(0.75, 0.6, 0.3); // smog\n                    //color *= mix(fogcolor, color, exp(-result.w * result.w / 200.0)); // fog for depth impression & to suppress flickering\n\n                    break;\n                }\n            }\n\n            // Core of https://www.shadertoy.com/view/4dX3zl Branchless Voxel Raycasting\n            bvec3 mask = lessThanEqual(side_dist.xyz, min(side_dist.yzx, side_dist.zxy));\n            side_dist += vec3(mask) * delta_dist;\n            map_pos += ivec3(vec3(mask)) * ray_step;\n        }\n    }\n\n    vec3 ambient = vec3(0.1);\n    vec3 lightdir = normalize(vec3(3.0, 2.0, 1.0));\n    color *= mix(ambient, vec3(1.0), clamp(dot(lightdir, result.xyz), 0.0, 1.0));\n\n    fragColor = vec4(sqrt(color), 1.0);\n}\n","name":"Image","description":"","type":"image"}]}