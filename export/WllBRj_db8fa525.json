{"ver":"0.1","info":{"id":"WllBRj","date":"1597177816","viewed":57,"name":"ufo in a room","username":"jorge2017a1","description":"ufo in a room","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["ufoinaroom"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//por jorge2017a1-\n\n\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n\n\n\nvec3 light_pos1   ;\nvec3 light_color1 ;\nvec3 light_pos2   ;\nvec3 light_color2 ;\n\n#define  mangulo 45.0\n    \n\n//Box function\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return length(max(d,0.0))\n         + min(max(d.x,max(d.y,d.z)),0.0); // remove this line for an only partially signed sdf \n}\n\n\n\n\nfloat sdCylinder( vec3 p, vec2 h )\n{\n    vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;\n}\n\nfloat sdCylinderYZ( vec3 p, vec2 h )\n{\n    vec2 d = abs(vec2(length(p.yz),p.x)) - h;\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n\nfloat sdCylinderXZ( vec3 p, vec2 h )\n{\n    vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n\nfloat sdCylinderXY( vec3 p, vec2 h )\n{\n    vec2 d = abs(vec2(length(p.xy),p.z)) - h;\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n\n///---------------------------------------\nfloat intersectSDF(float distA, float distB) {\n    return max(distA, distB);\n}\n\nfloat unionSDF(float distA, float distB) \n{\n    return min(distA, distB);\n}\n\nfloat differenceSDF(float distA, float distB) \n{\n    return max(distA, -distB);\n}\n\n\nvec2 opU(vec2 d1, vec2 d2 ) {\n  vec2 resp;\n    if (d1.x < d2.x){ \n        resp = d1;\n    }\n    else\n    {\n        resp = d2;\n    }\n     \n   return resp; \n}\n///------------------------------------\n\n\nvec3 rotate_y(vec3 v, float angle)\n{\n\tfloat ca = cos(angle); float sa = sin(angle);\n\treturn v*mat3(\n\t\tca, 0.0, -sa,\n\t\t0.0, 1.0, 0.0,\n\t\tsa, 0.0, ca);\n}\n\nvec3 rotate_x(vec3 v, float angle)\n{\n\tfloat ca = cos(angle); float sa = sin(angle);\n\treturn v*mat3(\n\t\t1.0, 0.0, 0.0,\n\t\t0.0, ca, -sa,\n\t\t0.0, sa, ca);\n}\n\n\nvec3 rotate_z(vec3 v, float angle)\n{\n\tfloat ca = cos(angle); \n    float sa = sin(angle);\n\treturn v*mat3(\n\t\tca, -sa, 0.0,\n\t\tsa, ca, 0.0,\n\t\t0.0, 0.0, 1.0);\n}\n\n///-----------------------------------------\n\n\nvec3 LightShading(vec3 Normal,vec3 toLight,vec3 toEye,vec3 color)\n{\n    vec3 toReflectedLight=reflect(-toLight, Normal);\n    vec3 diffuse = max(0.,dot(Normal,-toLight))*color;\n    //vec3 specular = pow(max(0.,dot(Normal,normalize(-toLight-V))),100.)*vec3(1.,1.,1.); \n    float specularf=max(dot(toReflectedLight, toEye),0.0);\n    specularf=pow(specularf, 100.0);\n    vec3 specular =specularf*vec3(1.0);\n    \n    return diffuse + specular;\n}\n\n\n\n///-----------------------------------\nvec2 rotate(vec2 v, float a) {\n   return vec2(cos(a)*v.x + sin(a)*v.y, -sin(a)*v.x + cos(a)*v.y);\n}\n//----------------------------------------------------\n\nmat2 rotate(float a) \n{\n\tfloat c = cos(a);\n\tfloat s = sin(a);\n\treturn mat2(c, s, -s, c);\n}\n\n\n\nfloat Columnatemplev2(vec3 p)\n{\n\n    vec3 res = vec3(1.0,-1., -1.);\n\tvec3 q = p; \n    \n    float rad = 1.9; // base\n    rad -= 0.05 * q.y; // thiner at top\n  \t\n    \n    \n    float verticalCurves = pow((0.5 + 0.5* sin(10.0 * atan(q.x,q.z))), 2.0 /*Power*/);\n\n    float horizontalCurves =pow((0.5 + 0.5 * sin(q.y * 2.0)), .12) - 0.15;\n    \n    // Add vertical & horizoton curving\n    rad -= 0.1 * verticalCurves;\n\trad += 0.15 * horizontalCurves;\n        \n  \n  \n    float d = length(q.xz) - rad;  \n    d = min(d, sdRoundBox(q, vec3(2.5, 0.5, 2.5),0.0));\n    d = max(d, p.y - 20.0);\n    d = max(d, -p.y - .5);\n    \n    d *= 0.5;\n    res = vec3(d, 1.0, res.z);\n    \n    return res.x; // the distance;\n    \n}\n\n\n///------------------------\nfloat GetDist(vec3 p  ) \n{\t\n\n    float d, dif1, dif2;\n    vec2 res;\n    vec3 pp,p1, p2,p3; \n    res = vec2(9999, 0);\n    \n\n    float planeDist1 = p.y+10.0;  //piso inf\n    float planeDist2 = 50.0-p.y;  //piso sup\n    float planeDist3 = p.x+30.0; //pared izq\n    float planeDist4 = 30.0-p.x;  //pared der\n    float planeDist5 = -p.z+40.0;  //pared atras\n    float planeDist6 = p.z+40.0;  //pared atras\n       \n    res =opU(res, vec2(planeDist1,29)); //inf\n    res =opU(res, vec2(planeDist2,27)); \n    res =opU(res, vec2(planeDist3,27)); \n    res =opU(res, vec2(planeDist4,27)); \n  \tres =opU(res, vec2(planeDist5,27)); \n    res =opU(res, vec2(planeDist6,27)); \n  \n    \n    \n    \n    float sdcol1=Columnatemplev2(p-vec3(-10.0,-5.0,-10.0));\n    float sdcol2=Columnatemplev2(p-vec3(10.0,-5.0,-10.0));\n    float sdcol3=Columnatemplev2(p-vec3(-10.0,-5.0,10.0));\n    float sdcol4=Columnatemplev2(p-vec3(10.0,-5.0,10.0));\n    \n    float sdb1= sdBox( p- vec3(0.0,-6.0,0.0), vec3(13.0,0.5,13.0) );\n    float sdb2= sdBox( p- vec3(0.0,4.5,0.0), vec3(13.0,0.5,13.0) );\n    \n    \n    \n    res =opU(res, vec2(sdcol1,25.0)); \n    res =opU(res, vec2(sdcol2,25.0)); \n    res =opU(res, vec2(sdcol3,25.0)); \n    res =opU(res, vec2(sdcol4,25.0)); \n    \n    float sdb3= sdBox( p- vec3(0.0,-1.0,0.0), vec3(13.0,5.0,13.0) );\n    res =opU(res, vec2(sdb1,30.0)); \n\n    float sdcy1= sdCylinderXZ(p-vec3(0.0,30.0,0.0), vec2(10.0,0.5) );\n    float sdcy2= sdCylinderXZ(p-vec3(0.0,30.0,0.0), vec2(7.0,3.0) );\n    \n    float usd= unionSDF(sdcy1, sdcy2);\n    \n    float t1=mod(iTime, 1.0);\n    float t2=mod(iTime, 2.0);\n    if (t1<t2)\n    res =opU(res, vec2(usd,25.0)); \n    else\n    res =opU(res, vec2(usd,28.0)); \n        \n    \n    res =opU(res, vec2(1.0,0.0)); \n    \n    \n    d = res.x;\n    mObj.dist = res.x;\n    mObj.idcolor = res.y;\n    \n    return d;\n}\n\n\n\n//---------actualizacion por Shane---28-may-2020    ...gracias\nfloat RayMarch(vec3 ro, vec3 rd) \n{\n\t\n    // The extra distance might force a near-plane hit, so\n    // it's set back to zero.\n    float dO = 0.; \n    //Determines size of shadow\n    for(int i=0; i<MAX_STEPS; i++) \n    {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        \n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n        dO += dS;\n        \n    }\n    \n    return dO;\n}\n\n\n\n\n//---------------------------------------------------\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    //Texture of white and black in image\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\n\n\n\n\nfloat GetLightPar(vec3 p, vec3 plig) {\n    vec3 lightPos = plig;\n    //Determine movement of light ex. shadow and light direction and diffusion\n   \n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l), 0., 1.);\n    float d = RayMarch(p+n*SURF_DIST*2., l );\n    if(d<length(lightPos-p)) dif *= .1;\n    \n    return dif;\n}\n\n\nfloat saturate(float f)\n{\n\treturn clamp(f,0.0,1.0);\n}\n\n\n//----------------------------------------------------\n\n//Creado por dr2 en 2020-07-28\n//https://www.shadertoy.com/view/3lfBz8\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\n\n//Creado por dr2 en 2020-07-28\n//https://www.shadertoy.com/view/3lfBz8\nvec3 getMouse(vec3 ro)\n{    \n     vec4 mPtr = iMouse;\n  mPtr.xy = mPtr.xy / iResolution.xy - 0.5;\n  float tCur = iTime;\n    \n  float az = 0.;\n  float el = -0.15 * PI;\n\n    az += 2. * PI * mPtr.x;\n    el += PI * mPtr.y;\n \n    \n    \n  mat3 vuMat = StdVuMat (el, az);\n\treturn ro*vuMat;\n}\n\n\n//-------------------------------\nvec3 getColorTex( vec3 p, vec3 nor,  int i)\n{\n    \n\tif (i==100 ) { return tex3D(iChannel0, p/32., nor); }\n\tif (i==101 ) { return tex3D(iChannel1, p/32., nor); }\n\tif (i==102 ) { return tex3D(iChannel2, p/32., nor); }\n\tif (i==103 ) { return tex3D(iChannel3, p/32., nor); }\n   \n    \n}\n\n\nvec3 Getluz(vec3 p, vec3 ro, vec3 nor , vec3 colobj ,vec3 plight_pos)\n{   \n     \n    vec3 lightPos = plight_pos;\n    float intensity=1.0;\n\tconst float shininess = 100.0;\n\tvec3 l = normalize( p-lightPos);\n    vec3 v = normalize( p-ro);\n    vec3 h = normalize(v + l);\n    float diff = dot(nor, l);\n    float spec = max(0.0, pow(dot(nor, h), shininess)) * float(diff > 0.0);\n\tvec3 result = LightShading(nor,l,v, colobj)*intensity;\n    return result;\n}\n    \n\n\n\n///-------------------------------------\n//------------------------------------------------\n\nvec3 GetColorYsurface(inout vec3 p, inout vec3 n, inout vec3 rd, int opmat)\n{\n   \tvec3 colobj;\n    \n    \n    if (opmat<100)\n\t\t{ colobj=getColor(int( opmat)); }\n    \n    \n    if ( float( opmat)>=100.0  && float( opmat)<=199.0 ) \n \t{  vec3 coltex=getColorTex(p, n, int( opmat));\n        colobj=coltex;\n\t}\n\n    \n    return colobj;\n}\n\n\n///---------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\t\n    \n    float t;\n    t=iTime*5.0;\n    itime=t;\n    \n \n light_pos1   = vec3(0.0, 20.0, 10.0 ); \n light_color1 = vec3( 1.0 );\n\n light_pos2   = vec3( 10.0, 0.0, 0.0 );\n light_color2 = vec3( 1.0, 1.0, 1.0 );\n \n    \n    vec3 ro=vec3(0.0,0.0,-5.0);\n    //ro= getMouse(ro);\n        \n    vec3 rd=normalize(vec3(uv,1.0));\n    \n    rd=rotate_x(rd, 6.0+1.5*cos(iTime*0.5));\n    \n   \n  \n    //light_pos1+=ro;\n    //light_pos2+=ro;\n    \n    \n    vec3 col = vec3(0);\n    \n    TObj Obj;\n    \n    mObj.uv=uv;\n    mObj.rd=rd;\n    mObj.ro=ro;\n\n\t \n    \n    float d = RayMarch(ro, rd);\n    Obj=mObj;\n    \n  \n    vec3 p = (ro + rd * d ); \n    \n    mObj.p=p;\n    mObj.dist =d;\n    vec3 nor= GetNormal( p);\n    mObj.normal=nor;\n  \n    vec3 colobj;\n    colobj=GetColorYsurface( p, nor, rd,  int( Obj.idcolor));\n    \n\n  float dif1=1.0;\n   vec3 col2,col3;\n    \n    vec3 result;\n    result=  Getluz( p,ro, nor, colobj ,light_pos1);\n    result+= Getluz( p,ro, nor, colobj ,light_pos2);\n    result/=1.25;\n    col3=result;\n    \n    \n     \n  \n    col= col3*dif1;\n    \n  \t\n    //sugerencia por dean_the_coder,\n    //col *= 1.0 - pow(d / 100.0, 1.5);\n    col *= 1.0 - pow(d / 100.0, 3.5);\n    \n    \n    col = pow(col, vec3(1.0/2.2));  \n    \n    fragColor = vec4(col,1.0);\n\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"///------------------------------------\nstruct TObj\n{\n    float idcolor;\n    float dist;\n    vec3 normal;\n    vec3 ro;\n    vec3 rd;\n    vec2 uv;\n    vec3 color;\n    vec3 p;\n    vec3 rf;\n   \n};\n\n\nTObj mObj;\nvec3 glpRoRd;\nvec2 gres2;\nfloat itime;\n\n\n\n#define PI 3.14159265358979323846264\n#define PI2 6.28318530717\n#define TriplePI (3.0 * PI)\n#define DoublePI (2.0 * PI)\n#define HalfPI (PI / 2.0)\n\n\n\nvec3 hsv(vec3 c)\n{\n    vec4 k=vec4(1.,2./3.,1./3.,3.);\n    vec3 p=abs(fract(c.xxx+k.xyz)*6.-k.www);\n    return c.z*mix(k.xxx,clamp(p-k.xxx,0.,1.),c.y);\n}\n\n\n\n///Gracias por la Ayuda de SHane...16-jun-2020\n// Creditos a Shane por su funcion tex3D\n// Tri-Planar blending function. Based on an old Nvidia writeup:\n// GPU Gems 3 - Ryan Geiss: http://http.developer.nvidia.com/GPUGems3/gpugems3_ch01.html\nvec3 tex3D( sampler2D tex, in vec3 p, in vec3 n ){    \n    \n    // Ryan Geiss effectively multiplies the first line by 7. It took me a while to realize that \n    // it's largely redundant, due to the division process that follows. I'd never noticed on \n    // account of the fact that I'm not in the habit of questioning stuff written by Ryan Geiss. \n    n = max(n*n - .2, .001); // max(abs(n), 0.001), etc.\n    n /= dot(n, vec3(1)); \n    //n /= length(n); \n    \n    // Texure samples. One for each plane.\n    vec3 tx = texture(tex, p.yz).xyz;\n    vec3 ty = texture(tex, p.zx).xyz;\n    vec3 tz = texture(tex, p.xy).xyz;\n    \n    // Multiply each texture plane by its normal dominance factor.... or however you wish\n    // to describe it. For instance, if the normal faces up or down, the \"ty\" texture sample,\n    // represnting the XZ plane, will be used, which makes sense.\n    \n    // Textures are stored in sRGB (I think), so you have to convert them to linear space \n    // (squaring is a rough approximation) prior to working with them... or something like that. \n    // Once the final color value is gamma corrected, you should see correct looking colors.\n    return mat3(tx*tx, ty*ty, tz*tz)*n; // Equivalent to: tx*tx*n.x + ty*ty*n.y + tz*tz*n.z;\n\n}\n\n\n//https://www.shadertoy.com/view/ttfBzS\nfloat randomc(vec2 pos, float mod_time) \n{\n  float A = 30.0;\n  float w = 0.0200;\n  float phi = 0.0;\n  float wrap_time = A * cos(w * mod_time + phi);\n  wrap_time = -abs(wrap_time);\n  float arg0 = 12.9898;\n  float arg1 = 780.2333 / 10000.0 * log(mod_time);\n  float arg2 = 143758.5453123 / (10.0 * wrap_time);\n  return fract(sin(dot(pos.xy, vec2(arg0, arg1))) * arg2);\n}\n\nvec3 randomcolor(vec2 pos)\n{\n    float rnd = randomc( pos, 10.0 ) * 0.4;\n    vec3 color = vec3(tan(rnd));\n    //vec3 color = vec3(sin(2.0*sin(rnd)));\n    return color;\n}\n\n//----------------------------------------\n///-----------------------------------------\n#define X\t\tvec3(1.0,0.0,0.0)\n#define Y\t\tvec3(0.0,1.0,0.0)\n#define Z\t\tvec3(0.0,0.0,1.0)\n#define R\t\t2.0\n#define T\t\t4\nfloat rand(vec3 seed){\n\treturn fract(sin(dot(seed, vec3(12.9898,78.233,233.33))) * 43758.5453);\n}\n\nfloat rand(vec2 seed)\n{\n\treturn rand(vec3(seed,0.0));\n}\n\nfloat rand(float seed)\n{\n\treturn rand(vec3(seed,0.0,0.0));\n}\n\nfloat noise3(vec3 pos)\n{\n\tfloat t = -itime*0.0;\n\tvec3 base = floor(pos*R+t);\n\tvec3 pot = fract(pos*R+t);\n\tvec3 f = smoothstep(0.0,1.0,pot);\n\tfloat w1 = mix(rand(base),    rand(base+X),    f.x);\n\tfloat w2 = mix(rand(base+Z),  rand(base+X+Z),  f.x);\n\tfloat w3 = mix(rand(base+Y),  rand(base+X+Y),  f.x);\n\tfloat w4 = mix(rand(base+Y+Z),rand(base+X+Y+Z),f.x);\n\treturn mix(\n\t\tmix(w1,w3,f.y),\n\t\tmix(w2,w4,f.y),\n\t\tf.z\n\t);\n}\n\n\nfloat fbm3(vec3 pos)\n{\n\tfloat total = 0.0, amp = 1.0;\n\tfor (int i = 0; i < T; i++){\n\t\ttotal += noise3(pos) * amp; \n\t\tpos *= 2.0;\n\t\tamp *= 0.5;\n\t}\n\treturn 1.0-exp(-total*total);\n}\n\n///-----------------------------------------\n//----------------------------------------------------\n\n\nvec3 getColor(int i)\n{\n    \n    float m;\nif (i==-2 ) { return mObj.color; }       \nif (i==0 ) { return vec3(0,0,0)/255.0; }\nif (i==1 ) { return vec3(255.,255.,255.)/255.0; }\nif (i==2 ) { return vec3(255,0,0)/255.0; }\nif (i==3 ) { return vec3(0,255,0)/255.0; }\nif (i==4 ) { return vec3(0,0,255)/255.0; }\nif (i==5 ) { return vec3(255,255,0)/255.0; }\nif (i==6 ) { return vec3(0,255,255)/255.0; }\nif (i==7 ) { return vec3(255,0,255)/255.0; }\nif (i==8 ) { return vec3(192,192,192)/255.0; }\nif (i==9 ) { return vec3(128,128,128)/255.0; }\nif (i==10 ) { return vec3(128,0,0)/255.0; }\nif (i==11 ) { return vec3(128,128,0)/255.0; }\nif (i==12 ) { return vec3(0,128,0)/255.0; }\nif (i==13 ) { return vec3(128,0,128)/255.0; }\nif (i==14 ) { return vec3(0,128,128)/255.0; }\nif (i==15 ) { return vec3(0,0,128)/255.0; }\n    \nif (i==16 ) { return vec3(255, 204, 188)/255.0; }\nif (i==17 ) { return vec3(0.8, 0.8, 0.8); }\nif (i==18 ) { return vec3(0.5, 0.5, 0.8); }\n\n    if(i== 19 )\n    {  return vec3(1, 0.5, 0);    } \n    if(i== 20 )\n    { return vec3(1.0, 1.0, 1.0); } \n    if(i== 21 )\n    {  return vec3(247./255., 168./255.,  184./255.);  } \n    if(i== 22 )\n    { return vec3(0, 1, 1);} \n    if(i== 23 )\n    { return vec3(85./255., 205./255., 252./255.); } \n    \n     if(i== 24 )\n    { return randomcolor(mObj.p.zy+vec2(mObj.p.x,mObj.p.y)); } \n     \n    if(i== 25 )\n    //{ return vec3(1.0)* sin( mObj.p.y+cos(mObj.p.z+ sin(mObj.p.x))); } \n    { return vec3(1.0)* sin( cos(mObj.p.z+ sin(mObj.p.x)+itime)); } \n    \n \n    \n    if (i== 26 )\n    {\n    \treturn  vec3(252./255., 90./255., 50./255.);\n    } \n    \n    if (i== 27 )\n    {\n    \tvec3 col = vec3(0.4, 0.75, 1.0) - vec3(0.02, 0.03, 0.01)*1.7 * mObj.p.y;\n        return col;\n    } \n\n    \n    if(i== 28 )\n    { return vec3(0.3,0.45,1.1)* sin( cos(mObj.p.z+ sin(mObj.p.x)+itime)); } \n    \n    if(i== 29 )\n    { return vec3(1.0,0.25,0.1)* sin( cos(mObj.p.z+ sin(mObj.p.x)+itime)); } \n    \n    if(i== 30 )\n    { return vec3(0.8,0.2,0.1)* fbm3(mObj.p); } \n    \n    \n}\n\n///--------------------------------------------\n\n","name":"Common","description":"","type":"common"}]}