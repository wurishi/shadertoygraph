{"ver":"0.1","info":{"id":"4sdGz7","date":"1448669236","viewed":1180,"name":"Electric Jelly","username":"gdschmdt","description":"Prototyping for illumination of the protestant church in Hockenheim, November 2015","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["red","prototyping","cyan"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"const float PI   = 3.141519;\nconst float dots = 12.0;\n\n// Conver HSV/HSB color to RGB\n//convert HSV to RGB\nvec3 hsv2rgb(vec3 c){\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  float time = iTime/5.0;\n  vec2 uv = fragCoord.xy / iResolution.xy;\n  uv -= 0.5;\n  vec3 color = vec3(0.0);\n\n  // Create 12 single dots\n  for(float i=0.0; i < dots; i++) {\n    float radius = 0.2;\n    vec2 dotPosition = vec2(radius * cos(2.0 * PI * i/dots + time/2.0),\n                            radius * sin(2.0 * PI * i/dots + time));\n    // dotRadius and trignometric function to create wafting effect\n    float dotRadius = 0.02 * (sin(time * PI/2.0 * i) + 2.0);\n    vec3 dotColor = hsv2rgb(vec3((i + time*10.)/dots,1.,1.0));\n    // Add dots to main color output\n    color += dotRadius/length(uv - dotPosition) * dotColor;\n  }\n\n  fragColor = vec4(color, 1.0);\n}\n","name":"","description":"","type":"image"}]}