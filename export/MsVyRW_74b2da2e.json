{"ver":"0.1","info":{"id":"MsVyRW","date":"1522089638","viewed":206,"name":"kale mash","username":"derive_by","description":"mix of \n\nhttps://www.shadertoy.com/view/ltl3Dj\nand\nhttps://www.shadertoy.com/view/Xd2GzR","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["mandelbrot","kaleidoscope","complex"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 kale(vec2 uv, float angle, float base, float spin) {\n\tfloat a = atan(uv.y,uv.x)+spin;\n\tfloat d = length(uv);\n\ta = mod(a,angle*2.0);\n\ta = abs(a-angle);\n\tuv.x = sin(a+base)*d;\n\tuv.y = cos(a+base)*d;\n    return uv;\n}\n\nvec4 dcAdd( vec4 a, vec4 b )\n{\n    return a + b;\n}\n\nvec4 dcMul( vec4 a, vec4 b )\n{\n    return vec4( a.x*b.x - a.y*b.y, \n\t\t\t\t a.x*b.y + a.y*b.x,\n\t\t\t\t a.x*b.z + a.z*b.x - a.y*b.w - a.w*b.y,\n\t\t\t\t a.x*b.w + a.w*b.x + a.z*b.y + a.y*b.z );\n}\n\nvec4 dcSqr( vec4 a )\n{\n    return vec4( a.x*a.x - a.y*a.y, \n\t\t\t\t 2.0*a.x*a.y,\n\t\t\t\t 2.0*(a.x*a.z - a.y*a.w),\n\t\t\t\t 2.0*(a.x*a.w + a.y*a.z) );\n}\n\n//--------------------------------------------------\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float pi = 3.14159265359;\n    vec2 p = -1.0 + 2.0 * fragCoord.xy / iResolution.xy;\n    p.x *= iResolution.x/iResolution.y;\n\n    p = kale(p, pi/6.0, iTime*0.1*pi, pi/2.0);\n    // animation\t\n\tfloat tz = 0.5 + cos(0.0111225*iTime);\n    float zo = pow( 0.5, 1.0*tz );\n\t\n    vec4 c = vec4( vec2(-0.05,.6805) + p*zo, 1.0, 0.0 );\n\n\tfloat m2 = 1.0;\n    float co = 0.0;\n\t\n\tvec4 z = vec4( 0.0, 0.0, 0.0, 0.0 );\n\t\n    for( int i=0; i<256; i++ )\n    {\n        if( m2>1024.0 ) continue;\n\t\t\t\n        // Z -> ZÂ² + c\t\t\n\t\tz = dcAdd( dcSqr(z), c );\n\t\t\n\t\tm2 = dot( z.xy, z.xy );\n        co += 1.0;\n    }\n\n    // distance\t\n\t// d(c) = |Z|Â·log|Z|/|Z'|\n\tfloat d = 0.0;\n\tif( co<256.0 ) d = sqrt( dot(z.xy,z.xy)/dot(z.zw,z.zw) )*log(dot(z.xy,z.xy));\n\n\t\n    // do some soft coloring based on distance\n\td =  4.0*d/zo, 0.0, 1.0 ;\n\td = pow( d, 0.825 );\n    vec3 col = vec3( d );\n    \n    \n    vec2 q = p;\n\n    // Time varying pixel color\n    vec3 bol = 0.8 + 0.2*sin(iTime+p.xxx+vec3(0,2,6)) - 0.2*cos(iTime+p.yyy+vec3(6,1,3));\n    \n    float r = 0.5 + 0.4 * cos(atan(q.y,q.x)*16.0*sin(iTime+q.x-q.y) - 32.0*q.x*q.y*(cos(iTime+q.x-q.y)));\n    bol *= smoothstep(d, r-0.1-zo, length(q-d+1.0));\n    \n    fragColor = vec4(bol, 1.0 );\n}\n\n","name":"Image","description":"","type":"image"}]}