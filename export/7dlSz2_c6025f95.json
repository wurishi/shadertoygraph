{"ver":"0.1","info":{"id":"7dlSz2","date":"1618913923","viewed":126,"name":"Pixel Cat","username":"jin_x","description":"Learning shaders :)","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["pixel"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TUNNEL\n\nconst int img[64] = int[](\n        4,0,0,0,0,0,0,4,\n        4,4,0,0,0,0,4,4,\n        4,4,4,0,0,4,4,4,\n        4,1,4,4,4,4,2,4,\n        4,4,4,3,3,4,4,4,\n        4,4,4,4,4,4,3,4,\n        4,4,3,3,3,3,4,4,\n        0,4,4,4,4,4,4,0\n    );\n\n// random hash by IQ: https://www.shadertoy.com/view/llGSzw\nfloat hash1(uint n)\n{\n    // integer hash copied from Hugo Elias\n\tn = (n << 13U) ^ n;\n    n = n * (n * n * 15731U + 789221U) + 1376312589U;\n    return float( n & uvec3(0x7fffffffU))/float(0x7fffffff);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalize pixel coordinates (y = -0.5..0.5, x = -xres/yres/2..xres/yres/2)\n    vec2 uv = fragCoord/iResolution.xy;\n    float ar = iResolution.x/iResolution.y;\n    uv -= 0.5;\n    uv.x *= ar;\n    \n    // Rotate and zoom (uvr) for image\n    float a = sin(iTime*2.5)/1.25, sa = sin(a), ca = cos(a);\n    vec2 uvr = (uv + vec2(sin(iTime*3.5)/8.*ar, cos(iTime*2.5)/8.)) * mat2(ca, -sa, sa, ca) * (sin(iTime*4.)/6.+1.);\n    \n    // Transform background\n#ifdef TUNNEL\n    float l = length(uv) * (sin(iTime*2.)+3.);\n    a = atan(uv.y, uv.x) + pow(sin(uv.x*5. + iTime*1.5)*.5, 2.) - iTime*.5;\n#else\n    uv += vec2(sin(uv.y*(abs(mod(iTime*0.5,2.)-1.)*30.+5.))/30., sin(uv.x*(abs(mod(iTime*0.3,2.)-1.)*30.+5.))/30.);\n#endif\n\n    // Convert coords to integer for background\n    float cnt = 30.;\n    ivec2 iuv = ivec2(floor(uv.x*cnt), floor(-uv.y*cnt));\n    \n    // Convert coords to integer for image\n    ivec2 ii = ivec2(floor(uvr.x*cnt), floor(-uvr.y*cnt)) + 4;\n    \n    // Draw\n    vec3 col;\n    int n = img[ii.x + ii.y*8];\n    if (all(greaterThanEqual(ii, ivec2(0, 0))) && all(lessThan(ii, ivec2(8, 8))) && n != 0) {\n      if (n == 4) {  // image\n        col = vec3(sin((iTime+uv.y*5.)*5.)/4.+.74, 0., 0.);\n      } else {\n        float i = sin(iTime*6.)/2. + 0.5;\n        i = i * float(int(n)&1) + (1.-i) * float((int(n)&2)>>1);\n        col = vec3(i, i, 0.);\n      }\n    } else {\n#ifdef TUNNEL\n      float i = (((int(sqrt(sqrt(l))*cnt*1.5)^int(floor(a*cnt/3.1416))) & 1) == 0 ? 0.7 : 0.3);\n#else\n      float i = (((iuv.x^iuv.y) & 1) == 0 ? 0.7 : 0.3);\n#endif\n      i *= (1. + sin(iTime*4.)/4.);\n      i += hash1(uint(fragCoord.x) + uint(fragCoord.y)*1920U + uint(iFrame)*1920U*1080U)*.5 - .25;\n#ifdef TUNNEL\n      i *= (l-0.25)/2.;\n#endif\n      col = vec3(i*.2, i*.5, i);  // chessboard\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}