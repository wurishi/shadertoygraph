{"ver":"0.1","info":{"id":"llGyRG","date":"1536719818","viewed":237,"name":"Homestuck Aspect Light","username":"dahart","description":"Homestuck Aspect Light. Use mouse to scrub time.\nInspired by https://www.reddit.com/r/homestuck/comments/7dk2bd/light_pixel_art/","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["2d","light","animation","pixelart","aspect","homestuck","vriska","yokcos"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// https://www.reddit.com/r/homestuck/comments/7dk2bd/light_pixel_art/   (https://www.reddit.com/user/yokcos700/posts?sort=top)\n// https://www.reddit.com/r/PixelArt/comments/7j0h0t/homestuck_aspects_oc/\n// http://mspaintadventures.wikia.com/wiki/Aspect\n\n//#define PIXELATE\n\nconst vec3 white  = nop.zzz;\nconst vec3 yellow = nop.zzy;\nconst vec3 blue   = nop.yyz;\nconst vec3 black  = nop.yyy;\nconst vec3 orange = mix(nop.zzy, nop.zyy, .5);\n    \n#define Zi min(0, iFrame)\n\n// BG character vriska holding dice\n\nvec4 LightBG(vec2 uv, float dx) {\n\tvec4 color = premult(orange*.7, 1.);\n    \n    float d = 1.;\n    //dx *= 2.5;\n    vec3 skinColor = blue/2.;\n\n    // body\n    if (uv.x > .5) {\n        // body\n        d = sdCircle(uv - vec2(1.6, -.35), 1.1);\n        // head\n        d = sdUnion(d, sdCircle(uv - vec2(1., .6), .23));\n        // hair\n        if (uv.y > .39 && uv.y < .8 && uv.x > .70 && uv.x < .85) {\n#if 1 // 24fps\n            const float[] n = float[18](\n                .90, .75, .05, .73, .70, 0.,\n                .85, .70, .05, .72, .60, 0.,\n                .84, .62, .07, .75, .4, 0.\n            );\n            for (int i = Zi; i < 3; i++) {\n                d = sdUnion(d, sdFatLine2(uv, vec3(vec2(n[i*6+0], n[i*6+1]), n[i*6+2]), vec3(vec2(n[i*6+3], n[i*6+4]), n[i*6+5])));\n            }\n#else // 32fps\n            d = sdUnion(d, sdFatLine2(uv, vec3(vec2(.90, .75), .05), vec3(vec2(.73, .70), .0)));\n            d = sdUnion(d, sdFatLine2(uv, vec3(vec2(.85, .70), .05), vec3(vec2(.72, .60), .0)));\n            d = sdUnion(d, sdFatLine2(uv, vec3(vec2(.84, .62), .07), vec3(vec2(.75, .4), .0)));\n#endif\n            //color.rgb += vec3(.1); // show bbox\n        }\n        // horn\n        if (uv.x > .7 && uv.x < .92 && uv.y > .7) {\n            d = sdBezierMin2(\n                uv,\n                vec3(vec2(.85, .75), .05), \n                vec3(vec2(.80, .85), .05), \n                vec3(vec2(.90, .99), .01),\n                d);\n            d = sdBezierMin2(\n                uv,\n                vec3(vec2(.73, .75), .00), \n                vec3(vec2(.71, .81), .03), \n                vec3(vec2(.77, .87), .03),\n                d);\n            d = sdBezierMin2(\n                uv,\n                vec3(vec2(.77, .87), .03), \n                vec3(vec2(.85, .94), .03), \n                vec3(vec2(.90, .99), .01),\n                d);\n            //color.rgb += vec3(.1); // show bbox\n        }\n        if (d < dx) color = comp(color, premult(skinColor, S(0., -dx, d )));\n    }\n    // hand\n    else {\n        \n        // right arm\n        if (uv.x < .25 && uv.y < .15) {\n            d = sdFatLine2(uv, vec3(vec2(.2, -.10), .07), vec3(vec2(.14, .04), .07));\n            color = comp(color, premult(skinColor, S(0., -dx, d )));\n            //color += vec4(.2); // show bbox\n        }\n    \n\n        // claws\n        vec2 cuv = vec2(uv.x + .065*L(.0, .55, uv.y), uv.y);\n        if (uv.x < .25 && uv.y < .43) {\n            float r = 0.012;\n            const vec2[4] a = vec2[4](vec2(.10, .07), vec2(.12, .10), vec2(.145, .10), vec2(.18, .09) );\n            const vec2[4] b = vec2[4](vec2(-.035, .20),vec2(-.01, .24),vec2(.03, .30),vec2(.06, .30));\n            for (int i = Zi; i < 4; i++) {\n                d = sdFatLine2(cuv, vec3(a[i], r*2.), vec3(a[i]+b[i], r));\n                color = comp(color, premult(skinColor, S(0., -dx, d )));\n            }\n            \n            //color += vec4(.2); // show bbox\n        }\n\n        // dice\n        vec2 duv = uv;\n        if (uv.x < .2 && uv.y < .4 && uv.y > .2) {\n            mat2 r = rot(pi/4.);\n            d = sdBox2(r * (duv - vec2(.145, .34)), vec2(.01)) - .015;\n            d = sdUnion(d, sdBox2(r * (duv - vec2(.075, .30)), vec2(.01)) - .015);\n            d = sdUnion(d, sdBox2(r * (duv - vec2(.025, .26)), vec2(.01)) - .015);\n            color = comp(color, premult(skinColor, S(0., -dx, d )));\n            //color += vec4(.2); // show bbox\n        }\n\n    }\n    \n    return color;\n}\n\nfloat LightHalo(vec2 uv, float time, float dx) {\n    float alpha = .25;\n    \n    const vec2 center = vec2(.5, .5);\n    vec2 tuv = uv - center;\n    \n    float tl = dot(tuv, 1./sqrt(2.) * nop.zz);\n    float tr = dot(tuv, 1./sqrt(2.) * nop.xz);\n    \n    tl = abs(tl);\n    tr = abs(tr);\n    float t = min(tl, tr);\n    \n    alpha = .5+.1*cos(t*tau*6.);\n    float to = .04 + .03 * sin(time*tau);\n    alpha *= S(-.5-to, -.25-to, tuv.x);\n    alpha *= S( .5+to,  .25+to, tuv.x);\n    alpha *= S(-.5-to, -.25-to, tuv.y);\n    alpha *= S( .5+to,  .25+to, tuv.y);\n\n    // posterize the bloom just a tad\n    return mix(alpha, floor(alpha*5.+.5)/5., .2);\n}\n\nvec4 LightSymbol(vec2 uv, float time, float dx) {\n    vec4 d, e;\n    //float dx = dFdx(uv).x * 2.;\n    const vec2 center = vec2(.5, .5);\n    vec2 its = 1. / vec2(textureSize(iChannel0, 0));\n    //vec2 ts = vec2(its);\n\t//vec2 tdx = vec2(1.0) / ts;\n\n    vec4 color = nop.yyyy;\n    vec2 tuv = uv - center;\n    float r = length(tuv);\n    float a = atan(tuv.x, tuv.y);\n\n    const float r1 = .26;  // radius of sun\n    const float r2 = .28;  // radius of ray start\n    const float r3 = .55;  // radius of ray end\n    const float rayWidth = .05;\n\n    if (r < r1+dx) {\n        // sun disk, with aa\n        float outerR = .25 + .015*sin(time*6.);\n        vec3 sunColor = mix(white, yellow, stairs(remap(r, outerR-.1, outerR+.1, 0., 1.), 7.) );\n        color = premult(sunColor, S(r1, r1 - dx, r));\n    } else {\n        // sun rays, with aa\n        float nRays = 16.;\n        float b = a + pi/nRays;\n        int rayId = int(floor(nRays * (b+pi) / tau));\n\n        // debug rayId\n        //color = vec4(white * ((a+pi)/tau), 1.);\n        //color = vec4(fract(nRays * red * ((a+pi)/tau)), 1.);\n        //color = vec4(floor(nRays * red * ((a+pi)/tau))/nRays, 1.);\n        //color = comp(color, texture(iChannel0, vec2(float(rayId)+.5, 1.5)*its));\n\n        // ray length goes long, short, med, short...\n        float rayLen = .23;\n        if ((rayId & 0x2) == 2) rayLen = .1;\n        if ((rayId & 0x1) == 1) rayLen = .05;\n\n        // find three points of the ray triangle, in uv space\n        float rayAngle = 2. * pi * float(rayId) / nRays;\n        // large rays wiggle\n        if (rayId % 4 == 0) rayAngle += .07 * r * sin(r*58. - 4. * time);\n        vec2 rayDir = vec2(-sin(rayAngle), -cos(rayAngle)); // match start & winding of rayId\n        vec2 ringBase = r2 * rayDir;\n        vec2 tanDir = vec2(rayDir.y, -rayDir.x);\n        vec2 rb1 = ringBase - rayWidth*tanDir;\n        vec2 rb2 = ringBase + rayWidth*tanDir;\n        vec2 rayTip = ringBase + rayDir * rayLen;\n\n        float d = -20.;\n        d = max(d, sdEdgePoints(tuv, rb1, rb2));\n        d = max(d, sdEdgePoints(tuv, rb2, rayTip));\n        d = max(d, sdEdgePoints(tuv, rayTip, rb1));\n\n        // sunbeams\n        if (d < 0.) {\n            vec3 rayColor = mix(yellow, white, S(.0, -.03, d));\n            color = comp(color, premult(rayColor, S(0., -dx, d)));\n        }\n\n        // give the spew just a hint of the upward arc that's in the pixel art\n    \ttuv += .1 * (r - r2) * vec2(0., -1.);\n        float r = length(tuv);\n    \tfloat a = atan(tuv.x, tuv.y);\n\n        // sun spew            \n        const float nSpews = 32.;\n        const float nParticlesPerSpew = 15.;\n        // RA = radius, angle (so I can remember which one is .x & which is .y)\n        float spewAngle = nSpews * a/tau;\n        float spewRate = 1. + mod(floor(spewAngle), 2.);\n        vec2 spewSpaceRA = vec2(r * nParticlesPerSpew - time*spewRate, spewAngle);\n        vec2 spewIdRA  = floor(spewSpaceRA);\n        vec2 spewLocRA = fract(spewSpaceRA);\n        // debug spewLocRA\n        //if (abs(spewLocRA.x - 0.5) < .25 && abs(spewLocRA.y - .5) < .25) color = comp(color, premult(yellow, 1.));\n\n        // debug spewId\n        //color = comp(color, texture(iChannel0, vec2(spewLocRA.x+.5, 3.5)*its));\n        //color = comp(color, premult(vec3(spewLocRA.y), .5));\n                \n        // now pick particle center spewId from spew space back to world space\n        vec2 partRand = texture(iChannel0, mix((spewIdRA + .5)*its, vec2(.5), .25)).xy; // N(particleId)\n        \n        // take spewId from spew space back to world space -- with a random offset\n        float partAngle = tau * (spewIdRA.y + partRand.x) / nSpews;\n        float partRad = ((spewIdRA.x + partRand.y) + time*spewRate) / nParticlesPerSpew;\n\n        vec2 partDir = vec2(sin(partAngle), cos(partAngle));\n        vec2 p = partDir * partRad;\n        \n        // debug partDir\n        //if (dot(normalize(tuv), partDir) > .9999) color = comp(color, premult(yellow, 1.));\n                \n        d = length(tuv - p) - .5*remap(r, .2, .35, .01, .0) - .01;\n        if (r > r2+dx && d < 0.) color = comp(color, premult(yellow, S(0., -dx, d)));\n    }\n    \n    return color;\n}\n\nvec4 Light( vec2 uv, float time, float dx )\n{\n\tvec4 color = vec4(black, 1.);\n    float phaseTime = fract(time);\n    \n    // BG figure is Vriska Serket, with dice tween her fingers\n    color = comp(color, LightBG(uv, dx));\n    \n    color = mix(color, (color*3.+2.*vec4(white,1.))/3., LightHalo(uv, phaseTime, dx));\n\n    // Symbol of Light\n    color = comp(color, LightSymbol(uv, time, dx));\n    \n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float margin = .5 * (iResolution.x - iResolution.y);\n\tvec2 uv = 1.*(fragCoord.xy - X*margin) / iResolution.yy;\n    float dx = fwidth(length(uv)) * 1.5;\n    float time = iTime + 2.*iMouse.x/iResolution.y;\n    \n#ifdef PIXELATE\n    uv = floor(uv * 64.) / 64.;\n    time = floor(time * 16.) / 16.;\n#endif // PIXELATE\n\n    fragColor = vec4(0.);\n    //for (int i = 0; i < 1000+Zi; i++) // for perf testing, slow things way down\n    if (uv.x >= 0.0 && uv.x <= 1.0) fragColor = Light(uv, time, dx);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"\n#define S(a,b,t) smoothstep(a,b,t)\n#define unlerp(a,b,t) ((t-a)/(b-a))\n#define v30 vec3(0.)\n\n// lump between a and b. \n// returns 0 when t is outside [a,b]\n// returns 1 at t=(a+b)/2.\n// smoothstep from center to either end (t==a, t==b)\nfloat L(float a, float b, float t) {\n    float u = unlerp(a, b, t);\n    return S(0., 1., 2.*u) * S(0., 1., 2. - u*2.);\n}\n\n// take [0, 1], return [0, .5] + [.5, 0]\nfloat mirror(float x) { return .5-abs(x-.5); }\n\nfloat N(float t) {\n\treturn fract(sin(t*10234.324)*123423.23512);\n}\n\n// remove r from n, i.e., project n onto plane with normal r\nvec3 remove(vec3 n, vec3 r) {\n    return n - r * dot(n, r) / dot(r, r);\n}\nvec2 remove(vec2 n, vec2 r) {\n    return n - r * dot(n, r) / dot(r, r);\n}\n\nvec2 rot90(vec2 v) {\n    return vec2(v.y, -v.x);\n}\n\nconst vec2 X = vec2(1., 0.);\nconst vec3 nop = vec3(-1., 0., 1.);\nconst float pi = 4. * atan(1.); //3.14159265358979323;\nconst float tau = 8. * atan(1.); //2. * pi;\nconst float maxFloat = intBitsToFloat(0x7f7fffff);\n\nvec4 premult(vec4 color) {\n    return vec4(color.rgb * color.a, color.a);\n}\n\nvec4 premult(vec3 rgb, float alpha) {\n    return vec4(rgb * alpha, alpha);\n}\n\nvec4 comp(vec4 bg, vec4 fg) {\n    return fg + bg * (1. - fg.a);\n}\n    \nvec4 comp(vec4 bg, vec3 fg, float a) {\n    return vec4(fg + bg.rgb * (1. - a), bg.a + a);\n}\n    \nvec3 comp(vec3 bg, vec3 fg, float a) {\n    return fg + bg * (1. - a);\n}\n\n//https://www.shadertoy.com/view/ltXSDB\n// Solve cubic equation for roots\nvec3 solveCubic(float a, float b, float c)\n{\n    float p = b - a*a / 3., p3 = p*p*p;\n    float q = a * (2.*a*a - 9.*b) / 27. + c;\n    float d = q*q + 4.*p3 / 27.;\n    float offset = -a / 3.;\n    if(d >= 0.) { \n        float z = sqrt(d);\n        vec2 x = (vec2(z, -z) - q) / 2.;\n        vec2 uv = sign(x)*pow(abs(x), vec2(1./3.));\n        return vec3(offset + uv.x + uv.y);\n    }\n    float v = acos(-sqrt(-27. / p3) * q / 2.) / 3.;\n    float m = cos(v), n = sin(v)*sqrt(3.);//1.732050808;\n    return vec3(m + m, -n - m, n - m) * sqrt(-p / 3.) + offset;\n}\n\n// Test if point p crosses line (a, b), returns sign of result\nfloat testCross(vec2 a, vec2 b, vec2 p) {\n    return sign((b.y-a.y) * (p.x-a.x) - (b.x-a.x) * (p.y-a.y));\n}\n\n// Determine which side we're on (using barycentric parameterization)\nfloat signBezier(vec2 A, vec2 B, vec2 C, vec2 p)\n{ \n    vec2 a = C - A, b = B - A, c = p - A;\n    vec2 bary = vec2(c.x*b.y-b.x*c.y,a.x*c.y-c.x*a.y) / (a.x*b.y-b.x*a.y);\n    vec2 d = vec2(bary.y * 0.5, 0.0) + 1.0 - bary.x - bary.y;\n    return mix(sign(d.x * d.x - d.y), mix(-1.0, 1.0, \n        step(testCross(A, B, p) * testCross(B, C, p), 0.0)),\n        step((d.x - d.y), 0.0)) * testCross(A, C, B);\n}\n\n//https://www.shadertoy.com/view/ltXSDB\n// Find the signed distance from a point to a bezier curve\n// returns a vec4: (dist to boundary, dist to curve, sign, parameter [0-1])\nvec4 sdBezier(vec2 p, vec3 A, vec3 B, vec3 C)\n{    \n    //B = (4.0 * B - A - C) / 2.0;\n    // handle instability when B is midpoint between A and C\n    //B = vec3(mix(B.xy + vec2(1e-4), B.xy, abs(sign(B.xy * 2.0 - A.xy - C.xy))), B.z);\n    \n    vec3 a = B - A;\n    vec3 b = A - B * 2.0 + C;\n    vec3 c = a * 2.0;\n    vec2 d = A.xy - p;\n    \n    vec3 k = vec3(3.*dot(a.xy,b.xy),2.*dot(a.xy,a.xy)+dot(d.xy,b.xy),dot(d.xy,a.xy)) / dot(b.xy,b.xy);      \n    vec3 t = clamp(solveCubic(k.x, k.y, k.z), 0., 1.);\n    vec3 it = vec3(1.0) - t;\n\n    vec3 pos0 = A + (c + b*t.x)*t.x;\n    vec3 pos1 = A + (c + b*t.y)*t.y;\n    vec3 pos2 = A + (c + b*t.z)*t.z;\n\n    float dis0 = length(pos0.xy - p) - pos0.z;\n    float dis1 = length(pos1.xy - p) - pos1.z;\n    float dis2 = length(pos2.xy - p) - pos2.z;\n    \n\tfloat minT = t.x;\n    vec3 minP = pos0;\n\tfloat minDis = dis0;\n\tif (dis1 < minDis) { minDis = dis1; minT = t.y; minP = pos1; }\n\tif (dis2 < minDis) { minDis = dis2; minT = t.z; minP = pos2; }\n            \n    return vec4(minDis, minDis + minP.z, signBezier(A.xy, B.xy, C.xy, p), minT);\n}\n\nfloat sdBezierMin2(vec2 p, vec3 a, vec3 b, vec3 c, float dist) {\n    vec4 d = sdBezier(p, a, b, c);\n    if (d.x < dist) return d.x;\n    else return dist;\n}\n\nfloat sdBezier2(vec2 p, vec3 a, vec3 b, vec3 c) {\n    vec4 d = sdBezier(p, a, b, c);\n    return d.x;\n}\n\n// returns a vec4: (dist to boundary, dist to curve, sign, parameter [0-1])\nvec4 sdCurve(vec2 p, int n, vec3[16] pts) {\n    int nn = n - 1;\n    vec4 d = maxFloat * nop.zzzz, e;    \n    vec3 pp1 = mix(pts[0], pts[1], -0.001), pp2;\n    float oofn = 1.0 / (float(n));\n    int i = 0;\n    for (i = 0; i < nn; i++) {\n        pp2 = 0.5 * (pts[i] + pts[i+1]);\n        e = sdBezier(p, pp1, pts[i], pp2);\n        pp1 = pp2;\n        if (e.x < d.x) d = vec4(e.xyz, (e.w+float(i))*oofn);\n    }\n    pp2 = pts[nn];\n    e = sdBezier(p, pp1, pts[i], pp2);\n    if (e.x < d.x) d = vec4(e.xyz, (e.w+float(i))*oofn);\n\n    // signBezier fails on the first & last segments, here's a patch\n    if (d.w <= oofn) {\n        d.z = dot(p - pts[0].xy, rot90( pts[0].xy - pts[1].xy ) ) < 0. ? 1. : -1.;\n    }\n    else if (d.w >= 1.-oofn) {\n    \td.z = dot(p - pts[nn].xy, rot90( pts[nn-1].xy - pts[nn].xy ) ) < 0. ? 1. : -1.;\n    }\n\n    return d;\n}\n\n// 2 output vectors: curvePoint, curveTangent\nvoid evalBezier(float t, vec2 a, vec2 b, vec2 c, out vec2 curvePoint, out vec2 curveTangent) {\n    t = clamp(t, 0., 1.);\n    curvePoint = mix(mix(a, b, t), mix(b, c, t), t);\n    curveTangent = 2. * (( a + c - 2. * b ) * t + ( b - a ));\n}\n\n// 2 output vectors: curvePoint, curveTangent\nvoid evalCurve(float t, int n, vec3[16] pts, out vec2 curvePoint, out vec2 curveTangent) {\n    float nt = clamp(t, 0.0001, .9999) * float(n);\n    int j = int(nt);\n    int i = max(0, j - 1);\n    int k = min(n-1, j + 1);\n    float tSegment = nt - float(j);\n    \n    vec2 a = pts[i].xy;\n    vec2 b = pts[j].xy;\n    vec2 c = pts[k].xy;\n    \n    a = mix(a, b, .5);\n    c = mix(b, c, .5);\n    \n    curvePoint = mix(mix(a, b, tSegment), mix(b, c, tSegment), tSegment);\n  \tvec2 ba = b-a;\n   \tcurveTangent = 2. * (( c - b - ba ) * tSegment + ( ba ));\n}\n\nstruct Hit {\n    float dBound;\n    float dCurve;\n    float sign;\n    vec2 pos;\n    vec2 tangent;\n    //vec3 normal;\n    vec2 uv;\n};\n\n// vec4 d is the same format as return from sdBezier: vec4( dBound, dCurve, sign, param )\nvec2 calcBezierUv(float dBound, float dCurve, float sign, float param) {\n    return vec2(param, .5 + .5 * sign * dCurve / (abs(dBound) + dCurve));\n}\n\nHit calcBezierHit(vec2 uv, vec3 a, vec3 b, vec3 c) {\n    Hit hit;\n    vec4 d = sdBezier(uv, a, b, c);\n    hit.dBound = d.x;\n    hit.dCurve = d.y;\n    hit.sign = d.z;\n    hit.uv = calcBezierUv(d.x, d.y, d.z, d.w);\n    evalBezier(d.w, a.xy, b.xy, c.xy, hit.pos, hit.tangent);\n    float z = sin(hit.uv.y * pi);\n    //hit.normal = normalize(vec3( (1.-z)*normalize(uv - hit.pos), .25*z));\n    return hit;\n}\n\nHit calcCurveHit(vec2 uv, int n, vec3[16] pts) {\n    Hit hit;\n    vec4 d = sdCurve(uv, n, pts);\n    hit.dBound = d.x;\n    hit.dCurve = d.y;\n    hit.sign = d.z;\n    hit.uv = calcBezierUv(d.x, d.y, d.z, d.w);\n    evalCurve(d.w, n, pts, hit.pos, hit.tangent);\n    float z = sin(hit.uv.y * pi);\n    //hit.normal = normalize(vec3( (1.-z)*normalize(uv - hit.pos), .25*z));\n    return hit;\n}\n\nvec3 calcCurveRoundNormal(vec2 uv, Hit hit) {\n    float z = sin(hit.uv.y * pi);\n    return normalize(vec3( (1.-z)*normalize(uv - hit.pos), .25*z));\n}\n\nvec3 calcCurveTentNormal(vec2 uv, Hit hit) {\n    float z = abs(hit.uv.y);\n    return normalize(vec3( (1.-z)*normalize(uv - hit.pos), .25*z));\n}\n\n// a & b are two points w/ radius. a.xy = 2d point, a.z = radius\n// u=along curve v=perpendicular\nfloat sdFatLine2All(vec2 p, vec3 a, vec3 b, out float distToCurve, out vec2 uv) {\n    vec2 d = b.xy - a.xy;\n    vec2 pd = p - a.xy;\n    float t = dot(pd, d) / dot(d, d);\n    t = min(1.0, max(0.0, t));\n    vec2 cp = a.xy + t * d;\n    \n    vec2 n = p - cp;\n    distToCurve = length(n);\n    \n    // remember a.z & b.z are radius\n    float cr = mix(a.z, b.z, t);\n    float v = .5 + .5 * dot(vec2(-pd.y, pd.x), normalize(d)) / cr;\n    uv = vec2(t, v);\n\n    float distToBoundary = distToCurve - cr;\n    \n    return distToBoundary;\n}\n\nfloat sdFatLine2(vec2 p, vec3 a, vec3 b)\n{\n    float dummy_dc;\n    vec2 dummy_uv;\n    return sdFatLine2All(p, a, b, dummy_dc, dummy_uv);\n}\n\nmat2 rot(float a)\n{\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\treturn mat2(c, s, -s, c);\n}\n\nfloat remap(float v, float min1, float max1, float min2, float max2) {\n    return min2 + (max2 - min2) * (v - min1) / (max1 - min1);\n}\n\nfloat bias(float x, float b) { return pow(x,log(b)/log(0.5)); }\n\nfloat gain(float x, float g) { return (x<0.5) ? bias(2.*x,1.-g)/2. : 1. - bias(2.-2.*x,1.-g)/2.; }\n\nfloat aaFloor(float x) {\n    float dx = 2. * length(vec2(dFdx(x), dFdy(x)));\n    float fx = fract(x), idx = 1. - dx;\n    return (fx < idx) ? x - fx : remap(fx, idx, 1., x-fx, x);\n}\n\nfloat aaFract(float x) {\n    float dx = 2. * length(vec2(dFdx(x), dFdy(x)));\n    float fx = fract(x), idx = 1. - dx;\n    return (fx < idx) ? fx : remap(fx, idx, 1., fx, 0.);\n}\n\nfloat stairs(float x, float steps) {\n    return floor(x * steps) / steps;\n}\n\nfloat stairs2(float x, float steps) {\n    return round(x * steps) / steps;\n}\n\nfloat escalator(float x, float steps, float time) {\n    float dx = 1. / steps;\n    x = remap(x, 0., 1., -dx/2., 1.+dx/2.) + dx/2.;\n    float ex = (x - time*dx) * steps;\n    float ey = (aaFloor(ex) + time) * dx;\n    return clamp(ey, 0., 1.);\n}\n\nvec2 escalatorId(float x, float steps, float time) {\n    float dx = 1. / steps;\n    x = remap(x, 0., 1., -dx/2., 1.+dx/2.) + dx/2.;\n    float ex = (x - time*dx) * steps;\n    float id = floor(ex);\n    float ey = (aaFloor(ex) + time) * dx;\n    return vec2(clamp(ey, 0., 1.), id);\n}\n\nfloat saw(float x) {\n    float mx = mod(x,1.);\n    return 2. * min(mx, 1.-mx);\n}\n\nfloat dline(vec2 p, vec2 lp, vec2 ld) {\n    return dot(p-lp, ld);\n}\n\nfloat sqr(float x) { return x*x; }\n\nfloat d2a (vec2 d) {\n    return atan(d.y, d.x);\n}\n\nvec2 a2d (float a) {\n    return vec2(cos(a), sin(a));\n}\n\nfloat sdEdgeNormal(vec2 x, vec2 p, vec2 normal) {\n    return dot(x-p, normal);\n}\n\nfloat sdEdgePoints(vec2 x, vec2 p1, vec2 p2) {\n    return dot(x-p1, normalize(rot90(p2 - p1)));\n}\n\n\n// lots of distance functions from IQ\n// https://iquilezles.org/articles/distfunctions\n\nfloat sdBox3( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat sdBox2( vec2 p, vec2 b )\n{\n  vec2 d = abs(p) - b;\n  return min(max(d.x,d.y),0.) + length(max(d,0.));\n}\n\nfloat udRoundBox( vec2 p, vec2 b, float r )\n{\n  return length(max(abs(p)-b,0.0))-r;\n}\n\nfloat udBox( vec2 p, vec2 b )\n{\n  return length(max(abs(p)-b,0.0));\n}\n\nfloat sdCircle( vec2 p, float s )\n{\n  return length(p)-s;\n}\n\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h ) - r;\n}\n\nfloat sdCapsule2All( vec2 p, vec2 a, vec2 b, float r, out float distToCenter, out vec2 uv, out vec2 pCenter )\n{\n    vec2 pa = p - a, ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    distToCenter = length( pa - ba*h );\n    float distToBoundary = distToCenter - r;\n    return distToBoundary;\n}\n\nfloat sdCapsule2( vec2 p, vec2 a, vec2 b, float r )\n{\n    vec2 dummy_pc, dummy_uv;\n    float dummy_dc;\n    return sdCapsule2All(p, a, b, r, dummy_dc, dummy_uv, dummy_pc);\n}\n\n// https://iquilezles.org/articles/smin\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\n// d1 minus d2\nfloat sdSubtract( float d1, float d2 )\n{\n    return max(d1, -d2);\n}\n\n// d1 union d2\nfloat sdUnion( float d1, float d2 )\n{\n    return min(d1, d2);\n}\n","name":"Common","description":"","type":"common"}]}