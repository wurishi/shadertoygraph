{"ver":"0.1","info":{"id":"ttScDK","date":"1595382742","viewed":135,"name":"v3Zebra.glsl","username":"jorge2017a1","description":"///source code of ShaderSketches","likes":16,"published":1,"flags":0,"usePreview":0,"tags":["v3zebraglsl"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const float pi = 3.14159265359;\n    float size = iResolution.y / 10.0; // cell size in pixel\n\n    vec2 p1 = fragCoord.xy / size; // normalized pos\n    vec2 p2 = fract(p1) - 0.5; // relative pos from cell center\n\n    // random number\n    float rnd = dot(floor(p1), vec2(12.9898, 78.233));\n    rnd = fract(sin(rnd) * 43758.5453);\n\n    // rotation matrix\n    float phi = rnd * pi * 2.0 + iTime * 0.4;\n    mat2 rot = mat2(cos(phi), -sin(phi), sin(phi), cos(phi));\n\n    vec2 p3 = rot * p2; // apply rotation\n    p3.y += sin(p3.x * 5.0 + iTime * 2.0) * 0.12; // wave\n\n    float rep = fract(rnd * 13.285) * 8.0 + 2.0; // line repetition\n    float gr = fract(p3.y * rep + iTime * 0.8); // repeating gradient\n\n    // make antialiased line by saturating the gradient\n    float c = clamp((0.25 - abs(0.5 - gr)) * size * 0.75 / rep, 0.0, 1.0);\n    c *= max(0.0, 1.0 - length(p2) * 0.6); // darken corners\n\n    vec2 bd = (0.5 - abs(p2)) * size - 2.0; // border lines\n    c *= clamp(min(bd.x, bd.y), 0.0, 1.0);\n\n    fragColor = vec4(c);\n}\n\n","name":"Image","description":"","type":"image"}]}