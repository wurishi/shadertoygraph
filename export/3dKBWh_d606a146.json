{"ver":"0.1","info":{"id":"3dKBWh","date":"1607012706","viewed":374,"name":"array of debug viewmeter anywher","username":"FabriceNeyret2","description":"when you want to check many variable at the same time ( red blocks ) even inside a deep function.\n","likes":4,"published":3,"flags":0,"usePreview":0,"tags":["debug","utils"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// === the magic function.  list = ( float1, ... , floatN ) ==============\n#define viewmeter(list) {                                            \\\n    float L[] =  float[] list;                                       \\\n    st_assert( U.y>.1 || fract(U.x*float(L.length()))>.1, 2 );       \\\n    st_assert( U.y>.1 || U.y > .1*L[ int(U.x*float(L.length())) ] ); \\\n}\n\nfloat calc( vec2 U, vec2 M ) { // ========== some deep compute function\n    \n    vec4 S = .5+.5*sin(vec4(20,17,21,0)*M.xyxy + 3.*iTime); // some expressions \n    \n    // Here is the viewmeter array:  note the double () \n    // for debug, suppose we need to check these 6 expressions.\n    //         value1   value2  value3  value4 value5 value6    \n    viewmeter(  ( S.x , M.x*M.y , S.y,   S.z,   S.w, S.z*S.w ) );\n\n    S *= U.xyxy;                                      // some result\n    float v = sin( S.x + 10.*sin(S.y  +10.*sin(S.z + 10.*sin(S.w))) );\n    return .5+.5*v; \n}\n\nvoid mainImage( out vec4 fragColor, vec2 fragCoord )  // ===============\n{\n    vec2 R = iResolution.xy,\n         U = fragCoord/R,\n         M = iMouse.xy/R - .5;\n    \n    fragColor = vec4( .3*calc(U,M) );\n}","name":"Image","description":"","type":"image"}]}