{"ver":"0.1","info":{"id":"X3jcDV","date":"1727739620","viewed":34,"name":"GameCraft Eng. Challenge - Eye","username":"mxxwwl","description":"Base shader for GameCraft's October engineering challenge!","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["eye","challenge","gamecraft"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nAuthor: Maxwell Rodgers (2024 GameCraft Engineering Officer)\n\nGameCraft October 2024 Engineering Challenge - edit the code below where marked to change this eye shader (make it look cooler)!\nThe only rules for the challenge is that an eye should be recognizable in your final code!\n\nThis challenge is meant to be as hard as you want it to be. Want an easy challenge? Just change the colors.\nAdvanced programmers might be more keen to insert crazier effects! Edit my code however you want it dont matter. \n\nA basic understanding of graphics is needed to complete this challenge.\nIf you need help look up \"Shadertoy Tutorial\" on youtube, which will give you the minumum knowledge to change this shader.\n\nTo save the changes you make to this shader, please create a fork (click the fork button near the title) and edit your shader there. \n\nShadertoy uses the OpenGL graphics API (so does Godot), but other renderers may use DirectX (Unity) or Vulkan (Unreal and Godot4). \n\nThe base shape of the eye was adapted from this Desmos code I found here: https://www.desmos.com/calculator/ur4b0l2jpp\n\n*/\n\n// Function to calculate if we're inside the outer eye boundary\n// Region boundaries are +/- (outEyeSize * x^2 - 0.25) * blinkFactor\nbool isInOuterEye(vec2 uv, float outerEyeSize, float blinkFactor) \n{\n    float outerEye = outerEyeSize * uv.x * uv.x - 0.25;\n    float outerEyeScaled = outerEye * blinkFactor;\n    return (uv.y > outerEyeScaled && uv.y < -outerEyeScaled);\n}\n\n// Function to calculate if we're inside the iris boundary\n// Get squared distance from center for x and y, offset by mousepos (h & v), compare to (squared) radius of iris\n// h and v scaled down to limit movement\nbool isInIris(vec2 uv, float h, float v, float innerEyeSize) \n{\n    float sqHorizontalDistance = (uv.x - h / 3.0) * (uv.x - h / 3.0);\n    float sqVerticalDistance = (uv.y - v / 3.0) * (uv.y - v / 3.0);\n    float squareDistanceFromCurr = sqHorizontalDistance + sqVerticalDistance;\n    return squareDistanceFromCurr <= innerEyeSize * innerEyeSize;\n}\n\n// Function to calculate if we're inside the pupil boundary\n// Get squared distance from center for x and y, offset by mousepos (h & v), compare to (squared) radius of pupil\n// h and v scaled down to limit movement\nbool isInPupil(vec2 uv, float h, float v, float pupilSize) \n{\n    float sqHorizontalDistance = (uv.x - h / 2.0) * (uv.x - h / 2.0);\n    float sqVerticalDistance = (uv.y - v / 2.0) * (uv.y - v / 2.0);\n    float squareDistanceFromCurr = sqHorizontalDistance + sqVerticalDistance;\n    return squareDistanceFromCurr <= pupilSize * pupilSize;\n}\n\n// Calculates where we should be in the blinking process\nfloat calculateBlinkFactor(float time, float openPeriod, float closedPeriod) \n{\n    float cycleLength = openPeriod + closedPeriod;\n    float cycleTime = mod(time, cycleLength);\n    float closingPhaseDuration = closedPeriod / 3.0;\n\n    // Should eye be open\n    if (cycleTime < openPeriod) \n    {\n        return 1.0;\n    }\n\n    // Start closing phase\n    if (cycleTime < openPeriod + closingPhaseDuration) \n    {\n        float closePhase = (cycleTime - openPeriod) / closingPhaseDuration;\n        return 1.0 - smoothstep(0.0, 1.0, closePhase);\n    }\n\n    // Hold eye closed\n    if (cycleTime < openPeriod + 2. * closingPhaseDuration) \n    {\n        return 0.0;\n    }\n\n    // Open eye again\n    if (cycleTime < cycleLength) \n    {\n        float openPhase = (cycleTime - (openPeriod + 2. * closingPhaseDuration)) / closingPhaseDuration;\n        return smoothstep(0.0, 1.0, openPhase);\n    }\n\n    return 1.0;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalize coordinates to [-0.5, 0.5]\n    vec2 uv = fragCoord.xy / iResolution.xy - 0.5;\n\n    // Parameters to look at the mouse\n    float h = clamp(iMouse.x / iResolution.x - 0.5, -0.5, 0.5); //Horizontal offset of the iris/pupil\n    float v = clamp(iMouse.y / iResolution.y - 0.5, -0.5, 0.5); //Vertical offset of the iris/pupil\n\n    // Eye size parameters\n    float outerEyeSize = 1.25;\n    float innerEyeSize = .2;\n    float pupilSize = 0.06;\n    \n    // Blink timing parameters\n    float blinkOpenPhase = 5.;\n    float blinkClosedPhase = 0.25;\n\n    // Calculate blink timings\n    float blinkFactor = calculateBlinkFactor(iTime, blinkOpenPhase, blinkClosedPhase);\n\n    // Check if we are inside the outer eye boundary\n    if (isInOuterEye(uv, outerEyeSize, blinkFactor)) \n    {\n        /*\n            Edit the code here to change the outer eye. (The white part of the eye)\n            Change the fragcolor value below\n        */\n        fragColor = vec4(1.0); // Currently set to white\n\n        // Check if we are inside the iris\n        if (isInIris(uv, h, v, innerEyeSize)) \n        {\n        \n            /*\n                Edit the code here to change the iris. (The blue part of the eye)\n                Change the fragcolor value below\n            */\n            fragColor = vec4(0.0, 0.0, 1.0, 1.0); // Currently set to blue\n\n            // Check if we are inside the pupil\n            if (isInPupil(uv, h, v, pupilSize)) \n            {\n            \n                /*\n                    Edit the code here to change the pupil. \n                    Change the fragcolor value below\n                */\n                fragColor = vec4(0.0); // Currently set to black\n            }\n        }\n    } \n    else \n    {\n    \n        /*\n            Edit the code here to edit what is outside the eye entirely. \n            Change the fragcolor value below\n        */\n        fragColor = vec4(0.0); // Currently set to black\n    }\n}","name":"Image","description":"","type":"image"}]}