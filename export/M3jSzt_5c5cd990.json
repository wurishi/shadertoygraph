{"ver":"0.1","info":{"id":"M3jSzt","date":"1710965677","viewed":60,"name":"(kinda) Planet system","username":"DiggerDwarf","description":"Play around with constants it's fun","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["3d","planet","rotation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define sun_size      0.7\n#define sun_color     vec4(1, 0.58, 0.09, 1.)\n\n#define earth_size    0.3\n#define earth_orbit   1.0\n#define earth_speed   0.7\n#define earth_color   vec4(0.19, 0.63, 0.86, 1.)\n\n#define mars_size    0.25\n#define mars_orbit   1.55\n#define mars_speed   1.2\n#define mars_color   vec4(0.78, 0.36, 0.09, 1.)\n\n#define mm_size    0.1\n#define mm_orbit   0.5\n#define mm_speed   -4.0\n#define mm_color   vec4(1.0, 1.0, 1.0, 1.)\n\n#define jupiter_size    0.5\n#define jupiter_orbit   2.3\n#define jupiter_speed   0.4\n#define jupiter_color   vec4(0.52, 0.47, 0.32, 1.)\n\n\nfloat sdSphere(vec3 o, float d, vec3 p) {\n    return length(p-o)-d;    \n}\n\nvec3 rotated_x(vec3 v, float a) {\n    return vec3(\n        v.x,\n        (v.y*cos(a)) - (v.z*sin(a)),\n        (v.y*sin(a)) + (v.z*cos(a))\n    );\n}\nvec3 rotated_y(vec3 v, float a) {\n    return vec3(\n        (v.x*cos(a))+(v.z*sin(a)),\n        v.y,\n        (v.z*cos(a))-(v.x*sin(a))\n    );\n}\nvec3 rotated_z(vec3 v, float a) {\n    return vec3(\n        (v.x*cos(a))+(v.y*sin(a)),\n        (v.y*cos(a))-(v.x*sin(a)),\n        v.z\n    );\n}\n\nfloat map(vec3 p) {\n    float d_sun = sdSphere(vec3(0.0), sun_size, p);\n\n    float d_earth = sdSphere(rotated_z(vec3(earth_orbit, 0.0, 0.0), iTime*earth_speed), earth_size, p);\n\n    float d_mars = sdSphere(rotated_z(vec3(mars_orbit, 0.0, 0.0), iTime*mars_speed), mars_size, p);\n    float d_mm = sdSphere(rotated_z(vec3(mm_orbit, 0.0, 0.0), iTime*mm_speed)+rotated_z(vec3(mars_orbit, 0.0, 0.0), iTime*mars_speed), mm_size, p);\n    \n    float d_jupiter = sdSphere(rotated_z(vec3(jupiter_orbit, 0.0, 0.0), iTime*jupiter_speed), jupiter_size, p);\n\n    return min(min(min(min(d_sun, d_earth), d_mars), d_mm), d_jupiter);\n}\n\nvec4 color_map(vec3 p) {\n    float d_sun = sdSphere(vec3(0.0), sun_size, p);\n    vec4 c_sun = (1.-step(0.001, d_sun))*sun_color;\n\n    float d_earth = sdSphere(rotated_z(vec3(earth_orbit, 0.0, 0.0), iTime*earth_speed), earth_size, p);\n    vec4 c_earth = (1.-step(0.001, d_earth))*earth_color;\n\n    float d_mars = sdSphere(rotated_z(vec3(mars_orbit, 0.0, 0.0), iTime*mars_speed), mars_size, p);\n    vec4 c_mars = (1.-step(0.001, d_mars))*mars_color;\n\n    float d_mm = sdSphere(rotated_z(vec3(mm_orbit, 0.0, 0.0), iTime*mm_speed)+rotated_z(vec3(mars_orbit, 0.0, 0.0), iTime*mars_speed), mm_size, p);\n    vec4 c_mm = (1.-step(0.001, d_mm))*mm_color;\n\n    float d_jupiter = sdSphere(rotated_z(vec3(jupiter_orbit, 0.0, 0.0), iTime*jupiter_speed), jupiter_size, p);\n    vec4 c_jupiter = (1.-step(0.001, d_jupiter))*jupiter_color;\n    \n    return vec4(c_sun + c_earth + c_mars + c_mm + c_jupiter);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // constants\n    float pi = 3.141592653;\n    \n    // normalizing and fractionating screen\n    vec2 rep = vec2(1);\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    uv = fract(uv*rep);\n    uv = uv * 2.0 - 1.0;\n    uv.x *= (iResolution.x*rep.y) / (iResolution.y*rep.x);\n\n    vec3 ro = vec3(0, 0, -3);\n    vec3 rd = normalize(vec3(uv, 1));\n\n    ro= rotated_x(ro, -.6);\n    rd = rotated_x(rd, -.6);\n\n    // ro = rotated_y(ro, iTime/2.);\n    // rd = rotated_y(rd, iTime/2.);\n    \n    float t = 0.0;\n    float i;\n    float a;\n    for (i = 0.0 ; i < 50.0 ; i++) {\n        a = map(ro);\n        ro += rd*a;\n        t += length(rd*a);\n        if (a < 0.0000001 || t > 100.0) break;\n    }\n    \n\n\n    fragColor = vec4((color_map(ro)) - (t/11.));\n}","name":"Image","description":"","type":"image"}]}