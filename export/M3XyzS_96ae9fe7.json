{"ver":"0.1","info":{"id":"M3XyzS","date":"1726312746","viewed":39,"name":"actual_blue_noise","username":"gri573","description":"generates a blue noise texture using the void-and-cluster algorithm","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["bluenoise","voidandcluster"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = vec3(texelFetch(iChannel0, ivec2(vec2(noiseResolution) * uv), 0).r) * 10.0 / float(min(iFrame, 10 * noiseResolution.x * noiseResolution.y));\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float hash21(ivec2 loc) {\n    return fract(float(loc.x)/(0.5*sqrt(5.0)+0.5) + float(loc.y)/pow(0.5*sqrt(5.0)+0.5, 2.0));\n}\n\nfloat blur(ivec2 loc) {\n    float val = 0.0;\n    float weight = 0.0;\n    const int sampleRad = int(blurRadius * 3.0) + 1;\n    for (int dx = -sampleRad; dx <= sampleRad; dx++) {\n        for (int dy = -sampleRad; dy <= sampleRad; dy++) {\n            float thisVal = texelFetch(\n                iChannel0,\n                (loc + ivec2(dx, dy) + noiseResolution)%noiseResolution,\n                0\n            ).r;\n            float thisWeight = exp(-float(dx*dx+dy*dy)/(blurRadius*blurRadius));\n            weight += thisWeight;\n            if (thisVal > 0.5) {\n                val += thisWeight;\n            }\n        }\n    }\n    return val / weight + 1e-6 * hash21(loc);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    ivec2 iFragCoord = ivec2(fragCoord);\n    fragColor = texelFetch(iChannel0, iFragCoord, 0);\n    if (all(lessThan(iFragCoord, noiseResolution)) && iFrame/10 < noiseResolution.x * noiseResolution.y) {\n        if (iFrame%10 == 0) {\n            fragColor.g = 10.0;\n            if (fragColor.r < 0.5) fragColor.g = blur(iFragCoord);\n            fragColor.ba = fragCoord;\n        } else if (iFrame%10 < 9) {\n            int offsetAmount = 1<<(iFrame%10-1);\n            ivec2 newMinCoord = ivec2(-1);\n            float minVal = 100.0;\n            for (int k = 0; k < 9; k++) {\n                ivec2 offset = (ivec2(k%3, k/3) - 1) * offsetAmount;\n                ivec2 newCoords = (iFragCoord + offset + 100 * noiseResolution) % noiseResolution;\n                ivec2 thisMinCoord = ivec2(texelFetch(iChannel0, newCoords, 0).ba);\n                float newVal = texelFetch(iChannel0, thisMinCoord, 0).g;\n                if (\n                    newVal < minVal || (\n                        newVal == minVal && (\n                            newMinCoord.x < thisMinCoord.x || (\n                                newMinCoord.x == thisMinCoord.x &&\n                                newMinCoord.y < thisMinCoord.y\n                            )\n                        )\n                    )\n                ) {\n                    newMinCoord = thisMinCoord;\n                    minVal = newVal;\n                }\n            }\n            fragColor.ba = vec2(newMinCoord) + 0.1;\n        } else if (iFrame%10 == 9) {\n            if (ivec2(fragColor.ba) == iFragCoord) {\n                fragColor.r = float(iFrame/10) + 1.0;\n            }\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"const ivec2 noiseResolution = ivec2(64, 64);\nconst float blurRadius = 1.8;","name":"Common","description":"","type":"common"}]}