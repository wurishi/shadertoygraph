{"ver":"0.1","info":{"id":"MX2BRK","date":"1729705938","viewed":171,"name":"Dual Flow Quad Truchet","username":"sylvain69780","description":"Drag the mouse to change view.","likes":18,"published":3,"flags":0,"usePreview":0,"tags":["truchet"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n    Dual Flow Quad Truchet\n    ----------------------\n    \n    Using polar coordinates for a snake like animation\n    \n    References :\n    \n    The Art of Code - Shader Coding: Truchet Tiling Explained!\n    https://www.youtube.com/watch?v=2R7h76GoIJM\n    \n    Square Truchet Flow - Shane - and others\n    https://www.shadertoy.com/view/XtfyDX\n    \n    Shaders published on Shadertoy (> 600)\n    https://www.shadertoy.com/results?query=tag%3Dtruchet\n    \n*/\n\n#define AA(x) smoothstep(e,-e,x)\n\n// IQ https://iquilezles.org/articles/distfunctions2d/\nfloat sdVesica(vec2 p, float r, float d)\n{\n    p = abs(p);\n    float b = sqrt(r*r-d*d);\n    return ((p.y-b)*d>p.x*b) ? length(p-vec2(0.0,b))\n                             : length(p-vec2(-d,0.0))-r;\n}\n\n// Dave Hoskins https://www.shadertoy.com/view/4djSRW \nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float res = 400.;\n    vec2 uv = (fragCoord-.5*iResolution.xy)/res;     \n    uv *= 2.0;\n    float e = 2.0/res;\n    if ( iMouse.z > 0. ) {\n        vec2 mouse = (iMouse.xy -.5*iResolution.xy)/iResolution.y;\n        float z = (1.+mouse.x);\n        uv *= z;\n        uv.y -= mouse.y;\n        e *= z;\n    }\n    float time = iTime;\n    uv += time*.1;\n    // cell coordinates, id and parity    \n    vec2 id = floor(uv);\n    float parity = mod(id.x+id.y,2.0)*2.0-1.0; \n    vec2 p = fract(uv);\n    // random flip\n    float rnd = hash12(id)+0.1;\n    if ( rnd > 0.5 ) \n        p = vec2(1.-p.y,p.x); \n    // mirrors diagonally\n    p = p.x+p.y < 1.0 ? p : 1.-p;  \n    // polar coordinates\n    float r = length(p);\n    float a = atan(p.x,p.y);\n    // get side (green / red)\n    float side = sign(r-.5)*parity*sign(rnd-.5);    \n    vec3 color = vec3(1.,.4,.4);\n    color  = side > 0. ? color : color.yxz;  \n    // polar repetition count - 2 in inner track, 3 in outer track\n    float rep = r > 0.5 ? 3.: 2.; \n    // animation\n    float atime = .7*time * side + 1.57;\n    a -= parity * sign(rnd-.5) * fract(atime+sin(atime))*1.57/rep;\n    // track color\n    vec3 track = vec3(1);\n    // dots\n    float arc = sign(r-.5)*.2*1.57*(fract(rep*a/1.57)-.5);\n    vec2 q = vec2(abs(r-.5)-.1,arc);\n    float dots = sdVesica(q,.08,.06);\n    track = mix(track,vec3(0),AA(dots-.08));   \n    track = mix(track,color,AA(dots-.055));   \n    track = mix(track,vec3(0),AA(dots-.025));   \n    track = mix(track,vec3(1),AA(length(q-vec2(.015))-.030));   \n    // shading\n    float h = 12.*(abs(r-.5)-.1)+.05; \n    float li = sqrt(max(0.,1.-h*h));\n    // background\n    vec3 col = clamp(1.0-(0.8+.2*sin(60.*uv.x))*cos((2.0*uv.x+uv.y)*50.),0.0,1.0)*mix(color.yxz,vec3(1),4.*abs(abs(r-.5)-.2));\n    // blending\n    float mask = AA(abs(r-.5)-.2);\n    col = mix(col,track*li,mask);\n    // vignette\n    col *= cos(2.*length((fragCoord/iResolution.xy)-.5));\n    fragColor = vec4(sqrt(col),1.0);\n}\n","name":"Image","description":"","type":"image"}]}