{"ver":"0.1","info":{"id":"4dScWG","date":"1493472530","viewed":207,"name":"Bad Dream","username":"slerpy","description":"I wrote a working raytracer, tortured it to death and gave it some music.\n\nThe music might still be loading while the shader has already started, so I recommend resetting the whole demo as soon as you hear the music kick into action.","likes":2,"published":1,"flags":64,"usePreview":0,"tags":["3d","raytracer","music"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4slSzn","filepath":"https://soundcloud.com/virgill/virgill-wannabe-a-64","previewfilepath":"https://soundcloud.com/virgill/virgill-wannabe-a-64","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// map function is based of this shader:\n// https://www.shadertoy.com/view/ldyGWm\n\nfloat map(vec3 q){\n \tvec3 p = abs(fract(q/3.)*3. - 1.5);\n \tfloat d = min(max(p.x, p.y), min(max(p.y, p.z), max(p.x, p.z))) - 1. + .05;\n    p =  abs(fract(q*2.)*.5 - .25);\n \treturn max(d, min(max(p.x, p.y), min(max(p.y, p.z), max(p.x, p.z))) - 1./18. - .015);\n}\n\nfloat tracer(in vec3 ro, in vec3 rd)\n{\n    float t = .0;\n    for(int i=0; i<8; i++) {\n        float m = map(ro+rd*t);\n        if(m < 0. || t > 1.)break;\n        t += m;\n    }\n    return t;\n}\n\nvec3 normal(vec3 p, float k)\n{\n    vec2 e = k * vec2(1,0); \n    return normalize(vec3(\n        map(p + e.xyy) - map(p - e.xyy),\n        map(p + e.yxy) - map(p - e.yxy),\n        map(p + e.yyx) - map(p - e.yyx)\n    ));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (2.*fragCoord.xy-iResolution.xy)/iResolution.y;\n    \n    float ang = atan(uv.x,uv.y)+iTime/16.;\n    uv = vec2(sin(ang),cos(ang))*length(uv);\n    \n    vec3 ro = vec3(vec2(0.),iTime/8.);\n    vec3 rd = vec3(iTime/24.,uv);\n    \n    float t = tracer(ro, rd);\n    \n    vec3 sp = ro + rd * t;\n    vec3 sn = normal(sp, .001);\n    \n    vec3 ld = normalize(rd+vec3(.5));\n    float angle = (1.+dot(sn,ld))/2.;\n    \n    fragColor = vec4(angle - pow(t/10.,.5));\n    fragColor = fract( 2. * fragColor * cos(200.*iTime*0.01308996938995747182692768076366) );\n    fragColor.r = max(.3-fragColor.r,fragColor.r);\n    fragColor.rgb -= sn.rbb;\n    fragColor *= min(.1 * iTime, 1.);\n}\n","name":"Image","description":"","type":"image"}]}