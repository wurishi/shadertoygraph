{"ver":"0.1","info":{"id":"l3cGDn","date":"1716321865","viewed":46,"name":"Ray vs Sphere ray tracing","username":"CheerWizard","description":"Ray sphere intersection, using ray sphere equations.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["intersections"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = 2.0 * fragCoord/iResolution.xy - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    vec3 ro = vec3(0, 0, 0);\n    vec3 rd = normalize(vec3(uv, 1));\n    float r = 1.0;\n    vec3 c = vec3(0, 0, 3);\n    // ray vs sphere intersection - put ray equation into sphere equation.\n    float A = rd.x * rd.x + rd.y * rd.y + rd.z * rd.z;\n    float B = 2.0 * ro.x * rd.x - 2.0 * rd.x * c.x + 2.0 * ro.y * rd.y - 2.0 * rd.y * c.y + 2.0 * ro.z * rd.z - 2.0 * rd.z * c.z;\n    float C = ro.x * ro.x + ro.y * ro.y + ro.z * ro.z - 2.0 * ro.x * c.x - 2.0 * ro.y * c.y - 2.0 * ro.z * c.z + c.x * c.x + c.y * c.y + c.z * c.z - r * r;\n    float D = sqrt(B * B - 4.0 * A * C);\n    if (D > 0.0) {\n        float t1 = (- B - D) / (2.0 * A);\n        float t2 = (- B + D) / (2.0 * A);\n        float metallic = 0.5;\n        float roughness = 0.5;\n        float ao = (t1 - c.z) / (-r);\n        vec3 color = vec3(0.75, 0.0, 0.0);\n        vec3 lightPos = vec3(0.0, 1.0, 3.0);\n        vec3 lightColor = vec3(1.0, 1.0, 1.0);\n        vec3 l = normalize(c - lightPos); \n        vec3 p = ro + rd * t1; \n        vec3 n = normalize(p - c);\n        vec3 lightDiffuse = clamp(dot(n, l), 0.0, 1.0) * lightColor;\n        vec3 resultColor = lightDiffuse * color;\n        fragColor = vec4(resultColor, 1.0);\n    }\n    else {\n        fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    }\n}","name":"Image","description":"","type":"image"}]}