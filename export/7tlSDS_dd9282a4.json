{"ver":"0.1","info":{"id":"7tlSDS","date":"1626470140","viewed":67,"name":"My PBR Nightmare","username":"krahenke","description":"PBR with IBL implemented according to learnopengl.com. Used several shaders on shadertoy for reference, huge thanks especially to ivansafrin. This is still a major mess and needs to be cleaned up and it is more likely than not that it can be faster.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["pbr"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","previewfilepath":"/media/ap/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int REFLECTION_SAMPLES = 32;\nconst int BRDF_SAMPLES = 16;\nconst float STEP_SIZE = 0.1;\n\nvec2 sceneSDF(in vec3 p)\n{\n    return vec2(sdSphere(vec3(p), 1.3), 1.0);\n}\n\nfloat sphereDistance(in vec3 pos, in vec3 camPos, float r)\n{\n    return length(pos - camPos) - r;\n}\n\nfloat mapSdfScene(in vec3 p)\n{\n    float sphere = sphereDistance(p, vec3(0.0), 1.0);\n    \n    return sphere;\n}\n\nvec3 calcualteNormal(in vec3 p)\n{\n    const vec3 step = vec3(0.001, 0.0, 0.0);\n    \n    float gradientX = mapSdfScene(p + step.xyy) - mapSdfScene(p - step.xyy);\n    float gradientY = mapSdfScene(p + step.yxy) - mapSdfScene(p - step.yxy);\n    float gradientZ = mapSdfScene(p + step.yyx) - mapSdfScene(p - step.yyx);\n    \n    return normalize(vec3(gradientX, gradientY, gradientZ));\n}\n\nvec3 filteredReflection(vec3 V, vec3 N, float roughness)\n{\n    float totalWeight = 0.0;   \n    vec3 prefilteredColor = vec3(0.0);   \n    \n    const int REFLECTION_SAMPLES = 256;\n   \n  \tfor(int i = 0; i < REFLECTION_SAMPLES; ++i)\n    {\n        vec2 Xi = hammersley(i, REFLECTION_SAMPLES);\n        vec3 H  = importanceSampleGGX(Xi, N, roughness);\n        vec3 L  = normalize(2.0 * dot(V, H) * H - V);\n\n        float NdotL = max(dot(N, V), 0.0);\n        if(NdotL > 0.0)\n        {\n            prefilteredColor += texture(iChannel0, L).xyz * 2.0 * NdotL;\n            totalWeight      += NdotL;\n        }\n    }\n    prefilteredColor = prefilteredColor / totalWeight;\n    return prefilteredColor;    \n}\n\nvec2 integrateBRDF(float NdotV, float roughness) {\n    vec3 V;\n    V.x = sqrt(1.0 - NdotV*NdotV);\n    V.y = 0.0;\n    V.z = NdotV;\n\n    float A = 0.0;\n    float B = 0.0;\n\n    vec3 N = vec3(0.0, 0.0, 1.0);\n\n    for(int i = 0; i < BRDF_SAMPLES; ++i)\n    {\n        vec2 Xi = hammersley(i, BRDF_SAMPLES);\n        vec3 H  = importanceSampleGGX(Xi, N, roughness);\n        vec3 L  = normalize(2.0 * dot(V, H) * H - V);\n\n        float NdotL = max(L.z, 0.0);\n        float NdotH = max(H.z, 0.0);\n        float VdotH = max(dot(V, H), 0.0);\n\n        if(NdotL > 0.0)\n        {\n            float G = geometrySmith(N, V, L, roughness);\n            float G_Vis = (G * VdotH) / (NdotH * NdotV);\n            float Fc = pow(1.0 - VdotH, 5.0);\n\n            A += (1.0 - Fc) * G_Vis;\n            B += Fc * G_Vis;\n        }\n    }\n    A /= float(BRDF_SAMPLES);\n    B /= float(BRDF_SAMPLES);\n    return vec2(A, B);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const int MAX_MARCHING_STEPS = 128;\n\tconst float MAX_DISTANCE = 40.0;\n    int nrStepsTaken = 0;\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec3 lightPosition = vec3(0.9, 1.8, 2.5);\n    vec3 lightColor = vec3(23.47, 21.31, 20.79);\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    float rotX = (iMouse.x / iResolution.x) * 2.0 * 3.14;\n    float rotY = (iMouse.y / iResolution.y) * 3.14;\n    vec2 cubeMapUV = 2.5 * (fragCoord.xy - 0.5 * iResolution.xy) / iResolution.xx;\n    \n    // vec3 camO = vec3(cos(rotX), cos(rotY), sin(rotX));\n    vec3 cameraPosition = vec3(0.0, 0.0, 2.0);\n\tvec3 cameraTarget = vec3(0.0, 0.0, 0.0);\n    vec3 directionUp = vec3(0.0, 1.0, 0.0);\n    \n    mat3 rotation = rotationXY( ( iMouse.xy - iResolution.xy * 0.5 ).yx * vec2( 0.01, -0.01 ) );\n\tcameraPosition = rotation * cameraPosition;\n    \n    vec3 cameraDirection = normalize(cameraTarget - cameraPosition);\n    vec3 cameraRight = normalize(cross(directionUp, cameraPosition));\n    vec3 cameraUp = -cross(cameraDirection, cameraRight);\n    \n    vec2 screenPos = -1.0 + 2.0 * gl_FragCoord.xy / iResolution.xy; \n    // screenPos can range from -1 to 1\n\tscreenPos.x *= iResolution.x / iResolution.y; \n    // Correct aspect ratio\n    vec3 rayDirection = normalize(cameraRight * screenPos.x \n                                  + cameraUp * screenPos.y \n                                  + cameraDirection);\n                                  \n    float totalDistance = 0.0;\n    vec3 rayPos = cameraPosition;\n    float currentDistance = EPSILON;\n    float currentMaterial = -1.0;\n    \n    for(int i = 0; i < MAX_MARCHING_STEPS; i++)\n    {\n        if(currentDistance < EPSILON || currentDistance > MAX_DISTANCE)\n            break;\n        \n        vec2 sdfSample = sceneSDF(rayPos);\n        currentDistance = sdfSample.x;\n        currentMaterial = sdfSample.y;\n        totalDistance += currentDistance;\n        \n        rayPos += currentDistance * rayDirection;\n        nrStepsTaken = nrStepsTaken + 1;\n    }\n    \n    if (currentDistance < EPSILON)\n    {\n        vec3 N = calcualteNormal(rayPos);\n        vec3 V = normalize(cameraPosition - rayPos);\n        \n        vec3 albedo = SampleSphere(rayPos, N, iChannel1).rgb;\n        albedo = vec3(pow(albedo.r, 2.2), pow(albedo.g, 2.2), pow(albedo.b, 2.2));\n        \n        float roughness = SampleSphere(rayPos, N, iChannel2).r * 0.6f;\n        float metallic = 0.8;\n        \n        vec3 F0 = vec3(0.04);\n        F0 = mix(F0, albedo, metallic);\n        \n        vec3 Lo = vec3(0.0);\n        \n        vec3 L = normalize(lightPosition - rayPos);\n        vec3 H = normalize(V + L);\n        vec3 F = fresnelSchlickRoughness(max(dot(N, V), 0.0), F0, roughness);\n        \n        vec3 prefilteredColor = filteredReflection(V, N, roughness);\n        vec3 R = reflect(V, N);\n        \n        vec2 brdf = integrateBRDF(dot(V, N), roughness);\n        \n        vec3 irradiance = vec3(0.0);\n        vec3 localUp = directionUp;\n        vec3 right = cross(localUp, N);\n        localUp = cross(N, right);\n        float sampleCount = 0.0;\n        \n        for(float phi = 0.0; phi < 2.0 * PI; phi += STEP_SIZE)\n        {\n            for(float theta = 0.0; theta < 0.5 * PI; theta += STEP_SIZE)\n            {\n                vec3 tangentSample = vec3(sin(theta) * cos(phi),  sin(theta) * sin(phi), cos(theta));\n                vec3 sampleVec = tangentSample.x * right + tangentSample.y * localUp + tangentSample.z * N; \n\n                irradiance += texture(iChannel0, sampleVec).xyz * 2.0 * cos(theta) * sin(theta);\n                sampleCount++;\n            }\n        }\n        irradiance = PI * irradiance * (1.0 / sampleCount);\n        \n        float dist = 1.3;\n        float attenuation = 1.0 / (dist*dist);\n        vec3 radiance = lightColor * attenuation;\n        vec3 specular = prefilteredColor * (F * brdf.x + brdf.y);\n        \n        vec3 kS = F;\n        vec3 kD = vec3(1.0) - kS;\n        kD *= 1.0 - metallic;\n        \n        vec3 ambient = irradiance * albedo;\n        ambient = kD * ambient + specular;\n        \n        float NDF = distributionGGX(N, H, roughness);\n        float G = geometrySmith(N, V, L, roughness);\n                \n        vec3 numerator    = NDF * G * F;\n        float denominator = 4.0 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0);\n        \n        float NdotL = max(dot(N, L), 0.0);                \n        Lo += (kD * albedo / PI + specular) * radiance * NdotL; \n        \n        vec3 color = ambient + Lo;\n        \n        color = color / (color + vec3(1.0));\n        color = pow(color, vec3(1.0/2.2));\n\n        // background mixing fuckery\n        vec3 dir =  normalize(cubeMapUV.x * cameraRight + cubeMapUV.y * cameraUp + cameraDirection);\n        vec4 bgColor = texture(iChannel0, dir);\n\n        fragColor = mix(bgColor, vec4(color, 1), smoothstep(.0, .15, dot(-rayDirection, N) - .1));\n    }\n    else\n    {\n        // Output to screen\n        vec3 dir =  normalize(cubeMapUV.x * cameraRight + cubeMapUV.y * cameraUp + cameraDirection);\n        fragColor = texture(iChannel0, dir);\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define EPSILON 0.001\n#define TWO_PI 6.28\n#define PI 3.14\n\nfloat rand(float n){return fract(sin(n) * 43758.5453123);}\nfloat rand(vec2 n) { \n\treturn fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\nfloat mod289(float x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 mod289(vec4 x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 perm(vec4 x){return mod289(((x * 34.0) + 1.0) * x);}\n\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat dot2( in vec3 v ) { return dot(v,v); }\n\nmat3 rotationXY(in vec2 angle)\n{\n\tvec2 c = cos( angle );\n\tvec2 s = sin( angle );\n\t\n\treturn mat3(\n\t\tc.y      ,  0.0, -s.y,\n\t\ts.y * s.x,  c.x,  c.y * s.x,\n\t\ts.y * c.x, -s.x,  c.y * c.x\n\t);\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return length(max(d,0.0))\n         + min(max(d.x,max(d.y,d.z)),0.0); // remove this line for an only partially signed sdf \n}\n\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n{\n  vec3 d = abs(p) - b;\n  return length(max(d,0.0)) - r\n         + min(max(d.x,max(d.y,d.z)),0.0); // remove this line for an only partially signed sdf \n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\nfloat sdCylinder( vec3 p, vec3 c )\n{\n  return length(p.xz-c.xy)-c.z;\n}\n\nfloat sdCone( vec3 p, vec2 c )\n{\n    // c must be normalized\n    float q = length(p.xy);\n    return dot(c,vec2(q,p.z));\n}\n\nfloat sdPlane( vec3 p, vec4 n )\n{\n  // n must be normalized\n  return dot(p,n.xyz) + n.w;\n}\n\nfloat sdHexPrism( vec3 p, vec2 h )\n{\n    const vec3 k = vec3(-0.8660254, 0.5, 0.57735);\n    p = abs(p);\n    p.xy -= 2.0*min(dot(k.xy, p.xy), 0.0)*k.xy;\n    vec2 d = vec2(\n       length(p.xy-vec2(clamp(p.x,-k.z*h.x,k.z*h.x), h.x))*sign(p.y-h.x),\n       p.z-h.y );\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n\nfloat sdTriPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n    return max(q.z-h.y,max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5);\n}\n\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h ) - r;\n}\n\nfloat sdVerticalCapsule( vec3 p, float h, float r )\n{\n    p.y -= clamp( p.y, 0.0, h );\n    return length( p ) - r;\n}\n\nfloat sdCappedCylinder( vec3 p, vec2 h )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat sdRoundedCylinder( vec3 p, float ra, float rb, float h )\n{\n    vec2 d = vec2( length(p.xz)-2.0*ra+rb, abs(p.y) - h );\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0)) - rb;\n}\n\nfloat sdCappedCone( in vec3 p, in float h, in float r1, in float r2 )\n{\n    vec2 q = vec2( length(p.xz), p.y );\n    \n    vec2 k1 = vec2(r2,h);\n    vec2 k2 = vec2(r2-r1,2.0*h);\n    vec2 ca = vec2(q.x-min(q.x,(q.y < 0.0)?r1:r2), abs(q.y)-h);\n    vec2 cb = q - k1 + k2*clamp( dot(k1-q,k2)/dot2(k2), 0.0, 1.0 );\n    float s = (cb.x < 0.0 && ca.y < 0.0) ? -1.0 : 1.0;\n    return s*sqrt( min(dot2(ca),dot2(cb)) );\n}\n\nfloat sdRoundCone( in vec3 p, in float r1, float r2, float h )\n{\n    vec2 q = vec2( length(p.xz), p.y );\n    \n    float b = (r1-r2)/h;\n    float a = sqrt(1.0-b*b);\n    float k = dot(q,vec2(-b,a));\n    \n    if( k < 0.0 ) return length(q) - r1;\n    if( k > a*h ) return length(q-vec2(0.0,h)) - r2;\n        \n    return dot(q, vec2(a,b) ) - r1;\n}\n\nfloat sdEllipsoid( in vec3 p, in vec3 r )\n{\n    float k0 = length(p/r);\n    float k1 = length(p/(r*r));\n    return k0*(k0-1.0)/k1;\n}\n\nfloat sdOctahedron( in vec3 p, in float s)\n{\n    p = abs(p);\n    float m = p.x+p.y+p.z-s;\n    vec3 q;\n         if( 3.0*p.x < m ) q = p.xyz;\n    else if( 3.0*p.y < m ) q = p.yzx;\n    else if( 3.0*p.z < m ) q = p.zxy;\n    else return m*0.57735027;\n    \n    float k = clamp(0.5*(q.z-q.y+s),0.0,s); \n    return length(vec3(q.x,q.y-s+k,q.z-k)); \n}\n\nfloat udTriangle( vec3 p, vec3 a, vec3 b, vec3 c )\n{\n    vec3 ba = b - a; vec3 pa = p - a;\n    vec3 cb = c - b; vec3 pb = p - b;\n    vec3 ac = a - c; vec3 pc = p - c;\n    vec3 nor = cross( ba, ac );\n\n    return sqrt(\n    (sign(dot(cross(ba,nor),pa)) +\n     sign(dot(cross(cb,nor),pb)) +\n     sign(dot(cross(ac,nor),pc))<2.0)\n     ?\n     min( min(\n     dot2(ba*clamp(dot(ba,pa)/dot2(ba),0.0,1.0)-pa),\n     dot2(cb*clamp(dot(cb,pb)/dot2(cb),0.0,1.0)-pb) ),\n     dot2(ac*clamp(dot(ac,pc)/dot2(ac),0.0,1.0)-pc) )\n     :\n     dot(nor,pa)*dot(nor,pa)/dot2(nor) );\n}\n\nfloat udQuad( vec3 p, vec3 a, vec3 b, vec3 c, vec3 d )\n{\n    vec3 ba = b - a; vec3 pa = p - a;\n    vec3 cb = c - b; vec3 pb = p - b;\n    vec3 dc = d - c; vec3 pc = p - c;\n    vec3 ad = a - d; vec3 pd = p - d;\n    vec3 nor = cross( ba, ad );\n\n    return sqrt(\n    (sign(dot(cross(ba,nor),pa)) +\n     sign(dot(cross(cb,nor),pb)) +\n     sign(dot(cross(dc,nor),pc)) +\n     sign(dot(cross(ad,nor),pd))<3.0)\n     ?\n     min( min( min(\n     dot2(ba*clamp(dot(ba,pa)/dot2(ba),0.0,1.0)-pa),\n     dot2(cb*clamp(dot(cb,pb)/dot2(cb),0.0,1.0)-pb) ),\n     dot2(dc*clamp(dot(dc,pc)/dot2(dc),0.0,1.0)-pc) ),\n     dot2(ad*clamp(dot(ad,pd)/dot2(ad),0.0,1.0)-pd) )\n     :\n     dot(nor,pa)*dot(nor,pa)/dot2(nor) );\n}\n\nfloat opOnion( in float sdf, in float thickness )\n{\n    return abs(sdf)-thickness;\n}\n\nfloat opExtrusion( in vec3 p, in float sd, in float h )\n{\n    float d = sd;\n    vec2 w = vec2( d, abs(p.z) - h );\n    return min(max(w.x,w.y),0.0) + length(max(w,0.0));\n}\n\nfloat opUnion( float d1, float d2 ) { return min(d1,d2); }\nvec2 opUnion(vec2 d1, vec2 d2)\n{ \n    if (d1.x < d2.x)\n        return d1;\n    return d2;\n}\nfloat opSubtraction( float d1, float d2 ) { return max(-d1,d2); }\nfloat opIntersection( float d1, float d2 ) { return max(d1,d2); }\n\nfloat opSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\n\nfloat opSmoothSubtraction( float d1, float d2, float k ) {\n    float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\n    return mix( d2, -d1, h ) + k*h*(1.0-h); }\n\nfloat opSmoothIntersection( float d1, float d2, float k ) {\n    float h = clamp( 0.5 - 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) + k*h*(1.0-h); }\n\nvec2 getUVSpherical(vec3 p, vec3 p0)\n{\n    p -= p0;\n    float r = length(p);\n\tfloat theta = atan( p.z , p.x ); \n\tfloat phi = acos( -p.y / r );\n\t\n\treturn vec2(0.5 * theta / PI + 0.5, phi / PI);\n}\n\nvec2 getUVCubic(vec3 p, vec3 p0)\n{\n    // Center the surface position about the zero point.\n    p -= p0;\n    \n\tvec3 absp = abs(p);\n    \n    vec2 uv = ((absp.x>=absp.y)&&(absp.x>=absp.z)) ? (0.5*p.zy)/(p.x) : ((absp.y>=absp.z)&&(absp.y>=absp.x)) ? (0.5*p.xz)/(p.y) : (-0.5*p.xy)/(p.z);\n  \n    if( ((p.x<0.)&&(absp.x>=absp.y)&&(absp.x>=absp.z)) || ((p.y<0.)&&(absp.y>=absp.z)&&(absp.y>=absp.x)) || ((p.z>0.)&&(absp.z>=absp.x)&&(absp.z>=absp.y)) ) uv.y*=-1.;\t\t\t \n\treturn (uv+0.5);\t\n}\n\nvec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvec4 SampleSphere(vec3 p, vec3 n, sampler2D sampler)\n{\n    p = fract(p * 0.5 +0.5);\n    \n    float sw = 0.1;\n    vec3 stitchingFade = vec3(1.)-smoothstep(vec3(0.5-sw),vec3(0.5),abs(p-0.5));\n    \n    float fTotal = abs(n.x)+abs(n.y)+abs(n.z);\n    vec4 cX = abs(n.x)*texture(sampler,p.zy);\n    vec4 cY = abs(n.y)*texture(sampler,p.xz);\n    vec4 cZ = abs(n.z)*texture(sampler,p.xy);\n    \n    return  vec4(stitchingFade.y*stitchingFade.z*cX.rgb\n                +stitchingFade.x*stitchingFade.z*cY.rgb\n                +stitchingFade.x*stitchingFade.y*cZ.rgb,cX.a+cY.a+cZ.a)/fTotal;\n}\n\nfloat distributionGGX(in vec3 N, in vec3 H, in float a)\n{\n    float a2     = a*a;\n    float NdotH  = max(dot(N, H), 0.0);\n    float NdotH2 = NdotH*NdotH;\n\t\n    float nom    = a2;\n    float denom  = (NdotH2 * (a2 - 1.0) + 1.0);\n    denom        = PI * denom * denom;\n\t\n    return nom / denom;\n}\n\nfloat geometrySchlickGGX(in float NdotV, in float k)\n{\n    float nom   = NdotV;\n    float denom = NdotV * (1.0 - k) + k;\n\t\n    return nom / denom;\n}\n  \nfloat geometrySmith(in vec3 N, in vec3 V, in vec3 L, in float k)\n{\n    float NdotV = max(dot(N, V), 0.0);\n    float NdotL = max(dot(N, L), 0.0);\n    float ggx1 = geometrySchlickGGX(NdotV, k);\n    float ggx2 = geometrySchlickGGX(NdotL, k);\n\t\n    return ggx1 * ggx2;\n}\n\nvec3 fresnelSchlick(in float cosTheta, in vec3 F0)\n{\n    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);\n}\n\nvec3 fresnelSchlickRoughness(in float cosTheta, in vec3 F0, in float roughness)\n{\n    return F0 + (max(vec3(1.0 - roughness), F0) - F0) * pow(max(1.0 - cosTheta, 0.0), 5.0);\n}\n\nfloat vanDerCorpus(int n, int base) {\n    float invBase = 1.0 / float(base);\n    float denom   = 1.0;\n    float result  = 0.0;\n\n    for(int i = 0; i < 32; ++i)\n    {\n        if(n > 0)\n        {\n            denom   = mod(float(n), 2.0);\n            result += denom * invBase;\n            invBase = invBase / 2.0;\n            n       = int(float(n) / 2.0);\n        }\n    }\n\n    return result;\n}\n\nvec2 hammersley(int i, int N) {\n    return vec2(float(i)/float(N), vanDerCorpus(i, 2));\n}  \n\nvec3 importanceSampleGGX(vec2 Xi, vec3 N, float roughness) {\n    float a = roughness*roughness;\n\t\n    float phi = 2.0 * PI * Xi.x;\n    float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a*a - 1.0) * Xi.y));\n    float sinTheta = sqrt(1.0 - cosTheta*cosTheta);\n\t\n    vec3 H;\n    H.x = cos(phi) * sinTheta;\n    H.y = sin(phi) * sinTheta;\n    H.z = cosTheta;\n\n    vec3 up        = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);\n    vec3 tangent   = normalize(cross(up, N));\n    vec3 bitangent = cross(N, tangent);\n\t\n    vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;\n    return normalize(sampleVec);\n}  ","name":"Common","description":"","type":"common"}]}