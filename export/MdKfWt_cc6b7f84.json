{"ver":"0.1","info":{"id":"MdKfWt","date":"1531125184","viewed":221,"name":"Fourier transform visualizer","username":"tbabb","description":"Columns sum to f(t) (drawn horizontally at the top). Rows sum to F(s) (drawn vertically to the right). \n\nf(t) is a displaced Gaussian curve. Drag x to change the displacement and y to change the spread.\n\nF(t) is a cosine curve with a Gaussian envelope.","likes":7,"published":1,"flags":48,"usePreview":0,"tags":["math","fouriertransform"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define CENTER_PT vec2(0,0)\n#define WINDOW_W  32.\n\n\nstruct GaussianPulse {\n    float ctr;\n    float spread;\n    float frequency;\n    float phase;\n};\n\n\nvec3 complex2color(in vec2 c) {\n    vec3 POS_I = vec3(1.,0.7,0.);\n    vec3 NEG_I = vec3(1.) - POS_I;\n    vec3 realcolor  = mix(vec3(0.), vec3(1.), c.x * 0.5 + 0.5);\n    vec3 cplexcolor = 2. * mix(NEG_I, POS_I, c.y * 0.5 + 0.5);\n    return 0.5 * realcolor * cplexcolor;\n}\n\nvec2 f(float x, float ctr, float spread, float freq, float phase) {\n    float envelope = exp(-spread * pow(x - ctr, 2.));\n    float real = cos(freq * x) * envelope;\n    float imag = sin(freq * x) * envelope;\n    return vec2(real, imag);\n}\n\n\nvec2 F(float x, float ctr, float spread, float freq, float phase) {\n\tfloat envelope = exp(-pow(freq * x, 2.) / (4. * spread));\n    float real = cos(ctr * (freq + x)) * envelope;\n    float imag = sin(ctr * (freq + x)) * envelope;\n    return vec2(real, imag);\n}\n\n\nvec2 frag2field_coord(in vec2 xy) {\n    vec2 uv = xy/iResolution.xy;\n    return WINDOW_W * (uv - 0.5) + CENTER_PT;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float aspect = iResolution.y / iResolution.x;\n    vec2 uv  = fragCoord/iResolution.xy;\n    vec2 xy  = frag2field_coord(fragCoord);\n    vec2 mxy = frag2field_coord(iMouse.xy);\n    if (iMouse.xy == vec2(0.)) {\n        mxy = 2. * vec2(cos(iTime), sin(iTime));\n    }\n    \n    float k0 = mxy.x;\n    float w  = (xy.x - k0);\n    float alpha = 1. / max(mxy.y * mxy.y, 0.001);\n    float f_t = exp(-alpha*w*w);\n    vec2  F_t = vec2(cos(k0 * xy.y), sin(k0 * xy.y)) * exp(-xy.y * xy.y / (4. * alpha));\n    \n\t\n    vec2 C = vec2(0);\n    if (uv.y > 1. - 0.05) {\n        C = vec2(f_t, 0);\n    } else if (uv.x > 1. - 0.05 * aspect) {\n        C = F_t;\n    } else {\n        C = f_t * vec2(cos(xy.x * xy.y), sin(xy.x * xy.y));\n    }\n    \n    vec3 outcolor = complex2color(C);\n    \n    // uncomment to see alternate complex color visualization:\n    // outcolor = vec3(C * 0.5 + 0.5, 0.5);\n    \n    fragColor = vec4(pow(outcolor, vec3(1./2.2)), 1.);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // start with previous state\n    vec2 uv   = fragCoord / iResolution.xy;\n    fragColor = texture(iChannel0, fragCoord / iResolution.xy);\n    vec2 xy   = fragCoord - vec2(0.5); // align with integer grid\n    float spread = fragColor.r;\n    float ctr    = fragColor.g;\n    float freq   = fragColor.b;\n    \n    // initialize\n    if (iFrame == 0) {\n        spread = 1.;\n        ctr    = 0.;\n        freq   = 0.;\n    }\n    \n    vec2 muv = iMouse.xy / iResolution.xy;\n    \n    if (iMouse.z < 0. && uv.y >= uv.x) {\n        // dragging upper triangle\n        spread = muv.y;\n        ctr    = muv.x;\n    } else if (iMouse.z < 0. && uv.y < uv.x) {\n        // dragging from lower triangle\n        freq   = muv.y;\n    }\n    \n    // write the result\n    fragColor = vec4(spread, ctr, freq, 1.);\n}","name":"Buf A","description":"","type":"buffer"}]}