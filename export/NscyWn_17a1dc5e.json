{"ver":"0.1","info":{"id":"NscyWn","date":"1653236748","viewed":288,"name":"The Exchange","username":"Xor","description":"[url=https://shadertoy.com/view/sd3czM]The Typist[/url] but with numbers this time","likes":15,"published":1,"flags":32,"usePreview":0,"tags":["3d","bokeh","numbers","lcd","golf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n    \"The Exchange\" by @XorDev\n    \n    Yet another variant of The Count: https://shadertoy.com/view/NdtyzM\n\n\n    Fibonacci Bokeh Pass:\n    \n    Bokeh from: https://www.shadertoy.com/view/fljyWd\n    -6 chars thanks to iapafoto\n*/\nvoid mainImage(out vec4 O, vec2 I)\n{\n    //Resolution for texel calculation\n    vec2 r = iResolution.xy,\n    //Sample point starting at vec2(scale, 0)\n    p = vec2(dot(I+I-r,vec2(1,-5)/5e3), O-=O);\n    \n    //\"i\" approximating the sqrt of the number of iterations.\n    //So i < 16 means roughly 256 texture samples.\n    for(float i=1.; i<16.; i+=1./i)\n        //Rotate sample point by golden angle (for even spacing).\n        p *= mat2(0,.061,1.413, 0)-.737,\n        //Add samples exponentially (a bit like a \"smooth maximum\").\n        O += T/r+p*i/r) * T/r+p*i/r);\n    \n    //Convert back to linear color (making brighter pixel stand out)\n    //Average by total sample weight via alpha channel.\n    O = (sqrt(sqrt(O/O.a))+T/r,log(r.y)))/.7;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":1,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/*\n    LCD Numbers Pass:\n    \n    Essentially just rendering the font texture with perspective.\n*/\nvoid mainImage(out vec4 O, vec2 I)\n{\n    //Rotate coordinates with perspective\n    I = ((I/=iResolution.y)-1.)/(5.-I.y)/.1;\n    //Shortened time variable\n    float t = iTime*.2,\n    //Record y for gradient\n    Y = I.y*.3+.5,\n    //Sign variable\n    S;\n    //Scroll downard\n    I.y += t;\n    \n    //Sample bluenoise texture (one-pixel per number)\n    O = texture(iChannel1,I/512.)-.5;\n    //Generate random number\n    I = (fract(I+I)+vec2(abs(floor(S=mod(t*O.r*5e1+O.g*2e2,18.)-9.)),12))/16.;\n    //Sample numbers with chromatic aberration\n    O = vec4(T-vec2(2e-3,0)).r,T).r,T+vec2(0,2e-3))) *\n    //Pick font color\n    max(sign(S*O.r)*vec4(-1,1,0,0)+Y,.0) *\n    //Apply LCD color effect\n    max(sin((I*=16e2).x+vec4(0,2,4,6))*sin(I.y),0.);;\n    //Make sure the alpha is 1 for bokeh pass!\n    O.a = 1.;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"/*\n    We need to sample textures a lot, so here's a macro for it\n*/\n#define T texture(iChannel0, I","name":"Common","description":"","type":"common"}]}