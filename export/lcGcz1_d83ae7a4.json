{"ver":"0.1","info":{"id":"lcGcz1","date":"1731466055","viewed":82,"name":"truchet pipes","username":"jorge2017a2","description":"truchet pipes","likes":11,"published":1,"flags":8,"usePreview":0,"tags":["truchet","pipes"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//por jorge2017a2\n//truchet pipes\n\n//referencia\n//https://iquilezles.org/articles/distfunctions2d\n\n\n///\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n\n#define S(d,b) smoothstep(antialiasing(1.5),0. , d - (b) )\n#define S2(d,b) smoothstep(8.0*antialiasing(1.5),0.,d - (b) )\n#define S3(d,b) smoothstep(1.0/antialiasing(0.5),0. , d - (b) )\n\n\n#define opU2(d1, d2) ( d1.x < d2.x ? d1 : d2 )\n\n\n#define PI     3.14159265\n#define TWO_PI 6.28318530\n\n\nfloat Sdf_I(float distA, float distB)\n\t{ return max(distA, distB);}\nfloat Sdf_U(float distA, float distB)\n\t{ return min(distA, distB);}\nfloat Sdf_D(float distA, float distB)\n\t{ return max(distA, -distB);}\n\n\nvec3 DFB(vec3 pColObj, vec3 colOut, float distObj )\n{ colOut = mix(colOut,pColObj ,S3( distObj,0.0));\n  colOut = mix(colOut,vec3(0.0),S3(abs( distObj)-0.005,0.0));\n  return colOut;\n}\n\n\n\nvec3 DFS(vec3 pColObj, vec3 colOut, float distObj )\n{ colOut = mix(colOut,pColObj ,S( distObj,0.0)); return colOut;\n  return colOut;\n}\n\n\n\n\nfloat sdBox( in vec2 p, in vec2 b )\n{ vec2 d = abs(p)-b;  return length(max(d,0.0)) + min(max(d.x,d.y),0.0);  }\n\nfloat sdCircle( vec2 p, float r )\n{ return length(p) - r;}\n\n\n\nvec3 tubo01(vec2 p,vec3 colout)\n{\n    \n\nvec2 A,B, med,pr;\nfloat dfin;\nfloat  r1,ang, he ;\n\nA=vec2(0.5,0.902027);\nmed=vec2(0.1216216,0.03378378);\nfloat d11=sdBox(p-A,med);\ncolout= DFB(vec3(0.6), colout, d11);\n\n\n\nA=vec2(0.5033784,0.5);\nmed=vec2(0.06587838,0.4949324);\nfloat d13=sdBox(p-A,med);\ncolout= DFB(vec3(0.65), colout, d13);\n\nA=vec2(0.5,0.0945946);\nmed=vec2(0.1216216,0.03378378);\nfloat d12=sdBox(p-A,med);\ncolout= DFB(vec3(0.5), colout, d12);\n\nA=vec2(0.5,0.902027);\nmed=vec2(0.1216216,0.03378378);\nfloat d14=sdBox(p-A,med);\ncolout= DFB(vec3(0.5), colout, d14);\n\nA=vec2(0.4054054,0.8412162);\nmed=vec2(0.01689189,0.02702703);\nfloat d15=sdBox(p-A,med);\ncolout= DFS(vec3(0.0), colout, d15);\n\nA=vec2(0.605,0.8378378);\nmed=vec2(0.01689189,0.02702703);\nfloat d16=sdBox(p-A,med);\ncolout= DFS(vec3(0.0,0.0,0.0), colout, d16);\n\nA=vec2(0.4004054,0.1587838);\nmed=vec2(0.01689189,0.02702703);\nfloat d17=sdBox(p-A,med);\ncolout= DFS(vec3(0.0,0.0,0.0), colout, d17);\n\n\nA=vec2(0.6054,0.1587838);\nmed=vec2(0.01689189,0.02702703);\nfloat d18=sdBox(p-A,med);\ncolout= DFS(vec3(0.0,0.0,0.0), colout, d18);\n\n\n    return colout;\n}\n\n\n\nvec3 tubo02(vec2 p,vec3 colout)\n{\n    vec2 A,B, med,pr;\nfloat dfin;\nfloat  r1,ang, he ;\n\n\nA=vec2(0.4966216,0.5101351);\nmed=vec2(0.4966216,0.07094595);\nfloat d22=sdBox(p-A,med);\ncolout= DFB(vec3(0.75), colout, d22);\n\n\nA=vec2(0.0945946,0.5033784);\nmed=vec2(0.03209459,0.1266892);\nfloat d21=sdBox(p-A,med);\ncolout= DFB(vec3(0.5), colout, d21);\n\n\nA=vec2(0.9054054,0.5033784);\nmed=vec2(0.02871622,0.1199324);\nfloat d23=sdBox(p-A,med);\ncolout= DFB(vec3(0.5), colout, d23);\n\nA=vec2(0.1554054,0.6114865);\nmed=vec2(0.02871622,0.0152027);\nfloat d24=sdBox(p-A,med);\ncolout= DFS(vec3(0.0), colout, d24);\n\nA=vec2(0.152027,0.40297838);\nmed=vec2(0.02871622,0.0152027);\nfloat d25=sdBox(p-A,med);\ncolout= DFS(vec3(0.0), colout, d25);\n\nA=vec2(0.8445946,0.6107297);\nmed=vec2(0.02871622,0.0152027);\nfloat d26=sdBox(p-A,med);\ncolout= DFS(vec3(0.0), colout, d26);\n\nA=vec2(0.847973,0.4057838);\nmed=vec2(0.02871622,0.0152027);\nfloat d27=sdBox(p-A,med);\ncolout= DFS(vec3(0.0), colout, d27);\n\n    return colout;\n}\n\n\n\nvec3 tubo03(vec2 p,vec3 colout)\n{\nvec2 A,B, med,pr;\nfloat dfin;\nfloat  r1,ang, he ;\n\nA=vec2(0.5,0.5067568);\nmed=vec2(0.4966216,0.0625);\nfloat d31=sdBox(p-A,med);\n\nA=vec2(0.5,0.5);\nmed=vec2(0.06081081,0.4983108);\nfloat d32=sdBox(p-A,med);\nd32=Sdf_U(d31,d32);\ncolout= DFB(vec3(0.65), colout, d32);\n\nA=vec2(0.9054054,0.5);\nmed=vec2(0.03040541,0.1266892);\nfloat d33=sdBox(p-A,med);\ncolout= DFB(vec3(0.5), colout, d33);\n\nA=vec2(0.0945946,0.5033784);\nmed=vec2(0.03040541,0.1266892);\nfloat d34=sdBox(p-A,med);\ncolout= DFB(vec3(0.5), colout, d34);\n\nA=vec2(0.5,0.09121621);\nmed=vec2(0.1216216,0.03209459);\nfloat d35=sdBox(p-A,med);\ncolout= DFB(vec3(0.65), colout, d35);\n\nA=vec2(0.5,0.9087838);\nmed=vec2(0.1216216,0.03209459);\nfloat d36=sdBox(p-A,med);\ncolout= DFB(vec3(0.5), colout, d36);\n\nA=vec2(0.4054054,0.8412162);\nmed=vec2(0.0152027,0.03209459);\nfloat d37=sdBox(p-A,med);\ncolout= DFS(vec3(0.0), colout, d37);\n\nA=vec2(0.5945946,0.8412162);\nmed=vec2(0.0152027,0.03209459);\nfloat d38=sdBox(p-A,med);\ncolout= DFS(vec3(0.0), colout, d38);\n\nA=vec2(0.4054054,0.1554054);\nmed=vec2(0.0152027,0.03209459);\nfloat d39=sdBox(p-A,med);\ncolout= DFS(vec3(0.0), colout, d39);\n\nA=vec2(0.5912162,0.1587838);\nmed=vec2(0.0152027,0.03209459);\nfloat d310=sdBox(p-A,med);\ncolout= DFS(vec3(0.0), colout, d310);\n\nA=vec2(0.1554054,0.6114865);\nmed=vec2(0.02871622,0.0152027);\nfloat d311=sdBox(p-A,med);\ncolout= DFS(vec3(0.0), colout, d311);\n\nA=vec2(0.152027,0.4054054);\nmed=vec2(0.02871622,0.0152027);\nfloat d312=sdBox(p-A,med);\ncolout= DFS(vec3(0.0), colout, d312);\n\nA=vec2(0.8445946,0.6013514);\nmed=vec2(0.02871622,0.0152027);\nfloat d313=sdBox(p-A,med);\ncolout= DFS(vec3(0.0), colout, d313);\n\nA=vec2(0.8445946,0.4087838);\nmed=vec2(0.02871622,0.0152027);\nfloat d314=sdBox(p-A,med);\ncolout= DFS(vec3(0.0), colout, d314);\n\n    return colout;\n}\n\n\n\nvec3 hash32(vec2 p) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n    vec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\n\n\n\n// Function to generate a random number based on tile position\nfloat random(vec2 st) {\n    return fract(sin(dot(st.xy, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\n\nvec3 truchet(vec2 uv, vec3 col)\n{\n     vec2 pos = uv;\n    vec2 tile = floor(uv);\n    pos = fract(uv) ;\n    \n    \n    // Generate a random number to choose between sop1, sop2, sop3, sop4\n    float choice = random(tile);\n    float dist = 0.0;\n\n    if (choice < 0.33) {\n        col=tubo01(pos,col);\n      \n    } else if (choice < 0.66) {\n        col=tubo02(pos,col);\n      \n    } else \n    \n     { col=tubo03(pos,col);    }\n    \n    \n    vec3 color=vec3(1.0); \n     if (3.0*sin(iTime)>0.0)\n      color = hash32(tile)+0.1;\n\n    return col*color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = ( 2. * fragCoord - iResolution.xy ) / iResolution.y;\n    vec2 uv0=uv;\n    \n    uv-=vec2(0.0,-0.5);\n    float esc=1.0; //3.0;\n    uv+=iTime*0.25;\n    uv*=esc;\n    \n    //vec3 col=vec3(0.0,0.0,1.0-(1.0-uv.y*0.5));\n    vec3 col=vec3(0.0,0.1,uv0.y*0.55);\n    \n   col= truchet(uv*2.5-vec2(1.0,0.61+iTime),col);\n   col= truchet(uv*1.5-vec2(1.5+iTime*0.5,0.5),col) ;\n   col= truchet(uv,col) ;\n   \n    col=pow(col,  vec3(0.554545));\n    \n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//---por jorge2017a2\n//Referencia de sonido \n//IQ,AeroShark333, Gaz ,etc. muchos :)\n\n//Name Piano:\n//ABBA - SOS - Accurate Piano Tutorial with Sheet Music..youtube\n\n#define PI acos(-1.)\n#define PIH (PI*.5)\n#define TAU (PI*2.)\n#define TWO_PI 6.2831\n\n\nconst float ttotal=15.0; \nconst float pi = 3.1415927;\nconst float tau = 6.283185;\nfloat ms;\nfloat mresp;\nfloat mtime;\nfloat mtempo;\n\n\n//https://www.shadertoy.com/view/ss3cDN\n// Created by AeroShark333\nfloat squareWave750( float f, float x)\n{ return (min(1.0, floor( 4.0 * floor( f * x ) - floor( 4.0 * f * x ) + 3.0 ))); }\n\nfloat squareWave500( float f, float x)\n{ return (floor( 2.0 * floor( f * x ) - floor( 2.0 * f * x ) + 1.0 )); }\n\nfloat squareWave250( float f, float x)\n{ return (max(0.0, floor( 4.0 * floor( f * x ) - floor( 4.0 * f * x ) + 1.0 ))); }\n\nvec2 squareWave250( vec2 f, float x)\n{ return (max(vec2(0.0), floor( 4.0 * floor( f * x ) - floor( 4.0 * f * x ) + 1.0 ))); }\n\nfloat triangleWave500( float q, float x)\n{ float f = 1.0-2.0*abs(0.5-mod(q*x,1.0));  return (f); }\n\nfloat triangleWave250( float q, float x)\n{ float f = max(0.0,1.0-2.0*abs(0.5-2.0*mod(q*x,1.0))); return (f); }\n\nfloat convertBassFreq (float f)\n{ return (f/2.0); }\n\nfloat  sawf(float t , float freq)\n{  return fract(t * freq) - 0.5; }\n\nfloat wave1( float x, float dxdt, in vec2 v, float t , float w)\n{   float f2;\n    float sampleX=0.0;\n    float f=w;\n    float v1,v2;\n    v1=squareWave250(f,t);\n    v2=triangleWave250(f,t);\n    sampleX =v1*v2*exp(-2.5*t);\n    f2=(sampleX+sawf(t,f));\n    float fx=f2*1.5;\n    return fx;\n}\n\n\nfloat D3(float ton, float tid, float toff)\n{   vec3 n3;\n    float resp;\n    n3=vec3(ton,tid, toff);\n    \n    \n    if(ms>=ton && ms<=toff)\n    {      // lower one octave\n      n3.y -=12.; //12 notas\n      //n3.y +=12.; //12 notas\n\n      // compute note frequency and time  \n      float f = 440.0*pow( 2.0, float(n3.y-69.)/12.0 );\n      float t = mtime - float(n3.x)/mtempo;\n      if( n3.x==0.0 ) return 0.0;\n\n      // prepare wave parameters\n      float w = tau*f;\n      \n      float dwdt = w/iSampleRate; // derivative\n\n      // mix between bandlimited and raw saw waves  \n      vec2 v = smoothstep(-0.2,0.2,sin(t*vec2(1.0,0.5)) );\n      // build instrument\n\n      float f1,y;\n      f1=wave1(w*t,1.00*dwdt,v,t,w);\n      float wf  = 0.4*f1;\n      y=f1*wf;\n      float offset=n3.x;\n       y*=exp(-1.0/n3.z * (t -offset) );\n        \n       mresp+=y;\n    }\n    \n}\n\n\n\nfloat SoundIq(float time)\n{ ///referencia de notas musicales... iq \n  time = mod( time+1.0, ttotal);\n // tune\n  float tempo = 0.55; //0.6\n  float s = time*tempo;\n vec3 n3=vec3(0.0);\n \n //variables globales\n ms=s;\n mresp=0.0;\n mtime=time;\n mtempo=tempo;\n\n\n\n\n D3(0.00000,53.0,0.06250); D3(0.00000,57.0,0.06250); D3(0.12500,53.0,0.25000); D3(0.12500,57.0,0.25000); D3(0.25000,52.0,0.31250); D3(0.25000,55.0,0.31250);\n D3(0.37500,52.0,0.50000); D3(0.37500,55.0,0.50000); D3(0.50000,50.0,1.00000); D3(0.50000,55.0,1.00000); D3(1.03125,50.0,1.09375); D3(1.03125,53.0,1.09375);\n D3(1.15625,50.0,1.28125); D3(1.15625,53.0,1.28125); D3(1.28125,48.0,1.34375); D3(1.28125,52.0,1.34375); D3(1.40625,48.0,1.53125); D3(1.40625,52.0,1.53125);\n D3(1.53125,50.0,2.03125); D3(1.53125,46.0,2.03125); D3(2.06250,46.0,2.12500); D3(2.06250,50.0,2.12500); D3(2.18750,46.0,2.31250); D3(2.18750,50.0,2.31250);\n D3(2.31250,45.0,2.37500); D3(2.31250,48.0,2.37500); D3(2.43750,45.0,2.56250); D3(2.43750,48.0,2.56250); D3(2.56250,43.0,2.62500); D3(2.56250,46.0,2.62500);\n D3(2.68750,43.0,2.81250); D3(2.68750,46.0,2.81250); D3(2.81250,26.0,2.93750); D3(2.81250,38.0,2.93750); D3(2.81250,41.0,3.06250); D3(2.81250,45.0,3.06250);\n D3(3.06250,26.0,3.18750); D3(3.06250,38.0,3.18750); D3(3.06250,53.0,3.18750); D3(3.18750,45.0,3.31250); D3(3.31250,26.0,3.43750); D3(3.31250,38.0,3.43750);\n D3(3.31250,46.0,3.43750); D3(3.43750,53.0,3.56250); D3(3.56250,26.0,3.68750); D3(3.56250,38.0,3.68750); D3(3.56250,46.0,3.68750); D3(3.68750,45.0,3.93750);\n D3(3.81250,26.0,3.93750); D3(3.81250,38.0,3.93750); D3(3.93750,53.0,4.06250); D3(3.93750,57.0,4.06250); D3(4.06250,26.0,4.18750); D3(4.06250,38.0,4.18750);\n D3(4.06250,52.0,4.12500); D3(4.06250,55.0,4.12500); D3(4.18750,52.0,4.31250); D3(4.18750,55.0,4.31250); D3(4.31250,26.0,4.43750); D3(4.31250,38.0,4.43750);\n D3(4.31250,50.0,4.81250); D3(4.31250,53.0,4.81250); D3(4.56250,26.0,4.75000); D3(4.56250,38.0,4.75000); D3(4.84375,26.0,4.96875); D3(4.84375,38.0,4.96875);\n D3(4.84375,50.0,4.90625); D3(4.84375,53.0,4.90625); D3(4.96875,50.0,5.09375); D3(4.96875,53.0,5.09375); D3(5.09375,26.0,5.21875); D3(5.09375,38.0,5.21875);\n D3(5.09375,46.0,5.59375); D3(5.09375,50.0,5.59375); D3(5.34375,26.0,5.53125); D3(5.34375,38.0,5.53125); D3(5.62500,26.0,5.75000); D3(5.62500,38.0,5.75000);\n D3(5.62500,46.0,5.68750); D3(5.62500,50.0,5.68750); D3(5.75000,46.0,5.87500); D3(5.75000,50.0,5.87500); D3(5.87500,26.0,6.00000); D3(5.87500,38.0,6.00000);\n D3(5.87500,45.0,5.93750); D3(5.87500,48.0,5.93750); D3(6.00000,45.0,6.12500); D3(6.00000,48.0,6.12500); D3(6.12500,26.0,6.25000); D3(6.12500,38.0,6.25000);\n D3(6.12500,43.0,6.18750); D3(6.12500,46.0,6.18750); D3(6.25000,43.0,6.37500); D3(6.25000,46.0,6.37500); D3(6.37500,26.0,6.50000); D3(6.37500,38.0,6.50000);\n D3(6.37500,41.0,6.62500); D3(6.37500,45.0,6.62500); D3(6.62500,26.0,6.75000); D3(6.62500,38.0,6.75000); D3(6.62500,53.0,6.75000); D3(6.75000,45.0,6.87500);\n D3(6.87500,26.0,7.00000); D3(6.87500,38.0,7.00000); D3(6.87500,46.0,7.00000); D3(7.00000,53.0,7.12500); D3(7.12500,26.0,7.25000); D3(7.12500,38.0,7.25000);\n D3(7.12500,46.0,7.25000); D3(7.25000,45.0,7.50000); D3(7.37500,38.0,8.31250); D3(7.50000,57.0,7.62500); D3(7.62500,58.0,7.75000); D3(7.75000,57.0,7.87500);\n D3(7.87500,65.0,8.00000); D3(8.00000,57.0,8.12500); D3(8.12500,58.0,8.25000); D3(8.25000,57.0,8.37500);\n\n\n\n\n\n  return mresp;\n}\n\nvec2 mainSound( in int samp, float time )\n{ float t1=mod(time, ttotal);\n  float y= SoundIq(t1)*0.5;\n  return vec2(y);\n}   \n","name":"Sound","description":"","type":"sound"}]}