{"ver":"0.1","info":{"id":"NttGRM","date":"1635885182","viewed":258,"name":"Noise Pattern Thingy","username":"SnoopethDuckDuck","description":"It's a bit overwhelming, not a huge fan of this one","likes":6,"published":3,"flags":32,"usePreview":0,"tags":["e"],"hasliked":0,"parentid":"NsGSDV","parentname":"CryptoRoyale Trails Test"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{ \n    vec2 uv = (fragCoord.xy)/iResolution.xy;\n       \n    // blob color\n    vec3 col = texture(iChannel1, uv).xyz;\n \n    // trail value\n    float l = texture(iChannel0, uv).x;\n    l = clamp(l, 0., 1.);\n\n    // trail color\n    vec3 c = vec3(l);\n    //c *= getDarkCol(iTime);\n    \n    float k = step(length(col), 0.);\n    c = mix(col, c, k);\n    \n    // background (not actually sure what the step is doing lol)\n    c += step(0.,length(c)) * vec3(36,26,91)/255.;\n   \n    vec3 e = vec3(.5);\n    vec3 al = pal(0.5 * c.x + uv.x + 0.1 * iTime,e*1.2,e,e*2.0, vec3(0,0.33,0.66));\n    vec3 col2 = clamp(al,0.,1.);\n    if (c.x < 0.2)\n        col2 = vec3(0.);\n   \n    fragColor = vec4(col2,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float Cell( in ivec2 p )\n{\n    // do wrapping\n    ivec2 r = ivec2(textureSize(iChannel0, 0));\n    p = (p+r) % r;\n    \n    // fetch texel\n    return texelFetch(iChannel0, p, 0 ).x;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy-0.5 * iResolution.xy)/iResolution.y;\n    vec2 tuv = fragCoord.xy/iResolution.xy;\n    \n    ivec2 px = ivec2( fragCoord );\n    \n    // center cell\n    float e = Cell(px); \n\n    // neighbour cells\n    float t = Cell(px + ivec2(0, int(-1. / iResolution.y)));\n    float b = Cell(px + ivec2(0,int(1. / iResolution.y)));\n    float l = Cell(px + ivec2(int(-1. / iResolution.y),0));\n    float r = Cell(px + ivec2(int(1. / iResolution.y),0));   \n\n    // \"average\" of neighbours\n   // float k = 0.5 * max(t + b, l + r);\n   \n   uv += 0.4 * tanh(4. * vec2(cos(0.2 * time), sin(0.2 * time)));\n   float a = atan(uv.y, uv.x);\n   \n   float sc = 8. +  0.8 * tanh(3. * cos(2. * max(abs(uv.x), abs(uv.y)) + a*0. + cos(10. * h21(uv) + time) * 10.*h21(uv) + iTime));\n   vec2 ipos = floor(sc * uv);// 0.5;\n   sc = 100. * h21(ipos) + 0.8 * tanh(3. * cos(2. * max(abs(uv.x), abs(uv.y)) + a*0. + cos(10. * h21(uv) + time) * 10.*h21(uv) + iTime));\n   ipos = floor(sc * uv);// 0.5;\n   uv = fract(sc * uv) - 0.5;\n   \n  // uv =  0.5 * tanh(2. * vec2(cos(16. * uv.x), sin(16. * uv.y)));\n   \n   float rand = 4. * h21(ipos);\n    vec2 p = 0.4 * vec2(tanh(4. * cos(0.5 * 3.14159 * time * (0.9 + 0.2 * 0.25 * rand) + +rand)), \n                        tanh(4. * sin(time + rand)));\n   float val = 1. * step(length(uv - p), 0.1);\n  \n  \n    float fb = texture(iChannel0, tuv).x;\n   // fb *= 1.9;\n    //fb *= step(fb, 5.);\n   // fb *= step(fb, 3. + 5. * fract(8. * length(uv))); // determines length of trail\n    //fb = mod(fb * (1. + 0.1 * step(fb, 1.)), 3.);\n\n    // applies a fade\n    if (val != 1.)\n        val = mix(val, fb, 0.65);\n    \n    // constant value but end is buggy :(\n    val = 0.9 * max(val, fb);\n    \n    vec3 c = vec3(val);\n    if (length(c) < 0.)\n        c = vec3(0.);\n        \n    fragColor = vec4(c,1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define time iTime\n\nvec2 rot (vec2 vec, float a) {\n    float m = 3.;\n    mat2 mat = mat2(tanh(m * cos(a)), -tanh(m * sin(a)) , tanh(m * sin(a)), tanh(m * cos(a)));\n    return mat * vec;\n}\n\nfloat h21 (vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d ) {\n    return a + b*cos( 6.28318*(c*t+d) );\n}","name":"Common","description":"","type":"common"}]}