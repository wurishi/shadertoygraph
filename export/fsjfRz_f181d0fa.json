{"ver":"0.1","info":{"id":"fsjfRz","date":"1645643278","viewed":145,"name":"Yet Another Wood Shader","username":"stegu","description":"Carpentry is another interest of mine, and I always end up writing a \"wood\" surface shader in every new shader environment I encounter. This is nothing special, just a straightforward application of noise. The colors are deliberately bright for display.","likes":16,"published":1,"flags":0,"usePreview":0,"tags":["3d","noise","wood"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // A wood pattern shader. Stefan Gustavson 2022-02-22.\n    // Everything in this tab is public domain code.\n    // Functions in the \"Common\" tab come with their own licenses.\n\n    // Room for improvement even on this coarse scale:\n    // Transitions between spring and summer wood are gradual, hence\n    // the spring color should bleed mainly towards larger R.\n    // (A symmetric blur would be good for a bump map, though.)\n    // A bump map and a specular map could improve things quite a bit.\n    //\n    // These parameters would be uniforms if this wasn't Shadertoy.\n\tconst vec3 spring_heart = vec3(0.5, 0.2, 0.0); // Spring heartwood color\n\tconst vec3 summer_heart = vec3(0.3, 0.1, 0.0); // Summer heartwood color\n\tconst vec3 spring_sap = vec3(1.0, 1.0, 0.5); // Spring sapwood color\n\tconst vec3 summer_sap = vec3(0.7, 0.5, 0.1); // Summer sapwood color\n\tconst float grain_size = 0.05; // Grain thickness in texture space\n\tconst float grain_blur = 0.2; // Grain blur\n\tconst float grain_variation = 0.2; // Grain variation\n\tconst float spring_summer_ratio = 0.7; // Spring/summer ratio\n\tconst float heart_size = 10.0; // Heartwood diameter (years)\n\tconst float heart_transition = 5.0; // Heart/sap transition (years)\n\tconst vec3 origin = vec3(0.6, 0.2, 0.0); // Log center offset\n\tconst float curl_Rsize = 10.0; // Curl radial size, texture space\n\tconst float curl_zsize = 50.0; // Curl longitudinal size, texture space\n\tconst float curl_strength = 1.0; // Curl strength\n\n    vec3 box_dims = vec3(1.0, 1.0, 5.0); // Grain direction is along z\n\n    float camera_distance = 12.0;\n    float viewplane_distance = 8.0;\n\n    vec3 background = vec3(0.0, 0.2, 0.0); // Background color\n\n    // Fit (u,v) range [-1,1] with aspect 1:1 centered on view plane\n    vec3 uvw;\n    uvw.xy = (2.0*fragCoord- iResolution.xy)/min(iResolution.x, iResolution.y);\n\n    // Adjust camera FOV by mouse drags (down-drag zooms out, up-drag zooms in)\n    float zoom = pow(0.99,iMouse.y-abs(iMouse.w));\n    uvw.xy = zoom*uvw.xy;\n\n    uvw.z = -viewplane_distance;\n    vec3 p0 = vec3(0.0, 0.0, -camera_distance);\n    vec3 v = vec3(uvw - p0);\n\n    // Spin vertically\n    float el = 3.5*sin(iTime*0.05*sqrt(3.0));\n    float Se = sin(el);\n    float Ce = cos(el);\n    // Spin horizontally\n    float az = 7.0*sin(iTime*0.05*sqrt(2.0));\n    float Sa = sin(az);\n    float Ca = cos(az);\n    mat3 M = mat3(1.0,0.0,0.0, 0.0,Ce,-Se, 0.0,Se,Ce);\n    M *= mat3(Ca,0.0,Sa, 0.0,1.0,0.0, -Sa,0.0,Ca);\n    // mat3 Mi = transpose(M); // orthonormal, inverse = transpose\n    \n    p0 = M * p0;\n    v = M * v;\n    vec3 N;\n    vec2 t = boxIntersection(p0, v, box_dims, N);\n    if(t.x < 0.0) {\n        fragColor = vec4(background, 1.0);\n        return;\n    }\n    \n    vec2 g2;\n    vec3 g3;\n    vec3 p = p0 + t.x*v;\n    // Finally, we get to the actual surface pattern.\n    // This is where a regular fragment shader\n    // would begin, acting on a box made of polygons.\n    vec3 ptex = (p - origin) / grain_size;\n    float R = length(ptex.xy);\n    float z = ptex.z;\n    vec3 pcurl = ptex / vec3(curl_Rsize, curl_Rsize, curl_zsize);\n    float noise_mask = smoothstep(0.0, 4.0, R); // No noise near R=0\n    R += noise_mask * curl_strength * psrdnoise(pcurl, vec3(0.0), 0.0, g3);\n    // I didn't implement 1D noise (yet), so slice the 2D version\n    R += noise_mask * grain_variation * psrdnoise(vec2(R*0.5, 0.25), vec2(0.0), 0.0, g2);\n    float Rtri = 2.0*abs(fract(R) - 0.5);\n    float step_width = max(2.0*fwidth(R), grain_blur);\n    float grain = smoothstep(spring_summer_ratio - step_width,\n                             spring_summer_ratio + step_width, Rtri);\n    float heart_start = heart_size - 0.5 * heart_transition;\n    float heart_end = heart_size + 0.5 * heart_transition;\n    vec3 spring_color = mix(spring_heart, spring_sap,\n                             smoothstep(heart_start, heart_end, R));\n    vec3 summer_color = mix(summer_heart, summer_sap,\n                             smoothstep(heart_start, heart_end, R));\n    vec3 mixcolor = mix(spring_color, summer_color, grain);\n    // (An appropriately scaled bump map here would be grain*grain_size)\n    \n    // Use N for a simple falloff shading\n    mixcolor *= 0.3 + 0.7*max(0.0, dot(N, -normalize(v)));\n\n    // I know this is what I *should* do, but I like the cartoonish RGB\n    // mixcolor = pow(mixcolor, vec3(0.45));\n\n    fragColor = vec4(mixcolor, 1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// A convenient anti-aliased step() using auto derivatives\nfloat aastep(float threshold, float value) {\n    float afwidth = 0.7 * length(vec2(dFdx(value), dFdy(value)));\n    return smoothstep(threshold-afwidth, threshold+afwidth, value);\n}\n\n// psrdnoise (c) Stefan Gustavson and Ian McEwan,\n// ver. 2021-12-02, published under the MIT license:\n// https://github.com/stegu/psrdnoise/\n\nfloat psrdnoise(vec2 x, vec2 period, float alpha, out vec2 gradient)\n{\n\tvec2 uv = vec2(x.x+x.y*0.5, x.y);\n\tvec2 i0 = floor(uv), f0 = fract(uv);\n\tfloat cmp = step(f0.y, f0.x);\n\tvec2 o1 = vec2(cmp, 1.0-cmp);\n\tvec2 i1 = i0 + o1, i2 = i0 + 1.0;\n\tvec2 v0 = vec2(i0.x - i0.y*0.5, i0.y);\n\tvec2 v1 = vec2(v0.x + o1.x - o1.y*0.5, v0.y + o1.y);\n\tvec2 v2 = vec2(v0.x + 0.5, v0.y + 1.0);\n\tvec2 x0 = x - v0, x1 = x - v1, x2 = x - v2;\n\tvec3 iu, iv, xw, yw;\n\tif(any(greaterThan(period, vec2(0.0)))) {\n\t\txw = vec3(v0.x, v1.x, v2.x);\n\t\tyw = vec3(v0.y, v1.y, v2.y);\n\t\tif(period.x > 0.0)\n\t\t\txw = mod(vec3(v0.x, v1.x, v2.x), period.x);\n\t\tif(period.y > 0.0)\n\t\t\tyw = mod(vec3(v0.y, v1.y, v2.y), period.y);\n\t\tiu = floor(xw + 0.5*yw + 0.5); iv = floor(yw + 0.5);\n\t} else {\n\t\tiu = vec3(i0.x, i1.x, i2.x); iv = vec3(i0.y, i1.y, i2.y);\n\t}\n\tvec3 hash = mod(iu, 289.0);\n\thash = mod((hash*51.0 + 2.0)*hash + iv, 289.0);\n\thash = mod((hash*34.0 + 10.0)*hash, 289.0);\n\tvec3 psi = hash*0.07482 + alpha;\n\tvec3 gx = cos(psi); vec3 gy = sin(psi);\n\tvec2 g0 = vec2(gx.x, gy.x);\n\tvec2 g1 = vec2(gx.y, gy.y);\n\tvec2 g2 = vec2(gx.z, gy.z);\n\tvec3 w = 0.8 - vec3(dot(x0, x0), dot(x1, x1), dot(x2, x2));\n\tw = max(w, 0.0); vec3 w2 = w*w; vec3 w4 = w2*w2;\n\tvec3 gdotx = vec3(dot(g0, x0), dot(g1, x1), dot(g2, x2));\n\tfloat n = dot(w4, gdotx);\n\tvec3 w3 = w2*w; vec3 dw = -8.0*w3*gdotx;\n\tvec2 dn0 = w4.x*g0 + dw.x*x0;\n\tvec2 dn1 = w4.y*g1 + dw.y*x1;\n\tvec2 dn2 = w4.z*g2 + dw.z*x2;\n\tgradient = 10.9*(dn0 + dn1 + dn2);\n\treturn 10.9*n;\n}\n\n// psrdnoise (c) Stefan Gustavson and Ian McEwan,\n// ver. 2021-12-02, published under the MIT license:\n// https://github.com/stegu/psrdnoise/\n\nvec4 permute(vec4 i) {\n\tvec4 im = mod(i, 289.0);\n\treturn mod(((im*34.0)+10.0)*im, 289.0);\n}\n\nfloat psrdnoise(vec3 x, vec3 period, float alpha, out vec3 gradient)\n{\n\tconst mat3 M = mat3(0.0, 1.0, 1.0, 1.0, 0.0, 1.0,  1.0, 1.0, 0.0);\n\tconst mat3 Mi = mat3(-0.5, 0.5, 0.5, 0.5,-0.5, 0.5, 0.5, 0.5,-0.5);\n\tvec3 uvw = M * x;\n\tvec3 i0 = floor(uvw), f0 = fract(uvw);\n\tvec3 g_ = step(f0.xyx, f0.yzz), l_ = 1.0 - g_;\n\tvec3 g = vec3(l_.z, g_.xy), l = vec3(l_.xy, g_.z);\n\tvec3 o1 = min( g, l ), o2 = max( g, l );\n\tvec3 i1 = i0 + o1, i2 = i0 + o2, i3 = i0 + vec3(1.0);\n\tvec3 v0 = Mi * i0, v1 = Mi * i1, v2 = Mi * i2, v3 = Mi * i3;\n\tvec3 x0 = x - v0, x1 = x - v1, x2 = x - v2, x3 = x - v3;\n\tif(any(greaterThan(period, vec3(0.0)))) {\n\t\tvec4 vx = vec4(v0.x, v1.x, v2.x, v3.x);\n\t\tvec4 vy = vec4(v0.y, v1.y, v2.y, v3.y);\n\t\tvec4 vz = vec4(v0.z, v1.z, v2.z, v3.z);\n\t\tif(period.x > 0.0) vx = mod(vx, period.x);\n\t\tif(period.y > 0.0) vy = mod(vy, period.y);\n\t\tif(period.z > 0.0) vz = mod(vz, period.z);\n\t\ti0 = floor(M * vec3(vx.x, vy.x, vz.x) + 0.5);\n\t\ti1 = floor(M * vec3(vx.y, vy.y, vz.y) + 0.5);\n\t\ti2 = floor(M * vec3(vx.z, vy.z, vz.z) + 0.5);\n\t\ti3 = floor(M * vec3(vx.w, vy.w, vz.w) + 0.5);\n\t}\n\tvec4 hash = permute( permute( permute( \n\t\t\tvec4(i0.z, i1.z, i2.z, i3.z ))\n\t\t\t+ vec4(i0.y, i1.y, i2.y, i3.y ))\n\t\t\t+ vec4(i0.x, i1.x, i2.x, i3.x ));\n\tvec4 theta = hash * 3.883222077;\n\tvec4 sz = hash * -0.006920415 + 0.996539792;\n\tvec4 psi = hash * 0.108705628;\n\tvec4 Ct = cos(theta), St = sin(theta);\n\tvec4 sz_prime = sqrt( 1.0 - sz*sz );\n\tvec4 gx, gy, gz;\n\tif(alpha != 0.0) {\n\t\tvec4 px = Ct * sz_prime, py = St * sz_prime, pz = sz;\n\t\tvec4 Sp = sin(psi), Cp = cos(psi), Ctp = St*Sp - Ct*Cp;\n\t\tvec4 qx = mix( Ctp*St, Sp, sz), qy = mix(-Ctp*Ct, Cp, sz);\n\t\tvec4 qz = -(py*Cp + px*Sp);\n\t\tvec4 Sa = vec4(sin(alpha)), Ca = vec4(cos(alpha));\n\t\tgx = Ca*px + Sa*qx; gy = Ca*py + Sa*qy; gz = Ca*pz + Sa*qz;\n\t}\n\telse {\n\t\tgx = Ct * sz_prime; gy = St * sz_prime; gz = sz;  \n\t}\n\tvec3 g0 = vec3(gx.x, gy.x, gz.x), g1 = vec3(gx.y, gy.y, gz.y);\n\tvec3 g2 = vec3(gx.z, gy.z, gz.z), g3 = vec3(gx.w, gy.w, gz.w);\n\tvec4 w = 0.5-vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3));\n\tw = max(w, 0.0); vec4 w2 = w * w, w3 = w2 * w;\n\tvec4 gdotx = vec4(dot(g0,x0), dot(g1,x1), dot(g2,x2), dot(g3,x3));\n\tfloat n = dot(w3, gdotx);\n\tvec4 dw = -6.0 * w2 * gdotx;\n\tvec3 dn0 = w3.x * g0 + dw.x * x0;\n\tvec3 dn1 = w3.y * g1 + dw.y * x1;\n\tvec3 dn2 = w3.z * g2 + dw.z * x2;\n\tvec3 dn3 = w3.w * g3 + dw.w * x3;\n\tgradient = 39.5 * (dn0 + dn1 + dn2 + dn3);\n\treturn 39.5 * n;\n}\n\n// Ray-box intersection by Inigo Quilez, from:\n// https://iquilezles.org/articles/boxfunctions\nvec2 boxIntersection( in vec3 ro, in vec3 rd, in vec3 rad, out vec3 oN ) \n{\n    vec3 m = 1.0/rd;\n    vec3 n = m*ro;\n    vec3 k = abs(m)*rad;\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n\n    float tN = max( max( t1.x, t1.y ), t1.z );\n    float tF = min( min( t2.x, t2.y ), t2.z );\n\t\n    if( tN>tF || tF<0.0) return vec2(-1.0); // no intersection\n    \n    oN = -sign(rd)*step(t1.yzx,t1.xyz)*step(t1.zxy,t1.xyz);\n\n    return vec2( tN, tF );\n}\n","name":"Common","description":"","type":"common"}]}