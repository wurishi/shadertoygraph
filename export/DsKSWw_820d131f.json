{"ver":"0.1","info":{"id":"DsKSWw","date":"1681374167","viewed":88,"name":"Ordered Dithering Jordi","username":"sp33s","description":"https://en.wikipedia.org/wiki/Ordered_dithering","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["dither","dithering"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define W vec3(0.2126, 0.7152, 0.0722)\n\nconst int dither4[4] = int[](\n 0,  2,\n 3,  1\n);\n\nconst int dither16[16] = int[](\n 0,  8,  2, 10,\n12,  4, 14,  6,\n 3, 11,  1,  9,\n15,  7, 13,  5\n);\n\nconst int dither64[64] = int[](\n 0, 32, 8,  40, 2,  34, 10, 42,\n48, 16, 56, 24, 50, 18, 58, 26,\n12, 44, 4,  36, 14, 46, 6,  38,\n60, 28, 52, 20, 62, 30, 54, 22,\n 3, 35, 11, 43, 1,  33, 9,  41,\n51, 19, 59, 27, 49, 17, 57, 25,\n15, 47, 7,  39, 13, 45, 5,  37,\n63, 31, 55, 23, 61, 29, 53, 21\n); \n\nconst float downsampleSize = 1.0;\n\nfloat GetLuminance(vec4 color)\n{\n    return W.r * color.r + W.g * color.g + W.b * color.b;\n}\n\nfloat Random (vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\nvec4 GetDitherValue(vec2 coord, int kernelLevel, float lum)\n{\n    kernelLevel = clamp(kernelLevel, 1, 3); // max three maps\n    int kernelSize = int(pow(2.0, 2.0 * float(kernelLevel)));\n    int kernelSqrt = int(sqrt(float(kernelSize)));\n    float weight = 1.0 / float(kernelSize + 1);\n    if (lum < weight)\n        return vec4(0.0);\n    \n    int xMod = int(mod(coord.x, float(kernelSqrt)));\n    int yMod = int(mod(coord.y, float(kernelSqrt)));\n    int ditherIndex = yMod * kernelSqrt + xMod;\n    int ditherValue = kernelSize == 4 ? dither4[ditherIndex] : kernelSize == 16 ? dither16[ditherIndex] : dither64[ditherIndex];\n    // + 1 to shift because 0.0 * weight is already caught as early out above\n    // We have to consider 5 weights for a 2x2, because 3 * weight = 0.75, will never reach 1.0\n    float ditherThresh = float(ditherValue + 1) * weight; // TODO;: optimize by normalizing maps, \n    return lum < ditherThresh ? vec4(0.0, 0.0, 0.0, 1.0) : vec4(1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Downsample\n    float x = floor(fragCoord.x / downsampleSize) * downsampleSize;\n    float y = floor(fragCoord.y / downsampleSize) * downsampleSize;\n    vec2 downsampledCoord = vec2(x, y);\n    vec2 uv = downsampledCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n    //fragColor = vec4(uv.x, uv.x, uv.x, 1.0);\n    \n    // Greyscale\n    float lum = GetLuminance(fragColor);\n\n    // Dither\n    fragColor = GetDitherValue(fragCoord, 3, lum);\n    \n    // Random \n    //vec4 rand = lum > Random(uv) ? vec4(1.0) : vec4(0.0, 0.0, 0.0, 1.0);\n    //fragColor = (fragColor + rand) / 2.0;\n    \n\n}","name":"Image","description":"","type":"image"}]}