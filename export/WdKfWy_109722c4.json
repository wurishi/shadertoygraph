{"ver":"0.1","info":{"id":"WdKfWy","date":"1607876242","viewed":138,"name":"camera funk","username":"tripzilch","description":"it's to play with camera feedback","likes":0,"published":1,"flags":2,"usePreview":0,"tags":["camera"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\nvec3 gamma = vec3(2.2), igamma = vec3(1.0 / 2.2);\n\nmat2 rot(float a) {\n    float s = sin(a), c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat vignet(vec2 uv) {\n    return smoothstep(.0, .5, 1. - length(uv * uv));\n}\n\nvec2 aspect = vec2(1., 1.);\nvec3 cam(vec2 uv) {\n    vec3 res = pow(texture(iChannel0, .5 * (uv + 1.) / aspect).rgb, gamma) * vignet(uv);\n    //res += -0.25 * res.gbr;\n    return res;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    aspect = iResolution.xy / iResolution.y;\n    vec2 uv = (2. * fragCoord - iResolution.xy) / iResolution.y;\n    vec3 col = vec3(0.);\n    for (float i = 0.; i < 3.; i += 1.0) {\n        vec4 f = vec4(.53, .55, .57, .59) - .013 * i;\n        vec4 cc = sin(f * iTime + vec4(23.5, 17.3, 73.2, 55.5) * i);\n        vec3 c = cam((uv * (1.5 + .5 * cc.z) + .5 * cc.xy * aspect) * rot(cc.w * PI));\n        col += c;\n    }\n    col += 1. - vignet(uv / aspect);\n    fragColor = vec4(pow(col, igamma),1.0);\n}\n","name":"Image","description":"","type":"image"}]}