{"ver":"0.1","info":{"id":"ft3Xzr","date":"1638570259","viewed":116,"name":"Sphere avoider","username":"makipl","description":"Basically I wanted to fire some random things, more like training raymarching. Nothing much","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdBox( vec3 p, vec3 b ) //from IQ - greetz!\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat map(in vec3 p)\n{\nfloat ff = 0.5+abs(cos(sin(iTime)))*2.;\nvec3 c = vec3(2.0,2.0,3.);\nvec3 c1 = vec3(2.0,3.0,16.0);\nfloat h;\nvec3 q = mod(ff+p+0.5*c,c)-0.7*c; //repe here\nvec3 q1 = mod(p+0.1*c1,c1)-0.2*c1;\nh=sin(p.x+iTime*3.)*3.0+4.5-p.y;\nh=min(h, (4.5+p.y));\nh=min(h,length(q)-0.24);\nh=min(h,sdBox(q1, vec3(0.2,0.20,1.2)));\n\nreturn h;\n}\n\n\nfloat ray(in vec3 ro,in vec3 rd)\n{\nfloat h=0.0;\nfloat t=0.0;\nfor(int i=0; i<48; i++)\n{\nvec3 p = ro+rd*t;\nh=map(p);\n\nif(h<(0.03 * t))\n{ return t;}\nt+=h;\n}\nreturn 0.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.0*fragCoord.xy -iResolution.xy)/iResolution.y;\n    \n    vec3 ta = vec3(2.,5.00,0.0);\n    \n    vec2 cCam = vec2(sin(iTime),cos(iTime)-5.);\n    \n    vec3 ro = vec3(\n   sin(iTime),cos(iTime),iTime*4.0);\n    \n    float ang = iTime*.4;\n    float lc = sin(cos(ang)+ro.z)*.031;\n    float rc = cos(sin(ang+0.4)+ro.z)*.031;\n    vec3 rd = vec3(uv.xy+vec2(lc, rc),0.5);\n    \n    \n    \n    vec3 ot = vec3(0.0);\n    \n    float h = ray(ro,rd)*.92;\n    float bgSet=4.0;\n    \n    ot=vec3 (h);\n    float hh= map((ro+rd*h)-iTime*0.01);\n    vec3 n = vec3(sin(ro.x),cos(ro.y),sin(cos(ro.z)));\n    ot=vec3(hh);\n\n    fragColor = vec4(hh+n*hh*n-hh/hh\n   + n*hh/abs(rd)*0.1\n    ,1.0)+0.4;\n}","name":"Image","description":"","type":"image"}]}