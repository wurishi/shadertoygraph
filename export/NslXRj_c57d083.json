{"ver":"0.1","info":{"id":"NslXRj","date":"1618875005","viewed":70,"name":"cg_task_2","username":"semenelist","description":"Witch Icosahedron","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["cgcmc"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n\n    \n    // Output to screen\n    fragColor = texture(iChannel0, uv) / float(iFrame + 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3Rr","filepath":"/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","previewfilepath":"/media/ap/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//#iChannel0 \"file://assets/cyl.jpg\"\n//#iChannel1 \"file://assets/cubemap/{}.jpg\"\n//#iChannel1::Type \"CubeMap\"\n//#iChannel2 \"file://assets/cyl.jpg\"\n//#iChannel3 \"file://assets/floor.jpg\"\n//#iChannel4 \"file://assets/gz.jpg\"\n\n#define TRACE_TR(a, b, c) curTr = traceTriangle(pos, dir, vertex[a] * r, vertex[b] * r, vertex[c] * r, n) \n#define REPLACE_T if (curTr < t) { t = curTr; normal = n;}\n\nconst float INF = 1e10;\nconst float EPS = 1e-5;\nconst float PI = 3.14159265358979323846;\nconst float PHI = (1.0 + 2.2360679774) / 2.0;\n\nconst vec3 CAMERA_POS = vec3(0, 1.0, -6);\n\nconst vec3 LIGHT1_POS = vec3(-5, -0.5, 5);\nconst float LIGHT1_RADIUS = 0.5;\nconst vec3 LIGHT1_COLOR = vec3(1, 1, 1);\n\nconst vec3 LIGHT2_POS = vec3(1, 0.5, 2);\nconst float LIGHT2_RADIUS = 0.25;\nconst vec3 LIGHT2_COLOR = vec3(0.1, 1, 0.2);\n\nconst vec3 LIGHT3_POS = vec3(2, 0.1, -1.0);\nconst float LIGHT3_RADIUS = 0.1;\nconst vec3 LIGHT3_COLOR = vec3(0.1, 0.1, 1);\n\nconst vec3 LIGHT4_POS = vec3(-1, 4.3, 12);\nconst float LIGHT4_RADIUS = 0.3;\nconst vec3 LIGHT4_COLOR = vec3(0.9, 0.5, 1);\n\nconst vec3 IMAGE_POS = vec3(0, 0, 1);\nconst float IMAGE_RADIUS = 0.25;\n\nvec3 randDir;\n\n// (CAMERA_POS + t * viewVec).y == -1\n// t = (-1 - CAMERA_POS.y) / viewVec.y;\nfloat tracePlane(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.2 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    \n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) >= 100.0) {\n        return INF;\n    }\n    normal = vec3(0, 1, 0);\n    return t;\n}\n\nfloat traceTriangle(vec3 pos, vec3 dir, vec3 a, vec3 b, vec3 c, out vec3 normal) {\n    vec3 ab = a - b;\n    vec3 ca = c - a;\n    vec3 n = normalize(cross(ab, ca));\n    float view = dot(dir, n);\n    float t = dot(a - pos, n) / view;\n    if (t < 0.0 || abs(view) < EPS) {\n        return INF;\n    }\n    vec3 worldPos = pos + dir * t;    \n    float sq = length(cross(ab, ca));\n    float sq1 = length(cross(worldPos - a, worldPos - b));\n    float sq2 = length(cross(worldPos - b, worldPos - c));\n    float sq3 = length(cross(worldPos - a, worldPos - c));\n    if (abs(sq - sq1 - sq2 - sq3) > EPS) {\n        return INF;\n    }\n    normal = n;\n    return t;\n}\n\nstruct v\n{\n    int a;\n    int b;\n    int c;\n};\n\n\nvec4 interpolation(vec2 pos, int channel) {\n    float size;\n    if (channel == 0)\n    {\n        size = 1024.0;\n    }\n    else\n    {\n        size = 512.0;\n    }\n    \n    vec2 newpos = pos * size;\n    vec2 delta = newpos - floor(newpos);\n    if (channel == 0)\n    {\n        return (texture(iChannel0, floor(newpos) / size) * (1.0 - delta).x  + texture(iChannel0, (newpos + vec2(1, 0)) / size)   * delta.x) * (1.0 - delta).y + \n                      (texture(iChannel0, (newpos + vec2(0, 1)) / size) * (1.0 - delta).x + texture(iChannel0, (newpos + vec2(1, 1)) / size) * delta.x) * (1.0-delta).y;\n    }\n    else\n    {\n        return (texture(iChannel2, floor(newpos) / size) * (1.0 - delta).x  + texture(iChannel2, (newpos + vec2(1, 0)) / size)   * delta.x) * (1.0 - delta).y + \n                      (texture(iChannel2, (newpos + vec2(0, 1)) / size) * (1.0 - delta).x + texture(iChannel2, (newpos + vec2(1, 1)) / size) * delta.x) * (1.0-delta).y;\n    }\n}\n\nfloat traceIcosahedron(vec3 pos, vec3 dir, float r, out vec3 normal)\n{\n    float t = INF;\n    float curTr;\n    vec3 n;\n    vec3[] vertex = vec3[] (vec3( PHI, 1.0, 0.0), vec3( PHI, -1.0, 0.0),\n                            vec3(-PHI, -1.0, 0.0), vec3(-PHI, 1.0, 0.0),\n                            vec3( 0.0, PHI , 1.0), vec3( 0.0, -PHI, 1.0),\n                            vec3( 0.0, -PHI, -1.0), vec3( 0.0, PHI, -1.0),\n                            vec3( 1.0, 0.0, PHI), vec3( 1.0, 0.0, -PHI),\n                            vec3(-1.0, 0.0, -PHI), vec3(-1.0, 0.0, PHI));\n    \n    /* very very slow\n    int[] q1 = int[] (0, 0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 4, 5, 6, 7);\n    int[] q2 = int[] (1, 1, 4, 4, 7, 5, 5, 6, 5, 5, 3, 3, 6, 4, 7, 4, 8, 8, 9, 9);\n    int[] q3 = int[] (8, 9, 7, 8, 9, 6, 8, 9, 6, 11, 10, 11, 10, 7, 10, 11, 11, 11, 10, 10);\n    for(int i = 0; i < 20; i++)\n    {\n        curTr = traceTriangle(pos, dir, r * vertex[q1[i]] , r * vertex[q2[i]] , r * vertex[q3[i]], n);\n        if (curTr < t)\n        {\n            t = curTr;\n            normal = n;\n        }\n    }\n    */\n    TRACE_TR(0 , 1 , 9); REPLACE_T\n    TRACE_TR(1 , 0 , 8); REPLACE_T\n    TRACE_TR(4 , 0 , 7); REPLACE_T\n    TRACE_TR(4 , 8 , 0); REPLACE_T\n    TRACE_TR(0 , 9 , 7); REPLACE_T\n    TRACE_TR(5 , 6 , 1); REPLACE_T\n    TRACE_TR(5 , 1 , 8); REPLACE_T\n    TRACE_TR(6 , 9 , 1); REPLACE_T\n    TRACE_TR(5 , 2 , 6); REPLACE_T\n    TRACE_TR(5 , 11 , 2); REPLACE_T\n    TRACE_TR(10 , 2 , 3); REPLACE_T\n    TRACE_TR(11 , 3 , 2); REPLACE_T\n    TRACE_TR(2 , 10 , 6); REPLACE_T\n    TRACE_TR(3 , 4 , 7); REPLACE_T\n    TRACE_TR(10 , 3 , 7); REPLACE_T\n    TRACE_TR(3 , 11 , 4); REPLACE_T\n    TRACE_TR(8 , 4 , 11); REPLACE_T\n    TRACE_TR(5 , 8 , 11); REPLACE_T\n    TRACE_TR(9 , 6 , 10); REPLACE_T\n    TRACE_TR(9 , 10 , 7); REPLACE_T\n    return t;\n\n}\n\nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal) {\n    // dot(pos + t * dir, pos + t * dir) == r * r;\n    // dot(pos, pos) + 2 * t * dot(pos, dir) + t * t * dot(dir, dir) == r * r\n    // t * t + 2.0 * t * dot(pos, dir) + dot(pos, pos) - r * r == 0\n    float a = dot(dir, dir);\n    float b = dot(pos, dir);\n    float c = dot(pos, pos) - r * r;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    float t = -b - sqrt(D);\n    if (t > 0.0) {\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    t = -b + sqrt(D);\n    if (t < 0.0) {\n        return INF;\n    }\n    normal = normalize(pos + t * dir);\n    return t;\n}\n\nfloat traceCylinder(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.0 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) < 2.0) {\n        normal = vec3(0, 1, 0);\n        return t;\n    }\n    // dot(pos + t * dir, pos + t * dir) == r * r;\n    // dot(pos, pos) + 2 * t * dot(pos, dir) + t * t * dot(dir, dir) == r * r\n    // t * t + 2.0 * t * dot(pos, dir) + dot(pos, pos) - r * r == 0\n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - 2.0;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    t = (-b - sqrt(D)) / a;\n    if (t > 0.0) {\n        worldPos = t * dir + pos;\n        if (worldPos.y <= -1.0) {\n            normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n            return t;\n        }\n    }\n    t = (-b + sqrt(D)) / a;\n    if (t < 0.0) {\n        return INF;\n    }\n    worldPos = t * dir + pos;\n    if (worldPos.y <= -1.0) {\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    }\n    return INF;\n}\n\nbool isOccluded(vec3 pos, vec3 target) {\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n    \n    vec3 sphNorm;\n    float sphT = traceSphere(pos, dir, 1.0, sphNorm);\n    if (sphT < dist)\n        return true;\n    vec3 cylNorm;\n    float cylT = traceCylinder(pos, dir, cylNorm);\n    return (cylT < dist);\n}\n\nvec3 computeLight(vec3 pos, vec3 color, vec3 normal) {\n    vec3 toLight1 = LIGHT1_POS - pos;\n    float distSq1 = dot(toLight1, toLight1);\n    float att1 = isOccluded(pos, LIGHT1_POS + randDir * LIGHT1_RADIUS) ? 0.0 : 20.0f / distSq1;\n    vec3 toLight2 = LIGHT2_POS - pos;\n    float distSq2 = dot(toLight2, toLight2);\n    float att2 = isOccluded(pos, LIGHT2_POS + randDir * LIGHT2_RADIUS) ? 0.0 : 10.0f / distSq2;\n    vec3 toLight3 = LIGHT3_POS - pos;\n    float distSq3 = dot(toLight3, toLight3);\n    float att3 = isOccluded(pos, LIGHT3_POS + randDir * LIGHT3_RADIUS) ? 0.0 : 10.0f / distSq3;\n    vec3 toLight4 = LIGHT4_POS - pos;\n    float distSq4 = dot(toLight4, toLight4);\n    float att4 = isOccluded(pos, LIGHT4_POS + randDir * LIGHT4_RADIUS) ? 0.0 : 10.0f / distSq4;\n    \n    vec3 toImage = IMAGE_POS - pos;\n    float distIm = dot(toImage, toImage);\n    float attIm = isOccluded(pos, IMAGE_POS + randDir * IMAGE_RADIUS) ? 0.0 : 10.0f / distIm;\n    vec2 tmp = (pos.yz, pos.xz, pos.xy);\n    return color * (\n        max(0.0, dot(normal, normalize(toLight1))) * att1 * LIGHT1_COLOR\n        + max(0.0, dot(normal, normalize(toLight2))) * att2 * LIGHT2_COLOR\n        + max(0.0, dot(normal, normalize(toLight3))) * att3 * LIGHT3_COLOR\n        + max(0.0, dot(normal, normalize(toLight4))) * att4 * LIGHT4_COLOR\n        + max(0.0, dot(normal, normalize(toImage))) * attIm * texture(iChannel3, pos.xy * pos.z).rgb\n        + texture(iChannel1, normal).rgb * 0.3\n    );\n}\n\nvec3 refraction(vec3 v, vec3 normal, float n1, float n2) {\n    if (dot(v, normal) < 0.0) {\n        normal = -normal;\n    }\n    float cosA = dot(v, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3 tang = normalize(v - cosA * normal);\n    float sinB = sinA / n2 * n1;\n    float cosB = sqrt(1.0 - sinB * sinB);\n    return sinB * tang + cosB * normal;\n}\n\nfloat pow2(float x) {\n    return x * x;\n}\n\nfloat rand(float frame)\n{\n    return fract(sin( dot(vec3(frame), vec3(12.9898,78.233,45.5432) )) * 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    randDir = normalize(randVals - 0.5);\n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (randVals.xy - 0.5)) / iResolution.x;\n    vec3 front = normalize(-CAMERA_POS);\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = normalize(cross(front, up));\n    up = normalize(cross(right, front));\n    vec3 viewVec = normalize(front + right * uv.x + up * uv.y);\n    \n    const int EMISSION = 0;\n    const int DIFFUSE = 1;\n    const int REFLECTION = 2;\n    const int REFRACTION = 3;\n    const int IMAGE = 4;\n    \n    vec3 curPos = CAMERA_POS;\n    vec3 curDir = viewVec;\n    const float GLASS_N = 1.5;\n    const float AIR_N = 1.0;\n    float n1 = AIR_N;\n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N + GLASS_N);\n    const float DIAMOND_N = 2.5;\n    float DIAMOND_R = pow2(DIAMOND_N - GLASS_N) / pow2(DIAMOND_N + GLASS_N);\n    \n    vec3 colorMult = vec3(1, 1, 1);\n    \n    for (int i = 0; i < 10; ++i) {\n        float t = INF;\n        int materialType;\n        vec3 color;\n        vec3 normal;\n        float nEnter = AIR_N;\n        vec3 planeNorm;\n        float planeT = tracePlane(curPos, curDir, planeNorm);\n        if (planeT < t) {\n            t = planeT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = interpolation((6.0 + worldPos.xz) * 0.08, 0).rgb;\n            normal = planeNorm;\n        }\n        vec3 l1Norm;\n        float light1T = traceSphere(curPos - LIGHT1_POS + randVals * 0.05, curDir, LIGHT1_RADIUS, l1Norm);\n        if (light1T < t) {\n            t = light1T;\n            materialType = EMISSION;\n            color = LIGHT1_COLOR;\n            normal = l1Norm;\n        }\n        vec3 l2Norm;\n        float light2T = traceSphere(curPos - LIGHT2_POS + randVals * 0.05, curDir, LIGHT2_RADIUS, l2Norm);\n        if (light2T < t) {\n            t = light2T;\n            materialType = EMISSION;\n            color = LIGHT2_COLOR;\n            normal = l2Norm;\n        }\n        vec3 l3Norm;\n        float light3T = traceSphere(curPos - LIGHT3_POS + randVals * 0.02, curDir, LIGHT3_RADIUS, l3Norm);\n        if (light3T < t) {\n            t = light3T;\n            materialType = EMISSION;\n            color = LIGHT3_COLOR;\n            normal = l3Norm;\n        }\n        vec3 l4Norm;\n        float light4T = traceSphere(curPos - LIGHT4_POS + randVals * 0.02, curDir, LIGHT4_RADIUS, l4Norm);\n        if (light4T < t) {\n            t = light4T;\n            materialType = EMISSION;\n            color = LIGHT4_COLOR;\n            normal = l4Norm;\n        }\n        \n        vec3 icosahedronNorm;\n        float icosahedronT = traceIcosahedron(curPos, curDir, 0.5, icosahedronNorm);\n        if (icosahedronT < t) {\n            t = icosahedronT;\n            normal = icosahedronNorm;\n\n            float reflectedPart = DIAMOND_R;\n            if (randVals.x < reflectedPart) {\n                materialType = REFLECTION;\n            } else {\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = AIR_N;\n                } else {\n                    nEnter = DIAMOND_N;\n                }\n            }\n            colorMult = vec3(0.3, 0.05, 0.3);\n        }\n        \n        vec3 cylNorm;\n        float cylT = traceCylinder(curPos, curDir, cylNorm);\n        if (cylT < t) {\n            t = cylT;\n            if (randVals.y < 0.2) {\n                materialType = REFLECTION;\n            }\n            else {\n                materialType = DIFFUSE;\n            }\n            vec3 worldPos = t * curDir + curPos;\n            color = interpolation((1.5 + worldPos.xz) * worldPos.y * 0.3, 2).rgb;\n            normal = cylNorm;\n        }\n        \n        vec3 gznorm;\n        float gz = traceSphere(curPos + (randVals - 0.5) * 0.3, curDir, 0.5, gznorm);\n        if (gz < t) {\n            t = gz;\n            if (randVals.z < 0.2) {\n                materialType = DIFFUSE;\n            }\n            else {\n                materialType = IMAGE;\n            }\n            vec3 worldPos = t * curDir + curPos;\n            vec2 tmp = (worldPos.yz,  worldPos.xz, 0.5 + worldPos.xy);\n            color = texture(iChannel3, tmp).rgb;\n            //color = LIGHT1_COLOR;\n            normal = gznorm;\n        }\n        \n        if (t != INF) {\n            vec3 worldPos = t * curDir + curPos;\n            fragColor = texture(iChannel0, worldPos.xz);\n            if (materialType == EMISSION) {\n                fragColor.rgb = color * colorMult;\n                break;\n            }\n            else if (materialType == IMAGE) {\n                fragColor.rgb = computeLight(worldPos, color, normal) * vec3(10.0, 1.0, 10.0);\n                break;\n            } else if (materialType == DIFFUSE) {\n                fragColor.rgb = computeLight(worldPos, color, normal) * colorMult;\n                break;\n            } else if (materialType == REFLECTION) {\n                curDir = reflect(curDir, normal);\n                curPos = worldPos + curDir * 1e-5;\n            } else if (materialType == REFRACTION) {\n                curDir = refraction(normalize(curDir + randVals * 0.01), normalize(normal), n1, nEnter);\n                curPos = worldPos + curDir * 1e-5;\n                n1 = nEnter;\n            }\n        } else {\n            fragColor.rgb = texture(iChannel1, curDir).rgb;\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    fragColor = texture(iChannel0, uv) + texture(iChannel1, uv);\n}","name":"Buffer B","description":"","type":"buffer"}]}