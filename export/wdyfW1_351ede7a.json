{"ver":"0.1","info":{"id":"wdyfW1","date":"1607005242","viewed":324,"name":"Rotating alternating squares ","username":"AI","description":"Uncomment the last line to see the colorful version.","likes":9,"published":3,"flags":0,"usePreview":0,"tags":["checkerboard","squares","generativeart","creativecoding"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265358979323846\n\nvec2 rotate2D(vec2 st, float angle){\n    st -= 0.5;\n    st =  mat2(cos(angle),-sin(angle),\n                sin(angle),cos(angle)) * st;\n    st += 0.5;\n    return st;\n}\n\nvec2 tile(vec2 st, float zoom,float rotD){\n    st *= zoom;\n     if(rotD==1.) {\n        st.x+=.5;\n        st.y+=.5;\n     }\n    return fract(st);\n}\n\nfloat square(vec2 st, vec2 side){\n    vec2 border = vec2(0.5)-side*0.5;\n    vec2 pq = smoothstep(border,border+.01,st);\n    pq *= smoothstep(border,border+.01,vec2(1.0)-st);\n    return pq.x*pq.y;\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec2 uv = fragCoord.xy/iResolution.y;\n    float color;\n    float Nsquares=4.;\n    float rotDirection=0.;\n\n\tuv = rotate2D(uv,-sin(iTime)*PI*.5);\n    rotDirection=step(0.,sin(iTime));\n    uv = tile(uv,Nsquares,rotDirection);\n    uv = rotate2D(uv,PI/4.-sin(iTime)*PI*0.25);\n    if (rotDirection==1.)\n        color = 1.0-square(uv,vec2(0.7));\n    else \n    color=square(uv,vec2(0.7));\n    fragColor = vec4(vec3(color),1.0);\n    //fragColor=vec4(color,fract(123.56*sin(.0001*iTime)),fract(241.56*sin(.0001*iTime)),1.);\n} ","name":"Image","description":"","type":"image"}]}