{"ver":"0.1","info":{"id":"MtffRf","date":"1512959198","viewed":1038,"name":"Raymarching Grass","username":"TechEpic","description":"Simple grass raymarching\n\nI've found my error in distance field calculation, it runs smoothly in fullscreen on my GTX 1070.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["grass","raymarcher"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Change if you have performance issues (Or a better GPU than me)\n#define rend 1000.\n\n//IQ's Noise\nfloat pn( in vec3 p ) {\n    vec3 ip = floor(p);\n    p = fract(p);\n    p *= p*(3.0-2.0*p);\n    vec2 uv = (ip.xy+vec2(37.0,17.0)*ip.z) + p.xy;\n    uv = textureLod( iChannel2, (uv+ 0.5)/256.0, 0.0 ).yx;\n    return mix( uv.x, uv.y, p.z );\n}\n\n//Dave Hoskins' random function\nvec2 rand(vec2 p) {\n    vec3 p3;\n    for(int i = 0; i < 4; i++) {\n\t\tp3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    \tp3 += dot(p3, p3.yzx+19.19);\n    }\n    vec2 ret = fract((p3.xx+p3.yz)*p3.zy);\n    return ret*0.8+0.1;\n}\n\nfloat dotNoise(vec2 uv) {\n\tfloat col = 0.;\n\tvec2 loop;\n\tvec2 pos = rand(floor(uv+loop));\n\tfloat dist = length(fract(uv)-pos-loop)/3.;\n\tcol = max(1.-dist*10., col);\n\treturn col;\n}\n\nint tex = -2;\nfloat stepping = 1.0;\nvec3 col = vec3(0.0);\nvoid setStep(float num) {\n    if(num < stepping) {\n    \tstepping = num;\n    }\n    if(stepping < 0.1) {\n    \tstepping = 0.1;\n    }\n}\n\nbool check(vec3 coord) {\n    stepping = 999999999999999999999999.;\n    coord.y += pn(vec3(coord.x/250., coord.z/250., 0.))*100.;\n   \tsetStep(coord.y+39.);\n    if(coord.y < -50.) {\n    \ttex = 0;\n        return true;\n    }\n    float grass;\n    if(coord.y < -40.) {\n    \tgrass = dotNoise(coord.xz / 4.) * 10.;\n        setStep(1.-grass+coord.y);\n    }\n    if(coord.y < -50. + grass) {\n    \ttex = 1;\n        return true;\n    }\n    return false;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = fragCoord.xy / iResolution.x;\n    uv.x -= 0.5;\n    uv.y -= iResolution.y/iResolution.x/2.0;\n    col = vec3(0.0,0.7,1.0);\n    vec3 rp = vec3(0., 50.-pn(vec3(0., iTime*0.4, 0.))*100., iTime*100.);\n    vec3 rv = vec3(uv,0.5);\n    rv = normalize(rv);\n    float dist = 0.0;\n    while(dist < rend && !check(rp)) {\n        dist += stepping;\n        rp += rv*stepping;\n        float c = length(rv);\n        if(c < 1.0) {\n        \tc = 1.0;\n        }\n    }\n    float castdist = dist;\n    dist = 0.0;\n    if(tex == 0) {\n        col = texture(iChannel0, vec2(rp.x/200.0, rp.z/200.0)).xyz;\n    }\n    \n    if(tex == 1) {\n        col = vec3(0.1, 0.8, 0.1);\n    }\n     \n    rv = vec3(0.3, 1., 0.5);\n   \trv = normalize(rv)/2.0;\n    rp += rv*3.0;\n    while(dist < rend/3.0 && !check(rp)) {\n        dist += stepping;\n        rp += rv*stepping;\n    }\n    if(dist < rend/3.0) {\n    \tcol /= 2.0;\n    }\n    castdist *= castdist;\n   \tcol = vec3(mix(col.x,0.0,castdist/(rend*rend)),mix(col.y,0.7,castdist/(rend*rend)),mix(col.z,1.0,castdist/(rend*rend)));\n\tfragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}