{"ver":"0.1","info":{"id":"lXSBzt","date":"1729812601","viewed":134,"name":"Khronos PBR Neutral tonemapping","username":"chronos","description":"Khronos PBR Neutral tonemapping","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["tonemapping","pbr","khronos","neutral"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// Testing \"Khronos PBR Neutral tone mapper\" by Emmett Lalish\n// https://modelviewer.dev/examples/tone-mapping#commerce\n\n// See explanation: https://www.youtube.com/watch?v=iQ3m0CfuSmg\n\n// The following is code taken from https://modelviewer.dev/examples/tone-mapping\nfloat startCompression = 0.8 - 0.04;\nfloat desaturation = 0.15;\n\nvec3 CommerceToneMapping( vec3 color )\n{\n    float x = min(color.r, min(color.g, color.b));\n    float offset = x < 0.08 ? x - 6.25 * x * x : 0.04;\n    color -= offset;\n\n    float peak = max(color.r, max(color.g, color.b));\n    if (peak < startCompression) return color;\n\n    float d = 1. - startCompression;\n    float newPeak = 1. - d * d / (peak + d - startCompression);\n    color *= newPeak / peak;\n\n    float g = 1. - 1. / (desaturation * (peak - newPeak) + 1.);\n    return mix(color, newPeak * vec3(1, 1, 1), g);\n}\n// End of code taken from https://modelviewer.dev/examples/tone-mapping\n\nvec3 test_color(vec2 fragCoord)\n{\n// The following is based on: \"ACES Cinematic Tonemapping\" by afl_ext https://www.shadertoy.com/view/XsGfWV \n\tvec2 position = (fragCoord/iResolution.xy)* 2.0 - 1.0;\n    position.x += iTime * 0.2;\n\n\tvec3 color = pow(sin(position.x * 4.0 + vec3(0.0, 1.0, 2.0) * 3.1415 * 2.0 / 3.0) * 0.5 + 0.5, vec3(2.0)) * (exp(abs(position.y) * 4.0) - 1.0);;\n    return  color;\n// End of code from \"ACES Cinematic Tonemapping\" \n}\n\n\nfloat sRGBencode(float C_linear) { return C_linear > 0.0031308 ? (1.055 * pow(C_linear, 1./2.4) - 0.055) : (12.92 * C_linear); }\nvec3 sRGBencode(vec3 C_linear) { C_linear = clamp(C_linear, 0., 1.); return vec3(sRGBencode(C_linear.x), sRGBencode(C_linear.y), sRGBencode(C_linear.z)); }\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.y;\n    float ps = 1./iResolution.y;\n\n    vec3 in_color = vec3(uv.x);\n    vec3 graph = smoothstep(-.75/255.,  .75/255., abs(CommerceToneMapping(in_color)-vec3(uv.y))-0.0001);\n    \n    vec3 out_color = test_color(fragCoord);\n    \n    \n    vec3 sphere_color = vec3(0.15,.5,.95);\n    \n    \n    // fake sphere\n    //---------------------------------------------------------------------\n    vec2 center = vec2(1.25, .5);\n    float d = length(uv - center); // dist from center\n    float r = .35; // radius\n    float h = sqrt(max(r*r-d*d, 0.)); // height\n    vec3 p = vec3(uv - center, h); // position on sphere\n    vec3 n = normalize(p); // normal\n    vec3 v = normalize(vec3(0,0,1.5)-p); //view dir\n    vec3 l = normalize(vec3(1)); // light dir\n    \n    sphere_color *= 1.5*max(dot(n, l), 0.);\n    vec3 k_S = vec3(1) * max(.9*dot(n, normalize(l+v)), 0.);\n    sphere_color += 8.0*pow(k_S, vec3(20.));\n    //---------------------------------------------------------------------\n    \n    out_color = mix(out_color, sphere_color, smoothstep(ps, -ps, d-r));\n    \n    vec2 mouse = length(iMouse.xy) < 10. ? (vec2(.5)+sin(iTime))*iResolution.x : iMouse.xy;\n    if(fragCoord.x > mouse.x)\n        out_color = CommerceToneMapping(out_color);\n    \n    out_color = clamp(out_color, 0.,1.); // only clamp after tonemapping!\n    \n    out_color = mix(vec3(0), out_color, graph); // draw graph\n    \n    fragColor = vec4(sRGBencode(out_color),1.0);\n}","name":"Image","description":"","type":"image"}]}