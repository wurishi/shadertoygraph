{"ver":"0.1","info":{"id":"Md3BDl","date":"1527175001","viewed":245,"name":"Lines&Dots","username":"lowww","description":"exercising an idea in GLSL.\n\nThe idea is to divide the screen in tiles (8x8) and loop through the tiles and draw a line either / or \\\n\nThis is probably not very performant, happy to take suggestions. Here to learn.\n\nYes, this is kind of 10 PRINT CHR$(205\n","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["lines","random","shader","art"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define width 8\n#define height 8\n#define thickness 0.01\n#define smooth 0.005\n#define dotsize 0.03\n\nfloat distanceToLine(vec2 p1, vec2 p2, vec2 point) {\n    float a = p1.y - p2.y;\n    float b = p2.x - p1.x;\n    return abs(a * point.x + b * point.y + p1.x * p2.y - p2.x * p1.y) / sqrt(a * a + b * b);\n}\n\nvec2 midpoint(vec2 p1, vec2 p2) {\n    return vec2((p1.x + p2.x) / 2.0, (p1.y + p2.y) / 2.0);\n}\n\nfloat clampToLine(vec2 p1, vec2 p2, vec2 point, float line) {\n    vec2 mp = midpoint(p1, p2);\n    float maxDistance = distance(mp, p1);\n    if (distance(mp, point) > maxDistance) {\n        return 0.0;\n    } else {\n        return line;\n    } \n}\n\nfloat drawPoint(vec2 uv, vec2 c, float radius) {\n    float aspect = iResolution.x / iResolution.y;\n    c.x *= aspect;\n    uv.x *= aspect;\n\n    return 1.0 - smoothstep(0.0, smooth, distance(uv, c) - radius);\n}\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord/iResolution.xy;\n    float color = 0.0;\n\n    // divide the screen in square steps\n    float stepW = 1.0 / float(width);\n    float stepH = 1.0 / float(height);\n    \n    for(int x = 0; x < width; x++) {\n        for(int y = 0; y < height; y++) {\n            // debug points\n            vec2 p1 = vec2(float(x) * stepW, float(y) * stepH);\n            float point = drawPoint(uv, p1, dotsize);\n            // color += point;\n\n            // draw lines\n            vec2 a = vec2(p1.x, p1.y);\n            vec2 b = vec2(p1.x + stepW, p1.y + stepH);\n            if (rand(p1) > 0.5) { \n                a = vec2(p1.x + stepW, p1.y);\n                b = vec2(p1.x, p1.y + stepH);\n            }\n\n            float distance = distanceToLine(a, b, uv);\n            float line = smoothstep(thickness / 2.0, thickness / 2.0 - smooth, distance);\n            line = clampToLine(a, b, uv, line);\n            color += line;\n        }\n    }  \n   \n    fragColor = vec4(vec3(color), 1.0);\n}","name":"Image","description":"","type":"image"}]}