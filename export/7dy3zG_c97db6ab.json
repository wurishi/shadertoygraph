{"ver":"0.1","info":{"id":"7dy3zG","date":"1631728180","viewed":51,"name":"OK_Parcours_3_Exo_1","username":"AVKOR","description":"Exercice libre d'écriture d'un shader 2D.\n\nA la différence de processing, on ne va pas venir définir une primitive au niveau global de l'image, mais déterminer pour chaque pixel la couleur qu'il va prendre, à partir de sa position.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["artline"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 color1 = vec3(1., 0., 1.);\nvec3 color2 = vec3(0., 0., 0.5);\n\n// gradient function \nfloat gradient(float x)\n{\n    return 0.2 + 0.8 * x*x;\n}\n\n// two colors alternating function with gradient \nvec3 dames(vec3 color1, vec3 color2, vec2 r)\n{\n    ivec2 tmp = ivec2(r*100.)%20 -ivec2(12, 15);\n    if(tmp.x <= 0 && tmp.y > 0 || tmp.x > 0 && tmp.y <= 0)\n    {\n        return color1 * gradient(r.x) * gradient(1. - r.y);\n    }\n    else\n        return color2 * gradient(1. - r.x);\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n\n    if(iMouse.z > 0.) // button is down\n\t{\n        // two colors alternating mixing with gradient\n        fragColor = vec4(dames(color1, color2, uv.xy), 1.);\n\t}\n    else  // button is up\n    {\n        // two colors gradient mixing\n        fragColor = vec4(color1 * gradient(uv.x) + color2 * gradient(1. - uv.x), 1.); \n    }\n\n}","name":"Image","description":"","type":"image"}]}