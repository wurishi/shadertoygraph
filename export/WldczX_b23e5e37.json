{"ver":"0.1","info":{"id":"WldczX","date":"1609625206","viewed":133,"name":"paper isogrid simple","username":"acpopescu","description":"staedtler isometric style grid -  https://toolguyd.com/isometric-graph-paper/, https://midoco.ca/products/staedtler-isometric-grid-bond-paper\n\nUsed IQ's analytical filtered grid - https://www.shadertoy.com/view/XtBfzz - two rotated grids.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["grid","isometric"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// modified https://www.shadertoy.com/view/XtBfzz\n// Original license Inigo Quilez.\n// For my added bits \n// The MIT License\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n// IQ's license (analytical filtered grid):\n// The MIT License\n// Copyright Â© 2017 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// https://iquilezles.org/articles/filterableprocedurals\n//  \n// checker, 2D, box filter: https://www.shadertoy.com/view/XlcSz2\n// checker, 3D, box filter: https://www.shadertoy.com/view/XlXBWs\n// checker, 3D, tri filter: https://www.shadertoy.com/view/llffWs\n// grid,    2D, box filter: https://www.shadertoy.com/view/XtBfzz\n// xor,     2D, box filter: https://www.shadertoy.com/view/tdBXRW\n\n// Noise function from:\n//https://www.shadertoy.com/view/4sfGzS\nfloat noise( in vec3 x )\n{\n    #if 1\n    \n    vec3 i = floor(x);\n    vec3 f = fract(x);\n\tf = f*f*(3.0-2.0*f);\n\tvec2 uv = (i.xy+vec2(37.0,17.0)*i.z) + f.xy;\n\tvec2 rg = textureLod( iChannel0, (uv+0.5)/256.0, 0.0).yx;\n\treturn mix( rg.x, rg.y, f.z );\n    \n    #else\n    \n    ivec3 i = ivec3(floor(x));\n    vec3 f = fract(x);\n\tf = f*f*(3.0-2.0*f);\n\tivec2 uv = i.xy + ivec2(37,17)*i.z;\n\tvec2 rgA = texelFetch( iChannel0, (uv+ivec2(0,0))&255, 0 ).yx;\n    vec2 rgB = texelFetch( iChannel0, (uv+ivec2(1,0))&255, 0 ).yx;\n    vec2 rgC = texelFetch( iChannel0, (uv+ivec2(0,1))&255, 0 ).yx;\n    vec2 rgD = texelFetch( iChannel0, (uv+ivec2(1,1))&255, 0 ).yx;\n    vec2 rg = mix( mix( rgA, rgB, f.x ),\n                   mix( rgC, rgD, f.x ), f.y );\n    return mix( rg.x, rg.y, f.z );\n    \n    #endif\n}\n\n\n// --- analytically box-filtered grid ---\n//#define UNFILTERED\n\nconst float TILING =32.0;\nconst float N = 20.0; // grid ratio\nconst float sinp6 = 0.5;\nconst float cosp6 = 0.86602540378443864676372317075294;\nconst float sinp3 = cosp6;\nconst float cosp3 = sinp6;\nconst float ctgp3 = cosp3/sinp3;\n\n// The main insight is that an isogrid is simply a skewed grid. \n//\n//    The isogrid function take a screen UV coord, and convert it into the skewed grid\n// in order to pass the skewed coords to either the unfiltered grid function or to the \n// analytically filtered grid.\n\n// two grids\n/*\n\n                       ^\n                       |Yscreen\n                       |\n                ^      |     ^\n          Ygrid2 \\     |     /Ygrid1\n                  \\    |    /\n                   \\   |   /-----* Point from XscrenYScreen to project on Xgrid1Ygrid1 to find signal.                                                          \n                    \\  | Yo?    /                                                              \n                     \\ | /     /\n                      \\|/ Xo? / \n                       +--------------------->\n                                             Xscreen, Xgrid1, Xgrid2\n                                                                                            \n*/ \n\n// Y axis skewed, angle to X axis is 60 deg\nvec2 isogrid(vec2 orig)\n{\n    return vec2(orig.x - orig.y * ctgp3, orig.y / sinp3);\n}\n\n// Y axis skewed, angle to X axis is 120 deg\nvec2 isogrid2(vec2 orig)\n{\n    return vec2(orig.x + orig.y * ctgp3, orig.y / sinp3);\n}\n\n\n// --- unfiltered grid ---\n\nfloat gridTexture( in vec2 p )\n{\n    vec2 pct = isogrid(p);\n    vec2 pct2 = isogrid2(p);\n    // coordinates\n    // note: changed from original version for debugging\n    vec2 i1 = step( vec2(1.0/N), fract(pct));\n    vec2 i2 = step( vec2(1.0/N), fract(pct2));\n    //pattern\n    return (i1.x*i1.y + 2.0*i2.x*i2.y)/3.0;   // grid (N=10)\n    \n    // other possible patterns are these\n    //return 1.0-i.x*i.y;           // squares (N=4)\n    //return 1.0-i.x-i.y+2.0*i.x*i.y; // checker (N=2)\n}\n\n\n// first grid\nfloat gridTextureGradBox( in vec2 pct, in vec2 p_ddx, in vec2 p_ddy )\n{\n    vec2 p = isogrid(pct);\n    vec2 ddx = isogrid(p_ddx);\n    vec2 ddy = isogrid(p_ddy);\n\t// filter kernel\n    vec2 w = max(abs(ddx), abs(ddy)) + 0.01;\n\n\t// analytic (box) filtering\n    vec2 a = p + 0.5*w;                        \n    vec2 b = p - 0.5*w;           \n    vec2 i = (floor(a)+min(fract(a)*N,1.0)-\n              floor(b)-min(fract(b)*N,1.0))/(N*w);\n    //pattern\n    return (1.0-i.x)*(1.0-i.y);\n}\n\n\n// second grid\nfloat gridTextureGradBox2( in vec2 pct, in vec2 p_ddx, in vec2 p_ddy )\n{\n    vec2 p = isogrid2(pct);\n    vec2 ddx = isogrid2(p_ddx);\n    vec2 ddy = isogrid2(p_ddy);\n\t// filter kernel\n    vec2 w = max(abs(ddx), abs(ddy)) + 0.01;\n\n\t// analytic (box) filtering\n    vec2 a = p + 0.5*w;                        \n    vec2 b = p - 0.5*w;           \n    vec2 i = (floor(a)+min(fract(a)*N,1.0)-\n              floor(b)-min(fract(b)*N,1.0))/(N*w);\n    //pattern\n    return (1.0-i.x)*(1.0-i.y);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float ar =  1.0f / iResolution.y; // move coords into 0,1 range, bottom left is origin, Y up, X right\n    float nr = iResolution.x/160.0;\n    vec2 screenUV = fragCoord.xy * TILING * ar;\n    vec2 ddx = (vec2(1.0,0.0)) * TILING * ar;\n    vec2 ddy = (vec2(0.0,1.0)) * TILING * ar;\n#ifdef UNFILTERED\n    vec3 matColor = vec3(1.0)*gridTexture( screenUV );\n#else\n    vec3 matColor = vec3(1.0)*gridTextureGradBox( screenUV, ddx, ddy ) * gridTextureGradBox2( screenUV, ddx, ddy );\n#endif\n    matColor = (vec3(1.0) - matColor) * mix(vec3(0.6,0.6,1.0), vec3(1.0,1.0,1.0), 0.2*noise(nr*vec3(screenUV,0.0))) + matColor;\n    fragColor = vec4(matColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}