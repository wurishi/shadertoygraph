{"ver":"0.1","info":{"id":"4lVXRc","date":"1485453847","viewed":199,"name":"filters","username":"connor_breen","description":"This is a disaster","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["filters"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Originally by Nikos Papadopoulos, 4rknova / 2015\n// Heavily modified by Dr. Sajid Farooq, 2016\n//more filters added by Connor Breen\n//The blur matrix. Since there are 9 pixels, each weight is 1/9 = 0.111 \n// to ensure that each pixel is averaged properly\nmat3 blur = mat3(\n 0.111, 0.111, 0.111, // first column (not row!)\n 0.111, 0.111, 0.111, // second column\n 0.111, 0.111, 0.111 // third column\n);\n\nmat3 edgeDetection = mat3(\n -1.0, -1.0, -1.0, // first column (not row!)\n -1.0, 8, -1.0, // second column\n -1.0, -1.0, -1.0 // third column\n);\n\nmat3 sharpen = mat3(\n 0., -1, 0.0, // first column (not row!)\n -1, 5, -1, // second column\n 0., -1, 0.0 // third column\n);\n\nmat3 supersharpen = mat3(\n 0., -5, 0.0, // first column (not row!)\n -5, 21, -5, // second column\n 0.,-5, 0.0 // third column\n);\n//add sampler2d to this\nvec3 nya(const int x, const int y, in vec2 fragCoord, sampler2D tex, vec3 res)\n{\n vec2 uv = fragCoord.xy / iResolution.xy * res.xy;\n uv = (uv + vec2(x, y)) / res.xy ;\n return texture(tex, uv).xyz;\n}\nvec3 filter2(in vec2 fragCoord, mat3 kernel, sampler2D tex, vec3 res)\n{\n vec3 sum = nya(-1, -1, fragCoord, tex, res) * kernel[0][0]\n + nya(-1, 0, fragCoord, tex, res) * kernel[0][1]\n + nya(-1, 1, fragCoord, tex, res) * kernel[0][2]\n + nya( 0, -1, fragCoord, tex, res) * kernel[1][0]\n + nya( 0, 0, fragCoord, tex, res) * kernel[1][1]\n + nya( 0, 1, fragCoord, tex, res) * kernel[1][2]\n + nya( 1, -1, fragCoord, tex, res) * kernel[2][0]\n + nya( 1, 0, fragCoord, tex, res) * kernel[2][1]\n + nya( 1, 1, fragCoord, tex, res) * kernel[2][2];\n \n return sum;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\nvec2 fc = fragCoord.xy;\n/* float a = 0.07;\n float b = 25.0;\n float c = 3.0;\n float d = 2.0;\n vec2 uv = fragCoord.xy / iResolution.xy;\n uv.y = uv.y + (a * sin(uv.x *b  + (sin(iTime*c)*d))) ;\n vec3 col1;\n vec4 tex = texture(iChannel1,uv);\n col1 = tex.rgb;\n*/\n //vec3 cf = filter(fc, blur);\n vec3 cf = filter2(fc, supersharpen, iChannel0, iChannelResolution[0]);\n\n\n vec3 cf2 = filter2(fc, edgeDetection, iChannel1, iChannelResolution[1]);\n \n fragColor = vec4(cf/cf2, 1);\n}","name":"Image","description":"","type":"image"}]}