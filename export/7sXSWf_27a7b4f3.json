{"ver":"0.1","info":{"id":"7sXSWf","date":"1619349963","viewed":85,"name":"2d sdf experiments","username":"tarnith","description":"2d sdf experiments with feedback","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["2dsdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy/iResolution.xy;\n\tfragColor = texture(iChannel0,uv); \n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define S(r) smoothstep(0., -50./iResolution.y, r)\n#define FeedbackEnable true\n#define FeedbackScale .5\n\nfloat sdEquilateralTriangle( in vec2 p ) //from IQ\n{\n    const float k = sqrt(3.0);\n    p.x = abs(p.x) - 1.0;\n    p.y = p.y + 1.0/k;\n    if( p.x+k*p.y>0.0 ) p = vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n    p.x -= clamp( p.x, -2.0, 0.0 );\n    return -length(p)*sign(p.y);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy-.5*iResolution.xy) /iResolution.y;\n\t\t\n\tvec3 col = vec3(0.);\n\t\n\tvec2 fractionalUV = fract( uv*20.)-.5;\n\n\tfloat calcOutput = 0.;             \n\tfloat delayedOutput = 0.;          \n    float t = iTime*2.;                 \n\tfloat tDel = (t-5.);        \n\t\n    for (float y=-1.; y<=1.; y++){      \n        for (float x=-1.; x<=1.; x++){\n\n            vec2 offset = vec2(x, y);   \n\n\t\t\tfloat d = length(fractionalUV+offset);  \n\t\t\tfloat r = mix(.3, .5, sin((t)+length(\n            sin(\n            fractionalUV*(\n            sin(iTime)*.05+.05)*(uv*2.)\n            )\n            *100.)\n            *3.)\n            *.5+(sin(iTime)*.5+.5)*4.*d);\n         \tcalcOutput += S(d-r);\n\n\t\t\tfloat rDel = mix(r, r*.8, d);\n\t\t\tdelayedOutput += S(d-rDel);\n\n            col = vec3(calcOutput);\n            col -= delayedOutput;\n\n        }\t\n\t}\n\n\n\tvec4 color = vec4(col, 1.0);\n    vec2 texuv = fragCoord.xy / iChannelResolution[0].xy;\n    texuv += vec2(-.5);\n    texuv *= 1.1;\n    texuv += vec2(+.5);\n    vec4 feedback = texture(iChannel0,texuv);\n    \n    \n    if (FeedbackEnable) color +=(-feedback*(sin(iTime*FeedbackScale)*.5+.5));\n        \n    fragColor = color;\n    \n \n}\n\n","name":"Buffer A","description":"","type":"buffer"}]}