{"ver":"0.1","info":{"id":"4fj3WD","date":"1704233538","viewed":90,"name":"Swirling Soul ","username":"brunorealities","description":"dynamic astral formation with swirling hues, leveraging trigonometric functions and dot product manipulations for a hypnotic visual loop.","likes":4,"published":1,"flags":2,"usePreview":0,"tags":["noise","distortion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//inspired by new day of netgrind\n\n#define COUNT 218.0\n\nvec3 pal(in float t) {\n    vec3 a =  vec3(0.184,0.776,0.737);// Updated color 1\n    vec3 b = vec3(0.702,0.702,0.702); // Updated color 2\n    vec3 c = vec3(0.788,0.188,0.910); // Updated color 3\n    vec3 d = vec3(0.510,0.510,0.510);  // Updated color 4\n  \n \n    // Return the color by applying a cosine function to create smooth transitions between colors\n    return a + b * cos(6.28318 * (c * t + d));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t = iTime*6.28*0.1;\n\n    // Normalized pixel coordinates (from 0 to 1)\n    fragCoord -= iResolution.xy * .5;\n    vec2 uv = fragCoord/iResolution.xx * 15.;\n    float d = length(uv);\n    float f = 0.;\n    float phase = t;\n    float dir = 1.;\n    float a = 0.;\n    float len = -d*(cos(t) * .2 + .2);\n    \n    for(float i = 0.; i < COUNT; i+= 1.)\n    {\n    float p = phase + (sin(i + t)-1.)*.05+len;\n        a = dot(normalize(uv), normalize(vec2(cos((p)*dir), sin((p)*dir))));\n        a = max(0.,a);\n        a = pow(a,20.);\n        dir *= -1.;\n        phase += mod(i , 6.28);\n        \n        f +=a;\n        f = abs(mod(f + 1., 2.)-1.);\n       //f =   fract(cos(f + 20. * sin(f + 10.))*0.01);\n       \n      f = cos(abs(f * 1.3));\n        \n    }\n    \n    float shine = 1.2;\n    float scale = .5;\n    f += shine - d * (scale+sin(t + dot(normalize(uv), vec2(1.,0.))*12.)*0.01);\n    f = max(f, 0.);\n    vec3 pink = vec3(0.984,0.514,0.984);\n    \n   fragCoord += iResolution.xy * .5;\n\n    vec2 uv0 = fragCoord/iResolution.xx;\n    vec3 tex = texture(iChannel0, uv0).rgb;\n\n    vec3 palCol = pal(phase);\n   //color\n    vec3 c = mix(vec3(0.), pink, f);\n   //webcam \n    //vec3 c = mix(vec3(0.), tex, f);\n    c = min(max(c, 0.),1.);\n        c = 1.0-vec3(.6, .4, .3)*3.*(1.0-c);\n\n    // Output to screen\n    fragColor = vec4(c,1.);\n}","name":"Image","description":"","type":"image"}]}