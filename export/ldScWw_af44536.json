{"ver":"0.1","info":{"id":"ldScWw","date":"1492292320","viewed":1817,"name":"Grain - Post Processing","username":"juniorxsound","description":"A tiny and basic grain post processing shader","likes":10,"published":3,"flags":2,"usePreview":1,"tags":["postprocessing","webcam","fragment","grain"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat grain (vec2 st) {\n    return fract(sin(dot(st.xy, vec2(17.0,180.)))* 2500. + iTime);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //Coords\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    //Produce some noise based on the coords\n    vec3 grainPlate = vec3(grain(uv));\n    \n    //Get the webcam\n    vec4 webcam = texture(iChannel0, uv);\n    \n    //Mix the two signals together\n    vec3 mixer = mix(webcam.rgb, grainPlate, .1);\n\t\n    \n    fragColor = vec4(mixer,1.0); \n}","name":"Image","description":"","type":"image"}]}