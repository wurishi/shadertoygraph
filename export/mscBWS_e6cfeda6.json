{"ver":"0.1","info":{"id":"mscBWS","date":"1697574503","viewed":23,"name":"bubble cg hmw 1","username":"arncpp","description":"hmw1","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["beginner"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.141592653\nvec3 sunDirection = normalize(vec3(0.0, 0.3, 1.0));\nfloat refractiveIndex = 1.5;\nfloat heightAboveGround = 1.5;\nvec3 cameraPosition;\nvec3 cameraDirection;\n\nvec3 getSkyColor(vec3 direction) {\n    return vec3(5. * sin(0.5 * iTime) * 0.53, 0.81, 2.);\n}\n\nfloat hash(vec2 p) {\n    vec2 uniqueValues = vec2(271.319, 413.975);\n    float randomMultiplier = 1217.13;\n    return 0.5 * (sin(dot(p, uniqueValues) + randomMultiplier * p.x * p.y)) + 0.5;\n}\n\n\nfloat noise(vec2 p) {\n    vec2 fractional = fract(p);\n    vec2 integer = floor(p);\n    vec2 smoothCurve = fractional * fractional * (2.5 - 1.5 * fractional);\n    float mix1 = mix(hash(integer + vec2(0,0)), hash(integer + vec2(1,0)), smoothCurve.x);\n    float mix2 = mix(hash(integer + vec2(0,1)), hash(integer + vec2(1,1)), smoothCurve.x);\n\n    return mix(mix1, mix2, smoothCurve.y);\n}\n\n\nvec3 getBackground(vec3 direction) {\n    if (direction.y >= 0.0) {\n        return getSkyColor(direction);\n    }\n    vec3 intersectionPoint = cameraPosition - direction * ((cameraPosition.y + heightAboveGround) / direction.y);\n    float fog = exp(length(intersectionPoint) / -20.0);\n    return getSkyColor(direction) * (1.0 - fog);\n}\n\n\nvec3 rotateX(vec3 vector, float angleX) {\n    float cosAngleX = cos(angleX);\n    float sinAngleX = sin(angleX);\n    float tempY = vector.y * cosAngleX - vector.z * sinAngleX;\n    vector.z = vector.z * cosAngleX + vector.y * sinAngleX;\n    vector.y = tempY;\n    return vector;\n}\n\n\nvec3 rotateCamera(vec3 vector) {\n    float angleX = sin((iTime - 3.0) * 0.3) * 0.5 + 0.15;\n    float angleY = iTime * 0.2 - 1.0;\n\n    if (iMouse.x != 0.0) {\n        angleX = (0.5 - iMouse.y / iResolution.y) * PI * 1.2;\n        angleY = (-iMouse.x / iResolution.x + 0.5) * PI * 2.0;\n    }\n\n    vector = rotateX(vector, angleX);\n    float cosAngleY = cos(angleY);\n    float sinAngleY = sin(angleY);\n    float tempX = vector.x * cosAngleY - vector.z * sinAngleY;\n    vector.z = vector.z * cosAngleY + vector.x * sinAngleY;\n    vector.x = tempX;\n    return vector;\n}\n\nfloat side;\n\n\nvec3 getGlassColor(float distance) {\n    distance *= -0.9;\n    return vec3(exp(distance * 0.1), exp(distance * .9), exp(distance * 0.0));\n}\n\nvec3 intersectionPosition;\nvec3 intersectionNormal;\n\n\nfloat intersectSphere(vec3 center, float radius) {\n    vec3 relativePosition = cameraPosition - center;\n    relativePosition /= radius;\n    relativePosition -= cameraDirection * dot(cameraDirection, relativePosition);\n    if (length(relativePosition) > 1.0) return 0.0;\n\n    float backDistance = sqrt(1.0 - dot(relativePosition, relativePosition));\n    relativePosition -= side * cameraDirection * backDistance;\n\n    vec3 intersectionPoint = relativePosition * radius + center;\n\n    if (dot(cameraDirection, intersectionPoint - intersectionPosition) < 0.0) {\n        intersectionNormal = relativePosition;\n        intersectionPosition = intersectionPoint;\n    }\n    return 1.0;\n}\n\n\nvec3 getColor() {\n    side = 1.0;\n    vec3 colorSum = vec3(0.0);\n    vec3 colorMultiplier = vec3(1.0);\n\n    intersectionPosition = cameraDirection * 1e10;\n    if (intersectSphere(vec3(0.0, 1.0, 0.0), 1.0) != 0.0) {\n        vec3 outsideDirection = normalize(reflect(cameraDirection, intersectionNormal));\n        float fresnel = 0.05 + 0.95 * pow(1.0 - dot(outsideDirection, intersectionNormal), 5.0);\n        colorSum += getBackground(outsideDirection) * colorMultiplier * fresnel;\n        colorMultiplier *= 1.0 - fresnel;\n        side = -1.0;\n        cameraPosition = intersectionPosition;\n        cameraDirection = refract(cameraDirection, intersectionNormal, 1.0 / refractiveIndex);\n\n        for (int i = 0; i < 10; i++) {\n            intersectionPosition = cameraDirection * 1e10;\n            side = 1.0;\n            if (length(intersectionPosition) < 1e9) {\n                colorMultiplier *= getGlassColor(length(intersectionPosition - cameraPosition));\n                float sunIntensity = (dot(intersectionNormal, sunDirection) * 0.5 + 0.5);\n                colorSum += sunIntensity * vec3(1.0, 0.3, 0.1) * colorMultiplier * 0.8;\n                return colorSum;\n            }\n            side = -1.0;\n            for (int j = 0; j < 10; j++) {\n                float t = mix(.2, 1., sin(float(j) / 5. * iTime) * 0.3 + 0.3);\n            intersectSphere(vec3(0.0, 1.0, 0.0), 1.0);\n            float x = noise(vec2(t, 5. * 64.));\n            float y = cos(iTime);\n            float z = sin(iTime);\n            intersectSphere(vec3(x, y, z), t);\n            intersectSphere(vec3(x / 5. + 1., y / 5.+ 1.4, z / 5.+ 1.1), t / 3. + 2.);\n            intersectSphere(vec3(x / 3. + 2., y / 3.+ 1.1, z / 2.3+ 1.3), t / 4.);\n            intersectSphere(vec3(x / 2.5 + 1.2, y / 3.4+ 4.1, z / 5.2+ 2.4), t / 4.2);\n            intersectSphere(vec3(x + 1., y + 2.6, z / 3.+ 3.3), t / 2.);\n            intersectSphere(vec3(x, y, z), t * 10.);\n            }\n            colorMultiplier *= getGlassColor(length(intersectionPosition - cameraPosition));\n            cameraPosition = intersectionPosition;\n            vec3 outsideDirection = normalize(refract(cameraDirection, -intersectionNormal, refractiveIndex));\n            float fresnel = 0.05 + 0.95 * pow(1.0 - dot(outsideDirection, intersectionNormal), 5.0);\n            colorSum += getBackground(outsideDirection) * colorMultiplier * (1.0 - fresnel);\n            colorMultiplier *= fresnel;\n            cameraDirection = reflect(cameraDirection, -intersectionNormal);\n        }\n    } else {\n        return getBackground(cameraDirection);\n    }\n    return colorSum;\n}\n\nvec2 getBubble(vec2 uv, float scale) {\n    if(uv.y > 1.) return vec2(0.);\n    float t = iTime / 2.;\n    vec2 st = uv * scale;\n    vec2 _st = floor(st);\n    vec2 bias = vec2(0., 4. * sin(_st.x*128. + t));\n    float mask = smoothstep(0.1, 0.2, -cos(_st.x*128. + t));\n    st += bias;\n    vec2 _st_ = floor(st);\n    st = fract(st);\n    float size = noise(_st_)*0.07+0.01;\n    vec2 pos = vec2(noise(vec2(t, _st_.y*64.1)) * 0.8 + 0.1, 0.5);\n    if(length(st.xy - pos) < size) {\n        return (st + pos) * vec2(.0, .2) * mask;\n    }\n    return vec2(0.);\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float brightness = mix(1.0, 3.0, sin(2. * iTime) * 0.2 + 0.2);\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv += getBubble(uv, 10.) + getBubble(uv, 1.) + getBubble(uv, 15.) + getBubble(uv, 13.) + getBubble(uv, 3.);\n    cameraPosition = vec3(0.0, 1.0, 0.0);\n    cameraDirection = vec3(uv * 2.0 - 1.0, 2.5);\n    cameraDirection.y *= 9.0 / 16.0;\n\n    cameraDirection = normalize(rotateCamera(cameraDirection));\n\n    cameraPosition -= rotateCamera(vec3(0.0, 0.0, 5.6));\n\n    if (cameraPosition.y < -heightAboveGround) {\n        vec3 direction2 = normalize(rotateCamera(vec3(0.0, 0.0, 1.0)));\n        cameraPosition = cameraPosition - direction2 * ((cameraPosition.y + heightAboveGround) / direction2.y);\n    }\n\n    fragColor = vec4(getColor() * brightness, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}