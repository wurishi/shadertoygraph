{"ver":"0.1","info":{"id":"XtjGzG","date":"1446759742","viewed":163,"name":"shmuplevel","username":"Branch","description":"shmuplevel","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["shmuplevel"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"struct polygon{\n\tvec2 A, B, C;\n};\nfloat sign(vec2 p1, vec2 p2, vec2 p3){\n  return (p1.x - p3.x) * (p2.y - p3.y) - (p2.x - p3.x) * (p1.y - p3.y);\n}\nint PointInTriangle(vec2 pt, vec2 v1, vec2 v2, vec2 v3){\n\tint b1, b2, b3;\n\n\tif(sign(pt, v1, v2) < 0.0) b1=1;\n\tif(sign(pt, v2, v3) < 0.0) b2=1;\n\tif(sign(pt, v3, v1) < 0.0) b3=1;\n\tif((b1 == b2) && (b2 == b3))\n\t\treturn 1;\n\treturn 0;\n}\n\nint PointInTriangle(vec2 pt, polygon X){\n\tint b1, b2, b3;\n\n\tif(sign(pt, X.A, X.B) < 0.0) b1=1;\n\tif(sign(pt, X.B, X.C) < 0.0) b2=1;\n\tif(sign(pt, X.C, X.A) < 0.0) b3=1;\n\tif((b1 == b2) && (b2 == b3))\n\t\treturn 1;\n\treturn 0;\n}\n\nfloat box(vec2 coord, vec2 pos, vec2 size){\n\tif((coord.x<(pos.x+size.x)) &&\n\t   (coord.x>(pos.x-size.x)) &&\n\t   (coord.y<(pos.y+size.y)) && \n\t   (coord.y>(pos.y-size.y)) ) \n\t\treturn 1.0;\n\treturn 0.0;\n}\nfloat sun(vec2 coord, vec2 pos, float size){\n\tif(length(coord-pos)<size)\n\t\treturn 1.0;\n\treturn 0.0;\n}\nfloat rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nmat2 rotate(float Angle)\n{\n    mat2 rotation = mat2(\n        vec2( cos(Angle),  sin(Angle)),\n        vec2(-sin(Angle),  cos(Angle))\n    );\n\treturn rotation;\n}\nfloat sdCapsule( vec2 p, vec2 a, vec2 b, float r ){\n    vec2 pa = p - a, ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return min(floor(length( pa - ba*h ) - r),0.);\n}\nfloat triangle( vec2 coord, vec2 pos, float angle, float thick, float size){\n    vec2 original_coord = coord;\n    coord += pos;\n    coord *= rotate(angle);\n    float collision = 0.0;\n    collision += sdCapsule( coord, vec2( 0.0, 0.333)*size, vec2( 0.3,-0.2)*size, thick );\n    collision += sdCapsule( coord, vec2( 0.0, 0.333)*size, vec2(-0.3,-0.2)*size, thick );\n    collision += sdCapsule( coord, vec2( 0.3,-0.2)*size, vec2(-0.3,-0.2)*size, thick );\n    collision += 3.0*texture( iChannel0, original_coord * 0.6 + vec2(iTime*0.02) ).b * 0.6;\n    collision += 2.5*texture( iChannel0, original_coord * 0.1 + vec2(iTime*0.001) ).b * 0.4;\n    return -min(max(-collision,0.0),1.0);\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tvec4 tulos;\n\tvec4 lopullinentulos=vec4(1.0);\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfloat aspectCorrection = (iResolution.x/iResolution.y);\n\tvec2 coordinate_entered = 2.0 * uv - 1.0;\n\tvec2 coord = vec2(aspectCorrection,1.0) *coordinate_entered;\n    vec2 ori_coord=coord;\n\tfor(float rgbare=0.0; rgbare<2.0; rgbare++){\n\tcoord = vec2(aspectCorrection,1.0) *coordinate_entered * (1.+0.2*cos(iTime*0.05));\n\tcoord.x*=1.0+rgbare*0.02;\n    coord.x+=iTime/4.;\n\ttulos=vec4(vec3(0.0/255.0, 0.0/255.0, 0.0/255.0),1.0);\n    coord.y+=.75;\n    float height = (sin(coord.x*2.+sin(coord.x)*8.)+sin(coord.x*10.)/8.+sin(coord.x*5.)/2.+sin(coord.x*2.)*2.)/15.0;\n    float height2 = (sin(coord.x*2.+sin(iTime)*8.)+sin(iTime/8.)/8.+sin(coord.x*5.)/2.+sin(coord.x*2.+iTime)*2.)/15.0;\n    float height3 = (sin(coord.y*4.+sin(iTime/16.)*3.+sin(coord.x+iTime/88.)*16.)+sin(iTime/7.)/4.+sin(coord.y*2.)/8.+sin(coord.x*2.+iTime)*9.)/12.0;\n   \ttulos.rgb -= \t\tmax(8.0 * (coord.y+height),0.)*(vec3(1.0,0.5,0.3) + floor(mod(coord.x*10.+coord.y*10.,2.))/2.) * \n        \t\t\t\tsdCapsule( \n         \t\t\t\tcoord\n                            + vec2(\n                                0.0,\n                                height), \n         \t\t\t\tvec2(0.0,0.0), \n         \t\t\t\tvec2(80000.0,0.0), \n         \t\t\t\t0.2);\n\t\n   \t tulos.rgb+= vec3(0.0,0.7,1.0) * max(8.0 * (-0.1+coord.y+height2),0.)/32.;\n   \t tulos.rgb+= vec3(0.9,0.7,0.0) * max(8.0 * (-0.1+coord.y+height3),0.)/64.;\n\t\n        \n\tif(rgbare==0.0)\n\t\tlopullinentulos.r=tulos.r;\n\tif(rgbare==1.0)\n\t\tlopullinentulos.gb=tulos.gb;\n\t}\n\tlopullinentulos.xyz=lopullinentulos.xyz*(1.05-0.1*mod(fragCoord.y,2.0));\n\tfragColor = lopullinentulos;\n}","name":"","description":"","type":"image"}]}