{"ver":"0.1","info":{"id":"dtBBWz","date":"1694436485","viewed":121,"name":"Shader of rubber duck â„–2","username":"Overbyaka","description":"Cute rubber duck. #2\nOnly Spheres! (except hat)","likes":6,"published":1,"flags":32,"usePreview":0,"tags":["3d","beginner","shader","duck"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3Rr","filepath":"/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","previewfilepath":"/media/ap/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int MAX_MARCHING_STEPS = 255;\nconst float MIN_DIST = 0.0;\nconst float MAX_DIST = 100.0;\nconst float PRECISION = 0.001;\nconst float EPSILON = 0.0005;\nconst float PI = 3.14159265359;\nconst float SPEED = 4.;\nconst vec3 COLOR_BACKGROUND = vec3(.555, .876, .980);\nconst vec3 COLOR_AMBIENT = vec3(0.349, 0.098, 0.18);\nconst vec3 COLOR_BODY = vec3(1, 1, 0.18);\nconst vec3 COLOR_EYE = vec3(0);\nconst vec3 COLOR_MOUTH = vec3(0.91, 0.537, 0.082);\nconst vec3 COLOR_HAT = vec3(0);\n\nstruct Surface {\n  float sd; // signed distance\n  vec3 col; // diffuse color\n};\n\nmat2 rotate2d(float theta) {\n  float s = sin(theta), c = cos(theta);\n  return mat2(c, -s, s, c);\n}\n\nfloat sdSphere(vec3 p, float r, vec3 offset)\n{\n  return length(p - offset) - r;\n}\nfloat sdCappedCylinder( vec3 p, float h, float r, vec3 offset )\n{\n  p -= offset;\n  vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(h,r);\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\nfloat opUnion(float d1, float d2) { \n  return min(d1, d2);\n}\nSurface opUnion(Surface d1, Surface d2) {\n  if (d2.sd < d1.sd) return d2;\n  return d1;\n}\n/*float opSmoothUnion(float d1, float d2, float k) {\n  float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n  return mix( d2, d1, h ) - k*h*(1.0-h);\n}*/\nSurface opSmoothUnion( Surface d1, Surface d2, float k ) {\n  Surface s;\n  float h = clamp( 0.5 + 0.5*(d2.sd-d1.sd)/k, 0.0, 1.0 );\n  s.sd = mix( d2.sd, d1.sd, h ) - k*h*(1.0-h);\n  s.col = mix( d2.col, d1.col, h ) - k*h*(1.0-h);\n\n  return s;\n}\nSurface opSmoothIntersection( Surface d1, Surface d2, float k) {\n  Surface s;\n  float h = clamp( 0.5 - 0.5*(d2.sd-d1.sd)/k, 0.0, 1.0 );\n  s.sd = mix( d2.sd, d1.sd, h ) + k*h*(1.0-h);\n  s.col = mix( d2.col, d1.col, h ) + k*h*(1.0-h);\n  return s;\n}\n\nfloat opIntersection(float d1, float d2) {\n  return max(d1,d2);\n}\nSurface opIntersection(Surface d1, Surface d2) {\n  if (d2.sd > d1.sd) return d2;\n  return d1;\n}\n\n/*float opSmoothIntersection(float d1, float d2, float k) {\n  float h = clamp( 0.5 - 0.5*(d2-d1)/k, 0.0, 1.0 );\n  return mix( d2, d1, h ) + k*h*(1.0-h);\n}\nfloat opSubtraction(float d1, float d2 ) {\n  return max(-d1, d2);\n}\nfloat opSmoothSubtraction(float d1, float d2, float k) {\n  float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\n  return mix( d2, -d1, h ) + k*h*(1.0-h);\n}\nfloat opSubtraction2(float d1, float d2 ) {\n  return max(d1, -d2);\n}\nfloat opSmoothSubtraction2(float d1, float d2, float k) {\n  float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\n  return mix( d1, -d2, h ) + k*h*(1.0-h);\n}*/\nSurface sdFloor(vec3 p) {\n  /*float floor = p.y + 0.8 + texture(iChannel0, p.xz).x * 0.01;\n  vec3 floorCol = 0.85 * mix(vec3(1.5), vec3(.0, 1, .784), texture(iChannel0, p.xz/100.).x);*/\n  float floor = p.y + 0.8 + texture(iChannel0, p.xz*sin(iTime*0.2)).x * 0.01;\n  vec3 floorCol = 0.85 * mix(vec3(1.5), vec3(.0, 1, .784), texture(iChannel0, p.xz/100.*sin(iTime*0.2)).x);\n  \n  return Surface(floor, floorCol);\n}\nSurface sdBody(vec3 p) {\n  Surface body1 = Surface(sdSphere(p, 2.2, vec3(0, -2, 0)), COLOR_BODY);\n  Surface body2 = Surface(sdSphere(p, 1.5, vec3(0, 0, 0)), COLOR_BODY);\n  Surface head = Surface(sdSphere(p, 0.7, vec3(-0.7, 0.4, 0.7)), COLOR_BODY);\n  Surface tail1 = Surface(sdSphere(p, 0.8, vec3(1.1, -0.3, -1.)), COLOR_BODY);\n  Surface tail2 = Surface(sdSphere(p, 0.8, vec3(0.6, 0.2, -0.5)), COLOR_BODY);\n  \n  Surface d, temp;\n  d = opSmoothIntersection(body1, body2, 0.2);\n  d = opSmoothUnion(d, head, 0.2);\n  \n  temp = opSmoothIntersection(tail1, tail2, 0.1);\n  d = opSmoothUnion(d, temp, 0.5);\n  return d;\n}\nSurface sdEyes(vec3 p) {\n  Surface leftEye = Surface(sdSphere(p, .1, vec3(-1.35, 0.6, 0.5)), COLOR_EYE);\n  Surface rightEye = Surface(sdSphere(p, .1, vec3(-0.55, 0.6, 1.35)), COLOR_EYE);\n  \n  return opUnion(leftEye, rightEye);\n}\nSurface sdMouth(vec3 p) {\n  Surface mouth1 = Surface(sdSphere(p, 0.7, vec3(-1.1, -0.2, 1.1)), COLOR_MOUTH);\n  Surface mouth2 = Surface(sdSphere(p, 0.5, vec3(-1.1, 0.8, 1.1)), COLOR_MOUTH);\n  \n  return opIntersection(mouth1, mouth2);\n}\nSurface sdHat(vec3 p) {\n  Surface hatBottom = Surface(sdCappedCylinder(p, 0.5, 0.05, vec3(-0.7, 1.05, 0.7)), COLOR_HAT);\n  Surface hatTop = Surface(sdCappedCylinder(p, 0.3, 0.3, vec3(-0.7, 1.35, 0.7)), COLOR_HAT);\n  \n  return opUnion(hatBottom, hatTop);\n}\nSurface sdDuck(vec3 p) {\n  Surface body = sdBody(p);\n  Surface eyes = sdEyes(p);\n  Surface mouth = sdMouth(p);\n  Surface hat = sdHat(p);\n\n  Surface d = body;\n  d = opUnion(d, eyes);\n  d = opSmoothUnion(d, sdMouth(p), 0.05);\n  d = opUnion(d, hat);\n\n  return d;\n}\nSurface opRep(vec3 p, vec3 c)\n{\n  vec3 q = mod(p+0.5*c,c)-0.5*c;\n  return sdDuck(q);\n}\nSurface opRepLim(vec3 p, vec3 c, vec3 l)\n{\n  vec3 q = p-c*clamp(round(p/c),-l,l);\n  return sdDuck(q);\n}\nSurface scene(vec3 p) {\n\n    p.y *= mix(1., 1.03, sin(iTime * SPEED));\n    Surface sdDuck = opRepLim(p - vec3(0, 0, -2), vec3(5, 0, 5), vec3(7, 0, 7));\n    \n    return opUnion(sdDuck, sdFloor(p));\n}\n\nSurface rayMarch(vec3 ro, vec3 rd) {\n  float depth = MIN_DIST;\n  Surface d; // distance ray has travelled\n\n  for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n    vec3 p = ro + depth * rd;\n    d = scene(p);\n    depth += d.sd;\n    if (d.sd < PRECISION || depth > MAX_DIST) break;\n  }\n    \n  d.sd = depth;\n  \n  return d;\n}\n\nvec3 calcNormal(in vec3 p) {\n    vec2 e = vec2(1, -1) * EPSILON;\n    return normalize(\n      e.xyy * scene(p + e.xyy).sd +\n      e.yyx * scene(p + e.yyx).sd +\n      e.yxy * scene(p + e.yxy).sd +\n      e.xxx * scene(p + e.xxx).sd);\n}\n\nmat3 camera(vec3 cameraPos, vec3 lookAtPoint) {\n\tvec3 cd = normalize(lookAtPoint - cameraPos);\n\tvec3 cr = normalize(cross(vec3(0, 1, 0), cd));\n\tvec3 cu = normalize(cross(cd, cr));\n\t\n\treturn mat3(-cr, cu, -cd);\n}\n  \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n  vec2 mouseUV = iMouse.xy/iResolution.xy;\n  \n  if (mouseUV == vec2(0.0)) mouseUV = vec2(0.5); // trick to center mouse on page load\n\n  vec3 col = vec3(0);\n  vec3 lp = vec3(0);\n  vec3 ro = vec3(0, 0, 8); // ray origin that represents camera position\n  \n  float cameraRadius = 2.;\n  ro.yz = ro.yz * cameraRadius * rotate2d(mix(-PI/2., PI/2., mouseUV.y));\n  ro.xz = ro.xz * rotate2d(mix(-PI, PI, mouseUV.x)) + vec2(lp.x, lp.z);\n\n  vec3 rd = camera(ro, lp) * normalize(vec3(uv, -1)); // ray direction\n\n  Surface d = rayMarch(ro, rd); // signed distance value to closest object\n\n  if (d.sd > MAX_DIST) {\n    col = COLOR_BACKGROUND; // ray didn't hit anything\n  } else {\n    vec3 p = ro + rd * d.sd; // point discovered from ray marching\n    vec3 normal = calcNormal(p); // surface normal\n\n    vec3 lightPosition = vec3(0, 2, 8);\n    vec3 lightDirection = normalize(lightPosition - p) * .65; // The 0.65 is used to decrease the light intensity a bit\n\n    float dif = clamp(dot(normal, lightDirection), 0., 1.) * 0.5 + 0.5; // diffuse reflection mapped to values between 0.5 and 1.0\n    \n    col = dif * d.col + COLOR_AMBIENT;\n    \n    col = mix(col, COLOR_BACKGROUND, 1.0 - exp(-0.00005 * d.sd * d.sd * d.sd)); \n    \n    col += texture(iChannel1, fragCoord/iResolution.xy).rgb;\n  }\n\n  fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float SIZE_RATE = 0.1;\nfloat XSPEED = 0.5;\nfloat YSPEED = 0.75;\nfloat LAYERS = 10.;\n\nfloat Hash11(float p)\n{\n  vec3 p3 = fract(vec3(p) * 0.1);\n  p3 += dot(p3, p3.yzx + 19.19);\n  return fract((p3.x + p3.y) * p3.z); \n}\n\nvec2 Hash22(vec2 p)\n{\n  vec3 p3 = fract(vec3(p.xyx) * 0.3);\n  p3 += dot(p3, p3.yzx+19.19);\n  return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nvec2 Rand22(vec2 co)\n{\n  float x = fract(sin(dot(co.xy ,vec2(122.9898,783.233))) * 43758.5453);\n  float y = fract(sin(dot(co.xy ,vec2(457.6537,537.2793))) * 37573.5913);\n  return vec2(x,y);\n}\n\nvec3 SnowSingleLayer(vec2 uv,float layer){\n  vec3 acc = vec3(0.0,0.0,0.0);\n  uv = uv * (2.0 + layer);\n  float xOffset = uv.y * (((Hash11(layer)*2.-1.)*0.5+1.)*XSPEED);\n  float yOffset = YSPEED * iTime;\n  uv += vec2(xOffset,yOffset);\n  vec2 rgrid = Hash22(floor(uv)+(31.1759*layer));\n  uv = fract(uv) - (rgrid*2.-1.0) * 0.35 - 0.5;\n  float r = length(uv);\n  float circleSize = 0.04*(1.5+0.3*sin(iTime*SIZE_RATE));\n  float val = smoothstep(circleSize,-circleSize,r);\n  vec3 col = vec3(val,val,val)* rgrid.x ;\n  return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n  vec3 acc = vec3(0,0,0);\n  for (float i = 0.; i < LAYERS; i++) {\n    acc += SnowSingleLayer(uv,i); \n  }\n\n  fragColor = vec4(acc,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}