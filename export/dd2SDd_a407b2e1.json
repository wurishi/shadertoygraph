{"ver":"0.1","info":{"id":"dd2SDd","date":"1671169110","viewed":164,"name":"filtered border region","username":"MartinRGB","description":"https://advances.realtimerendering.com/s2016/s2016_ltc_rnd.pdf - p104,set Texture wrap to 'Clamp'","likes":6,"published":1,"flags":0,"usePreview":1,"tags":["uv","center","scale"],"hasliked":0,"parentid":"wtKfWt","parentname":"scale from center"},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float box(vec2 _st, vec2 _size, float _smoothEdges){\n    _size = vec2(0.5)-_size*0.5;\n    vec2 aa = vec2(_smoothEdges*0.5);\n    vec2 uv = smoothstep(_size,_size+aa,_st);\n    uv *= smoothstep(_size,_size+aa,vec2(1.0)-_st);\n    return uv.x*uv.y;\n}\n\nvec3 draw(vec2 uv) {\n    return texture(iChannel0,vec2(uv.x,uv.y)).rgb;   \n    //return texture(iChannel0,uv).rgb;  \n}\n\nfloat grid(float var, float size) {\n    return floor(var*size)/size;\n}\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvec3 blurredImage( in vec2 uv )\n{\n    \n    float bluramount = 0.2;\n    //float dists = 5.;\n    vec3 blurred_image = vec3(0.);\n    #define repeats 60.\n    for (float i = 0.; i < repeats; i++) { \n        //Older:\n        //vec2 q = vec2(cos(degrees((grid(i,dists)/repeats)*360.)),sin(degrees((grid(i,dists)/repeats)*360.))) * (1./(1.+mod(i,dists)));\n        vec2 q = vec2(cos(degrees((i/repeats)*360.)),sin(degrees((i/repeats)*360.))) *  (rand(vec2(i,uv.x+uv.y))+bluramount); \n        vec2 uv2 = uv+(q*bluramount);\n        blurred_image += draw(uv2)/2.;\n        //One more to hide the noise.\n        q = vec2(cos(degrees((i/repeats)*360.)),sin(degrees((i/repeats)*360.))) *  (rand(vec2(i+2.,uv.x+uv.y+24.))+bluramount); \n        uv2 = uv+(q*bluramount);\n        blurred_image += draw(uv2)/2.;\n    }\n    blurred_image /= repeats;\n        \n    return blurred_image;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    float scale = 0.65;\n    float error = 0.45;\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Convert uv range to -1 to 1\n    uv = uv * 2.0 - 1.0;\n    \n    // Scale uv\n    uv *= (1. * 0.5 + 0.5) * (1. + (1. - scale));\n    \n    // Convert back to 0 to 1 range\n    uv = uv * 0.5 + 0.5;\n\n    vec4 ClearCol;\n    vec4 BlurCol;\n\n    \n    BlurCol = vec4(blurredImage(fragCoord/iResolution.xy),1.);\n    \n    if(uv.x < 1. && uv.x > 0. && uv.y > 0. && uv.y < 1.){\n        ClearCol = texture(iChannel0, uv);\n    }\n    \n    //ClearCol = texture(iChannel0, uv);\n    \n    float boxMask = box(uv,vec2(scale+0.3),error);\n    \n    BlurCol.rgb = mix(BlurCol.rgb, ClearCol.rgb, boxMask);\n    \n    fragColor = vec4(BlurCol.rgb,1.);\n    \n}","name":"Image","description":"","type":"image"}]}