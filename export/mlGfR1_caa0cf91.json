{"ver":"0.1","info":{"id":"mlGfR1","date":"1701824387","viewed":35,"name":"computer art 2","username":"Mathew_IA_Art","description":"the sequel that nobody wanted, but needed","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["art"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define NUM_POINTS 10\n\nfloat timeElapsed;\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Ajusta la velocidad de animación\n    float speed = 0.1;\n\n    // Actualiza el tiempo transcurrido\n    timeElapsed += iTime * speed;\n\n    // Inicializar el color de fondo\n    vec3 backgroundColor = vec3(0.0, 0.0, 0.0);\n    fragColor = vec4(backgroundColor, 1.0);\n\n    // Dibujar puntos y líneas\n    for (int i = 0; i < NUM_POINTS; i++) {\n        // Calcula la posición del punto\n        vec2 point = vec2(\n            mod(sin(timeElapsed + float(i)), 1.0) * iResolution.x,\n            mod(cos(timeElapsed + float(i)), 1.0) * iResolution.y\n        );\n\n        // Dibuja el punto\n        float distance = length(fragCoord - point);\n        if (distance < 5.0) {\n            fragColor = vec4(1.0, 1.0, 1.0, 1.0); // Color de los puntos\n        }\n\n        // Dibuja líneas con colores diferentes\n        for (int j = 0; j < NUM_POINTS; j++) {\n            if (i != j) {\n                vec2 otherPoint = vec2(\n                    mod(sin(timeElapsed + float(j)), 1.0) * iResolution.x,\n                    mod(cos(timeElapsed + float(j)), 1.0) * iResolution.y\n                );\n\n                vec2 dir = normalize(otherPoint - point);\n                float len = length(otherPoint - point);\n\n                vec3 lineColor = vec3(\n                    mod(point.x + otherPoint.x, 256.0) / 256.0,\n                    mod(point.y + otherPoint.y, 256.0) / 256.0,\n                    mod(point.x * otherPoint.y, 256.0) / 256.0\n                );\n\n                for (float t = 0.0; t < 1.0; t += 0.01) {\n                    vec2 pos = point + t * len * dir;\n                    float distance = length(fragCoord - pos);\n                    if (distance < 1.0) {\n                        fragColor = vec4(lineColor, 1.0); // Color de las líneas\n                    }\n                }\n            }\n        }\n    }\n}\n","name":"Image","description":"","type":"image"}]}