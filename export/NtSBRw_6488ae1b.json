{"ver":"0.1","info":{"id":"NtSBRw","date":"1651879365","viewed":83,"name":"circule","username":"JuanDeager","description":"yeah boiiiiiiii (cool cirule). Currently there is a bug with interpolation across the angle seam between 0 and 2pi rad.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["wavy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec2 CIRCLE_POS = vec2(1.0, 0.5);\nconst float CIRCLE_RADIUS = 0.3;\n\nconst float M_PI = 3.14159265;\n\nstruct Deformation\n{\n    float offset, amplitude, frequency, angle, width;\n};\n\nDeformation deformations[] = Deformation[]\n(\n    Deformation(0.0, 0.1, 10.0, 0.0, M_PI),\n    Deformation(0.0, 0.05, 5.0, M_PI, 1.0 * M_PI),\n    Deformation(0.0, 0.1, 20.0, M_PI * 1.5, M_PI / 2.0),\n    Deformation(0.0, 0.02, 20.0, 0.0, M_PI * 6.0)\n);\n\nfloat tooSmooth(float edge0, float edge1, float x)\n{\n    float middle = (edge0 + edge1) / 2.0;\n    return smoothstep(edge0, middle, x) * (1.0 - smoothstep(middle, edge1, x));\n}\n\nfloat GetDeformRadius(Deformation d, float theta)\n{\n    // lerp between two sine waves with integer frequencies to avoid discontinuity\n    float sina = sin(d.offset + theta * floor(d.frequency));\n    float sinb = sin(d.offset + theta * ceil(d.frequency));\n    float fr = fract(d.frequency);\n    return tooSmooth(d.angle - d.width / 2.0, d.angle + d.width / 2.0, theta) * d.amplitude * mix(sina, sinb, fr);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x *= iResolution.x / iResolution.y;\n\n    vec3 col = vec3(uv, 0.0);\n    \n    fragColor = vec4(col, 1.0);\n    \n    float theta = M_PI + atan(uv.y - CIRCLE_POS.y, uv.x - CIRCLE_POS.x);\n    \n    float r = CIRCLE_RADIUS;\n    \n    deformations[1].offset = iTime;\n    for (int i = 0; i < deformations.length(); i++)\n    {\n        r += GetDeformRadius(deformations[i], theta);\n    }\n    \n    if (abs(distance(uv, CIRCLE_POS) - r) < 0.005)\n    {\n        fragColor = vec4(vec3(1.0) - col, 1.0);\n    }\n}","name":"Image","description":"","type":"image"}]}