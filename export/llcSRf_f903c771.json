{"ver":"0.1","info":{"id":"llcSRf","date":"1480818539","viewed":711,"name":"Diablo resource orbs","username":"twitchingace","description":"I got inspired by the health orbs in Diablo 2/3 and tried make my own. I can't figure out how to make a decent shadow to save my life, so any advice would be incredible.","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["2d","orb","highlight","mana","diablo","health","resource"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4df3Rr","filepath":"/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","previewfilepath":"/media/ap/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define e 2.71\nstruct Orb{\n    float value;\n    vec2 center;\n    float radius;\n    vec3 colour;\n};\n    \nstruct Light{\n\tvec3 pos;\n};\n    \n// Returns the intensity for the uv.\n// Is only non-zero if the uv is in the \"filled\" part of the ball.\n// We fake a fluid really poorly by basing the intensity off a noise function\n// when we're really close to the top of the filled bit.\nfloat isColoured(in vec2 uv, in Orb orb){\n    float orbBottom = orb.center.y - orb.radius;\n    float level = orbBottom + orb.value * orb.radius * 2.;\n    \n    if (distance(uv,orb.center) < orb.radius && (uv.y < level)) {\n        if (uv.y / level > .99){\n        \tfloat textVar = texture(iChannel0, uv).x;\n            if (textVar < .3){\n                return 0.;\n            }\n            return textVar;\n        }\n\t\treturn 1.;\n    }\n\treturn 0.;\n}\n    \n// Figures out the colour for the thing\nvec3 getColour(in vec2 uv, in Orb orb){\n    vec3 colour = vec3(0.);\n    float borderDist = orb.radius - distance(uv, orb.center);\n    float intensity = isColoured(uv, orb);\n\tif (intensity != 0.){\n        // Fill that ball up homie\n    \tcolour = vec3(orb.colour * intensity);\n        // Apply a texture to the ball\n        // Do some proper uv mapping: \n        // https://en.wikipedia.org/wiki/UV_mapping#Finding_UV_on_a_sphere\n        vec2 distFromCent = uv - orb.center;\n        float uvHeight = exp(sqrt(orb.radius - (pow(distFromCent.x,2.) + pow(distFromCent.y,2.))) \n            / orb.radius) / exp(1.);\n        vec3 d = normalize(vec3(orb.center, 0.) - vec3(uv, uvHeight));        \n        float u = (.5 + atan(d.z, d.x)\n            \t\t\t/ (2. * 3.14159)) / orb.radius / .5;\n        float v = (.5 - asin(d.y) / 3.14159) / orb.radius / .5;\n        colour *= vec3(texture(iChannel1, vec2(u + fract(iTime *.05),\n                                                 v + fract(iTime * .03))).x)\n            \t\t* 2.15;\n        colour *= vec3(texture(iChannel3, vec2(u + fract(iTime * .001),\n                                                 v + fract(iTime * .04))).x)\n            \t\t* 2.2;\n        // Add some sort of shadow to the coloured bit\n        // TODO: apply some highlight repsonsiveness\n        colour /= pow(2.71, orb.radius * .2 / borderDist);\n    }\n    \n    return colour;\n}\n\n// Add in a bevelled border\nvec3 applyBorder(in vec2 uv, in Orb orb, vec3 currentColour){\n    vec3 colour = currentColour;\n    float borderDist = orb.radius - distance(uv, orb.center);\n\t// Add in a bevelled border\n    if (abs(borderDist) < .005) {\n        colour = vec3(0.3,0.3,0.3);\n        colour += vec3(.7 - abs(borderDist)/.005) * .25;\n    }\n    return colour;\n}\n\n// Apply a specular highlight\n// https://en.wikibooks.org/wiki/GLSL_Programming/GLUT/Specular_Highlights\nvec3 applyHighlight(in vec2 uv, in Orb orb, in Light light, in vec3 eye){\n    vec3 colour = vec3(0.);\n    if (distance(orb.center, uv) >= orb.radius){\n        return colour;\n     }\n    \n    vec2 distFromCent = uv - orb.center;    \n    float uvHeight = sqrt(orb.radius - (pow(distFromCent.x,2.) + pow(distFromCent.y,2.)));\n    vec3 uvw = vec3(uv, uvHeight);\n    vec3 normal = normalize(vec3(uv, uvHeight) - vec3(orb.center, 0.));\n    vec3 orbToLight = normalize(light.pos - vec3(orb.center, 0.));\n    \n    return vec3(pow(dot(reflect(normalize(uvw - light.pos),\n                                normal),\n                        normalize(eye - uvw)),\n                    55.));\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.x;\n    vec3 view = vec3(0., 0., 10.);\n    fragColor = texture(iChannel2, uv);\n    //fragColor = vec4(0.);\n    \n    Light l1 = Light(vec3(0.5,.7, 1.));\n    // Set up the two orbs\n    vec2 center = vec2(.25, .3);\n    Orb health = Orb(abs(sin(iTime * .45)),\n                     center,\n                     .2,\n                     vec3(.57, 0., 0.));\n    \n    center = vec2(.75, .3);\n    Orb mana = Orb(abs(cos(iTime * .15))+ .01,\n                   center,\n                   .2,\n                   vec3(0., 0.3, .57));\n    \n    // Colour the first orb\n    vec3 highLightValue = applyHighlight(uv, health, l1, view);\n    vec3 redOrb = vec3(getColour(uv, health));\n    if (redOrb.x > 0.0){\n        fragColor = vec4(redOrb, 1.);\n        \n    }\n    fragColor = vec4(applyBorder(uv, health, fragColor.xyz), 1.);        \n    if (highLightValue.x > 0.){\n    \tfragColor += vec4(highLightValue, 1.);\n    }\n    \n    // Colour the second orb\n    highLightValue = applyHighlight(uv, mana, l1, view);\n    vec3 blueOrb = vec3(getColour(uv, mana));\n    if (blueOrb.z > 0.0){\n        fragColor = vec4(blueOrb, 1.);        \n    }   \n    fragColor = vec4(applyBorder(uv, mana, fragColor.xyz), 1.);        \n    if (highLightValue.x > 0.){\n    \tfragColor += vec4(highLightValue, 1.);\n    }\n}","name":"Image","description":"","type":"image"}]}