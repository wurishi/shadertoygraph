{"ver":"0.1","info":{"id":"cdS3D1","date":"1667511216","viewed":144,"name":"craters","username":"gabo6d","description":"Started with recursively rotating uvs with a voronoi signal and feeding it again to a voronoi function.","likes":8,"published":1,"flags":0,"usePreview":1,"tags":["voronoi","craters"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat hash(float n)\n{\n    return fract(sin(n)*99999.5);\n}\n\nfloat hash2f(vec2 n)\n{\n    return fract(sin(dot(n, vec2(12.5,4.5)))*99999.9);\n}\n\nfloat noise(float x)\n{\n    float id = floor(x);\n    float f = fract(x);\n\n    float r = hash(id);\n    float r2 = hash(id+1.);\n    return mix(r, r2, smoothstep(0., 1., f));\n}\n\nfloat noise(vec2 x)\n{\n    vec2 id = floor(x);\n    vec2 f = fract(x);\n\n    float a = hash2f(id+vec2(0.,1.));\n    float b = hash2f(id+vec2(1.,1.));\n    float c = hash2f(id+vec2(1.,0.));\n    float d = hash2f(id+vec2(0.,0.));\n\n    return mix(\n        mix(d, c, smoothstep(0., 1., f.x)),\n        mix(a, b, smoothstep(0., 1., f.x)),\n        smoothstep(0., 1., f.y)\n    );\n}\n\nfloat voronoi(vec2 x, float t, float as)\n{\n    vec2 id = floor(x);\n    vec2 f = fract(x);\n\n    float y = 1.;\n    for (int i = -1; i <= 1; i++)\n    for (int j = -1; j <= 1; j++)\n    {\n        vec2 n = id+vec2(i,j);\n        vec2 d = n-x+hash2f(n)+noise(vec2(cos(t), sin(t*.5))*as);\n        y = min(y, dot(d,d));\n    }\n    return sqrt(y);\n}\n\nfloat pattern(vec2 uv)\n{\n    float uvz = 2.5;\n    float t = voronoi(uv*uvz, iTime, .2)*.99;\n    mat2 m = mat2(cos(t), -sin(t), sin(t), cos(t));\n    uv = m*uv;\n    return voronoi(uv*uvz, iTime*0.25, 0.5)*.99;\n}\n\nvec3 render(vec2 uv)\n{\n    float t0 = pattern(uv);\n    vec2 n = normalize(vec2(\n        pattern(uv-vec2(dFdx(uv.x)*2., 0.)),\n        pattern(uv-vec2(0., dFdy(uv.y)*2.))\n    ) - pattern(uv));\n\n    vec2 lp = normalize(vec2(cos(iTime*0.5),sin(iTime*.25)));\n    float s = pow(max(0., dot(uv, lp)), 1.25);\n    float t = dot(n, lp)+s*.25;\n    t*= t0;\n\n    vec3 color = vec3(\n        t,t,t\n    );\n    color = vec3(t, sin(t*2.+uv.x)*.5+.5, cos(t*2.)*.5+.5)*t;\n    color.z = voronoi(color.yz, 0., 0.);\n    color = mix(color, vec3(0.168, 0., 0.126)*.5, smoothstep(0., 1.25, 1.-length(color)*3.));\n\n    return color;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv = (uv * 2.0 - 1.0);\n    uv += vec2(0.35, 0.25);\n    uv.x *= iResolution.x/iResolution.y;\n    uv *= 1.25;\n    \n    float d = smoothstep(0., 0.125, length(uv)*.5)*length(uv)*.5;\n    uv *= d;\n\n    float sb = d*d*2.;\n    vec3 color = render(uv)\n               + render(uv+vec2(dFdx(uv.x), 0.)*sb)\n               + render(uv-vec2(dFdx(uv.x), 0.)*sb)\n               + render(uv+vec2(0., dFdy(uv.y))*sb)\n               + render(uv-vec2(0., dFdy(uv.y))*sb);\n    color *= 1./5.;\n    color *= clamp(0., 1., 1./sb);\n\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}