{"ver":"0.1","info":{"id":"cdXXWM","date":"1668969455","viewed":109,"name":"[morisil] [phreax] ping pong 2","username":"phreax","description":"Co-creation with morisil @ Creative Code Jam Berlin 19-11-2022\n\nPlaying around and combining a bunch of different techniques:\n\ndepth of field, simulated refraction, chromatic abberation, 2d spiral tunnel, log scale \n","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["chromaticaberration","study","depthoffield","focus"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of \"depth of field focus study zoom\" by morisil. https://shadertoy.com/view/csXXWN\n// 2022-11-19 16:18:18\n\nconst float SHAPE_SIZE = .3;\nconst float CHROMATIC_ABBERATION = .02;\nconst float ITERATIONS = 20.;\nconst float INITIAL_LUMA = .5;\nconst float PI = 3.141592;\n\n\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n\nvec2 toPolar(vec2 p)\n{\n  return vec2(length(p), atan(p.y, p.x));\n}\n\nvec2 fromPolar(vec2 p)\n{\n  return p.x*vec2(cos(p.y), sin(p.y));\n}\n\n\nfloat getColorComponent(in vec2 st, in float modScale, in float blur) {\n    vec2 modSt = mod(st, 1. / modScale) * modScale * 2. - 1.;\n    \n    float dist = length(modSt);\n    float shapeMap = smoothstep(SHAPE_SIZE + blur, SHAPE_SIZE - blur, dist);\n    return shapeMap;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv =\n        (2.*fragCoord - iResolution.xy)\n        / min(iResolution.x, iResolution.y);\n     uv *= rotate2d(sin(iTime * .2) * .3);\n     uv *= 2.;\n    \n    vec2 st;\n    float modScale = 1.0;\n\n    vec3 color = vec3(0);\n    float luma = INITIAL_LUMA;\n    float refr = 1.;\n    float blur = .2;\n    \n    /*\n    float iter = 6.;\n    for(float i= 0.; i < iter; i++) {\n        uv = abs(uv);\n        uv *= rotate2d(PI*i/iter);\n        uv -= .1 - .2*i;\n    }*/\n    \n    for (float i = 0.; i < ITERATIONS ; i++) {\n        float stepf = i/ITERATIONS;\n        float z =  fract(stepf-.05*iTime); // depth value\n        \n        st = uv*4.*rotate2d(i*.3)*z;\n        st *= log(.4*length(st * 1.)) * 1.5*exp(-z*0.1);     // stretch in log scale on the radial axis\n        //st *= log(.3*length(uv * 1.)) * 1.1;   // stretch in log scale on the radial axis \n                                                 // (screen space coords), \"fisheye effect\"\n        vec2 anim = vec2(sin(iTime * .2), cos(iTime * .3));\n        st += getColorComponent(st+anim, modScale, .04)*mix(.15, 0.01, 1.-exp(-z*2.))*refr;\n        vec2 center = st + anim;;\n   \n        luma = smoothstep(.7, .0, 1.-exp(-z*1.4)); // brightness with exponential decay\n        blur = mix(.1, .0, 1.-exp(-z*z*5.));       // depth of field exponential decay\n        \n        vec2 centerp = toPolar(center);\n        vec2 abbr1 = centerp - vec2(stepf, 0.)*CHROMATIC_ABBERATION;\n        vec2 abbr2 = centerp + vec2(stepf, 0.)*CHROMATIC_ABBERATION;\n        vec3 shapeColor = vec3(\n            getColorComponent(fromPolar(abbr1) , modScale, blur),\n            getColorComponent(center, modScale, blur),\n            getColorComponent(fromPolar(abbr2) , modScale, blur)        \n        )*luma;\n       \n        refr *= 1.0 - getColorComponent(center*.5, modScale, .1)*.2;\n\n        color += shapeColor;\n        color = clamp(color, 0., 1.);\n    }\n    \n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}