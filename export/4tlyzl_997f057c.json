{"ver":"0.1","info":{"id":"4tlyzl","date":"1507632020","viewed":805,"name":"Distance based anti-aliasing","username":"mskr","description":"Using fwidth for determining an \"anti-aliasing-factor\" for signed distance field shapes.\n\nThis shader shows the problem, when trying to combine several shapes with different slopes in their distance fields.\n\nComments are welcome.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","sdf","aa"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/********************************\n* SDF shapes\n* Param p: point to test\n* Param s: size of shape\n* Param t: translation of shape\n*********************************/\n\nfloat sdSphere( vec2 p, float s, vec2 t)\n{\n  return length(p - t) - s;\n}\n\nfloat sdDiamond(vec2 p, float s, vec2 t)\n{\n    return dot(abs(p - t), vec2(1.0)) - s;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord.xy/iResolution.xy;\n    \n    // Shapes distances                       | Slopes\n    float dst1 = sdSphere(p, .2, vec2(.5,.5)) \t* 100.;\t\t// try\n    float dst2 = sdDiamond(p, .2, vec2(.2,.2)) \t* 10000.;\t// changing\n    float dst3 = sin(p.x+p.y * 80.) \t\t\t* 10000.;\t// the slope factors\n    \n    // Union of shapes\n    float dst = min(min(dst1, dst2), dst3);\n    \n\tfragColor = mix(vec4(1), vec4(0), smoothstep(0., fwidth(dst), dst));\n}","name":"Image","description":"","type":"image"}]}