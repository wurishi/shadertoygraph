{"ver":"0.1","info":{"id":"MstfWX","date":"1527069334","viewed":325,"name":"rect load","username":"skaplun","description":"Simple loading animation\nCreated with Markus Fisch's Shader Editor ","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["animation","loading"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"precision mediump float;\n#define PI 3.14159265359\n#define QPI 0.78539816339\n\nfloat rect(in vec2 uv, in float r, in vec2 offset){\n    uv += offset;\n    float b = .01;\n    return smoothstep(uv.x - r - b, uv.x - r + b, uv.y) * smoothstep(uv.x + r + b, uv.x + r - b, uv.y)\n    \t \t\t\t   * smoothstep(-uv.x - r - b, -uv.x - r + b, uv.y) * smoothstep(-uv.x + r + b, -uv.x + r - b, uv.y);\n}\n\nvec2 calcPoint(in float ang){\n\tvec2 ppp = vec2(cos(ang), .5 * sin(ang * 2.));\n\treturn vec2(pow(ppp.x, 2.) * sign(ppp.x), ppp.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 st = (fragCoord.xy * 2. - iResolution.xy)/iResolution.y;\n\tfloat bg;\n\t{\n\t\tvec2 uv = abs(st);\n\t\tuv -= vec2(.5, 0.);\n\t\tfloat ang = -QPI;\n\t\tuv *= mat2(cos(ang), -sin(ang), sin(ang), cos(ang));\n\t\tuv += vec2(.5, 0.);\n\t\tfloat r = distance(uv, vec2(.5, 0.));\n\t  \tfloat a = mod(atan(uv.y, uv.x - .5), PI/2.) - QPI;\n\t  \tvec2 p = vec2(r * cos(a), r * sin(a));\n\t\tbg = rect(p, .475, vec2(-.5, 0.));\n\t}\n\t\n\tfloat time = iTime * 4.;\n\tfloat modAng = mod(time, QPI);\n\tfloat ang = time - modAng;\n\tvec2 emptyPoints[2]; emptyPoints[0] = calcPoint(ang); emptyPoints[1] = calcPoint(ang - QPI);\n        \n    bg -= rect(st, .475, -emptyPoints[0]);\n\tbg = clamp(bg, 0., 1.);\n    bg -= rect(st, .475, -emptyPoints[1]);\n\tbg = clamp(bg, 0., 1.);\n    bg += rect(st, .475, -mix(emptyPoints[0], emptyPoints[1], modAng/QPI));\n\t\n\tfragColor = vec4(bg);\n}","name":"Image","description":"","type":"image"}]}