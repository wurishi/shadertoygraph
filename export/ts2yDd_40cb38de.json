{"ver":"0.1","info":{"id":"ts2yDd","date":"1587559823","viewed":266,"name":"box filter","username":"jamelouis","description":"box filter","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["blur","filter"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec2 texel_size = 3.0 * 1.0 / iResolution.xy;\n    // Time varying pixel color\n    vec3 col1 = texture(iChannel1, uv).rgb;\n    vec3 col2 = box_filter(iChannel0, uv, texel_size);\n   \n    uv.x *= iResolution.x / iResolution.y;\n    vec3 col = compare_two_image(col1, col2, iMouse.x / iResolution.y, uv);\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec2 texel_size = 3.0 * 1.0 / iResolution.xy;\n    // Time varying pixel color\n    vec3 col = box_filter(iChannel0, uv, texel_size);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"struct Rect\n{\n    vec2 lb;\n    vec2 rt;\n};\n\nstruct Circle\n{\n    vec2 o;\n    float radius;\n};\n\nstruct Triangle\n{\n    vec2 a;\n    vec2 b;\n    vec2 c;\n};\n    \nbool intersect(Rect rect, vec2 pos)\n{\n    bool ret = pos.x > rect.lb.x && pos.x < rect.rt.x;\n    ret = ret && pos.y > rect.lb.y && pos.y < rect.rt.y;\n    \n    return ret;\n}\n\nbool intersect(Circle c, vec2 pos)\n{\n    return length(pos-c.o) < c.radius;\n}\n\nfloat at_line(vec2 a, vec2 b, vec2 pos)\n{\n    return (pos.y - a.y)*(b.x-a.x) - (pos.x - a.x) * (b.y-a.y);\n}\n\nbool intersect(Triangle tri, vec2 pos)\n{\n    bool ret = at_line(tri.a, tri.b, pos) > 0.0;\n    ret = ret && at_line(tri.b, tri.c, pos) > 0.0;\n    ret = ret && at_line(tri.c, tri.a, pos) > 0.0;\n    \n    return ret;\n}\n\nvec3 compare_two_image(vec3 col1, vec3 col2, float horizontal, vec2 pos)\n{\n    Rect rect = Rect(vec2(horizontal - 0.002, 0.0), vec2(horizontal + 0.002, 1.0));\n    Circle c = Circle(vec2(horizontal, 0.5), 0.08);\n    Circle c2 = Circle(vec2(horizontal, 0.5), 0.07);\n    Triangle tri1 = Triangle(vec2(horizontal - 0.01, 0.54), \n                             vec2(horizontal - 0.06, 0.5),\n                             vec2(horizontal - 0.01, 0.46));\n    Triangle tri2 = Triangle(vec2(horizontal + 0.01, 0.54),\n                             vec2(horizontal + 0.01, 0.46),\n                             vec2(horizontal + 0.06, 0.5)\n                             );\n    \n    bool flag = intersect(rect, pos);\n    flag = flag || (intersect(c, pos) && !intersect(c2, pos));\n    flag = flag || intersect(tri1, pos) || intersect(tri2, pos);\n    if(flag) return vec3(1.0);\n    \n    float factor = pos.x < horizontal ? 0.0 : 1.0f;\n    return mix(col1, col2, factor);\n}\n\nvec3 box_filter(sampler2D tex, vec2 uv, vec2 texel_size)\n{\n    vec2 ts = vec2(1.5)/vec2(640.0, 360.0);\n    vec4 d = ts.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);\n    \n    vec4 s = vec4(0.0);\n    s = texture(tex, uv + d.xy) * 0.25;\n    s+= texture(tex, uv + d.zy) * 0.25;\n    s+= texture(tex, uv + d.xw) * 0.25;\n    s+= texture(tex, uv + d.zw) * 0.25;\n    \n    return s.rgb;\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec2 texel_size = 3.0 * 1.0 / iResolution.xy;\n    // Time varying pixel color\n    vec3 col = box_filter(iChannel0, uv, texel_size);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Buf B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec2 texel_size = 3.0 * 1.0 / iResolution.xy;\n    // Time varying pixel color\n    vec3 col = box_filter(iChannel0, uv, texel_size);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Buf C","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec2 texel_size = 3.0 * 1.0 / iResolution.xy;\n    // Time varying pixel color\n    vec3 col = box_filter(iChannel0, uv, texel_size);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Buf D","description":"","type":"buffer"}]}