{"ver":"0.1","info":{"id":"WtVSDw","date":"1582850375","viewed":84,"name":"Ray March 3.","username":"baksej","description":"Ray March 3","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void pR(inout vec2 p, float a) {\n    p = cos(a)*p + sin(a)*vec2(p.y, -p.x);\n}\n\nfloat smin(float a, float b, float k) {\n \tfloat h = clamp(.5 + .5 * (b - a) / k, 0.0, 1.0);   \n    return mix(b, a, h) - k * h * (1.0 - h);\n}\n\nfloat sphere(vec3 pos, float radius){\n \treturn length(pos) - radius;   \n}\nfloat random (vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\n\nfloat map(float v, float a, float b, float x, float y){\n \tfloat n = (v - a) / (b - a);\n \treturn x + n * (y - x);\n}\nfloat scene(vec3 pos){\n    \n    vec3 i = floor(pos / .2);\n    \n    \n    vec3 pos1 = pos;\n    pos1 = mod(pos1, .2) - .1;\n    \n     pos1.x += random(i.xz) * .05;\n     \n    \n    \n \tfloat s1 = sphere(pos1, .05);\n    \n  \n    \n\n    \n    \n    vec3 pos2 = pos;\n \t\n    \n    pos2.y += random(i.xz) + iTime * .3 * random(i.xz);\n    \n    \n    \n    pos2 = mod(pos2, .2) - .1;\n    \n    \n    \n    \n    float s2 = sphere(pos2, .02);\n    \n    return smin(s1, s2, .05);\n}\n\nvec3 estimateNormal(vec3 pos){\n    \n \treturn normalize(\n    vec3(\n        scene(pos - vec3(.001, .0, .0)) - scene(pos + vec3(.001, .0, .0)),\n        scene(pos - vec3(.0, .001, .0)) - scene(pos + vec3(.0, .001, .0)),\n        scene(pos - vec3(.0, .0, .001)) - scene(pos + vec3(.0, .0, .001))\n        \n    ));   \n}\n\n\nvec3 light_dir = vec3(.0, -1.0, 1.0);\n\nvec3 trace(vec3 camOrigin, vec3 dir, out float totalDist) {\n \tvec3 ray = camOrigin;\n    totalDist = 0.0;\n    \n    // hacky near plane clipping\n    totalDist += .1;\n    ray += totalDist * dir;\n    \n    for(int i = 0; i < 128; i++) {\n     \tfloat dist = scene(ray);\n        if (abs(dist) < .001) {\n            float diffuse = dot(light_dir, estimateNormal(ray));\n            vec3 ambient = vec3(.2, .2, .2);\n            return vec3(diffuse * .5) + ambient;\n        \t   \n        }\n        totalDist += dist;\n        ray += dist * dir;\n    }\n    \n    return vec3(0.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\tuv = uv * 2.0 - 1.0;\n    uv.y /= iResolution.x / iResolution.y;\n    \n    vec3 camOrigin = vec3(0.,0.,-3.);\n    camOrigin.x += sin(iTime * .1) * .5;\n    camOrigin.z += iTime * .4;\n    vec3 rayOrigin = vec3(camOrigin.xy + uv, camOrigin.z + 3.0);\n    vec3 dir = normalize(rayOrigin - camOrigin);\n    pR(dir.xz, sin(iTime) * .08);\n    pR(dir.xy, sin(iTime) * .09);\n    pR(dir.zy, sin(iTime) * .10);\n    \n    float dist = 0.;\n    vec3 color = trace(camOrigin, dir, dist);\n\t\n    color = mix(vec3(0.0), color, clamp(map(dist, 2., 3.5, 1., 0.), 0.0, 1.0));\n    // Output to screen\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}