{"ver":"0.1","info":{"id":"McXBRf","date":"1724119998","viewed":24,"name":"Counter-rotating grids","username":"trismegistus_shandy","description":"Similar to \"Three-layer grids\", but with the highest-level grids counter-rotating at different speeds.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["rotating","grids"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float pi = 3.1415926535897932;\nconst float tau = pi * 2.;\n\n// Return numbers that vary in a sine curve between  0 and 1\nfloat positive_sine( float f )\n{\n    //return abs(sin(f));\n    return (sin(f) + 1.0 ) / 2.0;\n}\n\nfloat wobble( float speed ) {\n    return positive_sine( iTime * speed );\n}\n\n\n//based on https://iquilezles.org/articles/palettes/\n// but with seed numbers varying over time\n\nvec3 wobble_palette( float t ) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3( wobble(.05),\n                   wobble(.07) + pi/3.,\n                   wobble(.11) + pi/5. );\n\n    return a + b*cos( tau * (c*t+d) );\n}\n\n\n\n\n\nvec2 multiply_complex( vec2 p, vec2 q ) {\n    float realpart = p.x * q.x - p.y * q.y;\n    float imaginarypart = p.x * q.y + p.y * q.x;\n    return vec2( realpart, imaginarypart );\n}\n\n\nvec2 rotate( vec2 coord, float angle ) {\n    vec2 rotator = vec2( sin(angle), cos(angle) );\n    vec2 rotated = multiply_complex( coord, rotator );\n    return rotated;\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv0 = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec2 uv_rot = rotate( uv0, iTime*pi/7.);\n    uv0 = rotate( uv0, -iTime*pi/11.);\n\n    float n = length(uv0);\n    for ( float i = 1.; i < 2.; i++ ) {\n        uv_rot =   fract(uv_rot * (i + wobble(0.55))) - 0.5;\n        vec2 uv2 = fract(uv0    * (i + wobble(0.23))) - 0.5;\n       n *= length(uv2) * length(uv_rot);\n    }\n    vec3 finalColor = wobble_palette( n * 25. * (0.03+wobble(.13)) );\n\n    // Output to screen\n    fragColor = vec4(finalColor,1.0);\n}\n\n\n","name":"Image","description":"","type":"image"}]}