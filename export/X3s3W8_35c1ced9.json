{"ver":"0.1","info":{"id":"X3s3W8","date":"1707404051","viewed":57,"name":"Beginning to Learn raymarching","username":"dhunt546","description":"// https://www.youtube.com/watch?v=khblXafu7iA\n\nawesome tutorial\n\nthxs  kishimisu  ","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.youtube.com/watch?v=khblXafu7iA\n\nfloat smin(float a, float b, float k)\n{\n    float h = max(k - abs(a-b), 0.0)/ k;\n    return min(a, b ) - h*h*h*k*(1.0/6.0);\n}\n\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat sdSphere(vec3 p, float s)\n{\n    return length(p) - s;\n}\n\nfloat map (vec3 p)\n{\n    vec3 spherePos = vec3(sin(iTime)*3.,0,0);\n    float sphere = sdSphere(p -  spherePos, 1.);\n    \n    float box = sdBox(p, vec3(.75));\n\n    float ground = p.y;\n\n    return smin(sphere,box, 2.);    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n\n    vec3 ro = vec3(0, 0, -3); // ray origin.\n    vec3 rd = normalize(vec3(uv,1));   // ray direction.\n    vec3 col = vec3(0); //final pixal colour.\n    \n    float t = .0; // total distance travelled.\n    \n    // raymarching.\n    for(int i = 0; i < 80; i++)\n    {\n        vec3 p = ro + rd * t; // position along the ray.\n\n        float d = map(p); // current distance to the scene.\n    \n        t += d; // march the ray.\n        \n        if (d < .001 ||t > 100.) break; //stop early.        \n    }\n    \n    // colouring. \n    col = vec3(t * 0.2);  // colour based on distance.\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}