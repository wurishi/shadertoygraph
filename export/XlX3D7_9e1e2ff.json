{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"// This is a very early demo of a system for converting C# expressions into GLSL.\n// It's currently missing many optimization passes and features.\n// The eventual goal is to generate raymarchers, and be able to do physics/etc.\n// on the CPU using the same distance field expressions.\nvec3 run(vec2 parameter_pixel, vec2 parameter_resolution, float parameter_time) {\n\tvec3 temp_0 = vec3(0.1, 0.3, 0.42);\n\tvec2 temp_1 = parameter_pixel / parameter_resolution;\n\tvec2 temp_2 = vec2(0.5);\n\tvec2 temp_3 = temp_1 - temp_2;\n\tvec2 temp_4 = vec2(3.0, 5.0);\n\tvec2 temp_5 = vec2(parameter_time);\n\tvec2 temp_6 = temp_4 + temp_5;\n\tvec2 temp_7 = sin(temp_6);\n\tvec2 temp_8 = temp_7 * 0.25;\n\tfloat temp_9 = distance(temp_3, temp_8);\n\tfloat temp_10 = 1.0 / temp_9;\n\tfloat temp_11 = parameter_time * 1.2;\n\tfloat temp_12 = temp_11 + 3.0;\n\tvec2 temp_13 = vec2(temp_12);\n\tvec2 temp_14 = temp_4 + temp_13;\n\tvec2 temp_15 = sin(temp_14);\n\tvec2 temp_16 = temp_15 * 0.25;\n\tvec2 temp_17 = temp_16 * 0.87;\n\tfloat temp_18 = distance(temp_3, temp_17);\n\tfloat temp_19 = 1.0 / temp_18;\n\tfloat temp_20 = temp_10 + temp_19;\n\tfloat temp_21 = parameter_time * 3.0;\n\tvec2 temp_22 = vec2(temp_21);\n\tvec2 temp_23 = temp_4 + temp_22;\n\tvec2 temp_24 = sin(temp_23);\n\tvec2 temp_25 = temp_24 * 0.25;\n\tvec2 temp_26 = temp_25 * 1.2;\n\tfloat temp_27 = distance(temp_3, temp_26);\n\tfloat temp_28 = 1.0 / temp_27;\n\tfloat temp_29 = temp_20 + temp_28;\n\tvec3 temp_30 = temp_0 * temp_29;\n\tvec3 temp_31 = sin(temp_30);\n\treturn temp_31;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tfragColor = vec4(run(fragCoord.xy, iResolution.xy, iTime), 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XlX3D7","date":"1422362210","viewed":596,"name":"WIP C# -> GLSL compilation","username":"jameswilddev","description":"This is a very early demo of a system for converting C# expressions into GLSL.\nIt's currently missing many optimization passes and features.\nThe eventual goal is to generate raymarchers, and be able to do physics/etc.\n on the CPU.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["metaballs","glsl","c"],"hasliked":0,"parentid":"","parentname":""}}