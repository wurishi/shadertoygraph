{"ver":"0.1","info":{"id":"3sB3zV","date":"1550586857","viewed":375,"name":"SDF-based ambient occlusion test","username":"amally","description":"A demonstration of computing ambient occlusion using SDF data.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["ambientocclusion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int RAY_STEPS = 256;\nconst int AO_SAMPLES = 256;\nconst float AO_DIST = 0.5;\nconst float FIVETAP_K = 2.0;\n\nconst float HALF_PI = 3.14159 * 0.5;\n\n#define AO_ONLY;\n//#define LAMBERT_ONLY;\n//#define BOTH;\n\n//#define FIVE_TAP\n#define HEMISPHERE\n\nvoid coordinateSystem(const vec3 v1, out vec3 v2, out vec3 v3) {\n    \n    if (abs(v1.x) > abs(v1.y)) {\n        v2 = vec3(-v1.z, 0, v1.x) / length(v1.xz);\n    }\n    else {\n        v2 = vec3(0, v1.z, -v1.y) / length(v1.yz);\n    }\n    v3 = cross(v1, v2);\n}\n\nstruct Intersection\n{\n    float t;\n    vec3 color;\n};\n\nvec3 rotateX(vec3 p, float amt) {\n    return vec3(p.x, cos(amt) * p.y - sin(amt) * p.z, sin(p.y) + cos(p.z));\n}\n    \nvec3 rotateY(vec3 p, float a) {\n    return vec3(cos(a) * p.x + sin(a) * p.z, p.y, -sin(a) * p.x + cos(a) * p.z);\n}\n\nvoid raycast(vec2 uv, out vec3 dir, out vec3 eye, out vec3 ref) {\n    eye = vec3(0.0, 0.5, 12.0);\n    ref = vec3(0.0, 0.0, 0.0);\n    \n    float len = tan(3.14159 / 180.0 * 25.0) * distance(eye, ref);\n    vec3 H = normalize(cross(vec3(0.0, 1.0, 0.0), ref - eye));\n    vec3 V = normalize(cross(H, eye - ref));\n    V *= len;\n    H *= len * iResolution.x / iResolution.y;\n    vec3 p = ref + uv.x * H + uv.y * V;\n    dir = normalize(p - eye);\n    dir.x = -dir.x; // Flip it\n}\n\nfloat sphere(vec3 p, float r, vec3 c)\n{\n    return distance(p, c) - r;\n}\n\nfloat torus(vec3 p, vec2 t)\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q) - t.y;\n}\n\n// Box with side lengths b\nfloat box(vec3 p, vec3 b)\n{\n    // For SDF-based AO purposes\n    vec3 absP = abs(p);\n    if(-b.x < absP.x && absP.x < b.x) {\n        if(-b.y < absP.y && absP.y < b.y) {\n            if(-b.z < absP.z && absP.z < b.z) {\n                return -1.0;\n            }\n        }\n    }\n  return length(max(abs(p) - b, 0.0));\n}\n\nfloat dot2( in vec3 v ) { return dot(v,v); }\nfloat udQuad( vec3 p, vec3 a, vec3 b, vec3 c, vec3 d )\n{\n    vec3 ba = b - a; vec3 pa = p - a;\n    vec3 cb = c - b; vec3 pb = p - b;\n    vec3 dc = d - c; vec3 pc = p - c;\n    vec3 ad = a - d; vec3 pd = p - d;\n    vec3 nor = cross( ba, ad );\n\n    return sqrt(\n    (sign(dot(cross(ba,nor),pa)) +\n     sign(dot(cross(cb,nor),pb)) +\n     sign(dot(cross(dc,nor),pc)) +\n     sign(dot(cross(ad,nor),pd))<3.0)\n     ?\n     min( min( min(\n     dot2(ba*clamp(dot(ba,pa)/dot2(ba),0.0,1.0)-pa),\n     dot2(cb*clamp(dot(cb,pb)/dot2(cb),0.0,1.0)-pb) ),\n     dot2(dc*clamp(dot(dc,pc)/dot2(dc),0.0,1.0)-pc) ),\n     dot2(ad*clamp(dot(ad,pd)/dot2(ad),0.0,1.0)-pd) )\n     :\n     dot(nor,pa)*dot(nor,pa)/dot2(nor) );\n}\n\nfloat plane( vec3 p, vec4 n )\n{\n  // n must be normalized\n  return dot(p,n.xyz) + n.w;\n}\n\nfloat sceneMap3D(vec3 pos)\n{\n    float t = sphere(pos, 2.5, vec3(-2.0, -5.0, 0.0));\n    \n    t = min(t, box(pos - vec3(0.0, 0.0, -6.0), vec3(10.0, 10.0, 1.0)));\n    t = min(t, box(pos - vec3(-6.0, 0.0, 0.0), vec3(1.0, 10.0, 10.0)));\n    t = min(t, box(pos - vec3(6.0, 0.0, 0.0), vec3(1.0, 10.0, 10.0)));\n    t = min(t, box(pos - vec3(0.0, 6.0, 0.0), vec3(10.0, 1.0, 10.0)));\n    t = min(t, box(pos - vec3(0.0, -6.0, 0.0), vec3(10.0, 1.0, 10.0)));\n    \n    //t = min(t, udQuad(pos, vec3(-5.0, -5.0, -5.0), vec3(5.0, -5.0, -5.0), vec3(5.0, 5.0, -5.0), vec3(-5.0, 5.0, -5.0)));\n    //t = min(t, udQuad(pos, vec3(5.0, -5.0, -5.0), vec3(5.0, 5.0, -5.0), vec3(5.0, 5.0, 5.0), vec3(5.0, -5.0, 5.0)));\n    //t = min(t, udQuad(pos, vec3(-5.0, -5.0, -5.0), vec3(-5.0, 5.0, -5.0), vec3(-5.0, 5.0, 5.0), vec3(-5.0, -5.0, 5.0)));\n    //t = min(t, udQuad(pos, vec3(-5.0, 5.0, -5.0), vec3(5.0, 5.0, -5.0), vec3(5.0, 5.0, 5.0), vec3(-5.0, 5.0, 5.0)));\n    //t = min(t, udQuad(pos, vec3(-5.0, -5.0, -5.0), vec3(5.0, -5.0, -5.0), vec3(5.0, -5.0, 5.0), vec3(-5.0, -5.0, 5.0)));\n    \n    \n    t = min(t, sphere(pos, 2.0, vec3(-3.0, 0.0, 2.0)));\n    t = min(t, sphere(pos, 2.0, vec3(3.0, -2.0, -3.0)));\n    t = min(t, sphere(pos, 1.5, vec3(-3.0, 3.5, -3.0)));\n    t = min(t, sphere(pos, 1.5, vec3(3.0, 3.5, -3.0)));\n    t = min(t, sphere(pos, 1.0, vec3(0.0, 0.0, 0.0)));\n    \n    return t;\n}\n\nfloat march(vec3 origin, vec3 dir)\n{\n    float t = 0.001;\n    for(int i = 0; i < RAY_STEPS; ++i)\n    {\n        vec3 pos = origin + t * dir;\n        float m = sceneMap3D(pos);\n        if(m < 0.01)\n        {\n            return t;\n        }\n        t += m;\n    }\n    return -1.0;\n}\n\nvec3 computeNormal(vec3 pos)\n{\n    vec3 epsilon = vec3(0.0, 0.001, 0.0);\n    return normalize( vec3( sceneMap3D(pos + epsilon.yxx) - sceneMap3D(pos - epsilon.yxx),\n                            sceneMap3D(pos + epsilon.xyx) - sceneMap3D(pos - epsilon.xyx),\n                            sceneMap3D(pos + epsilon.xxy) - sceneMap3D(pos - epsilon.xxy)));\n}\n\nvec2 random2(vec3 p) {\n    return fract(sin(vec2(p.x, p.x + 1.0)) * vec2(43758.5453123, 22578.1459123));\n}\n\nfloat computeAO(vec3 p, vec3 n, float dist) {\n    float aoSum = 0.0;\n    // Sample a few points in the hemisphere around n at p\n    vec3 t, b;\n    // Make a tangent and bitangent vector\n    coordinateSystem(n, t, b);\n    for(int i = 0; i < AO_SAMPLES; ++i) {\n        // Generate a pair of random [0, 1] floats\n        vec2 xi = random2(p + float(i) * 203.1);\n        // Convert the xi pair to a vector in the hemisphere\n        float len = sqrt(xi.y);\n        float rx = len * cos(6.2831 * xi.x);\n        float ry = len * sin(6.2831 * xi.x);\n        float rz = sqrt(1.0 - xi.y); // z = sqrt(1 - x*x - y*y)\n        vec3 dir = vec3(rx * t + ry * b + rz * n);\n        aoSum += step(0.0, sceneMap3D(p + dir * dist));\n    }\n    return aoSum / float(AO_SAMPLES);\n}\n\nfloat fiveTapAO(vec3 p, vec3 n, float k) {\n    float aoSum = 0.0;\n    for(float i = 0.0; i < 5.0; ++i) {\n        float coeff = 1.0 / pow(2.0, i);\n        aoSum += coeff * (i * AO_DIST - sceneMap3D(p + n * i * AO_DIST));\n    }\n    return 1.0 - k * aoSum;\n}\n\nIntersection sdf3D(vec3 dir, vec3 eye)\n{\n    float t = march(eye, dir);\n\n    vec3 isect = eye + t * dir;\n    vec3 nor = computeNormal(isect);\n\n    float warmDot = max(0.0, dot(nor, normalize(vec3(1.0,1.0,1.0))));\n    float coolDot = max(0.0, dot(nor, normalize(vec3(-1.0,0.0,-1.0))));\n\n    vec3 overallColor = warmDot * vec3(1.0,0.8,0.3);\n    overallColor += coolDot * vec3(0.05,0.2,0.5);\n    overallColor = clamp(overallColor + vec3(0.05, 0.1, 0.15), 0.0, 1.0);\n    \n    #ifdef HEMISPHERE\n    float ao = computeAO(isect, nor, AO_DIST);\n    #endif\n    #ifdef FIVE_TAP\n    float ao = fiveTapAO(isect, nor, FIVETAP_K);\n    #endif\n    \n    \n    #ifdef AO_ONLY\n    vec3 sdfColor = vec3(ao);\n    #endif\n    #ifdef LAMBERT_ONLY \n    vec3 sdfColor = overallColor;\n    #endif\n    #ifdef BOTH \n    vec3 sdfColor = ao * overallColor;\n    #endif\n\n    return Intersection(t, sdfColor);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    // [-1, 1]\n    vec2 uv2 = 2.0 * uv - vec2(1.0);\n    \n    vec3 dir, eye, ref;\n    raycast(uv2, dir, eye, ref);\n    \n  \tIntersection isect = sdf3D(dir, eye);\n    \n    fragColor = vec4(isect.color * step(0.0, isect.t), 1.0);\n    \n}","name":"Image","description":"","type":"image"}]}