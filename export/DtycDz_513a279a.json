{"ver":"0.1","info":{"id":"DtycDz","date":"1700082100","viewed":67,"name":"Page folding","username":"Zgragselus","description":"...","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["fold","page"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.141592\n#define INV_PI_2 2.0 / PI\n#define RADIUS 0.2\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 B = iMouse.xy / iResolution.xy;\n    vec2 d = normalize(abs(iMouse.zw) - iMouse.xy);\n    vec2 C = clamp(B - d * B.x / d.x, 0.0, 1.0);\n    float F = clamp(length(B - C) + (1.0 - (abs(iMouse.z) / iResolution.x)) / d.x, 0.0, 1.0 / d.x);\n    \n    if (d.x < 0.0)\n    {\n        F = distance(B, C);\n    }\n    \n    float proj = dot(uv - C, d);\n    float F1 = proj - F;\n    \n    vec2 E = uv - F1 * d;\n    \n    if (F1 > RADIUS)\n    {\n        // Background paper (to look like we're in notebook - just use default UV)\n        fragColor = texture(iChannel0, uv);\n    }\n    else if (F1 > 0.0)\n    {\n        // Map to cylinder point\n        float theta = asin(F1 / RADIUS);\n        \n        // Calculate point on the front face of cylinder (upper)\n        vec2 p2 = E + d * (PI - theta) * RADIUS;\n        // Calculate point on the back face of cylinder (lower)\n        vec2 p1 = E + d * theta * RADIUS;\n        \n        // If there exists upper mapping, use that, otherwise use lower\n        uv = (p2.x <= 1.0 && p2.y <= 1.0 && p2.x >= 0.0 && p2.y >= 0.0) ? p2 : p1;\n        \n        fragColor = texture(iChannel0, uv);\n    }\n    else\n    {\n        // Calculate transformed coordinates of the page after being 'rolled around' cylinder\n        vec2 p = E + d * (abs(F1) + PI * RADIUS);\n        \n        // Clamp - only display 'rolled around' part where valid, otherwise use default UV\n        uv = (p.x <= 1.0 && p.y <= 1.0 && p.x >= 0.0 && p.y >= 0.0) ? p : uv;\n        \n        fragColor = texture(iChannel0, uv);\n    }\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord;\n    \n    vec2 stripes = sin(uv.xy * 0.15 / sqrt(iResolution.y / 300.0));\n    vec3 paper = vec3(1.0) - 0.5 * vec3(0.5, 0.1, 0.1) * dot(exp(-stripes * stripes * 50.0), vec2(1.0, 1.0));\n    \n    float r = length(uv - iResolution.xy * 0.5) / iResolution.x;\n    float vignette = 1.0 - r * r;\n\t\n    fragColor = vec4(vec3(paper * vignette), 1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}