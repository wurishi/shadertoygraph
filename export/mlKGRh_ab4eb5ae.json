{"ver":"0.1","info":{"id":"mlKGRh","date":"1683579579","viewed":218,"name":"Sodiumvapor Tube","username":"izutionix","description":"Â­","likes":11,"published":1,"flags":8,"usePreview":0,"tags":["tunnel","tube","speed","sodiumvapor"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t = iTime;\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    \n    speed += accel*t;\n    //speed = 2.;\n    zoom /= speed;\n    \n    uv += camSway*sin(t*swayFreq) + vec2(1., -1.)*speed*camShake*cos(t*shakeFreq);\n    t *= speed;\n    \n    float dist = 1./length(uv) * zoom;\n    vec2 dir = cos((vec2(0.,0.5) + dist*.5 + t *.382)*3.14159265); // rotate over distance\n    float g = .5+.5*dot(normalize(uv), dir); // directional lighting\n    g *= g;\n    float l = .05 + .8*g*pow(.5+.5*fcos( (t + dist) * 6.2831), 2. ); // lights\n    l = mix(l, .5, 1.-exp(-fog * dist));\n    \n    vec3 col = l * changeExposure(sodiumVapor, .5*l) + vec3(0.,0.,.03);\n    \n    fragColor = vec4(col, 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec3 sodiumVapor = vec3(1, 0.886275, 0.);\n\nfloat soundVolume = 0.1; // set to non-zero to enable sound\n\nfloat zoom = 0.4;\nfloat speed = 1.5;\nfloat accel = 0.; // set to 0 for a more leisurely experience\nfloat fog = 0.4;\n\nfloat camSway = 0.05;\nfloat camShake = 0.001;\nfloat swayFreq = 1.;\nfloat shakeFreq = 64.;\n\n\n\nvec3 fcos( vec3 x ) // iq's: https://www.shadertoy.com/view/wtXfRH\n{\n    vec3 w = fwidth(x);\n    #if 0\n    return cos(x) * sin(0.5*w)/(0.5*w);     // filtered-exact\n\t#else\n    return cos(x) * smoothstep(6.28,0.0,w); // filtered-approx\n\t#endif  \n}\n\nfloat fcos(float x)\n{\n    return fcos(vec3(x)).x;\n}\n\nvec3 acesApprox(vec3 x) {\n    return x/(x+0.167);\n}\n\nvec3 acesApprox_inverse(vec3 x) {\n    return (x-1.167)/(x-1.)-1.167;\n}\n\nvec3 changeExposure(vec3 col, vec3 b) {\n    b *= col;\n    return b/(b-col+1.);\n}\n\nvec3 changeExposure(vec3 col, float b) {\n    return changeExposure(col, vec3(b));\n}","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[],"code":"// volumecontrol in Common\n\nvec2 mainSound( int samp, float time )\n{\n    float t = time + 3.;\n    float speed = 3. + time*accel;\n\n    return (1.*vec2( sin(6.2831*10.*t*speed) )*exp(-speed/10.)\n        +   .5*vec2( sin(6.2831*20.*t*speed) )*exp(-speed/10.)\n        +  .25*vec2( sin(6.2831*40.*t*speed) )*exp(-speed/10.)\n        + .125*vec2( sin(6.2831*80.*t*speed) )*exp(-speed/10.)) \n        \n        * soundVolume*( .5+.5*(1.-exp(-time/1.))*cos(t*6.*shakeFreq));\n}","name":"Sound","description":"","type":"sound"}]}