{"ver":"0.1","info":{"id":"slBczd","date":"1650109171","viewed":53,"name":"cellular-automata1","username":"beherca","description":"diffusion  test getting closer","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"7lByzd","parentname":"diffusion  test24"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define S(a,b,t) smoothstep(a,b,t)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    //uv.x *= iResolution.x/iResolution.y;\n    vec3 col = vec3(texture(iChannel0, uv));\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float calc(float colorSum, int range, float preColor){\n    \n    float result = 0.;\n    \n    if(colorSum == 3. || colorSum == 11. || colorSum == 12. ){\n        result = 1.;\n    }\n    \n    return result;\n}\n\nvec3 kernel(ivec2 fragCoord){\n    vec3 colorSum = vec3(0.);\n    vec3 preColor = texelFetch(iChannel1, fragCoord, 0).rgb;\n    int range = 1;\n    mat3 m3 = mat3(\n     1., 1.,1.,\n     1.,9.,1.,\n     1.,1.,1.\n    );\n    for(int i = -range; i < range+1 ; i++ ){\n        for(int j = -range; j < range+1 ; j++ ){\n            colorSum += texelFetch(iChannel0, fragCoord + ivec2(i,j), 0).rgb * m3[j+1][i+1];\n        }\n    }\n    \n    \n    vec3 c = vec3(calc(colorSum.r, range, preColor.r));\n    //calc(colorSum.g, range, preColor.g),\n    //calc(colorSum.b, range, preColor.b));\n    \n    return c;\n}\n\nvec3 getColor(ivec2 fragCoord){\n    vec3 num = kernel(fragCoord);\n    return num;\n}\n\n\nvec2 N22(vec2 uv){\n    vec3 a = fract(uv.xyx * vec3(123.34,234.34,345.65));\n    a += dot(a, a+34.45);\n    return fract(vec2(a.x*a.y, a.y*a.z));\n}\n\nvec3 circle(vec2 uv, vec2 pos, float size) {\n    uv.x = uv.x*iResolution.x/iResolution.y;\n    uv = uv - pos;\n    vec3 col = vec3(length(10./size*uv));\n    vec3 result = vec3(smoothstep(.98,1.0,col.x)); \n    return result;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n  \n    vec3 col = vec3(0.);\n\n    if(iFrame < 10){\n        col = vec3(ceil(min(max(N22(uv).x-0.5,0.),1.)));\n    }else{\n        col = getColor(ivec2(fragCoord));\n    }\n    \n    fragColor = vec4(col,1);\n}","name":"Buffer A","description":"","type":"buffer"}]}