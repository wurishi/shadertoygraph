{"ver":"0.1","info":{"id":"4fK3zV","date":"1713005400","viewed":41,"name":"Buffer save/load data example","username":"Guraoz","description":"I've seen some other examples on the topic, thought I'd try my own super simplified version with as much and simple explanation as possible!\nThere are more comments than code.. oh well, may or may not help others.","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["example","tutorial","save","buffer","howto","data","load","fetch","store"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Most everything is based on IQ's works\n//https://www.shadertoy.com/view/MddGzf\n//\n//Storing (3) values in BufferA (with nearest filtering)\n//Then we cycle through these values\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int counter = int(mod(iTime, 3.0));\n    //You could set 'counter' to any integer value up to 'iResolution.x'\n    //For demonstration purposes, we cycle [0-2]\n    //As stated in BufferA, pixel positions hold these values:\n    //(0,0) = Red\n    //(1,0) = Green\n    //(2,0) = Blue\n\n    //Look up the value in 'iChannel0' at '(counter,0)' pixel position at LOD '0'\n    vec4 col = texelFetch(iChannel0, ivec2(counter,0), 0).rgba; \n\n    fragColor = col;\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//In short, 'storeData' will store 'dataToStore' in 'writeToPosition' position\n//dataToStore         - the data to store\n//writeToPosition     - the pixel coordinate to write to\n//fragColor           - the current pixel data\n//currentPosition     - the current pixel we are operating on\n\nvoid storeData(in vec4 dataToStore, in ivec2 writeToPosition, inout vec4 fragColor, in ivec2 currentPosition){\n    if (writeToPosition == currentPosition){ //If the current pixel position is where we intend to store data..\n        fragColor = dataToStore;             //..store data..\n    }else{                                   //(the rest is not actually required)\n        fragColor = fragColor;               //..otherwise, leave it as is\n    }\n}\n\n\n//Store data in 3 pixels\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //(0,0) pixel explained, but they are all very much the same\n    storeData(vec4(1.0, 0.0, 0.0, 1.0), //store Red..\n            ivec2(0,0), //in pixel position (0,0)..\n            fragColor, //the data to override..\n            ivec2(fragCoord)); //the pixel position we're operating on right now\n            \n    storeData(vec4(0.0, 1.0, 0.0, 1.0), ivec2(1,0), fragColor, ivec2(fragCoord)); //stores green, at position 1,0\n    storeData(vec4(0.0, 0.0, 1.0, 1.0), ivec2(2,0), fragColor, ivec2(fragCoord)); //stores blue, at position 2,0\n    \n    //if(fragCoord.x > 3.0) discard;\n    //An example to discard parts of the image\n    //When uncommented, fetching the position (4,0) will be black, as opposed to white\n}","name":"Buffer A","description":"","type":"buffer"}]}