{"ver":"0.1","info":{"id":"fstfWH","date":"1656607696","viewed":134,"name":"Simple digital clock","username":"greedygoblins","description":"A simple digital clock that is aimed at being easy to decipher how it works, rather than succinct.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["time","clock","digital"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* Draw an arbitrary line given a start and end vector\n    uv = uv coord - 0 to 1\n    start = the starting vector in UV space\n    end = the ending vector in UV space\n    thickness = the thickness of the line\n*/\nvec3 line(vec2 uv, vec2 start, vec2 end, float thickness) {\n    vec2 v = end - start + vec2(0., 0.000001);\n    float len = length(v);\n    \n    float angle = -sign(v.y) * acos( dot( vec2(1., 0.), normalize(v) ) );\n    mat2 r = mat2( cos(angle), -sin(angle), sin(angle), cos(angle) );\n    \n    vec2 rUv = (uv - start) * r + start;\n    \n    vec2 l = step(start, rUv) * 1. - step(start + vec2(len, thickness), rUv);\n    \n    return vec3(l.x * l.y);\n}\n\n/* Equals operator (int) */\nint eqi(int a, int b) {\n    return a == b ? 1 : 0;\n}\n\n/* Not equals operator (int) */\nint neqi(int a, int b) {\n    return a != b ? 1 : 0;\n}\n\n/* Draw a digit \n    uv = uv coord - 0 to 1\n    n = the digit to render\n    trs = Translation, rotation and scale\n*/\nvec3 digit(vec2 uv, int n) {\n    const float opacity = 0.1;\n    \n    vec3 seg1 = max(float(eqi(n,0) | eqi(n,2) | eqi(n,6) | eqi(n,8)), opacity) * \n        line(uv, vec2(.03, .05), vec2(.03, .23), .03);\n        \n    vec3 seg2 = max(float(eqi(n,0) | eqi(n,4) | eqi(n,5) | eqi(n,6) | eqi(n,8) | eqi(n,9)), opacity) * \n        line(uv, vec2(.03, .28), vec2(.03, .48), .03);\n        \n    vec3 seg3 = max(float(neqi(n,1) & neqi(n,4)), opacity) * \n        line(uv, vec2(.03, .48), vec2(.13, .48), .05);\n        \n    vec3 seg4 = max(float(neqi(n,5) & neqi(n,6)), opacity) * \n        line(uv, vec2(.13, .48), vec2(.13, .28), .03);\n    \n    vec3 seg5 = max(float(neqi(n,0) & neqi(n,1) & neqi(n,7)), opacity) * \n        line(uv, vec2(.03, .23), vec2(.13, .23), .05);\n        \n    vec3 seg6 = max(float(neqi(n,2)), opacity) * \n        line(uv, vec2(.13, .23), vec2(.13, .05), .03);\n    \n    vec3 seg7 = max(float(neqi(n,1) & neqi(n,4) & neqi(n,7) & neqi(n,9)), opacity) * \n        line(uv, vec2(.03, .0), vec2(.13, .0), .05);\n    \n    return vec3(seg1 + seg2 + seg3 + seg4 + seg5 + seg6 + seg7);\n}\n\nvec3 dots(vec2 uv, vec2 pos) {\n    //     |    make them flash   |   |         first dot                    |   |              second dot                             |\n    return step(mod(iTime, 2.), 1.) * (line(uv, pos, pos + vec2(0., .06), .05) + line(uv, pos + vec2(0., .2), pos + vec2(0., .26), .05));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = mod(iDate.w, 86400.);  // Resets the clock when above 23:59:59\n    \n    // Specify the rotation, scale and translation\n    float rotation = 0.;\n    float scale = .5;\n    vec2 translation = vec2(.75, .35);\n    \n    // Convert these to a 3x3 matrix\n    mat3 s = mat3(\n        1./scale, 0., 0.,\n        0., 1./scale, 0.,\n        0., 0., 1./scale);\n        \n    mat3 t = mat3(\n        1., 0., -translation.x,\n        0., 1., -translation.y,\n        0., 0., 1.);\n        \n    mat3 r = mat3(\n        cos(rotation), -sin(rotation), 0.,\n        sin(rotation), cos(rotation), 0.,\n        0., 0., 1.);\n        \n    mat3 m = t * r * s;   // combined matrix\n    \n    vec2 uv = (vec3(fragCoord/iResolution.xy, 1.) * m).xy;\n\n    vec3 digit1 = digit(uv + vec2(1.2, 0.), int(mod(time / 36000., 3.)));  // hours (tens)\n    vec3 digit2 = digit(uv + vec2(1., 0.), int(mod(time / 3600., 10.)));    // hours (units)\n    vec3 dots1 = dots(uv, vec2(-.75, .12));\n    vec3 digit3 = digit(uv + vec2(.7, 0.), int(mod(time / 600., 6.0)));    // minutes (tens)\n    vec3 digit4 = digit(uv + vec2(.5, 0.), int(mod(time / 60., 10.0)));    // minutes (units)\n    vec3 dots2 = dots(uv, vec2(-.25, .12));\n    vec3 digit5 = digit(uv + vec2(.2, 0.), int(mod(time / 10., 6.0)));     // tens\n    vec3 digit6 = digit(uv, int(mod(time, 10.0)) );                        // units\n\n    // Output to screen\n    fragColor = vec4(digit1 + digit2 + dots1 + digit3 + digit4 + dots2 + digit5 + digit6, 1.0);\n}","name":"Image","description":"","type":"image"}]}