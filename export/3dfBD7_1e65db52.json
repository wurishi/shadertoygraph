{"ver":"0.1","info":{"id":"3dfBD7","date":"1588330608","viewed":363,"name":"Combination Grid","username":"mla","description":"To complete the major trinity of combinatorial generation: combinations themselves. Unranking uses the \"Combinatorial Number System\", algorithm from Knuth.\n\n'x' multiplies index by int(iTime), so gives a permutation for times coprime to 2,3,7 and 11.","likes":7,"published":3,"flags":16,"usePreview":0,"tags":["grid","combinations"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"////////////////////////////////////////////////////////////////////////////////\n// Combinations Grid\n// Matthew Arcus, mla, 2020\n// Show the 792 ways of selecting 5 objects from 12.\n////////////////////////////////////////////////////////////////////////////////\n\nbool alert = false;\nconst int CHAR_X = 88;\nbool key(int code) {\n  return texelFetch(iChannel3, ivec2(code,2),0).x != 0.0;\n}\n\n// Return true if the kth item is selected in the Nth\n// combination of T items. Algorithm from Knuth, TAOCP,\n// 7.2.1.3, Ex. 17.\nbool unrankcombination(int T, int N, int k) {\n  int t = T, x = 0, x1 = 1, c = t-1;\n  while (x1 <= N) {\n    x = x1; c++; x1 = (c+1)*x1/(c+1-t);\n  }\n  while (c > k) {\n    N = N-x;\n    if (t == 2) return N == k;\n    x = x*t/c; t--; c--;\n    while(x > N) {\n      x = x*(c-t)/c; c--;\n    }\n  }\n  return c == k;\n}\n\nvec3 combinations(vec2 fragCoord) {\n  // 12 choose 5 = 792 = 2*2*2*3*3*11\n  ivec2 pdim = ivec2(iResolution.xy);\n  ivec2 pcoord = ivec2(fragCoord);\n  pcoord.y = pdim.y-1-pcoord.y;\n  vec3 col = vec3(0.2);\n  // Should have W1 choose N = W*H*H1\n  int W = 11, W1 = 12;\n  int H = 9, H1 = 8;\n  int M = 1, N = 5;\n  ivec2 bdim = ivec2(W*(W1+M)+M, H*(H1+M)+M);\n  ivec2 bcoord = pcoord*bdim/pdim;\n  int nwidth = bdim.x; //14*5+15;\n  int nheight = bdim.y; //14*5+15;\n  int i = bcoord.x, j = bcoord.y;\n  int i1 = (i+W1)%(W1+M); // Index within a horizontal block\n  int j1 = (j+H1)%(H1+M);   // Index within a vertical block\n  if (i1 < W1 && j1 < H1) {\n    int index = (i-M)/(W1+M)*(H*H1)+(j-M)/(H1+M)*H1+j1;\n    if (key(CHAR_X)) index = (index*int(iTime))%(W*H*H1);\n    bool p = unrankcombination(N,index,W1-i1-1);\n    if (p) col = vec3(0.8);\n    else col = vec3(0.5);\n  }\n  ivec2 boffset = (bcoord*pdim+bdim-1)/bdim; // Index of 1st pixel in block\n  if (bcoord.x > 0 && j1 < H1 && pcoord.x == boffset.x) col = vec3(0);\n  if (bcoord.y > 0 && i1 < W1 && pcoord.y == boffset.y) col = vec3(0);\n  return col;\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n  fragColor = vec4(combinations(fragCoord),1);\n}","name":"Image","description":"","type":"image"}]}