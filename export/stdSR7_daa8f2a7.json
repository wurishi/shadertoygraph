{"ver":"0.1","info":{"id":"stdSR7","date":"1638913543","viewed":71,"name":"Kulka","username":"Aszanat","description":"Kulka.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["kulka"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_MARCH_STEPS 128\n#define PRECISION 0.001\n#define MAX_MARCH_DIST 25.\n#define LICZBA 1000000.\n\nfloat potega(float x){\n    return x * x * x * x * x * x * x;\n}\n\nfloat get_plane_dist(vec3 point, vec3 plane_part){ //uwaga, zakładam że moja podłoga jest równoległa do płaszczyzny xy\n    return (point.y - plane_part.y);\n}\n\nfloat get_ball_dist(vec3 point, vec3 center, float r){\n    return (length(center - point) - r);\n}\n\nvec3 ray_march(vec3 camera, vec3 direction){ //RATUNKU co ja mam jeszcze dostarczyć temu czemuś?!\n    float total_dist = 0.0;\n    vec3 v; //W chuj tajemnicze, bo sama nie wiem co dokładnie będzie robić\n    vec3 position = camera;\n    vec3 plane = vec3(0., -0.5, 0.);\n    vec3 ball_center = vec3(0., 0., -2.0);\n    float ball_r = .5;\n    \n    for (int i = 0; i < MAX_MARCH_STEPS; i++){\n        v = min(get_ball_dist (position, ball_center, ball_r),\n            get_plane_dist (position, plane)) * normalize(direction);\n        position += v;\n        total_dist += length(v);\n        if ((total_dist > MAX_MARCH_DIST) || (length(v) < PRECISION)){\n            break;\n        }\n    }\n    return vec3(clamp((LICZBA / potega(total_dist)), 0., 1.));//CZEMU TA KULKA JEST CAŁA BIAŁA, POMOCYYY\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy - vec2(0.5);\n    uv.y *= iResolution.y/iResolution.x;\n    \n    vec3 camera_pos = vec3(0., 0., -10.);\n    vec3 march_direction = vec3(uv - camera_pos.xy, 3);\n    \n    vec3 col = ray_march(camera_pos, march_direction);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}