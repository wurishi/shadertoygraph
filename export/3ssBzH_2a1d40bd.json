{"ver":"0.1","info":{"id":"3ssBzH","date":"1587689821","viewed":80,"name":"M4A - Basic Raymarching","username":"kcconch","description":"basic raymarching shader. following Jamie Wong's Tutorial https://www.shadertoy.com/view/llt3R4\n\n\n\n","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int MAX_MARCHING_STEPS = 255;\nconst float MIN_DIST = 0.0;\nconst float MAX_DIST = 100.0;\nconst float EPSILON = 0.0001;\n\nfloat SDF( vec3 p )\n{\n  float s = 1.0;\n  return length(p)-s;\n}\n\nfloat shortestDistanceToSurface(vec3 eye, vec3 marchingDirection, float start, float end) {\n    float depth = start;\n    for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n        float dist = SDF(eye + depth * marchingDirection);\n        if (dist < EPSILON) {\n\t\t\treturn depth;\n        }\n        depth += dist;\n        if (depth >= end) {\n            return end;\n        }\n    }\n    return end;\n}\n            \n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 centered = fragCoord - (iResolution.xy / 2.0);\n\tvec3 dir = normalize(vec3(centered, -500));\n    vec3 eye = vec3(0.0, 0.0, 5.0);\n    float dist = shortestDistanceToSurface(eye, dir, MIN_DIST, MAX_DIST);\n    \n    if (dist > MAX_DIST - EPSILON) {\n        // Didn't hit anything\n        fragColor = vec4(0.0, 0.0, 0.0, 0.0);\n\t\treturn;\n    }\n    \n    float distColor = 1.0 - ((dist -3.0) / 2.0);\n    \n    fragColor = vec4(distColor, distColor, distColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}