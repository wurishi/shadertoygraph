{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"#define iterations 100\n#define power 7.0\n\n#define rot_speed 0.1\n#define trans_speed 0.7\n\nvec3 vector_pow(in vec3 vec, float p) {\n    float r = length(vec);\n    float phi = p * atan(vec.y, vec.x);\n    float theta = p * atan(length(vec.xy), vec.z);\n    \n  // return vec3(vec.x*vec.x-vec.y*vec.y, 2.0*vec.x*vec.y, 0.0);\n    \n    return pow(r, p) * vec3(\n        sin(theta) * cos(phi),\n        sin(theta) * sin(phi),\n        cos(theta));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfloat aspect = iResolution.x / iResolution.y;\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec3 coords = 1.15 * vec3(aspect * (2.0*uv.x-1.0), 2.0*uv.y-1.0, 0.0);\n    //coords.y;\n    //coords += vec3(-0.5, 0.0, 0.0);\n    \n    coords.z = sin(trans_speed*iTime);\n    \n    coords.xy = vec2(\n        coords.x*cos(rot_speed*iTime)-coords.y*sin(rot_speed*iTime), \n        coords.x*sin(rot_speed*iTime)+coords.y*cos(rot_speed*iTime));\n    \n    vec3 pos = vec3(0.0);\n    \n    int its = -1;\n    \n    for (int it = 0; it < iterations; it++) {\n    \t\n        pos = vector_pow(pos, power) + coords;\n        \n        if (dot(pos, pos) > 4.0) {\n            its = it;\n            break;\n        }\n    }\n    \n\tfragColor = vec4((its==-1)?vec3(1.0):pow(vec3(float(its-2)/float(iterations-2)), vec3(2.0, 0.8, 20.0)),1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XlfGzf","date":"1423655551","viewed":247,"name":"mandelbulb slice","username":"kejran","description":"uguu","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["3d","fractal"],"hasliked":0,"parentid":"","parentname":""}}