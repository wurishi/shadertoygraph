{"ver":"0.1","info":{"id":"cllSWM","date":"1674860641","viewed":128,"name":"Dunes - piano, study","username":"morisil","description":"Music by Julie Amouzegar Kim:\nhttps://soundcloud.com/julie-amouzegar/dunes-piano-version\n","likes":0,"published":3,"flags":64,"usePreview":0,"tags":["fft","music","piano","soundreactive"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4ljSDV","filepath":"https://soundcloud.com/julie-amouzegar/dunes-piano-version","previewfilepath":"https://soundcloud.com/julie-amouzegar/dunes-piano-version","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Copyright Kazimierz Pogoda, 2023 - https://xemantic.com/\n// Music by Julie Amouzegar Kim:\n// https://soundcloud.com/julie-amouzegar/dunes-piano-version\n\n// The music was composed by Julie, my dearest collaborator and\n// cerebral sibling. This sequence of progressions appeared in\n// Julieâ€™s dream, and I was there as well. So even though I heard\n// it already in her dream conceptually, I had to wait until she\n// expressed it so I could perceive it. And I like it a lot,\n// especially while listening to it on loop, while working on\n// visuals driven by this music.\n\n// Here I just want to study how FFT frequency breakdown can be\n// represented spatially. I assumed that if an octave represents\n// a distance of a doubled frequency, then mapping the spatial\n// domain (x-axis) through the power of 2 should equalize\n// distances, like keys on the piano in tempered tuning.\n// And it worked surprisingly well. An effect I believed to be\n// only able to achieve with the MIDI signal.\n\n// The next step in evolution of this study is to somehow overlay\n// representation of octaves in equally tempered tuning.\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    float fftDomain = uv.x;\n    // just the first half of linear fft frequency breakdown\n    fftDomain /= 2.0;\n    fftDomain = pow(fftDomain, 2.0);\n    float fft = texture(iChannel0, vec2(fftDomain, .25)).r;\n    fft = pow(fft, 8.0);    \n    fragColor = vec4(vec3(fft), 1.0);\n}","name":"Image","description":"","type":"image"}]}