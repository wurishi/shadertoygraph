{"ver":"0.1","info":{"id":"XsGXWc","date":"1466914440","viewed":495,"name":"Kaliset","username":"zackpudil","description":"A pretty cheap render of a 3D Kaliset fractal.","likes":16,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","fractal","glow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float tmax = 100.0;\n\nfloat orb;\nfloat de(vec3 p) {\n\n\tp.x = mod(p.x + 1.2, 2.4) - 1.2;\n\tvec4 q = vec4(p, 1);\n\torb = 10000.0;\n\tfor(int i = 0; i < 15; i++) {\n        // 3D Kaliset formula\n\t\tq = 5.0*abs(q)/dot(q.xyz, q.xyz) - vec4(2.4, 0.9, 2.4, 0);\n        \n        // some random orbit trap.  Based on sqaure cosine.\n\t\torb = min(orb, sin(abs(q.x*q.y)));\n\t}\n\t\n\treturn (length(q.xyz))/q.w - 0.01;\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord ) {\n    \n    // frag coords\n\tvec2 uv = -1.0 + 2.0*(fragCoord.xy/iResolution.xy);\n\tuv.x *= iResolution.x/iResolution.y;\n\t\n    // camera.\n\tvec3 ro = vec3(iTime, 0, -3);\n\tvec3 ww = normalize(vec3(iTime - 3.0*sin(iTime), 2.0*smoothstep(-0.5, 0.5, cos(iTime))*sign(cos(iTime*0.5)), 0) - ro);\n\tvec3 uu = normalize(cross(vec3(0, 1, 0), ww));\n\tvec3 vv = normalize(cross(ww, uu));\n\tvec3 rd = normalize(uu*uv.x + vv*uv.y + ww*1.97);\n\t\n    // ray march and glow.\n\tfloat t = 0.0;\n\tfloat g = 0.0;\n\tfor(int i = 0; i < 200; i++) {\n\t\tfloat d = de(ro + rd*t);\n\t\t\n\t\tif(d < 0.0001*(1.0 + 80.0*t) || t >= 10.0) break;\n\t\tt += d*(0.1 + 0.01*t);\n\t\t\n\t\tg += 0.05*(1.0 - d);\n\t}\n\t\n\tg = clamp(g, 0.0, 1.0);\n\t\n    \n\tvec3 col = vec3(0);\n    vec3 mat = vec3(0);\n        \n\tif(t < 10.0) {\n        // geometry\n\t\tvec3 pos = ro + rd*t;\n\t\tvec2 h = vec2(0.001, 0.0);\n\t\tvec3 nor =  normalize(vec3(\n\t\tde(pos + h.xyy) - de(pos - h.xyy),\n\t\tde(pos + h.yxy) - de(pos - h.yxy),\n\t\tde(pos + h.yyx) - de(pos - h.yyx)));\n\t\t\n        // two lights, key and ground light.\n\t\tvec3 key = normalize(vec3(0.8, 0.7, -0.6));\n\t\tvec3 gro = vec3(0, -1, 0);\n\t\t\n        // apply lighting (ambient, key diffuse, bac diffuse, gr diffuse)\n\t\tcol = 0.2*vec3(1);\n\t\tcol += 0.7*clamp(dot(key, nor), 0.0, 1.0);\n\t\tcol += 0.5*clamp(0.2 + 0.8*dot(-key, nor), 0.0, 1.0);\n\t\tcol += 0.3*clamp(dot(gro, nor), 0.0, 1.0);\n\t\t\n        // material based on orbit trap.\n        mat = mix(vec3(0, 0.3, 1), vec3(1, 0.2, 0.2), 4.0*orb);\n\t\tcol *= mat;\n\t}\n\t\n\tcol += g*mat; // glow.\n\tcol = mix(col, vec3(1), 1.0 - exp(-0.1*t)); // distance fog.\n\tcol = sqrt(col); // gamma correction.\n\t\n\tfragColor = vec4(col, 1);\n}","name":"Image","description":"","type":"image"}]}