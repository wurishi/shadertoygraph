{"ver":"0.1","info":{"id":"M3S3RK","date":"1709112314","viewed":130,"name":"Water Running Down Window","username":"Epcilon","description":"Simple water refraction based on a generated water normal map. The look can be much improved by replacing the noise and scrolling data with authored textures.","likes":5,"published":1,"flags":32,"usePreview":1,"tags":["refraction","water","vfx","window","droplets"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define nWater 1.333\n#define nAir 1.000293\n#define nGlass 1.52\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n   \n    vec3 waterNormal = texture(iChannel0, (fragCoord + 0.5f) / iResolution.xy).rgb;\n    \n    // Recalculate normal to [-1, 1]\n    // Z pointing away to have water on the far side of the window\n    waterNormal = vec3(waterNormal.xy * 2.0 - 1.0, -waterNormal.z);\n    \n    \n    // Refract ray. Assume looking straight through window so refraction \n    // only happens between water and air on the far side of the window\n    // Total internal reflection is not handeled gracefully and just avoided by tweaking\n    vec3 incidentRay = vec3(0.0, 0.0, 1.0);\n    vec3 refracted  = refract(incidentRay, waterNormal, nWater/nAir);\n    \n    // Imaginary distance to the scene on the other side of the window\n    float windowSceneDist = 350.0;\n    vec2 uvRefractionOffset = refracted.xy*windowSceneDist;\n    \n    // Clamp to reduce artifacts at the edges of the screen\n    vec3 col = texture(iChannel1, clamp((fragCoord + uvRefractionOffset) / iResolution.xy, 0.001, 0.994)).rgb;\n   \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    vec2 uvAR = fragCoord/iResolution.y;\n    \n    // Distort UVs for stretched and animated noise\n    vec2 uvN = uvAR*6.5;\n    uvN.y += iTime*1.0;\n    uvN.x *= 2.3;\n    mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\n    \n    // Generate noise\n    float f = 0.0;\n    int numOctaves = 1;\n    for(int i = 0; i < numOctaves; i++)\n    {\n        f  += noise( uvN )/(pow(2.0, float(i+1))); uvN = m*uvN;\n    }\n\tf = 0.5 + 0.5*f;\n\n    // Smooth and restrict to make individual \"droplets\"\n    f = smoothstep(0.508, 1.5, f);\n    \n    // Calculate normal vectors from noise\n    vec2 noiseDeriv = -vec2(dFdx(f), dFdy(f));\n    \n    float normalStrength = 0.0095;\n    vec3 noiseNormal = normalize(vec3(noiseDeriv, normalStrength));\n    \n    // Map to [0, 1]\n    vec3 normalMap = vec3((noiseNormal.xy + 1.0) * 0.5, noiseNormal.z);\n    \n    fragColor = vec4(normalMap, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define PI 3.14159265359\n#define animate 1.0\n#define anim animate*sin(iTime)*sin(iTime)\n\nfloat saturate(float f)\n{\n    return clamp(f, 0.0, 1.0);\n}\n\n\nvec2 saturate(vec2 v)\n{\n    return clamp(v, 0.0, 1.0);\n}\n\n\nvec3 saturate(vec3 v)\n{\n    return clamp(v, 0.0, 1.0);\n}\n\nfloat isIn(float f, float lower, float upper)\n{\n    if(f < lower)\n        return 0.5;\n    else if(f > upper)\n        return 1.0;\n    else\n        return 0.0;\n}\n\nfloat is01(float f)\n{\n    return isIn(f, 0.0, 1.0);\n}\n\nfloat is11(float f)\n{\n    return isIn(f, 0.0, 1.0);\n}\n\nfloat isNormal(vec3 v)\n{\n    float sqrLen = dot(v,v);\n    float epsilon = 0.000001;\n    \n    \n    if(sqrLen < 1.0 - epsilon)\n        return 0.5;\n    else if(sqrLen > 1.0 + epsilon)\n        return 1.0;\n    else\n        return 0.0;\n}\n\n\n// Below is IQs Gradient noise\n\n// The MIT License\n// Copyright Â© 2013 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvec2 grad( ivec2 z )  // replace this anything that returns a random vector\n{\n    // 2D to 1D  (feel free to replace by some other)\n    int n = z.x+z.y*11111;\n\n    // Hugo Elias hash (feel free to replace by another one)\n    n = (n<<13)^n;\n    n = (n*(n*n*15731+789221)+1376312589)>>16;\n\n#if 0\n\n    // simple random vectors\n    return vec2(cos(float(n)),sin(float(n)));\n    \n#else\n\n    // Perlin style vectors\n    n &= 7;\n    vec2 gr = vec2(n&1,n>>1)*2.0-1.0;\n    return ( n>=6 ) ? vec2(0.0,gr.x) : \n           ( n>=4 ) ? vec2(gr.x,0.0) :\n                              gr;\n#endif                              \n}\n\nfloat noise( in vec2 p )\n{\n    ivec2 i = ivec2(floor( p ));\n     vec2 f =       fract( p );\n\t\n\tvec2 u = f*f*(3.0-2.0*f); // feel free to replace by a quintic smoothstep instead\n\n    return mix( mix( dot( grad( i+ivec2(0,0) ), f-vec2(0.0,0.0) ), \n                     dot( grad( i+ivec2(1,0) ), f-vec2(1.0,0.0) ), u.x),\n                mix( dot( grad( i+ivec2(0,1) ), f-vec2(0.0,1.0) ), \n                     dot( grad( i+ivec2(1,1) ), f-vec2(1.0,1.0) ), u.x), u.y);\n}","name":"Common","description":"","type":"common"}]}