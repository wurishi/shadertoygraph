{"ver":"0.1","info":{"id":"3lySWR","date":"1586172784","viewed":59,"name":"Projected Music Step 2","username":"michaelforrest","description":"bringing some colour and texture\nhttps://youtu.be/PYTKk2OehrA?t=180","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["music"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 colors[5];\n \ncolors[0] = vec3(0.133, 0.336, 0.391);\ncolors[1] = vec3(0.012, 0.016, 0.215);\ncolors[2] = vec3(0.605, 0.641, 0.523);\ncolors[3] = vec3(0.922, 0.25, 0.172);\ncolors[4] = vec3(0.98, 0.91, 0.797);\n\nvec2 rotateUV(vec2 uv, float rotation) {\n    float sine = sin(rotation);\n    float cosine = cos(rotation);\n\n    // uv -= pivot;\n    uv.x = uv.x * cosine - uv.y * sine;\n    uv.y = uv.x * sine + uv.y * cosine;\n    // uv += pivot;\n\n    return uv;\n}\nstruct Wiggle{\n    vec2 position;\n    float width;\n    float speed;\n    float amplitude;\n    float density;\n    float phase;\n    vec3 color;\n};\nconst int LAYER_COUNT = 11;\nWiggle layers[LAYER_COUNT] = Wiggle[](\n\tWiggle(vec2(0., 0.), 0.3, 2.5, .3, 5. , 0., colors[0]),\n    Wiggle(vec2(0.3, 0.), .2, 1.0, .4, 20., 3.14, colors[0]),\n    Wiggle(vec2(-0.3, 0.), .2, 1.0, .4, 20., 3.14, colors[0]),\n\tWiggle(vec2(0., 0.), 0.1, 2.5, .4, 5. , 0., colors[1]),\n    \n    Wiggle(vec2(-0.5, 0.), .1, 1.0, .3, 40., 3.14, colors[1]),\n    Wiggle(vec2(0.5, 0.), .1, 1.0, .3, 40., 3.14, colors[1]),    \n    \n    Wiggle(vec2(0.3, 0.), .05, 1.0, .4, 20., 3.14, colors[1]),\n    Wiggle(vec2(-0.3, 0.), .05, 1.0, .4, 20., 3.14, colors[1]),\n    //         position    wid  spe  amp  den  pha  col\n    Wiggle(vec2(-0.25, 0.),  .05, .5, 0.1, 50., 0., colors[4]),\n    Wiggle(vec2(0.25, 0.),   .05, .5, 0.1, 50., 0., colors[4]),\n    Wiggle(vec2(0., 0.),   .05, .5, 0.1, 50., 0., colors[4])\n    \n);\n\n\nvec4 wiggleLayer(vec2 uv, Wiggle w, float beat, float skew){\n    uv = rotateUV(uv + w.position, skew);\n    float v = abs(uv.x * 1./w.width);\n    v += sin((uv.y - (iTime * w.speed) + w.phase) * w.density)*w.amplitude * beat;\n    float amount = smoothstep(.5,.5-2./iResolution.y,v);\n    return vec4(w.color, amount);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    float beat = 1. - pow(fract(iTime / .8), 3.);\n    // center is 0\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.xy;\n\n    vec4 col = vec4(colors[2], 1.); // clear\n    float skewAmount = (iMouse.x / iResolution.x) * 2.;\n    float skew = sin(iTime * skewAmount + (uv.y - 0.5) * 3.0) * 0.05;\n\t//uv .x += skew;\n    for(int i = 0; i < LAYER_COUNT; i ++){\n        vec4 c = wiggleLayer(uv, layers[i], beat, skew); \n        if (c.a > 0.5){\n\t       \tcol = c;\n        }\n    }\n    // vec2(uv.x + 0.3 + skew, uv.y)\n\t\n    fragColor = col;\n}\n","name":"Image","description":"","type":"image"}]}