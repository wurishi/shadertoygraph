{"ver":"0.1","info":{"id":"XdKczw","date":"1521564208","viewed":138,"name":"Mandebulb Fractal Test","username":"avol","description":"Testing out Mandebulb fractal variations.","likes":4,"published":1,"flags":64,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sfGzn","filepath":"/media/a/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png","previewfilepath":"/media/ap/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png","type":"cubemap","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4dX3zn","filepath":"/media/a/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png","previewfilepath":"/media/ap/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"ld2SDD","filepath":"https://soundcloud.com/quad-grind/quadgrind-citrus-reflex","previewfilepath":"https://soundcloud.com/quad-grind/quadgrind-citrus-reflex","type":"musicstream","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int \t\tIterations \t\t= 6;\nconst float \tBailout \t\t= 1.1f;\nconst float \tNormalDist\t\t= 0.02f;\n\nconst vec3 \t\tAmbientColor\t= vec3(0.0f, 0.0f, 0.2f);\nconst vec3 \t\tDirectColor\t\t= vec3(0.2f, 0.8f, 0.5f);\n\nconst vec3 \t\tAmbientColor2\t\t= vec3(0.3f, 0.0f, 0.2f);\nconst vec3 \t\tDirectColor2\t\t= vec3(0.8f, 0.2f, 0.5f);\n\nconst vec3 \t\tAmbientColor3\t\t= vec3(0.2f, 0.1f, 0.2f);\nconst vec3 \t\tDirectColor3\t\t= vec3(0.4f, 0.6f, 0.5f);\n\n\n\n// Distance Estimated mandelbulb\nfloat DEM(vec3 pos, float power) \n{\n    vec3 z = pos;\n    float dr = 1.0f;// + abs(sin(iTime)) * 5.0f;\n    float r = 0.0f;\n    \n    float animate = sin(iTime);\n    for (int i = 0; i < Iterations ; i++) \n    {\n        r = length(z);\n        if (r>Bailout) break;\n        \n        \n        // convert to polar coordinates\n        float theta = acos(z.z/r);\n        float phi = atan(z.y,z.x);\n        dr =  pow( r, power-1.0f)*power*dr + 1.0f;\n        \n        // scale and rotate the point\n        float zr = pow( r,power);\n        theta = theta*power;\n        phi = phi*power;\n        \n        // convert back to cartesian coordinates\n        z = zr*vec3(sin(theta)*cos(phi), sin(phi)*sin(theta), cos(theta)) + pos;\n        \n        // transition\n        float transition = mod(iTime, 6.0);\n        \n        if (iTime < 22.5f)\n        \tz += vec3(animate, animate, animate) * 0.5f;\n        else if (iTime < 45.0f)\n        {\n            z += vec3(animate, animate, animate);\n            if (transition < 2.0f)\n                z.x += animate;\n            else if (transition < 4.0f)\n                z.xy += animate;\n            else \n                z.xyz += animate;\n        }\n        else\n        {\n            z.xy += animate * 1.2f;\n        }\n    }\n    return 0.5f*log(r)*r/dr;\n}\n\nvec4 comp(vec2 uv, vec3 ta, vec3 rd)\n{\n\tvec2 \t\t\tsoundUV\t\t\t= (uv.yx * vec2(1.,-1.) + vec2(0.,1.));\n    vec4 \t\t\tsound\t\t\t= texture(iChannel2, soundUV * 4.0f ) * 0.5f;\n    float \t\t\tpower \t\t\t= 2.0f;\n    \n    rd.x -= (sound.x * 2.0f - 1.0f) * 0.1f;\n    rd.y -= (sound.x * 2.0f - 1.0f) * 0.1f;\n    \n    if (iTime < 22.5f) \t\t\t\tpower = mix(2.0, 8.0, iTime / 22.5f) + sound.x;\n    else if (iTime < 45.0f)\t \t\tpower = mix(8.0, 128.0, (iTime - 22.5f) / (22.5f)) + sound.x;\n    else if (iTime < 67.5f)\t\t\tpower = mix(128.0, -64.0, (iTime - 45.0f) / (22.5f)) + sound.x;\n    else if (iTime < 90.0f)\t\t\tpower = mix(-64.0, 64.0, (iTime - 67.0f) / (22.5f)) + sound.x;\n    else\n    {\n        power = sin(iTime * 0.2f) * 8.0f;\n    }\n    \n        \n    float color = 0.0f;\n    float dist \t= 1.0f;\n\n    int i = 0;\n    for (i = 0; i < 128; i++)\n    {\n        vec3 pos = ta + rd * dist;\n\n        dist += DEM(pos, power);\n\n        if (dist > 10.3f || dist < 0.0225)\n            break;\n    }\n    \n    vec3 pos = ta + rd * dist;\n    vec3 normal = normalize(vec3(DEM(pos+vec3(NormalDist, 0, 0), power)-DEM(pos-vec3(NormalDist, 0, 0), power),\n                                 DEM(pos+vec3(0, NormalDist, 0), power)-DEM(pos-vec3(0, NormalDist, 0), power),\n                                 DEM(pos+vec3(0, 0, NormalDist), power)-DEM(pos-vec3(0, 0, NormalDist), power)));\n    \n    float shade = dot(-normal, normalize(vec3(1, -1, 0))) + 0.5f;\n    if (shade < 0.0f) \n        shade = 0.0f;\n    if (shade > 1.0f)\n        shade = 1.0f;\n    \n\n    color += 1.0f * float(i) / (128.0) * shade;\n\t\n    \n    if (iTime < 22.5f)\n    {\n        vec3 color0 = mix(AmbientColor, DirectColor, color);\n        vec3 color1 = mix(AmbientColor2, DirectColor2, color);\n        \n    \treturn vec4(mix(color0, color1, iTime / 22.5f), 1.0);\n    }\n    else if(iTime < 45.5f)\n    {\n        vec3 color0 = mix(AmbientColor2, DirectColor2, color);\n        vec3 color1 = mix(AmbientColor3, DirectColor3, color);\n        \n    \treturn vec4(mix(color0, color1, (iTime - 22.5f) / 22.5f), 1.0);\n    }\n    else\n    {\n        vec3 color0 = mix(AmbientColor, DirectColor, color);\n        vec3 color1 = mix(AmbientColor2, DirectColor2, color);\n        \n        vec3 colorMix = mix(color0, color1, abs( cos(iTime * 0.1f) ));\n        \n        vec3 envColor1 \t= texture(iChannel1, normal).rgb * color;\n        vec3 envColor2 \t= texture(iChannel3, normal).rgb * color;\n        \n        vec3 envColor \t= mix(envColor1, envColor2, abs( sin(iTime * 0.25f) ) );\n        \n        return vec4(mix(colorMix, envColor, abs( sin(iTime * 0.1f) )), 1.0f);\n    }\n    //return vec4(texture( iChannel0, vec2(color, 0), -100.0 ).rgb, 1.0f);// * color;\n}\n\n\n// Camera to world transformation\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n \t// aquire frag & mouse coords\n\tvec2 uv = fragCoord.xy/iResolution.xy;\n    vec2 p = -1.0+2.0*uv;\n\tp.x *= iResolution.x/iResolution.y; // fov\n    \n\tvec3 ro \t= vec3( 2, 2, 0 );\n    vec3 ta \t= vec3( 0, 0, 0 );\n    mat3 ca \t= setCamera( ro, ta, 0.0 );\n\tvec3 rd \t= ca * normalize( vec3(p.xy,2.0) );\n    \n    vec4 color \t= comp(uv, ro, rd);\n    \n    fragColor \t= color;\n}","name":"Image","description":"","type":"image"}]}