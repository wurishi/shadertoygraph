{"ver":"0.1","info":{"id":"4Xffzn","date":"1727909203","viewed":24,"name":"Assignment Three","username":"jisaacs","description":" ","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["procedural"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGRr","filepath":"/media/a/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","previewfilepath":"/media/ap/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float VISUALS_TIME_SCALE = 1.0;\nconst float RINGS_DIST = 1.0;\n\nconst vec3 BG_COLOR = vec3(0.2, 0.0, 0.2);\nconst bool TRIANGLE_CIRCLE_OVERLAP_MODE = true;\n\nconst float TRIANGLE_SIZE = 0.1;\nconst float TRIANGLE_SPARSITY = 0.07;\nconst float TRIANGLE_OPACITY = 0.2;\n\nconst float CIRCLE_SIZE = 0.1;\nconst float CIRCLE_SPARSITY = 0.2;\nconst vec4 CIRCLE_COLOR = vec4(0.6, 0.2, 0.6, 0.9);\n\nconst float SHAPE_EDGE_SMOOTH = 0.005;\n\n// sdfs from https://iquilezles.org/articles/distfunctions2d/\nfloat sdEquilateralTriangle( in vec2 p, in float r )\n{\n    const float k = sqrt(3.0);\n    p.x = abs(p.x) - r;\n    p.y = p.y + r/k;\n    if( p.x+k*p.y>0.0 ) p = vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n    p.x -= clamp( p.x, -2.0*r, 0.0 );\n    return -length(p)*sign(p.y);\n}\n\nfloat sdCircle( vec2 p, float r )\n{\n    return length(p) - r;\n}\n\n\nfloat shapestep(float dist) {\n    return smoothstep(SHAPE_EDGE_SMOOTH, 0.0, dist);\n}\n\nfloat negshapestep(float dist) {\n    return smoothstep(-SHAPE_EDGE_SMOOTH, 0.0, dist);\n}\n\nvec2 rotate(vec2 pos, float rads) {\n    // 2d rotation matrix\n    // https://en.wikipedia.org/wiki/Rotation_matrix\n    return (pos * mat2(\n        cos(rads), -sin(rads),\n        sin(rads), cos(rads)\n        ));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;    \n    \n    uv = (uv * 2.0) - 1.0; // align origin with the center\n    uv.x *= iResolution.x / iResolution.y; // square off aspect ratio\n    vec2 center = vec2(0.0);\n    \n    float t = iTime*VISUALS_TIME_SCALE;\n    \n    vec3 bg = BG_COLOR; \n\n    // Audio\n    float audioSamplePoint = pow(length(uv/2.0),18.0); // tweak scale so that audio's effects are in frame\n    float audioSample = texture(iChannel0, vec2(audioSamplePoint, 0.0)).r; // audio is like a 1d texture\n\n    // *Circles*\n    vec4 circleColor = CIRCLE_COLOR;\n    float circleSize = CIRCLE_SIZE, circleSparsity = CIRCLE_SPARSITY;\n\n    //pos fx\n    vec2 circlePos = vec2(0.0);\n    \n    float radialSectionScale = 0.5;\n        \n    float d = circleSparsity*sin(t/6.0)*RINGS_DIST;\n    float radialSection = ceil(length(uv/d)*radialSectionScale);\n\n    //stagger rotation direction by even or odd \n    float isOddRadialSection = step(1.0, mod(radialSection,2.0));\n    float rotationDirection = isOddRadialSection*2.0-1.0;\n    rotationDirection *= sign(d); // alternate every collapse\n    circlePos += rotate(uv, rotationDirection*t/radialSection); // divide by radial section to compensate for tangential speed\n        \n    //circleColor.g = (10.0/radialSection)/2.0; // fun blend effect\n    \n    // repeat\n    circlePos = mod(circlePos,circleSparsity); // multiply to cells\n    circlePos -= vec2(circleSparsity / 2.0, circleSparsity / 2.0); // center in cell\n    \n    // compute signed distance\n    float circleDist = sdCircle(circlePos, circleSize/2.0); \n    \n    // *Triangles*\n    //color triangle with shadertoy's default chroma code with some adjustments\n    vec4 triColor = vec4(0.5 + 0.5*cos(t*radialSection+uv.xyx+vec3(0,2,4)),TRIANGLE_OPACITY);\n    float triSize = TRIANGLE_SIZE, triSparsity = TRIANGLE_SPARSITY;\n    \n    //pos fx\n    vec2 triPos = vec2(0.0);\n    triPos.x += cos(t);\n    triPos.y += sin(t);\n    \n    // repeat\n    triPos = mod(uv + triPos, triSparsity); // multiply to cells\n    triPos -= vec2(triSparsity / 2.0, triSparsity / 2.0); // center in cell\n    \n    // rotate\n    triPos = rotate(triPos, t);  \n\n    // compute signed distance\n    float triDist = sdEquilateralTriangle(triPos, triSize/2.0); \n    \n    // Paint\n    vec4 color = vec4(bg.rgb, 1.0);\n    color = mix(color, circleColor, shapestep(circleDist)*circleColor.a);\n    \n    float overlapStep;\n    if (TRIANGLE_CIRCLE_OVERLAP_MODE)\n        overlapStep = shapestep(circleDist);\n    else\n        overlapStep = negshapestep(circleDist);\n        \n    color = mix(color, triColor*audioSample, overlapStep*shapestep(triDist)*triColor.a*audioSample);\n\n\n    fragColor = color;\n}","name":"Image","description":"","type":"image"}]}