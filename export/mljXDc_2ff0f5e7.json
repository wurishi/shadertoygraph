{"ver":"0.1","info":{"id":"mljXDc","date":"1676735935","viewed":82,"name":"playing with frequency ratios","username":"arkanon","description":"the text is slightly broken for some numbers, not sure why","likes":3,"published":1,"flags":8,"usePreview":0,"tags":["sound","testing","frequency","ratio"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define EPSILON 0.00001\n#define STROKE_WIDTH 0.2\n#define ILOG10 0.434294481903\n\nvec3 drawDigit(float digit, vec2 pos) {\n    if (pos.x > 64.0 || pos.y > 64.0 || pos.x < 0.0 || pos.y < 0.0) return vec3(0);\n    pos = vec2(pos.x, iChannelResolution[0].y - pos.y);\n    ivec2 uv = ivec2(floor(digit) * 64.0 + pos.x, pos.y - 192.0);\n    return vec3(texelFetch(iChannel0, uv, 0).r);\n}\n\nfloat decimalRSHF(float n, float by) { // decimal right-shift final (returns the byth last digit of n)\n    return floor(fract(n * pow(0.1, by)) * 10.0);\n}\n\nvec3 drawNumber(float number, vec2 pos) {\n    if (number == 0.0) return drawDigit(number, pos);\n    float size = 1.0 + floor(log(number) * ILOG10); // number of digits\n    float rshs = floor(pos.x * 0.015625); // right-shift amount\n    number = decimalRSHF(number, size - rshs);\n    if (pos.x < size * 64.0) {\n        return drawDigit(number, vec2(pos.x - rshs * 64.0, pos.y));\n    }\n    return vec3(0.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalised pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float waveX = floor(iTime)+uv.x*0.01;\n\n    // Waveform\n    // Get current sound\n    float wave = sound(waveX).x*0.125 + 0.5; // [-2, 2] => [0.25, 0.75]\n    // Get gradient\n    float v1 = sound(waveX-EPSILON).x*0.125 + 0.5;\n    float v2 = sound(waveX+EPSILON).x*0.125 + 0.5;\n    float grad = (v2 - v1) / (2.0 * EPSILON); // slope of the graph at x+time\n    // Calculate thickness\n    float lineWidth = (sqrt(abs(grad) + 1.0)) / iResolution.y * STROKE_WIDTH;\n    // Draw line\n    vec3 col = vec3(0.0);\n    if (abs(uv.y - wave) < lineWidth) {\n        col = vec3(1.0);\n    }\n    \n    // Ratio\n    vec2 rat = ratio(floor(iTime));\n    // Get frequencies\n    float f1 = sin(6.283 * rat.x * uv.x);\n    float f2 = sin(6.283 * rat.y * uv.x);\n    // Draw coloured bands\n    if (f1 > 0.0) {\n        col.r++;\n    }\n    if (f2 > 0.0) {\n        col.g++;\n    }\n    // Write the text\n    col += drawNumber(rat.x, vec2(fragCoord.x, iResolution.y - fragCoord.y));\n    col += drawNumber(rat.y, vec2(fragCoord.x, iResolution.y - fragCoord.y - 64.0));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec2 ratio(float time) {\n    float inverseTriangle = floor(sqrt(2.0 * time + 0.125) - 0.5);\n    float triangle = (inverseTriangle * (inverseTriangle + 1.0)) * 0.5;\n    float a = inverseTriangle + 1.0;\n    float b = time - triangle;\n    return vec2(a, b);\n}\n\nvec2 frequencies(float time) {\n    vec2 rat = ratio(floor(time));\n    return vec2(440.0, 440.0 * (rat.x / rat.y));\n}\n\nvec2 sound(float time) {\n    vec2 f = 6.283 * frequencies(time) * time;\n    return vec2(sin(f.x) + sin(f.y));\n}","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[],"code":"vec2 mainSound( int samp, float time )\n{\n    return sound(time) * exp(-3.0 * mod(time, 1.0)) * 0.2;\n}","name":"Sound","description":"","type":"sound"}]}