{"ver":"0.1","info":{"id":"csSfRc","date":"1689928704","viewed":68,"name":"Weird sobel thing","username":"phantombeta","description":"Some weird thing using the output of the sobel operator as vectors.","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["sobel"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n *\n * Copyright (c) 2023 Chronos \"phantombeta\" Ouroboros\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\n// Click to swap back to the original image.\n// Swapping around the order and signs of `vector` changes what the effect looks like.\n// `curPos += vec2 (vector.y, -vector.x);` (the normal code) seems to make some things sharper, and makes medium noise swirly\n// `curPos += vector.xy;` looks interesting with medium grey and RGBA noise. Seems to \"thicken\" edges.\n// `curPos -= vector.xy;` seems to \"thin\" edges.\n\n#define NO_WEIGHTING 0\n#define BUFFER_SOBEL 0\n\nconst float epsilon = 1. / 65536.;\nconst vec2 kernelSize = vec2 (4);\nconst int maxIterationCount = int (kernelSize.x * kernelSize.y);\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord) {\n    vec2 curPos = fragCoord;\n\n    vec3 accum = vec3 (0);\n    float sampleCount = 0.;\n    for (int i = 0; i < maxIterationCount; i++) { // Just to be sure, so we don't crash our GPU\n        vec2 kernelDiff = fragCoord - curPos;\n        if (i > 0 && abs (kernelDiff.x) < epsilon && abs (kernelDiff.y) < epsilon)\n            break;\n        else if (abs (kernelDiff.x) > kernelSize.x || abs (kernelDiff.y) > kernelSize.y)\n            break;\n\n        vec2 uv = curPos / iResolution.xy;\n\n#if BUFFER_SOBEL\n        vec2 vector = texture (iChannel1, uv).xy;\n#else\n        vec2 vector = sobel (iChannel0, uv);\n#endif\n        vec3 col = texture (iChannel0, uv).rgb;\n\n#if NO_WEIGHTING\n        accum += col;\n        sampleCount++;\n#else\n        float weight = 1. - clamp (dot (kernelDiff / kernelSize, vec2 (1)), 0., 1.);\n        accum += col * weight;\n        sampleCount += weight;\n#endif\n\n        curPos += vec2 (vector.y, -vector.x);\n    }\n\n    // Output to screen\n    //accum = vec3 (texture (iChannel1, fragCoord.xy / iResolution.xy).xy, 0);\n    //sampleCount = 1.;\n\n    if (iMouse.z > 0.0)\n        fragColor = vec4 (texture (iChannel0, fragCoord / iResolution.xy).rgb, 1);\n    else\n        fragColor = vec4 (accum / sampleCount, 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/*\n *\n * Copyright (c) 2023 Chronos \"phantombeta\" Ouroboros\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    fragColor = vec4 (sobel (iChannel0, uv), 0, 1);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"/*\n *\n * Copyright (c) 2023 Chronos \"phantombeta\" Ouroboros\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nconst float sobelGX [] = float [9] (\n    1., 0., -1.,\n    2., 0., -2.,\n    1., 0., -1.\n);\n\nconst float sobelGY [] = float [9] (\n    +1., +2., +1.,\n     0.,  0.,  0.,\n    -1., -2., -1.\n);\n\nfloat luminance (vec3 col) {\n    return .2126 * col.r + .7152 * col.g + .0722 * col.b;\n}\nvec2 sobel (sampler2D tex, vec2 uv) {\n    vec2 texSize = vec2 (textureSize (tex, 0));\n\n    float gXAccum = 0.;\n    float gYAccum = 0.;\n    for (int i = 0; i < 3; i++) {\n        for (int j = 0; j < 3; j++) {\n            float gX = sobelGX [i + j * 3];\n            float gY = sobelGY [i + j * 3];\n\n            vec3 texSample = texture (tex, uv + vec2 (i-1, j-1) / texSize).rgb;\n            float lum = luminance (texSample);\n\n            gXAccum += lum * gX;\n            gYAccum += lum * gY;\n        }\n    }\n\n    return vec2 (gXAccum, gYAccum);\n}","name":"Common","description":"","type":"common"}]}