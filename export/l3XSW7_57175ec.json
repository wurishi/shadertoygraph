{"ver":"0.1","info":{"id":"l3XSW7","date":"1709580900","viewed":67,"name":"Water-esque 01","username":"MickeyH","description":"water ?","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["water"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float random (vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\n// 2D Noise based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    // Smooth Interpolation\n\n    // Cubic Hermine Curve.  Same as SmoothStep()\n    vec2 u = f*f*(3.0-2.0*f);\n    // u = smoothstep(0.,1.,f);\n\n    // Mix 4 corners percentages\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\nfloat blurNoise(vec2 uv, float dist)\n{\n  float outF = noise(uv);\n  outF = mix(outF, noise(vec2(uv.x+dist, uv.y)), 0.15);\n  outF = mix(outF, noise(vec2(uv.x-dist, uv.y)), 0.15);\n  outF = mix(outF, noise(vec2(uv.x, uv.y+dist)), 0.15);\n  outF = mix(outF, noise(vec2(uv.x, uv.y-dist)), 0.15);\n\n  return outF;\n}\n\nvec3 GetWaveColor(vec2 uv, vec3 color)\n{\n    vec3 inCol = vec3(0.0,0.0,0.0);\n    float wave1 = noise(vec2(100.0 + uv.x + iTime, uv.y - 2.0));\n    float wave2 = noise(vec2(uv.x - iTime*1.5, 150.0 + uv.y+iTime*0.5));\n\n    inCol = mix(inCol, color*wave1, 0.5);\n    inCol = mix(inCol, color*wave2, 0.5);\n\n    return inCol;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord )\n{\n   vec2 uv = gl_FragCoord.xy / iResolution.xy;\n\n    float ratio = iResolution.x/iResolution.y;\n\n    uv *= 3.0;\n    uv -= 1.0;\n    uv.y /= ratio;\n\n    uv *= 3.25;\n    float timeVal = iTime*1.5;\n    uv += 100.0 + timeVal;\n\n    vec3 black = vec3(0.0,0.0,0.0);\n    vec3 col = black;\n\n    vec3 color1 = vec3(0.2, 0.4, 0.8);\n    vec3 color2 = vec3(0.05, 0.075, 0.15);\n\n    float blurOffset = 0.25;\n    float blurStrength = 0.25;\n    col = GetWaveColor(uv, color1);\n\n    //col = mix(col, GetWaveColor(vec2(uv.x+blurOffset, uv.y), color1), blurStrength);\n    //col = mix(col, GetWaveColor(vec2(uv.x-blurOffset, uv.y), color1), blurStrength);\n    //col = mix(col, GetWaveColor(vec2(uv.x, uv.y+blurOffset), color1), blurStrength);\n    //col = mix(col, GetWaveColor(vec2(uv.x, uv.y-blurOffset), color1), blurStrength);\n\n    col = mix(col, GetWaveColor(vec2(uv.x+blurOffset, uv.y+blurOffset), color1), blurStrength);\n    col = mix(col, GetWaveColor(vec2(uv.x-blurOffset, uv.y-blurOffset), color1), blurStrength);\n    col = mix(col, GetWaveColor(vec2(uv.x-blurOffset, uv.y+blurOffset), color1), blurStrength);\n    col = mix(col, GetWaveColor(vec2(uv.x+blurOffset, uv.y-blurOffset), color1), blurStrength);\n\n    vec3 bright = col * step(0.45, length(col));\n    vec3 dark = col * step(length(col), 0.25);\n    col= bright+dark;\n\n    col *= 2.0;\n\n    float cosWave = blurNoise(vec2(uv.x+sin(iTime*-0.5)+cos(iTime*0.1), uv.y+cos(iTime*2.0)), 0.5);\n    col = mix(color2, col, step(0.01, length(col)));\n    col = mix(col, color2, cosWave);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}