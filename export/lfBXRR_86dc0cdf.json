{"ver":"0.1","info":{"id":"lfBXRR","date":"1705954141","viewed":60,"name":"Bad Planet (worse clouds)","username":"Shwag","description":"Using 3d noise to change the radius smoothly along a sphere","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int MAX_MARCHING_STEPS = 255;\nconst float MIN_DIST = 0.0;\nconst float MAX_DIST = 100.0;\nconst float PRECISION = 0.001;\nconst vec3 LIGHT_POS = vec3(3,0,3.);\n\n\n// Rotation matrix around the Y axis.\nmat3 rotateY(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, 0, s),\n        vec3(0, 1, 0),\n        vec3(-s, 0, c)\n    );\n}\n\n// Identity matrix.\nmat3 identity() {\n    return mat3(\n        vec3(1, 0, 0),\n        vec3(0, 1, 0),\n        vec3(0, 0, 1)\n    );\n}\n\nvec3 random3(vec3 c) {\n\tfloat j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n\tvec3 r;\n\tr.z = fract(512.0*j);\n\tj *= .125;\n\tr.x = fract(512.0*j);\n\tj *= .125;\n\tr.y = fract(512.0*j);\n\treturn r-0.5;\n}\n\n/* skew constants for 3d simplex functions */\nconst float F3 =  0.3333333;\nconst float G3 =  0.1666667;\n\n/* 3d simplex noise */\nfloat simplex3d(vec3 p) {\n\t /* 1. find current tetrahedron T and it's four vertices */\n\t /* s, s+i1, s+i2, s+1.0 - absolute skewed (integer) coordinates of T vertices */\n\t /* x, x1, x2, x3 - unskewed coordinates of p relative to each of T vertices*/\n\t \n\t /* calculate s and x */\n\t vec3 s = floor(p + dot(p, vec3(F3)));\n\t vec3 x = p - s + dot(s, vec3(G3));\n\t \n\t /* calculate i1 and i2 */\n\t vec3 e = step(vec3(0.0), x - x.yzx);\n\t vec3 i1 = e*(1.0 - e.zxy);\n\t vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\t \t\n\t /* x1, x2, x3 */\n\t vec3 x1 = x - i1 + G3;\n\t vec3 x2 = x - i2 + 2.0*G3;\n\t vec3 x3 = x - 1.0 + 3.0*G3;\n\t \n\t /* 2. find four surflets and store them in d */\n\t vec4 w, d;\n\t \n\t /* calculate surflet weights */\n\t w.x = dot(x, x);\n\t w.y = dot(x1, x1);\n\t w.z = dot(x2, x2);\n\t w.w = dot(x3, x3);\n\t \n\t /* w fades from 0.6 at the center of the surflet to 0.0 at the margin */\n\t w = max(0.6 - w, 0.0);\n\t \n\t /* calculate surflet components */\n\t d.x = dot(random3(s), x);\n\t d.y = dot(random3(s + i1), x1);\n\t d.z = dot(random3(s + i2), x2);\n\t d.w = dot(random3(s + 1.0), x3);\n\t \n\t /* multiply d by w^4 */\n\t w *= w;\n\t w *= w;\n\t d *= w;\n\t \n\t /* 3. return the sum of the four surflets */\n\t return dot(d, vec4(52.0));\n}\n\nstruct Surface{\n    float sd;\n    vec3 col;\n};\n\n\nSurface sdFloor(vec3 p, vec3 color, float h) {\n  Surface s;\n  s.sd = p.y + h;\n  s.col = color;\n  return s;\n}\n\nSurface sdBox( vec3 p, vec3 b, vec3 offset, vec3 col, mat3 trans)\n{\n  p = (p - offset) * trans;\n  vec3 q = abs(p) - b;\n  float d = length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n  return Surface(d, col);\n}\n\n\nSurface sdSphere(vec3 p, vec3 offset, float radius, vec3 color, mat3 trans){\n    //p = (p - offset) * trans;\n    //radius = 4. + simplex3d(p)/4.;\n    //p = abs(p)-radius;\n    //p = p *trans - offset*trans;\n    return Surface(length(p)-radius, color);\n}\n\nSurface sdPlanet(vec3 p, vec3 offset, float radius, vec3 color, mat3 trans){\n    p = (p - offset) * trans;\n    float height = radius + simplex3d(p/3.)/3.;\n    height += simplex3d( (p+vec3(0,0,1)))/10.;\n    //height += simplex3d(4. * p+vec3(0,0,4))/40.;\n    \n    if(height<radius+.01){\n        color = vec3(0,0,1);\n    }\n    \n    //height = clamp(height,radius,height);\n    height = max(height,radius);\n    //p = abs(p)-radius;\n    //p = p *trans - offset*trans;\n    return Surface(length(p)-height, color);\n}\n\nSurface sdClouds(vec3 p, vec3 offset, float radius, vec3 color, mat3 trans){\n    p = (p - offset) *trans ;\n    float width = .3;\n    float appear = step(.1,simplex3d(p/2.));\n    float h = radius*appear;\n    float d = max(length(p)-h, -(length(p)-h+width));\n    return Surface(d,color);\n}\n\n\nSurface opU(Surface s1, Surface s2){\n    if(s1.sd > s2.sd){\n        return s2;\n    }\n    return s1;\n}\n\nSurface sdScene(vec3 p) {\n  //vec3 floorColor = vec3(mod(floor(p.x) + floor(p.z), 2.0));\n  //Surface co = sdFloor(p, floorColor,2.);\n  \n  Surface planet = sdPlanet(p, vec3(0.,0.,-4), 4., vec3(0,1,0), rotateY(iTime/1.5));\n  \n  Surface clouds = sdClouds(p, vec3(0.,0.,-4.), 5.5, vec3(1.,1.,1.), rotateY(iTime/2.));\n  //Surface cube = sdBox(p,vec3(1,1,1),vec3(0,1.-4.),vec3(0,1,0),rotateY(iTime));\n  //co = opU(co, light);\n  \n  return opU(clouds,planet);\n}\n\nvec3 calcNormal(vec3 p) {\n  vec2 e = vec2(1.0, -1.0) * 0.0005; // epsilon\n  float r = 1.; // radius of sphere\n  return normalize(\n    e.xyy * sdScene(p + e.xyy).sd +\n    e.yyx * sdScene(p + e.yyx).sd +\n    e.yxy * sdScene(p + e.yxy).sd +\n    e.xxx * sdScene(p + e.xxx).sd);\n}\n\n\nSurface rayMarch(vec3 ro, vec3 rd, float start, float end){\n    float depth = start;\n    Surface co;\n    \n    for(int i=0; i<MAX_MARCHING_STEPS; i++){\n        vec3 p = ro+rd*depth;\n        co = sdScene(p);\n        depth+=co.sd;\n        if(co.sd<PRECISION || depth>end){\n            break;\n        }\n    \n    }\n    \n    co.sd = depth;\n    \n    return co;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = (fragCoord - .5 * iResolution.xy) / iResolution.y;\n\n  vec3 col = vec3(0);\n  \n  vec3 ro = vec3(0,0,10);\n  vec3 rd = normalize(vec3(uv,-1));\n  Surface co = rayMarch(ro,rd,MIN_DIST,MAX_DIST);\n  \n  if (co.sd > MAX_DIST) {\n      col = vec3(.3); // ray didn't hit anything\n  } else {\n      vec3 p = ro + rd*co.sd;\n      vec3 normal = calcNormal(p);\n      vec3 lightDirection = normalize(LIGHT_POS-p);\n      \n      float dif = clamp(dot(normal,lightDirection),0.,1.);\n      \n      \n      \n      col = co.col * vec3(dif); // ray hit something\n      //col = co.col;\n      \n  }\n\n  // Output to screen\n  fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}