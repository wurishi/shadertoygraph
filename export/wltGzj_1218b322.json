{"ver":"0.1","info":{"id":"wltGzj","date":"1576938414","viewed":95,"name":"florid ripple","username":"changlongLi","description":"ripple and simplex noise","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["2d","noise","simplex"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// create by :changlongLi\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\n\nvec3 permute(vec3 x) { return mod(((x*34.0)+1.0)*x, 289.0); }\n\nfloat snoise(vec2 v){\n  const vec4 C = vec4(0.211324865405187, 0.366025403784439,\n           -0.577350269189626, 0.024390243902439);\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n  vec2 i1;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n  i = mod(i, 289.0);\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n  + i.x + vec3(0.0, i1.x, 1.0 ));\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy),\n    dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\nvec3 hsv2rgb_smooth( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n\trgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n\n// 波纹\nvec3 createRipple(vec2 pos,vec2 uv){\n\t vec3 col = vec3(0.);\n\t// 中心\n    // vec2 pos = vec2(0.5,0.5);\n    //波纹宽度\n    float width = 0.52;\n    //波纹数量\n    float rippleNum = 3.;\n    //扩散速度\n    float speed = 1.5;\n    //距离\n    float dis = distance(pos,uv);\n    //动画\n    float action = dis * rippleNum * 5. - iTime*speed ;\n    //宽度逐渐减小\n    width *= (0.6-dis);\n    //是否是波纹, 0 是波纹, 1 是背景\n    float isRipple = smoothstep(width,width+0.05,abs(sin(action)));\n\n \t//背景颜色\n\tcol += vec3(dis,dis,0.) * isRipple;\n    //波纹颜色\n  \tvec3 color = hsv2rgb_smooth(vec3(snoise(uv),1,1));\n\tcol += color * (1. - isRipple);\n    \n    return vec3(col);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  \n    \n    vec2 uv = fragCoord.xy/iResolution.xy;\n    uv.x *= iResolution.x/iResolution.y;\n    uv *= 1.8;\n\n    vec3 color1 = createRipple(vec2(0.320,0.300),uv*snoise(uv));\n\t\n    vec3 col = color1 - hsv2rgb_smooth(vec3(snoise(uv)*sin(iTime),1.0,0.3));\n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}