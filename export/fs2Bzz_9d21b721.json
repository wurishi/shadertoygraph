{"ver":"0.1","info":{"id":"fs2Bzz","date":"1645645092","viewed":243,"name":"3 channel midi synth","username":"blower5","description":"sequencer, synthesizer, and visualizer. \ncomposed in ableton live, exported as midi, data processed in google sheets and notepad++.\n\nthe pulse waves look ugly!! ","likes":8,"published":1,"flags":8,"usePreview":0,"tags":["sequencer","synthesizer"],"hasliked":0,"parentid":"fdsBWs","parentname":"pulse wave synth"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//wave renderer from https://www.shadertoy.com/view/WsjcDz\nvoid mainImage(out vec4 fragColor, vec2 fragCoord)\n{;\n    vec2 uv = fragCoord / iResolution.xy;\n    uv *= vec2(1,3);\n    vec2   xy = 2.0* fract(uv) -1.,\n         cell = floor(uv);\n    float index = cell.y,\n           time = xy.x/10.0 + iTime;\n           \n    vec3 snd = rendwaves(time);\n    snd*= 2.0;\n    snd-= 1.0;\n    float[] wave = float[] (snd.x,snd.y,snd.z);\n    \n    float pct = wave[int(index)],\n          v = xy.y - 0.5*pct;\n   \n   fragColor = vec4(0.0, 1.0-abs(v)/fwidth(v)/1.5, 0.0, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec2 mainSound( int samp, float time ) {\n    vec3 snd = rendwaves(time);\n    //play sound pan square waves slightly\n    return vec2( VOLUME*(snd.x+snd.y+0.7*snd.z), VOLUME*(snd.x+0.7*snd.y+snd.z) );\n}","name":"Sound","description":"","type":"sound"},{"inputs":[],"outputs":[],"code":"//VOLUME!\nfloat VOLUME = 0.2;\n//BPM\nfloat bpm = 115.0;\n//loop tick\nint loopt = 7800;\n\n//notes, formated: tick at note on, midi note value, midi velocity, tick at note off\nint[] seq1 = int[] (\n0,59,81,380,\n384,54,98,668,\n672,47,90,764,\n768,52,113,1148,\n1152,55,115,1244,\n1248,62,113,1316,\n1320,61,113,1329,\n1332,59,108,1340,\n1344,58,105,1412,\n1416,57,107,1425,\n1428,55,102,1436,\n1440,54,97,1532,\n1536,47,91,1916,\n1920,42,102,2204,\n2208,35,82,2300,\n2304,40,113,2684,\n2688,43,101,2780,\n2784,50,113,2853,\n2856,49,113,2865,\n2868,47,107,2879,\n2880,46,102,2949,\n2952,47,106,2973,\n2976,49,113,3069,\n3072,43,113,3452,\n3456,42,113,3644,\n3648,44,119,3836,\n3840,46,124,4028,\n4032,53,97,4220,\n4224,42,121,4412,\n4416,47,113,4604,\n4608,46,113,4796,\n4800,53,98,4988,\n4992,42,103,5180,\n5184,49,102,5372,\n5376,46,99,5564,\n5568,53,92,5756,\n5760,42,96,5948,\n5952,35,111,6140,\n6144,34,121,7292,\n-1,0,0,-1\n);\n\nint[] seq2 = int[] (\n96,74,94,180,\n192,73,90,252,\n264,74,87,274,\n276,73,84,286,\n288,71,81,379,\n384,70,69,522,\n528,66,76,567,\n576,78,94,850,\n864,79,97,947,\n960,78,91,1026,\n1032,79,93,1042,\n1044,78,84,1054,\n1056,76,93,1146,\n1152,74,81,1311,\n1320,76,84,1330,\n1332,74,76,1342,\n1344,73,68,1533,\n1536,74,66,1711,\n1728,73,71,1788,\n1800,74,84,1810,\n1812,73,78,1822,\n1824,71,76,1915,\n1920,70,66,2058,\n2064,66,80,2103,\n2112,78,84,2397,\n2400,79,94,2483,\n2496,78,84,2562,\n2568,79,84,2578,\n2580,78,78,2590,\n2592,76,67,2682,\n2688,74,71,2847,\n2856,76,84,2866,\n2868,74,77,2878,\n2880,73,80,3069,\n3072,74,70,3247,\n3264,73,71,3324,\n3336,74,92,3346,\n3348,73,79,3358,\n3360,71,82,3451,\n3456,70,86,3594,\n3600,66,88,3639,\n3648,78,94,3834,\n3840,77,104,3930,\n3936,78,98,4026,\n4032,77,97,4098,\n4104,78,111,4114,\n4116,77,98,4126,\n4128,74,96,4218,\n4224,73,84,4383,\n4392,74,91,4402,\n4404,73,84,4414,\n4416,71,78,4584,\n4588,73,85,4606,\n4608,74,78,4787,\n4800,72,71,4866,\n4872,74,84,4882,\n4884,72,75,4894,\n4896,70,71,4986,\n4992,68,71,5178,\n5184,70,84,5274,\n5280,65,72,5370,\n5376,62,67,5562,\n5568,60,80,5632,\n5640,62,98,5650,\n5652,60,84,5662,\n5664,58,76,5757,\n5760,56,66,5949,\n5952,58,84,6043,\n6048,51,70,6139,\n6144,53,65,6475,\n6479,62,25,6485,\n6485,60,28,6491,\n6491,62,37,6496,\n6498,60,48,6503,\n6504,62,58,6508,\n6509,67,70,6515,\n6516,60,89,6521,\n6522,62,87,6528,\n6528,67,86,6534,\n6535,60,84,6541,\n6541,62,82,6547,\n6548,67,80,6554,\n6554,72,79,6560,\n6561,60,79,6567,\n6568,62,77,6574,\n6575,67,77,6581,\n6582,72,73,6588,\n6589,60,73,6595,\n6596,62,71,6602,\n6603,67,70,6609,\n6610,72,70,6617,\n6617,60,68,6624,\n6625,62,66,6632,\n6632,67,64,6639,\n6640,72,64,6647,\n6648,60,63,6655,\n6655,62,61,6662,\n6663,67,59,6670,\n6671,72,59,6678,\n6679,60,57,6687,\n6687,62,56,6695,\n6696,67,54,6703,\n6704,72,54,6712,\n673,60,52,6720,\n6721,62,52,6729,\n6730,67,50,6738,\n6739,72,48,6747,\n6748,60,48,6756,\n6757,62,47,6766,\n6766,67,45,6775,\n6776,72,45,6785,\n6785,60,43,6794,\n6795,62,43,6804,\n6805,67,41,6814,\n6815,72,41,6824,\n6825,60,40,6835,\n6835,62,40,6845,\n6846,67,38,6856,\n6857,72,38,6867,\n6868,60,38,6878,\n6879,62,36,6889,\n6890,67,36,6901,\n6901,72,34,6913,\n6913,60,34,6925,\n6925,62,32,6937,\n6937,67,32,6949,\n6950,72,32,6962,\n6962,60,31,6975,\n6975,62,31,6988,\n6989,67,31,7002,\n7002,72,31,7016,\n7016,60,31,7030,\n7030,62,29,7044,\n7045,67,29,7059,\n7059,72,29,7074,\n7075,60,29,7090,\n7090,62,29,7106,\n7106,67,29,7122,\n7122,72,27,7139,\n7139,60,27,7156,\n7157,62,27,7174,\n7174,67,27,7192,\n7193,72,27,7211,\n7211,60,25,7231,\n7231,62,25,7251,\n7251,67,25,7271,\n7271,72,25,7293,\n-1,0,0,-1\n);\n\nint[] seq3 = int[] (\n1488,56,40,1500,\n1512,58,49,1524,\n1536,59,61,1548,\n1560,61,71,1572,\n1584,62,78,1596,\n1608,64,84,1620,\n1632,66,89,1818,\n1824,64,82,1987,\n1990,66,91,2000,\n2004,64,69,2014,\n2017,62,59,2105,\n2112,61,64,2249,\n2256,55,74,2298,\n2304,67,89,2583,\n2592,66,76,2679,\n2688,64,66,2755,\n2760,66,89,2770,\n2772,64,76,2782,\n2784,62,63,2871,\n2880,61,63,3039,\n3048,62,90,3058,\n3060,61,81,3070,\n3072,59,75,3255,\n3264,62,77,3352,\n3360,64,85,3431,\n3432,62,97,3441,\n3444,64,89,3453,\n3456,66,97,3597,\n3600,61,89,3639,\n3648,63,98,3819,\n3823,62,110,3830,\n3831,63,105,3838,\n3840,62,107,4027,\n4032,60,89,4196,\n4200,61,94,4210,\n4212,60,89,4222,\n4224,58,76,4364,\n4368,54,73,4412,\n4416,63,72,4601,\n4608,65,96,4697,\n4704,63,89,4776,\n4777,65,89,4788,\n4788,63,83,4797,\n4801,62,79,4892,\n4896,60,77,4964,\n4968,61,89,4978,\n4979,60,81,4989,\n4992,58,76,5084,\n5088,56,72,5228,\n5232,53,80,5275,\n5280,58,93,5368,\n5376,53,70,5563,\n5568,55,69,5737,\n5740,53,89,5747,\n5748,55,81,5757,\n5760,49,73,5939,\n5952,49,89,6035,\n6048,48,85,6116,\n6120,48,78,6130,\n6132,49,78,6142,\n6144,50,72,7283,\n-1,0,0,-1\n);\n\n//note number to frequency  from https://www.shadertoy.com/view/ldfSW2\nfloat ntof(float n){return (n>0.0)?440.0 * pow(2.0, (n - 67.0) / 12.0):0.0;}\n\n//define synthesizers\nfloat saw(int note, float vol, float t){\n    float frq = ntof(float(note));\n    return mod(t,1.0 / frq)*frq*vol;\n}\nfloat triw(int note,float vol, float t){\n    float frq = ntof(float(note));\n    return abs( mod( t+(1.0/(2.0*frq)), 1.0/frq ) -1.0/(2.0*frq) )*2.0*frq*vol;\n}\nfloat sqr(int note, float vol, float plse, float t){\n    float frq = ntof(float(note));\n    return ceil(sin(6.2832*frq*t)/2.0+plse)*vol;\n}\n\n//initialize wave vars\nfloat triwave,\n      sqr1wave,\n      sqr2wave;\nvec3 rendwaves(float time) {\n    int tick = int(floor(time/(0.625/bpm)));\n    int ltick = tick % loopt;\n    \n    //set tri index and create wave\n    int itri = 0;\n    while (ltick > seq1[itri+3] && seq1[itri] >= 0) {\n        itri += 4;\n    }\n    if (seq1[itri] <= ltick && seq1[itri+3] > ltick) {\n        triwave = triw( seq1[itri+1], float(seq1[itri+2])/128.0, time );\n    } else {\n        triwave = 0.0;\n    }\n    \n    //set sqr1 index and create wave\n    int isqr1 = 0;\n    while (ltick > seq2[isqr1+3] && seq2[isqr1] >= 0) {\n        isqr1 += 4;\n    }\n    if (seq2[isqr1] <= ltick && seq2[isqr1+3] > ltick) {\n        sqr1wave = sqr( seq2[isqr1+1], 0.7*(float(seq2[isqr1+2])/128.0), sin(time)/4.0-0.1, time );\n    } else {\n        sqr1wave = 0.0;\n    }\n    \n    //set sqr2 index and create wave\n    int isqr2 = 0;\n    while (ltick > seq3[isqr2+3] && seq3[isqr2] >= 0) {\n        isqr2 += 4;\n    }\n    if (seq3[isqr2] <= ltick && seq3[isqr2+3] > ltick) {\n        sqr2wave = sqr( seq3[isqr2+1], 0.7*(float(seq3[isqr2+2])/128.0), cos(time)/4.0-0.1, time );\n    } else {\n        sqr2wave = 0.0;\n    }\n    \n    return vec3(triwave, sqr1wave, sqr2wave);\n}","name":"Common","description":"","type":"common"}]}