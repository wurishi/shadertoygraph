{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"\n// Created by Denis Antiga a.denis1 at yahoo.com\n// Started from the sample of inigo quilez \n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// Example of an interesting Join Operator in the distance field\n\nfloat sdPlaneY( vec3 p )\n{\n    return p.y;\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n    return length(p)-s;\n}\n\n\n\n\nfloat length2( vec2 p )\n{\n    return sqrt( p.x*p.x + p.y*p.y );\n}\n\n\n\n//----------------------------------------------------------------------\n\n\nvec2 opU( vec2 d1, vec2 d2 )\n{\n    return (d1.x<d2.x) ? d1 : d2;\n}\n\n\n\n\n\nvec2 opLink(float d1,float d2,float r,float c1,float c2)\n{\t\n\tfloat dmin;\n\tif (d1<d2)\n\t\tdmin=d1;\n\telse\n\t\tdmin=d2;\n\t\n\tfloat p2=(d1+d2+r*4.)*0.5;\n\tfloat r2=r*r;\n\tfloat ds1=sqrt(r2+r2)-r;\n\tfloat ds2=sqrt(r2*4.+r2)-r;\n\tfloat a=(sqrt(p2*(p2-(d1+r))*(p2-(d2+r))*(p2-2.*r)));\n\t\n\t\n\tif ((d1<=ds1+0.1&&d2<=ds2)||(d1<=ds2&&d2<=ds1+0.1))\n\t\t{\n\t\tdmin=a/r-r;\n\t\treturn vec2(dmin,c2);\n\t\t}\n\t\n\t\n\treturn vec2(dmin,c1);\n}\n\n\n\n\n//----------------------------------------------------------------------\n\nvec2 map( in vec3 pos )\n{\n    vec2 res = opU( vec2( sdPlaneY(     pos), 1.0 ),\n                    opLink(sdSphere(    pos-vec3( 0.0,0.25, 0.0), 0.25 ),\n\t\t\t\t\t\t\tsdSphere(    pos-vec3( 0.0+cos(iTime*0.3)*0.9,0.25, 0.0), 0.25 ),\n\t\t\t\t\t\t\t0.25,30.0,45.0) );\n\t\n    return res;\n}\n\n\n\n\nvec2 castRay( in vec3 ro, in vec3 rd, in float maxd )\n{\n    float precis = 0.00001;\n    float h=precis*2.0;\n    float t = 0.0;\n    float m = -1.0;\n    for( int i=0; i<60; i++ )\n    {\n        if( abs(h)<precis||t>maxd ) continue;//break;\n        t += h;\n        vec2 res = map( ro+rd*t );\n        h = res.x;\n        m = res.y;\n    }\n\n    if( t>maxd ) m=-1.0;\n    return vec2( t, m );\n}\n\n\nfloat softshadow( in vec3 ro, in vec3 rd, in float mint, in float maxt, in float k )\n{\n    float res = 1.0;\n    float dt = 0.02;\n    float t = mint;\n    for( int i=0; i<30; i++ )\n    {\n        if( t<maxt )\n        {\n        float h = map( ro + rd*t ).x;\n        res = min( res, k*h/t );\n        t += max( 0.02, dt );\n        }\n    }\n    return clamp( res, 0.0, 1.0 );\n\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    vec3 eps = vec3( 0.001, 0.0, 0.0 );\n    vec3 nor = vec3(\n        map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n        map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n        map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n    return normalize(nor);\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n    float totao = 0.0;\n    float sca = 1.0;\n    for( int aoi=0; aoi<5; aoi++ )\n    {\n        float hr = 0.01 + 0.05*float(aoi);\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        totao += -(dd-hr)*sca;\n        sca *= 0.75;\n    }\n    return clamp( 1.0 - 4.0*totao, 0.0, 1.0 );\n}\n\n\n\n\nvec3 render( in vec3 ro, in vec3 rd )\n{\n    vec3 col = vec3(0.0);\n    vec2 res = castRay(ro,rd,20.0);\n    float t = res.x;\n    float m = res.y;\n    if( m>-0.5 )\n    {\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal( pos );\n\n        //col = vec3(0.6) + 0.4*sin( vec3(0.05,0.08,0.10)*(m-1.0) );\n        col = vec3(0.6) + 0.4*sin( vec3(0.05,0.08,0.10)*(m-1.0) );\n        \n        float ao = calcAO( pos, nor );\n\n        vec3 lig = normalize( vec3(-0.6, 0.7, -0.5) );\n        float amb = clamp( 0.5+0.5*nor.y, 0.0, 1.0 );\n        float dif = clamp( dot( nor, lig ), 0.0, 1.0 );\n        float bac = clamp( dot( nor, normalize(vec3(-lig.x,0.0,-lig.z))), 0.0, 1.0 )*clamp( 1.0-pos.y,0.0,1.0);\n\n        float sh = 1.0;\n        if( dif>0.02 ) { sh = softshadow( pos, lig, 0.02, 10.0, 7.0 ); dif *= sh; }\n\n        vec3 brdf = vec3(0.0);\n        brdf += 0.20*amb*vec3(0.10,0.11,0.13)*ao;\n        brdf += 0.20*bac*vec3(0.15,0.15,0.15)*ao;\n        brdf += 1.20*dif*vec3(1.00,0.90,0.70);\n\n        float pp = clamp( dot( reflect(rd,nor), lig ), 0.0, 1.0 );\n        float spe = sh*pow(pp,16.0);\n        float fre = ao*pow( clamp(1.0+dot(nor,rd),0.0,1.0), 2.0 );\n\n        col = col*brdf + vec3(1.0)*col*spe + 0.2*fre*(0.5+0.5*col);\n        \n    }\n\n    col *= exp( -0.01*t*t );\n\n\n    return vec3( clamp(col,0.0,1.0) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 q = fragCoord.xy/iResolution.xy;\n    vec2 p = -1.0+2.0*q;\n    p.x *= iResolution.x/iResolution.y;\n    vec2 mo = iMouse.xy/iResolution.xy;\n        \n    float time = 15.0 + iTime;\n\n    // camera    \n    vec3 ro = vec3( -0.5+3.2*cos(0.1*time + 6.0*mo.x), 1.0 + 2.0*mo.y, 0.5 + 3.2*sin(0.1*time + 6.0*mo.x) );\n    vec3 ta = vec3( -0.5, -0.4, 0.5 );\n    \n    // camera tx\n    vec3 cw = normalize( ta-ro );\n    vec3 cp = vec3( 0.0, 1.0, 0.0 );\n    vec3 cu = normalize( cross(cw,cp) );\n    vec3 cv = normalize( cross(cu,cw) );\n    vec3 rd = normalize( p.x*cu + p.y*cv + 2.5*cw );\n\n    \n    vec3 col = render( ro, rd );\n\n    col = sqrt( col );\n\n    fragColor=vec4( col, 1.0 );\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MssGz2","date":"1374940675","viewed":269,"name":"Join Operator","username":"denis","description":"Join Operator for Distance Field rendering","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["distancefield"],"hasliked":0,"parentid":"","parentname":""}}