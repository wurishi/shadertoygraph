{"ver":"0.1","info":{"id":"7lscWM","date":"1648137451","viewed":128,"name":"abstract_audio_react","username":"leamlld","description":"abstract_audio_react","likes":1,"published":1,"flags":64,"usePreview":0,"tags":["abstractaudioreact"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"llsSWs","filepath":"https://soundcloud.com/whosdady/alice-in-wonderland-remix?utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing","previewfilepath":"https://soundcloud.com/whosdady/alice-in-wonderland-remix?utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// HELLO \n\n#define sound (texture(iChannel0, vec2(0.001,0.25)).x)\n\n\n//FORMES\n\nfloat sdSphere(vec3 c,vec3 p, float r)\n{\n    //return distance(p, c) - r + texture(iChannel1,(p.xy/p.xz/p.xx/p.xx)*(p.zx/p.zy/p.zz)*(p.yx/p.yy/p.yz)*clamp(sound,0.2,0.8)).r;\n    return distance(p, c) - r + (p.x/p.x/p.x/p.x/p.x)+(p.z/p.z/p.z/p.z/p.z)+(p.y/p.y/p.y/p.y/p.y)+clamp(sound,0.2,1.)*sound*2. ;\n}\n\n//DISPL\nfloat getDist(vec3 p)\n{\n    // Setup scene\n    return sdSphere(vec3(1.),p, 1.);\n}\n\n// ROTATION \n\nmat4 rotation3d(vec3 axis, float angle) {\n  axis = normalize(axis);\n  float s = sin(angle);\n  float c = cos(angle);\n  float oc = 1.0 - c;\n\n  return mat4(\n        oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,\n    oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,\n    oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,\n        0.0,                                0.0,                                0.0,                                1.0\n    );\n}\n\nvec3 rotate(vec3 v, vec3 axis, float angle) {\n    return (rotation3d(axis, angle) * vec4(v, 1.0)).xyz;\n}\n\n\n// PALETTES \n\nvec3 palette( float t, vec3 a, vec3 b, vec3 c, vec3 d )\n{\n    return a + b*cos( 61.28318*(c*t+d) );\n}\n\n\nfloat map(vec3 pos) // position 3d de la marche\n{\n\n\n    \n    float volume = 0.0;\n   \n    pos.x+= sin(iTime);\n    pos.y += cos(iTime);\n    \n    pos.z +=sound;\n    float sphere = sdSphere( vec3(5.), pos +vec3(1.,-2.,0.) , 2.5);\n    \n    volume=sphere;\n    return volume;\n}\n\n\nfloat CastRay(vec3 ro, vec3 rd)\n{\n\n    \n    float c = 0.0; // contact\n    for (int i = 0; i<60;i++)\n    { // nombre de pas du ray \n        float ray = map(ro+rd*c); \n        if(ray<(0.0001*c))// distance min = contact\n        {\n            return float(i)/32.;\n        }\n        \n        c+= ray;\n    }\n    \n    return -1.0;\n\n}\n\nvec3 render(vec3 ro, vec3 rd)\n{\n\n    \n    float contact = CastRay(ro,rd); // appel du raycast\n    vec3 col = vec3(0.0); // couleur de base du pixel \n    \n    if (contact ==-1.)// sil ny a pas de contact\n    {\n    \n        col=vec3(0.);// couleur du fond\n    \n    }\n    else \n    {\n        //vec3 nor = GetNormal(ro+rd * contact);\n        //col= vec3(1.-contact); // couleur du volume (blanc)\n        \n        float depth = vec3(1.-contact).r;\n        col = palette(depth ,vec3(0.5),vec3(0.5),vec3(1.),vec3(clamp(sound,0.1,0.8),0.3,0.37));\n        \n    \n    }\n    \n    return col;   \n    \n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    \n    \n    vec2 uv = 2.* fragCoord/iResolution.xy -1.;\n    uv.x*=iResolution.x/iResolution.y;\n    //vec2 mouse = (iMouse.xy/iResolution.xy)-0.5;\n    \n    \n    // parametres camera \n    vec3 cameraPos = vec3(10., 10., 10.);;\n    \n    \n    vec3 cameraTar = vec3(0.0, 2.0, 0.0);\n    \n    // vecteur de direction depuis la cam\n    \n    vec3 forward= normalize(cameraTar- cameraPos);\n    vec3 right = normalize (cross(vec3(0.,-1.,0.),forward));\n    vec3 up = normalize (cross(right,forward));\n    vec3 viewDir = normalize (uv.x* right + uv.y * up + 2. * forward);\n    \n   \n    ///vec3 col;\n    vec3 col = render(cameraPos,viewDir);\n  \n   \n    \n    //affichage des uv \n    //vec3 col = render(cameraPos,viewDir);\n    \n    fragColor =vec4 (col,1.);\n    \n    \n\n\n}","name":"Image","description":"","type":"image"}]}