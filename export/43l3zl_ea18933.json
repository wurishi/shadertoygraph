{"ver":"0.1","info":{"id":"43l3zl","date":"1707831890","viewed":50,"name":"my second raymarching guys","username":"destroyerman","description":"raymarching","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"M3f3zs","parentname":"my first raymarching guys"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 rot2D(float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat2(c,-s,s,c);\n}\n\n// sphere SDF\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\nfloat sdOctahedron( vec3 p, float s)\n{\n  p = abs(p);\n  return (p.x+p.y+p.z-s)*0.57735027;\n}\n\n\nfloat smin( float a, float b, float k )\n{\n    float h = max( k-abs(a-b), 0.0 )/k;\n    return min( a, b ) - h*h*k*(1.0/4.0);\n}\n\n// cosine based palette, 4 vec3 params\nvec3 palette( in float t )\n{\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.263, 0.416, 0.557);\n\n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat map(vec3 p) {\n    \n    vec3 q = p; // copy input\n    \n    q.z += iTime * .4;\n    \n    q.xy = fract(q.xy) - .5; // spacing 1 \n    // - .5 because total the range is 1 (divided by 2)\n    q.z = mod(q.z, .25) - .125; // spacing 0.25 \n    // - .125 because total the range is .25 (//)\n    \n    \n    float box = sdOctahedron(q, .1); // paste the copy to the box func\n    \n    return box;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2. - iResolution.xy) / iResolution.y;\n    vec2 m = (iMouse.xy * 2. - iResolution.xy) / iResolution.y;\n    \n    // default when mouse not clicked\n    // m = vec2(cos(iTime * .2), sin(iTime * .2)) * 0.5;\n    \n    \n    // init\n    vec3 ro = vec3(0., 0., -3.);            // ray origin\n    vec3 rd = normalize(vec3(uv, 1.));      // ray direction \n    float t = 0.;                           // total distance travelled\n    vec3 col = vec3(0.);                    // final pixel color\n    \n    \n    // Vertical cam move\n    // ro.yz *= rot2D(-m.y); \n    // rd.yz *= rot2D(-m.y); \n    \n    // Horizontal cam move\n    //ro.xz *= rot2D(-m.x); \n    // rd.xz *= rot2D(-m.x); \n    \n    \n    // raymarching    \n    int i; \n    \n    \n    for (i = 0; i < 80; i++) {\n        vec3 p = ro + rd * t;   // position along the ray\n        \n        p.xy *= rot2D(t * .1);\n        p.y += sin(t * (m.y + 1.) * 0.5) * .35;\n\n        float d = map(p);       // current distance to the scene\n\n        t += d;                 // march the ray\n        \n        \n        col = vec3(i) / 80.;\n        \n        if (d < .001 ||t > 100.) break; // early stop if close enough or too far\n    }\n    \n    // coloring\n    col = palette(t * .04 + float(i) * .005);\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}