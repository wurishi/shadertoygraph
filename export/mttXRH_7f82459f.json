{"ver":"0.1","info":{"id":"mttXRH","date":"1685816638","viewed":102,"name":"AuroraBoreal","username":"Raistlin_fuego","description":"A lot of problems with shaders!! But here we go...","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","perlinnoise","auroraboreal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MS 100\n#define MT 300.\n#define mD .05\n\nmat2 Rot(float a){\n    float c = cos(a);\n    float s = sin(a);\n    return mat2(c,s,-s,c);\n\n}\nfloat N1(float v){\n    return fract(sin(v*95.342 + v*12.432)*4254.2354);\n}\n\nfloat N21(vec2 p){\n    return fract(sin(dot(p, vec2(195.3454, 83.144)))*1945.2345);\n}\n\nvec3 N23(vec2 p){\n    float r = N1(p.x);\n    float g = N1(p.y);\n    float b = N1(p.x+p.y);\n    return vec3(r, g, b)*.3;\n}\n\nvec2 N(float p){\n    float n = N1(p);\n    vec2 r;\n    if(n > .65) r = vec2(1,0);\n    else if(n > .45 && n < .75) r = vec2(0,1);\n    else if( n > .25 && n < .45) r = vec2(0,-1);\n    else r = vec2(-1, 0);\n    return r;\n}\n\nfloat PerlinNoise(vec2 uv){\n    \n    vec2 id = floor(uv);\n    vec2 i = fract(uv);\n    i = i *i*(3.-2.*i);\n    \n    float n = mix(mix(N21(id), N21(id+vec2(1,0)),i.x),\n                  mix(N21(id+vec2(0,1)), N21(id+vec2(1)), i.x),\n                  i.y);\n                  \n    return n;\n}\n\nfloat FBM(vec2 p, int o){\n     \n    float f = 1.;\n    float a = 1.;\n    float n = 0.;\n    for(int i = 0; i < o; i++){\n        n += PerlinNoise(p*f)*a;\n        p *= 2.;\n        a *= .5;\n    }\n    \n    return n*.1;\n}\n\nvec2 PN(vec2 uv){\n    float x = PerlinNoise(uv);\n    float y = PerlinNoise(uv+vec2(1,.6));\n    return vec2(x,y);\n\n}\n\nvec3 ABoreal(vec2 uv, vec2 pos, vec2 size, vec2 s, vec2 v, vec2 amp, vec2 bluur, \n             vec3 col, vec3 colab, vec3 colrfl){\n             \n    float t = iTime*.4;\n    uv += pos;\n    \n    vec2 pNA = PN(uv*s.x+vec2(t*v.x, 0.)) * amp.x;\n    vec2 pNB = PN(uv*s.y+vec2(t*v.y, 0.)) * amp.y;\n    \n    float c1 = length(uv-pNA);\n    float c2 = length((uv*size)-pNB);\n    float C = mix(c1, c2, .5);\n    \n    col = mix(col, colab,smoothstep(bluur.x, bluur.y,C));\n    col = mix(col, colrfl,smoothstep(.0015, .0,c1));\n    \n    return col;\n\n}\n\nfloat Sphere(vec3 p, vec4 s){\n    return length(p-s.xyz)-s.w;\n\n}\n\nvec4 Add(vec4 a, vec4 b){\n    return a.x < b.x ? a : b;\n\n}\n\nvec3 LinesMap(vec3 p){\n    //p.x += .5 * mod(p.x, 6.);\n    //p.z += .5 * mod(p.x, 5.);\n    vec3 gv = fract(p)-.5;\n    vec3 col;\n    if(gv.x > .45 || gv.z > .45 ) col = vec3(1,0,0);\n    return col;\n\n}\n\nfloat sdCone( in vec3 p, in vec2 c, float h )\n{\n    vec2 q = h*vec2(c.x,-c.y)/c.y;\n    vec2 w = vec2( length(p.xz), p.y );\n    \n\tvec2 a = w - q*clamp( dot(w,q)/dot(q,q), 0.0, 1.0 );\n    vec2 b = w - q*vec2( clamp( w.x/q.x, 0.0, 1.0 ), 1.0 );\n    float k = sign( q.y );\n    float d = min(dot( a, a ),dot(b, b));\n    float s = max( k*(w.x*q.y-w.y*q.x),k*(w.y-q.y)  );\n\treturn sqrt(d)*sign(s);\n}\n\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n  vec3 pa = p - a, ba = b - a;\n  float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n  return length( pa - ba*h ) - r;\n}\n\nfloat Tree(vec3 gv, vec3 id){\n    \n   //Random Position \n   float x = mix(-.3, .3, N21(id.xz*3.4));\n   float y = mix(-.3, .3, N21(id.xz*2.4));\n   \n   //Trunk \n   float r = mix(.002, .04, N21(id.xz));\n   float h = mix(1., 3., N21(id.xz*1.4));\n   float inclination = mix(.01, .1, N21(id.xz));\n   float trunk = sdCapsule(gv, vec3(x, 0, y), vec3(x,h,y), r);\n   \n   //Branches\n   vec3 gvB = gv ;\n   float rB = mix(.5, 1.5, N21(id.xz));\n   float rTop = mix(.005, .2, N21(id.xz));\n   float branch = sdCone(gvB-vec3(x,h+.3,0.), vec2(rB, 6.), .4) - (cos(gv.x*4.) + sin(gv.y*2.))*.1; //+ (FBM(gv.xz, 4)- FBM(gv.xz-10.10, 2))*rTop;\n   float branch2 = sdCone(gvB-vec3(x,h-.3,0.), vec2(rB, 11.), 2.); //+ (FBM(gv.xz, 4)- FBM(gv.xz-10.10, 2))*rTop;\n\n\n   \n   float tree = min(branch, trunk);\n   tree = min(tree, branch2);\n   return tree;\n}\n\nfloat Trees(vec3 p){\n    \n    p.y *= 4.;\n    vec3 id = p;\n    vec3 gv = p;\n    \n    gv.xz = fract(p.xz)-.5;\n    id.xz = floor(p.xz);\n    \n    return Tree(gv, id);\n\n}\n\nvec4 GetDist(vec3 p){\n    vec4 s = vec4(Trees(p), N23(floor(p.xz)));\n    vec4 g = vec4(p.y+FBM(p.xz, 6)*1.6, vec3(.5, .3, .0));\n    vec4 lines = vec4(1.);\n    vec4 r = Add(g, s);\n    \n    return r;\n\n}\n\nvec4 Ray(vec3 ro, vec3 rd){\n    float dist;\n    vec3 col;\n    vec4 hit;\n    for(int i = 0; i < MS; i++){\n    \n        vec3 p = ro + rd*dist;\n        hit = GetDist(p);\n        \n        if(hit.x < mD){\n            col = hit.yzw;\n            break;\n        }\n        \n        if(dist > MT){\n            col = vec3(-1);\n            break;\n        }\n        \n        dist+=hit.x;\n    }\n    \n    return vec4(dist, col);\n}\n\nvec3 Normals(vec3 p){\n    vec2 d = vec2(mD, 0);\n    \n    float x = GetDist(p+d.xyy).x-GetDist(p-d.xyy).x;\n    float y = GetDist(p+d.yxy).x-GetDist(p-d.yxy).x;\n    float z = GetDist(p+d.yyx).x-GetDist(p-d.yyx).x;\n    return normalize(vec3(x,y,z));\n}\n\nfloat GetLight(vec3 p, vec3 light){\n    vec3 n = Normals(p);\n    vec3 l = normalize(light-p);\n    float diff = max(0., dot(l, n));\n    return diff;\n\n}\n\nvec3 GetRayDir(vec2 uv, vec3 ro, vec3 l, float z){\n    vec3 f = normalize(l - ro);\n    vec3 r = normalize(cross(vec3(0,1,0), f));\n    vec3 u = cross(f,r);\n    vec3 c = ro + z*f;\n    vec3 i = c + uv.x*r+uv.y*u;\n    return normalize(i-ro);\n}\n\nvec3 AB(vec2 uv, vec3 col){\n    //col *= 0.;\n   col = ABoreal(uv*vec2(.3, .7), vec2(.4, -0.1), vec2(.2, .1), vec2(mix(6., 12., sin(iTime*.1)*.5+.5), 1), vec2(-.6, -.35), vec2(.5, .1), \n       vec2(.15, -0.05), col, vec3(0.2, .7, .3), vec3(.2, .8, .3));\n   col = ABoreal(uv*vec2(.2, .6), vec2(.1, -0.2), vec2(.3, .1), vec2(2, 15), vec2(-.4, -.953), vec2(.2, .1), \n       vec2(.25, -0.15), col, vec3(0.5, .6, .7), vec3(.5, .5, .6));\n   col = ABoreal(uv, vec2(0), vec2(1), vec2(6, 10), vec2(1), vec2(.3, .5), \n       vec2(.15, 0.), col, vec3(0., .3, .5), vec3(.0, .3, .6));\n   col = ABoreal(uv, vec2(.6, .1), vec2(.1, .1), vec2(6, 1), vec2(-.6, -.5), vec2(.5, .1), \n       vec2(.15, -0.05), col, vec3(0.7, .3, .7), vec3(.9, .4, .9));\n   col = ABoreal(uv*vec2(.6, 1.), vec2(.1, -.3), vec2(.2, .1), vec2(6, 1), vec2(.8, .3), vec2(.5, .1), \n       vec2(.15, -0.05), col, vec3(0.3, .9, .7), vec3(.4, 1., .8));\n   col = ABoreal(uv*vec2(.4, .7), vec2(.3, -.3), vec2(.2, .1), vec2(6, 1), vec2(.4, .8), vec2(.5, .1), \n       vec2(.15, -0.05), col, vec3(0.1, .3, .7), vec3(.1, .4, .9));\n   col = ABoreal(uv*vec2(.4, .7), vec2(.4, -.1), vec2(.2, .1), vec2(6, 1), vec2(.4, .8), vec2(.5, .1), \n       vec2(.15, -0.05), col, vec3(0.6, .3, .3), vec3(.7, .3, .2));\n   col = ABoreal(uv*vec2(.5, .8), vec2(-.1, 0.1), vec2(.2, .1), vec2(4, 6), vec2(.3, .653), vec2(.5, .1), \n       vec2(.15, -0.05), col, vec3(0.8, .5, .5), vec3(.9, .6, .6));\n   col = ABoreal(uv*vec2(.5, .8), vec2(-.1, 0.1), vec2(.2, .1), vec2(4, 6), vec2(.3, .653), vec2(.2, .1), \n       vec2(.15, -0.05), col, vec3(0.8, .5, .5), vec3(.9, .6, .6));\n   \n    //Homogenear\n    vec3 colBlue = col * vec3(.2,.3,.5)*3.;\n    col = mix(col*vec3(.3, .6, .6)*2., colBlue, cos(iTime*.5)*.5+.5);\n    //Bright\n    float b = mix(.1, .4, cos(iTime*.3)*.5+.5);\n    return col-=b;\n\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 mouse = iMouse.xy/iResolution.xy;\n    vec3 col = vec3(0);\n    uv.y += .5;\n    uv *= .9;\n    uv *= sin(length(uv)+.7);\n    \n    vec3 ro = vec3(0,.7,-2.);\n    vec3 lookat = vec3(0., .3, 0.);\n    float zoom = 1.;\n    vec3 rd = GetRayDir(uv, ro, lookat, zoom);\n    \n    vec3 light = vec3(0,5,-3);\n    \n    vec4 r = Ray(ro, rd);\n    vec3 p = ro + rd*r.x;\n    float l = GetLight(p, light);\n    \n\n     col += l*r.yzw;\n\n\n  if(r.y == -1.){\n       float scale = 50.;\n       vec2 gv = fract(uv*scale) -.5;\n       float c = length(gv-.1);\n       col += smoothstep(.6, 1.,.01/c);\n       col = AB(uv, col);\n\n\n    }\n\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}