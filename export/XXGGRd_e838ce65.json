{"ver":"0.1","info":{"id":"XXGGRd","date":"1718073601","viewed":26,"name":"pulse ringg","username":"baggyPants666","description":"oops","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["illusion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// Custom uniforms with default values\n#define uNumSticks 6.0\n#define uRotationSpeed 2.0\n#define uStickWidth 0.1\n#define uScaleSpeed 1.0\n#define uChromaticAmount 0.01\n#define uCurvature 3.0\n#define uBendAmount 0.3\n#define uHoleRadius 0.09 \n\n// Noise function\nfloat hash(float n) { return fract(sin(n) * 43758.5453123); }\nfloat noise(vec2 p)\n{\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n    f = f * f * (3.0 - 2.0 * f);\n\n    float n = i.x + i.y * 57.0;\n    return mix(mix(hash(n + 0.0), hash(n + 1.0), f.x),\n               mix(hash(n + 57.0), hash(n + 58.0), f.x), f.y);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n\n    float radius = length(uv);\n    float angle = atan(uv.y, uv.x);\n\n    // Create a small hole in the center\n    if (radius < uHoleRadius) {\n        fragColor = vec4(0.0);\n        return;\n    }\n\n    // Calculate stick index\n    float stickIndex = mod(angle + iTime, 2.0 * 3.14159265 / uNumSticks);\n    stickIndex = abs(stickIndex - (3.14159265 / uNumSticks));\n\n    // Rotate sticks\n    angle += iTime * uRotationSpeed;\n\n    // Apply curvature for tunnel effect\n    float curvature = sin(radius * uCurvature + iTime) * 0.3; // Adjust curvature factor\n    angle += curvature;\n\n    // Apply bending effect\n    angle += uBendAmount * sin(radius * 10.0 + iTime); // Adjust bend factor\n\n    // Scale sticks\n    float scale = 0.5 + 0.5 * sin(iTime * uScaleSpeed + angle * uNumSticks);\n    \n    // Chromatic aberration\n    float r = stickIndex - uChromaticAmount * sin(iTime * 2.0);\n    float g = stickIndex - uChromaticAmount * cos(iTime * 2.0);\n    float b = stickIndex + uChromaticAmount * sin(iTime * 2.0);\n    \n    // Calculate color for sticks\n    vec3 color = vec3(0.0);\n    if (radius < 1.0) // Adjust the radius range for the sticks\n    {\n        // Calculate the stick width based on the scale\n        float stickWidth = uStickWidth * scale;\n        color.r = smoothstep(stickWidth, stickWidth - 0.01, r);\n        color.g = smoothstep(stickWidth, stickWidth - 0.01, g);\n        color.b = smoothstep(stickWidth, stickWidth - 0.01, b);\n    }\n    \n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}