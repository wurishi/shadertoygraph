{"ver":"0.1","info":{"id":"4fG3Rm","date":"1712528141","viewed":77,"name":"fractal brodset","username":"Alkatu","description":"brodset","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float myFractalFunction(in vec2 fragCoord, in int maxStepNumber)\n{\n    int res = 0;\n    float xn = 0.,xn1 = 0.;\n    float yn = 0.,yn1 = 0.;\n    for (int i = 0; i < maxStepNumber; i++)\n    {\n        xn1 = xn * xn - yn * yn + fragCoord.x;\n        yn1 = 2. * xn * yn + fragCoord.y;\n        if (abs(xn1*xn1+yn1*yn1) > 100.)\n        {\n            return float(i) / float(maxStepNumber);\n        }\n        xn = xn1;\n        yn = yn1;\n    }\n    return 1.;\n}\n\nfloat myFractalFunction(in vec2 fragCoord, in int maxStepNumber,in float zoom)\n{\n    int res = 0;\n    float zoom2 = zoom*zoom;\n    float xn = 0.,xn1 = 0.;\n    float yn = 0.,yn1 = 0.;\n    for (int i = 0; i < maxStepNumber; i++)\n    {\n        xn1 = (xn * xn - yn * yn + fragCoord.x * zoom)/zoom2;\n        yn1 = (2. * xn * yn + fragCoord.y * zoom);\n        if (abs(xn1*xn1+yn1*yn1) > 100.*zoom2)\n        {\n            return float(i) / float(maxStepNumber);\n        }\n        xn = xn1;\n        yn = yn1;\n    }\n    return 1.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y ;\n    \n    //vec2 uvBase = vec2(-1.4012, 0.001);\n    vec2 uvBase = vec2(-1.373547, -0.01234831);\n\n    \n    float d = myFractalFunction(uv / exp(iTime/5.) + uvBase,100);\n    vec3 rgb = vec3(d,(d-0.9) * 10.,(d-0.99) * 100.);\n     \n    fragColor = vec4(rgb,1.0);\n}","name":"Image","description":"","type":"image"}]}