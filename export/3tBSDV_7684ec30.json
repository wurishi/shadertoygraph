{"ver":"0.1","info":{"id":"3tBSDV","date":"1567068361","viewed":62,"name":"Peach.js GLSL Bitmap testing","username":"chipbell4","description":"Testing 8bit bitmap-style rendering. In a \"real\" renderer, palette and bitmap would be provided as a uniforms, along with the associated sizes.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["bitmap","8bit"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// gameboy palette\nint PALETTE_SIZE = 4;\nvec4 palette[4] = vec4[4](\n    vec4(0.6078431372549019, 0.7372549019607844, 0.058823529411764705, 1.),\n    vec4(0.5450980392156862, 0.6745098039215687, 0.058823529411764705, 1.),\n    vec4(0.18823529411764706, 0.3843137254901961, 0.18823529411764706, 1.),\n    vec4(0.058823529411764705, 0.2196078431372549, 0.058823529411764705, 1.)\n);\n\nint BITMAP_WIDTH = 8;\nint BITMAP_HEIGHT = 8;\nint bitmap[64] = int[64](\n    9, 9, 9, 9, 9, 9, 9, 9,\n    9, 9, 9, 9, 9, 9, 9, 9,\n    9, 9, 9, 0, 0, 0, 0, 9,\n    9, 9, 0, 0, 0, 9, 9, 9,\n    9, 0, 0, 0, 0, 0, 0, 9,\n    0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0,\n    9, 0, 0, 0, 0, 0, 9, 9\n);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{ \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n   \tint row = BITMAP_HEIGHT - int(uv.y * float(BITMAP_HEIGHT)) - 1;\n    int column = int(uv.x * float(BITMAP_WIDTH));\n    \n    // Time varying pixel color\n    int index = row * BITMAP_WIDTH + column;\n    \n    int paletteIndex = bitmap[index];\n    if (paletteIndex >= PALETTE_SIZE) {\n        fragColor = vec4(0.);\n    } else {\n\t    fragColor = palette[bitmap[index]];\n    }\n}","name":"Image","description":"","type":"image"}]}