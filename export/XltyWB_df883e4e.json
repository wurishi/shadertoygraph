{"ver":"0.1","info":{"id":"XltyWB","date":"1533889056","viewed":419,"name":"Concave polyhedron SDF","username":"TLC123","description":"Polyhedron, Triangle mesh, SDF ,","likes":3,"published":1,"flags":64,"usePreview":0,"tags":["sdf","triangle","distance","mesh","polyhedron","concave","curv"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"MsSXDV","filepath":"https://soundcloud.com/yennyskev/100-wet","previewfilepath":"https://soundcloud.com/yennyskev/100-wet","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//based on https://www.shadertoy.com/view/4sXXRN\n\n// The MIT License\n// Copyright Â© 2014 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//-------------------------------------------------------------------------------- \n\n\n//    A little experiment with Concave polyhedron  SDFs.\n\n//    The motivation was to be able to use triangle meshes in CSG ops with other SDFs.\n    \n//    Polyhedron  must be a closed non intersecting mesh. \n\n//    Some artifacs appear at narrow or coplanar faces (fixed) \n\n//    Defined as a collection of triangles, yeah like a stl donit.\n\n//    For each calculationg a pair of unsigned distance and one inside/outside number. \n    \n//    Basically the closest triangle get first shot to call inside/outside.\n   \n//        but there are some edgecases that requires extra bits\n     \n//        some logic v=  abs(v1.x-v.x)<0.001? (v1.y>v.y?v1:v):     v1.x<=v.x?v1:v; \n\n//    Generally sound sdf, some edge leakage and some GLSL issues.  \n     \n//    In demo Polyhedra is differenced by sphere and smooth unioned with \n//    ground plane to showcase full sdf capabilites\n\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n// music credit to https://soundcloud.com/yennyskev/100-wet\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n\n\n\n\n\n\nfloat sdSphere(in vec3 p, float s) {\n    return length(p) - s;}\nfloat smin( float a, float b, float k )\n{    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);}\n\n \nfloat dot2( in vec3 v ) { return dot(v,v); }\n\nvec2 dTriangle( in vec3 v1, in vec3 v2, in vec3 v3, in vec3 p )\n{\n    vec3 v21 = v2 - v1; vec3 p1 = p - v1;\n    vec3 v32 = v3 - v2; vec3 p2 = p - v2;\n    vec3 v13 = v1 - v3; vec3 p3 = p - v3;\n    vec3 nor = cross( v21, v13 );\n float side=dot(p-v1,nor);\n  float  dist=sqrt( (sign(dot(cross(v21,nor),p1)) + \n                  sign(dot(cross(v32,nor),p2)) + \n                  sign(dot(cross(v13,nor),p3))<2.0) \n                  ?\n                  min( min( \n                  dot2(v21*clamp(dot(v21,p1)/dot2(v21),0.0,1.0)-p1), \n                  dot2(v32*clamp(dot(v32,p2)/dot2(v32),0.0,1.0)-p2) ), \n                  dot2(v13*clamp(dot(v13,p3)/dot2(v13),0.0,1.0)-p3) )\n                  :\n                  dot(nor,p1)*dot(nor,p1)/dot2(nor) );\n    return vec2(dist,side);\n}\n\n \n//=====================================================\nvec2 distlogic(vec2 v,vec2 v1){\nreturn abs(v1.r-v.r)< // if distances are\n             0.00001*  // closer than some fugde factor\n             max(max(v1.r,v.r),1.) // that gets a little larger further out but never below 1\n             ?(v1.g>v.g?v1:v): //select most positive side\n    \t\tv1.r<=v.r?v1:v; // or the common case;\n}\n\nfloat Mypolyhedron(vec3 p )\n{\n    vec2 v=vec2( 99999.,0.) ;\n    \nint numberOfFaces=36;\nvec3[] points = vec3[] (vec3(-1.5,0.75,0.75),vec3(1.5,-0.25,0.75),vec3(1.5,0.75,0.75),vec3(1.5,-0.25,0.75),vec3(-1.5,0.75,0.75),vec3(-1.5,-0.25,0.75),vec3(-1.5,-0.25,-0.25),vec3(1.5,0.75,-0.25),vec3(1.5,-0.25,-0.25),vec3(1.5,0.75,-0.25),vec3(-1.5,-0.25,-0.25),vec3(-1.5,0.75,-0.25),vec3(-1.5,-0.25,-0.25),vec3(1.5,-0.25,0.75),vec3(-1.5,-0.25,0.75),vec3(1.5,-0.25,0.75),vec3(-1.5,-0.25,-0.25),vec3(1.5,-0.25,-0.25),vec3(1.5,-0.25,0.75),vec3(1.5,0.75,-0.25),vec3(1.5,0.75,0.75),vec3(1.5,0.75,-0.25),vec3(1.5,-0.25,0.75),vec3(1.5,-0.25,-0.25),vec3(1.5,0.75,-0.25),vec3(-1.5,0.75,0.75),vec3(1.5,0.75,0.75),vec3(-1.5,0.75,0.75),vec3(1.5,0.75,-0.25),vec3(-1.5,0.75,-0.25),vec3(-1.5,-0.25,-0.25),vec3(-1.5,0.75,0.75),vec3(-1.5,0.75,-0.25),vec3(-1.5,0.75,0.75),vec3(-1.5,-0.25,-0.25),vec3(-1.5,-0.25,0.75),vec3(0.75,-0.75,1.5),vec3(0.75,0.25,-1.5),vec3(0.75,0.25,1.5),vec3(0.75,0.25,-1.5),vec3(0.75,-0.75,1.5),vec3(0.75,-0.75,-1.5),vec3(-0.25,-0.75,-1.5),vec3(-0.25,0.25,1.5),vec3(-0.25,0.25,-1.5),vec3(-0.25,0.25,1.5),vec3(-0.25,-0.75,-1.5),vec3(-0.25,-0.75,1.5),vec3(-0.25,-0.75,-1.5),vec3(0.75,-0.75,1.5),vec3(-0.25,-0.75,1.5),vec3(0.75,-0.75,1.5),vec3(-0.25,-0.75,-1.5),vec3(0.75,-0.75,-1.5),vec3(-0.25,-0.75,-1.5),vec3(0.75,0.25,-1.5),vec3(0.75,-0.75,-1.5),vec3(0.75,0.25,-1.5),vec3(-0.25,-0.75,-1.5),vec3(-0.25,0.25,-1.5),vec3(0.75,0.25,-1.5),vec3(-0.25,0.25,1.5),vec3(0.75,0.25,1.5),vec3(-0.25,0.25,1.5),vec3(0.75,0.25,-1.5),vec3(-0.25,0.25,-1.5),vec3(-0.25,0.25,1.5),vec3(0.75,-0.75,1.5),vec3(0.75,0.25,1.5),vec3(0.75,-0.75,1.5),vec3(-0.25,0.25,1.5),vec3(-0.25,-0.75,1.5),vec3(-0.75,1.5,0.25),vec3(0.25,-1.5,0.25),vec3(0.25,1.5,0.25),vec3(0.25,-1.5,0.25),vec3(-0.75,1.5,0.25),vec3(-0.75,-1.5,0.25),vec3(-0.75,-1.5,-0.75),vec3(0.25,1.5,-0.75),vec3(0.25,-1.5,-0.75),vec3(0.25,1.5,-0.75),vec3(-0.75,-1.5,-0.75),vec3(-0.75,1.5,-0.75),vec3(0.25,-1.5,0.25),vec3(0.25,1.5,-0.75),vec3(0.25,1.5,0.25),vec3(0.25,1.5,-0.75),vec3(0.25,-1.5,0.25),vec3(0.25,-1.5,-0.75),vec3(0.25,1.5,-0.75),vec3(-0.75,1.5,0.25),vec3(0.25,1.5,0.25),vec3(-0.75,1.5,0.25),vec3(0.25,1.5,-0.75),vec3(-0.75,1.5,-0.75),vec3(-0.75,-1.5,-0.75),vec3(-0.75,1.5,0.25),vec3(-0.75,1.5,-0.75),vec3(-0.75,1.5,0.25),vec3(-0.75,-1.5,-0.75),vec3(-0.75,-1.5,0.25),vec3(-0.75,-1.5,-0.75),vec3(0.25,-1.5,0.25),vec3(-0.75,-1.5,0.25),vec3(0.25,-1.5,0.25),vec3(-0.75,-1.5,-0.75),vec3(0.25,-1.5,-0.75) );\nvec3[] faces = vec3[] (vec3(0,1,2),vec3(3,4,5),vec3(6,7,8),vec3(9,10,11),vec3(12,13,14),vec3(15,16,17),vec3(18,19,20),vec3(21,22,23),vec3(24,25,26),vec3(27,28,29),vec3(30,31,32),vec3(33,34,35),vec3(36,37,38),vec3(39,40,41),vec3(42,43,44),vec3(45,46,47),vec3(48,49,50),vec3(51,52,53),vec3(54,55,56),vec3(57,58,59),vec3(60,61,62),vec3(63,64,65),vec3(66,67,68),vec3(69,70,71),vec3(72,73,74),vec3(75,76,77),vec3(78,79,80),vec3(81,82,83),vec3(84,85,86),vec3(87,88,89),vec3(90,91,92),vec3(93,94,95),vec3(96,97,98),vec3(99,100,101),vec3(102,103,104),vec3(105,106,107) );\n  \n    for(int i =0; i<numberOfFaces;i++){\n        \n     vec2 v1 = dTriangle( \n         points[int( faces[i].x)], \n         points[int( faces[i].y)], \n         points[int( faces[i].z)],\n         p);\n         v= distlogic(v,v1);\n    }\n         \n\n      \n    return (v.x*sign(v.y));\n\n}\n\nfloat map( in vec3 p )\n{\nfloat t= iTime*2.5; \np= vec3(p.x*cos(t)-p.z*sin(t ),p.y,p.z*cos(t )+p.x*sin(t )) ;\n    // triangles\t\n\tvec3 p0 = vec3(0,-.8+cos(t+3.)*0.2,0. );\n\tvec3 p1 =  vec3(0,.47+cos(t),-1. );\n\tvec3 p2 =  vec3(1.0,0.3+sin(t/2.),1. );\n\tvec3 p3 =  vec3(-1.0,0.3+sin(t/2.7),1. );\n    vec3 p4 =  mix(vec3(0,0.5,0.5 ),p0,sin(iTime/2.7)*0.99);\nfloat mesh= Mypolyhedron(p);\n    // ground plane here\n\tfloat d2 = p.y + 1.0;\n    // sphere here\n\tvec3 ps = vec3(sin(-iTime),cos(-iTime),sin(2.-iTime)*2. )*0.7;\n    float sphere=sdSphere(p-ps,0.5);  \n\n    \n    return smin( max(-sphere,mesh), d2,0.5+sin(iTime/3.)*0.5 );\t\n}\n\n\n\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//--------------------------------------------------------------------------------\n//-------------------------------------------------------------------------------- \n\n\n\n\n// tracer\nfloat intersect( in vec3 ro, in vec3 rd )\n{\n\tconst float maxd = 10.0;\n\tfloat h = 1.0;\n    float t = 0.0;\n    for( int i=0; i<150; i++ )\n    {\n        if( h<0.000001 || t>maxd ) break;\n\t    h = map( ro+rd*t );\n        t += h;\n    }\n\n    if( t>maxd ) t=-1.0;\n\t\n    return t;\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    vec3 eps = vec3(0.002,0.0,0.0);\n\n\treturn normalize( vec3(\n           map(pos+eps.xyy) - map(pos-eps.xyy),\n           map(pos+eps.yxy) - map(pos-eps.yxy),\n           map(pos+eps.yyx) - map(pos-eps.yyx) ) );\n}\n\nfloat calcSoftshadow( in vec3 ro, in vec3 rd, float k )\n{\n    float res = 1.0;\n    float t = 0.0;\n\tfloat h = 1.0;\n    for( int i=0; i<20; i++ )\n    {\n        h = map(ro + rd*t);\n        res = min( res, k*h/t );\n\t\tt += clamp( h, 0.01, 1.0 );\n\t\tif( h<0.0001 ) break;\n    }\n    return clamp(res,0.0,1.0);\n}\n\nfloat calcOcclusion( in vec3 pos, in vec3 nor )\n{\n    float occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.02 + 0.025*float(i*i);\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos );\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return 1.0 - clamp( occ, 0.0, 1.0 );\n}\n\nvec3 lig = normalize(vec3(1.0,0.9,0.7));\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n\n\tvec3 ro = vec3(0.0, 0.25, 2.0 );\n\tvec3 rd = normalize( vec3(p,-1.0) );\n\t\n\tvec3 col = vec3(0.0);\n\n    float t = intersect(ro,rd);\n    if( t>0.0 )\n    {\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal(pos);\n\t\tfloat sha = calcSoftshadow( pos + nor*0.01, lig, 32.0 );\n\t\tfloat occ = calcOcclusion( pos, nor );\n\t\tcol =  vec3(0.9,0.6,0.3)*clamp( dot( nor, lig ), 0.0, 1.0 ) * sha;\n\t\tcol += vec3(0.5,0.6,0.7)*clamp( nor.y, 0.0, 1.0 )*occ;\n        col += 0.03;\n\t\tcol *= exp( -0.2*t );\n        col *= 1.0 - smoothstep( 5.0, 10.0, t );\n\t}\n\n\tcol = pow( clamp(col,0.0,1.0), vec3(0.45) );\n\t   \n    fragColor = vec4( col, 1.0 );\n}\n\n","name":"Image","description":"","type":"image"}]}