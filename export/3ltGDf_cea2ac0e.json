{"ver":"0.1","info":{"id":"3ltGDf","date":"1577788555","viewed":125,"name":"Mandelbrot Variable Iterations","username":"FairlyArrogant","description":"This is a simple Mandelbrot viewer used to show how changing  the max iterations in the escape time algorithm can affect the generated image. If you have any tips, tricks, or see anything I should improve on, please let me know in the comments!\n","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d","fractal","simple","mandelbrot","beginner","iterations","mandlebrot","ink","variable","twodimensional"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float getGradientColor(int iteration, int maxIteration){\n    return 1.0 -float(iteration) / float(maxIteration);\n}\n\n//Thanks to FabriceNeyret2 for simplifying this method!\nfloat getSegmentedColors(int iteration,int maxIteration){\n\treturn 1.0 - min(1.0, float(iteration * 4 / maxIteration) / 3.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{  \n    vec2 uv = fragCoord / iResolution.y; \n    \n    //----------------------------Some interesting locations-------------------------------\n    //\n    //Full Mandelbrot\n    //xMin = -2.5, yMin = -1.0, change = 2.0, maxIteration = 500, and minIteration = 30.\n    //\n    //SeaHorses\n    //xMin = -0.75, yMin = 0.1, change = 0.01, maxIteration = 500, and minIteration = 0.\n    //\n    //Zoomed in sea horse.\n    //xMin = -0.748, yMin = 0.11, change = 0.004, maxIteration = 500, and minIteration = 0.\n    //\n    //-------------------------------------------------------------------------------------\n    \n    //xMin and yMin are the mandelbrot coordinates displayed in the bottom right corner of the display. \n    float xMin = -0.75; //The minimum x-coordinate for the viewing window. \n    float yMin =  0.1; //The minimum y-coordinate for the viewing window.\n    float change = 0.01;\n    \n    float speed = 1.0; //The animation play speed. Increase to play it faster.\n    int maxIteration = 600;\n    int minIteration = 30;\n    \n    vec2 location = vec2(uv.x * change + xMin, uv.y * change + yMin);\n    \n    int variableIteration = minIteration + int(float((maxIteration - minIteration)) * (cos(speed * iTime) * 0.5 + 0.5));\n\t\n    vec2 coordinates = vec2(0.0);\n    \n    int currentIteration = 0;\n    \n    for(int i = 0; i <= variableIteration; i++){\n        vec2 squared = vec2(pow(coordinates.x, 2.0), pow(coordinates.y,2.0));\n        currentIteration = i;\n        \n        if((dot(squared,vec2(1.0))) >= 4.0){\n            break;\n    \t}\n        else{\n            coordinates = vec2(squared.x - squared.y + location.x, (2.0 * coordinates.x * coordinates.y + location.y));\n        }\n    }\n    //There are two different coloring methods programmed in, one will color the mandelbrot with\n    //four different shades of gray/grey while the other will color each pixel with a linear gradient\n    //between white and black based on the iterations reached.\n    \n    float value = getSegmentedColors(currentIteration, variableIteration);\n    //float value = getGradientColor(currentIteration, variableIteration);\n    \n    vec3 col = vec3(1.0, 0.0, 0.53) * vec3(value);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}