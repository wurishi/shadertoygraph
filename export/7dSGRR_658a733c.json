{"ver":"0.1","info":{"id":"7dSGRR","date":"1620157076","viewed":63,"name":"ray tracing horseplay","username":"space_sheep","description":"use mouse","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raytracinghorseplay"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float err = .0000001;\nfloat pi = 3.14159265;\n\nvec2 rotateCCW(vec2 v, float rad)\n{\n    mat2 m = mat2(cos(rad), sin(rad), -sin(rad), cos(rad));\n    return m*v;\n}\n\nstruct line\n{\n    vec2 a;\n    vec2 b;\n    float s;\n    float y;\n};\nvec2 getNormal(line l)\n{\n    vec2 c = l.a-l.b;\n    return vec2(-c.y,c.x);\n}\n\nvec3 drawLine(vec2 inUv, vec3 color, vec3 inColor, vec2 a, vec2 b, float width)\n{\n    {/*\n       this function returns the line color if\n       the fragment is within the line,\n       else it returns the fragment color unchanged.\n       inColor is the color of the fragment befor line drawing.\n    */}\n    \n    vec2 c = b-a;\n    \n    vec2 q = normalize(vec2(-c.y, c.x));\n    mat2 m = inverse(mat2( c, q ));         \n    \n    inUv -= a;\n    inUv = m*inUv;\n    \n    if(\n        inUv.x > .0 &&\n        inUv.x < 1. &&\n        inUv.y < width &&\n        inUv.y > -width\n    ) return color;\n    else return inColor;\n}\nline getLine(vec2 a, vec2 b)\n{\n    vec2 c = a-b;\n    float s = c.y/c.x;\n    if(s>999999999999.) s=99999999999.;\n    float i = -s*a.x+a.y;\n    return line(a, b, s, i);\n}\nvec2 getIntersect(line a, line b)\n{\n    float x = (b.y - a.y) / (a.s - b.s);\n    float y = a.s * x + a.y;\n    return vec2(x, y);\n}\nvec2 Reflect(line ray, line l)\n{\n    vec2 c = getIntersect(ray, l);\n    vec2 n1 = getNormal(l);\n    vec2 n2 = (dot(ray.a-c, n1) / dot(n1, n1)) * n1;\n    vec2 d = 2.*(n2-ray.a+c)+ray.a-c;\n    return 50.*d+c;\n}\n\n\nstruct poop\n{\n    vec2 d; // direction - the scond line element for reflected ray\n    vec2 i; // intersect\n    vec4 c; // infragColor\n};\npoop perform(vec4 infragColor, vec2 inUv, vec2[4] dots, line ray)\n{   \n    poop test;\n    float Length=5.; vec2 intersect = vec2(.0, .0);\n    vec2 d; // second line element for reflected ray.\n    \n    for(int i=0;i<4;i++)\n    {                \n        line b = getLine(dots[i], dots[(i+1)%4]);\n        vec2 c = getIntersect(ray, b);\n        \n        infragColor.xyz = drawLine(inUv, vec3(.5,.0,.0), infragColor.xyz, dots[i], dots[(i+1)%4], .005);\n\n        if\n        (\n            // check if test.i within xy confinds of the inspected line\n            c.x >= min(b.a.x,b.b.x) - err && \n            c.x <= max(b.a.x,b.b.x) + err &&\n            c.y >= min(b.a.y,b.b.y) - err&& \n            c.y <= max(b.a.y,b.b.y) + err\n        )\n        {\n            if(length(c)<Length) \n            {\n                // return smallet distance intersection\n                Length=length(c); intersect = c;\n                test.d = Reflect(ray, b);\n                test.i = c;\n            }\n        }\n    }\n    \n    if(intersect == vec2(.0,.0))\n        infragColor.xyz = drawLine(inUv, vec3(.5,.5,.5), infragColor.xyz, ray.a, ray.b, .005);\n    \n    infragColor.xyz = drawLine(inUv, vec3(.5,.5,.5), infragColor.xyz, test.i, test.d, .005);\n    infragColor.xyz = drawLine(inUv, vec3(.5,.5,.5), infragColor.xyz, ray.a, test.i, .005);\n    \n    test.c = infragColor;\n    \n    return test;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    fragColor = vec4(.0,.0,.0,1.0);\n    vec2 mouse = iMouse.xy/iResolution.xy;\n    \n    vec2 dots[4] = vec2[4](vec2(-.1,-.1),vec2(.2,-.1),vec2(.1,.1),vec2(-.1,.1));\n    for(int i=0;i<4;i++) \n    { \n        dots[i] = rotateCCW(dots[i], iTime); \n        dots[i] += mouse; \n    }\n\n    float parts = 10.;\n    for(float i=.0; i<=pi/2.; i += pi/(4.+parts))\n    {\n        line l = getLine(vec2(.0,.0), vec2(cos(i)*10.,sin(i)*10.));\n        poop test = perform(fragColor, uv, dots, l);\n        fragColor = test.c;\n    }\n\n    \n}","name":"Image","description":"","type":"image"}]}