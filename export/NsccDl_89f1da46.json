{"ver":"0.1","info":{"id":"NsccDl","date":"1654438126","viewed":174,"name":"colorblind","username":"arthehaxxor","description":"colorblind vision, idk how this stuff actually works, it seems to line up with actual charts, but I can't be sure past intuition","likes":0,"published":3,"flags":32,"usePreview":0,"tags":["colorblind"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// this is how much each cone biases the other\n\n#define RR 1.0\n#define RG 0.0\n#define RB 0.0\n#define GR 0.0\n#define GG 1.0\n#define GB 0.0\n#define BR 0.0\n#define BG 1.0\n#define BB 0.0\n\n// for example, RR is the weight for how much red \n// biases the red chanel\n\n// changing these values results in different \n// color blindess type\n\n// for example, all ones lead to complete color blindness \n// and setting GR to 1.0 leads to a type of red green\n// color blindness\n\n// tecnically, there is no actual color blindness that \n// would be created from the BR or RB biases since \n// there is no colorblindness that involves both \n// the red and blue cones \n\n\n/*** CODE, DO NOT TOUCH WHILE PRESENTING ***/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // reading image and storing normal color values\n    vec4 col = texture(iChannel0,uv); \n    float r = col.x;\n    float g = col.y;\n    float b = col.z;\n    \n    \n    // taking weighted average of the colors\n    if(uv.y>0.5) {\n        col.x=(r*RR+g*RG+b*RB)/(RR+RG+RB);\n        col.y=(r*GR+g*GG+b*GB)/(GR+GG+GB);\n        col.z=(r*BR+g*BG+b*BB)/(BR+BG+BB);\n    }\n    \n    col.x=pow(col.x,2.2);\n    col.y=pow(col.y,2.2);\n    col.z=pow(col.z,2.2);\n    \n    \n\n    // Output to screen\n    fragColor = col;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid mainImage(out vec4 frag_colour, in vec2 frag_coord) {\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = frag_coord / iResolution.xy;\n    frag_colour = vec4(hsv2rgb(vec3(uv.x,1,1)), 1.f);\n}\n","name":"Buffer A","description":"","type":"buffer"}]}