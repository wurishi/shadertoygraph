{"ver":"0.1","info":{"id":"NlV3RR","date":"1642786100","viewed":86,"name":"Noise from Scratch","username":"Catarina","description":"Created to use as a gist.\nAs a reference I've used the book of shaders.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["noisewhitevalueperlinsimplex"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"///////////////\n// HASHES //\n//////////////\n\nfloat sineHash12(vec2 v)\n{\n return fract(sin(dot(v,\n  vec2(34.23768, 102.83833) * 3741.37748\n )));\n}\n\nfloat hash12(vec2 p)\n{\n vec3 p3  = fract(vec3(p.xyx) * 23.1031);\n    p3 += dot(p3, p3.yzx + 110.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n\nvec2 hash22(vec2 p){\n    p = vec2( dot(p,vec2(127.1,311.7)),\n              dot(p,vec2(269.5,183.3)) );\n    return -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\n/*\nvec2 hash22(vec2 p)\n{\n vec3 p3 = fract(vec3(p.xyx) * vec3(3747.1031, 983.1030, 2948.0973));\n  p3 += dot(p3, p3.yzx+34.33);\n  return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n*/\n\n/////////////////\n//  NOISES  //\n/////////////////\nfloat whiteNoise(vec2 uv){\n vec2 iuv = floor(uv);\n return hash12(iuv);\n}\n\nfloat valueNoise(vec2 uv){\n vec2 iuv = floor(uv);\n vec2 fuv = fract(uv);\n\n // Linear Interpolated valueNoise\n // vec2 suv = fuv;\n\n // Cubic Hermine Curve (Smoothstep)\n vec2 suv = fuv * fuv * (3. - 2.*fuv);\n // suv = smoothstep(0., 1., fuv);\n\n\n // Getting corners of tile\n float bl = hash12(iuv);\n float br = hash12(iuv + vec2(1., 0.));\n float b = mix(bl, br, suv.x);\n\n float tl = hash12(iuv + vec2(0., 1.));\n float tr = hash12(iuv + vec2(1., 1.));\n float t = mix(tl, tr, suv.x);\n\n\n // Mix  corners percentage\n float rand = mix(b, t, suv.y);\n\n\n return rand;\n}\n\nfloat layeredValueNoise(vec2 uv){\n  float c = 0.;\n  c += valueNoise(uv);\n  c += valueNoise(uv*2. )*0.5;\n  c += valueNoise(uv*4. )*0.25;\n  c += valueNoise(uv*8. )*0.125;\n  c += valueNoise(uv*16.)*0.0625;\n\n  return c*0.5;\n}\n\nfloat perlinNoise(vec2 uv){\n vec2 iuv = floor(uv);\n vec2 fuv = fract(uv);\n\n vec2 suv = fuv * fuv * (3. - 2.*fuv);\n\n float bl = dot(hash22(iuv + vec2(0., 0.)), fuv - vec2(0., 0.));\n float br = dot(hash22(iuv + vec2(1., 0.)), fuv - vec2(1., 0.));\n float tl = dot(hash22(iuv + vec2(0., 1.)), fuv - vec2(0., 1.));\n float tr = dot(hash22(iuv + vec2(1., 1.)), fuv - vec2(1., 1.));\n\n float b = mix(bl, br, suv.x);\n float t = mix(tl, tr, suv.x);\n\n return mix(b, t, suv.y)+0.5;\n}\n\nfloat layeredPerlinNoise(vec2 uv){\n  float c = 0.;\n  c += perlinNoise(uv);\n  c += perlinNoise(uv*2. )*0.5;\n  c += perlinNoise(uv*4. )*0.25;\n  c += perlinNoise(uv*8. )*0.125;\n  c += perlinNoise(uv*16.)*0.0625;\n\n  return c*0.5;\n}\n\n\nvec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec2 mod289(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec3 permute(vec3 x) { return mod289(((x*34.0)+1.0)*x); }\nfloat simplexNoise(vec2 uv){\n    // Precompute values for skewed triangular grid\n    const vec4 C = vec4(0.211324865405187,\n                        // (3.0-sqrt(3.0))/6.0\n                        0.366025403784439,\n                        // 0.5*(sqrt(3.0)-1.0)\n                        -0.577350269189626,\n                        // -1.0 + 2.0 * C.x\n                        0.024390243902439);\n                        // 1.0 / 41.0\n\n    // First corner (x0)\n    vec2 i  = floor(uv + dot(uv, C.yy));\n    vec2 x0 = uv - i + dot(i, C.xx);\n\n    // Other two corners (x1, x2)\n    vec2 i1 = vec2(0.0);\n    i1 = (x0.x > x0.y)? vec2(1.0, 0.0):vec2(0.0, 1.0);\n    vec2 x1 = x0.xy + C.xx - i1;\n    vec2 x2 = x0.xy + C.zz;\n\n    // Do some permutations to avoid\n    // truncation effects in permutation\n    i = mod289(i);\n    vec3 p = permute(\n            permute( i.y + vec3(0.0, i1.y, 1.0))\n                + i.x + vec3(0.0, i1.x, 1.0 ));\n\n    vec3 m = max(0.5 - vec3(\n                        dot(x0,x0),\n                        dot(x1,x1),\n                        dot(x2,x2)\n                        ), 0.0);\n\n    m = m*m ;\n    m = m*m ;\n\n    // Gradients:\n    //  41 pts uniformly over a line, mapped onto a diamond\n    //  The ring size 17*17 = 289 is close to a multiple\n    //      of 41 (41*7 = 287)\n\n    vec3 x = 2.0 * fract(p * C.www) - 1.0;\n    vec3 h = abs(x) - 0.5;\n    vec3 ox = floor(x + 0.5);\n    vec3 a0 = x - ox;\n\n    // Normalise gradients implicitly by scaling m\n    // Approximation of: m *= inversesqrt(a0*a0 + h*h);\n    m *= 1.79284291400159 - 0.85373472095314 * (a0*a0+h*h);\n\n    // Compute final noise value at P\n    vec3 g = vec3(0.0);\n    g.x  = a0.x  * x0.x  + h.x  * x0.y;\n    g.yz = a0.yz * vec2(x1.x,x2.x) + h.yz * vec2(x1.y,x2.y);\n    return 130.0 * dot(m, g) *.5 + .5;\n}\n\nfloat layeredSimplexNoise(vec2 uv){\n  float c = 0.;\n  c += simplexNoise(uv);\n  c += simplexNoise(uv*2. )*0.5;\n  c += simplexNoise(uv*4. )*0.25;\n  c += simplexNoise(uv*8. )*0.125;\n  c += simplexNoise(uv*16.)*0.0625;\n\n  return c*0.5;\n}\n\n/////////////\n//  MAIN  //\n////////////\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n vec2 uv = fragCoord.xy / iResolution.xy;\n uv.x *= iResolution.x/iResolution.y;\n\n vec3 col = vec3(0.);\n //col = vec3(layeredValueNoise(uv*18.));\n //col = vec3(layeredPerlinNoise(uv*12.));\n col = vec3(layeredSimplexNoise(uv*6.));\n\n fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}