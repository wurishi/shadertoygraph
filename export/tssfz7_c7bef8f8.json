{"ver":"0.1","info":{"id":"tssfz7","date":"1612681243","viewed":210,"name":"Cross SDF fractal","username":"bradjamesgrant","description":"Same setup as https://www.shadertoy.com/view/tsXBzS. Starts with 2 rectangles (1 rotating to try break up continuity). Added transparency to raymarching and also time dilution to create tempo. Colour changes depending on marches rather than dist to center","likes":11,"published":1,"flags":64,"usePreview":0,"tags":["transparencyraymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"MlsXz2","filepath":"https://soundcloud.com/particlehouse/mai-tai","previewfilepath":"https://soundcloud.com/particlehouse/mai-tai","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 palette(float d){\n    d = d/50.;\n    return mix(vec3(.0,.2,.2),vec3(.8,.2,.5),1.-d)*3.5;\n}\nfloat rnd(vec2 p){\n\treturn fract(sin(p.x+100. + p.y*6574.)*45233.);\n}\n\nvec2 rotate(vec2 p, float a){\n\tfloat c = cos(a);\n    float s = sin(a);\n    return mat2(c,s,-s,c)*p;\n}\n\nfloat box(vec3 p, vec3 s){\n\tp= abs(p)-s;\n    return max(p.x,max(p.y,p.z));\n}\nfloat map(vec3 p){\n    float t=iTime+385.;\n    //CHANGE TEMPO HERE\n     //t = t*1.59;\n    t = t*1.;\n    float tfract = fract(t);\n    tfract*=tfract;\n    t = floor(t) + tfract;\n    t = t*0.2;\n    for( int i = 0; i<13; ++i){\n        \n        p.xz =rotate(p.xz,t);\n        p.xy =rotate(p.xy,t*1.89);\n        p.xz = abs(p.xz);\n        p.xz-=1.0;\n    }\n    vec3 q = p;\n    q.xy = rotate(p.xy,t*1000.*.02);//*p.x*30.; add artifacts\n    return min(box(p,vec3(2.,.5,.3)),box(q,vec3(.5,2.,.3)));\n}\n\n\n\n\nvec3 castRay (vec3 ro, vec3 rd){\n\tfloat t=0.;\n    vec3 col = vec3(0.);\n    int i = 0;\n    for(i = 0; i<50; i++){\n    \tvec3 p = ro+t*rd;\n        float d = map(p)*.5;\n        if(d>200.)\n            break;\n        if(d<0.01){\n            d = 0.1;\n        }\n        \n        t+=d;\n        col+=palette(float(i))*0.005/(0.2+abs(d));\n        //col+=palette(length(p))*0.005/(0.2+abs(d));\n       \n    }\n    return col;\n        \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    \n    vec2 uv = (fragCoord-(iResolution.xy/2.))/iResolution.y;\n\tvec3 ro = vec3(0.,0.,-40.);\n\tvec3 cf = normalize(-ro);\n    vec3 cs = normalize(cross(cf,vec3(0.,1.,0.)));\n    vec3 cu = normalize(cross(cf,cs));\n    \n    vec3 uuv = ro+ cs*uv.x + cu*uv.y;\n\n   \tvec3 rd = uuv-ro;\n    \n    rd = normalize(vec3(-uv,1.));\n    \n    vec3 col = castRay(ro,rd);\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}