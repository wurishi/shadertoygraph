{"ver":"0.1","info":{"id":"XctBWX","date":"1733562988","viewed":68,"name":"Deepseek DeepThink Cool Shader","username":"yosun","description":"write a cool shader for shadertoy.com","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["deepseek"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalize UV coordinates to range [-1.0, 1.0]\n    vec2 uv = (fragCoord.xy / iResolution.xy) * 2.0 - 1.0;\n    \n    // Animate with time\n    float time = iTime * 0.5;\n    \n    // Create a swirling effect by rotating UV coordinates\n    float angle = time + length(uv) * 10.0;\n    mat2 rot = mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n    uv = uv * rot;\n    \n    // Apply scaling\n    uv *= 5.0 + sin(time) * 2.0;\n    \n    // Fractal noise function\n    float noiseValue = 0.0;\n    float amplitude = 1.0;\n    float frequency = 1.0;\n    for(int i = 0; i < 4; i++)\n    {\n        noiseValue += (sin(uv.x * frequency) + sin(uv.y * frequency)) * amplitude;\n        amplitude *= 0.5;\n        frequency *= 2.0;\n    }\n    \n    // Mix colors based on noise value\n    vec3 color = mix(\n        vec3(0.1, 0.5, 0.9), // Blue\n        vec3(1.0, 0.3, 0.1), // Red\n        fract(noiseValue * 0.5 + time * 0.2)\n    );\n    \n    // Add distortion based on noise\n    uv += vec2(sin(noiseValue * 2.0 + time), cos(noiseValue * 3.0 + time)) * 0.05;\n    \n    // Output the final color\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}