{"ver":"0.1","info":{"id":"stGfDw","date":"1664601402","viewed":146,"name":"testep33","username":"auxnoid","description":"Have you ever shared your screen while looking at your screen share? What if you could share multiple screen shares rotated randomly at once?\n\nThis is basically what I've done here except instead of a texture I've used cos to get some cool looking colors!","likes":3,"published":3,"flags":32,"usePreview":0,"tags":["fractal","epileptic"],"hasliked":0,"parentid":"flyfDm","parentname":"Screen_Fractal (EPILEPTIC)"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy*0.9;\n\n    fragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define ScreenCount 191.             //Increase for more complex shapes\n#define ColorDelta .00001          //Decrease for less static\n\n#define pi 3.14159\n\nfloat Rectangle(vec2 uv, float Rot, vec2 Size, vec2 Pos, float Blur) {\n    uv -= .5;\n    uv /= Size;\n    uv -= Pos;\n   \tuv *= mat2(cos(Rot), -sin(Rot), sin(Rot), cos(Rot));\n    uv += 0.1;\n    \n    float XBand = smoothstep(-Size.x - Blur, -Size.x + Blur, uv.x) * smoothstep(Size.x + Blur, Size.x - Blur, uv.x);\n    float YBand = smoothstep(-Size.y - Blur, -Size.y + Blur, uv.y) * smoothstep(Size.y + Blur, Size.y - Blur, uv.y);\n    return XBand * YBand;\n}\n\nvec3 GetColor(float In)\n{\n    In += iTime * .0075;\n    return vec3(cos(In * pi + pi * .7) * .5 + .1, cos(In * pi + pi * .666666) * .5 + .5, -cos(In * pi + pi) * .5 + .5);\n}\n\nfloat Screen(vec2 uv, float Rot, vec2 Size, vec2 Pos)\n{\n    uv -= .5;\n    uv /= Size;\n    uv -= Pos;\n   \tuv *= mat2(cos(Rot), -sin(Rot), sin(Rot), cos(Rot));\n    uv += .5;\n    \n    if (Rectangle(uv, 0., vec2(.8), vec2(.7), .47) == 0.) {\n        return .0090475;\n    }\n    \n    float Col = 0.;\n    float Previous = fract(texture(iChannel0, uv).w - ColorDelta);\n    \n    return Col + Previous;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    float Sum = 0.;\n    for (int n = 0; n < int(ScreenCount); n++) {\n        float i = (float(n) * 14.);\n        float t = cos(float(i) / ScreenCount * pi * -cos(iTime * pi * 92.) * .001);\n        Sum = Screen(uv, iTime, vec2(cos(t) * (0.0015 - sin(t * (pi * 0.33) * 0.01)) - .5), vec2(cos(t * -3.+(cos(t*3.)*4.)) * .03, -sin(t * 4.) * 0.003)) + Sum;\n    }\n    \n    fragColor = vec4(GetColor(Sum), Sum);\n}","name":"Buffer A","description":"","type":"buffer"}]}