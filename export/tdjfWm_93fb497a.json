{"ver":"0.1","info":{"id":"tdjfWm","date":"1590449016","viewed":97,"name":"KIFS Fractal Test :P","username":"hopeliz","description":"KIFS Fractal Test following a tutorial by The Art of Code: https://youtu.be/il_Qg9AqQkE\nHold your left mouse button down as you move left and right.\nCreated for Day 12 of a 100 Days of Shaders and Textures project","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal","kifs","koch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 GetNormal(float angle) {\n    return vec2(sin(angle), cos(angle));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = (fragCoord - 0.5 * iResolution.xy)/iResolution.y;\n    vec2 mouse = iMouse.xy/iResolution.xy;\n    \n    // Zoom out\n    uv *= 1.25;\n    \n    // Start with a black screen\n    vec3 color = vec3(0.0);\n    \n    // Reflect on x-axis\n    uv.x = abs(uv.x);\n    \n    // Move up to center\n    uv.y += tan((5.0/6.0) * 3.1415) * 0.5;\n    \n    // Gets angle to reflect on\n    vec2 normal = GetNormal((5.0/6.0) * 3.1415);\n    \n    // Distance from origin\n    float dist = dot(uv - vec2(0.5, 0.0), normal);\n    \n    // Reflect/Bend\n    uv -= normal * max(0.0, dist) * 2.0;\n    \n    // See reflecting line\n    //color += smoothstep(0.01, 0.0, abs(dist));\n    \n    // Gets angle to reflect for \"hats\"\n    normal = GetNormal((2.0/3.0) * 3.1415);\n    \n    float scale = 1.5;\n    \n    uv.x += 0.5;\n    \n    for (int i = 0; i < int(mouse.x * 10.0); i++) {\n        // Reset next segment\n    \tuv *= 3.0;\n        scale *= 3.0;\n    \tuv.x -= 1.5;\n        \n        // Fold over x-coord\n    \tuv.x = abs(uv.x);\n    \n    \t// Make it 3 points wide (this adds 0.5 units to both sides)\n    \tuv.x -= 0.5;\n    \n    \t// Bend/reflect\n    \tuv -= normal * min(0.0, dot(uv, normal)) * 2.0;\n    }\n\n    dist = length(uv - vec2(clamp(uv.x, -1.0, 1.0), 0));\n    color += smoothstep(1.0 / iResolution.y, 0.0, dist / scale);\n    \n    // Visualise the uv coordinates\n    color.br += uv;\n\n    // Output to screen\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}