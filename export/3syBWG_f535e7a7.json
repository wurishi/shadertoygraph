{"ver":"0.1","info":{"id":"3syBWG","date":"1607798425","viewed":123,"name":"Simple 3D Noise by Darko","username":"omegasbk","description":"Playing with 3D noise","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// 2020 Darko Supe - omegasbk\n\nfloat noise(vec2 p)\n{\n    return fract(sin(p.x * 100. + p.y * 5412.) * 4340.);\n}\n\nfloat noise(vec3 p)\n{\n    return fract(sin(p.x * 100. + p.y * 4241. + p.z) * 6340.);\n}\n\n// For 2D magic\nfloat noiseSmooth(vec2 uv)\n{\n    vec2 lv = fract(uv);\n    lv = lv * lv * (3.0 - 2.0 * lv); // Sigmoid interpolation\n    \n    vec2 index = floor(uv);    \n\n    float topLeft = noise(index);\n    float topRight = noise(index + vec2(1, 0));\n    float top = mix(topLeft, topRight, lv.x);\n    \n    float botLeft = noise(index + vec2(0, 1));\n    float botRight = noise(index + vec2(1, 1));\n    float bot = mix(botLeft, botRight, lv.x);\n     \n    return mix(top, bot, lv.y);\n}\n\n\n// For 3D magic\nfloat noiseSmooth(vec3 pos)\n{\n    vec3 lv = fract(pos);\n    lv = lv * lv * (3.0 - 2.0 * lv); // Sigmoid interpolation\n    lv.z = fract(pos.z);\n    \n    vec3 index = floor(pos);\n    float delta = 1.;\n\n    // Front plane\n    float tl = noise(index + vec3(0, 0, 0));\n    float tr = noise(index + vec3(1, 0, 0));\n    float top = mix(tl, tr, lv.x);\n    \n    float bl = noise(index + vec3(0, 1, 0));\n    float br = noise(index + vec3(1, 1, 0));\n    float bot = mix(bl, br, lv.x);\n    \n    float frontPlane = mix(top, bot, lv.y);\n        \n    // Back plane\n    tl = noise(index + vec3(0, 0, delta));\n    tr = noise(index + vec3(1, 0, delta));\n    top = mix(tl, tr, lv.x);\n    \n    bl = noise(index + vec3(0, 1, delta));\n    br = noise(index + vec3(1, 1, delta));\n    bot = mix(bl, br, lv.x);\n    \n    float backPlane = mix(top, bot, lv.y);\n        \n    return mix(frontPlane, backPlane, lv.z);   \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x *= (iResolution.x / iResolution.y); \n    \n    vec3 pt = vec3(uv, 0.);\n    pt.z += iTime / 10.;\n    pt.x += iTime / 100.;\n\n        \n    float c = noiseSmooth(pt * 4.);  \n    c += noiseSmooth(pt * 8.) * .5;  \n    c += noiseSmooth(pt * 16.) * .25;  \n    c += noiseSmooth(pt * 32.) * .125;  \n    c += noiseSmooth(pt * 64.) * .0625;  \n    \n    c /= 2.;\n    \n    vec3 col = vec3(c);\n   \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}