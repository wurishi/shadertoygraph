{"ver":"0.1","info":{"id":"43l3zX","date":"1707767295","viewed":98,"name":"2D Gaussian blur","username":"RugiSerl","description":"It works, I guess","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["blur"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    float Pi = 3.14159265358979323;\n    \n    float kerSize = 20.;\n    float deviation = 4.;\n   \n   \n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    // Pixel colour\n    vec4 Color = texture(iChannel0, uv);\n    \n    for (float x = -kerSize; x<=kerSize; x++) {\n        for (float y = -kerSize; y<=kerSize; y++) {\n            Color += texture(iChannel0, uv+vec2(x, y)/iResolution.xy) * exp(-1.*(x*x+y*y)/(2.*deviation*deviation));\n                    \n        } \n     }\n    \n    \n    Color /= 2.*Pi*deviation*deviation;\n    \n    fragColor =  Color;\n}","name":"Image","description":"","type":"image"}]}