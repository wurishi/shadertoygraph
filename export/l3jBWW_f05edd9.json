{"ver":"0.1","info":{"id":"l3jBWW","date":"1730439612","viewed":48,"name":"My First Quadratic Bezier Curve ","username":"8InfinityTaco8","description":"This was based on the tutorial by The Art of Code here:\nhttps://www.youtube.com/watch?v=a4zMX6dDVXI&ab_channel=TheArtofCode\n\nclick the screen to move the curve","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["bezier","curve","quadratic","interpolation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float Circle(vec2 p, vec2 c){\n    float d = length(p - c);\n    return smoothstep(fwidth(d), 0., d - 0.02);\n}\n\nfloat Line(vec2 p, vec2 a, vec2 b){\n    vec2 pa = p - a, ba = b - a;\n    float t = clamp(dot(pa, ba)/dot(ba, ba), 0., 1.);\n    vec2 c = a + ba * t;\n    float d = length(c - p);\n    return smoothstep(fwidth(d),0., d-0.001);\n}\n\nvec2 Bezier(vec2 a, vec2 b, vec2 c, float t){\n    return mix(mix(a, c, t), mix(c, b, t), t);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - iResolution.xy * .5 )/iResolution.y;\n    // Time varying pixel color\n    vec3 col = vec3(0);\n    \n    float t = sin(iTime) * 0.5 +.5;\n    //col  += Circle(uv, vec2(0));\n    //col += Line(uv, vec2(-.5), vec2(0.5));\n    \n    vec2 A = vec2(-0.8, -.4),\n         B = vec2(0.8, .4),\n         // Repositioned C to bottom right, proportional to other points\n         C = vec2(0.8, -0.4);\n         \n    // If mouse interaction is desired, uncomment this line instead:\n    C = (iMouse.xy - iResolution.xy * .5)/iResolution.y;\n\n    \n    vec2 AC = mix(A, C, t),\n         CB = mix(C, B, t),\n         ACB = mix(AC, CB, t);\n         \n    col += vec3(1.,0.,0.) * Circle(uv, A);\n    col += vec3(0.,0.,1.) * Circle(uv, B);\n    col += vec3(0.,1.,0.) * Circle(uv, C);\n    //col += vec3(1.,1.,0.) * Circle(uv, AC);\n    //col += vec3(0.,1.,1.) * Circle(uv, CB);\n    col += vec3(1.,1.,1.) * Circle(uv, ACB);\n\n    //col += Line(uv, A, C) + Line(uv, C, B);\n    //col += Line(uv, AC, CB);\n    int NUM_SEGS = 25;\n    \n    vec2 P, PP = A;\n    for(int i = 1; i <= NUM_SEGS; i++){\n        t = float(i)/float(NUM_SEGS);\n        P = Bezier(A, B, C, t);\n        col = max(col, Line(uv, P, PP));\n        PP = P;\n    }\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}