{"ver":"0.1","info":{"id":"4sVSRD","date":"1463234166","viewed":643,"name":"distToLine2D tests","username":"teadrinker","description":"Just testing some distance to line functions in 2D.\nNot sure if this is the best way to do it, but they seem to work.\n\nBy the way, iq has a great collection of 3D distance functions:\nhttp://iquilezles.org/articles/distfunctions/distfunctions.htm","likes":4,"published":3,"flags":0,"usePreview":0,"tags":["2d","line","disttoline2d","disttolineseg2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat distToLine2D(vec2 l1, vec2 l2, vec2 p) {\n    \n    vec2 ld = l1 - l2;\n    vec2 pd = p - l2;\n    \n    return length(pd - ld*dot(pd, ld)/dot(ld, ld));    \n}\n\n\nfloat signedDistToLine2D(vec2 l1, vec2 l2, vec2 p) {\n    \n    \n    vec2 ld = l1 - l2;\n    vec2 pd = p - l2;\n    float mul = sign(ld.x * pd.y - ld.y * pd.x);\n    \n    return mul * length(pd - ld*dot(pd, ld)/dot(ld, ld));    \n}\n\n\nfloat distToLineSeg2D(vec2 l1, vec2 l2, vec2 p) {\n    \n    vec2 ld = l1 - l2;\n    vec2 pd = p - l2;\n    \n    return length(pd - ld*clamp( dot(pd, ld)/dot(ld, ld), 0.0, 1.0) );    \n}\n\nfloat trans(float x) { return x*x*x*x; }\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2  coord   = vec2(0.25, 0.5) * iResolution.xy;\n    float line    = distToLine2D      (coord, iMouse.xy, fragCoord.xy) / 100.0;\n    float sline   = signedDistToLine2D(coord, iMouse.xy, fragCoord.xy) / 100.0;\n    float lineSeg = distToLineSeg2D   (coord, iMouse.xy, fragCoord.xy);\n    \n\tfragColor = lineSeg < 5.0 ? vec4(1.0,0.0,0.0,1.0) : vec4(1.0 - line,1.0 - line,1.0 - sline, 1.0);\n}","name":"Image","description":"","type":"image"}]}