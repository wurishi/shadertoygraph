{"ver":"0.1","info":{"id":"4cBBzR","date":"1724533907","viewed":62,"name":"asdfghjk","username":"BearKirb","description":"dhdtyhdyhddhtyhdty","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["rthntrgd"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec2 mod289(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec3 permute(vec3 x) { return mod289(((x*34.0)+1.0)*x); }\n\n//\n// Description : GLSL 2D simplex noise function\n//      Author : Ian McEwan, Ashima Arts\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License :\n//  Copyright (C) 2011 Ashima Arts. All rights reserved.\n//  Distributed under the MIT License. See LICENSE file.\n//  https://github.com/ashima/webgl-noise\n//\nfloat noise(vec2 v) {\n\n    // Precompute values for skewed triangular grid\n    const vec4 C = vec4(0.211324865405187,\n                        // (3.0-sqrt(3.0))/6.0\n                        0.366025403784439,\n                        // 0.5*(sqrt(3.0)-1.0)\n                        -0.577350269189626,\n                        // -1.0 + 2.0 * C.x\n                        0.024390243902439);\n                        // 1.0 / 41.0\n\n    // First corner (x0)\n    vec2 i  = floor(v + dot(v, C.yy));\n    vec2 x0 = v - i + dot(i, C.xx);\n\n    // Other two corners (x1, x2)\n    vec2 i1 = vec2(0.0);\n    i1 = (x0.x > x0.y)? vec2(1.0, 0.0):vec2(0.0, 1.0);\n    vec2 x1 = x0.xy + C.xx - i1;\n    vec2 x2 = x0.xy + C.zz;\n\n    // Do some permutations to avoid\n    // truncation effects in permutation\n    i = mod289(i);\n    vec3 p = permute(\n            permute( i.y + vec3(0.0, i1.y, 1.0))\n                + i.x + vec3(0.0, i1.x, 1.0 ));\n\n    vec3 m = max(0.5 - vec3(\n                        dot(x0,x0),\n                        dot(x1,x1),\n                        dot(x2,x2)\n                        ), 0.0);\n\n    m = m*m ;\n    m = m*m ;\n\n    // Gradients:\n    //  41 pts uniformly over a line, mapped onto a diamond\n    //  The ring size 17*17 = 289 is close to a multiple\n    //      of 41 (41*7 = 287)\n\n    vec3 x = 2.0 * fract(p * C.www) - 1.0;\n    vec3 h = abs(x) - 0.5;\n    vec3 ox = floor(x + 0.5);\n    vec3 a0 = x - ox;\n\n    // Normalise gradients implicitly by scaling m\n    // Approximation of: m *= inversesqrt(a0*a0 + h*h);\n    m *= 1.79284291400159 - 0.85373472095314 * (a0*a0+h*h);\n\n    // Compute final noise value at P\n    vec3 g = vec3(0.0);\n    g.x  = a0.x  * x0.x  + h.x  * x0.y;\n    g.yz = a0.yz * vec2(x1.x,x2.x) + h.yz * vec2(x1.y,x2.y);\n    return 130.0 * dot(m, g);\n}\nfloat sabs(float x){\nreturn sqrt(x*x+0.2);\n}\nfloat n(vec2 uv){\nreturn pow(1.0-sabs(noise(uv)),2.0);\n}\n\nfloat fbm(vec2 uv){\nfloat o=0.0;\nfloat mult=1.0;\nfor(int i=0;i<7;i++){\nvec2 f=vec2(n(uv*mult+(vec2(0.0)*mult*mult))/mult-n(uv*mult+(vec2(0.0)*mult*mult+vec2(0.001,0.0)))/mult,n(uv*mult+(vec2(0.0)*mult*mult))/mult-n(uv*mult+(vec2(0.0)*mult*mult+vec2(0.0,0.001)))/mult);\nmult*=2.0;\nfloat g=n(uv*mult+(vec2(0.0)*mult*mult))/mult;\ng*=1.0-length(f*100.0);\no+=g;\n\n}\nreturn pow(o*2.5+0.5,3.0);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xx+vec2(iTime*0.0);\nvec2 m=iMouse.xy/iResolution.xx+vec2(iTime*0.0);\n    // Time varying pixel color\n    vec2 norms=vec2(fbm(uv*1.0)-fbm(uv*1.0+vec2(0.0001,0.0)),fbm(uv*1.0)-fbm(uv*1.0+vec2(0.0,0.0001)))*10000.0;\n    vec3 normal=vec3(norms.x,norms.y,70.0);\n    normal=normalize(normal);\n    float light=dot(normalize(vec3(m.x,m.y,1.0)-vec3(uv.x,uv.y,0.0)),normalize(normal));\n    vec3 col = vec3((fbm(uv*1.0)/1.1-0.1)*light+vec3(normal.x+0.5,normal.y+0.5,0.5)/3.0-0.05);\nlight*=light;\nlight*=light;\nlight*=light;\nlight*=light;\nlight*=light;\n\n\n    // Output to screen\n    col+=(light/2.0)*vec3(1.0,0.95,0.8);\n    fragColor = vec4(col/1.5,1.0);\n}","name":"Image","description":"","type":"image"}]}