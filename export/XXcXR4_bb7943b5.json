{"ver":"0.1","info":{"id":"XXcXR4","date":"1718681085","viewed":84,"name":"Lens dirt with SDFs","username":"Zentient","description":"Procedural dirt texture for a bloom shader, only needs to be run once","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["bloom","aperture","dirt"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 RGBAHash(uint pg)\n{    \n    uint state = pg * 747796405u + 2891336453u;\n    uint word = ((state >> ((state >> 28u) + 4u)) ^ state) * 277803737u;\n    uint R = 0xFFu & word;\n    uint G = 0xFFu & word >> 8;\n    uint B = 0xFFu & word >> 16;\n    uint A = 0xFFu & word >> 24;\n    return vec4(R, G, B, A) / float(0xFFu);\n}\n\nfloat HexSDF(vec2 xy, float rad, float smth, float blur)\n{\n    rad -= smth;\n    const vec3 k = vec3(-0.866025404,0.5,0.577350269);\n     xy = abs(xy);\n    xy -= 2.0*min(dot(k.xy, xy),0.0)*k.xy;\n    xy -= vec2(clamp(xy.x, -k.z*rad, k.z*rad), rad);\n    return 1.0 - (0.1 * dot(xy, xy)*sign(xy.y) - smth) / blur;\n}\n\n#define RES iResolution.xy\nfloat GenBokeh(vec2 xy, float angle, float radius, float smth, float blur)\n{\n    \n    float scale = 1.0;\n\txy -= 0.5;\n    xy *= vec2(1.0, RES.y / RES.x);\n\txy *= (RES * scale) * vec2(1.0, 2.0);\n\tmat2x2 RotationMatrix = mat2x2(cos(angle), -sin(angle), sin(angle), cos(angle));\n\txy = (xy * RotationMatrix);\n    \n    float hex = HexSDF(xy, radius, radius * smth, radius * blur);\n    \n\treturn clamp(hex, 0.0, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 vPos )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv  = vPos/iResolution.xy;\n    \n    vec2 cVPos = (vPos - 0.5 * iResolution.xy);\n    \n    vec3 col;\n    for(int i; i < 100; i++)\n    {\n        //col += vec3(HexSDF(cVPos, 250.0, 30.0, 30.0));\n        vec4 data = RGBAHash(uint(5 * i + 6));\n        vec4 data2 = pow(RGBAHash(uint(3 * i + 8)), vec4(2.0));\n        col += data2.z * GenBokeh(uv + (data.xz - 0.5), 0.4, 0.15 + pow(data.w, 2.0) * 30.0, data2.x * 0.1, 0.1 + data2.y * 0.5);\n    }\n\n    // Output to screen\n    fragColor = vec4(vec3(1.0, 0.85, 0.7) * col,1.0);\n}","name":"Image","description":"","type":"image"}]}