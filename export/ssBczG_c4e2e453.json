{"ver":"0.1","info":{"id":"ssBczG","date":"1645571561","viewed":181,"name":"Dotswave","username":"Chosko","description":"Dots wave","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["wave","dots"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Number of cells\n#define TILES  20.0\n// Time frequency of waves\n#define W_FREQ .5\n#define PI2 6.2831\n\n\n\nfloat sinRand (float x, float seed) {\n    return fract(sin(x + 123.0) * 10000.0 * seed);\n}\n\nvoid mainImage( out vec4 o, in vec2 fragCoord )\n{\n    o -= o;\n    vec2 uv = (fragCoord - iResolution.xy * 0.5) / min(iResolution.y, iResolution.x);\n    float t = iTime * 0.6 + 8.0;\n    \n    // --- Spatial and temporal parameters\n    float tLenPow = -sin(t * .3) * .5 + .5;\n    float wLen = mix(10.0, 50.0, tLenPow); // Wave length in number of cells. Varies with time\n    float wPow = mix(5.0, 15.0, tLenPow);  // Wave power (affects thickness)\n    \n    //float rot = sin(t * 0.01) * length(uv) * clamp(pow(t*0.01,2.0),0.0,1.0);\n    //float sa = sin(rot);\n    //float ca = cos(rot);\n    //uv.xy = mat2x2(ca, -sa, sa, ca) * uv.xy;\n    \n    // --- Smooth effect input vars ---\n    vec2  sCellID = (uv * TILES);                        // Cell ID\n    vec2  sCellUV = fract(sCellID) - .5;                 // Cell's local UV (centered)\n    float sProg   = length(sCellID - 1. * sign(sCellID)) / wLen - t * W_FREQ; // Linear space-time progression\n    float sWaveID = floor(sProg);                        // Wave ID (progressive integer)\n    float sWave   = fract(sProg);                        // Wave progression\n          \n    // --- Pixelated effect input vars ---\n    vec2  pCellID = floor(sCellID);  // Cell ID\n    \n    // --- How much the effect must be pixelated ---\n    float cellSmoothness = sinRand(sWaveID, 1.0); // How much pixelated the effect is\n    \n    // --- Final effect input vars ---\n    vec2  cellUV = sCellUV;                               // UV are computed from the smooth effect\n    vec2  cellID = mix(sCellID, pCellID, cellSmoothness); // Lerp between smooth and pixelated\n    float prog   = length(cellID) / wLen - t * W_FREQ;    // Linear space-time progression\n    float waveID = floor(prog);                           // Wave ID (progressive integer)\n    float wave   = fract(prog);                           // Wave progression\n    \n    // --- How much the effect must be colored ---\n    float colorness = sinRand(waveID, 1.4214);\n    \n    // --- Shape ---\n    float shape = sinRand(waveID, .89928);\n    \n    // --- Effect ---\n    float r = pow(wave, wPow); // Cell shape radius based on wave progression\n\n    vec4 col = 1.5 * abs(vec4(cellID.x + cellUV.y,0.5,cellID.y + cellUV.x,1.0) / TILES + sin(1.21 * t));\n    \n    float p = mix(0.1, 3.5, shape);\n    float len = pow(pow(abs(cellUV.x), p) + pow(abs(cellUV.y), p), 1.0 / p);\n    vec4 smoot = .4 / len * r * col;\n    vec4 bw = vec4(smoothstep(r * 0.5, r * 0.4, len));\n    \n    \n    //o.rgb = vec3(sin(sWaveID * 53331.094) * .5 + .5);\n    o += mix(smoot, bw, colorness);\n    //o *= abs(fract(t*0.5) - 0.5) * 2.0 + 0.1;\n}","name":"Image","description":"","type":"image"}]}