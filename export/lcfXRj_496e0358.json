{"ver":"0.1","info":{"id":"lcfXRj","date":"1705488979","viewed":92,"name":"shadows v1","username":"floataqq","description":"shadows","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["shadows"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* vec4[4] getSides(vec2 p1, vec2 p2) {\n    vec4[4] sides;\n    vec2 p3 = vec2(p1.x, p2.y), p4 = vec2(p2.x, p1.y);\n    sides[0] = vec4(p1, p3 - p1);\n    sides[1] = vec4(p3, p2 - p3);\n    sides[2] = vec4(p2, p4 - p2);\n    sides[3] = vec4(p4, p1 - p3);\n    return sides;\n}\n\nbool crosses(vec4 s1, vec4 s2) {\n    vec2 q = s2.xy, s = s2.zw;\n    vec2 p = s1.xy, r = s1.zw;\n    float t = dot(q - p, s) / dot(r, s);\n    float u = dot(p - q, r) / dot(s, r);\n    return (dot(r, s) != 0. && 0. <= t && t <= 1. && 0. <= u && u <= 1.);\n}\n\nbool ray(vec2 uv, vec2 p1, vec2 p2) {\n    vec4 sides[4] = getSides(p1, p2);\n    for(int i = 0; i < 4; i++) {\n        if(crosses(sides[i], vec4(0., 0., uv)))\n            return true;\n    }\n    return false;\n} */\n\nbool inRect(vec2 coords, vec2 p1, vec2 p2) {\n    float x = coords.x, y = coords.y;\n    float s_x = p1.x, s_y = p1.y;\n    float e_x = p2.x, e_y = p2.y;\n    return (s_x <= x && e_x >= x && s_y <= y && e_y >= y);\n}\n\nconst int rectangles_len = 5;\nconst int base_checks = 15;\nconst float base_len = 0.05;\nvec2 rectangles[rectangles_len * 2];\nconst vec4 shadow = vec4(55., 49., 105., 255.) / 255.;\nconst vec4 base = vec4(58., 49., 133., 255.) / 255. * 1.4;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 uvm = iMouse.xy / iResolution.xy;\n    vec4 col = base;\n    rectangles[0] = vec2(.1, .2);\n    rectangles[1] = vec2(.2, .8);\n    rectangles[2] = vec2(.8, .2);\n    rectangles[3] = vec2(.9, .8);\n    bool flag = false;\n    int checks = int(distance(uvm, uv) / base_len * float(base_checks));\n    for(int check = 0; check < checks; check++) {\n        if(flag)\n            break;\n        vec2 c = (uv - uvm) * float(check + 1) / float(checks);\n        for(int i = 0; i < rectangles_len * 2; i += 2) {\n            vec2 p1 = rectangles[i], p2 = rectangles[i + 1];\n            if(inRect(c + uvm, p1, p2)) {\n                flag = true;\n                col = shadow;\n                break;\n            }\n        }\n    }\n    for(int i = 0; i < rectangles_len * 2;i+=2) {\n        vec2 p1 = rectangles[i], p2 = rectangles[i + 1];\n        if(inRect(uv, p1, p2)) {\n            col = vec4(0., 0., 0., 1.);\n        }\n    }\n    float d = distance(iMouse.xy, fragCoord);\n    if(d < 20.)\n        col = vec4(.7, 0.7, 0.5, 1.);\n    fragColor = col;\n}","name":"Image","description":"","type":"image"}]}