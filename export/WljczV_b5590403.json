{"ver":"0.1","info":{"id":"WljczV","date":"1595013000","viewed":237,"name":"chromatic zoom","username":"sukupaper","description":"I've tried to make a kind of \"infinite zoom\" shader","likes":16,"published":1,"flags":32,"usePreview":0,"tags":["raymarching","symmetry","infinitezoom"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 st = fragCoord/iResolution.xy;\n    float aa = 1./max(iResolution.x,iResolution.y);\n    float d = texture(iChannel0,st).a;\n    vec3 color = vec3(\n        texture(iChannel0,st + vec2(aa*1.,0.)).r,\n        texture(iChannel0,st - vec2(aa*1.)).g,\n        texture(iChannel0,st - vec2(aa*1.)).b\n    );\n    \n    const float maxB = 4.;\n    vec3 blurColor = vec3(0.);\n    for(float i = -maxB*.5; i < maxB*.5; i++) {\n        for(float j = -maxB*.5; j < maxB*.5; j++) {\n\t\t\tvec2 sh = vec2(i,j)*aa*5.;\n            blurColor += texture(iChannel0,st + sh).rgb;\n        }\n    }\n    blurColor /= maxB*maxB;\n    color = mix(color,blurColor*.4,clamp(pow(abs(d)*5. - .1,8.) + length(st-.5)*1.5,0.,1.));\n    \n    fragColor = vec4(color - pow(length(st-.5)*.75,5.),1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define P 6.28318530\n\nvec3 hsv2rgb(in vec3 c) { vec3 rgb = clamp(abs(mod(c.x*6.0 + vec3(0.0,4.0,2.0),6.0) - 3.0) - 1.0,0.0,1.0); return c.z*mix(vec3(1.0),rgb,c.y); }\n\nfloat t;\nvec2 fold(vec2 p, float a){ vec2 n = vec2(cos(-a),sin(-a)); return p - 2.*min(0.,dot(p,n))*n; }\nmat2 rot(in float a) { float c = cos(a), s = sin(a); return mat2(c,s,-s,c); }\n\nfloat tor(in vec3 p, in float l, in float r) { return length(vec2(length(p.xy) - r, p.z)) - l; }\n\nfloat anim1(in float x, in float s) { return cos(x*P)*s + x; }\n\nfloat inst = -1.;\nfloat nbId = -1.;\nvec3 map;\nfloat df(in vec3 p) {\n    float depth = t;\n    const float Max = 5.;\n    const float md = 2.5;\n    const float fact = md/Max;\n    const float rotV = P*0.125;\n    p.xz *= rot(P*.4);\n    p.yz *= rot(rotV*((depth/md)*Max) + rotV*.5);\n    float d = 10e9;\n    for(float i = 1.; i <= Max; i++){\n        float v = mod(i*fact + depth,md);\n        v = v*v*v;\n        \n        p.xy = fold(p.xy,rotV);\n        p.yz *= rot(rotV);\n        p.xz = fold(p.xz,rotV + .5);\n        p.yz *= rot(-rotV);\n        p.yz = fold(p.yz,rotV);\n        p.yz *= rot(rotV);\n        \n        float dd = d;\n        d = min(d,tor(p, v*.05, v));\n        if(d != dd) {\n            inst = v;\n            nbId = i;\n            map = p;\n        }\n    }\n    return d;\n}\n\nvec4 rm(in vec3 c, in vec3 r) {\n    const float MAX_D = 40., LIM = .01;\n    const int MAX_IT = 35;\n    vec3 color = vec3(.1), p = c + r*5.;\n    bool hit = false; \n    float itNum;\n    for(int i = 0; i < MAX_IT; i++) {\n        float d = df(p);\n        if(d < LIM) {\n            hit = true; itNum = float(i); break;\n        }\n        if(distance(c,p) > MAX_D) return vec4(color,MAX_D);\n        p += d*r;\n    }\n    if(hit) {\n        float dd = .05*P;\n        float a = atan(map.x,map.y);\n        float d = abs(mod(a + t,dd) - dd*.5) - dd*.25;\n        d = smoothstep(-.001,.001,d);\n        vec3 outC = hsv2rgb(vec3(nbId*.018 + t*.2 - d*.2 + nbId*.2,.5,1.)) - itNum*.01;\n        outC = mix(outC.bgr,color,clamp(pow(inst*.07,5.),0.,1.));\n        return vec4(outC,mix(distance(c,p),MAX_D,clamp(pow(inst*.07,5.),0.,1.)));\n    }\n    return vec4(color,distance(c,p));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 st = fragCoord.xy/iResolution.xy - .5;\n    st.x *= iResolution.x/iResolution.y;\n    //t = mod(iTime,20./.75);\n    t = iTime;\n    t = anim1(t*.75,.125);\n    \n    vec3 c = vec3(0.,0.,-18.);\n    vec3 r = normalize(vec3(st,1.5));\n    vec4 color = rm(c,r);\n    \n    fragColor = vec4(color.rgb,color.a*.01);\n}","name":"Buffer A","description":"","type":"buffer"}]}