{"ver":"0.1","info":{"id":"4cScz1","date":"1722527238","viewed":11,"name":"Fork Basic Came LBL 135","username":"lbl","description":"Basic Camera Model","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["camera"],"hasliked":0,"parentid":"X3VGDD","parentname":"Basic Camera in 3D"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Basic Camera\n// Reference: ShaderToy Tutorial - The simplest 3D\n// https://youtu.be/dKA5ZVALOhs?si=WznUybj3YJ3TaF5O\n\n \n// distance from the point to the ray direction\nfloat GetDistance(in vec3 rayOrigin, in vec3 rayDir, in vec3 point) {\n    float distance;\n    vec3 vec_rayOrigin_point = point - rayOrigin;\n    float l = dot(vec_rayOrigin_point,normalize(rayDir));\n    vec3 p = rayOrigin + normalize(rayDir) * l;\n    distance = length(p - point);\n    return distance;\n}\n\n// distance from the point to the ray direction\nfloat GetDistance0(in vec3 rayOrigin, in vec3 rayDir, in vec3 point)\n{\n    float distance;\n    vec3 vec_rayOrigin_point = point - rayOrigin;\n    distance = length(cross(vec_rayOrigin_point, rayDir)) / length(rayDir);\n    return distance;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    // Move the origin (0, 0) to the center (from [0, 1] to [-0.5, 0.5])\n    uv -= 0.5;\n    \n    // Scale x so that the unit length of xy in uv are the same\n    uv.x *= iResolution.x / iResolution.y;\n    \n    // Create a camera position\n    vec3 rayOrigin = vec3(0, 0, -2);\n    \n    // The direction from the camera to the screen\n    vec3 rayDir = vec3(uv.x, uv.y, 0) - rayOrigin;\n    \n    // Create a 3D point\n    float t = iTime;\n    float xpos = sin(t) * 1.0;\n    float zpos = 5.0 + cos(t) * 2.0;\n    vec3 point = vec3(xpos, 0, zpos);\n    \n    // Calculate the distance from the 3D point to the ray\n    float dist = GetDistance(rayOrigin, rayDir, point);\n    \n    // Add a filter to generate a circle\n    // (dist = dist < 0.3 ? 1.0 : 0.0;)\n    // (use smoothstep to smooth the edges)\n    dist = smoothstep(0.3, 0.29, dist); \n    \n    // Output to screen\n    fragColor = vec4(vec3(dist), 1.0);\n}","name":"Image","description":"","type":"image"}]}