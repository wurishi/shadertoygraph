{"ver":"0.1","info":{"id":"fl3BDX","date":"1663691539","viewed":151,"name":"hilbert curves #1","username":"charles_","description":"messing around with hilbert curves","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["short","hilbertcurve"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int SIZE = 1024;\nconst vec3 COLOR_START = vec3(36, 80, 95) / 255.0;\nconst vec3 COLOR_END = vec3(130, 232, 222) / 255.0;\n\nint xy2d(int n, int x, int y) {\n    // copied from: https://en.wikipedia.org/wiki/Hilbert_curve#Applications_and_mapping_algorithms\n    bool rx, ry; \n    int s, d=0;\n    for (s = n/2; s > 0; s /= 2) {\n        rx = (x & s) > 0;\n        ry = (y & s) > 0;\n        d += s * s * ((3 * int(rx)) ^ int(ry));\n        if (!ry) {\n            if (rx) {\n                x = n - 1 - x;\n                y = n - 1 - y;\n            }\n            int t = x;\n            x = y;\n            y = t;\n        }\n    }\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float vignette = smoothstep(-0.3, 1., 1.-distance(uv, vec2(0.5, 0.5)));\n    \n    int d = (xy2d(SIZE, int(fragCoord.x), int(fragCoord.y)));\n    float i = sin(float(d)/1000.+iTime)/2. + 0.5;\n    fragColor = vec4(mix(COLOR_START, COLOR_END, i) * vignette, 1.0);\n}","name":"Image","description":"","type":"image"}]}