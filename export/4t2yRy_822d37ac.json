{"ver":"0.1","info":{"id":"4t2yRy","date":"1509015353","viewed":106,"name":"Raymarching_test(study)","username":"mczombie","description":"basic shader","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarchingsphere"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3Rr","filepath":"/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","previewfilepath":"/media/ap/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define EPSILON 0.0001\n#define ITERATION 128\n\nfloat sphere(vec3 p)\n{\n \tfloat R = 1.0;\n    return length(p) - R;\n}\n\nfloat box(vec3 p)\n{\n \tvec3 C = vec3(0.6, 0.9, 0.7);\n    vec3 d = abs(p) - C;\n    return min(max(d.x, max(d.y, d.z)), 0.0) + length(max(d, 0.0));\n}\n\nfloat scene(vec3 p)\n{\n\tfloat d = 0.0;\n    \n\tp.xyz = mod(p.xyz, 4.0) -1.5;\n    d = box(p);\n    d = max(d, -sphere(p));\n    return d;\n}\n\nvec3 getTriTexture(vec3 p, vec3 n)\n{\n \tvec4 colorX = texture(iChannel0, p.yz);\n    vec4 colorY = texture(iChannel1, p.zx);\n    vec4 colorZ = texture(iChannel0, p.xy);\n    \n    return n.x * colorX.xyz, n.y * colorY.xyz + n.z * colorZ.xyz;\n}\n\nvec3 calcNormal(vec3 p)\n{\n    vec3 eps = vec3(0.01, 0, 0);\n    vec3 n;\n    \n    n.x = scene(p+eps.xyy) - scene(p - eps.xyy);\n    n.y = scene(p+eps.yxy) - scene(p - eps.yxy);\n    n.z = scene(p+eps.yyx) - scene(p - eps.yyx);\n    \n    return normalize(n);\n}\n\nfloat calcLighting(vec3 p, vec3 light)\n{\n \tvec3 N = calcNormal(p);\n    vec3 L = normalize(light-p);\n    float lambert = max(dot(N, L), 0.0);\n    return lambert;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float AspectRatio = iResolution.x / iResolution.y;\n    uv = uv*2.0 - 1.0;\n    uv.x *= AspectRatio;\n    \n    vec3 color = vec3(0, 1, 1);\n    if ( abs(uv.x) < 0.005 ) color = vec3(0, 0, 1);\n    if ( abs(uv.y) < 0.005 ) color = vec3(0, 0, 1);\n\n    vec3 eye = vec3(sin(iTime), cos(iTime), 4);\n    //vec3 eye = vec3(0, 0, 3);\n    \n    vec3 ray = normalize(vec3(uv, 1) - eye);\n    \n    vec3 light = vec3(0, 0, 3);\n    \n    vec3 p = eye;\n    for ( int i = 0 ; i < ITERATION ; ++i)\n    {\n     \tfloat d = scene(p);\n        if ( d < 0.001 ) \n        {\n         \tcolor = getTriTexture(p, calcNormal(p));\n            color *= calcLighting(p, light);\n            break;\n        }\n        p += d * ray;\n    }\n    \n    fragColor = vec4(color, 1);\n}","name":"Image","description":"","type":"image"}]}