{"ver":"0.1","info":{"id":"lcKGRc","date":"1713112076","viewed":1559,"name":"Bim Boom Bam","username":"leon","description":"almost good enough explosion atlas generator","likes":110,"published":3,"flags":0,"usePreview":1,"tags":["explosion","atlas"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// Bim Boom Bam\n// adapted from Hell Diving\n// https://www.shadertoy.com/view/lcGGzK\n\n\nfloat gyroid (vec3 p) { return dot(cos(p),sin(p.yzx)); }\n\nfloat fbm(vec3 p)\n{\n    float result = 0.;\n    float a = .5;\n    for (float i = 0.; i < 8.; ++i)\n    {\n        p.z += (result)*.1;\n        result += abs(gyroid(p/a)*a);\n        a /= 1.7;\n    }\n    return result;\n}\n\n// Dave Hoskins\n// https://www.shadertoy.com/view/4djSRW\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    vec3 blu = texture(iChannel0, fragCoord/1024.).rgb;\n    blu.x = fragCoord.x>iResolution.x/2. ? blu.x : 1.;\n    \n    vec3 back = vec3(smoothstep(3., -2., length(uv)-blu.y*.02));\n    \n    // per cell id\n    float id = hash12(floor(uv));\n    \n    // repeat\n    uv = fract(uv)-.5;\n    \n    // animations\n    float timeline = iTime/3.+id;\n    vec2 anim = vec2(fract(timeline), floor(timeline));\n    float growth = pow(anim.x, .2);\n    float fade = 1.-pow(anim.x, 9.);\n    float scale = anim.x;\n    float burn = 1.-pow(anim.x, .4);\n    float speed = pow(anim.x, .4);\n    \n    // coordinates\n    vec3 ray = normalize(vec3(uv,.01+scale));\n    ray.z += speed + anim.y + id*196.128;\n    \n    // the spice\n    float noise = fbm(ray);\n    \n    // surface orientation\n    #define T(u) fbm(ray+u)\n    vec3 e = vec3(.1*blu.x*vec2(iResolution.x/iResolution.y), 0.);\n    vec3 normal = normalize(noise-vec3(T(e.xzz),T(e.zyz),1.));\n    \n    // color palette\n    vec3 color = 0.2 + 1. * cos(vec3(1,2,3)*5.5 + normal.y);\n    \n    // gradient blending and masking\n    float smoke = noise-2.*burn;\n    float shade = (normal.y*.5+.5);\n    color = mix(color, vec3(smoke*shade), smoothstep(.0,.1,smoke));\n    \n    // shape\n    float radius = .3*noise*growth;\n    float shape = smoothstep(.05*blu.x,.0,length(uv)-radius);\n    \n    color = mix(back, color, shape * fade);\n\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}