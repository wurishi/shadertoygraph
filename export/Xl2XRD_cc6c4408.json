{"ver":"0.1","info":{"id":"Xl2XRD","date":"1442075647","viewed":203,"name":"Space movie","username":"Andre","description":"Chome vs van Damme (very badly programmed, sorry for the mess).","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["space","chromakey","discard"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"// Original shader that started my idea\n//    www.shadertoy.com/view/MtBGzV\n// Video Trails by P_Malin (who beat me to it :))\n//    www.shadertoy.com/view/4lBXzD\n\nconst float size = 3.0;\nconst float frameRate = 20.0;\n//const vec3 greenColor = vec3(0.051, 0.639, 0.149);\n\nvec4 getMoviePixel(vec2 uv, sampler2D chnl, vec3 res)\n{\n    vec3 greenColor = texture(chnl,vec2(1.0)).rgb;\n    \n    vec4 texO = vec4(greenColor,1.0);\n    float f = 3.0+sin(iTime*0.666);\n    //uv *= f;\n    //uv -= 0.5+f/3.0;\n    float as = iResolution.x/iResolution.y;\n    \n    float gt = iTime/2.0;//-mod(iTime,1.0/frameRate);\n    //uv.x *= as;\n    //uv *= mat2(sin(gt),-cos(gt),\n    //           cos(gt), sin(gt));\n    //uv += 0.5;\n    //uv.x /= as;\n    //uv += 0.20*vec2(sin(gt),-cos(gt*0.77));\n    \n    if (uv.x>0.0 && uv.x<1.0 && uv.y>0.0 && uv.y<1.0)\n    {\n        vec2 pixelOffset = 1.0/res.xy/2.0;\n        vec2 uv2 = uv;\n        texO = texture(chnl,uv,2.0);\n        \n        vec4 tex2 = texture(chnl,uv2-pixelOffset,2.0);\n        vec4 tex3 = texture(chnl,uv2+pixelOffset,2.0);\n        pixelOffset.x *= -1.0;\n        vec4 tex4 = texture(chnl,uv2-pixelOffset,2.0);\n        vec4 tex5 = texture(chnl,uv2+pixelOffset,2.0);\n        float d1 = distance(tex4,tex5);\n        float d2 = distance(tex2,tex3);\n        \n        if (d1>d2)\n        {\n            d1 = d2;\n            vec4 t2 = tex2;\n            vec4 t3 = tex3;\n            tex2 = tex4;\n            tex3 = tex5;\n            tex4 = t2;\n            tex5 = t3;\n        }\n    \n        float dist1 = distance(texO,tex2);\n        float dist2 = distance(texO,tex3);\n    \n        if ((d1+d2)>0.1)\n        {\n            float l2 = length(texO.rgb-greenColor);\n            if (dist1<dist2)\n                texO = tex2;\n            else\n                texO = tex3;\n            \n            float l3 = length(texO.rgb-greenColor);\n            if (l2 > .2 && l3<.3)\n            {\n                //texO = vec4(mix(clamp(texO.rgb-greenColor,0.0,1.0),texO.rgb,0.4+0.6*smoothstep(.3,.65,l2)),1.);\n                texO = vec4(0.0,0.0,0.0,1.0);//vec4(mix(vec3(1.0,1.0,1.0),texO.rgb,0.4+0.6*smoothstep(.3,.65,l2)),1.);\n            }\n        }\n        else\n        {\n            texO = (texO+tex2+tex3+tex4+tex5)/5.0;\n        }\n    }\n    texO.a = step(0.4,length(texO.rgb-greenColor));\n    return texO;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy;\n    if( iMouse.z > 0.0 ) {\n    \tuv += (iResolution.xy/2.0)-iMouse.xy;\n    }\n    float gt = iTime;\n    float as = iResolution.x/iResolution.y;\n    uv /= iResolution.xy;\n    \n    uv.x = 1.0-uv.x;\n    vec4 texO = getMoviePixel(uv, iChannel0, iChannelResolution[0]) ;\n    if (texO.a <0.0001) {\n        uv.x -= 0.5*sin(gt);\n        uv.y -= 0.25*cos(gt);\n        uv.x = 1.0-uv.x;\n        texO = getMoviePixel(uv, iChannel1, iChannelResolution[1]) ;\n    }\n    \n    if (texO.a >0.0) {\n        texO.g = min(texO.g,max(texO.r,texO.b));\n        fragColor = texO;\n    }\n    else\n    {\n        vec2 smallGrid = floor(mod(fragCoord, size));\n        float pixelIndex = smallGrid.y * size + smallGrid.x;\n        float frame = floor(iTime * frameRate);\n        if (pixelIndex != mod(frame*2.0, size * size))\n             discard;   \n        uv = fragCoord.xy/iResolution.xy;\n        gt /= -5.0;\n        uv -= 0.5;\n        uv.x *= as;\n        gt *= (1.0-0.04*length(uv)*sin(gt*1.241));\n        uv *= mat2(sin(gt),-cos(gt),\n                   cos(gt), sin(gt));\n        uv.x /= as;\n        uv += 0.5;\n        uv.y = 1.0-uv.y;\n        texO = texture(iChannel2,uv);\n        fragColor = vec4(pow(texO.rgb,vec3(2.5+cos(gt*2.3))),1.0);\n    }\n}","name":"","description":"","type":"image"}]}