{"ver":"0.1","info":{"id":"M3tSRn","date":"1718535211","viewed":14,"name":"Hydrodynamics","username":"Grendor","description":"I am not a master shader writer, I enjoy playing around, but I received assistance from ChatGPT-4o with creating this. Lately I have just been testing using different math/gpu buzzwords to create shaders. I do know enough to help it along a bit.","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["complexanalysis","mouseinfluence"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Image: Render the final image using the accumulated data and mouse influence\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n\n    // Fetch data from Buffer B\n    vec4 posData = texture(iChannel1, fragCoord.xy / iResolution.xy);\n    vec2 pos = posData.xy;\n\n    // Fetch vector field data from Buffer A\n    vec4 fieldData = texture(iChannel0, fragCoord.xy / iResolution.xy);\n    vec2 field = fieldData.xy;\n\n    // Calculate intensity based on the field and position\n    float intensity = length(field) * 1.5;\n    vec3 color = vec3(0.1, 0.3, 0.8) * intensity;\n\n    // Apply a trail effect by blending with previous positions\n    vec2 trailUV = pos * 0.5 + 0.5;\n    vec4 trailData = texture(iChannel2, trailUV);\n    color = mix(color, trailData.rgb, 0.5);\n\n    // Output to screen\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Buffer A: Calculate the vector field with mouse influence\n\n// Function to create a vector field based on complex analysis\nvec2 complexField(vec2 z, float time) {\n    // A time-dependent complex function f(z) = z^2 + c * e^(i * omega * time)\n    vec2 c = vec2(0.355, 0.355);\n    float omega = 0.5;\n    vec2 timeComponent = vec2(cos(omega * time), sin(omega * time));\n    vec2 z2 = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y);\n    return z2 + c * timeComponent;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalize pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n\n    // Get the current time\n    float time = iTime;\n\n    // Calculate the vector field\n    vec2 field = complexField(uv, time);\n\n    // Get the mouse position normalized to the same coordinate system\n    vec2 mouse = (iMouse.xy / iResolution.xy) * 2.0 - 1.0;\n    mouse.x *= iResolution.x / iResolution.y;\n\n    // Apply mouse influence\n    vec2 diff = uv - mouse;\n    float dist = length(diff);\n    vec2 repulsion = normalize(diff) / (dist * dist + 0.01);\n    field += repulsion * 0.5; // Adjust the influence strength as needed\n\n    // Store the field in the buffer\n    fragColor = vec4(field, 0.0, 1.0);\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// Buffer B: Accumulate the vector field for dynamic motion\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalize pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n\n    // Get the current time\n    float time = iTime;\n\n    // Get the vector field from Buffer A\n    vec4 fieldData = texture(iChannel0, fragCoord.xy / iResolution.xy);\n    vec2 field = fieldData.xy;\n\n    // Accumulate the field to create dynamic motion\n    vec2 accumulatedField = texture(iChannel1, fragCoord.xy / iResolution.xy).xy;\n    accumulatedField += field * 0.01; // Accumulate with a small factor\n\n    // Store the accumulated field in the buffer\n    fragColor = vec4(accumulatedField, 0.0, 1.0);\n}\n","name":"Buffer B","description":"","type":"buffer"}]}