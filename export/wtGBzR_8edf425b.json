{"ver":"0.1","info":{"id":"wtGBzR","date":"1613763118","viewed":77,"name":"Rasteriser lines","username":"joshuapasa","description":"Which line algorithm is the fastest and the most efficient? It may not be on here but what is the code for the most efficient line algorithm for rasterization?","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["lines","rasterisation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"struct Vertex {\n    vec2 p;\n    vec4 c;\n};\n\nvec4 overlay(vec4 c1, vec4 c2) {\n    return vec4((1.0 - c2.w) * c1.xyz + c2.w * c2.xyz, 1.0);\n}\n\nvec4 drawLineA(Vertex v1, Vertex v2, vec2 pos) {\n    vec2 a = v1.p;\n    vec2 b = v2.p;\n    vec2 r = floor(pos);\n    \n    vec2 diff = b - a;\n    \n    \n    if (abs(diff.y) < abs(diff.x)) {\n        if (diff.x < 0.0) {\n            Vertex temp1 = v1;\n            Vertex temp2 = v2;\n            \n            v1 = temp2;\n            v2 = temp1;\n            \n            a = v1.p;\n            b = v2.p;\n            diff = b - a;\n        \n        }\n        \n        float m = diff.y / diff.x;\n        float q = r.x - a.x;\n        \n        if (floor(m * q + a.y) == r.y && a.x <= r.x && r.x <= b.x) {\n            float h = q / diff.x;\n            return vec4((1.0 - h) * v1.c + h * v2.c);\n        }\n        \n        \n    } else {\n        if (diff.y < 0.0) {\n            Vertex temp1 = v1;\n            Vertex temp2 = v2;\n            \n            v1 = temp2;\n            v2 = temp1;\n            \n            a = v1.p;\n            b = v2.p;\n            diff = b - a;\n        \n        }\n    \n        float m =  diff.x / diff.y;\n        float q = r.y - a.y;\n        \n        if (floor(m * q + a.x) == r.x && a.y <= r.y && r.y <= b.y) {\n            float h = q / diff.y;\n            return vec4((1.0 - h) * v1.c + h * v2.c);\n        }\n    \n    }\n    \n    return vec4(0,0,0,0);\n}\n\nvec4 drawLineB(Vertex v1, Vertex v2, vec2 pos) {\n    vec2 a = v1.p;\n    vec2 b = v2.p;\n    \n    vec2 l = b - a;\n    vec2 r = pos - a;\n    float h = dot(l,r) / dot (l,l);\n    \n    vec2 eC = a + h * l;\n    \n    if (floor(pos) == floor(eC) && 0.0 <= h && h <= 1.0 ) {\n       return vec4((1.0 - h) * v1.c + h * v2.c); \n    }\n    \n    return vec4(0,0,0,0);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    float t = iTime;\n    float r = 300.0;\n    Vertex v1 = Vertex(vec2(400,225), vec4(1,0,0,1));\n    Vertex v2 = Vertex(vec2(400.0 + r*cos(t) ,225.0 + r*sin(t)), vec4(0,1,0,1));\n    \n    vec4 col = vec4(0,0,0,1);\n    col = overlay(col,drawLineA(v1, v2, fragCoord));\n    //col = overlay(col,drawLineB(v1, v2, fragCoord));\n    // Output to screen\n    fragColor = col;\n}","name":"Image","description":"","type":"image"}]}