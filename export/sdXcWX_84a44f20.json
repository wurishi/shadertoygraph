{"ver":"0.1","info":{"id":"sdXcWX","date":"1642884139","viewed":124,"name":"SDF Basics 5: Soft Shadow + AO","username":"SaphireSoul","description":"Simple sdf raymarching of a sphere cone and box as starting point for further experiments","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarching","sdf","signeddistancefield"],"hasliked":0,"parentid":"sdsyzl","parentname":"SDF Basics 4: Rotations"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// defines/constants\n#define SDF_DIST .01\n#define RAYMARCH_STEPS 500\n#define MAX_DIST 100.0\n\nstruct Ray {\n    vec3 dir;\n    vec3 origin;\n};\n\nfloat opUnion( float d1, float d2 )\n{\n    return min(d1,d2);\n}\n\nfloat opSmoothUnion( float d1, float d2, float k )\n{\n    float h = max(k-abs(d1-d2),0.0);\n    return min(d1, d2) - h*h*0.25/k;\n\t//float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n\t//return mix( d2, d1, h ) - k*h*(1.0-h);\n}\n\nfloat sdSphere(vec3 p, float s)\n{\n    return length(p) - s;\n}\n\nfloat sdBox(vec3 p, vec3 b)\n{\n    vec3 q = abs(p) - b;\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;\n}\n\nfloat sdCone( vec3 p, vec2 c, float h )\n{\n  float q = length(p.xz);\n  return max(dot(c.xy,vec2(q,p.y)),-h-p.y);\n}\n\nmat3 rotate_x(float a){float sa = sin(a); float ca = cos(a); return mat3(vec3(1.,.0,.0),    vec3(.0,ca,sa),   vec3(.0,-sa,ca));}\nmat3 rotate_y(float a){float sa = sin(a); float ca = cos(a); return mat3(vec3(ca,.0,sa),    vec3(.0,1.,.0),   vec3(-sa,.0,ca));}\nmat3 rotate_z(float a){float sa = sin(a); float ca = cos(a); return mat3(vec3(ca,sa,.0),    vec3(-sa,ca,.0),  vec3(.0,.0,1.));}\n\nfloat GetMinSceneDistanceFromPoint(vec3 point) {\n    //define sphere here for now vec4(position.xyz, radius)\n    vec4 cone = vec4(0.0, 0.0, 6.0, 1.0);\n    vec4 sphere = vec4(0.0, 1.9, 6.0, 0.5);\n    vec4 box = vec4(0.0, 1.0, 6.0, 0.5);\n    float plane_y = 0.0;\n    \n    // get distance from point to sphere\n    // return opUnion(length(point - sphere.xyz) - sphere.w, point.y + plane_y); // no blending\n    vec3 p_c = point - cone.xyz;\n    p_c *= rotate_z(32.0);\n    p_c += vec3(0.0, -1.0, 0.0); // offset pivot point\n    vec3 p_b = point - box.xyz;\n    p_b *= rotate_z(32.0);\n    p_b *= rotate_y(32.0);\n    return opSmoothUnion(opSmoothUnion(opSmoothUnion(sdCone(p_c, vec2(1.0, 1.0), cone.w), point.y + plane_y, 0.5), sdSphere(point - sphere.xyz, sphere.w), 0.5), sdBox(p_b, vec3(box.w, box.w, box.w)), 0.5); // blending\n    //return min(point.y + plane_y, sdSphere(point - vec3(0.0, 1.0, 6.0), 0.8));\n    //return min(point.y + plane_y, sdRoundBox(point - vec3(0.0, 1.0, 6.0), vec3(0.5, 0.5, 0.5), 0.1));\n}\n\nfloat Raymarch(Ray r)\n{\n    float dist_0 = 0.0; //distance from origin\n    \n    // main raymarch loop\n    for(int i=0; i < RAYMARCH_STEPS; i++) {\n\n        // march ray from origin in direction\n        vec3 t = r.origin + r.dir * dist_0;\n        \n        // get distance\n        float d = GetMinSceneDistanceFromPoint(t);\n        \n        //advance/march along ray\n        dist_0 += d;\n        \n        //compute sdf\n        if(dist_0 > MAX_DIST || d < SDF_DIST) {\n            // found a hit\n            return dist_0;\n        }\n    } \n}\n\nfloat calcSoftshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax, int technique )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    float ph = 1e10; // big, such that y = 0 on the first iteration\n    \n    for( int i=0; i<32; i++ )\n    {\n\t\tfloat h = GetMinSceneDistanceFromPoint( ro + rd*t );\n\n        // traditional technique\n        if( technique==0 )\n        {\n        \tres = min( res, 10.0*h/t );\n        }\n        // improved technique\n        else\n        {\n            // use this if you are getting artifact on the first iteration, or unroll the\n            // first iteration out of the loop\n            //float y = (i==0) ? 0.0 : h*h/(2.0*ph); \n\n            float y = h*h/(2.0*ph);\n            float d = sqrt(h*h-y*y);\n            res = min( res, 14.0*d/max(0.0,t-y) );\n            ph = h;\n        }\n        \n        t += h;\n        \n        if( res<0.0001 || t>tmax ) break;\n        \n    }\n    res = clamp( res, 0.0, 1.0 );\n    return res*res*(3.0-2.0*res);\n}\n\nfloat calcAO(vec3 pos, vec3 nor)\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.001 + 0.15*float(i)/4.0;\n        float d = GetMinSceneDistanceFromPoint( pos + h*nor );\n        occ += (h-d)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 1.5*occ, 0.0, 1.0 );    \n}\n\nfloat calcShading(vec3 p) \n{\n    // light source\n    vec3 light_position = vec3(-6.0, 5.0, 2.0);\n    //light_position.x += 4.0 * sin(iTime);\n    \n    // light direction\n    vec3 light_dir = normalize(light_position - p);\n    \n    // calculate hitpoint normal (gradient of sdf at p)\n    float dist = GetMinSceneDistanceFromPoint(p);\n    vec2 epsilon = vec2(0.01, 0);\n    vec3 normal = normalize(dist - vec3(GetMinSceneDistanceFromPoint(p - epsilon.xyy), \n                                        GetMinSceneDistanceFromPoint(p - epsilon.yxy), \n                                        GetMinSceneDistanceFromPoint(p - epsilon.yyx)));\n    \n    // calculate diffuse contribution\n    float diffuse_contrib = clamp(dot(normal, light_dir), 0.0, 1.0);\n    \n    // calculate shadow rays\n    Ray shadowray;\n    shadowray.origin = p + normal * SDF_DIST * 2.0;\n    shadowray.dir = light_dir;\n    float shadow_fac = Raymarch(shadowray);\n    \n    // basic shadow\n    // if(shadow_fac < length(light_position - p)) diffuse_contrib *= 0.5;\n    \n    float shadow = calcSoftshadow(p, light_dir, 0.1, 25.0, 1);\n    diffuse_contrib *= shadow;\n    \n    // calculate ambient occlusion\n    float ao = calcAO(p, normal);\n    diffuse_contrib *= ao;\n    \n    return diffuse_contrib;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    //vec2 uv = fragCoord/iResolution.xy;\n    \n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    // Create ray\n    Ray ray;\n    ray.dir = normalize(vec3(uv.x, uv.y, 1.0));\n    ray.origin = vec3(1.0, 1.8, 0.0);\n    \n    // raymarching\n    float m = Raymarch(ray);\n    \n    if(m < MAX_DIST) {\n        // calculate hit point\n        vec3 hitpoint = ray.origin + ray.dir * m;\n    \n        // shade point\n        float diffuse = calcShading(hitpoint);\n        fragColor = vec4(vec3(diffuse), 1.0);\n    }\n    else\n    {\n        // background\n        vec3 col = vec3(uv.xy, 1.0);\n        fragColor = vec4(col,1.0);\n    }\n    \n}","name":"Image","description":"","type":"image"}]}