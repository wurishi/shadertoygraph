{"ver":"0.1","info":{"id":"MtSBRw","date":"1515169193","viewed":3858,"name":"Rising Box","username":"gaz","description":"3d","likes":44,"published":1,"flags":0,"usePreview":0,"tags":["raymarch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define time (iTime+100.)\n\nmat3 lookat(vec3 d, vec3 up)\n{\n\tvec3 w = normalize(d),u = normalize(cross(w,up));\n    return (mat3(u,cross(u,w),w));\n}\n\nmat2 rotate(float a)\n{\n\treturn mat2(cos(a), sin(a), -sin(a), cos(a));\t\n}\n\n/*\nmat3 rotate(in vec3 axis, in float theta)\n{\n  axis = normalize(axis);\n  float x = axis.x, y = axis.y, z = axis.z, s = sin(theta), c = cos(theta), o = 1.0-c;\n  return mat3(\n    o*x*x+c,o*x*y+z*s,o*z*x-y*s,\n    o*x*y-z*s,o*y*y+c,o*y*z+x*s,\n    o*z*x+y*s,o*y*z-x*s,o*z*z+c\n    );\n}\n*/\n\n/*\nvec3 rotate(vec3 p, vec3 axis, float theta) \n{\n \tvec4 q = vec4(normalize(axis)*sin(theta/2.), cos(theta/2.)); // quaternion\n    return p+2.*cross(cross(p, q.xyz)-q.w*p, q.xyz);\n}\n*/\n\nvec3 rotate(vec3 p,vec3 axis,float theta)\n{\n    axis=normalize(axis);\n    vec3 v = cross(p, axis), u = cross(axis,v);\n    return u * cos(theta) + v * sin(theta) + axis * dot(p, axis);   \n}\n\nfloat hash(float n)\n{\n    return fract(sin(n) * 43758.5453123);\n}\n\nfloat udRoundBox( vec3 p, vec3 b, float r )\n{\n  return length(max(abs(p)-b,0.0))-r;\n}\n\nfloat map(in vec3 p)\n{\n    vec3 g = vec3(floor(p.xz/4.0),0);\n    p.xz = mod(p.xz,4.0) -2.0;\n    float n = max(0.5,hash(dot(g.xy,vec2(10,180))));\n    p.y-=n*n*time*7.;\n    float s = 10.*hash(dot(g.xy,vec2(5,10)));\n    if(s<3.) return 1.0;\n    g.z = floor(p.y/s);\n    p.y = mod(p.y,s)-s/2.;\n    if(hash(dot(g,vec3(5,70,1)))<0.6) return 1.0;\n\tp = rotate(p, vec3(\n        hash(dot(g,vec3(5,27,123)))*2.-1.,\n        hash(dot(g,vec3(15,370,23)))*2.-1.,\n        hash(dot(g,vec3(25,570,3)))*2.-1.\n        ), time + hash(dot(g,vec3(25,570,553)))*3.);\n\t    /*\n\tp *= rotate(vec3(\n        hash(dot(g,vec3(5,27,123)))*2.-1.,\n        hash(dot(g,vec3(15,370,23)))*2.-1.,\n        hash(dot(g,vec3(25,570,3)))*2.-1.\n        ), time + hash(dot(g,vec3(25,570,553)))*3.);\n\t*/\n    return udRoundBox(p,vec3(0.5),0.2);\n}\n\nvec3 calcNormal(in vec3 pos){\n  vec2 e = vec2(1, -1) * 0.002;\n  return normalize(\n    e.xyy*map(pos+e.xyy)+e.yyx*map(pos+e.yyx)+ \n    e.yxy*map(pos+e.yxy)+e.xxx*map(pos+e.xxx)\n  );\n}\n\nvec3 doColor(vec3 p)\n{\n    if (p.y>10.0) return vec3(0,0.7,0.8);\n    if (p.y>0.0) return vec3(0.3,0.7,0.2);\n    return vec3(0);\n}\n\nvec3 rayCastPlane(vec3 ro, vec3 rd, vec3 pos, vec3 nor, vec3 up)\n{\n\tfloat z = dot(pos-ro,nor)/dot(rd,nor);\n    vec3 p=ro+rd*z, a=p-pos, u=normalize(cross(nor,up)),v=normalize(cross(u,nor));\n    return vec3(-dot(a,u),dot(a,v),z);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (fragCoord*2.-iResolution.xy)/iResolution.y;\n\tvec3 ro = vec3(0.0, 25.0, 20.0);\n    ro.xz *= rotate(iTime*0.1);\n    vec3 rd = lookat(-ro,vec3(0,1,0))*normalize(vec3(p,2));\t\n\tvec3 col = mix(vec3(0.05, 0.05, 0.3), vec3(0.8), smoothstep(.5, 2.5, length(p*vec2(1,2))));\n\tconst float maxd = 80.0, precis = 0.01;\n\tfloat t = 0.0, d;\n \tfor(int i = 0; i < 150; i++)\n  \t{\n\t\tvec3 p=ro + rd * t;\n    \tt += d = min(map(p), 1.0); // rewrite 2018/01/10\n        //t += d = min(map(p),\n        //    min((step(0.0,rd.x)-fract(p.x))/rd.x, (step(0.0,rd.z)-fract(p.z))/rd.z)+precis);\n    \tif(d < precis || t > maxd) break;\n  \t}\n  \tif(d < precis)\n  \t{\n\t  \tvec3 p = ro + rd * t;\n\t \tvec3 nor = calcNormal(p);\n    \tvec3 li = normalize(vec3(1));\n        vec3 bg = col;\n        col = doColor(p);\n        float dif = clamp(dot(nor, li), 0.3, 1.0);\n        float amb = max(0.5 + 0.5 * nor.y, 0.0);\n        float spc = pow(clamp(dot(reflect(normalize(p - ro), nor), li), 0.0, 1.0), 30.0);\n        col *= dif * amb ;\n        col += spc;\n        col = clamp(col,0.0,1.0);\n        col = mix(bg, col, exp(-t*t*0.0001));\n  \t\tcol = pow(col, vec3(0.6));        \n    } \n    vec3 c = rayCastPlane(ro, rd, vec3(0), vec3(0,1,0), vec3(0,0,1));\n    if (c.z<t)\n    {\n \t\tcol = mix(col,vec3(1,0.95,0.9),smoothstep(30.,0.,length(c.xy))) ;\n        col = mix(col,vec3(0.9,0.5,0.2),smoothstep(1.,0.,map(ro+rd*c.z)));\n   \t}\n    c = rayCastPlane(ro, rd, vec3(0,10,0), vec3(0,1,0), vec3(0,0,1));\n    if (c.z<t)\n    {\n \t\tcol = mix(col,vec3(0.8,0.7,0.2),smoothstep(1.,0.,map(ro+rd*c.z))) ;\n\t}    \n    fragColor = vec4(col, 1.0);;\n}","name":"Image","description":"","type":"image"}]}