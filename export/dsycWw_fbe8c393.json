{"ver":"0.1","info":{"id":"dsycWw","date":"1696187329","viewed":45,"name":"Smooth Rotating Textured Quad","username":"AndreiDespinoiu","description":"Based on Richard Oliver Bray's videos:\nhttps://youtu.be/yDlB6n8c84c - \"12. How to create a square in GLGL - Shader course\"\nhttps://youtu.be/O_dVsuynlpI - \"13. How to rotate a shape in GLGL - Shader course\"","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["sprite","smoothstep","rotation","smooth","quad","texturedquad"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.1415926535897932384626433832795;\n\n// Parameter\nconst float BORDER_WIDTH = 0.25;\n\n\nvoid mainImage( out vec4 oFragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    uv -= 0.5; // Move the \"0,0\" origin away from the corner, to center it\n    \n    float aspect = iResolution.x/iResolution.y;\n    uv.x *= aspect; // Square it\n    \n    float angle = iTime * 45.0;    // In degrees (45 degrees every second). A negative number will cause it to spin in the other direction\n    angle = (angle / 180.0) * PI;  // Convert to radians\n    \n    mat2 rotMat = mat2(\n        cos(angle), -sin(angle),\n        sin(angle),  cos(angle)\n    );\n    \n    uv = rotMat * uv;  // Apply rotation matrix to texture coordinates\n    uv += 0.5;         // Move the \"0,0\" origin back into the corner after rotating it\n    \n    float borderSoftness = sin(iTime * 2.0) * 0.1 + 0.1;\n    \n    vec2 bottomLeft = smoothstep(vec2(BORDER_WIDTH - borderSoftness), vec2(BORDER_WIDTH), uv);\n    vec2 topRight   = smoothstep(vec2(BORDER_WIDTH - borderSoftness), vec2(BORDER_WIDTH), 1.0 - uv);\n    \n    float quadAlphaMask = bottomLeft.x * bottomLeft.y * topRight.x * topRight.y;\n    \n    //oFragColor = vec4(vec3(quadAlphaMask), 1.0); // Uncomment this to preview how it looks without texture\n    oFragColor = vec4(texture(iChannel0, uv).rgb * quadAlphaMask, 1.0);\n}","name":"Image","description":"","type":"image"}]}