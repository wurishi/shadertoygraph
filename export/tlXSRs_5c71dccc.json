{"ver":"0.1","info":{"id":"tlXSRs","date":"1563896306","viewed":365,"name":"Local UV from along +  dist ","username":"TLC123","description":"Playing  with distance functions that return a distans + a more or less perpendicular  \"along\" component for building a secondary SDF in the local coordinate system. Oblivious care needs to be taken when modelling.  ","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2018 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n \n// and many more here:   https://iquilezles.org/articles/distfunctions2d\n\nvec2 opSmoothUnion2d( vec2 d1, vec2 d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2.y-d1.y)/k, 0.0, 1.0 );\n    float hx = clamp( 0.5 + 0.5*(d2.y-d1.y)/(k*1.4), 0.0, 1.0 );\n    return vec2(\n       mix( d2.x, d1.x, hx ) - (k*1.4)*hx*(1.0-hx) ,\n\t    // d2.y< d1.y?d2.x:d1.x,\n        mix( d2.y, d1.y, h ) - k*h*(1.0-h) );\n}\n\nvec2 sdBox2d( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return vec2( min(abs(p.x),abs(p.y))*max(b.x,b.y), length(max(d,vec2(0))) + min(max(d.x,d.y),0.0));\n}\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,vec2(0))) + min(max(d.x,d.y),0.0);\n}\nvec2 sdCircle2d( vec2 p, float r )\n{\n  return vec2(atan(p.y,p.x)/6.28318, length(p) - r);\n} \n\nvec2 sdCircle2dCC( vec2 p, float r )\n{\n    float a=atan(p.y,p.x)*r;\n  //  a=abs(a*2.-1.);\n\n  return vec2(a, length(p) - r);\n} \n\n\nvec2 sdCircle2dCW( vec2 p, float r )\n{\n    float a=atan(p.y,p.x)*r;\n//a=abs(a*2.-1.);\n  return vec2( a , length(p) - r);\n} \n\nvec2 sdBezier2d( in vec2 pos, in vec2 A, in vec2 B, in vec2 C )\n{    \n    vec2 a = B - A;\n    vec2 b = A - 2.0*B + C;\n    vec2 c = a * 2.0;\n    vec2 d = A - pos;\n    float kk = 1.0 / dot(b,b);\n    float kx = kk * dot(a,b);\n    float ky = kk * (2.0*dot(a,a)+dot(d,b)) / 3.0;\n    float kz = kk * dot(d,a);      \n    float res = 0.0;\n    float p = ky - kx*kx;\n    float p3 = p*p*p;\n    float q = kx*(2.0*kx*kx - 3.0*ky) + kz;\n    float h = q*q + 4.0*p3;\n    float t;\n    float t2;\n    float bezlength= (length(A-B)+length(B-C)+length(A-C))*.35 ;\n    if( h >= 0.0) \n    { \n        h = sqrt(h);\n        vec2 x = (vec2(h, -h) - q) / 2.0;\n        vec2 uv = sign(x)*pow(abs(x), vec2(1.0/3.0));\n          t = uv.x + uv.y - kx;\n          t2 = uv.x + uv.y - kx;\n        t = clamp( t, 0.0, 1.0 );\n        vec2 qos = d + (c + b*t)*t;\n        res = dot(qos,qos);\n    }\n    else\n    {\n        float z = sqrt(-p);\n        float v = acos( q/(p*z*2.0) ) / 3.0;\n        float m = cos(v);\n        float n = sin(v)*1.732050808;\n        vec3 t = vec3(m + m, -n - m, n - m) * z - kx;\n        vec3 tc =t;\n        t2=tc.x;\n \t\tt = clamp( t, 0.0, 1.0 );\n\t\tvec2 qos = d + (c + b*t.x)*t.x;\n        res = dot(qos,qos);\n        qos = d + (c + b*t.y)*t.y;\n        t2=(res>dot(qos,qos))?tc.y:t2 ;\n        res = min(res,dot(qos,qos));\n        qos = d + (c + b*t.z)*t.z; \n        t2=(res>dot(qos,qos))?tc.z:t2 ;\n        res = min(res,dot(qos,qos));\n    }\n    t2-=0.5;\n    return vec2( t2*bezlength,sqrt( res ));\n}\nfloat ndot(vec2 a, vec2 b ) { return a.x*b.x - a.y*b.y; }\nfloat sdRhombus( in vec2 p, in vec2 b ) \n{\n    vec2 q = abs(p);\n    float h = clamp((-2.0*ndot(q,b)+ndot(b,b))/dot(b,b),-1.0,1.0);\n    float d = length( q - 0.5*b*vec2(1.0-h,1.0+h) );\n    return d * sign( q.x*b.y + q.y*b.x - b.x*b.y );\n}\n\nfloat sdVesica(vec2 p, float r, float d)\n{\n    p = abs(p);\n\n    float b = sqrt(r*r-d*d);  // can delay this sqrt by rewriting the comparison\n    return ((p.y-b)*d > p.x*b) ? length(p-vec2(0.0,b))\n                               : length(p-vec2(-d,0.0))-r;\n}\nvec2 min2d(vec2 a, vec2 b){\nreturn a.y<b.y ?a:b;\n}\n\nvec3 map(vec2 p){\n    vec2 v0 = vec2(-.5,-0.5)+(vec2(1.3,0.9)*cos(iTime*1.1 + vec2(0.0,5.0) ))*0.35;\n    vec2 v2 = vec2(.5,0.5)+(vec2(1.3,0.9)*cos(iTime*1.3 + vec2(2.0,1.0) ))*0.35;\n    vec2 n=normalize(v2-v0);\n    vec2 v1 = mix(v0,v2,0.5+cos(iTime*.651)*0.25  )+vec2(n.y,-n.x) *sin(iTime*.51)*length(v0-v2)*0.7;\n\n    float d;\n    vec2 res ;\n    vec2 res1 ;\n    vec2 res2 ;\n    if (mod(iTime*0.025,1.)>0.5){\n     res = sdBezier2d( p, v0,v1,v2 )-.2 ;\n\n    }else{\n      res1 =  sdCircle2dCC(p-v0,.6)  ;\n   res2=     sdBox2d(p-v2,vec2(.4,.6)) ;\n      //  res2=     sdCircle2dCW(p-v1,.6) ;\n//   res= min2d( res, sdCircle2dCW(p-v1,.6)   );\n   //res= min2d( res, sdBox2d(p-v1,vec2(.4,.4))-0.15  );\n \n        \n    res=opSmoothUnion2d(res1,res2,.6);\n \n       \n       }\n         // res.x=fract(res.x-0.5) ;   \n\n    res.x=abs((fract(res.x*4.)-0.5)*2. )*(1./4.) ; \n      \nd=res.y;\n d=sdBox( res  ,vec2( 0.12,0.06));  \nreturn vec3(res.x,res.y, d);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\nvec3 res=map(p);\n\tfloat d = res.x;\n    float ovr=1.;\n        vec3 col  = vec3(1.0) ;\n        if (mod(iTime*0.05,1.)>0.164)d = res.y;\n    if (mod(iTime*0.05,1.)>0.33){\n        d = res.z; \n        }\n    if (mod(iTime*0.0125,.5)<0.025) d=0.021;\n    \n    if (abs(res.y)<0.02 && res.x<0.02)ovr=10.;\n    //if (abs(res.y)<0.01 && res.x<0.01)ovr=0.;\n\n     if (mod(iTime*0.0125,.5)<0.025)ovr=0.;\n\n      col = vec3(1.0) - sign(d)*vec3(0.1,0.4,0.7);\n\n                         \n    \n\t//col *= 1.0 - exp(-4.0*abs(d));\n     col = mix( col, col*(1.0 - exp(-9.0*abs(d))), 1.0-smoothstep(0.01,.25,abs(d)) );\n\n\tcol *= 0.8 + 0.2*cos(140.0*d);\n\t col = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.015,abs(d)) );\n     col = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.005,abs(d)) );\n    \n    if (mod(iTime*0.05,1.)>0.66){\n     col = mod(vec3(round(res.x*5.  ),round(res.y*5.  ),0 ),2.0) ;  \n    }\n     col *=ovr;\n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}