{"ver":"0.1","info":{"id":"l3fXz8","date":"1709560316","viewed":97,"name":"Moving rosace","username":"rclovis","description":"Pretty rosace\nGot the inspiration from:\n[url]https://www.shadertoy.com/view/3dl3RH[/url]","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float pi = 3.14159;\n\nmat2 rotate(float t) \n{\n    float s = sin(t);\n    float c = cos(t);\n\treturn mat2(c, s, -s, c);\n}\n\nfloat circle (vec2 uv, float pre, float strokeWidth, float radius)\n{\n    return 1.0 - smoothstep(strokeWidth, strokeWidth + pre, abs(length(uv) - radius));  \n}\n\nfloat disk (vec2 uv, float pre, float strokeWidth, float radius)\n{\n    return 1.0 - smoothstep(strokeWidth, strokeWidth + pre, length(uv) - radius);\n}\n\nfloat box(vec2 uv, float pre, float strokeWidth, vec2 pos, float width, float height, float rotation)\n{\n    vec2 a = pos - vec2(width, 0.0) * rotate(rotation);\n    vec2 b = pos + vec2(width, 0.0) * rotate(rotation);\n    float l = length(b-a);\n    vec2  d = (b-a)/l;\n    vec2  q = uv-(a+b)*0.5;\n          q = mat2(d.x,-d.y,d.y,d.x)*q;\n          q = abs(q)-vec2(l*0.5,height);\n    return 1. - smoothstep(strokeWidth, strokeWidth + pre , abs(length(max(q,0.0)) + min(max(q.x,q.y),0.0)));\n}\n\nfloat circleSin (vec2 uv, float pre, float strokeWidth, float radius, float amplitude, float frequency, float offset)\n{\n    float t = atan(uv.y, uv.x);\n    radius = radius + sin(t * frequency + offset) / amplitude;\n    return circle(uv, pre, strokeWidth, radius);\n}\n\nfloat dotedCircle (vec2 uv, float radius, float subRadius, float gap)\n{\n    float tmp = round(pi / subRadius / (2. + gap));\n    float t = round(atan(uv.y, uv.x) * tmp / pi) * pi / tmp;\n    vec2 circleCoordinates = vec2(radius * cos(t), radius * sin(t));\n    return disk(uv - circleCoordinates, 0.005, 0.002, subRadius);\n}\n\nfloat dashedCircle (vec2 uv, float pre, float strokeWidth, float radius, float frequency, float offset)\n{\n    float t = atan(uv.y, uv.x);\n    vec2 circleCoordinates = vec2(radius * cos(t), radius * sin(t));\n    float d = 1.0 - smoothstep(strokeWidth, strokeWidth + pre, abs(length(uv) - radius));\n    return d * smoothstep(0.05, 0.05 + 0.5, sin(t * frequency) + offset);\n}\n\nfloat dotedCircleSin (vec2 uv, float radius, float subRadius, float gap, float amplitude, float frequency, float offset)\n{\n    float tmp = round(pi / subRadius / (2. + gap));\n    float t = round(atan(uv.y, uv.x) * tmp / pi) * pi / tmp;\n    radius = radius + sin(t * frequency + offset) / amplitude;\n    vec2 circleCoordinates = vec2(radius * cos(t), radius * sin(t));\n    return disk(uv - circleCoordinates, 0.005, 0.002, subRadius);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    float d = 0.;\n    d += disk(uv, 0.005, 0.002, 0.35);\n    d -= disk(uv, 0.005, 0.002, 0.1);\n    d -= dotedCircle(uv, 0.3, 0.005, 60.);\n    d -= dashedCircle(uv * rotate(0.235), 0.005, 0.07, 0.2, 20., -0.5);\n    d += box(uv, 0.003, 0.005, vec2(0., 0.), 1.2 + sin(iTime) / 10., 1.2 + sin(iTime) / 10., 0.785398);\n    d += box(uv, 0.003, 0.005, vec2(0., 0.), 1.2 + sin(iTime) / -10., 1.2 + sin(iTime) / -10., 0.785398);\n\n    d += circle(uv, 0.005, 0.002, 0.045);\n    d += circle(uv, 0.005, 0.002, 0.030);\n    d += circle(uv, 0.005, 0.01, 0.43);\n    d += circleSin(uv, 0.005, 0.01, 0.41, 60., 10., iTime * -3.);\n    d += circle(uv, 0.005, 0.01, 0.48);\n    d += circleSin(uv, 0.005, 0.01, 0.5, 60., 10., iTime * 3.);\n    \n    d += dashedCircle(uv * rotate(iTime * -0.1), 0.005, 0.001, 0.55, 20., 0.);\n    d += dotedCircle(uv * rotate(iTime * -0.1 - 0.08), 0.55, 0.005, 60.);\n    d += dashedCircle(uv * rotate(iTime * 0.1), 0.005, 0.001, 0.57, 20., 0.);\n    d += dotedCircle(uv * rotate(iTime * 0.1 - 0.08), 0.57, 0.005, 60.);\n\n    d += dashedCircle(uv * rotate(sin(iTime) * 0.01), 0.005, 0.075, 0.68, 100., 0.);\n    d += dashedCircle(uv * rotate(sin(iTime) * -0.01), 0.005, 0.075, 0.68, 100., 0.);\n    \n    d += dotedCircleSin(uv, 0.8, 0.001, 30., 60., 20., iTime * 3.);\n    d += dotedCircleSin(uv, 0.8, 0.001, 30., 60., 20., iTime * -3.);\n\n    d += dotedCircle(uv * rotate(sin(iTime) * -0.1 + 0.6), 0.94, 0.02, 3.3);\n    d += dotedCircleSin(uv, 0.90, 0.005, 2., 80., 60., sin(iTime) * 6.);\n    d += dotedCircle(uv * rotate(sin(iTime) * -0.1 - 0.6), 0.86, 0.02, 3.3);\n    \n    d += dotedCircle(uv * rotate(abs(sin(iTime)) * -0.385 - 0.4), 1.3, 0.15, 10.) + dotedCircle(uv * rotate(abs(sin(iTime)) * 0.385 + 0.4), 1.3, 0.15, 10.);\n    d -= 2. * step(2., dotedCircle(uv * rotate(abs(sin(iTime)) * -0.385 - 0.4), 1.3, 0.15, 10.) + dotedCircle(uv * rotate(abs(sin(iTime)) * 0.385 + 0.4), 1.3, 0.15, 10.));\n\n    d += box(uv, 0.003, 0.005, vec2(1.2, 0.5) * rotate(abs(sin(iTime)) / -2.6), 0.2, 0.2, iTime);\n    d += box(uv, 0.003, 0.005, vec2(-1.2, 0.5) * rotate(abs(sin(iTime)) / 2.6), 0.2, 0.2, -iTime);\n    d += box(uv, 0.003, 0.005, vec2(1.2, -0.5) * rotate(abs(sin(iTime)) / 2.6), 0.2, 0.2, -iTime);\n    d += box(uv, 0.003, 0.005, vec2(-1.2, -0.5) * rotate(abs(sin(iTime)) / -2.6), 0.2, 0.2, iTime);\n\n    fragColor = vec4(d, d, d, d);\n}","name":"Image","description":"","type":"image"}]}