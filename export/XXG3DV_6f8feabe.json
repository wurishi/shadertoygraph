{"ver":"0.1","info":{"id":"XXG3DV","date":"1718536132","viewed":97,"name":"Expanding circles pattern","username":"Dimitar","description":"Just a cool effect :)","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["circles","pattern"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define SS(e1,x) smoothstep(e1,3./iResolution.y,x)\n#define SPEED 2.5\n#define FADE_LENGTH 2.\n#define THICKNESS .1\n#define COL_OFFSET .2323234\n#define ASPECT iResolution.x/iResolution.y\n\nfloat drawCircleNonFilled(vec2 st,float r,float thickness)\n{\n    return min(SS(.0,length(st) - r),(1. -  SS(0.,length(st) - r - thickness)));\n}\nvec3 GetColor(vec2 st)\n{\n    return vec3(tan(length(st)),cos(iTime) ,sin(iTime) *cos(iTime) + COL_OFFSET);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = ( 2.* fragCoord - iResolution.xy ) / iResolution.y; \n    vec2 uv0 = uv;\n    vec3 col = vec3(0);\n    \n    //Radius expands until it meets the edge of the screen + some FADE_LENGHT.\n    float time_based_radius = mod(iTime*SPEED ,ASPECT + FADE_LENGTH);\n     \n    //Big circle-using time based radius to change the size of the donut shape circle.\n    col += GetColor(uv)*drawCircleNonFilled(uv0,time_based_radius,THICKNESS);\n     \n    uv = fract((abs(uv0)*5.))*2. -1.;\n    //Mini circles - using 'time_based_radius - length(uv0)' to delay their scale animation.\n    col += GetColor(uv)*drawCircleNonFilled(uv,time_based_radius - length(uv0),THICKNESS);\n    //Follow up circle.\n    col += GetColor(uv0)*drawCircleNonFilled(uv0,time_based_radius - length(uv0),THICKNESS); \n     \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}