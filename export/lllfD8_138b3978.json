{"ver":"0.1","info":{"id":"lllfD8","date":"1511827025","viewed":81,"name":"Mandelbrot set visualization","username":"mvachovski","description":"Simple implementation of the a Mandelbrot's set visualization","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float complex_abs2(vec2 z)\n{\n    return z.x * z.x + z.y * z.y;\n}\n\nbool test2(vec2 c, int n)\n{\n    vec2 fc = c;\n    for(int i = 1; i < n; i++)\n    {\n        fc = vec2(fc.x * fc.x - fc.y * fc.y, 2. * fc.x * fc.y) + c;\n        if(complex_abs2(fc) > 4.)\n            return false;\n    }\n    return true;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = vec2(3.,2.) * (fragCoord.xy / (iResolution.xy   )  - vec2(.65, .5));\n    if(test2(uv, int(iTime * 3.) % 15 ))\n    {\n        fragColor = vec4(0,1,.5,1);\n    }\n    else\n    {\n        fragColor = vec4(.7, 0, .7,1.0);\n    }\n\t\n}\n","name":"Image","description":"","type":"image"}]}