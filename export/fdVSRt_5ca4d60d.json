{"ver":"0.1","info":{"id":"fdVSRt","date":"1635133645","viewed":242,"name":"chunk loading area","username":"ArmandB","description":"shows where to load chunks \nuse the mouse to rotate the looking direction\nred = 1st priority\ngreen = 2nd priority\nblue = 3rd priority","likes":3,"published":3,"flags":0,"usePreview":0,"tags":["game"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float fovDeg = 90.0;\nfloat bufferRadius = 5.0;\nfloat renderDist = 50.0;\nfloat PI = 3.14159265359;\n\nmat2 rotate2d(float angle){\n    return mat2(\n        cos(angle), sin(angle), \n        -sin(angle), cos(angle) \n    );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 mouse = (iMouse.xy/iResolution.xy*100.0) -50.0;\n    mouse.x *= iResolution.x/iResolution.y;\n    float dir = atan(mouse.y, mouse.x); //the direction the player is looking\n\n    // Normalized pixel coordinates (from 0 to 100)\n    vec2 uv = fragCoord/iResolution.xy*100.0;\n    uv -= 50.0;\n    uv.x *= iResolution.x/iResolution.y;\n    vec2 st = uv;\n    uv = round(uv);\n    uv = uv*rotate2d(dir);\n    \n    vec3 col = vec3(0);\n    \n    float fov = fovDeg/180.0 * PI; //the fov in radians\n    \n    float minAngle = -fov/2.0; //the min angle to draw\n    float maxAngle = fov/2.0; //the max angle to draw\n    float angleTan = atan(uv.y, uv.x); //the angle of the current position\n    vec2 uvMin = uv*rotate2d(minAngle); //the position of the min angle\n    vec2 uvMax = uv*rotate2d(maxAngle); //the position of the max angle\n    if (length(uv) <= bufferRadius){ //center\n        col += vec3(0.4,0,0);\n    } else {\n        if (angleTan >= minAngle && angleTan <= maxAngle){ //angle\n            if (length(uv) <= renderDist) {\n                col += vec3(0,0.4,0);\n            } else if (length(uv) <= renderDist+bufferRadius) {\n                col += vec3(0,0,0.4);\n            }\n        } else if (uvMin.x <= renderDist+bufferRadius && uvMin.x >= 0.0 && uvMin.y >= -bufferRadius && uvMin.y <= 0.0){ //side min\n            col += vec3(0,0,0.4);\n        } else if (uvMax.x <= renderDist+bufferRadius && uvMax.x >= 0.0 && uvMax.y <= bufferRadius && uvMax.y >= 0.0){ //side max\n            col += vec3(0,0,0.4);\n        }\n    }\n    \n    //direction pointer\n    vec2 stRot = st*rotate2d(dir);\n    col += smoothstep(1.0, 0.0, (stRot.x >= 0.0) ? abs(stRot.y*5.0) : 1.0);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}