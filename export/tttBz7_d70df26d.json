{"ver":"0.1","info":{"id":"tttBz7","date":"1612465157","viewed":228,"name":"Simple 3D Camera (Art of Code)","username":"cborel","description":"Simple 3d camera setup described in video by \"Art of Code\" in:\nhttps://www.youtube.com/watch?v=dKA5ZVALOhs","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["camera","artofcode"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nSimple 3d camera setup described in video by \"Art of Code\" in:\nhttps://www.youtube.com/watch?v=dKA5ZVALOhs\n*/\n\n// function to compute the distance of a point p from the ray eminating from ro in direction rd\nfloat DistLine(vec3 ro, vec3 rd, vec3 p){\n    return length(cross(p-ro,rd))/length(rd);\n}\n\n// Camera defined by ray origin ro\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord)\n{\n    // define uv coordinates for camera\n    vec2 uv=fragCoord.xy/iResolution.xy;\n    // shift to middle (0.5,0.5)\n    uv-=0.5;\n    // adjust aspect ratio\n    uv.x*=iResolution.x/iResolution.y;\n    // define ray origin ro\n    vec3 ro=vec3(0.0,0.0,-2.0);\n    // ray direction rd\n    vec3 rd=vec3(uv.x,uv.y,0.0)-ro;\n    // time\n    float t=iTime;\n    // define a point p\n    vec3 p=vec3(sin(t),0.0,2.0+cos(t));\n    // compute distance of p from ray rd\n    float d=DistLine(ro,rd,p);\n    float d2=smoothstep(0.1,0.09,d);\n    // set color to distance and alpha channel to 1.0   \n    fragColor=vec4(vec3(d2),1.0);\n}","name":"Image","description":"","type":"image"}]}