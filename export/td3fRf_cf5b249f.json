{"ver":"0.1","info":{"id":"td3fRf","date":"1605660202","viewed":60,"name":"Minimal Raytracer Template","username":"timeiskey","description":"just used as a copyable template","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raytracing","raytracer","template"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define AMBIENT 0.05\n#define SPECULAR 0.8\n#define DIFFUSE 0.2\n\nconst vec3 sphere_color\t= vec3(0.3, 0.4, 0.2);\nconst vec3 light_color \t= vec3(0.8, 0.7, 0.7);\n\nfloat sphere_intersect_dist(vec3 center, float radius, vec3 ray_origin, vec3 ray_dir)\n{\n    //\tsee if ray hit sphere\n    vec3 to_sphere = center - ray_origin;\n    float t = dot(to_sphere, ray_dir);\n    vec3 p = ray_origin + ray_dir * t;\n    float y = length(center - p);\n    \n    //\t//\tif hit\n    if( y < radius)\n    {\n        float x = sqrt(radius*radius - y*y);\n        float front_hit_t = t-x;\n        \n        return front_hit_t;\n\t}\n    else\n    {\n    \treturn -1.0;\n    }\n}\n    \t\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //\tstart it off\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n\tvec3 col = vec3(0);\n\n    //\tfire a ray for each pixel\n    vec3 ro = vec3(0);\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1));\n    \n    //\tmake the scene\n    vec3 light = vec3(\n        cos(iTime/1.0),\n        0.6,\n        sin(iTime/1.0)\n    );\n    light = light * 5.0;\n    \n    vec3 s = vec3(0, 0, 4);\n    float r = 0.8;\n\n\tfloat front_hit_t = sphere_intersect_dist(s, r, ro, rd);\n    if(front_hit_t > 0.0)\n    {\n        vec3 hp = ro + rd * front_hit_t;\n\n        //\tlighting model\n        vec3 to_light = normalize(light - hp);\n        vec3 normal = normalize(hp - s);\n\n        //\t//\tambient \n        col += sphere_color * AMBIENT;\n\n        //\t//\tlambert\n        float b = max(dot(to_light, normal),0.0);\n        col += b * sphere_color * DIFFUSE;\n\n        //\t//\tblinn_phong\n        vec3 to_cam = normalize(ro - hp);\n        vec3 half_vec = normalize(to_light + to_cam);\n        b = max(dot(normal, half_vec), 0.0);\n        b = pow(b, 50.0);\n        col += b * light_color * SPECULAR;\n    }\n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}