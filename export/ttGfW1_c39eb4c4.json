{"ver":"0.1","info":{"id":"ttGfW1","date":"1614249743","viewed":60,"name":"Wave Distorter","username":"fluxtransistor","description":"experiment","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["experiment"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float plot(float y,float yb, float diff) { \n    return smoothstep(yb - diff, yb, y) - smoothstep(yb,yb+diff,y);\n}\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat sine(float x, float y, float iTime, float loc){\n    float n = sin( x*50.0  //frequency\n                              + 5.0  *iTime //speed\n                              + 0.0  *iTime*(loc-0.5) //speed variance\n                              + 0.00  *rand(vec2(loc))*0.0)  //randomness\n                              * 0.02  //amplitude\n                              + loc;\n    return n;\n}\n\nfloat bar(float minx,float maxx,float f, float i, float x, float y){\n    float diff = (maxx-minx)*0.1;\n    if (x>minx && x<maxx && i<0.5) {\n            float s = 1.0 - (1.0- smoothstep(0.0, 0.5,i) ) * (1.0-(1.0-smoothstep(minx,minx+diff,x)*(1.0-smoothstep(maxx-diff,maxx,x))) );\n            return s * (f-i) + i + (1.0-s)*-0.05;\n        }\n    if (x>minx && x<maxx) {\n            float s = 1.0 - (smoothstep(0.5, 1.0,i) ) * (1.0-(1.0-smoothstep(minx,minx+diff,x)*(1.0-smoothstep(maxx-diff,maxx,x))) );\n            return s * (f-i) + i + (1.0-s)*0.05;\n        }\n    return f;\n}\n\nfloat sines(float x, float y, float iTime){\n    float n = 0.0;\n    for(float i=0.0875; i<0.93; i+=0.05){\n        float f = sine(x,y,iTime,i);\n        \n        f = bar(0.46, 0.82, f, i, x, y);\n        f = bar(0.2, 0.3, f, i, x, y);\n       \n        n+=plot(y,f,2.0 / iResolution.y);\n        \n        \n    }\n    return n;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos((iTime*0.1)+uv.xyx+vec3(0,2,4));\n\n    float val = sines(uv.x, uv.y, iTime);\n    \n    vec3 col = vec3(0);\n    col[1] += val;\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}