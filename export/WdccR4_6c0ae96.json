{"ver":"0.1","info":{"id":"WdccR4","date":"1600448114","viewed":294,"name":"Desk in a museum","username":"athibaul","description":"I know, it's not actually a museum.","likes":23,"published":1,"flags":0,"usePreview":0,"tags":["mouse","specular","static","material","imagebasedlighting","notebook","pen"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4dX3zn","filepath":"/media/a/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png","previewfilepath":"/media/ap/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// IMAGE-BASED LIGHTING OF CUSTOM MATERIALS\n// Alexis THIBAULT - 09/2020\n\n\n// This shader is an enhancement of:\n// https://www.shadertoy.com/view/wscyRn\n// with one (fake) ray \"bounce\".\n\n\n#define MIN_BLUR 1.\n#define MAX_BLUR 64.\n#define GAMMA 2.2\n\n// Activate this in scenes with many reflecting objects\n#define SPECULAR_OCCLUSION\n#define SPECULAR_OCCLUSION_STEPS 20\n#define INTERREFLECTIONS\n\n#define AA 1.\n#define ZERO 0\n\n//\n// **********************************************************************\n//                          MATERIAL RENDERING\n// **********************************************************************\n//\n\n// The material model is inspired from\n// https://blog.selfshadow.com/publications/s2013-shading-course/karis/s2013_pbs_epic_notes_v2.pdf\n// \"Metallic\" and \"roughness\" range from 0 to 1 and are\n// approximately perceptually linear.\nstruct Material\n{\n    vec3 baseColor;\n    float metallic;\n    float roughness;\n};\n  \nconst vec3 DIELECTRIC_F0 = vec3(0.04);\n\n// Some examples of materials\nconst Material CHROME = Material(vec3(0.9,0.92,0.95), 1.0, 0.0);\nconst Material RED_PLASTIC = Material(vec3(0.7,0.1,0.07), 0.0, 0.1);\nconst Material RED_METAL = Material(vec3(0.5,0.3,0.2), 1.0, 0.2);\nconst Material GOLD = Material(vec3(0.5,0.3,0.2), 1.0, 0.0);\nconst Material BLUE_PAINT = Material(vec3(0.0,0.4,0.7), 0.0, 1.0);\nconst Material BLACK_PLASTIC = Material(vec3(0), 0.0, 0.0);\nconst Material GREEN_PLASTIC = Material(vec3(0.2,0.5,0.2), 0.0, 0.1);\n\n// Materials can be blended together, e.g. for layering.\nMaterial matmix(Material a, Material b, float x)\n{\n    return Material(mix(a.baseColor, b.baseColor, x),\n                    mix(a.metallic, b.metallic, x),\n                    mix(a.roughness,  b.roughness, x));\n}\n\n// Image-based lighting trick by reinder:\n// To approximate the integrated specular lobe in\n// environment maps, we can use them with\n// varying levels of detail.\n// https://www.shadertoy.com/view/lscBW4\nvec3 getSpecularLightColor( vec3 rd, float roughness, bool enhanceHighlights )\n{\n    roughness = clamp(roughness, 0.0, 1.0);\n    float lod = log2(mix(MIN_BLUR, MAX_BLUR, roughness));\n    vec3 t0 = pow(textureLod(iChannel0, rd.xzy, lod).rgb, vec3(GAMMA));\n    // The highlights of the \"basilica\" are pretty dull,\n    // intensify them for direct specular reflections\n    if(enhanceHighlights)\n    \tt0 *= mix(1.0, 5.0, pow(smoothstep(0.0, 3.0, t0.r+t0.g+t0.b), 2.0));\n    // The large cubemap's blurred versions do not capture well\n    // high-intensity lights, so mix it with the small version.\n    vec3 t1 = pow(textureLod(iChannel1, rd.xzy, lod).rgb, vec3(GAMMA));\n    vec3 col = mix(t0, t1, roughness);\n    // White balance\n    vec3 wb = pow(vec3(205.,159.,147.)/255.,vec3(-GAMMA));\n    return 3.0*wb*col;\n}\n\nvec3 getDiffuseLightColor( vec3 rd )\n{\n    // So yeah, we don't really have a diffuse model\n    return getSpecularLightColor(rd, 1.0, false);\n}\n\n\nvec2 map(vec3 p);\nMaterial getMaterial( vec3 p, float matId );\nvec3 calcNormal( vec3 p, float eps );\n\n// Ambient Occlusion computation stolen from iq\n// https://www.shadertoy.com/view/Xds3zN\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 0.1;\n    for( int i=ZERO; i<5; i++ )\n    {\n        float h = 0.1 + 1.2*float(i)/4.0;\n        float d = map( pos + h*nor ).x;\n        occ += (h-d)*sca;\n        sca *= 0.95;\n        if( occ>0.5 ) break;\n    }\n    return clamp( 1.0 - 2.0*occ, 0.0, 1.0 ) * (0.5+0.5*nor.z);\n}\n\nfloat bluenoise();\n\nvec3 approxColor( vec3 p, vec3 rd, Material mat, float ao )\n{\n    #ifdef INTERREFLECTIONS\n    vec3 normal = calcNormal(p, 0.01);\n    //ao = calcAO(p, normal);\n    vec3 rrd = reflect(rd,normal);\n    float roughness = mix(mat.roughness, 1.0, smoothstep(0.0, 0.01, length(fwidth(rrd))));\n    vec3 diffuseBaseColor = mix(mat.baseColor, vec3(0), mat.metallic);\n    vec3 diffuseCol = getDiffuseLightColor(normal) * diffuseBaseColor;\n    //vec3 specularCol = getSpecularLightColor(reflect(rd, normal), mat.roughness);\n    vec3 specularCol = getSpecularLightColor(rrd, roughness, false);\n    vec3 F0 = mix(DIELECTRIC_F0, mat.baseColor, mat.metallic);\n    vec3 fre = F0 + (1.0-F0)*pow(clamp(1.0-dot(-rd,normal),0.0,1.0), 5.0);\n    vec3 col = mix(diffuseCol, specularCol, fre);\n    #else\n    //vec3 col = ao * mat.baseColor;\n    vec3 col = mat.baseColor;\n    #endif\n    return col*ao;\n    //return vec3(length(fwidth(rrd)));\n}\n\nvec3 calcSpecularColor( vec3 ro, vec3 rd, float roughness, float ao, vec3 F0 )\n{\n    #ifdef SPECULAR_OCCLUSION\n    // Calculate the color seen from a specular reflection\n    // To do this, compute the approximate color of nearby objects\n    // in a manner similar to my \"depth of field\" effect.\n    float coneAngle = mix(0.01, 1.0, roughness);\n    vec2 d;\n    float t=bluenoise()*map(ro).x;\n    float occl = 0.0;\n    vec3 objectCol = vec3(0);\n    for(int i=ZERO; i<SPECULAR_OCCLUSION_STEPS; i++)\n    {\n        vec3 p = ro+t*rd;\n        d = map(p);\n        float w = coneAngle*t; // Ray width\n        float newOccl = smoothstep(w, -w, d.x);\n        if(newOccl > occl)\n        {\n            objectCol += (newOccl - occl) * approxColor(p, rd, getMaterial(p,d.y), \n                                                       float(i)/float(SPECULAR_OCCLUSION_STEPS));\n            occl = newOccl;\n        }\n        t += d.x+w; // March into negative distances also\n        if(occl > 0.99 || t > 100.) break;\n    }\n    vec3 worldColor = getSpecularLightColor(rd, roughness, true);\n    vec3 refl = (1.0-occl) * worldColor + objectCol;\n    // For rough metal, reflections may turn out sharper than expected,\n    // so let's decrease this effect by mixing in some AO.\n    vec3 simpleEval = worldColor * mix(vec3(1.0-occl), vec3(ao), clamp(2.0*F0,0.0,1.0));\n    return mix(refl, simpleEval, roughness);\n    //return refl;\n    #else\n    // Cheaper way of removing strong highlights:\n    // calculate \"AO\" in the direction of the reflected ray.\n    // Eliminates most glancing specular highlights... including the good ones.\n    ao = calcAO(ro, rd);\n    return getSpecularLightColor(rd, roughness, true) * ao;\n   \t#endif\n}\n\nvec3 renderMaterial( vec3 p, vec3 rd, vec3 normal, Material mat )\n{\n    vec3 diffuseBaseColor = mix(mat.baseColor, vec3(0), mat.metallic);\n    \n    float ao = calcAO(p, normal);\n    vec3 diffuseCol = getDiffuseLightColor(normal) * diffuseBaseColor * ao;\n    vec3 F0 = mix(DIELECTRIC_F0, mat.baseColor, mat.metallic);\n    vec3 fre = F0 + (1.0-F0)*pow(clamp(1.0-dot(-rd,normal),0.0,1.0), 5.0);\n    vec3 specularCol = calcSpecularColor(p+0.01*normal, reflect(rd, normal), mat.roughness, ao, F0 );\n    vec3 col = mix(diffuseCol, specularCol, fre);\n    \n    return col;\n}\n\n\n\n//\n// **********************************************************************\n//                       MAP, BUMP, MATERIAL\n// **********************************************************************\n//\n\n\nvec3 mousePos = vec3(5.0,-3.0,1.0);\nvec2 map( vec3 p )\n{\t\n    //vec2 d = vec2(p.z, TABLE);\n    vec3 q = p - vec3(-8,0,-1);\n\tq.xy *= mat2(0.6,0.8,-0.8,0.6);\n    vec2 d = vec2(sdBox(q, vec3(50,30,1)), TABLE); \n    \n    // No need to go too far\n    float d2 = min(d.x, length(p) - 20.);\n    if(d2 > 3.0) return vec2(d2, TABLE);\n    //d = opU(d, vec2(p.z+100., FLOOR));\n    \n    q = p;\n    q -= mousePos;\n    q.xy *= mat2(0.8,-0.6,0.6,0.8);\n    q -= notebookDispl(mousePos)*0.5;\n    d = opU(d, sdMouse(q));\n    \n    float penSlope = 0.2/8.0;\n    mat2 penRot = mat2(cos(penSlope), -sin(penSlope), sin(penSlope), cos(penSlope));\n    q = p - vec3(0.0,8.0,0.95);\n    vec2 cs = normalize(vec2(1.0,-0.3));\n\tq.xy *= mat2(cs.x,cs.y,-cs.y,cs.x);\n    q.xz *= penRot;\n    q += 0.5*mix(notebookDispl(vec3(0.0,8.0,1.0)), notebookDispl(vec3(8.0,8.0,1.0)), q.x*0.125);\n    d = opU(d, sdPen(q));\n    \n    q = p-vec3(0.0,0.0,0.5);\n    d = opU(d, sdNotebook(q));\n    \n    float radius = 0.8;\n    d = opU(d, vec2(\n        length(p-vec3(8.0, -10.0, 1.0+radius))-radius,\n        PEN_METAL\n    ));\n    d = opU(d, vec2(\n        length(p-vec3(7.0, -8.4, 1.0+radius))-radius,\n        PEN_METAL\n    ));\n    return d;\n}\n\nfloat bump( vec3 p, float matId )\n{\n    int m = int(matId);\n    if(m == TABLE)\n    {\n        vec3 q = p - vec3(-8,0,-1);\n\t\tq.xy *= mat2(0.6,0.8,-0.8,0.6);\n    \tvec3 wood = texture(iChannel2, q.xy*0.03).rgb;\n        return wood.g * 0.3;\n    }\n    if(m == MOUSE)\n    {\n        float scale = 0.03;\n        p -= mousePos;\n        vec2 q = 2.0*p.xy / (p.z+1.0);\n        vec3 surface = texture(iChannel3, q*scale).rgb;\n        return surface.g * 0.005;\n    }\n    if(m == BOOK_COVER)\n    {\n        float d = abs(fract(p.y*3.0)-0.5);\n        d /= (1.0+fwidth(6.0*p.y)); // Antialiasing\n        //d *= smoothstep(1.0,0.0,fwidth(3.0*p.y));\n        float d2 = texture(iChannel2, p.xy*0.005).r;\n        return -0.05*d*d*smoothstep(0.0,0.5,d2) + 0.05*d2;\n    }\n    if(m == BOOK_PAGES)\n    {\n        p.z /= 1.0 - notebookDispl(p);\n        float d = abs(fract(p.z*15.0)-0.5);\n        d /= (1.0+fwidth(15.0*p.z));\n        return 0.03*d*d;\n    }\n    return 0.0;\n}\n\n\nMaterial getMaterial( vec3 p, float matId )\n{\n    Material mat = Material(vec3(0), 0.0, 0.1);\n    int m = int(matId);\n    \n\tif(m == TABLE)\n    {\n        vec3 q = p - vec3(-8,0,-1);\n\t\tq.xy *= mat2(0.6,0.8,-0.8,0.6);\n    \tvec3 wood = texture(iChannel2, q.xy*0.03).rgb;\n        mat = Material(wood*vec3(1.0,1.5,3.0), 0.0, clamp(1.0-2.0*wood.g, 0.0,1.0));\n    }\n    if(m == MOUSE)\n    {\n        p -= mousePos;\n        vec2 q = 2.0*p.xy / (p.z+1.0);\n        float dirt = texture(iChannel2, q*0.1).r;\n        dirt = smoothstep(0.5, 0.9, dirt)  * smoothstep(1.0,3.0,p.z);\n        //return Material(vec3(dirt), 0.0, 1.0);\n        return matmix(\n            Material(vec3(0.3,0.05,0.05), 0.0, 0.4),\n            Material(vec3(0.0), 0.0, 1.0),\n            dirt*0.5);\n        \n    }\n    if(m == MOUSE_WHEEL)\n        return Material(vec3(0.05), 0.0, 1.0);\n    if(m == BOOK_RINGS)\n        return Material(vec3(0.5), 1.0, 0.5);\n    if(m == BOOK_COVER)\n        return Material(vec3(0.05,0.1,0.4), 0.0, 0.2);\n    if(m == BOOK_PAGES)\n    {\n        p *= 2.0;\n        float dgrid = min(abs(fract(p.x)-0.5), abs(fract(p.y)-0.5));\n        vec3 grid = mix(vec3(0.8), vec3(0.1,0.1,0.2), 0.5*smoothstep(0.2,0.0, dgrid));\n        return Material(grid, 0.0, 1.0);\n    }\n    if(m == PEN_METAL)\n        return Material(vec3(0.5), 1.0, 0.2);\n    if(m == PEN_PLASTIC)\n        return Material(vec3(0.005), 0.0, 0.2);\n    /*\n    if(m == FLOOR)\n        return Material(vec3(0.5), 0.0, 0.5);\n\t*/\n    \n    return mat;\n}\n        \n        \nfloat bumpMap( vec3 p )\n{\n    vec2 d = map(p);\n    return d.x - bump(p, d.y);\n}\n\n\nvec3 calcNormal( vec3 p, float eps )\n{\n    //float eps = 1e-3;\n    vec2 e = eps*vec2(1,-1);\n    return normalize(\n          e.xxx*bumpMap(p+e.xxx)\n        + e.xyy*bumpMap(p+e.xyy)\n        + e.yxy*bumpMap(p+e.yxy)\n        + e.yyx*bumpMap(p+e.yyx));\n}\n\nvec2 _fragCoord;\nfloat bluenoise()\n{\n    return texelFetch(iChannel3, ivec2(mod(_fragCoord,vec2(1024.))), 0).x;\n}\n\n\n//\n// **********************************************************************\n//                           MAIN IMAGE\n// **********************************************************************\n//\n\n\nvec3 computeRayColor(vec3 ro, vec3 rd)\n{\n    vec2 d;\n    float t=0.0;\n    for(int i=ZERO;i<256;i++)\n    {\n        d = map(ro+t*rd);\n        if(d.x < 0.001 || t > 100.) break;\n        t += d.x;\n    }\n\n    if(t < 100.)\n    {\n        vec3 p = ro+t*rd;\n        vec3 normal = calcNormal(p, 0.01);\n        Material mat = getMaterial(p, d.y);\n        return renderMaterial(p, rd, normal, mat);\n    }\n    else\n    {\n        // We didn't hit anything, return world color\n        return getSpecularLightColor(rd, 0.0, true);\n    }\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    _fragCoord = fragCoord;\n    \n    float th = (iTime+13.) * 0.2;\n    vec3 ro = 10.0*vec3(4.0*sin(th), -4.0*cos(th), 1.0+0.5*sin(th*1.618));\n    //vec3 ro = vec3(0.0,30.0,1.0);\n    //vec3 ro = vec3(0.0,-3.0+2.0*sin(th),6.0 + 2.0*cos(th));\n    vec3 target = vec3(0);\n    vec3 camFwd = normalize(target-ro);\n    vec3 camRight = normalize(cross(camFwd, vec3(0,0,1)));\n    vec3 camUp = cross(camRight, camFwd);\n    float fov = 0.4;\n    \n    \n    vec3 col = vec3(0);\n    \n    \n    for(float i=-0.5; i<0.5; i+=1.0/AA){\n        for(float j=-0.5; j<0.5; j+=1.0/AA){\n            vec2 uv = (2.0*fragCoord.xy + vec2(i,j) - iResolution.xy)/iResolution.x;\n            vec3 rd = normalize(camFwd + fov*(uv.x*camRight + uv.y * camUp));\n            col += computeRayColor(ro, rd);\n        }\n    }\n    col *= (1.0/(AA*AA));\n    \n    col *= vec3(1.2,1.0,0.8);\n    \n    // Vignette\n    col *= smoothstep(0.9,0.1,length((fragCoord-iResolution.xy*0.5)/iResolution.xy));\n    col = mix(col, 1.0-(4./27.)/(col*col), step(2./3., col));\n    col = mix(col, smoothstep(0.0,1.0,col), 0.2);\n    col = pow(col, vec3(1.0/GAMMA));\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Primitive distance functions by iq\n// https://www.shadertoy.com/view/Xds3zN\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat dot2( in vec3 v ) { return dot(v,v); }\nfloat ndot( in vec2 a, in vec2 b ) { return a.x*b.x - a.y*b.y; }\n\n\nfloat sdBox( vec3 p, vec3 b )\n{\n    vec3 d = abs(p) - b;\n    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat sdEllipsoid( in vec3 p, in vec3 r ) // approximated\n{\n    float k0 = length(p/r);\n    float k1 = length(p/(r*r));\n    return k0*(k0-1.0)/k1;\n}\n\n\n// vertical\nfloat sdCylinder( vec3 p, vec2 h )\n{\n    vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n\n// arbitrary orientation\nfloat sdCylinder(vec3 p, vec3 a, vec3 b, float r)\n{\n    vec3 pa = p - a;\n    vec3 ba = b - a;\n    float baba = dot(ba,ba);\n    float paba = dot(pa,ba);\n\n    float x = length(pa*baba-ba*paba) - r*baba;\n    float y = abs(paba-baba*0.5)-baba*0.5;\n    float x2 = x*x;\n    float y2 = y*y*baba;\n    float d = (max(x,y)<0.0)?-min(x2,y2):(((x>0.0)?x2:0.0)+((y>0.0)?y2:0.0));\n    return sign(d)*sqrt(abs(d))/baba;\n}\n\nfloat sdCappedCone( in vec3 p, in float h, in float r1, in float r2 )\n{\n    vec2 q = vec2( length(p.xz), p.y );\n    \n    vec2 k1 = vec2(r2,h);\n    vec2 k2 = vec2(r2-r1,2.0*h);\n    vec2 ca = vec2(q.x-min(q.x,(q.y < 0.0)?r1:r2), abs(q.y)-h);\n    vec2 cb = q - k1 + k2*clamp( dot(k1-q,k2)/dot2(k2), 0.0, 1.0 );\n    float s = (cb.x < 0.0 && ca.y < 0.0) ? -1.0 : 1.0;\n    return s*sqrt( min(dot2(ca),dot2(cb)) );\n}\n\nfloat sdCappedCone(vec3 p, vec3 a, vec3 b, float ra, float rb)\n{\n    float rba  = rb-ra;\n    float baba = dot(b-a,b-a);\n    float papa = dot(p-a,p-a);\n    float paba = dot(p-a,b-a)/baba;\n\n    float x = sqrt( papa - paba*paba*baba );\n\n    float cax = max(0.0,x-((paba<0.5)?ra:rb));\n    float cay = abs(paba-0.5)-0.5;\n\n    float k = rba*rba + baba;\n    float f = clamp( (rba*(x-ra)+paba*baba)/k, 0.0, 1.0 );\n\n    float cbx = x-ra - f*rba;\n    float cby = paba - f;\n    \n    float s = (cbx < 0.0 && cay < 0.0) ? -1.0 : 1.0;\n    \n    return s*sqrt( min(cax*cax + cay*cay*baba,\n                       cbx*cbx + cby*cby*baba) );\n}\n\n\nfloat sdTriPrism( vec3 p, vec2 h )\n{\n    const float k = sqrt(3.0);\n    h.x *= 0.5*k;\n    p.xy /= h.x;\n    p.x = abs(p.x) - 1.0;\n    p.y = p.y + 1.0/k;\n    if( p.x+k*p.y>0.0 ) p.xy=vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n    p.x -= clamp( p.x, -2.0, 0.0 );\n    float d1 = length(p.xy)*sign(-p.y)*h.x;\n    float d2 = abs(p.z)-h.y;\n    return length(max(vec2(d1,d2),0.0)) + min(max(d1,d2), 0.);\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n    return length( vec2(length(p.xz)-t.x,p.y) )-t.y;\n}\n\n\n\n/*\nfloat opCheapBendTriPrism( in vec3 p, in vec2 h )\n{\n    const float k = 1.0; // or some other amount\n    float c = cos(k*p.x);\n    float s = sin(k*p.x);\n    mat2  m = mat2(c,s,-s,c);\n    vec3  q = vec3(m*p.xz,p.y);\n    return sdTriPrism(q.xzy, h);\n}\n*/\n\n\nvec2 opSmoothUnion( vec2 d1, vec2 d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2.x-d1.x)/k, 0.0, 1.0 );\n    return vec2(\n        mix( d2.x, d1.x, h ) - k*h*(1.0-h),\n        d1.x < d2.x ? d1.y : d2.y\n    );\n}\n\n\n\n// Following distance functions by Alexis THIBAULT\n\n\nfloat opBendTriPrism( in vec3 p, in float R, in vec2 h )\n{\n    vec3 q = vec3(-R*atan(p.x,p.y+R), R - length(vec2(p.x, p.y+R)), p.z);\n    return sdTriPrism(q.xzy, h);\n}\n\n\n\nconst int MOUSE = 0,\n    MOUSE_WHEEL = 1,\n    PEN_METAL = 2,\n    PEN_PLASTIC = 3,\n    BOOK_COVER = 4,\n    BOOK_PAGES = 5,\n    BOOK_RINGS = 6,\n    TABLE = 7,\n    FLOOR = 8;\n\nvec2 opU( vec2 a, vec2 b )\n{\n    return (a.x < b.x) ? a : b;\n}\n\nvec2 opI( vec2 a, vec2 b )\n{\n    return (a.x < b.x) ? b : a;\n}\n\n// Everything on top of the notebook is a bit displaced\nfloat notebookDispl(vec3 p)\n{\n    float corners = smoothstep(15., 30., p.x+abs(p.y));\n    corners = corners*corners*0.5;\n    return 0.5*cos(0.15*p.x) * sin(0.2*p.y) - corners;\n    return 0.0;\n}\n\nvec2 sdMouse( in vec3 p )\n{\n    /*\n    float d;\n    d = sdBox(p - vec3(0,0,1.65), vec3(3.0,5.5,1.5))-0.1;\n    col = vec3(0.5);\n    float d2 = sdEllipsoid(p-vec3(0.0,-5.5,1.0), vec3(7.0,11.0,2.2));\n    if(d < d2)\n    {\n        d = d2;\n        col = vec3(0.8,0.1,0.02);\n    }\n    d2 = sdEllipsoid(p-vec3(0.0,0.0,0.0), vec3(4.0,6.0,4.0));\n    if(d < d2)\n    {\n        d = d2;\n        col = vec3(0.2);\n    }\n    \n    float mouseWheel = sdEllipsoid(p-vec3(0.0,2.5,2.0), vec3(0.5,1.0,1.0));\n    d = max(d, -mouseWheel + 0.1);\n    if(d > mouseWheel)\n    {\n        d = mouseWheel;\n        col = vec3(0.2);\n    }\n    return d;\n\t*/\n    \n    vec2 d;\n    float box = sdBox(p - vec3(0,0,1.65), vec3(3.1,5.6,1.55))-0.1;\n    box = min(abs(box)-0.05, box+0.1);\n    d = vec2(box, MOUSE);\n    if(d.x > 2.0) return vec2(d);\n    float ell = sdEllipsoid(p-vec3(0.0,-5.5,1.0), vec3(7.0,11.0,2.2));\n    //ell = min(abs(ell)-0.05, ell+0.1); // Induces artifacts...\n    d = opI(d, vec2(ell, MOUSE));\n    ell = sdEllipsoid(p-vec3(0.0,0.0,0.0), vec3(4.0,6.0,4.0));\n    d = opI(d, vec2(ell, MOUSE));\n    float mouseWheel = sdEllipsoid(p-vec3(0.0,2.5,2.0), vec3(0.5,1.0,1.0));\n    d = opI(d, vec2(-mouseWheel + 0.1, MOUSE_WHEEL));\n    d = opU(d, vec2(mouseWheel, MOUSE_WHEEL));\n    return d;\n}\n\n\nvec2 sdPenNip( vec3 p )\n{\n    float d=100.;\n    p.x -= 0.75/sqrt(3.0);\n    p.z -= 0.25;\n    d = opBendTriPrism(p.yzx, 0.25, vec2(0.75,0.01));\n    return vec2(d*0.7, PEN_METAL);\n}\n\nvec2 sdPen( vec3 p )\n{\n    p.z -= 0.6;\n    vec2 d;\n    float d0 = sdBox(p, vec3(8,0.6,0.6));\n    if(d0 > 3.0) return vec2(d0, -1);\n    //return d0;\n    // Body\n    d = vec2(sdCappedCone(p.yxz+vec3(0,-4,0), 4.0, 0.6, 0.4), PEN_METAL);\n  \t// Grip barrel : extends a bit inside the pen, for better negative distances\n    // (negative distances are used for blurring specular reflections)\n    d = opU(d, vec2(\n            sdCappedCone(-p.yxz+vec3(0,-0.75,0), 1.75, 0.55, 0.4),\n            p.x > -2.0 ? PEN_PLASTIC : PEN_METAL\n        )\n    );\n    // Bump at end of barrel\n    d = opSmoothUnion(\n        d,\n        vec2(\n            sdCylinder((p-vec3(-2.5,0,0)).yxz, vec2(0.45,0.05)),\n        \tPEN_METAL),\n        0.1\n    );\n    d = opU(d, sdPenNip(vec3(-p.x-2.5,p.yz)));\n    return d;\n}\n\n\nvec2 sdNotebook( vec3 p )\n{\n    float thickness = 1.0-notebookDispl(p);\n    vec2 d = vec2(sdBox(p, vec3(21.0,29.7,thickness)/2.0),\n                  abs(p.z)> thickness*0.5 - 0.1 ? BOOK_COVER : BOOK_PAGES );\n    \n    vec3 q = p;\n    q.x += 10.5;\n    q.y -= clamp(round(q.y), -14.0, 14.0);\n    q.z -= 0.2;\n    float ring = sdTorus(q, vec2(0.7,0.1));\n    d = opI(d, vec2(0.1-ring, BOOK_PAGES));\n    d = opU(d, vec2(ring, BOOK_RINGS));\n    return d;\n}\n\n","name":"Common","description":"","type":"common"}]}