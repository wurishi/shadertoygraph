{"ver":"0.1","info":{"id":"tlyyRG","date":"1618852653","viewed":45,"name":"dvg_Circle_2","username":"david4jsus","description":"Learning how to make circles, but better with functions.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["circle","function","smoothstep"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Create a circle\nfloat Circle (vec2 uv, vec2 position, float radius, float blur) {\n\n    // Distance from (0, 0)\n    float d = length (uv - position);\n    \n    // Make output color be distance from (0, 0)\n    float c = d;\n    \n    // Using smoothstep(a,b,c) will smoothly interpolate from a to b along the input c\n    c = smoothstep (radius, radius - blur, d);\n    \n    // Return whether the current pixel is in this circle (color value)\n    return c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Offset uv coords so that (0, 0) is center of view\n    uv -= 0.5;\n    \n    // Fix view distortion (adjust aspect ratio on the x axis of uv)\n    uv.x *= iResolution.x / iResolution.y;\n\n    // Color\n    vec3 col = vec3 (1.0, 1.0, 0.0);\n\n    // Create circle\n    // (clamping in each operation because we don't want the result to be higher than 1\n    // or lower than 0, this will mess with following operations)\n    float c = Circle (uv, vec2 (0.2, -0.1), 0.2, 0.01);\n    c = clamp (c + Circle (uv, vec2 (-0.2, 0.1), 0.3, 0.02), 0.0, 1.0);\n    c = clamp (c - Circle (uv, vec2 (0.0, 0.0), 0.1, 0.01), 0.0, 1.0);\n\n    // Output to screen\n    fragColor = vec4 (vec3 (c) * col, 1.0);\n}","name":"Image","description":"","type":"image"}]}