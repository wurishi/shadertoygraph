{"ver":"0.1","info":{"id":"msXfDr","date":"1688626162","viewed":207,"name":"SIX Shaders in 492 chars","username":"GregRostami","description":"SIX shaders squeezed into 492 chars (with wipe transitions) ... That's an average of 82 chars per shader!!\nThanks to Smake's amazing DigEggs shader:\n[url]https://www.shadertoy.com/view/wdlfDH[/url]\nLet me know if this does not work on your computer.\n","likes":12,"published":3,"flags":64,"usePreview":1,"tags":["raymarching","short","golf","multiple"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsX3Rn","filepath":"/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","previewfilepath":"/media/ap/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"MdcGDr","filepath":"https://soundcloud.com/the-flying-camel/iaso-tomita-debussy-arabesque","previewfilepath":"https://soundcloud.com/the-flying-camel/iaso-tomita-debussy-arabesque","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// SIX shaders squeezed into 492 chars ... That's an average of 82 chars per shader!!\n// I tried to combine shaders together in a way that saves chars and embed multiple \n// calculations in one loop for greater efficiency.\n\n// 492 chars - Master Fabrice eradicated 3 chars!\nvoid mainImage (out vec4 O, vec2 u)\n{  \n    vec3 m, r, o, C = vec3(u/=iResolution.x, 1); \n    float t = iTime, c = fract (.04*(t-u.x)), i;\n    O *= i;\n    r.z = t;\n    for ( ++o.y; i++<98.; o += C * (length (cos (o + t)) - .3))\n        m.xy = .55 - mat2(-m.y,m.x,m)*m.yx+(u-.4)*cos(.3*t),\n        r += C*(length(fract(r)-.5)-.2);\n    u -= .4;\n    for (ivec4 b; (b.x^b.y^b.z)%99 > b.z-7; )\n        b = ivec4 ( t*vec2(2,4) + 6.*u*O.a, O+=.1 );\n    O.rgb =\n        c < .2 ? o/50.\n      : c < .3 ? max ( u = fract( u/dot(u,u)-t ), u.x-u ).yyy\n      : c < .5 ? m\n      : c < .7 ? fract(r*9.) - .1*(r.z-t)\n      : ( c < .8 ? texture(iChannel1, vec2(t + .3/length(u), atan(u.y, u.x)/3.14))\n      :  O/74.).rgb;\n}\n\n\n// 495 chars - Greg Rostami's best version\n/*\nvoid mainImage (out vec4 o, vec2 u)\n{\n    u /= iResolution.x;\n    float t = iTime, c = fract (.03*(t-u.x));\n    vec4 x,m,r,C = vec4(u, 1, 0); o *= x;\n    r.z = t;\n    for ( ++o.y; o.a++<98.; o += C * (length (cos (o.xyz + t)) - .3))\n        m.xy = .55 - mat2(-m.y,m.x,m)*m.yx+(u-.4)*cos(.3*t),\n        r += C*(length(fract(r.xyz)-.5)-.2);\n    u -= .4;\n    for (ivec4 b; (b.x^b.y^b.z)%99 > b.z-7; )\n        b = ivec4 ( t*vec2(2,4) + 6.*u*x.a, x+=.1 );\n    o = c < .2 ? o/50.\n      : c < .3 ? max ( u = fract( u/dot(u,u)-t ), u.x-u ).yyyy\n      : c < .4 ? texture( iChannel1, vec2(t + .3/length(u), atan(u.y, u.x)/3.14) )\n      : c < .6 ? m\n      : c < .8 ? fract(r*9.) - .1*(r.z-t)\n      : x/74.;\n}\n*/","name":"Image","description":"","type":"image"}]}