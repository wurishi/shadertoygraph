{"ver":"0.1","info":{"id":"XXcSzS","date":"1719182615","viewed":59,"name":"~Prismic Energetic Light Waves~","username":"EleotleCram","description":"Light waves with hues and amplitudes linked to audio frequency bins, creating a dynamic prism effect.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["line"],"hasliked":0,"parentid":"ctyyR3","parentname":"Energetic Light Waves"},"renderpass":[{"inputs":[{"id":"4sXGzn","filepath":"/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3","previewfilepath":"/media/ap/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define S smoothstep\n\nvec3 hsv2rgb(vec3 c) {\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n// Function to draw a line with wave-like motion\nvec4 Line(vec2 uv, float speed, float height, vec3 col, float frequencyAmplitude, float baseAmplitude) {\n\t// Scale with frequency amplitude but when baseAmplitude is low, scale to around 0.3\n    float waveAmplitude = ((1.0 - baseAmplitude) * 0.3) + (baseAmplitude * 1.6 * frequencyAmplitude);\n    \n    // Modulate uv.y with sine wave based on time, speed, height, and frequency amplitude\n    uv.y += S(1., 0., abs(uv.x)) * sin(iTime * speed + uv.x * height) * waveAmplitude;\n\n    float lineThickness = 0.016;\n    col = clamp(col * 1.9, 0.0, 1.0);\n\n    // Draw the line\n    return vec4(S(.06 * S(.2, .9, abs(uv.x)), 0., abs(uv.y) - lineThickness) * col, 1.0) * S(1.1, 0.3, abs(uv.x));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 p = uv * 2. - 1.;\n    p.x *= iResolution.x / iResolution.y;\n\n    vec3 col = vec3(0.0);\n\n    // Calculate the total amplitude of all frequencies\n    float totalAmplitude = 0.0;\n    for (float i = 0.; i <= 6.; i += 1.) {\n        float t = i / 6.;\n        totalAmplitude += texture(iChannel0, vec2(t, 0.1)).x;\n    }\n    totalAmplitude /= 7.0; // Normalize the total amplitude\n\n    // Loop to draw multiple lines with different frequency amplitude bins\n    for (float i = 0.; i <= 6.; i += 1.) {\n        float t = i / 6.;\n        float frequencyAmplitude = texture(iChannel0, vec2(t, 0.1)).x; // Sample amplitude for line\n        float hue = t; // Map t to hue (0 to 1)\n        vec3 lineColor = hsv2rgb(vec3(hue, 1.0, 1.0)); // Convert HSV to RGB\n        col += Line(p, 1. + t, 4. + t, lineColor, frequencyAmplitude, totalAmplitude).rgb;\n    }\n\n    col /= 2.3; // Adjust overall color intensity\n\n    fragColor = vec4(col, 1.0); // Output final color\n}\n","name":"Image","description":"","type":"image"}]}