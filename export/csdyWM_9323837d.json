{"ver":"0.1","info":{"id":"csdyWM","date":"1698098929","viewed":21,"name":"thoth","username":"dqvid","description":"?","likes":0,"published":1,"flags":48,"usePreview":0,"tags":["3drenderer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define RAM_SIZE 128.0\n\nfloat remap01(float a, float b, float c) {\n    return (c-a)/(b-a);\n}\n\n// Clokwise Rotation Matrices\nvec3 Xrm(vec3 v, float t) {\n    return v*mat3(\n        1, 0, 0,\n        0, cos(iTime), sin(iTime),\n        0, sin(iTime), cos(iTime));\n}\n    \nvec3 Yrm(vec3 v, float t) {\n    return v*mat3(\n        cos(t), 0, sin(t),\n        0, 1, 0,\n        sin(t), 0, cos(t)\n    );\n}\n\nvec3 Zrm(vec3 v, float t) {\n    return v*mat3(\n        cos(iTime), sin(iTime), 0,\n        -sin(iTime), cos(iTime), 0,\n        0, 0, 1);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Camera\n    vec2 uv = (fragCoord-iResolution.xy*.5)/iResolution.y;\n    vec3 col = vec3(0);\n    \n    vec3 ro = vec3(-1, uv);\n    vec3 rd = normalize(vec3(1, 0, 0));\n    \n    // Sphere\n    vec4 sphere = vec4(0, .5*iResolution.x/iResolution.y, 0, .025);\n    \n    sphere.yz = (texture(iChannel0, vec2(0)).yz)/iResolution.y;\n    \n    float t = dot(sphere.xyz - ro, rd);\n    vec3 r = ro+rd*t;\n    \n    float y = length(sphere.xyz - r);\n    \n    if (y < sphere.w) {\n        col = vec3(1);\n    }\n    \n    // Vertex 1\n    float ps = .5*.5;\n    \n    vec3 i = Xrm(normalize(vec3(0,1,0)), iTime);\n    vec3 j = Yrm(normalize(vec3(0,0,1)), iTime);\n    \n    vec3 po = vec3(0,0,0);\n    vec3 pd = normalize(cross(i,j));\n    \n    t = dot(po-ro, pd)/dot(rd, pd);\n    r = rd*t+ro;\n    \n    vec3 l = r-po;\n    \n    if (abs(dot(l, i)) < ps && abs(dot(l, j)) < ps) col = vec3(length(r));\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define RAM_SIZE 128.\n\nint up = 87;\nint down = 83;\nint left = 65;\nint right = 68;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.x;\n    vec4 col = texture(iChannel1, uv);\n    float aspect = iResolution.x/iResolution.y;\n    \n    if(uv.x*RAM_SIZE < 1.) {\n        vec2 velocity = vec2(0);\n        \n        if (texelFetch( iChannel0, ivec2(left, 0), 0 ).x > .5) velocity.x -= 1.;\n        if (texelFetch( iChannel0, ivec2(right, 0), 0 ).x > .5) velocity.x += 1.;\n        if (texelFetch( iChannel0, ivec2(up, 0), 0 ).x > .5) velocity.y += 1.;\n        if (texelFetch( iChannel0, ivec2(down, 0), 0 ).x > .5) velocity.y -= 1.;\n        \n        vec2 fieldSize = iResolution.xy*.5 -50.;\n        \n        col.yz += velocity*7.5;\n        \n        col.y = clamp(col.y, -fieldSize.x, fieldSize.x);\n        col.z = clamp(col.z, -fieldSize.y, fieldSize.y);\n    }\n    \n    fragColor = col;\n}","name":"Buffer A","description":"","type":"buffer"}]}