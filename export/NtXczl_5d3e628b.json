{"ver":"0.1","info":{"id":"NtXczl","date":"1648672514","viewed":62,"name":"CG_assignment_LVUB0T","username":"l_atesz","description":"CG assignment","likes":6,"published":1,"flags":48,"usePreview":0,"tags":["raycast"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    fragColor = 2.0f * texelFetch(iChannel0, ivec2(fragCoord), 0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":2,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const int spheresNo = 2;\nSphere spheres[spheresNo];\n\nconst int planeNo = 1;\nPlane planes[planeNo];\n\nconst int triangleNo = 1+2;\nTriangle triangles[triangleNo];\n\nconst int pinNo = 12;\nPin pins[pinNo];\n\n// ---- CAMERA and EVENTs ----\n// Common key codes (WASD instead of arrows)\n\nconst int KeyLeft  = 65;\nconst int KeyRight = 68;\nconst int KeyUp    = 87;\nconst int KeyDown  = 83;\n\nconst vec3 red = vec3(1.,0.,0.);\nconst vec3 green = vec3(0.2,0.5,0.2);\nconst vec3 blue = vec3(0.,0.,1.);\nconst vec3 white = vec3(1.,1.,1.);\nconst vec3 gray = vec3(0.2,0.2,0.2);\nconst vec3 brown = vec3(0.4,0.2,0.2);\n    \nconst Mat defaultMat = Mat(red,green,blue);\nconst Mat sphereMat = Mat(blue, green, red);\nconst Mat pinMat = Mat(white,white,white);\nconst Mat floorMat = Mat(brown,white,white);\n\n#define isKeyHeld(k)  (texelFetch(iChannel1, ivec2(k,0), 0).x > 0.)\n\nconst vec3 EyeStartPosition = vec3(-20.5,10.,15.);\n\nvec3 Lights[2];\n\nRay Camera(vec2 fragCoord, out vec3 eye, out vec2 data2)\n{\n    /*\n        We will use the first 2 pixels of the buffer to store the information we need.\n        Every pixel contains 4 channels (floats), for RGBA. We can exploit this in the following way:\n            pixel0 = (empty, cameraX, cameraY, cameraZ)\n            pixel1 = (empty, empty, U, V)\n        where \n            cameraX, cameraY and cameraZ describe the position of the camera respectively\n            U,V give the current rotation of the camera in spherical coordinates\n\t*/\n    \n    // Ray generation\n    eye = texelFetch(iChannel0, ivec2(0,0), 0).yzw+EyeStartPosition;\t\t// camera position\n    data2 = texelFetch(iChannel0, ivec2(1,0), 0).zw;\t// spherical coordinates\n    vec2 uv\t= abs(data2);\n    \n   \tif(iMouse.z>0. || data2.x >= 0.)\t//mouse held or was held last frame\n        uv += (abs(iMouse.zw)-abs(iMouse.xy))*0.01;\n    \n    vec3 w = vec3(cos(uv.x)*cos(-uv.y),\n                  \t\t\tsin(-uv.y),\n                  sin(uv.x)*cos(-uv.y));\n    vec3 u = normalize(cross(vec3(0,1,0),w));\n\tvec3 v = cross(w,u);\n    \n    vec2 px = (fragCoord/iResolution.xy*2.-1.)*1.*normalize(iResolution.xy);\n    \n    // Keyboard and mouse handling:\n\tfloat speed = 0.2;\n    if (isKeyHeld(KeyLeft )) eye -= u*speed;\n    if (isKeyHeld(KeyRight)) eye += u*speed;\n    if (isKeyHeld(KeyUp   )) eye += w*speed;\n    if (isKeyHeld(KeyDown )) eye -= w*speed;\n    \n    if(iMouse.z>=0.)\t\t//mouse held\n        data2 = abs(data2.xy);\n\telse if(data2.x >= 0.)\t//mouse released\n        data2 = -mod(uv,2.*pi);\n    \n    // Ray generation\n    return Ray(eye,\t\t\t\t\t\t\t//V\n               0.5,\t\t\t\t\t\t\t//minT\n               normalize(w+px.x*u+px.y*v),\t//P\n               500.);\t\t\t\t\t\t//maxT\n}\n\n// ---- MAIN ----\n\nconst float maxT = 1000.0;\n\nTraceResult intersectSphere(Ray ray, Sphere s)\n{\n    vec3 p0c = ray.p0 - s.c;\n    float a = dot(ray.v, ray.v);\n    float b = 2.0 * dot(p0c, ray.v);\n    float c = dot(p0c,p0c) - s.r*s.r;\n    float discriminant = b*b - 4.0*a*c;\n    if(discriminant < 0.0)\n        return TraceResult(vec3(0),ray.tmax, s.mat); // no intersection\n    float sqd = sqrt(discriminant);\n    float numerator = -b - sqd;\n    if(numerator < 0.0)\n        numerator = -b + sqd;\n    float t = 0.5 * numerator / a;\n    vec3 p = ray.p0 + t * ray.v;\n    vec3 normal = normalize(p - s.c);\n    return TraceResult(normal, t, s.mat);\n}\n\nTraceResult intersectPlane(Ray ray, Plane plane)\n{\n    float t = dot(plane.q0-ray.p0,plane.n)/dot(ray.v,plane.n);\n    return TraceResult(plane.n,t, plane.mat);\n}\n\nTraceResult intersectTriangle(Ray ray, Triangle triangle)\n{\n    vec3 ab = triangle.b - triangle.a;\n    vec3 ac = triangle.c - triangle.a;\n    vec3 ap = ray.p0 - triangle.a;\n    vec3 f = cross(ray.v, ac);\n    vec3 g = cross(ap,ab);\n    vec3 B = vec3(dot(g,ac),dot(f,ap),dot(g,ray.v));\n    vec3 tuv = 1./dot(f,ab) * B;\n    \n    // if any of t, u, v, 1-u-v are negative -> no intersection\n    float t = tuv.x;\n    float u = tuv.y;\n    float v = tuv.z;\n    \n    vec3 normal = -normalize(cross(triangle.a - triangle.b,triangle.b - triangle.c));\n    \n    if(dot(normal,ray.v) > 0.)\n        normal = -normal;\n    \n    if(u < 0. || v < 0. || 1.-u-v < 0.)    \n        return TraceResult(normal,ray.tmax, triangle.mat);\n    else\n        return TraceResult(normal, t, triangle.mat);\n}\nTraceResult raycast(Ray ray)\n{\n    TraceResult res = TraceResult(vec3(0), ray.tmax, defaultMat);\n    for(int i = 0; i < spheresNo; ++i)\n    {\n        TraceResult res2 = intersectSphere(ray, spheres[i]);\n        if(res2.t < ray.tmax && res2.t > ray.tmin && res2.t < res.t){\n            res = res2;\n        }\n    }\n    for(int i = 0; i < planeNo; ++i)\n    {\n        TraceResult res2 = intersectPlane(ray, planes[i]);\n        if(res2.t < ray.tmax && res2.t > ray.tmin && res2.t < res.t){\n            res = res2;\n        }\n    }\n    for(int i = 0; i < triangleNo; ++i)\n    {\n        TraceResult res2 = intersectTriangle(ray, triangles[i]);\n        if(res2.t < ray.tmax && res2.t > ray.tmin && res2.t < res.t){\n            res = res2;\n        }\n    }\n    \n    for(int j = 0; j < pinNo; ++j)\n    {\n        Pin pin = pins[j];\n        for(int i = 0; i < 3; ++i)\n        {\n            TraceResult res2 = intersectTriangle(ray, pin.triangles[i]);\n            if(res2.t < ray.tmax && res2.t > ray.tmin && res2.t < res.t){\n                res = res2;\n            }\n        }\n    }\n    return res;\n}\n\n\nvec4 missColor(Ray ray)\n{\n    return vec4(texture(iChannel2, ray.v).xyz,1.);\n}\nvec4 hitColor(Ray ray, TraceResult tr)\n{\n    vec3 p = ray.p0 + ray.v*tr.t;\n    vec3 n = tr.n;\n    \n    vec3 lightPos=vec3(-10.,8.,7.);    \n    \n    vec3 light2Pos=vec3(sin(iTime)*20.f,8.,cos(iTime)*20.f); \n    \n    Lights[0] = lightPos;\n    Lights[1] = light2Pos;\n    \n    vec3 col = vec3(0);         // remains 0 if in shadow\n    \n    for(int i = 0; i < 2; i++) {\n        vec3 l = Lights[i]-p;\n        float lightDist = length(l);\n        l /= lightDist; // normalized direction to the light\n\n        Ray shadowray = Ray(p+0.001*n, 0.001, l, lightDist);\n                          /*     p0  , tmin , v,    tmax  */\n        TraceResult res = raycast(shadowray);\n\n        if(res.t==shadowray.tmax)\n        {\n            vec3 v = -ray.v;\n\n            //diffuse\n            float costheta = max(dot(n,l),0.);\n            vec3 k_d = tr.mat.diffuse_colour;\n\n            //specular\n            vec3 toLight = normalize(lightPos - p);\n            vec3 toEye = -ray.v;\n            vec3 k_s = tr.mat.specular_colour;\n\n            vec3 h = normalize(toLight+toEye);\n            float si = pow(clamp(dot(h,n),0.,1.),100.);\n\n            //sum\n            col += (k_d + si*k_s)*costheta/pi;\n        }\n    }   \n    \n    return vec4(col,1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    // Description of 2 spheres\n    float ballSpeed = 100.f*sin(iTime*2.f)+105.f;\n    spheres[0] = Sphere(vec3(-ballSpeed,1.9, ballSpeed+2.5f), 2.f,sphereMat);    \n    planes[0] = Plane(vec3(0), normalize(vec3(0,1,0)),floorMat);   \n    \n    float pinSize = 2.;\n    \n    // Back row of pins\n    pins[0] = createPin(vec3(0.,0.,0.), 4., pinSize, false, pinMat);\n    pins[1] = createPin(vec3(0.5,5.,0.5), 2., 1., true, pinMat);\n    \n    pins[2] = createPin(vec3(-3.,0.,-3.), 4., pinSize, false, pinMat);\n    pins[3] = createPin(vec3(-2.5,5.,-2.5), 2., 1., true, pinMat);\n    \n    pins[4] = createPin(vec3(3.,0.,3.), 4., pinSize, false, pinMat);\n    pins[5] = createPin(vec3(3.5,5.,3.5), 2., 1., true, pinMat);\n    \n    // Middle row\n    pins[6] = createPin(vec3(-0.5,0.,3.0), 4., pinSize, false, pinMat);\n    pins[7] = createPin(vec3(0.0,5.,3.5), 2., 1., true, pinMat);\n    \n    pins[8] = createPin(vec3(-3.0,0.,0.5), 4., pinSize, false, pinMat);\n    pins[9] = createPin(vec3(-2.5,5.,1.0), 2., 1., true, pinMat);\n    \n    pins[10] = createPin(vec3(-3.5,0.,3.5), 4., pinSize, false, pinMat);\n    pins[11] = createPin(vec3(-3.0,5.,4.0), 2., 1., true, pinMat);  \n\n    vec3 eye;\n    vec2 data;                    // this will be saved into first two pixels\n    Ray ray = Camera(fragCoord, eye, data); // Generate ray from pixel\n    \n    TraceResult result = raycast(ray);      // Raycast\n    \n    if(ray.tmax<=result.t)\n        fragColor = missColor(ray);    \n    else\n        fragColor = hitColor(ray, result);\n\n    vec4 prev = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    fragColor = 0.3*prev + 0.7*fragColor;   // Motion blur\n    fragColor.w = result.t;\n\n    // First two pixels are reserved\n    if(fragCoord.x == 0.5 && fragCoord.y == 0.5) // pixel (0,0)\n        fragColor.yzw = eye-EyeStartPosition;\n    if(fragCoord.x == 1.5 && fragCoord.y == 0.5) //pixel (1,0)\n        fragColor.zw = data;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"const float pi = 3.1415926535897932384626433832795;\n\nstruct Mat {\n    vec3 diffuse_colour;\n    vec3 specular_colour;\n    vec3 emission;\n};\n\nstruct Sphere {\n    vec3 c;    // center\n    float r;   // radius\n    Mat mat;\n};\n\nstruct Plane {\n    vec3 q0;    // any point on the plane\n    vec3 n;    // normal\n    Mat mat;\n};\n\nstruct Triangle {\n    vec3 a;    // a point\n    vec3 b;    // b point\n    vec3 c;    // c point\n    Mat mat;\n};\n\nstruct Pin {\n    Triangle[3] triangles;\n};\n\nPin createPin(vec3 pos, float height, float size, bool flip, Mat mat) {\n    vec3 top = vec3(pos.x+size/2.,pos.y+height,pos.z+size/2.);\n    \n    if(flip) {\n        top = vec3(pos.x+size/2.,pos.y-height,pos.z+size/2.);\n    }\n    \n    vec3 b = vec3(pos.x+size,pos.y,pos.z+size);\n    vec3 c = vec3(pos.x,pos.y,pos.z);\n    vec3 d = vec3(pos.x,pos.y,pos.z+size);\n    \n    Triangle t1 = Triangle(b, top, c, mat);\n    Triangle t2 = Triangle(top, c, d, mat);\n    Triangle t3 = Triangle(d, top, b, mat);\n    Triangle[3] tris = Triangle[] (t1,t2,t3);\n    return Pin(tris);\n}\n\nstruct Ray\n{\n\tvec3 p0;    // ray origin if tmin=0\n\tfloat tmin; // omit solutions t<tmin\n\tvec3 v;     // direction\n\tfloat tmax; // omit solutions t>tmax\n};\n\nstruct TraceResult\n{\n    vec3 n;  // Normal vector on surface\n    float t; // Distance taken on ray\n    Mat mat; // Material\n};","name":"Common","description":"","type":"common"}]}