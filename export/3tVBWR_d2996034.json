{"ver":"0.1","info":{"id":"3tVBWR","date":"1614955054","viewed":1334,"name":"C64 screen with NTSC filter","username":"BitOfGold","description":" Copied from here and there, this tries to emulate an NTSC TV signal, with artifacts, and the overall \"feel\" of the TV screen:\n- fringing (luma waves)\n- chroma subsampling\n- crosstalk (dot crawl)\n- phase shift between lines\n- interference","likes":34,"published":1,"flags":32,"usePreview":0,"tags":["scanlines","filter","tv","c64","crt","ntsc"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// DECODE NTSC AND CRT EFFECTS\n\nconst float XRES = 54.0 * 8.0;\nconst float YRES = 33.0 * 8.0;\n\n#define BRIGHTNESS 1.1\n#define SATURATION 0.6\n#define BLUR 0.7\n#define BLURSIZE 0.2\n#define CHROMABLUR 0.7\n#define CHROMASIZE 6.0\n#define SUBCARRIER 2.1\n#define CROSSTALK 0.1\n#define SCANFLICKER 0.33\n#define INTERFERENCE1 1.0\n#define INTERFERENCE2 0.001\n\nconst float fishEyeX = 0.1;\nconst float fishEyeY = 0.24;\nconst float vignetteRounding = 160.0;\nconst float vignetteSmoothness = 0.7;\n\n// ------------\n\n\n#define PI 3.14159265\n#define CHROMA_MOD_FREQ (0.4 * PI)\n\n#define IFRINGE (1.0 - FRINGE)\n\n// Fish-eye effect\nvec2 fisheye(vec2 uv) {\n    uv *= vec2(1.0+(uv.y*uv.y)*fishEyeX,1.0+(uv.x*uv.x)*fishEyeY);\n    return uv * 1.02;\n}\n\nfloat vignette(vec2 uv) {\n    uv *= 1.99;\n    float amount = 1.0 - sqrt(pow(abs(uv.x), vignetteRounding) + pow(abs(uv.y), vignetteRounding));\n    float vhard = smoothstep(0., vignetteSmoothness, amount);\n    return(vhard);\n}\n\n\nconst mat3 yiq2rgb_mat = mat3(\n    1.0, 1.0, 1.0,\n    0.956, -0.2720, -1.1060,\n    0.6210, -0.6474, 1.7046\n);\n\nvec3 yiq2rgb(vec3 yiq) {\n    return yiq2rgb_mat * yiq;\n}\n\n#define KERNEL 25\nconst float luma_filter[KERNEL] = float[KERNEL](0.0105,0.0134,0.0057,-0.0242,-0.0824,-0.1562,-0.2078,-0.185,-0.0546,0.1626,0.3852,0.5095,0.5163,0.4678,0.2844,0.0515,-0.1308,-0.2082,-0.1891,-0.1206,-0.0511,-0.0065,0.0114,0.0127,0.008);\nconst float chroma_filter[KERNEL] = float[KERNEL](0.001,0.001,0.0001,0.0002,-0.0003,0.0062,0.012,-0.0079,0.0978,0.1059,-0.0394,0.2732,0.2941,0.1529,-0.021,0.1347,0.0415,-0.0032,0.0115,0.002,-0.0001,0.0002,0.001,0.001,0.001);\n\nvec3 get(vec2 uv, float off, float d, float yscale) {\n    float offd = off * d;\n    return texture(iChannel0, uv + vec2(offd, yscale * offd)).xyz;\n}\n\nfloat peak(float x, float xpos, float scale) {\n    return clamp((1.0 - x) * scale * log(1.0 / abs(x - xpos)), 0.0, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    float scany = round(uv.y * YRES);\n    /*\n    fragColor = vec4(texture(iChannel0, uv).xyz, 1.0);\n    return;\n    */\n    uv -= vec2(0.5);\n    uv = fisheye(uv);\n    float vign = vignette(uv);\n    uv += vec2(0.5);\n    float mframe = float(iFrame % 2);\n    uv.y += mframe * 1.0 / YRES * SCANFLICKER;\n    \n    // interference\n    \n    float r = random(vec2(0.0, scany), iTime);\n    if (r > 0.995) {r *= 3.0;}\n    float ifx1 = INTERFERENCE1 * 2.0 / iResolution.x * r;\n    float ifx2 = INTERFERENCE2 * (r * peak(uv.y, 0.2, 0.2));\n    uv.x += ifx1 + -ifx2;\n    \n    // luma fringing and chroma blur\n    \n    float d = 1.0 / XRES * (BLURSIZE + ifx2 * 100.0);\n    vec3 lsignal = vec3(0.0);\n    vec3 csignal = vec3(0.0);\n    for (int i = 0; i < KERNEL; i++) {\n        float offset = float(i) - 12.0;\n        vec3 suml = get(uv, offset, d, 0.67);\n        lsignal += suml * vec3(luma_filter[i], 0.0, 0.0);\n        vec3 sumc = get(uv, offset, d * CHROMASIZE, 0.67);\n        csignal += sumc * vec3(0.0, chroma_filter[i], chroma_filter[i]);\n    }\n    vec3 sat = texture(iChannel0, uv).xyz;\n    vec3 lumat = sat * vec3(1.0, 0.0, 0.0);\n    vec3 chroat = sat * vec3(0.0, 1.0, 1.0);\n    vec3 signal = lumat * (1.0 - BLUR) + BLUR * lsignal + chroat * (1.0 - CHROMABLUR) + CHROMABLUR * csignal;\n\n    float scanl = 0.5 + 0.5 * abs(sin(PI * uv.y * YRES));\n    \n    // decoding chroma saturation and phase\n    \n    float lchroma = signal.y * SATURATION;\n    float phase = signal.z * 6.28318530718;\n    \n    signal.x *= BRIGHTNESS;\n    signal.y = lchroma * sin(phase);\n    signal.z = lchroma * cos(phase);\n    \n    // color subcarrier signal, crosstalk\n    \n    float chroma_phase = iTime * 60.0 * PI * 0.6667;\n    float mod_phase = chroma_phase + (uv.x + uv.y * 0.1) * CHROMA_MOD_FREQ * XRES * 2.0;\n    float scarrier = SUBCARRIER * lchroma;\n    float i_mod = cos(mod_phase);\n    float q_mod = sin(mod_phase);\n    \n    signal.x *= CROSSTALK * scarrier * q_mod + 1.0 - ifx2 * 30.0;\n    signal.y *= scarrier * i_mod + 1.0;\n    signal.z *= scarrier * q_mod + 1.0;\n    \n    vec3 out_color = signal;\n    vec3 rgb = vign * scanl * yiq2rgb(out_color);\n    fragColor = vec4(rgb, 1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// WRITING CHARACTER AND ATTRIBUTE BUFFER\n\n// based on https://www.shadertoy.com/view/Xs3XW4\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int x = int(fragCoord.x);\n    int y = int(fragCoord.y);\n    if (x > 54 && y > 33) discard;\n    \n    x -= 7;\n    y -= 4;\n    \n    int char = 32;\n    int fg = 14;\n    int bg = 6;\n    \n    if (x < 0 || x >= 40 || y < 0 || y >= 25) {\n        char = 0x60;\n        fg = 6;\n        bg = 14;\n    }\n    \n    if (y == 1) {\n        if (x == 4) {char = 42;}\n        if (x == 5) {char = 42;}\n        if (x == 6) {char = 42;}\n        if (x == 7) {char = 42;}\n\n        if (x == 9) {char = 0x03;}   // C\n        if (x == 10) {char = 0x0F;}  // O\n        if (x == 11) {char = 0x0D;}  // M\n        if (x == 12) {char = 0x0D;}  // M\n        if (x == 13) {char = 0x0F;}  // O\n        if (x == 14) {char = 0x04;}  // D\n        if (x == 15) {char = 0x0F;}  // O\n        if (x == 16) {char = 0x12;}  // R\n        if (x == 17) {char = 0x05;}  // E\n\n        if (x == 19) {char = 0x36;}  // 6\n        if (x == 20) {char = 0x34;}  // 4\n\n        if (x == 22) {char = 0x02;}  // B\n        if (x == 23) {char = 0x01;}  // A\n        if (x == 24) {char = 0x13;}  // S\n        if (x == 25) {char = 0x09;}  // I\n        if (x == 26) {char = 0x03;}  // C\n\n        if (x == 28) {char = 0x16;}  // V\n        if (x == 29) {char = 0x32;}  // 2\n\n        if (x == 31) {char = 42;}\n        if (x == 32) {char = 42;}\n        if (x == 33) {char = 42;}\n        if (x == 34) {char = 42;}\n    }\n    \n    if (y == 3) {    \n        if (x ==  1) {char = 0x36;}  // 6\n        if (x ==  2) {char = 0x34;}  // 4\n        if (x ==  3) {char = 0x0B;}  // K\n\n        if (x ==  5) {char = 0x12;}  // R\n        if (x ==  6) {char = 0x01;}  // A\n        if (x ==  7) {char = 0x0D;}  // M\n\n        if (x ==  9) {char = 0x13;}  // S\n        if (x == 10) {char = 0x19;}  // Y\n        if (x == 11) {char = 0x13;}  // S\n        if (x == 12) {char = 0x14;}  // T\n        if (x == 13) {char = 0x05;}  // E\n        if (x == 14) {char = 0x0D;}  // M\n        \n        if (x == 17) {char = 0x33;}  // 3\n        if (x == 18) {char = 0x38;}  // 8\n        if (x == 19) {char = 0x39;}  // 9\n        if (x == 20) {char = 0x31;}  // 1\n        if (x == 21) {char = 0x31;}  // 1\n\n        if (x == 23) {char = 0x02;}  // B\n        if (x == 24) {char = 0x01;}  // A\n        if (x == 25) {char = 0x13;}  // S\n        if (x == 26) {char = 0x09;}  // I\n        if (x == 27) {char = 0x03;}  // C\n\n        if (x == 29) {char = 0x02;}  // B\n        if (x == 30) {char = 0x19;}  // Y\n        if (x == 31) {char = 0x14;}  // T\n        if (x == 32) {char = 0x05;}  // E\n        if (x == 33) {char = 0x13;}  // S\n\n        if (x == 35) {char = 0x06;}  // F\n        if (x == 36) {char = 0x12;}  // R\n        if (x == 37) {char = 0x05;}  // E\n        if (x == 38) {char = 0x05;}  // E\n    }\n    \n    if (y == 5) {\n        if (x ==  0) {char = 0x12;}  // R\n        if (x ==  1) {char = 0x05;}  // E\n        if (x ==  2) {char = 0x01;}  // A\n        if (x ==  3) {char = 0x04;}  // D\n        if (x ==  4) {char = 0x19;}  // Y\n        if (x ==  5) {char = 0x2E;}  // Y\n    }\n    \n    //\n    if (y == 6 && x == 0 && int(iTime*2.0) % 2 == 0) {\n        bg = 14;\n    }\n    \n    if (x >= 0 && y > 7 && y < 15) {\n        int xx = x / 5;\n        if (xx == 0) {bg = 1;}\n        if (xx == 1) {bg = 7;}\n        if (xx == 2) {bg = 3;}\n        if (xx == 3) {bg = 5;}\n        if (xx == 4) {bg = 4;}\n        if (xx == 5) {bg = 2;}\n        if (xx == 6) {bg = 14;}\n        if (xx == 7) {bg = 0;}\n    }\n    \n    if (x > 3 && x < 36 && y > 16 && y < 23) {\n        bg = (x - 4) / 2;\n        if (y == 19) {\n            fg = 12;\n            char = 0x21;\n        }\n        if (y == 21) {\n            fg = 7;\n            char = 0x21;\n        }\n    }\n    \n    fragColor = vec4(char, fg, bg, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// RENDER VIDEO DATA\n\n// colors are from VICE, but with less contrast\n\nconst float XRES = 54.0 * 8.0;\nconst float YRES = 33.0 * 8.0;\n\n// ------------\n\nconst vec3 cols[] = vec3[](\n\n vec3(13.0/255.0, 13.0/255.0, 13.0/255.0),       // 0 black\n vec3(242.0/255.0, 242.0/255.0, 242.0/255.0),    // 1 white\n vec3(89.0/255.0, 39.0/255.0, 33.0/255.0),      // 2 red\n vec3(170.0/255.0, 220.0/255.0, 240.0/255.0),    // 3 cyan\n\n vec3(101.0/255.0, 27.0/255.0, 109.0/255.0),     // 4 purple\n vec3(120.0/255.0, 198.0/255.0, 112.0/255.0),    // 5 green\n vec3(54.0/255.0, 53.0/255.0, 152.0/255.0),      // 6 blue\n vec3(226.0/255.0, 229.0/255.0, 115.0/255.0),    // 7 yellow\n\n vec3(141.0/255.0, 85.0/255.0, 50.0/255.0),      // 8 orange\n vec3(89.0/255.0, 63.0/255.0, 13.0/255.0),       // 9 brown\n vec3(189.0/255.0, 110.0/255.0, 115.0/255.0),    // 10 pink\n vec3(80.0/255.0, 80.0/255.0, 80.0/255.0),       // 11 dark gray\n\n vec3(124.0/255.0, 124.0/255.0, 124.0/255.0),    // 12 gray\n vec3(165.0/255.0, 242.0/255.0, 156.0/255.0),    // 13 bright green\n vec3(114.0/255.0, 111.0/255.0, 224.0/255.0),    // 14 light blue\n vec3(128.0/255.0, 128.0/255.0, 128.0/255.0)     // 15 middle gray\n\n);\n\nvec3 col(int c) {\n    return cols[c];\n}\n\n// c64 font drawing from https://www.shadertoy.com/view/Xs3XW4\n\nhighp vec4 font2(int c) {\n  vec4 v = vec4(0);\n  v=mix(v, vec4(0x3c66, 0x6e6e, 0x6062, 0x3c00), step(-0.500, float(c)));\n  v=mix(v, vec4(0x183c, 0x667e, 0x6666, 0x6600), step(0.500, float(c)));\n  v=mix(v, vec4(0x7c66, 0x667c, 0x6666, 0x7c00), step(1.500, float(c)));\n  v=mix(v, vec4(0x3c66, 0x6060, 0x6066, 0x3c00), step(2.500, float(c)));\n  v=mix(v, vec4(0x786c, 0x6666, 0x666c, 0x7800), step(3.500, float(c)));\n  v=mix(v, vec4(0x7e60, 0x6078, 0x6060, 0x7e00), step(4.500, float(c)));\n  v=mix(v, vec4(0x7e60, 0x6078, 0x6060, 0x6000), step(5.500, float(c)));\n  v=mix(v, vec4(0x3c66, 0x606e, 0x6666, 0x3c00), step(6.500, float(c)));\n  v=mix(v, vec4(0x6666, 0x667e, 0x6666, 0x6600), step(7.500, float(c)));\n  v=mix(v, vec4(0x3c18, 0x1818, 0x1818, 0x3c00), step(8.500, float(c)));\n  v=mix(v, vec4(0x1e0c, 0xc0c, 0xc6c, 0x3800), step(9.500, float(c)));\n  v=mix(v, vec4(0x666c, 0x7870, 0x786c, 0x6600), step(10.500, float(c)));\n  v=mix(v, vec4(0x6060, 0x6060, 0x6060, 0x7e00), step(11.500, float(c)));\n  v=mix(v, vec4(0x6377, 0x7f6b, 0x6363, 0x6300), step(12.500, float(c)));\n  v=mix(v, vec4(0x6676, 0x7e7e, 0x6e66, 0x6600), step(13.500, float(c)));\n  v=mix(v, vec4(0x3c66, 0x6666, 0x6666, 0x3c00), step(14.500, float(c)));\n  v=mix(v, vec4(0x7c66, 0x667c, 0x6060, 0x6000), step(15.500, float(c)));\n  v=mix(v, vec4(0x3c66, 0x6666, 0x663c, 0xe00), step(16.500, float(c)));\n  v=mix(v, vec4(0x7c66, 0x667c, 0x786c, 0x6600), step(17.500, float(c)));\n  v=mix(v, vec4(0x3c66, 0x603c, 0x666, 0x3c00), step(18.500, float(c)));\n  v=mix(v, vec4(0x7e18, 0x1818, 0x1818, 0x1800), step(19.500, float(c)));\n  v=mix(v, vec4(0x6666, 0x6666, 0x6666, 0x3c00), step(20.500, float(c)));\n  v=mix(v, vec4(0x6666, 0x6666, 0x663c, 0x1800), step(21.500, float(c)));\n  v=mix(v, vec4(0x6363, 0x636b, 0x7f77, 0x6300), step(22.500, float(c)));\n  v=mix(v, vec4(0x6666, 0x3c18, 0x3c66, 0x6600), step(23.500, float(c)));\n  v=mix(v, vec4(0x6666, 0x663c, 0x1818, 0x1800), step(24.500, float(c)));\n  v=mix(v, vec4(0x7e06, 0xc18, 0x3060, 0x7e00), step(25.500, float(c)));\n  v=mix(v, vec4(0x3c30, 0x3030, 0x3030, 0x3c00), step(26.500, float(c)));\n  v=mix(v, vec4(0xc12, 0x307c, 0x3062, 0xfc00), step(27.500, float(c)));\n  v=mix(v, vec4(0x3c0c, 0xc0c, 0xc0c, 0x3c00), step(28.500, float(c)));\n  v=mix(v, vec4(0x18, 0x3c7e, 0x1818, 0x1818), step(29.500, float(c)));\n  v=mix(v, vec4(0x10, 0x307f, 0x7f30, 0x1000), step(30.500, float(c)));\n  v=mix(v, vec4(0x0, 0x0, 0x0, 0x0), step(31.500, float(c)));\n  v=mix(v, vec4(0x1818, 0x1818, 0x0, 0x1800), step(32.500, float(c)));\n  v=mix(v, vec4(0x6666, 0x6600, 0x0, 0x0), step(33.500, float(c)));\n  v=mix(v, vec4(0x6666, 0xff66, 0xff66, 0x6600), step(34.500, float(c)));\n  v=mix(v, vec4(0x183e, 0x603c, 0x67c, 0x1800), step(35.500, float(c)));\n  v=mix(v, vec4(0x6266, 0xc18, 0x3066, 0x4600), step(36.500, float(c)));\n  v=mix(v, vec4(0x3c66, 0x3c38, 0x6766, 0x3f00), step(37.500, float(c)));\n  v=mix(v, vec4(0x60c, 0x1800, 0x0, 0x0), step(38.500, float(c)));\n  v=mix(v, vec4(0xc18, 0x3030, 0x3018, 0xc00), step(39.500, float(c)));\n  v=mix(v, vec4(0x3018, 0xc0c, 0xc18, 0x3000), step(40.500, float(c)));\n  v=mix(v, vec4(0x66, 0x3cff, 0x3c66, 0x0), step(41.500, float(c)));\n  v=mix(v, vec4(0x18, 0x187e, 0x1818, 0x0), step(42.500, float(c)));\n  v=mix(v, vec4(0x0, 0x0, 0x18, 0x1830), step(43.500, float(c)));\n  v=mix(v, vec4(0x0, 0x7e, 0x0, 0x0), step(44.500, float(c)));\n  v=mix(v, vec4(0x0, 0x0, 0x18, 0x1800), step(45.500, float(c)));\n  v=mix(v, vec4(0x3, 0x60c, 0x1830, 0x6000), step(46.500, float(c)));\n  v=mix(v, vec4(0x3c66, 0x6e76, 0x6666, 0x3c00), step(47.500, float(c)));\n  v=mix(v, vec4(0x1818, 0x3818, 0x1818, 0x7e00), step(48.500, float(c)));\n  v=mix(v, vec4(0x3c66, 0x60c, 0x3060, 0x7e00), step(49.500, float(c)));\n  v=mix(v, vec4(0x3c66, 0x61c, 0x666, 0x3c00), step(50.500, float(c)));\n  v=mix(v, vec4(0x60e, 0x1e66, 0x7f06, 0x600), step(51.500, float(c)));\n  v=mix(v, vec4(0x7e60, 0x7c06, 0x666, 0x3c00), step(52.500, float(c)));\n  v=mix(v, vec4(0x3c66, 0x607c, 0x6666, 0x3c00), step(53.500, float(c)));\n  v=mix(v, vec4(0x7e66, 0xc18, 0x1818, 0x1800), step(54.500, float(c)));\n  v=mix(v, vec4(0x3c66, 0x663c, 0x6666, 0x3c00), step(55.500, float(c)));\n  v=mix(v, vec4(0x3c66, 0x663e, 0x666, 0x3c00), step(56.500, float(c)));\n  v=mix(v, vec4(0x0, 0x1800, 0x18, 0x0), step(57.500, float(c)));\n  v=mix(v, vec4(0x0, 0x1800, 0x18, 0x1830), step(58.500, float(c)));\n  v=mix(v, vec4(0xe18, 0x3060, 0x3018, 0xe00), step(59.500, float(c)));\n  v=mix(v, vec4(0x0, 0x7e00, 0x7e00, 0x0), step(60.500, float(c)));\n  v=mix(v, vec4(0x7018, 0xc06, 0xc18, 0x7000), step(61.500, float(c)));\n  v=mix(v, vec4(0x3c66, 0x60c, 0x1800, 0x1800), step(62.500, float(c)));\n  v=mix(v, vec4(0x0, 0xff, 0xff00, 0x0), step(63.500, float(c)));\n  v=mix(v, vec4(0x81c, 0x3e7f, 0x7f1c, 0x3e00), step(64.500, float(c)));\n  v=mix(v, vec4(0x1818, 0x1818, 0x1818, 0x1818), step(65.500, float(c)));\n  v=mix(v, vec4(0x0, 0xff, 0xff00, 0x0), step(66.500, float(c)));\n  v=mix(v, vec4(0x0, 0xffff, 0x0, 0x0), step(67.500, float(c)));\n  v=mix(v, vec4(0xff, 0xff00, 0x0, 0x0), step(68.500, float(c)));\n  v=mix(v, vec4(0x0, 0x0, 0xffff, 0x0), step(69.500, float(c)));\n  v=mix(v, vec4(0x3030, 0x3030, 0x3030, 0x3030), step(70.500, float(c)));\n  v=mix(v, vec4(0xc0c, 0xc0c, 0xc0c, 0xc0c), step(71.500, float(c)));\n  v=mix(v, vec4(0x0, 0xe0, 0xf038, 0x1818), step(72.500, float(c)));\n  v=mix(v, vec4(0x1818, 0x1c0f, 0x700, 0x0), step(73.500, float(c)));\n  v=mix(v, vec4(0x1818, 0x38f0, 0xe000, 0x0), step(74.500, float(c)));\n  v=mix(v, vec4(0xc0c0, 0xc0c0, 0xc0c0, 0xffff), step(75.500, float(c)));\n  v=mix(v, vec4(0xc0e0, 0x7038, 0x1c0e, 0x703), step(76.500, float(c)));\n  v=mix(v, vec4(0x307, 0xe1c, 0x3870, 0xe0c0), step(77.500, float(c)));\n  v=mix(v, vec4(0xffff, 0xc0c0, 0xc0c0, 0xc0c0), step(78.500, float(c)));\n  v=mix(v, vec4(0xffff, 0x303, 0x303, 0x303), step(79.500, float(c)));\n  v=mix(v, vec4(0x3c, 0x7e7e, 0x7e7e, 0x3c00), step(80.500, float(c)));\n  v=mix(v, vec4(0x0, 0x0, 0xff, 0xff00), step(81.500, float(c)));\n  v=mix(v, vec4(0x367f, 0x7f7f, 0x3e1c, 0x800), step(82.500, float(c)));\n  v=mix(v, vec4(0x6060, 0x6060, 0x6060, 0x6060), step(83.500, float(c)));\n  v=mix(v, vec4(0x0, 0x7, 0xf1c, 0x1818), step(84.500, float(c)));\n  v=mix(v, vec4(0xc3e7, 0x7e3c, 0x3c7e, 0xe7c3), step(85.500, float(c)));\n  v=mix(v, vec4(0x3c, 0x7e66, 0x667e, 0x3c00), step(86.500, float(c)));\n  v=mix(v, vec4(0x1818, 0x6666, 0x1818, 0x3c00), step(87.500, float(c)));\n  v=mix(v, vec4(0x606, 0x606, 0x606, 0x606), step(88.500, float(c)));\n  v=mix(v, vec4(0x81c, 0x3e7f, 0x3e1c, 0x800), step(89.500, float(c)));\n  v=mix(v, vec4(0x1818, 0x18ff, 0xff18, 0x1818), step(90.500, float(c)));\n  v=mix(v, vec4(0xc0c0, 0x3030, 0xc0c0, 0x3030), step(91.500, float(c)));\n  v=mix(v, vec4(0x1818, 0x1818, 0x1818, 0x1818), step(92.500, float(c)));\n  v=mix(v, vec4(0x0, 0x33e, 0x7636, 0x3600), step(93.500, float(c)));\n  v=mix(v, vec4(0xff7f, 0x3f1f, 0xf07, 0x301), step(94.500, float(c)));\n  v=mix(v, vec4(0x0, 0x0, 0x0, 0x0), step(95.500, float(c)));\n  v=mix(v, vec4(0xf0f0, 0xf0f0, 0xf0f0, 0xf0f0), step(96.500, float(c)));\n  v=mix(v, vec4(0x0, 0x0, 0xffff, 0xffff), step(97.500, float(c)));\n  v=mix(v, vec4(0xff00, 0x0, 0x0, 0x0), step(98.500, float(c)));\n  v=mix(v, vec4(0x0, 0x0, 0x0, 0xff), step(99.500, float(c)));\n  v=mix(v, vec4(0xc0c0, 0xc0c0, 0xc0c0, 0xc0c0), step(100.500, float(c)));\n  v=mix(v, vec4(0xcccc, 0x3333, 0xcccc, 0x3333), step(101.500, float(c)));\n  v=mix(v, vec4(0x303, 0x303, 0x303, 0x303), step(102.500, float(c)));\n  v=mix(v, vec4(0x0, 0x0, 0xcccc, 0x3333), step(103.500, float(c)));\n  v=mix(v, vec4(0xfffe, 0xfcf8, 0xf0e0, 0xc080), step(104.500, float(c)));\n  v=mix(v, vec4(0x303, 0x303, 0x303, 0x303), step(105.500, float(c)));\n  v=mix(v, vec4(0x1818, 0x181f, 0x1f18, 0x1818), step(106.500, float(c)));\n  v=mix(v, vec4(0x0, 0x0, 0xf0f, 0xf0f), step(107.500, float(c)));\n  v=mix(v, vec4(0x1818, 0x181f, 0x1f00, 0x0), step(108.500, float(c)));\n  v=mix(v, vec4(0x0, 0xf8, 0xf818, 0x1818), step(109.500, float(c)));\n  v=mix(v, vec4(0x0, 0x0, 0x0, 0xffff), step(110.500, float(c)));\n  v=mix(v, vec4(0x0, 0x1f, 0x1f18, 0x1818), step(111.500, float(c)));\n  v=mix(v, vec4(0x1818, 0x18ff, 0xff00, 0x0), step(112.500, float(c)));\n  v=mix(v, vec4(0x0, 0xff, 0xff18, 0x1818), step(113.500, float(c)));\n  v=mix(v, vec4(0x1818, 0x18f8, 0xf818, 0x1818), step(114.500, float(c)));\n  v=mix(v, vec4(0xc0c0, 0xc0c0, 0xc0c0, 0xc0c0), step(115.500, float(c)));\n  v=mix(v, vec4(0xe0e0, 0xe0e0, 0xe0e0, 0xe0e0), step(116.500, float(c)));\n  v=mix(v, vec4(0x707, 0x707, 0x707, 0x707), step(117.500, float(c)));\n  v=mix(v, vec4(0xffff, 0x0, 0x0, 0x0), step(118.500, float(c)));\n  v=mix(v, vec4(0xffff, 0xff00, 0x0, 0x0), step(119.500, float(c)));\n  v=mix(v, vec4(0x0, 0x0, 0xff, 0xffff), step(120.500, float(c)));\n  v=mix(v, vec4(0x303, 0x303, 0x303, 0xffff), step(121.500, float(c)));\n  v=mix(v, vec4(0x0, 0x0, 0xf0f0, 0xf0f0), step(122.500, float(c)));\n  v=mix(v, vec4(0xf0f, 0xf0f, 0x0, 0x0), step(123.500, float(c)));\n  v=mix(v, vec4(0x1818, 0x18f8, 0xf800, 0x0), step(124.500, float(c)));\n  v=mix(v, vec4(0xf0f0, 0xf0f0, 0x0, 0x0), step(125.500, float(c)));\n  v=mix(v, vec4(0xf0f0, 0xf0f0, 0xf0f, 0xf0f), step(126.500, float(c)));\n  return v;\n}\n\n\n\n\nhighp vec4 font(int c) {\n    if (c < 128) return font2(c);\n    return vec4(0xffff) - font2(c - 128);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 color;\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 sz = vec2(54.0, 33.0);\n\n    vec2 fb_pos = floor(uv * sz) + vec2(0.5, 0.5);\n    fb_pos.y = sz.y - fb_pos.y;\n    fb_pos /= iResolution.xy;\n    vec4 fb = texture(iChannel0, fb_pos);\n\n    highp vec4 char = font(int(fb.x));\n    vec2 p = mod(uv * sz * 8.0, 8.0);\n    int line = 7 - int(p.y);\n    highp float pixels = 0.0;\n    if (line == 0) pixels = char.x / 256.0;\n    if (line == 1) pixels = char.x;\n    if (line == 2) pixels = char.y / 256.0;\n    if (line == 3) pixels = char.y;\n    if (line == 4) pixels = char.z / 256.0;\n    if (line == 5) pixels = char.z;\n    if (line == 6) pixels = char.w / 256.0;\n    if (line == 7) pixels = char.w;\n\n    if (mod(pixels * pow(2.0, floor(p.x)), 256.0) > 127.5) {\n        color = col(int(fb.y));\n    } else {\n        color = col(int(fb.z));\n    }\n    fragColor = vec4(color, 1.0);\n    \n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"// UPSCALE & ENCODE NTSC\n\nconst float XRES = 54.0 * 8.0;\nconst float YRES = 33.0 * 8.0;\n\nconst mat3 yiq_mat = mat3(\n    0.2989, 0.5959, 0.2115,\n    0.5870, -0.2744, -0.5229,\n    0.1140, -0.3216, 0.3114\n);\n\nvec3 rgb2yiq(vec3 col) {\n    return yiq_mat * col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 color = texture(iChannel0, uv).xyz;\n    \n    // ENCODE LUMA, CHROMA SUBCARRIER LEVEL, PHASE\n    \n    vec3 signal = rgb2yiq(color);\n    vec2 chroma = vec2(signal.y, signal.z);\n    float lchroma = length(chroma);\n    float phase = atan(signal.y, signal.z);\n    \n    float mscanl = mod(uv.y * YRES, 2.0);\n    phase += -0.3926991 + mscanl * 0.19634954; // 22.5 degrees phase shift between lines\n    \n    vec3 ocolor = vec3(signal.x, lchroma, phase / 6.28318530718);\n    \n    fragColor = vec4(ocolor, 1.0);\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"float hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat random(vec2 p, float t) {\n    return hash12((p * 0.152 + t * 1500. + 50.0));\n}\n","name":"Common","description":"","type":"common"}]}