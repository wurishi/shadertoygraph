{"ver":"0.1","info":{"id":"mtcyz8","date":"1698878134","viewed":94,"name":"Unit One Interim Submission","username":"akbenkov","description":"For Abertay MProf DES506 Resit Unit One Submission.\n\nDepth of field, Gaussian blur and rough/smooth metallic materials implemented as well as SDF objects. Still working on adding bloom and adding more materials + objects.","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["abertay"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float normpdf(in float x, in float sigma)\n{\n\treturn 0.39894*exp(-0.5*x*x/(sigma*sigma))/sigma;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const int mSize = 11;\n    const int kSize = (mSize-1)/2;\n    float kernel[mSize];\n    vec3 final_color = vec3(0.0);\n\n    float sigma = 10.0;\n    float Z = 0.0;\n    for (int j = 0; j <= kSize; ++j) {\n        kernel[kSize+j] = kernel[kSize-j] = normpdf(float(j), sigma);\n    }\n\n    for (int j = 0; j < mSize; ++j) {\n        Z += kernel[j];\n    }\n    \n    for (int i=-kSize; i <= kSize; ++i) {\n        for (int j=-kSize; j <= kSize; ++j) {\n            final_color += kernel[kSize+j]*kernel[kSize+i]*texture(iChannel0, (fragCoord.xy+vec2(float(i),float(j))) / iResolution.xy).rgb;\n\n        }\n    }\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 unblurredColor = texture(iChannel0, uv);\n\n    fragColor = vec4(mix(unblurredColor.rgb, final_color/(Z*Z), unblurredColor.a), 1.0);\n    \n    \n    \n    float vignette = smoothstep(1.75, 0.0, length((2.0 * uv) - vec2(1.0)));\n    fragColor = mix(vec4(0.0, 0.0, 0.1, 1.0), fragColor, vignette);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const int RAY_STEPS = 256;\nconst float HALF_PI = 3.14159 * 0.5;\nconst float PI = 3.14159 / 180.0;\nconst float FOCAL_LENGTH = 16.0;\nconst float FOCAL_RANGE = 16.0;\n\n#define LIGHT_POS vec3(5.0, 35, -1.0)\n#define LIGHT_AMBIENT vec3(0.2)\n#define LIGHT_DIFF vec3(0.5)\n#define LIGHT_SPEC vec3(1.0)\n\n\n#define FLOOR 0\n#define TALL_BOX 1\n#define SMALL_BOX 2\n#define ORB 3\n#define UNION 4\n\n\n\nstruct Intersection\n{\n    float t;\n    vec3 color;\n    vec3 p;\n    int object;\n};\n\n\nvec3 rotateX(vec3 p, float amt) {\n    return vec3(p.x, cos(amt) * p.y - sin(amt) * p.z, sin(p.y) + cos(p.z));\n}\n    \nvec3 rotateY(vec3 p, float a) {\n    return vec3(cos(a) * p.x + sin(a) * p.z, p.y, -sin(a) * p.x + cos(a) * p.z);\n}\n\nvoid raycast(vec2 uv, out vec3 dir, out vec3 eye, out vec3 ref) {\n    eye = vec3(0.0, 4.0, -20.0);\n    ref = vec3(0.0, 1.0, 0.0);\n    \n    float len = tan(3.14159 * 0.125) * distance(eye, ref);\n    vec3 H = normalize(cross(vec3(0.0, 1.0, 0.0), ref - eye));\n    vec3 V = normalize(cross(H, eye - ref));\n    V *= len;\n    H *= len * iResolution.x / iResolution.y;\n    vec3 p = ref + uv.x * H + uv.y * V;\n    dir = normalize(p - eye);\n}\n\n\nfloat box(vec3 p, vec3 b)\n{\n  return length(max(abs(p) - b, 0.0));\n}\n\nfloat sphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\n\nfloat plane( vec3 p, vec4 n )\n{\n  return dot(p,n.xyz) + n.w;\n}\n\nfloat opUnion( float d1, float d2 ) { return min(d1,d2); }\nfloat opSubtraction( float d1, float d2 ) { return max(-d1,d2); }\nfloat opIntersection( float d1, float d2 ) { return max(d1,d2); }\n\nfloat opSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); \n}\n\n\n\n\n#define FLOOR_SDF plane(pos, vec4(0.0, 1.0, 0.0, 2.5))\n#define TALL_BOX_SDF box(rotateY(pos + vec3(2, 0, -3), 27.5 * PI), 0.5 * vec3(3.0, 6.0, 3.0))\n#define SMALL_BOX_SDF box(rotateY(pos + vec3(-2, 1, 3.75), -17.5 * 3.14159 / 180.0), 0.5 * vec3(3.0, 3.0, 3.0))\n#define ORB_SDF sphere(pos + vec3(-4,1, -0.75), 2.0)\n#define ORB_U sphere(pos + vec3(4.5, -2.0, 3.75), 1.5)\n#define SMALL_BOX_U box(rotateY(pos + vec3(4.5, 1, 3.75), -17.5 * 3.14159 / 180.0), 0.5 * vec3(3.0, 3.0, 3.0))\n#define UNION_SDF opSmoothUnion(ORB_U, SMALL_BOX_U, 0.75)\n\nfloat sceneMap3D(vec3 pos)\n{\n    float t = FLOOR_SDF;\n    t = min(t, TALL_BOX_SDF);\n    t = min(t, SMALL_BOX_SDF);\n    t = min(t, ORB_SDF);\n    t = min(t, UNION_SDF);\n    return t;\n}\n\n\nvoid sceneMap3D(vec3 pos, out float t, out int obj)\n{ \n    t = FLOOR_SDF;\n    float t2;\n    obj = FLOOR;\n    if((t2 = TALL_BOX_SDF) < t) {\n        t = t2;\n        obj = TALL_BOX; \n    }\n    if((t2 = SMALL_BOX_SDF) < t) {\n        t = t2;\n        obj = SMALL_BOX; \n    }\n    if ((t2 = ORB_SDF) < t) {\n        t = t2;\n        obj = ORB;\n    } \n    if ((t2 = UNION_SDF) < t) {\n        t = t2;\n        obj = UNION;\n    }\n}\n\nvoid march(vec3 origin, vec3 dir, out float t, out int hitObj, vec3 lightPos)\n{\n    t = 0.001;\n    for(int i = 0; i < RAY_STEPS; ++i)\n    {\n        vec3 pos = origin + t * dir;\n    \tfloat m;\n        sceneMap3D(pos, m, hitObj);\n        if(m < 0.01)\n        {\n            return;\n        }\n        t += m;\n    }\n    t = -1.0;\n    hitObj = -1;\n}\n\nvec3 computeNormal(vec3 pos)\n{\n    vec3 epsilon = vec3(0.0, 0.001, 0.0);\n    return normalize( vec3( sceneMap3D(pos + epsilon.yxx) - sceneMap3D(pos - epsilon.yxx),\n                            sceneMap3D(pos + epsilon.xyx) - sceneMap3D(pos - epsilon.xyx),\n                            sceneMap3D(pos + epsilon.xxy) - sceneMap3D(pos - epsilon.xxy)));\n}\n\nstruct Material {\n    vec3 ambient;\n    vec3 diffuse;\n    vec3 specular;\n    float shininess;\n}; \n\nMaterial getMaterial(int hitObj) {\n    Material objMat;\n    switch(hitObj) {\n        case 0:\n        // Floor\n        objMat.ambient = vec3(0.24725,0.1995,0.0745);\n        objMat.diffuse = vec3(0.75164,0.60648,0.22648);\n        objMat.specular = vec3(0.628281,0.555802,0.366065);\n        objMat.shininess = 0.4;\n        break;\n        case 1:\n        // Tall box\n        objMat.ambient = vec3(0.1,0.18725,0.1745\t);\n        objMat.diffuse = vec3(0.396,0.74151,0.69102);\n        objMat.specular = vec3(0.297254,0.30829,0.306678);\n        objMat.shininess = 0.1;\n        break;\n        case 2:\n        // Small box\n        objMat.ambient = vec3(0.05375,0.05,0.06625);\n        objMat.diffuse = vec3(0.18275,0.17,0.22525);\n        objMat.specular = vec3(0.332741,0.328634,0.346435);\n        objMat.shininess = 0.3;\n        break;\n        case 3:\n        // Sphere\n        objMat.ambient = vec3(0.25);\n        objMat.diffuse = vec3(0.4);\n        objMat.specular = vec3(0.774597);\n        objMat.shininess = 0.6;\n        break;\n        case 4:\n        // Union\n        objMat.ambient = vec3(0.25);\n        objMat.diffuse = vec3(0.4);\n        objMat.specular = vec3(0.774597);\n        objMat.shininess = 0.6;\n        break;\n    }\n    return objMat;\n}\n\n\n\n\nIntersection sdf3D(vec3 dir, vec3 eye, vec3 lightPos)\n{\n    float t;\n    int hitObj;\n    march(eye, dir, t, hitObj, lightPos);\n    \n    if(t == -1.0) {\n        return Intersection(t, vec3(0.0, 0.0, 0.0), vec3(eye + 1000.0 * dir), -1);\n    }\n\n    vec3 isect = eye + t * dir;\n    vec3 nor = computeNormal(isect);\n    vec3 lightDir = normalize(lightPos - isect);\n    \n    Material material = getMaterial(hitObj);\n    \n    vec3 ambient = LIGHT_AMBIENT * material.ambient;\n    \n    float diff = max(dot(nor, lightDir), 0.0);\n    vec3 diffuse = LIGHT_DIFF * (diff * material.diffuse);\n    vec3 viewDir = normalize(eye - isect);\n    vec3 reflectDir = reflect(-lightDir, nor);  \n    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);\n    vec3 specular = LIGHT_SPEC * (spec * material.specular);\n        \n    vec3 finalCol = ambient + diffuse + specular;\n    \n    return Intersection(t, finalCol, isect, hitObj);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 uv2 = 2.0 * uv - vec2(1.0);\n    \n    \n    Intersection aaIsects[16];\n    vec3 dir, eye, ref;\n    int idx = 0;\n    for(float i = 0.0; i < 1.0; i += 0.25) {\n        for(float j = 0.0; j < 1.0; j += 0.25) {\n            raycast(uv2 + vec2(i, j) / iResolution.xy, dir, eye, ref);\n            aaIsects[idx++] = sdf3D(dir, eye, LIGHT_POS);\n        }\n    }\n    \n    float distAlongCamZ = abs(dot(normalize(ref - eye), (aaIsects[0].p - eye)));\n    float dofZ = min(1.0, abs(distAlongCamZ - FOCAL_LENGTH * cos(iTime * 0.4) * 3.14159 * 0.5) / FOCAL_RANGE);\n    dofZ = pow(dofZ, 0.5) ;\n    vec3 avgColor = vec3(0.0);\n    for(int i = 0; i < 16; ++i) {\n        avgColor += aaIsects[i].color;\n    }\n    avgColor *= 0.0625;\n  \n    fragColor = vec4(avgColor * step(0.0, aaIsects[0].t), dofZ);\n    float fogT = smoothstep(50.0, 100.0, distance(aaIsects[0].p, eye));\n    fragColor.rgb = mix(fragColor.rgb, vec3(0.0), fogT);\n    \n}","name":"Buffer A","description":"","type":"buffer"}]}