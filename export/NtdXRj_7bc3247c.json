{"ver":"0.1","info":{"id":"NtdXRj","date":"1639414392","viewed":240,"name":"Happy holidays 2021","username":"nebbul","description":"Happy holidays!","likes":14,"published":1,"flags":0,"usePreview":0,"tags":["christmas","tree","2021","holidays","hohoho"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// used this as base:\n// https://www.shadertoy.com/view/Xds3zN\n//\n// original license:\n// The MIT License\n// Copyright Â© 2013 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// A list of useful distance function to simple primitives. All\n// these functions (except for ellipsoid) return an exact\n// euclidean distance, meaning they produce a better SDF than\n// what you'd get if you were constructing them from boolean\n// operations.\n\n// List of other 3D SDFs: https://www.shadertoy.com/playlist/43cXRl\n//\n// and https://iquilezles.org/articles/distfunctions\n\n#if HW_PERFORMANCE==0\n#define AA 1\n#else\n#define AA 2   // make this 2 or 3 for antialiasing\n#endif\n#define PI 3.141592\n\n//------------------------------------------------------------------\n// snow from:\n// https://www.shadertoy.com/view/MscXD7\n#define _SnowflakeAmount 200\t// Number of snowflakes\n#define _BlizardFactor 0.1\t\t// Fury of the storm !\nfloat rnd(float x)\n{\n    return fract(sin(dot(vec2(x+47.49,38.2467/(x+2.3)), vec2(12.9898, 78.233)))* (43758.5453));\n}\n\nfloat drawCircle(vec2 uv, vec2 center, float radius)\n{\n    return 1.0 - smoothstep(0.0, radius, length(uv - center));\n}\n\n//------------------------------------------------------------------\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat dot2( in vec3 v ) { return dot(v,v); }\nfloat ndot( in vec2 a, in vec2 b ) { return a.x*b.x - a.y*b.y; }\n\nfloat sdSphere( vec3 p, float s )\n{\n    return length(p)-s;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n    vec3 d = abs(p) - b;\n    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\n// vertical\nfloat sdCone( in vec3 p, in vec2 c, float h )\n{\n    vec2 q = h*vec2(c.x,-c.y)/c.y;\n    vec2 w = vec2( length(p.xz), p.y );\n    \n\tvec2 a = w - q*clamp( dot(w,q)/dot(q,q), 0.0, 1.0 );\n    vec2 b = w - q*vec2( clamp( w.x/q.x, 0.0, 1.0 ), 1.0 );\n    float k = sign( q.y );\n    float d = min(dot( a, a ),dot(b, b));\n    float s = max( k*(w.x*q.y-w.y*q.x),k*(w.y-q.y)  );\n\treturn sqrt(d)*sign(s);\n}\n\nfloat sdOctahedron(vec3 p, float s)\n{\n    p = abs(p);\n    float m = p.x + p.y + p.z - s;\n\n    // exact distance\n    #if 0\n    vec3 o = min(3.0*p - m, 0.0);\n    o = max(6.0*p - m*2.0 - o*3.0 + (o.x+o.y+o.z), 0.0);\n    return length(p - s*o/(o.x+o.y+o.z));\n    #endif\n    \n    // exact distance\n    #if 1\n \tvec3 q;\n         if( 3.0*p.x < m ) q = p.xyz;\n    else if( 3.0*p.y < m ) q = p.yzx;\n    else if( 3.0*p.z < m ) q = p.zxy;\n    else return m*0.57735027;\n    float k = clamp(0.5*(q.z-q.y+s),0.0,s); \n    return length(vec3(q.x,q.y-s+k,q.z-k)); \n    #endif\n    \n    // bound, not exact\n    #if 0\n\treturn m*0.57735027;\n    #endif\n}\n\n//------------------------------------------------------------------\n\nvec2 opU( vec2 d1, vec2 d2 )\n{\n\treturn (d1.x<d2.x) ? d1 : d2;\n}\n\n//------------------------------------------------------------------\n\n#define ZERO (min(iFrame,0))\n\n//------------------------------------------------------------------\n\nvec2 Rotate2dVector(vec2 v, vec2 a) {\n\treturn vec2(a.x*v.x - a.y*v.y, a.y*v.x + a.x*v.y);\n}\nvec2 GetVector(vec2 v, float angle) {\n    float rad = angle * PI / 180.0;\n    vec2 a = vec2(cos(rad),sin(rad)); // how much to rotate vector, rotate as a circle\n    vec2 v_rot = Rotate2dVector(v, a);\n    return v_rot;\n}\nvec2 map( in vec3 pos )\n{\n    vec2 res = vec2( 1e10, 0.0 );\n    if( sdBox( pos-vec3(0.0,2,-1.0),vec3(0.35,2,2.5) ) < res.x )\n    {\n        // trunk and tree\n        res = opU( res, vec2( sdCone(        pos-vec3( 0.0,0.2,0), vec2(0.1,0.9),0.3 ), 1.5 ) );\n        res = opU( res, vec2( sdCone(        pos-vec3( 0.0,0.35,0), vec2(0.65,0.6),0.2 ), 2.5 ) );\n        res = opU( res, vec2( sdCone(        pos-vec3( 0.0,0.45,0), vec2(0.45,0.5),0.2 ), 2.5 ) );\n        res = opU( res, vec2( sdCone(        pos-vec3( 0.0,0.55,0), vec2(0.35,0.5),0.2 ), 2.5 ) );\n        res = opU( res, vec2( sdCone(        pos-vec3( 0.0,0.65,0), vec2(0.25,0.45),0.2 ), 2.5 ) );\n        res = opU( res, vec2( sdCone(        pos-vec3( 0.0,0.75,0), vec2(0.15,0.4),0.2 ), 2.5 ) );\n        \n        // balls\n        vec2 p = vec2(0.0, 0.16);\n        float h = 0.19;\n        float s = 0.0;\n        float spin = 45.0;\n        res = opU( res, vec2( sdSphere(     pos-vec3(p.x, h, p.y), 0.031 ), 3.1 ) );\n        p = GetVector(p, 90.0);\n        res = opU( res, vec2( sdSphere(     pos-vec3(p.x, h, p.y), 0.027 ), 3.2 ) );\n        p = GetVector(p, 90.0);\n        res = opU( res, vec2( sdSphere(     pos-vec3(p.x, h, p.y), 0.024 ), 3.3 ) );\n        p = GetVector(p, 90.0);\n        res = opU( res, vec2( sdSphere(     pos-vec3(p.x, h, p.y), 0.024 ), 3.5 ) );\n        \n        p = GetVector(vec2(0.0, 0.125), spin);\n        h = 0.29;\n        res = opU( res, vec2( sdSphere(     pos-vec3(p.x, h, p.y), 0.034 ), 3.6 ) );\n        p = GetVector(p, 90.0);\n        res = opU( res, vec2( sdSphere(     pos-vec3(p.x, h, p.y), 0.026 ), 3.7 ) );\n        p = GetVector(p, 90.0);\n        res = opU( res, vec2( sdSphere(     pos-vec3(p.x, h, p.y), 0.029 ), 3.8 ) );\n        p = GetVector(p, 90.0);\n        res = opU( res, vec2( sdSphere(     pos-vec3(p.x, h, p.y), 0.029 ), 3.9 ) );\n        \n        p = GetVector(vec2(0.0, 0.09), spin*2.0);\n        h = 0.40;\n        res = opU( res, vec2( sdSphere(     pos-vec3(p.x, h, p.y), 0.027 ), 3.15 ) );\n        p = GetVector(p, 120.0);\n        res = opU( res, vec2( sdSphere(     pos-vec3(p.x, h, p.y), 0.025 ), 3.25 ) );\n        p = GetVector(p, 120.0);\n        res = opU( res, vec2( sdSphere(     pos-vec3(p.x, h, p.y), 0.032 ), 3.35 ) );\n        \n        p = GetVector(vec2(0.0, 0.06), spin*3.0);\n        h = 0.50;\n        res = opU( res, vec2( sdSphere(     pos-vec3(p.x, h, p.y), 0.033 ), 3.45 ) );\n        p = GetVector(p, 120.0);\n        res = opU( res, vec2( sdSphere(     pos-vec3(p.x, h, p.y), 0.024 ), 3.55 ) );\n        p = GetVector(p, 120.0);\n        res = opU( res, vec2( sdSphere(     pos-vec3(p.x, h, p.y), 0.027 ), 3.65 ) );\n        \n        p = GetVector(vec2(0.0, 0.04), spin*4.0);\n        h = 0.6;\n        res = opU( res, vec2( sdSphere(     pos-vec3(p.x, h, p.y), 0.029 ), 3.75 ) );\n        p = GetVector(p, 120.0);\n        res = opU( res, vec2( sdSphere(     pos-vec3(p.x, h, p.y), 0.024 ), 3.85 ) );\n        p = GetVector(p, 120.0);\n        res = opU( res, vec2( sdSphere(     pos-vec3(p.x, h, p.y), 0.022 ), 3.95 ) );\n        \n        // top star\n        res = opU( res, vec2( sdOctahedron( pos-vec3(0.0,0.74,0.0), 0.06 ), 4.1 ) );\n        \n        // presents\n        res = opU( res, vec2( sdBox(         pos-vec3( 0.2, 0.05, 0.0), vec3(0.05,0.05,0.05) ), 3.42 ) );\n        res = opU( res, vec2( sdBox(         pos-vec3( 0.0, 0.05, 0.2), vec3(0.05,0.05,0.05) ), 3.12 ) );\n        res = opU( res, vec2( sdBox(         pos-vec3( -0.2, 0.05, 0.0), vec3(0.05,0.05,0.05) ), 3.33 ) );\n        res = opU( res, vec2( sdBox(         pos-vec3( 0.0, 0.05, -0.2), vec3(0.05,0.05,0.05) ), 3.79 ) );\n    }\n\n    return res;\n}\n\n// https://iquilezles.org/articles/boxfunctions\nvec2 iBox( in vec3 ro, in vec3 rd, in vec3 rad ) \n{\n    vec3 m = 1.0/rd;\n    vec3 n = m*ro;\n    vec3 k = abs(m)*rad;\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n\treturn vec2( max( max( t1.x, t1.y ), t1.z ),\n\t             min( min( t2.x, t2.y ), t2.z ) );\n}\n\nvec2 raycast( in vec3 ro, in vec3 rd )\n{\n    vec2 res = vec2(-1.0,-1.0);\n\n    float tmin = 1.0;\n    float tmax = 20.0;\n\n    // raytrace floor plane\n    float tp1 = (0.0-ro.y)/rd.y;\n    if( tp1>0.0 )\n    {\n        tmax = min( tmax, tp1 );\n        res = vec2( tp1, 1.0 );\n    }\n    //else return res;\n    \n    // raymarch primitives   \n    vec2 tb = iBox( ro-vec3(0.0,0.4,-0.5), rd, vec3(2.5,0.41,3.0) );\n    if( tb.x<tb.y && tb.y>0.0 && tb.x<tmax)\n    {\n        //return vec2(tb.x,2.0);\n        tmin = max(tb.x,tmin);\n        tmax = min(tb.y,tmax);\n\n        float t = tmin;\n        for( int i=0; i<70 && t<tmax; i++ )\n        {\n            vec2 h = map( ro+rd*t );\n            if( abs(h.x)<(0.0001*t) )\n            { \n                res = vec2(t,h.y); \n                break;\n            }\n            t += h.x;\n        }\n    }\n    \n    return res;\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat calcSoftshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n    // bounding volume\n    float tp = (0.8-ro.y)/rd.y; if( tp>0.0 ) tmax = min( tmax, tp );\n\n    float res = 1.0;\n    float t = mint;\n    for( int i=ZERO; i<24; i++ )\n    {\n\t\tfloat h = map( ro + rd*t ).x;\n        float s = clamp(8.0*h/t,0.0,1.0);\n        res = min( res, s*s*(3.0-2.0*s) );\n        t += clamp( h, 0.02, 0.2 );\n        if( res<0.004 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal( in vec3 pos )\n{\n#if 0\n    vec2 e = vec2(1.0,-1.0)*0.5773*0.0005;\n    return normalize( e.xyy*map( pos + e.xyy ).x + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx ).x + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy ).x + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx ).x );\n#else\n    // inspired by tdhooper and klems - a way to prevent the compiler from inlining map() 4 times\n    vec3 n = vec3(0.0);\n    for( int i=ZERO; i<4; i++ )\n    {\n        vec3 e = 0.5773*(2.0*vec3((((i+3)>>1)&1),((i>>1)&1),(i&1))-1.0);\n        n += e*map(pos+0.0005*e).x;\n      //if( n.x+n.y+n.z>100.0 ) break;\n    }\n    return normalize(n);\n#endif    \n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=ZERO; i<5; i++ )\n    {\n        float h = 0.01 + 0.12*float(i)/4.0;\n        float d = map( pos + h*nor ).x;\n        occ += (h-d)*sca;\n        sca *= 0.95;\n        if( occ>0.35 ) break;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 ) * (0.5+0.5*nor.y);\n}\n\n// https://iquilezles.org/articles/checkerfiltering\nfloat checkersGradBox( in vec2 p, in vec2 dpdx, in vec2 dpdy )\n{\n    // filter kernel\n    vec2 w = abs(dpdx)+abs(dpdy) + 0.001;\n    // analytical integral (box filter)\n    vec2 i = 2.0*(abs(fract((p-0.5*w)*0.5)-0.5)-abs(fract((p+0.5*w)*0.5)-0.5))/w;\n    // xor pattern\n    return 0.5 - 0.5*i.x*i.y;                  \n}\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvec3 render( in vec3 ro, in vec3 rd, in vec3 rdx, in vec3 rdy )\n{ \n    // background\n    vec3 col = vec3(0.7, 0.7, 0.9) - max(rd.y,0.0)*0.3;\n    \n    // raycast scene\n    vec2 res = raycast(ro,rd);\n    float t = res.x;\n\tfloat m = res.y;\n    if( m>-0.5 )\n    {\n        vec3 pos = ro + t*rd;\n        vec3 nor = (m<1.5) ? vec3(0.0,1.0,0.0) : calcNormal( pos );\n        vec3 ref = reflect( rd, nor );\n        \n        // material        \n        //col = 0.1 + 0.3*sin( m * 2.0 + vec3(0.0,1.0,2.0) );\n        //col = 0.1 + 0.3 * sin( m * 2.0 + vec3(0.0,1.0,2.0) );\n        if( m > 0.0 && m < 2.0) col = vec3(0.1,0.05,0.0); //trunk\n        if( m > 2.0 && m < 3.0) col = vec3(0,0.3,0); //tree segments\n        if( m > 3.0 && m < 4.0) col = pal( (m - 3.0) * PI * 2.0, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.0,0.33,0.67) );\n        if( m > 4.0 && m < 5.0) col = vec3(1.,0.5,0.0); //star\n        \n        float ks = 1.0;\n        \n        if( m<1.5 )\n        {\n            // project pixel footprint into the plane\n            vec3 dpdx = ro.y*(rd/rd.y-rdx/rdx.y);\n            vec3 dpdy = ro.y*(rd/rd.y-rdy/rdy.y);\n\n            float f = checkersGradBox( 3.0*pos.xz, 3.0*dpdx.xz, 3.0*dpdy.xz );\n            col = 0.15 + f*vec3(0.05);\n            ks = 0.4;\n        }\n\n        // lighting\n        float occ = calcAO( pos, nor );\n        \n\t\tvec3 lin = vec3(0.0);\n\n        // sun\n        {\n            vec3  lig = normalize( vec3(-0.5, 0.4, -0.6) );\n            vec3  hal = normalize( lig-rd );\n            float dif = clamp( dot( nor, lig ), 0.0, 1.0 );\n          //if( dif>0.0001 )\n        \t      dif *= calcSoftshadow( pos, lig, 0.02, 2.5 );\n\t\t\tfloat spe = pow( clamp( dot( nor, hal ), 0.0, 1.0 ),16.0);\n                  spe *= dif;\n                  spe *= 0.04+0.96*pow(clamp(1.0-dot(hal,lig),0.0,1.0),5.0);\n                //spe *= 0.04+0.96*pow(clamp(1.0-sqrt(0.5*(1.0-dot(rd,lig))),0.0,1.0),5.0);\n            lin += col*2.20*dif*vec3(1.30,1.00,0.70);\n            lin +=     5.00*spe*vec3(1.30,1.00,0.70)*ks;\n        }\n        // sky\n        {\n            float dif = sqrt(clamp( 0.5+0.5*nor.y, 0.0, 1.0 ));\n                  dif *= occ;\n            float spe = smoothstep( -0.2, 0.2, ref.y );\n                  spe *= dif;\n                  spe *= 0.04+0.96*pow(clamp(1.0+dot(nor,rd),0.0,1.0), 5.0 );\n          //if( spe>0.001 )\n                  spe *= calcSoftshadow( pos, ref, 0.02, 2.5 );\n            lin += col*0.60*dif*vec3(0.40,0.60,1.15);\n            lin +=     2.00*spe*vec3(0.40,0.60,1.30)*ks;\n        }\n        // back\n        {\n        \tfloat dif = clamp( dot( nor, normalize(vec3(0.5,0.0,0.6))), 0.0, 1.0 )*clamp( 1.0-pos.y,0.0,1.0);\n                  dif *= occ;\n        \tlin += col*0.55*dif*vec3(0.25,0.25,0.25);\n        }\n        // sss\n        {\n            float dif = pow(clamp(1.0+dot(nor,rd),0.0,1.0),2.0);\n                  dif *= occ;\n        \tlin += col*0.25*dif*vec3(1.00,1.00,1.00);\n        }\n        \n\t\tcol = lin;\n\n        col = mix( col, vec3(0.7,0.7,0.9), 1.0-exp( -0.0001*t*t*t ) );\n    }\n\n\treturn vec3( clamp(col,0.0,1.0) );\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv =          ( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 mo = iMouse.xy/iResolution.xy;\n\tfloat time = 32.0 + iTime*1.5;\n\n    // camera\t\n    //vec3 ta = vec3( 0.5, -0.5, -0.6 );\n    //vec3 ro = ta + vec3( 4.5*cos(0.1*time + 7.0*mo.x), 1.3 + 2.0*mo.y, 4.5*sin(0.1*time + 7.0*mo.x) );\n    vec3 ta = vec3( 0., 0.23, -0. );\n    vec3 ro = ta + vec3( 4.5*cos(0.05*time + 7.0*mo.x), 1.3 + 2.0*mo.y, 4.5*sin(0.05*time + 7.0*mo.x) );\n    // camera-to-world transformation\n    mat3 ca = setCamera( ro, ta, 0.0 );\n\n    vec3 tot = vec3(0.0);\n#if AA>1\n    for( int m=ZERO; m<AA; m++ )\n    for( int n=ZERO; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (2.0*(fragCoord+o)-iResolution.xy)/iResolution.y;\n#else    \n        vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n#endif\n\n        // focal length\n        const float fl = 8.5;\n        \n        // ray direction\n        vec3 rd = ca * normalize( vec3(p,fl) );\n\n         // ray differentials\n        vec2 px = (2.0*(fragCoord+vec2(1.0,0.0))-iResolution.xy)/iResolution.y;\n        vec2 py = (2.0*(fragCoord+vec2(0.0,1.0))-iResolution.xy)/iResolution.y;\n        vec3 rdx = ca * normalize( vec3(px,fl) );\n        vec3 rdy = ca * normalize( vec3(py,fl) );\n        \n        // render\t\n        vec3 col = render( ro, rd, rdx, rdy );\n\n        // gain\n        // col = col*3.0/(2.5+col);\n        \n        // snow\n        vec2 uv_snow = fragCoord.xy / iResolution.x;\n\n        vec4 snowMask = vec4(0.0, 0.0, 0.0, 0.0);\n        float j;\n\n        for(int i=0; i<_SnowflakeAmount; i++)\n        {\n            j = float(i);\n            float speed = 0.3+rnd(cos(j))*(0.7+0.5*cos(j/(float(_SnowflakeAmount)*0.25)));\n            vec2 center = vec2((0.25-uv_snow.y)*_BlizardFactor+rnd(j)+0.1*cos(iTime+sin(j)), mod(sin(j)-speed*(iTime*1.5*(0.1+_BlizardFactor)), 0.65));\n            snowMask += vec4(0.09*drawCircle(uv_snow,center, 0.001+speed*0.012));\n        }\n        \n        col += snowMask.rgb;\n        \n\t\t// gamma\n        col = pow( col, vec3(0.4545) );\n\n        tot += col;\n#if AA>1\n    }\n    tot /= float(AA*AA);\n#endif\n    \n    fragColor = vec4( tot, 1.0 );\n}","name":"Image","description":"","type":"image"}]}