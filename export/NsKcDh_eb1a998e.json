{"ver":"0.1","info":{"id":"NsKcDh","date":"1654784902","viewed":102,"name":"Planet apearing after hyperspace","username":"monman53","description":"A planet appearing after getting out of hyperspace.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","sphere","warp","starwars","lightspeed"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_ITER 32\n\nconst vec3 planetSurface = vec3(0.9, 0.6, .5);\nconst vec3 light = normalize(vec3(1., -1., 2.));\n\nfloat calcDist(vec3 p, vec3 c) {\n    float r = 40.;\n    return distance(p, c) - r;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - .5 * iResolution.xy) / iResolution.y;\n    \n    //vec3 c = vec3(50., -30., 800.);\n    float linear = 16.;\n    //float linear = 0.;\n    vec3 c = vec3(40., -10., 800. + 1. / (iTime * 0.02) - iTime * linear);\n\n    vec3 camera = vec3(0., 0., -8.);\n    vec3 ray = normalize(vec3(uv, 0) - camera);\n    \n    vec3 pos = camera;\n    \n    for (int i = 0; i < MAX_ITER; i++) {\n        float d = calcDist(pos, c);\n        if (d < 0.01) {\n            break;\n        }\n        pos += d * ray;\n    }\n    \n    vec3 n = normalize(pos - c);\n    \n    float brightness = dot(-light, n);\n    vec3 col = planetSurface * brightness;\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}