{"ver":"0.1","info":{"id":"MsyXDt","date":"1467754250","viewed":242,"name":"Cosines, everywhere","username":"jumpy89","description":"Haven't learned how to do raymarching yet, so made this from a bunch of superimposed cosine waves instead. Has a cool sort of almost-symmetry to it.","likes":15,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TWOPI 6.28318530718\n\n#define N1 7\n#define WL1 10.\n#define SPEED1 .2\n#define AMP1 .2\n#define POW1 .6\n\n#define N2 7\n#define WL2 75.\n#define SPEED2 .05\n#define AMP2 1.\n#define POW2 1.5\n\n\n/*\n * From iq's \"cosine based palettes\" shadertoy here: https://www.shadertoy.com/view/ll2GD3\n * https://iquilezles.org/articles/palettes\n */\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( TWOPI * (c * t + d) );\n}\n\n\nfloat wave(vec2 p, float lambda, float theta, float t)\n{\n    float dp = p.x * cos(theta) + p.y * sin(theta);\n    return (cos( (dp / lambda + t) * TWOPI ) + 1. ) * .5;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = fragCoord.xy + iResolution.xy * iTime * .02;\n    \n    float x = .0;\n    \n    for(int i = 0; i < N1; i++)\n        x += pow( wave( p, WL1, float(i) / float(N1) * TWOPI, iTime * SPEED1 ), POW1 ) * AMP1;\n    \n    for(int i = 0; i < N2; i++)\n        x += pow( wave( p, WL2, float(i) / float(N2) * TWOPI, iTime * SPEED2 ), POW2 ) * AMP2;\n    \n    vec3 col = pal(x * .3,\n                   vec3(0.5,0.5,0.5),\n                   vec3(0.5,0.5,0.5),\n                   vec3(1.0,1.0,1.0),\n                   vec3(0.0,0.10,0.20));\n    \n    fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"}]}