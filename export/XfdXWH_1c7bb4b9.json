{"ver":"0.1","info":{"id":"XfdXWH","date":"1713880037","viewed":57,"name":"Peaks & Ponds","username":"CavoX5","description":"use mouse to move around","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Variables\nfloat zoom = 1.;\nfloat quality = 64.; // >=40\n\nfloat stepmult = 1.62;\nfloat stepstart = 0.9; //0.99 for islands\nvec2 elevation = vec2(4., 2.); // second value is variance\n\nvec2 landwave = vec2(0.4,1.0) * 1.;\n\nvec2 wigglelength = vec2(1. , 1.) * 0.1;\nvec2 wigglefactor = vec2(1. , 1.) * 10.;\nfloat wigglespeed = 0.8;\n\nfloat[] weights = float[](9.,48.,18.,3.);// Pond , Land * 2 , Peak, Transition * 3\nfloat transformspeed = 1.;\n\nfloat waterlevel = 0.4;\nfloat sandlevel = 0.425;\nfloat rocklevel = 0.47;\nfloat snowlevel = 0.95;\n\nvec3 water = vec3(0.325,0.608,0.875);\nvec3 sand = vec3(0.894,0.933,0.345) * 1.3;\nvec3 grass = vec3(0.549,0.933,0.169);\nvec3 rock = vec3(0.620,0.675,0.584);\nvec3 snow = vec3(0.953,1.000,0.922);\n\n//Constants\nfloat pi = 3.14159;\n\n//https://stackoverflow.com/questions/4200224/random-noise-functions-for-glsl\nfloat rand(vec2 co){\n    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nfloat mult(float x){\n    float total = weights[0] + (weights[1] * 2.) + weights[2] + (weights[3] * 4.);\n    \n    x = fract(x * transformspeed / 5.) * total;\n    \n    float a = 0.;\n    for(int i = 0; i <= 3; i++){\n        if(i == 3)\n        {\n            if((a += weights[1]) > x)\n            {\n                return 0.;\n            }\n\n            if((a += weights[3]) > x)\n            {\n                return mix(0., -1.,\n                smoothstep(0.,1., (x + weights[3] - a) / weights[3]));\n            }\n        }\n        \n        if((a += weights[i]) > x)\n        {\n            return float(i) - 1.;\n        }\n        \n        if((a += weights[3]) > x)\n        {\n            return mix(float(i) - 1., float(i) - (i == 2 ? 2. : 0.), \n            smoothstep(0.,1.,(x + weights[3] - a) / weights[3]));\n        }\n    }\n    return 0.;\n}\n\nfloat getVal(vec2 pos, float i){\n    float mult2 = pow(0.95,i * 18.) * (rand(floor(pos * 5.312)) * 0.05 + 0.95);\n    \n    if(i == 1.)\n        return mult2;\n        \n    \n    float rng = rand(floor(pos));\n    float mlt = mult(rng * 2. + (iTime + 192.213) * 0.2 * (rng * 0.3 + 0.7));\n    \n    pos.x += sin(iTime + rng * 124. + i * wigglefactor.x) * wigglelength.x * \n        sin(rng * 439. + iTime * wigglespeed);\n        \n    pos.y += sin(iTime * sin(rng) + rng * 412. + i * wigglefactor.y) * wigglelength.y * \n        sin(rng * 873. + iTime * wigglespeed);\n    \n    float stp = stepstart - (i * stepmult);\n    \n    return step(stp , pow(abs(sin(pos.x * pi) * sin(pos.y * pi)),4.) * mlt) \n    * mult2;\n}\n\nvec3 getCol(vec2 pos, float i){\n    float val = getVal(pos, i);\n    \n    return 0. + \n        (i < (1.- snowlevel) ?  snow : \n        (i < (1.- rocklevel) ?  rock : \n        (i > (1.- sandlevel) ? sand : \n        grass))) * val + \n        (i > (1.- waterlevel) ? water : vec3(0.,0.,0.));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord * 2. / iResolution.xy - 1.;\n    uv.x *= iResolution.x / iResolution.y;\n    uv *= 5. / zoom;\n    \n    uv += iMouse.xy / 20.;\n    \n    uv.x += cos(iTime) * landwave.x;\n    uv.y += sin(floor(uv.x) + iTime) * landwave.y;   \n    \n    elevation.x += (rand(floor(uv.xx)) - 0.5) * 2. * elevation.y;\n    \n    vec3 Col = vec3(0.,0.,0.);\n    for(float i = 0.; i <= quality; i++){\n        if(Col != vec3(0.,0.,0.))\n            break;\n            \n        Col = getCol(vec2(0., elevation.x * i / quality) + uv, i / quality) ;\n    }\n    \n    fragColor = vec4(Col ,1.);\n}\n\n\n\n\n","name":"Image","description":"","type":"image"}]}