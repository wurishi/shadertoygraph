{"ver":"0.1","info":{"id":"NtlyDr","date":"1647831792","viewed":222,"name":"Glass Warping Demo","username":"sdedovic","description":"Click on the bottom where it says \"iChannel0\" to select a different image.\n\nChanging the height value will change how extreme the effect is.\nChanging the timeScale value will change how fast the effect \"moves\".","likes":0,"published":1,"flags":0,"usePreview":1,"tags":["refraction","refract","prototype"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 hash ( vec3 p )\n{\n    const vec3 k = vec3(0.3183099, 0.3678794, 0.333217);\n    float n = 111.0*p.x + 113.0*p.y + 115.0*p.z;\n    return fract(n*fract(k*n));\n}\n\n// return value noise (in x) and its derivatives (in yzw)\nvec4 noised( in vec3 x )\n{\n    // grid\n    vec3 i = floor(x);\n    vec3 w = fract(x);\n    \n    #if 1\n    // quintic interpolant\n    vec3 u = w*w*w*(w*(w*6.0-15.0)+10.0);\n    vec3 du = 30.0*w*w*(w*(w-2.0)+1.0);\n    #else\n    // cubic interpolant\n    vec3 u = w*w*(3.0-2.0*w);\n    vec3 du = 6.0*w*(1.0-w);\n    #endif    \n    \n    // gradients\n    vec3 ga = hash( i+vec3(0.0,0.0,0.0) );\n    vec3 gb = hash( i+vec3(1.0,0.0,0.0) );\n    vec3 gc = hash( i+vec3(0.0,1.0,0.0) );\n    vec3 gd = hash( i+vec3(1.0,1.0,0.0) );\n    vec3 ge = hash( i+vec3(0.0,0.0,1.0) );\n\tvec3 gf = hash( i+vec3(1.0,0.0,1.0) );\n    vec3 gg = hash( i+vec3(0.0,1.0,1.0) );\n    vec3 gh = hash( i+vec3(1.0,1.0,1.0) );\n    \n    // projections\n    float va = dot( ga, w-vec3(0.0,0.0,0.0) );\n    float vb = dot( gb, w-vec3(1.0,0.0,0.0) );\n    float vc = dot( gc, w-vec3(0.0,1.0,0.0) );\n    float vd = dot( gd, w-vec3(1.0,1.0,0.0) );\n    float ve = dot( ge, w-vec3(0.0,0.0,1.0) );\n    float vf = dot( gf, w-vec3(1.0,0.0,1.0) );\n    float vg = dot( gg, w-vec3(0.0,1.0,1.0) );\n    float vh = dot( gh, w-vec3(1.0,1.0,1.0) );\n\t\n    // interpolations\n    return vec4( va + u.x*(vb-va) + u.y*(vc-va) + u.z*(ve-va) + u.x*u.y*(va-vb-vc+vd) + u.y*u.z*(va-vc-ve+vg) + u.z*u.x*(va-vb-ve+vf) + (-va+vb+vc-vd+ve-vf-vg+vh)*u.x*u.y*u.z,    // value\n                 ga + u.x*(gb-ga) + u.y*(gc-ga) + u.z*(ge-ga) + u.x*u.y*(ga-gb-gc+gd) + u.y*u.z*(ga-gc-ge+gg) + u.z*u.x*(ga-gb-ge+gf) + (-ga+gb+gc-gd+ge-gf-gg+gh)*u.x*u.y*u.z +   // derivatives\n                 du * (vec3(vb,vc,ve) - va + u.yzx*vec3(va-vb-vc+vd,va-vc-ve+vg,va-vb-ve+vf) + u.zxy*vec3(va-vb-ve+vf,va-vb-vc+vd,va-vc-ve+vg) + u.yzx*u.zxy*(-va+vb+vc-vd+ve-vf-vg+vh) ));\n}\n\nconst float timeScale = 0.1;\nconst float n1 = 1.0;\nconst float n2 = 1.3;\nconst float height = 0.7;\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // normalize coordinates, i.e. map values to [0, 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // sample noise at X and Y coordinate. Z for animation.\n    vec4 noise = noised(vec3(uv.xy, iTime*timeScale) + vec3(2.183099, -1.6794, -2.317)) * 0.3;\n\n    // 3D position where this ray of light hits the surface\n    vec3 surfacePosition = vec3(uv, noise.x + height);\n    \n    // from the derivative noise\n    vec3 surfaceNormal = noise.yzw;\n\n    // ratio of indices of refraction\n    float eta = n1 / n2;\n\n    // incoming ray is only moving in the Z axis\n    vec3 rayIncoming = vec3(0.0, 0.0, -1.0);\n    vec3 rayRefract = refract(rayIncoming, surfaceNormal, eta);\n    \n    const vec3 imagePlanePos = vec3(0.0, 0.0, 0.0);\n    const vec3 imagePlaneNormal = vec3(0.0, 0.0, -1.0);\n\n    float travelAmt = dot(imagePlanePos - surfacePosition, imagePlaneNormal) / dot(rayRefract, imagePlaneNormal);\n    vec3 exitPoint = surfacePosition + rayRefract * travelAmt;\n    \n    fragColor = (exitPoint.x > 1.0 || exitPoint.y > 1.0 || exitPoint.x < 0.0 || exitPoint.y < 0.0) ?\n\tvec4(1.0, 0.0, 0.0, 1.0) :\n\ttexture(iChannel0, exitPoint.xy);\n\n}","name":"Image","description":"","type":"image"}]}