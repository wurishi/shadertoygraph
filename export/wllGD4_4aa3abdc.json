{"ver":"0.1","info":{"id":"wllGD4","date":"1556469930","viewed":241,"name":"Elliptic Nome Domain Coloring","username":"tpfto","description":"Domain coloring of the elliptic nome q(m), a function that can be expressed in terms of the complete elliptic integral of the first kind K(m).","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["2d","math","domaincoloring","specialfunctions"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2019 J. M.\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Basic domain coloring plot (https://en.wikipedia.org/wiki/Domain_coloring)\n// of the elliptic nome w = q(z) (https://en.wikipedia.org/wiki/Nome_(mathematics))\n\n#define PI 3.14159265359\n#define SCALE 6.0 // plot scale\n#define SPACING 0.0625 // grid line spacing\n\n// from Fabrice Neyret, \n#define cmul(A,B) ( mat2( A, -(A).y, (A).x ) * (B) )\n#define cinv(Z) ( vec2( (Z).x, -(Z).y ) / dot(Z, Z) ) \n#define cdiv(A,B) cmul( A, cinv(B) )\n\n// Schlick bias function, from http://dept-info.labri.u-bordeaux.fr/~schlick/DOC/gem2.ps.gz\nfloat bias( float a, float x )\n{\n    return x/((1.0/a - 2.0) * (1.0 - x) + 1.0);\n}\n\n// biased sawtooth\nfloat my_saw( float x, float p )\n{\n    float xs = mod(x, 1.0);\n    float xh = clamp(xs, 0.0, p);\n    return 0.5 + 0.5 * bias(0.95, xh) * (1.0 - smoothstep(p, 1.0, xs));\n}\n\n// modified version of Inigo Quilez's method at https://www.shadertoy.com/view/MsS3Wc\n// using \"rational smoothstep\" from https://tpfto.wordpress.com/2019/03/28/on-a-rational-variant-of-smoothstep/\nvec3 smooth_hue( float h )\n{\n    vec3 rgb = clamp( abs(mod(6.0 * h + vec3(0.0, 4.0, 2.0), 6.0) - 3.0) - 1.0, 0.0, 1.0);\n    return rgb * rgb * rgb/(1.0 - 3.0 * rgb * (1.0 - rgb));\n}\n\n// modified DLMF coloring, adapted from https://www.shadertoy.com/view/WtXGWN\nvec3 smooth_dlmf( float h )\n{\n    vec3 rgb = clamp( vec3(1., -1., -1.) * abs((vec3(8., 4., 8.) * mod(h, 1.0) - vec3(4.5, 1.5, 5.5))) + vec3(-1.5, 1.5, 2.5), 0.0, 1.0 );\n\treturn rgb * rgb * rgb/(1.0 - 3.0 * rgb * (1.0 - rgb));\n}\n\n// complex square root, from Numerical Recipes\n\nvec2 sqrtz( in vec2 z )\n{\n\tfloat ar = abs(z.x), ai = abs(z.y);\n\n    float w = (dot(z, z) == 0.0) ? 0.0 : ( (ar >= ai) ? (sqrt(ar) * sqrt(0.5 * (1.0 + sqrt(1.0 + (ai * ai)/(ar * ar))))) : (sqrt(ai) * sqrt(0.5 * (ar/ai + sqrt(1.0 + (ar * ar)/(ai * ai))))));\n    \n    return ((w == 0.0) ? vec2(0.0) : ((z.x >= 0.0 ? vec2(w, 0.5 * z.y/w) : vec2(0.5*ai/w, ((z.y >= 0.0) ? w : -w)))));\n}\n\n// complex exponential\n\nvec2 expz( in vec2 z )\n{\n\treturn exp(z.x) * vec2(cos(z.y), sin(z.y));\n}\n\n// complete elliptic integral K(m) via arithmetic-geometric mean (AGM) iteration \n\nvec2 ellK( in vec2 z )\n{\n    vec2 agA = vec2(1.0, 0.0), agB = sqrtz(agA - z);\n    vec2 tmp = vec2(0.0), h = tmp;\n\t\n    for( int i = 0; i <= 9; i++ )\n    {\n        tmp = sqrtz(cmul(agA, agB));\n        h = 0.5 * (agB - agA);\n        agA += h;\n        agB = tmp;\n        if (length(h) < 1.0e-6) break;\n    }\n\t\n    return (PI * cinv(agA + agB));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 aspect = iResolution.xy / iResolution.y;\n    vec2 z = ( fragCoord.xy / iResolution.y ) - 0.5 * aspect;\n    z *= SCALE;\n    \n    vec2 w = expz(-PI * cdiv(ellK(vec2(1.0, 0.0) - z), ellK(z))); // elliptic nome q(m)\n    // vec2 w = ellK(z); // uncomment if you just want K(m)\n    float ph = atan(w.y, w.x);\n    float lm = log(0.0001 + length(w));\n    \n    vec3 c = vec3(1.0);\n    c = smooth_dlmf(0.5 * (ph / PI));\n    // uncomment for HSV version \n    // c = smooth_hue(0.5 * (ph / PI));\n\n    c *= mix(1.0, my_saw((0.5 * (lm/PI))/SPACING, 0.95) * my_saw((0.5 * (ph / PI))/SPACING, 0.95), 0.5 + 0.5 * cos(iTime));\n    fragColor = vec4(c, 1.0);\n}","name":"Image","description":"","type":"image"}]}