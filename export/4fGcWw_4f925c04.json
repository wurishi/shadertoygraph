{"ver":"0.1","info":{"id":"4fGcWw","date":"1731932998","viewed":351,"name":"[SESSIONS-PARTY] SESSIONS","username":"yasuo","description":"SESSIONS","likes":17,"published":3,"flags":0,"usePreview":1,"tags":["graphicdesign","cineshader","sessions"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 80\n#define MAX_DIST 80.\n#define SURF_DIST .0005\n#define Rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(2.0),b,d)\n#define B(p,s) max(abs(p).x-s.x,abs(p).y-s.y)\n#define deg45 .707\n#define R45(p) (( p + vec2(p.y,-p.x) ) *deg45)\n#define Tri(p,s) max(R45(p).x,max(R45(p).y,B(p,s)))\n#define SUV(p) vec2(atan(p.x,p.z),acos(p.y))\n#define ch_0 0\n#define ch_1 1\n#define ch_2 2\n#define ch_3 3\n#define ch_4 4\n\nfloat random (vec2 p) {\n    return fract(sin(dot(p.xy, vec2(12.9898,78.233)))* 43758.5453123);\n}\n\nfloat cubicInOut(float t) {\n  return t < 0.5\n    ? 4.0 * t * t * t\n    : 0.5 * pow(2.0 * t - 2.0, 3.0) + 1.0;\n}\n\nfloat getTime(float t, float duration){\n    return clamp(t,0.0,duration)/duration;\n}\n\nfloat getAnimationValue(){\n    float easeValue = 0.;\n    float frame = mod(iTime,12.0);\n    float time = frame;\n    \n    float duration = 1.;\n    if(frame>=5. && frame<6.){\n        time = getTime(time-5.,duration);\n        easeValue = cubicInOut(time);\n    } else if(frame>=6. && frame<11.){\n        easeValue = 1.;\n    } else if(frame>=11. && frame<12.){\n        time = getTime(time-11.,duration);\n        easeValue = 1.0-cubicInOut(time);\n    }\n    \n    return easeValue;\n}\n\nfloat getRotAnimValue(){\n    float easeValue = 0.;\n    float frame = mod(iTime,24.0);\n    float time = frame;\n    \n    float duration = 1.;\n    if(frame>=17. && frame<18.){\n        time = getTime(time-17.,duration);\n        easeValue = cubicInOut(time);\n    } else if(frame>=18. && frame<23.){\n        easeValue = 1.;\n    } else if(frame>=23. && frame<24.){\n        time = getTime(time-23.,duration);\n        easeValue = 1.0-cubicInOut(time);\n    }\n    \n    return easeValue;\n}\n\n\nfloat getSceneAnimValue(){\n    float easeValue = 0.;\n    float frame = mod(iTime,42.0);\n    float time = frame;\n\n    float duration = 0.9;\n    if(frame>=11. && frame<12.){\n        time = getTime(time-11.,duration);\n        easeValue = cubicInOut(time);\n    } else if(frame>=12. && frame<40.){\n        easeValue = 1.;\n    } else if(frame>=40. && frame<41.){\n        time = getTime(time-40.,duration);\n        easeValue = 1.0-cubicInOut(time);\n    }\n    \n    return easeValue;\n}\n\nfloat getBoxAnimation(){\n    float frame = mod(iTime,11.0);\n    float duration = 0.9;\n    float rotVal = 0.0;\n    float time = frame;\n    \n    if(frame>=1. && frame<3.){\n        time = getTime(time-1.,duration);\n        rotVal = cubicInOut(time)*90.;\n    } else if(frame>=3. && frame<5.){\n        time = getTime(time-3.,duration);\n        rotVal = 90.+cubicInOut(time)*90.;\n    } else if(frame>=5. && frame<7.){\n        time = getTime(time-5.,duration);\n        rotVal = 180.+cubicInOut(time)*90.;\n    } else if(frame>=7. && frame<9.){\n        time = getTime(time-7.,duration);\n        rotVal = 270.+cubicInOut(time)*90.;\n    } else if(frame>=9.){\n        time = getTime(time-9.,duration+0.5);\n        rotVal = 360.-cubicInOut(time)*360.;\n    }\n\n    return rotVal;\n}\n\n// thx iq! https://iquilezles.org/articles/distfunctions/\nfloat sdBox( vec3 p, vec3 b )\n{\n    vec3 q = abs(p) - b;\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat grid(vec2 p){\n    vec2 prevP = p;\n    float thickness = 0.001;\n    float size = 0.1;\n    p+=vec2(size*0.5);\n    p = mod(p,size)-(size*0.5);\n    \n    float d = abs(p.x)-thickness;\n    float d2 = abs(p.y)-thickness;\n    d = min(d,d2);\n    p = prevP;\n    p.x = abs(p.x)-0.15;\n    d2 = B(p,vec2(thickness,100.));\n    d = min(d,d2);\n    return d;\n}\n\nfloat iconTri(vec2 p){\n    vec2 prevP = p;\n    p.y-=0.2;\n    p.y*=0.375;\n    float d = Tri(p,vec2(0.15));\n    p.y+=0.065;\n    float d2 = Tri(p,vec2(0.06));\n    d = max(-d2,d);\n    return d;\n}\n\nfloat iconCircle(vec2 p){\n    vec2 prevP = p;\n    p.y*=0.75;\n    float d = length(p)-0.15;\n    float d2 = length(p)-0.07;\n    d = max(-d2,d);\n    \n    return d;\n}\n\nfloat iconX(vec2 p){\n    vec2 prevP = p;\n    \n    p*=Rot(radians(30.));\n    float d = abs(p.x)-0.04;\n    p = prevP;\n    p*=Rot(radians(-30.));\n    float d2 = abs(p.x)-0.04;\n    d = min(d,d2);\n    p = prevP;\n    d = max(abs(p.y)-0.2,d);\n\n    return d;\n}\n\nfloat iconRect(vec2 p){\n    vec2 prevP = p;\n    float d = B(p,vec2(0.15,0.2));\n    float d2 = B(p,vec2(0.07,0.12));\n    d = max(-d2,d);\n    \n    return d;\n}\n\nfloat iconCross(vec2 p){\n    vec2 prevP = p;\n    \n    float d = abs(p.x)-0.04;\n    float d2 = abs(p.y)-0.04;\n    d = min(d,d2);\n\n    d = max(abs(p.x)-0.15,d);\n    d = max(abs(p.y)-0.2,d);\n\n    return d;\n}\n\nfloat S_parts(vec2 p){\n    vec2 prevP = p;\n    float d = length(p)-0.1;\n    d = max(p.x,d);\n    d = max(-(length(p)-0.04),d);\n    p.y = abs(p.y)-0.07;\n    float d2 = B(p,vec2(0.07,0.03));\n    d2 = max(-p.x,d2);\n    d = min(d,d2);\n    return d;\n}\n\nfloat charS(vec2 p, float morph){\n    vec2 prevP2 = p;\n    p.x*=0.68;\n    p.y*=0.88;\n    vec2 prevP = p;\n    p.y-=0.074;\n    p*=Rot(radians(21.));\n    float d = S_parts(p);\n    p = prevP;\n    p.x*=-1.;\n    p.y+=0.074;\n    p*=Rot(radians(-21.));\n    float d2 = S_parts(p);\n    d = min(d,d2);\n    \n    p = prevP2;\n    float d3 = iconTri(p);\n    d = mix(d,d3,morph);\n    \n    return d;\n}\n\nfloat charE(vec2 p, float morph){\n    vec2 prevP = p;\n    p.x += 0.11;\n    float d = B(p,vec2(0.04,0.2));\n    p = prevP;\n    p.x-=0.03;\n    p.y = abs(p.y)-0.16;\n    float d2 = B(p,vec2(0.12,0.04));\n    d = min(d,d2);\n    p = prevP;\n    p.x-=0.03;\n    d2 = B(p,vec2(0.12,0.04));\n    d = min(d,d2);\n    \n    p = prevP;\n    float d3 = iconCircle(p);\n    d = mix(d,d3,morph);\n    \n    return d;\n}\n\nfloat charI(vec2 p, float morph){\n    vec2 prevP = p;\n    float d = B(p,vec2(0.04,0.2));\n    \n    float d3 = iconX(p);\n    d = mix(d,d3,morph);\n    \n    return d;\n}\n\nfloat charO(vec2 p, float morph){\n    vec2 prevP2 = p;\n    p.x*=0.68;\n    p.y*=0.87;\n    vec2 prevP = p;\n    p.y = abs(p.y)-0.07;\n    p*=Rot(radians(90.));\n    \n    float d = S_parts(p);\n    \n    p = prevP2;\n    float d3 = iconRect(p);\n    d = mix(d,d3,morph);\n    \n    return d;\n}\n\nfloat charN(vec2 p, float morph){\n    vec2 prevP = p;\n    p.x = abs(p.x)-0.11;\n    float d = B(p,vec2(0.04,0.2));\n    \n    p = prevP;\n    p*=Rot(radians(-25.));\n    float d2 = B(p,vec2(0.04,0.3));\n    p = prevP;\n    d2 = max(abs(p.y)-0.2,d2);\n    d = min(d,d2);\n    \n    p = prevP;\n    float d3 = iconCross(p);\n    d = mix(d,d3,morph);    \n    \n    return d;\n}\n\nfloat checkChar(int targetChar, int char){\n    return 1.-abs(sign(float(targetChar) - float(char)));\n}\n\nfloat drawFont(vec2 p, int char, float morph){\n    p.x*=0.7;\n    p*=1.65;\n    float d = charS(p,morph)*checkChar(ch_0,char);\n    d += charE(p,morph)*checkChar(ch_1,char);\n    d += charI(p,morph)*checkChar(ch_2,char);\n    d += charO(p,morph)*checkChar(ch_3,char);\n    d += charN(p,morph)*checkChar(ch_4,char);\n    \n    return d;\n}\n\nfloat pattern1(vec3 p, float n){\n    float frame = getAnimationValue()*getSceneAnimValue();\n    p.xy*=Rot(radians(-90.*getRotAnimValue()*getSceneAnimValue()));\n    vec3 prevP = p;\n    float d =drawFont(p.xy*vec2(0.15,0.135),int(mod(9.+iTime*n,5.0)),frame);\n    d = max((abs(p.z)-0.1),d);\n    return d;\n}\n\nfloat pattern2(vec3 p, float n){\n    float frame = getAnimationValue()*getSceneAnimValue();\n    p.xy*=Rot(radians(-90.*getRotAnimValue()*getSceneAnimValue()));\n    vec3 prevP = p;\n    float d = drawFont((p.xy*0.3)-vec2(-0.15,0.15),int(mod(8.+iTime*n*1.,5.0)),frame);\n    float d2 = drawFont((p.xy*0.3)-vec2(0.15,0.15),int(mod(7.+iTime*n*1.2,5.0)),frame);\n    d = min(d,d2);\n    d2 = drawFont((p.xy*0.3)-vec2(-0.15,-0.15),int(mod(5.+iTime*n*1.5,5.0)),frame);\n    d = min(d,d2);\n    d2 = drawFont((p.xy*0.3)-vec2(0.15,-0.15),int(mod(3.+iTime*n*1.3,5.0)),frame);\n    d = min(d,d2);\n    \n    d = max((abs(p.z)-0.1),d);\n    return d;\n}\n\nfloat pattern3(vec3 p, float n){\n    p.xy*=Rot(radians(-90.*getRotAnimValue()*getSceneAnimValue()));\n    vec3 prevP = p;\n    \n    p.xy*=Rot(radians(45.));\n    p.x+=iTime*0.2;\n    p.x = mod(p.x,0.3)-0.15;\n    \n    float d = B(p.xy,vec2(0.05,10.));\n    p = prevP;\n    d = max(B(p.xy,vec2(0.95)),d);\n    \n    d = max((abs(p.z)-0.1),d);\n    \n    return d;\n}\n\nvec2 GetDist(vec3 p) {\n    vec3 prevP = p;\n    p.y-=0.5*iTime;\n    vec2 id = floor(p.xy*0.5);\n    p.z-=3.;\n    p.xy = mod(p.xy,2.0)-1.0;\n    float n = random(id);\n    \n    float t = iTime*2.;\n    float d = 10.;\n    if(n<0.45){\n        d = pattern1(p,n);\n    } else if(n>=0.45 && n<0.9){\n        d = pattern2(p,n);\n    } else if(n>=0.9){\n        d = pattern3(p,n);\n    }\n\n    p = prevP;\n    p.xz*=Rot(radians(-getBoxAnimation()));\n    float d2 = sdBox(p,vec3(0.9+getSceneAnimValue()*5.));\n\n    return vec2(mix(d2,d,getSceneAnimValue()),0.0);\n}\n\nvec2 RayMarch(vec3 ro, vec3 rd, float side, int stepnum) {\n    vec2 dO = vec2(0.0);\n    \n    for(int i=0; i<stepnum; i++) {\n        vec3 p = ro + rd*dO.x;\n        vec2 dS = GetDist(p);\n        dO.y = dS.y;\n        \n        if(dO.x>MAX_DIST || abs(dS.x)<SURF_DIST) break;\n        dO.x += dS.x;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    // Here is Shane's commented version of the code for reducing the compile time. Thank you, Shane!\n    // This mess is an attempt to speed up compiler time by contriving \n    // a break... It's based on a suggestion by IQ.\n    float sgn = 1.;\n    vec3 e = vec3(.001, 0, 0), mp = e.zzz; // Spalmer's clever zeroing.\n    for(int i = min(iFrame, 0); i<6; i++){\n\t\tmp.x += GetDist(p + sgn*e).x*sgn;\n        sgn = -sgn;\n        if((i&1)==1){ mp = mp.yzx; e = e.zxy; }\n    }\n    \n    return normalize(mp);\n}\n\nvec3 R(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\nvec3 diffuseMaterial(vec3 n, vec3 rd, vec3 p, vec3 col) {\n    vec3 diffCol = vec3(0.0);\n    vec3 lightDir = normalize(vec3(1,10,10));\n    float diff = clamp(dot(n,lightDir),0.0,1.0);\n    float skyDiff = clamp(0.5+0.5*dot(n,vec3(0,1,0)),0.0,1.0);\n    float bounceDiff = clamp(0.5+0.5*dot(n,vec3(0,-1,0)),0.0,1.0);\n    diffCol = col*vec3(-0.5)*diff;\n    diffCol += col*vec3(1.0,1.0,0.9)*skyDiff;\n    diffCol += col*vec3(0.7)*bounceDiff;\n    diffCol += col*pow(max(dot(rd, reflect(lightDir, n)), 0.0), 60.); // spec\n        \n    return diffCol;\n}\n\nfloat stripes(vec2 p, float dir){\n    vec2 prevP = p;\n    \n    p*=Rot(radians(30.));\n    p.x+=iTime*0.03*dir;\n    p.x = mod(p.x,0.02)-0.01;\n    \n    float d = B(p,vec2(0.003,10.));\n    p = prevP;\n    d = max(B(p,vec2(0.03,0.2)),d);\n    return d;\n}\n\nfloat slogo(vec2 p){\n    vec2 prevP = p;\n    p.x+=iTime*1.;\n    p.x+=0.9;\n    p.x = mod(p.x,1.8)-0.9;\n    p*=0.17;\n    p.x*=1.5;\n    float d = drawFont(p-vec2(0.05,0.0),0,0.);\n    p.y*=1.7;\n    float d2 = stripes(p-vec2(-0.15,0.0),1.);\n    d = min(d,d2);\n    \n    p = prevP;\n    d2 = B(p,vec2(1.0));\n    d2 = max(-B(p,vec2(0.85)),d2);\n    d = min(d,d2);\n    return d;\n}\n\nfloat pattern2D(vec2 p, float rdir, float dir){\n    p*=Rot(radians(90.*rdir*-1.));\n    vec2 prevP = p;\n    p*=2.2;\n    p.x+=iTime*dir*-1.;\n    vec2 id = floor(p);\n    vec2 gr = fract(p)-0.5;\n    float n = random(id);\n    \n    float d = 10.;\n    gr*=2.;\n    if(n<0.45){\n        d = pattern1(vec3(gr,0),n);\n    } else if(n>=0.45 && n<0.9){\n        d = pattern2(vec3(gr,0),n);\n    } else if(n>=0.9){\n        d = pattern3(vec3(gr,0),n);\n    }\n    \n    p = prevP;\n    float d2 = B(p,vec2(1.0));\n    d2 = max(-B(p,vec2(0.85)),d2);\n    d = min(d,d2);\n    \n    return d;\n}\n\n// the reflection code reference from the following: https://www.shadertoy.com/view/tsXSRs\nvec3 reflectionBg(vec2 uv){\n    const float pi = 3.14159;\n    return mix(vec3(0.05), vec3(2.), smoothstep(pi*0.35, pi*0.98, uv.y));\n}\n\nvec3 materials(int mat, vec3 n, vec3 rd, vec3 p, vec3 col){    \n    float IOR =\t1.309; //IOR:index of reflection\n    vec3 rdir = refract(-rd,n,1.0/IOR); \n    col = reflectionBg(SUV(rdir));\n    col = diffuseMaterial(n,rd,p,col);\n    \n    vec3 col2 = vec3(0.);\n    p.xz*=Rot(radians(-getBoxAnimation()));\n    n.xz*=Rot(radians(-getBoxAnimation()));\n    vec3 colXZ = mix(col2,vec3(1.),S(pattern2D(p.xz,1.,1.),0.0));\n    vec3 colYZ = (n.x < 0.0) ? mix(col2,vec3(1.),S(pattern2D(p.yz,-1.,-1.),0.0)) : mix(col2,vec3(1.),S(pattern2D(p.yz*vec2(-1.,1.),1.,-1.),0.0));\n    vec3 colXY = (n.z < 0.0) ? mix(col2,vec3(1.),S(slogo(p.xy),0.0)) : mix(col2,vec3(1.),S(slogo(p.xy*vec2(-1.,1)),0.0));\n\n    col2 = colXZ*abs(n.y)+colXY*abs(n.z)+colYZ*abs(n.x);\n\n    return mix(col2,col,getSceneAnimValue());\n}\n\nfloat sessions(vec2 p){\n    vec2 prevP = p;\n    p*=1.5;\n    p.x*=1.5;\n    p.x+=0.05;\n    float d = drawFont(p-vec2(-0.9,0.0),0,0.);\n    float d2 = drawFont(p-vec2(-0.6,0.0),1,0.);\n    d = min(d,d2);\n    d2 = drawFont(p-vec2(-0.3,0.0),0,0.);\n    d = min(d,d2);\n    d2 = drawFont(p-vec2(0.,0.0),0,0.);\n    d = min(d,d2);\n    d2 = drawFont(p-vec2(0.2,0.0),2,0.);\n    d = min(d,d2);\n    d2 = drawFont(p-vec2(0.4,0.0),3,0.);\n    d = min(d,d2);\n    d2 = drawFont(p-vec2(0.7,0.0),4,0.);\n    d = min(d,d2);\n    d2 = drawFont(p-vec2(1.,0.0),0,0.);\n    d = min(d,d2);\n    return d;\n}\n\nvec3 draw2D(vec2 p, vec3 col){\n    vec2 prevP = p;\n    float d = sessions(p);\n    col = mix(col,vec3(1.),S(d,0.0));\n    \n    p.y-=iTime*0.1;\n    p.y = mod(p.y,0.2)-0.1;\n    d = sessions(p);\n    p = prevP;\n    d = max(abs(p.y)-0.2,d);\n    d = max(-(abs(p.y)-0.09),d);\n    col = mix(col,vec3(0.6),S(d,0.0));\n    \n    p.x = abs(p.x)-0.55;\n    d = stripes(p,1.);\n    col = mix(col,vec3(1.),S(d,0.0));\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 prevUV = uv;\n    uv.xy*=Rot(radians(90.*getRotAnimValue()*getSceneAnimValue()));\n    \n    vec3 ro = vec3(0, 0, -3.-(3.*getAnimationValue()*getSceneAnimValue()));\n    ro.yz *= Rot(radians(-5.0));\n    ro.xz *= Rot(radians(sin(iTime*0.2)*10.0));     \n    \n    vec3 rd = R(uv, ro, vec3(0,0.0,0), 1.0);\n    vec2 d = RayMarch(ro, rd, 1.,MAX_STEPS);\n    vec3 col = vec3(.0);\n    \n    if(d.x<MAX_DIST) {\n        vec3 p = ro + rd * d.x;\n        vec3 n = GetNormal(p);\n        int mat = int(d.y);\n        col = materials(mat,n,rd,p,col)*0.2;\n    } else {\n        uv = prevUV;\n        uv.y-=iTime*0.05;\n        uv = mod(uv,0.14)-0.07;\n        float d2 = min(B(uv,vec2(0.0000001,0.01)),B(uv,vec2(0.01,0.0000001)));\n        col = mix(col,vec3(0.1),S(d2,0.0));\n    }\n    \n    uv = prevUV;\n    col = draw2D(uv,col);   \n    \n    fragColor = vec4(sqrt(col),1.0);\n}","name":"Image","description":"","type":"image"}]}