{"ver":"0.1","info":{"id":"NsjyRc","date":"1643880690","viewed":190,"name":"VoxelMaze","username":"namanonamako","description":"raymarch","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["raymarch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nReference\n\tVoxel Ambient Occlusion - fb39ca4\n    https://www.shadertoy.com/view/ldl3DS\n*/\n\nprecision highp float;\n\nuniform vec2 mouse;\nuniform vec2 resolution;\n\nfloat rand(vec3 p){\n\treturn fract(sin(dot(p, vec3(23.5349, 12.4324, 94.5204))) * 8471.4309);\n}\n\nfloat rand(vec2 p){\n\treturn fract(sin(dot(p, vec2(23.5349, 94.5204))) * 8471.4309);\n}\n\nvec3 path(float a){\n\treturn vec3(pow(sin(a * .6), 2.) - 2. * exp(cos(a * .2 + 1.)), cos(a) * .6 + sin(a * 1.6) * .5, a);\n}\n\nvec3 path2(float a){\n\treturn vec3(pow(sin(a + 1.), 2.) - 2.3, cos(a * 1.3) * .6 + sin(a + 2.1) * .5, a);\n}\n\nvec3 path3(float a){\n\treturn vec3(sin(a * 1.2 + 3.) * 2.2 + 1.5, cos(a + 6.1) * 1.2, a);\n}\n\nfloat map(vec3 p){\n\tfloat d1 = length(p - path(p.z)) - 1.;\n\tfloat d2 = length(p - path2(p.z)) - 1.;\n    float d3 = length(p - path3(p.z)) - .75;\n\treturn -min(d1, min(d2, d3));\n}\n\nfloat vertexAo(vec2 side, float corner) {\n\t//if (side.x == 1.0 && side.y == 1.0) return 1.0;\n\treturn (side.x + side.y + max(corner, side.x * side.y)) / 3.0;\n}\n\nvec4 voxelAo(vec3 pos, vec3 d1, vec3 d2, float res) {\n\td1 *= res;\n\td2 *= res;\n\tvec4 side = vec4(map(pos + d1), map(pos + d2), map(pos - d1), map(pos - d2));\n\tvec4 corner = vec4(map(pos + d1 + d2), map(pos - d1 + d2), map(pos - d1 - d2), map(pos + d1 - d2));\n\tside = step(side, vec4(0.));\n\tcorner = step(corner, vec4(0.));\n\tvec4 ao;\n\tao.x = vertexAo(side.xy, corner.x);\n\tao.y = vertexAo(side.yz, corner.y);\n\tao.z = vertexAo(side.zw, corner.z);\n\tao.w = vertexAo(side.wx, corner.w);\n\treturn 1.0 - ao;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n\tvec2 p = ( fragCoord.xy * 2. - iResolution.xy )/ min(iResolution.x, iResolution.y);\n\n\tvec3 col = vec3(0.0);\n\t//col.xy = p;\n\t\n\tfloat speed = .5 * iTime;\n\t\n\tvec3 cp = vec3(sin(iTime) * 3., 0., -3.);\n\tcp = path(speed);\n\tvec3 t = vec3(0.);\n\tt = path(speed + .5);\n\tvec3 f = normalize(t - cp);\n\tvec3 u = vec3(0., 1., 0.);\n\tvec3 s = normalize(cross(u, f));\n\tu = normalize(cross(f, s));\n\tvec3 rd = normalize(p.x * s + p.y * u + f);\n\t\n\tfloat res = .25;\n\tvec3 mp = floor(cp / res) * res;\n\tvec3 rs = sign(rd) * res;\n\tvec3 dd = abs(1. / rd);\n\tvec3 sd = (sign(rd) * (mp - cp) + (sign(rd) * .5 + .5) * res) * dd;\n\t\n\tvec3 mask;\n\tint k;\n\tbool hit;\n\t\n\tfor(int i = 0; i < 100; i++){\n\t\tif(map(mp) < 0.){\n\t\t\thit = true;\n\t\t\tbreak;\n\t\t}\n\t\tmask = step(sd, sd.yzx) * step(sd, sd.zxy);\n\t\tsd += mask * dd * res;\n\t\tmp += mask * rs;\n\t\tk = i;\n\t}\n\t\n\tif(hit){\n\t\tfloat depth = dot(sd - dd * res, mask);\n\t\t\n\t\tvec3 uvw = fract((cp + depth * rd) / res);\n\t\tvec2 uv = vec2(dot(uvw.yzx, mask), dot(uvw.zxy, mask));\n\t\tvec2 uu = abs(uv - .5);\n\t\tfloat grid = smoothstep(.45, .5, max(uu.x, uu.y));\n        \n\t\tvec4 ambient;\n\t\tambient = voxelAo(mp - rs * mask, mask.zxy, mask.yzx, res);\n\t\tfloat interpAo = mix(mix(ambient.z, ambient.w, uv.x), mix(ambient.y, ambient.x, uv.x), uv.y);\n\t\tinterpAo = pow(interpAo, 1.0 / 3.0);\n\t\t\n\t\tfloat a = .015;\n\t\tfloat tm = floor(iTime * .2 / a) * a;\n\t\ttm = floor(tm) + smoothstep(.8, 1., fract(tm));\n\t\t//vec3 surf_col = mix(vec3(.65, .4, .95), vec3(.8), step(rand(mp + tm), .8));\n\t\tvec3 surf_col = mix(vec3(.65, .4, .95), vec3(.8), step(rand(mp), .8));\n\t\tcol += mix(surf_col, vec3(.3, .3, .3), grid);\n\t\t\n\t\tcol *= min(1., 15. / depth / depth);\n\t\tinterpAo = clamp(interpAo, 0., 1.);\n\t\tcol *= interpAo * .5 + .5;\n\t}\n\t\n\tcol = sqrt(col);\n\t\n    fragColor = vec4(col,1.0);\n\n}","name":"Image","description":"","type":"image"}]}