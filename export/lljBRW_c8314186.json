{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"buffer","id":"4dXGR8","filepath":"/media/previz/buffer00.png","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"code":"float drawCircle(vec2 p, float d, vec2 uv)\n{\n    return (distance(p, uv) <= d) ? 1. : 0.;\n}\n\nfloat drawLine(vec2 p1, vec2 p2, vec2 uv, float a)\n{\n    float one_px = 1. / iResolution.x;\n    float d = distance(p1, p2);\n    float duv = distance(p1, uv);\n\n    float r = 1.-floor(1.-(a*one_px)+distance (mix(p1, p2, clamp(duv/d, 0., 1.)),  uv));\n        \n    return r;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;    \n    vec4 color = texture(iChannel0, uv);\n    \n    vec2 PL = vec2(.5+sin(iTime)*.2,.5+cos(iTime)*.2);\n\tfloat light = pow(distance(uv, PL)*1.2, .2);\n    float samples = 20.;\n    \n    float shade = 0.;\n    \n    //debug points\n    float debugCircles = 0.;\n    vec2 debugPoint = vec2(.9);\n    \n    for (float i = 0.; i < samples; i++)\n    {\n        shade += floor(texture(iChannel0, mix(uv, PL, i/samples)).x);\n        \n        //debug points\n        if (drawLine(debugPoint, PL, uv, 2.) == 1. && distance(mix(debugPoint, PL, i/samples), uv) < 0.0015)\n        {\n                debugCircles += drawCircle(mix(debugPoint, PL, i/samples), .1, uv);            \n        }\n    }\n    \n    //debug points\n    debugCircles += 0.*drawLine(debugPoint, PL, uv, 1.);\n    shade = clamp(shade, 0., 1.);\n    \n    vec4 render;\n    \n    if (texture(iChannel0, vec2(0.,0.)).x < 1.)\n    {\n        render = vec4(color.x + debugCircles, 1.-light + debugCircles*shade, shade, 0.);\n    }\n    else\n    {\n        render = vec4(1.-light)*vec4(1., .95, .4, 1.)/*light color*/ * 1.-color.x - shade + (1.-color.x)*shade*vec4(.0, .0, 1.2, 1. )/*shade color*/;\n        render = render * floor(uv.x+.9) + color.x;\n    }\n    \n\tfragColor = render;\n}","name":"Image","description":"","type":"image"},{"outputs":[{"channel":0,"id":"4dXGR8"}],"inputs":[{"channel":0,"type":"buffer","id":"4dXGR8","filepath":"/media/previz/buffer00.png","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"code":"float drawCircle(vec2 p, float d, vec2 uv, float color)\n{\n    return (distance(p, uv) <= d) ? color : 0.;\n}\n\nfloat drawpx (float x, float y, vec2 coord, float color)\n{\n  return (trunc(coord.x) == x && trunc(coord.y) == y) ? color : 0. ;    \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 mouse = vec2(iMouse.xy/iResolution.xy);\n    float color = texture(iChannel0, vec2(0.,0.)).x;\n    vec4 level = texture(iChannel0, uv);\n    \n    if (mouse.x < 0.1 && mouse.y < .5)\n    {\n        color = 1.;\n    }\n    else if (mouse.x < 0.1 && mouse.y >= .5)\n    {\n        color = -1.0;\n    }\n    else\n    {\n    \tlevel += drawCircle(mouse, .02, uv, color);\n    }\n    \n    float palette = floor(-uv.x+1.1) * (1.-floor(uv.y+.5)+.1);\n    palette = palette *(1.-drawpx(0.,0., fragCoord.xy, 1.)); //clear memory\n    palette = palette + drawpx(0.,0., fragCoord.xy, (iTime < 0.1) ? 1. : color); //write memory\n    \n    fragColor = mix(vec4(palette), clamp(level, 0., 1.), floor(uv.x+.9));\n}","name":"Buffer A","description":"","type":"buffer"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":true,"mFlagMusicStream":false},"info":{"id":"lljBRW","date":"1514892287","viewed":218,"name":"2D paint shadow tracer","username":"Loeizd","description":"Use the mouse to paint on canvas, the palette on the side to erase/paint elements.","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["2d","shadow","paint"],"hasliked":0,"parentid":"","parentname":""}}