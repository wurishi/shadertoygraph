{"ver":"0.1","info":{"id":"XfSXz3","date":"1706594231","viewed":110,"name":"Correct Normal of sin wave 2D","username":"Chango","description":"a mathematical correction of [url]https://www.shadertoy.com/view/lf2SRG[/url]\nThe correction part is after //!!! ","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d","wave","water"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float y = f(uv,iTime);\n    \n    \n    //!!!\n    //since we're 2D,so you can't normalize(vec2) it,it'll be wrong.because we lack \n    //a dimonson y(with u,v).\n    \n\t\t\tvec2 n = -normalize(vec3(\n\t\t\t\tf1(uv ,iTime),\n\t\t\t\tf2(uv ,iTime),\n                -1.\n\t\t\t\t)).xy;\n                \n                \n            \n    \n    \n    //!!! numerical form.\n    /*\n    float delta = 0.0001f;\n\tvec2 n = normalize(vec3(\n            (f(uv + vec2(delta, 0.),iTime) - f(uv - vec2(delta, 0.),iTime))/2./delta,\n\t\t\t(f(uv + vec2( 0., delta),iTime) - f(uv - vec2(0., delta),iTime))/2./delta,\n            -1.\n            )).xy;\n            */\n            \n    vec3 rayIn = normalize(vec3(uv*1.0,0) - vec3(0.0,0.0,2.5));\n    vec3 rayRefra = refract (rayIn,vec3(n,1.0),1.1);//mix(1.0,1.1,fract(0.1*iTime)));\n   \n                \n    // Time varying pixel color\n    //vec3 col1 = texture(iChannel0,uv+DISTORTION*n ).xyz;\n    vec3 col1 = texture(iChannel0,uv+DISTORTION*rayRefra.xy ).xyz;\n    //vec3 col2 = texture(iChannel0,uv).xyz;\n    vec3 col = col1;//mix(col2,col1,length(n));\n\n    // Output to screen\n    if(uv.x<0.75)\n    {\n        fragColor = vec4(col,1.0);\n    }\n    else\n    {\n        fragColor = vec4((n+1.)*0.5,0.,1.0);\n        if(uv.y<0.5)\n        {\n            fragColor = vec4(vec3(y*10.0),1.0);\n        }\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define WAVEFreq 44.\n#define WAVEMoveSpeed 2.0\n#define DISTORTION 0.05\n#define WAVEHeight 0.03\nfloat f( vec2 p ,float t)\n{  \n    return WAVEHeight*sin(WAVEFreq*length(p-0.5)-WAVEMoveSpeed*t);\n}\n\n//!!! a complete version of derivative,compare to the last version:\n//https://www.shadertoy.com/view/lf2SRG\n\nfloat f1( vec2 p ,float t)\n{\n    return WAVEHeight*WAVEFreq/length(p-0.5)*(p.x-0.5)*cos(WAVEFreq*length(p-0.5)-WAVEMoveSpeed*t);\n}\n\nfloat f2( vec2 p ,float t)\n{\n    return WAVEHeight*WAVEFreq/length(p-0.5)*(p.y-0.5)*cos(WAVEFreq*length(p-0.5)-WAVEMoveSpeed*t);\n}","name":"Common","description":"","type":"common"}]}