{"ver":"0.1","info":{"id":"mdVSWz","date":"1681990596","viewed":208,"name":"font_logging","username":"kinakomoti","description":"log","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["font"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define FontWidth 8\n#define FontHeight 8\n#define LineMaxLength 40\n\nfloat hash11(float s) {\n    return fract(sin(s) * 43758.5453123);\n}\n\nvec3 hash13(float s) {\n    return fract(sin(vec3(s * 194.2, s * 293.2, s * 394.2)) * 43758.5453123);\n}\n\nfloat hash21(vec2 s) {\n    return fract(sin(dot(s, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nivec2 font_data[94] = ivec2[](\n    //0\n    ivec2(0x00000000,0x00000000), //space\n\n    //1~10\n    ivec2(0x7e91897e,0x00000000), //0\n    ivec2(0x01ff4121,0x00000000), //1\n    ivec2(0x71898543,0x00000000), //2\n    ivec2(0x6e919142,0x00000000), //3\n    ivec2(0x08ff4838,0x00000000), //4\n    ivec2(0x8e9191f2,0x00000000), //5\n    ivec2(0x0e91916e,0x00000000), //6\n    ivec2(0xc0b08f80,0x00000000), //7\n    ivec2(0x6e91916e,0x00000000), //8\n    ivec2(0x6e919162,0x00000000), //9\n\n    //11~36\n    ivec2(0x1e11110e,0x00000001), //a\n    ivec2(0x0e11117f,0x00000000), //b\n    ivec2(0x0a11110e,0x00000000), //c\n    ivec2(0x7f11110e,0x00000000), //d\n    ivec2(0x0815150e,0x00000000), //e\n    ivec2(0x48483f08,0x00000000), //f\n    ivec2(0x3e494930,0x00000000), //g\n    ivec2(0x0708087f,0x00000000), //h\n    ivec2(0x012f0900,0x00000000), //i\n    ivec2(0x5e111102,0x00000000), //j\n    ivec2(0x000b047f,0x00000000), //k\n    ivec2(0x017f4100,0x00000000), //l\n    ivec2(0x0807080f,0x00000007), //m\n    ivec2(0x0708080f,0x00000000), //n\n    ivec2(0x06090906,0x00000000), //o\n    ivec2(0x1824243f,0x00000000), //p\n    ivec2(0x3f242418,0x00000000), //q\n    ivec2(0x0010081f,0x00000000), //r\n    ivec2(0x0012150d,0x00000000), //s\n    ivec2(0x11113e10,0x00000000), //t\n    ivec2(0x0f01010e,0x00000000), //u\n    ivec2(0x000e010e,0x00000000), //v\n    ivec2(0x010e010e,0x0000000f), //w\n    ivec2(0x0a040a11,0x00000011), //x\n    ivec2(0x3e090930,0x00000000), //y\n    ivec2(0x00191513,0x00000000), //z\n\n    //36~63\n    ivec2(0x7f88887f,0x00000000), //A\n    ivec2(0x6e9191ff,0x00000000), //B\n    ivec2(0x4281817e,0x00000000), //C\n    ivec2(0x7e8181ff,0x00000000), //D\n    ivec2(0x919191ff,0x00000000), //E\n    ivec2(0x909090ff,0x00000000), //F\n    ivec2(0x4685817e,0x00000000), //G\n    ivec2(0xff1010ff,0x00000000), //H\n    ivec2(0x0081ff81,0x00000000), //I\n    ivec2(0x80fe8182,0x00000000), //J\n    ivec2(0x413608ff,0x00000000), //K\n    ivec2(0x010101ff,0x00000000), //L\n    ivec2(0x601060ff,0x000000ff), //M\n    ivec2(0x0c1060ff,0x000000ff), //N\n    ivec2(0x7e81817e,0x00000000), //O\n    ivec2(0x609090ff,0x00000000), //P\n    ivec2(0x7f83817e,0x00000001), //Q\n    ivec2(0x619698ff,0x00000000), //R\n    ivec2(0x4e919162,0x00000000), //S\n    ivec2(0x80ff8080,0x00000080), //T\n    ivec2(0xfe0101fe,0x00000000), //U\n    ivec2(0x0e010ef0,0x000000f0), //V\n    ivec2(0x031c03fc,0x000000fc), //W\n    ivec2(0x340834c3,0x000000c3), //X\n    ivec2(0x300f30c0,0x000000c0), //Y\n    ivec2(0xe1918d83,0x00000081), //Z\n\n    //63~\n    ivec2(0x00007d00,0x00000000), //!\n    ivec2(0x60006000,0x00000000), //\"\n    ivec2(0x3f123f12,0x00000012), //#\n    ivec2(0x52ff5224,0x0000000c), //$\n    ivec2(0x33086661,0x00000043), //%\n    ivec2(0x374d5926,0x00000001), //&\n    ivec2(0x00006000,0x00000000), //'\n    ivec2(0x0081423c,0x00000000), //(\n    ivec2(0x003c4281,0x00000000), //)\n    ivec2(0x00143814,0x00000000), //*\n    ivec2(0x00103810,0x00000000), //+\n    ivec2(0x00020100,0x00000000), //,\n    ivec2(0x08080808,0x00000000), //-\n    ivec2(0x00000100,0x00000000), //.\n    ivec2(0x30080601,0x00000040), ///\n    ivec2(0x00240000,0x00000000), //:\n    ivec2(0x00240200,0x00000000), //;\n    ivec2(0x41221408,0x00000000), //<\n    ivec2(0x00141414,0x00000000), //=\n    ivec2(0x08142241,0x00000000), //>\n    ivec2(0xa999423c,0x0000007c), //@\n    ivec2(0x008181ff,0x00000000), //[\n    ivec2(0x06083040,0x00000001), //\\\n    ivec2(0x00000000,0x00000000), //] 何故か表示されない\n    ivec2(0x00ff8181,0x00000000), //]\n    ivec2(0x20402010,0x00000010), //^\n    ivec2(0x01010101,0x00000000), //_\n    ivec2(0x40408080,0x00000000), //`\n    ivec2(0x41413608,0x00000000), //{\n    ivec2(0x00ff0000,0x00000000), //|\n    ivec2(0x08364141,0x00000000), //}\n    ivec2(0x08101008,0x00000010) //~\n\n);\n\n#define ID 86\n\nvec3 font(vec2 uv,int id){\n    vec2 uv1 = uv;\n    uv = uv * 8.0;\n    ivec2 texel = ivec2(uv);\n    int bit_offset = texel.x * FontWidth + texel.y;\n\n    int s,t;\n    s = font_data[id].x;\n    t = font_data[id].y;\n\n    int tex = 0;\n    \n    if(bit_offset <= 31){\n        s = s >> bit_offset;\n        s = s & 0x00000001;\n        tex = s;\n    }\n    else{\n        t = t >> (bit_offset - 32);\n        t = t & 0x00000001;\n        tex = t;\n    }\n\n    tex = (abs(uv1.x - 0.5) < 0.5 && abs(uv1.y - 0.5) < 0.5) ? tex : 0;\n    return vec3(tex); \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{ \n    vec2 uv = fragCoord / iResolution.y;\n    vec2 uv1 = uv * 40.0;\n    \n    uv1.y -= floor(iTime) * 1.2;\n\n    ivec2 index = ivec2(uv1 / vec2(0.8,1.2));\n    uv1.x = mod(uv1.x,0.8);\n    uv1.y = mod(uv1.y,1.2);\n    \n    int isLine = 10 - int(floor(iTime));\n    bool line_mask = (float(LineMaxLength) * fract(iTime) > float(index.x)) ? true : false;\n\n    vec2 rnd_index = vec2(hash11(float(index.y)),hash21(vec2(index)));\n    int max_char = int(rnd_index.x * float(LineMaxLength));\n\n    int char_index = int(rnd_index.y * 94.0);\n    //int char_index = int(rnd_index.y * 100.0); //Bug\n\n    char_index = (index.x < max_char) ? char_index : 0;\n\n    vec3 col = vec3(font(uv1,char_index)); \n\n    if(isLine == index.y) \n    {\n        col *= float(line_mask);\n    }\n    else{\n        col *= float(index.x < LineMaxLength);\n        col *= float(index.y > isLine);\n    }\n\n    bool debug = false;\n    if(debug){\n        vec2 uv2 = uv;\n        col = vec3(font(uv2,ID));\n    } \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}