{"ver":"0.1","info":{"id":"fly3Rm","date":"1637346016","viewed":174,"name":"PS2 like Clock","username":"Raxmo","description":"This is my own version of the systems clock on the PS2. Mostly just for my own amusement. Always thought it looked cool.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["clocktime"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float Pi = atan(0.0, -1.0);\nconst float Tau = 2.0 * Pi;\n\nconst float psec = 1.0 / Tau;\nconst float pmin = Tau / 60.0;\nconst float phour = pmin / 60.0;\nconst float pday = phour / 12.0;\n//::::::::::::::::::::::::::::::::::::::::::://\n#define time iDate.w\n\n//=====================================================================//\n\nfloat Orbs(vec2 uv)\n{\n    float val = 0.0;\n    vec2 p = vec2(0.0);\n    vec2 tuv = uv;\n    //......................................//\n    \n    tuv.x = cos(time * phour) * uv.x - sin(time * phour) * uv.y;\n    tuv.y = sin(time * phour) * uv.x + cos(time * phour) * uv.y;\n    \n    for(float i = 1.0; i <= 7.0; i++)\n    {\n        float t = time * pmin;\n        \n        p.x = sin(t * i) * cos(t);\n        p.y = cos(t * i);\n        \n        \n        \n        vec2 q = tuv - p;\n        \n        float k = 0.001;\n        \n        val += k / (dot(q, q) + k);\n    }\n    \n    //......................................//\n    return val;\n}\n\nfloat Ring(vec2 uv)\n{\n    float val = 0.0;\n    float T = 0.0625;\n    float r0 = 1.0 - T;\n    float r1 = 1.0 + T;\n    float thick = (r1 - r0) / 2.0;\n    float avg = (r0 + r1) / 2.0;\n    \n    //,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,//\n    vec2 o = uv;\n    o.x = cos(time * pday) * uv.x - sin(time * pday) * uv.y;\n    o.y = sin(time * pday) * uv.x + cos(time * pday) * uv.y;\n    \n    float r = length(o);\n    float a = atan(o.x, o.y);\n    //......................................//\n    float ta = abs(a);\n    \n    val = ta / Pi;\n    \n    val *= 12.0 / 11.0;\n    float val2 = val * 26.0;\n    val = 1.0 - val;\n    \n    float val3 = 1.0 - fract(a * 13.0 / Tau);\n    val3 = 1.0 - abs((val3 - 0.5) * 2.0);\n    val3 = 1.0 - val3 * 5.0;\n    val3 = val3 * float(ta / Pi > 0.1);\n    \n    val = min(val, val2);\n    //val = max(val, val3);\n    val = clamp(val, 0.0, 1.0);\n    \n    float rval = abs(r - avg) / thick;\n    \n    val = (val - rval) * (float(r >= r0 && r <= r1)) / 2.0;\n    \n    val = clamp(val, 0.0, 1.0);\n    val *= 2.0;\n    //......................................//\n    return val;\n}\n\nfloat Decorations(vec2 uv)\n{\n    float val = 0.0;\n    float r = length(uv);\n    float a = atan(uv.y, uv.x);\n    //.............................................//\n    \n    a = fract(a * 12.0 / Tau);\n    a = (a - 0.5) * 2.0;\n    a = 1.0 - abs(a);\n    \n    \n    r -= 0.95;\n    r -= a / 4.0;\n    r *= 2.0;\n    \n    float r0 = r;\n    r0 += pow(a * 10.0, 0.5);\n    r0 -= 1.50;\n    r0 = 1.0 - r0;\n    \n    r = min(r, r0);\n    \n    \n    val = r;\n    //.............................................//\n    return clamp(val, 0.0, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -2 to 2)\n    vec2 uv = 4.0 * (fragCoord - 0.5 * iResolution.xy) / min(iResolution.x, iResolution.y);\n    float val = 0.0;\n    vec3 col = vec3(val);\n    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - //\n    \n    val += Orbs(uv);\n    val += Ring(uv);\n    val += Decorations(uv);\n    \n    val = clamp(val, 0.0, 1.0);\n    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - //\n    col = vec3\n    (\n        pow(val, 1.25),\n        pow(val, 2.5),\n        pow(val, 1.0)\n    );\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}