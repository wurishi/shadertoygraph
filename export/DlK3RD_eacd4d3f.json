{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"#define MS 150\n#define MT 100.\n#define mD .000001\n\nmat2 Rot(float a){\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c,-s,s,c);\n\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat sdSphere(vec3 p, vec4 s){\n    return length(p-s.xyz)-s.w;\n\n}\n\nvec4 Union(vec4 a, vec4 b){\n    return a.x < b.x ? a : b;\n}\n\nvec4 Intersection(vec4 a, vec4 b){\n    return max(a, b);\n}\n\nvec4 Substraction(vec4 a, vec4 b){\n    float sd = max(-a.x, b.x);\n    vec3 col = b.x >= sd ? b.yzw : a.yzw;\n    return vec4(sd, col);\n}\n\nvec4 GetDist(vec3 p){\n    \n    \n    //Box\n    vec3 pBox = p;\n    pBox -= vec3(0.,0.,0);\n    float b = sdBox(pBox, vec3(.75));\n    vec4 box = vec4(b, vec3(.9));\n    \n    //Sphere\n    vec3 pSph = p;\n    float s = sdSphere(pSph, vec4(0,0,0,1.));\n    vec4 sphere = vec4(s, vec3(.9));\n    \n    //Holes\n    vec3 pH = p;\n    \n        //1\n    float s1 = sdSphere(pH, vec4(.5,0,0,.28));\n        //2\n    float s21 = sdSphere(pH, vec4(.3,-.5,0,.28));\n    float s22 = sdSphere(pH, vec4(-.3,-.5,0,.28));\n        //3\n    float s31 = sdSphere(pH, vec4(.3,0.3,-.5,.28));\n    float s32 = sdSphere(pH, vec4(-.0,0,-.5,.28));\n    float s33 = sdSphere(pH, vec4(-.3,-0.3,-.5,.28));\n        //4\n    float s41 = sdSphere(pH, vec4(.3,.3,.5,.28));\n    float s42 = sdSphere(pH, vec4(-.3,.3,.5,.28));\n    float s43 = sdSphere(pH, vec4(-.3,-.3,.5,.28));\n    float s44 = sdSphere(pH, vec4(.3,-.3,.5,.28));\n        //5\n    float s51 = sdSphere(pH, vec4(.0,.5,0.,.28));\n    float s52 = sdSphere(pH, vec4(.3,.5,0.3,.28));\n    float s53 = sdSphere(pH, vec4(-.3,.5,-0.3,.28));\n    float s54 = sdSphere(pH, vec4(-.3,.5,0.3,.28));\n    float s55 = sdSphere(pH, vec4(.3,.5,-0.3,.28));\n        //6\n    float s61 = sdSphere(pH, vec4(-.5,-.3,0,.28));\n    float s62 = sdSphere(pH, vec4(-.5,-.3,-.4,.28));\n    float s63 = sdSphere(pH, vec4(-.5,-.3,.4,.28));\n    float s64 = sdSphere(pH, vec4(-.5,.3,0,.28));\n    float s65 = sdSphere(pH, vec4(-.5,.3,-0.4,.28));\n    float s66 = sdSphere(pH, vec4(-.5,.3,.4,.28));\n    \n    float S = s1\n              * s21 * s22\n              * s31 * s32 * s33\n              * s41 * s42 * s43 * s44\n              * s51 * s52 * s53 * s54 * s55\n              * s61 * s62 * s63 * s64 * s65 * s66; \n    vec4 h = vec4(S, vec3(0));\n    \n    vec4 r = Intersection(sphere, box);\n    r = Substraction(h*40., r);\n    \n    return r;\n}\n\nvec4 Ray(vec3 ro, vec3 rd){\n    float dist = 0.;\n    vec3 col;\n    \n    for(int i = 0; i < MS; i++){\n        vec3 p = ro + rd * dist;\n        float d = GetDist(p).x;\n        dist += d;\n        if(dist > MT){\n            col = vec3(-1);\n            break;\n        }\n        \n        if(d < mD){\n            col = GetDist(p).yzw;\n            break;\n        }\n    }\n    return vec4(dist, col);\n\n}\n\nvec3 Normals(vec3 p){\n    vec2 d = vec2(mD, 0);\n    float x = (GetDist(p+d.xyy)-GetDist(p-d.xyy)).x;\n    float y = (GetDist(p+d.yxy)-GetDist(p-d.yxy)).x;\n    float z = (GetDist(p+d.yyx)-GetDist(p-d.yyx)).x;\n    return normalize(vec3(x,y,z));\n}\n\nfloat GetLight(vec3 p, vec3 light){\n    vec3 n = Normals(p);\n    vec3 l = normalize(light-p);\n    float diff = clamp(dot(n, l)*.5+.7, 0., 1.);\n    //float d = Ray(p+n*2.*mD, l).x;\n    //if(d < length(light-p))diff*=0.1;\n    return diff;\n}\n\nvec3 GetRayDir(vec2 uv, vec3 ro, vec3 l, float z){\n\n    vec3 f = normalize(l-ro);\n    vec3 r = normalize(cross(vec3(0,1,0), f));\n    vec3 u = cross(f, r);\n    vec3 c = ro + f*z;\n    vec3 i = c + uv.x*r + uv.y*u;\n    return normalize(i-ro);\n\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec3 col = vec3(0);\n    vec2 m = iMouse.xy/iResolution.xy;\n    float t = iTime * 0.3;\n    \n    vec3 ro = vec3(0,1,-3);\n    \n    ro.yz *= Rot(-m.y*2.+.4);\n    ro.xz *= Rot(-m.x*6.2831);\n    ro.yz *= Rot(t);\n    \n    vec3 light = vec3(5,10,3);\n    vec3 lookat = vec3(0, 0, 0);\n    float zoom = .4;\n    \n    vec3 rd = GetRayDir(uv, ro, lookat, zoom);\n    \n    vec4 r = Ray(ro, rd);\n    vec3 p = ro + rd * r.x;\n    float l = GetLight(p, light);\n    \n    \n    col += l*r.yzw;\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"DlK3RD","date":"1683656774","viewed":20,"name":"SimpleDice","username":"Raistlin_fuego","description":"shaderlearning","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["ray","dice","shaderlearning"],"hasliked":0,"parentid":"","parentname":""}}