{"ver":"0.1","info":{"id":"4t2fWc","date":"1517418873","viewed":124,"name":"HexPain","username":"mooped","description":"Hexagonate a distance field","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["hexes"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float dist(vec2 uv)\n{\n    return texture(iChannel0, uv).r;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalize pixel coordinates (from 0 to 1), then tile\n    vec2 uv = (fragCoord/iResolution.xy) * 2.0;\n    \n    // Distance field lookup\n    float d = dist(uv);\n    vec2 n = normalize(vec2(dFdx(d), dFdy(d)));\n    //vec2 n = normalize(vec2(d - dist(uv + vec2(0.0, 0.01)), d - dist(uv + vec2(0.01, 0.0))));\n    \n    // Work out the angle of the normal\n    float ang = (atan(n.y, n.x) / 3.1415 + 1.0) * 0.5;\n    \n    // And quantize the angle to 0, 30, 60 degrees\n    float qang = floor(ang * 6.f) / 6.f;\n    qang = qang * 2.f - 1.f;\n    \n    const float seg = (3.1415 * 2.f) / (12.f);\n    \n    float v = dot(uv, vec2(sin(3.1415 * (qang) + seg), cos(3.1415 * (qang) + seg)));\n    \n    vec3 col = vec3(sin((v + iTime  * 0.1f) * 100.f));\n\n    // Output\n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}