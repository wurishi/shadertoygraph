{"ver":"0.1","info":{"id":"ddXGRS","date":"1666303461","viewed":70,"name":"RayMarching IFS fractal 2","username":"legoushque","description":"one more IFS fractal\n\ni'm trying to color it using orbit traps but I'm not sure I'm doing it right :)","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","fractal"],"hasliked":0,"parentid":"csX3DH","parentname":"RayMarching IFS fractal"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n#define TAU 6.283185\n#define PI 3.141592\n#define S smoothstep\n#define T iTime*TAU*0.1\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\n\nfloat GetDist(vec3 p, inout vec3 orbit) {\n    vec3 v = vec3(0, 2.-cos(T), 2.-sin(T));\n    //orbit.y = sqrt(length(v));\n    v = normalize(v);\n    vec3 n = normalize(v);\n    float scale = 2.5;\n    p *= scale;\n    float ref;\n    float iterfactor;\n    float lp;\n    int maxiter = 15;\n    orbit.x = length(p);\n    orbit.z = 5.;\n    orbit.y = -PI;\n    \n    \n    for(int i = 0; i < maxiter; i++){\n        lp = length(p);\n        p = abs(p);\n        iterfactor = 1.-pow(float((i))/float(maxiter), 0.1);\n        \n        n = normalize(vec3(1.4+sin(iterfactor*PI+T), 1.5+sin(iterfactor*PI+T), 1.4+cos(iterfactor*PI+T)));\n        if(i%3 == 0){\n            n = n.zxy;\n        } else if(i%3 == 1){\n            n = n.yzx;\n        }\n        ref = dot(p-vec3(n)*1., n);\n        orbit.x = min(lp, orbit.x);\n        orbit.z = min(orbit.z, (ref));\n        orbit.y = (max(atan(n, p).x, orbit.y));\n        p -= 2.*n*max(0., ref);\n        float k = 2.;\n        p *= k;\n        p -= v*iterfactor;\n        scale *= k;\n    }\n    orbit.y = sin(orbit.y+T);\n    orbit *= 1.2412;\n    \n    float d = (length(p)-30.)/scale;\n    \n    return d;\n}\n\nfloat GetDist(vec3 p){\n    vec3 fake;\n    return GetDist(p, fake);\n\n}\n\nfloat RayMarch(vec3 ro, vec3 rd, inout int i, inout float mindist, inout vec3 orbit) {\n\tfloat dO=0.;\n    mindist = length(ro);\n    //orbit += mindist;\n    for(i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p, orbit);\n        \n        if(dS < mindist) mindist = dS;\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    orbit = sin(orbit*TAU)*0.5+0.5;\n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    vec2 e = vec2(.001, 0);\n    vec3 n = GetDist(p) - \n        vec3(GetDist(p-e.xyy), GetDist(p-e.yxy),GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 \n        f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u;\n    return normalize(i);\n}\n\nvec3 quad_bezier(vec3 a, vec3 b, vec3 c, vec3 t){\n    return mix(mix(a, b, t), mix(a, b, t), t);\n\n}\n\nvec3 BG(vec3 rd){\n    vec3 a = vec3(0.3, 0.3, 0.6);\n    vec3 b = vec3(0.5, 0.1, 0.3);\n    return mix(a, b, dot(rd, vec3(0, cos(T), sin(T))) * 0.5 + 0.5);\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = (iMouse.xy-0.5*iResolution.xy)/iResolution.xy;\n    //m *= 0.;\n\n    vec3 ro = vec3(3.*cos(T), 0.5, 3.*sin(T));\n    //ro.yz *= Rot(-m.y*PI);\n    //ro.xz *= Rot(-m.x*TAU);\n    \n    vec3 rd = GetRayDir(uv, ro, vec3(0,0.,0), 1.);\n    vec3 col = vec3(0);\n    int i = 0;\n    float mindist;\n    vec3 orbit_trap = vec3(0.);;\n    float d = RayMarch(ro, rd, i, mindist, orbit_trap);\n    float iter = float(i)/float(MAX_STEPS);\n    vec3 a = vec3(0.9, 0.5, 0.1);\n    vec3 b = vec3(0.2, 0.9, 0.5);\n    vec3 c = vec3(0.2, 0.3, 0.9);\n    col += BG(rd);\n    col *= S(SURF_DIST*10., SURF_DIST*20., mindist);\n    orbit_trap = smoothstep(-0.3, 0.9, orbit_trap);\n    \n    if(d<MAX_DIST) {\n        vec3 p = ro + rd * d;\n        vec3 n = GetNormal(p);\n        vec3 r = reflect(rd, n);\n\n        float dif = dot(n, normalize(vec3(1,2,3)))*.5+.5;\n        col = vec3(1)*pow(1.-iter, 5.)*(orbit_trap.x*a + orbit_trap.y*b + orbit_trap.z*c);\n    }\n    col = pow(col, vec3(.4545));\t// gamma correction\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}