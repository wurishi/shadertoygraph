{"ver":"0.1","info":{"id":"XcGcRw","date":"1731597150","viewed":680,"name":"other universe","username":"nayk","description":"source https://www.shadertoy.com/view/XXyGzh https://www.shadertoy.com/view/XlfGRj and other from glslsandbox","likes":20,"published":3,"flags":1,"usePreview":0,"tags":["fractal","space","cosmos"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define iterations 13\n#define formuparam 0.50\n\n#define volsteps 15\n#define stepsize 0.10\n\n#define zoom   1.800\n#define tile   0.850\n#define speed  0.010 \n\n#define brightness 0.0015\n#define darkmatter 0.300\n#define distfading 0.730\n#define saturation 0.850\n#define NUM_LAYERS 16.\n#define ITER 23\n\nvec4 tex(vec3 p)\n{\n    float t = iTime*0.1+78.;\n    vec4 o = vec4(p.xyz,3.*sin(t*.1));\n    vec4 dec = vec4 (1.,.9,.1,.15) + vec4(.06*cos(t*.1),0,0,.14*cos(t*.23));\n    for (int i=0 ; i++ < ITER;) o.xzyw = abs(o/dot(o,o)- dec);\n    return o;\n}\n\n\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 ro, in vec3 rd )\n{\n\t//get coords and direction\n\tvec3 dir=rd;\n\tvec3 from=ro;\n\t\n\t//volumetric rendering\n\tfloat s=0.1,fade=1.;\n\tvec3 v=vec3(0.);\n\tfor (int r=0; r<volsteps; r++) {\n\t\tvec3 p=from+s*dir*.5;\n\t\tp = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\n\t\tfloat pa,a=pa=0.;\n\t\tfor (int i=0; i<iterations; i++) { \n\t\t\tp=abs(p)/dot(p,p)-formuparam; \n            p.xy*=mat2(cos(iTime*0.01), sin(iTime*0.01), -sin(iTime*0.01),cos(iTime*0.01));// the magic formula\n\t\t\ta+=abs(length(p)-pa); // absolute sum of average change\n\t\t\tpa=length(p);\n\t\t}\n\t\tfloat dm=max(0.,darkmatter-a*a*.001); //dark matter\n\t\ta*=a*a; // add contrast\n\t\tif (r>6) fade*=1.413-dm; // dark matter, don't render near\n\t\n\t\tv+=fade;\n\t\tv+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\n\t\tfade*=distfading; // distance fading\n\t\ts+=stepsize;\n\t}\n\tv=mix(vec3(length(v)),v,saturation); //color adjust\n\tfragColor = vec4(v*.03,1.);\t\n}\n\n#define NUM_LAYERS3 24.\nfloat it= 23.0;\nfloat happy_star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\nvec4 tex2(vec3 p)\n{\n    float t = 0.5*iTime+78.;   \n    vec4 o = vec4(p.xyz,3.*sin(t*.1));\n    vec4 dec = vec4 (1.,.9,.1,.15) + vec4(.06*cos(t*.1),0,0,.14*cos(t*.23));\n    for (int i=0 ; i++ < int(it);) o.xzyw = abs(o/dot(o,o)- dec);\n    return o;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t//get coords and direction\n\tvec2 uv=fragCoord.xy/iResolution.xy-.5;\n    \tvec2 uv2=fragCoord.xy/iResolution.xy-0.5;\n   uv2-=0.2;\n\tvec2 u = fragCoord;\n    vec4 o=fragColor;\n     vec2 v = iResolution.xy;\n         u = .2*(u+u-v)/v.y;    \n         \n    vec4 z = o = vec4(1,2,3,0);\n     \n    for (float a = .5, t = iTime*0.1, i; \n         ++i < 19.; \n         o += (1. + cos(z+t)) \n            / length((1.+i*dot(v,v)) \n                   * sin(1.5*u/(.5-dot(u,u)) - 9.*u.yx + t))\n         )  \n        v = cos(++t - 7.*u*pow(a += .03, i)) - 5.*u,                 \n        u += tanh(40. * dot(u *= mat2(cos(i + .02*t - vec4(0,11,33,0)))\n                           ,u)\n                      * cos(1e2*u.yx + t)) / 2e2\n           + .2 * a * u\n           + cos(4./exp(dot(o,o)/1e2) + t) / 3e2;\n              \n     o = 25.6 / (min(o, 13.) + 164. / o) \n       - dot(u, u) / 250.;\n\tvec3 dir=vec3(uv*zoom,1.);\n\tfloat time=iTime*speed+.25;\n vec2 uv3 = (fragCoord-iResolution.xy*.5)/iResolution.y;\n \n    vec3 col3 = vec3(0);   \n    float t3= iTime* .05;\n    \n\tfor(float i=0.; i<=1.; i+=1./NUM_LAYERS)\n    {\n        float d = fract(i+t3); // depth\n        float s = 1.0*mix(5.,.5,d); // scale\n        float f = d * smoothstep(1.,.9,d); //fade\n        col3+= tex(vec3(uv3*s,i*4.)).xyz*f;\n    }\n    \n    col3/=NUM_LAYERS;\n    //col*=vec3(2.,1.0,0.1);\n    col3*=vec3(0.5,1.5,2.);\n   \tcol3=pow(col3,vec3(.6 ));  \n\t vec3 col = vec3(0);   \n    float t= iTime* .03;\n    \n\tfor(float i=0.; i<=1.; i+=1./NUM_LAYERS)\n    {\n        float d = fract(i+t); // depth\n        float s = mix(5.,.5,d); // scale\n        float f = d * smoothstep(1.,.9,d); //fade\n        col+= tex(vec3(uv*s,i*4.)).xyz*f;\n    }\n    \n    col/=NUM_LAYERS;\n    col*=vec3(2,1.,2.);\n   \tcol=pow(col,vec3(.5 ));  \n\t\n\tvec3 from=vec3(1.,.5,0.5)+col*o.xyz;\n\t\n\t\n\tmainVR(fragColor, fragCoord, from, dir);\t\n    fragColor*=vec4(col,1.);\n    fragColor+=vec4(col3*0.5,1.);\n     uv *= 2.0 * ( cos(iTime * 2.0) -2.5); // scale\n    float anim = sin(iTime * 12.0) * 0.1 + 1.0;  // anim between 0.9 - 1.1 \n    fragColor*= vec4(happy_star(uv2, anim) * vec3(0.55,0.5,0.55)*0.1, 1.0)+o;\n    fragColor*=o*2.21;\n}\n","name":"Image","description":"","type":"image"}]}