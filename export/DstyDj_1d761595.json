{"ver":"0.1","info":{"id":"DstyDj","date":"1697484568","viewed":121,"name":"Single-Pass Gaussian Blur","username":"Kampfhund","description":"Gaussian blur using one pass, kinda janky variables with the kernelSize and all but here we are. Less efficient -> O(n^2)","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["blur","gaussianblur"],"hasliked":0,"parentid":"DddyWj","parentname":"A Simple Gaussian Blur"},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float kernelSize = 9.0;\n    //the -1.0 only if it's an odd number I think idk haven't tested\n    float halfKernelSize = (kernelSize-1.0) / 2.0;\n    \n    float[] gaussian = float[] (1.0, 8.0, 28.0, 56.0, 70.0, 56.0, 28.0, 8.0, 1.0);\n    //sum of all the values in the array\n    float sum = 256.0;\n    \n    vec4 color = vec4(0.0, 0.0, 0.0, 1.0); \n    vec2 currentCoordinate = vec2(0.0, 0.0);\n    \n    for(float i = -halfKernelSize; i <= halfKernelSize; i++)\n    {\n        for(float j = -halfKernelSize; j <= halfKernelSize; j++)\n        {\n            currentCoordinate = vec2(fragCoord.x + i, fragCoord.y + j);\n            color.r += texture(iChannel0, currentCoordinate / iResolution.xy).r * (gaussian[int(j+halfKernelSize)] * gaussian[int(i+halfKernelSize)]);\n            color.g += texture(iChannel0, currentCoordinate / iResolution.xy).g * (gaussian[int(j+halfKernelSize)] * gaussian[int(i+halfKernelSize)]);\n            color.b += texture(iChannel0, currentCoordinate / iResolution.xy).b * (gaussian[int(j+halfKernelSize)] * gaussian[int(i+halfKernelSize)]);\n        }\n        //currentCoordinate = vec2(fragCoord.x + i, fragCoord.y);\n        //color.r += texture(iChannel0, currentCoordinate / iResolution.xy).r * gaussian[int(i+halfKernelSize)];\n        //color.g += texture(iChannel0, currentCoordinate / iResolution.xy).g * gaussian[int(i+halfKernelSize)];\n        //color.b += texture(iChannel0, currentCoordinate / iResolution.xy).b * gaussian[int(i+halfKernelSize)];        \n    }\n    \n    color = vec4(color.r / (sum * sum), color.g / (sum * sum), color.b / (sum * sum), 1.0);\n    fragColor = color;\n    //fragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"}]}