{"ver":"0.1","info":{"id":"XtyyRc","date":"1537044247","viewed":183,"name":"XOR RGB","username":"tholzer","description":"\nThis fork looks like a 3 layers platine layout...","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["colors","rgb","xor","platine"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// XOR_RGB.glsl\n\n// original XOR by Philemonic  https://www.shadertoy.com/view/XlGyRc\n\n#define HASH 1\n#define scale1 200.\n#define scale2 888.\n#define iterations 15\n\nfloat hash(float n) \n{\n    return fract(sin(n) * 43758.5453123); \n}\n\nfloat mbrn(float n) \n{\n    for (int i=0; i<iterations; i++) n=n*n-2.;  return n*.5; \n}\n\nfloat xor(vec2 p) \n{\n    p.x=abs(scale2 - mod(p.x,scale2*2.));\n    p*=mat2(1.,1.,-1.,1.);\n    float xor = float(int(p.x)^int(p.y));\n    if (HASH == 1) return pow(mbrn(xor/scale2),3.);\n    else           return pow(hash(xor),2.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = 1.+fragCoord/iResolution.xy;\n    uv.x *= iResolution.x/iResolution.y;                  \n    uv.x += iTime*.5;\n    uv.x += (iMouse.z>0.) ? iMouse.x : sin(iTime*.1)*2.;\n    fragColor = vec4(xor(uv*scale1),xor(uv*123.),xor(uv*99.),1.);\n}","name":"Image","description":"","type":"image"}]}