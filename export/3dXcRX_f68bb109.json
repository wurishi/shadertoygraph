{"ver":"0.1","info":{"id":"3dXcRX","date":"1585196573","viewed":70,"name":"e^z + c fractal","username":"timeeeee","description":"Escape time fractal for z <= exp(z) + c\n\nChange FUZZ to false to turn off the sparkles.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// if FUZZ is true, sample random points in each pixel instead of bottom-left corner\n#define FUZZ true\n\n// if ZOOMDEBUG is true, show areas on the screen outside (XMIN, XMAX) or (YMIN, YMAX) as red\n#define ZOOMDEBUG false\n#define XMIN 1.5\n#define XMAX 3.0\n#define YMIN 1.4\n#define YMAX 2.2\n\n#define MAX_ITERATIONS 100\n#define BAILOUT 100000.0\n\n#define WHITE vec4(1.0, 1.0, 1.0, 1.0)\n#define BLACK vec4(0.0, 0.0, 0.0, 1.0)\n#define RED vec4(1.0, 0.0, 0.0, 1.0)\n#define BLUE vec4(0.0, 0.0, 1.0, 1.0)\n\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\n\nint iterations(vec2 c) {\n    float c_real = c.x;\n    float c_imag = c.y;\n    float z_real = c_real;\n    float z_imag = c_imag;\n    float z_real_tmp;\n    int i;\n    for (i = 0; i < MAX_ITERATIONS; i++) {\n        if (z_real * z_real + z_imag * z_imag > BAILOUT)\n            break;\n        \n        \n        float ex = exp(z_real);\n        z_real_tmp = ex * cos(z_imag) + c_real;\n        z_imag = ex * sin(z_imag) + c_imag;\n        z_real = z_real_tmp;\n    }\n    return i;\n}\n\n\nvec4 iterationsToColor(int iterations) {\n    if (iterations == MAX_ITERATIONS) return BLUE;\n    \n    // fade from white at max - 1 to black by 0\n    float r = float(iterations) / float(MAX_ITERATIONS - 1);\n    return mix(BLACK, WHITE, clamp(r, 0.0, 1.0));\n}\n\n\nvec2 coordToC(vec2 pixelCoord) {\n    float xRatio = iResolution.x / (XMAX - XMIN);  // \n    float yRatio = iResolution.y / (YMAX - YMIN);\n    float ratio = min(xRatio, yRatio);\n    float xMargin = (iResolution.x - ratio * (XMAX - XMIN)) / 2.0;\n    float yMargin = (iResolution.y - ratio * (YMAX - YMIN)) / 2.0;\n    \n    // real along x axis (0, iResolution.x) -> (XMIN, XMAX)\n\tfloat cReal = (pixelCoord.x - xMargin) / (iResolution.x - 2.0 * xMargin) * (XMAX - XMIN) + XMIN;\n    \n    // imag along y axis, (0, iResolution.y) -> (YMIN, YMAX)\n    float cImag = (pixelCoord.y - yMargin) / (iResolution.y - 2.0 * yMargin) * (YMAX - YMIN) + YMIN;\n    \n    if (FUZZ) {\n        vec2 seed = vec2(cReal, cImag) + iTime;\n        cReal += (rand(seed) - .5) / ratio;\n        cImag += (rand(seed + .5) - .5) / ratio;\n    }\n    \n    return vec2(cReal, cImag);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 c = coordToC(fragCoord.xy);\n    \n    // for debugging window size:\n    if (ZOOMDEBUG && (c.x < XMIN || c.x > XMAX || c.y < YMIN || c.y > YMAX)) {\n        fragColor = RED;\n    } else {\n\t    fragColor = iterationsToColor(iterations(c));\n    }\n}","name":"Image","description":"","type":"image"}]}