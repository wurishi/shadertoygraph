{"ver":"0.1","info":{"id":"lt3yDS","date":"1533832119","viewed":296,"name":"(Temporal) Dithering","username":"matt77hias","description":"(Temporal) Dithering\n\nPart of MAGE (https://github.com/matt77hias/MAGE; https://github.com/matt77hias/MAGE/blob/master/MAGE/Shaders/shaders/backbuffer/back_buffer_PS.hlsl\n\nSee also: https://www.shadertoy.com/view/Mt3cRX","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["dithering","temporaldithering"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"uint Hash_Wang(uint key) {\n\tkey = (key ^ 61u) ^ (key >> 16u);\n\tkey = key + (key << 3u);\n\tkey = key ^ (key >> 4u);\n\tkey = key * 0x27D4EB2Du;\n\tkey = key ^ (key >> 15u);\n\treturn key;\n}\n\nfloat UniformUintToFloat(uint u) {\n\t// IEEE-754: 2^-32 = 0x2F800000\n\treturn float(u) * uintBitsToFloat(0x2F800000u);\n}\n\nconst float g_quantum_offset = 40.0f;\nconst float g_quantum_delta  = 50.0f;\nconst float g_quantization   = 1.0f / 255.0f;\nconst float g_split_speed    = 0.8f;\n\n//#define DISABLE_DITHERING\n//#define DISABLE_TEMPORAL_DITHERING\n\nvoid mainImage(out vec4 color, in vec2 fragCoord) {\n    // Compute pixel value\n    float value    = g_quantum_offset + fragCoord.x / g_quantum_delta;\n    \n    // Compute pixel noise\n    uint  index = uint(fragCoord.y * iResolution.x + fragCoord.x);\n    \n    #ifdef DISABLE_DITHERING\n    float noise = 0.0f;\n\t#else  // DISABLE_DITHERING\n    \n    #ifdef DISABLE_TEMPORAL_DITHERING\n    uint  key   = index;\n    #else  // DISABLE_TEMPORAL_DITHERING\n    uint  key   = index ^ floatBitsToUint(iTime);\n\t#endif // DISABLE_TEMPORAL_DITHERING\n    \n    uint  state = Hash_Wang(key);\n    float noise = UniformUintToFloat(state);\n    \n    #endif  // DISABLE_DITHERING\n    \n    uint  y        = uint(fragCoord.y);\n    uint  height   = uint(iResolution.y);\n    uint  split    = uint(g_split_speed * float(iFrame)) % ((height << 1u) - 2u);\n    split = (split >= height) ? ((height << 1u) - 2u) - split : split;\n    \n    if (split < y) {\n        // Region above the white seperator: with temporal dithering.\n        color      = vec4(vec3((value + noise) * g_quantization), 1.0f);\n    } \n    else if (split > y){\n        // Region below the white seperator: without temporal dithering.\n        color      = vec4(vec3(value * g_quantization), 1.0f);\n    } \n    else {\n        color      = vec4(1.0f);\n    }\n}","name":"Image","description":"","type":"image"}]}