{"ver":"0.1","info":{"id":"WltBRs","date":"1613277519","viewed":352,"name":"[live] OMZG Shader Royale","username":"w23","description":"Unfinished shader royale shader.\nAs usual, I have no idea what I'm doing. It responds to music, but it's very finicky -- it's ridiculously hard to tune parameters.\nWatch live making of this here: https://www.youtube.com/watch?v=F_gKGohc9WA","likes":24,"published":1,"flags":32,"usePreview":1,"tags":["pathtracer","feedback","live","bonzomatic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texture(iChannel0, fragCoord/iResolution.xy);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sXGRr","filepath":"/media/a/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","previewfilepath":"/media/ap/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","type":"music","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3Rr","filepath":"/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","previewfilepath":"/media/ap/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float t, dt;\n\nfloat vmax(vec3 v){return max(max(v.x,v.y),v.z);}\n#define box(v,s) vmax(abs(v) - (s))\n\n#define Rm(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n#define T(t,sz,s) texture(t,(s)/(sz))\n#define P(s) T(iChannel0, iChannelResolution[0].xy, s)\n#define N(s) T(iChannel1, iChannelResolution[1].xy, s).r\n\n#define fft(s) T(iChannel2, iChannelResolution[2].xy, s).r\n#define ffts(s) pow(texture(iChannel2,vec2(s*1., .5)/iChannelResolution[2].xy).r, 30.)\n#define ffti(s) t\n\n\nfloat h(float f) { return fract(sin(f)*45734.4378); }\n#define rep(p,s) (mod(p,s)-(s)*.5)\n\nvec3 ptrans(vec3 p) {\n  p.x += 2.* sin(.4 * ffti(10) + t * .3);\n  p.xz *= Rm(t + ffti(6) * 1.);\n  p.xy *= Rm(t*.7);\n  p.z += 2.* sin(.2 * ffti(10) + t * .3);\n  return p;\n}\n\nfloat w(vec3 p) {\n  vec3 bp = ptrans(p);\n  float d = box(bp, vec3(.3 + .5 * ffts(7.) * 17.));\n \n  vec3 pf = p;\n  pf.y -= h(floor(ffti(15))) * 100.;\n  pf.xy *= Rm(ffti(8)*.1 - t - p.z*(-.005+ .01 * ffts(7.)));\n  float d2 = box(rep(pf+vec3(0., 0., -t*100.), vec3(10., 10., 40.)), vec3(.2));\n  if (ffts(5.) > .21)\n    d = min(d, d2);\n  else d = d2;\n  return d;\n}\n\n\nfloat pv(vec2 pix, vec2 RES) {\n  float v = 0.;\n  vec2 uv=pix/RES*2. - 1.; uv.x*=RES.x/RES.y;\n  \n  vec2 off = vec2(0.);\n  \n  float a = N(pix + floor(ffti(10)*.1) * 10.) * 20.;\n  off += 2. * vec2(cos(a), sin(a)) * (.5 + 60.*ffts(5.));\n  off -= uv*2.;\n  v += P(pix + off).a;\n  v -= dt * 3. * (.1 + 20. * ffts(7.));\n  v = max(0., v);\n  \n  vec3 O=vec3(0., 0., 5.), D=normalize(vec3(uv, -2.)), p;\n  float L=100.,l=0.,d;\n  for (float i=0.;i<100.;++i){\n    d=w(p=O+D*l); l+=d;\n    if (d<.001*l||l>L)break;\n  }\n  if (l<L) {\n    p = ptrans(p) * 400.;\n    v += step(.05, N(p.xz) * N(p.zy));\n  }\n  \n  float r = length(uv);\n  \n  float rt = mod(t, 2.);\n  r = r - rt;\n  //r = max(r - rt, r);\n  v += step(r, 0.) * step(-.08, r) * step(.2, N(pix*2.+r)) * step(.01, ffts(40.));\n  \n  return clamp(v, 0., 1.);\n}\n\nvec4 pf(vec2 pix) {\n  vec4 c = P(pix);\n  return vec4(c.rgb*c.rgb, c.a);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    t=iTime;\n    dt=iTimeDelta;\n    vec2 pix = fragCoord.xy;\n\tvec2 uv = fragCoord / iResolution.xy;\n\tuv -= 0.5;\n\tuv /= vec2(iResolution.y / iResolution.x, 1);\n  \n  vec3 C=vec3(0.);\n  //vec2 TS = vec2(1920., 1080.) / 8.;\n  vec2 TS = iResolution.xy;\n  float A = pv(pix + vec2(0., 0.), TS);\n  \n  //out_color = vec4(sqrt(vec3(A)), A); return;\n  \n  const float NS=8.;\n  for (float s=0.;s<NS;++s) {\n    vec3 O=vec3(0., 1., 3.), D = normalize(vec3(uv, -1.));\n    //O.x += h(floor(t*1.)) * 2. - 3.;\n    O.x += 3.;\n    //O.x -= 1.;\n    O.z += N(t)*2.;\n    D.xz *= Rm(-.2);// + .3 * sin(t*.1 +ffti(6)*.3));\n    D.yz *= Rm(-.1 + .2 * N(ffti(7.)));\n    \n    //float tt = fract(t);\n    //O.z += 3. * mix(h(floor(tt)), h(floor(tt)+1.), 1.-tt*tt);\n    \n    //if (fract(ffti(10)) > .9)\n    {\n      O.y += 2.;\n      D.yz *= Rm(.5);\n    }\n    vec3 kc = vec3(1.);\n    float sd = h(pix.x+pix.y+t+s);\n    for(float b=0.;b<4.;b++){\n      float ly = D.y < .0 ? - O.y / D.y : 1e6;\n      float lz = D.z < .0 ? - O.z / D.z : 1e6;\n      float r = 1.;\n      vec3 p, n, c=vec3(0.);\n      if (ly < lz) {\n        if (ly > 100.) break;\n        p = O + D * ly;\n        n = vec3(0., 1., 0.);\n        //c = vec3(fract(p.xz), 0.);\n        //c = vec3(0.,1.,0.);\n        vec2 uv = p.xz * 100.;\n        r = N(uv);\n        //r *= (.6 + .4 * step(.7, fract(t+dot(normalize(vec2(1.)), uv/100.))));\n      } else {\n        if (lz > 100.) break;\n        p = O + D * lz;\n        n = vec3(0., 0., 1.);\n        //C += kc * vec3(fract(p.xy), 0.);\n        vec2 uv = p.xy * TS / 4.; //uv.x /= TS.x / TS.y;\n        uv.x /= TS.x / TS.y;\n        \n        //uv.x += 100.;\n        uv = floor(uv);\n        //uv = clamp(uv, vec2(0.), TS);\n        #define pxl(p,s) (floor((p)/(s))*(s))\n        float ps = 0. + max(0., floor(1. + ffts(8.) * 200. + 8. * sin(N(floor(uv/1.)))));\n        uv = pxl(uv, ps);\n        \n        //uv.x -= floor(ffts(uv.y/100.) * 10.)*100.;\n        \n        c = vec3(\n          pf(uv+.7).a,\n          pf(uv).a,\n          pf(uv-.4).a);\n        \n        //c = vec3(1.,0.,0.);\n      }\n      C += kc * c;\n      \n      O = p + .01 * n;\n      D = normalize(mix(\n        reflect(D, n),\n        vec3(h(sd+=D.y),h(sd+=D.z),h(sd+=D.x)) - .5,\n        r));\n      kc *= .9;\n    }\n  }\n  \n  C/=NS;\n  \n  C = mix(C, vec3(\n    pf(pix-uv*.4).r,\n    pf(pix-uv*.8).g,\n    pf(pix-uv*1.2).b\n  ), min(1., length(uv) * .9 * (100000. * ffts(17.))));\n  \n  C *= smoothstep(1.3, .9, length(uv));\n  \n\tfragColor = vec4(sqrt(C), A);\n    \n  //fragColor=texture(iChannel2, vec2(pix.x, .5)/vec2(textureSize(iChannel2, 0)));\n}\n\n","name":"Buffer A","description":"","type":"buffer"}]}