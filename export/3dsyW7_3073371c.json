{"ver":"0.1","info":{"id":"3dsyW7","date":"1584976484","viewed":798,"name":"Pixel-Perfect Integer Scaling","username":"tyrells","description":"With Aspect Ratio Correction, as per the following algorithm: https://tanalin.com/en/articles/integer-scaling/","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["scaler"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","previewfilepath":"/media/ap/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 calculateScalingRatio(vec2 screenSize, vec2 imageSize, vec2 targetAspectRatio)\n{\n\tfloat _TargetAspectRatio = targetAspectRatio.x / targetAspectRatio.y;\n\tfloat imageAspectRatio = imageSize.x / imageSize.y;\n\n\tvec2 maxIntRatio = floor(screenSize / imageSize);\n\n\tif (imageAspectRatio == _TargetAspectRatio)\n\t{\n\t\tfloat ratio = max(min(maxIntRatio.x, maxIntRatio.y), 1.0f);\n\t\treturn vec2(ratio);\n\t}\n\n\tvec2 maxOutputSize = imageSize * maxIntRatio;\n\tfloat maxAspectRatio = maxOutputSize.x / maxOutputSize.y;\n\tvec2 scalingRatio = vec2(0.0, 0.0);\n\t// If the ratio MA is lower than the target aspect ratio TA\n\tif (maxAspectRatio < _TargetAspectRatio)\n\t{\n\t\tscalingRatio.x = maxIntRatio.x;\n\t\tfloat AUH = maxOutputSize.x / _TargetAspectRatio;\n\t\t\n\t\tfloat yUpperScaleFactor = ceil(AUH / imageSize.y);\n\t\tfloat yLowerScaleFactor = floor(AUH / imageSize.y);\n\t\t\n\t\tfloat upperAspectRatio = maxOutputSize.x / (yUpperScaleFactor * imageSize.y);\n\t\tfloat lowerAspectRatio = maxOutputSize.x / (yLowerScaleFactor * imageSize.y);\n\n\t\tfloat upperTargetError = abs(_TargetAspectRatio - upperAspectRatio);\n\t\tfloat lowerTargetError = abs(_TargetAspectRatio - lowerAspectRatio);\n\n\t\tif (abs(upperTargetError - lowerTargetError) < 0.001)\n\t\t{\n\t\t\tfloat upperImageError = abs(imageAspectRatio - upperAspectRatio);\n\t\t\tfloat lowerImageError = abs(imageAspectRatio - lowerAspectRatio);\n\t\t\tif (upperImageError < lowerImageError)\n\t\t\t\tscalingRatio.y = yUpperScaleFactor;\n\t\t\telse\n\t\t\t\tscalingRatio.y = yLowerScaleFactor;\n\t\t}\n\t\t// Added an extra check in here to prefer an aspect ratio above 1.0.\n\t\t// TODO: This will need to be looked at again for aspect ratios other than 4:3\n\t\telse if (lowerTargetError < upperTargetError || upperAspectRatio < 1.0)\n\t\t\tscalingRatio.y = yLowerScaleFactor;\n\t\telse\n\t\t\tscalingRatio.y = yUpperScaleFactor;\n\t}\n\t// If the ratio MA is greater than the target aspect ratio TA\n\telse if (maxAspectRatio > _TargetAspectRatio)\n\t{\n\t\tscalingRatio.y = maxIntRatio.y;\n\t\tfloat AUW = maxOutputSize.y * _TargetAspectRatio;\n\n\t\tfloat xUpperScaleFactor = ceil(AUW / imageSize.x);\n\t\tfloat xLowerScaleFactor = floor(AUW / imageSize.x);\n\n\t\tfloat upperAspectRatio = (xUpperScaleFactor * imageSize.x) / maxOutputSize.y;\n\t\tfloat lowerAspectRatio = (xLowerScaleFactor * imageSize.x) / maxOutputSize.y;\n\n\t\tfloat upperTargetError = abs(_TargetAspectRatio - upperAspectRatio);\n\t\tfloat lowerTargetError = abs(_TargetAspectRatio - lowerAspectRatio);\n\n\t\tif (abs(upperTargetError - lowerTargetError) < 0.001)\n\t\t{\n\t\t\tfloat upperImageError = abs(imageAspectRatio - upperAspectRatio);\n\t\t\tfloat lowerImageError = abs(imageAspectRatio - lowerAspectRatio);\n\t\t\tif (upperImageError < lowerImageError)\n\t\t\t\tscalingRatio.x = xUpperScaleFactor;\n\t\t\telse\n\t\t\t\tscalingRatio.x = xLowerScaleFactor;\n\t\t}\n\t\t// Added an extra check in here to prefer an aspect ratio above 1.0.\n\t\t// TODO: This will need to be looked at again for aspect ratios other than 4:3\n\t\telse if (upperTargetError < lowerTargetError || lowerAspectRatio < 1.0)\n\t\t\tscalingRatio.x = xUpperScaleFactor;\n\t\telse\n\t\t\tscalingRatio.x = xLowerScaleFactor;\n\t}\n\t// If the ratio MA is equal to the target aspect ratio TA\n\telse\n\t\tscalingRatio = maxIntRatio;\n\n\tif (scalingRatio.x < 1.0)\n\t\tscalingRatio.x = 1.0;\n\tif (scalingRatio.y < 1.0)\n\t\tscalingRatio.y = 1.0;\n\n\treturn scalingRatio;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 aspectTarget = vec2(4.0, 3.0);\n    vec2 scaleFactor = calculateScalingRatio(iResolution.xy, iChannelResolution[0].xy, aspectTarget);\n    vec2 resultingSize = iChannelResolution[0].xy * scaleFactor;\n    vec2 startPos = floor((iResolution.xy - resultingSize) / 2.0);\n    \n    if (any(lessThan(fragCoord.xy, startPos))) {\n        fragColor = vec4(0.3, 0.3, 0.3, 1.0);\n    }\n    else if (any(greaterThan(fragCoord.xy, startPos + resultingSize))) {\n        fragColor = vec4(0.3, 0.3, 0.3, 1.0);        \n    }\n    else {\n\t    vec2 xyOutput = (fragCoord.xy - startPos)/ scaleFactor;\n    \tfragColor = texture(iChannel0, xyOutput / iChannelResolution[0].xy);\n    }\n\n}","name":"Image","description":"","type":"image"}]}