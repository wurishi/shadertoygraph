{"ver":"0.1","info":{"id":"MXSfz1","date":"1729187753","viewed":38,"name":"Titanic R.I.P","username":"Dmitry","description":"Titanic","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["waves","ice","ship","titanic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define RotMat(val) mat2(cos(val), -sin(val), sin(val), cos(val))\n\nhighp float theMoon(vec2 uv, float sharpness) {\n    float DarkSideSize = 8.3;\n    float MoonSize = 2.2;\n    float NewMoon = 0.0;\n    float CrescentMoon = 0.1;\n    float FirstQuarter = 0.5;\n    float FullMoon = 2.0;\n\n    float m1 = NewMoon, m2 = CrescentMoon, m3 = FirstQuarter, m4 = FullMoon;\n    float Phase = m2; // фаза полумесяца\n    \n    uv *= RotMat(-0.9);\n    \n    float moonShape = (sqrt(clamp(1.0 - length(uv * MoonSize), 0.0, 1.0) * sharpness) - \n                       clamp(1.0 - length((uv * DarkSideSize) - vec2(Phase, 0.0)), 0.0, 1.0) * sharpness);\n    \n    return clamp(moonShape, 0.0, 1.0);\n}\n\nvoid drawRectangle(vec2 uv, vec2 position, vec2 size, vec3 color, inout vec4 fragColor) {\n    if (uv.x > position.x - size.x && uv.x < position.x + size.x &&\n        uv.y > position.y - size.y && uv.y < position.y + size.y) {\n        fragColor = vec4(color, 1.0);\n    }\n}\n\nvoid drawEllipse(vec2 uv, vec2 position, vec2 size, vec3 color, inout vec4 fragColor) {\n    vec2 dist = (uv - position) / size;\n    if (dot(dist, dist) < 1.0) {\n        fragColor = vec4(color, 1.0);\n    }\n}\n\nvoid drawTriangle(vec2 uv, vec2 p1, vec2 p2, vec2 p3, vec3 color, inout vec4 fragColor) {\n    vec2 v0 = p3 - p1;\n    vec2 v1 = p2 - p1;\n    vec2 v2 = uv - p1;\n    \n    float dot00 = dot(v0, v0);\n    float dot01 = dot(v0, v1);\n    float dot02 = dot(v0, v2);\n    float dot11 = dot(v1, v1);\n    float dot12 = dot(v1, v2);\n    \n    float invDenom = 1.0 / (dot00 * dot11 - dot01 * dot01);\n    float u = (dot11 * dot02 - dot01 * dot12) * invDenom;\n    float v = (dot00 * dot12 - dot01 * dot02) * invDenom;\n    \n    if (u >= 0.0 && v >= 0.0 && (u + v) < 1.0) {\n        fragColor = vec4(color, 1.0);\n    }\n}\n\n// Новая функция для рисования айсберга\nvoid drawIceberg(vec2 uv, vec2 position, float scale, vec3 color, inout vec4 fragColor) {\n    // Треугольные куски айсберга\n    vec2 p1 = vec2(-0.1, 0.0) * scale + position;\n    vec2 p2 = vec2(0.0, 0.2) * scale + position;\n    vec2 p3 = vec2(0.1, 0.0) * scale + position;\n    drawTriangle(uv, p1, p2, p3, color, fragColor);\n\n    vec2 p4 = vec2(-0.15, 0.0) * scale + position;\n    vec2 p5 = vec2(-0.05, 0.15) * scale + position;\n    vec2 p6 = vec2(0.0, 0.0) * scale + position;\n    drawTriangle(uv, p4, p5, p6, color, fragColor);\n\n    vec2 p7 = vec2(0.05, 0.1) * scale + position;\n    vec2 p8 = vec2(0.1, 0.3) * scale + position;\n    vec2 p9 = vec2(0.15, 0.1) * scale + position;\n    drawTriangle(uv, p7, p8, p9, color, fragColor);\n    \n    // Закругленный низ (под водой)\n    vec2 icebergBottomPos = position + vec2(0.0, -0.003) * scale;\n    vec2 icebergBottomSize = vec2(0.2, 0.01) * scale;\n    drawEllipse(uv, icebergBottomPos, icebergBottomSize, color, fragColor);\n}\n\n// Функция для рисования частей корабля\nvoid drawShipPart(vec2 uv, vec2 position, vec2 size, vec3 color, inout vec4 fragColor) {\n    drawRectangle(uv, position, size, color, fragColor);\n}\n\nvoid drawShip(vec2 uv, vec2 shipPos, vec3 shipColor, bool broken, inout vec4 fragColor) {\n    vec2 shipSize = vec2(0.2, 0.05);\n    \n    // Корпус\n    drawShipPart(uv, shipPos, shipSize, shipColor, fragColor);\n    // Нос корабля\n    vec2 bowPos = vec2(shipPos.x - 0.12, shipPos.y);\n    vec2 bowSize = vec2(0.02, 0.05);\n    drawEllipse(uv, bowPos, bowSize, shipColor, fragColor);\n    \n    // Корма корабля\n    vec2 sternPos = vec2(shipPos.x + 0.12, shipPos.y);\n    vec2 sternSize = vec2(0.02, 0.05);\n    drawEllipse(uv, sternPos, sternSize, shipColor, fragColor);\n    \n    // Нос треугольник\n    vec3 bowTriangleColor = shipColor;\n    vec2 p1 = vec2(shipPos.x - 0.12, shipPos.y);\n    vec2 p2 = vec2(shipPos.x - 0.08, shipPos.y + 0.02);\n    vec2 p3 = vec2(shipPos.x - 0.08, shipPos.y - 0.02);\n    drawTriangle(uv, p1, p2, p3, bowTriangleColor, fragColor);\n    \n    // Трубы\n    vec3 chimneyColor = vec3(0.1, 0.1, 0.1);\n    vec2 chimneySize = vec2(0.01, 0.03);\n    drawRectangle(uv, shipPos + vec2(-0.05, 0.04), chimneySize, chimneyColor, fragColor);\n    drawRectangle(uv, shipPos + vec2(0.0, 0.04), chimneySize, chimneyColor, fragColor);\n    drawRectangle(uv, shipPos + vec2(0.05, 0.04), chimneySize, chimneyColor, fragColor);\n    \n    if (!broken) {\n       } else {\n        // Рисование разлома (линия разлома)\n        vec2 crackStart = shipPos + vec2(-0.1, 0.0);\n        vec2 crackEnd = shipPos + vec2(0.1, 0.0);\n    }\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    float waveHeight = 0.03;\n    float waveSpeed = 0.5;\n    float frequency = 10.0;\n    float time = iTime * waveSpeed;\n    \n    vec3 skyColor = mix(vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.1), uv.y);\n    fragColor = vec4(skyColor, 1.0);\n    \n    float starIntensity = fract(sin(dot(uv.xy * iResolution.xy * 2.2, vec2(12.9898, 78.233))) * 43758.5453);\n    if (starIntensity > 0.992) {\n        fragColor = vec4(vec3(1.0), 1.0);\n    }\n\n    vec3 moonColor = vec3(1.0, 1.0, 0.8);\n    vec2 moonPos = vec2(0.2, 0.8);\n    if (length(uv - moonPos) < 0.1) {\n        float moonBrightness = theMoon(uv - moonPos, 10.0);\n        moonBrightness = pow(moonBrightness, 2.2);\n        fragColor = vec4(moonColor * moonBrightness, 1.0);\n    }\n    \n    vec3 seaColor = vec3(0.0, 0.1, 0.3);\n    float wave = sin(uv.x * frequency + time) * waveHeight;\n    if (uv.y < 0.5 + wave) {\n        fragColor = vec4(seaColor, 1.0);\n    }\n    \n    // Позиция корабля и состояние столкновения\n    vec3 shipColor = vec3(0.5, 0.5, 1.0);\n    \n    // Позиция корабля\n    float shipX = 0.9 - mod(iTime * 0.1, 1.1);\n    vec2 shipPos = vec2(shipX, 0.3);\n\n    // Столкновение с айсбергом\n    float icebergX = 0.055;\n    bool broken = false; \n\n    // Проверка столкновения\n    if (shipX <= icebergX + 0.1) {\n        shipColor = vec3(0.8, 0.2, 0.2); \n        broken = true; \n        shipX = icebergX + 0.1;\n    }\n\n    // Отрисовка корабля\n    drawShip(uv, vec2(shipX, 0.3), shipColor, broken, fragColor);\n\n    // Айсберг\n    vec3 icebergColor = vec3(0.8, 0.9, 1.0);\n    drawIceberg(uv, vec2(icebergX, 0.3), 1.0, icebergColor, fragColor);\n}\n","name":"Image","description":"","type":"image"}]}