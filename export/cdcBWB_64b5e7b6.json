{"ver":"0.1","info":{"id":"cdcBWB","date":"1697567177","viewed":224,"name":"Simple Anti aliasing of d field","username":"mrange","description":"CC0: Simple Anti aliasing of distance field border demonstration\n For my friends in the Captain Coder discord\n","likes":7,"published":3,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// CC0: Simple Anti aliasing of distance field border demonstration\n//  For my friends in the Captain Coder discord\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // q is normalize to range [0,1]\n    vec2 q = fragCoord/iResolution.xy;\n\n    // p is in range [-1,1]\n    vec2 p = -1.0+2.0*q;\n    // Adjust for screen ratio, so that the circle actually looks like circle.\n    p.x *= iResolution.x/iResolution.y;\n\n    // From FabriceNeyrat2 in the comments\n    //  A shorter way to compute p adjusted for screen resolution and ratio\n    // vec2 p = ( 2.*fragCoord - iResolution.xy ) / iResolution.y;\n\n    // Uses the size of the pixel to determine an aa factor\n    float aa = sqrt(2.0)/iResolution.y;\n\n    vec3 col = vec3(0.0);\n    \n    // Circle distance field\n    float d = length(p) - 0.5;\n    // Create a thin outline\n    float od = abs(d-0.05)-aa;\n\n    // Smoothstep the distance field combined with the aa factor to create\n    //  a smooth border with little aliasing.\n    col = mix(col, vec3(1.0), smoothstep(aa, -aa, d));\n    // And the outline\n    col = mix(col, vec3(1.0), smoothstep(aa, -aa, od));\n\n    // Approximative linear RGB to sRGB conversion.\n    col = sqrt(col);\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}