{"ver":"0.1","info":{"id":"tt2GDW","date":"1559664615","viewed":220,"name":"Simple Spectrogram","username":"hjd3481","description":"A basic spectrogram of the playing music. motion per pixel - try full-screen.\nSeelct soundcloud as the iChannel1 buffer input and try out some of the links in the code comments.\n","likes":5,"published":1,"flags":32,"usePreview":0,"tags":["music","audio","spectrogram"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Rewind / Pause-unpause to play the saved music \n// Play your music in BufferA iChannel1\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor.rgb = texture( iChannel0, uv ).rgb;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGzn","filepath":"/media/a/ec8a6ea755d34600547a5353f21f0a453f9f55ff95514383b2d80b8d71283eda.mp3","previewfilepath":"/media/ap/ec8a6ea755d34600547a5353f21f0a453f9f55ff95514383b2d80b8d71283eda.mp3","type":"music","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//Rewind / Pause-unpause to play the saved music \n//Play your music in BufferA iChannel1\n\n//Try some of these deliberate spectrograms via the soundcloud buffer-type in iChannel1\n// try the reccomended settings with the different links\n\n//fFalloff = 2.0;\n// https://soundcloud.com/vaeyenscary/warning-graphic\n\n//fFalloff = 3.0\n// https://soundcloud.com/dreamlandfantasy/spectrogram-experiment-read-description\n\n//fFalloff = 1.0\n// https://soundcloud.com/corvett/image\n\n//fFalloff = 4.0; scanSpeed = 2.0\n// https://soundcloud.com/shrinepulse/spectrograph-of-the-local\n\nconst float scanSpeed = 1.0;\t//increase to speed up and stretch graph horizontally.\n\n//we tend not to notice higer-frequences, skew the textture to see more of the mid and bass range\n//seems that some images created with spectrographs in mind have a falloff.\n//To see more of the lower frequencies and skew the spectrograph upwards, increase the fFalloff.\nconst float fFalloff = 2.0;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{            \n    vec2 uvPrev = (fragCoord.xy + vec2(scanSpeed, 0.0))/iResolution.xy;\n    vec3 prev = texture( iChannel0, uvPrev.xy ).rgb;\n    fragColor.rgb = vec3( prev ); //get previous frame buffer, nudged by one pixel\n    \n    float maskV = step( fragCoord.x, iResolution.x-1.0 ) ; //mask out last vertical pixels\n    fragColor.rgb *= maskV;\n    \n    //get audio buffer with rotated uvs. \n    vec2 uv = fragCoord.yx/iResolution.yx;\n    \n    uv.x = pow( uv.x, fFalloff );\n    \n    float aud = texture( iChannel1, vec2( uv.x, 0.0) ).x; \n    \n    aud *= 1.0 - maskV; //leave only last verticl pixels\n  \n    //brighten\n  //  aud *= 1.3;\n    \n    //make a nice colour instead of greyscale\n    vec3 col = vec3( 0. );\n    col.r = pow( aud, 2.0 );\n    col.g = aud;\n    col.b = pow( aud, 8.0 );\n     \n    fragColor.rgb += col; //add in new audio\n}","name":"Buffer A","description":"","type":"buffer"}]}