{"ver":"0.1","info":{"id":"tdKyz3","date":"1603435531","viewed":318,"name":"Infinite Gamecube","username":"Jinkweiq","description":"I know my random function breaks at about 150,000 seconds :). Inspired by https://www.youtube.com/watch?v=T3qrj4B08sc. Sorry for the lazy sound.","likes":16,"published":1,"flags":40,"usePreview":0,"tags":["raytracing","gameboy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float ndot(vec2 a, vec2 b ) { return a.x*b.x - a.y*b.y; }\nvec2 box = vec2(.135,.09)*.95;\nfloat sdRhombus( in vec2 p)\n{\n    p.y+=0.075;\n    vec2 b = box;\n    vec2 q = abs(p);\n    float h = clamp((-2.0*ndot(q,b)+ndot(b,b))/dot(b,b),-1.0,1.0);\n    float d = length( q - 0.5*b*vec2(1.0-h,1.0+h) );\n    return d * sign( q.x*b.y + q.y*b.x - b.x*b.y )-.01;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    bool dir=random(floor(time))>.5;\n    vec2 uv=(fragCoord.xy-.5*iResolution.xy)/iResolution.y;\n    float t=-cos(fract(time)*pi)*.5+.5;\n    \n    uv += box*1.2*vec2(dir?1:-1,1)*t*sin(t*pi*.5);\n    vec3 col = -smoothstep(.001,0.,sdRhombus(uv))*vec3(0.3529, 0.2549, 0.6784)*(1.-fract(time));\n\n    for (int i=0;i<6;i++) {\n        dir=random(floor(time)-float(i)-1.)>.5;\n        col += smoothstep(.001,0.,sdRhombus(uv))*vec3(0.3529, 0.2549, 0.6784);\n        uv += box*1.2*vec2(dir?1:-1,1);\n    }\n    \n\n    vec2 off = box*t*.5*.5*iResolution.y/iResolution.x;\n    \n    vec2 pos = (fragCoord.xy/iResolution.xy);\n    pos.y+=.01*sin(2.*pi*tanh(mod(time,1.)*2.-2.)+1.);\n\tvec3 cube = texture( iChannel0, pos).xyz;\n    col=cube.x>0.?cube:col;\n\n    fragColor = vec4(col,1);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST.001\n\nmat2 rot(float a){\n    float s=sin(a),c=cos(a);\n    return mat2(c,-s,s,c);\n}\n\nfloat sdBox(vec3 p,vec3 s){\n    p=abs(p)-s;\n    return length(max(p,0.))+min(max(p.x,max(p.y,p.z)),0.);\n}\nfloat map(vec3 p){\n    p.z-=2.;\n\t\n    //maybe -cos(fract(time)*pi)*.5+.5 is smoother\n    float t=-cos(fract(time)*pi)*.5+.5;\n    float dir=random(floor(time));\n\n    p.yz*=rot(.25*pi);\n    p.xz*=rot(.25*pi);\n\n    if(dir<.5){\n        p.xy*=rot(.5*pi*-t);\n    }else{\n        p.yz*=rot(.5*pi*-t);\n    }\n    \n    float d=sdBox(p,vec3(1))-.1;\n    \n    return d;\n}\n\nfloat rm(vec3 ro,vec3 rd){\n    float dO=0.;\n    \n    for(int i=0;i<MAX_STEPS;i++){\n        vec3 p=ro+rd*dO;\n        float dS=map(p);\n        dO+=dS;\n        if(dO>MAX_DIST||abs(dS)<SURF_DIST)break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p){\n    float d=map(p);\n    vec2 dp=vec2(.001,0);\n    \n    vec3 n=d-vec3(\n        map(p-dp.xyy),\n        map(p-dp.yxy),\n        map(p-dp.yyx)\n    );\n    \n    return normalize(n);\n}\nmat3 lookAt(vec3 eye, vec3 tar, float r){\n    vec3 cw = normalize(tar - eye);\n    vec3 cp = vec3(sin(r), cos(r), 0.);\n    vec3 cu = normalize(cross(cw, cp));\n    vec3 cv = normalize(cross(cu, cw));\n    return mat3(cu, cv, cw);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv=(fragCoord.xy-.5*iResolution.xy)/iResolution.y;\n    \n    vec2 p = (fragCoord.xy-0.5*iResolution.xy)/min(iResolution.x, iResolution.y);\n\n    vec3 col=vec3(0);\n    vec3 lp=vec3(-2,5,-3);\n    \n    vec3 ro = vec3(0, 0., -1.);\n    vec3 tar = vec3(0.);\n        \n    vec3 rd = lookAt(ro, tar, 0.)*normalize(vec3(0., 0., 1.0));\n\n    float orthRectSize = 2.0 + 3.0*3.;\n    ro += vec3(p * orthRectSize, 0.);\n\n    float d=rm(ro,rd);\n    \n    if(d<MAX_DIST){\n        vec3 p=ro+rd*d;\n        vec3 n=GetNormal(p);\n        \n        vec3 ld=lp-p;\n        float lDist=max(length(ld),.001);\n        ld/=lDist;\n        float spec=pow(max(dot(reflect(-ld,n),-rd),0.),8.);\n        col+=spec*.2;\n        float dif=dot(n,normalize(lp))*.5+.7;\n        col+=pow(dif,3.)*vec3(0.3333, 0.1294, 0.9922)*.3;\n    }\n    \n    col=pow(col,vec3(.4545));\n\n    \n    fragColor=vec4(col,1.);\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define time iTime*4.\n#define pi acos(-1.)\nfloat random(in float v){\n    return fract(sin(dot(vec2(v+2.),vec2(12.9898,78.233)))*43758.5453123);\n}","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[],"code":"vec2 mainSound( in int samp, float t )\n{\n    bool dir=random(floor(t*4.))>.5;\n    return vec2( sin(2.*pi*(dir?246.94:329.63)*t)*exp(-3.0*mod(t, .25)) );\n}","name":"Sound","description":"","type":"sound"}]}