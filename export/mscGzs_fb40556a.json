{"ver":"0.1","info":{"id":"mscGzs","date":"1677687254","viewed":68,"name":"Reaction Diffusion Study","username":"jairoandre","description":"The reaction diffusion implementation for the Karl Sims tutorial.","likes":0,"published":1,"flags":32,"usePreview":1,"tags":["simple","diffusion","reaction"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// based on the follow tutorial: https://www.karlsims.com/rd.html\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 col = vec3(0);\n    \n    vec3 buffer = texture(iChannel0, uv).rgb;\n    \n    float c = buffer.x-buffer.y;\n    \n    col += c;\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdXGzr","filepath":"/media/a/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg","previewfilepath":"/media/ap/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float DA = 1.0;\nconst float DB = 0.5;\nconst float F = 0.055;\nconst float K = 0.062;\n\nvec2 laplace(ivec2 fragCoord) {\n    vec2 result = vec2(0);\n    for (int j=-1; j <= 1; j++) {\n        for (int i=-1; i <= 1; i++) {\n            float mult = 0.2;\n            if (j != 0 && i != 0) {\n                mult = 0.05;\n            } else if (j == 0 && i == 0) {\n                mult = -1.;\n            }\n            vec4 c = texelFetch(iChannel0, fragCoord + ivec2(i, j), 0);\n            result.x += mult * float(c.x);\n            result.y += mult * float(c.y);\n        }\n    }\n    return result;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 c = vec4(1.0, vec3(0));\n    \n    if (iFrame<10) {\n        vec2 uv_n = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n        float d = length(uv_n);\n        //c.y += smoothstep(fwidth(d)+0.1, 0.2, d);\n        c = texture(iChannel1, uv);        \n    } else {\n        c = texelFetch(iChannel0, ivec2(fragCoord), 0);\n        \n        vec2 lp = laplace(ivec2(fragCoord))*10.;\n        float a_b2 = c.x * c.y * c.y;\n\n        c.x = c.x + (DA*lp.x - a_b2 + F*(1.0-c.x));\n        c.y = c.y + (DB*lp.y + a_b2 - (K+F)*c.y);\n        \n    }\n    \n    fragColor = c;\n}","name":"Buffer A","description":"","type":"buffer"}]}