{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"buffer","id":"4dXGR8","filepath":"/media/previz/buffer00.png","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 z = vec2(0.0);\n    \n    vec2 uv = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n    float a = ((maxZoom + 0.5) / 2.0);\n    uv /= exp(a + a * sin((PI * iTime) / (zoomTime / 2.0) - PI / 2.0) - 0.3);\n    \n    //reading the bottom left pixel of buffer a, because the position for the zoom ist stored there\n    vec2 zoomPos = texture(iChannel0, vec2(0.0)).xy * 8.0 - 4.0;\n    vec2 nextZoomPos = texture(iChannel0, vec2(0.0)).zw * 8.0 - 4.0;\n    uv += zoomPos + ((nextZoomPos - zoomPos) * smoothstep(zoomTime - 1.0, zoomTime, mod(iTime, zoomTime)));\n    \n    //calculating the pixel color\n    float mandelBrot = float(mandelBrot(z, uv, mandelBrotRenderdepth)) / float(mandelBrotRenderdepth / glowStrength);\n    \n    //outputing the pixel color\n    fragColor = vec4(mandelBrot * color, 1.0);\n}","name":"Image","description":"","type":"image"},{"outputs":[{"channel":0,"id":"4dXGR8"}],"inputs":[],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord)\n{\n    if(fragCoord.x < 1.0 && fragCoord.y < 1.0)\n    {\n        //adjusting the zoom for better results\n        maxZoom *= 1.2;\n\n        //calculating the seed\n        int state = int(floor((iDate.w - mod(iTime, zoomTime))) * 11217.0);\n           \n        //getting the mandelbrot zoom\n        vec2 zoomPos = findMandelBrotZoom(state);\n        \n        //scaling it from 0 - 1 so it can be outputed as a color\n        zoomPos += 4.0;\n        zoomPos /= 8.0;\n        \n        vec2 nextZoomPos = zoomPos; \n        \n        //if transitoning get the next zoom\n        if(mod(iTime, zoomTime) > zoomTime - 1.0)\n        {\n        \n            //calculating the next seed\n            state = int(floor((iDate.w + 1.0 - mod(iTime + 1.0, zoomTime))) * 11217.0);\n            \n            //getting the next mandelbrot zoom\n            nextZoomPos = findMandelBrotZoom(state);\n            \n            //scaling it from 0 - 1 so it can be outputed as a color\n            nextZoomPos += 4.0;\n            nextZoomPos /= 8.0;\n        }\n        //outputting the best zoom pos\n        fragColor = vec4(zoomPos , nextZoomPos);\n    }\n    else\n    {\n    fragColor = vec4(0.0);\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"outputs":[],"inputs":[],"code":"#define PI 3.1415926535\n\n/*settings*/\nfloat maxZoom = 5.0;\n//depth of the zoom\n\n#define zoomTime 5.0\n//time per zoom\n\n#define color vec3(0.0, 0.6, 1.0)\n//Madelbrot color(doesnt need to be from 0 to 1)\n\n#define glowStrength 5\n//how much the Mandelbrot glows\n\n#define mandelBrotRenderdepth 500\n//how many times Z² + c is calculated for the image\n\n#define mandelBrotsearchdepth 100\n//how many times Z² + c is calculated for the zoom search(doesnt need to be as high as mandelBrotrenderDepth)\n\n#define numZoomPos 100\n//how many zoom positions are evaluated(higher values cost more fps but look better)\n\n#define numZoomPosEvaluations 15\n//how accurat the zoom positions are evaluated(higher values cost more fps but look better)\n\n\n\n\n/*functions*/\n//the multiplication of to complex numbers\nvec2 multiply(vec2 a, vec2 b)\n{\n    return(vec2(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x));\n}\n\n//the devision of to complex numbers\nvec2 divide(vec2 a, vec2 b)\n{\n    return(vec2((a.x * b.x + a.y * b.y) / (b.x * b.x + b.y * b.y), (a.y * b.x - a.x * b.y) / (b.x * b.x + b. y * b.y)));\n}\n\n//calculating the Mandelbrot set\nint mandelBrot(vec2 z, vec2 c, int depth)\n{\n    for(int i = 0; i < depth; i++)\n    {\n        z = multiply(z, z) + c;\n        if(abs(z.x) > 100.0 && abs(z.y) > 100.0)\n        {\n            return(i);\n        }\n    }\n    return(0);\n}\n\n//random number generation\nfloat rand(inout int state)\n{\n    state = state * 747796405 + 2891336453;\n    int result = ((state >> ((state >> 28) + 4)) ^ state) * 277803737;\n    result = (result >> 22) ^ result;\n    return float(result) / 4294967295.0;\n}\n\n//random point generation\nvec2 randP(inout int state)\n{\n    return(2.0 * vec2(rand(state), rand(state)) - 0.5);\n}\n\n//finding good mandelbrot zoom\nvec2 findMandelBrotZoom(inout int state)\n{\n    vec2 z = vec2(0.0);\n    vec2 bestPos;\n    float bestScore;\n    \n    //running the loop for fiding a good zoom\n    for(int i = 0; i < numZoomPos; i++)\n    {\n        //creating random zoom pos\n        vec2 randomP = 3.0 * randP(state);\n        float posScore = 0.0;\n        \n        //evaluating the zoom pos\n        for(int i = 0; i < numZoomPosEvaluations; i++)\n        {\n            //creating a point around the zoom pos\n            vec2 randomP2 = randomP + randP(state) / exp(maxZoom);\n            //creating a point around the point above\n            vec2 randomP3 = randomP2 + randP(state) / (exp(maxZoom) / 10.0);\n            \n            //calculating differance and adding it to the score\n            posScore += abs(float(mandelBrot(z, randomP2, mandelBrotsearchdepth)) - float(mandelBrot(z, randomP3, mandelBrotsearchdepth)));\n        }\n  \n        //see if the score is the best(the higher the better)\n        if(posScore > bestScore)\n        {\n            bestScore = posScore;\n            bestPos = randomP;\n        }\n    }\n    return bestPos;\n}","name":"Common","description":"","type":"common"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":true,"mFlagMusicStream":false},"info":{"id":"XfKfR1","date":"1733861278","viewed":58,"name":"infinit Mandelbrot zooms","username":"Leolsssspe","description":"this shader makes infinit mandelbrot zooms.\nThings I may add in the future:\nMore fractals that can be chosen","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["fractal","mandelbrotset","complexnumbers"],"hasliked":0,"parentid":"43BfWV","parentname":"Mandelbrot set by leolsssspe "}}