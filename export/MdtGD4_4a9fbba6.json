{"ver":"0.1","info":{"id":"MdtGD4","date":"1449767564","viewed":11551,"name":"CSG basics","username":"nicoptere","description":"this is a basic example of how to combine 2 shapes to illustrate this article: http://barradeau.com/blog/?p=575","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["learning"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"//CSG operations\n\nfloat unite( float a, float b){return min(a, b);}\nfloat subtract( float a, float b ){ return max(-a, b); }\nfloat intersect( float a, float b ){ return max(a, b); }\n\n\n//describing a sphere\nfloat sphere( vec3 pos, vec3 center, float radius )\n{\n    return length( pos - center ) - radius;\n}\n\n//describing a box\nfloat box( vec3 pos, vec3 center, vec3 size, float corner )\n{\n    return length( max( abs( pos-center )-size, 0.0 ) )-corner;\n}\n\n//the signed distance field function\n//used in the ray march loop\nfloat sdf(vec3 p) {\n \n    //we build a sphere\n    float s = sphere( p, vec3( 0. ), 1.25 );\n \n    //we build a box\n    float b = box( p, vec3( 0. ), vec3( 1. ), .0 );\n \n    //we return the combination of both:\n    //subtracting the sphere from the box\n    return subtract( s,b  );\n    \n}\n\n//unchanged \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tvec2 uv = ( fragCoord.xy / iResolution.xy ) * 2.0 - 1.0;\n\tuv.x *= iResolution.x / iResolution.y;\n\tvec3 pos = vec3( 0.,0.,-3.);\n\tvec3 dir = normalize( vec3( uv, 1. ) );\n\tvec3 ip;\n\tfloat t = 0.0;\n\tfor( int i = 0; i < 32; i++) {\n        ip = pos + dir * t;\n\t\tfloat temp = sdf( ip );\n\t\tif( temp < 0.01 ) break;\n\t\tt += temp;\n\t}\n\tfragColor = vec4( ip, 1.0);\n}","name":"","description":"","type":"image"}]}