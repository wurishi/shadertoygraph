{"ver":"0.1","info":{"id":"llcBWN","date":"1539632381","viewed":109,"name":"Spinning Lines","username":"t3knomanser","description":"A simple rotating line demo. Again, just testing.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["lines","geometry","sinusoidal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n\nfloat line(vec2 uv, float m, float b, float thickness, float fuzz) {\n    float y = m * uv.x + b;\n    float d = thickness - distance(uv, vec2(uv.x, y));\n    d =  smoothstep(0., thickness, d);\n    if (uv.y >= y - thickness && uv.y <= y + thickness) {\n        return mix(1., d, fuzz);\n    }\n    return 0.;\n}\n\nfloat line(vec2 uv, float m, float b) {\n    return line(uv, m, b, iResolution.y / 100000., 0.);\n}\n\nfloat line(vec2 uv, float m, float b, float thickness) {\n    return line(uv, m, b, thickness, 0.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    uv += vec2(-0.5, -0.5);\n    uv = rotate2d(iTime) * uv;\n    vec3 point = vec3(\n        line(uv, 0., 0., 1./iResolution.y, 0.25)\n    );\n    for (float i = -10.; i < 10.; i+=1.) {\n        uv += vec2(0., (1.0 / 1000.)*i);\n        uv *= rotate2d(sin(iTime*0.125*i));\n        point += vec3(\n            line(uv, 0., 0., 0.5/iResolution.y, 0.25)\n        );\n    }\n\n    // Output to screen\n    fragColor = vec4(point,1.0);\n}","name":"Image","description":"","type":"image"}]}