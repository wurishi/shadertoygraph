{"ver":"0.1","info":{"id":"tdcBWN","date":"1605094642","viewed":94,"name":"Cartesian to Polar mix","username":"maximus009","description":"Just a quick test of animated cartesian to polar conversion.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["polar","cartesian"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float Hash21(vec2 p) {\n    p = fract(p*vec2(265.21, 232.23));\n    p += dot(p, p+200.23);\n    return fract(p.x*p.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 centeredUV = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 defaultUV = fragCoord.xy / iResolution.xy;\n    \n    vec2 uv = mix(defaultUV,centeredUV, smoothstep(.0, 1.,abs(sin(iTime))));\n    vec2 pUV = vec2(atan(uv.x, uv.y) / 6.2831, length(uv));\n\n    pUV.x += .5;\n    pUV.x += sin(iTime * 0.9); // Some rotation\n    pUV.y += sin(iTime); // Length shift rotation\n    \n    //pUV.xy += + mix(.0, .01,Hash21(pUV)); // Polar random noise\n    \n    fragColor = texture(iChannel0, mix(uv,pUV, abs(sin(iTime))));\n}","name":"Image","description":"","type":"image"}]}