{"ver":"0.1","info":{"id":"dlfcD7","date":"1690821357","viewed":87,"name":"Gray Scott - Cell mitosis","username":"pcouy","description":"Interactive. Simulates a Gray Scott reaction with a cherry-picked set of parameters to produce something that looks like cell mitosis. Click on the canvas to place a single cell and see it multiply. Press space to reset\nMy first finished shader","likes":5,"published":1,"flags":48,"usePreview":0,"tags":["simulation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nClick anywhere on the canvas to place a first cell.\nPress spacebar to reset\nChange values in Buffer A to see different results\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv) * vec4(0.5,2.0,0.,1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/*\nChanging k2 and k3 is the best way to change the behavior of the sim.\nSee https://itp.uni-frankfurt.de/~gros/StudentProjects/Projects_2020/projekt_schulz_kaefer/\nMitosis     : k2 = 0.062 ; k3 = 0.028\nSolitons    : k2 = 0.060 ; k3 = 0.030\nFlowers     : k2 = 0.062 ; k3 = 0.055\nFinger      : k2 = 0.060 ; k3 = 0.037\nU-Skate     : k2 = 0.061 ; k3 = 0.062\nMazes       : k2 = 0.057 ; k3 = 0.029\nSpirals     : k2 = 0.047 ; k3 = 0.014\nYou can change these values and recompile while the simulation is running\nA lot of other combinations produce good results, but some of them just don't work.\nNotes for experimenting :\n\"Fragile\" life : k2 = 0.057 ; k3 = 0.016..0.020   ==>  makes \"unstable\" cells that either split, or die before they get a chance to\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float dT = 2.0; //The lower this is, the more stable (but the slower) the simulation is. Weird stuff starts to happen from 3.0\n    vec4 TAU = vec4(0.4, 0.2, 0., 0.);  // Diffusion rate of components\n    float k1 = 1.;  // Speed constant of the main reaction\n    float k2 = 0.062; // Speed constant of the \"kill\" reaction\n    float k3 = 0.028; // Speed constant of the \"feed\" reaction\n    \n    vec2 pixelSize = 1. / iResolution.xy;\n    vec2 aspect = vec2(1., iResolution.y/iResolution.x);\n    vec2 uv = fragCoord.xy * pixelSize;\n    \n    vec2 h = vec2(pixelSize.x, 0.);\n    vec2 v = vec2(0., pixelSize.y);\n    \n    vec4 col, new;\n    \n    bool spacePressed = texture(iChannel1,  vec2(0.126953125, .25)).x > 0.;\n    if (iFrame == 0 || spacePressed) { // Init\n        fragColor = vec4(1., 0.0, 0.0, 1.0);\n        if ( !spacePressed && length(uv - vec2(.5,.5)) < length(1.*pixelSize) ) {\n            fragColor+= vec4(0., 0.2, 0., 1.);\n        }\n    }\n    else {  // Sim\n        col = texture(iChannel0, uv);\n        if ( iMouse.z > 0.5 && length((fragCoord - iMouse.xy)*pixelSize) < length(1.*pixelSize) ) {\n            new = vec4(0., 0.2, 0., 1.);\n        } else {\n            new = vec4(0.0);\n        }\n        \n        vec4 inboundFlow = TAU / 8. * (   // Algebric inbound diffusion flow\n            texture(iChannel0, uv + h) +\n            texture(iChannel0, uv - h) +\n            texture(iChannel0, uv + v) +\n            texture(iChannel0, uv - v) +\n            1./1.41*(\n                texture(iChannel0, uv + h + v) +\n                texture(iChannel0, uv + h - v) +\n                texture(iChannel0, uv - h + v) +\n                texture(iChannel0, uv - h - v)\n            ) -\n            4.*(1.+1./1.41)*col\n        );\n        \n        // Reaction : X + 2X -> 3X\n        float reactionSpeed1 = k1*col.x*col.y*col.y;\n        \n        // Concentration variations due to reactions\n        vec4 dCol = vec4(-reactionSpeed1 + k3*(1.-col.x), reactionSpeed1 - (k2+k3)*col.y, 0., 0.);\n        \n        fragColor = clamp(col+new+dT*(dCol+inboundFlow), 0., 1.);\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}