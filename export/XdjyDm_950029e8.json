{"ver":"0.1","info":{"id":"XdjyDm","date":"1492399273","viewed":174,"name":"functions graph","username":"viknewbie","description":"a basic plotting functions visualizer with anti-aliasing","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["beginner","graph","function","plot","cartesian","short"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.141592653589793\n\nvoid plot(\n    float formula, float y,\n    float size, \n    inout vec3 pixel, vec3 color\n){\n    pixel = mix(color,pixel,smoothstep(size-size*.5,size, abs(formula-y)));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n\tvec3 p = vec3(1.);\n    // cf FabriceNeyret2's comment\n    /*\n    vec2 s = fragCoord.xy/iResolution.xy;\n    float r = iResolution.x/iResolution.y;\n    float w = .008;\n    //*/\n\tvec2  s = (2.*fragCoord - iResolution.xy)/iResolution.y;\n    float w = 2./iResolution.y;\n    float t = iTime;\n    // some ugly colors ;)\n    // TODO hsl -> rgb\n    vec3 axe = vec3(.0,1.,1.),\n     \t c1  = vec3(.3),\n         c2  = vec3(1.,1.,.0),\n         c3  = vec3(1.,.0,1.),\n         c4  = vec3(.485,.879,.716);\n    \n    // cf FabriceNeyret2's comment\n    /*\n\ts = s*2.-1.;\n    s.r *= r;\n\t//*/    \n\n    p  = vec3(step(mod(s.x,.1),w));\n    p += vec3(step(mod(s.y,.1),w));\n    p  = mix(c1,vec3(1.),p);\n    \n    if( abs(s.y) < w ) p = axe;\n    if( abs(s.x) < w ) p = axe;\n    \n    plot(-s.x*s.x, \t\t\t\t\t   s.y, w, \t   p, c2);\n    plot(s.x*s.x*s.x, \t\t\t\t   s.y, w*2.,  p, c4);\n    plot(sin(s.x*PI*2.+t*1.5)*.25+.25, s.y, w*1.5, p, c3);\n    plot(exp(-4.*s.x*s.x)*.9,\t\t   s.y, w,\t   p, vec3(1.,.0,.0));\n    \n    fragColor = vec4(p,1.);\n}","name":"Image","description":"","type":"image"}]}