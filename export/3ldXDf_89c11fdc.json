{"ver":"0.1","info":{"id":"3ldXDf","date":"1581877130","viewed":582,"name":"Tonemapping ops but with ACES FT","username":"DmitRex","description":"original shadertoy - https://www.shadertoy.com/view/lslGzl\n\nFrom top to bottom:\nlinear,\nsimplified Reinhard operator,\nluma based Reinhard op.,\nwhite preserving luma based Reinhard op.,\nRomBinDaHouse\nACES Fitted.,\nUncharted 2 tone map","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["curves","tonemapping","filmic","acesaces"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n\nORIGINAL SHADERTOY - https://www.shadertoy.com/view/lslGzl\n\nI only replaced `filmicToneMapping` with `ACESFitted` from https://github.com/TheRealMJP/BakingLab/blob/master/BakingLab/ACES.hlsl\n\nThis shader experiments the effect of different tone mapping operators.\nThis is still a work in progress.\n\nMore info:\nhttp://slideshare.net/ozlael/hable-john-uncharted2-hdr-lighting\nhttp://filmicgames.com/archives/75\nhttp://filmicgames.com/archives/183\nhttp://filmicgames.com/archives/190\nhttp://imdoingitwrong.wordpress.com/2010/08/19/why-reinhard-desaturates-my-blacks-3/\nhttp://mynameismjp.wordpress.com/2010/04/30/a-closer-look-at-tone-mapping/\nhttp://renderwonk.com/publications/s2010-color-course/\n\n--\nZavie\n\n*/\n\nfloat gamma = 2.2;\n\nvec3 getBaseColor(int i)\n{\n\tif (i == 0) return vec3(1.0, 0.4, 0.0);\n\tif (i == 1) return vec3(0.4, 1.0, 0.0);\n\tif (i == 2) return vec3(0.0, 1.0, 0.4);\n\tif (i == 3) return vec3(0.0, 0.4, 1.0);\n\tif (i == 4) return vec3(0.4, 0.0, 1.0);\n\tif (i == 5) return vec3(1.0, 0.0, 0.4);\n\n\treturn vec3(1.);\n}\n\nvec3 getBaseColor()\n{\n\tfloat colorPerSecond = 0.5;\n\tint i = int(mod(colorPerSecond * iTime, 7.));\n\tint j = int(mod(float(i) + 1., 7.));\n\n\treturn mix(getBaseColor(i), getBaseColor(j), fract(colorPerSecond * iTime));\n}\n\nvec3 linearToneMapping(vec3 color)\n{\n\tfloat exposure = 1.;\n\tcolor = clamp(exposure * color, 0., 1.);\n\tcolor = pow(color, vec3(1. / gamma));\n\treturn color;\n}\n\nvec3 simpleReinhardToneMapping(vec3 color)\n{\n\tfloat exposure = 1.5;\n\tcolor *= exposure/(1. + color / exposure);\n\tcolor = pow(color, vec3(1. / gamma));\n\treturn color;\n}\n\nvec3 lumaBasedReinhardToneMapping(vec3 color)\n{\n\tfloat luma = dot(color, vec3(0.2126, 0.7152, 0.0722));\n\tfloat toneMappedLuma = luma / (1. + luma);\n\tcolor *= toneMappedLuma / luma;\n\tcolor = pow(color, vec3(1. / gamma));\n\treturn color;\n}\n\nvec3 whitePreservingLumaBasedReinhardToneMapping(vec3 color)\n{\n\tfloat white = 2.;\n\tfloat luma = dot(color, vec3(0.2126, 0.7152, 0.0722));\n\tfloat toneMappedLuma = luma * (1. + luma / (white*white)) / (1. + luma);\n\tcolor *= toneMappedLuma / luma;\n\tcolor = pow(color, vec3(1. / gamma));\n\treturn color;\n}\n\nvec3 RomBinDaHouseToneMapping(vec3 color)\n{\n    color = exp( -1.0 / ( 2.72*color + 0.15 ) );\n\tcolor = pow(color, vec3(1. / gamma));\n\treturn color;\n}\n\nvec3 filmicToneMapping(vec3 color)\n{\n\tcolor = max(vec3(0.), color - vec3(0.004));\n\tcolor = (color * (6.2 * color + .5)) / (color * (6.2 * color + 1.7) + 0.06);\n\treturn color;\n}\n\nconst mat3x3 ACESInputMat = mat3x3\n(\n    0.59719, 0.35458, 0.04823,\n    0.07600, 0.90834, 0.01566,\n    0.02840, 0.13383, 0.83777\n);\n\n// ODT_SAT => XYZ => D60_2_D65 => sRGB\nconst mat3x3 ACESOutputMat = mat3x3\n(\n     1.60475, -0.53108, -0.07367,\n    -0.10208,  1.10813, -0.00605,\n    -0.00327, -0.07276,  1.07602\n);\n\nvec3 RRTAndODTFit(vec3 v)\n{\n    vec3 a = v * (v + 0.0245786f) - 0.000090537f;\n    vec3 b = v * (0.983729f * v + 0.4329510f) + 0.238081f;\n    return a / b;\n}\n\nvec3 ACESFitted(vec3 color)\n{\n    color = color * ACESInputMat;\n\n    // Apply RRT and ODT\n    color = RRTAndODTFit(color);\n\n    color = color * ACESOutputMat;\n\n    // Clamp to [0, 1]\n  \tcolor = clamp(color, 0.0, 1.0);\n    \n    color = pow(color, vec3(1. / gamma));\n\n    return color;\n}\n\nvec3 Uncharted2ToneMapping(vec3 color)\n{\n\tfloat A = 0.15;\n\tfloat B = 0.50;\n\tfloat C = 0.10;\n\tfloat D = 0.20;\n\tfloat E = 0.02;\n\tfloat F = 0.30;\n\tfloat W = 11.2;\n\tfloat exposure = 2.;\n\tcolor *= exposure;\n\tcolor = ((color * (A * color + C * B) + D * E) / (color * (A * color + B) + D * F)) - E / F;\n\tfloat white = ((W * (A * W + C * B) + D * E) / (W * (A * W + B) + D * F)) - E / F;\n\tcolor /= white;\n\tcolor = pow(color, vec3(1. / gamma));\n\treturn color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tvec3 color = getBaseColor();\n\n\tfloat n = 8.;\n\tif (uv.x > 0.2)\n\t{\n\t\tif (uv.x < 0.6)\n\t\t\t// blacks\n\t\t\tcolor *= (2.5 * uv.x - 0.5);\n\t\telse\n\t\t\t// whites\n\t\t\tcolor *= 15.*(2.5 * uv.x - 1.5) + 1.;\n\n\t\tint i = int(n * (1. - uv.y));\n\t\tif (i == 1) color = linearToneMapping(color);\n\t\tif (i == 2) color = simpleReinhardToneMapping(color);\n\t\tif (i == 3) color = lumaBasedReinhardToneMapping(color);\n\t\tif (i == 4) color = whitePreservingLumaBasedReinhardToneMapping(color);\n\t\tif (i == 5) color = RomBinDaHouseToneMapping(color);\t\t\n\t\tif (i == 6) color = ACESFitted(color);\n\t\tif (i == 7) color = Uncharted2ToneMapping(color);\n\t}\n\n\tif (abs(fract(n * uv.y + 0.5) - 0.5) < 0.02)\n\t\tcolor = vec3(0.);\n\n\tfragColor = vec4(color, 1.);\n}\n","name":"Image","description":"","type":"image"}]}