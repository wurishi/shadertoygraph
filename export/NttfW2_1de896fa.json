{"ver":"0.1","info":{"id":"NttfW2","date":"1663669842","viewed":164,"name":"Rows and  Columns","username":"minghir","description":"First attempt to write something in GLSL.\n\nArrow keys and enter to play.","likes":8,"published":1,"flags":48,"usePreview":0,"tags":["2d","game"],"hasliked":0,"parentid":"-1","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n   \n   if(uv.x < 0.11 && uv.y > -.8 && uv.y < .1 )\n        fragColor = vec4(vec3(0.2196),1.0); \n   else\n        fragColor = vec4(texture(iChannel0,uv).rgb,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//input from https://www.shadertoy.com/view/XlGfzt\n//print text from https://www.shadertoy.com/view/4sBfRd\n//random from https://www.shadertoy.com/view/Xt23Ry\n//thank you guys\n\n#define KEY_RIGHT_ARROW 39.0\n#define KEY_LEFT_ARROW 37.0\n#define KEY_UP_ARROW 38.0\n#define KEY_DOWN_ARROW 40.0\n#define KEY_ENTER 13.0\n#define ATIME 1.5\n\n#define C(c) U.x-=.5; text+= char(U,64+c)\n\nint cursor;\nbool select;\nint cells[25];\nbool key_pressed[5];\nfloat stime;\nint score;\nfloat offset_x = -0.4;        \nfloat offset_y = -0.4;\nvec3 colors[6]= vec3[](\n    vec3(0, 0, 0),\n    vec3(1., 0.33, 0.33),\n    vec3(0., 0.77, 0.),\n    vec3(0.66, 0.33, 0.),\n    vec3(0.33, 0.33, 1.),\n    vec3(1., 0.33, 1.)\n    );\n\nvec4 char(vec2 p, int c){\n    if (p.x<.0|| p.x>1. || p.y<0.|| p.y>1.) return vec4(0,0,0,1e5);\n\treturn textureGrad( iChannel2, p/16. + fract( vec2(c, 15-c/16) / 16. ), dFdx(p/16.),dFdy(p/16.) );\n}\n\nvec4 printScore(int sc, vec2 uv){\n    vec4 text = vec4(0.0);\n    vec2 position = vec2(-0.9,.4);\n   float FontSize = 4.;\n    vec2 U = ( uv - position)*64.0/FontSize;\n    C(19);C(3);C(15);C(18);C(5);\n    C(-6);\n   \n    \n    C(int((sc%10000)/1000) - 16);\n    C(int((sc%1000)/100) - 16);\n    C(int((sc%100)/10) - 16);\n    C(sc%10 - 16);\n    \n    return text;\n}\n\n\nfloat random(float co) { return fract(sin(co*(91.3458)) * 47453.5453); }\nfloat random(vec2 co){ return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453); }\nfloat random(vec3 co){ return random(co.xy+random(co.z)); }\n\nint rand(vec2 uv){\n     float rnum;\n     int num = 0;\n         rnum = random(uv*(iTime+1.))*10.;\n         rnum = rnum > 5. ? 11. - rnum :  rnum ;\n         num = (int(rnum));\nreturn num == 0 ? 1 : num;\n}\n\nbool isPressed(float keyCode) {\n        keyCode = (keyCode + 0.5) / 256.0;\n        vec2 uv = vec2(keyCode, 0.25);\n        float key = texture(iChannel1, uv).r;\n        return key > 0.0;\n}\n\nvoid check_input(){\n   \n    if(isPressed(KEY_RIGHT_ARROW)) { key_pressed[0] = true;return; }\n    if(isPressed(KEY_LEFT_ARROW)) {key_pressed[1] = true;return; }\n    if(isPressed(KEY_UP_ARROW)) {key_pressed[2] = true;return; }\n    if(isPressed(KEY_DOWN_ARROW)) {key_pressed[3] = true;return; }\n    if(isPressed(KEY_ENTER)) {key_pressed[4] = true;return; }\n        \n\n    if(!isPressed(KEY_UP_ARROW) && key_pressed[2]){\n        key_pressed[2] = false;\n        if(cells[cursor + 5] != 0){\n            select = false;\n        }else if(select && cursor <= 19 ){\n            cells[cursor + 5] = cells[cursor];\n                cells[cursor] = 0;\n                select = false;\n        }else select = false;\n       \n        cursor = cursor < 20 ? cursor += 5 : cursor;\n        return;\n    }    \n    \n    if(!isPressed(KEY_DOWN_ARROW) && key_pressed[3]){\n        key_pressed[3] = false; \n        \n        if(cells[cursor-5] != 0 ){\n            select = false;\n        }else if(select && cursor >= 5){\n                cells[cursor-5] = cells[cursor];\n                cells[cursor] = 0;\n                select = false;\n        }\n        cursor = cursor >= 5 ? cursor -=5 : cursor;\n        return;\n    }\n    \n    if(!isPressed(KEY_LEFT_ARROW) && key_pressed[1]){\n        key_pressed[1] = false;  \n        \n        if(cells[cursor - 1] != 0 ){\n            select = false;\n        }else if(select && cursor%5 != 0){\n                cells[cursor - 1] = cells[cursor];\n                cells[cursor] = 0;\n                select = false;\n        }else select = false;\n        cursor = cursor > 0  ? cursor%5 == 0 ? cursor : cursor -=1 : cursor;\n        return;\n    }\n    \n    if(!isPressed(KEY_RIGHT_ARROW) && key_pressed[0] ){\n    \n        key_pressed[0] = false; \n         \n        if(cells[cursor + 1] != 0 ){\n            select = false;\n        }else if(select && cursor%5 != 4){\n                cells[cursor + 1] = cells[cursor];\n                cells[cursor] = 0;\n                select = false;\n        }else select = false;\n        \n        cursor = cursor < 24  ? cursor%5 == 4 ? cursor: cursor +=1  : cursor;\n        return;\n    }\n        \n    if(!isPressed(KEY_ENTER) && key_pressed[4]){\n        key_pressed[4] = false;\n        \n       if( select )\n            select = false;\n        else\n            select = cells[cursor] == 0 ? false : true;\n       return;\n    }\n}\n\nfloat sSquare(vec2 uv, float size, vec2 offset) {\n    float x = uv.x - offset.x;\n    float y = uv.y - offset.y;\n    return max(abs(x), abs(y)) - size;\n}\n\n\nfloat rectangle(vec2 uv, float width, float height, vec2 offset) {\n\tfloat x = uv.x - offset.x;\n    float y = uv.y - offset.y;\n    return max(abs(x/width), abs(y/height)) - 1./2.;\n}\n\n\nvec4 loadValue( in ivec2 re ){\n    return texelFetch( iChannel0, re, 0 );\n}\n\n\nvoid storeValue( in ivec2 re, in vec4 va, inout vec4 fragColor, in ivec2 fragCoord ){\n    fragColor = ( re.x==fragCoord.x && re.y==fragCoord.y ) ? va : fragColor;\n} \n\n\nint check_lines(){\n    for(int i=0;i<=20;i+=5)\n       if( (cells[i] == cells[i+1]) && (cells[i] == cells[i+2]) && (cells[i] == cells[i+3] && (cells[i] == cells[i+4] )))\n\t\t\t\treturn i;\n\nreturn -1;    \n}\n\nint check_cols(){\n    for(int i = 0; i <= 4 ; i++)\n\t\tif( (cells[i] == cells[i+5]) && (cells[i] == cells[i+10]) && (cells[i] == cells[i+15] ) && (cells[i] == cells[i+20]))\n\t\t\t\treturn i;\nreturn -1;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    int line=0,column=0;\n    float fline=0.,fcolumn=0.;\n  ivec2 ifragCoord = ivec2( fragCoord-0.5 );\n  vec2 uv = fragCoord/iResolution.xy;\n  uv -=.5;\n  uv.x *= iResolution.x/iResolution.y;\n    \n   vec3 background = vec3(0.2196); \n    \n\n   if(iFrame == 0){\n       cursor = 4;\n       select =  false;\n       stime = 0.;\n       score = 0;\n      \n       for(int i=0;i<=24;i++){\n           cells[i] = rand(uv);\n           if(i<5)  key_pressed[i] = false;\n       }\n       \n       cells[cursor] = 0;\n      \n   }else{\n   \n       cursor = int(loadValue( ivec2(31,1) ).x) ;\n       select = bool(loadValue( ivec2(31, 10)).x) ;\n       score = int(loadValue( ivec2(32, 10)).x) ;\n       score = score == 9999 ? 0 : score;\n       stime =loadValue( ivec2(39,1) ).x ;\n       \n        for(int i=0;i<=24;i++){\n           if(i<5)  key_pressed[i] = bool(loadValue( ivec2(30,i) ).x) ;\n            cells[i] = int(loadValue( ivec2(40+i,1) ).x) ;\n        }\n   \n   }\n   \n     \n    vec3 col = vec3(0.2196);\n    \n    \n    float square = sSquare(uv,0.496 ,vec2 (0));;\n    col = mix(vec3(0), col, step(0.01, square));\n       \n    check_input();\n     \n    \n     \n        line = iFrame > 0 ? check_lines() : -1;\n       if( line > -1 ){\n    \n           stime = stime > 0. ? stime : iTime;\n           \n            if(iTime - stime <= ATIME){\n                fline = float(line)/5./10.-(4.-float(line)/5.)/10.;\n                float rect = rectangle(uv,  5.*.198, .206, vec2 (0., fline)) ;\n                  if( sin(10.*iTime) > 0.)\n                    col = mix(vec3(1, 1,0), col, step(0.01, rect));\n                  else\n                    col = mix(vec3(0, 0,0), col, step(0.01, rect));  \n                rect = rectangle(uv,  5.*.194, .187, vec2 (0., fline)) ;\n                col = mix(vec3(0, 0,0), col, step(0.01, rect));\n           }else{\n               for(int j=line;j<=line+4;j++){\n                   cells[j] = rand(uv);\n               \n               }\n                  stime = 0.;\n                  score++;\n           }\n       }\n       \n        column = iFrame >0 ? check_cols() : -1;\n       if(column > -1){\n           stime = stime > 0. ? stime : iTime;\n\n           if(iTime - stime <= ATIME){\n                fcolumn = float(column)/10.-(4.-float(column))/10.;   \n                float rect = rectangle(uv,  .206, 5.*.206, vec2 (fcolumn, 0.)) ;\n                if( sin(10.*iTime) > 0.)\n                    col = mix(vec3(1, 1,0), col, step(0.01, rect));\n                else\n                    col = mix(vec3(0, 0,0), col, step(0.01, rect));\n                    \n                rect = rectangle(uv,  .185, 5.*.194, vec2 (fcolumn, 0.)) ;\n                col = mix(vec3(0, 0,0), col, step(0.01, rect));\n           }else{\n               for(int j=column;j<=24;j+=5){\n                   cells[j] = rand(uv);\n               }\n               stime = 0.;\n               score++;\n           }\n       }\n   \n   \n   \n    for(int i=0;i<=24;i++){\n    \n        if(i == cursor && line == -1 && column == -1){\n            square = sSquare(uv,0.095 ,vec2 (offset_x,offset_y));\n           if( i == cursor && select )\n               col = mix(vec3(0.949, 0.9843,0), col, step(0.01, square));\n           else\n               col = mix(vec3(0.796), col, step(0.01, square));\n       }\n       \n      \n       square = sSquare(uv,0.084,vec2 (offset_x,offset_y));\n       col = mix(colors[cells[i]], col, step(0.01, square)); \n        \n        if(i%5==4){\n            offset_y += 0.2;\n            offset_x = -0.4;\n        }else\n            offset_x +=0.2;\n            \n       \n    }\n   \n\n    fragColor = vec4(col,1.0);\n    fragColor +=printScore(score,uv).xxxx;\n    \n     \n    storeValue( ivec2(31,1), vec4(cursor), fragColor, ifragCoord );\n    storeValue( ivec2(31, 10), vec4(select), fragColor, ifragCoord );\n    storeValue( ivec2(32, 10), vec4(score), fragColor, ifragCoord );\n    storeValue( ivec2(39,1), vec4(stime), fragColor, ifragCoord );\n    \n    for(int i=0;i<=24;i++){\n       if(i<5) storeValue( ivec2(30,i), vec4(key_pressed[i]), fragColor, ifragCoord );\n        storeValue( ivec2(40+i,1), vec4(cells[i]), fragColor, ifragCoord );\n    }\n \n    \n}","name":"Buffer A","description":"","type":"buffer"}]}