{"ver":"0.1","info":{"id":"4flcDs","date":"1721948881","viewed":35,"name":"Simple Solar System Animation","username":"gabrielcunha","description":"This GLSL shader animates a simplified solar system with a sun, Earth, and moon. The starry background reacts to mouse movement, and the planets' orbits are controlled by time.\nIFNMG - Campus Salinas (Sistemas de Informação)","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["sun","interactive","space","animation","stars","orbit","solarsystem","sol","sistemasolar","animacao","interativo","espaco","orbita","estrelas"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4df3Rr","filepath":"/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","previewfilepath":"/media/ap/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normaliza as coordenadas do fragmento para o intervalo [0,1]\n    vec2 uv = fragCoord / iResolution.xy;\n\n    // Ajusta a razão de aspecto da tela\n    vec2 aspect = vec2(iResolution.x / iResolution.y, 1.0);\n    vec2 centeredUV = uv - 0.5;\n    centeredUV *= aspect;\n\n    // Obtém a cor do ruído\n    vec3 noiseColor = texture(iChannel1, uv).rgb;\n    \n    float edge = 0.012;\n\n    // Configuração do sol\n    vec2 sunPos = vec2(0.0, 0.0);\n    float sunRadius = 0.1;\n    vec3 sunColor = vec3(2.0, 1.5, 0.0) * (noiseColor + 0.2);\n    float sunDist = length(centeredUV - sunPos);\n    float sunAlpha = smoothstep(sunRadius + edge, sunRadius - edge, sunDist);\n\n    // Configuração do fundo com estrelas\n    vec3 backgroundColor = vec3(0.0, 0.0, 0.0);\n    vec2 mousePos = (iMouse.xy / iResolution.xy) * - 2.0;\n    vec2 noiseCoord = uv + mousePos * 0.2; \n    vec3 starField = texture(iChannel0, noiseCoord).rgb;\n    vec3 blueStar = starField;\n    blueStar.r = 0.2;\n    blueStar.g = 0.4;\n    blueStar.b = 1.5;\n    backgroundColor = mix(backgroundColor, blueStar, starField);\n\n    // Configuração da Terra\n    float earthOrbitRadius = 0.3;\n    vec2 earthPos = sunPos + vec2(sin(iTime),cos(iTime)) * earthOrbitRadius;\n    float earthRadius = 0.05;\n    vec3 earthColor = vec3(0.2, 0.5, 1.8) * (noiseColor + 1.0);\n    float earthDist = length(centeredUV - earthPos);\n    float earthAlpha = smoothstep(earthRadius + edge, earthRadius - edge, earthDist);\n\n    // Configuração da Lua\n    float moonOrbitRadius = 0.1;\n    vec2 moonPos = earthPos + vec2(sin(iTime * 6.0), cos(iTime * 6.0)) * moonOrbitRadius;\n    float moonRadius = 0.02;\n    vec3 moonColor = vec3(0.9, 0.9, 0.9) * (noiseColor + 0.5);\n    float moonDist = length(centeredUV - moonPos);\n    float moonAlpha = smoothstep(moonRadius + edge, moonRadius - edge, moonDist);\n\n    // Mistura as cores do fundo, sol, Terra e Lua\n    vec3 color = mix(backgroundColor, sunColor, sunAlpha);\n    color = mix(color, earthColor, earthAlpha);\n    color = mix(color, moonColor, moonAlpha);\n\n    // Define a cor final do fragmento\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}