{"ver":"0.1","info":{"id":"4tlyR4","date":"1503703533","viewed":248,"name":"XOR Sphere","username":"jaburns","description":"3d rotating sphere","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["3d","sphere","rotation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3Rr","filepath":"/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","previewfilepath":"/media/ap/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265358979\n\nmat3 rotateX(float rad) {\n    float c = cos(rad);\n    float s = sin(rad);\n    return mat3(\n        1.0, 0.0, 0.0,\n        0.0,   c,   s,\n        0.0,  -s,   c\n    );\n}\n\nmat3 rotateY(float rad) {\n    float c = cos(rad);\n    float s = sin(rad);\n    return mat3(\n          c, 0.0,  -s,\n        0.0, 1.0, 0.0,\n          s, 0.0,   c\n    );\n}\n\nmat3 rotateZ(float rad) {\n    float c = cos(rad);\n    float s = sin(rad);\n    return mat3(\n          c,   s, 0.0,\n         -s,   c, 0.0,\n        0.0, 0.0, 1.0\n    );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = 2.5 * fragCoord.xy / iResolution.yy - 1.25;\n    p.x -= 1.0;\n    float xx = p.x*p.x, yy = p.y*p.y;\n\n    // Return a black pixel if we're outside of the sphere.\n    if (xx + yy > 1.0) {\n        fragColor = vec4(0.0);\n        return;\n    }\n    \n    fragColor = vec4(1.0);\n\n    vec3 rotated = rotateY(iTime*2.0) * rotateX(iTime) * rotateZ(iTime/2.0)\n        * vec3(p.x, p.y, sqrt(1.0 - xx - yy));\n    \n    float phi   = atan(rotated.x, rotated.y) + PI;         // 0 < phi < 2pi\n    float theta = atan(rotated.z,   1.0    ) + PI / 4.0;   // 0 < theta < pi/2\t\n\n    // Transform the angles in to texture coordinates in [0,255].\n\tint u = int(floor( 256.0 *   phi / PI / 2.0 ));\n    int v = int(floor( 256.0 * theta / PI * 2.0 ));\n    \n    // Look up the texture coordinates in a colored XOR texture. \n    vec4 rgba;\n    fragColor.r = float(u ^ v);\n    fragColor.g = 2.0*abs(128.0 - fragColor.r);\n    fragColor.b = 255.0 - fragColor.r;\n    fragColor.a = 255.0;\n\n    // Compute the pixel's distance from the center of the lighting glare.\n    float ldx = p.x + 0.5;\n    float ldy = p.y - 0.5;\n    float ld = sqrt( ldx*ldx + ldy*ldy ) + 0.4; // Constant added here for anti-glare effect. 0 = glare, 1 = no glare.\n    ld *= ld;\n\n    // Divide all colors by the squared distance from the glare center, and we're done.\n    fragColor /= 255.0 * ld;\n}","name":"Image","description":"","type":"image"}]}