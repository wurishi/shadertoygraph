{"ver":"0.1","info":{"id":"stBcDW","date":"1649703114","viewed":110,"name":"DontPressThem","username":"RedWool","description":"cylinders!","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["cylinder"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Draw a circle\nfloat circle(in vec2 uv, in vec2 c, float r)\n{\n    return step(distance(uv, c), r);\n}\n\n//Modified box to make cylinder easier\n// x is goes left + right of center\n// y is goes bottom of center\nfloat box (in vec2 uv, in vec2 c, float x, float y)\n{\n    return (step(uv.x, c.x - x) - step(uv.x, c.x + x)) * (step(uv.y, c.y) - step(uv.y, c.y + y));\n}\n\n//Cylinder drawing, just a base circle + rectangle and circle to act as the top\nfloat cylinder( in vec2 uv, in vec2 c, float r, float h)\n{\n    float top = circle(uv, c + vec2(0,h), r);\n    float rim = .65 * max(circle(uv, c, r), box(uv, c, r, h));\n    \n    return max(top, rim);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float size = sin(iTime * .02) + 6.;\n    vec2 displace = vec2(iTime, sin(iTime*.1)*5.);\n    \n    uv = uv * size + displace;\n    \n    vec2 big = fract(uv);\n    vec2 i = floor(uv);\n\n    // Time varying pixel color\n    float pct = cylinder(big, vec2(.5, .04*sin(iTime+i.x*3.+i.y*9.)+.4), .3, .2*abs(sin(iTime*5.+i.x*18.+i.y*13.)));\n    vec3 col = vec3(pct) * vec3(1, 0.3,0.3);\n\n    // Output to screen\n    fragColor = vec4(col,1);\n}","name":"Image","description":"","type":"image"}]}