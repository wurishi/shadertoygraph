{"ver":"0.1","info":{"id":"MdtXWX","date":"1461872583","viewed":2526,"name":"Pulse effect","username":"Reedbeta","description":"Simple demo of how to use a shader to make an expanding pulse effect","likes":10,"published":3,"flags":0,"usePreview":0,"tags":["procedural","2d","pulse"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float saturate(float x)\n{\n    return clamp(x, 0.0, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Set the center point and thickness in pixels of the pulse effect\n    vec2 center = vec2(0.7, 0.5) * iResolution.xy;\n    float thickness = 12.0;\n    \n    // Calculate distance from effect center, in pixels\n    vec2 vecFromCenter = fragCoord - center;\n    float radius = sqrt(dot(vecFromCenter, vecFromCenter));\n\n    // Calculate current size of the pulse\n    float outerRadius = 300.0 * fract(iTime / 3.0);\n    float innerRadius = outerRadius - thickness;\n\n    // Calculate a function that will be 1.0 inside the pulse, 0.0 outside,\n    // with a 1px-wide falloff to antialias the edges\n    float pulse = saturate(radius - innerRadius) * saturate(outerRadius - radius);\n\n    // Lerp between the pulse color and background color based on this\n    vec4 pulseColor = vec4(0.25, 1.0, 0.8, 1.0);\n    vec4 backgroundColor = vec4(0.0, 0.0, 0.0, 1.0);\n    fragColor = mix(backgroundColor, pulseColor, pulse);\n\n    // Approximate linear-to-sRGB conversion (improves antialiasing quality)\n    fragColor.rgb = sqrt(fragColor.rgb);\n}\n","name":"Image","description":"","type":"image"}]}