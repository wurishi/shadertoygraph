{"ver":"0.1","info":{"id":"M3jyzK","date":"1727459702","viewed":68,"name":"Dados móveis","username":"Elsio","description":"continue brincando! mesmo que não tenha nenhum significado. a técnica pode continuar sendo exercitada até que algo de útil chegue e te pegue preparado","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["2d","square","subdivision"],"hasliked":0,"parentid":"4csfzn","parentname":"Subdivisao animada"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// original #Tater\n// https://www.shadertoy.com/view/stdGz4\n\n#define h21(a) fract(sin(dot(a, vec2(12.9898, 78.233))) * 43758.5453)\n#define pi acos(-1.)\n\nvoid mainImage(out vec4 o, vec2 u) {    \n    vec2 r = iResolution.xy;\n    u = (u - r / 2.) / r.y;\n    \n    u *= dot(u, u) * .25 + 1.15;\n    \n    if(false){\n        u.y += 1.;\n        u = vec2(\n                atan(u.x, u.y) * 6. / pi,\n                log(length(u))\n            )  + vec2(cos(iTime * 5.) * .3, 0);\n    }\n    \n    vec2 b = vec2(1, r.y/r.x),\n         a = -b, \n         q, s, k;\n\n    float i, t; \n    while(i++ < 4.)\n        t = iTime * .6 + h21(k),\n        /**/t = floor(t) + smoothstep(.0, .2, fract(t)),\n        \n        q = cos(h21(k) + vec2(t * 3., t * 2. + 11.)) * .2 + .5,\n        \n        q = mix(a, b, q),\n        s = step(u, q),\n        b = mix(b, q, s),\n        a = mix(q, a, s),\n        k += s + i;\n    \n    q = (b - a) / 2.;\n    q -= abs(u - a - q);\n    \n    float square = min(q.x, q.y),\n          reddot = length(u - (a + b) / 2.) - .01;\n          square = smoothstep(0., 1. / r.y, square);\n          reddot = smoothstep(2. / r.y, .0, reddot);\n    \n    o = mix(\n            mix(\n                vec4(square * h21(k)), \n                vec4(0),\n                tanh(cos(t * .25 ) * 8. ) * .5 + .5\n            ),\n            vec4(1, 0, 0, 0), \n            reddot\n        );\n}\n","name":"Image","description":"","type":"image"}]}