{"ver":"0.1","info":{"id":"WdjSRR","date":"1552679429","viewed":67,"name":"cg_task1","username":"inaara98","description":"Трассировка лучей.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raytrace"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n\nstruct Dif {\n    float first, second;\n};\n\nmat2 Rot(float a) {\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat smin( float a, float b, float k ) {\n    float h = clamp( 0.5+0.5*(b-a)/k, 0., 1. );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat sdCapsule(vec3 p, vec3 a, vec3 b, float r) {\n\tvec3 ab = b-a;\n    vec3 ap = p-a;\n    \n    float t = dot(ab, ap) / dot(ab, ab);\n    t = clamp(t, 0., 1.);\n    \n    vec3 c = a + t*ab;\n    \n    return length(p-c)-r;\n}\n\nfloat sdCylinder(vec3 p, vec3 a, vec3 b, float r) {\n\tvec3 ab = b-a;\n    vec3 ap = p-a;\n    \n    float t = dot(ab, ap) / dot(ab, ab);\n    \n    vec3 c = a + t*ab;\n    \n    float x = length(p-c)-r;\n    float y = (abs(t-.5)-.5)*length(ab);\n    float e = length(max(vec2(x, y), 0.));\n    float i = min(max(x, y), 0.);\n    \n    return e+i;\n}\n\nfloat sdTorus(vec3 p, vec2 r) {\n\tfloat x = length(p.xz)-r.x;\n    return length(vec2(x, p.y))-r.y;\n}\n\nfloat dBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\n\nfloat GetDist(vec3 p) {\n    \n    float t = iTime;\n    \n    float pd = p.y;\n    \n    vec3 bp = p;\n    bp -= vec3(0,.75,3);\n    float rotate = dBox(bp, vec3(.75));\n    \n    vec3 tp = p;\n    tp -= vec3(-2, 1.5, -4);\n    tp = tp.xzy;\n    float scale = sdTorus(tp, vec2(1, .25));\n    \n    float morph = mix(\n        length(p-vec3(4,1,2))-1., \n        dBox(p-vec3(4,1,2), vec3(1,1,1)), \n        .5\n    );\n    \n    float subtract = max(\n        -dBox(p - vec3(1., 1,0), vec3(1, .5, 2)), \n        length(p - vec3(0, 1, 0)) - 1.    \n    );\n    \n    float intersect = max(\n        dBox(p - vec3(-3., 1, 0), vec3(1, .5 ,2)), \n        length(p - vec3(-4, 1, 0)) - 1.\n    );\n    \n    float blend = smin(\n        length(p - vec3(3, 1, -3)) - .75,\n        length(p - vec3(3., 1.5, -3)) - .5,\n        .2\n    );\n    \n    float d = min(morph, pd);\n    d = min(d, subtract);\n    d = min(d, intersect);\n    d = min(d, rotate);\n    d = min(d, scale);\n    d = min(d, blend);\n    \n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = abs( GetDist(p) );\n        dO += dS;\n        if(dO>MAX_DIST || dS<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nDif GetLight(vec3 p) {\n    vec3 lightPos1 = vec3(3, 5, 4);\n    vec3 lightPos2 = vec3(-3, 1, 4);\n    vec3 l = normalize(lightPos1-p);\n    vec3 m = normalize(lightPos2-p);\n    vec3 n = GetNormal(p);\n    \n    Dif dif;\n    dif.first = clamp(dot(n, l)*.5+.5, 0., 1.);\n    dif.second = clamp(dot(n, m)*.5+.5, 0., 1.);\n    float d1 = RayMarch(p+n*SURF_DIST*2., l);\n    float d2 = RayMarch(p+n*SURF_DIST*2., m);\n    if(p.y<.01 && d1<length(lightPos1-p)) dif.first *= .5;\n    if(p.y<.01 && d2<length(lightPos2-p)) dif.second *= .5;\n    \n    return dif;\n}\n\nvec3 R(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n    \n    vec3 col = vec3(0);\n    \n    vec3 ro = vec3(0, 4, -5);\n    ro.yz *= Rot(-m.y+.4);\n    ro.xz *= Rot(iTime*.2-m.x*6.2831);\n    \n    vec3 rd = R(uv, ro, vec3(0,0,0), .7);\n\n    float d = RayMarch(ro, rd);\n    \n    Dif dif;\n    \n    if(d<MAX_DIST) {\n    \tvec3 p = ro + rd * d;\n    \n    \tdif = GetLight(p);\n        col = vec3(dif.second, 0., 0.);\n        col += vec3(dif.first);\n    }\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}