{"ver":"0.1","info":{"id":"wttXRB","date":"1581267137","viewed":182,"name":"Hexagons everywhere","username":"Lokirbourg","description":"This is the result of 2 days practicing shaders by watching the Art Of Code tutorials on YouTube. I tried to mix the Starfield tutorial with hexagons creation. And I also wanted to make those hexes react to the sound.","likes":4,"published":1,"flags":64,"usePreview":0,"tags":["hexagons","audioreact"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xl2GzW","filepath":"https://soundcloud.com/noisia/liliths-club","previewfilepath":"https://soundcloud.com/noisia/liliths-club","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*Music: Lilith's Club by Noisia (Devil May Cry OST)*/\n\nfloat fft = 0.0;\n\nmat2 Rot(float a)\n{\n\tfloat s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat DrawHex(vec2 p)\n{;\n\tp = abs(p);\n    float c = dot(p, normalize(vec2(1.0, 1.73)));\n    c = max(c, p.x);\n    return c;\n}\n\nfloat Hash21(vec2 p)\n{\n\tp = fract(p * vec2(123.34, 456.21));\n    p += dot(p, p + 45.32);\n    return fract(p.x * p.y);\n}\n\nvec3 HexesLayer(vec2 uv)\n{\n\tvec3 col = vec3(0);\n    \n    vec2 gv = fract(uv) - 0.5; //tiling and making the middle of each tile the origin\n\tvec2 id = floor(uv);\n    \n    for (int y = -1; y <= 1; ++y)\n    {\n    \tfor (int x = -1; x <= 1; ++x)\n        {\n        \tvec2 offs = vec2(x, y);\n            float rand = Hash21(id + offs);\n            float hex = smoothstep(clamp(fft, 0.3, 1.0), 0.1, DrawHex(gv-offs- vec2(rand, fract(rand * 40.0)) + 0.5));\n        \tvec3 color = (sin(vec3(0.2, 0.3, 0.9) * fract(rand * 6531.3) * 532.4) * 0.5 + 0.5);\n            \n           \tcol += hex * color;\n        }\n    }\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy)/iResolution.y;\n\tuv *= 5.0;\n    \n    // read frequency data from first row of texture\n    //change the first value of the vec2 to influence the blinking effect\n    fft  = texture(iChannel0, vec2(0.01, 0.0)).x;\n    \n    float t = iTime * 0.2;\n    \n    uv *= Rot(sin(t * 2.0));\n\tvec3 col = vec3(0);\n    \n    float LayerCount = 1.7;\n    \n    for (float i = 0.0; i < 1.0; i+= 1.0 / LayerCount)\n    {\n        float depth = fract(i + t);\n        float scale = mix(5., 0.5, depth);\n    \tcol += HexesLayer(uv * scale + (i * 1000.0)) * (depth * smoothstep(1.0, 0.96, depth));\n    }\n   \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}