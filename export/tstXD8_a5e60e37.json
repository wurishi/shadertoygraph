{"ver":"0.1","info":{"id":"tstXD8","date":"1571922934","viewed":71,"name":"ramarchv6 ","username":"jorge2017a1","description":"ramarchv6 --uso de camara","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["camara","ramarchv6"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Created by UltimateKimera in 2019-10-21\n//modificado por jorge2017a1 in 2019-10--22\n\n\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURFACE_DIST .001\n\n\n//Sphere function\nfloat sdSphere(in vec3 p, in vec3 c, in float r) {\n    return length(c - p) - r;\n}\n\n//Box function\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return length(max(d,0.0))\n         + min(max(d.x,max(d.y,d.z)),0.0); // remove this line for an only partially signed sdf \n}\n\n\nfloat GetDist(vec3 p){\n    vec4 sphere = vec4(0,1,6,1);\n    vec4 sphere2 = vec4(0,0.5,3.0,0.25);\n    \n    //float dSphere = length(p-sphere.xyz)-sphere.w;\n    \n    \n    float dSphere, dSphere2;\n    //dSphere=sdSphere( sphere.xyz, p ,sphere.w );\n    //dSphere2=sdSphere( sphere2.xyz, p ,sphere2.w );\n    \n    float dPlane = p.y;\n    float d;\n    d=p.y;\n     //d= min(dSphere, dPlane);\n    //  d= min(d, dSphere2);\n    \n    \n    \n    float bx1, bx2, bx3, bx4, bx5, bx6;\n    float bxl1, bxl2, bxl3, bxl4, bxl5, bxl6;\n    float bxc7,bxc8;\n    \n    //bx1=sdBox( p-vec3(0.5,0.1,0), vec3(0.8,0.5,0.5) );\n    \n    \n    \n    bx1 = sdBox(p- vec3(0, 0, 16), vec3(5.5, 5.8, 0.5));\n    bx2 = sdBox(p- vec3(1.5, 0, 6), vec3(0.5, 1.8, 0.5));\n    bx3 = sdBox(p- vec3(3.5, 0, 6), vec3(0.15, 1.0, 1.5));\n    bx4 = sdBox(p- vec3(3.7, 1.5, 6), vec3(0.15, 0.5, 1.5));\n    bx5 = sdBox(p- vec3(3.9, 2.5, 6), vec3(0.15, 0.5, 1.5));\n    bx6 = sdBox(p- vec3(4.1, 3.5, 6), vec3(0.15, 0.5, 1.5));\n    \n    \n    bxl1 = sdBox(p- vec3(-0.1, 0,10), vec3(4.5, 2.8, 0.5));\n    bxl2 = sdBox(p- vec3(-1.5, 0, 6), vec3(0.5, 1.8, 0.5));\n    bxl3 = sdBox(p- vec3(-3.5, 0, 6), vec3(0.15, 1.0, 1.5));\n    bxl4 = sdBox(p- vec3(-3.7, 1.5, 6), vec3(0.15, 0.5, 1.5));\n    bxl5 = sdBox(p- vec3(-3.9, 2.5, 6), vec3(0.15, 0.5, 1.5));\n    bxl6 = sdBox(p- vec3(-4.1, 3.5, 6), vec3(0.15, 0.5, 1.5));\n    \n    \n    bxc7=sdBox(p- vec3(7.5, 0.0, 20.0), vec3(2.0, 15.0, 0.0));\n    bxc8=sdBox(p- vec3(-7.5, 0.0, 20.0), vec3(2.0, 15.0, 0.0));\n    \n    d= min(d, bx1); \t\n  \td= min(d, bx2);\n  \td= min(d, bx3);\n  \td= min(d, bx4);\n  \td= min(d, bx5);\n  \td= min(d, bx6);\n    \n    d= min(d, bxl1); \t\n  \td= min(d, bxl2);\n  \td= min(d, bxl3);\n  \td= min(d, bxl4);\n  \td= min(d, bxl5);\n  \td= min(d, bxl6);\n    \n    d= min(d,bxc7);\n    d= min(d,bxc8);\n    \n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd){\n    float dO = 0.;\n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + dO*rd;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dS<SURFACE_DIST || dO>MAX_DIST) break;\n    }\n    return dO;\n}\n\nvec3 GetNormal(vec3 p){\n    vec2 e = vec2(.01, 0);\n    float d = GetDist(p);\n    vec3 n = vec3(\n    \td-GetDist(p-e.xyy),\n        d-GetDist(p-e.yxy),\n        d-GetDist(p-e.yyx)\n    );\n    \n    return normalize(n);\n}\n\nfloat GetLight(vec3 p){\n    vec3 lightPos = vec3(0, 5, 6);\n    lightPos.xz += vec2(sin(iTime), cos(iTime))*2.;\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l), 0., 1.);\n    float d = RayMarch(p+n*SURFACE_DIST*2., l);\n    if (d<length(lightPos-p)) dif *= .1;\n    return dif;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0);\n    \n   \n    vec3 ro;\n    \n\n\n    \n    if (iTime <2.0 )  {ro=vec3(0.0,0.5,0.0);}\n    if (iTime >2.0 && iTime<6.1)  {ro=vec3(0.0,1.5,2.0);}\n    if (iTime >6.2 && iTime<10.1)  {ro=vec3(0.0,1.5,3.0);}\n    if (iTime >10.2 && iTime<13.1) {ro=vec3(0.0,3.0,0.0);}\n    \n    if (iTime >13.2 && iTime<17.0)\n    {\t\n        ro=vec3(0.0,4.5,1.0);\n    }\n    \n    if (iTime >17.0 && iTime<21.0)\n    {\t\n         ro=vec3(10.0*sin(iTime),0.5,0.0);\n    }\n    \n    \n     if (iTime >21.1 && iTime<27.0)\n    {\t\n         ro=vec3(0.0,0.5,15.0*cos(iTime));\n    }\n    \n    if (iTime >21.1 && iTime<27.0)\n    {\t\n         ro=vec3(10.0*sin(iTime),0.5,15.0*cos(iTime));\n    }\n    \n    \n     if (iTime>27.1)\n    {\t\n         ro=vec3(0.0,5.5+4.0*sin(iTime),0);\n    }\n    \n    \n    \n    \n    vec3 rd = normalize(vec3(uv.x, uv.y, 1));\n    \n    float d = RayMarch(ro, rd);\n    \n    vec3 p = ro + rd*d;\n    \n    float dif = GetLight(p);\n    col = vec3(dif);\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}