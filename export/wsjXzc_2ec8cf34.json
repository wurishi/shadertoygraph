{"ver":"0.1","info":{"id":"wsjXzc","date":"1554626350","viewed":194,"name":"Domain Warped FBM","username":"hahahahaman","description":"Modification of fractal brownian motion from: https://thebookofshaders.com/13/ and https://iquilezles.org/articles/warp/warp.htm","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["fractal","noise","brownian"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n\nfloat random (in vec2 _st) {\n    return fract(sin(dot(_st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\nfloat noise (in vec2 _st) {\n    vec2 i = floor(_st);\n    vec2 f = fract(_st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\n#define NUM_OCTAVES 10\n#define NUM_FBM 3\nfloat fbm ( in vec2 _st) {\n    float v = 0.0;\n    float a = 0.5;\n    vec2 shift = vec2(100.0);\n    // Rotate to reduce axial bias\n    mat2 rot = mat2(cos(0.5), sin(0.5),\n                    -sin(0.5), cos(0.50));\n    for (int i = 0; i < NUM_OCTAVES; ++i) {\n        v += a * noise(_st)*1.236;\n        _st = rot * _st * 1.608 + shift;\n        a *= 0.588;\n    }\n    return v;\n}\n\nfloat nested_fbm(in vec2 _st, float s){\n    vec2 p = vec2(0.);\n    for(int i = 0; i < NUM_FBM-1; i++){\n        float float_i = float(i);\n        vec2 q = vec2(0.);\n        vec2 shift = vec2(float_i*s*0.080, float_i*s*0.492);\n        q.x = sin(fbm(_st + 3.904*p + shift));\n        q.y = fbm(_st + 4.344*p + shift);\n\n        p = q;\n    }\n\n    return fbm(_st + 3.504*p);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 st = fragCoord.xy/iResolution.xy*2.;\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    // st += st * abs(sin(iTime*0.1)*3.0);\n    vec3 color = vec3(0.0);\n\n    vec2 q = vec2(0.);\n    q.x = fbm( st + .01*iTime);\n    q.y = fbm( st + vec2(1.0));\n\n    vec2 r = vec2(0.);\n    r.x = fbm( st + 5.272*q + vec2(0.2,22.0)+ -0.001*iTime );\n    r.y = fbm( st + 4.992*q + vec2(8.3,2.8)+ 0.0001*iTime);\n\n    vec2 s = vec2(0.);\n    s.x = fbm(st + 6.808*r + vec2(0.150,-0.460) + 0.001*iTime);\n    s.y = fbm(st + 7.968*r + vec2(-0.160,0.230) + 0.003*iTime);\n\n    float f = fbm(st+2.0*s);\n    float f1 = nested_fbm(st, 2.400);\n    float f2 = nested_fbm(st, 3.800);\n    float f3 = nested_fbm(st, 2.584);\n\n    color = mix(color,\n                vec3(f3, f, f2),\n                clamp(f*f*f,0.0,1.0));\n\n    float cr = clamp(f3*f*(1.0-uv.x)*cos(uv.x), 0.0, 1.0);\n    float cg = 0.5;\n    float cb = clamp(f2*f*cos(uv.x),0.0, 1.0);\n\n    fragColor = vec4(vec3(cr,cg,cb)*0.6*color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}