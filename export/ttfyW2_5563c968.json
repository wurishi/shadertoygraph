{"ver":"0.1","info":{"id":"ttfyW2","date":"1593076914","viewed":73,"name":"punktLineDrawer","username":"kvark","description":"shader for drawing dot lines","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["line"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nconst vec4 MAJOR_COLOR = vec4(0.1, 0.1, 0.1, 1); \nconst vec4 MINOR_COLOR = vec4(0.3, 0.8, 0.2, 1); \n#define PI 3.1415926535897932384626433832795\n\nfloat toFloat(bool value){\n\treturn value ? 1.0f : 0.0f;\n}\n\nfloat isHerePunktLine(vec2 start, vec2 end, float wigth, vec2 current, float freq){\n    \n    vec2 startToCurr = current - start;\n    vec2 startToEnd = end - start;\n\n    float lengthToLine\n        = \tabs(\n        \t\tsin(\n            \t\tasin( \n                \t\t\tdot(startToCurr, startToEnd)/\n                        \t(length(startToCurr) * length(startToEnd))\n             \t\t\t) - PI/2.0f\n         \t\t) * length(startToCurr)\n        \t);\n    \n    // is nan for case when point exacly on center of line\n    float needToDraw;// = toFloat(isnan(lengthToLine)) * (lengthToLine < wigth);\n\n    float projectionLength = dot(startToCurr, startToEnd) / length(startToEnd);\n    float visibilityValue = sin(projectionLength * PI / freq);\n    //needToDraw = needToDraw && (visibilityValue > 0.f);\n    \n    return needToDraw;\n}\n\nfloat symetry(float value){\n\treturn 1.0f - value;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 normalizedFragCord = fragCoord / iResolution.y;\n    vec2 mouse = iMouse.xy / iResolution.y;\n    \n    float isLineHere = isHerePunktLine(vec2(0.8f, 0.0f), mouse, 0.003f,  normalizedFragCord, 0.025);\n    fragColor = MAJOR_COLOR * symetry(isLineHere) + MINOR_COLOR * isLineHere;\n}","name":"Image","description":"","type":"image"}]}