{"ver":"0.1","info":{"id":"tdtBW7","date":"1605319684","viewed":100,"name":"Curvature Modelling w/Sine Waves","username":"oneshade","description":"I have continued playing around with curve fitting with sine waves and made a lambda symbol which wasn't too hard. You can play around with a desmos graph of it here: https://www.desmos.com/calculator/zmjby4x2jc","likes":3,"published":3,"flags":0,"usePreview":0,"tags":["sine","curvefitting","modelling","curvature"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Bounce function from my Simple Bouncing shader (https://www.shadertoy.com/view/WdtczS):\nfloat bounce(float time, float period, float maxHeight) {\n    float modulus = mod(time / period, 1.0);\n    return modulus * (1.0 - modulus) * 4.0 * maxHeight;\n}\n\nfloat curve(in vec2 p, in vec2 a, in vec2 b, in float thickness) {\n    if (min(a.x, b.x) < p.x && p.x <= max(a.x, b.x)) {\n        float sine = sin(((p.x - a.x) / (b.x - a.x) * 2.0 - 1.0) * 1.5707963267);\n        float cy = a.y + (0.5 + 0.5 * sine) * (b.y - a.y);\n        return smoothstep(thickness, 0.0, abs(p.y - cy));\n    }\n\n    return 0.0;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * 4.0;\n    float color = 0.0;\n\n    vec2 scale = vec2(0.9);\n    scale.y *= 0.9 + bounce(iTime, 2.0, 0.2) - 0.1;\n\n    color += curve(uv, vec2(-1.5, -2.0) * scale, vec2(0.1, 0.0) * scale, 0.05);\n    color += curve(uv, vec2(1.5, -2.0) * scale, vec2(-1.3, 2.0) * scale, 0.05);\n\n    fragColor = vec4(vec3(color), 1.0);\n}","name":"Image","description":"","type":"image"}]}