{"ver":"0.1","info":{"id":"MXfXWn","date":"1709320674","viewed":63,"name":"Voronoi Minkowski Noise Stars","username":"Nekupaska","description":"Complete beginner to GLSL. This was an experiment.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["voronoi","stars","valuenoise","minkowski"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"///////////////palette //https://iquilezles.org/articles/palettes/\nvec3 palette( float t , vec2 uv) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d; // black and white\n    //d = vec3(0.263,0.416,0.557); // red orange cyan\n    //d = vec3(0.100,0.120,0.157); // gold and silver\n    d = vec3(-.1,.04,.07); //red and silver blue, valstrax\n    \n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\n///////////main\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x *= iResolution.x/iResolution.y; //aspect ratio\n    float time = iTime/6.;\n    \n    int index; \n    vec2 p; //pos\n    int count=101;\n    \n    float d = voronoi2D(uv,count, index, p, time);\n    d = SmootherNoise(vec2(d));\n    d = fract(d*1.7+time);\n    d-=SmootherNoise(uv*3.);\n    //d-=SmootherNoise((uv*0.5+time*.5)*3.);\n    fragColor = vec4(vec3(palette(d, uv)),1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//Noise https://www.youtube.com/watch?v=zXsWftRdsvU\nfloat N21(vec2 p){\n    return fract(sin(p.x*100. +p.y*6574.)*5674.);\n}\n\nvec2 smoothStep(vec2 v){\n    return v * v * (3.-2. * v);\n}\n\nfloat SmoothNoise(vec2 uv){\n    vec2 lv = fract(uv);\n    vec2 id = floor(uv);\n    lv = smoothStep(vec2(lv.x,lv.y));\n\n    //bottom interp\n    float bl = N21(id);\n    float br = N21(id+vec2(1,0));\n    float b = mix(bl,br,lv.x);\n    \n    //top interp\n    float tl = N21(id+vec2(0,1));\n    float tr = N21(id+vec2(1,1));\n    float t = mix(tl,tr,lv.x);\n    \n    return mix(b,t,lv.y); \n}\n\nfloat SmootherNoise(vec2 uv) {\n    float a = 2.;\n    float b = 2.;\n    float times = 6.;\n    float c = SmoothNoise(uv*a)*b;\n    \n\t//layer\n    for(float i =1.;i<=times;i++){\n        a*=2.;\n        b=b/2.;\n        c += SmoothNoise(uv*(a*i))*b;\n    }\n    \n    c /= times;\n    \n    return c;\n}\n\n/////////Minkowski https://gist.github.com/BarakChamo/bbaa5080acad2e3f8080e3bdd42325a7\nfloat minkowskiDistance(vec2 v1, vec2 v2, float power){\n\tfloat d1 = pow(abs(v1.x - v2.x), power);\n\tfloat d2 = pow(abs(v1.y - v2.y), power);\n\treturn pow(d1 + d2, 1.0 / power);\n}\n\n/////////voronoi https://youtu.be/IEwUgnWRtQk\nfloat rand(vec2 co){\n    return fract(sin(dot(co.xy, vec2(12.9898,78.233))) * 43758.5453123)*2.;\n}\n\nfloat voronoi2D(vec2 uv, int count, out int index, out vec2 p, float time){\n    float closestDist=length(vec2(1));\n    index = 0;\n    p = vec2(0); //position\n    \n    for(int i = 0;i<count;i++){\n        vec2 pos = \n            vec2(\n                rand(vec2(i)),\n                rand(vec2(i)+2.)\n            );\n        \n        pos+=vec2(cos(pos.x+time)/20.,sin(pos.x+time)/20.);\n        \n        float dist = minkowskiDistance(pos, uv,.6)-cos(time/20.*float(i));\n        \n        if(dist < closestDist){\n            closestDist = dist;\n            index = i;\n            p = (pos);\n        }\n    }\n    \n    return closestDist;\n    \n}\n\n\n","name":"Common","description":"","type":"common"}]}