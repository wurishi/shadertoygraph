{"ver":"0.1","info":{"id":"4323WK","date":"1708903965","viewed":98,"name":"hydrangea panick","username":"int_45h","description":"panic","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["e"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define UIF (1.0 / float(0xffffffffU))\n#define KERNEL_SIZE 3\n\nfloat hash13(vec3 p)\n{\n\tuvec3 q = uvec3(ivec3(p)) * uvec3(1597334673U, 3812015801U, 2798796415U);\n\tuint n = (q.x ^ q.y ^ q.z) * 1597334673U;\n\treturn float(n) * UIF;\n}\n\nfloat hash11(float p)\n{\n\tuvec2 n = uint(int(p)) * uvec2(1597334673U, 3812015801U);\n\tuint q = (n.x ^ n.y) * 1597334673U;\n\treturn float(q) * UIF;\n}\n\nfloat value1D(float p)\n{\n    float p_grid = floor(p);\n    float p_cell = fract(p);\n    \n    p_cell *= p_cell*(3.-2.*p_cell);\n    \n    return mix(hash11(p_grid),hash11(p_grid+1.),p_cell);\n}\n\nfloat value3D(vec3 p)\n{\n    vec3 p_grid = floor(p);\n    vec3 p_cell = fract(p);\n    \n    p_cell *= p_cell*(3.-2.*p_cell);\n    \n    return mix(\n        mix(\n            mix(hash13(p_grid+vec3(0,0,0)),hash13(p_grid+vec3(1,0,0)),p_cell.x), \n            mix(hash13(p_grid+vec3(0,1,0)),hash13(p_grid+vec3(1,1,0)),p_cell.x), \n            p_cell.y\n        ), \n        mix(\n            mix(hash13(p_grid+vec3(0,0,1)),hash13(p_grid+vec3(1,0,1)),p_cell.x), \n            mix(hash13(p_grid+vec3(0,1,1)),hash13(p_grid+vec3(1,1,1)),p_cell.x), \n            p_cell.y\n        ),\n        p_cell.z\n    );\n}\n\n// Taken from https://graficaobscura.com/matrix/index.html\nvec4 saturation(vec4 color, float sat)\n{\n    vec4 lum = vec4(.3086,.6094,.0820,0.);\n    vec4 s = (1.-sat)*lum;\n    \n    return vec4(\n        dot(color, s+vec4(sat,0.,0.,0.)),\n        dot(color, s+vec4(0.,sat,0.,0.)),\n        dot(color, s+vec4(0.,0.,sat,0.)),\n        0.\n    );\n}\n\n// https://www.shadertoy.com/view/lsKSWR\nfloat vignette(vec2 uv, float intensity, float extent)\n{\n    uv *= 1.-uv.yx;\n    \n    return pow(uv.x*uv.y*intensity, extent);\n}\n\nvec4 get_warp(vec2 uv, float t)\n{\n    vec2 uv_prime = uv*2.-1.;\n    //vec2 offset = vec2(cos(iTime)-sin(iTime),sin(iTime)+cos(iTime));\n    vec2 offset = vec2(iTime);\n    vec3 uv_noise = vec3(uv_prime*5.+offset, iTime);\n    float l = length(uv_prime);\n    float n = value3D(uv_noise)*2.-1.;\n    float o = n*.005*l;\n    \n    vec4 c = texture(iChannel0, uv + o);\n    c = saturation(c, 1.-(.5*t));\n    return c;\n}\n\nvec4 get_radial_blur(vec2 uv, vec2 scale, float t)\n{\n    vec4 c = vec4(0.);\n    vec2 uv_2 = uv*2.-1.;\n    vec2 direction = normalize(uv_2);\n    \n    float dist = 1.-vignette(uv, 15., t);\n    dist *= 2.;\n    int size = KERNEL_SIZE*2;\n    \n    for (int i = 0; i < size; i++)\n    {\n        vec2 offset_xy = direction * float(i-KERNEL_SIZE);\n        offset_xy = uv + (offset_xy*dist)/scale;\n        c += vec4(\n            get_warp(offset_xy*(1.+.01*dist), t).r,\n            get_warp(offset_xy, t).gba\n        );\n    }\n    \n    c /= float(size);\n    \n    return c;\n}\n\nvec4 get_color(vec2 uv)\n{\n    float t = (.5+.5*sin(iTime*3.))*.4 + .2;\n    vec4 color = get_radial_blur(uv, vec2(256.), t) * vignette(uv, 15., t*.35+.15);\n    \n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = uv*.9+.05;\n    uv += .01*(vec2(\n        value1D(.15*uv.x + iTime*1.8),\n        value1D(.15*uv.y + iTime*2.+5.)\n    )*2.-1.);\n    vec4 col = get_color(uv);\n    \n    fragColor = col;\n}","name":"Image","description":"","type":"image"}]}