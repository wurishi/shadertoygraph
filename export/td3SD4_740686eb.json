{"ver":"0.1","info":{"id":"td3SD4","date":"1571954621","viewed":323,"name":"very short normal calculation","username":"blackle","description":"computing normals with a matrix trick","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["normals","normal","finitedifferences"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//CC0 1.0 Universal https://creativecommons.org/publicdomain/zero/1.0/\n//To the extent possible under law, Blackle Mori has waived all copyright and related or neighboring rights to this work.\n\nfloat scene(vec3 p) {\n    p.xz *= mat2(cos(1.),-sin(1.),sin(1.),cos(1.));\n   \treturn length(vec2(p.x, length(p.yz)-1.)) - .5;\n}\n\n//mat(p,p,p) will construct a matrix with p as the columns\n//mat(0.001) will construct a matrix with 0.001 as the diagonal\nvec3 normal(vec3 p) {\n\tmat3 k = mat3(p,p,p)-mat3(0.001);\n\treturn normalize(scene(p)-vec3(scene(k[0]),scene(k[1]),scene(k[2])));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy-0.5*iResolution.xy)/iResolution.yy;\n\n    vec3 cam = normalize(vec3(1.0,uv));\n    vec3 p = vec3(-5.0,0.0,0.0);\n    bool hit = false;\n    for (int i = 0; i < 150 && !hit; i++) {\n        float dist = scene(p);\n        hit = dist*dist < 1e-6;\n        p += cam*dist;\n    }\n\n    vec3 n = normal(p);\n    fragColor.xyz = hit ? sin(n)*0.5+0.5 : vec3(0.1);\n}","name":"Image","description":"","type":"image"}]}