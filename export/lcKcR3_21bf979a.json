{"ver":"0.1","info":{"id":"lcKcR3","date":"1732483917","viewed":35,"name":"Mandelbrot stuff","username":"donerfornothing","description":"This doesn't really work that smoothly, but I had fun","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define epsilon 0.001\nmat2 r2d(float t)\n{\n    float sn = sin(t);\n    float cs = cos(t);\n    return mat2(cs, -sn, sn, cs);\n}\n\n\nstruct obed\n{\n    float Re;\n    float Im;\n};\n\nint fractal(obed c, obed z) {\n  for (int iteration = 0; iteration < 50000; iteration++) {\n    float Re = z.Re * z.Re - z.Im * z.Im + c.Re;\n    float Im = 2.0 * z.Re * z.Im + c.Im;\n    z.Re = Re;\n    z.Im = Im;\n    if (z.Re * z.Re + z.Im * z.Im > 4.0) {\n      return iteration;\n    }\n  }\n\n  return 0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = (2.0f * fragCoord - iResolution.xy) / iResolution.y;\n    uv /= pow(2., iTime) / 3.;\n    uv += vec2(-0.59499 * iTime, 0.15215 * iTime + epsilon) / ( 0.5 * iTime);\n    // uv *= r2d(iTime / 2.) / iTime * 3.;\n        \n    obed uvc = obed(uv.x, uv.y);\n    \n    float mand = float(fractal(uvc, obed(0., 0.)));\n\n\n    if (mand <= 0.)\n    {\n        fragColor = vec4(mand, 0., 0., 0.);\n    }\n    else\n    {\n        fragColor = vec4(mand / 100., 0.0, mand / 20., 1.);\n    }\n\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void save_at_ivec(in ivec2 desired_pos, in vec4 data, inout vec4 fragColor, in ivec2 current_pos)\n{\n    fragColor = (desired_pos.x==current_pos.x && desired_pos.y==current_pos.y ) ? data : fragColor;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 int_fc = ivec2(fragCoord);\n    vec4 prev_pos = texelFetch(iChannel0, ivec2(0, 0), 0);\n    if(iFrame == 1)\n    {\n        prev_pos = vec4(0., 0., 0., 0.);\n    }\n    prev_pos += vec4(0.05 + sin(iTime), 0., 0., 0.);\n    save_at_ivec(ivec2(0, 0), prev_pos, fragColor, int_fc);\n}","name":"Buffer A","description":"","type":"buffer"}]}