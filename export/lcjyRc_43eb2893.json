{"ver":"0.1","info":{"id":"lcjyRc","date":"1722771163","viewed":36,"name":"simple voxel raytracer","username":"vlk65536","description":"voxel renderer","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["voxels"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sfGRr","filepath":"/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","previewfilepath":"/media/ap/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","type":"volume","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define DELTA 0.01\n\nstruct camera {\n    // Position (of root)\n    vec3 P;\n    \n    // Rotation\n    vec3 rot; // Yaw Pitch Roll\n    \n    // Shortest distance from root of camera\n    // to plane of camera\n    float dist;\n};\n\n\n// Step through scene by DELTA, checking voxel values as we go\nvec3 ray_march(vec3 P, vec3 v) {\n    vec3 r = P;\n    vec3 frag = texture(iChannel0, r).xyz;\n   \n    while (length(r) < (iTime + 100.0f)) {\n        frag = texture(iChannel0, r).xyz;\n        float thresh = exp(0.2*length(r - P))/100.0;\n        if (length(r) > 7.0 && length(frag) < thresh) {\n            frag *= tanh(length(r - P));\n            return frag.xxx + tanh(length((r - P).xy) + 0.1);\n        }\n        r += DELTA * v;\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec3 pos = vec3(\n        2.0 + cos(iTime / 30.0) + 50.0 * sin(iTime / 1000.0 ),\n        sin(iTime/10.0) - cos(iTime/40.0),\n        iTime/1.0\n    );\n    \n    // TODO: implement \n    camera cam = camera(pos, vec3(0.1), 2.);\n    \n    vec3(sin(cam.rot.y),0,cos(cam.rot.y));\n    vec3(cos(cam.rot.y),0,-sin(cam.rot.y));\n    \n    // 3D point on screen\n    vec3 P = vec3(uv,0.0)/3.0 + cam.P;\n    // Direction camera is looking in\n    vec3 O = vec3(0.0,0.0,-1.) + cam.P;\n    vec3 v = normalize(P-O);\n    \n    vec3 col = ray_march(O, v);\n\n    // Gamma correction\n    col = 2.*(1./(1.+exp(-col))-0.5);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}