{"ver":"0.1","info":{"id":"lXsBRj","date":"1728650160","viewed":67,"name":"quicksilver","username":"vivavolt","description":"mal","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["fractal","mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of \"Mandelbrot Set 030624 part 4\" by kukovisuals. https://shadertoy.com/view/XXXSD2\n// 2024-10-11 12:36:39\n\nfloat calculateMandelbrotSet(vec2 complexPoint, out float waveEffect, float iTime) {\n    const float escapeRadius = 256.0;\n    float iterationCount = 0.0;\n    vec2 z = vec2(0.0);\n    waveEffect = 1.0;\n    for (int i = 0; i < 32; i++) {\n        z = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + complexPoint;\n        if(dot(z, z) > (escapeRadius * escapeRadius)) break;\n        iterationCount += 1.0;\n        float waveFactor = sin(0.5 * (z.x + z.y) + iTime * 0.2) * cos(5.0 * (z.x - z.y) + iTime * 0.3);\n        waveEffect = min(waveEffect, abs(waveFactor));\n    }\n    waveEffect = 1.0 - exp(-150.0 * waveEffect);\n    if(iterationCount > 31.0) return 0.0;\n    float smoothIterationCount = iterationCount - log2(log2(dot(z,z))) + 4.0;\n    return smoothIterationCount;\n}\n\nvec2 distortCoordinates(vec2 coord, float iTime) {\n    float distortionX = sin(coord.y * 15.0 + iTime * 0.5) * 0.01;\n    float distortionY = cos(coord.x * 18.0 + iTime * 0.7) * 0.01;\n    return coord + vec2(distortionX, distortionY);\n}\n\nvec3 exclusionBlend(vec3 base, vec3 blend) {\n    return base + blend - 2.0 * base * blend;\n}\n\nvec3 calculateLayer(vec2 coords, float iTime, vec2 offset) {\n    float zoomFactor = 0.0001 + 0.099 * (0.5 + 0.5 * sin(iTime * 0.0005));\n    vec2 zoomCenter = vec2(-0.742, 0.186);\n    vec2 adjustedCoords = (coords - zoomCenter) * zoomFactor + zoomCenter + offset;\n    \n    float angle = iTime * 0.1 + cos(sin(iTime));\n    mat2 rotMat = mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n    vec2 rotatedCoords = rotMat * (adjustedCoords - zoomCenter) + zoomCenter;\n    \n    vec2 distortedCoords = distortCoordinates(rotatedCoords, iTime);\n    \n    float waveEffect;\n    float iteration = calculateMandelbrotSet(distortedCoords, waveEffect, iTime / 3.);\n    \n    vec3 baseColor = vec3(0.025, 0.05, 0.05);\n    vec3 edgeColor = vec3(0.9, 0.9, 0.9);\n    \n    vec3 color = mix(baseColor, edgeColor, waveEffect);\n    float pulse = sin(iTime * 0.5) * 0.1 + 0.9;\n    color *= pulse;\n    return color;\n}\n\nvec3 adjustContrast(vec3 color, float contrast) {\n    const vec3 lumCoeff = vec3(0.2125, 0.7154, 0.0721);\n    vec3 avgLumin = vec3(0.5);\n    vec3 brtColor = color - avgLumin;\n    return mix(avgLumin, avgLumin + brtColor * contrast, contrast);\n}\n\nfloat rand(vec2 co) {\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat radialGrainNoise(vec2 uv, float time, float grainIntensity, float radialFalloff) {\n    vec2 center = vec2(0., 0.);\n    float dist = distance(uv, center);\n    float radialFactor = 1.0 - smoothstep(0.0, radialFalloff, dist);\n    \n    float noise = rand(uv * 10. + time) * 2.0 - 1.0;\n    return noise * grainIntensity * radialFactor;\n}\n\nvec3 adjustBrightness(vec3 color, float brightness) {\n    return color * brightness;\n}\n\nvec3 adjustGamma(vec3 color, float gamma) {\n    return pow(color, vec3(1.0 / gamma));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 normalizedCoords = (2.0 * fragCoord.xy - iResolution.xy) / iResolution.xy;\n    \n    vec3 layer1 = calculateLayer(normalizedCoords, iTime/ 3., vec2(0.0));\n    vec3 layer2 = calculateLayer(normalizedCoords, iTime / 2., vec2(0.0, 0.0));\n    \n    layer1 = adjustGamma(layer1, 1.0 + 0.5 * radialGrainNoise(normalizedCoords, iTime / 100., .35, 5.0));\n    layer2 = adjustGamma(layer2, 1.0 + 0.5 * radialGrainNoise(normalizedCoords, iTime / 100., .35, 5.0));\n    \n    \n    vec2 displacement = (layer2.xy - 0.5) * 0.02; \n    vec3 displacedLayer1 = calculateLayer(normalizedCoords + displacement, iTime / 3., displacement);\n    \n    displacement = (layer1.xy - 0.5) * 0.02; \n    vec3 displacedLayer2 = calculateLayer(normalizedCoords + displacement, iTime / 3. * 0.1, displacement);\n   \n    vec3 finalColor = exclusionBlend(displacedLayer1, displacedLayer2);\n    \n    finalColor = tanh(vec3(pow(finalColor.x, .5), pow(finalColor.y, .5), pow(finalColor.z, .5)));\n    //finalColor = vec3(1.0) - finalColor;\n    \n    finalColor = adjustContrast(finalColor, 1.5);\n                finalColor = adjustBrightness(finalColor, 0.5);\n        finalColor = adjustGamma(finalColor, 2.75);\n    \n    \n    \n    fragColor = vec4(finalColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}