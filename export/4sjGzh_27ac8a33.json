{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"texture","id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}},{"channel":1,"type":"texture","id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}},{"channel":2,"type":"texture","id":"XsX3Rn","filepath":"/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}},{"channel":3,"type":"texture","id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"float rng(inout float seed)\n{\n\tfloat value = fract(seed * sin(seed * 4444.6) * cos(seed * 3233.03));\n\tseed = mod(seed + 99999.5, 1234.0);\n\treturn value;\n}\n\nfloat element(int type, float value)\n{\n\tif (type == 0)\n\t{\n\t\treturn sin(value) * 0.5 + 0.5;\n\t}\n\telse if (type == 1)\n\t{\n\t\treturn cos(value) * 0.5 + 0.5;\n\t}\n\telse if (type == 2)\n\t{\n\t\treturn tan(value);\n\t}\n\telse if (type == 3)\n\t{\n\t\treturn 1.0 - value;\n\t}\n\telse if (type == 4)\n\t{\n\t\treturn value + value;\n\t}\n\telse if (type == 5)\n\t{\n\t\treturn value * value;\n\t}\n\telse if (type == 6)\n\t{\n\t\treturn fract(value);\n\t}\n\telse\n\t{\n\t\treturn value;\n\t}\n}\n\nfloat operator(int type, float a, float b)\n{\n\tif (type == 0)\n\t{\n\t\treturn a + b;\n\t}\n\telse if (type == 1)\n\t{\n\t\treturn a * b;\n\t}\n\telse if (type == 2)\n\t{\n\t\treturn a - b;\n\t}\n\telse if (type == 3)\n\t{\n\t\treturn a / b;\n\t}\n\telse if (type == 4)\n\t{\n\t\treturn max(a, b);\n\t}\n\telse if (type == 5)\n\t{\n\t\treturn min(a, b);\n\t}\n\telse\n\t{\n\t\treturn a;\n\t}\n}\n\nvec4 random_scalar(vec2 coord, inout float seed)\n{\n\tint operationR = int(rng(seed) * 7.0);\n\tint operationG = int(rng(seed) * 7.0);\n\tint operationB = int(rng(seed) * 7.0);\n\tbool XR = rng(seed) > 0.5;\n\tbool XG = rng(seed) > 0.5;\n\tbool XB = rng(seed) > 0.5;\n\tfloat multX = rng(seed) * 100.0 - 50.0;\n\tfloat multY = rng(seed) * 100.0 - 50.0;\n\tfloat r = element(operationR, (XR)?(coord.x * multX):(coord.y * multY));\n\tfloat g = element(operationG, (XG)?(coord.x * multX):(coord.y * multY));\n\tfloat b = element(operationB, (XB)?(coord.x * multX):(coord.y * multY));\n\tfloat saturation = rng(seed);\n\treturn vec4(r, g, b, 1.0) * saturation;\n}\n\nvec4 random_vector_interior(vec2 coord, inout float seed)\n{\n\tint operatorR = int(rng(seed) * 6.0);\n\tint operatorG = int(rng(seed) * 6.0);\n\tint operatorB = int(rng(seed) * 6.0);\n\tint operationR = int(rng(seed) * 7.0);\n\tint operationG = int(rng(seed) * 7.0);\n\tint operationB = int(rng(seed) * 7.0);\n\tfloat multX = rng(seed) * 100.0 - 50.0;\n\tfloat multY = rng(seed) * 100.0 - 50.0;\n\n\tfloat r = element(operationR, operator(operatorR, coord.x * multX, coord.y * multY));\n\tfloat g = element(operationG, operator(operatorG, coord.x * multX, coord.y * multY));\n\tfloat b = element(operationB, operator(operatorB, coord.x * multX, coord.y * multY));\n\tfloat saturation = rng(seed);\n\treturn vec4(r, g, b, 1.0) * saturation;\n}\n\nvec4 random_vector_exterior(vec2 coord, inout float seed)\n{\n\tint operatorR = int(rng(seed) * 6.0);\n\tint operatorG = int(rng(seed) * 6.0);\n\tint operatorB = int(rng(seed) * 6.0);\n\tint operationRA = int(rng(seed) * 7.0);\n\tint operationGA = int(rng(seed) * 7.0);\n\tint operationBA = int(rng(seed) * 7.0);\n\tint operationRB = int(rng(seed) * 7.0);\n\tint operationGB = int(rng(seed) * 7.0);\n\tint operationBB = int(rng(seed) * 7.0);\n\tfloat multX = rng(seed) * 100.0 - 50.0;\n\tfloat multY = rng(seed) * 100.0 - 50.0;\n\n\tfloat r = operator(operatorR, element(operationRA, coord.x * multX), element(operationRB, coord.y * multY));\n\tfloat g = operator(operatorG, element(operationGA, coord.x * multX), element(operationGB, coord.y * multY));\n\tfloat b = operator(operatorB, element(operationBA, coord.x * multX), element(operationBB, coord.y * multY));\n\tfloat saturation = rng(seed);\n\treturn vec4(r, g, b, 1.0) * saturation;\n}\n\nvec4 random_texture(vec2 coord, inout float seed)\n{\n\tfloat multX = rng(seed) * 100.0 - 50.0;\n\tfloat multY = rng(seed) * 100.0 - 50.0;\n\tint selection = int(rng(seed) * 4.0);\n\t\n\tif (selection == 0)\n\t{\n\t\treturn texture(iChannel0, coord * vec2(multX, multY));\n\t}\n\telse if (selection == 1)\n\t{\n\t\treturn texture(iChannel1, coord * vec2(multX, multY));\n\t}\n\telse if (selection == 2)\n\t{\n\t\treturn texture(iChannel2, coord * vec2(multX, multY));\n\t}\n\telse\n\t{\n\t\treturn texture(iChannel3, coord * vec2(multX, multY));\n\t}\n\t\n\treturn texture(iChannel1, coord * vec2(multX, multY));\n}\n\nvec4 operation(vec4 color, inout float seed, vec2 coord)\n{\t\n\tint type = int(rng(seed) * 4.0);\n\t\n\tvec4 result = vec4(0.5, 0.5, 0.5, 1.0);\n\t\n\tif (type == 0)\n\t{\n\t\tresult = random_scalar(coord, seed);\n\t}\n\telse if (type == 1)\n\t{\n\t\tresult = random_vector_interior(coord, seed);\n\t}\n\telse if (type == 2)\n\t{\n\t\tresult = random_vector_exterior(coord, seed);\n\t}\n\telse\n\t{\n\t\tresult = random_texture(coord, seed);\n\t}\n\t\n\tint combine = int(rng(seed) * 8.0);\n\t\n\tif (combine == 0)\n\t{\n\t\tresult = color + (result);\n\t}\n\telse if (combine == 1)\n\t{\n\t\tresult = color * (result);\n\t}\n\telse if (combine == 2)\n\t{\n\t\tresult = color - (result);\n\t}\n\telse if (combine == 4)\n\t{\n\t\tresult = color / (result);\n\t}\n\telse if (combine == 5)\n\t{\n\t\tresult = mix(result, color, rng(seed));\n\t}\n\telse if (combine == 6)\n\t{\n\t\tresult = max(result, color);\n\t}\n\telse if (combine == 7)\n\t{\n\t\tresult = min(result, color);\n\t}\n\telse\n\t{\n\t\tresult = color;\n\t}\n\t\n\treturn result;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\t\n\tfloat seed = float(int(iTime * 0.3333));\n\t\n\tvec4 color = vec4(0.5, 0.5, 0.5, 1.0);\n\n\tfor (int n = 0; n < 10; n++)\n\t{\n\t\tcolor = operation(color, seed, uv);\n\t}\n\t\n\tfragColor = color;\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4sjGzh","date":"1383679072","viewed":333,"name":"Dial-a-painting","username":"Protarget","description":"Trying to see exactly how much Branching I can get away with before things break down. Does a bunch of operations randomly and randomly combines them to produce a final random image","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["random"],"hasliked":0,"parentid":"","parentname":""}}