{"ver":"0.1","info":{"id":"3tf3z4","date":"1555704813","viewed":601,"name":"Volumetric raymarching","username":"GMWolf","description":"testing some raymarching stuff","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"int MAX_IT = 100;\nfloat MAX_DIST = 10.0f;\nfloat epsilon = 0.00001f;\nvec3 lightDir = normalize(vec3(-1.f,-1.f,0.4));\nfloat scatterStep = 0.1f;\n\nfloat sphere(vec3 p, float s) {\n    return length(p) - s;\n}\n\nvec3 repeat(vec3 p, vec3 c) {\n \treturn mod(p, c) - 0.5 * c;   \n}\n\nfloat intersect(float d1, float d2) {\n \treturn max(d1, d2);   \n}\n\nfloat scene(vec3 p) {\n \treturn intersect(\n        sphere(repeat(p, vec3(0.6)), 0.2),\n        sphere(p, 2.0));\n}\n\n\nfloat march(vec3 ro, vec3 rd) {\n \tfloat totalDist = 0.0f;\n    for(int i = 0; i < MAX_IT && totalDist < MAX_DIST; i++) {\n        float d = scene(ro);\n        if(d < epsilon) {\n         \treturn totalDist;   \n        }\n        ro += rd * d;\n        totalDist += d;\n    }\n    return MAX_DIST;\n}\n\nbool sunVisible(vec3 pos) {\n    float distToLight = march(pos - epsilon * 10.f * lightDir, -lightDir);\n    return distToLight == MAX_DIST;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord * 2.0f - iResolution.xy) / iResolution.x;\n    \n    vec3 rd = normalize(vec3(uv, -1.0));\n    \n   \tvec3 ro = vec3(-1,-1,4);\n    float dist = march(ro, rd);\n    vec3 col = vec3(0);\n    if (dist != MAX_DIST) {\n        vec3 incidence = ro + rd * dist;\n        if(sunVisible(incidence)) {\n    \t\tfloat light = (scene(incidence - epsilon * lightDir) - scene(incidence)) / epsilon;\n            col += vec3(light);\n        }\n    }\n \n    //raymarch the scattering\n    for( float t = 0.0; t < dist; t += scatterStep) {\n    \tvec3 rayPos = ro + rd * t;\n        //col += vec3(0.07, 0.095, 0.1) * scatterStep;\n        if(sunVisible(rayPos)) {\n            col += vec3(1, 0.95, 0.92) * scatterStep / MAX_DIST;\n        }\n    }\n        \n    \n    \n    // Output to screen\n    //fragColor = vec4(vec3(float(it) / float(MAX_IT)),1.0);\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}