{"ver":"0.1","info":{"id":"NdBGDt","date":"1618582646","viewed":73,"name":"CG Witch ball","username":"SmiEgor","description":"homework","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["hw"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv) / float(iFrame + 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float INF = 1e10;\nconst int N = 10;\nconst vec3 CAMERA_POS = vec3(0, 1.2, -6);\nconst vec3 LIGHT1_POS = vec3(-2, 0.9, 4);\nvec3 LIGHT1_COLOR = vec3(0, 0, 1);\nconst float LIGHT1_RADIUS = 0.5;\n\nconst vec3 LIGHT2_POS = vec3(1.5, 1.9, -2);\nvec3 LIGHT2_COLOR = vec3(0.3, 1, 0.2);\nconst float LIGHT2_RADIUS = 0.2;\n\nconst vec3 LIGHT3_POS = vec3(1, 1.4, 4);\nvec3 LIGHT3_COLOR = vec3(1, 0.6, 0);\nconst float LIGHT3_RADIUS = 0.1;\n\nconst float SPACE_RADIUS = 0.39;\n\nvec3 randDir;\n\nfloat TracePlane(vec3 pos, vec3 dir, out vec3 normal)\n{\n    // (CAMERA_POS + t * ViewVec).y == 1\n    float t = (-1.3 - pos.y) / dir.y; // дистанция от позиции камеры до плоскости\n    // расстояние от камеры до некоторого примитива(объекта, плоскости)\n    if (t <= 0.0)\n    {\n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) >= 100.0)\n    {\n        return INF;\n    }\n    normal = vec3(0, 1, 0);\n    return t;\n}\n\nfloat TraceSphere(vec3 pos, vec3 dir, float r, out vec3 normal)\n{\n    float b = dot(pos, dir);\n    float D = b * b - dot(pos, pos) + r * r;\n    if (D < 0.0)\n    {\n        return INF;\n    }\n    float t = -b - sqrt(D);\n    if (t > 0.0)\n    {\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    t = -b + sqrt(D);\n    if (t < 0.0)\n    {\n        return INF;\n    }\n    normal = normalize(pos + t * dir);\n    return t;\n}\n\nfloat TraceCylinder(vec3 pos, vec3 dir, out vec3 normal)\n{\n    float t = (-1.0 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) < 0.5) {\n        normal = vec3(0, 1, 0);\n        return t;\n    }\n    \n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - 0.5;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    t = (-b - sqrt(D)) / a;\n    if (t > 0.0) {\n        worldPos = t * dir + pos;\n        if (worldPos.y <= -1.0) {\n            normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n            return t;\n        }\n    }\n    t = (-b + sqrt(D)) / a;\n    if (t < 0.0) {\n        return INF;\n    }\n    worldPos = t * dir + pos;\n    if (worldPos.y <= -1.0) {\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    }\n    return INF;\n}\n\nbool isOccluded(vec3 pos, vec3 target) {\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n    \n    vec3 sphNorm;\n    float sphT = TraceSphere(pos, dir, 1.0, sphNorm);\n    if (sphT < dist)\n        return true;\n    vec3 cylNorm;\n    float cylT = TraceCylinder(pos, dir, cylNorm);\n    return (cylT < dist);\n}\n\nvec3 computeLight(vec3 pos, vec3 color, vec3 normal)\n{\n    // освещение по Ламберту\n    vec3 toLight1 = LIGHT1_POS - pos;\n    float distSq1 = dot(toLight1, toLight1);\n    float att1 = isOccluded(pos, LIGHT1_POS + randDir * LIGHT1_RADIUS) ? 0.0 : 15.0f / distSq1;\n    vec3 toLight2 = LIGHT2_POS - pos;\n    float distSq2 = dot(toLight2, toLight2);\n    float att2 = isOccluded(pos, LIGHT2_POS + randDir * LIGHT2_RADIUS) ? 0.0 : 10.0f / distSq2;\n    vec3 toLight3 = LIGHT3_POS - pos;\n    float distSq3 = dot(toLight3, toLight3);\n    float att3 = isOccluded(pos, LIGHT3_POS + randDir * LIGHT3_RADIUS) ? 0.0 : 10.0f / distSq3;\n    return color * (\n        max(0.0, dot(normal, normalize(toLight1))) * att1 * LIGHT1_COLOR\n        + max(0.0, dot(normal, normalize(toLight2))) * att2 * LIGHT2_COLOR\n        + max(0.0, dot(normal, normalize(toLight3))) * att3 * LIGHT3_COLOR\n        + texture(iChannel1, normal).rgb * 0.1\n    );\n}\n\nvec3 refraction(vec3 v, vec3 normal, float n1, float n2)\n{\n    if (dot(v, normal) < 0.0)\n    {\n        normal = -normal;\n    }\n    float cosA = dot(v, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    \n    vec3 tang = normalize(v - cosA * normal);\n    \n    float sinB = sinA / n2 * n1;\n    //if (sinB > 1.0)\n    //{\n    //    return reflect(v, normal);\n    //}\n    float cosB = sqrt(1.0 - sinB * sinB);\n    return sinB * tang + cosB * normal;\n}\n\nfloat pow2(float x) {\n    return x * x;\n}\n\nfloat rand(float frame)\n{\n    return fract(sin( dot(vec3(frame), vec3(12.9898,78.233,45.5432) )) * 43758.5453);\n}\n\nvec4 getSpace(vec3 pos, vec3 dir, float brightness)\n{\n    const int iterations = 17;\n    const float formuparam = 0.5;\n    const int volsteps = 20;\n    const float stepsize =  0.1;\n    float zoom = 0.8;\n    float tile = 0.85;\n    const float darkmatter = 0.5;\n    const float distfading = 0.7;\n    const float saturation = 0.8;\n    vec3 from = vec3(1.0, .5, 0.5);\n\tfrom+=vec3(2.,1,-2.);\n\t//volumetric rendering\n\tfloat s= 0.1, fade=1.;\n\tvec3 v = vec3(0.);\n\tfor (int r=0; r < volsteps; r++) {\n\t\tvec3 p=from + s * dir*.5;\n\t\tp = abs(vec3(tile) - mod(p, vec3(tile*2.))); // tiling fold\n\t\tfloat pa,a=pa=0.;\n\t\tfor (int i=0; i<iterations; i++) { \n\t\t\tp = abs(p) / dot(p,p) - formuparam; // the magic formula\n\t\t\ta += abs(length(p) - pa); // absolute sum of average change\n\t\t\tpa = length(p);\n\t\t}\n\t\tfloat dm = max(0.0, darkmatter- a*a*.001); //dark matter\n\t\ta *=a * a; // add contrast\n\t\tif (r>6) fade*=1.-dm; // dark matter, don't render near\n\t\t//v+=vec3(dm,dm*.5,0.);\n\t\tv += fade;\n\t\tv += vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\n\t\tfade *= distfading; // distance fading\n\t\ts += stepsize;\n\t}\n\tv=mix(vec3(length(v)),v,saturation); //color adjust\n\treturn vec4(v* 0.01, .5);\t\n\t\n}\n\nvec4 getSpace_prev(vec3 pos, vec3 dir, float start_brightness)\n{\n    float radius = dot(pos, pos);\n    float end_brightness = 0.0015;\n    float a_coeff = (start_brightness - end_brightness) / (SPACE_RADIUS * SPACE_RADIUS);\n    float brightness = a_coeff * radius + end_brightness;\n    const int iterations = 17;\n    const float formuparam = 0.5;\n    const int volsteps = 20;\n    const float stepsize =  0.1;\n    float zoom = 0.8;\n    float tile = 0.85;\n    const float darkmatter = 0.5;\n    const float distfading = 0.7;\n    const float saturation = 0.8;\n    vec3 from = vec3(1.0, .5, 0.5);\n\tfrom+=vec3(2.,1,-2.);\n\t//volumetric rendering\n\tfloat s= 0.1, fade=1.;\n\tvec3 v = vec3(0.);\n\tfor (int r=0; r < volsteps; r++) {\n        \n\t\tvec3 p=from + s * dir*.5;\n\t\tp = abs(vec3(tile) - mod(p, vec3(tile*2.))); // tiling fold\n\t\tfloat pa,a=pa=0.;\n\t\tfor (int i=0; i<iterations; i++) { \n\t\t\tp = abs(p) / dot(p,p) - formuparam; // the magic formula\n\t\t\ta += abs(length(p) - pa); // absolute sum of average change\n\t\t\tpa = length(p);\n\t\t}\n\t\tfloat dm = max(0.0, darkmatter- a*a*.001); //dark matter\n\t\ta *=a * a; // add contrast\n\t\tif (r>6) fade*=1.-dm; // dark matter, don't render near\n\t\t//v+=vec3(dm,dm*.5,0.);\n\t\tv += fade;\n\t\tv += vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\n\t\tfade *= distfading; // distance fading\n\t\ts += stepsize;\n\t}\n\tv=mix(vec3(length(v)),v,saturation); //color adjust\n\treturn vec4(v* 0.0075, .5);\t\n\t\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    randDir = normalize(randVals - 0.5);\n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (randVals.xy - 0.5) * 2.0) / iResolution.x;\n    vec3 front = normalize(-CAMERA_POS);\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = normalize(cross(front, up));\n    up = normalize(cross(right, front));\n    vec3 ViewVec = normalize(front + right * uv.x + up * uv.y);\n    vec3 LIGHT2_POS = vec3(1.5, 0.9, -2) + vec3(0, 1, 0) * randVals.x * 0.1; //\n    vec3 LIGHT1_POS = vec3(-2, 0.9, 4) + vec3(0, 1, 0) * randVals.x * 0.2; //\n    vec3 LIGHT3_POS = vec3(1, 1.4, 4) + vec3(0, 1, 0) * randVals.x * 0.1; //\n    \n    const int EMISSION = 0;\n    const int DIFFUSE = 1;\n    const int REFLECTION = 2;\n    const int REFRACTION = 3;\n    \n    vec3 cur_pos = CAMERA_POS;\n    vec3 cur_dir = ViewVec;\n    \n    const float AIR_N = 1.0;\n    const float GLASS_N = 1.5;\n    \n    float n1 = AIR_N;\n    float n2 = GLASS_N;\n    \n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N + GLASS_N);\n    float mult = 0.6;\n    for (int i = 0; i < N; i++)\n    {\n        float t = INF; // изначальное значение\n        int materialType;\n        vec3 color;\n        vec3 normal;\n        float nEnter = AIR_N;\n        vec3 PlaneNormal;\n        float a = 1.0;\n        float planeT = TracePlane(cur_pos, cur_dir, PlaneNormal); // пускаем луч, если расстояния меньше t, то рисуем оьъект\n        // расстояние вдоль направления ViewVec\n        // перебираем все источники света и ищем ближайший из них\n        if (planeT < t)\n        {\n            t = planeT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * cur_dir + cur_pos;\n            color = texture(iChannel0, worldPos.xz * 0.1).rgb;\n            normal = PlaneNormal;\n        }\n        vec3 LightNormal1;\n        float light1T = TraceSphere(cur_pos - LIGHT1_POS, cur_dir, LIGHT1_RADIUS, LightNormal1);\n        if (light1T < t)\n        {\n            t = light1T;\n            materialType = EMISSION;\n            color = LIGHT1_COLOR;\n            normal = LightNormal1;\n        }\n        vec3 LightNormal2;\n        float light2T = TraceSphere(cur_pos - LIGHT2_POS, cur_dir, LIGHT2_RADIUS, LightNormal2);\n        if (light2T < t)\n        {\n            t = light2T;\n            materialType = EMISSION;\n            color = LIGHT2_COLOR;\n            normal = LightNormal2;\n        }\n        vec3 LightNormal3;\n        float light3T = TraceSphere(cur_pos - LIGHT3_POS, cur_dir, LIGHT3_RADIUS, LightNormal3);\n        if (light3T < t)\n        {\n            t = light3T;\n            materialType = EMISSION;\n            color = LIGHT3_COLOR;\n            normal = LightNormal3;\n        }\n        // add LIGHT3\n        vec3 space1Norm;\n        float space1 = TraceSphere(cur_pos + vec3(0, 0.05, 0), cur_dir, SPACE_RADIUS, space1Norm); // magic radius\n        if (space1 < t)\n        {\n            t = space1;\n            normal = space1Norm;\n            materialType = EMISSION;\n            vec3 worldPos = t * cur_dir + cur_pos;\n            vec4 space = getSpace(worldPos, cur_dir, 0.00065);\n            color = space.rgb;\n            a = space.a;\n        }\n        vec3 space_rec2Norm;\n        float space_res2 = TraceSphere(cur_pos - vec3(0, 0., 0.28), cur_dir, 0.3, space_rec2Norm); // magic radius\n        if (space_res2 < t)\n        {\n            t = space_res2;\n            normal = space_rec2Norm;\n            materialType = EMISSION;\n            vec3 worldPos = t * cur_dir + cur_pos;\n            vec4 space = getSpace(worldPos, cur_dir, 0.0028);\n            color = space.rgb;\n            a = space.a;\n        }\n        vec3 space_rec3Norm;\n        float space_rec3 = TraceSphere(cur_pos - vec3(0, -0.15, 0.28), cur_dir, 0.3, space_rec3Norm); // magic radius\n        if (space_rec3 < t)\n        {\n            t = space_rec3;\n            normal = space_rec3Norm;\n            materialType = EMISSION;\n            vec3 worldPos = t * cur_dir + cur_pos;\n            vec4 space = getSpace(worldPos, cur_dir, 0.0028);\n            color = space.rgb;\n            a = space.a;\n        }\n        vec3 space_rec4Norm;\n        float space_rec4 = TraceSphere(cur_pos - vec3(0.08, 0, 0.28), cur_dir, 0.3, space_rec4Norm); // magic radius\n        if (space_rec4 < t)\n        {\n            t = space_rec4;\n            normal = space_rec4Norm;\n            materialType = EMISSION;\n            vec3 worldPos = t * cur_dir + cur_pos;\n            vec4 space = getSpace(worldPos, cur_dir, 0.0028);\n            color = space.rgb;\n            a = space.a;\n        }\n        vec3 space_rec5Norm;\n        float space_rec5 = TraceSphere(cur_pos - vec3(0.08, -0.15, 0.28), cur_dir, 0.3, space_rec5Norm); // magic radius\n        if (space_rec5 < t)\n        {\n            t = space_rec5;\n            normal = space_rec5Norm;\n            materialType = EMISSION;\n            vec3 worldPos = t * cur_dir + cur_pos;\n            vec4 space = getSpace(worldPos, cur_dir, 0.0028);\n            color = space.rgb;\n            a = space.a;\n        }\n        vec3 space_rec6Norm;\n        float space_rec6 = TraceSphere(cur_pos - vec3(-0.08, -0.15, 0.28), cur_dir, 0.3, space_rec6Norm); // magic radius\n        if (space_rec6 < t)\n        {\n            t = space_rec6;\n            normal = space_rec6Norm;\n            materialType = EMISSION;\n            vec3 worldPos = t * cur_dir + cur_pos;\n            vec4 space = getSpace(worldPos, cur_dir, 0.0028);\n            color = space.rgb;\n            a = space.a;\n        }\n        vec3 space_rec7Norm;\n        float space_rec7 = TraceSphere(cur_pos - vec3(-0.08, 0, 0.28), cur_dir, 0.3, space_rec7Norm); // magic radius\n        if (space_rec7 < t)\n        {\n            t = space_rec7;\n            normal = space_rec7Norm;\n            materialType = EMISSION;\n            vec3 worldPos = t * cur_dir + cur_pos;\n            vec4 space = getSpace(worldPos, cur_dir, 0.0028);\n            color = space.rgb;\n            a = space.a;\n        }\n        //////\n        \n        vec3 space_rec2_2Norm;\n        float space_res2_2 = TraceSphere(cur_pos - vec3(0, 0., 0.2), cur_dir, 0.3, space_rec2_2Norm); // magic radius\n        if (space_res2_2 < t)\n        {\n            t = space_res2_2;\n            normal = space_rec2_2Norm;\n            materialType = EMISSION;\n            vec3 worldPos = t * cur_dir + cur_pos;\n            vec4 space = getSpace(worldPos, cur_dir, 0.0007);\n            color = space.rgb;\n            a = space.a;\n        }\n        vec3 space_rec3_3Norm;\n        float space_rec3_3 = TraceSphere(cur_pos - vec3(0, -0.15, 0.2), cur_dir, 0.3, space_rec3_3Norm); // magic radius\n        if (space_rec3_3 < t)\n        {\n            t = space_rec3_3;\n            normal = space_rec3Norm;\n            materialType = EMISSION;\n            vec3 worldPos = t * cur_dir + cur_pos;\n            vec4 space = getSpace(worldPos, cur_dir, 0.0007);\n            color = space.rgb;\n            a = space.a;\n        }\n        vec3 space_rec4_4Norm;\n        float space_rec4_4 = TraceSphere(cur_pos - vec3(0.08, 0, 0.2), cur_dir, 0.3, space_rec4_4Norm); // magic radius\n        if (space_rec4_4 < t)\n        {\n            t = space_rec4_4;\n            normal = space_rec4_4Norm;\n            materialType = EMISSION;\n            vec3 worldPos = t * cur_dir + cur_pos;\n            vec4 space = getSpace(worldPos, cur_dir, 0.0007);\n            color = space.rgb;\n            a = space.a;\n        }\n        vec3 space_rec5_5Norm;\n        float space_rec5_5 = TraceSphere(cur_pos - vec3(0.08, -0.15, 0.2), cur_dir, 0.3, space_rec5_5Norm); // magic radius\n        if (space_rec5_5 < t)\n        {\n            t = space_rec5_5;\n            normal = space_rec5_5Norm;\n            materialType = EMISSION;\n            vec3 worldPos = t * cur_dir + cur_pos;\n            vec4 space = getSpace(worldPos, cur_dir, 0.0007);\n            color = space.rgb;\n            a = space.a;\n        }\n        vec3 space_rec6_6Norm;\n        float space_rec6_6 = TraceSphere(cur_pos - vec3(-0.08, -0.15, 0.2), cur_dir, 0.3, space_rec6_6Norm); // magic radius\n        if (space_rec6_6 < t)\n        {\n            t = space_rec6_6;\n            normal = space_rec6_6Norm;\n            materialType = EMISSION;\n            vec3 worldPos = t * cur_dir + cur_pos;\n            vec4 space = getSpace(worldPos, cur_dir, 0.0007);\n            color = space.rgb;\n            a = space.a;\n        }\n        vec3 space_rec7_7Norm;\n        float space_rec7_7 = TraceSphere(cur_pos - vec3(-0.08, 0, 0.2), cur_dir, 0.3, space_rec7_7Norm); // magic radius\n        if (space_rec7_7 < t)\n        {\n            t = space_rec7_7;\n            normal = space_rec7_7Norm;\n            materialType = EMISSION;\n            vec3 worldPos = t * cur_dir + cur_pos;\n            vec4 space = getSpace(worldPos, cur_dir, 0.0007);\n            color = space.rgb;\n            a = space.a;\n        }\n        \n        //////\n        vec3 space2Norm;\n        float space2 = TraceSphere(cur_pos - vec3(0, 0.01, 0.4), cur_dir, 0.3, space2Norm); // magic radius\n        if (space2 < t)\n        {\n            t = space2;\n            normal = space2Norm;\n            materialType = EMISSION;\n            vec3 worldPos = t * cur_dir + cur_pos;\n            vec4 space = getSpace(worldPos, cur_dir, 0.005);\n            color = space.rgb;\n            a = space.a;\n        }\n        vec3 space3Norm;\n        float space3 = TraceSphere(cur_pos - vec3(0, -0.15, 0.4), cur_dir, 0.3, space3Norm); // magic radius\n        if (space3 < t)\n        {\n            t = space3;\n            normal = space3Norm;\n            materialType = EMISSION;\n            vec3 worldPos = t * cur_dir + cur_pos;\n            vec4 space = getSpace(worldPos, cur_dir, 0.005);\n            color = space.rgb;\n            a = space.a;\n        }\n        vec3 space4Norm;\n        float space4 = TraceSphere(cur_pos - vec3(0.08, 0, 0.4), cur_dir, 0.3, space4Norm); // magic radius\n        if (space4 < t)\n        {\n            t = space4;\n            normal = space4Norm;\n            materialType = EMISSION;\n            vec3 worldPos = t * cur_dir + cur_pos;\n            vec4 space = getSpace(worldPos, cur_dir, 0.005);\n            color = space.rgb;\n            a = space.a;\n        }\n        vec3 space5Norm;\n        float space5 = TraceSphere(cur_pos - vec3(0.08, -0.15, 0.4), cur_dir, 0.3, space5Norm); // magic radius\n        if (space5 < t)\n        {\n            t = space5;\n            normal = space5Norm;\n            materialType = EMISSION;\n            vec3 worldPos = t * cur_dir + cur_pos;\n            vec4 space = getSpace(worldPos, cur_dir, 0.005);\n            color = space.rgb;\n            a = space.a;\n        }\n        vec3 space6Norm;\n        float space6 = TraceSphere(cur_pos - vec3(-0.08, -0.15, 0.4), cur_dir, 0.3, space6Norm); // magic radius\n        if (space6 < t)\n        {\n            t = space6;\n            normal = space6Norm;\n            materialType = EMISSION;\n            vec3 worldPos = t * cur_dir + cur_pos;\n            vec4 space = getSpace(worldPos, cur_dir, 0.005);\n            color = space.rgb;\n            a = space.a;\n        }\n        vec3 space7Norm;\n        float space7 = TraceSphere(cur_pos - vec3(-0.08, 0, 0.4), cur_dir, 0.3, space7Norm); // magic radius\n        if (space7 < t)\n        {\n            t = space7;\n            normal = space7Norm;\n            materialType = EMISSION;\n            vec3 worldPos = t * cur_dir + cur_pos;\n            vec4 space = getSpace(worldPos, cur_dir, 0.005);\n            color = space.rgb;\n            a = space.a;\n        }\n        vec3 sphNorm;\n        float sphT = TraceSphere(cur_pos, cur_dir, 1.0, sphNorm);\n        if (sphT < t)\n        {\n            t = sphT;\n            normal = sphNorm;\n            if (randVals.x * 0.2 < GLASS_R)\n            {\n                materialType = REFLECTION;\n            }\n            else\n            {\n                materialType = REFRACTION;\n                if (dot(cur_dir, normal) > 0.0)\n                {\n                    nEnter = AIR_N;\n                }\n                else\n                {\n                    nEnter = GLASS_N;\n                }\n            }\n        }\n        vec3 cylNorm;\n        float cylT = TraceCylinder(cur_pos, cur_dir, cylNorm);\n        if (cylT < t) {\n            t = cylT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * cur_dir + cur_pos;\n            color = texture(iChannel2, worldPos.xz * worldPos.y).rgb;\n            normal = cylNorm;\n        }\n        if (t != INF)\n        {\n            vec3 worldPos = t * cur_dir + cur_pos;\n            fragColor = texture(iChannel0, worldPos.xz); \n            if (materialType == EMISSION)\n            {\n                fragColor.rgb = (mult + 0.2) * color;\n                fragColor.a = a;\n                break;\n            }\n            else if (materialType == DIFFUSE)\n            {\n                fragColor.rgb = mult * computeLight(worldPos, color, normal);\n                fragColor.a = a;\n                break;\n            }\n            else if (materialType == REFLECTION)\n            {\n                cur_dir = reflect(cur_dir, normal);\n                cur_pos = worldPos + cur_dir * 1e-3;\n            }\n            else if (materialType == REFRACTION)\n            {\n                cur_dir = refraction(cur_dir, normal, n1, nEnter);\n                cur_pos = worldPos + cur_dir * 1e-3;\n                n1 = nEnter;\n            }\n        }\n        else\n        {\n            fragColor = (mult + 0.2) * texture(iChannel1, cur_dir);  // magic mult \n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv) + texture(iChannel1, uv);\n}","name":"Buffer B","description":"","type":"buffer"}]}