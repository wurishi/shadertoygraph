{"ver":"0.1","info":{"id":"4Xj3D3","date":"1708963939","viewed":27,"name":"Lineform Dance Competition","username":"PG_TG","description":"Description","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["tag"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*----------------------------\n  LINEFORM DANCE COMPETITION\n----------------------------*/\n\n#define PI 3.1415926535897932384626433832795\n\n// COLOURS\n#define col1 vec3(30., 1., 75.)/255.\n#define col2 vec3(120., 71., 142.)/255.\n#define col3 vec3(255., 218., 255.)/255.\n\n// SCALE FUNCTION\nmat2 scale(vec2 _scale) {\n    return mat2(_scale.x, 0.0, 0.0, _scale.y);\n}\n\n// ROTATION FUNCTION\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle), -sin(_angle),\n                sin(_angle), cos(_angle));\n}\n\n// LINE DRAWING FUNCTION\nvec4 line(vec2 uv, vec2 A, vec2 B, vec3 col, float thic, float blur) {\n    \n    vec2 g = B - A;\n    vec2 h = uv - A;\n    float d;\n    \n    d = length(h - g * clamp(dot(g, h) / dot(g, g), 0.0, 1.0));\n    if(blur != 0.)\n        if((blur * thic) >= thic)\n            d = smoothstep(blur * thic, thic, d);\n        else\n            d = smoothstep(thic, blur * thic * length(0.05), d);\n    else\n        d = step(thic, d);\n    \n    return vec4(col, d);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Aspect Ratio Fix\n    uv = uv * 2. - 1.;\n    uv.x *= iResolution.x/iResolution.y;\n\n    // UV Scaling\n    uv = scale(vec2(cos(iTime)/10.) - 1.5) * uv;\n    \n    // UV Rotation\n    uv *= rotate2d(sin(iTime * PI/4.)/25.);\n\n    // Background\n    vec4 background = vec4(col1, 1.);\n    background = mix(\n        background,\n        vec4(col2, 1.0),\n        smoothstep(uv.y - 2.5, uv.y + 2.5, 0.0)\n    );\n\n    // Lineform Edges\n    float wiggle = sin(iTime)/5. + 0.75;\n    float width = -cos(iTime)/10.;\n    vec4 foreground;\n    \n    for(int i = 1; i < 16; i++) {\n        float j = float(i);\n        wiggle = sin(iTime + j)/3. + 0.75;\n        width = -cos(iTime + (0.75 * j))/10.;\n        background = mix(background, foreground, foreground.a);\n        foreground = line(\n            uv,\n            vec2((0.125 * j + 0.025) + width + 0.05, wiggle - 0.025),\n            vec2((0.125 * j + 0.025) + width + 0.05, -wiggle + 0.025),\n            col1,\n            0.1 * cos(iTime + (0.75 * j))/4. + 0.033,\n            1.1\n        );\n        background = mix(background, foreground, foreground.a);\n        foreground = line(\n            uv,\n            vec2((0.125 * -j - 0.025) - width - 0.05, wiggle - 0.025),\n            vec2((0.125 * -j - 0.025) - width - 0.05, -wiggle + 0.025),\n            col3,\n            0.1 * cos(iTime + (0.75 * j))/4. + 0.033,\n            1.1\n        );\n    }\n    background = mix(background, foreground, foreground.a);\n    \n    // Lineform Body\n    wiggle = sin(iTime)/5. + 0.75;\n    width = -cos(iTime)/10.;\n\n    for(int i = 1; i < 16; i++) {\n        float j = float(i);\n        wiggle = sin(iTime + j)/3. + 0.75;\n        width = -cos(iTime + (0.75 * j))/10.;\n        background = mix(background, foreground, foreground.a);\n        foreground = line(\n            uv,\n            vec2((0.125 * j) + width + 0.05, wiggle),\n            vec2((0.125 * j) + width + 0.05, -wiggle),\n            col3,\n            0.025 * cos(iTime + (0.75 * j))/2. + 0.025,\n            1.1\n        );\n        background = mix(background, foreground, foreground.a);\n        foreground = line(\n            uv,\n            vec2((0.125 * -j) - width - 0.05, wiggle),\n            vec2((0.125 * -j) - width - 0.05, -wiggle),\n            col1,\n            0.025 * cos(iTime + (0.75 * j))/2. + 0.025,\n            1.1\n        );\n    }\n    \n    // Output to screen\n    fragColor = mix(background, foreground, foreground.a);\n}","name":"Image","description":"","type":"image"}]}