{"ver":"0.1","info":{"id":"mllfzl","date":"1693358510","viewed":45,"name":"Triangle art","username":"luizcipriano","description":" triangle art with shaders","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["arttriangle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdEquilateralTriangle(  in vec2 p, in float r )\n{\n    const float k = sqrt(3.0);\n    p.x = abs(p.x) - r;\n    p.y = p.y + r/k;\n    if( p.x+k*p.y>0.0 ) p=vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n    p.x -= clamp( p.x, -2.0*r, 0.0 );\n    return -length(p)*sign(p.y);\n}\n\nvec3 palette( float t )\n{\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.558, 0.5, 0.5);\n    vec3 c = vec3(1.0, -1.032, 1.0);\n    vec3 d = vec3 (0.00, 0.33, 0.67\t);\n\n    \n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    \n    vec2 p = (2.0*fragCoord.xy-iResolution.xy)/iResolution.y;\n    vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n    vec2 p0 = p;\n    vec3 finalColor = vec3(0.0);\n\n\n    for(float i = 0.0; i < 2.5; i++){\n        p = fract(p * 1.5) -0.5;\n        \n        float d = sdEquilateralTriangle( p, .1 ) * exp(-length(p0));\n        vec3 col = palette( length(p0) + i*.4 + iTime*.4  );\n        d = sin(d*8. + iTime)/8.;\n        d = abs(d);\n        // col *= d;\n        d = pow(0.01 / d, 1.3);\n        finalColor += col * d;\n        fragColor = vec4(finalColor, 1.0);\n    \n    }\n\n   \n    \n}\n","name":"Image","description":"","type":"image"}]}