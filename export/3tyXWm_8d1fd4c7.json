{"ver":"0.1","info":{"id":"3tyXWm","date":"1582811215","viewed":92,"name":"analytic light cookie","username":"hornet","description":"old \"cinematic lighting\" from Gpu Gems described by Pixar https://developer.download.nvidia.com/books/HTML/gpugems/gpugems_ch10.html\nmouse to alter parameters","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["pixar","cookie","gpugems"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://developer.download.nvidia.com/books/HTML/gpugems/gpugems_ch10.html\n//\n// SUPERELLIPSE =====================================================\n\nstruct SuperellipseShapingParams\n{\n  float width, height;\n  float widthEdge, heightEdge;\n  float rounding;\n};\nstruct DistanceShapingParams\n{\n  float near, far;\n  float nearEdge, farEdge;\n};\n    \nfloat computeSuperellipseShaping( \n    vec3 Plight, // Point in light space\n    SuperellipseShapingParams params) // Superellipse shaping params\n{\n\n    // Project the point onto the z == 1 plane\n\n    vec2 Pproj = Plight.xy/Plight.z;\n    // Because we want to evaluate the superellipse\n\n    // in the first quadrant, for simplicity, get the right values\n\n    float a = params.width;\n    float A = params.width + params.widthEdge;\n    float b = params.height;\n    float B = params.height + params.heightEdge;\n\n    vec2 pos = abs( Pproj );\n\n    // Evaluate the superellipse in the first quadrant\n\n    float expo1 = 2.0 / params.rounding;\n    float expo2 = -params.rounding / 2.0;\n    float inner = a * b * pow(pow(b * pos.x, expo1) +\n                              pow(a * pos.y, expo1), expo2);\n    float outer = A * B * pow(pow(B * pos.x, expo1) +\n                              pow(A * pos.y, expo1), expo2);\n    return 1.0 - smoothstep(inner, outer, 1.0);\n}\n// DISTANCE SHAPING =================================================\n\nfloat computeDistanceShaping(\n    vec3 Plight, // Point in light space\n    bool barnShaping, // Barn shaping\n    DistanceShapingParams params) // Distance shaping params\n{\n    float depth;\n    if(barnShaping) {\n        depth = -Plight.z;\n    }\n    else {\n        depth = length(Plight.z);\n    }\n\n\n    return smoothstep (params.near - params.nearEdge, params.near, depth) *\n        (1.0 - smoothstep(params.far, params.far +\n                          params.farEdge, depth));\n}\n\n\n// ===================================\n\nfloat GetWrapFeather( vec2 PosOS, float radius, float aspect, float power )\n{\n    vec2 p_nm = PosOS.xy * vec2(aspect, 1.0) * 0.5;\n\n    // Box bounds\n    float w = 0.0, h = 0.0;\n    if (aspect > 1.0) {\n        w = 1.0 - radius / aspect;\n        h = 1.0 - radius;\n    } else {\n        w = 1.0 - radius;\n        h = 1.0 - radius * aspect;\n    }\n    vec2 b = vec2(w * aspect, h) * 0.5;\n \n    // IQ's 2d box signed distance field: https://iquilezles.org/articles/distfunctions2d \n    vec2 D = abs(p_nm) - b;\n    float sdf = length(max(D, vec2(0.0, 0.0))) + min(max(D.x, D.y), 0.0);\n    \n    // Normalize the SDF and clamp to range [0, 1]\n    sdf = clamp(sdf / (radius * 0.5), 0.0, 1.0);\n    // Invert the SDF\n    sdf = 1.0 - sdf;\n\n    return pow(sdf, power);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 ssuv = fragCoord/iResolution.yy;\n    if ( any(greaterThan(ssuv,vec2(1.0))) ) { fragColor = vec4(0.5); return; }\n\n    vec2 uv = 2.0 * ssuv - 1.0;\n\n    float v;\n    /*\n    {\n        vec2 siz = vec2( 1.0, 1.0 );\n        float aspect = siz.x / siz.y;\n        float r = 0.75;\n        float p = 2.0;\n        v = GetWrapFeather( uv, r, aspect, p );\n    }\n\t/*/\n \n    {\n        SuperellipseShapingParams ssp;\n        ssp.width = (iMouse.z>0.5) ? iMouse.x/iResolution.x : 0.125;\n        ssp.height = (iMouse.z>0.5) ? iMouse.y/iResolution.y : 0.125;\n        const float feather = 7.0;\n        ssp.widthEdge = feather * ssp.width;\n        ssp.heightEdge = feather * ssp.height;\n        ssp.rounding = 0.5;\n\t\tv = computeSuperellipseShaping( vec3(uv,1.0), ssp );\n    }\n    /**/\n    \n    fragColor = vec4( vec3(v), 1.0 );\n}\n","name":"Image","description":"","type":"image"}]}