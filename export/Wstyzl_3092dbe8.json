{"ver":"0.1","info":{"id":"Wstyzl","date":"1601517078","viewed":353,"name":"seven segment display","username":"3SvBop3F","description":"seven segment display","likes":7,"published":3,"flags":0,"usePreview":0,"tags":["seven"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// port of:  https://www.shadertoy.com/view/MdVcRd\n//\n// I expanded this code in an effort to understand how it worked\n// how its drew segments, how it layed out graphic elements, etc\n// this is just the original with the preprocessor macros converted into functions\n// and some extra explorative comments\n\n\n\nvec4 manhattan_distance(float i, float j, int b, vec2 R)\n{\n    // Computes a smooth-edged diamond pixel value (Manhattan distance)\n\treturn vec2(.1, b).xyxy * smoothstep(0., 9. / R.y, .1 - abs(i) - abs(j));\n}\n\nvec4 segment_value(float i, float j, int b, vec2 R)\n{\n    // Computes a segment value (length = 0.5)\n\treturn manhattan_distance(i - clamp(i, 0., .5), j, b & 1, R);\n}\n\nvoid colon_render(float y, ivec4 i, vec2 R, inout float x, inout vec4 O, inout int t)\n{\n// Colon render\n\n    x += .5;\n    O += \n    manhattan_distance(\n        x, \n        y + .3, \n        i.w / 50, \n        R\n   ) \n   + manhattan_distance(\n       x, \n       y - .3, \n       i.w / 50, \n       R\n\t);\n    t /= 60;\n}\n\n\nvec4 s7_horrizontal(float i, float j, int b, float x, float y, vec2 R)\n{\n\t// Computes the horizontal and vertical segments based on a denary digit\n\treturn segment_value(x - i, y - j, b, R);\n}\n\nvec4 s7_vertical(float i, float j, int b, float x, float y, vec2 R)\n{\n\treturn segment_value(y - j, x - i, b, R);\n}\n\nvoid s7_segment(int n, inout vec4 O, inout float x, float y, vec2 R)\n{\n    // investigated with python:\n\t// {i: [bool((j>>i) & 1) for j in [892, 1005, 877, 881, 927, 325, 1019]] for i in range(10)}\n    ++x; \n    O += segment_value(x, y, 892>>n, R)        // (1<<2 | 1<<3 | 1<<5 | 1 << 6 | 1<<8 | 1<<9)\n                                               // 0b1101111100: true for 2,3,4,5,6,8,9\n    + s7_horrizontal(0., .7, 1005>>n, x, y, R) // 0b1111101101: true for 0,2,3,5,6,7,8,9\n    + s7_horrizontal(0., -.7, 877>>n, x, y, R) // 0b1101101101: true for 0,2,3,5,6,8,9\n    + s7_vertical(-.1, .1, 881>>n, x, y, R)    // 0b1101110001: true for 0,4,5,6,8,9\n    + s7_vertical(.6, .1, 927>>n, x, y, R)     // 0b1110011111: true for 0,1,2,3,4,7,8,9\n    + s7_vertical(-.1, -.6, 325>>n, x, y, R)   // 0b0101000101: truw for 0,2,6,8\n    + s7_vertical(.6, -.6, 1019>>n, x, y, R);  // 0b1111111011: truw for 0,1,3,4,5,6,7,8,9\n                                               //    |   |   |\n    \t\t\t\t\t\t\t\t\t\t   //    |   |   \\ zero\n                                               //    |   |  \\ one\n                                               //    |   | \\ two\n                                               //    |   |\\ three\n                                               //    |   \\ four\n                                               //    |  \\ five\n                                               //    | \\ six\n                                               //    |\\ seven\n                                               //    \\ eight\n                                               //   \\ nine\n}\n\n\nvoid two_digit_render(int n, inout vec4 O, inout float x, float y, vec2 R)\n{\n\t// Two-digit render\n    s7_segment(n % 10, O, x, y, R);\n    s7_segment(n / 10, O, x, y, R);\n}\n    \n\nvoid mainImage(out vec4 O, vec2 U)\n{\n    vec2 R = iResolution.xy;\n    U += U - R;\n    U /= R.y / 3.; // Global scaling with aspect ratio correction\n    O-=O; // Zero the pixel\n\n    float x = U.x - U.y * .2 - 2.8, // Slight skew to slant the digits\n          y = --U.y;\n    ivec4 i = ivec4(iDate); // Convert everything to integers\n    int t = i.w;\n    i.w = int(iDate.w * 100.) % 100; // Replace with centiseconds\n    \n    // Seconds (preceded by a colon)\n    two_digit_render(t % 60, O, x, y, R);\n    colon_render(y, i, R, x, O, t);\n    \n    // Minutes (preceded by a colon)\n    two_digit_render(t % 60, O, x, y, R);\n    colon_render(y, i, R, x, O, t);\n    \n    // Hours\n    two_digit_render(t, O, x, y, R);\n\n    // Smaller digits\n    x /= .6;\n    y /= .6;\n    R *= .6;\n\n    // Centiseconds\n    x -= 14.;\n    y += .53;\n    two_digit_render(i.w, O, x, y, R);\n\n    // Day (preceded by a hyphen)\n    x -= .8;\n    y += 3.;\n    two_digit_render(i.z, O, x, y, R);\n    ++x; O += segment_value(x, y, 1, R);\n\n    // Month (preceded by a hyphen)\n    two_digit_render((i.y + 1), O, x, y, R); // Is it a bug in shadertoy that we have to add one?\n    ++x; O += segment_value(x, y, 1, R);\n\n\t// Year\n    two_digit_render(i.x % 100, O, x, y, R);\n    two_digit_render(i.x / 100, O, x, y, R);\n}\n","name":"Image","description":"","type":"image"}]}