{"ver":"0.1","info":{"id":"XdVXDy","date":"1466379736","viewed":314,"name":"Skin Ramp","username":"monkeyscience","description":"The GPU Gems skin shader features a color ramp from measured, empirical scattering data. They model the ramp with Jensen scattering and dipoles, I mapped it to a simple exponential falloff based on absorption spectrum. This gets you very close.\n","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["subdermalscattersimulation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define ABSORPTION_SPECTRUM vec3(0.8, 0.3, 0.05)\n#define MILLIMETER_SCALE 12.0\n\nvec3 computeRamp(float t){\n    t *= MILLIMETER_SCALE;\n    return pow(ABSORPTION_SPECTRUM, vec3(t,t,t));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float aspect = iResolution.y / iResolution.x;\n        \n        \n    //graph\n    if(uv.x > 0.5) {\n        uv.x = uv.x * 2.0 - 1.0;        \n        vec3 ramp = computeRamp(uv.x);\n        \n        vec3 fx = vec3(1.0,1.0,1.0) - abs(uv.yyy - ramp.rgb);\n        fragColor.rgb = pow(fx, vec3(100.0,100.0,100.0));\n    }\n    //linear ramp\n    else if(uv.x < 0.1) {\n        fragColor.rgb = computeRamp(1.0 - uv.y);\n    }\n    //radial ramp\n    else {\n        vec3 r;\n        vec2 center = vec2(0.3, 0.5);\n        r.xy = center - uv;\n        r.y *= aspect;        \n        float t = length(r.xy);\n        t = t * 10.0 - 0.1; //scale the ramp to fit and give the \"sun\" some radius        \n        fragColor.rgb = computeRamp(t);\n    }\n    fragColor.a = 1.0;\n}","name":"Image","description":"","type":"image"}]}