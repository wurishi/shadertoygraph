{"ver":"0.1","info":{"id":"M3jGzy","date":"1708598581","viewed":33,"name":"Tasse","username":"Hauani","description":"tasse","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["tasse"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Modeling - 2023.02.06\n// Eric Galin\n\n// Rotation matrix around z axis\n// a : Angle\nmat3 Rz(float a)\n{\n  float sa=sin(a);float ca=cos(a);\n  return mat3(ca,sa,0.,-sa,ca,0.,0.,0.,1.);\n}\n\n// Compute the ray\n//      m : Mouse position\n//      p : Pixel\n// ro, rd : Ray origin and direction\nvoid Ray(vec2 m,vec2 p,out vec3 ro,out vec3 rd)\n{\n  float a=3.*3.14*m.x;\n  float le=3.5;\n  \n  // Origin\n  ro=vec3(100.,0.,20.);\n  ro*=Rz(a);\n  \n  // Target point\n  vec3 ta=vec3(0.,0.,1.);\n  \n  // Orthonormal frame\n  vec3 w=normalize(ta-ro);\n  vec3 u=normalize(cross(w,vec3(0.,0.,1.)));\n  vec3 v=normalize(cross(u,w));\n  rd=normalize(p.x*u+p.y*v+le*w);\n}\n\n// Primitives\n\n// Sphere\n// p : point\n// c : center of skeleton\n// r : radius\nfloat Sphere(vec3 p,vec3 c,float r)\n{\n  return length(p-c)-r;\n}\n\n//Plan\n// p : point\n// c: center\n// d : distance\nfloat Plan(vec3 p, vec3 c, vec3 d)\n{\n    return dot(p-c,d);\n}\n\n// Operators\n\n// Union\n// a,b : field function of left and right sub-trees\nfloat Union(float a,float b)\n{\n  return min(a,b);\n}\n\nfloat inter(float a, float b)\n{\n    return max(a,b);\n}\n\nfloat dif(float a, float b)\n{\n    return max(a,-b);\n}\n\n// Cercle\n// p : point\n// c : centre\n// n : normal\n// r : rayon\nfloat Cercle(vec3 p, vec3 c, vec3 n, float r)\n{\n    float h = dot((p-c),n);\n    float m = sqrt(dot(p-c,p-c)-dot(h,h));\n    float l = m-r;\n    float d = sqrt(dot(h,h)+dot(l,l));\n    return d;\n    \n}\n\n// Tore\nfloat Tore(vec3 p, vec3 c, vec3 n, float R, float r)\n{\n    return Cercle(p, c, n, R)-r;\n}\n\n// Capsule\n// p : point\n// a : point\n// b : point\nfloat Capsule(vec3 p, vec3 a, vec3 b){\n    float d;\n    vec3 u = (b-a)/length(b-a);\n        if (dot(p-a,u) < 0.){\n            d=length(p-a);\n            return d;\n            }\n        else if (dot((p-b),u) > 0.){\n            d=length(p-b);\n            return d;\n        }\n        else{\n        float l =dot((p-a),u);\n        d=sqrt(dot(length(p-a),length(p-a))-dot(l,l));\n        }\n        return d;\n}\n\n// Translation\nvec3 Translation (vec3 p, vec3 dist){\n    return p-dist;\n}\n\n// Potential field of the object\n// p : point\nfloat object(vec3 p)\n{\n   // Le bol\n   float grande_cap = Capsule(p, vec3(0., 5., 15.), vec3(0., 5., 0.))-15.;\n   float petite_cap = Capsule(p, vec3(0., 5., 15.), vec3(0., 5., 0.))-12.; \n   float plan=Plan(p,vec3(0.,6.,10.),vec3(0,0,1));\n   float bol = inter(grande_cap, dif(plan, petite_cap));\n   \n   // La anse de la tasse\n   float droite = Tore(p, vec3(0.,20.,0.5), vec3(1.,0.,0.), 8., 1.);\n   float anse = dif(droite, grande_cap);\n   \n   // Tasse\n   float tasse = Union(bol, anse);\n   \n   \n   float capsule = Capsule(p, vec3(0., 6., 10.), vec3(0., 6., 5.))-30.;\n   float b=Plan(p,vec3(0.,6.,-13.),vec3(0,0,1));\n   float c=Plan(p,vec3(0.,6.,-14.),vec3(0,0,1));\n   float sous_tasse = inter(dif(capsule,c),b);\n   \n   float tasse_sous_tasse =  Union(sous_tasse, tasse);\n\n  \n   return tasse_sous_tasse;\n}\n\n\n// Analysis of the scalar field\n\nconst int Steps=200;// Number of steps\nconst float Epsilon=.01;// Marching epsilon\n\n// Object normal\n// p : point\nvec3 ObjectNormal(vec3 p)\n{\n  const float eps=.001;\n  vec3 n;\n  float v=object(p);\n  n.x=object(vec3(p.x+eps,p.y,p.z))-v;\n  n.y=object(vec3(p.x,p.y+eps,p.z))-v;\n  n.z=object(vec3(p.x,p.y,p.z+eps))-v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\n// o : ray origin\n// u : ray direction\n// e : Maximum distance\n// h : hit\n// s : Number of steps\nfloat SphereTrace(vec3 o,vec3 u,float e,out bool h,out int s)\n{\n  h=false;\n  \n  // Start at the origin\n  float t=0.;\n  \n  for(int i=0;i<Steps;i++)\n  {\n    s=i;\n    vec3 p=o+t*u;\n    float v=object(p);\n    // Hit object\n    if(v<0.)\n    {\n      h=true;\n      break;\n    }\n    // Move along ray\n    t+=max(Epsilon,v);\n    // Escape marched too far away\n    if(t>e)\n    {\n      break;\n    }\n  }\n  return t;\n}\n\n// Lighting\n\n// Background color\n// d : Ray direction\nvec3 background(vec3 d)\n{\n  return mix(vec3(.45,.55,.99),vec3(.65,.69,.99),d.z*.5+.5);\n}\n\n// Shadowing\n// p : Point\n// n : Normal\n// l : Light direction\nfloat Shadow(vec3 p,vec3 n,vec3 l)\n{\n  bool h;\n  int s;\n  float t=SphereTrace(p+Epsilon*n,l,100.,h,s);\n  if(!h)\n  {\n    return 1.;\n  }\n  return 0.;\n}\n\n// Shading and lighting\n// p : Point\n// n : Normal at point\n// e : Eye direction\nvec3 Shade(vec3 p,vec3 n,vec3 e)\n{\n  // Point light\n  const vec3 lp=vec3(5.,10.,25.);\n  \n  // Light direction to point light\n  vec3 l=normalize(lp-p);\n  \n  // Ambient color\n  vec3 ambient=.25+.25*background(n);\n  \n  // Shadow computation\n  float shadow=Shadow(p,n,l);\n  \n  // Phong diffuse\n  vec3 diffuse=.35*clamp(dot(n,l),0.,1.)*vec3(1.,1.,1.);\n  \n  // Specular\n  vec3 r=reflect(e,n);\n  vec3 specular=.15*pow(clamp(dot(r,l),0.,1.),35.)*vec3(1.,1.,1.);\n  vec3 c=ambient+shadow*(diffuse+specular);\n  return c;\n}\n\n// Shading according to the number of steps in sphere tracing\n// n : Number of steps\nvec3 ShadeSteps(int n)\n{\n  float t=float(n)/(float(Steps-1));\n  return.5+mix(vec3(.05,.05,.5),vec3(.65,.39,.65),t);\n}\n\n// Picture in picture\n// pixel : Pixel\n// pip : Boolean, true if pixel was in sub-picture zone\nvec2 Pip(in vec2 pixel,out bool pip)\n{\n  // Pixel coordinates\n  vec2 p=(-iResolution.xy+2.*pixel)/iResolution.y;\n  if(pip==true)\n  {\n    const float fraction=1./4.;\n    // Recompute pixel coordinates in sub-picture\n    if((pixel.x<iResolution.x*fraction)&&(pixel.y<iResolution.y*fraction))\n    {\n      p=(-iResolution.xy*fraction+2.*pixel)/(iResolution.y*fraction);\n      pip=true;\n    }\n    else\n    {\n      pip=false;\n    }\n  }\n  return p;\n}\n\n// Image\nvoid mainImage(out vec4 color,in vec2 pxy)\n{\n  // Picture in picture on\n  bool pip=true;\n  \n  // Pixel\n  vec2 pixel=Pip(pxy,pip);\n  \n  // Mouse\n  vec2 m=iMouse.xy/iResolution.xy;\n  \n  // Camera\n  vec3 ro,rd;\n  Ray(m,pixel,ro,rd);\n  \n  // Trace ray\n  \n  // Hit and number of steps\n  bool hit;\n  int s;\n  \n  float t=SphereTrace(ro,rd,200.,hit,s);\n  \n  // Shade background\n  vec3 rgb=background(rd);\n  \n  if(hit)\n  {\n    // Position\n    vec3 p=ro+t*rd;\n    \n    // Compute normal\n    vec3 n=ObjectNormal(p);\n    \n    // Shade object with light\n    rgb=Shade(p,n,rd);\n  }\n  \n  // Uncomment this line to shade image with false colors representing the number of steps\n  if(pip==true)\n  {\n    rgb=ShadeSteps(s);\n  }\n  \n  color=vec4(rgb,1.);\n}\n\n","name":"Image","description":"","type":"image"}]}