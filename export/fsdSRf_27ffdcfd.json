{"ver":"0.1","info":{"id":"fsdSRf","date":"1633634045","viewed":172,"name":"IGN + Vogel + Chaos Bokeh","username":"theRealBeef","description":"A version of https://www.shadertoy.com/view/fdtXRX focused more on a 'bokeh' style that brings out highlights.\n\nNot very satisfied with how it looks compared to just blurring, but its alright.\n\nIncrease number of samples helps somewhat","likes":6,"published":1,"flags":32,"usePreview":0,"tags":["blur","bokeh","disc","vogel","ign"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Generally based on https://www.shadertoy.com/view/3lBBWz for vogel framework\n\n#define IterSize 8\n#define GoldenAngle 2.399996 // rad\n\nmat2 rot(float a)\n{\n    float c = cos(a);\n    float s = sin(a);\n    return mat2(c, s, -s, c);\n}\n\nfloat IGN_calc(vec2 uv)\n{\n    uv = fract(uv);\n    float f = 0.06711056 * uv.x + 0.00583715 * uv.y;\n    return 6.28*(fract(52.9829189 * fract(f*iResolution.x)*iResolution.x));\n}\n\nvec3 bokeh(in sampler2D tex, in vec2 uv, in vec2 pixelsize, in float radius)\n{\n    vec3 total = vec3(0.);\n    vec3 divsor = vec3(0.);\n    float r = 2.;\n    mat2 G = rot(GoldenAngle);\n    vec2 offset = vec2(radius, radius);\n    for (int i = 0; i < IterSize; ++i) {\n        r += 1./r;\n        offset = G * offset;\n        vec3 col = texture(tex, uv + offset * (r - 1.) * pixelsize).rgb;\n        //vec3 bokeh = col * vec3(pow(length(offset)+0.1,2.0));\n        vec3 bokeh = min(pow(col,vec3(10)),1.0);\n        total += col * bokeh;\n        divsor += bokeh;\n    }\n    return max(total / divsor,0.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float scale = 4.;\n\tfloat ctrl_r = iMouse.x / iResolution.x * scale;\n \t//ctrl_r += fract(iTime * .1) * scale;\n    ctrl_r = mod(ctrl_r, scale);\n    ctrl_r = ctrl_r * IGN_calc(uv/8.0*iResolution.x/iResolution.y);\n    vec3 col = bokeh(iChannel0, uv, 1./iResolution.xy, ctrl_r);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Generally based on https://www.shadertoy.com/view/3lBBWz for vogel framework\n\n#define IterSize 8\n#define GoldenAngle 2.399996 // rad\n\nmat2 rot(float a)\n{\n    float c = cos(a);\n    float s = sin(a);\n    return mat2(c, s, -s, c);\n}\n\nfloat IGN_calc(vec2 uv)\n{\n    uv = fract(uv);\n    float f = 0.06711056 * uv.x + 0.00583715 * uv.y;\n    return 6.28*(fract(52.9829189 * fract(f*iResolution.x)*iResolution.x));\n}\n\nvec3 bokeh(in sampler2D tex, in vec2 uv, in vec2 pixelsize, in float radius)\n{\n    vec3 total = vec3(0.);\n    vec3 divsor = vec3(0.);\n    float r = 2.;\n    mat2 G = rot(GoldenAngle);\n    vec2 offset = vec2(radius, radius);\n    for (int i = 0; i < IterSize; ++i) {\n        r += 1./r;\n        offset = G * offset;\n        vec3 col = texture(tex, uv + offset * (r - 1.) * pixelsize).rgb;\n        //vec3 bokeh = col * vec3(pow(length(offset)+0.1,2.0));\n        vec3 bokeh = min(pow(col,vec3(10)),1.0);\n        total += col * bokeh;\n        divsor += bokeh;\n    }\n    return max(total / divsor,0.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float scale = 4.;\n\tfloat ctrl_r = iMouse.x / iResolution.x * scale;\n \t//ctrl_r += fract(iTime * .1) * scale;\n    ctrl_r = mod(ctrl_r, scale);\n    ctrl_r = ctrl_r * IGN_calc(uv/4.0*iResolution.x/iResolution.y);\n    vec3 col = bokeh(iChannel0, uv, 1./iResolution.xy, ctrl_r);\n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}