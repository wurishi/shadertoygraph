{"ver":"0.1","info":{"id":"WtKXDK","date":"1583617582","viewed":110,"name":"Modular Multiplication","username":"ElVago","description":"Inspired by MicMaths: https://youtu.be/-X49VQgi86E","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["multiplication"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n#define MULTIPLIER 100.\n#define MODULE 150. //Number of Vectors\n\nvec4 get_color(vec2 uv, float mul, vec4 color) {\n    float step_angle =2. * PI / float(MODULE);\n    float start_angle = PI / 2.0;\n    float end_angle = PI / 2.0;\n\n    for (float i = 0.; i < MODULE; i++) {\n        vec2 line_start = vec2(sin(start_angle), cos(start_angle));\n        if (distance(line_start, uv) < .01)//Point thickness.\n            return vec4(1., 0.0, .0, 1.); //Point color.\n\n        vec2 line_end = vec2(sin(end_angle), cos(end_angle));\n        vec2 line_dir = line_end - line_start;\n        float distance_to_line = abs(line_dir.y * uv.x -line_dir.x * uv.y + line_start.x * line_end.y - line_start.y * line_end.x) / length(line_dir);\n        if (distance_to_line < 2. / iResolution.y &&\n                dot(uv - line_start, line_dir) > 0. && \n           \t\tdot(uv - line_end, line_dir) < 0.) \n            return color;\n        \n        start_angle += step_angle;\n        end_angle += mul * step_angle;\n    }\n\n    return vec4(0.);//Background color.\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord + fragCoord - iResolution.xy) / (iResolution.y-20.0);//Ball size.\n\n    float mul = 1.0 + MULTIPLIER * (1. - cos(.01 * iTime));//Speed.\n    vec4 color = vec4(1.0, 0.0, 0.0, 1.0);//Color of vectors.\n\n    fragColor = get_color(uv, mul, color);\n}","name":"Image","description":"","type":"image"}]}