{"ver":"0.1","info":{"id":"3lf3DB","date":"1557433152","viewed":106,"name":"Spinning dotCube","username":"AlexNilsson","description":"hello world, cube, following tutorial by: The Art of Code\nhttps://www.youtube.com/watch?v=PBxuVlp7nuM\n","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["cube","dots","spinning"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float distLine(vec3 ro, vec3 rd, vec3 p) {\n\treturn length(cross(p-ro, rd))/length(rd);\n}\n\nfloat drawPoint(vec3 ro, vec3 rd, vec3 p) {\n\tfloat d = distLine(ro, rd, p);\n    return smoothstep(.06, .05, d);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t = iTime;\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= .5;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    vec3 ro = vec3(3.*sin(t) + 0.5, 3.*sin(t*0.5) + 0.5, -3.*cos(t)+0.5);\n    \n    vec3 lookat = vec3(.5);\n    \n    vec3 f = normalize(lookat-ro);\n    vec3 r = cross(vec3(0., 1.0, 0.), f);\n    vec3 u = cross(f, r);\n    \n    float zoom = 1.;\n    vec3 c = ro + f*zoom;\n    vec3 i = c + uv.x*r + uv.y*u;\n    vec3 rd = i-ro;\n    \n    float d = 0.;\n    \n    d += drawPoint(ro, rd, vec3(0., 0., 0.));\n    d += drawPoint(ro, rd, vec3(0., 0., 1.));\n    d += drawPoint(ro, rd, vec3(0., 1., 0.));\n    d += drawPoint(ro, rd, vec3(0., 1., 1.));\n    d += drawPoint(ro, rd, vec3(1., 0., 0.));\n    d += drawPoint(ro, rd, vec3(1., 0., 1.));\n    d += drawPoint(ro, rd, vec3(1., 1., 0.));\n    d += drawPoint(ro, rd, vec3(1., 1., 1.));\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = vec4(d, d, d, 1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}