{"ver":"0.1","info":{"id":"Mt3GzB","date":"1469932645","viewed":260,"name":"Radar malfunction","username":"LukeRissacher","description":"Evolving colorful spiral thing","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["procedural","2d","plane"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 HueToRgb(float h) {\n    vec3 rgb = 2.0 - abs(6.0 * h - vec3(3, 2, 4));\n    rgb.r = 1.0 - rgb.r;\n    return clamp(rgb, 0.0, 1.0);\n}\n\nvec3 HsvToRgb(vec3 hsv) {\n    vec3 rgb = HueToRgb(hsv.x);\n    return ((rgb - 1.0) * hsv.y + 1.0) * hsv.z;\n}\n\nvec2 Rotate(vec2 vec, float angle) {\n    return vec2(\n        vec.x * cos(angle) - vec.y * sin(angle), \n        vec.x * sin(angle) + vec.y * cos(angle) \n    );\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    \n    // Normalize to [-1..1], aspect correct, slowly rotate\n    float t = iTime + 7.0;\n    vec2 uv = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n    uv = Rotate(uv, 0.1477 * t);\n\n    // Get pixel distance and angle, modulate with time\n    float dist = length(uv);\n    dist += 0.5 * sin(0.5 * t) + 0.5;\n    float angle = -atan(uv.y, uv.x);\n\n    // Evolve colors over time\n    float baseHue = fract(0.036 * t + 0.2 * dist);\n    float hueOffset = fract(0.03 * t);\n    float value = clamp(dist, 0.0, 1.0); // darken noisy center\n    vec3 color1 = HsvToRgb(vec3(baseHue, 1.0, value)); \n    vec3 color2 = HsvToRgb(vec3(fract(baseHue + hueOffset), 1.0, value));\n\n    // Do inverse-polar warping thing\n    dist *= mix(10.5, 0.5, 0.5 * sin(0.0773 * t) + 0.5);\n    uv = vec2(cos(angle), sin(angle)) / dist + 0.1 * t;\n\n    // Use the warped coordinates to sample a colored grid\n    vec2 gridSize = vec2(0.038, 0.067);\n    uv = fract(uv / gridSize);\n    float gridValue = (uv.x + uv.y) / 2.0;\n    vec3 gridColor = mix(color1, color2, gridValue);\n    fragColor = vec4(gridColor, 1.0);\n} ","name":"Image","description":"","type":"image"}]}