{"ver":"0.1","info":{"id":"7lfBRj","date":"1651180263","viewed":206,"name":"Ray-marched lava lamp shader","username":"Alluysl","description":"A lava lamp shader done by ray marching through a gradient noise.\n\nAdmittedly, it would look much more like a lava lamp with metaballs defining the wax volume instead of a gradient noise.\n\nNoise utility provided by the man who draws with math(TM).","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","volumetric","lavalamp"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2017 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// https://www.youtube.com/c/InigoQuilez\n// https://iquilezles.org/\n\n// Computes the analytic derivatives of a 3D Gradient Noise. This can be used for example to compute normals to a\n// 3d rocks based on Gradient Noise without approximating the gradient by having to take central differences. More\n// info here: https://iquilezles.org/articles/gradientnoise\n\n\nvec3 hash( vec3 p ) // replace this by something better. really. do\n{\n\tp = vec3( dot(p,vec3(127.1,311.7, 74.7)),\n\t\t\t  dot(p,vec3(269.5,183.3,246.1)),\n\t\t\t  dot(p,vec3(113.5,271.9,124.6)));\n\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\n// return value noise (in x) and its derivatives (in yzw)\nvec4 noised( in vec3 x )\n{\n    // grid\n    vec3 i = floor(x);\n    vec3 w = fract(x);\n    \n    #if 1\n    // quintic interpolant\n    vec3 u = w*w*w*(w*(w*6.0-15.0)+10.0);\n    vec3 du = 30.0*w*w*(w*(w-2.0)+1.0);\n    #else\n    // cubic interpolant\n    vec3 u = w*w*(3.0-2.0*w);\n    vec3 du = 6.0*w*(1.0-w);\n    #endif    \n    \n    // gradients\n    vec3 ga = hash( i+vec3(0.0,0.0,0.0) );\n    vec3 gb = hash( i+vec3(1.0,0.0,0.0) );\n    vec3 gc = hash( i+vec3(0.0,1.0,0.0) );\n    vec3 gd = hash( i+vec3(1.0,1.0,0.0) );\n    vec3 ge = hash( i+vec3(0.0,0.0,1.0) );\n\tvec3 gf = hash( i+vec3(1.0,0.0,1.0) );\n    vec3 gg = hash( i+vec3(0.0,1.0,1.0) );\n    vec3 gh = hash( i+vec3(1.0,1.0,1.0) );\n    \n    // projections\n    float va = dot( ga, w-vec3(0.0,0.0,0.0) );\n    float vb = dot( gb, w-vec3(1.0,0.0,0.0) );\n    float vc = dot( gc, w-vec3(0.0,1.0,0.0) );\n    float vd = dot( gd, w-vec3(1.0,1.0,0.0) );\n    float ve = dot( ge, w-vec3(0.0,0.0,1.0) );\n    float vf = dot( gf, w-vec3(1.0,0.0,1.0) );\n    float vg = dot( gg, w-vec3(0.0,1.0,1.0) );\n    float vh = dot( gh, w-vec3(1.0,1.0,1.0) );\n\t\n    // interpolations\n    return vec4( va + u.x*(vb-va) + u.y*(vc-va) + u.z*(ve-va) + u.x*u.y*(va-vb-vc+vd) + u.y*u.z*(va-vc-ve+vg) + u.z*u.x*(va-vb-ve+vf) + (-va+vb+vc-vd+ve-vf-vg+vh)*u.x*u.y*u.z,    // value\n                 ga + u.x*(gb-ga) + u.y*(gc-ga) + u.z*(ge-ga) + u.x*u.y*(ga-gb-gc+gd) + u.y*u.z*(ga-gc-ge+gg) + u.z*u.x*(ga-gb-ge+gf) + (-ga+gb+gc-gd+ge-gf-gg+gh)*u.x*u.y*u.z +   // derivatives\n                 du * (vec3(vb,vc,ve) - va + u.yzx*vec3(va-vb-vc+vd,va-vc-ve+vg,va-vb-ve+vf) + u.zxy*vec3(va-vb-ve+vf,va-vb-vc+vd,va-vc-ve+vg) + u.yzx*u.zxy*(-va+vb+vc-vd+ve-vf-vg+vh) ));\n}\n\n//===============================================================================================\n//===============================================================================================\n//===============================================================================================\n//===============================================================================================\n//===============================================================================================\n\n#define BACKGROUND_COLOR vec3(0.5f, 0.5f, 1.0f)\n\n#define NOISE_SCALE 4.0f\n#define FLOW_TIME_SCALE 0.0625f\n#define ROTATION_TIME_SCALE 0.0981747705f\n\n#define CAMERA_OFFSET -2.0f\n#define SPHERE_RADIUS 0.375f\n\n#define DENSITY_MULTIPLYER 16.0f\n#define MARCH_ITERATIONS 32\n\n#define DECREASE_DENSITY_NEAR_EDGES 1\n#define EDGE_DENSITY_DECREASE_OUTER (2.0f * SPHERE_RADIUS)\n#define EDGE_DENSITY_DECREASE_INNER 0.0f\n\n#define SPECULAR_HIGHLIGHT 1\n#define POINT_LIGHT_POSITION vec3(1.0f, 0.5f, 0.0f)\n#define SPECULAR_DEGREE 6\n\n\n// Samples the color from a gradient\nvec3 colorGradient(float x){\n    return vec3(smoothstep(0.25f, 0.4f, x), smoothstep(0.4f, 0.6f, x), smoothstep(0.65f, 0.875f, x));\n}\n\n\n// Samples the color and density at the given coordinates\nvec4 sampleAt(vec3 coords){\n\n    // Rotate sphere\n    float angle = iTime * ROTATION_TIME_SCALE;\n    float c = cos(angle);\n    float s = sin(angle);\n    coords = mat3(c, 0.0f, -s, 0.0f, 1.0f, 0.0f, s, 0.0f, c) * coords;\n\n    float t = noised(coords * NOISE_SCALE + vec3(0.0f, -iTime * FLOW_TIME_SCALE, 0.0f)).x + 0.5f;\n\n    float sqrDist = dot(coords, coords);\n\n    float density = sqrDist <= SPHERE_RADIUS * SPHERE_RADIUS ? smoothstep(0.0f, 1.0f, t) : 0.0f;\n\n#if DECREASE_DENSITY_NEAR_EDGES != 0\n    density *= 1.0f - smoothstep(EDGE_DENSITY_DECREASE_INNER, EDGE_DENSITY_DECREASE_OUTER, sqrt(sqrDist));\n#endif\n\n    return vec4(colorGradient(t), density);\n}\n\n\n// Marches through the volume once\nvec3 march(vec3 stacked, vec3 coords){\n\n    vec4 sampled = sampleAt(coords);\n    return mix(stacked, sampled.xyz, sampled.w * DENSITY_MULTIPLYER / float(MARCH_ITERATIONS));\n}\n\n\n// Gets the full-alpha color of the sphere by ray-marching\n// between the end and start positions\nvec3 getSphereColor(vec3 start, vec3 end, vec3 backgroundColor){\n    \n    vec3 color = backgroundColor;\n    float td = 1.0f / float(MARCH_ITERATIONS);\n    float t = td / 2.0f;\n\n    for (int i = 0; i < MARCH_ITERATIONS; ++i, t += td)\n        color = march(color, mix(end, start, t));\n\n    return color;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float resolution = min(iResolution.x, iResolution.y);\n    \n    // The location of the pixel on the XY plane\n    vec2 viewPlaneLocation = (fragCoord - iResolution.xy* 0.5f) / resolution;\n\n    vec3 cameraPosition = vec3(0.0f, 0.0f, CAMERA_OFFSET);\n\n    // The direction of the pixel from the camera\n    vec3 dir = normalize(vec3(viewPlaneLocation, 0.0f) - cameraPosition);\n    \n    // The vector from the camera to the closest point on the ray from the origin\n    vec3 toClosest = dir * dot(dir, -cameraPosition);\n\n    // The distance from the camera to the closest point on the ray from the origin\n    float tcd = length(toClosest);\n    \n    // The vector from the origin to the closest point on the ray\n    vec3 closest = cameraPosition + toClosest;\n    \n    // The square distance from the origin to the closest point on the ray\n    float csd = dot(closest, closest);\n        \n    // The distance travelled by the ray inside of the sphere to the point\n    // closest to the origin, which is half the distance it travels there total\n    float ttcd = sqrt(abs(SPHERE_RADIUS * SPHERE_RADIUS - csd));\n\n    // The start and end of the ray through the sphere\n    vec3 start = cameraPosition + dir * (tcd - ttcd);\n    vec3 end   = cameraPosition + dir * (tcd + ttcd);\n\n    vec3 backgroundColor = BACKGROUND_COLOR;\n    vec3 color = csd <= SPHERE_RADIUS * SPHERE_RADIUS ? getSphereColor(start, end, backgroundColor) : backgroundColor;\n\n    // Previous version, marching with a fixed stride\n    // vec3 color = backgroundColor;\n    // for (float depth = 3.0f; depth > 1.0f; depth -= 0.0625)\n    //     color = march(color, cameraPosition + depth * dir);\n\n    // Take account of sphere depth\n    color = mix(backgroundColor, color, ttcd / SPHERE_RADIUS);\n\n#if SPECULAR_HIGHLIGHT\n    float plAngle = -iTime * ROTATION_TIME_SCALE;\n    float plc = cos(plAngle);\n    float pls = sin(plAngle);\n\n    vec3 pointLightPosition = mat3(plc, 0.0f, -pls, 0.0f, 1.0f, 0.0f, pls, 0.0f, plc) * POINT_LIGHT_POSITION;\n    vec3 pointLightDirection = -normalize(pointLightPosition - start);\n    vec3 normal = normalize(start);\n    float nDotPLD = dot(normal, pointLightDirection);\n    vec3 reflection = nDotPLD * 2.0f * normal - pointLightDirection;\n\n    float specularAmount = nDotPLD <= 0.0f ? dot(dir, reflection) : 0.0f;\n    for (int i = 0; i < SPECULAR_DEGREE - 1; ++i)\n        specularAmount *= specularAmount;\n    color = csd <= SPHERE_RADIUS * SPHERE_RADIUS ? mix(color, vec3(1.0f, 1.0f, 1.0f), specularAmount) : color;\n#endif\n\n    // Output to screen\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}