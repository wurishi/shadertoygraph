{"ver":"0.1","info":{"id":"mlGfRh","date":"1701818162","viewed":48,"name":"Lightweight Full Moon","username":"jaeba","description":"Parameterized moon with glow and moving clouds.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["simple","clouds","moon","night","parameterized"],"hasliked":0,"parentid":"MlfXWH","parentname":"Nightfall"},"renderpass":[{"inputs":[],"outputs":[],"code":"// By @jaeba.fx\n// Parameterized moon with glow and moving clouds.\n// Stripped down version of Nightfall by Vinicius Graciano Santos - vgs/2015\n// https://www.shadertoy.com/view/MlfXWH\n// without landscape.\n// Uses perlin noise instead of noise texture sampling.\n\nvec2 random(vec2 uv){\n    uv = vec2( dot(uv, vec2(127.1,311.7) ),\n               dot(uv, vec2(269.5,183.3) ) );\n    return -1.0 + 2.0 * fract(sin(uv) * 43758.5453123);\n}\n\nfloat perlin(vec2 uv) {\n    vec2 uv_index = floor(uv);\n    vec2 uv_fract = fract(uv);\n\n    vec2 blur = smoothstep(0.0, 1.0, uv_fract);\n    \n    float pinch = 1.0 + 0.0 * iTime;\n\n    return mix( mix( dot( random(uv_index + pinch * vec2(0.0,0.0) ), uv_fract - pinch * vec2(0.0,0.0) ),\n                     dot( random(uv_index + pinch * vec2(1.0,0.0) ), uv_fract - pinch * vec2(1.0,0.0) ), blur.x),\n                mix( dot( random(uv_index + pinch * vec2(0.0,1.0) ), uv_fract - pinch * vec2(0.0,1.0) ),\n                     dot( random(uv_index + pinch * vec2(1.0,1.0) ), uv_fract - pinch * vec2(1.0,1.0) ), blur.x), blur.y) + 0.5;\n}\n\nmat2 m = mat2(0.8,-0.6,0.6,0.8);\nfloat fbmSimple(vec2 p) {\n    float f = 0.0;\n    f += 0.5*perlin(p); p = 2.0*m*p;\n    f += 0.25*perlin(p); p = 2.0*m*p;\n    f += 0.125*perlin(p); p = 2.0*m*p;\n    f += 0.0625*perlin(p);\n    f *= 0.8 * f;\n    return f;\n}\n\nvec3 skyCol = 2.5*pow(vec3(40., 56., 84.)/255., vec3(2.2));\nvec3 moonCol = pow(vec3(128., 155., 224.)/255., vec3(2.2));\n\nfloat clouds(vec2 pos, float speed, float time) {\n    float value = 0.0;\n    for (int i = 0; i < 2; ++i) {\n        //value += fbmSimple(2.0*pos/(0.5 * pos.y+0.8)-speed*time);\n        value += fbmSimple(1.5*pos-speed*time);\n        speed *= 1.35;\n    }\n    return value;\n}\n\nvec3 moon(vec2 pos, vec3 dir, vec2 moonPos, float moonRadius, float glowRadius) {\n    float toMoon = distance(pos, moonPos);\n    vec3 glow = smoothstep(glowRadius, 0.0, toMoon) * moonCol;\n    float moonHit = smoothstep(moonRadius + 0.02, moonRadius, toMoon);\n    vec3 col = 3.0 * moonCol * (0.3 + 0.6*fbmSimple(8.5*pos)) * moonHit;\n    col += glow;\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = (-iResolution.xy + 2.0*fragCoord.xy) / iResolution.y;\n    vec3 rd = normalize(vec3(uv, -1.0));\n    \n    vec3 col = skyCol;\n    col += 0.15*clouds(uv, 0.25, iTime);\n    col += moon(uv, rd, vec2(0, 0), 0.35, 1.2);\n\tfragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"}]}