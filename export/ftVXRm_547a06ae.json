{"ver":"0.1","info":{"id":"ftVXRm","date":"1640388475","viewed":362,"name":"Simple Radial Spectrum Analyzer","username":"qtiki","description":"Radial version of the simple spectrum analyzer implementation.","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["audio","spectrumanalyzer"],"hasliked":0,"parentid":"NlKSRw","parentname":"Simple Spectrum Analyzer"},"renderpass":[{"inputs":[{"id":"XsXGzn","filepath":"/media/a/29de534ed5e4a6a224d2dfffab240f2e19a9d95f5e39de8898e850efdb2a99de.mp3","previewfilepath":"/media/ap/29de534ed5e4a6a224d2dfffab240f2e19a9d95f5e39de8898e850efdb2a99de.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec3 BAR_COLOR = vec3(0.8, 0.2, 0.3);\nconst float BAR_COUNT = 20.0;\nconst float BAR_WIDTH = 0.6;\n\nconst float BAR_START = 0.15;\nconst float BAR_END = 0.5;\n\n// first row is frequency data (48Khz/4 in 512 texels, meaning 23 Hz per texel)\nconst float FREQ_COUNT = 512.0;\n\nconst float PI = 3.14159265359;\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    float aspect = iResolution.x / iResolution.y;\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    uv -= 0.5;\n    uv.x *= aspect;\n\n    float side = sign(uv.x);\n    float angle = -(atan(uv.y, uv.x * side) + PI/2.0) * side + PI;\n    float angleNormalized = angle / (2.0*PI);\n    \n    float dist = length(uv);\n\n    float barIndex = floor(angleNormalized * BAR_COUNT);\n    float barHeight = texelFetch(iChannel0, ivec2(barIndex * FREQ_COUNT / BAR_COUNT, 0), 0).r;\n    float barEndDist = BAR_START + barHeight * (BAR_END - BAR_START);\n    \n    float horizontal = smoothstep(1.0 - BAR_WIDTH, 1.0 - BAR_WIDTH, abs(sin(angleNormalized * PI * BAR_COUNT)));\n    float innerCircle = smoothstep(BAR_START, BAR_START, dist);\n    float outerCircle = 1.0 - smoothstep(barEndDist, barEndDist, dist);\n\n    // Output to screen\n    fragColor = vec4(BAR_COLOR * horizontal * innerCircle * outerCircle, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}