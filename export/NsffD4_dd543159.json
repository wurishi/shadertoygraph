{"ver":"0.1","info":{"id":"NsffD4","date":"1644850934","viewed":114,"name":"Mandelbrot Ð¡oastline","username":"jin_x","description":"Fractal in 3D","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["fractal","raycasting","mandelbrot"],"hasliked":0,"parentid":"7dcSzr","parentname":"Lava in Julia lowlands"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.14159265358979;\nconst int MAX_ITER = 64;\n//const int Z_STEP = 256 / MAX_ITER;\nconst float ROT_SPEED = 0.05;\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    float zoom = (cos(iTime*0.1)*0.5+0.5)*0.995+0.05;\n\n    // Normalize pixel coordinates (y = -0.5..0.5, x = -xres/yres/2..xres/yres/2)\n    vec2 uv = fragCoord/iResolution.xy;\n    float ar = iResolution.x/iResolution.y;\n    uv -= 0.5;\n    uv.x *= ar;\n\n    float sa = sin(iTime*ROT_SPEED), ca = cos(iTime*ROT_SPEED);\n    //uv *= mat2(ca, -sa, sa, ca);\n    uv *= zoom;\n    float cardioid = (0.5 - 0.5*ca);\n    vec2 shift = vec2(ca*cardioid + 0.25, sa*cardioid);\n    \n    // Mandelbrot : x = x^2 - y^2 + x0, y = 2*x*y + y0\n    \n    int iter;\n    fragColor = vec4(0, 0, 0.8, 0);\n    for (int z = MAX_ITER*2; z < MAX_ITER*3-1; ++z) {\n        vec2 xy = uv * float(z) / float(MAX_ITER*5) + shift;\n        float x0 = xy.x;\n        float y0 = xy.y;\n        for (iter = 0; iter <= z-MAX_ITER*2; ++iter) {\n            vec2 xy2 = xy * xy;\n            if (xy2.x + xy2.y > 4.0) { break; }\n            xy = vec2(xy2.x - xy2.y + x0, 2.0 * xy.x * xy.y + y0);\n        }\n        if (iter <= z-MAX_ITER*2) {\n            float c = float(MAX_ITER*3-1-z)/float(MAX_ITER);\n            fragColor = vec4(0.07, 0.8-c*0.85, 0, 1);\n            break;\n        }\n    }\n}","name":"Image","description":"","type":"image"}]}