{"ver":"0.1","info":{"id":"4stXDX","date":"1461845071","viewed":511,"name":"Color palette (anastadunbar)","username":"anastadunbar","description":"Colour palette test. Sorry for more zooming shaders, they're just really trippy.","likes":15,"published":1,"flags":32,"usePreview":0,"tags":["2d","colors","rgb","difference","colours","yiq"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const mat3 rgb2yiq = mat3( 0.299, 0.595716, 0.211456, 0.587, -0.274453, -0.522591, 0.114, -0.321263, 0.311135 );\nconst mat3 yiq2rgb = mat3( 1., 1., 1., 0.9563, -0.2721, -1.1070, 0.6210, -0.6474, 1.7046 );\nfloat diff(float a,float b){\n    return abs(a-b);\n}\nfloat colorDifference(vec3 c1,vec3 c2){\n    //return (diff(c1.r,c2.r)+diff(c1.g,c2.g)+diff(c1.b,c2.b))/3.;\n    c1 *= rgb2yiq; c2 *= rgb2yiq*.5;\n    return sqrt(pow(diff(c1.r,c2.r),2.)+pow(diff(c1.g,c2.g),2.)+pow(diff(c1.b,c2.b),2.))/3.;\n}\nvec3 draw(vec2 uv){\n    return texture(iChannel0,uv).rgb;\n}\nconst int size = 10;\nvec3 palette[size];\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    palette[0] = vec3(0.,0.,0.2);\n    palette[1] = vec3(1.,0.8,0.5);\n    palette[2] = vec3(1.,0.1,0.4);\n    palette[3] = vec3(0.9,1.,0.);\n    palette[4] = vec3(0.,1.,0.3);\n    palette[5] = vec3(0.,.6,1.);\n    palette[6] = vec3(0.,0.,1.);\n    palette[7] = vec3(1.,0.,1.);\n    palette[8] = vec3(.5,.5,.55);\n    palette[9] = vec3(.9,.9,1.);\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 or = clamp(draw(uv),0.,1.)-(mod(floor(fragCoord.x)+floor(fragCoord.y),2.)*.2); //Original texture\n    vec3 ch = palette[1]; //New\n    int indx = 0; //Palette index\n    for (int i=0;i<size;i++) {\n        if (colorDifference(or,palette[i])<colorDifference(or,ch)) {\n            ch = palette[i];\n        }\n    }\n    fragColor = vec4(ch,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","previewfilepath":"/media/ap/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define clamps(x) clamp(x,0.,1.)\n#define PI 3.14159265358979323\nvec2 rotation(float an,vec2 uv) {\n    mat2 rot = mat2(cos(an),-sin(an),sin(an),cos(an));\n    return uv*rot;\n}\nvec3 HueShift(vec3 Color,float Shift)\n{\n    vec3 P = vec3(0.55735)*dot(vec3(0.55735),Color);\n    vec3 U = Color-P;\n    vec3 V = cross(vec3(0.55735),U);    \n    Color = U*cos(Shift*6.2832) + V*sin(Shift*6.2832) + P;\n    return vec3(Color);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 position = (fragCoord.xy/iResolution.xy);\n    vec2 uv = position-.5;\n    uv.x /= iResolution.y/iResolution.x;\n    float time = iTime*.3;\n    \n    float fracttime = fract(time);\n    float scale = 5.;\n    \n    vec2 rotuv = rotation(mod(time,PI*2.),uv);\n    \n    vec2 uv2 = rotuv*pow(scale,fracttime);\n    vec2 uv3 = rotuv*pow(scale,fracttime-1.);\n    \n    vec3 o = mix(texture(iChannel0,uv2).rgb,texture(iChannel0,uv3).rgb,fracttime);\n    o = HueShift(o,time*.5);\n    o = mix(mix(o,vec3((o.r+o.g+o.b)/3.),-1.5),texture(iChannel1,position).rgb,0.8);\n\n    fragColor = vec4(o,1.);\n}\n","name":"Buf A","description":"","type":"buffer"}]}