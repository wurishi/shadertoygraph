{"ver":"0.1","info":{"id":"wtG3WR","date":"1578900970","viewed":297,"name":"Shippou","username":"coposuke","description":"Training. 七宝.","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["pattern","training","japanese"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265357989\n\n\nvec2 rotate(vec2 pos, float angle)\n{\n    float s = sin(angle), c = cos(angle);\n    return mat2(c, -s, s, c) * pos;\n}\n\nfloat hash(vec2 n)\n{\n    return fract(sin(dot(n, vec2(123.0, 458.0))) * 43758.5453);\n}\n\nfloat cubicInOut(float time) {\n  return (time < 0.5) ? (4.0 * time * time * time) : (1.0 - 4.0 * pow(1.0 - time, 3.0));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n    uv += vec2(1,-1) * iTime * 0.05;\n    \n    float uvScale = 2.5;\n    vec2 uvID = floor(uv * uvScale);\n    vec2 uvID2 = floor(uv * uvScale + vec2(0.5));\n    vec2 uvLocal = fract(uv * uvScale);\n\n    float time = iTime * 1.0;\n    float timef = cubicInOut(fract(time));\n    float timei = floor(time);\n    time = (timef + timei) * 0.5;\n    \n    // animation 1\n    float rotDir = (0.0 == mod(uvID.y, 2.0) ? 1.0 : -1.0);\n    vec2 rotCenter = vec2(0.5, 0.5);\n    vec2 uvAnim1 = uvLocal;\n    uvAnim1 = rotate(uvAnim1 - rotCenter, time * PI * rotDir);\n    uvAnim1 += rotCenter;\n    \n    // animation 2\n    vec2 uvAnim2 = uvLocal;\n    float uvAnim2Corner = floor(uvLocal.x);\n    uvAnim2 += vec2((0.5 < uvAnim2.x ? -0.5 : 0.5), (0.5 < uvAnim2.y ? -0.5 : 0.5));\n    uvAnim2 = rotate(uvAnim2 - rotCenter, time * PI);\n    uvAnim2 += rotCenter;\n    \n    // animation\n    uvLocal = (fract(time) < 0.5) ? uvAnim1 : uvAnim2;\n    \n    // distance\n    float neighborDist = 1e+4;\n    for(float x=-1.0; x<=1.0; x+=2.0)\n        for(float y=-1.0; y<=1.0; y+=2.0)\n            neighborDist = min(neighborDist, distance(uvLocal, vec2(x,y) * 0.5 + vec2(0.5)));\n    \n    float dist = 1e+4;\n    dist = distance(uvLocal, vec2(0.5));\n    dist = max(dist, neighborDist);\n    \n    // color\n    float smoothness = 0.05;\n    float thickness = 0.03;\n    float center = 0.45;\n    float density = smoothstep(center - thickness, center + thickness, dist);\n    density = smoothstep(1.0, 1.0 - smoothness, density) * (smoothstep(0.0, 0.0 + smoothness, density));\n    \n    float colorID = (fract(time) < 0.5) ? hash(uvID) : hash(uvID2);\n    float colorVariation = 0.3;\n    float colorOffset = -0.7;\n    vec3 color = vec3(0,1,2) * PI * 0.5 + colorID * colorVariation + colorOffset;\n    color = max(sin(color), cos(color)) + 0.4;\n    \n    float colorBgWave = (sin((uv.x - uv.y) * 2.0 + iTime * 3.0) + sin((uv.x - uv.y * 0.5) * 1.5 + iTime)) * 0.5;\n    vec3 colorBg = vec3(1.0, 0.8, 0.5) * mix(0.65, 1.0, colorBgWave);\n    fragColor.rgb = vec3(density) * color * (colorBgWave * 0.75 + 0.25 + (1.0 - colorBgWave) * vec3(0.1, 0.0, 0.0));\n    fragColor.rgb = mix(colorBg, fragColor.rgb, density);\n    fragColor.rgb = clamp(fragColor.rgb * (1.2 + sin(iTime) * 0.1), 0.0, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}