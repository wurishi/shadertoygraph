{"ver":"0.1","info":{"id":"ltVyDG","date":"1537573133","viewed":116,"name":"No.Way.Out","username":"tqle","description":"Project on Spheres","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["spheres"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Rotation\nmat2 rot(float a) {\n    return mat2(cos(a), -sin(a),\n                sin(a), cos(a));\n}\n\n\n//SDF Sphere\nfloat sphere(vec3 p, float rad) {\n    return length(p) - rad;\n}\n\n\n//Map distance\nfloat map(vec3 p) {\n    float sphereS = 1.2;\n    float rad = 2.5;\n    \n    vec3 q = fract(p) * 2.0 - 1.0;\n    \n    // Signed distance of sphere\n    return max(sphere(q, sphereS), sphere(q, sphereS*1.5*sin(iTime)));\n}\n\n\nfloat trace(vec3 origin, vec3 ray) {\n  float disp = 0.0;\n  for(int i = 0; i < 32; ++i) {\n  \tvec3 p = origin + ray*disp;\n    float d = map(p);\n    disp += d * .5;\n  }\n  return disp*1.1;\n     \n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord ){\n    //Normalize coord\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    uv = uv *2.-1.; // Remap the space to -1. to 1.\n    uv.x *= iResolution.x/iResolution.y;\n    \n    \t\n   \tfloat FOV = 2.0;\n   \tvec3 ray = normalize(vec3(uv, FOV));\n    \n    // Rotate Y towards Z\n    //ray.yz *= rot(iTime*0.2);\n    //ray.zx *= rot(iTime*0.1);\n    \n    vec3 origin = vec3(0.0, 0.0, sin(iTime));\n    float t = trace(origin, ray);\n    \n    \n    float linearFog = 1.75 / (1.0 - t*0.2);\n \n    vec3 fc = vec3(linearFog);\n\n   \n    // Try oscilating the final pixels\n    fragColor = vec4(cos(fc*fc - 10.0),1.0);\n}","name":"Image","description":"","type":"image"}]}