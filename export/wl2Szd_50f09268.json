{"ver":"0.1","info":{"id":"wl2Szd","date":"1566855122","viewed":2351,"name":"[twitch] Misty Grid","username":"NuSan","description":"Shader coded live on twitch (https://www.twitch.tv/nusan_fx)\nThe shader was made using Bonzomatic.\nYou can find the original shader here: http://lezanu.fr/LiveCode/MistyGrid.glsl","likes":79,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarching","translucency","xray","mist"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nfloat time;\n\nmat2 rot(float a) {\n  float ca=cos(a);\n  float sa=sin(a);\n  return mat2(ca,sa,-sa,ca);  \n}\n\nfloat box(vec3 p, vec3 s) {\n  p=abs(p)-s;\n  return max(p.x, max(p.y,p.z));\n}\n\nvec3 fr(vec3 p, float t) {\n\n  //float s = 1.0 - exp(-fract(time*1.0))*0.8;\n  float s = 0.7 - smoothstep(0.0,1.0,abs(fract(time*0.1)-0.5)*2.0)*0.3;\n  for(int i=0; i<5; ++i) {\n    \n    float t2=t+float(i);\n    p.xy *= rot(t2);\n    p.yz *= rot(t2*.7);\n    \n    float dist = 10.0;\n    p=(fract(p/dist-.5)-.5)*dist;\n    p=abs(p);\n    p-=s;\n    \n  }\n  \n  return p;\n}\n\nfloat at = 0.;\nfloat at2 = 0.;\nfloat at3 = 0.;\nfloat map(vec3 p) {\n  \n  \n  vec3 bp=p;\n  \n  p.xy *= rot((p.z*0.023+time*0.1)*0.3);\n  p.yz *= rot((p.x*0.087)*0.4);\n  \n  float t=time*0.5;\n  vec3 p2 = fr(p, t * 0.2);\n  vec3 p3 = fr(p+vec3(5,0,0), t * 0.23);\n  \n  float d1 = box(p2, vec3(1,1.3,4));\n  float d2 = box(p3, vec3(3,0.7,0.4));\n  \n  float d = max(abs(d1), abs(d2))-0.2;\n  float dist = 1.;\n  vec3 p4=(fract(p2/dist-.5)-.5)*dist;\n  float d3 = box(p4, vec3(0.4));\n  //d = max(d, -d3);\n  d = d - d3*0.4;\n  \n  //d = max(d, length(bp)-15);\n  \n  \n  //float f=p.z + time*4;\n  //p.x += sin(f*0.05)*6;\n  //p.y += sin(f*0.12)*4;\n  //d = max(d, -length(p.xy)+10);\n  \n  at += 0.13/(0.13+abs(d));\n  \n  float d5 = box(bp, vec3(4));\n  \n  float dist2 = 8.;\n  vec3 p5=bp;\n  p5.z = abs(p5.z)-13.;\n  p5.x=(fract(p5.x/dist2-.5)-.5)*dist2;\n  float d6 = length(p5.xz)-1.;\n  \n  at2 += 0.2/(0.15+abs(d5));\n  at3 += 0.2/(0.5+abs(d6));\n  \n  return d;\n}\n\nvoid cam(inout vec3 p) {\n  \n  float t=time*0.1;\n  p.yz *= rot(t);\n  p.zx *= rot(t*1.2);\n}\n\nfloat rnd(vec2 uv) {  \n  return fract(dot(sin(uv*752.322+uv.yx*653.842),vec2(254.652)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    \n  time = iTime * 1.0 + 137.0;\n    \n  vec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n  uv -= 0.5;\n  uv /= vec2(iResolution.y / iResolution.x, 1);\n  \n  float factor = 0.9 + 0.1*rnd(uv);\n  //factor = 1;\n\n  vec3 s=vec3(0,0,-15);\n  vec3 r=normalize(vec3(-uv, 1));\n  \n  cam(s);\n  cam(r);\n  \n  vec3 p=s;\n  int i=0;\n  \n  for(i=0; i<80; ++i) {\n    float d=abs(map(p));\n    d = abs(max(d, -length(p-s)+6.));\n    d *= factor;\n    if(d<0.001) {\n      d = 0.1;\n      //break;\n    }\n    p+=r*d;\n  }\n  \n  vec3 col=vec3(0);\n  //col += pow(1-i/101.0,8);\n  \n  vec3 sky = mix(vec3(1,0.5,0.3), vec3(0.2,1.5,0.7), pow(abs(r.z),8.));\n  sky = mix(sky, vec3(0.4,0.5,1.7), pow(abs(r.y),8.));\n  \n  //col += at*0.002 * sky;\n  col += pow(at2*0.008, 1.) * sky;\n  col += pow(at3*0.072, 2.) * sky * vec3(0.7,0.3,1.0) * 2.;\n  \n  col *= 1.2-length(uv);\n  \n  col = 1.0-exp(-col*15.0);\n  col = pow(col, vec3(1.2));\n  col *= 1.2;\n  //col += 0.2*sky;\n  \n  //col = vec3(rnd(uv));\n  \n  fragColor = vec4(col, 1);\n}","name":"Image","description":"","type":"image"}]}