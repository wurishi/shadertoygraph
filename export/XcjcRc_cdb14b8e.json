{"ver":"0.1","info":{"id":"XcjcRc","date":"1722720937","viewed":26,"name":"Ray marching testing is not fun","username":"Steammake3","description":"A test for RayMarching","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["begin"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float smin( float a, float b, float k ){\n    float h = max( k-abs(a-b), 0.0 )/k;\n    return min(a,b) - h*h*h*k*(1.0/6.0);\n}\n\nfloat sdBox( vec3 p, vec3 b ){\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat sdSphere( vec3 p, float s){\n    return length(p) - s;\n}\n\nfloat map(vec3 p){\n    vec3 spherePos = vec3(4.0 * cos(iTime), 0, 0.1);\n    float sphere = sdSphere(p - spherePos, 1.);\n    \n    float box = sdBox(p, vec3(0.75));\n    \n    float ground = p.y + 0.8;\n    \n    return min( ground, smin(sphere, box, 2.0));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalize it all\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy)/iResolution.y;\n\n    //Init\n    \n    // RayOrigin and RayDirection\n    vec3 ro = vec3(-1.7, 0, -3);\n    vec3 rd = normalize(vec3(uv, 1));\n    vec3 col = vec3(0.0);\n    \n    float t = 0.0;  // distance Travelled\n    \n    //RayMarching is sort of cool\n    for (int i = 0; i < 80; i++){\n    vec3 p = ro + rd * t; //position of the point\n    \n    float d = map(p);\n    \n    t += d;\n    if (d < 0.001 || t > 100.) break;\n    }\n    \n    col = vec3(t * 0.2);\n    \n    // Output\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}