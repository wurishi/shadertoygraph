{"ver":"0.1","info":{"id":"7l2Szm","date":"1627377867","viewed":248,"name":"Raytracing_Scene_NUS","username":"fzy_zju","description":"NUS Assignment","likes":7,"published":1,"flags":8,"usePreview":0,"tags":["raytracing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n//============================================================================\n// Constants.\n//============================================================================\n\nconst float PI = 3.1415926536;\nconst float SEED = 4. ;\nconst vec3 BACKGROUND_COLOR = vec3( 0.2, 0.5, 0.6 );\n\n// Vertical field-of-view angle of camera. In radians.\nconst float FOVY = 60.0 * PI / 180.0;\n\n// Use this for avoiding the \"epsilon problem\" or the shadow acne problem.\nconst float DEFAULT_TMIN = 10.0e-4;\n\n// Use this for tmax for non-shadow ray intersection test.\nconst float DEFAULT_TMAX = 10.0e6;\n\n// Equivalent to number of recursion levels (0 means ray-casting only).\n// We are using iterations to replace recursions.\nconst int NUM_ITERATIONS = 4;\n\n// Constants for the scene objects.\nconst int NUM_LIGHTS = 4;\nconst int NUM_MATERIALS = 28;\nconst int NUM_PLANES = 5;\nconst int NUM_SPHERES = 27;\n\n\n//============================================================================\n// Define new struct types.\n//============================================================================\nstruct Ray_t {\n    vec3 o;  // Ray Origin.\n    vec3 d;  // Ray Direction. A unit vector.\n};\nstruct Plane_t {\n    // The plane equation is Ax + By + Cz + D = 0.\n    float A, B, C, D;\n    int materialID;\n};\nstruct Sphere_t {\n    vec3 center;\n    float radius;\n    int materialID;\n};\nstruct Light_t {\n    vec3 position;  // Point light 3D position.\n    vec3 I_a;       // For Ambient.\n    vec3 I_source;  // For Diffuse and Specular.\n};\n\nstruct Material_t {\n    vec3 k_a;   // Ambient coefficient.\n    vec3 k_d;   // Diffuse coefficient.\n    vec3 k_r;   // Reflected specular coefficient.\n    vec3 k_rg;  // Global reflection coefficient.\n    float n;    // The specular reflection exponent. Ranges from 0.0 to 128.0.\n};\n\n//============================================================================\n// Global scene data.\n//============================================================================\nPlane_t Plane[NUM_PLANES];\nSphere_t Sphere[NUM_SPHERES];\nLight_t Light[NUM_LIGHTS];\nMaterial_t Material[NUM_MATERIALS];\nint Enable_Light=0;\nfloat spl;\nvec3 rand3( float x, float seed )\n{ \n  float f = x+seed;\n  return fract( PI*sin( vec3(f,f+5.33,f+7.7)) );\n}\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Initializes the scene.\n/////////////////////////////////////////////////////////////////////////////\nvoid InitScene()\n{\n    // Horizontal plane.\n    Plane[0].A = 0.0;\n    Plane[0].B = 1.0;\n    Plane[0].C = 0.0;\n    Plane[0].D = 0.0;\n    Plane[0].materialID = 0;\n    // Vertical plane.\n    Plane[1].A = 0.0;\n    Plane[1].B = 0.0;\n    Plane[1].C = 1.0;\n    Plane[1].D = 5.0;\n    Plane[1].materialID = 0;\n    Plane[2].A = 0.0;\n    Plane[2].B = 0.0;\n    Plane[2].C = -1.0;\n    Plane[2].D = 5.0;\n    Plane[2].materialID = 0;\n    Plane[3].A = 1.0;\n    Plane[3].B = 0.0;\n    Plane[3].C = 0.0;\n    Plane[3].D = 5.0;\n    Plane[3].materialID = 0;\n    Plane[4].A = -1.0;\n    Plane[4].B = 0.0;\n    Plane[4].C = 0.0;\n    Plane[4].D = 5.0;\n    Plane[4].materialID = 0;\n    \n    // // Center bouncing sphere.\n    float time = iTime;\n    float sec = mod(time,1.);\n    spl =floor(mod(time,float(NUM_SPHERES)));\n    Enable_Light = int(floor(mod(time/10.0,float(NUM_LIGHTS))));\n    for( int i=0; i<NUM_SPHERES; i++ )\n    {\n      float ra = 0.4;\n      float id = float(i);\n      Sphere[i].center = vec3( mod( id, 3.0) - 1.0,\n                        mod( floor( id/3.0 ), 3.0 ) + .55,\n                        floor( id/9.0 )-1.0);\n      Sphere[i].radius=ra;\n      Sphere[i].materialID = i+1;\n      if (i==int(spl))\n      {\n        Sphere[i].radius += 0.025 * sin(sec*50.) / sqrt(sec) * ( 1.-sqrt(sec));\n        \n      }\n    }\n   \n    \n\n    // // Circling sphere.\n\n    \n    // Silver material.\n    Material[0].k_d = vec3(0.5);\n    Material[0].k_a = 0.2 * Material[0].k_d;\n    Material[0].k_r = 2.0 * Material[0].k_d;\n    Material[0].k_rg = 0.5 * Material[0].k_r;\n    Material[0].n = 64.0;\n\n    // Gold material.\n    for (int i=1;i<NUM_MATERIALS;i++)\n    {\n    Material[i].k_d = rand3( float(i), SEED );\n    Material[i].k_a = 0.4 * Material[1].k_d;\n    Material[i].k_r = 1.0 * Material[1].k_d;\n    Material[i].k_rg = 0.5 * Material[1].k_r;\n    Material[i].n = 32.0;\n    }\n    // Green plastic material.\n   \n    vec3 L_IA=vec3(0.05);\n    vec3 L_IS=vec3(0.5);\n    // Light 0.\n    Light[0].position = vec3( 4.5, 2.0, 0.0 );\n    Light[0].I_a = L_IA;\n    Light[0].I_source = L_IS;\n    \n    Light[1].position = vec3( -4.5, 2.0, 0.0 );\n    Light[1].I_a = L_IA;\n    Light[1].I_source = L_IS;\n    \n    Light[2].position = vec3( 0.0, 2.0, -4.5);\n    Light[2].I_a = L_IA;\n    Light[2].I_source = L_IS;\n    \n    Light[3].position = vec3( 0.0, 2.0, 4.5 );\n    Light[3].I_a = L_IA;\n    Light[3].I_source = L_IS;\n\n\n}\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a plane and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n// If there is such an intersection, outputs the value of t, the position\n// of the intersection (hitPos) and the normal vector at the intersection\n// (hitNormal).\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectPlane( in Plane_t pln, in Ray_t ray, in float tmin, in float tmax,\n                     out float t, out vec3 hitPos, out vec3 hitNormal )\n{\n    vec3 N = vec3( pln.A, pln.B, pln.C );\n    float NRd = dot( N, ray.d );\n    float NRo = dot( N, ray.o );\n    float t0 = (-pln.D - NRo) / NRd;\n    if ( t0 < tmin || t0 > tmax ) return false;\n\n    // We have a hit -- output results.\n    t = t0;\n    hitPos = ray.o + t0 * ray.d;\n    hitNormal = normalize( N );\n    return true;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a plane and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectPlane( in Plane_t pln, in Ray_t ray, in float tmin, in float tmax )\n{\n    vec3 N = vec3( pln.A, pln.B, pln.C );\n    float NRd = dot( N, ray.d );\n    float NRo = dot( N, ray.o );\n    float t0 = (-pln.D - NRo) / NRd;\n    if ( t0 < tmin || t0 > tmax ) return false;\n    return true;\n}\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a sphere and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n// If there is one or two such intersections, outputs the value of the\n// smaller t, the position of the intersection (hitPos) and the normal\n// vector at the intersection (hitNormal).\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectSphere( in Sphere_t sph, in Ray_t ray, in float tmin, in float tmax,\n                      out float t, out vec3 hitPos, out vec3 hitNormal )\n{\n    /////////////////////////////////\n    // TASK: WRITE YOUR CODE HERE. //\n    /////////////////////////////////\n    ray.o=ray.o-sph.center;\n    float a=1.0;\n    float b=2.0*dot(ray.d,ray.o);\n    float c=dot(ray.o,ray.o)-sph.radius*sph.radius;\n    float d=b*b-4.0*a*c;\n    if (d<0.0) return false;\n    float t_up=(-b+sqrt(d))/(2.0*a);\n    float t_bl=(-b-sqrt(d))/(2.0*a);\n    float t0=(abs(t_up)<abs(t_bl))?t_bl:t_bl;\n    if ( t0 < tmin || t0 > tmax ) return false;\n    // We have a hit -- output results.\n    t = t0;\n    hitPos = ray.o + t0 * ray.d+sph.center;\n    hitNormal = (ray.o + t0 * ray.d)/sqrt(dot(ray.o + t0 * ray.d,ray.o + t0 * ray.d));\n    return true;  \n\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a sphere and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectSphere( in Sphere_t sph, in Ray_t ray, in float tmin, in float tmax )\n{\n    /////////////////////////////////\n    // TASK: WRITE YOUR CODE HERE. //\n    /////////////////////////////////\n    ray.o=ray.o-sph.center;\n    float a=1.0;\n    float b=2.0*dot(ray.d,ray.o);\n    float c=dot(ray.o,ray.o)-sph.radius*sph.radius;\n    float d=b*b-4.0*a*c;\n    if (d<0.0) return false;\n    float t_up=(-b+sqrt(d))/(2.0*a);\n    float t_bl=(-b-sqrt(d))/(2.0*a);\n    float t0=(abs(t_up)<abs(t_bl))?t_up:t_bl;\n    if ( t0 < tmin || t0 > tmax ) return false;\n    // We have a hit -- output results.\n    return true;  \n\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes (I_a * k_a) + k_shadow * I_source * [ k_d * (N.L) + k_r * (R.V)^n ].\n// Input vectors L, N and V are pointing AWAY from surface point.\n// Assume all vectors L, N and V are unit vectors.\n/////////////////////////////////////////////////////////////////////////////\nvec3 PhongLighting( in vec3 L, in vec3 N, in vec3 V, in bool inShadow,\n                    in Material_t mat, in Light_t light ,in float ID)\n{\n    if ( inShadow ) {\n        return light.I_a * mat.k_a;\n    }\n    else {\n        vec3 R = reflect( -L, N );\n        float N_dot_L = max( 0.0, dot( N, L ) );\n        float R_dot_V = max( 0.0, dot( R, V ) );\n        float R_dot_V_pow_n = ( R_dot_V == 0.0 )? 0.0 : pow( R_dot_V, mat.n );\n        vec3 I=light.I_a * mat.k_a +\n               light.I_source * (mat.k_d * N_dot_L + mat.k_r * R_dot_V_pow_n);\n        return (ID==spl)?I+2.2*rand3(spl,SEED):I;\n    }\n}\n\nfloat sphAreaShadow( vec3 P, in vec4 L, vec4 sph )\n{\n  vec3 ld = L.xyz - P;\n  vec3 oc = sph.xyz - P;\n  float r = sph.w - 0.05;\n  \n  float d1 = sqrt(dot(ld, ld));\n  float d2 = sqrt(dot(oc, oc));\n  \n  if (d1 - L.w / 2. < d2 - r) return 1.;\n  \n  float ls1 = L.w / d1;\n  float ls2 = r / d2;\n\n  float in1 = sqrt(1.0 - ls1 * ls1);\n  float in2 = sqrt(1.0 - ls2 * ls2);\n  \n  if (in1 * d1 < in2 * d2) return 1.;\n  \n  vec3 v1 = ld / d1;\n  vec3 v2 = oc / d2;\n  float ilm = dot(v1, v2);\n  \n  if (ilm < in1 * in2 - ls1 * ls2) return 1.0;\n  \n  float g = length( cross(v1, v2) );\n  \n  float th = clamp((in2 - in1 * ilm) * (d1 / L.w) / g, -1.0, 1.0);\n  float ph = clamp((in1 - in2 * ilm) * (d2 / r) / g, -1.0, 1.0);\n  \n  float sh = acos(th) - th * sqrt(1.0 - th * th) \n           + (acos(ph) - ph * sqrt(1.0 - ph * ph))\n           * ilm * ls2 * ls2 / (ls1 * ls1);\n  \n  return 1.0 - sh / PI;\n}\n\nfloat areaShadow( in vec3 P )\n{\n  float s = 1.0;\n  for( int i=0; i<NUM_SPHERES; i++ )\n    s = min( s, sphAreaShadow(P, vec4(Sphere[int(spl)].center,Sphere[int(spl)].radius), vec4(Sphere[i].center,Sphere[i].radius) ) );\n  return s;           \n}\n\nfloat sphLight( vec3 P, vec3 N, vec4 L)\n{\n  vec3 oc = L.xyz  - P;\n  float dst = sqrt( dot( oc, oc ));\n  vec3 dir = oc / dst;\n  \n  float c = dot( N, dir );\n  float s = L.w  / dst;\n    \n  return max(0., c * s);\n}\n  \n//-------------------------------------------------------------------------------------------\n\nvec3 shade( vec3 P, vec3 N )\n{\n  vec3 hero = rand3( spl, SEED );\n  float lgh = sphLight( P, N, vec4(Sphere[int(spl)].center,Sphere[int(spl)].radius))*areaShadow( P ); ;\n  // Sphere light\n  return  lgh * 2.5  * hero;;\n}    \n\n\n/////////////////////////////////////////////////////////////////////////////\n// Casts a ray into the scene and returns color computed at the nearest\n// intersection point. The color is the sum of light from all light sources,\n// each computed using Phong Lighting Model, with consideration of\n// whether the interesection point is being shadowed from the light.\n// If there is no interesection, returns the background color, and outputs\n// hasHit as false.\n// If there is intersection, returns the computed color, and outputs\n// hasHit as true, the 3D position of the intersection (hitPos), the\n// normal vector at the intersection (hitNormal), and the k_rg value\n// of the material of the intersected object.\n/////////////////////////////////////////////////////////////////////////////\nvec3 CastRay( in Ray_t ray,\n              out bool hasHit, out vec3 hitPos, out vec3 hitNormal, out vec3 k_rg )\n{\n    // Find whether and where the ray hits some object.\n    // Take the nearest hit point.\n\n    bool hasHitSomething = false;\n    float nearest_t = DEFAULT_TMAX;   // The ray parameter t at the nearest hit point.\n    vec3 nearest_hitPos;              // 3D position of the nearest hit point.\n    vec3 nearest_hitNormal;           // Normal vector at the nearest hit point.\n    int nearest_hitMatID;             // MaterialID of the object at the nearest hit point.\n\n    float temp_t;\n    vec3 temp_hitPos;\n    vec3 temp_hitNormal;\n    bool temp_hasHit;\n\n    /////////////////////////////////////////////////////////////////////////////\n    // TASK:\n    // * Try interesecting input ray with all the planes and spheres,\n    //   and record the front-most (nearest) interesection.\n    // * If there is interesection, need to record hasHitSomething,\n    //   nearest_t, nearest_hitPos, nearest_hitNormal, nearest_hitMatID.\n    /////////////////////////////////////////////////////////////////////////////\n\n    /////////////////////////////////\n    // TASK: WRITE YOUR CODE HERE. //\n    /////////////////////////////////\n    float SphereID=-1.0;\n    for ( int i=0;i<NUM_PLANES;i++)\n    {   \n        temp_hasHit=false;\n        temp_hasHit=IntersectPlane(Plane[i],ray,0.05,abs(nearest_t));\n        if(temp_hasHit)\n        {\n            IntersectPlane(Plane[i],ray,0.005,abs(nearest_t),temp_t,temp_hitPos,temp_hitNormal);\n            if (abs(temp_t)<abs(nearest_t))\n            {\n                nearest_t=temp_t;\n                nearest_hitPos=temp_hitPos;\n                nearest_hitNormal=temp_hitNormal;\n                nearest_hitMatID=Plane[i].materialID;\n                hasHitSomething=temp_hasHit;\n            }\n        }\n    }\n    for ( int i=0;i<NUM_SPHERES;i++)\n    {   \n        temp_hasHit=false;\n        temp_hasHit=IntersectSphere(Sphere[i],ray,0.05,abs(nearest_t));\n        if(temp_hasHit)\n        {\n            IntersectSphere(Sphere[i],ray,0.005,abs(nearest_t),temp_t,temp_hitPos,temp_hitNormal);\n            if (abs(temp_t)<abs(nearest_t))\n            {\n                SphereID=float(i);\n                nearest_t=temp_t;\n                nearest_hitPos=temp_hitPos;\n                nearest_hitNormal=temp_hitNormal;\n                nearest_hitMatID=Sphere[i].materialID;\n                hasHitSomething=temp_hasHit;\n            }\n        }\n    }\n    \n    \n\n    // One of the output results.\n    hasHit = hasHitSomething;\n    if ( !hasHitSomething ) return BACKGROUND_COLOR;\n\n    vec3 I_local = vec3( 0.0 );  // Result color will be accumulated here.\n\n    /////////////////////////////////////////////////////////////////////////////\n    // TASK:\n    // * Accumulate lighting from each light source on the nearest hit point.\n    //   They are all accumulated into I_local.\n    // * For each light source, make a shadow ray, and check if the shadow ray\n    //   intersects any of the objects (the planes and spheres) between the\n    //   nearest hit point and the light source.\n    // * Then, call PhongLighting() to compute lighting for this light source.\n    /////////////////////////////////////////////////////////////////////////////\n\n    /////////////////////////////////\n    // TASK: WRITE YOUR CODE HERE. //\n    /////////////////////////////////\n\n    Ray_t pRay;\n    bool k_shadow=false;\n    for (int j=0;j<NUM_LIGHTS;j++)\n    {   \n        if(j==Enable_Light)\n        {\n        pRay.o=nearest_hitPos;\n        pRay.d=normalize(Light[j].position-nearest_hitPos);\n        \n        float t_p=sqrt(dot(Light[j].position-nearest_hitPos,Light[j].position-nearest_hitPos));\n        for ( int i=0;i<NUM_PLANES;i++)\n        {   \n            temp_hasHit=IntersectPlane(Plane[i],pRay,0.05,t_p);\n            if (temp_hasHit)\n            {\n                k_shadow=true;\n                break;\n            }\n        }\n        if(!k_shadow)\n        {\n            for ( int i=0;i<NUM_SPHERES;i++)\n            {   \n                temp_hasHit=IntersectSphere(Sphere[i],pRay,0.05,t_p);\n                if (temp_hasHit)\n                {\n                    k_shadow=true;\n                    break;\n                }\n            }\n        }\n        if (SphereID==spl)\n            k_shadow=false;\n        I_local+=PhongLighting(pRay.d,nearest_hitNormal,-ray.d,k_shadow,Material[nearest_hitMatID],Light[j],SphereID);\n        }\n    }\n    if (SphereID!=spl&&SphereID!=-1.0)\n    {   \n        vec3 P = ray.o + nearest_t*ray.d;\n        vec3 N = normalize(P-Sphere[int(SphereID)].center);\n        I_local  += shade( P, N );\n        \n    }\n    else if(SphereID==-1.0)\n    {\n        \n        vec3 pos = ray.o + nearest_t*ray.d;;\n        vec3 nor = vec3(0.0,1.0,0.0);\n        I_local  += shade( pos, nor);\n            \n    }\n\n    // Populate output results.\n    hitPos = nearest_hitPos;\n    hitNormal = nearest_hitNormal;\n    k_rg = Material[nearest_hitMatID].k_rg;\n\n    return I_local;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Execution of fragment shader starts here.\n// 1. Initializes the scene.\n// 2. Compute a primary ray for the current pixel (fragment).\n// 3. Trace ray into the scene with NUM_ITERATIONS recursion levels.\n/////////////////////////////////////////////////////////////////////////////\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    InitScene();\n\n    // Scale pixel 2D position such that its y coordinate is in [-1.0, 1.0].\n    vec2 pixel_pos = (2.0 * fragCoord.xy - iResolution.xy) / iResolution.y;\n    vec2 m = step(0.0001,iMouse.z) * iMouse.xy/iResolution.xy;\n    float an = 0.3*iTime - 7.0*m.x;\n    // Position the camera.\n    vec3 cam_pos = vec3( 3.5*sin(an), 1.5, 3.5*cos(an));\n    vec3 cam_lookat = vec3( 0.0, 1.5, 0.0 );\n    vec3 cam_up_vec = vec3( 0.0, 1.0, 0.0 );\n\n    // Set up camera coordinate frame in world space.\n    vec3 cam_z_axis = normalize( cam_pos - cam_lookat );\n    vec3 cam_x_axis = normalize( cross(cam_up_vec, cam_z_axis) );\n    vec3 cam_y_axis = normalize( cross(cam_z_axis, cam_x_axis));\n\n    // Create primary ray.\n    float pixel_pos_z = -1.0 / tan(FOVY / 2.0);\n    Ray_t pRay;\n    pRay.o = cam_pos;\n    pRay.d = normalize( pixel_pos.x * cam_x_axis  +  pixel_pos.y * cam_y_axis  +  pixel_pos_z * cam_z_axis );\n\n\n    // Start Ray Tracing.\n    // Use iterations to emulate the recursion.\n\n    vec3 I_result = vec3( 0.0 );\n    vec3 compounded_k_rg = vec3( 1.0 );\n    Ray_t nextRay = pRay;\n    \n    for ( int level = 0; level <= NUM_ITERATIONS; level++ )\n    {\n        bool hasHit;\n        vec3 hitPos, hitNormal, k_rg;\n\n        vec3 I_local = CastRay( nextRay, hasHit, hitPos, hitNormal, k_rg );\n        \n        I_result += compounded_k_rg * I_local;\n\n        if ( !hasHit ) break;\n\n        compounded_k_rg *= k_rg;\n\n        nextRay = Ray_t( hitPos, normalize( reflect(nextRay.d, hitNormal) ) );\n    }\n    I_result=pow(I_result,vec3(0.7));\n    fragColor = vec4( I_result, 1.0 );\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec2 mainSound( int samp, float time )\n{\n    // A 440 Hz wave that attenuates quickly overt time\n    time -= 0.7;\n    float sec = mod(time,1.);\n    float ech = mod(time,.2);\n    float sph = floor( mod(time,27.));\n    float rnd = fract( 876.432 * sin( sph ) ) + 5.;\n    float hum = sin(400.0*time) * sin(8.0*time) * 0.2;\n    float bel = sin(rnd*340.0*sec)*exp(-4.0*sec)*exp(-4.0*ech)*.5;\n    return vec2( hum + bel );\n}","name":"Sound","description":"","type":"sound"}]}