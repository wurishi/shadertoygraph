{"ver":"0.1","info":{"id":"43sfDs","date":"1729091885","viewed":139,"name":"analog creepy vcr filter","username":"jrayca973","description":"Created by Jillian Rayca","likes":0,"published":3,"flags":2,"usePreview":0,"tags":["chromaticaberration"],"hasliked":0,"parentid":"stGBWR","parentname":"Damaged VCR puzzle"},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Hint, it's a few lines of code, and makes use of a tan function :)\n    vec2 warpedUv = uv;\n    \n    vec2 offset1 = vec2(0.9);\n    vec2 offset2 = vec2(-0.0);\n    vec2 offset3 = vec2(-0.);\n      if(uv.y < 0.73 + 0.5*tan(iTime * 0.5) && uv.y >0.6 + 0.5*tan(iTime * 0.5)) {\n        warpedUv = vec2((tan(uv.y * 1000.)*0.15) * (1. - uv.y) + uv.x, uv.y);\n    }\n    float r = texture(iChannel0, warpedUv + offset1/2.).r;\n    float g = texture(iChannel0, warpedUv + offset2/2.).g;\n    float b = texture(iChannel0, warpedUv + offset3/2.).b;\n                          \n    vec3 col = sin(vec3(sin(r * iTime)* 0.5, g * 0.5, b * 0.3);\n    // Outputtt screen\n    fragColor = vec4(col,1.);\n}","name":"Image","description":"","type":"image"}]}