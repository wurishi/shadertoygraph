{"ver":"0.1","info":{"id":"flsBDN","date":"1650911451","viewed":202,"name":"Additive Particle Flow","username":"Heroic815","description":"My first published shader. I think this turned out nicely so enjoy :)","likes":11,"published":1,"flags":32,"usePreview":0,"tags":["particles","flow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv) + texture(iChannel1, uv);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xsf3Rr","filepath":"/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","previewfilepath":"/media/ap/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Background\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec3 col = texture(iChannel0, uv).rgb*vec3(0.173,0.125,0.251);\n\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// Particles\n\n#define NUM_PARTICLES 30\n\n\n// Hash code from: https://www.shadertoy.com/view/ttc3zr\nuint murmurHash11(uint src) {\n    const uint M = 0x5bd1e995u;\n    uint h = 1190494759u;\n    src *= M; src ^= src>>24u; src *= M;\n    h *= M; h ^= src;\n    h ^= h>>13u; h *= M; h ^= h>>15u;\n    return h;\n}\n\n// 1 output, 1 input\nfloat hash11(float src) {\n    uint h = murmurHash11(floatBitsToUint(src));\n    return uintBitsToFloat(h & 0x007fffffu | 0x3f800000u) - 1.0;\n}\n\nvec3 saturate(vec3 a)\n{\n    return clamp(a, vec3(0.0), vec3(1.0));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    uv *= 4.0;\n\n    // Time varying pixel color\n    vec3 col = vec3(0);\n    col += texture(iChannel0, fragCoord/iResolution.xy).rgb;\n    for(int i = 0; i < NUM_PARTICLES; i++)\n    {\n        float x = hash11(float(i*672))+sin(iTime*28.43*hash11(float(i))*0.02)*2.0 - 0.5;\n        float y = hash11(float(i*514))+sin(iTime*37.24*hash11(float(i))*0.03) - 0.5;\n        vec2 p = vec2(x, y);\n        col += vec3(0.094,0.035,0.224)*(1.0-smoothstep(distance(uv, p), 0.001, 0.007));\n        col = saturate(col);\n    }\n    \n    col *= 0.9987; // Colors will slowly fade over time\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n\n","name":"Buffer B","description":"","type":"buffer"}]}