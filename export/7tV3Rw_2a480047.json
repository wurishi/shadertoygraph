{"ver":"0.1","info":{"id":"7tV3Rw","date":"1637402321","viewed":53,"name":"Fork Loop Test hjm1fb 4","username":"hjm1fb","description":"changed the loop body from simplex noise to texture sampling","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"NtK3z1","parentname":"Loop Test"},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 snoise(vec3 v)\n{\n  vec4 col = vec4(0);\n  vec2 off = vec2(.1,.0);\n  col += texture(iChannel0, v.xy);\n  col -= texture(iChannel0, v.xz);\n  col += texture(iChannel0, v.yz);\n  col -= texture(iChannel0, v.yx);\n  col += texture(iChannel0, v.zx);\n  col -= texture(iChannel0, v.zy);\n  col += texture(iChannel0, v.xy + off);\n  col -= texture(iChannel0, v.xz + off);\n  col += texture(iChannel0, v.yz + off);\n  col -= texture(iChannel0, v.yx + off);\n  col += texture(iChannel0, v.zx + off);\n  col -= texture(iChannel0, v.zy + off);\n  return col;\n}\n\n// tested on safari, macOS, UHD630\n// METHOD 1, short for: 33fps\n// METHOD 2,  long seq: 32fps\n// METHOD 3,  long for: 33fps\n\n// tested on safari, iOS, A15\n// METHOD 1, short for: 17.2~30.0fps\n// METHOD 2,  long seq:  7.5~8.5fps\n// METHOD 3,  long for: 16.0~35.4fps\n// Guessed Conclusion for Apple: Code Memory eats up the performance \n\n// tested on Android, Sony J9210\n// METHOD 1, for loop 100times with one line:   5.6 ~ 11fps\n// METHOD 2,  flatten for loop by 100 code lines:  6.1 ~ 13.9fps(Best)\n// METHOD 3, for loop 20 times with 5 code lines each time: 5.1~11.8 fps\n// METHOD 3, same as METHOD 1, but move the code of function snoise into loop: 4.4~ 9.4 fps\n// Guessed Conclusion for this Android Deviceï¼šThe more Complex Structure of code,like much code in loop body or nested loop, eat up \n// much performance \n\n#define METHOD 4\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec4 col = vec4(0);\n    #if METHOD == 1\n    for(float i=0.;i<100.;i++){\n        col += snoise(vec3(uv,i*sin(iTime)*0.01));\n    }\n    #elif METHOD == 2\n    col += snoise(vec3(uv,1.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,2.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,3.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,4.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,5.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,6.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,7.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,8.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,9.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,10.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,11.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,12.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,13.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,14.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,15.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,16.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,17.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,18.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,19.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,20.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,21.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,22.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,23.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,24.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,25.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,26.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,27.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,28.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,29.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,30.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,31.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,32.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,33.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,34.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,35.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,36.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,37.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,38.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,39.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,40.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,41.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,42.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,43.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,44.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,45.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,46.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,47.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,48.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,49.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,50.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,51.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,52.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,53.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,54.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,55.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,56.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,57.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,58.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,59.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,60.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,61.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,62.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,63.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,64.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,65.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,66.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,67.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,68.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,69.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,70.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,71.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,72.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,73.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,74.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,75.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,76.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,77.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,78.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,79.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,80.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,81.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,82.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,83.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,84.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,85.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,86.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,87.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,88.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,89.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,90.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,91.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,92.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,93.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,94.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,95.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,96.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,97.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,98.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,99.*sin(iTime)*0.01));\n    col += snoise(vec3(uv,100.*sin(iTime)*0.01));\n    #elif METHOD == 3\n    for(float i=0.;i<100.;i+=5.){\n        col += snoise(vec3(uv,i*sin(iTime)*0.01));\n        col += snoise(vec3(uv,(i+1.)*sin(iTime)*0.01));\n        col += snoise(vec3(uv,(i+2.)*sin(iTime)*0.01));\n        col += snoise(vec3(uv,(i+3.)*sin(iTime)*0.01));\n        col += snoise(vec3(uv,(i+4.)*sin(iTime)*0.01));\n    }\n    #elif METHOD == 4\n        for(float i=0.;i<100.;i++){\n        vec3 v = vec3(uv,i*sin(iTime)*0.01);\n        vec2 off = vec2(.1,.0);\n  col += texture(iChannel0, v.xy);\n  col -= texture(iChannel0, v.xz);\n  col += texture(iChannel0, v.yz);\n  col -= texture(iChannel0, v.yx);\n  col += texture(iChannel0, v.zx);\n  col -= texture(iChannel0, v.zy);\n  col += texture(iChannel0, v.xy + off);\n  col -= texture(iChannel0, v.xz + off);\n  col += texture(iChannel0, v.yz + off);\n  col -= texture(iChannel0, v.yx + off);\n  col += texture(iChannel0, v.zx + off);\n  col -= texture(iChannel0, v.zy + off);\n    }\n    #endif\n\n    // Output to screen\n    fragColor = vec4(col.rgb,1.0);\n}","name":"Image","description":"","type":"image"}]}