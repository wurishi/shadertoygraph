{"ver":"0.1","info":{"id":"DdfyRS","date":"1686899344","viewed":61,"name":"TEA hash stress-test","username":"MonterMan","description":"stress-test TEA as a GPU hash","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["hash"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TEA_ROUND_COUNT 32\nuvec2 tea(uvec4 k)\n{\n    uvec2 v = uvec2(0);\n    uint delta=0x9E3779B9u;                     /* a key schedule constant */\n    uint sum = 0u;\n    for (int i=0; i<TEA_ROUND_COUNT; i++) {     /* basic cycle start */\n        sum += delta;\n        v.x += ((v.y<<4) + k.x) ^ (v.y + sum) ^ ((v.y>>5) + k.y);\n        v.y += ((v.x<<4) + k.z) ^ (v.x + sum) ^ ((v.x>>5) + k.w);\n    }                                              /* end cycle */\n    return v;\n}\n\nfloat sinHash(vec2 p)\n{\n\treturn fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    bool useTea = uv.x < 0.5;\n    \n    uv += vec2(iTime * 1500.); // increase range to stress-test the hash\n\n    vec3 col;\n    if (useTea)\n    {\n        uvec2 seed = floatBitsToUint(uv);\n        \n        uint r = tea(uvec4(seed, 1, 2)).x;\n        col = vec3(1) * (float(r) / float(0xffffffffu));\n    }\n    else\n    {\n        col = vec3(1) * sinHash(uv);\n    }\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}