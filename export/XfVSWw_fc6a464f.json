{"ver":"0.1","info":{"id":"XfVSWw","date":"1715267062","viewed":42,"name":"Funky coloured tiles","username":"Joban","description":"Messing around with fractal with fract pow and abs","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fract"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float fractAbs(float num)\n{\n    return fract(abs(num));\n}\n\nfloat pythagoras(float a, float b) \n{\n    float halfVal = 1. / 2.;\n    return pow(pow(a, 2.) + pow(b, 2.), halfVal);\n}\n\nfloat specialPyth(float a, float b, float rootVal) \n{\n    return pow(pow(a, 2.) + pow(b, 2.), rootVal);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // between -1 and 1\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    uv *= 2.5;\n    float d = length(uv) * 2.0;\n\n    // Time varying pixel color\n    \n    float rUvX = fractAbs(uv.x);\n    float gUvY = fractAbs(uv.y);\n    \n    float fractTime = fract(iTime) + sin(iTime);\n    fractTime = fract(iTime) + 1.5;\n    fractTime = 0.12;\n    \n    // Make fractTime go from 0.1 - 0.2\n    // fractTime = 0.001 + (abs(sin(iTime / 500.)) * 0.1);\n    \n    float r = clamp((sin(iTime)/(d * fractTime)) + rUvX, 0., 0.8);\n    float g = clamp((sin(iTime)/(d * fractTime)) + gUvY, 0., 0.8);\n    float b = 0.;\n    \n    if (r < 0.2 && g < 0.2) {\n        rUvX = cos(iTime);\n        gUvY = -1.*cos(iTime);\n        r = clamp((cos(iTime)/d) + rUvX, 0., 0.8);\n        g = clamp((cos(iTime)/d) + gUvY, 0., 0.8);\n        b = pythagoras(rUvX, gUvY);\n    }\n    \n    if (r > 0.6 && g > 0.6) {\n        rUvX = -1.*cos(iTime);\n        gUvY = cos(iTime);\n        r = clamp((cos(iTime)/d) + rUvX, 0., 0.8);\n        g = clamp((cos(iTime)/d) + gUvY, 0., 0.8);\n        b = specialPyth(rUvX, gUvY, 1./3.);\n    }\n    \n    vec3 col = vec3(r, g, b);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}