{"ver":"0.1","info":{"id":"WdjfWV","date":"1590867881","viewed":96,"name":"Trajectory of a Quadratic Bezier","username":"yp3y5akh0v","description":"Trajectory of a Quadratic Bezier","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d","bezier","quadratic","trajectory"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define R iResolution\n#define T (0.5 + 0.5 * sin(iTime))\n\nfloat distToV(vec2 p, vec2 o, vec2 v) {\n    vec2 op = p - o;\n    vec2 ep = op - v;\n    float d = length(ep - dot(ep, v) / dot(v, v) * v);\n    if (dot(op, v) < 0.) {\n        d = length(op);\n    }    \n    if (dot(ep, -v) < 0.) {\n        d = length(ep);\n    }\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * R.xy) / R.y;\n    vec3 col = vec3(0.);\n    vec2 p = uv;\n    vec2 a = vec2(-0.6, -0.3);\n    vec2 b = vec2(0., 0.4);\n    vec2 c = vec2(0.6, -0.3);\n    vec2 tab = a + T * (b - a);\n    vec2 tbc = b + T * (c - b);\n    vec2 tr = tab + T * (tbc - tab);\n    float dab = distToV(p, a, tab - a);\n    float dbc = distToV(p, b, tbc - b);\n    float dr = distToV(p, tab, tbc - tab);\n    \n    col = vec3(0.003 / dab, 0.003 / dbc, 0.003 / dr);\n    col += vec3(0.006 / length(p - tr));\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}