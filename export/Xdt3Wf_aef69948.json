{"ver":"0.1","info":{"id":"Xdt3Wf","date":"1452530189","viewed":214,"name":"This is another julia shader","username":"xdaimon","description":"Was trying to do an \"Escher Julia\" like the one found in the FractInt program.\nHow do I prevent the inside and outside colors from changing?","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["julia"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 cpow(vec2 z, float power)\n{\n    vec2 lnz = vec2(log(length(z)), atan(z.y,z.x));\n    float real = exp(power*lnz.x)*cos(power*lnz.y);\n    float img = exp(power*lnz.x)*sin(power*lnz.y);\n    return vec2(real,img);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //vec2 mouse = iMouse.xy/iResolution.xy * 2. - 1.;\n    vec2 pixel = fragCoord.xy / iResolution.xy * 2. - 1.;\n    pixel.x*=iResolution.x/iResolution.y;\n    \n    vec2 z = pixel;\n    vec2 z2;\n    \n    //vec2 shift = .8*vec2(cos(iTime/20.),sin(iTime/20.));\n    vec2 shift = iMouse.xy/iResolution.xy*2.-1.;\n    //vec2 shift = vec2(.5,iMouse.y/iResolution.y*2.-1.);\n    \n    float zr_t;\n    float itters = 0.;\n    \n    // Don't draw a 4th pow julia\n    //float th = atan(z.y,z.x);\n    //z = pow(length(z),1./2.)*vec2(cos(1./2.*th),sin(1./2.*th));\n    \n    //float power = iMouse.x/iResolution.x*2.-1.;\n    float power = 4./3.;\n//    z = mouse;\n//    for (int i = 0; i < 64; ++i)\n//    {\n//        z = cpow(z,power) + pixel;\n//        itters++;\n//        if (dot(z,z)>4.) break;\n//    }\n    \n    // escher like thing\n\t   for (int i = 0; i < 64; ++i) {\n\t\tz = cpow(z,power);\n        z2=z*15.;\n        for (int k = 0; k < 64; ++k)\n        {\n            z2 = cpow(z2,power) + shift;\n            itters++;\n\t\t\tif (length(z2) > 4.) break;\n       }\n        itters++;\n        if (length(z)>4.)break;\n        if (itters>64.)break;\n    }\n    fragColor = vec4(vec3((floor(mod(itters,8.))+.5)/6.) , 1.);\n    \n    \n    //fragColor = vec4(vec3(itters/50.),1.);\n    //fragColor *= vec4(1.,1.3,1.3,1.);\n}","name":"Image","description":"","type":"image"}]}