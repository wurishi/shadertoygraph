{"ver":"0.1","info":{"id":"NdVGzh","date":"1631065921","viewed":100,"name":"Stylized Scanlines, nice 1","username":"meteotrix","description":"I had an idea for an intro screen for a series, and I want some stylized scanline effects.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["motiondesign"],"hasliked":0,"parentid":"fdK3Rh","parentname":"Stylized scanlines"},"renderpass":[{"inputs":[{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;    \n    vec2 uv_shaken_1 = uv;\n    vec2 uv_shaken_2 = uv;\n    \n    uv_shaken_1.x += texture(iChannel0, vec2(iTime*0.1, iTime*0.1)).x *0.2 -0.5;\n    uv_shaken_1.y += texture(iChannel0, vec2(iTime*0.1, iTime*0.08)).x *0.2 -0.5;\n    \n    uv_shaken_2.x += texture(iChannel0, vec2(iTime*0.05, iTime*0.05)).x *0.05 -0.5;\n    uv_shaken_2.y += texture(iChannel0, vec2(iTime*0.05, iTime*0.04)).x *0.05 -0.5;\n    \n    float flicker = pow(texture(iChannel0, vec2(iTime*0.2,iTime*0.2)).x*1.5, 0.5);\n    \n    vec3 noise_bg_1 = texture(iChannel0, (uv_shaken_2.xy * vec2(1.777, 1.0) * 2.0) + vec2(0, iTime*-0.4)).xxx;\n    vec3 noise_bg_2 = texture(iChannel0, (uv_shaken_2.xy * vec2(1.777, 1.0) * 2.5) + vec2(iTime*-0.1, iTime*-1.0)).xxx *noise_bg_1;\n    \n    vec3 col =   (vec3(0.1,0.01,0.15)* noise_bg_2*1.5) * (noise_bg_2*noise_bg_1) * flicker\n                //-(vec3(0.15,0.15,0.3)* noise_bg_2*1.0) * (noise_bg_2*noise_bg_2) * flicker\n                ;\n    \n    float sin_y_1 = sin(uv_shaken_1.x*1.0 + iTime*9.0)*0.4 + 0.2 +noise_bg_2.x*0.02;\n    float sin_y_2 = sin(uv_shaken_1.x*1.0 + iTime*4.0 + 3.14)*0.9 + 0.2 +noise_bg_2.x*0.02;\n    float line_y_1 = (uv_shaken_1.x*0.25) + mod(iTime*2.5, 1.0) *2.0 -1.0 +noise_bg_2.x*0.02 ;\n    float line_y_2 = (uv_shaken_1.x*-0.5) + mod(iTime*-1.5, 1.0) *2.0 -1.0 +noise_bg_2.x*0.02 ;\n    \n    //float within_band_1 = ((abs(uv_shaken_1.y - sin_y_1) < 0.2) ? (1.0 - abs(uv_shaken_1.y - sin_y_1)) : 0.0);\n    //float within_band_2 = ((abs(uv_shaken_1.y - sin_y_2) < 0.2) ? (1.0 - abs(uv_shaken_1.y - sin_y_2)) : 0.0);\n    //float within_band_3 = ((abs(uv_shaken_1.y - line_y_1) < 0.1) ? (1.0 - abs(uv_shaken_1.y - line_y_1)) : 0.0);\n    //float within_band_4 = ((abs(uv_shaken_1.y - line_y_2) < 0.1) ? (1.0 - abs(uv_shaken_1.y - line_y_2)) : 0.0);\n    \n    float within_band_1 = pow(clamp((0.2 - abs(uv_shaken_1.y - sin_y_1)), 0.0, 0.2 ) *5.0, 0.85);\n    float within_band_2 = pow(clamp((0.2 - abs(uv_shaken_1.y - sin_y_2)), 0.0, 0.2 ) *5.0, 0.85);\n    float within_band_3 = pow(clamp((0.1 - abs(uv_shaken_1.y - line_y_1)), 0.0, 0.1 ) *10.0, 0.2);\n    float within_band_4 = pow(clamp((0.1 - abs(uv_shaken_1.y - line_y_2)), 0.0, 0.1 ) *10.0, 1.0);\n    \n    float scanlines_1 = sin(((uv_shaken_2.y+texture(iChannel0, vec2(uv_shaken_2.x,0)).x*0.0)+iTime*0.5 + uv_shaken_2.x*0.05) * iResolution.y *0.5 ) *0.5 + 0.5;    \n    \n    col += (scanlines_1*0.5) * flicker* mix(vec3(0.25, 0.0, 0.2), vec3(0.0, 0.0, 0.5), uv.y)*0.75;\n    col *= pow((1.0-distance(uv.xy, vec2(0.5,0.5))), 2.0) *2.5;\n    \n    col = max(vec3(0.0), col);\n    \n    col +=  ( //  within_band_1 * vec3(1.0, 0.5, 1.0) \n                //max(vec3(0.0), within_band_2 * vec3(1.0, 0.5, 1.0) * (0.2+within_band_2*0.5) - noise_bg_2*0.15)\n               max(vec3(0.0), within_band_3 * vec3(0.6, 0.15, 0.7) * (0.5+within_band_2*1.8) - noise_bg_2*0.15)\n              + max(vec3(0.0), within_band_4 * vec3(0.8, 0.4, 1.0) * (0.5+within_band_1*1.8) - noise_bg_2*0.15)\n            ) * flicker\n            ;\n               \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}