{"ver":"0.1","info":{"id":"fsSGDG","date":"1617850194","viewed":62,"name":"Distance to feature points V","username":"tomoe","description":"getting distances to the 1st to 4th closest feature points","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["bd202104"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"uvec3 k = uvec3(0x456789abu, 0x6789ab45u, 0x89ab4567u);\nconst uint max32 = 0xffffffffu;\nconst float PI = 3.14159265359;\nuvec2 hash22u(uvec2 n) {  \n    n ^= (n.yx << 24);\n    n ^= (n.yx >> 1);\n    n *= k.xy;\n    n ^= (n.yx << 1);\n    return n * k.xy;\n}\nuvec3 hash33u(uvec3 n) {\n    n ^= (n.yzx << 24);\n    n ^= (n.yzx >> 1);\n    n *= k;\n    n ^= (n.yzx << 1);\n    return n * k;\n}\nmat2 rot2(float t) {\n    return mat2(cos(t), sin(t), -sin(t),  cos(t));\n}\nfloat length2(vec2 v){\n    return dot(v, v);\n}\nfloat length3(vec3 v){\n    return dot(v, v);\n}\nvec2 hash22(vec2 p) {\n    uvec2 n = uvec2(p);\n    return vec2(hash22u(n)) / vec2(max32) - 0.5;\n}\nvec3 hash33(vec3 p) {\n    uvec3 n = uvec3(p);\n    return vec3(hash33u(n)) / vec3(max32) - 0.5;\n}\nvec4 sort(vec4 list, float v){\n    if (list.w < v){\n        return list;\n    } else {\n        vec4 newList = list.wxyz;\n        for(int i = 0; i < 4; i ++ ) {\n            if (list[i] < v) {\n                newList[i] = list[i];\n            } else {\n                newList[i] = v;\n                break;\n            }\n        }\n        return newList;\n    }\n}\nvec4 F4_2d(vec2 p){   \n    vec2 n = round(p);\n    vec2 f = p - round(p);\n    vec4 dist4 = vec4(length2(1.5 - abs(f)));\n    vec2 sgn = vec2(1.0);\n    vec2 glid = vec2(0.0);\n    for(float j = 0.0; j <= 4.0; j ++ ) {\n        glid.y += sgn.y * j;\n        sgn.y *= -1.0;\n        if (abs(glid.y - f.y) - 0.5 > sqrt(dist4.w)){\n            continue;\n        }\n        for(float i = 0.0; i <= 4.0; i ++ ){\n            glid.x += sgn.x * i;\n            sgn.x *= -1.0;\n            vec2 nbd = glid + rot2(iTime) * hash22(n + glid) / sqrt(2.0);\n            float dist = length2(nbd -f);\n            dist4 = sort(dist4, dist);\n        }\n        glid.x = 0.0;\n    }\n    return sqrt(dist4);\n}\nvec4 F4_3d(vec3 p){   \n    vec3 n = round(p);\n    vec3 f = p - round(p);\n    vec4 dist4 = vec4(length3(1.5 - abs(f)));\n    vec3 sgn = vec3(1.0);\n    vec3 glid = vec3(0.0);\n    for(float k = 0.0; k <= 4.0; k ++ ) {\n            glid.z += sgn.z * k;\n            sgn.z *= -1.0;\n            if (abs(glid.z - f.z) - 0.5 > sqrt(dist4.w)){\n                continue;\n            }\n        for(float j = 0.0; j <= 4.0; j ++ ) {\n            glid.y += sgn.y * j;\n            sgn.y *= -1.0;\n            if (abs(glid.y - f.y) - 0.5 > sqrt(dist4.w)){\n                continue;\n            }\n            for(float i = 0.0; i <= 4.0; i ++ ){\n                glid.x += sgn.x * i;\n                sgn.x *= -1.0;\n                vec3 nbd = glid + hash33(n + glid);\n                float dist = length3(nbd - f);\n                dist4 = sort(dist4, dist);\n            }\n            glid.x = 0.0;\n        }\n        glid.y = 0.0;\n    }\n    return sqrt(dist4);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 pos = fragCoord.xy/ iResolution.xx;\n    pos *= 10.0;\n    pos += iTime;\n    int ind = int(4.0 * fragCoord.x / iResolution.x);  //0,1,2,3 from L to R\n    if(gl_FragCoord.y < 0.5 * iResolution.y){\n        fragColor = vec4(F4_2d(pos)[ind]);  //lower\n    } else {\n        fragColor = vec4(F4_3d(vec3(pos, iTime))[ind]);  //upper\n    }\n}","name":"Image","description":"","type":"image"}]}