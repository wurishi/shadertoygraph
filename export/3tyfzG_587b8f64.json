{"ver":"0.1","info":{"id":"3tyfzG","date":"1723760966","viewed":37,"name":"Fluid simulation expe","username":"theott","description":"Fluid simulation.\nPlaying around with the shader from wyatt: https://www.shadertoy.com/view/WtsSz2","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["physics"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Playing around with the shader from wyatt: https://www.shadertoy.com/view/WtsSz2\n\n#define LOOKUP(COORD) texture(iChannel0, (COORD)/iResolution.xy)\n\nvoid mainImage( out vec4 color, in vec2 coord )\n{\n    color = vec4(0);\n    vec4 lookup = LOOKUP(coord);\n    color.z = lookup.x * .5 + .5;\n    color.x = lookup.y * .5 + .5;\n    color.xz *= lookup.w;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define LOOKUP(COORD) texture(iChannel0, (COORD)/iResolution.xy)\n\nvec4 Field (vec2 position) {\n    // Rule 1 : all my energy moves along with me\n    vec2 velocityGuess = LOOKUP(position).xy;\n    vec2 positionGuess = position - velocityGuess;\n    return LOOKUP (positionGuess);\n}\n\nvoid mainImage( out vec4 Energy, in vec2 Me )\n{\n    Energy = Field(Me);\n    \n    // Neighborhood\n    vec2 e1 = vec2(1,0);\n    vec2 e2 = vec2(0,1);\n    float factor = 1.;\n    e1 *= factor;\n    e2 *= factor;\n    vec4 pX = Field(Me + e1);\n    vec4 pY = Field(Me + e2);\n    vec4 nX = Field(Me - e1);\n    vec4 nY = Field(Me - e2);\n    \n    // Rule 2 : disordered energy comes from neighborhood \n    float volatility = 0.9;\n    Energy.z = Energy.z * (1. - volatility) + volatility * (pX.z + pY.z + nX.z + nY.z) / 4.0;\n\n    // Rule 3 : change in volatile Energy  B accross me\n    // will push me in that direction\n    vec2 Force;\n    Force.x = nX.z - pX.z;\n    Force.y = nY.z - pY.z;\n    Energy.xy += Force / 4.0;\n        \n    // Rule 4 : disorder in the order around me enters\n    // me as disorder\n    Energy.z += (nX.x - pX.x + nY.y - pY.y) / 4.0;\n    \n    // Gravity\n    Energy.y -= Energy.w/200.;\n\n     \n    // Mouse input\n    if (iMouse.z > 0. && length(Me - iMouse.xy) < iResolution.x / 20.) {\n        Energy.w = 1.;\n        Energy.xy = vec2(0);\n    }\n    \n    // Energy loss\n    Energy.w *= 0.999;\n\n    \n    // Boundaries\n    if (Me.x < 1. || Me.y < 1. || iResolution.x - Me.x < 1. || iResolution.y - Me.y < 1.){\n        Energy.xy *= 0.0;\n    }\n    \n}","name":"Buffer A","description":"","type":"buffer"}]}