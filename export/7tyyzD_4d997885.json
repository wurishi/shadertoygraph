{"ver":"0.1","info":{"id":"7tyyzD","date":"1661107170","viewed":20,"name":"Random Shapes","username":"kahuna","description":"A simple random shape shader for learning shader toy.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["polygons"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.14159265358979323846264338327950288;\n\nfloat rand(vec2 co)\n{\n    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nfloat polygon( vec2 uv, float r )\n{\n    float n = 3.0 + floor(r * 3.0);\n    vec2 poluv = vec2(atan(uv.y, uv.x), sqrt(uv.x * uv.x + uv.y * uv.y));\n    \n    float x = poluv.x + r * 2.0 * PI + iTime * r;\n    float y = poluv.y * 2.0;\n    \n    float top = sin(((n - 2.0) * PI) / (2.0 * n));\n    float bot = sin(PI - mod(x, (2.0 * PI) / n) - (((n - 2.0) * PI) / (2.0 * n)));\n    \n    return float((top / bot) > y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float divs = 10.0;\n    \n    vec2 uv = (fragCoord - vec2(iResolution.x / 2.0, iResolution.y / 2.0)) / iResolution.yy;\n    \n    float r = rand(floor(uv * divs) / divs);\n    \n    uv.xy = mod(uv.xy * divs, 1.0) - vec2(0.5, 0.5);\n    \n    float p = polygon(uv, r);\n    \n    fragColor = vec4(p * r,p * (1.0 - r),p,1);\n}\n\n\n\n\n","name":"Image","description":"","type":"image"}]}