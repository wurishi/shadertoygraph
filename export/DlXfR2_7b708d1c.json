{"ver":"0.1","info":{"id":"DlXfR2","date":"1693489575","viewed":124,"name":"triangular with orthogonal grid","username":"jt","description":"Experimenting with placing objects in triangular pattern orthogonal to the underlying triangular grid.\nIncrease [b]MAX_RAY_STEPS[/b] to avoid pop-in of distant structures (if shader runs fast enough).\ndefine [b]USE_SHADOWS[/b] to enable shadows.","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["3d","raytracing","grid","terrain","raycasting","triangle","voxel","hexagon","heightmap","slice","rocks","dda","step","columns","hill","basalt"],"hasliked":0,"parentid":"DtScRy","parentname":"Basalt Columns Triangular Hills"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/DlXfR2 triangular with orthogonal grid - written 2023 by jt\n// based on https://www.shadertoy.com/view/DtScRy Basalt Columns Triangular Hills\n// based on https://www.shadertoy.com/view/dtjcDW hexagonal rocks - triangular sea\n// based on https://www.shadertoy.com/view/dlByWW Hexagonally Grouped Triangle DDA\n// and https://www.shadertoy.com/view/DtfXzS Triangle Terrain (via Voxel DDA)\n// abd https://www.shadertoy.com/view/mlfXD7 Triangle DDA via Voxel DDA Slice\n// based on https://www.shadertoy.com/view/mtfXDM Branchless Voxel Raycasting Tex2\n// clean-up of https://www.shadertoy.com/view/7dK3D3 Branchless Voxel Raycasting Tex\n// using voxel DDA of https://www.shadertoy.com/view/4dX3zl Branchless Voxel Raycasting by fb39ca4\n// (with loop optimization by kzy), DDA based on http://lodev.org/cgtutor/raycasting.html\n\n// Experimenting with placing objects in triangular pattern orthogonal to the underlying triangular grid.\n\n// tags: 3d, raytracing, grid, terrain, raycasting, triangle, voxel, hexagon, heightmap, slice, rocks, dda, step, columns, hill, basalt\n\n// The MIT License\n// Copyright (c) 2023 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n#define pi 3.1415926\n\nmat3 yaw_pitch_roll(float yaw, float pitch, float roll)\n{\n    mat3 R = mat3(vec3(cos(yaw), sin(yaw), 0.0), vec3(-sin(yaw), cos(yaw), 0.0), vec3(0.0, 0.0, 1.0));\n    mat3 S = mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, cos(pitch), sin(pitch)), vec3(0.0, -sin(pitch), cos(pitch)));\n    mat3 T = mat3(vec3(cos(roll), 0.0, sin(roll)), vec3(0.0, 1.0, 0.0), vec3(-sin(roll), 0.0, cos(roll)));\n\n    return R * S * T;\n}\n\n#define DIST_MAX 1000.0\n\n#define MAX_RAY_STEPS 128\n\n//#define USE_SHADOWS\n\n// modified https://iquilezles.org/articles/intersectors\nvec2 boxIntersection(vec3 ro, vec3 rd, vec3 s)\n{\n    vec3 m = 1.0 / rd;\n    vec3 n = m * ro;\n    vec3 k = abs(m) * s;\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n    float tN = max(max(t1.x, t1.y), t1.z);\n    float tF = min(min(t2.x, t2.y), t2.z);\n    if(tN > tF || tF < 0.0) return vec2(DIST_MAX);\n    return vec2(tN, tF);\n}\n\nvec3 boxNormal(vec3 e, vec3 p)\n{\n    vec3 d = abs(p) - e;\n    vec3 s = sign(p);\n\n    if (d.z > d.y && d.z > d.x)\n    {\n        return vec3(0, 0, s.z);\n    }\n    else\n    {\n        if (d.y > d.x)\n        {\n            return vec3(0, s.y, 0);\n        }\n        else\n        {\n            return vec3(s.x, 0, 0);\n        }\n    }\n\n    return vec3(0);\n}\n\nvec3 triangle_center(vec3 a, vec3 b, vec3 c)\n{\n    return (a+b+c)/3.0;\n}\n\nvec3 triangle_normal(vec3 a, vec3 b, vec3 c)\n{\n    return normalize(cross(a - b, c - b));\n}\n\nfloat plane_intersection(vec3 pp, vec3 pn, vec3 ro, vec3 rd)\n{\n    return dot(pp - ro,pn)/dot(rd,pn);\n}\n\n// https://www.shadertoy.com/view/DtjyWD integer division - rounding down\nivec3 div_floor(ivec3 a, int b) // vector version thanks to Fabrice\n{\n    ivec3  S = (sign(abs(a*b))-sign(a*b))/2; // 0 if a*b >= 0\n    return S * ((1 - abs(a)) / abs(b) - 1)+(1-S)*(a / b); // emulates ()?:\n}\n\nivec3 hexagonal(ivec3 i) // group triangular coordinates to hexagonal coordinates (jt)\n{\n    return div_floor(i.yzx-i.zxy-1,3);\n}\n\nbool ledge(ivec3 i)\n{\n    i = hexagonal(i);\n    i = i % 6;\n    return i.x*i.x+i.y*i.y+i.z*i.z < 12;\n}\n\nfloat height(ivec3 i)\n{\n    //if((abs(i.x+i.y+i.z)) == 2)\n    //    return -100.0;\n\n    vec3 p = vec3(i);\n    float s = 10.0;\n    //return ledge(i) ? 1.0 : sin(2.0*pi*p.x/s) * sin(2.0*pi*p.y/s) * sin(2.0*pi*p.z/s);\n    return sin(2.0*pi*p.x/s) * sin(2.0*pi*p.y/s) * sin(2.0*pi*p.z/s);\n}\n\nvec4 combine(vec4 a, vec4 b)\n{\n    return a.w < b.w ? a : b;\n}\n\n#define ESSENTIAL_MATRIX\n\n#ifdef ESSENTIAL_MATRIX\n// not needed for essential matrix\n#else\nvec3 project(vec3 v)\n{\n    vec3 n = vec3(1,1,1);\n    return v - dot(v,n)*n/dot(n,n); // remove component along diagonal\n}\n#endif\n\nvec4 triangle_trace(vec3 ray_pos_orig, vec3 ray_dir_orig) // step triangles by stepping through voxels along plane orthogonal to main diagonal (jt)\n{\n#ifdef ESSENTIAL_MATRIX\n    // coordinate-system along plane orthogonal to diagonal (1,1,1)\n    mat2x3 T =\n        mat2x3\n        (\n            vec3(+1.0/sqrt(2.0),-1.0/sqrt(2.0), 0.0),\n            vec3(-1.0/sqrt(6.0),-1.0/sqrt(6.0), 2.0/sqrt(6.0))\n        );\n    // step through voxels along plane orthogonal to main diagonal (1,1,1)\n    vec3 ray_pos = T * ray_pos_orig.xy;\n    vec3 ray_dir = T * ray_dir_orig.xy;\n#else\n    // coordinate-system along plane orthogonal to diagonal (1,1,1)\n    mat3 T =\n        mat3\n        (\n            vec3(+1.0/sqrt(2.0),-1.0/sqrt(2.0), 0.0),\n            vec3(-1.0/sqrt(6.0),-1.0/sqrt(6.0), 2.0/sqrt(6.0)),\n            vec3(-1.0/sqrt(3.0),-1.0/sqrt(3.0),-1.0/sqrt(3.0))\n        );\n    // step through voxels along plane orthogonal to main diagonal (1,1,1)\n    vec3 ray_pos = T * vec3(ray_pos_orig.xy, 0);\n    vec3 ray_dir = T * vec3(ray_dir_orig.xy, 0);\n#endif\n\n    // initialization from https://www.shadertoy.com/view/4dX3zl Branchless Voxel Raycasting by fb39ca4 implementing https://lodev.org/cgtutor/raycasting.html\n    ivec3 tile = ivec3(floor(ray_pos));\n    // decompose ray direction into reciprocal absolute ray direction and sign (-1,+1)\n    vec3 delta_dist = 1.0 / abs(ray_dir); // reciprocal absolute ray direction\n    ivec3 ray_step = ivec3(sign(ray_dir)); // sign of ray direction\n    // initial distances to nearest walls by dimension:\n    //     calculate ray position in relation to tile origin\n    //     (requires adding one half because tile origin is floor of ray position)\n    //     adjust sign according to ray direction\n    //     because tile has size 1 and we start in the middle wall is located at 0.5 (sign depends on ray direction)\n    //     divide by ray direction (to get distance with respect to ray)\n    vec3 side_dist = (sign(ray_dir) * (vec3(tile) - ray_pos) + (sign(ray_dir) * 0.5) + 0.5) * delta_dist;\n    bvec3 nearest = bvec3(0); // component is true if nearest wall in that dimension\n    for (int i = 0; i < MAX_RAY_STEPS; i++)\n    {\n        vec4 content = vec4(-ray_dir_orig, DIST_MAX);\n\n        {\n            float flip = ((tile.x ^ tile.y ^ tile.z) & 1) != 0 ? +1.0 : -1.0;\n#ifdef ESSENTIAL_MATRIX\n            vec3 c = vec3(0,0,0);\n#else\n            vec3 c = vec3(0,0,flip*sqrt(3.0)/6.0+sqrt(3.0)/2.0);\n#endif\n            //vec3 e = vec3(sqrt(3.)/2./*verify*/, 0.05, 0.2);\n            vec3 e = vec3(sqrt(3.)/4., 0.05, 0.2);\n            //vec3 e = vec3(mix(0.2, 0.8, 0.5+0.5*cos(iTime)), 0.05, 0.2);\n\n            for(int j = 0; j < 3; j++)\n            {\n                float phi = radians(30.0+float(j)*60.0);\n                mat3 R = mat3( cos(phi), sin(phi), 0,-sin(phi), cos(phi), 0, 0, 0, 1);\n#ifdef ESSENTIAL_MATRIX\n                vec3 local = ray_pos_orig - vec3(vec3(tile)*T,0) - c;\n#else\n                vec3 local = ray_pos_orig - vec3(tile)*T - c + vec3(0,0,+sqrt(3.0));\n#endif\n                vec2 bounds = boxIntersection(R*local, R*ray_dir_orig, e); // bounding box\n                if(bounds.x >= 0.0 && bounds.x < DIST_MAX)\n                    content = combine(content, vec4(boxNormal(e, (R*local + R*ray_dir_orig * bounds.x))*R, bounds.x));\n            }\n        }\n\n        float h = 3.0 + 10.0 * height(hexagonal(tile));\n\n        bool l = ledge(tile);\n        bool even = abs(tile.x + tile.y + tile.z) == 2;\n        ivec3 tile_x = even ? ivec3(1,0,0) : ivec3(0,1,1);\n        ivec3 tile_y = even ? ivec3(0,1,0) : ivec3(1,0,1);\n        ivec3 tile_z = even ? ivec3(0,0,1) : ivec3(1,1,0);\n#ifdef ESSENTIAL_MATRIX\n        vec3 a = vec3(vec3(tile - tile_x)*T,l?h:height(tile - tile_x));\n        vec3 b = vec3(vec3(tile - tile_y)*T,l?h:height(tile - tile_y));\n        vec3 c = vec3(vec3(tile - tile_z)*T,l?h:height(tile - tile_z));\n#else\n        vec3 a = vec3(tile - tile_x)*T + vec3(0,0,(l?h:height(tile - tile_x))-sqrt(3.0));\n        vec3 b = vec3(tile - tile_y)*T + vec3(0,0,(l?h:height(tile - tile_y))-sqrt(3.0));\n        vec3 c = vec3(tile - tile_z)*T + vec3(0,0,(l?h:height(tile - tile_z))-sqrt(3.0));\n#endif\n        vec3 n = triangle_normal(a,b,c);\n        vec3 m = triangle_center(a,b,c);\n\n        float tmin = length(vec3(nearest) * (side_dist - delta_dist)); // assume ray_dir normalized\n\n        {\n            vec3 dst = ray_pos_orig + ray_dir_orig * tmin;\n            // prism wall?\n            //if(dst.z < height(map_pos_next))\n            if(dot(dst-m,n)<0.0)\n            {\n#ifdef ESSENTIAL_MATRIX\n                // Calculate the normal-vector directly from the mask\n                return vec4(normalize(vec3((vec3(nearest)*vec3(-ray_step))*T,0)), tmin);\n#else\n                // Calculate the normal-vector directly from the mask\n                return vec4(inverse(T)*normalize(project((vec3(nearest)*vec3(-ray_step)))), tmin);\n#endif\n            }\n        }\n\n        // core from https://www.shadertoy.com/view/4dX3zl Branchless Voxel Raycasting by fb39ca4 implementing https://lodev.org/cgtutor/raycasting.html\n        nearest = lessThanEqual(side_dist.xyz, min(side_dist.yzx, side_dist.zxy)); // component is true if nearest wall in that dimension\n        side_dist += vec3(nearest) * delta_dist; // update distances to nearest walls by dimension\n        tile += ivec3(vec3(nearest)) * ray_step; // step to next tile in direction of nearest wall\n        float tmax = length(vec3(nearest) * (side_dist - delta_dist)); // calculate distance to intersection point assuming ray_dir normalized\n/*\n        {\n            float dx = plane_intersection(m, vec3(1,0,0), ray_pos_orig, ray_dir_orig);\n            float dy = plane_intersection(m, vec3(0,1,0), ray_pos_orig, ray_dir_orig);\n            float dz = plane_intersection(m, vec3(0,0,1), ray_pos_orig, ray_dir_orig);\n            if((ray_pos_orig + ray_dir_orig * tmax).z > 3.0) dx = DIST_MAX;\n            if((ray_pos_orig + ray_dir_orig *tmax).z > 3.0) dy = DIST_MAX;\n            if((ray_pos_orig + ray_dir_orig * tmax).z > 3.0) dz = DIST_MAX;\n            if(dx < tmin || dx >= tmax) dx = DIST_MAX;\n            if(dy < tmin || dy >= tmax) dy = DIST_MAX;\n            if(dz < tmin || dz >= tmax) dz = DIST_MAX;\n            if(dx < dy && dx < dz) return vec4(vec3(1,0,0),dx);\n            if(dy < dx && dy < dz) return vec4(vec3(0,1,0),dy);\n            if(dz < dx && dz < dy) return vec4(vec3(0,0,1),dz);\n            if(dx < dy && dx < dz) vec4(vec3(+sqrt(3.0)/2.0,-0.5,0),dx);\n            if(dy < dx && dy < dz) vec4(vec3(-sqrt(3.0)/2.0,-0.5,0),dy);\n            if(dz < dx && dz < dy) vec4(vec3(0,1,0),dz);\n        }\n*/\n        /*\n        {\n            float d = (height(map_pos)-ray_pos_orig.z)/ray_dir_orig.z;\n            if(d >= max(0.0, tmin) && d <= tmax) return vec4(vec3(0,0,1),d); // hit plane\n        }\n        */\n\n        {\n            float d = plane_intersection(m, n, ray_pos_orig, ray_dir_orig);\n            if(d >= max(0.0, tmin) && d <= tmax) content = combine(content, vec4(n,d)); // hit plane\n        }\n\n        if(content.w < tmax)\n            return content;\n    }\n\n    return vec4(-ray_dir_orig, DIST_MAX); // sky-sphere\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 I )\n{\n    bool demo = all(lessThan(iMouse.xy, vec2(10.0)));\n    vec2 R = iResolution.xy;\n    //I = 2.0 * I.xy / R - 1.0;\n    //I.x *= R.x / R.y;\n    I = (2.0 * I - R) / R.y; // concise pixel-position mapping thanks to Fabrice\n    float yaw = 2.0 * pi * float(iMouse.x) / float(R.x);\n    float pitch = pi - pi / 2.0 * float(iMouse.y) / float(R.y);\n    yaw = !demo ? yaw : 2.0 * pi * fract(iTime * 0.01);\n    pitch = !demo ? pitch : 1.25 * pi/2.0;\n\n    vec3 ray_pos = vec3(0.0, 0.0, -24.0);\n    vec3 ray_dir = vec3(I.x, I.y, 2.0); // NOTE: un-normalized direction appears to work fine here!\n    ray_dir = normalize(ray_dir);\n\n    mat3 M = yaw_pitch_roll(yaw, pitch, 0.0);\n    ray_pos = M * ray_pos;\n    ray_dir = M * ray_dir;\n    ray_pos.z += 0.5 - sqrt(3.0);\n\n    vec3 skycolor = mix(vec3(0,0.5,0.5),vec3(0,0,1),abs(ray_dir.z));\n    vec3 color = skycolor;\n    vec4 result = triangle_trace(ray_pos, ray_dir);\n    if(result.w < DIST_MAX)\n    {\n        result.xyz *= dot(result.xyz, ray_dir) < 0.0 ? +1.0 : -1.0; // repair front-back\n        color = vec3(1);\n        if(false)\n        {\n            vec3 light_dir = normalize(vec3(1,2,3));\n            //vec3 light_dir = normalize(vec3(cos(iTime),sin(iTime),1));\n            float diffuse = max(0.0, dot(result.xyz, light_dir));\n            color *= diffuse;\n        }\n        else\n        {\n            vec3 dst = ray_pos + ray_dir * result.w;\n            //vec3 light_pos = vec3(0,0,2);\n            vec3 light_pos = vec3(10.0*vec2(cos(iTime/5.0),sin(iTime/5.0)),15);\n            vec3 light_diff = light_pos - dst;\n            float light_dist = length(light_diff);\n            vec3 light_dir = light_diff / light_dist;\n#ifdef USE_SHADOWS\n            bool shadow = triangle_trace(dst+result.xyz*0.001, light_dir).w < DIST_MAX;\n#else\n            bool shadow = false;\n#endif\n            vec3 light_color = vec3(1) * 100.0;\n            vec3 diffuse = shadow ? vec3(0) : light_color * max(0.0, dot(result.xyz, light_dir)) / (light_dist * light_dist);\n            float ambient = 0.01;\n            color *= mix(vec3(0.5),vec3(0.2,1.0,0.1),abs(result.z));\n            //color *= (0.5 + 0.5 * result.xyz); // visualize normals\n            color *= (diffuse + ambient); // apply light\n            //color = vec3(fract(result.w));\n        }\n    }\n\n    color = mix(skycolor, color, exp(-pow(result.w/50.0, 2.0))); // distance fog\n\n    color = tanh(color); // soft-clamp overly bright colors\n    fragColor = vec4(sqrt(color), 1.0); // gamma\n}\n","name":"Image","description":"","type":"image"}]}