{"ver":"0.1","info":{"id":"Nlj3Wy","date":"1624631049","viewed":353,"name":"Mini planet (SDF sphere)","username":"omegasbk","description":"Simple SDF example showing how to morph the distance function using a texture as a heightmap.","likes":11,"published":1,"flags":0,"usePreview":1,"tags":["sdf","sphere"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Made by Darko Supe (omegasbk)\n// Playing with SDF to show how parallax effects can be achieved \n// with ray marching.\n// 25.6.2021.\n\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .005\n\n#define PI 3.14159265359\n\nconst vec3 lightPosition = vec3(0, 3, 6);\nconst vec3 lightColor    = vec3(0.1, 0.2, 0.2) * 2.;\n\nvec2 getSphereCoords(in vec3 normal)\n{\n    vec2 coords = vec2((atan(normal.z, normal.x) / PI + 0.5) / 2.,\n                       (asin(normal.y) / PI + 0.5));  \n                \n    return coords;  \n}\n\nfloat getDepth(in vec3 normal)\n{                              \n    vec2 depthCoords = getSphereCoords(normal);\n    //depthCoords.x = clamp(depthCoords.x, 0.1, 0.9);\n    return texture(iChannel1, fract(depthCoords)).r / 10.;   \n}\n\nfloat getDist(in vec3 p) \n{\n    float time = iTime * 3.;\n\n    vec4 s = vec4(0, 0, 0, 1.);\n   \n    vec3 normal = normalize(p - vec3(0, 0, 0));\n    s.w += getDepth(normal);         \n    \n    float sphereDist = length(p - s.xyz) - s.w;    \n    return sphereDist;\n}\n\nvec3 getNormal(in vec3 p) \n{\n    float d = getDist(p);\n    \n    vec2 e = vec2(.01, 0); \n    \n    vec3 n = d - vec3(\n        getDist(p - e.xyy), \n        getDist(p - e.yxy), \n        getDist(p - e.yyx));\n        \n    return normalize(n);\n}\n\nfloat rayMarch(in vec3 ro, in vec3 rd)\n{\n    float dO = 0.;\n    \n    for (int i = 0; i < MAX_STEPS; i++)\n    {\n        vec3 p = ro + rd * dO;\n\n        float dS = getDist(p);\n        dO += dS;\n        \n        if (dO > MAX_DIST || dS < SURF_DIST) \n            break;\n    }\n    \n    return dO;\n}\n\nvec3 getLight(in vec3 p, in vec3 rd)\n{    \n\tvec3 normal = getNormal(p);\n    vec3 lightDir = normalize(p - lightPosition);\n    \n    float cosa = pow(0.5+0.5*dot(normal, -lightDir), 3.0);\n    float cosr = max(dot(-rd, reflect(lightDir, normal)), 0.0);\n    \n    vec3 ambiant = vec3(0.02);\n    vec3 diffuse = vec3(0.7 * cosa);\n    vec3 phong = vec3(0.3 * pow(cosr, 16.0));\n    \n    return lightColor * (ambiant + diffuse + phong);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    float time = iTime * 3.;\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0);\n\n    vec3 ro = vec3(0., 0., 0.);\n    \n    // Camera movement\n    float focalLength = 4.;\n        \n    float rotation = iTime;\n    \n    // Uncomment this to rotate with your mouse\n    //float rotation = iMouse.x / 100.;    \n    \n    ro = vec3(cos(rotation), 0., sin(rotation)) * focalLength;\n    vec3 rd = normalize(vec3(0.) - ro);\n    vec3 right = normalize(cross(rd, vec3(0., 1., 0.)));\n    vec3 up = cross(right, rd);\n   \trd =  normalize(uv.x * right + uv.y * up + rd);\n        \n    int body;\n    float d = rayMarch(ro, rd);\n    if (d < MAX_DIST)\n    {\n        vec3 p = ro + rd * d;        \n        \n        vec3 n = getNormal(p);\n        col = vec3(getLight(p, rd)) * vec3(0.6, 0.7, 0.7) * 3.;        \n    }\n\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}