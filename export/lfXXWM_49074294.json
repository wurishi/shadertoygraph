{"ver":"0.1","info":{"id":"lfXXWM","date":"1705326719","viewed":72,"name":"Transition - burning","username":"MV10","description":"One of several interesting transitions/fades I'm revising for parameterization in my audio visualizer program. \nRestart to see it again (stops after time exceeds target duration). Randomization in buffer D needs some work...","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["transition","crossfade"],"hasliked":0,"parentid":"clKBzh","parentname":"Burning Effect"},"renderpass":[{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define oldBuffer iChannel1\n#define newBuffer iChannel0\nfloat fadeDuration = 3.0;\nfloat fadeLevel;\nfloat randomrun;\n\n// original was 100\n#define tint (50.0 + 50.0 * randomrun)\n\nfloat random(vec2 st) \n{\n    return fract(sin(dot(st, vec2(94.23, 48.127)) + 14.23) * 1124.23 * randomrun);\n}\n\nfloat noise(vec2 st) \n{\n    vec2 ip = floor(st);\n    vec2 fp = fract(st);\n    float a = random(ip);\n    float b = random(ip + vec2(1.0, 0.0));\n    float c = random(ip + vec2(0.0, 1.0));\n    float d = random(ip + vec2(1.0, 1.0));\n    vec2 u = smoothstep(0.0, 1.0, fp);\n    return mix(mix(a, b, u.x),mix(c, d, u.x), u.y);\n}\n\nfloat fractalNoise(vec2 uv) \n{\n    uv *= 30.0;\n    float amp = 0.6;\n    float n = 0.0;\n    for (int i = 0; i < 6; i++)\n    {\n        n += noise(uv) * amp;\n        uv *= 2.0;\n        amp *= 0.5;\n    }\n    return n;\n}\n\nfloat displace(vec2 uv) \n{\n    uv = mix(uv, vec2(fractalNoise(uv)), 0.08);\n    float d = fadeLevel * 1.6; // -0.1 + mod(iTime * 0.1, 1.5);\n    vec2 d1 = vec2(0.5, 0.5) + noise(uv * 3.0) - 0.5;\n    return smoothstep(d, d + 0.08, distance(uv, d1));\n}\n\nvec3 burn(vec3 col, vec2 uv) \n{\n    float a = displace(uv);\n    vec3 b = (1.0 - a) * vec3(1.0, 0.14, 0.016) * a * tint;\n    return col * a + b;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // These are uniforms in my real program\n    fadeLevel = clamp(iTime / fadeDuration, 0.0, 1.0);\n    if(fadeLevel >= 1.0) discard;\n\n    randomrun = max(0.1, texture(iChannel3, vec2(1)).x);\n\n    vec2 uv= fragCoord / iResolution.xy;\n    \n    vec3 rgb = texture(oldBuffer, uv).rgb;\n    vec2 st = uv * vec2(iResolution.x / iResolution.y, 1.0);\n    rgb = burn(rgb, st);\n    \n    // if-test is cheesy, but it works\n    fragColor = (rgb == vec3(0))\n        ? texture(newBuffer, uv)\n        : vec4(rgb, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"XdfGR8","channel":0}],"code":"\n// This part doesn't work, not really sure why -- I was trying to get a\n// different random number per execution by using this RNG against an\n// iDate-based seed on frame 0 ... but it's always the same. If I manually\n// force some number into fragColor.x it'll work, so something is off about\n// the \"randomization\" apparently.\n//\n// Not super-important to me. Maybe something to fix some future rainy day.\n// My real program doesn't use this, but I figured it was decently similar\n// to the \"randomrun\" uniform that my program does generate every time the\n// transition shader is loaded up and executed.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if(iFrame > 0) discard;\n    \n    fragColor = vec4(0);\n    if(fragCoord.y > 1.5 || fragCoord.x > 1.5) return;\n    \n    // Mixing iDate should be random enough for a simple demo\n    uint seed = uint(iDate.x) + uint(iDate.y) + uint(iDate.z) + uint(iDate.w) + 1u;\n\n    // https://gist.github.com/keijiro/24f9d505fac238c9a2982c0d6911d8e3\n    seed ^= 2747636419u;\n    seed *= 2654435769u;\n    seed ^= seed >> 16;\n    seed *= 2654435769u;\n    seed ^= seed >> 16;\n    seed *= 2654435769u;\n    float random = float(seed) / 4294967295.0;\n\n    fragColor.x = random;\n}","name":"Buffer D","description":"","type":"buffer"}]}