{"ver":"0.1","info":{"id":"4tVyDK","date":"1537806958","viewed":4311,"name":"Floating Point Grid","username":"DMGregory","description":"Visualizing the rounding error in a 2D floating point vector as it moves away from the origin.\nGrid lines = x & y values for a float with a 4-bit mantissa\nBlue dot = desired vector\nBlack dot = closest representable point","likes":26,"published":1,"flags":0,"usePreview":0,"tags":["math","diagram","floatingpoint"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int mantissaBits = 4;\n\nfloat toDot(vec2 uv) {\n   return clamp(50000.0 * (dot(uv, uv) - 0.0001), 0.0, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    \n    vec2 uv = (fragCoord - iResolution.xy * 0.5)/min(iResolution.x, iResolution.y);\n    vec2 truePoint = (exp(0.7 * fract(iTime/20.0)) - 1.0) * vec2(1.0, 0.7)* 10.0;\n    \n    vec2 shadePoint = uv + truePoint;\n    \n    vec2 exponent = log2(abs(shadePoint));\n    vec2 band = floor(exponent);\n    \n    vec2 delta = 0.5 - abs(exponent - band - 0.5);\n    vec2 speed = vec2(dFdx(exponent.x), dFdy(exponent.y));\n    \n    delta = abs(delta/speed);       \n    \n    \n    fragColor = vec4(clamp(min(delta.x, delta.y) - 0.5, 0.0, 1.0) * vec3(1,1,1),1);\n    \n    vec2 bandDenom = pow(vec2(2,2), vec2(mantissaBits, mantissaBits) - band);\n    \n    vec2 prec = shadePoint*bandDenom;\n    \n    delta = 0.5 - abs(fract(prec) - 0.5);\n    speed = vec2(dFdx(prec.x), dFdy(prec.y));\n    \n    delta = clamp(abs(delta/speed) - 0.25, vec2(0,0), vec2(1,1));\n    \n    fragColor.gb *= delta.x;\n    \n    fragColor.rb *= delta.y;\n    fragColor.g *= mix(delta.y, 1.0, 0.9);\n    \n    fragColor.rg *= toDot(uv);\n    \n    vec2 rounded = round(truePoint * bandDenom)/bandDenom;\n    \n    fragColor.rgb *= toDot(shadePoint - rounded);\n    \n}","name":"Image","description":"","type":"image"}]}