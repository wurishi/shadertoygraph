{"ver":"0.1","info":{"id":"WsXSD4","date":"1551235777","viewed":265,"name":"Midi Spiral","username":"cbrpnk","description":"Everyday.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 rot(float a)\n{\n    float c = cos(a);\n    float s = sin(a);\n    return mat2(c, s, -s, c);\n}\n\nfloat sdfBox(vec3 p, vec3 d)\n{\n    p = abs(p) - d;\n    return max(max(p.x, p.y), p.z);\n}\n\nfloat sdfCyl(vec3 p, float r, float l)\n{\n    return length(p-vec3(0., clamp(p.y, -l, l), 0.)) - r;\n}\n\nfloat sdfTorus(vec3 p, float r, float w)\n{\n    return sqrt(pow(length(p.xz)-r, 2.) + pow(p.y, 2.)) - w;\n}\n\nvec2 merge(vec2 a, vec2 b)\n{\n    return a.x < b.x ? a : b;\n}\n\nvec2 map(vec3 p)\n{\n    //p.xz *= rot(sin(iTime));\n    //p.yz *= rot(iTime);\n    //p.z -= iTime;\n    //p.y += sin(iTime*.25)*.1;\n    //p.xy *= rot(iTime*.02);\n    p.xy *= rot(p.z*.02*sin(iTime));\n    p = mod(p+vec3(5.), 10.)-vec3(5.);\n    \n    \n    \n    \n    vec3 wkp = p;\n    wkp.x += .1;\n    wkp.x = mod(wkp.x+.21, .41)-.21;\n    float wkeys = max(max(sdfBox(wkp, vec3(.2, .15, .85)), -sdfBox(wkp-vec3(0., -.05, 1.), vec3(.25, .15, .5))), sdfBox(p-vec3(0.25, 0., 0.), vec3(3.)));\n    \n    vec3 bkp = p;\n    bkp.yz *= rot(-.09);\n    bkp.x -= -.2;\n    bkp.x = mod(bkp.x-.16, .41)+.16;\n    \n    float bkeys = sdfBox(bkp-vec3(.3, .2, -.2), vec3(.1, .1, .6));\n    vec3 bhp = p;\n    bhp.x -= 1.;\n    bhp.x = mod(bhp.x-.16, 2.9)+.16;\n    float bholes = sdfBox(bhp-vec3(.3, .2, -.2), vec3(.17, .17, .65));\n    bhp = p;\n    bhp.x -= 2.7;\n    bhp.x = mod(bhp.x-.16, 2.9)+.16;\n    float bholes2 = sdfBox(bhp-vec3(.3, .2, -.2), vec3(.17, .17, .65));\n    bkeys = max(max(max(bkeys, -bholes), -bholes2), sdfBox(p-vec3(0.25, 0., 0.), vec3(3.)));\n    //float keys = min(wkeys, bkeys)*.5, sdfBox(p-vec3(0.25, 0., 0.), vec3(3.)));\n    \n    // Body\n    float body = max(sdfBox(p-vec3(0.25, -.1, -.9), vec3(3.1, .25, 1.75)), -sdfBox(p-vec3(.25, 0., 0.), vec3(3., .25, .9)));\n    \n    // Pads\n    vec3 pp = p;\n    pp.xz -= vec2(.6, -.1);\n    pp.xz = mod(pp.xz+vec2(.15), .73)-vec2(.15);\n    float pads = max(sdfBox(pp-vec3(0., .11, 0.), vec3(.45, .08, .45)), sdfBox(p-vec3(-.3, 0., -1.8), vec3(1.4, 1., .7)));\n    \n    // Knobs\n    vec3 kp = p;\n    kp.xz = mod(pp.xz+vec2(.2), .4)-vec2(.2);\n    float knobs = max(max(max(sdfCyl(kp-vec3(0., 0.2, 0.), .2, .1), sdfBox(p-vec3(2.3, 0., -2.1), vec3(.75, 1., .35))), -sdfTorus(kp-vec3(0., .3, 0.), .35, .25)), +(p.y-.3));\n    \n    return merge(merge(merge(merge(vec2(wkeys, 0.), vec2(bkeys, 1.)), vec2(body, 2.)), vec2(pads, 0.)), vec2(knobs, 1.));\n}\n\nvec2 march(vec3 ro, vec3 rd)\n{\n    vec2 t = vec2(0.);\n    for(int i=0; i<228; ++i) {\n    \tvec2 d = map(ro+rd*t.x);\n        if(d.x < .0001) break;\n        t.x += d.x;\n        t.y = d.y;\n    }\n    return t;\n}\n\nvec3 getNormal(vec3 p)\n{\n    vec2 eps = vec2(.0001, 0.);\n    return normalize(vec3(\n    \tmap(p+eps.xyy).x - map(p-eps.xyy).x,\n        map(p+eps.yxy).x - map(p-eps.yxy).x,\n        map(p+eps.yyx).x - map(p-eps.yyx).x\n    ));\n}\n\nfloat getAo(vec3 p, vec3 normal)\n{\n    float t = 0.;\n    p += normal*.002;\n    for(int i=0; i<228; ++i) {\n    \tvec2 d = map(p+normal*t);\n        if(d.x < .001) break;\n        t += d.x;\n    }\n    return clamp(t, 0., 1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord*2.-iResolution.xy)/iResolution.y;\n\n    vec3 cam = vec3(2., 1.5, 2);\n    vec3 dir = normalize(vec3(uv, -1));\n    dir.yz *= rot(.3);\n    dir.xz *= rot(.3);\n    vec2 res = march(cam, dir);\n    vec3 col = vec3(.05, .2, .1);\n    \n    if(res.x < 100.) {\n        vec3 p = cam+dir*res.x;\n    \tvec3 normal = getNormal(p);\n        float ao = getAo(p, normal);\n        float light1 =  max(0., dot(normal, normalize(vec3(1.))));\n        float light2 =  max(0., dot(normal, normalize(vec3(-1., 1., 1.))));\n        float fresnel = pow(1.-max(0., dot(normal, -dir)), 10.);\n        \n        if(res.y == 0.) {\n            // While Keys\n    \t\tcol = vec3(.5) * light1;\n            col += vec3(.5, .5, .45) * light2;\n            //col += fresnel;\n        } else if(res.y == 1.) {\n            // Black keys\n        \tcol = vec3(.01) * light1;\n            col += vec3(.01) * light2;\n            col += vec3(1.) * fresnel;\n        } else if(res.y == 2.) {\n            // Body\n        \tcol = vec3(.01) * light1;\n            col += vec3(.01) * light2;\n        }\n        col = mix(col, vec3(.1, .3, .09), clamp(sqrt(res.x/100.), 0., 1.));\n    }\n    col = pow(col, vec3(1.5, 1., .5));\n\n    // Output to screen\n    fragColor = vec4(pow(col, vec3(1./2.2)),1.0);\n}","name":"Image","description":"","type":"image"}]}