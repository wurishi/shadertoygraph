{"ver":"0.1","info":{"id":"MfKczV","date":"1732125150","viewed":50,"name":"painterly circles from textures","username":"ademdj12","description":"Creates a painterly effect by sampling texture colors and drawing circular brushstrokes with soft edges.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["noise","effects"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* \n    paste in console:\n    gShaderToy.SetTexture(0, {mSrc:'https://png.pngtree.com/png-clipart/20220125/ourmid/pngtree-ink-brush-strokes-png-image_4365596.png', mType:'texture', mID:1, mSampler:{ filter: 'mipmap', wrap: 'repeat', vflip:'true', srgb:'false', internal:'byte' }});\n*/\n#define PI 3.14159265359\n\nfloat sin01(float angle){\n    return (1.+sin(angle))/2.;\n}\n\nvec4 pointSpace(vec2 pos, float time){\n\n    vec2 ownerQuadPos = (floor(pos / QuadSize))* QuadSize;\n    \n    vec2 offset1 = hash22(ownerQuadPos);\n    vec2 offset2 = hash22(ownerQuadPos+vec2(QuadSize)/2.);\n\n    \n    vec2 owenerGlobalPointPos1 = offset1 + ownerQuadPos + hash22(ownerQuadPos) * QuadSize;\n    vec2 owenerGlobalPointPos2 = offset2 + ownerQuadPos + hash22(ownerQuadPos+vec2(QuadSize)/2.) * QuadSize;\n\n    vec2 closestPt1 = owenerGlobalPointPos1;\n    vec2 closestPt2 = owenerGlobalPointPos2;\n\n    float closestDi1 = distance(closestPt1,pos);\n    float closestDi2 = distance(closestPt2,pos);\n\n    for(int i = 0;i<9;i++){\n        \n        if(i == 4) continue;\n        vec2 offsetCord = vec2( (i % 3) - 1 , floor(float(i)/3.) - 1. );\n        vec2 currentQuadPos = (offsetCord + floor(pos / QuadSize))* QuadSize;\n        \n        vec2 globalOffset1 = hash22(ownerQuadPos);\n        vec2 globalOffset2 = hash22(ownerQuadPos+vec2(QuadSize)/2.);\n\n        vec2 globalPointPos1 = globalOffset1 + currentQuadPos + hash22(currentQuadPos) * QuadSize;\n        vec2 globalPointPos2 = globalOffset2 + currentQuadPos + hash22(currentQuadPos+vec2(QuadSize)/2.) * QuadSize;\n        \n        float td1 = distance(globalPointPos1, pos);\n        float td2 = distance(globalPointPos2, pos);\n\n        if(td1 < closestDi1){\n            closestPt1 = globalPointPos1;\n            closestDi1 = td1;\n        }\n         if(td2 < closestDi2){\n            closestPt2 = globalPointPos2;\n            closestDi2 = td2;\n        }\n        \n    }\n    float pth = sqrt(4.5*QuadSize*QuadSize);\n    vec2 uvv = vec2(closestDi2,closestDi1)/QuadSize;\n    //uvv = normalize(uvv);\n    return vec4(uvv.y,uvv.x,0.,1.) ;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec4 newColor = pointSpace(fragCoord+vec2(100.,0.)*iTime,iTime);\n    \n    //fragColor = vec4(length(newColor.xy)); // crystal shapes\n    fragColor = texture(iChannel0,newColor.xy);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define QuadSize 100.\n\nvec2 rotate(vec2 center, vec2 p, float rot ){\n    float cos_a = p.x / distance(center,p);\n    float sin_a = p.y / distance(center,p);\n    \n    float cos_a_rot = cos_a*cos(rot) - sin_a*sin(rot);\n    float sin_a_rot = sin_a*cos(rot) + cos_a*sin(rot);\n    \n    return vec2(\n        cos_a_rot * distance(center,p) + center.x,\n        sin_a_rot * distance(center,p) + center.y\n    );\n\n}\n\nfloat line_segment(in vec2 p, in vec2 a, in vec2 b) {\n\tvec2 ba = b - a;\n\tvec2 pa = p - a;\n\tfloat h = clamp(dot(pa, ba) / dot(ba, ba), 0., 1.);\n\treturn length(pa - h * ba);\n}\n\n\n\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract((vec3(p.xyx)) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\n\n","name":"Common","description":"","type":"common"}]}