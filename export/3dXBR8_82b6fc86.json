{"ver":"0.1","info":{"id":"3dXBR8","date":"1587641632","viewed":92,"name":"Quick Sky","username":"supereggbert","description":"just a quick sky","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["sky"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//\tSimplex 3D Noise \n//\tby Ian McEwan, Ashima Arts\n//\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\n\nfloat snoise(vec3 v){ \n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //  x0 = x0 - 0. + 0.0 * C \n  vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n  vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n  vec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n// Permutations\n  i = mod(i, 289.0 ); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients\n// ( N*N points uniformly over a square, mapped onto an octahedron.)\n  float n_ = 1.0/7.0; // N=7\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z *ns.z);  //  mod(p,N*N)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n}\n\nvec3 skyColor( vec3 cameraRay, vec3 sunDirection, bool nosun ){\n    vec3 skyColor = vec3( 1.0, 1.2, 1.7 );\n    \n    float sunHeight = (sunDirection.y + 1.0 ) * 0.5;\n    float hozHeight = clamp(smoothstep(-0.2,1.0,sunHeight),0.0,1.0);\n    \n    float hozHeightAbs = clamp(smoothstep(0.2,1.0,sunHeight), 0.0,1.0)+0.01;\n    float eyeHeight = clamp(( cameraRay.y + 0.1 ),0.0,1.0 ) ;\n    \n    vec3 sunColor = mix( vec3(1.2,0.0,0.0), vec3(0.95,0.95,0.7), hozHeightAbs );\n    \n    float sunDot = pow( ( dot( cameraRay, sunDirection ) + 1.0 ) * 0.5, 2000.0*pow(eyeHeight,2.0)+1.0);\n    \n    vec3 sunGlow = sunColor * sunDot * hozHeightAbs;\n    \n    vec3 skyGlow = skyColor * hozHeightAbs;\n    \n    float stars = clamp(smoothstep(0.8,1.0,snoise(cameraRay*100.0)),0.0,1.0)*0.3 * clamp(smoothstep(0.1,0.5,cameraRay.y),0.0,1.0) * clamp(smoothstep(0.1,-0.1,sunDirection.y),0.0,1.0);\n    \n    float ground = pow(1.0-clamp(-cameraRay.y,0.0,1.0),20.0);\n    \n    \n    float fog = pow( 1.0 - abs(cameraRay.y), 2.0 )*(hozHeight+0.2);\n     \n    vec3 col = skyGlow*0.4 + sunGlow*0.9 + stars + fog*sunColor*0.1*hozHeight;\n    \n    vec3 groundColor = vec3(0.09,0.1,0.08) * clamp( sunDirection.y, 0.0,1.0 ) * sunColor * 2.0;\n \n    if(cameraRay.y<0.0){\n    \tcol= mix(groundColor, col, ground); \n    }\n    \n    if(!nosun){\n        float sun = clamp(smoothstep(0.9995,0.9996,dot( cameraRay, sunDirection )),0.0,1.0) * clamp(smoothstep(0.0,0.1,cameraRay.y),0.0,1.0)*0.3;\n        col+=sun*sunColor;\n    }\n    \n    return col;\n}\n\nfloat cloudValue( vec3 cloudCoord ){\n    float time = iTime * 0.1;\n    cloudCoord.z+=time;\n\tfloat cloud = snoise(cloudCoord)*0.55+snoise(cloudCoord*2.0+time*0.3)*0.2+snoise(cloudCoord*4.0+time*0.2)*0.2+snoise(cloudCoord*8.0+time*0.5)*0.05+snoise(cloudCoord*16.0)*0.05;\n    cloud = ( cloud + 1.0 ) * 0.5;\n    return cloud;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord/iResolution.xy - 0.5 ) * 2.0;\n    \n    vec2 mouse = 1.0-( iMouse.xy/iResolution.xy - 0.5 ) * 2.0;\n    \n    float aspect = iResolution.x/iResolution.y;\n    \n    uv.x*=aspect;\n    \n    vec3 sunDirection = normalize( vec3( 0.0,sin(iTime*0.2)*1.0,1.0) );\n    \n    vec3 cameraRay = normalize( vec3(uv, 2.0) );\n    \n    mat2 rotx = mat2( cos( mouse.y * 3.14159 ),-sin( mouse.y * 3.14159 ),sin( mouse.y * 3.14159 ),cos( mouse.y * 3.14159 ) );\n    cameraRay.yz = rotx * cameraRay.yz;\n    \n    mat2 roty = mat2( cos( mouse.x * 3.14159 ),-sin( mouse.x * 3.14159 ),sin( mouse.x * 3.14159 ),cos( mouse.x * 3.14159 ) );\n    cameraRay.xz = roty * cameraRay.xz;\n    \n        \n        \n    vec3 col = skyColor( cameraRay, sunDirection, false );\n    \n    vec3 cloudCoord = cameraRay / (cameraRay.y + 0.2 ) * 0.5;\n    \n    float cloud = cloudValue( cloudCoord );\n    \n    vec3 normal = vec3( cloudValue(cloudCoord + vec3(0.1,0.0,0.0)), cloudValue(cloudCoord + vec3(0.0,0.1,0.0)), cloudValue(cloudCoord + vec3(0.0,0.0,0.1))  );\n    normal -= cloud;\n    normalize(normal);\n    normal.y = abs(normal.y);\n                       \n    \n    vec3 cloudColor = vec3(cloud);\n    \n    float cloudCover = 0.2;\n    \n    if( cameraRay.y > 0.0 ){\n        cloud = clamp(cloud-pow(1.0-abs(cameraRay.y),50.0)*0.5,0.0,1.0);\n        vec3 sunColor = skyColor( sunDirection, sunDirection, true );\n        float sunLighting = pow( dot( -normal, sunDirection ) + 1.0, 3.0 );\n        float cloudLuma = pow( clamp(sunDirection.y,0.0,1.0),0.8);\n        vec3 cloudColor = sunLighting * sunColor * cloudLuma;\n        float cloudmix = clamp(smoothstep((0.8 - cloudCover*2.0),1.0,cloud),0.0,1.0);\n        col = mix(col, cloudColor,pow(cloudmix,(0.8 - cloudCover) * 2.0));\n\n    }\n    \n    col = pow(col,vec3(0.5));\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}