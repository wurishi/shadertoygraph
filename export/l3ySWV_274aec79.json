{"ver":"0.1","info":{"id":"l3ySWV","date":"1720492452","viewed":38,"name":"noise/sin displacement","username":"sam_hains","description":"noise displacement","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["noise","displacement"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float hash(float n) { return fract(sin(n) * 1e4); }\nfloat noise(float x) {\n    float i = floor(x);\n    float f = fract(x);\n    return mix(hash(i), hash(i + 1.0), smoothstep(0.,1.,f));\n}\n\nfloat flattened_sin(float x, float k) {\n    return atan(sin(x) * k) / atan(k);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Generate noise for horizontal displacement\n    float noiseValue = noise(uv.y * 120.0 + iTime * 0.5) * 2.0 - 1.0;\n    \n     // Parameters for the sine wave\n    float frequency = 25.0;  // Number of waves vertically\n    float amplitude = 12.2; // Intensity of the displacement\n    float speed = 1.0;      // Speed of the animation\n    float displacementAmount = 0.005;\n    float flatness = 5.0;  // Controls how square-like the wave is\n\n\n    \n    // Generate sine wave displacement\n    //float displacement = sin(uv.y * frequency * 6.28318 + iTime * speed) * amplitude;\n    //float displacement = sin(uv.y * frequency * 6.28318 + iTime * speed) * amplitude\n    //               + sin(uv.y * frequency * 2.0 * 6.28318 + iTime * speed * 1.5) * amplitude * 0.5;\n    \n    float x = uv.y * frequency * 6.28318 + iTime * speed;\n\n    float displacement = flattened_sin(x, flatness) * amplitude;\n\n    //float displacement = cos(uv.y * frequency * 6.28318 + iTime * speed) * amplitude;\n    // Apply horizontal displacement\n    vec2 displacedUV = vec2(uv.x + displacement*displacementAmount, uv.y);\n    \n    \n    \n    // Apply horizontal displacement\n    // Adjust this value to control the intensity\n    //vec2 displacedUV = vec2(uv.x + noiseValue * displacementAmount, uv.y);\n    \n    // Sample the texture with displaced coordinates\n    vec4 texColor = texture(iChannel0, displacedUV);\n    \n    // Output final color\n    fragColor = texColor;\n}","name":"Image","description":"","type":"image"}]}