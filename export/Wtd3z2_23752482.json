{"ver":"0.1","info":{"id":"Wtd3z2","date":"1577076987","viewed":200,"name":"don - Herringbone Pattern","username":"koktszfung","description":"transform space into discretely repeating pattern","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["bricks","herringbone"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n    vec2 uv = (fragCoord -.5*iResolution.xy)/ iResolution.y;\n \n    float scale = 20.;\n\tfloat len = mod(floor(iTime*1.5), 5.)+2.;\n    \n    // calculate mask beforehand (look at the mask value to see what it does)\n    float xshifted = (uv.x*scale-floor(uv.y*scale))*.5;\n    float mask = fract(xshifted/len) > .5 ? 1. : 0.;\n    \n    // apply mask\n    if (mask > 0.) {  // shift down and rotate\n        uv.x -= (len-1.)/scale;\n    \tuv = uv.yx;\n    }\n\n    // transform uv into one cell\n    uv.x /= len;  // widen x to 2 times\n    uv *= scale;  // zoom out\n    uv.x -= floor(uv.y)/len;  // shift x to the right half cell more each row\n    uv = fract(uv);  // keep uv [0,1]\n    \n//// uv is now in the herringbone pattern ////\n    \n    float maxH = .5;\n    \n    // get inversion symmetry and rescale to [0,1]\n    uv = abs(uv -.5)*2.;\n\t\n    // rescale x to match y and shift x such that max x = 1\n    uv.x = uv.x*len - len + 1.;\n    \n    // calculate height\n    float h = 1.-max(uv.x, uv.y);\n    h = min(h, maxH);\n\n    fragColor.rgb = vec3(h)/maxH;\n    return;\n}","name":"Image","description":"","type":"image"}]}