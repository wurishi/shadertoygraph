{"ver":"0.1","info":{"id":"XdVyzW","date":"1521223111","viewed":315,"name":"Handheld camera filming a screen","username":"n23","description":"Screen projection with camera moved by brownian noise.\n\nBased on: https://www.shadertoy.com/view/XsdcRr and https://github.com/ashima/webgl-noise","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["screen","camera","projection","plane"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 mod289(vec3 x) \n{\n\treturn x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) \n{\n\treturn x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) \n{\n\treturn mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n\treturn 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v)\n{ \n\tconst vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n\tconst vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n\t// First corner\n\tvec3 i  = floor(v + dot(v, C.yyy) );\n\tvec3 x0 =   v - i + dot(i, C.xxx) ;\n\n\t// Other corners\n\tvec3 g = step(x0.yzx, x0.xyz);\n\tvec3 l = 1.0 - g;\n\tvec3 i1 = min( g.xyz, l.zxy );\n\tvec3 i2 = max( g.xyz, l.zxy );\n\n\t//   x0 = x0 - 0.0 + 0.0 * C.xxx;\n\t//   x1 = x0 - i1  + 1.0 * C.xxx;\n\t//   x2 = x0 - i2  + 2.0 * C.xxx;\n\t//   x3 = x0 - 1.0 + 3.0 * C.xxx;\n\tvec3 x1 = x0 - i1 + C.xxx;\n\tvec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n\tvec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n\t// Permutations\n  \ti = mod289(i); \n  \tvec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n\t// Gradients: 7x7 points over a square, mapped onto an octahedron.\n\t// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n\tfloat n_ = 0.142857142857; // 1.0/7.0\n\tvec3  ns = n_ * D.wyz - D.xzx;\n\n\tvec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n\tvec4 x_ = floor(j * ns.z);\n\tvec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n\tvec4 x = x_ *ns.x + ns.yyyy;\n\tvec4 y = y_ *ns.x + ns.yyyy;\n\tvec4 h = 1.0 - abs(x) - abs(y);\n\t\n\tvec4 b0 = vec4( x.xy, y.xy );\n\tvec4 b1 = vec4( x.zw, y.zw );\n\n\t//vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n\t//vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n\tvec4 s0 = floor(b0)*2.0 + 1.0;\n\tvec4 s1 = floor(b1)*2.0 + 1.0;\n\tvec4 sh = -step(h, vec4(0.0));\n\n\tvec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n\tvec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n\tvec3 p0 = vec3(a0.xy,h.x);\n\tvec3 p1 = vec3(a0.zw,h.y);\n\tvec3 p2 = vec3(a1.xy,h.z);\n\tvec3 p3 = vec3(a1.zw,h.w);\n\t\n\t//Normalise gradients\n\tvec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n\tp0 *= norm.x;\n\tp1 *= norm.y;\n\tp2 *= norm.z;\n\tp3 *= norm.w;\n\n\t// Mix final noise value\n\tvec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n\tm = m * m;\n\treturn 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3) ) );\n  }\n\n\n\n\n\n\n\n\n\n\n\n\n\n//fractal brownian motion (noise harmonic)\nfloat fbm4(vec2 uv){\n\tfloat n = 0.5;\n\tfloat f = 1.0;\n\tfloat l = 0.2;\n\tfor (int i=0; i<4; i++)\n\t{\n\t\tn += snoise(vec3(uv*f, 1.0))*l;\n\t\tf *= 2.00;\n\t\tl *= 0.65;\n\t}\n\treturn n;\t\n\t\n}\n\n\n//fractal brownian motion (noise harmonic - fewer octaves = smoother)\nfloat fbm8(vec2 uv){\n\tfloat n = 0.5;\n\tfloat f = 4.0;\n\tfloat l = 0.2;\n\tfor (int i=0; i<8; i++)\n\t{\n\t\tn += snoise(vec3(uv*f, 1.0))*l;\n\t\tf *= 2.00;\n\t\tl *= 0.65;\n\t}\n\treturn n;\t\n\t\n}\n\n\n\n\n\n\n\n\n\nvec4 detectOutside( vec2 uv ) \n{\n\tif (length(clamp(uv, vec2(0.0, 0.0), vec2(1.0, 1.0)) - uv) == 0.0)\n\t\treturn vec4(texture(iChannel0, uv).xyz, 1.0);\n\telse\n\t\treturn vec4(0, 0, 0, 0);\n\n}\n\n\nvec2 rotate( vec2 v, vec2 o, float a )\n{\n    float s = sin(a);\n    float c = cos(a);\n    mat2 m = mat2(c, -s, s, c);\n    return m * (v-o) + o;\n}\n\n\nvec2 TransformPlane( vec2 uv, vec2 center, float XRot, float YRot )\n{\n    //around y-axis\n    vec2 RayDirection =  vec2(uv.x, 0.0);\n    vec2 A1 = vec2(0.0, -1.0);\n    vec2 B1 = RayDirection - A1;\n    vec2 C1 = rotate(vec2(-1.0, 0.0), vec2(center.x, 0.0), YRot);\n    vec2 D1 = rotate(vec2( 1.0, 0.0), vec2(center.x, 0.0), YRot) - C1;\n    //intersection point\n    float u = ( (C1.y + 1.0) * D1.x - C1.x * D1.y ) / (D1.x*B1.y-D1.y*B1.x);\n    //pos. on plane\n    float sx = u * B1.x;\n \tfloat sy = u * uv.y;\n    //around x-axis\n    RayDirection = vec2(sy, 0.0);\n    vec2 B2 = RayDirection - A1;\n    vec2 C2 = rotate(vec2(-1.0, 0.0), vec2(center.y, 0.0), XRot);\n    vec2 D2 = rotate(vec2( 1.0, 0.0), vec2(center.y, 0.0), XRot) - C2;\n    //intersection point\n    float v = ( (C2.y + 1.0) * D2.x - C2.x * D2.y ) / (D2.x*B2.y-D2.y*B2.x);\n    //final pos. on plane:\n    return vec2(v * sx, v * B2.x );\n    \n}\n\n#define Max_Rotation 0.65\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Config\n    vec2 moveScreen = vec2(0.2, 0.1);\n    vec2 rotateScreen = vec2(0.5, 0.3);\n    float distanceScreen = 0.0;\n    float noiseFrequency = 0.1;\n\n\t// Move with brownian noise\n    rotateScreen.x = fbm4(vec2(1.0, iTime * noiseFrequency)) - 0.5;\n    rotateScreen.y = fbm4(vec2(100.0, iTime * noiseFrequency)) - 0.5;    \n    moveScreen.x = fbm4(vec2(200.0, iTime * noiseFrequency)) - 0.5;\n    moveScreen.y = fbm4(vec2(400.0, iTime * noiseFrequency)) - 0.5;\n    distanceScreen = (fbm4(vec2(600.0, iTime * noiseFrequency)) - 0.5) * 3.0;    \n    \n    vec2 uv = -1.0 + 2.0 * fragCoord.xy / iResolution.xy;\n    uv += moveScreen;\n    \n    float R_X = Max_Rotation * rotateScreen.x;\n    float R_Y = Max_Rotation * rotateScreen.y;\n    \n\n    vec2 RotationCenter = vec2(0.0);\n    RotationCenter.y += distanceScreen;\n    \n    vec2 MyCoords = TransformPlane(uv, RotationCenter, R_X, R_Y);\n    vec2 MyTexCoord = (MyCoords+1.0)/2.0;\n    \n    fragColor = vec4(detectOutside(MyTexCoord.xy));\n    \n}","name":"Image","description":"","type":"image"}]}