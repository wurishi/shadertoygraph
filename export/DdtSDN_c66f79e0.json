{"ver":"0.1","info":{"id":"DdtSDN","date":"1679846759","viewed":61,"name":"Dr. Tino's Waltz","username":"Loshie","description":"Two Bezier curves waltz with each other","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["noise","curves","dancing","waltz"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define BEZIER_STEPS 256\n#define NUMBER_POINTS 5\n#define X_MOVEMENT_PER 0.33f\n#define Y_MOVEMENT_PER 0.22f\n\nvec2[NUMBER_POINTS] controlPoints;\n\nvec2[BEZIER_STEPS] curvePoints;\n\nvec3 color1 = vec3(0.3, 0.4, 1.0);\nvec3 color2 = vec3(0.7, 0.4, 0.6);\n\n// Some useful functions\nvec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec2 mod289(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec3 permute(vec3 x) { return mod289(((x*34.0)+1.0)*x); }\n\n//\n// Description : GLSL 2D simplex noise function\n//      Author : Ian McEwan, Ashima Arts\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License :\n//  Copyright (C) 2011 Ashima Arts. All rights reserved.\n//  Distributed under the MIT License. See LICENSE file.\n//  https://github.com/ashima/webgl-noise\n//\nfloat snoise(vec2 v) {\n\n    // Precompute values for skewed triangular grid\n    const vec4 C = vec4(0.211324865405187,\n                        // (3.0-sqrt(3.0))/6.0\n                        0.366025403784439,\n                        // 0.5*(sqrt(3.0)-1.0)\n                        -0.577350269189626,\n                        // -1.0 + 2.0 * C.x\n                        0.024390243902439);\n                        // 1.0 / 41.0\n\n    // First corner (x0)\n    vec2 i  = floor(v + dot(v, C.yy));\n    vec2 x0 = v - i + dot(i, C.xx);\n\n    // Other two corners (x1, x2)\n    vec2 i1 = vec2(0.0);\n    i1 = (x0.x > x0.y)? vec2(1.0, 0.0):vec2(0.0, 1.0);\n    vec2 x1 = x0.xy + C.xx - i1;\n    vec2 x2 = x0.xy + C.zz;\n\n    // Do some permutations to avoid\n    // truncation effects in permutation\n    i = mod289(i);\n    vec3 p = permute(\n            permute( i.y + vec3(0.0, i1.y, 1.0))\n                + i.x + vec3(0.0, i1.x, 1.0 ));\n\n    vec3 m = max(0.5 - vec3(\n                        dot(x0,x0),\n                        dot(x1,x1),\n                        dot(x2,x2)\n                        ), 0.0);\n\n    m = m*m ;\n    m = m*m ;\n\n    // Gradients:\n    //  41 pts uniformly over a line, mapped onto a diamond\n    //  The ring size 17*17 = 289 is close to a multiple\n    //      of 41 (41*7 = 287)\n\n    vec3 x = 2.0 * fract(p * C.www) - 1.0;\n    vec3 h = abs(x) - 0.5;\n    vec3 ox = floor(x + 0.5);\n    vec3 a0 = x - ox;\n\n    // Normalise gradients implicitly by scaling m\n    // Approximation of: m *= inversesqrt(a0*a0 + h*h);\n    m *= 1.79284291400159 - 0.85373472095314 * (a0*a0+h*h);\n\n    // Compute final noise value at P\n    vec3 g = vec3(0.0);\n    g.x  = a0.x  * x0.x  + h.x  * x0.y;\n    g.yz = a0.yz * vec2(x1.x,x2.x) + h.yz * vec2(x1.y,x2.y);\n    return 130.0 * dot(m, g);\n}\n\nfloat cubicInOut(float t) {\n  return t < 0.5\n    ? 4.0 * t * t * t\n    : 0.5 * pow(2.0 * t - 2.0, 3.0) + 1.0;\n}\n\n// author mdb\n\nuint seed = 0u;\nvoid hash(){\n    seed ^= 2747636419u;\n    seed *= 2654435769u;\n    seed ^= seed >> 16;\n    seed *= 2654435769u;\n    seed ^= seed >> 16;\n    seed *= 2654435769u;\n}\nvoid initRandomGenerator(vec2 fragCoord){\n    seed = uint(fragCoord.y*iResolution.x + fragCoord.x)+uint(iFrame)*uint(iResolution.x)*uint(iResolution.y);\n}\n\nfloat random(){\n    hash();\n    return float(seed)/4294967295.0;\n}\n\nfloat map(float value, float min1, float max1, float min2, float max2) {\n  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}\n\nvoid movePoints() {\n  for (int i = 1; i < NUMBER_POINTS - 1; i++) {    \n    controlPoints[i].x += cos(iTime + float(i)) * X_MOVEMENT_PER * iResolution.x;\n    controlPoints[i].y += sin(iTime + float(i)) * Y_MOVEMENT_PER * iResolution.y;\n  }\n}\n\n\n/* For curves with different number of control points\n\nvoid bezierCalcPoint(float t, int pos) {\n    vec2[] tmpPoints = controlPoints;\n    \n    float oneMinusT = 1.f - t;\n    \n    int i = NUMBER_POINTS - 1;\n    \n    while (i > 0) {\n        for (int k = 0; k < i; k++) {\n            tmpPoints[k] = oneMinusT * tmpPoints[k] + t * tmpPoints[k+1];\n        }\n        i--;\n    }\n    \n    curvePoints[pos] = tmpPoints[0];\n} */ \n\n\nvec2 quarticBezierCalc(float t, vec2 p1, vec2 p2, vec2 p3, vec2 p4, vec2 p5) {\n  float oneMinusT = 1.f - t;\n  \n  return oneMinusT * oneMinusT * oneMinusT * oneMinusT * p1 + 4.f * oneMinusT * oneMinusT * oneMinusT * t * p2 + 6.f * oneMinusT * oneMinusT * t * t * p3 + 4.f * oneMinusT * t * t * t * p4 + t * t * t * t * p5;\n}\n\nvoid makeBezierCurve() {\n  for (int i = 0; i < BEZIER_STEPS; i++) {\n    float t = float(i) / (float(BEZIER_STEPS) - 1.f);\n    curvePoints[i] = quarticBezierCalc(t, controlPoints[0], controlPoints[1], controlPoints[2], controlPoints[3], controlPoints[4]);\n  }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2  R = iResolution.xy , st = fragCoord.xy - 0.5;\n\n    st.y = iResolution.y - st.y;\n    \n    controlPoints[0].x = 0.f;\n    controlPoints[1].x = iResolution.x * 0.8;\n    controlPoints[2].x = iResolution.x * 0.5;\n    controlPoints[3].x = iResolution.x * 0.3;\n    controlPoints[4].x = iResolution.x;\n\n    controlPoints[0].y = iResolution.y;\n    controlPoints[1].y = iResolution.y * 0.8;\n    controlPoints[2].y = iResolution.y * 0.3;\n    controlPoints[3].y = iResolution.y * 0.7;\n    controlPoints[4].y = 0.f;\n\n    float minDist = 1000000.f;\n    \n    movePoints();\n    \n    makeBezierCurve();\n    \n\n    for (int i = 0; i < BEZIER_STEPS; i++) {\n        minDist = min(minDist, distance(st, curvePoints[i]));\n\n        minDist = min(minDist, distance(st, R - curvePoints[i]));\n    }\n\n    float val = minDist / (R.y / 10.f);\n\n\n    val = clamp(val, 0.f, 1.f);\n\n    val = cubicInOut(val);\n    \n    initRandomGenerator(vec2(iTime * 100.f) * 100.f);\n\n    val -= snoise(st * 0.10 + random() * 50.f) * 0.3;\n\n    vec3 color = mix(color1, color2, val);\n\n    fragColor = vec4(color,1.0);\n}\n","name":"Image","description":"","type":"image"}]}