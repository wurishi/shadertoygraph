{"ver":"0.1","info":{"id":"tlKXRK","date":"1583156234","viewed":73,"name":"Raycasting exercises","username":"Witiza","description":"yeet","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["yeet"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvec3 eye = vec3(0,0,0);\nvec3 frustumOrigin = vec3(0.0);\nfloat sphere_radius = 0.5;\nvec3 sphere_origin = vec3(0,0,-2.0);\n\nvoid UpdateGlobals()\n{\n    eye = vec3(0,0,1);\n    frustumOrigin = vec3(0.0);\n\tsphere_radius = 0.5;\n\t\n}\n/*\nmat3 getCameraMatrix(vec3 target)\n{\n    vec3 ez = normalize(eye-target);\n    vec3 ex = normalize(cross(vec3(0.0,1.0,0.0),ez));\n    vec3 ey = cross(ex,ez);\n    mat3 matrix = mat3(0);\n    matrix[][0] = ex;\n    matrix[][1] = ey;\n    matrix\n}*/\nvec3 NormalizeCoord(in vec2 fragCoord)\n{\n   \n    vec3 result = vec3(vec2((fragCoord*2.0/iResolution.xy)-1.0),frustumOrigin.z);\n    vec3 result2 = (result-eye)/length(result-eye);\n    result2.x *= iResolution.x/iResolution.y;\n    return normalize(vec3(result2));\n}\n\nvec4 RayDirection(in vec2 fragCoord)\n{\n    return (vec4((NormalizeCoord(fragCoord)),1.0));\n}\n\nvec4 SkyGradient(in vec2 fragCoord)\n{\n    float height = NormalizeCoord(fragCoord).y;\n    return mix(vec4(0.7,1.0,1.0,1.0),vec4(0.0,0.7,1.0,1.0),height);\n}\n\nvec4 floorCollision(in vec2 fragCoord)\n{\n    vec3 d = NormalizeCoord(fragCoord);\n    \n    float t = -1.0/d.y;\n    if(t>0.0)\n    {\n        return vec4(0.7);\n    }\n    \n    return SkyGradient(fragCoord);\n}\n\nvec4 sphereCollision(in vec2 fragCoord)\n{\n    vec3 d = NormalizeCoord(fragCoord);\n    \n    vec3 oc = sphere_origin - eye;\n    \n    float t2 = dot(d,oc);\n    eye = vec3(0.0,0.0,1.0);\n    //THIS EQUATION SHOULD BE  vec3 od = eye + d*t2; BUT IT DOESNT WORK\n    vec3 od =d*t2;\n    \n    float k = sqrt(pow(length(oc),2.0)-pow(length(od),2.0));\n    \n    \n    \n    if(k <= sphere_radius)\n    {\n        return vec4(vec3(0.0),1.0);\n        /*\n        float t3 = sqrt(pow(length(sphere_radius),2.0)-pow(length(k),2.0));\n        float t = t2-t3;\n        vec3 tvector = d*t;*/\n    }\n    else\n        return floorCollision(fragCoord);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    UpdateGlobals();\n    vec4 color1 = sphereCollision(fragCoord);\n    vec4 color2 = sphereCollision(vec2(fragCoord.x+0.5,fragCoord));\n    vec4 color3 = sphereCollision(vec2(fragCoord.x+0.5,fragCoord.y+0.5));\n    vec4 color4 = sphereCollision(vec2(fragCoord.x,fragCoord.y+0.5));\n    vec4 final = (color1+color2+color3+color4)/4.0;\n    \n\tfragColor = sphereCollision(fragCoord);\n}","name":"Image","description":"","type":"image"}]}