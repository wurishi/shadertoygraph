{"ver":"0.1","info":{"id":"XftyWH","date":"1730580626","viewed":50,"name":"Halp! Half-Remembered Algorithm","username":"jimmcnulty41","description":"Does anyone remember the recent blog post from elsewhere on the internet that used sector averages for a blur or edge detection or something? I remember good diagrams, but can't remember how variances were involved, but pretty sure that was part of it.","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["blur","algorithm","question"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col = texture(iChannel0, uv).xyz;\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// A half-remembered implementation of something with a name that's not\n// canny edge detection\n\n// if anyone knows plz point me to resources :bless:\n\nfloat sectorAvg(in ivec2 sectorOrigin, int sectorSize) \n{\n    float sum = 0.;\n    for (int i = 0; i < sectorSize; ++i) \n    {\n        for (int j = 0; j < sectorSize; ++j) \n        {\n            vec3 s = texelFetch(iChannel0, sectorOrigin + ivec2(i, j),0).xyz;\n            sum += s.x ;\n        }\n    }\n    return sum / float(sectorSize*sectorSize);\n}\n\n// Don't use even sizes plz\nfloat val(in ivec2 center, int size) \n{\n    return\n        smoothstep(\n            .1,\n            .1+fract(iTime*.1),\n            sectorAvg(center + ivec2(size, size), size)\n            * sectorAvg(center + ivec2(size, -1), size)\n            * sectorAvg(center + ivec2(-1, -1), size)\n            * sectorAvg(center + ivec2(-1, size), size)\n       ); \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    vec3 col = vec3(val(ivec2(fragCoord), 1 ));\n    \n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}