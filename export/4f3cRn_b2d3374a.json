{"ver":"0.1","info":{"id":"4f3cRn","date":"1730125739","viewed":39,"name":"Radial Pulse Wave Shader","username":"qaisar17","description":"A visually engaging GLSL shader that generates a colorful, pulsating radial pattern with smooth sine wave-based gradients and animated brightness. ","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["glsl","animation","shader","pattern","dynamic","colorgradient","sinewave","pulsating","radialgradient","visualeffect"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Set up normalized coordinates and center on the screen\n    vec2 uv = fragCoord / iResolution.xy;\n    uv -= 0.5;\n    uv.x *= iResolution.x / iResolution.y;\n\n    // Animation based on time\n    float time = iTime * 0.5;\n\n    // Base pattern: Radial gradient combined with sine waves\n    float dist = length(uv) * 10.0; // radial distance from center\n    float angle = atan(uv.y, uv.x); // angle in radians\n\n    // Create a colorful gradient pattern\n    float colorWave = sin(dist - time) * 0.5 + 0.5; // smooth oscillation\n    float radialWave = sin(angle * 6.0 + time) * 0.5 + 0.5; // rotating wave\n\n    // Combine radial and color waves to get RGB values\n    float r = smoothstep(0.2, 0.8, colorWave);  // R channel based on colorWave\n    float g = smoothstep(0.3, 0.7, radialWave); // G channel based on radial wave\n    float b = smoothstep(0.4, 0.9, colorWave * radialWave); // B channel combines both\n\n    // Apply brightness pulsation effect\n    float brightness = 0.7 + 0.3 * sin(time * 2.0); // pulsates from 0.7 to 1.0\n    vec3 color = vec3(r, g, b) * brightness;\n\n    // Output final color\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}