{"ver":"0.1","info":{"id":"NtKBzt","date":"1665066222","viewed":131,"name":"Buffer Reflection Test","username":"SnoopethDuckDuck","description":"wanted it to look like water with reflection, maybe it's too subtle","likes":4,"published":3,"flags":48,"usePreview":0,"tags":["buffer"],"hasliked":0,"parentid":"7lyBRt","parentname":"Flow Field Test 4"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = texelFetch(iChannel0, ivec2(fragCoord), 0).rgb;\n    col = 2.2 * pow(col, vec3(1.6)); \n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y; \n    col *= exp(-abs(uv.x));\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec4 cell(in ivec2 p) {\n    ivec2 r = ivec2(textureSize(iChannel0, 0));\n    p = (p+r) % r;\n    return texelFetch(iChannel0, p, 0 );\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 f)\n{\n    vec3 col = vec3(0); // probably dont need\n    col = cell(ivec2(f)).rgb;\n    vec2 uv = (f - 0.5 * iResolution.xy) / iResolution.y;\n    float xp = exp(-0.25 * iTime);\n    float xp2 = exp(-0.125 * iTime);\n    \n    for (float i = 0.; i < 6.; i++) {\n        vec2 p = vec2(h21(vec2(iTime, 0.1 + i)) * 2. - 0.5, \n                      h21(vec2(0.2 * iTime, -5.1 + i)));\n        p -= 0.5;\n        float ns = fnoise(vec2(p.x, p.y/uv.y) + 0.01 * iTime, 4.);\n        vec2 q = p + 0.2 * xp * vec2(cos(pi * ns), sin(pi * ns));\n        float d = seg(uv, p, q);\n        float s = xp2 * exp(-100. * (1.-xp) * d);\n        \n        vec3 pl = pal(2. * ns + 0.12 * iTime, 0.5 * vec3(0,1,2)/3.);\n        float v = smoothstep(-0.1, 0.1, -p.y);\n        pl *= mix(v, 1., 1.-xp);\n        pl *= exp(-3. * xp * abs(p.y));\n        col = mix(col, pl, s * (1.-xp));    \n    }\n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define pi 3.14159\n\nvec3 pal(in float t, in vec3 d) {\n    return 0.5 + 0.5 * cos(2. * pi * (0.5 * t + d));\n}\n\nfloat h21(vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\n// everything under here is from iq\nfloat seg(in vec2 p, in vec2 a, in vec2 b) {\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\n//https://www.shadertoy.com/view/XdXGW8\nvec2 grad(ivec2 z) {\n    int n = z.x+z.y*11111;\n    n = (n<<13)^n;\n    n = (n*(n*n*15731+789221)+1376312589)>>16;\n    n &= 7;\n    vec2 gr = vec2(n&1,n>>1)*2.0-1.0;\n    return ( n>=6 ) ? vec2(0.0,gr.x) : \n           ( n>=4 ) ? vec2(gr.x,0.0) : gr;                            \n}\n\nfloat noise(in vec2 p) {\n    ivec2 i = ivec2(floor( p ));\n     vec2 f =       fract( p );\n\t\n\tvec2 u = f*f*(3.0-2.0*f); // feel free to replace by a quintic smoothstep instead\n\n    return mix( mix( dot( grad( i+ivec2(0,0) ), f-vec2(0.0,0.0) ), \n                     dot( grad( i+ivec2(1,0) ), f-vec2(1.0,0.0) ), u.x),\n                mix( dot( grad( i+ivec2(0,1) ), f-vec2(0.0,1.0) ), \n                     dot( grad( i+ivec2(1,1) ), f-vec2(1.0,1.0) ), u.x), u.y);\n}\n\nfloat fnoise(vec2 uv, float sc) {\n    float f = 0.;\n\tuv *= sc;\n    mat2 m = mat2(1.6, 1.2, -1.2, 1.6);\n\tf  = 0.5000 * noise(uv); uv = m * uv;\n\tf += 0.2500 * noise(uv); uv = m * uv;\n\tf += 0.1250 * noise(uv); uv = m * uv;\n\tf += 0.0625 * noise(uv); uv = m * uv;\n\treturn 0.5 + 0.5 * f;\n}\n","name":"Common","description":"","type":"common"}]}