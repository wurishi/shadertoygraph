{"ver":"0.1","info":{"id":"lsycRG","date":"1522391707","viewed":525,"name":"Kaleidoscope_Fold","username":"cwrawls","description":"Simple kaleidoscope type effect from video. Alters the colors using a \"fold\" function. Function is akin to folding a piece of paper back and forth until it is a particular width. ","likes":3,"published":3,"flags":0,"usePreview":0,"tags":["2d","kaleidoscope"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TWOPI 6.28318530718\n#define PI 3.14159265\n\n//change to make more or less complex\n#define ROTATIONS 20.0\n\n\n\n//bring the sum off all samples into range [0.,1.] in a way other than a clamp\n//similar to repeatedly folding a piece of paper\nvec3 fold(in vec3 col) {\n\n    vec3 f = fract(col);\n    vec3 i = floor(col);\n    \n    //direction of final fold\n    vec3 foldDir = mod(i, 2.0);\n    \n    vec3 foldUp = f * (1. - foldDir);\n    vec3 foldDown = (1.0 - f) * foldDir;\n    \n    return foldUp + foldDown;\n    \n}\n\nvec2 makeCartesian(in vec2 uv) {\n\n    vec2 cart = vec2(uv.x * cos(uv.y), uv.x * sin(uv.y));\n    \n    //normalize\n    cart += 1.;\n    cart /= 2.;\n    \n    return cart;\n}\n\nvec2 polarShift(in vec2 uv, in float shift) {\n\n    vec2 polar = vec2(length(uv), atan(uv.y, uv.x) + PI);\t\n    polar.y += shift;\n    \n\tpolar.y = mod(polar.y, TWOPI);\n    \n    return polar;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Signed-Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = ((fragCoord/iResolution.xy) * 2.0) - 1.0;\n    \n    vec4 sum = vec4(0.);\n    \n    //get and sum all the samples by rotation\n    for(float i = 0.; i < ROTATIONS; i += 1.0) {\n\t\tfloat shift = i * (TWOPI / ROTATIONS);\n        vec2 p = polarShift(uv, shift);\n        vec2 rotCoord = makeCartesian(p);\n        sum += texture(iChannel0, rotCoord);\n    }\n    \n    //bring the sum back into the range [0.,1.]\n    vec3 col = fold(sum.xyz);\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}