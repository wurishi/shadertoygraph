{"ver":"0.1","info":{"id":"dsGSWd","date":"1681810572","viewed":54,"name":"WS 6 : Fractal Flame","username":"LoganOracio","description":"A very simple fractal flame, I love this algorithm, I really need to make more of it.","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["fractalflame"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n__        __        _    _         ____  _               _              __\n\\ \\      / /__  ___| | _| |_   _  / ___|| |__   __ _  __| | ___ _ __   / /_\n \\ \\ /\\ / / _ \\/ _ \\ |/ / | | | | \\___ \\| '_ \\ / _` |/ _` |/ _ \\ '__| | '_ \\\n  \\ V  V /  __/  __/   <| | |_| |  ___) | | | | (_| | (_| |  __/ |    | (_) |\n   \\_/\\_/ \\___|\\___|_|\\_\\_|\\__, | |____/|_| |_|\\__,_|\\__,_|\\___|_|     \\___/\n                           |___/\n*/\n\nvoid mainImage( out vec4 O, in vec2 C )\n{\n    vec2 uv = C/iResolution.xy;\n    O = texture(iChannel0,uv);\n    O = vec4(normalize(O.xyz)*log(10.0*luma(O)),1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 O, in vec2 C )\n{\n    vec2 uv = C/iResolution.xy;\n    vec3 c = vec3(.5);\n    O=texture(iChannel0,uv)*.999;\n    for(int y = 0; y < 15; y++)\n    {\n        vec2 p = hash21(float(iFrame));\n        for(int i = 0; i < 12; i++)\n        {\n            float r=hash12(vec2(iFrame,hash12(vec2(i,y))));\n            if(r<.33)\n            {\n                p*=.5;\n                c=c*.5+vec3(1.,.5,0.);\n            }\n            else if(r<.66)\n            {\n                p=(vec2(1.,0.)+p)*.5;\n                p.y+=p.x*.25; // This line does the distortion\n                c=c*.5+vec3(0.,1.,1.);\n            }\n            else\n            {\n                p=(vec2(.5,1.0)+p)*.5;\n                c=c*.5+vec3(1.,0.,1.);\n            }\n        }\n        if(length(iResolution.xy*p-C.xy)<.5)\n        {\n            O+=vec4(c,1.0);\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"uvec2 murmurHash21(uint src) {\n    const uint M = 0x5bd1e995u;\n    uvec2 h = uvec2(1190494759u, 2147483647u);\n    src *= M; src ^= src>>24u; src *= M;\n    h *= M; h ^= src;\n    h ^= h>>13u; h *= M; h ^= h>>15u;\n    return h;\n}\nvec2 hash21(float src) {\n    uvec2 h = murmurHash21(floatBitsToUint(src));\n    return uintBitsToFloat(h & 0x007fffffu | 0x3f800000u) - 1.0;\n}\nuint murmurHash11(uint src) {\n    const uint M = 0x5bd1e995u;\n    uint h = 1190494759u;\n    src *= M; src ^= src>>24u; src *= M;\n    h *= M; h ^= src;\n    h ^= h>>13u; h *= M; h ^= h>>15u;\n    return h;\n}\nfloat hash11(float src) {\n    uint h = murmurHash11(floatBitsToUint(src));\n    return uintBitsToFloat(h & 0x007fffffu | 0x3f800000u) - 1.0;\n}\nuint murmurHash12(uvec2 src) {\n    const uint M = 0x5bd1e995u;\n    uint h = 1190494759u;\n    src *= M; src ^= src>>24u; src *= M;\n    h *= M; h ^= src.x; h *= M; h ^= src.y;\n    h ^= h>>13u; h *= M; h ^= h>>15u;\n    return h;\n}\nfloat hash12(vec2 src) {\n    uint h = murmurHash12(floatBitsToUint(src));\n    return uintBitsToFloat(h & 0x007fffffu | 0x3f800000u) - 1.0;\n}\nfloat luma(vec4 color) {\n  return dot(color.rgb, vec3(0.299, 0.587, 0.114));\n}","name":"Common","description":"","type":"common"}]}