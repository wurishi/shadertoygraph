{"ver":"0.1","info":{"id":"cssGDH","date":"1666967522","viewed":240,"name":"Cyberpunk transition","username":"sp33s","description":"Did a shader for the transition effect as seen in the Netflix series 'Cyberpunk: Edgerunners'\n\nDrag mouse for effect.","likes":9,"published":1,"flags":32,"usePreview":0,"tags":["glitch","transition","cyberpunk"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float t = sin(iTime * 1.5) * 2.0; // t reaches from [-2 - 2]\n    \n    if (iMouse.z > 0.0)\n        t = mix(-0.25, 1.25, iMouse.x / iResolution.x);\n    \n    vec4 mask = texture(iChannel2, uv);\n    vec4 accentMask = texture(iChannel3, uv);\n\n    fragColor = texture(iChannel0, uv);\n    \n    if (mask.r > t)\n    {\n        fragColor = texture(iChannel0, uv);\n        \n        if (t > accentMask.r - 0.2)\n        {\n            fragColor = Saturate(fragColor, 2.0);\n            fragColor *= 0.4;\n        }\n\n    }\n    else\n    {\n        fragColor = texture(iChannel1, uv);\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec4 Saturate(vec4 pixel, float adjustment)\n{\n    vec3 intensity = vec3(dot(pixel.rgb, vec3(0.2126, 0.7152, 0.0722)));\n    return vec4(mix(intensity, pixel.rgb, adjustment), 1.0);\n}\n\nfloat GoldNoise(in vec2 xy, in float seed)\n{\n    xy += 1.0;\n    seed += 1000.0;\n    return fract(tan(distance(xy * 1.61803398874989484820459, xy)*seed)*xy.x);\n}\n\nfloat GetColumnWidth(const in float x, const in float layer, const in vec2 minMaxColumnWidth)\n{\n    return mix(minMaxColumnWidth.x, minMaxColumnWidth.y, GoldNoise(vec2(layer, layer), x));\n}\n\nfloat GetRowHeight(const in float y, const float layer, const in vec2 minMaxRowHeight)\n{\n    return mix(minMaxRowHeight.x, minMaxRowHeight.y, GoldNoise(vec2(layer, layer), y + 99.0));\n}\n\nvec3 GetColumnByUV(const in vec2 uv, const in float layer, const in vec2 minMaxColumnWidth)\n{\n    float column = 0.0;\n    float widthSum = 0.0;\n    \n    while (true)\n    {\n        float colWidth = GetColumnWidth(column, layer, minMaxColumnWidth);\n        if (uv.x >= widthSum && uv.x < widthSum + colWidth)\n            return vec3(widthSum, widthSum + colWidth, column);\n\n        widthSum += colWidth;\n        column++;\n    }\n}\n\nvec3 GetRowByUV(const in vec2 uv, const in float layer, const in vec2 minMaxRowHeight)\n{\n    float row = 0.0;\n    float heightSum = 0.0;\n    \n    while (true)\n    {\n        float rowHeight = GetRowHeight(row, layer, minMaxRowHeight);\n        if (uv.y >= heightSum && uv.y < heightSum + rowHeight)\n            return vec3(heightSum, heightSum + rowHeight, row);\n\n        heightSum += rowHeight;\n        row++;\n    }\n}\n\nvec4 GetRect(const in vec2 uv, const in float layer, const in vec2 minMaxColumnWidth, const in vec2 minMaxRowHeight)\n{\n    vec3 columnInfo = GetColumnByUV(uv, layer, minMaxColumnWidth);\n    vec3 rowInfo = GetRowByUV(uv, layer, minMaxRowHeight);\n    \n    return vec4(columnInfo.x, columnInfo.y, rowInfo.x, rowInfo.y);\n}\n\nvec4 RenderSquares(const in vec2 uv, const in float startLayerIndex, const in float endLayerIndex, const in vec2 minMaxColumnWidth, const in vec2 minMaxRowHeight, const in float maxHorizontalOffset)\n{\n    float lum = 0.0;\n    \n    for (float i = startLayerIndex; i < endLayerIndex; i++)\n    {\n        vec4 rect = GetRect(uv, i, minMaxColumnWidth, minMaxRowHeight); // x = xMin, y = xMax, z = yMin, w = yMax\n        bool renderRect = GoldNoise(vec2(rect.x, rect.z), i) > 0.95;\n\n        if (renderRect)\n        {\n            float maxLength = maxHorizontalOffset;\n            float offsetSign = GoldNoise(vec2(rect.x, rect.z), rect.x * rect.x) > 0.5 ? 1.0 : -1.0;\n            float offset = GoldNoise(vec2(rect.x, rect.z), rect.x * rect.z) * maxLength * offsetSign;\n            lum = uv.x + offset;\n            break;\n        }   \n        else\n        {\n            lum = uv.x;\n        }\n\n    }\n    \n    return vec4(lum, lum, lum, 1.0);\n}\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 pixel = texture(iChannel0, uv);\n    if (pixel.a == 0.0)\n        fragColor = RenderSquares(uv, 0.0, 20.0, vec2(0.01, 0.2), vec2(0.01, 0.1), 0.1);    \n    else\n        fragColor = pixel;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 pixel = texture(iChannel0, uv);\n    if (pixel.a == 0.0)\n        fragColor = RenderSquares(uv, 20.0, 40.0, vec2(0.01, 0.2), vec2(0.001, 0.1), 0.1);    \n    else\n        fragColor = pixel;\n}","name":"Buffer B","description":"","type":"buffer"}]}