{"ver":"0.1","info":{"id":"4sdBWM","date":"1560562953","viewed":171,"name":"Fractal Voronoi II","username":"oalpha","description":"Just recursive voronoi again","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["voronoi","noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define nnnn vec4(0.0, 0.0, 0.0, 0.0)\n#define nnnp vec4(0.0, 0.0, 0.0, 1.0)\n#define nnpn vec4(0.0, 0.0, 1.0, 0.0)\n#define nnpp vec4(0.0, 0.0, 1.0, 1.0)\n#define npnn vec4(0.0, 1.0, 0.0, 0.0)\n#define npnp vec4(0.0, 1.0, 0.0, 1.0)\n#define nppn vec4(0.0, 1.0, 1.0, 0.0)\n#define nppp vec4(0.0, 1.0, 1.0, 1.0)\n#define pnnn vec4(1.0, 0.0, 0.0, 0.0)\n#define pnnp vec4(1.0, 0.0, 0.0, 1.0)\n#define pnpn vec4(1.0, 0.0, 1.0, 0.0)\n#define pnpp vec4(1.0, 0.0, 1.0, 1.0)\n#define ppnn vec4(1.0, 1.0, 0.0, 0.0)\n#define ppnp vec4(1.0, 1.0, 0.0, 1.0)\n#define pppn vec4(1.0, 1.0, 1.0, 0.0)\n#define pppp vec4(1.0, 1.0, 1.0, 1.0)\nfloat Dot(vec2 a, vec4 b) {\n    return dot(a, b.xy);\n}\nfloat Dot(vec3 a, vec4 b) {\n    return dot(a, b.xyz);\n}\nfloat rand(float f, float o, float r, vec4 ss) {\n  return o + r * fract(sin(f * ss.x + ss.y) * ss.z + ss.z);\n}\nvec2 rand2(vec2 v, float o, float r, mat4 d, vec4 s) {\n    return vec2(\n        rand(Dot(v, d[0]), o, r, s),\n        rand(Dot(v, d[1]), o, r, s)\n    );\n}\nvec3 rand3(vec3 v, float o, float r, mat4 d, vec4 s) {\n    return vec3(\n        rand(Dot(v, d[0]), o, r, s),\n        rand(Dot(v, d[1]), o, r, s),\n        rand(Dot(v, d[2]), o, r, s)\n    );\n}\nvec4 rand4(vec4 v, float o, float r, mat4 d, vec4 s) {\n    return vec4(\n        rand(dot(v, d[0]), o, r, s),\n        rand(dot(v, d[1]), o, r, s),\n        rand(dot(v, d[2]), o, r, s),\n        rand(dot(v, d[3]), o, r, s)\n    );\n}\nvec4 rand4Rot(vec4 v, mat4 ds, vec4 ss) {\n    v = rand4(vec4(\n        dot(v, ds[0]),\n        dot(v, ds[1]),\n        dot(v, ds[2]),\n        dot(v, ds[3])\n    ), 0.0, 2.0 * 3.14159265358, ds, ss);\n  return mat4(\n            1.0,       0.0,       0.0,       0.0,\n            0.0,  cos(v.x), -sin(v.x),       0.0,\n            0.0,  sin(v.x),  cos(v.x),       0.0,\n            0.0,       0.0,       0.0,       1.0\n  ) * mat4(\n            1.0,       0.0,       0.0,       0.0,\n            0.0,       1.0,       0.0,       0.0,\n            0.0,       0.0,  cos(v.y), -sin(v.y),\n            0.0,       0.0,  sin(v.y),  cos(v.y)\n  ) * mat4(\n       cos(v.z),       0.0,       0.0,  sin(v.z),\n            0.0,       1.0,       0.0,       0.0,\n            0.0,       0.0,       1.0,       0.0,\n      -sin(v.z),       0.0,       0.0,  cos(v.z)\n  ) * mat4(\n       cos(v.w), -sin(v.w),       0.0,       0.0,\n       sin(v.w),  cos(v.w),       0.0,       0.0,\n            0.0,       0.0,       1.0,       0.0,\n            0.0,       0.0,       0.0,       1.0\n  ) * vec4(1.0, 0.0, 0.0, 0.0);\n}\nmat4 rand44(mat4 m, float o, float r, mat4 d, mat4 s) {\n    return mat4(\n        vec4(\n            rand(dot(m[0], d[0].xyzw), o, r, s[0]),\n            rand(dot(m[0], d[1].xyzw), o, r, s[1]),\n            rand(dot(m[0], d[2].xyzw), o, r, s[2]),\n            rand(dot(m[0], d[3].xyzw), o, r, s[3])\n        ),\n        vec4(\n            rand(dot(m[1], d[0].yzwx), o, r, s[0]),\n            rand(dot(m[1], d[1].yzwx), o, r, s[1]),\n            rand(dot(m[1], d[2].yzwx), o, r, s[2]),\n            rand(dot(m[1], d[3].yzwx), o, r, s[3])\n        ),\n        vec4(\n            rand(dot(m[1], d[0].zwxy), o, r, s[0]),\n            rand(dot(m[1], d[1].zwxy), o, r, s[1]),\n            rand(dot(m[1], d[2].zwxy), o, r, s[2]),\n            rand(dot(m[1], d[3].zwxy), o, r, s[3])\n        ),\n        vec4(\n            rand(dot(m[1], d[0].wxyz), o, r, s[0]),\n            rand(dot(m[1], d[1].wxyz), o, r, s[1]),\n            rand(dot(m[1], d[2].wxyz), o, r, s[2]),\n            rand(dot(m[1], d[3].wxyz), o, r, s[3])\n        )\n    );\n}\nfloat mix1(float x, float y, float a) {\n  return (1.0 - a) * x + a * y;\n}\nvec2 mix1(vec2 x, vec2 y, float a) {\n  return (1.0 - a) * x + a * y;\n}\nvec3 mix1(vec3 x, vec3 y, float a) {\n  return (1.0 - a) * x + a * y;\n}\nvec4 mix1(vec4 x, vec4 y, float a) {\n  return (1.0 - a) * x + a * y;\n}\nfloat curve5(float a) {\n  return a * a * a * (a * (6.0 * a - 15.0) + 10.0);\n}\nvec2 curve5(vec2 a) {\n  return a * a * a * (a * (6.0 * a - 15.0) + 10.0);\n}\nvec4 curve5(vec4 a) {\n  return a * a * a * (a * (6.0 * a - 15.0) + 10.0);\n}\nfloat mix5(float x, float y, float a) {\n  return mix1(x, y, curve5(a));\n}\nvec2 mix5(vec2 x, vec2 y, float a) {\n  return mix1(x, y, curve5(a));\n}\nvec3 mix5(vec3 x, vec3 y, float a) {\n  return mix1(x, y, curve5(a));\n}\nvec4 mix5(vec4 x, vec4 y, float a) {\n  return mix1(x, y, curve5(a));\n}\nfloat perlinGradient(vec4 pos, mat4 ds, vec4 ss) {\n    vec4 f = fract(pos);\n    vec4 b = floor(pos);\n    vec4 z0 = mix5(vec4(\n        dot(rand4Rot(b, ds, ss), f),\n        dot(rand4Rot(b + npnn, ds, ss), f - npnn),\n        dot(rand4Rot(b + pnnn, ds, ss), f - pnnn),\n        dot(rand4Rot(b + ppnn, ds, ss), f - ppnn)\n    ), vec4(\n        dot(rand4Rot(b + nnnp, ds, ss), f - nnnp),\n        dot(rand4Rot(b + npnp, ds, ss), f - npnp),\n        dot(rand4Rot(b + pnnp, ds, ss), f - pnnp),\n        dot(rand4Rot(b + ppnp, ds, ss), f - ppnp)\n    ), f.w);\n    vec4 z1 = mix5(vec4(\n        dot(rand4Rot(b + nnpn, ds, ss), f - nnpn),\n        dot(rand4Rot(b + nppn, ds, ss), f - nppn),\n        dot(rand4Rot(b + pnpn, ds, ss), f - pnpn),\n        dot(rand4Rot(b + pppn, ds, ss), f - pppn)\n    ), vec4(\n        dot(rand4Rot(b + nnpp, ds, ss), f - nnpp),\n        dot(rand4Rot(b + nppp, ds, ss), f - nppp),\n        dot(rand4Rot(b + pnpp, ds, ss), f - pnpp),\n        dot(rand4Rot(b + 1.0, ds, ss), f - 1.0)\n    ), f.w);\n    vec4 z = mix5(z0, z1, f.z);\n    vec2 y = mix5(z.xz, z.yw, f.y);\n    return mix5(y.x, y.y, f.x);\n}\nfloat fractalNoise(vec4 p, mat4 ds,  vec4 ss) {\n    float value = 0.0;\n    float res = 2.0;\n    float scale = 1.0;\n    float scaleStep = 2.0;\n    vec4 f = ss;\n    for(int i = 0; i < 3; i++) {\n        f = rand4(f, 12345.6789012, 32109.8765432, ds, ss);\n        value += 3.0 * perlinGradient(vec4(p.xyz / res, p.w), ds, f) / scale;\n        scale = scale * scaleStep;\n        res = res / scaleStep;\n    }\n    float range = 0.75 / 2.0;\n    return value * range + range;\n}\nfloat Min(inout vec4 M, float m) {\n    float t;\n    for(int i = 0; i < 4; i++)\n        if(m < M[i]) {\n            t = m;\n            m = M[i];\n            M[i] = t;\n        }\n    return m;\n}\nfloat evoronoi( in vec2 x, vec4 c, /*float scale, */mat4 d, mat4 s ) {\n    float fallout = 64.0;\n    vec2 p = floor( x.xy );\n    vec2 f = fract( x.xy );\n    //mat4 s1 = rand44(s, 12345.6789012, 32109.8765432, d, s);\n    //mat4 d1 = rand44(d, 12.3456789012, 32.1098765432, d, s);\n    //mat4 d2 = rand44(d, 12.3456789012, 32.1098765432, d, s);\n    //mat4 d3 = rand44(d2, 12.3456789012, 32.1098765432, d, s);\n\n    //*\n    float res = 1.0e20;\n    //vec4 res = 1.0e20;\n    const float range = 1.0;\n    for( float j=-range; j<=range; j++ )\n    for( float i=-range; i<=range; i++ )\n    {\n        vec2 b = vec2( i, j );\n        /*\n        vec3  r = b - f + vec3(\n            mix(0.0, 1.0, fractalNoise(vec4((p + b) * scale, x.w), d, s[0])),\n            mix(0.0, 1.0, fractalNoise(vec4((p + b) * scale, x.w), d2, s[1])),\n            mix(0.0, 1.0, fractalNoise(vec4((p + b) * scale, x.w), d3, s[1]))\n        );\n\t\t//*/\n        vec2 r = b - f + rand2( p + b, 0.0, 1.0, d, s[0] );\n        float dis = length( r );\n\n        //res += exp( -fallout*dis );\n        res = min(res, dis);\n        //Min(res, dis);\n        //s1 = rand44(s1, 12345.6789012, 32109.8765432, d, s);\n        //d1 = rand44(d1, 12.3456789012, 32.1098765432, d, s);\n        //d2 = rand44(d2, 12.3456789012, 32.1098765432, d, s);\n    }\n    //return -1.125*(1.0/fallout)*log( res );\n    return res;\n    //*/\n    //return fractalNoise(vec3(p, x.z), 16.0, 1.0, 2.0, vec3(0.0), d, s[0]);\n}\nfloat evoronoi( in vec3 x, vec4 c, /*float scale, */mat4 d, mat4 s ) {\n    float fallout = 64.0;\n    vec3 p = floor( x.xyz );\n    vec3 f = fract( x.xyz );\n    //mat4 s1 = rand44(s, 12345.6789012, 32109.8765432, d, s);\n    //mat4 d1 = rand44(d, 12.3456789012, 32.1098765432, d, s);\n    //mat4 d2 = rand44(d, 12.3456789012, 32.1098765432, d, s);\n    //mat4 d3 = rand44(d2, 12.3456789012, 32.1098765432, d, s);\n\n    //*\n    //float res = 0.0;\n    //float res = 1.0e20;\n    vec4 res = vec4(1.0e20);\n    const float range = 1.0;\n    for( float k=-range; k<=range; k++ )\n    for( float j=-range; j<=range; j++ )\n    for( float i=-range; i<=range; i++ )\n    {\n        vec3 b = vec3( i, j, k );\n        /*\n        vec3  r = b - f + vec3(\n            mix(0.0, 1.0, fractalNoise(vec4((p + b) * scale, x.w), d, s[0])),\n            mix(0.0, 1.0, fractalNoise(vec4((p + b) * scale, x.w), d2, s[1])),\n            mix(0.0, 1.0, fractalNoise(vec4((p + b) * scale, x.w), d3, s[1]))\n        );\n\t\t//*/\n        vec3 r = b - f + rand3( p + b, 0.0, 1.0, d, s[0] );\n        float dis = length( r );\n\n        //res += exp( -fallout*dis );\n        //res = min(res, dis);\n        Min(res, dis);\n        //s1 = rand44(s1, 12345.6789012, 32109.8765432, d, s);\n        //d1 = rand44(d1, 12.3456789012, 32.1098765432, d, s);\n        //d2 = rand44(d2, 12.3456789012, 32.1098765432, d, s);\n    }\n    //return -1.125*(1.0/fallout)*log( res );\n    //return res;\n    return dot(res, c);\n    //*/\n    //return fractalNoise(vec3(p, x.z), 16.0, 1.0, 2.0, vec3(0.0), d, s[0]);\n}\nfloat fractalCell(vec3 p, vec4 c, mat4 ds,  mat4 ss) {\n    float value = 0.0;\n    float a = 1.0;\n    float aStep = 0.5;\n    float pStep = 2.0;\n    float tStep = 1.5;\n    vec3 t = vec3(0.0, 0.0, p.z+iTime*0.5);\n    mat4 f = ss;\n    const int steps = 5;\n    for(int i = 0; i < steps; i++) {\n        f = rand44(f, 12345.6789012, 32109.8765432, ds, ss);\n        value += evoronoi(p + t, c, ds, f) * a;\n        a *= aStep;\n        p *= pStep;\n        t *= tStep;\n    }\n    float r = aStep;\n    float sum = (1.0 - pow(r, float(steps))) / (1.0 - r);\n    return mix(0.0, 1.0, value / sum);\n}\nvec3 firePalette(float i){\n\n    float T = 1400. + 1300.*i; // Temperature range (in Kelvin).\n    vec3 L = vec3(7.4, 5.6, 4.4); // Red, green, blue wavelengths (in hundreds of nanometers).\n    L = pow(L,vec3(5.0)) * (exp(1.43876719683e5/(T*L))-1.0);\n    return 1.0-exp(-5e8/L); // Exposure level. Set to \"50.\" For \"70,\" change the \"5\" to a \"7,\" etc.\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    mat4 dotseed = mat4(\n        84.4239141, 72.1623789, 54.2539214, 94.8233014,\n        45.8097063, 19.6603408, 41.9881591, 17.7513314,\n        70.6492482, 72.8228071, 31.9941736, 29.7793959,\n        68.9614210, 33.3000043, 38.8602285, 67.0907920\n    );\n    mat4 sineseed = mat4(\n        8442.39141, 7216.23789, 5425.39214, 9482.33014,\n        4580.97063, 1966.03408, 4198.81591, 1775.13314,\n        7064.92482, 7282.28071, 3199.41736, 2977.93959,\n        6896.14210, 3330.00043, 3886.02285, 6709.07920\n    );\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n\t//uv += vec2(sin(iTime*0.5)*0.25, cos(iTime*0.5)*0.125);\n    //float cs = cos(iTime*0.25), si = sin(iTime*0.25);\n\t//uv = uv*mat2(cs, -si, si, cs); \n    vec3 uvw = vec3(uv * 2.0, 3.1415926535898/8.0);\n    vec4 uvwx = vec4(uv, 0.0, iTime);\n\n    vec4 coeffs = vec4(1.0, 0.0, 0.0, 0.0);\n    coeffs = vec4(0.0, 1.0, 0.0, 0.0);\n    //coeffs = vec4(0.0, 0.0, 1.0, 0.0);\n    //coeffs = vec4(0.0, 0.0, 0.0, 1.0);\n    //coeffs = vec4(-1.0, 1.0, 0.0, 0.0);\n    float c = pow(fractalCell(uvw, coeffs, dotseed, sineseed), 2.0);\n    c = max(c + dot(rand3(uvw, 0.0, 1.0, dotseed, sineseed[0])*2.-1., vec3(0.015)), 0.);\n    c *= sqrt(c)*1.5;\n    \n    vec3 col = firePalette(c);\n    col = mix(\n        col,\n        col.zyx*0.15+c*0.85,\n        min(pow(dot(uv, uv)*1.2, 0.75), 1.)\n    );\n    col = pow(col, vec3(1.5));\n    \n\tfragColor = vec4(sqrt(clamp(col, 0., 1.)), 1.);\n\t//fragColor = vec4(sqrt(vec3(clamp(c, 0., 1.))), 1.);\n}","name":"Image","description":"","type":"image"}]}