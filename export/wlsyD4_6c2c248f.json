{"ver":"0.1","info":{"id":"wlsyD4","date":"1592137723","viewed":619,"name":"math - simple round square ","username":"catafest","description":"a simple round square build using the math function sqrt;","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["example","simple","math","round","square"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// create a function for round square \nvec3 round_square( vec2 uv )\n{\n  // Set the size of the square, can be changed .01 6.\n  float square_dimension = 6.;\n    \n  // Create math function for round sqare shape  \n  float my_square = sqrt(length(pow(uv-vec2(.0,.0),vec2(square_dimension))))-.1;\n    \n  //Set default poz \n  vec3 poz = vec3(1.,1.,1.);\n    \n  // Return the result \n  return mix(vec3(0.1),poz*poz, smoothstep(0.,.001,my_square));\n}\n\n// Set color for the round square\nvec3 color = vec3(.1, 76., 76.);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    // Set color 0,0,0,0\n    fragColor = vec4(0);\n    // u=Use for to build with round_square\n    for (int i = 0; i < 10+int(min(0,iFrame)); i++) {\n        // Set UV2 from basic UV\n        vec2 uv2 = uv + 1. / iResolution.y * 1.25;\n        // Create the round square\n        fragColor += vec4(round_square(uv2) + color.xyz , 1.);\n    }\n    // show the square\n\tfragColor.xyz = (fragColor.xyz/fragColor.w);\n}","name":"Image","description":"","type":"image"}]}