{"ver":"0.1","info":{"id":"lXsBDj","date":"1729023551","viewed":37,"name":"Echoing Circles","username":"8InfinityTaco8","description":"I used the \"An introduction to Shader Art Coding\" tutorial by Kishimisu.\n\nhttps://youtu.be/f4s1h2YETNY?si=7kUQ8l584xKV_xt0","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["distancefield","sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//customizable color pallet to scroll trough \n//vec3 pallete( float t, vec3 a, vec3 b, vec3 c, vec3 d ){\nvec3 pallete(float t){\n     vec3 a = vec3(0.500, 0.500, 0.500);\n     vec3 b = vec3(0.500, 0.500, 0.500); \n     vec3 c = vec3(1.000, 1.000, 1.000);\n     vec3 d = vec3(-0.500, 0.333, 0.667);\n\n    return a + b * cos (6.28318*(c*t+d));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec2 uv0 = uv;\n    \n    //multiplies by x by the current aspect ratio to avoid unwanted strecthign and distortion\n    \n    //uv.x *= iResolution.x / iResolution.y;\n    /*shifts the uv to be centered onthe canvas\n    uv = uv - 0.5;\n    //doubles the uv value so that its 1 instead of .5 because we shifted it \n    uv = uv * 2.0;\n    */\n    \n\n    \n    vec3 finalColor = vec3(0.0);\n    \n    for (float i = 0.0; i < 4.0; i++){\n    uv = fract(uv * 1.5) - 0.5;\n    \n    float d = length(uv) * exp(-length(uv0));\n    \n    vec3 col = pallete(length(uv0) + i *.4 + iTime*.4);\n    //represents the sined distance function fo a circle witha radius 0.5\n    d = sin(d * 8. - iTime)/8.;\n    d = abs(d);\n    \n    //d = step(0.1, d);\n    \n    //d = smoothstep(0.0, 0.1, d);\n    \n    //d = 0.01 / d;\n    d = pow(0.01 / d, 1.2);\n    \n\n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    //vec3 col = vec3(1.0, 2.0, 3.0);\n    \n    \n    col *= d;\n    \n    finalColor += col * d;\n    \n    }\n    \n\n    \n\n    // Output to screen\n    fragColor = vec4(finalColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}