{"ver":"0.1","info":{"id":"XccBWj","date":"1733483406","viewed":81,"name":"Maze Wall Generator","username":"MrNissenDK","description":"Generate random connected walls, though not completely full filling, need a little work","likes":3,"published":3,"flags":0,"usePreview":0,"tags":["random","generator","maze"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define seed (84561)\n#define cellSize 10.\n#define wallSize 1.\n\n#define TOP 0\n#define RIGHT 1\n#define BOTTOM 2\n#define LEFT 3\n\nuint rand(uint i, uint seedling) {\n    uint state = i + (i * 747796405u + 2891336453u) ^ seedling;\n    uint word = ((state >> ((state >> 28u) + 4u)) ^ state) * 277803737u;\n    return (word >> 22u) ^ word;\n}\n\nbool isBitActive(int val, int index) {\n    return (val & (1 << index)) != 0;\n}\n\nint rand(float i) {\n    return int(rand(floatBitsToUint(i), uint(seed + int(iTime) / 2)));\n}\nint rand(int i) {\n    return int(rand(uint(i), uint(seed + int(iTime) / 60)));\n}\n\nint hash21(vec2 src) {\n    return int(rand(rand(floor(src.x)) + rand(floor(src.y))));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 cellRaw = fragCoord/float(cellSize);\n    vec2 cell = floor(cellRaw);\n    vec2 cellPos = (cellRaw - cell) * float(cellSize);\n    \n    int walls = hash21(cell) % 16;\n    int wallsBottom = hash21(cell + vec2(0, 1)) % 16;\n    int wallsLeft = hash21(cell + vec2(-1, 0)) % 16;\n    \n    vec3 col = vec3(0);\n    \n    bool isBottomWall = (isBitActive(walls, BOTTOM) || isBitActive(wallsBottom, TOP));\n    bool itLeftWall = (isBitActive(walls, LEFT) || isBitActive(wallsLeft, RIGHT));\n    \n    \n    if (isBottomWall && cellSize - cellPos.y < wallSize) {\n        col = vec3(1);\n    }\n    if (itLeftWall && cellPos.x < wallSize) {\n        col = vec3(1);\n    }\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}