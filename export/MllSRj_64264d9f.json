{"ver":"0.1","info":{"id":"MllSRj","date":"1438148443","viewed":621,"name":"Intro Ray Tracer","username":"EKnapik","description":"Simple intro ray tracing following IÃ±igo QuÃ­lez's tutorials.","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["raytracing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"/*\n\tTaken from Inigo Quilez's live coding demos\n\thttps://iquilezles.org/live/index.htm\n*/\n\n// GLOBALY Define Sphere\nvec4 sph1 = vec4( 0.0, 1.0, 0.0, 1.0 );\n\n\n\n\n// Returns the value of t that will cause an intersection\nfloat iSphere(in vec3 ro, in vec3 rd, in vec4 sph) {\n\t// This is relating directly to parametric equation\n    // where we define a function xyz = ro + t*rd\n    // solving the quadradic equation below\n    vec3 oc = ro - sph.xyz;\n    float b = dot( oc, rd );\n    float c = dot(oc,oc) - sph.w*sph.w;\n    float h = b*b - c;\n    if( h < 0.0 ) return -1.0;\n    float t = -b - sqrt(h);\n    return t;\n\n}\n\nvec3 nSphere( in vec3 pos, in vec4 sph ) {\n\treturn (pos - sph.xyz) / sph.w;\n}\n\n\n\nfloat iPlane(in vec3 ro, in vec3 rd) {\n\t// equation of a play, y=0 = ro.y + t*rd.y\n    return -ro.y/rd.y;\n}\n\nvec3 nPlane( in vec3 pos ) {\n\treturn vec3(0.0, 1.0, 0.0);\n}\n\n\nfloat intersect(in vec3 ro, in vec3 rd, out float resT) {\n    resT = 10000.0; // infinity kinda\n    float id = -1.0;\n\tfloat tsph = iSphere( ro, rd, sph1 ); // test for instersection with sphere\n    float tpla = iPlane( ro, rd );  // intersece with plane\n    if( tsph > 0.0 ) {\n        id = 1.0; // intersected with sphere\n        resT = tsph; //setting what value of t the intersection took place\n    }\n    if( tpla>0.0 && tpla<resT ) { // if I interesect with t and this is before the sphere\n        id = 2.0; // intersected with plane\n        resT = tpla;\n    }\n    \n    return id;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 light = normalize( vec3(0.57703) );\n    // uv are the pixel coordinates, from 0 to 1\n\tvec2 uv = (fragCoord.xy / iResolution.xy);\n    \n    // Move the sphere around\n    // sph1.x = 0.5*cos(iTime);\n    // sph1.z = 0.5*sin(iTime);\n    \n    // Generate a ray with origin ro and direction rd\n    vec3 ro = vec3( 0.0, 1.0, 2.5 );\n   \t// I believe it is world space transforms\n    vec3 rd = normalize( vec3( (-1.0+2.0*uv)*vec2(1.78,1.0), -1.0 ));\n    \n    \n    // test if the ray intersect the 3d scene\n    float t;\n    float id = intersect( ro, rd, t );\n    \n    // Lighting Calculations need normals\n    // Draw black by default (background)\n    vec3 col = vec3(0.0, 0.0, 0.0);\n    if( id > 0.5 && id < 1.5 ) { // not sure why this is not a check for 1.0 floating point comparison?\n    \t// if we hit sphere\n        vec3 pos = ro + t*rd;\n        vec3 nor = nSphere( pos, sph1 );\n        float diff = clamp(dot(nor, light), 0.0, 1.0);\n        float ao = 0.5 + 0.5*nor.y; // ambient oclusion trick\n        col = vec3( 0.9, 0.8, 0.6 )*diff*ao + vec3(0.1,0.2,0.4)*ao;\n    } else if( id >1.5 ) { \n        // we hit the plane\n        vec3 pos = ro + t*rd;\n        vec3 nor = nPlane( pos );\n        float diff = clamp(dot(nor,light), 0.0, 1.0 );\n        float amb = smoothstep(0.0, 2.0*sph1.w, length(pos.xz-sph1.xz)); // ambient oclusion trick\n        col = vec3(amb*0.7);\n    }\n    \n    col = sqrt(col);\n\tfragColor = vec4(col,1.0);\n}","name":"","description":"","type":"image"}]}