{"ver":"0.1","info":{"id":"MXjXWK","date":"1711119261","viewed":53,"name":"casserole_magique #1","username":"casserole_magique","description":"raymarching based on kishimisu tutorial : https://www.youtube.com/watch?v=khblXafu7iA","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define PI 3.1415926538\n\n\n#define MAX_STEP 80\n#define MAX_DIST 40.0\n#define MIN_DIST 0.0\n#define THRESHOLD 0.001\n\nvec3 palette( in float t)\n{\nreturn .5+.5*cos(6.28318*(t+vec3(.3,.416,.557)));\n}\n\nvec3 twist(in vec3 p, float k )\n{\n    float c = cos(k*p.y);\n    float s = sin(k*p.y);\n    mat2  m = mat2(c,-s,s,c);\n    vec3  q = vec3(m*p.xz,p.y);\n    return q;\n}\n\nfloat sdSphere(vec3 p, float r, vec3 pos)\n{\n    return length(p - pos) - r;\n}\n\nfloat sdBox(vec3 p, vec3 b)\n{\n    vec3 q = abs(p) - b;\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat sdBoxFrame( vec3 p, vec3 b, float e )\n{\n       p = abs(p  )-b;\n  vec3 q = abs(p+e)-e;\n  return min(min(\n      length(max(vec3(p.x,q.y,q.z),0.0))+min(max(p.x,max(q.y,q.z)),0.0),\n      length(max(vec3(q.x,p.y,q.z),0.0))+min(max(q.x,max(p.y,q.z)),0.0)),\n      length(max(vec3(q.x,q.y,p.z),0.0))+min(max(q.x,max(q.y,p.z)),0.0));\n}\n\nfloat twistedBoxFrame( vec3 p, vec3 b, float e, float k)\n{\n    p = twist(p, k);\n    return sdBoxFrame(p, b, e);\n}\n\nfloat sdOctahedron( vec3 p, float s)\n{\n  p = abs(p);\n  float m = p.x+p.y+p.z-s;\n  vec3 q;\n       if( 3.0*p.x < m ) q = p.xyz;\n  else if( 3.0*p.y < m ) q = p.yzx;\n  else if( 3.0*p.z < m ) q = p.zxy;\n  else return m*0.57735027;\n    \n  float k = clamp(0.5*(q.z-q.y+s),0.0,s); \n  return length(vec3(q.x,q.y-s+k,q.z-k));\n}\n\nfloat twistedOctahedron(vec3 p, float s, float k)\n{\n    p = twist(p, k);\n    return sdOctahedron(p, s);\n}\n\nfloat opSmoothUnion( float d1, float d2, float k )\n{\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h);\n}\n\nvec3 rot(vec3 p, vec3 axis, float angle)\n{\n    return mix(dot(axis, p) * axis, p, cos(angle)) + cross(axis, p) * sin(angle);\n}\n\nmat2 rot2d(float angle)\n{\n    float c = cos(angle);\n    float s = sin(angle);\n    return mat2(c, -s, s, c);\n}\n\nfloat map(vec3 p)\n{\n    p.z += iTime * .5;\n    \n    // p.xy = (fract(p.xy) - .5);\n\n    p.z = mod(p.z, .5) - .25;\n    \n    // float box = twistedBoxFrame(p, vec3(0.2), 0.02, cos(iTime * 5.) * 2.);\n\n    // float box = twistedOctahedron(p, .3, cos(iTime * 5.) * 5.);\n    \n    float b1 = sdOctahedron(p + vec3(0.2, 0, 0), .2);\n    return b1;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2. - iResolution.xy) / iResolution.y;  // [-1, 1]\n    \n    \n    vec3 col;\n    \n    vec3 ro = vec3(0, 0, -5);  // ray origin\n    vec3 rd = normalize(vec3(uv, 1));  // ray direction\n    \n    rd.xy *= rot2d(- iTime);\n    \n    /*\n    vec2 m = (iMouse.xy * 2. - iResolution.xy) / iResolution.y;  // mouse position\n    \n    mat2 rotation;\n    \n    rotation = rot2d(- PI * m.y);\n    ro.yz *= rotation;\n    rd.yz *= rotation;\n    \n    \n    rotation = rot2d(- PI * m.x);\n    ro.xz *= rotation;\n    rd.xz *= rotation;\n    */\n\n    float travelled = MIN_DIST;\n    \n    int i;\n    for(i = 0; i < MAX_STEP; i++)\n    {\n        vec3 p = ro + rd * travelled;\n        \n        float d = map(vec3(p.x + cos(travelled), p.y + sin(travelled), p.z));\n        \n        d = min(d, map(vec3(p.x - cos(travelled), p.y - sin(travelled), p.z)));\n         \n        \n        travelled += d;\n        \n        if(d < THRESHOLD || travelled > MAX_DIST) break;\n    }\n    \n    col = palette(travelled * .05 + float(i) * .0);\n    \n    \n    if(travelled <= MAX_DIST)\n    {\n        col = vec3(160, 21, 62) / 255.;\n        col *= 3. / (1. + 3. * float(i));\n    }\n    \n    \n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}