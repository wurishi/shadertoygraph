{"ver":"0.1","info":{"id":"tlXczH","date":"1591407017","viewed":112,"name":"Rhombus Skyhigh","username":"darkfox","description":"colorful rhombus and cloudy background.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["fbm","polygon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// constant.\nconst float pi = 3.14159;\n// palette.\nconst vec3 skyblue = vec3(0.1, 0.65, 0.9);\nconst vec3 red = vec3(0.95, 0.3, 0.35);\nconst vec3 green = vec3(0.3, 0.9, 0.4);\nconst vec3 blue = vec3(0.2, 0.25, 0.98);\nconst vec3 orange = vec3(0.98, 0.49, 0.13);\nconst vec3 lightgreen = vec3(0.7, 0.9, 0.1);\nconst vec3 aquagray = vec3(0.38, 0.65, 0.78);\n// pattern data.\nconst float SCALE = 8.0;\nconst float SPEED = 1.0;\n// e1, e2, mat.\nconst vec2 e1 = vec2(0.86601, 0.5);\nconst vec2 e2 = vec2(-0.86601, 0.5);\nconst mat2 getPtn = mat2(0.33333, -0.33333, 0.57735, 0.57735);\nconst mat2 rot120 = mat2(-0.5, 0.86601, -0.86601, -0.5);\n// for noise.\nconst vec2 u_10 = vec2(1.0, 0.0);\nconst vec2 u_01 = vec2(0.0, 1.0);\nconst vec2 u_11 = vec2(1.0, 1.0);\nconst vec2 r_vector = vec2(12.9898, 78.233);\nconst vec3 r_vec_30 = vec3(127.1, 311.7, 251.9);\nconst vec3 r_vec_31 = vec3(269.5, 183.3, 314.3);\nconst vec3 r_vec_32 = vec3(419.2, 371.9, 218.4);\nconst vec3 u_100 = vec3(1.0, 0.0, 0.0);\nconst vec3 u_010 = vec3(0.0, 1.0, 0.0);\nconst vec3 u_001 = vec3(0.0, 0.0, 1.0);\nconst vec3 u_110 = vec3(1.0, 1.0, 0.0);\nconst vec3 u_101 = vec3(1.0, 0.0, 1.0);\nconst vec3 u_011 = vec3(0.0, 1.0, 1.0);\nconst vec3 u_111 = vec3(1.0, 1.0, 1.0);\nconst float r_coeff = 43758.5453123;\nconst int octaves = 6;\n// random.\nfloat random(vec2 st){\n  return fract(sin(dot(st.xy, r_vector)) * r_coeff);\n}\n// 3D random vector.(-1.0～1.0)\nvec3 random3(vec3 st){\n  vec3 v;\n  v.x = sin(dot(st, r_vec_30)) * r_coeff;\n  v.y = sin(dot(st, r_vec_31)) * r_coeff;\n  v.z = sin(dot(st, r_vec_32)) * r_coeff;\n  return -1.0 + 2.0 * fract(v); // -1.0～1.0.\n}\n// simplex noise.\nfloat snoise3(vec3 st){\n  vec3 p = st + (st.x + st.y + st.z) / 3.0;\n  vec3 f = fract(p);\n  vec3 i = floor(p);\n  vec3 g0, g1, g2, g3;\n  vec4 wt;\n  g0 = i;\n  g3 = i + u_111;\n  if(f.x >= f.y && f.x >= f.z){\n    g1 = i + u_100;\n    g2 = i + (f.y >= f.z ? u_110 : u_101);\n    wt = (f.y >= f.z ? vec4(1.0 - f.x, f.x - f.y, f.y - f.z, f.z) : vec4(1.0 - f.x, f.x - f.z, f.z - f.y, f.y));\n  }else if(f.y >= f.x && f.y >= f.z){\n    g1 = i + u_010;\n    g2 = i + (f.x >= f.z ? u_110 : u_011);\n    wt = (f.x >= f.z ? vec4(1.0 - f.y, f.y - f.x, f.x - f.z, f.z) : vec4(1.0 - f.y, f.y - f.z, f.z - f.x, f.x));\n  }else{\n    g1 = i + u_001;\n    g2 = i + (f.x >= f.y ? u_101 : u_011);\n    wt = (f.x >= f.y ? vec4(1.0 - f.z, f.z - f.x, f.x - f.y, f.y) : vec4(1.0 - f.z, f.z - f.y, f.y - f.x, f.x));\n  }\n  float value = 0.0;\n  wt = wt * wt * wt * (wt * (wt * 6.0 - 15.0) + 10.0);\n  value += wt.x * dot(p - g0, random3(g0));\n  value += wt.y * dot(p - g1, random3(g1));\n  value += wt.z * dot(p - g2, random3(g2));\n  value += wt.w * dot(p - g3, random3(g3));\n  return value;\n}\n// fbm.\nfloat fbm(vec3 st){\n  float value = 0.0;\n  float amplitude = 0.5;\n  for(int i = 0; i < octaves; i++){\n    value += amplitude * snoise3(st);\n    st *= 2.0;\n    amplitude *= 0.5;\n  }\n  return value;\n}\n// backgroundColor. (clouds)\nvoid setBackgroundColor(in vec2 p, inout vec3 col){\n  float n = 0.5 + 0.5 * fbm(vec3(p + e1 * iTime * SPEED * 0.3, iTime * SPEED * 0.1));\n  col = skyblue + (vec3(0.9) - skyblue) * smoothstep(0.44, 0.56, n);\n}\n// pattern.\nvoid setPattern(in vec2 p, inout vec3 col, vec3 ptnColor1, vec3 ptnColor2){\n  p.x -= iTime * SPEED;\n  p *= SCALE;\n  vec2 q = getPtn * p;\n  vec2 f = fract(q);\n  vec2 i = floor(q);\n  if(mod((i.x - 1.0) * (i.y - 1.0), 2.0) == 0.0){ return; }\n  float rnd = random(i);\n  if(rnd < 0.4){ return; }\n  // move f to center, normalize.\n  f = 2.0 * (f - vec2(0.5));\n  // stretch factor.\n  float factor = sin(iTime * 6.0 + rnd * 2.0 * pi);\n  // stretch length.\n  float l = rnd * factor * 0.5;\n  // coeff of line equation.\n  vec2 k = vec2(l, abs(2.0 * abs(l) - 1.0)) / (1.0 - abs(l));\n  if(abs(f.x - k.x * f.y) > k.y || abs(f.y - k.x * f.x) > k.y){ return; }\n  float d = max(abs(f.x - k.x * f.y), abs(f.y - k.x * f.x)) / k.y;\n  d = d * d * (3.0 - 2.0 * d);\n  col = (ptnColor1 + (ptnColor2 - ptnColor1) * step(0.7, rnd)) * d;\n  col = mix(col, vec3(1.0), 0.5 * abs(factor));\n}\n// mainCode.\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n  vec2 p = (fragCoord.xy * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n  vec3 col;\n  setBackgroundColor(p, col);\n  setPattern(p, col, red, orange);\n  p = rot120 * p;\n  setPattern(p, col, blue, aquagray);\n  p = rot120 * p;\n  setPattern(p, col, green, lightgreen);\n  fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}