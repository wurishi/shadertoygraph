{"ver":"0.1","info":{"id":"MftGz8","date":"1711405471","viewed":60,"name":"FractalComplexSine","username":"Plastic","description":"A fractal made with the complex sine function and square root.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fractal","complexplane","complexsinefunction"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvec2 add(vec2 Z, vec2 C)\n{\n    return vec2(Z.x+C.x, Z.y+C.y);\n}\n\nvec2 sub(vec2 Z, vec2 C)\n{\n    return vec2(Z.x-C.x, Z.y-C.y);\n}\n\nvec2 root(vec2 Z)\n{\n    return vec2(sqrt((length(Z)+Z.x)/2.), (Z.y/abs(Z.y)*sqrt((length(Z)-Z.x)/2.)));\n}\n\nvec2 div(vec2 Z, vec2 C)\n{\n    float divisor = (C.x*C.x+C.y*C.y);\n    return vec2((Z.x*C.x+Z.y*C.y)/divisor, (Z.y*C.x-Z.x*C.y)/divisor);\n}\n\nvec2 mult(vec2 Z, vec2 C)\n{\n    return vec2(Z.x*C.x-Z.y*C.y, Z.x*C.y+Z.y*C.x);\n}\n\nvec2 complexsine(vec2 Z)\n{\n    return vec2(sin(Z.x)*cosh(Z.y), cos(Z.x)*sinh(Z.y));\n}\n\nvec3 color(int a, int top)\n{   \n    return vec3(.0, float(a)/float(top), float(a)/float(top))*40.;\n}\n\nvec3 calcComplex(vec2 uv, int iterations, float exclude, vec2 C)\n{\n    vec2 Z = uv;\n    \n    for(int i = 1; i<iterations; i++)\n    {\n        vec2 up = vec2(Z.x, Z.y);\n        \n        Z = mult( root(add(complexsine(up), C)), (sub(up, complexsine(C))) );\n        \n        if(length(Z) > exclude)\n        {\n            return color(i, iterations);\n        }\n    \n    }\n    \n    return vec3(.0); \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //vec2 uv = ((fragCoord/iResolution.xy*2.-1.)*1.5)/pow(iTime, 2.)+vec2(.0, 0.475);\n    vec2 uv = ((fragCoord/iResolution.xy*2.-1.)*1.5)+vec2(0.2, .0);\n    //uv.x *= iResolution.x/iResolution.y;\n\n    vec3 col = calcComplex(vec2(.0, .0), 1000, 5., uv);\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}