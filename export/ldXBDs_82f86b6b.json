{"ver":"0.1","info":{"id":"ldXBDs","date":"1498773879","viewed":928,"name":"round voronoi","username":"abje","description":"my first voronoi edge distance shader, uses smoothmin to make round corners","likes":22,"published":3,"flags":0,"usePreview":0,"tags":["voronoi"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define time iTime\n#define roundness 1.0\n\nfloat dot2(vec2 p) {\n    return dot(p,p);\n}\n//smoothmin function by iq\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat map(vec2 p) {\n    float len = 10000.0;\n    vec2 cell;\n    \n    //finding closest point\n    for(float i = 1.0; i < 10.0; i++) {\n        //making cell position\n        vec2 orig = vec2(sin(time*i*0.1),cos(time*i*0.12))*10.0;\n        \n        //checking if this cell is closer than the others\n        if (len > dot2(p-orig)) {\n            cell = orig;\n            len = dot2(p-orig);\n        }\n    }\n    //resetting length\n    //len = 10000.0;\n    \n    //finding length\n    for(float i = 1.0; i < 10.0; i++) {\n        //making cell position\n        vec2 orig = vec2(sin(time*i*0.1),cos(time*i*0.12))*10.0;\n        \n        //comment out the line under, i dare you!!!\n        if (!any(equal(orig,cell)))\n        {\n            //the point between two cells\n            vec2 mid = (orig+cell)*0.5;\n            //finding the length from the two cells borders\n            float num = dot(normalize(orig-cell),p-mid);\n            //compare to current smallest length from borders\n            len = smin(len,abs(num),roundness);\n        }\n    }\n    \n    \n    \n    return len;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = 10.0*(fragCoord.xy*2.0-iResolution.xy) / iResolution.y;\n    \n\tfragColor = vec4((map(uv)*10.0));\n}","name":"Image","description":"","type":"image"}]}