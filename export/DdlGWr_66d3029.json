{"ver":"0.1","info":{"id":"DdlGWr","date":"1665978385","viewed":83,"name":"Rotating ring - learning","username":"dgobera","description":"Learning how to make a rotating ring","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["learning"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 hsb2rgb( in vec3 c );\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.y;\n\n    vec3 col = hsb2rgb(vec3(137./360., 0.0, 0.1));\n    vec3 ringCol = hsb2rgb(vec3(77./360., 0.61, 0.92));\n    \n    float aaBlur = 1.5 / iResolution.y;\n    float aaBlurRadial = 0.15;\n    float radius = 0.4;\n    const float width = 0.03;\n    const vec2 center = vec2(0.8, 0.5);\n    const float speedFactor = 2.0;\n    \n    // oscillating ring radius\n    radius = sin(iTime) * 0.08 + 0.3;\n\n    // shift the center of the ring to the origin\n    // then we don't need to use distance(center, uv), just length(uv)\n    uv -= center;\n\n    // polar coordinates of this pixel relative to the circle's center\n    float r = length(uv);\n    float a = atan(uv.y, uv.x);\n\n    // outer part of the ring, this draws a filled circle\n    float ring = 1. - smoothstep(radius, radius+aaBlur, r);\n    \n    // using min, subtract a smaller circle from the original one\n    float innerRadius = radius - width;\n    ring = min(ring, smoothstep(innerRadius, innerRadius+aaBlur, r));\n    \n    // only paint some parts of the ring, based on the angle\n    float dotted = 1.0;\n    \n    // option 1: a half moon\n    dotted = dotted = sin(a + iTime * speedFactor);\n    \n    // option 2: fixed number of sections\n    const float segments = 6.;\n    const float motionBlur = 7.0;\n    dotted = sin((a - iTime * speedFactor) * segments);\n    dotted = smoothstep(0., aaBlurRadial * motionBlur, dotted);\n    \n    ring = min(ring, dotted);\n    \n    \n    col = mix(col, ringCol, ring);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n\n//  Function from IÃ±igo Quiles\n//  https://www.shadertoy.com/view/MsS3Wc\nvec3 hsb2rgb( in vec3 c ){\n    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),\n                             6.0)-3.0)-1.0,\n                     0.0,\n                     1.0 );\n    rgb = rgb*rgb*(3.0-2.0*rgb);\n    return c.z * mix(vec3(1.0), rgb, c.y);\n}\n","name":"Image","description":"","type":"image"}]}