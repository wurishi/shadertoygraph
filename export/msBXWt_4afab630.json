{"ver":"0.1","info":{"id":"msBXWt","date":"1697000020","viewed":85,"name":"bokeh tutorial","username":"MaxShaders","description":"Based of tutorial by The Art of Code\nOriginal: https://www.shadertoy.com/view/MdfBRX","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["bokeh"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define S(a, b, t) smoothstep(a,b,t)\nstruct ray {\n    vec3 o, d;\n};\n\nray GetRay(vec2 uv, vec3 camPos, vec3 lookat, float zoom) {\n    ray a;\n    a.o = camPos;\n    \n    vec3 f = normalize(lookat - camPos);\n    vec3 r = cross(vec3(0, 1, 0), f);\n    vec3 u = cross(f, r);\n    vec3 c = a.o + f * zoom;\n    vec3 i = c + uv.x * r + uv.y * u;\n    \n    a.d = normalize(i - a.o);\n    \n    return a;\n}\n\nfloat N(float t) {\n    return fract(sin(t * 3456.) * 6547.);\n}\n\nvec4 N14(float t) {\n    return fract(sin(t * vec4(123., 1024., 3456., 9564.)) * vec4(6547., 345., 8799., 1564.));\n}\n\nvec3 ClosestPoint(ray r, vec3 p) {\n    return r.o + max(0.0, dot(p - r.o, r.d)) * r.d;\n}\n\nfloat DistRay(ray r, vec3 p) {\n    return length(p - ClosestPoint(r, p));\n}\n\nfloat Bokeh(ray r, vec3 p, float size, float blur) {\n    float d = DistRay(r, p);\n    size *= length(p);\n    float c = S(size, size * (1.0 - blur), d);\n    c *= mix(0.7, 1.0, S(size * 0.8, size, d));\n    return c;\n}\n\nvec3 StreetLights(ray r, float t)\n{\n    float side = step(r.d.x, 0.);\n    r.d.x = abs(r.d.x);\n    float s = 0.1;\n    float m = 0.;\n    for(float i = 0.; i < 1.; i += s)\n    {\n        float ti = fract(t + i + side * s / 2.);\n        vec3 p = vec3(2.0, 2.0, 100. - ti * 100.);\n        m += Bokeh(r, p, 0.05, 0.1) * ti * ti * ti;\n    }\n\n    return vec3(0.9, 0.7, 0.3) * m;\n}\n\nvec3 Headlights(ray r, float t)\n{\n    t *= 2.0;\n    float w1 = 0.25;\n    float w2 = w1 * 1.2;\n    float s = 0.03;\n    float m = 0.;\n    for(float i = 0.; i < 1.; i += s)\n    {\n        float n = N(i);\n        if(n > 0.1) continue;\n        \n        float ti = fract(t + i );\n        float z = 100. - ti * 100.;\n        float fade = ti * ti * ti * ti * ti;\n        float focus = S(0.9, 1.0, ti);\n        float size = mix(0.05, 0.03, focus);\n        \n        m += Bokeh(r, vec3(-1.0 - w1, 0.15, z), size, 0.1) * fade;\n        m += Bokeh(r, vec3(-1.0 + w1, 0.15, z), size, 0.1) * fade;\n        \n        m += Bokeh(r, vec3(-1.0 - w2 , 0.15, z), size, 0.1) * fade;\n        m += Bokeh(r, vec3(-1.0 + w2, 0.15, z), size, 0.1) * fade;\n        \n        float ref = 0.0;\n        ref += Bokeh(r, vec3(-1.0 - w2 , -0.15, z), size * 3.0, 1.0) * fade;\n        ref += Bokeh(r, vec3(-1.0 + w2, -0.15, z), size * 3.0, 1.0) * fade;\n        \n        m += ref * focus;\n    }\n\n    return vec3(0.9, 0.9, 1.0) * m;\n}\n\nvec3 Taillights(ray r, float t)\n{\n    t *= 0.25;\n    float w1 = 1. / 15.;\n    float w2 = w1 * 1.2;\n    float s = 0.023;\n    float m = 0.;\n    for(float i = 0.; i < 1.; i += s)\n    {\n        float n = N(i);\n        if(n > 0.5) continue;\n        \n        float lane = step(0.25, n);\n        float ti = fract(t + i);\n        float z = 100. - ti * 100.;\n        float fade = ti * ti * ti * ti * ti * ti * ti * ti * ti;\n        float focus = S(0.9, 1.0, ti);\n        float size = mix(0.05, 0.03, focus);\n        \n        float laneshift = S(1.0, 0.96, ti);\n        float x = 1.5 - lane * laneshift;\n        \n        float blink = step(0., sin(t * 700.)) * 7. * lane * step(0.96, ti);\n        \n        m += Bokeh(r, vec3(x - w1, 0.15, z), size, 0.1) * fade;\n        m += Bokeh(r, vec3(x + w1, 0.15, z), size, 0.1) * fade;\n        \n        m += Bokeh(r, vec3(x - w2 , 0.15, z), size, 0.1) * fade;\n        m += Bokeh(r, vec3(x + w2, 0.15, z), size, 0.1) * fade * (1. + blink);\n        \n        float ref = 0.0;\n        ref += Bokeh(r, vec3(x - w2 , -0.15, z), size * 3.0, 1.0) * fade;\n        ref += Bokeh(r, vec3(x + w2, -0.15, z), size * 3.0, 1.0) * fade * (1. + blink * 0.1);\n        \n        m += ref * focus;\n    }\n\n    return vec3(1.0, 0.1, 0.03) * m;\n}\n\nvec3 Envlights(ray r, float t)\n{\n    float side = step(r.d.x, 0.);\n    r.d.x = abs(r.d.x);\n    float s = 0.03;\n    vec3 c = vec3(0.0);\n    for(float i = 0.; i < 1.; i += s)\n    {\n        float ti = fract(t + i + side * s / 2.);\n        vec4 n = N14(i + side * 100.);\n        float fade = ti * ti * ti;\n        float occlution = sin(ti * 6.28 * 10. * n.x) * 0.5 + 0.5;\n        float x = mix(2.5, 10.0, n.x);\n        float y = mix(0.1, 1.5, n.y);\n        \n        vec3 p = vec3(x, y, 50. - ti * 50.);\n        c += Bokeh(r, p, 0.05, 0.1) * fade * n.wzy * occlution;\n    }\n\n    return c;\n}\n\nvec2 Rain(vec2 uv, float t) {\n    t *= 20.;\n    vec2 a = vec2(3.0, 1.0);\n    vec2 st = uv * a;\n    \n    vec2 id = floor(st);\n    st.y += t * 0.22;\n    st.y += fract(sin(id.x * 716.34) * 768.34);\n    id = floor(st);\n    st = fract(st) - 0.5;\n    t += fract(sin(id.x * 76.34 + id.y * 153.7) * 768.34) * 6.28;\n    \n    float y = -sin(t + sin(t + sin(t) * 0.5)) * 0.44;\n    vec2 p1 = vec2(0.0, y);\n    vec2 o1 = (st - p1) / a;\n    \n    float d = length(o1);\n    float m1 = S(0.07, 0.0, d);\n    \n    vec2 o2 = (fract(uv * a.x * vec2(1., 2.)) - 0.5) / vec2(1., 2.);\n    d = length(o2);\n    float m2 = S(0.3 * (0.5 - st.y), 0.0, d) * S(-0.1, 0.1, st.y - p1.y);\n    \n    return vec2(m1 * o1 * 30. + m2 * o2 * 10.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5;\n    uv.x *= iResolution.x / iResolution.y;\n\n    vec2 m = iMouse.xy / iResolution.xy;\n    vec3 camPos = vec3(0.5, 0.2, 0);\n    vec3 lookat = vec3(0.5, 0.2, 1.0);\n    \n    float t = iTime * 0.05 + m.x;\n    \n    vec2 rainDistort = Rain(uv * 5., t) * 0.5;\n    rainDistort += Rain(uv * 7., t) * 0.5;\n    \n    uv.x += sin(uv.y * 50.) * 0.001;\n    uv.y += sin(uv.x * 121.) * 0.001;\n    ray r = GetRay(uv - rainDistort * 0.5, camPos, lookat, 2.0);\n    \n    vec3 col = StreetLights(r, t);\n    col += Headlights(r, t);\n    col += Taillights(r, t);\n    col += Envlights(r, t);\n    col += (r.d.y + 0.25) * vec3(0.2, 0.1, 0.5);\n    //col = vec3(rainDistort, 0.);\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}