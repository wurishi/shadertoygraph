{"ver":"0.1","info":{"id":"43jSDy","date":"1711025662","viewed":85,"name":"Over the moon shader tutorial ","username":"DanielWooldridge","description":"Follow a tutorial by The Art of Code on Youtube to learn about how to manipulate sine waves and more \nCan be found here -> https://www.youtube.com/watch?v=XaiYKkxvrFM&ab_channel=TheArtofCode","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["forest","moon","nature","nighttime"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define S(a, b, t) smoothstep(a, b, t)\n\nfloat TaperBox(vec2 p, float wb, float wt, float yb, float yt, float blur)\n{\n    float m = S(-blur, blur, p.y - yb);\n    m *= S(blur, -blur, p.y - yt);\n    \n    p.x = abs(p.x);\n    \n    // return 0 p.y = yb return 1 p.y=yt\n    float w = mix(wb, wt, (p.y-yb) / (yt-yb));\n    m *= S(blur, -blur, p.x - w);\n    //m *= S(blur, -blur, p.x - wt);\n    return m;\n}\n\n\nvec4 Tree(vec2 uv, vec3 col, float blur)\n{\n  \n    float m = TaperBox(uv, 0.03, 0.03, -0.05, 0.25, blur); // tree trunk\n    m += TaperBox(uv, 0.2, 0.1, 0.25, 0.5, blur); // Canopy 1\n    m += TaperBox(uv, 0.15, 0.05, 0.5, 0.75, blur); // Canopy 2\n    m += TaperBox(uv, 0.1, 0.0, 0.75, 1.0, blur); // Top\n    \n    float shadow = TaperBox(uv-vec2(0.2, 0), 0.1, 0.5, 0.15, 0.25, blur);\n    shadow += TaperBox(uv+vec2(0.25, 0), 0.1, 0.5, 0.45, 0.5, blur);\n    shadow += TaperBox(uv-vec2(0.25, 0), 0.1, 0.5, 0.7, 0.75, blur);\n   \n    \n    col -= shadow*0.75;\n    //m = 1.0;\n    \n    return vec4(col, m);\n}\n\nfloat GetHeight(float x)\n{\n    return sin(x* 0.3345) + sin(x) * 0.3;\n}\n\nvec4 Layer(vec2 uv, float blur)\n{\n    vec4 col = vec4(0);   \n    float id = floor(uv.x);\n    float n = fract(sin(id*234.12)*5463.3)*2.0 - 1.0;\n    float x = n * 0.3;\n    float y = GetHeight(uv.x);\n    \n    float ground = S(blur, -blur, uv.y - y); //Ground\n    col += ground;\n    \n    y = GetHeight(id + 0.5 + x);\n      \n    uv.x = fract(uv.x) - 0.5;\n    \n    vec4 tree = Tree((uv - vec2(x, y))*vec2(1, 1.0 + n * 0.2), vec3(1), blur);\n    \n    col = mix(col, tree, tree.a);\n    col.a = max(ground, tree.a);\n    \n    return col;\n    \n}\n\nfloat Hash21(vec2 p)\n{\n    p = fract(p * vec2(234.45, 765.34));\n    p += dot(p, p + 547.123);\n    return fract(p.x * p.y);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    vec2 M = iMouse.xy/iResolution.xy * 2.0 - 1.0;\n    float t = iTime * 0.7;\n    float blur = 0.005;\n    \n   \n    \n    float twinkle = dot(length(sin(uv + t)), length(cos(uv * vec2(23, 6.7 - t * 3.0))));\n    twinkle = sin(twinkle * 10.0) * 0.5 + 0.5;\n    float stars = pow(Hash21(uv), 100.0) * twinkle;\n    vec4 col = vec4(stars);\n    \n    float moon = S(0.01, -0.01, length(uv - vec2(0.4, 0.2)) - 0.15); // moon circle\n    col *=  1.0 - moon;\n    moon -= S(0.1, -0.01, length(uv - vec2(0.5, 0.25)) - 0.15); // creating another circle but cut it out of original to create a crescent\n    col += moon;\n    \n    vec4 layer;\n    \n    for(float i =0.0; i < 1.0; i +=1.0 / 10.0)\n    {\n         float scale = mix(30.0, 1.0, i);\n         blur = mix(.05, 0.005, i);\n         layer = Layer(uv * scale + vec2(t + i * 50.0, i) - M, blur);\n         layer.rgb *= (1.-i) * vec3(0.9, 0.9, 1.0);\n         \n         col = mix(col, layer, layer.a);\n    }\n   \n    layer = Layer(uv + vec2(t, 1) - M, 0.04);\n    col = mix(col, layer * 0.1, layer.a);\n    \n    // Output to screen\n    fragColor = col;\n}","name":"Image","description":"","type":"image"}]}