{"ver":"0.1","info":{"id":"4t2Szw","date":"1442474372","viewed":168,"name":"First ray marching shader","username":"AdamAlexander","description":"Maybe its a bit cheesy","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","displacement"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"float time = iTime - 8.0;\n\nfloat sdSphere( vec3 p, float s )\n{\n    return length(p)-s;\n}\n\nfloat height(in vec2 p)\n{\n\treturn (0.10 + .10*sin(time/6.0))*sin(p.x*(12.+2.*sin(time/6.0))) \n         + (0.10 + .10*sin(time/6.0))*cos(p.y*12.+2.*sin(time/6.0))\n         + 1.0*sin(time/6.0);\n}\n\nfloat displace(in vec3 pos)\n{\n    float d = 0.0;\n\tvec3 n = normalize(pos);\n    \n    float upness = clamp(dot(abs(n), vec3(0.0, 1.0, 0.0)), 0.0, 1.0);\n    upness *= upness;\n    \n    float forwardness = clamp(dot(abs(n), vec3(0.0, 0.0, 1.0)), 0.0, 1.0);\n    forwardness *= forwardness;\n    \n    float sideness = clamp(dot(abs(n), vec3(1.0, 0.0, 0.0)), 0.0, 1.0);\n    sideness *= sideness;\n    \n    d += mix(0.0, height(pos.xz), upness);\n    d += mix(0.0, -0.3*height(pos.yx*2.), forwardness);\n    d += mix(0.0, -0.3*height(pos.yz*2.), sideness);\n    return d;\n}\n\nvec2 map(in vec3 pos)\n{\n    float disp = displace(pos);\n    vec2 res = vec2(sdSphere(pos, 1.0+disp), 1.0);\n  \n    return res;\n}\n\n// From \"Ray Marching - Primitives\" shader: https://www.shadertoy.com/view/Xds3zN\nvec3 calcNormal( in vec3 pos )\n{\n\tvec3 eps = vec3( 0.001, 0.0, 0.0 );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\n\nfloat softshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<16; i++ )\n    {\n\t\tfloat h = map( ro + rd*t ).x;\n        res = min( res, 8.0*h/t );\n        t += clamp( h, 0.02, 0.10 );\n        if( h<0.001 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\nvec2 rayMarch(in vec3 ro, in vec3 rd, float tol, float tmin, float tmax)\n{\n\tfloat precis = .00002;\n\n\tfloat t = tmin;\n\tfloat m = -1.0;\n\tfor (int i=0; i<60; i++)\n\t{\n\t\tvec2 res = map(ro+rd*t);\n\t\tif (res.x < precis || t > tmax) \n\t\t{\n            m = res.y;\n            break;\n\t\t}\n\t\tt += res.x*tol;\n\t\tm = res.y;\n\t}\n\n\tif (t > tmax)\n\t{\n\t\tm = -1.0;\n\t}\n\treturn vec2(t, m);\n}\n\nvec3 render(in vec3 ro, in vec3 rd)\n{\n    vec3 col0 = vec3(0.02, 0.005, 0.05);\n    vec3 col1 = vec3(0.95, 0.85, 0.7);\n    //vec3 col2 = vec3(1.0, 1.0, 1.0);\n    vec3 col2 = vec3(1.0, 0.8, 0.3);\n    float i = (1.0+sin(time/6.0))/2.0;\n    i *= i;\n    vec3 col = mix(col0, col2, i);\n        \n\tvec2 res = rayMarch(ro, rd, 0.4, 1.0, 60.0);\n\tfloat t = res.x; \n\tfloat m = res.y;\n\n\tif (m > 0.0)\n\t{\n\t\tvec3 pos = ro + t*rd;\n\t\tvec3 nor = calcNormal(pos);\n        vec3 ref = reflect( rd, nor );\n\n        float occ = calcAO( pos, nor );\n \t\tvec3 lig = normalize( vec3(4.6, 0.2, -2.5) );\n        vec3 amb = vec3(0.6, 0.4, 0.2);\n        vec3 em = vec3(0.9, 0.3, 0.9);\n\t\t\n        if (m == 1.)\n        {\n            float dif = clamp( dot( nor, lig ), 0.0, 1.0 );\n            float spe = pow(clamp( dot( ref, lig ), 0.0, 1.0 ),4.0);\n            float fre = pow( clamp(1.0+dot(nor,rd),0.0,1.0), 2.0 );\n            \n            dif *= softshadow( pos, lig, 0.02, 2.5 );\n            \n            vec3 brdf = 0.6*dif*vec3(1.0,0.8,0.7);\n            brdf += 0.2*spe*vec3(1.0, 0.8, 0.7)*dif;\n            brdf += 0.2*amb*(nor.y+1.)/2.0*occ;\n            brdf += (0.4+0.6*i)*fre*vec3(1.0, 0.7, 0.5)*occ;\n            brdf += i*i*i*i*i*i*3.5*em;\n            col = col*brdf;\n        }\n    }\n    else\n    {\n        col1 = vec3(0.0, 0.0, 0.0);\n        col2 = vec3(1.0, 0.9, 0.8);\n        float rayIntoScreeness = clamp(dot(rd, vec3(0,0,1.0)), 0.0, 1.0);\n        rayIntoScreeness = pow(rayIntoScreeness, 8.0);\n        col = mix(col1, col2, i*i*i*i*i*i*2.0*rayIntoScreeness);\n    }\n\t \n\treturn col;\n}\t\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy/iResolution.xy;\n\tvec2 p = -1.0+2.0*q;\n\tp.x *= iResolution.x/iResolution.y;\n    vec2 mo = iMouse.xy/iResolution.xy;\n    \n    // Camera origin\n\tvec3 ro = vec3(0.0, 0.0, -5.0);\n\n\t// Camera look-at pos\n    vec3 ta = vec3( 0.0, 0.0, 0.0 );\n    \n\t// camera-to-world transformation\n    mat3 ca = setCamera( ro, ta, 0.0 );\n    \n    // ray direction\n\tvec3 rd = ca * normalize( vec3(p.xy,2.0) );\n    \n\tvec3 col = render(ro, rd);\n    col = pow( col, vec3(0.4545) );\n\tfragColor = vec4(col, 1.0);\n}","name":"","description":"","type":"image"}]}