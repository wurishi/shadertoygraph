{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"#define PI 3.141592653589793238\n#define SPHERES 4.0\n#define SPHERE_SHINE 30.0\n\nfloat iSphere (vec3 ro, vec3 rd, vec3 c, float r, out float t){\n\n    float B = 2.0* dot(ro - c,rd);\n    float C = pow(length(ro -c),2.0) -pow(r,2.0);\n    float d = pow(B,2.0) - 4.0*C;\n    if (d < 0.0){\n    \treturn -1.0;\n    }\n    \n    t = (-B - sqrt(d))/2.0;    \n    return 1.0;\n\t\n}\n\nvec3 nSphere(vec3 pos, vec3 c){\n\n    return normalize(pos-c);\n    \n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = vec2(-1.0 + 2.0*fragCoord.xy / iResolution.xy);\n    float ar = iResolution.x / iResolution.y;\n    vec2 r =  vec2(uv.x * ar,uv.y);\n    \n    vec3 ro = vec3(0.0,0.0,3.0);\n\tvec3 rd = normalize(vec3(r.xy,-3.0));\n\n    \n    vec3 l_1pos = vec3(0.0,sin(iTime),0.0);\n    float l_1kd = 0.6;\n    float l_1ks = 0.3;\n    \n    vec3 l_2pos = vec3(2.0*ar*sin(iTime*1.523),0.0,2.0*ar*cos(iTime*1.523));\n    float l_2kd = 0.6;\n    float l_2ks = 0.3;\n    \n    float ka = 0.02;\n    \n    float shading1 = 0.0;\n    float shading2 = 0.0;\n    float t = -1.0;\n    float t_temp = -1.0;\n\n    for (float i = 0.0;i<SPHERES;i+=1.0){\n        vec3 s_c = vec3((ar/2.0)*cos(iTime+i*2.0*PI/SPHERES),\n                        0.0,(ar/2.0)*sin(iTime+i*2.0*PI/SPHERES));\n        float s_r = 0.3 + 0.1*i;\n        \n        if ((iSphere(ro,rd,s_c,s_r,t_temp) > 0.5) &&\n        (((t_temp < t) && (t_temp > 0.0)) || (t < 0.0))){\n        \tt = t_temp;\n        \tvec3 pos = ro + t*rd;\n            vec3 Lm = normalize(l_1pos-pos);\n            vec3 N = nSphere(pos,s_c);\n            vec3 Rm = 2.0*dot(Lm,N)*N - Lm;\n            vec3 Lm_2 = normalize(l_2pos-pos);\n\t\t\tvec3 Rm_2 = 2.0*dot(Lm_2,N)*N - Lm_2;\n\n        \tshading1 = ka + max(0.0,l_1kd*dot(Lm,N)) + max(0.0,l_1ks *pow(dot(Rm,-rd),SPHERE_SHINE));\n            shading2 = l_2kd*dot(Lm_2,N) + max(0.0,l_2ks *pow(dot(Rm_2,-rd),SPHERE_SHINE));\n            \n    \t\t}\n    \n        }\n    \n\n    \n    vec3 col = vec3(shading1,shading2,0.0);\n    \n\tfragColor = vec4(col,1.0); \n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4lfGRH","date":"1418303199","viewed":251,"name":"Multi-Sphere Raytrace","username":"Steel_Neuron","description":"Nothing spectacular really, just learning the basics of ray tracing! I wanted to do a variable number of spinning spheres. I'm a bit confused because modifying ro at line 33 doesn't make the camera go back as I'd expect. What am I misunderstanding there? ","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["test","raytracer","basic","learning"],"hasliked":0,"parentid":"","parentname":""}}