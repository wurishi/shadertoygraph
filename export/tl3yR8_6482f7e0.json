{"ver":"0.1","info":{"id":"tl3yR8","date":"1608448108","viewed":57,"name":"Colorful star","username":"rrx","description":"a rotating star","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["star","rotating"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 rotatexy(vec2 uv, float r) \n{\n    float x1 = sin(r);\n    float x2 = cos(r);\n    mat2 m = mat2(x1,x2,-x2,x1);\n    return uv * m;\n}\n\nfloat bump(float x)\n{\n    return smoothstep(-1., 0., x) - smoothstep(0., 1., x);\n}\n\nfloat smoothbump(float r, float dr, float d)\n{\n    return smoothstep(r-dr, r, d) - smoothstep(r, r+dr, d);\n}\n\nfloat hardbump(float r, float dr, float d) \n{\n    return step(r, d) - step(r+dr, d);\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n     // normalize aspect\n    vec2 R = iResolution.xy;\n    vec2 uv = ( R - 2.*fragCoord ) / R.y;\n    \n    vec2 uv0 = uv;\n    float phi = atan(uv0.y, uv0.x) + iTime*0.1;\n    float d0 = length(uv0);\n    float d = -0.3 + d0 + 0.3*sin(5.*phi);\n    //d  = d * smoothstep(0., 0.2, d0);\n    //d  = d * step(0.1, d0);\n    \n    float r = .5;\n    float dr = 200./R.x;\n    \n    float c1 = smoothbump(r, dr, d);\n    float c2 = smoothbump(r*1.5, dr, d);\n    float c3 = smoothbump(r/1.5, dr, d);\n    \n//    float c4 = .8 * bump((d-0.3)*1.5);\n    float c4 = smoothbump(0.1, dr, d0);\n//    c4 = c4 - c4*smoothstep(0.2, .3, d);\n    //c4 = c4 * step(0.01, d);\n    \n    // Time varying pixel color\n    vec3 col1 = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    vec3 col2 = col1.zyx;\n    vec3 col3 = col1.yzx;\n    vec3 col4 = col1.zxy;\n    \n    vec3 col = col1 * c1 + col2 * c2 + col3 * c3 + col4 * c4;\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}