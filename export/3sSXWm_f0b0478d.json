{"ver":"0.1","info":{"id":"3sSXWm","date":"1554306466","viewed":137,"name":"dancing rings","username":"taso69","description":"Simple 2D dancing rings","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["2d","ring"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Distant functions refer to iq's article\n//https://iquilezles.org/articles/distfunctions2d\n\n#define PI  3.141592\n\nmat2 rotate(float i){\n    float c = cos(i);\n    float s = sin(i);\n    return mat2(c,-s,s,c);\n}\n\nfloat circle(vec2 pos, float r){\n    return length(pos) - r;\n}\n\nfloat ring(vec2 pos, float r, float width){\n    return abs(circle(pos,r)) - width;\t\n}\n\nfloat ripple(vec2 pos, float t){\n    float d = circle(pos,t);\n    d = abs(sin(d*0.5)+cos(d*1.5));\n    d = abs(d) - (0.4 - length(pos)*0.05);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    \n    vec2 uv = (2.0*fragCoord - iResolution.xy)/min(iResolution.x,iResolution.y);\n    uv *= 5.;\n\n    vec3 col;\n    \n    float r = 2.5 * cos(iTime*0.5);\n    float N = 5.0;\n    float outerR = 0.8;\n    float innerR = 0.15 + 0.1*sin(iTime);\n    for(float k = 0.0; k < 3.0; k ++){\n   \t\tfor(float i = 0. ; i < N; i++){\n        \tfloat theta =  2.0 *  PI * i /N + sin(iTime)*4.0;\n            \n            float a = iTime * 2.0;\n            vec2 q = 3.0 * vec2(cos(a),sin(a));\n            q *= rotate(theta);\n            \n            vec2 p =  (r+k*0.05)  * vec2(cos(theta),sin(theta));\n            col[int(k)] += mix(0.0,0.8,smoothstep(0.02,0.0,ring(uv-p,outerR,innerR)));\n            p = q - p;\n            col[int(k)] += mix(0.0,0.6,smoothstep(0.02,0.0,ripple(uv-p,iTime*2.0)));\n    \t}\n     }\n    \n\tcol += vec3(0.2+length(uv)*0.05,0.8,0.5+0.2*sin(iTime)) * smoothstep(0.1,0.0,ripple(uv,iTime));\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}