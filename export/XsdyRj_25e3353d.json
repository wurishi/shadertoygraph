{"ver":"0.1","info":{"id":"XsdyRj","date":"1519750692","viewed":1287,"name":"2d Boids Simulator","username":"gPlatl","description":"A simple 2d Boids simulation...\nPress mouse button to hunt fishes :D\nPress arrow up or down button to change number of fishes.","likes":33,"published":1,"flags":96,"usePreview":0,"tags":["simulation","swarm","simulator","flocking","boids"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"ltl3Rn","filepath":"https://soundcloud.com/connect-3-1/beatybeat","previewfilepath":"https://soundcloud.com/connect-3-1/beatybeat","type":"musicstream","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n//---------------------------------------------------------\n// BoidsSimulator_Image.glsl\n// \n//   v1.0  initial version\n//   v...  https://www.shadertoy.com/view/4stBWH\n//\n// A simple 2d Boids simulation...\n// Press mouse button to hunt fishes :D\n// Press arrow up or down button to change number of fishes.\n//\n// original: https://www.shadertoy.com/view/ldd3DB\n//           Created by sebastien durand - 2016\n//\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n//---------------------------------------------------------\n// ToDo: \n// - Swarm Segregation  https://www.shadertoy.com/view/4s33Dj\n// - make 3d            https://www.shadertoy.com/view/llBBR3\n// - leader movement    https://www.shadertoy.com/view/MdlfDl\n// - value changes      https://www.shadertoy.com/view/Md2fzV \n// - Add Hunter         https://www.openprocessing.org/sketch/126600\n// - use fishType\n//---------------------------------------------------------\n\n#define BRIGHTNESS 0.1\n\nvec4 scenery(vec2 pos)\n{\n  vec2 p = 1. / iResolution.xy;\n  float dist = 0.0;\n  float minDist = 1e6;\n  vec4 ct = vec4(0);\n\n  readVariables(VALUE_BUFFER);\n    \n  for (int ni=0; ni < MAX_FISHES; ni++) \n  {   \n    if (ni >= fishCount) break;      \n\n    // xy = position, zw = velocity \n    vec4 fish = GetFish(VALUE_BUFFER, ni);   \n\n    // Signed Distance to Fish\n    dist = sdFish(ni, fish.xy - pos * p.y, atan(fish.w,fish.z), iTime);\n        \n    // draw fish according to its direction\n    minDist = min(minDist, dist);\n        \n    // background color sum = fish velocity (blue => red) + halo - simple version: c*smoothstep(0.5,0.0,d);\n    ct += mix(blue, red, length(fish.zw)/MAX_VELOCITY)*(1./(1.+3e3*dist*dist*dist) + .5/(1.+30.*dist*dist)); \n      \n  }\n  // mix fish color (white) and halo\n  paintColor = mix(paintColor, BRIGHTNESS * sqrt(ct / float(fishCount))\n                  , smoothstep(0., p.y, minDist));\n  return paintColor;  \n}\n//---------------------------------------------------------\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n  resolution = iResolution.xy;\n  uv = (2.0*fragCoord.xy - iResolution.xy) / iResolution.y;\n  mp = (2.0*iMouse.xy - iResolution.xy) / iResolution.y;\n  aspect = iResolution.x / iResolution.y;\n  mousePressed = iMouse.z > 1.0;\n    \n  fragColor = scenery(fragCoord.xy);\n     \n  drawArrows(fragColor);  \n    \n  uv = (fragCoord.xy ) / iResolution.y;\n  fragColor += texture(TEXT_BUFFER,uv);   // show values \n//  fragColor += texture(VALUE_BUFFER,uv);   // for testing \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n//---------------------------------------------------------\n// BoidsSimulator_BufA.glsl\n// - create new fishes \n// - do fish simulation\n// - handle global values\n//---------------------------------------------------------\n\n//=== global values ===\n\n//---------------------------------------------------------\n// write global values as graphical 4*12 color bar to iChannel0\n//---------------------------------------------------------\nbool writeMemory(in vec2 fragCoords, in int idx)\n{\n  float x = float(idx); \n  return fragCoords.x < (x + 1.0) \n      && fragCoords.x > (x - 1.0)\n      && fragCoords.y < globalY2\n      && fragCoords.y > globalY1; \n}\n//---------------------------------------------------------\nvoid writeVariables(inout vec2 fragCoord, out vec4 fragColor )\n{\n  if      (writeMemory(fragCoord, 4)) fragColor = vec4(float(fishCount)/255., 0., 0., 255.0);\n  else if (writeMemory(fragCoord, 8)) fragColor = vec4(speed, group, command, 255.0)/255.;\n  //else discard;\n}\n\n\n\n//---------------------------------------------------------\n// Boids Simulator\n//---------------------------------------------------------\n#define FLEE_DISTANCE 0.7\n\n#define RESIST 0.2\n\nvec4 AnimateFish(int id)\n{\n  vec2 md = vec2(0);\n  vec2 vel = vec2(0);\n  vec2 acc = vec2(0); \n  vec2 ratio = iResolution.xy / iResolution.y;\n  float dt = .03; \n    \n  vec4 fish = GetFish(VALUE_BUFFER, id);\n        \n  // Sum Forces -----------------------------  \n        \n  // borders action\n  vec2 sumF = (vec2(1.0,1.0) / abs(fish.xy) - (1.0+0.5*sin(iTime)) / abs(ratio - fish.xy));         \n\n  if (mousePressed)  \n  {\n    vec2 mpos = iMouse.xy / iResolution.y;         //  0.0 .. 1.0  \n    md = fish.xy - mpos;\n    sumF += normalize(md) * FLEE_DISTANCE / dot(md,md);\n  }\n      \n  // Calculate repulsion force with other fishs\n  for (int ni=0; ni < MAX_FISHES; ni++)\n  if (ni != id) \n  {\n    if (ni >= fishCount) break;      \n\n    vec4 aFish = GetFish(VALUE_BUFFER, ni);   \n    \n    md = fish.xy - aFish.xy;\n    float dist = length(md);\n    sumF -= dist > 0.0 \n            ? md*(6.3+log(dist*dist*.02)) / exp(dist*dist*2.4) / dist\n            : .01*hash(float(id)); // if same pos : small ramdom force\n\n  }\n  // friction    \n  sumF -= fish.zw * RESIST / dt;\n        \n  // dynamic calculation ---------------------     \n        \n  // calculate acceleration A = (1/m * sumF) [cool m=1. here!]\n  float a1 = length(acc = sumF); \n  acc *= a1 > MAX_ACCELER \n         ? MAX_ACCELER / a1 \n         : 1.; // limit acceleration\n    \n  // calculate speed\n  float v1 = length(vel = fish.zw + acc*dt);\n  v1 = v1 > MAX_VELOCITY   ? MAX_VELOCITY / v1 : 1.; // limit velocity\n  v1 = v1 < MIN_VELOCITY   ? MIN_VELOCITY / v1 : 1.; // limit velocity  \n  vel *= v1;  \n    \n  // return position and velocity of fish (xy = position, zw = velocity) \n  return vec4(fish.xy + vel*dt, vel); \n}\n//---------------------------------------------------------\nvec4 CreateFish(int id)\n{\n  fishType aFish = NewFish (id); \n  \n  return vec4(aFish.position.x   // convert to old\n             ,aFish.position.y\n             ,aFish.velocity.x\n             ,aFish.velocity.y);\n}\n\n//---------------------------------------------------------\n// Boids Simulator\n//---------------------------------------------------------\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{   \n  resolution = iResolution.xy;\n  uv = (2.0*fragCoord.xy - iResolution.xy) / iResolution.y;\n  mp = (2.0*iMouse.xy - iResolution.xy) / iResolution.y;\n  aspect = iResolution.x / iResolution.y;\n  mousePressed = iMouse.z > 1.0;\n\n  vec4 paintColor = vec4(1);  \n    \n  int id = int(fragCoord.x);\n    \n  //--- initialization ---\n  if (iFrame < START_TIME)\n  {\n    initVariables();\n    writeVariables (fragCoord, fragColor);\n    if (fragCoord.y < 4.)  // create new fishes?\n      fragColor = CreateFish(id);\n    return; //!!!\n  }\n\n  readVariables(VALUE_BUFFER);    \n\n  //--- handle global variables ---\n  if ((fragCoord.y > globalY1) && (fragCoord.y < globalY2))\n  {    \n    fragColor = vec4(0.1,0.1,0.1,1);  // mark variable area\n    \n    if ((iFrame % 4) == 0)    // slow down \n    { command = getArrowCommand();\n      if (command == com_incFishes && fishCount < MAX_FISHES) fishCount++;  \n      if (command == com_decFishes && fishCount > MIN_FISHES) fishCount--;  \n    }\n    command = 0;  \n    writeVariables (fragCoord, fragColor);\n  }\n\n  //--- animate fishes ---  \n  if (fragCoord.y >= 4.) return;   // out of fish data?\n  fragColor = AnimateFish(id);     // save fish data \n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"\n//---------------------------------------------------------\n// BoidsSimulator_Common.glsl    \n//---------------------------------------------------------\n\n#define START_TIME 111\n    \n#define MIN_FISHES 3\n#define MAX_FISHES 333\n#define START_FISHES 33\n\n#define MIN_VELOCITY 0.01\n#define MAX_VELOCITY 0.3\n#define MAX_ACCELER 3.0\n             \n#define VALUE_BUFFER iChannel0\n#define TEXT_BUFFER  iChannel1\n\nint fishCount = 15;      \nint speed = 11;\nint group = 0;\n\n// fish velocity colors\nconst vec4 blue = vec4(0,0,1,1);  // slow\nconst vec4 red  = vec4(1,0,0,1);  // fast\n\n//---------------------------------------------------------\nconst int com_nothing = 0;\nconst int com_incFishes = 1;\nconst int com_decFishes = 2;\nconst int com_scareFishes = 3;\nint command = 0;      // current command\n\nvec2 uv = vec2(0.0);  // pixel position y-range -1.0 .. 1.0\nvec2 mp = vec2(0.0);  // mouse position y-range -1.0 .. 1.0\nvec2 resolution = vec2(200,100);\n\nfloat aspect = 1.4;   // res.x / res.y\n\nbool mousePressed = false;\n\nvec4 paintColor = vec4(1);\n\n//---------------------------------------------------------\n// return random vector 0..1\nvec2 hash(float n) \n{\n  return fract(sin(vec2(n,n*7.))*43758.5);\n}\n\n//---------------------------------------------------------\n//      N E W    F I S H     handling   (unused)\n//---------------------------------------------------------\n\n//=== F I S H E S ===\n\nstruct fishType\n{ \n  vec3 position;\n  vec3 velocity;  \n  vec3 color;   \n}; \n\n// return new random fish\nfishType NewFish(int id)\n{\n  float fid = float(id);\n  return fishType (vec3(0.2 + 0.6*hash(fid), 0)\n                  ,vec3(0.1 + 0.5*hash(fid), 0)\n                  ,vec3(0.5 + 0.1*hash(fid), 0.5)); \n}\n\n// return fish of given id\nfishType ReadFish(sampler2D sampler, float id)\n{\n  fishType aFish = fishType (vec3(0), vec3(0), vec3(0.5));\n  aFish.position = texelFetch(sampler, ivec2(id,0), 0).xyz;\n  aFish.velocity = texelFetch(sampler, ivec2(id,2), 2).xyz;\n  aFish.color    = texelFetch(sampler, ivec2(id,4), 4).xyz;\n  return aFish;\n}\n\n// draw fish with given id\nfloat DrawFish(float id, fishType fish, float time) \n{\n  float angle = atan(fish.velocity.y, fish.velocity.x);\n  float ca = cos(angle);\n  float sa = sin(angle);\n  vec2 pos = vec2(fish.position)*20.0 * mat2(ca, sa, -sa, ca); // rotate and rescale\n\n  // swiming ondulation (+rotate in Z axes)  \n  pos.x *= 0.97 + (0.1+.2*pos.y)*cos(id+9.*time); \n  float l1 = length(pos - vec2( 0.80,0)) -0.45;  // fin \n  float l2 = length(pos - vec2(-0.14,0)) -0.12;  // eye\n  float ds = min(l1, l2);           // distance to fish\n  pos.y = abs(pos.y) + 0.13;        // fish height\n  l1 = length(pos - vec2(0.56,0));  // fin move\n  return max(min(length(pos),l1)-0.3,-ds)*0.05; // mix colors\n}\n\n//---------------------------------------------------------\n//      O L D    F I S H     handling\n//---------------------------------------------------------\n// return xy = position, zw = velocity\nvec4 GetFish(sampler2D sampler, int id)\n{\n  // fish data are in to pixel line\n  return texelFetch(sampler, ivec2(id,1),0);\n}\n\n// Signed Distance to Fish\nfloat sdFish(int id, vec2 pos, float angle, float time) \n{\n  float ca = cos(angle);\n  float sa = sin(angle);\n  pos *= 20.0 * mat2(ca, sa, -sa, ca); // rotate and rescale\n\n  // swiming ondulation (+rotate in Z axes)  \n  pos.x *= 0.97 + (0.1+.2*pos.y)*cos(float(id)+9.*time); \n  float l1 = length(pos - vec2( 0.80,0)) -0.45;  // fin \n  float l2 = length(pos - vec2(-0.14,0)) -0.12;  // eye\n  float ds = min(l1, l2);           // distance to fish\n  pos.y = abs(pos.y) + 0.13;        // fish height\n  l1 = length(pos - vec2(0.56,0));  // fin move\n  return max(min(length(pos),l1)-0.3,-ds)*0.05; // mix colors\n}\n\n\n\n\n//=== global values ===\n\nconst float globalY1 = 10.0;   // used by writeMemory()\nconst float globalY2 = 20.0;\nconst float globalYm = 0.5*(globalY1+globalY2);\n\nconst int gx1 = 4;\nconst int gx2 = 12;\nconst int gx3 = 20;\nconst int gx4 = 28;\n\n//----------------------------------------------------------\n// get global float value from given buffer \n//----------------------------------------------------------\nfloat getGlobalValue (sampler2D buffer, int index)\n{\n  int address = index / 4;\n  int offset = int (mod(float(index), 4.0));\n  vec4 v = texture(buffer, vec2(address, globalYm) / resolution.xy);\n  if      (offset == 0) return v.x;\n  else if (offset == 1) return v.y;\n  else if (offset == 2) return v.z;\n  else                  return v.w;\n}\n//---------------------------------------------------------\n// read all global variables\n//---------------------------------------------------------\nvoid readVariables(sampler2D buffer)\n{\n  fishCount  =  int(getGlobalValue(buffer, 16)*255.);\n  speed      =  int(getGlobalValue(buffer, 32)*255.);\n  group      =  int(getGlobalValue(buffer, 33)*255.);\n  command    =  int(getGlobalValue(buffer, 34)*255.);\n}    \n//---------------------------------------------------------\n// reset all global variables\n//---------------------------------------------------------\nvoid initVariables()\n{\n  fishCount = START_FISHES;\n  speed = 22;  \n  group = 1;  \n  command = 0;  \n}\n\n\n\n//=== circle, triangle, arrow ===\n\n\n//---------------------------------------------------------\n// return circle intensity at pos with given radius\n//---------------------------------------------------------\nfloat sdCircle(in vec2 pos, in float radius, in float halo)\n{\n  return clamp (halo * (radius - length(uv-pos)), 0.0, 1.0);\n}\n//---------------------------------------------------------\n// draw mouse point\n//---------------------------------------------------------\nvoid drawPoint (vec2 pos, in float radius, in vec4 pointColor)\n{\n  float intensity = sdCircle(mp, radius, 100.0);\n  paintColor = mix(paintColor, pointColor, intensity);\n}\n\n//---------------------------------------------------------\n// return signed distance to a 2D triangle \n//   inside if distance <= 0.0\n// created by inigo quilez - iq/2014\n//   see https://www.shadertoy.com/view/XsXSz4\n//---------------------------------------------------------\nfloat sdTriangle(in vec2 p1, in vec2 p2, in vec2 p3, in vec2 p)\n{\n  vec2 e0 = p2 - p1;  vec2 e1 = p3 - p2;  vec2 e2 = p1 - p3;\n  vec2 v0 = p - p1;   vec2 v1 = p - p2;   vec2 v2 = p - p3;\n\n  vec2 pq0 = v0 - e0*clamp(dot(v0,e0) / dot(e0,e0), 0.0, 1.0);\n  vec2 pq1 = v1 - e1*clamp(dot(v1,e1) / dot(e1,e1), 0.0, 1.0);\n  vec2 pq2 = v2 - e2*clamp(dot(v2,e2) / dot(e2,e2), 0.0, 1.0);\n    \n  vec2 d = min(min(vec2(dot(pq0, pq0), v0.x*e0.y-v0.y*e0.x),\n                   vec2(dot(pq1, pq1), v1.x*e1.y-v1.y*e1.x)),\n                   vec2(dot(pq2, pq2), v2.x*e2.y-v2.y*e2.x));\n\n  return -sqrt(d.x)*sign(d.y);\n}\n//---------------------------------------------------------\n// draw 2D triangle (return drawing color)\n//---------------------------------------------------------\nvec4 drawTriangle( in vec2 p1, in vec2 p2, in vec2 p3, in vec2 pos\n                 , in vec4 col, in vec4 fillColor, in vec4 frameColor\n                 , in float frameSize )\n{\n  float d = sdTriangle(p1, p2, p3, pos);\n  if (d > frameSize)   // outside ?\n    return col;\n  float s = 1.0 - smoothstep(0.0,frameSize,abs(d));\n  if (d <= 0.0)\n    return mix( fillColor, frameColor, s*col.w); // inside\n  else \n    return mix( col, frameColor, s);   // outside\n}\n//---------------------------------------------------------\n// draw triangle and return true on mouse pressed inside\n//---------------------------------------------------------\nbool drawArrow( in vec2 p1, in vec2 p2, in vec2 p3, inout vec4 col)\n{\n  vec4 fill =  vec4(0.3, 0.2, 0.6, 1.0);\n  vec4 frame = vec4(0.8, 0.8, 0.4, 1.0);\n  bool inside = sdTriangle(p1,p2,p3, mp) < 0.0;\n  if (inside)\n  {  \n    // fill = vec4(0, 1.1, 0.4, 1.0); \n    // frame = vec4(1.0);  // last input\n    if (mousePressed)     \n      fill = vec4(1, 0.1, 0.4, 1.0);\n  }\n  col += drawTriangle (p1,p2,p3, uv, col, fill, frame, 0.02);\n  return inside;\n}\n//---------------------------------------------------------\n// get arrow command\n//---------------------------------------------------------\nvoid getTriangleVertices(int id, out vec2 p1, out vec2 p2, out vec2 p3)\n{\n  // draw triangle arrows and check input\n  float s= 0.05;\n  float x= aspect * 0.925;    // arrow x middle position  \n  float y= -0.8;\n  if (id == 0) {p1 = vec2(x-s,y+s),  p2 = vec2(x,y+3.*s), p3 = vec2(x+s,y+s);}\n         else  {p1 = vec2(x,y-3.*s), p2 = vec2(x-s,y-s),  p3 = vec2(x+s,y-s);}\n}\n//---------------------------------------------------------\n// get arrow command (0,1,2,3)\n//---------------------------------------------------------\nint getArrowCommand()\n{\n  vec2 p1,p2,p3;\n\n  getTriangleVertices (0,p1,p2,p3);\n  bool inside1 = sdTriangle(p1,p2,p3, mp) < 0.0;\n\n  getTriangleVertices (1,p1,p2,p3);\n  bool inside2 = sdTriangle(p1,p2,p3, mp) < 0.0;\n\n  if (mousePressed)\n  {\n    if      (inside1) return com_incFishes; \n    else if (inside2) return com_decFishes; \n    else              return com_scareFishes;  \n  }\n  return com_nothing;\n}\n//---------------------------------------------------------\n// draw arrows and return command > 0 if arrow is pressed \n//---------------------------------------------------------\nvoid drawArrows(inout vec4 col)\n{\n  // draw triangle arrows and check input\n  vec2 p1,p2,p3;\n\n  getTriangleVertices (0,p1,p2,p3);\n  bool inside1 = drawArrow (p1,p2,p3, col);\n    \n  getTriangleVertices (1,p1,p2,p3);\n  drawArrow (p1,p2,p3, col);\n}\n\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"\n//---------------------------------------------------------\n// BoidsSimulator_BufB.glsl\n// - display values\n//---------------------------------------------------------\n\n\n//== font handling ================================================\n\n#define FONT_SPACE 0.55\n\nvec2 tp = vec2(1.0);  // text position\n\n//const vec2 vFontSize = vec2(8.0, 15.0);  // multiples of 4x5 work best\n\n//----- access to the image of ascii code characters ------\n\n#define SPACE tp.x-=FONT_SPACE;\n#define _     tp.x-=FONT_SPACE;\n\n#define S(a) c+=char(a);  tp.x-=FONT_SPACE;\n\n#define _note  S(10);   //\n#define _star  S(28);   // *\n#define _smily S(29);   // :-)        \n#define _exc   S(33);   // !\n#define _add   S(43);   // +\n#define _comma S(44);   // ,\n#define _sub   S(45);   // -\n#define _dot   S(46);   // .\n#define _slash S(47);   // /\n\n#define _0 S(48);\n#define _1 S(49);\n#define _2 S(50);\n#define _3 S(51);\n#define _4 S(52);\n#define _5 S(53);\n#define _6 S(54);\n#define _7 S(55);\n#define _8 S(56);\n#define _9 S(57);\n#define _ddot S(58);   // :\n#define _sc   S(59);   // ;\n#define _less S(60);   // <\n#define _eq   S(61);   // =\n#define _gr   S(62);   // >\n#define _qm   S(63);   // ?\n#define _at   S(64);   // at sign\n\n#define _A S(65);\n#define _B S(66);\n#define _C S(67);\n#define _D S(68);\n#define _E S(69);\n#define _F S(70);\n#define _G S(71);\n#define _H S(72);\n#define _I S(73);\n#define _J S(74);\n#define _K S(75);\n#define _L S(76);\n#define _M S(77);\n#define _N S(78);\n#define _O S(79);\n#define _P S(80);\n#define _Q S(81);\n#define _R S(82);\n#define _S S(83);\n#define _T S(84);\n#define _U S(85);\n#define _V S(86);\n#define _W S(87);\n#define _X S(88);\n#define _Y S(89);\n#define _Z S(90);\n\n#define _a S(97);\n#define _b S(98);\n#define _c S(99);\n#define _d S(100);\n#define _e S(101);\n#define _f S(102);\n#define _g S(103);\n#define _h S(104);\n#define _i S(105);\n#define _j S(106);\n#define _k S(107);\n#define _l S(108);\n#define _m S(109);\n#define _n S(110);\n#define _o S(111);\n#define _p S(112);\n#define _q S(113);\n#define _r S(114);\n#define _s S(115);\n#define _t S(116);\n#define _u S(117);\n#define _v S(118);\n#define _w S(119);\n#define _x S(120);\n#define _y S(121);\n#define _z S(122);\n\n//---------------------------------------------------------\n// return font image intensity of character ch at text position tp\n//---------------------------------------------------------\n\n//float char(float ch)    // old versions\n//{ vec4 f = texture(FONT_BUFFER,clamp(tp,0.,1.)/16.+fract(floor(vec2(ch,15.999-float(ch)/16.))/16.));\n//  vec4 f = texture(FONT_BUFFER,clamp(tp,0.,1.)/16.+fract(floor(vec2(ch,16.-(1e-6)-floor(ch)/16.))/16.));  \n    \nfloat char(int ch)\n{\n  vec4 f = any(lessThan(vec4(tp,1,1), vec4(0,0,tp))) \n            ? vec4(0.0) \n            : texture(iChannel2,0.0625*(tp + vec2(ch - ch/16*16,15 - ch/16)));  \n  //if (iMouse.z > 0.0) return f.x;   // 2d   else\n  return f.x * (f.y+0.3)*(f.z+0.3)*2.0;   // 3d\n}\n//----------------------------------------------------------------\n// set text starting position to x=line, y=column (left/top = 1,1) \n//----------------------------------------------------------------\nvoid SetTextPosition(float x, float y)  //\n{\n  tp = 10.0*uv;\n  tp.x = tp.x +17. - x;\n  tp.y = tp.y -.4 + y;\n}\n\n//== value drawings =======================================\n\nint max2(int a, int b) { return a>b?a:b;}\n\n//--- display integer value --- \nfloat drawInt(int value, int minDigits)\n{\n  float c = 0.;\n  if (value < 0) \n  { value = -value;\n    if (minDigits < 1) minDigits = 1;\n    else minDigits--;\n    _sub                   // add minus char\n  } \n  int fn = value, digits = 1; // get number of digits \n  for (int ni=0; ni<10; ni++)\n  {\n    fn /= 10;\n    if (fn == 0) break;\n    digits++;\n  } \n  digits = max2(minDigits, digits);\n  tp.x -= FONT_SPACE * float(digits);\n  for (int ni=1; ni < 11; ni++) \n  { \n    tp.x += FONT_SPACE; // space\n    c += char(48 + (value-((value/=10)*10))); // add 0..9 \n    if (ni >= digits) break;\n  } \n  tp.x -= FONT_SPACE * float(digits);\n  return c;\n}\n\n/*\n//--- display number fraction with leading zeros --- \nfloat drawFract(float value, int digits)\n{ \n  float c = 0.0;\n  value = fract(value) * 10.0;\n  for (int ni = 1; ni < 60; ni++) \n  {\n    c += char(48 + int(value)); // add 0..9\n    tp.x -= FONT_SPACE;\n    digits -= 1;\n    value = fract(value) * 10.0;\n    if (digits <= 0 || value == 0.0) break;\n  } \n  tp.x -= FONT_SPACE*float(digits);\n  return c;\n}\n                                                                                                             \n//--- display float value ---\nfloat drawFloat(float value, int prec, int maxDigits)\n{ \n  float tpx = tp.x-FONT_SPACE*float(maxDigits);\n  float c = 0.;\n  if (value < 0.0) \n  { \n    c = char(45); // write minus sign\n    value = -value;\n  }\n  tp.x -= FONT_SPACE;\n  c += drawInt(int(value),1);\n  c += char(46); SPACE; // add dot \n  c += drawFract(fract(value), prec);\n  tp.x = min(tp.x, tpx);\n  return c;\n}\n\nfloat drawFloat(float value)           {return drawFloat(value,2,5);} \n\nfloat drawFloat(float value, int prec) {return drawFloat(value,prec,2);} \n*/\n\nfloat drawInt(int value)               {return drawInt(value,1);}\n\n//----------------------------------------------------------------\nvec4 drawColor = vec4(1.0);\n\nvoid SetColor(float red, float green, float blue)\n{\n  drawColor = vec4(red,green,blue,1.);\n}\n//----------------------------------------------------------------\nvoid WriteInteger(const in int iValue)\n{\n  paintColor = mix(paintColor, drawColor, drawInt (iValue));\n}\n\n//----------------------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  resolution = iResolution.xy;\n  uv = (fragCoord.xy - iResolution.xy) / iResolution.y;\n\n  paintColor = vec4(0);\n  SetTextPosition(0.0, 1.6);\n\n  // Frame Counter\n//  WriteInteger(iFrame);\n//  SPACE\n\n  initVariables();\n  readVariables(VALUE_BUFFER);\n      \n  // y pixels\n//  SetColor (0.7, 0.7, 0.4);\n//  WriteInteger(int(resolution.y));\n//  SPACE\n\n  // Fish Count\n  SetColor (0.4, 0.4, 0.6);\n  WriteInteger(fishCount);\n  SPACE\n\n//  // speed\n//  SetColor (0.4, 0.4, 0.4);\n//  WriteInteger(speed);\n//  SPACE\n\n  // group\n//  SetColor (0.1, 0.7, 0.1);\n//  WriteInteger(group);\n//  SPACE\n\n  fragColor = paintColor;    \n}\n  \n","name":"Buffer B","description":"","type":"buffer"}]}