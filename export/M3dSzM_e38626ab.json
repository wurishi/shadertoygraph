{"ver":"0.1","info":{"id":"M3dSzM","date":"1718824464","viewed":47,"name":"Julia set vv","username":"valvw","description":"Julia set","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["julia"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float rand(vec2 co)\n{\n    // Generate random number based on input coordinates\n    return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nfloat noise(vec2 co)\n{\n    // Generate noise based on input coordinates\n    vec2 i = floor(co);\n    vec2 f = fract(co);\n    float a = rand(i);\n    float b = rand(i + vec2(1.0, 0.0));\n    float c = rand(i + vec2(0.0, 1.0));\n    float d = rand(i + vec2(1.0, 1.0));\n    vec2 u = f * f * (3.0 - 2.0 * f);\n    return mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;\n}\n\nvec3 generateJulia(vec2 fragCoord, vec2 iResolution, vec2 c)\n{\n    // Normalize pixel coordinates to the range [-1.5, 1.5]\n    vec2 uv = fragCoord / iResolution;\n    vec2 z = uv * 3.0 - vec2(1.5, 1.5);\n\n    int maxIterations = 256;\n    int iteration;\n\n    // Iterate to check if the point belongs to the Julia set\n    for (iteration = 0; iteration < maxIterations; iteration++)\n    {\n        if (dot(z, z) > 4.0) break; // Escape condition |z|^2 > 4\n\n        // z = z^2 + c\n        z = vec2(\n            z.x * z.x - z.y * z.y + c.x,\n            2.0 * z.x * z.y + c.y\n        );\n    }\n\n    // Determine color based on the number of iterations\n    vec3 color;\n    if (iteration == maxIterations)\n    {\n        color = vec3(0.0, 0.0, 0.0); // Point belongs to the Julia set (black)\n    }\n    else\n    {\n        float t = float(iteration) / float(maxIterations);\n        color = vec3(sin(6.2831 * t + 0.1), sin(6.2831 * t + 0.1), sin(6.2831 * t + 2.0)) * 0.5 + 0.1;\n    }\n\n    return color;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Julia set parameters\n    vec2 c = vec2(-0.7, 0.27015);\n    \n    // Check for mouse click and start animation\n    if (iMouse.z > 0.0) // If the mouse is clicked\n    {\n        float animTime = iTime - iMouse.w; // Use the time of the last mouse click\n        c += vec2(0.3 * sin(animTime), 0.3 * cos(animTime));\n    }\n\n    // Generate the Julia set fractal\n    vec3 color = generateJulia(fragCoord, iResolution.xy, c);\n\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}