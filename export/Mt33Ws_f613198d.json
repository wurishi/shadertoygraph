{"ver":"0.1","info":{"id":"Mt33Ws","date":"1472380698","viewed":241,"name":"RayParabolaIntersect","username":"albertelwin","description":"Practicing ray-parabola intersection testing","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["3d","raycasting","intersection","parabola"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define SUPERSAMPLING 1\n\n#define TAU 6.28318530717958647692\n#define TO_RAD 0.01745329251\n#define GAMMA 2.2\n#define MAX_DIST 1000.0\n\nfloat dither(vec2 xy, float t) {\n    float s = (xy.x * 12.9898) + (xy.y * 78.2330);\n    float r = fract(sin((t * 12.9898) + s) * 43758.5453) + fract(sin((t * 78.2330) + s) * 43758.5453);\n    return (r * 0.00392156886) - 0.00196078443;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float fov = 90.0;\n    float tan_fov = tan(fov * 0.5 * TO_RAD);\n    vec2 image_plane = vec2(tan_fov, tan_fov * (iResolution.y / iResolution.x));\n\n#define MAX_SAMPLE_COUNT 8\n    vec2 sample_offsets[MAX_SAMPLE_COUNT];\n\tsample_offsets[0] = vec2(0.125, 0.875);\n    sample_offsets[1] = vec2(0.625, 0.875);\n    sample_offsets[2] = vec2(0.375, 0.625);\n    sample_offsets[3] = vec2(0.875, 0.625);\n    sample_offsets[4] = vec2(0.125, 0.375);\n    sample_offsets[5] = vec2(0.625, 0.375);\n    sample_offsets[6] = vec2(0.375, 0.125);\n    sample_offsets[7] = vec2(0.875, 0.125);\n    \n#if SUPERSAMPLING\n    #define SAMPLE_COUNT MAX_SAMPLE_COUNT\n#else\n    #define SAMPLE_COUNT 1\n#endif\n\n    vec3 color = vec3(0.0);\n\n    for(int sample_index = 0; sample_index < SAMPLE_COUNT; sample_index++) {\n        vec2 sample_pos = fragCoord.xy + sample_offsets[sample_index];\n        vec3 image_point = vec3((2.0 * sample_pos / iResolution.xy - 1.0) * image_plane, 1.0);\n\n        vec3 ro = vec3(0.0, 0.0, 2.12);\n        vec3 rd = normalize(image_point - ro);\n        \n        ro.y += 0.5;\n        \n        float t = MAX_DIST;\n        \n        //NOTE: Intersect y = x² + z²\n        float a = (rd.x * rd.x) + (rd.z * rd.z);\n        float b = (2.0 * rd.x * ro.x) + (2.0 * rd.z * ro.z) - rd.y;\n        float c = (ro.x * ro.x) + (ro.z * ro.z) - ro.y;\n        float d = (b * b) - (4.0 * a * c);\n        if(d > 0.0) {\n            t = (-b - sqrt(d)) / (2.0 * a);\n        }\n        \n        //NOTE: Intersect y = 0\n        float u = -ro.y / rd.y;\n        if(u > 0.0 && u < t) {\n            t = u;\n        }   \n\n        if(t < MAX_DIST) {\n            vec3 p = ro + t * rd;\n            \n            vec3 v = normalize(p);\n            float l = v.r * 0.2126 + v.g * 0.7152 + v.b * 0.0722;\n            color += clamp(1.0 - (l + t * 0.1), 0.0, 1.0);\n        }\n    }\n\n    color *= (1.0 / float(SAMPLE_COUNT));\n    color += dither(fragCoord.xy, fract(iTime));\n    color = pow(color, vec3(1.0 / GAMMA));\n\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}