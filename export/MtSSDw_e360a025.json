{"ver":"0.1","info":{"id":"MtSSDw","date":"1449777905","viewed":380,"name":"2D Mandelbox","username":"rory618","description":"a 2d mandelbox fractal, see https://sites.google.com/site/mandelbox/what-is-a-mandelbox","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["fractal2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"vec2 boxFold( vec2 x );\nvec2 ballFold( float r, vec2 x);\nvec2 iterate( vec2 x , float s, float r, float f, vec2 c);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv -= vec2(.5,.5);\n    uv.x *= iResolution.x/iResolution.y;\n    uv *= vec2(20,20);\n    \n    vec2 x = uv;\n    \n    float s = 2.0;\n    float r = .5;\n    float f = 1.0;\n    vec2 c = uv;\n    float b = 16.0;\n    vec2 mouse = iMouse.xy / iResolution.xy;\n    mouse -= vec2(.5,.5);\n    mouse.x *= iResolution.x/iResolution.y;\n    mouse *= vec2(15,15);\n    s = mouse.x;\n    r = mouse.y;\n    s = 2.0*sin(iTime/11.0);\n    r = sin(iTime/17.0);\n    f = 1.0+sin(iTime/17.0);\n    \n    float counter = 0.0;\n    for(int iter = 0; iter < 64; iter ++) {\n        counter += .1;\n        x = iterate( x, s*.99, r, f, c);\n        if(sqrt(x.x*x.x+x.y*x.y) > b){\n            break;\n        }\n    }\n    x = uv;\n    float counteg = 0.0;\n    for(int iter = 0; iter < 64; iter ++) {\n        counteg += .1;\n        x = iterate( x, s, r*.99, f, c);\n        if(sqrt(x.x*x.x+x.y*x.y) > b){\n            break;\n        }\n    }\n    x = uv;\n    float counteb = 0.0;\n    for(int iter = 0; iter < 64; iter ++) {\n        counteb += .1;\n        x = iterate( x, s, r, f*.99, c);\n        if(sqrt(x.x*x.x+x.y*x.y) > b){\n            break;\n        }\n    }\n    fragColor = vec4(sin(float(counter)),sin(float(counteg)), sin(float(counteb)), 0);\n    \n}\n\nvec2 iterate( vec2 x , float s, float r, float f, vec2 c) {\n    return vec2(s, s) * ballFold(r, f * boxFold(x)) + c;\n}\n\nvec2 boxFold( vec2 x ) {\n    vec2 ret;\n    ret = abs(vec2(-1,-1) - x) - abs(vec2(1,1) - x) - x;\n    return ret;\n}\n\nvec2 ballFold(float r, vec2 x ) {\n    float mag = sqrt (x.x*x.x+x.y*x.y);\n    vec2 ret = x / vec2(mag , mag);\n    if (mag < r) {\n        mag /= r*r;\n    } else if ( mag < 1.0) {\n        mag = 1.0/mag;\n    }\n    return ret * vec2(mag,mag);\n    \n}","name":"","description":"","type":"image"}]}