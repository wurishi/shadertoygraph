{"ver":"0.1","info":{"id":"43sXzN","date":"1709561794","viewed":61,"name":"Mandlebrot set nato","username":"njberman","description":"nato","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["nato"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 mul(vec2 x, vec2 y)\n{\n    return vec2(x.x*y.x-x.y*y.y, x.x*y.y+x.y*y.x);\n}\n\nfloat iter(vec2 c)\n{\n    vec2 z = vec2(0.0);\n    int i;\n    for (i = 0; i < 256; i++)\n    {\n        \n        if (length(z) > 2.0)\n        {\n            break;\n        }\n\n        z = mul(z,z) + c;\n\n    }\n    \n    return float(i) / float(256);\n    \n}\n\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    \n    float t = 4.0*sin(0.5 * iTime) + 3.5;\n    float scale = pow(0.25, t);\n    vec2 uv = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 center = vec2(-0.412, 0.609);\n    uv *= scale;\n    uv += center;\n\n    // Time varying pixel color\n    float n = iter(uv);\n    \n    vec3 c = vec3(4.0*n, 1.0, 1.0);\n\tfragColor = vec4(hsv2rgb(c), 1.0);\n\n\n}","name":"Image","description":"","type":"image"}]}