{"ver":"0.1","info":{"id":"lcfcRn","date":"1720691287","viewed":21,"name":"Checkers Planets","username":"steelannelida","description":"A planetary system with simple raytracing","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raytracing","planetary"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// uniform vec3 iResolution;\n// uniform float iTime;\n// uniform float iTimeDelta;\n// uniform float iFrame;\n// uniform float iChannelTime[4];\n// uniform vec4 iMouse;\n// uniform vec4 iDate;\n// uniform float iSampleRate;\n// uniform vec3 iChannelResolution[4];\n// uniform samplerXX iChanneli;\n\nstruct surface {\n    vec3 center;\n    float radius;\n    vec3 color;\n};\n\nstruct light {\n    vec3 p;\n    vec3 c;\n};\n\nstruct ray {\n    vec3 o;\n    vec3 d;\n};\n\nfloat get_int(surface s, ray r) {\n    vec3 rel = r.o - s.center;\n    float b = dot(r.d, rel);\n    float r2 = s.radius * s.radius;\n    float det = b * b - dot(rel, rel) + r2;\n    float t = -b - sqrt(det);\n    return t;\n}\n\nfloat getz(surface s, vec2 ray) {\n    vec2 rv = ray - s.center.xy;\n    return s.center.z - sqrt(s.radius * s.radius - dot(rv, rv));\n}\n\nvec3 getnorm(surface s, vec3 pos) {\n    return normalize(s.center - pos);\n}\n\nvec2 surfcoords(surface s, vec3 pos) {\n    vec3 rv = s.center - pos;\n    return vec2(\n        atan(rv.x, rv.y),\n        atan(rv.z, length(rv.xy))\n    );\n}\n\nvec3 surfcolor(surface s, vec2 surfcoords) {\n    return s.color * (\n        0.8 + 0.2 * cos(14. * surfcoords.x) * sin(7. * surfcoords.y));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 x = 2. * (fragCoord - 0.5 * iResolution.xy) / iResolution.x;\n    float t = iTime;\n    surface[5] objects = surface[5](\n        surface(vec3(-0.5, 0.5, 0.), 0.05, vec3(1.0, 1.0, 1.0)),\n        surface(vec3(0.5, 0.5, 0.), 0.03, vec3(0.0, 0.0, 1.0)),\n        surface(vec3(-0.5, -0.5, 0.), 0.1, vec3(1.0, 0.0, 0.0)),\n        surface(vec3(0.5, -0.5, 0.), 0.1, vec3(0.0824, 1.0, 0.0)),\n        surface(vec3(0., 0., 0.), 0.2, vec3(1., 1., 0))\n    );\n    for (int i = 0; i < 4; ++i) {\n        float r = float(i + 2) / 5.;\n        float phase = t / r;\n        objects[i].center = vec3(\n           r * cos(phase),\n           r * sin(phase),\n           0.\n        );\n    }\n\n\n    float d = 10. + 2. * cos( 3. * t);\n    light l = light(\n        vec3(d * cos(t / 5.), d * sin(t / 3.), 5. * sin(t / 8.)),\n        vec3(0.9725, 1.0, 0.651) * 2.\n    );\n\n    fragColor = vec4(vec3(0.), 1.);\n    float z = 1000.;\n    int idx = -1;\n    ray r = ray(vec3(x, -100.), vec3(0., 0., 1.));\n    for (int i = 0; i < 5; ++i) {\n        float zc = get_int(objects[i], r);\n        if (isnan(zc) || (zc < 0.)) {\n            continue;\n        }\n        if (zc < z) {\n            z = zc;\n            idx = i;\n        }\n    }\n    vec3 pos = r.o + z * r.d;\n    \n    if (idx >= 0) {\n        surface s = objects[idx];\n        vec2 sc = surfcoords(s, pos);\n        sc.x += t * (2. + float(idx));\n        vec3 color = surfcolor(s, sc);\n        vec3 res = 0.2 * color;\n\n        ray raytolight = ray(pos, normalize(l.p - pos));\n        float obs = length(l.p - pos);\n        for (int i = 0; i < 5; ++i) {\n            if (i == idx) {\n                continue;\n            }\n            float o = get_int(objects[i], raytolight);\n            if (isnan(o) || o < 0.) {\n                continue;\n            }\n            obs = min(obs, o);\n        }\n        if (obs >= length(l.p - pos)) {\n            vec3 n = getnorm(s, pos);\n            float intens = max(0., -dot(n, raytolight.d));\n            res += intens * l.c * color;\n            float rintens = 10. * max(0., -dot(n, raytolight.d)- 0.95);\n            res += rintens * l.c;\n        }\n        \n        fragColor = vec4(res, 1.);\n    }\n}\t\n","name":"Image","description":"","type":"image"}]}