{"ver":"0.1","info":{"id":"wsd3Wn","date":"1588965248","viewed":98,"name":"2D Shadows intersection","username":"alati","description":"Implementation using segments intersections","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2dshadows"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define perp(u,v)  ((u).x * (v).y - (u).y * (v).x)\n// signed distance to a 2D triangle\nfloat sdTriangle( in vec2 p0, in vec2 p1, in vec2 p2, in vec2 p )\n{\n\tvec2 e0 = p1 - p0;\n\tvec2 e1 = p2 - p1;\n\tvec2 e2 = p0 - p2;\n\n\tvec2 v0 = p - p0;\n\tvec2 v1 = p - p1;\n\tvec2 v2 = p - p2;\n\n\tvec2 pq0 = v0 - e0*clamp( dot(v0,e0)/dot(e0,e0), 0.0, 1.0 );\n\tvec2 pq1 = v1 - e1*clamp( dot(v1,e1)/dot(e1,e1), 0.0, 1.0 );\n\tvec2 pq2 = v2 - e2*clamp( dot(v2,e2)/dot(e2,e2), 0.0, 1.0 );\n    \n    float s = sign( e0.x*e2.y - e0.y*e2.x );\n    vec2 d = min( min( vec2( dot( pq0, pq0 ), s*(v0.x*e0.y-v0.y*e0.x) ),\n                       vec2( dot( pq1, pq1 ), s*(v1.x*e1.y-v1.y*e1.x) )),\n                       vec2( dot( pq2, pq2 ), s*(v2.x*e2.y-v2.y*e2.x) ));\n\n\treturn -sqrt(d.x)*sign(d.y);\n}\n\nstruct edge {vec2 p1; vec2 p2;};\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0*fragCoord.xy-iResolution.xy)/iResolution.y;\n\n    \n\tvec2 v1 = vec2(-0.5,0.4);\n\tvec2 v2 = vec2(-0.3,-0.3);\n\tvec2 v3 = vec2(0.5,-0.5);\n    vec2 v4 = vec2(0.8,0.3);\n\t\n    edge e1 = edge(v1, v2);\n    edge e2 = edge(v2, v3);\n    edge e3 = edge(v3, v4);\n    edge e4 = edge(v4, v1);\n    \n    edge[] V = edge[](e1, e2, e3, e4);\n    \n    vec2 P = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n    int n = 4;\n    vec3 c = vec3(0.);\n    \n    \n    for(int i = 0; i < n; i++)\n    {\n    \tvec2 u = P - p;\n        vec2 v = V[i].p2 - V[i].p1;\n        vec2 w = p - V[i].p1;\n        \n        float t1 = perp(u,w) / perp(u,v);\n        float t2 = perp(v,w) / perp(u,v);\n    \tif (t1 > 0. && t1 < 1. && t2 > 0. && t2 < 1.)               \n        {\n\t\t\tc = vec3(1.,0.,0.);\n            break;\n        }\n    }\n\tfloat d = sdTriangle( v1, v2, v3, p ) * sdTriangle( v1, v3, v4, p ) ;\n\n    vec3 col =  c + vec3(0.,0.,1.)*sign(d);\n\n\n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}