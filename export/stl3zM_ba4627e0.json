{"ver":"0.1","info":{"id":"stl3zM","date":"1621816979","viewed":73,"name":"Voronoi book of shaders","username":"Sumar","description":"c√≥digo voronoi do book of shaders.(???)","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["voronoi"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 rand2( vec2 p ) {\n    return fract(sin(vec2(dot(p,vec2(3347.1,431.7)),dot(p,vec2(2456.5,1733.3))))*9558.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    uv -= .5;\n    //uv.y *= uv.x;\n    uv.x += sign(uv.x)*.11;\n    uv *= 1./(uv.x*uv.x*.7);\n    \n\n    vec2 i = floor(uv);\n    vec2 f = fract(uv);\n    \n    \n    float div = 2.7;\n    float m_dist= 10.;\n    vec2 c;\n    for (int y= -1; y <= 1; y++) {\n        for (int x= -1; x <= 1; x++) {\n            vec2 neighbor = vec2(float(x),float(y));\n\n            vec2 point = rand2(i + neighbor);\n\n            point =  1./div + cos(234.*point*point.y+iTime)/div;\n\n            vec2 diff = neighbor + point - f;\n\n            float dist = length(diff);\n\n            if(m_dist>dist){\n                m_dist = dist;\n                c = point;\n            }\n        }\n    }\n\n    // Time varying pixel color\n    vec3 col = vec3(1.-c,1.);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}