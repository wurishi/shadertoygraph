{"ver":"0.1","info":{"id":"7ljSWh","date":"1627751582","viewed":74,"name":"rhombitrihexagonal tiling","username":"mihail8531","description":"rhombitrihexagonal tiling","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["geometry","tiling","rhombitrihexagonal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2x2 GetRotM(float angle) \n{\n    return mat2x2(cos(angle), -sin(angle), +sin(angle), cos(angle));\n}\nfloat HexDist(vec2 p) \n{\n    p = abs(p);\n    float d = dot(normalize(vec2(1.0, 1.73205080757)), p); // sqrt(3)\n    return max(d,p.x);;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec3 col = vec3(0.0);\n    uv = uv*(sin(iTime) + 4.) + vec2(iTime*2.);\n    vec2 r = vec2(1.,1.73205080757); // sqrt(3)\n    vec2 h = r * 0.5;\n    vec2 a = mod(uv, r)-h;\n    vec2 b = mod(uv-h, r)-h;\n    vec2 gv;\n    if (length(a) < length(b))\n        gv = a;\n    else\n        gv = b;\n    float squareD = 1.;\n    for (int i = 0; i < 3; i++) \n    {\n        vec2 p = GetRotM(float(i) * 1.0471975512) * gv; // pi/3\n        squareD = min(max(abs(abs(p.x) - 0.5), 1. - abs(abs(p.y) - 1.0)), squareD);\n    }\n    float squareFlag = step(squareD, 0.1830127019); // 0.5 - 0.5 * sqrt(3) / (sqrt(3) + 1)\n    float hexFlag = step(HexDist(gv), 0.3169872981); // 0.5 * sqrt(3) / (sqrt(3) + 1)\n    float triFlag = (1. - squareFlag) * (1. - hexFlag);\n    col.b = hexFlag;\n    col.r = squareFlag;\n    col.g = triFlag;\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}