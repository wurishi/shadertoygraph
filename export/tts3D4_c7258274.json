{"ver":"0.1","info":{"id":"tts3D4","date":"1556400794","viewed":155,"name":"my broter","username":"Pyramid","description":"dark side\n\ni don't understand how to zoom properly. yet.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Real-Imaginary multiplication\nvec2 rIMult(vec2 complex, vec2 other)\n{\n    float r=complex.x;\n    float i=complex.y;\n    \n    float or=other.x;\n    float oi=other.y;\n    \n    return vec2(r*or-i*oi,r*oi+i*or);\n}\n\n//Real-Imaginary addition\nvec2 rIAdd(vec2 complex, vec2 other)\n{\n\tfloat r=complex.x;\n    float i=complex.y;\n    \n    float or=other.x;\n    float oi=other.y;\n    \n    return vec2(r+or, i+oi);\n}\n\n//Real-Imaginary square magnitude\nfloat SqrMagnitude(vec2 complex)\n{\n    float r=complex.x;\n    float i=complex.y;\n    \n    return r*r+i*i;\n}\n\n//Get stability\nint steps(vec2 complex, int iterations)\n{\n    int n=0;\n    vec2 z=vec2(0);\n    while(n<iterations && SqrMagnitude(z)<=5.)\n    {\n        z=rIMult(z,z);\n        z=rIAdd(z,complex);\n        ++n;\n    }\n    \n    if(n==iterations)\n    {\n        return iterations;\n    }else{\n        return n;\n    }\n}\n\n//mandelzoom\n/*vec2 mandelZoom(vec2 uv, vec2 target, vec2 lvl)\n{\n    return vec2(target.x + uv.x*lvl.x,\n        \t\ttarget.y + uv.y*lvl.y);\n}*/\n\n#define hue(h) abs(fract(h + vec3(3,2,1)/3.) * 6. - 3.) -1.\n#define eel(h) abs(fract(h + vec3(3,2,1)/6.) * 7. - 3.) -1.5\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //center origo\n    vec2 uv = fragCoord/iResolution.xy;\n\tuv-=.5;\n    \n    //set aspect ratio\n    float ratio=iResolution.x/iResolution.y;\n    uv.x*=ratio;\n    \n    /*\n    c.x = screen_ratio * (gl_FragCoord.x / screen_size.x - 0.5);\n    c.y = (gl_FragCoord.y / screen_size.y - 0.5);\n \n    c.x /= zoom;\n    c.y /= zoom;\n \n    c.x += center.x;\n    c.y += center.y;\n    */\n    \n    float t=iTime/2.;\n    float cowabunga=220.;\n    float res=sin(t+2.)*cowabunga+cowabunga-30.8;\n    int maxIt=2000;\n    \n    int amSteps=steps(uv, maxIt);\n    //mix stability across part of eel spectrum over dynamic resolution\n    float fSteps=mix(.1,1.6,float(amSteps)/res);\n    \n    //blacken maxed-out iterations and clamp eel limit\n    vec3 c=vec3(amSteps==maxIt?vec3(0):eel(clamp(2.7,71.9,fSteps)));\n    \n    fragColor = vec4(c,1.0);\n}","name":"Image","description":"","type":"image"}]}