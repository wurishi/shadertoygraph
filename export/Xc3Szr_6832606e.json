{"ver":"0.1","info":{"id":"Xc3Szr","date":"1713470459","viewed":62,"name":"Dancing Sunflower","username":"steinklo","description":"A dancing sunflower!","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["audio"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3Rn","filepath":"/media/a/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","previewfilepath":"/media/ap/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec3 innerColor = vec3(1.0, 1.0, 0.0);\nconst vec3 midColor = vec3(1.0, 0.0, 0.0);\nconst vec3 outerColor = vec3(0.4, 0.0, 1.0);\n\nconst float innerRadiusGain = 0.15;\nconst float midRadiusGain = 0.45;\nconst float outerRadiusGain = 0.75;\nconst float radius = 0.4;\nconst float size = 0.8;\n\nconst float PI = 3.141592653589793;\nfloat random(vec2 co) {\n  return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = fragCoord.xy / iResolution.xy;\n  uv.y -= 0.1;\n\n  // Center the coordinates\n  vec2 centeredUV = uv * 2.0 - 1.0;\n  centeredUV.x *= iResolution.x / iResolution.y;\n\n  // Flip the Y axis to create symmetry\n  if (centeredUV.x >= 0.0)\n  {\n    centeredUV.y = -centeredUV.y;\n  }\n\n  // Noice\n  float noise = random(uv + iTime);\n\n  // Convert UV to polar coordinates\n  float angle = atan(centeredUV.x, centeredUV.y);\n  if(angle < 0.0) angle += 1.0 * PI;\n\n  float dist = length(centeredUV);\n  float index = angle / (1.0 * PI);\n  float audioValue = texture(iChannel0, vec2(index, 0.0)).x;\n  if (audioValue < 0.01)\n  {\n    audioValue = 0.01 + sin(noise) * 0.01;\n  }\n\n\n  float dynamicInnerRadius = radius + audioValue * size * innerRadiusGain;\n  float dynamicMidRadius = radius + audioValue * size * midRadiusGain;\n  float dynamicOuterRadius = radius + audioValue * size * outerRadiusGain;\n  float dynamicEndRadius = radius + audioValue * size;\n\n  vec3 color = mix(midColor, outerColor, smoothstep(dynamicMidRadius, dynamicOuterRadius, dist));\n  color = mix(innerColor, color, smoothstep(dynamicInnerRadius, dynamicMidRadius, dist));\n  color *= 1.0 - smoothstep(dynamicMidRadius, dynamicEndRadius, dist);\n\n  fragColor = vec4(color, 1.0); // Color based on intensit\n}","name":"Image","description":"","type":"image"}]}