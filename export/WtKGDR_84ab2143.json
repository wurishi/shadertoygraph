{"ver":"0.1","info":{"id":"WtKGDR","date":"1578673122","viewed":329,"name":"Sierpinski fish sculpture.","username":"Logos","description":"Tasty two-directional fish :) - shaded by parallel photon diffusor.","likes":23,"published":1,"flags":0,"usePreview":0,"tags":["fractal","fish","sierpinski","parallel"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Created by Robert Śmietana (Logos) - 10.01.2020\n// Bielsko-Biała, Poland, UE, Earth, Sol, Milky Way, Local Group, Laniakea :)\n\n\n//--- set this carefully, don't set more than 60 ---//\n\n#define SAMPLE_COUNT 20\n\n\n//--- auxiliary functions ---//\n\nfloat hash(float seed) { return fract(sin(seed)*43758.5453); }\n\nfloat sdBox(vec3 p, vec3 b) { vec3 q = abs(p) - b; return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0); }\n\n\n//--- geometry ---//\n\nfloat dist(vec3 p)\n{\n    vec3 z = p;\n    \n\tif (abs(z.x) < 6.0) z.x = sin(z.x) + 0.1 * sin(2.4 * z.x);\n\t\n\tfor (int n = 0; n < 8; n++)\n\t{\n\t\tif (z.x + z.y < 0.0) z.xy = -z.yx;\n\t\tif (z.x + z.z < 0.0) z.xz = -z.zx;\n\t\tif (z.y + z.z < 0.0) z.zy = -z.yz;\n\t\t\n\t\tz = 2.0 * z - vec3(1.0);\n\t}\n\t\n    float d = (length(z) - 2.0) / 512.0;\n    d = max(d, sdBox(p, vec3(4.8)));\t\t// cut exactly one fish\n    \n    return min(d, sdBox(p + vec3(0.0, 1.2, 0.0), vec3(6.0, 0.2, 4.0)));\n}\n\n\n//--- normal ---//\n\nvec3 calcNormal(in vec3 pos)\n{\n    vec3 eps = vec3(0.0001,0.0,0.0);\n    \n    return normalize(vec3(\n      dist(pos+eps.xyy) - dist(pos-eps.xyy),\n      dist(pos+eps.yxy) - dist(pos-eps.yxy),\n      dist(pos+eps.yyx) - dist(pos-eps.yyx)));\n}\n\n\n//--- function taken from https://www.shadertoy.com/view/MdfGRr by iq ---//\n\nvec2 isphere( in vec4 sph, in vec3 ro, in vec3 rd )\n{\n    vec3 oc = ro - sph.xyz;\n    \n\tfloat b = dot(oc,rd);\n\tfloat c = dot(oc,oc) - sph.w*sph.w;\n    float h = b*b - c;\n    if( h<0.0 ) return vec2(-1.0);\n    h = sqrt( h );\n    return -b + vec2(-h,h);\n}\n\n\n//--- sphere tracing with sphere bounding volume ---//\n\nfloat intersect(in vec3 ro, in vec3 rd)\n{\n    vec2 dis = isphere(vec4(0.0, 0.0, 0.0, 5.4), ro, rd);\n    if(dis.y < 0.0) return -1.0;\n\n    float t = max(0.0, dis.x);\n    float res = -1.0;\n    float tmax = 25.0;\n    \n    for (int i = 0; i < 80; i++)\n    {\n        float h = dist(ro + rd*t);\n        if (h < 0.0001 || t > tmax) break;\n        t += h;\n    }\n    \n    if (t < tmax) res = t;\n\n    return res;\n}\n\n\n//--- calculates pixel color ---//\n\nvec3 calculateColor(in vec3 ro, in vec3 rd, int s)\n{\n    vec3 hit = vec3(0.0);\n    vec3 hitNormal = vec3(0.0);\n    vec3 luminance = vec3(1.0);\n    \n\tfor (int bounce = 0; bounce < 4; bounce++)\n\t{\n      \tfloat t = intersect(ro, rd);\n\n        if (t > 0.0)\n        {\n            hit = ro + t*rd;\n            hitNormal = calcNormal(hit);\n            rd = dirs[4*s + bounce];\n            if (dot(rd, hitNormal) < 0.0) rd = -rd;\n            \n            vec3 color = vec3(0.4, 0.6, hit.y < 0.2 ? 0.40 : 0.82);\n            color.x += 0.15 * sin(0.42*iTime);\n            \n            luminance *= color * dot(rd, hitNormal);\n            ro = hit + 0.002 * hitNormal;\n        }\n\t\telse \n        {\n            if (bounce == 0) return vec3(0.0);\n      \t\treturn 2.4 * luminance * vec3(0.6, 0.7, 0.8);\n    \t}\n\t}\n    \n  \treturn vec3(0.0);\n}\n\n\n//--- camera functions ---//\n\nmat3 setCamera(in vec3 ro, in vec3 rt, in float cr)\n{\n\tvec3 cw = normalize(rt-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr), 0.0);\n\tvec3 cu = normalize( cross(cw,cp));\n\tvec3 cv = normalize( cross(cu,cw));\n    return mat3(cu, cv, -cw);\n}\n\n\n//--- final color ---//\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec3 final_color = vec3(0.0);\n    \n    for (int s = 0; s < SAMPLE_COUNT; s++)\n    {\n    \tfloat sa = hash( dot( fragCoord, vec2(12.9898, 78.233) ) + 3213.1*float(s) );\n\t    vec2 of = -0.5 + vec2( hash(sa+13.271), hash(sa+63.216) );\n        \n        vec2 p = (-iResolution.xy + 2.0*(fragCoord+of)) / iResolution.y;\n\n        vec3 ro = vec3(\n            9.0*cos(0.4*iTime + 1.0),\n            3.2 + 1.5 * sin(0.3 * iTime),\n            5.0*sin(0.4*iTime + 1.0));\n        \n        vec3 ta = vec3(0.0,0.0,0.0);\n\n        mat3  ca = setCamera(ro, ta, 0.0);\n        vec3  rd = normalize(ca * vec3(p,-1.3));\n\n        final_color += calculateColor(ro, rd, s);\n    }\n\n    final_color *= 1.0 / float(SAMPLE_COUNT);\n    final_color = pow(final_color, vec3(1.0/1.784)); \n    \n    fragColor = vec4(final_color, 1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// random unit vector generator, I wrote in processing3:\n\n/*\nint SAMPLE_COUNT = 40; // means 40 * 4 = 160 vectors, because we write 4 vectors per line\n\nString[] lines;\n\nString getRandomVector()\n{\n    float u = random(1000000) / 1000000.0;\n    float v = random(1000000) / 1000000.0;\n\n    u *= TWO_PI;\n    v = 2.0 * v - 1.0;\n    \n    float r = sqrt(1.0 - v*v);\n    float R = 200.0;\n\n    line(0, 0, 0, R*r*sin(u), R*v, R*r*cos(u));\n\n    return \"vec3(\" + (r*sin(u)) + \", \" + v + \", \" + (r*cos(u)) + \"), \";\n}\n\nvoid setup()\n{\n  size(800, 800, P3D);\n  noLoop();\n  \n  noFill();\n  background(0);\n  stroke(255);\n  translate(width/2, height/2, 0);\n  \n  lines = new String[1];\n  lines[0] = \"vec3 dirs[\" + (4*SAMPLE_COUNT) + \"] = vec3[](\";\n  \n  for (int s = 0; s < SAMPLE_COUNT; s++)\n  {\n    lines = append(lines, getRandomVector() + getRandomVector() + getRandomVector() + getRandomVector());\n  }\n  \n  lines = append(lines, \");\");\n  \n  saveStrings(\"lines.txt\", lines);\n}\n\n*/\n\n\nvec3 dirs[160] = vec3[](\nvec3(0.18436214, 0.4244715, -0.8864731), vec3(0.93881994, -0.15687513, -0.30660614), vec3(0.48763004, 0.67174983, -0.55764604), vec3(-0.19837551, 0.97969687, -0.029003393), \nvec3(-0.16963102, 0.69765663, -0.6960608), vec3(-0.3721773, -0.8216765, -0.43166167), vec3(0.031176053, -0.8502337, -0.52548146), vec3(-0.73826694, 0.2061218, 0.6422427), \nvec3(0.62210673, 0.76203215, 0.17969482), vec3(0.012004639, -0.92092717, 0.3895498), vec3(0.60406476, -0.7515601, -0.26507202), vec3(0.58977544, -0.6728511, 0.446583), \nvec3(0.3942338, -0.867597, 0.30307624), vec3(0.9699098, 0.07957685, 0.23009253), vec3(0.8107835, -0.5335504, 0.24073662), vec3(0.27698967, 0.7163452, 0.640411), \nvec3(0.19575535, -0.37139452, 0.9076046), vec3(0.13560197, 0.92650783, -0.35099196), vec3(0.22658716, -0.27266216, -0.9350474), vec3(0.8818768, 0.16519284, 0.44159323), \nvec3(0.59638405, -0.7944615, -0.11470421), vec3(-0.45725816, -0.26082253, 0.8502273), vec3(-0.20672448, 0.53505015, -0.8191376), vec3(0.8386785, -0.36051548, 0.4082242), \nvec3(0.096090026, 0.25795949, 0.96136546), vec3(-0.1571723, -0.3069123, 0.9386701), vec3(0.7880707, -0.5638212, -0.24708356), vec3(-0.2949157, -0.68418884, -0.667016), \nvec3(0.92329353, 0.36427677, 0.12178463), vec3(0.20523559, -0.9373863, 0.28139886), vec3(0.16244763, -0.82982826, 0.53385), vec3(0.112451136, 0.8170892, -0.56543785), \nvec3(-0.17007068, -0.4847709, -0.85794705), vec3(-0.6999321, 0.32696736, -0.63497037), vec3(0.13560943, 0.32785678, 0.9349438), vec3(0.14514482, 0.4510845, 0.8805997), \nvec3(-0.052608818, 0.53653216, 0.8422384), vec3(-0.9026332, 0.33012617, -0.27617043), vec3(-0.40339836, 0.5965421, 0.6938352), vec3(-0.18006283, -0.76378775, -0.6198433), \nvec3(0.91482806, 0.06745851, -0.39816958), vec3(-0.95223165, 0.07359302, 0.29637635), vec3(-0.39029878, -0.6603385, 0.6415762), vec3(-0.019948322, -0.470868, -0.8819781), \nvec3(-0.82026005, -0.021560967, 0.5715842), vec3(-0.8671437, 0.4978739, -0.01353946), vec3(-0.9885658, 0.10997522, -0.10316557), vec3(-0.54457086, 0.5831095, -0.6028481), \nvec3(-0.6915613, -0.7222061, -0.012701548), vec3(0.5856016, -0.20454085, 0.78436834), vec3(0.6223535, 0.6200733, -0.4776873), vec3(-0.036378995, -0.18862689, 0.9813748), \nvec3(-0.30083168, -0.16690612, 0.9389583), vec3(-0.46405345, 0.7141104, 0.524119), vec3(-0.09275036, 0.87556064, -0.4741212), vec3(0.8460847, -0.3980366, -0.3545526), \nvec3(0.42775074, 0.8205434, -0.37912774), vec3(-0.98633283, 0.037767768, -0.16037795), vec3(-0.2861487, 0.6704501, 0.68455505), vec3(0.6537156, 0.41533804, -0.63257426), \nvec3(-0.16349317, 0.7161671, -0.6785091), vec3(0.057825334, 0.9734137, -0.22163476), vec3(-0.8259325, -0.54907227, -0.12788755), vec3(0.77545756, -0.4067409, -0.4829363), \nvec3(0.026710777, -0.14452827, -0.98914003), vec3(0.5102988, 0.52573705, -0.68058485), vec3(-0.35357592, 0.6727953, -0.6498697), vec3(-0.03724683, -0.18274379, -0.9824548), \nvec3(-0.459783, -0.88635254, 0.054578334), vec3(-0.3415626, 0.10746491, -0.93369496), vec3(-0.4419773, -0.7904655, 0.42405233), vec3(0.48886743, -0.52277446, -0.69836634), \nvec3(-0.33010736, -0.9037392, -0.27255198), vec3(0.5932506, 0.61173916, -0.5232867), vec3(0.6655258, 0.11208248, -0.73791116), vec3(-0.58334297, -0.6545112, -0.4809637), \nvec3(-0.1932351, -0.6192156, -0.76107305), vec3(-0.041317932, 0.96393526, -0.26290992), vec3(0.73103184, 0.07804215, 0.6778656), vec3(-0.09967283, -0.10109854, 0.9898709), \nvec3(0.36005047, 0.81219816, 0.45901826), vec3(-0.48466486, -0.22617018, 0.8449539), vec3(0.7641046, -0.64280283, -0.05430178), vec3(-0.7932381, -0.6086308, -0.018489704), \nvec3(-0.7281248, -0.36871243, 0.57782817), vec3(-0.4842084, -0.8749515, -0.0014492861), vec3(-0.61572635, -0.49816, -0.61050606), vec3(-0.93609166, 0.35139012, -0.016042069), \nvec3(-0.5247103, 0.30215454, -0.79585284), vec3(0.6342208, -0.23276842, -0.7372807), vec3(-0.5210612, -0.63544035, -0.569834), vec3(-0.88929, -0.43598676, 0.13812643), \nvec3(-0.6970875, 0.3058486, -0.64847946), vec3(-0.819119, 0.017377019, -0.57336044), vec3(0.4920012, 0.052782297, 0.8689929), vec3(-0.8873678, -0.20613503, -0.4124158), \nvec3(-0.46325395, 0.87991464, -0.10557461), vec3(-0.84301287, 0.5303341, -0.08986096), vec3(-0.38043, -0.831509, -0.40480343), vec3(0.02167054, 0.515661, 0.8565186), \nvec3(-0.08699054, 0.70904624, 0.6997757), vec3(0.9246957, -0.23556423, 0.2990776), vec3(0.41447592, -0.406801, -0.8140778), vec3(0.9593409, -0.2591107, -0.111922845), \nvec3(-0.36784193, 0.9099226, -0.19165903), vec3(0.47409096, 0.44677377, 0.75870353), vec3(-0.7871091, 0.32238483, 0.52585864), vec3(-0.40302303, -0.3358866, 0.8513241), \nvec3(0.42921713, -0.6963017, -0.57527095), vec3(0.5342768, -0.36636215, -0.76179206), vec3(0.90792066, 0.41024375, 0.08590774), vec3(0.7106646, -0.70038915, -0.06641477), \nvec3(-0.40723798, -0.06749427, -0.9108248), vec3(-0.55162686, 0.06515384, 0.83154243), vec3(0.87526244, -0.045253277, -0.48152655), vec3(0.614991, -0.46117258, -0.6396139), \nvec3(0.7135537, 0.051721454, -0.6986887), vec3(-0.39711955, 0.42917132, -0.8112386), vec3(0.95984894, 0.23464108, 0.1537319), vec3(-0.64303637, 0.13139606, 0.7544795), \nvec3(0.19767204, -0.58236337, 0.78852946), vec3(-0.22292171, 0.87796974, -0.42364493), vec3(0.68072456, 0.6041653, -0.4142442), vec3(-0.96022457, -0.02277112, 0.27829897), \nvec3(0.82032007, -0.40943658, -0.39929527), vec3(0.81059873, -0.31763744, -0.4919716), vec3(0.66962886, 0.5578959, 0.49025437), vec3(0.022303239, -0.18553579, -0.9823844), \nvec3(0.98021245, 0.18630004, -0.06690165), vec3(-0.5447055, -0.7386993, -0.3970129), vec3(0.77806526, -0.5027243, -0.37667325), vec3(-0.6220717, -0.10219121, 0.77626276), \nvec3(-0.41340324, 0.534268, 0.7373299), vec3(-0.11364603, 0.9910867, -0.06951032), vec3(-0.92250293, 0.162027, 0.35033646), vec3(0.35159573, 0.58408594, 0.7315901), \nvec3(0.08008248, -0.9614769, -0.2629618), vec3(0.2331871, 0.17683029, 0.956219), vec3(-0.3396079, 0.43377817, 0.83456755), vec3(0.2885952, 0.87656474, 0.3851585), \nvec3(0.6555794, 0.6882373, 0.31071693), vec3(0.465451, -0.6402106, -0.61113477), vec3(0.26994225, 0.2758875, 0.922506), vec3(0.13973348, 0.9269078, 0.3483052), \nvec3(0.40187678, -0.37286663, -0.83634055), vec3(-0.83574206, -0.26224136, 0.48245683), vec3(0.52008194, -0.057423472, 0.8521838), vec3(-0.08925823, -0.7466519, -0.6591994), \nvec3(-0.5394129, 0.46675122, 0.70084023), vec3(0.20127484, 0.89168, 0.40545678), vec3(-0.46386975, 0.27213526, 0.8430701), vec3(0.5239717, 0.005962968, -0.85171473), \nvec3(-0.32523757, -0.88369215, 0.33661357), vec3(-0.61547273, 0.24016869, -0.75067455), vec3(0.9462732, -0.12690437, -0.29742628), vec3(0.96082675, -0.005317569, -0.27709877), \nvec3(0.71483755, -0.69768894, -0.047300983), vec3(-0.0036429716, -0.3153386, 0.94897217), vec3(0.27067327, -0.6810858, -0.6803367), vec3(-0.62959623, -0.6070627, 0.48485392)\n);\n","name":"Common","description":"","type":"common"}]}