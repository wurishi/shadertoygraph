{"ver":"0.1","info":{"id":"MfKXDm","date":"1715303842","viewed":46,"name":"First College Project Recreated","username":"alw98","description":"recreated and added onto first graphics project","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["polar"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 rgb2hsv(vec3 c)\n{\n    vec4 K = vec4(0.0, -1.0/3.0, 2.0/3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvec2 convertCartesianToPolar(vec2 coord) {\n    return vec2(atan(coord.y, coord.x), length(coord));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // The minimum the dist will go. this will be inverted 1 / min to control the max rotation\n    // Will cycle every 10 seconds \n    float interval = 10.0;\n    float theta = (iTime * 3.14 * 2.0) / interval;\n    float scaledSin = (sin(theta) + 1.0) / 2.0;\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 uvCentered = (uv + vec2(-.5, -.5)) * 2.0;\n    uvCentered.x = uvCentered.x / scaledSin;\n    \n    vec2 uvPolar = convertCartesianToPolar(uvCentered);\n\n    vec3 uv3Polar = vec3(uvPolar, theta);\n\n    float distFromCenter = uvPolar.y;\n    \n    vec3 hsvCol = vec3(.5, .5, .5);\n    float size = .5;\n    if(distFromCenter < size) {\n        // Spiral in center\n        // Scale dist so that 1 is in the center and 0 is the outer ring\n        float flippedDist =  (distFromCenter - size) * -1.0;\n        \n        // The minimum the dist will go. this will be inverted 1 / min to control the max rotation\n        // Will cycle every 3 seconds \n        float interval = 3.0;\n        theta = (iTime * 3.14 * 2.0) / interval;\n        scaledSin = (sin(theta) + 1.0) / 2.0;\n        float minDist = scaledSin * .5;\n        float clampedDist = clamp(flippedDist, minDist + .02, 1.0);\n        float rotation = .1 / clampedDist;\n        hsvCol = vec3((uvPolar.x + rotation) / (2.0 * 3.14), 1, 1);\n    }\n    \n    // Output to screen\n    fragColor = vec4(hsv2rgb(hsvCol), 1.0);\n}","name":"Image","description":"","type":"image"}]}