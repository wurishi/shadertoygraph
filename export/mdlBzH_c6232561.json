{"ver":"0.1","info":{"id":"mdlBzH","date":"1688480732","viewed":51,"name":"I♥MOSS","username":"Mario8664","description":"I♥MOSS 2D","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["2d","text"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 bg(vec2 uv)\n{\n    return texture(iChannel1, uv).xyz;\n}\n\nfloat sdCircle(vec2 pos, vec2 uv, float radius)\n{    \n    return clamp(ceil(length(uv - pos) - radius), 0.0, 1.0);\n}\n\nfloat getHeart(vec2 pos, vec2 uv, float size)\n{\n    float jump = max(0.0, sin(iTime * 8.0) - 0.9);\n    uv -= pos;\n    uv -= normalize(uv) * (jump * 0.2 + 0.03);\n    uv += pos;\n    size += jump * 0.1;\n\n    float halfSize = size / 2.0;\n    float quarterSize = size / 4.0;\n    vec2 leftPos = pos;\n    leftPos.x -= halfSize;\n    leftPos.y += quarterSize;\n    float left = sdCircle(leftPos, uv, halfSize);\n    vec2 rightPos = pos;\n    rightPos.x += halfSize;\n    rightPos.y += quarterSize;\n    float right = sdCircle(rightPos, uv, halfSize);\n    \n    vec2 heartEnd = pos;\n    heartEnd.y -= size;\n    \n    float tri1 = 1.0 - GetTriangle(uv, heartEnd, leftPos - heartEnd, rightPos - heartEnd);\n    \n    vec2 leftDown = normalize(vec2(-1.0, -1.0)) * halfSize;\n    float tri2 = 1.0 - GetTriangle(uv, leftPos, heartEnd - leftPos, leftDown);\n    vec2 rightDown = leftDown;\n    rightDown.x = -rightDown.x;\n    float tri3 = 1.0 - GetTriangle(uv, rightPos, heartEnd - rightPos, rightDown);\n    \n    float polygon = min(tri1, min(tri2, tri3));\n    return min(polygon, min(left, right));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 bguv = fragCoord/iResolution.xy;\n    vec2 uv = fragCoord/iResolution.yy;\n    vec3 col = bg(bguv);\n    \n    _INIT(vec2(0.0, 0.35), 0.25);\n    \n    _M _A _R _I _O\n    float stringI = texture(iChannel0, stringUV).a;\n    stringI = ceil(stringI - 0.5);\n    col.rgb *= stringI;\n    col.rgb += (1.0 - stringI) * vec3(0.5, 0.8, 1.0);\n    \n    _RESET(vec2(1.1, 0.35), 0.25);\n    _M _O _S _S\n    float stringMOSS = texture(iChannel0, stringUV).a;\n    stringMOSS = ceil(stringMOSS - 0.5);\n    col.rgb *= stringMOSS;\n    col.rgb += (1.0 - stringMOSS) * vec3(0.3, 0.6, 0.2);\n\n    float heart = getHeart(vec2(0.92, 0.5), uv, 0.17);\n    col.rgb *= heart;\n    col.rgb += (1.0 - heart) * vec3(0.8, 0.0, 0.0);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define _CUTX 0.25\n#define _CUTY 0.0\n#define _INIT(stpos, size)     int num = 0;\\\n    int x = 0;\\\n    int y = 0;\\\n    float mask = 0.0;\\\n    vec2 stringUV = vec2(0.0);\\\n    vec2 charUV = vec2(0.0);\\\n    vec2 textStartPos = stpos;\\\n    float textSize = size\n\n#define _RESET(stpos, size)    num = 0;\\\n    x = 0;\\\n    y = 0;\\\n    mask = 0.0;\\\n    stringUV = vec2(0.0);\\\n    charUV = vec2(0.0);\\\n    textStartPos = stpos;\\\n    textSize = size\n    \n#define CH(idx)    charUV = (uv - textStartPos) / textSize;\\\n    mask = min(min(ceil(charUV.x - _CUTX), ceil(charUV.y - _CUTY)), min(1.0 - floor(charUV.x + _CUTX), 1.0 - floor(charUV.y +  - _CUTY)));\\\n    mask = clamp(mask, 0.0, 1.0);\\\n    num = idx;\\\n    x = num % 16;\\\n    y = 255 - num / 16;\\\n    charUV /= 16.0;\\\n    charUV.x += float(x) / 16.0;\\\n    charUV.y += float(y) / 16.0;\\\n    stringUV += charUV * mask;\n    \n#define _APPEND textStartPos.x += textSize * (1.0 - _CUTX * 2.0);\n\n#define _ADD CH(43)_APPEND\n#define _SPACE CH(32)_APPEND\n#define _0 CH(48)_APPEND\n#define _1 CH(49)_APPEND\n#define _2 CH(50)_APPEND\n#define _3 CH(51)_APPEND\n#define _4 CH(52)_APPEND\n#define _5 CH(53)_APPEND\n#define _6 CH(54)_APPEND\n#define _7 CH(55)_APPEND\n#define _8 CH(56)_APPEND\n#define _9 CH(57)_APPEND\n#define _COLON CH(58)_APPEND\n#define _A CH(65)_APPEND\n#define _I CH(73)_APPEND\n#define _M CH(77)_APPEND\n#define _O CH(79)_APPEND\n#define _R CH(82)_APPEND\n#define _S CH(83)_APPEND\n\nint xorshift(in int value) {\n    // Xorshift*32\n    // Based on George Marsaglia's work: http://www.jstatsoft.org/v08/i14/paper\n    value ^= value << 13;\n    value ^= value >> 17;\n    value ^= value << 5;\n    return value;\n}\n\nint nextInt(inout int seed) {\n    seed = xorshift(seed);\n    return seed;\n}\n\nint nextInt(inout int seed, in int minI, in int maxI) {\n    seed = xorshift(seed);\n    return minI + seed % (maxI - minI);\n}\n\nfloat nextFloat(inout int seed) {\n    seed = xorshift(seed);\n    // FIXME: This should have been a seed mapped from MIN..MAX to 0..1 instead\n    return abs(fract(float(seed) / 3141.592653));\n}\n\nfloat nextFloat(inout int seed, in float maxf) {\n    return nextFloat(seed) * maxf;\n}\n\nfloat nextFloat(inout int seed, in float minf, in float maxf) {\n    return minf + nextFloat(seed) * (maxf - minf);\n}\nfloat GetTriangle(vec2 uv, vec2 p, vec2 d1, vec2 d2)\n{\n    vec2 duv = uv - p;\n    vec3 cd1d2 = cross(vec3(d1, 0.0), vec3(d2, 0.0));\n    vec3 cd1duv = cross(vec3(d1, 0.0), vec3(duv, 0.0));\n    vec3 cduvd2 = cross(vec3(d2, 0.0), vec3(duv, 0.0));\n    if(cd1d2.z * cd1duv.z > 0.0 && cd1d2.z * cduvd2.z < 0.0 ) \n    {\n        float t = cd1duv.z / (cd1duv.z - cduvd2.z);\n        vec2 maxD = d1 + (d2 - d1) * t;\n        if(dot(duv, duv) <= dot(maxD, maxD))\n        {\n            return 1.0;\n        }\n    }\n    return 0.0;\n}","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define PI 3.1415926535897932384626433832795\n#define SEED 752\n\n\nvec2 GetRotatePoint(float angle, vec2 p)\n{\n    float sa = sin(angle);\n    float ca = cos(angle);\n    \n    mat2 rot = mat2(ca, sa, -sa, ca);\n    return rot * p;\n\n}\n\nfloat GetStar(vec2 uv, vec2 pos, float inRadius, float outRadius, float count, float initAngle)\n{\n    float angle = PI * 2.0 / count;\n    vec2 up = GetRotatePoint(initAngle, vec2(0.0, 1.0));\n    float sum = 0.0;\n    for(float i = 0.0; i < count; i++)\n    {\n        vec2 d1 = GetRotatePoint(i * angle, up * outRadius);\n        vec2 d2 = GetRotatePoint((i + 1.0) * angle, up * outRadius);\n        vec2 id = GetRotatePoint((i + 0.5) * angle, up * inRadius);\n        \n        float t1 = GetTriangle(uv, pos, d1, id);\n        float t2 = GetTriangle(uv, pos, id, d2);\n        sum = max(sum, t1);\n        sum = max(sum, t2);\n    }\n    \n    \n    return sum;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.y;\n\n    float star = 0.0; \n    int s = SEED;\n    for(int i = 0; i < 50; i++)\n    {\n        float posX = nextFloat(s, iResolution.x / iResolution.y);\n        float posY = nextFloat(s);\n        float size = nextFloat(s, 0.005, 0.01);\n        float expand = nextFloat(s, 0.2);\n        float angle = nextFloat(s, PI * 2.0);\n        star = max(star, GetStar(uv, vec2(posX, posY), size, size * (2.0 + sin(iTime * 5.0) * 0.2 + expand), 5.0, iTime + angle));\n    }\n    \n    vec3 col = mix(vec3(0.05, 0.1 * (uv.x + sin(iTime) * 0.5 + 0.5), 0.3 * uv.y), vec3(1.0, 1.0, 0.5), star);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}