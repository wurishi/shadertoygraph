{"ver":"0.1","info":{"id":"7ly3WW","date":"1637681043","viewed":168,"name":"Vector Field visualizer","username":"lesserfish","description":"Change the equations F1(x, y) and F2(x,y) by changing the return value of vec2 diff(vec2 uv).\n\nThe direction of the ellipse indicastes the direction of the vector field at that point, the size of the ellipse indicate the rate of attraction.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["physics","vectorfield","differentialequations"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define COUNT 28.0\n\nvec2 Rotate(vec2 point, float deg)\n{\n    mat2 rotation = mat2( vec2(cos(deg), -sin(deg)), \n                          vec2(sin(deg), cos(deg)));\n    return rotation * point;\n}\n\nvec2 diff(vec2 uv)\n{\n    vec2 o = vec2(uv.y - uv.x, uv.x);\n    \n    if(iMouse.z > 0.0)\n        o = (uv - COUNT * (2.* iMouse.xy / iResolution.xy - 1.) * vec2(1., iResolution.y / iResolution.x));\n    \n    return o;\n}\nvec2 Direction(vec2 uv)\n{;\n    float rate = length(diff(uv));\n    vec2 o = vec2(1.0, 0.15 + 1.0 / (rate+1.0));\n    return o;\n}\nfloat Rotation(vec2 uv)\n{\n    vec2 o = diff(uv);\n    o = o / length(o);\n    float angle = atan(o.y / o.x);\n    return angle;\n}\nbool ellipse(vec2 uv, vec2 a)\n{\n    float v = (uv.x * uv.x) / (a.x * a.x) + (uv.y * uv.y) / (a.y * a.y);\n    return v <= 0.1;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0);\n    vec2 uv = fragCoord / iResolution.xy;\n    uv = -1.0 + 2.0 * uv;\n    uv = COUNT*uv;\n    uv = vec2(uv.x, uv.y * iResolution.y / iResolution.x);\n    \n    vec2 grid = floor(uv) + vec2(0.5);\n    \n    uv = Rotate(uv - grid,Rotation(grid)) + grid;\n \n    if(ellipse(uv - grid, Direction(grid))){\n        fragColor = vec4(1.0);\n    }\n}","name":"Image","description":"","type":"image"}]}