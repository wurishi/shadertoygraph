{"ver":"0.1","info":{"id":"MltSWM","date":"1481062990","viewed":305,"name":"Fun with Rays","username":"Jrice06","description":"Some research and careful study was required for this shader. Here I create a simple ray marcher and apply various transformations including rotation and scaling to create an interesting image. To me it looks like I am jumping through hyperspace.","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["3d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","previewfilepath":"/media/ap/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float map(vec3 point)\n{\n    vec3 q = fract(point) * 2.0 - 1.0;\n    return length(q) - .25;\n}\n\nfloat trace(vec3 orgn, vec3 ray)\n{\n    float t = 0.0;\n    for (int ndx = 0; ndx < 32; ndx++) {\n        vec3 point = orgn + ray * t;\n        float d = map(point);\n        t += d * .5;\n    }\n    return t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    float theta = iTime * .25;\n    \n    \n    vec3 ray = normalize(vec3(uv, 1.0));\n    ray.xz *= mat2(cos(theta), -sin(theta), sin(theta), cos(theta));\n    ray *= mat3(.5 + abs(sin(theta)), 0.0, 0.0, 0.0, .5 + abs(cos(theta)), 0.0, 0.0, 0.0, abs(sin(theta)));\n    \n    \n    vec3 orgn = vec3(0.0, 0.0, iTime);\n    float trc = trace(orgn, ray);\n    \n    float fog = 1.0 / (1.0 + trc * trc * .1);\n    \n    vec3 fg = vec3(fog * 2.5 * abs(cos(iTime / 5.0)), fog, fog * 2.5 * abs(sin(iTime / 5.0)));\n\tfragColor = vec4(fg,1.0);\n}","name":"Image","description":"","type":"image"}]}