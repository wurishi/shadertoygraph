{"ver":"0.1","info":{"id":"XX2fDW","date":"1729465527","viewed":41,"name":"Simple Wobbly Grid","username":"MeditationError","description":"Applying a sine wave to a grid in both x & y dimensions","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["simple"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    float lineWidth = 1.0;\n    float squareSize = 30.0;\n\n    float amplitudeX = 5.0;\n    float amplitudeY = 3.0;\n    float waverX = sin(uv.y * PI * 10.0 + iTime) * amplitudeX;\n    float waverY = sin(uv.x * PI * 9.0 + iTime) * amplitudeY;\n\n    float squares = step(squareSize - lineWidth,mod(fragCoord.x + waverX,squareSize))\n                    + step(squareSize - lineWidth,mod(fragCoord.y + waverY,squareSize));\n\n    // Output to screen\n    fragColor = vec4(squares,squares,squares,1.0);\n    fragColor = vec4(squares,squares,squares,1.0) * vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}