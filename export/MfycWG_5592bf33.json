{"ver":"0.1","info":{"id":"MfycWG","date":"1732302946","viewed":28,"name":"Blob Blob","username":"chrismartz","description":"blob","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["blob"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float hash(float c) { \n    return fract(sin(c * 12.9898) * 43758.5453); \n}\n\nconst float W = 1.2;\nconst float TZ = 7.5;\n\nfloat filmic_reinhard_curve(float x) {\n    float q = (TZ*TZ + 1.0)*x*x;\n    return q / (q + x + TZ*TZ);\n}\n\nvec3 filmic_reinhard(vec3 x) {\n    float w = filmic_reinhard_curve(W);\n    return vec3(\n        filmic_reinhard_curve(x.r),\n        filmic_reinhard_curve(x.g),\n        filmic_reinhard_curve(x.b)\n    ) / w;\n}\n\n// Noise function for organic shape\nfloat noise(vec3 p) {\n    return hash(dot(p, vec3(127.1, 311.7, 74.7)));\n}\n\nfloat sdf(vec3 p) {\n    // Base shape\n    float d = length(p) - 1.0;\n    \n    // Add organic deformation\n    float time = iTime * 0.5;\n    for(int i = 1; i < 5; i++) {\n        float fi = float(i);\n        d += sin(p.x*fi*.9 + time) * sin(p.y*fi*.8 + time) * sin(p.z*fi*1.2 + time) * 0.5 / fi;\n    }\n    \n    return d * 0.5;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord.xy / iResolution.xy) * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 ro = vec3(0.0, 0.0, -3.0);\n    vec3 rd = normalize(vec3(uv, 1.5));\n    \n    vec3 light = normalize(vec3(0.5, 1.0, -0.3));\n    vec3 color = vec3(0.0);\n    \n    float t = 0.0;\n    for(int i = 0; i < 128; i++) {\n        vec3 p = ro + rd * t;\n        float d = sdf(p);\n        \n        if(d < 0.001) {\n            vec3 normal = normalize(vec3(\n                sdf(p + vec3(0.001, 0.0, 0.0)) - sdf(p - vec3(0.001, 0.0, 0.0)),\n                sdf(p + vec3(0.0, 0.001, 0.0)) - sdf(p - vec3(0.0, 0.001, 0.0)),\n                sdf(p + vec3(0.0, 0.0, 0.001)) - sdf(p - vec3(0.0, 0.0, 0.001))\n            ));\n            \n            float diff = max(0.0, dot(normal, light));\n            vec3 baseColor = vec3(0.7, 0.9, 0.4);\n            float sss = pow(max(0.0, dot(-rd, light)), 3.0) * 0.8;\n            \n            color = baseColor * (diff + sss);\n            break;\n        }\n        \n        t += d;\n        if(t > 20.0) break;\n    }\n    \n    color = filmic_reinhard(color);\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}