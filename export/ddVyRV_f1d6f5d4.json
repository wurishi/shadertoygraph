{"ver":"0.1","info":{"id":"ddVyRV","date":"1696349370","viewed":62,"name":"Multipass Box Blur and Bloom","username":"loathsome","description":"Gamma corrected. Five passes. Let me know if there are any errors.\n\nHas a bloom mode, normal blending is the physically correct way to do bloom.","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["blur","boxfilter","bloom","boxblur","multipass"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const bool BLOOM = true;\nconst float BLOOM_FACTOR = 0.2;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec3 col = boxBlur(iChannel0, uv).rgb;\n    if (BLOOM)\n    {\n        vec3 vid = texture(iChannel1, uv).rgb;\n        \n        col = srgbInverse(col);\n        vid = srgbInverse(vid);\n        \n        col = mix(vid, col, BLOOM_FACTOR);\n        \n        col = srgb(col);\n    }\n\n    fragColor = vec4(col.rgb, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/*\nconst vec2 OFFSETS[3][3] = vec2[3][3]\n(\n    vec2(-1.,-1.), vec2(+0.,-1.), vec2(+1.,-1.),\n    vec2(-1.,+0.), vec2(+0.,+0.), vec2(+1.,+0.),\n    vec2(-1.,+1.), vec2(+0.,+1.), vec2(+1.,+1.)\n);\n*/\n\n// Specified as 100cd/m^2 in sRGB, ACES uses 48cd/m^2.\nconst float MAX_LUMINANCE = 100.0;\n\n/* Offsets are not whole 1.0 offsets as it causes more blur to take advantage\n * of linear sampling tricks. Half-pixel offset averages the 4 neighboring pixels\n * on a hardware level, more blur for less work. */\nconst float V[3] = float[3]\n(\n    -1.5,\n    +0.,\n    +1.5\n);\n\nconst float H[3] = float[3]\n(\n    -1.5,+0.,+1.5\n);\n\nvec3 srgb(vec3 x)\n{\n    vec3 y = pow(x, vec3(1./2.2));\n    return y;\n}\n\nvec3 srgbInverse(vec3 y)\n{\n    vec3 x = pow(y, vec3(2.2));\n    return x;\n}\n\nvec4 textureLinear(sampler2D sampler, vec2 P)\n{\n    vec4 col = texture(sampler, P);\n    col.rgb = srgbInverse(col.rgb);\n    \n    return col;\n}\n\n// Blurs `sampler` with a 4x4 box. Processes in absolute luminance, outputs sRGB-encoded value.\n// NOTE: Only 3-taps, but 4x4 box is achieved by linear sampling shenanigans.\nvec3 boxBlur(sampler2D sampler, vec2 P)\n{\n    vec2 textureResolution = vec2(textureSize(sampler, 0));\n    \n    vec2 uv = P;\n    vec2 px = 1. / textureResolution;\n    \n    vec4 col = vec4(0.0);\n    \n    for (int x = 0; x < 3; x++)\n    {\n        for (int y = 0; y < 3; y++)\n        {\n            col.rgb += textureLinear(sampler, uv + vec2(H[x], V[y]) * px).rgb;\n            col.w++;\n        }\n    }\n    \n    return srgb(col.rgb / col.w);\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec3 col = boxBlur(iChannel0, uv).rgb;\n\n    fragColor = vec4(col.rgb, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec3 col = boxBlur(iChannel0, uv).rgb;\n\n    fragColor = vec4(col.rgb, 1.0);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec3 col = boxBlur(iChannel0, uv).rgb;\n\n    fragColor = vec4(col.rgb, 1.0);\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec3 col = boxBlur(iChannel0, uv).rgb;\n\n    fragColor = vec4(col.rgb, 1.0);\n}","name":"Buffer D","description":"","type":"buffer"}]}