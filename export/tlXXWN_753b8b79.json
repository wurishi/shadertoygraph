{"ver":"0.1","info":{"id":"tlXXWN","date":"1562902360","viewed":235,"name":"Metallic fluid","username":"ParaBellum","description":"Playing with value noise to simulate fluid movement","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["2d","noise","wave","light"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sfGzn","filepath":"/media/a/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png","previewfilepath":"/media/ap/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float r2D(vec2 p)\n{\n    return fract(sin(dot(p, vec2(961.761, 83.153)))*43091.241);\n}\n\nfloat noise(vec2 p)\n{\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n    vec2 e = vec2(1., 0.);\n    \n    float v1 = r2D(i+e.yy);\n    float v2 = r2D(i+e.xy);\n    float v3 = r2D(i+e.yx);\n    float v4 = r2D(i+e.xx);\n    \n    vec2 u = smoothstep(0., 1., f);\n    \n    float a = mix(v1, v2, u.x);\n    float b = mix(v3, v4, u.x);\n    \n    return mix(a, b, u.y);\n}\n\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n\nfloat space2D(vec2 p, float s)\n{\n    p *= vec2(s*.25, s*.3);\n    float t = iTime;\n    \n    p.y += sin(p.x*.5+t*1.)/4.;\n    p.x += cos(p.x+t*.75)/2.;\n    \n    p.x *= noise(p.yy+t*.5)*.5;\n    p.y += noise(p.xx-t*.1)*.25;\n    p.y -= noise(p.yy+t*.1)*.125;\n    p.x += noise(p.yx+t*.1)*.0625;\n    \n    p += p*rotate2d(sin(t*.5));\n    \n    // jitter effect from Shane\n    p += fract(sin(p+vec2(13, 7))*1e6)*.01-.015;\n    \n    return noise(p)*.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.y;\n\n    float sz = 16.;\n    vec2 e = vec2(.01, 0.);\n    float s = space2D(uv, sz);\n    float dx = space2D(uv+e.xy, sz);\n    float dy = space2D(uv+e.yx, sz);\n    \n    dx = (dx-s)/e.x;\n    dy = (dy-s)/e.x;\n    \n    vec3 n = normalize(vec3(dx, dy, 1.));\n    vec3 lP = vec3(6., -3., 1.);\n    vec3 lD = normalize(lP-vec3(uv,s));\n    vec3 eyeD = normalize(vec3(0., 0., 1.)-vec3(uv,s));\n    vec3 hV = normalize(lD+eyeD);\n    float ka = s;\n    float kd = max(dot(n, lD), 0.);\n    float ks = pow(max(dot(hV, n), 0.), 2.);\n    vec3 k = ka*vec3(.1)+kd*vec3(.5)+ks*vec3(1.);\n    \n    vec3 ref = normalize(reflect(eyeD, n));\n    vec3 t1 = texture(iChannel0, ref).rgb;\n    \n    vec3 col = vec3(0.);\n    col += k*t1;\n\n    fragColor = vec4(sqrt(clamp(col, 0., 1.)),1.0);\n}","name":"Image","description":"","type":"image"}]}