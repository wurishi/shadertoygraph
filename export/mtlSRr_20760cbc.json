{"ver":"0.1","info":{"id":"mtlSRr","date":"1674489518","viewed":85,"name":"Highly Configurable Panon Shader","username":"Oman395","description":"Extremely configurable panon shader. I've been using panon for a while, and I'm honestly just not a fan of the existing shaders. This is the place I test stuff-- there's a couple differences between this and the actual one, but the logic is the same.","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["panon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Take a wild guess\n#define ANTIALIASING true\n// Antialiasing related settings-- I don't particularly understand how these work tbh\n#define STEP_COUNT_MAX   3\n#define EDGE_THRESHOLD_MIN  0.0312\n#define EDGE_THRESHOLD_MAX  0.125\n#define SUBPIXEL_QUALITY    0.75\n#define GRADIENT_SCALE      0.25\n\n// https://www.shadertoy.com/view/stlSzf\n\n/* pixel index in 3*3 kernel\n    +---+---+---+\n    | 0 | 1 | 2 |\n    +---+---+---+\n    | 3 | 4 | 5 |\n    +---+---+---+\n    | 6 | 7 | 8 |\n    +---+---+---+\n*/\n#define UP_LEFT      0\n#define UP           1\n#define UP_RIGHT     2\n#define LEFT         3\n#define CENTER       4\n#define RIGHT        5\n#define DOWN_LEFT    6\n#define DOWN         7\n#define DOWN_RIGHT   8\nvec2 KERNEL_STEP_MAT[] = vec2[9](\n    vec2(-1.0, 1.0), vec2(0.0, 1.0), vec2(1.0, 1.0),\n    vec2(-1.0, 0.0), vec2(0.0, 0.0), vec2(1.0, 0.0),\n    vec2(-1.0, -1.0), vec2(0.0, -1.0), vec2(1.0, -1.0)\n);\n\n\n\n/* in order to accelerate exploring along tangent bidirectional, step by an increasing amount of pixels QUALITY(i) \n   the max step count is 12\n    +-----------------+---+---+---+---+---+---+---+---+---+---+---+---+\n    |step index       | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |10 |11 |\n    +-----------------+---+---+---+---+---+---+---+---+---+---+---+---+\n    |step pixels count|1.0|1.0|1.0|1.0|1.0|1.5|2.0|2.0|2.0|2.0|4.0|8.0|\n    +-----------------+---+---+---+---+---+---+---+---+---+---+---+---+\n*/\nfloat QUALITY(int i) {\n    if (i < 5) return 1.0;\n    if (i == 5) return 1.5;\n    if (i < 10) return 2.0;\n    if (i == 10) return 4.0;\n    if (i == 11) return 8.0;\n}\n\n\n// L = 0.299 * R + 0.587 * G + 0.114 * B\nfloat RGB2LUMA(vec3 color) {\n    return dot(vec3(0.299, 0.578, 0.114), color);\n}\n\nvec4 fxaa_3_11(sampler2D color_buffer, vec2 uv, vec2 uv_step) {\n    // get luma of kernel\n    float luma_mat[9];\n    for (int i = 0; i < 9; i++) {\n        luma_mat[i] = RGB2LUMA(texture(color_buffer, uv + uv_step * KERNEL_STEP_MAT[i]).xyz);\n    }\n    \n    // detecting where to apply FXAA, return the pixel color if not\n    float luma_min = min(luma_mat[CENTER], min(min(luma_mat[UP], luma_mat[DOWN]), min(luma_mat[LEFT], luma_mat[RIGHT])));\n    float luma_max = max(luma_mat[CENTER], max(max(luma_mat[UP], luma_mat[DOWN]), max(luma_mat[LEFT], luma_mat[RIGHT])));\n    float luma_range = luma_max - luma_min;\n    if(luma_range < max(EDGE_THRESHOLD_MIN, luma_max * EDGE_THRESHOLD_MAX)) return texture(color_buffer, uv);\n    \n    // choosing edge tangent\n    // horizontal: |(upleft-left)-(left-downleft)|+2*|(up-center)-(center-down)|+|(upright-right)-(right-downright)|\n    // vertical: |(upright-up)-(up-upleft)|+2*|(right-center)-(center-left)|+|(downright-down)-(down-downleft)|\n    float luma_horizontal = \n        abs(luma_mat[UP_LEFT] + luma_mat[DOWN_LEFT] - 2.0 * luma_mat[LEFT])\n        + 2.0 * abs(luma_mat[UP] + luma_mat[DOWN] - 2.0 * luma_mat[CENTER])\n        + abs(luma_mat[UP_RIGHT] + luma_mat[DOWN_RIGHT] - 2.0 * luma_mat[RIGHT]);\n    float luma_vertical = \n        abs(luma_mat[UP_LEFT] + luma_mat[UP_RIGHT] - 2.0 * luma_mat[UP])\n        + 2.0 * abs(luma_mat[LEFT] + luma_mat[RIGHT] - 2.0 * luma_mat[CENTER])\n        + abs(luma_mat[DOWN_LEFT] + luma_mat[DOWN_RIGHT] - 2.0 * luma_mat[DOWN]);\n    bool is_horizontal = luma_horizontal > luma_vertical;\n    \n    // choosing edge normal \n    float gradient_down_left = (is_horizontal ? luma_mat[DOWN] : luma_mat[LEFT]) - luma_mat[CENTER];\n    float gradient_up_right = (is_horizontal ? luma_mat[UP] : luma_mat[RIGHT]) - luma_mat[CENTER];\n    bool is_down_left = abs(gradient_down_left) > abs(gradient_up_right);\n    \n    // get the tangent uv step vector and the normal uv step vector\n    vec2 step_tangent = (is_horizontal ? vec2(1.0, 0.0) : vec2(0.0, 1.0)) * uv_step;\n    vec2 step_normal =  (is_down_left ? -1.0 : 1.0) * (is_horizontal ? vec2(0.0, 1.0) : vec2(1.0, 0.0)) * uv_step;\n    \n    // get the change rate of gradient in normal per pixel\n    float gradient = is_down_left ? gradient_down_left : gradient_up_right;\n    \n    // start at middle point of tangent edge\n    vec2 uv_start = uv + 0.5 * step_normal;\n    float luma_average_start = luma_mat[CENTER] + 0.5 * gradient;    \n    //return vec4(luma_average_start, luma_average_start,luma_average_start, 1.0);\n    \n    // explore along tangent bidirectional until reach the edge both\n    vec2 uv_pos = uv_start + step_tangent;\n    vec2 uv_neg = uv_start - step_tangent;\n    \n    //return texture(iChannel0, uv_neg);\n    \n    float delta_luma_pos = RGB2LUMA(texture(color_buffer, uv_pos).rgb) - luma_average_start;\n    float delta_luma_neg = RGB2LUMA(texture(color_buffer, uv_neg).rgb) - luma_average_start;\n    \n    bool reached_pos = abs(delta_luma_pos) > GRADIENT_SCALE * abs(gradient);\n    bool reached_neg = abs(delta_luma_neg) > GRADIENT_SCALE * abs(gradient);\n    bool reached_both = reached_pos && reached_neg;\n    \n    if (!reached_pos) uv_pos += step_tangent;\n    if (!reached_neg) uv_neg -= step_tangent;\n    \n    if (!reached_both) {\n        for(int i = 2; i < STEP_COUNT_MAX; i++){\n            if(!reached_pos) delta_luma_pos = RGB2LUMA(texture(color_buffer, uv_pos).rgb) - luma_average_start;\n            if(!reached_neg) delta_luma_neg = RGB2LUMA(texture(color_buffer, uv_neg).rgb) - luma_average_start;\n            \n            bool reached_pos = abs(delta_luma_pos) > GRADIENT_SCALE * abs(gradient);\n            bool reached_neg = abs(delta_luma_neg) > GRADIENT_SCALE * abs(gradient);\n            bool reached_both = reached_pos && reached_neg;\n            \n            if (!reached_pos) uv_pos += (QUALITY(i) * step_tangent);\n            if (!reached_neg) uv_neg -= (QUALITY(i) * step_tangent);\n            \n            if (reached_both) break;\n        }\n    }\n    \n    //return texture(iChannel0, uv_neg);\n    \n    // estimating offset\n    float length_pos = max(abs(uv_pos - uv_start).x, abs(uv_pos - uv_start).y);\n    float length_neg = max(abs(uv_neg - uv_start).x, abs(uv_neg - uv_start).y);\n    bool is_pos_near = length_pos < length_neg;\n    \n    float pixel_offset = -1.0 * (is_pos_near ? length_pos : length_neg) / (length_pos + length_neg) + 0.5;\n    \n    // no offset if the bidirectional point is too far\n    if(((is_pos_near ? delta_luma_pos : delta_luma_neg) < 0.0) == (luma_mat[CENTER] < luma_average_start)) pixel_offset = 0.0;\n    \n    // subpixel antialiasing\n    float luma_average_center = 0.0;\n    float average_weight_mat[] = float[9](\n        1.0, 2.0, 1.0,\n        2.0, 0.0, 2.0,\n        1.0, 2.0, 1.0\n    );\n    for (int i = 0; i < 9; i++) luma_average_center += average_weight_mat[i] * luma_mat[i];\n    luma_average_center /= 12.0;\n    \n    float subpixel_luma_range = clamp(abs(luma_average_center - luma_mat[CENTER]) / luma_range, 0.0, 1.0);\n    float subpixel_offset = (-2.0 * subpixel_luma_range + 3.0) * subpixel_luma_range * subpixel_luma_range;\n    subpixel_offset = subpixel_offset * subpixel_offset * SUBPIXEL_QUALITY;\n    \n    // use the max offset between subpixel offset with before\n    pixel_offset = max(pixel_offset, subpixel_offset);\n    \n    \n    return texture(color_buffer, uv + pixel_offset * step_normal);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 uvOff = 1.0 / iResolution.xy;\n    vec4 tex;\n    if(ANTIALIASING) tex = fxaa_3_11(iChannel0, uv, uvOff);\n    else tex = texture(iChannel0, uv);\n    if(tex.rgb == vec3(0)) {\n        fragColor = vec4(0);\n    }\n    else fragColor = vec4(tex.rgb, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sXGzn","filepath":"/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3","previewfilepath":"/media/ap/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// 0 = off, 1 = basic, 2 = includes amount of change\n#define SMOOTH_MODE 2\n// Self explanatory\n#define SMOOTH_AMOUNT 0.9\n// If true, the bars start at the middle and go down/up, mirrored\n#define MIDDLE_START true\n// If true, the ends are rounded (shocking)\n#define ROUND_ENDS true\n// Width of bars, in px\n#define BAR_WIDTH 30.0\n// Gap between bars, in px\n#define BAR_GAP 20.0\n// Gap in between vertical sections of bar, in px\n#define BAR_VERTICAL_GAP 0.0\n// Height of vertical sections of bar, in px\n#define BAR_VERTICAL_HEIGHT 20.0\n// If true, then we will ignore any sections that are smaller than the height of the vertical height\n#define BAR_VERTICAL_FORCE_FULL false\n// Blend along user colors\n#define USER_COLORS true\n// Make each bar a uniform color\n#define BLOCK_COLORS true\n// Make the colors based on y instead of x\n#define VERTICAL_COLORS false\n// If true, makes sure that at least some color is left behind\n#define USE_MINIMUM false\n// Minimum height, in px\n// If negative, set to radius\n#define MINIMUM -1.0\n// If the value goes below this, then USE_MINIMUM is overrided\n#define THRESHOLD 0.0\n// Take a wild guess\n#define USE_BACKGROUND_COLOR true\n// Color to set background to\n#define BACKGROUND_COLOR vec4(0)\n// If the value is 0, then go transparent, if this is on\n#define TRANSPARENT_WHEN_0 true\n\n// These are the alternative to USER_COLORS, each one is an rgba color (0-255) that the bar colors will cycle through\nconst vec4 colors[] = vec4[](\n    vec4(1)\n);\n\nbool xInsideCircle(float widthAt, float x, float maxX) {\n    return x > widthAt / 2.0 && x < maxX - widthAt / 2.0;\n}\n\nfloat xFromY(float y, float rad, float width, float height) {\n    float yMod = y - (height - rad);\n    // We can turn this into x with some basic trig\n    yMod /= rad;\n    float x = sqrt(1.0 - pow(yMod, 2.0));\n    x = 1.0 - x;\n    x *= width;\n    return x;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord / iResolution.xy;\n    float a = 0.0;\n    float new = texture(iChannel0, uv).r;\n    if(SMOOTH_MODE == 0) {\n        // No smoothing\n        a = new;\n    }\n    float texAt = texture(iChannel1, uv).a;\n    if(SMOOTH_MODE == 1) {\n        // Simple smoothing, no difference from size of change\n        a = (texAt * SMOOTH_AMOUNT + new * (1.0 - SMOOTH_AMOUNT));\n    } else {\n        // Smoothing based on size of change\n        float delta = new - texAt;\n        float amnt = max(pow(delta, SMOOTH_AMOUNT), (1.0 - SMOOTH_AMOUNT));\n        a = amnt * texAt + (1.0 - amnt) * new;\n    }\n    float gap = BAR_GAP / iResolution.x;\n    float width = BAR_WIDTH / iResolution.x;\n    float total = gap + width;\n    float gapY = BAR_VERTICAL_GAP / iResolution.y;\n    float height = BAR_VERTICAL_HEIGHT / iResolution.y;\n    float totalY = height + gapY;\n    float modded = mod(uv.x, total);\n    float moddedY = mod(uv.y, totalY);\n    float minimum = MINIMUM / iResolution.y;\n    float radius = width * (iResolution.x / iResolution.y);\n    if(!MIDDLE_START) radius /= 2.0;\n    float thresh = THRESHOLD / iResolution.y;\n    if(minimum < 0.0) minimum = radius;\n    float floored = floor(uv.x / total) * total;\n    // In the actual shader, each bar uses an average of the values; here, we just use one of them.\n    // It works enough for testing lmao\n    if(MIDDLE_START) {\n        uv.y -= 0.5;\n        uv.y *= 2.0;\n        uv.y = abs(uv.y);\n        gapY /= 2.0;\n    }\n    // Mask\n    float heightSound;\n    heightSound = texture(iChannel0, vec2(floored, 0)).r;\n    if(BAR_VERTICAL_FORCE_FULL) heightSound = floor(heightSound / totalY) * totalY;\n    if(heightSound > 1.0 - radius && ROUND_ENDS) heightSound = 1.0 - radius;\n    if(heightSound < THRESHOLD) heightSound = 0.0;\n    if(USE_MINIMUM && heightSound < minimum && heightSound != 0.0) heightSound = minimum;\n    if(heightSound == 0.0 && TRANSPARENT_WHEN_0 && a == 0.0) {\n        fragColor = vec4(0);\n        return;\n    }\n    if(modded > width || moddedY > height) {\n        if(USE_BACKGROUND_COLOR) fragColor = vec4(BACKGROUND_COLOR.rgb, a);\n        else fragColor = vec4(0, 0, 0, a);\n        return;\n    };\n    if(heightSound < uv.y) {\n        if(USE_BACKGROUND_COLOR) fragColor = vec4(BACKGROUND_COLOR.rgb, a);\n        else fragColor = vec4(0, 0, 0, a);\n        return;\n    }\n    if(ROUND_ENDS && heightSound - uv.y <= radius) {\n        // We want to be a circle, so we can get our distance from the center of the bar where the circle would be\n        // If the distance is greater than the radius, we can be set to 0\n        float x = xFromY(uv.y, radius, width, heightSound);\n        float xMod = mod(uv.x, total);\n        // Figure out if we are within the range we should be\n        if(!xInsideCircle(x, xMod, width)) {\n            if(USE_BACKGROUND_COLOR) fragColor = vec4(BACKGROUND_COLOR.rgb, a);\n            else fragColor = vec4(0, 0, 0, a);\n            return;\n        }\n    }\n    \n    // If we are past here, then we know for a fact we should be colored, and we can color ourselves\n    float x = uv.x;\n    if(VERTICAL_COLORS) x = uv.y;\n    if(!USER_COLORS) {\n        fragColor = vec4(colors[int(floor(x / total)) % colors.length()].rgb, a);\n        return;\n    }\n    // I'm just defining the colors here, and blending badly. In the actual thing, I just use the getRGB() function.\n    vec4 col0 = vec4(1,0,1,1); // Magenta\n    vec4 col1 = vec4(0,1,1,1); // Cyan\n    // Get a copy of x that has the gaps removed\n    float xRm;\n    if(VERTICAL_COLORS) {\n        xRm = x - floor(x / totalY) * gapY;\n        xRm /= 1.0 - gapY * (1.0 / totalY);\n    }\n    else {\n        xRm = x - floor(x / total) * gap;\n        xRm /= 1.0 - gap * (1.0 / total);\n    }\n    // Scale so that it's between 0 and 1\n    if(BLOCK_COLORS) {\n        if(VERTICAL_COLORS) xRm = floor(xRm / totalY) * totalY;\n        else xRm = floor((xRm) / total) * total;\n    }\n    fragColor = vec4((col0 * (1.0 - xRm) + col1 * xRm).rgb, a);\n}","name":"Buffer A","description":"","type":"buffer"}]}