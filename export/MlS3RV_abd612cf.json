{"ver":"0.1","info":{"id":"MlS3RV","date":"1430331295","viewed":163,"name":"Noobish Bouncing Ball","username":"anastadunbar","description":"I am just a noob.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["square","noob","ball"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"vec2 rotation(in float angle,in vec2 position)\n{\n    float rot = radians(angle);\n    mat2 rotation = mat2(cos(rot), -sin(rot), sin(rot), cos(rot));\n    return vec2((position-0.5)*rotation);\n}\nvec2 scale(vec2 pos, float size)\n{\n \treturn vec2((pos-0.5)*size);   \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //I remember 18 digits of Pi.\n    float pi = 3.14159265358979323;\n \n    //Normal position\n    vec2 position = (fragCoord.xy / iResolution.xy);\n         \n    //I like it better writing \"time\"\n    float time = iTime;\n    \n    //Just stretching the position of uv so the ball looks more like an circle than a ellipse\n\tvec2 uv = (fragCoord.xy / iResolution.xy)/vec2(1.,1.7);\n    vec2 uv2 = ((position-0.5)*vec2(1.0,0.58))+0.5;\n    \n    //Making a position to animate a ball and a square\n    vec2 pos = vec2(((sin(time/2.)/4.)+0.5)-0.1,abs(sin(time*1.6)/2.8))+0.1;\n    vec2 pos2 = (vec2(cos(time*3.)/2.,sin(time)/3.)*0.5)+0.5;\n    \n    //Ball\n    //Clamping (val,min,max) and invertering colors. I use length to draw a ball.\n    float a = 1.-clamp((length(uv-pos)-0.1)*1000., 0., 1.);\n    \n    //Blue light\n    float b = clamp((sin((position.x*pi)+((1.-position.y)*sin(time)))-0.8)*200. , 0., 1.);\n    \n    //Square\n    //cs is size for the square\n    float cs = 0.1;\n    //Rotation for the square\n    vec2 cuv = scale((rotation(time*40.,uv2)+0.5)*1.4,9.);\n    //Make square\n    //Too sharp: float c = clamp( (step(pos2.x-cs,cuv.x)*step(pos2.y-cs,cuv.y))-(step(pos2.x+cs,cuv.x)+step(pos2.y+cs,cuv.y)), 0., 1.);\n    //http://en.wikipedia.org/wiki/Minkowski_distance\n    float cpow = 50.;\n\tfloat r = pow( pow(cuv.x*cuv.x,cpow) + pow(cuv.y*cuv.y,cpow), 1.0/(2.0*cpow) );\n    \n    float c = (1.-r)*70.;\n    c = clamp(c,0.,1.);\n    \n    //Colors to screen\n    vec3 colors = vec3((a)+c,(a/2.)+(b/2.),(b/1.5)+clamp((c-a-b),0.,0.5));\n\tfragColor = vec4(colors,1.0);\n}","name":"","description":"","type":"image"}]}