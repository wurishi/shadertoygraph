{"ver":"0.1","info":{"id":"llSBRG","date":"1516186024","viewed":151,"name":"Circular Smooth II","username":"Ultraviolet","description":"Remake of [url=https://www.shadertoy.com/view/4lBfzy]Circular Smooth[/url] with an intensity control (mouse y).","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["smoothstep","circular"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//#define FACTOR (-1.+iResolution.y/(iResolution.y-iMouse.y))\n\nfloat FACTOR;\n\nfloat preSmoothStep(float step0, float step1, float x)\n{\n    return clamp((x-step0)/(step1-step0), 0., 1.);\n}\n\nfloat smoothFn(float x)\n{\n    /*\n    if(x < 0.5)\n    {\n        vec2 c = vec2(-FACTOR, .5+FACTOR);\n        return c.y-sqrt(dot(c,c)-(c.x-x)*(c.x-x));\n    }\n    vec2 c = vec2(1.+FACTOR, .5-FACTOR);\n    return c.y+sqrt(dot(c-vec2(1.),c-vec2(1.))-(c.x-x)*(c.x-x));\n\t*/\n    \n    \n    float x_ = min(x, 1.-x);\n    vec2 c = vec2(-FACTOR, .5+FACTOR);\n    float y = c.y-sqrt(dot(c,c)-(c.x-x_)*(c.x-x_));\n\treturn (x<0.5) ? y : 1.0-y;\n}\n\n\nfloat smoothFnInv(float x)\n{\n    /*\n    if(x < 0.5)\n    {\n        vec2 c = vec2(.5+FACTOR, -FACTOR);\n        return sqrt(dot(c,c)-(c.x-x)*(c.x-x))+c.y;\n    }\n    vec2 c = vec2(.5-FACTOR, 1.+FACTOR);\n    return c.y-sqrt(dot(c-vec2(1.),c-vec2(1.))-(x-c.x)*(x-c.x));\n\t*/\n    \n    float x_ = min(x, 1.-x);\n    vec2 c = vec2(.5+FACTOR, -FACTOR);\n    float y = sqrt(dot(c,c)-(c.x-x_)*(c.x-x_))+c.y;\n\treturn (x<0.5) ? y : 1.0-y;\n}\n\n    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n    float px = 1.0/iResolution.y;\n    vec2  p = ( vec2((iResolution.y-iResolution.x)/2.0,0.0)+fragCoord)/iResolution.y;\n    \n    FACTOR = (-1.+iResolution.y/(iResolution.y-iMouse.y));\n    \n    if(length(iMouse.xy) < 10.)\n        FACTOR = 1./(0.001+0.998*sin(iTime)*sin(iTime)) -1.;\n    \n    vec3 col = vec3(0.0);\n    \n    if( p.x>0.0 && p.x<1.0 )\n    {\n        col = vec3( 0.2 ) + 0.01*mod(floor(p.x*20.0)+floor(p.y*20.0),2.0);\n\n        // blue: smoothstep\n        float y1 = smoothFn( preSmoothStep(0.0, 1.0, p.x) );\n        float x1 = smoothFnInv( preSmoothStep(0.0, 1.0, p.y) );\n        float d1 = min(abs(p.y-y1),abs(p.x-x1));\n        col = mix( col, vec3(0.0,0.4,0.8), 1.0-smoothstep( 0.0, 2.0*px, d1 )) ;\n\n        // yellow: inverse_smoothstep\n        float y2 = smoothFnInv( p.x );\n        float x2 = smoothFn( preSmoothStep(0.0, 1.0, p.y) );\n        float d2 = min(abs(p.y-y2),abs(p.x-x2));\n        col = mix( col, vec3(1.0,0.7,0.0), 1.0-smoothstep( 0.0, 2.0*px, d2 )) ;\n\n        // gray: smoothstep of inverse_smoothstep, back to identity\n        float y3 = smoothFn( preSmoothStep(0.0, 1.0, y2 ));\n        float x3 = smoothFnInv( preSmoothStep(0.0, 1.0, x2) );\n        float d3 = min(abs(p.y-y3),abs(p.x-x3));\n        col = mix( col, vec3(0.5,0.5,0.5), 1.0-smoothstep(0.0, 1.5*px, d3 ) );\n    }\n    \n    fragColor = vec4( col, 1.0 );\n}\n","name":"Image","description":"","type":"image"}]}