{"ver":"0.1","info":{"id":"msfSzl","date":"1669383264","viewed":152,"name":"Fork of Flyguy's Attractor ðŸ”Š","username":"blurryroots","description":"Changed color scheme, added ereasure cycle and reset mechanics. Also added (crude) detection for screen size change by storing, by storing aspect ratio in buffer B and checking if it has changed.\nUsed the attractor signal for texture distortion.","likes":3,"published":1,"flags":112,"usePreview":0,"tags":["math","sound","visualization","audio","attractor","chaos"],"hasliked":0,"parentid":"4lVGWR","parentname":"Rabinovichâ€“Fabrikant Equations"},"renderpass":[{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"ltSXWm","filepath":"https://soundcloud.com/blurryroots/sophia-dances","previewfilepath":"https://soundcloud.com/blurryroots/sophia-dances","type":"musicstream","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Shadertoy Educational License\n// You cannot host, display, distribute or share this Work in any form,\n// including physical and digital. You cannot use this Work in any\n// commercial or non-commercial product, website or project. You cannot\n// sell this Work and you cannot mint an NFTs of it.\n// I share this Work for educational purposes, and you can link to it,\n// through an URL, proper attribution and unmodified screenshot, as part\n// of your educational material. If these conditions are too restrictive\n// please contact me and we'll definitely work it out.\n// You are free however, to incorporate this work within the Shadertoy\n// ecosystem, e.g. by forking.\n// This work may incorporate other permissivly shared, educational work,\n// which is attributed appropriatly. Please do so as well.\n// Thanks to https://www.shadertoy.com/user/iq for inspiring this license.\n\n// Original work by Flyguy https://www.shadertoy.com/view/4lVGWR\n\n// === icon message: \"sound in\". link: https://www.shadertoy.com/view/MtyXRW\n\nfloat message(vec2 uv) { // to alter in the icon\n    uv-=vec2(1.,10.); if ((uv.x<0.)||(uv.x>=32.)||(uv.y<0.)||(uv.y>=3.)) return -1.; \n    int i=1, bit=int(pow(2.,floor(32.-uv.x)));\n    if (int(uv.y)==2) i=  928473456/bit; // 00110111 01010111 01100001 01110000\n    if (int(uv.y)==1) i=  626348112/bit; // 00100101 01010101 01010000 01010000\n    if (int(uv.y)==0) i= 1735745872/bit; // 01100111 01110101 01100001 01010000\n \treturn float(i-2*(i/2));\n}\n\n\n\n#define XYZ 0 // abs(XYZ) -> RGB\n#define GRADIENT 1 // 1-log(speed) where white is ~0 and dark purple is very large or NaN (unstable)\n\n#define DISP_MODE GRADIENT\n\n// Algortihm by Flyguy https://www.shadertoy.com/view/4lVGWR\nvec3 Grad(float x, vec4 b) {\n    //Set x to 1 if it's NaN\n    if(x != x){x = 1.0;}\n    \n    x = clamp(x, 0.0, 1.0);\n    \n    vec3 col = vec3(1);\n    \n    col = mix(foreground_color_primary, b.rgb, pow(x, 0.5));\n    col = mix(col, background_color, smoothstep(0.05, 0.6, x));\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (iResolution.y<2000.) {float c=message(fragCoord.xy/8.);if(c>=0.){fragColor=vec4(c);return;}}  \n\n    vec2 res = iResolution.xy / iResolution.y;\n\tvec2 uv = fragCoord.xy / iResolution.y;\n    \n    vec4 p = texture (iChannel0, uv/res);\n    \n    vec3 col = vec3(0);\n    \n    #if(DISP_MODE == XYZ)\n    col = abs (p.xyz * 0.5);\n    #elif(DISP_MODE == GRADIENT)\n    float k = log (1.0 + p.w);\n    float kl1 = k / log (phi);\n    float kl2 = k / log (1.2);\n    \n    vec2 uvb = vec2 (\n        mix (uv.x, -uv.x * kl1, 0.4), //+ 0.10 * sin (iTime / 3.33*phi),\n        mix (uv.y, -uv.y * kl2, 0.4) // + 0.04 * texture (iChannel1, vec2 (0.11, 0.0)).x\n    );\n    vec4 b = desat (texture (iChannel2, uvb/res * 4.0));\n    \n    vec3 g1 = Grad (kl1, b);\n    vec3 g2 = Grad (kl2, b);\n    col = mix (g1, g2, 1.0);\n    #endif\n    \n\tfragColor = mix (b, vec4(col, 1.0), 0.8);//1.0 - smoothstep(0.01, 0.1, k));\n    // fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Shadertoy Educational License\n// You cannot host, display, distribute or share this Work in any form,\n// including physical and digital. You cannot use this Work in any\n// commercial or non-commercial product, website or project. You cannot\n// sell this Work and you cannot mint an NFTs of it.\n// I share this Work for educational purposes, and you can link to it,\n// through an URL, proper attribution and unmodified screenshot, as part\n// of your educational material. If these conditions are too restrictive\n// please contact me and we'll definitely work it out.\n// You are free however, to incorporate this work within the Shadertoy\n// ecosystem, e.g. by forking.\n// This work may incorporate other permissivly shared, educational work,\n// which is attributed appropriatly. Please do so as well.\n// Thanks to https://www.shadertoy.com/user/iq for inspiring this license.\n\n//Plotting space\n#define INITIAL 0 //Inital conditions on PLANE vary with UVs (Shows stable initial conditions for the current system parameters)\n#define PARAMETER 1 //System parameters vary with UVs (Shows stable system parameters for the current initial conditions)\n\n//Settings\n#define STEPS 96.0 //Iterations per frame\n//Reset after changing\n#define PLOT_MODE INITIAL\n#define PLANE xy\n\n#define SKIP 1\n\n//System Parameters (+/- viewRange in PARAMETER mode)\nfloat A = 1.1;\nfloat Y = 0.87;\n\n//Initial conditions (initialCond +/- viewRange)\nvec2 viewRange = vec2(4.0);\n\n// Original algorithm by Flyguy https://www.shadertoy.com/view/4lVGWR\n// Calculate the next position \nvec3 Integrate(vec3 cur, float dt)\n{\n\tvec3 next = vec3(0);\n    \n    float x = cur.x;\n    float y = cur.y;\n    float z = cur.z;\n    \n    next.x = y*(z - 1.0 + x*x) + Y*x; // + pcos (x);\n    next.y = x*(3.0*z + 1.0 - x*x) + Y*y; // + psin (y);\n    next.z = -2.0*z*(A + x*y);\n    \n    return cur + next * dt;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {    \n    vec2 res = iResolution.xy / iResolution.y;\n    vec2 uv = fragCoord / iResolution.y;\n    \n    float seed = fract(iTime);\n    vec3 initialCond = vec3(1.0, 0.1, 0.5);\n\n    \n    #if(PLOT_MODE == PARAMETER)\n        vec2 uvp = (uv - res/2.0) * 2.0;\n        A += uvp.x * viewRange.x;\n        Y += uvp.y * viewRange.y;\n    #endif\n    \n    vec2 uvr = vec2 (uv.x + 0.0004*psin (iTime), uv.y + 0.0004*pcos (iTime));\n    vec3 last = texture(iChannel0, uvr/res).xyz;\n    vec3 next = vec3(0);\n    vec3 vel = vec3(0);\n    \n    // Algorithm by Flyguy https://www.shadertoy.com/view/4lVGWR\n    for(float i = 0.0;i < STEPS;i++) {\n    \tnext = Integrate(last, (iTimeDelta * SPEED) / float(STEPS));\n        vel = next - last;\n        last = next;\n    } \n    \n    vel /= -iTimeDelta * SPEED;\n    \n    {\n        float m = mod (iTime, animation_periode);\n        // Takes buffered aspect ratio to indicated screen size change.\n        float r = iResolution.x / iResolution.y;\n        vec4 rr = texture (iChannel2, uv);\n        // Reset either on cycle start or screen size change.\n        bool reset = r != rr.r || (reset_periode_fraction * animation_periode) > m;\n        if (reset) {        \n            uv = (uv - res/2.0) * (2.0 + 2.0 * phinoise (uv, seed));\n            initialCond.PLANE += uv.xy * viewRange;\n            fragColor = vec4(initialCond, 0);            \n        }\n        else if ((ereasure_threshold * animation_periode) < m) {\n            fragColor = vec4(-next, length(vel)/3.0);\n        }\n        else {\n            fragColor = vec4(next, length(vel));\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// Shadertoy Educational License\n// You cannot host, display, distribute or share this Work in any form,\n// including physical and digital. You cannot use this Work in any\n// commercial or non-commercial product, website or project. You cannot\n// sell this Work and you cannot mint an NFTs of it.\n// I share this Work for educational purposes, and you can link to it,\n// through an URL, proper attribution and unmodified screenshot, as part\n// of your educational material. If these conditions are too restrictive\n// please contact me and we'll definitely work it out.\n// You are free however, to incorporate this work within the Shadertoy\n// ecosystem, e.g. by forking.\n// This work may incorporate other permissivly shared, educational work,\n// which is attributed appropriatly. Please do so as well.\n// Thanks to https://www.shadertoy.com/user/iq for inspiring this license.\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float r = iResolution.x / iResolution.y;\n    vec4 k = vec4 (r);\n    fragColor = k;\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"// Shadertoy Educational License\n// You cannot host, display, distribute or share this Work in any form,\n// including physical and digital. You cannot use this Work in any\n// commercial or non-commercial product, website or project. You cannot\n// sell this Work and you cannot mint an NFTs of it.\n// I share this Work for educational purposes, and you can link to it,\n// through an URL, proper attribution and unmodified screenshot, as part\n// of your educational material. If these conditions are too restrictive\n// please contact me and we'll definitely work it out.\n// You are free however, to incorporate this work within the Shadertoy\n// ecosystem, e.g. by forking.\n// This work may incorporate other permissivly shared, educational work,\n// which is attributed appropriatly. Please do so as well.\n// Thanks to https://www.shadertoy.com/user/iq for inspiring this license.\n\n//Press space to reset\n#define KEY_SPACE 0x20\n#define IS_KEY_PRESSED(key) KeyPressed(iChannel0, key)\n#define SPEED 0.25 //Time multiplier\nconst float phi = (1. + sqrt (5.)) / 2.;\nconst float phi0 = phi - 1.;\nconst vec4 linear_space = vec4(2.2);\nconst vec4 sRGB_space = vec4(0.4545);\nconst float PI = 355./113.;\nconst float TWOPI = 2.0*PI;\n\nvec3 foreground_color_primary = vec3(0.77, 0.11, 0.77);\nvec3 foreground_color_secondary = vec3(0.11, 0.33, 0.11);\nvec3 background_color = vec3(0.10, 0.00, 0.15);\n\nfloat animation_periode = 25.0;\nfloat ereasure_threshold = 0.77;\nfloat reset_periode_fraction = 0.0037;\n\n\nbool KeyPressed(sampler2D s, int key) {\n    return texture(s, vec2(key, 0) / 256.0).r != 0.0;\n}\n\nfloat psin (float t) {\n    return (sin (t) + 1.) / 2.;\n}\n\nfloat pcos (float t) {\n    return (cos (t) + 1.) / 2.;\n}\n\nvec3 desat (vec3 c) {\n    return vec3(0.299*c.r + 0.587*c.g + 0.114*c.b);\n}\n\nvec4 desat (vec4 c) {\n    vec4 d = vec4(0.299*c.r + 0.587*c.g + 0.114*c.b);\n    d.a = 1.0;\n    return d;\n}\n\n\n// Golden ratio based noise by https://www.shadertoy.com/view/ltB3zD\nfloat phinoise (in vec2 xy, in float seed) {\n    return fract(tan(distance(xy*phi, xy)*seed)*xy.x);\n}","name":"Common","description":"","type":"common"}]}