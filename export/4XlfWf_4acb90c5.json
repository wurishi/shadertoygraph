{"ver":"0.1","info":{"id":"4XlfWf","date":"1729015922","viewed":64,"name":"circle triple intersection","username":"jt","description":"Given three overlapping circles, calculate the point at the intersection of the three lines ([url=https://en.wikipedia.org/wiki/Radical_axis]radical axes[/url]) through the intersection point pairs. Wikipedia calls this \"radical center of three circles\"\n","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["line","intersection","circle","axis","power","axes","triple","radical","bisector","chorde","ideale","chordale"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/4XlfWf circle triple intersection, 2024 by jt\n\n// Given three overlapping circles, calculate the point at the intersection\n// of the three lines (radical axes) through the intersection point pairs\n// (synonyms: power line, power bisector, chorde ideale, chordale).\n// Wikipedia calls this \"radical center of three circles\".\n// https://en.wikipedia.org/wiki/Radical_axis\n// https://en.wikipedia.org/wiki/Radical_axis#Radical_center_of_three_circles,_construction_of_the_radical_axis\n\n// tags: line, intersection, circle, axis, power, axes, triple, radical, bisector, chorde, ideale, chordale\n\n// The MIT License\n// Copyright (c) 2024 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfloat line(vec2 p, vec2 a, vec2 b) // https://iquilezles.org/articles/distfunctions2d/\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp(dot(pa,ba)/dot(ba,ba),0.0,1.0);\n    return length(pa - ba*h);\n}\n\nfloat dot2(vec2 v)\n{\n    return dot(v,v);\n}\n\nvec4 circle_circle_intersection(vec3 a, vec3 b)\n{\n    vec2 d = b.xy - a.xy;\n    vec2 c = vec2(d.y, -d.x);\n    float p = length(d);\n    float k = (p*p + a.z*a.z - b.z*b.z)/(p+p);\n    float q = sqrt(a.z*a.z - k*k);\n    return vec4(\n        a.xy + d*k/p + (c/p)*q,\n        a.xy + d*k/p - (c/p)*q);\n}\n/*\nmat2 inverse2x2(mat2 m) // for comparison, to look for simplification possibilities\n{\n    float det = m[0][0] * m[1][1] - m[0][1] * m[1][0];\n    \n    return mat2\n    (\n        m[1][1], -m[0][1],\n        -m[1][0], m[0][0]\n    )\n    /\n    det;\n}\n*/\nvec2 circle_triple_intersection(vec3 a, vec3 b, vec3 c) // https://www.shadertoy.com/view/4XlfWf circle triple intersection (jt)\n{\n    // Not quite sure why this works (wouldn't that be the point where the circles literally intersect?):\n\n    if(true) // manually derived geometric matrix solution    \n    {\n        mat2 M = inverse(transpose(mat2(a.xy-b.xy,a.xy-c.xy)));\n/*\n        float det = (a.x-b.x) * (a.y-c.y) - (a.x-c.x) * (a.y-b.y);\n        mat2 M = mat2(a.y-c.y,c.x-a.x,b.y-a.y,a.x-b.x)/det;\n*/\n        vec2 u =\n            vec2\n            (\n                b.z*b.z-a.z*a.z+dot2(a.xy)-dot2(b.xy),\n                c.z*c.z-a.z*a.z+dot2(a.xy)-dot2(c.xy)\n            );\n\n        return M*0.5*u;\n    }\n    else // brute force computer algebra system solution\n    {\n        // wxMaxima: solve([(x-x_1)^2+(y-y_1)^2-((x-x_0)^2+(y-y_0)^2)=r_1^2-r_0^2,(x-x_2)^2+(y-y_2)^2-((x-x_0)^2+(y-y_0)^2)=r_2^2-r_0^2],[x,y]);\n        //[[x=-(y_1*(y_2^2-y_0^2+x_2^2-x_0^2-r_2^2+r_0^2)+y_0*(-y_2^2-x_2^2+x_1^2+r_2^2-r_1^2)+y_0^2*y_2-x_1^2*y_2+x_0^2*y_2+r_1^2*y_2-r_0^2*y_2+y_1^2*(y_0-y_2))/(2*x_1*y_2-2*x_0*y_2+(2*x_0-2*x_2)*y_1+(2*x_2-2*x_1)*y_0),y=(x_1*(y_2^2+x_2^2-x_0^2-r_2^2+r_0^2)+x_0*(-y_2^2-x_2^2+r_2^2-r_1^2)+(x_0-x_2)*y_1^2+(x_2-x_1)*y_0^2+x_0^2*x_2+r_1^2*x_2-r_0^2*x_2+x_1^2*(x_0-x_2))/(2*x_1*y_2-2*x_0*y_2+(2*x_0-2*x_2)*y_1+(2*x_2-2*x_1)*y_0)]]\n        vec3 A = a*a;\n        vec3 B = b*b;\n        vec3 C = c*c;\n        return\n            vec2\n            (\n                -(b.y*(C.y-A.y+C.x-A.x-C.z+A.z)+a.y*(-C.y-C.x+B.x+C.z-B.z)+A.y*c.y-B.x*c.y+A.x*c.y+B.z*c.y-A.z*c.y+B.y*(a.y-c.y))/(2.0*b.x*c.y-2.0*a.x*c.y+(2.0*a.x-2.0*c.x)*b.y+(2.0*c.x-2.0*b.x)*a.y),\n                +(b.x*(C.y+C.x-A.x-C.z+A.z)+a.x*(-C.y-C.x+C.z-B.z)+(a.x-c.x)*B.y+(c.x-b.x)*A.y+A.x*c.x+B.z*c.x-A.z*c.x+B.x*(a.x-c.x))/(2.0*b.x*c.y-2.0*a.x*c.y+(2.0*a.x-2.0*c.x)*b.y+(2.0*c.x-2.0*b.x)*a.y)\n            );\n    }\n    \n    return vec2(0); // signal error (we should never get here)\n}\n\n#define draw(q) O *= vec4(smoothstep(0.0, 4.0/R.y, abs(q)))\n#define draw_(q, C) O = mix(C, O, vec4(smoothstep(0.0, 0.01, abs(q))))\n\nvoid mainImage( out vec4 O, in vec2 I )\n{\n    bool demo = length(iMouse.xy) < 10.0;\n    vec2 R = iResolution.xy;\n    I = (I+I-R)/R.y;\n    vec2 m = (2.*iMouse.xy-R)/R.y;\n\n    //vec3 a = vec3(+1.0,-0.8,0.5*2.);\n    vec3 a = vec3(demo ? vec2(cos(iTime)*0.5+0.5,-0.8) : m,0.5*2.);\n    //vec3 b = vec3(-1.0,-0.8,0.6*2.);\n    vec3 b = vec3(-1.0,-0.8+0.3*cos(iTime/5.0),0.6*2.);\n    //vec3 b = vec3(demo ? vec2(-1.0,-0.8) : m,0.6*2.);\n    vec3 c = vec3( 0.0,+0.7+0.2*cos(iTime/7.0),0.7*2.);\n    //vec3 c = vec3(demo ? vec2( 0.0,+0.8) : m,0.8*2.);\n\n    vec2 i = circle_triple_intersection(a,b,c);\n\n    O = vec4(1);\n    draw(length(I - a.xy) - a.z); // circle\n    //draw(length(I - a.xy)-.01); // center\n    draw(length(I - b.xy) - b.z); // circle\n    //draw(length(I - b.xy)-.01); // center\n    draw(length(I - c.xy) - c.z); // circle\n    //draw(length(I - c.xy)-.01); // center\n    draw(length(I - i)-.015); // intersection of three lines through intersections of circle pairs\n    draw(length(I - i)-.03); // intersection of three lines through intersections of circle pairs\n\n    vec4 ab = circle_circle_intersection(a,b);\n    draw(length(I - ab.xy)-.01); // intersection\n    draw(length(I - ab.zw)-.01); // intersection\n    draw(line(I,ab.xy,ab.zw));\n    vec4 bc = circle_circle_intersection(b,c);\n    draw(length(I - bc.xy)-.01); // intersection\n    draw(length(I - bc.zw)-.01); // intersection\n    draw(line(I,bc.xy,bc.zw));\n    vec4 ca = circle_circle_intersection(c,a);\n    draw(length(I - ca.xy)-.01); // intersection\n    draw(length(I - ca.zw)-.01); // intersection\n    draw(line(I,ca.xy,ca.zw));\n}\n","name":"Image","description":"","type":"image"}]}