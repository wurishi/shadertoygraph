{"ver":"0.1","info":{"id":"lsSBDR","date":"1500532313","viewed":270,"name":"Pass Right 2","username":"ethanbee","description":"Another take on pass-right dithering over multiple frames","likes":1,"published":1,"flags":34,"usePreview":0,"tags":["buffer","dith"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// main\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 c = texture(iChannel0, uv).xyz;\n    \n\tc = step(vec3(0.5), c);\n\t\n    fragColor = vec4(c.rgb,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// buf A\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n        \n    vec3 firstFrameImg = texture(iChannel3, uv).xyz;\n    vec3 bufBcolor = texture(iChannel1, uv).xyz;;\n    vec3 c;\n    // Imprint image periodically\n    float frameIndex = mod(float(iFrame),3.);\n    if (  frameIndex == 1. ) {\n        bufBcolor = step(vec3(.5), bufBcolor);\n        bufBcolor =( bufBcolor + firstFrameImg) - vec3(.5);\n        \n    }\n    \n\t// Copy Buffer B into Buffer A\n    fragColor = vec4(bufBcolor.rgb,1.0);\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// buf b\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    //float pxIndex = mod(iTime, 100.);\n    float pxIndex = (1.) ;\n    vec2 lastuv = vec2((fragCoord.x - pxIndex), fragCoord.y) / iResolution.xy;\n    \n    vec3 a = texture(iChannel0, uv).xyz;\n    vec3 am1 = texture(iChannel0, lastuv).xyz;\n\n    vec3 err;\n    if (step(.5, am1.r) > .5){\n    \terr = vec3(1.) - am1;\n    } else {\n    \terr = vec3(0.) - am1;\n    }\n    \n    //err *= 0.2; // tamp down a bit (inexact)\n    vec3 o;\n    \n    o = a + err;\n    //o = err ;\n    \n    fragColor = vec4(o.rrr,1.0);\n}","name":"Buf B","description":"","type":"buffer"}]}