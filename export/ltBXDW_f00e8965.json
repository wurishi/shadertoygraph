{"ver":"0.1","info":{"id":"ltBXDW","date":"1443618240","viewed":152,"name":"PsychÃ©Ã©Ã©Ã©Ã©","username":"Gilmour","description":"Des blops psychÃ©","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["blop"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"vec3 mod289(vec3 x) {\nreturn x - floor(x * (1.0 / 289.0)) * 289.0;\n}\nvec4 mod289(vec4 x) {\nreturn x - floor(x * (1.0 / 289.0)) * 289.0;\n}\nvec4 permute(vec4 x) {\nreturn mod289(((x*34.0)+1.0)*x);\n}\nvec4 taylorInvSqrt(vec4 r)\n{\nreturn 1.79284291400159 - 0.85373472095314 * r;\n}\nfloat noise(vec3 v)\n{\nv=0.1*v;\nconst vec2 C = vec2(1.0/6.0, 1.0/3.0) ;\nconst vec4 D = vec4(0.0, 0.5, 1.0, 2.0);\n// First corner\nvec3 i = floor(v + dot(v, C.yyy) );\nvec3 x0 = v - i + dot(i, C.xxx) ;\n// Other corners\nvec3 g = step(x0.yzx, x0.xyz);\nvec3 l = 1.0 - g;\nvec3 i1 = min( g.xyz, l.zxy );\nvec3 i2 = max( g.xyz, l.zxy );\n// x0 = x0 - 0.0 + 0.0 * C.xxx;\n// x1 = x0 - i1 + 1.0 * C.xxx;\n// x2 = x0 - i2 + 2.0 * C.xxx;\n// x3 = x0 - 1.0 + 3.0 * C.xxx;\nvec3 x1 = x0 - i1 + C.xxx;\nvec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\nvec3 x3 = x0 - D.yyy; // -1.0+3.0*C.x = -0.5 = -D.y\n// Permutations\ni = mod289(i);\nvec4 p = permute( permute( permute(\ni.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n+ i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n+ i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\nfloat n_ = 0.142857142857; // 1.0/7.0\nvec3 ns = n_ * D.wyz - D.xzx;\nvec4 j = p - 49.0 * floor(p * ns.z * ns.z); // mod(p,7*7)\nvec4 x_ = floor(j * ns.z);\nvec4 y_ = floor(j - 7.0 * x_ ); // mod(j,N)\nvec4 x = x_ *ns.x + ns.yyyy;\nvec4 y = y_ *ns.x + ns.yyyy;\nvec4 h = 1.0 - abs(x) - abs(y);\nvec4 b0 = vec4( x.xy, y.xy );\nvec4 b1 = vec4( x.zw, y.zw );\n//vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n//vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\nvec4 s0 = floor(b0)*2.0 + 1.0;\nvec4 s1 = floor(b1)*2.0 + 1.0;\nvec4 sh = -step(h, vec4(0.0));\nvec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\nvec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\nvec3 p0 = vec3(a0.xy,h.x);\nvec3 p1 = vec3(a0.zw,h.y);\nvec3 p2 = vec3(a1.xy,h.z);\nvec3 p3 = vec3(a1.zw,h.w);\n//Normalise gradients\nvec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\np0 *= norm.x;\np1 *= norm.y;\np2 *= norm.z;\np3 *= norm.w;\n// Mix final noise value\nvec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\nm = m * m;\nreturn 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\ndot(p2,x2), dot(p3,x3) ) );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = gl_FragCoord.xy / iResolution.xy;\n   \tuv.x *= 16.0/9.0; \n\tvec3 origine = vec3(iTime, 0.0, -2.0);\n\tvec3 direction = normalize(vec3(uv, 1.0));\n    \n    vec3 point = origine;\n    \n    //vec3 centreLumiere = vec3(3.0,3.0*sin(iTime),3.0*cos(iTime));\n    \n\n    fragColor = vec4(cos(iTime),cos(uv.x)*sin(uv.y),(sin(iTime)),1.0);\n    \n    vec3 dx = vec3(0.1,0.0,0.0);\n    vec3 dy = vec3(0.0,0.1,0.0);\n    vec3 dz = vec3(0.0,0.0,0.1);\n    \n    for(int i = 0; i < 512; i++){\n   \n    \tpoint = point + direction * 0.05;\n        \n    \tif(noise(point) > 0.7){\n            \n     \n            \n\t\t\tvec3 N = vec3(\n                noise(point-dx)-noise(point+dx),\n                noise(point-dy)-noise(point+dy),\n                noise(point-dz)-noise(point+dz));\n            N = normalize(N);\n           \n            \n       \t\tfragColor = vec4(N+0.1,1.0);\n            \n            break;\n        }\n      \n            \n    }\n}\n\n","name":"","description":"","type":"image"}]}