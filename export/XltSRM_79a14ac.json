{"ver":"0.1","info":{"id":"XltSRM","date":"1478717990","viewed":282,"name":"Trippy weird stuff","username":"bit2shift","description":"I have no idea of what I'm trying to accomplish here.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarch","trippy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","previewfilepath":"/media/ap/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int STEPS = 8;\nconst float EPSY = 0.001;\nconst float FOV = 90.0;\n\nfloat map(vec4 p)\n{\n    return length(p) - 3.0;\n}\n\nfloat diff(vec4 p, vec4 h)\n{\n    return (map(p + h) - map(p - h)) / (2.0 * length(h));\n}\n\nvec4 norm(vec4 p)\n{\n    mat4 e = mat4(EPSY);\n    float x = diff(p, e[0]);\n    float y = diff(p, e[1]);\n    float z = diff(p, e[2]);\n    float w = diff(p, e[3]);\n    return normalize(vec4(x, y, z, w));\n}\n\nstruct ray\n{\n    vec4 origin;\n    vec4 direction;\n};\n\nray march(ray r)\n{\n    for(int i = 0; i < STEPS; i++)\n    {\n        float dist = map(r.origin);\n        if(dist < EPSY)\n            break;\n        else\n            r.origin += r.direction * dist;\n    }\n    return r;\n}\n\nmat4 rotX(float angle)\n{\n    float cs = cos(radians(angle));\n    float sn = sin(radians(angle));\n    \n    vec3 c0 = vec3(1,   0,  0);\n    vec3 c1 = vec3(0,  cs, sn);\n    vec3 c2 = vec3(0, -sn, cs);\n    return mat4(mat3(c0, c1, c2));\n}\n\nmat4 rotY(float angle)\n{\n    float cs = cos(radians(angle));\n    float sn = sin(radians(angle));\n    \n    vec3 c0 = vec3(cs, 0, -sn);\n    vec3 c1 = vec3( 0, 1,   0);\n    vec3 c2 = vec3(sn, 0,  cs);\n    return mat4(mat3(c0, c1, c2));\n}\n\nfloat envelope(float phase, float attack, float sustain, float release, float idle)\n{\n    float t = mod(iTime + phase, attack + sustain + release + idle);\n    \n    if(t < attack)\n        return t / attack;\n    \n    t -= attack;\n    \n    if(t < sustain)\n        return 1.0;\n    \n    t -= sustain;\n    \n    if(t < release)\n        return 1.0 - t / release;\n    \n    return 0.0;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (2.0 * fragCoord - iResolution.xy) / min(iResolution.x, iResolution.y) * tan(radians(FOV) / 2.0);\n    vec4 uvw = normalize(vec4(uv, 1, 0));\n    \n    mat4 rot = rotY(iMouse.x) * rotX(iMouse.y);\n    ray camera = ray\n\t(\n        rot * vec4\n        (\n            0,\n            0,\n            -8.0 + 5.0 * envelope(-4.0, 2.0, 4.0, 2.0, 12.0),\n            -4.0 + 4.0 * envelope(0.0, 2.0, 12.0, 2.0, 4.0)\n\t\t),\n        rot * uvw\n    );\n    \n    ray p = march(camera);\n    vec4 n = norm(p.origin);\n    vec4 fl = reflect(n, p.direction);\n    fragColor = mix(texture(iChannel1, fl.xyz), texture(iChannel0, p.origin.xyz), clamp(map(p.origin), 0.0, 1.0));\n}","name":"Image","description":"","type":"image"}]}