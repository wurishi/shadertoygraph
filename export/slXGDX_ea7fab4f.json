{"ver":"0.1","info":{"id":"slXGDX","date":"1622977472","viewed":116,"name":"fBm texture","username":"sarabase","description":"Thsi shader shows a fractal noise based on a simplex noise texture.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["noise","fbm","simplex","shader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 hash( vec2 p ) {\n\tp = vec2( dot(p,vec2(127.1,311.7)),\n\t\t\t  dot(p,vec2(269.5,183.3)) );\n\n    //The output must be between 0.0 and 1.0\n\treturn -1.0 + 2.0*fract(sin(p) * 43758.5453123);\n}\n\nfloat noise( in vec2 p ) { //Simplex noise\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\n\tvec2 i = floor( p + (p.x+p.y) * K1 );\n\n    vec2 a = p - i + (i.x+i.y) * K2;\n    vec2 o = step(a.yx,a.xy);\n    vec2 b = a - o + K2;\n\tvec2 c = a - 1.0 + 2.0*K2;\n\n    vec3 h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\n\tvec3 n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n\n    return dot( n, vec3(70.0) );\n}\n\n#define OCTAVES 6\nfloat fbm (in vec2 st) {\n\n    float value = 0.0;\n    float amplitude = .5;\n    float frequency = 0.;\n\n\n    for (int i = 0; i < OCTAVES; i++) {\n        value += amplitude * noise(st);\n        st *= 2.; //lacunarity: steps in which we increment de frequencies\n        amplitude *= .5; //gain: decreases the amplitude\n    }\n    return value;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec3 color = vec3(0.);\n\n\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    color += fbm(uv*5.0);\n    color = color * 0.5 + 0.5;\n\n    fragColor = vec4(color,1.0);\n\n}","name":"Image","description":"","type":"image"}]}