{"ver":"0.1","info":{"id":"wsVyRw","date":"1602510720","viewed":312,"name":"disk raster parameterization","username":"FabriceNeyret2","description":"disk raster parameterization\nred = pos in raster row segment in disk, green = raster line. \n\nleft: shown in sampling space sqrt(pi)L × L/sqrt(pi)  ( more readable since fit diameter)\nright: shown in screen space.\n","likes":3,"published":3,"flags":0,"usePreview":0,"tags":["rasterization","short","parameterization"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define index(V)   ( V.x + L * V.y )                 // coords to index\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    vec2 R = iResolution.xy, H = vec2(0),\n         S = vec2(16); // exp2(floor(log2(R.yy)));     // Sx × Sy cells\n    O-=O;\n    float   L = ceil(S.x*sqrt(3.14));                  // the L² disk-cells live in a pi.L² surface grid \n    U = floor(U*L/R.y);                                // remap screen to cells grid\n    if ( U.x < L && U.y < L ) {\n        \n        float X = 0., _X, j,y,p;                       // cur segment index in disk rasterization \n        for ( j=0.; j <= L; j++) {                     // rasters line in grid\n            y = j / L * 2. - 1.,                       // line y in normalized coordinates\n            p = index(U);                              // grid index in raster normalized coordinates\n            _X=X, // X =  L*L/4.*( y *sqrt(max(0.,1.-y*y)) + asin(clamp(y,-1.,1.))+1.57);   // cumulated row index\n                X += L*sqrt(max(0.,1.-y*y));\n            if (X > p )                                // we found cell segment: [_X, X ]\n            { H = vec2( (p -_X)/L, .5+.5*y ); break; } // red = pos in segment, green = line number\n        }\n    }\n    else {                                             // --- right: in disk space\n        U.x -= L;\n        float y = U.y / L * 2. - 1.,                   // line y in normalized coordinates\n              X = L*sqrt(max(0.,1.-y*y));\n        if ( abs(U.x -L/2.) < X/2. )\n            H = vec2( ( U.x-L/2.+X/2. ) / L, .5+.5*y) ;// red = pos in segment, green = line number\n    } \n    \n    O = vec4(H,0,1);                                   // draw cells\n    O.g *= .6;\n}","name":"Image","description":"","type":"image"}]}