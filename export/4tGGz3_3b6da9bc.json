{"ver":"0.1","info":{"id":"4tGGz3","date":"1475701171","viewed":155,"name":"Fixed repeat, thanks Klems!","username":"efairbanks","description":"I was having a problem with repeat not working because I made a stupid mistake. Look near line 28 to see my error and how it was resolved.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarcher","mod","bug","repeat","fixed"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MARCH_STEPS 30.0\n#define EPSILON 0.001\n#define GRADIENT_STEP 0.02\n\n//#define DEMONSTRATE_BUG true\n\n#define M_PI 3.1415926535897932384626433832795\n\n// for generating distance map of box with rounded corners\nfloat box(vec3 p, vec3 b, float roundness)\n{\n\treturn length(max(abs(p)-(b-vec3(roundness)),0.0))-roundness;\n}\n\n// combine shapes smoothly\nfloat smin( float a, float b, float k )\n{\n    float h = clamp(0.5+0.5*(b-a)/k,0.0,1.0);\n    return mix(b,a,h)-k*h*(1.0-h);\n}\n\n// field of view of camera\n#define FOV 0.06\n// generate combined distance field\nfloat map(vec3 p)\n{\n    /*\n#ifndef DEMONSTRATE_BUG\n    // repeat following shape?\n    if(mod(iTime,6.)>2.0) p.xz=mod(p.xz,vec2(8.)-4.);\n#else\n    if(DEMONSTRATE_BUG) p.xz=mod(p.xz,vec2(8.)-4.);\n#endif\n*/\n\tp.xz=mod(p.xz,vec2(8.))-4.;\n    \n    // draw rounded box\n    float boxSize = 2.;\n\tfloat d = box(p,vec3(boxSize), boxSize/3.);\n\n\treturn d;\n}\n\n// raymarching procedure with lots of output info\nvoid march(vec3 origin, vec3 direction, out vec3 rayHead, out bool hit, out float dist, out float steps)\n{\n    float distanceTraveled = 0.;\n    hit = true;\n    for(float step=0.; step<MARCH_STEPS; step++)\n    {\n        rayHead = origin + (direction*distanceTraveled);\n        dist = map(rayHead);\n        steps = step;\n        if(dist<EPSILON||step>=MARCH_STEPS) return;\n        distanceTraveled += dist;\n    }\n    hit = false;\n}\n\n// get origin and direction of ray to be cast for camera/screen xy (pixel) coordinate\nvoid cameraRay(vec2 scanLines, vec3 cameraPosition, vec3 target, float fov, out vec3 pos, out vec3 dir)\n{\n\tvec3 forward = normalize(target-cameraPosition);\n    vec3 up = vec3(0.,1.,0.);\n    vec3 right = normalize(cross(forward, up));\n    up = normalize(cross(forward,right));\n    \n    right = right*scanLines.x*fov;\n    up = up*scanLines.y*fov;\n    \n    pos = cameraPosition;\n    dir = (right+up+forward);\n}\n\n// get surface normal of point on distance field for shading\nvec3 gradient( vec3 pos )\n{\n\tconst vec3 dx = vec3( GRADIENT_STEP, 0.0, 0.0 );\n\tconst vec3 dy = vec3( 0.0, GRADIENT_STEP, 0.0 );\n\tconst vec3 dz = vec3( 0.0, 0.0, GRADIENT_STEP );\n\treturn normalize(vec3(\n\t\tmap( pos + dx ) - map( pos - dx ),\n\t\tmap( pos + dy ) - map( pos - dy ),\n\t\tmap( pos + dz ) - map( pos - dz )\n\t));\n}\n\n// calculate diffuse lighting for point on distance field given surface normal\nfloat diffuse(vec3 normal, vec3 lightPosition)\n{\n\treturn max(dot(normal,normalize(lightPosition)),0.);\n}\n\n// calculate diffuse lighting for point on distance field\nfloat softshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<16; i++ )\n    {\n\t\tfloat h = map( ro + rd*t );\n        res = min( res, 8.0*h/t );\n        t += clamp( h, 0.02, 0.10 );\n        if( h<0.001 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\n// calculate combined lighting for point on distance field\nfloat shadePoint(vec3 position, vec3 normal, vec3 lightPosition)\n{\n    float diffuseLight = diffuse(normal, lightPosition);\n\t// speculative light - it might be specular, but we're not really sure\n    float specularLight = pow(diffuseLight,30.);\n\tfloat shadow = softshadow(position, normalize(lightPosition), 0.02, 2.25);\n    return (diffuseLight+specularLight)*shadow;\n}\n\n// generate background color\nvec3 background(vec2 uv)\n{\n\treturn vec3(0.5,0.5,0.5)*uv.y;\n}\n\n// compose image\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord )\n{\n    // scale coordinates to -1 -> +1, adjusted for screen aspect ratio\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tuv = uv*2.-1.;\n    uv.x = uv.x*iResolution.x/iResolution.y;\n    \n    // get ray representing camera scanline position and direction\n    vec3 cameraPosition = normalize(vec3(sin(iTime*1.5),-0.7,cos(iTime*1.5)))*200.;\n    vec3 cameraOrigin;\n    vec3 cameraDirection;\n    cameraRay(uv, cameraPosition, vec3(0.,0.,0.), FOV, cameraOrigin, cameraDirection);\n    \n    // calculate distance, hit point, etc of distance field via raymarching\n    vec3 rayHead;\n    bool hit;\n    float dist;\n    float steps = 40.;\n    march(cameraOrigin, cameraDirection, rayHead, hit, dist, steps);\n    \n    // calculate normal for point on distance field\n    vec3 normal = gradient(rayHead);\n    \n    // calculate light for point\n\tvec3 rotLightPos = vec3(-1.,-1.,0.);\n    vec3 latRotLightPos = vec3(0.,-1.,-1.);\n    vec3 lightPos = vec3(cos(iTime),sin(iTime),cos(iTime));\n    float light = 0.;\n    light += shadePoint(rayHead, normal, rotLightPos);\n    light += shadePoint(rayHead, normal, latRotLightPos);\n    light += shadePoint(rayHead, normal, lightPos);\n    light /= 3.;\n    \n    // specify color of entire distance field\n    vec3 fieldColor = vec3(1.0,0.4,0.4);\n    \n    // final steps and background\n    vec3 color = fieldColor*light;\n    if(!hit) color = background(uv);\n    \n    // set fragment shader color\n    fragColor = vec4(color,1.);\n}\n","name":"Image","description":"","type":"image"}]}