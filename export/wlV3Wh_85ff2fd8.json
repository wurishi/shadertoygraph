{"ver":"0.1","info":{"id":"wlV3Wh","date":"1578854385","viewed":73,"name":"sdCylinder Sponge x2","username":"TLC123","description":"sdCylinder Sponge","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["sdcylindersponge"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of \"sdCylinder Sponge\" by jorge2017a1. https://shadertoy.com/view/3lK3D1\n// 2020-01-12 18:37:15\n\n//referencia 60442.0\nfloat smin(float a, float b, float k)\n{\n\tfloat h = clamp(.5 + .5*(a-b)/k, 0., 1.);\n\treturn mix(a, b, h) - k*h*(1.-h);\n}\n\nfloat maxcomp(vec2 p) {\n  return max(p.x, p.y);\n}\n\nfloat sdBox(vec3 p, vec3 b) {\n  p = abs(p) - b;\n  return length(max(p, 0.0)) + min(max(p.x, max(p.y, p.z)), 0.0);\n}\n\nfloat sdBox(vec2 p, vec2 b) {\n  p = abs(p) - b;\n  return length(max(p, 0.0)) + min(max(p.x, p.y), 0.0);\n}\n\n\nfloat dsCapsule(vec3 point_a, vec3 point_b, float r, vec3 point_p)//cylinder SDF\n{\n \tvec3 ap = point_p - point_a;\n    vec3 ab = point_b - point_a;\n    float ratio = dot(ap, ab) / dot(ab , ab);\n    ratio = clamp(ratio, 0.f, 1.f);\n    vec3 point_c = point_a + ratio * ab;\n    return length(point_c - point_p) - r;\n}\n\n\nfloat sdCylinder( vec3 p, vec2 h )\n{\n    vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n\n/*\nfloat sdCross(vec3 p) {\n  float da = sdBox(p.xy, vec2(1.0));\n  float db = sdBox(p.yz, vec2(1.0));\n  float dc = sdBox(p.zx, vec2(1.0));\n  return min(da, min(db, dc));\n}\n*/\n\nfloat sdCross(vec3 p) {\n  float da = maxcomp(abs(p.xy));\n  float db = maxcomp(abs(p.yz));\n  float dc = maxcomp(abs(p.xz));\n  return min(da, min(db, dc)) - 1.0;\n}\n\n\nmat2 rotate(float r) {\n  float c = cos(r);\n  float s = sin(r);\n  return mat2(c, s, -s, c);\n}\n\nfloat map(vec3 p) {\n  p.zx *= rotate(iTime);\n  p.yx *= rotate(iTime * 0.5);\n\n  \n  \n  float d;\n   \n    float  distToCapsule =sdCylinder( p, vec2(.350,1.76) );\n    \n    d=distToCapsule;\n    \n    \n  float s = 1.4;\n  for (int m = 0; m < 3; m++) {\n    vec3 a = mod(p * s, 2.0) - 1.0;\n    s *= 3.0;\n    vec3 r = 1.0 - 3.01 * abs(a*1.01);\n    float c = sdCross(r) / s;\n    d = max(d, c);\n  }\n    \n      p.zx *= rotate(1.+iTime);\n  p.yx *= rotate(iTime * 0.5);\n\n  \n  \n  float d2;\n   \n    float  distToCapsule2 =sdCylinder( p, vec2(1.7,.12) );\n    \n    d2=distToCapsule2;\n    \n    \n  float s2 = 1.1;\n  for (int m2 = 0; m2 < 4; m2++) {\n    vec3 a2 = mod(p * s2, 2.0) - 1.0;\n    s2 *= 3.0;\n    vec3 r2 = 1.0 - 3.1 * abs(a2*1.05);\n    float c2 = sdCross(r2) / s2;\n    d2 = max(d2, c2);\n  }\n    \n  return smin(d,d2,.125);\n                               \n                               \n\n                               \n}\n\nvec3 normal(vec3 p) {\n  float d = 0.01;\n  return normalize(vec3(\n    map(p + vec3(d, 0.0, 0.0)) - map(p - vec3(d, 0.0, 0.0)),\n    map(p + vec3(0.0, d, 0.0)) - map(p - vec3(0.0, d, 0.0)),\n    map(p + vec3(0.0, 0.0, d)) - map(p - vec3(0.0, 0.0, d))\n  ));\n}\n\nvec3 raymarch(vec3 ro, vec3 rd) {\n  vec3 p = ro;\n  for (int i = 0; i < 64; i++) {\n    float d = map(p);\n    p += d * rd;\n    if (d < 0.01) {\n      vec3 n = normal(p);\n      return n * 0.5 + 0.5;\n      //return vec3(0.1) + vec3(0.95, 0.5, 0.5) * max(0.0, dot(n, normalize(vec3(1.0))));\n    }\n  }\n  return vec3(1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n  vec2 st = (2.0 * fragCoord.xy - iResolution.xy) / min(iResolution.x, iResolution.y);\n\n  vec3 ro = vec3(0.0, 0.0, 3.0);\n  vec3 ta = vec3(0.0);\n  vec3 z = normalize(ta - ro);\n  vec3 x = normalize(cross(z, vec3(0.0, 1.0, 0.0)));\n  vec3 y = normalize(cross(x, z));\n  vec3 rd = normalize(st.x * x + st.y * y + 1.5 * z);\n\n  vec3 c = raymarch(ro, rd);\n\n  fragColor = vec4(c, 1.0);\n\n}\n","name":"Image","description":"","type":"image"}]}