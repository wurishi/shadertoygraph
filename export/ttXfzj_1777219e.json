{"ver":"0.1","info":{"id":"ttXfzj","date":"1597252444","viewed":889,"name":"See Through Practice","username":"reatured","description":"Learning","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["learning"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float map (in vec3 pos){//d: big ball, d2: plane, d3: small ball\n    vec3 centerBig = vec3(cos(iTime)*0.1 + sin(iTime*2.586)*0.1, max(0., cos(iTime)*0.1),0.);\n \tfloat d = length(pos - centerBig)-0.25;\n    \n    float d2 = pos.y - (-0.25);\n    \n    vec3 center = vec3(sin(iTime)*1. + cos(iTime*2.586)*1.,cos(iTime)*1.,-2.);\n    float d3 = length(pos - center)-0.12;\n    \n    return min(d3,min(d2,d));\n    //return min(d3,d2);\n}\n\nfloat mapSeeThrough (in vec3 pos){\n    vec3 centerBig = vec3(cos(iTime)*0.1 + sin(iTime*2.586)*0.1, max(0., cos(iTime)*0.1),0.);\n \tfloat d = length(pos - centerBig)-0.25;\n    \n    float d2 = pos.y - (-0.25);\n    float d3 = length(pos - vec3(sin(iTime)*1. + cos(iTime*2.586)*1.,cos(iTime)*1.,-2.))-0.12;\n    \n    float d4 = map(pos);\n    //return max(d3, min(d2,d));\n    return max(d3,d4);\n}\n\nvec3 calcNormal(in vec3 pos)\n{\n\tvec2 e = vec2 (0.0001,0.0);\n    return normalize(vec3(map(pos+e.xyy)-map(pos-e.xyy),\n                         map(pos+e.yxy)-map(pos-e.yxy),\n                         map(pos+e.yyx)-map(pos-e.yyx)));\n    \n}\n\nfloat castRay(in vec3 ro, vec3 rd){\n    float t = 0.;\n        for(int i = 0; i<100; i){\n        vec3 pos = ro + t*rd;\n        \n        float h = map(pos);\n        if(h<0.001)\n            break;\n        \n        t += h;\n        if(t>20.) break;\n    \t}\n    \n    if(t>20.0) t=-1.;\n    return t;\n    \n}\n\nfloat castRayS(in vec3 ro, vec3 rd){\n    float t = 0.;\n        for(int i = 0; i<100; i){\n        vec3 pos = ro + t*rd;\n        \n        float h = mapSeeThrough(pos);\n        if(h<0.001)\n            break;\n        \n        t += h;\n        if(t>20.) break;\n    \t}\n    \n    if(t>20.0) t=-1.;\n    return t;\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 p = (2. * fragCoord-iResolution.xy)/iResolution.y;\n    \n    vec3 ro = vec3(0.0,0.0,1.0);\n    vec3 rd = normalize(vec3(p,-1.5));\n\n    // Time varying pixel color\n    vec3 col = vec3(0.65,0.75,0.9) - 0.5*rd.y;\n    \n    float t = castRay(ro, rd);\n\tfloat t2 = castRayS(ro, rd);\n    \n    if(t>0.){\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal(pos);\n        \n        vec3 mate = vec3(0.18);\n        vec3 sun_dir = vec3(vec3(0.8,0.4,0.2));\n        float sky_dif = clamp(0.5 + 0.5*dot(nor, vec3(0.,1.,0.)), 0.,1.);\n        float sun_dif = clamp(dot(nor, sun_dir), 0.0, 1.0);\n        float sun_sha = step(castRay(pos+nor*0.001, sun_dir),0.0);\n        float bou_dif = clamp(0.7 + 0.5* dot(nor, vec3(0.0,-1.0,0.0)), 0.0,0.1);\n        \n        \n        col = mate * vec3(7.0,5.0,3.0)*sun_dif * sun_sha;\n        col += mate *vec3(0.5,0.8,0.9)*sky_dif;\n        col += mate * vec3(0.7,0.3,0.2)*bou_dif;\n                \n        if(t2>0.){\n            vec3 pos = ro + t2*rd;\n        vec3 nor = calcNormal(pos);\n        \n        vec3 mate = vec3(0.18);\n        vec3 sun_dir = vec3(vec3(0.8,0.4,0.2));\n        float sky_dif = clamp(0.5 + 0.5*dot(nor, vec3(0.,1.,0.)), 0.,1.);\n        float sun_dif = clamp(dot(nor, sun_dir), 0.0, 1.0);\n        float sun_sha = step(castRay(pos+nor*0.001, sun_dir),0.0);\n            \n     \t\tcol += vec3(0.1,0.2,5.)*sun_dif;\n    \t}\n    }  \n    \n    \n    \n    col = pow(col, vec3(0.4545));\n   \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}