{"ver":"0.1","info":{"id":"md3fDM","date":"1699044566","viewed":26,"name":"ray marching testâ€‹","username":"Borusse29","description":"If you know how to apply different colors to the objects, please let me know!","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define maxsteps 100\n#define epsilon 0.001\n#define focalDist 0.5\n\nfloat smoothMax(float a, float b, float k)\n{\n    return log(exp(k*a)+exp(k*b))/k;\n}\n\nfloat smoothMin(float a, float b, float k)\n{\n    return -smoothMax(-a, -b, k);\n}\n\nfloat sdSphere(vec3 p, float r)\n{\n    return length(p) - r;\n}\n\nfloat sdBox(vec3 p, vec3 d)\n{\n    vec3 q = abs(p) - d;\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat sceneSdf(vec3 p)\n{\n    return smoothMin(sdBox(p, vec3(0.75)), sdSphere(p - vec3(0.0,2.1*cos(0.7*iTime+3.14),0.0), 0.5), 3.5);\n    //return smoothMax(sdBox(p, vec3(0.75)), -sdSphere(p, 0.2*sin(1.2*iTime))-0.1, 1.5);\n    //return max(sdBox(p, vec3(0.75)), sdSphere(p - vec3(1.2*cos(1.3*iTime),1.1*sin(1.0*iTime),0.0), 0.5));\n    //return max(sdBox(p, vec3(0.5)), -sdSphere(p - vec3(0.0,1.2*cos(1.0*iTime),0.0), 0.6));\n    //return smoothMin(sdSphere(p, 1.0), sdBox(p - vec3(0.0,2.5*cos(0.7*iTime),0.0), vec3(0.5)), 3.0);\n}\n\nvec3 normal(vec3 p)\n{\n    return normalize(vec3(\n        sceneSdf(p+vec3(epsilon,0.0,0.0)) - sceneSdf(p-vec3(epsilon,0.0,0.0)),\n        sceneSdf(p+vec3(0.0,epsilon,0.0)) - sceneSdf(p-vec3(0.0,epsilon,0.0)),\n        sceneSdf(p+vec3(0.0,0.0,epsilon)) - sceneSdf(p-vec3(0.0,0.0,epsilon))\n        ));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (-1.0 + 2.0*fragCoord.xy / iResolution.xy) * \n\t\tvec2(iResolution.x/iResolution.y, 1.0);\n    \n    vec3 sunDir = normalize(vec3(-2.0,1.0,3.0));\n    float camDist = -2.5;\n    \n    float t = iTime;\n    vec3 ro = vec3(camDist*cos(t), camDist*sin(t), 0.0);\n    mat3 cm = mat3(vec3( cos(t), sin(t), 0.),\n                   vec3(-sin(t), cos(t), 0.),\n                   vec3( 0.,          0.,1.));\n    vec3 rd = cm * normalize(vec3(2.0*focalDist, uv));\n\n    vec3 col = vec3(0.19);\n    \n    for (int i = 0; i < maxsteps; i++) {\n        float mind = sceneSdf(ro);\n        \n        if (mind <= epsilon) {\n            col = vec3(0.75 * dot(normal(ro), sunDir) + 0.25);\n            break;\n        }\n        \n        ro += mind * rd;\n    }\n\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}