{"ver":"0.1","info":{"id":"XdGczK","date":"1522539446","viewed":492,"name":"Shader Showdown Round 2","username":"Flopine","description":"My second shader for semi-finals! :) (kind of, I improvised on stage) That was so fun. ","likes":14,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","fractal","revision2018"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n// Thanks to wsmind, leon, lsdlive, XT95 and lamogui for teaching me and their help\n\n\n#define ITER 60.\n#define PI 3.141592\n\nvec2 mo (vec2 p, vec2 d)\n{\np.x = abs(p.x)-d.x;\np.y = abs(p.y)-d.y;\nif (p.y>p.x) p.xy = p.yx;\nreturn p;\n}\n\nmat2 rot (float a)\n{\nfloat c = cos(a); float s = sin(a); return mat2 (c,s,-s,c);\n}\n\nfloat stmin (float a, float b, float k, float n)\n{\nfloat st = k/n;\nfloat u = b-k;\nreturn min(min(a,b),0.5*(u+a+abs(mod(u-a+st,2.*st)-st)));\n}\n\nvec3 palette (float t, vec3 a, vec3 b, vec3 c, vec3 d)\n{\nreturn a+b*cos(2.*PI*(c*t+d));\n}\n\n\nfloat sphe (vec3 p, float r)\n{\nreturn length(p)-r;\n}\n\nfloat sd (vec3 p, float d)\n{\np = abs(p);\np = max(p, p.yzx);\nreturn max(min(p.z,min(p.x,p.y))-d,sphe(p,3.));\n}\n\nfloat prim1 (vec3 p)\n{\nreturn min (sphe(p,1.),sd(p,0.4));\n}\n\nfloat prim2 (vec3 p)\n{\nfloat sp = 1.2;\nfloat st = 3.;\nfloat m = 0.8;\n  p*= exp(-fract(iTime*2.)*0.1);\nfloat s = prim1(vec3 (p.x-sp,p.y,p.z));\nfloat s1 = prim1(vec3 (p.x+sp,p.y,p.z));\nfloat s2 = prim1(vec3 (p.x,p.y-sp,p.z));\nfloat s3 = prim1(vec3 (p.x,p.y+sp,p.z));\nreturn stmin(s3,stmin(s2,stmin(s,s1,m,st),m,st),m,st);\n}\n\nfloat fractal (vec3 p)\n{\nfloat pr = prim2(p);\nfor (int i =0; i<4;i++)\n{\n  p.xz *= rot (PI/4.);\n  p.xy = mo(p.xy,vec2(5.));\n\n  pr = min(pr, prim2(p));\n}\nreturn pr;\n}\n\nfloat sdf (vec3 p)\n{\np.xz *= rot(iTime/4.);\np.xy *= rot(iTime/2.);\nreturn fractal(p);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv =(fragCoord/iResolution.xy)-.5;\n\tuv.x *= iResolution.x/iResolution.y;\n    \n    vec3 ro = vec3(0.001,1,-30.); vec3 p = ro;\n    vec3 dir = normalize(vec3 (uv,1.));\n    float shad = 0.;\n    float t = 0.;\n\n    for (float i = 0.; i<ITER ; i++)\n    {\n    float d = sdf(p);\n    if (d<0.01)\n    {\n    shad = i/ITER;\n    break;\n    }\n    p += d*dir*0.7;\n    }\n    t = length(ro-p);\n    vec3 pal = palette(length(uv),\n                      vec3(0.5),\n                      vec3(0.5),\n                      vec3(0.5),\n                      vec3(0.,0.9,0.8));\n    vec3 col = vec3(shad)/pal;\n    col = mix(col, pal, 1.-exp(-0.0008*t*t));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}