{"ver":"0.1","info":{"id":"DljSDw","date":"1676214092","viewed":98,"name":"Keyboard typing test","username":"kaffelars","description":"Type to write\n\nBackspace to erase. Enter to line break.","likes":1,"published":1,"flags":48,"usePreview":0,"tags":["keyboard","typewriter","typing","wordprocessor"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec2 charsize = vec2(1.0/16.0, 1.0/16.0);\nfloat cwfactor = 0.18;\nconst vec3 fontcolor = vec3(0.0, 1.0, 0.0);\n\nfloat getchar(int charid, vec2 uv, bool modified)\n{   \n    if (charid == 32) return 0.0; //space\n    \n    vec2 charpos = vec2(0.0);\n    \n    if (charid >= 48 && charid <= 57) //nums\n    {\n        charpos.y = 12.0;\n        charpos.x = float(charid - 48);\n    }\n    \n    if (charid >= 65 && charid <= 79) //a - o\n    {\n        charpos.y = modified ? 9.0 : 11.0;\n        charpos.x = float(charid - 64);\n    }\n    \n    if (charid >= 80 && charid <= 90) //p-z\n    {\n        charpos.y = modified ? 8.0 : 10.0;\n        charpos.x = float(charid - 80);\n    }\n    \n    if (charid == 1) //cursor\n    {\n        if (fract(iTime) > 0.5) return 0.0;\n        charpos.y = 10.0;\n        charpos.x = 15.0;\n    }\n    \n    if (charid >= 188 && charid <= 190) //,-.\n    {\n        charpos.x = float(charid) - 176.0;\n        charpos.y = 13.0;\n    }\n    \n    vec2 charuv;\n    charuv.x = charpos.x * charsize.x + uv.x * charsize.x;\n    charuv.y = ((charpos.y * charsize.y) + uv.y * charsize.y);\n    \n    float t = texture(iChannel1, charuv).x;\n    return t > 0.3 ? t : 0.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 fc = fragCoord;\n    fc.y = iResolution.y - fragCoord.y;\n\n    vec2 area = 16.0 * (fc/iResolution.yy);\n    \n    area.x = area.x * (1.0 + cwfactor * 3.0);\n    \n    ivec2 cursorpos = ivec2(texelFetch(iChannel2, ivec2(0), 0).xy);\n    \n    ivec2 px = ivec2(area);\n    \n    vec2 uv = (fract(area));\n    uv.x = (uv.x + cwfactor) * (1.0 - cwfactor*2.0);\n    uv.y = 1.0 - uv.y;\n\n    vec3 col = vec3(0.0);\n    \n    if (px == cursorpos)\n    {\n        col = getchar(1, uv, false) * fontcolor;\n    }\n    else\n    {\n        float key = texelFetch(iChannel0, px, 0).x;\n        bool modified = texelFetch(iChannel0, px, 0).y > 0.5;\n\n        if (key > 0.0)\n        {\n            col = getchar(int(key), uv, modified) * fontcolor;\n        }\n    }\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define numchars 40\nconst int[numchars] acceptedkeys = int[numchars](32, 188, 189, 190, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90);\n#define shiftkey 16\n#define backspace 8\n#define enterkey 13\n\nbool keypressed(int keyid)\n{\n    return texelFetch(iChannel0, ivec2(keyid, 1), 0).x > 0.5;\n}\n\nbool keyheld(int keyid)\n{\n    return texelFetch(iChannel0, ivec2(keyid, 0), 0).x > 0.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 pixel = ivec2(fragCoord);\n       \n    vec2 data;\n    \n    if (iFrame == 0)\n    {\n        data = vec2(0.0);\n    }\n    else\n    {\n        data = texelFetch(iChannel1, pixel, 0).xy;\n    }\n    \n    \n    if (pixel.x <= 1)\n    {\n        if (keypressed(backspace))\n        {\n            if (pixel.x == 0)\n            {\n                if (data.x > 0.0 || data.y > 0.0)\n                {\n                    ivec2 pcpos = ivec2(data.xy);\n                    do\n                    {\n                        pcpos = getprevcursorpos(pcpos);\n                    } while (pcpos.x > 0 && texelFetch(iChannel2, pcpos, 0).x < 0.1);\n                    \n                    data = vec2(pcpos);\n                }\n            }\n            else\n            {\n                data.x = 0.0;\n                data.y = 0.0;\n            }\n        }\n        else if (keypressed(enterkey))\n        {\n            if (pixel.x == 0)\n            {\n                data.y = data.y + 1.0;\n                data.x = 0.0;\n            }\n            else\n            {\n                data.x = 0.0;\n                data.y = 0.0;\n            }\n        }\n        else\n        {\n            for (int i = 0; i < numchars; i++)\n            {\n                if (keypressed(acceptedkeys[i]))\n                {\n                    if (pixel.x == 0)\n                    {\n                        ivec2 npos = getnextcursorpos(ivec2(data.xy));\n                        data = vec2(npos);\n                    }\n                    else\n                    {\n                        data.x = float(acceptedkeys[i]);\n                        if (keyheld(shiftkey))\n                            data.y = 0.0;\n                        else\n                            data.y = 1.0;\n                    }\n\n                    break;\n                }\n            }\n        }\n    }\n    \n    \n    fragColor = vec4(data.x,data.y,0.0,0.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"int index(ivec2 pos)\n{\n    return (pos.y * linewidth) + pos.x;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 pixel;\n    pixel.x = int(fragCoord.x);\n    pixel.y = int(fragCoord.y);\n\n    vec4 color;\n    \n    if (iFrame == 0)\n    {\n        color = vec4(0.0);\n    }\n    else\n    {\n        color = texelFetch(iChannel1, pixel, 0);\n    }\n\n    ivec2 cursorpos = (ivec2(texelFetch(iChannel0, ivec2(0), 0).xy));\n\n    float key = texelFetch(iChannel0, ivec2(1, 0), 0).x;\n    float modifier = texelFetch(iChannel0, ivec2(1, 0), 0).y;\n\n    if (index(pixel) >= index(cursorpos))\n    {\n        color.r = 0.0;\n        color.g = 0.0;\n    }\n\n    if (pixel == getprevcursorpos(cursorpos) && key > 0.0)\n    {\n        color.r = key;\n        color.g = modifier;\n    }\n\n    \n    \n    fragColor = color;\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define linewidth 32\n\nivec2 getnextcursorpos(ivec2 cursorpos)\n{\n    ivec2 cpos = cursorpos + ivec2(1,0);\n    \n    if (cpos.x >= linewidth)\n    {\n        cpos.y = cpos.y + 1;\n        cpos.x = 0;\n    }\n    \n    return cpos;\n}\n\nivec2 getprevcursorpos(ivec2 cursorpos)\n{\n    ivec2 cpos = cursorpos - ivec2(1,0);\n    \n    if (cpos.x < 0)\n    {\n        if (cpos.y > 0)\n        {\n            cpos.y = cpos.y - 1;\n            cpos.x = linewidth - 1;\n        }\n        else\n        {\n            cpos.x = 0;\n        }\n    }\n    \n    return cpos;\n}","name":"Common","description":"","type":"common"}]}