{"ver":"0.1","info":{"id":"3sj3zw","date":"1548447324","viewed":68,"name":"lab - union sub inters","username":"yashgugale","description":"lab union sub inters","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["sub","union","inter"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Union, Subtraction, Intersection:\n//Union:\nfloat opUnion( float d1, float d2 )\n{\n    return min(d1,d2);\n}\n// Subtraction:\nfloat opSubtraction( float d1, float d2 )\n{\n    return max(-d1,d2);\n}\n\n// Intersection:\nfloat opIntersection( float d1, float d2 )\n{\n    return max(d1,d2);\n}\n\n// signed distance to a regular octogon\nfloat sdOctogon( in vec2 p, in float r )\n{\n  // pi/8: cos, sin, tan.\n  const vec3 k = vec3(-0.9238795325,   // sqrt(2+sqrt(2))/2 \n                       0.3826834323,   // sqrt(2-sqrt(2))/2\n                       0.4142135623 ); // sqrt(2)-1 \n\n  // reflections\n  p = abs(p);\n  p -= 2.0*min(dot(vec2( k.x,k.y),p),0.0)*vec2( k.x,k.y);\n  p -= 2.0*min(dot(vec2(-k.x,k.y),p),0.0)*vec2(-k.x,k.y);\n    \n  // Polygon side.\n  return length(p - vec2(clamp(p.x, -k.z*r, k.z*r), r))*sign(p.y - r);\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,vec2(0))) + min(max(d.x,d.y),0.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = 2.0*fragCoord/iResolution.xy -vec2(1.0);\n    \n    vec2 oct_uv = uv;\n    vec2 rect_uv = uv;\n    \n    //Pass periodic coords to distnace function to create repeating shape\n    float d1 = sdOctogon(oct_uv, 0.2);\n\tfloat d2 = sdBox(rect_uv, vec2(0.1, 0.1));\n    \n    oct_uv.x, oct_uv.y += 0.6;\n    rect_uv.x, rect_uv.y += 0.6;\n    float d3 = sdOctogon(oct_uv, 0.2);\n\tfloat d4 = sdBox(rect_uv, vec2(0.1, 0.1));\n    \n    oct_uv.x, oct_uv.y += 0.6;\n    rect_uv.x, rect_uv.y -= 0.6;\n    float d5 = sdOctogon(oct_uv, 0.2);\n\tfloat d6 = sdBox(rect_uv, vec2(0.1, 0.1));\n    \n    //vec3 col = vec3(smoothstep(0.0, 1.0, d)*iTime*2.0) * vec3(0.4, 0.9, 0.5);\n\tfloat sub = opSubtraction(d2, d1);\n    float uni = opUnion(d4, d3);\n    float inters = opIntersection(d6, d5);\n    \n    vec3 col =  vec3(0.1, 0.7, 0.4) * sign(sub) * vec3(0.8, 0.4, 0.7);\n    col *= vec3(0.3, 0.3, 0.6) +sign(uni);\n    //col *= vec3(0.7, 0.6, 0.3) - sign(inters);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}