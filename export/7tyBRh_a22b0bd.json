{"ver":"0.1","info":{"id":"7tyBRh","date":"1664008066","viewed":56,"name":"light-music","username":"Kolya142","description":". added user modification: \"https://www.shadertoy.com/user/Shane\"","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["music"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGzn","filepath":"/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3","previewfilepath":"/media/ap/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float n = 6.0;\nvec2 polar(vec2 uv){\n    return vec2(length(uv), atan(uv.y, uv.x)/6.2831);\n}\n\nvec3 toRGB(float i){\n    return vec3(cos(iTime), sin(iTime), atan(iTime))*i;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n\n    // Centered, 1-to-1 aspect coordinates.\n    vec2 uv = (fragCoord - iResolution.xy*.5)/iResolution.y;\n    // Polar transform.\n    uv = polar(uv);\n    // Quantizing the angle.\n    uv.y = floor((fract(uv.y))*32.)/32.;\n\n    // Bar height.\n    float h = texture(iChannel0, uv.yx).r;\n \n    // Coloring, based on variable ring height.\n    vec3 col = abs(uv.x - h/2. - .1)<.025? toRGB(h)*2. + .2 : vec3(0);\n  \n    // Rough gamma correction.\n    fragColor = vec4(sqrt(col), 1);\n}","name":"Image","description":"","type":"image"}]}