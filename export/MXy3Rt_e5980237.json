{"ver":"0.1","info":{"id":"MXy3Rt","date":"1719440329","viewed":124,"name":"Interactive Hexagon Grid","username":"inspirnathan","description":"Interactive hexagon grid. Move the mouse around the grid while holding left-click to see the hexagons light up! ðŸŒŸ\n\nLearn more about how this all works in my tutorial: [url]https://inspirnathan.com/posts/175-interactive-hexagon-grid-tutorial-part-6[/url]","likes":8,"published":1,"flags":32,"usePreview":0,"tags":["grid","interactive","hexagon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Visit my tutorial to learn how this works: https://inspirnathan.com/posts/175-interactive-hexagon-grid-tutorial-part-6\n\nconst vec3 hoverColor = vec3(.28, .73, .47);\nconst vec3 originalColor = vec3(0, .14, .22);\nconst vec3 targetColor = vec3(0, .21, .33);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = vec3(0);\n    \n    vec2 uv = fragCoord.xy/iResolution.xy;\n    \n    vec3 data = texture(iChannel0, uv).xyz;\n    \n    vec3 lerpedCol = mix(targetColor, hoverColor, data.z);\n    \n    // Each cell's uv.y value ranges between -0.5 and 0.5, so each\n    // hexagon has a max height of 0.5 * 2, so we subtract a value\n    // from 0.5 to get an outline on each side of the hexagon\n    float d = 1. - step(0.5 - 10./iResolution.y, data.y);\n      \n    if (data.x > 0.) {\n        col = vec3(d) * lerpedCol;\n    } else {\n        col = vec3(d) * originalColor;\n    }\n      \n    // Shows which tiles have been hovered over already\n    // col = vec3(data.x);\n\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Visit my tutorial to learn how this works: https://inspirnathan.com/posts/175-interactive-hexagon-grid-tutorial-part-6\n\nconst vec2 hexSide = vec2(1.7320508, 1); // proportion between two sides of 30-60-90 triangle\nconst float scale = 5.; // hexagon grid scale factor\n\n// hexagonal distance\nfloat hexD(in vec2 p)\n{    \n    p = abs(p);\n    \n    return max(dot(p, hexSide * .5), p.y);\n}\n\n// hexagonal coordinates\nvec4 hexC(vec2 p)\n{   \n    // hexagon centers - used for hexagon grid creation\n    // and assigning IDs to each hexagon\n    vec4 hc = floor(vec4(p, p - vec2(hexSide.x/2., .5)) / hexSide.xyxy) + .5;\n    \n    // rectangular grids\n    vec4 rg = vec4(p - hc.xy * hexSide, p - (hc.zw + .5) * hexSide);\n    \n    // hexagonal grid formed by choosing the closest point\n    // between hexagon centers of both rectangular grids\n    return dot(rg.xy, rg.xy) < dot(rg.zw, rg.zw)\n        ? vec4(rg.xy, hc.xy)\n        : vec4(rg.zw, hc.zw + .5);\n}\n\n// draw hexagon grid and transfer data to \"Image\" pass\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec3 col = vec3(0);\n        \n\tvec2 uv = (fragCoord - iResolution.xy * .5) / iResolution.y;\n    vec2 m = (iMouse.xy - iResolution.xy * .5) / iResolution.y;\n    \n    vec3 data = texture(iChannel0, fragCoord/iResolution.xy).xyz;\n    \n    vec4 h = hexC(uv * scale);\n    vec4 hm = hexC(m * scale);\n    \n    float d = hexD(h.xy);\n    \n    float ac = 0.; // active coordinate\n\n    float touchTimeMultiplier = data.z < 0.001 ? 0. : data.z * 0.95;\n    \n    // check if ID of the hexagon currently touched by the mouse is the\n    // same as the ID of the hexagon the current pixel is closest to\n    if (h.zw == hm.zw) {\n        ac = step(0., d);\n        touchTimeMultiplier = 1.;\n    }\n\n    fragColor = vec4(vec3(data.x + ac, d, touchTimeMultiplier), 1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}