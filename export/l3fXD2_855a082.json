{"ver":"0.1","info":{"id":"l3fXD2","date":"1709996697","viewed":88,"name":"camera without view matrix","username":"DLG03","description":"A camera I made when I had not yet learned about matrix transformations.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["camera"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Start with a normalized vector in polar coordinates, and\n    // transform to euclidian coordinates. \n    \n    vec2 angle = vec2(iMouse.x * 0.03, iMouse.y * 0.03);\n    \n    vec3 dir_front = vec3(\n        cos(angle.x) * cos(angle.y),\n        sin(angle.y),\n        sin(angle.x) * cos(angle.y)\n    );\n    \n    vec3 dir_right = vec3(\n        -sin(angle.x), \n        0.0, \n        cos(angle.x)\n    );\n    \n    vec3 dir_up = vec3(\n        -cos(angle.x) * sin(angle.y), \n        cos(angle.y), \n        -sin(angle.x) * sin(angle.y)\n    );\n    \n    // At the tip of the normalized direction vector, we have \n    // a 'window' that we shoot rays through\n    \n    vec2 screen_offset = (fragCoord * 2.0 / iResolution.xy) - 1.0;\n    vec3 dir_ray = dir_front + dir_up * screen_offset.y + dir_right * screen_offset.x;\n\n\n    // Now we can use dir_ray to raymarch\n    vec3 pos_player = vec3(0.0, 5.0, 0.0);\n    vec3 pos_ray = pos_player;\n    float dist_tot = 0.0;\n    float dist_closestObject = 0.0;\n    vec3 col = vec3(1.0);\n    for(int steps = 0; steps < 80; steps++) {\n         dist_closestObject = pos_ray.y;\n         dist_tot += dist_closestObject;\n         pos_ray = pos_ray + dist_closestObject * dir_ray;\n         if(dist_tot > 1000.0) {\n             break;\n         }\n         if(dist_closestObject < 0.01) {\n             if ((int(round(pos_ray.x)) % 2 == 0) && (int(round(pos_ray.z)) % 2 == 0)) {\n                 col = vec3(1.0, 0.0, 0.0);\n             } else {\n                 col = vec3(0.0, 1.0, 0.0);\n             }\n         }\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}