{"ver":"0.1","info":{"id":"tsfSWS","date":"1552295244","viewed":871,"name":"Water-y Noise","username":"Hullburg","description":"A non-fractal noise function with 3D input & normalized 3D output. The artifacts around the grid edges can probably be compensated for somehow.","likes":4,"published":3,"flags":0,"usePreview":0,"tags":["3d","noise","water","gradient","domainwarping"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3Rr","filepath":"/media/a/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin","previewfilepath":"/media/ap/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin","type":"volume","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float pi = radians(180.);\n\nvec3 rd(ivec3 cell) {\n    ivec3 res = textureSize(iChannel0, 0);\n    cell = ((cell % res) + res) % res;\n    \n    vec2 r = texelFetch(iChannel0, cell, 0).xy;\n    r.x *= 2.*pi;\n    vec2 circle = vec2(sin(r.x), cos(r.x));\n    r.y = r.y*2. - 1.;\n    circle *= sqrt(1. - r.y*r.y);\n    return vec3(circle, r.y);\n}\n/*vec3 slerp(vec3 a, vec3 b, float w) {\n    float _cos = dot(a, b);\n    float th = acos(_cos);\n    \n    return a*(sin((1.- w)*th)/sin(th)) + b*(sin(w*th)/sin(th));\n}*/\nvec3 interp(vec3 a, vec3 b, float w) {\n    return\n        #if 0\n        normalize\n        #endif\n        (mix(a, b, w));\n\t\n    //return slerp(a, b, w);\n}\n// This is like perlin but no dot products\nvec3 nmlNoise(vec3 p) {\n    ivec3 c0 = ivec3(floor(p));\n\n    vec3 w = p - vec3(c0);\n    //w = 3.*w*w - 2.*w*w*w;\t// smoothstep\n    \n    vec3 x0, x1, y0, y1, z0, z1;\n    \n    //\n    x0 = rd(c0+ivec3(0,0,0));\n    x1 = rd(c0+ivec3(1,0,0));\n    \n    y0 = interp(x0, x1, w.x);\n    \n    x0 = rd(c0+ivec3(0,1,0));\n    x1 = rd(c0+ivec3(1,1,0));\n    \n    y1 = interp(x0, x1, w.x);\n    \n    \n    z0 = interp(y0, y1, w.y);\n    \n    \n    x0 = rd(c0+ivec3(0,0,1));\n    x1 = rd(c0+ivec3(1,0,1));\n    \n    y0 = interp(x0, x1, w.x);\n    \n    x0 = rd(c0+ivec3(0,1,1));\n    x1 = rd(c0+ivec3(1,1,1));\n    \n    y1 = interp(x0, x1, w.x);\n    \n    \n    z1 = interp(y0, y1, w.y);\n    \n    \n    \n    \n    return normalize(interp(z0, z1, w.z));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord*2. - iResolution.xy)/iResolution.y;\n    vec3 i = vec3(uv*10., iTime);\n    if (iMouse.z > 0.) i.z = 10.*iMouse.y / iResolution.y;\n    vec3 o = nmlNoise(i);\n    vec3 angles = vec3(\n        atan(o.x, o.y),\n        atan(o.z, o.x),\n        atan(o.y, o.z)\n    )/ (2.*pi);\n    //o = (o + 1.)/2.;\n    vec3 tex = texture(iChannel1, uv + o.xz/20.).rgb;\n    fragColor = vec4(tex,1.0);\n}","name":"Image","description":"","type":"image"}]}