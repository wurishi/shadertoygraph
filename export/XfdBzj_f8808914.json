{"ver":"0.1","info":{"id":"XfdBzj","date":"1733273561","viewed":79,"name":"Fractal Curves 123","username":"kukovisuals","description":"Logarithmic spirals,  Rose curves (rhodonea curves),  Lissajous, julia set","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["fractal","julia","juliaset","logarithmic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Convert HSB (Hue, Saturation, Brightness) to RGB\nvec3 hsb2rgb(vec3 c) {\n    vec3 rgb = clamp(abs(mod(c.z * 2.0 + vec3(0.0, 1.0, 2.0), 5.0) - 3.0) - 0.2, 0.1, 1.6);\n    return c.z * mix(vec3(1.0), rgb, c.y);\n}\n\n// Calculate Julia set with Lissajous beams, Rose curves, and Logarithmic spirals, outputting beam color\nfloat calculateJuliaSetWithLissajousBeams(vec2 point, float iTime, out vec3 beamColor) {\n    vec2 c = vec2(-0.770, 0.114); // Julia set constant\n    vec2 z = point * 0.08;        // Initial value\n    const float escapeRadiusSquared = 256.0;\n    float minBeamValue = 1.0;     // Initialize minimum beam value\n\n    // Lissajous parameters\n    float a = 3.0 + sin(iTime * 0.07);  // Horizontal frequency\n    float b = 2.0 + cos(iTime * 0.2);  // Vertical frequency\n    float delta = sin(iTime * 0.004) * 3.14159; // Phase difference\n\n    // Rose curve parameters\n    float k = 4.0 + sin(iTime * 0.6); // Number of petals\n    float roseScale = 0.01;            // Scaling factor for Rose curve\n\n    // Logarithmic spiral parameters\n    float spiralA = 0.002;              // Spiral scaling factor\n    float spiralB = 0.1;               // Spiral tightness factor\n\n    int i;\n    for (i = 0; i < 300; i++) {\n        // Julia set iteration\n        if (dot(z, z) > escapeRadiusSquared) break;\n\n        z = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + c;\n\n     \n        // Lissajous distortion\n        float lissajousFactor = abs(sin(a * z.x + iTime * 0.001) * cos(b * z.y + delta));\n\n        // Rose curve distortion\n        float theta = atan(z.y, z.x); // Calculate polar angle\n        float roseFactor = abs(cos(k * theta)) * roseScale;\n\n        // Logarithmic spiral distortion\n        float spiralFactor = spiralA * exp(spiralB * theta);\n\n        // Combine distortions\n        float combinedFactor = lissajousFactor + roseFactor + spiralFactor;\n\n        // Beam effect modulated by combined distortion\n        float fractValue = fract(dot(z, vec2(4.5)) + iTime * 0.07 + float(i) * 30.02);\n        float beamValue = combinedFactor + 0.02 * fractValue;\n        minBeamValue = min(minBeamValue, beamValue);\n    }\n\n    // Apply exponential scaling for smoother visual transitions\n    float beamIntensity = exp(-170.0 * minBeamValue) * 0.9;\n\n    // Assign color based on beamIntensity\n    float beamID = floor(beamIntensity * 1.0); // Discretize beam IDs\n    float hue = mod(beamID * 0.2, 0.0);        // Generate hue based on beam ID\n    float saturation = 3.0;                    // Full saturation\n    float brightness = beamIntensity;          // Use beamIntensity as brightness\n\n    // Convert HSB to RGB\n    beamColor = hsb2rgb(vec3(hue, saturation, brightness));\n    if (i >= 60) return 0.0;\n\n    return 1.0; // The iteration count is not used for coloring the beams\n}\n\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalize coordinates\n    vec2 point = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n\n    // Add movement\n    float moveX = 0.5 * sin(iTime * 0.05);      // Horizontal movement\n    float moveY = 0.5 * cos(iTime * 0.03);      // Vertical movement\n    vec2 centerOffset = vec2(moveX, moveY);\n    point -= centerOffset;\n\n    // Add zoom\n    float zoom = 1.0 + 0.5 * sin(iTime * 0.02); // Zoom factor\n    point /= zoom;\n\n    // Add rotation\n    float angle = iTime * 0.01;                 // Rotation angle (radians)\n    float cosAngle = cos(angle);\n    float sinAngle = sin(angle);\n    mat2 rotation = mat2(\n        cosAngle, -sinAngle,\n        sinAngle,  cosAngle\n    );\n    point = rotation * point;\n\n    // Calculate light beams modulated by Lissajous waves, get beam color\n    vec3 beamColor;\n    calculateJuliaSetWithLissajousBeams(point, iTime, beamColor);\n\n    // Add subtle glow\n    vec3 glow = beamColor * 0.5;\n    \n    vec3 color = mix(vec3(0.1), beamColor, 0.1) + glow;\n\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}