{"ver":"0.1","info":{"id":"4c2fzG","date":"1725123870","viewed":106,"name":"Pew-Pew!","username":"chronos","description":"PEOW!","likes":14,"published":1,"flags":0,"usePreview":0,"tags":["fire","effect","laser","pew","shot","ember","peow"],"hasliked":0,"parentid":"4fjSDc","parentname":"Fire ember wip"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat linedist(vec2 a, vec2 b, vec2 p)\n{\n    return length(clamp(dot(p-a, b-a)/dot(b-a,b-a), 0., 1.) * (b-a) + a - p);\n}\n\nvec3 FIRE(vec2 uv)\n{\n\n    vec2 a = vec2(-3, 0.);\n    vec2 b = vec2( 1, 0.);\n    \n    float dist = linedist(a, b, uv);\n\n    float alpha = smoothstep(0.1, 0., dist-0.01) * smoothstep(a.x, 1., uv.x) * smoothstep(1.1, .9, uv.x+pow(3.*abs(uv.y), 2.));\n    float glow = 2. / (2. + 100.*dist);\n\n    float fire_intensity = glow * (1.-alpha)* smoothstep(a.x, 1., uv.x) + alpha;\n\n    //float T = clamp(fire_intensity, 0., 1.);\n    float T =  sqrt(tanh(fire_intensity * fire_intensity)); // soft clamp\n\n    #if 1\n    // Add some variation\n    // This is low quality :)\n    T += 0.001+ 0.001*sin(12. * smoothstep(-1., 1., uv.x) + iTime*3.) * \n        (0.01 + 0.001*sin(54. * smoothstep(-0.11, .5, uv.y) + iTime*3.) * smoothstep(1., -1., uv.x));\n    #endif\n\n    // fire gradient:\n    // White, yellow, orange, red, black\n    // vec3(1), vec3(1,1,0), vec3(1, 0, 0), vec3(0,0,0)\n    // Observation: red decays slowest, green moderately slow, and blue decays fast, as temperature drops.\n    vec3 fire = \n    3.*vec3(\n        pow(T, 1.1),\n        pow(T, 2.5),\n        pow(T, 5.)\n    );\n\n    return fire;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n\n    const float PI = 3.14159265;\n    vec2 uv1 = vec2(log(length(uv))/.75, (atan(uv.y, uv.x))/(PI/2.));\n    \n    vec2 uv2 = vec2(log(length(uv))/.75, (atan(uv.y, -uv.x))/(PI/2.));\n\n    vec3 color = vec3(0);\n    float speed = 30.;\n    \n    float mask1 = smoothstep(-2., 2.*-.5, uv1.y) * smoothstep(2., 2.*.5, uv1.y);\n    float mask2 = smoothstep(-2., 2.*-.5, uv2.y) * smoothstep(2., 2.*.5, uv2.y);\n    \n    // Animate:\n    float instance = floor(speed * iTime/15.);\n    float cycle = fract(speed * iTime/15.);\n    \n    float instance2 = floor(speed * (111.5+iTime)/15. + .5);\n    float cycle2 = fract(speed * (iTime+111.5)/15. + .5);\n    \n    uv1.x += 5.-cycle*10.;\n    uv1.y += -1. + 2. * fract(cos(instance * 2.39996322972865)*3238.72345);\n    \n    \n    uv2.x += 5.-cycle2*10.;\n    uv2.y += -1. + 2. * fract(cos(instance2 * 2.39996322972865)*4231.72345);\n    \n    \n    #if 1\n    // Add some distortion\n    // This is low quality :)\n    uv1 += 0.001*sin(50. * smoothstep(-1., 1., uv1.x) + iTime*30.);\n    uv1 += 0.01*sin(64. * smoothstep(-0.1, .5, uv1.y) + iTime*30.) * smoothstep(1., -1., uv1.x);\n    uv2 += 0.001*sin(50. * smoothstep(-1., 1., uv2.x) + iTime*30.);\n    uv2 += 0.01*sin(64. * smoothstep(-0.1, .5, uv2.y) + iTime*30.) * smoothstep(1., -1., uv2.x);\n    #endif \n    \n    color += FIRE(uv1) * mask1;\n    color += FIRE(uv2) * mask2;\n    \n    color = sqrt(tanh(color*color));\n    pow(color, vec3(1./2.2));\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}