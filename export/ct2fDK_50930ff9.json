{"ver":"0.1","info":{"id":"ct2fDK","date":"1694504769","viewed":49,"name":"ray march attempt","username":"pugly","description":"First attempt at raymarching, not even close to done\nty to @iq i used a lot of your tutorials","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec3 CAMERA_POS = vec3(-1.,10.,0.);\n\nfloat sdSphere( vec3 p, float s ) {\n  return length(p)-s;\n}\n\n// polynomial smooth min\nfloat sminCubic( float a, float b, float k )\n{\n    float h = max( k-abs(a-b), 0.0 )/k;\n    return min( a, b ) - h*h*h*k*(1.0/6.0);\n}\n\nfloat map(in vec3 p) {\n\n    float d = p.y + sin(p.x*10.)/10. + cos(p.z*10.)/10.;\n    \n    float d2 = sdSphere(p-vec3(cos(iTime),sin(iTime), -0.3), .25+.15*sin(iTime * 2.323));\n    \n    return sminCubic(d,d2,1.) * 0.8;\n}\n\nfloat intersect( in vec3 ro, in vec3 rd )\n{\n\tconst float maxd = 10.0;\n\tfloat h = 1.0;\n    float t = 0.0;\n    for( int i=0; i<50; i++ )\n    {\n        if( h<0.001 || t>maxd ) break;\n\t    h = map( ro+rd*t );\n        t += h;\n    }\n\n    if( t>maxd ) t=-1.0;\n\t\n    return t;\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    vec3 eps = vec3(0.0002,0.0,0.0);\n\n\treturn normalize( vec3(\n           map(pos+eps.xyy) - map(pos-eps.xyy),\n           map(pos+eps.yxy) - map(pos-eps.yxy),\n           map(pos+eps.yyx) - map(pos-eps.yyx) ) );\n}\n\nconst vec3 lSource = vec3(1.3,0.2,1.);\nconst vec3 lCol = vec3(1.,1.,1.);\nfloat lPow = 1.;\n\nconst vec3 lSource2 = vec3(0.1, 0.5, 0.5);\nconst vec3 lCol2 = vec3(.2,0.,0.);\nfloat lPow2 = .4;\n\nconst vec3 fogCol = vec3(0.1, 0.5, 0.5);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (2.0*fragCoord-iResolution.xy) / iResolution.y;\n\n\tvec3 ro = vec3(0.0, 0.75, 1.0 );\n\tvec3 rd = normalize( vec3(p,-1.) );\n\n    vec3 col = vec3(0);\n    \n    float t = intersect(ro,rd);\n\n    if( t>0.0 )\n    {\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal(pos);\n\n        col += clamp(dot(lSource,nor) * lCol * lPow,0.,1.);\n        col += .5+.5*dot(lSource2,nor) * lCol2;\n        col = mix(col, fogCol, 1.-exp(-t*0.2));\n\t} else {\n    \n        col = vec3(0., 0.95-(p.y+.1)/1.3, 0.95-p.y/2.);\n    \n    }\n\n    col = sqrt(col);\n    \n    fragColor = vec4(col,1.);\n}","name":"Image","description":"","type":"image"}]}