{"ver":"0.1","info":{"id":"fdGczt","date":"1655346073","viewed":69,"name":"mnikn-grid-2","username":"mnikn","description":"grid","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["grid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"# define PI 3.14159\n\nfloat rect(vec2 uv, float size) {\n    float r = step(1.0 - size, abs(uv.x)) * step(1.0 - size, abs(uv.y));\n    return r;\n}\n\nvec2 rotate2d(vec2 uv, float angle) {\n    mat2 r = mat2(cos(angle), -sin(angle), sin(angle), cos(angle)) * mat2(uv.x, uv.y, 0, 0);\n    return vec2(r[0][0], r[0][1]);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5;\n    uv.x *= iResolution.x / iResolution.y;\n\n    // Time varying pixel color\n    vec3 col = vec3(0.0);\n    \n    \n    uv *= 4.0;\n    \n    float a = atan(uv.y, uv.x);\n    uv = rotate2d(uv, PI * 0.25);\n    \n    float r = rect(fract(uv), 0.9);\n    col += r;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}