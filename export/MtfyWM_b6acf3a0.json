{"ver":"0.1","info":{"id":"MtfyWM","date":"1510136625","viewed":390,"name":"Retinal Fire","username":"mplanck","description":"Playing around with advection and noise based distance between cell centers. Then I added sound, played around with some numbers, and got this. Best viewed in dark theme. Music Credit to Disasterpeace (Fez Soundtrack)","likes":20,"published":1,"flags":96,"usePreview":0,"tags":["fire","audio","advection","retinal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat g_cell_size;\nconst float NEURON_SIZE = 0.35;\nconst float ONE_SIXTH = .1666666;\n\n// assumes all inputs to hsl are normalized to be from 0 to 1\nvec3 hsl_to_rgb(vec3 hsl)\n{\n    float c = (1. - abs(2. * hsl.z - 1.0)) * hsl.y;\n    float x = c * (1. - abs(mod(hsl.x * 6., 2.) - 1.));\n    float m = hsl.z - c/2.;\n    \n    vec3 cp;\n    if (hsl.x < ONE_SIXTH)\n    {\n        cp = vec3(c, x, 0.);\n    }\n    else if (hsl.x < 2. * ONE_SIXTH)\n    {\n        cp = vec3(x, c, 0.);\n    }\n    else if (hsl.x < 3. * ONE_SIXTH)\n    {\n        cp = vec3(0., c, x);       \n    }\n    else if (hsl.x < 4. * ONE_SIXTH)\n    {\n        cp = vec3(0., x, c);\n    }\n    else if (hsl.x < 5. * ONE_SIXTH)\n    {\n        cp = vec3(x, 0., c);\n    }\n    else\n    {\n        cp = vec3(c, 0., x);\n    }\n    \n    vec3 rgb = vec3(cp.x + m, cp.y + m, cp.z + m);\n    \n    return rgb ;\n}\n\nvec3 convert_to_debug_color(float x)\n{        \n    const float num_steps = 40.;\n    // we want 1 to be super hot (red) and 0. to be super cool (purple)\n    float remapx = clamp(1. - x, 0., 1.);\n\n    // avoid looping back on the hue wheel since we want to differentiate red as 1\n    // purple as 0.\n    float stepx = .8 * floor(num_steps * remapx)/num_steps;    \n    float foot = fract(x * 10.);\n    \n    float fmask = 1.;\n    \n    vec3 hsl = vec3(stepx, .95, .5 - .1 * mod(stepx * num_steps, 2.) );\n    return fmask * hsl_to_rgb(hsl);       \n}\n\nvec2 cell_noise( in vec3 p )\n{\n    float offset = (iChannelResolution[1].x * iChannelResolution[1].y) * texelFetch(iChannel2, ivec2(p.xy), 0).x; \n    vec2 x = vec2(mod(offset, iChannelResolution[1].x),\n                  offset/iChannelResolution[1].y);\n    vec2 lookup = vec2(mod(x.x + p.z, iChannelResolution[1].x), \n                       x.y + (x.x + p.z)/iChannelResolution[1].x);\n    return textureLod( iChannel1, (lookup+ 0.5)/iChannelResolution[1].x, 0.0 ).xy;\n}\n\nvec2 cell_center(vec2 fragCoord)\n{    \n    vec2 floored_uv = floor(fragCoord/g_cell_size);\n    ivec2 noise_lookup = ivec2(floored_uv);    \n    \n    vec2 center = cell_noise(vec3(floored_uv, 1. *  iTime));\n    vec2 floored_coord = g_cell_size * floored_uv;    \n    return floored_coord + g_cell_size * (NEURON_SIZE + (1. - 2. * NEURON_SIZE) * center);\n}\n\nvec3 sawtooth(vec3 x)\n{\n    vec3 p = mod(x, vec3(2.));\n    return 2. * mix(p, 2. - p, step(vec3(1.), p)) - vec3(1.);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    g_cell_size = 10.;//iResolution.y * .02;\n    \n    vec2 lookup = vec2(fragCoord/g_cell_size);\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 floored_uv = floor(fragCoord/g_cell_size)/iResolution.xy;\n    \n    vec2 cellCenter = cell_center(fragCoord);\n   \n    float l = smoothstep(g_cell_size, \n                         0. * g_cell_size, \n                         length(fragCoord - cellCenter));\n    l *= l;\n    l += .1;\n    \n    vec3 p = texelFetch(iChannel0, ivec2(lookup), 0).rgb;\n    float x = .07 * p.r;\n    \n\tvec3 a = vec3(.7, .4, .4);\n    vec3 b = vec3(.5);\n    vec3 c = vec3(.5, 1., 1.);\n    vec3 d = vec3(0., .5, 1.);\n    d = .5 * iTime + mix(d, -3.8 + vec3(.0, .5, 1.), smoothstep(0., 1., uv.x));\n    \n    vec3 scol = (a + b * sin(c * x + d)) * l;                  \n    scol *= smoothstep(p.r, 0., .5);\n\t//scol = convert_to_debug_color(x) * l;\n\t    \n    vec2 vig = uv * (1. - uv.xy);    \n    scol *= pow(vig.x * vig.y * 16., .5);    \n\n    fragColor.rgb = 1.4 * pow(scol, vec3(.45));\n    fragColor.a = 1.0f;\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Md2SRR","filepath":"https://soundcloud.com/leodes/disasterpeace-adventure-fez","previewfilepath":"https://soundcloud.com/leodes/disasterpeace-adventure-fez","type":"musicstream","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nconst float NEURON_SIZE = 0.1;\n\nfloat g_cell_size;\nfloat g_neuron_threshold = 0.6;\n\nconst int FRAMES_BETWEEN_BURSTS = 60;\n\nvec2 cell_noise( in vec3 p )\n{\n    float offset = (iChannelResolution[1].x * iChannelResolution[1].y) * texelFetch(iChannel2, ivec2(p.xy), 0).x; \n    vec2 x = vec2(mod(offset, iChannelResolution[1].x),\n                  offset/iChannelResolution[1].y);\n    vec2 lookup = vec2(mod(x.x + p.z, iChannelResolution[1].x), \n                       x.y + (x.x + p.z)/iChannelResolution[1].x);\n    return textureLod( iChannel1, (lookup+ 0.5)/iChannelResolution[1].x, 0.0 ).xy;\n}\n\nvec2 cell_center(vec2 fragCoord)\n{    \n    vec2 floored_uv = floor(fragCoord/g_cell_size);\n    ivec2 noise_lookup = ivec2(floored_uv);    \n    \n    vec2 center = cell_noise(vec3(floored_uv, 1. *  iTime));\n    vec2 floored_coord = g_cell_size * floored_uv;    \n    return floored_coord + g_cell_size * (NEURON_SIZE + (1. - 2. * NEURON_SIZE) * center);\n}\n\n\nvec3 add_sound_color(float sound_signal, \n                     float sound_amount, \n                    int rand_offset,\n                    vec2 fragBounds,\n                    vec2 fragCoord) \n{\n    vec3 result = vec3(0.);\n    if (sound_signal > .5) \n    {        \n        int v = int(iFrame) + rand_offset;\n        ivec2 seed = ivec2(v%int(iChannelResolution[1]), v/int(iChannelResolution[1])); \n\n    \tvec3 impulse_sample = texelFetch(iChannel1, seed, 0).rgb;\n        ivec2 impulse_loc = ivec2(int(fragCoord.x), int(iResolution.y * impulse_sample.r));\n\n        if (impulse_loc == ivec2(fragCoord))\n        {\n            result = vec3(sound_amount) * sound_signal;\n        }\n    }\n\treturn result;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    \n    g_cell_size = 10.;\n    vec2 uv = (fragCoord/iResolution.xy);\n    \n    g_neuron_threshold = .5 + .3 * sin(.25 * iChannelTime[3] + 3.14);\n    vec2 fragBounds = vec2(iResolution/g_cell_size);\n    \n    vec3 scol = vec3(0.);        \n       \n    vec4 accum = vec4(0.);\n    vec3 this_color = texelFetch(iChannel0, ivec2(fragCoord), 0).rgb;\n    \n    float this_alpha = 1.;    \n    \n    if (iFrame%3 == 0)\n    {\n        this_alpha *= .8;\n        if (fragCoord.x < 0. || fragCoord.x >= fragBounds.x || \n            fragCoord.y < 0. || fragCoord.y >= fragBounds.y)\n        {\n            this_color = vec3(0., 0., 0.);\n        }     \n        else\n        {\n            vec2 this_center = cell_center(g_cell_size * fragCoord);\n            float this_value = this_color.r;\n\n            for (int i = -1; i <= 1; i += 1)\n            {\n                for (int j = -1; j <= 1; j += 1)\n                {\n                    if (i == 0 && j == 0) {\n                        continue;\n                    }\n\n                    vec2 neighbor_offset = vec2(i, j);\n                    vec2 neighbor_coord = fragCoord + neighbor_offset;\n                    vec3 neighbor_color = texelFetch(iChannel0, ivec2(neighbor_coord), 0).rgb;\n                    vec2 neighbor_center = cell_center(g_cell_size * (fragCoord + neighbor_offset));\n\n                    if (neighbor_coord.x < 0. || neighbor_coord.x >= fragBounds.x || \n                        neighbor_coord.y < 0. || neighbor_coord.y >= fragBounds.y)\n                    {\n                        neighbor_color = vec3(0.);\n                    }     \n\n                    float neighbor_value = neighbor_color.r;\n\n                    float diff = neighbor_value - this_value;\n                    float l = max(0.1, length(this_center - neighbor_center)) / g_cell_size;            \n                    l *= l * l;\n                    diff *= .1 / l;\n                    diff = clamp(diff, 0., 1.);\n                    if (diff > g_neuron_threshold) {\n                        accum.rgb += neighbor_color * diff;\n                        accum.a += diff;\n                    } else if (diff < -g_neuron_threshold) {\n                        this_alpha -= diff;\n                    }\n\n                }\n            }\n        }\n    }\n    \n    this_alpha = max(0.0, this_alpha);\n    // the system slowly loses energy\n    accum.rgb += .98 * this_color * this_alpha;\n    accum.a += this_alpha;\n\n    accum.rgb /= accum.a;\n\n    scol = max(vec3(0.), accum.rgb);\n\n    float column_size = 6.;\n    vec2 clamped_fragCoord = vec2(floor(fragCoord.x/column_size) * column_size, fragCoord.y);\n    vec2 clamped_uv = clamped_fragCoord/fragBounds.xy;\n    float sound_signal = texture(iChannel3, vec2(clamped_uv.x, 0.)).r;    \n    int rand_offset = 127 * int(clamped_fragCoord.x);\n    \n    float sound_amount = (50. + 150. * clamped_uv.x) * sound_signal;\n    if (sound_signal > .1) \n    {        \n        int v = int(iFrame) + rand_offset;\n        ivec2 seed = ivec2(v%int(iChannelResolution[1]), \n                           v/int(iChannelResolution[1])); \n    \tvec3 impulse_sample = texelFetch(iChannel1, seed, 0).rgb;\n        \n        ivec2 impulse_loc = ivec2(int(clamped_fragCoord.x + column_size * impulse_sample.r), \n                                  int(iResolution.y * impulse_sample.g));\n\n        if (impulse_loc == ivec2(fragCoord))\n        {\n            scol += sound_amount * sound_signal;\n        }\n    }\n    \n    \n    fragColor = vec4(scol,1.0);\n}\n","name":"Buf A","description":"","type":"buffer"}]}