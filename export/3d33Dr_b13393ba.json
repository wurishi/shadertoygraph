{"ver":"0.1","info":{"id":"3d33Dr","date":"1568162559","viewed":435,"name":"Total internal reflection sphere","username":"stduhpf","description":"i was experimenting and tought this looks cool, so i share it","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["raytracing","refraction","fresnel"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 iSphere(vec3 sp, float sr,vec3 ro, vec3 rd){\n    vec3 origineRelative = ro-sp;\n    float demi_b = dot(rd,origineRelative);\n    float moins_c = sr*sr-dot(origineRelative,origineRelative);\n    float quart_delta = demi_b*demi_b+moins_c;\n    if(quart_delta<0.)\n        return vec4(0,0,0,-1.);\n    float sqd= sqrt(quart_delta);\n    float d = -demi_b-sqd;\n    if(d<0.)\n        d+=sqd+sqd;\n    return vec4(d>0.?normalize(rd*d+origineRelative):vec3(0),d>0.?d:-1.);\n}\t\t\t\n\nvec3 refrac(vec3 I, vec3 N, float eta){//slight modification of the default refract function\n    float k = 1.0 - eta * eta * (1.0 - dot(N, I) * dot(N, I));\n    vec3 R;\n    if (k < 0.0)\n        R = reflect(I,N);\n    else\n        R = eta * I - (eta * dot(N, I) + sqrt(k)) * N;\n\treturn R;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 uv = 2.*fragCoord-iResolution.xy;\n    \n   \tfloat Fov = 1.25;\n    float t = iTime*.3;\n    vec3 ro = vec3(-sin(t),0,-cos(t))*3.;\n    vec3 rd = normalize(vec3(uv,iResolution.y*Fov));\n\n    rd.xz *= mat2(cos(t),sin(t),-sin(t),cos(t));\n    \n    vec3 col = pow(texture(iChannel0,rd).rgb,vec3(2.4));\n\n    vec4 ray =  iSphere(vec3(0,0,0),1.,ro,rd);\n    \n    if(ray.a>0.){\n        vec3 n = ray.rgb;\n        float ior = 1./1.325;//it's like an air bubble in water, except it's a perfect sphere, and th air is colorised\n        ro = ro+ray.a*rd;\n        \n        float cti = dot(rd,n);\n        vec3 rdd = reflect(rd,n);\n        rd = refrac(rd,n,1./ior);\n        \n        float ctt = dot(rd,n);\n        float fresnel = (cti-ior*ctt)/(cti+ior*ctt);\n        fresnel*=fresnel;\n        float fresnel2 = (ior*ctt-cti)/(cti+ior*ctt);\n        fresnel =clamp(.5*(fresnel+fresnel2*fresnel2),0.,1.);\n        \n        col = pow(texture(iChannel0,rdd).rgb,vec3(2.4));\n    \tray =  iSphere(vec3(0,0,0),1.,ro+.0001*rd,rd);\n        if(ray.a>0.){\n        \trd = refrac(rd,-ray.rgb,ior);\n            col = mix(\n                mix(pow(texture(iChannel0,rd).rgb,vec3(2.4)), vec3(.1,.2,.3),1.-exp2(-ray.a*.5))\n                      ,col,fresnel);\n        }\n    }\n\n\n    fragColor = vec4(pow(col,vec3(1./2.4)),1.);\n}","name":"Image","description":"","type":"image"}]}