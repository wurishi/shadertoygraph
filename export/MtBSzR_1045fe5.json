{"ver":"0.1","info":{"id":"MtBSzR","date":"1440961295","viewed":2161,"name":"curl page","username":"casty","description":"Play with the mouse and the radius parameter.","likes":38,"published":1,"flags":0,"usePreview":1,"tags":["curl","transition"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"// Created by Eduardo Castineyra - casty/2015\n// Creative Commons Attribution 4.0 International License\n\n#define PI 3.141592\nconst float radius = 0.1;\n#define DIST 2\nvec3 cyl = vec3(0.0);\n\n/// 1D function x: cylFun(t); y: normal at that point.\nvec2 curlFun(float t, float maxt){\n\tvec2 ret = vec2(t, 1.0);    \n    if (t < cyl[DIST] - radius)\n        return ret;\t\t\t\t\t/// Before the curl\n\tif (t > cyl[DIST] + radius)\n        return vec2(-1.0);\t\t\t/// After the curl\n    \n    /// Inside the curl\n    float a = asin((t - cyl[DIST]) / radius);\n    float ca = -a + PI;\n    ret.x = cyl[DIST] + ca * radius;\n    ret.y = cos(ca);\n    \n    if (ret.x < maxt)  \n        return ret;\t\t\t\t\t/// We see the back face\n\n    if (t < cyl[DIST])\n        return vec2(t, 1.0);\t\t/// Front face before the curve starts\n    ret.y = cos(a);\n    ret.x = cyl[DIST] + a * radius;\n    return ret.x < maxt ? ret : vec2(-1.0);  /// Front face curve\n\t}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xx;\n    vec2 ur = vec2(1.0, iResolution.y/iResolution.x);\n    vec2 mouse = (iMouse.x < 0.001? vec2((sin(iTime)*.5+1.0) * 300.0) : iMouse.xy)/iResolution.xx;\n    float d = length(mouse * (1.0 + 4.0*radius)) - 2.0*radius;\n    cyl = vec3(normalize(mouse), d);\n    \n    d = dot(uv, cyl.xy);\n    vec2 end = abs((ur - uv) / cyl.xy);\n    float maxt = d + min(end.x, end.y);\n    vec2 cf = curlFun(d, maxt);\n    vec2 tuv = uv + cyl.xy * (cf.x - d);\n    \n\tfloat shadow = 1.0 - smoothstep (0.0, radius * 2.0, -(d - cyl[DIST]));\n   \tshadow *= (smoothstep(-radius, radius, (maxt - (cf.x + 1.5 * PI * radius + radius))));\n    vec4 curr = texture(iChannel0, tuv / ur, -100.0);\n    curr = cf.y > 0.0 ? curr * cf.y  * (1.0 - shadow): (curr * 0.25 + 0.75) * (-cf.y);\n    shadow = smoothstep (0.0, radius * 2.0, (d - cyl[DIST]));\n    vec4 next = texture(iChannel1, uv / ur, -100.0) * shadow;\n    fragColor = cf.x > 0.0 ? curr : next;\n}","name":"Image","description":"","type":"image"}]}