{"ver":"0.1","info":{"id":"Nl3GD8","date":"1636048744","viewed":314,"name":"QR Video","username":"athlete","description":"Video that looks like a QR code. Based on my dot matrix shader: https://www.shadertoy.com/view/XldBRM","likes":7,"published":3,"flags":0,"usePreview":0,"tags":["video","qr","qrcode"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float pixSizeX = 8.0; //width of QR in pixel\nconst float pixSizeY = 8.0; //height of QR in pixel\nfloat pixThreshold = 0.7; //specify at what threshold a pixel will become either on or off\nfloat markerSize = 9.0; //unit is QR Cells\n\nvec3 Marker(float x, float y)\n{\n    vec3 retVal = vec3(0.0, 0.0, 0.0); \n    vec3 black = vec3(-1.0, -1.0, -1.0);\n    vec3 white = vec3(1.0, 1.0, 1.0);       \n    \n    int size = int(markerSize/2.0f);\n    for(int r = 0; r<=size; r++)\n    {\n     if( (x == float(r)*pixSizeX && y <= (markerSize-float(r))*pixSizeY && y >= float(r)*pixSizeY)\n      ||(x == (markerSize-float(r))*pixSizeX && y <= (markerSize-float(r))*pixSizeY && y >= float(r)*pixSizeY)\n      ||(y == float(r)*pixSizeY && x < (markerSize-float(r))*pixSizeX && x >= float(r)*pixSizeX)\n      ||(y == (markerSize-float(r))*pixSizeY && x <= (markerSize-float(r))*pixSizeX && x >= float(r)*pixSizeX)\n     )\n        retVal = ((r % 2 > 0) || r == size) ? black : white;\n    }\n    \n    return retVal;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //indexing, translating pixels to cells\n    float indexX = fragCoord.x - .5;\n    float indexY = fragCoord.y - .5;\n    float cellX = floor(indexX / pixSizeX)* pixSizeX;\n    float cellY = floor(indexY / pixSizeY)* pixSizeY;    \n  \n    //sample texture color and create QR pixel from video\n    vec2 currUV = vec2(cellX/iResolution.x, cellY/iResolution.y);\n    vec3 currTexVal = texture(iChannel0, currUV).rgb; \n    float texAvg = 0.3*currTexVal.r + 0.59*currTexVal.g + 0.11*currTexVal.b;\n    \n    //switch cells on/off\n    texAvg = step(pixThreshold, 1.0 - texAvg);\n    \n    //set QR pixels\n    vec3 col = texAvg > 0.0 ? vec3(0.0, 0.0, 0.0) : vec3(1.0, 1.0, 1.0);\n    \n    //Add QR Corner Markers\n    col += Marker(cellX, cellY);\n    col += Marker(cellX, iResolution.y - pixSizeY - cellY);\n    col += Marker(cellX - iResolution.x + (markerSize+1.0)*pixSizeX, iResolution.y - pixSizeY - cellY);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}