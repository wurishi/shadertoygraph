{"ver":"0.1","info":{"id":"XscXWl","date":"1461953858","viewed":739,"name":"Who can you call?","username":"omgs","description":"(tested on Chrome64/Win)\nNot a good example of movement.  I only wanted to get this idea out of my mind.  Wanted the scene to be larger like the 80`s cartoon intro with buildings etc , but maybe some other time. This is what I ended up with.","likes":10,"published":1,"flags":96,"usePreview":0,"tags":["3d","model","ghostbusters"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"MsB3Rh","filepath":"https://soundcloud.com/newworldbass1/the-living-tombstone-the-ghostbusters-theme-remix","previewfilepath":"https://soundcloud.com/newworldbass1/the-living-tombstone-the-ghostbusters-theme-remix","type":"musicstream","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Made by omgs 2016\n\n\nvoid doCamera( out vec3 camPos, out vec3 camTar, in float time, in float mouseX )\n{\n    float an =  -1.6;\n\tcamPos = vec3(-3.5*sin(an), .8 ,-3.5*cos(an));\n    camTar = vec3(0.0,-0.5,0.0);\n}\n\nfloat sdPlane(in vec3 p) {\n    return p.y;\n}\n\nfloat sdSphere(in vec3 p, in float r) {\n    return length(p)-r;\n}\n\nfloat sdCylinder( vec3 p, vec2 h ) {\n    vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat sdEllipsoid( in vec3 p, in vec3 r ) {\n    return (length( p/r ) - 1.0) * min(min(r.x,r.y),r.z);\n}\n\nfloat udRoundBox( vec3 p, vec3 b, float r ) {\n    return length(max(abs(p)-b,0.0))-r;\n}\n\nfloat smin( float a, float b, float k ) {\n    float h = clamp( 0.5 + 0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat smax( float a, float b, float k )\n{\n\tfloat h = clamp( 0.5 + 0.5*(b-a)/k, 0.0, 1.0 );\n\treturn mix( a, b, h ) + k*h*(1.0-h);\n}\n\nvec3 rotx(vec3 p, float rx) {\n    float sinx = sin(rx);\n    float cosx = cos(rx);\n    return mat3(1., 0., 0., 0., cosx, sinx, 0., -sinx, cosx) * p;\n}\n\nvec3 roty(vec3 p, float ry) {\n    float sinx = sin(ry);\n    float cosx = cos(ry);\n    return mat3(cosx, 0., -sinx, 0., 1., 0., sinx, 0., cosx) * p;\n}\n\nvec3 rotz(vec3 p, float rz) {\n    float sinx = sin(rz);\n    float cosx = cos(rz);\n    return mat3(cosx, sinx, 0., -sinx, cosx, 0., 0., 0., 1.) * p;\n}\n\nvec3 rot(vec3 p, vec3 r) {\n    return rotx(roty(rotz(p, r.z), r.y), r.x);\n}\n\n\nvec2 doModel( vec3 p )\n{\n    \n    const int arrsize=1;\n    float scene[arrsize];\n    float id=-1.;\n    vec3 porg=p;\n    \n    p.y-=0.7;\n    \n    float time=iDate.w*6.;\n    float legstretch = .2+cos(time)*1.2;\n    \n    p.z-=.6;\n     p.z -= cos(p.y*1.5)*0.15;\n    float s = sdEllipsoid( rotz(p+vec3(-0.2+legstretch,.2,0.1),cos(time)*0.5), vec3(0.5,1.5,0.5) );\n\n    p=porg; p.z-=.6; p.y-=0.7;\n    p=rotz(p,cos(time)*0.3);\n    s = smin( sdEllipsoid( rotz(p+vec3(-0.6+legstretch,1.3,0.) ,.1+cos(time)*0.5), vec3(.7,.3,.5) ) , s, 0.1 );\n    \n    s = smin( sdEllipsoid( rotz(p+vec3(-1.1+legstretch,1.18,-0.1) ,.1+cos(time)*.5), vec3(.8,.7,.5)*0.3 ) , s, 0.3 );\n    \n    p=porg;\n    \n    p.z+=0.6; p.y-=0.7;\n    p.z += cos(p.y*1.5)*0.15;\n    s = min(s, sdEllipsoid( rotz(p+vec3(0.2-legstretch,.2,0.1),-cos(time)*0.5), vec3(0.5,1.5,0.5) ) );\n    \n    p=porg; p.z+=.7; p.y-=0.7;\n    p=rotz(p,-cos(time)*0.3); \n    s = smin( sdEllipsoid( rotz(p+vec3(-0.3-legstretch,1.3,0.) ,.1-cos(time)*.5), vec3(.7,.3,.5) ) , s, 0.1 );\n    \n    s = smin( sdEllipsoid( rotz(p+vec3(-0.9-legstretch,1.3,0.1) ,.1-cos(time)*.5), vec3(.8,.7,.5)*0.3 ) , s, 0.3 );\n    \n    s=smin(sdEllipsoid(p+vec3(0.3,-0.8,-0.5),vec3(1.3,1.,1.3)), s, 0.3 );\n    \n    scene[0] = s+0.05*-p.y;\n    \n    float test=9999.0;  //return nearest object for material id\n    \n    for(int i=0;i<arrsize;i++){\n        float test2=scene[i];\n        if(test2<test)\n        {\n            test=test2; \n         \tid = float(i);\n        }\n    }\n    \n    \n    return vec2(test,id);\n}\n\nvec3 doMaterial( in vec3 pos, in vec3 nor )\n{\n    vec2 obj = doModel(pos);\n    vec3 col=vec3(0.);\n    \n    if(obj.y==0.) col = vec3(.4);\n\n    return col;\n}\n\nfloat calcSoftshadow( in vec3 ro, in vec3 rd );\n\nvec3 doLighting( in vec3 pos, in vec3 nor, in vec3 rd, in float dis, in vec3 mal )\n{\n    vec3 lin = vec3(0.0);\n    vec3  lig = normalize(vec3(1.0,0.7,-0.9));\n    float dif = max(dot(nor,lig),0.0);\n    float sha = 0.0; if( dif>0.01 ) sha=calcSoftshadow( pos+0.01*nor, lig )*0.2;\n    lin += dif*vec3(4.00,4.00,4.00)*sha;\n\n    lin += vec3(0.50,0.50,0.50);\n\n    vec3 col = mal*lin;\n\n\tcol *= exp(-0.01*dis*dis);\n\n    return col;\n}\n\nfloat calcIntersection( in vec3 ro, in vec3 rd )\n{\n\tconst float maxd = 10.0;          \n\tconst float precis = 0.001;       \n    float h = precis*2.0;\n    float t = 0.0;\n\tfloat res = -1.0;\n    for( int i=0; i<65; i++ )        \n    {\n        if( h<precis||t>maxd ) break;\n\t    h = doModel( ro+rd*t ).x;\n        t += h;\n    }\n\n    if( t<maxd ) res = t;\n    return res;\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    const float eps = 0.002;            \n\n    const vec3 v1 = vec3( 1.0,-1.0,-1.0);\n    const vec3 v2 = vec3(-1.0,-1.0, 1.0);\n    const vec3 v3 = vec3(-1.0, 1.0,-1.0);\n    const vec3 v4 = vec3( 1.0, 1.0, 1.0);\n\n\treturn normalize( v1*doModel( pos + v1*eps ).x + \n\t\t\t\t\t  v2*doModel( pos + v2*eps ).x + \n\t\t\t\t\t  v3*doModel( pos + v3*eps ).x + \n\t\t\t\t\t  v4*doModel( pos + v4*eps ).x );\n}\n\nfloat calcSoftshadow( in vec3 ro, in vec3 rd )\n{\n    float res = 1.0;\n    float t = 0.0005;                 \n\tfloat h = 1.0;\n    for( int i=0; i<13; i++ )        \n    {\n        h = doModel(ro + rd*t).x;\n        res = min( res, 64.0*h/t ); \n\t\tt += clamp( h, 0.02, 2.0 );   \n    }\n    return clamp(res,0.0,1.0);\n}\n\nmat3 calcLookAtMatrix( in vec3 ro, in vec3 ta, in float roll )\n{\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(sin(roll),cos(roll),0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    return mat3( uu, vv, ww );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (-iResolution.xy + 2.0*fragCoord.xy)/iResolution.y;\n    vec2 m = iMouse.xy/iResolution.xy;\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    \n    // camera movement\n    vec3 ro, ta;\n    doCamera( ro, ta, iTime, m.x );\n\n    // camera matrix\n    mat3 camMat = calcLookAtMatrix( ro, ta, 0.0 ); \n    \n\t// create view ray\n\tvec3 rd = normalize( camMat * vec3(p.xy,2.) );\n\tvec3 col=vec3(0);\n\t// raymarch\n    float t = calcIntersection( ro, rd );\n    if( t>-0.5 )\n    {\n        // geometry\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal(pos);\n\n        // materials\n        vec3 mal = doMaterial( pos, nor );\n\n        col = doLighting( pos, nor, rd, t, mal );\n\t}\n \n\tvec3 bufA = texture(iChannel0,uv).xyz;\n    // gamma\n\tcol = pow( clamp(col,0.0,1.0), vec3(0.4545) );\n\t   \n    fragColor = vec4( col+bufA, 1.0 );\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Made by omgs 2016\n\nvoid doCamera( out vec3 camPos, out vec3 camTar, in float time, in float mouseX )\n{\n    float an=0.;\n    camPos = vec3(2.*sin(an), .05 ,2.*cos(an));\n    \n    camTar = vec3(0.,-1.4,0.0);\n\t\n}\n\n\nvec3 doBackground( void )\n{\n    return vec3( 0.0, 0.0, .9)+0.1;\n}\nfloat sdPlane(in vec3 p) {\n    return p.y;\n}\n\nfloat sdSphere(in vec3 p, in float r) {\n    return length(p)-r;\n}\n\nfloat sdCylinder( vec3 p, vec2 h ) {\n    vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat sdbellyipsoid( in vec3 p, in vec3 r ) {\n    return (length( p/r ) - 1.0) * min(min(r.x,r.y),r.z);\n}\n\n\nfloat udRoundBox( vec3 p, vec3 b, float r ) {\n    return length(max(abs(p)-b,0.0))-r;\n}\n\nfloat smin( float a, float b, float k ) {\n    float h = clamp( 0.5 + 0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat smax( float a, float b, float k )\n{\n\tfloat h = clamp( 0.5 + 0.5*(b-a)/k, 0.0, 1.0 );\n\treturn mix( a, b, h ) + k*h*(1.0-h);\n}\nvec3 rotx(vec3 p, float rx) {\n    float sinx = sin(rx);\n    float cosx = cos(rx);\n    return mat3(1., 0., 0., 0., cosx, sinx, 0., -sinx, cosx) * p;\n}\n\nvec3 roty(vec3 p, float ry) {\n    float sinx = sin(ry);\n    float cosx = cos(ry);\n    return mat3(cosx, 0., -sinx, 0., 1., 0., sinx, 0., cosx) * p;\n}\n\nvec3 rotz(vec3 p, float rz) {\n    float sinx = sin(rz);\n    float cosx = cos(rz);\n    return mat3(cosx, sinx, 0., -sinx, cosx, 0., 0., 0., 1.) * p;\n}\n\n\nvec3 rot(vec3 p, vec3 r) {\n    return rotx(roty(rotz(p, r.z), r.y), r.x);\n}  \n#define BRICKWIDTH 1.0\n#define BRICKHEIGHT 1.\n#define MORTARTHICKNESS 0.16\n#define BMWIDTH (BRICKWIDTH + MORTARTHICKNESS)\n#define BMHEIGHT (BRICKHEIGHT + MORTARTHICKNESS)\n#define MWF (MORTARTHICKNESS * 0.5 / BMWIDTH)\n#define MHF (MORTARTHICKNESS * 0.5 / BMHEIGHT)\n\nvec2 getBrickFeatureCoordinate(in vec3 p){\n    \nvec2 textureCoordinates = p.xz / vec2(BMWIDTH, BMHEIGHT);\n    \n    textureCoordinates.y +=iDate.w*1.7;\n    if (mod(textureCoordinates.y * 0.5, 1.0) > 0.5)\n    {\n        textureCoordinates.x += 0.5;\n    }\n    \n    float xBrick = floor(textureCoordinates.x);\n    textureCoordinates.x -= xBrick;\n    float yBrick = floor(textureCoordinates.y);\n    textureCoordinates.y -= yBrick;\n    \n    return textureCoordinates;\n}\nfloat calculateBumpHeight(in vec3 p){\n    vec2 textureCoordinates = getBrickFeatureCoordinate(p);\n\n    float hu, hv;\n    \n    hu = smoothstep(0.0, MWF, textureCoordinates.x) - smoothstep(1.0-MWF, 1.0, textureCoordinates.x);\n    hv = smoothstep(0.0, MWF, textureCoordinates.y) - smoothstep(1.0-MWF, 1.0, textureCoordinates.y);\n    \n    return hu*hv;\n}\n\nvec2 doModel( vec3 p )\n{\n   vec3 porg = p ;\n    float s = calculateBumpHeight(p*3.);\n    p.y+=cos(p.z*.66+3.)*.25;\n    float b = length( texture(iChannel0,p.xz*2.5+0.5).xyz );\n    if(b>0.) b = -.9;\n    float floor = length(0.3+p.y*0.5+s*0.005*b);\n\n    \n    return vec2(floor,2.);\n}\n\n\nvec3 doMaterial( in vec3 pos, in vec3 nor )\n{\n    pos.z+=iDate.w*.67;\n    vec3  lig = normalize(vec3(1.0,0.7,0.9));\n    vec3 col = texture(iChannel0,pos.xz*0.5+0.5).xyz*dot(nor,lig);\n    \n    if(pos.y<-0.3)\n    col *= vec3(0.1,0.1,1.5);\n    \n    return col;\n}\n\n//------------------------------------------------------------------------\n// Lighting\n//------------------------------------------------------------------------\nfloat calcSoftshadow( in vec3 ro, in vec3 rd );\n\nvec3 doLighting( in vec3 pos, in vec3 nor, in vec3 rd, in float dis, in vec3 mal )\n{\n    vec3 lin = vec3(0.0);\n\n    vec3  lig = normalize(vec3(1.0,0.7,0.9));\n    float dif = max(dot(nor,lig),0.0);\n    float sha = 0.0; if( dif>0.01 ) sha=calcSoftshadow( pos+0.01*nor, lig );\n    lin += dif*vec3(4.00,4.00,4.00)*sha;\n\n    lin += vec3(0.50,0.50,0.50);\n\n    vec3 col = mal*lin;\n\n\tcol *= exp(-0.01*dis*dis);\n\n    return col;\n}\n\nfloat calcIntersection( in vec3 ro, in vec3 rd )\n{\n\tconst float maxd = 8.0;          \n\tconst float precis = 0.003;      \n    float h = precis*2.0;\n    float t = 0.0;\n\tfloat res = -1.0;\n    for( int i=0; i<50; i++ )        \n    {\n        if( h<precis||t>maxd ) break;\n\t    h = doModel( ro+rd*t ).x;\n        t += h;\n    }\n\n    if( t<maxd ) res = t;\n    return res;\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    const float eps = 0.002;            \n    const vec3 v1 = vec3( 1.0,-1.0,-1.0);\n    const vec3 v2 = vec3(-1.0,-1.0, 1.0);\n    const vec3 v3 = vec3(-1.0, 1.0,-1.0);\n    const vec3 v4 = vec3( 1.0, 1.0, 1.0);\n\n\treturn normalize( v1*doModel( pos + v1*eps ).x + \n\t\t\t\t\t  v2*doModel( pos + v2*eps ).x + \n\t\t\t\t\t  v3*doModel( pos + v3*eps ).x + \n\t\t\t\t\t  v4*doModel( pos + v4*eps ).x );\n}\n\nfloat calcSoftshadow( in vec3 ro, in vec3 rd )\n{\n    float res = 1.0;\n    float t = 0.0005;                \n\tfloat h = 1.0;\n    for( int i=0; i<0; i++ )        \n    {\n        h = doModel(ro + rd*t).x;\n        res = min( res, 64.0*h/t );  \n\t\tt += clamp( h, 0.02, 2.0 );  \n    }\n    return clamp(res,0.0,1.0);\n}\n\nmat3 calcLookAtMatrix( in vec3 ro, in vec3 ta, in float roll )\n{\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(sin(roll),cos(roll),0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    return mat3( uu, vv, ww );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (-iResolution.xy + 2.0*fragCoord.xy)/iResolution.y;\n    vec2 m = iMouse.xy/iResolution.xy;\n\n    \n    // camera movement\n    vec3 ro, ta;\n    doCamera( ro, ta, iTime, m.x );\n\n    // camera matrix\n    mat3 camMat = calcLookAtMatrix( ro, ta, 0.0 );  // 0.0 is the camera roll\n    \n\t// create view ray\n\tvec3 rd = normalize( camMat * vec3(p.xy,2.0) ); // 2.0 is the lens length\n\n    \n\n\tvec3 col = doBackground();\n\n\t// raymarch\n    float t = calcIntersection( ro, rd );\n    if( t>-0.5 )\n    {\n        // geometry\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal(pos);\n\n        // materials\n        vec3 mal = doMaterial( pos, nor );\n\t\t    vec3  lig = normalize(vec3(1.0,0.7,0.9));\n        col = doLighting( pos, nor, rd, t, mal )*dot(nor,lig);\n\t}\n\n    // gamma\n\tcol = pow( clamp(col,0.0,1.0), vec3(0.4545) );\n\t   \n    fragColor = vec4( col, 1.0 );\n}","name":"Buf A","description":"","type":"buffer"}]}