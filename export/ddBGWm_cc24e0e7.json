{"ver":"0.1","info":{"id":"ddBGWm","date":"1667678693","viewed":120,"name":"Colorwheel 1","username":"jwdj","description":"Colorpicker","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d","rgb","hsv","colorwheel"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265358979           // same as acos(-1.)\n#define TAU (PI * 2.)\n\n// https://en.wikipedia.org/wiki/Sine_and_cosine\n\nfloat sdCircle(vec2 p, float radius)\n{\n    return length(p) - radius;\n}\n\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\nconst vec4 hsv2rgb_K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 hsv2rgb(vec3 c) {\n  vec3 p = abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www);\n  return c.z * mix(hsv2rgb_K.xxx, clamp(p - hsv2rgb_K.xxx, 0.0, 1.0), c.y);\n}\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\n//  Macro version of above to enable compile-time constants\n#define HSV2RGB(c)  (c.z * mix(hsv2rgb_K.xxx, clamp(abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www) - hsv2rgb_K.xxx, 0.0, 1.0), c.y))\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const float BoxHeight = 1.1; \n    \n    // Normalized pixel coordinates (height from -1 to 1)\n    vec2 uv = (2. * fragCoord - iResolution.xy) / iResolution.y;\n\n    vec2 mouse = (2. * iMouse.xy - iResolution.xy) / iResolution.y;\n\n\n    float d = abs(sdCircle(uv, 0.9));\n    float hue = atan(uv.x, uv.y) / TAU;\n    float hueMouse = atan(mouse.x, mouse.y) / TAU;\n    \n    vec3 color = mix( vec3(0.), HSV2RGB(vec3(hue, 1., 1.)), smoothstep( 4. / iResolution.y, 0., d - BoxHeight * 0.08) );\n\n    if (abs(uv.x) < (BoxHeight / 2.) && abs(uv.y) < (BoxHeight / 2.))\n    {\n        // normalize saturation\n        float sat = (uv.x + (BoxHeight / 2.)) / BoxHeight;\n        float lum = (uv.y + (BoxHeight / 2.)) / BoxHeight;\n        \n        color = HSV2RGB(vec3(hueMouse, sat, lum));\n    }    \n    // Gamma correction (monitor shows most colors too dark)\n    const float gamma = 2.0;\n    //color = pow(color, vec3(1.0 / gamma));\n    \n    // Output to screen\n    fragColor = vec4(color,1.0);\n}\n","name":"Image","description":"","type":"image"}]}