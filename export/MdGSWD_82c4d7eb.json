{"ver":"0.1","info":{"id":"MdGSWD","date":"1464362754","viewed":1257,"name":"Predator Thermal Vision (III)","username":"maldicion069","description":"Simulating Predator Thermal Vision (not perfect)\nThird version with heat function","likes":16,"published":1,"flags":2,"usePreview":0,"tags":["crt","postprocess","webcam","thermal","predator"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 heat(float v) {\n    float value = 1.0 - v;\n    return (0.5+0.5*smoothstep(0.0, 0.1, value))*vec3(\n      \tsmoothstep(0.5, 0.3, value),\n      \tvalue < 0.3 ? smoothstep(0.0, 0.3, value) : smoothstep(1.0, 0.6, value),\n    \tsmoothstep(0.4, 0.6, value)\n\t);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    float sum = iTimeDelta;\n    vec3 color = texture(iChannel0, uv).rgb;\n    sum += smoothstep(color.z, 0.0, distance(color.xy, uv));\n    \n    fragColor = vec4(heat(sum), 1.0);    \n}","name":"Image","description":"","type":"image"}]}