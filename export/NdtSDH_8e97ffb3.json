{"ver":"0.1","info":{"id":"NdtSDH","date":"1633066556","viewed":83,"name":"ray march sphere","username":"dixie","description":"ray marched sphere","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float map(vec3 pos) {\n    vec4 sphere = vec4(0.0, 0.0, 2.0, 0.75);\n    return distance(pos, sphere.xyz) - sphere.w;\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    vec2 e = vec2(1.0,-1.0)*0.5773;\n    const float eps = 0.0005;\n    return normalize( e.xyy*map( pos + e.xyy*eps ) + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx*eps ) + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy*eps ) + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx*eps ) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // center coordinates\n    vec2 uv = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n\n    // setup camera\n    vec3 camera_origin = vec3(0.0, 1.0, 0.0);\n    vec3 look_at_point = vec3(0.0, 0.0, 2.0);\n    float distance_to_image_plane = 1.5;\n    \n    // camera coordinate frame\n    vec3 gaze = look_at_point - camera_origin;\n    vec3 ww = normalize(gaze);\n    vec3 uu = normalize(cross(vec3(0, 1.0, 0), ww));\n    vec3 vv = normalize(cross(ww, uu));\n    \n\n    \n    // ray direction\n    vec3 ray_direction = normalize(uv.x * uu + uv.y * vv + ww * distance_to_image_plane);\n    \n    // ray march\n    float ray_march_distance = 0.0;\n    int max_ray_march_iterations = 256;\n    float min_distance = 0.001;\n    float max_distance = 500.0;\n    for (int i = 0; i < max_ray_march_iterations; i++) {\n        vec3 p = ray_march_distance * ray_direction + camera_origin;\n        float distance_to_scene = map(p);\n        ray_march_distance += distance_to_scene;\n        if (distance_to_scene < min_distance || ray_march_distance > max_distance)\n            break;\n\n    }\n    \n    // Black background\n    vec3 col = vec3(0.0);\n    \n    \n    // lamp\n    if (ray_march_distance < max_distance) {\n        vec4 lamp = vec4(cos(iTime), 4., sin(iTime), 1);\n        vec3 p = ray_march_distance * ray_direction + camera_origin;\n        vec3 n = calcNormal(p);\n        float illum = clamp(dot(n, normalize(lamp.xyz - p)), 0.0, 1.0) * lamp.w;\n        //illum = sqrt(illum);\n        col += illum;\n    }\n    \n\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}