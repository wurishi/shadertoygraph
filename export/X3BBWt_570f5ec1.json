{"ver":"0.1","info":{"id":"X3BBWt","date":"1730058200","viewed":42,"name":"Tutorial #4 - Torus Inside Trip","username":"DGMKPixy","description":"Nuevo tutorial del video de The Art of Code: https://www.youtube.com/watch?v=rA9NmBRqfjI","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["torus"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float DistTorus(vec3 p, float fat, float radius)\n{\n    return length(vec2(length(p.xz)-radius, p.y)) - fat;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    float t = iTime * 0.2;\n    \n    uv *= mat2(cos(t), -sin(t), sin(t), cos(t));\n\n    vec3 ro = vec3(0.,0.,-1);\n    vec3 lookat = mix( vec3(0.), vec3(-1, 0., -1), sin(t*1.56)*.5+.5);\n    float zoom = mix(.2,.7, sin(t)*.5+.5);\n    \n    vec3 f = normalize(lookat-ro),\n        r = normalize(cross(vec3(0,1.,0),f)),\n        u = normalize(cross(f, r)),\n        c = ro + f*zoom,\n        i = c + r*uv.x + u*uv.y,\n        rd = normalize(i-ro);\n    \n    float fat = mix(.3, 1.5, sin(t*.4)*.5+.5);\n    float distOrigin, distSurface;\n    vec3 p;\n    for(int i = 0; i <100; i++)\n    {\n        p = ro + rd*distOrigin;\n        distSurface = -DistTorus(p, fat, 1.);\n\n        if(distSurface < .001) break;\n        distOrigin += distSurface;\n    }\n    \n    vec3 col = vec3(0.);\n    \n    if( distSurface < .001)\n    {\n        float x = atan(p.x, p.z)+t*.5;\n        float y = atan(length(p.xz)-1., p.y);\n        \n        float bands = sin(y*10. + x*20.);\n        float ripples = sin((x*10. - y*30.)*3.)*.5+.5;\n        float waves = sin(x*2. - y*6. + t*20.);\n        \n        float b1 = smoothstep(-.2, .2, bands);\n        float b2 = smoothstep(-.2, .2, bands-.5);\n        \n        float m = b1*(1.-b2);\n        m = max(m, ripples*b2*max(0., waves));\n        m += max(0., waves*.3*b2);\n        \n        col += mix(m, 1.-m, smoothstep(-.3, .3, sin(x*2.+t)));\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}