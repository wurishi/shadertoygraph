{"ver":"0.1","info":{"id":"wtVGRW","date":"1578467136","viewed":69,"name":"Ray marching start","username":"Roelof","description":"Learning the concepts of ray marching","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.0\n#define SURF_DIST 0.01\n\nfloat GetDist(vec3 p) {\n\tvec4 sphere = vec4(0, 1, 6, 1); // [x, y, z, radius] as a vec4\n    \n    float sphereDist = length(p - sphere.xyz) - sphere.w;\n\tfloat planeDist = p.y;\n    \n    float d = min(sphereDist, planeDist);\n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO = 0.0; // Distance from origin (we need to keep track of this value)\n    \n    for (int i = 0; i < MAX_STEPS; i++) {\n    \tvec3 p = ro + rd * dO; // March a step so we get a new point from which to calculate the next marching step\n        \n        float dS = GetDist(p); // Get distance to closest scene point\n        dO += dS;\n        \n        // Check exit conditions\n        if ( dO > MAX_DIST || dS < SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(0.01, 0);\n    \n    vec3 n = d - vec3(\n    \tGetDist(p - e.xyy),\n        GetDist(p - e.yxy),\n        GetDist(p - e.yyx)\n    );\n    \n    return normalize(n);\n}\n\nfloat GetLight(vec3 p) {\n\tvec3 lightPos = vec3(0, 5, 6);\n    lightPos.xz += vec2(sin(iTime), cos(iTime)) * 2.;\n    \n    vec3 lightvec = normalize(lightPos - p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, lightvec), 0., 1.);\n    \n    float d = RayMarch(p + n * SURF_DIST * 2., lightvec);\n    if (d < length(lightPos - p)) {\n    \tdif *= 0.1;    \n    }\n    \n    return dif;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates so that [0,0] is in the center\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    \n    vec3 col = vec3(0);\n\n    \n    vec3 ro = vec3(0, 1, 0); // Ray origin    \n    vec3 rd = normalize(vec3(uv.x, uv.y, 1)); // Ray direction\n    \n    float d = RayMarch(ro, rd);\n    \n    vec3 p = ro + rd * d;\n    float dif = GetLight(p);\n    \n    col = vec3(dif);\n        \n    \n    // Output to screen     \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}