{"ver":"0.1","info":{"id":"l3d3WB","date":"1721818148","viewed":23,"name":"Spatial Convolution","username":"revanw","description":"Simply using another buffer (not necessary!!) to run a spatial convolution with 3*3 kernels.\n\nHovering within each column will alternate the kernel filter:\n\n| Edge filter | Box blur | Gaussian blur | Sharpening | vert. edge | Emboss | Edge (no diag.) |","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["edgefilter","convolution","buffer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float drawVertical(float x, float pos, float width) {\n\n    return (1.0-step(pos+width*0.5, x))*step(pos-width*0.5, x);\n    \n}\n\n// Main Image Shader\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Input texture\n    vec2 uv = fragCoord / iResolution.xy;\n\n    // Read from buffer\n    vec4 bufferColor = texture(iChannel1, uv);\n    \n    // Add vertical lines to indicate kernel change\n    bufferColor +=  vec4(vec3(drawVertical(fract((uv.x-0.5) * 7.0), 0.5, 0.01)), 1.0);\n\n    // Output final color\n    fragColor = bufferColor;\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Define all kernels\n//float kernels[7][9] = float[7][9](\n// array of array does not work below glsl ES 3.10... So i'll just make a function to select kernel\nfloat[9] get_kernel(int sel){\n\n    \n    if (sel==0) {\n    // edge detect\n    return float[9](\n        -1.0, -1.0, -1.0,\n        -1.0,  8.0, -1.0,\n        -1.0, -1.0, -1.0\n        );\n    }\n    else if (sel==1) {\n    // Box blur\n    return float[9](\n        1.0 / 9.0, 1.0 / 9.0, 1.0 / 9.0,\n        1.0 / 9.0, 1.0 / 9.0, 1.0 / 9.0,\n        1.0 / 9.0, 1.0 / 9.0, 1.0 / 9.0\n        );\n    }\n    else if (sel==2) {\n    // gaussian blur\n    return float[9](\n        1.0 / 16.0, 2.0 / 16.0, 1.0 / 16.0,\n        2.0 / 16.0, 4.0 / 16.0, 2.0 / 16.0,\n        1.0 / 16.0, 2.0 / 16.0, 1.0 / 16.0\n        );\n    }\n    else if (sel==3) {\n    // Sharpening\n    return float[9](\n         0.0, -1.0,  0.0,\n        -1.0,  5.0, -1.0,\n         0.0, -1.0,  0.0\n        );\n    }\n    else if (sel==4) {\n    // edge (horizontal)\n    return float[9](\n        -1.0, 0.0, 1.0,\n        -2.0, 0.0, 2.0,\n        -1.0, 0.0, 1.0\n        );\n    }\n    else if (sel==5) {\n    // Emboss (a sort of shadow by enhancing a diagonal edge outline)\n    return float[9](\n        -2.0, -1.0, 0.0,\n        -1.0,  1.0, 1.0,\n         0.0,  1.0, 2.0\n        );\n    }\n    else if (sel==6) {\n    // another edge detector (no diag)\n    return float[9](\n         0.0,  -1.0,  0.0,\n        -1.0,  4.0,  -1.0,\n         0.0,  -1.0,  0.0\n         );\n    }\n}\n\n// Buffer A: Convolution Shader\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Input texture\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 texel = 1.0 / iResolution.xy;\n    \n    // Uniform to select kernel\n    int kernelType = int(floor(iMouse.x / iResolution.x * 7.0));\n\n    // Convolution\n    vec3 color = vec3(0.0);\n    for (int y = -1; y <= 1; y++)\n    {\n        for (int x = -1; x <= 1; x++)\n        {\n            vec2 offset = vec2(float(x), float(y)) * texel;\n            //color += texture(iChannel0, uv + offset).rgb * kernels[kernelType][(y+1)*3 + (x+1)];\n            color += texture(iChannel0, uv + offset).rgb * get_kernel(kernelType)[(y+1)*3 + (x+1)];\n        }\n    }\n\n    fragColor = vec4(color, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}