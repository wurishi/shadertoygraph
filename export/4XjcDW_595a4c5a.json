{"ver":"0.1","info":{"id":"4XjcDW","date":"1727284410","viewed":28,"name":"GPT4-o1-preview try II","username":"rwqx","description":"Fractal-Maniac, wear shades when pressing the mouse buttons.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["demo","gpt"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// ShaderToy shader by ChatGPT\n// Title: HyperTrig Fractal Explorer\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = fragCoord.xy / iResolution.xy * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n\n    // Parameters for zoom and pan\n    float zoom = pow(0.5, iMouse.z * 0.01);\n    vec2 pan = vec2(iMouse.x / iResolution.x - 0.5, iMouse.y / iResolution.y - 0.5) * 2.0;\n\n    // Complex plane coordinates\n    vec2 c = uv * zoom - pan;\n\n    // Initialize z to 0\n    vec2 z = vec2(0.0);\n\n    // Iteration limit\n    int maxIterations = 100;\n    int i;\n    for (i = 0; i < maxIterations; i++)\n    {\n        // Compute cosh(z)\n        vec2 cosh_z = vec2(\n            cosh(z.x) * cos(z.y),\n            sinh(z.x) * sin(z.y)\n        );\n\n        // Compute sin(c)\n        vec2 sin_c = vec2(\n            sin(c.x) * cosh(c.y),\n            cos(c.x) * sinh(c.y)\n        );\n\n        // Iterative function: z = cosh(z) + sin(c)\n        z = vec2(\n            cosh_z.x - cosh_z.y,\n            cosh_z.y + cosh_z.x\n        ) + sin_c;\n\n        // Check for divergence\n        if (length(z) > 4.0)\n            break;\n    }\n\n    // Smooth coloring\n    float smoothIter = float(i) - log2(log(length(z))) + 4.0;\n\n    // Color mapping\n    float t = smoothIter / float(maxIterations);\n    vec3 color = vec3(0.5 + 0.5 * cos(3.0 + t * 10.0 + vec3(0.0, 2.0, 4.0)));\n\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}