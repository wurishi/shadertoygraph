{"ver":"0.1","info":{"id":"fdKfWD","date":"1663023811","viewed":74,"name":"MarcherTest","username":"RedWool","description":"3D how\nYou can also look around with your mouse","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat3 rotY(float a)\n{\n    return mat3(vec3(cos(a),0,-sin(a)), vec3(0,1,0), vec3(sin(a),0,cos(a)));\n}\nmat3 rotX(float a)\n{\n    return mat3(vec3(1,0,0), vec3(0,cos(a),-sin(a)), vec3(0,sin(a),cos(a)));\n}\n\nfloat closeCircDist(vec3 pos, vec3 c)\n{\n    return length(pos - c) - (sin(pos.y*20.+pos.x*20.+pos.z*20.+iTime)*.05+.2+sin(c.x + c.y + c.z + iTime)*.2);\n}\n\n//(sin(iTime*2.+c.x+c.y+c.z)*.1+.2)\n\nvec3 rayMarch (vec3 pos, vec3 dir)\n{\n    float totalDist = 0.;\n    const int maxM = 64;\n    const float minDist = .001;\n    const float maxDist = 100.;\n    \n    for (int i = 0; i < maxM; i++)\n    {\n        vec3 co = pos + totalDist * dir;\n        \n        float cd = closeCircDist(co, floor(co)+vec3(.5));\n        \n        if(cd < minDist)\n        {\n            return vec3(1.-totalDist*.10)*vec3(1, cos(-length(co)+iTime*.721)*.5+.5, sin(length(co))*.5+.5);\n        }\n        else if (cd > maxDist)\n        {\n            break;\n        }\n        \n        totalDist += cd;\n    }\n    \n    return vec3(0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-iResolution.xy*.5)/iResolution.y;\n    \n    vec2 m = (vec2(iMouse.x, iMouse.y) - iResolution.xy*.5)/iResolution.y*-2.;\n    \n    vec3 camPos = vec3(0,0,iTime);\n    vec3 ro = camPos;\n    \n    float a = sin(iTime * .3);\n    vec3 rd = vec3(uv, 1) * rotX(m.y) * rotY(m.x) ;\n    // Time varying pixel color\n    vec3 col = rayMarch(ro,rd);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}