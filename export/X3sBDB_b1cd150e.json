{"ver":"0.1","info":{"id":"X3sBDB","date":"1728859481","viewed":38,"name":"solar_sys_proj1","username":"jaron","description":"hw","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["hw"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n\n    // Time varying pixel color\n    vec3 col = 0.8* vec3(0.1,0.1,0.1) + 0.2*cos(iTime+uv.yxx+vec3(0,3,4)); \n    \n    // sun\n    float sun_r = 0.03;\n    float d2center = length(uv); // distance to the center\n    vec3 light_color = vec3(0.9, 0.65, 0.5);\n\tfloat light_intensity = sun_r / (d2center * d2center); \n    col += light_intensity * light_color * smoothstep(0., 0.01, d2center);\n    \n    // define planetary orbit parameters\n    const int planets_n = 5;\n    float planet_orbit_r[planets_n] = float[](0.25, 0.35, 0.65, 0.95, 1.5);\n    float planet_r[planets_n] = float[](0.01, 0.02, 0.03, 0.04, 0.06);\n    float planet_speeds[planets_n] = float[](0.5, 0.3, 0.1, 0.08, 0.05);\n    \n    // colors\n    vec3 orbit_col = vec3(0.6, 0.6, 0.6);\n    vec3 planet_colors[planets_n] = vec3[](\n    vec3(0.8, 0.8, 0.8),   // Mercury\n    vec3(1.0, 0.9, 0.5),   // Venus\n    vec3(0.0, 0.5, 1.0),   // Earth\n    vec3(1.0, 0.3, 0.2),   // Mars\n    vec3(0.9, 0.7, 0.3)    // Jupiter\n    );\n    float speed = 2.0;\n    float time_factor = (1.0 + iMouse.x / iResolution.x * 5.0) * speed;\n    \n    // draw out the planets and orbit \n    for (int i = 0; i < planets_n; i++){\n        float d2orbit = abs(d2center - planet_orbit_r[i]);\n        if (d2orbit < 1. / iResolution.y) {\n            col += orbit_col;\n        }\n        \n        //planet pos\n        float angle = time_factor * iTime * planet_speeds[i] + float(i) * 1.;\n        vec2 planets_pos = vec2(cos(angle), sin(angle)) * planet_orbit_r[i];\n        \n        //fraw planets\n        float d2planet = length(uv - planets_pos);\n        if (d2planet < planet_r[i]) {\n            col = planet_colors[i];\n        }\n    }\n    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}