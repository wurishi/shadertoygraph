{"ver":"0.1","info":{"id":"WlBcWc","date":"1595473509","viewed":181,"name":"fractal configurations","username":"stb","description":"Nothing fundamentally new about this shader. Just a circle inversion fractal, with a fisheye warp.","likes":16,"published":1,"flags":0,"usePreview":0,"tags":["2d","fractal","invert","circle","warp","ball","fisheye","inversion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n\tfractal configurations\n\t202 stb\n\tfree code is free\n\n\tUpdate: removed vestiges from previous code, cleaned up some other things.\n*/\n\n#define PI 3.14159265\n#define RPT(a) vec2(sin(a), cos(a))\n#define T .33 * iTime\n\nvec2 cInvMir(vec2 p, vec2 o, float r) {\n    return length(p-o)<r ? (p-o) * r * r / dot(p-o, p-o) + o : p;\n}\n\nvec3 map(vec2 p) {\n    return\n        .5 + .5 * vec3(\n            cos(dot(p, RPT(T))),\n            cos(dot(p, RPT(T+PI/3.))),\n            cos(dot(p, RPT(T-PI/3.)))\n       );\n}\n\n// hash without sine\n// https://www.shadertoy.com/view/4djSRW\n#define MOD3 vec3(443.8975, 397.2973, 491.1871) // uv range\nvec2 hash22(vec2 p) {\n\tvec3 p3 = fract(vec3(p.xyx) * MOD3);\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract(vec2((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y));\n}\n\nvoid mainImage(out vec4 fo, in vec2 fc) {\n\tvec2 res = iResolution.xy;\n\tvec2 p = .5 * (fc-res/2.) / res.y;\n\t\n    float ball = 1. - dot(p, p);\n    p /= ball;\n    p += RPT(.77*T);\n    \n    // fractal stuff\n\tfor(float i=0.; i<32.; i++) {\n    \tvec2 h = mix( hash22(vec2(i, floor(T))), hash22(vec2(i, floor(T+1.))), pow(smoothstep(0., 1., fract(T)), 8.));\n        p = cInvMir(.8*p, .5-h, .37);\n\t}\n    \n\tfo = vec4((ball*4.7-3.3) * (map(p*3.)-length(p)/4.), 1.);\n}","name":"Image","description":"","type":"image"}]}