{"ver":"0.1","info":{"id":"cdc3Wf","date":"1679787030","viewed":53,"name":"It's Called a Heart","username":"Athwnis","description":"<3","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["heart"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Hello there, I created this for fun.\n// Remember that this is not a real heart simulation.\n// I tried to write this code as clear as I can for educational purposes for beginners to the world of shaders.\n\n\n\n////////////////////////////////////////////////////////////////////////////////////////////////\n\n\n\n// Mathematical constants:\n\nconst float PI = 3.141592;\nconst float FI = 1.618033;\n\n// Heart generation:\n\nvec2 heart_createCoordinateSystem(vec2 fragCoord);\n\nfloat heart_getRawHeartFunctionValue(vec2 uv);\n\nvec4 heart_generateHeartPixel(vec2 uv, float BPM);\n\n// Additional tools:\n\nvec4 heart_generateDebugToolsPixel(vec2 uv);\n\n\n\n////////////////////////////////////////////////////////////////////////////////////////////////\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // You can control your heart by the following values. \n    \n    // BPM - beats per minute\n    // 100 - excitement\n    // 75  - standard\n    // 60  - chill\n    float BPM = 89.; // slightly excited...\n    \n    // Enabling causes to draw a grid to help visualize the heart.\n    bool enableDebugTools = false;\n\n    vec2 uv = heart_createCoordinateSystem(fragCoord);\n    \n    fragColor = heart_generateHeartPixel(uv, BPM);\n    \n    if(enableDebugTools)\n        fragColor += heart_generateDebugToolsPixel(uv);\n}\n\n\n\n////////////////////////////////////////////////////////////////////////////////////////////////\n\n// definitions\n\nvec2 heart_createCoordinateSystem(vec2 fragCoord)\n{\n    return 21.*((fragCoord-iResolution.xy*.5)/iResolution.x);\n}\n\nfloat heart_getRawHeartFunctionValue(vec2 uv)\n{\n    return 1./8.*(uv.x*uv.x + pow(FI/2.+uv.y-pow(uv.x*uv.x, 1./3.),2.) );\n}\n\nvec4 heart_generateDebugToolsPixel(vec2 uv)\n{\n    float cardioFunction = heart_getRawHeartFunctionValue(uv);\n\n    // bounds of the heart\n    bool default_heart_perimeter = cardioFunction > 0.99 && cardioFunction < 1.01;\n    bool upper_heart_bound = cardioFunction > 0.99 && cardioFunction < 1.01;\n    bool lower_heart_bound = cardioFunction > 0.99 && cardioFunction < 1.01;\n\n    bool auxiliary_X_Lines = fract( abs(uv.x) ) < 0.025;\n    bool auxiliary_Y_Lines = fract( abs(uv.y) ) < 0.02;\n    \n    if(auxiliary_X_Lines || auxiliary_Y_Lines || default_heart_perimeter || upper_heart_bound || lower_heart_bound)\n        return vec4(1.);\n    \n    return vec4(0.);\n}\n\nvec4 heart_generateHeartPixel(vec2 uv, float BPM)\n{\n    \n    // Expression that defines a heart shape\n    float cardioExpression = heart_getRawHeartFunctionValue(uv);\n    \n    float x = iTime*BPM/30.; // argument\n    float A = 0.89; // amplitude\n    \n    float f_x = A-0.21*sin(x*2.*PI); // heart contracton function\n    float g_x = A-0.13*sin(x*PI-PI); // heart relaxation function\n    \n    // Choosing the heart behaviour to define the color intensity.\n    float redColor = FI-cardioExpression*f_x;\n    if(g_x > A)\n        redColor = FI-cardioExpression*g_x;\n    redColor = smoothstep(0.,1.,redColor);\n    \n    return vec4(redColor,0,0,1.);\n    \n}","name":"Image","description":"","type":"image"}]}