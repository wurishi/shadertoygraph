{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"float easeInOutQuad(float t) {\n    return t < 0.5 ? 2.0 * t * t : -1.0 + (4.0 - 2.0 * t) * t;\n}\n\n// Cubic Easing\nfloat easeInCubic(float t) {\n    return t * t * t;\n}\n\nfloat easeOutCubic(float t) {\n    float f = t - 1.0;\n    return f * f * f + 1.0;\n}\n\nfloat easeInOutCubic(float t) {\n    return t < 0.5 ? 4.0 * t * t * t : (t - 1.0) * (2.0 * t - 2.0) * (2.0 * t - 2.0) + 1.0;\n}\n\n// Quartic Easing\nfloat easeInQuart(float t) {\n    return t * t * t * t;\n}\n\nfloat easeOutQuart(float t) {\n    float f = t - 1.0;\n    return 1.0 - f * f * f * f;\n}\n\nfloat easeInOutQuart(float t) {\n    return t < 0.5 ? 8.0 * t * t * t * t : 1.0 - 8.0 * (t - 1.0) * (t - 1.0) * (t - 1.0) * (t - 1.0);\n}\n\n// Sine Easing\nfloat easeInSine(float t) {\n    return 1.0 - cos((t * 3.141592653589793) / 2.0);\n}\n\nfloat easeOutSine(float t) {\n    return sin((t * 3.141592653589793) / 2.0);\n}\n\nfloat easeInOutSine(float t) {\n    return -0.5 * (cos(3.141592653589793 * t) - 1.0);\n}\n\n// Exponential Easing\nfloat easeInExpo(float t) {\n    return t == 0.0 ? 0.0 : pow(2.0, 10.0 * (t - 1.0));\n}\n\nfloat easeOutExpo(float t) {\n    return t == 1.0 ? 1.0 : 1.0 - pow(2.0, -10.0 * t);\n}\n\nfloat easeInOutExpo(float t) {\n    if (t == 0.0) return 0.0;\n    if (t == 1.0) return 1.0;\n    return t < 0.5 ? 0.5 * pow(2.0, 20.0 * t - 10.0) : 1.0 - 0.5 * pow(2.0, -20.0 * t + 10.0);\n}\n\n// Back Easing\nfloat easeInBack(float t) {\n    const float c1 = 1.70158;\n    return (c1 + 1.0) * t * t * t - c1 * t * t;\n}\n\nfloat easeOutBack(float t) {\n    const float c1 = 1.70158;\n    float f = t - 1.0;\n    return 1.0 + (c1 + 1.0) * f * f * f + c1 * f * f;\n}\n\nfloat easeInOutBack(float t) {\n    const float c1 = 1.70158;\n    const float c2 = c1 * 1.525;\n    return t < 0.5\n        ? (pow(2.0 * t, 2.0) * ((c2 + 1.0) * 2.0 * t - c2)) / 2.0\n        : (pow(2.0 * t - 2.0, 2.0) * ((c2 + 1.0) * (t * 2.0 - 2.0) + c2) + 2.0) / 2.0;\n}\n\n// Remap for float\nfloat remap(float value, float oldMin, float oldMax, float newMin, float newMax) {\n    return newMin + (value - oldMin) * (newMax - newMin) / (oldMax - oldMin);\n}\n\n\nvec3 getPosByAngle(float angle)\n{\n    return vec3(cos(angle), sin(angle), 0);\n}\n\nfloat getStarWithFade(vec2 uv, vec2 center, float npoints, float radiusRatio, float size, float fadeAmount, float rotation)\n{\n    float radiusMax = 1.0;\n    float radiusMin = radiusMax * radiusRatio;\n    \n    float PI = 3.1415926;\n    float starangle = 2.0 * PI / npoints; // Angle between points on the star\n\n    // Define the positions for the outer and inner points of the star's initial angle, rotated by `rotation`\n    vec3 p0 = (radiusMax * size) * getPosByAngle(rotation);             // Outer point, rotated by `rotation`\n    vec3 p1 = (radiusMin * size) * getPosByAngle(starangle + rotation);  // Inner point, also rotated\n\n    // Calculate the position of the current fragment relative to the star's center\n    vec2 curPosuv = (uv - center);      // Center UV coordinates, then scale to fit the star size\n    float curRadius = length(curPosuv);         // Radius from center, no need to scale further\n    float curPosAngle = atan(curPosuv.y, curPosuv.x) - rotation; // Calculate angle and adjust by `rotation`\n\n    // Determine the fractional position within the current star segment\n    float a = fract(curPosAngle / starangle); // Fractional angle position within one segment\n    if (a >= 0.5)\n        a = 1.0 - a; // Ensure we are within the first half of the segment (symmetry)\n\n    // Calculate the current point on the star segment, applying rotation\n    a = a * starangle;                          // Actual angle for this position on the segment\n    vec3 curPos = curRadius * getPosByAngle(a + rotation); // Final position, rotated\n\n    // Calculate directions for edge detection using cross product\n    vec3 dir0 = p1 - p0;  // Vector from outer to inner point\n    vec3 dir1 = curPos - p0; // Vector from outer point to current position\n    \n    float crossZ = dir0.x * dir1.y - dir0.y * dir1.x;\n    \n    // Normalize `crossZ` based on `size` to maintain consistent fade\n    float fadeScale = size * fadeAmount; // Scale fade threshold based on size\n    float result = remap(\n        crossZ / fadeScale, // Normalize by fadeScale\n        0.0, 1.0,\n        0.0, 1.0\n    );\n\n    // Brightness and clamping\n    result = clamp(result, 0.0, 1.0);\n    result = easeOutSine(result);\n\n    return result;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    float T_MAX = 1.0;\n    float time = mod(iTime, T_MAX);\n    float t = time/ T_MAX;\n    //t = 0.1;\n    \n    //t = 1.0 - t;\n    //t = easeInSine(t);\n    //t = easeInCubic(t);\n    //t = easeInOutCubic(t);\n    //t = easeInExpo(t);\n    //t = easeInExpo(t);\n    //t = easeInOutSine(t);\n    \n    \n    //t = 0.5;\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float aspect = iResolution.x / iResolution.y;\n    vec2 centeruv = vec2(uv.x -0.5,uv.y) * vec2(aspect,1.0);\n    \n    \n    //t = 0.05;\n    \n    /*\n    float star = getStarWithFade(\n        centeruv,\n        vec2(0.0,0.5),\n        6.0,\n        mix(0.1,1.0,t),\n        mix(0.30,2.33,t),\n        6.28*iTime*1.0 + 0.50\n        );\n    */\n        \n    float star = getStarWithFade(\n        centeruv,\n        vec2(0.0,0.5),\n        5.0,\n        mix(0.0,0.5,t),\n        mix(0.0,2.0,t),\n        0.2,\n        //mix(0.0,0.90,t),\n        6.28*iTime*0.00 + 0.33\n        );\n        \n    //star = easeOutExpo(star);\n        \n    fragColor = vec4(star,star,star,1.0);\n\n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    //fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MctfWS","date":"1733712147","viewed":65,"name":"Star_x","username":"jgarza9788","description":"star,x","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["star","x"],"hasliked":0,"parentid":"","parentname":""}}