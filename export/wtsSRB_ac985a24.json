{"ver":"0.1","info":{"id":"wtsSRB","date":"1563441025","viewed":130,"name":"2d阴影","username":"liutp","description":"2D阴影效果\n移动鼠标可以移动光源","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","shadow","sight"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n/////////////////\n// The program //\n/////////////////\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nbool equalFloat(float a, float b){\n\treturn abs(a-b)<0.01;\n}\n\nstruct Vector {\n    vec2 from;\t//起始点\n    vec2 to;\t//结束点\n\tvec2 v;\t//向量\n};\n\nVector makeVector(vec2 from, vec2 to){\n\treturn Vector(from,to,(to-from));\n}\n\nVector negativeVector(Vector v){\n\treturn makeVector(v.to, v.from);\n}\n\nfloat productVecto(Vector a, Vector b){\n\treturn a.v.x*b.v.y-b.v.x*a.v.y;\n}\n\n//计算向量ab与cd是否相交\nbool intersected(vec2 a,vec2 b, vec2 c, vec2 d){\n\tfloat ZERO = 0.001;\n\n\tVector AC = makeVector(a, c);\n\tVector AD = makeVector(a, d);\n\tVector BC = makeVector(b, c);\n\tVector BD = makeVector(b, d);\n\tVector CA = makeVector(c, a);\n    Vector CB = makeVector(c, b);\n    Vector DA = makeVector(d, a);\n    Vector DB = makeVector(d, b);\n\n\treturn (productVecto(AC, AD) * productVecto(BC, BD) <= ZERO) &&\n\t\t(productVecto(CA, CB) * productVecto(DA, DB) <= ZERO);\n}\n\nbool _inStone(vec2 p, vec2 V[10], int LV){\n\tint crossCount = 0;\n\tfor(int i=0; i<LV; i++){\n\t\tif (intersected(V[i],V[(i+1)%LV],p,vec2(10000,10000))){\n\t\t\tcrossCount ++;\n\t\t}\n\t}\n\tif (crossCount%2==1){\n\t\treturn true;\n\t}\n}\n\nbool _crossStone(vec2 a, vec2 b, vec2 V[10], int LV){\n\tfor(int i=0; i<LV; i++){\n\t\tif (intersected(V[i], V[(i+1)%LV], a, b)){\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\n#define IN_STONE(V1) { \\\n\t\tint LV = V1.length(); \\\n\t\tfor (int i=0;i<LV;i++){ \\\n\t\t\tVV[i] = V1[i]; \\\n\t\t} \\\n\t\tif (_inStone(p, VV, LV)){ \\\n\t\t\treturn true; \\\n\t\t} \\\n\t} \n\n#define CROSS_STONE(V1)\t{ \\\n\t\tint LV = V1.length(); \\\n\t\tfor (int i=0;i<LV;i++){ \\\n\t\t\tVV[i] = V1[i]; \\\n\t\t} \\\n\t\tif (_crossStone(a, b, VV, LV)){ \\\n\t\t\treturn true; \\\n\t\t} \\\n\t}\n\n//预设几个形状作为遮挡物\nconst vec2 V1[5] = vec2[5](\n\tvec2(131, 176),\n\tvec2(216, 141),\n\tvec2(290, 174),\n\tvec2(290, 279),\n\tvec2(154, 279)\n);\n\nconst vec2 V2[3] = vec2[3](\n\tvec2(503, 220),\n\tvec2(569, 289),\n\tvec2(462, 379)\n);\n\nconst vec2 V3[5] = vec2[5](\n\tvec2(194, 579),\n\tvec2(264, 642),\n\tvec2(236, 757),\n\tvec2(90, 802),\n\tvec2(91, 679)\n);\n\nconst vec2 V4[3] = vec2[3](\n\tvec2(556, 591),\n\tvec2(612, 745),\n\tvec2(486, 885)\n);\n\nconst vec2 V5[5] = vec2[5](\n\tvec2(299, 846),\n\tvec2(344, 919),\n\tvec2(400, 853),\n\tvec2(442, 998),\n\tvec2(216, 969)\n);\n\nbool inStone(vec2 p){\n\tvec2 VV[10];\n\tIN_STONE(V1)\n\tIN_STONE(V2)\n\tIN_STONE(V3)\n\tIN_STONE(V4)\n\tIN_STONE(V5)\n\treturn false;\n}\n\nbool crossStone(vec2 a, vec2 b){\n\tvec2 VV[10];\n\tCROSS_STONE(V1)\n\tCROSS_STONE(V2)\n\tCROSS_STONE(V3)\n\tCROSS_STONE(V4)\n\tCROSS_STONE(V5)\n\treturn false;\n}\n\nvec4 drawStone(vec2 p){\n\tif (inStone(p)){\n\t\treturn vec4(0.0);\n\t}\n\treturn vec4(1.0);\n}\n\n//计算平行光源\nvec2 otherLight(vec2 p, vec2 pos, float r){\n\tvec2 pos1 = p-pos;\n\tmat2 rout = mat2(0,1,-1,0);\n\tpos1 = pos1*rout;\n\tpos1 = pos1*(r/length(pos1));\n\tpos1 = pos1 + pos;\n\treturn pos1;\n}\n\n//计算阴影\nfloat shadow(vec2 p, vec2 pos, float radius) {\n\tif (crossStone(p,pos)) {\n\t\treturn 0.0;\n\t}else{\n\t\treturn 1.0;\n\t}\n}\n\n//p 目标点\n//pos 灯光位置\n//color 灯光颜色\n//range 光源照亮半径\n//radius 光源灯半径\nvec4 drawLight(vec2 p, vec2 pos, vec4 color, float range, float radius) {\n\t// 点到灯的距离\n\tfloat ld = length(p - pos);\n\t\n\t// 超过灯照半径，则不计算\n\tif (ld > range) return vec4(0.0);\n\tfloat shad = 1.0;\n\tfloat fall = 1.0;\n\n\t//越远的光越淡\n\tfall = (range - ld)/range;\n\t//fall *= fall;\n\t\n\t//计算阴影\n\tshad = shadow(p, pos, radius);\n\tif (true) {\n\t\tint n = 15;\t//灯的数量\n\t\tfloat count = 1.0;\n\t\tfor (int r=-n; r<0; r+=1){\n\t\t\tshad += shadow(p, otherLight(p, pos, float(r)/3.5), radius);\n\t\t\tcount+=1.0;\n\t\t}\n\t\tfor (int r=1; r<=n; r+=1){\n\t\t\tshad += shadow(p, otherLight(p, pos, float(r)/3.5), radius);\n\t\t\tcount+=1.0;\n\t\t}\n\t\tshad = shad/count*1.0;\n\t}\n\n\n\tcolor.a = color.a*shad*fall;\n\treturn color;\n\n\t\n\t//fall=1.0;\n\n\t//画出光源的光斑\n\t//float source = fillMask(circleDist(p - pos, radius));\n\t//source = 0.0;\n\t//return (shad * fall + source) * color;\n}\n\n\n/*\n着色器输入\nuniform vec3      iResolution;           // viewport resolution (in pixels)\nuniform float     iTime;                 // shader playback time (in seconds)\nuniform float     iTimeDelta;            // render time (in seconds)\nuniform int       iFrame;                // shader playback frame\nuniform float     iChannelTime[4];       // channel playback time (in seconds)\nuniform vec3      iChannelResolution[4]; // channel resolution (in pixels)\nuniform vec4      iMouse;                // mouse pixel coords. xy: current (if MLB down), zw: click\nuniform samplerXX iChannel0..3;          // input channel. XX = 2D/Cube\nuniform vec4      iDate;                 // (year, month, day, time in seconds)\nuniform float     iSampleRate;           // sound sample rate (i.e., 44100)\n\nfragColor => gl_FragColor\nfragCoord: 坐标位置(x,y)\n*/\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //转换一下坐标系，左上角是原点\n    vec2 c = iResolution.xy / 2.0;\t//画布中点\n\tvec2 mouseP = vec2(iMouse.x+0.0, iResolution.y-iMouse.y+0.0);\t//目标点\n\tvec2 p = vec2(fragCoord.x+0.0, iResolution.y-fragCoord.y+0.0);\t//目标点\n\t\n\t// 背景(高级灰，中间亮，四周暗淡)\n\tvec4 col = vec4(0.5, 0.5, 0.5, 1.0) * (1.0 - length(c - p)/max(iResolution.x,iResolution.y));\n\n\t// 画格子\n\tcol *= clamp(min(mod(p.x, 10.0), mod(p.y, 10.0)), 0.9, 1.0);\n\n\tvec2 light1Pos = mouseP.xy;\n\tvec4 light1Col = vec4(0.9, 0.7, 0.9, 0.60);\n\n\tcol *= drawStone(p);\n\n\tvec4 lCol = drawLight(p, light1Pos, light1Col, 550.0, 6.0);\n\n\tcol.r += lCol.r*lCol.a;\n\tcol.g += lCol.g*lCol.a;\n\tcol.b += lCol.b*lCol.a;\n\n\tfragColor = clamp(col, 0.0, 1.0);\n\t//fragColor = col;\n}\n","name":"Image","description":"","type":"image"}]}