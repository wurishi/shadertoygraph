{"ver":"0.1","info":{"id":"7t2GWD","date":"1624081104","viewed":82,"name":"boken","username":"saltlemon","description":"2d","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define GOLDEN_ANGLE 2.39996323\nmat2 rotMatrix(float angle)\n{\n    return mat2(cos(angle), sin(angle),\n                    -sin(angle), cos(angle));\n}\nfloat draw(vec2 point,vec2 uv){\n    return smoothstep(0.2,0.1,length(uv-point));\n}\n\nfloat circle(float r,vec2 uv){\n    float flag=length(uv)-r;\n    return step(flag,0.01)*step(-0.01,flag);\n    \n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv-=.5;\n    uv.x*=iResolution.x/iResolution.y;\n    uv*=10.;\n    mat2 _GoldenRot = rotMatrix(GOLDEN_ANGLE);\n    mat2 rot = _GoldenRot;\n    vec4 accumulator = vec4(0.0);\n    vec4 divisor = vec4(0.0);\n    float r = 1.0;//半径\n    vec2 angle = vec2(0.0, 0.2);//角度\n    vec3 col=vec3(0.0);\n    float lastR=1.0;\n    for (float j = 0.; j < iTime*5.0; j++)\n    {\n        lastR+= 1.0 / lastR;\n    }\n    for(float i=0.;i<iTime*5.0;i++){\n        r+=1.0/r;\n        angle=rot*angle;\n        //float flag = smoothstep(0.1,0.0,sdStar5((r ) * normalize(angle)/lastR,0.5,0.5))\n        col+=draw((r - 1.0) * angle,uv);\n    }\n    r+=1.0/r;\n    angle=rot*angle;\n    col+=draw((r - 1.0) * angle,uv)*vec3(1.0,.0,.0);\n    col+=vec3(circle((r-1.0)/5.,uv));\n    // Time varying pixel color\n    //vec3 col = vec3(draw(vec2(0.,0.),uv));\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}