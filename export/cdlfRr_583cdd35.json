{"ver":"0.1","info":{"id":"cdlfRr","date":"1688401275","viewed":96,"name":"Curly Sunset","username":"matheusgirola","description":"A curly sunset built upon another shader that I did a few days ago, hope you like it :)","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["procedural","2d","shader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Rectangle\nvec3 Rect(vec2 fragCoord, vec2 rectPosition, vec2 rectSize, vec3 fillColor, vec3 outsideColor)\n{\n    // Check if the current pixel is within the rectangle\n    if (fragCoord.x >= rectPosition.x && fragCoord.x <= rectPosition.x + rectSize.x &&\n        fragCoord.y >= rectPosition.y && fragCoord.y <= rectPosition.y + rectSize.y)\n    {\n        return fillColor; // Output fillColor within the rectangle\n    }\n    else\n    {\n        return outsideColor; // Output outsideColor outside the rectangle\n    }\n}\n\n// Triangle\nvec3 Trig(vec2 v0, vec2 v1, vec2 v2, vec2 fragCoord, vec3 fillColor, vec3 outsideColor)\n{\n    // Calculate the barycentric coordinates of the current fragment\n    vec2 p = fragCoord;\n    float a = (v1.x - v0.x) * (p.y - v0.y) - (v1.y - v0.y) * (p.x - v0.x);\n    float b = (v2.x - v1.x) * (p.y - v1.y) - (v2.y - v1.y) * (p.x - v1.x);\n    float c = (v0.x - v2.x) * (p.y - v2.y) - (v0.y - v2.y) * (p.x - v2.x);\n    \n    // If the fragment is inside the triangle, return fill color; otherwise, outside color\n    return (a >= 0.0 && b >= 0.0 && c >= 0.0) ? fillColor : outsideColor;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Sky -------\n    vec3 col = mix(vec3(1.0,0.3,0.0), vec3(0.5,0.,1.), uv.y);\n\n    vec2 pos = fract(uv*0.5) - uv;\n    float r = length(pos)*6.;\n    float a = atan(pos.y,uv.x);\n\n    float f = abs(sin(a*(9000. + 4.*iTime)));    \n    f = pow(0.7/(f/abs(sin((4000. + 4.*iTime)*a))*r), 100.);       \n    col *= 1. + vec3(0.6-smoothstep(f,f+0.002, r));\n    \n    // Palm tree (by Iningo Quilez https://www.shadertoy.com/view/XssSRX)\n    vec2 q = uv - vec2(0.11,0.2);\n    r = 0.002 + 0.1*cos(atan(q.y,q.x)*15.0 + 60.0*q.x + 10.);\n\tcol *= smoothstep(r, r+0.01, length(q));\n    r = 0.001;\n\tr += 0.002*sin(1200.0*q.y);\n\tr += exp(-50.0*uv.y);\n    col *= 1.0 - (1.0-smoothstep(r,r+0.002, abs(q.x-0.25*sin(2.0*q.y))))*(1.0-smoothstep(0.0,0.1,q.y));\n\t    \n    // Beach House -----\n    // house Rectangle\n    col*= Rect(uv, vec2(0.13, 0.0), vec2(0.11, 0.17), vec3(0.), vec3(1.0));\n    // hourse roof\n    col*= Trig(vec2(0.13, 0.17), vec2(0.115, 0.11), vec2(0.13, 0.11), uv, vec3(0.), vec3(1.0));\n    col*= Trig(vec2(0.24, 0.17), vec2(0.24, 0.118), vec2(0.25, 0.118), uv, vec3(0.), vec3(1.0));\n    \n    // Ocean -----\n    vec3 ocean = mix(vec3(1.0,0.,1.0), vec3(0.5,0.,1.), exp(0.7*uv.x));\n    col*= Rect(uv, vec2(0., 0.0), vec2(1., 0.06), ocean, vec3(1.0));\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}