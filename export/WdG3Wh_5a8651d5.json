{"ver":"0.1","info":{"id":"WdG3Wh","date":"1571819479","viewed":128,"name":"Reflection X_O","username":"Dude","description":"reflection","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["reflection"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415\n\nvec2 N(float a){\n    return vec2(sin(a), cos(a));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec3 col = vec3(0);\n    float d;\n    \n    float scale = 0.3;\n    \n    vec2 n = N(2./3.*PI);\n    \n    uv.x += .5;\n\n    for(int i=0; i<4; i++) {\n        uv *= 3.;\n        scale *= 3.;\n        uv.x -= 1.5;\n        \n        uv.x = abs(uv.x);\n        uv.x -= .5;\n        \n        //actual reflection\n        d = dot(uv, n);\n        uv -= min(0.,d)*n*2.;\n    }\n    \n    \n\td = length(uv - vec2(clamp(uv.x, -1., 1.), 0.));\n    col += smoothstep(.01, .0, d/scale);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}