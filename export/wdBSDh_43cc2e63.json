{"ver":"0.1","info":{"id":"wdBSDh","date":"1553571100","viewed":76,"name":"#009 - Better Smiley","username":"kbooz","description":"better smiley based on The Art of Code tutorial\nhttps://www.youtube.com/watch?v=ZlNnrpM0TRg","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["smiley"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define S(a,b, t) smoothstep(a,b,t)\n\n// Clamp => se o valor for maior que 1, fica 1, se for menor que 0, fica 0, senão é valor mesmo\n#define sat(x) clamp(x, 0., 1.)\n\n// Remapeia um valor de um range 0 a 1 para outro range\nfloat remap_single(float a, float b, float x) {\n\treturn (x-a)/(b-a);\n}\n\n// \"Clampeia\" um valor remapeado\nfloat saturated_remap_single(float a, float b, float x) {\n\treturn sat(remap_single(a,b,x));\n}\n\n// Remapeia um valor de um range para outro\nfloat remap(float a, float b, float c, float d, float x) {\n    return (saturated_remap_single(a,b,x)*(d-c)) + c;\n}\n\n//Retorna a posição xy dentro de um outro vetor4\nvec2 within(vec2 uv, vec4 rect) {\n    return(uv-rect.xy)/(rect.zw-rect.xy);\n}\n\n\nvec4 Mouth (vec2 uv) {\n    uv -= .5;\n    uv.y *= 1.5;\n    uv.y -= uv.x *uv.x*2.;\n    \n    float d = length(uv);\n    \n    vec4 color = vec4(.5, .18, .05, 1.);\n    \n    float toothPosition = length(uv - vec2(0., .6)); // posiciona o círculo na posição 0., .6);\n    float tooth = S(.4, .38, toothPosition); // diz que o raio do círculo é de .4\n    \n    vec3 toothColor = vec3(1.) * S(.6, .35, d);// adiciona uma sombra na origem do uv\n    \n    color.rgb = mix(color.rgb, toothColor, tooth); // adiciona o círculo de cor branca na posição e tamanho certo\n    \n    float toungePosition = length(uv + vec2(0., .5));\n    float tounge = S(.5, .28, toungePosition);\n    \n    color.rgb = mix(color.rgb, vec3(1., .5, .5), tounge);\n    \n    color.a = S(.5, .48, d);\n    \n\treturn color;\n}\n\n\nvec4 Eye (vec2 uv) {\n    uv -= .5;\n    float d = length(uv);\n    \n    vec3 irisColor = vec3(.3, .5, 1.);\n    vec4 color = mix(vec4(1.), vec4(irisColor, 1.), S(.1, 1.2, d));\n    \n    float eyeOutline =  1. - S(.45, .5, d) * .5 * sat(-uv.y-uv.x);\n    color.rgb *= eyeOutline;\n    \n    /*\n    float irisShadow = 1. - S(.32, .3, d) * .5 * sat(-uv.y*1.5);\n    color.rgb *=  irisShadow;// Sombra da Iris\n\t*/\n    \n    color.rgb = mix(color.rgb, vec3(0.), S(.3, .28, d)); // Outline da Iris\n    irisColor.rgb *= 1. + S(.3, .05, d);\n    color.rgb = mix(color.rgb, irisColor, S(.28, .25, d)); // Cor da Íris\n    \n    color.rgb = mix(color.rgb, vec3(0.), S(.15, .14, d)); // Pupila\n    \n    float highlight = S(.1, .09, length(uv-vec2(-.15, .15)));\n    highlight += S(.07, .05, length(uv+vec2(-.08, .08)));\n    color.rgb = mix(color.rgb, vec3(1.), highlight);\n    \n    color.a = S(.5, .48, d); // cria um círculo suave com base em d\n    \n    \n\treturn color;\n}\n\nvec4 Head (vec2 uv) {\n    vec4 color = vec4(.9, .65, .1, 1.);\n    \n    float d = length(uv);\n    color.a = S(.5,.49, d); // Suaviza a borda do círculo\n    \n\tfloat edgeShade = saturated_remap_single(.35, .5, d); // quando o valor de x vai ficando próximo de .5 a .35, ele diminui o alpha até ficar transparente\n    \n    edgeShade *= edgeShade; // deixa a transição mais suave\n    edgeShade *= .5;\n    edgeShade = 1. - edgeShade; // inverte a transição\n    \n    color.rgb *= edgeShade;\n    \n    float outline = S(.47,.48, d); // pega os pixels entre .47 e .48 para a outline\n    color.rgb = mix(color.rgb, vec3(.6,.3,.1), outline); //pinta o outline\n    \n    float highlight = S(.41, .405, d); // pega os pixels antre .41 e .405\n    highlight *= remap(.41, -.1, .75, 0., uv.y);\n    color.rgb = mix(color.rgb, vec3(1.), highlight);\n    \n    d = length(uv - vec2(.25, -.2)); // reposiciona o centro do cículo\n    float cheek = S(.2, .01, d) *.4;\n    cheek *= S(.17, .16, d);\n    \n    color.rgb = mix(color.rgb, vec3(1., .1, .1), cheek);\n    \n\treturn color;\n}\nvec4 Smiley (vec2 uv) {\n    vec4 color = vec4(0.);\n    \n    uv.x = abs(uv.x); // mirror x axis\n    \n    vec4 head = Head(uv);\n    \n    vec4 eyePosition = vec4(.03, -.1, .37, .25);\n    vec4 eye = Eye(within(uv, eyePosition));\n    \n    vec4 mouth = Mouth(within(uv, vec4(-.3, -.4, .3, -.1)));\n    \n    //mix(vec(a),vec(b),c) -> mistura os valores de vec(b) com vec(a) com base em c\n    color = mix(color, head, head.a);\n    color = mix(color, eye, eye.a);\n    color = mix(color, mouth, mouth.a);\n    \n\treturn color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= .5;\n    uv.x *= iResolution.x/iResolution.y;\n\n    // Time varying pixel color\n\n    // Output to screen\n    fragColor = Smiley(uv);\n}","name":"Image","description":"","type":"image"}]}