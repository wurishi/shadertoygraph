{"ver":"0.1","info":{"id":"NsXXW2","date":"1619391293","viewed":56,"name":"CG2, task","username":"glebass","description":"CMC computer graphic task2","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["task","cmc"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 screenUV = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, screenUV) / float(iFrame + 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4sfGRr","filepath":"/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","previewfilepath":"/media/ap/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","type":"volume","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float INF = 1e9;\nconst float EPS = 1e-5;\nconst float SPHERE_R = 1.0;\nconst vec3 CAMERA_POS = vec3(-4, 1.5, -5);\nconst vec3 LIGHT_POS = vec3(2, 1.5, 0);\nconst float LIGHT_RADIUS = 0.25;\nconst vec4 LIGHT_COLOR = vec4(1, 1, 1, 1);\n\nconst vec3 LIGHT2_POS = vec3(-2, 0.5, 2);\nconst float LIGHT2_RADIUS = 0.25;\nconst vec4 LIGHT2_COLOR = vec4(0.1, 0.7, 0.1, 1);\n\nfloat traceSphere(vec3 pos, vec3 dir, float R, out vec3 normal) {\n    // abs(pos + t * dir) = r\n    // dot(pos, pos) + 2 * t * dot(pos, dir) + t * t = r * r\n    // D = 4 * dot(pos, dir) ^ 2 - 4 * (dot(pos, pos) - r * r)\n    float b = dot(pos, dir);\n    float D = b * b - (dot(pos, pos) - R * R);\n    if (D < 0.0) {\n        return INF;\n    }\n    float t = (-b - sqrt(D));\n    if (t < 0.0)\n        t = (-b + sqrt(D));\n    if (t < 0.0)\n        return INF;\n    vec3 wPos = pos + t * dir;\n    normal = normalize(wPos);\n    return t;\n}\n\nfloat traceCylinder(vec3 pos, vec3 dir, inout vec3 normal) {\n    const float R = 1.5f;\n    const float H = 0.1f;\n    float floorT = (-1.0 - EPS - pos.y) / dir.y;\n    if (floorT < 0.0)\n        return INF;\n    vec3 finalPos = pos + dir * floorT;\n    if (dot(finalPos.xz, finalPos.xz) < R * R) {\n        normal = vec3(0, 1, 0);\n        return floorT;\n    }\n    \n    float b = dot(pos.xz, dir.xz);\n    float a = dot(dir.xz, dir.xz);\n    float D = b * b - (dot(pos.xz, pos.xz) - R * R) * a;\n    if (D < 0.0) {\n        return INF;\n    }\n    float t = (-b - sqrt(D)) / a;\n    if (pos.y + t * dir.y < -1.0) {\n        vec3 wPos = pos + t * dir;\n        normal = normalize(vec3(wPos.x, 0, wPos.z));\n        return t;\n    }\n    \n    return INF;\n}\n\nfloat traceTriangle(vec3 pos, vec3 dir, vec3 A, vec3 B, vec3 C)\n{\n    vec3 edge0 = B - A;\n    vec3 edge1 = C - B;\n    vec3 edge2 = A - C;\n    vec3 norm = normalize(cross(edge0,edge1));\n    float normalViewAngle = dot(dir, norm);\n    if(abs(normalViewAngle)<EPS){\n        return INF;\n    }\n    float t = dot(A - pos,norm)/normalViewAngle;\n    if(t<0.0){\n        return INF;\n    }\n    vec3 hitPos = pos+t*dir;\n    float square = length(cross(edge0,edge1));\n\n    if(abs(square - length(cross(hitPos - A, edge0)) - length(cross(hitPos - B, edge1)) - \n        length(cross(hitPos - C, edge2))) < EPS){\n        return t;\n    }\n    return INF;\n}\n\nfloat traceSQUARE(vec3 pos, vec3 dir, vec3 A, vec3 B, vec3 C, vec3 D)\n{\n    float t = traceTriangle(pos, dir, A, B, C);\n    t = min(t, traceTriangle(pos, dir, C, D, A));\n    return t;\n}\n\nfloat traceCUBE(vec3 pos, vec3 dir, out vec3 normal)\n{\n    vec3 A = vec3(-1, -1, -1);\n    vec3 B = vec3(1, -1, -1);\n    vec3 C = vec3(1, -1, 1);\n    vec3 D = vec3(-1, -1, 1);\n    vec3 A1 = vec3(-1, 1, -1);\n    vec3 B1 = vec3(1, 1, -1);\n    vec3 C1 = vec3(1, 1, 1);\n    vec3 D1 = vec3(-1, 1, 1);\n    \n    float t = INF;\n    float T;\n    T = traceSQUARE(pos, dir, A, B, C, D);\n    if(T<t){\n        normal = vec3(0, -1, 0);\n        t=T;\n    }\n    T = traceSQUARE(pos, dir, A1, B1, C1, D1);\n    if(T<t){\n        normal = vec3(0, 1, 0);\n        t=T;\n    }\n    T = traceSQUARE(pos, dir, A, A1, B1, B);\n    if(T<t){\n        normal = vec3(0, 0, -1);\n        t=T;\n    }\n    T = traceSQUARE(pos, dir, B, B1, C1, C);\n    if(T<t){\n        normal = vec3(1, 0, 0);\n        t=T;\n    }\n    T = traceSQUARE(pos, dir, C, C1, D1, D);\n    if(T<t){\n        normal = vec3(0, 0, 1);\n        t=T;\n    }\n    T = traceSQUARE(pos, dir, D, D1, A1, A);\n    if(T<t){\n        normal = vec3(-1, 0, 0);\n        t=T;\n    }\n    return t;\n}\n\nfloat rand(float frame)\n{\n    return fract(sin( dot(vec3(frame), vec3(12.9898,78.233,45.5432) )) * 43758.5453);\n}\n\nbool isOccluded(vec3 pos, vec3 target) {\n    vec3 rvec = target - pos;\n    float dist = length(rvec);\n    vec3 dir = rvec / dist;\n    \n    vec3 normal = vec3(0, 0, 0);\n    \n    float t = traceCUBE(pos, dir, normal);\n    if (dist >= t) {\n        return true;\n    }\n    vec3 cylNormal = normal;\n    t = traceCylinder(pos, dir, cylNormal);\n    return (t > 0.0 && dist >= t);\n}\n\nvec3 refraction(vec3 v_in, vec3 normal, float n1, float n2, out bool flag) {\n    if (dot(v_in, normal) < 0.0)\n        normal = -normal;\n    float cosA = dot(v_in, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3 tang = normalize(v_in - cosA * normal);\n    float sinB = n1 * sinA / n2;\n    if (sinB > 1.0){\n        flag = true;\n        return reflect(v_in, normal);\n    }\n    float cosB = sqrt(1.0 - sinB * sinB);\n    return tang * sinB + normal * cosB;\n}\n\nfloat pow2(float x) {\n    return x * x;\n}\n\nfloat fogSdf(vec3 pos)\n{\n    return length(pos) - 0.7;\n}\n\nfloat fog2Sdf(vec3 pos)\n{\n    return length(pos) - 0.6;\n}\n\nfloat fog3Sdf(vec3 pos)\n{\n    return length(pos) - 0.6;\n}\n\nfloat BeerLambert(float absorptionCoefficient, float distanceTraveled)\n{\n    return exp(-absorptionCoefficient * distanceTraveled);\n}\n\nvec4 sampleFog(vec3 pos, vec3 dir)\n{\n    float t = fogSdf(pos);\n    const float MARCH_SIZE = 0.01;\n    float opacity = 1.0;\n    float absorption = 10.0;\n    float totalAbs = 0.0;\n    for (int i = 0; i < 50; ++i) {\n        vec3 curPos = pos + (float(i) * MARCH_SIZE + t) * dir;\n        float sdf = fogSdf(curPos);\n        if (sdf < 0.0) {\n            float prevOpacity = opacity;\n            opacity *= BeerLambert(absorption * (\n            texture(iChannel3, curPos * 0.2).x\n            + texture(iChannel3, curPos * 0.4).x\n            + texture(iChannel3, curPos * 0.8).x\n            + texture(iChannel3, curPos * 1.6).x\n            ) * 0.25 * abs(sdf), MARCH_SIZE);\n            float absorptionLastStep = prevOpacity - opacity;\n            totalAbs += absorptionLastStep;\n        }\n    }\n    return vec4(vec3(15, 0, 0) * totalAbs, 1.0 - opacity);\n}\n\nvec4 sampleFog2(vec3 pos, vec3 dir)\n{\n    float t = fog2Sdf(pos);\n    const float MARCH_SIZE = 0.01;\n    float opacity = 1.0;\n    float absorption = 10.0;\n    float totalAbs = 0.0;\n    for (int i = 0; i < 50; ++i) {\n        vec3 curPos = pos + (float(i) * MARCH_SIZE + t) * dir;\n        float sdf = fog2Sdf(curPos);\n        if (sdf < 0.0) {\n            float prevOpacity = opacity;\n            opacity *= BeerLambert(absorption * (\n            texture(iChannel3, curPos * 0.2).x\n            + texture(iChannel3, curPos * 0.4).x\n            + texture(iChannel3, curPos * 0.8).x\n            + texture(iChannel3, curPos * 1.6).x\n            ) * 0.25 * abs(sdf), MARCH_SIZE);\n            float absorptionLastStep = prevOpacity - opacity;\n            totalAbs += absorptionLastStep;\n        }\n    }\n    return vec4(vec3(3, 7, 1) * totalAbs, 1.0 - opacity);\n}\n\n\nvec3 randVals;\nvec3 randDir;\n\nvec3 computeLighting(vec3 worldPos, vec3 color, vec3 normal, vec3 viewVec) {\n    vec3 lightPos = LIGHT_POS + randDir * LIGHT_RADIUS;\n    vec3 toLight = lightPos - worldPos;\n    bool occl = isOccluded(worldPos + normalize(toLight) * 1e-3, lightPos);\n    float lightAtten = 20.0f / dot(toLight, toLight) * (occl ? 0.0 : 1.0);\n\n    vec3 light2Pos = LIGHT2_POS + randDir * LIGHT2_RADIUS;\n    vec3 toLight2 = light2Pos - worldPos;\n    bool occl2 = isOccluded(worldPos + normalize(toLight2) * 1e-3, light2Pos);\n    float light2Atten = 10.0f / dot(toLight2, toLight2) * (occl2 ? 0.0 : 1.0);\n\n    return color * (\n        max(0.0f, dot(normal, normalize(toLight))) * lightAtten * LIGHT_COLOR\n        + max(0.0f, dot(normal, normalize(toLight2))) * light2Atten * LIGHT2_COLOR\n        + textureLod(iChannel0, viewVec, 10.0) * 0.3\n    ).rgb;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 screenUV = fragCoord/iResolution.xy;\n    randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    randDir = normalize(randVals * 2.0 - 1.0);\n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (randVals.xy - 0.5) * 2.0)/iResolution.x;\n\n    vec3 forward = normalize(-CAMERA_POS);\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = normalize(cross(forward, up));\n    up = normalize(cross(right, forward));\n    vec3 viewVec = normalize(forward + uv.x * right + uv.y * up);\n\n    const float GLASS_N = 1.5;\n    const float AIR_N = 1.0;\n    float curN = 1.0;\n    float nextN = GLASS_N;\n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N + GLASS_N);\n    float GLASS_T = 1.0 - GLASS_R;\n\n    vec3 currentPos = CAMERA_POS;\n    \n    const int EMISSION = 0;\n    const int DIFFUSE = 1;\n    const int REFLECTION = 2;\n    const int REFRACTION = 3;\n    int iterationType;\n    vec3 color;\n    float mult = 1.0;\n\n    // Output to screen\n    for (int i = 0; i < 15; ++i) {\n        randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n        vec3 normal = vec3(0, 0, 0);\n\n        float t = traceSphere(currentPos - LIGHT_POS, viewVec, LIGHT_RADIUS, normal);\n        if (t != INF) {\n            color = LIGHT_COLOR.rgb * 5.0;\n            iterationType = EMISSION;\n        }\n        \n        float l2_t = traceSphere(currentPos - LIGHT2_POS, viewVec, LIGHT2_RADIUS, normal);\n        if (t > l2_t) {\n            t = l2_t;\n            color = LIGHT2_COLOR.rgb;\n            iterationType = EMISSION;\n        }\n        vec3 cubeNorm;\n        \n        float cubeT = traceCUBE(currentPos, viewVec, cubeNorm);\n        if (cubeT < t) {\n            t = cubeT;\n            normal = cubeNorm;\n            if (randVals.x < 5.*GLASS_R) {\n                iterationType = REFLECTION;\n            } else {\n                iterationType = REFRACTION;\n                if (dot(viewVec, normal) > 0.0) {\n                    nextN = AIR_N;\n                } else {\n                    nextN = GLASS_N;\n                }\n                \n            }\n        }\n        \n        vec3 cylNormal = normal;\n        float cylT = traceCylinder(currentPos, viewVec, cylNormal);\n        if (cylT < t) {\n            t = cylT;\n            vec3 pos = currentPos + t * viewVec;\n            color = texture(iChannel1, pos.xz * pos.y).rgb;\n            normal = cylNormal;\n            iterationType = DIFFUSE;\n        }\n        // (c + t * v).y = -1.2\n        // t = (-1.2 -c.y) / v.y\n        float floorT = (-1.2 - currentPos.y) / viewVec.y;\n        if (floorT > 0.0 && floorT < t && length(currentPos + floorT * viewVec) < 10.0f) {\n            t = floorT;\n            vec3 pos = currentPos + t * viewVec;\n            color = texture(iChannel2, pos.xz * 0.2).rgb;\n            normal = vec3(0, 1, 0);\n            iterationType = DIFFUSE;\n        }\n        if (t != INF) {\n            if (iterationType == EMISSION) {\n                fragColor.rgb = color;\n                break;\n            } else if (iterationType == DIFFUSE) {\n                fragColor.rgb += mult * computeLighting(currentPos + t * viewVec, color, normal, viewVec);\n                break;\n            } else if (iterationType == REFLECTION) {\n                currentPos += viewVec * t;\n                viewVec = reflect(viewVec, normal);\n                currentPos += viewVec * 1e-5;\n            } else if (iterationType == REFRACTION) {\n                currentPos += viewVec * t;\n                bool FullReflection=false;\n                viewVec = refraction(viewVec, normal, curN, nextN, FullReflection);\n                currentPos += viewVec * 1e-5;\n                if (!FullReflection) {\n                    vec4 fog = sampleFog(currentPos, viewVec);\n                    vec4 fog2 = sampleFog2(currentPos, viewVec);\n                    fragColor.rgb += fog.rgb * fog.a * mult;\n                    fragColor.rgb += fog2.rgb * fog.a * mult;\n                    mult *= 1.0 - fog.a;\n                    mult *= 1.0 - fog2.a;\n                    float tmp = curN;\n                    curN = nextN;\n                    nextN = tmp;\n                }\n            }\n        } else {\n            fragColor += mult * texture(iChannel0, viewVec) ;\n            break;\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 screenUV = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, screenUV) + texture(iChannel1, screenUV);\n}","name":"Buffer B","description":"","type":"buffer"}]}