{"ver":"0.1","info":{"id":"4cXSDM","date":"1705312222","viewed":66,"name":"Blood splash","username":"IAMDEAD","description":"v","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["rain"],"hasliked":0,"parentid":"ldSBWW","parentname":"Rain drops on screen"},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Author: Ã‰lie Michel\n// License: CC BY 3.0\n// July 2017\n\nvoid mainImage( out vec4 f, in vec2 c )\n{\n\tvec2 u = c / iResolution.xy,\n         n = texture(iChannel1, u * .1).rg;  // Displacement\n    \n    f = textureLod(iChannel0, u, 2.5);\n    \n    // Loop through the different inverse sizes of drops\n    for (float r = 4. ; r > 0. ; r--) {\n        vec2 x = iResolution.xy * r * .015,  // Number of potential drops (in a grid)\n             p = 6.28 * u * x + (n - .5) * 2.,\n             s = sin(p);\n        \n        // Current drop properties. Coordinates are rounded to ensure a\n        // consistent value among the fragment of a given drop.\n        vec4 d = texture(iChannel1, round(u * x - 0.25) / x);\n        \n        // Drop shape and fading\n        float t = (s.x+s.y) * max(0., 1. - fract(iTime * (d.b + .1) + d.g) * 2.);;\n        \n        // d.r -> only x% of drops are kept on, with x depending on the size of drops\n        if (d.r < (5.-r)*.08 && t > .5) {\n            // Drop normal\n            vec3 v = normalize(-vec3(cos(p), mix(.2, 2., t-.5)));\n            // fragColor = vec4(v * 0.5 + 0.5, 1.0);  // show normals\n            \n            // Poor man's refraction (no visual need to do more)\n            f = texture(iChannel0, u - v.xy * .3);\n            f.r += 0.1;\n            f.g -= 0.7;\n            f.b -= 0.9;\n        }\n    }\n}","name":"Image","description":"","type":"image"}]}