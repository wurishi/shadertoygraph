{"ver":"0.1","info":{"id":"cdy3zh","date":"1678161363","viewed":96,"name":"Base triangle","username":"oulazhishu","description":"Learn the basic drawing usage from https://www.shadertoy.com/view/lsBfRc ","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["basetriangle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define colorRange 24.0\n\nvec3 jodieReinhardTonemap(vec3 c){\n    float l = dot(c, vec3(0.2126, 0.7152, 0.0722));\n    vec3 tc = c / (c + 1.0);\n\n    return mix(c / (l + 1.0), tc, tc);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec3 color = pow(texture(iChannel0, uv).rgb * colorRange, vec3(2.2));\n    color = pow(color, vec3(2.2));\n    color = pow(color, vec3(1.0 / 2.2));\n    color = jodieReinhardTonemap(color);\n\tfragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define PI 3.14159265359\n#define TWO_PI 6.28318530718\n\n#define colorRange 24.0\n\n\nfloat getTriangle(vec2 p, vec2 rp){\n    p *= vec2(iResolution.x, iResolution.y);\n    p /= max(iResolution.x, iResolution.y);\n    \n    p -= rp;\n\n    vec3 color = vec3(0.0);\n    float d = 0.0;\n\n    // Remap the space to -1. to 1.\n    p = p *2.-1.;\n\n    // Number of sides of your shape\n    int N = 3;\n\n    // Angle and radius from the current pixel\n    float a = atan(p.x,p.y)+PI;\n    float r = TWO_PI/float(N);\n\n    // Shaping function that modulate the distance\n    d = cos(floor(.5+a/r)*r-a)*length(p);\n\n    return 1.0-step(.12,d);\n}\n\nvec3 getTexture(vec2 uv){\n    vec4 textureSample = texture(iChannel0, uv);\n\treturn sqrt(textureSample.rgb * textureSample.a);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / vec2(iResolution.x, iResolution.y);\n    \n    vec3 triangle = getTriangle(uv, vec2(0.0, -0.23)) * vec3(2.0, 30.0, 2.0) * 2.0;\n    \n    vec3 color =triangle;\n    \n    //color = pow(getTexture(uv), vec3(2.2)) * 10.0;\n    \n    fragColor = vec4(pow(color, vec3(1.0 / 2.2)) / colorRange,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}