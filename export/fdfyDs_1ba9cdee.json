{"ver":"0.1","info":{"id":"fdfyDs","date":"1642893839","viewed":79,"name":"FS WindMaker Tool wind sphere","username":"GabrieleGiuseppini","description":"Experiments for the Wind Maker tool.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["floatingsandbox"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","previewfilepath":"/media/ap/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float GetNoise(vec2 uv) // -> (0.0, 1.0)\n{\n    return texture(iChannel1, uv).r;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 _uv = fragCoord/iResolution.xy;\n    vec2 vertexPositionWorld = (_uv - vec2(.5)) * 2.; // -1...+1\n    vertexPositionWorld.x *= (iResolution.x / iResolution.y); // obey aspect ratio\n    \n    vec4 cBase = texture(iChannel0, vertexPositionWorld);\n    \n    // Make world between -100 and 100\n    #define WorldWidth 200.\n    vertexPositionWorld *= WorldWidth / 2.;\n    \n    vec2 centerPositionWorld = vec2(0.);\n\n    float paramTime = float(iTime) / 1.;\n    \n    float preFrontRadiusWorld = mod(paramTime, 4.) / 4. * WorldWidth;\n    float preFrontIntensity = 1.5;\n    float mainFrontRadiusWorld = (mod(paramTime, 4.) - .5) / 4. * WorldWidth;\n    float mainFrontIntensity = 1.;     \n    \n    ////////////////////////////////////////////////////////////////\n    \n    //\n    // 1. Sphere inclusion check\n    //\n    \n    #define IntensityMultiplier .1\n    \n    vec2 radiusArcWorld = vertexPositionWorld - centerPositionWorld;\n    \n    float pointRadiusWorld = length(radiusArcWorld);\n\n    float isInSphere = \n        (1.0 - step(preFrontRadiusWorld, pointRadiusWorld)) * preFrontIntensity * IntensityMultiplier\n        * step(mainFrontRadiusWorld, pointRadiusWorld)\n        +\n        (1.0 - step(mainFrontRadiusWorld, pointRadiusWorld)) * mainFrontIntensity * IntensityMultiplier;\n            \n    //\n    // 2. Wave inclusion check\n    //\n    \n    #define RadialFactor 1. / 200.\n    \n    // (r, a) (r=[0.0, +INF], a=[0.0, 1.0 CCW from W])\n    vec2 ra = vec2(\n        length(radiusArcWorld), \n        atan(radiusArcWorld.y, radiusArcWorld.x) / (2.0 * 3.14159265358979323844) + 0.5);\n        \n    float isInWave = GetNoise(vec2(ra.x * RadialFactor, ra.y) + vec2(-paramTime * .5, 0.));\n    \n    \n    //\n    // 3. Combine\n    //    \n    \n    float whiteDepth = isInSphere * isInWave;\n        \n    vec4 color = vec4(1., 1., 1., whiteDepth);\n    \n    ////////////////////////////////////////////////////////////////\n    \n    //fragColor = color * color + cBase; // GL_SRC_COLOR, GL_ONE, GL_FUNC_ADD\n    fragColor = mix(cBase, color, whiteDepth);\n}","name":"Image","description":"","type":"image"}]}