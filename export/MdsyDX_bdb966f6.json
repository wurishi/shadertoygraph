{"ver":"0.1","info":{"id":"MdsyDX","date":"1490186909","viewed":1309,"name":"Better Chromab","username":"yupferris","description":"Finally sitting down to make a stateless version of my chromatic aberration ramp function after a twitter conversation some months ago. Should've done this in the first place; took like 10mins :P","likes":15,"published":3,"flags":0,"usePreview":0,"tags":["chromaticaberration","branchless","ramp"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Dedicated to the public domain under CC0 1.0 Universal\n//  https://creativecommons.org/publicdomain/zero/1.0/legalcode\n\n#define saturate(x) (clamp((x), 0.0, 1.0))\n\n// Old, ugly branching version\nvec3 aberrationColorOld(float f)\n{\n    f *= 3.0;\n\n    if (f < .5)\n        return vec3(1.0, 0.0, 0.0);\n    if (f > 2.5)\n        return vec3(0.0, 0.0, 1.0);\n\n    if (f < 1.5)\n    {\n        f -= .5;\n\n        return vec3(1.0 - f, f, 0.0);\n    }\n\n    f -= 1.5;\n    return vec3(0.0, 1.0 - f, f);\n}\n\n// Newer, happy unicorns and rainbows version <3\nvec3 aberrationColorNewer(float f)\n{\n    f *= 3.0;\n    \n    float r = 1.0 - (f - 0.5);\n    float g = 1.0 - abs(f - 1.5);\n    float b = f - 1.5;\n    \n    return saturate(vec3(r, g, b));\n}\n\n// Newerer, happier, unicornsier and rainbowsier version of the above!\n//  Thanks to Rune Stubbe for some math optimizations here :)\nvec3 aberrationColor(float f)\n{\n    f = f * 3.0 - 1.5;\n    return saturate(vec3(-f, 1.0 - abs(f), f));\n}\n\nfloat lineDistance(float x, float l)\n{\n    return saturate(pow(saturate(1.0 - abs(l - x)), 400.0));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float scaledV = (saturate(uv.y) - 0.5) * 2.0 + 0.5;\n    vec3 gradient = aberrationColor(uv.x);\n    \n    float r = lineDistance(scaledV, gradient.r);\n    float g = lineDistance(scaledV, gradient.g);\n    float b = lineDistance(scaledV, gradient.b);\n    vec3 ramps = vec3(r, g, b);\n    \n    vec3 color = mix(ramps, gradient, step(0.9, uv.y));\n    \n\tfragColor = vec4(pow(color, vec3(1.0 / 2.2)), 1.0);\n}","name":"Image","description":"","type":"image"}]}