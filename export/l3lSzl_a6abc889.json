{"ver":"0.1","info":{"id":"l3lSzl","date":"1709861685","viewed":30,"name":"Flag of the Czech Republic","username":"dormon","description":"Simple shader with texture function for Czech flag.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["texture","antialiasing","flag","32","czech"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 czechFlag(vec2 uv){\n  const vec3 red   = vec3(215.f,20.f, 26.f)/255.f;\n  const vec3 blue  = vec3( 17.f,69.f,126.f)/255.f;\n  const vec3 white = vec3(1.f);\n  \n  vec3 color = red + float(uv.y>.5f)*(white-red);\n  \n  float v = abs(uv.y-0.5f)+uv.x-.5f;      //distance from \"v\"\n  float p = 1.f/iResolution.x;            //pixel size\n  float s = clamp((v+p)/(2.f*p),0.f,1.f); //smoothing from blue\n  \n  color = color*(s) + blue*(1.f-s);\n\n  return vec4(color,1.f);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv   = fragCoord/iResolution.y;\n  \n  // computing borders of 3/2 flag\n  const vec2 a = vec2(3.f,2.f);\n  int y = int(iResolution[0]/iResolution[1]<a[0]/a[1]);\n  uv[1-y]  = fragCoord[1-y]/iResolution[1-y];\n  uv[  y]  = fragCoord[  y]/(iResolution[1-y]/(a[1-y]/a[y]));\n  uv[  y] -= (a[1-y]/a[y]/(iResolution[1-y]/iResolution[y])-1.f)/2.f;\n  if(any(greaterThan(abs(uv-.5f),vec2(.5f)))){\n    fragColor=vec4(0);\n    return;\n  }\n  \n  fragColor = czechFlag(uv);\n}","name":"Image","description":"","type":"image"}]}