{"ver":"0.1","info":{"id":"NlSGzz","date":"1623184637","viewed":49,"name":"2d-Isolinea--v3","username":"jorge2017a1","description":"2d-Isolinea--v3","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2disolineav3"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n//referencia\n//https://iquilezles.org/articles/distance\n\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(1.0),b,d)\n#define S2(d,b) smoothstep(antialiasing(0.5),b,d)\n\n\n//----------oPeraciones de Repeticion\nfloat opRep1D( float p, float c )\n\t{ float q = mod(p+0.5*c,c)-0.5*c; return  q ;}\n    \n/*\nvec3 ponerBorde2(vec3 pColObj, vec3 colOut, float distObj )\n{\n  colOut = mix(colOut,pColObj ,S( distObj,0.0));\n  colOut = mix(colOut,vec3(0.0) ,S(abs( distObj),0.0));\n  return colOut;\n}\n*/\n//Corrected by FabriceNeyret2,\nvec3 ponerBorde2(vec3 pColObj, vec3 colOut, float distObj )\n{\n  colOut = distObj > 0. ? colOut : pColObj;\n  colOut = mix(colOut,vec3(0) ,smoothstep( fwidth(distObj), 0., abs(distObj) ));\n  return colOut;\n}\n\n\nvec3 ponerBorde(vec3 pColObj, vec3 colOut, float distObj )\n{\n  colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  colOut = mix(colOut,vec3(0.0) ,S2(abs( distObj),0.0));\n  return colOut;\n}\n\n\n///---------------\n// Noise stuff\nfloat rand(vec2 n){ \n\treturn fract(sin(dot(n, vec2(17.12037, 5.71713))) * 12345.6789);\n}\nfloat noise(vec2 n){\n\tvec2 d = vec2(0.0, 1.0);\n\tvec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\n\treturn mix(mix(rand(b + d.xx), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\n}\n\nfloat fbm2(vec2 n, float t)\n{\n\tfloat sum = 0.0, amp = 1.0;\n\tfor (int i = 0; i < 10; i++){\n        n.x += t;\n\t\tsum += noise(n) * amp;\n\t\tn += n;\n\t\tamp *= 0.5;\n\t}\n\treturn sum;\n}\n\n\nfloat IsoLineaFra(vec2 p)\n{\n    float x,y;\n    float a, r;\n    x=p.x; y=p.y;\n    \n    \n    r = sqrt(x*x+y*y);\n    a = atan(y,x);\n    \n    float fra = r - 1.0 + fbm2(p, r);\n    return fra;\n}\n\nfloat IsoLineaFra2(vec2 p)\n{\n    float x,y;\n    float a, r;\n    x=p.x; y=p.y;\n    \n    \n    r = sqrt(x*x+y*y);\n    a = atan(y,x);\n    \n    \n    float fra = r - 1.0 + fbm2(p, a);\n    return fra;\n}\n\n\nfloat IsoLineaFra3(vec2 p)\n{\n    float x,y;\n    float a, r;\n    x=p.x; y=p.y;\n    \n    \n    r = sqrt(x*x+y*y);\n    a = atan(y,x);\n    \n    float fra = r - 1.0 + fbm2(p, a+r);\n    return fra;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    \n    vec2 uv = -1.0 + 2.0 * fragCoord.xy/iResolution.xy;\n\tuv.x *= iResolution.x/iResolution.y;\n    uv*=1.2;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    float isf1= IsoLineaFra(uv);\n    float isf2= IsoLineaFra2(uv-vec2(1.25,0.0) );\n    float isf3= IsoLineaFra3(uv-vec2(-1.25,0.0));\n    \n    col= ponerBorde2(vec3(0.5), col, isf1 );\n    col= ponerBorde2(vec3(1.0,0.0,0.0), col, isf2 );\n    col= ponerBorde2(vec3(0.0,0.0,1.0), col, isf3 );\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}