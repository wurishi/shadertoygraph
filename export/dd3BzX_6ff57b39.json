{"ver":"0.1","info":{"id":"dd3BzX","date":"1697452391","viewed":63,"name":"Skybox for Voxelius","username":"untodesu","description":"based on: https://www.shadertoy.com/view/Ml2cWG","likes":2,"published":1,"flags":16,"usePreview":0,"tags":["sky"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define M_PI    3.14159265358979323846\n#define M_PI_2  1.57079632679489661923\n#define M_PI_4  0.78539816339744830962\n#define M_1_PI  0.31830988618379067154\n#define M_2_PI  0.63661977236758134308\n\n#define zenith_offset 0.0\n#define scatter_phase 0.1\n#define atmospheric_density 0.7\n#define anisotropic_intensity 0.0\n\n#define sky_color vec3(0.529, 0.808, 0.922) * (1.0 + anisotropic_intensity)\n\nfloat great_circle_dist(vec2 p, vec2 lp)\n{\n    return acos(sin(p.y) * sin(lp.y) + cos(p.y) * cos(lp.y) * cos(p.x - lp.x));\n}\n\nfloat get_zenith_density(float x)\n{\n    return atmospheric_density / pow(max(x - zenith_offset, 0.35e-2), 0.75);\n}\n\nvec3 get_sky_absorption(vec3 x, float y)\n{\n    return exp2(-1.0 * x * y) * 2.0;\n}\n\nfloat get_sun_point(vec2 p, vec2 lp)\n{\n    return smoothstep(0.03, 0.02, great_circle_dist(p, lp)) * 50.0;\n}\n\nfloat get_rayleigh_mult(vec2 p, vec2 lp)\n{\n    return 1.0 + pow(1.0 - clamp(great_circle_dist(p, lp), 0.0, 1.0), 2.0) * M_PI_2;\n}\n\nfloat get_mie(vec2 p, vec2 lp)\n{\n    float disk = clamp(1.0 - sqrt(great_circle_dist(p, lp)), 0.0, 1.0);\n    return disk * disk * (3.0 - 2.0 * disk) * M_2_PI;\n}\n\nvec3 get_scatter(vec2 p, vec2 lp)\n{\n    float zenith = get_zenith_density(p.y);\n    float sun_point = clamp(length(max(lp.y + scatter_phase - zenith_offset, 0.0)), 0.0, 1.0);\n    float rayleigh = get_rayleigh_mult(p, lp);\n\n    vec3 absorp = get_sky_absorption(sky_color, zenith);\n    vec3 sun_absorp = get_sky_absorption(sky_color, get_zenith_density(lp.y + scatter_phase));\n    vec3 sun = get_sun_point(p, lp) * absorp;\n    vec3 sky = sky_color * zenith * rayleigh;\n    vec3 mie = get_mie(p, lp) * sun_absorp;\n\n    vec3 result = vec3(0.0, 0.0, 0.0);\n    result += mix(sky * absorp, sky / (sky + 0.5), sun_point);\n    result += sun + mie;\n    result *= sun_absorp * 0.5 + 0.5 * length(sun_absorp);\n    return result;\n}\n\nvec3 tonemap(vec3 color)\n{\n    float l = dot(color, vec3(0.2126, 0.7152, 0.0722));\n    vec3 tcol = color / (color + 1.0);\n    return mix(color / (l + 1.0), tcol, tcol);\n}\n\nvec2 screen_to_world(vec2 pos)\n{\n    if(texelFetch(iChannel0, ivec2(32, 2), 0).x < 0.5) {\n        pos = (pos.xy / iResolution.xy - 0.5) * vec2(iResolution.x / iResolution.y, 1.0);\n        return vec2(atan(pos.y, pos.x), (0.5 - length(pos)) * M_PI);\n    }\n    \n    return (pos / iResolution.xy - 0.5) * vec2(2.0, 1.0) * M_PI;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 p = screen_to_world(fragCoord.xy);\n    vec2 lp = screen_to_world(iMouse.xy);\n\n    vec3 color = get_scatter(p, lp);\n    color = tonemap(color);\n    color = pow(color, vec3(2.2, 2.2, 2.2));\n\n    fragColor = vec4(color.x, color.y, color.z, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}