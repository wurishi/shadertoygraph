{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"cubemap","id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"code":"const float pi = 3.14159265358979;\n\nmat4 rotmat( float angle_rad, vec3 rotvec )\n{\n\tmat4 ret;\n\t\n\tfloat c = cos( angle_rad );\n\tfloat s = sin( angle_rad );\n\tfloat t = 1.0 - c;\n\t\n\tret[0].x = t*rotvec[0]*rotvec[0] + c;\n\tret[0].y = t*rotvec[0]*rotvec[1] - s*rotvec[2];\n\tret[0].z = t*rotvec[0]*rotvec[2] + s*rotvec[1];\n\tret[0].w = 0.0;\n\n\tret[1].x = t*rotvec[0]*rotvec[1] + s*rotvec[2];\n\tret[1].y = t*rotvec[1]*rotvec[1] + c;\n\tret[1].z = t*rotvec[1]*rotvec[2] - s*rotvec[0];\n\tret[1].w = 0.0;\n\n\tret[2].x = t*rotvec[0]*rotvec[2] - s*rotvec[1];\n\tret[2].y = t*rotvec[1]*rotvec[2] + s*rotvec[0];\n\tret[2].z = t*rotvec[2]*rotvec[2] + c;\n\tret[2].w = 0.0;\n\t\n\tret[3].x = 0.0;\n\tret[3].y = 0.0;\n\tret[3].z = 0.0;\n\tret[3].w = 1.0;\n\t\n\treturn ret;\n}\n\n\n//remaps interval [a;b] to [0;1]\nfloat remap( float t, float a, float b ) {\n\treturn clamp( (t - a) / (b - a), 0.0, 1.0 );\n}\n\nvec3 fisheye0( vec2 p, float m )\n{\n\tvec2 ctrvec = vec2(0.5)-p;\n\tfloat rot = length(ctrvec) * m; //TODO: fov_y directly?\n\t//rot = pow(rot, 0.25 );\n\tvec3 rotvec = vec3( ctrvec.y, -ctrvec.x, 0 );\n\tvec4 fwd = vec4(0,0,-1,1);\n\tvec3 dir = (rotmat(rot, rotvec) * fwd).xyz;\n\n\treturn dir;\n\t\n\tvec2 uv = p * 2.0 - 1.0;\n\tvec3 dlin = normalize( vec3(uv,-2.5) );\n\t\n\tfloat t = remap( rot, 0.1, 0.5 );\n\treturn mix( dlin, dir, t );\n}\n\n\nvec3 fisheye1( vec2 uv, float m)\n{\n\tuv = uv * 2.0 - 1.0;\n\tuv.y*=iResolution.y/iResolution.x;\n\tuv *= 6.0 * m;\n\n\tvec3 dir = vec3( uv.x, uv.y, sqrt(1.0-dot(uv.xy,uv.xy) ) );\n\n\tfloat l = length(dir);\n\tdir /= l;\n\n\treturn dir;\n\t//return (l<1.01) ? dir : vec3(0,0,0);\n}\n\nvec3 fisheye2( vec2 uv, float m)\n{\n\tuv = uv * 2.0 - 1.0;\n\tuv.y*=iResolution.y/iResolution.x;\n\tuv *= 6.0 * m;\n\n\tvec3 dir = vec3( uv.x, uv.y, 1.0-dot(uv.xy,uv.xy) );\n\n\tfloat l = length(dir);\n\tdir /= l;\n\n\treturn dir;\n\t//return (l<1.01) ? dir : vec3(0,0,0);\n}\n\n//spherical\nvec3 fisheye3( vec2 uv, float m )\n{\n\tfloat aspect = iResolution.x / iResolution.y;\n\n\tfloat fov_y = 720.0 * m;\n\tfloat vt_angle = fov_y * pi / 180.0;\n\tfloat hz_angle = aspect * vt_angle;\n\n\tuv -= 0.5;\n\n\tfloat theta = 0.5 * pi + vt_angle * uv.y;\n\tfloat phi = -pi + hz_angle * uv.x;\n\n\tvec3 dir = vec3(  sin(theta)*cos(phi),\n\t\t\t\t\t -cos(theta),\n\t\t\t\t\t  sin(theta)*sin(phi)\n\t\t\t\t\t);\n\treturn dir;\n}\n\n//note: from https://www.shadertoy.com/view/XdfGzS\nvec3 fisheye4( vec2 uv, float m )\n{\n\tuv = uv * 2.0 - 1.0;\n\tuv.y*=iResolution.y/iResolution.x;\n\tuv *= 6.0 * m;\n\n\tvec3 d = vec3(uv,1.0);\n\td.z -= length(d)*.7; //lens distort\n\td = normalize(d);\n\t\n\treturn d;\n}\n\n//TODO: https://www.shadertoy.com/view/lsfGWr\n\n//vec2 barrelDistortion( vec2 coord ) {\n//\tvec2 cc = coord;\n//\tfloat distsq = dot(cc, cc);\n//\treturn coord + cc * (distsq * distsq) * 1.5;\n//}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\n    bool control_version = iMouse.y / iResolution.y < 2.0 * 0.05;\n    \n    float m = 0.125 * pi;\n    if ( !control_version && iMouse.z > 0.5 )\n        m = (1.0-iMouse.x / iResolution.x ) * pi;\n\n    float ver = mod( iTime, 10.0 );\n    \n    if ( iMouse.z > 0.5 && control_version )\n    {\n        ver = iMouse.x / iResolution.x * 10.0;\n    }\n\t\n    //TODO: rotate\n    \n\tvec3 dir;\n\tif ( ver < 2.0 ) \n\t\tdir = fisheye0( uv, 10.0 * m );\n\telse if ( ver < 4.0 )\n\t\tdir = fisheye1( uv, m );\n\telse if ( ver < 6.0 )\n\t\tdir = fisheye2( uv, m );\n\telse if ( ver < 8.0 )\n\t\tdir = fisheye3( uv, m );\n\telse\n\t\tdir = fisheye4( uv, m );\n\t\t\t\t\n\tfragColor = texture(iChannel0, dir);\n        \n    if ( uv.y < 0.05 )\n    {\n        float v0 = floor(ver/2.0)*2.0;\n        float v1 = floor((ver+2.0)/2.0)*2.0;\n        float s = 1.0;\n        s *= step(v0/10.0, uv.x);\n        s *= step(uv.x, v1/10.0 );\n        fragColor.rgb = vec3( s );\n    }\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4dBGDV","date":"1393329049","viewed":198,"name":"Projection: Fisheyes","username":"hornet","description":"various fisheye projections","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["cubemap","fisheye"],"hasliked":0,"parentid":"","parentname":""}}