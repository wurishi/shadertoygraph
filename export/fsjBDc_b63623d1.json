{"ver":"0.1","info":{"id":"fsjBDc","date":"1647273359","viewed":194,"name":"Basic And Fast Dissolve Shader","username":"Sayuri","description":"Can be faster with better hash/noise.","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["dissolve"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float hash (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\n// Based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = hash(i);\n    float b = hash(i + vec2(1.0, 0.0));\n    float c = hash(i + vec2(0.0, 1.0));\n    float d = hash(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\nfloat fbm (vec2 st) {\n    // Initial values\n    float value = 0.0;\n    float amplitude = .5;\n\n    // Loop of octaves\n    for (int i = 0; i < 3; i++) {\n        value += amplitude * noise(st);\n        st *= 2.0;\n        amplitude *= .5;\n    }\n    return value;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Use fbm to decrease alpha\n    float alpha = smoothstep(sin(iTime), 1.0, fbm(uv * 10.0));\n   \n\n    // Output to screen\n    fragColor = vec4(texture(iChannel0, uv).xyz * alpha, alpha);\n}","name":"Image","description":"","type":"image"}]}