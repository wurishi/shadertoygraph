{"ver":"0.1","info":{"id":"wdKBRh","date":"1606594518","viewed":228,"name":"Starfield Test 1","username":"notchris","description":"A starfield","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["stars","pixels"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PASS_COUNT 1\n\nfloat fBrightness=2.5;\nfloat fSteps=222.;\nfloat fParticleSize=.015;\nfloat fParticleLength=.5/60.;\nfloat fMinDist=.8;\nfloat fMaxDist=5.;\nfloat fRepeatMin=1.;\nfloat fRepeatMax=2.;\nfloat fDepthFade=1.2;\n\nconst float sharpness=2.;\n\nfloat Random(float x)\n{\n    return fract(sin(x*123.456)*23.4567+sin(x*345.678)*45.6789+sin(x*456.789)*56.789);\n}\n\nvec3 GetParticleColour(const in vec3 vParticlePos,const in float fParticleSize,const in vec3 vRayDir)\n{\n    vec2 vNormDir=normalize(vRayDir.xy);\n    float d1=dot(vParticlePos.xy,vNormDir.xy)/length(vRayDir.xy);\n    vec3 vClosest2d=vRayDir*d1;\n\n    vec3 vClampedPos=vParticlePos;\n\n    vClampedPos.z=clamp(vClosest2d.z,vParticlePos.z-fParticleLength,vParticlePos.z+fParticleLength);\n\n    float d=dot(vClampedPos,vRayDir);\n\n    vec3 vClosestPos=vRayDir*d;\n\n    vec3 vDeltaPos=vClampedPos-vClosestPos;\n\n    float fClosestDist=length(vDeltaPos)/fParticleSize;\n\n    float fShade=clamp(1.-fClosestDist,0.,1.);\n\n    fShade=fShade*exp2(-d*fDepthFade)*fBrightness;\n\n    return vec3(fShade);\n}\n\nvec3 GetParticlePos(const in vec3 vRayDir,const in float fZPos,const in float fSeed)\n{\n    float fAngle=atan(vRayDir.x,vRayDir.y);\n    float fAngleFraction=fract(fAngle/(3.14*2.));\n\n    float fSegment=floor(fAngleFraction*fSteps+fSeed)+.5-fSeed;\n    float fParticleAngle=fSegment/fSteps*(3.14*2.);\n\n    float fSegmentPos=fSegment/fSteps;\n    float fRadius=fMinDist+Random(fSegmentPos+fSeed)*(fMaxDist-fMinDist);\n\n    float tunnelZ=vRayDir.z/length(vRayDir.xy/fRadius);\n\n    tunnelZ+=fZPos;\n\n    float fRepeat=fRepeatMin+Random(fSegmentPos+.1+fSeed)*(fRepeatMax-fRepeatMin);\n\n    float fParticleZ=(ceil(tunnelZ/fRepeat)-.5)*fRepeat-fZPos;\n\n    return vec3(sin(fParticleAngle)*fRadius,cos(fParticleAngle)*fRadius,fParticleZ);\n}\n\nvec3 Starfield(const in vec3 vRayDir,const in float fZPos,const in float fSeed)\n{\n    vec3 vParticlePos=GetParticlePos(vRayDir,fZPos,fSeed);\n    return GetParticleColour(vParticlePos,fParticleSize,vRayDir);\n}\n\nfloat sharpen(float pix_coord){\n    float norm=(fract(pix_coord)-.5)*2.;\n    float norm2=norm*norm;\n    return floor(pix_coord)+norm*pow(norm2,sharpness)/2.+.5;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 vScreenPos=uv*2.-1.;\n    vScreenPos.x*=iResolution.x/iResolution.y;\n\n    vec3 vRayDir=normalize(vec3(vScreenPos,1.));\n\n    float fShade=0.;\n\n    float fZPos=5.+iTime;\n\n    fParticleLength=.00001;\n\n    float fSeed=0.;\n\n    vec3 vResult=mix(vec3(0.),vec3(0.),vRayDir.y*.5+.5);\n\n    for(int i=0;i<PASS_COUNT;i++)\n    {\n        vResult+=Starfield(vRayDir,fZPos,fSeed);\n        fSeed+=1.234;\n    }\n\n    vec4 resultA=vec4(sqrt(vResult),1.);\n    fragColor=resultA;\n}","name":"Image","description":"","type":"image"}]}