{"ver":"0.1","info":{"id":"3tfSRf","date":"1563675588","viewed":856,"name":"RayMarchingBand008","username":"Hirai_worthless","description":"huh.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float PI = 3.14159265;\nfloat temp(){\n    return (floor(iTime) + min(sin(fract(iTime) * PI / 2.0) * 2.0,1.0));\n}\nfloat map(vec3 p){\n    p = mod(abs(p), 1.5) - 0.75;\n\n    float rot = temp() * PI / 2.0;\n    float size = sin(rot * 2.0 + PI / 4.0);\n    p.xz *= mat2(cos(rot),-sin(rot),sin(rot),cos(rot));\n    float sphere = length(p) - 0.5;\n\tfloat cube = max(max(abs(p.x) - 0.5,abs(p.y) - 0.5),abs(p.z) - 0.5);\n    float obj = mix(sphere,cube,0.5 - size * 0.5);\n    float poleY = length(p.xz) - 0.1 * size;\n    float holes = 100000000.0;\n    for(float i = -0.25; i < 0.50; i += 0.25){\n        for(float j = -0.25; j < 0.50; j += 0.25){\n        \tfloat holeZ = length(p.xy - vec2(i,j)) - 0.075 * (1.0 - size);\n    \t\tfloat holeX = length(p.yz - vec2(i,j)) - 0.075 * (1.0 - size);\n    \t\tholes = min(holes,holeX);\n        \tholes = min(holes,holeZ);\n        }\n    }\n\n    return max(min(obj,poleY),-holes);\n\t\n\n}\n\nconst float EPS = 0.001;\nvec3 getNormal(vec3 p) {\n    return normalize(vec3(\n        map(p + vec3(EPS, 0.0, 0.0)) - map(p + vec3(-EPS,  0.0,  0.0)),\n        map(p + vec3(0.0, EPS, 0.0)) - map(p + vec3( 0.0, -EPS,  0.0)),\n        map(p + vec3(0.0, 0.0, EPS)) - map(p + vec3( 0.0,  0.0, -EPS))\n    ));\n}\n\nvec4 trace (vec3 o, vec3 r){\n\tfloat t = 0.0;\n    vec3 p = vec3(0.0,0.0,0.0);\n    \n    for(int i = 0; i < 32; ++i){\n        p = o + r * t;\n        float d = map(p);\n        t += d * 0.5;\n    }\n    return vec4(getNormal(p),t);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord.xy /iResolution.xy;\n\tuv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    vec3 r = normalize(vec3(uv,1.0));\n    float rot = temp() * PI / 4.0;\n    r.xy *= mat2(cos(rot),-sin(rot),sin(rot),cos(rot));\n    vec3 o = vec3(0,0,iTime * 4.0);\n    vec4 data = trace(o,r);\n    float t = data.w;\n    float fog = 1.0 / (1.0 + t * t * 0.2);\n    vec3 fc = mix(vec3(0.5 - data.x,0.5 -data.y,0.5-data.z),vec3(0),1.0 - fog);\n\t//fc = vec3(fog);\n    // Output to screen\n    fragColor = vec4(fc,1.0);\n}","name":"Image","description":"","type":"image"}]}