{"ver":"0.1","info":{"id":"DdX3WH","date":"1666031490","viewed":235,"name":"Interior Distance Detect Errors","username":"jt","description":"Added error detection & visualization:[code]map(p - gradient(p) * map(p)) != 0[/code].\nJump the distance given by the SDF in the direction of the nearest surface.\nBecause the SDF is supposed to describe the distance to the surface,\nthe result should be 0.","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["2d","distancefield","sdf","distance","min","union"],"hasliked":0,"parentid":"3t33WH","parentname":"Interior Distance"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/DdX3WH Interior Distance Detect Errors by jt\n// Fork of https://www.shadertoy.com/view/3t33WH Interior Distance by iq\n// Added automatic error detection & visualization as suggested by spalmer:\n//     map(p - gradient(p) * map(p)) != 0\n// \"Jump the distance given by the SDF at the current position\n//  along the gradient given by the SDF at the current position\n//  (direction to the nearest surface) and evaluate the SDF there.\n//  Because the SDF is supposed to describe the minimal distance to the surface,\n//  the result should be (close to) zero.\" (translation from math to words: jt)\n// Intended to check if a sdf is euclidean distance (aka \"true\" or \"exact\" sdf).\n// (Note that the thin lines are harmless false alarms,\n//  caused by numerical gradient evaluation at gradient discontinuities.\n//  Among others these occur at \"Spines\", i.e. minima inside objects, and at reflections).\n// The other, simpler, condition is length(gradient(p)) = 1\n// Do these two equations define what we consider to be a true/exact euclidean signed distance function?\n// Or are there more? References (papers/articles) welcome - I'm still learning about this stuff!\n// If anyone can come up with an incorrect sdf that evades these tests: please post!\n\n// As the original, the addons are MIT licensed.\n// Addons: The MIT License Copyright (c) 2022 Jakob Thomsen (jt), spalmer\n// (jt wrote the code so takes credits for any bugs ;-) spalmer supplied the math)\n\n// The MIT License\n// Copyright Â© 2020 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// This shader shows how the usual union SDF operator implemented\n// with min() produces the incorrect SDF in the interior of the shapes.\n// If the modeling is reversed and the exterior of the negative\n// space of the shape is modeled, then the exterior distance is wrong.\n//\n// While this is not an issue in most cases in practice, it can be\n// a problem in shaders that need to raymarch or do some other\n// distance based volumetric operations in the interior of the\n// shapes.\n//\n// This shader implements both correct interior and exterior distances\n// by modeling the boundary of the shape instead. Alternativelly, the\n// appropriate interior or exterior correct SDF could be chosen as\n// needed, but then there is double modeling work.\n//\n// More info here:\n// https://iquilezles.org/articles/interiordistance\n\n\n\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat msign( in float x ) { return (x>0.0)?1.0:-1.0; }\n\n// https://iquilezles.org/articles/distfunctions2d\nfloat sdCircle( in vec2 p, in vec2 c, in float r )\n{\n    return length(p-c) - r;\n}\n\n// https://iquilezles.org/articles/distfunctions2d\nfloat sdBox( in vec2 p, in vec2 c, in vec2 b ) \n{\n    vec2 q = abs(p-c) - b;\n    return min(max(q.x,q.y),0.0) + length(max(q,0.0));\n}\n\n// https://iquilezles.org/articles/distfunctions2d\nvec2 sdSqLine( in vec2 p, in vec2 a, in vec2 b )\n{\n\tvec2 pa = p-a, ba = b-a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn vec2( dot2(pa-ba*h), ba.x*pa.y-ba.y*pa.x );\n}\n\nfloat sdCrescent(vec2 p, float r0, float r1, float d, float sign0, float sign1)\n{\n    float a = (r0*r0 - r1*r1 + d*d) / (2.0 * d);\n    \n    if( a < r0)\n    {\n        p.y = abs(p.y);\n        float b = sqrt(r0*r0-a*a);\n        float k = p.y*a - p.x*b;\n        float h = min(d*sign0*(d*(p.y-b)-k ),\n                      d*sign1*k);\n        if (h>0.0)\n        {\n            return length(p-vec2(a,b));\n        }\n    }\n    \n    return max(sign0*(length(p          )-r0),\n               sign1*(length(p-vec2(d,0))-r1));\n}\n\n// https://iquilezles.org/articles/distfunctions2d\nvec2 sdSqArc( in vec2 p, in vec2 a, in vec2 b, in float h, float d2min )\n{\n    vec2  ba  = b-a;\n    float l   = length(ba);\n    float ra2 = h*h + l*l*0.25;\n\n    // recenter\n    p -= (a+b)/2.0 + vec2(-ba.y,ba.x)*h/l;\n    \n    float m = ba.y*p.x-ba.x*p.y;\n    float n = dot(p,p);\n    \n    if( abs(h)*abs(ba.x*p.x+ba.y*p.y) < msign(h)*l*0.5*m )\n    {\n        d2min = min( d2min, n + ra2 - 2.0*sqrt(n*ra2) );\n    }\n\n    return vec2(d2min, -max(m,ra2-n) );\n}\n\n\n//------------------------------------------------------------\n\n\n\n// SDF of a shape made of a set line and arc segments\nfloat sdShape( in vec2 p, int kType[7], float kPath[17] )\n{\n    vec2 vb = vec2(kPath[0],kPath[1]);\n    \n    float d = dot2(p-vb);\n    int off = 0;\n    float s = 1.0;\n    for( int i=0; i<kType.length(); i++ )\n    {\n        vec2 va = vb;\n        vec2 ds;\n        \n        if( kType[i]==0) // line (x,y)\n        {\n            vb = vec2(kPath[off+2],kPath[off+3]);\n            ds = sdSqLine( p, va, vb );\n            off += 2;\n        }\n        else if( kType[i]==1) // arc (x,y,r)\n        {\n            vb = vec2(kPath[off+3],kPath[off+4]);\n            ds = sdSqArc(p, va, vb, kPath[off+2], d );\n        \toff += 3;\n\n        }\n        \n        // in/out test\n        bvec3 cond = bvec3( p.y>=va.y, p.y<vb.y, ds.y>0.0 );\n        if( all(cond) || all(not(cond)) ) s*=-1.0;  \n\n        d = min( d, ds.x );\n    }\n\treturn s*sqrt(d);\n}\n              \n// correct outside, incorrect inside\nfloat sdA( in vec2 p )\n{\n    float d = sdCircle( p, vec2(-0.4, 0.3), 0.5);\n    d = min(d,sdBox( p, vec2( 0.4,-0.4), vec2(0.4,0.4) ));\n    d = min(d,sdBox( p, vec2( 0.0, 0.0), vec2(0.4,0.8) ));\n    return d;\n}\n\n// correct inside, incorrect outside\nfloat sdB( in vec2 p )\n{\n   float d =     sdBox( p, vec2( 0.0, 1.0), vec2(2.0,0.2) );\n       d = min(d,sdBox( p, vec2( 1.2, 1.0), vec2(0.8,1.0) ));\n       d = min(d,sdBox( p, vec2( 1.4,-0.3), vec2(0.6,0.9) ));\n       d = min(d,sdBox( p, vec2( 0.0,-1.0), vec2(1.0,0.2) ));\n       d = min(d,sdBox( p, vec2(-1.2,-0.8), vec2(0.8,0.6) ));\n       d = min(d,sdBox( p, vec2(-1.5, 0.3), vec2(0.6,0.7) ));\n       d = min(d,sdCrescent( p-vec2(-0.4-1.0, 0.3), 1.1, 0.5, 1.0, 1.0, -1.0 ));\n    return -d;\n}\n\n// correct both in side and outside\nfloat sdC( in vec2 p )\n{\n\tint kType[] = int[](0,0,0,0,0,0,1);\n\tfloat kPath[] = float[](-0.4, 0.8,\n                             0.4, 0.8,\n                             0.4,-0.0,\n                             0.8,-0.0,\n                             0.8,-0.8,\n                            -0.4,-0.8,\n                            -0.4,-0.2, 0.0,\n                            -0.4, 0.8 );\n    return sdShape(p,kType,kPath );\n}\n\nfloat map(vec2 p)\n{\n\n    // distance computations\n    float dWrongInterior = sdA(p); // interior modeling\n    float dWrongExterior = sdB(p); // exterior modeling\n    float dCorrectBoth   = sdC(p); // boundary modeling\n\n    // animation\n    float f = fract(iTime/8.0);\n    float g = fract(iTime/2.0);\n    float d = (f<0.5) ? ((g<0.5)?dWrongInterior:dCorrectBoth) \n                      : ((g<0.5)?dWrongExterior:dCorrectBoth);\n\n    return d;\n}\n\n#define EPSILON 0.001\n\n// part of sdf error detection (jt/spalmer)\nvec2 gradient(vec2 p) // NOT normalized so we can use it's length to detect errors in the SDF.\n{\n    vec2 h = vec2(EPSILON,0);\n    return (vec2(map(p+h.xy) - map(p-h.xy),\n                 map(p+h.yx) - map(p-h.yx)))/EPSILON/2.0;\n}\n\n#define pi 3.1415926\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // normalized pixel coordinates\n    vec2 p = (fragCoord*2.0-iResolution.xy)/iResolution.y;\n    \n    float d = map(p);\n    \n    // iq's coloring\n    vec3 col = (d<0.0) ? vec3(0.6,0.8,1.0) : vec3(0.9,0.6,0.3);\n    col *= 1.0 - exp(-9.0*abs(d));\n\tcol *= 1.0 + 0.2*cos(128.0*abs(d));\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.015,abs(d)) );\n    // iq's mouse distance visualization\n    if( iMouse.z>0.001 )\n    {\n        vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n        d = map(m);\n        col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, abs(length(p-m)-abs(d))-0.0025));\n        col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, length(p-m)-0.015));\n    }\n\n    // sdf error detection (jt/spalmer)\n    {\n        // Jump the distance given by the SDF at the current position\n        // along the gradient given by the SDF at the current position\n        // (direction to the nearest surface) and evaluate the SDF there.\n        // Because the SDF is supposed to describe the minimal distance to the surface,\n        // the result should be (close to) zero. (translation from math to words: jt)\n        float error = map(p - gradient(p) * map(p)); // SDF error detection suggested to me by spalmer - thanks!\n        //col += smoothstep(0.0,sqrt(EPSILON), abs(error)) * (cos(iTime*2.0*pi)*0.5+0.5); // detect both interior and exterior errors (NOTE: false alarms on some shapes)\n        col.r += smoothstep(0.0,/*sqrt*/(EPSILON), abs(error)) * (cos(iTime*2.0*pi)*0.5+0.5); // detect both interior and exterior errors (NOTE: false alarms on some shapes)\n    }\n\n    // output\n\tfragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}