{"ver":"0.1","info":{"id":"XsVyRt","date":"1522953258","viewed":282,"name":"Capped cone","username":"MrShoor","description":"Small sample of capped cone ray intersection","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["raytrace"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"bool SolveSquare(float A, float B, float C, out vec2 x) {\n    float D = B*B - 4.0 * A * C;\n    if (D < 0.0) return false;\n    x.x = (-B - sqrt(D)) / (2.0 * A);\n    x.y = (-B + sqrt(D)) / (2.0 * A);\n    return true;\n}\n\nbool ConeIntersect(float ConeR, vec2 ConeCaps, vec3 ro, vec3 rd, out float t, out vec3 norm) {\n    float Al = ConeR * rd.z;\n    float Bl = ConeR * ro.z;\n    \n    float A = dot(rd.xy, rd.xy) - Al*Al;\n    float B = 2.0*(dot(rd.xy, ro.xy) - Al*Bl);\n    float C = dot(ro.xy, ro.xy) - Bl*Bl;\n    \n    vec2 tt;\n    if (!SolveSquare(A, B, C, tt)) return false;\n    vec2 zz = ro.zz + rd.zz*tt;\n    \n    int n = 2;\n    if ((zz.x < ConeCaps.x)||(zz.x > ConeCaps.y)) {\n        tt.x = tt.y;\n        n--;\n    }\n    if ((zz.y < ConeCaps.x)||(zz.y > ConeCaps.y)) {\n        tt.y = tt.x;\n        n--;\n    }\n    if (n==0) return false;\n    t = min(tt.x, tt.y);\n    \n    norm.xy = normalize(ro.xy + rd.xy*t);\n    norm.z = -ConeR * sign(ro.z + rd.z*t);\n    norm = normalize(norm);\n    \n    return true;\n}\n\nmat3 RotateTransform()\n{\n    mat3 res;\n    float t = iTime;\n    res[2] = normalize(vec3(cos(t), sin(t), cos(t)));\n    res[1] = vec3(cos(t), sin(t), 0.0);\n    res[0] = normalize(cross(res[1], res[2]));\n    res[1] = normalize(cross(res[2], res[0]));\n    return res;\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    vec3 rd;\n    rd.xy = 2.0*fragCoord.xy/iResolution.xy - 1.0;\n    rd.x *= iResolution.x/iResolution.y;\n    rd.z = 1.0;\n    \n    vec3 ro = vec3(0.0,0.0,-10.0);\n    mat3 m = RotateTransform();\n    ro = ro * m;\n    rd = rd * m;\n    \n    rd = normalize(rd);\n       \n    vec4 Out;\n    vec3 crd, norm;\n    float t;\n    if (ConeIntersect(0.3, vec2(4.0, 8.0), ro, rd, t, norm)) {\n        float dk = abs(dot(norm,rd));\n        Out = vec4(dk, dk, dk, 1.0);\n    } else {\n        Out = vec4(0.0);\n    }\n    \n    fragColor = Out;\n}","name":"Image","description":"","type":"image"}]}