{"ver":"0.1","info":{"id":"4lscWf","date":"1514353229","viewed":912,"name":"Minesweeper","username":"OccamsLaser","description":"Minesweeper in a shader, you will have to restart the shader to lay the mines for reasons I can't remember\n\nGamestate code derived from iq's fantastic pacman shader https://www.shadertoy.com/view/Ms3XWN","likes":8,"published":1,"flags":32,"usePreview":0,"tags":["procedural","game","minesweeper","multipassgame"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 frag_color, in vec2 frag_coord) {\n    \n    ivec2 ifrag_coord = ivec2(frag_coord-0.5);\n    \n    vec2 tile_coord = vec2(32.0*(frag_coord.x/iResolution.x),18.0*(frag_coord.y/iResolution.y));\n    vec4 click_mask =  texelFetch(iChannel0, ivec2(tile_coord), 0);\n    \n    int exposed_mines = 0;\n    \n    for(int i=0; i<32; i++) {\n    \tfor(int j=0; j<18; j++) {\n            vec4 board = texelFetch(iChannel0, ivec2(i, j), 0);\n           \tint mine = int(board.x);\n            int click = int(board.y);\n            exposed_mines += mine&click;\n    \t}\n    }\n    \n    if(exposed_mines < 1) {\n        if(int(click_mask.y) == 1) {\n            int neighbors = int(click_mask.z);\n            frag_color = texelFetch(iChannel0, ivec2(int(tile_coord.x*16.0)%16,int(tile_coord.y*16.0)%16)+ivec2(neighbors*16,0)+ivec2(64,0), 0);\n        } else {\n            frag_color = texelFetch(iChannel0, ivec2(int(tile_coord.x*16.0)%16,int(tile_coord.y*16.0)%16)+ivec2(32,0),0);   \n        }\n\n    } else {\n        if(int(click_mask.x) == 1) {\n        \tfrag_color = texelFetch(iChannel0, ivec2(int(tile_coord.x*16.0)%16,int(tile_coord.y*16.0)%16)+ivec2(48,0),0);\n        } else if(int(click_mask.y) == 1) {   \n            int neighbors = int(click_mask.z);\n            frag_color = texelFetch(iChannel0, ivec2(int(tile_coord.x*16.0)%16,int(tile_coord.y*16.0)%16)+ivec2(neighbors*16,0)+ivec2(64,0), 0);\n        } else {\n            frag_color = texelFetch(iChannel0, ivec2(int(tile_coord.x*16.0)%16,int(tile_coord.y*16.0)%16)+ivec2(32,0),0);   \n        }\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const ivec4 txBoard\t\t= ivec4(0,0,31,17);\n\nconst ivec4 txUnclicked\t= ivec4(32,0,48,16);\nconst ivec4 txMine\t\t= ivec4(48,0,64,16);\nconst ivec4 txEmpty\t\t= ivec4(64,0,80,16);\nconst ivec4 txOne\t\t= ivec4(80,0,96,16);\nconst ivec4 txTwo\t\t= ivec4(96,0,112,16);\nconst ivec4 txThree\t\t= ivec4(112,0,128,16);\nconst ivec4 txFour\t\t= ivec4(128,0,144,16);\nconst ivec4 txFive\t\t= ivec4(144,0,160,16);\nconst ivec4 txSix\t\t= ivec4(160,0,176,16);\nconst ivec4 txSeven\t\t= ivec4(176,0,192,16);\nconst ivec4 txEight\t\t= ivec4(192,0,208,16);\n\nconst ivec2 txState\t\t= ivec2(0,18);\nconst ivec2 txMouse\t\t= ivec2(1,18);\n\n#define PA(a,b,c,d,e,f,g,h) (a+4*(b+4*(c+4*(d+4*(e+4*(f+4*(g+4*h)))))))\n#define DD(id, c0,c1,c2,c3,c4,c5,c6,c7) if(y==id) m = PA(c0,c1,c2,c3,c4,c5,c6,c7);\n\n\nint boardX(in ivec2 q) {\n    if(q.x < 0 || q.y < 0 || q.x > 31 || q.y > 17)\n        return 0;\n    \n\treturn int(texelFetch(iChannel1, q, 0)+0.1);   \n}\n\n/*\nint boardX(in ivec2 q) {\n    \n    if(q.x < 0 || q.y < 0 || q.x > 31 || q.y > 17)\n        return 0;\n    \n    q.y|=(q.x&0x18)<<5;q.x&=0x7;\n    \n    int x = q.x; int y = q.y; int m = 0;\n    \n    DD(0x0011,\t0,0,0,0,0,0,0,0)\tDD(0x0111,\t0,0,0,0,0,0,0,0)\tDD(0x0211,\t0,0,0,0,0,0,0,0)\tDD(0x0311,\t0,0,0,0,0,0,0,0)\n    DD(0x0010,\t0,1,1,1,0,0,0,0)\tDD(0x0110,\t0,0,0,0,1,1,1,0)\tDD(0x0210,\t0,1,1,1,0,0,0,0)\tDD(0x0310,\t0,0,0,0,1,1,1,0)\n    DD(0x000f, \t0,1,1,1,0,0,0,0)\tDD(0x010f, \t0,0,0,0,1,1,1,0)\tDD(0x020f, \t0,1,1,1,0,0,0,0)\tDD(0x030f, \t0,0,0,0,1,1,1,0)\n   \tDD(0x000e, \t0,1,1,1,0,0,0,0)\tDD(0x010e, \t0,0,0,0,1,1,1,0)\tDD(0x020e, \t0,1,1,1,0,0,0,0)\tDD(0x030e, \t0,0,0,0,1,1,1,0)\n    DD(0x000d,\t0,0,0,0,0,0,0,0)\tDD(0x010d,\t0,0,0,0,0,0,0,0)\tDD(0x020d,\t0,0,0,0,0,0,0,0)\tDD(0x030d,\t0,0,0,0,0,0,0,0)\n    DD(0x000c,\t0,0,0,0,0,0,0,0)\tDD(0x010c,\t0,0,0,0,0,0,0,0)\tDD(0x020c,\t0,0,0,0,0,0,0,0)\tDD(0x030c,\t0,0,0,0,0,0,0,0)\n    DD(0x000b,\t0,0,0,0,0,0,0,0)\tDD(0x010b,\t0,0,0,0,0,0,0,0)\tDD(0x020b,\t0,0,0,0,0,0,0,0)\tDD(0x030b,\t0,0,0,0,0,0,0,0)\n    DD(0x000a,\t0,0,0,0,0,0,0,0)\tDD(0x010a,\t0,0,0,0,0,0,0,0)\tDD(0x020a,\t0,0,0,0,0,0,0,0)\tDD(0x030a,\t0,0,0,0,0,0,0,0)\n    DD(0x0009,\t0,0,0,0,0,0,0,0)\tDD(0x0109,\t0,0,0,0,0,0,0,0)\tDD(0x0209,\t0,0,0,0,0,0,0,0)\tDD(0x0309,\t0,0,0,0,0,0,0,0)\n    DD(0x0008,\t0,0,0,0,0,0,0,0)\tDD(0x0108,\t0,0,0,0,0,0,0,0)\tDD(0x0208,\t0,0,0,0,0,0,0,0)\tDD(0x0308,\t0,0,0,0,0,0,0,0)\n    DD(0x0007,\t0,0,0,0,0,0,0,0)\tDD(0x0107,\t0,0,0,0,0,0,0,0)\tDD(0x0207,\t0,0,0,0,0,0,0,0)\tDD(0x0307,\t0,0,0,0,0,0,0,0)\n    DD(0x0006, \t0,0,0,0,0,0,0,0)\tDD(0x0106, \t0,0,0,0,0,0,0,0)\tDD(0x0206, \t0,0,0,0,0,0,0,0)\tDD(0x0306, \t0,0,0,0,0,0,0,0)\n    DD(0x0005, \t0,0,0,0,0,0,0,0)\tDD(0x0105, \t0,0,0,0,0,0,0,0)\tDD(0x0205, \t0,0,0,0,0,0,0,0)\tDD(0x0305, \t0,0,0,0,0,0,0,0)\n    DD(0x0004, \t0,0,0,0,0,0,0,0)\tDD(0x0104, \t0,0,0,0,0,0,0,0)\tDD(0x0204, \t0,0,0,0,0,0,0,0)\tDD(0x0304, \t0,0,0,0,0,0,0,0)\n    DD(0x0003, \t0,0,0,0,0,0,0,0)\tDD(0x0103, \t0,0,0,0,1,1,1,0)\tDD(0x0203, \t0,1,1,1,0,0,0,0)\tDD(0x0303, \t0,0,0,0,1,1,1,0)\n    DD(0x0002, \t0,0,0,0,0,0,0,0)\tDD(0x0102, \t0,0,0,0,1,1,1,0)\tDD(0x0202, \t0,1,1,1,0,0,0,0)\tDD(0x0302, \t0,0,0,0,1,1,1,0)\n    DD(0x0001, \t0,1,0,0,0,0,0,0)\tDD(0x0101, \t0,0,0,0,1,1,1,0)\tDD(0x0201, \t0,1,1,1,0,0,0,0)\tDD(0x0301, \t0,0,0,0,1,1,1,0)\n    DD(0x0000, \t0,0,0,0,0,0,0,0)\tDD(0x0100, \t0,0,0,0,0,0,0,0)\tDD(0x0200, \t0,0,0,0,0,0,0,0)\tDD(0x0300, \t0,0,0,0,0,0,0,0)\n    \n    return (m>>(2*(x%8)))&3;\n}*/\n\nint tile_unclicked(in ivec2 q) {\n    \n    if(q.x < 0 || q.y < 0 || q.x > 15 || q.y > 15)\n        return 0;\n    \n    q.y|=(q.x&8)<<1;q.x&=7;\n    \n    int x = q.x; int y = q.y; int m = 0;\n    \n    DD(15,  3,3,3,3,3,3,3,3) DD(31,  3,3,3,3,3,3,3,2)\n   \tDD(14,  3,3,3,3,3,3,3,3) DD(30,  3,3,3,3,3,3,2,1)\n    DD(13,\t3,3,2,2,2,2,2,2) DD(29,  2,2,2,2,2,2,1,1)\n    DD(12,\t3,3,2,2,2,2,2,2) DD(28,  2,2,2,2,2,2,1,1)\n    DD(11,\t3,3,2,2,2,2,2,2) DD(27,  2,2,2,2,2,2,1,1)\n    DD(10,\t3,3,2,2,2,2,2,2) DD(26,  2,2,2,2,2,2,1,1)\n    DD( 9,\t3,3,2,2,2,2,2,2) DD(25,  2,2,2,2,2,2,1,1)\n    DD( 8,\t3,3,2,2,2,2,2,2) DD(24,  2,2,2,2,2,2,1,1)\n    DD( 7,\t3,3,2,2,2,2,2,2) DD(23,  2,2,2,2,2,2,1,1)\n    DD( 6,  3,3,2,2,2,2,2,2) DD(22,  2,2,2,2,2,2,1,1)\n    DD( 5,  3,3,2,2,2,2,2,2) DD(21,  2,2,2,2,2,2,1,1)\n    DD( 4,  3,3,2,2,2,2,2,2) DD(20,  2,2,2,2,2,2,1,1)\n    DD( 3,  3,3,2,2,2,2,2,2) DD(19,  2,2,2,2,2,2,1,1)\n    DD( 2,  3,3,2,2,2,2,2,2) DD(18,  2,2,2,2,2,2,1,1)\n    DD( 1,  3,2,1,1,1,1,1,1) DD(17,  1,1,1,1,1,1,1,1)\n    DD( 0,  2,1,1,1,1,1,1,1) DD(16,  1,1,1,1,1,1,1,1)\n    \n    return (m>>(2*(x%8)))&3;\n}\n\nint tile_mine(in ivec2 q) {\n    \n    if(q.x < 0 || q.y < 0 || q.x > 15 || q.y > 15)\n        return 0;\n    \n    q.y|=(q.x&8)<<1;q.x&=7;\n    \n    int x = q.x; int y = q.y; int m = 0;\n    \n    DD(15,  1,1,1,1,1,1,1,1) DD(31,  1,1,1,1,1,1,1,1)\n   \tDD(14,  1,2,2,2,2,2,2,2) DD(30,  2,2,2,2,2,2,2,2)\n    DD(13,\t1,2,2,2,2,2,2,2) DD(29,  0,2,2,2,2,2,2,2)\n    DD(12,\t1,2,2,2,2,2,2,2) DD(28,  0,2,2,2,2,2,2,2)\n    DD(11,\t1,2,2,2,0,2,0,0) DD(27,  0,0,0,2,0,2,2,2)\n    DD(10,\t1,2,2,2,2,0,0,0) DD(26,  0,0,0,0,2,2,2,2)\n    DD( 9,\t1,2,2,2,0,0,3,3) DD(25,  0,0,0,0,0,2,2,2)\n    DD( 8,\t1,2,2,2,0,0,3,3) DD(24,  0,0,0,0,0,2,2,2)\n    DD( 7,\t1,2,0,0,0,0,0,0) DD(23,  0,0,0,0,0,0,0,2)\n    DD( 6,  1,2,2,2,0,0,0,0) DD(22,  0,0,0,0,0,2,2,2)\n    DD( 5,  1,2,2,2,0,0,0,0) DD(21,  0,0,0,0,0,2,2,2)\n    DD( 4,  1,2,2,2,2,0,0,0) DD(20,  0,0,0,0,2,2,2,2)\n    DD( 3,  1,2,2,2,0,2,0,0) DD(19,  0,0,0,2,0,2,2,2)\n    DD( 2,  1,2,2,2,2,2,2,2) DD(18,  0,2,2,2,2,2,2,2)\n    DD( 1,  1,2,2,2,2,2,2,2) DD(17,  0,2,2,2,2,2,2,2)\n    DD( 0,  1,2,2,2,2,2,2,2) DD(16,  2,2,2,2,2,2,2,2)\n    \n    return (m>>(2*(x%8)))&3;\n}\n\nint tile_empty(in ivec2 q) {\n    \n    if(q.x < 0 || q.y < 0 || q.x > 15 || q.y > 15)\n        return 0;\n    \n    q.y|=(q.x&8)<<1;q.x&=7;\n    \n    int x = q.x; int y = q.y; int m = 0;\n    \n    DD(15,  1,1,1,1,1,1,1,1) DD(31,  1,1,1,1,1,1,1,1)\n   \tDD(14,  1,2,2,2,2,2,2,2) DD(30,  2,2,2,2,2,2,2,2)\n    DD(13,\t1,2,2,2,2,2,2,2) DD(29,  2,2,2,2,2,2,2,2)\n    DD(12,\t1,2,2,2,2,2,2,2) DD(28,  2,2,2,2,2,2,2,2)\n    DD(11,\t1,2,2,2,2,2,2,2) DD(27,  2,2,2,2,2,2,2,2)\n    DD(10,\t1,2,2,2,2,2,2,2) DD(26,  2,2,2,2,2,2,2,2)\n    DD( 9,\t1,2,2,2,2,2,2,2) DD(25,  2,2,2,2,2,2,2,2)\n    DD( 8,\t1,2,2,2,2,2,2,2) DD(24,  2,2,2,2,2,2,2,2)\n    DD( 7,\t1,2,2,2,2,2,2,2) DD(23,  2,2,2,2,2,2,2,2)\n    DD( 6,  1,2,2,2,2,2,2,2) DD(22,  2,2,2,2,2,2,2,2)\n    DD( 5,  1,2,2,2,2,2,2,2) DD(21,  2,2,2,2,2,2,2,2)\n    DD( 4,  1,2,2,2,2,2,2,2) DD(20,  2,2,2,2,2,2,2,2)\n    DD( 3,  1,2,2,2,2,2,2,2) DD(19,  2,2,2,2,2,2,2,2)\n    DD( 2,  1,2,2,2,2,2,2,2) DD(18,  2,2,2,2,2,2,2,2)\n    DD( 1,  1,2,2,2,2,2,2,2) DD(17,  2,2,2,2,2,2,2,2)\n    DD( 0,  1,2,2,2,2,2,2,2) DD(16,  2,2,2,2,2,2,2,2)\n    \n    return (m>>(2*(x%8)))&3;\n}\n\nint tile_one(in ivec2 q) {\n    \n    if(q.x < 0 || q.y < 0 || q.x > 15 || q.y > 15)\n        return 0;\n    \n    q.y|=(q.x&8)<<1;q.x&=7;\n    \n    int x = q.x; int y = q.y; int m = 0;\n    \n    DD(15,  1,1,1,1,1,1,1,1) DD(31,  1,1,1,1,1,1,1,1)\n   \tDD(14,  1,2,2,2,2,2,2,2) DD(30,  2,2,2,2,2,2,2,2)\n    DD(13,\t1,2,2,2,2,2,2,2) DD(29,  2,2,2,2,2,2,2,2)\n    DD(12,\t1,2,2,2,2,2,2,2) DD(28,  0,0,2,2,2,2,2,2)\n    DD(11,\t1,2,2,2,2,2,2,0) DD(27,  0,0,2,2,2,2,2,2)\n    DD(10,\t1,2,2,2,2,2,0,0) DD(26,  0,0,2,2,2,2,2,2)\n    DD( 9,\t1,2,2,2,2,0,0,0) DD(25,  0,0,2,2,2,2,2,2)\n    DD( 8,\t1,2,2,2,2,2,2,0) DD(24,  0,0,2,2,2,2,2,2)\n    DD( 7,\t1,2,2,2,2,2,2,0) DD(23,  0,0,2,2,2,2,2,2)\n    DD( 6,  1,2,2,2,2,2,2,0) DD(22,  0,0,2,2,2,2,2,2)\n    DD( 5,  1,2,2,2,2,2,2,0) DD(21,  0,0,2,2,2,2,2,2)\n    DD( 4,  1,2,2,2,2,0,0,0) DD(20,  0,0,0,0,2,2,2,2)\n    DD( 3,  1,2,2,2,2,0,0,0) DD(19,  0,0,0,0,2,2,2,2)\n    DD( 2,  1,2,2,2,2,2,2,2) DD(18,  2,2,2,2,2,2,2,2)\n    DD( 1,  1,2,2,2,2,2,2,2) DD(17,  2,2,2,2,2,2,2,2)\n    DD( 0,  1,2,2,2,2,2,2,2) DD(16,  2,2,2,2,2,2,2,2)\n    \n    return (m>>(2*(x%8)))&3;\n}\n\nint tile_two(in ivec2 q) {\n    \n    if(q.x < 0 || q.y < 0 || q.x > 15 || q.y > 15)\n        return 0;\n    \n    q.y|=(q.x&8)<<1;q.x&=7;\n    \n    int x = q.x; int y = q.y; int m = 0;\n    \n    DD(15,  1,1,1,1,1,1,1,1) DD(31,  1,1,1,1,1,1,1,1)\n   \tDD(14,  1,2,2,2,2,2,2,2) DD(30,  2,2,2,2,2,2,2,2)\n    DD(13,\t1,2,2,2,2,2,2,2) DD(29,  2,2,2,2,2,2,2,2)\n    DD(12,\t1,2,2,2,0,0,0,0) DD(28,  0,0,0,0,2,2,2,2)\n    DD(11,\t1,2,2,0,0,0,0,0) DD(27,  0,0,0,0,0,2,2,2)\n    DD(10,\t1,2,2,0,0,0,2,2) DD(26,  2,2,0,0,0,2,2,2)\n    DD( 9,\t1,2,2,2,2,2,2,2) DD(25,  2,2,0,0,0,2,2,2)\n    DD( 8,\t1,2,2,2,2,2,2,2) DD(24,  0,0,0,0,2,2,2,2)\n    DD( 7,\t1,2,2,2,2,2,0,0) DD(23,  0,0,0,2,2,2,2,2)\n    DD( 6,  1,2,2,2,0,0,0,0) DD(22,  0,2,2,2,2,2,2,2)\n    DD( 5,  1,2,2,0,0,0,0,2) DD(21,  2,2,2,2,2,2,2,2)\n    DD( 4,  1,2,2,0,0,0,0,0) DD(20,  0,0,0,0,0,2,2,2)\n    DD( 3,  1,2,2,0,0,0,0,0) DD(19,  0,0,0,0,0,2,2,2)\n    DD( 2,  1,2,2,2,2,2,2,2) DD(18,  2,2,2,2,2,2,2,2)\n    DD( 1,  1,2,2,2,2,2,2,2) DD(17,  2,2,2,2,2,2,2,2)\n    DD( 0,  1,2,2,2,2,2,2,2) DD(16,  2,2,2,2,2,2,2,2)\n    \n    return (m>>(2*(x%8)))&3;\n}\n\n\nint tile_three(in ivec2 q) {\n    \n    if(q.x < 0 || q.y < 0 || q.x > 15 || q.y > 15)\n        return 0;\n    \n    q.y|=(q.x&8)<<1;q.x&=7;\n    \n    int x = q.x; int y = q.y; int m = 0;\n    \n    DD(15,  1,1,1,1,1,1,1,1) DD(31,  1,1,1,1,1,1,1,1)\n   \tDD(14,  1,2,2,2,2,2,2,2) DD(30,  2,2,2,2,2,2,2,2)\n    DD(13,\t1,2,2,2,2,2,2,2) DD(29,  2,2,2,2,2,2,2,2)\n    DD(12,\t1,2,2,0,0,0,0,0) DD(28,  0,0,0,0,2,2,2,2)\n    DD(11,\t1,2,2,0,0,0,0,0) DD(27,  0,0,0,0,0,2,2,2)\n    DD(10,\t1,2,2,2,2,2,2,2) DD(26,  2,2,0,0,0,2,2,2)\n    DD( 9,\t1,2,2,2,2,2,2,2) DD(25,  2,2,0,0,0,2,2,2)\n    DD( 8,\t1,2,2,2,2,2,0,0) DD(24,  0,0,0,0,2,2,2,2)\n    DD( 7,\t1,2,2,2,2,2,0,0) DD(23,  0,0,0,0,2,2,2,2)\n    DD( 6,  1,2,2,2,2,2,2,2) DD(22,  2,2,0,0,0,2,2,2)\n    DD( 5,  1,2,2,2,2,2,2,2) DD(21,  2,2,0,0,0,2,2,2)\n    DD( 4,  1,2,2,0,0,0,0,0) DD(20,  0,0,0,0,0,2,2,2)\n    DD( 3,  1,2,2,0,0,0,0,0) DD(19,  0,0,0,0,2,2,2,2)\n    DD( 2,  1,2,2,2,2,2,2,2) DD(18,  2,2,2,2,2,2,2,2)\n    DD( 1,  1,2,2,2,2,2,2,2) DD(17,  2,2,2,2,2,2,2,2)\n    DD( 0,  1,2,2,2,2,2,2,2) DD(16,  2,2,2,2,2,2,2,2)\n    \n    return (m>>(2*(x%8)))&3;\n}\n\nint tile_four(in ivec2 q) {\n    \n    if(q.x < 0 || q.y < 0 || q.x > 15 || q.y > 15)\n        return 0;\n    \n    q.y|=(q.x&8)<<1;q.x&=7;\n    \n    int x = q.x; int y = q.y; int m = 0;\n    \n    DD(15,  1,1,1,1,1,1,1,1) DD(31,  1,1,1,1,1,1,1,1)\n   \tDD(14,  1,2,2,2,2,2,2,2) DD(30,  2,2,2,2,2,2,2,2)\n    DD(13,\t1,2,2,2,2,2,2,2) DD(29,  2,2,2,2,2,2,2,2)\n    DD(12,\t1,2,2,2,2,0,0,0) DD(28,  2,0,0,0,2,2,2,2)\n    DD(11,\t1,2,2,2,2,0,0,0) DD(27,  2,0,0,0,2,2,2,2)\n    DD(10,\t1,2,2,2,0,0,0,2) DD(26,  2,0,0,0,2,2,2,2)\n    DD( 9,\t1,2,2,2,0,0,0,2) DD(25,  2,0,0,0,2,2,2,2)\n    DD( 8,\t1,2,2,0,0,0,0,0) DD(24,  0,0,0,0,0,2,2,2)\n    DD( 7,\t1,2,2,0,0,0,0,0) DD(23,  0,0,0,0,0,2,2,2)\n    DD( 6,  1,2,2,2,2,2,2,2) DD(22,  2,0,0,0,2,2,2,2)\n    DD( 5,  1,2,2,2,2,2,2,2) DD(21,  2,0,0,0,2,2,2,2)\n    DD( 4,  1,2,2,2,2,2,2,2) DD(20,  2,0,0,0,2,2,2,2)\n    DD( 3,  1,2,2,2,2,2,2,2) DD(19,  2,0,0,0,2,2,2,2)\n    DD( 2,  1,2,2,2,2,2,2,2) DD(18,  2,2,2,2,2,2,2,2)\n    DD( 1,  1,2,2,2,2,2,2,2) DD(17,  2,2,2,2,2,2,2,2)\n    DD( 0,  1,2,2,2,2,2,2,2) DD(16,  2,2,2,2,2,2,2,2)\n    \n    return (m>>(2*(x%8)))&3;\n}\n\nint tile_five(in ivec2 q) {\n    \n    if(q.x < 0 || q.y < 0 || q.x > 15 || q.y > 15)\n        return 0;\n    \n    q.y|=(q.x&8)<<1;q.x&=7;\n    \n    int x = q.x; int y = q.y; int m = 0;\n    \n    DD(15,  1,1,1,1,1,1,1,1) DD(31,  1,1,1,1,1,1,1,1)\n   \tDD(14,  1,2,2,2,2,2,2,2) DD(30,  2,2,2,2,2,2,2,2)\n    DD(13,\t1,2,2,2,2,2,2,2) DD(29,  2,2,2,2,2,2,2,2)\n    DD(12,\t1,2,2,0,0,0,0,0) DD(28,  0,0,0,0,0,2,2,2)\n    DD(11,\t1,2,2,0,0,0,0,0) DD(27,  0,0,0,0,0,2,2,2)\n    DD(10,\t1,2,2,0,0,0,2,2) DD(26,  2,2,2,2,2,2,2,2)\n    DD( 9,\t1,2,2,0,0,0,2,2) DD(25,  2,2,2,2,2,2,2,2)\n    DD( 8,\t1,2,2,0,0,0,0,0) DD(24,  0,0,0,0,2,2,2,2)\n    DD( 7,\t1,2,2,0,0,0,0,0) DD(23,  0,0,0,0,0,2,2,2)\n    DD( 6,  1,2,2,2,2,2,2,2) DD(22,  2,2,0,0,0,2,2,2)\n    DD( 5,  1,2,2,2,2,2,2,2) DD(21,  2,2,0,0,0,2,2,2)\n    DD( 4,  1,2,2,0,0,0,0,0) DD(20,  0,0,0,0,0,2,2,2)\n    DD( 3,  1,2,2,0,0,0,0,0) DD(19,  0,0,0,0,2,2,2,2)\n    DD( 2,  1,2,2,2,2,2,2,2) DD(18,  2,2,2,2,2,2,2,2)\n    DD( 1,  1,2,2,2,2,2,2,2) DD(17,  2,2,2,2,2,2,2,2)\n    DD( 0,  1,2,2,2,2,2,2,2) DD(16,  2,2,2,2,2,2,2,2)\n    \n    return (m>>(2*(x%8)))&3;\n}\n\nint tile_six(in ivec2 q) {\n    \n    if(q.x < 0 || q.y < 0 || q.x > 15 || q.y > 15)\n        return 0;\n    \n    q.y|=(q.x&8)<<1;q.x&=7;\n    \n    int x = q.x; int y = q.y; int m = 0;\n    \n    DD(15,  1,1,1,1,1,1,1,1) DD(31,  1,1,1,1,1,1,1,1)\n   \tDD(14,  1,2,2,2,2,2,2,2) DD(30,  2,2,2,2,2,2,2,2)\n    DD(13,\t1,2,2,2,2,2,2,2) DD(29,  2,2,2,2,2,2,2,2)\n    DD(12,\t1,2,2,2,0,0,0,0) DD(28,  0,0,0,0,2,2,2,2)\n    DD(11,\t1,2,2,0,0,0,0,0) DD(27,  0,0,0,0,2,2,2,2)\n    DD(10,\t1,2,2,0,0,0,2,2) DD(26,  2,2,2,2,2,2,2,2)\n    DD( 9,\t1,2,2,0,0,0,2,2) DD(25,  2,2,2,2,2,2,2,2)\n    DD( 8,\t1,2,2,0,0,0,0,0) DD(24,  0,0,0,0,2,2,2,2)\n    DD( 7,\t1,2,2,0,0,0,0,0) DD(23,  0,0,0,0,0,2,2,2)\n    DD( 6,  1,2,2,0,0,0,2,2) DD(22,  2,2,0,0,0,2,2,2)\n    DD( 5,  1,2,2,0,0,0,2,2) DD(21,  2,2,0,0,0,2,2,2)\n    DD( 4,  1,2,2,0,0,0,0,0) DD(20,  0,0,0,0,0,2,2,2)\n    DD( 3,  1,2,2,2,0,0,0,0) DD(19,  0,0,0,0,2,2,2,2)\n    DD( 2,  1,2,2,2,2,2,2,2) DD(18,  2,2,2,2,2,2,2,2)\n    DD( 1,  1,2,2,2,2,2,2,2) DD(17,  2,2,2,2,2,2,2,2)\n    DD( 0,  1,2,2,2,2,2,2,2) DD(16,  2,2,2,2,2,2,2,2)\n    \n    return (m>>(2*(x%8)))&3;\n}\n\nint tile_seven(in ivec2 q) {\n    \n    if(q.x < 0 || q.y < 0 || q.x > 15 || q.y > 15)\n        return 0;\n    \n    q.y|=(q.x&8)<<1;q.x&=7;\n    \n    int x = q.x; int y = q.y; int m = 0;\n    \n    DD(15,  1,1,1,1,1,1,1,1) DD(31,  1,1,1,1,1,1,1,1)\n   \tDD(14,  1,2,2,2,2,2,2,2) DD(30,  2,2,2,2,2,2,2,2)\n    DD(13,\t1,2,2,2,2,2,2,2) DD(29,  2,2,2,2,2,2,2,2)\n    DD(12,\t1,2,2,0,0,0,0,0) DD(28,  0,0,0,0,0,2,2,2)\n    DD(11,\t1,2,2,0,0,0,0,0) DD(27,  0,0,0,0,0,2,2,2)\n    DD(10,\t1,2,2,2,2,2,2,2) DD(26,  2,2,0,0,0,2,2,2)\n    DD( 9,\t1,2,2,2,2,2,2,2) DD(25,  2,2,0,0,0,2,2,2)\n    DD( 8,\t1,2,2,2,2,2,2,2) DD(24,  2,0,0,0,2,2,2,2)\n    DD( 7,\t1,2,2,2,2,2,2,2) DD(23,  2,0,0,0,2,2,2,2)\n    DD( 6,  1,2,2,2,2,2,2,2) DD(22,  0,0,0,2,2,2,2,2)\n    DD( 5,  1,2,2,2,2,2,2,2) DD(21,  0,0,0,2,2,2,2,2)\n    DD( 4,  1,2,2,2,2,2,2,0) DD(20,  0,0,2,2,2,2,2,2)\n    DD( 3,  1,2,2,2,2,2,2,0) DD(19,  0,0,2,2,2,2,2,2)\n    DD( 2,  1,2,2,2,2,2,2,2) DD(18,  2,2,2,2,2,2,2,2)\n    DD( 1,  1,2,2,2,2,2,2,2) DD(17,  2,2,2,2,2,2,2,2)\n    DD( 0,  1,2,2,2,2,2,2,2) DD(16,  2,2,2,2,2,2,2,2)\n    \n    return (m>>(2*(x%8)))&3;\n}\n\nint tile_eight(in ivec2 q) {\n    \n    if(q.x < 0 || q.y < 0 || q.x > 15 || q.y > 15)\n        return 0;\n    \n    q.y|=(q.x&8)<<1;q.x&=7;\n    \n    int x = q.x; int y = q.y; int m = 0;\n    \n    DD(15,  1,1,1,1,1,1,1,1) DD(31,  1,1,1,1,1,1,1,1)\n   \tDD(14,  1,2,2,2,2,2,2,2) DD(30,  2,2,2,2,2,2,2,2)\n    DD(13,\t1,2,2,2,2,2,2,2) DD(29,  2,2,2,2,2,2,2,2)\n    DD(12,\t1,2,2,2,0,0,0,0) DD(28,  0,0,0,0,2,2,2,2)\n    DD(11,\t1,2,2,0,0,0,0,0) DD(27,  0,0,0,0,0,2,2,2)\n    DD(10,\t1,2,2,0,0,0,2,2) DD(26,  2,2,0,0,0,2,2,2)\n    DD( 9,\t1,2,2,0,0,0,2,2) DD(25,  2,2,0,0,0,2,2,2)\n    DD( 8,\t1,2,2,2,0,0,0,0) DD(24,  0,0,0,0,2,2,2,2)\n    DD( 7,\t1,2,2,2,0,0,0,0) DD(23,  0,0,0,0,2,2,2,2)\n    DD( 6,  1,2,2,0,0,0,2,2) DD(22,  2,2,0,0,0,2,2,2)\n    DD( 5,  1,2,2,0,0,0,2,2) DD(21,  2,2,0,0,0,2,2,2)\n    DD( 4,  1,2,2,0,0,0,0,0) DD(20,  0,0,0,0,0,2,2,2)\n    DD( 3,  1,2,2,2,0,0,0,0) DD(19,  0,0,0,0,2,2,2,2)\n    DD( 2,  1,2,2,2,2,2,2,2) DD(18,  2,2,2,2,2,2,2,2)\n    DD( 1,  1,2,2,2,2,2,2,2) DD(17,  2,2,2,2,2,2,2,2)\n    DD( 0,  1,2,2,2,2,2,2,2) DD(16,  2,2,2,2,2,2,2,2)\n    \n    return (m>>(2*(x%8)))&3;\n}\n\n//-------------------------------------------------------------------------------------------\n\nvec4 load_value(in ivec2 re) {\n    return texelFetch(iChannel0, re, 0);\n}\n\nvoid store_value(in ivec2 re, in vec4 va, inout vec4 frag_color, in ivec2 frag_coord) {\n    frag_color = (re.x==frag_coord.x && re.y==frag_coord.y) ? va : frag_color;\n}\n\n\n//I think I understand this code the least\nvoid store_value(in ivec4 re, in vec4 va, inout vec4 frag_color, in ivec2 frag_coord) {\n    vec2 r = 0.5*vec2(re.zw);\n    vec2 d = abs(vec2(frag_coord-re.xy)-r)-r-0.5;\n    frag_color = (-max(d.x,d.y)>0.0) ? va : frag_color;\n}\n\nbool neighbors_clicked(in ivec2 re) {\n    float clicked = 0.0;\n    clicked += load_value(ivec2(clamp(re.x-1,txBoard.x,txBoard.z),re.y)).y;\n    clicked += load_value(ivec2(re.x,clamp(re.y-1,txBoard.y,txBoard.w))).y;\n    clicked += load_value(ivec2(clamp(re.x+1,txBoard.x,txBoard.z),re.y)).y;\n    clicked += load_value(ivec2(re.x,clamp(re.y+1,txBoard.y,txBoard.w))).y;\n        \n\treturn clicked>0.0;\n}\n\nbool zero_neighbor_clicked(in ivec2 re) {\n   \tbool clicked = false;\n    \n    vec4 north \t\t= load_value(ivec2(re.x,clamp(re.y+1,txBoard.y,txBoard.w)));\n    vec4 northeast\t= load_value(ivec2(clamp(re.x+1,txBoard.x,txBoard.z),\n                                       clamp(re.y+1,txBoard.y,txBoard.w)));\n    vec4 east\t\t= load_value(ivec2(clamp(re.x+1,txBoard.x,txBoard.z),re.y));\n    vec4 southeast\t= load_value(ivec2(clamp(re.x+1,txBoard.x,txBoard.z),\n                                       clamp(re.y-1,txBoard.y,txBoard.w)));\n    vec4 south\t\t= load_value(ivec2(re.x,clamp(re.y-1,txBoard.y,txBoard.w)));\n    vec4 southwest\t= load_value(ivec2(clamp(re.x-1,txBoard.x,txBoard.z),\n                                       clamp(re.y-1,txBoard.y,txBoard.w)));\n    vec4 west\t\t= load_value(ivec2(clamp(re.x-1,txBoard.x,txBoard.z),re.y));\n    vec4 northwest\t= load_value(ivec2(clamp(re.x-1,txBoard.x,txBoard.z),\n                                       clamp(re.y+1,txBoard.y,txBoard.w)));\n    \n    clicked = clicked || !bool(north.x)&&bool(north.y)&&!bool(north.z);\n    clicked = clicked || !bool(northeast.x)&&bool(northeast.y)&&!bool(northeast.z);\n    clicked = clicked || !bool(east.x)&&bool(east.y)&&!bool(east.z);\n    clicked = clicked || !bool(southeast.x)&&bool(southeast.y)&&!bool(southeast.z);\n    clicked = clicked || !bool(south.x)&&bool(south.y)&&!bool(south.z);\n    clicked = clicked || !bool(southwest.x)&&bool(southwest.y)&&!bool(southwest.z);\n    clicked = clicked || !bool(west.x)&&bool(west.y)&&!bool(west.z);\n    clicked = clicked || !bool(northwest.x)&&bool(northwest.y)&&!bool(northwest.z);\n        \n\treturn clicked;\n}\n\nvec4 find_color(in int number, vec4 special) {\n    if(number > 0) {\n    \treturn vec4(vec3(float(number)/3.0),1.0);   \n    } else {\n    \treturn special;\n    }\n}\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\n//-------------------------------------------------------------------------------------------\n\nvoid mainImage(out vec4 frag_color, in vec2 frag_coord) {\n    ivec2 ifrag_coord = ivec2(frag_coord-0.5);\n    \n    if(ifrag_coord.x>207 || ifrag_coord.y>17) discard;\n   \n    //---------------------------------------------------------------------------------   \n    // load game state\n    //---------------------------------------------------------------------------------\n    //vec4  position  = load_value(txPosition);\n    float state = load_value(txState).x;\n    int mine = int(load_value(ifrag_coord).x);\n    int click = int(load_value(ifrag_coord).y);\n    float neighbors = load_value(ifrag_coord).z;\n    vec4 mouse = load_value(txMouse);\n    \n    if(iFrame==0) {\n        if(ifrag_coord.x < 32 && ifrag_coord.y < 18) {\n            mine = boardX(ifrag_coord);\n            //mine = int(texelFetch(iChannel1, ifrag_coord, 0).x);\n           \t//mine = int(rand(vec2(0.0,1.0)));\n            //mine = 1;\n        }\n        \n        state = -1.0;\n    }\n    \n    if(state < -0.5) {\n        if(ifrag_coord.y < 18 && ifrag_coord.x < 32) {\n        \tmine = boardX(ifrag_coord);\n        }\n        \n        neighbors = -float(mine);\n        for(int i=ifrag_coord.x-1; i<=ifrag_coord.x+1; i++) {\n            for(int j=ifrag_coord.y-1; j<=ifrag_coord.y+1; j++) {\n        \t\tneighbors += float(boardX(ivec2(i,j)));\n            }\n        }\n         \n        mouse = vec4(-1.0, -1.0, -1.0, -1.0);\n        \n    \tstate = 0.0;\n    } else if(state == 0.0) {\n        //detect a new mouse press\n        if(iMouse.z != mouse.z || iMouse.w != mouse.w) {\n \t\t\tif(\tifrag_coord.x == int(32.0*iMouse.z/iResolution.x) &&\n           \t\tifrag_coord.y == int(18.0*iMouse.w/iResolution.y)) {\n            \tif(click == 0)\n                    click = 1;\n        \t}\n            mouse = vec4(iMouse);\n        }\n        \n        //detect if neighbors have been clicked\n        if(mine != 1 && zero_neighbor_clicked(ifrag_coord)) {\n            click = 1;\n        }\n        \n        //detect a loss\n        if(mine==1 && click==1) {\n        \tstate = 1.0;   \n        }\n    } else if(state == 1.0) {\n    \t//do nothing \n    }\n    \n    frag_color = vec4(1.0);\n    \n    store_value(txState,\tvec4(state,0.0,0.0,0.0),\t\tfrag_color,\tifrag_coord);\n    store_value(txBoard,\tvec4(mine,click,neighbors,1.0),\tfrag_color, ifrag_coord);\n    store_value(txMouse,\tvec4(mouse),\t\t\t\t\tfrag_color, ifrag_coord);\n    \n    if(ifrag_coord.x >= 32 && ifrag_coord.x < 48) {    \n    \tint number = tile_unclicked(ifrag_coord-ivec2(32,0));\n    \tstore_value(txUnclicked,find_color(number,vec4(1.0,0.0,0.0,1.0)),frag_color,ifrag_coord);\n    } else if(ifrag_coord.x >= 48 && ifrag_coord.x < 64) {\n     \tint number = tile_mine(ifrag_coord-ivec2(48,0));\n        store_value(txMine,find_color(number,vec4(0.0,0.0,0.0,0.0)),frag_color,ifrag_coord);\n    } else if(ifrag_coord.x >= 64 && ifrag_coord.x < 80) {\n     \tint number = tile_empty(ifrag_coord-ivec2(64,0));\n        store_value(txEmpty,find_color(number,vec4(1.0,0.0,0.0,1.0)),frag_color,ifrag_coord);\n    } else if(ifrag_coord.x >= 80 && ifrag_coord.x < 96) {\n        int number = tile_one(ifrag_coord-ivec2(80,0));\n        store_value(txOne,find_color(number,vec4(0.0,0.0,1.0,1.0)),frag_color,ifrag_coord);\n    } else if(ifrag_coord.x >= 96 && ifrag_coord.x < 112) {\n        int number = tile_two(ifrag_coord-ivec2(96,0));\n        store_value(txTwo,find_color(number,vec4(0.0,0.5,0.0,1.0)),frag_color,ifrag_coord);\n    } else if(ifrag_coord.x >= 112 && ifrag_coord.x < 128) {\n        int number = tile_three(ifrag_coord-ivec2(112,0));\n        store_value(txThree,find_color(number,vec4(1.0,0.0,0.0,1.0)),frag_color,ifrag_coord);\n    } else if(ifrag_coord.x >= 128 && ifrag_coord.x < 144) {\n        int number = tile_four(ifrag_coord-ivec2(128,0));\n        store_value(txFour,find_color(number,vec4(0.0,0.0,0.5,1.0)),frag_color,ifrag_coord);\n    } else if(ifrag_coord.x >= 144 && ifrag_coord.x < 160) {\n        int number = tile_five(ifrag_coord-ivec2(144,0));\n        store_value(txFive,find_color(number,vec4(0.5,0.0,0.0,1.0)),frag_color,ifrag_coord);\n    } else if(ifrag_coord.x >= 160 && ifrag_coord.x < 176) {\n        int number = tile_six(ifrag_coord-ivec2(160,0));\n        store_value(txSix,find_color(number,vec4(0.0,0.5,0.5,1.0)),frag_color,ifrag_coord);\n    } else if(ifrag_coord.x >= 176 && ifrag_coord.x < 192) {\n     \tint number = tile_seven(ifrag_coord-ivec2(176,0));\n        store_value(txSeven,find_color(number,vec4(1.0,1.0,1.0,1.0)),frag_color,ifrag_coord);\n    } else if(ifrag_coord.x >= 192 && ifrag_coord.x < 208) {\n     \tint number = tile_eight(ifrag_coord-ivec2(192,0));\n        store_value(txEight,find_color(number,vec4(0.5,0.5,0.5,1.0)),frag_color,ifrag_coord);\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}