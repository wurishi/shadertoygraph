{"ver":"0.1","info":{"id":"NsXGRB","date":"1616110006","viewed":168,"name":"origin of symmetry","username":"Angramme","description":"This is made to look more or less like the cover of MUSE Origin of Symmetry album.","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["cover","originofsymmetry"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n*void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n*/\nprecision highp float;\n\n\n#define MAX_STEPS 400\n#define MIN_DIST .0001\n#define MAX_DIST 300.\n\n#define BW .25\n#define GS 30.\n\n\nfloat r1(vec2 uv){\n\treturn texture(iChannel0, uv).r;\n\t}\nfloat dbox( vec3 p, vec3 b ){\n\tvec3 q = abs(p) - b;\n    return length(max(q,0.0))\n        + min(max(q.x,max(q.y,q.z)),0.0);\n}\n/*\nfloat antenna(vec3 p, vec3 s){\n\tfloat b1 = dbox(p-vec3(0,s.x,0),\n\t\t\tvec3(BW,s.x,BW));\n\t\t\t\tfloat b2 = dbox(p-vec3(0,s.x*2.,0),\n\t\t\t\t\t\tvec3(s.z, BW, BW));\n\tfloat b31 = dbox(p-vec3(s.z,s.x*2.+s.y,0),\n\t\t\tvec3(BW, s.y, BW));\n\t\t\t\tfloat b32 = dbox(p-vec3(-s.z,s.x*2.+s.y,0),\n\t\t\t\t\t\tvec3(BW, s.y, BW));\n\t\t\t\t\t\t\treturn min(min(b1, b2),min(b31,b32));\n\t\t\t\t\t\t\t}*/\nfloat antenna2(vec3 p){\n\tif(p.y < 16.){\n        return min(\n            dbox(p-vec3(0,8,0), vec3(BW,8,BW)),\n            dbox(p-vec3(0,16,0), vec3(2,BW,BW))\n        );\n    }else{\n        return min(min(\n                dbox(p-vec3(-2,21,0), vec3(BW,5,BW)),\n                dbox(p-vec3(02,21,0), vec3(BW,5,BW))\n            ),\n            dbox(p-vec3(0,16,0), vec3(2,BW,BW))\n        );\n    }\n}\nfloat dist(vec3 p){\n\tfloat plane = p.y;\n\tvec2 id = floor(p.xz/GS);\n\t\tvec3 ap = vec3(0);\n        ap.xz = id*GS + .5*GS;\n        /*float ant = antenna(p-ap,\n        vec3(\n        /*mix(1.,16.,r1(id*.7)),\n        mix(1.,8.,r1(id*.37)),\n        mix(2.,5.,r1(id*.43))\n        8.,5.,2.\n        ));*/\n        float ant = antenna2(p-ap);\n        return min(ant\n            +.06*sin(dot(p,vec3(.3,.4,.7))),\n            plane);\n}\n\nvec3 normal(vec3 p){\n\tvec2 e = vec2(.001, 0);\n    return (vec3(\n        dist(p+e.xyy),\n        dist(p+e.yxy),\n        dist(p+e.yyx)\n    )-dist(p))/e.x;\n}\n\nvec2 trace(vec3 ro, vec3 rd){\n\tfloat d0 = 0.;\n    float mn = MAX_DIST;\n    for(int i=0; i < MAX_STEPS; i++){\n        vec3 p = ro + d0*rd;\n        float d = dist(p);\n        mn = min(mn, d);\n        d0 += d;\n        if(d<MIN_DIST || d0>MAX_DIST)break;\n    }\n    return vec2(d0, mn);\n}\nfloat sshadow(vec3 p, vec3 ld, float k, float maxd){\n\tfloat res = 1.;\n    for(float d0=0.; d0<maxd;){\n        float d = dist(p+ld*d0);\n        if(d<MIN_DIST)return 0.;\n        res = min(res,k*d/d0);\n        d0 += d;\n    }\n    return res;\n}\nvec3 material(vec3 p, vec3 rd){\n\t//vec3 color = vec3(0);\n\t//sun\n    //const vec3 sp = vec3(1000,500,-300);\n    const vec3 sc = vec3(1,.9,.9);\n\t//vec3 L = normalize(sp - p);\n    const vec3 L = normalize(vec3(10,5,-3));\n    vec3 n = normal(p);\n\t//stylized white floor\n    if(p.y<.1){\n        return vec3(trace(p+n*MIN_DIST*2., L).x<MAX_DIST ? 0. : 1.);\n        //return vec3(\n        //\tsshadow(p+n*MIN_DIST*2., L, 128., 999.));\n    }else{\n        //diffuse\n        //color += max(0.,dot(L, n))*sc;\n        return max(0.,dot(L, n))*sc*2.;\n    }\n    //return color;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = (fragCoord.xy-.5*iResolution.xy)\n\t\t\t/ iResolution.x;\n\tvec3 color = vec3(0);\n\tvec3 ro = vec3(\n\t\t\tiTime*15.,\n\t\t\t\t\t4,\n\t\t\t\t\t\t\tsin(iTime*.5)*30.);\n\tvec3 rd = normalize(vec3(uv*1.5, 1));\n    rd.yz *= mat2(cos(0.15), sin(.15), -sin(.15), cos(.15));\n\t/*const float angle = -.5;\n    const float c = cos(angle);\n    const float s = sin(angle);\n    const mat2 rot = mat2(c, -s, s, c);*/\n    float angle = -.5 - (iMouse.x/iResolution.x-.5);\n    //float angle = -.5;\n    float c = cos(angle);\n    float s = sin(angle);\n    mat2 rot = mat2(c, -s, s, c);\n    rd.xz *= rot;\n\tvec2 d = trace(ro, rd);\n\tif(d.x < MAX_DIST){\n        vec3 p = ro + rd*d.x;\n        color += material(p,rd);\n    }else{\n        color += vec3(1,.75,0);\n        color *= clamp(d.y, 0., 1.) < .1 ? 0. : 1.;\n    }\n\n\t//color += d*.001;\n\n\tfragColor = vec4(color, 1.0);\n}\n\t\n","name":"Image","description":"","type":"image"}]}