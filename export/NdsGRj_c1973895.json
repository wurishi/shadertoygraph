{"ver":"0.1","info":{"id":"NdsGRj","date":"1616263187","viewed":631,"name":"simple sierpinski triangle","username":"Angramme","description":"A really simple sierpinski triangle. Used a logarithmic function to zoom smoothly.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["fractal","triangle","sierpinski"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"precision highp float;\n\n#define PI 3.14159265359\n#define L 1.5\n#define N 11.\n\n#define OVERFLOW 0.035\n#define HARSHNESS 2.\n\n#define SPEED .8\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = 1.7*(fragCoord-.5*iResolution.xy)/iResolution.y;\n    uv.y *= -1.;\n    //vec3 color = vec3(uv.xy, 0);\n    vec3 color = vec3(0);\n\n    uv.y -= .25;\n    \n    // a value of 1/2 works because homotheties scale by 1/2\n    const float logval = .5;\n    float T = (exp(mod(iTime*log(logval)*SPEED, 1.*log(logval)))-1.)/(logval-1.);\n    uv *= mix(.5, .25, T);\n    //uv.xy -= vec2(0, 1)*mix(.5, .75, T);\n    uv.xy -= vec2(cos(PI*30./180.), -sin(PI*30./180.))*mix(.5, .75, T);\n    \n    \n\n    //complexit√© O(n)\n    for(int i=0; i<int(N); i++){\n        if(-uv.y > abs(uv.x)*0.57735026){\n            uv = (uv-vec2(0, -L/3.))*2.;\n        }else if(uv.x > 0.){\n            uv = (uv-vec2(cos(PI/6.)/3.*L, sin(PI/6.)/3.*L))*2.;\n        }else{\n            uv = (uv-vec2(-cos(PI/6.)/3.*L, sin(PI/6.)/3.*L))*2.;\n        }\n    }\n    \n\n    //check if point is inside the triangle in the middle\n    // if(//dot(normalize(uv-vec2(0, -2./3.*L)), vec2(0, 1)) > 0.866025404\n    //     uv.y+2./3.*L > abs(uv.x)*1.7320\n    //     && uv.y < 1./3.*L){\n    //     color.rg = vec2(1.);\n    // }\n\n    float inside_amount = HARSHNESS*min(\n        min(max(0., (uv.y+2./3.*L) - (abs(uv.x)-OVERFLOW*N)*1.7320)*10./N, 1.),\n        min(max(0., -uv.y + 1./3.*L +OVERFLOW*N)*15./N, 1.)  \n    );\n    // color.rg = vec2(inside_amount);\n    color.rgb = vec3(.3, 1., .2)*inside_amount;\n\n    fragColor = vec4(color, 1);\n}","name":"Image","description":"","type":"image"}]}