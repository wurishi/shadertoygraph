{"ver":"0.1","info":{"id":"ftKfWy","date":"1665177663","viewed":94,"name":"Refracting metaballs","username":"Apaksi","description":"Refracting metaballs","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["metaballs","refraction"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat r = 5.0;\n\nvec3 ball_normal(vec2 texcoord, vec2 pos)\n{\n    vec3 N;\n    N.xy = texcoord * r - r/2.0;\n    N.xy -= pos;\n    float r2 = dot(N.xy, N.xy);\n    \n    if (r2 > 1.0)\n        return vec3(0.0, 0.0, 0.0);\n    \n    N.z = sqrt(1.0 - r2);\n    float weight = mix(0.2, 0.9, pow(1.0 - r2, 10.0));\n    return N * weight;\n}\n\nfloat ball_depth(vec2 texcoord, vec2 pos)\n{\n    float bg_depth = 100.0;\n    float base_depth = 0.8;\n    float front_depth = 0.2;\n    \n    vec3 N;\n    N.xy = texcoord * r - r/2.0;\n    N.xy -= pos;\n    float r2 = dot(N.xy, N.xy);\n    \n    if (r2 > 1.0)\n        return bg_depth;\n    \n    N.z = sqrt(1.0 - r2);\n    return mix(base_depth, front_depth, N.z);\n}\n\nvec2 ball0_pos() { return vec2(cos(iTime*2.34), sin(iTime*1.45)); }\nvec2 ball1_pos() { return vec2(cos(iTime*1.17), sin(iTime*1.26)); }\nvec2 ball2_pos() { return vec2(cos(iTime*1.58), sin(iTime*1.68)); }\n\nvec3 gbuffer(vec2 texcoord)\n{\n    vec3 g = vec3(0.0, 0.0, 0.0);\n    g += ball_normal(texcoord, ball0_pos());\n    g += ball_normal(texcoord, ball1_pos());\n    return length(g) > 0.1 ? normalize(g) : g;\n}\n\nfloat depth(vec2 texcoord)\n{\n    float z = 100.0;\n    z = min(z, ball_depth(texcoord, ball0_pos()));\n    z = min(z, ball_depth(texcoord, ball1_pos()));\n    return z;\n}\n\n\nfloat gauss(vec2 pos, vec2 texcoord)\n{\n    return exp(-10.0 * length(texcoord - pos));\n}\n\nfloat gausses(vec2 texcoord)\n{\n    float a = gauss(0.5 + 0.2 * ball0_pos(), texcoord);\n    float b = gauss(0.5 + 0.2 * ball1_pos(), texcoord);\n    float d = gauss(0.5 + 0.2 * ball2_pos(), texcoord);\n    float c = a + b + d;\n    return c;\n}\n\nfloat cl(float a)\n{\n    return clamp(a, 0.0, 1.0);\n}\n\nvec2 change(float d)\n{\n    vec2 ret;\n    d -= 0.5;   //return d;\n    ret.x = d;\n    //if (d < 0.0) return -0.001;\n    //d = clamp(d, 0.0, 1.0);\n    d = 1.0-pow(1.0-d, 6.0);\n    ret.y = d;\n    //d = mix(0.0, 0.3, d);\n    // TODO: Could use a smoothstep here\n    return ret;\n}\n\nfloat checker(vec2 st)\n{\n    float chk = 0.08;\n    float cel = 0.0;\n    float c0 = 0.01;\n    float c1 = 0.2;\n    if (mod(st.t, chk) > chk/2.0)\n      cel = mod(st.s, chk) > chk/2.0 ? c0 : c1;\n    else\n      cel = mod(st.s, chk) < chk/2.0 ? c0 : c1;\n    return cel;\n}\n\nvec3 calc_blob_normal(vec2 st, float c0, float c1, float c2, vec2 d1, vec2 d2)\n{\n    vec3 pos0 = vec3(st, c0);\n    vec3 pos1 = vec3(st + d1, c1);\n    vec3 pos2 = vec3(st + d2, c2);\n    vec3 edge0 = normalize(pos1 - pos0);\n    vec3 edge1 = normalize(pos2 - pos0);\n    vec3 N = normalize(cross(edge0, edge1));\n    return N;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 st = fragCoord/iResolution.xy;\n    st.x -= (iResolution.x - iResolution.y) / iResolution.x / 2.0;\n    st.x *= iResolution.x / iResolution.y;\n    \n    float dd = 1.0 / 50.0;\n    vec2 d1 = vec2(dd, 0.0);\n    vec2 d2 = vec2(0.0, dd);\n    \n    float c0 = gausses(st);\n    float c1 = gausses(st + d1);\n    float c2 = gausses(st + d2);\n    \n    vec2 cc0 = change(c0);\n    vec2 cc1 = change(c1);\n    vec2 cc2 = change(c2);\n    \n    vec3 N = calc_blob_normal(st, cc0.y, cc1.y, cc2.y, d1, d2);\n    vec3 N_refl = calc_blob_normal(st, cc0.x, cc1.x, cc2.x, d1, d2);\n\n    vec2 cst = mix(vec2(-0.4, -0.4), vec2(0.4, 0.4), st);\n    vec3 cst3 = normalize(vec3(cst, 1.0));\n    \n    //vec2 sample_st = cst3.xy;\n    vec2 sample_st = st + -0.03 * mix(N, N_refl, 0.3).xy;   // N.st\n    \n    fragColor = vec4(vec3(checker(st)), 1.0);\n    \n    if (cc0.x > 0.0)\n    {\n        vec3 L = normalize(vec3(1.0, 1.0, 1.0));\n        float diffuse = clamp(dot(N, L), 0.0, 1.0);\n        float ambient = 0.8;\n        //diffuse *= c0;\n        float brig = ambient + 0.9*diffuse;\n        //brig *= c0;\n        brig = mix(brig, cc0.y, 0.768);\n        fragColor.rgb = brig*vec3(0.5,0.7,0.9);\n        \n        fragColor.rgb = mix(fragColor.rgb*1.748, vec3(checker(sample_st)), 0.584);\n    }\n}\n\n// TODO: speculars\n","name":"Image","description":"","type":"image"}]}