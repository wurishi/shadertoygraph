{"ver":"0.1","info":{"id":"4tjczw","date":"1507965958","viewed":106,"name":"request: sound texture sampling","username":"aaaidan","description":"Would be excellent if the sound shader could sample from textures, including the keyboard texture, which would allow creation of musical instruments.\n\nHit shift to demonstrate that the sound shader can't sample. Then uncomment line 13 in Sound shader.","likes":1,"published":1,"flags":24,"usePreview":0,"tags":["sound","demo","featurerequest"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int KEY_SHIFT = 16;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // This texelFetch is exactly copied to the sound shader, but only works here.\n    float shiftDown = texelFetch( iChannel1, ivec2(KEY_SHIFT,0), 0 ).x;\n    \n\tfragColor =\n        vec4(.0,.2,.3, 1.) + \n        vec4(.0,.2,.9, 0.) * shiftDown;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"// Uncomment line 12 to simulate expected behaviour\n\n#define PI 3.141592654\n#define PI2 PI*2.0\n\nconst int KEY_SHIFT = 16;\n\nvec2 mainSound( in int samp, float time )\n{\n    // this texelFetch always seems to return zero in the sound shader.\n    float shiftDown = texelFetch( iChannel1, ivec2(KEY_SHIFT,0), 0 ).x;\n   \t\n    //shiftDown = 1.0; // Uncomment to simulate expected behaviour\n    \n    float vibratoAmount = 2.0;\n    float vibratoRate = 6.5;\n    float oscPhaseOffset = sin(mod(PI2 * time * vibratoRate, PI2)) * vibratoAmount;\n    float oscFreq = 440.0 * (shiftDown * 0.5 + 1.0);\n    float osc = sin(mod(PI2 * oscFreq * time + oscPhaseOffset, PI2));\n    \n    float oscGain = shiftDown * 0.05 + 0.01;\n    \n    return vec2( osc*oscGain );\n}","name":"Sound","description":"","type":"sound"}]}