{"ver":"0.1","info":{"id":"lf2fDW","date":"1725425977","viewed":48,"name":"pixelize pattern","username":"ChunderFPV","description":"Mouse x = zoom.  Mouse y = tile size.  R key toggles the red lines.\nA bunch of equations are there at the top of the code to play with, or use your own.","likes":6,"published":1,"flags":16,"usePreview":0,"tags":["example","grid","pixel","moire"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//#define T ( x*y - t )\n//#define T ( x/y - t )\n//#define T ( y - x*x + t )\n//#define T ( x*x + y*y - t )\n//#define T ( y - sin(x*x - t) )\n//#define T ( ((x*x + y*y - 1.) / x) - t )\n//#define T ( log(abs(y)) / log(abs(x)) - t )\n//#define T ( (sqrt(x*x+y*y) - 2.) * y*2. - t )\n#define T ( cos(atan(x, y)*6.) + sqrt(x*x+y*y) - t )\n//#define T ( tan(log(sqrt(x*x+y*y)) + atan(y, x)/2.) - t )\n\n#define Q(u) u /= s; x = u.x;  y = u.y; x = T;\n\nvoid mainImage(out vec4 C, in vec2 U)\n{\n    float t = iTime/2.,\n          x, y, s, g;\n    \n    vec2 R = iResolution.xy,\n         m = 1.-iMouse.xy/R,\n         u = (U-R/2.)/R.y,\n         o, k;\n    \n    vec3 c = vec3(0);\n    \n    s = max(10., m.y*R.y/2.);  // scale min/max\n    u *= s;  // scale coords\n    o = round(u);  // rounded coords\n    k = max(vec2(0), 1.-abs(u-o)*2.);  // tile coords\n    g = min(k.x, k.y);  // grid squares\n    s /= 4. + 1./m.x;\n    Q(o)\n    c += .2*g + g*g*step(abs(x-round(x)), .5/s)*1.5;  // tile field\n    \n    if (texelFetch(iChannel0, ivec2(82, 2), 0).x < 1.) // R key\n    {\n        Q(u)\n        c.r += .5 * min(1., .5*fwidth(x)/abs(x-round(x)));  // red field\n    }\n    \n    C = vec4(c, 1);\n}","name":"Image","description":"","type":"image"}]}