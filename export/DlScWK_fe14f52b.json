{"ver":"0.1","info":{"id":"DlScWK","date":"1692262859","viewed":25,"name":"Practica_GLSL_3","username":"Igor_Voronetchi","description":"Sfera","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["igorvoronetchi"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Definim constantele\n#define MAX_STEPS 100 //de tip integer\n#define MAX_DIST 100. // tip float, de aceea folosim decimal point\n#define SURF_DIST .01\n//Funcția ce ne returnează distanța de la camera până la obiect(sfera in cazul nostru)\nfloat GetDist(vec3 p) {\n\tvec4 s = vec4(0, 1, 6, 1); //declaram sfera, primii 3 parametri sunt pozitii si ultimul raza\n    \n    float sphereDist =  length(p-s.xyz)-s.w; //distanta pana la sfera\n    float planeDist = p.y; // distanta pana la plan\n    \n    float d = min(sphereDist, planeDist);// returnăm minimul dintre acestea\n    return d;\n}\n// Funcția Ray Marching\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || dS<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n//Funcția de normalizare\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.01, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n// Funcția\nfloat GetLight(vec3 p) {\n    vec3 lightPos = vec3(0, 5, 6); //deasupra sferei\n    lightPos.xz += vec2(sin(iTime), cos(iTime))*2.;\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l), 0., 1.);\n    float d = RayMarch(p+n*SURF_DIST*2., l);\n    if(d<length(lightPos-p)) dif *= .1;\n    \n    return dif;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y; //am modificat rezolutia ecranului\n\n    vec3 col = vec3(0); // culoarea neagra\n    \n    vec3 ro = vec3(0, 1, 0); //pozitia camerei, ray origin\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1)); // ray direction\n\n    float d = RayMarch(ro, rd);\n    \n    vec3 p = ro + rd * d;\n    \n    float dif = GetLight(p);\n    col = vec3(dif);\n    \n    col = pow(col, vec3(.4545));\t// gamma correction\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}