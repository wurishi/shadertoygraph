{"ver":"0.1","info":{"id":"lfjXR1","date":"1706052825","viewed":60,"name":"Tutorial Island","username":"Bretonnian_Steelshaper","description":"Tutorial from Kishimisu YT video about Shader Code.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["tutorial","new"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Steelshaper\n// Tutorial + messing around\n\n\nvec3 palette( float t ) {\n\n    vec3 a = vec3(0.2, 0.7, 0.2);\n    vec3 b = vec3(0.2, 0.5, 0.2);\n    vec3 c = vec3(1.0, 1.0, 0.5);\n    vec3 d = vec3(0.1, 0.2, 0.3);\n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n// function that uses multiple vec3's to control the RGB channels. Parameters can be altered for like infinite colors\n// vec3 col can now be set for palette with the SDF passed as an arg \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\n    vec2 uv = fragCoord / iResolution.xy * 2.0 - 1.0;\n    // iResolution is a global variable from Shadertoys that is a vec3(xyz) (x=w y=h z=depth) \n    // converts from world space to clip space (screen size to range size of 1-1)\n    // using the normal vector, this makes the origin the center of the canvas\n    // this allows the entire of the clip space to be used (0-1)\n    \n    vec2 uv0 = uv;\n    // keeps track of the origin of the canvas before space repetition is applied\n\n    vec3 finalColor = vec3(0.0);\n    // needed for iteration\n    \n    for (float i = 0.0; i < 1.2; i++) {\n        // for loop forces iteration, the iteration value can make things overwhelming, and an even number\n        // can cause things to line up too well\n        \n        uv = fract(uv * 2.0) - 0.5;\n        // returns the fractional piece of the output over time, however this will require recentering the SDF like previously\n        // multiplying by 2, subtracting 0.5 to recenter in clip space\n        uv.x *= iResolution.x/iResolution.y;\n        // changes the normal vector x axis by the canvas aspect ratio to ensure there is no distortion\n      \n        float d = length(uv);\n        // length function calculates the distance from the orgin to a vertex (magnitude of a vector)\n        // this is also behaving as a pseudo Signed Distance Function(SDF) \n    \n        vec3 col = palette(length(uv0) + iTime*.4);\n        // vector to control color channels, passing uv0 breaks the local gradient repetition\n    \n        d = sin(d*8. + iTime)/50.;\n        // using sin creates a pattern of rings, adding a time variable causes the shader to \"oscillate\"\n        // the first constant (d*x.) changes the size of the rings, the second constant changes color intensity\n        d = abs(d);\n        // forces abs value, creating a ring distances outside of shape are +, inside are -\n    \n        d = smoothstep(0.0, 0.1, d);\n        // using two parameter thresholds, the function assigns pixels to be black that are below the first threshold\n        // assigning values to be white that exceed the second threshold\n        // values in between are interpolated between black and white (creates a smooth gradient)\n    \n        d= 0.02 / d;\n        finalColor += col * d;\n        // multiply the color vector and SDF\n    }\n    \n    fragColor = vec4(finalColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}