{"ver":"0.1","info":{"id":"XXfcW8","date":"1726068641","viewed":6,"name":"CIS566 Lab1 - Custom","username":"renzhen","description":"CIS566 Lab1 - Custom","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["circle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/**\n * @author rah, inspired by jonobr1 / http://jonobr1.com/\n */\n\n/* \n * Output circle colors at given center pos and radius\n */\n \n const float pi = 3.14159265359;\nvec4 circle(vec2 uv, vec2 center, float radius, vec3 color)\n{\n    // Get distance of point from center, get difference from given radius\n\tfloat d = length(center - uv) - radius;\n\tfloat t = clamp(d, 0.0, 1.0);\n    \n    // If point is smaller than radius, set color alpha to 1, otherwise 0\n\treturn vec4(color, 1.0 - t);\n}\n\n/*\n * Your work here!\n */\n \n float fbm(float p)\n {\n     float f = 0.0;\n     f += 0.5000*sin( p ); p = p*2.02;\n     f += 0.2500*sin( p );\n     return f/0.75;\n }\n\n\nfloat computeRadius(vec2 uv)\n{\n    float radius = 0.5 * iResolution.y;\n    \n    // Centered uv\n    vec2 uvCenter = (2.0f * uv - iResolution.xy);\n    // Get pixel angle around the center\n    float a = atan(uvCenter.x,uvCenter.y) / pi;\n    return radius * (1.0 + 0.5 * sin(1.2 * iTime) * bias(abs(fract(a * 4.0) - 0.5), 1.4 + 0.2 * sin(iTime)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n\tvec2 uv = 1.5 * fragCoord.xy;\n\tvec2 center = iResolution.xy * 0.5;\n    float d = length(center - uv) / (0.5 * iResolution.y);\n    uv = rotatePoint2d(uv, center, 2.0 * iTime + 1.5 * abs(fbm(1.5 * d)));\n\tfloat radius = computeRadius(uv);\n    \n    // Background layer\n\tvec4 layer1 = vec4(rgb(255.0, 215.0, 210.0), 1.0);\n\t\n\t// Circle\n\tvec3 red = rgb(225.0, 50.0, 70.0);\n    red.z = 0.25 + 0.25 *sin(1.5 * iTime);\n    vec3 orange = rgb(225.0, 100.0, 20.0);\n    orange.z = 0.75 + 0.25 *sin(1.5 * iTime);\n\tvec4 layer2 = circle(uv, center, radius, mix(red, orange, d));\n\t\n\t// Blend the two\n\tfragColor = mix(layer1, layer2, layer2.a);\n\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/*\n * Toolbox functions! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n */ \nfloat bias(float t, float b) {\n    return (t / ((((1.0/b) - 2.0)*(1.0 - t))+1.0));\n}\n\n/*\n * Basic Utilities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n */\n\n\n/* \n * Rotate an input point about some center by angle\n */\nvec2 rotatePoint2d(vec2 uv, vec2 center, float angle)\n{\n    vec2 rotatedPoint = vec2(uv.x - center.x, uv.y - center.y);\n    float newX = cos(angle) * rotatedPoint.x - sin(angle) * rotatedPoint.y;\n    rotatedPoint.y = sin(angle) * rotatedPoint.x + cos(angle) * rotatedPoint.y;\n    rotatedPoint.x = newX;\n    return rotatedPoint + center;\n}\n\n/*\n * Make a vec3 color from rgb values [0, 255]\n */\nvec3 rgb(float r, float g, float b)\n{\n\treturn vec3(r / 255.0, g / 255.0, b / 255.0);\n}","name":"Common","description":"","type":"common"}]}