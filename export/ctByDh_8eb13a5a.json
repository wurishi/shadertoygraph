{"ver":"0.1","info":{"id":"ctByDh","date":"1691691226","viewed":76,"name":"Anti-Aliased Finite 2D Grid","username":"etscrivner","description":"Displays anti-aliased 2D grid lines kept within min,max bounds. The bounded region is translated along the diagonal and zoomed in and out to demonstrate behavior.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","grid","antialiased","finite","bounded"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float g_GridSquareSizePixels = 16.0;\nconst float g_Gamma = 2.2;\n\n// Helper function returns the color intensity of grid line at given coordinates\nfloat GridColorIntensity(vec2 frag_coord, float zoom, vec2 min_pos) {\n\tvec2 grid_square_size = vec2(g_GridSquareSizePixels) * zoom;\n\t\n\tvec2 screen_coords = floor(frag_coord.xy - min_pos);\n    \n    vec2 coord = screen_coords / grid_square_size;\n\tvec2 grid_square_coords = abs(fract(coord - 0.5) - 0.5) / fwidth(coord);\n    \n    float line = min(grid_square_coords.x, grid_square_coords.y);\n    \n    float color = 1.0 - min(line, 1.0);\n    color = pow(color, 1.0 / g_Gamma); // Gamma correct (significantly improves popping)\n    \n    return(color);\n}\n\nvoid mainImage(out vec4 frag_color, in vec2 frag_coord) {\n    vec2 min_pos = vec2(32.0, 32.0);\n    vec2 max_pos = vec2(1040.0, 640.0);\n    \n    // Subtract 1.0 to avoid clipping off max horizontal and vertical lines\n    // while also keeping things within bounds. This is needed since the line\n    // has a thickness of 1 pixel.\n    min_pos -= 1.0;\n    \n    // Translate the region along the diagonal as well as adjusting zoom level in and out.\n    vec2 translation = vec2(25.0 * sin(iTime));\n    float zoom_level = cos(iTime / 5.0) + 1.5;\n    \n    // Set zoom_level to a constant to just see bounded region wobbling\n    //zoom_level = 1.0;\n    \n    frag_coord += translation;\n    \n\tfloat grid_color = GridColorIntensity(frag_coord, zoom_level, min_pos);\n    \n    // Avoid a branch by using mix with this boolean expression.\n    bool out_of_range = (frag_coord.x < min_pos.x || frag_coord.x > max_pos.x || frag_coord.y < min_pos.y || frag_coord.y > max_pos.y);\n\tvec3 color = vec3(mix(grid_color, 0.0, float(out_of_range)));\n    \n    frag_color = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}