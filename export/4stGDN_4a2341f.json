{"ver":"0.1","info":{"id":"4stGDN","date":"1449736444","viewed":411,"name":"Strange Fruit","username":"gaz","description":"3d","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarching","fold"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"#define PI\t3.14159265359\n#define PIH\tPI * 0.5\n\nmat2 rotate(float a)\n{\n    return mat2(cos(a), sin(a), -sin(a), cos(a));\n}\n\n// https://www.shadertoy.com/view/MtsGWH\nvec4 boxmap(sampler2D sam, in vec3 p, in vec3 n)\n{\n    vec3 m = pow(abs(n), vec3(8.0));\n\tvec4 x = texture(sam, p.yz);\n\tvec4 y = texture(sam, p.zx);\n\tvec4 z = texture(sam, p.xy);\n\treturn (x*m.x + y*m.y + z*m.z)/(m.x+m.y+m.z);\n}\n\nvec2 fold(in vec2 p)\n{\n    vec2 v = vec2(cos(PIH), sin(PIH));\n    p.x = abs(p.x);\n    for(int i = 0; i < 5; i++)\n    {\n        p -= 2.0 * min(0.0, dot(p, v)) * v;\n        v = normalize(vec2(v.x - 1.0, v.y));\n    }\n    return p;    \n}\n\nfloat map(in vec3 p)\n{\n    p.zx *= rotate(iTime * 0.2);\n    p.yz *= rotate(PIH);\n    vec3 q = p;\n\tp.zx = fold(p.zx);\n    float a = atan(q.x, q.z);\n    p.x -= 0.5 + cos(a * 10.0) * 0.1;\n    float de = length(p.xy * vec2(1.0, 0.5)) - 1.0;    \n    de -= boxmap(iChannel0, q * 0.8, q).x *  0.05;    \n    return de;\n}\n\n/*\nfloat map(in vec3 p)\n{\n    p.zx *= rotate(iTime * 0.2);\n    p.yz *= rotate(PIH);\n\tfloat a = atan(p.x, p.z);\n    p.zx = fold(p.zx);\n    //p.x -= 0.5;\n    //float de = length(p.xy * vec2(1.0, 0.5)) - (1.0 + cos(a * 10.0) * 0.05);\n    p.x -= 0.5 + cos(a * 10.0) * 0.1;\n    float de = length(p.xy * vec2(1.0, 0.5)) - 1.0;    \n    // https://www.shadertoy.com/view/ldd3DH\n    de -= length(sin(p * 30.0) * 0.005);\n    return de;\n}\n*/\n\nvec3 calcNormal( in vec3 pos )\n{\n    vec2 e = vec2(1.0, -1.0) * 0.002;\n    return normalize(\n        e.xyy * map(pos + e.xyy) + \n        e.yyx * map(pos + e.yyx) + \n        e.yxy * map(pos + e.yxy) + \n        e.xxx * map(pos + e.xxx));\n}\n\nfloat intersect(in vec3 ro, in vec3 rd)\n{\n    const float maxd = 10.0;\n    const float precis = 0.001;\n    float h = 1.0;\n    float t = 0.0;\n    for(int i = 0; i < 64; i++)\n    {\n        if(h < precis || t > maxd) break;\n        h = map(ro + rd * t);\n        t += h;\n    }\n    if( t > maxd ) t = -1.0;\n    return t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n\tvec3 col = mix(vec3(0.03, 0.08, 0.0), vec3(0.35, 0.2, 0.1), smoothstep(0.3, 2.5, length(p)));\n    vec3 ro = vec3(0.0, 0.0, 5.0);\n    vec3 rd = normalize(vec3(p, -1.8));\n    float t = intersect(ro, rd);\n    if(t > -0.001)\n    {\n        vec3 pos = ro + t * rd;\n        vec3 nor = calcNormal(pos);\n\t\tvec3 li = normalize(vec3(0.5, 0.8, 3.0));\n    \tcol = mix(vec3(0.2, 0.6, 0.1), vec3(0.8, 0.3, 0.15), smoothstep(-2.1, 1.5, pos.x));\n        col *= max(dot(li, nor), 0.2);\n        col += pow(max(dot(vec3(0, 0, 1), reflect(-li, nor)), 0.0), 30.0);\n        col = pow(col, vec3(0.8)); \n    }\n    fragColor = vec4(col, 1.0);\n}\n","name":"","description":"","type":"image"}]}