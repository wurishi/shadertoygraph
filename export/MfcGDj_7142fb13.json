{"ver":"0.1","info":{"id":"MfcGDj","date":"1712126849","viewed":52,"name":"S4 Multiple objects","username":"raphaeleg","description":"- Gradient via mix function\n- Multiple ways of drawing 2D shapes\n- Overlapping shapes\n-----\npurely for self-learning\nTutorial by Nathan Vaughn","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["mix","gradient","shapes"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 getBackgroundColor(vec2 uv) {\n    vec3 gradientStartColor = vec3(1.);\n    vec3 gradientEndColor = vec3(1., 0.7, 0.5);\n    \n    // mix = x * (1 - a) + y * a\n\n    // x = first value\n    // y = second value\n    // a = value that linearly interpolates between x and y\n    return mix(gradientStartColor, gradientEndColor, uv.y); // gradient goes from bottom to top \n}\nfloat sdfCircle(vec2 uv, float r, vec2 offset) {\n    vec2 newUV = uv - offset;\n    return length(newUV) - r;\n}\nfloat sdfSquare(vec2 uv, float size, vec2 offset) {\n  vec2 newUV = uv - offset;\n  return max(abs(newUV.x), abs(newUV.y)) - size;\n}\n// Gradient BG\nvec4 v1_0(in vec2 fragCoord) {\n    vec2 uv = (fragCoord/iResolution.xy)*2.-1.;\n    uv.x *= iResolution.x/iResolution.y; // fix aspect ratio\n    \n    vec3 finalCol = getBackgroundColor(uv);\n    \n    return vec4(finalCol,0.);\n}\n// Draw Circle using different methods\nvec4 v2_0(in vec2 fragCoord) {\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec3 finalCol = vec3(1.);\n    float circle = sdfCircle(uv, 0.3, vec2(0, 0));\n\n    // from blue to white, interpolate starting at circle edge\n    finalCol = mix(vec3(0, 0, 1), finalCol, circle);\n    \n    return vec4(finalCol,0.);\n}\nvec4 v2_1(in vec2 fragCoord) {\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec3 finalCol = vec3(1.);\n    float circle = sdfCircle(uv, 0.3, vec2(0, 0));\n\n    // from blue to white, interpolate in circle\n    finalCol = mix(vec3(0, 0, 1), finalCol, step(0., circle));\n    \n    return vec4(finalCol,0.);\n}\nvec4 v2_2(in vec2 fragCoord) {\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    \n    float circle = sdfCircle(uv, 0.3, vec2(0, 0));\n    circle = step(0.3, circle);\n    vec3 blue = vec3(0.,0.,1.);\n    vec3 finalCol = vec3(circle) + blue;\n    \n    return vec4(finalCol,0.);\n}\n// Overlapping multiple objects\nvec4 v3_0(in vec2 fragCoord) {\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    \n    float circle = sdfCircle(uv, 0.3, vec2(0, 0));\n    float square = sdfSquare(uv, 0.2, vec2(0.3, 0));\n    vec3 finalCol = vec3(1.);\n    // from blue to white, interpolate in circle\n    finalCol = mix(vec3(0, 0, 1), finalCol, step(0., circle)); \n    finalCol = mix(vec3(1, 0, 0), finalCol, step(0., square));\n    \n    return vec4(finalCol,0.);\n}\nvec4 v3_1(in vec2 fragCoord) {\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    \n    float circle = sdfCircle(uv, 0.3, vec2(0, 0));\n    float square = sdfSquare(uv, 0.2, vec2(0.3, 0));\n    vec3 finalCol = getBackgroundColor(uv);\n    // from blue to white, interpolate in circle\n    finalCol = mix(vec3(0, 0, 1), finalCol, step(0., circle)); \n    finalCol = mix(vec3(1, 0, 0), finalCol, step(0., square));\n    \n    return vec4(finalCol,0.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = v3_1(fragCoord);\n}","name":"Image","description":"","type":"image"}]}