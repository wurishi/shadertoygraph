{"ver":"0.1","info":{"id":"MlcfRM","date":"1539028488","viewed":618,"name":"Wave PDE","username":"vchizhov","description":"Solves the wave PDE with finite differences. LMB - deform plane, Space: mode switch, WS - wave propagation speed, DA - attenuation speed, EQ - radius of the brush, ZX - oscillation speed of the brush, TG - scale of the offset for the image.","likes":11,"published":1,"flags":48,"usePreview":0,"tags":["waveequation","pde","finitedifference"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define P(X,Y) texture(iChannel0, (fragCoord+vec2(0.5)+vec2(X,Y))/res).x\n\n/*\n\tSolves the wave PDE and visualizes it:\n\td^u/dt^2 = div(grad_spatial(u))\n\n*/\n\n\nfloat apply3x3Kernel(float kernel[9], vec2 fragCoord, vec2 res)\n{\n    return kernel[0] * P(-1,1) + kernel[1] * P(0,1) + kernel[2] * P(1,1) +\n        kernel[3] * P(-1,0) + kernel[4] * P(0,0) + kernel[5] * P(1,0) +\n        kernel[6] * P(-1,-1) + kernel[7] * P(0,-1) + kernel[8] * P(1,-1);\n}\n\nfloat dx[9] = float[9]( 1.0, 0.0, -1.0,\n    \t\t\t\t\t2.0, 0.0, -2.0,\n    \t\t\t\t\t1.0, 0.0, -1.0 \n    \t\t\t\t\t);\n    \nfloat dy[9] = float[9]( -1.0, -2.0, -1.0,\n    \t\t\t\t\t0.0, 0.0, 0.0,\n    \t\t\t\t\t1.0, 2.0, 1.0 \n    \t\t\t\t\t);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec3 grad = normalize(vec3(apply3x3Kernel(dx, fragCoord, iResolution.xy), \n                     apply3x3Kernel(dy, fragCoord, iResolution.xy), 1.0));\n\n    int mode = int(texelFetch(iChannel0, ivec2(fragCoord), 0).y);\n    float scale = texelFetch(iChannel0, ivec2(fragCoord), 0).z;\n    vec3 col;\n    if(mode==0)\n    {\n     \tcol = texture(iChannel1, uv+scale*grad.xy/iChannelResolution[1].xy).xyz;\n    }\n    else if(mode==1)\n    {\n        col = grad*0.5 + vec3(0.5);\n    }\n    else\n    {\n        col = vec3(0.5*texture(iChannel0, fragCoord/iChannelResolution[0].xy).x+0.5);\n    }\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float keyDown(int ascii) {\n\treturn float(texture(iChannel2,vec2((.5+float(ascii))/256.,0.25)).x > 0.0);\n}\n\n\nconst int KEY_W = 87;\nconst int KEY_S = 83;\nconst int KEY_A = 65;\nconst int KEY_D = 68;\nconst int KEY_E = 69;\nconst int KEY_Q = 81;\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec3 info = texelFetch(iChannel3, ivec2(0,0), 0).yzw;\n    // stability condition: tau <= sqrt(0.6) ~ 0.77\n    float tauSensitivity = 0.001;\n    float tau = clamp(info.x+tauSensitivity*(keyDown(KEY_W) - keyDown(KEY_S)), 0.0, 0.77);\n    float attSensitivity = 0.001;\n    float att = clamp(info.y+attSensitivity*(keyDown(KEY_D) - keyDown(KEY_A)), 0.0, 0.1);\n    float radiusSensitivity = 1.0;\n    float radius = max(0.0,info.z+radiusSensitivity*(keyDown(KEY_E)-keyDown(KEY_Q)));\n    float oscillationSpeed = texelFetch(iChannel0,ivec2(fragCoord), 0).w;\n    \n    float col = finiteDiffWave(iChannel3, iChannel0, fragCoord, iChannelResolution[3].xy, tau, att);\n    \n    \n    \n    // initialize\n    if(iFrame==0)\n    {\n     \ttau = 0.77;\n        att = 0.01;\n        radius = 10.0;\n        oscillationSpeed = 20.0;\n    }\n    \n    if(iMouse.z>0.0)\n    {\n        float d = length(iMouse.xy * iChannelResolution[0].xy/iResolution.xy -fragCoord);\n        col = d<radius ? smoothstep(radius,0.0, d)*sin(oscillationSpeed*iTime) : col;\n    }\n    \n    fragColor = vec4(col,tau, att, radius);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"float keyDown(int ascii) {\n\treturn float(texture(iChannel2,vec2((.5+float(ascii))/256.,0.25)).x > 0.0);\n}\n\nbool keyHit(int ascii) {\n\treturn texture(iChannel2,vec2((.5+float(ascii))/256.,1.5/3.)).x == 1.0;\n}\n\nconst int KEY_Z = 90;\nconst int KEY_X = 88;\nconst int KEY_G = 71;\nconst int KEY_T = 84;\nconst int KEY_SPACE = 32;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 info = texelFetch(iChannel0, ivec2(0,0), 0).yzw;\n    float tau = info.x;\n    float att = info.y;\n    float radius = info.z;\n    \n    vec3 info2 = texelFetch(iChannel3,ivec2(0,0), 0).yzw;\n    float oscillationSensitivity = 0.1;\n    float oscillationSpeed = max(0.0, info2.z + oscillationSensitivity*(keyDown(KEY_X)-keyDown(KEY_Z)));\n    float scaleSensitivity = 1.0;\n    float scale = max(0.0, info2.y + scaleSensitivity * (keyDown(KEY_T)-keyDown(KEY_G)));\n    int mode = int(info2.x) + int(keyHit(KEY_SPACE));\n    mode = mode > 2 ? mode - 3 : mode < 0 ? mode + 3 : mode;\n    //initialize\n    if(iFrame==0)\n    {\n     \ttau = 0.77;\n        att = 0.01;\n        radius = 10.0;\n        oscillationSpeed = 20.0;\n        scale = 300.0;\n    }\n    \n    float col = finiteDiffWave(iChannel3, iChannel0, fragCoord, iChannelResolution[3].xy, tau, att);\n    fragColor = vec4(col,float(mode), scale,oscillationSpeed);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define up(X,Y) texture(old, (coord + vec2(X,Y))/res).x\n#define u(X,Y) texture(curr, (coord + vec2(X,Y))/res).x\n\nfloat finiteDiffWave(sampler2D old, sampler2D curr, vec2 coord, vec2 res, float tau, float att)\n{\n    // d^u/dt^2 = div(grad(u))\n    // (u''(0,0) - 2*u'(0,0) + u(0,0))/tau^2 = (u'(1,0)-2*u'(0,0)+u'(-1,0))/h1^2 + \n    // + (u'(0,1)-2*u'(0,0)+u'(0,-1))/h2^2\n    // set h1 = h2 = 1\n    // u''(0,0) = -u(0,0) + 2*u'(0,0) + tau^2 * (u'(1,0)+u'(-1,0)+u'(0,1)+u'(0,-1)-4*u'(0,0))\n    // u''(0,0) = 2*u'(0,0) - u(0,0)  + tau^2 * (u'(1,0) + u'(0,1) + u'(-1,0) + u'(0,-1) - 4*u'(0,0))\n    // 2 - 4*tau*tau >= 0 -> tau<= sqrt(0.5) ~ 0.7\n    float p = 1.0 - att;\n    // using naive laplacian:\n    // float col = 2.0 * u(0,0) - up(0,0) + tau * tau * (u(1,0) + u(0,1) + u(-1,0) + u(0,-1) - 4.0*u(0,0));\n    \n    // using rotationally ionvariant laplacian:\n    float col = 2.0 * u(0,0) - up(0,0) + tau * tau * 1.0/6.0 * \n        (4.0*(u(1,0) + u(0,1) + u(-1,0) + u(0,-1)) +\n         u(1,1) + u(-1,1) + u(1,-1) + u(-1,-1) - 20.0*u(0,0));\n    \n    // 2.0 - 20.0/6.0*tau*tau >= 0 ->  tau<=sqrt(0.6) ~ 0.77\n    \n    return p*col;\n}","name":"Common","description":"","type":"common"}]}