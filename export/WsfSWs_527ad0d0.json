{"ver":"0.1","info":{"id":"WsfSWs","date":"1552567047","viewed":114,"name":"Sphere to cube morphe","username":"kiyamada96","description":"ray","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["ray"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","previewfilepath":"/media/ap/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define OCTAVES 5\n#define CS(a) vec2(cos(a),sin(a))\n\nconst float sphereSize=1.;\nconst vec3 lightDir=vec3(-0.577,0.577,0.577);\n\nconst float PI=3.14;\nconst float angle=90.0;\nconst float fov=angle*0.5*PI/180.0;\n\nvec3 cPos=vec3(0.0,0.0,5.0);\nvec3 cDir=vec3(0.,0.,-1);\nvec3 cUp=vec3(0.,1.0,0.);\n\nvec3 trans(vec3 p)\n{\n\treturn mod(p,4.0)-2.0;\n}\n\nfloat smooth_min(float d1,float d2,float k)\n{\n\tfloat h=exp(-k*d1)+exp(-k*d2);\n    return -log(h)/k;\n}\n\nvec3 rotate(vec3 p, float angle, vec3 axis)\n{\n    vec3 a = normalize(axis);\n    float s = sin(angle);\n    float c = cos(angle);\n    float r = 1.0 - c;\n    mat3 m = mat3(\n        a.x * a.x * r + c,\n        a.y * a.x * r + a.z * s,\n        a.z * a.x * r - a.y * s,\n        a.x * a.y * r - a.z * s,\n        a.y * a.y * r + c,\n        a.z * a.y * r + a.x * s,\n        a.x * a.z * r + a.y * s,\n        a.y * a.z * r - a.x * s,\n        a.z * a.z * r + c\n    );\n    return m * p;\n}\n\nfloat dist_sphere(vec3 p)\n{\n\treturn length(p)-(1.0+sin((p.x+iTime) * 5.0) * 0.1);\n}\n\n\nfloat dist_cube(vec3 p,vec3 s)\n{\n\treturn length(max(abs(p)-s,0.0))-0.1;\n}\n\nfloat dist_cube_hole(vec3 p,vec3 offs)\n{\n    p+=offs;\n    \n    float t = iTime;\n    float a = 0.2* PI * t;\n    float s = pow(sin(a), 2.0);\n    \n\tfloat d2=dist_cube(p,vec3(0.8));\n    float d3=dist_cube(p,vec3(0.4,0.4,0.9));\n    float d4=dist_cube(p,vec3(0.4,0.9,0.4));\n    float d5=dist_cube(p,vec3(0.9,0.4,0.4));\n    float col=max(d2,-d3);\n\treturn mix(max(max(col,-d4),-d5),dist_sphere(p),s);\n}\n\t\nfloat dist_hell_cube(vec3 q,float offs)\n{\n\tfloat box1=dist_cube_hole(q,vec3(-offs,-offs,offs));\n    float box2=dist_cube_hole(q,vec3(offs,-offs,offs));\n    float box3=dist_cube_hole(q,vec3(offs,offs,offs));\n    float box4=dist_cube_hole(q,vec3(-offs,offs,offs));\n    \n    float box5=dist_cube_hole(q,vec3(-offs,-offs,-offs));\n    float box6=dist_cube_hole(q,vec3(offs,-offs,-offs));\n    float box7=dist_cube_hole(q,vec3(offs,offs,-offs));\n    float box8=dist_cube_hole(q,vec3(-offs,offs,-offs));\n    \n    return min(min(min(min(min(min(min(box1,box2),box3),box4),box5),box6),box7),box8);\n}\n\n\nfloat dist_func(vec3 p)\n{\n    float rot = 20.0*3.14 / 180.0;\n\trot *= iTime;\n    \n    float t = iTime;\n    float a = 0.1* PI * t;\n    float s = pow(sin(a), 2.0);\n    \n\tvec3 q = rotate(p,rot,vec3(1,1,1));   \n    return dist_hell_cube(q,0.95);\n}\n\nvec3 getNormal(vec3 p)\n{\n\tfloat d=0.01;\n\treturn normalize(vec3(\n        dist_func(p+vec3(d,0.0,0.0))-dist_func(p+vec3(-d,0.0,0.0)),\n        dist_func(p+vec3(0.0,d,0.0))-dist_func(p+vec3(0.0,-d,0.0)),\n        dist_func(p+vec3(0.0,0.0,d))-dist_func(p+vec3(0,0.0,-d))\n    ));\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p=(fragCoord.xy*2.0-iResolution.xy)/min(iResolution.x,iResolution.y);\n    \n    vec3 cSide=cross(cDir,cUp);\n    float targetDepth=1.0;\n    \n  \tvec3 ray = normalize(cSide * p.x + cUp * p.y + cDir * targetDepth);\n    \n    float dist=0.0;\n    float rlen=0.0;\n   \tvec3 rPos=cPos;\n    \n    for(int i=0;i<64;i++)\n    {\n    \tdist=dist_func(rPos);\n        rlen+=dist;\n        rPos=cPos+ray*rlen;\n        if(abs(dist)<0.01){break;}\n            \n    }\n   \t\n    vec3 color;\n    \n    if(abs(dist)<0.01)\n    {\n   \t\tvec3 nor=getNormal(rPos);\n        vec4 c=texture(iChannel1,nor);\n        float diff=clamp(dot(lightDir,nor),0.1,1.0);\n       \tcolor=c.xyz*diff*nor;\n    }\n    else\n    {\n        //vec4 c=texture(iChannel1,ray);\n        vec3 a=mix(vec3(0.5),vec3(1.),p.y);\n    \tcolor=a;\n    }\n    fragColor=vec4(color,1.0);\n    \n}","name":"Image","description":"","type":"image"}]}