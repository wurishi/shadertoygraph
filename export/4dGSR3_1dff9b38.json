{"ver":"0.1","info":{"id":"4dGSR3","date":"1465538216","viewed":210,"name":"raymarcher lecture","username":"kaswan","description":"raymarching","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarchinglecture"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// RAYMARCHER for lecture\n\n\n// add Random rotations suggested by @FabriceNeyret2 (Thanks!)\n#define rnd(p) fract(3467.91*sin(dot(p,vec3(77.1,-47.9,123.41))))\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n\nfloat sphere(vec3 pos, vec3 center, float r)\n{\n \treturn length(pos - center) - r;   \n}\n\nfloat scene(vec3 pos)\n{\n\t// add Random rotations suggested by @FabriceNeyret2 (Thanks!)\n    vec3 cell = floor(pos/4.);\n\tpos = mod(pos, 4.0) - vec3(2.0); \n\t\n    float a;\n\tvec3 r = .5*vec3(sin(iTime), cos(iTime), 0.);\n\ta = rnd(cell); r.xy *= rot(a);\n\ta = rnd(cell+1.); r.yz *= rot(a*17.1);\n\n\tfloat d = sphere(pos, vec3(0.0), 1.0);\n\tfloat d2 = sphere(pos, r, 1.0);\n    \n\td = max(d, -d2);\n    \n    return d;\n}\n\nvec3 normal(vec3 pos)\n{\n \tvec3 eps = vec3(0.01, 0.0, 0.0);\n    \n    vec3 n;\n    \n    n.x = scene(pos + eps.xyy) - scene(pos - eps.xyy);\n    n.y = scene(pos + eps.yxy) - scene(pos - eps.yxy);\n    n.z = scene(pos + eps.yyx) - scene(pos - eps.yyx);\n    \n    return normalize(n);\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t//vec2 uv = fragCoord.xy / iResolution.xy;\n    //float aspectRatio = iResolution.x / iResolution.y;\n    //uv *= 2.0; uv -= vec2(1.0);\n    //uv.x *= aspectRatio;\n    \n    // @FabriceNeyret2 (Thanks!) \n    vec2 R = iResolution.xy,\n\tuv = (2.*fragCoord.xy - R ) / R.y;\n    \n    vec3 light = vec3(-1.0 + sin(iTime), 1.0 + cos(iTime), 2.0);\n    vec3 pos = vec3(1.0 + cos(iTime), 0.0 + sin(iTime), 4.0);\n    vec3 ray = normalize(vec3(uv, -1.0));\n    \n    vec3 color;\n    for (int i = 0; i < 50; i++){\n   \t\tfloat d = scene(pos);\n        if (d < 0.002) {\n        \tcolor = vec3(1.0, 0.0, 0.0);\n            \n            vec3 N = normal(pos);\n            vec3 L = normalize(light - pos);\n            vec3 R = reflect(-L,N);\n\t\t\tvec3 V = normalize(-ray);\n            \n            float diffuse = max(dot(N,L),0.0);\n            float specular = pow(max(dot(R,V),0.0), 32.0);\n            color *= diffuse;\n            color += specular;\n            \n            \n            fragColor = vec4(color, 1.0);\n            return;\n        }\n        \n        pos += ray * d;\n        \n    }\n    \n\tfragColor = vec4(vec3(0.1, 0.2, 1.0),1.0);\n}","name":"Image","description":"","type":"image"}]}