{"ver":"0.1","info":{"id":"dsf3zX","date":"1666538870","viewed":169,"name":"simetrius","username":"lomateron","description":"go full screen\nclick hold adjust release","likes":7,"published":3,"flags":32,"usePreview":0,"tags":["automata"],"hasliked":0,"parentid":"DdfGzf","parentname":"2D worlds explorer"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int m = tz+1;\n    int i = iFrame%m;\n    vec4 a = texelFetch(iChannel0,ivec2(fragCoord),0);\n    uint n = (1U<<m)-1U;\n    uint b = floatBitsToUint(a.x)&n;\n    uint c = ((b>>i)|(b<<(m-i))) &n;\n    fragColor = cos(float(c)/float(n)*4.4+vec4(2,3,4,5)+.8);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define rz 120.  //size of each world in pixels\n#define sz  3.   //size of kernel across space\n#define tz  3    //size of kernel across time          must be <= 32","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"uint read(vec2 u, vec2 m)\n{\n    vec2 o = mod(u+m,rz);\n         u = floor(u/rz)*rz+o;\n    return floatBitsToUint(texelFetch(iChannel0,ivec2(u),0).x);\n}\nvoid mainImage( out vec4 fragColor, in vec2 u )\n{\n    float ck = -floor((sz-1.)*.5);    //center the kernel\n    float ev = float(mod(sz,2.)==0.); //move and resize kernel when sz = even\n    uint o = 0U;                      //sum of all bits\n                          float n = (float(iFrame&1)-1.)*ev;\n    for(int   t=0 ; t<tz; ++t){ float m = n*(1.-float(t&1)); float s2 = sz-float(t&1)*ev; \n    for(float i=0.; i<s2; ++i){\n    for(float j=0.; j<s2; ++j){ uint r = read(u,vec2(i,j)+ck+m);\n                                o += (r>>t)&1U;\n    }}}\n    vec2 r2 = floor(iResolution.xy/rz);\n    uint u2 = uint(dot(floor(        u/rz),vec2(1,r2.x)));\n    uint m2 = uint(dot(floor(iMouse.xy/rz),vec2(1,r2.x)));\n    \n    uint a = +u2*2U                      //divides screen in 16*8 worlds\n             +16U*8U*(16U*7U+14U);\n    //if(o>=32U){a = 1430607221U;}  \n    o = (read(u,vec2(0,0))<<1U) | ((a>>(o&31U))&1U);\n    if(iFrame==0||iMouse.z>.5)\n    {\n        vec2  v = fract(u/rz)-.5;\n        float r = step(dot(v,v)-.0005,iMouse.x/iResolution.x*.1);\n        o = uint(r);\n    }\n    fragColor = vec4(uintBitsToFloat(o));\n}","name":"Buffer A","description":"","type":"buffer"}]}