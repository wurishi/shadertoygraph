{"ver":"0.1","info":{"id":"clVyWy","date":"1700606597","viewed":26,"name":"fun with tilings","username":"Tygrak","description":"I am learning how to make some cool tilings","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["2d","tiling"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 makeRotationMat(in float theta){\n\tfloat c = cos(theta);\n\tfloat s = sin(theta);\n\treturn mat2(vec2(c, -s), vec2(s, c));\n}\n\nvec2 rotate2D (vec2 uv, float angle) {\n    uv -= 0.5;\n    uv = makeRotationMat(angle) * uv;\n    uv += 0.5;\n    return uv;\n}\n\n//https://www.redblobgames.com/grids/hexagons/more-pixel-to-hex.html\nvec2 pixelToFlatHex(vec2 point) {\n    float q = sqrt(3.0) / 3.0 * point.x + -1.0/3.0 * point.y;\n    float r = (1.0 - 1.0/3.0) * point.y;\n    return vec2(q, r);\n}\n\nconst float M_PI = 3.14159265358979323846264338327950288;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 scaled = uv*12.0;\n    vec2 st = fract(scaled);\n\n    vec3 col = vec3(0.0);\n    if (uv.x < 0.2) {\n        if ((st.x > 0.5 && st.y > 0.5) || (st.x < 0.5 && st.y < 0.5)) {\n            col = vec3(1.0);\n        }\n    } else if (uv.x < 0.4) {\n        if (abs(st.x-0.5)+abs(st.y-0.5) > 0.5) {\n            col = vec3(0.5);\n        }\n    } else if (uv.x < 0.6) {\n        if (abs(st.x-0.5)+abs(st.y-0.5) > 0.8) {\n            col = vec3(1.0);\n        } else if (abs(st.x-0.5)+abs(st.y-0.5) > 0.6) {\n            col = vec3(0.0);\n        } else if (abs(st.x-0.5)+abs(st.y-0.5) > 0.4) {\n            col = vec3(1.0);\n        }\n    } else if (uv.x < 0.8) {\n        st = rotate2D(st*vec2(1.0, 0.935), M_PI*0.25);\n        if (mod(st.x, 0.5) > 0.45 || mod(st.y, 0.5) > 0.45) {\n            col = vec3(0.5);\n        }\n    } else {\n        float s1 = 20.0;\n        float s2 = 16.0;\n        vec2 ab = fract(vec2(uv.x*s1, uv.y*s2));\n        vec2 cd = fract(vec2((uv.x+0.5/s1)*s1, (uv.y+0.25/s2)*s2));\n\t\tif (abs(cd.x-cd.y) > 0.5) {\n            col = vec3(1.0);\n        } else if (abs(ab.x-ab.y) > 0.5) {\n            col = vec3(1.0);\n        }\n    }\n\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}