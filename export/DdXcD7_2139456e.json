{"ver":"0.1","info":{"id":"DdXcD7","date":"1686851969","viewed":124,"name":"Pixel screen","username":"mfnch","description":"Analytical antialiasing for a screen of rectangular pixels (squares separated by a gap). Inspired by https://iquilezles.org/articles/checkerfiltering/","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2023 Matteo Franchin\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nconst vec2 pixelGap = vec2(0.01, 0.01);\nconst vec2 pixelSize = vec2(0.3, 0.3);\nconst vec2 numPixels = vec2(56, 32);\nconst vec2 maxCorner = 0.5 * numPixels * (pixelSize + pixelGap);\nconst vec2 minCorner = -maxCorner;\n\nconst vec2 pixelPeriod = pixelSize + pixelGap;\n\nvec2 squareWaveIntegral(vec2 p) {\n  vec2 q = (clamp(p, minCorner, maxCorner) - minCorner) / pixelPeriod;\n  vec2 qFrac = fract(q);\n  return q * pixelSize + min(qFrac * pixelGap, (1.0 - qFrac) * pixelSize);\n}\n\nvec3 getPixelColor(vec2 p) {\n  vec2 q = (clamp(p, minCorner, maxCorner) - minCorner) / pixelPeriod;\n  vec4 col = texture(iChannel0, floor(q) / numPixels);\n  return col.rgb;\n}\n\nvec3 ledScreen(vec2 pixelCenter, vec2 fragSize) {\n  vec2 delta =\n    (squareWaveIntegral(pixelCenter + 0.5 * fragSize) -\n     squareWaveIntegral(pixelCenter - 0.5 * fragSize));\n  float mask = (delta.x / fragSize.x) * (delta.y / fragSize.y);\n  return mask * getPixelColor(pixelCenter);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  float zoom = 2.0 + cos(iTime);\n  float fragSize = 16.0 * zoom / iResolution.x;\n  vec2 r = (fragCoord - 0.5 * iResolution.xy) * fragSize;\n\n  vec3 col = ledScreen(r, vec2(fragSize, fragSize));\n  fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}