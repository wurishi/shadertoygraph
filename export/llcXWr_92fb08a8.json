{"ver":"0.1","info":{"id":"llcXWr","date":"1478974950","viewed":1264,"name":"TheGrid","username":"dila","description":"Kali's circuit inspired flythrough.","likes":71,"published":1,"flags":0,"usePreview":1,"tags":["raymarch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3Rr","filepath":"/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","previewfilepath":"/media/ap/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 col1 = vec3(0.118, 0.365, 0.467);\nvec3 col2 = vec3(0.514, 0.851, 0.933);\nvec3 col3 = vec3(0.957, 0.875, 0.29);\nvec3 col4 = vec3(0.973, 0.663, 0.106);\nvec3 col5 = vec3(0.843, 0.431, 0.176);\nvec3 col6 = vec3(0.361, 0.251, 0.145);\n\nmat2 rot(float x)\n{\n    return mat2(cos(x), sin(x), -sin(x), cos(x));\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nvec3 tex(vec3 p, float pz)\n{\n    vec2 q = p.xy;\n    float fp = 10.0;\n    q = (fract(q / fp) - 0.5) * fp;\n    float d = 1000.0;\n    float mid = 0.0;\n    vec2 mpos = vec2(0.0);\n    const int n = 3;\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j < 2; ++j) {\n        \tq = abs(q) - 0.5;\n        \tq *= rot(3.141592 * 0.25);\n        }\n        q = abs(q) - 0.25;\n        q *= rot(pz * 0.5);\n        q.x += sin(pz);\n        float k = sdBox(vec3(q, 0.0), vec3(1.0, 0.5, 1.0));\n        if (k < d) {\n\t\t\td = k;\n            mpos = q;\n            mid = float(i);\n        }\n    }\n    d = max(d, -sdBox(p, vec3(1.0, 2.0, 1.0)));\n    float f = 1.0 / (1.0 + d * d * 1000.0);\n    float dl = pz * 0.7 + mid * 0.6 + mpos.x * 0.5;\n    dl = sin(dl + iTime) * 0.5 + 0.5;\n\tvec3 col = mix(vec3(0.0), col2, dl);\n    vec3 tex = texture(iChannel0, mpos.xy).xyz;\n    tex *= tex;\n    float tf = sin(mid + iTime) * 0.5 + 0.5;\n    tex = mix(vec3(0.0), tex, tf);\n    float lt = max(sign(-d), 0.0);\n    return mix(tex * lt * col1, col * 4.0, f);\n}\n\nvec3 _texture(vec3 p, float pz)\n{\n    vec3 ta = tex(p.xyz, pz).xyz;\n    vec3 tb = tex(p.xzy, pz).xyz;\n    vec3 tc = tex(p.yzx, pz).xyz;\n    return (ta + tb + tc) / 3.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 o = vec3(0.0, 0.0, iTime * 4.0);\n    vec3 r = normalize(vec3(uv, 1.3 - dot(uv, uv) * 0.33));\n    \n\tfloat t = fract(iTime * 0.1) * 4.0;\n    vec4 ct = vec4(t, t - 1.0, t - 2.0, t - 3.0);\n    ct = clamp(ct, 0.0, 1.0);\n    ct = pow(ct, vec4(8.0));\n\tct = 1.0 - pow(1.0 - ct, vec4(64.0));\n    ct *= 3.14159 * 0.5;\n    r.xy *= rot(ct.x + ct.y + ct.z + ct.w);\n    \n    vec3 fc = vec3(0.0);\n    \n    const int n = 8;\n    for (int i = 0; i < n; ++i) {\n        float fi = float(i) / float(n);\n        float sr = 1.5;\n        vec3 sp = o;\n        sp.z = floor(sp.z / sr + 1.0 + float(i)) * sr;\n        float t = 0.0;\n        for (int i = 0; i < 15; ++i) {\n            vec3 p = o + r * t - sp;\n            float ws = sin(p.z * 0.125) * 0.5 + 0.5;\n            float c = mix(2.0, 6.0, ws) - abs(p.x);\n            t += min(-p.z, c);\n        }\n        vec3 w = o + r * t - sp;\n        float back = sr * float(n);\n        float f = clamp(t, 0.0, back) / back;\n\t\tf = pow(f, 2.0);\n        vec3 tex = _texture(w, sp.z);\n        fc += tex / float(n);\n    }\n    \n\tfragColor = vec4(sqrt(fc), 1.0);\n}","name":"Image","description":"","type":"image"}]}