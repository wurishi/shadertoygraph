{"ver":"0.1","info":{"id":"4lyfDd","date":"1544466405","viewed":837,"name":"golden hashing","username":"FabriceNeyret2","description":"testing [url]http://extremelearning.com.au/unreasonable-effectiveness-of-quasirandom-sequences [/url]\nNot convinced, or I didn't understood. \nEncourage me thinking that low-discrepancy criteria not really what matters for 2D images (ie,is not blue noise).","likes":8,"published":3,"flags":0,"usePreview":0,"tags":["hash","dithering","bluenoise","goldenratio","lowdiscrepancy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// testing http://extremelearning.com.au/unreasonable-effectiveness-of-quasirandom-sequences/\n// see follow-up here: https://www.shadertoy.com/view/4tKBWd\n\n#define Z 1.\n\n#define PHI  1.618034     // root of x^2 = x+1, golden ratio \n#define PHI2 1.324717957  // root of x^3 = x+1, generalization of golden ratio\n                          // etc for N-1 dim vector\n\n// supposed to be specially low discrepancy\n#define hash1(x)  fract( .5 + (x) / PHI ) \n#define hash2(X)  fract( dot( X, 1./ vec2( PHI2, PHI2*PHI2 ) ) )\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    vec2 R = iResolution.xy, \n         u = (U+U-R) / R.y;\n    \n    U = floor(U/Z);\n    \n    if ( u.y < 0.)\n        if ( u.x < 0.) O = vec4( hash1(U.x) );\n        else O = vec4( U.x == floor( hash1(U.y)*R.x ) );\n    else\n        if ( u.x < 0.) O = vec4( hash2(U) );\n        else O = vec4( U.x == floor( hash2(U)*R.x ) );\n        \n    u = abs(u); if (min(u.x,u.y)<2./R.y) O.r ++;\n}","name":"Image","description":"","type":"image"}]}