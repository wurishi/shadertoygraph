{"ver":"0.1","info":{"id":"XlSXWm","date":"1444004143","viewed":308,"name":"Reflective Sampling","username":"ddrcoder","description":"A simple sampler which simulates reflective tile patterns.","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["2d","reflective","shiney"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"float tan3(float x) {\n    float r = tan(x);\n    return r * r * r;\n}\n\nvec2 ridged(vec2 p, vec2 v) {\n\treturn v * tan(dot(p - vec2(1., -.5), v.xy) * 10.) * 0.01;\n}\n\n//#define TAU \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 p = fragCoord / iResolution.y * vec2(1.0, -1.0);\n    const float pi = 3.14159265358979;\n    const int k = 3; // try changing this   \n    vec2 s = p;\n    float t = iTime / float(k);\n    for (int i = 0; i < k; i++) {\n\t    s += ridged(p, vec2(cos(t), sin(t)));\n        t += pi / float(k);\n    }\n    fragColor = texture(iChannel0, s);\n}","name":"Image","description":"","type":"image"}]}