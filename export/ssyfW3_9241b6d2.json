{"ver":"0.1","info":{"id":"ssyfW3","date":"1658899667","viewed":68,"name":"SW3005","username":"vinkle","description":"SWS3005 group 06\nBetter performance in GTX1660Ti or better GPU","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["phonglighting"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGzn","filepath":"/media/a/29de534ed5e4a6a224d2dfffab240f2e19a9d95f5e39de8898e850efdb2a99de.mp3","previewfilepath":"/media/ap/29de534ed5e4a6a224d2dfffab240f2e19a9d95f5e39de8898e850efdb2a99de.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//============================================================================\n// PROJECT ID: SWS3005_06\n//\n// GROUP NUMBER: 6\n//\n// STUDENT NAME: Hu Zetao\n// NUS User ID.: t0925788\n//\n// STUDENT NAME: Feng Yuan\n// NUS User ID.: t0925805\n//\n// COMMENTS TO GRADER:\n//\n//============================================================================\n\n\n// FRAGMENT SHADER FOR SHADERTOY\n// Run this at https://www.shadertoy.com/new\n// See documentation at https://www.shadertoy.com/howto\n\n// Your browser must support WebGL 2.0.\n// Check your browser at https://webglreport.com/?v=2\n\n\n//============================================================================\n// Constants.\n//============================================================================\n\nconst float PI = 3.1415926536;\n\nconst vec3 BACKGROUND_COLOR = vec3(0.1, 0.2, 0.6);\n\n// Vertical field-of-view angle of camera. In radians.\nconst float FOVY = 90.0 * PI / 180.0;\n\n// Use this for avoiding the \"epsilon problem\" or the shadow acne problem.\nconst float DEFAULT_TMIN = 10.0e-4;\n\n// Use this for tmax for non-shadow ray intersection test.\nconst float DEFAULT_TMAX = 10.0e6;\n\n// Equivalent to number of recursion levels (0 means ray-casting only).\n// We are using iterations to replace recursions.\nconst int NUM_ITERATIONS = 2;\n\n// Constants for the scene objects.\nconst int NUM_LIGHTS = 4;\nconst int NUM_MATERIALS = 5;\nconst int NUM_PLANES = 5;\nconst int NUM_SPHERES = 9;\nconst int NUM_BOX = 60;\n\n// Animation constants.\nconst float p1 = 9.;\nconst float p2 = 10.;\nconst float p3 = 10.25;\nconst float p4 = 10.75;\nconst float p5 = 11.5;\n\n// Constants for the board objects.\nint num_0[15] = int[15](0,0,0,0,448,544,544,544,544,544,448,0,0,0,0);\nint num_1[15] = int[15](0,0,0,0,448,128,128,128,128,384,128,0,0,0,0);\nint num_2[15] = int[15](0,0,0,0,992,512,256,192,32,544,448,0,0,0,0);\nint num_3[15] = int[15](0,0,0,0,448,544,32,448,32,544,448,0,0,0,0);\nint num_4[15] = int[15](0,0,0,0,64,64,992,576,576,320,320,0,0,0,0);\nint num_5[15] = int[15](0,0,0,0,448,544,32,448,512,512,992,0,0,0,0);\nint num_6[15] = int[15](0,0,0,0,448,544,544,960,512,512,448,0,0,0,0);\nint num_7[15] = int[15](0,0,0,0,256,128,128,64,64,32,992,0,0,0,0);\nint num_8[15] = int[15](0,0,0,0,448,544,544,448,544,544,448,0,0,0,0);\nint num_9[15] = int[15](0,0,0,0,448,544,32,480,544,544,448,0,0,0,0);\nint alpha_h[15] = int[15](0,0,0,0,544,544,544,992,544,544,544,0,0,0,0);\nint alpha_e[15] = int[15](0,0,0,0,992,512,512,992,512,512,992,0,0,0,0);\nint alpha_l[15] = int[15](0,0,0,0,992,512,512,512,512,512,512,0,0,0,0);\nint alpha_w[15] = int[15](0,0,0,0,320,672,672,672,544,544,544,0,0,0,0);\nint alpha_o[15] = int[15](0,0,0,0,448,544,544,544,544,544,448,0,0,0,0);\nint alpha_r[15] = int[15](0,0,0,0,544,576,640,960,544,544,448,0,0,0,0);\nint alpha_d[15] = int[15](0,0,0,0,896,576,544,544,544,576,896,0,0,0,0);\n\n\n//============================================================================\n// Define new struct types.\n//============================================================================\nstruct Ray_t {\n    vec3 o;  // Ray Origin.\n    vec3 d;  // Ray Direction. A unit vector.\n};\n\nstruct Plane_t {\n    // The plane equation is Ax + By + Cz + D = 0.\n    float A, B, C, D;\n    int materialID;\n};\n\nstruct Sphere_t {\n    vec3 center;\n    float radius;\n    int materialID;\n};\n\nstruct Box_t {\n    vec3 center;\n    vec3 size;\n    int materialID;\n};\n\nstruct Light_t {\n    vec3 position;  // Point light 3D position.\n    vec3 I_a;       // For Ambient.\n    vec3 I_source;  // For Diffuse and Specular.\n};\n\nstruct Material_t {\n    vec3 k_a;   // Ambient coefficient.\n    vec3 k_d;   // Diffuse coefficient.\n    vec3 k_r;   // Reflected specular coefficient.\n    vec3 k_rg;  // Global reflection coefficient.\n    float n;    // The specular reflection exponent. Ranges from 0.0 to 128.0.\n};\n\n//----------------------------------------------------------------------------\n// The lighting model used here is similar to that shown in\n// Lecture Topic B08 (Basic Ray Tracing). Here it is computed as\n//\n//     I_local = SUM_OVER_ALL_LIGHTS {\n//                   I_a * k_a +\n//                   k_shadow * I_source * [ k_d * (N.L) + k_r * (R.V)^n ]\n//               }\n// and\n//     I = I_local  +  k_rg * I_reflected\n//----------------------------------------------------------------------------\n\n\n//============================================================================\n// Global scene data.\n//============================================================================\nPlane_t Plane[NUM_PLANES];\nSphere_t Sphere[NUM_SPHERES];\nBox_t Box[NUM_BOX];\nLight_t Light[NUM_LIGHTS];\nMaterial_t Material[NUM_MATERIALS];\n\nfloat random(float x)\n{\n    return fract(sin(x) * 12561.1516);\n}\nfloat noise(float x)\n{\n    float i = floor(x);\n    float f = fract(x);\n    float u = f * f * (3.0 - 2.0 * f);\n    return mix(random(i), random(i + 1.0), u);\n\n}\n\n/////////////////////////////////////////////////////////////////////////////\n// Initializes the scene.\n/////////////////////////////////////////////////////////////////////////////\nvoid InitScene()\n{\n    // Horizontal plane.\n    Plane[0].A = 0.0;\n    Plane[0].B = 1.0;\n    Plane[0].C = 0.0;\n    Plane[0].D = 0.0;\n    Plane[0].materialID = 0;\n\n    // four walls\n    Plane[1].A = 0.0;\n    Plane[1].B = 0.0;\n    Plane[1].C = 1.0;\n    Plane[1].D = 7.5;\n    Plane[1].materialID = 0;\n\n    Plane[2].A = 1.0;\n    Plane[2].B = 0.0;\n    Plane[2].C = 0.0;\n    Plane[2].D = 7.5;\n    Plane[2].materialID = 0;\n\n    Plane[3].A = -1.0;\n    Plane[3].B = 0.0;\n    Plane[3].C = 0.0;\n    Plane[3].D = 7.5;\n    Plane[3].materialID = 0;\n\n    Plane[4].A = 0.0;\n    Plane[4].B = 0.0;\n    Plane[4].C = -1.0;\n    Plane[4].D = 7.5;\n    Plane[4].materialID = 0;\n    float curTime = iTime;\n    if (curTime > p5)\n        curTime = mod(curTime - p5, p5 - p1) + p1;\n\n    float r = 0.4;\n    float x[9] = float[9](-5., 0., 5., 5., 5., 0., -5., -5., 0.);\n    float y = 2. * abs(sin(2. * PI * curTime)) + r;\n    float z[9] = float[9](-5., -5., -5., 0., 5., 5., 5., 0., 0.);\n\n    float dx[9] = float[9](1., 0., -1., -1., -1., 0., 1., 1., 0.);\n    float dy = 0.5;\n    float dz[9] = float[9](1., 1., 1., 0., -1., -1., -1., 0., 0.);\n    // Center bouncing sphere.\n    for (int i = 0; i < 9; i++) {\n        Sphere[i].center = vec3(x[i], y, z[i]);\n        Sphere[i].radius = r;\n        Sphere[i].materialID = 1;\n    }\n    for (int i = 0; i < int(curTime); i++)\n    {\n        Sphere[i].materialID = 2;\n    }\n\n    // animation\n    if (curTime < p1)\n        for (int i = 0; i < 9; i++)\n            Sphere[i].center = vec3(x[i], y, z[i]);\n    else if (curTime < p2)\n        for (int i = 0; i < 9; i++)\n            Sphere[i].center += 4. * (curTime - 9.) * vec3(dx[i], 0., dz[i]);\n    else if (curTime < p3)\n        for (int i = 0; i < 9; i++)\n            Sphere[i].center = vec3(x[i] / 5., 4. * abs(sin(4. / 3. * PI * (curTime - p2))) + r, z[i] / 5.);\n    else if (curTime < p4)\n        for (int i = 0; i < 9; i++)\n            Sphere[i].center = vec3(x[i] / 5. - 8. * dx[i] * (curTime - p3), 4. * abs(sin(4. / 3. * PI * (curTime - p2))) + r, z[i] / 5. - 8. * dz[i] * (curTime - p3));\n    else if (curTime < p5)\n        for (int i = 0; i < 9; i++)\n            Sphere[i].center = vec3(x[i], 4. * abs(sin(4. / 3. * PI * (curTime - p2))) + r, z[i]);\n\n    // box\n    int group = NUM_BOX / 4;\n    for (int i = 0; i < group; i++)\n    {\n        Box[i].center = vec3(7., 0, 7.4) - vec3(1., 0., 0.) * float(i);\n        Box[i].size = vec3(0.4, 3, 0.1);\n    }\n    for (int i = group; i < group * 2; i++)\n    {\n        Box[i].center = vec3(-7.4, 0, 7.) - vec3(0., 0., 1.) * float(i - group);\n        Box[i].size = vec3(0.1, 3, 0.4);\n\n    }\n    for (int i = group * 2; i < group * 3; i++)\n    {\n        Box[i].center = vec3(-7., 0, -7.4) + vec3(1., 0., 0.) * float(i - group * 2);\n        Box[i].size = vec3(0.4, 3, 0.1);\n    }\n    for (int i = group * 3; i < group * 4; i++)\n    {\n        Box[i].center = vec3(7.4, 0, -7.) + vec3(0., 0., 1.) * float(i - group * 3);\n        Box[i].size = vec3(0.1, 3, 0.4);\n    }\n    float diff = 2. * PI / float(NUM_BOX);\n    for (int i = 0; i < NUM_BOX; i++)\n    {\n        Box[i].materialID = 4;\n        Box[i].size += vec3(0, 2. * noise(sin(Box[i].center.x + iTime + diff * float(i)) * cos(iTime + Box[i].center.z)) - 1., 0);\n    }\n    // Silver material.\n    Material[0].k_d = vec3(0.5, 0.5, 0.5);\n    Material[0].k_a = 0.2 * Material[0].k_d;\n    Material[0].k_r = 2.0 * Material[0].k_d;\n    Material[0].k_rg = 0.5 * Material[0].k_r;\n    Material[0].n = 64.0;\n\n    // bool material 1.\n    Material[1].k_d = vec3(0.5, 0.5, 0.5);\n    Material[1].k_a = 0.2 * Material[1].k_d;\n    Material[1].k_r = 2.0 * Material[1].k_d;\n    Material[1].k_rg = 0.5 * Material[1].k_r;\n    Material[1].n = 64.0;\n\n    // bool material 2.\n    Material[2].k_d = 0.5 + 0.5 * cos(vec3(iTime + vec3(0, 2, 4)));\n    Material[2].k_a = 0.2 * Material[2].k_d;\n    Material[2].k_r = 2.0 * Material[2].k_d;\n    Material[2].k_rg = 0.5 * Material[2].k_r;\n    Material[2].n = 128.0;\n\n    // board material.\n    Material[3].k_d = vec3(1.0, 0.1, 0.5);\n    Material[3].k_a = 0.2 * Material[3].k_d;\n    Material[3].k_r = vec3(1.0, 1.0, 1.0);\n    Material[3].k_rg = 0. * Material[3].k_r;\n    Material[3].n = 128.0;\n\n    // music bar material.\n    Material[4].k_d = 0.5 + 0.5 * cos(vec3(iTime + vec3(0, 2, 4)));\n    Material[4].k_a = 0.9 * Material[4].k_d;\n    Material[4].k_r = vec3(1.);\n    Material[4].k_rg = 0. * Material[4].k_r;\n    Material[4].n = 128.0;\n    // Light 0.\n    Light[0].position = vec3(5.0, 20.0, -5.0);\n    Light[0].I_a = vec3(0.1, 0.1, 0.1);\n\n    // Light 1.\n    Light[1].position = vec3(-5.0, 20.0, 5.0);\n    Light[1].I_a = vec3(0.1, 0.1, 0.1);\n\n    // // Light 2.\n    Light[2].position = vec3(5.0, 20.0, 5.0);\n    Light[2].I_a = vec3(0.1, 0.1, 0.1);\n\n    // // Light 3.\n    Light[3].position = vec3(-5.0, 20.0, -5.0);\n    Light[3].I_a = vec3(0.1, 0.1, 0.1);\n\n    // change the light color by time\n    // if(iTime<4.0){\n    //     Light[0].I_source = vec3( 0.2, 0.2*abs(sin(iTime)), 0.2 );\n    //     Light[1].I_source = vec3( 0.0, 0.2*abs(sin(iTime)), 0.2 );\n    // }\n    // if(iTime>=4.0){\n    for (int i = 0; i < NUM_LIGHTS; i++)\n    {\n        if (iTime < p1)\n            Light[i].I_source = vec3(0.25);\n        else\n            Light[i].I_source = 0.35 * ( 0.5 + vec3(0.5*abs(sin(0.4*iTime)), 0.5*abs(cos(0.1*iTime)), 0.5*abs(sin(1.4*iTime))));\n    }\n    // Light[2].I_source = Light[3].I_source = 0.5 * vec3( 0.8*abs(sin(0.2*iTime)), 0.8*abs(cos(0.2*iTime)), 0.8*abs(sin(1.2*iTime)) );\n    // Light[1].I_source = Light[0].I_source = 0.6 * vec3( 0.5*abs(sin(0.4*iTime)), 0.5*abs(cos(0.1*iTime)), 0.5*abs(sin(1.4*iTime)) );\n    // }\n}\n\nbool IntersectBox(in Box_t box, in Ray_t ray, in float tmin, in float tmax,\n    out float t, out vec3 hitPos, out vec3 hitNormal)\n{\n    mat4 trans = mat4(vec4(1., 0., 0., 0.),\n        vec4(0., 1., 0., 0.),\n        vec4(0., 0., 1., 0.),\n        vec4(box.center, 1.));\n\n    vec3 ro = (trans * vec4(ray.o, 1.0)).xyz;\n    vec3 rd = ray.d;\n    vec3 m = 1.0 / rd;\n    vec3 n = m * ro;\n    vec3 k = abs(m) * box.size;\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n\n    float tN = max(max(t1.x, t1.y), t1.z);\n    float tF = min(min(t2.x, t2.y), t2.z);\n    if (tN > tF || tF < 0.0) return false; // no intersection\n    if (tN < tmin || tN > tmax) return false; // outside box\n    t = tN;\n    hitPos = (inverse(trans) * vec4((ro + t * rd), 1.0)).xyz;\n    hitNormal = (transpose(inverse(trans)) * vec4((-sign(ray.d) * step(t1.zxy, t1.xyz) * step(t1.yzx, t1.xyz)), 1.0)).xyz;\n    return true;\n}\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a plane and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n// If there is such an intersection, outputs the value of t, the position\n// of the intersection (hitPos) and the normal vector at the intersection\n// (hitNormal).\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectPlane(in Plane_t pln, in Ray_t ray, in float tmin, in float tmax,\n    out float t, out vec3 hitPos, out vec3 hitNormal)\n{\n    vec3 N = vec3(pln.A, pln.B, pln.C);\n    float NRd = dot(N, ray.d);\n    float NRo = dot(N, ray.o);\n    float t0 = (-pln.D - NRo) / NRd;\n    if (t0 < tmin || t0 > tmax) return false;\n\n    // We have a hit -- output results.\n    t = t0;\n    hitPos = ray.o + t0 * ray.d;\n    hitNormal = normalize(N);\n    return true;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a plane and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectPlane(in Plane_t pln, in Ray_t ray, in float tmin, in float tmax)\n{\n    vec3 N = vec3(pln.A, pln.B, pln.C);\n    float NRd = dot(N, ray.d);\n    float NRo = dot(N, ray.o);\n    float t0 = (-pln.D - NRo) / NRd;\n    if (t0 < tmin || t0 > tmax) return false;\n    return true;\n}\n\n\nint RenderBoard(in ivec2 p, in int[15] board)\n{\n    int cur = board[p.y];\n    if ((cur >> (14 - p.x)) % 2 == 1)\n        return 3;\n    else\n        return 0;\n}\n\nint select_map(in vec2 P)\n{\n    ivec2 pos = ivec2(P + vec2(7.5, 0));\n\n    int ct = int(iTime);\n    if (ct == 0)\n        return RenderBoard(pos, num_9);\n    else if (ct == 1)\n        return RenderBoard(pos, num_8);\n    else if (ct == 2)\n        return RenderBoard(pos, num_7);\n    else if (ct == 3)\n        return RenderBoard(pos, num_6);\n    else if (ct == 4)\n        return RenderBoard(pos, num_5);\n    else if (ct == 5)\n        return RenderBoard(pos, num_4);\n    else if (ct == 6)\n        return RenderBoard(pos, num_3);\n    else if (ct == 7)\n        return RenderBoard(pos, num_2);\n    else if (ct == 8)\n        return RenderBoard(pos, num_1);\n    else if (ct == 9)\n        return RenderBoard(pos, num_0);\n    else\n    {\n        if (mod(iTime, 1.) < 0.1)\n            return 0;\n        ct -= 10;\n        ct = ct % 10;\n        if (ct == 0)\n            return RenderBoard(pos, alpha_h);\n        else if (ct == 1)\n            return RenderBoard(pos, alpha_e);\n        else if (ct == 2)\n            return RenderBoard(pos, alpha_l);\n        else if (ct == 3)\n            return RenderBoard(pos, alpha_l);\n        else if (ct == 4)\n            return RenderBoard(pos, alpha_o);\n        else if (ct == 5)\n            return RenderBoard(pos, alpha_w);\n        else if (ct == 6)\n            return RenderBoard(pos, alpha_o);\n        else if (ct == 7)\n            return RenderBoard(pos, alpha_r);\n        else if (ct == 8)\n            return RenderBoard(pos, alpha_l);\n        else if (ct == 9)\n            return RenderBoard(pos, alpha_d);\n    }\n}\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a sphere and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n// If there is one or two such intersections, outputs the value of the\n// smaller t, the position of the intersection (hitPos) and the normal\n// vector at the intersection (hitNormal).\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectSphere(in Sphere_t sph, in Ray_t ray, in float tmin, in float tmax,\n    out float t, out vec3 hitPos, out vec3 hitNormal)\n{\n    /////////////////////////////////\n    // TASK: WRITE YOUR CODE HERE. //\n    /////////////////////////////////\n    vec3 oc = ray.o - sph.center;\n    float a = dot(ray.d, ray.d);\n    float b = 2.0 * dot(oc, ray.d);\n    float c = dot(oc, oc) - sph.radius * sph.radius;\n    float discriminant = b * b - 4.0 * a * c;\n    if (discriminant < 0.0) return false;\n    t = (-b - sqrt(discriminant)) / (2.0 * a);\n    if (t < tmin || t > tmax) return false;\n    hitPos = ray.o + t * ray.d;\n    hitNormal = normalize(hitPos - sph.center);\n    return true;\n}\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a sphere and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectSphere(in Sphere_t sph, in Ray_t ray, in float tmin, in float tmax)\n{\n    /////////////////////////////////\n    // TASK: WRITE YOUR CODE HERE. //\n    /////////////////////////////////\n    vec3 oc = ray.o - sph.center;\n    float a = dot(ray.d, ray.d);\n    float b = 2.0 * dot(oc, ray.d);\n    float c = dot(oc, oc) - sph.radius * sph.radius;\n    float discriminant = b * b - 4.0 * a * c;\n    if (discriminant < 0.0) return false;\n    float t = (-b - sqrt(discriminant)) / (2.0 * a);\n    if (t < tmin || t > tmax) return false;\n    return true;\n}\n\n/////////////////////////////////////////////////////////////////////////////\n// Computer shadow ray contribution.\n/////////////////////////////////////////////////////////////////////////////\nfloat SphereSoftShadow(in Sphere_t sph, in Ray_t ray, in float tmin, in float tmax)\n{\n    float s = 1.0;\n    vec3 oc = ray.o - sph.center;\n    float a = dot(ray.d, ray.d);\n    float b = 2.0 * dot(oc, ray.d);\n    float c = dot(oc, oc) - sph.radius * sph.radius;\n    float discriminant = b * b - 4.0 * a * c;\n    float h = discriminant / 4.0;\n    float t = (-b - sqrt(max(discriminant, 0.0))) / (2.0 * a);\n    float d = sqrt(max(0.0, sph.radius * sph.radius - h)) - sph.radius;\n    if (t > 0.0)\n        s = max(d, 0.0) / t;\n    return s;\n}\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes (I_a * k_a) + k_shadow * I_source * [ k_d * (N.L) + k_r * (R.V)^n ].\n// Input vectors L, N and V are pointing AWAY from surface point.\n// Assume all vectors L, N and V are unit vectors.\n/////////////////////////////////////////////////////////////////////////////\nvec3 PhongLighting(in vec3 L, in vec3 N, in vec3 V, in float inShadow,\n    in Material_t mat, in Light_t light)\n{\n    vec3 R = reflect(-L, N);\n    float N_dot_L = max(0.0, dot(N, L));\n    float R_dot_V = max(0.0, dot(R, V));\n    float R_dot_V_pow_n = (R_dot_V == 0.0) ? 0.0 : pow(R_dot_V, mat.n);\n\n    return light.I_a * mat.k_a +\n        inShadow * light.I_source * (mat.k_d * N_dot_L + mat.k_r * R_dot_V_pow_n);\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Casts a ray into the scene and returns color computed at the nearest\n// intersection point. The color is the sum of light from all light sources,\n// each computed using Phong Lighting Model, with consideration of\n// whether the interesection point is being shadowed from the light.\n// If there is no interesection, returns the background color, and outputs\n// hasHit as false.\n// If there is intersection, returns the computed color, and outputs\n// hasHit as true, the 3D position of the intersection (hitPos), the\n// normal vector at the intersection (hitNormal), and the k_rg value\n// of the material of the intersected object.\n/////////////////////////////////////////////////////////////////////////////\nvec3 CastRay(in Ray_t ray,\n    out bool hasHit, out vec3 hitPos, out vec3 hitNormal, out vec3 k_rg)\n{\n    // Find whether and where the ray hits some object.\n    // Take the nearest hit point.\n\n    bool hasHitSomething = false;\n    float nearest_t = DEFAULT_TMAX;   // The ray parameter t at the nearest hit point.\n    vec3 nearest_hitPos;              // 3D position of the nearest hit point.\n    vec3 nearest_hitNormal;           // Normal vector at the nearest hit point.\n    int nearest_hitMatID;             // MaterialID of the object at the nearest hit point.\n\n    float temp_t;\n    vec3 temp_hitPos;\n    vec3 temp_hitNormal;\n    bool temp_hasHit;\n\n    /////////////////////////////////////////////////////////////////////////////\n    // TASK:\n    // * Try interesecting input ray with all the planes and spheres,\n    //   and record the front-most (nearest) interesection.\n    // * If there is interesection, need to record hasHitSomething,\n    //   nearest_t, nearest_hitPos, nearest_hitNormal, nearest_hitMatID.\n    /////////////////////////////////////////////////////////////////////////////\n    for (int i = 0; i < NUM_PLANES; i++) {\n        if (IntersectPlane(Plane[i], ray, DEFAULT_TMIN, nearest_t, temp_t, temp_hitPos, temp_hitNormal)) {\n            hasHitSomething = true;\n            nearest_t = temp_t;\n            nearest_hitPos = temp_hitPos;\n            nearest_hitNormal = temp_hitNormal;\n            //nearest_hitMatID = Plane[i].materialID;\n            vec2 p;\n            if (Plane[i].C == 1.)\n                p = temp_hitPos.xy;\n            if (Plane[i].C == -1.)\n                p = vec2(-temp_hitPos.x, temp_hitPos.y);\n            if (Plane[i].A == 1.)\n                p = vec2(-temp_hitPos.z, temp_hitPos.y);\n            if (Plane[i].A == -1.)\n                p = vec2(temp_hitPos.z, temp_hitPos.y);\n            nearest_hitMatID = select_map(p);\n        }\n    }\n    for (int i = 0; i < NUM_SPHERES; i++) {\n        if (IntersectSphere(Sphere[i], ray, DEFAULT_TMIN, nearest_t, temp_t, temp_hitPos, temp_hitNormal)) {\n            hasHitSomething = true;\n            nearest_t = temp_t;\n            nearest_hitPos = temp_hitPos;\n            nearest_hitNormal = temp_hitNormal;\n            nearest_hitMatID = Sphere[i].materialID;\n        }\n    }\n    for (int i = 0; i < NUM_BOX; i++) {\n        if (IntersectBox(Box[i], ray, DEFAULT_TMIN, nearest_t, temp_t, temp_hitPos, temp_hitNormal)) {\n            hasHitSomething = true;\n            nearest_t = temp_t;\n            nearest_hitPos = temp_hitPos;\n            nearest_hitNormal = temp_hitNormal;\n            nearest_hitMatID = Box[i].materialID;\n        }\n    }\n    /////////////////////////////////\n    // TASK: WRITE YOUR CODE HERE. //\n    /////////////////////////////////\n\n\n\n    // One of the output results.\n    hasHit = hasHitSomething;\n    if (!hasHitSomething) return BACKGROUND_COLOR;\n\n    vec3 I_local = vec3(0.0);  // Result color will be accumulated here.\n\n    /////////////////////////////////////////////////////////////////////////////\n    // TASK:\n    // * Accumulate lighting from each light source on the nearest hit point.\n    //   They are all accumulated into I_local.\n    // * For each light source, make a shadow ray, and check if the shadow ray\n    //   intersects any of the objects (the planes and spheres) between the\n    //   nearest hit point and the light source.\n    // * Then, call PhongLighting() to compute lighting for this light source.\n    /////////////////////////////////////////////////////////////////////////////\n    for (int i = 0; i < NUM_LIGHTS; i++)\n    {\n        vec3 L = normalize(Light[i].position - nearest_hitPos);\n        vec3 N = nearest_hitNormal;\n        vec3 V = normalize(ray.o - nearest_hitPos);\n        float inShadow = .0;\n\n        if (iTime >= 9. && iTime < 10.)\n            inShadow = 1. - cos(PI / 2. * (iTime - 9.));\n        if (iTime >= 10.)\n            inShadow = 1.;\n        if (nearest_hitMatID == 2)\n            inShadow = 1.;\n        if (nearest_hitMatID == 3)\n            inShadow = 1.;\n        float dist = length(Light[i].position - nearest_hitPos);\n\n        // sphere shadow\n        for (int j = 0; j < NUM_SPHERES; j++) {\n            // if (nearest_hitMatID == Sphere[j].materialID) {\n            //     inShadow = 1.0;\n            //     continue;\n            // }\n            // if (IntersectSphere(Sphere[j], Ray_t(nearest_hitPos, L), DEFAULT_TMIN, dist)) {\n            //     inShadow = 0.;\n            //     break;\n            // }\n            inShadow = min(inShadow, SphereSoftShadow(Sphere[j], Ray_t(nearest_hitPos, L), DEFAULT_TMIN, DEFAULT_TMAX));\n        }\n        \n        // don't calculate shadow for box for better performance\n        I_local += PhongLighting(L, N, V, inShadow, Material[nearest_hitMatID], Light[i]);\n    }\n    /////////////////////////////////\n    // TASK: WRITE YOUR CODE HERE. //\n    /////////////////////////////////\n\n\n\n    // Populate output results.\n    hitPos = nearest_hitPos;\n    hitNormal = nearest_hitNormal;\n    k_rg = Material[nearest_hitMatID].k_rg;\n\n    return I_local;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Execution of fragment shader starts here.\n// 1. Initializes the scene.\n// 2. Compute a primary ray for the current pixel (fragment).\n// 3. Trace ray into the scene with NUM_ITERATIONS recursion levels.\n/////////////////////////////////////////////////////////////////////////////\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    InitScene();\n\n    // Scale pixel 2D position such that its y coordinate is in [-1.0, 1.0].\n    vec2 pixel_pos = (2.0 * fragCoord.xy - iResolution.xy) / iResolution.y;\n\n    // Position the camera.\n    // vec3 cam_pos = vec3( 0.0+3. + 5.0* sin(iTime/7.0)* cos(iTime/3.0), 3.+sin(iTime/4.0), 0.0+7.0* cos(iTime/2.0) );\n\n    float curTime = iTime;\n    if (curTime > p5)\n        curTime = mod(curTime - p5, p5 - p1) + p1;\n    float change_x = cos(2. * PI / 9. * iTime);\n    float change_y = 1.;\n    float change_z = sin(2. * PI / 9. * iTime);\n    float base_x = 7.0 * change_x;\n    float base_y = 3. * change_y;\n    float base_z = 7.0 * change_z;\n\n    vec3 cam_pos = vec3(base_x, base_y, base_z);\n    vec3 cam_lookat = vec3(0.0, 1.0, 0.0);\n    vec3 cam_up_vec = vec3(0.0, 1.0, 0.0);\n    cam_lookat += 0.8 * vec3(0., max(Sphere[0].center.y - 2.5, 0.), 0.);\n\n    if (curTime < p1)\n        cam_pos = vec3(base_x, base_y, base_z);\n    else if (curTime < p2)\n    {\n        float speed = 3. * sin(PI / 2. * (curTime - p1));\n        cam_pos -= vec3(speed * change_x, 0., speed * change_z);\n    }\n    else if (curTime < p3)\n    {\n        cam_pos -= vec3(3. * change_x, 0., 3. * change_z);\n    }\n    else if (curTime < p4)\n    {\n        float period = p4 - p3;\n        float speed = 3. * sin(PI / 2. * (curTime - p3) / period);\n        cam_pos = vec3(base_x / 7. * 4., base_y, base_z / 7. * 4.);\n        cam_pos += vec3(speed * change_x, 0., speed * change_z);\n    }\n\n\n    // Set up camera coordinate frame in world space.\n    vec3 cam_z_axis = normalize(cam_pos - cam_lookat);\n    vec3 cam_x_axis = normalize(cross(cam_up_vec, cam_z_axis));\n    vec3 cam_y_axis = normalize(cross(cam_z_axis, cam_x_axis));\n\n    // Create primary ray.\n    float pixel_pos_z = -1.0 / tan(FOVY / 2.0);\n    Ray_t pRay;\n    pRay.o = cam_pos;\n    pRay.d = normalize(pixel_pos.x * cam_x_axis + pixel_pos.y * cam_y_axis + pixel_pos_z * cam_z_axis);\n\n\n    // Start Ray Tracing.\n    // Use iterations to emulate the recursion.\n\n    vec3 I_result = vec3(0.0);\n    vec3 compounded_k_rg = vec3(1.0);\n    Ray_t nextRay = pRay;\n\n    for (int level = 0; level <= NUM_ITERATIONS; level++)\n    {\n        bool hasHit;\n        vec3 hitPos, hitNormal, k_rg;\n\n        vec3 I_local = CastRay(nextRay, hasHit, hitPos, hitNormal, k_rg);\n\n        I_result += compounded_k_rg * I_local;\n\n        if (!hasHit) break;\n\n        compounded_k_rg *= k_rg;\n\n        nextRay = Ray_t(hitPos, normalize(reflect(nextRay.d, hitNormal)));\n    }\n\n    fragColor = vec4(I_result, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}