{"ver":"0.1","info":{"id":"3dcGRB","date":"1568980055","viewed":242,"name":"WhispyFilter","username":"lewdoo","description":"Experimenting with camera and buffering effects","likes":2,"published":1,"flags":34,"usePreview":0,"tags":["webcam","buffer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\tcol = texture(iChannel0, uv).rgb;\n    \n    col.rgb = vec3(col.r + col.g + col.b) * 0.333333;\n    \n    \n    //col.rgb = floor(col.rgb * 30.142592) * 0.1;\n    \n    //tv static style effect\n    col.rgb = floor(col.rgb * 20.24365) * 0.05;\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texture(iChannel0, fragCoord/iResolution.xy);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"//this script is used to overlap the different buffers\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 bufferUV = fragCoord.xy / iResolution.xy;\n    //bufferUV.y -= sin(iTime) * 0.005;\n    \n    vec3 col1 = texture(iChannel1, uv).rgb;\n    \n    col1 += (texture(iChannel2, bufferUV).rgb * 2.5 - vec3(1.1)) * 0.005 - 0.00001;\n    //col1 += texture(iChannel0, uv).rgb * 0.6 - texture(iChannel1, bufferUV).rgb * 0.98;\n    col1 = clamp(col1, 0., 1.);\n    fragColor = vec4(col1,1.);\n}","name":"Buffer B","description":"","type":"buffer"}]}