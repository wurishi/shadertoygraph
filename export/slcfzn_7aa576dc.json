{"ver":"0.1","info":{"id":"slcfzn","date":"1662508362","viewed":135,"name":"DROPS","username":"derhenryschmidt","description":"soft drops","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["cecoceco"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Built in uniforms: vec2 iResolution, float iTime\n\nint direction =1;\n\nvec4 bg_color = vec4(0.0, 0.0, 0.0, 1.0);\nvec4 color1 = vec4(1.0, 0.5, 0.0, 0.1);\nvec4 color2 = vec4(1.0, 0.2, 0.0, 0.5);\nvec4 color3 = vec4(1.0, 0.1, 0.0, 0.25);\nvec4 color4 = vec4(1.0, 0.05, 0.0,0.1);\nvec4 color5 = vec4(0.0, 0.0, 0.0, 1.0);\nvec4 color6 = vec4(0.0, 1.0, 1.0, 0.1);\n\nfloat speed = 0.1;\nfloat variation = 10.;\n\nfloat width = 0.1;\nfloat _length =10.0;\n\nfloat border = 1.0;\n\nint quantity = 10;\n\nfloat random (vec2 uv) {\n\tfloat x = abs(sin(uv.x*10.0));\n\tfloat y = abs(sin(uv.y*100.0));\n\t\n\treturn (x + y) / 2.0;\n}\n\nfloat genpos(float seed) {\n\treturn random(vec2(1.2 * seed, seed));\n}\n\n\nfloat ggenpos(vec2 uv) {\n\treturn random(uv);\n}\n\nfloat wrapf(float v, float vmin, float vmax) {\n\treturn v - (vmax - vmin) * floor(v / (vmax - vmin));\n}\n\nvec4 process_per_drop(int id, vec2 uv) {\n\tfloat time_offset = genpos(float(id) * 7.4321) * 4.0;\n\t\n\tfloat rmult = abs(genpos(float(id)*4.5235) * variation) + 1.0;\n\t\n\tfloat processed_speed = speed * rmult;\n\n\tfloat effective_time = (iTime + time_offset) * processed_speed;\n\t\n\tfloat ysm = max(1.0 - (rmult / 4.0), 0.15);\n\t\n\tvec2 effective_size = vec2(width, _length * ysm);\n\tfloat snapped_et = float(int(effective_time / (1.0 + effective_size.y)));\n\t\n\tfloat x_pos = genpos(float(id) * (snapped_et));\n\t\n\tint mod_id = id % 6; vec4 color = (mod_id == 0 ? color6 : (mod_id == 1 ? color1 : (mod_id == 2 ? color2 : (mod_id == 3 ? color3 : (mod_id == 4 ? color4 : color5) ))) );\n\t\n\tvec2 drop_pos = vec2(x_pos, wrapf(effective_time, 0.0, 1.0 + effective_size.y));\n\t\n\tfloat tip_y_pos = (drop_pos.y - effective_size.y);\n\tfloat rtip_off = -0.1;\n\trtip_off = effective_size.y * rtip_off;\n\t\n\tbool do_smoothness = border != 0.0;\n\t\n\tif (abs(uv.x - drop_pos.x) < effective_size.x && uv.y < drop_pos.y && uv.y > tip_y_pos) {\n\t\tfloat alpha = 1.0;\n\t\talpha *= abs(uv.y - tip_y_pos) / abs((drop_pos.y + rtip_off) - tip_y_pos); // Y smoothness\n\t\tif (do_smoothness) {\n\t\t\tif (uv.y > (drop_pos.y + rtip_off) && uv.y < drop_pos.y) { // Y bottom smoothness\n\t\t\t\talpha *= abs(uv.y - (drop_pos.y)) / abs((drop_pos.y  + rtip_off) - drop_pos.y);\n\t\t\t}\n\t\t\t\n\t\t\talpha *= (effective_size.x - abs(uv.x - drop_pos.x)) / effective_size.x; // X smoothness\n\t\t\t\n\t\t\talpha *= 1.0 + ( (1.0 - border) * 15.0);\n\t\t\talpha = min(alpha, 1.0);\n\t\t}\n\t\tcolor.a = alpha;\n\t\t\n\t\treturn color;\n\t}\n\treturn vec4(0.0);\n}\n\nvec2 rotate_uv(vec2 uv, vec2 pivot, float rotation) {\n\t\trotation = radians(rotation);\n\t\t\n\t\tfloat cosa = cos(rotation);\n\t\tfloat sina = sin(rotation);\n\t\tuv -= pivot;\n\t\treturn vec2(\n\t\t\tcosa * uv.x - sina * uv.y,\n\t\t\tcosa * uv.y + sina * uv.x\n\t\t) + pivot;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec4 result = bg_color;\n\t\n\tfor (int i = 0; i < quantity; i++) {\n\t\tvec4 processed = process_per_drop(i + 1, rotate_uv(uv, vec2(0.5, 0.5), (90.0 * float(direction)) ));\n\t\tresult = mix(result, vec4(processed.rgb, 1.0), processed.a);\n\t}\n\t\n\n    fragColor = result;\n}\n\n","name":"Image","description":"","type":"image"}]}