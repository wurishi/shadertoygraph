{"ver":"0.1","info":{"id":"XdfcWf","date":"1490215344","viewed":191,"name":"monsterface","username":"jgreen23","description":"monster","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["monster"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//tutorial by https://www.youtube.com/channel/UCcAlTqd9zID6aNX3TzwxJXg\n//source code provided by Martjin Steinrucken and changes made by James Green CPE 471-03\n\n#define sat(x) clamp(x, 0., 1.)\n\n//remaps value to be between 0 and 1\nfloat remap01(float a, float b, float t) \n{\n    return sat((t - a) / (b - a));\n}\n\n//remaps value to custom value\nfloat remap(float a, float b, float c, float d, float t)\n{\n    return sat( (t - a) / (b - a) ) *(d - c) + c;\n}\n\n//makes bounding box within a set area with its own coordinate system\nvec2 within(vec2 uv, vec4 rect)\n{\n\treturn (uv - rect.xy) / (rect.zw - rect.xy);    \n}\n\n//makes an eye\nvec4 Eye(vec2 uv, float side, vec2 mouse, float smile)\n{\n    uv -= .5; //center uv\n    \n    uv.x *= side; //reflect the x axis\n    \n    float d = length(uv); //distance to center\n\t\n    vec4 iris = vec4(1. * smile, .2, .1, 1.); //color of iris\n    \n    vec4 color = mix(vec4(1.), iris, smoothstep(.1,.7,d) * .7); //mix in the iris\n    \n    color.a = smoothstep(.5, .48, d); //bound the eye to this circle\n\n    color.rgb *= 1. - smoothstep(.45, .5, d) * 0.8 * sat(-uv.y - uv.x); //make eye\n    \n\td = length(uv - mouse * 0.2); //newdistance for eye gaze\n\n    color.rgb = mix(color.rgb, vec3(1, 1, 0), smoothstep(.3, .28, d)); //iris outline\n\n    iris.rgb *= 1. + smoothstep(.45, .05, d); //iris color\n\n    color.rgb = mix(color.rgb, iris.rgb, smoothstep(.24, .21, d)); //blend in new iris layer\n    \n    d = length(uv - mouse * 0.305); //new distance for pupil\n    \n    float pupilSize = mix(.25,.16, (1. - smile)); \n    \n    color.rgb = mix(color.rgb, vec3(0.), smoothstep(pupilSize, pupilSize * .85, d)); //blend in pupils\n    \n    float time = iTime;\n    \n    vec2 offset = vec2(sin(time+uv.y*25.), sin(time+uv.x*25.)); //rotating highlights\n    \n \toffset *= 0.04 * smile;\n    \n    uv += offset;\n    \n    float highlight = smoothstep(.1, .09, length(uv-vec2(-.15, .15)));\n    \n    highlight += smoothstep(.07, .05, length(uv+vec2(-.08, .08)));\n    \n    color.rgb = mix(color.rgb, vec3(1.), highlight);\t\t\t// blend in highlight\n    \n    return color;\n}\n\n\nvec4 Mouth(vec2 uv, float smile)\n{\n    uv -= 0.5;\n    vec4 color = vec4(0.5, 0.18, 0.05, 1.0); //dark red\n    uv.y *= 1.5; //make smile\n    uv.y -= uv.x * uv.x * 2. * smile;\n    uv.y -= 0.15 * smile;\n    uv.x *= mix(2.5,1.,smile);\n    float d = length(uv);\n    color.a = smoothstep(.5, .48, d); //bind mouth to this shape\n        \n    float tongueD = length(uv + vec2(0., .5));\n\tcolor.rgb = mix(color.rgb, vec3(1.,.5,.5), smoothstep(.5,.2,tongueD));\n    \n    float teethD = length(uv - vec2(0.35, -.5 - (smile * 0.3)));\n    \n    color.rgb = mix(color.rgb, vec3(1.), smoothstep(.26,.24,teethD));\n    return color;\n}\n\nvec4 Head(vec2 uv)\n{\n    vec2 xy;\n    vec4 texColor = texture(iChannel0,xy);//Get the pixel at xy from iChannel0\n\n    vec4 color = vec4(0.0, 0.8, 0.3, 1.0);\n    \n    float d = length(uv); //distance to center\n    \n    color.a = smoothstep(.5, .49, d);\n\n    float edgeShadow = remap01(0.35, 0.5, d);\n    \n\tedgeShadow *= edgeShadow;\n    \n    color.rgb *= 1. - edgeShadow * .5;\n    \n    color.rgb = mix(color.rgb, vec3(0.0, 0.4, 0.2), smoothstep(.47,.48,d)); //outline\n    \n    float highlight = smoothstep(.41,.405,d) * .89;\n    highlight *= remap(.41 - .1, .0, .75, .0, uv.y);\n    color.rgb = mix(color.rgb, vec3(1.), highlight);\n    \n     d = length(uv - vec2(0.25, -.1));\n    float leftFreckB = smoothstep(.05, .0025, d) * .8;\n    color.rgb = mix(color.rgb, vec3(.0, .7, .1), leftFreckB);\n    \n    d = length(uv - vec2(0.27, -.19));\n    float rightFreckB = smoothstep(.05, .0025, d) * .8;\n    color.rgb = mix(color.rgb, vec3(.0, .7, .1), rightFreckB);\n    \n    d = length(uv - vec2(0.19, -.2));\n    float midFreckB = smoothstep(.05, .0025, d) * .8;\n    color.rgb = mix(color.rgb, vec3(.0, .7, .1), midFreckB);\n    \n    \n    return color;\n}\n\nvec4 Monster(vec2 uv, vec2 mouse, float smile)\n{\n    vec4 color = vec4(0.0);\n    float side = sign(uv.x); //either -1 or + 1\n    uv.x = abs(uv.x);\n    vec4 head = Head(uv);\n    vec4 eye = Eye(within(uv, vec4(.03,-.1,.26,.35)), side, mouse, smile);\n    vec4 mouth = Mouth(within(uv, vec4(-.3,-.4, .3, -.1)), smile);\n    color = mix(color, head, head.a);\n    color = mix(color, eye, eye.a);\n    color = mix(color, mouth, mouth.a);\n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 mouse = iMouse.xy / iResolution.xy;\n    uv -= 0.5;\n    mouse -= 0.5;\n    \n    float smile = cos(iTime) * 0.5 + 0.5; //oscillate 0 to 1\n    uv.x *= iResolution.x / iResolution.y;\n    \n    if(mouse.x<-.49 && mouse.y<-.49) {\t\t\t// make it that he looks around when the mouse hasn't been used\n    \tfloat s = sin(iTime*.5);\n        float c = cos(iTime*.38);\n        \n        mouse = vec2(s, c)*.4;\n    }\n    uv -= mouse * (.25 - dot(uv, uv));\n\tfragColor = Monster(uv, mouse, smile);\n}","name":"Image","description":"","type":"image"}]}