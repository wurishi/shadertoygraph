{"ver":"0.1","info":{"id":"43GXDG","date":"1720407503","viewed":44,"name":"2D Vector Field","username":"moloxe","description":"Simple 2D vector field visualization\n\nDefault example from: https://www.geogebra.org/resource/QPE4PaDZ/dfYUWD6GynXktJGE/material-QPE4PaDZ.png","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["visualization","vector"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265\n\nvec3 hsv2rgb(vec3 c) { // https://gist.github.com/983/e170a24ae8eba2cd174f\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nfloat getAngularDist(float angle1, float angle2) {\n    float angle = angle1 - angle2;\n    if (angle > PI) {\n        angle -= 2.0 * PI;\n    } else if (angle <= -PI) {\n        angle += 2.0 * PI;\n    }\n    return angle;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy * 2. - 1.;\n    uv.x *= iResolution.x / iResolution.y;\n\n    vec2 origin = vec2(uv.x, uv.y) * scale;\n    vec2 target = getTarget(origin);\n\n    float t = sin(iTime + PI) * .5 + .5;\n    target = (1. - t) * origin + t * target;\n\n    float angleO = atan(origin.y, origin.x);\n    float angleT = atan(target.y, target.x);\n\n    float eDist = length(origin - target);\n    float aDist = getAngularDist(angleO, angleT);\n    aDist = aDist / (2. * PI);\n\n    vec3 c = hsv2rgb(vec3(aDist, 1., log(1. + eDist)));\n  \n    fragColor = vec4(c, 1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define scale vec2(3.)\n\nvec2 getTarget(vec2 origin) {\n    float x = origin.x;\n    float y = origin.y;\n    return vec2(\n        x*x - y*y - 4.,\n        2. * x*y\n    );\n}\n","name":"Common","description":"","type":"common"}]}