{"ver":"0.1","info":{"id":"lfdBW4","date":"1733142681","viewed":30,"name":"Frikadellenbrot","username":"serioux666","description":"I DID NOT want to debug hard-to-find, sporadic hardware issues in my firmware at work and had some fun with fractals instead.\n\nMashed up the parametric parts of Julia set and Mandelbrot set and was dreaming of a juicy Frikadellenbr√∂tchen for lunch. Yummy.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["mandelbrot","procastinating"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n  Frikadellenbrot by @serioux666 is licensed under\n  Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International.\n  To view a copy of this license, visit https://creativecommons.org/licenses/by-nc-sa/4.0/\n  \n  Mash-up of Julia set and Mandelbrot set. Nothing fancy. Just me procrastinating at work :)\n*/\n\nconst int ITERATION_COUNT = 50;\nconst float THRESHOLD = float(ITERATION_COUNT);\n\n// Generated with nr4's ImageColorPicker\n// https://github.com/LeStahL/ImageColorPicker\n// Escapement time coloring\nvec3 cmap_OklabOklab_example(float t) {\n    return vec3(0.12,0.16,0.30)\n        +t*(vec3(2.92,2.22,-1.21)\n        +t*(vec3(-28.51,-20.39,22.93)\n        +t*(vec3(145.08,120.65,-73.80)\n        +t*(vec3(-291.63,-284.29,89.43)\n        +t*(vec3(250.49,280.09,-42.98)\n        +t*(vec3(-78.34,-98.31,5.57)\n    ))))));\n}\n\n// Orbital trap for coloring inside\nvec3 cmap_OklabOklab_trap(float t) {\n    return vec3(0.85,0.39,0.71)\n        +t*(vec3(-2.35,0.54,-1.86)\n        +t*(vec3(32.19,1.74,9.66)\n        +t*(vec3(-118.28,15.31,-23.36)\n        +t*(vec3(162.77,-67.50,28.37)\n        +t*(vec3(-88.53,81.21,-15.93)\n        +t*(vec3(14.12,-31.34,3.08)\n    ))))));\n}\n\n// https://iquilezles.org/articles/distfunctions2d/\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nfloat trap_distance(vec2 point, vec2 param)\n{\n    //return length(point - param);\n    //return abs(sdSegment(point, vec2, vec2(0., 0.)));\n    \n    param = abs(param) + 0.1;\n    return length(point - param * round(point / param));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized screen coordinates\n    vec2 uv = (fragCoord - iResolution.xy / 2.) / iResolution.y;\n    \n    // constant that is used across all pixels\n    vec2 parameter = (iMouse.xy - iResolution.xy / 2.) / iResolution.y;\n    \n    // Add time-dependence\n    uv *= exp(-(cos(iTime*0.14) + 1.0));\n    parameter = vec2(sin(iTime*0.2), cos(iTime*0.2)) * exp(-cos(iTime*0.01));\n    \n    //Mandelbrot\n    //vec2 z = vec2(0., 0.);\n    //vec2 c = uv * 5. + parameter;\n    \n    //Julia\n    //vec2 z = uv * 8.;\n    //vec2 c = parameter;\n\n    //Frikadelle\n    //uv *= 5.;\n    //vec2 z = vec2(uv.x, parameter.y);\n    //vec2 c = vec2(parameter.x,  uv.y);\n \n    //Drikafelle\n    vec2 z = vec2(parameter.x,  uv.y) * 2.;\n    vec2 c = vec2(uv.x, parameter.y) * 2.;\n    \n    // Test if point is in set\n    int i;\n    float closest_dist = 10e5;\n    for(i = 0; i < ITERATION_COUNT; ++i) {\n        z = vec2(z.x * z.x - z.y * z.y + c.x,\n                 2. * z.x * z.y + c.y);\n        if(length(z) > THRESHOLD) {\n            break;\n        }\n        closest_dist = min(closest_dist, trap_distance(z, parameter));\n    }\n\n    // Default-shader colors for non-diverging points\n    vec3 col = vec3(0., 0., 0.);\n    if(length(z) > THRESHOLD) {\n        col = cmap_OklabOklab_example(float(i) / float(ITERATION_COUNT));\n    } else {\n        col = cmap_OklabOklab_trap(fract(closest_dist));\n    }\n\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}