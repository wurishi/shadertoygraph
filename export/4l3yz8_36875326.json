{"ver":"0.1","info":{"id":"4l3yz8","date":"1531410827","viewed":228,"name":"syltefar-black hole sun","username":"syltefar","description":"A ray marched sphere with spherical coordinate-based gradient noise applied to its radius, color intensity is ray march iteration count.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Gradient noise by iq\n// - See https://www.shadertoy.com/view/XdXGW8\nvec2 hash( vec2 x )  // replace this by something better\n{\n    const vec2 k = vec2( 0.3183099, 0.3678794 );\n    x = x*k + k.yx;\n    return -1.0 + 2.0*fract( 16.0 * k*fract( x.x*x.y*(x.x+x.y)) );\n}\nfloat noise( in vec2 p )\n{\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n\t\n\tvec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( dot( hash( i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ), \n                     dot( hash( i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),\n                mix( dot( hash( i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ), \n                     dot( hash( i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);\n}\n\nfloat sdf(vec3 pos, float time)\n{\n    vec2 polar;\n    vec3 local_sp = pos;\n    polar.y = atan(local_sp.z, local_sp.x);\n    float xzLen = sqrt(local_sp.x * local_sp.x + local_sp.z * local_sp.z);\n    polar.x = atan(xzLen, -local_sp.y);\n    \n    float time_scaled = time * 0.2;\n    \n    // Circular motion ensures that surface motion is constant\n    vec2 offset = vec2( cos(time_scaled), sin(time_scaled)) * 10.0;\n    \n    // avoid wobble at the poles, it generates artifacts\n    float wobble_scale = sin(polar.x + 3.14127);\n    \n    return length(pos) - 0.9\n        - noise(polar*3.0+offset) * 0.2 * wobble_scale\n        - noise(polar*2.7-offset) * 0.2 * wobble_scale\n        ;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const float gradient_offset = 0.001;\n    const float MIN_DIST = 0.01;\n    const float MAX_DIST = 60.0;\n    const int ITERATIONS = 32;\n    // https://iquilezles.org/articles/distfunctions\n    // \"You must be carefull when using distance transformation functions, as\n    //  the field created might not be a real distance function anymore. You\n    //  will probably need to decrease your step size, if you are using a\n    // raymarcher to sample this.\"\n    const float STEP_SIZE = 0.4;\n    \n    vec2 uv = fragCoord.xy / iResolution.yy * 2.0;\n    vec3 start_pos = vec3(uv.x-1.0, uv.y-1.0, 0.0);\n    vec3 camera = vec3(0.0, 0.0,-100.0);\n    vec3 direction = normalize(start_pos - camera);\n\n    vec3 pos = start_pos + vec3(-1.0, 0.0, -40.0);\n    \n    // ray marching\n    float d = 10.0;\n    int i = 0;\n    for(i = 0; i < ITERATIONS; i++) {\n\t  d = sdf(pos, iTime );\n\t  pos += direction * d * STEP_SIZE;\n\t  if(d < MIN_DIST || d > MAX_DIST) break;\n    }\n\n    float r = 0.0, g = 0.0, b = 0.0;\n    \n    if(d<=MIN_DIST) {\n\n\t  // estimate normal based on finite difference approx of gradient\n\t  vec3 gradient = sdf(pos, iTime) - vec3(\n\t      sdf(pos + vec3(gradient_offset,.000,.000), iTime),\n\t      sdf(pos + vec3(.000,gradient_offset,.000), iTime),\n\t      sdf(pos + vec3(.000,.000,gradient_offset), iTime)\n\t      );\n      \t  vec3 normal = normalize( gradient );\n\n\t  // red diffuse light\n\t  //r = dot( normal, normalize(vec3(2.0,-4.0,+0.5))) * 0.9;\n\t  // green diffuse light\n\t  //g = dot( normal, normalize(vec3(-0.4,0.4,+0.4))) * 0.2;\n\t  // blue diffuse light\n\t  //b = dot( normal, normalize(vec3(0.9,-0.3,+0.4))) * 0.5;\n    }\n    // show iteration count\n    float col = pow(float(i)/float(ITERATIONS), 3.0);\n    fragColor = vec4(col, 0.0, 0.0, 1.0);\n    \n    //fragColor = vec4(r, g, b, 1.0);\n}","name":"Image","description":"","type":"image"}]}