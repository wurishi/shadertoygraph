{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"buffer","id":"4dXGR8","filepath":"/media/previz/buffer00.png","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"channel":1,"type":"buffer","id":"XsXGR8","filepath":"/media/previz/buffer01.png","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"code":"// The total number of particles will be NB_PARTICLES * NB_PARTICLES.\n#define NB_PARTICLES 20\n#define PARTICLE_SIZE 2.5\n#define OPACITY 2.0\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n   fragColor = texture(iChannel1,fragCoord.xy/iResolution.xy);\n    \n}","name":"Image","description":"","type":"image"},{"outputs":[{"channel":0,"id":"4dXGR8"}],"inputs":[{"channel":0,"type":"buffer","id":"4dXGR8","filepath":"/media/previz/buffer00.png","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"code":"#define NB_PARTICLES 20\n#define PARTICLE_SIZE 2.5\n#define BOUNCE 0.9\n#define MAX_SPEED 800000.0\n\n#define ATTRACTION 600000.0\n\n\n// Random function from https://www.shadertoy.com/view/4ssXRX\n// note: uniformly distributed, normalized rand, [0;1[\nfloat nrand( vec2 n )\n{\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 pixelSize = 1.0 / iResolution.xy;\n    \n    // Initialize the texture on the first frame with random positions and null velocity.\n    if (iFrame == 1)\n    {\n\t\tfragColor = vec4(vec2(nrand(uv), nrand(uv.yx)), 0.0 , 0.0);\n        return;\n    }\n    \n    // The texture stores the particle position in xy and the velocity in zw.\n    vec4 previousFrameValues = texture(iChannel0, uv);\n    vec2 position = previousFrameValues.xy*iResolution.xy;\n    vec2 velocity = previousFrameValues.zw*iResolution.xy;\n \n    // Gravity.\n    \n    \n    //Mouse attraction.\n    if (iMouse.w>0.01)\n    {\n    \tvec2 attractionVector = (iMouse.xy) - position;\n        if (length(attractionVector) > 20.)\n    \tvelocity += ATTRACTION * (normalize(attractionVector)/length(attractionVector));\n    }\n    vec2 force = vec2(0);\n    for (int y= 0; y < NB_PARTICLES;++y){\n         for (int x= 0; x < NB_PARTICLES;++x){\n             vec4 other = texelFetch(iChannel0,ivec2(x, y),0);\n             vec2 line = other.xy * iResolution.xy - position; \n             float len = length(line);\n             vec2 normal = normalize(line);\n             \n             if (length(line) > 0.001)\n             \tforce += 150.*line/len/len;\n             if (len < 2.*PARTICLE_SIZE && len > 0.001){ //Otherwise calculates collision force between particles\n             \tvec2 vDiff = velocity - other.zw*iResolution.xy;\n                //approach is how fast particles are going into eachother\n                float approach = dot(vDiff,normal);\n                if (approach > 0.){\n             \t\tforce -= 0.025*approach*normal;\n                }\n                \n             }\n         }         \n    }\n    velocity += force;\n    \n    // Collisions\n    if (position.x < 0.0)\n    {\t\n        velocity = vec2(abs(velocity.x) * BOUNCE, velocity.y);\n    }\n\n    if (position.x > iResolution.x)\n    {\t\n        velocity = vec2(-abs(velocity.x) * BOUNCE, velocity.y);\n    }\n\n    if (position.y < 0.0)\n    {\n        velocity = vec2(velocity.x, abs(velocity.y) * BOUNCE);\n    }\n\n    if (position.y > iResolution.y)\n    {\n        velocity = vec2(velocity.x, -abs(velocity.y) * BOUNCE);\n    }\n    \n    // Update position.\n    position.xy += velocity * iTimeDelta * 0.001;\n    \n    if ( length(velocity) > MAX_SPEED)\n        velocity = normalize(velocity) * MAX_SPEED;\n    \n    \n    fragColor = vec4(position.xy/iResolution.xy, velocity.xy/iResolution.xy);\n}","name":"Buffer A","description":"","type":"buffer"},{"outputs":[{"channel":0,"id":"XsXGR8"}],"inputs":[{"channel":0,"type":"buffer","id":"4dXGR8","filepath":"/media/previz/buffer00.png","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"channel":1,"type":"buffer","id":"XsXGR8","filepath":"/media/previz/buffer01.png","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"code":"// The total number of particles will be NB_PARTICLES * NB_PARTICLES.\n#define NB_PARTICLES 20\n#define PARTICLE_SIZE 2.5\n#define OPACITY 2.0\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    //vec2 pixelSize = 1.0 / iResolution.xy;\n    \n\tvec2 uv = fragCoord.xy / iResolution.xy;\n \t\n    \n    vec3 finalColor = vec3(0.0);\n    \n\n    \n    // Read each pixels of the position texture to find if some of them are \n    // close from the current pixel.\n    for (int x = 0; x < NB_PARTICLES; x++)\n    {\n        for (int y = 0; y < NB_PARTICLES; y++)\n        {\n            // This is the bottleneck of the shader, there might be a\n            // better way to read the particle textures., vec2(x, y) * pixelSize);\n            vec4 currentParticle = texelFetch(iChannel0, ivec2(x, y),0);\n            //Distance from particle to this pixel\n            vec2 dist = (currentParticle.xy - uv)*iResolution.xy;\n            \n            // If a particle is close to this pixel, add its color to the final color.\n            if (length(dist)  <  PARTICLE_SIZE)\n            {\n                float val = (currentParticle.z * currentParticle.z + currentParticle.w * currentParticle.w) *0.000001;\n                vec3 velocityColor = vec3(-0.25 + val, 0.1, 0.25-val) * OPACITY;\n                finalColor += velocityColor.xyz;\n            } \n        }\n    }\n    vec3 previous = texture(iChannel1,uv).xyz;\n\tfragColor = vec4(finalColor+0.7*previous, 1.0);\n\n    \n    \n}","name":"Buffer B","description":"","type":"buffer"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":true,"mFlagMusicStream":false},"info":{"id":"3d2XDh","date":"1553633812","viewed":636,"name":"Gravity particles","username":"kindpotato","description":"oks2024 made a  \"Stateful particle system\" which worked well, but everything was stretched in the x direction. There is now gravity between particles. Force of gravity is proportional to 1/distance. You can get galaxy shapes sometimes!","likes":15,"published":1,"flags":32,"usePreview":0,"tags":["multipassparticlesphysics"],"hasliked":0,"parentid":"","parentname":""}}