{"ver":"0.1","info":{"id":"XcXGWr","date":"1702935671","viewed":25,"name":"Week 3 Lab","username":"CSV","description":"From a watercolor tutorial by Lewis Lepton:  https://youtu.be/VxGfhPeeXqs\nAnd the book of shaders https://thebookofshaders.com/13/","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["watercolor"],"hasliked":0,"parentid":"DtKfzR","parentname":"FBM Wavey RGB Noise"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\n\n// For multiple octaves\n#define NUM_NOISE_OCTAVES 12\n\nfloat random (vec2 st) {\n    return fract(sin(dot(st.xy,vec2(12.9898,78.233)))* 43758.5453123);\n}\n\nfloat noise(vec2 x) {\n    vec2 i = floor(x);\n    vec2 f = fract(x);\n\n\t// Four corners in 2D of a tile\n\tfloat a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n\t// Same code, with the clamps in smoothstep and common subexpressions\n\t// optimized away.\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\treturn mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;\n}\n\nfloat fbm(vec2 x) {\n\tfloat v = 0.0;\n\tfloat a = 0.5;\n\tvec2 shift = vec2(100);\n\t// Rotate to reduce axial bias\n    mat2 rot = mat2(cos(0.5), sin(0.5), -sin(0.5), cos(0.50));\n\tfor (int i = 0; i < NUM_NOISE_OCTAVES; ++i) {\n\t\tv += a * noise(x);\n\t\tx = rot * x * 2.0 + shift;\n\t\ta *= 0.5;\n\t}\n\treturn v;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 st = fragCoord.xy/iResolution.xy*4.;\n    //st += st * abs(sin(iTime*0.1)*3.0);\n\n    vec2 q = vec2(0.);\n    \n    q.x = fbm(st + 1.0 + vec2(1.7,9.2)+ 0.15*iTime );\n    q.y = fbm(st + 1.0 + vec2(8.3,2.8)+ 0.126*iTime);\n    \n    float f = fbm(st+q);\n\n    // Output to screen\n  //  fragColor = vec4(f,f,f,1.0);\n    fragColor = vec4(cos(f * 30.0), cos(f * 40.0), cos(f * 20.0), 1.0);\n}","name":"Image","description":"","type":"image"}]}