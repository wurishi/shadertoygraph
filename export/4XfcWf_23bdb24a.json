{"ver":"0.1","info":{"id":"4XfcWf","date":"1726702995","viewed":37,"name":"comic_xx","username":"timuber","description":"outlines","likes":1,"published":1,"flags":2,"usePreview":0,"tags":["cartoon","outlines","posterize"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float outline_threshold = 0.09;\nconst vec3 outline_color = vec3(0.0, 0.0, 0.0);\nconst float posterize_levels = 10.0;\nconst bool is_bw = false;\n\nconst mat3 sobel_y = mat3(\n\tvec3(1.0, 0.0, -1.0),\n\tvec3(2.0, 0.0, -2.0),\n\tvec3(1.0, 0.0, -1.0)\n);\n\nconst mat3 sobel_x = mat3(\n\tvec3(1.0, 2.0, 1.0),\n\tvec3(0.0, 0.0, 0.0),\n\tvec3(-1.0, -2.0, -1.0)\n);\n\nbool is_edge(in vec2 uv, in vec3 normal, in vec2 offset) {\n\tvec3 n = texture(iChannel0, uv + vec2(0.0, -offset.y)).rgb;\n\tvec3 s = texture(iChannel0, uv + vec2(0.0, offset.y)).rgb;\n\tvec3 e = texture(iChannel0, uv + vec2(offset.x, 0.0)).rgb;\n\tvec3 w = texture(iChannel0, uv + vec2(-offset.x, 0.0)).rgb;\n\tvec3 nw = texture(iChannel0, uv + vec2(-offset.x, -offset.y)).rgb;\n\tvec3 ne = texture(iChannel0, uv + vec2(offset.x, -offset.y)).rgb;\n\tvec3 sw = texture(iChannel0, uv + vec2(-offset.x, offset.y)).rgb;\n\tvec3 se = texture(iChannel0, uv + vec2(offset.x, offset.y)).rgb;\n\n\tmat3 surrounding_pixels = mat3(\n\t\tvec3(length(nw-normal), length(n-normal), length(ne-normal)),\n\t\tvec3(length(w-normal), length(normal-normal), length(e-normal)),\n\t\tvec3(length(sw-normal), length(s-normal), length(se-normal))\n\t);\n\n\tfloat edge_x = dot(sobel_x[0], surrounding_pixels[0]) + dot(sobel_x[1], surrounding_pixels[1]) + dot(sobel_x[2], surrounding_pixels[2]);\n\tfloat edge_y = dot(sobel_y[0], surrounding_pixels[0]) + dot(sobel_y[1], surrounding_pixels[1]) + dot(sobel_y[2], surrounding_pixels[2]);\n\n\tfloat edge = pow(edge_x, 2.0)+pow(edge_y, 2.0);\n\n\treturn edge > outline_threshold;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\tvec3 screen_color = texture(iChannel0, uv).rgb;\n    float depth = 1.0 - dot(screen_color, vec3(0.299, 0.587, 0.114));\n\tvec3 screen_normal = 2.0 * vec3(depth) - 1.0;\n\tvec2 offset = 1.0 / iResolution.xy;\n    \n    vec3 posterized_color = floor((is_bw ? vec3(1.0 - depth) : screen_color) * posterize_levels) / posterize_levels;\n\t\n\tif (is_edge(uv, screen_normal, offset)) {\n\t\tfragColor = vec4(outline_color, 1.0);\n\t} else {\n\t\tfragColor = vec4(posterized_color, 1.0);\n\t}\n}","name":"Image","description":"","type":"image"}]}