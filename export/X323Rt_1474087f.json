{"ver":"0.1","info":{"id":"X323Rt","date":"1708841544","viewed":90,"name":"2D moon","username":"JonathanShiri","description":"test","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI radians(180.0)\nfloat circle(vec2 uv, vec2 c, float rad) {\n\treturn 0.0;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    \n    vec2 c1 = vec2(0.5, 0.5);\n    vec2 circCord1 = c1 * iResolution.xy;\n    float rad = 0.15;\n    float radCord = rad * iResolution.x;\n    float horzRad = radCord*cos(iTime * 0.5);\n    float vertRad = radCord;\n\n    float a = pow((fragCoord.x - circCord1.x), 2.f) / pow(horzRad, 2.f);\n    float b = pow((fragCoord.y - circCord1.y), 2.f) / pow(vertRad, 2.f);\n    \n    float dist_from_center = (uv.x - c1.x) * sign(horzRad); // elipse grow right\n   \n    if (abs(a + b) < 1.f && dist_from_center > 0.0) {\n       float normHorzRad = horzRad / iResolution.x;\n       float elipsetext = (c1.x + normHorzRad - uv.x) / (2.f*normHorzRad);\n       fragColor = vec4(elipsetext);\n    }\n        \n    else {\n        if (distance(fragCoord, circCord1) < radCord) {\n            float circGrad = ((c1.x + rad) - uv.x) / (2.f*rad); \n            fragColor = vec4(circGrad);\n    }\n        else\n            fragColor = vec4(0, 0, 0, 1);\n    }\n}","name":"Image","description":"","type":"image"}]}