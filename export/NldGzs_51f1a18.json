{"ver":"0.1","info":{"id":"NldGzs","date":"1636558466","viewed":354,"name":"percolation network","username":"FabriceNeyret2","description":"atoms bonding (polymerization ) / diffusion through cracks ( water in soil or in coffee ) can be model as percolation in networks. Here, connectivity between nodes is \"slightly smooth\" for a better feeling of the connectome.","likes":20,"published":3,"flags":0,"usePreview":0,"tags":["short","network","connect","percolation","molecules","bonds"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define H(p) fract(sin((p)*mat2(127.1,311.7, 269.5,183.3)) *43758.5453123)\n#define C(p) (.5+.5*vec2( cos( (H(p).y-.5)*iTime + 6.3*H(p).x + vec2(0,33) ) ) )\n//#define hue(v)  ( .6 + .6 * cos( 6.3*(v)  + vec4(0,23,21,0)  ) )\n\nfloat line(vec2 p, vec2 a,vec2 b) { \n    p -= a, b -= a;\n    return length(p - b * clamp(dot(p, b) / dot(b, b), 0., 1.));                      \n}\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 R = iResolution.xy,\n         U = 10.*( u+u - R ) / R.y,\n         I = floor(U), F = fract(U), D,A,B;        \n    O-=O;\n\n    for( int k=0; k<9; k++ ) {\n        D = vec2(k%3,k/3)-1., A = D + C(I+D);\n        O.r = max(O.r, .3 / length(F-A) );             // red blobs\n        for( int j=0; j<9; j+= j==k-1?2:1 ) {\n            D = vec2(j%3,j/3)-1., B = D + C(I+D);\n            float d = length(B-A); d = max(0., 1.5-d); // A-B connectivity\n            if (d>0.) O = max(O, smoothstep(30./R.y,0., line(F,A,B) - .02 * d*4. )  *d*2. );\n            //*hue(d) \n    } }\n    \n\n    if ( iMouse.z>0. && min(F.x,F.y)<20./R.y ) O.b++;  // click to see grid\n    //O = sqrt(O);\n}","name":"Image","description":"","type":"image"}]}