{"ver":"0.1","info":{"id":"3d3BDX","date":"1606700781","viewed":54,"name":"DESENHANDO FUNÇÕES","username":"Paulo_Silva","description":"DESENHANDO FUNÇÕES","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["desenhandofunes"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n*** DESENHANDO FUNÇÕES ***\n\nUma função é representada por:\nf(x) = y\n\nOu seja, são pontos da função aqueles que satisfazem a expressão:\nf(x) - y = 0\n\nPontos não tem dimensão, então usamos um conjunto maior de pontos que atenda a expressão:\n-t < f(x) - y < t\n\nonde t é a \"espessura\" do conjunto.\n\nEssa expressão também pode ser escrita como:\nabs(f(x) - y) < t\n\nPodemos também usar a função smoothstep para exibir uma função suave nas bordas. Ex:\npixel = vec3(smoothstep(0.0, 1.0, abs(fun - y) / 1.0/t))\n\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy / iResolution.xy);\n    uv *= 2.0;\n    uv -= 1.0;\n\t\n\tvec3 pixel = vec3(1.0);\n\t\n\tfloat x = uv.x;\n\tfloat y = uv.y;\n\n    float fun1 = cos(x * 5.0);\n    float fun2 = pow(x, 2.0);\n    float t = 0.01;\n    \n    vec3 plot1 = (abs(fun1 - y) < t) ? vec3(0.0): vec3(1.0); \n    vec3 plot2 = vec3(smoothstep(0.0, 1.0, abs(fun2 - y) / 1.0/t));\n    \n    pixel = plot1 * plot2;\n\t\n\tfragColor = vec4(pixel, 1.0);\n}","name":"Image","description":"","type":"image"}]}