{"ver":"0.1","info":{"id":"fll3R8","date":"1621531575","viewed":98,"name":"Goldenbulb","username":"ad_lucem","description":"Just another mandelbulb for learning, I didn't managed to remove aliasing yet ! :$","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["mandelbulb","gold"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dX3zn","filepath":"/media/a/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png","previewfilepath":"/media/ap/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"int I = 0;\nconst int NI = 200;\nconst float M = 100.;\nconst float EPS = .002;\n\n#define PI 3.14159\n\n#if HW_PERFORMANCE==0\n#define AA 1\n#else\n#define AA 2  // make AA 1 for slow machines or 3 for fast machines\n\n#endif\n\n#define ZERO (min(iFrame,0))\n\nmat3 cam(vec3 cO, vec3 t, float r)\n{\n    vec3 w = normalize(t - cO);\n    vec3 up = vec3(sin(r),cos(r), 0.0);\n    vec3 u = normalize(cross(up,w));\n    vec3 v = normalize(cross(w,u));\n    return mat3(u,v,w);\n}\n\nmat3 rotY(float a)\n{ \n    float c = cos(a); float s = sin(a); \n    return mat3(c, 0, s, 0, 1, 0, -s, 0, c);\n}\n\nfloat bulb(vec3 p)\n{\n    float t = atan(p.y, p.x);\n    float a = atan(p.z, sqrt(p.x*p.x + p.y*p.y));\n    float r = length(p);\n    float q = 10.; \n    \n    float d = r;\n    vec3 g;\n    float Rq; \n    \n    for(;I < NI; I++)\n    {\n        Rq = pow(r,q);\n       \n        g.x = Rq*sin(q*a)*cos(q*t) + p.x;\n        g.y = Rq*sin(q*a)*sin(q*t) + p.y;\n        g.z = Rq*cos(q*a) + p.z;\n        \n        if(length(g) > M)\n        {\n            break;\n        }\n        \n        t = atan(g.x,g.y);\n        a = atan(g.z, sqrt(g.x*g.x + g.y*g.y));\n        r = length(g);\n        d += (q*Rq*d+1.);\n    }\n    \n    return r*log(r)/d;\n}\n\nfloat map(vec3 p)\n{\n    p*=rotY(iTime*0.1);\n    return bulb(p);\n}\n\nvec3 norm(in vec3 p)\n{\n    vec2 e = vec2(EPS, 0.);\n    return normalize(vec3(map(p + e.xyy) - map(p - e.xyy), \n                          map(p + e.yxy) - map(p - e.yxy), \n                          map(p + e.yyx) - map(p - e.yyx)));\n}\n\nfloat rm(vec3 ro, vec3 rd, float tmin, float tmax)\n{\n    float d = tmin;\n    float ds = 0.;\n    for(; d <= tmax; d+=ds)\n    {\n        vec3 p = ro + rd * d;\n        ds = map(p);\n        if(ds < EPS)break;\n    }\n    return d;\n}\n\nvec3 shade(vec3 p, vec3 n, vec3 v)\n{\n    const vec3 lD = -normalize(vec3(.1, .32, .80));\n    const vec3 lC = vec3(5.0);\n   \n    vec3 h = normalize(v+lD);\n    \n    float ri = float(I)/float(NI);\n\n    vec3 cD = vec3(0.773, 0.522*(1.-ri), 0.286);\n    vec3 cS = vec3(1.000, 0.937, 0.800);\n    vec3 fO = mix( vec3(0.04), vec3(1.0, 0.86, 0.57), 1.-ri); \n     \n    float kD = max(0.001, dot(n, lD));\n    float kH = max(0.0, dot(n, h));\n    float kHV = clamp(max(0.0, dot(v, h)), 0.0, 1.0);\n    float kV = max(0.001, dot(n, v));\n       \n    vec3 F = fO + (1.-fO) * pow(1.-abs(kHV), 5.);\n    float a = ri * ri;\n    float s = (kH * a - kH) * kH + 1.0;\n\tfloat D = a / (PI * s * s);\n    float attL = 2.0 * kD / (kD + sqrt(a + (1.0 - a) * (kD * kD)));\n\tfloat attV = 2.0 * kV / (kV + sqrt(a + (1.0 - a) * (kV * kV)));\n\tfloat G = attL * attV;\n    vec3 b = F * D * G / (4. * kD * kV);\n    cD = (1.0-F)* (1.0/PI)*cD;\n    \n    // Ra\n    vec3 refl = -normalize(reflect(v, n));\n\tvec3 dA = cD * pow(texture(iChannel0, n).rgb, vec3(2.2));\n    vec3 sA = F * pow(textureLod(iChannel0, refl, ri*11.).rgb, vec3(2.2));\n    vec3 cA = dA + sA;\n    \n    return cA  + lC * kD * ( cD + cS * b);\n}\n\nvec3 draw(vec3 cO, mat3 mCam, vec2 U)\n{\n    const float fov = 2.2;\n    vec2 uv = (2. * U - iResolution.xy) / iResolution.y;\n    vec3 cD = normalize(mCam * vec3(uv, fov));\n\n    float tmin = 0.1;\n    float tmax = 10.;\n    float d = rm(cO, cD, tmin, tmax);\n    \n    vec3 col = vec3(0);\n    \n    if(d >= tmax){return texture(iChannel0, cD).rgb;}\n    \n    float r = float(I)/float(NI);\n   \n    vec3 p = cO + cD * d;\n    vec3 n = norm(p);\n    vec3 l = normalize(vec3(0, -1, 1));\n    float NdotL = max(0.,dot(n, -l));\n    col = shade(p, n, cD) * (1.- r * 0.85);\n    \n    return col;\n}\n\nvoid mainImage( out vec4 O, in vec2 U )\n{\n    float a = PI * 0.5 + 1.95 * PI * (2. * -iMouse.x - iResolution.x ) / iResolution.x;\n    vec3 cO = vec3(cos(a), 0.0, sin(a)) * -3.;\n    vec3 t = vec3(0.0, .02, 0.0);\n    mat3 mCam = cam(cO, t, 0.0);\n    \n    #if AA<2\n\tvec3 col = draw( cO, mCam, U);\n    #else\n    vec3 col = vec3(0.0);\n    for( int j=ZERO; j<AA; j++ )\n    for( int i=ZERO; i<AA; i++ )\n    {\n\t    col += draw( cO, mCam, U + (vec2(i,j)/float(AA)));\n    }\n\tcol /= float(AA*AA);\n    #endif\n    \n    O.rgb = col;\n}","name":"Image","description":"","type":"image"}]}