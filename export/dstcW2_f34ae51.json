{"ver":"0.1","info":{"id":"dstcW2","date":"1695571525","viewed":29,"name":"T1test","username":"TestCoder","description":"T1test","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["t1test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// http://dev.thi.ng/gradients/\n// [[1.088 0.460 0.568]\n//  [-0.402 -0.417 0.775] \n//  [-1.592 -2.830 1.458]\n//  [-2.713 -3.013 -4.273]]\n\nvec3 palette(float t) {\n    vec3 a = vec3(2.088, 0.460, 0.568);\n    vec3 b = vec3(-0.402, -0.017, 0.775);\n    vec3 c = vec3(-1.192, -2.830, 1.058);\n    vec3 d = vec3(-2.713, -3.013, -4.273);\n\n    return a + b * cos(6.28318 * (c*t+d));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec2 uvOriginal = uv;\n    vec3 finalColor = vec3(0.);\n    float speed = .01;\n    float thickness = 5.;\n    float zoom = 10.;\n    \n    for (float i = 0.; i < 7.; i++) {\n        uv = fract(uv * (1. + sin(3. * .1) / 2.)) - .5;\n\n        float d = length(uv) * exp(-length(uvOriginal));\n\n        // Time varying pixel color\n        vec3 color = palette(\n            length(uvOriginal) + i*.1 + iTime * speed\n        );\n\n        d -= .5;\n        d = sin(d * zoom + -iTime) / thickness;\n        d = abs(d);\n        d = smoothstep(0., .1, d);\n        d = pow(.1 / d, 1.9);\n\n        finalColor += color * d;\n    }\n    \n    // Output to screen\n    fragColor = vec4(finalColor,1.0);\n}","name":"Image","description":"","type":"image"}]}