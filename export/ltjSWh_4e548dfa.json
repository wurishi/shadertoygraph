{"ver":"0.1","info":{"id":"ltjSWh","date":"1443547350","viewed":314,"name":"RiverPath","username":"dila","description":"Inspired by http://michaelfaber.deviantart.com/art/Fool-s-Road-34398361","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["raymarch","lights"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4dX3zn","filepath":"/media/a/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png","previewfilepath":"/media/ap/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png","type":"cubemap","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"const float pi = 3.14159;\n\nmat3 xrot(float t)\n{\n    return mat3(1.0, 0.0, 0.0,\n                0.0, cos(t), -sin(t),\n                0.0, sin(t), cos(t));\n}\n\nmat3 yrot(float t)\n{\n    return mat3(cos(t), 0.0, -sin(t),\n                0.0, 1.0, 0.0,\n                sin(t), 0.0, cos(t));\n}\n\nmat3 zrot(float t)\n{\n    return mat3(cos(t), -sin(t), 0.0,\n                sin(t), cos(t), 0.0,\n                0.0, 0.0, 1.0);\n}\n\n\nvec3 _texture(vec3 p)\n{\n \tvec3 ta = texture(iChannel0, p.yz).xyz;\n    vec3 tb = texture(iChannel0, p.xz).xyz;\n    vec3 tc = texture(iChannel0, p.xy).xyz;\n    return (ta + tb + tc) / 3.0;\n}\n\nvec2 map(vec3 p)\n{\n    vec3 bmpv = _texture(p * 0.1);\n    float bmp = dot(bmpv, vec3(1.0)) / 3.0 * 2.0 - 1.0;\n    \n\tfloat d = 1000.0;\n    \n    float m = 0.0;\n    const int it = 5;\n    for (int i = 0; i < it; ++i) {\n        float n = float(i);\n        float nn = float(i+1);\n        \n        vec3 q = p;\n        \n        float nf = n / float(it - 1);\n        nf = 1.0 + pow(0.1 + nf, 8.0);\n        \n        q.y += sin(q.x * 0.5 * n * nf);\n        q.y /= 16.0;\n        q.z /= 3.0;\n        \n        float r = pow(2.0, -n);\n        float rr = pow(2.0, -nn);\n\n        q.z -= 1.0 - r - bmp * 0.1;\n\n    \tfloat k = length(q.yz) - rr;\n        \n        if (k < d) {\n            m = n / float(it - 1);\n            d = k;\n        }\n    }\n    \n    float s = -p.z;\n    \n    d = max(-d, s);\n    \n    return vec2(d, m);\n}\n\nvec3 normal(vec3 p)\n{\n\tvec3 o = vec3(0.001, 0.0, 0.0);\n    return normalize(vec3(map(p+o.xyy).x - map(p-o.xyy).x,\n                          map(p+o.yxy).x - map(p-o.yxy).x,\n                          map(p+o.yyx).x - map(p-o.yyx).x));\n}\n\nfloat trace(vec3 o, vec3 r)\n{\n \tfloat t = 0.0;\n    for (int i = 0; i < 64; ++i) {\n        vec3 p = o + r * t;\n        float d = map(p).x;\n        t += d * 0.9;\n    }\n    return t;\n}\n\nfloat light(vec3 p, vec3 sn, vec3 l)\n{\n    vec3 d = l - p;\n    float ld = length(d);\n    d /= ld;\n    float lv = max(dot(d, sn), 0.0);\n    return lv / clamp(0.0 + dot(ld, ld) * 0.01, 0.0, 1.0);\n}\n\nfloat st(vec3 o, vec3 r, vec3 k)\n{\n \tfloat t = 0.0;\n    for (int i = 0; i < 16; ++i) {\n        vec3 p = o + r * t;\n        t += (length(p-k) - 0.05) * 0.8;\n    }\n    return t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 r = normalize(vec3(uv, 1.0 + dot(uv,uv) * 0.05));\n    vec3 o = vec3(iTime, 0.0, -5.0);\n    \n    float t = trace(o, r);\n    vec3 w = o + r * t;\n    vec3 sn = normal(w);\n    vec2 fd = map(w);\n    \n    float prod = max(dot(r, -sn), 0.0);\n    \n    float fog = 1.0 / (1.0 + t * t * 0.1 + fd.x * 100.0);\n    \n    float lt = 0.0;\n    float sp = 5.0;\n    vec3 fwx = vec3(-1.0*sp, 0.0, 1.0*sp) + floor(w.x/sp+0.5)*sp;\n    vec3 yof = sin(fwx) * 0.0;\n    vec3 zof = cos(fwx) * 1.0;\n    \n    vec3 lofa = vec3(1.0,0.0,0.0) * zrot(iTime + fwx.x);\n    vec3 lofb = vec3(1.0,0.0,0.0) * zrot(iTime + fwx.y);\n    vec3 lofc = vec3(1.0,0.0,0.0) * zrot(iTime + fwx.z);\n    \n    vec3 lita = vec3(fwx.x, yof.x, zof.x) + lofa;\n    lt += light(w, sn, lita);\n    vec3 litb = vec3(fwx.y, yof.y, zof.y) + lofb;\n    lt += light(w, sn, litb);\n    vec3 litc = vec3(fwx.z, yof.z, zof.z) + lofc;\n    lt += light(w, sn, litc);\n    lt /= 3.0;\n    vec3 lc = vec3(lt) * vec3(1.0, 1.0, 1.0);\n    \n    float ld = st(o, r, lita);\n    ld = min(ld, st(o, r, litb));\n    ld = min(ld, st(o, r, litc));\n    float lf = 1.0 / (1.0 + ld * ld * 0.001);\n    \n    vec3 ref = reflect(sn, r);\n    vec3 ctex = texture(iChannel1, ref).xyz;\n    \n    float lp = pow(clamp(0.3 + fd.y, 0.0, 1.0), 4.0);\n\tvec3 gc = mix(lc, ctex*vec3(0.0, 1.0, 1.0)*8.0, lp);\n    \n    vec3 tex = _texture(w * 0.1);\n    \n    vec3 fc = fog * tex * gc * prod;\n    \n    fc = mix(fc, lc, lf);\n    \n\tfragColor = vec4(sqrt(fc), 1.0);\n}\n","name":"Image","description":"","type":"image"}]}