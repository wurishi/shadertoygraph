{"ver":"0.1","info":{"id":"MtBGWR","date":"1427987203","viewed":692,"name":"Difference Color Key","username":"erwin94","description":"Simple difference color keyer, similar to keylight. Afterwards some slight despilling.\n\nv1.1: a little refactoring to make it more reusable. also added fancy colors to the background :)","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["live","despill","keying","footage"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xdf3zn","filepath":"/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","previewfilepath":"/media/ap/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"float saturation(vec4 col, float rw, float bw)\n{\n    return col.g - (col.r*rw+col.b*bw);\n}\n\nvec4 key_green(vec4 color, vec4 reference_color, float red_weight, float blue_weight)\n{\n    float col_sat = saturation(color, red_weight, blue_weight);\n    float ref_sat = saturation(reference_color, red_weight, blue_weight);\n    float key = (1.0-clamp(col_sat / ref_sat, 0.0, 1.0))*color.a;\n    // subtract green\n    vec4 result = clamp(color-reference_color*(1.0-key), 0.0, 1.0);\n    result.a = key;\n    // despill\n    result.g = min(result.g, 0.5*result.r+0.5*result.b);\n    return result;\n}\n\nvec4 over(vec4 bg, vec4 fg)\n{\n    return fg + bg * (1.0-fg.a);\n}\n\nfloat clamp_uv(vec2 uv)\n{\n    return float((uv.x > 0.0 && uv.x < 1.0) && (uv.y > 0.0 && uv.y < 1.0));\n}\n\nvec4 hue_shift(vec4 col)\n{\n    float t = 0.5+0.5*sin(5.0*iTime);\n    float r = col.r;\n    col.r = t*col.b;\n    col.b = (1.-t)*r;\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 uv2 = uv;\n    uv2.x = uv2.x*1.333 - .1666;\n    \n    vec4 in0 = texture(iChannel0, uv2)*clamp_uv(uv2);\n    //in0 = hue_shift(in0);\n    in0 = in0.rrrr;\n\n    vec4 in1 = texture(iChannel1, uv2)*clamp_uv(uv2);\n    in1 = key_green(in1, vec4(0.25,.55,.15,1), 0.6, 0.6) * vec4(0.95, 1.1, 1.6, 1.0);\n\n    vec4 in2 = texture(iChannel2, uv);\n    in2 = key_green(in2, vec4(0.05,.65,.16,1), 0.5, 0.6) * vec4(1., 0.85, 0.85, 1.0);\n\n    fragColor = over(over(in0, in1), in2);\n}\n","name":"Image","description":"","type":"image"}]}