{"ver":"0.1","info":{"id":"lf33Wl","date":"1712244247","viewed":100,"name":"sdf to mesh demo","username":"0x177","description":"a demo for my sdf to mesh project i made because modeling with sdfs feels a lot more natural to me. github: https://github.com/0x177/sdf-to-mesh","likes":1,"published":1,"flags":0,"usePreview":1,"tags":["raymarching","sdf","mesh"],"hasliked":0,"parentid":"l3XGRl","parentname":"raymarching startingpoint"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 250.\n#define SURF_DIST .001\n#define TAU 6.283185\n#define PI 3.141592\n\nconst float globalAmbient = 0.4; // how strong is the ambient lightning\nconst float globalDiffuse = 1.0; // how strong is the diffuse lightning\nconst float globalSpecular = 1.0; // how strong is the specular lightning\nconst float globalSpecularExponent = 64.0; // how focused is the shiny spot\nconst vec3 lightPos = vec3(0.0, 1.0, -0.5); // position of the light source\nconst vec3 lightColor = vec3(0.9, 0.9, 0.68); // color of the light source\nconst vec3 ambientColor = vec3(1.0, 1.0, 1.0); // ambient color\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\nfloat dot2( in vec3 v ) { return dot(v,v); }\nfloat triangle( in vec3 v1, in vec3 v2, in vec3 v3, in vec3 p )\n{\n    vec3 v21 = v2 - v1; vec3 p1 = p - v1;\n    vec3 v32 = v3 - v2; vec3 p2 = p - v2;\n    vec3 v13 = v1 - v3; vec3 p3 = p - v3;\n    vec3 nor = cross( v21, v13 );\n\n    return sqrt( (sign(dot(cross(v21,nor),p1)) + \n                  sign(dot(cross(v32,nor),p2)) + \n                  sign(dot(cross(v13,nor),p3))<2.0) \n                  ?\n                  min( min( \n                  dot2(v21*clamp(dot(v21,p1)/dot2(v21),0.0,1.0)-p1), \n                  dot2(v32*clamp(dot(v32,p2)/dot2(v32),0.0,1.0)-p2) ), \n                  dot2(v13*clamp(dot(v13,p3)/dot2(v13),0.0,1.0)-p3) )\n                  :\n                  dot(nor,p1)*dot(nor,p1)/dot2(nor) );\n}\n// horrible topology. i can fix it in blender, but i wont\nconst vec3 vertices[624] = vec3[624](\nvec3(2.5,0.5,2.75), \nvec3(2.25,0.5,3), \nvec3(2.5,0.25,3), \nvec3(2.5,0.25,3), \nvec3(2.25,0.5,3), \nvec3(2.5,0.5,3.25), \nvec3(2.5,1,2.25), \nvec3(2.25,1,2.5), \nvec3(2.5,0.75,2.5), \nvec3(2.5,0.75,2.5), \nvec3(2.25,0.5,3), \nvec3(2.5,0.5,2.75), \nvec3(2.5,0.75,2.5), \nvec3(2.25,1,2.5), \nvec3(2.25,0.5,3), \nvec3(2.25,1,2.5), \nvec3(2.25,1,3), \nvec3(2.25,0.5,3), \nvec3(2.5,0.5,3.25), \nvec3(2.25,1,3.5), \nvec3(2.5,0.75,3.5), \nvec3(2.5,0.5,3.25), \nvec3(2.25,0.5,3), \nvec3(2.25,1,3.5), \nvec3(2.25,0.5,3), \nvec3(2.25,1,3), \nvec3(2.25,1,3.5), \nvec3(2.5,0.75,3.5), \nvec3(2.25,1,3.5), \nvec3(2.5,1,3.75), \nvec3(2.5,1,2.25), \nvec3(2.5,1.25,2.5), \nvec3(2.25,1,2.5), \nvec3(2.5,1.5,2.75), \nvec3(2.25,1,2.5), \nvec3(2.5,1.25,2.5), \nvec3(2.5,1.5,2.75), \nvec3(2.25,1.5,3), \nvec3(2.25,1,2.5), \nvec3(2.25,1.5,3), \nvec3(2.25,1,3), \nvec3(2.25,1,2.5), \nvec3(2.5,1.25,3.5), \nvec3(2.25,1.5,3), \nvec3(2.5,1.5,3.25), \nvec3(2.5,1.25,3.5), \nvec3(2.25,1,3.5), \nvec3(2.25,1.5,3), \nvec3(2.25,1,3.5), \nvec3(2.25,1,3), \nvec3(2.25,1.5,3), \nvec3(2.25,1,3.5), \nvec3(2.5,1.25,3.5), \nvec3(2.5,1,3.75), \nvec3(2.5,1.5,2.75), \nvec3(2.5,1.75,3), \nvec3(2.25,1.5,3), \nvec3(2.25,1.5,3), \nvec3(2.5,1.75,3), \nvec3(2.5,1.5,3.25), \nvec3(2.5,2.5,2.25), \nvec3(2.25,2.5,2.5), \nvec3(2.5,2.25,2.5), \nvec3(2.5,2.25,2.5), \nvec3(2.25,2.5,3), \nvec3(2.5,2.25,3), \nvec3(2.25,2.5,2.5), \nvec3(2.25,2.5,3), \nvec3(2.5,2.25,2.5), \nvec3(2.5,2.25,3), \nvec3(2.25,2.5,3.5), \nvec3(2.5,2.25,3.5), \nvec3(2.25,2.5,3), \nvec3(2.25,2.5,3.5), \nvec3(2.5,2.25,3), \nvec3(2.5,2.25,3.5), \nvec3(2.25,2.5,3.5), \nvec3(2.5,2.5,3.75), \nvec3(2.5,3,2.25), \nvec3(2.25,2.5,2.5), \nvec3(2.5,2.5,2.25), \nvec3(2.25,3,2.5), \nvec3(2.25,2.5,2.5), \nvec3(2.5,3,2.25), \nvec3(2.25,2.5,2.5), \nvec3(2.25,3,2.5), \nvec3(2.25,2.5,3), \nvec3(2.25,2.5,3), \nvec3(2.25,3,2.5), \nvec3(2.25,3,3), \nvec3(2.25,2.5,3), \nvec3(2.25,3,3), \nvec3(2.25,2.5,3.5), \nvec3(2.25,2.5,3.5), \nvec3(2.25,3,3), \nvec3(2.25,3,3.5), \nvec3(2.5,2.5,3.75), \nvec3(2.25,3,3.5), \nvec3(2.5,3,3.75), \nvec3(2.25,2.5,3.5), \nvec3(2.25,3,3.5), \nvec3(2.5,2.5,3.75), \nvec3(2.5,3.5,2.25), \nvec3(2.25,3,2.5), \nvec3(2.5,3,2.25), \nvec3(2.25,3.5,2.5), \nvec3(2.25,3,2.5), \nvec3(2.5,3.5,2.25), \nvec3(2.25,3,2.5), \nvec3(2.25,3.5,2.5), \nvec3(2.25,3,3), \nvec3(2.25,3,3), \nvec3(2.25,3.5,2.5), \nvec3(2.25,3.5,3), \nvec3(2.25,3,3), \nvec3(2.25,3.5,3), \nvec3(2.25,3,3.5), \nvec3(2.25,3,3.5), \nvec3(2.25,3.5,3), \nvec3(2.25,3.5,3.5), \nvec3(2.5,3,3.75), \nvec3(2.25,3.5,3.5), \nvec3(2.5,3.5,3.75), \nvec3(2.25,3,3.5), \nvec3(2.25,3.5,3.5), \nvec3(2.5,3,3.75), \nvec3(2.5,3.5,2.25), \nvec3(2.5,3.75,2.5), \nvec3(2.25,3.5,2.5), \nvec3(2.25,3.5,2.5), \nvec3(2.5,3.75,3), \nvec3(2.25,3.5,3), \nvec3(2.5,3.75,2.5), \nvec3(2.5,3.75,3), \nvec3(2.25,3.5,2.5), \nvec3(2.25,3.5,3), \nvec3(2.5,3.75,3.5), \nvec3(2.25,3.5,3.5), \nvec3(2.5,3.75,3), \nvec3(2.5,3.75,3.5), \nvec3(2.25,3.5,3), \nvec3(2.25,3.5,3.5), \nvec3(2.5,3.75,3.5), \nvec3(2.5,3.5,3.75), \nvec3(3,0.5,2.25), \nvec3(2.75,0.5,2.5), \nvec3(3,0.25,2.5), \nvec3(2.5,0.5,2.75), \nvec3(3,0.25,2.5), \nvec3(2.75,0.5,2.5), \nvec3(2.5,0.5,2.75), \nvec3(2.5,0.25,3), \nvec3(3,0.25,2.5), \nvec3(2.5,0.25,3), \nvec3(3,0.25,3), \nvec3(3,0.25,2.5), \nvec3(2.75,0.5,3.5), \nvec3(2.5,0.25,3), \nvec3(2.5,0.5,3.25), \nvec3(2.75,0.5,3.5), \nvec3(3,0.25,3.5), \nvec3(2.5,0.25,3), \nvec3(3,0.25,3.5), \nvec3(3,0.25,3), \nvec3(2.5,0.25,3), \nvec3(3,0.25,3.5), \nvec3(2.75,0.5,3.5), \nvec3(3,0.5,3.75), \nvec3(2.75,0.5,2.5), \nvec3(2.5,1,2.25), \nvec3(2.5,0.75,2.5), \nvec3(2.75,0.5,2.5), \nvec3(3,0.5,2.25), \nvec3(2.5,1,2.25), \nvec3(3,0.5,2.25), \nvec3(3,1,2.25), \nvec3(2.5,1,2.25), \nvec3(2.75,0.5,2.5), \nvec3(2.5,0.75,2.5), \nvec3(2.5,0.5,2.75), \nvec3(2.75,0.5,3.5), \nvec3(2.5,0.5,3.25), \nvec3(2.5,0.75,3.5), \nvec3(2.5,0.75,3.5), \nvec3(3,0.5,3.75), \nvec3(2.75,0.5,3.5), \nvec3(2.5,0.75,3.5), \nvec3(2.5,1,3.75), \nvec3(3,0.5,3.75), \nvec3(2.5,1,3.75), \nvec3(3,1,3.75), \nvec3(3,0.5,3.75), \nvec3(2.5,1.25,2.5), \nvec3(3,1.5,2.25), \nvec3(2.75,1.5,2.5), \nvec3(2.5,1.25,2.5), \nvec3(2.5,1,2.25), \nvec3(3,1.5,2.25), \nvec3(2.5,1,2.25), \nvec3(3,1,2.25), \nvec3(3,1.5,2.25), \nvec3(2.5,1.25,2.5), \nvec3(2.75,1.5,2.5), \nvec3(2.5,1.5,2.75), \nvec3(2.5,1.25,3.5), \nvec3(2.5,1.5,3.25), \nvec3(2.75,1.5,3.5), \nvec3(2.75,1.5,3.5), \nvec3(2.5,1,3.75), \nvec3(2.5,1.25,3.5), \nvec3(2.75,1.5,3.5), \nvec3(3,1.5,3.75), \nvec3(2.5,1,3.75), \nvec3(3,1.5,3.75), \nvec3(3,1,3.75), \nvec3(2.5,1,3.75), \nvec3(3,1.5,2.25), \nvec3(3,1.75,2.5), \nvec3(2.75,1.5,2.5), \nvec3(2.75,1.5,2.5), \nvec3(2.5,1.75,3), \nvec3(2.5,1.5,2.75), \nvec3(2.75,1.5,2.5), \nvec3(3,1.75,2.5), \nvec3(2.5,1.75,3), \nvec3(3,1.75,2.5), \nvec3(3,1.75,3), \nvec3(2.5,1.75,3), \nvec3(2.5,1.5,3.25), \nvec3(3,1.75,3.5), \nvec3(2.75,1.5,3.5), \nvec3(2.5,1.5,3.25), \nvec3(2.5,1.75,3), \nvec3(3,1.75,3.5), \nvec3(2.5,1.75,3), \nvec3(3,1.75,3), \nvec3(3,1.75,3.5), \nvec3(2.75,1.5,3.5), \nvec3(3,1.75,3.5), \nvec3(3,1.5,3.75), \nvec3(2.5,2.5,2.25), \nvec3(3,2.25,2.5), \nvec3(3,2.5,2.25), \nvec3(2.5,2.25,2.5), \nvec3(3,2.25,2.5), \nvec3(2.5,2.5,2.25), \nvec3(3,2.25,2.5), \nvec3(2.5,2.25,2.5), \nvec3(3,2.25,3), \nvec3(2.5,2.25,2.5), \nvec3(2.5,2.25,3), \nvec3(3,2.25,3), \nvec3(3,2.25,3), \nvec3(2.5,2.25,3), \nvec3(3,2.25,3.5), \nvec3(2.5,2.25,3), \nvec3(2.5,2.25,3.5), \nvec3(3,2.25,3.5), \nvec3(2.5,2.25,3.5), \nvec3(3,2.5,3.75), \nvec3(3,2.25,3.5), \nvec3(2.5,2.5,3.75), \nvec3(3,2.5,3.75), \nvec3(2.5,2.25,3.5), \nvec3(3,2.5,2.25), \nvec3(3,3,2.25), \nvec3(2.5,2.5,2.25), \nvec3(3,3,2.25), \nvec3(2.5,3,2.25), \nvec3(2.5,2.5,2.25), \nvec3(3,2.5,3.75), \nvec3(2.5,2.5,3.75), \nvec3(3,3,3.75), \nvec3(3,3,3.75), \nvec3(2.5,2.5,3.75), \nvec3(2.5,3,3.75), \nvec3(3,3,2.25), \nvec3(3,3.5,2.25), \nvec3(2.5,3,2.25), \nvec3(3,3.5,2.25), \nvec3(2.5,3.5,2.25), \nvec3(2.5,3,2.25), \nvec3(3,3,3.75), \nvec3(2.5,3,3.75), \nvec3(3,3.5,3.75), \nvec3(3,3.5,3.75), \nvec3(2.5,3,3.75), \nvec3(2.5,3.5,3.75), \nvec3(3,3.5,2.25), \nvec3(2.5,3.75,2.5), \nvec3(2.5,3.5,2.25), \nvec3(3,3.75,2.5), \nvec3(2.5,3.75,2.5), \nvec3(3,3.5,2.25), \nvec3(3,3.75,2.5), \nvec3(3,3.75,3), \nvec3(2.5,3.75,2.5), \nvec3(2.5,3.75,2.5), \nvec3(3,3.75,3), \nvec3(2.5,3.75,3), \nvec3(3,3.75,3), \nvec3(3,3.75,3.5), \nvec3(2.5,3.75,3), \nvec3(2.5,3.75,3), \nvec3(3,3.75,3.5), \nvec3(2.5,3.75,3.5), \nvec3(3,3.75,3.5), \nvec3(2.5,3.5,3.75), \nvec3(2.5,3.75,3.5), \nvec3(3,3.5,3.75), \nvec3(2.5,3.5,3.75), \nvec3(3,3.75,3.5), \nvec3(3,0.25,2.5), \nvec3(3.25,0.5,2.5), \nvec3(3,0.5,2.25), \nvec3(3.25,0.5,2.5), \nvec3(3.5,0.25,3), \nvec3(3.5,0.5,2.75), \nvec3(3.25,0.5,2.5), \nvec3(3,0.25,2.5), \nvec3(3.5,0.25,3), \nvec3(3,0.25,2.5), \nvec3(3,0.25,3), \nvec3(3.5,0.25,3), \nvec3(3.5,0.5,3.25), \nvec3(3,0.25,3.5), \nvec3(3.25,0.5,3.5), \nvec3(3.5,0.5,3.25), \nvec3(3.5,0.25,3), \nvec3(3,0.25,3.5), \nvec3(3.5,0.25,3), \nvec3(3,0.25,3), \nvec3(3,0.25,3.5), \nvec3(3,0.25,3.5), \nvec3(3,0.5,3.75), \nvec3(3.25,0.5,3.5), \nvec3(3.5,0.75,2.5), \nvec3(3,0.5,2.25), \nvec3(3.25,0.5,2.5), \nvec3(3.5,0.75,2.5), \nvec3(3.5,1,2.25), \nvec3(3,0.5,2.25), \nvec3(3.5,1,2.25), \nvec3(3,1,2.25), \nvec3(3,0.5,2.25), \nvec3(3.25,0.5,2.5), \nvec3(3.5,0.5,2.75), \nvec3(3.5,0.75,2.5), \nvec3(3.5,0.5,3.25), \nvec3(3.25,0.5,3.5), \nvec3(3.5,0.75,3.5), \nvec3(3.25,0.5,3.5), \nvec3(3.5,1,3.75), \nvec3(3.5,0.75,3.5), \nvec3(3.25,0.5,3.5), \nvec3(3,0.5,3.75), \nvec3(3.5,1,3.75), \nvec3(3,0.5,3.75), \nvec3(3,1,3.75), \nvec3(3.5,1,3.75), \nvec3(3.25,1.5,2.5), \nvec3(3.5,1,2.25), \nvec3(3.5,1.25,2.5), \nvec3(3.25,1.5,2.5), \nvec3(3,1.5,2.25), \nvec3(3.5,1,2.25), \nvec3(3,1.5,2.25), \nvec3(3,1,2.25), \nvec3(3.5,1,2.25), \nvec3(3.5,1.25,2.5), \nvec3(3.5,1.5,2.75), \nvec3(3.25,1.5,2.5), \nvec3(3.5,1.5,3.25), \nvec3(3.5,1.25,3.5), \nvec3(3.25,1.5,3.5), \nvec3(3.5,1.25,3.5), \nvec3(3,1.5,3.75), \nvec3(3.25,1.5,3.5), \nvec3(3.5,1.25,3.5), \nvec3(3.5,1,3.75), \nvec3(3,1.5,3.75), \nvec3(3.5,1,3.75), \nvec3(3,1,3.75), \nvec3(3,1.5,3.75), \nvec3(3.25,1.5,2.5), \nvec3(3,1.75,2.5), \nvec3(3,1.5,2.25), \nvec3(3.5,1.5,2.75), \nvec3(3,1.75,2.5), \nvec3(3.25,1.5,2.5), \nvec3(3.5,1.5,2.75), \nvec3(3.5,1.75,3), \nvec3(3,1.75,2.5), \nvec3(3.5,1.75,3), \nvec3(3,1.75,3), \nvec3(3,1.75,2.5), \nvec3(3.25,1.5,3.5), \nvec3(3.5,1.75,3), \nvec3(3.5,1.5,3.25), \nvec3(3.25,1.5,3.5), \nvec3(3,1.75,3.5), \nvec3(3.5,1.75,3), \nvec3(3,1.75,3.5), \nvec3(3,1.75,3), \nvec3(3.5,1.75,3), \nvec3(3.25,1.5,3.5), \nvec3(3,1.5,3.75), \nvec3(3,1.75,3.5), \nvec3(3,2.5,2.25), \nvec3(3.5,2.25,2.5), \nvec3(3.5,2.5,2.25), \nvec3(3,2.25,2.5), \nvec3(3.5,2.25,2.5), \nvec3(3,2.5,2.25), \nvec3(3.5,2.25,2.5), \nvec3(3,2.25,2.5), \nvec3(3.5,2.25,3), \nvec3(3,2.25,2.5), \nvec3(3,2.25,3), \nvec3(3.5,2.25,3), \nvec3(3.5,2.25,3), \nvec3(3,2.25,3), \nvec3(3.5,2.25,3.5), \nvec3(3,2.25,3), \nvec3(3,2.25,3.5), \nvec3(3.5,2.25,3.5), \nvec3(3,2.25,3.5), \nvec3(3.5,2.5,3.75), \nvec3(3.5,2.25,3.5), \nvec3(3,2.5,3.75), \nvec3(3.5,2.5,3.75), \nvec3(3,2.25,3.5), \nvec3(3.5,2.5,2.25), \nvec3(3.5,3,2.25), \nvec3(3,2.5,2.25), \nvec3(3.5,3,2.25), \nvec3(3,3,2.25), \nvec3(3,2.5,2.25), \nvec3(3.5,2.5,3.75), \nvec3(3,2.5,3.75), \nvec3(3.5,3,3.75), \nvec3(3.5,3,3.75), \nvec3(3,2.5,3.75), \nvec3(3,3,3.75), \nvec3(3.5,3,2.25), \nvec3(3.5,3.5,2.25), \nvec3(3,3,2.25), \nvec3(3.5,3.5,2.25), \nvec3(3,3.5,2.25), \nvec3(3,3,2.25), \nvec3(3.5,3,3.75), \nvec3(3,3,3.75), \nvec3(3.5,3.5,3.75), \nvec3(3.5,3.5,3.75), \nvec3(3,3,3.75), \nvec3(3,3.5,3.75), \nvec3(3.5,3.5,2.25), \nvec3(3,3.75,2.5), \nvec3(3,3.5,2.25), \nvec3(3.5,3.75,2.5), \nvec3(3,3.75,2.5), \nvec3(3.5,3.5,2.25), \nvec3(3.5,3.75,2.5), \nvec3(3.5,3.75,3), \nvec3(3,3.75,2.5), \nvec3(3,3.75,2.5), \nvec3(3.5,3.75,3), \nvec3(3,3.75,3), \nvec3(3.5,3.75,3), \nvec3(3.5,3.75,3.5), \nvec3(3,3.75,3), \nvec3(3,3.75,3), \nvec3(3.5,3.75,3.5), \nvec3(3,3.75,3.5), \nvec3(3.5,3.75,3.5), \nvec3(3,3.5,3.75), \nvec3(3,3.75,3.5), \nvec3(3.5,3.5,3.75), \nvec3(3,3.5,3.75), \nvec3(3.5,3.75,3.5), \nvec3(3.5,0.25,3), \nvec3(3.75,0.5,3), \nvec3(3.5,0.5,2.75), \nvec3(3.5,0.25,3), \nvec3(3.5,0.5,3.25), \nvec3(3.75,0.5,3), \nvec3(3.5,0.75,2.5), \nvec3(3.75,1,2.5), \nvec3(3.5,1,2.25), \nvec3(3.5,0.5,2.75), \nvec3(3.75,1,2.5), \nvec3(3.5,0.75,2.5), \nvec3(3.5,0.5,2.75), \nvec3(3.75,0.5,3), \nvec3(3.75,1,2.5), \nvec3(3.75,0.5,3), \nvec3(3.75,1,3), \nvec3(3.75,1,2.5), \nvec3(3.5,0.75,3.5), \nvec3(3.75,0.5,3), \nvec3(3.5,0.5,3.25), \nvec3(3.5,0.75,3.5), \nvec3(3.75,1,3.5), \nvec3(3.75,0.5,3), \nvec3(3.75,1,3.5), \nvec3(3.75,1,3), \nvec3(3.75,0.5,3), \nvec3(3.5,0.75,3.5), \nvec3(3.5,1,3.75), \nvec3(3.75,1,3.5), \nvec3(3.75,1,2.5), \nvec3(3.5,1.25,2.5), \nvec3(3.5,1,2.25), \nvec3(3.5,1.25,2.5), \nvec3(3.75,1.5,3), \nvec3(3.5,1.5,2.75), \nvec3(3.5,1.25,2.5), \nvec3(3.75,1,2.5), \nvec3(3.75,1.5,3), \nvec3(3.75,1,2.5), \nvec3(3.75,1,3), \nvec3(3.75,1.5,3), \nvec3(3.5,1.5,3.25), \nvec3(3.75,1,3.5), \nvec3(3.5,1.25,3.5), \nvec3(3.5,1.5,3.25), \nvec3(3.75,1.5,3), \nvec3(3.75,1,3.5), \nvec3(3.75,1.5,3), \nvec3(3.75,1,3), \nvec3(3.75,1,3.5), \nvec3(3.75,1,3.5), \nvec3(3.5,1,3.75), \nvec3(3.5,1.25,3.5), \nvec3(3.75,1.5,3), \nvec3(3.5,1.75,3), \nvec3(3.5,1.5,2.75), \nvec3(3.75,1.5,3), \nvec3(3.5,1.5,3.25), \nvec3(3.5,1.75,3), \nvec3(3.5,2.25,2.5), \nvec3(3.75,2.5,2.5), \nvec3(3.5,2.5,2.25), \nvec3(3.5,2.25,3), \nvec3(3.75,2.5,2.5), \nvec3(3.5,2.25,2.5), \nvec3(3.75,2.5,3), \nvec3(3.75,2.5,2.5), \nvec3(3.5,2.25,3), \nvec3(3.5,2.25,3.5), \nvec3(3.75,2.5,3), \nvec3(3.5,2.25,3), \nvec3(3.75,2.5,3.5), \nvec3(3.75,2.5,3), \nvec3(3.5,2.25,3.5), \nvec3(3.5,2.25,3.5), \nvec3(3.5,2.5,3.75), \nvec3(3.75,2.5,3.5), \nvec3(3.75,3,2.5), \nvec3(3.5,2.5,2.25), \nvec3(3.75,2.5,2.5), \nvec3(3.5,3,2.25), \nvec3(3.5,2.5,2.25), \nvec3(3.75,3,2.5), \nvec3(3.75,2.5,2.5), \nvec3(3.75,2.5,3), \nvec3(3.75,3,2.5), \nvec3(3.75,2.5,3), \nvec3(3.75,3,3), \nvec3(3.75,3,2.5), \nvec3(3.75,2.5,3), \nvec3(3.75,2.5,3.5), \nvec3(3.75,3,3), \nvec3(3.75,2.5,3.5), \nvec3(3.75,3,3.5), \nvec3(3.75,3,3), \nvec3(3.75,2.5,3.5), \nvec3(3.5,3,3.75), \nvec3(3.75,3,3.5), \nvec3(3.5,2.5,3.75), \nvec3(3.5,3,3.75), \nvec3(3.75,2.5,3.5), \nvec3(3.75,3.5,2.5), \nvec3(3.5,3,2.25), \nvec3(3.75,3,2.5), \nvec3(3.5,3.5,2.25), \nvec3(3.5,3,2.25), \nvec3(3.75,3.5,2.5), \nvec3(3.75,3,2.5), \nvec3(3.75,3,3), \nvec3(3.75,3.5,2.5), \nvec3(3.75,3,3), \nvec3(3.75,3.5,3), \nvec3(3.75,3.5,2.5), \nvec3(3.75,3,3), \nvec3(3.75,3,3.5), \nvec3(3.75,3.5,3), \nvec3(3.75,3,3.5), \nvec3(3.75,3.5,3.5), \nvec3(3.75,3.5,3), \nvec3(3.75,3,3.5), \nvec3(3.5,3.5,3.75), \nvec3(3.75,3.5,3.5), \nvec3(3.5,3,3.75), \nvec3(3.5,3.5,3.75), \nvec3(3.75,3,3.5), \nvec3(3.75,3.5,2.5), \nvec3(3.5,3.75,2.5), \nvec3(3.5,3.5,2.25), \nvec3(3.75,3.5,3), \nvec3(3.5,3.75,2.5), \nvec3(3.75,3.5,2.5), \nvec3(3.5,3.75,3), \nvec3(3.5,3.75,2.5), \nvec3(3.75,3.5,3), \nvec3(3.75,3.5,3.5), \nvec3(3.5,3.75,3), \nvec3(3.75,3.5,3), \nvec3(3.5,3.75,3.5), \nvec3(3.5,3.75,3), \nvec3(3.75,3.5,3.5), \nvec3(3.75,3.5,3.5), \nvec3(3.5,3.5,3.75), \nvec3(3.5,3.75,3.5)\n);\n\nfloat vmax(vec3 x) {\n    return max(x.x,max(x.y,x.z));\n}\n\nfloat box(vec3 p, vec3 b) { //cheap box\n\treturn vmax(abs(p) - b);\n}\n\nvec2 GetDist(vec3 p) {    \n    float d = 999.0;\n    float mat = 0.0;\n    \n    float bound = box(p-vec3(2.0,1.3,2.0),vec3(1.0,1.5,1.0));\n    \n    if (bound < 0.7) {\n    for (int i = 0; i<vertices.length();i += 3) {\n        d = min(d,triangle(vertices[i+0],vertices[i+1],vertices[i+2],p+vec3(1.0))-0.1);\n    }\n    } else {\n        d = min(d,bound);\n    }\n    \n    float sphere = length(p-vec3(0.0,0.0,0.0))-1.0;\n    \n    float cub = box(p-vec3(0.0,2.0,0.0),vec3(0.7));\n    \n    d = min(d,cub);\n    \n    d = min(d,sphere);\n        \n    return vec2(d,mat);\n}\n\nvec2 RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    float mat;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        vec2 dS = GetDist(p);\n        dO += dS.x;\n        mat = dS.y;\n        \n        if(dO>MAX_DIST || abs(dS.x)<SURF_DIST) break;\n    }\n    \n    return vec2(dO,mat);\n}\n\nvec3 GetNormal(vec3 p) {\n    vec2 e = vec2(.001, 0);\n    vec3 n = GetDist(p).x - \n        vec3(GetDist(p-e.xyy).x, GetDist(p-e.yxy).x,GetDist(p-e.yyx).x);\n    \n    return normalize(n);\n}\n\nfloat ambientOcclusion(vec3 p, vec3 n){\n    const int steps = 1;\n    const float delta = 0.5;\n\n    float a = 0.0;\n    float weight = 0.75;\n    float m;\n    for(int i=1; i<=steps; i++) {\n        float d = (float(i) / float(steps)) * delta;\n        a += weight*(d - GetDist(p + n*d).x);\n        weight *= 0.5;\n    }\n    return clamp(1.0 - a, 0.0, 1.0);\n}\n\n  vec3 blinn_phong(  vec3 position,\n                           vec3 lightPosition,\n                           vec3 ambientCol,\n                           vec3 lightCol,\n                           float ambientCoeff,\n                           float diffuseCoeff,\n                           float specularCoeff,\n                           float specularExponent,\n                           vec3 camera_pos\n)\n{\n      vec3 normal = GetNormal(position);\n      vec3 toEye = normalize(camera_pos - position);\n      vec3 toLight = normalize(lightPosition - position);\n      vec3 reflection = reflect(-toLight, normal);\n\n      vec3 ambientFactor = ambientCol * ambientCoeff;\n      vec3 diffuseFactor = diffuseCoeff * lightCol * max(0.0, dot(normal, toLight));\n      vec3 specularFactor = lightCol * pow(max(0.0, dot(toEye, reflection)), specularExponent)\n                     * specularCoeff;\n\n    return ambientFactor + diffuseFactor + specularFactor;\n}\n\nfloat softshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<100; i++ )\n    {\n\t\tfloat h = GetDist( ro + rd*t ).x;\n        res = min( res, 8.0*h/t );\n        t += h*.25;\n        if( h<0.001 || t>tmax ) break;\n    }\n    return clamp( res, 0.1, 1. );\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 \n        f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u;\n    return normalize(i);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n\n    vec3 ro = vec3(0, 3, -3);\n    ro.yz *= Rot(-m.y*PI+1.);\n    ro.xz *= Rot(-m.x*TAU);\n    \n    vec3 rd = GetRayDir(uv, ro, vec3(0,0.,0), 0.5);\n    vec3 bg = mix(vec3(1.,0.557,0.561),vec3(1.,0.992,0.796),rd.y);\n    vec3 col = bg;\n   \n    vec2 rm = RayMarch(ro, rd);\n    float d = rm.x;\n\n    if(d<MAX_DIST) {\n        vec3 p = ro + rd * d;\n        vec3 n = GetNormal(p);\n        if (rm.y == 0.0) {\n            col = vec3(0.882,0.471,0.773);\n        } else {\n            col = vec3(1.,0.557,0.561);\n        }\n        col *= blinn_phong(p,lightPos,ambientColor,lightColor,globalAmbient,globalDiffuse,globalSpecular,globalSpecularExponent,ro);\n        col *= ambientOcclusion(p+n*0.1,n);\n        col *= softshadow(p,lightPos,0.1,50.);\n        col = mix(col,bg,1.0 - exp(-0.0004*d*d));\n        col *= 1.3;\n    }\n    \n    col = pow(col, vec3(.4545));\t// gamma correction\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec4 someFunction( vec4 a, float b )\n{\n    return a+b;\n}","name":"Common","description":"","type":"common"}]}