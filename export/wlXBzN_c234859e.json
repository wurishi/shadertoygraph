{"ver":"0.1","info":{"id":"wlXBzN","date":"1596155253","viewed":123,"name":"fun fractals sounds","username":"Numero7","description":"Here I generate sound by moving the redpoint around the mandelbrotset.\nThe point coordinate is set in the getcoord function.\nCurrently it does a perfect cycloid around the mandelbrot.\nThe mandelbrotset function return the last calculated z value.\n","likes":3,"published":1,"flags":8,"usePreview":0,"tags":["fractals"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.x;\n    uv *= 0.1;\n    //uv -= vec2(0.5, 0.0);\n    \n    vec2 pointPos = getcoord(iTime);\n    \n    uv += pointPos * 1.0;\n    \n    vec2 fr = mendelbrotset(uv, vec2(0.0), 100);\n    \n    \n    \n    vec3 col = squareColor(fr);\n    \n    float pointSize = 0.001;\n    float inPoint = smoothstep(pointSize, pointSize * 0.5, length(pointPos - uv));\n    col = lerp3(1.0 - exp(-0.05 * col), vec3(1.0, 0.0, 0.0), inPoint);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec2 mainSound( in int samp, float time )\n{\n    vec2 pointPos = getcoord(time);\n    \n    vec2 m = mendelbrotset(pointPos, vec2(0.0), 100);\n    \n    return vec2(m) * 0.5;\n}","name":"Sound","description":"","type":"sound"},{"inputs":[],"outputs":[],"code":"// Calculate complex multiplication\nvec2 multComplex(vec2 a, vec2 b) {\n    return vec2 (a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);\n}\n\n// Interpolate between two vec3\nvec3 lerp3(vec3 a, vec3 b, float t) {\n    return (1.0 - t) * a + b * t;\n}\n\n// Interpolate between two values\nfloat lerp(float a, float b, float t) {\n    return (1.0 - t) * a + b * t;\n}\n\n// Calculate Mandel Brot Set\nvec2 mendelbrotset(vec2 c, vec2 startZ, int iterations) {\n    vec2 z = vec2(startZ);\n    \n    int i;\n    for (i = 0; i < iterations; i++) {\n        z = multComplex(z, z) + c;\n        if (length(z) > 2.0) {\n            break;\n        }\n    }\n    \n    return z;\n}\n\n\n// Get coord of sound point.\nvec2 getcoord(float time) {\n    \n    float angle = time * 0.1;\n    float k = 0.01;\n    float r = (cos(angle) + 1.0) * (0.5 + k);\n\treturn vec2(-cos(angle) * r + 0.25 + k * 1.5, sin(angle) * r);\n}\n\n\n// some functions for decoration\n\nvec3 spline(vec3 a, vec3 b, vec3 c, vec3 d, float t) {\n    vec3 x1 = lerp3(a, b, t);\n    vec3 x2 = lerp3(b, c, t);\n    vec3 x3 = lerp3(c, d, t);\n    \n    vec3 y1 = lerp3(x1, x2, t);\n    vec3 y2 = lerp3(x2, x3, t);\n    \n    return lerp3(y1, y2, t);\n}\n\nvec3 squareColor(vec2 uv) {\n    float k = length(uv);\n    \n    vec3 r = vec3(1.0, 0.0, 0.0);\n    vec3 g = vec3(0.0, 1.0, 0.0);\n    vec3 b = vec3(0.0, 0.0, 1.0);\n    vec3 w = vec3(1.0);\n    \n    \n    return lerp3(vec3(0.0), spline(r, g, b, w, k), pow(k, 0.2));\n}\n\n","name":"Common","description":"","type":"common"}]}