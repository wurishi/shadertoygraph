{"ver":"0.1","info":{"id":"NscfDl","date":"1657410981","viewed":162,"name":"Int Marcher 3, Strange World","username":"TrueBoolean","description":"Quick fractal flyby using integer math and minimal typecasting. I've also made this one fully resolution independent by picking a fixed, scaled resolution, as such variable SIZE is no longer needed.\nThis might only work with 2's complement ints.","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarching","fractal","tunnel","fast","raymarcher","xor","int","integer","bitwise","and","or"],"hasliked":0,"parentid":"slXfWN","parentname":"Integer Raymarcher 2, Walls Maze"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*NOTICE! There was a macbook in which this shader did not work correctly, and appeared as a flashing screen!\nIf it looks weird try it on a different browser or device.\n\nSo, if you appear to be stuck inside the wall, the hardware/implementation can't run it.*/\n#define ITER 512\nvoid mainImage(out vec4 FCOL, in vec2 FPT){\n    \n    //Initial float-to-int typecasting\n    ivec2 PT = ivec2(((FPT+FPT-iResolution.xy)/min(iResolution.x, iResolution.y))*256.);\n    ivec2 look = ivec2(int(sin(iTime)*8000.),int(sin(iTime/5.)*5000.)-6500);\n    int scroll = int(iTime*256.)/3;\n    //No typecasting from float-to-int allowed beyond this point, particularly inside the loop\n     \n    ivec2 sum = look;\n    ivec2 ray;\n    int z;\n    for(z = scroll; z < ITER+scroll; ++z){\n        sum += PT;\n        \n        \n        ray = sum/256;\n        \n        \n        //if((abs(ray.x)|-abs(ray.y)^z)%(abs(ray.y)|z) > (abs(ray.x)^-abs(ray.y))+64) //Sierpinski triangles\n        if(abs(ray.y) > 0 && (abs(ray.x)|-abs(ray.y)^z)%494 > (abs(ray.x)^-abs(ray.y))+64)\n            break;      \n    }\n    int c = abs(ray.x)^ray.y^z;\n    ivec3 COL = ivec3(c&127, c&63, c&255);\n    COL -= (z-ITER-scroll)>>1;\n    if(z == ITER+scroll)\n        COL = ivec3(0);\n    \n    //Final reverse typecast to vector color, from int-to-float\n    FCOL = vec4(vec3(COL)/float(ITER), 1.);\n}","name":"Image","description":"","type":"image"}]}