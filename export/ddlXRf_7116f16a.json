{"ver":"0.1","info":{"id":"ddlXRf","date":"1669358595","viewed":116,"name":"secondhud","username":"Del","description":"hud - https://www.twitch.tv/videos/1662202941","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["star","blend","hud"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Simple loopless Star/Timer HUD - https://www.twitch.tv/videos/1662202941\n\n#define PI 3.141519\n#define TAU 6.283185\n\nvec2 rot(vec2 v, float angle)\n{\n    float c = cos(angle);\n    float s = sin(angle);\n    return mat2(c, -s, s, c)*v;\n}\n\n// mercury sdf\n// Repeat around the origin by a fixed angle.\n// For easier use, num of repetitions is use to specify the angle.\nfloat pModPolar(inout vec2 p, float repetitions)\n{\n\tfloat angle = (2.0*PI/repetitions);\n\tfloat a = atan(p.x, p.y) + angle/2.; // Y,X\n\tfloat r = length(p);\n\tfloat c = floor(a/angle);\n\ta = mod(a,angle) - angle/2.;\n\tp = vec2(cos(a), sin(a))*r;\n\t// For an odd number of repetitions, fix cell index of the cell in -x direction\n\t// (cell index would be e.g. -5 and 5 in the two halves of the cell):\n\tif (abs(c) >= (repetitions/2.0)) c = abs(c);\n\treturn c;\n}\n\nfloat SDstar5(in vec2 p, in float r)\n{\n    // these 4 lines can be precomputed for a given shape\n    const float an = 3.141593/5.0; // 5sides\n    const float en = 3.141593/3.0; // angle\n    const vec2  acs = vec2(cos(an),sin(an));\n    const vec2  ecs = vec2(cos(en),sin(en)); // ecs=vec2(0,1) and simplify, for regular polygon,\n\n    // reduce to first sector\n    float bn = mod(atan(p.x,p.y),2.0*an) - an;\n    p = length(p)*vec2(cos(bn),abs(sin(bn)));\n\n    // line sdf\n    p -= r*acs;\n    p += ecs*clamp( -dot(p,ecs), 0.0, r*acs.y/ecs.y);\n    return length(p)*sign(p.x);\n}\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\n// powerups, shown as stars\nvec4 GetStars(in vec2 p, float fill)\n{\n    float totalstars = 3.0;\n    fill*=(totalstars+1.0);\n   \n    vec3 col1 = vec3(0.2,0.85,0.2);    // green //vec3 col1 = vec3(0.8,0.8,0.1);    // yellow\n    vec3 col2 = vec3(0.2,0.2,0.2);    // grey\n    float c = pModPolar(p,totalstars)+(totalstars*0.5);\n    float ang = (c*(-TAU/totalstars))+(PI*0.5);\n    float fade = clamp(fill-c,0.0,1.0);\n    float rad = mix(0.1,0.165,fade);\n    ang = mix(ang,ang-(TAU/5.0),fade);\n    // render star\n    p = rot(p+vec2(-0.225,0.0),ang);\n    float d = SDstar5(p,rad);\n    float aa = 2./iResolution.y; // 0.005\n    float cc = smoothstep(aa,0.0,d);\n    return vec4(mix(col2*cc,col1*cc,fade),cc);\n}\n\n// shield timer, shown has segments\nvec4 GetShield(in vec2 p,float fill)\n{\n    float totalsegs = 60.0;\n    fill *= (totalsegs+1.0);\n\n    vec3 col1 = vec3(0.85,0.85,0.2);    // yellow\n    vec3 col1b = vec3(0.95,0.2,0.2);    // red\n    \n    float tt = clamp((16.0-fill)/8.0,0.0,1.0);\n    col1 = mix(col1,col1b,tt);\n    \n    vec3 col2 = vec3(0.2,0.2,0.2);    // grey\n    p=-p;\n    float c = pModPolar(p,totalsegs)+(totalsegs*0.5);\n    float fade = clamp(fill-c,0.0,1.0);\n    float height = mix(0.01,0.02,fade);\n    // render box\n    float d = sdBox(p-vec2(0.425+(height),0.0),vec2(height,0.015));\n    float aa = 2./iResolution.y; // 0.005\n    \n    float cc = smoothstep(aa,0.0,d);\n    return vec4(mix(col2*cc,col1*cc,fade),cc);\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (fragCoord.xy - 0.5 * iResolution.xy) / iResolution.y;\n    \n    // fill amount (stars)\n    float t = iTime;\n    float fill = (0.5+sin(t)*0.5);\n    vec4 col1 = GetStars(p,fill);\n    // fill amount (shield)\n    float fill2 = (0.5+sin(t*0.2)*0.5);\n    vec4 col2 = GetShield(p,fill2);\n    \n    col1.rgb = mix(col1.rgb,col2.rgb,col2.a);\n    \n    fragColor = vec4(col1.rgb, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}