{"ver":"0.1","info":{"id":"mdjBRV","date":"1689917483","viewed":64,"name":"Swimming in Quicksilver","username":"antonideli","description":"Inspiration taken from Silexars https://www.shadertoy.com/view/XsXXDn\nMy attempt to dissect and study his algorithm to understand what is going on.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["radial","learning","silver"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Inspiration taken from Silexars https://www.shadertoy.com/view/XsXXDn\n// My attempt to disect and study his algorithm to understand what is going on.\n\n// Plots a something on the screen\n// st = the coordinates on the plane that needs to be plotted\n// pct = \nfloat plot(vec2 st, float pct)\n{\n    return smoothstep(pct - 0.02, pct, st.y) -\n    smoothstep(pct, pct + 0.02, st.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Color is stored as a vec3 as rgb\n    vec3 color;\n    float l, z = iTime;\n    vec2 aspectRatio = iResolution.xy/iResolution.y;\n\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 normalizedCoord = fragCoord/iResolution.xy;\n\n    // itterate over each color to create the same pattern. Is responsible for the 'silvery' look\n    for(int i = 0; i<3; i++)\n    {\n      z += 0.04; // Offset of the pattern\n\n      // generated oscillating value between -1. and 1.\n      float g = sin(z / 4.);\n\n      // Multiply by aspect ratio to negate screen size stretching\n      // Add g to move the center of the screen from corner to corner\n      // Each of these patterns is not very exciting on it's own\n      vec2 pattern1 = normalizedCoord + g * aspectRatio;\n      vec2 pattern2 = normalizedCoord - g * aspectRatio;\n      l = length(pattern2);\n      \n      // But combined...also dividing by l creates some interesting variations\n      vec2 patternCombo = pattern1 + pattern2 / l; \n      // uv *= sin(z) + 1.;\n      \n      // This is responsible for the waves, but I don't understand the details yet.\n      patternCombo *= abs(sin(l * (g * 10.) -z -z));\n         \n      \n      // The calculations here adjust the contrast of the points and help make distict shapes\n      // interestingly, the .5 seems to be a golden number. Higher or lower creates sharper image\n      color[i] = length(mod(patternCombo, 1.));\n    }\n\n\n    // Output to screen\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}