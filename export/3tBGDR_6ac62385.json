{"ver":"0.1","info":{"id":"3tBGDR","date":"1558988599","viewed":704,"name":"LKG Hybrid Ortho/Perspective","username":"kainino","description":"This is an experimental \"hybrid orthographic/perspective\" projection, meant to achieve more accurate results on Looking Glass displays.\n\nBlack=Orthographic, Green=Hybrid, Yellow=Perspective (pause to stop flipping)","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["glass","looking","lightfield","lookingglass","lkg"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// This is an experimental \"hybrid orthographic/perspective\" projection,\n// meant to achieve more accurate results on Looking Glass displays.\n//\n// Looking Glass hardware has inherent parallax in the horizontal direction,\n// which means a single eye viewing the display actually sees multiple\n// different viewing angles (different quilt tiles) on different parts of\n// the screen. Because of this, the projection should be orthographic in X\n// (i.e. the rays cast for each quilt tile should be parallel for constant Y).\n//\n// It does not have any parallax in the vertical direction, so, like on a\n// flat display, it must be emulated using a perspective projection in Y\n// (i.e. rays diverge from a point, the eye position).\n//\n// Unfortunately such a \"hybrid\" projection is impossible to represent with\n// a 4x4 projection matrix, as it is non-projective. However, it is fairly\n// straightforward to do so with raycasting!\n//\n// If the shader is playing, it flips between the following to illustrate\n// the enhancement. (Edit the \"Common\" tab to change this.)\n// - Black:  Each view uses orthographic projection (correct in X, wrong in Y).\n// - Green:  Each view uses hybrid projection (correct in X and Y).\n// - Yellow: Each view uses pespective projection (wrong in X, correct in Y).\n// This shader flips between a hybrid (green box) and per-view perspective\n// projection (black box), to illustrate the \"enhancement.\"\n// (Edit the \"Common\" tab to experiment with other variants.)\n\n// ------------------------------------------------------------------------\n\n// ***** Looking Glass Calibration Variables *****\n// (Note: definitions of \"pitch\" and \"slope\" differ from the display's JSON.)\n// Paste this bookmarklet into your browser's URL bar to set these values\n// for your display (make sure the \"javscript:\" is at the front):\n//\n// javascript:{var s=document.createElement(\"script\");s.src=\"https://zalo.github.io/Holopladertoy/bookmarklet.js\",document.body.appendChild(s);};void(0);\n\nconst float pitch  =  354.67413017487405;\nconst float slope  = -0.11423463699615337;\nconst float center =  -0.43532609939575195;\nconst float invView = 0.0;\n\n// ------------------------------------------------------------------------\n\n// 1 to render tiled quilt, 0 to render for LKG\n#define RENDER_AS_QUILT 0\n// There are a few more configuration knobs in other tabs.\n\n// ------------------------------------------------------------------------\n\n// Helper for quilt\nvec2 texArr(vec3 uvz) {\n    float z = floor(uvz.z * numViews);\n    float x = (mod(z, quiltSize.x) + uvz.x) / quiltSize.x;\n    float y = (floor(z / quiltSize.x) + uvz.y) / quiltSize.y;\n    return vec2(x, y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Width of a subpixel\n    float subp = 1.0 / (iResolution.x * 3.0);\n\n#if RENDER_AS_QUILT\n    fragColor = textureLod(iChannel0, fragCoord / iResolution.xy, 0.);\n#else\n    vec3 rgb;\n    vec2 uv = fragCoord / iResolution.xy;\n    for (int chan = 0; chan < 3; ++chan) {\n        float z = (uv.x + float(chan) * subp + uv.y * slope) * pitch - center;\n        z = mod(z + ceil(abs(z)), 1.0);\n        z = (1.0 - invView) * z + invView * (1.0 - z);\n        \n        vec2 iuv = texArr(vec3(uv, z));\n        rgb[chan] = textureLod(iChannel0, iuv, 0.)[chan];\n    }\n    fragColor = vec4(rgb, 1.0);\n#endif\n\n    if (fragCoord.x < 60.0 && fragCoord.y < 60.0) {\n        fragColor = vec4(\n            float(USE_PERSPECTIVE_X),\n            float(USE_PERSPECTIVE_Y), 0, 1);\n    }\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Render 49 views in a 7x7 quilt.\n// We do this instead of the common squareish 5x9 quilt, because we don't\n// control the resolution of the intermediate buffer - it is always the\n// same as the screen (instead of e.g. 4096x4096).\nconst vec2 quiltSize = vec2(7., 7.);\n\n// ------------------------------------------------------------------------\n\nconst float numViews = quiltSize.x * quiltSize.y;\n\n#define TMOD (mod(iTime, 10.0))\n\n// Set whether to display orthographic, hybrid, or perspective.\n#define USE_PERSPECTIVE_X (TMOD >= 3.0 && TMOD < 5.0)\n#define USE_PERSPECTIVE_Y (TMOD < 8.0)\n// TMOD -> 012 34 567 89 (seconds)\n//    X -> 000 11 000 00\n//    Y -> 111 11 111 00\n//         ^^^    ^^^hybrid\n//             ^^perspective\n//                    ^^ortho","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// View configuration\n\n// Estimate of the optimal eye distance as a multiple of the display height.\n// - Looking Glass 8.9\"     (7.6x4.7in) * 4.0 => eye distance 18.8in\n// - Looking Glass Portrait (4.7x6.3in) * 4.0 => eye distance 25.2in\nconst float optimalEyeDistanceOverDisplayHeight = 4.0;\n\n\n// Horizontal viewing angle range (\"cone\") of the display.\n// 40 degrees is the viewing cone of the Looking Glass 8.9\".\n// This cone gets divided evenly into `views` views.\nconst float viewCone = 0.698131701; // 40 deg in rad\n\n// ------------------------------------------------------------------------\n\n// Custom stuff (sorry for lack of comments)\n\nconst float tanHalfFovYIfPersp = 0.5 / optimalEyeDistanceOverDisplayHeight;\n\nvec3 fcToU_V_TanAngle(in vec2 fragCoord) {\n    vec2 tilePlusUV = fragCoord / iResolution.xy * quiltSize;\n    vec2 tile = floor(tilePlusUV);\n    vec2 uv = mod(tilePlusUV, 1.0);\n    float view = tile.y * quiltSize.x + tile.x;\n    float angle = (float(view) / numViews * 2.0 - 1.0) * viewCone;\n    return vec3(uv * 2.0 - 1.0, tan(angle));\n}\n\nvoid fcToLocalRay(in vec2 fragCoord,\n                  in float midToNearPlaneDistLocal,\n                  out vec3 origin, out vec3 direction) {\n    float tanHalfFovXIfPersp = tanHalfFovYIfPersp / iResolution.y * iResolution.x;\n    \n    vec3 uvt = fcToU_V_TanAngle(fragCoord);\n    vec3 rayTgt = vec3(uvt.x, uvt.y * iResolution.y / iResolution.x, 0.0);\n    direction = vec3(\n        (USE_PERSPECTIVE_X ? uvt.x * tanHalfFovXIfPersp : 0.0) + uvt.z,\n        (USE_PERSPECTIVE_Y ? uvt.y * tanHalfFovYIfPersp : 0.0),\n        1.0);\n    origin = rayTgt - direction * midToNearPlaneDistLocal;\n}\n\nvoid fcToWorldRay(in vec2 fragCoord,\n                  in float midPlaneHalfWidth, in float midToNearPlaneDist,\n                  in vec3 lookTgt, in mat3 lookRot,\n                  out vec3 origin, out vec3 direction) {\n    vec3 ro, rd;\n    fcToLocalRay(fragCoord, midToNearPlaneDist / midPlaneHalfWidth, ro, rd);\n    origin = lookTgt + lookRot * (midPlaneHalfWidth * ro);\n    direction = normalize(lookRot * rd);\n}\n\n// ======================================================\n// Rest is based on https://www.shadertoy.com/view/ltyXD3\n// ======================================================\n\n/*\nTaking IQ's https://www.shadertoy.com/view/Xds3zN and commenting it extensively to make it easier to learn from.\n*/\n\n// Created by inigo quilez - iq/2013\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// A list of usefull distance function to simple primitives, and an example on how to \n// do some interesting boolean operations, repetition and displacement.\n//\n// More info here: https://iquilezles.org/articles/distfunctions\n\n// Antialiasing: number of samples in x and y dimensions\n#define AA 1   // make this 1 if your machine is too slow\n\n//------------------------------------------------------------------\n// Distance functions\n//\n// Each function gives the distance from p to a primitive centered at the origin.\n// The position and orientation of the primitive is fixed. To simulate moving\n// the primitive, transform p in the opposite way.\n//\n// The s and u prefixes tell whether the result is signed or unsigned.\n// A signed function will return negative values for p inside the primitive;\n// an unsigned function will return 0.\n\n// Distance from p to plane (at y = 0)\nfloat sdPlane( vec3 p )\n{\n\treturn p.y;\n}\n\n// Distance from p to sphere of radius s (centered at origin)\nfloat sdSphere( vec3 p, float s )\n{\n    return length(p)-s;\n}\n\n// Distance from p to box whose half-dimensions are b.x, b.y, b.z\nfloat sdBox( vec3 p, vec3 b )\n{\n    vec3 d = abs(p) - b;\n    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\n// Distance from p to ellipsoid the length of whose semi-principal axes is r.x, r.y, r.z\nfloat sdEllipsoid( in vec3 p, in vec3 r )\n{\n    return (length( p/r ) - 1.0) * min(min(r.x,r.y),r.z);\n}\n\n// Distance from p to box of half-dimensions b.x,y,z plus buffer radius r\nfloat udRoundBox( vec3 p, vec3 b, float r )\n{\n    return length(max(abs(p)-b,0.0))-r;\n}\n\n// Distance from p to horizontal torus with major radius t.x and minor radius t.y\nfloat sdTorus( vec3 p, vec2 t )\n{\n    return length( vec2(length(p.xz)-t.x, p.y)) - t.y;\n}\n\nfloat sdHexPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n#if 0\n    return max(q.z-h.y,max((q.x*0.866025+q.y*0.5),q.y)-h.x);\n#else\n    float d1 = q.z-h.y;\n    float d2 = max((q.x*0.866025+q.y*0.5),q.y)-h.x;\n    return length(max(vec2(d1,d2),0.0)) + min(max(d1,d2), 0.);\n#endif\n}\n\n// Distance from p to cylinder of radius r with spherical ends centered at a and b.\n// This is a rare exception to the rule that all primitives are centered at the origin.\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n\tvec3 pa = p-a, ba = b-a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h ) - r;\n}\n\nfloat sdTriPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n#if 0\n    return max(q.z-h.y,max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5);\n#else\n    float d1 = q.z-h.y;\n    float d2 = max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5;\n    return length(max(vec2(d1,d2),0.0)) + min(max(d1,d2), 0.);\n#endif\n}\n\n// Distance from p to cylinder with radius h.x and half-length h.y.\nfloat sdCylinder( vec3 p, vec2 h )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n// Distance from p to a cone of height c.z whose vertex is at the origin\n// and is pointing up.\nfloat sdCone( in vec3 p, in vec3 c )\n{\n    vec2 q = vec2(length(p.xz), p.y );\n    float d1 = -q.y - c.z;\n    float d2 = max(dot(q,c.xy), q.y);\n    return length(max(vec2(d1,d2),0.0)) + min(max(d1,d2), 0.);\n}\n\nfloat sdConeSection( in vec3 p, in float h, in float r1, in float r2 )\n{\n    float d1 = -p.y - h;\n    float q = p.y - h;\n    float si = 0.5*(r1-r2)/h;\n    float d2 = max( sqrt( dot(p.xz,p.xz)*(1.0-si*si)) + q*si - r2, q );\n    return length(max(vec2(d1,d2),0.0)) + min(max(d1,d2), 0.);\n}\n\nfloat sdPryamid4(vec3 p, vec3 h ) // h = { cos a, sin a, height }\n{\n    // Tetrahedron = Octahedron - Cube\n    float box = sdBox( p - vec3(0,-2.0*h.z,0), vec3(2.0*h.z) );\n \n    float d = 0.0;\n    d = max( d, abs( dot(p, vec3( -h.x, h.y, 0 )) ));\n    d = max( d, abs( dot(p, vec3(  h.x, h.y, 0 )) ));\n    d = max( d, abs( dot(p, vec3(  0, h.y, h.x )) ));\n    d = max( d, abs( dot(p, vec3(  0, h.y,-h.x )) ));\n    float octa = d - h.z;\n    return max(-box,octa); // Subtraction\n }\n\n// Euclidean distance function (same as builtin length(p)?)\nfloat length2( vec2 p )\n{\n\treturn sqrt( p.x*p.x + p.y*p.y );\n}\n\n// Non-Euclidean distance function, so the sphere \"length6(p) = k\" is squarish.\nfloat length6( vec2 p )\n{\n\tp = p*p*p; p = p*p;\n\treturn pow( p.x + p.y, 1.0/6.0 );\n}\n\n// Non-Euclidean distance function, so the sphere \"length8(p) = k\" is more squarish.\nfloat length8( vec2 p )\n{\n\tp = p*p; p = p*p; p = p*p;\n\treturn pow( p.x + p.y, 1.0/8.0 );\n}\n\n// A torus with a squarish minor cross section, using non-Euclidean distance function.\nfloat sdTorus82( vec3 p, vec2 t )\n{\n    vec2 q = vec2(length2(p.xz)-t.x,p.y);\n    return length8(q)-t.y;\n}\n\n// A torus with squarish major and minor cross sections, using non-Euclidean distance function.\nfloat sdTorus88( vec3 p, vec2 t )\n{\n    vec2 q = vec2(length8(p.xz)-t.x,p.y);\n    return length8(q)-t.y;\n}\n\n// a cylinder with squarish horizontal cross-section, with radius h.x and half-length h.y.\nfloat sdCylinder6( vec3 p, vec2 h )\n{\n    return max( length6(p.xz)-h.x, abs(p.y)-h.y );\n}\n\n//------------------------------------------------------------------\n// CSG operations\n\n// subtract primitive 2 from primitive 1, where d1 is distance to primitive 1.\nfloat opS( float d1, float d2 )\n{\n    return max(-d2,d1);\n}\n\n// union primitives 1 and 2\n// d1 is a vec2 where .x is the distance, and .y is the color/material code.\nvec2 opU( vec2 d1, vec2 d2 )\n{\n\treturn (d1.x<d2.x) ? d1 : d2;\n}\n\n// intersection of two primitives\nfloat opI( float d1, float d2 )\n{\n    return max(d1, d2);\n}\n\n// Smooth minimum (polynomial smin())\n// See https://iquilezles.org/articles/smin\nfloat opBlend( float d1, float d2 ) {\n    const float k = 0.1;\n    float h = clamp( 0.5+0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h);\n}\n\n\n//------------------------------------------------------------------\n// Domain operations\n\n// Repetition over grid with spacing c.x, c.y, c.z\nvec3 opRep( vec3 p, vec3 c )\n{\n    return mod(p,c)-0.5*c;\n}\n\n// Domain deformation: transform the input point p before passing to distance function.\n\nvec3 opTwist( vec3 p )\n{\n    float  c = cos(10.0*p.y+10.0);\n    float  s = sin(10.0*p.y+10.0);\n    mat2   m = mat2(c,-s,s,c);\n    return vec3(m*p.xz,p.y);\n}\n\nvec3 opCheapBend( vec3 p )\n{\n    float c = cos(20.0 * p.y);\n    float s = sin(20.0 * p.y);\n    mat2  m = mat2(c,-s,s,c);\n    return vec3(m*p.xy,p.z);\n}\n\n\n//------------------------------------------------------------------\n// Return (x,y) where x is minimum distance from pos to objects in the scene, and\n// y is the material of the closest object.\nvec2 map( in vec3 pos )\n{\n    vec2 res = opU( vec2( sdPlane(     pos), 1.0 ),\n\t                vec2( sdSphere(    pos-vec3( 0.0,0.25, 0.0), 0.25 ), 46.9 ) );\n    res = opU( res, vec2( sdBox(       pos-vec3( 1.0,0.25, 0.0), vec3(0.25) ), 3.0 ) );\n    res = opU( res, vec2( udRoundBox(  pos-vec3( 1.0,0.25, 1.0), vec3(0.15), 0.1 ), 41.0 ) );\n\tres = opU( res, vec2( sdTorus(     pos-vec3( 0.0,0.25, 1.0), vec2(0.20,0.05) ), 25.0 ) );\n    res = opU( res, vec2( sdCapsule(   pos,vec3(-1.3,0.10,-0.1), vec3(-0.8,0.50,0.2), 0.1  ), 31.9 ) );\n\tres = opU( res, vec2( sdTriPrism(  pos-vec3(-1.0,0.25,-1.0), vec2(0.25,0.05) ),43.5 ) );\n\tres = opU( res, vec2( sdCylinder(  pos-vec3( 1.0,0.30,-1.0), vec2(0.1,0.2) ), 8.0 ) );\n\tres = opU( res, vec2( sdCone(      pos-vec3( 0.0,0.50,-1.0), vec3(0.8,0.6,0.3) ), 55.0 ) );\n\tres = opU( res, vec2( sdTorus82(   pos-vec3( 0.0,0.25, 2.0), vec2(0.20,0.05) ),50.0 ) );\n\tres = opU( res, vec2( sdTorus88(   pos-vec3(-1.0,0.25, 2.0), vec2(0.20,0.05) ),43.0 ) );\n\tres = opU( res, vec2( sdCylinder6( pos-vec3( 1.0,0.30, 2.0), vec2(0.1,0.2) ), 12.0 ) );\n\tres = opU( res, vec2( sdHexPrism(  pos-vec3(-1.0,0.20, 1.0), vec2(0.25,0.05) ),17.0 ) );\n\tres = opU( res, vec2( sdPryamid4(  pos-vec3(-1.0,0.15,-2.0), vec3(0.8,0.6,0.25) ),37.0 ) );\n    res = opU( res, vec2( opI( sdBox(    pos-vec3( 2.0,0.2, 1.0), vec3(0.20)),\n\t                           sdSphere( pos-vec3( 2.0,0.2, 1.0), 0.25)), 113.0 ) );\n    res = opU( res, vec2( opS( udRoundBox(  pos-vec3(-2.0,0.2, 1.0), vec3(0.15),0.05),\n\t                           sdSphere(    pos-vec3(-2.0,0.2, 1.0), 0.25)), 13.0 ) );\n    res = opU( res, vec2( opS( sdTorus82(  pos-vec3(-2.0,0.2, 0.0), vec2(0.20,0.1)),\n\t                           sdCylinder(  opRep( vec3(atan(pos.x+2.0,pos.z)/6.2831, pos.y, 0.02+0.5*length(pos-vec3(-2.0,0.2, 0.0))), vec3(0.05,1.0,0.05)), vec2(0.02,0.6))), 51.0 ) );\n    // distance deformation (knobbly sphere):\n\tres = opU( res, vec2( 0.5*sdSphere(    pos-vec3(-2.0,0.25,-1.0), 0.2 )\n                           + 0.03*sin(50.0*pos.x)*sin(50.0*pos.y)*sin(50.0*pos.z)\n                         , 65.0 ) );\n    \n\tres = opU( res, vec2( 0.5*sdTorus( opTwist(    pos-vec3(-2.0,0.25, 2.0)),vec2(0.20,0.05)), 46.7 ) );\n\tres = opU( res, vec2( 0.3*sdTorus( opCheapBend(pos-vec3( 2.0,0.25,-1.0)),vec2(0.20,0.05)), 46.7 ) );\n\n    res = opU( res, vec2( sdConeSection( pos-vec3( 0.0,0.35,-2.0), 0.15, 0.2, 0.1 ), 13.67 ) );\n    res = opU( res, vec2( sdEllipsoid( pos-vec3( 1.0,0.35,-2.0), vec3(0.15, 0.2, 0.05) ), 43.17 ) );\n    // scaled primitive:\n    const float scale = .4;\n    res = opU( res, vec2( sdSphere((pos - vec3(-2.0, 0.25, -2.0))/scale, 0.25)*scale, 70. ) );\n    \n    res = opU( res, vec2( opBlend( sdBox(      pos-vec3( 2.0,0.25, 0.0), vec3(.15,.05,.15) ),\n                                   sdCylinder( pos-vec3( 2.0,0.25, 0.0), vec2(0.04,0.2))), 75. ) );\n    return res;\n}\n\n// Cast a ray from origin ro in direction rd until it hits an object.\n// Return (t,m) where t is distance traveled along the ray, and m\n// is the material of the object hit.\nvec2 castRay( in vec3 ro, in vec3 rd )\n{\n    float tmin = 1.0;\n    float tmax = 20.0;\n   \n#if 1\n    // bounding volume\n    float tp1 = (0.0-ro.y)/rd.y; if( tp1>0.0 ) tmax = min( tmax, tp1 );\n    float tp2 = (1.6-ro.y)/rd.y; if( tp2>0.0 ) { if( ro.y>1.6 ) tmin = max( tmin, tp2 );\n                                                 else           tmax = min( tmax, tp2 ); }\n#endif\n    \n    float t = tmin;\n    float m = -1.0;\n    for( int i=0; i<64; i++ )\n    {\n\t    float precis = 0.0005*t;\n\t    vec2 res = map( ro+rd*t );\n        if( res.x<precis || t>tmax ) break;\n        t += res.x;\n\t    m = res.y;\n    }\n\n    if( t>tmax ) m=-1.0;\n    return vec2( t, m );\n}\n\n// Cast a shadow ray from origin ro (an object surface) in direction rd\n// to compute soft shadow in that direction. Returns a lower value\n// (darker shadow) when there is more stuff nearby as we step along the shadow ray.\nfloat softshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<16; i++ )\n    {\n\t\tfloat h = map( ro + rd*t ).x;\n        res = min( res, 8.0*h/t );\n        t += clamp( h, 0.02, 0.10 );\n        if( h<0.001 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\n// Compute normal vector to surface at pos, using central differences method?\nvec3 calcNormal( in vec3 pos )\n{\n    // epsilon = a small number\n    vec2 e = vec2(1.0,-1.0)*0.5773*0.0005;\n    \n    return normalize( e.xyy*map( pos + e.xyy ).x + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx ).x + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy ).x + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx ).x );\n    /*\n\tvec3 eps = vec3( 0.0005, 0.0, 0.0 );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n\t*/\n}\n\n// compute ambient occlusion value at given position/normal\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\n// Figure out color value when casting ray from origin ro in direction rd.\nvec3 render( in vec3 ro, in vec3 rd )\n{ \n    // background sky color gradient\n    vec3 col = vec3(0.7, 0.9, 1.0) +rd.y*0.8;\n    // cast ray to nearest object\n    vec2 res = castRay(ro,rd);\n    float t = res.x; // distance\n\tfloat m = res.y; // material code\n    if( m > -0.5 )\n    {\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal( pos );\n        vec3 ref = reflect( rd, nor ); // reflected ray\n        \n        // material        \n\t\tcol = 0.45 + 0.35*sin( vec3(0.05,0.08,0.10)*(m-1.0) );\n        if( m < 1.5 )\n        {\n            // gray checkerboard floor material\n            float f = mod( floor(5.0*pos.z) + floor(5.0*pos.x), 2.0);\n            col = 0.00 + 0.01*f*vec3(1.0);\n        }\n\n        // lighting        \n        float occ = calcAO( pos, nor ); // ambient occlusion\n\t\tvec3  lig = normalize( vec3(-0.4, 0.7, -0.6) ); // sunlight\n\t\tfloat amb = clamp( 0.5+0.5*nor.y, 0.0, 1.0 ); // ambient light\n        float dif = clamp( dot( nor, lig ), 0.0, 1.0 ); // diffuse reflection from sunlight\n        // backlight\n        float bac = clamp( dot( nor, normalize(vec3(-lig.x,0.0,-lig.z))), 0.0, 1.0 )*clamp( 1.0-pos.y,0.0,1.0);\n        float dom = smoothstep( -0.1, 0.1, ref.y ); // dome light\n        float fre = pow( clamp(1.0+dot(nor,rd),0.0,1.0), 2.0 ); // fresnel\n\t\tfloat spe = pow(clamp( dot( ref, lig ), 0.0, 1.0 ),16.0); // specular reflection\n        \n        dif *= softshadow( pos, lig, 0.02, 2.5 );\n        dom *= softshadow( pos, ref, 0.02, 2.5 );\n\n\t\tvec3 lin = vec3(0.0);\n        lin += 1.30*dif*vec3(1.00,0.80,0.55);\n\t\tlin += 2.00*spe*vec3(1.00,0.90,0.70)*dif;\n        lin += 0.40*amb*vec3(0.40,0.60,1.00)*occ;\n        lin += 0.50*dom*vec3(0.40,0.60,1.00)*occ;\n        lin += 0.50*bac*vec3(0.25,0.25,0.25)*occ;\n        lin += 0.25*fre*vec3(1.00,1.00,1.00)*occ;\n\t\tcol = col*lin;\n\n        // mix in fog?\n    \tcol = mix( col, vec3(0.8,0.9,1.0), 1.0-exp( -0.0002*t*t*t ) );\n    }\n\n\treturn vec3( clamp(col,0.0,1.0) );\n}\n\n// Compute camera-to-world transformation.\nmat3 lookRotation( vec3 lookDir, float cr )\n{\n\tvec3 cw = normalize(lookDir);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 mo = (iMouse.xy + 0.001) / iResolution.xy;\n    \n    const float MIDPLANEHALFWIDTH = 3.0;\n    const float MIDTONEARDIST = 4.0;\n    float phi =  6.28*mo.x;\n    float tht = 1.57 * mo.y;\n    vec3 lookTgt = vec3(0.0, 0.0, 0.0);\n    vec3 lookDir = -vec3(cos(phi)*sin(tht), cos(tht), sin(phi)*sin(tht));\n    mat3 lookRot = lookRotation(lookDir, 0.0);\n\n    // ray origin/direction\n    vec3 ro, rd;\n    fcToWorldRay(fragCoord, MIDPLANEHALFWIDTH, MIDTONEARDIST, lookTgt, lookRot, ro, rd);\n\n    // render\t\n    vec3 col = render( ro, rd );\n    // gamma\n    col = pow( col, vec3(0.4545) );\n    fragColor = vec4( col, 1.0 );\n}\n","name":"Buffer A","description":"","type":"buffer"}]}