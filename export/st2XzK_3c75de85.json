{"ver":"0.1","info":{"id":"st2XzK","date":"1628138106","viewed":111,"name":"Matter and Energy","username":"conceptblend","description":"Fun.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["line","glow","harmonics"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define radius .3\n#define PI 3.14159265358979\n\n\nfloat sdfLine(vec2 P, vec2 A, vec2 B, float r) {\n    /**\n     * /ht Inigo Quilez\n     * https://iquilezles.org/articles/distfunctions\n     **/ \n\n    vec2 pa = P-A, ba = B-A;\n    float h = clamp(\n                  dot(pa, ba)/\n                  dot(ba, ba),\n                  0.0,\n                  1.0);\n    /**\n     * Additional calc determine which side of the line we're on.\n     **/\n    vec2 norm = vec2( ba.y, -ba.x );\n    float d = dot( normalize( norm ), pa );\n    \n    /**\n     * Multiply by the sign so we can include 2 pieces\n     * of information in the return value.\n     *   -ve -> \"left side\" of the line\n     *   +ve -> \"right side\" of the line\n     **/\n    return (length(pa-ba*h) - r) * sign(d);\n}\n\nfloat glowBomb(vec2 uv, vec2 A, vec2 B) { \n    float strokeWidth = 0.;//24. * 1./iResolution.x; // Scale by N units of the X resolution\n    float line = sdfLine(uv, A, B, strokeWidth);\n    float lineSide = step(0., line); // Same as: line < 0. ? 0. : 1.;\n\n    return (1. - smoothstep( abs(line)/1.15, 0.0, .075 ));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord -.5 * iResolution.xy)/iResolution.y;\n\n    float angle = (iTime + 1.) * .08;\n    \n    vec2 A = vec2(\n         sin(PI * angle * 7.) * radius,\n        -sin(PI * angle * 2.) * radius\n    );\n\n    vec2 B = vec2(\n        -sin(PI * angle * 3.) * radius,\n         sin(PI * angle * 2.) * radius\n    );\n\n    vec2 C = vec2(\n        -sin(PI * angle * 5.) * radius,\n         sin(PI * angle * 2.) * radius\n    );\n\n    vec2 Z = vec2(\n        cos(PI * angle * 2.) * radius * .3,\n        sin(PI * angle * 4.) * radius * .3\n    );\n    \n    vec3 col = vec3(0.);\n\n    float L = glowBomb(uv, Z, A);\n    col += L * vec3(.25, .55, 1.);\n    \n    L = glowBomb(uv, B, Z);\n    col += L * vec3(.75, 1., .88);\n    \n    L = glowBomb(uv, C, Z);\n    col += L * vec3(1., .65, .3);\n\n    col *= .8;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}