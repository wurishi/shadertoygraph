{"ver":"0.1","info":{"id":"7s2XRm","date":"1620044292","viewed":212,"name":"Cute jelly fish","username":"long_march","description":"This is a cute cute jelly fish","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["cute","fun","underwater","jellyfish"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define xsquish 4.0 // (sin(iTime * 0.5)  * 2.0 + 2.0)\n#define ysquish 2.0 // (sin(iTime * 0.75) * 2.0 + 2.0)\n\nfloat time;\n#define time_scale float(1.5);\n\nstruct wave {\n    float f;\n    float a;\n    float s;\n};\n\nwave waves[] = wave[](\n    wave(5.0, 500.0, 3.0),\n    wave(7.0, 1200.0, 6.0),\n    wave(18.0, 1200.0, -6.0)\n);\n\nfloat get_waves(float value, wave waves[3]) {\n    float sum = 0.0;\n    for (int n = 0; n < waves.length(); n += 1) {\n        wave h = waves[n];\n        sum += sin(value * h.f + time * h.s) / h.a;\n    }\n    return sum;\n}\n\nfloat move(float speed, float amount) {\n    float value = sin(time * speed) * 0.5 + 0.5;\n    return 1.0 + value * amount;\n}\n\n#define sqr(x) (x*x)\n\nfloat rand(vec3 value) {\n    value = sin(value);\n    float random = dot(value, vec3(12.9898, 78.233, 37.719));\n    random = fract(sin(random) * 143758.5453);\n    return random;\n}\n\nvoid mainImage(out vec4 fragment_colour, in vec2 fragment_coordinate) {\n    vec2 pure_uv = fragment_coordinate / iResolution.xy - 0.5;\n    pure_uv.x *= iResolution.x / iResolution.y;\n\n    pure_uv *= 1.4;\n\n    #define pixels float(96)\n    pure_uv = floor(pure_uv * pixels) / pixels;\n    time = iTime * time_scale;\n\n    vec2 uv = pure_uv;\n    uv.y *= 0.9;\n    uv.x =  tanh(uv.x * xsquish) / xsquish;\n    uv.y = atanh(uv.y * ysquish) / ysquish;\n\n    fragment_colour = vec4(0.0, 0.15, 0.2, 1.0) * (1.0 - length(pure_uv) / 2.0);\n\n    float tendrils[5] = float[](\n        0.000, 0.768, 0.983, 0.491, -0.353\n    );\n\n    for (int n = 0; n < tendrils.length(); n += 1) {\n        float r = tendrils[n];\n        float position = uv.x + 0.05 * float(n) - 0.095;\n        float a = get_waves(uv.y * 10.0 + r * 4.0, waves) * 250.0;\n        float value = 1.0 - max(0.0, smoothstep(a, a+0.9, position * 50.0)\n                                   + smoothstep(a, a-0.9, position * 50.0));\n\n        if (value > 0.5) value = 1.0;\n        else value = 0.0;\n\n        fragment_colour += value * max(0.05 - uv.y + r / 24.0, 0.0)\n                                 * max(sqr(uv.y + r / 9.0 + 0.8), 0.0)\n                                 * 5.0;\n    }\n    uv = pure_uv;\n\n    float theta = atan(uv.x, uv.y);\n    float radius = length(uv);\n\n    radius += get_waves(theta, waves) * 1.5;\n\n    float mirrored_x = uv.x;\n    if (mirrored_x < 0.5) {\n        mirrored_x += 0.5 - mirrored_x;\n    }\n    float mirrored_theta = atan(mirrored_x, uv.y);\n    radius += sin(mirrored_theta * 10.0 - time * 4.0) / 50.0;\n\n    float threshold = 0.2;\n    float outer = sqr(sqr(sqr(radius * 4.5)));\n    float inner = (1.0 - radius) / 2.0;\n    if (radius < threshold && uv.y > 0.0 + get_waves(uv.x, waves) * 8.0) {\n        float r = inner * 0.2 + outer * move(0.2723, 1.0);\n        float g = inner * 0.3 + outer * move(0.224, 1.0);\n        float b = inner * 0.4 + outer * move(0.3151, 1.0);\n\n        fragment_colour *= sqr(inner);\n        fragment_colour += vec4(r, g, b, 1);\n    }\n\n    uv = pure_uv;\n    float noise = rand(vec3(uv, mod(time, 10.0))) * 0.01;\n    fragment_colour += noise;\n}\n","name":"Image","description":"","type":"image"}]}