{"ver":"0.1","info":{"id":"clKXR1","date":"1685935333","viewed":49,"name":"mooooon","username":"evalee","description":"moon","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["moon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float fullMoonSpeed = 1.6;\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5; // center\n    uv.x *= iResolution.x / iResolution.y; // scale to aspect\n    \n    // grayscale from the uv stuff above\n    vec3 col = vec3(length(uv));\n    \n    // create a circle moving in circles!\n    vec2 uv2 = fragCoord/iResolution.xy;\n    uv2 -= 0.5; // center\n    uv2.x *= iResolution.x / iResolution.y; // scale to aspect ratio\n    uv2.xy += vec2(sin(iTime), -cos(iTime)) * 0.5;\n    // add the spinny moon :)\n    if (length(col) < 0.625 && length(uv2) > 0.25 + sin(iTime * fullMoonSpeed) * 0.55) { col = vec3(1.0, 1.0, 0); }\n        \n    // cute gradients\n    col.z += (mod(fragCoord.x / iResolution.x, 0.75) > 0.25) ? 0.75 - fragCoord.y/iResolution.y : 1.06;\n    col.x += (mod(fragCoord.x / iResolution.x, 0.125) > 0.05) ? 0.5 - fragCoord.y/iResolution.y : 0.26;\n    col.y -= (abs(fragCoord.x/iResolution.x - 0.5) < 0.25) ? (0.5 - fragCoord.y/iResolution.y) * 0.7 : 89.56;\n    \n    // apply more color based on value with cutoffs and animate it\n    col *= (col.x < 0.25 - sin(iTime) * 0.25) ? vec3(1.25, 0.3, 0.5) : vec3(2.25, 1.56, 2.0);\n    col *= (col.x > (0.5 + cos(iTime) * 0.4)) ? vec3(0.63, 0.43, 0.7) : vec3(3.15, 2.16, 1.25);\n\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}