{"ver":"0.1","info":{"id":"sdySDm","date":"1634739358","viewed":98,"name":"Static Mandelbrot Set","username":"sterlingsowards","description":"My first shader, tried implementing the mandelbrot set. I'd like to update it in the future to zoom in over time","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["fractal","math","mandelbrot","set","design"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define NUM_ITERATIONS 1000.\n\nvec3 calculateMandelbrot(vec2 c, float left, float right, float bottom, float top)\n{\n    // Apply the mandelbrot calculation until it escapes the bounds or until the number of iterations is reached\n    // Return the number of iterations this point stayed within the bounds\n    // zn+1 = zn^2 + c where c is the starting point\n    // (xn+1, yn+1) = ((x^2-y^2), (2xy)) + (x0, y0)\n    vec2 z = vec2(0);\n    \n    for(float i = 0.; i < NUM_ITERATIONS; i++) {\n        if(z.x < left || z.x > right || z.y < bottom || z.y > top) return (vec3(i/NUM_ITERATIONS*i) + vec3(0, 0, .15));\n        z = vec2(z.x*z.x-z.y*z.y, 2.*z.x*z.y) + c;\n    }\n    return vec3(0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    \n    // Zoom\n    float zoom = 2.;\n    vec2 focalPoint = vec2(-.5, 0);\n    uv += focalPoint;\n    uv *= zoom;\n    \n    // Calculate the mandelbrot value at that point\n    vec3 c = calculateMandelbrot(uv, -zoom*iResolution.x/iResolution.y, zoom*iResolution.x/iResolution.y, -zoom, zoom);\n    vec3 col = c*vec3(.5, .5, 1.4);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}