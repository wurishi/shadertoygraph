{"ver":"0.1","info":{"id":"3dtyW7","date":"1601043884","viewed":614,"name":"Cell Alignment tutorial","username":"Znah","description":"Cell Alignment tutorial (video: https://youtu.be/dCDOFsgNnnQ)","likes":16,"published":1,"flags":32,"usePreview":0,"tags":["ca","sumilation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/MldcD7\nfloat sdTriangleIsosceles( in vec2 p, in vec2 q )\n{\n    p.x = abs(p.x);\n    vec2 a = p - q*clamp( dot(p,q)/dot(q,q), 0.0, 1.0 );\n    vec2 b = p - q*vec2( clamp( p.x/q.x, 0.0, 1.0 ), 1.0 );\n    float s = -sign( q.y );\n    vec2 d = min( vec2( dot(a,a), s*(p.x*q.y-p.y*q.x) ),\n                  vec2( dot(b,b), s*(p.y-q.y)  ));\n    return -sqrt(d.x)*sign(d.y);\n}\n\nvec2 rot90(vec2 v) {\n\treturn vec2(-v.y, v.x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 gridPos = fragCoord;\n    if (iMouse.z > 0.0) { // zoom\n        gridPos -= iResolution.xy*0.5;\n        gridPos = gridPos/20.0 + iMouse.xy;\n    }\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = gridPos/iResolution.xy;\n\n    vec4 data = texture(iChannel0, uv);\n    vec2 dir = data.xy;\n    fragColor.rg = dir*0.5+0.5;\n    fragColor.b = 0.5;\n    fragColor *= 0.5;\n    float diff = length(dir-data.zw);\n    fragColor += pow(diff, 0.33)*1.5;\n      \n    if (iMouse.z > 0.0) {\n        vec2 p = fract(gridPos) - 0.5;\n        p = mat2(dir, rot90(dir)) * p;\n        float arrow = sdTriangleIsosceles(p+vec2(0.0, 0.3), vec2(0.15, 0.6));\n        arrow = clamp(-arrow/fwidth(arrow), 0.0, 1.0);\n        fragColor += arrow*0.5;\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float PI = 3.14159265359;\n\nfloat hash13(vec3 p3)\n{\n\tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec2 ang2vec(float a) {\n    return vec2(cos(a), sin(a));\n}\n\nvec2 read(vec2 p) {\n\treturn texture(iChannel0, p/iResolution.xy).xy;\n}\n\nvec2 avgpool(vec2 p) {\n  vec2 acc = vec2(0.0);\n  for (int y=-1; y<=1; ++y)   \n  for (int x=-1; x<=1; ++x) {\n    acc += read(p + vec2(x, y));\n  }\n  return acc / 9.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    if (iFrame == 0) {\n    \tfloat a = hash13(vec3(fragCoord+vec2(34299.0, -56593.0), 0.0)) * 2.0 * PI;\n        \n    \tfragColor = vec4(ang2vec(a), 0.0, 0.0);\n        return;\n    }\n    vec2 v = normalize(avgpool(fragCoord));\n    vec2 v0 = read(fragCoord);\n    fragColor = vec4(v, v0);\n}","name":"Buffer A","description":"","type":"buffer"}]}