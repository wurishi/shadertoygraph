{"ver":"0.1","info":{"id":"wdcGzH","date":"1567761752","viewed":292,"name":"Faux Sphere","username":"thp","description":"Fake sphere effect for 2D games.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["sphere","earth"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 sphere(vec2 uv, float rsq)\n{\n    // zoom in on the texture\n    float r = 0.3 * sqrt(rsq);\n    \n    // flatten the center piece for a 2d look\n    return uv * max(0.24, r);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // map screen coordinates to -1..+1 coordinates\n    vec2 uv = vec2(1.0) - 2.0 * fragCoord/iResolution.xy;\n    \n    // aspect ratio of the screen (so we can make a square)\n    float aspect = iResolution.x / iResolution.y;\n    \n    // percentage (e.g. 90%) of vertical screen space used\n    float yheight = 0.9;\n    \n    // percentage of horizontal screen space (keep aspect->square)\n    float xheight = yheight / aspect;\n    \n    // map UVs so center square is (-1..+1)\n    uv.x /= xheight;\n    uv.y /= yheight;\n    \n    // radius (distance from center)\n    float rsq = dot(uv, uv); // uv.x * uv.x + uv.y * uv.y;\n\n    // cut out a circle (inside circle = 1.0, outside = 0.0)\n    float circle = smoothstep(1.01, 0.99, rsq);\n    \n    // scrolling offset of the texture\n    vec2 scrolling = vec2(sin(iTime / 3.0), 0.0);\n                          \n    // sample from the texture, scroll texture, circle cutout\n    fragColor = texture(iChannel0, sphere(uv, rsq) + scrolling) * circle;\n}","name":"Image","description":"","type":"image"}]}