{"ver":"0.1","info":{"id":"XXjfDG","date":"1729883355","viewed":61,"name":"Evolving Topo (Fractal Noise)","username":"h4znk0","description":"Originally based on \"isovalues 3\" by FabriceNeyret2 in 2017\n\nI've adapted the code to be more readable for my own educational purposes, and substituted fractal noise for the original psudo-perlin noise.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["noise","contour","fractalnoise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float noise3(vec3 x) {\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n    f = f * f * (3.0 - 2.0 * f);  // Smooth interpolation\n\n    #define hash3(p) fract(sin(dot(p, vec3(127.1, 311.7, 74.7))) * 43758.5453)\n\n    float n000 = hash3(p + vec3(0, 0, 0));\n    float n100 = hash3(p + vec3(1, 0, 0));\n    float n010 = hash3(p + vec3(0, 1, 0));\n    float n110 = hash3(p + vec3(1, 1, 0));\n    float n001 = hash3(p + vec3(0, 0, 1));\n    float n101 = hash3(p + vec3(1, 0, 1));\n    float n011 = hash3(p + vec3(0, 1, 1));\n    float n111 = hash3(p + vec3(1, 1, 1));\n\n    float nx00 = mix(n000, n100, f.x);\n    float nx10 = mix(n010, n110, f.x);\n    float nx01 = mix(n001, n101, f.x);\n    float nx11 = mix(n011, n111, f.x);\n\n    float nxy0 = mix(nx00, nx10, f.y);\n    float nxy1 = mix(nx01, nx11, f.y);\n\n    return mix(nxy0, nxy1, f.z);\n}\n\n// Fractal noise function with multiple octaves\nfloat fractalNoise(vec3 pos, int octaves, float lacunarity, float gain) {\n    float amplitude = 1.0;\n    float frequency = 1.0;\n    float total = 0.0;\n    float maxAmplitude = 0.0;\n\n    for (int i = 0; i < octaves; ++i) {\n        total += noise3(pos * frequency) * amplitude;\n        maxAmplitude += amplitude;\n        amplitude *= gain;\n        frequency *= lacunarity;\n    }\n\n    return total / maxAmplitude;  // Normalize the result\n}\n\nvoid mainImage(out vec4 O, vec2 U) {\n    vec2 R = iResolution.xy;\n\n    // Use fractal noise instead of the original pseudo-Perlin noise\n    float n = fractalNoise(vec3(U * 8. / R.y, 0.02 * iTime), 10, 1.20, 0.8);\n\n    float v = sin(6.28 * 10.0 * n);\n    float t = iTime;\n    v = smoothstep(1.0, 0.0, 0.5 * abs(v) / fwidth(v));\n\n    vec4 textureSample = exp(-33.0 / R.y) * texture(iChannel0, (U + vec2(1.0, sin(t))) / R);\n    vec4 sineWave = 0.5 + 0.5 * sin(12.0 * n + vec4(0, 2.1, -2.1, 0));\n\n    O = mix(textureSample, vec4(1.0, 1.0, 1.0, 0.0), v);\n}\n","name":"Image","description":"","type":"image"}]}