{"ver":"0.1","info":{"id":"DddBDH","date":"1697124333","viewed":79,"name":"bouncing chromatic ball","username":"24abrama","description":"a bouncing ball","likes":2,"published":1,"flags":8,"usePreview":0,"tags":["color"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 pos(float t){\n    float x =abs(mod(t,2.)-1.)/(iResolution.y/iResolution.x);\n    float y =abs(mod(t/2.42434,2.)-1.);\n    return vec2(x,y);\n}\n// cosine based palette, 4 vec3 params\nvec3 palette(float t, vec3 offsetY, vec3 amp, vec3 period, vec3 offsetX )\n{\n    return offsetY + amp*cos( 6.28318*(period*t+offsetX) );\n}\n\nfloat random(vec3 pos){\n    return fract(sin(dot(pos, vec3(64.25375463, 23.27536534, 86.29678483))) * 59482.7542);\n}\nfloat random(float pos){\n    return fract(sin(pos*32.1) * 59482.7542);\n}\n\n\nfloat noise(vec3 st){\n    vec3 f = fract(st);\n    vec3 i = floor(st);\n\n    float a = random(i+vec3(0.,0.,0.));\n    float b = random(i+vec3(1.,0.,0.));\n    float c = random(i+vec3(0.,1.,0.));\n    float d = random(i+vec3(1.,1.,0.));\n    float a2 = random(i+vec3(0.,0.,1.));\n    float b2 = random(i+vec3(1.,0.,1.));\n    float c2 = random(i+vec3(0.,1.,1.));\n    float d2 = random(i+vec3(1.,1.,1.));\n\n    vec3 u = f*f*(3.0-2.0*f);\n\n    return mix(mix(mix(a,b,u.x),mix(c,d,u.x),u.y),mix(mix(a2,b2,u.x),mix(c2,d2,u.x),u.y),u.z);\n\n}\n#define octaves 3.0\nfloat fbm(vec3 st){\n    float n = 0.;\n    float a = 0.7;\n    float f = 1.;\n    for(float i=0.0;i<octaves;i+=1.0){\n        n+=noise(st*f+vec3(random(i),random(i-234.12),random(i+98623.1279834)))*a;\n        a/=2.;\n        f*=1.5;\n\n    }\n    return n;\n}\n\nfloat domainWarp(vec3 st){\n    vec3 p = vec3(  fbm(st+vec3(0.4983274536, 0.8178552822, 0.3430482529)*100.0),\n                    fbm(st+vec3(0.7930634143, 0.8859784759, 0.8693325122)*100.0),\n                    fbm(st+vec3(0.3883878981, 0.4345112257, 0.2261683547)*100.0));\n    vec3 q = vec3(  fbm(st/4.+p+vec3(0.9979504377, 0.0827727968, 0.3446470690)*100.0),\n                    fbm(st/4.+p+vec3(0.3384724654, 0.8145040535, 0.6071464167)*100.0),\n                    fbm(st+p+vec3(0.7878202982, 0.6986822137, 0.1709065078)*100.0));\n    return fbm(q*p+st);\n}\n\nvec3 current(vec3 st){\n    return vec3(1.)*domainWarp(st*2.);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x/=iResolution.y/iResolution.x;\n\n    // Time varying pixel color\n    vec3 smoke = current(vec3(uv,iTime))*vec3(0.5,0.5,0.5);\n\n\n\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    vec2  p=pos(iTime);\n\n    // col.x = floor(iTime/2.42434);\n    col = palette(2.*(floor(iTime/2.42434)+floor(iTime)),vec3(1.5,1.,1.),vec3(1.,1.,1.),vec3(0.01234,0.034,0.1),vec3(0.));\n\n\n\n\n    // col = palette(floor(uv.x*50./2.42434),vec3(-0.1,0.,0.),vec3(1.,1.,1.),vec3(0.01234,0.034,0.1),vec3(0.));\n    float e = min(fract(iTime/2.42434)*2.42434,fract(iTime));\n\n    // col *= 0.1/(length(uv-p)/(1.+2.*exp(-2.*e-1.)))*(sin(length(uv-p)*10.+(1.+2.*exp(-2.*e-1.))*10.)/2.+0.5);\n    col *= smoke/2.+0.02/(length(uv-p));\n\n    // float a = fract(iTime/2.42434)*2.42434;\n\n    p = pos(iTime-e);\n    // p=pos(floor(iTime/2.42434),floor(iTime));\n    col += 0.2/(length(uv-p)/(2.*exp(-6.*e-1.))) * (sin(length(uv-p)*10.+(1.+2.*exp(-6.*e-1.))*10.)/2.+0.5) ;\n\n\n\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec2 mainSound( int samp, float time )\n{\n    // A 440 Hz wave that attenuates quickly overt time\n    float e = min(fract(time/2.42434)*2.42434,fract(time));\n\n\n    return vec2( sin(6.2831*90.0*time)*exp(-10.0*(e-0.01)*(e-0.01)) );\n}","name":"Sound","description":"","type":"sound"}]}