{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"// Simplex 3D Noise\n// by Ian McEwan, Stefan Gustavson\nvec4 permute(vec4 x) {\n    return mod(((x * 34.0) + 1.0) * x, 289.0);\n}\nvec4 taylorInvSqrt(vec4 r) {\n    return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v) {\n    const vec2 C = vec2(1.0 / 6.0, 1.0 / 3.0);\n    const vec4 D = vec4(0.0, 0.5, 1.0, 2.0);\n\n    vec3 i = floor(v + dot(v, C.yyy));\n    vec3 x0 = v - i + dot(i, C.xxx);\n\n    vec3 g = step(x0.yzx, x0.xyz);\n    vec3 l = 1.0 - g;\n    vec3 i1 = min(g.xyz, l.zxy);\n    vec3 i2 = max(g.xyz, l.zxy);\n\n    vec3 x1 = x0 - i1 + C.xxx;\n    vec3 x2 = x0 - i2 + C.yyy;\n    vec3 x3 = x0 - D.yyy;\n\n    i = mod(i, 289.0);\n    vec4 p = permute(permute(permute(\n                    i.z + vec4(0.0, i1.z, i2.z, 1.0))\n                    + i.y + vec4(0.0, i1.y, i2.y, 1.0))\n                + i.x + vec4(0.0, i1.x, i2.x, 1.0));\n\n    float n_ = 1.0 / 7.0;\n    vec3 ns = n_ * D.wyz - D.xzx;\n\n    vec4 j = p - 49.0 * floor(p * ns.z * ns.z);\n\n    vec4 x_ = floor(j * ns.z);\n    vec4 y_ = floor(j - 7.0 * x_);\n\n    vec4 x = x_ * ns.x + ns.yyyy;\n    vec4 y = y_ * ns.x + ns.yyyy;\n    vec4 h = 1.0 - abs(x) - abs(y);\n\n    vec4 b0 = vec4(x.xy, y.xy);\n    vec4 b1 = vec4(x.zw, y.zw);\n\n    vec4 s0 = floor(b0) * 2.0 + 1.0;\n    vec4 s1 = floor(b1) * 2.0 + 1.0;\n    vec4 sh = -step(h, vec4(0.0));\n\n    vec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;\n    vec4 a1 = b1.xzyw + s1.xzyw * sh.zzww;\n\n    vec3 p0 = vec3(a0.xy, h.x);\n    vec3 p1 = vec3(a0.zw, h.y);\n    vec3 p2 = vec3(a1.xy, h.z);\n    vec3 p3 = vec3(a1.zw, h.w);\n\n    vec4 norm = taylorInvSqrt(vec4(dot(p0, p0), dot(p1, p1), dot(p2, p2), dot(p3, p3)));\n    p0 *= norm.x;\n    p1 *= norm.y;\n    p2 *= norm.z;\n    p3 *= norm.w;\n\n    vec4 m = max(0.6 - vec4(dot(x0, x0), dot(x1, x1), dot(x2, x2), dot(x3, x3)), 0.0);\n    m = m * m;\n    return 42.0 * dot(m * m, vec4(dot(p0, x0), dot(p1, x1),\n                dot(p2, x2), dot(p3, x3)));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    float aspect = iResolution.x / iResolution.y;\n\n    float zoomout = 2.0;\n    vec2 sp = (uv * 2.0 - 1.0) * zoomout;\n    sp.x *= aspect;\n\n    vec3 color = vec3(0.0);\n\n    // Grid\n    vec2 uv_cell = fract(sp);\n    vec2 sp_cell = uv_cell * 2.0 - 1.0;\n    vec2 lines = 1.0 - smoothstep(0.0, 0.005, 1.0 - abs(sp_cell) - 0.01);\n    float line = max(lines.x, lines.y);\n    color += line * 0.1;\n\n    // Line\n    float x = sp.x;\n    float t = iTime;\n\n    float noise_xt = snoise(vec3(x, t, 0.0));\n    float noise_xty = snoise(vec3(x, t, sp.y));\n\n    float signal = sin(x * 3.141592) / (1.0 + pow(0.35 * abs(x), 16.0)) + 0.1 * noise_xt;\n    float signal_ratio = clamp(pow(abs(sp.x), 1.0), 0.0, 1.0);\n    float y = signal_ratio * signal + (1.0 - signal_ratio) * noise_xty;\n\n    float line_brightness = 0.1 * (15.0 - 10.0 * 2.0 * (noise_xty - 0.5));\n    vec3 line_attenuation = vec3(1.0, 160.0, 160.0);\n\n    vec3 signal_color = vec3(0.1, 1.0, 0.0);\n    vec3 noise_color = 10.0 * vec3(1.0, 0.3, 0.0);\n    vec3 line_color = signal_ratio * signal_color + (1.0 - signal_ratio) * noise_color;\n\n    float d = distance(sp, vec2(x, y));\n    float line_intensity = line_brightness / dot(line_attenuation, vec3(1.0, d, d * d));\n\n    color += line_intensity * line_color;\n\n    fragColor = vec4(color, 1.0);\n}\n\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4fKfz3","date":"1734288181","viewed":97,"name":"Noise to Signal Ratio","username":"whoami","description":"Sin wave","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["noise","fire","red","green","signal"],"hasliked":0,"parentid":"","parentname":""}}