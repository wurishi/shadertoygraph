{"ver":"0.1","info":{"id":"3lGczd","date":"1611535918","viewed":62,"name":"2D Ball","username":"Learner_CC","description":"Inspired by the book of shader.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926535\n#define HALF_PI 1.57079632679\n\nfloat speedRotation = 0.01;\nfloat speedLight = 0.25;\n\nvec3 sphereNormals(in vec2 uv) {\n    uv = fract(uv)*2.0-1.0;\n    vec3 ret;\n    ret.xy = sqrt(uv * uv) * sign(uv);\n    ret.z = sqrt(abs(1.0 - dot(ret.xy,ret.xy)));\n    ret = ret * 0.5 + 0.5;\n    return mix(vec3(0.0), ret, smoothstep(1.0,0.98,dot(uv,uv)) );\n}\n\nvec2 sphereCoords(vec2 _st, float _scale) {\n    float maxFactor = sin(HALF_PI);\n    vec2 uv = vec2(0.0);\n    vec2 xy = 2.0 * _st.xy - 1.0;\n    \n    // calculate distance  \n    float d = length(xy);\n    if (d < (2.0 - maxFactor)) {\n        d = length(xy * maxFactor);\n        float z = sqrt(1.0 - d * d);\n        float r = atan(d, z) / PI * _scale;\n        float phi = atan(xy.y, xy.x);\n        uv.x = r * cos(phi) + 0.5;\n        uv.y = r * sin(phi) + 0.5;\n    } else {\n        uv = _st.xy;\n    }\n    return uv;\n}\n\nvec4 sphereTexture(in sampler2D _tex, in vec2 _uv) {\n    vec2 st = sphereCoords(_uv, 1.0);\n\n\n    float aspect = 0.5;\n    st.x = fract(st.x * aspect + iTime * speedRotation);\n\n    return texture(_tex, st);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    uv.x *= iResolution.x / iResolution.y;\n    uv.x -= 0.4;\n    vec3 color = vec3(1.0);\n    color *= sphereTexture(iChannel0, uv).rgb;\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    // Calculate light direction\n    vec3 lightPos = normalize(vec3(cos(HALF_PI),0.0,sin(HALF_PI)));\n    \n    vec3 surface = normalize(sphereNormals(uv)*2.0-1.0);\n    \n    // Add Shadows\n    color *= dot(lightPos, surface);\n    \n    float radius = 1.0-length( vec2(0.5)-uv )*2.0;\n    color *= smoothstep(0.001,0.05,radius);\n    // Output to screen\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}