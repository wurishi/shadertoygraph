{"ver":"0.1","info":{"id":"NtsBWn","date":"1650724749","viewed":38,"name":"Nice Cube","username":"curiouspers","description":"Nice Cube?","likes":2,"published":1,"flags":64,"usePreview":0,"tags":["raymarching","template","artofcode"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","previewfilepath":"/media/ap/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4ljSzR","filepath":"https://soundcloud.com/schoeffercharlotte/aphex-twin-autechre-live-in-vancouver?utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing#t=1:40","previewfilepath":"https://soundcloud.com/schoeffercharlotte/aphex-twin-autechre-live-in-vancouver?utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing#t=1:40","type":"musicstream","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// don't know how to get rid of artifacts\n\n// Fork of \"RayMarching starting point\" by BigWIngs. https://shadertoy.com/view/WtGXDD\n// 2022-04-23 14:37:34\n\n// \"RayMarching starting point\" \n// by Martijn Steinrucken aka The Art of Code/BigWings - 2020\n// The MIT License\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// Email: countfrolic@gmail.com\n// Twitter: @The_ArtOfCode\n// YouTube: youtube.com/TheArtOfCodeIsCool\n// Facebook: https://www.facebook.com/groups/theartofcode/\n//\n// You can use this shader as a template for ray marching shaders\n\n#define ANIM 1\n// VER 0 is brut force ground truth\n// VER 1 is broken domain repetition\n// VER 2 is almost fixed domain repetition thanks to blackle video\n#define VER 2\n#define DEV 0\n// TODO: fix wobbling, i guess it's still broken domain repetition, check out blackley video\n// fix that hard to sync beat\n\n#define MAX_STEPS 100\n#define MAX_DIST 50.\n#define SURF_DIST .0001\n\n#define S smoothstep\n#define T iTime*1.045\n\nfloat random (vec2 st) {\n    #if 1\n    return fract(sin(dot(st.xy, vec2(42.1236,69.789)))*65536.737946158)*0.5;\n    #else\n    return textureLod(iChannel0,st/40.,0.).x; // texture fetch is more expensive somehow\n    #endif\n    #if 1\n    return fract(sin(dot(st.xy, vec2(42.1236,69.789)))*65536.737946158)*0.5+0.72;\n    #else\n    return textureLod(iChannel0,st/40.,0.).x+.21; // texture fetch is more expensive somehow\n    #endif\n}\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.)-.0;\n}\nfloat sdBox(vec2 p, vec2 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, p.y), 0.);\n}\nfloat sdCylinder( vec3 p, vec3 c )\n{\n  return length(p.xz-c.xy)-c.z;\n}\nfloat sdVerticalCapsule( vec3 p, float h, float r )\n{\n  p.y -= clamp( p.y, 0.0, h );\n  return length( p ) - r;\n}\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n  vec3 pa = p - a, ba = b - a;\n  float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n  return length( pa - ba*h ) - r;\n}\n/*\nvec3 opRepLim( in vec3 p, in float c, in vec3 l, in primitive )\n{\n    vec3 q = p-c*clamp(round(p/c),-l,l);\n    return primitive( q );\n}*/\nvec2 iSphere( in vec3 ro, in vec3 rd, in vec3 cen, in float rad )\n{\n    ro -= cen;\n    float b = dot(rd, ro);\n    float c = dot(ro,ro) - rad*rad;\n    float h = b*b - c;\n    if ( h<0.0 ) return vec2(-1.0);\n    h = sqrt(h);\n    \n    return vec2( -b-h, -b+h );\n}\n     \n\nfloat usdBox( in vec3 p, in vec3 b )\n{\n    return length( max(abs(p)-b,0.0 ) );\n}\n// polynomial smooth min\nfloat smin( float a, float b, float k )\n{\n    float h = max( k-abs(a-b), 0.0 )/k;\n    return min( a, b ) - h*h*k*(1.0/4.0);\n}\n// polynomial smooth min\nfloat smax( float a, float b, float k )\n{\n    float h = max( k-abs(a-b), 0.0 )/k;\n    return max( a, b ) + h*h*k*(1.0/4.0);\n}\nvec2 edge(vec2 p){\n    vec2 p2 = abs(p);\n    if (p2.x > p2.y) return vec2(p.x < 0. ? -1. : 1., 0. );\n                else return vec2(0., p.y < 0. ? -1. : 1. );\n}\nfloat GetDist(vec3 p, bool enableCage) {\n    vec3 pp = p;\n    p.xz*=0.6;\n    vec3 p2 = p;\n    float d = 9999999999.;//sdBox(p, vec3(0));\n    float d2 = d;\n    float ground = p.y+1.0;\n        float box;\n    //if (length(p) < 2.9){\n    float bb = sdBox(p-vec3(0.0,0.0,0.0),vec3(1.0,1.1,1.0)/1. ); // bounding box for temple\n    if( bb<d && true)\n    {\n        //d = sdBox(p, vec3(.1,1.,1.));\n        //if (abs(d) < 1.5) {    \n            //p.y = fract(p.y)-.5;\n        float COUNT = 45.;//+floor(sin(T*6.2818)*10.);\n        float COUNTX = 5.;\n        float COUNTZ = 10.;\n        float t = T*0.5 * COUNT;\n        float top = COUNT-mod(floor(-t),COUNT-0.);\n        #if !ANIM\n        top = COUNT;\n        #endif\n    #if 1 == 0\n        for( float y= 0.; y < top; y++){\n            d = min(d, sdBox(p-vec3(0.,-1.+y/COUNT*2.,0.), vec3(1.,0.015,1.)));\n        }\n    #else\n        if ( 1 == 1 ){ // here\n        float c = 2./COUNT;\n        float l = top;\n        p.y += 1.;\n        vec3 q = p;\n        q.y = p.y-c*clamp(round(p.y/c),.0,l);\n        float box = sdBox(q, vec3(1.,0.01,1.));// \n        //* clamp(random(floor(q.xz*3.51)),0.,1.) );\n        d = min(d, box );//-.01;\n        }\n    #endif\n\n        float gap = .0;\n        t = floor(T*2.5);\n    #if !ANIM\n        t = 0.;\n    #endif\n// domain rep\n// can't figure out how to do this =(\n        if (VER == 1 ) { \n            float c = 0.18;\n            float l = 3./COUNTX;\n            l = 5.;\n            //p.y -= 1.;\n            vec3 q = p;\n            p.xz *= vec2(.66,1);\n            p.y -= 1.;\n            q.xz = p.xz-c*clamp(round(p.xz/c),-l,l);\n/*\n            float cc = 2./COUNT;\n            float ll = top;\n            q.y = p.y-cc*clamp(round(p.y/cc),-ll,ll);\n*/\n//q.y=0.;\n                //float rnd = (random(p.xz+c*round(p.xz*c-0.4))+.5); // here2\n                //rnd = max(rnd,random(q.xz/COUNTX*333. + t));\n            //box = sdBox(q, vec3(1./COUNTX,0.15*rnd,1./COUNTZ));\n            //if (rnd > 0.9)\n                float rnd = random(round(1.*p.xz/c)+t)+.5; // here2\n                box = (rnd > 0.75) ? sdBox(q, vec3(0.1,2.15,0.1)-0.01) : 9999999.;\n                vec2 nbr = p.xz+edge(p.xz); // neighbour\n                float next = sdBox(vec3(q.x+nbr.x, q.y, q.z+nbr.y), vec3(0.1,2.15,0.1)-0.01);\n                box = min(box, next);\n                //if (rnd > 0.95)\n                //box = sdBox(q, vec3(0.1,2.15,0.1)-0.01);\n                //box = sdBox(q, vec3(0.1,0.15,0.1)-0.0);\n            //d = min(d,box);\n            d2 = max(bb,box);\n            //d2 = box;\n        }\n        else if (VER == 2){\n        \nif (1 == 1) // TEST THAT ALMOST WORK\n{\n        float c = .21;\n        float l = 5.;\n        p2.y += 1.;\n        p2.xz *= vec2(0.5,1.);\n        vec3 q = p2;\n        q.xz = p2.xz-c*clamp(round(p2.xz/c),-l,l);\n            float box = 999999999.;\n// if we got variable height, then distance function breaks\n        if (1 == 0){\n            float rnd = random(round(1.*p2.xz/c)+floor(iTime))+.5; // here2\n            box = sdBox(q, vec3(.1,rnd > 0.75 ? 2. : -1.,.1));\n            d2=box;\n        }\n// we can sample neighbors to make it closer / less broken \n        else {\n            //for (float i = -1.; i <= 1. && round((p2.x+c*i)/c) > -l && round((p2.x+c*i)/c) < l; i++){\n            /*\n            for (float i = -1.; i <= 1. ; i++){\n            for (float j = -1.; j <= 1. ; j++){\n                vec3 offs = vec3(c*i,0.,c*j);\n                float rnd = random(round((p2.xz+offs.xz)/c)+floor(iTime))+.5; // here2\n                //box = min(box, sdBox(q+offs, vec3(.1,rnd > 0.75 ? 2. : -1.,.1)));\n                box = min(box, rnd > 0.75 ? sdBox(q+offs, vec3(.1, 2.,.1)) : 999.);\n            }}\n            */\n            float rnd = random(round((4.*p2.xz))+5.*floor(t))+.5; // here2\n            box = rnd > 0.77 ? sdBox(q, vec3(.11, 2.*rnd*rnd*rnd,.11))\n        #if ANIM == 1\n        // this beat is very hard to sync for some reason\n                +(-rnd)*0.1*(cos(T*3.1428*2./(60./37.21)+1.3))\n        #endif\n                : 9999999999999999.;\n            vec2 nbr = q.xz+edge(p.xz)*c/2.; // neighbour\n            //float next = sdBox(p-vec3(nbr.x, p.y, nbr.y), vec3(0.1,1.,0.1)-0.01);\n            //if (enableCage){ // to disable on shadow pass\n                float next = sdBox(q-vec3(nbr.x, 0., nbr.y), vec3(0.01,2.,0.01));\n                //float next = sdBox(q+vec3(c,0.,c), vec3(0.1,2.,0.1)-0.01);\n                box = min(box, next)\n                #if ANIM == 0\n        // this beat is very hard to sync for some reason\n                +0.1*(cos(iTime*3.1428*2./(60./30.51)+1.5))\n        #endif\n        ;\n            //}\n            //box = max(bb, box);\n            d2 = max(bb,box);\n            d2 = box;\n            //d2 = 0.;\n            //box = max(bb,next);\n        }\n        \n    //float smoos = 0.02/2.0;\n    //d = smax(d-smoos,box-smoos,smoos);\n       // d = min(box, ground);\n        //d = min(bb, ground);\n}\n        } else\n        {\n            for( float z= 0.; z <= COUNTZ; z++){\n            for( float x= 0.; x <= COUNTX; x++){\n                float rnd = random(vec2(x,z)*20. + t);\n                //rnd = max(rnd,random(vec2(x,z)*333. + t));\n                if (rnd > 0.3)\n                {\n                    float xx = -1.+x/COUNTX*2.;\n                    float zz = -1.+z/COUNTZ*2.;\n                    d2 = min(d2, \n                        sdBox(\n                            p.xz+vec2(xx,zz), \n                            vec2(1./COUNTX-gap,1./COUNTZ-gap)) \n                            #if ANIM == 0\n                            +0.1*(sin(iTime))\n                            #endif\n                            );\n                }\n            }\n            }\n    //d = max(d,d2-.01);\n        }\n    float smoos = 0.02/2.0;\n    d = smax(d-smoos,d2-smoos,smoos);\n        \n        \n    }\n    //d = min(d, ground);\n    d = min(d, ground);\n    //d = min(ground,box); // here3\n//    d = min(bb, d);\n\n\n    \n    if (enableCage && false){\n     //p /= 2.;\n     //pp /= 2.;\n     \n        float rr = .0052;\n        float c = 1.0;\n        float l = 2.0;\n        //p = pp;\n        pp.y += 3.;\n        pp.xz *= 1.98;\n        vec3 q = pp-c*clamp(round(pp/c),-l,l);\n        q.y *= 1.055;\n        //q = fract(p);\n        d = min(d, sdVerticalCapsule( q-vec3(.0), 2.1, rr ));\n        \n        q.xyz = p.yxz* 1.98;\n        q.y *= 1.25;\n        q = q-c*clamp(round(q/c),-l,l);\n        d = min(d, sdVerticalCapsule( q-vec3(0.,-0.5,.0), 1.0, rr ));\n        \n        q.xyz = p.yzx* vec3(1.98,1.98,1.98);\n        q.y *= 1.25;\n        q = q-c*clamp(round(q/c),-l,l);\n        d = min(d, sdVerticalCapsule( q-vec3(0.,-0.5,.0), 1.0, rr ));\n        \n        //d = min(ground, sdVerticalCapsule( q, 1.1, .0025 ));\n      \n    }\n    \n    if (enableCage && false){\n     //p /= 2.;\n     //pp /= 2.;\n     \n        float rr = .0052;\n        float c = 1.0;\n        float l = 2.0;\n        //p = pp;\n        pp.y += 3.;\n        pp.xz *= 1.98;\n        vec3 q = pp-c*clamp(round(pp/c),-l,l);\n        q.y *= 1.055;\n        //q = fract(p);\n        //d = min(d, sdVerticalCapsule( q-vec3(.0), 2.1, rr ));\n        \n        //d = min(d, sdCylinder( q, vec3(.01) ));\n        //d = min(d, sdCapsule( q, vec3(0,0,0), vec3(0,2,0), .01 ));\n         // NOTHING WORKS WTF\n        \n//float sdCylinder( vec3 p, vec3 c )\n//float sdVerticalCapsule( vec3 p, float h, float r )\n//float sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n        /*\n        q.xyz = p.yxz* 1.98;\n        q.y *= 1.25;\n        q = q-c*clamp(round(q/c),-l,l);\n        d = min(d, sdVerticalCapsule( q-vec3(0.,-0.5,.0), 1.0, rr ));\n        \n        q.xyz = p.yzx* vec3(1.98,1.98,1.98);\n        q.y *= 1.25;\n        q = q-c*clamp(round(q/c),-l,l);\n        d = min(d, sdVerticalCapsule( q-vec3(0.,-0.5,.0), 1.0, rr ));\n        \n        //d = min(ground, sdVerticalCapsule( q, 1.1, .0025 ));\n      */\n    }\n    //d = min(bb, ground);\n    //}\n    \n    // this cage is okeyish\n    if( 1 == 0 && enableCage ){\n        p = pp;\n        float m = 1.6;\n        float r = .002;\n        float bar = length(vec2(sdBox(p.xy, vec2(1.55,1.01))-.15, fract(clamp(abs(p.z*m),0.,3.))-.4))/m-r;\n        d = min(d, bar);\n        \n        p.xyz = pp.zyx;\n        bar = length(vec2(sdBox(p.xy, vec2(1.55,1.01))-.15, fract(clamp(abs(p.z*m),0.,3.))-.4))/m-r;\n        d = min(d, bar);\n        \n        p.xyz = pp.xzy;\n        bar = length(vec2( sdBox(p.xy, vec2(1.55,1.55))-.15 , fract(clamp(abs(p.z*2.5),0.,3.))-.4))/2.5-r;\n        d = min(d, bar);\n    }\n    \n    return d;\n}\n\n\nfloat calcShadow( in vec3 ro, in vec3 rd, float k )\n{\n    float res = 1.00;\n    \n    float t = 0.01;\n    for( int i=0; i<40; i++ )\n    {\n        vec3 pos = ro + t*rd;\n        float h = GetDist( pos , false );\n        res = min( res, k*max(h,0.0)/t );\n        if( res<0.0001 ) break;\n        t += clamp(h,0.01,0.5);\n    }\n\n    return res;\n}\n\nvec2 hash2( float n ) { return fract(sin(vec2(n,n+1.0))*vec2(43758.5453123,22578.1459123)); }\n#define ZERO (min(iFrame,0))\nfloat calcOcclusion( in vec3 pos, in vec3 nor, float ra )\n{\n    float occ = 0.0;\n    for( int i=ZERO; i<32; i++ )\n    {\n        float h = 0.01 + 4.0*pow(float(i)/31.0,2.0);\n        vec2 an = hash2( ra + float(i)*13.1 )*vec2( 3.14159, 6.2831 );\n        vec3 dir = vec3( sin(an.x)*sin(an.y), sin(an.x)*cos(an.y), cos(an.x) );\n        dir *= sign( dot(dir,nor) );\n        occ += clamp( 5.0*GetDist( pos + h*dir, false )/h, -1.0, 1.0);\n    }\n    return clamp( occ/32.0, 0.0, 1.0 );\n}\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    \n    //vec2 vol = iSphere( ro, rd, vec3(0., 0., 0.), 2.9);\n    //if ( vol.y > 0.0)\n    //{\n        for(int i=0; i<MAX_STEPS; i++) {\n            vec3 p = ro + rd*dO;\n            float dS = GetDist(p, true);\n            dO += dS;\n            if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n        }\n    //}\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p, true);\n    vec2 e = vec2(.00001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy, true),\n        GetDist(p-e.yxy, true),\n        GetDist(p-e.yyx, true));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\nfloat sint = sin(T/4.)/2.;\n    vec3 ro = vec3(-4, 4, -1);\n    ro.yz *= Rot(-m.y*3.14+1.);\n    ro.xz *= Rot(-m.x*6.2831+sint*3.1416+3.1416/2.);\n    ro.y = max(0.1,ro.y);\n    \n    vec3 rd = GetRayDir(uv+vec2(0.,0.), ro, vec3(0.,0.,0), 1.2);\n    #if DEV\n    rd = GetRayDir(uv+vec2(0.42,0.), ro, vec3(0.,0.,0), 1.2);\n    #endif\n    vec3 col = vec3(0);\n    //bg\n    col = mix(vec3(0.176,0.169,0.247),vec3(0.498,0.467,0.561),clamp(rd.y,0.,1.));\n   \n    float d = RayMarch(ro, rd);\n    \n    \n    //d = min(d, length(rd.y));\n\n    if(d<MAX_DIST) {\n        vec3 p = ro + rd * d;\n        vec3 n = GetNormal(p);\n        vec3 r = reflect(rd, n);\n        float cd = (p.y); // distance from origin\n        vec3 light = normalize(vec3(0.3,1,0.1));\n        light = normalize(vec3(0.1,1,0.1));\n        //light = normalize(vec3(0.,1,0.));\n        vec3 light2 = normalize(vec3(0.0,-0.1,0.));\n        float ndl = dot(n, light);\n        float dif = ndl*.5+.5;\n        \n        float sha = calcShadow( p+n*0.001, light, 32.0 )+.4;\n        //float sha2 = calcShadow( p+n*0.001, light2, 32.0 )+.4;\n        //sha = mix(sha, sha2, 1.0-clamp(cd,0.9,1.));\n        //sha = sha;\n        float occ = 1.;//calcOcclusion( p, n, 0.5 );\n        dif = ndl*.5+.5;\n        float spec = dot(n, normalize(light-rd))*sha*occ;\n              dif *= sha*.5;\n        col = vec3(dif);\n        float vgrad = 1.0-(p.y*0.5+0.5);\n        if (cd < -0.999) {// floor\n            col = mix(vec3(0.176,0.176,0.184),vec3(0.557,0.471,0.573),  clamp(0.,1.,d*.1));\n            col = vec3(.01);\n        } else {\n            col *= mix(vec3(0.290,0.271,0.345), vec3(0.835,0.184,0.176)*5., pow(vgrad,2.));\n            col *= mix(vec3(0.290,0.271,0.345), vec3(0.996,0.596,0.408)*2., pow(vgrad,9.));\n        }\n        col += vec3(0.498,0.467,0.561)*.1; // ambient\n        col *= d*.3;\n        col += pow(spec,3.)*.5;\n        if (1 == 0)\n        {\n            float d2 = RayMarch(p, r);\n            if (d2<d) d = d2;\n            p = p + r * d;\n            n = GetNormal(p);\n            float ndl = dot(n, light);\n            float dif = ndl*.5+.5;\n\n            float sha = calcShadow( p+n*0.001, light, 32.0 )+.4;\n            //float sha2 = calcShadow( p+n*0.001, light2, 32.0 )+.4;\n            //sha = mix(sha, sha2, 1.0-clamp(cd,0.9,1.));\n            //sha = sha;\n            float occ = 1.;//calcOcclusion( p, n, 0.5 );\n            dif = ndl*.5+.5;\n            float spec = dot(n, normalize(light-rd))*sha*occ;\n                  dif *= sha*.5;\n            col = vec3(dif);\n            float vgrad = 1.0-(p.y*0.5+0.5);\n            if (cd < -0.999) {// floor\n                col = mix(vec3(0.176,0.176,0.184),vec3(0.557,0.471,0.573),  clamp(0.,1.,d*.1));\n                col = vec3(.01);\n            } else {\n                col *= mix(vec3(0.290,0.271,0.345), vec3(0.835,0.184,0.176)*5., pow(vgrad,2.));\n                col *= mix(vec3(0.290,0.271,0.345), vec3(0.996,0.596,0.408)*2., pow(vgrad,9.));\n            }\n            col += vec3(0.498,0.467,0.561)*.1; // ambient\n            col *= d*.3;\n            col += pow(spec,3.)*.5;\n        }\n        //fog\n        //col = mix(col, vec3(0.188,0.180,0.259), 1.0-exp(-d*.25));\n        col = mix(col, vec3(0.180,0.173,0.247), clamp(log(d*.25),0.7,1.));\n        //col = vec3(occ);\n    }\n    \n    //col = pow(col, vec3(.6));\t// gamma correction\n    //col = pow(col, vec3(.4545));\t// gamma correction\n    uv = fragCoord/iResolution.xy-0.5;\n    col *= 1.0-dot(uv,uv)*1.5; // vignette\n    \n    //float r = random(uv*20.*vec2(3.,1.));\n    //r = abs(floor(r));\n    //col.rgb = vec3(r);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}