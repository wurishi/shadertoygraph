{"ver":"0.1","info":{"id":"MtfcDB","date":"1506256549","viewed":88,"name":"bad mandelbrot","username":"mhiming","description":"wikipedia rip","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_ITER 1000.\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nconst vec2 offset = vec2(0.3019, 0.4859);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (2. * fragCoord.xy - iResolution.xy) / iResolution.y;  // [-1; 1]\n    \n    vec2 c = uv / pow(1. + iTime / 3., 1. + iTime / 3.) + offset;\n    \n    float iter = 0.;\n    \n    vec2 z;\n    \n    while (length(z) < 4. && iter < MAX_ITER) {\n        z = vec2(z.x * z.x - z.y * z.y, 2. * z.x * z.y) + c;\n        iter++;\n    }\n    \n    if (iter < MAX_ITER) {\n        iter += 1. - log(log(length(z)) / log(2.)) / log(2.); // smoothing\n        float hue = sqrt(iter / MAX_ITER);\n   \t\tfragColor = vec4(hsv2rgb(vec3(hue, 1., 1.)), 1.0);\n    }\n    // else black\n}","name":"Image","description":"","type":"image"}]}