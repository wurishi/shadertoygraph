{"ver":"0.1","info":{"id":"McGyzd","date":"1732237709","viewed":59,"name":"cool glowy stuffy","username":"fath11","description":"shader is taken from https://godotshaders.com/shader/highlight-canvasitem/\nthank you very much random stranger on the internet, we love you muah","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["glow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float Line_Smoothness = 0.045; // range from 0 to 0.1\nconst float Line_Width = 0.09; // range from 0 to 0.2\nconst float Brightness = 3.0;\nconst float Rotation_deg = 30.; // range from -90 to 90\nconst float Distortion = 1.8; // range from 1 to 2\nconst float Speed = 0.7;\nconst float Position = 0.; // range from 0 to 1\nconst float Position_Min = 0.25;\nconst float Position_Max = 0.5;\nconst float Alpha = 1.; // range from 0 to 1\nconst vec3 Glow_Color = vec3(0.6, 0.7, 0.9);\n\nvec2 rotate_uv(vec2 uv, vec2 center, float rotation, bool use_degrees){\n\t\tfloat _angle = rotation;\n\t\tif(use_degrees){\n\t\t\t_angle = rotation * (3.1415926/180.0);\n\t\t}\n\t\tmat2 _rotation = mat2(\n\t\t\tvec2(cos(_angle), -sin(_angle)),\n\t\t\tvec2(sin(_angle), cos(_angle))\n\t\t);\n\t\tvec2 _delta = uv - center;\n\t\t_delta = _rotation * _delta;\n\t\treturn _delta + center;\n\t}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.y = 1.0 - uv.y;\n\tvec2 center_uv = uv - vec2(0.5, 0.5);\n\tfloat gradient_to_edge = max(abs(center_uv.x), abs(center_uv.y));\n\tgradient_to_edge = gradient_to_edge * Distortion;\n\tgradient_to_edge = 1.0 - gradient_to_edge;\n\tvec2 rotaded_uv = rotate_uv(uv, vec2(0.5, 0.5), Rotation_deg, true);\n\t\n\tfloat remapped_position;\n\t{\n\t\tfloat output_range = Position_Max - Position_Min;\n\t\tremapped_position = Position_Min + output_range * Position;\n\t}\n\t\n\tfloat remapped_time = iTime * Speed + remapped_position;\n\tremapped_time = fract(remapped_time);\n\t{\n\t\tfloat output_range = 2.0 - (-2.0);\n\t\tremapped_time = -2.0 + output_range * remapped_time;\n\t}\n\t\n\tvec2 offset_uv = vec2(rotaded_uv.xy) + vec2(remapped_time, 0.0);\n\tfloat line = vec3(offset_uv, 0.0).x;\n\tline = abs(line);\n\tline = gradient_to_edge * line;\n\tline = sqrt(line);\n\t\n\tfloat line_smoothness = clamp(Line_Smoothness, 0.001, 1.0);\n\tfloat offset_plus = Line_Width + line_smoothness;\n\tfloat offset_minus = Line_Width - line_smoothness;\n\t\n\tfloat remapped_line;\n\t{\n\t\tfloat input_range = offset_minus - offset_plus;\n\t\tremapped_line = (line - offset_plus) / input_range;\n\t}\n\tremapped_line = remapped_line * Brightness;\n\tremapped_line = min(remapped_line, Alpha);\n\tremapped_line = clamp(remapped_line, -0.2, 1.0);\n\n\t// Sample the original texture\n\tvec4 original_color = texture(iChannel0, uv);\n\t\n\t// Apply the effect as an additive blend\n\tfragColor = original_color + vec4(vec3(remapped_line) * Glow_Color, 0.0);\n\tfragColor.a = original_color.a;\n}\n","name":"Image","description":"","type":"image"}]}