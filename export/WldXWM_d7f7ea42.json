{"ver":"0.1","info":{"id":"WldXWM","date":"1581083781","viewed":369,"name":"how to render a black hole -p1","username":"feefi","description":"how to render a black hole, part1 - ray marching tutorial","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvec3 black_hole_pos = vec3(0.0); \t\t//黑洞的位置\nfloat event_horizon_radius = 0.3;\t\t//黑洞的事件视界半径\nfloat HitTest(vec3 p){\n\treturn length(p-black_hole_pos) - event_horizon_radius;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //映射到0~1之间\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = uv*2.  - 1.;\t\n    uv.x *= iResolution.x / iResolution.y;\n    \n\t\n\tvec3 eye = vec3(0.,0.,-2);    //eye or camera postion 相机位置\n    vec3 sd = vec3(uv.x,uv.y,-1); //screen coord 屏幕坐标\n    vec3 ray_dir = normalize( sd - eye);//ray direction 射线方向\n    \n    vec3 col = vec3(0.95);\n    \n    const int maxStep = 200;//光线最大步进数\n    float step = 0.;  \n    for(int i = 0;i<maxStep;++i)\n    {\n        vec3 p = eye + ray_dir * step;\n        float hit = HitTest(p); //hit表示距物体的最小距离\n        step += hit; //ray marhing 光线步进\n        if(hit < 0.01){\n        \tcol = vec3(0.);\n            break;\n        }       \n    }\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}