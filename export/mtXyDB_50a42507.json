{"ver":"0.1","info":{"id":"mtXyDB","date":"1691109823","viewed":60,"name":"simple 2D noise","username":"Swifter","description":"noice","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float SIZE = 30.;\nconst int SEED = 69;\nconst int DEPTH = 3;\n\n#define PI2 6.28318530718\n\nfloat random(vec2 st, int seed) {\n    return fract(sin(dot((st.xy + float(seed)),\n        vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\nfloat getCornerDot(vec2 corner, vec2 pixel, int seed) {\n    float angle = PI2 * random(corner, seed);\n    vec2 vec = vec2(cos(angle), sin(angle));\n    return dot(vec, pixel - corner) * 0.5 + 0.5;\n}\n\nfloat noise2D(vec2 pixel, int seed) {\n    vec2 bottomLeft = vec2(floor(pixel));\n    vec2 topRight = vec2(ceil(pixel));\n    vec2 topLeft = vec2(bottomLeft.x, topRight.y);\n    vec2 bottomRight = vec2(topRight.x, bottomLeft.y);\n    \n    vec2 offset = smoothstep(0., 1., fract(pixel));\n    \n    float bottomLeftDot = getCornerDot(bottomLeft, pixel, seed);\n    float bottomRightDot = getCornerDot(bottomRight, pixel, seed);\n    float topLeftDot = getCornerDot(topLeft, pixel, seed);\n    float topRightDot = getCornerDot(topRight, pixel, seed);\n    \n    float top = mix(topLeftDot, topRightDot, offset.x);\n    float bottom = mix(bottomLeftDot, bottomRightDot, offset.x);\n    float middle = mix(bottom, top, offset.y);\n    \n    return middle;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 aspectUV = vec2(1., iResolution.y / iResolution.x) * uv;\n    \n    float f = noise2D(aspectUV * SIZE, SEED);\n    \n    for (int i = 2; i <= DEPTH; i++) {\n        float contribution = pow(2., float(i));\n        f += noise2D(aspectUV * SIZE * contribution / 2., SEED) / contribution;\n    }\n    \n    fragColor = vec4(f * vec3(1,1,1),1.0);\n}","name":"Image","description":"","type":"image"}]}