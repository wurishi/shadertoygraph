{"ver":"0.1","info":{"id":"4scGzf","date":"1451514629","viewed":1093,"name":"Xmas Tree 2","username":"rigster","description":"Twisting xmas tree effect. Merry Christmas!","likes":0,"published":1,"flags":64,"usePreview":0,"tags":["2d","warping","fog","tree","xmas","twisting"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3R4","filepath":"https://soundcloud.com/snoopdogg/blue-xmas-prod-fredwreck","previewfilepath":"https://soundcloud.com/snoopdogg/blue-xmas-prod-fredwreck","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"//this gives the shape of the tree\nfloat shapeTree(float y)\n{\n    return 0.25 + fract(-y * 5.0) / 10.0 - y / 4.0;\n}\n\nfloat fogColor(vec2 uvFog, float time)\n{\n    //the intensity of the fog\n    return clamp(0.5 * (0.8 - uvFog.y +\n\t   \t\t\t\t\t0.4 * (1.0 - length(uvFog)) * sin(sqrt(length(uvFog)) * 16.0 - time) + \n                       \t0.5 * (1.0 - length(vec2(1.0, 0.0) - uvFog)) * sin(sqrt(length(vec2(1.0, 0.0) - uvFog)) * 12.0 - time * 0.7) + \n                       \t0.5 * (1.0 - length(vec2(0.5, 0.0) - uvFog)) * sin(sqrt(length(vec2(0.5, 0.0) - uvFog)) * 7.0 - time * 0.9)          \n    \t\t\t\t), 0.0, 1.0);    \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t//coords to range [0,1]\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    //with a little horizontal twist for the fog\n    vec2 uvFog = vec2(uv.x + sin(uv.y * 5.0 + iTime * 0.5) * uv.y * 0.2 + sin(uv.y * 4.0 + iTime * 0.9) * uv.y * 0.3\n                      , uv.y);\n       \n        \n    //the final color of the background\n\tfragColor = vec4(fogColor(uvFog, iTime - 0.5), 0.1 * fogColor(uvFog, iTime), 0.5 * fogColor(uvFog, iTime + 0.5), 1.0);\n\n        \n    //rotation angle\n    float rad = iTime + uv.y;\n    \n    //the width of the rotated tree\n    float cosTime = cos(rad);\n    float sinTime = sin(rad);\n    \n    float rotTree = abs(shapeTree(uv.y) * cosTime);\n    \n    if (uv.x > 0.5 - rotTree && uv.x < 0.5 + rotTree)\n    {\n        //if inside the tree, draw in tree color with a lame shading and metallic shine effect \n        fragColor = vec4(0.0, 0.6 * abs(cos(rad + 0.3)) + 0.4, 0.0, 1.0) + fogColor(uvFog, iTime);\n    }\n\n    if(cosTime * sinTime >= 0.0)\n    {\n        //show the left edge\n        float distLeft = 0.01 * abs(sinTime) - abs(uv.x - 0.5 + rotTree);\n        //if(uv.x > 0.5 - rotTree - 0.02 * abs(sinTime) && uv.x < 0.5 - rotTree + 0.02 * abs(sinTime))\n        if(distLeft > 0.0)\n        {\n            float col = distLeft * 50.0;\n            fragColor += vec4(col, col, col, 1.0);\n        }\n    }\n    else\n    {\n        //show the right edge\n        float distRight = 0.01 * abs(sinTime) - abs(uv.x - 0.5 - rotTree);\n        //if(uv.x > 0.5 + rotTree - 0.02 * abs(sinTime) && uv.x < 0.5 + rotTree + 0.02 * abs(sinTime))\n        if(distRight > 0.0)\n        {\n            float col = distRight * 50.0;\n            fragColor += vec4(col, col, col, 1.0);\n        }\n    }\n        \n}\n","name":"","description":"","type":"image"}]}