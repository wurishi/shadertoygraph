{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"// Variables\nvec4 final_col = vec4(0.0); // <-- Fixed according to the suggestion by user inferno\n\n// Color palette arrays\n// Not sure how accurate they are but whatever, looks enough C64'ish to me\nvec4 PALETTE_RED[4];\nvec4 PALETTE_GREEN[4];\nvec4 PALETTE_BLUE[4];\nvoid buildPalette()\n{\n    // Red color palette\n    PALETTE_RED[0] = vec4( 0.533, 0.223, 0.196, 1.0);\n    PALETTE_RED[1] = vec4( 0.721, 0.411, 0.384, 1.0);\n    PALETTE_RED[2] = vec4( 0.749, 0.807, 0.447, 1.0);\n    PALETTE_RED[3] = vec4( 1.000, 1.000, 1.000, 1.0);\n    // Green color palette\n    PALETTE_GREEN[0] = vec4( 0.333, 0.627, 0.286, 1.0);\n    PALETTE_GREEN[1] = vec4( 0.580, 0.878, 0.537, 1.0);\n    PALETTE_GREEN[2] = vec4( 0.749, 0.807, 0.447, 1.0);\n    PALETTE_GREEN[3] = vec4( 1.000, 1.000, 1.000, 1.0);\n    // Blue color palette\n    PALETTE_BLUE[0] = vec4( 0.250, 0.192, 0.552, 1.0);\n    PALETTE_BLUE[1] = vec4( 0.470, 0.411, 0.768, 1.0);\n    PALETTE_BLUE[2] = vec4( 0.403, 0.713, 0.741, 1.0);\n    PALETTE_BLUE[3] = vec4( 1.000, 1.000, 1.000, 1.0);\n}\n\nvec4 rasterline(in vec2 xy, in int axis, in vec4 line_color, in float raster_size, in float line_pos, in float line_offset)\n{\n    float line_pos_final = line_pos + (line_offset);\n    float line_pos_max = line_pos_final + raster_size;\n    float line_pos_min = line_pos_final - raster_size;\n    \n    if (axis == 0 && xy.x < line_pos_max && xy.x > line_pos_min)\n    {\n        return line_color;\n    }\n    \n    if (axis == 1 && xy.y < line_pos_max && xy.y > line_pos_min)\n    {\n        return line_color;\n    }\n    \n    return vec4(0.0);\n}\n\nvoid rasterbar(in vec2 xy, in int axis, in vec4 palette_0[4], in vec4 palette_1[4], in float bar_pos, in float size_0)\n{\n    // Lol, I'm new to GLSL so I just dealt with my lack of knowledge and hardcoded this...\n    // This kinda loses it's point if I do it this way though. :( Maybe I'll figure this out later...\n    final_col += rasterline(xy, axis, palette_0[0], 0.015 * size_0, bar_pos, 0.2300 * size_0);\n    final_col += rasterline(xy, axis, palette_0[1], 0.005 * size_0, bar_pos, 0.2100 * size_0);\n    final_col += rasterline(xy, axis, palette_0[0], 0.005 * size_0, bar_pos, 0.2000 * size_0);\n    final_col += rasterline(xy, axis, palette_0[1], 0.015 * size_0, bar_pos, 0.1800 * size_0);\n    final_col += rasterline(xy, axis, palette_0[0], 0.005 * size_0, bar_pos, 0.1600 * size_0);\n    final_col += rasterline(xy, axis, palette_0[1], 0.015 * size_0, bar_pos, 0.1400 * size_0);\n    final_col += rasterline(xy, axis, palette_0[2], 0.005 * size_0, bar_pos, 0.1200 * size_0);\n    final_col += rasterline(xy, axis, palette_0[1], 0.005 * size_0, bar_pos, 0.1100 * size_0);\n    final_col += rasterline(xy, axis, palette_0[2], 0.015 * size_0, bar_pos, 0.0900 * size_0);\n    final_col += rasterline(xy, axis, palette_0[3], 0.005 * size_0, bar_pos, 0.0700 * size_0);\n    final_col += rasterline(xy, axis, palette_0[2], 0.005 * size_0, bar_pos, 0.0600 * size_0);\n    final_col += rasterline(xy, axis, palette_0[3], 0.005 * size_0, bar_pos, 0.0500 * size_0);\n    final_col += rasterline(xy, axis, palette_0[2], 0.005 * size_0, bar_pos, 0.0400 * size_0);\n    final_col += rasterline(xy, axis, palette_0[3], 0.020 * size_0, bar_pos, 0.0200 * size_0);\n    \n    final_col += rasterline(xy, axis, palette_1[0], 0.015 * size_0, bar_pos, -0.2300 * size_0);\n    final_col += rasterline(xy, axis, palette_1[1], 0.005 * size_0, bar_pos, -0.2100 * size_0);\n    final_col += rasterline(xy, axis, palette_1[0], 0.005 * size_0, bar_pos, -0.2000 * size_0);\n    final_col += rasterline(xy, axis, palette_1[1], 0.015 * size_0, bar_pos, -0.1800 * size_0);\n    final_col += rasterline(xy, axis, palette_1[0], 0.005 * size_0, bar_pos, -0.1600 * size_0);\n    final_col += rasterline(xy, axis, palette_1[1], 0.015 * size_0, bar_pos, -0.1400 * size_0);\n    final_col += rasterline(xy, axis, palette_1[2], 0.005 * size_0, bar_pos, -0.1200 * size_0);\n    final_col += rasterline(xy, axis, palette_1[1], 0.005 * size_0, bar_pos, -0.1100 * size_0);\n    final_col += rasterline(xy, axis, palette_1[2], 0.015 * size_0, bar_pos, -0.0900 * size_0);\n    final_col += rasterline(xy, axis, palette_1[3], 0.005 * size_0, bar_pos, -0.0700 * size_0);\n    final_col += rasterline(xy, axis, palette_1[2], 0.005 * size_0, bar_pos, -0.0600 * size_0);\n    final_col += rasterline(xy, axis, palette_1[3], 0.005 * size_0, bar_pos, -0.0500 * size_0);\n    final_col += rasterline(xy, axis, palette_1[2], 0.005 * size_0, bar_pos, -0.0400 * size_0);\n    final_col += rasterline(xy, axis, palette_1[3], 0.020 * size_0, bar_pos, -0.0200 * size_0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Don't mind my code, it's dumb. But hey, it's my first GLSL script, yay! This is fun.\n    buildPalette();\n    float aspectRatio = iResolution.x / iResolution.y;\n    vec2 xy_norm;\n\txy_norm.x = (fragCoord.x / iResolution.x) * aspectRatio;\n    xy_norm.y = fragCoord.y / iResolution.y;\n    vec2 xy_final = -1.0 + 2.0 * xy_norm;\n    \n    float bar_0_pos = 0.25 * sin(iTime * 2.5) + 0.625;\n    float bar_1_pos = 0.1 * sin(xy_final.x + iTime * 5.0);\n    float bar_2_pos = 0.1 * sin(xy_final.y + iTime * 2.5) - 0.625;\n    float bar_3_pos = 0.1 * cos((xy_final.y * 2.5) + iTime * 5.0) + 2.25;\n    float bar_4_pos = 0.1 * cos(iTime * 5.0) + 1.75;\n    float bar_5_pos = 0.25 * cos((xy_final.x * 2.0) + iTime * 2.5) + 1.125;\n    \n    if (xy_final.x < 0.75)\n    {\n   \t\trasterbar(xy_final, 1, PALETTE_BLUE, PALETTE_BLUE, bar_0_pos, 0.5);\n    \trasterbar(xy_final, 1, PALETTE_GREEN, PALETTE_GREEN, bar_1_pos, 0.5);\n        rasterbar(xy_final, 1, PALETTE_RED, PALETTE_BLUE, bar_2_pos, 1.0);\n    }\n    else\n    {\n        rasterbar(xy_final, 0, PALETTE_RED, PALETTE_GREEN, bar_5_pos, 0.5);\n        rasterbar(xy_final, 0, PALETTE_GREEN, PALETTE_BLUE, bar_4_pos, 0.5);\n        rasterbar(xy_final, 0, PALETTE_RED, PALETTE_RED, bar_3_pos, 0.5);\n    }\n    \n    fragColor = final_col;\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XsSSzy","date":"1413034980","viewed":738,"name":"C64 Rasterbars","username":"Harha","description":"I was going to render it using some GLSL functions but that failed due to my limited knowledge of GLSL. :( No idea how I could make an algorithm for this even though I have some experience in C64 Assembly programming, doesn't help in GLSL I guess. :D","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["c64","commodore","raster","fail","64","bar","rasterbar"],"hasliked":0,"parentid":"","parentname":""}}