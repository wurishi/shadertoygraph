{"ver":"0.1","info":{"id":"wlXSzB","date":"1563365153","viewed":160,"name":"Menger Sponge Ramp","username":"96logda","description":"This was made by using the Menger Sponge fractal algorithm.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fractal","cubes","ramp","mengersponge","colorshifting","softshadow","fakeao"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Copyright (c) 2019-07-14 - 2019-07-17 by Angelo Logahd\n//Portfolio: https://angelologahd.wixsite.com/portfolio\n//Based on https://iquilezles.org/articles/menger\n\n//Copyright (c) 2019-07-14 by Angelo Logahd\n//My orginal version: \n//http://glslsandbox.com/e#56111.0\n\n#define saturate(x) clamp(x, 0.0, 1.0)\n\nfloat hexPrism(vec3 p, float radius, float height, vec2 xyShapeMul)\n{\n     vec3 q = abs(p);\n     return max(q.z-height, max((q.x * xyShapeMul.x + q.y * xyShapeMul.y), q.y) - radius);\n}\n\nfloat ramp(vec3 p, vec2 size)\n{\n     return hexPrism(vec3(p), size.x, size.y, vec2(0.5, 0.8)); \n}\n\nvec4 map(in vec3 p)\n{\n    float d = ramp(p, vec2(1.5));\n    vec4 res = vec4(d, 1.0, 0.0, 0.0);\n\t\n    float s = 1.0;\n    for(int m = 0; m < 3; ++m)\n    {\n        vec3 a = mod(p * s, 2.0) - 1.0;\n        s *= 8.0;\n        vec3 r = abs(1.0 - 3.0 * abs(a));\n        float da = max(r.x, r.y);\n        float db = max(r.y, r.z);\n        float dc = max(r.z, r.x);\n        float c = (min(da, min(db,dc)) - 1.0) / s;\n\n        if(c > d)\n        {\n            d = c;\n            res = vec4(d, min(res.y, 0.2 * da * db * dc), (1.0+float(m)) / 4.0, 0.0);\n        }\n    }\n\t\n    return res;\n}\n\nvec4 intersect(in vec3 ro, in vec3 rd)\n{\n    float t = 0.0;\n    vec4 res = vec4(-1.0);\n    vec4 h = vec4(1.0);\n    for(int i = 0; i < 64; ++i)\n    {\n\t\tif( h.x < 0.002 || t > 10.0) \n\t\t{\n\t    \tbreak;\n\t\t}\n        h = map(ro + rd * t);\n        res = vec4(t, h.yzw);\n        t += h.x;\n    }\n\n    if(t > 10.0) \n    {\n\t\tres = vec4(-1.0);\n    }\n    \n    return res;\n}\n\nfloat softshadow(in vec3 ro, in vec3 rd, in float k)\n{\n    float res = 1.0;\n    float t = 0.0;\n    for (int i = 0; i < 32; ++i)\n    {\n\t\tvec3 pos = ro + rd * t;\n        float h = map(pos).x;\n        res = min(res, k * h / t);\n        if(res < 0.201)\n\t\t{\n            break;\n\t\t}\n        t += clamp(h, 0.01, 0.2);\n    }\n    return saturate(res);\n}\n\nvec3 calcNormal(in vec3 pos)\n{\n    vec3 eps = vec3(0.001, 0.0, 0.0);\n    vec3 n;\n    n.x = map(pos + eps.xyy).x - map(pos - eps.xyy).x;\n    n.y = map(pos + eps.yxy).x - map(pos - eps.yxy).x;\n    n.z = map(pos + eps.yyx).x - map(pos - eps.yyx).x;\n    return normalize(n);\n}\n\nvec3 render(in vec3 ro, in vec3 rd)\n{\n    vec3 color = vec3(0.0, 0.4, 1.0);\t\n    vec4 res = intersect(ro,rd);\n    if(res.x > 0.0)\n    {\n        const vec3 light = vec3(  0.577, 0.577, -0.577 );\n\t\t\n\t\tvec3 pos = ro + res.x * rd;\n\t\n        vec3 baseColor = vec3(sin(iTime * 0.8), cos(iTime * 0.5), tan(iTime * 0.1));\n\t\tvec3 ambient = vec3(0.2) * vec3(0.0, 1.0, 1.0);\t\n\t\t\n\t\tvec3 normal = calcNormal(pos);\n\t\tvec3 reflection = reflect(rd, normal);\n\t\n\t\tfloat occ = res.y;\n\t\tfloat shadow = softshadow(pos + 0.001 * normal, light, 32.0);\n\t\n\t\tvec3 diffuse = baseColor * shadow * occ;\n\t\t\t\n\t\tcolor = diffuse + ambient;\t\t\n\t\tcolor += 0.8 * smoothstep(0.0, 0.1, reflection.y) * softshadow(pos + 0.01 * normal, reflection, 2.0);\n    }\n    return pow(color, vec3(0.4545));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) \n{\n    vec2 p = 2.0*(fragCoord.xy / iResolution.xy) - 1.0;\n    p.x *= iResolution.x / iResolution.y;\n\n    // camera\n    vec3 ro = vec3(2.5, 3.0, -5.0);\n    vec3 ww = normalize(vec3(0.0) - ro);\n    vec3 uu = normalize(cross( vec3(0.0,1.0,0.0), ww ));\n    vec3 vv = normalize(cross(ww,uu));\n    vec3 rd = normalize( p.x*uu + p.y*vv + 2.5*ww );\n\n    vec3 color = render(ro, rd);    \n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}