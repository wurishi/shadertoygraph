{"ver":"0.1","info":{"id":"NljfRG","date":"1652370278","viewed":250,"name":"SDF for Koch snowflake","username":"sylvain69780","description":"SDF for Koch snowflake\n[url]https://en.wikipedia.org/wiki/Koch_snowflake[/url]\nUse the mouse to explore the SDF","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["2d","sdf","snowflake","koch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n    SDF for Koch snowflake\n    --------------------------------\n    \n    Related references:\n    \n    IQ Distance functions\n    https://iquilezles.org/articles/distfunctions2d\n\n    Koch Snowflake again - nimitz\n    https://www.shadertoy.com/view/Mlf3RX\n\n    shortest von Koch (122 chars) - FabriceNeyret2 \n    https://www.shadertoy.com/view/ll3XRn\n\n    Shader Coding: KIFS Fractals explained! - The Art of Code\n    https://youtu.be/il_Qg9AqQkE\n    \n*/\n\n\n// in order to get this shape _/\\_ we need to fold 2 times in opposite directions, first /\\ and then each side _/\\_\n\n\nvec2 koch(vec2 p, int n, out float d, out float w) {\n    const float s = 0.5, c = 0.866;\n    const mat2 m = mat2(c,-s,s,c);\n    p = abs(p);\n    p *= m*m;\n    p.y -= s;   \n    w = c;    \n    for (int i = 0; i<n; i++) {\n        p = m*vec2(abs(p.x) - w, -p.y);\n        w /= c+c;\n        p.x += w;\n    }\n    d = sign(p.y)*length(vec2(p.x-clamp(p.x,-w,w),p.y));  \n    return p;\n}\n\nfloat koch2(vec2 p, int n)\n{\n    float d,w;\n    vec2 q = koch(p,n,d,w);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // animation\n    float t = .5-.5*cos(fract(iTime*.05)*6.2832);\n    float scale = mix(1.5,.5,t);\n    float pixelsPerUnit = iResolution.y/(2.0*scale);\n    vec2 uv = (fragCoord-.5*iResolution.xy)/pixelsPerUnit;\n    const float k = 0.866;\n    vec2 shift = vec2(k,.5)*t;\n    uv += shift;\n    int n = 2+2*int(t*5.9);\n    float len = koch2(uv,n);\n    // With this construction, the flake is inside a 1 unit circle\n    // side of base triangle is sqrt(3)/2\n    // len = min(len,abs(length(uv)-1.));\n    // IQ coloring\n    vec3 col = vec3(1.0) - sign(len)*vec3(0.1,0.4,0.7);\n\tcol *= 1.0 - exp(-2.0*abs(len));\n\tcol *= 0.8 + 0.2*cos(128.0*abs(len));\n\tcol = mix(vec3(1), col, smoothstep(0.0,1.5,pixelsPerUnit*abs(len)-.5) );\n    // IQ \n    if( iMouse.z>0.001 )\n    {\n        vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n        m *= scale;\n        m += shift;\n        float d = koch2(m,n);\n        col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 1.5, pixelsPerUnit*abs(length(uv-m)-abs(d))));\n        col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 1.5, pixelsPerUnit*length(uv-m)));\n    }\n\tfragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}