{"ver":"0.1","info":{"id":"4ct3W8","date":"1711629686","viewed":55,"name":"appalotp3_lifgra","username":"dewa","description":"ombre dur","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["ombredur"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Modeling - 2024.02.06\n// Eric Galin\n\n// Rotation matrix around z axis\n// a : Angle\nmat3 Rz(float a)\n{\n  float sa=sin(a);float ca=cos(a);\n  return mat3(ca,sa,0.,-sa,ca,0.,0.,0.,1.);\n}\n\nstruct Ray {\nvec3 ro; // Ray origin\nvec3 rd; // Direction\n};\n\n// Compute a point on the ray\n// ray : Ray\n// t   : depth\nvec3 Point(Ray ray,float t)\n{\n  return ray.ro+t*ray.rd;\n}\n\n// Compute the ray\n//     m : Mouse position\n//     p : Pixel\nRay CreateRay(vec2 m,vec2 p)\n{\n  float a=3.*3.14*m.x; \n  float le=3.5;\n  \n  // Origin\n  vec3 ro=vec3(35.,0.,10.)*Rz(a);\n  \n  // Target point\n  vec3 ta=vec3(0.,0.,3.);\n  \n  // Orthonormal frame\n  vec3 w=normalize(ta-ro);\n  vec3 u=normalize(cross(w,vec3(0.,0.,1.)));\n  vec3 v=normalize(cross(u,w));\n  vec3 rd=normalize(p.x*u+p.y*v+le*w);\n  return Ray(ro,rd);\n}\n\n// Primitives\n\n// Sphere\n// p : point\n// c : center of skeleton\n// r : radius\nfloat Sphere(vec3 p,vec3 c,float r)\n{\n  return length(p-c)-r;\n}\n\n// Plane\n// p : point\n// c : center of skeleton\n// n : Normal\nfloat Plane(vec3 p,vec3 c,vec3 n)\n{\n  return dot(p-c,n);\n}\n\n// Operators\n\n// Union\n// a,b : field function of left and right sub-trees\nfloat Union(float a,float b)\n{\n  return min(a,b);\n}\n\n// Union, extension to four sub-trees\n// a,b,c : field function of left and right sub-trees\nfloat Union(float a,float b,float c,float d)\n{\n  return min(min(a,b),min(c,d));\n}\n\n// Difference\n// a,b : field function of left and right sub-trees\nfloat Difference(float a,float b)\n{\n  return max(a,-b);\n}\n\nconst int MAX_MARCHING_STEPS = 255;\nconst float MIN_DIST = 0.0;\nconst float MAX_DIST = 100.0;\nconst float PRECISION = 0.001;\nconst float EPSILON = 0.0005;\nconst float PI = 3.14159265359;\nconst vec3 COLOR_BACKGROUND = vec3(.741, .675, .82);\nconst vec3 COLOR_AMBIENT = vec3(0.42, 0.20, 0.1);\nconst vec3 COLOR_BODY = vec3(1);\nconst vec3 COLOR_EYE = vec3(0);\nconst vec3 COLOR_NOSE = vec3(0.8, 0.3, 0.1);\nconst vec3 COLOR_ARM = vec3(0.2);\nconst vec3 COLOR_HAT = vec3(0);\n\nstruct Surface {\n  float sd; // signed distance\n  vec3 col; // diffuse color\n};\n\nmat2 rotate2d(float theta) {\n  float s = sin(theta), c = cos(theta);\n  return mat2(c, -s, s, c);\n}\n\nfloat opUnion(float d1, float d2) { \n  return min(d1, d2);\n}\n\nSurface opUnion(Surface d1, Surface d2) {\n  if (d2.sd < d1.sd) return d2;\n  return d1;\n}\n\nSurface opSmoothUnion( Surface d1, Surface d2, float k ) {\n  Surface s;\n  float h = clamp( 0.5 + 0.5*(d2.sd-d1.sd)/k, 0.0, 1.0 );\n  s.sd = mix( d2.sd, d1.sd, h ) - k*h*(1.0-h);\n  s.col = mix( d2.col, d1.col, h ) - k*h*(1.0-h);\n\n  return s;\n}\n\nvec3 opFlipX(vec3 p) {\n  p.x *= -1.;\n  return p;\n}\n \nfloat sdSphere(vec3 p, float r, vec3 offset)\n{\n  return length(p - offset) - r;\n}\n\nfloat sdCone( vec3 p, vec2 c, float h, vec3 offset )\n{\n  p -= offset;\n  float q = length(p.xy);\n  return max(dot(c.xy,vec2(q,p.z)),-h-p.z);\n}\n\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r, vec3 offset )\n{\n  p -= offset;\n  vec3 pa = p - a, ba = b - a;\n  float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n  return length( pa - ba*h ) - r;\n}\n\nfloat sdCappedCylinder(vec3 p, float h, float r, vec3 offset)\n{\n  p -= offset;\n  vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(h,r);\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nSurface sdBody(vec3 p) {\n  Surface bottomSnowball = Surface(sdSphere(p, 1.2, vec3(0, -1, 0)), COLOR_BODY);\n  Surface topSnowball = Surface(sdSphere(p, 0.75, vec3(0, 0.5, 0)), COLOR_BODY);\n  \n  return opSmoothUnion(bottomSnowball, topSnowball, 0.2);\n}\n\nSurface sdEye(vec3 p) {\n  float d = sdSphere(p, .1, vec3(-0.2, 0.6, 0.7));\n  return Surface(d, COLOR_EYE);\n}\n\nSurface sdNose(vec3 p) {\n  float noseAngle = radians(75.);\n  float d = sdCone(p, vec2(sin(noseAngle), cos(noseAngle)), 0.5, vec3(0, 0.4, 1.2));\n  return Surface(d, COLOR_NOSE);\n}\n\nSurface sdArm(vec3 p) {\n  float mainBranch = sdCapsule(p, vec3(0, 0.5, 0), vec3(0.8, 0, 0.), 0.05, vec3(-1.5, -0.5, 0));\n  float smallBranchBottom = sdCapsule(p, vec3(0, 0.1, 0), vec3(0.5, 0, 0.), 0.05, vec3(-2, 0, 0));\n  float smallBranchTop = sdCapsule(p, vec3(0, 0.3, 0), vec3(0.5, 0, 0.), 0.05, vec3(-2, 0, 0));\n  \n  float d = opUnion(mainBranch, smallBranchBottom);\n  d = opUnion(d, smallBranchTop);\n  return Surface(d, COLOR_ARM);\n}\n\nSurface sdHat(vec3 p) {\n  Surface bottom = Surface(sdCappedCylinder(p, 0.5, 0.05, vec3(0, 1.2, 0)), COLOR_HAT);\n  Surface top = Surface(sdCappedCylinder(p, 0.3, 0.3, vec3(0, 1.5, 0)), COLOR_HAT);\n  \n  return opUnion(bottom, top);\n}\n\nSurface sdSnowman(vec3 p) {\n  Surface body = sdBody(p);\n  Surface leftEye = sdEye(p);\n  Surface rightEye = sdEye(opFlipX(p));\n  Surface nose = sdNose(p);\n  Surface leftArm = sdArm(p);\n  Surface rightArm = sdArm(opFlipX(p));\n  Surface hat = sdHat(p);\n\n  Surface co = body;\n  co = opUnion(co, leftEye);\n  co = opUnion(co, rightEye);\n  co = opUnion(co, nose);\n  co = opUnion(co, hat);\n  co = opUnion(co, leftArm);\n  co = opUnion(co, rightArm);\n  \n  return co;\n}\n\n\n\n\nSurface scene(vec3 p) {\n  return sdSnowman(p);\n}\n\n\n// Potential field of the object\n// p : point\nfloat object(vec3 p)\n{\nfloat v = Sphere(p, vec3(3.,0.,6.), 1.);\n    v = Union(v, sdSnowman(p).sd); // Utilisez sdSnowman(p).sd pour obtenir la distance signée\n    \n     v = Union(v, Plane(p, vec3(0.0, 0.0, -1.0), vec3(0.0, 0.0, 1.0)));\n     \n    return v;\n \n}\n\nSurface rayMarch(vec3 ro, vec3 rd) {\n  float depth = MIN_DIST;\n  Surface co; // closest object\n\n  for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n    vec3 p = ro + depth * rd;\n    co = scene(p);\n    depth += co.sd;\n    if (co.sd < PRECISION || depth > MAX_DIST) break;\n  }\n  \n  co.sd = depth;\n  \n  return co;\n}\n\n// Analysis of the scalar field\n\nconst int Steps=200;// Number of steps\nconst float Epsilon=.01;// Marching epsilon\n\n// Object normal\n// p : point\nvec3 ObjectNormal(vec3 p)\n{\n  const float eps=.001;\n  vec3 n;\n  float v=object(p);\n  n.x=object(vec3(p.x+eps,p.y,p.z))-v;\n  n.y=object(vec3(p.x,p.y+eps,p.z))-v;\n  n.z=object(vec3(p.x,p.y,p.z+eps))-v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\n// ray : Ray \n// e : Maximum distance\n// h : hit\n// s : Number of steps\nfloat SphereTrace(Ray ray,float e,out bool h,out int s)\n{\n  h=false;\n  \n  // Start at the origin\n  float t=0.;\n  \n  for(int i=0;i<Steps;i++)\n  {\n    s=i;\n    vec3 p=Point(ray,t);\n    float v=object(p);\n    // Hit object\n    if(v<0.)\n    {\n      h=true;\n      break;\n    }\n    // Move along ray\n    t+=max(Epsilon,v);\n    // Escape marched too far away\n    if(t>e)\n    {\n      break;\n    }\n  }\n  return t;\n}\n\n// Lighting\n\n// Background color\n// d : Ray direction\nvec3 Background(vec3 d)\n{\n  return mix(vec3(.45,.55,.99),vec3(.65,.69,.99),d.z*.5+.5);\n}\n\n// Fonction Shadow\n// p : Point\n// rd : Direction du rayon\nfloat Shadow(vec3 p, vec3 rd)\n{\n    // Définir la position de la lumière ponctuelle\n    const vec3 lp = vec3(5.0, 10.0, 30.0);\n    \n    // Direction de la lumière\n    vec3 l = normalize(lp - p);\n    \n    // Définir un petit décalage pour éviter l'auto-occultation\n    p += 0.001 * l;\n    \n    // Vérifier si le point est éclairé ou dans l'ombre\n    bool hit;\n    int s;\n    float t = SphereTrace(Ray(p, l), 75.0, hit, s);\n    \n    // Si le point est dans l'ombre, retourner 0.0, sinon retourner 1.0\n    return hit ? 0.0 : 1.0;\n}\n\n// Shading and lighting\n// p : Point\n// n : Normal at point\n// e : Eye direction\nvec3 Shade(vec3 p,vec3 n,vec3 e)\n{\n  // Point light\n  const vec3 lp=vec3(5.,10.,30.);\n  \n  // Light direction to point light\n  vec3 l=normalize(lp-p);\n  \n  // Ambient color\n  vec3 ambient=.25+.25*Background(n);\n  \n  // Shadow computation\n  float shadow=1.0;\n  // Phong diffuse\n  vec3 diffuse=.35*clamp(dot(n,l),0.,1.)*vec3(1.,1.,1.);\n  \n  // Specular\n  vec3 r=reflect(e,n);\n  vec3 specular=.15*pow(clamp(dot(r,l),0.,1.),35.)*vec3(1.,1.,1.);\n  vec3 c=ambient+shadow*(diffuse+specular);\n    \n  return c;\n}\n\n// Ombres dures, fonction Shadow\nfloat Shadow(vec3 p, vec3 n, vec3 lp) {\n    Ray shadowRay;\n    shadowRay.ro = p + n * Epsilon; // Décalage de l'origine légèrement pour éviter l'auto-occultation\n    shadowRay.rd = normalize(lp - p);\n    \n    bool hit;\n    int s;\n    float t = SphereTrace(shadowRay, length(lp - p), hit, s);\n    \n    if (hit && t < length(lp - p)) {\n        return 0.0; // Le point est dans l'ombre\n    } else {\n        return 1.0; // Le point est éclairé par la lumière ponctuelle\n    }\n}\n\n// Image\nvoid mainImage(out vec4 color, in vec2 pxy)  \n{\n    // Pixel\n    vec2 pixel = (-iResolution.xy + 2.0 * pxy) / iResolution.y;\n\n    // Mouse\n    vec2 m = iMouse.xy / iResolution.xy;\n\n    // Camera\n    Ray ray = CreateRay(m, pixel);\n\n    // Hit and number of steps\n    bool hit;\n    int s;\n\n    // Trace ray\n    float t = SphereTrace(ray, 75.0, hit, s);\n\n    // Shade background\n    vec3 rgb = Background(ray.rd);\n\n    if (hit)\n    {\n        // Position\n        vec3 p = Point(ray, t);\n\n        // Compute normal\n        vec3 n = ObjectNormal(p);\n\n        // Position de la lumière\n        vec3 lp = vec3(5.0, 10.0, 5.0); // Exemple de position de la lumière ponctuelle\n\n        // Ombre dure\n        float shadow = Shadow(p, n, lp);\n\n        // Shade object with light and shadow\n        rgb = Shade(p, n, ray.rd) * shadow;\n    }\n\n    color = vec4(rgb, 1.0);\n}","name":"Image","description":"","type":"image"}]}