{"ver":"0.1","info":{"id":"lfsGWN","date":"1703097203","viewed":57,"name":"colorful star","username":"nayk","description":"copypast and combination","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["colorful","rotate","galaxy","stars"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*original https://www.shadertoy.com/view/lslyRn https://www.shadertoy.com/view/DlycWR https://www.shadertoy.com/view/wly3Dy https://www.shadertoy.com/view/4tyfWy*/\n\n#define R(p,a,r)mix(a*dot(p,a),p,cos(r))+sin(r)*cross(p,a) \n#define H(h)(cos((h)*6.3+vec3(0,23,21))*.5+.5)\n#define PI 3.1415926538\n\nvec2 cMul(in vec2 z1, in vec2 z2) {\n    return  mat2(z1,-z1.y,z1.x) * z2;\n}\n\nvec2 cDiv(in vec2 z1, in vec2 z2) {\n    return z1 * mat2(z2,-z2.y,z2.x) / dot(z2,z2);\n}\n#define BURST\n#define NUM_LAYERS 5.\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c,-s,s,c);\n}\n\nfloat Star(vec2 uv, float a, float sparkle) {\n    vec2 av1 = abs(uv);\n \tvec2 av2 = abs(uv*Rot(a));\n    vec2 av = min(av1, av2);\n    \n    vec3 col = vec3(0);\n    float d = length(uv);\n    float star = av1.x*av1.y;\n    star = max(av1.x*av1.y, av2.x*av2.y);\n    star = max(0., 1.-star*1e3);\n    \n    float m = min(5., 1e-2/d);\n    \n    return m+pow(star, 4.)*sparkle;\n}\n\nfloat Hash21(vec2 p) {\n    p = fract(p*vec2(123.34,145.54));\n    p += dot(p, p+45.23);\n    return fract(p.x*p.y);\n}\n\nvec3 StarLayer(vec2 uv, float t, float sparkle) {\n    vec2 gv = fract(uv)-.5;\n    vec2 id = floor(uv);\n\tvec3 col = vec3(0);\n    \n    #ifndef BURST\n    t = 0.;\n    #endif\n    \n    for(int y=-1; y<=1; y++) {\n        for(int x=-1; x<=1; x++) {\n            vec2 offs = vec2(x, y);\n            float n = Hash21(id-offs);\n\t\t\tvec3 N = fract(n*vec3(10,100,1000));\n            vec2 p = (N.xy-.5)*.7;\n            \n            float brightness = Star(gv-p+offs, n*6.2831+t, sparkle);\n            vec3 star = brightness*vec3(.6+p.x, .4, .6+p.y)*N.z*N.z;\n            \n            \n            \n            star *= 1.+sin((t+n)*20.)*smoothstep(sin(t)*.5+.5, 1., fract(10.*n));\n            \n            float d = length(gv+offs);\n            \n            col += star*smoothstep(1.5, .8, d);\n        }\n    }\n    return col;\n}\nfloat cheap_star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\n\nvoid mainImage(out vec4 O, vec2 C)\n{\n    O=vec4(0);\n     vec2 uv = (C-.5*iResolution.xy)/iResolution.y;\n     vec2 uv2 = (C-.5*iResolution.xy)/iResolution.y;\n    vec3 p,q,r=iResolution,\n    d=normalize(vec3((C*2.-r.xy)/r.y,1));  \n     vec2 p2 = 12. * (2.*C-iResolution.xy) / max(iResolution.x, iResolution.y);\n    vec2 unit = vec2(1., 0.);\n    p2= cDiv(p2 + unit, p2 - unit); // 2 fixed points, loxodromic\n    \n    // just on length is hyerbolic\n    float theta = atan(p2.y, p2.x);\n    float len = length(p2);\n    float x_index = sin( PI* ( theta * 12. / PI - iTime ));\n    float y_index = sin( PI* ( log(len) * 4.  ));\n   \n   \n    \n    float v = x_index*y_index;\n   \n   vec2 M = iTime/iResolution.xy;\n    \n    M *= 100.;\n    \n\tfloat t = -iTime*.3;\n\t\n    float twirl = sin(t*.1);\n    twirl *= twirl*twirl*sin(dot(uv,uv));\n    uv *= Rot(-t*.2);\n    \n    uv *= 2.+sin(t*.05);\n    \n    vec3 col = vec3(0);\n    float speed = -.2;\n    #ifdef BURST\n    speed = .1;\n    float bla = sin(t+sin(t+sin(t)*.5))*.5+.5;\n    float d2 = dot(uv,uv);\n    \n    float a = atan(uv.x, uv.y);\n    uv /= d2;\n    float burst = sin(iTime*.05);\n    uv *= burst+.2;\n    #endif\n    \n    float stp = 1./NUM_LAYERS;\n        \n    for(float i=0.; i<1.; i+=stp) {\n    \tfloat lt = fract(t*speed+i);\n        float scale = mix(10., .25, lt);\n        float fade = smoothstep(0., .4, lt)*smoothstep(1., .95, lt); \n        vec2 sv = uv*scale+i*134.53-M;\n        //sv.x += t;\n        col += StarLayer(sv, t, fade)*fade;\n    }\n    \n    #ifdef BURST\n    //t = iTime*.5;\n    float burstFade = smoothstep(0., .02, abs(burst));\n    float size = .9*sin(t)+1.;\n    size = max(size, sqrt(size));\n    float fade = size/d2;\n    col *= mix(1., fade, burstFade);\n    col += fade*.2*vec3(1., .5, .1)*bla*burstFade;\n    \n  \n    \n    a -= M.x*.1;\n    float rays = sin(a*5.+t*3.)-cos(a*7.-t);\n    rays *= sin(a+t+sin(a*4.)*10.)*.5+.5;\n    col += rays*bla*.1*burstFade;\n    col += 1.-burstFade;\n    #else\n    col *= 4.;\n    #endif\n    for(float i=0.,a,s,e,g=0.;\n        ++i<110.;\n        O.xyz+=mix(vec3(1),H(g*.1),sin(.8))*1./e/8e3\n    )\n    {\n        p=g*d;\n        p.z+=iTime*0.5;\n        a=20.;\n        p=mod(p-a,a*2.)-a;\n        s=5.;\n        for(int i=0;i++<8;){\n            p=.3-abs(p);\n            \n            p.x<p.z?p=p.zyx:p;\n            p.z<p.y?p=p.xzy:p;\n            \n            s*=e=1.4+sin(iTime*.234)*.1;\n            p=abs(p)*e-\n                vec3(\n                    5.+sin(iTime*.3+.5*cos(iTime*.3))*3.,\n                   100,\n                    8.+cos(iTime*.2)*5.\n                 )*col;\n         }\n         g+=e=length(p.yz)/s;\n           uv2 *= 2.0 * ( cos(iTime * 2.0) -2.5);\n    \n    // anim between 0.9 - 1.1\n    float anim = sin(iTime * 12.0) * 0.1 + 1.0;    \n\n    O+= vec4(cheap_star(uv2,anim) * vec3(0.55,0.5,0.55)*0.21+col*0.001, 1.0);\n         \n  }   \n    }","name":"Image","description":"","type":"image"}]}