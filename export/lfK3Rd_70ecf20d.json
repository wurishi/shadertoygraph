{"ver":"0.1","info":{"id":"lfK3Rd","date":"1713196853","viewed":102,"name":"Maze runner 4","username":"ukeshet","description":"Random single-solution maze.\nWood+grass texture and rudimentary lighting added to https://www.shadertoy.com/view/Mcy3Rd\nMouse moves camera.","likes":8,"published":1,"flags":32,"usePreview":1,"tags":["3d","texture","random","maze"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","previewfilepath":"/media/ap/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Random single-solution maze. Demo for ICP course by ukeshet.\n// Wood (Ch1) +grass (Ch2) texture and rudimentary lighting added to my\n// Maze runner 3 (https://www.shadertoy.com/view/Mcy3Rd).\n// Buffer A (see documentation, Ch0) builds the maze. Image ray-marches. \n// Mouse moves camera.\n\nvec4 M;       // Maze texture\nvec3 ro,rd,R; // Ray-march parameters (origin, step, position)\nvec2 s;       // Maze x-y position.\nfloat d,x,y,L,Ly,X,Y;\n\nfloat Dist(vec3 a) { // Distance from grass (z=5), walls (-1<z<1), and ball (.5*cell size)\n    float D=max(0.,5.-a[2]);\n    vec3 q, q0=a-vec3((1.0+floor(d+x/X)-d)*2.*X/L-1.,(1.0+float(int(y/Y)))*2.*Y/Ly-1.,0.);\n    if (M[0]==0.) {q=abs(q0)-vec3(.35*X/L,8.*Y/Ly,1.); D=min(D,length(max(q,0.0))+min(max(q.x,max(q.y,q.z)),0.0));}\n    if (M[1]==0.) {q=abs(q0)-vec3(8.*X/L,.35*Y/Ly,1.); D=min(D,length(max(q,0.0))+min(max(q.x,max(q.y,q.z)),0.0));}\n    return min(D,length((a-vec3(0.7*X/L,2.*(s[1]+.4)*Y/Ly-1.,.0))/vec3(Ly/L,1.,1.))-.5*Y/Ly);\n}\n\nvec3 Perp(vec3 p) {  // Normal vector perpendicular to nearest object\n    vec2 e=vec2(.001, 0);\n    return normalize(Dist(p)-vec3(Dist(p-e.xyy),Dist(p-e.yxy),Dist(p-e.yyx)));\n}\n\nvoid mainImage(out vec4 Col, in vec2 Coo)\n{\n    vec4 s0=texelFetch(iChannel0,ivec2(1,h+1),0); // get solution path length.\n    float D,H,r,v=8.,t=iTime,p=mod(5.*wf+v*iTime,s0[2]+1.); // p=present path position.\n    x=Coo.x;y=Coo.y;L=iResolution.x;Ly=iResolution.y;X=L/wf;Y=iResolution.y/float(h);\n    vec4 s1=texelFetch(iChannel0,ivec2(int(mod(p,L)),h+1+int(p/L)),0); // get maze xy near p.\n    int i, xy1=floatBitsToInt(s1[0]), xy2=floatBitsToInt(s1[1]); // intepolate xy at (p,p+1).\n    s=mix(vec2(xy1&0xFFFF,(xy1>>16)&0xFFFF),vec2(xy2&0xFFFF,(xy2>>16)&0xFFFF),fract(p)); \n    d=s[0]; M=texelFetch(iChannel0,ivec2(int(mod((x-.5*L)/X+d,float(w))),int(y/Y)),0); // get maze status at (x,y).\n    vec2 uv=(2.*Coo-iResolution.xy)/iResolution.xy; H=15.; r=0.; // prepare ray marching. \n    if(iMouse.z<=0.) ro=vec3(0.,0.,-H); else ro=vec3(2.*iMouse.xy/iResolution.xy-1.,-H); // camera position.\n    rd=normalize(vec3(uv.xy-ro.xy,H)); for (i=0; i<500; i++) { // Ray marching/sphere tracing.\n        R=ro+r*rd; D=Dist(R); r+=D; if (D<.001||r>(H+5.)) break;}\n    if (length((R-vec3(0.7*X/L,2.*(s[1]+.4)*Y/Ly-1.,.0))/vec3(Ly/L,1.,1.))<.53*Y/Ly) // (x,y) at red sphere.\n        Col=vec4(1.,0,0,1);\n    else if (r<H+3.) { // Marching stopped before grass, i.e. at a wall\n        vec3 P=.2*Perp(R), aP=4.*abs(P);\n        vec4 cXZ=texture(iChannel1,vec2(3.*(x+X*d)*2./L,60.*R.z/Ly));\n        vec4 cYZ=texture(iChannel1,vec2(600.*R.y/Ly,60.*R.z/Ly));\n        vec4 cXY=texture(iChannel1,vec2(3.*(x+X*d)*2./L,160.*R.y/Ly));      \n        Col = (cYZ*(aP.x-P.x)+cXZ*(aP.y-P.y)+cXY*(aP.z-P.z));\n    } // else marching stopped at grass:\n    else Col = vec4(.3,.6,.3,1.)*texture(iChannel2,vec2(10.*(x+X*d)*2./L,10.*y/L));\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Build random single-solution maze using recursiveless depth-first search.\n// Open paths along x (Col[0]=1) or y (Col[1]=1) encoded at (x<w,y<h).\n// Solution encoded starting y>=h+1 as Col[0]=(x,y)(t); Col[1]=(x,y)(t+1).\n// Bitwise operation used to keep memory down to a minimal int M[w*h].\n\nvoid mainImage(out vec4 Col, in vec2 Coo)\n{\n    vec4 prev=texelFetch(iChannel0, ivec2(Coo), 0);\n    if (iFrame!=0)\n        Col=prev;\n    else {\n        int cx=int(Coo.x),cy=int(Coo.y);\n        if (((cy<h+3+int(float(h*w)/iResolution.x))&&(cy>h))||((cy<h)&&(cx<w))) {\n            int i,k,m,tmp,p[4],q,M[w*h],d,u,go,L=int(iResolution.x);\n            for (i=0; i<h*w; i++) {\n                for (k=3;k>=0;k--) p[k]=k;\n                for (k=3;k>0;k--) {m=int(hash(5*i+3*k)*float(k+1)); q=p[k];p[k]=p[m];p[m]=q;}\n                M[i]=((p[0]&3)<<24)|((p[1]&3)<<26)|((p[2]&3)<<28)|((p[3]&3)<<30);\n            }\n            int x=0,y=h/2,j=0,s=1,sh,dx,dy,x1,y1,u1,x2,y2;\n            u=x*h+y; M[u]|=(1<<14);Col=vec4(0.,0.,0.,1.);\n            M[u]=(M[u]&~(127<<0))|((x&127)<<0); M[u]=(M[u]&~(63<<8))|((y&63)<<8);\n            while (s<w*h) {\n                go=1; u=x*h+y;\n                if ((y==h/2)&&(x==w-1)) {\n                    go=0;x1=x;y1=y;x2=w;y2=h/2; if((cx==x1)&&(cy==y1)) Col[0]=1.;\n                    for (k=j; k>=0; k--) {\n                        if ((cx==(k%L))&&(cy==h+1+k/L)) \n                            Col=vec4(intBitsToFloat((x1&0xFFFF)|((y1&0xFFFF)<<16)),intBitsToFloat((x2&0xFFFF)|((y2&0xFFFF)<<16)),float(j),1.);\n                        x2=x1;y2=y1;u1=x1*h+y1;x1=(M[u1]>>0)&127;y1=(M[u1]>>8)&63;\n                    }\n                }\n                if ((sh=(M[u]>>21)&7)<4) d=(M[u]>>(24+2*sh))&3;\n                else go=0;\n                if (go==0) {j--;x=(M[u]>>0)&127;y=(M[u]>>8)&63;}\n                else {\n                    dx=dy=0;M[u]=(M[u]&~(7<<21))|(((M[u]>>21)&7)+1)<<21;\n                    if ((d==0)&&(y<h-1)) {if(((M[x*h+y+1]>>14)&1)==0) dy=1;}\n                    else if((d==1) && (x<w-1)) {if(((M[(x+1)*h+y]>>14)&1)==0) dx=1;}\n                    else if((d==2) && (y>0)) {if(((M[x*h+y-1]>>14)&1)==0) dy=-1;}\n                    else if((d==3) && (x>0)) {if(((M[(x-1)*h+y]>>14)&1)==0) dx=-1;}\n                    if ((dx!=0)||(dy!=0)) {\n                        s++;j++;x+=dx;y+=dy;u=x*h+y;M[u]|=(1<<14);\n                        M[u]=(M[u]&int(~(127<<0)))|((x-dx)&127)|(((y-dy)&63)<<8);\n                        if ((cx==min(x,x-dx))&&(cy==min(y,y-dy))) \n                            {if (dx!=0) Col[0]=1.; if (dy!=0) Col[1]=1.;} \n                    }\n                }\n            }\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define w 35\n#define wf 24.\n#define h 16\n\nfloat hash(int seed) { // Simple PRNG\n    int p=23856097;\n    int q=seed*p;\n    q=(q^(q>>15))*(q|0x5D588B65);\n    return fract(float(q)/float(0x7FFFFFFF));\n}","name":"Common","description":"","type":"common"}]}