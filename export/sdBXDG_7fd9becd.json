{"ver":"0.1","info":{"id":"sdBXDG","date":"1655715371","viewed":103,"name":"Julia Dance Lights","username":"csblo","description":"Julia ensemble","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["julia","mandelbrot","light"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//const float cx = 0.285;\n\n//const float cy = 0.01;\n\n//const float cx = -0.70176;\n\n//const float cy = -0.3842;\n\n \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n\n{\n\n    float sx = -0.70176;\n\n    float sy = -0.3842;\n\n   \n\n    float cx = sx + cos(iTime) * 0.01;\n\n    float cy = sy + sin(iTime) * 0.01;\n\n   \n\n    // Normalized pixel coordinates (from 0 to 1)\n\n    //vec2 uv = fragCoord/iResolution.xy;//- (iTime * 0.1);\n\n   \n\n    float scale = 1. + iTime * 0.05;\n\n    float resMin = scale * min(iResolution.x, iResolution.y);\n\n    vec2 uv = (2.*fragCoord - iResolution.xy)/resMin;\n\n   \n\n \n\n    // Time varying pixel color\n\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n   \n\n    float iter = .0;\n\n    float max_iter = 800.;\n\n   \n\n    float zx = uv.x;\n\n    float zy = uv.y;\n\n   \n\n    \n\n    \n\n    while (zx*zx + zy*zy < 4. && iter < max_iter)\n\n    {\n\n        float xtemp = zx * zx - zy * zy;\n\n        zy = 2. * zx * zy + cy;\n\n        zx = xtemp + cx;\n\n        iter++;\n\n    }\n\n   \n\n    float f = iter / max_iter;\n\n   \n\n    //if (iter == max_iter)\n\n    //    fragColor = vec4(0.);\n\n    //else\n\n    fragColor = vec4(0.4*f*cos(iTime * 2.),0.2*f*sin(iTime),0.2*f, 1.);\n\n    fragColor = vec4(fragColor.xy * abs(uv.xy), fragColor.z * abs(uv.x), 1.) * 100.;\n\n \n\n   \n\n    // Output to screen\n\n    //fragColor = vec4(col,1.0);\n\n}","name":"Image","description":"","type":"image"}]}