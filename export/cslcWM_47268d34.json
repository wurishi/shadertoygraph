{"ver":"0.1","info":{"id":"cslcWM","date":"1686867291","viewed":60,"name":" mnca mst","username":"algroznykh","description":"Î¼NCA + minimum spanning tree from https://selforglive.github.io/\n","likes":9,"published":1,"flags":32,"usePreview":0,"tags":["neuralca"],"hasliked":0,"parentid":"fd2XRV","parentname":"Neural CA"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nfloat circle(vec2 c, float r) {\n    return length(c) - r;\n    }\n    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int W = int(iResolution.x) / 3;\n    vec2 p = fragCoord.yx;\n    p /= 2.0;\n    p.x = mod(p.x, float(W));\n \n    fragColor = texture(iChannel0, p/iResolution.xy).xxxx; \n    //fragColor = texture(iChannel1, fragCoord.xy/iResolution.xy)+0.5;\n\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"int W;\nint band;\nivec2 pos;\n\nvec4 R(int dx, int dy) {\n    vec2 p = vec2((pos.x+dx+W)%W+W*band, pos.y+dy);\n    return texture(iChannel0, (p+0.5)/iResolution.xy);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    W = int(iResolution.x) / 3;\n    pos = ivec2(fragCoord.xy);\n    band = pos.x / W;\n    pos.x %= W;\n    \n    vec4 prev = texture(iChannel1, fragCoord/iResolution.xy);\n    \n    if (band == 2) {\n        fragColor = R(-1, 1)+R(-1, 0)*2.0+R(-1,-1)\n                   -R( 1, 1)-R( 1, 0)*2.0-R( 1,-1);\n    } else if (band == 1) {\n        fragColor = R( 1, 1)+R( 0, 1)*2.0+R(-1, 1)\n                   -R( 1,-1)-R( 0,-1)*2.0-R(-1,-1);\n    } else {\n        fragColor = R(1,1)+R(1,-1)+R(-1,1)+R(-1,-1)\n              +2.0*(R(0,1)+R(0,-1)+R(1,0)+R(-1,0))-12.0*R(0, 0);\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":" vec4 update(float band, vec4 y[6]) {\n    #define M mat4\n    #define F(i,_a,_b) {M a=_a,b=_b; vec4 yi=y[i]; dx+=G(0)+G(1)+G(2)+G(3);}\n    //#define G(i) yi[i]*((yi[i]>0.0)?a[i]:b[i])\n    #define G(i) (yi[i]*a[i]+abs(yi[i])*b[i])\n    vec4 dx;\n  if (band == 0.) { dx = vec4(18,21,-13,-15);\n    F(0, M(-100,68,12,-55,1,-52,4,-1,0,-14,-52,12,-3,-11,-23,-46), M(-54,65,3,-27,-16,31,1,16,-13,-1,-2,-6,-20,-16,-4,-19));\n    F(1, M(15,12,-28,13,10,-20,28,5,4,-36,-17,17,19,15,-21,-16), M(13,27,-1,16,-1,-26,24,11,-30,-19,18,-6,-7,17,4,-14));\n    F(2, M(10,1,-7,16,-16,-17,8,-1,5,4,4,13,2,-15,-12,-20), M(-12,-6,26,24,-7,-1,18,3,7,0,7,-21,0,-2,9,-1));\n    F(3, M(22,-32,-2,18,4,47,-6,-12,8,15,49,3,-4,20,2,58), M(5,27,-7,-3,3,16,7,5,-6,-12,-3,-7,1,-8,2,-5));\n    F(4, M(-2,-11,13,-28,8,-28,7,3,-6,-7,6,-21,-10,-11,-11,-34), M(0,6,-5,12,5,-9,2,5,7,-15,5,2,2,-6,5,11));\n    F(5, M(2,6,20,-5,1,11,0,-8,3,-9,18,0,4,10,20,0), M(8,-19,-21,20,6,-4,9,11,-5,-7,-2,-6,-5,-1,-3,1));\n  } else if (band == 1.) { dx = vec4(11,-17,-3,28);\n    F(0, M(22,-19,-11,-28,19,13,15,-30,30,6,-12,9,4,10,-7,11), M(23,-12,-1,-23,-31,10,-10,-12,-17,9,-18,19,-34,4,2,1));\n    F(1, M(-89,-17,-39,-11,-6,-94,5,14,23,-8,-112,-11,6,-1,-14,-103), M(26,12,1,-1,-13,-39,-1,11,-28,2,-3,10,-24,-10,-18,-33));\n    F(2, M(-9,16,22,-21,-3,3,1,0,9,4,18,16,11,-41,6,-5), M(-19,10,13,9,-9,39,24,-22,20,0,10,24,-2,0,18,-5));\n    F(3, M(1,6,-3,1,11,1,0,-1,-3,20,-25,2,7,8,-1,-3), M(-9,1,5,-8,8,10,19,-6,-6,10,3,-1,-8,10,-5,-20));\n    F(4, M(-16,2,11,5,-6,10,2,2,1,-3,0,13,-6,9,17,18), M(6,-7,-1,-2,-2,8,-6,2,4,13,3,14,9,12,6,15));\n    F(5, M(-1,1,-8,-5,4,-2,1,0,3,1,-9,0,-5,0,-17,-6), M(6,12,10,13,12,1,-2,3,2,2,-6,3,-8,13,-9,18));\n  } else { dx = vec4(0,-21,22,19);\n    F(0, M(6,17,-4,33,-14,23,0,10,-17,-8,4,21,-31,14,10,14), M(11,20,22,38,-8,-3,-20,-30,-8,-5,-11,-12,-37,-14,-14,0));\n    F(1, M(0,23,-10,7,-18,-8,5,22,0,12,-15,-14,4,-21,-5,11), M(4,7,7,11,12,-10,-7,21,-7,-1,-11,-4,-2,4,5,22));\n    F(2, M(-96,-4,14,6,9,-82,-10,-24,-25,8,-44,-7,0,7,17,-93), M(-3,7,14,-9,9,2,-10,8,25,9,-18,27,-21,8,20,-31));\n    F(3, M(3,4,11,13,-1,-4,2,-18,-22,2,0,6,-11,-2,0,-6), M(-20,0,-6,2,11,20,14,12,19,-2,0,0,-5,6,6,-4));\n    F(4, M(2,-6,4,4,6,-3,15,11,0,-9,-1,4,0,-2,2,-4), M(-2,-1,8,0,-1,-6,12,-1,9,-9,-1,6,-1,-1,-6,10));\n    F(5, M(-2,0,-5,-3,-8,7,-14,9,-11,-7,14,0,-19,8,-5,-2), M(5,6,9,5,0,-9,0,10,-8,-2,1,-7,1,1,1,-7));\n  }\n    #undef M\n    #undef F\n    #undef G\n    return dx/500.0;\n  }\n  \nvec4 hash43(vec3 p)\n{\n\tvec4 p4 = fract(vec4(p.xyzx)  * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}\n\n\nfloat circle(vec2 c, float r) {\n    return length(c) - pow(r, 2.);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    float W = floor(iResolution.x / 3.);\n    vec2 pos = fragCoord.xy;\n    pos.x = mod(pos.x, W);\n    float band = floor(fragCoord.x / W);\n    \n    if(iFrame==0) {\n      fragColor = floor(hash43(vec3(fragCoord, iFrame)) + .001);\n      //fragColor -= .5;\n      //fragColor = vec4(0.) - .5;\n      return;\n    }\n    \n    \n    vec4 y[6];\n    for (int i=0; i<3; ++i) {\n      vec2 p = vec2(pos.x+W*float(i), pos.y)/iResolution.xy;\n      y[i] = texture(iChannel1, p);\n      y[3+i] = texture(iChannel0, p);\n      \n    }\n    vec4 x = (band==0.) ? y[0] : ((band==1.) ? y[1] : y[2]);\n    vec4 dx = update(band, y);\n \n    \n    //vec4 mask = floor(hash43(vec3(fragCoord, iFrame)) + 0.5);\n    fragColor = clamp(x + dx, -1.5, 1.5);// * mask;\n    \n    #define D .05\n   \n    vec2 mouse = vec2(iMouse)/vec2(iResolution);\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv.y /= iResolution.x / iResolution.y;\n   \n    mouse.y /= iResolution.x / iResolution.y;\n    \n    mouse = mouse.yx;\n    mouse /= 2.;\n    \n    float damage = circle(uv -mouse, D) > 0. ? 1.: 1. - iMouse.w;\n    \n    fragColor *= damage;\n}","name":"Buffer B","description":"","type":"buffer"}]}