{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"texture","id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"\n    \nmat3 RGBtoXYZ = mat3(\t0.4124564,\t\t0.3575761,\t\t0.1804375,\n\t\t\t\t\t\t0.2126729,\t\t0.7151522,\t\t0.0721750,\n\t\t\t\t\t\t0.0193339,\t\t0.1191920,\t\t0.9503041\t\t);\n\nmat3 XYZtoRGB = mat3(\t3.2404542,\t\t-1.5371385,\t\t-0.4985314,\n\t\t\t\t\t\t-0.9692660,\t\t1.8760108,\t\t0.0415560,\n\t\t\t\t\t\t0.0556434,\t\t-0.2040259,\t\t1.0572252\t\t);\n\nmat3 XYZtoLMS = mat3(\t0.38971,\t\t0.68898,\t\t-0.07868,\n\t\t\t\t\t\t-0.22981,\t\t1.18340,\t\t0.04641,\n\t\t\t\t\t\t0.00000,\t\t0.00000,\t\t1.00000\t\t);\n\nmat3 LMStoXYZ = mat3(\t1.91020,\t\t-1.11212,\t\t0.20191,\n\t\t\t\t\t\t0.37095,\t\t0.62905,\t\t-0.00001,\n\t\t\t\t\t\t0.00000,\t\t0.00000,\t\t1.00000\t\t);\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfloat def_cof = 1.0;\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    int id = int(floor(uv.x * 2.0)) + int(floor(uv.y * 2.0))*2;\n    uv = - uv; // invert picture after splitting into four segments\n\tvec4 tex = texture( iChannel0, uv );\n\t\n\tvec3 interim = vec3(tex.rgb);\n\t\n    \n\t// Need to linearize the sRGB colour input\n\tinterim = pow(interim, vec3(2.2, 2.2, 2.2));\n\n  \n\t\n    interim = interim * RGBtoXYZ;\n\tinterim = interim * XYZtoLMS;\n\n    \n\tmat3 protanopia = \tmat3( \t1.0 - def_cof,\tdef_cof,\t\t0.0,\n\t\t\t\t\t\t\t\t0.0,\t\t\t1.0,\t\t\t0.0,\n\t\t\t\t\t\t\t\t0.0,\t\t\t0.0,\t\t\t1.0\t\t\t);\n\n    mat3 deuteranopia = mat3(\t1.0,\t\t\t0.0,\t\t\t0.0,\n\t\t\t\t\t\t\t\tdef_cof,\t\t1.0 - def_cof,\t0.0,\n\t\t\t\t\t\t\t\t0.0,\t\t\t0.0,\t\t\t1.0\t\t\t);\n    \n    mat3 tritanopia = \tmat3( \t1.0,\t\t\t0.0,\t\t\t0.0,\n\t\t\t\t\t\t\t\t0.0,\t\t\t1.0,\t\t\t0.0,\n\t\t\t\t\t\t\t\tdef_cof * 0.5,\tdef_cof * 0.5,\t1.0 - def_cof\t);\n\n    if(id == 0 )\n    {\n    \tinterim = interim * protanopia;\n    }\n    if( id == 1)\n    {\n        interim = interim * deuteranopia;\n    }\n    if( id == 2)\n    {\n       interim = interim * tritanopia;\n    }\n    \n    interim = interim * LMStoXYZ ;\n\tinterim =  interim * XYZtoRGB;\n\n\n   \t\n    interim = pow(interim, vec3(1.0/2.2, 1.0/2.2, 1.0/2.2));\n    \n    \n    \n    fragColor = vec4(interim, 1.0);\n\n    \n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XsSXRR","date":"1408146267","viewed":396,"name":"Colour Blindness Shader","username":"lexicobob","description":"Colour blindness simulation.\n\nChange def_cof, deficiency coefficient to alter strength.\n\ntop left tritanopia, top right normal vision\nbottom left protanopia, bottom right deuteranopia\n\nbased on Lucassen & Alferdinck's papers ","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","color","blindness","colour","protanopia","deuteranopia","tritanopia"],"hasliked":0,"parentid":"","parentname":""}}