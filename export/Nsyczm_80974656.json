{"ver":"0.1","info":{"id":"Nsyczm","date":"1654592856","viewed":69,"name":"Newton's Fractal experiment","username":"DaleyPaley","description":"My overly-simple version of Newton's Fractal.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fractal","newton"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 conj(vec2 a) { return vec2(a.x,-a.y); } // complex conjugate\nvec2 mul(vec2 a, vec2 b) { return vec2(a.x*b.x-a.y*b.y,a.x*b.y+a.y*b.x); } // complex multiplication\nvec2 div(vec2 a, vec2 b) { return mul(a,conj(b))/mul(b,conj(b)).x; } // complex division\nvec2 f(vec2 a) { return mul(a,mul(a,a))-vec2(1,1); } // function\nvec2 fd(vec2 a) { return 5.0*mul(a,a); } // function derivative\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 z = (fragCoord/iResolution.xy-0.5)*(2.0+sin(iTime));\n    for(int i=0; i<132; ++i) z = z-div(f(z),fd(z)); // newton-rapheson iteration\n    fragColor = vec4(sin(vec3(z.x*1.0,z.y*17.0,(z.x+z.y)*12.0)),1); // pole-based colouring\t\n}","name":"Image","description":"","type":"image"}]}