{"ver":"0.1","info":{"id":"fdB3WW","date":"1617381097","viewed":146,"name":"Noise Xploration 03","username":"Taron","description":"Simply experimenting around with noise. Turned out kind of pretty, so why not share it... ☺\n• Use mouse to move light source. Mouse Y coordinate offsets Z for fractal noise.","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["simple","turbulence","fractalnoise"],"hasliked":0,"parentid":"NsBGWW","parentname":"Noise x02"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define OCTAVES 5\n#define SIZE 0.75\n\nfloat hash12(vec2 p) {\n\tfloat h = dot(p,vec2(127.1,311.7));\t\n    return fract(sin(h)*43758.5453123);\n}\n\nfloat smoother(float f){\n    return f * f * f * (f * (f * 6. - 15.) + 10.);;\n}\n\n// 3d noise\nfloat noise_3(in vec3 p) {\n    vec3 i = floor(p);\n    vec3 f = fract(p);\t\n\tvec3 u = f*f*(3.0-2.0*f);\n    \n    \n    vec2 ii = i.xy + i.z * vec2(5.0);\n    float a = hash12( ii + vec2(0.0,0.0) );\n\tfloat b = hash12( ii + vec2(1.0,0.0) );    \n    float c = hash12( ii + vec2(0.0,1.0) );\n\tfloat d = hash12( ii + vec2(1.0,1.0) ); \n    float v1 = mix(mix(a,b,u.x), mix(c,d,u.x), u.y);\n    \n    ii += vec2(5.0);\n    a = hash12( ii + vec2(0.0,0.0) );\n\tb = hash12( ii + vec2(1.0,0.0) );    \n    c = hash12( ii + vec2(0.0,1.0) );\n\td = hash12( ii + vec2(1.0,1.0) );\n    float v2 = mix(mix(a,b,u.x), mix(c,d,u.x), u.y);\n        \n    return max(mix(v1,v2,u.z),0.0);\n}\n\nfloat fbm(vec3 p, int oct)\n{\n    float r = 0.0;\n    float w = 1.0, s = 1.0;\n    float d = 0.0;\n    for (int i=0; i<oct; i++)\n    {\n        w *= 0.9-r*.35;\n        s *= 2.0;\n        r += w * abs(-1.+ 2. *noise_3(s * p + dot(vec3(d,0.25,0.),p+r*d)));\n        d +=w;\n    }\n    float noise = -1.+2.*r/d;\n    noise = smoother(noise*noise);\n    return p.x>noise?1.-noise:noise;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel&mouse coordinates (from -1 to 1)\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 mouse = (2.*iMouse.xy-iResolution.xy)/iResolution.y;\n    \n    // Get noises\n    vec3 np = vec3(uv,mouse.y+iTime*.05)*SIZE;//iMouse.y/iResolution.y +iTime*.05\n    vec2 offset = vec2(1.0/iResolution.y,0.);\n    \n    float cnt = fbm(np, OCTAVES);\n    vec3 norm = vec3(fbm(np+offset.xyy,OCTAVES)-cnt,fbm(np+offset.yxy,OCTAVES)-cnt, 0.05);\n    norm = normalize(norm);\n     \n    // Lighting and Rendering \n    vec3 lit = normalize(vec3(mouse,.9)-vec3(uv,.5));\n    vec3 cam = normalize(vec3(uv,0.)-vec3(0.,0.,1.));\n    float refl = pow(max(0.,dot(cam,reflect(lit, norm))),20.);\n    vec3 col = vec3(dot(lit,norm) * mix(vec3(1.,0.75,0.02),vec3(0.5,0.8,1.0), cnt)+refl);\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}