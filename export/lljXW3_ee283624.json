{"ver":"0.1","info":{"id":"lljXW3","date":"1447009984","viewed":351,"name":"BinaryTree2Fix","username":"jt","description":"A simple binary tree with potentially infinite height,\nsimilar to [url]https://www.shadertoy.com/view/Ml2SW3[/url] but with fixed line-size.","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["binarytree"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"// Binary Sub-Division 2 Fix - written 2015 by Jakob Thomsen\n\nvec2 BinaryTreeSubDiv2(vec2 v)\n{\n    v *= exp2(ceil(-log2(v.y)));\n    v.x *= .5;\n    return fract(v);\n}\n\nvoid mainImage( out vec4 o, in vec2 U )\n//void mainImage( inout vec4 o, vec2 U ) // ERROR: overloaded functions must have the same parameter qualifiers\n\n{\n    U /= iResolution.xy;\n    vec2 V = BinaryTreeSubDiv2(U);\n    o -= o;\n    o += 1. - smoothstep(0., .01 * (1. + V.y) / U.y, abs(4. * abs(V.x -.5) - (1. - V.y)));\n    /*\n    // modification of FabriceNeyret2's infinite zoom variant\n    float s = exp2(3.*fract(iTime * .1));\n    vec2 V = BinaryTreeSubDiv2(U /= s);\n    o += 1. - smoothstep(0., .01 * (1. + V.y) / U.y / s, abs(4. * abs(V.x -.5) - 1. + V.y));\n    */\n}\n","name":"","description":"","type":"image"}]}