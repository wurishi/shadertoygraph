{"ver":"0.1","info":{"id":"X3GXDc","date":"1729908282","viewed":85,"name":"bad cube thing","username":"int_45h","description":"idk why i made this, I wanted to do like a cool audio visualizer or something idk","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["cube","thing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 O, in vec2 U)\n{\n    O = texture(iChannel0, U/iResolution.xy);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define MIN_DIST .001\n#define MAX_DIST 100.\n#define STEPS 80\n\n// https://www.shadertoy.com/view/Xds3zN\nfloat sd_box_frame( vec3 p, vec3 b, float e )\n{\n       p = abs(p  )-b;\n  vec3 q = abs(p+e)-e;\n\n  return min(min(\n      length(max(vec3(p.x,q.y,q.z),0.0))+min(max(p.x,max(q.y,q.z)),0.0),\n      length(max(vec3(q.x,p.y,q.z),0.0))+min(max(q.x,max(p.y,q.z)),0.0)),\n      length(max(vec3(q.x,q.y,p.z),0.0))+min(max(q.x,max(q.y,p.z)),0.0));\n}\n\nfloat SDF(vec3 p)\n{\n    return sd_box_frame(p-vec3(0,0,5), vec3(1), .02);\n}\n\nvec3 raymarch(vec3 o, vec3 d)\n{\n    vec3 col = vec3(0.);\n    float t = 0.;\n    float shortest_dist = MAX_DIST;\n    \n    for (int i=0; i<STEPS; i++) \n    {\n        vec3 p = o+d*t;\n        float dist = SDF(p);\n        t += dist;\n        \n        if (dist < shortest_dist)\n            shortest_dist = dist;\n        \n        if (t > MAX_DIST)\n            break;\n        \n        if (dist < MIN_DIST)\n        {\n            col = vec3(1.);\n            break;\n        }\n    }\n     \n    return 1.-(col+(1.-shortest_dist));\n}\n\nvec3 render(vec2 U)\n{\n    vec2 ires = iResolution.xy;\n    vec3 o = vec3(\n        cos(iTime)*5.,\n        0,\n        sin(iTime)*5.+5.\n    );\n    vec3 d = normalize(vec3(\n        (U-.5*ires.xy)/ires.y*tan(.5*90.*PI/180.),\n        1.\n    ));\n    d = look_at(vec3(0,0,5), o)*d;\n    return raymarch(o,d);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = render(fragCoord);\n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"float s1(float x){return sin(x)*.1-.05;}\nvoid mainImage(out vec4 O, in vec2 U)\n{\n    vec2 uv = U/iResolution.xy;\n    float m = clamp(texture(iChannel0, uv).r, 0., 1.);\n    float a = 0.0;\n    float t = 0.02;\n    \n    float m2 = smoothstep(a, a+t, m);\n    vec3 col = texture(iChannel1, (uv-.5)*(1.07+s1(iTime*3.))+.5).rgb*exp(-.4);\n    \n    col = mix(0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4)), col, m2);\n    \n    \n    O = vec4(vec3(col), 1);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define PI 3.14159265359\nmat3 rot_x(float t)\n{\n    return mat3(\n        1., 0., 0.,\n        0., cos(t), -sin(t),\n        0., sin(t), cos(t)\n    );\n}\n\nmat3 rot_y(float t)\n{\n    return mat3(\n        cos(t), 0., -sin(t),\n        0., 1., 0.,\n        sin(t), 0., cos(t)\n    );\n}\n\nmat3 rot_z(float t)\n{\n    return mat3(\n        cos(t), -sin(t), 0.,\n        sin(t), cos(t), 0.,\n        0., 0., 1.\n    );\n}\n\nmat3 look_at(vec3 d)\n{\n    vec3 front = normalize(d);\n    vec3 right = cross(front, vec3(0.,1.,0.));\n    vec3 up = cross(right, front);\n    \n    return mat3(right, up, front);\n}\n\nmat3 look_at(vec3 d, vec3 o)\n{\n    vec3 front = normalize(d-o);\n    vec3 right = cross(vec3(0.,1.,0.), front);\n    vec3 up = cross(front, right);\n    \n    return mat3(right, up, front);\n}\n","name":"Common","description":"","type":"common"}]}