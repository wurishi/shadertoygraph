{"ver":"0.1","info":{"id":"ssjGDR","date":"1617265764","viewed":80,"name":"crusty security camera","username":"ghastlymicrowave","description":"just something small","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["animation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float rand(float co) { return fract(sin(co*(91.3458)) * 47453.5453); }\nfloat rand(vec2 co){ return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453); }\nfloat rand(vec3 co){ return rand(co.xy+rand(co.z)); }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float scale = 0.01;\n    float frequency = 1.0/20.0;\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float time = iTime;\n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    float randx = rand(floor(time/frequency))*scale;\n    float randy = rand(floor(time/frequency)*6.)*scale;\n    float r = texture(iChannel0,uv+vec2(randx,randy)).r;\n    \n    randx = rand(floor(time/frequency)*5.)*scale;\n    randy = rand(floor(time/frequency)*2.)*scale;\n    float g = texture(iChannel0,uv+vec2(randx,randy)).g;\n    \n    randx = rand(floor(time/frequency)*3.)*scale;\n    randy = rand(floor(time/frequency)*4.)*scale;\n    float b = texture(iChannel0,uv+vec2(randx,randy)).b;\n\n    //funny rainbow scanline \n    float x = sin(time*8.0 + uv.y*4.0); \n    float y = sin(time*3.0 + uv.x*2.0);\n    float z = sin(time*20.0 + uv.y*3.0+uv.x*1.5);\n    vec3 scanline =  vec3(x,y,z);\n    \n    //noise bloom\n    float floorscale = 4.009;\n    vec3 noise = vec3(floor(floorscale*rand(uv*floor(time/frequency)))/floorscale);\n    if (noise.z > 0.){\n            noise = vec3(r,g,b);\n    }else{\n    noise = vec3(rand(uv*floor(time/frequency)))*-0.2;\n    }\n    vec3 col = vec3(r,g,b);\n    fragColor = vec4(col + col*scanline * .2 + col*noise *2.2,1);\n}\n\n","name":"Image","description":"","type":"image"}]}