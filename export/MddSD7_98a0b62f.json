{"ver":"0.1","info":{"id":"MddSD7","date":"1460072239","viewed":1643,"name":"CSG Editor","username":"aaecheve","description":"Constructive solid geometry editor\n\nHow to use:\n+ Select base primitive using keys 1 to 6, intersecting primitive using keys 7 to 0\n+ WASD + ZX to move base, Arrows + NM to move intersection\n+ Scale base with CV, intersection with OP\n+ Color with Y","likes":23,"published":1,"flags":48,"usePreview":0,"tags":["raymarching","distancefields","interactive","csg","editor","multipass"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Created by Alejandro Echeverria - 2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// A CSG editor forked using the distance functions, lighting and rendering from iq's distance field shader: \n// https://www.shadertoy.com/view/Xds3zN\n\n// You can select one base primitive and one intersection primitive, move them and scale them to create\n// interesting intersections\n\n#define NUMBER_OF_OBJECTS 8\n#define NUMBER_OF_INTERSECTORS 4\n\n/** Variables */\nconst float _Selector = 1.0;\nconst float _Selector2 = 2.0;\nconst float _Size = 10.0;\nconst float _Position = 11.0;\nconst float _Color = 12.0;\nconst float _Repetition = 12.0;\nconst float _Twist = 13.0;\nconst float _IntersectorSelector = 14.0;\nconst float _IntersectorSize = 15.0;\nconst float _IntersectorPosition = 16.0;\nconst float _CameraPosition = 17.0;\n\nvec4 readMemory(float address)\n{\n    return texture(iChannel0, vec2(address+.5)/iChannelResolution[0].xy);\n}\n\nfloat selection[NUMBER_OF_OBJECTS];\nfloat size = 0.5;\nfloat color = 0.0;\nfloat twist = 0.0;\nvec3 position = vec3(0.0,0.0,0.0);\nvec3 repetition = vec3(0.0,0.0,0.0);\n\nfloat intersectorSelection[NUMBER_OF_INTERSECTORS];\nfloat intersectorSize = 0.5;\nvec3 intersectorPosition = vec3(0.0,0.0,0.0);\n\nfloat sdPlane( vec3 p )\n{\n\treturn p.y;\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n    return length(p)-s;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat sdEllipsoid( in vec3 p, in vec3 r )\n{\n    return (length( p/r ) - 1.0) * min(min(r.x,r.y),r.z);\n}\n\nfloat udRoundBox( vec3 p, vec3 b, float r )\n{\n  return length(max(abs(p)-b,0.0))-r;\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n  return length( vec2(length(p.xz)-t.x,p.y) )-t.y;\n}\n\nfloat sdHexPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n#if 0\n    return max(q.z-h.y,max((q.x*0.866025+q.y*0.5),q.y)-h.x);\n#else\n    float d1 = q.z-h.y;\n    float d2 = max((q.x*0.866025+q.y*0.5),q.y)-h.x;\n    return length(max(vec2(d1,d2),0.0)) + min(max(d1,d2), 0.);\n#endif\n}\n\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n\tvec3 pa = p-a, ba = b-a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h ) - r;\n}\n\nfloat sdTriPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n#if 0\n    return max(q.z-h.y,max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5);\n#else\n    float d1 = q.z-h.y;\n    float d2 = max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5;\n    return length(max(vec2(d1,d2),0.0)) + min(max(d1,d2), 0.);\n#endif\n}\n\nfloat sdCylinder( vec3 p, vec2 h )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat sdCone( in vec3 p, in vec3 c )\n{\n    vec2 q = vec2( length(p.xz), p.y );\n    float d1 = -q.y-c.z;\n    float d2 = max( dot(q,c.xy), q.y);\n    return length(max(vec2(d1,d2),0.0)) + min(max(d1,d2), 0.);\n}\n\nfloat sdConeSection( in vec3 p, in float h, in float r1, in float r2 )\n{\n    float d1 = -p.y - h;\n    float q = p.y - h;\n    float si = 0.5*(r1-r2)/h;\n    float d2 = max( sqrt( dot(p.xz,p.xz)*(1.0-si*si)) + q*si - r2, q );\n    return length(max(vec2(d1,d2),0.0)) + min(max(d1,d2), 0.);\n}\n\n\nfloat length2( vec2 p )\n{\n\treturn sqrt( p.x*p.x + p.y*p.y );\n}\n\nfloat length6( vec2 p )\n{\n\tp = p*p*p; p = p*p;\n\treturn pow( p.x + p.y, 1.0/6.0 );\n}\n\nfloat length8( vec2 p )\n{\n\tp = p*p; p = p*p; p = p*p;\n\treturn pow( p.x + p.y, 1.0/8.0 );\n}\n\nfloat sdTorus82( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length2(p.xz)-t.x,p.y);\n  return length8(q)-t.y;\n}\n\nfloat sdTorus88( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length8(p.xz)-t.x,p.y);\n  return length8(q)-t.y;\n}\n\nfloat sdCylinder6( vec3 p, vec2 h )\n{\n  return max( length6(p.xz)-h.x, abs(p.y)-h.y );\n}\n\n//----------------------------------------------------------------------\n\nfloat opS( float d1, float d2 )\n{\n    return max(-d2,d1);\n}\n\nvec2 opU( vec2 d1, vec2 d2 )\n{\n\treturn (d1.x<d2.x) ? d1 : d2;\n}\n\nfloat opUx( float d1, float d2 )\n{\n\treturn (d1<d2) ? d1 : d2;\n}\n\nvec3 opRep( vec3 p, vec3 c )\n{\n    return mod(p,c)-0.5*c;\n}\n\nvec3 opTwist( vec3 p , float twist)\n{\n    float  c = cos(twist*p.y+10.0);\n    float  s = sin(twist*p.y+10.0);\n    mat2   m = mat2(c,-s,s,c);\n    return vec3(m*p.xz,p.y);\n}\n\n//----------------------------------------------------------------------\n\nvec2 map( in vec3 pos )\n{\n    vec2 res = opU( \n        \t\t\tvec2( \n        \t\t\t\tsdPlane(pos), \n                        1.0 ),\n\t                vec2(\n                        opS(   \n                        \tsdSphere(\n                        \t\tpos-position, \n                        \t\tsize*selection[0] \n                        \t),\n                            opUx(\n                            \tsdSphere(\n                        \t\t\tpos-intersectorPosition,\n                            \t\tintersectorSize*intersectorSelection[0]\n                            \t),\n                                opUx(\n                                \tsdBox(        \t\t\t\t    \n                            \t\t\tpos-intersectorPosition,\n        \t\t\t    \t\t\t\tvec3(intersectorSize*intersectorSelection[1])\n                              \t\t),\n                                    opUx(\n                                    \tsdTorus(\n        \t\t\t\t\t\t\t\t\tpos-intersectorPosition, \n        \t\t\t\t\t\t\t\t\tvec2(intersectorSize*intersectorSelection[2]) \n                        \t\t\t\t),\n                                        sdCylinder(   \n                                            pos-intersectorPosition, \n                                            vec2(intersectorSize*intersectorSelection[3]) )\n                                    )\n                                  \n                                )\n                            )\n\t\t\t\t\t\t),\n                    \tcolor \n                    ) \n    \t\t\t);\n    res = opU( \n        \t\tres, \n        \t\tvec2(\n                     opS(                        \n                    \tsdBox(        \t\t\t\t    \n                            pos-position,\n        \t\t\t    \tvec3(size*selection[1])\n                              ),\n                         \t  opUx(\n                            \tsdSphere(\n                        \t\t\tpos-intersectorPosition,\n                            \t\tintersectorSize*intersectorSelection[0]\n                            \t),\n                                opUx(\n                                \tsdBox(        \t\t\t\t    \n                            \t\t\tpos-intersectorPosition,\n        \t\t\t    \t\t\t\tvec3(intersectorSize*intersectorSelection[1])\n                              \t\t),\n                                    opUx(\n                                    \tsdTorus(\n        \t\t\t\t\t\t\t\t\tpos-intersectorPosition, \n        \t\t\t\t\t\t\t\t\tvec2(intersectorSize*intersectorSelection[2]) \n                        \t\t\t\t),\n                                        sdCylinder(   \n                                            pos-intersectorPosition, \n                                            vec2(intersectorSize*intersectorSelection[3]) )\n                                    )\n                                  \n                                )\n                            )\n                    \t), \n                    color\n                ) \n    \t\t);\n    res = opU( res, vec2( \n        \t\t\t\topS(\n        \t\t\t\t\tsdTorus(\n                            \tpos-position,\n        \t\t\t\t\t\tvec2(size*selection[2])),\n                             opUx(\n                            \tsdSphere(\n                        \t\t\tpos-intersectorPosition,\n                            \t\tintersectorSize*intersectorSelection[0]\n                            \t),\n                                opUx(\n                                \tsdBox(        \t\t\t\t    \n                            \t\t\tpos-intersectorPosition,\n        \t\t\t    \t\t\t\tvec3(intersectorSize*intersectorSelection[1])\n                              \t\t),\n                                    opUx(\n                                    \tsdTorus(\n        \t\t\t\t\t\t\t\t\tpos-intersectorPosition, \n        \t\t\t\t\t\t\t\t\tvec2(intersectorSize*intersectorSelection[2]) \n                        \t\t\t\t),\n                                        sdCylinder(   \n                                            pos-intersectorPosition, \n                                            vec2(intersectorSize*intersectorSelection[3]) )\n                                    )\n                                  \n                                )\n                             )\n                        ), \n        \t\t\t\tcolor) \n             );\n    res = opU( res, vec2( \n        \t\t\t\topS(\n        \t\t\t\t\tsdTriPrism(\n        \t\t\t\t\t\t\tpos-position, \n        \t\t\t\t\t\t\tvec2(size*selection[3]) \n                        \t),\n                            opUx(\n                            \tsdSphere(\n                        \t\t\tpos-intersectorPosition,\n                            \t\tintersectorSize*intersectorSelection[0]\n                            \t),\n                                opUx(\n                                \tsdBox(        \t\t\t\t    \n                            \t\t\tpos-intersectorPosition,\n        \t\t\t    \t\t\t\tvec3(intersectorSize*intersectorSelection[1])\n                              \t\t),\n                                    opUx(\n                                    \tsdTorus(\n        \t\t\t\t\t\t\t\t\tpos-intersectorPosition, \n        \t\t\t\t\t\t\t\t\tvec2(intersectorSize*intersectorSelection[2]) \n                        \t\t\t\t),\n                                        sdCylinder(   \n                                            pos-intersectorPosition, \n                                            vec2(intersectorSize*intersectorSelection[3]) )\n                                    )\n                                  \n                                )\n                             )\n                        ),\n        \t\t\t\tcolor) \n             );\n    res = opU( res, vec2( \n        \t\t\t\topS(\n        \t\t\t\t\tsdCylinder(   \n        \t\t\t\t\t\t\tpos-position, \n        \t\t\t\t\t\t\tvec2(size*selection[4]) \n                            ),\n                            opUx(\n                            \tsdSphere(\n                        \t\t\tpos-intersectorPosition,\n                            \t\tintersectorSize*intersectorSelection[0]\n                            \t),\n                                opUx(\n                                \tsdBox(        \t\t\t\t    \n                            \t\t\tpos-intersectorPosition,\n        \t\t\t    \t\t\t\tvec3(intersectorSize*intersectorSelection[1])\n                              \t\t),\n                                    opUx(\n                                    \tsdTorus(\n        \t\t\t\t\t\t\t\t\tpos-intersectorPosition, \n        \t\t\t\t\t\t\t\t\tvec2(intersectorSize*intersectorSelection[2]) \n                        \t\t\t\t),\n                                        sdCylinder(   \n                                            pos-intersectorPosition, \n                                            vec2(intersectorSize*intersectorSelection[3]) )\n                                    )\n                                  \n                                )\n                             )\n                        ),\n        \t\t\t\tcolor) \n             );\n    res = opU( res, vec2( \n         \t\t\t\topS(\n        \t\t\t\t\tsdHexPrism(\n        \t\t\t\t\t\tpos-position, \n        \t\t\t\t\t\tvec2(size*selection[5]) \n                            ),\n                            opUx(\n                            \tsdSphere(\n                        \t\t\tpos-intersectorPosition,\n                            \t\tintersectorSize*intersectorSelection[0]\n                            \t),\n                                opUx(\n                                \tsdBox(        \t\t\t\t    \n                            \t\t\tpos-intersectorPosition,\n        \t\t\t    \t\t\t\tvec3(intersectorSize*intersectorSelection[1])\n                              \t\t),\n                                    opUx(\n                                    \tsdTorus(\n        \t\t\t\t\t\t\t\t\tpos-intersectorPosition, \n        \t\t\t\t\t\t\t\t\tvec2(intersectorSize*intersectorSelection[2]) \n                        \t\t\t\t),\n                                        sdCylinder(   \n                                            pos-intersectorPosition, \n                                            vec2(intersectorSize*intersectorSelection[3]) )\n                                    )\n                                  \n                                )\n                             )\n                          \t\n                        ),\n        \t\t\t\tcolor) \n             );\n\n        \n    return res;\n}\n\nvec2 castRay( in vec3 ro, in vec3 rd )\n{\n    float tmin = 1.0;\n    float tmax = 20.0;\n    \n#if 0\n    float tp1 = (0.0-ro.y)/rd.y; if( tp1>0.0 ) tmax = min( tmax, tp1 );\n    float tp2 = (1.6-ro.y)/rd.y; if( tp2>0.0 ) { if( ro.y>1.6 ) tmin = max( tmin, tp2 );\n                                                 else           tmax = min( tmax, tp2 ); }\n#endif\n    \n\tfloat precis = 0.002;\n    float t = tmin;\n    float m = -1.0;\n    for( int i=0; i<50; i++ )\n    {\n\t    vec2 res = map( ro+rd*t );\n        if( res.x<precis || t>tmax ) break;\n        t += res.x;\n\t    m = res.y;\n    }\n\n    if( t>tmax ) m=-1.0;\n    return vec2( t, m );\n}\n\n\nfloat softshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<16; i++ )\n    {\n\t\tfloat h = map( ro + rd*t ).x;\n        res = min( res, 8.0*h/t );\n        t += clamp( h, 0.02, 0.10 );\n        if( h<0.001 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n\tvec3 eps = vec3( 0.001, 0.0, 0.0 );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\n\n\n\nvec3 render( in vec3 ro, in vec3 rd )\n{ \n    vec3 col = vec3(0.7, 0.9, 1.0) +rd.y*0.8;\n    vec2 res = castRay(ro,rd);\n    float t = res.x;\n\tfloat m = res.y;\n    if( m>-0.5 )\n    {\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal( pos );\n        vec3 ref = reflect( rd, nor );\n        \n        // material        \n\t\tcol = 0.45 + 0.3*sin( vec3(0.05,0.08,0.10)*(m-1.0) );\n\t\t\n        if( m<1.5 )\n        {\n            \n            float f = mod( floor(5.0*pos.z) + floor(5.0*pos.x), 2.0);\n            col = 0.4 + 0.1*f*vec3(1.0);\n        }\n\n        // lighitng        \n        float occ = calcAO( pos, nor );\n\t\tvec3  lig = normalize( vec3(-0.6, 0.7, -0.5) );\n\t\tfloat amb = clamp( 0.5+0.5*nor.y, 0.0, 1.0 );\n        float dif = clamp( dot( nor, lig ), 0.0, 1.0 );\n        float bac = clamp( dot( nor, normalize(vec3(-lig.x,0.0,-lig.z))), 0.0, 1.0 )*clamp( 1.0-pos.y,0.0,1.0);\n        float dom = smoothstep( -0.1, 0.1, ref.y );\n        float fre = pow( clamp(1.0+dot(nor,rd),0.0,1.0), 2.0 );\n\t\tfloat spe = pow(clamp( dot( ref, lig ), 0.0, 1.0 ),16.0);\n        \n        dif *= softshadow( pos, lig, 0.02, 2.5 );\n        dom *= softshadow( pos, ref, 0.02, 2.5 );\n\n\t\tvec3 lin = vec3(0.0);\n        lin += 1.20*dif*vec3(1.00,0.85,0.55);\n\t\tlin += 1.20*spe*vec3(1.00,0.85,0.55)*dif;\n        lin += 0.20*amb*vec3(0.50,0.70,1.00)*occ;\n        lin += 0.30*dom*vec3(0.50,0.70,1.00)*occ;\n        lin += 0.30*bac*vec3(0.25,0.25,0.25)*occ;\n        lin += 0.40*fre*vec3(1.00,1.00,1.00)*occ;\n\t\tcol = col*lin;\n\n    \tcol = mix( col, vec3(0.8,0.9,1.0), 1.0-exp( -0.002*t*t ) );\n\n    }\n\n\treturn vec3( clamp(col,0.0,1.0) );\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //Load Data\n    vec3 cameraPosition = readMemory(_CameraPosition).xyz;\n    \n    selection[0] = readMemory(_Selector).x;\n    selection[1] = readMemory(_Selector).y;\n    selection[2] = readMemory(_Selector).z;\n    selection[3] = readMemory(_Selector).w;\n    selection[4] = readMemory(_Selector2).x;\n    selection[5] = readMemory(_Selector2).y;\n    selection[6] = readMemory(_Selector2).z;\n    selection[7] = readMemory(_Selector2).w;\n    \n    intersectorSelection[0] = readMemory(_IntersectorSelector).x;\n    intersectorSelection[1] = readMemory(_IntersectorSelector).y;\n    intersectorSelection[2] = readMemory(_IntersectorSelector).z;\n    intersectorSelection[3] = readMemory(_IntersectorSelector).w;\n    \n    size = readMemory(_Size).x;    \n    color = readMemory(_Color).x;    \n    position = readMemory(_Position).xyz;\n    intersectorSize = readMemory(_IntersectorSize).x;   \n    intersectorPosition = readMemory(_IntersectorPosition).xyz;\n    \n\tvec2 q = fragCoord.xy/iResolution.xy;\n    vec2 p = -1.0+2.0*q;\n\tp.x *= iResolution.x/iResolution.y;\n    vec2 mo = iMouse.xy/iResolution.xy;\n\t\t \n\tfloat time = 0.0;//15.0 + iTime;\n\n\t// camera\t\n\t//vec3 ro = vec3( -0.5+3.5*cos(0.1*time + 6.0*mo.x), 1.0 + 2.0*mo.y, 0.5 + 3.5*sin(0.1*time + 6.0*mo.x) );\n\tvec3 ro = cameraPosition;// vec3( 0.0, 6.0, 5.0);\n    vec3 ta = vec3( 0.0, 0.0, 0.0 );\n\t\n\t// camera-to-world transformation\n    mat3 ca = setCamera( ro, ta, 0.0 );\n    \n    // ray direction\n\tvec3 rd = ca * normalize( vec3(p.xy,2.0) );\n\n    // render\t\n    vec3 col = render( ro, rd );\n\n\tcol = pow( col, vec3(0.4545) );\n\n    fragColor=vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Created by Alejandro Echeverria - 2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// A CSG editor forked using the distance functions, lighting and rendering from iq's distance field shader: \n// https://www.shadertoy.com/view/Xds3zN\n\n// You can select one base primitive and one intersection primitive, move them and scale them to create\n// interesting intersections\n\n/** Keyboard Keys */\n\nconst int Key_Left = 37;\nconst int Key_Up = 38;\nconst int Key_Right = 39;\nconst int Key_Down = 40;\n\nconst int Key_0 = 48;\nconst int Key_1 = 49;\nconst int Key_2 = 50;\nconst int Key_3 = 51;\nconst int Key_4 = 52;\nconst int Key_5 = 53;\nconst int Key_6 = 54;\nconst int Key_7 = 55;\nconst int Key_8 = 56;\nconst int Key_9 = 57;\n\nconst int Key_A = 65;\nconst int Key_C = 67;\nconst int Key_D = 68;\nconst int Key_E = 69;\nconst int Key_F = 70;\nconst int Key_M = 77;\nconst int Key_N = 78;\nconst int Key_O = 79;\nconst int Key_P = 80;\nconst int Key_Q = 81;\nconst int Key_R = 82;\nconst int Key_S = 83;\nconst int Key_T = 84;\nconst int Key_U = 85;\nconst int Key_V = 86;\nconst int Key_W = 87;\nconst int Key_X = 88;\nconst int Key_Y = 89;\nconst int Key_Z = 90;\n\n/** Tweaking Parameters*/\nconst float Delta_Size = 0.01;\nconst float Delta_Position = 0.01;\nconst float Delta_Color = 10.0;\n\n/** Variables */\nconst float _Selector = 1.0;\nconst float _Selector2 = 2.0;\nconst float _Size = 10.0;\nconst float _Position = 11.0;\nconst float _Color = 12.0;\nconst float _IntersectorSelector = 14.0;\nconst float _IntersectorSize = 15.0;\nconst float _IntersectorPosition = 16.0;\n\nconst float _CameraPosition = 17.0;\n\n\n// process keyboard input\nbool readKey( int key )\n{\n\tbool toggle = false;\n\tfloat keyVal = texture( iChannel1, vec2( (float(key)+.5)/256.0, toggle?.75:.25 ) ).x;\n\treturn (keyVal>.5)?true:false;\n}\n\nvec4 readMemory(float address)\n{\n    return texture(iChannel0, vec2(address+.5)/iChannelResolution[0].xy);\n}\n\nbool writesMemory(in vec2 fragCoords, in float idx)\n{\n \tvec2 idx2D = vec2(idx);\n   \n    return \n        fragCoords.x < (idx2D.x + 1.0) \n        && fragCoords.x > (idx2D.x - 1.0)\n        && fragCoords.y < (idx2D.y + 1.0) \n        && fragCoords.y > (idx2D.y - 1.0); \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 selector = readMemory(_Selector);\n    vec4 intersectorSelector = readMemory(_IntersectorSelector);\n    vec4 selector2 = readMemory(_Selector2);\n    float size = readMemory(_Size).x;\n    float intersectorSize = readMemory(_IntersectorSize).x;\n    vec3 position = readMemory(_Position).xyz;\n    vec3 intersectorPosition = readMemory(_IntersectorPosition).xyz;\n    float color = readMemory(_Color).x;\n    vec3 cameraPosition = readMemory(_CameraPosition).xyz;\n    \n    if(iFrame == 0)\n    {\n        selector = vec4(0.0,1.0,0.0,0.0);\n        size = 0.8;\n        color = 10.0;\n        position = vec3(0.0,1.0,0.0);\n        intersectorSelector = vec4(1.0,0.0,0.0,0.0);\n        intersectorSize = 1.0;\n        intersectorPosition = vec3(0.0,1.0,0.0);\n        cameraPosition = vec3(0.0, 6.0, 5.0);\n    }\n    \n    //Primitive selection\n    if(readKey(Key_1))\n    {\n        selector = vec4(1.0,0.0,0.0,0.0);\n        selector2 = vec4(0.0);\n    }\n    else if(readKey(Key_2))\n    {\n        selector = vec4(0.0,1.0,0.0,0.0);\n        selector2 = vec4(0.0);\n    }\n    else if(readKey(Key_3))\n    {\n        selector = vec4(0.0,0.0,1.0,0.0);\n        selector2 = vec4(0.0);\n    }\n    else if(readKey(Key_4))\n    {\n        selector = vec4(0.0,0.0,0.0,1.0);\n        selector2 = vec4(0.0);\n    }\n    else if(readKey(Key_5))\n    {\n        selector2 = vec4(1.0,0.0,0.0,0.0);\n        selector = vec4(0.0);\n    }\n    else if(readKey(Key_6))\n    {\n        selector2 = vec4(0.0,1.0,0.0,0.0);\n        selector = vec4(0.0);\n    }\n    //Intersector selector\n    else if(readKey(Key_7))\n    {\n        intersectorSelector = vec4(1.0,0.0,0.0,0.0);\n    }\n    else if(readKey(Key_8))\n    {\n        intersectorSelector = vec4(0.0,1.0,0.0,0.0);\n    }\n    else if(readKey(Key_9))\n    {\n        intersectorSelector = vec4(0.0,0.0,1.0,0.0);\n    }\n    else if(readKey(Key_0))\n    {\n        intersectorSelector = vec4(0.0,0.0,0.0,1.0);\n    }\n    \n    //Parameters\n    else if(readKey(Key_C))\n        size -= Delta_Size;\n    else if(readKey(Key_V))\n        size += Delta_Size;\n    else if(readKey(Key_Y))\n        color += Delta_Color;\n    //else if(readKey(Key_N))\n    //    color -= Delta_Color;\n    else if(readKey(Key_A))\n        position.x -= Delta_Position;\n    else if(readKey(Key_D))\n        position.x += Delta_Position;\n    else if(readKey(Key_S))\n        position.z += Delta_Position;\n    else if(readKey(Key_W))\n        position.z -= Delta_Position;\n    else if(readKey(Key_Z))\n        position.y -= Delta_Position;\n    else if(readKey(Key_X))\n        position.y += Delta_Position;\n    else if(readKey(Key_P))\n        intersectorSize += Delta_Size;\n    else if(readKey(Key_O))\n        intersectorSize -= Delta_Size;\n    else if(readKey(Key_Left))\n        intersectorPosition.x -= Delta_Position;\n    if(readKey(Key_Right))\n        intersectorPosition.x += Delta_Position;\n    else if(readKey(Key_Down))\n        intersectorPosition.z += Delta_Position;\n    else if(readKey(Key_Up))\n        intersectorPosition.z -= Delta_Position;\n    else if(readKey(Key_N))\n        intersectorPosition.y -= Delta_Position;\n    else if(readKey(Key_M))\n        intersectorPosition.y += Delta_Position;\n       \n        \n    \n    bool writesSelector = writesMemory(fragCoord, _Selector);\n    bool writesSelector2 = writesMemory(fragCoord, _Selector2);\n    bool writesSize = writesMemory(fragCoord, _Size);\n  \tbool writesPosition = writesMemory(fragCoord, _Position);\n    bool writesColor = writesMemory(fragCoord, _Color);\n    bool writesIntersectorSelector = writesMemory(fragCoord, _IntersectorSelector);\n    bool writesIntersectorSize = writesMemory(fragCoord, _IntersectorSize);\n    bool writesIntersectorPosition = writesMemory(fragCoord, _IntersectorPosition);\n    bool writesCameraPosition = writesMemory(fragCoord, _CameraPosition);\n  \n    if(writesSelector)\n        fragColor = vec4(selector);\n    else if(writesSelector2)\n        fragColor = vec4(selector2);\n    else if(writesSize)\n        fragColor = vec4(size);\n    else if(writesPosition)\n        fragColor = vec4(position, 0);\n    else if(writesColor)\n        fragColor = vec4(color);\n    else if(writesIntersectorSelector)\n        fragColor = vec4(intersectorSelector);\n    else if(writesIntersectorSize)\n        fragColor = vec4(intersectorSize);\n    else if(writesIntersectorPosition)\n        fragColor = vec4(intersectorPosition, 0);\n    else if(writesCameraPosition)\n        fragColor = vec4(cameraPosition, 0);\n    else\n        discard;\n    \n}","name":"Buf A","description":"","type":"buffer"}]}