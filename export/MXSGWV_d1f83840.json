{"ver":"0.1","info":{"id":"MXSGWV","date":"1708922526","viewed":100,"name":"shader208","username":"steja","description":"random","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["random"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 palette( float t ) {\n    vec3 a = vec3(1.0, 0.5, 0.5);\n    vec3 b = vec3(0.7, 0.5, 0.5);\n    vec3 c = vec3(2.0, 1.0, 1.0);\n    vec3 d = vec3(0.263, 0.416, 0.557);\n\n    return a + b * cos(6.28318 * (c * t + d));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.0);\n    \n    // Ambient light level\n    vec3 ambient = vec3(0.05, 0.05, 0.05);\n\n    for (float i = 0.0; i < 4.0; i++) {\n        uv = fract(uv * 1.5) - 0.5;\n\n        float d = length(uv) * exp(-length(uv0));\n\n        vec3 col = palette(length(uv0) + i * .4 + iTime * .4);\n\n        d = sin(d * 9. + iTime) / 8.;\n        d = abs(d);\n\n        // Simulate a diffuse effect based on distance\n        float diffuse = pow(2.0 - length(uv), 2.0);\n\n        // Simulate a specular effect (simplified for 2D)\n        float specular = pow(max(dot(normalize(uv), vec2(0.0, 1.0)), 0.0), 10.0);\n\n        // Random effect based on time and position\n        float randomEffect = 0.5 + 0.5 * cos(dot(uv, vec2(12.9898, 78.233)) * 43758.5453 + iTime);\n\n        // Combine color with lighting and effects\n        d = pow(0.01 / d, 1.2) * diffuse * specular * randomEffect;\n\n        finalColor += col * d;\n    }\n\n    fragColor = vec4(finalColor + ambient, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}