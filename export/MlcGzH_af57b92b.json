{"ver":"0.1","info":{"id":"MlcGzH","date":"1467892133","viewed":241,"name":"[SH16A] Challenge 1 (david_k)","username":"david_k","description":"My entry in the Shadertoy Competition 2016 challenge 1","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["sh16a"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define O normalize\n#define V vec3\n#define F floor\n\nvoid mainImage(out vec4 X, vec2 Y ) \n{\n    float j;\n\n    V s = iResolution,\n    w = O(2. * V(Y, s.y + .5) - s),\n    l = V(0,1,0),\n    a = V(.850987, 2, -2.87677),\n    b = -O(.2*l+a),\n    c = O(cross(b,l)),p,q;\n    V e = O(mat3(c,cross(c,b),b)*w), // Get the view direction\n    d = e; // Store the view direction\n\n    for( int i=0; i<128; i++ ) {\n        p = clamp(F(a + .5), -2., 2.); // Find the center of the closest sphere\n        j = length(q = a - V(p.x, j= .4-mod(p.x + p.z, 2.)*.15, p.z)) - j; // Get the distance and direction to the closest sphere\n        s = V(2,0,0)+V(-.16, .06, .12)*F(p.z*.5 + p.x*2.5 + 6.); // Get the color of the sphere\n\n        if (a.y < j) // Test if the plane is closer than the sphere\n            j = a.y, // Set the shortest distance to the plane distance\n            w = abs(a), s = (max(w.x, w.z) < 1.5 ? smoothstep(.0, .5, length(p-a)) : 1.)*\n            V(mod(F(a.x) + F(a.z), 2.) < .5 ? .8 : texture(iChannel0, .1*a.xz).x), // Get the color\n            q = l; // Set the normal\n        \n\n        if (i == 63) // Change direction and start stepping towards the light source\n            d = O(V(-.6, .7, -.5)), // Set step direction\n            j = .01, // Offset to move out from the surface\n            b = O(q), // Store the normal\n            c = s; // Store the color\n        \n        a += d*j;\n    }\n\n    X.rgb = \n        sqrt(dot(b, d)*step(1., j)*(c*V(.6,.51,.33) + pow(max(dot(reflect( e, b ), d), 0.),16.))\n        + (1.+b.y)*V(.5,.7,1)/8.*c);\n}","name":"Image","description":"","type":"image"}]}