{"ver":"0.1","info":{"id":"tdGfDG","date":"1607914223","viewed":326,"name":"Again a Cornell Box ","username":"JacobC","description":"Playing around with shadows and a kind of area light\nYou can rotate the box with the mouse by clicking it","likes":23,"published":1,"flags":0,"usePreview":0,"tags":["3d","light","fun","shadows"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n * \"Again a Cornell Box \" by Jacob Ceron aka JacobC - 2020\n * License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n * Contact: jacobceron6@gmail.com\n */\n\n#define AA 1.\n\n#define R iResolution.xy\n#define M iMouse.xy\n#define T iTime\n#define Pi 3.141592\n\n#define light_pos vec3(0, 2.95, 0)\n#define light_col vec3(1)\n\nvec2 light_size = vec2(1);\nvec3 o = vec3(0, 0, 9);\n\nstruct mat\n{\n    float z;\n    int id;\n    float ao;\n    int e;\n    int r;\n    vec3 c;\n    vec3 i;\n};\n\nfloat map(in float i, in float c, in float l, in float q)\n{\n    return 1. - 1. / (c + l * i + q * i * i);\n}\n\nfloat plane(in vec3 p, in vec2 s, in float k)\n{\n    p.xy = max(abs(p.xy) - (s - k), 0.);\n    return length(p) - k;\n}\n\nvec3 areaLight(in vec3 p, in vec2 s)\n{\n    p = max(abs(p) - vec3(s.x, 0, s.y), 0.) * sign(p);\n    return p;\n}\n\nfloat box(in vec3 p, in vec3 s, in float k)\n{\n    p = abs(p) - (s - k);\n    return length(max(p, 0.)) - k;\n}\n\nfloat ao(in mat a, in mat b, in vec3 c)\n{\n    if (a.id == b.id)\n        return a.ao;\n    return clamp(a.ao * map(max(a.z, b.z), c.x, c.y, c.z), 0., 1.);\n}\n\nvec3 bleed(in mat a, in mat b, in vec3 c, out int i)\n{\n    if (a.id == b.id)\n        return a.i;\n    i++;\n    return a.i + mix(b.c, vec3(0), map(max(a.z, b.z), c.x, c.y, c.z));\n}\n\nmat Uop(in mat a, in mat b, in int id)\n{\n    if (a.id == id)\n        return b;\n    if (b.id == id)\n        return a;\n    return mat(\n        min(a.z, b.z),\n        a.z < b.z ? a.id : b.id,\n        a.z < b.z ? a.ao : b.ao,\n        a.z < b.z ? a.e : b.e,\n        a.z < b.z ? a.r : b.r,\n        a.z < b.z ? a.c : b.c,\n        a.z < b.z ? a.i : b.i\n    );\n}\n\n#define STEPS 255\n#define MIN_S .01\n#define MAX_S 32.\n\nmat2 rot(in float a)\n{\n    a = Pi * a / 180.;\n    return mat2(cos(a), sin(a), -sin(a), cos(a));\n}\n\nmat scene(in vec3 p, in int id)\n{   \n    mat p0 = mat(plane(vec3(p.x, p.z, p.y - 3.), vec2(3), 0.), 0, 1., 0, 0, vec3(1), vec3(0));\n    mat p1 = mat(plane(vec3(p.x, p.z, p.y + 3.), vec2(3), 0.), 1, 1., 0, 0, vec3(1), vec3(0));\n    \n    mat p2 = mat(plane(vec3(p.z, p.y, p.x - 3.), vec2(3), 0.), 2, 1., 0, 0, vec3(1, 1, 0), vec3(0));\n    mat p3 = mat(plane(vec3(p.z, p.y, p.x + 3.), vec2(3), 0.), 3, 1., 0, 0, vec3(.05, .25, 1), vec3(0));\n    \n    mat p4 = mat(plane(vec3(p.x, p.y, p.z + 3.), vec2(3), 0.), 4, 1., 0, 0, vec3(1), vec3(0));\n    mat p5 = mat(plane(vec3(p.x, p.y, p.z - 3.), vec2(3), 0.), 5, 1., 0, 0, vec3(1), vec3(0));\n    \n    mat s0 = mat(box(p - vec3(1.5, -2, 1.5), vec3(1), 1.), 6, 1., 0, 0, vec3(1), vec3(0));\n    vec3 q = p;\n    q -= vec3(-.5, -1.3, -1);\n    q.xz *= rot(70.);\n    mat b0 = mat(box(q, vec3(1, 1.7, 1), 0.), 7, 1., 0, 1, vec3(1), vec3(0));\n    \n    q = p - light_pos;\n    light_size.x = max(sin(T), 0.) + 1.;\n    mat l0 = mat(plane(vec3(q.x, q.z, q.y), light_size, 0.), 8, 1., 1, 0, vec3(1), vec3(0));\n    \n    // Objects\n    mat r = mat(1000., -1, 1., 0, 0, vec3(1), vec3(1));\n    if (max(dot(vec3( 0, -1,  0), o - vec3(0, 3, 0)), 0.) > 0.)\n        r = Uop(r, p0, id);\n    if (max(dot(vec3( 0,  1,  0), o - vec3(0, -3, 0)), 0.) > 0.)\n        r = Uop(r, p1, id);\n    if (max(dot(vec3(-1,  0,  0), o - vec3(3, 0, 0)), 0.) > 0.)\n        r = Uop(r, p2, id);\n    if (max(dot(vec3( 1,  0,  0), o - vec3(-3, 0, 0)), 0.) > 0.)\n        r = Uop(r, p3, id);\n    if (max(dot(vec3( 0,  0,  1), o - vec3(0, 0, -3)), 0.) > 0.)\n        r = Uop(r, p4, id);\n    if (max(dot(vec3( 0,  0, -1), o - vec3(0, 0, 3)), 0.) > 0.)\n        r = Uop(r, p5, id);\n    \n    r = Uop(r, s0, id);\n    r = Uop(r, b0, id);\n    \n    r = Uop(r, l0, id);\n    \n    if (r.z < MIN_S && r.e != 1)\n    {\n        // AO\n        vec3 c;\n        if (r.id == 0 || r.id == 1 || r.id == 2 || r.id == 3 || r.id == 4 || r.id == 5)\n            c = vec3(1, 44.8, .1);\n        else if (r.id == 6)\n            c = vec3(1, 5.6, 7.6);\n        else if (r.id == 7)\n            c = vec3(1, 44.8, .1);\n        \n        r.ao = ao(r, p0, c);\n        r.ao = ao(r, p1, c);\n        r.ao = ao(r, p2, c);\n        r.ao = ao(r, p3, c);\n        r.ao = ao(r, p4, c);\n        r.ao = ao(r, p5, c);\n        \n        r.ao = ao(r, s0, vec3(1, 5.6, 7.2));\n        \n        if (r.id == 0 || r.id == 1 || r.id == 2 || r.id == 3 || r.id == 4 || r.id == 5)\n            c = vec3(1, 44.8, .1);\n        \n        r.ao = ao(r, b0, c);\n        \n        r.ao = clamp(r.ao, 0., 1.);\n        \n        // Bleeding\n        int i = 0;\n        c = vec3(1, .3, .4);\n\n        r.i = bleed(r, p0, c, i);\n        r.i = bleed(r, p1, c, i);\n        r.i = bleed(r, p2, c, i);\n        r.i = bleed(r, p3, c, i);\n        r.i = bleed(r, p4, c, i);\n        r.i = bleed(r, p5, c, i);\n        \n        r.i = bleed(r, s0, c, i);\n        r.i = bleed(r, b0, c, i);\n        \n        r.i /= float(2);\n    }\n    \n    return r;\n}\n\nvec3 normal(in vec3 p)\n{\n    vec2 e = vec2(.001, .0);\n    return normalize(scene(p, -1).z - vec3(scene(p - e.xyy, -1).z, scene(p - e.yxy, -1).z, scene(p - e.yyx, -1).z));\n}\n\nmat marcher(in vec3 o, in vec3 d, in int id)\n{\n    float t = 0.;\n    float m = 1.;\n    for (int i = 0; i < STEPS; i++)\n    {\n        mat s = scene(o + d * t, id);\n        t += s.z * .7;\n        if (s.z < MIN_S)\n            return mat(t, s.id, s.ao, s.e, s.r, s.c, s.i);\n        if (t > MAX_S)\n            return mat(t, -1, -1., -1, -1, vec3(-1), vec3(-1));\n    }\n    \n}\n\nfloat shadow(in vec3 o, in vec3 d, float k, in int id)\n{\n    float t = 0.;\n    float ms = 1.;\n    for (int i = 1; i < 99; i++)\n    {\n        mat s = scene(o + d * t, id);\n        t += s.z * .3;\n        if (s.e == 1)\n            break;\n        ms *= map(s.z / t * k, 1., .1, 7.2);\n    }\n    return clamp(ms, 0., 1.);\n}\n\nvec3 camera(in vec2 p, in vec3 o, in vec3 t)\n{\n    vec3 w = normalize(o - t);\n    vec3 u = normalize(cross(vec3(0, 1, 0), w));\n    vec3 v = cross(w, u);\n    return p.x * u + p.y * v - w;\n}\n\nvoid mainImage(out vec4 O, in vec2 F)\n{\n    O = vec4(0);\n    vec2 ms = (M - R * .5) / R.y;\n    for (float y = 0.; y < AA; y++)\n    {\n        for (float x = 0.; x < AA; x++)\n        {\n            vec2 n = vec2(x, y) / AA - .5;\n            vec2 uv = (F + n - R * .5) / R.y;\n    \n            o = vec3(0, 0, 9);\n            if (iMouse.z > 0.)\n                o = vec3(sin(ms.x * Pi * 2.), ms.y * 2., cos(ms.x * Pi * 2.)) * 9.;\n            vec3 d = camera(uv, o, vec3(0));\n\n            int id = -1;\n            for (int i = 0; i < 2; i++)\n            {\n                mat m = marcher(o, d, id);\n                if (m.id != -1)\n                {\n                    if (m.e != 1)\n                    {\n                        vec3 p = o + d * m.z;\n                        vec3 n = normal(p);\n                        if (m.r == 1)\n                        {\n                            d = reflect(normalize(p - o), n);\n                            o = p;\n                            id = m.id;\n                            continue;\n                        }\n\n                        vec3 lp = areaLight(p - light_pos, light_size);\n                        vec3 ld = normalize(-lp);\n                        vec3 diffuse = max(dot(ld, n), 0.) * light_col;\n                        float sh = shadow(p + n * .05, ld, 32., -1);\n\n                        O.rgb += (diffuse * sh + m.i * m.ao) / 2. * m.c;\n                        if (m.r == 0)\n                            break;\n                    }\n                    else\n                    {\n                        O.rgb += 1.;\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    \n    O.rgb /= AA * AA;\n    \n    O.rgb = sqrt(O.rgb);\n}","name":"Image","description":"","type":"image"}]}