{"ver":"0.1","info":{"id":"3tBBWK","date":"1600240171","viewed":101,"name":"Cogito01","username":"hibit","description":"My artwork for klab2020","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define AA 1\n\n// Distance Function\nfloat sphere(vec3 p, float s) {\n    return length(p) - s;\n}\n\nvec4 orb;\n\nfloat map1( vec3 p, float s )\n{\n\tfloat scale = 2.0;\n\n\torb = vec4(1000.0); \n\t\n\tfor( int i=0; i<10;i++ )\n\t{\n\t\tp = -1.0 + 2.0*fract(0.5*p+0.5);\n\n\t\tfloat r2 = dot(p,p);\n\t\t\n        orb = min( orb, vec4(abs(p),r2) );\n\t\t\n\t\tfloat k = s/r2;\n\t\tp     *= k;\n\t\tscale *= k;\n\t}\n\t\n    float ans1 = abs(p.x)/scale;\n    float ans2 = abs(p.y)/scale;\n    float ans3 = abs(p.z)/scale;\n    float ans4 = 1.0/scale;\n    float t = mod(iTime,3.0);\n    float t1, t2, t3, t4;\n    t1 = max(0.0,-2.0*pow((t-0.5),2.0)+0.60);\n    t2 = max(0.0,-2.0*pow((t-1.5),2.0)+0.60);\n    t3 = max(0.0,-2.0*pow((t-2.5),2.0)+0.60);\n    return t1*ans1 + t2*ans2 + t3*ans3; \n}\n\nfloat map2( vec3 p, float s ) \n{\n\tfloat scale = 2.0;\n\n\torb = vec4(1000.0); \n\t\n\tfor( int i=0; i<10;i++ )\n\t{\n\t\tp = -1.0 + 2.0*fract(0.5*p+0.5);\n\n\t\tfloat r2 = dot(p,p);\n\t\t\n        orb = min( orb, vec4(abs(p),r2) );\n\t\t\n\t\tfloat k = s/r2;\n\t\tp     *= k;\n\t\tscale *= k;\n\t}\n    float ans4 = 1.0/scale;\n    return 1.0*ans4;\n}\nvec3 CreateRay(vec2 p, vec3 cameraPos, vec3 cameraTarget, float fov) {\n    vec3 forward = normalize(cameraTarget - cameraPos);\n    vec3 side = normalize(cross(vec3(0.0, 1.0, 0.0), forward));\n    vec3 up = normalize(cross(forward, side));\n    return normalize(forward * fov + side * p.x + up * p.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (fragCoord.xy * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n    \n    //カメラの位置\n    float pi = atan(1.0)*4.0;\n    vec3 cameraPos;\n    cameraPos = vec3(1.0, 1.0, 1.0);\n    if (iTime > 16.0){\n        float t = iTime - 16.0;\n        t = t*t/24.0;\n        cameraPos = vec3(1.0+sin(t*pi/4.0), 1.0, cos(t*pi/4.0));\n    }\n    if (iTime > 40.0){\n        cameraPos = vec3(1.0, 1.0, 1.0);\n    }\n    if(iTime > 58.0){\n        float t = iTime - 58.0;\n        t = t*t/8.0;\n        cameraPos = vec3(1.0,1.0,1.0+t);\n    }\n\n    \n    // カメラの注視点\n    vec3 cameraTarget = vec3(2.0, 2.0, 2.0);\n    if(iTime > 16.0){\n        float t = iTime - 16.0;\n        t = t*t/24.0;\n        cameraTarget = vec3(2.0 + sin(t*pi/4.0), 2.0, 1.0 + cos(t*pi/4.0));\n    }\n    if(iTime > 40.0){\n        cameraTarget = vec3(2.0,2.0,2.0);\n    }\n    if(iTime > 58.0){\n        float t = iTime - 58.0;\n        t = t*t/8.0;\n        cameraPos = vec3(2.0,2.0,2.0+t);\n    }\n    \n    // シェーディングピクセルのカメラからシーンへのレイ\n    vec3 ray = CreateRay(p, cameraPos, cameraTarget, 2.5);\n\n\t// レイマーチング\n    float t = max(60.0/iTime,1.0);\n    vec3 col = vec3(0.0);\n    int it = int(iTime*3.0);\n    for(int i=0; i<min(it,900); i++) {\n    \tvec3 pos = cameraPos + ray * t;\n        float d = map2(pos, 1.2);\n        if (iTime > 50.0) d = map1(pos, 1.2);\n        if (d < 0.001) {\n        \tcol = vec3(1.0 - float(i) / 70.);\n            break; \n        }\n        t += d;\n    }\n    //Timer\n    if(iTime > 50.0){\n        col -= vec3(0.4);\n        if(mod(iTime,3.0) < 1.0) col += vec3(0.9,0.8,0.0);\n        else if(mod(iTime,3.0) < 2.0) col += vec3(0.4,0.2,0.0);\n        else if(mod(iTime,3.0) < 3.0) col += vec3(0.3,0.3,0.3);\n    }\n    if(iTime > 72.0){\n        col = vec3(0.0,0.0,0.0);\n    }\n    fragColor = vec4(col,1.0);\n} ","name":"Image","description":"","type":"image"}]}