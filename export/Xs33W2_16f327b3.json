{"ver":"0.1","info":{"id":"Xs33W2","date":"1452180205","viewed":1077,"name":"bicubic vs bilinear","username":"Justaway","description":"Bicubic interpolation vs bilinear.  Click and slide to compare.","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["interpolation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"#define DOWNSCALE 32.0\n\nvec4 interpolate_bilinear(vec2 p, vec4 q[16])\n{\n    vec4 r1 = (1.0-p.x)*q[5]+p.x*q[9];\n    vec4 r2 = (1.0-p.x)*q[6]+p.x*q[10];\n    return (1.0-p.y)*r1+p.y*r2;\n}\n\nvec4 interpolate_bicubic(vec2 p, vec4 q[16])\n{\n    vec4 a00 = q[5];\n\tvec4 a01 = -.5*q[4]+.5*q[6];\n\tvec4 a02 = q[4]-2.5*q[5]+2.0*q[6]-.5*q[7];\n\tvec4 a03 = -.5*q[4]+1.5*q[5]-1.5*q[6]+.5*q[7];\n\tvec4 a10 = -.5*q[1]+.5*q[9];\n\tvec4 a11 = .25*q[0]-.25*q[2]-.25*q[8]+.25*q[10];\n\tvec4 a12 = -.5*q[0]+1.25*q[1]-q[2]+.25*q[3]+.5*q[8]-1.25*q[9]+q[10]-.25*q[11];\n\tvec4 a13 = .25*q[0]-.75*q[1]+.75*q[2]-.25*q[3]-.25*q[8]+.75*q[9]-.75*q[10]\n        +.25*q[11];\n\tvec4 a20 = q[1]-2.5*q[5]+2.0*q[9]-.5*q[13];\n\tvec4 a21 = -.5*q[0]+0.5*q[2]+1.25*q[4]-1.25*q[6]-q[8]+q[10]+.25*q[12]-.25*q[14];\n\tvec4 a22 = q[0]-2.5*q[1]+2.0*q[2]-.5*q[3]-2.5*q[4]+6.25*q[5]-5.0*q[6]+1.25*q[7]\n        +2.0*q[8]-5.0*q[9]+4.0*q[10]-q[11]-.5*q[12]+1.25*q[13]-q[14]+.25*q[15];\n\tvec4 a23 = -.5*q[0]+1.5*q[1]-1.5*q[2]+.5*q[3]+1.25*q[4]-3.75*q[5]+3.75*q[6]\n        - 1.25*q[7]-q[8]+3.0*q[9]-3.0*q[10]+q[11]+.25*q[12]-.75*q[13]+.75*q[14]-.25*q[15];\n\tvec4 a30 = -.5*q[1]+1.5*q[5]-1.5*q[9]+.5*q[13];\n\tvec4 a31 = .25*q[0]-0.25*q[2]-0.75*q[4]+.75*q[6]+.75*q[8]-.75*q[10]-.25*q[12]+.25*q[14];\n\tvec4 a32 = -.5*q[0]+1.25*q[1]-q[2]+.25*q[3]+1.5*q[4]-3.75*q[5]+3.0*q[6]-.75*q[7]-1.5*q[8]\n        + 3.75*q[9]-3.0*q[10]+.75*q[11]+.5*q[12]-1.25*q[13]+q[14]-.25*q[15];\n\tvec4 a33 = .25*q[0]-0.75*q[1]+0.75*q[2]-.25*q[3]-.75*q[4]+2.25*q[5]-2.25*q[6]+.75*q[7]\n        +.75*q[8]-2.25*q[9]+2.25*q[10]-.75*q[11]-.25*q[12]+.75*q[13]-.75*q[14] \n        +.25*q[15];\n    float x2 = p.x*p.x;\n    float x3 = x2*p.x;\n    float y2 = p.y*p.y;\n    float y3 = y2*p.y;\n   \treturn (a00+a01*p.y+a02*y2+a03*y3)+\n\t\t   (a10+a11*p.y+a12*y2+a13*y3)*p.x+\n\t\t   (a20+a21*p.y+a22*y2+a23*y3)*x2+\n\t\t   (a30+a31*p.y+a32*y2+a33*y3)*x3;\n}\n\nvec2 hash(vec2 v)\n{\n    return vec2(\n        fract(v.x*sin(v.y*v.y)*12345.0),\n        fract(v.y*sin(v.x*v.x)*42312.0)\n        );\n}\n\n#define PI 3.14159265359\n\nvec4 interpolate(vec2 p, vec2 pixel, vec2 base, vec2 uv)\n{\n    vec2 rand_vec = hash(uv);\n    vec2 offset = vec2(\n        -rand_vec.x*sin(rand_vec.y*2.0*PI),\n        rand_vec.x*cos(rand_vec.y*2.0*PI)\n        );\n    return texture(iChannel0,base+floor(offset)*pixel);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n  \tvec2 lowres = iResolution.xy/DOWNSCALE;\n  \tvec2 pixel = 1.0/lowres;\n  \tvec2 base_uv = floor(uv*lowres)/lowres;\n  \tvec2 sub_uv = fract(uv*lowres);\n    \n\n    vec4 q[16];\n    \n    for(int i = 0; i < 4; i++)\n    {\n        for(int j = 0; j < 4; j++)\n        {\n            q[i*4+j] = texture(iChannel0,base_uv+vec2(pixel.x*float(i-1),pixel.y*float(j-1)));\n        }\n    }\n    \n    vec4 bicubic = interpolate_bicubic(sub_uv,q);\n    \n    vec4 bilinear = interpolate_bilinear(sub_uv,q);\n    \n    float x;\n    if(iMouse.z>0.0){\n        x = iMouse.x/iResolution.x;\n    }else{\n        x = 0.5;\n    }\n    \n    if(uv.x < x)\n    {\n        fragColor = bicubic;\n    }\n    else\n    {\n        fragColor = bilinear;\n    }\n    \n}","name":"","description":"","type":"image"}]}