{"ver":"0.1","info":{"id":"sttcDX","date":"1660697661","viewed":99,"name":"MultiMandelbrot","username":"wikiemol","description":"Mandelbrot set","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define PI 3.14159\n\nint maxIterations = 200;\n\nint isInMandelbrotSet(vec2 point);\nvec2 cartesianToPolar(vec2 cartesianVector);\nvec2 polarToCartesian(vec2 polarVector);\nvec2 complexMultiply(vec2 a, vec2 b);\nint iterationsBeforeRepeat(vec2 point);\nvec2 complexPow(vec2 cartesianNumber, float power);\nuniform float zPower;\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 position = 2.0 * (fragCoord/iResolution.xy - 0.5);\n    position.x *= iResolution.x/iResolution.y;\n\n    vec3 col = 0.5 + 0.5*cos(iTime+position.xyx+vec3(0,2,4));\n\n    int iterations = iterationsBeforeRepeat(position);\n    if(iterations != -1) {\n        float intensity = float(iterations) / float(maxIterations) + 0.01;\n        fragColor = 4. *  vec4( intensity,\n         intensity,\n         intensity,\n        1.0);\n    } else {\n        fragColor = vec4(0.2, 0.2, 0.2, 1.0);\n    }\n}\n\nvec2 cartesianToPolar(vec2 cartesianVector) {\n    float r = sqrt(float(dot(cartesianVector, cartesianVector)));\n    float theta = atan(cartesianVector.y / float(cartesianVector.x));\n    return vec2(r, theta);\n}\n\nvec2 polarToCartesian(vec2 polarVector) {\n    return vec2(polarVector[0] * cos(polarVector[1]), polarVector[0] * sin(polarVector[1]));\n}\n\nvec2 complexMultiply(vec2 a, vec2 b) {\n    vec2 result = vec2(a.x * b.x - a.y * b.y, a.y * b.x + a.x * b.y);\n    return result;\n}\n\nint iterationsBeforeRepeat(vec2 point) {\n    vec2 Z = point;\n    int i;\n    for(i = 0; i < maxIterations; i++) {\n        \n        Z = 2. * complexPow(Z,  2. * cos(iTime + PI) + 4.) + point;\n        if(dot(Z - point, Z - point) > 200.*200.) {\n            return i;\n        }\n    }\n    return -1;\n}\n\nvec2 complexPow(vec2 cartesianNumber, float power) {\n    vec2 polar = cartesianToPolar(cartesianNumber);\n    polar[0] = pow(polar[0], power);\n    polar[1] *= power;\n    return polarToCartesian(polar);\n}","name":"Image","description":"","type":"image"}]}