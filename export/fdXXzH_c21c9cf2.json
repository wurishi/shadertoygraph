{"ver":"0.1","info":{"id":"fdXXzH","date":"1619045186","viewed":69,"name":"323_Aleshin_v0v3","username":"gtorvald","description":"Помимо базы реализовано:\n1) В качестве здания выбрано ГЗ МГУ\n2) Мягкие тени\n3) Анти-алиасинг\n4) Ambient Occlusion\n5) Окружение в виде текстурированного куб-мапа","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["323aleshinv0v3"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    fragColor = texture(iChannel0, uv) / float(iFrame + 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4sfGRr","filepath":"/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","previewfilepath":"/media/ap/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","type":"volume","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float INF = 1e10;\nconst vec3 CAMERA_POS = vec3(0, 4, -12);\n\nvec3 LIGHT1_POS = vec3(-3, 1, 1);\nconst float LIGHT1_RADIUS = 1.0;\nconst vec3 LIGHT1_COLOR = vec3(1, 1, 1);\n\nvec3 LIGHT2_POS = vec3(3, 1, 5);\nconst float LIGHT2_RADIUS = 1.0;\nconst vec3 LIGHT2_COLOR = vec3(1, 0, 0);\n\nconst vec3 SPHERE_POS = vec3(0, 0.2, 0);\nconst float SPHERE_RADIUS = 2.0;\n\nconst float SPHERE1_RADIUS = 0.25;\n\nconst vec3 CYLINDER_POS = vec3(0, 0, 0);\nconst vec3 CYLINDER_COLOR = vec3(1, 0, 0);\n\nconst vec3 CUBE_POS = vec3(0, 0.2, 0);\nconst vec3 CUBE_COLOR = vec3(0.5, 0.4, 0.3);\n\nconst float AIR_N = 1.0;\nconst float GLASS_N = 1.5;\nconst float DIAMOND_N = 2.5;\n\nvec3 randDir;\n\nconst float MARCH_SIZE = 0.1;\nconst int MAX_STEPS = 1000;\nconst vec3 FOG_POS = vec3(0, 0.2, 0);\nconst float FOG_RADIUS = 2.0;\nconst vec3 FOG_COLOR = vec3(1, 0, 1);\nconst float ABSORPTION = 1.0;\n\nfloat tracePlane(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-2.0 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) >= 100.0) {\n        return INF;\n    }\n    normal = vec3(0, 1, 0);\n    return t;\n}\n\nbool checkSize(vec3 worldPos, float a, float x, float y) {\n    const float sqrt2 = 1.41421356;\n    return true;\n}\n\nfloat traceCube(float A, float B, float C, vec3 pos, vec3 dir, out vec3 normal) {\n    vec3 worldPos;\n    float cubeT = INF;\n    float t = (-C - pos.z) / dir.z;\n    if (t < cubeT && t > 0.0) {\n        vec3 worldPos = t * dir + pos;\n        if (abs(worldPos.y) < B && abs(worldPos.x) < A) {\n            normal = vec3(0, 0, -1);\n            cubeT = t;\n        }\n    }\n    t = (C - pos.z) / dir.z;\n    if (t < cubeT && t > 0.0) {\n        worldPos = t * dir + pos;\n        if (abs(worldPos.y) < B && abs(worldPos.x) < A) {\n            normal = vec3(0, 0, 1);\n            cubeT = t;\n        }\n    }\n    t = (A - pos.x) / dir.x;\n    if (t < cubeT && t > 0.0) {\n        worldPos = t * dir + pos;\n        if (abs(worldPos.y) < B && abs(worldPos.z) < C) {\n            normal = vec3(1, 0, 0);\n            cubeT = t;\n        }\n    }\n    t = (-A - pos.x) / dir.x;\n    if (t < cubeT && t > 0.0) {\n        worldPos = t * dir + pos;\n        if (abs(worldPos.y) < B && abs(worldPos.z) < C) {\n            normal = vec3(-1, 0, 0);\n            cubeT = t;\n        }\n    }\n    t = (B - pos.y) / dir.y;\n    if (t < cubeT && t > 0.0) {\n        worldPos = t * dir + pos;\n        if (abs(worldPos.x) < A && abs(worldPos.z) < C) {\n            normal = vec3(0, 1, 0);\n            cubeT = t;\n        }\n    }\n    t = (-B - pos.y) / dir.y;\n    if (t < cubeT && t > 0.0) {\n        worldPos = t * dir + pos;\n        if (abs(worldPos.x) < A && abs(worldPos.z) < C) {\n            normal = vec3(0, -1, 0);\n            cubeT = t;\n        }\n    }\n    return cubeT;\n}\n\nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal) {\n    float b = dot(pos, dir);\n    float D = b * b - dot(pos, pos) + r * r;\n    if (D < 0.0) {\n        return INF;\n    }\n    float t = -b - sqrt(D);\n    if (t > 0.0) {\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    t = -b + sqrt(D);\n    if (t < 0.0) {\n        return INF;\n    }\n    normal = normalize(pos + t * dir);\n    return t;\n}\n\nfloat traceCylinder(vec3 pos, vec3 dir, out vec3 normal) {\n    const float R = 1.5;\n    const float H = 1.8;\n    float floorT = (-H - pos.y) / dir.y;\n    if (floorT <= 0.0)\n        return INF;\n    vec3 finalPos = pos + dir * floorT;\n    if (dot(finalPos.xz, finalPos.xz) < R * R) {\n        normal = vec3(0, 1, 0);\n        return floorT;\n    }\n    float b = dot(pos.xz, dir.xz);\n    float a = dot(dir.xz, dir.xz);\n    float D = b * b - (dot(pos.xz, pos.xz) - R * R) * a;\n    if (D < 0.0)\n        return INF;\n    floorT = (-b - sqrt(D)) / a;\n    if (floorT > 0.0) {\n        finalPos = floorT * dir + pos;\n        if (finalPos.y <= -H) {\n            normal = normalize(vec3(finalPos.x, 0, finalPos.z));\n            return floorT;\n        }\n    }\n    floorT = (-b + sqrt(D)) / a;\n    if (floorT < 0.0)\n        return INF;\n    finalPos = floorT * dir + pos;\n    if (finalPos.y <= -H) {\n        normal = normalize(vec3(finalPos.x, 0, finalPos.z));\n        return floorT;\n    }\n    return INF;\n}\n\nbool isOccluded(vec3 pos, vec3 target) {\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n    \n    vec3 sphereNormal;\n    float sphereT = traceSphere(pos - SPHERE_POS, dir, SPHERE_RADIUS, sphereNormal);\n    if (sphereT < dist)\n        return true;\n    vec3 cylinderNormal;\n    float cylinderT = traceCylinder(pos - CYLINDER_POS, dir, cylinderNormal);\n    if (cylinderT < dist)\n        return true;\n    return false;\n}\n\nvec3 computeLight(vec3 pos, vec3 color, vec3 normal) {\n    vec3 toLight1 = LIGHT1_POS - pos;\n    float distSq1 = dot(toLight1, toLight1);\n    float att1 = isOccluded(pos, LIGHT1_POS + randDir * LIGHT1_RADIUS * 0.2) ? 0.0 : 20.0 / distSq1;\n    vec3 toLight2 = LIGHT2_POS - pos;\n    float distSq2 = dot(toLight2, toLight2);\n    float att2 = isOccluded(pos, LIGHT2_POS + randDir * LIGHT2_RADIUS * 0.2) ? 0.0 : 20.0 / distSq2;\n    return color * (\n        max(0.0, dot(normal, normalize(toLight1))) * att1 * LIGHT1_COLOR +\n        max(0.0, dot(normal, normalize(toLight2))) * att2 * LIGHT2_COLOR +\n        texture(iChannel1, normal).rgb * 0.2);\n}\n\nvec3 refraction(vec3 v, vec3 normal, float n1, float n2, out bool isReflected) {\n    isReflected = false;\n    if (dot(v, normal) < 0.0) {\n        normal = -normal;\n    }\n    float cosA = dot(v, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3 tang = normalize(v - cosA * normal);\n    float sinB = sinA / n2 * n1;\n    if (sinB > 1.0) {\n        isReflected = true;\n        return reflect(v, normal);\n    }\n    float cosB = sqrt(1.0 - sinB * sinB);\n    return sinB * tang + cosB * normal;\n}\n\nfloat pow2(float x) {\n    return x * x;\n}\n\nfloat rand(float frame) {\n    return fract(sin(dot(vec3(frame), vec3(123.12, 764.472, 65.2342))) * 72865.2762);\n}\n\nfloat sphereSdf(vec3 pos) {\n    return length(pos - FOG_POS) - FOG_RADIUS;\n}\n\nfloat BeerLambert(float absCoef, float distTraveled) {\n    return exp(-absCoef * distTraveled);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    randDir = normalize(randVals - 0.5);\n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (randVals.xy - 0.5) * 2.0) / iResolution.x;\n    vec3 front = normalize(-CAMERA_POS);\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = normalize(cross(front, up));\n    up = normalize(cross(right, front));\n    vec3 viewVec = normalize(front + right * uv.x + up * uv.y);\n    \n    LIGHT1_POS += randVals * 0.2;\n    LIGHT2_POS += randVals * 0.3;\n    \n    const int EMISSION = 0;\n    const int DIFFUSE = 1;\n    const int REFLECTION = 2;\n    const int REFRACTION = 3;\n    \n    vec3 curPos = CAMERA_POS;\n    vec3 curDir = viewVec;\n    float n1 = AIR_N;\n    float n2 = GLASS_N;\n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N + GLASS_N);\n    float DIAMOND_R = pow2(DIAMOND_N - GLASS_N) / pow2(DIAMOND_N + GLASS_N);\n    \n    vec3 colorMult = vec3(1, 1, 1);\n    \n    for (int i = 0; i < 20; i++) {\n        float t = INF;\n        int materialType;\n        vec3 color;\n        vec3 normal;\n        float nEnter = AIR_N;\n        vec3 planeNormal;\n        float planeT = tracePlane(curPos, curDir, planeNormal);\n        if (planeT < t) {\n            t = planeT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel0, worldPos.xz * 0.1).rgb;\n            normal = planeNormal;\n            if (randVals.x < 0.1)\n                materialType = REFLECTION;\n        }\n        vec3 light1normal;\n        float light1T = traceSphere(curPos - LIGHT1_POS, curDir, LIGHT1_RADIUS, light1normal);\n        if (light1T < t) {\n            t = light1T;\n            materialType = EMISSION;\n            color = LIGHT1_COLOR;\n            normal = light1normal;\n        }\n        vec3 light2normal;\n        float light2T = traceSphere(curPos - LIGHT2_POS, curDir, LIGHT2_RADIUS, light2normal);\n        if (light2T < t) {\n            t = light2T;\n            materialType = EMISSION;\n            color = LIGHT2_COLOR;\n            normal = light2normal;\n        }\n        vec3 cylinderNormal;\n        float cylinderT = traceCylinder(curPos - CYLINDER_POS, curDir, cylinderNormal);\n        if (cylinderT < t) {\n            t = cylinderT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel2, worldPos.xz * worldPos.y).rgb;\n            normal = cylinderNormal;\n        }\n        vec3 cubeNormal;\n        float cubeT = traceCube(0.2, 0.4, 0.2, curPos - vec3(0, 0.2, 0), curDir, cubeNormal);\n        if (cubeT < t) {\n            t = cubeT;\n            normal = cubeNormal;\n            if (randVals.x * 0.15 < DIAMOND_R)\n                materialType = REFLECTION;\n            else {\n                colorMult = vec3(0.2, 0.2, 1);\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0 && normalize(curDir) != normal)\n                    nEnter = GLASS_N;\n                else\n                    nEnter = DIAMOND_R;\n            }\n        }\n        vec3 cube1Normal;\n        float cube1T = traceCube(0.3, 0.2, 0.1, curPos - vec3(-0.5, 0, 0), curDir, cube1Normal);\n        if (cube1T < t) {\n            t = cube1T;\n            normal = cube1Normal;\n            if (randVals.x * 0.15 < DIAMOND_R)\n                materialType = REFLECTION;\n            else {\n                colorMult = vec3(0.2, 0.2, 1);\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0 && normalize(curDir) != normal)\n                    nEnter = GLASS_N;\n                else\n                    nEnter = DIAMOND_R;\n            }\n        }\n        vec3 cube2Normal;\n        float cube2T = traceCube(0.3, 0.2, 0.1, curPos - vec3(0.5, 0, 0), curDir, cube2Normal);\n        if (cube2T < t) {\n            t = cube2T;\n            normal = cube2Normal;\n            if (randVals.x * 0.15 < DIAMOND_R)\n                materialType = REFLECTION;\n            else {\n                colorMult = vec3(0.2, 0.2, 1);\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0 && normalize(curDir) != normal)\n                    nEnter = GLASS_N;\n                else\n                    nEnter = DIAMOND_R;\n            }\n        }\n        vec3 cube3Normal;\n        float cube3T = traceCube(0.05, 0.25, 0.3, curPos - vec3(-0.8, 0.05, 0), curDir, cube3Normal);\n        if (cube3T < t) {\n            t = cube3T;\n            normal = cube3Normal;\n            if (randVals.x * 0.15 < DIAMOND_R)\n                materialType = REFLECTION;\n            else {\n                colorMult = vec3(0.2, 0.2, 1);\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0 && normalize(curDir) != normal)\n                    nEnter = GLASS_N;\n                else\n                    nEnter = DIAMOND_R;\n            }\n        }\n        vec3 cube4Normal;\n        float cube4T = traceCube(0.05, 0.25, 0.3, curPos - vec3(0.8, 0.05, 0), curDir, cube4Normal);\n        if (cube4T < t) {\n            t = cube4T;\n            normal = cube4Normal;\n            if (randVals.x * 0.15 < DIAMOND_R)\n                materialType = REFLECTION;\n            else {\n                colorMult = vec3(0.2, 0.2, 1);\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0 && normalize(curDir) != normal)\n                    nEnter = GLASS_N;\n                else\n                    nEnter = DIAMOND_R;\n            }\n        }\n        vec3 cube5Normal;\n        float cube5T = traceCube(0.1, 0.15, 0.1, curPos - vec3(0, 0.75, 0), curDir, cube5Normal);\n        if (cube5T < t) {\n            t = cube5T;\n            normal = cube5Normal;\n            if (randVals.x * 0.15 < DIAMOND_R)\n                materialType = REFLECTION;\n            else {\n                colorMult = vec3(0.2, 0.2, 1);\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0 && normalize(curDir) != normal)\n                    nEnter = GLASS_N;\n                else\n                    nEnter = DIAMOND_R;\n            }\n        }\n        vec3 cube6Normal;\n        float cube6T = traceCube(0.05, 0.15, 0.05, curPos - vec3(0, 1.05, 0), curDir, cube6Normal);\n        if (cube6T < t) {\n            t = cube6T;\n            normal = cube6Normal;\n            if (randVals.x * 0.15 < DIAMOND_R)\n                materialType = REFLECTION;\n            else {\n                colorMult = vec3(0.2, 0.2, 1);\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0 && normalize(curDir) != normal)\n                    nEnter = GLASS_N;\n                else\n                    nEnter = DIAMOND_R;\n            }\n        }\n        vec3 sphereNormal;\n        float sphereT = traceSphere(curPos - SPHERE_POS, curDir, SPHERE_RADIUS, sphereNormal);\n        if (sphereT < t) {\n            t = sphereT;\n            normal = sphereNormal;\n            if (randVals.x * 0.2 < GLASS_R)\n                materialType = REFLECTION;\n            else {\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0 && normalize(curDir) != normal)\n                    nEnter = AIR_N;\n                else\n                    nEnter = GLASS_N;\n            }\n        }\n        if (t != INF) {\n            vec3 worldPos = t * curDir + curPos;\n            fragColor = texture(iChannel0, worldPos.xz);\n            if (materialType == EMISSION){\n                fragColor.rgb = color * colorMult;\n                break;\n            } else if (materialType == DIFFUSE) {\n                fragColor.rgb = computeLight(worldPos, color, normal) * colorMult;\n                break;\n            } else if (materialType == REFLECTION) {\n                curDir = reflect(curDir, normal);\n                curPos = worldPos + curDir * 1e-5;\n            } else if (materialType == REFRACTION) {\n                bool isReflected;\n                curDir = refraction(curDir, normal, n1, nEnter, isReflected);\n                curPos = worldPos + curDir * 1e-5;\n                if (isReflected == false)\n                    n1 = nEnter;\n            }\n        } else {\n            fragColor.rgb = texture(iChannel1, curDir).rgb * 0.5 * colorMult;\n        }\n    }\n    \n    vec3 result = vec3(0, 0, 0);\n    float opacity = 1.0;\n    vec3 fogEffect = vec3(0.0);\n    \n    for (int i = 0; i < MAX_STEPS; i++) {\n        curPos = CAMERA_POS + viewVec * MARCH_SIZE * float(i);\n        float sdf = sphereSdf(curPos);\n        if (sphereSdf(curPos) < 0.0) {\n            float prevOpacity = opacity;\n            opacity *= BeerLambert(ABSORPTION, MARCH_SIZE);\n            float absorption = prevOpacity - opacity;\n            fogEffect += vec3(absorption) * FOG_COLOR * min(texture(iChannel1, curPos * 0.05).r, -sdf);\n        }\n    }\n    \n    result = mix(fogEffect, result, opacity);\n    fragColor.rgb += result;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    fragColor = texture(iChannel0, uv) + texture(iChannel1, uv);\n}","name":"Buffer B","description":"","type":"buffer"}]}