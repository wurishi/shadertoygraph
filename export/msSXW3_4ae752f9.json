{"ver":"0.1","info":{"id":"msSXW3","date":"1671431105","viewed":149,"name":"Raytracer #1","username":"thom_bahm","description":"First attempt Trying to build a Ray tracer, Math found in The Cherno's video: https://www.youtube.com/watch?v=4NshnkzOdI0\nWIP","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raytracing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Inspiration and used recourses: \n// Cherno Ray-tracing math videeo: https://www.youtube.com/watch?v=4NshnkzOdI0\n\nstruct Ray {\n    vec3 org;\n    vec3 dir;\n};\n\nbool sphere(Ray ray, vec4 sph, out float t) {\n    //(t^2)(dir^2)+2t(dir) * (origin-center) + (origin-center)*(origin-center) - r*r = 0\n    vec3 o_c = ray.org - sph.xyz; //origin-center\n    float a = dot(ray.dir, ray.dir); //ray.dir squared\n    float b = 2.0 * dot(o_c, ray.dir); //2* (oc.x*dir.x + oc.y*dir.y + oc.z*dir.z)\n    float c = dot(o_c,o_c) - sph.w*sph.w; //(orgin-center)*(origin-center)\n    float discr = b*b - 4.*a*c; //discriminant of quadratic formula\n    t = (-b - sqrt(discr))/(2.0*a); //point along line of ray.\n    return (discr > 0.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float fov = 45.0;\n    //create ray direction\n    vec2 uv = fragCoord - iResolution.xy / 2.0;\n    float z = iResolution.y / tan(radians(fov)/2.0);\n    \n    Ray ray; ray.org = vec3(0.5,0.5,5.0); //origin at <0.5,0.5,2.0>\n    ray.dir = (vec3(-1.0 + 1.0*uv, -z)); //dir at <\n    //ray.dir = normalize(vec3((2.0*uv), -1.));\n\n    float t = 0.5 * (ray.dir.y + 1.0);\n    t=100.;\n    vec3 col = (1.0-t)*vec3(1.0) + t*vec3(0.5,0.7,1.0);\n    col = vec3(0.0);\n    \n    vec4 sph = vec4(0.5,0.5,-4.0, 1.0);\n    bool isSph = sphere(ray, sph, t);\n    \n    vec3 lightPos = normalize(vec3(0, 4, 0));\n    lightPos = vec3(0.6);\n    //vec3 light = normalize(lightPos-t);\n    //if the sphere has been hit by a ray.\n    if (isSph) {\n        // point on sphere / intersection point.\n        vec3 pos = ray.org + t*ray.dir;\n        vec3 norm = normalize((pos-sph.xyz))/sph.w;\n        //determine lighting by norm.x*light.x + norm.y*light.y + ...\n        float lighting = dot(norm,lightPos);\n        col = vec3(lighting);\n    }\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}