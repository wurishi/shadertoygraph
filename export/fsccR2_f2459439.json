{"ver":"0.1","info":{"id":"fsccR2","date":"1654198549","viewed":137,"name":"Oneline music - Protracker Bars","username":"makslane","description":"One line music with Amiga Protracker sound bars","likes":2,"published":1,"flags":8,"usePreview":0,"tags":["sound","music","amiga","protracker"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\n\n\n\n//Measure the RMS of a square wave with n samples\nfloat measureRMS(float time, float n) {\n    float sum = 0.0;\n    float s;\n    for(float i = 0.; i < n; i++) {\n        s = oneLineMusic(time + i/iSampleRate).x;\n        sum += s * s;\n    }\n    //return sqrt(sum / n);\n    return sum / n;\n}\n\nfloat rectangle(vec2 st, vec2 pos, vec2 size) {\n\n\n    float c = 0.0;\n    \n    //w\n    c = step(pos.x, st.x);\n    c *= step(st.x, pos.x+size.x);\n    \n    //h\n    c *= step(pos.y, st.y);\n    c *= step(st.y, pos.y+size.y);\n    \n    return c;\n}\n\nfloat getAmplitude(float x) {\n    float amplitude;\n    \n    //For each frame, shows the wave ahead from iTime to iTime + iTimeDelta\n    //float amplitude = oneLineMusic(iTime + iTimeDelta*(fragCoord.x / iResolution.x)).x;                  \n    //float amplitude = measureRMS(iTime + 4.*iTimeDelta*(uv.x), 256.);\n    amplitude = measureRMS(iTime + 4.*iTimeDelta*x, 256.);\n    \n    return amplitude;\n\n}\n\nvec3 amigaSoundBarGradient(vec2 st, float height) {\n    vec3 color = vec3(0.0);\n    float y;\n    \n    //From 0 to height\n    y = st.y/height;\n    \n    //pixalate\n    y = (1./32.)*floor(32.*y);\n    \n    //green -> yellow -> red    \n    float r = step(y,.5)*2.*y+step(.5,y);\n    float g = step(y,.5)+(1.-step(y,.5))*(-2.*y+2.);\n    float b = 0.0;\n    color = vec3(r, g, b);\n    \n    return color;\n}\n\nvec4 drawBars(vec2 st, float n) {\n\n    float c=0.0, height = .5, width = .1*n;\n    vec4 color = vec4(0.0);\n    \n    \n    //fake four channels\n    st.x *= n;      \n    \n    //get bar position\n    float index = floor(st.x); //0, 1, 2, ... n-1  \n    \n    //calc amplitude based on bar position\n    float amp = getAmplitude(index);\n    \n    st = fract(st);  \n    \n    //draw the bar\n    c = rectangle(st, vec2(1.0/n,.0), vec2(width, height*amp));\n\n    \n    //color background with 3 sub bars\n    //st.y = step(st.x, 0.3)*(st.y+.1) + step(0.3,st.x)*st.y + step(0.6,st.x)*(-.1);\n    st.y = (st.x < .3)?(st.y+.1):(st.x < .6?st.y:st.y-.1);\n    \n    vec3 colorBars = amigaSoundBarGradient(st, height);//*c;\n    \n    //Reduce de bright of the third sub bar\n    colorBars = (st.x < .6)?colorBars:colorBars*.9;\n    \n    //100% transparent only where is no bars\n    float alpha =  step(.1, c);\n    \n    color = vec4(colorBars, alpha);\n    \n    return color;\n}\n\n\n\nvoid oneLineMusicImage( out vec4 fragColor, in vec2 fragCoord )\n{     \n    float nSamplesPerFrame = iSampleRate*iTimeDelta;\n    \n    //From 0 to 1\n\tvec2 uv = fragCoord / iResolution.xy; \n    \n    \n    float amplitude = getAmplitude(uv.x);\n       \n    \n    //Draw wave\n    vec3 colWav = vec3(1.0 -  smoothstep( 0.0, 0.015, abs(amplitude - uv.y) ));\n    \n    //Draw Amiga Protracker bars\n    vec4 colBars = drawBars(uv, 4.0);\n    \n    //Blending by putting the bars in front of the wave\n\tfragColor = vec4(mix(colWav.rgb, colBars.rgb, colBars.a), 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    oneLineMusicImage(  fragColor,  fragCoord );\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"int music1(int  t) {\n    int a = t < 39000?\n\t(\n\t((t*t*t)>>t)\n\t)\n\t:\n\t((t%40000) > 200000?1:0)*( \n\tt>>6^t&0x25|t+(t^t>>11)-t* ((t%24!=0?2:6)&t>>11)^t<<1&((t&0x256)!=0?t>>4:t>>10)\n\t)\n\t|((t%40000) < 200000?1:0)*(\n\t(~t>>2)*((127&t*(7&t>>10))<(245&t*(2+(5&t>>14)))?1:0)\n\t);\n    \n    return abs(clamp(a, -1, 0));\n}\n\nvec2 oneLineMusic( float time ) {\n    int delay = 100;\n    int t = int(time*(8000.)); \n    \n    return vec2( float(music1(t)), float(music1(t-delay)) );\n}","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[],"code":"vec2 mainSound( int samp, float time )\n{\n    return oneLineMusic( time );\n}","name":"Sound","description":"","type":"sound"}]}