{"ver":"0.1","info":{"id":"Msffz8","date":"1495667868","viewed":201,"name":"Sphere : 3D","username":"JCDjcd","description":"Simple 3D sphere","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["3d","sphere"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//--------------------------------------------------------------------------\n#define TWOPI \t\t\t(2.0*3.1415926535)\n#define ROTATION(alpha) mat2(cos(alpha),-sin(alpha),sin(alpha),cos(alpha))\n#define COLORIZATION(h)\tclamp(abs(fract(h+vec4(3.0,2.0,1.0,0.0)/3.0)*6.0-3.0)-1.0,0.0,1.0)\n\n//--------------------------------------------------------------------------\n// Ray is defined by M(t) = P + t.d\nvec4 compute(vec3 P,vec3 d)\n{\n\t// compute the intersections with the sphere\n    // a.t^2 + b.t + c = 0\n    float a = dot(d,d);\n    float b = 2.0*dot(P,d);\n    float c = dot(P,P)-1.0; // sphere of radius 1\n    float delta = b*b-4.0*a*c;\n    \n    if(delta >= 0.0)\n    {\n        float t[2];\n        t[0] = (-b-sqrt(delta))/(2.0*a);\n        t[1] = (-b+sqrt(delta))/(2.0*a);\n        \n        vec4 color = vec4(0.0,0.0,0.0,1.0);\n        for(int i=0;i<2;i++)\n        {\n            vec3 M \t\t= P+t[i]*d;\n            float beta \t= acos(M.z);\n            float alpha\t= atan(M.y,M.x);\n            \n            int bool_alpha \t= cos(alpha*24.0) > 0.80 ? 1 : 0;\n            int bool_beta\t= cos( beta*24.0) > 0.80 ? 1 : 0;\n            if(bool_alpha == 1 && bool_beta == 0)\n            {\n                color  = vec4(1.0,0.0,0.0,1.0);\n                color *= i==1 ? 0.2 : 1.0;\n                break;\n            }\n            else if(bool_alpha == 0 && bool_beta == 1)\n            {\n                color  = vec4(0.0,1.0,0.0,1.0);\n                color *= i==1 ? 0.3 : 1.0;\n                break;\n            }\n            \n        } // for()\n        \n        return color;\n    }\n    else\n    {\n\t    return vec4(0.0,0.0,0.0,1.0);\n    }\n} // compute()\n\n//--------------------------------------------------------------------------\nvoid mainImage(out vec4 fragColor,vec2 fragCoord)\n{\n    float m \t\t= min(iResolution.x,iResolution.y);\n\tvec2 uv \t\t= (fragCoord.xy / m - vec2(0.5,0.5))*2.5;\n    vec3 P \t\t\t= vec3(uv,-5.0);\n    vec3 d      \t= vec3(0.0,0.0,1.0);\n    \n    float alpha1\t= iTime*TWOPI/11.0;\n    float alpha2\t= iTime*TWOPI/5.0;\n    P.zx\t\t   *= ROTATION(alpha1);\n    P.xy\t\t   *= ROTATION(alpha2);\n    d.zx \t\t   *= ROTATION(alpha1);\n    d.xy\t\t   *= ROTATION(alpha2);\n\t\n\tfragColor \t\t= compute(P,d);\n\n} // mainImage()\n\n","name":"Image","description":"","type":"image"}]}