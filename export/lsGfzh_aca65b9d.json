{"ver":"0.1","info":{"id":"lsGfzh","date":"1527596172","viewed":430,"name":"Abstraction","username":"gilesruscoe","description":"messing around with circles. No optimising in the code!","likes":6,"published":1,"flags":96,"usePreview":0,"tags":["circles","sound","wave","cloud","audio","abstract","rgb","hue","buffer","motiongraphic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"MdjXRV","filepath":"https://soundcloud.com/kindridmusic/demise","previewfilepath":"https://soundcloud.com/kindridmusic/demise","type":"musicstream","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float circle(vec2 uv, vec2 pos, float radius)\n{\n    return smoothstep(radius, radius - (2.0/iResolution.y), length(uv - pos));\n}\n\nvec4 blur(sampler2D image, vec2 uv, vec2 resolution, vec2 direction) {\n  vec4 color = vec4(0.0);\n  vec2 off1 = vec2(1.3846153846) * direction;\n  vec2 off2 = vec2(3.2307692308) * direction;\n  color += texture(image, uv) * 0.2270270270;\n  color += texture(image, uv + (off1 / resolution)) * 0.3162162162;\n  color += texture(image, uv - (off1 / resolution)) * 0.3162162162;\n  color += texture(image, uv + (off2 / resolution)) * 0.0702702703;\n  color += texture(image, uv - (off2 / resolution)) * 0.0702702703;\n  return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float ar = iResolution.y / iResolution.x;\n    float bass = texture( iChannel1, vec2(20./256.,0.15) ).x*.75+texture( iChannel1, vec2(50./256.,0.15) ).x*.25;\n    vec3 col = blur(iChannel0, uv, iResolution.xy, vec2(0.0, 1.0)).xyz;\n    col += blur(iChannel0, uv, iResolution.xy, vec2(1.0, 0.0)).xyz;\n    col *= 0.465;\n    uv = uv * 2.0 - 1.0;\n    uv.y *= ar;\n    uv *= 3.0;\n    float ct = cos(iTime + abs(uv.x) * 0.35);\n    float st = sin(iTime + abs(uv.x) * 0.35);\n    mat2 rotmat = mat2(st, ct, -ct, st);\n    uv *= rotmat;\n    vec2 circleMap = uv;\n    circleMap.x = fract(circleMap.x * sin(iTime * 1.0) * 5.0) * 2.0 - 1.0;\n    circleMap.y *= (sin(iTime * 3.0) * 2.0 - 1.0);\n    circleMap.xy *= 0.5 + abs(uv.x);\n    float circles = circle(circleMap, vec2(0.0, sin(iTime * 3.0 + uv.x * 25.0) * 0.5), bass);\n    float bassFlash = length(uv - sin(atan(uv.y, uv.x) * 20.0)) * bass;\n    vec3 newCol = (pow(bassFlash, 5.0) * 0.0025 + circles) * vec3(1.0 + -st, 1.0 + ct,  1.0+st);\n    col += clamp(newCol, vec3(0.0), vec3(1.0));\n    fragColor = vec4(col,1.0);\n}","name":"Buf A","description":"","type":"buffer"}]}