{"ver":"0.1","info":{"id":"sllfW8","date":"1650942923","viewed":123,"name":"Grass Forest","username":"MelisaHot","description":"Grass in fores","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["grass","forest"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","previewfilepath":"/media/ap/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 phong(vec3 lightDir, vec3 normal, vec3 rd) {\n  // ambient\n  float k_a = 0.5;\n  vec3 firstCol = vec3(0., 0.5, 0.1);\n  vec3 i_a = mix(vec3(0, .3, .1), vec3(0., 0.5, 0.1), rd.y)*3. ;\n  vec3 ambient = k_a * i_a;\n\n  // diffuse\n  float k_d = 0.91;\n  float dotLN = clamp(dot(lightDir, normal), 0., 1.);\n  vec3 i_d = vec3(0.1, 0.4, 0.);\n  vec3 diffuse = k_d * dotLN * i_d;\n\n  // specular\n  float k_s = 0.6;\n  float dotRV = clamp(dot(reflect(lightDir, normal), -rd), 0., 1.);\n  vec3 i_s = vec3(.3, 0.8, .3);\n  float alpha = 20.;\n  vec3 specular = k_s * pow(dotRV, alpha) * i_s;\n\n  return ambient + diffuse + specular;\n}\n\n\nfloat grass(vec3 p, float x)\n{\n\tfloat g = mix(0.9, 1.4, 0.8 + sin(x*20.));\n\tp.x += pow(1.5 + p.y, 2.5) * 0.1 * cos(x +0.5+ iTime);\n\tp.x *= g;\n\tp.y = (1.3 + p.y) * g - 1.;\n\tfloat m = 1.0 - smoothstep(0., clamp(1.0 - p.y * 1.5, 0.1, 0.9) * g, pow(abs(p.x) * 70.0, 3.0)+p.y);\n    return  m * smoothstep(-2.0, -1., p.y);\n}\n\nvec3 calcNormal(vec3 p,float  r) {\n    vec2 e = vec2(1.0, -1.0) * 0.0005; // epsilon\n   \n    return normalize(\n      e.xyy * grass(p + e.xyy, r) +\n      e.yyx * grass(p + e.yyx, r) +\n      e.yxy * grass(p + e.yxy, r) +\n      e.xxx * grass(p + e.xxx, r));\n}\n\nmat3 camera(vec3 cameraPos, vec3 lookAtPoint) {\n\tvec3 cd = normalize(lookAtPoint - cameraPos); // camera direction\n\tvec3 cr = normalize(cross(vec3(0, 1, 0), cd)); // camera right\n\tvec3 cu = normalize(cross(cd, cr)); // camera up\n\treturn mat3(-cr, cu, -cd);\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec3 lookAtPoint = vec3(0.0, 2.0, 5.0);\n\tvec3 cameraPos = vec3(0.0, 0.6, 0.0);\n\t\n\tmat3 cam = camera(cameraPos, lookAtPoint);\n\t\n\tvec2 uv = (fragCoord.xy / iResolution.xy) * 2.0 - vec2(1.0);\n\t\n\tvec3 ro = cameraPos; \n    vec3 rd = cam * vec3(uv, -1.3);\n\t\n    vec3 backcol = vec3(0.);\n\t\n\tfor(int i = 0; i < 80; i++)\n\t{\n\t\tfloat z = -(float(80 - i) * .09 + 2.0);\n\t\tvec4 pln = vec4(0.0, 0.0, -1., z);\n\t\tfloat t = (pln.w - dot(pln.xyz, ro)) / dot(pln.xyz, rd);\n\t\tvec2 p = ro.xy + rd.xy * t;\n        \n\t\tp.x += cos(float(i) * 2.0) * 5.0;\n\t\t\n\t\tfloat cell = floor(p.x);\n\t\t\n\t\tp.x = (p.x - cell) - 0.5;\n\t\tvec3 grasscol = vec3(0.);\n\t\tvec3 normal = calcNormal(vec3(p, 0.),float(i) + cell * 10.0);\n        \n        \n        vec3 lightPosition1 = vec3(10, 2, -1);\n        vec3 lightDirection1 = normalize(lightPosition1);\n        float lightIntensity1 = 0.65;\n        \n        grasscol = lightIntensity1 * phong(lightDirection1, normal, rd);\n        \n        vec4 c =vec4(grasscol, grass(vec3(p, 0.), float(i) + cell * 10.0));\n\t\t\n\t\tbackcol = mix(backcol, c.rgb, step(0.0, t) * c.w);\n\t}\n\t\n\tbackcol = pow(backcol * 1.1, vec3(0.8));\n\t\n\t\n\tfragColor.rgba = vec4(backcol, 0.) + texture(iChannel0, rd);\n\t\n}\n","name":"Image","description":"","type":"image"}]}