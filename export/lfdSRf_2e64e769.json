{"ver":"0.1","info":{"id":"lfdSRf","date":"1714281213","viewed":209,"name":"Rounded Convex Polygon","username":"Serret","description":"SDF convex polygon renderer","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float cross2d(in vec2 v1, in vec2 v2)\n{\n    return v1.x * v2.y - v1.y * v2.x;\n}\n\nfloat sdConvexPolygon(in vec2 p, in vec2[8] v, in int count)\n{\n    // initial squared distance\n    float d = dot(p-v[0],p-v[0]);\n    \n    // Consider query point inside to start\n    float side = -1.0;\n    int j = count - 1;\n    for( int i = 0; i < count; ++i)\n    {\n        // Distance to line segment\n        vec2 e = v[i] - v[j];\n        vec2 w = p - v[j];\n        float we = dot(w, e);\n        vec2 b = w - e*clamp(we/dot(e,e), 0.0, 1.0 );\n        float bb = dot(b, b);\n        \n        // Track minimum distance\n        if (bb < d)\n        {\n            d = bb;\n        }\n        \n        // If the query point is outside any edge then it is outside the entire polygon.\n        // This depends on the CCW winding order of points.\n        float s = cross2d(w, e);\n        if (s >= 0.0)\n        {\n            side = 1.0;\n        }\n        \n        j = i;\n    }\n    \n    return side * sqrt(d);\n}\n\nvec4 blend_colors(vec4 front, vec4 back)\n{\n    vec3 cSrc = front.rgb;\n    float alphaSrc = front.a;\n    vec3 cDst = back.rgb;\n    float alphaDst = back.a;\n\n    vec3 cOut = cSrc * alphaSrc + cDst * alphaDst * (1.0 - alphaSrc);\n    float alphaOut = alphaSrc + alphaDst * (1.0 - alphaSrc);\n    cOut = cOut / alphaOut;\n\n    return vec4(cOut, alphaOut);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    \n    vec2 v1 = vec2(-0.35, -0.35);\n    vec2 v2 = vec2(0.0, -0.5);\n    vec2 v3 = vec2(0.35, -0.35);\n    vec2 v4 = vec2(0.35, 0.35);\n    vec2 v5 = vec2(-0.35, 0.35);\n\n    vec2[8] polygon = vec2[](v1,v2,v3,v4,v5,v1,v1,v1);\n    \n    float radius = 0.2;\n\tfloat dw = sdConvexPolygon(p, polygon, 5) - radius;\n    float d = abs(dw - radius);\n    \n    vec4 borderColor = vec4(0.804, 0.569, 0.620, 1.0);\n    vec4 fillColor = 0.5 * borderColor;\n\n    float thickness = 3.0f / iResolution.y;\n\n    // roll the fill alpha down at the border\n    vec4 back = vec4(fillColor.rgb, fillColor.a * smoothstep(radius + thickness, radius, dw));\n    \n    // roll the border alpha down from 1 to 0 across the border thickness\n    vec4 front = vec4(borderColor.rgb, smoothstep(thickness, 0.0, d));\n    \n    vec4 col = blend_colors(front, back);\n        \n    fragColor = vec4(col.rgb * col.a, col.a);\n}","name":"Image","description":"","type":"image"}]}