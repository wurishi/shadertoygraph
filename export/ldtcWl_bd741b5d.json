{"ver":"0.1","info":{"id":"ldtcWl","date":"1525557517","viewed":86,"name":"aatriangle","username":"dahart","description":"A triangle with anti-aliased edges","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["triangle","antialias"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float dline(vec2 p, vec2 lp, vec2 ld) {\n    return dot(p-lp, ld);\n}\n\nfloat dline2(vec2 x, vec2 p1, vec2 p2) {\n    vec2 d = p2 - p1;\n    vec2 n = vec2(d.y, -d.x);\n    return dot(x-p1, n);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x += .01*sin(uv.y*20.+iTime);\n    uv.y += .01*sin(uv.x*20.+iTime);\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    float f = dline( uv, vec2(.1, .1), vec2(-1., .2) );\n    f = max(f, dline(uv, vec2(.4, .6), vec2(1., .4) ) );\n    f = max(f, dline(uv, vec2(.2, .3), vec2(.1, -1.) ) );\n    \n    vec2 a = vec2(.1, .1);\n    vec2 b = vec2(.8, .2);\n    vec2 c = vec2(.4, .9);\n    \n    f = -20.;\n    f = max( f, dline2(uv, a, b) );\n    f = max( f, dline2(uv, b, c) );\n    f = max( f, dline2(uv, c, a) );\n    \n    f += .05*sin(iTime);\n        \n    float dx = fwidth(f)*1.5;\n    if (f < 0.) fragColor = vec4(col,1.0) * smoothstep(-dx, -dx-dx, f);\n    \n    //if (length(uv - vec2(.1, .1)) < 0.02) fragColor = vec4(1., 0., 0., 1.);\n}\n","name":"Image","description":"","type":"image"}]}