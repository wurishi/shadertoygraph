{"ver":"0.1","info":{"id":"NdsfRf","date":"1645146789","viewed":212,"name":"Music - A Major scale","username":"Chosko","description":"A function that only selects notes of a scale","likes":8,"published":1,"flags":40,"usePreview":0,"tags":["sound","chromatic","scale"],"hasliked":0,"parentid":"7dXBDH","parentname":"First Sound Test"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Plot function taken from another shader I can't find anymore\nfloat plot(vec2 uv, vec2 p, vec2 pDelta){\n  vec2 delta = pDelta - p;\n  float cosPhi = delta.x / length(delta); //cos(atan(delta.y, delta.x));\n  float height = LINE_WIDTH / 2.0 / max(cosPhi, .04);\n  float d = abs(uv.y - p.y) - height;\n  return smoothstep(0.01, 0.0, d);\n}\n\nvoid mainImage( out vec4 O, in vec2 U )\n{\n    O -= O;\n    vec2 pSize = vec2(1.0) / iResolution.xy;\n    U = U / iResolution.xy;\n    \n    int graphId = int(floor(U.y * 4.));\n    U.y = fract(U.y * 4.) - .5;\n    \n    vec4 p = PLOT_HEIGHT * texture(iChannel0, vec2(U.x, 0.0)).xyzw;\n    vec4 pDelta = PLOT_HEIGHT * texture(iChannel0, vec2(U.x + pSize.x, 0.0)).xyzw;\n\n    vec3 leftColor = vec3(1., .8, .4);\n    vec3 rightColor = vec3(.6, .6, .9);\n\n    switch(graphId) {\n        case 3: O.xyz = vec3(plot(U, vec2(U.x, p.x), vec2(U.x + pSize.x, pDelta.x))) * leftColor;\n            break;\n        case 2: O.xyz = vec3(plot(U, vec2(U.x, p.y), vec2(U.x + pSize.x, pDelta.y))) * rightColor;\n            break;\n        case 1: O.xyz = vec3(plot(U, vec2(U.x, p.z), vec2(U.x + pSize.x, pDelta.z))) * leftColor;\n            break;\n        case 0: O.xyz = vec3(plot(U, vec2(U.x, p.w), vec2(U.x + pSize.x, pDelta.w))) * rightColor;\n            break;\n    }\n    \n    O = O;\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// PLOT\n#define LINE_WIDTH 0.003\n#define PLOT_LENGTH_HIGH_SCALE (0.02 * TIMESCALE)\n#define PLOT_LENGTH_LOW_SCALE (1.0 * TIMESCALE)\n#define PLOT_HEIGHT 1.0\n\n// COMMON\n#define PI2 6.2831\n#define TIMESCALE 1.\n#define TIME (iTime * TIMESCALE)\n#define STIME (time * TIMESCALE)\n\n// SOUND\n\nfloat sqr(float f, float t) {\n    return step(fract(f * t), .5) - .5;\n}\n\nfloat saw(float f, float t) {\n    return (fract(f * t) - .5);\n}\n\nfloat tone(float f, float t) {\n    return sin(f * t * PI2);\n}\n\n\nfloat emix (float a, float b, float t) {\n    return exp2(mix(log2(a), log2(b), t));\n}\n\nfloat majorScale (float tonic, float x) {\n    float logTonic = log2(tonic);\n    float logx = log2(x) - logTonic;\n    float halftones = floor(logx * 7.) / 12. * 2.;\n    float tones = halftones - (floor(logx + 4. / 7.) + floor(logx)) / 12.;\n    float note = exp2(tones + logTonic);\n    return note;\n}\n\nfloat envelope (float t) {\n    t = fract((t + .26) * 4. * 7.);\n    return exp(-6. * t) * smoothstep(0.0, 0.01, t) * smoothstep(1., .99, t);\n}\n\nvec2 sound (float time) {\n    float speed = .1;\n    float period = 1.0 - abs(fract(time * speed)-.5)*2. + 1./24.;\n    float f = majorScale(440., emix(220., 880., period));\n    \n    float env = envelope(time * speed);\n    return vec2(env * tone(f, time), env * saw(f, time)) * 0.5;\n}","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[],"code":"vec2 mainSound( int samp, float time )\n{\n    vec2 s = sound(STIME);\n    \n    return s;\n}","name":"Sound","description":"","type":"sound"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 O, in vec2 U )\n{\n    O -= O;\n    \n    U = U / iResolution.xy;\n    \n    // High scale\n    float t = TIME - ((1.0 - U.x) * PLOT_LENGTH_HIGH_SCALE);\n    O.xy = sound(t);\n    \n    // Low scale\n    t = TIME - ((1.0 - U.x) * PLOT_LENGTH_LOW_SCALE);\n    O.zw = sound(t);\n}","name":"Buffer A","description":"","type":"buffer"}]}