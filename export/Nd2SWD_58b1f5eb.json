{"ver":"0.1","info":{"id":"Nd2SWD","date":"1620261066","viewed":405,"name":"Animated Lightning Demo","username":"sdfgeoff","description":"Shows how lightning can be made from scrolling noise.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["noise","lightning"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// This uses the noise from https://www.shadertoy.com/view/4lB3zz and I just\n// added some filters to the end of it to do the scrolling lightning.\n//\n// Basically this is to demo that you can subtract two noises and create cool\n// scrolling lighthing.\n\nconst int firstOctave = 4;\nconst int octaves = 2;\nconst float persistence = 0.6;\n\n//Not able to use bit operator like <<, so use alternative noise function from YoYo\n//\n//https://www.shadertoy.com/view/Mls3RS\n//\n//And it is a better realization I think\nfloat noise(int x,int y)\n{   \n    float fx = float(x);\n    float fy = float(y);\n    \n    return 2.0 * fract(sin(dot(vec2(fx, fy) ,vec2(12.9898,78.233))) * 43758.5453) - 1.0;\n}\n\nfloat smoothNoise(int x,int y)\n{\n    return noise(x,y)/4.0+(noise(x+1,y)+noise(x-1,y)+noise(x,y+1)+noise(x,y-1))/8.0+(noise(x+1,y+1)+noise(x+1,y-1)+noise(x-1,y+1)+noise(x-1,y-1))/16.0;\n}\n\nfloat COSInterpolation(float x,float y,float n)\n{\n    float r = n*3.1415926;\n    float f = (1.0-cos(r))*0.5;\n    return x*(1.0-f)+y*f;\n    \n}\n\nfloat InterpolationNoise(float x, float y)\n{\n    int ix = int(x);\n    int iy = int(y);\n    float fracx = x-float(int(x));\n    float fracy = y-float(int(y));\n    \n    float v1 = smoothNoise(ix,iy);\n    float v2 = smoothNoise(ix+1,iy);\n    float v3 = smoothNoise(ix,iy+1);\n    float v4 = smoothNoise(ix+1,iy+1);\n    \n   \tfloat i1 = COSInterpolation(v1,v2,fracx);\n    float i2 = COSInterpolation(v3,v4,fracx);\n    \n    return COSInterpolation(i1,i2,fracy);\n    \n}\n\nfloat PerlinNoise2D(float x,float y)\n{\n    float sum = 0.0;\n    float frequency =0.0;\n    float amplitude = 0.0;\n    for(int i=firstOctave;i<octaves + firstOctave;i++)\n    {\n        frequency = pow(2.0,float(i));\n        amplitude = pow(persistence,float(i));\n        sum = sum + InterpolationNoise(x*frequency,y*frequency)*amplitude;\n    }\n    \n    return sum;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \n    float time = iTime * 0.1;\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float x = uv.x;\n    float y = uv.y;\n\t//fragColor = vec4(noise(x,y),noise(x,y),noise(x,y),1);\n    float noise1 = PerlinNoise2D(x + time,y) * 5.0 + 0.0;\n    float noise2 = PerlinNoise2D(x,y + time) * 5.0 + 0.0;\n    \n    float outp = 1.0;\n    \n    if (x < 0.32) {\n        outp = noise1;\n    } else if (x > 0.34 && x < 0.64) {\n        outp = noise2;\n    } else if (x > 0.66) {\n        outp = (noise1 - noise2);\n    }\n    \n    if (y < 0.45) {\n        outp =  ((0.5 - abs(outp)) - 0.5) * 10.0;\n    }\n    \n    fragColor = vec4(outp + 0.5);\n}","name":"Image","description":"","type":"image"}]}