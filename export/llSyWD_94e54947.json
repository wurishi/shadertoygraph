{"ver":"0.1","info":{"id":"llSyWD","date":"1508740321","viewed":1241,"name":"Torus_Thingy_1","username":"balkhan","description":"geometric exercise","likes":39,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarch","torus"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n* License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n* Created by bal-khan\n*/\n\nvec2\tmarch(vec3 pos, vec3 dir);\nvec3\tcamera(vec2 uv);\nvoid\trotate(inout vec2 v, float angle);\nvec3\tcalcNormal( in vec3 pos, float e, vec3 dir);\nfloat\tsdTorus( vec3 p, vec2 t, float phase );\nfloat\tmylength(vec2 p);\nfloat\tnrand( vec2 n );\n\nfloat \tt;\t\t\t// time\nvec3\tret_col;\t// torus color\nvec3\th; \t\t\t// light amount\nfloat\tmind;\nfloat\tming;\nfloat\tmint;\nfloat\tminl;\n\nconst vec3\tteal   = vec3(0.3 , .7, .9);\nconst vec3\torange = vec3(0.95, .5, .1);\n\n#define I_MAX\t\t100.\n#define E\t\t\t0.0001\n#define FAR\t\t\t30.\n\n/*\n* Leon's mod polar from : https://www.shadertoy.com/view/XsByWd\n*/\n\n#define PI 3.14159\n#define TAU PI*2.\n\nvec2 modA (vec2 p, float count) {\n    float an = TAU/count;\n    float a = atan(p.y,p.x)+an*.5;\n    a = mod(a, an)-an*.5;\n    return vec2(cos(a),sin(a))*length(p);\n}\n\n// blackbody by aiekick : https://www.shadertoy.com/view/lttXDn\n\n// -------------blackbody----------------- //\n\n// return color from temperature \n//http://www.physics.sfasu.edu/astro/color/blackbody.html\n//http://www.vendian.org/mncharity/dir3/blackbody/\n//http://www.vendian.org/mncharity/dir3/blackbody/UnstableURLs/bbr_color.html\n\nvec3 blackbody(float Temp)\n{\n\tvec3 col = vec3(255.);\n    col.x = 56100000. * pow(Temp,(-3. / 2.)) + 148.;\n   \tcol.y = 100.04 * log(Temp) - 623.6;\n   \tif (Temp > 6500.) col.y = 35200000. * pow(Temp,(-3. / 2.)) + 184.;\n   \tcol.z = 194.18 * log(Temp) - 1448.6;\n   \tcol = clamp(col, 0., 255.)/255.;\n    if (Temp < 1000.) col *= Temp/1000.;\n   \treturn col;\n}\n\n// -------------blackbody----------------- //\n\n\nvoid mainImage(out vec4 c_out, in vec2 f)\n{\n    t  = abs(iTime*.125); // my phone forces me to do this, idk why iTime is -iTime on phone\n    vec3\tcol = vec3(0., 0., 0.);\n\tvec2 R = iResolution.xy,\n          uv  = vec2(f-R/2.) / R.y;\n\tvec3\tdir = camera(uv);\n    vec3\tpos = vec3(.0+cos(t*5.), .0+sin(t*5.)*.5, .0);\n\n    pos.z = 20.*exp(-t*5.)+10.+.5*sin(t*10.);    \n    h*=0.;\n    vec2\tinter = (march(pos, dir));\n    float\tid = (mind == ming ? 1. : 0.)+(mind == mint ? 2. : 0.)+(mind == minl ? 3. : 0.);\n    if (inter.y <= FAR)\n        col.xyz = ret_col*(1.-inter.x*.025);\n    else\n        col *= 0.;\n    col += h;\n\tcol *= clamp((1.5-length(uv)), .5, 1.);\n    col *= clamp((1.1-length(uv)), .0, 1.);\n    c_out =  vec4(col,1.0);\n}\n\nfloat\tscene(vec3 p)\n{  \n    mind = 1e5;\n    ming = 1e5;\n    mint = 1e5;\n\tminl = 1e5;\n\n    rotate(p.xz, 1.57-.15*iTime);\n    rotate(p.yz, 1.57-.125*iTime);\n    vec3 op = p;\n    float\tvar = (atan(p.x, p.z)+ PI)/(TAU);\n    var = var*40.;\n    p.xz = modA(p.xz, 40.);\n    p.xz -= vec2(8., .0);\n\n    rotate(p.xy, iTime*.25*(mod(var-.5, 2.) <= 1. ? 1. : -1.));\n    vec2 q = vec2(length(p.xy)-4.,p.z);\n    mind = mylength(q)-.05;\n\n    float vir = (atan(p.x, p.y)+ PI)/(TAU);\n    var = vir*30.;\n    p.xy = modA(p.xy, 30.)-vec2(.0,.0);\n    p.xz -= vec2(4., .0);\n    q = vec2(length(p.zx)-0.25, p.y-.0);\n    ming = mylength(q)-.05;\n    mind = min(mind, ming);\n\n    float as = (mind == ming ? 1. : 0.);\n    ret_col = step(as, .0)*vec3(.2, .7, .4) + step(1., as)*vec3(.5, .2, .8);\n    rotate(p.xz, iTime*1.5*(mod(var, 2.) <= 1. ? 1. : -1.)*(mod(vir, 2.) <= 1. ? 1. : -1.));\n    p.xz = modA(p.xz, 20.)-vec2(.0,-.0);\n    p.xy -= vec2(.25, .0);\n    q = vec2(length(p.xy)-.1, p.z);\n    mint = mylength(q)-.02;\n    mind = min(mind, mint);\n    as = (mind == mint ? 1. : 0.);\n    if (as  == 1.)\n    ret_col = teal;\n    \n    // dodecahedron\n    rotate(op.zx, iTime*.5);\n    op.xz = modA(op.xz, 25.);\n    op -= vec3(6., .0, 0.);\n    op /= 1.732; //sqrt(3.)\n    vec3\tb = vec3(.075);\n\tminl = max(max(abs(op.x)+.5*abs(op.y)-b.x, abs(op.y)+.5*abs(op.z)-b.y), abs(op.z)+.5*abs(op.x)-b.z);\n    b *= .95;\n    minl = max(minl, \n           -max(max(abs(op.x)+.5*abs(op.y)-b.x, abs(op.y)-.5*abs(op.z)-b.y), abs(op.z)+.5*abs(op.x)-b.z)\n               );\n    minl = max(minl, \n           -max(max(abs(op.x)-.5*abs(op.y)-b.x, abs(op.y)+.5*abs(op.z)-b.y), abs(op.z)+.5*abs(op.x)-b.z)\n               );\n    minl = max(minl, \n           -max(max(abs(op.x)+.5*abs(op.y)-b.x, abs(op.y)+.5*abs(op.z)-b.y), abs(op.z)-.5*abs(op.x)-b.z)\n               );\n    // end dodecahedron\n\n    mind = min(mind, minl);\n\n    as = mind == minl ? 1. : 0.;\n\n    if (as == 1.)\n    ret_col = orange;\n    \n    h += .036125*orange/(pow(minl, 25.)+.5);\n\n    return (mind);\n}\n\nvec2\tmarch(vec3 pos, vec3 dir)\n{\n    vec2\tdist = vec2(0.0, 0.0);\n    vec3\tp = vec3(0.0, 0.0, 0.0);\n    vec2\ts = vec2(0.0, 0.0);\n\tfloat dinamyceps = E;\n\tfor (float i = -1.; i < I_MAX; ++i)\n\t{\n\t\tp = pos + dir * dist.y;\n\t\tdist.x = scene(p);\n\t\tdist.y += dist.x*1.;\n        dinamyceps = -dist.x+(dist.y)/(1500.);\n        // log trick from aiekick\n\t    if (log(dist.y*dist.y/dist.x/1e5)>0. || dist.x < dinamyceps || dist.y > FAR)\n        {\n            break;\n        }\n\t    s.x++;\n    }\n    s.y = dist.y;\n    return (s);\n}\n\nfloat\tmylength(vec2 p)\n{\n\tfloat\tret;\n    \n    p = p*p*p*p;\n    p = p*p;\n    ret = (p.x+p.y);\n    ret = pow(ret, 1./8.);\n    \n    return ret;\n}\n\n// Utilities\n\nvoid rotate(inout vec2 v, float angle)\n{\n\tv = vec2(cos(angle)*v.x+sin(angle)*v.y,-sin(angle)*v.x+cos(angle)*v.y);\n}\n\nvec2\trot(vec2 p, vec2 ang)\n{\n\tfloat\tc = cos(ang.x);\n    float\ts = sin(ang.y);\n    mat2\tm = mat2(c, -s, s, c);\n    \n    return (p * m);\n}\n\nvec3\tcamera(vec2 uv)\n{\n    float\t\tfov = 1.;\n\tvec3\t\tforw  = vec3(0.0, 0.0, -1.0);\n\tvec3    \tright = vec3(1.0, 0.0, 0.0);\n\tvec3    \tup    = vec3(0.0, 1.0, 0.0);\n\n    return (normalize((uv.x) * right + (uv.y) * up + fov * forw));\n}\n\nvec3 calcNormal( in vec3 pos, float e, vec3 dir)\n{\n    vec3 eps = vec3(e,0.0,0.0);\n\n    return normalize(vec3(\n           march(pos+eps.xyy, dir).y - march(pos-eps.xyy, dir).y,\n           march(pos+eps.yxy, dir).y - march(pos-eps.yxy, dir).y,\n           march(pos+eps.yyx, dir).y - march(pos-eps.yyx, dir).y ));\n}","name":"Image","description":"","type":"image"}]}