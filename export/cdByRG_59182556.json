{"ver":"0.1","info":{"id":"cdByRG","date":"1687818118","viewed":52,"name":"CurtainTheater","username":"Raistlin_fuego","description":"curtain","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["noise","movement","curtain","theatre"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MS 30\n#define mD .01\n#define MT 10.\n\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat Sphere(vec3 p, vec4 s){\n    return length(p-s.xyz)-s.w;\n}\n\nvec4 Swich(vec4 a, vec4 b){\n    return a.x < b.x ? a : b;\n\n}\n\nvec4 SwichIntersection(vec4 a, vec4 b){\n    return a.x < b.x ? vec4(a.x, a.yzw*b.yzw) : vec4(a.x, a.yzw*b.yzw);\n\n}\n\nvec4 SwichColorIntersection(vec4 a, vec4 b){\n    return a.x < b.x ? vec4(b.x, a.yzw) : b;\n\n}\n\n\nfloat noiseCurtain(vec3 p){\n    float t = iTime*.8;\n    float n = cos(p.x*2.+t*.8)*.5+.5;\n    n += cos(p.x*4.1+t*.1)*.5+.5;\n    n += cos(p.x*7.5+t*.4)*.5+.5;\n    n += cos(p.x*4.3+t*.7)*.5+.5;\n    return n*.2;\n\n}\n\nfloat LinesFloor(vec3 p){\n    vec3 id = floor(p);\n    float desface = mod(id.z, 0.);\n    vec3 i = fract(p*vec3(.4+.07*desface, 1, 6.5))+.39;\n    \n    float thickness = .443;\n    if(i.x < thickness || i.z< thickness) return 0.;\n    else return 1.;\n\n}\n\nfloat noiseFloor(vec3 p){\n    float n = cos(p.z*30.)*.5+.5;\n    n += cos(p.z*10.)*.5+.5;\n    return n*.8;\n}\n\nfloat TelonUp(){\n    vec2 mouse = (iMouse.xy - iResolution.xy)/iResolution.y;\n    float upCurtain = abs(mouse.y*2.)*8.;\n    return upCurtain;\n\n}\n\nvec4 GetDist(vec3 p){\n    \n    float upCurtain = TelonUp();\n    vec4 g = vec4(p.y, vec3(.9, .6, .0)*(noiseFloor(p))*LinesFloor(p)*.3);\n    vec4 curtain = vec4(sdRoundBox(p-vec3(0,3.+upCurtain,0), vec3(8.75, 5.5,noiseCurtain(p)), .1), vec3(.9,.1,.1));\n    \n    vec4 focoFresnell = vec4(Sphere(p*vec3(.5, .9, 1), vec4(0,4,-.3, .8)), .5*vec3(1.,1.,.4)*(5.-length(p.xy*.7)));\n    \n    vec4 r = Swich(g, curtain);\n    r = SwichIntersection(r, focoFresnell);\n    \n    return r;\n}\n\nvec4 Ray(vec3 ro, vec3 rd){\n    vec3 col;\n    float dist;\n    \n    for(int i = 0; i < MS; i++){\n        vec3 p = ro +rd*dist;\n        vec4 d = GetDist(p);\n        dist += d.x;\n        \n        if(d.x < mD){\n            col = d.yzw;\n            break;\n        \n        }\n        \n        if(d.x > MT){\n            col = vec3(-1);\n            break;\n        }\n    }\n    \n    return vec4(dist, col);\n}\n\nvec3 Normals(vec3 p){\n    vec2 d = vec2(mD, 0);\n    float x = (GetDist(p+d.xyy).x - GetDist(p-d.xyy).x);\n    float y = (GetDist(p+d.yxy).x - GetDist(p-d.yxy).x);\n    float z = (GetDist(p+d.yyx).x - GetDist(p-d.yyx).x);\n    return normalize(vec3(x, y, z));\n}\n\n\nfloat GetLight(vec3 p, vec3 light){\n    vec3 n = Normals(p);\n    vec3 l = normalize(light-p);\n    float diff = clamp(dot(n, l)*.5+.7, 0., 1.);\n    return diff;\n    \n    return diff;\n\n}\n\nfloat Foco(vec2 p, float x, float y, float a, float bluur){\n   vec2 moviment = vec2(cos(iTime*x), sin(iTime*y));\n   return smoothstep(.7, 1., 1.-length(p-moviment*a))*bluur;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec3 col = vec3(0);\n    \n    vec3 ro = vec3(0, 3.2, -8);\n    vec3 rd = normalize(vec3(uv, 1));\n    vec3 light = vec3(0,6,4);\n    \n    vec4 r = Ray(ro, rd);\n    vec3 p = ro + rd*r.x;\n    float l = GetLight(p, light);\n    \n    col = r.yzw*l;\n    \n    float tU = 1.;\n    if(r.x > 18.) tU = 0.;\n    \n    col += Foco(uv, .5, .2, .2, .4)*tU;\n    col += Foco(uv, .1, .5, .3, .3)*tU;\n    \n    //if(r.y == -1.) col = vec3(.0, .1, .1);\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}