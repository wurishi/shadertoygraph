{"ver":"0.1","info":{"id":"sdyXRV","date":"1635282396","viewed":308,"name":"Contour Detector","username":"Remming_Senegal","description":"detects the main colors of an image by first looking for the edges then blurring everything inside each of the edges.\n\nKind of laggy though, with only 35.6 as opposed to the holy 60.0 fps, so any ideas to speed this up are appreciated","likes":7,"published":3,"flags":32,"usePreview":0,"tags":["pixel","camera","camera","sampling","contour","passes","detail","channels","vec2","orientation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define BLUR_RADIUS 0.2\n#define PRECISION 0.01\n#define SKIP 5.0\n\n// Uncomment the line below just to view the edge detection buffer\n//#define JUST_BLUR\n\n/*\n    Detects contours in an image\n    \n    HOW IT WORKS:\n        -detect for edges, which is done in buffer A\n        -Start blurring in a radial pattern.\n        -When we hit a pixel that's white, it's an edge.\n        -Stop blurring once we hit an edge\n        -Move on to next pixel\n        \n        -Makes nice solid colors that cut off at edges\n*/\n\n#ifndef JUST_BLUR\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec4 blurred;\n    float i;\n    for(i = 0.0; i < BLUR_RADIUS / PRECISION; i += PRECISION) {\n        vec2 point = vec2(i*cos(i*SKIP),i*sin(i*SKIP));\n        point *= PRECISION;\n        point += uv;\n        \n        vec4 sampled;\n        if(texture(iChannel1,point).rgb == vec3(1.0)) {\n            break;\n        }\n        sampled = texture(iChannel0,point);\n        blurred += sampled;\n    }\n   \n    blurred *= PRECISION;\n    blurred /= i;\n \n    fragColor = blurred;\n}\n#else\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    fragColor = texture(iChannel1,uv);\n}\n#endif","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/*\n    Edge Detector\n    Looks for contrast difference in surrounding pixels\n\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float x = 1.0/iResolution.x;\n    float y = 1.0/iResolution.y;\n\n    // Edge map\n    vec4 m = texture(iChannel0,uv);\n    \n    vec4 N = texture(iChannel0,uv+vec2(0.0,y));\n    vec4 S = texture(iChannel0,uv+vec2(0.0,-y));\n    vec4 W = texture(iChannel0,uv+vec2(x,0.0));\n    vec4 E = texture(iChannel0,uv+vec2(-x,0.0));\n    \n    vec4 mN = abs(m - N);\n    vec4 mS = abs(m - S);\n    vec4 mW = abs(m - W);\n    vec4 mE = abs(m - E);\n    \n    vec4 contrast = mN + mS + mW + mE;\n    contrast /= 4.0;\n    \n    float col = (contrast.r + contrast.g + contrast.b)/3.0;\n    \n    // Filter out the Contrast values we don't need\n    // TODO: find minimum contrast to cut out using existing image\n    if(col < 0.03) \n        col = 0.0;\n    else col = 1.0;\n\n    // Output to screen\n    fragColor = vec4(vec3(col),1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}