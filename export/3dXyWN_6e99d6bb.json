{"ver":"0.1","info":{"id":"3dXyWN","date":"1584760248","viewed":220,"name":"Basic Glow Practice","username":"diydsp","description":"working towards what glowdoodle used to be for POV art","likes":1,"published":1,"flags":34,"usePreview":0,"tags":["glow","persist"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\t//texture(iChannel2, uv).rgb;\n\tvec2 uv = fragCoord / iResolution.xy;\n    vec2 uv_wc = uv;\n    uv_wc.x = 1.0-uv_wc.x;\n    //vec3 bg = texture(iChannel3, uv).rgb;\n    //vec3 webcam = texture(iChannel2, uv_wc).rgb;\n    \n    //fragColor.rgb = webcam - bg;\n    \n    float wcMag=1.0;\n \tfloat r1 = texture(iChannel3, uv).r;\n    float g1 = texture(iChannel3, uv).g;\n    float b1 = texture(iChannel3, uv).b;\n    float r2 = wcMag*texture(iChannel2, uv_wc).r;\n    float g2 = wcMag*texture(iChannel2, uv_wc).g;\n    float b2 = wcMag*texture(iChannel2, uv_wc).b;\n    float decay = 0.999;\n    fragColor.rgb=vec3(decay*max(r1,r2),decay*max(g1,g2),decay*max(b1,b2));    \n    fragColor.a = 1.0;\n\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nvec3 HueToRgb(float h) {\n    vec3 rgb = 2.0 - abs(6.0 * h - vec3(3, 2, 4));\n    rgb.r = 1.0 - rgb.r;\n    return clamp(rgb, 0.0, 1.0);\n}\n\nvec3 HsvToRgb(vec3 hsv) {\n    vec3 rgb = HueToRgb(hsv.x);\n    return ((rgb - 1.0) * hsv.y + 1.0) * hsv.z;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\n    \n    // Get last buffer value, darken and move left\n    vec2 uv = fragCoord / iResolution.xy + vec2(0.00035, 0.0);\n    vec3 prevFrame =  texture(iChannel1, uv).rgb;\n    vec3 webCam = 0.01315999908 * texture(iChannel2, uv).rgb;\n    vec3 lastColor;\n    float wcMag = 1.0;\n    wcMag = iMouse.y/iResolution.y;;\n    float r1 = texture(iChannel1, uv).r;\n    float g1 = texture(iChannel1, uv).g;\n    float b1 = texture(iChannel1, uv).b;\n    float r2 = wcMag*texture(iChannel2, uv).r;\n    float g2 = wcMag*texture(iChannel2, uv).g;\n    float b2 = wcMag*texture(iChannel2, uv).b;\n    float decay = 0.999;\n    lastColor.rgb=vec3(decay*max(r1,r2),decay*max(g1,g2),decay*max(b1,b2));\n    \n\n \n    fragColor.rgb = lastColor.rgb * 1.0;\n    \n    fragColor.a = 1.0;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"\n// long term average to detect background\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\n    \n    vec2 uv = fragCoord / iResolution.xy + vec2(0.0, 0.0);\n    vec2 uv_wc = uv;\n    uv_wc.x = 1.0-uv_wc.x;\n\n    //vec3 prevFrame =  texture(iChannel3, uv).rgb;\n    //vec3 webCam = 1.0 * texture(iChannel2, uv_wc).rgb;\n    vec3 lastColor;\n    float wcMag = 1.0;\n    //wcMag = iMouse.y/iResolution.y;;\n    float r1 = texture(iChannel3, uv).r;\n    float g1 = texture(iChannel3, uv).g;\n    float b1 = texture(iChannel3, uv).b;\n    float r2 = wcMag*texture(iChannel2, uv_wc).r;\n    float g2 = wcMag*texture(iChannel2, uv_wc).g;\n    float b2 = wcMag*texture(iChannel2, uv_wc).b;\n    float d1 = 0.996;\n    d1 = 1.0 - 0.01*iMouse.y/iResolution.y;\n    float d2 = 1.0-d1;\n    lastColor.rgb=vec3(d1*r1+d2*r2,d1*g1+d2*g2,d1*b1+d2*b2);\n    \n\n \n    fragColor.rgb = lastColor.rgb * 1.0;\n    //fragColor.rgb = webCam.rgb - lastColor.rgb;\n    //fragColor.rgb = webCam;\n    \n    fragColor.a = 1.0;\n}","name":"Buf B","description":"","type":"buffer"}]}