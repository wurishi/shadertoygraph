{"ver":"0.1","info":{"id":"3sySzK","date":"1574364682","viewed":349,"name":"\tRaymarching [6] Materials","username":"camelcoder","description":"Raymarching","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n/**\n * SDF's from:\n * https://iquilezles.org/articles/distfunctions\n **/\n\nfloat sd_sphere(vec3 p, float r) {\n\treturn length(p) - r;\n}\nfloat sd_box(vec3 p, vec3 s) {\n\tvec3 d = abs(p) - s;\n\treturn length(max(d, 0.0)) + min(max(d.x, max(d.y, d.z)), 0.0);\n}\nfloat sd_capsule(vec3 p, vec3 a, vec3 b, float r)\n{\n  vec3 pa = p - a, ba = b - a;\n  float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n  return length( pa - ba*h ) - r;\n}\n\nmat2 op_rotate(float a) {\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\treturn mat2(c, -s, s, c);\n}\n\n\n// https://iquilezles.org/articles/smin\nfloat smin(float a, float b, float k)\n{\n    float h = max(k - abs(a - b), 0.0);\n    return min(a, b) - h * h * 0.25 / k;\n}\n\n// https://iquilezles.org/articles/smin\nfloat smax(float a, float b, float k)\n{\n    float h = max(k - abs(a - b),0.0);\n    return max(a, b) + h * h * 0.25 / k;\n}\n\n\nvec2 map(vec3 pos)\n{\n\n    float s = 0.75;\n\n    // create floor\n    float d = pos.y;\n    float m = 2.0;\n\n    pos.xz *= op_rotate(iMouse.x / iResolution.x * 8.0);\n    \n\n    pos.y += 0.54;\n\n\tfloat prevd = d;\n\n    { // Base\n    vec3 p = pos - vec3(0, s, 0);\n    d = min(d, sd_box(p, s * vec3(1.75, 0.20, 0.5)) - s * 0.1);\n\td = min(d, sd_box(p, s * vec3(2.0, 0.20, 0.5)) - s * 0.05);\n\n    p.x -= s * 2.15;\n    d = smax(d, -sd_sphere(p, s * 0.12), 0.01);\n    }\n    if (d < prevd)\n        m = 3.0;\n    prevd = d;\n    \n    { // Cap\n    vec3 p = pos - s * vec3(-1.25, 1, 0);\n\tfloat q = sd_box(p, s * vec3(1.75, 0.20, 0.5)) - s * 0.1;\n\n    p = pos - s * vec3(0.1, 1, 0);\n    q = max(q, -sd_box(p, s * vec3(2, 1, 1)));\n    d = min(d, q);\n    }\n\n    { // Clip\n        vec3 p = pos - s * vec3(-1.3, 1.5, 0);\n\t    d = min(d, sd_box(p, s * vec3(0.9, 0.06, 0.25)) - s * 0.02);\n        p -= s * vec3(-1.3, -0.08, 0.0);\n        p.xy *= op_rotate(-0.2);\n\t    d = min(d, sd_box(p, s * vec3(0.4,0.06, 0.25)) - s * 0.02);\n\t\n    }\n    if (d < prevd)\n        m = 4.0;\n    prevd = d;\n\n    \n    return vec2(d, m);\n}\n\n\nvec3 calc_normal(vec3 p)\n{\n    vec2 e = vec2(0.00005, 0.0);\n    return normalize(vec3(map(p + e.xyy).x - map(p - e.xyy).x,\n                          map(p + e.yxy).x - map(p - e.yxy).x,\n                          map(p + e.yyx).x - map(p - e.yyx).x));\n}\nvec2 cast_ray(vec3 ro, vec3 rd)\n{\n    float m = -1.0;\n    float total = 0.0;\n    for (int i = 0; i < 200; ++i) {\n        vec3 pos = ro + total * rd;\n        \n        vec2 dist = map(pos);\n\t    m = dist.y;\n        \n        if (dist.x < 0.001) break; // to close\n        total += dist.x;\n        if (total > 20.0) { // to far\n            total *= -1.0;\n            break;\n        }\n    }\n    return vec2(total, m);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    fragCoord *= 2.0;\n\tvec2 p = (fragCoord - iResolution.xy ) / iResolution.y;\n\n    vec3 ro = vec3(0.0, 2.0, -4.5); // ray origin\n    vec3 rd = normalize(vec3(p + vec2(0, -0.75), 2.0)); // ray direction\n    \n    vec3 col = vec3(0.6, 0.7, 0.8) - 0.4 * rd.y; // sky\n    col = mix(col, vec3(0.75, 0.8, 0.85), exp(-13.0 * rd.y)); // horizon\n   \n    vec2 res = cast_ray(ro, rd);\n    float total = res.x;\n    \n    if (total > 0.0) {\n        vec3 pos = ro + total * rd;\n        vec3 norm = calc_normal(pos);\n        \n        vec3 mat = vec3(0.18); \n        if (res.y > 3.5) {\n            mat = vec3(0.007, 0.007, 0.007);\n        } else if (res.y > 2.5) {\n            mat = 0.3 * vec3(0.8, 1.0, 0.00);\n        } else if (res.y > 1.5) {\n            mat = texture(iChannel0, pos.xz * 0.1).xyz * 0.2;\n            mat.r *= 1.1;\n        }\n        \n        // dot(a, b) -> how aligned are a and b\n        vec3 sun = normalize(vec3(sin(iTime * 0.1), 0.4, cos(iTime * 0.1)));\n        float sun_dif = clamp(dot(norm, sun), 0.0, 1.0);\n        // step(a, b) -> if a < b then 0 else 1\n        float sun_sha = step(cast_ray(pos + norm * 0.001, sun).x, 0.0);\n        col = mat * vec3(7.0, 4.5, 3.0) * sun_dif * sun_sha;\n        \n        \n        // Blueish sky light from above\n        float sky_dif = clamp(0.5 + 0.5 * dot(norm, vec3(0, 1, 0)), 0.0, 1.0);\n        col += mat * vec3(0.5, 0.8, 0.9) * sky_dif;\n        \n        // Remove blacks, by bouncing light of the ground\n        float bou_dif = clamp(0.5 + 0.5 * dot(norm, vec3(0, -1, 0)), 0.0, 1.0);\n        col += mat * vec3(0.7, 0.3, 0.2) * bou_dif;\n    }\n    col = pow(col, vec3(0.4545)); // Gamma correction\n    \n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}