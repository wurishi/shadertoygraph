{"ver":"0.1","info":{"id":"sdXyRf","date":"1642545215","viewed":243,"name":"Genuary 2022 - Day15","username":"z0rg","description":"My participation to genuary 2022\nI know it's heavy :p\nSand","likes":13,"published":3,"flags":32,"usePreview":0,"tags":["generative","sand","genuary","2022"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col = texture(iChannel0, fragCoord/iResolution.xy).xyz;\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\n#define sat(a) clamp(a, 0., 1.)\n#define PI 3.14159265\n#define TAU (PI*2.0)\n\nvec3 getCam(vec3 rd, vec2 uv)\n{\n    float fov = 1.;\n    vec3 r = normalize(cross(rd, vec3(0.,1.,0.)));\n    vec3 u = normalize(cross(rd, r));\n    return normalize(rd+fov*(r*uv.x+u*uv.y));\n}\n\nvec2 _min(vec2 a, vec2 b)\n{\n    if (a.x < b.x)\n        return a;\n    return b;\n}\n\n// Stolen from 0b5vr here https://www.shadertoy.com/view/ss3SD8\nfloat hash11(float p)\n{\n    return (fract(sin((p)*114.514)*1919.810));\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nfloat seed;\nfloat rand()\n{\n    seed++;\n    return hash11(seed);\n}\n\nvec2 map(vec3 p)\n{\n    vec2 acc = vec2(10000.,-1.);\n    \n    float ha = -asin(sin((p.x+p.z+sin(p.x*.5)*.5+sin(p.x*.1)*10.)))*.5\n    -asin(sin(.2*(p.x+p.z*0.+sin(p.x*.5)*.5+sin(p.x*.1)*10.)))*.5\n    -asin(sin(.2*(p.x+p.z*1.+sin(p.x*.5)*.5+sin(p.x*.1)*10.)))*.43;\n    float hb = -(sin((p.x*.2+p.z*.125+sin(p.x*.15)*.4+sin(p.x*.3)*5.)))*1.5;\n    float dune = -p.y - ha-hb*.5*sin(length(p.xz)*.15);\n\n    acc = _min(acc, vec2(dune, 0.));\n   // acc = _min(acc, vec2(length(p)-1., 0.));\n    return acc;\n}\n\nvec3 getNorm(vec3 p, float d)\n{\n    vec2 e = vec2(0.01, 0.);\n    return normalize(vec3(d)-vec3(map(p-e.xyy).x, map(p-e.yxy).x, map(p-e.yyx).x));\n}\n\nvec3 trace(vec3 ro, vec3 rd, int steps, float maxDist)\n{\n    vec3 p = ro;\n    for (int i = 0; i < steps && distance(p, ro) < maxDist; ++i)\n    {\n        vec2 res = map(p);\n        if (res.x < 0.01)\n            return vec3(res.x, distance(p, ro), res.y);\n        p+=rd*res.x*.35;\n    }\n    return vec3(-1.);\n}\n\nvec3 getEnv(vec3 rd)\n{\n    return vec3(1.000,0.804,0.580)*pow(1.-sat(abs(dot(rd, vec3(0.,1.,0.)))),15.)+vec3(0.616,0.780,0.804);\n}\n\nvec3 getMat(vec3 res, vec3 rd, vec3 p, vec3 n)\n{\n    vec3 col = vec3(0.);//n*.5+.5;\n    vec3 lpos = vec3(10.,-5,10.)+(vec3(rand(), rand(), rand())-.5)*2.5;\n    vec3 ldir = lpos-p;\n        //col = n*.5+.5;\n    vec3 resShadow = trace(p+n*.01, normalize(ldir), 200, 10.);\n    \n    if (resShadow.y < 0.)\n        col = vec3(0.733,0.667,0.545)*sat(dot(normalize(ldir), n));\n    return col;\n}\n\nvec3 rdr(vec2 uv)\n{\n    vec3 col = vec3(0.);\n    vec3 dof = (vec3(rand(), rand(), rand())-.5)*.05;\n    vec3 ro = vec3(10.+sin(iTime*.25)*3.,-4.,-10.)+dof;\n    vec3 ta = vec3(-15.,-1.,0.);\n    vec3 rd = normalize(ta-ro);\n    \n    rd = getCam(rd, uv)-dof*.01;\n    vec3 res = trace(ro, rd, 512, 250.);\n    if (res.y > 0.)\n    {\n        vec3 p = ro+rd*res.y;\n        vec3 n = getNorm(p, res.x);\n        n += .1*vec3(sin(p.x*30.+3.*sin(p.z*2.)+p.z*5.), 0.,0.)*sat(sin(p.z));\n        n = normalize(n);\n        col = getMat(res, rd, p, n);\n            for (int i = 0; i < 2; ++i)\n            {\n                vec3 refl = normalize(reflect(rd, n));\n                float spec = 1.;\n                refl = mix(refl, normalize(vec3(rand(), rand(), rand())-.5), spec);\n            \n                if (dot(refl, n) < 0.01)\n                    refl = -refl;\n                vec3 resrefl = trace(p+n*0.01, refl,128, 5.);\n                if (resrefl.y > 0.)\n                {\n                    vec3 prefl = p+refl*resrefl.y;\n                    vec3 nrefl = getNorm(prefl, resrefl.x);\n                    col += getMat(resrefl, refl, prefl, nrefl);\n                    n = nrefl;\n                    p = prefl;\n                }\n                else\n                {\n                    col += getEnv(refl)*vec3(0.733,0.667,0.545)*1.1;\n                    break;\n                }\n                //col += accLight;\n                rd = refl;\n            }\n    }\n    else\n    {\n        col = getEnv(rd);\n    }\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.xx;\n    seed=texture(iChannel0,uv).x;\n    seed+=fract(iTime);\n    \n    vec2 off = (vec2(rand(), rand())-.5)*3.*vec2(1., -1.)/(iResolution.x*1.75);\n    vec3 col = rdr(uv+off);\n    col *= vec3(0.984,0.745,0.616);\n    col *= 2.1/(col+1.);\n    col = pow(col, vec3(1.6));\n    col = mix(col, texture(iChannel1, fragCoord/iResolution.xy).xyz, .95);\n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}