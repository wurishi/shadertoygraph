{"ver":"0.1","info":{"id":"DtK3WR","date":"1683836680","viewed":85,"name":"3figures+MOV","username":"HashSlasher666","description":"cool shader stfu","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["polygons"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int n = 3; // число фигур\nconst int m = 11; // число вершин\nfloat zAr[n] = float[n](3.0, 2.0, 1.0); // z-координаты плоских фигур\nint inds[n] = int[n](0, 4, 7); // массив индексов\nvec2 polygons[m] = vec2[m](vec2(124,110),vec2(155,160),vec2(300,150),vec2(320,70),vec2(350,350),vec2(210,100),vec2(100,220),vec2(250,100),vec2(200,200),vec2(300,250),vec2(600,100)); // массив координат вершин (крайних точек) полигонов\n\nbool InPolygon(in int num, in vec2 coord)\n{\n    int point;\n    if(num==n)\n    point=m;\n    else\n    point=inds[num];\n\n    vec2 first=polygons[inds[num-1]];\n    vec2 b=polygons[inds[num-1]+1];\n    vec2 c=polygons[inds[num-1]+2];\n    int i=0;\n    while(inds[num-1]+2+i<point)\n    {\n        if(sign((first.x-coord.x)*(c.y-first.y)-(c.x-first.x)*(first.y-coord.y))==\n        sign((c.x-coord.x)*(b.y-c.y)-(b.x-c.x)*(c.y-coord.y)) && \n        sign((first.x-coord.x)*(c.y-first.y)-(c.x-first.x)*(first.y-coord.y))==\n        sign((b.x-coord.x)*(first.y-b.y)-(first.x-b.x)*(b.y-coord.y)))\n        return true;\n        i++;\n        b=polygons[inds[num-1]+1+i];\n        c=polygons[inds[num-1]+2+i];\n    }  \n    return false;\n}\nvoid initPolygons(out vec2 polygons[m], in float time)\n{\n    float special=1.8;\n    int point;\n    int i,j;\n    float sgn;\n    for(i=0;i<n;i++)\n    {\n        if(i%2==0) sgn=-1.0;\n        else sgn=1.0;\n        if(i==n-1) point=m;\n        else point=inds[i+1];\n        for(j=inds[i];j<point;j++)\n        {\n            polygons[j].x+=cos(time)*50.0*sgn;\n            polygons[j].y-=cos(time)*50.0*sgn*special;\n        }\n        special=1.0;\n    }\n    return;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col;\n    initPolygons(polygons,iTime);\n    if(InPolygon(2,fragCoord) && InPolygon(3,fragCoord) && InPolygon(1,fragCoord))\n    {\n        if(zAr[0]>zAr[1])\n        {\n            if(zAr[0]>zAr[2])\n            col=vec3(1.0,.0,.0);\n            else\n            col=vec3(.0,.0,1.0);\n        }\n        else\n        {\n            if(zAr[1]>zAr[2])\n            col=vec3(.0,1.0,.0);\n            else\n            col=vec3(.0,.0,1.0);\n        }\n        \n    } else\n    if(InPolygon(2,fragCoord) && InPolygon(3,fragCoord))\n    {\n        if(zAr[2]>zAr[1])\n        col=vec3(.0,.0,1.0);\n        else\n        col=vec3(.0,1.0,.0);\n    } else\n    if(InPolygon(2,fragCoord) && InPolygon(1,fragCoord))\n    {\n        if(zAr[0]>zAr[1])\n        col=vec3(1.0,.0,.0);\n        else\n        col=vec3(.0,1.0,.0);\n    } else\n    if(InPolygon(1,fragCoord) && InPolygon(3,fragCoord))\n    {\n        if(zAr[0]>zAr[2])\n        col=vec3(1.0,.0,.0);\n        else\n        col=vec3(.0,.0,1.0);\n    }\n    else\n    if(InPolygon(2,fragCoord))\n    col=vec3(.0,1.0,.0);\n    else if(InPolygon(3,fragCoord))\n    col=vec3(.0,.0,1.0);\n    else if(InPolygon(1,fragCoord))\n    col=vec3(1.0,.0,.0);\n    else col=vec3(.0,.0,.0);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}