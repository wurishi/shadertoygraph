{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"/*\n * This function will function like an array.\n */\nvec2 getWaveSource(int ws)\n{\n\tvec2 outp;\n\tif (ws == 0)\n\t{\n\t\toutp = vec2(-100,-100);\n\t}\n\telse if (ws == 1)\n\t{\n\t\toutp = vec2(-100,500);\n\t}\n\telse\n\t{\n\t\toutp = vec2(500,-500);\n\t}\n\treturn outp;\n}\n/*\n * Don't need an expensive square root operation.\n * This returns distance squared, not distance.\n */\nfloat distanceSq(vec2 a, vec2 b)\n{\n\tvec2 diff = a - b;\n\treturn dot(diff, diff);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tconst int wsCount = 3;\n\t\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\t\n\tfloat wavePower = 0.0;\n\tfor(int i=0; i<wsCount; i++)\n\t{\n\t\tvec2 src = getWaveSource(i);\n\t\tfloat dist = distanceSq(src, uv) / 300.0;\n\t\twavePower += sin((dist + iTime));\n\t\t\n\t}\n\tfragColor = vec4(\n\t\t0.5 + 0.5 * sin(wavePower),\n\t\t0.5 + 0.5 * cos(wavePower),\n\t\t0.5 + 0.5 * sin(iTime),\n\t\t1.0\n\t);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XsSGR3","date":"1391369880","viewed":1018,"name":"A Quick Plasma Test","username":"technicalfool","description":"A simple plasma algorithm. Hello, World.","likes":15,"published":1,"flags":0,"usePreview":0,"tags":["plasma"],"hasliked":0,"parentid":"","parentname":""}}