{"ver":"0.1","info":{"id":"NdsfDj","date":"1645413365","viewed":149,"name":"sphere bouncing","username":"xnio94","description":"i was just trying to see how much time i need to create a basic raymarcher from scratch (it was 25min)","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["ray","marching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float bounce(float dh,float a)\n{\n    if (dh==0.) return 0.;\n    float g=10.;\n    float v0 = sqrt(dh*4.*g);\n    float t = mod(iTime + a*v0/g+ 0.*v0/g,v0/g); \n    return -g*t*t+v0*t;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n\n    \n    vec3 rd = vec3(uv,1.);\n    rd = normalize(rd);\n    vec3 o =vec3(sin(5.+5.*sin(iTime*5.))*.1,0.,iTime*4.);\n    vec3 n=vec3(0.);\n    float d = 0.;\n    float e = 0.;\n    float shadow = 1.;\n\n    for(int i =0;i<99;i++)\n    {\n        vec3 p = o+d*rd;\n        vec3 qq = p;\n        p.xz = mod(p.xz,2.)-1.;\n        float s = p.z-qq.z;\n        \n        float a =length(p+vec3(0.,-bounce(.3,s/5.),0.))-.5;\n        float b = p.y+.5;\n        if(a < b)\n        {\n            e = a;\n            n =.5*(mod(iTime*5.+s,2.)+1.)*normalize(p);\n        }\n        else \n        {\n            e = b;\n            n = vec3(0.,1.,0.);\n            \n        }\n        d +=e;\n    }\n    float col;\n    vec3 sun = vec3(cos(iTime*7.),1.,sin(iTime*5.));\n    sun=normalize(sun);\n    \n    \n    if(n==vec3(0.,1.,0.))\n    {\n        vec3 p = o+d*rd;\n        float d2=0.;\n        float ee = 1.;\n        for(int i =0;i<36;i++)\n        {\n            vec3 q = p+d2*sun;\n            vec3 qq = q;\n\n            q.xz = mod(q.xz,2.)-1.;\n        float s = q.z-qq.z;\n            ee = length(q+vec3(0.,-bounce(.3,s/5.),0.))-.5;\n            d2+=ee;\n        }\n        if (ee<1e-2)\n        {\n            shadow = 0.;\n        }\n    }\n    \n\n    \n    if(e<1e-4) \n    {\n        col = shadow * max(0., dot(n,sun))/d;\n    }\n    else col = 0.;\n\n    fragColor = vec4(vec3(col),1.0);\n}","name":"Image","description":"","type":"image"}]}