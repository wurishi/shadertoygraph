{"ver":"0.1","info":{"id":"ldjyWc","date":"1494536420","viewed":341,"name":"rotating tesseract","username":"balkhan","description":"Tesseract under 6 rotations. \nSaw it was bugged on a friends manjaro and windows with old gpu, points not linked correctly. Could not test wether it was a matrix column major / row major issue or a problem with the texture fetchs. ","likes":11,"published":1,"flags":32,"usePreview":0,"tags":["tesseract"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n* License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n* Created by bal-khan\n*/\n\n#define I_MAX\t50\n#define E\t\t0.001\n\n#define L1\tvec3(0., 3., -2.)\n#define L2\tvec3(st*3.,-3.,4.+ct*3.)\n\n//#define TRIPPY // colors for the tesseract\n\nvec4\tP00;\nvec4\tP01;\nvec4\tP02;\nvec4\tP03;\nvec4\tP04;\nvec4\tP05;\nvec4\tP06;\nvec4\tP07;\nvec4\tP08;\nvec4\tP09;\nvec4\tP10;\nvec4\tP11;\nvec4\tP12;\nvec4\tP13;\nvec4\tP14;\nvec4\tP15;\n\nvec3\ttech;\n\nvoid\trotate(inout vec2 v, float angle);\nfloat\tsdCapsule( vec3 p, vec3 a, vec3 b, float r );\nfloat\tudBox( vec3 p, vec3 b );\nvec2\tmarch(vec3 pos, vec3 dir);\nvec3\tcamera(vec2 uv);\nvec3\tblackbody(float Temp);\nfloat\tscene(vec3 p);\nfloat\tmylength(vec3 p);\nvoid\tgetPoints();\n\n// --globals-- //\nvec3\th;\nfloat\tg; //coloring id\nfloat\tt; // time\nfloat\tmine;\nfloat\tst;\nfloat\tct;\nfloat\thit;\n// --globals-- //\n\nconst vec3\tlightCol1 = vec3(.1,.3,.7);\nconst vec3\tlightCol2 = vec3(.5,.3,.2);\n\n// blackbody by aiekick : https://www.shadertoy.com/view/lttXDn\n\n// -------------blackbody----------------- //\n\n// return color from temperature \n//http://www.physics.sfasu.edu/astro/color/blackbody.html\n//http://www.vendian.org/mncharity/dir3/blackbody/\n//http://www.vendian.org/mncharity/dir3/blackbody/UnstableURLs/bbr_color.html\n\nvec3 blackbody(float Temp)\n{\n\tvec3 col = vec3(255.);\n    col.x = 56100000. * pow(Temp,(-3. / 2.)) + 148.;\n   \tcol.y = 100.04 * log(Temp) - 623.6;\n   \tif (Temp > 6500.) col.y = 35200000. * pow(Temp,(-3. / 2.)) + 184.;\n   \tcol.z = 194.18 * log(Temp) - 1448.6;\n   \tcol = clamp(col, 0., 255.)/255.;\n    if (Temp < 1000.) col *= Temp/1000.;\n   \treturn col;\n}\n\n// -------------blackbody----------------- //\n\n// sebH's volumetric light : https://www.shadertoy.com/view/XlBSRz\n\n// ------------volumetric light----------- //\n\nvec3 evaluateLight(in vec3 pos)\n{\n    float distanceToL = length(L1-pos);\n    float distanceToL2 = length(L2-pos);\n    return (\n        \tlightCol2 * 1.0/(distanceToL*distanceToL)\n           +lightCol1 * 1.0/(distanceToL2*distanceToL2)\n        \t)*.5;\n}\n\n// ------------volumetric light----------- //\n\t\nvoid mainImage(out vec4 o, in vec2 f )\n{\n    hit = 0.;\n    tech = vec3(1.);\n    t = iTime;\n    mine = 1e5;\n    st = sin(t);\n    ct = cos(t);\n\tgetPoints();\n    vec2 R = iResolution.xy,\n          uv  = vec2(f-R/2.) / R.y;\n    h = vec3(0.);\n    \n    vec3\tdir = camera(uv);\n    vec3\tpos = vec3(.0, .0, 15.0);\n    vec2\tinter = (march(pos, dir));\n\n    o.xyz = blackbody(((h.x+h.y+h.z) )*1000.);\n    o.xyz += vec3(abs(sin(t+1.04+g)), abs(sin(t+2.09+g)), abs(sin(t+3.14+g)))*(1.-inter.y*.0515);\n    o.xyz *= (1.-length(uv)*1.); // vignette\n    o.xyz += h*1.;\n    #ifdef TRIPPY\n    if (hit == 1.)\n    \to.xyz += tech-blackbody( abs(tech.z+tech.x+tech.y) *500.);\n    #endif\n}\n\nfloat\ttesseract(vec3 p)\n{\n\tfloat\tr = 1e5;\n\n    p.z+=-4.;\n\n    r = min(r, sdCapsule(p, P00.xyz, P01.xyz, .1) );\n    r = min(r, sdCapsule(p, P00.xyz, P02.xyz, .1) );\n    r = min(r, sdCapsule(p, P01.xyz, P03.xyz, .1) );\n    r = min(r, sdCapsule(p, P02.xyz, P03.xyz, .1) );\n\n    r = min(r, sdCapsule(p, P04.xyz, P05.xyz, .1) );\n    r = min(r, sdCapsule(p, P04.xyz, P06.xyz, .1) );\n    r = min(r, sdCapsule(p, P05.xyz, P07.xyz, .1) );\n    r = min(r, sdCapsule(p, P06.xyz, P07.xyz, .1) );\n\n    r = min(r, sdCapsule(p, P00.xyz, P04.xyz, .1) );\n    r = min(r, sdCapsule(p, P01.xyz, P05.xyz, .1) );\n    r = min(r, sdCapsule(p, P02.xyz, P06.xyz, .1) );\n    r = min(r, sdCapsule(p, P03.xyz, P07.xyz, .1) );\n\n    //\n\n    r = min(r, sdCapsule(p, P08.xyz, P09.xyz, .1) );\n    r = min(r, sdCapsule(p, P08.xyz, P10.xyz, .1) );\n    r = min(r, sdCapsule(p, P09.xyz, P11.xyz, .1) );\n    r = min(r, sdCapsule(p, P10.xyz, P11.xyz, .1) );\n\n    r = min(r, sdCapsule(p, P12.xyz, P13.xyz, .1) );\n    r = min(r, sdCapsule(p, P12.xyz, P14.xyz, .1) );\n    r = min(r, sdCapsule(p, P13.xyz, P15.xyz, .1) );\n    r = min(r, sdCapsule(p, P14.xyz, P15.xyz, .1) );\n\n    r = min(r, sdCapsule(p, P08.xyz, P12.xyz, .1) );\n    r = min(r, sdCapsule(p, P09.xyz, P13.xyz, .1) );\n    r = min(r, sdCapsule(p, P10.xyz, P14.xyz, .1) );\n    r = min(r, sdCapsule(p, P11.xyz, P15.xyz, .1) );\n\n    //\n\n    r = min(r, sdCapsule(p, P00.xyz, P08.xyz, .1) );\n    r = min(r, sdCapsule(p, P01.xyz, P09.xyz, .1) );\n    r = min(r, sdCapsule(p, P02.xyz, P10.xyz, .1) );\n    r = min(r, sdCapsule(p, P03.xyz, P11.xyz, .1) );\n\tr = min(r, sdCapsule(p, P04.xyz, P12.xyz, .1) );\n    r = min(r, sdCapsule(p, P05.xyz, P13.xyz, .1) );\n    r = min(r, sdCapsule(p, P06.xyz, P14.xyz, .1) );\n    r = min(r, sdCapsule(p, P07.xyz, P15.xyz, .1) );\n    #ifdef TRIPPY\n    tech+=vec3(cos(20.*length(p)-r+1.04), cos(20.*length(p)-r+2.08), cos(20.*length(p)-r+3.14) );\n    #endif\n    return (r);\n}\n\nfloat\tscene(vec3 p)\n{\n    float\tmind;\n    float\tbounding_box;\n    float\ttess;\n    mind = 1e5;\n    \n\trotate(p.xy, (.5*p.z+t)*exp(-t+4.));\n\n    mine = p.z+1.+cos(p.x)*cos(p.y)*(p.z);\n    mine = min(\tmine, -p.z-1.+22.*exp(t*.75-3.)+cos(p.x)*cos(p.y)*(p.z) );\n    mine = min(mine, +(p.x+sin(p.y)*cos(p.z*st ))+6.);\n    mine = min(mine, -(p.x-sin(p.y)*sin(p.z*st ))+6.);\n    mine = min(mine, +(p.y+sin(p.x)*sin(p.z*st ))+5.5);\n    mine = min(mine, -(p.y-sin(p.x)*sin(p.z*st ))+5.5);\n    mine = min(mine, length(p-L1)-.1);\n    bounding_box = udBox(p-vec3(0.,0.,4.5), vec3(2.5,2.5,2.5) );\n\tif (min(mine, bounding_box ) == bounding_box)\n    \ttess = tesseract(p);\n\telse\n        tess = 1e5;\n    p-= L2;\n\n    mind = min(tess, length(p)-.1);\n    mind = min(mine, mind);\n\tif (mind == tess && mind != 1e5)\n        hit = 1.;\n    return mind;\n}\n\nvec2\tmarch(vec3 pos, vec3 dir)\n{\n    vec2\tdist = vec2(0.0);\n    vec3\tp = vec3(0.0);\n    vec2\ts = vec2(0.0);\n    \n    for (int i = 1; i < I_MAX; ++i)\n    {\n        hit = 0.;\n    \tp = pos + dir * dist.y;\n        dist.x = scene(p);\n        dist.y += dist.x;\n        h += evaluateLight(p)*.251125;\n        if (dist.x < E || dist.y > 20.)\n        {\n            if(dist.x != mine)\n                p=vec3(0.);\n\t        g +=  (\n                \tstep( mod( (p.y), 2. ), .5) \n                  + step( mod( (p.x), 2. ), .5)\n                  + step( mod( (p.z), 2. ), .5)\n                 );\n            g *= (float(\n                \tint( ( ( 5.*abs(p.y) ) ) ) \n                  ^ int( ( ( 5.*abs(p.x) ) ) )\n                  | int( ( ( 5.*abs(p.z) ) ) )\n                 ) );\n           break;\n        }\n        s.x++;\n    }\n    s.y = dist.y;\n    return (s);\n}\n\nvoid\tgetPoints()\n{\n    P00 = texture(iChannel0, vec2(0., 1./iChannelResolution[0].y), 0. );\n    P01 = texture(iChannel0, vec2(0., 2./iChannelResolution[0].y), 0. );\n\tP02 = texture(iChannel0, vec2(0., 3./iChannelResolution[0].y), 0. );\n\tP03 = texture(iChannel0, vec2(0., 4./iChannelResolution[0].y), 0. );\n\tP04 = texture(iChannel0, vec2(0., 5./iChannelResolution[0].y), 0. );\n\tP05 = texture(iChannel0, vec2(0., 6./iChannelResolution[0].y), 0. );\n\tP06 = texture(iChannel0, vec2(0., 7./iChannelResolution[0].y), 0. );\n\tP07 = texture(iChannel0, vec2(0., 8./iChannelResolution[0].y), 0. );\n\tP08 = texture(iChannel0, vec2(0., 9./iChannelResolution[0].y), 0. );\n\tP09 = texture(iChannel0, vec2(0., 10./iChannelResolution[0].y), 0. );\n\tP10 = texture(iChannel0, vec2(0., 11./iChannelResolution[0].y), 0. );\n\tP11 = texture(iChannel0, vec2(0., 12./iChannelResolution[0].y), 0. );\n\tP12 = texture(iChannel0, vec2(0., 13./iChannelResolution[0].y), 0. );\n\tP13 = texture(iChannel0, vec2(0., 14./iChannelResolution[0].y), 0. );\n\tP14 = texture(iChannel0, vec2(0., 15./iChannelResolution[0].y), 0. );\n\tP15 = texture(iChannel0, vec2(0., 16./iChannelResolution[0].y), 0. );\n}\n\n\n// Utilities\n\nvoid rotate(inout vec2 v, float angle)\n{\n\tv = vec2(cos(angle)*v.x+sin(angle)*v.y,-sin(angle)*v.x+cos(angle)*v.y);\n}\n\nfloat\tmylength(vec3 p)\n{\n\tp = p*p*p*p*p*p;\n    return (pow(p.x+p.y+p.z, 1./6.));\n}\n\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n\tvec3 pa = p-a, ba = b-a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length(  pa - ba*h ) - r;\n}\n\nfloat udBox( vec3 p, vec3 b )\n{\n  return length(max(abs(p)-b,0.0));\n}\n\nvec3\tcamera(vec2 uv)\n{\n    float   fov = 1.;\n\tvec3    forw  = vec3(0.0, 0.0, -1.0);\n\tvec3    right = vec3(1.0, 0.0, 0.0);\n\tvec3    up    = vec3(0.0, 1.0, 0.0);\n\n    return (normalize((uv.x) * right + (uv.y) * up + fov * forw));\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Calculating the rotation matrixes and the points 16 times (16 points)\n// returning this to get it as texture, not sure it fasten things but I hoped it would.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \n    if ( ((fragCoord.x) == (0.5))\n        && ((fragCoord.y) <= (16.)) )\n    {\n        float\tt = iTime;\n\t    float\tct = cos(t);\n\t    float\tst = sin(t);\n\t\tvec4\tP[16];\n\n\t    mat4\tm = mat4(\n\t    \tcos(t*.5), 0., 0., -sin(t*.5),\n\t        0., 1., 0., 0.,\n\t        0., 0., 1., 0.,\n\t        sin(t*.5), 0., 0., cos(t*.5) \n\t    );\n\n        mat4\tn = mat4(\n\t    \t1., 0., 0., 0.,\n\t        0., ct, 0., st,\n\t        0., 0., 1., 0.,\n\t        0., st, 0., -ct \n\t    );\n\n\t    mat4\to = mat4(\n\t    \t1., 0., 0., 0.,\n\t        0., 1., 0., 0.,\n\t        0., 0., cos(t*2.), sin(t*2.), \n\t        0., 0., -sin(t*2.), cos(t*2.)\n\t    );\n        \n        mat4\ti = mat4(\n\t    \tcos(t*.25), -sin(t*.25), 0., 0.,\n\t        sin(t*.25), cos(t*.25), 0., 0.,\n\t        0., 0., 1., 0., \n\t        0., 0., 0., 1.\n\t    );\n\n        mat4\tj = mat4(\n\t    \t1., 0., 0., 0.,\n\t        0., cos(t*.5+1.), -sin(t*.5+1.), 0.,\n\t        0., sin(t*.5+1.), cos(t*.5+1.), 0., \n\t        0., 0., 0., 1.\n\t    );\n        \n        mat4\tk = mat4(\n\t    \tcos(t+2.), 0., -sin(t+2.), 0.,\n\t        0., 1., 0., 0.,\n\t        sin(t+2.), 0., cos(t+2.), 0., \n\t        0., 0., 0., 1.\n\t    );\n  \n\t    m = m*o*n*k*i*j;\n\n        P[0]  = vec4(-1., -1., -1., +1. )*1.5;\n\t\tP[1]  = vec4(+1., -1., -1., +1. )*1.5;\n\t    P[2]  = vec4(-1., +1., -1., +1. )*1.5;\n\t    P[3]  = vec4(+1., +1., -1., +1. )*1.5;\n\t    P[4]  = vec4(-1., -1., +1., +1. )*1.5;\n\t    P[5]  = vec4(+1., -1., +1., +1. )*1.5;\n\t    P[6]  = vec4(-1., +1., +1., +1. )*1.5;\n\t    P[7]  = vec4(+1., +1., +1., +1. )*1.5;\n\n\t    P[8]  = vec4(-1., -1., -1., -1. )*1.5;\n\t    P[9]  = vec4(+1., -1., -1., -1. )*1.5;\n\t    P[10] = vec4(-1., +1., -1., -1. )*1.5;\n\t    P[11] = vec4(+1., +1., -1., -1. )*1.5;\n\t    P[12] = vec4(-1., -1., +1., -1. )*1.5;\n\t    P[13] = vec4(+1., -1., +1., -1. )*1.5;\n\t    P[14] = vec4(-1., +1., +1., -1. )*1.5;\n\t    P[15] = vec4(+1., +1., +1., -1. )*1.5;\n\n        P[0]  = (vec4(P[0])*m);\n\t    P[1]  = (vec4(P[1])*m);\n\t\tP[2]  = (vec4(P[2])*m);\n\t\tP[3]  = (vec4(P[3])*m);\n\t\tP[4]  = (vec4(P[4])*m);\n\t\tP[5]  = (vec4(P[5])*m);\n\t\tP[6]  = (vec4(P[6])*m);\n\t\tP[7]  = (vec4(P[7])*m);\n\t\tP[8]  = (vec4(P[8])*m);\n\t\tP[9]  = (vec4(P[9])*m);\n\t\tP[10] = (vec4(P[10])*m);\n\t\tP[11] = (vec4(P[11])*m);\n\t\tP[12] = (vec4(P[12])*m);\n\t\tP[13] = (vec4(P[13])*m);\n\t\tP[14] = (vec4(P[14])*m);\n\t\tP[15] = (vec4(P[15])*m);\n        fragColor = P[int(fragCoord.y)];\n\t}\n    else\n\t    fragColor = vec4(0.0,0.0,0.0,0.0);\n}","name":"Buf A","description":"","type":"buffer"}]}