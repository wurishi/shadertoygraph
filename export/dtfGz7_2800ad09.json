{"ver":"0.1","info":{"id":"dtfGz7","date":"1671496388","viewed":162,"name":"Pixel Font Tech","username":"nr4","description":"This shader was generated using https://github.com/LeStahL/aldi-pixel-font.","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["text","pixel","font","packer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Generated by the ALDI Pixel Font Editor (c) 2022 Alexander Kraus <nr4@z10.info>.\n// Find a convenient font and text database editor at: https://github.com/LeStahL/aldi-pixel-font.\nuint font_frag[94] = uint[94](\n    /**  !\"# **/          0u,  554188816u, 1384120320u, 1473556392u,\n    /** $%&' **/ 1408558584u,   71582788u, 1949616496u,  553648128u,\n    /** ()*+ **/  571507728u, 1091060256u,   42508288u,   18628608u,\n    /** ,-./ **/       1056u,      57344u,       1024u,  277365792u,\n    /** 0123 **/ 1952651448u,  587743800u, 1950541948u, 1951144120u,\n    /** 4567 **/  286338952u, 4231794936u, 2084378808u, 4165223488u,\n    /** 89:; **/ 1952258232u, 1952641272u,   16777728u,   16777744u,\n    /** <=>? **/   17892368u,   58777600u,   34087456u, 1883652112u,\n    /** @ABC **/ 1953200184u, 1952708804u, 4101839096u, 1952516280u,\n    /** DEFG **/ 4100135160u, 4231596156u, 4231596096u, 1952544956u,\n    /** HIJK **/ 2355361988u,  554189328u, 1887707440u, 2359675212u,\n    /** LMNO **/ 2216757372u, 2397788884u, 2389391556u, 1952651448u,\n    /** PQRS **/ 4100188224u, 1952668084u, 4100188748u, 2082214136u,\n    /** TUVW **/ 4178067984u, 2355304632u, 2355275024u, 2372623084u,\n    /** XYZ[ **/ 2324186436u, 2324185616u, 4165257340u, 1645249584u,\n    /** \\]^_ **/ 2182103300u,  813965592u,  578813952u,        124u,\n    /** `abc **/  545259520u,    2038196u, 1108395312u,      25624u,\n    /** defg **/  277112088u,      25880u,    8970768u,    1892664u,\n    /** hijk **/ 1108395304u,   33588240u,   16794144u, 1108387368u,\n    /** lmno **/ 1108378640u,     113348u,      50472u,      17680u,\n    /** pqrs **/    1615392u,     828168u,      50208u,   26272048u,\n    /** tuvw **/   34653208u,      42288u,      42256u,      88744u,\n    /** xyz{ **/      41512u,    1368368u,   50652184u,  573670416u,\n    /** |}   **/  554189328u,  545665296u\n);\n\nuint font_frag_text_offsets[7] = uint[7](\n             0u,         64u,         84u,        107u,\n           137u,        174u,        175u\n);\n\nuint font_frag_text_strings[44] = uint[44](\n    /** ?HI! CHECK OUT T **/  558450751u, 1162363680u, 1327516483u, 1411404885u,\n    /** HE NEW PIXEL FON **/ 1310737736u, 1344296773u, 1279613001u, 1313818144u,\n    /** T AND TEXT PACKE **/ 1312890964u, 1163141188u, 1344296024u, 1162560321u,\n    /** R BY TEAM210. :) **/ 1497505874u, 1095062560u,  808530509u,  691675182u,\n    /** \u0013ALSO: HELLO, WO **/ 1397506323u, 1210071631u, 1330400325u, 1331109932u,\n    /** RLD!\u0016WE CAN DISP **/  558124114u,  541415190u,  541999427u, 1347635524u,\n    /** LAY FLOATS:\u001dWE C **/  542720332u, 1095715910u,  490361684u, 1126188375u,\n    /** AN ALSO DISPLAY  **/ 1092636225u,  542069580u, 1347635524u,  542720332u,\n    /** INTEGERS:$DISPLA **/ 1163152969u, 1397900615u, 1229202490u, 1095520339u,\n    /** Y SOME UNSIGNED  **/ 1330847833u, 1428178253u, 1195987790u,  541345102u,\n    /** INTEGERS HERE:   **/ 1163152969u, 1397900615u, 1380272160u,      14917u\n);\n\nfloat dfont_frag(vec2 uv, uint ordinal, float pixelSize) {\n    vec2 xij = (uv - mod(uv, pixelSize) + .5*pixelSize)/pixelSize;\n    return !(any(lessThan(xij, vec2(0))) || any(greaterThanEqual(xij, vec2(5,6)))) && bool((font_frag[ordinal - 32u] >> (5u * (uint(xij.y) + 1u) + 1u - uint(xij.x))) & 1u) ? -1. : 1.;\n}\n\nuint decode_single(uint byteIndex, uint data) {\n    return (data >> (8u * byteIndex)) & 0xffu;\n}\n\nuvec2 localIndices(uint globalByteIndex) {\n    uint localByteIndex = globalByteIndex % 4u,\n        globalIntegerIndex = (globalByteIndex - localByteIndex) / 4u;\n    return uvec2(globalIntegerIndex, localByteIndex);\n}\n\nfloat dfont_frag_text(vec2 uv, uint index, float pixelSize) {\n    float glyphSize = 6.*pixelSize,\n        x = mod(uv.x, glyphSize),\n        xi = (uv.x - x)/glyphSize;\n       \n    uvec2 localTextIndices = localIndices(font_frag_text_offsets[index]);\n    uint textSize = decode_single(localTextIndices.y, font_frag_text_strings[localTextIndices.x]);\n    localTextIndices = localIndices(font_frag_text_offsets[index] + uint(xi) + 1u);\n    return (xi < 0. || xi >= float(textSize) || abs(uv.y-.5*6.*pixelSize) > 6.*pixelSize) ? 1. : dfont_frag(vec2(x, uv.y), decode_single(localTextIndices.y, font_frag_text_strings[localTextIndices.x]), pixelSize);\n}\n\nuint log10(uint v) {\n    return v < 10u ? 1u\n        : v < 100u ? 2u\n        : v < 1000u ? 3u\n        : v < 10000u ? 4u\n        : v < 100000u ? 5u\n        : v < 1000000u ? 6u\n        : v < 10000000u ? 7u\n        : v < 100000000u ? 8u\n        : 9u;\n}\n\nuint pow10(uint v) {\n    return v == 0u ? 1u\n        : v == 1u ? 10u\n        : v == 2u ? 100u\n        : v == 3u ? 1000u\n        : v == 4u ? 10000u\n        : v == 5u ? 100000u\n        : v == 6u ? 1000000u\n        : v == 7u ? 10000000u\n        : v == 8u ? 100000000u\n        : 1000000000u;\n}\n\nfloat dfont_frag_uint(vec2 uv, uint number, float pixelSize) {\n    uint numberWidth = max(log10(number), 1u);\n\n    float glyphSize = 6. * pixelSize,\n        x = mod(uv.x, glyphSize),\n        xi = (uv.x - x) / glyphSize + float(10u - numberWidth);\n\n    uint digitIndex = uint(xi),\n        digit = number / pow10(9u - digitIndex);\n        \n    return xi < 0. || xi > 9. || abs(uv.y-.5*glyphSize) > 6.*pixelSize || digitIndex < 10u - numberWidth\n        ? 1.\n        : dfont_frag(vec2(x, uv.y), 48u + digit % 10u, pixelSize);\n}\n\nfloat dfont_frag_int(vec2 uv, int number, float pixelSize) {\n    float glyphSize = 6. * pixelSize,\n        x = mod(uv.x, glyphSize),\n        xi = (uv.x - x) / glyphSize;\n\n    return uint(xi) == 0u && number < 0\n        ? dfont_frag(uv, 45u, pixelSize)\n        : dfont_frag_uint(uv - vec2(glyphSize*float(number < 0),0.), uint(abs(number)), pixelSize);\n}\n\nfloat dfont_frag_float(vec2 uv, float number, uint _precision, float pixelSize) {\n    float glyphSize = 6. * pixelSize,\n        x = mod(uv.x, glyphSize),\n        xi = (uv.x - x) / glyphSize;\n\n    if(int(xi) < 0) return 1.;\n\n    if(uint(xi) == 0u && number < 0.)\n        return dfont_frag(uv, 45u, pixelSize);\n\n    uv.x -= glyphSize * float(number < 0.);\n    number = abs(number);\n\n    int exponent = number == 0. ? 0 : int(floor(log(number)/log(10.)));\n\n    x = mod(uv.x, glyphSize);\n    xi = (uv.x - x) / glyphSize;\n\n    return uint(xi) == 0u\n        ? dfont_frag(vec2(x, uv.y), 48u + uint(floor(number/pow(10., float(exponent)))) % 10u, pixelSize)\n        : uint(xi) == 1u\n            ? dfont_frag(vec2(x, uv.y), 46u, pixelSize)\n            : uint(xi) < _precision + 1u\n                ? dfont_frag(vec2(x, uv.y), 48u + uint(floor(number/pow(10., float(exponent)-xi+1.))) % 10u, pixelSize)\n                : uint(xi) == _precision + 1u\n                    ? dfont_frag(vec2(x, uv.y), 69u, pixelSize)\n                    : dfont_frag_int(vec2(uv.x - float(_precision + 2u) * glyphSize, uv.y), exponent, pixelSize);\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n    vec2 uv = 1.05*(fragCoord-.5*iResolution.xy)/iResolution.y;\n    fragColor = vec4(1);\n    fragColor.rgb = mix(fragColor.rgb, vec3(0), step(dfont_frag(uv+vec2(.5*iResolution.x/iResolution.y,0.)-7.*.01*vec2(0.,1.), 66u, .01), 0.));\n    fragColor.rgb = mix(fragColor.rgb, vec3(0), step(dfont_frag_text(uv+vec2(.5*iResolution.x/iResolution.y,0.), 0u, .005), 0.));\n    fragColor.rgb = mix(fragColor.rgb, vec3(0), step(dfont_frag_uint(uv+vec2(.5*iResolution.x/iResolution.y,0.)+7.*.01*vec2(0.,1.), uint(iFrame), .01), 0.));\n    fragColor.rgb = mix(fragColor.rgb, vec3(0), step(dfont_frag_int(uv+vec2(.5*iResolution.x/iResolution.y,0.)+7.*.01*vec2(0.,2.), int(-iFrame), .01), 0.));\n    fragColor.rgb = mix(fragColor.rgb, vec3(0), step(dfont_frag_float(uv+vec2(.5*iResolution.x/iResolution.y,0.)+7.*.01*vec2(0.,3.), iTime, 5u, .01), 0.));\n}\n\n","name":"Image","description":"","type":"image"}]}