{"ver":"0.1","info":{"id":"MXtXDn","date":"1718896006","viewed":49,"name":"Black Hole Code with Mouse","username":"jedikoops","description":"A simple shader that replicates very roughly the gravitational lens around a black hole. The basic idea is that what is directly \"beyond\" the hole should end up on the border of the hole, and a progressive distortion should progress from there. -taigore","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["distortion","animation","blackhole"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of \"Basic black hole\" by taigore. https://shadertoy.com/view/3t2yWc\n// 2024-06-20 13:43:36\n\n// Speed in pixels per second at which the hole radius grows\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n    // Radius of the hole itself\n    float radius = 100.;\n    //amplitude of sin wave function https://www.desmos.com/calculator/k9tcujbkcd\n    float amp = 10.;\n    \n    radius = amp * sin(iTime) + radius - amp;\n    // Controls how thick is the distortion around the border\n    float distortionFactor = 4.;\n    \n    //calcluates where to put the black hole.\n\tvec2 center = iMouse.xy;\n    \n    \n    if(length(fragCoord - center) < radius) {\n        // Draw the hole as a black circle\n        fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n        return;\n    }\n    \n    // Remap the current coordinates to another point, mapping each point right on the radius\n    // of the hole to the exact center of the black hole!!!\n    vec2 centerDelta = center - fragCoord;\n    vec2 mappedCoord = fragCoord + centerDelta * \n    (distortionFactor / (radius -  length(centerDelta)));\n    \n    // Map the mapped vector to the texture\n    fragColor = texture(iChannel0, mappedCoord / iResolution.xy);\n}","name":"Image","description":"","type":"image"}]}