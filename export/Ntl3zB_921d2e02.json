{"ver":"0.1","info":{"id":"Ntl3zB","date":"1622334582","viewed":196,"name":"Monjori Eyes","username":"makc","description":"A quick tweak of https://www.shadertoy.com/view/lsfyRS","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["procedural"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// See https://www.shadertoy.com/view/lsfyRS fo the credits\n\n// I always wanted to try this since I did it in photoshop many years ago:\n// https://cdn.discordapp.com/attachments/685241247233081381/848338683764408340/no.jpg\n\nfloat a( float x )\n{\n    // \"smooth\" version of abs(x)\n    return sqrt( x * x + 0.02 );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (3.4 * fragCoord.xy / iResolution.xy) - 1.7;\n    \n    // flip y vertically\n    p.y *= -1.0;\n\n    // tilt it a bit (-0.3 for \"sad\" look :)\n    p.y += 0.3 * a(p.x);\n    \n    // scale a bit\n    p.y *= 0.7;\n\n    // mirror x to make 2 eyes\n    p.x = a(p.x) - 1.0;\n\n    // a = the time speed up by 40\n    // The 5.0 is to keep ShaderToy at the same speed of the original\n    float a = (iTime*5.0) * 40.0;\n\n    // declare a bunch of variables.\n    float d,e,f,g=1.0/40.0,h,i,r,q;\n\n    // e goes from 0 to 400 across the screen\n    //   = 400 * [(p.x*0.5) + 0.5 ]\n    //   = 400 * 0.5 * (p.x + 1)\n    //   = 200 * p.x + 200\n    // But p.x ranges from -1 to +1\n    // e = 0 to 400\n    e = 400.0*(p.x*0.5+0.5);\n\n    // f goes from 0 to 400 down the screen\n    f = 400.0*(p.y*0.5+0.5);\n\n    // e and f could be simplified as:\n    //vec2 ef = 200.0 * (p + 1.0);\n    \n    // i goes from 200 + or - 20 based\n    // on the sin of e * 1/40th + the slowed down time / 150\n    // or in other words slow down even more.\n    // e * 1/40 means e goes from 0 to 1\n    i = 200.0+sin(e*g+a/150.0)*20.0;\n    \n    // d is 200 + or - 18.0 + or - 7\n    // the first +/- is cos of 0.0 to 0.5 down the screen\n    // the second +/i is cos of 0.0 to 1.0 across the screen\n    d = 200.0+cos(f*g/2.0)*18.0+cos(e*g)*7.0;\n\n    // I'm stopping here. You can probably figure out the rest\n    // see answer\n//  r=sqrt(pow(i-e,2.0)+pow(d-f,2.0));\n    r = length( vec2( i-e, d-f ) );\n    q = f/r;\n\n    e = (r*cos(q))-a/2.0;\n    f = (r*sin(q))-a/2.0;\n    d = sin(e*g)*176.0 + sin(e*g)*164.0 + r;\n\n    h = ((f+d)+a/2.0)*g;\n    i = cos(h+r*p.x/1.3)*(e+e+a) + cos(q*g*6.0)*(r+h/3.0);\n\n    h = sin(f*g)*144.0-sin(e*g)*212.0*p.x;\n    h = (h+(f-e)*q+sin(r-(a+h)/7.0)*10.0+i/4.0)*g;\n\n//  i += cos(h*2.3*sin(a/350.0-q)) * 184.0*sin(q-(r*4.3+a/12.0)*g) + tan(r*g+h)*184.0*cos(r*g+h);\n    i += cos(h*2.3*sin(a/350.0-q)) * 184.0*sin(q-(r*4.3+a/12.0)*g) + sin(r*g+h)*184.0;\n\n    // Split into 4 segments\n    i  = mod(i/5.6,256.0)/64.0;\n\n    if (i <  0.0) i += 4.0;\n    if (i >= 2.0) i  = 4.0-i;\n\n    d  = r/350.0;\n    d += sin(d*d*8.0)*0.52;\n\n    f = (sin(a*g)+1.0)/2.0;\n//  fragColor = vec4(vec3(f*i/1.6,i/2.0+d/13.0,i)*d*p.x+vec3(i/1.3+d/8.0,i/2.0+d/18.0,i)*d*(1.0-p.x),1.0);\n    fragColor = d * mix(\n        vec4( i/1.3+d/8., i/2.+d/18., i, 0) ,\n        vec4( f*i/1.6 ,   i/2.+d/13., i, 0) ,\n        p.x\n    );\n}","name":"Image","description":"","type":"image"}]}