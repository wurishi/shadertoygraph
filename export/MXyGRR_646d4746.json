{"ver":"0.1","info":{"id":"MXyGRR","date":"1717184058","viewed":40,"name":"Quick scew rotation","username":"arcado","description":"Simple rotation shader using scew matrix","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["rotation","scew","affinetransformation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PixelSize 4.0\n#define Speed 1.0\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = vec2(fragCoord.x - iResolution.y * 0.5, fragCoord.y)/iResolution.yy;\n    vec2 CellSize = PixelSize / iResolution.yy;\n    uv = vec2(floor(uv.x / CellSize.x) * CellSize.x , floor(uv.y / CellSize.y)* CellSize.y );\n    \n    float angle = mod(iTime * Speed, 6.283185307179586);\n    \n    float h = -tan(angle/2.0);\n    float v = sin(angle);\n    \n        \n    vec2 scewCoord = (uv - 0.5) * mat2(h*v + 1., h*h*v + 2. * h, v, h*v + 1.) + 0.5;\n    vec3 col =  (1.0 - (step(1.0, scewCoord.x) + step(1.0, scewCoord.y) + step(0.0, -scewCoord.x) + step(0.0, -scewCoord.y)  )) * texture(iChannel0, scewCoord).xyz;\n    // Output to screen\n    fragColor = vec4(col ,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define PixelSize 1.0\n#define UseText true\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 CellSize = PixelSize / iResolution.yy;\n    \n    #ifdef UseText\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col = vec3(floor(uv.x / CellSize.x) * CellSize.x, floor(uv.y / CellSize.y) * CellSize.y, 0.);\n    fragColor = texture(iChannel0, col.xy);\n    #else\n    vec2 uv = ( fragCoord -.5* iResolution.xy) / iResolution.y;\n    float d = length(uv);\n    float r = 0.3;\n    float col =  smoothstep(r,r - 2.0/iResolution.y ,d) ;\n    fragColor = vec4(vec3(col), 1.0);\n    #endif\n}","name":"Buffer A","description":"","type":"buffer"}]}