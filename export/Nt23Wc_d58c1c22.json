{"ver":"0.1","info":{"id":"Nt23Wc","date":"1653280158","viewed":77,"name":"RayMarching_0934","username":"MrSnake","description":"1","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["ramarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.0\n#define SURF_DIST 0.01\n#define PI 3.14159265\n\nfloat smin(float a, float b, float k) {\n    float h = clamp(0.5 + 0.5*(a-b)/k, 0.0, 1.0);\n    return mix(a, b, h) - k*h*(1.0-h);\n}\n\nfloat sdCone(vec4 p, vec4 h, vec4 s, vec3 rot, vec3 rotW)\n{\n    vec4 t = p - s;\n    t.xz = t.xz * mat2x2(cos(rot.y), sin(rot.y), -sin(rot.y), cos(rot.y));\n    t.yz = t.yz * mat2x2(cos(rot.x), -sin(rot.x), sin(rot.x), cos(rot.x));\n    t.xy = t.xy * mat2x2(cos(rot.z), -sin(rot.z), sin(rot.z), cos(rot.z));\n    \n    t.xw *= mat2x2(cos(rotW.x), sin(rotW.x), -sin(rotW.x), cos(rotW.x));    \n    t.zw *= mat2x2(cos(rotW.z), -sin(rotW.z), sin(rotW.z), cos(rotW.z));\n    t.yw *= mat2x2(cos(rotW.y), -sin(rotW.y), sin(rotW.y), cos(rotW.y));\n    return max(length(t.xzw) - h.x, abs(t.y) - h.y) - h.x * t.y;\n}\n\nfloat sdBox(vec3 p, vec3 b, vec3 s)\n{\n    vec3 rot = vec3(0, (iTime), 0);\n    vec3 t = p - s;\n    t.xz = t.xz * mat2x2(cos(rot.y), sin(rot.y), -sin(rot.y), cos(rot.y));\n    t.xz = t.xz * mat2x2(cos(rot.y), sin(rot.y), -sin(rot.y), cos(rot.y));\n    vec3 d = abs(t) - b;\n    return min(max(d.x, max(d.y, d.z)), 0.0f) + length(max(d, 0.0f));\n}\n\nfloat sdHypercube (vec4 p, vec4 b, vec4 s, vec3 rot, vec3 rotW)\n{    \n    \n    vec4 t = p - s;\n    \n    \n    t.xz = t.xz * mat2x2(cos(rot.y), sin(rot.y), -sin(rot.y), cos(rot.y));\n    t.yz = t.yz * mat2x2(cos(rot.x), -sin(rot.x), sin(rot.x), cos(rot.x));\n    t.xy = t.xy * mat2x2(cos(rot.z), -sin(rot.z), sin(rot.z), cos(rot.z));\n    \n    t.xw *= mat2x2(cos(rotW.x), sin(rotW.x), -sin(rotW.x), cos(rotW.x));    \n    t.zw *= mat2x2(cos(rotW.z), -sin(rotW.z), sin(rotW.z), cos(rotW.z));\n    t.yw *= mat2x2(cos(rotW.y), -sin(rotW.y), sin(rotW.y), cos(rotW.y));\n    \n    vec4 d = abs(t) - b;\n    \n\treturn smin(max(d.x,max(d.y,max(d.z,d.w))),0.0, 0.2) + length(max(d,0.0));\n}\n\nfloat sdHypersphere (vec4 p, float r, vec4 s)\n{       \n    vec4 t = p - s;    \n    return length(t) - r;\n}\n\nfloat GetDist(vec3 p) {\n\t\n    vec4 s = vec4(0, 2, 6, sin(iTime));\n    vec4 s1 = vec4(0, 2, 5, 2);\n    float angle = iTime;\n    float angleW = PI/4.0;\n    vec3 rot = vec3(angle, angle, angle);\n    vec3 rotW = vec3(angleW, angleW, angleW);\n    //p.x = (mod(abs(p.x), 7.)) - 1.;\n    //p.z = (mod(abs(p.z), 7.));\n    float sphereDist = sdHypercube(vec4(p, 1), vec4(1, 1, 1, 1), s, rot, rotW);\n    float sphereDist2 = -sdHypersphere(vec4(p, 1), 1.4, s);\n    //float sphereDist3 = sdCone(vec4(p, 1), vec4(0.5, 0.55, 0.5, 0.5), s1, -rot*1.3, rotW);\n    //float sphereDist4 = -sdHypersphere(vec4(p, 1), 1.5, s1);\n    float planeDist;\n   \n    planeDist = sin((p.x * p.x + p.z * p.z) / 4. - iTime * 5. ) * 2. / \n            (400. + (p.x * p.x + p.z * p.z)*2.)   + p.y;\n   \n    \n    float d = smin((max(sphereDist2, sphereDist)), planeDist, 0.5);\n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n    float d0 = 0.0;\n    for (int i = 0; i < MAX_STEPS; ++i) {\n       vec3 p = ro + d0 * rd;\n       float ds = GetDist(p);\n       d0 += ds;\n       if (d0 > MAX_DIST || ds < SURF_DIST) break;\n    }\n    return d0;\n}\n\nvec3 GetNormal(vec3 p) {\n    float d = GetDist(p);\n    vec2 e = vec2(0.01, 0);\n    vec3 n = d - vec3(\n                    GetDist(p-e.xyy),\n                    GetDist(p-e.yxy),\n                    GetDist(p-e.yyx));\n    return normalize(n);\n}\n\nfloat GetLight(vec3 p) {\n    vec3 lightPos = vec3(0, 5, -6);\n    //lightPos.xz += vec2(sin(iTime), cos(iTime)) * 2.0; \n    vec3 l = normalize(lightPos - p);\n    vec3 n = GetNormal(p);\n    float dif = clamp(dot(n, l), 0.0, 1.0);\n    float d = RayMarch(p + n*SURF_DIST*2.0, l);\n    if (d < length(lightPos - p)) dif *= 0.1;\n    return dif;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = (fragCoord - 0.5 * iResolution.xy)/iResolution.y;\n\n    vec3 ro = vec3(0, 2, 0);\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1));\n    \n    float d = RayMarch(ro, rd);\n    vec3 p = ro + rd * d;\n    float dif = GetLight(p);\n    \n    vec3 col = vec3(dif);\n\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}