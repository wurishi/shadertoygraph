{"ver":"0.1","info":{"id":"tldGWn","date":"1576237930","viewed":242,"name":"Unity_RadialLines","username":"Corstiaan","description":"I needed a set of tech graphics, radial lines, semi-circles, blurred, not blurred etc. \nthis shader has em all. Play with the 'exposable params' (which will be driven by animators in Unity)","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["radial"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define M_PI 3.1415926535897932384626433832795\n\n// create a white band around 'val' with 'width' and 'sharp' anti-aliassing\nfloat smst(float val, float width, float sharp)\n{\n    return smoothstep(width/2.+(sharp/2.), width/2.-(sharp/2.), val);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    vec3 col = vec3(1.);\n    vec2 mouse = iMouse.xy / iResolution.xy;\n    vec2 cntr = vec2(0.);\n\n    // exposable params\n\tfloat smoothness = max(0.000001, iMouse.x / iResolution.x / 10.);\t// use to tune anti-aliasing\n    float scale = 1.;\t\t\t\t\t\t\t\t\t// scale down to keep blur inside\n    float fillStart = 20.;\t\t\t\t\t\t\t\t// start angle of pie-section in degrees\n    float fillEnd = 180.;\t\t\t\t\t\t\t\t// end angle of pie-section in degrees\n\tfloat nrofLines = 20.;\t\t\t\t\t\t\t\t// number of line (duh)\n    float lineLength = .5;\t\t\t\t\t\t\t\t// length, normalized to distance from center\n    float lineThick = .3;\t\t\t\t\t\t\t\t// thickness, normalized to distance neighboring line\n    float lineShift = mouse.y;\t\t\t\t\t\t\t// shifts (rotates around center) the lines (0 = own position, 1 = next line position)\n    bool linesEnabled = true;\t\t\t\t\t\t\t// set to false to just create pie sections\n    \n    float repeat = 3.;\t\t\t\t\t\t\t\t\t// repeat all the above 'repeat'-times around\n    \n    // general\n    vec2 vDist = uv - cntr;\n    float dist = length(vDist) * 2. / scale;\n    float innerRadius = smst(abs(dist - (1. - (lineLength * .5))), lineLength, smoothness);\n\n    // pie section\n    float a = (atan(vDist.x, vDist.y) + M_PI) / (M_PI * 2.);\n    \n    float angle = fract(((fract(a +0.5)-0.5) * repeat) + lineShift/nrofLines);\n    float angleDist = (fillEnd - fillStart) / 360.;\n    float pie = smst(abs(angle - angleDist / 2. - (fillStart / 360.)), angleDist, smoothness / 5. * repeat);\n    if (fillStart < 0.001 && fillEnd > 359.999) pie = 1.;\n\n    // lines\n    float lines = abs(fract(angle * nrofLines) - 0.5) * 2.;\n    lines = smst(lines, lineThick, smoothness * (nrofLines / 3. * repeat));\n\n    // all together now\n    col *= innerRadius; \t\t\t// radial band\n    col *= pie; \t\t\t\t\t// mask pie segment\n    if (linesEnabled) col *= lines; // mask lines\n \n    // col = vec3(pie);\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}