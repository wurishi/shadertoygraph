{"ver":"0.1","info":{"id":"stscz7","date":"1647727710","viewed":34,"name":"temple A","username":"salah","description":"un temple","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["lifgraphique"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Modeling - 2022.02.06\n// Eric Galin\n\nconst int Steps = 200;      // Number of steps\nconst float Epsilon = 0.01; // Marching epsilon\n\n// Primitives\n// boite\nfloat box( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n// tor\nfloat Tor( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\n//cylindre\nfloat Cylindre( vec3 p, float h, float r )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(h,r);\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\nfloat cyl2(vec3 p, vec3 a, vec3 b, float r)\n{\n  vec3  ba = b - a;\n  vec3  pa = p - a;\n  float baba = dot(ba,ba);\n  float paba = dot(pa,ba);\n  float x = length(pa*baba-ba*paba) - r*baba;\n  float y = abs(paba-baba*0.5)-baba*0.5;\n  float x2 = x*x;\n  float y2 = y*y*baba;\n  float d = (max(x,y)<0.0)?-min(x2,y2):(((x>0.0)?x2:0.0)+((y>0.0)?y2:0.0));\n  return sign(d)*sqrt(abs(d))/baba;\n}\n//capsule\nfloat sdVerticalCapsule( vec3 p, float h, float r )\n{\n  p.y -= clamp( p.y, 0.0, h );\n  return length( p ) - r;\n}\n// Sphere\n// p : point\n// c : center of skeleton\n// r : radius\nfloat Sphere(vec3 p, vec3 c,float r)\n{\n  return length(p-c)-r;\n}\n\n// Sphere\n// p : point\n// n : Normal of plane\n// o : Point on plane\nfloat Plane(vec3 p, vec3 n, vec3 o)\n{\n    return dot((p-o),n);\n}\n\n//function\n//rotation\nvec3 rotateX(vec3 p, float a) {\n    float c = cos(a);\n    float s = sin(a);\n    return p * mat3(\n        vec3(1, 0, 0),\n        vec3(0, c, -s),\n        vec3(0, s, c)\n    );\n}\n\n// Matrice de rotation selon l'axe Y\nvec3 rotateY(vec3 p, float a) {\n    float c = cos(a);\n    float s = sin(a);\n    return p * mat3(\n        vec3(c, 0, s),\n        vec3(0, 1, 0),\n        vec3(-s, 0, c)\n    );\n}\n\n// Matrice de rotation selon l'axe Z\nvec3 rotateZ(vec3 p, float a) {\n    float c = cos(a);\n    float s = sin(a);\n    return p * mat3(\n        vec3(c, -s, 0),\n        vec3(s, c, 0),\n        vec3(0, 0, 1)\n    );\n}\n//homotethie\n\nvec3 homo(vec3 p,float k)\n{\n    return p*k;\n}\n//translation\nvec3 translation(vec3 p,vec3 t)\n{\n    return p-t;\n}\n// Operators\n\n// Union\n// a,b : field function of left and right sub-trees\nfloat Union(float a,float b)\n{\n    return min(a,b);\n}\n//difference\nfloat diff(float a,float b)\n{\n    return max(a,-b);\n}\n// Intersection\n// a,b : field function of left and right sub-trees\nfloat Intersection(float a,float b)\n{\n    return max(a,b);\n}\n\n// Potential field of the object\nfloat colone(vec3 p)\n{\n    float h = 1.5;\n    vec3 r1 = translation(p,vec3(6,-8,-1.5));\n        vec3 r11 = homo(r1,h);\n       float a1  = box(r11,vec3(3,3,1));\n       vec3 q1 = translation(p,vec3(6,-8,6));\n        vec3 q11 = homo(q1,h);\n       float v1 = box(q11,vec3(3,3,1));\n   \n  vec3 y1 = rotateX(p,1.57);\n   vec3 y11 = homo(y1,h);\n   vec3 y21 = translation(y11,vec3(9,-3.4,-12));\n  float e1 = Cylindre(y21,1.70,6.0);\n      float g1 = Union(a1,Union(v1,e1));\n    \n    vec3 r2 = translation(p,vec3(-6,-8,-1.5));\n        vec3 r12 = homo(r2,h);\n       float a2  = box(r12,vec3(3,3,1));\n       vec3 q2 = translation(p,vec3(-6,-8,6));\n        vec3 q12 = homo(q2,h);\n       float v2 = box(q12,vec3(3,3,1));\n   \n  vec3 y2 = rotateX(p,1.57);\n   vec3 y12 = homo(y2,h);\n   vec3 y22 = translation(y12,vec3(-9,-3.4,-12));\n  float e2 = Cylindre(y22,1.70,6.0);\n      float g2 = Union(a2,Union(v2,e2));\n  \n      vec3 r3 = translation(p,vec3(-6,8,-1.5));\n        vec3 r13 = homo(r3,h);\n       float a3  = box(r13,vec3(3,3,1));\n       vec3 q3 = translation(p,vec3(-6,8,-6));\n        vec3 q13 = homo(q3,h);\n       float v3 = box(q13,vec3(3,-3,1));\n   \n  vec3 y3 = rotateX(p,1.57);\n   vec3 y13 = homo(y3,h);\n   vec3 y23 = translation(y13,vec3(9,-3.4,12));\n  float e3 = Cylindre(y23,1.70,6.0);\n      float g3 = Union(a3,Union(v3,e3));\n         \n         vec3 r4 = translation(p,vec3(6,8,-1.5));\n        vec3 r14 = homo(r4,h);\n       float a4  = box(r14,vec3(3,3,1));\n       vec3 q4 = translation(p,vec3(6,8,6));\n        vec3 q14 = homo(q4,h);\n       float v4 = box(q14,vec3(3,-3,1));\n   \n  vec3 y4 = rotateX(p,1.57);\n   vec3 y14 = homo(y4,h);\n   vec3 y24 = translation(y14,vec3(-9,-3.4,12));\n  float e4 = Cylindre(y24,1.70,6.0);\n      float g4 = Union(a4,Union(v4,e4));\n    return Union(g1,Union(g2,Union(g3,g4)));\n   \n    }\n\n//base\n\nfloat base(vec3 p)\n{\nfloat a = 4.0;\nfloat b = 1.0;\nfloat c = 0.25;\nvec3 p1 = translation(p,vec3(0,10.5,-2.5));\nfloat g1 = box(p1,vec3(a,b,0.59));\nvec3 p2 = translation(p,vec3(0,12.0,-3.5));\nfloat g2 = box(p2,vec3(a,b,0.59));\nvec3 p3 = translation(p,vec3(0,13.5,-5.0));\nfloat g3 = box(p3,vec3(a,b,0.59));\nvec3 p4 = translation(p,vec3(0,11,-5.5));\nfloat g4 = box(p4,vec3(a,1.5,2.5));\n\n\nvec3 p11 = translation(p,vec3(0,0,-3.5));\nfloat b1 = box(p11,vec3(8,10,1.59));\nreturn Union(b1,Union(g4,Union(g1,Union(g2,g3))));\n}\n\n//sommet\nfloat sommet(vec3 p)\n{\n    vec3 p11 = rotateZ(p,1.57);\n    vec3 p1 = rotateX(p11,0.3);\n    vec3 p2 = translation(p1,vec3(0,0,10.5));\n    float b1 = box(p2,vec3(10,10,1.59));\n    vec3 p33 = rotateZ(p,1.57);\n    vec3 p3 = rotateX(p33,-0.3);\n    vec3 p4 = translation(p3,vec3(0,0,10.5));\n    float b2 = box(p4,vec3(10,10,1.59));\n    vec3 p55 = rotateZ(p,1.57);\n    vec3 p5 = translation(p55,vec3(0,0,7.9));\n    float b = box(p5,vec3(10,10,1.59));\n    \n   \n\n    vec3 p22 = translation(p,vec3(0,10,7.7));\n    return Union(Tor(p22,vec2(1,0.5)),diff(b,Union(b1,b2)));\n\n}\n// col\nfloat col(vec3 p)\n{\n    vec3 p1 = translation(p,vec3(0,-8,0));\n    float c1 = cyl2(p1,vec3(0,0,-2),vec3(0,0,7),1.7);\n\n\n    vec3 p2 = translation(p,vec3(-6,-2.5,0));\n    float c2 = cyl2(p2,vec3(0,0,-2),vec3(0,0,7),1.7);\n\n\n    vec3 p3 = translation(p,vec3(6,-2.5,0));\n    float c3 = cyl2(p3,vec3(0,0,-2),vec3(0,0,7),1.7);\n\n\n    vec3 p4 = translation(p,vec3(-6,3,0));\n    float c4 = cyl2(p4,vec3(0,0,-2),vec3(0,0,7),1.7);\n\n\n    vec3 p5 = translation(p,vec3(6,3,0));\n    float c5 = cyl2(p5,vec3(0,0,-2),vec3(0,0,7),1.7);\n    return Union(c1,Union(c2,Union(c3,Union(c4,c5))));\n}\n// mur \nfloat mur(vec3 p)\n{\n    float e = col(p);\n     float c = colone(p);\n     return Union(e,c);\n}\n// temple\nfloat temple(vec3 p)\n{\n    float b = base(p);\n    float s = sommet(p);\n    float mur = mur(p);\n    return Union(b,Union(s,mur));\n}\n// p : point\nfloat object(vec3 p)\n{\n       \n        float T = temple(p);\n     \n       \n  float v = \n  Union(T,\n      Intersection(\n            Plane(p,vec3(0.0,0.0,1.0),vec3(0.0,0.0,-4.0)),\n            Sphere(p,vec3(0.0,0.0,-4.0),25.0))\n     );\n\n  return v;\n}\n\n// Analysis of the scalar field\n\n// Calculate object normal\n\n\n// p : point\nvec3 ObjectNormal(vec3 p)\n{\n  const float eps = 0.001;\n  vec3 n;\n  float v = object(p);\n  n.x = object( vec3(p.x+eps, p.y, p.z) ) - v;\n  n.y = object( vec3(p.x, p.y+eps, p.z) ) - v;\n  n.z = object( vec3(p.x, p.y, p.z+eps) ) - v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\n// o : ray origin\n// u : ray direction\n// e : Maximum distance\n// h : hit\n// s : Number of steps\nfloat SphereTrace(vec3 o, vec3 u, float e,out bool h,out int s)\n{\n  h = false;\n\n  // Start at the origin\n  float t=0.0;\n\n  for(int i=0; i<Steps; i++)\n  {\n    s=i;\n    vec3 p = o+t*u;\n    float v = object(p);\n    // Hit object\n      if (v < 0.0)\n      {\n          h = true;\n          break;\n      }\n      // Move along ray\n      t += max(Epsilon,v);\n      // Escape marched too far away\n      if (t>e)\n      {\n          break;\n      }\n  }\n  return t;\n}\n\n// Lighting\n\n// Ambient occlusion\n// p : Point\n// n : Normal\n// r : Radius for ambient occlusion\n// a : Number of smaples\nfloat AmbientOcclusion(vec3 p,vec3 n, float r, int a)\n{\n    if (a==0) { return 1.0; }\n   \nfloat ao=0.0;\n   \n    for (int i=0;i<a;i++)\n    {\n  vec3 d = Cosine(581.123*float(i) , n);\n\n        int s;\n        bool h;\n        float t=SphereTrace(p,d,r,h,s);\n        if (!h) {ao+=1.0;}\n    }\n   \n    ao/=float(a);\nreturn ao;\n}\n\n// Background color\n// d : Ray direction\nvec3 background(vec3 d)\n{\n  return mix(vec3(0.45,0.55,0.99),vec3(0.65,0.69,0.99), d.z*0.5+0.5);\n}\n\n// Shadowing\n// p : Point\n// n : Normal\n// l : Light direction\nfloat Shadow(vec3 p,vec3 n,vec3 l)\n{\n    bool h;\n    int s;\n    float t = SphereTrace(p+0.1*n,l,100.0,h,s);\n    if (!h)\n    {\n      return 1.0;\n    }\n    return 0.0;\n}\n\n// Shading and lighting\n// p : Point\n// n : Normal at point\n// e : Eye direction\nvec3 Shade(vec3 p, vec3 n, vec3 e)\n{\n     // Point light\n    const vec3 lp = vec3(5.0, 10.0, 25.0);\n   \n    // Light direction to point light\n    vec3 l = normalize(lp - p);\n\n    // Ambient color\n    vec3 ambient = 0.25+0.25*background(n);\n   \n    // Ambient occlusion\n    ambient += 0.15 * AmbientOcclusion(p+0.1*n,n,5.0,0) * vec3(1.0,1.0,1.0);\n   \n    // Shadow computation\n    float shadow = Shadow(p,n,l);\n   \n    // Phong diffuse\n    vec3 diffuse = 0.35  * clamp(dot(n, l),0.0,1.0) * vec3(1.0,1.0,1.0);\n\n    // Specular\n    vec3 r = reflect(e,n);\n    vec3 specular = 0.15 * pow(clamp(dot(r,l),0.0,1.0),30.0) * vec3(1.0,1.0,1.0);\n    vec3 c = ambient + shadow * (diffuse + specular);\n    return c;\n}\n\n// Shading according to the number of steps in sphere tracing\n// n : Number of steps\nvec3 ShadeSteps(int n)\n{\n   float t = float(n)/(float(Steps-1));\n   return 0.5+mix(vec3(0.05,0.05,0.5),vec3(0.65,0.39,0.65),t);\n}\n\n// Picture in picture\n// pixel : Pixel\n// pip : Boolean, true if pixel was in sub-picture zone\nvec2 Pip(in vec2 pixel, out bool pip)\n{\n    // Pixel coordinates\n    vec2 p = (-iResolution.xy + 2.0*pixel)/iResolution.y;\n   if (pip==true)\n   {    \n    const float fraction=1.0/4.0;\n    // Recompute pixel coordinates in sub-picture\n    if ((pixel.x<iResolution.x*fraction) && (pixel.y<iResolution.y*fraction))\n    {\n        p = (-iResolution.xy*fraction + 2.0*pixel)/(iResolution.y*fraction);\n        pip = true;\n    }\n       else\n       {\n           pip = false;\n       }\n   }\n   return p;\n}\n\n\n// Image\nvoid mainImage( out vec4 color, in vec2 pxy )\n{\n    // Picture in picture on\n    bool pip=true;\n   \n   // Pixel\n     vec2 pixel=Pip(pxy, pip);\n   \n    // Mouse\n    vec2 m=iMouse.xy/iResolution.xy;\n\n    // Camera\n    vec3 ro,rd;\n    Ray(m,pixel,ro,rd);\n\n  // Trace ray\n\n  // Hit and number of steps\n  bool hit;\n  int s;\n\n  float t = SphereTrace(ro, rd, 100.0,hit, s);\n \n    // Position\n    vec3 pt = ro + t * rd;\n   \n  // Shade background\n  vec3 rgb = background(rd);\n\n  if (hit)\n  {\n    // Compute normal\n    vec3 n = ObjectNormal(pt);\n\n    // Shade object with light\n    rgb = Shade(pt, n, rd);\n  }\n\n  // Uncomment this line to shade image with false colors representing the number of steps\n  if (pip==true)\n  {\n      rgb = ShadeSteps(s);\n  }\n\n\n  color=vec4(rgb, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Modeling\n// Eric Galin\n\n// Hashing function\n// Returns a random number in [-1,1]\nfloat Hash(float seed)\n{\n    return fract(sin(seed)*43758.5453 );\n}\n\n// Cosine direction \n// seed : Random seed\n//    n : Normal\nvec3 Cosine( float seed, vec3 n)\n{\n    float u = Hash( 78.233 + seed);\n    float v = Hash( 10.873 + seed);\n\n    // Method by fizzer: http://www.amietia.com/lambertnotangent.html\n    float a = 6.2831853 * v;\n    u = 2.0 * u - 1.0;\n    return normalize( n + vec3(sqrt(1.0-u*u) * vec2(cos(a), sin(a)), u) );\n}\n\n// Rotation matrix around z axis\n// a : Angle\nmat3 Rz(float a)\n{\n    float sa = sin(a); float ca = cos(a); \n    return mat3(ca,sa,0.0,    -sa,ca,0.0,  0.0,0.0,1.0);\n}\n\n// Compute the ray\n//      m : Mouse position\n//      p : Pixel\n// ro, rd : Ray origin and direction\nvoid Ray(vec2 m, vec2 p,out vec3 ro,out vec3 rd)\n{\n    float a = 3.0*3.14*m.x;\n   \tfloat le = 3.5;\n    \n    // Origin\n    ro=vec3(50.0,0.0,15.0);\n    ro*=Rz(a); \n\n    // Target\n    vec3 ta = vec3(0.0,0.0,1.0);\n    \n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,0.0,1.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\trd = normalize( p.x*uu + p.y*vv + le*ww );\n}","name":"Common","description":"","type":"common"}]}