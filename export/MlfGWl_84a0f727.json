{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"// By triclops200 (https://www.shadertoy.com/view/XtlGDS), trivially modfied by Orihaus\n\nfloat hash( in vec2 p )\n{\n\tfloat h = dot( p, vec2( 127.1,311.7 ) );\t\n    return fract( sin( h ) * 43758.5453123 );\n}\n\nfloat snoise( vec2 p ) {\n\tvec2 f = fract(p);\n\tp = floor(p);\n\tfloat v = p.x+p.y*1000.0;\n\tvec4 r = vec4(v, v+1.0, v+1000.0, v+1001.0);\n\tr = fract(100000.0*sin(r*.001));\n\tf = f*f*(3.0-2.0*f);\n\treturn 2.0*(mix(mix(r.x, r.y, f.x), mix(r.z, r.w, f.x), f.y))-1.0;\n}\n\nconst mat2 m3 = mat2( 0.80,  0.60, -0.60,  0.80 );\nfloat fbm2( vec2 p )\n{\n    float f = 0.5 * snoise( p ); p = m3 * p * 1.2;\n    return f + 0.25 * snoise( p );\n}\n\nvec2 points[12];\nfloat abs_sum(vec2 xs){\n\treturn abs(xs[0]) + abs(xs[1]);\n}\n\nvec3 color_from_point(vec2 point){\n\treturn vec3( abs( snoise( point -  iTime * 0.1 ) ) );\n}\n\nvec3 minimumDistColor(vec2 point){\n\tvec2 del = points[0] - point;\n\tfloat min_dist_sq = abs_sum(del);\n\tvec3 min_color = color_from_point(points[0]);\n\tif(min_dist_sq<0.005) return color_from_point(vec2(0.5,0.2))-vec3(0.2,0.2,0.2);\n\tfor(int i=0;i<12;i++){\n\t\tdel = points[i]-point;\n\t\tfloat d = abs_sum(del);\n\t\tif(d < 0.005) return color_from_point(vec2(0.5,0.2))-vec3(0.2,0.2,0.2);\n\t\tif(d < min_dist_sq){\n\t\t\tmin_color = color_from_point(points[i]);\n\t\t\tmin_dist_sq = d;\n\t\t}\n\t}\n    \n    float f = fwidth( point.x ) * floor( fract( iTime - min_dist_sq * 120.0 ) * 2.0 ) * 2000.0;\n\treturn min_color * f;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tpoints[0] = vec2(0.045+sin(iTime)*0.064,0.3+cos(iTime*3.1)*0.05);\n\tpoints[1] = vec2(0.92+sin(iTime*1.1)*0.032,0.14+cos(iTime*3.3+.2)*0.05);\n\tpoints[2] = vec2(0.23+sin(iTime*0.2)*0.076,0.5+cos(iTime*2.1+.2)*0.05);\n\tpoints[3] = vec2(0.85+sin(iTime*0.4)*0.02,0.4+cos(iTime*2.7+.7)*0.05);\n\tpoints[4] = vec2(0.27+sin(iTime*2.4)*0.0613,0.145+cos(iTime*1.5+.7)*0.09);\n\tpoints[5] = vec2(0.058+sin(iTime*0.6)*0.013,0.15+cos(iTime*0.7+.7)*0.09);\n\tpoints[6] = vec2(0.46+sin(iTime)*0.1,0.13+cos(iTime*3.1)*0.05);\n\tpoints[7] = vec2(0.94+sin(iTime*1.1)*0.04,0.21+cos(iTime*3.3+.2)*0.05);\n\tpoints[8] = vec2(0.122+sin(iTime*0.2)*0.31,0.54+cos(iTime*2.1+.2)*0.05);\n\tpoints[9] = vec2(0.81+sin(iTime*0.4)*0.21,0.4+cos(iTime*2.7+.7)*0.05);\n\tpoints[10] = vec2(0.38+sin(iTime*2.4)*0.043,0.15+cos(iTime*1.5+.7)*0.09);\n\tpoints[11] = vec2(0.56+sin(iTime*0.6)*0.16,0.15+cos(iTime*0.7+.7)*0.09);\n\tfloat u = fragCoord.x / iResolution.x;\n\tfloat v = fragCoord.y / iResolution.x;\n\tvec2 uv = vec2(u,v);\n\n\tfragColor = vec4(minimumDistColor(uv),1.0);\n\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MlfGWl","date":"1426077644","viewed":230,"name":"Numerical Analysis ","username":"Orihaus","description":"By triclops200, trivially modfied by Orihaus\n\nhttp://butdoesitfloat.com/Numerical-analysis-is-very-much-an-experimental-science","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""}}