{"ver":"0.1","info":{"id":"Mtyyzh","date":"1535026585","viewed":310,"name":"GPU hacks #02 - D3DX9 Assembler","username":"PrzemyslawZaworski","description":"Welcome. ShaderToy is a great place to learn WebGL shaders. Now it's time to extend our skills with GPU programming. Every episode will provide full source code with tiny framework in different language. ","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["tutorial","asm","assembler","directx"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nWritten by Przemyslaw Zaworski, MIT licence\nTools:\n - MinGW for Windows\n - DirectX SDK\nSave code as uv.cpp and compile from command line:\n\tg++ -s -o uv.exe uv.cpp  \"-IC:\\Program Files (x86)\\Microsoft DirectX SDK (June 2010)\\Include\" \"-LC:\\Program Files (x86)\\Microsoft DirectX SDK (June 2010)\\Lib\\x86\" -ld3d9 -ld3dx9\nIt will produce standalone executable, which content will be similar to the default ShaderToy's new shader.\nIn HLSL it seems like:\n\nuniform extern float iTime : register(c0);\nfloat4 main (float2 fragCoord : VPOS) : COLOR\n{\n\tfloat2 uv = fragCoord/float2(1920,1080);\n\tuv.y = 1.0 - uv.y;\n\treturn float4(0.5 + 0.5*cos(iTime + uv.xyx + float3(0,2,4)),1.0);\n}\n*/\n\n/*\n#include <d3dx9.h>\n\nstatic const char PixelShaderCode[] = \\\n\t\"ps_3_0\\n\"\n\t\"def c1, 0.0416666418, 1, 0, 0 \\n\"\n\t\"def c2, 0.00092592591, 0.00052083336, 0.159154937, 0.5 \\n\"\n\t\"def c3, 0, 3, 4, -0.00138883968 \\n\"\n\t\"def c4, 6.28318548, -3.14159274, 0, 0 \\n\"\n\t\"dcl vPos.xy \\n\"\n\t\"mov r0.xy, c2 \\n\"\n\t\"mad r1.y, vPos.y, -r0.x, c0.x \\n\"\n\t\"mad r1.xz, vPos.x, r0.y, c0.x \\n\"\n\t\"add r0.xyz, r1, c3 \\n\"\n\t\"mad r0.xyz, r0, c2.z, c2.w \\n\"\n\t\"frc r0.xyz, r0 \\n\"\n\t\"mad r0.xyz, r0, c4.x, c4.y \\n\"\n\t\"mul r0.xyz, r0, r0 \\n\"\n\t\"mad r1.xyz, r0, c4.z, c4.w \\n\"\n\t\"mad r1.xyz, r0, r1, c3.w \\n\"\n\t\"mad r1.xyz, r0, r1, c1.x \\n\"\n\t\"mad r1.xyz, r0, r1, -c2.w \\n\"\n\t\"mad r0.xyz, r0, r1, c1.y \\n\"\n\t\"mad oC0.xyz, r0, c2.w, c2.w \\n\"\n\t\"mov oC0.w, c1.y \\n\";\n\nint main()\n{\n\tShowCursor(0);\n\tLPDIRECT3DPIXELSHADER9 PixelShader;\n\tLPD3DXBUFFER PSBuffer;\t\n\tLPDIRECT3DDEVICE9 d3dDevice;\t\n\tLPDIRECT3D9 d3d = Direct3DCreate9( D3D_SDK_VERSION );\n\tD3DPRESENT_PARAMETERS W = {1920,1080,D3DFMT_A8R8G8B8,1,D3DMULTISAMPLE_NONE,0,_D3DSWAPEFFECT(1),0,0,1,D3DFMT_D24S8,0,0,0x80000000L};\t\n\tW.hDeviceWindow = CreateWindow(\"static\",0,WS_POPUP|WS_VISIBLE,0,0,1920,1080,0,0,0,0);\n\td3d->CreateDevice(0,D3DDEVTYPE_HAL,W.hDeviceWindow,0x00000040L,&W,&d3dDevice);  \n\tD3DXAssembleShader(PixelShaderCode,sizeof(PixelShaderCode), 0,0, (1 << 16), &PSBuffer, 0);\n\td3dDevice->CreatePixelShader((DWORD*)PSBuffer->GetBufferPointer(), &PixelShader);\n\td3dDevice->SetPixelShader(PixelShader);\n\td3dDevice->SetFVF(D3DFVF_XYZ);\n\tfloat quad[20] = {1,-1,0,1,0,-1,-1,0,0,0,1,1,0,1,1,-1,1,0,0,1}, S = GetTickCount()*0.001f;\n\tdo \n\t{\n\t\td3dDevice->BeginScene();\n\t\tfloat timer[1] = {GetTickCount()*0.001f-S};\n\t\td3dDevice->SetPixelShaderConstantF(0, timer, 1);\t\t\n\t\td3dDevice->DrawPrimitiveUP(D3DPT_TRIANGLESTRIP, 2, quad, 5*sizeof(float));\n\t\td3dDevice->EndScene();\n\t\td3dDevice->Present(NULL, NULL, NULL, NULL);\t\t\n\t}\n\twhile ( !GetAsyncKeyState(VK_ESCAPE) );\n\treturn 0;\n}\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}