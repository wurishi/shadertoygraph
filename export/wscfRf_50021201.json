{"ver":"0.1","info":{"id":"wscfRf","date":"1605668705","viewed":132,"name":"Ray Marching Template","username":"timeiskey","description":"tutorialing","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","tutorial","template"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MIN_SURFACE_DIST 0.001\n#define MAX_DIST 100.0\n\nfloat get_dist(vec3 p)\n{\n    //float t = 5.0;\n    vec3 s = vec3(0, 1, 3);\n     \n    float r = 1.0;\n\tfloat sd = length(p - s) - r;\n    return sd;\n    float pd = p.y;\n    return min(sd, pd);\n}\n\nfloat get_dist(vec2 p)\n{\n    vec3 c = vec3(0, 1);\n     \n    float r = 0.5;\n\tfloat cd = length(p - c) - r;\n    return sd;\n}\n\nvec3 get_normal(vec3 p)\n{\n\tvec2 e = vec2(0.01, 0);\n    float d = get_dist(p);\n    vec3 n = vec3(\n        d-get_dist(p-e.xyy),\n        d-get_dist(p-e.yxy),\n        d-get_dist(p-e.yyx)\n    );\n    return normalize(n);\n}\n\nfloat march(vec3 ro, vec3 rd)\n{\n    float total_dist = 0.0;\n    for(int i = 0; i < MAX_STEPS; i++)\n    {\n    \tvec3 p = ro + rd * total_dist;\n        float dist = get_dist(p);\n        total_dist += dist;\n        if(dist < MIN_SURFACE_DIST || total_dist > MAX_DIST)\n        {\tbreak;\t}\n    }\n    return total_dist;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //\tstart it off\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n\tvec3 col = vec3(0);\n\n    // light\n    vec3 light_center = vec3(0, 10, 6);\n    vec3 light_offset = vec3(\n    \t(sin(iTime) - 0.5) * 2.0,\n        0.0,\n        (cos(iTime) - 0.5) * 2.0);\n    vec3 light = light_center + light_offset * 5.0;\n    \n    //\tfire a ray for each pixel\n    vec3 ro = vec3(0, 1, 0);\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1));\n    \n    //\tmarch the ray\n\tfloat total_dist = march(ro, rd);\n    vec3 hit_pos = ro + rd * total_dist;\n    \n    //\tlighting\n    vec3 to_cam = normalize(ro - hit_pos);\n    vec3 to_light = normalize(light - hit_pos);\n    vec3 normal = get_normal(hit_pos);\n\n    float b = max(dot(normal, to_light), 0.0);\n    \n    \n    col = vec3(b);\n\n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}