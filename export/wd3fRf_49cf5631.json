{"ver":"0.1","info":{"id":"wd3fRf","date":"1605959325","viewed":103,"name":"hoeled_kifs_fractal_1","username":"hoeled","description":"Playing with this https://www.youtube.com/watch?v=il_Qg9AqQkE and used one of my other shaders as a texture.","likes":5,"published":1,"flags":32,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 N(float angle) {\n\treturn vec2(sin(angle), cos(angle));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 mouse = iMouse.xy/iResolution.xy;\n\tuv *= 2.;\n    vec3 col = vec3(0);\n\n    uv.x = abs(uv.x);\n    uv.y += tan(((5./6.)*3.1415))*.5;\n    \n    vec2 n = N((5./6.)*3.1415); // 0 -> sin = 0, cos = 1\n    float d = dot(uv-vec2(.5, 0), n);\n    uv -= n*max(0., d)*2.;\n    \n    n = N((2./3.)*3.1415);\n    float scale = 1.;\n    uv.x += .5;\n    for(int i=0; i<3; i++) {\n    \tuv *= 3.;\n        scale *= 3.;\n    \tuv.x -= 1.5;\n    \n    \tuv.x = abs(uv.x);\n    \tuv.x -= .9;\n    \tuv -= n*min(0., dot(uv, n))*1.;\n    }    \n    \n    d = length(uv - vec2(clamp(uv.x, -1., 1.), 0));\n    //col += smoothstep(1./iResolution.y, .0, d/scale) * .2;\n    //col += vec3(uv.x);\n    \n    uv /= scale;\n    col += texture(iChannel1, uv*4.-iTime*.05*(1.)).rgb;\n    //col.rg += texture(iChannel1, uv*4.-iTime*.04*(1.)).rg;\n    //col.b += texture(iChannel1, uv*4.-iTime*.03*(1.)).b;\n    col.r += texture(iChannel1, uv*4.-iTime*.01*(1.)).r;\n    \n    for(int i=0; i<1; i++) {\n    \t//col.r += texture(iChannel1, uv*4.-iTime*(1.+float(i)/60000.)*(1.)).r;\n    }\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float Random(vec2 p) {\n\tp = fract(p*vec2(123.34, 456.21));\n    p += dot(p, p+45.32);\n    return fract(p.x*p.y);\n}\n\nfloat T(float a) {\n    float random = Random(vec2(a*532.43, a*784.34));\n    float interval = clamp(random, 0.3, 0.6);\n\treturn clamp((sin(iTime*a*1.4*random)+1.)/2., 0., 1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec3 col = vec3(0.);\n    \n    uv *= .85;\n    \n    // scaling\n    uv.x *= 4.5;\n    uv.y -= .5;\n        \n    // bars\n    for(float i=.0; i<64.; i=i+2.){\n        // thickness\n    \tfloat width = 0.08+sin(i)*(sin(iTime*Random(vec2(i, 654.543)))*.4+.5);  \n    \tfloat edge = 0.01*(sin(iTime*Random(vec2(i, 654.543)))*.4+.5);\n        \n        //bar\n        float m1 = smoothstep(width+edge, width, abs((uv.x-3.2+(i/10.))));\n        \n        col += m1 * T(2.+(i*.02));\n        col += m1*.1;\n        \n        //float m2 = smoothstep(width/10.+edge/10., width/10., abs((uv.y-.2+(i/20.))));\n        //col -= m2*.1;\n    }\n    //col = clamp(col, 0., 2.);\n    \n    // colors\n    col.r -= T(.2)*1.5;\n    col.g -= T(.6)*1.5;\n    col.b -= T(1.4)*1.5;\n    \n    col.rgb += T(uv.x)*.03;\n    \n    col -= vec3(.4);\n    \n\t// vignette\n    col *= smoothstep(-.95, .0, uv.y);\n    col *= smoothstep(0., -.95, uv.y);\n    col *= smoothstep(-5., 1., uv.x);\n    col *= smoothstep(5., -1., uv.x);\n    col += col*2.;\n    \n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}