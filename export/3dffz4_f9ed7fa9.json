{"ver":"0.1","info":{"id":"3dffz4","date":"1587734893","viewed":287,"name":"[TWITCH] Potichat","username":"Flopine","description":"A retake on my shader for the Semifinals of Revision 2020! I made it on Twitch and you can see the replay here: \nhttps://www.twitch.tv/flopine/videos","likes":14,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","cute","cat","hearts","npr"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, Coyhot, Alkama and YX for teaching me\n// Thanks LJ for giving me the love of shadercoding :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  https://twitter.com/CookieDemoparty\n\n#define time iTime\n#define PI 3.141592\n#define anim(t) (abs(sin(t))*0.3-1.2);\n\nmat2 rot (float a)\n{return mat2 (cos(a),sin(a),-sin(a),cos(a));}\n\nfloat hash21(vec2 x)\n{return fract(sin(dot(x,vec2(12.1,23.4)))*1245.5);}\n\nfloat hash11(float x)\n{return fract(sin(x)*124.4);}\n\nfloat vcaps( vec3 p, float h, float r )\n{\n    p.y -= clamp( p.y, 0.0, h );\n    return length( p ) - r;\n}\n\n// french for jar\nfloat pot (vec3 p)\n{\n    float radius = (p.y>0.7) ? 0.6: 0.5+sin((p.y+0.8)*2.)*0.3;\n    return max(p.y-.9,abs(max(length(p.xz)-radius, abs(p.y)-1.))-0.05);\n}\n\nfloat yeux;\nfloat g1 = 0.;\n// french for cat\nfloat chat (vec3 p)\n{ \n    p.y -= 1.1;\n    float sy = anim((time+p.y*0.07)*6.);\n    float sxz = 1./sy;\n    vec3 psize = vec3(sxz,sy,sxz);\n    p *= -psize;\n\n    vec3 pp = p;\n    float sphe = length(p)-.5;\n\n    p = pp;\n    p.z += 0.45;\n    p.y -= 0.2;\n    p.x = abs(p.x)-0.15;  \n    // french for eyes\n    yeux = length(p)-0.05;  \n    g1 += 0.01/(0.01+yeux*yeux);\n\n    p = pp;\n    p.y -= 0.35;\n    p.z += 0.2;\n    p.x = abs(p.x)-0.3;  \n    p.xy *= rot(-PI/4.);\n    float or =  max(-(p.z-0.04),abs(max(-p.y,dot(p,normalize(sign(p)))-0.12))-0.002);\n\n    return min(sphe, min(yeux,or));\n}\n\n// french for paws\nfloat pattes (vec3 p)\n{  \n    p.z += 0.7;\n    p.y -= 0.8;\n    p.x = abs(p.x)-0.2;\n    return vcaps(p,0.15, 0.08);\n}\n\nfloat papat, chacha, popo;\nfloat idchat;\nfloat SDF (vec3 p)\n{\n    \n    float per = 4.;\n    float dt = time*0.5;\n    p.x += per*(floor(dt)+pow(fract(dt),12.));\n    idchat = floor((p.x-per*0.5)/per);\n    p.x = mod(p.x-per*0.5, per)-per*0.5;\n\n    papat = pattes(p);\n    chacha = chat(p);\n    popo = pot(p);\n    return min(min(papat,chacha),popo);\n}\n\nvec3 palette (float t, vec3 c, vec3 d)\n{return vec3(0.5)+vec3(0.5)*cos(2.*PI*(c*t+d));}\n\nvec3 text_pot (vec2 uv, float detail, float cid)\n{\n    uv.y *= detail;\n    float id = floor(uv.y);\n    vec3 col1 = vec3(1.,.9,hash11(idchat*0.1));\n    vec3 col2 = palette(id, vec3(0.1), vec3(cid*0.1,cid*0.8,cid*0.5));\n    return clamp((abs(uv.y) > 10.) ? col1 : col2,0.,1.);\n}\n\nfloat background(vec2 uv)\n{\n    uv *= 5.;\n    vec2 id = floor(uv);\n    uv = fract(uv)-0.5;\n    uv.x = abs(uv.x);\n    uv *= rot(PI/4.);\n    float r = 0.03+sin(length(id*2.)-time)*0.05+0.08;\n    return smoothstep(r,r*1.1, length(uv*vec2(0.5,1.)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n    uv -= 0.5;\n    uv /= vec2(iResolution.y / iResolution.x, 1);\n\n    float dither = hash21(uv);\n\n    vec3 ro = vec3(0.01,1.6,-4.),\n        rd = normalize(vec3(uv+vec2(0.,-0.3),1.)),\n        p = ro,\n        col = clamp(mix(vec3(1.,0.,0.),vec3(0.95),background(uv)),0.,1.);\n\n    float shad,d;\n    bool hit = false;\n\n    for (float i=0.; i<64.; i++)\n    {\n        d = SDF(p);\n        if (d<0.01)\n        {\n            hit = true;\n            shad = i/64.;\n            break;\n        }\n        d *= 0.7+dither*0.1;\n        p+=d*rd;\n    }\n    if (hit)\n    {\n        vec2 cuv = vec2(atan(p.z,p.x), p.y);\n        if (d == papat || d == chacha) col = palette(abs(idchat), vec3(0.1),vec3(0.,0.,0.1));\n        if (d == popo) col = text_pot(cuv,15., abs(idchat));\n        if (d == yeux) col = vec3(0.9);\n\n        col *= (1.-shad); \n    }\n    col += g1*0.05;\n    \n    // vignetting (from iq)\n    vec2 q = fragCoord.xy / iResolution.xy;\n    col *= .5 + 0.5 * pow(16. * q.x * q.y * (1. - q.x) * (1. - q.y), 0.1);\n    \n    fragColor = vec4(sqrt(col),1.);\n}","name":"Image","description":"","type":"image"}]}