{"ver":"0.1","info":{"id":"ftV3D1","date":"1637686187","viewed":309,"name":"Fractal Brownian Motion Portals","username":"gunthern","description":"Fractal Brownian Motion Portals","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["fractalbrownianmotion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#ifdef GL_ES\nprecision mediump float;\n#endif\n\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\n// Based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\nfloat box (in vec2 _size, in vec2 _uv){\n    _size = vec2(0.5) - _size*.5;\n    vec2 st = smoothstep (_size, _size+vec2(0.24), _uv);\n    st *= smoothstep (_size, _size+vec2(0.24),vec2(1.0)-_uv);\n    float box = st.x * st.y;\n\treturn box;\n}\n\n// Author @patriciogv - 2015 - FBM function\n// http://patriciogonzalezvivo.com\n#define NUM_OCTAVES 10\nfloat fbm ( in vec2 _st) {\n    float v = 0.0;\n    float a = 0.55;\n    vec2 shift = vec2(10.0);\n    // Rotate to reduce axial bias\n    mat2 rot = mat2(cos(0.001 * iTime), tan(0.005),\n                    -sin(0.005), cos(0.001 * iTime));\n    for (int i = 0; i < NUM_OCTAVES; ++i) {\n        v += a * noise(_st);\n        _st = rot * _st * 2.0 + shift;\n        a *= 0.5;\n    }\n    return v;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec2 uva = vec2(fbm(uv));\n    float grid = sin(uva.x * 100.) * sin(uva.y * 100.);\n    grid = step(.995,grid);\n\n    vec3 color = vec3(0.0);\n    vec2 q = vec2(0.);\n    q.x = fbm( uv + 0.110*(iTime+100.));\n    q.y = fbm( uv + vec2(1.0));\n\n    vec2 r = vec2(0.);\n    r.x = fbm( uv + 20.0*q + vec2(1.7,9.2)+ 0.15*(iTime+100.));\n    r.y = fbm( uv + 10.0*q + vec2(8.3,2.8)+ 0.126*(iTime+100.));\n\n    float f = fbm(uv+r*r);\n    \n    color = vec3(grid) * 0.25;\n\n    color -= mix(vec3(0.801961 * abs(cos(iTime * .3)),0.619608 * abs(cos(iTime * .5)),0.666667),\n                vec3(0.966667 * abs(sin(iTime * .4)),0.966667 * abs(cos(iTime * .2)),0.998039),\n                clamp((f*f)*4.0,0.0,1.0));\n\n    color = mix(color,\n                vec3(0,0,0.164706),\n                clamp(length(q),0.0,1.0));\n\n    color = mix(color,\n                vec3(0.966667,1,1),\n                clamp(length(r.x),0.0,1.0));\n                \n    color /= box(vec2(.2  * abs(sin(iTime * .3)) + .5,1.), uv - vec2(.395, 0.)) * vec3(.7,1.,1.) + \n             box(vec2(.2  * abs(sin(iTime * .2)) + .5,1.), uv + vec2(.2, 0.)) * vec3(1.,.8,.9) +\n             box(vec2(.2 * abs(sin(iTime * .1)) + .5,1.), uv - vec2(.98, 0.))  * vec3(1.,1.,1.);\n\n    // Output to screen\n    fragColor = vec4((f*f*f+.6*f*f+.5*f)*color,1.);\n}","name":"Image","description":"","type":"image"}]}