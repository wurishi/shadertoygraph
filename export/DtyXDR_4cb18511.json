{"ver":"0.1","info":{"id":"DtyXDR","date":"1686020416","viewed":4897,"name":"Diamonds and Diagonals","username":"blackle","description":"shader jam with jneen","likes":96,"published":1,"flags":0,"usePreview":0,"tags":["shader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//CC0 1.0 Universal https://creativecommons.org/publicdomain/zero/1.0/\n//To the extent possible under law, Blackle Mori has waived all copyright and related or neighboring rights to this work.\n\nvec3 erot(vec3 p, vec3 ax, float ro) {\n  return mix(ax*dot(p,ax),p,cos(ro)) + cross(ax,p)*sin(ro);\n}\n\nfloat fact(vec3 p, float s) {\n  return dot(asin(sin(p)*s),vec3(1))/sqrt(3.);\n}\n\nint id = 0;\nfloat scene(vec3 p) {\n  float a1 = fact(erot(p,vec3(1,0,0),2.),.9);\n  float a2 = fact(erot(p,vec3(0,1,0),1.5),.9);\n  float a3 = fact(erot(p,vec3(0,0,1),2.),.9);\n  float a4 = fact(erot(p,normalize(vec3(0,1,1)),.59),.999);\n  float s1 = (a1+a2+a3)/2. - 1. + length(p.yz)*.1;\n  s1 = min(s1,length(p.yz)-1.);\n  float s2 = a4-1.5;\n  if (s1 < s2) id = 0;\n  else id = 1;\n  return id == 0 ? s2 : s1;\n}\n\nvec3 norm(vec3 p) {\n  mat3 k = mat3(p,p,p) - mat3(0.01);\n  return normalize(scene(p) - vec3(scene(k[0]),scene(k[1]),scene(k[2])));\n}\n\nvec3 randomdir(int stage) {\n  vec3 dotdir = vec3(1);\n  if (stage%5==0) dotdir.x *= -1.;\n  if (stage%5==1) dotdir.y *= -1.;\n  if (stage%5==2) dotdir.z *= -1.;\n  if (stage%5==3) dotdir.x *= 0.;\n  if (stage%6==0) dotdir.xyz = dotdir.yzx;\n  \n  return dotdir;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n  \n  float t = iTime;\n  t += length(uv)*2.5*pow(sin(t*.4)*.5+.5,8.);\n  \n  int stage0 = int(t+.5);\n  float swipedir = ((stage0/2)%2==0?-1.:1.)*(stage0%2==0?uv.x:uv.y);\n  \n  int stage = int(t+swipedir*.25);\n  float sdiff = t - float(stage);\n  int stage2 = int(t*3.5);\n\n  vec3 cam = normalize(vec3(.6+sin(float(stage)*3.1415 + 1.5*smoothstep(-.5,.5,cos(sdiff*3.)))*.3,uv));\n  vec3 init = vec3(cos(t*.3)/.3*.5,0,0);\n  \n  float rdir = (stage%3==0?-1.:1.);\n  if (stage%5 >1)rdir*=0.;\n  float zrot = t*.2*rdir + float(stage);\n  float yrot = sin(t*.0555*rdir)*.3;\n  float xrot = smoothstep(-.65,.65,cos(sdiff*3.))*rdir;\n  cam = erot(cam,vec3(1,0,0),xrot);\n  cam = erot(cam,vec3(0,1,0),yrot);\n  cam = erot(cam,vec3(0,0,1),zrot);\n  \n  vec3 p = init;\n  bool hit = false;\n  for ( int i = 0; i < 150 && !hit; i++) {\n    if (distance(p,init) > 400.) break;\n    float d = scene(p);\n    if (d*d < 0.00001) hit = true;\n    p += cam*d;\n  }\n  int lid = id;\n  float fog = smoothstep(0., (stage%7-stage%5<0)?20.:100., distance(p,init));\n  vec3 n = norm(p);\n  vec3 r = reflect(cam,n);\n  float ao = 1.0;\n  ao *= smoothstep(-0.5,.5,scene(p+n*.5));\n  ao *= smoothstep(-1.,1.,scene(p+n*1.));\n  ao *= smoothstep(-2.,2.,scene(p+n*2.));\n  float fres = 1.-abs(dot(cam,n))*.98;\n  float rfact = length(sin(r*3.5)*.5+.5)/sqrt(3.);\n  float dfact = length(sin(n*2.5)*.4+.6)/sqrt(3.);\n  rfact = rfact*.2 + pow(rfact,8.)*6.;\n  \n  \n  float stripes = asin(sin(dot(randomdir(stage),p)*3.+float(t)));\n  if (stage%4==0) stripes *= asin(sin(dot(randomdir(stage+7),p)*3.+float(t)));\n  vec3 dcolor = vec3(0.85,0.4,0.05);\n  if (stage%3==0) dcolor = vec3(0.85,0.1,0.05);\n  if (stage%3==1) dcolor = vec3(0.85,0.8,0.05);\n  if (0 == lid) dcolor = dcolor.zxy;\n  else dcolor*=smoothstep(-0.05,0.05,stripes);\n  \n  \n  vec3 col = (vec3(rfact*fres) + dcolor*dfact)*ao;\n  \n  if (!hit) fog = 1.0;\n  fragColor.xyz = mix(col, vec3(1.1), fog);\n  fragColor.xyz *= 1. - dot(uv,uv)*.8;\n  fragColor.xyz = smoothstep(0.,1.,sqrt(fragColor.xyz));\n  if (stage%4 == 1) fragColor.xyz = 1.-fragColor.xyz;\n  if (stage%4 == 3) fragColor.xyz = 1.-fragColor.xxx;\n  //fragColor.xyz = 1.-fragColor.xyz;\n}","name":"Image","description":"","type":"image"}]}