{"ver":"0.1","info":{"id":"mt3BRB","date":"1701353692","viewed":95,"name":"rotate from vector to vector","username":"jt","description":"From [url=https://en.wikipedia.org/wiki/Rodrigues%27_rotation_formula]Rodrigues' rotation formula[/url]\ncalculate rotation matrix that maps a source vector to a destination vector\n(numerically stable, without trigonometry).\n","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["rotate","vector","rodrigues"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/mt3BRB rotate from vector to vector, 2023 by jt\n\n// From https://en.wikipedia.org/wiki/Rodrigues%27_rotation_formula\n// calculate rotation matrix that maps a source vector to a destination vector\n// (numerically stable, without trigonometry)\n\n// The MIT License\n// Copyright (c) 2023 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// https://mathworld.wolfram.com/RodriguesRotationFormula.html\n// https://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToMatrix/index.htm\nmat3 rotation(vec2 cs, vec3 k) // https://www.shadertoy.com/view/mt3BRB rotate from vector to vector, by rodrigues' rotation (jt)\n{\n    cs = normalize(cs);\n    k = normalize(k);\n    float t = 1.0 - cs.x;\n    return\n        mat3\n        (\n            vec3(t*k.x*k.x+cs.x,t*k.x*k.y+k.z*cs.y,t*k.x*k.z-k.y*cs.y),\n            vec3(t*k.x*k.y-k.z*cs.y,t*k.y*k.y+cs.x,t*k.y*k.z+k.x*cs.y),\n            vec3(t*k.x*k.z+k.y*cs.y,t*k.y*k.z-k.x*cs.y,t*k.z*k.z+cs.x)\n        );\n}\n\nmat3 rotation(vec3 src, vec3 dst) // https://www.shadertoy.com/view/mt3BRB rotate from vector to vector, by rodrigues' rotation (jt)\n{\n    src = normalize(src);\n    dst = normalize(dst);\n    float d = dot(src, dst);\n    vec3 k = cross(src, dst);\n    return rotation(vec2(d, length(k)), k);\n}\n\nvec2 polar(float phi)\n{\n    return vec2(cos(phi),sin(phi));\n}\n\nmat3 rotation(float phi, vec3 k)\n{\n    return rotation(polar(phi), k);\n}\n\n#define pi 3.1415926\n\nmat3 yaw_pitch_roll(float yaw, float pitch, float roll)\n{\n    mat3 R = mat3(vec3(cos(yaw), sin(yaw), 0.0), vec3(-sin(yaw), cos(yaw), 0.0), vec3(0.0, 0.0, 1.0));\n    mat3 S = mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, cos(pitch), sin(pitch)), vec3(0.0, -sin(pitch), cos(pitch)));\n    mat3 T = mat3(vec3(cos(roll), 0.0, sin(roll)), vec3(0.0, 1.0, 0.0), vec3(-sin(roll), 0.0, cos(roll)));\n\n    return R * S * T;\n}\n\nfloat checker(vec2 p)\n{\n    return step(0.0, sin(p.x*pi)*sin(p.y*pi));\n}\n\nfloat checker(vec3 p)\n{\n    return step(0.0, sin(p.x*pi)*sin(p.y*pi)*sin(p.z*pi));\n}\n\nvec3 material(vec3 p)\n{\n    //return vec3(1.0); // TODO\n    return mix(vec3(0.25), vec3(0.75), checker(p*2.0+0.5));\n}\n\nfloat halfspace(vec3 p)\n{\n    return p.z + 1.0;\n}\n\nfloat sphere(vec3 p)\n{\n    return length(p) - 1.0;\n}\n\nfloat box(vec3 p) // adapted from https://iquilezles.org/articles/distfunctions/\n{\n    vec3 d = abs(p) - 1.0;\n    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat cylinder(vec3 p) // adapted from https://iquilezles.org/articles/distfunctions/\n{\n    vec2 d = abs(vec2(length(p.xy),p.z)) - vec2(1,1);\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nvec4 combine(vec4 a, vec4 b)\n{\n    return a.w < b.w ? a : b;\n}\n\nvec4 coords(vec3 p)\n{\n    vec3 d =\n        vec3\n        (\n            length(p.yz),\n            length(p.xz),\n            length(p.xy)\n        );\n\n    return d.x < d.y && d.x < d.z ? vec4(1,0,0,d.x) : d.y < d.z ? vec4(0,1,0,d.y) : vec4(0,0,1,d.z);\n}\n\nvec4 map(vec3 p)\n{\n    mat3 R = rotation(vec3(1,1,1),vec3(0,0,1));\n    return combine\n           (\n               combine\n               (\n                   //vec4(1,1,1,box(p)),\n                   vec4(material(p)*0.2,box(p)),\n                   vec4(material(R*p)+0.5,box(R*p))\n               ),\n               //min\n               //(\n                   coords(p)-0.05\n                   //,\n                   //halfspace(p)\n               //)\n           );\n}\n\n#define EPSILON 0.001\n#define DIST_MAX 50.0\n#define ITER_MAX 200u\n\n// https://iquilezles.org/articles/normalsSDF tetrahedron normals\nvec3 normal( vec3 p )\n{\n    const float h = EPSILON;\n    const vec2 k = vec2(1,-1);\n    return normalize( k.xyy*map(p + k.xyy*h).w +\n                      k.yyx*map(p + k.yyx*h).w +\n                      k.yxy*map(p + k.yxy*h).w +\n                      k.xxx*map(p + k.xxx*h).w);\n}\n\nvec4 trace(vec3 ro, vec3 rd, float t0, float t1) // pass on running out of iterations\n{\n    // NOTE: Limited number of iterations to avoid stalling\n    //       when ray passes closely (just above EPSILON)\n    //       in parallel to a surface.\n    uint i;\n    vec4 t;\n    for(t.w = t0, i = 0u; t.w < t1 && i < ITER_MAX; i++)\n    {\n        vec4 h = map(ro + rd * t.w);\n        if(h.w < EPSILON)\n            return vec4(h.xyz,t.w);\n        t.w += h.w;\n    }\n\n    return t; // stop on running out of iterations\n    //return vec4(0,0,0,t1); // pass on running out of iterations\n}\n\n// NOTE: Don't forget to add +normal*EPSILON to the starting position\n//       to avoid artifacts caused by getting stuck in the surface\n//       due to starting at distance < EPSILON from the surface.\n//       (normal could be calculated here but that would most likely be redundant)\nfloat shadow(vec3 ro, vec3 rd, float t0, float t1)\n{\n    return trace(ro, rd, t0, t1).w < t1 ? 0.0 : 1.0;\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat softshadow(vec3 ro, in vec3 rd, float t0, float t1, float k)\n{\n    float res = 1.0;\n    float ph = 1e20;\n    uint i;\n    float t;\n    for(t = t0, i = 0u; t < t1 && i < ITER_MAX; i++)\n    {\n        float h = map(ro + rd*t).w;\n        if( h < EPSILON )\n            return 0.0;\n        float y = h*h/(2.0*ph);\n        float d = sqrt(h*h-y*y);\n        res = min( res, k*d/max(0.0,t-y) );\n        ph = h;\n        t += h;\n    }\n    return res;\n}\n\n// https://www.shadertoy.com/view/Xds3zN raymarching primitives\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.01 + 0.12*float(i)/4.0;\n        float d = map(pos + h*nor).w;\n        occ += (h-d)*sca;\n        sca *= 0.95;\n        if( occ>0.35 ) break;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 ) ;\n}\n\nvoid mainImage(out vec4 fragColor, vec2 I)\n{\n    bool demo = all(lessThan(iMouse.xy, vec2(10.0)));\n    vec2 R = iResolution.xy;\n    I = (2.0 * I - R) / R.y; // concise scaling thanks to Fabrice\n    float yaw = 2.0 * pi * float(iMouse.x) / float(R.x);\n    float pitch = pi - pi / 2.0 * float(iMouse.y) / float(R.y);\n    yaw = !demo ? yaw : 2.0 * pi * fract(iTime * 0.01);\n    pitch = !demo ? pitch : 4.0/3.0 * pi / 2.0;\n\n    vec3 ro = vec3(0.0, 0.0,-7.5);\n    vec3 rd = normalize(vec3(I.xy, 2.0)); // NOTE: omitting normalization results in clipped edges artifact\n\n    mat3 M = yaw_pitch_roll(yaw, pitch, 0.0);\n    ro = M * ro;\n    rd = M * rd;\n    //ro.z += 1.0;\n\n    vec3 color = vec3(1);\n    vec4 result = trace(ro, rd, 0.0, DIST_MAX);\n    color = result.xyz;\n    float dist = result.w;\n    if(dist < DIST_MAX)\n    {\n        vec3 dst = ro + rd * dist;\n        vec3 n = normal(dst);\n\n        //color *= (n * 0.5 + 0.5);\n        //color *= material(dst);\n\n        vec3 lightdir = normalize(vec3(1.0, 1.0, 1.0));\n        vec3 ambient = vec3(0.4);\n        float brightness = max(dot(lightdir, n), 0.0);\n        if(brightness > 0.0)\n            brightness *= shadow(ro + rd * dist + n * 0.01, lightdir, 0.0, DIST_MAX);\n            //brightness *= softshadow(ro + rd * dist + n * 0.01, lightdir, 0.0, DIST_MAX, 20.0);\n        color *= (ambient * calcAO(dst, n) + brightness);\n\n        if(brightness > 0.0)\n        {\n            float specular = pow(max(0.0, dot(n, normalize(-rd + lightdir))), 250.0);\n            color += specular;\n        }\n\n        vec3 fog_color = vec3(0.2);\n        color = mix(fog_color, vec3(color), exp(-pow(dist/20.0, 2.0))); // fog\n    }\n    else\n    {\n        //color *= mix(vec3(0,0.5,0.5),vec3(0,0,1),abs(-rd.z)); // sky\n        color *= 0.0;\n    }\n\n    color = tanh(color); // roll-off overly bright colors\n    color = sqrt(color); // approximate gamma\n    fragColor = vec4(color, 1);\n}\n\n/*\n// https://www.shadertoy.com/view/mt3BRB rotate from vector to vector, 2023 by jt\n\n// From https://en.wikipedia.org/wiki/Rodrigues%27_rotation_formula\n// calculate rotation matrix that maps a source vector to a destination vector\n// (numerically stable, without trigonometry)\n\n// https://mathworld.wolfram.com/RodriguesRotationFormula.html\n// https://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToMatrix/index.htm\nmat3 rotation(vec2 cs, vec3 k) // rodrigues' rotation (jt)\n{\n    cs = normalize(cs);\n    k = normalize(k);\n    float t = 1.0 - cs.x;\n    return\n        mat3\n        (\n            vec3(t*k.x*k.x+cs.x,t*k.x*k.y+k.z*cs.y,t*k.x*k.z-k.y*cs.y),\n            vec3(t*k.x*k.y-k.z*cs.y,t*k.y*k.y+cs.x,t*k.y*k.z+k.x*cs.y),\n            vec3(t*k.x*k.z+k.y*cs.y,t*k.y*k.z-k.x*cs.y,t*k.z*k.z+cs.x)\n        );\n}\n\nvec2 polar(float phi)\n{\n    return vec2(cos(phi),sin(phi));\n}\n\nmat3 rotation(float phi, vec3 k)\n{\n    return rotation(polar(phi), k);\n}\n\nmat3 rotation(vec3 src, vec3 dst) // https://www.shadertoy.com/view/mt3BRB rotate from vector to vector, by rodrigues' rotation (jt)\n{\n    src = normalize(src);\n    dst = normalize(dst);\n    float d = dot(src, dst);\n    vec3 k = cross(src, dst);\n    return rotation(vec2(d, length(k)), k);\n}\n\nmat4 make_proj_mat(float focal_length)\n{\n    return\n        mat4\n        (\n            vec4(focal_length, 0.0, 0.0, 0.0),\n            vec4(0.0, focal_length, 0.0, 0.0),\n            vec4(0.0, 0.0, 0.0, 1.0),\n            vec4(0.0, 0.0, 0.0, 0.0)\n        );\n}\n\n#define pi 3.1415926\n\nvec2 project(mat4 projection, vec3 v)\n{\n    vec4 w = projection * vec4(v, 1.0);\n    return vec2(w) / w.w;\n}\n\nfloat draw_line(vec2 a, vec2 b, vec2 p)\n{\n    vec2 ba = b - a;\n    vec2 pa = p - a;\n    float h = clamp(dot(pa,ba) / dot(ba,ba), 0.0, 1.0);\n    return length(pa - h * ba);\n}\n\nfloat draw_quad(vec2 A, vec2 B, vec2 C, vec2 D, vec2 p)\n{\n    return min(min(draw_line(A, B, p), draw_line(B, C, p)), min(draw_line(C, D, p), draw_line(D, A, p)));\n}\n\nfloat draw_cube(mat4 projection, float cube_size, vec2 p)\n{\n    vec3 v000 = vec3(-1,-1,-1) * cube_size;\n    vec3 v001 = vec3(-1,-1,+1) * cube_size;\n    vec3 v010 = vec3(-1,+1,-1) * cube_size;\n    vec3 v011 = vec3(-1,+1,+1) * cube_size;\n    vec3 v100 = vec3(+1,-1,-1) * cube_size;\n    vec3 v101 = vec3(+1,-1,+1) * cube_size;\n    vec3 v110 = vec3(+1,+1,-1) * cube_size;\n    vec3 v111 = vec3(+1,+1,+1) * cube_size;\n\n    //mat3 R0 = rotation(vec3(0,0,1),vec3(1,1,1));\n    //mat3 R0 = rotation(vec3(1,1,1),vec3(0,0,1));\n    vec2 m = (2.0 * iMouse.xy - iResolution.xy) / iResolution.y;\n    mat3 R = length(iMouse.xy)<10.0?rotation(vec3(0,0,1),vec3(polar(iTime),0)):rotation(vec3(1,0,0),vec3(m,0)); // NOTE: no additional internal rotation\n    //mat3 R = length(iMouse.xy)<10.0?rotation(vec3(1,0,0),vec3(polar(iTime),0)):rotation(vec3(0,0,1),vec3(m,0)); // NOTE: additional internal rotation\n\n    vec2 V000 = project(projection, R*v000 + vec3(0,0,1));\n    vec2 V001 = project(projection, R*v001 + vec3(0,0,1));\n    vec2 V010 = project(projection, R*v010 + vec3(0,0,1));\n    vec2 V011 = project(projection, R*v011 + vec3(0,0,1));\n    vec2 V100 = project(projection, R*v100 + vec3(0,0,1));\n    vec2 V101 = project(projection, R*v101 + vec3(0,0,1));\n    vec2 V110 = project(projection, R*v110 + vec3(0,0,1));\n    vec2 V111 = project(projection, R*v111 + vec3(0,0,1));\n\n    return\n        min\n        (\n            min\n            (\n                draw_quad(V000, V001, V011, V010, p),\n                draw_quad(V100, V101, V111, V110, p)\n            ),\n            min\n            (\n                min(draw_line(V000, V100, p), draw_line(V001, V101, p)),\n                min(draw_line(V011, V111, p), draw_line(V010, V110, p))\n            )\n        );\n}\n\nvoid mainImage(out vec4 o, vec2 I)\n{\n    mat4 projection = make_proj_mat(2.0);\n\n    vec2 p = (2.0 * I - iResolution.xy) / iResolution.y;\n\n    float f = min(1.0, draw_cube(projection, 0.25, p));\n\n    vec3 col = vec3(0.0);\n    //col = max(col, mix(vec3(1.0), vec3(0.0), smoothstep(0.00, 0.01, o)));\n    col = max(col, mix(vec3(1.0), vec3(0.0), smoothstep(0.00, 5./iResolution.y, f)));\n\n    o = vec4(col,1.0);\n}\n*/\n","name":"Image","description":"","type":"image"}]}