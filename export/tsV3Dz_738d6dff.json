{"ver":"0.1","info":{"id":"tsV3Dz","date":"1571231597","viewed":220,"name":"Function plot (dist estimation)","username":"nurof3n","description":"A dumb function plotter that uses shaders and has no purpose whatsoever.\nAnd also some built in noise functions.","likes":7,"published":1,"flags":16,"usePreview":0,"tags":["noise","graph","function","plotting"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n\tDistance estimation algorithm\n\thttps://iquilezles.org/articles/distance\n*/\n#define PI 3.14159265359\n#define random(x) (fract(sin(x) * 43758.545))\n#define smoothsaw(x) (smoothstep(0.0, 1.0, fract(x)))\n#define steprandom(x) (random(floor(x)))\n#define randomsaw(x) (smoothsaw(x) * steprandom(x))\n#define noise(x) (randomsaw(x) - randomsaw(x - 1.) + steprandom(x - 1.))\n#define fractalnoise(x) (noise((x)) + .5*noise((x)/.5) + .25*noise((x)/.25) + .125*noise((x)/.125) + .0625*noise((x)/.0625))\nvec2 c;\n#define rectangle(center, size, uv) (c = 1.-step(size, abs(uv - center)), c.x * c.y)\n\n#define f(x) (sin( (x) * cos(x) ) * cos(iTime + (x)))\n#define g(x) (sin( ((x) * 3.) * cos(iTime) * sin(x) ))\nfloat f2(vec2 x) {\n    float r = length(x);\n    float a = atan(x.y,x.x);\n    return r - 1.0 + 0.5*sin(3.0*a+2.0*r*r);\n}     \n\nconst vec2 h = vec2(0.001, 0.0);\t//set this with less precision if lines are weird\n//analytical gradient, needs to be written for any particular function\n#define grad1(x) (vec2(1.0, cos(x)*sin(x*x) + 2.0*x*cos(x*x)*sin(x)))\n#define grad2(x, func) (vec2(1.0, (func(x+h) - func(x-h)) / (2.0*h)))\n#define grad2d(uv, func) (vec2( func(uv+h.xy) - func(uv-h.xy), func(uv+h.yx) - func(uv-h.yx) ) / (2.0*h.x))\n#define sdf(uv, g, func) ((func(uv.x) - uv.y) / length(g))\n#define sdf2d(uv, g, func) ((func(uv)) / length(g))\n\nfloat scale = 6.;\nfloat eps;\n\n\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\nvec2 shake(vec2 uv) {\n\treturn vec2(uv.x + (fractalnoise(iTime * 10.) - 1.) * 2., uv.y + (fractalnoise(iTime*10. + 1.) - 1.) * 2.);\n}                           \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //https://www.shadertoy.com/view/lsXGzf\n    //scale += 5.0*texelFetch( iChannel0, ivec2(KEY_UP,2),0 ).x;\n    //scale -= 4.0*texelFetch( iChannel0, ivec2(KEY_DOWN,2),0 ).x;\n    float aspect = iResolution.x / iResolution.y;\n    vec2 mouse = iMouse.xy/iResolution.y;\n    mouse = (mouse == vec2(.0) ? vec2(aspect, 1.) / 2. : mouse);\t//for initialization\n    vec2 uv = fragCoord/iResolution.y;\n    eps = scale / iResolution.y; \t//pixel size, for constant thickness independent of resolution\n    \n    mouse -= vec2(aspect/2., .5);\n    uv -= vec2(aspect/2., .5);\n    uv *= scale;\n    mouse *= scale;\n    uv -= mouse;\n    \n    //dont uncomment this\n    //uv = shake(uv);\n    \n    vec2 rotuv = rotate2d(5.*sin(iTime / 2.) * PI) * uv;\n    \n    vec2 g1 = grad2(uv, f);\n    vec2 g2 = grad2(uv.x, g);\n    float de = sdf(uv, g1, f);\n    float de2 = sdf(uv, g2, g);\n    \n    vec3 color, color2;\n    color = mix(vec3(175.0,238.0,238.0)/255.0, \n                mix(vec3(.0), vec3(.9, .97, .8), (1. - smoothstep(-2.*eps, .0, de)) ),\n                1. - smoothstep(.0, 2.*eps, de));\n    color2 = mix(vec3(175.0,238.0,238.0)/255.0, \n                mix(vec3(.0), vec3(.9, .97, .8), (1. - smoothstep(-2.*eps, .0, de2)) ),\n                1. - smoothstep(.0, 2.*eps, de2));\n    color = min(color, color2);  \n    \n    //axes\n    color = mix(color, color * vec3(.1, .5, .6), smoothstep(-eps, 0., uv.x) - smoothstep(0., eps, uv.x));\t\n    color = mix(color, color * vec3(.1, .5, .6), smoothstep(-eps, 0., uv.y) - smoothstep(0., eps, uv.y));\n    \n    //ruler\n    if(abs(uv.x) > 8. * eps || abs(uv.y) > 8. * eps) {    //dont draw in the origin\n        color = mix(color, color * vec3(.1, .5, .6), rectangle(vec2(.0, round(uv.y)), vec2(5.*eps, eps), uv));\n        color = mix(color, color * vec3(.1, .5, .6), rectangle(vec2(round(uv.x), .0), vec2(eps, 5.*eps), uv));\n    }\n    \n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}