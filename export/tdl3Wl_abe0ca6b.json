{"ver":"0.1","info":{"id":"tdl3Wl","date":"1547837647","viewed":65,"name":"Thingadgasfhasfh1","username":"theepicsnail","description":"thing1","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["thing1"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 cossin(float r) { return vec2(cos(r), sin(r)); }\nmat2x2 rotMat(float r) { \n    vec2 cs = cossin(r);\n    return mat2x2(cs.x, -cs.y, cs.y, cs.x);\n}\nvoid rotate(inout vec2 p, float r) { p = rotMat(r)*p; }\nvoid translate(inout vec2 p, vec2 offset) { p+=offset; }\n\nfloat closesedMirror = 100.0;\nfloat totalMirror = 0.0;\nfloat flipCount = 0.0;\nvoid vmirror(inout vec2 p) {\n    if(p.y < .0) flipCount += 1.0;\n    p.y=abs(p.y);\n    totalMirror += p.y;\n    closesedMirror=min(closesedMirror,p.y);\n}\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid scale(inout vec2 p, float s) { p *= s; }\nvoid mainImage( out vec4 fragColor, in vec2 uv ) {\n    uv/=iResolution.xy;\n    uv = (uv-.5)*2.0;\n    uv.x*=iResolution.x/iResolution.y;\n    float angle;\n    \n    scale(uv, 1.0);\n    \n     angle = atan(uv.y,uv.x);\n    float d = length(uv);\n    \n    \n    //uv = vec2(cos(uv.x), sin(uv.y));\n    //translate(uv, cossin(iTime));\n    \n    \n    fragColor.r=(1.0-length(fract(uv+.5)-.5));\n   \tfragColor.g=cos(.1*iTime*length(floor(uv+.5)))*.2+.2;\n    //fragColor.gb=fract(uv);\n    \n    \n    //*\n    scale(uv, 3.0);\n\tfloat max_itr = 100.0;\n    float itr = max_itr;\n    vec3 colorScale = vec3(3,4,5) * itr *.2;\n    \n    vec2 center = vec2(0,0);\n     angle = 0.0;\n    while(itr-->0.0) {\n        angle = fract(angle/3.1415926535)*3.1415926535;\n        center = cossin(angle);\n        angle += iTime/max_itr;\n        \n        \n\t    // move mirror center to center to (0,0)\n\t    translate(uv, -center);\n\t    rotate(uv, angle);\n        \n        vmirror(uv);\n\t    rotate(uv, -angle);\n\t    translate(uv, center);\n    }\n    \n    // coloring \n    uv = fract(uv);\n    float K = .2;\n    \n    float bloom = pow(totalMirror + .0, -K);\n    float mirror_dist = closesedMirror*max_itr;\n    float cell_color = abs(cos(flipCount));\n    \n    fragColor = vec4(0);\n    fragColor.r = fract(bloom);\n    \n    fragColor.g = fract(bloom*.1);\n    fragColor.b = fract(bloom*.01);\n    \n    float base = iTime*.1;\n    float hue = base+ sin(cell_color*iTime)*.2;\n    fragColor.rgb = hsv2rgb(vec3(hue, bloom, mirror_dist*.1));\n   \n}","name":"Image","description":"","type":"image"}]}