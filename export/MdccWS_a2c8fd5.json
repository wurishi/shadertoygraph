{"ver":"0.1","info":{"id":"MdccWS","date":"1520060074","viewed":152,"name":"Tunnel Walk","username":"satbir121","description":"Tunnel walk.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["tunnel"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Continuing the shapes tutorial from The Book of Shaders https://thebookofshaders.com/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float x = abs(mod(1. - iTime / 4., 1.)) * 0.5 - 0.1;\n    float y =abs(mod(1. - iTime / 4. - .5, 1.)) * 0.5 - 0.1;\n    float widthX = 0.01 * (1. - x) * (1. - x)* (1. - x);\n    float widthY = 0.01 * (1. - y) * (1. - y) * (1. - y);\n    vec3 rect1 = createSmoothRect(widthX, 0.001, 0.05, uv, x);\n    vec3 rect2 = createSmoothRect(widthY, 0.001, 0.05, uv, y);\n    float middleRectWidth = 0.42;\n    vec3 rect3 = createSmoothRect(0.004, 0.001, 0.001, uv, middleRectWidth);\n    vec3 rect4 = 1. - createSmoothRect(middleRectWidth, 0.001, 0.001, uv, middleRectWidth + 0.004);\n    \n    vec3 color;\n    float z = uv.x;\n    color = vec3(plot(uv, z));\n    float z2 = 1. - uv.x;\n    color += vec3(plot(uv, z2));\n    \n    color += rect1 + rect2 + rect3;\n    \n    color *= rect4;\n    \n    // Output to screen\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec3 smoothborder( vec2 uv, float a, float b )\n{\n    vec2 leftbottom = smoothstep(vec2(a), vec2(b), uv);\n    vec2 topRight = smoothstep(vec2(a), vec2(b), 1. - uv);\n    float point = leftbottom.x * leftbottom.y * topRight.x * topRight.y;\n    vec3 color = vec3( point );\n    return color;\n}\n\n// vec3 floorborder( vec2 uv, float a)\n// {\n//    vec2 leftbottom = floor(uv + vec2(1. - a));\n//    vec2 topRight = floor(1. - uv + vec2(1. - a));\n//    \n//    float point = leftbottom.x * leftbottom.y * topRight.x * topRight.y;\n//    vec3 color = vec3( point );\n//    return color;\n// }\n\n//vec3 drawLineSegment(vec2 uv, vec2 a, vec2 b, float width) {\n    // check if the point lies inside the width range of line.\n//}\n\n// vec3 drawRectangle(vec2 uv, vec2 a, vec2 b, float width) {\t\n// }\n\nvec3 createSmoothRect(float width, float inward, float outward,vec2 uv, float x) {\n    vec3 color1 = smoothborder(uv, x, x + inward);\n    vec3 color2 = smoothborder(uv, x + width, x + width + outward );   \n    vec3 rect = color1 - color2;\n    return rect;\n}\n\nfloat plot(vec2 st, float pct){\n  return  smoothstep( pct-0.005, pct, st.y) -\n          smoothstep( pct, pct+0.005, st.y);\n}","name":"Common","description":"","type":"common"}]}