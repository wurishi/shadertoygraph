{"ver":"0.1","info":{"id":"NtSBDm","date":"1659842208","viewed":129,"name":"falling through the iris","username":"HaleyHalcyon","description":",kxa,.xka.,","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["spiraltunnelzoomfalling"],"hasliked":0,"parentid":"ftBfWw","parentname":"a,.uk,xa,.ka,ka,ka.,kx"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TURN (6.283185307)\n\n#define HEX(x) vec3((ivec3(x) >> ivec3(16, 8, 0)) & 255) / 255.\n\nvec3 getColor(float x){\n    const int colorCount = 8;\n    vec3[] c = vec3[](\n        vec3(0),\n        HEX(0xe020c0),\n        HEX(0xf0e040),\n        HEX(0xc0ff80),\n        vec3(1),\n        HEX(0xa0ffe0),\n        HEX(0x7080F0),\n        HEX(0x8000a0)\n    );\n    x *= float(colorCount);\n    int lo = int(floor(x));\n    \n    return mix(\n        c[lo % colorCount],\n        c[(lo + 1) % colorCount],\n        fract(x)\n    );\n}\n\n\n\nvec2 angleVec(float theta) {\n    return vec2(cos(theta), sin(theta));\n}\n\n#define LAYERS 48.\n#define LAYERFADE 1.5\n\n#define LAYERSCALE 7.5\n#define LAYERROTATE 1./12.\n\n#define OUTOFCENTER 0.55\n#define CENTERVARY 0.\n\n#define LAYERSPERLOOP 16.\n\n#define ALLROTATE -2.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  float t = fract(iTime / 4.);\n  // Normalized pixel coordinates (from 0 to 1)\n  vec2 uv = (2. * fragCoord.xy - iResolution.xy) / length(iResolution.xy);\n  \n  float dist = length(uv);\n  \n  vec3 col = getColor(t);\n  \n  for (float i = 0.; i < LAYERS; i++) {\n      //vec2 uvScale = 0.3 * uv * exp2(LAYERSCALE * ((LAYERS - i) - t * LAYERSPERLOOP));\n      vec2 uvScale = 0.2 * uv * max(.01,LAYERSCALE * (LAYERS - i - t * LAYERSPERLOOP - 1.));\n      float centerFactor = 0.5 * (2. - CENTERVARY + (\n          CENTERVARY * sin(TURN * (\n              //scale of eccentricity along layers\n              -0.08 * (\n                  i + t * LAYERSPERLOOP\n              ) +\n              //cycles of eccentricity\n              -1. * t\n          ))\n      ));\n      vec2 center = OUTOFCENTER * centerFactor* angleVec(\n          (\n              ALLROTATE * t + \n              (i + t * LAYERSPERLOOP) * LAYERROTATE\n          ) * TURN\n      );\n      float layerAlpha = min(1., min((i + (t-1.) * LAYERSPERLOOP) * LAYERFADE, (LAYERS - i - t * LAYERSPERLOOP) * LAYERFADE));\n      float radius = length(uvScale - center);\n      float aa = fwidth(radius) * .8;\n      float alpha = smoothstep(\n          -aa, aa, radius - 1.0\n      );\n      //layerAlpha *= smoothstep(0., 0.01, dist - 0.02);\n      col = mix(\n          col,\n          //vec3(uvScale - center, 0.0),\n          getColor(\n              fract(\n                  //scale of color along layers\n                  -i / LAYERSPERLOOP +\n                  //cycles of color\n                  0. * t\n              )\n          ),\n          alpha * layerAlpha\n      );\n  }\n  \n  \n  // Output to screen\n  fragColor = vec4(\n      col, 1.0\n  );\n}","name":"Image","description":"","type":"image"}]}