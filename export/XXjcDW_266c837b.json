{"ver":"0.1","info":{"id":"XXjcDW","date":"1727284252","viewed":35,"name":"GPT4-o1-preview try I","username":"rwqx","description":"GPT4-o1-preview written code, sand lines","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["demo","gpt"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// ShaderToy shader by ChatGPT\n// Title: Geometric Sand Painting Explosion\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalize pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n    // Transform coordinates to range [-1, 1]\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n\n    // Time variables\n    float time = iTime;\n    float t = mod(time, 20.0);\n\n    vec3 color = vec3(0.0);\n\n    // Animation timing parameters\n    float drawTime = 5.0;\n    float explodeTime = 10.0;\n    float reassembleTime = 15.0;\n\n    // Drawing phase\n    if (t < explodeTime)\n    {\n        float drawProgress = clamp(t / drawTime, 0.0, 1.0);\n\n        // Generate geometric pattern\n        float angle = atan(uv.y, uv.x);\n        float radius = length(uv);\n        float pattern = sin(10.0 * angle + 20.0 * radius);\n\n        // Create thin lines\n        float line = smoothstep(0.01, 0.0, abs(pattern));\n\n        // Apply drawing progress to reveal the pattern over time\n        line *= smoothstep(0.0, 1.0, drawProgress - radius);\n\n        // Colorful lines resembling bank note engravings\n        color = vec3(\n            0.5 + 0.5 * sin(10.0 * angle + iTime),\n            0.5 + 0.5 * cos(10.0 * angle + iTime),\n            0.5 + 0.5 * sin(20.0 * radius + iTime)\n        );\n\n        color *= line;\n    }\n    // Explosion phase\n    else if (t < reassembleTime)\n    {\n        float explodeProgress = (t - explodeTime) / (reassembleTime - explodeTime);\n\n        // Original coordinates before explosion\n        float angle = atan(uv.y, uv.x);\n        float radius = length(uv);\n\n        // Displacement for explosion effect\n        vec2 dir = vec2(cos(angle), sin(angle));\n        float speed = mix(0.0, 1.0, explodeProgress);\n        vec2 displacement = dir * speed * (radius + 0.5) * 0.5;\n\n        // Apply displacement\n        vec2 newUV = uv + displacement;\n\n        // Reflect off edges\n        newUV = mod(newUV + 1.0, 2.0) - 1.0;\n\n        // Generate pattern at new position\n        float newAngle = atan(newUV.y, newUV.x);\n        float newRadius = length(newUV);\n        float pattern = sin(10.0 * newAngle + 20.0 * newRadius);\n\n        // Thin lines\n        float line = smoothstep(0.01, 0.0, abs(pattern));\n\n        // Colorful lines\n        color = vec3(\n            0.5 + 0.5 * sin(10.0 * newAngle + iTime),\n            0.5 + 0.5 * cos(10.0 * newAngle + iTime),\n            0.5 + 0.5 * sin(20.0 * newRadius + iTime)\n        );\n\n        color *= line;\n    }\n    // Reassembly phase\n    else\n    {\n        float assembleProgress = (t - reassembleTime) / (20.0 - reassembleTime);\n\n        // Coordinates after explosion\n        float angle = atan(uv.y, uv.x);\n        float radius = length(uv);\n\n        // Displacement for reassembly effect\n        vec2 dir = vec2(cos(angle), sin(angle));\n        float speed = mix(1.0, 0.0, assembleProgress);\n        vec2 displacement = dir * speed * (radius + 0.5) * 0.5;\n\n        // Apply displacement\n        vec2 newUV = uv + displacement;\n\n        // Reflect off edges\n        newUV = mod(newUV + 1.0, 2.0) - 1.0;\n\n        // Generate pattern at new position\n        float newAngle = atan(newUV.y, newUV.x);\n        float newRadius = length(newUV);\n        float pattern = sin(10.0 * newAngle + 20.0 * newRadius);\n\n        // Thin lines\n        float line = smoothstep(0.01, 0.0, abs(pattern));\n\n        // Colorful lines\n        color = vec3(\n            0.5 + 0.5 * sin(10.0 * newAngle + iTime),\n            0.5 + 0.5 * cos(10.0 * newAngle + iTime),\n            0.5 + 0.5 * sin(20.0 * newRadius + iTime)\n        );\n\n        color *= line;\n    }\n\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}