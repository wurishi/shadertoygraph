{"ver":"0.1","info":{"id":"WdScRm","date":"1586275216","viewed":63,"name":"magic crystal thingy ma gig","username":"trupples","description":"i can into raymarching","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//////////\n// Permutation polynomial: (34x^2 + x) mod 289\nvec3 permute(vec3 x) {\n  return mod((34.0 * x + 1.0) * x, 289.0);\n}\n\nvec3 dist(vec3 x, vec3 y, vec3 z,  bool manhattanDistance) {\n  return manhattanDistance ?  abs(x) + abs(y) + abs(z) :  (x * x + y * y + z * z);\n}\n\nvec2 worley(vec3 P, float jitter, bool manhattanDistance) {\nfloat K = 0.142857142857; // 1/7\nfloat Ko = 0.428571428571; // 1/2-K/2\nfloat  K2 = 0.020408163265306; // 1/(7*7)\nfloat Kz = 0.166666666667; // 1/6\nfloat Kzo = 0.416666666667; // 1/2-1/6*2\n\n    vec3 Pi = mod(floor(P), 289.0);\n    vec3 Pf = fract(P) - 0.5;\n\n    vec3 Pfx = Pf.x + vec3(1.0, 0.0, -1.0);\n    vec3 Pfy = Pf.y + vec3(1.0, 0.0, -1.0);\n    vec3 Pfz = Pf.z + vec3(1.0, 0.0, -1.0);\n\n    vec3 p = permute(Pi.x + vec3(-1.0, 0.0, 1.0));\n    vec3 p1 = permute(p + Pi.y - 1.0);\n    vec3 p2 = permute(p + Pi.y);\n    vec3 p3 = permute(p + Pi.y + 1.0);\n\n    vec3 p11 = permute(p1 + Pi.z - 1.0);\n    vec3 p12 = permute(p1 + Pi.z);\n    vec3 p13 = permute(p1 + Pi.z + 1.0);\n\n    vec3 p21 = permute(p2 + Pi.z - 1.0);\n    vec3 p22 = permute(p2 + Pi.z);\n    vec3 p23 = permute(p2 + Pi.z + 1.0);\n\n    vec3 p31 = permute(p3 + Pi.z - 1.0);\n    vec3 p32 = permute(p3 + Pi.z);\n    vec3 p33 = permute(p3 + Pi.z + 1.0);\n\n    vec3 ox11 = fract(p11*K) - Ko;\n    vec3 oy11 = mod(floor(p11*K), 7.0)*K - Ko;\n    vec3 oz11 = floor(p11*K2)*Kz - Kzo; // p11 < 289 guaranteed\n\n    vec3 ox12 = fract(p12*K) - Ko;\n    vec3 oy12 = mod(floor(p12*K), 7.0)*K - Ko;\n    vec3 oz12 = floor(p12*K2)*Kz - Kzo;\n\n    vec3 ox13 = fract(p13*K) - Ko;\n    vec3 oy13 = mod(floor(p13*K), 7.0)*K - Ko;\n    vec3 oz13 = floor(p13*K2)*Kz - Kzo;\n\n    vec3 ox21 = fract(p21*K) - Ko;\n    vec3 oy21 = mod(floor(p21*K), 7.0)*K - Ko;\n    vec3 oz21 = floor(p21*K2)*Kz - Kzo;\n\n    vec3 ox22 = fract(p22*K) - Ko;\n    vec3 oy22 = mod(floor(p22*K), 7.0)*K - Ko;\n    vec3 oz22 = floor(p22*K2)*Kz - Kzo;\n\n    vec3 ox23 = fract(p23*K) - Ko;\n    vec3 oy23 = mod(floor(p23*K), 7.0)*K - Ko;\n    vec3 oz23 = floor(p23*K2)*Kz - Kzo;\n\n    vec3 ox31 = fract(p31*K) - Ko;\n    vec3 oy31 = mod(floor(p31*K), 7.0)*K - Ko;\n    vec3 oz31 = floor(p31*K2)*Kz - Kzo;\n\n    vec3 ox32 = fract(p32*K) - Ko;\n    vec3 oy32 = mod(floor(p32*K), 7.0)*K - Ko;\n    vec3 oz32 = floor(p32*K2)*Kz - Kzo;\n\n    vec3 ox33 = fract(p33*K) - Ko;\n    vec3 oy33 = mod(floor(p33*K), 7.0)*K - Ko;\n    vec3 oz33 = floor(p33*K2)*Kz - Kzo;\n\n    vec3 dx11 = Pfx + jitter*ox11;\n    vec3 dy11 = Pfy.x + jitter*oy11;\n    vec3 dz11 = Pfz.x + jitter*oz11;\n\n    vec3 dx12 = Pfx + jitter*ox12;\n    vec3 dy12 = Pfy.x + jitter*oy12;\n    vec3 dz12 = Pfz.y + jitter*oz12;\n\n    vec3 dx13 = Pfx + jitter*ox13;\n    vec3 dy13 = Pfy.x + jitter*oy13;\n    vec3 dz13 = Pfz.z + jitter*oz13;\n\n    vec3 dx21 = Pfx + jitter*ox21;\n    vec3 dy21 = Pfy.y + jitter*oy21;\n    vec3 dz21 = Pfz.x + jitter*oz21;\n\n    vec3 dx22 = Pfx + jitter*ox22;\n    vec3 dy22 = Pfy.y + jitter*oy22;\n    vec3 dz22 = Pfz.y + jitter*oz22;\n\n    vec3 dx23 = Pfx + jitter*ox23;\n    vec3 dy23 = Pfy.y + jitter*oy23;\n    vec3 dz23 = Pfz.z + jitter*oz23;\n\n    vec3 dx31 = Pfx + jitter*ox31;\n    vec3 dy31 = Pfy.z + jitter*oy31;\n    vec3 dz31 = Pfz.x + jitter*oz31;\n\n    vec3 dx32 = Pfx + jitter*ox32;\n    vec3 dy32 = Pfy.z + jitter*oy32;\n    vec3 dz32 = Pfz.y + jitter*oz32;\n\n    vec3 dx33 = Pfx + jitter*ox33;\n    vec3 dy33 = Pfy.z + jitter*oy33;\n    vec3 dz33 = Pfz.z + jitter*oz33;\n\n    vec3 d11 = dist(dx11, dy11, dz11, manhattanDistance);\n    vec3 d12 =dist(dx12, dy12, dz12, manhattanDistance);\n    vec3 d13 = dist(dx13, dy13, dz13, manhattanDistance);\n    vec3 d21 = dist(dx21, dy21, dz21, manhattanDistance);\n    vec3 d22 = dist(dx22, dy22, dz22, manhattanDistance);\n    vec3 d23 = dist(dx23, dy23, dz23, manhattanDistance);\n    vec3 d31 = dist(dx31, dy31, dz31, manhattanDistance);\n    vec3 d32 = dist(dx32, dy32, dz32, manhattanDistance);\n    vec3 d33 = dist(dx33, dy33, dz33, manhattanDistance);\n\n    vec3 d1a = min(d11, d12);\n    d12 = max(d11, d12);\n    d11 = min(d1a, d13); // Smallest now not in d12 or d13\n    d13 = max(d1a, d13);\n    d12 = min(d12, d13); // 2nd smallest now not in d13\n    vec3 d2a = min(d21, d22);\n    d22 = max(d21, d22);\n    d21 = min(d2a, d23); // Smallest now not in d22 or d23\n    d23 = max(d2a, d23);\n    d22 = min(d22, d23); // 2nd smallest now not in d23\n    vec3 d3a = min(d31, d32);\n    d32 = max(d31, d32);\n    d31 = min(d3a, d33); // Smallest now not in d32 or d33\n    d33 = max(d3a, d33);\n    d32 = min(d32, d33); // 2nd smallest now not in d33\n    vec3 da = min(d11, d21);\n    d21 = max(d11, d21);\n    d11 = min(da, d31); // Smallest now in d11\n    d31 = max(da, d31); // 2nd smallest now not in d31\n    d11.xy = (d11.x < d11.y) ? d11.xy : d11.yx;\n    d11.xz = (d11.x < d11.z) ? d11.xz : d11.zx; // d11.x now smallest\n    d12 = min(d12, d21); // 2nd smallest now not in d21\n    d12 = min(d12, d22); // nor in d22\n    d12 = min(d12, d31); // nor in d31\n    d12 = min(d12, d32); // nor in d32\n    d11.yz = min(d11.yz,d12.xy); // nor in d12.yz\n    d11.y = min(d11.y,d12.z); // Only two more to go\n    d11.y = min(d11.y,d11.z); // Done! (Phew!)\n    return sqrt(d11.xy); // F1, F2\n\n}\n\n\n\n//////////\n\n\nfloat dstSphere(const in vec3 p, const in float r) {\n    return length(p)-r;\n}\n\nfloat dstBox(const in vec3 p, const in vec3 r) {\n    return length(max(abs(p), r)-r);\n}\n\n//float dstSquareTorus(const in vec3 p, const in float r, const int float thicc, const int float high) {\n    // daca e deasupra planului y=high/2 => p.y-high/2\n    // daca e dedesubt y=-high/2 => -p.y-high/2\n    // not quite\n    \n//}\n\nvec3 translate(const in vec3 p, const in vec3 shape_origin) {\n    return p-shape_origin;\n}\n\nvec3 twistY(const in vec3 p, const in float angle) {\n    return p * mat3(cos(angle), 0, sin(angle),\n              0,          .5,          0,\n             -sin(angle), 0, cos(angle));\n}\n\nfloat norm(const in vec3 v, float n) {\n    return pow(pow(v.x,n) + pow(v.y,n) + pow(v.z,n), 1.0/n);\n}\nfloat dstSphereN(const in vec3 p, const in float r, const in float no) {\n    return norm(p, no)-r;\n}\n\nfloat dstBoxN(const in vec3 p, const in vec3 r, const in float no) {\n    return norm(max(abs(p), r)-r, no);\n}\n\nfloat dist(vec3 p) {\n    float res = 1e38;\n    \n    const vec3 repeat_box = vec3(40.0, 40.0, 40.0);\n    \n    float rounding = 10.0-pow(abs(cos(iTime)),1.0)*10.0;\n    float N = 4.0;\n    float case_dist = max(-dstSphereN(twistY(p,iTime*0.1), 6.0, N), dstBoxN(twistY(p,iTime*0.1), vec3(5.0,5.0,5.0), N));\n    \n    // twist p\n    rounding = 7.0 - pow(sin(iTime*5.0), 8.0)*.2;\n    res = min(res, dstBox(twistY(p,p.y*0.5-iTime), vec3(5.0 - rounding,6.0 - rounding,2.0 - rounding)) - rounding);\n    \n    res = min(res, case_dist);\n                          \n    return res;\n}\n\nfloat grid_color(vec3 p) {\n    p *= 3.1415;\n    //p += vec3(10.0, 3.0, 12.0) * iTime;\n    return min(pow(cos(p.x),8.0)+pow(cos(p.y),8.0)+pow(cos(p.z),8.0), 3.0)/3.0;\n}\nfloat polkadot_color(vec3 p) {\n    p *= 3.1415;\n    //p += vec3(10.0, 3.0, 12.0) * iTime;\n    return min(pow(cos(p.x),2.0)*pow(cos(p.y),2.0)*pow(cos(p.z),4.0), 3.0)/3.0;\n}\n\n// vec4 iMouse  image/buffer    xy = current pixel coords (if LMB is down). zw = click pixel\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 scr = (fragCoord - iResolution.xy/2.0)/iResolution.x;\n\n    float camera_angle = iTime * 0.0, camera_dist = 20.0, F = .5;\n    vec3 camera_origin = vec3(cos(camera_angle)*camera_dist, camera_dist*0.5, sin(camera_angle)*camera_dist);\n    vec3 camera_right = vec3(-sin(camera_angle), 0, cos(camera_angle));\n    vec3 camera_up = normalize(cross(camera_right, camera_origin));\n    vec3 ray_direction = normalize(normalize(-camera_origin)*F + camera_right * scr.x + camera_up * scr.y);\n    vec3 ray_position = camera_origin;\n    \n    float d;\n    float num_hops = 0.0;\n    float closest = 1e38;\n    do {\n        d = dist(ray_position);\n        closest = min(closest, d);\n       ray_position += ray_direction * d;\n        num_hops += 1.0;\n    } while(d > 0.1 && length(ray_position) < 1000.0);\n    \n    vec3 p = ray_position;\n    float angle = p.y*0.5-iTime;\n    p *= mat3(cos(angle), 0, sin(angle),\n              0,          .5,          0,\n             -sin(angle), 0, cos(angle));\n    vec2 N = worley(p/2.0, 1.0, false);\n    vec3 col = (pow(abs(N.y-N.x),-0.4)) * normalize(ray_position)/2.0 + vec3(0.5,0.5,0.5);;\n    \n    if(length(ray_position) > 999.0) col = vec3(0.2, 0.2, 0.2);\n    \n    if(closest != d) col = vec3(pow(1.0-col.x, closest*2.0), col.y, col.z);\n    \n    fragColor = vec4(col,1.0);\n    \n    \n}","name":"Image","description":"","type":"image"}]}