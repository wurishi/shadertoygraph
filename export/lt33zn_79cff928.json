{"ver":"0.1","info":{"id":"lt33zn","date":"1467623278","viewed":2974,"name":"Noise distortion 2D","username":"sodazot","description":"Distortion of image by noise.","likes":16,"published":1,"flags":0,"usePreview":1,"tags":["noise","distortion","water","liquid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float Scale1 = 0.3;\nfloat Scale2 = 3.5;\nfloat Amp = 20.0;\nfloat FreqX = 30.0;\nfloat FreqY = 30.0;\n\n// --- noise functions from https://www.shadertoy.com/view/XslGRr\n// Created by inigo quilez - iq/2013\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nmat3 m = mat3( 0.00,  0.80,  0.60,\n              -0.80,  0.36, -0.48,\n              -0.60, -0.48,  0.64 );\n\nfloat hash( float n )\n{\n    return fract(sin(n)*43758.5453);\n}\n\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\n    f = f*f*(3.0-2.0*f);\n\n    float n = p.x + p.y*57.0 + 113.0*p.z;\n\n    float res = mix(mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\n                        mix( hash(n+ 57.0), hash(n+ 58.0),f.x),f.y),\n                    mix(mix( hash(n+113.0), hash(n+114.0),f.x),\n                        mix( hash(n+170.0), hash(n+171.0),f.x),f.y),f.z);\n    return res;\n}\n\nfloat fbm( vec3 p )\n{\n    float f;\n    f  = 0.5000*noise( p ); p = m*p*2.02;\n    f += 0.2500*noise( p ); p = m*p*2.03;\n    f += 0.1250*noise( p ); p = m*p*2.01;\n    f += 0.0625*noise( p ); \n    return f;\n}\n// --- End of: Created by inigo quilez --------------------\nfloat mynoise ( vec3 p)\n{\n\t return noise(p);\n\t //return .5+.5*sin(50.*noise(p));\n}\nfloat myfbm( vec3 p )\n{\n    float f;\n    f  = 0.5000*mynoise( p ); p = m*p*2.02;\n    f += 0.2500*mynoise( p ); p = m*p*2.03;\n    f += 0.1250*mynoise( p ); p = m*p*2.01;\n    f += 0.0625*mynoise( p ); p = m*p*2.05;\n    f += 0.0625/2.*mynoise( p ); p = m*p*2.02;\n    f += 0.0625/4.*mynoise( p );\n    return f;\n}\nfloat myfbm2( vec3 p )\n{\n    float f;\n    f  = 1. - 0.5000*mynoise( p ); p = m*p*2.02;\n    f *= 1. - 0.2500*mynoise( p ); p = m*p*2.03;\n    f *= 1. - 0.1250*mynoise( p ); p = m*p*2.01;\n    f *= 1. - 0.0625*mynoise( p ); p = m*p*2.05;\n    f *= 1. - 0.0625/2.*mynoise( p ); p = m*p*2.02;\n    f *= 1. - 0.0625/4.*mynoise( p );\n    return f;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.y;\n\tvec3 v;\n\tvec3 p = Scale2*vec3(uv,0.)-iTime*(1.0, 1.0, 1.0)*0.1;\n\tfloat x = myfbm(p);\n\tv = (.5+.5*sin(x*vec3(FreqX, FreqY, 1.0)*Scale1))/Scale1;\n\tv *= Amp;\n\tvec3 Ti = texture(iChannel0,.02*v.xy+fragCoord.xy / iResolution.xy).rgb;\n\tfragColor = vec4(Ti,1.0);\n\n}","name":"Image","description":"","type":"image"}]}