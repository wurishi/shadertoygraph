{"ver":"0.1","info":{"id":"ls3BRj","date":"1525874674","viewed":148,"name":"Line Through Grid","username":"KaleyGoode","description":"The background for a future shader...","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["grid","background"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Minimise mapping by having everything return normalised ranges [0,1] or [-1,1].\n// Unsigned Interval is [0,1]; Signed interval is [-1,1]; These change between the two (useful for double or float):\n#define Unsigned(t) ((t + 1.0) / 2.0) // in = [-1,1] out = [ 0,1] Optimised version of Parameterize(p, -1,1);\n#define   Signed(t) (2.0 * t - 1.0)   // in = [ 0,1] out = [-1,1] Optimised version of  Interpolate(t, -1,1);\n#define Parameterize(x, a,b) ((x-a)/(b-a)) // x is normally between a and b. returns 0 if x==a, 1 if x==b, 0.5 if x is in the middle of a and b etc. Note a and b MUST be different!!!\n#define  Interpolate(t, a,b) ((a+(b-a)*t)) // The reverse of Parameterize: if t=0.5, returns the value in the middle of a and b.\n#define Map(x, aFrom,bFrom, aTo,bTo) (Interpolate(Parameterize(x,aFrom,bFrom),aTo,bTo)) // The Map X from the range [aFrom,bFrom] to the range [aTo,bTo].\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec4       margin = vec4(8.0);\n  float  lineMargin = 3.0;\n  float  lineWidth  = 6.0;\n  float       speed = 1.0;\n  float minGridSize = 1.0;\n  float maxGridSize = 7.0;\n  bool       invert = true;\n//___________________________________________\n  float backgroundShade = invert ? 0.0 : 1.0;\n  float foregroundShade = invert ? 0.5 : 0.5;\n  int   gridSize = int(0.5 + Map(sin(iTime * speed), -1.0,1.0, minGridSize, maxGridSize));\n  int   sizeMask = (1<<gridSize)-1;\n  if((fragCoord.x<margin.x)\n   ||(fragCoord.y<margin.y)\n   ||(fragCoord.x>float((int(iResolution.x - margin.z) & ~3) + 1))\n   ||(fragCoord.y>float((int(iResolution.y - margin.w) & ~3) + 1))) {\n      fragColor = vec4(backgroundShade);\n  }else if(abs(fragCoord.x - fragCoord.y) <= (lineWidth + lineMargin)) {\n    float shade = abs(fragCoord.x - fragCoord.y) / lineWidth; // The diagonal line through the grid\n    fragColor = vec4(invert ? 1.0 - shade : shade);\n  }else{\n    fragColor = vec4((((int(fragCoord.x) & sizeMask) != 0)\n                    &&((int(fragCoord.y) & sizeMask) != 0)) ? backgroundShade : foregroundShade);\n  }\n}\n","name":"Image","description":"","type":"image"}]}