{"ver":"0.1","info":{"id":"Wl2fzw","date":"1598551030","viewed":313,"name":"grass ball","username":"osadchy","description":"Attempt to create grass material","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["fast","grass","material"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float GAMMA = 2.2;\n\nconst float LIGHT_BRIGHTNESS = 2.0;\nconst vec3 \tLIGHT_COLOR = vec3(1, 0.9, 0.7) * LIGHT_BRIGHTNESS;\n\nconst float AMBIENT_BRIGHTNESS = 0.1;\nconst vec3 AMBIENT_COLOR = vec3(0.5, 0.55, 0.8) * AMBIENT_BRIGHTNESS;\n\nvec3 get_normal(vec2 uv) {\n    return vec3(uv, sqrt(1.0 - dot(pow(uv, vec2(2)), vec2(1))));\n}\n\nvec3 get_noisy_normal(vec3 normal, vec2 uv) {\n\treturn normalize(normal + (texture(iChannel0, uv).xyz - 0.5));\n}\n\nfloat get_occlusion_factor(vec3 normal, vec3 sight_dir) {\n    return abs(dot(sight_dir, normal));\n}\n\nfloat get_specular_factor(vec2 uv) {\n\treturn texture(iChannel1, uv * 0.9 + vec2(0.5)).x;\n}\n\nvec3 get_diffuse_color(vec2 uv, vec3 normal, vec3 sight_dir) {\n    vec3 base = vec3(0.0, 0.0, 0.0);\n    vec3 middle = vec3(0.01, 0.02, 0.0);\n    vec3 top = vec3(0.4, 0.6, 0.05);\n    \n    float occlusion_factor = get_occlusion_factor(sight_dir, normal);\n    \n    float base_factor = (1.0 - texture(iChannel1, uv).x) * 2.0;\n    base_factor = clamp(base_factor - occlusion_factor, 0.0, 1.0);\n    base_factor = pow(base_factor, 0.5);\n    \n    float top_factor = texture(iChannel1, uv).x * 1.5;\n    top_factor = clamp(top_factor - occlusion_factor, 0.0, 1.0);\n    top_factor = pow(top_factor, 1.5);\n    \n    vec3 color = mix(base, middle, base_factor);\n    color = mix(color, top, top_factor);\n    return color;\n}\n\nfloat light_ambient(vec2 uv, vec3 normal, vec3 sight_dir) {\n    float ao_original = texture(iChannel1, uv).x;\n    float ao_decay = pow(get_occlusion_factor(normal, sight_dir), 2.0);\n    return mix(1.0, ao_original, ao_decay);\n}\n\nfloat light_diffuse(vec3 normal, vec3 light_dir, float scattering) {\n    float result = clamp(dot(light_dir, normal) * (1.0 - scattering) + scattering, 0.0, 1.0);\n    return result;\n}\n\nfloat light_specular(vec3 normal, vec3 light_dir, vec3 sight_dir, float shininess, float scattering) {\n    vec3 reflected = reflect(- light_dir, normal);\n    float result = max(dot(sight_dir, reflected), 0.0);\n    result *= max(sign(dot(normal, light_dir)), 0.0);\n    result = max(result * (1.0 - scattering) + scattering, 0.0);\n    result = pow(result, shininess);\n    return result;\n}\n\nvec3 render_grass(vec3 normal, vec2 uv, vec3 sight_dir, vec3 light_dir, vec3 light_color, vec3 ambient_color) {\n    vec3 noisy_normal = get_noisy_normal(normal, uv);\n    vec3 color = get_diffuse_color(uv, normal, sight_dir);\n    \n    float ambient = light_ambient(uv, noisy_normal, sight_dir);\n    \n    float diffuse = light_diffuse(noisy_normal, light_dir, 0.2) * 1.0;\n\n    float specular = light_specular(noisy_normal, light_dir, sight_dir, 1.0, -0.5) * 0.2;\n    specular *= get_specular_factor(uv);\n    \n    color *= (ambient * ambient_color + (diffuse + specular) * light_color);\n    return color;\n}\n\nvoid mainImage(out vec4 frag_color, in vec2 frag_coord) {\n    float light_rotation_speed = 1.0;\n    float phase = 0.6 + iTime * light_rotation_speed;\n    vec3 light_pos = vec3(2.0 * sin(phase), 1.0, 2.0 * cos(phase));\n    vec2 uv = frag_coord / iResolution.y * 2.2 - 1.1;\n    \n    // Background\n    frag_color = vec4(AMBIENT_COLOR, 1.0);\n    \n    if (length(uv) < 1.0) {\n    \tvec3 normal = get_normal(uv);\n        vec3 pos = normal;\n        vec3 sight_dir = vec3(0, 0, 1);\n        vec3 light_dir = light_pos;\n        vec3 grass = render_grass(normal, uv, sight_dir, light_dir, LIGHT_COLOR, AMBIENT_COLOR);\n        frag_color = vec4(grass, 1.0);\n    }\n    \n    // Light sphere\n    if ((distance(light_pos.xy, uv) < 0.1)) {\n        if ((light_pos.z > 0.0) || (length(uv) >= 1.0)) {\n        \tfrag_color = vec4(LIGHT_COLOR / LIGHT_BRIGHTNESS, 1.0);\n        }\n    }\n    \n    // Gamma-correction\n    frag_color = pow(frag_color, vec4(1.0 / GAMMA));\n}","name":"Image","description":"","type":"image"}]}