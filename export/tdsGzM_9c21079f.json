{"ver":"0.1","info":{"id":"tdsGzM","date":"1545515930","viewed":252,"name":"Daybreak Visualizer","username":"alyd","description":"My first audio visualizer! The sunrise background I made myself, and the audio part was heavily modified from https://www.shadertoy.com/view/XdcXRs\n\nIf the music doesn't load, pause and play a couple times","likes":6,"published":1,"flags":64,"usePreview":0,"tags":["waves","sound","sunset","music","beginner","audio","visualizer","sunrise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xll3RN","filepath":"https://soundcloud.com/monstercat/rogue-daybreak-free-download","previewfilepath":"https://soundcloud.com/monstercat/rogue-daybreak-free-download","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//for the sky colours:\n#define speed 0.6\n#define red_base 0.05\n#define green_base 0.1\n#define light_base 0.8\n//for the audio bars:\n#define num_bars 200.\n#define bar_spacing .2\n#define opacity .3\n#define bar_height 0.02\n#define amplitude_factor 2.\n//zooms in on the highest 1/x frequencies:\n#define hifreqfocus 2. \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 st = fragCoord/iResolution.xy;\n    \n    //SOUND\n    //dividing my 2.0 \n    float freq_bin = floor(num_bars*st.x/hifreqfocus)/num_bars; //which frequency bin this x-coord falls into \n    float sound = texture(iChannel0,vec2(freq_bin,0)).r; //get the sound amplitude at this bin.\n    float time = iTime + sound*amplitude_factor; //jump the \"time\" forward at this bin\n    //if (st.x*num_bars-floor (st.x*num_bars)<bar_spacing)sound = 0.; //ensure gaps between bars\n    \n    //SUNRISE COLOURS\n    float dfb = 0.2+sin(time*speed); //distance of green and alpha from bottom of screen\n    float red_dft = 0.6 - sin(time*speed); //distance of red from top of screen\n        //sin(time*speed): intensity uniform across screen but varies with time\n        //cos or sin(st.y+...): area where colour is most intense moves up and down the screen\n    float red = red_base - 0.3*sin(time*speed) + cos(st.y+red_dft);\n    float green = green_base + 0.4*sin(time*speed) + 0.4*sin(st.y+dfb);\n    float blue = 0.7*sin(st.y) + 0.9*abs(sin(time*speed));\n    float alpha = light_base + 0.4*sin(st.y+dfb);\n    \n    //Adding the white bars to the screen:\n    vec4 color = vec4(red,green,blue,alpha);\n    if ((0.,st.y)< sound*sound*sound) { //&& (0.,st.y) > (sound*sound*sound-bar_height)) {\n        color = mix(color, vec4(1),opacity); \n    }\n    //add the floating squares:\n    if ((0.,st.y)< sound*sound*sound && (0.,st.y) > (sound*sound*sound-bar_height)) {\n        color = mix(color, vec4(1),0.); \n    }\n    //Final output:\n     fragColor = color;\n\n}","name":"Image","description":"","type":"image"}]}