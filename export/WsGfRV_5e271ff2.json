{"ver":"0.1","info":{"id":"WsGfRV","date":"1607462736","viewed":134,"name":"Smudge 20.12.08","username":"maximkamalov","description":"A 2D SDF smudge, based on rectangle, with Russian comments.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d","sdf","russian","smudge"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// NOTE: Comments below are in Russian.\n// Leave a comment if you want an English version.\n\n// Цвета.\n#define FG vec3(.0, .0, .0)\n#define BG vec3(.9, .9, .9)\n\n// Формула искажения фигуры путем волнообразного смещения контура.\n// Координата z позволяет избежать однообразных волн.\n// Для изменения амплитуды достаточно умножить возвращенное значение после вызова.\n// Совет: можно поменять частоту на вектор, чтобы по каждому измерению была своя.\nfloat displacement(in vec3 p, in float freq)\n{\n    return\n        // Кажется, умножение двух волн необходимо для кляксообразной формы,..\n        sin(freq*p.x) * sin(freq*p.y)\n        // ...но с третьей частью можно делать все, что вздумается.\n        // (Например, поменять умножения на сложения.)\n        * sin(freq*p.z);\n}\n\n// Применение формулы искажения.\nfloat opDisplace(\n    // Неискаженное расстояние.\n    in float d1,\n    // Точка, от которой измеряется расстояние.\n    // (Честность не требуется, можно ее саму изменить, или не ее.)\n    in vec2 p,\n    // Размер смещения.\n    in float amplitude,\n    // Частота смещений.\n    in float frequency,\n    // Третий параметр.\n\tin float time)\n{\n    float d2 =\n        displacement(vec3(p, time), frequency)\n        * amplitude;\n    return d1 + d2;\n}\n\n// Формула расстояния до прямоугольника.\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    // Convert to [-1, 1].\n    uv = uv * 2. - 1.;\n        \n    float dist = sdBox(uv, vec2(.5, .5));\n    dist = opDisplace(\n        dist,\n        uv,\n        .5,\n        8.,\n        // Эту формулу можно выкинуть и подставить любую другую.\n        // (Например, length(uv + iMouse.xy) / 111. + uv.x / 3.)\n        uv.x / 5. + uv.y / 3. + iTime / 64.);\n    \n    // Внутри — 0, снаружи — 1, на границе — плавный переход.\n    float col = smoothstep(-.02, .02, dist);\n    \n    vec3 color = mix(FG, BG, col);\n    // Output to screen\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}