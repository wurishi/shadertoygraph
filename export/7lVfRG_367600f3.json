{"ver":"0.1","info":{"id":"7lVfRG","date":"1664811341","viewed":103,"name":"Sierpiński Carpet Video Feedback","username":"MrHAX00","description":"A modification of my previous shader rendering the Sierpiński carpet by copying what is on the screen 9 times!","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["fractal","videofeedback"],"hasliked":0,"parentid":"NlVBzy","parentname":"SelfReflectingSquare"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    fragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define pi 3.14159","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define ColorDelta .4\n\nfloat Rectangle(vec2 uv, vec2 Size, vec2 Pos, float Blur) {\n    uv -= Pos;\n    uv /= Size;\n    \n    float XBand = smoothstep(-Size.x - Blur, -Size.x + Blur, uv.x) * smoothstep(Size.x + Blur, Size.x - Blur, uv.x);\n    float YBand = smoothstep(-Size.y - Blur, -Size.y + Blur, uv.y) * smoothstep(Size.y + Blur, Size.y - Blur, uv.y);\n    return XBand * YBand;\n}\n\nvec3 GetColor(float In)\n{\n    In += iTime * .075;\n    In *= pi * 2.;\n    return vec3(cos(In + pi * .666666) * .5 + .5, cos(In + pi * .333333) * .5 + .5, cos(In) * .5 + .5);\n}\n\nfloat Screen(vec2 uv, vec2 Size, vec2 Pos)\n{\n    uv -= Pos;\n    uv /= Size;\n    \n    if (Rectangle(uv, vec2(.7075), vec2(0.), .0001) == 0.) {\n        return .5;\n    }\n    uv = (uv * iResolution.y + .5 * iResolution.xy) / iResolution.xy;\n    \n    return fract((uv.x + uv.y) * ColorDelta + texture(iChannel0, uv).w - ColorDelta);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - iResolution.xy * .5) / iResolution.y;\n    \n    float Sum = 0.;\n    #define Size 1. / 3.\n    for (float Y = -1.; Y < 2.; Y ++) {\n        for (float X = -1.; X < 2.; X++) {\n            Sum += Screen(uv, vec2(Size), vec2(Size * X, Size * Y));\n        }\n    }\n    Sum -= Screen(uv, vec2(Size), vec2(0.));\n    \n    fragColor = vec4(GetColor(Sum), Sum);\n}","name":"Buffer A","description":"","type":"buffer"}]}