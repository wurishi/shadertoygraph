{"ver":"0.1","info":{"id":"4dfyz7","date":"1553664434","viewed":124,"name":"Angry Sun","username":"grumdrig","description":"The sound and appearance of a Julia Set with a small random constant","likes":3,"published":1,"flags":8,"usePreview":0,"tags":["2d","fractal","annoying"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"precision highp float;\nconst int N = 128;\nvec2 f(in vec2 z, in vec2 c) {\n\treturn vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + c;\n}\nfloat niter(in vec2 z, in vec2 c) {\n\tfor (int i = 0; i < N; ++i) {\n\t\tz = f(z, c);\n\t\tif (length(z) > 2.0) {\n\t\t\treturn float(i + 1) - log(log(length(z)) / log(2.0)) / log(2.0);\n\t\t}\n\t}\n\treturn float(N);\n}\nvec3 red(float a) { return vec3(a, 0.0, 0.0); }\nvec3 yellow(float a) { return vec3(1.0, a, 0.0); }\nvec3 green(float a) { return vec3(1.0 - a, 1.0, 0.0); }\nvec3 blue(float a) { return vec3(0.0, 1.0 - a, a); }\nvec3 white(float a) { return vec3(a, a, 1.0); }\nvec3 color(float a) {\n\tif (a <= 0.0) return vec3(0.0);\n\tif (a <= 0.03) return red(a / 0.03);\n\tif (a <= 0.1) return yellow((a - 0.03) / 0.07);\n\tif (a <= 0.2) return green((a - 0.1) / 0.1);\n\tif (a <= 0.4) return blue((a - 0.2) / 0.2);\n\tif (a <= 1.0) return white((a - 0.4) / 0.6);\n\treturn vec3(1.0);\n}\n\nvec3 color2(float a) {\n\tif (a <= 0.0) return vec3(0.0);\n\tif (a <= 0.03) return white(a / 0.03);\n\tif (a <= 0.1) return blue((a - 0.03) / 0.07);\n\tif (a <= 0.2) return green((a - 0.1) / 0.1);\n\tif (a <= 0.4) return yellow((a - 0.2) / 0.2);\n\tif (a <= 1.0) return red((a - 0.4) / 0.6);\n\treturn vec3(0.0);\n}\n\nvec2 rand(float p) {\n    return fract(sin(vec2(p * 12.984 + 23.982,\n                          p * 84.281 + 12.849)) * 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float scale = 0.07;\n    scale += (iMouse.x / iResolution.x) * 0.1;\n\tvec2 c = rand(sin(iTime / 3000.)) * scale;\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2. - 1.;\n    uv.x *= iResolution.x / iResolution.y;\n    uv *= 1.5;\n    vec2 z = uv;\n \tfloat a = niter(z, c) / float(N);\n    \n    vec2 c2 = rand(sin(iTime / 3100.)) * scale;\n    float a2 = niter(z, c2) / float(N);\n    \n\tfragColor = vec4(mix(color(a), color2(a2), 1.),1.0);\n}\n\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"XsfGRr","channel":0}],"code":"const int N = 128;\nvec2 f(in vec2 z, in vec2 c) {\n\treturn vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + c;\n}\nfloat niter(in vec2 z, in vec2 c) {\n\tfor (int i = 0; i < N; ++i) {\n\t\tz = f(z, c);\n\t\tif (length(z) > 2.0) {\n\t\t\treturn float(i + 1) - log(log(length(z)) / log(2.0)) / log(2.0);\n\t\t}\n\t}\n\treturn float(N);\n}\n\nvec2 rand(float p) {\n    return fract(sin(vec2(p * 12.984 + 23.982,\n                          p * 84.281 + 12.849)) * 43758.5453);\n}\n\nvec2 mainSound( in int samp, float time )\n{\n    float scale = 0.07;\n    //scale += (iMouse.x / iResolution.x) * 0.1;\n    vec2 c = rand(sin(time / 3000.)) * scale;\n    vec2 z = vec2(1., 0.);\n\tfloat a = niter(z, c) / float(N);\n    \n    vec2 c2 = rand(sin(time / 3100.)) * scale;\n    vec2 z2 = vec2(0., 1.0);\n    float a2 = niter(z2, c2) / float(N);\n    \n    //return vec2(0,0);\n    return vec2(a,a2) * 0.2;\n}\n","name":"Sound","description":"","type":"sound"}]}