{"ver":"0.1","info":{"id":"wllSzB","date":"1563453659","viewed":548,"name":"Colored Metaballs in 2D","username":"martytram","description":"Recreation of metaballs by Dainiel Shiffman (The coding train) in Processing done as a shader.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["simple","metaballs","colors","train","hsl2rgb","coding"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define BALL_COUNT 40.\n#define TWO_PI 6.2831853\n\n#define COLORIZED\n\n//conversion helper\nfloat f(float n, vec3 hsl){\n    float k = mod(n+hsl.x*12., 12.);\n    float a = hsl.y*min(hsl.z, 1.-hsl.z);\n    return hsl.z-a*max(min(k-3., min(9.-k, 1.)),-1.);\n}\n// hsl in range <0, 1>^3\nvec3 hsl2rgb(vec3 hsl){\n    return vec3(f(0.,hsl), f(8.,hsl), f(4.,hsl));\n}\n\nvec3 hue2rgb(float hue){\n    return hsl2rgb(vec3(hue, 1., .5));\n}\n\n//returns vec4 of pseudo-random numbers\nvec4 N14(float t){\n    vec4 v1 = vec4(123.1, 1024.2, 3456.3, 9564.4);\n    vec4 v2 = vec4(248.5, 4861.6, 545.7, 1643.8);\n    vec4 v3 = vec4(6547.9, 368.1, 1258.2, 3366.3);\n    return fract(sin(t*v1+v2)*v3);\n}\n\n//returns inverse of sum of distances from point p to metaballs on screen\nfloat metaBalls(vec2 p, vec2 screen){\n    float t = iTime*.5;\n    float s = 0.;\n    \n    for(float i = 0.; i < BALL_COUNT; i+=1.){\n        vec4 rnd = N14(i/BALL_COUNT);\n        //random velocity on unit circle\n        vec2 vel = vec2(cos(rnd.x*TWO_PI), sin(rnd.x*TWO_PI));\n        //calculate position in real world\n        vec2 ball = t*vel + rnd.yz*screen;\n        \n        //map it into the screen so it seems like the balls bounce\n        //constrain it in twice the distace to walls\n        ball = mod(ball, 2.*screen);\n        //the abs makes the bouncing effect\n        ball = abs(ball-screen);\n        //calclate dist from point p to ball\n        float d = length(p-ball);\n        //radius in range <4, 8>\n        float radius = rnd.w*4.+4.;\n        s += .001*radius/d;\n    }\n    \n    return 1./s;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy; //<0, 1>\n    float aspect = iResolution.x/iResolution.y;\n    uv.x *= aspect; //correct sizing\n    vec2 screen = vec2(aspect, 1.);\n    \n    vec3 col = vec3(0.);\n    \n    float d = metaBalls(uv, screen);\n    #ifdef COLORIZED\n    \tcol = hue2rgb(d);\n    #else\n        d = clamp(pow(d/2.,2.), 0., 1.);\n        col = vec3(d);\n    #endif\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}