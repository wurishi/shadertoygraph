{"ver":"0.1","info":{"id":"WdlSWN","date":"1551298207","viewed":690,"name":"Lattice-Boltzmann Torch Fire","username":"microwerx","description":"This program does a very simple lattice-boltzmann torch fire effect by advection of neighboring pixel values. To make it interesting, we randomly move the fire source and use a texture to get some fire like color.","likes":3,"published":3,"flags":32,"usePreview":0,"tags":["simulation","latticeboltzmann","torchfire"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n    \n    fragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsX3Rn","filepath":"/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","previewfilepath":"/media/ap/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float rseed;\nvec2 rcoord;\nfloat rand()\n{\n    rseed = fract(sin(rseed + dot(rcoord, vec2(12.9898, 78.233))) * 43758.5453);\n    return rseed;\n}\n\nvec2 rand2()\n{\n    return vec2(rand(), rand());\n}\n\nvec4 source(vec2 xy, float distance)\n{\n    vec2 v = iMouse.xy - (xy + 2.0 * distance * (vec2(-0.5) + rand2()));\n    if (length(v) < distance)\n    {\n        return texture(iChannel1, rand2() + xy/iResolution.xy);\n    }\n    /*\n    if (xy.y <= 5.0){\n        return vec4(.125 * rand(), 0.0, 0.0, 1.0);\n    }\n*/\n    return vec4(0.0);\n}\n\nvec4 latticeBoltzmann(in vec2 fragCoord, in float eta)\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 dp = 1.0 / iResolution.xy;\n    vec4 up = texture(iChannel0, uv + vec2(0.0, -dp.y));\n    vec4 dn = texture(iChannel0, uv + vec2(0.0, 0));\n    vec4 lt = texture(iChannel0, uv + vec2(dp.x, 0.0));\n    vec4 rt = texture(iChannel0, uv + vec2(-dp.x, 0.0));\n    return eta * 0.25 * (up + dn + lt + rt);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    rseed = iTime;// - fract(iTime);\n    vec2 uv = fragCoord/iResolution.xy;\n    rcoord = uv;\n    \n    fragColor = source(fragCoord, 8.0);\n    fragColor += latticeBoltzmann(fragCoord, 0.99);\n}","name":"Buffer A","description":"","type":"buffer"}]}