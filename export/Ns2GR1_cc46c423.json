{"ver":"0.1","info":{"id":"Ns2GR1","date":"1616954839","viewed":83,"name":"Buffer translation and wrapping","username":"dysangel","description":"Test of moving whole pixels around and wrapping around display. Press space to reset for fullscreen","likes":2,"published":1,"flags":112,"usePreview":0,"tags":["pixel"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4tfSWM","filepath":"https://soundcloud.com/noothermedicine/albino-4-sid-version-title-track-for-minimike-c64-game","previewfilepath":"https://soundcloud.com/noothermedicine/albino-4-sid-version-title-track-for-minimike-c64-game","type":"musicstream","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 Q, in vec2 U )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = U/iResolution.xy;\n    \n    // Output to screen\n    Q = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define PI 3.141592653\n\n#define keyboard(k) texelFetch(iChannel1, ivec2(k,0), 0).r>.5\n#define CH_SPC 32\n\n#define y_adjust (iResolution.y / iResolution.x)\n#define x_pixels (1. / iResolution.x)\n#define y_pixels (1. / iResolution.y)\n#define relx(i) (i / iResolution.x)\n#define rely(i) (i / iResolution.y)\n#define rel(i,j) vec2(mod(i / iResolution.x, iResolution.x), mod(j / iResolution.y, iResolution.y))\n\n\nfloat point_in_circle_circumference(vec2 uv, vec2 center, float radius, float thickness) {\n    uv.y = uv.y * y_adjust;\n    \n    if (length(uv - center) >= radius && length(uv - center) <= (radius + thickness)) {\n        return 1. - (length(uv - center) / (radius + thickness));\n    }\n\n    return 0.;\n}\n\nfloat rand(float x) {\n    return fract (iTime + x * 2341.1897);\n}\n\nvoid mainImage( out vec4 Q, in vec2 U )\n{\n    vec2 uv = U/iResolution.xy;\n\n    // radius (screen space)\n    const float radius = 0.15;\n    // thickness (pixels)\n    float thickness = 80./iResolution.x;\n    \n    if (iFrame < 100 || keyboard(CH_SPC))\n    {\n        float point = point_in_circle_circumference(uv, vec2(0.5,(0.5 * y_adjust)), radius, thickness);\n        \n        if (point > 0.05) {\n            Q = point * vec4(uv.x * 2.,uv.y,uv.x * 3.,1.);\n        }\n        else {\n            if (texture(iChannel2, uv).r > 0.9)\n            {\n                float x = rand(uv.x + uv.y);\n                Q = vec4(x + (rand(uv.x - uv.y) * 0.1),x + (rand(uv.x * uv.y) * 0.1),x + (rand(uv.y * uv.y) * 0.1),1.);\n            }\n            else\n            {\n                Q = vec4(0.,0.,0.,0.);\n            }\n        }\n    }\n    else\n    {\n        float x = relx(-4.) + relx(floor((sin(uv.y / 100.) * 1000.)));\n        float y = rely(1.);\n            \n        if (uv.x + x > 1.0) {\n            x = x - 1.;\n        }\n        else if (uv.x + x < 0.) {\n            x = x + 1.;\n        }\n\n        if (uv.y + y > 1.0) {\n            y = y - 1.;\n        }\n        else if (uv.y + y < 0.) {\n            y = y + 1.;\n        }\n            \n        Q = texture(iChannel0, uv + vec2(x, y));\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}