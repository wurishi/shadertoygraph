{"ver":"0.1","info":{"id":"sdcXWM","date":"1633289527","viewed":70,"name":"Smoother and smoother","username":"Dave_Green","description":"Learning the smoothstep","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["smoothstep"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv = 2.0 * uv.xy / iResolution.y; // Aspect ratio\n    \n    vec2 pixel = vec2(fragCoord.xy / iResolution.xy);\n    \n    vec3 bgCol = vec3(0.0);\n    vec3 col1 = vec3(0.216, 0.471, 0.698); // blue\n\tvec3 col2 = vec3(1.00, 0.329, 0.298);  // red\n\tvec3 col3 = vec3(0.867, 0.910, 0.247); // yellow#   \n    vec3 finalPixCol = bgCol;\n    \n    float edge = 0.0;\n    float variable = 0.0;\n    float returnVal = 0.0;\n    \n    // Divide the screen in to 5 parts\n    if(pixel.x < 0.2)\n    {\n        edge = 0.5;\n        returnVal = step(edge, pixel.y);\n    }\n    else if(pixel.x < 0.4)\n    {\n        // Manual smoothstep of sorts\n        float edge1 = 0.4;\n        float edge2 = 0.6;\n        float t1 = (pixel.y - edge1) / (edge2 - edge1);\n        // Clamp t1 val, between min val (0.0) and max val (1.0)\n        float t2 = clamp(t1, 0.0, 1.0);\n        \n        returnVal = t2;\n    }\n    else if(pixel.x < 0.6)\n    {\n        // An slightly better manual smoothstep\n        float edge1 = 0.4;\n        float edge2 = 0.6;\n        float t1 = (pixel.y - edge1) / (edge2 - edge1);\n        float t2 = clamp(t1, 0.0, 1.0);\n        \n        // Previous interpolation was linear.\n        // Visually it does not give an appealing, smooth transition.\n\t\t// To achieve smoothness, implement a cubic Hermite polynomial\n\t\t// 3*t2^2 - 2*t2^3\n        \n        t2 = 3.0*t2*t2 - 2.0*t2*t2*t2;\n        \n        returnVal = t2;\n    }\n    else if(pixel.x < 0.8)\n    {\n        // The actual smoothstep function\n        returnVal = smoothstep(0.4, 0.6, pixel.y);\n    }\n    else\n    {\n        // A smootherstep, by Ken Perlin\n        float edge1 = 0.4;\n        float edge2 = 0.6;\n        float t1 = (pixel.y - edge1) / (edge2 - edge1);\n        float t2 = clamp(t1, 0.0, 1.0);\n        \n        // t2^3(t2(t2*6 - 15) + 10)\n        t2 = t2*t2*t2*(t2*(t2*6.0 - 15.0) + 10.0);\n        \n        returnVal = t2;\n    }\n\n    finalPixCol = vec3(returnVal);\n\n    // Output to screen\n    fragColor = vec4(finalPixCol, 1.0);\n}","name":"Image","description":"","type":"image"}]}