{"ver":"0.1","info":{"id":"wst3z8","date":"1568167925","viewed":787,"name":"Hexagonal Tiling Practice","username":"AlexWalley","description":"Practicing how to tile with different shapes (hexagon)","likes":25,"published":1,"flags":0,"usePreview":0,"tags":["practice"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define FACTOR 20.\n\nfloat HexDist(vec2 p, vec2 id){\n    float t = iTime;\n    mat2 rot = mat2(cos(t-id.x/FACTOR), -sin(t), sin(t), cos(t-id.x/FACTOR));\n    p*=rot*1.3;\n    p = abs(p); // Copy over first quad into all\n    float c = dot(p, normalize(vec2(1,1.73)));// Dot to get correct angle\n    return max(c, p.x); // Find where the vert line and angled intersect\n}\n\nvec4 HexCoords(vec2 uv){\n    vec2 rep = vec2(1, 1.73);\n    vec2 h = rep*0.5;\n    vec2 a = mod(uv, rep)-h;\n    vec2 b = mod(uv-h, rep)-h;\n\n    \n    vec2 gv;\n\tif(length(a) < length(b))\n    \tgv = a;\n    else \n        gv = b;\n    \n    vec2 id = (uv-gv)+FACTOR;\n    float y = 0.5-HexDist(gv, id);\n    return vec4(gv.x, y, id.x, id.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    \n    vec3 col = vec3(0);\n    \n    uv *= FACTOR;\n\tvec4 hexC = HexCoords(uv);\n\tfloat t = mod(iTime, 2000.);\n    col += smoothstep(0.05, 0.1, hexC.y*sin(hexC.w*hexC.z+t));\n    col += smoothstep(0.2, 0.15, hexC.y);\n    col += 0.5-smoothstep(0.15, 0.1, hexC.y);\n    col *= (0.7+sin(((hexC.z)/3.)+iTime)*0.3)*vec3(0.4, 0.7, 1.0);\n    col += vec3(0.3, 0.4, 0.8)*0.2;\n\t\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}