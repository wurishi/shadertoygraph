{"ver":"0.1","info":{"id":"cd2SWc","date":"1671092112","viewed":97,"name":"ychen_rayMarching_combo1","username":"ychen","description":"loop, replicate object and move","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Ray Marching/ Sphere Tracing\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .01\n\nfloat sdCapsule(vec3 p, vec3 a, vec3 b, float r){\n    vec3 ab = b-a;\n    vec3 ap = p-a;\n    float t = dot(ab,ap)/dot(ab,ab);\n    t = clamp(t,0.,1.);\n    vec3 c = a + t*ab;\n    return length(p-c)-r;\n}\n//r contains R and r\nfloat sdTorus(vec3 p, vec2 r){\n    float x = length(p.xz)-r.x;\n    return length(vec2(x,p.y))-r.y;\n    \n}\n\nfloat dBox(vec3 p, vec3 s){\n    return length(max(abs(p)-s,0.));\n}\n\nfloat sdCylinder(vec3 p, vec3 a, vec3 b, float r){\n    vec3 ab = b-a;\n    vec3 ap = p-a;\n    float t = dot(ab,ap)/dot(ab,ab);\n    //t = clamp(t,0.,1.);\n    vec3 c = a + t*ab;\n    float x = length(p-c)-r;\n    float y = (abs(t-.5)-.5)*length(ab);\n    float e = length(max(vec2(x,y),0.));\n    float i = min(max(x,y),0.);\n    return e+i;\n}\n//distance from camera to object\nfloat GetDist(vec3 p){\n    vec4 s = vec4(0,1,6,1);\n    vec3 move = max(vec3(-1,1,6),vec3(0,0,0));\n    float sphereDist = length(p-vec3(0,1,6)-s.xyz)-s.w;\n    float sd = length(p-vec3(1,2,6)-s.xyz)-s.w;\n    float planeDist = p.y;\n    float cd = sdCapsule(p-vec3(-1,-1.75,3),vec3(0,2,6),vec3(3,6,10),.2);\n    float td = sdTorus(p-vec3(2,.3,6),vec2(1.,.3));\n    float bd = dBox(p-vec3(-2,.5,4),vec3(.5));\n    float cyld = sdCylinder(p,vec3(0,.4,3),vec3(5,.4,5),.4);\n    //float d = min(sphereDist,planeDist);\n    float d = min(bd,planeDist);\n    //d = min(d,td);\n    //d = min(d,bd);\n    //d = min(d,sphereDist);\n    //d = min(d,cyld);\n    //d = min(d,sd);\n    //d = min(d,td1);\n    for(int i = 0; i<10;i++){\n        int x = i+1;\n        int y = i-2;\n        td = sdTorus(p-vec3(-1+i,-1+i,4+i),vec2(1.,.3));\n        float bd = dBox(p-vec3(-3+i,-1+i,10+i),vec3(3,1,1));\n        float cd = sdCapsule(p-vec3(-3+i,-3+i,-6+i),vec3(2,5,10),vec3(2,1,10),.1);\n        float cyld = sdCylinder(p-vec3(-i,-1+i,i),vec3(2-i,2,3),vec3(0,1.5,5),.2);\n        d = min(d,td);\n        d = min(d,bd);\n        d = min(d,cd);\n        d = min(d,cyld);\n    }\n    //d = min(d,td);\n    \n    return d;\n}\n\n//ro:ray orgin; rd: ray direction; p: blue conter point each time of sphere tracing\n//input: origin point & direction; output: distance to object\nfloat RayMarch(vec3 ro, vec3 rd){\n    float  dO=0.;//step?\n    for(int i=0;i<MAX_STEPS;i++){\n        vec3 p = ro + rd*dO;// location of step\n        float dS = GetDist(p);//distance to the closest object\n        dO += dS;//location/step++\n        if(dO>MAX_DIST || dS<SURF_DIST) break;\n    }\n    return dO;\n}\n\n//light system\n    //normal vector,perpendicular to surface\nvec3 GetNormal(vec3 p){\n    float d = GetDist(p);\n    vec2 e = vec2(.01,0);\n    vec3 n = d-vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx)\n    );\n    return normalize(n);\n}\n    //light vector\nfloat GetLight(vec3 p){\n    vec3 lightPos = vec3(0,5,6);\n    lightPos.xz += vec2(sin(iTime),cos(iTime))*2.;\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    //float dif = dot(n,l);//-1,1\n    float dif = clamp(dot(n,l),0.,1.);//0,1\n    //shadow\n    float d = RayMarch(p+n*SURF_DIST*2.,l);\n    if(d<length(lightPos-p)) dif *= .1;\n    \n    return dif;\n    // p = surfacePos\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;//make zero uv in the middle\n    vec3 col = vec3(0);\n    \n    vec3 ro = vec3(0,2,0);//position of camera\n    vec3 rd = normalize(vec3(uv.x,uv.y-.2,1));//ray direction /camera\n    float d = RayMarch(ro,rd);\n    vec3 p = ro + rd*d;\n    float dif =  GetLight(p);\n    col = vec3(dif);\n    col.rb /=iTime;\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}