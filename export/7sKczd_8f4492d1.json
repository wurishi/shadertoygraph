{"ver":"0.1","info":{"id":"7sKczd","date":"1655431485","viewed":113,"name":"complex polynomials","username":"fihade","description":"complex polynomials","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["complexpolynomial"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"precision mediump float;\n\n\nuniform vec2 u_resolution;\nuniform float u_time;\n\n#define PI 3.1415926535897932384626433832795\n\n#define cx_mul(a, b) vec2(a.x*b.x - a.y*b.y, a.x*b.y + a.y*b.x)\n#define cx_div(a, b) vec2(((a.x*b.x + a.y*b.y)/(b.x*b.x + b.y*b.y)),((a.y*b.x - a.x*b.y)/(b.x*b.x + b.y*b.y)))\n#define cx_sin(a) vec2(sin(a.x) * cosh(a.y), cos(a.x) * sinh(a.y))\n#define cx_cos(a) vec2(cos(a.x) * cosh(a.y), -sin(a.x) * sinh(a.y))\n\nvec2 cx_tan(vec2 a) {return cx_div(cx_sin(a), cx_cos(a)); }\nvec2 cx_log(vec2 a) {\n    float rpart = sqrt((a.x*a.x)+(a.y*a.y));\n    float ipart = atan(a.y,a.x);\n    if (ipart > PI) ipart=ipart-(2.0*PI);\n    return vec2(log(rpart),ipart);\n}\n\nvec2 as_polar(vec2 z) {\n  return vec2(\n    length(z),\n    atan(z.y, z.x)\n  );\n}\nvec2 cx_pow(vec2 v, float p) {\n  vec2 z = as_polar(v);\n  return pow(z.x, p) * vec2(cos(z.y * p), sin(z.y * p));\n}\n\nfloat im(vec2 z) {\n  return ((atan(z.y, z.x) / PI) + 1.0) * 0.5;\n}\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos(2.*PI*(c*t+d));\n}\n\n// Define our points\nvec2 a0 = vec2(0.32, -0.45);\nvec2 a1 = vec2(-0.49, -0.32);\nvec2 a2 = vec2(-0.31, 0.38);\nvec2 a3 = vec2(-0.12, 0.04);\n\nvec2 b0 = vec2(-0.71, 0.53);\nvec2 b1 = vec2(0.01, 0.23);\nvec2 b2 = vec2(-0.24, 0.31);\nvec2 b3 = vec2(-0.01, -0.42);\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy - 0.5 * iResolution.xy) / min(iResolution.y, iResolution.x);\n    vec2 z = uv * 2.;\n\n    vec2 polyA = a0\n        + cx_mul(a1, z)\n        + cx_mul(a2, cx_pow(z, 2.0))\n        + cx_mul(a3, cx_pow(z, 3.0));\n\n    vec2 polyB = b0\n        + cx_mul(b1, z)\n        + cx_mul(b2, cx_pow(z, 2.))\n        + cx_mul(b3, cx_pow(z, 3.));\n\n    vec2 polyC = b0\n        + cx_mul(b1, z)\n        + cx_mul(b2, cx_pow(z, 5.))\n        + cx_mul(b3, cx_pow(z, 4.));\n    // Calculate the ratio\n    vec2 result = cx_div(polyA, polyB);\n    result = cx_div(result, polyC);\n    float imaginary = cx_log(result).y;\n    float col = (imaginary / PI);\n\n    fragColor = vec4(pal(col, vec3(.92,.45,.61),vec3(.40,.42,.1),vec3(.26,.30,.5),vec3(.15,.4,.4)),1.0);\n}","name":"Image","description":"","type":"image"}]}