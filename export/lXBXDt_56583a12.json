{"ver":"0.1","info":{"id":"lXBXDt","date":"1711214447","viewed":124,"name":" pixel trail interaction","username":"jyze","description":" pixel trail interaction","likes":2,"published":3,"flags":32,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Load the state from buffer A\n    vec4 state = texture(iChannel0, fragCoord / iResolution.xy);\n    \n    vec4 t = texture(iChannel1, fragCoord / iResolution.xy);\n\n    // Check if the current time is less than 1.2 seconds after the pixel became violet\n    // and ensure that state.a is not zero (not yet affected)\n    if (iTime - state.a < 1.2 && state.a > 0.01) { // Use a small epsilon to check for \"non-affected\" state\n        // If yes, the pixel remains violet\n        fragColor = mix(t, vec4(state.rgb, 1.0), 1.0);\n    } else {\n        // Otherwise, the pixel becomes white\n        fragColor = mix(t, vec4(1.0, 1.0, 1.0, 1.0), 0.0); // Background color white\n    }\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Load the current pixel state from the buffer\n    vec4 currentState = texture(iChannel0, fragCoord / iResolution.xy);\n\n    // Get the mouse position and normalize it\n    vec2 mouse = iMouse.xy / iResolution.xy;\n\n    // Normalize fragCoord coordinates to be proportional to the resolution\n    vec2 normFragCoord = fragCoord / iResolution.xy;\n    vec2 aspectRatio = vec2(iResolution.x / iResolution.y, 1.0);\n\n    // Adjust the detection radius for window proportions\n    float radius = 70.0 / iResolution.y;\n\n    // Calculate the distance taking into account the aspect ratio for a circular detection zone\n    float dist = length((normFragCoord - mouse) * aspectRatio);\n\n    // Generate a random number based on the pixel position and time\n    float random = fract(sin(dot(fragCoord.xy + vec2(iTime), vec2(12.9898, 78.233))) * 43758.5453);\n\n    // Only a portion of the pixels under the circular detection zone become purple\n    if (dist < radius && random > 0.9) { // Adjust the threshold to control the sparsity\n        // If close to the mouse and selected by the random factor, turn purple\n        fragColor = vec4(0.0, 0.0, 0.0, iTime);\n    } else {\n        // Otherwise, maintain the current state\n        fragColor = currentState;\n    }\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // Define the purple and white colors\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 white = vec3(0.0, 0.0, 0.0);\n\n//1 // Centered and normalized coordinates\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    // Compute the distance from the center\n    float distance = length(uv);\n    \n//2 // follow mouse position\n    //vec2 mousePos = iMouse.xy / iResolution.xy;\n    //vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    //float distance = length(uv-mousePos+0.5);\n\n    // Generate a random value based on the fragment coordinate\n    // Use a hash or noise function for better quality\n    float noise = fract(sin(dot(fragCoord.xy, vec2(12.9898, 78.233))) * 112958.5453);\n\n    // Define a threshold that decreases with the distance from the center\n    float threshold = 1.1 - distance;\n\n    // Choose the color based on the noise and the threshold\n    vec3 color = (noise < threshold) ? c : white;\n\n    // Output the color\n    fragColor = vec4(color, 1.0);\n}\n","name":"Buffer B","description":"","type":"buffer"}]}