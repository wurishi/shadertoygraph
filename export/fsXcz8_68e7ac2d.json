{"ver":"0.1","info":{"id":"fsXcz8","date":"1641684394","viewed":100,"name":"YT_Outro","username":"MrHAX00","description":"Second shader I've ever made!\n\nI'm ok with anyone using it as long as I'm given credit.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["youtube","yt","outro"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define pi 3.1415926535897932384626433832795\n#define pid5 1.5707963267948966192313216916398\n#define map01(x) clamp(x, 0., 1.)\n\n#define Circle(uv, Pos, Radius, Blur) smoothstep(Radius + Blur, Radius - Blur, length(uv - Pos));\n\nfloat Rectangle(vec2 uv, vec2 Pos, vec2 Size, float Blur) {\n    uv -= Pos;\n    uv /= Size;\n    \n    float XBand = smoothstep(-Size.x - Blur, -Size.x + Blur, uv.x) * smoothstep(Size.x + Blur, Size.x - Blur, uv.x);\n    float YBand = smoothstep(-Size.y - Blur, -Size.y + Blur, uv.y) * smoothstep(Size.y + Blur, Size.y - Blur, uv.y);\n    return XBand * YBand;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //Normalising cordinates.\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv -= .5;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    //To make it so a rotation takes 4 seconds and the openning transission reset evey 30 seconds or so.\n    float iTime = mod(iTime * pid5, pi * 16.5);\n    \n    //Channel icon and videos.\n    vec2 CircleDis = vec2(cos(iTime), cos(iTime - pid5)) * cos(iTime) * .0025;\n    float MagentaCircle = Circle(uv, vec2(.71125, -.211) + CircleDis, .145, .0025);\n    float CyanCircle = Circle(uv, vec2(.71125, -.211) - CircleDis, .145, .0025);\n    \n    \n    float VideoBend1 = cos(iTime * 3.) * .01;\n    float VideoBend2 = cos((iTime - .4) * 3.) * .01;\n    \n    float Video1Cyan = Rectangle(vec2(\n            uv.x - uv.y * VideoBend1,\n            uv.y - uv.x * VideoBend1\n        ),\n        vec2(-.5605, .206),\n        vec2(.54, .411),\n        .00125\n    );\n    \n    float Video1Magenta = Rectangle(vec2(\n            uv.x - uv.y * VideoBend2,\n            uv.y - uv.x * VideoBend2\n        ),\n        vec2(-.5605, .206),\n        vec2(.54, .411),\n        .00125\n    );\n    \n    float Video2Cyan = Rectangle(vec2(\n            uv.x - uv.y * VideoBend1,\n            uv.y - uv.x * VideoBend1\n        ),\n        vec2(-.5605, -.1875),\n        vec2(.54, .411),\n        .00125\n    );\n    \n    float Video2Magenta = Rectangle(vec2(\n            uv.x - uv.y * VideoBend2,\n            uv.y - uv.x * VideoBend2\n        ),\n        vec2(-.5605, -.1875),\n        vec2(.54, .411),\n        .00125\n    );\n    \n    float Openning = -cos(clamp(iTime, 0., pi) + clamp(iTime - pi * 15., 0., pi)) * .4675 + .4675;\n    \n    float BorderCyan = Rectangle(vec2(\n            uv.x - uv.y * VideoBend1,\n            uv.y - uv.x * VideoBend1\n        ),\n        vec2(0.),\n        vec2(Openning, .695),\n        .00125\n    );\n    \n    float BorderMagenta = Rectangle(vec2(\n            uv.x - uv.y * VideoBend2,\n            uv.y - uv.x * VideoBend2\n        ),\n        vec2(0.),\n        vec2(Openning, .695),\n        .00125\n    );\n    \n    //Background.\n    uv += cos(mod(iTime * .5, pi)) * .5;\n    uv = mod(uv, .1) * 10.; //Why draw a dozen of rectangles when you could just 'mirror' one accross the entire screen?\n    \n    float MagentaBend = cos((iTime) * 3.) * .2;\n    float Magenta = Rectangle(\n        vec2(\n            uv.x - uv.y * MagentaBend,\n            uv.y - uv.x * MagentaBend\n        ),\n        vec2(.5),\n        vec2(cos(iTime) * .15 + .4),\n        .025\n    );\n    \n    iTime -= .2;\n    float CyanBend = cos(iTime * 3.) * .2;\n    float Cyan = Rectangle(\n        vec2(\n            uv.x - uv.y * CyanBend,\n            uv.y - uv.x * CyanBend\n        ),\n        vec2(.5),\n        vec2(cos(iTime) * .15 + .4),\n        .025\n    );\n    \n    float Corners = 1. - Rectangle(\n        uv,\n        vec2(.5),\n        vec2(.69),\n        .0001\n    );\n    \n    uv = abs(uv * 2. - 1.); //Even more mirroring!\n    Corners *= Rectangle(\n        uv,\n        vec2(1.),\n        vec2(.6),\n        .0001\n    );\n    \n    //Mixing and outputting all the colors.\n    float Color_B = cos(iTime - pi) * .05;\n    vec3 Color = vec3(cos(iTime) * .05 + .55, .3 - Color_B, Color_B + .55)* (1. - Corners);\n    Color += Corners;\n    \n    float Negate = map01(Cyan + Magenta);\n    Color *= 1. - Negate;\n    Color += vec3(Magenta, Cyan, Negate);\n    Color *= 1. - map01(CyanCircle * MagentaCircle) * .7;\n    Color += vec3(MagentaCircle, CyanCircle, map01(CyanCircle + MagentaCircle)) * .7;\n    \n    Negate = map01(Video1Cyan + Video1Magenta);\n    Color *= 1. - Negate * .7;\n    Color += vec3(Video1Magenta, Video1Cyan, Negate) * Negate * .7;\n    \n    Negate = map01(Video2Cyan + Video2Magenta);\n    Color *= 1. - Negate * .7;\n    Color += vec3(Video2Magenta, Video2Cyan, Negate) * Negate * .7;\n    \n    Negate = map01(BorderCyan + BorderMagenta);\n    Color *= Negate;\n    Color += vec3(1. - BorderMagenta, 1. - BorderCyan, map01(2. - BorderCyan - BorderMagenta));\n    \n    fragColor = vec4(Color, 1.);\n}","name":"Image","description":"","type":"image"}]}