{"ver":"0.1","info":{"id":"tlyfRd","date":"1614960243","viewed":84,"name":"Interactive Mandelbrot","username":"philipnelson5","description":"Interactive Mandelbrot set viewer.\n\nClick and drag a box to zoom in.\nPress \"r\" to reset the viewing frame","likes":2,"published":1,"flags":48,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_ITERS 1000\n\nvec4 loadValue( in ivec2 re )\n{\n    return texelFetch( iChannel0, re, 0 );\n}\n\nfloat interpolate(float i,float n,float min,float max)\n{\n    return (i * (max - min) / n) + min;\n}\n\nvec3 drawRect(in vec2 bottom_left, in vec2 top_right, in float line_width, in vec2 texCoord, in vec3 color)\n{\n    vec2 top_right_ = vec2(1.0) - top_right;\n    \n    vec2 left_bottom = smoothstep(bottom_left, bottom_left + vec2(line_width), texCoord);\n    vec2 right_top = smoothstep(top_right_, top_right_ + vec2(line_width), 1.0 - texCoord);\n    \n    vec2 left_bottom_inside = vec2(0.);\n    vec2 right_top_inside = vec2(0.0);\n    \n\tleft_bottom_inside = smoothstep(bottom_left - vec2(line_width), bottom_left, texCoord);\n    right_top_inside = smoothstep(top_right_ - vec2(line_width), top_right_, 1.0 - texCoord);    \n    \n    float pctOuter = left_bottom.x * right_top.x * left_bottom.y * right_top.y; \n    float pctInside = left_bottom_inside.x * right_top_inside.x * left_bottom_inside.y * right_top_inside.y; \n \n    float pct = pctInside - pctOuter;\n    vec3 inside_color = vec3(1., 1., 1.);\n    vec3 final_color = (1.0 - pct) * color + pct * inside_color;\n    return final_color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 st = fragCoord.xy/iResolution.xy;\n    vec3 col = vec3(0.0);\n\tvec2 p = fragCoord / iResolution.x;\n    vec4 m = vec4(iMouse.x / iResolution.x, iMouse.y / iResolution.y, iMouse.z / iResolution.x, iMouse.w / iResolution.y);\n    vec4 ms = abs(m);\n    \n    vec4 frame = loadValue(txFrame);\n    vec4 lMouse = loadValue(txMouse2);\n    \n    float X_MAX = frame[0];\n    float X_MIN = frame[1];\n    float Y_MAX = frame[2];\n    float Y_MIN = frame[3];\n    \n    float xtemp;\n    float x0 = interpolate(fragCoord.x, iResolution.x, X_MIN, X_MAX);\n    float y0 = interpolate(fragCoord.y, iResolution.y, Y_MIN, Y_MAX);\n    \n    float x = 0.0;//(iMouse.x/iResolution.x-0.5)*2.5;\n    float y = 0.0;//(iMouse.y/iResolution.y-0.5)*2.5;\n    int iters = 0;\n\n    while (x * x + y * y < 256.0 && iters <= MAX_ITERS)\n    {\n        xtemp = x * x - y * y + x0;\n        y = 2.0 * x * y + y0;     \n        x = xtemp;\n        ++iters;\n    }\n\n    if (iters <= MAX_ITERS) {\n        vec2 z = vec2(x,y);\n        float l = float(iters);\n        \n        // equivalent optimized smooth interation count\n        float sl = l - log2(log2(dot(z,z))) + 4.0;\n        float al = smoothstep( -0.1, 0.0, 1.0 );\n        l = mix( l, sl, al );\n        col += 0.5 + 0.5*cos( 3.0 + l*0.15 + vec3(0.0,0.6,1.0));\n    }\n        \n    if( m.z > 0.0 ) { // mouse button is down\n        if (ms.x > ms.z && ms.y > ms.w) col = drawRect(ms.zw, ms.xy, 0.003, st, col);\n        else if (ms.x > ms.z && ms.y < ms.w) col = drawRect(ms.zy, ms.xw, 0.003, st, col);\n        else if (ms.x < ms.z && ms.y > ms.w) col = drawRect(ms.xw, ms.zy, 0.003, st, col);\n        else if (ms.x < ms.z && ms.y < ms.w) col = drawRect(ms.xy, ms.zw, 0.003, st, col);\n\t}\n      \n    fragColor = vec4(col, 1.0);\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define KEY_R 82\n\n#define keyToggle(ascii)  ( texelFetch(iChannel1,ivec2(ascii,2),0).x > 0.)\n#define keyDown(ascii)    ( texelFetch(iChannel1,ivec2(ascii,1),0).x > 0.)\n#define keyClick(ascii)   ( texelFetch(iChannel1,ivec2(ascii,0),0).x > 0.)\n\n#define shift             ( texelFetch(iChannel1,ivec2(16,0),0).x  > 0.)\n#define ctrl              ( texelFetch(iChannel1,ivec2(17,0),0).x  > 0.)\n#define alt               ( texelFetch(iChannel1,ivec2(18,0),0).x  > 0.)\n#define modifier          ( int(shift) +2*int(ctrl) + 4*int(alt) )\n\nvec4 loadValue( in ivec2 re )\n{\n    return texelFetch( iChannel0, re, 0 );\n}\n\nvoid storeValue( in ivec2 re, in vec4 va, inout vec4 fragColor, in ivec2 fragCoord )\n{\n    fragColor = ( re.x==fragCoord.x && re.y==fragCoord.y ) ? va : fragColor;\n}\n\nfloat interpolate(float i,float n,float min,float max)\n{\n  return (i * (max - min) / n) + min;\n}\n\nvec4 newFrame(vec2 bottom_left, vec2 top_right, vec4 frame) \n{\n    float X_MAX = interpolate(top_right.x,   1., frame[1], frame[0]);\n    float X_MIN = interpolate(bottom_left.x, 1., frame[1], frame[0]);\n    float Y_MAX = interpolate(top_right.y,   1., frame[3], frame[2]);\n    float Y_MIN = Y_MAX - (X_MAX - X_MIN) * iResolution.y / iResolution.x;\n    return vec4(X_MAX,X_MIN,Y_MAX,Y_MIN);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 ifragCoord = ivec2( fragCoord-0.5 );\n\n    fragColor = texture(iChannel0, fragCoord);\n    \n    vec4 frame = loadValue(txFrame);\n    vec4 lMouse1 = loadValue(txMouse1);\n    vec4 lMouse2 = loadValue(txMouse2);\n\n    \n    vec4 m = iMouse / iResolution.x;\n    \n    if (iMouse.z < 0.0 && lMouse1.z > 0.0) { // button was down last frame\n        vec4 m = vec4(iMouse.x / iResolution.x, iMouse.y / iResolution.y, iMouse.z / iResolution.x, iMouse.w / iResolution.y);\n        vec4 ms = abs(m);\n        if (ms.x > ms.z && ms.y > ms.w)      frame = newFrame(ms.zw, ms.xy, frame);\n        else if (ms.x > ms.z && ms.y < ms.w) frame = newFrame(ms.zy, ms.xw, frame);\n        else if (ms.x < ms.z && ms.y > ms.w) frame = newFrame(ms.xw, ms.zy, frame);\n        else if (ms.x < ms.z && ms.y < ms.w) frame = newFrame(ms.xy, ms.zw, frame);\n    } \n\n\n    storeValue(txFrame, frame, fragColor, ifragCoord);\n    storeValue(txMouse1, iMouse, fragColor, ifragCoord);\n    storeValue(txMouse2, lMouse1, fragColor, ifragCoord);\n    \n    if(keyClick(KEY_R))\n    {\n        storeValue(txFrame, vec4(1.25, -2.25, 1.0, -1.0), fragColor, ifragCoord);\n    }\n    \n    // initialize\n    if (iFrame == 0) {\n        storeValue(txFrame, vec4(1.25, -2.25, 1.0, -1.0), fragColor, ifragCoord);\n    }\n    \n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"const ivec2 txFrame       = ivec2(31, 1);\nconst ivec2 txMouse1      = ivec2(31, 3);\nconst ivec2 txMouse2      = ivec2(31, 5);","name":"Common","description":"","type":"common"}]}