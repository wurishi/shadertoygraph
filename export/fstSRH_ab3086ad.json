{"ver":"0.1","info":{"id":"fstSRH","date":"1632630461","viewed":1617,"name":"Voxels Explained","username":"Xor","description":"This is the cleaned and commented version of my [url=https://www.shadertoy.com/view/sstXRn]tiny voxel tracer[/url]\nI hope you find something useful in here!","likes":33,"published":1,"flags":0,"usePreview":0,"tags":["voxel","golf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Compressed version: https://www.shadertoy.com/view/sstXRn\n\n//Voxel map (approximate SDF)\nfloat map(vec3 pos)\n{\n    return length(mod(pos,18.0)-9.0) - 9.5+sin(pos.z*0.3-iTime*0.1);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 res = iResolution.xy;   //View resolution\n    \n    vec3 cam = vec3(sin(iTime*0.2+res), iTime),         //Camera position\n    pos = cam,                                          //Pixel position\n    ray = normalize(vec3(fragCoord*2.0 - res, res.y)),  //Ray direction\n    cell = vec3(0,0,0);                                 //Voxel cell\n    \n    //Step up to 100 voxels.\n    for(int i = 0; i<100; i++)\n    {\n        //Axis distance to nearest cell (with a small bias).\n        vec3 dist = fract(-pos * sign(ray)) + 1e-4,\n        //Alternative version (produces artifacts after a while)\n        //vec3 dist = 1.0-fract(pos * sign(ray)),\n        //Raytraced distance to each axis.\n        leng = dist / abs(ray),\n        //Nearest axis' raytrace distance (as a vec3).\n        near = min(leng.xxx, min(leng.yyy, leng.zzz));\n        \n        //Step to the nearest voxel cell.\n        pos += ray * near;\n        //Get the cell position (center of the voxel).\n        cell = ceil(pos) - 0.5;\n        //Stop if we hit a voxel.\n        if (map(cell) < 0.0) break;\n    }\n\n    //Rainbow color based off the voxel cell position.\n    vec3 color = sin(cell.z+vec3(0,2,4)) * 0.5 + 0.5;\n    //Square for gamma encoding.\n    color *= color;\n    \n    //Compute cheap ambient occlusion from the SDF.\n    float ao = smoothstep(-1.0, 1.0, map(pos)),\n    //Fade out to black using the distance.\n    fog = min(1.0, exp(1.0 - length(pos-cam)/8.0));\n    \n    //Output final color with ao and fog (sqrt for gamma correction).\n    fragColor = vec4(sqrt(color * ao * fog),1);\n}","name":"Image","description":"","type":"image"}]}