{"ver":"0.1","info":{"id":"DlGGWy","date":"1684524618","viewed":58,"name":"moon idk","username":"NikoAnimation","description":"ye","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"clGGDG","parentname":"Ray Marching Attempt #3 (wip)"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// INIT VARS:\n\nvec3 camPos = vec3(0.0, 0.0, 0.0);\nvec2 camAngle = vec2(0.0, 0.0);\nfloat fov = 0.25; // <-- 90*  0-1 == 0-360\n\nfloat minDELength = 0.0001;\nfloat maxRayLength = 1000.0;\n\nvec2 lightAng = vec2(0.5, 0.5);\n\nfloat sphere_de(vec3 pos, vec3 objPos, float radius) {\n    return length(pos-objPos)-radius;\n}\nvec3 ray_move(vec3 pos, vec2 dir, float dist) {\n    pos.x += cos(dir.x)*dist;\n    pos.y += sin(dir.x)*dist;\n    pos.z += sin(dir.y)*dist;\n    return pos;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Calculate aspect ratio (assumes width is higher than height)\n    float aspectRatio = iResolution.x / iResolution.y;\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 suv = (uv*2.0)-1.0; // Signed screen coordinates (-1 - +1)\n    suv.x *= aspectRatio; // Account for aspect ratio\n\n    // Get ray angle\n    \n    vec3 rayPos = camPos;\n    vec2 rayAng = mod((fov*suv + camAngle)+1.0,2.0)-1.0; // mod values for correct angle\n    \n    float b;\n    \n    lightAng = vec2(iTime, 0.0);\n    \n    float de;\n    float totalDist;\n    do {\n        de = sphere_de(rayPos, vec3(5.0, 0.0, 0.0), 1.0);\n        rayPos = ray_move(rayPos, rayAng, de);\n        totalDist += de;\n    } while (de > minDELength && totalDist < maxRayLength);\n    \n    if (de < minDELength) {\n        \n        rayPos = ray_move(rayPos, rayAng, -minDELength*2.0);\n        rayAng = lightAng;\n        \n        totalDist = 0.0;\n        do {\n            de = sphere_de(rayPos, vec3(5.0, 0.0, 0.0), 1.0);\n            rayPos = ray_move(rayPos, rayAng, de);\n            totalDist += de;\n        } while (de > minDELength && totalDist < maxRayLength);\n        \n        if (de < minDELength) {\n            b = 0.8;\n        }\n        if (totalDist > maxRayLength) {\n            b = 1.0;\n        }\n        \n    } if (totalDist > maxRayLength) {\n        b = 0.0;\n    }\n    \n\n    // Output to screen\n    fragColor = vec4(b, b, b, 1.0);\n}","name":"Image","description":"","type":"image"}]}