{"ver":"0.1","info":{"id":"mdl3R8","date":"1666259840","viewed":140,"name":"Polygon with rounded corners","username":"Arlorean","description":"Distance to an arbitrary polygon with rounded corners.\n\nbased on [url]https://www.shadertoy.com/view/wdBXRW[/url]","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["2d","sdf","distance","polygon","rounded"],"hasliked":0,"parentid":"wdBXRW","parentname":"Polygon - distance 2D"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright © 2019 Inigo Quilez\n// Copyright © 2022 Adam Davidson\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Fork of https://www.shadertoy.com/view/wdBXRW\n\nconst int N = 6;\n\n// https://www.shadertoy.com/view/3ltSW2\nfloat sdCircle( in vec2 p, in float r ) {\n    return length(p)-r;\n}\n\n// https://www.shadertoy.com/view/3tdSDj\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b ) {\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\n// Copyright 2001, 2012, 2021 Dan Sunday\n// This code may be freely used and modified for any purpose\n// providing that this copyright notice is included with it.\n// There is no warranty for this code, and the author of it cannot\n// be held liable for any real or imagined damage from its use.\n// Users of this code must verify correctness for their application.\n//\n// isLeft(): tests if a point is Left|On|Right of an infinite line.\n//    Input:  three points A, B, and P\n//    Return: >0 for P left of the line through A and B\n//            =0 for P on the line\n//            <0 for P right of the line\nfloat isLeft( vec2 A, vec2 B, vec2 P ) {\n    return ( (B.x - A.x) * (P.y - A.y)\n            -(P.x - A.x) * (B.y - A.y) );\n}\n\nbool isPointInArc(vec2 A, vec2 B, vec2 C, vec2 P) {\n    return (isLeft(C, A, P) > 0.0 && isLeft(C, B, P) < 0.0);\n}\n\n// Distance to a arbitrary polygon with rounded corners of radius 'r'. (Adam Davidson)\nfloat sdPolygonRounded( in vec2 P, in vec2[N] v, in float r )\n{\n    // Winding number multiplier\n    float s = 1.0;\n    \n    // Calculate arc distances\n    vec2 A[N]; // Arc start points\n    vec2 B[N]; // Arc end points\n    float d = 1000000.0;\n    for (int i=0; i < N; i++) {\n        vec2 V1 = v[(i-1+N)%N];\n        vec2 V2 = v[i];\n        vec2 V3 = v[(i+1+N)%N];\n        \n        // https://computergraphics.stackexchange.com/questions/5910/rounding-corners-of-polygon-given-vertices-of-its-corners\n        vec2 a = normalize(V2-V1);\n        vec2 b = normalize(V2-V3);\n        float halfang = acos(dot(a, b))/2.;\n        float c = (r / sin(halfang));\n        vec2 C = V2 - c * normalize((a+b)/2.);\n        A[i] = V2 - r/tan(halfang)*a;\n        B[i] = V2 - r/tan(halfang)*b;\n        \n        bool isConvex = isLeft(V1,V2,V3) < 0.0;\n        a = isConvex ? A[i] : B[i];\n        b = isConvex ? B[i] : A[i];\n        \n        if (isPointInArc(b, a, C, P)) {\n            d = min(d, abs(sdCircle(P-C, r))); \n        }\n        \n        // winding number from http://geomalgorithms.com/a03-_inclusion.html\n        if (P.y > C.y-r && P.y < C.y+r) {\n            float roots = sqrt(r*r - (P.y-C.y)*(P.y-C.y));\n            vec2 C1 = vec2(C.x + roots, P.y);\n            vec2 C2 = vec2(C.x - roots, P.y);\n            if (P.x < C1.x && isPointInArc(b, a, C, C1)) {\n                s = -s;\n            }\n            if (P.x < C2.x && isPointInArc(b, a, C, C2)) {\n                s = -s;\n            }\n        }\n    }\n    \n    // Calculate line segment distances\n    for( int i=0, j=N-1; i<N; j=i, i++ ) {\n        vec2 e = B[j] - A[i];\n        vec2 w =    P - A[i];\n        \n        d = min(d, sdSegment(P, B[j], A[i]));\n\n        // winding number from http://geomalgorithms.com/a03-_inclusion.html\n        bvec3 cond = bvec3( P.y>=A[i].y, \n                            P.y <B[j].y, \n                            e.x*w.y>e.y*w.x );\n        if( all(cond) || all(not(cond)) ) s=-s;  \n    }\n    \n    return s*d;\n}\n\n// Distance to a arbitrary polygon, without trigonometric functions.  (Original code)\nfloat sdPolygon( in vec2 p, in vec2[N] v )\n{\n    const int num = v.length();\n    float d = dot(p-v[0],p-v[0]);\n    float s = 1.0;\n    for( int i=0, j=num-1; i<num; j=i, i++ )\n    {\n        // distance\n        vec2 e = v[j] - v[i];\n        vec2 w =    p - v[i];\n        vec2 b = w - e*clamp( dot(w,e)/dot(e,e), 0.0, 1.0 );\n        d = min( d, dot(b,b) );\n\n        // winding number from http://geomalgorithms.com/a03-_inclusion.html\n        bvec3 cond = bvec3( p.y>=v[i].y, \n                            p.y <v[j].y, \n                            e.x*w.y>e.y*w.x );\n        if( all(cond) || all(not(cond)) ) s=-s;  \n    }\n    \n    return s*sqrt(d);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;   \n    \n    float s = 0.015;\n    vec2 v0 = vec2(50.77, 6.5)*s;\n\tvec2 v1 = vec2(51.1, -47.4)*s;\n\tvec2 v2 = vec2(0.9, -50)*s;\n\tvec2 v3 = vec2(-43.4, -42.8)*s;\n    vec2 v4 = vec2(-37.6, 3.3)*s;\n    vec2 v5 = vec2(-15.93, -41.7)*s;\n    float radius = 8.0*s;    \n        \n    // add more points\n    vec2[] polygon = vec2[](v0,v1,v2,v3,v4,v5);\n    \n\tfloat d = sdPolygonRounded(p, polygon, radius);\n\n    vec3 col = (d>0.0) ? vec3(0.9,0.6,0.3) : vec3(0.65,0.85,1.0);\n\tcol *= 1.0 - exp(-6.0*abs(d));\n\tcol *= 0.8 + 0.2*cos(140.0*d);\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.015,abs(d)) );\n    \n    if( iMouse.z>0.001 )\n    {\n    d = sdPolygonRounded( m, polygon, radius );\n    col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, abs(length(p-m)-abs(d))-0.0025));\n    col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, length(p-m)-0.015));\n    }\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}