{"ver":"0.1","info":{"id":"4tdSzl","date":"1481202099","viewed":223,"name":"eye of horus","username":"zproxy","description":"from \nhttps://www.shadertoy.com/view/MldXzf\nhttps://www.shadertoy.com/view/4tcSRs\n\nintel4600 runs at 20fps in a small window\ninkscape svg path was triangulated","likes":7,"published":1,"flags":32,"usePreview":0,"tags":["raymarching","polygon","buffer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\t\n    vec4 A = texture(iChannel0, uv);\n    vec4 B = texture(iChannel1, uv);\n    vec4 C = texture(iChannel2, uv);\n    vec4 D = texture(iChannel3, uv);\n    \n    \n    fragColor = A + B +C + D;\n    //fragColor = C;\n//        fragColor = vec4(05, 0,0,0);\n    //fragColor = vec4(uv,0.5+0.5*sin(iTime),1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// \"Quake Logo\" by Krzysztof Narkowicz @knarkowicz\n\nconst float MATH_PI = float( 3.14159265359 );\n\nfloat VisibilityTerm( float roughness, float ndotv, float ndotl )\n{\n\tfloat m2\t= roughness * roughness;\n\tfloat visV\t= ndotl * sqrt( ndotv * ( ndotv - ndotv * m2 ) + m2 );\n\tfloat visL\t= ndotv * sqrt( ndotl * ( ndotl - ndotl * m2 ) + m2 );\n\treturn 0.5 / max( visV + visL, 0.00001 );\n}\n\nfloat DistributionTerm( float roughness, float ndoth )\n{\n\tfloat m2\t= roughness * roughness;\n\tfloat d\t\t= ( ndoth * m2 - ndoth ) * ndoth + 1.0;\n\treturn m2 / ( d * d * MATH_PI );\n}\n\nvec3 FresnelTerm( vec3 specularColor, float vdoth )\n{\n\tvec3 fresnel = clamp( 50.0 * specularColor.y, 0.0, 1.0 ) * specularColor + ( 1.0 - specularColor ) * pow( ( 1.0 - vdoth ), 5.0 );\n\treturn fresnel;\n}\n\nvec3 LightSpecular( vec3 normal, vec3 viewDir, vec3 lightDir, vec3 lightColor, float roughness, vec3 specularColor )\n{\n\tvec3 halfVec = normalize( viewDir + lightDir );\n\n\tfloat vdoth = clamp( dot( viewDir,\thalfVec\t ), 0.0, 1.0 );\n\tfloat ndoth\t= clamp( dot( normal,\thalfVec\t ), 0.0, 1.0 );\n\tfloat ndotv = clamp( dot( normal,\tviewDir  ), 0.0, 1.0 );\n\tfloat ndotl = clamp( dot( normal,\tlightDir ), 0.0, 1.0 );\n    \n   \tvec3\tf = FresnelTerm( specularColor, vdoth );\n\tfloat\td = DistributionTerm( roughness, ndoth );\n\tfloat\tv = VisibilityTerm( roughness, ndotv, ndotl );\n    \n    vec3 specular;\n\tspecular = lightColor * f * ( d * v * MATH_PI * ndotl );\n\treturn specular;\n}\n\nfloat Cylinder( vec3 p, float r, float height ) \n{\n\tfloat d = length( p.xz ) - r;\n\td = max( d, abs( p.y ) - height );\n\treturn d;\n}\n\nfloat Sphere( vec3 p, float s )\n{\n\treturn length( p ) - s;\n}\n\n \n\n\nfloat Box( vec3 p, vec3 b )\n{\n \n    \n    \n\tvec3 d = abs( p ) - b;\n\t\n    float filler = min( \n        \n        max( d.x, max( d.y, d.z ) )\n        \n        , 0.0 ) + length( max( d, 0.0 ) );\n    \n    \n    //if (p.y > 0.0)\n    //    return 200.0;\n    \n    return filler;\n   \n}\n\nfloat Substract( float a, float b )\n{\n    return max( a, -b );\n}\n\nfloat SubstractRound( float a, float b, float r ) \n{\n\tvec2 u = max( vec2( r + a, r - b ), vec2( 0.0, 0.0 ) );\n\treturn min( -r, max( a, -b ) ) + length( u );\n}\n\nfloat Union( float a, float b )\n{\n    return min( a, b );\n}\n\nfloat UnionRound( float a, float b, float k )\n{\n    float h = clamp( 0.5 + 0.5 * ( b - a ) / k, 0.0, 1.0 );\n    return mix( b, a, h ) - k * h * ( 1.0 - h );\n}\n\nfloat TriPrism( vec3 p, float rot )\n{        \n    vec3 q = abs( p );\n    \n     return max(\n        // creates some type of symmetry\n        q.y - 0.5, \n     \n        // vertical line\n        p.x * cos(rot) + p.z * sin(rot)   \n     );\n}\n\n\nvoid AddTriangleABC(\n    // spatial point\n    inout vec3 p, \n    inout float canvas,\n\tvec2 ABC[3]\t\n\t)\n{\n      \tvec2 a1 = ABC[0] ;\n    \n    // looks like a steam engine\n        vec2 b1 = ABC[1];\n    \n        vec2 c1 = ABC[2];\n    \n    // A needs be to the right of B\n    \n    // need to check y too?\n    //if (B.x > A.x)\n    {\n      //  a1 = B;\n     //   b1 = A;\n    }\n            \n    \n      \n        float slice2AC = TriPrism(  p + vec3(\n        \n        // up\n        c1.y,\n              // back\n              -0.0,\n              \n              // right\n              c1.x\n        ), \n                                \n                                // rot1 + MATH_PI + 0.8\n                               \n                                -atan(a1.y-c1.y, a1.x-c1.x) \n                               );\n    \n    \n    \n    // could we have atoolbar so we could move the dots?\n        float slice0BC = TriPrism(  p + vec3(\n        \n        // up\n        b1.y,\n              // back\n              -0.0,\n              \n              // right\n              b1.x\n        ),// rot1 + MATH_PI - 1.1\n                               \n                                -atan(b1.y-c1.y, b1.x-c1.x) + MATH_PI\n                               );\n    \n    \n    \n    // atan2(deltaY, deltaX)\n    float slice1BA = TriPrism(  p + vec3(\n        \n        // up\n        a1.y,\n              // back\n              -0.0,\n              \n              // right\n              a1.x \n        ), -atan(b1.y-a1.y, b1.x-a1.x));\n\n    \n    \n    \n        //float slice = min(slice2AC,min(slice1BA,slice0BC))                    ;\n\t\t//float slice = slice0BC;\n    //float slice = max(slice0BC, slice1BA);\n        float i = max(slice2AC,max(slice1BA,slice0BC))                    ;\n    \n    \n     \n     canvas = min(i, canvas);\n    \n    // discard markers\n    return;\n        \n    \n    // need triangle markers?\n    //if (false)\n    // make A twice as big, while B moves\n     i = min(i,  Box(  p + vec3(a1.y,0.0,a1.x), vec3(\n                   \n                   // height\n                   0.2, \n                   \n                   //depth\n                   0.25, \n                   \n                   // width\n                   0.2)   )\n      );\n        \n    i = min(i,  Box(  p + vec3(b1.y,0.0,b1.x), vec3(\n                   \n                   // height\n                   0.1, \n                   \n                   //depth\n                   0.25, \n                   \n                   // width\n                   0.1)   )\n      );\n    \n        i = min(i,  Box(  p + vec3(c1.y,0.0,c1.x), vec3(\n                   \n                   // height\n                   0.05, \n                   \n                   //depth\n                   0.25, \n                   \n                   // width\n                   0.05)   )\n      );\n    \n    \n    // union\n    //canvas = min(canvas, i);\n    \n    canvas = min(i, canvas);\n}\n\n\nvoid AddTriangleABCCBA(\n    // spatial point\n    inout vec3 p, \n    inout float canvas,\n\tvec2 ABC[3]\t\n\t)\n{\n    vec2 CBA[3];\n    \n    CBA[2] = ABC[0];\n    CBA[1] = ABC[1];\n    CBA[0] = ABC[2];\n\n    //AddTriangleABC(p, canvas, ABC);\n    AddTriangleABC(p, canvas, CBA); // double sided polygon index?\n    \n}\n\n\nfloat CBAcanvas; // = 10000.0;\nvec3 CBAp;\n\nvoid CBA(\n    // spatial point\n    //inout vec3 p, \n\tvec2 ABC[3]\t\n\t)\n{\n    AddTriangleABCCBA(CBAp, CBAcanvas, ABC);\n}\n\nvoid CBAf(\n    float Ax,\n    float Ay,\n    float Bx,\n    float By,\n    float Cx,\n    float Cy\n    )\n{\n    vec2 ABC[3];\n    \n\tABC[0].x=Ax;\n\tABC[0].y=-Ay;\n\tABC[1].x=Bx;\n\tABC[1].y=-By;\n\tABC[2].x=Cx;\n\tABC[2].y=-Cy;\n    \n    AddTriangleABCCBA(CBAp, CBAcanvas, ABC);\n}\n\nvoid CBA64()\n{\n     CBAf(4.862,8.40745,4.845984375,9.75841875,4.65115625,8.58654375);\n\tCBAf(4.6862,8.440745,5.492,7.92562,6.0098375,10.3459075);\n    CBAf(6.80194375,7.172323125,6.7661,9.95682,5.492,7.92562);\n    CBAf(4.2845984375,9.575841875,4.2167,9.15282,4.365115625,8.758654375);\nCBAf(5.492,7.92562,6.7661,9.95682,6.0098375,10.3459075);\nCBAf(4.5147125,9.97132,4.2845984375,9.575841875,4.6862,8.440745);\nCBAf(6.0098375,10.3459075,4.5147125,9.97132,4.6862,8.440745);\nCBAf(6.7661,9.95682,6.80194375,7.172323125,9.376775,9.00828125);\n// 8\n\n    \n    CBAf(11.0581,5.54532,9.376775,9.00828125,8.1873,6.55442);\n    \n    CBAf(12.0161,8.15272,11.0581,5.54532,13.976825,4.67798625);\n\nCBAf(13.976825,4.67798625,16.9653,4.14522,15.4630125,7.2957925);\nCBAf(11.0581,5.54532,12.0161,8.15272,9.376775,9.00828125);\nCBAf(16.9653,4.14522,18.9661,6.76492,15.4630125,7.2957925);\nCBAf(15.4630125,7.2957925,12.0161,8.15272,13.976825,4.67798625);\nCBAf(18.9661,6.76492,16.9653,4.14522,21.0607875,3.895875625);\nCBAf(6.80194375,7.172323125,8.1873,6.55442,9.376775,9.00828125);\nCBAf(6.0098375,10.3459075,5.6310171875,10.4946684375,5.2484,10.48892);\n// 16 1.3fps\n    \n    CBAf(6.0098375,10.3459075,5.2484,10.48892,4.5147125,9.97132);\nCBAf(8.9156,23.1581,6.8153125,22.7018165,8.72755,20.283829);\nCBAf(8.72755,20.283829,10.817,20.8219,8.9156,23.1581);\nCBAf(10.817,20.8219,8.72755,20.283829,10.3845765625,18.111813375);\nCBAf(7.4656,24.9478,6.8153125,22.7018165,8.9156,23.1581);\nCBAf(10.817,20.8219,10.3845765625,18.111813375,12.0314,19.484);\nCBAf(12.8355296875,15.979157125,13.100575,18.6053825,11.6125375,16.785854);\nCBAf(14.47765,15.364929,14.3127,17.9258,12.8355296875,15.979157125);\n// 24 - 48fps on lenovo\nCBAf(16.9880125,14.67030025,15.596625,17.4170392578,14.47765,15.364929);\nCBAf(11.6125375,16.785854,13.100575,18.6053825,12.0314,19.484);\nCBAf(14.47765,15.364929,15.596625,17.4170392578,14.3127,17.9258);\nCBAf(16.9880125,14.67030025,17.241675,17.0354515625,15.596625,17.4170392578);\nCBAf(14.3127,17.9258,13.100575,18.6053825,12.8355296875,15.979157125);\nCBAf(19.1946375,16.7989912109,17.241675,17.0354515625,16.9880125,14.67030025);\nCBAf(10.3845765625,18.111813375,11.6125375,16.785854,12.0314,19.484);\nCBAf(25.17465,3.9236825,22.1648203125,6.60912234375,21.0607875,3.895875625);\n// 32 - 60fps\n    \n    //if (false)\n    {\n        \n    CBAf(22.1648203125,6.60912234375,25.17465,3.9236825,25.3732625,6.64133375);\nCBAf(23.626,14.470714,21.4023,16.7256125,20.68075,14.358929);\nCBAf(23.626,14.470714,25.21645,14.693589,23.81145,16.8332697266);\nCBAf(25.21645,14.693589,27.3556203125,15.064697125,26.368875,17.1399171875);\nCBAf(28.5721234375,6.87280328125,25.3732625,6.64133375,25.17465,3.9236825);\nCBAf(16.9880125,14.67030025,20.68075,14.358929,19.1946375,16.7989912109);\nCBAf(29.2713375,4.255430625,31.7421,7.31478,28.5721234375,6.87280328125);\nCBAf(25.17465,3.9236825,29.2713375,4.255430625,28.5721234375,6.87280328125);\n// 40\n    CBAf(33.3153,4.91791,31.7421,7.31478,29.2713375,4.255430625);\nCBAf(35.3939484375,5.507465625,34.131425,7.9511125,33.3153,4.91791);\nCBAf(35.3939484375,5.507465625,36.466,8.79368,34.131425,7.9511125);\nCBAf(34.131425,7.9511125,31.7421,7.31478,33.3153,4.91791);\nCBAf(36.466,8.79368,35.3939484375,5.507465625,37.4116125,6.30449);\nCBAf(27.3556203125,15.064697125,29.7955875,15.685199,29.0213625,17.6635091797);\nCBAf(20.68075,14.358929,21.4023,16.7256125,19.1946375,16.7989912109);\nCBAf(23.81145,16.8332697266,25.21645,14.693589,26.368875,17.1399171875);\n// 48\n    \n    CBAf(23.626,14.470714,23.81145,16.8332697266,21.4023,16.7256125);\nCBAf(31.7157,18.422,29.7955875,15.685199,32.2443109375,16.461970875);\nCBAf(29.0213625,17.6635091797,26.368875,17.1399171875,27.3556203125,15.064697125);\nCBAf(29.0213625,17.6635091797,29.7955875,15.685199,31.7157,18.422);\nCBAf(34.40975,17.301889,31.7157,18.422,32.2443109375,16.461970875);\nCBAf(35.82205,17.957434,33.4694625,19.12470125,34.40975,17.301889);\nCBAf(31.7157,18.422,34.40975,17.301889,33.4694625,19.12470125);\nCBAf(37.42125,18.917089,35.950623625,20.7576875,35.1249,20.018);\nCBAf(33.4694625,19.12470125,35.82205,17.957434,35.1249,20.018);\nCBAf(37.115221,24.075183,34.2739183594,23.0895191016,35.375969873,22.2718364111);\nCBAf(35.950623625,20.7576875,37.42125,18.917089,36.248,21.326);\nCBAf(35.375969873,22.2718364111,36.2476,21.32599,36.248,21.326);\nCBAf(37.115221,24.075183,35.375969873,22.2718364111,36.248,21.326);\nCBAf(38.3886435,23.42400925,37.115221,24.075183,36.248,21.326);\nCBAf(34.7339835,24.98988925,32.9674537598,23.7865845068,34.2739183594,23.0895191016);\nCBAf(37.42125,18.917089,35.1249,20.018,35.82205,17.957434);\n    }\n// 64 38fps\n}\n\nfloat Scene( vec3 p, mat3 localToWorld )\n{\n    // shadertoy should have time slider.\n    \n    p = p * localToWorld;\n    \n    \n    \n     \n    // can we move the objects?\n    \n    p += vec3(\n        \n        // up\n        25.0 ,\n              // back\n              //-9.0,\n              -45.0, // either move it back or make it scale?\n\n        \n              // right\n              -30.0 );\n\n    vec2 a1 = vec2( 2.0,  0.6  + cos(iTime)) ;\n    // looks like a steam engine\n    vec2 b1 = vec2(1.75 + sin(iTime),  -1. + cos(iTime * 0.1));\n    vec2 c1 = vec2( 1.5, -1);\n\n   \n     CBAcanvas = 10000.0;\n    CBAp = p;\n    \n  \n    \n    //CBAf(46.862,84.40745,42.845984375,95.75841875,43.65115625,87.58654375);\n   CBA64();\n    \n    if (false){\n    CBAf(22.1648203125,6.60912234375,18.9661,6.76492,21.0607875,3.895875625);\nCBAf(4.84645,24.758829,4.1634375,27.246805375,3.45187375,26.35632275);\nCBAf(7.4656,24.9478,5.89535,27.19933,4.84645,24.758829);\nCBAf(4.84645,24.758829,6.8153125,22.7018165,7.4656,24.9478);\nCBAf(7.9804575,25.169595,5.89535,27.19933,7.4656,24.9478);\nCBAf(3.62035,27.121429,3.36059640625,26.8046485312,3.45187375,26.35632275);\nCBAf(4.1634375,27.246805375,3.62035,27.121429,3.45187375,26.35632275);\nCBAf(4.1634375,27.246805375,4.84645,24.758829,5.89535,27.19933);\nCBAf(5.89535,27.19933,7.9804575,25.169595,8.62967375,27.13793375);\nCBAf(10.09205,27.31614,8.62967375,27.13793375,9.2156,25.30589);\nCBAf(7.9804575,25.169595,9.2156,25.30589,8.62967375,27.13793375);\nCBAf(11.102566125,27.710885,10.09205,27.31614,12.5434535156,25.6518437109);\nCBAf(9.2156,25.30589,12.5434535156,25.6518437109,10.09205,27.31614);\nCBAf(12.5434535156,25.6518437109,11.3586718906,27.9765740625,11.102566125,27.710885);\nCBAf(11.48245,28.312,16.664911,28.909827,11.577161,30.6588);\nCBAf(11.48245,28.312,11.3586718906,27.9765740625,12.5434535156,25.6518437109);\n// 80 33fps\n       CBAf(11.49767725,32.79723,11.577161,30.6588,16.56569,31.990027);\nCBAf(10.922451,33.9489,10.4868331406,36.2236359375,10.5230310469,34.6846328125);\nCBAf(10.922451,33.9489,11.2957324062,33.377311875,16.35852,35.348327);\nCBAf(10.922451,33.9489,15.97570625,36.77233075,10.85076,36.997);\nCBAf(10.4868331406,36.2236359375,10.377707625,35.4478625,10.5230310469,34.6846328125);\nCBAf(10.85076,36.997,10.4868331406,36.2236359375,10.922451,33.9489);\nCBAf(11.3719175,38.0717375,10.85076,36.997,15.97570625,36.77233075);\nCBAf(11.8177,39.6588,11.3719175,38.0717375,15.7603,39.809127);\nCBAf(12.37832375,41.803675,15.588105,42.948027,12.8679,43.9631);\nCBAf(12.8679,43.9631,15.41591,46.086927,13.354475,46.02503);\nCBAf(15.588105,42.948027,15.41591,46.086927,12.8679,43.9631);\nCBAf(14.086,46.553,13.6603696875,46.435945625,13.354475,46.02503);\nCBAf(14.08701,46.553347,14.086,46.553,14.93378875,46.4469995);\nCBAf(14.93378875,46.4469995,14.086,46.553,13.354475,46.02503);\nCBAf(13.354475,46.02503,15.41591,46.086927,14.93378875,46.4469995);\nCBAf(11.8177,39.6588,15.7603,39.809127,12.37832375,41.803675);\n// 96 26fps\n CBAf(16.5358225,34.6264395,11.2957324062,33.377311875,11.49767725,32.79723);\nCBAf(11.48245,28.312,12.5434535156,25.6518437109,16.664911,28.909827);\nCBAf(20.2833324219,25.9226589453,17.0236985,28.95994575,16.302053125,25.8775571875);\nCBAf(20.2833324219,25.9226589453,23.027621,28.087273,22.92079475,28.281233);\nCBAf(23.027621,28.087273,20.2833324219,25.9226589453,24.279225,25.7267775);\nCBAf(20.2833324219,25.9226589453,19.970411,31.033827,17.706336,29.338452);\nCBAf(17.0236985,28.95994575,16.664911,28.909827,16.302053125,25.8775571875);\nCBAf(23.195291,28.770903,19.970411,31.033827,22.92079475,28.281233);\nCBAf(20.2833324219,25.9226589453,17.706336,29.338452,17.0236985,28.95994575);\nCBAf(19.970411,31.033827,20.2833324219,25.9226589453,22.92079475,28.281233);\nCBAf(11.577161,30.6588,16.664911,28.909827,16.56569,31.990027);\nCBAf(31.482584375,24.3705790625,29.83967725,26.6614314375,28.0816644531,25.2295413672);\nCBAf(34.7339835,24.98988925,32.352746,25.9045955,32.9674537598,23.7865845068);\nCBAf(32.352746,25.9045955,31.482584375,24.3705790625,32.9674537598,23.7865845068);\nCBAf(26.665221,27.358183,23.811196,27.80536675,24.279225,25.7267775);\nCBAf(23.027621,28.087273,24.279225,25.7267775,23.811196,27.80536675);\n// 112 22fps\nCBAf(24.279225,25.7267775,28.0816644531,25.2295413672,26.665221,27.358183);\nCBAf(26.665221,27.358183,28.0816644531,25.2295413672,29.83967725,26.6614314375);\nCBAf(29.83967725,26.6614314375,31.482584375,24.3705790625,32.352746,25.9045955);\nCBAf(11.2957324062,33.377311875,16.5358225,34.6264395,16.35852,35.348327);\nCBAf(24.2354985,29.92757925,22.5663836563,32.9945379375,19.970411,31.033827);\nCBAf(15.7603,39.809127,15.588105,42.948027,12.37832375,41.803675);\nCBAf(16.35852,35.348327,15.97570625,36.77233075,10.922451,33.9489);\nCBAf(15.7603,39.809127,11.3719175,38.0717375,15.97570625,36.77233075);\nCBAf(11.49767725,32.79723,16.56569,31.990027,16.5358225,34.6264395);\nCBAf(24.2354985,29.92757925,26.165191,31.609803,22.5663836563,32.9945379375);\nCBAf(25.42731725,34.9381395,22.5663836563,32.9945379375,26.165191,31.609803);\nCBAf(25.42731725,34.9381395,26.165191,31.609803,30.2152738125,34.6905920625);\nCBAf(28.421739125,36.74273325,25.42731725,34.9381395,30.2152738125,34.6905920625);\nCBAf(31.416161,38.547327,28.421739125,36.74273325,30.2152738125,34.6905920625);\nCBAf(38.6166769375,39.6486451875,36.88112975,41.4080145,34.148645375,39.97767075);\nCBAf(31.416161,38.547327,34.4514035,37.3795905,34.148645375,39.97767075);\n// 128 20fps\n    CBAf(34.148645375,39.97767075,34.4514035,37.3795905,38.6166769375,39.6486451875);\nCBAf(31.416161,38.547327,30.2152738125,34.6905920625,34.4514035,37.3795905);\nCBAf(24.2354985,29.92757925,19.970411,31.033827,23.195291,28.770903);\nCBAf(16.302053125,25.8775571875,16.664911,28.909827,12.5434535156,25.6518437109);\nCBAf(34.2739183594,23.0895191016,37.115221,24.075183,34.7339835,24.98988925);\nCBAf(41.4153,8.00991,38.966,9.81608,37.4116125,6.30449);\nCBAf(41.266,10.77926,38.966,9.81608,41.4153,8.00991);\nCBAf(46.0914375,9.9181475,43.868275,11.8337475,41.4153,8.00991);\nCBAf(39.016025,19.77619275,38.715221,23.327063,36.248,21.326);\nCBAf(41.4153,8.00991,43.868275,11.8337475,41.266,10.77926);\nCBAf(46.516,12.75466,43.868275,11.8337475,46.0914375,9.9181475);\nCBAf(37.4116125,6.30449,38.966,9.81608,36.466,8.79368);\nCBAf(49.39455,13.430265,48.4496015625,10.8064490625,50.8653,11.50081);\nCBAf(55.6588125,14.235363875,53.59520625,11.9690473437,56.510175,12.26431875);\nCBAf(52.316,13.90136,50.8653,11.50081,53.59520625,11.9690473437);\nCBAf(49.39455,13.430265,46.516,12.75466,48.4496015625,10.8064490625);\nCBAf(52.316,13.90136,49.39455,13.430265,50.8653,11.50081);\nCBAf(52.316,13.90136,53.59520625,11.9690473437,55.6588125,14.235363875);\nCBAf(46.0914375,9.9181475,48.4496015625,10.8064490625,46.516,12.75466);\nCBAf(40.96525,20.420489,41.251946,23.238423375,39.97520225,23.1918618906);\nCBAf(39.016025,19.77619275,39.97520225,23.1918618906,38.715221,23.327063);\nCBAf(43.3788421875,20.9488229062,41.251946,23.238423375,40.96525,20.420489);\nCBAf(45.5517125,21.19938775,43.815221,23.450533,43.3788421875,20.9488229062);\nCBAf(38.3886435,23.42400925,36.248,21.326,38.715221,23.327063);\nCBAf(43.3788421875,20.9488229062,43.815221,23.450533,41.251946,23.238423375);\nCBAf(43.815221,23.450533,45.5517125,21.19938775,46.452721,23.548653);\nCBAf(39.97520225,23.1918618906,39.016025,19.77619275,40.96525,20.420489);\nCBAf(50.16525,21.458289,49.090221,23.646773,46.452721,23.548653);\nCBAf(45.5517125,21.19938775,50.16525,21.458289,46.452721,23.548653);\nCBAf(53.89025,21.682209,54.365221,23.843013,50.16525,21.458289);\nCBAf(57.61525,21.906129,54.365221,23.843013,53.89025,21.682209);\nCBAf(50.16525,21.458289,54.365221,23.843013,49.090221,23.646773);\nCBAf(55.666461,32.902157,56.306021,32.426382,56.4615785,33.39570675);\nCBAf(56.306021,32.426382,57.072961,32.154427,57.1460113125,33.0746669062);\nCBAf(58.815221,24.260273,54.365221,23.843013,57.61525,21.906129);\nCBAf(55.6588125,14.235363875,56.510175,12.26431875,58.666,14.3909);\nCBAf(58.7487375,12.362119375,58.7148833866633,14.3896788576393,58.6898966933317,14.3904944288196);\nCBAf(58.7148833866633,14.3896788576393,58.7487375,12.362119375,58.7648567733266,14.3880477152786);\nCBAf(58.8648035466532,14.3847854305572,58.7648567733266,14.3880477152786,58.7487375,12.362119375);\nCBAf(58.7487375,12.362119375,58.6898966933317,14.3904944288196,58.666,14.3909);\nCBAf(58.666,14.3909,58.6656908341666,14.3912845134006,58.6656378077768,14.3910362374418);\nCBAf(58.666,14.3909,58.6774033466658,14.3909022144098,58.6711566733329,14.3911061072049);\nCBAf(58.6774033466658,14.3909022144098,58.666,14.3909,58.6898966933317,14.3904944288196);\nCBAf(58.6711566733329,14.3911061072049,58.6680333366665,14.3912080536025,58.666,14.3909);\nCBAf(61.82325,12.77467,60.9873,12.45992,61.59095625,12.5013825);\nCBAf(60.9873,12.45992,61.82325,12.77467,62.03229875,13.63350125);\nCBAf(60.2640583732254,14.3391134444573,60.9873,12.45992,62.03229875,13.63350125);\nCBAf(59.0646970933063,14.3782608611143,58.8648035466532,14.3847854305572,58.7487375,12.362119375);\nCBAf(59.4644841866127,14.3652117222287,59.0646970933063,14.3782608611143,58.7487375,12.362119375);\nCBAf(62.03229875,13.63350125,62.00251,14.28237,60.2640583732254,14.3391134444573);\nCBAf(58.7487375,12.362119375,60.2640583732254,14.3391134444573,59.4644841866127,14.3652117222287);\nCBAf(58.7487375,12.362119375,60.9873,12.45992,60.2640583732254,14.3391134444573);\nCBAf(58.6652756155535,14.3911724748835,58.6656378077768,14.3910362374418,58.6653004170833,14.3912972567003);\nCBAf(58.6653004170833,14.3912972567003,58.6656378077768,14.3910362374418,58.6656908341666,14.3912845134006);\nCBAf(58.6660812512499,14.3912717701009,58.6656908341666,14.3912845134006,58.666,14.3909);\nCBAf(58.666,14.3909,58.6664716683332,14.3912590268012,58.6660812512499,14.3912717701009);\nCBAf(58.491286,32.0721235625,59.0434558438,33.20752175,57.965491,32.961903);\nCBAf(57.072961,32.154427,58.491286,32.0721235625,57.965491,32.961903);\nCBAf(58.6652756155535,14.3911724748835,58.6653004170833,14.3912972567003,58.66491,14.39131);\nCBAf(60.5901875,21.88058825,58.815221,24.260273,57.61525,21.906129);\nCBAf(61.56239625,22.5229355,60.5901875,21.88058825,61.1795734375,21.8598664687);\nCBAf(61.45755,21.961123,61.56239625,22.5229355,61.1795734375,21.8598664687);\nCBAf(58.815221,24.260273,61.51779,23.391723,61.469221,24.551923);\nCBAf(60.5901875,21.88058825,61.51779,23.391723,58.815221,24.260273);\n        \n        \n         }\n    \n    if (false){\n\n// 192 11 fps\n    CBAf(61.51779,23.391723,60.5901875,21.88058825,61.56239625,22.5229355);\nCBAf(58.6664716683332,14.3912590268012,58.666,14.3909,58.6680333366665,14.3912080536025);\nCBAf(59.781811,32.4641145,59.0434558438,33.20752175,58.491286,32.0721235625);\nCBAf(58.7487375,12.362119375,58.666,14.3909,56.510175,12.26431875);\nCBAf(57.072961,32.154427,57.965491,32.961903,57.1460113125,33.0746669062);\nCBAf(55.570491,34.578903,54.560226,35.0570945,54.919717875,33.8731679375);\nCBAf(54.560226,35.0570945,55.570491,34.578903,55.4184755313,35.5449405);\nCBAf(55.570491,34.578903,54.919717875,33.8731679375,55.9303519375,33.9040947187);\nCBAf(54.679886625,36.3076023125,54.560226,35.0570945,55.4184755313,35.5449405);\nCBAf(55.62413975,36.442878,54.9481182656,36.9120946953,54.679886625,36.3076023125);\nCBAf(56.1535545938,37.147953,55.370601,37.478357,55.62413975,36.442878);\nCBAf(54.9481182656,36.9120946953,55.62413975,36.442878,55.370601,37.478357);\nCBAf(55.62413975,36.442878,54.679886625,36.3076023125,55.4184755313,35.5449405);\nCBAf(55.666461,32.902157,55.9303519375,33.9040947187,54.919717875,33.8731679375);\nCBAf(55.9303519375,33.9040947187,55.666461,32.902157,56.4615785,33.39570675);\nCBAf(55.370601,37.478357,56.1535545938,37.147953,56.32937975,38.10150975);\nCBAf(56.972791,37.535403,56.32937975,38.10150975,56.1535545938,37.147953);\nCBAf(57.373201,38.258707,56.32937975,38.10150975,56.972791,37.535403);\nCBAf(57.373201,38.258707,56.972791,37.535403,57.82101475,37.50873675);\nCBAf(36.88112975,41.4080145,38.6166769375,39.6486451875,40.766411,43.066827);\nCBAf(42.454191,41.469603,40.766411,43.066827,38.6166769375,39.6486451875);\nCBAf(43.0758656875,43.9547766875,40.766411,43.066827,42.454191,41.469603);\nCBAf(45.3219535,42.5860105,43.0758656875,43.9547766875,42.454191,41.469603);\nCBAf(45.0257985,44.551072,43.0758656875,43.9547766875,45.3219535,42.5860105);\nCBAf(48.815911,45.158327,46.8584125625,44.9281198125,47.464991,43.150703);\nCBAf(45.3219535,42.5860105,46.8584125625,44.9281198125,45.0257985,44.551072);\nCBAf(45.3219535,42.5860105,47.464991,43.150703,46.8584125625,44.9281198125);\nCBAf(55.9189952383,44.3062168437,54.4426804531,43.2000377656,56.522066,42.594723);\nCBAf(51.2866664648,45.1798340312,48.815911,45.158327,49.8192281094,43.4926579219);\nCBAf(52.176762875,43.504226125,54.4426804531,43.2000377656,53.6806850938,44.89485825);\nCBAf(55.9189952383,44.3062168437,53.6806850938,44.89485825,54.4426804531,43.2000377656);\nCBAf(51.2866664648,45.1798340312,52.176762875,43.504226125,53.6806850938,44.89485825);\nCBAf(51.2866664648,45.1798340312,49.8192281094,43.4926579219,52.176762875,43.504226125);\nCBAf(55.9189952383,44.3062168437,56.522066,42.594723,57.92262525,43.416727);\nCBAf(47.464991,43.150703,49.8192281094,43.4926579219,48.815911,45.158327);\nCBAf(57.387701,34.814343,57.453081,35.132733,57.122191,35.157777375);\nCBAf(56.4615785,33.39570675,56.306021,32.426382,57.1460113125,33.0746669062);\nCBAf(58.0569236563,34.7134879375,58.043121,35.1480805,57.506801,34.751207);\nCBAf(58.62300725,34.9777995,59.0788127188,35.4821898125,58.535481,35.525213);\nCBAf(58.62300725,34.9777995,58.043121,35.1480805,58.0569236563,34.7134879375);\nCBAf(57.506801,34.751207,58.043121,35.1480805,57.453081,35.132733);\nCBAf(58.535481,35.525213,59.0788127188,35.4821898125,58.68167975,36.28013425);\nCBAf(58.535481,35.525213,58.043121,35.1480805,58.62300725,34.9777995);\nCBAf(57.387701,34.814343,57.506801,34.751207,57.453081,35.132733);\nCBAf(60.856111,33.3087866875,60.4454480312,34.36292175,59.85957225,33.697078);\nCBAf(60.4454480312,34.36292175,60.856111,33.3087866875,61.625761,34.584527);\nCBAf(59.85957225,33.697078,59.0434558438,33.20752175,59.781811,32.4641145);\nCBAf(60.832691,35.137403,60.4454480312,34.36292175,61.625761,34.584527);\nCBAf(58.68167975,36.28013425,59.0788127188,35.4821898125,59.298101,36.164707);\nCBAf(61.062011,36.246903,60.832691,35.137403,61.94885475,35.819797);\nCBAf(61.625761,34.584527,61.94885475,35.819797,60.832691,35.137403);\nCBAf(62.010911,36.906627,61.062011,36.246903,61.94885475,35.819797);\nCBAf(59.1897131875,36.9675445,58.68167975,36.28013425,59.298101,36.164707);\nCBAf(58.795266,37.617982,57.82101475,37.50873675,58.399891,37.088613);\nCBAf(58.399891,37.088613,59.1897131875,36.9675445,58.795266,37.617982);\nCBAf(59.1897131875,36.9675445,58.399891,37.088613,58.68167975,36.28013425);\nCBAf(58.1710113125,38.065282,57.82101475,37.50873675,58.795266,37.617982);\nCBAf(56.522066,42.594723,58.3200046719,41.7029119844,57.92262525,43.416727);\nCBAf(57.92262525,43.416727,58.3200046719,41.7029119844,59.6126034805,42.2292059062);\nCBAf(58.3200046719,41.7029119844,59.741581625,40.539234875,59.6126034805,42.2292059062);\nCBAf(57.373201,38.258707,57.82101475,37.50873675,58.1710113125,38.065282);\nCBAf(61.9470710708,37.9750042461,60.9606426113,38.315973752,61.075991,37.454803);\nCBAf(61.075991,37.454803,62.010911,36.906627,61.9470710708,37.9750042461);\nCBAf(61.7357180039,38.9713387187,60.9606426113,38.315973752,61.9470710708,37.9750042461);\n// 256 9fps lenovo\n    CBAf(61.3228381426,39.85890473435,59.741581625,40.539234875,60.6918820156,39.1183218281);\nCBAf(60.9099582813,40.74647075,59.741581625,40.539234875,61.3228381426,39.85890473435);\nCBAf(61.7357180039,38.9713387187,61.3228381426,39.85890473435,60.6918820156,39.1183218281);\nCBAf(61.7357180039,38.9713387187,60.6918820156,39.1183218281,60.9606426113,38.315973752);\nCBAf(59.6126034805,42.2292059062,59.741581625,40.539234875,60.9099582813,40.74647075);\nCBAf(61.075991,37.454803,61.062011,36.246903,62.010911,36.906627);\nCBAf(59.781811,32.4641145,60.856111,33.3087866875,59.85957225,33.697078);\nCBAf(39.016025,19.77619275,36.248,21.326,37.42125,18.917089);\n    // i4600 5.6 fps, 21fps in half screen. had to disable timeout, desktopgl not available.\n    }\n    //ABC[2] = vec2(1, 0);\n    //ABC[1] = vec2(1, 1);\n    //ABC[0] = vec2(0, 0);\n                \n    //AddTriangleABC(p, canvas1, ABC);\n\n    //AddTriangle(p, canvas1, ABC[0],ABC[1],ABC[2]);\n    \n    return CBAcanvas;\n    \n}\n\nvec2 CastRay( in vec3 ro, in vec3 rd, mat3 localToWorld )\n{\n    // how big is the scene?\n    const float maxd = 85.0;\n    \n\tfloat h = 0.5;\n    float t = 0.0;\n    float steps = 0.0;\n   \n    for ( int i = 0; i < 150; ++i )\n    {\n        if ( h < 0.001 || t > maxd ) \n        {\n            break;\n        }\n        \n\t    h = Scene( ro + rd * t, localToWorld );\n        t += h;\n        steps += 0.03;\n    }\n\n    if ( t > maxd )\n    {\n        t = -1.0;\n    }\n\t\n    return vec2(t, steps);\n}\n\nvec3 SceneNormal( in vec3 pos, mat3 localToWorld )\n{\n\tvec3 eps = vec3( 0.001, 0.0, 0.0 );\n\tvec3 nor = vec3(\n\t    Scene( pos + eps.xyy, localToWorld ) - Scene( pos - eps.xyy, localToWorld ),\n\t    Scene( pos + eps.yxy, localToWorld ) - Scene( pos - eps.yxy, localToWorld ),\n\t    Scene( pos + eps.yyx, localToWorld ) - Scene( pos - eps.yyx, localToWorld ) );\n\treturn normalize( -nor );\n}\n\n\n\n\nvec3 rotx(vec3 p, float a){\n    float s = sin(a), c = cos(a);\n    return vec3(p.x, c*p.y - s*p.z, s*p.y + c*p.z);\n}\n \n \n//From Dave_Hoskins (https://www.shadertoy.com/view/4djSRW)\nvec3 hash33(vec3 p)\n{\n    p = fract(p * vec3(443.8975,397.2973, 491.1871));\n    p += dot(p.zxy, p.yxz+19.27);\n    return fract(vec3(p.x * p.y, p.z*p.x, p.y*p.z));\n}\n\n//Very happy with this star function, cheap and smooth\nvec3 stars(in vec3 p)\n{\n    // 47fps\n    \n    vec3 c = vec3(0.);\n    float res = iResolution.x*1.5; // too small  and they will flicker\n    \n    // more stars?\n\tfor (float i=0.;i<2.;i++)\n    {\n        vec3 q = fract(p*(.15*res))-0.5;\n        vec3 id = floor(p*(.15*res));\n        vec2 rn = hash33(id).xy;\n        float c2 = 1.-smoothstep(0.,.6,length(q));\n        c2 *= step(rn.x,.0005+i*i*0.001);\n        c += c2*(mix(vec3(1.0,0.49,0.1),vec3(0.75,0.9,1.),rn.y)*0.25+0.75);\n        p *= 1.4;\n    }\n    return c*c*.7;\n}\n\nvec3 startrails(in vec3 rd)\n{\n    vec3 col0 = stars( normalize(rotx(rd, iTime * 0.1)));\n\n    vec3 col = col0;\n\n    for (int i = -120; i < 0; i++)\n    {\n    \tvec3 col1 = stars( normalize(rotx(rd, iTime * 0.1 + (float(i) * (1./600.) ))));\n        \n    \tcol += col1;    \n    }\n    \n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy / iResolution.xy;\n    vec2 p = -1.0 + 2.0 * q;\n\tp.x *= iResolution.x / iResolution.y;\n\n    // have comera zoom in and out to reveal boundaries\n\tvec3 rayOrigin \t= vec3( 0.0, 9. *cos( iTime * 0.2), +17. + 7. *sin( iTime * 0.2) );\n\t//vec3 rayOrigin \t= vec3( 0.0, -0.0, -3.5   );\n\n    vec3 rayDir \t= normalize( vec3( p.x, p.y, 1.0 ) );\n    \n    float theta = -0.5 * MATH_PI;\n    mat3 rotX = mat3(\n        vec3( cos( theta ), sin( theta ), 0.0 ),\n        vec3( -sin( theta ), cos( theta ), 0.0 ),\n\t\tvec3( 0.0, 0.0, 1.0 )\n        );    \n    \n    vec2 mo = iMouse.xy / iResolution.xy;    \n    \n    //float phi = 0.25 * MATH_PI + 10.0 * mo.x;    \n    //float phi = 0.25 * MATH_PI; \n    \n    // look straight at it. no mouse\n    //float phi = 0.5 * MATH_PI;    \n float phi = 0.5 * MATH_PI + 0.3 *sin( iTime * 0.2) ;     \n    mat3 rotY = mat3(\n        vec3( 1.0, 0.0, 0.0 ),\n        vec3( 0.0, cos( phi ), sin( phi ) ),\n        vec3( 0.0, -sin( phi ), cos( phi ) )\n        );\n    \n    //mat3 localToWorld = rotX * rotY;    \n    mat3 localToWorld = rotX * rotY;    \n\n\n\t//vec3 color = texture( iChannel0, q ).yyy * 0.3;\n\tvec3 color = vec3(0);\n    \n\tvec2 result = CastRay( rayOrigin, rayDir, localToWorld );\n    \n    if ( result.x > 0.0 )\n    {\n      color = vec3(result.y*2.0, result.y*0.3, result.y*0.2);\n    }\n    else\n    {\n        // 46fps vs 60fps\n      //  color= startrails( rayDir);\n        \n        color /=5.0;\n      color += vec3(\n          0.3*result.y*abs(sin(iTime*1.8)),0,0.0);\n    }\n    \n    fragColor = vec4( color, 1.0 );\n}\n\n","name":"Buf A","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// \"Quake Logo\" by Krzysztof Narkowicz @knarkowicz\n\nconst float MATH_PI = float( 3.14159265359 );\n\nfloat VisibilityTerm( float roughness, float ndotv, float ndotl )\n{\n\tfloat m2\t= roughness * roughness;\n\tfloat visV\t= ndotl * sqrt( ndotv * ( ndotv - ndotv * m2 ) + m2 );\n\tfloat visL\t= ndotv * sqrt( ndotl * ( ndotl - ndotl * m2 ) + m2 );\n\treturn 0.5 / max( visV + visL, 0.00001 );\n}\n\nfloat DistributionTerm( float roughness, float ndoth )\n{\n\tfloat m2\t= roughness * roughness;\n\tfloat d\t\t= ( ndoth * m2 - ndoth ) * ndoth + 1.0;\n\treturn m2 / ( d * d * MATH_PI );\n}\n\nvec3 FresnelTerm( vec3 specularColor, float vdoth )\n{\n\tvec3 fresnel = clamp( 50.0 * specularColor.y, 0.0, 1.0 ) * specularColor + ( 1.0 - specularColor ) * pow( ( 1.0 - vdoth ), 5.0 );\n\treturn fresnel;\n}\n\nvec3 LightSpecular( vec3 normal, vec3 viewDir, vec3 lightDir, vec3 lightColor, float roughness, vec3 specularColor )\n{\n\tvec3 halfVec = normalize( viewDir + lightDir );\n\n\tfloat vdoth = clamp( dot( viewDir,\thalfVec\t ), 0.0, 1.0 );\n\tfloat ndoth\t= clamp( dot( normal,\thalfVec\t ), 0.0, 1.0 );\n\tfloat ndotv = clamp( dot( normal,\tviewDir  ), 0.0, 1.0 );\n\tfloat ndotl = clamp( dot( normal,\tlightDir ), 0.0, 1.0 );\n    \n   \tvec3\tf = FresnelTerm( specularColor, vdoth );\n\tfloat\td = DistributionTerm( roughness, ndoth );\n\tfloat\tv = VisibilityTerm( roughness, ndotv, ndotl );\n    \n    vec3 specular;\n\tspecular = lightColor * f * ( d * v * MATH_PI * ndotl );\n\treturn specular;\n}\n\nfloat Cylinder( vec3 p, float r, float height ) \n{\n\tfloat d = length( p.xz ) - r;\n\td = max( d, abs( p.y ) - height );\n\treturn d;\n}\n\nfloat Sphere( vec3 p, float s )\n{\n\treturn length( p ) - s;\n}\n\n \n\n\nfloat Box( vec3 p, vec3 b )\n{\n \n    \n    \n\tvec3 d = abs( p ) - b;\n\t\n    float filler = min( \n        \n        max( d.x, max( d.y, d.z ) )\n        \n        , 0.0 ) + length( max( d, 0.0 ) );\n    \n    \n    //if (p.y > 0.0)\n    //    return 200.0;\n    \n    return filler;\n   \n}\n\nfloat Substract( float a, float b )\n{\n    return max( a, -b );\n}\n\nfloat SubstractRound( float a, float b, float r ) \n{\n\tvec2 u = max( vec2( r + a, r - b ), vec2( 0.0, 0.0 ) );\n\treturn min( -r, max( a, -b ) ) + length( u );\n}\n\nfloat Union( float a, float b )\n{\n    return min( a, b );\n}\n\nfloat UnionRound( float a, float b, float k )\n{\n    float h = clamp( 0.5 + 0.5 * ( b - a ) / k, 0.0, 1.0 );\n    return mix( b, a, h ) - k * h * ( 1.0 - h );\n}\n\nfloat TriPrism( vec3 p, float rot )\n{        \n    vec3 q = abs( p );\n    \n     return max(\n        // creates some type of symmetry\n        q.y - 0.5, \n     \n        // vertical line\n        p.x * cos(rot) + p.z * sin(rot)   \n     );\n}\n\n\nvoid AddTriangleABC(\n    // spatial point\n    inout vec3 p, \n    inout float canvas,\n\tvec2 ABC[3]\t\n\t)\n{\n      \tvec2 a1 = ABC[0] ;\n    \n    // looks like a steam engine\n        vec2 b1 = ABC[1];\n    \n        vec2 c1 = ABC[2];\n    \n    // A needs be to the right of B\n    \n    // need to check y too?\n    //if (B.x > A.x)\n    {\n      //  a1 = B;\n     //   b1 = A;\n    }\n            \n    \n      \n        float slice2AC = TriPrism(  p + vec3(\n        \n        // up\n        c1.y,\n              // back\n              -0.0,\n              \n              // right\n              c1.x\n        ), \n                                \n                                // rot1 + MATH_PI + 0.8\n                               \n                                -atan(a1.y-c1.y, a1.x-c1.x) \n                               );\n    \n    \n    \n    // could we have atoolbar so we could move the dots?\n        float slice0BC = TriPrism(  p + vec3(\n        \n        // up\n        b1.y,\n              // back\n              -0.0,\n              \n              // right\n              b1.x\n        ),// rot1 + MATH_PI - 1.1\n                               \n                                -atan(b1.y-c1.y, b1.x-c1.x) + MATH_PI\n                               );\n    \n    \n    \n    // atan2(deltaY, deltaX)\n    float slice1BA = TriPrism(  p + vec3(\n        \n        // up\n        a1.y,\n              // back\n              -0.0,\n              \n              // right\n              a1.x \n        ), -atan(b1.y-a1.y, b1.x-a1.x));\n\n    \n    \n    \n        //float slice = min(slice2AC,min(slice1BA,slice0BC))                    ;\n\t\t//float slice = slice0BC;\n    //float slice = max(slice0BC, slice1BA);\n        float i = max(slice2AC,max(slice1BA,slice0BC))                    ;\n    \n    \n     \n     canvas = min(i, canvas);\n    \n    // discard markers\n    return;\n        \n    \n    // need triangle markers?\n    //if (false)\n    // make A twice as big, while B moves\n     i = min(i,  Box(  p + vec3(a1.y,0.0,a1.x), vec3(\n                   \n                   // height\n                   0.2, \n                   \n                   //depth\n                   0.25, \n                   \n                   // width\n                   0.2)   )\n      );\n        \n    i = min(i,  Box(  p + vec3(b1.y,0.0,b1.x), vec3(\n                   \n                   // height\n                   0.1, \n                   \n                   //depth\n                   0.25, \n                   \n                   // width\n                   0.1)   )\n      );\n    \n        i = min(i,  Box(  p + vec3(c1.y,0.0,c1.x), vec3(\n                   \n                   // height\n                   0.05, \n                   \n                   //depth\n                   0.25, \n                   \n                   // width\n                   0.05)   )\n      );\n    \n    \n    // union\n    //canvas = min(canvas, i);\n    \n    canvas = min(i, canvas);\n}\n\n\nvoid AddTriangleABCCBA(\n    // spatial point\n    inout vec3 p, \n    inout float canvas,\n\tvec2 ABC[3]\t\n\t)\n{\n    vec2 CBA[3];\n    \n    CBA[2] = ABC[0];\n    CBA[1] = ABC[1];\n    CBA[0] = ABC[2];\n\n    //AddTriangleABC(p, canvas, ABC);\n    AddTriangleABC(p, canvas, CBA); // double sided polygon index?\n    \n}\n\n\nfloat CBAcanvas; // = 10000.0;\nvec3 CBAp;\n\nvoid CBA(\n    // spatial point\n    //inout vec3 p, \n\tvec2 ABC[3]\t\n\t)\n{\n    AddTriangleABCCBA(CBAp, CBAcanvas, ABC);\n}\n\nvoid CBAf(\n    float Ax,\n    float Ay,\n    float Bx,\n    float By,\n    float Cx,\n    float Cy\n    )\n{\n    vec2 ABC[3];\n    \n\tABC[0].x=Ax;\n\tABC[0].y=-Ay;\n\tABC[1].x=Bx;\n\tABC[1].y=-By;\n\tABC[2].x=Cx;\n\tABC[2].y=-Cy;\n    \n    AddTriangleABCCBA(CBAp, CBAcanvas, ABC);\n}\n\nvoid CBA64()\n{\n     CBAf(4.862,8.40745,4.845984375,9.75841875,4.65115625,8.58654375);\n\tCBAf(4.6862,8.440745,5.492,7.92562,6.0098375,10.3459075);\n    CBAf(6.80194375,7.172323125,6.7661,9.95682,5.492,7.92562);\n    CBAf(4.2845984375,9.575841875,4.2167,9.15282,4.365115625,8.758654375);\nCBAf(5.492,7.92562,6.7661,9.95682,6.0098375,10.3459075);\nCBAf(4.5147125,9.97132,4.2845984375,9.575841875,4.6862,8.440745);\nCBAf(6.0098375,10.3459075,4.5147125,9.97132,4.6862,8.440745);\nCBAf(6.7661,9.95682,6.80194375,7.172323125,9.376775,9.00828125);\n// 8\n\n    \n    CBAf(11.0581,5.54532,9.376775,9.00828125,8.1873,6.55442);\n    \n    CBAf(12.0161,8.15272,11.0581,5.54532,13.976825,4.67798625);\n\nCBAf(13.976825,4.67798625,16.9653,4.14522,15.4630125,7.2957925);\nCBAf(11.0581,5.54532,12.0161,8.15272,9.376775,9.00828125);\nCBAf(16.9653,4.14522,18.9661,6.76492,15.4630125,7.2957925);\nCBAf(15.4630125,7.2957925,12.0161,8.15272,13.976825,4.67798625);\nCBAf(18.9661,6.76492,16.9653,4.14522,21.0607875,3.895875625);\nCBAf(6.80194375,7.172323125,8.1873,6.55442,9.376775,9.00828125);\nCBAf(6.0098375,10.3459075,5.6310171875,10.4946684375,5.2484,10.48892);\n// 16 1.3fps\n    \n    CBAf(6.0098375,10.3459075,5.2484,10.48892,4.5147125,9.97132);\nCBAf(8.9156,23.1581,6.8153125,22.7018165,8.72755,20.283829);\nCBAf(8.72755,20.283829,10.817,20.8219,8.9156,23.1581);\nCBAf(10.817,20.8219,8.72755,20.283829,10.3845765625,18.111813375);\nCBAf(7.4656,24.9478,6.8153125,22.7018165,8.9156,23.1581);\nCBAf(10.817,20.8219,10.3845765625,18.111813375,12.0314,19.484);\nCBAf(12.8355296875,15.979157125,13.100575,18.6053825,11.6125375,16.785854);\nCBAf(14.47765,15.364929,14.3127,17.9258,12.8355296875,15.979157125);\n// 24 - 48fps on lenovo\nCBAf(16.9880125,14.67030025,15.596625,17.4170392578,14.47765,15.364929);\nCBAf(11.6125375,16.785854,13.100575,18.6053825,12.0314,19.484);\nCBAf(14.47765,15.364929,15.596625,17.4170392578,14.3127,17.9258);\nCBAf(16.9880125,14.67030025,17.241675,17.0354515625,15.596625,17.4170392578);\nCBAf(14.3127,17.9258,13.100575,18.6053825,12.8355296875,15.979157125);\nCBAf(19.1946375,16.7989912109,17.241675,17.0354515625,16.9880125,14.67030025);\nCBAf(10.3845765625,18.111813375,11.6125375,16.785854,12.0314,19.484);\nCBAf(25.17465,3.9236825,22.1648203125,6.60912234375,21.0607875,3.895875625);\n// 32 - 60fps\n    \n    //if (false)\n    {\n        \n    CBAf(22.1648203125,6.60912234375,25.17465,3.9236825,25.3732625,6.64133375);\nCBAf(23.626,14.470714,21.4023,16.7256125,20.68075,14.358929);\nCBAf(23.626,14.470714,25.21645,14.693589,23.81145,16.8332697266);\nCBAf(25.21645,14.693589,27.3556203125,15.064697125,26.368875,17.1399171875);\nCBAf(28.5721234375,6.87280328125,25.3732625,6.64133375,25.17465,3.9236825);\nCBAf(16.9880125,14.67030025,20.68075,14.358929,19.1946375,16.7989912109);\nCBAf(29.2713375,4.255430625,31.7421,7.31478,28.5721234375,6.87280328125);\nCBAf(25.17465,3.9236825,29.2713375,4.255430625,28.5721234375,6.87280328125);\n// 40\n    CBAf(33.3153,4.91791,31.7421,7.31478,29.2713375,4.255430625);\nCBAf(35.3939484375,5.507465625,34.131425,7.9511125,33.3153,4.91791);\nCBAf(35.3939484375,5.507465625,36.466,8.79368,34.131425,7.9511125);\nCBAf(34.131425,7.9511125,31.7421,7.31478,33.3153,4.91791);\nCBAf(36.466,8.79368,35.3939484375,5.507465625,37.4116125,6.30449);\nCBAf(27.3556203125,15.064697125,29.7955875,15.685199,29.0213625,17.6635091797);\nCBAf(20.68075,14.358929,21.4023,16.7256125,19.1946375,16.7989912109);\nCBAf(23.81145,16.8332697266,25.21645,14.693589,26.368875,17.1399171875);\n// 48\n    \n    CBAf(23.626,14.470714,23.81145,16.8332697266,21.4023,16.7256125);\nCBAf(31.7157,18.422,29.7955875,15.685199,32.2443109375,16.461970875);\nCBAf(29.0213625,17.6635091797,26.368875,17.1399171875,27.3556203125,15.064697125);\nCBAf(29.0213625,17.6635091797,29.7955875,15.685199,31.7157,18.422);\nCBAf(34.40975,17.301889,31.7157,18.422,32.2443109375,16.461970875);\nCBAf(35.82205,17.957434,33.4694625,19.12470125,34.40975,17.301889);\nCBAf(31.7157,18.422,34.40975,17.301889,33.4694625,19.12470125);\nCBAf(37.42125,18.917089,35.950623625,20.7576875,35.1249,20.018);\nCBAf(33.4694625,19.12470125,35.82205,17.957434,35.1249,20.018);\nCBAf(37.115221,24.075183,34.2739183594,23.0895191016,35.375969873,22.2718364111);\nCBAf(35.950623625,20.7576875,37.42125,18.917089,36.248,21.326);\nCBAf(35.375969873,22.2718364111,36.2476,21.32599,36.248,21.326);\nCBAf(37.115221,24.075183,35.375969873,22.2718364111,36.248,21.326);\nCBAf(38.3886435,23.42400925,37.115221,24.075183,36.248,21.326);\nCBAf(34.7339835,24.98988925,32.9674537598,23.7865845068,34.2739183594,23.0895191016);\nCBAf(37.42125,18.917089,35.1249,20.018,35.82205,17.957434);\n    }\n// 64 38fps\n}\n\nfloat Scene( vec3 p, mat3 localToWorld )\n{\n    // shadertoy should have time slider.\n    \n    p = p * localToWorld;\n    \n    \n    \n     \n    // can we move the objects?\n    \n    p += vec3(\n        \n        // up\n        25.0 ,\n              // back\n              //-9.0,\n              -45.0, // either move it back or make it scale?\n\n        \n              // right\n              -30.0 );\n\n    vec2 a1 = vec2( 2.0,  0.6  + cos(iTime)) ;\n    // looks like a steam engine\n    vec2 b1 = vec2(1.75 + sin(iTime),  -1. + cos(iTime * 0.1));\n    vec2 c1 = vec2( 1.5, -1);\n\n   \n     CBAcanvas = 10000.0;\n    CBAp = p;\n    \n  \n    \n    //CBAf(46.862,84.40745,42.845984375,95.75841875,43.65115625,87.58654375);\n\nif (false)\nCBA64();\n    \n    if (true){\n    CBAf(22.1648203125,6.60912234375,18.9661,6.76492,21.0607875,3.895875625);\nCBAf(4.84645,24.758829,4.1634375,27.246805375,3.45187375,26.35632275);\nCBAf(7.4656,24.9478,5.89535,27.19933,4.84645,24.758829);\nCBAf(4.84645,24.758829,6.8153125,22.7018165,7.4656,24.9478);\nCBAf(7.9804575,25.169595,5.89535,27.19933,7.4656,24.9478);\nCBAf(3.62035,27.121429,3.36059640625,26.8046485312,3.45187375,26.35632275);\nCBAf(4.1634375,27.246805375,3.62035,27.121429,3.45187375,26.35632275);\nCBAf(4.1634375,27.246805375,4.84645,24.758829,5.89535,27.19933);\nCBAf(5.89535,27.19933,7.9804575,25.169595,8.62967375,27.13793375);\nCBAf(10.09205,27.31614,8.62967375,27.13793375,9.2156,25.30589);\nCBAf(7.9804575,25.169595,9.2156,25.30589,8.62967375,27.13793375);\nCBAf(11.102566125,27.710885,10.09205,27.31614,12.5434535156,25.6518437109);\nCBAf(9.2156,25.30589,12.5434535156,25.6518437109,10.09205,27.31614);\nCBAf(12.5434535156,25.6518437109,11.3586718906,27.9765740625,11.102566125,27.710885);\nCBAf(11.48245,28.312,16.664911,28.909827,11.577161,30.6588);\nCBAf(11.48245,28.312,11.3586718906,27.9765740625,12.5434535156,25.6518437109);\n// 80 33fps\n       CBAf(11.49767725,32.79723,11.577161,30.6588,16.56569,31.990027);\nCBAf(10.922451,33.9489,10.4868331406,36.2236359375,10.5230310469,34.6846328125);\nCBAf(10.922451,33.9489,11.2957324062,33.377311875,16.35852,35.348327);\nCBAf(10.922451,33.9489,15.97570625,36.77233075,10.85076,36.997);\nCBAf(10.4868331406,36.2236359375,10.377707625,35.4478625,10.5230310469,34.6846328125);\nCBAf(10.85076,36.997,10.4868331406,36.2236359375,10.922451,33.9489);\nCBAf(11.3719175,38.0717375,10.85076,36.997,15.97570625,36.77233075);\nCBAf(11.8177,39.6588,11.3719175,38.0717375,15.7603,39.809127);\nCBAf(12.37832375,41.803675,15.588105,42.948027,12.8679,43.9631);\nCBAf(12.8679,43.9631,15.41591,46.086927,13.354475,46.02503);\nCBAf(15.588105,42.948027,15.41591,46.086927,12.8679,43.9631);\nCBAf(14.086,46.553,13.6603696875,46.435945625,13.354475,46.02503);\nCBAf(14.08701,46.553347,14.086,46.553,14.93378875,46.4469995);\nCBAf(14.93378875,46.4469995,14.086,46.553,13.354475,46.02503);\nCBAf(13.354475,46.02503,15.41591,46.086927,14.93378875,46.4469995);\nCBAf(11.8177,39.6588,15.7603,39.809127,12.37832375,41.803675);\n// 96 26fps\n CBAf(16.5358225,34.6264395,11.2957324062,33.377311875,11.49767725,32.79723);\nCBAf(11.48245,28.312,12.5434535156,25.6518437109,16.664911,28.909827);\nCBAf(20.2833324219,25.9226589453,17.0236985,28.95994575,16.302053125,25.8775571875);\nCBAf(20.2833324219,25.9226589453,23.027621,28.087273,22.92079475,28.281233);\nCBAf(23.027621,28.087273,20.2833324219,25.9226589453,24.279225,25.7267775);\nCBAf(20.2833324219,25.9226589453,19.970411,31.033827,17.706336,29.338452);\nCBAf(17.0236985,28.95994575,16.664911,28.909827,16.302053125,25.8775571875);\nCBAf(23.195291,28.770903,19.970411,31.033827,22.92079475,28.281233);\nCBAf(20.2833324219,25.9226589453,17.706336,29.338452,17.0236985,28.95994575);\nCBAf(19.970411,31.033827,20.2833324219,25.9226589453,22.92079475,28.281233);\nCBAf(11.577161,30.6588,16.664911,28.909827,16.56569,31.990027);\nCBAf(31.482584375,24.3705790625,29.83967725,26.6614314375,28.0816644531,25.2295413672);\nCBAf(34.7339835,24.98988925,32.352746,25.9045955,32.9674537598,23.7865845068);\nCBAf(32.352746,25.9045955,31.482584375,24.3705790625,32.9674537598,23.7865845068);\nCBAf(26.665221,27.358183,23.811196,27.80536675,24.279225,25.7267775);\nCBAf(23.027621,28.087273,24.279225,25.7267775,23.811196,27.80536675);\n// 112 22fps\nCBAf(24.279225,25.7267775,28.0816644531,25.2295413672,26.665221,27.358183);\nCBAf(26.665221,27.358183,28.0816644531,25.2295413672,29.83967725,26.6614314375);\nCBAf(29.83967725,26.6614314375,31.482584375,24.3705790625,32.352746,25.9045955);\nCBAf(11.2957324062,33.377311875,16.5358225,34.6264395,16.35852,35.348327);\nCBAf(24.2354985,29.92757925,22.5663836563,32.9945379375,19.970411,31.033827);\nCBAf(15.7603,39.809127,15.588105,42.948027,12.37832375,41.803675);\nCBAf(16.35852,35.348327,15.97570625,36.77233075,10.922451,33.9489);\nCBAf(15.7603,39.809127,11.3719175,38.0717375,15.97570625,36.77233075);\nCBAf(11.49767725,32.79723,16.56569,31.990027,16.5358225,34.6264395);\nCBAf(24.2354985,29.92757925,26.165191,31.609803,22.5663836563,32.9945379375);\nCBAf(25.42731725,34.9381395,22.5663836563,32.9945379375,26.165191,31.609803);\nCBAf(25.42731725,34.9381395,26.165191,31.609803,30.2152738125,34.6905920625);\nCBAf(28.421739125,36.74273325,25.42731725,34.9381395,30.2152738125,34.6905920625);\nCBAf(31.416161,38.547327,28.421739125,36.74273325,30.2152738125,34.6905920625);\nCBAf(38.6166769375,39.6486451875,36.88112975,41.4080145,34.148645375,39.97767075);\nCBAf(31.416161,38.547327,34.4514035,37.3795905,34.148645375,39.97767075);\n// 128 20fps\n}\n    if (false){\n\n    CBAf(34.148645375,39.97767075,34.4514035,37.3795905,38.6166769375,39.6486451875);\nCBAf(31.416161,38.547327,30.2152738125,34.6905920625,34.4514035,37.3795905);\nCBAf(24.2354985,29.92757925,19.970411,31.033827,23.195291,28.770903);\nCBAf(16.302053125,25.8775571875,16.664911,28.909827,12.5434535156,25.6518437109);\nCBAf(34.2739183594,23.0895191016,37.115221,24.075183,34.7339835,24.98988925);\nCBAf(41.4153,8.00991,38.966,9.81608,37.4116125,6.30449);\nCBAf(41.266,10.77926,38.966,9.81608,41.4153,8.00991);\nCBAf(46.0914375,9.9181475,43.868275,11.8337475,41.4153,8.00991);\nCBAf(39.016025,19.77619275,38.715221,23.327063,36.248,21.326);\nCBAf(41.4153,8.00991,43.868275,11.8337475,41.266,10.77926);\nCBAf(46.516,12.75466,43.868275,11.8337475,46.0914375,9.9181475);\nCBAf(37.4116125,6.30449,38.966,9.81608,36.466,8.79368);\nCBAf(49.39455,13.430265,48.4496015625,10.8064490625,50.8653,11.50081);\nCBAf(55.6588125,14.235363875,53.59520625,11.9690473437,56.510175,12.26431875);\nCBAf(52.316,13.90136,50.8653,11.50081,53.59520625,11.9690473437);\nCBAf(49.39455,13.430265,46.516,12.75466,48.4496015625,10.8064490625);\nCBAf(52.316,13.90136,49.39455,13.430265,50.8653,11.50081);\nCBAf(52.316,13.90136,53.59520625,11.9690473437,55.6588125,14.235363875);\nCBAf(46.0914375,9.9181475,48.4496015625,10.8064490625,46.516,12.75466);\nCBAf(40.96525,20.420489,41.251946,23.238423375,39.97520225,23.1918618906);\nCBAf(39.016025,19.77619275,39.97520225,23.1918618906,38.715221,23.327063);\nCBAf(43.3788421875,20.9488229062,41.251946,23.238423375,40.96525,20.420489);\nCBAf(45.5517125,21.19938775,43.815221,23.450533,43.3788421875,20.9488229062);\nCBAf(38.3886435,23.42400925,36.248,21.326,38.715221,23.327063);\nCBAf(43.3788421875,20.9488229062,43.815221,23.450533,41.251946,23.238423375);\nCBAf(43.815221,23.450533,45.5517125,21.19938775,46.452721,23.548653);\nCBAf(39.97520225,23.1918618906,39.016025,19.77619275,40.96525,20.420489);\nCBAf(50.16525,21.458289,49.090221,23.646773,46.452721,23.548653);\nCBAf(45.5517125,21.19938775,50.16525,21.458289,46.452721,23.548653);\nCBAf(53.89025,21.682209,54.365221,23.843013,50.16525,21.458289);\nCBAf(57.61525,21.906129,54.365221,23.843013,53.89025,21.682209);\nCBAf(50.16525,21.458289,54.365221,23.843013,49.090221,23.646773);\nCBAf(55.666461,32.902157,56.306021,32.426382,56.4615785,33.39570675);\nCBAf(56.306021,32.426382,57.072961,32.154427,57.1460113125,33.0746669062);\nCBAf(58.815221,24.260273,54.365221,23.843013,57.61525,21.906129);\nCBAf(55.6588125,14.235363875,56.510175,12.26431875,58.666,14.3909);\nCBAf(58.7487375,12.362119375,58.7148833866633,14.3896788576393,58.6898966933317,14.3904944288196);\nCBAf(58.7148833866633,14.3896788576393,58.7487375,12.362119375,58.7648567733266,14.3880477152786);\nCBAf(58.8648035466532,14.3847854305572,58.7648567733266,14.3880477152786,58.7487375,12.362119375);\nCBAf(58.7487375,12.362119375,58.6898966933317,14.3904944288196,58.666,14.3909);\nCBAf(58.666,14.3909,58.6656908341666,14.3912845134006,58.6656378077768,14.3910362374418);\nCBAf(58.666,14.3909,58.6774033466658,14.3909022144098,58.6711566733329,14.3911061072049);\nCBAf(58.6774033466658,14.3909022144098,58.666,14.3909,58.6898966933317,14.3904944288196);\nCBAf(58.6711566733329,14.3911061072049,58.6680333366665,14.3912080536025,58.666,14.3909);\nCBAf(61.82325,12.77467,60.9873,12.45992,61.59095625,12.5013825);\nCBAf(60.9873,12.45992,61.82325,12.77467,62.03229875,13.63350125);\nCBAf(60.2640583732254,14.3391134444573,60.9873,12.45992,62.03229875,13.63350125);\nCBAf(59.0646970933063,14.3782608611143,58.8648035466532,14.3847854305572,58.7487375,12.362119375);\nCBAf(59.4644841866127,14.3652117222287,59.0646970933063,14.3782608611143,58.7487375,12.362119375);\nCBAf(62.03229875,13.63350125,62.00251,14.28237,60.2640583732254,14.3391134444573);\nCBAf(58.7487375,12.362119375,60.2640583732254,14.3391134444573,59.4644841866127,14.3652117222287);\nCBAf(58.7487375,12.362119375,60.9873,12.45992,60.2640583732254,14.3391134444573);\nCBAf(58.6652756155535,14.3911724748835,58.6656378077768,14.3910362374418,58.6653004170833,14.3912972567003);\nCBAf(58.6653004170833,14.3912972567003,58.6656378077768,14.3910362374418,58.6656908341666,14.3912845134006);\nCBAf(58.6660812512499,14.3912717701009,58.6656908341666,14.3912845134006,58.666,14.3909);\nCBAf(58.666,14.3909,58.6664716683332,14.3912590268012,58.6660812512499,14.3912717701009);\nCBAf(58.491286,32.0721235625,59.0434558438,33.20752175,57.965491,32.961903);\nCBAf(57.072961,32.154427,58.491286,32.0721235625,57.965491,32.961903);\nCBAf(58.6652756155535,14.3911724748835,58.6653004170833,14.3912972567003,58.66491,14.39131);\nCBAf(60.5901875,21.88058825,58.815221,24.260273,57.61525,21.906129);\nCBAf(61.56239625,22.5229355,60.5901875,21.88058825,61.1795734375,21.8598664687);\nCBAf(61.45755,21.961123,61.56239625,22.5229355,61.1795734375,21.8598664687);\nCBAf(58.815221,24.260273,61.51779,23.391723,61.469221,24.551923);\nCBAf(60.5901875,21.88058825,61.51779,23.391723,58.815221,24.260273);\n        \n        \n         }\n    \n    if (false){\n\n// 192 11 fps\n    CBAf(61.51779,23.391723,60.5901875,21.88058825,61.56239625,22.5229355);\nCBAf(58.6664716683332,14.3912590268012,58.666,14.3909,58.6680333366665,14.3912080536025);\nCBAf(59.781811,32.4641145,59.0434558438,33.20752175,58.491286,32.0721235625);\nCBAf(58.7487375,12.362119375,58.666,14.3909,56.510175,12.26431875);\nCBAf(57.072961,32.154427,57.965491,32.961903,57.1460113125,33.0746669062);\nCBAf(55.570491,34.578903,54.560226,35.0570945,54.919717875,33.8731679375);\nCBAf(54.560226,35.0570945,55.570491,34.578903,55.4184755313,35.5449405);\nCBAf(55.570491,34.578903,54.919717875,33.8731679375,55.9303519375,33.9040947187);\nCBAf(54.679886625,36.3076023125,54.560226,35.0570945,55.4184755313,35.5449405);\nCBAf(55.62413975,36.442878,54.9481182656,36.9120946953,54.679886625,36.3076023125);\nCBAf(56.1535545938,37.147953,55.370601,37.478357,55.62413975,36.442878);\nCBAf(54.9481182656,36.9120946953,55.62413975,36.442878,55.370601,37.478357);\nCBAf(55.62413975,36.442878,54.679886625,36.3076023125,55.4184755313,35.5449405);\nCBAf(55.666461,32.902157,55.9303519375,33.9040947187,54.919717875,33.8731679375);\nCBAf(55.9303519375,33.9040947187,55.666461,32.902157,56.4615785,33.39570675);\nCBAf(55.370601,37.478357,56.1535545938,37.147953,56.32937975,38.10150975);\nCBAf(56.972791,37.535403,56.32937975,38.10150975,56.1535545938,37.147953);\nCBAf(57.373201,38.258707,56.32937975,38.10150975,56.972791,37.535403);\nCBAf(57.373201,38.258707,56.972791,37.535403,57.82101475,37.50873675);\nCBAf(36.88112975,41.4080145,38.6166769375,39.6486451875,40.766411,43.066827);\nCBAf(42.454191,41.469603,40.766411,43.066827,38.6166769375,39.6486451875);\nCBAf(43.0758656875,43.9547766875,40.766411,43.066827,42.454191,41.469603);\nCBAf(45.3219535,42.5860105,43.0758656875,43.9547766875,42.454191,41.469603);\nCBAf(45.0257985,44.551072,43.0758656875,43.9547766875,45.3219535,42.5860105);\nCBAf(48.815911,45.158327,46.8584125625,44.9281198125,47.464991,43.150703);\nCBAf(45.3219535,42.5860105,46.8584125625,44.9281198125,45.0257985,44.551072);\nCBAf(45.3219535,42.5860105,47.464991,43.150703,46.8584125625,44.9281198125);\nCBAf(55.9189952383,44.3062168437,54.4426804531,43.2000377656,56.522066,42.594723);\nCBAf(51.2866664648,45.1798340312,48.815911,45.158327,49.8192281094,43.4926579219);\nCBAf(52.176762875,43.504226125,54.4426804531,43.2000377656,53.6806850938,44.89485825);\nCBAf(55.9189952383,44.3062168437,53.6806850938,44.89485825,54.4426804531,43.2000377656);\nCBAf(51.2866664648,45.1798340312,52.176762875,43.504226125,53.6806850938,44.89485825);\nCBAf(51.2866664648,45.1798340312,49.8192281094,43.4926579219,52.176762875,43.504226125);\nCBAf(55.9189952383,44.3062168437,56.522066,42.594723,57.92262525,43.416727);\nCBAf(47.464991,43.150703,49.8192281094,43.4926579219,48.815911,45.158327);\nCBAf(57.387701,34.814343,57.453081,35.132733,57.122191,35.157777375);\nCBAf(56.4615785,33.39570675,56.306021,32.426382,57.1460113125,33.0746669062);\nCBAf(58.0569236563,34.7134879375,58.043121,35.1480805,57.506801,34.751207);\nCBAf(58.62300725,34.9777995,59.0788127188,35.4821898125,58.535481,35.525213);\nCBAf(58.62300725,34.9777995,58.043121,35.1480805,58.0569236563,34.7134879375);\nCBAf(57.506801,34.751207,58.043121,35.1480805,57.453081,35.132733);\nCBAf(58.535481,35.525213,59.0788127188,35.4821898125,58.68167975,36.28013425);\nCBAf(58.535481,35.525213,58.043121,35.1480805,58.62300725,34.9777995);\nCBAf(57.387701,34.814343,57.506801,34.751207,57.453081,35.132733);\nCBAf(60.856111,33.3087866875,60.4454480312,34.36292175,59.85957225,33.697078);\nCBAf(60.4454480312,34.36292175,60.856111,33.3087866875,61.625761,34.584527);\nCBAf(59.85957225,33.697078,59.0434558438,33.20752175,59.781811,32.4641145);\nCBAf(60.832691,35.137403,60.4454480312,34.36292175,61.625761,34.584527);\nCBAf(58.68167975,36.28013425,59.0788127188,35.4821898125,59.298101,36.164707);\nCBAf(61.062011,36.246903,60.832691,35.137403,61.94885475,35.819797);\nCBAf(61.625761,34.584527,61.94885475,35.819797,60.832691,35.137403);\nCBAf(62.010911,36.906627,61.062011,36.246903,61.94885475,35.819797);\nCBAf(59.1897131875,36.9675445,58.68167975,36.28013425,59.298101,36.164707);\nCBAf(58.795266,37.617982,57.82101475,37.50873675,58.399891,37.088613);\nCBAf(58.399891,37.088613,59.1897131875,36.9675445,58.795266,37.617982);\nCBAf(59.1897131875,36.9675445,58.399891,37.088613,58.68167975,36.28013425);\nCBAf(58.1710113125,38.065282,57.82101475,37.50873675,58.795266,37.617982);\nCBAf(56.522066,42.594723,58.3200046719,41.7029119844,57.92262525,43.416727);\nCBAf(57.92262525,43.416727,58.3200046719,41.7029119844,59.6126034805,42.2292059062);\nCBAf(58.3200046719,41.7029119844,59.741581625,40.539234875,59.6126034805,42.2292059062);\nCBAf(57.373201,38.258707,57.82101475,37.50873675,58.1710113125,38.065282);\nCBAf(61.9470710708,37.9750042461,60.9606426113,38.315973752,61.075991,37.454803);\nCBAf(61.075991,37.454803,62.010911,36.906627,61.9470710708,37.9750042461);\nCBAf(61.7357180039,38.9713387187,60.9606426113,38.315973752,61.9470710708,37.9750042461);\n// 256 9fps lenovo\n    CBAf(61.3228381426,39.85890473435,59.741581625,40.539234875,60.6918820156,39.1183218281);\nCBAf(60.9099582813,40.74647075,59.741581625,40.539234875,61.3228381426,39.85890473435);\nCBAf(61.7357180039,38.9713387187,61.3228381426,39.85890473435,60.6918820156,39.1183218281);\nCBAf(61.7357180039,38.9713387187,60.6918820156,39.1183218281,60.9606426113,38.315973752);\nCBAf(59.6126034805,42.2292059062,59.741581625,40.539234875,60.9099582813,40.74647075);\nCBAf(61.075991,37.454803,61.062011,36.246903,62.010911,36.906627);\nCBAf(59.781811,32.4641145,60.856111,33.3087866875,59.85957225,33.697078);\nCBAf(39.016025,19.77619275,36.248,21.326,37.42125,18.917089);\n    // i4600 5.6 fps, 21fps in half screen. had to disable timeout, desktopgl not available.\n    }\n    //ABC[2] = vec2(1, 0);\n    //ABC[1] = vec2(1, 1);\n    //ABC[0] = vec2(0, 0);\n                \n    //AddTriangleABC(p, canvas1, ABC);\n\n    //AddTriangle(p, canvas1, ABC[0],ABC[1],ABC[2]);\n    \n    return CBAcanvas;\n    \n}\n\nvec2 CastRay( in vec3 ro, in vec3 rd, mat3 localToWorld )\n{\n    // how big is the scene?\n    const float maxd = 85.0;\n    \n\tfloat h = 0.5;\n    float t = 0.0;\n    float steps = 0.0;\n   \n    for ( int i = 0; i < 150; ++i )\n    {\n        if ( h < 0.001 || t > maxd ) \n        {\n            break;\n        }\n        \n\t    h = Scene( ro + rd * t, localToWorld );\n        t += h;\n        steps += 0.03;\n    }\n\n    if ( t > maxd )\n    {\n        t = -1.0;\n    }\n\t\n    return vec2(t, steps);\n}\n\nvec3 SceneNormal( in vec3 pos, mat3 localToWorld )\n{\n\tvec3 eps = vec3( 0.001, 0.0, 0.0 );\n\tvec3 nor = vec3(\n\t    Scene( pos + eps.xyy, localToWorld ) - Scene( pos - eps.xyy, localToWorld ),\n\t    Scene( pos + eps.yxy, localToWorld ) - Scene( pos - eps.yxy, localToWorld ),\n\t    Scene( pos + eps.yyx, localToWorld ) - Scene( pos - eps.yyx, localToWorld ) );\n\treturn normalize( -nor );\n}\n\n\n\n\nvec3 rotx(vec3 p, float a){\n    float s = sin(a), c = cos(a);\n    return vec3(p.x, c*p.y - s*p.z, s*p.y + c*p.z);\n}\n \n \n//From Dave_Hoskins (https://www.shadertoy.com/view/4djSRW)\nvec3 hash33(vec3 p)\n{\n    p = fract(p * vec3(443.8975,397.2973, 491.1871));\n    p += dot(p.zxy, p.yxz+19.27);\n    return fract(vec3(p.x * p.y, p.z*p.x, p.y*p.z));\n}\n\n//Very happy with this star function, cheap and smooth\nvec3 stars(in vec3 p)\n{\n    // 47fps\n    \n    vec3 c = vec3(0.);\n    float res = iResolution.x*1.5; // too small  and they will flicker\n    \n    // more stars?\n\tfor (float i=0.;i<2.;i++)\n    {\n        vec3 q = fract(p*(.15*res))-0.5;\n        vec3 id = floor(p*(.15*res));\n        vec2 rn = hash33(id).xy;\n        float c2 = 1.-smoothstep(0.,.6,length(q));\n        c2 *= step(rn.x,.0005+i*i*0.001);\n        c += c2*(mix(vec3(1.0,0.49,0.1),vec3(0.75,0.9,1.),rn.y)*0.25+0.75);\n        p *= 1.4;\n    }\n    return c*c*.7;\n}\n\nvec3 startrails(in vec3 rd)\n{\n    vec3 col0 = stars( normalize(rotx(rd, iTime * 0.1)));\n\n    vec3 col = col0;\n\n    for (int i = -120; i < 0; i++)\n    {\n    \tvec3 col1 = stars( normalize(rotx(rd, iTime * 0.1 + (float(i) * (1./600.) ))));\n        \n    \tcol += col1;    \n    }\n    \n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy / iResolution.xy;\n    vec2 p = -1.0 + 2.0 * q;\n\tp.x *= iResolution.x / iResolution.y;\n\n    // have comera zoom in and out to reveal boundaries\n\tvec3 rayOrigin \t= vec3( 0.0, 9. *cos( iTime * 0.2), +17. + 7. *sin( iTime * 0.2) );\n\t//vec3 rayOrigin \t= vec3( 0.0, -0.0, -3.5   );\n\n    vec3 rayDir \t= normalize( vec3( p.x, p.y, 1.0 ) );\n    \n    float theta = -0.5 * MATH_PI;\n    mat3 rotX = mat3(\n        vec3( cos( theta ), sin( theta ), 0.0 ),\n        vec3( -sin( theta ), cos( theta ), 0.0 ),\n\t\tvec3( 0.0, 0.0, 1.0 )\n        );    \n    \n    vec2 mo = iMouse.xy / iResolution.xy;    \n    \n    //float phi = 0.25 * MATH_PI + 10.0 * mo.x;    \n    //float phi = 0.25 * MATH_PI; \n    \n    // look straight at it. no mouse\n    //float phi = 0.5 * MATH_PI;    \n float phi = 0.5 * MATH_PI + 0.3 *sin( iTime * 0.2) ;     \n    mat3 rotY = mat3(\n        vec3( 1.0, 0.0, 0.0 ),\n        vec3( 0.0, cos( phi ), sin( phi ) ),\n        vec3( 0.0, -sin( phi ), cos( phi ) )\n        );\n    \n    //mat3 localToWorld = rotX * rotY;    \n    mat3 localToWorld = rotX * rotY;    \n\n\n\t//vec3 color = texture( iChannel0, q ).yyy * 0.3;\n\tvec3 color = vec3(0);\n    \n\tvec2 result = CastRay( rayOrigin, rayDir, localToWorld );\n    \n    if ( result.x > 0.0 )\n    {\n      color = vec3(result.y*2.0, result.y*0.3, result.y*0.2);\n    }\n    else\n    {\n        // 46fps vs 60fps\n      //  color= startrails( rayDir);\n        \n        color /=5.0;\n      color += vec3(\n          0.3*result.y*abs(sin(iTime*1.8)),0,0.0);\n    }\n    \n    fragColor = vec4( color, 1.0 );\n}\n","name":"Buf B","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"4sXGR8","channel":0}],"code":"// \"Quake Logo\" by Krzysztof Narkowicz @knarkowicz\n\nconst float MATH_PI = float( 3.14159265359 );\n\nfloat VisibilityTerm( float roughness, float ndotv, float ndotl )\n{\n\tfloat m2\t= roughness * roughness;\n\tfloat visV\t= ndotl * sqrt( ndotv * ( ndotv - ndotv * m2 ) + m2 );\n\tfloat visL\t= ndotv * sqrt( ndotl * ( ndotl - ndotl * m2 ) + m2 );\n\treturn 0.5 / max( visV + visL, 0.00001 );\n}\n\nfloat DistributionTerm( float roughness, float ndoth )\n{\n\tfloat m2\t= roughness * roughness;\n\tfloat d\t\t= ( ndoth * m2 - ndoth ) * ndoth + 1.0;\n\treturn m2 / ( d * d * MATH_PI );\n}\n\nvec3 FresnelTerm( vec3 specularColor, float vdoth )\n{\n\tvec3 fresnel = clamp( 50.0 * specularColor.y, 0.0, 1.0 ) * specularColor + ( 1.0 - specularColor ) * pow( ( 1.0 - vdoth ), 5.0 );\n\treturn fresnel;\n}\n\nvec3 LightSpecular( vec3 normal, vec3 viewDir, vec3 lightDir, vec3 lightColor, float roughness, vec3 specularColor )\n{\n\tvec3 halfVec = normalize( viewDir + lightDir );\n\n\tfloat vdoth = clamp( dot( viewDir,\thalfVec\t ), 0.0, 1.0 );\n\tfloat ndoth\t= clamp( dot( normal,\thalfVec\t ), 0.0, 1.0 );\n\tfloat ndotv = clamp( dot( normal,\tviewDir  ), 0.0, 1.0 );\n\tfloat ndotl = clamp( dot( normal,\tlightDir ), 0.0, 1.0 );\n    \n   \tvec3\tf = FresnelTerm( specularColor, vdoth );\n\tfloat\td = DistributionTerm( roughness, ndoth );\n\tfloat\tv = VisibilityTerm( roughness, ndotv, ndotl );\n    \n    vec3 specular;\n\tspecular = lightColor * f * ( d * v * MATH_PI * ndotl );\n\treturn specular;\n}\n\nfloat Cylinder( vec3 p, float r, float height ) \n{\n\tfloat d = length( p.xz ) - r;\n\td = max( d, abs( p.y ) - height );\n\treturn d;\n}\n\nfloat Sphere( vec3 p, float s )\n{\n\treturn length( p ) - s;\n}\n\n \n\n\nfloat Box( vec3 p, vec3 b )\n{\n \n    \n    \n\tvec3 d = abs( p ) - b;\n\t\n    float filler = min( \n        \n        max( d.x, max( d.y, d.z ) )\n        \n        , 0.0 ) + length( max( d, 0.0 ) );\n    \n    \n    //if (p.y > 0.0)\n    //    return 200.0;\n    \n    return filler;\n   \n}\n\nfloat Substract( float a, float b )\n{\n    return max( a, -b );\n}\n\nfloat SubstractRound( float a, float b, float r ) \n{\n\tvec2 u = max( vec2( r + a, r - b ), vec2( 0.0, 0.0 ) );\n\treturn min( -r, max( a, -b ) ) + length( u );\n}\n\nfloat Union( float a, float b )\n{\n    return min( a, b );\n}\n\nfloat UnionRound( float a, float b, float k )\n{\n    float h = clamp( 0.5 + 0.5 * ( b - a ) / k, 0.0, 1.0 );\n    return mix( b, a, h ) - k * h * ( 1.0 - h );\n}\n\nfloat TriPrism( vec3 p, float rot )\n{        \n    vec3 q = abs( p );\n    \n     return max(\n        // creates some type of symmetry\n        q.y - 0.5, \n     \n        // vertical line\n        p.x * cos(rot) + p.z * sin(rot)   \n     );\n}\n\n\nvoid AddTriangleABC(\n    // spatial point\n    inout vec3 p, \n    inout float canvas,\n\tvec2 ABC[3]\t\n\t)\n{\n      \tvec2 a1 = ABC[0] ;\n    \n    // looks like a steam engine\n        vec2 b1 = ABC[1];\n    \n        vec2 c1 = ABC[2];\n    \n    // A needs be to the right of B\n    \n    // need to check y too?\n    //if (B.x > A.x)\n    {\n      //  a1 = B;\n     //   b1 = A;\n    }\n            \n    \n      \n        float slice2AC = TriPrism(  p + vec3(\n        \n        // up\n        c1.y,\n              // back\n              -0.0,\n              \n              // right\n              c1.x\n        ), \n                                \n                                // rot1 + MATH_PI + 0.8\n                               \n                                -atan(a1.y-c1.y, a1.x-c1.x) \n                               );\n    \n    \n    \n    // could we have atoolbar so we could move the dots?\n        float slice0BC = TriPrism(  p + vec3(\n        \n        // up\n        b1.y,\n              // back\n              -0.0,\n              \n              // right\n              b1.x\n        ),// rot1 + MATH_PI - 1.1\n                               \n                                -atan(b1.y-c1.y, b1.x-c1.x) + MATH_PI\n                               );\n    \n    \n    \n    // atan2(deltaY, deltaX)\n    float slice1BA = TriPrism(  p + vec3(\n        \n        // up\n        a1.y,\n              // back\n              -0.0,\n              \n              // right\n              a1.x \n        ), -atan(b1.y-a1.y, b1.x-a1.x));\n\n    \n    \n    \n        //float slice = min(slice2AC,min(slice1BA,slice0BC))                    ;\n\t\t//float slice = slice0BC;\n    //float slice = max(slice0BC, slice1BA);\n        float i = max(slice2AC,max(slice1BA,slice0BC))                    ;\n    \n    \n     \n     canvas = min(i, canvas);\n    \n    // discard markers\n    return;\n        \n    \n    // need triangle markers?\n    //if (false)\n    // make A twice as big, while B moves\n     i = min(i,  Box(  p + vec3(a1.y,0.0,a1.x), vec3(\n                   \n                   // height\n                   0.2, \n                   \n                   //depth\n                   0.25, \n                   \n                   // width\n                   0.2)   )\n      );\n        \n    i = min(i,  Box(  p + vec3(b1.y,0.0,b1.x), vec3(\n                   \n                   // height\n                   0.1, \n                   \n                   //depth\n                   0.25, \n                   \n                   // width\n                   0.1)   )\n      );\n    \n        i = min(i,  Box(  p + vec3(c1.y,0.0,c1.x), vec3(\n                   \n                   // height\n                   0.05, \n                   \n                   //depth\n                   0.25, \n                   \n                   // width\n                   0.05)   )\n      );\n    \n    \n    // union\n    //canvas = min(canvas, i);\n    \n    canvas = min(i, canvas);\n}\n\n\nvoid AddTriangleABCCBA(\n    // spatial point\n    inout vec3 p, \n    inout float canvas,\n\tvec2 ABC[3]\t\n\t)\n{\n    vec2 CBA[3];\n    \n    CBA[2] = ABC[0];\n    CBA[1] = ABC[1];\n    CBA[0] = ABC[2];\n\n    //AddTriangleABC(p, canvas, ABC);\n    AddTriangleABC(p, canvas, CBA); // double sided polygon index?\n    \n}\n\n\nfloat CBAcanvas; // = 10000.0;\nvec3 CBAp;\n\nvoid CBA(\n    // spatial point\n    //inout vec3 p, \n\tvec2 ABC[3]\t\n\t)\n{\n    AddTriangleABCCBA(CBAp, CBAcanvas, ABC);\n}\n\nvoid CBAf(\n    float Ax,\n    float Ay,\n    float Bx,\n    float By,\n    float Cx,\n    float Cy\n    )\n{\n    vec2 ABC[3];\n    \n\tABC[0].x=Ax;\n\tABC[0].y=-Ay;\n\tABC[1].x=Bx;\n\tABC[1].y=-By;\n\tABC[2].x=Cx;\n\tABC[2].y=-Cy;\n    \n    AddTriangleABCCBA(CBAp, CBAcanvas, ABC);\n}\n\nvoid CBA64()\n{\n     CBAf(4.862,8.40745,4.845984375,9.75841875,4.65115625,8.58654375);\n\tCBAf(4.6862,8.440745,5.492,7.92562,6.0098375,10.3459075);\n    CBAf(6.80194375,7.172323125,6.7661,9.95682,5.492,7.92562);\n    CBAf(4.2845984375,9.575841875,4.2167,9.15282,4.365115625,8.758654375);\nCBAf(5.492,7.92562,6.7661,9.95682,6.0098375,10.3459075);\nCBAf(4.5147125,9.97132,4.2845984375,9.575841875,4.6862,8.440745);\nCBAf(6.0098375,10.3459075,4.5147125,9.97132,4.6862,8.440745);\nCBAf(6.7661,9.95682,6.80194375,7.172323125,9.376775,9.00828125);\n// 8\n\n    \n    CBAf(11.0581,5.54532,9.376775,9.00828125,8.1873,6.55442);\n    \n    CBAf(12.0161,8.15272,11.0581,5.54532,13.976825,4.67798625);\n\nCBAf(13.976825,4.67798625,16.9653,4.14522,15.4630125,7.2957925);\nCBAf(11.0581,5.54532,12.0161,8.15272,9.376775,9.00828125);\nCBAf(16.9653,4.14522,18.9661,6.76492,15.4630125,7.2957925);\nCBAf(15.4630125,7.2957925,12.0161,8.15272,13.976825,4.67798625);\nCBAf(18.9661,6.76492,16.9653,4.14522,21.0607875,3.895875625);\nCBAf(6.80194375,7.172323125,8.1873,6.55442,9.376775,9.00828125);\nCBAf(6.0098375,10.3459075,5.6310171875,10.4946684375,5.2484,10.48892);\n// 16 1.3fps\n    \n    CBAf(6.0098375,10.3459075,5.2484,10.48892,4.5147125,9.97132);\nCBAf(8.9156,23.1581,6.8153125,22.7018165,8.72755,20.283829);\nCBAf(8.72755,20.283829,10.817,20.8219,8.9156,23.1581);\nCBAf(10.817,20.8219,8.72755,20.283829,10.3845765625,18.111813375);\nCBAf(7.4656,24.9478,6.8153125,22.7018165,8.9156,23.1581);\nCBAf(10.817,20.8219,10.3845765625,18.111813375,12.0314,19.484);\nCBAf(12.8355296875,15.979157125,13.100575,18.6053825,11.6125375,16.785854);\nCBAf(14.47765,15.364929,14.3127,17.9258,12.8355296875,15.979157125);\n// 24 - 48fps on lenovo\nCBAf(16.9880125,14.67030025,15.596625,17.4170392578,14.47765,15.364929);\nCBAf(11.6125375,16.785854,13.100575,18.6053825,12.0314,19.484);\nCBAf(14.47765,15.364929,15.596625,17.4170392578,14.3127,17.9258);\nCBAf(16.9880125,14.67030025,17.241675,17.0354515625,15.596625,17.4170392578);\nCBAf(14.3127,17.9258,13.100575,18.6053825,12.8355296875,15.979157125);\nCBAf(19.1946375,16.7989912109,17.241675,17.0354515625,16.9880125,14.67030025);\nCBAf(10.3845765625,18.111813375,11.6125375,16.785854,12.0314,19.484);\nCBAf(25.17465,3.9236825,22.1648203125,6.60912234375,21.0607875,3.895875625);\n// 32 - 60fps\n    \n    //if (false)\n    {\n        \n    CBAf(22.1648203125,6.60912234375,25.17465,3.9236825,25.3732625,6.64133375);\nCBAf(23.626,14.470714,21.4023,16.7256125,20.68075,14.358929);\nCBAf(23.626,14.470714,25.21645,14.693589,23.81145,16.8332697266);\nCBAf(25.21645,14.693589,27.3556203125,15.064697125,26.368875,17.1399171875);\nCBAf(28.5721234375,6.87280328125,25.3732625,6.64133375,25.17465,3.9236825);\nCBAf(16.9880125,14.67030025,20.68075,14.358929,19.1946375,16.7989912109);\nCBAf(29.2713375,4.255430625,31.7421,7.31478,28.5721234375,6.87280328125);\nCBAf(25.17465,3.9236825,29.2713375,4.255430625,28.5721234375,6.87280328125);\n// 40\n    CBAf(33.3153,4.91791,31.7421,7.31478,29.2713375,4.255430625);\nCBAf(35.3939484375,5.507465625,34.131425,7.9511125,33.3153,4.91791);\nCBAf(35.3939484375,5.507465625,36.466,8.79368,34.131425,7.9511125);\nCBAf(34.131425,7.9511125,31.7421,7.31478,33.3153,4.91791);\nCBAf(36.466,8.79368,35.3939484375,5.507465625,37.4116125,6.30449);\nCBAf(27.3556203125,15.064697125,29.7955875,15.685199,29.0213625,17.6635091797);\nCBAf(20.68075,14.358929,21.4023,16.7256125,19.1946375,16.7989912109);\nCBAf(23.81145,16.8332697266,25.21645,14.693589,26.368875,17.1399171875);\n// 48\n    \n    CBAf(23.626,14.470714,23.81145,16.8332697266,21.4023,16.7256125);\nCBAf(31.7157,18.422,29.7955875,15.685199,32.2443109375,16.461970875);\nCBAf(29.0213625,17.6635091797,26.368875,17.1399171875,27.3556203125,15.064697125);\nCBAf(29.0213625,17.6635091797,29.7955875,15.685199,31.7157,18.422);\nCBAf(34.40975,17.301889,31.7157,18.422,32.2443109375,16.461970875);\nCBAf(35.82205,17.957434,33.4694625,19.12470125,34.40975,17.301889);\nCBAf(31.7157,18.422,34.40975,17.301889,33.4694625,19.12470125);\nCBAf(37.42125,18.917089,35.950623625,20.7576875,35.1249,20.018);\nCBAf(33.4694625,19.12470125,35.82205,17.957434,35.1249,20.018);\nCBAf(37.115221,24.075183,34.2739183594,23.0895191016,35.375969873,22.2718364111);\nCBAf(35.950623625,20.7576875,37.42125,18.917089,36.248,21.326);\nCBAf(35.375969873,22.2718364111,36.2476,21.32599,36.248,21.326);\nCBAf(37.115221,24.075183,35.375969873,22.2718364111,36.248,21.326);\nCBAf(38.3886435,23.42400925,37.115221,24.075183,36.248,21.326);\nCBAf(34.7339835,24.98988925,32.9674537598,23.7865845068,34.2739183594,23.0895191016);\nCBAf(37.42125,18.917089,35.1249,20.018,35.82205,17.957434);\n    }\n// 64 38fps\n}\n\nfloat Scene( vec3 p, mat3 localToWorld )\n{\n    // shadertoy should have time slider.\n    \n    p = p * localToWorld;\n    \n    \n    \n     \n    // can we move the objects?\n    \n    p += vec3(\n        \n        // up\n        25.0 ,\n              // back\n              //-9.0,\n              -45.0, // either move it back or make it scale?\n\n        \n              // right\n              -30.0 );\n\n    vec2 a1 = vec2( 2.0,  0.6  + cos(iTime)) ;\n    // looks like a steam engine\n    vec2 b1 = vec2(1.75 + sin(iTime),  -1. + cos(iTime * 0.1));\n    vec2 c1 = vec2( 1.5, -1);\n\n   \n     CBAcanvas = 10000.0;\n    CBAp = p;\n    \n  \n    \n    //CBAf(46.862,84.40745,42.845984375,95.75841875,43.65115625,87.58654375);\n\nif (false)\nCBA64();\n    \n    if (false){\n    CBAf(22.1648203125,6.60912234375,18.9661,6.76492,21.0607875,3.895875625);\nCBAf(4.84645,24.758829,4.1634375,27.246805375,3.45187375,26.35632275);\nCBAf(7.4656,24.9478,5.89535,27.19933,4.84645,24.758829);\nCBAf(4.84645,24.758829,6.8153125,22.7018165,7.4656,24.9478);\nCBAf(7.9804575,25.169595,5.89535,27.19933,7.4656,24.9478);\nCBAf(3.62035,27.121429,3.36059640625,26.8046485312,3.45187375,26.35632275);\nCBAf(4.1634375,27.246805375,3.62035,27.121429,3.45187375,26.35632275);\nCBAf(4.1634375,27.246805375,4.84645,24.758829,5.89535,27.19933);\nCBAf(5.89535,27.19933,7.9804575,25.169595,8.62967375,27.13793375);\nCBAf(10.09205,27.31614,8.62967375,27.13793375,9.2156,25.30589);\nCBAf(7.9804575,25.169595,9.2156,25.30589,8.62967375,27.13793375);\nCBAf(11.102566125,27.710885,10.09205,27.31614,12.5434535156,25.6518437109);\nCBAf(9.2156,25.30589,12.5434535156,25.6518437109,10.09205,27.31614);\nCBAf(12.5434535156,25.6518437109,11.3586718906,27.9765740625,11.102566125,27.710885);\nCBAf(11.48245,28.312,16.664911,28.909827,11.577161,30.6588);\nCBAf(11.48245,28.312,11.3586718906,27.9765740625,12.5434535156,25.6518437109);\n// 80 33fps\n       CBAf(11.49767725,32.79723,11.577161,30.6588,16.56569,31.990027);\nCBAf(10.922451,33.9489,10.4868331406,36.2236359375,10.5230310469,34.6846328125);\nCBAf(10.922451,33.9489,11.2957324062,33.377311875,16.35852,35.348327);\nCBAf(10.922451,33.9489,15.97570625,36.77233075,10.85076,36.997);\nCBAf(10.4868331406,36.2236359375,10.377707625,35.4478625,10.5230310469,34.6846328125);\nCBAf(10.85076,36.997,10.4868331406,36.2236359375,10.922451,33.9489);\nCBAf(11.3719175,38.0717375,10.85076,36.997,15.97570625,36.77233075);\nCBAf(11.8177,39.6588,11.3719175,38.0717375,15.7603,39.809127);\nCBAf(12.37832375,41.803675,15.588105,42.948027,12.8679,43.9631);\nCBAf(12.8679,43.9631,15.41591,46.086927,13.354475,46.02503);\nCBAf(15.588105,42.948027,15.41591,46.086927,12.8679,43.9631);\nCBAf(14.086,46.553,13.6603696875,46.435945625,13.354475,46.02503);\nCBAf(14.08701,46.553347,14.086,46.553,14.93378875,46.4469995);\nCBAf(14.93378875,46.4469995,14.086,46.553,13.354475,46.02503);\nCBAf(13.354475,46.02503,15.41591,46.086927,14.93378875,46.4469995);\nCBAf(11.8177,39.6588,15.7603,39.809127,12.37832375,41.803675);\n// 96 26fps\n CBAf(16.5358225,34.6264395,11.2957324062,33.377311875,11.49767725,32.79723);\nCBAf(11.48245,28.312,12.5434535156,25.6518437109,16.664911,28.909827);\nCBAf(20.2833324219,25.9226589453,17.0236985,28.95994575,16.302053125,25.8775571875);\nCBAf(20.2833324219,25.9226589453,23.027621,28.087273,22.92079475,28.281233);\nCBAf(23.027621,28.087273,20.2833324219,25.9226589453,24.279225,25.7267775);\nCBAf(20.2833324219,25.9226589453,19.970411,31.033827,17.706336,29.338452);\nCBAf(17.0236985,28.95994575,16.664911,28.909827,16.302053125,25.8775571875);\nCBAf(23.195291,28.770903,19.970411,31.033827,22.92079475,28.281233);\nCBAf(20.2833324219,25.9226589453,17.706336,29.338452,17.0236985,28.95994575);\nCBAf(19.970411,31.033827,20.2833324219,25.9226589453,22.92079475,28.281233);\nCBAf(11.577161,30.6588,16.664911,28.909827,16.56569,31.990027);\nCBAf(31.482584375,24.3705790625,29.83967725,26.6614314375,28.0816644531,25.2295413672);\nCBAf(34.7339835,24.98988925,32.352746,25.9045955,32.9674537598,23.7865845068);\nCBAf(32.352746,25.9045955,31.482584375,24.3705790625,32.9674537598,23.7865845068);\nCBAf(26.665221,27.358183,23.811196,27.80536675,24.279225,25.7267775);\nCBAf(23.027621,28.087273,24.279225,25.7267775,23.811196,27.80536675);\n// 112 22fps\nCBAf(24.279225,25.7267775,28.0816644531,25.2295413672,26.665221,27.358183);\nCBAf(26.665221,27.358183,28.0816644531,25.2295413672,29.83967725,26.6614314375);\nCBAf(29.83967725,26.6614314375,31.482584375,24.3705790625,32.352746,25.9045955);\nCBAf(11.2957324062,33.377311875,16.5358225,34.6264395,16.35852,35.348327);\nCBAf(24.2354985,29.92757925,22.5663836563,32.9945379375,19.970411,31.033827);\nCBAf(15.7603,39.809127,15.588105,42.948027,12.37832375,41.803675);\nCBAf(16.35852,35.348327,15.97570625,36.77233075,10.922451,33.9489);\nCBAf(15.7603,39.809127,11.3719175,38.0717375,15.97570625,36.77233075);\nCBAf(11.49767725,32.79723,16.56569,31.990027,16.5358225,34.6264395);\nCBAf(24.2354985,29.92757925,26.165191,31.609803,22.5663836563,32.9945379375);\nCBAf(25.42731725,34.9381395,22.5663836563,32.9945379375,26.165191,31.609803);\nCBAf(25.42731725,34.9381395,26.165191,31.609803,30.2152738125,34.6905920625);\nCBAf(28.421739125,36.74273325,25.42731725,34.9381395,30.2152738125,34.6905920625);\nCBAf(31.416161,38.547327,28.421739125,36.74273325,30.2152738125,34.6905920625);\nCBAf(38.6166769375,39.6486451875,36.88112975,41.4080145,34.148645375,39.97767075);\nCBAf(31.416161,38.547327,34.4514035,37.3795905,34.148645375,39.97767075);\n// 128 20fps\n}\n    if (true){\n\n    CBAf(34.148645375,39.97767075,34.4514035,37.3795905,38.6166769375,39.6486451875);\nCBAf(31.416161,38.547327,30.2152738125,34.6905920625,34.4514035,37.3795905);\nCBAf(24.2354985,29.92757925,19.970411,31.033827,23.195291,28.770903);\nCBAf(16.302053125,25.8775571875,16.664911,28.909827,12.5434535156,25.6518437109);\nCBAf(34.2739183594,23.0895191016,37.115221,24.075183,34.7339835,24.98988925);\nCBAf(41.4153,8.00991,38.966,9.81608,37.4116125,6.30449);\nCBAf(41.266,10.77926,38.966,9.81608,41.4153,8.00991);\nCBAf(46.0914375,9.9181475,43.868275,11.8337475,41.4153,8.00991);\nCBAf(39.016025,19.77619275,38.715221,23.327063,36.248,21.326);\nCBAf(41.4153,8.00991,43.868275,11.8337475,41.266,10.77926);\nCBAf(46.516,12.75466,43.868275,11.8337475,46.0914375,9.9181475);\nCBAf(37.4116125,6.30449,38.966,9.81608,36.466,8.79368);\nCBAf(49.39455,13.430265,48.4496015625,10.8064490625,50.8653,11.50081);\nCBAf(55.6588125,14.235363875,53.59520625,11.9690473437,56.510175,12.26431875);\nCBAf(52.316,13.90136,50.8653,11.50081,53.59520625,11.9690473437);\nCBAf(49.39455,13.430265,46.516,12.75466,48.4496015625,10.8064490625);\nCBAf(52.316,13.90136,49.39455,13.430265,50.8653,11.50081);\nCBAf(52.316,13.90136,53.59520625,11.9690473437,55.6588125,14.235363875);\nCBAf(46.0914375,9.9181475,48.4496015625,10.8064490625,46.516,12.75466);\nCBAf(40.96525,20.420489,41.251946,23.238423375,39.97520225,23.1918618906);\nCBAf(39.016025,19.77619275,39.97520225,23.1918618906,38.715221,23.327063);\nCBAf(43.3788421875,20.9488229062,41.251946,23.238423375,40.96525,20.420489);\nCBAf(45.5517125,21.19938775,43.815221,23.450533,43.3788421875,20.9488229062);\nCBAf(38.3886435,23.42400925,36.248,21.326,38.715221,23.327063);\nCBAf(43.3788421875,20.9488229062,43.815221,23.450533,41.251946,23.238423375);\nCBAf(43.815221,23.450533,45.5517125,21.19938775,46.452721,23.548653);\nCBAf(39.97520225,23.1918618906,39.016025,19.77619275,40.96525,20.420489);\nCBAf(50.16525,21.458289,49.090221,23.646773,46.452721,23.548653);\nCBAf(45.5517125,21.19938775,50.16525,21.458289,46.452721,23.548653);\nCBAf(53.89025,21.682209,54.365221,23.843013,50.16525,21.458289);\nCBAf(57.61525,21.906129,54.365221,23.843013,53.89025,21.682209);\nCBAf(50.16525,21.458289,54.365221,23.843013,49.090221,23.646773);\nCBAf(55.666461,32.902157,56.306021,32.426382,56.4615785,33.39570675);\nCBAf(56.306021,32.426382,57.072961,32.154427,57.1460113125,33.0746669062);\nCBAf(58.815221,24.260273,54.365221,23.843013,57.61525,21.906129);\nCBAf(55.6588125,14.235363875,56.510175,12.26431875,58.666,14.3909);\nCBAf(58.7487375,12.362119375,58.7148833866633,14.3896788576393,58.6898966933317,14.3904944288196);\nCBAf(58.7148833866633,14.3896788576393,58.7487375,12.362119375,58.7648567733266,14.3880477152786);\nCBAf(58.8648035466532,14.3847854305572,58.7648567733266,14.3880477152786,58.7487375,12.362119375);\nCBAf(58.7487375,12.362119375,58.6898966933317,14.3904944288196,58.666,14.3909);\nCBAf(58.666,14.3909,58.6656908341666,14.3912845134006,58.6656378077768,14.3910362374418);\nCBAf(58.666,14.3909,58.6774033466658,14.3909022144098,58.6711566733329,14.3911061072049);\nCBAf(58.6774033466658,14.3909022144098,58.666,14.3909,58.6898966933317,14.3904944288196);\nCBAf(58.6711566733329,14.3911061072049,58.6680333366665,14.3912080536025,58.666,14.3909);\nCBAf(61.82325,12.77467,60.9873,12.45992,61.59095625,12.5013825);\nCBAf(60.9873,12.45992,61.82325,12.77467,62.03229875,13.63350125);\nCBAf(60.2640583732254,14.3391134444573,60.9873,12.45992,62.03229875,13.63350125);\nCBAf(59.0646970933063,14.3782608611143,58.8648035466532,14.3847854305572,58.7487375,12.362119375);\nCBAf(59.4644841866127,14.3652117222287,59.0646970933063,14.3782608611143,58.7487375,12.362119375);\nCBAf(62.03229875,13.63350125,62.00251,14.28237,60.2640583732254,14.3391134444573);\nCBAf(58.7487375,12.362119375,60.2640583732254,14.3391134444573,59.4644841866127,14.3652117222287);\nCBAf(58.7487375,12.362119375,60.9873,12.45992,60.2640583732254,14.3391134444573);\nCBAf(58.6652756155535,14.3911724748835,58.6656378077768,14.3910362374418,58.6653004170833,14.3912972567003);\nCBAf(58.6653004170833,14.3912972567003,58.6656378077768,14.3910362374418,58.6656908341666,14.3912845134006);\nCBAf(58.6660812512499,14.3912717701009,58.6656908341666,14.3912845134006,58.666,14.3909);\nCBAf(58.666,14.3909,58.6664716683332,14.3912590268012,58.6660812512499,14.3912717701009);\nCBAf(58.491286,32.0721235625,59.0434558438,33.20752175,57.965491,32.961903);\nCBAf(57.072961,32.154427,58.491286,32.0721235625,57.965491,32.961903);\nCBAf(58.6652756155535,14.3911724748835,58.6653004170833,14.3912972567003,58.66491,14.39131);\nCBAf(60.5901875,21.88058825,58.815221,24.260273,57.61525,21.906129);\nCBAf(61.56239625,22.5229355,60.5901875,21.88058825,61.1795734375,21.8598664687);\nCBAf(61.45755,21.961123,61.56239625,22.5229355,61.1795734375,21.8598664687);\nCBAf(58.815221,24.260273,61.51779,23.391723,61.469221,24.551923);\nCBAf(60.5901875,21.88058825,61.51779,23.391723,58.815221,24.260273);\n        \n        \n         }\n    \n    if (false){\n\n// 192 11 fps\n    CBAf(61.51779,23.391723,60.5901875,21.88058825,61.56239625,22.5229355);\nCBAf(58.6664716683332,14.3912590268012,58.666,14.3909,58.6680333366665,14.3912080536025);\nCBAf(59.781811,32.4641145,59.0434558438,33.20752175,58.491286,32.0721235625);\nCBAf(58.7487375,12.362119375,58.666,14.3909,56.510175,12.26431875);\nCBAf(57.072961,32.154427,57.965491,32.961903,57.1460113125,33.0746669062);\nCBAf(55.570491,34.578903,54.560226,35.0570945,54.919717875,33.8731679375);\nCBAf(54.560226,35.0570945,55.570491,34.578903,55.4184755313,35.5449405);\nCBAf(55.570491,34.578903,54.919717875,33.8731679375,55.9303519375,33.9040947187);\nCBAf(54.679886625,36.3076023125,54.560226,35.0570945,55.4184755313,35.5449405);\nCBAf(55.62413975,36.442878,54.9481182656,36.9120946953,54.679886625,36.3076023125);\nCBAf(56.1535545938,37.147953,55.370601,37.478357,55.62413975,36.442878);\nCBAf(54.9481182656,36.9120946953,55.62413975,36.442878,55.370601,37.478357);\nCBAf(55.62413975,36.442878,54.679886625,36.3076023125,55.4184755313,35.5449405);\nCBAf(55.666461,32.902157,55.9303519375,33.9040947187,54.919717875,33.8731679375);\nCBAf(55.9303519375,33.9040947187,55.666461,32.902157,56.4615785,33.39570675);\nCBAf(55.370601,37.478357,56.1535545938,37.147953,56.32937975,38.10150975);\nCBAf(56.972791,37.535403,56.32937975,38.10150975,56.1535545938,37.147953);\nCBAf(57.373201,38.258707,56.32937975,38.10150975,56.972791,37.535403);\nCBAf(57.373201,38.258707,56.972791,37.535403,57.82101475,37.50873675);\nCBAf(36.88112975,41.4080145,38.6166769375,39.6486451875,40.766411,43.066827);\nCBAf(42.454191,41.469603,40.766411,43.066827,38.6166769375,39.6486451875);\nCBAf(43.0758656875,43.9547766875,40.766411,43.066827,42.454191,41.469603);\nCBAf(45.3219535,42.5860105,43.0758656875,43.9547766875,42.454191,41.469603);\nCBAf(45.0257985,44.551072,43.0758656875,43.9547766875,45.3219535,42.5860105);\nCBAf(48.815911,45.158327,46.8584125625,44.9281198125,47.464991,43.150703);\nCBAf(45.3219535,42.5860105,46.8584125625,44.9281198125,45.0257985,44.551072);\nCBAf(45.3219535,42.5860105,47.464991,43.150703,46.8584125625,44.9281198125);\nCBAf(55.9189952383,44.3062168437,54.4426804531,43.2000377656,56.522066,42.594723);\nCBAf(51.2866664648,45.1798340312,48.815911,45.158327,49.8192281094,43.4926579219);\nCBAf(52.176762875,43.504226125,54.4426804531,43.2000377656,53.6806850938,44.89485825);\nCBAf(55.9189952383,44.3062168437,53.6806850938,44.89485825,54.4426804531,43.2000377656);\nCBAf(51.2866664648,45.1798340312,52.176762875,43.504226125,53.6806850938,44.89485825);\nCBAf(51.2866664648,45.1798340312,49.8192281094,43.4926579219,52.176762875,43.504226125);\nCBAf(55.9189952383,44.3062168437,56.522066,42.594723,57.92262525,43.416727);\nCBAf(47.464991,43.150703,49.8192281094,43.4926579219,48.815911,45.158327);\nCBAf(57.387701,34.814343,57.453081,35.132733,57.122191,35.157777375);\nCBAf(56.4615785,33.39570675,56.306021,32.426382,57.1460113125,33.0746669062);\nCBAf(58.0569236563,34.7134879375,58.043121,35.1480805,57.506801,34.751207);\nCBAf(58.62300725,34.9777995,59.0788127188,35.4821898125,58.535481,35.525213);\nCBAf(58.62300725,34.9777995,58.043121,35.1480805,58.0569236563,34.7134879375);\nCBAf(57.506801,34.751207,58.043121,35.1480805,57.453081,35.132733);\nCBAf(58.535481,35.525213,59.0788127188,35.4821898125,58.68167975,36.28013425);\nCBAf(58.535481,35.525213,58.043121,35.1480805,58.62300725,34.9777995);\nCBAf(57.387701,34.814343,57.506801,34.751207,57.453081,35.132733);\nCBAf(60.856111,33.3087866875,60.4454480312,34.36292175,59.85957225,33.697078);\nCBAf(60.4454480312,34.36292175,60.856111,33.3087866875,61.625761,34.584527);\nCBAf(59.85957225,33.697078,59.0434558438,33.20752175,59.781811,32.4641145);\nCBAf(60.832691,35.137403,60.4454480312,34.36292175,61.625761,34.584527);\nCBAf(58.68167975,36.28013425,59.0788127188,35.4821898125,59.298101,36.164707);\nCBAf(61.062011,36.246903,60.832691,35.137403,61.94885475,35.819797);\nCBAf(61.625761,34.584527,61.94885475,35.819797,60.832691,35.137403);\nCBAf(62.010911,36.906627,61.062011,36.246903,61.94885475,35.819797);\nCBAf(59.1897131875,36.9675445,58.68167975,36.28013425,59.298101,36.164707);\nCBAf(58.795266,37.617982,57.82101475,37.50873675,58.399891,37.088613);\nCBAf(58.399891,37.088613,59.1897131875,36.9675445,58.795266,37.617982);\nCBAf(59.1897131875,36.9675445,58.399891,37.088613,58.68167975,36.28013425);\nCBAf(58.1710113125,38.065282,57.82101475,37.50873675,58.795266,37.617982);\nCBAf(56.522066,42.594723,58.3200046719,41.7029119844,57.92262525,43.416727);\nCBAf(57.92262525,43.416727,58.3200046719,41.7029119844,59.6126034805,42.2292059062);\nCBAf(58.3200046719,41.7029119844,59.741581625,40.539234875,59.6126034805,42.2292059062);\nCBAf(57.373201,38.258707,57.82101475,37.50873675,58.1710113125,38.065282);\nCBAf(61.9470710708,37.9750042461,60.9606426113,38.315973752,61.075991,37.454803);\nCBAf(61.075991,37.454803,62.010911,36.906627,61.9470710708,37.9750042461);\nCBAf(61.7357180039,38.9713387187,60.9606426113,38.315973752,61.9470710708,37.9750042461);\n// 256 9fps lenovo\n    CBAf(61.3228381426,39.85890473435,59.741581625,40.539234875,60.6918820156,39.1183218281);\nCBAf(60.9099582813,40.74647075,59.741581625,40.539234875,61.3228381426,39.85890473435);\nCBAf(61.7357180039,38.9713387187,61.3228381426,39.85890473435,60.6918820156,39.1183218281);\nCBAf(61.7357180039,38.9713387187,60.6918820156,39.1183218281,60.9606426113,38.315973752);\nCBAf(59.6126034805,42.2292059062,59.741581625,40.539234875,60.9099582813,40.74647075);\nCBAf(61.075991,37.454803,61.062011,36.246903,62.010911,36.906627);\nCBAf(59.781811,32.4641145,60.856111,33.3087866875,59.85957225,33.697078);\nCBAf(39.016025,19.77619275,36.248,21.326,37.42125,18.917089);\n    // i4600 5.6 fps, 21fps in half screen. had to disable timeout, desktopgl not available.\n    }\n    //ABC[2] = vec2(1, 0);\n    //ABC[1] = vec2(1, 1);\n    //ABC[0] = vec2(0, 0);\n                \n    //AddTriangleABC(p, canvas1, ABC);\n\n    //AddTriangle(p, canvas1, ABC[0],ABC[1],ABC[2]);\n    \n    return CBAcanvas;\n    \n}\n\nvec2 CastRay( in vec3 ro, in vec3 rd, mat3 localToWorld )\n{\n    // how big is the scene?\n    const float maxd = 85.0;\n    \n\tfloat h = 0.5;\n    float t = 0.0;\n    float steps = 0.0;\n   \n    for ( int i = 0; i < 150; ++i )\n    {\n        if ( h < 0.001 || t > maxd ) \n        {\n            break;\n        }\n        \n\t    h = Scene( ro + rd * t, localToWorld );\n        t += h;\n        steps += 0.03;\n    }\n\n    if ( t > maxd )\n    {\n        t = -1.0;\n    }\n\t\n    return vec2(t, steps);\n}\n\nvec3 SceneNormal( in vec3 pos, mat3 localToWorld )\n{\n\tvec3 eps = vec3( 0.001, 0.0, 0.0 );\n\tvec3 nor = vec3(\n\t    Scene( pos + eps.xyy, localToWorld ) - Scene( pos - eps.xyy, localToWorld ),\n\t    Scene( pos + eps.yxy, localToWorld ) - Scene( pos - eps.yxy, localToWorld ),\n\t    Scene( pos + eps.yyx, localToWorld ) - Scene( pos - eps.yyx, localToWorld ) );\n\treturn normalize( -nor );\n}\n\n\n\n\nvec3 rotx(vec3 p, float a){\n    float s = sin(a), c = cos(a);\n    return vec3(p.x, c*p.y - s*p.z, s*p.y + c*p.z);\n}\n \n \n//From Dave_Hoskins (https://www.shadertoy.com/view/4djSRW)\nvec3 hash33(vec3 p)\n{\n    p = fract(p * vec3(443.8975,397.2973, 491.1871));\n    p += dot(p.zxy, p.yxz+19.27);\n    return fract(vec3(p.x * p.y, p.z*p.x, p.y*p.z));\n}\n\n//Very happy with this star function, cheap and smooth\nvec3 stars(in vec3 p)\n{\n    // 47fps\n    \n    vec3 c = vec3(0.);\n    float res = iResolution.x*1.5; // too small  and they will flicker\n    \n    // more stars?\n\tfor (float i=0.;i<2.;i++)\n    {\n        vec3 q = fract(p*(.15*res))-0.5;\n        vec3 id = floor(p*(.15*res));\n        vec2 rn = hash33(id).xy;\n        float c2 = 1.-smoothstep(0.,.6,length(q));\n        c2 *= step(rn.x,.0005+i*i*0.001);\n        c += c2*(mix(vec3(1.0,0.49,0.1),vec3(0.75,0.9,1.),rn.y)*0.25+0.75);\n        p *= 1.4;\n    }\n    return c*c*.7;\n}\n\nvec3 startrails(in vec3 rd)\n{\n    vec3 col0 = stars( normalize(rotx(rd, iTime * 0.1)));\n\n    vec3 col = col0;\n\n    for (int i = -120; i < 0; i++)\n    {\n    \tvec3 col1 = stars( normalize(rotx(rd, iTime * 0.1 + (float(i) * (1./600.) ))));\n        \n    \tcol += col1;    \n    }\n    \n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy / iResolution.xy;\n    vec2 p = -1.0 + 2.0 * q;\n\tp.x *= iResolution.x / iResolution.y;\n\n    // have comera zoom in and out to reveal boundaries\n\tvec3 rayOrigin \t= vec3( 0.0, 9. *cos( iTime * 0.2), +17. + 7. *sin( iTime * 0.2) );\n\t//vec3 rayOrigin \t= vec3( 0.0, -0.0, -3.5   );\n\n    vec3 rayDir \t= normalize( vec3( p.x, p.y, 1.0 ) );\n    \n    float theta = -0.5 * MATH_PI;\n    mat3 rotX = mat3(\n        vec3( cos( theta ), sin( theta ), 0.0 ),\n        vec3( -sin( theta ), cos( theta ), 0.0 ),\n\t\tvec3( 0.0, 0.0, 1.0 )\n        );    \n    \n    vec2 mo = iMouse.xy / iResolution.xy;    \n    \n    //float phi = 0.25 * MATH_PI + 10.0 * mo.x;    \n    //float phi = 0.25 * MATH_PI; \n    \n    // look straight at it. no mouse\n    //float phi = 0.5 * MATH_PI;    \n float phi = 0.5 * MATH_PI + 0.3 *sin( iTime * 0.2) ;     \n    mat3 rotY = mat3(\n        vec3( 1.0, 0.0, 0.0 ),\n        vec3( 0.0, cos( phi ), sin( phi ) ),\n        vec3( 0.0, -sin( phi ), cos( phi ) )\n        );\n    \n    //mat3 localToWorld = rotX * rotY;    \n    mat3 localToWorld = rotX * rotY;    \n\n\n\t//vec3 color = texture( iChannel0, q ).yyy * 0.3;\n\tvec3 color = vec3(0);\n    \n\tvec2 result = CastRay( rayOrigin, rayDir, localToWorld );\n    \n    if ( result.x > 0.0 )\n    {\n      color = vec3(result.y*2.0, result.y*0.3, result.y*0.2);\n    }\n    else\n    {\n        // 46fps vs 60fps\n      //  color= startrails( rayDir);\n        \n        color /=5.0;\n      color += vec3(\n          0.3*result.y*abs(sin(iTime*1.8)),0,0.0);\n    }\n    \n    fragColor = vec4( color, 1.0 );\n}\n","name":"Buf C","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"XdfGR8","channel":0}],"code":"// \"Quake Logo\" by Krzysztof Narkowicz @knarkowicz\n\nconst float MATH_PI = float( 3.14159265359 );\n\nfloat VisibilityTerm( float roughness, float ndotv, float ndotl )\n{\n\tfloat m2\t= roughness * roughness;\n\tfloat visV\t= ndotl * sqrt( ndotv * ( ndotv - ndotv * m2 ) + m2 );\n\tfloat visL\t= ndotv * sqrt( ndotl * ( ndotl - ndotl * m2 ) + m2 );\n\treturn 0.5 / max( visV + visL, 0.00001 );\n}\n\nfloat DistributionTerm( float roughness, float ndoth )\n{\n\tfloat m2\t= roughness * roughness;\n\tfloat d\t\t= ( ndoth * m2 - ndoth ) * ndoth + 1.0;\n\treturn m2 / ( d * d * MATH_PI );\n}\n\nvec3 FresnelTerm( vec3 specularColor, float vdoth )\n{\n\tvec3 fresnel = clamp( 50.0 * specularColor.y, 0.0, 1.0 ) * specularColor + ( 1.0 - specularColor ) * pow( ( 1.0 - vdoth ), 5.0 );\n\treturn fresnel;\n}\n\nvec3 LightSpecular( vec3 normal, vec3 viewDir, vec3 lightDir, vec3 lightColor, float roughness, vec3 specularColor )\n{\n\tvec3 halfVec = normalize( viewDir + lightDir );\n\n\tfloat vdoth = clamp( dot( viewDir,\thalfVec\t ), 0.0, 1.0 );\n\tfloat ndoth\t= clamp( dot( normal,\thalfVec\t ), 0.0, 1.0 );\n\tfloat ndotv = clamp( dot( normal,\tviewDir  ), 0.0, 1.0 );\n\tfloat ndotl = clamp( dot( normal,\tlightDir ), 0.0, 1.0 );\n    \n   \tvec3\tf = FresnelTerm( specularColor, vdoth );\n\tfloat\td = DistributionTerm( roughness, ndoth );\n\tfloat\tv = VisibilityTerm( roughness, ndotv, ndotl );\n    \n    vec3 specular;\n\tspecular = lightColor * f * ( d * v * MATH_PI * ndotl );\n\treturn specular;\n}\n\nfloat Cylinder( vec3 p, float r, float height ) \n{\n\tfloat d = length( p.xz ) - r;\n\td = max( d, abs( p.y ) - height );\n\treturn d;\n}\n\nfloat Sphere( vec3 p, float s )\n{\n\treturn length( p ) - s;\n}\n\n \n\n\nfloat Box( vec3 p, vec3 b )\n{\n \n    \n    \n\tvec3 d = abs( p ) - b;\n\t\n    float filler = min( \n        \n        max( d.x, max( d.y, d.z ) )\n        \n        , 0.0 ) + length( max( d, 0.0 ) );\n    \n    \n    //if (p.y > 0.0)\n    //    return 200.0;\n    \n    return filler;\n   \n}\n\nfloat Substract( float a, float b )\n{\n    return max( a, -b );\n}\n\nfloat SubstractRound( float a, float b, float r ) \n{\n\tvec2 u = max( vec2( r + a, r - b ), vec2( 0.0, 0.0 ) );\n\treturn min( -r, max( a, -b ) ) + length( u );\n}\n\nfloat Union( float a, float b )\n{\n    return min( a, b );\n}\n\nfloat UnionRound( float a, float b, float k )\n{\n    float h = clamp( 0.5 + 0.5 * ( b - a ) / k, 0.0, 1.0 );\n    return mix( b, a, h ) - k * h * ( 1.0 - h );\n}\n\nfloat TriPrism( vec3 p, float rot )\n{        \n    vec3 q = abs( p );\n    \n     return max(\n        // creates some type of symmetry\n        q.y - 0.5, \n     \n        // vertical line\n        p.x * cos(rot) + p.z * sin(rot)   \n     );\n}\n\n\nvoid AddTriangleABC(\n    // spatial point\n    inout vec3 p, \n    inout float canvas,\n\tvec2 ABC[3]\t\n\t)\n{\n      \tvec2 a1 = ABC[0] ;\n    \n    // looks like a steam engine\n        vec2 b1 = ABC[1];\n    \n        vec2 c1 = ABC[2];\n    \n    // A needs be to the right of B\n    \n    // need to check y too?\n    //if (B.x > A.x)\n    {\n      //  a1 = B;\n     //   b1 = A;\n    }\n            \n    \n      \n        float slice2AC = TriPrism(  p + vec3(\n        \n        // up\n        c1.y,\n              // back\n              -0.0,\n              \n              // right\n              c1.x\n        ), \n                                \n                                // rot1 + MATH_PI + 0.8\n                               \n                                -atan(a1.y-c1.y, a1.x-c1.x) \n                               );\n    \n    \n    \n    // could we have atoolbar so we could move the dots?\n        float slice0BC = TriPrism(  p + vec3(\n        \n        // up\n        b1.y,\n              // back\n              -0.0,\n              \n              // right\n              b1.x\n        ),// rot1 + MATH_PI - 1.1\n                               \n                                -atan(b1.y-c1.y, b1.x-c1.x) + MATH_PI\n                               );\n    \n    \n    \n    // atan2(deltaY, deltaX)\n    float slice1BA = TriPrism(  p + vec3(\n        \n        // up\n        a1.y,\n              // back\n              -0.0,\n              \n              // right\n              a1.x \n        ), -atan(b1.y-a1.y, b1.x-a1.x));\n\n    \n    \n    \n        //float slice = min(slice2AC,min(slice1BA,slice0BC))                    ;\n\t\t//float slice = slice0BC;\n    //float slice = max(slice0BC, slice1BA);\n        float i = max(slice2AC,max(slice1BA,slice0BC))                    ;\n    \n    \n     \n     canvas = min(i, canvas);\n    \n    // discard markers\n    return;\n        \n    \n    // need triangle markers?\n    //if (false)\n    // make A twice as big, while B moves\n     i = min(i,  Box(  p + vec3(a1.y,0.0,a1.x), vec3(\n                   \n                   // height\n                   0.2, \n                   \n                   //depth\n                   0.25, \n                   \n                   // width\n                   0.2)   )\n      );\n        \n    i = min(i,  Box(  p + vec3(b1.y,0.0,b1.x), vec3(\n                   \n                   // height\n                   0.1, \n                   \n                   //depth\n                   0.25, \n                   \n                   // width\n                   0.1)   )\n      );\n    \n        i = min(i,  Box(  p + vec3(c1.y,0.0,c1.x), vec3(\n                   \n                   // height\n                   0.05, \n                   \n                   //depth\n                   0.25, \n                   \n                   // width\n                   0.05)   )\n      );\n    \n    \n    // union\n    //canvas = min(canvas, i);\n    \n    canvas = min(i, canvas);\n}\n\n\nvoid AddTriangleABCCBA(\n    // spatial point\n    inout vec3 p, \n    inout float canvas,\n\tvec2 ABC[3]\t\n\t)\n{\n    vec2 CBA[3];\n    \n    CBA[2] = ABC[0];\n    CBA[1] = ABC[1];\n    CBA[0] = ABC[2];\n\n    //AddTriangleABC(p, canvas, ABC);\n    AddTriangleABC(p, canvas, CBA); // double sided polygon index?\n    \n}\n\n\nfloat CBAcanvas; // = 10000.0;\nvec3 CBAp;\n\nvoid CBA(\n    // spatial point\n    //inout vec3 p, \n\tvec2 ABC[3]\t\n\t)\n{\n    AddTriangleABCCBA(CBAp, CBAcanvas, ABC);\n}\n\nvoid CBAf(\n    float Ax,\n    float Ay,\n    float Bx,\n    float By,\n    float Cx,\n    float Cy\n    )\n{\n    vec2 ABC[3];\n    \n\tABC[0].x=Ax;\n\tABC[0].y=-Ay;\n\tABC[1].x=Bx;\n\tABC[1].y=-By;\n\tABC[2].x=Cx;\n\tABC[2].y=-Cy;\n    \n    AddTriangleABCCBA(CBAp, CBAcanvas, ABC);\n}\n\nvoid CBA64()\n{\n     CBAf(4.862,8.40745,4.845984375,9.75841875,4.65115625,8.58654375);\n\tCBAf(4.6862,8.440745,5.492,7.92562,6.0098375,10.3459075);\n    CBAf(6.80194375,7.172323125,6.7661,9.95682,5.492,7.92562);\n    CBAf(4.2845984375,9.575841875,4.2167,9.15282,4.365115625,8.758654375);\nCBAf(5.492,7.92562,6.7661,9.95682,6.0098375,10.3459075);\nCBAf(4.5147125,9.97132,4.2845984375,9.575841875,4.6862,8.440745);\nCBAf(6.0098375,10.3459075,4.5147125,9.97132,4.6862,8.440745);\nCBAf(6.7661,9.95682,6.80194375,7.172323125,9.376775,9.00828125);\n// 8\n\n    \n    CBAf(11.0581,5.54532,9.376775,9.00828125,8.1873,6.55442);\n    \n    CBAf(12.0161,8.15272,11.0581,5.54532,13.976825,4.67798625);\n\nCBAf(13.976825,4.67798625,16.9653,4.14522,15.4630125,7.2957925);\nCBAf(11.0581,5.54532,12.0161,8.15272,9.376775,9.00828125);\nCBAf(16.9653,4.14522,18.9661,6.76492,15.4630125,7.2957925);\nCBAf(15.4630125,7.2957925,12.0161,8.15272,13.976825,4.67798625);\nCBAf(18.9661,6.76492,16.9653,4.14522,21.0607875,3.895875625);\nCBAf(6.80194375,7.172323125,8.1873,6.55442,9.376775,9.00828125);\nCBAf(6.0098375,10.3459075,5.6310171875,10.4946684375,5.2484,10.48892);\n// 16 1.3fps\n    \n    CBAf(6.0098375,10.3459075,5.2484,10.48892,4.5147125,9.97132);\nCBAf(8.9156,23.1581,6.8153125,22.7018165,8.72755,20.283829);\nCBAf(8.72755,20.283829,10.817,20.8219,8.9156,23.1581);\nCBAf(10.817,20.8219,8.72755,20.283829,10.3845765625,18.111813375);\nCBAf(7.4656,24.9478,6.8153125,22.7018165,8.9156,23.1581);\nCBAf(10.817,20.8219,10.3845765625,18.111813375,12.0314,19.484);\nCBAf(12.8355296875,15.979157125,13.100575,18.6053825,11.6125375,16.785854);\nCBAf(14.47765,15.364929,14.3127,17.9258,12.8355296875,15.979157125);\n// 24 - 48fps on lenovo\nCBAf(16.9880125,14.67030025,15.596625,17.4170392578,14.47765,15.364929);\nCBAf(11.6125375,16.785854,13.100575,18.6053825,12.0314,19.484);\nCBAf(14.47765,15.364929,15.596625,17.4170392578,14.3127,17.9258);\nCBAf(16.9880125,14.67030025,17.241675,17.0354515625,15.596625,17.4170392578);\nCBAf(14.3127,17.9258,13.100575,18.6053825,12.8355296875,15.979157125);\nCBAf(19.1946375,16.7989912109,17.241675,17.0354515625,16.9880125,14.67030025);\nCBAf(10.3845765625,18.111813375,11.6125375,16.785854,12.0314,19.484);\nCBAf(25.17465,3.9236825,22.1648203125,6.60912234375,21.0607875,3.895875625);\n// 32 - 60fps\n    \n    //if (false)\n    {\n        \n    CBAf(22.1648203125,6.60912234375,25.17465,3.9236825,25.3732625,6.64133375);\nCBAf(23.626,14.470714,21.4023,16.7256125,20.68075,14.358929);\nCBAf(23.626,14.470714,25.21645,14.693589,23.81145,16.8332697266);\nCBAf(25.21645,14.693589,27.3556203125,15.064697125,26.368875,17.1399171875);\nCBAf(28.5721234375,6.87280328125,25.3732625,6.64133375,25.17465,3.9236825);\nCBAf(16.9880125,14.67030025,20.68075,14.358929,19.1946375,16.7989912109);\nCBAf(29.2713375,4.255430625,31.7421,7.31478,28.5721234375,6.87280328125);\nCBAf(25.17465,3.9236825,29.2713375,4.255430625,28.5721234375,6.87280328125);\n// 40\n    CBAf(33.3153,4.91791,31.7421,7.31478,29.2713375,4.255430625);\nCBAf(35.3939484375,5.507465625,34.131425,7.9511125,33.3153,4.91791);\nCBAf(35.3939484375,5.507465625,36.466,8.79368,34.131425,7.9511125);\nCBAf(34.131425,7.9511125,31.7421,7.31478,33.3153,4.91791);\nCBAf(36.466,8.79368,35.3939484375,5.507465625,37.4116125,6.30449);\nCBAf(27.3556203125,15.064697125,29.7955875,15.685199,29.0213625,17.6635091797);\nCBAf(20.68075,14.358929,21.4023,16.7256125,19.1946375,16.7989912109);\nCBAf(23.81145,16.8332697266,25.21645,14.693589,26.368875,17.1399171875);\n// 48\n    \n    CBAf(23.626,14.470714,23.81145,16.8332697266,21.4023,16.7256125);\nCBAf(31.7157,18.422,29.7955875,15.685199,32.2443109375,16.461970875);\nCBAf(29.0213625,17.6635091797,26.368875,17.1399171875,27.3556203125,15.064697125);\nCBAf(29.0213625,17.6635091797,29.7955875,15.685199,31.7157,18.422);\nCBAf(34.40975,17.301889,31.7157,18.422,32.2443109375,16.461970875);\nCBAf(35.82205,17.957434,33.4694625,19.12470125,34.40975,17.301889);\nCBAf(31.7157,18.422,34.40975,17.301889,33.4694625,19.12470125);\nCBAf(37.42125,18.917089,35.950623625,20.7576875,35.1249,20.018);\nCBAf(33.4694625,19.12470125,35.82205,17.957434,35.1249,20.018);\nCBAf(37.115221,24.075183,34.2739183594,23.0895191016,35.375969873,22.2718364111);\nCBAf(35.950623625,20.7576875,37.42125,18.917089,36.248,21.326);\nCBAf(35.375969873,22.2718364111,36.2476,21.32599,36.248,21.326);\nCBAf(37.115221,24.075183,35.375969873,22.2718364111,36.248,21.326);\nCBAf(38.3886435,23.42400925,37.115221,24.075183,36.248,21.326);\nCBAf(34.7339835,24.98988925,32.9674537598,23.7865845068,34.2739183594,23.0895191016);\nCBAf(37.42125,18.917089,35.1249,20.018,35.82205,17.957434);\n    }\n// 64 38fps\n}\n\nfloat Scene( vec3 p, mat3 localToWorld )\n{\n    // shadertoy should have time slider.\n    \n    p = p * localToWorld;\n    \n    \n    \n     \n    // can we move the objects?\n    \n    p += vec3(\n        \n        // up\n        25.0 ,\n              // back\n              //-9.0,\n              -45.0, // either move it back or make it scale?\n\n        \n              // right\n              -30.0 );\n\n    vec2 a1 = vec2( 2.0,  0.6  + cos(iTime)) ;\n    // looks like a steam engine\n    vec2 b1 = vec2(1.75 + sin(iTime),  -1. + cos(iTime * 0.1));\n    vec2 c1 = vec2( 1.5, -1);\n\n   \n     CBAcanvas = 10000.0;\n    CBAp = p;\n    \n  \n    \n    //CBAf(46.862,84.40745,42.845984375,95.75841875,43.65115625,87.58654375);\n\nif (false)\nCBA64();\n    \n    if (false){\n    CBAf(22.1648203125,6.60912234375,18.9661,6.76492,21.0607875,3.895875625);\nCBAf(4.84645,24.758829,4.1634375,27.246805375,3.45187375,26.35632275);\nCBAf(7.4656,24.9478,5.89535,27.19933,4.84645,24.758829);\nCBAf(4.84645,24.758829,6.8153125,22.7018165,7.4656,24.9478);\nCBAf(7.9804575,25.169595,5.89535,27.19933,7.4656,24.9478);\nCBAf(3.62035,27.121429,3.36059640625,26.8046485312,3.45187375,26.35632275);\nCBAf(4.1634375,27.246805375,3.62035,27.121429,3.45187375,26.35632275);\nCBAf(4.1634375,27.246805375,4.84645,24.758829,5.89535,27.19933);\nCBAf(5.89535,27.19933,7.9804575,25.169595,8.62967375,27.13793375);\nCBAf(10.09205,27.31614,8.62967375,27.13793375,9.2156,25.30589);\nCBAf(7.9804575,25.169595,9.2156,25.30589,8.62967375,27.13793375);\nCBAf(11.102566125,27.710885,10.09205,27.31614,12.5434535156,25.6518437109);\nCBAf(9.2156,25.30589,12.5434535156,25.6518437109,10.09205,27.31614);\nCBAf(12.5434535156,25.6518437109,11.3586718906,27.9765740625,11.102566125,27.710885);\nCBAf(11.48245,28.312,16.664911,28.909827,11.577161,30.6588);\nCBAf(11.48245,28.312,11.3586718906,27.9765740625,12.5434535156,25.6518437109);\n// 80 33fps\n       CBAf(11.49767725,32.79723,11.577161,30.6588,16.56569,31.990027);\nCBAf(10.922451,33.9489,10.4868331406,36.2236359375,10.5230310469,34.6846328125);\nCBAf(10.922451,33.9489,11.2957324062,33.377311875,16.35852,35.348327);\nCBAf(10.922451,33.9489,15.97570625,36.77233075,10.85076,36.997);\nCBAf(10.4868331406,36.2236359375,10.377707625,35.4478625,10.5230310469,34.6846328125);\nCBAf(10.85076,36.997,10.4868331406,36.2236359375,10.922451,33.9489);\nCBAf(11.3719175,38.0717375,10.85076,36.997,15.97570625,36.77233075);\nCBAf(11.8177,39.6588,11.3719175,38.0717375,15.7603,39.809127);\nCBAf(12.37832375,41.803675,15.588105,42.948027,12.8679,43.9631);\nCBAf(12.8679,43.9631,15.41591,46.086927,13.354475,46.02503);\nCBAf(15.588105,42.948027,15.41591,46.086927,12.8679,43.9631);\nCBAf(14.086,46.553,13.6603696875,46.435945625,13.354475,46.02503);\nCBAf(14.08701,46.553347,14.086,46.553,14.93378875,46.4469995);\nCBAf(14.93378875,46.4469995,14.086,46.553,13.354475,46.02503);\nCBAf(13.354475,46.02503,15.41591,46.086927,14.93378875,46.4469995);\nCBAf(11.8177,39.6588,15.7603,39.809127,12.37832375,41.803675);\n// 96 26fps\n CBAf(16.5358225,34.6264395,11.2957324062,33.377311875,11.49767725,32.79723);\nCBAf(11.48245,28.312,12.5434535156,25.6518437109,16.664911,28.909827);\nCBAf(20.2833324219,25.9226589453,17.0236985,28.95994575,16.302053125,25.8775571875);\nCBAf(20.2833324219,25.9226589453,23.027621,28.087273,22.92079475,28.281233);\nCBAf(23.027621,28.087273,20.2833324219,25.9226589453,24.279225,25.7267775);\nCBAf(20.2833324219,25.9226589453,19.970411,31.033827,17.706336,29.338452);\nCBAf(17.0236985,28.95994575,16.664911,28.909827,16.302053125,25.8775571875);\nCBAf(23.195291,28.770903,19.970411,31.033827,22.92079475,28.281233);\nCBAf(20.2833324219,25.9226589453,17.706336,29.338452,17.0236985,28.95994575);\nCBAf(19.970411,31.033827,20.2833324219,25.9226589453,22.92079475,28.281233);\nCBAf(11.577161,30.6588,16.664911,28.909827,16.56569,31.990027);\nCBAf(31.482584375,24.3705790625,29.83967725,26.6614314375,28.0816644531,25.2295413672);\nCBAf(34.7339835,24.98988925,32.352746,25.9045955,32.9674537598,23.7865845068);\nCBAf(32.352746,25.9045955,31.482584375,24.3705790625,32.9674537598,23.7865845068);\nCBAf(26.665221,27.358183,23.811196,27.80536675,24.279225,25.7267775);\nCBAf(23.027621,28.087273,24.279225,25.7267775,23.811196,27.80536675);\n// 112 22fps\nCBAf(24.279225,25.7267775,28.0816644531,25.2295413672,26.665221,27.358183);\nCBAf(26.665221,27.358183,28.0816644531,25.2295413672,29.83967725,26.6614314375);\nCBAf(29.83967725,26.6614314375,31.482584375,24.3705790625,32.352746,25.9045955);\nCBAf(11.2957324062,33.377311875,16.5358225,34.6264395,16.35852,35.348327);\nCBAf(24.2354985,29.92757925,22.5663836563,32.9945379375,19.970411,31.033827);\nCBAf(15.7603,39.809127,15.588105,42.948027,12.37832375,41.803675);\nCBAf(16.35852,35.348327,15.97570625,36.77233075,10.922451,33.9489);\nCBAf(15.7603,39.809127,11.3719175,38.0717375,15.97570625,36.77233075);\nCBAf(11.49767725,32.79723,16.56569,31.990027,16.5358225,34.6264395);\nCBAf(24.2354985,29.92757925,26.165191,31.609803,22.5663836563,32.9945379375);\nCBAf(25.42731725,34.9381395,22.5663836563,32.9945379375,26.165191,31.609803);\nCBAf(25.42731725,34.9381395,26.165191,31.609803,30.2152738125,34.6905920625);\nCBAf(28.421739125,36.74273325,25.42731725,34.9381395,30.2152738125,34.6905920625);\nCBAf(31.416161,38.547327,28.421739125,36.74273325,30.2152738125,34.6905920625);\nCBAf(38.6166769375,39.6486451875,36.88112975,41.4080145,34.148645375,39.97767075);\nCBAf(31.416161,38.547327,34.4514035,37.3795905,34.148645375,39.97767075);\n// 128 20fps\n}\n    if (false){\n\n    CBAf(34.148645375,39.97767075,34.4514035,37.3795905,38.6166769375,39.6486451875);\nCBAf(31.416161,38.547327,30.2152738125,34.6905920625,34.4514035,37.3795905);\nCBAf(24.2354985,29.92757925,19.970411,31.033827,23.195291,28.770903);\nCBAf(16.302053125,25.8775571875,16.664911,28.909827,12.5434535156,25.6518437109);\nCBAf(34.2739183594,23.0895191016,37.115221,24.075183,34.7339835,24.98988925);\nCBAf(41.4153,8.00991,38.966,9.81608,37.4116125,6.30449);\nCBAf(41.266,10.77926,38.966,9.81608,41.4153,8.00991);\nCBAf(46.0914375,9.9181475,43.868275,11.8337475,41.4153,8.00991);\nCBAf(39.016025,19.77619275,38.715221,23.327063,36.248,21.326);\nCBAf(41.4153,8.00991,43.868275,11.8337475,41.266,10.77926);\nCBAf(46.516,12.75466,43.868275,11.8337475,46.0914375,9.9181475);\nCBAf(37.4116125,6.30449,38.966,9.81608,36.466,8.79368);\nCBAf(49.39455,13.430265,48.4496015625,10.8064490625,50.8653,11.50081);\nCBAf(55.6588125,14.235363875,53.59520625,11.9690473437,56.510175,12.26431875);\nCBAf(52.316,13.90136,50.8653,11.50081,53.59520625,11.9690473437);\nCBAf(49.39455,13.430265,46.516,12.75466,48.4496015625,10.8064490625);\nCBAf(52.316,13.90136,49.39455,13.430265,50.8653,11.50081);\nCBAf(52.316,13.90136,53.59520625,11.9690473437,55.6588125,14.235363875);\nCBAf(46.0914375,9.9181475,48.4496015625,10.8064490625,46.516,12.75466);\nCBAf(40.96525,20.420489,41.251946,23.238423375,39.97520225,23.1918618906);\nCBAf(39.016025,19.77619275,39.97520225,23.1918618906,38.715221,23.327063);\nCBAf(43.3788421875,20.9488229062,41.251946,23.238423375,40.96525,20.420489);\nCBAf(45.5517125,21.19938775,43.815221,23.450533,43.3788421875,20.9488229062);\nCBAf(38.3886435,23.42400925,36.248,21.326,38.715221,23.327063);\nCBAf(43.3788421875,20.9488229062,43.815221,23.450533,41.251946,23.238423375);\nCBAf(43.815221,23.450533,45.5517125,21.19938775,46.452721,23.548653);\nCBAf(39.97520225,23.1918618906,39.016025,19.77619275,40.96525,20.420489);\nCBAf(50.16525,21.458289,49.090221,23.646773,46.452721,23.548653);\nCBAf(45.5517125,21.19938775,50.16525,21.458289,46.452721,23.548653);\nCBAf(53.89025,21.682209,54.365221,23.843013,50.16525,21.458289);\nCBAf(57.61525,21.906129,54.365221,23.843013,53.89025,21.682209);\nCBAf(50.16525,21.458289,54.365221,23.843013,49.090221,23.646773);\nCBAf(55.666461,32.902157,56.306021,32.426382,56.4615785,33.39570675);\nCBAf(56.306021,32.426382,57.072961,32.154427,57.1460113125,33.0746669062);\nCBAf(58.815221,24.260273,54.365221,23.843013,57.61525,21.906129);\nCBAf(55.6588125,14.235363875,56.510175,12.26431875,58.666,14.3909);\nCBAf(58.7487375,12.362119375,58.7148833866633,14.3896788576393,58.6898966933317,14.3904944288196);\nCBAf(58.7148833866633,14.3896788576393,58.7487375,12.362119375,58.7648567733266,14.3880477152786);\nCBAf(58.8648035466532,14.3847854305572,58.7648567733266,14.3880477152786,58.7487375,12.362119375);\nCBAf(58.7487375,12.362119375,58.6898966933317,14.3904944288196,58.666,14.3909);\nCBAf(58.666,14.3909,58.6656908341666,14.3912845134006,58.6656378077768,14.3910362374418);\nCBAf(58.666,14.3909,58.6774033466658,14.3909022144098,58.6711566733329,14.3911061072049);\nCBAf(58.6774033466658,14.3909022144098,58.666,14.3909,58.6898966933317,14.3904944288196);\nCBAf(58.6711566733329,14.3911061072049,58.6680333366665,14.3912080536025,58.666,14.3909);\nCBAf(61.82325,12.77467,60.9873,12.45992,61.59095625,12.5013825);\nCBAf(60.9873,12.45992,61.82325,12.77467,62.03229875,13.63350125);\nCBAf(60.2640583732254,14.3391134444573,60.9873,12.45992,62.03229875,13.63350125);\nCBAf(59.0646970933063,14.3782608611143,58.8648035466532,14.3847854305572,58.7487375,12.362119375);\nCBAf(59.4644841866127,14.3652117222287,59.0646970933063,14.3782608611143,58.7487375,12.362119375);\nCBAf(62.03229875,13.63350125,62.00251,14.28237,60.2640583732254,14.3391134444573);\nCBAf(58.7487375,12.362119375,60.2640583732254,14.3391134444573,59.4644841866127,14.3652117222287);\nCBAf(58.7487375,12.362119375,60.9873,12.45992,60.2640583732254,14.3391134444573);\nCBAf(58.6652756155535,14.3911724748835,58.6656378077768,14.3910362374418,58.6653004170833,14.3912972567003);\nCBAf(58.6653004170833,14.3912972567003,58.6656378077768,14.3910362374418,58.6656908341666,14.3912845134006);\nCBAf(58.6660812512499,14.3912717701009,58.6656908341666,14.3912845134006,58.666,14.3909);\nCBAf(58.666,14.3909,58.6664716683332,14.3912590268012,58.6660812512499,14.3912717701009);\nCBAf(58.491286,32.0721235625,59.0434558438,33.20752175,57.965491,32.961903);\nCBAf(57.072961,32.154427,58.491286,32.0721235625,57.965491,32.961903);\nCBAf(58.6652756155535,14.3911724748835,58.6653004170833,14.3912972567003,58.66491,14.39131);\nCBAf(60.5901875,21.88058825,58.815221,24.260273,57.61525,21.906129);\nCBAf(61.56239625,22.5229355,60.5901875,21.88058825,61.1795734375,21.8598664687);\nCBAf(61.45755,21.961123,61.56239625,22.5229355,61.1795734375,21.8598664687);\nCBAf(58.815221,24.260273,61.51779,23.391723,61.469221,24.551923);\nCBAf(60.5901875,21.88058825,61.51779,23.391723,58.815221,24.260273);\n        \n        \n         }\n    \n    if (true){\n\n// 192 11 fps\n    CBAf(61.51779,23.391723,60.5901875,21.88058825,61.56239625,22.5229355);\nCBAf(58.6664716683332,14.3912590268012,58.666,14.3909,58.6680333366665,14.3912080536025);\nCBAf(59.781811,32.4641145,59.0434558438,33.20752175,58.491286,32.0721235625);\nCBAf(58.7487375,12.362119375,58.666,14.3909,56.510175,12.26431875);\nCBAf(57.072961,32.154427,57.965491,32.961903,57.1460113125,33.0746669062);\nCBAf(55.570491,34.578903,54.560226,35.0570945,54.919717875,33.8731679375);\nCBAf(54.560226,35.0570945,55.570491,34.578903,55.4184755313,35.5449405);\nCBAf(55.570491,34.578903,54.919717875,33.8731679375,55.9303519375,33.9040947187);\nCBAf(54.679886625,36.3076023125,54.560226,35.0570945,55.4184755313,35.5449405);\nCBAf(55.62413975,36.442878,54.9481182656,36.9120946953,54.679886625,36.3076023125);\nCBAf(56.1535545938,37.147953,55.370601,37.478357,55.62413975,36.442878);\nCBAf(54.9481182656,36.9120946953,55.62413975,36.442878,55.370601,37.478357);\nCBAf(55.62413975,36.442878,54.679886625,36.3076023125,55.4184755313,35.5449405);\nCBAf(55.666461,32.902157,55.9303519375,33.9040947187,54.919717875,33.8731679375);\nCBAf(55.9303519375,33.9040947187,55.666461,32.902157,56.4615785,33.39570675);\nCBAf(55.370601,37.478357,56.1535545938,37.147953,56.32937975,38.10150975);\nCBAf(56.972791,37.535403,56.32937975,38.10150975,56.1535545938,37.147953);\nCBAf(57.373201,38.258707,56.32937975,38.10150975,56.972791,37.535403);\nCBAf(57.373201,38.258707,56.972791,37.535403,57.82101475,37.50873675);\nCBAf(36.88112975,41.4080145,38.6166769375,39.6486451875,40.766411,43.066827);\nCBAf(42.454191,41.469603,40.766411,43.066827,38.6166769375,39.6486451875);\nCBAf(43.0758656875,43.9547766875,40.766411,43.066827,42.454191,41.469603);\nCBAf(45.3219535,42.5860105,43.0758656875,43.9547766875,42.454191,41.469603);\nCBAf(45.0257985,44.551072,43.0758656875,43.9547766875,45.3219535,42.5860105);\nCBAf(48.815911,45.158327,46.8584125625,44.9281198125,47.464991,43.150703);\nCBAf(45.3219535,42.5860105,46.8584125625,44.9281198125,45.0257985,44.551072);\nCBAf(45.3219535,42.5860105,47.464991,43.150703,46.8584125625,44.9281198125);\nCBAf(55.9189952383,44.3062168437,54.4426804531,43.2000377656,56.522066,42.594723);\nCBAf(51.2866664648,45.1798340312,48.815911,45.158327,49.8192281094,43.4926579219);\nCBAf(52.176762875,43.504226125,54.4426804531,43.2000377656,53.6806850938,44.89485825);\nCBAf(55.9189952383,44.3062168437,53.6806850938,44.89485825,54.4426804531,43.2000377656);\nCBAf(51.2866664648,45.1798340312,52.176762875,43.504226125,53.6806850938,44.89485825);\nCBAf(51.2866664648,45.1798340312,49.8192281094,43.4926579219,52.176762875,43.504226125);\nCBAf(55.9189952383,44.3062168437,56.522066,42.594723,57.92262525,43.416727);\nCBAf(47.464991,43.150703,49.8192281094,43.4926579219,48.815911,45.158327);\nCBAf(57.387701,34.814343,57.453081,35.132733,57.122191,35.157777375);\nCBAf(56.4615785,33.39570675,56.306021,32.426382,57.1460113125,33.0746669062);\nCBAf(58.0569236563,34.7134879375,58.043121,35.1480805,57.506801,34.751207);\nCBAf(58.62300725,34.9777995,59.0788127188,35.4821898125,58.535481,35.525213);\nCBAf(58.62300725,34.9777995,58.043121,35.1480805,58.0569236563,34.7134879375);\nCBAf(57.506801,34.751207,58.043121,35.1480805,57.453081,35.132733);\nCBAf(58.535481,35.525213,59.0788127188,35.4821898125,58.68167975,36.28013425);\nCBAf(58.535481,35.525213,58.043121,35.1480805,58.62300725,34.9777995);\nCBAf(57.387701,34.814343,57.506801,34.751207,57.453081,35.132733);\nCBAf(60.856111,33.3087866875,60.4454480312,34.36292175,59.85957225,33.697078);\nCBAf(60.4454480312,34.36292175,60.856111,33.3087866875,61.625761,34.584527);\nCBAf(59.85957225,33.697078,59.0434558438,33.20752175,59.781811,32.4641145);\nCBAf(60.832691,35.137403,60.4454480312,34.36292175,61.625761,34.584527);\nCBAf(58.68167975,36.28013425,59.0788127188,35.4821898125,59.298101,36.164707);\nCBAf(61.062011,36.246903,60.832691,35.137403,61.94885475,35.819797);\nCBAf(61.625761,34.584527,61.94885475,35.819797,60.832691,35.137403);\nCBAf(62.010911,36.906627,61.062011,36.246903,61.94885475,35.819797);\nCBAf(59.1897131875,36.9675445,58.68167975,36.28013425,59.298101,36.164707);\nCBAf(58.795266,37.617982,57.82101475,37.50873675,58.399891,37.088613);\nCBAf(58.399891,37.088613,59.1897131875,36.9675445,58.795266,37.617982);\nCBAf(59.1897131875,36.9675445,58.399891,37.088613,58.68167975,36.28013425);\nCBAf(58.1710113125,38.065282,57.82101475,37.50873675,58.795266,37.617982);\nCBAf(56.522066,42.594723,58.3200046719,41.7029119844,57.92262525,43.416727);\nCBAf(57.92262525,43.416727,58.3200046719,41.7029119844,59.6126034805,42.2292059062);\nCBAf(58.3200046719,41.7029119844,59.741581625,40.539234875,59.6126034805,42.2292059062);\nCBAf(57.373201,38.258707,57.82101475,37.50873675,58.1710113125,38.065282);\nCBAf(61.9470710708,37.9750042461,60.9606426113,38.315973752,61.075991,37.454803);\nCBAf(61.075991,37.454803,62.010911,36.906627,61.9470710708,37.9750042461);\nCBAf(61.7357180039,38.9713387187,60.9606426113,38.315973752,61.9470710708,37.9750042461);\n// 256 9fps lenovo\n    CBAf(61.3228381426,39.85890473435,59.741581625,40.539234875,60.6918820156,39.1183218281);\nCBAf(60.9099582813,40.74647075,59.741581625,40.539234875,61.3228381426,39.85890473435);\nCBAf(61.7357180039,38.9713387187,61.3228381426,39.85890473435,60.6918820156,39.1183218281);\nCBAf(61.7357180039,38.9713387187,60.6918820156,39.1183218281,60.9606426113,38.315973752);\nCBAf(59.6126034805,42.2292059062,59.741581625,40.539234875,60.9099582813,40.74647075);\nCBAf(61.075991,37.454803,61.062011,36.246903,62.010911,36.906627);\nCBAf(59.781811,32.4641145,60.856111,33.3087866875,59.85957225,33.697078);\nCBAf(39.016025,19.77619275,36.248,21.326,37.42125,18.917089);\n    // i4600 5.6 fps, 21fps in half screen. had to disable timeout, desktopgl not available.\n    }\n    //ABC[2] = vec2(1, 0);\n    //ABC[1] = vec2(1, 1);\n    //ABC[0] = vec2(0, 0);\n                \n    //AddTriangleABC(p, canvas1, ABC);\n\n    //AddTriangle(p, canvas1, ABC[0],ABC[1],ABC[2]);\n    \n    return CBAcanvas;\n    \n}\n\nvec2 CastRay( in vec3 ro, in vec3 rd, mat3 localToWorld )\n{\n    // how big is the scene?\n    const float maxd = 85.0;\n    \n\tfloat h = 0.5;\n    float t = 0.0;\n    float steps = 0.0;\n   \n    for ( int i = 0; i < 150; ++i )\n    {\n        if ( h < 0.001 || t > maxd ) \n        {\n            break;\n        }\n        \n\t    h = Scene( ro + rd * t, localToWorld );\n        t += h;\n        steps += 0.03;\n    }\n\n    if ( t > maxd )\n    {\n        t = -1.0;\n    }\n\t\n    return vec2(t, steps);\n}\n\nvec3 SceneNormal( in vec3 pos, mat3 localToWorld )\n{\n\tvec3 eps = vec3( 0.001, 0.0, 0.0 );\n\tvec3 nor = vec3(\n\t    Scene( pos + eps.xyy, localToWorld ) - Scene( pos - eps.xyy, localToWorld ),\n\t    Scene( pos + eps.yxy, localToWorld ) - Scene( pos - eps.yxy, localToWorld ),\n\t    Scene( pos + eps.yyx, localToWorld ) - Scene( pos - eps.yyx, localToWorld ) );\n\treturn normalize( -nor );\n}\n\n\n\n\nvec3 rotx(vec3 p, float a){\n    float s = sin(a), c = cos(a);\n    return vec3(p.x, c*p.y - s*p.z, s*p.y + c*p.z);\n}\n \n \n//From Dave_Hoskins (https://www.shadertoy.com/view/4djSRW)\nvec3 hash33(vec3 p)\n{\n    p = fract(p * vec3(443.8975,397.2973, 491.1871));\n    p += dot(p.zxy, p.yxz+19.27);\n    return fract(vec3(p.x * p.y, p.z*p.x, p.y*p.z));\n}\n\n//Very happy with this star function, cheap and smooth\nvec3 stars(in vec3 p)\n{\n    // 47fps\n    \n    vec3 c = vec3(0.);\n    float res = iResolution.x*1.5; // too small  and they will flicker\n    \n    // more stars?\n\tfor (float i=0.;i<2.;i++)\n    {\n        vec3 q = fract(p*(.15*res))-0.5;\n        vec3 id = floor(p*(.15*res));\n        vec2 rn = hash33(id).xy;\n        float c2 = 1.-smoothstep(0.,.6,length(q));\n        c2 *= step(rn.x,.0005+i*i*0.001);\n        c += c2*(mix(vec3(1.0,0.49,0.1),vec3(0.75,0.9,1.),rn.y)*0.25+0.75);\n        p *= 1.4;\n    }\n    return c*c*.7;\n}\n\nvec3 startrails(in vec3 rd)\n{\n    vec3 col0 = stars( normalize(rotx(rd, iTime * 0.1)));\n\n    vec3 col = col0;\n\n    for (int i = -120; i < 0; i++)\n    {\n    \tvec3 col1 = stars( normalize(rotx(rd, iTime * 0.1 + (float(i) * (1./600.) ))));\n        \n    \tcol += col1;    \n    }\n    \n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy / iResolution.xy;\n    vec2 p = -1.0 + 2.0 * q;\n\tp.x *= iResolution.x / iResolution.y;\n\n    // have comera zoom in and out to reveal boundaries\n\tvec3 rayOrigin \t= vec3( 0.0, 9. *cos( iTime * 0.2), +17. + 7. *sin( iTime * 0.2) );\n\t//vec3 rayOrigin \t= vec3( 0.0, -0.0, -3.5   );\n\n    vec3 rayDir \t= normalize( vec3( p.x, p.y, 1.0 ) );\n    \n    float theta = -0.5 * MATH_PI;\n    mat3 rotX = mat3(\n        vec3( cos( theta ), sin( theta ), 0.0 ),\n        vec3( -sin( theta ), cos( theta ), 0.0 ),\n\t\tvec3( 0.0, 0.0, 1.0 )\n        );    \n    \n    vec2 mo = iMouse.xy / iResolution.xy;    \n    \n    //float phi = 0.25 * MATH_PI + 10.0 * mo.x;    \n    //float phi = 0.25 * MATH_PI; \n    \n    // look straight at it. no mouse\n    //float phi = 0.5 * MATH_PI;    \n float phi = 0.5 * MATH_PI + 0.3 *sin( iTime * 0.2) ;     \n    mat3 rotY = mat3(\n        vec3( 1.0, 0.0, 0.0 ),\n        vec3( 0.0, cos( phi ), sin( phi ) ),\n        vec3( 0.0, -sin( phi ), cos( phi ) )\n        );\n    \n    //mat3 localToWorld = rotX * rotY;    \n    mat3 localToWorld = rotX * rotY;    \n\n\n\t//vec3 color = texture( iChannel0, q ).yyy * 0.3;\n\tvec3 color = vec3(0);\n        color= startrails( rayDir);\n        color /=5.0;\n    \n\tvec2 result = CastRay( rayOrigin, rayDir, localToWorld );\n    \n    if ( result.x > 0.0 )\n    {\n      color += vec3(result.y*2.0, result.y*0.3, result.y*0.2);\n    }\n    else\n    {\n        // 46fps vs 60fps\n        \n      color += vec3(\n          0.3*result.y*abs(sin(iTime*1.8)),0,0.0);\n    }\n    \n    fragColor = vec4( color, 1.0 );\n}\n","name":"Buf D","description":"","type":"buffer"}]}