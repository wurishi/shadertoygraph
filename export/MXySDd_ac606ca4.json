{"ver":"0.1","info":{"id":"MXySDd","date":"1720745974","viewed":98,"name":"Voxel Upscaling Tech","username":"capslpop","description":"This upscales the image by rendering voxels in a separate buffer and then upscaling them.","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["phong","lighting","voxel","pervoxel"],"hasliked":0,"parentid":"lXGXWc","parentname":"OLD Monitor Effect"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float cubeIntersect(vec3 cubePos, vec3 rayDir, vec3 rayPos)\n{    \n    // Cube settings\n    vec3 cubeMin = vec3(-0.5) + cubePos; // Minimum corner\n    vec3 cubeMax = vec3( 0.5) + cubePos; // Maximum corner\n\n    vec3 invDir = 1.0 / rayDir;\n    vec3 tMin = (cubeMin - rayPos) * invDir;\n    vec3 tMax = (cubeMax - rayPos) * invDir;\n    \n    vec3 t1 = min(tMin, tMax);\n    vec3 t2 = max(tMin, tMax);\n    \n    float tNear = max(max(t1.x, t1.y), t1.z);\n    float tFar = min(min(t2.x, t2.y), t2.z);\n    \n    // remove tFar because\n    if (tNear < tFar && tFar > 0.0) {        \n        float raylength = length(rayDir * tNear);\n        return raylength;\n    } else {\n        return 99999.0; // hit nothing\n    }\n}\n\nvec3 toLinear(vec3 srgbColor) \n{\n    return pow(srgbColor, vec3(2.2));\n}\n\nvec3 toSrgb(vec3 linearColor) \n{\n    return pow(linearColor, vec3(1.0 / 2.2));\n}\n\nvec3 fetchAndInterpolate(vec2 uv, vec2 textureSize) {\n    // Convert uv coordinates to texture space\n    vec2 texelPos = uv * textureSize - 0.5;\n\n    // Get the integer coordinates of the texels\n    ivec2 texelPosInt = ivec2(floor(texelPos));\n    \n    // Get the fractional part for interpolation\n    vec2 f = fract(texelPos);\n\n    // Fetch the four surrounding texels\n    vec3 t00 = toLinear(getResult(texelFetch(iChannel0, texelPosInt, 0)).color);\n    vec3 t10 = toLinear(getResult(texelFetch(iChannel0, texelPosInt + ivec2(1, 0), 0)).color);\n    vec3 t01 = toLinear(getResult(texelFetch(iChannel0, texelPosInt + ivec2(0, 1), 0)).color);\n    vec3 t11 = toLinear(getResult(texelFetch(iChannel0, texelPosInt + ivec2(1, 1), 0)).color);\n\n    // Perform bilinear interpolation\n    vec3 t0 = mix(t00, t10, f.x);\n    vec3 t1 = mix(t01, t11, f.x);\n    vec3 interpolatedColor = mix(t0, t1, f.y);\n\n    return toSrgb(interpolatedColor);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 res = iResolution.xy / scaleAmount;\n    \n\tvec2 screenPos = (fragCoord.xy / iResolution.xy) * 2.0 - 1.0;\n\tvec3 cameraDir = vec3(0.0, 0.0, 0.8);\n\tvec3 cameraPlaneU = vec3(1.0, 0.0, 0.0);\n\tvec3 cameraPlaneV = vec3(0.0, 1.0, 0.0) * res.y / res.x;\n\tvec3 rayDir = cameraDir + screenPos.x * cameraPlaneU + screenPos.y * cameraPlaneV;\n    //2.0 * sin(iTime * 2.7)\n\tvec3 rayPos = vec3(0.0, 0.0, -28.0*distanceAway);\n\t\t\n\trayPos.xz = rotate2d(rayPos.xz, (iMouse.x/iResolution.x)*5.0);\n\trayDir.xz = rotate2d(rayDir.xz, (iMouse.x/iResolution.x)*5.0);\n\t\n    rayPos += vec3(volumeSize)/2.0;    \n    \n    // for now just render the center pixel's cube\n    vec2 uv = (fragCoord)/iResolution.xy;\n\n    result r = getResult(texelFetch(iChannel0, ivec2(fragCoord.xy) / int(scaleAmount), 0));\n    \n    float try = cubeIntersect(vec3(r.mapPos) + 0.5, rayDir, rayPos);\n    float minValue = try;\n    vec3 color = fetchAndInterpolate(uv / scaleAmount, iResolution.xy); //r.color;\n    \n    // off\n    //fragColor.rgb = color;\n    //return;\n    \n    \n    if (minValue < 99998.0)\n    {\n        color = r.color;\n    }\n    \n    \n    \n    // top\n    r = getResult(texelFetch(iChannel0, (ivec2(fragCoord.xy) / int(scaleAmount)) + ivec2(1, 1), 0));\n    try = cubeIntersect(vec3(r.mapPos) + 0.5, rayDir, rayPos);\n    if (try < minValue)\n    {\n        minValue = try;\n        color = r.color;\n    }\n    \n    r = getResult(texelFetch(iChannel0, (ivec2(fragCoord.xy) / int(scaleAmount)) + ivec2(0, 1), 0));\n    try = cubeIntersect(vec3(r.mapPos) + 0.5, rayDir, rayPos);\n    if (try < minValue)\n    {\n        minValue = try;\n        color = r.color;\n    }\n    \n    r = getResult(texelFetch(iChannel0, (ivec2(fragCoord.xy) / int(scaleAmount)) + ivec2(-1, 1), 0));\n    try = cubeIntersect(vec3(r.mapPos) + 0.5, rayDir, rayPos);\n    if (try < minValue)\n    {\n        minValue = try;\n        color = r.color;\n    }\n    \n    \n    \n    \n    // center\n    r = getResult(texelFetch(iChannel0, (ivec2(fragCoord.xy) / int(scaleAmount)) + ivec2(1, 0), 0));\n    try = cubeIntersect(vec3(r.mapPos) + 0.5, rayDir, rayPos);\n    if (try < minValue)\n    {\n        minValue = try;\n        color = r.color;\n    }\n    \n    r = getResult(texelFetch(iChannel0, (ivec2(fragCoord.xy) / int(scaleAmount)) + ivec2(-1, 0), 0));\n    try = cubeIntersect(vec3(r.mapPos) + 0.5, rayDir, rayPos);\n    if (try < minValue)\n    {\n        minValue = try;\n        color = r.color;\n    }\n    \n    \n    \n    \n    \n    \n    // bottom\n    r = getResult(texelFetch(iChannel0, (ivec2(fragCoord.xy) / int(scaleAmount)) + ivec2(1, -1), 0));\n    try = cubeIntersect(vec3(r.mapPos) + 0.5, rayDir, rayPos);\n    if (try < minValue)\n    {\n        minValue = try;\n        color = r.color;\n    }\n    \n    r = getResult(texelFetch(iChannel0, (ivec2(fragCoord.xy) / int(scaleAmount)) + ivec2(0, -1), 0));\n    try = cubeIntersect(vec3(r.mapPos) + 0.5, rayDir, rayPos);\n    if (try < minValue)\n    {\n        minValue = try;\n        color = r.color;\n    }\n    \n    r = getResult(texelFetch(iChannel0, (ivec2(fragCoord.xy) / int(scaleAmount)) + ivec2(-1, -1), 0));\n    try = cubeIntersect(vec3(r.mapPos) + 0.5, rayDir, rayPos);\n    if (try < minValue)\n    {\n        minValue = try;\n        color = r.color;\n    }\n    \n    \n    fragColor.rgb = color;\n    \n    //if ( < 999.0)\n    //{\n    //    fragColor.rgb = getResult(texture(iChannel0, uv / scaleAmount)).color / 8.0;\n    //}\n    \n    \n    // collect all of the pixels cubes and then compare the depths\n    \n    \n    \n    \n    // then when a cube is smaller than a few pixels just\n    // just revert to the original?\n    \n\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"const int MAX_RAY_STEPS = 128*2;\n\nconst float scaleAmount = 4.0;\n\n#define distanceAway (iMouse.y/iResolution.y)*10.0\n\n// size of the volume -- cant be bigger than the max about of pixels in the buffer\n// I set it manually for simplicity\nconst ivec3 volumeSize = ivec3(64);\n\n// from Unorm Vec4 Packing \nhighp uint packUnorm(mediump uvec4 a) {\n    return uint( (a.x << 24)\n               | (a.y << 16)\n               | (a.z << 8 )\n               | (a.w << 0 ) ); }\nmediump uvec4 unpackUnorm(highp uint a) {\n    return uvec4( (a & 0xFF000000u) >> 24\n                , (a & 0x00FF0000u) >> 16\n                , (a & 0x0000FF00u) >> 8\n                , (a & 0x000000FFu) >> 0   ); }\n// Pack and unpack 4 floats in [0;1] <-> float (containing uint32)\nfloat packUnorm4x8(  vec4  a) { return uintBitsToFloat(packUnorm(uvec4(round(clamp(a, 0., 1.)*255.)))); }\nvec4  unpackUnorm4x8(float a) { return vec4(unpackUnorm(floatBitsToUint(a))) / 255.; }\n\n// Pack and unpack 4 floats in [-1;1] <-> float (containing uint32)\nfloat packSnorm4x8(  vec4  a) { return uintBitsToFloat(packUnorm(uvec4(round(clamp(a, -1., 1.)*127.5+127.5)))); }\nvec4  unpackSnorm4x8(float a) { return clamp((vec4(unpackUnorm(floatBitsToUint(a))) - 127.5) / 127.5, -1., 1.); }\n\nstruct result\n{\n    vec3 color; // fourth element stores depth\n    ivec3 mapPos; // position in volume\n};\n\nvec4 saveResult(result r)\n{\n    vec4 info;\n    \n    info.r = packUnorm4x8(vec4(r.color, 0.0));\n    info.g = uintBitsToFloat(packUnorm(uvec4(r.mapPos, 0u)));\n\n    return info; \n}\n\nresult getResult(vec4 info)\n{\n    result r;\n    \n    r.color = unpackUnorm4x8(info.r).rgb;\n    r.mapPos = ivec3(unpackUnorm(floatBitsToUint(info.g)).xyz);\n\n    return r;\n}\n\nstruct voxel\n{\n    // color of the voxel\n    vec4 color;\n    \n    // light color\n    vec4 light;\n    \n    // normal vector\n    vec3 normal;\n    \n    // the type of matterial it is\n    int matterial;\n};\n\n// first two positions are xy on buffer then which face of the cube map is z\nvec4 getPos(sampler2D buffer, ivec3 pos, ivec2 res)\n{\n    int c = pos.x + volumeSize.y * pos.y + volumeSize.z * volumeSize.y * pos.z;\n    \n    ivec2 d = ivec2(c%int(res.x), c/int(res.x));\n    \n    return texelFetch(buffer, d, 0);\n    }\n\n// this intakes the fragment position and outputs the correct voxel coord\nvec3 getPos(vec2 fragCoord, ivec2 res)\n{\n    int c = int(fragCoord.x) + int(fragCoord.y) * res.x;\n    \n    vec3 pos = vec3(c%volumeSize.x, (c/volumeSize.x)%volumeSize.y, c/(volumeSize.x*volumeSize.y));\n\n    return pos;\n}\n\nvoxel getVoxel(sampler2D buffer, ivec3 pos, ivec2 res)\n{\n    vec4 info = getPos(buffer, pos, res);\n\n    voxel v;\n    v.color = unpackUnorm4x8(info.r);\n    v.light = unpackUnorm4x8(info.g);\n    v.normal = unpackSnorm4x8(info.b).xyz;\n    v.matterial = int(floatBitsToUint(info.a));\n    \n    return v;\n}\n\nvec4 saveVoxel(voxel v)\n{\n    vec4 info;\n    info.r = packUnorm4x8(v.color);\n    info.g = packUnorm4x8(v.light);\n    info.b = packSnorm4x8(vec4(v.normal,0.0));\n    info.a = uintBitsToFloat(uint(v.matterial));\n    \n    return info;\n}\n\nvec2 rotate2d(vec2 v, float a) {\n\tfloat sinA = sin(a);\n\tfloat cosA = cos(a);\n\treturn vec2(v.x * cosA - v.y * sinA, v.y * cosA + v.x * sinA);\t\n}\n\nstruct mattirial\n{\n    float shinniness;\n};\n\nmattirial matir[5] = mattirial[]\n(\nmattirial(32.0), // 0 nutral mattirial highly difused \nmattirial(32.0), // 1 very smooth object\nmattirial(32.0), // 2 mirror\nmattirial(32.0), // \nmattirial(32.0)\n);","name":"Common","description":"","type":"common"},{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// dave\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\nvec3 hash32(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\n\nfloat sunRay(vec3 rayPos, vec3 rayDir)\n{\n    ivec3 mapPos = ivec3(floor(rayPos));\n\n\tvec3 deltaDist = abs(vec3(length(rayDir)) / rayDir);\n\t\n\tivec3 rayStep = ivec3(sign(rayDir));\n\n\tvec3 sideDist = (sign(rayDir) * (vec3(mapPos) - rayPos) + (sign(rayDir) * 0.5) + 0.5) * deltaDist; \n\t\n\tbvec3 mask;\n\n\tvec3 color;\n\n    voxel vox;\n    \n    // step out of yourself\n    mask = lessThanEqual(sideDist.xyz, min(sideDist.yzx, sideDist.zxy));\n    sideDist += vec3(mask) * deltaDist;\n    mapPos += ivec3(vec3(mask)) * rayStep;\n    \n    //mask = lessThanEqual(sideDist.xyz, min(sideDist.yzx, sideDist.zxy));\n    //sideDist += vec3(mask) * deltaDist;\n    //mapPos += ivec3(vec3(mask)) * rayStep;\n    //mask = lessThanEqual(sideDist.xyz, min(sideDist.yzx, sideDist.zxy));\n    //sideDist += vec3(mask) * deltaDist;\n    //mapPos += ivec3(vec3(mask)) * rayStep;\n    //mask = lessThanEqual(sideDist.xyz, min(sideDist.yzx, sideDist.zxy));\n    //sideDist += vec3(mask) * deltaDist;\n    //mapPos += ivec3(vec3(mask)) * rayStep;\n    \n    float opacity = 0.0;\n    \n\tfor (int i = 0; i < MAX_RAY_STEPS; i++) \n    {\n        vox = getVoxel(iChannel0, ivec3(mapPos), ivec2(iChannelResolution[0].xy));\n        if (any(greaterThanEqual(mapPos, volumeSize)) || any(lessThanEqual(mapPos, ivec3(0.0))))\n        {\n            return opacity;\n        }\n        if (vox.color.a > 0.1)\n        {\n            opacity += 0.05;\n            if (opacity > 0.1)\n            {\n                return opacity;\n            }\n        }\n\n        mask = lessThanEqual(sideDist.xyz, min(sideDist.yzx, sideDist.zxy));\t\t\n\t\t\n\t\tsideDist += vec3(mask) * deltaDist;\n\t\tmapPos += ivec3(vec3(mask)) * rayStep;\n\t}\n    \n    return opacity;\n}\n\n\nvec3 rayCast(vec3 rayPos, vec3 rayDir)\n{\n    ivec3 mapPos = ivec3(floor(rayPos));\n\n\tvec3 deltaDist = abs(vec3(length(rayDir)) / rayDir);\n\t\n\tivec3 rayStep = ivec3(sign(rayDir));\n\n\tvec3 sideDist = (sign(rayDir) * (vec3(mapPos) - rayPos) + (sign(rayDir) * 0.5) + 0.5) * deltaDist; \n\t\n\tbvec3 mask;\n\n\tvec3 color;\n\n    voxel vox;\n    \n    // step out of yourself\n    mask = lessThanEqual(sideDist.xyz, min(sideDist.yzx, sideDist.zxy));\n    sideDist += vec3(mask) * deltaDist;\n    mapPos += ivec3(vec3(mask)) * rayStep;\n    mask = lessThanEqual(sideDist.xyz, min(sideDist.yzx, sideDist.zxy));\n    sideDist += vec3(mask) * deltaDist;\n    mapPos += ivec3(vec3(mask)) * rayStep;\n    mask = lessThanEqual(sideDist.xyz, min(sideDist.yzx, sideDist.zxy));\n    sideDist += vec3(mask) * deltaDist;\n    mapPos += ivec3(vec3(mask)) * rayStep;\n    \n\tfor (int i = 0; i < MAX_RAY_STEPS; i++) \n    {\n        vox = getVoxel(iChannel0, ivec3(mapPos), ivec2(iChannelResolution[0].xy));\n        if (any(greaterThanEqual(mapPos, volumeSize)) || any(lessThanEqual(mapPos, ivec3(0.0))))\n        {\n            break;\n        }\n        if (vox.color.a > 0.1)\n        {\n            return clamp(vec3(vox.color.rgb * vox.light.rgb * 2.0) + color, 0.0, 1.0);\n        } else\n        {\n            // volumetric lighting \n            //color.rgb += vox.light.rgb * 0.003;\n        }\n\n        mask = lessThanEqual(sideDist.xyz, min(sideDist.yzx, sideDist.zxy));\t\t\n\t\t\n\t\tsideDist += vec3(mask) * deltaDist;\n\t\tmapPos += ivec3(vec3(mask)) * rayStep;\n\t}\n    \n    return clamp(texture( iChannel1, rayDir).rgb + color, 0.0, 1.0);\n}\n\n\nvec3 calculatePhong(vec3 normal, vec3 lightDir, vec3 viewDir, vec3 ambientColor, vec3 diffuseColor, vec3 specularColor, float shininess) {\n    // Normalize vectors\n    vec3 N = normalize(normal);\n    vec3 L = normalize(lightDir);\n    vec3 V = normalize(viewDir);\n\n    // Calculate reflection vector\n    vec3 R = reflect(-L, N);\n\n    // Ambient component\n    vec3 ambient = ambientColor;\n\n    // Diffuse component\n    float diffuseIntensity = max(dot(N, L), 0.0);\n    vec3 diffuse = diffuseIntensity * diffuseColor;\n\n    // Specular component\n    float specularIntensity = pow(max(dot(R, V), 0.0), shininess);\n    vec3 specular = specularIntensity * specularColor;\n\n    return ambient + diffuse + specular;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n\tvec3 cameraDir = vec3(0.0, 0.0, 0.8);\n\tvec3 rayDir = cameraDir;\n\trayDir.xz = rotate2d(rayDir.xz, (iMouse.x/iResolution.x)*5.0);\n    \n    //2.0 * sin(iTime * 2.7)\n    vec3 rayPos = vec3(0.0, 0.0, -28.0*distanceAway);\n    rayPos.xz = rotate2d(rayPos.xz, (iMouse.x/iResolution.x)*5.0);\n    rayPos += vec3(volumeSize)/2.0;\n\n    vec3 pos = getPos(fragCoord, ivec2(iResolution.xy));\n\n    \n    //temp\n    rayDir = normalize(pos - rayPos);\n    \n    voxel v;\n   \n    \n    \n    // init the set up of the scene\n    if (iTime < 0.1)\n    {\n        if (pos.y > float(volumeSize.y) - 6.0)\n        {\n            if (mod(pos.x, 8.0) == 0.0)\n            {\n                v.color = vec4(0.875,0.682,0.345,1.0);\n            \n                v.normal = normalize(vec3(0.0, -1.0, 0.0) + hash32(fragCoord) - 0.5); // ; // add some roughfness to the surface\n                v.matterial = 1;\n            \n                v.color.rgb -=  hash12(fragCoord)*0.02;\n            }\n        }\n    \n        if (pos.y < 4.0)\n        {\n            v.color = vec4(0.247,0.129,0.129,1.0);\n            \n            v.normal = normalize(vec3(0.0, 1.0, 0.0) + hash32(fragCoord) - 0.5); // ; // add some roughfness to the surface\n            v.matterial = 1;\n            \n            v.color.rgb -=  hash12(fragCoord)*0.02;\n        }\n        \n        if (distance(pos, vec3(volumeSize/2) - vec3(0.0, 10.0, 0.0)) < 10.0)\n        {\n            v.color = vec4(0.396,0.498,0.702, 1.0);\n            \n            //v.light = vec4(1.0);\n            v.normal = normalize(pos - vec3(volumeSize/2) ); // + 2.0*hash32(fragCoord) - 1.0 add some roughfness to the surface\n            v.matterial = 0;\n            \n            v.color.rgb -=  hash12(fragCoord)*0.02;\n\n        }\n\n\n        if (pos.z >= float(volumeSize.z) - 3.0)\n        {\n            v.color = vec4(0.5, 0.5, 0.5, 1.0);\n            v.normal = vec3(0.0, 0.0, -1.0); // + (hash32(fragCoord) - 0.5)*0.01;\n            v.matterial = 4;\n        }\n        \n        if (pos.z <= 3.0)\n        {\n            v.color = vec4(0.5, 0.5, 0.5, 0.0);\n            v.normal = vec3(0.0, 0.0, 1.0); // + (hash32(fragCoord) - 0.5)*0.01;\n            v.matterial = 4;\n        }\n        \n        \n        fragColor = saveVoxel(v);\n        return;\n    }\n    \n    v = getVoxel(iChannel0, ivec3(pos), ivec2(iResolution.xy));\n    \n    if (pos.x <= 3.0)\n    {\n        v.color = vec4(0.925,0.871,0.675,1.0); //texture(iChannel2, pos.zy/vec2(volumeSize.zy)) * 0.5;\n        v.normal = vec3(0.0, 1.0, 0.0);\n        v.matterial = 0;\n        //fragColor = saveVoxel(v);\n        //return;\n    }\n    \n    \n    vec3 sunDirection = normalize(vec3(0.5, 0.5, 0.5)); // Example direction to the sun\n    sunDirection.xy = rotate2d(sunDirection.xy,iMouse.y*0.03);\n    \n    vec3 ambientColor = vec3(0.5); // Example ambient light color\n    vec3 diffuseColor = vec3(0.05); // Example diffuse light color\n    vec3 specularColor = vec3(0.1); // Example specular light color\n    float shininess = 35.0; // Example shininess factor\n    \n    if (v.color.a > 0.1)\n    {\n        v.light.rgb = calculatePhong(v.normal, sunDirection, -rayDir, ambientColor, diffuseColor, specularColor, matir[v.matterial].shinniness);\n        v.light.rgb -= sunRay(pos, sunDirection);\n    } else\n    {\n        discard;\n    \n        float inSun = sunRay(pos, sunDirection);\n        if (inSun <= 0.1)\n        {\n            v.light = vec4(1.0, 1.0, 1.0, 0.01);\n        } else\n        {\n            v.light.rgb = vec3(0.0);\n        }\n    }\n    \n    v.light.rgb -= sunRay(pos, sunDirection);\n    \n    if (v.color.b <= 0.55 && v.color.b > 0.45) // hacked in\n    {\n        // then it is a mirror\n        \n        // temp fix\n        if (pos.z < 5.0)\n        {\n            pos.z += 1.0;\n        }\n        \n        // super sample the mirror - idea by ig-rd5923\n        v.light.rgb =  \n            rayCast(pos, reflect(normalize(pos + vec3(0.0, 0.0, 0.0) - rayPos), v.normal))/4.0 + \n            rayCast(pos, reflect(normalize(pos + vec3(0.5, 0.0, 0.0) - rayPos), v.normal))/4.0 + \n            rayCast(pos, reflect(normalize(pos + vec3(0.0, 0.5, 0.0) - rayPos), v.normal))/4.0 + \n            rayCast(pos, reflect(normalize(pos + vec3(0.5, 0.5, 0.0) - rayPos), v.normal))/4.0;\n    }\n    \n    fragColor = saveVoxel(v);\n    return; \n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 res = iResolution.xy / scaleAmount;\n    \n    // when it is outside of the used buffer zone\n    if (fragCoord.x > (iResolution.x / scaleAmount) || fragCoord.y > iResolution.y / scaleAmount)\n    {\n        discard;\n    }\n    \n    vec2 uv0 = (fragCoord)/iResolution.xy;\n    \n\tvec2 screenPos = (fragCoord.xy / res.xy) * 2.0 - 1.0;\n\tvec3 cameraDir = vec3(0.0, 0.0, 0.8);\n\tvec3 cameraPlaneU = vec3(1.0, 0.0, 0.0);\n\tvec3 cameraPlaneV = vec3(0.0, 1.0, 0.0) * res.y / res.x;\n\tvec3 rayDir = cameraDir + screenPos.x * cameraPlaneU + screenPos.y * cameraPlaneV;\n    //2.0 * sin(iTime * 2.7)\n\tvec3 rayPos = vec3(0.0, 0.0, -28.0*distanceAway);\n\t\t\n\trayPos.xz = rotate2d(rayPos.xz, (iMouse.x/iResolution.x)*5.0);\n\trayDir.xz = rotate2d(rayDir.xz, (iMouse.x/iResolution.x)*5.0);\n\t\n    rayPos += vec3(volumeSize)/2.0;\n    \n\tivec3 mapPos = ivec3(floor(rayPos + 0.));\n\n\tvec3 deltaDist = abs(vec3(length(rayDir)) / rayDir);\n\t\n\tivec3 rayStep = ivec3(sign(rayDir));\n\n\tvec3 sideDist = (sign(rayDir) * (vec3(mapPos) - rayPos) + (sign(rayDir) * 0.5) + 0.5) * deltaDist; \n\t\n\tbvec3 mask;\n\n\tvec4 color;\n\n    voxel vox;\n    \n\tfor (int i = 0; i < MAX_RAY_STEPS; i++) \n    {\n        vox = getVoxel(iChannel0, ivec3(mapPos), ivec2(iChannelResolution[0].xy));\n        \n        // todo: make it so when the ray leaves the volume it breaks the loop\n        if (all(lessThan(mapPos, volumeSize)) && all(greaterThan(mapPos, ivec3(0.0))))\n        {\n            if (vox.color.a > 0.1)\n            {\n                result r;\n                r.color = vox.color.rgb * vox.light.rgb * 3.5 + color.rgb; // + texture(iChannel2, uv0 + iTime).rgb / 4.0 - 0.25;\n                r.mapPos = mapPos;\n                \n                fragColor = saveResult(r);\n                return;\n            }\n            else\n            {\n                color.rgb += vox.light.rgb * 0.003;\n            }\n        }\n\n        mask = lessThanEqual(sideDist.xyz, min(sideDist.yzx, sideDist.zxy));\t\t\n\t\t\n\t\tsideDist += vec3(mask) * deltaDist;\n\t\tmapPos += ivec3(vec3(mask)) * rayStep;\n\t}\n\t\n    result r;\n    r.color = texture( iChannel1, rayDir ).rgb;\n    r.mapPos = ivec3(255, 255, 255);\n    \n    fragColor = saveResult(r);\n}","name":"Buffer B","description":"","type":"buffer"}]}