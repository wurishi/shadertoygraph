{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"\n\nfloat formula(float x)\n{\n     float PI = 3.1415926;\n float t = iTime*.01;\n\t//return .8 * sin(PI * 2.0 * (x - 0.0*t));\n\t\t\t\t\t\n\treturn .3 * sin(.5*PI*(-t+x))+\n\t\t\t\t .4 * cos(2.0*PI*(-t+sin(2.0 * PI * (x - t)))) + \n\t\t\t\t .1*sin(PI*32.0*(x+2.0*t));\n}\t\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n     float PI = 3.1415926;\n float t = iTime*.01;\n    \n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfloat px = 1.0/ iResolution.x;\n\tfloat py = 1.0 / iResolution.y;\n\t\n\tvec4 color = vec4(1.0,1.0,1.0,1.0);\n\tif ( abs(uv.x-.5) < px || abs(uv.y-.5) < py) \n\t\tcolor= vec4(0.0,0.0,1.0,1.0);\n\tif ( mod(abs(uv.y*10.0 + py*5.0), 1.0) < py * 10.0) \n\t{\n\t\tif (abs(uv.x-.5) < px * 10.0)\n\t\t\tcolor= vec4(0.0,0.0,1.0,1.0);\t\t\n\t\telse\n\t\t\tcolor= vec4(0.8,0.8,1.0,1.0);\t\t\t\n\t}\n\tif (mod(abs(uv.x*10.0 + px*5.0), 1.0) < px * 10.0) \n\t{\n\t\tif (abs(uv.y-.5) < py * 10.0)\n\t\t\tcolor= vec4(0.0,0.0,1.0,1.0);\t\t\n\t\telse\n\t\t\tcolor= vec4(0.8,0.8,1.0,1.0);\t\t\t\n\t}\n\t\n\tfloat x = (uv.x - .5);\n\tfloat y = formula(x);\n\tfloat y2 = formula(x + px*.5);\n\tfloat dy = max(px*4.0, abs(y2 - y));\n\t\n\tfloat modX = floor(.5+10.0*(uv.x-.5)) / 10.0;\n\tfloat fmodX = formula(modX);\n\t\n\t// old approach: threshold\n\t// if (abs(uv.y-.3  - .4 * y) < dy)\n\t//\tcolor = vec4(1.0,0.0,0.0,1.0); // red for comparison\n\t\n\t// antialiasing, i think \n\t//-- no this is just blurring\n\t//float opacity = max(0.0,1.0 - abs(uv.y-.5  - .4 * y)/dy);\n\t//color.r -= opacity;\n\t//color.g -= opacity;\t\n\t//color.b -= opacity;\n\t\n\t// let's actually take more samples\n\t/*float avg = 0.0;\n\tfor (float stp = 0.0; stp < 1.0; stp += .01)\n\t{\n\t  x = (uv.x - .5 + (stp*4.0-2.0)*px);\n\t  y = formula(x);\n\t  y2 = formula(x + px*.5);\n      dy = max(px*4.0, abs(y2 - y));\n\t  if ( abs(uv.y-.5  - .4 * y) < dy ) //avg += 1.0;\n\t\tavg += 1.0 - (abs(uv.y-.5  - .4 * y)) / (py*2.0);\n\t}\n\tavg /= 100.0;\n\tavg = pow(avg,.8);*/\n\t\n\t\n\t// 2d samples\n\t// ok but wonky and horribly inefficient\n\tfloat avg = 0.0;\n\tfloat screen_y = 0.0;\n\tfloat stroke = 3.0;\n\tfloat dist = 0.0;\n\tfor (float step_x = -1.0; step_x < 1.0; step_x += .1)\n\t{\n\t\tx = (uv.x - .5 +stroke*(-step_x)*px);\n\t\t\n\t\tfor (float step_y = -1.0; step_y < 1.0; step_y += .1)\n\t\t{\n\t\t\t\n\t\t\ty = formula(x);\n\t\t\tscreen_y = uv.y + stroke*(-step_y)*py;\n\t\t\tdist = step_x*step_x + step_y*step_y;\n\t\t\tdist /= stroke*stroke;\n\t\t\tavg += (1.0 - min(1.0,(abs(screen_y-.5  - .5*y)/py))) /dist;\n\t\t}\n\t}\n\tavg /= 100.0;\n\tcolor.r -= avg;\n\tcolor.g -= avg;\t\n\tcolor.b -= avg;\n\tfragColor = color;\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4dlSRS","date":"1403248385","viewed":284,"name":"sin wave","username":"bigblueboo","description":"plotting equations in a frag shader.","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["basic","math","sin","graph","formula","axes","tickmarks"],"hasliked":0,"parentid":"","parentname":""}}