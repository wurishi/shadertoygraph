{"ver":"0.1","info":{"id":"4llcWs","date":"1506989152","viewed":110,"name":"Dunes (Learning Raymarching)","username":"avant_bard","description":"Atrocious implementation of IQ's raymarching tutorial","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","learning","first"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdXGzr","filepath":"/media/a/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg","previewfilepath":"/media/ap/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdXGzr","filepath":"/media/a/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg","previewfilepath":"/media/ap/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float f( float x, float y ){\n\treturn sin(x * 0.5) + sin(y * sin(-iTime*0.1) * 0.5)+ 1.5+0.5 *sin(x*0.01)*6.0;\n}\n\n\nvec3 applyFog( in vec3  rgb,      // original color of the pixel\n               in float distance, // camera to point distance\n               in vec3  rayDir,   // camera to point vector\n               in vec3  sunDir )  // sun light direction\n{\n    float b = 23.6;\n    float fogAmount = 1.0 - exp( -distance*b );\n    float sunAmount = max( dot( rayDir, sunDir ), 0.0 );\n    vec3  fogColor  =  vec3(1.0,0.9,0.7);\n    return mix( rgb, fogColor, fogAmount );\n}\n\n\nvec3 castRay( const vec2 uv, const vec3 ro, const vec3 rd )\n{\t\n\n    const float delt = 0.01f;\n    const float mint = 0.001f;\n    const float maxt = 20.0f;\n    for( float t = mint; t < maxt; t += delt )\n    {\n        vec3 p = ro + rd*t;\n        if( p.y <  f( p.x, p.z ) )\n        {\n            vec3 rgb = texture(iChannel0, p.xz * 0.5 + vec2(sin(p.x*14.0), cos(p.x * 14.435)+ iTime*1.0)).xyz * (0.4+ p.y * 0.5) ;\n\t\t\trgb = applyFog( rgb, delt, rd, vec3(0,0,-1.0));\n\t\t\t return rgb;\n        }\n    }\n    return vec3(0.3 + uv.x * 0.5, 0.6, 0.9) ;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tvec2 fp = 0.5-(uv-0.5);\n\tvec4 m = iMouse / iResolution.xxxx;\n\n\tvec3 o = vec3(3.0 + 4.0 * sin(iTime*0.4), 5.0,-20.0);\n    \n\tvec3 ct = vec3(3.0 + m.x * 100.0, 0.0, 30.0 +  m.x*300.0);\n    vec3 wup = vec3(0.0, 1.0, 0.0);\n\tvec3 cr = normalize(cross(wup, o));\n    vec3 cd = normalize(ct - o);\n\tvec3 cu = cross(cd, cr);\n    vec3 rayDir = normalize(cr * fp.x + cu * fp.y + cd);\n\n\n\tvec3 rc = castRay(uv, o,rayDir);\n\n\tfragColor = vec4(rc, 1.0);\n\n}","name":"Image","description":"","type":"image"}]}