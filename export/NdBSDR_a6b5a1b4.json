{"ver":"0.1","info":{"id":"NdBSDR","date":"1672331672","viewed":138,"name":"Polished Ground by Darko","username":"omegasbk","description":"Playing with ray tracing and bump mapping.","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["raytracing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Made by Darko Supe (omegasbk)\n\nstruct Camera\n{\n    vec3 position;\n    vec3 direction;\n    float focalDistance;\n};\n\nCamera camera = Camera(\n    vec3(0., 0., -.3), \n    vec3(1.),\n    0.3);\n    \nstruct Material \n{\n    float diffuse;\n    float specular;\n    float shininess;\n    float ambience;\n    float reflection;\n};\n\nconst Material material = Material(0.214, 0.19, 76.8, 0.8, 0.7);\n\nstruct Plane \n{\n    vec3 position;\n    vec3 normal;\n    vec3 color;\n    Material material;\n};\n\nPlane plane = Plane(\n    vec3(0., -0.1, 0.), \n    vec3(0., 1., 0.), \n    vec3(0.2, 0.2, 0.2), \n    material);\n    \nstruct PointLight\n{\n    vec3 position;\n    vec3 color; // Not used for now\n    float intensity;\n};\n\nPointLight light = PointLight(\n    vec3(0., 0.4, -0.2), // position\n    vec3(1., 1., 1.),     // color\n    50.);                 // intensity\n\nvec3 getLitColor(in vec3 viewDir, in vec3 surfacePointPosition, in vec3 objectColor, in PointLight pointLight, in vec3 surfaceNormal, in Material material)\n{\n    vec3 lightVector = surfacePointPosition - pointLight.position;\n    vec3 lightDir = normalize(lightVector);   \n    \n   \tfloat lightIntensity = (pow(0.1, 2.) / pow(length(lightVector), 2.)) * pointLight.intensity;\n    \n    float coeff = -dot(lightDir, surfaceNormal);     \n    \n    vec3 ambient = material.ambience * objectColor;\n        \n    vec3 diffuse = material.diffuse * max(coeff, 0.) * objectColor * lightIntensity;\n       \n    vec3 halfwayDir = normalize(lightDir + viewDir);  \n    vec3 specular = pow(max(-dot(surfaceNormal, halfwayDir), 0.0), material.shininess) * material.specular * objectColor * lightIntensity;\n    \n    vec3 color = ambient + diffuse + specular;\n    \n    return color;\n}\n\nbool intersectPlane(in Plane plane, in vec3 origin, in vec3 rayDirection, out float t, out vec3 pHit) \n{    \n    // Assuming vectors are all normalized\n    float denom = dot(plane.normal, rayDirection); \n    if (denom < 1e-6) \n    { \n        vec3 p0l0 = plane.position - origin; \n        t = dot(p0l0, plane.normal) / denom; \n        \n        if (t >= 0.)\n        {\n            pHit = origin + rayDirection * t;\n            return true;\n        }             \n    } \n \n    return false; \n} \n\n#define RESOLUTION 0.01\n\n#define MAP_SCALE 1.3\n\nfloat getDepth(vec2 coord, float scale)\n{\n    return texture(iChannel1, coord).r * scale;\n}\n\nvec3 rayTrace(vec3 origin, vec3 direction, float scale)\n{\n    float dist;\n    vec3 pHit;\n\n    Plane parallaxPlane = plane; \n    \n    if (intersectPlane(parallaxPlane, origin, direction, dist, pHit))\n    {\n        pHit *= MAP_SCALE;\n        \n        float depth = getDepth(pHit.xz, scale);\n        pHit += direction * depth;\n    \n        float current = getDepth(pHit.xz, scale);\n        float towards = getDepth(pHit.xz - direction.xz * RESOLUTION, scale);\n        vec3 rightVec = pHit - normalize(cross(-direction, plane.normal)) * RESOLUTION;\n        float right = getDepth(rightVec.xz, scale);\n        \n        vec3 a = vec3(pHit.x, current, pHit.z);\n        vec3 b = vec3(pHit.x - direction.x* RESOLUTION, towards, pHit.z - direction.z * RESOLUTION);\n        vec3 c = vec3(rightVec.x, right, rightVec.z);\n        \n        vec3 aFin = b - a;\n        vec3 bFin = c - a;\n      \n        vec3 normal = normalize(cross(aFin, bFin));          \n        \n        vec3 floorColor = texture(iChannel1, pHit.xz).rgb;\n    \n        vec3 baseColor = getLitColor(direction, pHit, floorColor, light, normal, plane.material).rgb;\n        vec3 bounceVector = reflect(direction, normal);\n        vec3 reflectedColor = texture(iChannel0, bounceVector).rgb;\n                        \n        return mix(baseColor, reflectedColor, smoothstep(0., 1., plane.material.reflection));\n    }\n    \n    return texture(iChannel0, direction).rgb;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n     // Normalized pixel coordinates (from -0.5 to 0.5)\n    vec2 uv = fragCoord/iResolution.xy - 0.5;\n    uv.x *= (iResolution.x / iResolution.y); \n    \n    float rotation = iTime / 4.;\n    camera.position = vec3(cos(rotation), 0., sin(rotation)) * camera.focalDistance;\n    camera.direction = normalize(vec3(0.) - camera.position);\n    vec3 right = normalize(cross(camera.direction, vec3(0., 1., 0.)));\n    vec3 up = cross(right, camera.direction);\n   \tvec3 dir =  normalize(uv.x * right + uv.y * up + camera.direction);\n                 \n                 \n    float wave = texelFetch(iChannel2, ivec2(0., 1), 0).x;\n    vec3 finalColor = rayTrace(camera.position, dir, 0.03);\n     \n    // Output to screen\n    fragColor = vec4(finalColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}