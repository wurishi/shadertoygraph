{"ver":"0.1","info":{"id":"NtKfWy","date":"1665180331","viewed":74,"name":"Sin arclength","username":"Envy24","description":".","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["sin","arclength"],"hasliked":0,"parentid":"stVcDz","parentname":"Minimal Plotter"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define R                           iResolution\n#define TO_CENTERED_NDC(SC)       ( ((SC)+(SC)-R.xy) / R.y )         // in range x=[-AR; AR], y=[-1.0; 1.0]\n#define UNIT                      (  8.0 / R.y  )\n#define SMAA(x)                   ( smoothstep(UNIT, 0., x) )\n#define TAU                         6.2831853071795862\n#define PI                          3.1415926535897932\n\nfloat vertical_line(vec2 NDC, float x0) { return SMAA(abs(NDC.x-x0)); }\nfloat horizontal_line(vec2 NDC, float y0) { return SMAA(abs(NDC.y-y0)); }\nfloat y_axis(vec2 NDC) { return SMAA(abs(NDC.x)); }\nfloat x_axis(vec2 NDC) { return SMAA(abs(NDC.y)); }\nfloat draw_explicit_func(vec2 NDC, float fx, float dfdx)\n{\n    float signed_dist = NDC.y - fx;\n    return SMAA(abs(signed_dist) / sqrt(1.0 + dfdx * dfdx)); // absolute value / arclenght over unit length interval\n}\n\n/* Approximation by Gauss-Legendre quadrature.\n   https://www.shadertoy.com/view/st3yzs\n   https://keisan.casio.com/exec/system/1329114617 */\nfloat arclength(float t)\n{\n    const float xs[5] = float[5](\n        -0.9061798459386639927976,\n        -0.5384693101056830910363,\n        0.,\n        0.5384693101056830910363,\n        0.9061798459386639927976  );\n    const float ws[5] = float[5](\n        0.2369268850561890875143,\n        0.4786286704993664680413,\n        0.5688888888888888888889,\n        0.4786286704993664680413,\n        0.2369268850561890875143 );\n    \n    float a = 0., b = t;\n    float hwidth = (b-a)*0.5,\n          mean = (b+a)*0.5;\n\n    float I = 0.;\n    for (int i = 0; i < 5; ++i)\n    {\n        float x = mean + hwidth * xs[i];\n              I += sqrt(1. + cos(x)*cos(x))*ws[i];\n    }\n\n    return I * mean;\n}\n\nvoid mainImage( out vec4 O, in vec2 SC )\n{\n    vec2 NDC = TO_CENTERED_NDC(SC) * 4.0;\n\n    vec3 color = vec3(1.);\n         color -= x_axis(NDC); color -= y_axis(NDC);         \n    /* Explicit function y=f(x) */\n#define func(x) ( sin((x)) )\n#define dfdx(x) ( cos((x)) )\n         color.rb -= draw_explicit_func(NDC, func(NDC.x), dfdx(NDC.x));\n#define func2(x) ( arclength((x)) )\n#define dfdx2(x, dx) ( ( func2((x)+(dx)) - func2(x) ) / (dx) )\n         color.rg -= draw_explicit_func(NDC, func2(NDC.x), dfdx2(NDC.x, 0.01));\n         \n         /* Correct points for compare. */\n         color = mix( color, vec3(0,0,1), SMAA(diskSDF_L2(NDC, vec2(PI, 3.8202), 3.*UNIT)) );                \n         color = mix( color, vec3(0,0,1), SMAA(diskSDF_L2(NDC, vec2(-PI, -3.8202), 3.*UNIT)) );\n         \n         /* Approximation points for compare. */       \n         color = mix( color, vec3(1,0,1), SMAA(diskSDF_L2(NDC, vec2(PI, arclength(PI)), UNIT)) );\n         color = mix( color, vec3(1,0,1), SMAA(diskSDF_L2(NDC, vec2(-PI, arclength(-PI)), UNIT)) );\n         \n         color -= vertical_line(NDC, -1.)*.2;   color -= vertical_line(NDC, 1.)*.2;\n         color -= horizontal_line(NDC, -1.)*.2; color -= horizontal_line(NDC, 1.)*.2;\n        \n    O = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"float diskSDF_L2(vec2 NDC, vec2 C, float R)\n{\n    return length(C - NDC)-R;\n}","name":"Common","description":"","type":"common"}]}