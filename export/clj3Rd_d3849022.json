{"ver":"0.1","info":{"id":"clj3Rd","date":"1673756514","viewed":76,"name":"Simple edge detect w luma","username":"ianertson","description":"Using luma to detect edges","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["edgedetect","edges","luma"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define EDGE_COLOR vec3(0.5, 0.5, 0.9)\n\nfloat luma(vec3 color) { return dot(color, vec3(0.299, 0.587, 0.114)); }\n\nfloat cdiff(vec3 a, vec3 b, float scalar, float th) {\n    float la = luma(a);\n    float lb = luma(b);\n    float d1 = pow(max(0.0, (la - lb)), 1.8 + (th*0.1));\n    float d2 = pow(abs(distance(a, b)), 5.0 + (th*0.5));\n    float k = pow((d1+d2)/2.0, 0.5 + th);\n    return smoothstep(0.0, 1.0, k*(scalar+th));\n}\n\nfloat edge(sampler2D tex, vec2 uv, float radius, float threshold) {\n    vec2 s = vec2(textureSize(tex, 0).xy);\n    vec2 texel = radius / s;\n    vec3 right = textureLod(tex, uv + vec2(1.0, 0.0)*texel, 0.0).rgb;\n    vec3 down = textureLod(tex, uv + vec2(0.0, -1.0)*texel, 0.0).rgb;\n    vec3 corner = textureLod(tex, uv + vec2(1.0, -1.0)*texel, 0.0).rgb;\n    \n    float scalar = 9999999.0;\n    float diffRightDown = cdiff(right, down, scalar, threshold);\n    float diffRightCorner = cdiff(right, corner, scalar, threshold);\n    float diffDownCorner = cdiff(down, corner, scalar, threshold);\n    \n    return smoothstep(0.0, 1.0, (1.0 / max(1.0, threshold*1.6))*(diffRightDown + diffRightCorner + diffDownCorner));\n}\n\n// not used, just an experiment in case you want to blur the edges\nvec3 blur(sampler2D tex, vec2 uv) {    \n    vec2 gradx = vec2(0.0001, 0.01)+0.02;\n    vec2 grady = vec2(0.01, 0.0001)-0.02;\n    return textureGrad(tex, uv, gradx, grady).rgb;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fc )\n{\n    vec2 res = iResolution.xy;\n    vec2 uv = fc / res;\n    vec3 col = vec3(0.0);\n    \n    col = texture(iChannel0, uv).rgb;\n    \n    float radius = 1.1;\n    float threshold = 2.2;\n    float e = edge(iChannel0, uv, radius, threshold);\n    \n    \n    float T = (iTime+3.0)*0.5;\n    vec3 edgeCol = mix(EDGE_COLOR, normalize(abs(vec3(cos(T), sin(T), cos(T+3.2195)))), 0.5);\n    float fade = clamp(smoothstep(0.0, 1.0, 0.5+(0.5*cos((T-2.7)*2.6))), 0.3, 1.0);\n    col = mix(col*fade, clamp(edgeCol*(1.0+luma(edgeCol)), 0.0, 1.0), e);\n    \n    // in case you want to blur the edges\n    // vec3 blr = blur(iChannel0, uv);\n    // col = mix(col, blr, e);\n    \n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}