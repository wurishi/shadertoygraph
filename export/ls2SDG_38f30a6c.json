{"ver":"0.1","info":{"id":"ls2SDG","date":"1434617268","viewed":636,"name":"Triangle Post-Processing","username":"Orihaus","description":":3","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"bool IsLessThan( vec3 a, vec3 b )\n{\n    return ( a.x <= b.x || a.y <= b.y || a.z <= b.z );\n}\n\nvec3 SRGBToLinear( in vec3 sRGBCol )\n{\n\tvec3 linearRGBLo = sRGBCol / 12.92;\n\tvec3 linearRGBHi = pow( ( sRGBCol + 0.055 ) / 1.055, vec3( 2.4 ) );\n\tvec3 linearRGB = IsLessThan( sRGBCol, vec3( 0.04045 ) ) ? linearRGBLo : linearRGBHi;\n\treturn linearRGB;\n}\n\nvec3 linearToSRGB( in vec3 linearCol )\n{\n\tvec3 sRGBLo = linearCol * 12.92;\n\tvec3 sRGBHi = ( pow( abs ( linearCol ), vec3( 1.0 / 2.4 ) ) * 1.055 ) - 0.055;\n\tvec3 sRGB   = IsLessThan( linearCol, vec3( 0.0031308 ) ) ? sRGBLo : sRGBHi;\n\treturn sRGB; //pow( linearCol, vec3( 1.0 / 2.2 ) );\n}\n\n//\n\nconst int samples = 2;\nconst float fSamples = float( samples * samples * 2 * 2 );\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfloat aspect = iResolution.x / iResolution.y;\n    \n    float scale = 16.0;//( 0.4 + sin( iTime * 0.5 ) * 0.2 ) * 110.0;\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv.x *= aspect;\n    uv.y = 1.0 - uv.y;\n    \n    vec2 mosaicUV = floor( uv * scale ) / scale;\n    uv  -= mosaicUV;\n    uv  *= scale;\n    \n    vec2 triOffset = vec2( \n        step( 1.0 - uv.y, uv.x ) / ( 2.0 * scale ),                                        \n        step(       uv.x, uv.y ) / ( 2.0 * scale ) \n    );\n    \n   \tvec2 sampleUV = mosaicUV + triOffset;\n\tsampleUV.x /= aspect;\n    \n    vec3 sample2d = vec3( 0.0 );\n    for( int x = -samples; x < samples; x++ )\n    {\n    \tfor( int y = -samples; y < samples; y++ )\n        {\n            vec2 subSampleUV = sampleUV;\n            subSampleUV += ( vec2( aspect, 1.0 ) / vec2( scale * fSamples ) ) \n                * vec2( float( samples + x ), float( samples + y ) );\n    \t\tsample2d += SRGBToLinear( texture( iChannel0, subSampleUV ).rgb );\n        }\n    }\n    sample2d /= fSamples;\n\n    \n\tfragColor = vec4( linearToSRGB( sample2d ), 1.0 );\n}","name":"Image","description":"","type":"image"}]}