{"ver":"0.1","info":{"id":"mdKyWw","date":"1696218076","viewed":13,"name":"tomografia v3 - fork3","username":"davidmachadosf","description":"introducing different simetry","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["math"],"hasliked":0,"parentid":"DdKcDm","parentname":"tomografia v3 - fork4"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float   a   = 1./3.;\nconst float   b   = 1./6.;\nconst float scale =  10.0005 ;\n\n\nvec3 palette(float t) {\n\n    vec3 a = vec3( 1.2,  1.7,     .4    );\n    vec3 b = vec3( .5,  1.8,     9.5    );\n    vec3 c = vec3(100. , 6.,     500.     );\n    vec3 d = vec3( .0,  9999.33333, 8.66666);\n    \n    return a + b*sin(6.28318*(c*t + d));\n}\n\n\n\nvec3 grayScale(float t) {\n\n    return vec3(t,t,t);\n}\n\n\nfloat f(float x, float y, float iTime) { \n  \n  float d =  (x*x+y/x)/(y+x/y) + y*y*x/(x-y);\n  float n=0.;\n  \n  //float pa=a*log(iTime/3.);\n  //float pb=b*log(iTime/2.);\n  \n  \n  //float pa=a*10.*sin(iTime/7.);\n  //float pb=b*20.*cos(iTime/5.);\n  \n  float pa=a*2.*sin(iTime/.2);\n  float pb=b*3.*cos(iTime/.3);\n  \n  \n  for(int i=0; i<2; i++) {\n  \n      float newX = ( x  +  pa/d)*x - y*y;\n\t  float newY = (2.*y + pb/d)*y;  \n\t  \n\t  x = newX;\n\t  y = newY;\t  \n\t  n+=1.;\n      \n      // sentinela\n      //if(n>10.) break;\n      \n      d = x*x + y*y;\n      if(d >= 2.) break;\n  }\n  \n  return (1.-.1/(cos(d/1.)+1.)*.5);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = scale*log(iTime)/sin(iTime/10.)*(fragCoord/iResolution.xy - .5);\n    \n    float x = uv.x*.1;\n    float y = uv.y*.5;\n    \n  \n    float valxy = f(.7*(y-.2), 5.32*x, iTime*.5);\n    \n    //vec3 col = grayScale(valxy);\n    //vec3 col = palette(valxy);\n    vec3 col = palette(valxy)*(1.-grayScale(valxy));\n    \n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}