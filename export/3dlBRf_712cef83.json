{"ver":"0.1","info":{"id":"3dlBRf","date":"1588761214","viewed":413,"name":"Hexagonal Julia- Mandelbrot","username":"matthen","description":"Hexagonal Julia- Mandelbrot","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["mandelbrot","hexagon","tiling"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define ITER 256\n\nfloat hexDist(vec2 p) {\n\tp = abs(p);\n    float c = dot(p, normalize(vec2(1, 1.73)));\n    c = max(c, p.x);\n    return c;\n}\n\nvec3 gradient(in float r) {\t\n    r /= 30.;\n    r = pow(min(r, 1.), 0.5);\n    vec3 rainbow = 0.5 + 0.5 * cos((0.8 + 5. * r + vec3(0.2, 0.45, 0.5)*6.));\n    \n    return rainbow;\n}\n\n\nvec3 fractal(vec2 z, vec2 c) {\n    for (int i = 0; i < ITER; ++i) {\n        z = vec2(\n            z.x*z.x - z.y*z.y + c.x,\n            2.0 * z.x*z.y + c.y\n        );\n\n        float distSqr = dot(z, z);\n        \n        if (distSqr > 20.0)\n            return gradient(float(i) + 1.0 - log2(log(distSqr) / 2.0));\n    }\n    \n    return vec3(0.0, 0.0, 0.0);\n}\n\nvec4 hexCoords(vec2 uv) {\n    // x is theta\n    // y is r\n    // z & w is id\n\tvec2 r = vec2(1, 1.73);\n    vec2 h = r*.5;\n   \n    \n    vec2 a = mod(uv, r)-h;\n    vec2 b = mod(uv-h, r)-h;\n    \n    vec2 gv = dot(a, a) < dot(b,b) ? a : b;\n    \n    float x = atan(gv.x, gv.y);\n    float y = .5 - hexDist(gv);\n    vec2 id = uv - gv;\n    return vec4(x, y, id.x, id.y);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - .5*iResolution.xy) / iResolution.y;\n\n    float t = mod(iTime, 16.);\n    t = min(t, 16. - t);\n    \n    \n    float zoom = 0.3 + pow(smoothstep(0., 6., t) * 2., 2.);\n    \n    uv -= vec2(0.25, 0.);\n    \n    uv *= 6. * zoom;\n    \n    vec4 hc = hexCoords(uv);\n    \n    \n    vec2 z = uv - hc.zw;\n    z *= 2.5;\n    \n    \n    float scale = 0.4 / zoom;\n \n    \n    vec2 c = scale * hc.zw;\n    vec2 cSmooth = scale * uv;\n    \n    \n    vec3 julia = fractal(z, c);\n    vec3 mandel = fractal(cSmooth, cSmooth);\n    \n    float mixV = 0.6 * smoothstep(6., 7., t);\n    \n    fragColor.xyz = mix(julia, mandel, mixV);\n    \n    \n    fragColor *= max(smoothstep(0., 0.002 / zoom, hc.y), mixV);\n\n}","name":"Image","description":"","type":"image"}]}