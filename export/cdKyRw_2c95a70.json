{"ver":"0.1","info":{"id":"cdKyRw","date":"1695902482","viewed":37,"name":"Solar system - lin. alg. study","username":"vlahovivan","description":"Sun and a planet, practicing my linear algebra ","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["lighting","linearalgebra"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdCircle( vec2 p, float r )\n{\n    return length(p) - r;\n}\n\nfloat bump(float left, float right, float x) {\n    return step(left, x) * step(x, right);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord/iResolution.yy;\n    \n    float time = iTime * 0.8;\n    \n    p.x -= iResolution.x / (2.0 * iResolution.y);\n    p.y -= 0.5;\n\n\n    vec3 col = length(p) * vec3(0.0, 0.0, 0.2);\n    \n    vec3 yellow = vec3(1.0, 1.0, 0.0);\n    vec3 grey = vec3(0.3333);\n    \n    float sun_sd = sdCircle(p, 0.2);\n    \n    if(sun_sd < 0.0) {\n        col = vec3(step(sun_sd, 0.0)) * yellow;\n    }\n    \n    vec2 moon_pos = 0.4 * vec2(1.4 * cos(time), 0.7 * sin(time));\n    float moon_sd = sdCircle(p - moon_pos, 0.05);\n    vec2 moon_normal = moon_pos - p;\n    \n    float brightness = dot(normalize(moon_pos), normalize(moon_normal));\n    brightness = max(0.0, brightness);\n    \n    if(moon_sd <= 0.0) {\n        col = grey + vec3(bump((0.01 * sin(time + 3.14159 / 2.0) - 0.01) * brightness, 0.0, moon_sd)) * yellow;\n    } \n    \n    fragColor = vec4(bump(-0.25, 0.25, p.x));\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}