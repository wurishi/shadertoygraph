{"ver":"0.1","info":{"id":"3dcXR8","date":"1571371125","viewed":606,"name":"falling sand","username":"matthen","description":"falling sand simulation using a cellular automaton","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["2d","cellular","sand","automaton"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    ivec2 p = ivec2(fragCoord);\n    \n    float val = float(getCell(iChannel0, p));\n    \n    float inAir = float(getInAir(iChannel0, p));\n    \n    vec3 col = vec3(val, 1., 1.) * inAir;\n\t\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"int getCell(in sampler2D channel, in ivec2 p) {\n    return int(step(0.5, texelFetch(channel, p, 0).x));\n}\n\nint getInAir(in sampler2D channel, in ivec2 p) {\n    return int(step(0.5, texelFetch(channel, p, 0).y));\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// 0 [o o, o o] -> 0\n// 1 [o o, x o] -> 1\n// 2 [o o, o x] -> 2\n// 3 [o o, x x] -> 3\n// 4 [x o, o o] -> 1\n// 5 [x o, x o] -> 3\n// 6 [x o, o x] -> 3\n// 7 [x o, x x] -> 7\n// 8 [o x, o o] -> 2\n// 9 [o x, x o] -> 3\n// 10[o x, o x] -> 3\n// 11[o x, x x] -> 11\n// 12[x x, o o] -> 3\n// 13[x x, x o] -> 7\n// 14[x x, o x] -> 11\n// 15[x x, x x] -> 15\n\nconst int mapping[16] = int[16](\n    0, 1, 2, 3, 1, 3, 3, 7, 2, 3, 3, 11, 3, 7, 11, 15\n);\n\nbool isInAir(vec2 uv) {\n    return uv.y > -0.45;\n}\n\nint getNext(in ivec2 p, in bool inAir) {\n    \n    int frame = iFrame;\n    ivec2 pp = (p + ivec2(frame % 2, frame / 2)) % 2;\n    ivec2 notpp = 1 - pp;\n    \n    ivec4 o = ivec4(-pp.x, 1 - pp.x, -pp.y, 1 - pp.y);\n    \n    \n    int topLeft = getCell(iChannel0, p + o.xz); \n    int topRight = getCell(iChannel0, p + o.yz); \n    int bottomLeft = getCell(iChannel0, p + o.xw); \n    int bottomRight = getCell(iChannel0, p + o.yw); \n    \n    int next = topLeft + 2 * topRight + 4 * bottomLeft + 8 * bottomRight;\n    if (inAir) {\n\t    next = mapping[next];\n    } else {\n    \treturn 15;   \n    }\n    \n    return (next >> (pp.x + 2 * pp.y)) % 2;\n}\n\nvec2 hash12(in float x) {\n\treturn vec2(\n        fract(sin(2367.7 * x + 12.2) + 875.2),\n        fract(sin(123.962 * x -2387.2) + 2.9)        \n    );\n    \n}\n\nfloat hash(in float x) {\n\treturn fract(sin(9834.7 * x + 77.2));\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n   \tfloat val;\n    vec2 uv = (fragCoord - .5 * iResolution.xy) / iResolution.y;\n    bool inAir = isInAir(uv);\n    \n    \n    \n    ivec2 p = ivec2(fragCoord);\n    val = float(getNext(p, inAir));\n    \n    if (iFrame % 60 == 0) {\n        // randomly add / subtract circles\n        vec2 centre = hash12(iTime) - .5;\n        float radius = 0.05 + hash(iTime) * 0.1;\n        \n        float skew = .5 + hash(iTime * 2.2);\n        \n        // override first frame\n        if (iFrame == 0) {\n        \tskew = 1.;\n            centre = vec2(0., -.2);\n            radius = 0.2;\n        }\n        float circ = step(0., radius - length(uv * vec2(skew, 1.) - centre));\n        \n        if (hash(3.2 * iTime) > .5 || iTime < 10.) {\n\t    \tval += circ;\n        } else {\n            val -= circ;\n        }\n    }\n    \n    \n    fragColor = vec4(val, float(inAir), 0., 0.);\n}","name":"Buffer A","description":"","type":"buffer"}]}