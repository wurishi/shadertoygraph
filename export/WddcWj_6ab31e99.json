{"ver":"0.1","info":{"id":"WddcWj","date":"1601799702","viewed":229,"name":"Fire Effect OldSkool","username":"GCScholar","description":"The old school fire effect ","likes":11,"published":1,"flags":32,"usePreview":0,"tags":["oldschool","fire","oldskool","old","school"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfragCoord.y += 2.0*PIXEL_SIZE; // Hide the bottom row\n    fragCoord = floor(fragCoord/PIXEL_SIZE)*PIXEL_SIZE + vec2(0.5, 0.5);\n \tvec2 uv = fragCoord/ iResolution.xy;\n    vec4 paletteIdx = texture(iChannel0, uv);\n    \n    fragColor = vec4(hsl2rgb(vec3(paletteIdx.x/3.0, 1.0, min(1.0, paletteIdx.x*2.0))),1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define PIXEL_SIZE 4.0\n\n// Random numbers, tnx https://www.shadertoy.com/view/MsKGWz\nfloat random(vec2 p)\n{\n    vec2 r = vec2(\n        23.14069263277926, \n         2.665144142690225 \n    );\n    return fract(cos(mod(12345678.0, 256.0*dot(p,r))));\n}\n  \n// HSL <-> RGB color conversion, tnx https://www.shadertoy.com/view/XljGzV\nvec3 hsl2rgb( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n    return c.z + c.y * (rgb-0.5)*(1.0-abs(2.0*c.z-1.0));\n}\n\nvec3 rgb2hsl( in vec3 c ){\n  float h = 0.0;\n\tfloat s = 0.0;\n\tfloat l = 0.0;\n\tfloat r = c.r;\n\tfloat g = c.g;\n\tfloat b = c.b;\n\tfloat cMin = min( r, min( g, b ) );\n\tfloat cMax = max( r, max( g, b ) );\n\n\tl = ( cMax + cMin ) / 2.0;\n\tif ( cMax > cMin ) {\n\t\tfloat cDelta = cMax - cMin;\n        \n        //s = l < .05 ? cDelta / ( cMax + cMin ) : cDelta / ( 2.0 - ( cMax + cMin ) ); Original\n\t\ts = l < .0 ? cDelta / ( cMax + cMin ) : cDelta / ( 2.0 - ( cMax + cMin ) );\n        \n\t\tif ( r == cMax ) {\n\t\t\th = ( g - b ) / cDelta;\n\t\t} else if ( g == cMax ) {\n\t\t\th = 2.0 + ( b - r ) / cDelta;\n\t\t} else {\n\t\t\th = 4.0 + ( r - g ) / cDelta;\n\t\t}\n\n\t\tif ( h < 0.0) {\n\t\t\th += 6.0;\n\t\t}\n\t\th = h / 6.0;\n\t}\n\treturn vec3( h, s, l );\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Print char tnx https://www.shadertoy.com/view/ltcXzs\nvec4 char(vec2 p, int C) \n{\n    if (p.x<0.|| p.x>1. || p.y<0.|| p.y>1.) return vec4(0,0,0,1e5);\n   //return texture   ( iChannel2, p/16. + fract( vec2(C, 15-C/16) / 16. ) );\n  //return textureLod( iChannel0, p/16. + fract( vec2(C, 15-C/16) / 16. ) , \n  //                   log2(length(fwidth(p/16.*iResolution.xy))) );\n    return textureGrad( iChannel1, p/16. + fract( vec2(C, 15-C/16) / 16. ) , \n                       dFdx(p/16.),dFdy(p/16.) );\n    // possible variants: (but better separated in an upper function) \n    //     - inout pos and include pos.x -= .5 + linefeed mechanism\n    //     - flag for bold and italic \n}\n\nvec4 printText(in int asciiCodes[14], in vec2 U) \n{\n\tvec4 color;\n    for(int i=0; i<14; i++)\n    {\n        color += vec4(char(U, asciiCodes[i]).x);  U.x-=0.5; // H\n    }\n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec4 paletteIdx = vec4(0.0);\n    if(fragCoord.y == 0.5) \n    {\n        // The last line is random\n        fragCoord.y = mod(iTime*100.0, iResolution.y);\n    \tvec2  p  = (-iResolution.xy + 2.0*fragCoord.xy) / iResolution.y;\n        paletteIdx = vec4(random(p));\n    }\n    else if(mod(fragCoord, PIXEL_SIZE) == vec2(0.5, 0.5))    {\n        \n        // A pixel is the sum of the two pixel below it, and the pixels at its bottom right and bottom left\n        vec2 b,bb, bl,br;\n        b  = (fragCoord + vec2(0.0,-PIXEL_SIZE)) / iResolution.xy;\t\t\t\t\t\t\t\t// Bottom center pixel\n        bl = mod((fragCoord + vec2(-PIXEL_SIZE,-PIXEL_SIZE)), iResolution.xy) / iResolution.xy;\t// Bottom left pixel \n       \tbr = mod((fragCoord + vec2(PIXEL_SIZE,-PIXEL_SIZE)), iResolution.xy) / iResolution.xy; \t// Two rows below pixel\n      \tbb = (fragCoord + vec2(0.0,-2.0*PIXEL_SIZE)) / iResolution.xy;\n        \n        paletteIdx = texture(iChannel0, b) + texture(iChannel0, bl) + texture(iChannel0, br) + texture(iChannel0, bb);\n        paletteIdx /= 4.1 + 0.04*(sin(iTime));\n    }\n    \n    // Print \"Old Skool fire\"\n    {\n        vec2 U = (2.*fragCoord-iResolution.xy)/(iResolution.y);  \n        U = U * PIXEL_SIZE + vec2(PIXEL_SIZE, 0.0);\n        int text[14] = int[14](79, 108, 100, 32, 115, 107, 111, 111, 108, 32, 102, 105, 114, 101);\n        fragCoord.y = mod(iTime*100.0, iResolution.y);\n        vec2 p  = (-iResolution.xy + 2.0*fragCoord.xy) / iResolution.y;\n        vec4 tmp = vec4(random(p));\n        paletteIdx += vec4(printText(text, U).x)*0.2*tmp*0.5;\n    }\n    \n    fragColor = paletteIdx;\n}","name":"Buffer A","description":"","type":"buffer"}]}