{"ver":"0.1","info":{"id":"M32fzK","date":"1729712459","viewed":126,"name":"Guitar Simulation Experiment","username":"DerShade","description":"procedural melody is not always bareable to hear. so take it as a chalenge. Also guit timing. -added difraction.","likes":7,"published":1,"flags":8,"usePreview":0,"tags":["3d","sound","music","scene","guitar"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord)\n{    \n    float a,c,x,y,s=2.6,z,xx,yy,zz,l=64.,df;vec2 uv = fragCoord/iResolution.xy-0.5;\n    a=iTime/5.;   \n    for(float f=0.;f<l;f+=1.){\n    \n    zz=f/15.+4.+sin(((fragCoord.x+f/15.)*2313.)*(cos((fragCoord.y+f/19.)*1341.))*mod(iTime,10.))/10.;\n  \n    df = 2.+c/18.;\n    xx = uv.x*(iResolution.x/iResolution.y)*zz*df;\n    yy = uv.y*zz*df;\n    xx+= sin(3.14)*8.;\n    zz+= cos(3.14)*8.;\n    \n    z =  cos(a)*(zz)-sin(a)*(xx);\n    x =  sin(a)*(zz)+cos(a)*(xx); \n    y =  yy;;\n    \n    \n    c += .03+float(x>-s&&x<s&&y>-s&&y<s&&z>-s&&z<s&&f>0.)*sin((x*x+y*y)-iTime);\n    \n   \n    }\n    \n    fragColor = vec4(c*y,c/1.4,c*(x),1.0)/l;\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec2 mainSound( int samp, float time )// notes -d10 -e8 -f7 -g5 -a3 -b1 c0 d2 e4 f5 g7 a9 b11\n{\nint t = samp,m1,strsep=1024;\n//guitsim\nfloat[] harm = float[](19.03,16.01,12.03,7.01,0.011,-5.01); // tones to transpose\nfloat T = sin(time*50.)/40.+float(t)/16.,o,f1,f2;  // slight vibrato + base freq from base samp  \n     strsep *= 1+(t>>16&1); //strum speed variator\n     for (int strum=0;strum<6;strum+=1) {  // # (of strings played + 1) 3,4,6 best.\n    // melogen, a tone change is pematured for the each of strings by strum*string_separation \n    m1 = (0x41513010/(1+(strum*strsep+t>>17&10))>>(strum*strsep+t>>14&28)&7);\n    harm[1]=16.01-float((m1%2)==1&&m1!=1); //minmajor onoff\n    \n    f1 = pow(2.,(float(m1)+harm[strum])/12.);// melo int to ionian freq\n    f2 = pow(2.,(float(m1^9)+harm[3])/12.);    // meloforsid   \n    \n    o += ((sin(sin(sin(sin(                    // FM main string freq\n      (T/8.003 *f1))/8.+                       // octave harmonics and amplitudes \n      (T/4.009 *f1))+\n      (T       *f1))*1.2+\n      (T/2.006 *f1))*1.9)+                    \n      (sin(T*pow(2.,(float(m1)+harm[4])/12.)))/  //picking string for feedback \n      (abs(cos(time/19.)*105.)))/                //feedback oscillator * 1/ammount \n     // (impact + (mixed strings div by exp. envelope) / fadeout) / mastervol-overdrive\n      (0.7+(float(strum*strsep+t&65535)/(8192./(3.+float(m1)/3.))))\n      /1.; //divide/multiply the o before limiter to get the proper overdrive\n    \n    \n    } //quitsim done.\n    o= clamp(o,-0.15,0.27)/4.;     //limiter / of the final volume\n    // c64 pwm love  \n    o+= float((t>>11|t>>14&t>>12)&1)*(float(int(1.+sin(T/8.*f2))|int(1.+sin(T/8.01*f2))&1)/6.);\n    // the simplest 8bit drums i can come up with yet.\n    o+= float((((1400000/(t&(t&10116%t)*(t>>15&1+(t>>14&11))+0x3fff)))&128)/(t>>9&63))/356.;\n     \n    return vec2( float(o));\n}","name":"Sound","description":"","type":"sound"}]}