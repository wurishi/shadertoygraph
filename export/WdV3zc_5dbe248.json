{"ver":"0.1","info":{"id":"WdV3zc","date":"1570667126","viewed":389,"name":"shadetober #09 (swing)","username":"percentcer","description":"Inktober, but with shaders","likes":5,"published":3,"flags":32,"usePreview":0,"tags":["inktober","shadertober","shadetober","inktober2019"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// trying to recreate the plane deformation effect before reading the article\n// https://iquilezles.org/articles/deform\n#define PI 3.14159\n#define PI2 6.284\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;    \n    uv -= vec2(.5, .5);\n    uv.x *= iResolution.x/iResolution.y;\n    \n    // create polar uvs to sample texture\n    float rad = length(uv);\n    float phi = atan(uv.y, uv.x) / PI2;\n    // you can scale the angle by radius! neat trick.\n    phi += sin(rad * .2 * sin(iTime*2.5));    \n    vec2 polUV = vec2(phi, rad + sin(iTime * .5) );\n    \n    // failed experiments...\n    // polUV = vec2( phi, sin((7. + sin(iTime))*rad));\n    // polUV = vec2( 0.1*uv.x/(0.11+rad*(2. + sin(iTime))), 0.1*uv.y/(0.11+rad*(2. + sin(iTime))));\n    // polUV = vec2(uv.y + iTime * phi/rad, uv.x + iTime * phi/rad);\n\n    // zoom in on part of the texture so it isn't quite so noisy\n    polUV.y *= .15;\n    \n    // color shifted vignette\n    float vign = (.5-rad);\n    vec3 modColors = vec3(vign*2., vign*1.4, vign * 1.);\n        \n    // sample, add vignette, send to screen\n    fragColor = texture(iChannel0, polUV) + vec4(modColors, 1.);\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= vec2(.5, .5);\n    \n    uv.x *= iResolution.x/iResolution.y;\n    vec3 col = vec3(length(uv));\n    \n    fragColor = vec4(col, 1.);\n}","name":"Buffer A","description":"","type":"buffer"}]}