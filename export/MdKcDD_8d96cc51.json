{"ver":"0.1","info":{"id":"MdKcDD","date":"1522131820","viewed":328,"name":"dominoise","username":"LegoCylon","description":"This was kind of an accident created while working on another effect. As particles die, neighbors end up propagating to fill in each dead area and it sort of looks like dominoes being toppled. The borders between sections are also interesting to watch.","likes":12,"published":1,"flags":32,"usePreview":0,"tags":["noise","fluid","particles"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// This work is licensed under the Creative Commons Attribution 4.0 International License. \n// To view a copy of this license, visit http://creativecommons.org/licenses/by/4.0/ or\n// send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n\nvoid mainImage (out vec4 o, in vec2 i) {\n    o = vec4(texture(iChannel0, i / iResolution.xy).aaa, 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// This work is licensed under the Creative Commons Attribution 4.0 International License. \n// To view a copy of this license, visit http://creativecommons.org/licenses/by/4.0/ or\n// send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n\nconst float PI = 3.141593;\n\nvec2 p2c (float theta) {\n    return vec2(cos(theta), sin(theta));\n}\n\nbool near (vec2 p, vec2 s, vec2 e, float d) {\n    float r = (e.x - s.x) * (s.y - p.y) - (s.x - p.x) * (e.y - s.y);\n    vec2 l = e - s;\n    return (r * r) / dot(l, l) < (d * d);\n}\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// This work is licensed under the Creative Commons Attribution 4.0 International License. \n// To view a copy of this license, visit http://creativecommons.org/licenses/by/4.0/ or\n// send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n\n//  Maintain particles\n\nvoid mainImage (out vec4 o, in vec2 i) {\n    //  Normalize texture coordinates.\n    //\n    vec2 uv = i / iResolution.xy;\n\n    //  The particle state.\n    //\n    vec4 p = texture(iChannel0, uv);\n    \n    //  A noise value.\n    //\n    vec4 n = texture(iChannel1, vec2(uv.x, fract(uv.y + iTime)));\n\n    //  Replace the particle state when the emission time arrives.\n    //\n    if ((iResolution.y - i.y) < 5. && n.b * sin(iTime * i.x) > .925) {\n        o.r = n.r;\n        o.g = n.g * .7 + .3;\n        o.a = 1.;\n    }\n    //  Otherwise update the particle state by replacing dead particles in the direction of travel.\n    //\n    else {\n        float sx = 4.;\n        float sy = 6.;\n        for (float y = 0.; y < sy; ++y) {\n            for (float x = 0.; x < sx; ++x) {\n                vec2 s = i + vec2(x - sx * .5, y - sy * .5);\n                vec4 q = texture(iChannel0, s / iResolution.xy);\n                if (q.a > 0. && near(i, s, s + p2c(q.r * PI) * q.g, .25)) {\n                    p = q;\n                }\n            }\n        }\n\n        o = p;\n        o.r = fract(o.r + n.r);\n        o.g = fract(o.g + n.g);\n        o.a = max(0., o.a - .002);\n    }\n}","name":"Buf A","description":"","type":"buffer"}]}