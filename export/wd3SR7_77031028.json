{"ver":"0.1","info":{"id":"wd3SR7","date":"1571661831","viewed":761,"name":"meta-cap","username":"ankd","description":"I try to render metaball with webcam capture image.","likes":10,"published":1,"flags":2,"usePreview":0,"tags":["raymarching","metaball"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.14159265359;\nconst float HALF_PI = 0.5*PI;\nconst float TWO_PI = 2.0*PI;\n\nfloat hash(in float v) { return fract(sin(v)*43237.5324); }\nvec3 hash3(in float v) { return vec3(hash(v), hash(v*99.), hash(v*9999.)); }\n\nfloat sphere(in vec3 p, in float r) { return length(p)-r; }\nfloat opSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h);\n}\n\n#define BALL_NUM 10\nfloat map(in vec3 p) {\n  float res = 1e5;\n  for(int i=0;i<BALL_NUM;i++) {\n    float fi = float(i)+1.;\n    float r = 0.+1.5*hash(fi);\n    vec3 offset = 2.*sin(hash3(fi)*iTime);\n    res = opSmoothUnion(res, sphere(p-offset, r), 0.75);\n  }\n  return res;\n}\n\nvec3 normal(in vec3 p) {\n\tvec2 e = vec2(1., -1.)*1e-3;\n    return normalize(\n    \te.xyy * map(p+e.xyy)+\n    \te.yxy * map(p+e.yxy)+\n    \te.yyx * map(p+e.yyx)+\n    \te.xxx * map(p+e.xxx)\n    );\n}\n\nmat3 lookAt(in vec3 eye, in vec3 tar, in float r) {\n\tvec3 cz = normalize(tar - eye);\n    vec3 cx = normalize(cross(cz, vec3(sin(r), cos(r), 0.)));\n    vec3 cy = normalize(cross(cx, cz));\n    return mat3(cx, cy, cz);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 p = (fragCoord.xy*2. - iResolution.xy) / min(iResolution.x, iResolution.y);\n    vec3 color = vec3(0.);\n\n    vec3 ro = 5.*vec3(cos(iTime*1.1), 0., sin(iTime*1.1));\n    ro = vec3(0., 0., 5.);\n    vec3 rd = normalize(lookAt(ro, vec3(0.), 0.) * vec3(p,  2.));\n\n    \n    vec2 tmm = vec2(0., 10.);\n    float t = 0.;\n    for(int i=0;i<200;i++) {\n        float tmp = map(ro + rd*t);\n        if(tmp<0.001 || tmm.y<t) break;\n        t += tmp*0.7;\n    }\n  \n    if(tmm.y<t) {// background\n        color = vec3(0.);\n    } else {// object\n        vec3 pos = ro + rd*t;\n        vec3 nor = normal(pos);\n        vec3 ref = reflect(rd, nor);\n\n        vec2 texCoord = ref.xy*0.5+0.5;\n        color = texture(iChannel0, texCoord).rgb;\n        color += vec3(pow(1.-clamp(dot(-rd, nor), 0., 1.), 2.));\n    }\n    fragColor = vec4(color, 1.);\n}","name":"Image","description":"","type":"image"}]}