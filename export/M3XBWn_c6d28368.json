{"ver":"0.1","info":{"id":"M3XBWn","date":"1728248665","viewed":39,"name":"gapped bounding sdf optimization","username":"jt","description":"Bounding shapes can have holes and still work: If the distance of the interior shape to the exterior shape is more than the window-size (gap-size) in the exterior shape, then the interior sdf does not need to be evaluated outside the exterior sdf.\n","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["sdf","optimize","distance","optimization","polygon","window","euclidean","ngon","loopless","exact","bound","gap"],"hasliked":0,"parentid":"l3fBR8","parentname":"regular polygon distance"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/M3XBWn gapped bounding sdf optimization, 2024 jt\n// based on https://www.shadertoy.com/view/l3fBR8 regular polygon distance\n// and https://www.shadertoy.com/view/dldBWl orthogonal circle flower sdf\n// SDF exactness using https://www.shadertoy.com/view/DdX3WH Interior Distance Detect Errors\n\n// Windowed / gapped bounding sdf (exact euclidean).\n// Bounding shapes can have holes and still work:\n// If the distance of the interior shape to the gaps in the exterior shape\n// is more than the size of the windows / gaps in the exterior shape,\n// then the interior sdf does not need to be evaluated outside the exterior sdf.\n// (Possible application: use buildings with (small) windows as bounding volumes).\n\n// Method:\n// An inside/outside check is used to toggle calculation of the interior structure.\n// Then a corresponding boundary SDF is evaluated to hide the discontinuity.\n// (The boundary can contain holes but still have the intended effect.)\n\n// It can be seen that the interior sdf is not evaluated outside:\n// when using a small bounding polygon the interior shape is cut.\n\n// To see the errors when the gaps get larger than the distance to them,\n// try increasing the gap parameter of the function regular_polygon_windowed.\n\n// tags: sdf, optimize, distance, optimization, polygon, window, euclidean, ngon, loopless, exact, bound, gap\n\n// The MIT License\n// Copyright (c) 2024 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n#define pi 3.1415926\n#define tau (pi+pi)\n\nfloat line(vec2 p, vec2 a, vec2 b) // https://iquilezles.org/articles/distfunctions2d/\n{\n    vec2 pa = p - a, ba = b - a;\n    float h = clamp(dot(pa,ba)/dot(ba,ba), 0.0, 1.0);\n    return length(pa - ba*h);\n}\n\nfloat ortho_circle_flower_sdf(vec2 p) // https://www.shadertoy.com/view/dldBWl orthogonal circle flower sdf, 2023 jt\n{\n    float n = 11.0; // must be odd integer\n\n    float slice = pi/n;\n\n    p.x = abs(p.x); // mirror horizontally\n    float r = (p.y*p.y+2.0*p.y+p.x*p.x+1.0)/(2.0*p.x); // calculate radius of circular arc leaf passing through this point\n\n    // equidistant circle segment endpoints on unit circle\n    float r0 = tan(floor(atan(r)/slice)*slice); // to angle then quantize then to length\n    float r1 = tan( ceil(atan(r)/slice)*slice); // to angle then quantize then to length\n\n    // circle center\n    vec2 c0 = vec2(r0,-1); // lower leaf\n    vec2 c1 = vec2(r1,-1); // upper leaf\n\n    // endpoints\n    float mu = atan(p.x,p.y);\n    mu = (floor(mu/slice/2.0)+0.5)*slice*2.0;\n    vec2 c = vec2(sin(mu),cos(mu));\n\n    return\n        //length(p) < 1.0; // approximate\n        dot(p, c) < 1.0 // thanks to tdhooper for fixing remaining discontinuities by changing length(p) < 1.0 to dot(p, c) < 1.0 (turns circle into polygon)\n        ?\n        min(abs(length(p-c0)-r0),abs(length(p-c1)-r1)) // circular arc leafs\n        :\n        length(p-c); // leaf endpoints\n}\n\nbool inside_regular_polygon(int n, vec2 p) // https://www.shadertoy.com/view/l3fBR8 regular polygon distance (jt)\n{\n    float slice = tau/float(n);\n    float mu = (floor(atan(p.x,p.y)/slice)+0.5)*slice;\n    vec2 q = vec2(sin(mu),cos(mu));\n    float r = cos(tau / (2.0 * float(n)));\n    return dot(p, q) < r;\n}\n\nfloat regular_polygon_windowed(int n, vec2 p, float gap) // https://www.shadertoy.com/view/l3fBR8 regular polygon distance (jt)\n{\n    float slice = tau/float(n);\n\n    float mu = atan(p.x,p.y);\n    float k = floor(mu/slice);\n    float mu0 = (k+0.0)*slice;\n    float mu1 = (k+1.0)*slice;\n    vec2 q0 = vec2(sin(mu0),cos(mu0));\n    vec2 q1 = vec2(sin(mu1),cos(mu1));\n    //if(!inside_regular_polygon(n,p)) return 0.0;\n    return line(p,q0-(q0-q1)*gap,q1+(q0-q1)*gap);\n}\n\nfloat map(vec2 p)\n{\n    int n = int(mix(3.0, 25.0, 0.5+0.5*cos(2.0*pi*iTime/10.0))); // animate number of leafs\n    float gap = 0.2; // NOTE: if gaps in enclosing polygon too large, sdf will break\n\n    // NOTE: try setting boundary = 10000.0 or similar to see the hidden discontinuity.\n    float boundary = regular_polygon_windowed(n, p, gap); // protects against discontinuity\n    if(!inside_regular_polygon(n,p)) return boundary; // optimization: no need to calculate interior form outside of polygon if gaps sufficiently small\n    return min(boundary,ortho_circle_flower_sdf(p*1.5)/1.5);\n}\n\n#define EPSILON 0.001\n\n// part of sdf error detection (jt/spalmer)\nvec2 gradient(vec2 p) // NOT normalized so we can use it's length to detect errors in the SDF.\n{\n    vec2 h = vec2(EPSILON,0);\n    return (vec2(map(p+h.xy) - map(p-h.xy),\n                 map(p+h.yx) - map(p-h.yx)))/EPSILON/2.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // normalized pixel coordinates\n    vec2 p = (fragCoord*2.0-iResolution.xy)/iResolution.y;\n\n    float d = map(p);\n\n    // iq's coloring\n    vec3 col = (d<0.0) ? vec3(0.6,0.8,1.0) : vec3(0.9,0.6,0.3);\n    col *= 1.0 - exp(-9.0*abs(d));\n    col *= 1.0 + 0.2*cos(128.0*abs(d));\n    col = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.015,abs(d)) );\n    // iq's mouse distance visualization\n    if( iMouse.z>0.001 )\n    {\n        vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n        d = map(m);\n        col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, abs(length(p-m)-abs(d))-0.0025));\n        col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, length(p-m)-0.015));\n    }\n\n    // sdf error detection (jt/spalmer)\n    {\n        // Jump the distance given by the SDF at the current position\n        // along the gradient given by the SDF at the current position\n        // (direction to the nearest surface) and evaluate the SDF there.\n        // Because the SDF is supposed to describe the minimal distance to the surface,\n        // the result should be (close to) zero. (translation from math to words: jt)\n        float error = map(p - gradient(p) * map(p)); // SDF error detection suggested to me by spalmer - thanks!\n        //col += smoothstep(0.0,sqrt(EPSILON), abs(error)) * (cos(iTime*2.0*pi)*0.5+0.5); // detect both interior and exterior errors (NOTE: false alarms on some shapes)\n        col.r += smoothstep(0.0,/*sqrt*/(EPSILON), max(0.0,+error)) * (cos(iTime*2.0*pi)*0.5+0.5); // detect both interior and exterior errors (NOTE: false alarms on some shapes)\n        col.g += smoothstep(0.0,/*sqrt*/(EPSILON), max(0.0,-error)) * (cos(iTime*2.0*pi)*0.5+0.5); // detect both interior and exterior errors (NOTE: false alarms on some shapes)\n    }\n\n    // output\n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}