{"ver":"0.1","info":{"id":"WtScRc","date":"1595009024","viewed":135,"name":"Line Integral Sinusoid 2D","username":"spalmer","description":"a simple linear wave summed along a range by calculus.\ncurrently graphing the total integrated along mouse stroke","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["vector","sinusoid","sinewave","calculus"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Deconstructing blackle's very nifty Analytic Line Integral Fog\n// from https://shadertoy.com/view/3lByRK\n// extending 1D toy https://shadertoy.com/view/3lScz3\n// see also 3D toy https://shadertoy.com/view/WlByzc\n\nconst float pi = acos(-1.);\n\n// the sinusoidal function we're working with, F(x) := sin(x)^2; in Maxima notation.\nfloat F(float x)\n{\n    float s = sin(x);\n\treturn s*s; // s^2\n}\n\nfloat F(vec2 p)\n{\n    //return F(p.x) + F(p.y); // sum is good\n    return F(p.x) * F(p.y) * 2.; // but in 3D the product is far more distinct FIXME scale?\n}\n\n// Maxima does integrate(F(x), x, a, b); producing (+2*b-2*a-sin(2*b)+sin(2*a))/4\n    // HACK doesn't total correctly if b > a without abs\n    // could instead swap the inputs in such case or use\n    // the alternative negated expression somehow, but this works fine.\n// compute line integral of F(x) with x ranging between a and b\nfloat A(float a, float b)\n{\n    return abs(.5*(b - a) + .25*(sin(2.*a) - sin(2.*b)));\n}\n\nfloat A(vec2 a, vec2 b, vec2 dir)\n{\n    //return .5*(A(a.x, b.x) + A(a.y, b.y)); // HACK again, idk what I'm doing! :)\n    //return .25*(A(a.x, b.x) * A(a.y, b.y)); // HACK again, products instead\n    return dot(dir, vec2(A(a.x, b.x), A(a.y, b.y))); // separating influence by direction\n}\n\n// wrapper\n#define lineIntegral A\n\n// centered segment from -d at 0 to d at 1 closest index to q\nfloat iseg(vec2 q, vec2 d)\n{\n    return clamp(dot(q, d) / dot(d, d), 0., 1.);\n}\n\n// squared distance from q to segment ab\nfloat dseg(vec2 q, vec2 a, vec2 b)\n{\n    q -= a; b -= a;\n    float si = iseg(q, b);\n    q -= b * si;\n    return sqrt(dot(q, q));\n}\n\nvoid mainImage(out vec4 o, vec2 p)\n{\n\tfloat t = iTime;\n\tvec2 R = iResolution.xy\n    , mc = iMouse.xy, mo = iMouse.zw\n    , ma = mc, mb = abs(mo)\n    , uv = p/R, q = (2.*p - R) / R.y;\n    // attract mode should wiggle or something TODO\n    if (dot(mo, mo) < 2.) ma = mb = .5 * R;\n    float s = 1./32.;\n\tvec2 x = s * p\n    , a = s * ma, b = s * mb\n    ;\n    vec2 dir = normalize(abs(mb - ma));\n    float fx = F(x);\n\tfx /= 2.; // adding two of them for 2D, so must scale down even more.        \n\tvec3 c = vec3(clamp(fx, 0., 1.));\n\t// calc line integral of F(x) between mouse down and current drag points\n\tfloat ds = dseg(p, ma, mb)-.5\n    , li = lineIntegral(a, b, dir);\n    c = mix(c, vec3(0,0,1), clamp(.5 - .5*ds, 0., 1.));\n    // draw the line we're integrating along\n\t//if (p.x >= min(ma.x, mb.x) && p.x <= max(ma.x, mb.x))\n    if (uv.x < 1./20.)\n    {\n        // integral gets large fast and must fit graph into window.\n        const float so = .1; //1./10.; //\n        li *= so;\n        //if (uv.y >= min(ma.y, mb.y) && uv.y <= mix(min(ma.y, mb.y), max(ma.y, mb.y), li)) // FIXME smoothstep AA; don't care rn\n        if (uv.y < li)\n\t    \tc = vec3(0,1,0);\n        // graphing a box on the left showing the total integral under the cursor range.\n        // so you can watch it increase as you move mouse around\n    }\n    // to sRGB gamut for display\n\to = vec4(pow(c, vec3(.4545)), 1);\n}\n\n// https://en.wikipedia.org/wiki/Line_integral\n// \"integral where the function to be integrated is evaluated along a curve.\"\n// according to Kwong-Tin Tang citation.\n// Maxima (nee Macsyma) is invaluable for my effort.\n// http://maxima.sourceforge.net\n","name":"Image","description":"","type":"image"}]}