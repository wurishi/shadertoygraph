{"ver":"0.1","info":{"id":"tsXyDf","date":"1585715265","viewed":91,"name":"Rainbow Meatballs","username":"EmmaChase","description":"Experimenting with noise","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["noise","raymarcher"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_MARCH_STEPS 120\n#define CLIP_DIST 1000.0\n#define EPSILON 0.01\n\nfloat mod289(float x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 mod289(vec4 x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 perm(vec4 x){return mod289(((x * 34.0) + 1.0) * x);}\n\nfloat noise(vec3 p){\n    vec3 a = floor(p);\n    vec3 d = p - a;\n    d = d * d * (3.0 - 2.0 * d);\n\n    vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);\n    vec4 k1 = perm(b.xyxy);\n    vec4 k2 = perm(k1.xyxy + b.zzww);\n\n    vec4 c = k2 + a.zzzz;\n    vec4 k3 = perm(c);\n    vec4 k4 = perm(c + 1.0);\n\n    vec4 o1 = fract(k3 * (1.0 / 41.0));\n    vec4 o2 = fract(k4 * (1.0 / 41.0));\n\n    vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);\n    vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);\n\n    return o4.y * d.y + o4.x * (1.0 - d.y);\n}\n\nfloat texNoise(vec3 p) {\n    return texture(iChannel0, vec2(p.xy)).r;\n}\n\n\nfloat sdBall(vec3 pos, float radius)\n{\n    return 0.006*texNoise(1.5*pos) + 0.04*noise(5.*pos) + length(pos) - radius;\n}\n\nfloat sceneSDF(vec3 pos) {\n    pos = mod(pos, 10.0) - 5.0;\n    \n    float temp;\n    float dist = CLIP_DIST;\n\n    dist = (temp = sdBall(pos - vec3(0.0, 0.0, 5.0), 1.0)) < dist ? temp : dist;\n\n    return dist;\n}\n\nfloat raymarch(vec3 ro, vec3 rd, float mint, float maxt) {\n    float depth = mint;\n    for(int i=0;i<MAX_MARCH_STEPS;i++)  {\n        float dist = sceneSDF(ro+rd*depth);\n        if (dist < EPSILON) return depth;\n\n        depth += dist;\n        if (depth > maxt) break;\n    }\n\n    return maxt;\n}\n\nvec3 calcNormal(vec3 pos) {\n    const vec2 eps = vec2(0.001, 0.0);\n\n    vec3 nor = vec3(\n        sceneSDF(pos + eps.xyy) - sceneSDF(pos - eps.xyy),\n        sceneSDF(pos + eps.yxy) - sceneSDF(pos - eps.yxy),\n        sceneSDF(pos + eps.yyx) - sceneSDF(pos - eps.yyx));\n    return normalize(nor);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 aspect = vec2(1.0, iResolution.y / iResolution.x);\n    uv = 2.0 * uv - 1.0;\n    uv *= aspect;\n\n    vec3 col = vec3(0.0);\n\n    vec3 ro = vec3(2.0*cos(iTime), 5.0, 2.0*sin(iTime));\n\n    const float FOV = 90.0;\n    const float RDF = 1.0 / tan(radians(FOV / 2.0));\n    vec3 rd = normalize(vec3(uv, RDF));\n\n    float dist = raymarch(ro, rd, 0.01, CLIP_DIST);\n\n    if (dist < CLIP_DIST) {\n        vec3 hitPos = ro + rd*dist;\n\n        vec3 normal = calcNormal(hitPos);\n\n        const vec3 lightPosition = vec3(-2.0, 2.0, 1.0);\n        float lightness = max(0.0, dot(-normalize(hitPos - lightPosition), normal));\n\n        col = vec3(mod(hitPos / 30., 1.));\n        col = smoothstep(0., 1., col); // Brightens up the colors\n        col *= 0.2 + 0.8*lightness;\n        col *= mix(1.0, 0.0, length(hitPos - lightPosition) / 250.0);\n    }\n\n    col = pow (col, vec3 (1.0 / 2.2)); // Gamma correction\n    fragColor = vec4(col, 1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}