{"ver":"0.1","info":{"id":"dtcGW7","date":"1682525806","viewed":74,"name":"Connect points with smoothstepV2","username":"Cesium_137","description":"I changed some things from the previous version which might make the problem easier to solve. Left and right to select different points, up and down to change them. It's supposed to act like this: https://www.desmos.com/calculator/ih4w4frcl8","likes":1,"published":1,"flags":48,"usePreview":0,"tags":["multipass"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int numPoints = 5;\nfloat[] x1 = float[] (1./6.,1./3.,1./2.,2./3.,5./6.,1.0);\nfloat thickness = 1.0;\n\n//smoothstep bc using the smoothstep( doesn't work for some reason\nfloat ss(in float x, in float xmin, in float xmax){\n    float r = clamp((x-xmin)/(xmax-xmin),0.0,1.0);\n    return r * r * (3.0 - 2.0 * r);\n}\n\n//equation\nfloat f(in float x, in float num)\n{\n\tfloat[numPoints + 1] y = float[](1.0,texelFetch(iChannel0, ivec2(1, 0), 0).r,texelFetch(iChannel0, ivec2(2, 0), 0).r,texelFetch(iChannel0, ivec2(3, 0), 0).r,texelFetch(iChannel0, ivec2(4, 0), 0).r,texelFetch(iChannel0, ivec2(5, 0), 0).r);\n    float fx = 0.;\n    float stride = 3.0;\n\tif (num == 1.)\t\n        fx = (y[1] * ss(x,0.0,x1[0])) + ((y[2]-y[1])*ss(x,x1[0],x1[1])) + ((y[3]-y[2])*ss(x,x1[1],x1[2])) + ((y[4]-y[3])*ss(x,x1[2],x1[3])) + ((y[5]-y[4])*ss(x,x1[3],x1[4])) + (-y[5]*ss(x,x1[4],1.0));\n\n\treturn fx;\n}\n\n//distance estimator\nfloat de(const in vec2 p, const in float num)\n{\n    float v = f(p.x, num)-p.y;\n\tfloat h = .5;\n    float g = 1.5 + pow(f(p.x+h, num) - f(p.x-h, num),2.);\n    float de = abs(v)/sqrt(g);\n    return float(smoothstep( 0., .13, de ));\n}\n\nfloat draw(const in vec2 p, const in float num, const in float zoom)\n{\n\tfloat rz = de(p, num);\n\trz *= (1./thickness)/sqrt(zoom/iResolution.y);\n\trz = 1.-clamp(rz, 0., 1.);\n\treturn rz;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float[numPoints + 1] y = float[](0.0,texelFetch(iChannel0, ivec2(1, 0), 0).r, texelFetch(iChannel0, ivec2(2, 0), 0).r, texelFetch(iChannel0, ivec2(3, 0), 0).r, texelFetch(iChannel0, ivec2(4, 0), 0).r, texelFetch(iChannel0, ivec2(5, 0), 0).r);\n    int selectedPoint = int(texelFetch(iChannel0,ivec2(0),0).r);\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 mouse = iMouse.xy / iResolution.xy;\n    y[selectedPoint] = texelFetch(iChannel0,ivec2(selectedPoint, 0), 0).r;\n    fragColor = vec4(0);\n    for(int i = 1;i <= numPoints;++i){\n        if((uv.x < (float(i) / float(numPoints + 1) + 0.01) && (uv.x > (float(i) / float(numPoints + 1)) - 0.01)) && (uv.y < y[i] + 0.01) && (uv.y > y[i] - 0.01)){\n            fragColor = vec4(vec3(1),0);\n            if(i == selectedPoint)\n                fragColor = vec4(0.0,1.0,0.0,1.0);\n        }\n    }\n    fragColor += draw(uv,1.0,0.01);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const int KEY_LEFT = 37;\nconst int KEY_RIGHT = 39;\nconst int KEY_UP = 38;\nconst int KEY_DOWN = 40;\n// Keyboard inputs\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float outData = 0.0;\n    switch(int(fragCoord.x)) {\n        case 0:\n                outData = texelFetch(iChannel0, ivec2(0), 0).r +\n                0.1 * texelFetch(iChannel1,ivec2(KEY_RIGHT,0),0).r-\n                0.1 * texelFetch(iChannel1,ivec2(KEY_LEFT,0),0).r;\n                outData = clamp(outData, 1.0, 5.0);\n        \tbreak;\n        case 1:\n                if(int(texelFetch(iChannel0, ivec2(0), 0).r) == 1){\n                    outData = texelFetch(iChannel0, ivec2(1, 0), 0).r +\n                    0.01 * texelFetch(iChannel1, ivec2(KEY_UP, 0), 0).r -\n                    0.01 * texelFetch(iChannel1, ivec2(KEY_DOWN, 0), 0).r;\n                    outData = clamp(outData, 0.0,1.0);\n                }\n            break;\n        case 2:\n                if(int(texelFetch(iChannel0, ivec2(0), 0).r) == 2){\n                    outData = texelFetch(iChannel0, ivec2(2, 0), 0).r +\n                    0.01 * texelFetch(iChannel1, ivec2(KEY_UP, 0), 0).r -\n                    0.01 * texelFetch(iChannel1, ivec2(KEY_DOWN, 0), 0).r;\n                    outData = clamp(outData, 0.0,1.0);\n                }\n            break;\n        case 3:\n                if(int(texelFetch(iChannel0, ivec2(0), 0).r) == 3){\n                    outData = texelFetch(iChannel0, ivec2(3, 0), 0).r +\n                    0.01 * texelFetch(iChannel1, ivec2(KEY_UP, 0), 0).r -\n                    0.01 * texelFetch(iChannel1, ivec2(KEY_DOWN, 0), 0).r;\n                    outData = clamp(outData, 0.0,1.0);\n                }\n            break;\n        case 4:\n                if(int(texelFetch(iChannel0, ivec2(0), 0).r) == 4){\n                    outData = texelFetch(iChannel0, ivec2(4, 0), 0).r +\n                    0.01 * texelFetch(iChannel1, ivec2(KEY_UP, 0), 0).r -\n                    0.01 * texelFetch(iChannel1, ivec2(KEY_DOWN, 0), 0).r;\n                    outData = clamp(outData, 0.0,1.0);\n                }\n            break;\n        case 5:\n                if(int(texelFetch(iChannel0, ivec2(0), 0).r) == 5){\n                    outData = texelFetch(iChannel0, ivec2(5, 0), 0).r +\n                    0.01 * texelFetch(iChannel1, ivec2(KEY_UP, 0), 0).r -\n                    0.01 * texelFetch(iChannel1, ivec2(KEY_DOWN, 0), 0).r;\n                    outData = clamp(outData, 0.0,1.0);\n                }\n            break;\n    }\n    fragColor = vec4(outData,0.0,0.0,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}