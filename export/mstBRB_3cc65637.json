{"ver":"0.1","info":{"id":"mstBRB","date":"1697336153","viewed":90,"name":"random offset squares","username":"jt","description":"2d DDA rendering randomly offseet squares.\nJust an interesting looking step towards another shader.","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["3d","raytracing","raycasting","voxel","random","square","dda","textured","offset","subobjects"],"hasliked":0,"parentid":"7stXzn","parentname":"Voxel Raycast with Sub-Objects"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/mstBRB random offset squares, 2023 by jt\n// based on https://www.shadertoy.com/view/7stXzn Voxel Raycast with Sub-Objects\n// based on https://www.shadertoy.com/view/7dK3D3 Branchless Voxel Raycasting Tex\n\n// DDA originally inspired by https://www.shadertoy.com/view/4dX3zl Branchless Voxel Raycasting by fb39ca4\n// and tutorial http://lodev.org/cgtutor/raycasting.html\n// wall-distance & normals & texturing & shadows & ray-tracing subobjects addon by jt\n\n// 2d DDA rendering randomly offseet squares.\n// Just an interesting looking step towards another shader.\n\n// tags: 3d, raytracing, raycasting, voxel, random, square, dda, textured, offset, subobjects\n\n// The MIT License\n// Copyright (c) 2023 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n#define pi 3.1415926\n\nmat3 yaw_pitch_roll(float yaw, float pitch, float roll)\n{\n    mat3 R = mat3(vec3(cos(yaw), sin(yaw), 0.0), vec3(-sin(yaw), cos(yaw), 0.0), vec3(0.0, 0.0, 1.0));\n    mat3 S = mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, cos(pitch), sin(pitch)), vec3(0.0, -sin(pitch), cos(pitch)));\n    mat3 T = mat3(vec3(cos(roll), 0.0, sin(roll)), vec3(0.0, 1.0, 0.0), vec3(-sin(roll), 0.0, cos(roll)));\n\n    return R * S * T;\n}\n/*\n// https://www.shadertoy.com/view/WttXWX \"Best\" Integer Hash by FabriceNeyret2\n// implementing Chris Wellons https://nullprogram.com/blog/2018/07/31/\nuint triple32(uint x)\n{\n    x ^= x >> 17;\n    x *= 0xed5ad4bbU;\n    x ^= x >> 11;\n    x *= 0xac4c1b51U;\n    x ^= x >> 15;\n    x *= 0x31848babU;\n    x ^= x >> 14;\n    return x;\n}\n\n//uint uhash(ivec3 v)\n//{\n//    return triple32(uint(v.x) + triple32(uint(v.y) + triple32(uint(v.z))));\n//}\n\nuint uhash(ivec3 f) // faster prng suggested by Fabrice\n{\n    uvec3  x = uvec3(f);\n    uint   k = 1103515245U;\n           x = ((x>>8U)^x.yzx)*k;\n           x = ((x>>8U)^x.yzx)*k;\n    return uint(((x>>8U)^x.yzx)*k);\n}\n\nfloat hash(ivec3 f)\n{\n    return float(uhash(f)) / float(0xffffffffU);\n}\n\nfloat hash(uint x)\n{\n    return float(triple32(x)) / float(0xffffffffU);\n}\n\nfloat hash(uvec2 v)\n{\n    return hash(v.x + triple32(v.y));\n}\n\nfloat hash(ivec2 v)\n{\n    return hash(uvec2(v));\n}\n*/\n\n// https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\nfloat hash(ivec2 p)\n{\n\tvec3 p3  = fract(vec2(p).xyx * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n#define DIST_MAX 1000.0\n\nfloat checker(vec3 p)\n{\n    // NOTE: the int-cast variant appears to introduce some kind of noise\n    //ivec3 q = ivec3(floor(p*2.0));\n    //return float((q.x^q.y^q.z)&1);\n    // float variant seems to be more robust\n    p = sin(p*2.0*pi);\n    //return step(0.0, p.x*p.y*p.z);\n    return step(0.0, p.x*p.y);\n}\n\n#define MAX_RAY_STEPS 64\n\n// NOTE: Apparently sign fails on some systems! Thanks to spalmer for debugging & fixing this!!!\nvec2 sgn(vec2 v) // WORKAROUND FOR COMPILER ERROR on some systems\n{\n    return step(vec2(0), v) * 2. - 1.;\n    //return vec2(greaterThanEqual(v, vec2(0))) * 2.0 - 1.0;\n}\n\n// returns normal & distance\nvec4 traverse(vec3 ray_pos, vec3 ray_dir)\n{\n    // dda initialization (four lines) adapted from\n    // https://www.shadertoy.com/view/4dX3zl Branchless Voxel Raycasting by fb39ca4\n    // implementing https://lodev.org/cgtutor/raycasting.html\n    ivec2 tile_pos = ivec2(floor(ray_pos.xy)); // round down position to get tile position\n    vec2 delta_dist = 1.0 / abs(ray_dir.xy); // reciprocal absolute ray direction\n    ivec2 ray_step = ivec2(sgn(ray_dir.xy)); // sign of ray direction\n    vec2 side_dist = (sgn(ray_dir.xy) * (vec2(tile_pos) - ray_pos.xy) + (sgn(ray_dir.xy) * 0.5) + 0.5) * delta_dist; // initial distances to nearest walls by dimension\n    bvec2 nearest = bvec2(0);\n\n    for(int i = 0; i < MAX_RAY_STEPS; i++)\n    {\n        // dda core (three lines) adapted from\n        // https://www.shadertoy.com/view/4dX3zl Branchless Voxel Raycasting by fb39ca4\n        // implementing https://lodev.org/cgtutor/raycasting.html\n        bvec2 nearest_next = lessThanEqual(side_dist.xy, side_dist.yx); // component is true if nearest wall in that dimension\n        vec2 side_dist_next = side_dist + vec2(nearest_next) * delta_dist; // sign of ray direction\n        ivec2 tile_pos_next = tile_pos + ivec2(nearest_next) * ray_step; // step to next vpxel in direction of nearest wall\n\n        {\n            float h = mix(0.2, 0.8, hash(tile_pos)) - 1.0;\n\n            float d = (h-ray_pos.z)/ray_dir.z;\n\n            float enter = length(vec2(nearest) * (side_dist - delta_dist)); // distance to near wall\n            float leave = length(vec2(nearest_next) * (side_dist_next - delta_dist)); // distance to far wall\n\n            if(d > enter && d < leave)\n                return vec4(vec3(0,0,1), d);\n        }\n\n        nearest = nearest_next;\n        side_dist = side_dist_next;\n        tile_pos = tile_pos_next;\n    }\n    \n    return vec4(-ray_dir, DIST_MAX); // sky\n}\n\nvoid mainImage(out vec4 o, in vec2 I)\n{\n    bool demo = all(lessThan(iMouse.xy, vec2(10.0)));\n    vec2 R = iResolution.xy;\n    I = (2.0 * I - R) / R.y; // concise pixel-position mapping thanks to Fabrice\n    float yaw = 2.0 * pi * float(iMouse.x) / float(R.x);\n    //float pitch = pi - pi * float(iMouse.y) / float(R.y);\n    float pitch = pi - pi / 2.0 * float(iMouse.y) / float(R.y);\n    //float pitch = -pi*1.0 - 0.5 * pi * float(iMouse.y) / float(R.y);\n    yaw = !demo ? yaw : 2.0 * pi * fract(iTime * 0.01);\n    pitch = !demo ? pitch : 1.0 * pi/2.0;\n\n    vec3 ray_pos = vec3(0.0, 0.0, -20.0);\n    vec3 ray_dir = vec3(I.x, I.y, 2.0); // NOTE: un-normalized direction appears to work fine here!\n    ray_dir = normalize(ray_dir); // normalize to facilitate later lighting computations\n\n    mat3 M = yaw_pitch_roll(yaw, pitch, 0.0);\n\n    ray_pos = M * ray_pos;\n    ray_dir = M * ray_dir;\n    ray_pos.z += 1.0;\n\n    vec3 color = vec3(1.0);\n    vec4 result = traverse(ray_pos, ray_dir);\n    if(result.w >= 0.0 && result.w < DIST_MAX)\n    {\n        vec3 normal = result.xyz;\n        float dist = result.w;\n\n        vec3 dst = ray_pos + ray_dir * dist;\n        //color *= texture(iChannel0, dst).xyz;\n        color *= vec3(0.5 + 0.5 * checker(dst));\n        //color *= 0.5 + 0.5 * normal; // debug normals\n\n        //vec3 light_dir = normalize(vec3(1, 2, 3));\n        vec3 light_dir = normalize(vec3(cos(iTime/5.0), sin(iTime/5.0), 1));\n        float diffuse = max(0.0, dot(light_dir, normal));\n        float lit = diffuse > 0.0 ? traverse(dst + normal * 0.001, light_dir).w < DIST_MAX ? 0.0 : 1.0 : 0.0;\n        float specular = pow(max(0.0, dot(normal, normalize(-ray_dir + light_dir))), 50.0);\n        vec3 ambient = vec3(0.1);\n\n        color *= ambient + (2.0 * diffuse + 2.0*specular) * lit;\n\n        //vec3 fog_color = vec3(0.25, 0.4, 0.5); // fog\n        vec3 fog_color = vec3(0); // darken with distance\n        color = mix(fog_color, color, exp(-pow(dist / 20.0, 2.0))); // fog for depth impression & to suppress flickering\n    }\n    else\n    {\n        color = vec3(0);\n    }\n\n    color = tanh(color); // roll-off / soft-clamp overly bright colors\n    o = vec4(sqrt(color), 1);\n}\n","name":"Image","description":"","type":"image"}]}