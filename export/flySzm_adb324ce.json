{"ver":"0.1","info":{"id":"flySzm","date":"1640343838","viewed":207,"name":"Letters physical properties","username":"kastorp","description":"using Fabrice mipmap to derive physics properties of letter SDFs\nyellow: mass\nblue: moment of inertia\nred: center of mass\ngreen: closest point","likes":4,"published":1,"flags":16,"usePreview":0,"tags":["simulation","physics","gpmipmap"],"hasliked":0,"parentid":"3tGfzW","parentname":"iceberger 2 - pow2(via cubemap)"},"renderpass":[{"inputs":[{"id":"4dX3Rr","filepath":"/media/a//media/previz/cubemap00.png","previewfilepath":"/media/ap//media/previz/cubemap00.png","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":2,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//mass & momentum by Kastorp\n// forked from https://www.shadertoy.com/view/3tGfzW\nvoid mainImage( out vec4 O, vec2 U )\n{\n    U = 1024.*( .56* ( U - L*R.xy ) / R.y + L );\n    O = T(U).xxxx ; //  letter\n    O = mix(O, vec4(1,0,0,0), D( G.xy, 5.) ); //center of mass\n    \n       \n    vec2 p =vec2(512.)+vec2(cos(iTime),sin(iTime))*240.;\n    int id=80  +(iFrame/20 )%26;\n    vec2 cp = vec2(ivec2(id%16, 15-id/16));    \n    vec4 d = textureLod(iChannel2, (p/512. + cp + 0.5)/16., 0.) ;\n    O = mix(O, vec4(1,0,1,0), D(p,5.) ); //external point\n    vec2 grad=vec2(-1,1) *(d.yz-vec2(.5))*2.;\n    float dst=(d.w-.5) *512.;\n    O = mix(O, vec4(0,1,0,0), D(p+ dst*grad,5.) );  //closest point\n        \n    \n    if(U.y-512.>0. && U.y-512.< G.z*5000. && abs(U.x-750.)<20.) O=vec4(1,1,0,0); //mass\n    if(U.y-512.>0. && U.y-512.< G.w && abs(U.x-850.)<20.) O=vec4(0,0,1,0); //moment of inertia\n} ","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define L              vec2(.5,.7)\n#define SZ              vec2(1024)\n#define R iResolution.xy\n#define T(U)           texture( iChannel0, vec3( 2.*(U)/SZ -1., 1 ).xzy )\n#define M              textureLod(iChannel0,vec3(0, 1, 0) , 20.)  // total mass\n#define G              textureLod(iChannel0,vec3(0,-1, 0) , 20.)  // center of mass \n#define D(C,r)         smoothstep( 1.5, 0., length(C-U) - r )     // antialiased dist\n#define keyDown(a) ( texelFetch(iChannel3,ivec2(a,0),0).x > 0.)\n#define keyToggle(a) ( texelFetch(iChannel3,ivec2(a,0),2).x > 0.)\n#define ZM 1024.\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dX3Rr","filepath":"/media/a//media/previz/cubemap00.png","previewfilepath":"/media/ap//media/previz/cubemap00.png","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dX3Rr","channel":0}],"code":"void mainCubemap( out vec4 O, vec2 U, vec3 o, vec3 D )\n{\n    if (D.y > max(abs(D.x),abs(D.z))) {       // --- side 1 -------------\n         int id=80  +(iFrame/20 )%26;\n        vec2 cp = vec2(ivec2(id%16, 15-id/16));\n        vec2 uv = (U/512. + cp + 0.5)/16.;  \n        float dst = textureLod(iChannel2, uv, 0.).w - .5;\n        //if((iFrame%300)<5 ||keyDown(32.)) \n        O.x= min(step(dst,0.),D(512.,256.));\n        //else O = T( U); \n    }\n    else if (-D.y > max(abs(D.x),abs(D.z))) { // --- side 2 -------------\n        \n        vec4 D = T(U) / M;  // density field\n        O.xy = D.x * U;     //center of mass\n        O.z=M.x;            //mass\n        O.w=dot((G.xy-U),(G.xy-U))* T(U).x *.5 ;  //inertia\n    }   \n}\n\n\n\n\n","name":"Cube A","description":"","type":"cubemap"}]}