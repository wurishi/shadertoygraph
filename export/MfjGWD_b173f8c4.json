{"ver":"0.1","info":{"id":"MfjGWD","date":"1704326940","viewed":49,"name":"I tried clouds","username":"onetap","description":"Clouds","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["clouds"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdSphere(vec3 p, float r){\n    return length(p) - r;\n}\n\n\nfloat rand(vec3 p){\n    return fract(sin(dot(p, vec3(12.345, 67.89, 412.12))) * 42123.45) * 2.0 - 1.0;\n}\n\nfloat valueNoise(vec3 p) \n{\n    vec3 u = floor(p);\n    vec3 v = fract(p);\n    vec3 s = smoothstep(0.0, 1.0, v);\n    \n    float a = rand(u);\n    float b = rand(u + vec3(1.0, 0.0, 0.0));\n    float c = rand(u + vec3(0.0, 1.0, 0.0));\n    float d = rand(u + vec3(1.0, 1.0, 0.0));\n    float e = rand(u + vec3(0.0, 0.0, 1.0));\n    float f = rand(u + vec3(1.0, 0.0, 1.0));\n    float g = rand(u + vec3(0.0, 1.0, 1.0));\n    float h = rand(u + vec3(1.0, 1.0, 1.0));\n    \n    return mix(mix(mix(a, b, s.x), mix(c, d, s.x), s.y),\n               mix(mix(e, f, s.x), mix(g, h, s.x), s.y),\n               s.z);\n}\n\nfloat fractionalBrownianMotion(vec3 p){\n\n    vec3 q = p;\n    int numOctaves = 8;\n    float weight = 0.5;\n    float ret = 0.0;\n    \n    for(int i = 0; i < numOctaves; i++){\n        ret += weight * valueNoise(q);\n        q *= 2.0;\n        weight *= 0.5;\n        \n    }\n    \n    return clamp(ret - p.y,0.0,1.0);\n}\n\nfloat map(vec3 p){\n    vec3 spherePos = vec3(0,0,0);\n    float sphere = sdSphere(p - spherePos,1.0);\n    return sphere;\n}\n\nvec3 volumetricRaymarch(vec3 ro, vec3 rd){\n    float depth = 0.0;\n    vec4 color = vec4(0.0);\n    \n    for(int i = 0;i < 150; i++){\n        vec3 p = ro + rd * depth;\n        \n        float density = fractionalBrownianMotion(p);\n        \n        if(density > 1e-3){\n            vec4 c = vec4(mix(vec3(1.0,1.0,1.0), vec3(0.0,0.0,0.0),density),density);\n            c.a *= 0.4;\n            c.rgb *= c.a;\n            color += c * (1.0-color.a);\n        }\n\n            \n        \n        depth += max(0.05, 0.02 * depth);\n    }\n    \n    return clamp(color.rgb, 0.0,1.0);\n}\n\nvec3 beersLawMarch(vec3 ro, vec3 rd, vec3 lightSource){\n    float depth = 0.0;\n    \n    return vec3(.0,.0,.0);\n    \n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = (fragCoord.xy / iResolution.xy) * 2.0 - 1.0;\n    \n    vec3 ro = vec3(0,1.0,iTime);\n    vec3 rd = normalize(vec3(uv,1.0));\n    \n    vec3 col = pow(volumetricRaymarch(ro,rd),vec3(0.4547));\n    if(col.rgb == vec3(0.0)){\n        col = vec3(0.0,0.0,1.0);\n    }\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}