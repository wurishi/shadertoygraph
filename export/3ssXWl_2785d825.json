{"ver":"0.1","info":{"id":"3ssXWl","date":"1552541563","viewed":270,"name":"To The Moon","username":"belfry","description":"Playing with fft.\n\nChanged soundtrack until shadertoy's soundcloud integration is working again...","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["fft"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGzn","filepath":"/media/a/894a09f482fb9b2822c093630fc37f0ce6cfec02b652e4e341323e4b6e4a4543.mp3","previewfilepath":"/media/ap/894a09f482fb9b2822c093630fc37f0ce6cfec02b652e4e341323e4b6e4a4543.mp3","type":"music","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define rays 20.\n#define starlayers 5.\n#define nebulalayers 4.\n\nvec2 noise(vec2 uv) {\n    return fract(1234.1234 * sin(1234.1234 * fract(1234.1234 * uv) + uv.yx));\n}\n\nvec4 fbm(vec2 v) {\n    float t = 0.;\n    vec4 n = vec4(0.);\n    float b = 1./32.;\n    for (float s = 1.; s > b; s *= 0.5) {\n        t += s;\n    \tn += texture(iChannel0, b / s * v) * s;\n    }\n    return n / t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = iTime + 300.;\n    vec2 uv = (2. * fragCoord - iResolution.xy) / iResolution.y;\n\tvec2 polar = vec2(atan(uv.y, uv.x), length(uv));\n    float r = mod(polar.x + time * .1,  6.28318 / rays);\n    float r1 = r - 3.14159 / rays * 1.5;\n    float r2 = 3.14159 / rays * .5 - r;\n    float ray = 1.-smoothstep(fwidth(r1), -fwidth(r1), r1) \n        * smoothstep(fwidth(r2), -fwidth(r2), r2) + fwidth(r)*.75;\n    float c = (texture(iChannel1, vec2(0., 0.)).x) * .1 + .05 - polar.y;\n    float circle = smoothstep(fwidth(c), -fwidth(c), c);\n    float starDist = 10000.;\n    for (float k = 0.; k < starlayers; k++) {\n        float kt = mod(k - iTime * .1, starlayers);\n        vec2 tiled = uv * 10. * kt;\n        vec2 tileUV = 2. * fract(tiled) - 1.;\n        vec2 tileID = floor(tiled);\n        vec2 n = noise(tileID + .1);\n        float size = n.x * .1;\n        float invSize = 1. - size;\n        starDist = min(starDist, smoothstep(1., 0., kt) + length(tileUV + invSize * sin(time * noise(tileID))) - size);\n    }\n        \n    float fx = floor(mod(polar.x + time * .1, 6.28318) / 6.28318 * rays) / rays + 1. / rays;\n    float fft = texture(iChannel1, vec2(fx, 0.)).x + .2;\n    \n    float fbmTotal = 0.;\n    float totalWeight = 0.;\n    for (float k = 0.; k < nebulalayers; k++) {\n        float kt = mod(k - iTime * 1., nebulalayers);\n        vec4 f = fbm(uv * kt * .05 + k);\n        float weight = smoothstep(0., 1., kt) * smoothstep(nebulalayers, nebulalayers - 1., kt);\n        fbmTotal += weight * fbm(f.xy + time * .03).x * 1.;\n        totalWeight += weight;\n    }\n    fbmTotal /= totalWeight;\n    float l = mix(1., ray*circle, fft);\n    float st = clamp(.5 + fft - polar.y * .5, 0., 1.);\n    st *= st;\n    st *= st;\n    st = mix(st, step(starDist, 0.), l);\n    vec3 color = (.7+.3*sin(time * vec3(.1, .11, .111)));\n    fragColor = vec4(st * .3 + (2. - polar.y) * fbmTotal * color, 1.);\n}","name":"Image","description":"","type":"image"}]}