{"ver":"0.1","info":{"id":"3dscWs","date":"1585859291","viewed":64,"name":"yardthinkexperiment","username":"yardthink","description":"test experiment","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int N = 99;\n//const vec2 center = vec2(-0.1599, 1.0409);\n//const vec2 center =  vec2(-0.749608,0.1003); // seahorse valley\nconst vec2 center = vec2( -0.235125, 0.827215);\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvec4 getColor(int n, vec2 zn)\n{\n    //https://stackoverflow.com/questions/369438/smooth-spectrum-for-mandelbrot-set-rendering\n    float sn = (float(n) + 1.0 - log(log(length(zn)))/log(2.0))/float(N);\n\treturn vec4(hsv2rgb(vec3(sn,1,1)), 1);\n}\n\nvec4 mandel(in vec2 c)\n{\n    vec2 z = c;\n    int i;\n    vec4 color;\n    for (int j = 0; j < N; j++) {\n        i = j;\n\t\tif (length(z) > 2.2)\n            break;\n        z = vec2(z.x*z.x - z.y*z.y + c.x, \n                 2.0*z.x*z.y + c.y);   \t    \n    }\n\n    if (i >= N)\n        color = vec4(0,0,0,1);\n   \telse\n        color = getColor(i, z);\n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 p = fragCoord/iResolution.xy;\n\t// origo lower left, x right, y up\n    float ci = 2.5/cosh(iTime/4.0);\n    vec2 wh = ci*vec2(3,2);\n    vec2 c = center - wh*0.5 + p*wh; \n    // Output to screen\n    fragColor = mandel(c);\n}","name":"Image","description":"","type":"image"}]}