{"ver":"0.1","info":{"id":"NsKXRd","date":"1635173763","viewed":355,"name":"Confusing cubes","username":"sinvec","description":"In this shader I tried to repeat one of the paintings by Regolino Bizzi. Unfortunately, I could not repeat the texture of a real pencil, so I decided to replace it with watercolor.\n","likes":33,"published":1,"flags":0,"usePreview":1,"tags":["2d","geometry","isometric","watercolor","confusing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define PI 3.14159\n#define R (iResolution.xy)\n#define s(v,l) smoothstep(l/R.y,0.,v) // AA\n#define r(a) (mat2(cos(a),sin(a),-sin(a),cos(a))) // 2d rotation matrix\n\n// Standart formula for the distance from a point to a line\nfloat dtl(vec2 p, vec3 l) {return abs(l.x*p.x+l.y*p.y+l.z)/sqrt(l.x*l.x+l.y*l.y);}\n\n#define ST 1.73205 // sqrt(3.)\nfloat tirangle_grid (vec2 u, float a) {\n       float c = a*ST;\n       float fi = floor((u.y-ST*u.x) / c);\n       float d = min(dtl(u,vec3(ST,-1,fi*c)),dtl(u,vec3(ST,-1,(fi+1.)*c)));\n       fi = floor((u.y+ST*u.x) / c);\n       d = min(d,min(dtl(u,vec3(-ST,-1,fi*c)),dtl(u,vec3(-ST,-1,(fi+1.)*c))));\n       fi = abs(fract((u.y*2.)/c));\n       d = min(d,min(fi*c*.5,(1.-fi)*c*.5));\n       return d;\n}\n\n// IQ's SDF for rhombus (shadertoy.com/view/XdXcRB)\nfloat ndot(vec2 a, vec2 b ) { return a.x*b.x - a.y*b.y; }\nfloat sdRhombus( in vec2 p, in vec2 b ) \n{\n    p = abs(p);\n    float h = clamp( ndot(b-2.0*p,b)/dot(b,b), -1.0, 1.0 );\n    float d = length( p-0.5*b*vec2(1.0-h,1.0+h) );\n    return d * sign( p.x*b.y + p.y*b.x - b.x*b.y );\n}\n\n// Custom FBM from shadertoy.com/view/3dtBWX - Shane\nfloat fbm(vec2 p){\n    return texture(iChannel0, p*.001).x*.533 +\n           texture(iChannel0, p*.01).x*.267 +\n           texture(iChannel0, p*.3).x*.133 +\n           texture(iChannel0, p*.5).x*.067; \n}\n\n// Something that looks like watercolor :D\n// Idea taken from thebookofshaders.com/13/ (2-nd shader)\nfloat watercolor (vec2 p) {\n       p*=5.;\n       vec2 q = vec2(0.);\n       q.x = fbm(p);\n       q.y = fbm( p + vec2(1.0));\n       vec2 r = vec2(0.);\n       r.x = fbm( p + 1.0*q + vec2(1.7,9.2));\n       r.y = fbm( p + 1.0*q + vec2(8.3,2.8));\n       float f = fbm(p+r);\n       return clamp(f*1.1,0.,1.);\n}\n\n// Drawing a cube\nvec3 Cube (vec2 u, vec2 p, float gs, vec3 col, int type) {\n    u-=p;\n    // Coordinate perturbation for cube edges. From shadertoy.com/view/3dtBWX - Shane\n    vec2 offs1 = -(vec2(fbm(u*16.), fbm(u*16. + .35)) - .5) * .008;\n    // Same for cube watercolor\n    vec2 offs2 = -(vec2(fbm(u*16. + .61), fbm(u*16.)) - .5) * .025;\n    vec2 u1;\n    \n    // Line width and color\n    const float w = .002;\n    const vec3 lb = vec3(.18);\n    \n    // Inner edges of the cube\n    col = type==2 ? col : col = mix(col, lb, s(abs(sdRhombus((u+vec2(gs*2., -gs*2.*ST))*r(PI/6.)+offs1, vec2(7., 7./ST)*gs))-w,1.5));\n    col = type==1 ? col : col = mix(col, lb, s(abs(sdRhombus((u+vec2(-gs*4., 0.))*r(PI/2.)+offs1, vec2(7., 7./ST)*gs))-w,1.5));\n    // Side 1\n    u1=u+vec2(gs*4., 0.);\n    u1*=r(-PI/2.);\n    col = type==2 ? col : mix(col, mix(col,vec3(.29,.0,.5), watercolor(u1+offs2)),  s(sdRhombus(u1+offs2, vec2(7., 7./ST)*gs),5.));\n    col = type==2 ? col : col = mix(col, lb, s(abs(sdRhombus(u1+offs1, vec2(7., 7./ST)*gs))-w,1.5));\n    // Side 2\n    u1=u+vec2(-gs*2., gs*2.*ST); \n    u1*=r(PI/6.);\n    col = type==1 ? col : col = mix(col, mix(col,vec3(.5,.0,.5), watercolor(u1+offs2)),  s(sdRhombus(u1+offs2, vec2(7., 7./ST)*gs),5.));\n    col = type==1 ? col : col = mix(col, lb, s(abs(sdRhombus(u1+offs1, vec2(7., 7./ST)*gs))-w,1.5));\n    // Side 3\n    u1=u+vec2(-gs*2., -gs*2.*ST); \n    u1*=r(-PI/6.);\n    col = type==1 ? col : col = mix(col, mix(col,vec3(1.,.75,0.8), watercolor(u1+offs2)),  s(sdRhombus(u1+offs2, vec2(7., 7./ST)*gs),5.));\n    col = type==1 ? col : col = mix(col, lb, s(abs(sdRhombus(u1+offs1, vec2(7., 7./ST)*gs))-w,1.5));\n    \n    return col;\n}\n\n\nvoid mainImage(out vec4 O, in vec2 E)\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 u = 2.*(E - R*.5)/R.y;\n    // Background color\n    vec3 col = vec3(.95);\n    \n    // Side and height of triangles\n    const float grid_size = .04; \n    const float h = grid_size*ST/2.;\n    \n    u.y+=4.*h;\n    \n    //Coordinate perturbation for cube edges. From shadertoy.com/view/3dtBWX - Shane\n    vec2 offs1 = -(vec2(fbm(u*16.), fbm(u*16. + .35)) - .5) * .01;\n    // Coordinate perturbation for cube watercolor\n    vec2 offs2 = -(vec2(fbm(u*16. + .61), fbm(u*16.)) - .5) * .07;\n    \n    vec2 u1;\n    \n    // Grid\n    col = mix(col, vec3(.85), s(tirangle_grid(u,grid_size)-.001,1.5));\n    \n    // Paper effect\n    col = mix(col, col*.7, texture(iChannel0, u*5.).x*.5);\n    col += texture(iChannel0, (u+vec2(.125,.382))*5.).x*.2;\n    col = mix(col, col*.9, texture(iChannel0, u*.01).x);\n \n    // Margic cube part 1\n    col = Cube(u, vec2(-2.*grid_size, -8.*h), grid_size/2., col, 1);\n    \n    \n    col = Cube(u, vec2(-12.*grid_size, -8.*h), grid_size, col, 0);\n    col = Cube(u, vec2(-9.*grid_size, -2.*h), grid_size/2., col, 0);\n    col = Cube(u, vec2(-7.5*grid_size, 1.*h), grid_size/4., col, 0);\n    col = Cube(u, vec2(-5.*grid_size, 6.*h), grid_size/2., col, 0);\n    \n    col = Cube(u, vec2(0., 16.*h), grid_size, col, 0);\n    col = Cube(u, vec2(3.*grid_size, 10.*h), grid_size/2., col, 0);\n    col = Cube(u, vec2(4.5*grid_size, 7.*h), grid_size/4., col, 0);\n    col = Cube(u, vec2(7.*grid_size, 2.*h), grid_size/2., col, 0);\n    \n    col = Cube(u, vec2(12.*grid_size, -8.*h), grid_size, col, 0);\n    col = Cube(u, vec2(6.*grid_size, -8.*h), grid_size/2., col, 0);\n    col = Cube(u, vec2(3.*grid_size, -8.*h), grid_size/4., col, 0);\n    \n    \n    // Margic cube part 2\n    col = Cube(u, vec2(-2.*grid_size, -8.*h), grid_size/2., col, 2);\n    \n    col = mix(col, col*.1, 5./(abs(R.x-E.x)+5.));\n    col = mix(col, col*.1, 5./(abs(E.x)+5.));\n    col = mix(col, col*.1, 5./(abs(R.y-E.y)+5.));\n    col = mix(col, col*.1, 5./(abs(E.y)+5.));\n\n    O = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}