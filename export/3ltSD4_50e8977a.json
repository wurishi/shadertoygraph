{"ver":"0.1","info":{"id":"3ltSD4","date":"1580952844","viewed":79,"name":"Intro To ShaderToy (shapes)","username":"Jim_Watson","description":"Going through the Art of Code tutorials. Having a blast so far. ","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float Circle(vec2 uv, vec2 p, float r, float blur)\n{\n    float d = length(uv-p);\n    float c = smoothstep(r, r-blur, d);\n    \n    return c;\n}\n\nfloat BandEqual(float b, float w, float v, float blur)\n{\n    float band = smoothstep((b-w)+blur, b-blur, v);\n    band *= 1.-smoothstep(b+blur, (b+w)-blur, v);\n    return band;\n}\n\nfloat Band(float b, float e, float v, float blur)\n{\n    float band = smoothstep(b-blur, b, v);\n    band *= smoothstep(e+blur, e, v);\n    return band;\n}\n\nfloat SmileyFace(vec2 uv, vec2 p, float size)\n{\n    uv -= p; //  remaps the point you want it to be at to 0.\n    \t\t //  translation of the coordinate system\n    uv /= size; //  scaling coordinate system\n    \n    float mask = Circle(uv, vec2(0.), 0.4, 0.05);\n    \n    mask -= Circle(uv, vec2(-.15,0.15), 0.07, 0.01);\n    mask -= Circle(uv, vec2(.15,0.15), 0.07, 0.01);\n    \n    float mouth = Circle(uv, vec2(0.), 0.3, 0.02);\n    mouth *= 1.- Circle(uv, vec2(0., 0.05), 0.3, 0.02);\n    \n    mask *= 1. - clamp(mouth, 0., 1.);\n    return mask;\n}\n\nfloat Square(vec2 uv, float size, vec2 p, float blur)\n{\n    float mask = BandEqual(p.x, size, uv.x, blur);\n    mask *= BandEqual(p.y, size, uv.y, blur); \n    \n    return mask;\n}\n\nfloat Rect(float b1, float e1, float b2, float e2, float blur, vec2 uv)\n{\n    float mask = Band(b1, e1, uv.x, blur);\n    mask *= Band(b2, e2, uv.y, blur);\n    return mask;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float t = iTime;\n    uv -= 0.5;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    float mask = 0.;\n    \n    float x = uv.x;\n    \n    float m = sin(t+x*8.)*0.1;\n        //(x-0.5)*(x+0.5);\n    m = m*m*4.;\n    float y = uv.y-m;\n        \n    mask = Rect(-0.5, 0.5,-0.1, 0.1, 0.02, vec2(x, y));\n        //Rect(-0.2+y*.2, 0.2-y*.2,-0.3, 0.3, 0.02, vec2(x, y)); \n        //Rect(-0.2, 0.2,-0.3, 0.3, 0.02, vec2(x, y));\n        //Square(uv, 0.2, vec2(0.), 0.);\n        //SmileyFace(uv, vec2(0., 0.), 0.5);\n    \n    vec3 col = vec3(0.);\n    \n    col = vec3(1., 1., 0.)*mask;\n    \n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}