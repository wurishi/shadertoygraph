{"ver":"0.1","info":{"id":"ddXSzM","date":"1668629616","viewed":263,"name":"WebCam: Fire in everything !","username":"stephan","description":"Hold up an object of a strong color and see it glow","likes":6,"published":1,"flags":34,"usePreview":0,"tags":["firewebcam"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x = 1.0 - uv.x;\n    \n    vec4 cam_color = texture(iChannel0, uv);\n    vec4 buffer_color = texture(iChannel1, uv);\n    \n    fragColor = cam_color * 1.5 * (1.0 - buffer_color.a) + buffer_color * buffer_color.a;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void swap(float[3] values, int pos1, int pos2){\n    float temp = values[pos1];\n        values[pos1] = values[pos2];\n        values[pos2] = temp;\n}\n\nvoid sort_descending(float[3] values){\n    if(values[0] < values[1])\n        swap(values, 0, 1);\n    if(values[1] < values[2])\n        swap(values, 1, 2);\n    if(values[0] < values[1])\n        swap(values, 0, 1);\n}\n\nbool is_trigger(vec4 color){\n    float[3] values = float[3](color.x, color.y, color.z);\n    sort_descending(values);\n    return values[0] > values[1] * 2.0;\n}\n\nvec4 get_heat_color(vec4 color, float factor)\n{\n    return vec4(\n    color.x * factor,\n    color.y * factor,\n    color.z * (factor/3.0),\n    1.0\n    );\n}\n\nvec4 get_max_color(vec4 color1, vec4 color2){\n    return vec4(max(color1.x, color2.x), max(color1.y, color2.y), max(color1.z, color2.z), max(color1.a, color2.a));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 webcam_color = texture(iChannel0, uv);\n    \n    if(is_trigger(webcam_color))\n    {\n        // This point is heat itself\n        fragColor = get_heat_color(webcam_color, 3.5);\n        return;\n    }\n    \n    float _min_x = -1.0;\n        float _max_x = 1.0;\n        float _min_y = -8.0;\n        float _max_y = 1.0;\n\n        vec4 max_neighbor_color = vec4(0.0,0.0,0.0,0.0);\n        for(float x = _min_x; x <= _max_x; x++)\n        for(float y = _min_y; y <= _max_y; y++)\n        {\n            vec2 point = vec2(fragCoord.x + x, fragCoord.y + y);\n            vec2 point_uv = point/iResolution.xy;\n            vec4 point_buffer_color = texture(iChannel1, point_uv);\n            \n            max_neighbor_color += point_buffer_color;\n            // max_neighbor_color = get_max_color(max_neighbor_color, point_buffer_color);\n        }\n        \n        max_neighbor_color /= ((_max_x - _min_x) * (_max_y - _min_y));\n\n        fragColor = max_neighbor_color * 0.57;// get_heat_color(webcam_color, 0.5);\n    \n}","name":"Buffer A","description":"","type":"buffer"}]}