{"ver":"0.1","info":{"id":"4sdcWM","date":"1519157002","viewed":83,"name":"Raycastingg","username":"theMagicDunky","description":"in class work","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["homework"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sphereIntersect(vec3 rayOrigin, vec3 rayDir, vec3 center, float radius)\n{\n    vec3 rc = rayOrigin-center;\n    float c = dot(rc, rc) - (radius*radius);\n    float b = dot(rayDir, rc);\n    float d = b*b - c;\n    float t = -b - sqrt(abs(d));\n    float st = step(0.0, min(t,d));\n    return mix(-1.0, t, st);\n}\n\nvec3 SphereCenter = vec3(0.0, 0.0, 10.0);\nfloat SphereRadius = 5.0;\n\nvec3 CameraCenter = vec3(0.0, 0.0, -3.0);\nfloat imagePlaneDist = 1.0;\n\n// lighting\nvec3 lightPos = vec3(7.0, 3.0, 0.0);\nfloat lightRadius = 3.0;\n\nvec3 baseColor = vec3(1.0, 0.5, 0.0);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 currentPixel = vec3(uv.x, uv.y, CameraCenter.z + imagePlaneDist);\n    vec3 rayDir = currentPixel - CameraCenter;\n    float hit = sphereIntersect(CameraCenter, normalize(rayDir), SphereCenter, SphereRadius);\n    \n    vec3 spherePos = currentPixel + (rayDir * hit);\n    vec3 sphereNormal = normalize(spherePos - SphereCenter);\n    \n    vec3 lightDir = normalize(lightPos - spherePos);\n    float diffuse = dot(lightDir, sphereNormal);\n    diffuse = clamp(diffuse, 0.0, 1.0);\n    \n    vec3 finalColor = baseColor * diffuse;\n    // Output to screen\n    fragColor.xyz = finalColor;\n    fragColor.a = 1.0;\n}","name":"Image","description":"","type":"image"}]}