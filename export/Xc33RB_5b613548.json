{"ver":"0.1","info":{"id":"Xc33RB","date":"1711809641","viewed":20,"name":"TP3_BAH_Mamadou_12201052","username":"bahMamadou","description":"TPNOTE","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["tp3graphic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Modeling - 2024.02.06\n// Eric Galin\n\n// Rotation matrix around z axis\n// a : Angle\nmat3 Rz(float a)\n{\n  float sa=sin(a);float ca=cos(a);\n  return mat3(ca,sa,0.,-sa,ca,0.,0.,0.,1.);\n}\n\nstruct Ray {\nvec3 ro; // Ray origin\nvec3 rd; // Direction\n};\n\n// Compute a point on the ray\n// ray : Ray\n// t   : depth\nvec3 Point(Ray ray,float t)\n{\n  return ray.ro+t*ray.rd;\n}\n\n// Compute the ray\n//     m : Mouse position\n//     p : Pixel\nRay CreateRay(vec2 m,vec2 p)\n{\n  float a=3.*3.14*m.x; \n  float le=3.5;\n  \n  // Origin\n  vec3 ro=vec3(35.,0.,10.)*Rz(a);\n  \n  // Target point\n  vec3 ta=vec3(0.,0.,3.);\n  \n  // Orthonormal frame\n  vec3 w=normalize(ta-ro);\n  vec3 u=normalize(cross(w,vec3(0.,0.,1.)));\n  vec3 v=normalize(cross(u,w));\n  vec3 rd=normalize(p.x*u+p.y*v+le*w);\n  return Ray(ro,rd);\n}\n\n// Primitives\n\n// Sphere\n// p : point\n// c : center of skeleton\n// r : radius\nfloat Sphere(vec3 p,vec3 c,float r)\n{\n  return length(p-c)-r;\n}\n\n// Plane\n// p : point\n// c : center of skeleton\n// n : Normal\nfloat Plane(vec3 p,vec3 c,vec3 n)\n{\n  return dot(p-c,n);\n}\n\n// Operators\n\n// Union\n// a,b : field function of left and right sub-trees\nfloat Union(float a,float b)\n{\n  return min(a,b);\n}\n\n// Union, extension to four sub-trees\n// a,b,c : field function of left and right sub-trees\nfloat Union(float a,float b,float c,float d)\n{\n  return min(min(a,b),min(c,d));\n}\n\n// Difference\n// a,b : field function of left and right sub-trees\nfloat Difference(float a,float b)\n{\n  return max(a,-b);\n}\n\n// Potential field of the object\n// p : point\nfloat object(vec3 p)\n{\n\n  float v=  Sphere(p,vec3(3.,0.,6.),4.);\n\n  v=Union(v,\n    Sphere(p,vec3(0.,2.,3.),3.));\n  \n  float d=Union(\n      Sphere(p,vec3(5.,1.,5.),3.),\n    Sphere(p,vec3(-1.,1.,6.),3.),\n    Sphere(p,vec3(-1.,2.,2.),2.),\n    Sphere(p,vec3(1.,1.,6.),2.));\n  v=Difference(v,d);\n  \n  v=Union(v,\n    Plane(p,vec3(0.,0.,-1.),vec3(0.,0.0,1.0))\n  );\n  \n  return v;\n}\n\n// Analysis of the scalar field\n\nconst int Steps=200;// Number of steps\nconst float Epsilon=.01;// Marching epsilon\n\n// Object normal\n// p : point\nvec3 ObjectNormal(vec3 p)\n{\n  const float eps=.001;\n  vec3 n;\n  float v=object(p);\n  n.x=object(vec3(p.x+eps,p.y,p.z))-v;\n  n.y=object(vec3(p.x,p.y+eps,p.z))-v;\n  n.z=object(vec3(p.x,p.y,p.z+eps))-v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\n// ray : Ray \n// e : Maximum distance\n// h : hit\n// s : Number of steps\nfloat SphereTrace(Ray ray,float e,out bool h,out int s)\n{\n  h=false;\n  \n  // Start at the origin\n  float t=0.;\n  \n  for(int i=0;i<Steps;i++)\n  {\n    s=i;\n    vec3 p=Point(ray,t);\n    float v=object(p);\n    // Hit object\n    if(v<0.)\n    {\n      h=true;\n      break;\n    }\n    // Move along ray\n    t+=max(Epsilon,v);\n    // Escape marched too far away\n    if(t>e)\n    {\n      break;\n    }\n  }\n  return t;\n}\n\n// Lighting\n\n// Background color\n// d : Ray direction\nvec3 Background(vec3 d)\n{\n  return mix(vec3(.45,.55,.99),vec3(.65,.69,.99),d.z*.5+.5);\n}\n\n//TP3\n\n\n// OMBRE DURE\n// Fonction : HardShadow\n// Description : Calcule l'ombre dure d'un point par rapport à une source de lumière.\n// Paramètres :\n//   - p : point\n//   - source : position de la lumière\n// Retourne : la valeur de l'ombre dure (0.0 si dans l'ombre, 1.0 sinon)\nfloat HardShadow(vec3 p, vec3 source)\n{\n    const float t = 0.1; // Tolérance pour éviter les auto-intersections\n    \n    // Direction de la lumière \n    vec3 Ld = normalize(source - p);\n    \n    // Rayon de l'ombre\n    Ray rayOmbre = Ray(p + t * Ld, Ld);\n    \n    // Vérifie s'il y a intersection avec un objet\n    bool hit; // Indique si un objet a été touché\n    int i; // Indice de l'objet touché\n    SphereTrace(rayOmbre, length(source - p), hit, i);\n    \n    // Si un objet est en intersection, le point ciblé est dans l'ombre, sinon il est éclairé\n    if(hit == true)\n        return 0.0;\n     return 1.0;\n}\n\n// Fonction FIBONACCI\n// Description : Calcule un point sur une spirale de Fibonacci pour distribuer les points autour d'un cercle.\n// Paramètres :\n//   - i : indice du point\n//   - n : nombre total de points\n// Retourne : le point sur la spirale de Fibonacci\nvec3 Fibonacci(int i, int n)\n{\n    float inc = 3.141592653589793238462643383279502884 * (3. - sqrt(5.)); // Incrément angulaire\n    float off = 2. / float(n); // Décalage\n    float posY = float(i) * off - 1. + (off / 2.); // Calcul de l'ordonnée\n    float rayon = sqrt(1. - posY * posY); // Calcul du rayon\n    float angle = float(i) * inc; // Calcul de l'angle\n    return vec3(cos(angle) * rayon, posY, sin(angle) * rayon); // Retourne le point\n}\n\n//OMBRE DOUCE, par approximation\n// Fonction : SoftShadow\n// Description : Calcule l'ombre douce en effectuant une approximation avec un certain nombre de points.\n// Paramètres :\n//   - p : point\n//   - s : position de la lumière\n//   - rad : rayon d'approximation\n//   - n : nombre de points d'approximation\n// Retourne : la valeur de l'ombre douce\nfloat SoftShadow(vec3 p, vec3 s, float rad, int n)\n{\n    float l = 0.0; // Accumulateur pour la luminosité\n    for(int i = 0; i < n; i++)\n    {\n        vec3 spiralPos = rad*Fibonacci(i, n); // Position du point d'approximation\n        l += HardShadow(p + spiralPos, s); // Ajout de l'ombre dure du point\n    }\n    return l / float(n); // Retourne la moyenne des ombres dures\n}\n\n// Fonction : Hemisphere\n// Description : Génère un point sur un hémisphère pour l'occlusion ambiante.\n// Paramètres :\n//   - i : indice du point\n//   - n : nombre total de points\n// Retourne : le point sur l'hémisphère\nvec3 Hemisphere(int i, int n)\n{\n    float theta = float(i) * (3.141592653589793238462643383279502884 / float(n)); // Angle theta\n    float phi = fract(1.0 + float(i) * 1.6180339887498948482045868343656381177); // Angle phi selon le ratio d'or\n    float x = cos(phi * 2.0 * 3.141592653589793238462643383279502884) * sin(theta); // Calcul des coordonnées cartésiennes\n    float y = sin(phi * 2.0 * 3.141592653589793238462643383279502884) * sin(theta);\n    float z = cos(theta);\n    return vec3(x, y, z); // Retourne le point sur l'hémisphère\n}\n\n// OCCLUSION AMBIANTE\n// Fonction : Occlusion\n// Description : Calcule l'occlusion ambiante d'un point par rapport à une source de lumière.\n// Paramètres :\n//   - p : point\n//   - c : centre, source de lumière\n//   - n : nombre de points pour l'approximation\n// Retourne : la valeur de l'occlusion ambiante\nfloat Occlusion(vec3 p, vec3 c, int n){\n    float somme = 0.0;\n    for(int i = 0; i < n; i++)\n    {\n        vec3 si = normalize(Fibonacci(i, n));\n        \n        if (HardShadow(p, c) == 0.0)\n        {\n            somme += 1.;\n        }\n    }\n    return 1.0 - (somme / float(n));\n}\n\n\n//Fin TP3\n\n\n// Shading and lighting\n// p : Point\n// n : Normal at point\n// e : Eye direction\nvec3 Shade(vec3 p,vec3 n,vec3 e)\n{\n  // Point light\n  const vec3 lp=vec3(5.,10.,30.);\n  \n  // Light direction to point light\n  vec3 l=normalize(lp-p);\n  \n  // Ambient color\n  vec3 ambient=.25+.25*Background(n);\n  \n  // Shadow computation\n  float shadow=1.0;\n  \n  // Ombre dure\n  float hardShadow = HardShadow(p,lp);\n  \n  // Ombre douce\n  float softShadow = SoftShadow(p,lp,1.,100);\n  \n  //vec3 h=Hemisphere(40,1); //marche pas encore\n  \n  // Appel a Occlusion\n  float occlusion = Occlusion(p,lp,200);\n  float hardshadowOcclusion = hardShadow*occlusion;\n  float softshadowOcclusion = softShadow*occlusion;\n  \n  // Phong diffuse\n  vec3 diffuse=.35*clamp(dot(n,l),0.,1.)*vec3(1.,1.,1.);\n  \n  // Specular\n  vec3 r=reflect(e,n);\n  vec3 specular=.15*pow(clamp(dot(r,l),0.,1.),35.)*vec3(1.,1.,1.);\n  vec3 c=ambient+hardShadow*(diffuse+specular);\n  return c;\n}\n\n\n// Image\nvoid mainImage(out vec4 color,in vec2 pxy)  \n{\n  // Pixel\n  vec2 pixel=(-iResolution.xy+2.*pxy)/iResolution.y;\n\n  // Mouse\n  vec2 m=iMouse.xy/iResolution.xy;\n  \n  // Camera\n  Ray ray=CreateRay(m,pixel);\n  \n  \n  // Hit and number of steps\n  bool hit;\n  int s;\n  \n   // Trace ray\n float t=SphereTrace(ray,75.,hit,s);\n  \n  // Shade background\n  vec3 rgb=Background(ray.rd);\n  \n  if(hit)\n  {\n    // Position\n    vec3 p=Point(ray,t);\n    \n    // Compute normal\n    vec3 n=ObjectNormal(p);\n    \n    // Shade object with light\n    rgb=Shade(p,n,ray.rd);\n  }\n    \n  color=vec4(rgb,1.);\n}\n","name":"Image","description":"","type":"image"}]}