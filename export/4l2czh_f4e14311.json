{"ver":"0.1","info":{"id":"4l2czh","date":"1507437693","viewed":163,"name":"Reveal using kernels ","username":"MarkyB","description":"Blurs an image then based on the mouse click and the active effect, it produces a circle with that active effect. The effects can be changed in the variable 'choice' and the radius of the circle can be changed in 'radius' (remember to push ALT-ENT after).","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["circle","picture","kernels"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float radius = 0.1;\n\n/*\n0 = sharpen\n1 = edge detection \n2: Emboss\n3: Bottom Sobel \nDefault: sharpen \n*/\nint choice = 1;\n\n//Blur effect\nmat3 blur = mat3(\n    0.111,0.111,0.111,\n    0.111,0.111,0.111, \n    0.111,0.111,0.111\n);\n\n//Sharpen effect\nmat3 sharp = mat3(\n    0.0,-1.0,0.0,\n    -1.0,5.0,-1.0, \n    0.0,-1.0,0.0\n);\n\n//Edge detection effect\nmat3 edge = mat3(\n    -1.0,-1.0,-1.0,\n    -1.0,8.0,-1.0,\n    -1.0,-1.0,-1.0\n);\n\n//Emboss effect\nmat3 emboss = mat3(\n\t-2, -1, 0, \n\t-1, 1, 1, \n\t0, 1, 2 \n);\n\n//Bottom Sobel effect\nmat3 bottomSobel = mat3(\n\t1.0,2.0,1.0,\n    0.0,0.0,0.0,\n    -1.0,-2.0,-1.0\n);\n\nvec3 aSample(const int x, const int y, in vec2 fragCoord){\n    //Converts to pixel space\n    vec2 uv = fragCoord.xy / iResolution.xy * iChannelResolution[0].xy;\n    \n    //gets adjacent pixel and convert back to uv space\n    uv = (uv + vec2(x, y)) / iChannelResolution[0].xy;\n    \n    \n    return texture(iChannel0, uv).xyz;\n}\n\nvec3 aFilter(in vec2 fragCoord, mat3 kernal){\n    \n    //applies the kernal to the pixels\n    vec3 sum = vec3(0.0,0.0,0.0);\n    for(int i = 0; i < 3; i ++){\n        for(int j = 0; j < 3; j ++){\n            sum += aSample(i-1, j-1, fragCoord) * kernal[i][j];\n    \t}\n    }\n    \n    return sum;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec2 uv = fragCoord.xy / iResolution.xy; \n   float aspect = iResolution.y / iResolution.x;\n   uv.y *= aspect; \n    \n    //Getting mouse position after click \n   vec2 mousePos = iMouse.xy / iResolution.xy;\n   mousePos.y *= aspect;\n   \n    \n    vec2 fc = fragCoord.xy;\n\tvec3 cf = aFilter(fc, blur);\n    vec4 effects;\n    \n    //Creates the effect for the circle based on the choice \n    switch (choice){\n     case 0:   \n         effects = step(length(uv-mousePos), radius) * vec4(aFilter(fc, sharp), 1.0);\n        \tbreak;\n     case 1:\n         effects = step(length(uv-mousePos), radius) * vec4(aFilter(fc, edge), 1.0);\n        break;\n     case 2:\n         effects = step(length(uv-mousePos), radius) * vec4(aFilter(fc, emboss), 1.0);\n        break;\n     case 3:\n         effects = step(length(uv-mousePos), radius) * vec4(aFilter(fc, bottomSobel), 1.0);\n        break;\n     default:\n         effects = step(length(uv-mousePos), radius) * vec4(aFilter(fc, sharp), 1.0);\n        \n    }\n      \n    //Mixes the two layers together\n    vec4 comp = mix(vec4(cf,1.0), effects, effects.a);\n    \n    fragColor = comp;\n}\n\n","name":"Image","description":"","type":"image"}]}