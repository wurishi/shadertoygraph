{"ver":"0.1","info":{"id":"Xdcfzl","date":"1526304179","viewed":101,"name":"Keyboard buffer texture","username":"pitlikm","description":"Use the arrow keys to modify the periodically changing coloring of the object.","likes":4,"published":1,"flags":48,"usePreview":0,"tags":["keyboardchannel","buffertexture","sdfraymarch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float MIN_DIST = 0.0;\nconst float MAX_DIST = 100.0;\nconst float EPSILON = 0.0001;\n\nfloat sphere(vec3 p)\n{\n    return length(p) - 1.0;\n}\n\nfloat cube(vec3 p)\n{\n    vec3 d = abs(p) - vec3(1.0);\n  \treturn min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat intersect(float distA, float distB) {\n    return max(distA, distB);\n}\n\nfloat scene(vec3 samplePoint)\n{\n    float sphereDist = sphere(samplePoint / 1.2) * 1.2;\n    float cubeDist = cube(samplePoint);\n    return intersect(cubeDist, sphereDist);\n}\n\nfloat raymarch(vec3 eye, vec3 dir, float start, float end)\n{\n    float depth = start;\n    for (int i = 0; i < 255; i++)\n    {\n        float dist = scene(eye + depth * dir);\n        if (dist < EPSILON)\n            return depth;\n        depth += dist;\n        if (depth >= end)\n            return end;\n    }\n    return end;\n}\n\nvec3 estimateNormal(vec3 p)\n{\n    return normalize(vec3(\n        scene(vec3(p.x + EPSILON, p.y, p.z)) - scene(vec3(p.x - EPSILON, p.y, p.z)),\n        scene(vec3(p.x, p.y + EPSILON, p.z)) - scene(vec3(p.x, p.y - EPSILON, p.z)),\n        scene(vec3(p.x, p.y, p.z  + EPSILON)) - scene(vec3(p.x, p.y, p.z - EPSILON))\n    ));\n}\n\nvec3 phongColor(vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye, vec3 lightPos, vec3 lightIntensity)\n{\n    //vec3 N = normalize(p);\n    vec3 N = estimateNormal(p);\n    vec3 L = normalize(lightPos - p);\n    vec3 V = normalize(eye - p);\n    vec3 R = normalize(reflect(-L, N));\n    \n    float theta = acos(N.z / sqrt(N.x*N.x + N.y*N.y + N.z*N.z)) + 3.14/2.0;\n    float phi = acos(N.x / sqrt(N.x*N.x + N.y*N.y)) + 3.14/2.0;\n    k_d = texture(iChannel0, vec2(phi / 3.14, theta / 3.14)).xyz;\n    \n    float dotLN = dot(L, N);\n    float dotRV = dot(R, V);\n    \n    if (dotLN < 0.0)\n        return vec3(0.0, 0.0, 0.0);\n    \n    if (dotRV < 0.0)\n        return lightIntensity * (k_d * dotLN);\n    \n    return lightIntensity * (k_d * dotLN + k_s * pow(dotRV, alpha));\n}\n\nvec3 phong(vec3 k_a, vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye)\n{\n    const vec3 ambientLight = 0.3 * vec3(1.0, 1.0, 1.0);\n    vec3 color = ambientLight * k_a;\n    \n    vec3 light1Pos = vec3(4.0, 2.0, 4.0);\n    vec3 light1Intensity = vec3(0.5, 0.5, 0.5);\n    \n    color += phongColor(k_d, k_s, alpha, p, eye, light1Pos, light1Intensity);\n    \n    vec3 light2Pos = vec3(-8.0, 0.0, -8.0);\n    vec3 light2Intensity = vec3(0.5, 0.5, 0.5);\n    \n    color += phongColor(k_d, k_s, alpha, p, eye, light2Pos, light2Intensity);\n   \n    return color;\n}\n\nvec3 rayDir(float fov, vec2 screen, vec2 fragCoord)\n{\n    vec2 xy = fragCoord - screen / 2.0;\n    float z = screen.y / tan(radians(fov) / 2.0);\n    return normalize(vec3(xy, -z));\n}\n\nmat4 viewMatrix(vec3 eye, vec3 center, vec3 up)\n{\n    // Based on gluLookAt man page\n    vec3 f = normalize(center - eye);\n    vec3 s = normalize(cross(f, up));\n    vec3 u = cross(s, f);\n    return mat4(\n        vec4(s, 0.0),\n        vec4(u, 0.0),\n        vec4(-f, 0.0),\n        vec4(0.0, 0.0, 0.0, 1)\n    );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec3 viewDir = rayDir(60.0, iResolution.xy, fragCoord);\n    \n    float eyeC = cos(3.14 / 16.0 * iTime);\n    float eyeS = sin(3.14 / 16.0 * iTime);\n    vec3 eye = vec3(8.0*eyeC, 4.0, 8.0*eyeS);\n    \n    mat4 viewToWorld = viewMatrix(eye, vec3(0.0, 0.0, 0.0), vec3(0.0, 1.0, 0.0));\n    vec3 worldDir = (viewToWorld * vec4(viewDir, 0.0)).xyz;\n    \n    float dist = raymarch(eye, worldDir, MIN_DIST, MAX_DIST);\n    \n    if (dist > MAX_DIST - EPSILON)\n    {\n        fragColor = texture(iChannel1, 0.1*worldDir);\n\t\treturn;\n    }\n    \n    vec3 p = eye + dist * worldDir;\n    \n    vec3 K_a = vec3(0.8, 0.8, 0.8);\n    vec3 K_d = vec3(0.0);\n    vec3 K_s = vec3(1.0, 1.0, 1.0);\n    float shininess = 100.0;\n    \n    vec3 color = phong(K_a, K_d, K_s, shininess, p, eye);\n    \n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const int KEY_LEFT  = 37;\nconst int KEY_UP    = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN  = 40;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    float kl = texelFetch(iChannel0, ivec2(KEY_LEFT,0), 0).x;\n    float ku = texelFetch(iChannel0, ivec2(KEY_UP,0), 0).x;\n    float kr = texelFetch(iChannel0, ivec2(KEY_RIGHT,0), 0).x;\n    float kd = texelFetch(iChannel0, ivec2(KEY_DOWN,0), 0).x;\n\n    // Output to screen\n    float strength = 0.5;\n    fragColor = vec4(col,1.0);\n    fragColor = mix(fragColor, vec4(kl, 0, 0, 1), 0.0+kl*strength);\n    fragColor = mix(fragColor, vec4(0, ku, 0, 1), 0.0+ku*strength);\n    fragColor = mix(fragColor, vec4(0, 0, kr, 1), 0.0+kr*strength);\n    fragColor = mix(fragColor, vec4(kd, 1, 1, 1), 0.0+kd*strength);   \n}","name":"Buf A","description":"","type":"buffer"}]}