{"ver":"0.1","info":{"id":"7sdGWX","date":"1630785554","viewed":109,"name":"Goop?","username":"PrenexNormalForm","description":"Goop?\nclick to see the points around which the goop is centered","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float fade( float holdDuration0, float holdDuration1, float transitionDuration, float time ) {\n    float pi = 3.1415926535897932384626433832795;\n    \n    time = mod(time, (holdDuration0 + holdDuration1 + 2. * transitionDuration));\n    \n    if (time < holdDuration0) {\n        return 0.;\n    } else if (time < holdDuration0 + transitionDuration) {\n        return 0.5 * (1. - cos((time - holdDuration0) * pi / transitionDuration));\n    } else if (time < holdDuration0 + transitionDuration + holdDuration1) {\n        return 1.;\n    } else {\n        return 0.5 * (1. + cos((time - holdDuration0 - transitionDuration - holdDuration1) * pi / transitionDuration));\n    }\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    float pi = 3.1415926535897932384626433832795;\n    \n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 pos = vec2(uv.x * iResolution.x / iResolution.y, uv.y);\n    vec2 center = vec2(iResolution.x / iResolution.y / 2.0, 0.5);\n    \n    //float time = 1.;\n    float time = iTime;\n    \n    float r1 = 0.08;\n    float r2 = 0.06;\n    float r3 = 0.04;\n    float r4 = 0.1;\n    float r5 = 0.04;\n    float r6 = 0.05;\n    //float rMouse = 0.1;\n    \n    vec2 v1 = vec2(cos(time * sqrt(2.0)) * 0.7, 0.0) + center;\n    vec2 v2 = vec2(0.0, sin(time) * (0.5 - 2.0 * r2)) + center;\n    vec2 v3 = vec2(cos(time) * 0.6, sin(time) * 0.3) + center;\n    vec2 v4 = vec2(cos(time * 0.2) * (center.x - r4) * 0.8, sin(time * 2.5) * 0.3) + center;\n    vec2 v5 = vec2(cos(time * 5. / pi) * 0.3 - 0.3, sin(time * 5. / pi) * 0.3) + center;\n    vec2 v6 = vec2(cos(time * 6. / pi) * 0.3 + 0.3, -sin(time * 6. / pi) * 0.3) + center;\n    //vec2 vMouse = iMouse.xy / iResolution.yy;\n    \n    float d1 = distance(pos, v1);\n    float d2 = distance(pos, v2);\n    float d3 = distance(pos, v3);\n    float d4 = distance(pos, v4);\n    float d5 = distance(pos, v5);\n    float d6 = distance(pos, v6);\n    //float dMouse = distance(pos, vMouse);\n    \n    float field =  1. / (r1 / d1 + r2 / d2 + r3 / d3 + r4 / d4 + r5 / d5 + r6 / d6);\n    \n    float circWidth = 0.003;\n    \n    //Anti-aliasing\n    float inGoop = 1. - smoothstep(1. - 2. * fwidth(field), 1., field);\n    \n    vec3 color;\n    \n    //rainbow\n    if (iMouse.z > 0.5) {\n        float sCurve = 0.5 * (1. - cos(field * pi));\n\n        vec3 magenta = vec3(1., 0., 1.);\n        vec3 blue = vec3(0., 0., 1.);\n        vec3 cyan = vec3(0., 1., 1.);\n        vec3 green = vec3(0., 1., 0.);\n        vec3 yaller = vec3(1., 1., 0.);\n        vec3 rot = vec3(1., 0., 0.);\n        float interpVal = mod(sCurve, 0.2) * 5.;\n        vec3 colorRainbow;\n        if (sCurve < 0.2) {\n            colorRainbow = mix(rot, yaller, sCurve * 5.);\n        } else if (sCurve < 0.4) {\n            colorRainbow = mix(yaller, green, (sCurve - 0.2) * 5.);\n        } else if (sCurve < 0.6) {\n            colorRainbow = mix(green, cyan, (sCurve - 0.4) * 5.);\n        } else if (sCurve < 0.8) {\n            colorRainbow = mix(cyan, blue, (sCurve - 0.6) * 5.);\n        } else {\n            colorRainbow = mix(blue, magenta, (sCurve - 0.8) * 5.);\n        }\n        color = colorRainbow * inGoop;\n    } else {\n    \n        //non-rainbow\n        // old colors without gamma correction\n        //vec3 goopThickColor = vec3(1., 0.8, 0.9);\n        //vec3 goopThinColor = (vec3(0.25, 1., 1.) + goopThickColor) * 0.5;\n        vec3 goopThickColor = vec3(0.9, 0.4, 0.7);\n        vec3 goopThinColor = (vec3(0.2, 0.8, 0.8));\n        float circleQuadrant = sqrt(1.-field*field);\n        vec3 colorNonRainbow = mix(goopThinColor, goopThickColor, circleQuadrant);\n        color = colorNonRainbow * inGoop;\n    }\n    \n    //float rainbowFade = fade(10.0, 1.0, 0.5, iTime);\n    //vec3 color = mix(colorNonRainbow, colorRainbow,  rainbowFade) * inGoop;\n    \n    //gamma correction\n    //like this really needs it\n    color = pow(color, vec3(0.4545));\n    \n    fragColor = vec4(color, inGoop);\n}","name":"Image","description":"","type":"image"}]}