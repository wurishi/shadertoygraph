{"ver":"0.1","info":{"id":"dtX3WM","date":"1672312113","viewed":74,"name":"ray trace 2 ","username":"mhmdkassab777","description":"ray trace","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raytrace"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nstruct Camera \n{\n    vec3 position;\n    vec3 direction;\n    float zoom; \n} camera;\n\nstruct Sphere\n{\n    vec3 position;\n    float radius;     \n}sphere1,sphere2,sphere3;\n\n\n\nvoid setupScene()\n{\n    camera.position = vec3(0., 0., 3.5);\n    camera.direction = vec3(0., 0., -1.);\n    camera.zoom = 1.0;\n    \n    sphere1.position = vec3(-0.5, 0., 0.5);\n    sphere1.radius = 0.2;\n    \n    sphere2.position =vec3(-0.3, -0.5, 0.);\n    sphere2.radius = 0.2;\n    \n    sphere3.position =vec3(0, 0.5, 1.);\n    sphere3.radius = 0.2;\n    \n}\n\nbool solveQuadratic(float a, float b, float c, out float t0, out float t1)\n{\n    float disc = b * b - 4. * a * c;\n    \n    if (disc < 0.)\n    {\n        return false;\n    } \n    \n    if (disc == 0.)\n    {\n        t0 = t1 = -b / (2. * a);\n        return true;\n    }\n    \n    t0 = (-b + sqrt(disc)) / (2. * a);\n    t1 = (-b - sqrt(disc)) / (2. * a);\n    return true;    \n}\n\nbool intersect(vec3 direction, out float refl,Sphere sphere)\n{\n    vec3 oc = camera.position - sphere.position;\n    \n    float a = dot(direction, direction);\n    float b = 2. * dot(direction, oc);\n    float c = dot(oc, oc) - pow(sphere.radius, 2.);\n    \n    float t0;\n    float t1;\n    \n    if (solveQuadratic(a, b, c, t0, t1))\n    {\n        float t = t0;\n        if (t1 < t0)\n        {\n            t = t1;\n        }\n        \n        vec3 Phit = camera.position + t * direction;\n        vec3 surfaceNormal = normalize(Phit - sphere.position);\n        \n        refl = -dot(direction, surfaceNormal);\n                \n        return true;\n    }  \n     \n    return false;\n}\n\nvec3 rayTrace(vec3 direction)\n{\n    float refl ;\n     if (intersect(direction, refl,sphere3))\n    {\n        return refl * vec3(0.25, 0.15, 0.75);\n    }\n    if (intersect(direction, refl,sphere1))\n    {\n        return refl * vec3(0.3, 0.6, 0.3);\n    }\n     \n   \n    if (intersect(direction, refl,sphere2))\n    {\n        return refl * vec3(0.6, 0.1, 0.2);\n    }\n    \n    \n    \n    return vec3(0.5*cos(iTime * 6.) / 3., 0.5*sin(iTime * 6.) / 3., 0.5*-cos(iTime * 6.) / 3.);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{        \n    setupScene();\n    \n    // Normalized pixel coordinates (from -0.5 to 0.5)\n    vec2 uv = fragCoord/iResolution.xy - 0.5;\n    uv.x *= (iResolution.x / iResolution.y); \n    \n    vec3 direction = normalize(vec3(uv, camera.zoom) - camera.position);\n    \n    sphere1.position.y = sin(iTime * 3.) / 3.;\n    sphere2.position.x = sin(iTime * 3.) / 3.;\n    \n    sphere3.position.y = cos(iTime * 3.) / 3.;\n    sphere3.position.x = sin(iTime * 3.) / 3.;\n    \n    vec3 col = rayTrace(direction);\n\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}