{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"music","id":"4sXGRr","filepath":"/media/a/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"code":"const float PI = 3.141592653589; // MATHturbation\n#define MAXIterations 25\n#define anim_rate 2.5\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  float TIME = iTime;\n  float ZOOM = 4.0 - (cos(TIME*0.25)*0.5+0.5)*4.5;\n  float BASS = texture(iChannel0, vec2(0.3,0.25)).x * 2.0;\n  float MID = texture(iChannel0, vec2(0.5,0.25)).x * 1.5;\n  float TREB = texture(iChannel0, vec2(0.7,0.25)).x * 0.2;\n  vec2 CET = vec2(cos(TIME*0.25)*0.5*ZOOM,sin(TIME*0.1)*0.5*ZOOM);\n  float PALETTE_SHIFT = TIME * 0.25;\n  vec4 SCALE_OFFSET = vec4(vec2(2.4),vec2(cos(TIME*0.25)*0.5*anim_rate, sin(TIME*0.1)*0.5*anim_rate) * ZOOM);\n    \n  vec2 pos = (fragCoord.xy / iResolution.xy) * 1.2 - 0.6 + 0.25*vec2(cos(TIME*0.5),sin(TIME*0.25));\n  float mag = sqrt(length(pos*(6.0 - BASS*0.2)));\n  mag = BASS - mag;\n  float theta = atan(pos.y, pos.x);\n\n  int dim = 0;\n  float x = pos.x;//px;\n  float y = pos.y;\n\n  theta += sin(mag * 1.11) + sin(mag * mag * x * cos(TIME * 0.5) * 5.0)*1.6 + TIME + MID*3.0;\n  mag *= cos(theta * PI * 6.0);\n  x = abs(cos(theta) * mag);\n  y = sin(theta) * mag;\n\n  x*= x;\n  y*= y;\n\n  int mod;\n  for(int i=0;i < MAXIterations;i++)\n  {\n    dim++;\n    x = (x + CET.x) * y * (1.0 - sin(TIME * 0.5) * cos(y*0.5));\n    y += y * (y + CET.y*4.0);\n    if(cos(x) > 0.0) x += 0.1;\n    else x = x*1.1 - 0.9;\n    \n    if(cos(x) < 0.5)\n    {\n      dim = i;\n      break;\n    }\n  }\n\n  float f = (float(dim) / float(MAXIterations));\n  // calculate fragment color from what would be a palette lookup (hack but also perf test)\n  vec3 ret = vec3(0);\n  ret.r = cos(f * PI * 3.9 + PALETTE_SHIFT * 0.5 + BASS) * 0.5 + 0.5;\n  ret.g = cos(f * PI * 3.7 + PALETTE_SHIFT * 0.5) * 0.5 + 0.5;\n  ret.b = cos(f * PI * 3.2 + PALETTE_SHIFT * 0.5 + TREB) * 0.5 + 0.5; // mult_add is one instruction =D\n\n  fragColor = vec4(ret,1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XslSDj","date":"1406905091","viewed":296,"name":"Teeth You can trig your sink in","username":"silicon","description":"VERY brutal port of a viz I made earlier (that was native though, and I had a frame buffer and blending).","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["fractal","math","visualization","audio","trig","thecolorsduke"],"hasliked":0,"parentid":"","parentname":""}}