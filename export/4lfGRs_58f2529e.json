{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Created by S.Guillitte \n\n\nfloat hash( in vec2 p ) \n{\n    return fract(sin(p.x*15.32+p.y*35.78) * 43758.23);\n}\n\nvec2 hash2(vec2 p)\n{\n\treturn vec2(hash(p*.754),hash(1.5743*p.yx+4.5891))-.5;\n}\n\n\nvec2 add = vec2(1.0, 0.0);\n\nvec2 noise2(vec2 x)\n{\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n    \n    return mix(mix( hash2(p),          hash2(p + add.xy),f.x),\n                    mix( hash2(p + add.yx), hash2(p + add.xx),f.x),f.y);\n    \n}\n\n\n\nvec2 fbm2(vec2 x)\n{\n    vec2 r = x;\n    float a = 1.;\n    \n    for (int i = 0; i < 6; i++)\n    {\n        r += noise2(r*a)/a;\n        //a*=.47;\n    }     \n    return (r-x)*sqrt(a);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = 2.*fragCoord.xy / iResolution.yy;\n    uv*=20.;\n    vec2 p = fbm2(uv+1.*iTime)+2.;\n    float c = length(p);\n    vec3 col;\n    col=vec3(0.6,0.7,0.8+.05*p.y)*c/5.;\n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4lfGRs","date":"1424166733","viewed":596,"name":"Concrete texture","username":"guil","description":"2D procedural texture","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["2d","noise","concrete"],"hasliked":0,"parentid":"","parentname":""}}