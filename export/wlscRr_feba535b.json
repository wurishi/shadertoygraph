{"ver":"0.1","info":{"id":"wlscRr","date":"1591365177","viewed":82,"name":"MK_projection","username":"margotaro","description":"CG course","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["3d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int TRIANGLES_COUNT = 60;\nconst int VERTICES_COUNT = 38;\n\nconst vec3 vertices[VERTICES_COUNT] = vec3[] (\n    vec3(0.2, 1.4, 0.),//0\n    vec3(0.4,  1.4, 0.),//1 \n    vec3(0.4,  -1.6, 0.),//2 \n    vec3(0.2,  -1.6, 0.),//3\n    vec3(0.2,  0., 0.),//4\n    vec3(0.,  0., 0.),//5\n    vec3(-0.2, 1.4, 0.),//6\n    vec3(-0.2,  0., 0.),//7\n    vec3(0.,  -0.8, 0.),//8\n    vec3(-0.4,  1.4, 0.),//9\n    vec3(-0.2,  -1.6, 0.),//10\n    vec3(-0.4,  -1.6, 0.),//11\n    vec3(0.2, 1.4, 0.2),//12\n    vec3(0.4,  1.4, 0.2),//13 \n    vec3(0.4,  -1.6, 0.2),//14 \n    vec3(0.2,  -1.6, 0.2),//15\n    vec3(0.2,  0., 0.2),//16\n    vec3(0.,  0., 0.2),//17\n    vec3(-0.2, 1.4, 0.2),//18\n    vec3(-0.2,  0., 0.2),//19\n    vec3(0.,  -0.8, 0.2),//20\n    vec3(-0.4,  1.4, 0.2),//21\n    vec3(-0.2,  -1.6, 0.2),//22\n    vec3(-0.4,  -1.6, 0.2),//23\n    vec3(-0.4,  1.4, 0.4),//24\n    vec3(-0.4,  1.4, 0.6),//25\n    vec3(-0.4,  0.2, 0.2),//26\n    vec3(-0.4,  -0.2, 0.3),//27\n    vec3(-0.4,  -0.6, 0.2),//28\n    vec3(-0.4,  -1.6, 0.4),//29\n    vec3(-0.4,  -1.6, 0.6),//30\n    vec3(-0.2,  1.4, 0.4),//31\n    vec3(-0.2,  1.4, 0.6),//32\n    vec3(-0.2,  0.2, 0.2),//33\n    vec3(-0.2,  -0.2, 0.3),//34\n    vec3(-0.2,  -0.6, 0.2),//35\n    vec3(-0.2,  -1.6, 0.4),//36\n    vec3(-0.2,  -1.6, 0.6)//37\n);\n\nconst int trinagleIndexes[TRIANGLES_COUNT * 3] = int[] (\n    0, 1, 2,//M1\n    2, 0, 3,//M1\n    0, 4, 5,//M1\n    6, 7, 5,//M1\n    8, 7, 4,//M1\n    6, 9, 10,//M1\n    9, 10, 11,//M1\n    12, 13, 14,//M2\n    14, 12, 15,//M2\n    12, 16, 17,//M2\n    18, 19, 17,//M2\n    20, 19, 16,//M2\n    18, 21, 22,//M2\n    21, 22, 23,//M2\n    1, 2, 13,//MS\n    14, 2, 13,//MS\n    14, 2, 15,//MS\n    3, 2, 15,//MS\n    4, 16, 15,//MS\n    3, 4, 15,//MS\n    4, 16, 20,//MS\n    4, 8, 20,//MS\n    7, 8, 20,//MS\n    19, 7, 20,//MS\n    7, 19, 22,//MS\n    7, 10, 22,//MS\n    11, 10, 22,//MS\n    11, 23, 22,//MS  \n    11, 23, 9,//MS   \n    9, 23, 21,//MS   \n    9, 18, 21,//MS      \n    9, 18, 6,//MS \n    18, 6, 5,//MS   \n    18, 17, 5,//MS   \n    0, 5, 17,//MS      \n    0, 17, 12,//MS      \n    0, 1, 12,//MS    \n    13, 1, 12,//MS     \n    24, 25, 26,//K1       \n    25, 26, 27,//K1          \n    28, 26, 27,//K1          \n    28, 29, 27,//K1        \n    27, 30, 29,//K1    \n    31, 32, 33,//K2       \n    32, 33, 34,//K2          \n    35, 33, 34,//K2          \n    35, 36, 34,//K2        \n    34, 37, 36,//K2     \n    26, 33, 24,//KS          \n    24, 33, 31,//KS          \n    24, 31, 32,//KS        \n    24, 32, 25,//KS    \n    32, 25, 27,//KS       \n    27, 32, 34,//KS          \n    27, 34, 30,//KS          \n    34, 30, 37,//KS        \n    36, 30, 37,//KS         \n    36, 30, 29,//KS        \n    29, 35, 28,//KS         \n    29, 35, 36//KS \n);\n    \nconst vec3 triangleColor[TRIANGLES_COUNT] = vec3[] (\n    vec3(0.3, 0.5, 0.9),\n    vec3(0.3, 0.5, 0.9),\n    vec3(0.3, 0.5, 0.9),\n    vec3(0.3, 0.5, 0.9),\n    vec3(0.3, 0.5, 0.9),\n    vec3(0.3, 0.5, 0.9),\n    vec3(0.3, 0.5, 0.9),\n    vec3(0.3, 0.5, 0.5),\n    vec3(0.3, 0.5, 0.5),\n    vec3(0.3, 0.5, 0.5),\n    vec3(0.3, 0.5, 0.5),\n    vec3(0.3, 0.5, 0.5),\n    vec3(0.3, 0.5, 0.5),\n    vec3(0.3, 0.5, 0.5),\n    vec3(0.3, 0.5, 0.),\n    vec3(0.3, 0.5, 0.),\n    vec3(0.3, 0.5, 0.),\n    vec3(0.3, 0.5, 0.),\n    vec3(0.3, 0., 0.),\n    vec3(0.3, 0., 0.),\n    vec3(0.3, 0., 0.),\n    vec3(0.3, 0., 0.),\n    vec3(0.3, 0., 0.),\n    vec3(0.3, 0., 0.),\n    vec3(0.3, 0., 0.),\n    vec3(0.3, 0., 0.),\n    vec3(0.3, 0., 0.),\n    vec3(0.3, 0., 0.),\n    vec3(0.3, 0., 0.),\n    vec3(0.3, 0., 0.),\n    vec3(0.3, 0.5, 0.),\n    vec3(0.3, 0.5, 0.),\n    vec3(0.3, 0.5, 0.),\n    vec3(0.3, 0.5, 0.),\n    vec3(0.3, 0.5, 0.),\n    vec3(0.3, 0.5, 0.),\n    vec3(0.3, 0.5, 0.),\n    vec3(0.3, 0.5, 0.),\n    vec3(0.3, 0., 0.),\n    vec3(0.3, 0., 0.),\n    vec3(0.3, 0., 0.),\n    vec3(0.3, 0., 0.),\n    vec3(0.3, 0., 0.),\n    vec3(0.3, 0., 0.),\n    vec3(0.3, 0., 0.),\n    vec3(0.3, 0., 0.),\n    vec3(0.3, 0., 0.),\n    vec3(0.3, 0., 0.),    \n    vec3(0.3, 0.5, 0.9),\n    vec3(0.3, 0.5, 0.9),\n    vec3(0.3, 0.5, 0.9),\n    vec3(0.3, 0.5, 0.9),\n    vec3(0.3, 0.5, 0.9),\n    vec3(0.3, 0.5, 0.9),\n    vec3(0.3, 0.5, 0.9),\n    vec3(0.3, 0.5, 0.9),\n    vec3(0.3, 0.5, 0.9),\n    vec3(0.3, 0.5, 0.9),\n    vec3(0.3, 0.5, 0.9),\n    vec3(0.3, 0.5, 0.9)\n);\n\nmat4 t() {\n    float time = iTime * 0.5;\n    return mat4(\n        vec4(1. * cos(time), 0., sin(time), 0.),\n        vec4(0., 1., 0., -1.),\n        vec4(-sin(time), 0., 1.* cos(time), 5.),\n        vec4(0., 0., 0., 1.)\n    );\n}\n\nvec3 v(int i) {\n    return (vec4(vertices[i], 1.) * t()).xyz;\n}\n\nvec3 normalOfTriangle(int index) {\n    vec3 root = v(trinagleIndexes[index * 3]);\n    vec3 d1 = v(trinagleIndexes[index * 3 + 1]) - root;\n    vec3 d2 = v(trinagleIndexes[index * 3 + 2]) - root;\n    return cross(d1, d2);\n}\n\nbool sameSide(vec3 base, vec3 p1, vec3 p2) {\n    return dot(cross(base, p1), cross(base, p2)) >= 0.;\n}\n\nbool pointInsideTriangle(vec3 point, int i) {\n    vec3 a = v(trinagleIndexes[i * 3]);\n    vec3 b = v(trinagleIndexes[i * 3 + 1]);\n    vec3 c = v(trinagleIndexes[i * 3 + 2]);\n    return sameSide(b - a, point - a, c - a) &&\n        sameSide(c - b, point - b, a - b) &&\n        sameSide(a - c, point - c, b - c);\n}\n\nbool testTriangle(int index, vec3 ray, out float colissionZ) {\n    int rootVertexIndex = trinagleIndexes[index * 3];\n    vec3 rootVertex = v(rootVertexIndex);\n    vec3 normal = normalOfTriangle(index);\n    \n    float t = dot(rootVertex, normal) / dot(ray, normal);\n    vec3 intersectionPoint = ray * t;\n    \n    colissionZ = intersectionPoint.z;\n    \n    return pointInsideTriangle(intersectionPoint, index);\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = uv * 2. - vec2(1.);\n    \n    bool anyTriangle = false;\n    float minimalZ = 9999.;\n    int i = 0;\n    int triangleIndex = 0;\n    float currentZ = 0.;\n    vec3 ray = vec3(uv, 1.);\n    for (; i < TRIANGLES_COUNT; i++) {\n        if (testTriangle(i, ray, currentZ)) {\n            if (minimalZ > currentZ) {\n                minimalZ = currentZ;\n              triangleIndex = i;\n              anyTriangle = true;\n            }\n        }\n    }\n\n    if (anyTriangle) {\n        fragColor = vec4(triangleColor[triangleIndex].rgb, 1.0);\n    } else {\n        fragColor = vec4(0.22, 0.26, 0.3, 1.0);\n    }\n}","name":"Image","description":"","type":"image"}]}