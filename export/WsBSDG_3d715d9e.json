{"ver":"0.1","info":{"id":"WsBSDG","date":"1554818468","viewed":423,"name":"Flow line","username":"edo_m18","description":"Flow line","likes":26,"published":1,"flags":0,"usePreview":0,"tags":["line","flow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define R iResolution\n\nmat2 rot(float a)\n{\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(s, c, -c, s);\n}\n\nmat3 camera(vec3 ro, vec3 ta)\n{\n    const vec3 up = vec3(0, 1, 0);\n    vec3 cw = normalize(ta - ro);\n    vec3 cu = normalize(cross(cw, up));\n    vec3 cv = normalize(cross(cu, cw));\n    return mat3(cu, cv, cw);\n}\n\nfloat map(vec3 p)\n{\n    mat2 rm = rot(-iTime / 3.0 + length(p));\n    p.xy *= rm;\n    p.zy *= rm;\n    \n    vec3 q = abs(p) - iTime * 0.1;\n    q = abs(q - round(q));\n    \n    float d1 = min(length(q.xy), length(q.yz));\n    float d2 = min(d1, length(q.xz));\n    return min(d1, d2);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2.0 - R.xy) / R.y;\n\n    vec3 ro = vec3(iMouse.xy / R.xy, 5);\n    vec3 ta = vec3(0, 0, 0);\n    \n    vec3 ray = camera(ro, ta) * normalize(vec3(uv, 1.5));\n    \n    float d = 0.0;\n    \n    float dist = 0.0;\n    for (int i = 0; i < 200; i++)\n    {\n        dist = map(ro + ray * d) / 2.0;\n                \n        d += dist;\n    }\n    \n    \n    vec3 col = vec3(d * 0.03);   \n\n    d *= 0.03;\n    fragColor = vec4(1.0 - d, exp(-d), 2.0 * exp(-d / 4.0 - 1.0), 1.0);\n}","name":"Image","description":"","type":"image"}]}