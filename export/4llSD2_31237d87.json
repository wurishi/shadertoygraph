{"ver":"0.1","info":{"id":"4llSD2","date":"1451971267","viewed":829,"name":"WIP Playable archee's Asteroids","username":"pellicus","description":"My first attempt to understand and use the new multipass feature!\nIt's just a work in progress but definetly we could make some cool game on shadertoy!.\nI used the archee's https://www.shadertoy.com/view/4l2GzR asteroids, thx archee!","likes":17,"published":1,"flags":48,"usePreview":0,"tags":["2d","game","input","asteroids","multipass","playable"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"#define DATASIZE_W 16.0\n#define DATASIZE_H 8.0\n\n#define aBULLETS 1.0\n#define aASTEROIDS 2.0\n//-----------------------------------------------------------------------------------\n\nconst float pi = 3.14159265359;\nvec2 sp;\nvec3 color;\n\n#define LOADSAVE()  vec2 r_inx=vec2(0.0);vec2 w_inx=vec2(0.0);\n#define LOAD(vr) vec4 vr = loadValue(r_inx);r_inx+=vec2(1.0,0.0);\n#define SAVE(vr) storeValue(w_inx,vr,fragColor, fragCoord);w_inx+=vec2(1.0,0.0);\n#define aLOAD(arr,inx) loadValue(vec2(inx,arr))\nvec4 loadValue( in vec2 re )\n{\n    return texture( iChannel0, (0.5+re) / iChannelResolution[0].xy, -100.0 );\n}\n\n//-----------------------------------------------------------------------------------\n\nfloat time;\nconst float aspect = 16.0/9.0;\n\nvec2 rotate(vec2 pos,float rot)\n{\n    return vec2( cos(rot)*pos.x + sin(rot)*pos.y, cos(rot)*pos.y - sin(rot)*pos.x);\n}\nvoid draw(float aaval,vec3 color2)\n{\n    color = max(color,color2*aaval);\n\n}\nvec2 loc(vec2 a)\n{\n    return fract(a*vec2(1.0,aspect))/vec2(1.0,aspect); \n}  \n\nvec3 linecolor;\nvoid line(vec2 a,vec2 b)\n{\tfloat linethickness = 2.0/iResolution.x;\n    vec2 s = (fract((sp-a)*vec2(1.0,aspect)+vec2(0.5,0.5))-vec2(0.5,0.5))/vec2(1.0,aspect)+a;\n    if ( dot(b-a,s-a) < 0.0 || dot(b-a,s-a)>dot(b-a,b-a)  ) return;\n    float aaval = (1.0-(abs( (a.x-b.x)*(s.y-a.y)-(a.y-b.y)*(s.x-a.x)  )/linethickness/length(a-b)*2.0));\n    draw(aaval,linecolor);\n}\n\n    \nvoid asteroid(vec2 pos,float rot,float size,float shape)\n{\tfloat linethickness = 2.0/iResolution.x;\n \tvec2 rp = (fract((sp-pos)*vec2(1.0,aspect)+vec2(0.5,0.5)   )-vec2(0.5,0.5))/vec2(1.0,aspect);\n    \n   if ( length(rp) > size) return; \n    \n    float angle = fract(atan( (rp).x, (rp).y )/pi/2.0+rot);\n    float rad = (clamp(sin(angle*pi*7.0)*2.0,-1.0,1.0)+4.0)/10.0 +\n        (clamp(sin(angle*pi*(12.0)+shape)*2.0,-1.0,1.0)+4.0)/10.0;\n    \n    rad *= size;\n    float dist = length(rp);\n    \n    float aaval = 1.0-abs(dist-rad)/linethickness;\n    \n    draw(aaval,vec3(1.0,shape>1.0?1.0:0.0,shape>0.0?1.0:0.0));\n}\n\n\nvoid ship(vec2 pos,float rot,float size,float currentaccel)\n{\n\n    line(pos+rotate(vec2(0,0.8),rot)*size,pos+rotate(vec2(0.5,-0.5)*size,rot));\n    line(pos+rotate(vec2(0,0.8),rot)*size,pos+rotate(vec2(-0.5,-0.5)*size,rot));\n    line(pos+rotate(vec2(0.5,-0.3),rot)*size,pos+rotate(vec2(-0.5,-0.3)*size,rot));\n\t\n    linecolor = vec3(1.0,1.0,0.0);\n    if (currentaccel!=0.0  && fract(time*8.0)<0.5)\n    {\n    line(pos+rotate(vec2(0,-1.0),rot)*size,pos+rotate(vec2(0.25,-0.3)*size,rot));\n    line(pos+rotate(vec2(0,-1.0),rot)*size,pos+rotate(vec2(-0.25,-0.3)*size,rot));\n    }\n    \n    \n}\n//----------------------------------------------------------------------------------------------\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    LOADSAVE()\n\tvec2 uv =  fragCoord.xy / iResolution.xy;\n    time = iTime;\n   LOAD(gameState);\n   LOAD(playerPosVel);\n   LOAD(playerRotAccFireLives);\n    \n     color = vec3(0,0,0);\n    sp = fragCoord.xy / iResolution.xy;\n    sp.y /= aspect;\n    uv = sp.xy;\n\tfragColor = vec4(uv,0.0,1.0);\n \tlinecolor = playerPosVel.x>1.0?vec3(1.0,0.0,0.0):vec3(1.0,1.0,1.0);   \n    ship(playerPosVel.xy,playerRotAccFireLives.x*2.0*pi,0.025,playerRotAccFireLives.y);\n    \n    float bn = (playerRotAccFireLives.z*DATASIZE_W);\n    linecolor = vec3(1.0,1.0,1.0);\n    for(float i=0.0;i<DATASIZE_W;i+=1.0)\n    {\n    \n        vec4 b = aLOAD(aBULLETS,i);\n      \tif(b.w<0.9)\n        \tline(b.xy,b.xy+vec2(0.001,0.0));\n        \n   \t\tvec4 a = aLOAD(aASTEROIDS,i);\n        if(a.w>0.0)\n        {    asteroid(a.xy,a.z*2.0*pi,0.05,i);\n    \n        }\n    }\n\tfragColor = vec4(color.x,color.y,color.z,0);\n}\n\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n#define DATASIZE_W 16.0\n#define DATASIZE_H 8.0\n\n#define aBULLETS 1.0\n#define aASTEROIDS 2.0\n\n//----------------------------------------------------------------------------------------------\n\nvec4 loadValue( in vec2 re )\n{\n    return texture( iChannel0, (0.5+re) / iChannelResolution[0].xy, -100.0 );\n}\n\n\nfloat isInside( vec2 p, vec2 c ) { vec2 d = abs(p-0.5-c) - 0.5; return -max(d.x,d.y); }\nfloat isInside( vec2 p, vec4 c ) { vec2 d = abs(p-0.5-c.xy-c.zw*0.5) - 0.5*c.zw - 0.5; return -max(d.x,d.y); }\n\nvoid storeValue( in vec2 re, in vec4 va, inout vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = ( isInside(fragCoord,re) > 0.0 ) ? va : fragColor;\n}\nvoid storeValue( in vec4 re, in vec4 va, inout vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = ( isInside(fragCoord,re) > 0.0 ) ? va : fragColor;\n}\n\n#define LOADSAVE()  vec2 r_inx=vec2(0.0);vec2 w_inx=vec2(0.0);fragColor = vec4(0.0);\n#define LOAD(vr) vec4 vr = loadValue(r_inx);r_inx+=vec2(1.0,0.0);\n#define SAVE(vr) storeValue(w_inx,vr,fragColor, fragCoord);w_inx+=vec2(1.0,0.0);\n#define aLOAD(arr,inx) loadValue(vec2(inx,arr))\n#define aSAVE(arr,inx,v) storeValue(vec2(inx,arr),v,fragColor, fragCoord)\n\nconst float KEY_SPACE = 32.5/256.0;\nconst float KEY_LEFT  = 37.5/256.0;\nconst float KEY_UP    = 38.5/256.0;\nconst float KEY_RIGHT = 39.5/256.0;\nconst float KEY_DOWN  = 40.5/256.0;\n\nvec4 GetInput()\n{    \n \t\n    float moveRight = texture( iChannel1, vec2(KEY_RIGHT,0.25) ).x;\n    float moveLeft  = texture( iChannel1, vec2(KEY_LEFT,0.25) ).x;\n    float moveUp = texture( iChannel1, vec2(KEY_UP,0.25) ).x;\n    float moveDown  = texture( iChannel1, vec2(KEY_DOWN,0.25) ).x;\n    vec2  axis=vec2(moveRight-moveLeft,moveUp-moveDown);       \n    float space = texture( iChannel1, vec2(KEY_SPACE,0.25) ).x;\n    return vec4(axis.x,axis.y,iMouse.z,space);\n}\n//----------------------------------------------------------------------------------------------\nconst float pi = 3.14159265359;\n\nfloat noize(float x)\n{\n    return fract(sin(x*9342.0)*1435.0);\n}\nfloat noize2(float x)\n{\n    return fract(cos(x*932.0)*2435.0);\n}\nvec2 noize2d(float x)\n{\n    return vec2(noize(x),noize2(x));\n}\nconst float aspect = 16.0/9.0;\nvec2 sp;\nvec2 loc(vec2 a)\n{\n    return fract(a*vec2(1.0,aspect))/vec2(1.0,aspect);\n} \n\nvec2 vdir(float rot)\n{\n    rot = rot*pi*2.0;\n\treturn vec2(sin(rot),cos(rot));\n   \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n    if( fragCoord.x > DATASIZE_W || fragCoord.y>DATASIZE_H ) discard;\n    \n    LOADSAVE()\n\n    sp = fragCoord.xy / iResolution.xy;\n    \n    LOAD(gameState);\n    LOAD(playerPosVel);\n    LOAD(playerRotAccFireLives);\n    \n    float gameSpeed = 0.002;\n    \n    if(iFrame==0)\n        gameState.x = 0.0;\n    \n    if(gameState.x == 0.0)\n    {\n    \tplayerPosVel     = vec4(0.5,2.0,0.0,0.0);\n        playerRotAccFireLives =vec4(0.5,0.0,0.0,0.3);\n        gameState.x =0.1;\n         for(float i=0.0;i<DATASIZE_W;i+=1.0)\n  \t\t {\t  vec2 p = noize2d(iTime+i);\n              vec4 a= vec4(p.x,p.y,p.x,p.y );\n          \t\tif(i>6.0)a.w =0.0;\n  \t\t\t  aSAVE(aASTEROIDS,i,a);\n         }\n        \n    }\n    \n   \tvec4 inp=GetInput();\n    if(inp.y>0.5)\n    {\n    \tplayerPosVel.zw = vdir(playerRotAccFireLives.x);\n    }\n\n    \n    playerRotAccFireLives.y=max(inp.y,0.0);\n    \n    playerPosVel.xy +=  playerPosVel.zw*gameSpeed;\n   \tplayerPosVel.zw*=0.99;\n\t\n    playerRotAccFireLives.x+= inp.x*0.02;\n     float bnew = floor(mod(iTime*4.0,DATASIZE_W)) ;\n    vec4 bdata=vec4(0.0);\n    if(inp.w>0.5 )\n    {\t\n\t    bdata=vec4(playerPosVel.x,playerPosVel.y, playerRotAccFireLives.x,0.0);\n        \n    }\n \n    for(float i=0.0;i<DATASIZE_W;i+=1.0)\n    {\n       \n         vec4 b = aLOAD(aBULLETS,i);\n        if(bnew!=i)\n        {\n       \t b.xy += vdir(b.z)*gameSpeed*2.0;\n\t\t b.w+=0.005;\n         if(b.w>0.8)b=vec4(-1.0,0.0,0.0,.81);\n        }else b=inp.w>0.5?bdata:b;\n         aSAVE(aBULLETS,i,b);\n    }\n     if(iFrame!=0)\n    for(float i=0.0;i<DATASIZE_W;i+=1.0)\n    {\n       vec4 a = aLOAD(aASTEROIDS,i);\n         a.xy += vdir(a.z)*gameSpeed*.5;\n        \n        if(a.w>0.0 && length(loc(playerPosVel.xy)-loc(a.xy))<.04)\n            gameState.x = 0.0;\n        \n\t  \tfor(float j=0.0;j<DATASIZE_W;j+=1.0)\n    \t{\n             vec4 b = aLOAD(aBULLETS,j);\n             if(b.w<0.8 && length(loc(b.xy)-loc(a.xy))<0.04)\n                 a.w=0.0;  \n        }\n        \n         aSAVE(aASTEROIDS,i,a);\n    }\n    SAVE(gameState);\n    SAVE(playerPosVel);\n    SAVE(playerRotAccFireLives);\n    \n\n    \n}","name":"Buf A","description":"","type":"buffer"}]}