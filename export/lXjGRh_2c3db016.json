{"ver":"0.1","info":{"id":"lXjGRh","date":"1708211593","viewed":175,"name":"EnergyPreservationBloom","username":"TimothyLottes","description":"View into multi-sample energy preservation with bloom","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["bloom","energy","preservation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//\n// CHANGE THIS MODE DEFINE TO TRY DIFFERENT OPTIONS\n//  \n// Sorry, only looks right at 1920x1080 non-full-screen.\n// Sorry, 4xSGSSAA is being used as a junk place holder for some real AA\n//\n\n// 0 Red ......... NoAA then Tonemap\n// 1 Orange ...... Box 4xSGSSAA then Tonemap \n// 2 Gold ........ Tonemap then Box 4xSGSSAA\n// 3 Yellow ...... Tonemap then Box 4xSGSSAA then Untonemap then Bloom then Tonemap\n// 4 Lime ........ Bloom then Tonemap then Box 4xSGSSAA\n#define MODE 0\n\n\n//================================================================================\n\n// Amount of HDR {1 := none, 8192 := maximum}\n#define HDR 8192\n\n// Shape of curve\n#define SHAPE 64\n\n//================================================================================\n\n#define F1 float\n#define F2 vec2\n#define F3 vec3\n#define F4 vec4\n\n// Convert from linear to sRGB.\nF1 Srgb(F1 c){return(c<0.0031308?c*12.92:1.055*pow(c,0.41666)-0.055);}\n\n// Convert from sRGB to linear.\nF1 Linear(F1 c){return(c<=0.04045)?c/12.92:pow((c+0.055)/1.055,2.4);}    \n\n//\n// Stupid Tonemapper\n//\nF1 Tone(F1 c){c*=1.0/(1.0+c);return c*c;}\n\nF1 Untone(F1 c){c=sqrt(c);c*=1.0/max(1.0/16384.0,1.0-c);return c;}\n\n//\n// Semi-Poor Quality Temporal Noise\n//\n\n// Base.\n// Ripped ad modified from: https://www.shadertoy.com/view/4djSRW\nF1 Noise(F2 p,F1 x){\n p+=x;\n F3 p3=fract(F3(p.xyx)*10.1031);\n p3+=dot(p3,p3.yzx+19.19);\n return fract((p3.x+p3.y)*p3.z)*2.0-1.0;}\n\n// Step 1 in generation of the dither source texture.\nF1 Noise1(F2 uv,F1 n){\n F1 a=1.0,b=2.0,c=-12.0,t=1.0;   \n return (1.0/max(a*4.0+b*4.0,-c))*(\n  Noise(uv+F2(-1.0,-1.0)*t,n)*a+\n  Noise(uv+F2( 0.0,-1.0)*t,n)*b+\n  Noise(uv+F2( 1.0,-1.0)*t,n)*a+\n  Noise(uv+F2(-1.0, 0.0)*t,n)*b+\n  Noise(uv+F2( 0.0, 0.0)*t,n)*c+\n  Noise(uv+F2( 1.0, 0.0)*t,n)*b+\n  Noise(uv+F2(-1.0, 1.0)*t,n)*a+\n  Noise(uv+F2( 0.0, 1.0)*t,n)*b+\n  Noise(uv+F2( 1.0, 1.0)*t,n)*a+\n 0.0);}\n    \n// Step 2 in generation of the dither source texture.\nF1 Noise2(F2 uv,F1 n){\n F1 a=1.0,b=2.0,c=-2.0,t=1.0;   \n return (1.0/(a*4.0+b*4.0))*(\n  Noise1(uv+F2(-1.0,-1.0)*t,n)*a+\n  Noise1(uv+F2( 0.0,-1.0)*t,n)*b+\n  Noise1(uv+F2( 1.0,-1.0)*t,n)*a+\n  Noise1(uv+F2(-1.0, 0.0)*t,n)*b+\n  Noise1(uv+F2( 0.0, 0.0)*t,n)*c+\n  Noise1(uv+F2( 1.0, 0.0)*t,n)*b+\n  Noise1(uv+F2(-1.0, 1.0)*t,n)*a+\n  Noise1(uv+F2( 0.0, 1.0)*t,n)*b+\n  Noise1(uv+F2( 1.0, 1.0)*t,n)*a+\n 0.0);}\n\n// Compute temporal dither from integer pixel position uv.\nF1 Noise3(F2 uv){return Noise2(uv,fract(iTime));}    \n\n// Energy preserving dither, for {int pixel pos,color,amount}.\nF1 Noise4(F2 uv,F1 c,F1 a){\n // Grain value {-1 to 1}.\n F1 g=Noise3(uv)*2.0;\n // Step size for black in non-linear space.\n F1 rcpStep=1.0/(256.0-1.0);\n // Estimate amount negative which still quantizes to zero.\n F1 black=0.5*Linear(rcpStep);\n // Estimate amount above 1.0 which still quantizes to 1.0.\n F1 white=2.0-Linear(1.0-rcpStep);\n // Add grain.\n return clamp(c+g*min(c+black,min(white-c,a)),0.0,1.0);}\n\n//\n// Pattern\n//\n\n// Dummy shader given pixel position.\nF1 Shade(F2 p){\n p.xy+=sin(iTime)*2.0;\n F2 pp=F2(p.x+p.y/16.0,p.y+p.x/16.0);\n pp*=pp;\n #if 0\n  F1 x=sin(pp.x/800.0)>0.0?0.5:0.0;\n  F1 y=sin(pp.y/1000.0)>0.0?0.5:0.0;\n #else\n  F1 x=fract(pp.x/(800.0*6.0));\n  F1 y=fract(pp.y/(1000.0*6.0));\n  // Map {0 to 1} to abs({-1 to 1}).\n  x=abs(x*2.0-1.0);\n  y=abs(y*2.0-1.0);\n  // Make exponential.\n  x=F1(HDR)*pow(x,F1(SHAPE));\n  y=F1(HDR)*pow(y,F1(SHAPE)); \n #endif\n return x+y;}\n\n// 4xMSAA pattern for quad given integer coordinates.\n//\n//  . x . . | < pixel\n//  . . . x |\n//  x . . .\n//  . . x .\n//\n//  01\n//  23\n//\nF2 Quad4(F2 pp){\n int q=(int(pp.x)&1)+((int(pp.y)&1)<<1);\n if(q==0)return pp+F2( 0.25,-0.25);\n if(q==1)return pp+F2( 0.25, 0.25);\n if(q==2)return pp+F2(-0.25,-0.25);\n         return pp+F2(-0.25, 0.25);}\n\n// Rotate {0.0,r} by a {-1.0 to 1.0}. \nF2 Rot(F1 r,F1 a){return F2(r*cos(a*3.14159),r*sin(a*3.14159));}\n\n// Rotate {pp} by a {0.0 to 1.0}. \nF2 Rot2(F2 pp,F1 a){\n a*=3.14159*2.0;\n F1 cosA=cos(a);\n F1 sinA=sin(a);\n return F2(dot(pp,F2(cosA,sinA)),dot(pp,F2(-sinA,cosA)));}\n\n//\n// RESOLVES\n//\n    \n//  x\n//\nF1 ResolveNoAA(F2 pp){return Tone(Shade(pp));}\n\n//  . . x .\n//  x . . .\n//  . . . x\n//  . x . .\n//\nF1 Resolve_Box4xSGSSAA_Tone(F2 pp){return\n Tone(\n  Shade(pp+F2( 0.125,-0.375))*0.25+\n  Shade(pp+F2(-0.375,-0.125))*0.25+\n  Shade(pp+F2( 0.375, 0.125))*0.25+\n  Shade(pp+F2(-0.125, 0.375))*0.25);}\n\nF1 Resolve_Tone_Box4xSGSSAA(F2 pp){return\n Tone(Shade(pp+F2( 0.125,-0.375)))*0.25+\n Tone(Shade(pp+F2(-0.375,-0.125)))*0.25+\n Tone(Shade(pp+F2( 0.375, 0.125)))*0.25+\n Tone(Shade(pp+F2(-0.125, 0.375)))*0.25;}\n\n\nF1 GausAR(F2 pp){return\n  Shade(pp+F2( 0.125,-0.375))*0.25+\n  Shade(pp+F2(-0.375,-0.125))*0.25+\n  Shade(pp+F2( 0.375, 0.125))*0.25+\n  Shade(pp+F2(-0.125, 0.375))*0.25;}\n\nvoid GausA(inout F1 sumC,inout F1 sumW,F2 pp,F2 mm){\n F1 c=Untone(Resolve_Tone_Box4xSGSSAA(pp));\n F2 vv=mm-pp;\n F1 w=exp2(-2.0*dot(vv,vv));    \n sumC+=c*w; sumW+=w;}   \n\n//\n//  . x x x . \n//  x x x x x \n//  x x x x x \n//  x x x x x \n//  . x x x . \n//\nF1 Resolve_Box4xSGSSAA_Bloom_Tone(F2 pp){\n F1 sumC=0.0;\n F1 sumW=0.0;\n GausA(sumC,sumW,pp+F2(-1.0,-2.0),pp);\n GausA(sumC,sumW,pp+F2( 0.0,-2.0),pp);\n GausA(sumC,sumW,pp+F2( 1.0,-2.0),pp);\n GausA(sumC,sumW,pp+F2(-2.0,-1.0),pp);\n GausA(sumC,sumW,pp+F2(-1.0,-1.0),pp);\n GausA(sumC,sumW,pp+F2( 0.0,-1.0),pp);\n GausA(sumC,sumW,pp+F2( 1.0,-1.0),pp);\n GausA(sumC,sumW,pp+F2( 2.0,-1.0),pp);\n GausA(sumC,sumW,pp+F2(-2.0, 0.0),pp);\n GausA(sumC,sumW,pp+F2(-1.0, 0.0),pp);\n GausA(sumC,sumW,pp+F2( 0.0, 0.0),pp);\n GausA(sumC,sumW,pp+F2( 1.0, 0.0),pp);\n GausA(sumC,sumW,pp+F2( 2.0, 0.0),pp);\n GausA(sumC,sumW,pp+F2(-2.0, 1.0),pp);\n GausA(sumC,sumW,pp+F2(-1.0, 1.0),pp);\n GausA(sumC,sumW,pp+F2( 0.0, 1.0),pp);\n GausA(sumC,sumW,pp+F2( 1.0, 1.0),pp);\n GausA(sumC,sumW,pp+F2( 2.0, 1.0),pp);\n GausA(sumC,sumW,pp+F2(-1.0, 2.0),pp);\n GausA(sumC,sumW,pp+F2( 0.0, 2.0),pp);\n GausA(sumC,sumW,pp+F2( 1.0, 2.0),pp);\n return Tone(sumC/sumW);}\n\n\nvoid GausC(inout F1 sumC,inout F1 sumW,F2 pp,F2 mm){\n F1 c=Shade(pp);\n F2 vv=mm-pp;\n F1 w=exp2(-2.0*dot(vv,vv));    \n sumC+=c*w; sumW+=w;}   \n\nvoid GausB(inout F1 sumC,inout F1 sumW,F2 pp,F2 mm){\n GausC(sumC,sumW,pp+F2( 0.125,-0.375),mm);\n GausC(sumC,sumW,pp+F2(-0.375,-0.125),mm);\n GausC(sumC,sumW,pp+F2( 0.375, 0.125),mm);\n GausC(sumC,sumW,pp+F2(-0.125, 0.375),mm);}\n\nF1 ShadeG(F2 pp){\n F1 sumC=0.0;\n F1 sumW=0.0;\n GausB(sumC,sumW,pp+F2(-1.0,-2.0),pp);\n GausB(sumC,sumW,pp+F2( 0.0,-2.0),pp);\n GausB(sumC,sumW,pp+F2( 1.0,-2.0),pp);\n GausB(sumC,sumW,pp+F2(-2.0,-1.0),pp);\n GausB(sumC,sumW,pp+F2(-1.0,-1.0),pp);\n GausB(sumC,sumW,pp+F2( 0.0,-1.0),pp);\n GausB(sumC,sumW,pp+F2( 1.0,-1.0),pp);\n GausB(sumC,sumW,pp+F2( 2.0,-1.0),pp);\n GausB(sumC,sumW,pp+F2(-2.0, 0.0),pp);\n GausB(sumC,sumW,pp+F2(-1.0, 0.0),pp);\n GausB(sumC,sumW,pp+F2( 0.0, 0.0),pp);\n GausB(sumC,sumW,pp+F2( 1.0, 0.0),pp);\n GausB(sumC,sumW,pp+F2( 2.0, 0.0),pp);\n GausB(sumC,sumW,pp+F2(-2.0, 1.0),pp);\n GausB(sumC,sumW,pp+F2(-1.0, 1.0),pp);\n GausB(sumC,sumW,pp+F2( 0.0, 1.0),pp);\n GausB(sumC,sumW,pp+F2( 1.0, 1.0),pp);\n GausB(sumC,sumW,pp+F2( 2.0, 1.0),pp);\n GausB(sumC,sumW,pp+F2(-1.0, 2.0),pp);\n GausB(sumC,sumW,pp+F2( 0.0, 2.0),pp);\n GausB(sumC,sumW,pp+F2( 1.0, 2.0),pp);\n return sumC/sumW;}\n\nF1 Resolve_Bloom_Tone_Box4xSGSSAA(F2 pp){return\n Tone(ShadeG(pp+F2( 0.125,-0.375)))*0.25+\n Tone(ShadeG(pp+F2(-0.375,-0.125)))*0.25+\n Tone(ShadeG(pp+F2( 0.375, 0.125)))*0.25+\n Tone(ShadeG(pp+F2(-0.125, 0.375)))*0.25;}\n\n\n#define SHIT 1\n\nvoid SillyS(inout F1 sumC,inout F1 sumW,F2 pp,F2 mm){\n F1 c=Shade(pp);\n c*=1.0/F1(HDR);\n F1 xx=1.0-(pp.x/iResolution.x);\n xx*=xx;\n c*=xx;\n // Grain value {0 to 1}.\n// F1 g=Noise3(pp)+0.5;\n F1 g=Noise(pp,fract(iTime))*0.5+0.5;\n#if SHIT\nc=sqrt(c);\n#endif\n c=(c>=g)?1.0:0.0;\n F2 vv=mm-pp;\n F1 w=exp2(-4.0*dot(vv,vv));\n// w*=w;\n#if SHIT\nw=sqrt(w);\n#endif\n sumC+=c*w; sumW+=w;}   \n\nvoid SillyQ(inout F1 sumC,inout F1 sumW,F2 pp,F2 mm){\n F2 a=F2(1.0/16.0,1.0/16.0);\n SillyS(sumC,sumW,pp+F2( 1.0, 1.0)*a,mm);\n SillyS(sumC,sumW,pp+F2(-1.0,-3.0)*a,mm);\n SillyS(sumC,sumW,pp+F2(-3.0,-2.0)*a,mm);\n SillyS(sumC,sumW,pp+F2( 4.0,-1.0)*a,mm);\n SillyS(sumC,sumW,pp+F2(-5.0,-2.0)*a,mm);\n SillyS(sumC,sumW,pp+F2( 2.0, 5.0)*a,mm);\n SillyS(sumC,sumW,pp+F2( 5.0, 3.0)*a,mm);\n SillyS(sumC,sumW,pp+F2( 3.0,-5.0)*a,mm);\n SillyS(sumC,sumW,pp+F2(-2.0, 6.0)*a,mm);\n SillyS(sumC,sumW,pp+F2( 0.0,-7.0)*a,mm);\n SillyS(sumC,sumW,pp+F2(-4.0,-6.0)*a,mm);\n SillyS(sumC,sumW,pp+F2(-6.0, 4.0)*a,mm);\n SillyS(sumC,sumW,pp+F2(-8.0, 0.0)*a,mm);\n SillyS(sumC,sumW,pp+F2( 7.0,-4.0)*a,mm);\n SillyS(sumC,sumW,pp+F2( 6.0, 7.0)*a,mm);\n SillyS(sumC,sumW,pp+F2(-7.0,-8.0)*a,mm);}\n\n\n// Binary 16x AA resolve.\nF1 Silly(F2 pp){\n F1 sumC=0.0;\n F1 sumW=0.0;\n SillyQ(sumC,sumW,pp+F2(-0.5,-0.5),pp);\n SillyQ(sumC,sumW,pp+F2( 0.5,-0.5),pp);\n SillyQ(sumC,sumW,pp+F2(-0.5, 0.5),pp);\n SillyQ(sumC,sumW,pp+F2( 0.5, 0.5),pp);\n F1 c=sumC/sumW;\n#if SHIT\n c*=c;\n#endif\n return c;}\n\n\n//\n// ENTRY\n//\n\nvoid mainImage(out F4 fragColor,in F2 fragCoord){\n F2 pp=fragCoord;\n F1 cc=0.0;\n int ss=MODE;\n // Red\n if(ss==0){\n  if(pp.y<8.0){fragColor.xyz=F3(1.0,0.0,0.0);return;}\n  cc=ResolveNoAA(pp);}\n // Orange\n else if(ss==1){\n  if(pp.y<8.0){fragColor.xyz=F3(1.0,0.5,0.0);return;}\n  cc=Resolve_Box4xSGSSAA_Tone(pp);}\n // Gold\n else if(ss==2){\n  if(pp.y<8.0){fragColor.xyz=F3(1.0,0.75,0.0);return;}\n  cc=Resolve_Tone_Box4xSGSSAA(pp);}\n // Yellow\n else if(ss==3){\n  if(pp.y<8.0){fragColor.xyz=F3(1.0,1.0,0.0);return;}\n  cc=Resolve_Box4xSGSSAA_Bloom_Tone(pp);}\n // Lime\n else if(ss==4){\n  if(pp.y<8.0){fragColor.xyz=F3(0.5,1.0,0.0);return;}\n  cc=Resolve_Bloom_Tone_Box4xSGSSAA(pp);}\n // Green\n else if(ss==5){\n  if(pp.y<8.0){fragColor.xyz=F3(0.0,1.0,0.0);return;}\n  cc=Silly(pp);}\n // Output   \n fragColor.x=Srgb(cc);\n fragColor.yxz=fragColor.xxx;}\n","name":"Image","description":"","type":"image"}]}