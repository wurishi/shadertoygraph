{"ver":"0.1","info":{"id":"fsdfRs","date":"1657032058","viewed":113,"name":"Every Julia Set","username":"mattdeeds","description":"Click and drag to explore all the Julia sets.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fractal","noise","julia"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define kIterations 20\n#define kScale 3.0\n#define kSpeed 0.1\n#define kSlope 0.7\n#define kEscapeSize 3.5\n\n\nvec2 cMultiply(in vec2 a, in vec2 b) {\n  return vec2(a.x * a.x - b.y * b.y, 2.0 * a.x * b.y);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = ((fragCoord/iResolution.xy) - 0.5) * kScale * vec2(2.0, 1.0);\n\n    float t = 0.8 * iTime;\n    vec2 a = vec2(uv.xy);\n    \n    float r = cos(0.08123 * t) + 1.0;\n    vec2 a0 = 4.0 * (iMouse.xy / iResolution.xy - 0.5);\n    \n    float previousLength = length(a);\n    float escapeLength = length(a);\n    float escape = 0.0;\n    bool escaped = false;\n    for (int i = 0; i < kIterations; ++i) {\n      if (!escaped) {\n      float len = length(a);\n        if(len < kEscapeSize) {\n          a = cMultiply(a, a) + a0;\n          escape += 1.0;\n          previousLength = len;\n        } else {\n          escapeLength = len;\n          escaped = true;\n        }\n      }\n    }\n    \n    float fraction = (kEscapeSize - escapeLength) / abs(escapeLength - previousLength);\n    vec3 col = vec3(1.0, 1.0, 1.0);\n    if (previousLength == escapeLength) {\n        col = vec3(1.0, 0.4, 0.4);\n    } else if (previousLength < escapeLength) {\n        col = vec3(0.4, 0.4, 1.0);\n    }\n    escape += fraction;\n    escape = pow(escape / float(kIterations), 0.2);\n    \n    col = col * escape;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}