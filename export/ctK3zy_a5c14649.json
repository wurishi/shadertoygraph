{"ver":"0.1","info":{"id":"ctK3zy","date":"1684223512","viewed":118,"name":"shader but i pretend to be black","username":"HaleyHalcyon","description":"based on a programming meme","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["joke"],"hasliked":0,"parentid":"7l3yRX","parentname":"Color latex ripples"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define nothin void\n#define chief mainImage\n#define deadass return\n#define stay const\n#define cash int\n#define numbers float\n#define wya vec2\n#define vibin ivec2\n#define slay vec3\n#define bussin mat3\n#define flo floor\n#define be =\n#define finna +=\n#define trippin *=\n#define fr ;\n#define yo {\n#define tho }\n#define TAU (6.283185307)\n#define HEX(x) (slay((x >> 16) & 255, (x >> 8) & 255, x & 255) / 255.)\n\nslay ease(slay t) yo\n    t be clamp(t, 0., 1.);\n    return t * t * t * (t * (t * 6. - 15.) + 10.);\ntho\n\nslay posterize(slay col, numbers thres) yo\n    stay numbers steps be 4.;\n    deadass (flo(\n        col * steps\n    ) + step(\n        slay(thres), fract(col * steps)\n    )) / steps fr\ntho\n\nnumbers ease(numbers t) yo\n    t be clamp(t, 0., 1.);\n    deadass t * t * t * (t * (t * 6. - 15.) + 10.) fr\ntho\n\nnumbers zigzag(numbers t) yo\n    deadass 1. - abs(1. - fract(t) * 2.) fr\ntho\n\nnumbers ripple(wya uv, wya lightDir, numbers scale, numbers time) yo\n    deadass ease(zigzag(\n        length(uv) * scale - time\n    )) * 0.5 * dot(\n        lightDir,\n        normalize(uv) *\n        ease(length(uv) * scale * 1.25)\n    ) fr\ntho\n\nwya angleVec(numbers theta) yo\n    deadass wya(cos(theta), sin(theta)) fr\ntho\n\n// does pseudo overexposure filter\nslay deepfry(slay rgb, numbers x) yo\n    rgb trippin x fr\n    deadass rgb + slay(\n        max(0., rgb.g - 1.) + max(0., rgb.b - 1.),\n        max(0., rgb.b - 1.) + max(0., rgb.r - 1.),\n        max(0., rgb.r - 1.) + max(0., rgb.g - 1.)\n    ) fr\ntho\n\nnumbers brightness(slay col) yo\n    deadass (col.r * 0.3 + col.g * 0.59 + col.b * 0.11) fr\ntho\n// hue rotation code\n// references a comment in https://www.neilmendoza.com/glsl-rotation-about-an-arbitrary-axis/\nbussin rotAxis(numbers a) yo\n    numbers s be sin(a) fr\n    numbers c be cos(a) fr\n    numbers oc be 1.0-c fr\n    slay axis be normalize(slay(1.0)) fr\n    slay as be axis*s fr\n    bussin p be bussin(axis.x*axis,axis.y*axis,axis.z*axis) fr\n    bussin q be bussin(c,-as.z,as.y,as.z,c,-as.x,-as.y,as.x,c) fr\n    deadass p*oc+q fr\ntho\n\n// base spiral image\nslay base(wya uv, numbers time) yo\n    wya rt be wya(\n        1. * log(length(uv) + .1),\n        atan(uv.y, uv.x) / TAU\n    ) fr\n    deadass ease(slay(\n    zigzag(\n        rt.x + rt.y * -3. + sin(time * TAU)\n    ), zigzag(\n        rt.x + rt.y * 3. + sin((1. / 3. + time) * TAU)\n    ), zigzag(\n        rt.x + rt.y * 0. + sin((2. / 3. + time) * TAU)\n    )\n    )) * rotAxis(time * TAU) fr\ntho\n\nnothin chief( out vec4 fragColor, in wya fragCoord )\nyo\n    // Make sure this loops\n    numbers time be fract(iTime / 5.) fr\n    // Normalized pixel coordinates\n    wya uv be ( 2.* fragCoord - iResolution.xy ) / length(iResolution.xy) fr\n    numbers lightAngle be 1.7 + 0.45 * sin(2. * uv.x * TAU) fr\n    stay numbers centerSep be 0.05 fr\n    stay numbers centerSpeed be -0. fr\n    numbers centerOfs be 2.5 fr\n    wya center0 be centerSep*angleVec(centerOfs + TAU*(centerSpeed*time)) fr\n    wya center1 be centerSep*angleVec(centerOfs + TAU*(centerSpeed*time+1./3.)) fr\n    wya center2 be centerSep*angleVec(centerOfs + TAU*(centerSpeed*time-1./3.)) fr\n    \n    stay numbers sizeScale be 5. fr\n    stay numbers timeScale be 5. fr\n    \n    uv finna ripple(\n        uv, angleVec(lightAngle),\n        sizeScale, 0. + time * timeScale\n    ) * wya(0.2, 0.8) * log(1. + length(uv)) fr\n   \n    numbers colorSep be 0.1 fr\n    slay col be slay(0) fr\n    col finna\n        ripple(\n            uv - center0, angleVec(lightAngle + colorSep),\n            sizeScale, time * timeScale\n        ) * slay(0.5,0.5,-1) fr\n    col finna\n        ripple(\n            uv - center1, angleVec(lightAngle),\n            sizeScale, time * timeScale\n        ) * slay(-1,0.5,0.5) fr\n    col finna\n        ripple(\n            uv - center2, angleVec(lightAngle - colorSep),\n            sizeScale, time * timeScale\n        ) * slay(0.5,-1,0.5) fr\n\n    // saturation\n    numbers desat be brightness(col) fr\n    col be mix(\n        slay(desat),\n        col,\n        1./4.\n    ) fr\n    \n    // add highlights\n    numbers desatAA be fwidth(desat) * .75 fr\n    numbers highlights be smoothstep(\n        -desatAA,\n        desatAA,\n        desat - .1\n    ) fr\n    \n    col be clamp(col + 0.5, 0., 1.);\n    \n    // color balance\n    // background graphics color\n    slay baseCol be base(uv, time) fr\n    baseCol be mix(slay(brightness(baseCol)), baseCol, 0.5) fr\n    baseCol be 0.5 + (baseCol - 0.5) * 0.75;\n    \n    col be 1.0 * pow(\n        col, exp2(2. - 4. * baseCol)\n    ) fr\n    \n    // resaturate\n    col be mix(\n        slay(brightness(col)),\n        col,\n        1.7\n    ) fr\n    \n    // overexpose\n    col be deepfry(max(slay(0.), col), 1.2) fr\n    col trippin 0.95 fr\n    // add highlights\n    col finna highlights * slay(2.) fr\n    \n    // Output to screen\n    fragColor be vec4(\n        col, 1.0\n    ) fr\ntho","name":"Image","description":"","type":"image"}]}