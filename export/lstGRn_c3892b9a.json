{"ver":"0.1","info":{"id":"lstGRn","date":"1447803280","viewed":226,"name":"Yet Another Raytraced Cylinder","username":"bananaboy","description":"A raytraced cylinder with comments. Note that I haven't corrected for the aspect ratio of the display, so it actually appears as a squashed cylinder.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["2d","raytracing","cylinder"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Ray starts at the origin and travels through the pixel in the positive z direction.\n    vec3 rayDir = vec3(- 1.0 + 2.0 * (fragCoord.xy / iResolution.xy), 1.0);\n    rayDir = normalize(rayDir);\n    \n    // Cylinder is along the z axis with a radius of 1.0\n    float cylinderRadius = 1.0;\n\n    // Calculate intersection time along ray direction.\n    float t = pow(cylinderRadius, 2.0) / dot(rayDir.xy, rayDir.xy);\n\n    // Calculate intersection point.\n    vec3 intersection = t * rayDir;\n\n    // Calculate the angle of the intersection point in the x/y plane and use that as the texture U coordinate.\n    // To map the texture once around the cylinder we should divide by PI but it's nicer to have some scaling.\n    float theta = atan(intersection.y / intersection.x);\n\n    // Use the intersection point z as the texture V coordinate.\n    vec2 uv = vec2(theta, intersection.z);\n\n    // Add time to the v to simulate motion.\n    uv.y += iTime;\n\n    // Calculate the distance of the fragment to the centre of the screen. We'll use it to darken the\n    // texture sample to simulate depth cueing.\n    float dist = length((fragCoord.xy / iResolution.xy) - vec2(0.5, 0.5));\n\n    // Look up the texture and scale it by the distance, and also by 2.0 to brighten it.\n    vec4 tex = texture(iChannel0, uv) * dist * 2.0;\n\n    fragColor = vec4(tex.xyz, 1.0);\n}\n","name":"","description":"","type":"image"}]}