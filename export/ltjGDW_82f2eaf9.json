{"ver":"0.1","info":{"id":"ltjGDW","date":"1429197287","viewed":630,"name":"Colibri","username":"koiava","description":"Colibri renderer title design","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["text","font","colibri"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"//https://www.facebook.com/pages/Colibri/211589399026983\n//Colibri renderer title design\n//Designer: Nick Monaselidze\n\n// random number generator **********\n// taken from iq :)\nfloat seed;\t//seed initialized in main\nfloat rnd() { return fract(sin(seed++)*43758.5453123); }\n//***********************************\n\n#define SPP 8\n\n//used macros and constants\n#define PI \t\t\t\t\t3.1415926\n#define TWO_PI \t\t\t\t6.2831852\n#define FOUR_PI \t\t\t12.566370\n#define HALF_PI \t\t\t1.5707963\n#define INV_PI \t\t\t\t0.3183099\n#define INV_TWO_PI \t\t\t0.1591549\n#define INV_FOUR_PI \t\t0.0795775\n#define EPSILON \t\t\t0.00001 \n#define IN_RANGE(x,a,b)\t\t(((x) > (a)) && ((x) < (b)))\n#define EQUAL_FLT(a,b,eps)\t(((a)>((b)-(eps))) && ((a)<((b)+(eps))))\n#define IS_ZERO(a) \t\t\tEQUAL_FLT(a,0.0,EPSILON)\n\n    \nfloat textWidth = 25.0;\nfloat textHeight = 6.0;\n\nstruct Disk {\n    vec2 position_;\n    float radius_innder_;\n    float radius_outter_;\n    float angle_begin_;\n    float angle_end_;\n};\n    \nstruct Box {\n    vec2 position_;\n    vec2 dimensions_;\t//positive\n};\n\nbool pointInBox( vec2 p, Box box ) {\n    if( IN_RANGE( p.x, box.position_.x, box.position_.x + box.dimensions_.x ) &&\n      \tIN_RANGE( p.y, box.position_.y, box.position_.y + box.dimensions_.y ) )\n        return true;\n    \n    return false;\n}\n\nbool pointInDisk( vec2 p, Disk disk ) {\n    Box bbox = Box(disk.position_ - vec2(disk.radius_outter_)*1.01, vec2(disk.radius_outter_)*2.01 );\n    \n    //primitive level culling\n    if( !pointInBox( p, bbox ) )\n        return false;\n    \n    vec2 v = p - disk.position_;\n    \n    float rho_2 = dot(v,v);\n    float r1_2 = disk.radius_innder_*disk.radius_innder_;\n    float r2_2 = disk.radius_outter_*disk.radius_outter_;\n    \n    if( !IN_RANGE( rho_2, r1_2, r2_2 ) )\n        return false;\n    \n\tfloat theta = atan( v.y, v.x );\n    theta += PI;\n    \n    if( !IN_RANGE( theta, disk.angle_begin_, disk.angle_end_ ) )\n        return false;\n    \n    return true;\n}\n\nvec3 draw( vec2 uv ) {\n    vec3 fontColor = vec3( 1.0 );\n    vec3 bgColor = vec3( 0.0 );\n    \n    //Object level culling\n    Box bbox = Box( vec2(0.0), vec2(textWidth,textHeight) );\n    if( !pointInBox( uv, bbox ) )\n        return bgColor;\n    \n    //C\n    if( pointInDisk( uv, Disk( vec2( 3.0, 3.0 ), 2.0, 3.0, PI + HALF_PI, TWO_PI ) ) ||\n       \tpointInDisk( uv, Disk( vec2( 3.0, 3.0 ), 2.0, 3.0, 0.0, HALF_PI ) ) \t\t||\n       \tpointInDisk( uv, Disk( vec2( 5.0, 6.0 ), 0.0, 1.0, HALF_PI, PI ) ) \t\t\t||\n       \tpointInDisk( uv, Disk( vec2( 4.0, 0.0 ), 0.0, 1.0, PI, PI+HALF_PI ) ) \t\t||\n      \tpointInBox( uv, Box( vec2( 3.0, 5.0 ), vec2( 2.0, 1.0 ) ) ) \t\t\t\t||\n      \tpointInBox( uv, Box( vec2( 3.0, 0.0 ), vec2( 1.0, 1.0 ) ) ) )\n        return fontColor;\n    \n    //o\n    if( pointInDisk( uv, Disk( vec2( 7.0, 2.0 ), 1.0, 2.0, 0.0, TWO_PI ) ) )\n        return fontColor;\n    \n    //l\n    if( pointInBox( uv, Box( vec2( 10.0, 0.0 ), vec2( 1.0, 5.0 ) ) ) \t\t\t\t||\n       \tpointInDisk( uv, Disk( vec2( 10.0, 5.0 ), 0.0, 1.0, PI, PI+HALF_PI ) ) )\n        return fontColor;\n    \n    //i\n    if( pointInBox( uv, Box( vec2( 12.0, 0.0 ), vec2( 1.0, 3.0 ) ) ) \t\t\t\t||\n       \tpointInDisk( uv, Disk( vec2( 12.0, 3.0 ), 0.0, 1.0, PI, PI+HALF_PI ) ) \t\t||\n      \tpointInDisk( uv, Disk( vec2( 13.0, 6.0 ), 0.0, 1.0, 0.0, HALF_PI ) ))\n        return fontColor;\n    \n    //b\n    if( pointInBox( uv, Box( vec2( 14.0, 2.0 ), vec2( 1.0, 3.0 ) ) ) \t\t\t\t||\n       \tpointInDisk( uv, Disk( vec2( 14.0, 5.0 ), 0.0, 1.0, PI, PI+HALF_PI ) ) \t\t||\n       \tpointInDisk( uv, Disk( vec2( 16.0, 2.0 ), 1.0, 2.0, 0.0, TWO_PI ) ) )\n        return fontColor;\n    \n    //r\n    if( pointInBox( uv, Box( vec2( 19.0, 0.0 ), vec2( 1.0, 2.0 ) ) ) \t\t\t\t||\n       \tpointInDisk( uv, Disk( vec2( 21.0, 2.0 ), 1.0, 2.0, PI+HALF_PI, TWO_PI ) ) \t||\n       \tpointInDisk( uv, Disk( vec2( 21.0, 4.0 ), 0.0, 1.0, HALF_PI, PI ) ) )\n        return fontColor;\n    \n    //i\n    if( pointInBox( uv, Box( vec2( 23.0, 0.0 ), vec2( 1.0, 3.0 ) ) ) \t\t\t\t||\n       \tpointInDisk( uv, Disk( vec2( 23.0, 3.0 ), 0.0, 1.0, PI, PI+HALF_PI ) ) \t\t||\n      \tpointInDisk( uv, Disk( vec2( 24.0, 6.0 ), 0.0, 1.0, 0.0, HALF_PI ) ))\n        return fontColor;\n\n    return bgColor;\n}\n\n//from iq\nfloat impulse( float k, float x )\n{\n    float h = k*x;\n    return h*exp(1.0-h);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    seed = /*iTime +*/ iResolution.y * fragCoord.x / iResolution.x + fragCoord.y / iResolution.y;\n    \n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec3 rgb = vec3( 0.0 );\n    \n    vec2 center = vec2( iResolution.xy )*0.5;\n    vec2 textPos = vec2(textWidth,textHeight)*0.5;\n    \n    float frameTime = 0.04;\n    float t1 = iTime;\n    float t2 = iTime + frameTime;\n    \n    //Stratified sampling for better Anti-Aliasing and Motion Blur\n    float subPixelSize = 1.0/float(SPP);\n    for( int y=0; y<SPP; y++ ) {\n        for( int x=0; x<SPP; x++ ) {\n            vec2 subPixelCoord = fragCoord + (vec2(x,y) + vec2(rnd(),rnd()))*subPixelSize;\n            \n            float Xi = rnd();\n            float t = Xi*t1 + (1.0-Xi)*t2;\n            float textScale = 8.0 + impulse( 8.0, mod(t,1.5) )*4.0;\n            rgb += draw( (1.0/textScale)*(subPixelCoord - (center - textPos*textScale)) );\n        }\n    }\n    rgb *= 1.0/float(SPP*SPP);\n    \n\tfragColor = vec4( rgb, 1.0 );\n}","name":"","description":"","type":"image"}]}