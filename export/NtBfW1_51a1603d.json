{"ver":"0.1","info":{"id":"NtBfW1","date":"1652106133","viewed":124,"name":"L'Hospital's rule visualization","username":"yunhai","description":"Visualization for how L'Hospital's rule works\nrenctly I'm reviewing my advanced-mathmatics :)\n","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["visualization"],"hasliked":0,"parentid":"NljGRV","parentname":"MathLab"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nto get 0/0=f/g=f'/g'\nlet P(t)=(f(t),g(t))\nthe k of OP(red line) is g(t)/f(t)\nthe k of tangent(yellow line) is \n(g(t+dt)-g(t))/(f(t+dt)-f(t))\n\nso when P(r)=(0,0)\nthe tangent coincide with the OP\ng(r)/f(r)=\n((g(r+dt)-g(r))/dt) / ((f(r+dt)-f(r))/dt)=\ng'(r)/f'(r)\n*/\n//range of x\n#define FROM -.5\n#define TO 4.\n//-------------------experiment-----------------\n//G(x)/F(x)\nfloat G(float x)\n{\n    return sin(x)*(x-3.);//sin(x);\n}\nfloat F(float x)\n{\n    return x*(x-3.);\n}\nvec2 P(float t)\n{return vec2(F(t),G(t));}\n//---------------------DrawElements-------------------\nfloat spot(vec2 p,vec2 o){return SL(length(p-o)*.5);}\nfloat dlineSeg(vec2 p,vec2 s,vec2 e){vec2 sp=p-s,se=e-s;\nreturn length(p-clamp(dot(sp,se)/dot(se,se),0.,1.)*se-s);}\nfloat line(vec2 p,vec2 o,vec2 d){return SL(length(p-(dot(p-o,d)/dot(d,d)*d+o)));}\n//----------------------------------------------\nvec4 cartesian(vec2 uv)\n{\n    vec3 col=vec3(0.);\n    float a=0.;\n    float msp=MSI,lhlw=HLW/2.;\n    a=SS(lhlw+2.*PIXW,lhlw-PIXW,abs(uv.x-round(uv.x/msp)*msp))+\n      SS(lhlw+2.*PIXW,lhlw-PIXW,abs(uv.y-round(uv.y/msp)*msp));\n    col+=vec3(a)*.5;\n    col=mix(col,vec3(0.,1.,0.),line(uv,vec2(0.),vec2(1.,0.)));\n    col=mix(col,vec3(0.,1.,0.),line(uv,vec2(0.),vec2(0.,1.)));\n    return vec4(col,a);\n}\nfloat dist(vec2 uv,float from,float to)\n{\n    float m=1e5,x=from,itr=50.,dx=(to-x)/itr;\n    vec2 p,np=P(x);\n    for(x+=dx;x<to;x+=dx)\n    {\n        p=np;\n        np=P(x);\n        m=min(m,dlineSeg(uv,p,np));\n    }\n    return SL(m);\n}\n\nvoid mainImage( out vec4 O, in vec2 C )\n{\n    vec2 uv=((C-.5*iR)-dragVec*(iM.xy-.5*iR))*PIXW;\n    float x=uv.x,y=uv.y,t=iTime*.5;\n    O.rgb=cartesian(uv).xyz;\n    \n    //parameter equation\n    O=mix(O,vec4(1),dist(uv,FROM,TO));\n    \n    t=mix(FROM,TO,(sin(t)+1.)*.5);\n    vec2 p=P(t);\n    //tangent\n    O=mix(O,vec4(1,.8,.3,0),line(uv,p,P(t+1e-2)-p));\n    //op\n    O=mix(O,vec4(1,0,0,0),line(uv,vec2(0),p));\n    //p\n    O=mix(O,vec4(0,1,0,0),spot(uv,p));\n    \n//this center point is used to find origin when dragVec is enable.\n    O.rgb=mix(O.rgb,vec3(3.,8.,8.),spot(C*PIXW,iR*.5*PIXW));\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//Complex version:https://www.shadertoy.com/view/NttXW8\n#define iR iResolution.xy\n#define iM iMouse\n#define iT iTime\n#define PIXW (CANVAS_WIDTH/iR.x)\n#define SS(a,b,t) smoothstep(a,b,t)\n#define LW (3.*PIXW)\n#define HLW (LW*.5)\n#define SL(d) smoothstep(HLW+PIXW,HLW-PIXW,d)\n/*-----------DrawingSettings-----------*/\nconst float CANVAS_WIDTH=10.;\nconst float MSI=1.;//mesh space interval\n/*-----------input-----------*/\n//zero means lock\nconst vec2 dragVec=-100.*vec2(0.,0.);\n\n\n/*-----------utilities-----------*/\nconst float PI=3.14159265;\n\n\n\n","name":"Common","description":"","type":"common"}]}