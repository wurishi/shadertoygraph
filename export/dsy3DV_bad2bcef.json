{"ver":"0.1","info":{"id":"dsy3DV","date":"1679054679","viewed":168,"name":"ChatGPT4 Test Scene","username":"brainmachine","description":"Testing ChatGPT4 shader code generation. Started with this prompt:\n\"OK, can you make a simple shader that renders a refractive sphere? I'd like it to be hovering above a black and white checkered floor with a sunset gradient in the background.\" \n","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["ai","chatgpt4"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (fragCoord.xy / iResolution.xy) * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 camPos = vec3(0.0, 1.0, -3.0);\n    vec3 rayDir = normalize(vec3(uv, 1.0));\n    \n    vec3 bg = mix(vec3(1.0, 0.5, 0.0), vec3(0.1, 0.15, 0.3), uv.y * 0.5 + 0.5);\n    \n    float time = iTime * 0.5;\n    float floorSpeed = 2.0;\n    float floorPosZ = mod(floorSpeed * time, 4.0) - 2.0;\n    \n    float t = (0.0 - camPos.y) / rayDir.y;\n    vec3 hitPos = camPos + t * rayDir;\n    hitPos.z -= floorPosZ;\n    vec3 floorColor = mod(floor(hitPos.x * 0.5) + floor(hitPos.z * 0.5), 2.0) < 1.0 ? vec3(0.0) : vec3(1.0);\n    \n    vec3 sphereCenter = vec3(0.0, 1.0 + sin(iTime) * 0.5, 0.0);\n    float sphereRadius = 1.0;\n    \n    vec3 oc = camPos - sphereCenter;\n    float b = dot(oc, rayDir);\n    float c = dot(oc, oc) - sphereRadius * sphereRadius;\n    float h = b * b - c;\n    \n    if (h > 0.0)\n    {\n        float tSphere = -b - sqrt(h);\n        vec3 sphereHitPos = camPos + tSphere * rayDir;\n        vec3 normal = normalize(sphereHitPos - sphereCenter);\n        vec3 refractedRay = refract(rayDir, normal, 1.0 / 1.05);\n        \n        float refractedT = (0.0 - (sphereHitPos.y - 1.0)) / refractedRay.y;\n        vec3 refractedHitPos = sphereHitPos + refractedT * refractedRay;\n        refractedHitPos.z -= floorPosZ;\n        vec3 refractedColor = mod(floor(refractedHitPos.x * 0.5) + floor(refractedHitPos.z * 0.5), 2.0) < 1.0 ? vec3(0.0) : vec3(1.0);\n        \n        refractedColor = mix(refractedColor, bg, 0.5);\n        \n        bg = mix(bg, refractedColor, 0.9);\n    }\n    else\n    {\n        bg = mix(bg, floorColor, smoothstep(0.0, 0.5, t));\n    }\n    \n    fragColor = vec4(bg, 1.0);\n}","name":"Image","description":"","type":"image"}]}