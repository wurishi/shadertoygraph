{"ver":"0.1","info":{"id":"Mclyzj","date":"1732549697","viewed":31,"name":"SA Beamformer","username":"EdgarDorausch","description":"tba","likes":1,"published":1,"flags":48,"usePreview":0,"tags":["beamformer"],"hasliked":0,"parentid":"lclyzj","parentname":"Beamformer"},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define product(a, b) vec2(a.x*b.x-a.y*b.y, a.x*b.y+a.y*b.x)\n#define conjugate(a) vec2(a.x,-a.y)\n#define divide(a, b) vec2(((a.x*b.x+a.y*b.y)/(b.x*b.x+b.y*b.y)),((a.y*b.x-a.x*b.y)/(b.x*b.x+b.y*b.y)))\n#define cexp(p) vec2(cos(p), sin(p))\n\nconst int KEY_LEFT  = 37;\nconst int KEY_UP    = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN  = 40;\nconst int KEY_SPACE  = 32;\n\nvec3 rbcolormap(float val) {\n\n    return vec3(clamp(val, 0.0, 1.0), 0.0, clamp(-val, 0.0, 1.0));\n}\n\nvec3 gscolormap(float val) {\n\n    return vec3(clamp(val, 0.0, 1.0));\n}\n\nvec2 mid_pos = vec2(-0.5, 0.0);\nvec2 array_dir = vec2(0.0, 0.1);\n\nfloat PI = 3.14159265359;\n\nfloat circle(vec2 uv, vec2 center, float radius) {\n    float rad = length(uv-center);\n    float val = clamp(radius-rad, 0.0, 1.3/iResolution.x)*iResolution.x/1.3;\n    \n    return val;\n}\n\n\nvec2 getElemPos(int m, int M) {\n    float s = float(m)/float(M-1)*2.0-1.0;\n    return mid_pos + array_dir * s;\n}\n\nbool isKeyToggled(int keycode) {\n    return texelFetch( iChannel1, ivec2(keycode,2),0 ).x == 0.0;\n}\n\nfloat sinc(float t) {\n    return sin(t)/(t+0.00000001);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    float time = iTime * 1.0;\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = gl_FragCoord.xy/iResolution.x - vec2(0.5, iResolution.y/iResolution.x/2.0);\n\n    vec2 focus_point = iMouse.xy/iResolution.x - vec2(0.5, iResolution.y/iResolution.x/2.0);\n    float k = 2000. *(sin(iTime*0.3)+1.0)/2.0; \n    vec2 value = vec2(0.0);\n    int M = 15;\n    int mode;\n    if(isKeyToggled(KEY_UP)) {\n        mode = 0;\n    } else {\n        mode = 4;\n    }\n\n    vec2 array_normal = normalize(vec2(-array_dir.y, array_dir.x));\n\n    for(int txi=0;txi<M;txi++) {\n        for(int rxi=0;rxi<M;rxi++) {\n            vec2 tx_pos = getElemPos(txi, M);\n            vec2 rx_pos = getElemPos(rxi, M);\n            \n            float px_roundtrip = length(uv - tx_pos) + length(uv - rx_pos); // pixel roundtrip distance (tx -> px -> rx)\n            float scat_roundtrip = length(focus_point - tx_pos) + length(focus_point - rx_pos); // scatter roundtrip distance (tx -> scat -> rx)\n\n            float delay = scat_roundtrip-px_roundtrip;\n            value += cexp(k*delay)*sinc(delay*200.0); //sinc(-delay*delay*5000.0);\n        }\n    }\n    value = value/float(M*M);\n\n    vec3 color; \n\n    if(isKeyToggled(KEY_SPACE)) {\n        color = gscolormap(20.0*log(length(value))/90.0+1.0);\n    } else {\n        color = rbcolormap(value.x);\n    }\n    \n\n    float circ_alpha = circle(uv, focus_point, 0.006);\n    color = mix(color, vec3(0.0,1.,0.), circ_alpha);\n\n    for(int m=0;m<M;m++) {\n        vec2 elem_pos = getElemPos(m, M);\n        float circ_alpha = circle(uv, elem_pos, 0.003);\n        color = mix(color, vec3(1.0), circ_alpha);\n    }\n\n\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0,0.0,1.0,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}