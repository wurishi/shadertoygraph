{"ver":"0.1","info":{"id":"clGyRz","date":"1700652349","viewed":31,"name":"The Dawn","username":"Aleksandr73591","description":"Hello, my name is Aleksandr, I made this shader. Originally I wrote it on my android device in GLES (Shader Editor application).\n\nMy LinkedIn profile: https://www.linkedin.com/in/aleksandrpogosov","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["sea","sun","rays","water","sunrise","dawn","morning"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Written by \n// Aleksandr Pogosov, Â©2023\n// No third party tools/Ai used to write this code\n// All rights reserved.\n// aleksandr7937937@gmail.com\n// PS open in fullscreen\n\nconst float _MAXDIST = 30.0;\n\nstruct pInfo\n{\n\tfloat sd;\n\tvec3 col;\n};\n\n\npInfo minSd(pInfo pOne, pInfo pTwo)\n{\n\tif(pOne.sd <pTwo.sd) return pOne;\n\treturn pTwo;\n}\n\n\nvec2 rotate_Z(vec2 p, float angle)\n{\n\tmat2 mat= mat2\n\t(cos(angle), sin(angle),\n\t-sin(angle), cos(angle));\n\treturn mat * p;\n}\n\n\npInfo sky(vec2 p)\n{\n\tpInfo sky;\n\tsky.sd = 0.001;\n\tp.y = 1.0-p.y;\n\tfloat x = abs(p.x);\n\tsky.col = vec3(\n\t\tp.y+cos(x)+x,\n\t\tp.y+x*(cos(iTime/3.)+1.99)/1.3,\n\t\tp.y\n\t\t)*0.95;\n\treturn sky;\n}\n\n\npInfo star (vec2 p, vec3 col, float size)\n{\n\tpInfo starInfo;\n\tstarInfo.sd =  length(p)-size;\n\tstarInfo.sd = step(0.01, starInfo.sd);\n\tstarInfo.col = col*vec3(p,p.x+p.y);\n\treturn starInfo;\n}\n\n\npInfo stars(vec2 p)\n{\n\tvec2 originalP = p;\n\n\tfloat deductStars = length(originalP\n\t\t-vec2(1.52,-0.4))-1.55;\n\t\tdeductStars*= length(originalP\n\t\t-vec2(-1.52,-0.4))-1.55;\n\tfloat cosT = (cos(iTime)+1.0)/2.0;\n\tp*=5.9;\n\tp = rotate_Z(p,iTime/25.0);\n\n\tfloat s_1 = cos(abs(fract(p.x)-0.5));\n\tfloat s_2 = cos(abs(fract(p.y)-0.5));\n\tvec2 sPos = vec2(s_1+s_2);\n\tpInfo star_All = star(sPos, vec3(0.3+(cosT*0.2),0.3+cosT,0.7),2.495);\n\n\tp=originalP;\n\tp*=2.0;\n\tp = rotate_Z(p,iTime/24.8);\n\tfloat s_3 = cos(abs(fract(p.x)-0.5));\n\tfloat s_4 = cos(abs(fract(p.y)-0.5));\n\tvec2 sPos_2 = vec2(s_3+s_4);\n\tpInfo star_2 = star(sPos_2, vec3(0.4+(cosT*0.5),0.9+(cosT*2.0),0.4*cosT),2.49);\n\tstar_All = minSd(star_All,star_2);\n\n\tp=originalP;\n\tp*=2.5;\n\tp = rotate_Z(p,iTime/24.5);\n\tfloat s_5 = cos(abs(fract(p.x+2.0)-0.5));\n\tfloat s_6 = cos(abs(fract(p.y+3.0)-0.5));\n\tvec2 sPos_3 = vec2(s_5+s_6);\n\tpInfo star_3 = star(sPos_3, vec3(0.0,0.3+(cosT*2.0),0.9),2.49);\n\tstar_All = minSd(star_All,star_3);\n\n\tp=originalP;\n\tp*=0.5;\n\tp = rotate_Z(p,iTime/24.0);\n\tfloat s_7 = cos(abs(fract(p.x+6.0)-0.5));\n\tfloat s_8 = cos(abs(fract(p.y+8.0)-0.5));\n\tvec2 sPos_4 = vec2(s_7+s_8);\n\tpInfo star_4 = star(sPos_4, vec3(0.7,0.7,0.4+cosT),2.48);\n\tstar_All = minSd(star_All,star_4);\n\n\tp=originalP;\n\tp*=4.5;\n\tp = rotate_Z(p,iTime/23.8);\n\tfloat s_9 = cos(abs(fract(p.x+6.0)-0.5));\n\tfloat s_10 = cos(abs(fract(p.y+8.0)-0.5));\n\tvec2 sPos_5 = vec2(s_9+s_10);\n\tpInfo star_5 = star(sPos_5, vec3(0.5+cosT*0.5,1.0,0.5+cosT*0.5),2.48);\n\tstar_All = minSd(star_All,star_5);\n\n\tp=originalP;\n\tp*=6.5;\n\tp = rotate_Z(p,iTime/23.5);\n\tfloat s_11 = cos(abs(fract(p.x+6.0)-0.5));\n\tfloat s_12 = cos(abs(fract(p.y+8.0)-0.5));\n\tvec2 sPos_6 = vec2(s_11+s_12);\n\tpInfo star_6 = star(sPos_6, vec3(0.5+cosT*0.5,1.0,0.5+cosT*0.5),2.495);\n\tstar_All = minSd(star_All,star_6);\n\n\tp=originalP;\n\tp*=5.2;\n\tp = rotate_Z(p,iTime/23.0);\n\tfloat s_13 = cos(abs(fract(p.x+6.0)-0.5));\n\tfloat s_14 = cos(abs(fract(p.y+8.0)-0.5));\n\tvec2 sPos_7 = vec2(s_13+s_14);\n\tpInfo star_7 = star(sPos_7, vec3(0.5+cosT*0.5,1.0,0.5+cosT*0.5),2.499);\n\tstar_All = minSd(star_All,star_7);\n\n\tdeductStars = clamp(deductStars,0.0,0.97);\n\tstar_All.sd = mix( 1.0,star_All.sd, deductStars);\n\n\treturn star_All;\n}\n\n\npInfo sun(vec2 p)\n{\n\tpInfo sun;\n\tsun.sd = length(p- vec2(.0,0.0) )- 0.09;\n\tsun.col = vec3(1.0,0.95,0.0);\n\treturn sun;\n}\n\n\npInfo water(vec3 p)\n{\n\tfloat waves_x = fract(p.x+0.2)-0.5;\n\twaves_x = abs(waves_x);\n\twaves_x = cos(waves_x);\n\tfloat waves_z= fract(p.z-iTime*0.25)-0.5;\n\twaves_z = abs(waves_z);\n\twaves_z = sin(waves_z);\n\tfloat waves = mod(waves_x+waves_z,2.0);\n\n\tvec3 col;\n\tcol = vec3(0.0,0.4,1.2) ;\n\tcol*= (0.95+waves*0.7);\n  float cosTime = (cos(iTime)+1.)/4.0;\n\tp.y =p.y+ (waves* 0.4)+0.5;\n\tfloat water = p.y;\n\treturn pInfo(water,col);\n}\n\n\npInfo scene(vec3 p)\n{\n\tpInfo scene;\n\tvec3 skyCol = vec3(0.3,0.75,0.5);\n\tscene.col = skyCol;\n\tscene.sd = 100.;\n  scene = minSd(water(p),scene);\n\treturn scene;\n}\n\n\npInfo rayMarch(vec3 camPos, vec3 rayDir)\n{\n\n\tint maxSteps = 100;\n\tfloat curDist = 0.0;\n\tpInfo ray;\n\tfor(int a = 0; a < maxSteps;a++)\n\t{\n\t\tray= scene(camPos+rayDir* curDist);\n\t\tcurDist += ray.sd;\n\n\t\tif(curDist > _MAXDIST || ray.sd<=0.0001)\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t}\n\tray.sd = curDist;\n\treturn ray;\n}\n\n\nvec3 normals(vec3 ray)\n{\n\n\tfloat epsilon = 0.5;\n\tfloat x_1 = ray.x + epsilon;\n\tfloat x_2 = ray.x - epsilon;\n\tfloat y_1 = ray.y + epsilon;\n\tfloat y_2 = ray.y - epsilon;\n\tfloat z_1 = ray.z + epsilon;\n\tfloat z_2 = ray.z - epsilon;\n\n\tfloat final_X =\n\t\tscene(vec3(x_1, ray.y, ray.z)).sd\n\t- scene(vec3(x_2, ray.y, ray.z)).sd;\n\tfloat final_Y =\n\t\tscene(vec3(ray.x, y_1, ray.z)).sd\n\t- scene(vec3(ray.x, y_2, ray.z)).sd;\n\tfloat final_Z =\n\t\tscene(vec3(ray.x, ray.y, z_1)).sd\n  - scene(vec3(ray.x, ray.y, z_2)).sd;\n\n\treturn vec3(final_X, final_Y, final_Z);\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy/iResolution.xy;\n\tuv.x *= iResolution.x/iResolution.y;\n    uv.x-=0.87;\n    uv.y-= 0.2;\n    uv *= 3.0;\n\tvec3 col;\n\n\tvec3 camPos= vec3(0.0,0.0,5.0);\n\tvec3 rDir = normalize(vec3(uv,-1.0));\n\tpInfo ray = rayMarch(camPos,rDir);\n\n\tif(ray.sd > _MAXDIST)\n\t{\n\t\tpInfo finalSky;\n\t\tfinalSky= minSd(sun(uv), sky(uv));\n\t\tpInfo stars = stars(uv);\n\t\tcol = mix( stars.col,finalSky.col,stars.sd);\n\t}\n\n\telse\n\t{\n\t\trDir.x *=10.5;\n\t\tvec3 normRay = camPos + rDir*ray.sd;\n\t\tvec3 norm= normals(normRay);\n\t\tvec3 lightPos = vec3(0.0, -1.0, 200.0);\n\t\tnorm.z -=0.;\n\t\tnorm.y +=42.;\n\t\tvec3 lightDir = normalize(\n\t\t\tnormRay*-7.-lightPos);\n\t\tfloat diffuseDot = dot(norm, lightDir);\n\t\tvec3 lightCol =vec3(1.0,0.5,0.0)* diffuseDot;\n\t\tcol = mix(ray.col, lightCol,\t\tdiffuseDot*0.6);\n\n\t}\n  fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}