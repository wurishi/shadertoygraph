{"ver":"0.1","info":{"id":"WlcXW8","date":"1580826580","viewed":219,"name":"Graph Segmented","username":"spalmer","description":"straightforward 1d parametric graph plotter example using line segments for perfect antialiasing, but draws actual geometric discontinuities (e.g. in sawtooth or square waves) as steep slopes, which isn't exactly correct. ","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["antialias","graph","plot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// function to plot\nfloat f(float x)\n{\n//    return x * mix(sign(x), x, exp2(-9.*abs(x))); // smooth abs\n    return sin(x*6.283185); //sin(x*x*x)*sin(x); //fract(x)*2.-1.; //\n}\n\n// iq's line segment distance, trimmed & renamed\nfloat seg(vec2 p, vec2 a, vec2 b)\n{\n    p -= a; b -= a; return length(p - b *\n        clamp(dot(p, b) / dot(b, b), 0., 1.));\n}\n\nconst float thick = 2.5 // curve thickness\n, sx = 4. //24. //1. // horizontal unit scale\n, sy = 2.1 // inverse of window-relative vertical amplitude\n; // TODO perfect square aspect ratio option\n\nfloat aa(float e)\n{\n    return clamp(1. - max(e, 0.), 0., 1.);\n}\n\n// must search at least thick pixel units away\n// to avoid missing nearby crossings.\nfloat graphf(vec2 p, vec2 R)\n{\n    float xs = sx/R.x, ys = R.y/sy, d = 9e9\n        , i = p.x-.5-thick, j = i, v = f(i*xs)*ys;\n    while ((i += 1.) <= .51+thick+p.x) {\n        float v1 = f(i*xs)*ys;\n        d = min(d, seg(p, vec2(j, v), vec2(i, v1)));\n        v = v1; j = i;\n    }\n    return aa(d + .5 - thick);\n}\n\nvec3 draw(vec2 p)\n{\n    vec2 R = iResolution.xy\n        , q = p - (  // panning or moving the graph origin\n            length(iMouse.xy) > 1.\n              ? vec2(iMouse.xy) //*vec2(8,1)-vec2(R.x*4.,0)\n              : .5*R+vec2(-.5*R.x+2.*iTime,0));\n   #if 1 // magnified dragging instead\n    if (iMouse.z > 0.) q = abs(iMouse.zw) + (p - R - abs(iMouse.zw) - (iMouse.xy - abs(iMouse.zw))) * .5;\n    else q = p - .5*R;\n   #endif\n    vec2 g = abs(mod(q, R/vec2(sx,sy)));\n    vec3 c = vec3(1);  // bg\n    c = mix(c, vec3(.95,.95,.7), aa(min(g.x, g.y) - 1.5));  // grid lines\n    c = mix(c, vec3(.95,.8, .8), aa(min(abs(q.x),abs(q.y)) - 2.5));\t// axis lines\n    c = mix(c, vec3(0), graphf(q,R));  // graph curve\n\treturn c; // linear\n}\n\nvoid mainImage(out vec4 c, vec2 p)\n{\n    c = vec4(pow(draw(p), vec3(.4545)), 1); // to sRGB gamut\n}\n\n\n// pretty small for a pixel-perfect\n// antialiased grapher with mouse control\n// but it's not 1-tweet  :(\n\n// see also https://www.shadertoy.com/view/WsKXDw\n\n","name":"Image","description":"","type":"image"}]}