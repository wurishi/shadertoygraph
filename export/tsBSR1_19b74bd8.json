{"ver":"0.1","info":{"id":"tsBSR1","date":"1552882414","viewed":83,"name":"Letters' First Shader","username":"letters","description":"A circle whose radius is described by a parabolic equation which repeats every 20 seconds","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["circle","first","parabola"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    uv -= 0.5;\n//    if (uv.x > 0.5 || uv.x < -0.5 || uv.y > 0.5 || uv.y < -0.5) {\n//        return;\n//    }\n    uv.x *= iResolution.x/iResolution.y;\n    \n    float c; //unscaled color of the pixel\n    float r; //radius of the circle\n    float rem = iTime - floor(iTime / 20.0) * 20.0; //remainder of time / 20\n    \n    r = rem - 10.0;\n    r *= r;\n    r = -r;\n    r += 100.0;\n    r /= 100.0;  // r = (-(x-10)^2 + 100) / 100\n    r *= 0.8;    // scale r to the screen a bit\n    \n\tc = smoothstep(r+0.005, r, length(uv)); // c = 0 for pixel > r+0.005 and 1 for pixel < r\n    float scale;\n    scale = 0.99; //for scaling the brightness\n    vec3 col; // RGB output vector\n    col = vec3(c * scale);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}