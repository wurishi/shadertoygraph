{"ver":"0.1","info":{"id":"4d2BDt","date":"1502813318","viewed":147,"name":"Hello Bunny","username":"Mangatome","description":"My first distance field shader. Thanks to Koltes.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","helloworld","bunny","rabbit"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 rot( in float a ) {\n\tfloat c = cos(a),\n        s = sin(a);\n    return mat2(c, s, -s, c);\n}\n\nfloat sdEllipsoid( in vec2 p, in vec2 r )\n{\n    return (length( p/r ) - 1.0) * min(r.x,r.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    // aspect x\n    uv -= 0.5;\n    uv.x *= iResolution.x / iResolution.y;\n\n    // background\n    vec3 c = vec3(1., .2, .5);\n    \n    // right ear - ellipsoid inner + outer\n    vec2 rext = vec2(.3, .8),\n        rint = rext - .2;\n    float angle = 0.5 + (0.035 + 0.05 * cos(iTime + 1.));\n    vec2 uvE = rot(angle) * uv;\n    uvE *= 4.0;\n    uvE += vec2(-0.2, -0.7);\n    float d = sdEllipsoid(uvE, rint);\n    float r = step(d, 0.);\n    c = mix(c, vec3(1., 0.58, 0.75), r);\n    d = max(sdEllipsoid(uvE, rext), -d);\n    r = smoothstep(.01, .0, d);\n    c = mix(c, vec3(1.), r);\n    \n    // left ear - ellipsoid inner + outer\n    angle = 0.37 + (0.05 + 0.05 * sin(iTime * 1.05));\n    vec2 uvEb = uv * rot(angle);\n    uvEb *= 4.0;\n    uvEb += vec2(0.2, -0.7);\n    d = sdEllipsoid(uvEb, rint);\n    r = step(d, 0.);\n    c = mix(c, vec3(1., 0.58, 0.75), r);\n    d = max(sdEllipsoid(uvEb, rext), -d);\n    r = smoothstep(.01, .0, d);\n    c = mix(c, vec3(1.), r);\n        \n    // head - circle\n    vec2 uvT = uv * 1.5;\n    uvT.y += 0.2;\n    d = length(uvT);\n    r = smoothstep(.31, .30, d); // [0., 1.]\n    c = mix(c, vec3(1.), r);\n    \n\tfragColor = vec4(c, 1.);\n}\n\n    // alternative way to make an ear - rebased circle\n    /*vec2 uvO = uv;\n    uvO *= rot(0.5);\n    uvO.x *= 3.;\n    uvO *= 1.5;\n    uvO.y -= 0.28;\n    uvO.x += 0.29;\n    float d = length(uvO);\n    float r = smoothstep(.31, .30, d); // [0., 1.]\n    c = mix(c, vec3(1.0, 0.79, 0.89), r);*/","name":"Image","description":"","type":"image"}]}