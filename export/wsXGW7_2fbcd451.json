{"ver":"0.1","info":{"id":"wsXGW7","date":"1546484243","viewed":389,"name":"Accidental Conway Sierpinski ","username":"TheFeels","description":"Was trying to write a Conway simulator, with custom weights, birth-/survive-rules and sample-points.\n\nStill very messy, be cautious.","likes":2,"published":3,"flags":32,"usePreview":0,"tags":["sierpinski","conway","multipass"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n\n    // Output to screen\n    vec3 col = texture(iChannel0, uv).rgb;\n        \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec2 points[8];\nint pointsLength = 8;\n\nfloat weights[8];\nint weightsLength = 8;\n\nfloat birth[1];\nint birthLength = 1;\n\nfloat survive[2];\nint surviveLength = 2;\n\nvoid init() {\n    points[0] = vec2(-1.0, -1.0);\n    points[1] = vec2(-1.0, 0.0);\n    points[2] = vec2(-1.0, 1.0);\n    points[3] = vec2(0.0, -1.0);\n    points[4] = vec2(0.0, 1.0);\n    points[5] = vec2(1.0, -1.0);\n    points[6] = vec2(1.0, 0.0);\n    points[7] = vec2(1.0, 1.0);\n    \n    weights[0] = 0.0;\n    weights[1] = 0.0;\n    weights[2] = 3.0;\n    weights[3] = 0.0;\n    weights[4] = 0.0;\n    weights[5] = 0.0;\n    weights[6] = 0.0;\n    weights[7] = 3.0;\n    \n    birth[0] = 3.0;\n\n    survive[0] = 2.0;\n    survive[1] = 3.0;\n}\n\nfloat collect(vec2 fragCoord) {\n    float s;\n    for (int i = 0; i < pointsLength; i++) {\n        vec2 p = fragCoord + points[i];\n        p /= iResolution.xy;\n    \ts += weights[i] * texture(iChannel0, p).r;\n    }\n    return s;\n}\n\nfloat evaluate(float sum, vec2 fragCoord) {\n    float status = texture(iChannel0, fragCoord / iResolution.xy).r;\n    if (status == 1.0) {\n        status = 0.0;\n        for (int i = 0; i < surviveLength; i++) {\n            if (sum == survive[i]) {\n            \tstatus = 1.0;\n                break;\n            }\n        }\n    } else {\n    \tfor (int i = 0; i < birthLength; i++) {\n            if (sum == birth[i]) {\n            \tstatus = 1.0;\n                break;\n            }\n        }\n    }\n    return status;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    init();\n        \n    vec2 uv = fragCoord / iResolution.xy;\n    \n    float sum = collect(fragCoord);\n   \n    float status = evaluate(sum, fragCoord);\n    \n   \n    if (distance(uv, vec2(0.5, 0.9)) < 2.0 / max(iResolution.x, iResolution.y)) {\n    \tstatus = 1.0;\n    }\n    \n    vec3 c = vec3(status);\n    \n    if (status == 0.0) {\n\t\tc.b = texture(iChannel0, uv).b * 0.9;\n\t\tc.g = texture(iChannel0, uv).g * 0.9;\n\t}\n    \n    \n    fragColor = vec4(c, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}