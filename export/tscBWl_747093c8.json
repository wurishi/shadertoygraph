{"ver":"0.1","info":{"id":"tscBWl","date":"1606232634","viewed":159,"name":"Checkers tutorial","username":"PelicanPolice","description":"I saw this shader: https://www.shadertoy.com/view/Wd3fWf\nAnd it made me want to make this. I was satisfied with how surprisingly simple it was to make, so I made a walk through!","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["tutorial","checkerboard","pattern","checkers","chess","learn","squares","tiles","tiles","walk","board","board","walkthrough","through","guide"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    \n    /*-----------------------------------------------------------------\n    -                                                                 -\n    -                                                                 -\n    -\t\t\t\t      I N S T R U C T I O N S                     -\n    -                                                                 -\n    -                                                                 -\n    -                                                                 -\n    ------------------------------------------------------------------*/\n     \n    \n    \n    //       Read line 54\n    //       \n    //       \n    //          \n    \n    \n    \n    \n    /*-----------------------------------------------------------------\n    -                                                                 -\n    -                                                                 -\n    -\t\t\t\t      \tE N D   R E S U L T                       -\n    -                                                                 -\n    -                                                                 -\n    -                                                                 -\n    ------------------------------------------------------------------*/\n    \n    fragColor = vec4(max(sign(fract(fragCoord.x*0.005+iTime)-0.5) * sign(fract(fragCoord.y*0.005+iTime)-0.5),0.0));\n    \n    \n    \n    \n\n    \n    /*-----------------------------------------------------------------\n    -                                                                 -\n    -                                                                 -\n    -\t\t\t\t      \tT U T O R I A L                           -\n    -                                                                 -\n    -                                                                 -\n    -                                                                 -\n    ------------------------------------------------------------------*/\n\n    //========================= STEP 1 ===============================\n    \n    //fragColor = vec4(fragCoord.x);\n    \n    // + + + + + + + + + + + + + + - - - - - - - - - - - - - - \n\t// So, uncomment line 51 and press the play button bottom left of this code window :)\n    //\n    // This will give us a white screen, with a VERY THIN black line on the left (for pixel 0).\n    // Pixels after will be 1 or greater, resulting in a white pixel. \n    \n    \n    \n \n    \n    //========================= STEP 2 ===============================\n    \n    //fragColor = vec4(fragCoord.x*0.02); // <---- The smaller the number, the larger the squares will be\n    \n    // - - - - - - - - - - - - - + + + - - - - - - - - - - - - \n    // To get a better look, we need to zoom in.\n    // For example, to zoom in 4x, the zoom value would be 0.25 (can be written as 1/4)\n    // and 50x zoom would be 0.02 (1/50)\n    //\n    // We will see a gradient of black to white as the pixels go from 0.0 to 0.1\n    // Followed by white as the pixels go greater than 1.0\n    \n    \n    \n    \n    \n    //========================= STEP 3 ===============================\n    \n    //fragColor = vec4(fract(fragCoord.x*0.02));\n    \n    // - - - - - - - + + + + - - - - - - - + - - - - - - - - - \n    \n    // Next, we want to make it loop. The way we do that is using fract()\n    // fract takes any number and leaves you with the decimal.\n    // So if you put in 1.5, you get 0.5.\n    // If you put 10234.0 you get 0.0\n    //\n    // So now when the pixel gets to 1.0, instead of going to 1.01\n    // it will go to 0.01, looping back to black instead of staying white.\n    \n    \n    \n    \n    //========================= STEP 4 ===============================\n    \n    //fragColor = vec4(fract(fragCoord.x*0.02+iTime));\n    \n    // - - - - - - - - - - - - - - - - - - + + + + - - - - - - \n    \n    // We can also make it scroll over time by applying an offset.\n    // This can be a constant value that doesn't move, to adjust the\n    // starting position, or a changing value like iTime.\n    // If you didn't know, iTime is the number next to the pause button.\n    // If you pause it, the scrolling will stop. \n    \n\n    \n    //========================= STEP 5 ===============================\n    \n    //fragColor = vec4(fract(fragCoord.x*0.02+iTime)-0.5);\n    \n    // - - - - - - - - - - - - - - - - - - - - - - + + - - - -\n    \n    // Next, we want to remove the gradient. Right now we have a smooth slope\n    // from 0.0 to 1.0, but we want it to be either 0.0 or 1.0, and to alternate\n    // \n    // The way we can do that is using a function called sign().\n   \t// What this does is returns whether a number is positive or negative.\n    // So sign(5.0) would return 1.0 sign(-40.0) would return -1.0\n    // (also sign(0.0) returns 0.0, but we can ignore that for now).\n    //\n    // But we need to offset it so that half the gradient is negative,\n    // and half the gradient is positive. Because right now it's all\n    // positive. If you sign() it right now, it will all be white. \n    // So we subtract 0.5 from our gradient. \n    //\n    // This converts the gradient range from -0.5 to 0.5\n    // Half negative half positive. \n    // The first half will be drawn black, because it's less than 0 \n    // which is black. The other half will start to increase in \n    // brightness until it gets to grey (0.5). Then it will loop back\n    // to -0.5 (black).\n    \n    \n    //========================= STEP 6 ===============================\n    \n    //fragColor = vec4(sign(fract(fragCoord.x*0.02+iTime)-0.5));\n    \n    // - - - - - - - + + + - - - - - - - - - - - - - - - - + -\n    \n    // Hey look! Stripes! \n    \n    \n    \n    //========================= STEP 7 ===============================\n    \n    //fragColor = vec4(sign(fract(fragCoord.x*0.02+iTime)-0.5) * sign(fract(fragCoord.y*0.02+iTime)-0.5));\n    \n    // - - - - - - - - - - - - - - - - - - - - - - - - - - - + + + + + + + + + + + + + + + + + + + + + +\n    \n    // Now multiply it by exactly the same thing, except with fragCoord.y instead of fragCoord.x\n    // and you have checkers! \n    \n    \n    \n    //========================= STEP 8 ===============================\n    \n    //fragColor = vec4(max(sign(fract(fragCoord.x*0.02+iTime)-0.5) * sign(fract(fragCoord.y*0.02+iTime)-0.5),0.0));\n    \n    // - - - - - - - + + + - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - + + + -\n    \n    // The final step is a technical correction. -1 isn't a valid colour\n    // it should be 0 to 1. So to fix that we can use max().\n    //\n    // Max takes a collection of inputs, and returns the largest one\n    // So if we put max(-0.5,5.0,1.0), it would return 5.0.\n    //\n    // In our case, we want to convert [-1.0 to 1.0] back into [ 0.0 to 1.0] again.\n    // To do this, we do max( CODE , 0.0); where CODE is that giant bit of maths we wrote\n    //\n    // If the final result is -1.0, we'd have max(-1.0,0.0), resulting in 0.0 (black).\n    // If the final result is  1.0, we'd have max( 1.0,0.0), resulting in 1.0 (white).\n    // Success!! \n   \n\n    \n    // Things to try:\n    // - Replace 0.02 with different values to change the size of the squares. Remember to change both for equal scaling! \n    // - Multiply iTime on either part by different values to change the scroll speed on either x or y axis!\n    // - Change the -0.5 to different values between 0.0 and 1.0 to change the ratio of black to white\n    \n    \n    // I hope you enjoyed this tutorial :)\n    \n}","name":"Image","description":"","type":"image"}]}