{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"// Relative sizes of Platonic Polyhedra \n// Compact inexact SDFs\n// r is radius of inscribed sphere\n\n#define max4(A,B,C,D) max(max(A,B),max(C,D))\n#define max3(A,B,C) max(max(A,B),C)\n\nfloat sdTetrahedron(vec3 p,float r) {\n    return max4(-p.x+p.y+p.z, p.x-p.y+p.z, p.x+p.y-p.z, -p.x-p.y-p.z)/sqrt(3.) - r;\n}\n\nfloat sdCube(vec3 p,float r) {\n    p = abs(p);\n    return max3(p.x,p.y,p.z) - r;\n}\n\nfloat sdOctahedron(vec3 p,float r) {\n    p = abs(p);\n    return (p.x+p.y+p.z)/sqrt(3.) - r;\n}\n\n#define PHI 1.6180339887\n\nfloat sdDodecahedron(vec3 p,float r) {\n    p = abs(p);\n    return max3( p.y+p.z*PHI, p.z+p.x*PHI, p.x+p.y*PHI )/sqrt(2.+PHI) - r;\n}\n\nfloat sdIcosahedron(vec3 p,float r) {\n    p = abs(p);\n    return max4( p.x+p.y+p.z, p.y/PHI+p.z*PHI, p.z/PHI+p.x*PHI, p.x/PHI+p.y*PHI )/sqrt(3.) - r;\n}    \n\n// Circumscribed sphere radius ratio to Inscribed sphere radius (thanks spalmer)\n#define CircSphTetrahedron  (1./3.)\n#define CircSphCube         sqrt(1./3.)\n#define CircSphOctahedron   sqrt(1./3.)\n#define CircSphDodecahedron sqrt(1./PHI)\n#define CircSphIcosahedron  sqrt(1./PHI)\n\nfloat sdSphere(vec3 p,float r) {\n    return length(p) - r;\n}\n\nfloat sdBox(vec3 p,vec3 s) // box by distance from middle\n{\n    p = abs(p) - s;\n    return max3(p.x,p.y,p.z);\n}\n\n#define ROT2(ANG) mat2(cos(ANG),sin(ANG),-sin(ANG),cos(ANG))\n\nvec3 Spin(float tim,vec3 p) {\n   tim += iTime;\n   p.xz *= ROT2(tim);\n   p.yz *= ROT2(tim*1.5);\n   p.yx *= ROT2(tim*.5);\n   return p;\n}\n\n#define T(SDF) if ( (tmp = SDF) < hit.x ) hit = vec2(tmp,clr); clr += 1.;\n\nvec2 Dist(vec3 pt) {\n    vec2 hit = vec2(100000,0);\n    float tmp, clr = 0.;\n\n    #define POS(X) (X==0)?(-20.):(X==5)?22.:(float(X)*42./5.-18.)\n\n    #define LINES \\\n    T(sdBox(pt-vec3(0,YP+SZ,9),vec3(25,.05,.1))) \\\n    T(sdBox(pt-vec3(0,YP-SZ,9),vec3(25,.05,.1)))\n\n    float SZ=2.5;\n    \n    float YP=7.;\n    clr = 0.;\n    LINES\n\n    T(sdTetrahedron( Spin(1.,pt-vec3(POS(0),YP,9)),SZ));\n    T(sdCube(        Spin(2.,pt-vec3(POS(1),YP,9)),SZ));\n    T(sdOctahedron(  Spin(3.,pt-vec3(POS(2),YP,9)),SZ));\n    T(sdDodecahedron(Spin(4.,pt-vec3(POS(3),YP,9)),SZ));\n    T(sdIcosahedron( Spin(5.,pt-vec3(POS(4),YP,9)),SZ));\n    T(sdSphere(              pt-vec3(POS(5),YP,9), SZ));\n\n    SZ *= 1.005; // A tiny bit too large to fit completely inside \n    T(sdSphere(pt-vec3(POS(0),YP,9),SZ));\n    T(sdSphere(pt-vec3(POS(1),YP,9),SZ))\n    T(sdSphere(pt-vec3(POS(2),YP,9),SZ));\n    T(sdSphere(pt-vec3(POS(3),YP,9),SZ));\n    T(sdSphere(pt-vec3(POS(4),YP,9),SZ));\n  //T(sdSphere(pt-vec3(POS(5),YP,9),SZ));\n    SZ=2.5;\n    \n    // ----- Circumscribed Spheres -------\n\n    YP = -3.5;\n    clr = 0.;\n    LINES\n    \n    float sclTetrahedron = CircSphTetrahedron;\n    float sclCube = CircSphCube;\n    float sclOctahedron = CircSphOctahedron;\n    float sclDodecahedron = CircSphDodecahedron;\n    float sclIcosahedron = CircSphIcosahedron;\n    \n    T(sdTetrahedron( Spin(1.,pt-vec3(POS(0),YP,9)),SZ*sclTetrahedron));\n    T(sdCube(        Spin(2.,pt-vec3(POS(1),YP,9)),SZ*sclCube))\n    T(sdOctahedron(  Spin(3.,pt-vec3(POS(2),YP,9)),SZ*sclOctahedron));\n    T(sdDodecahedron(Spin(4.,pt-vec3(POS(3),YP,9)),SZ*sclDodecahedron));\n    T(sdIcosahedron( Spin(5.,pt-vec3(POS(4),YP,9)),SZ*sclIcosahedron));\n    T(sdSphere(              pt-vec3(POS(5),YP,9), SZ));\n\n    YP -= SZ*2.5;\n    clr = 0.;\n    LINES\n\n    T(sdSphere(pt-vec3(POS(0),YP,9),SZ*sclTetrahedron));\n    T(sdSphere(pt-vec3(POS(1),YP,9),SZ*sclCube))\n    T(sdSphere(pt-vec3(POS(2),YP,9),SZ*sclOctahedron));\n    T(sdSphere(pt-vec3(POS(3),YP,9),SZ*sclDodecahedron));\n    T(sdSphere(pt-vec3(POS(4),YP,9),SZ*sclIcosahedron));\n    T(sdSphere(pt-vec3(POS(5),YP,9),SZ));\n\n    T(pt.z+200.);\n    return hit;\n}\n\n\nvec4 March(vec3 beg,vec3 dir) {\n    float dist = 0.;\n    vec3 pos;\n    #define LIMIT 100\n    for ( int stps = 0; stps <= LIMIT; ++stps ) {\n        pos = beg + dir * dist;\n        vec2 obj = Dist( pos );\n        dist += obj.x;\n        if ( obj.x < .001 || stps == LIMIT ) return vec4( pos, obj.y );\n    }\n    return vec4( pos, 90. );\n}\n\nvec3 Normal(vec3 pt) {\n    float delta = .001; // large delta gives rounded corners\n    vec3 norm = Dist(pt).x - vec3(\n        Dist(pt-vec3(delta, 0., 0.)).x, \n        Dist(pt-vec3( 0.,delta, 0.)).x, \n        Dist(pt-vec3( 0., 0.,delta)).x );\n    return normalize( norm );\n}\n\nfloat pow2n(float i,int n)\n{\n  while ( n-- > 0 ) i *= i;\n  return i;\n}\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    vec2 R = iResolution.xy;\n    vec2 uv = (U+U-R) / min(R.x,R.y);  // -1 ... +1\n    uv /= 5.;\n    \n    vec3 cam = vec3( 0, 0, -64.);\n    vec3 camdir = normalize( vec3( uv, 1. ) );\n    \n    vec4 hit = March( cam, camdir );\n    vec3 norm = Normal(hit.xyz);\n    \n    vec3 light = vec3( 0, 10, -10 );\n    vec3 dir = normalize( light - hit.xyz );\n    float difu = dot( norm, dir );\n    \n    difu = .5 + .5*difu;\n    \n    #define col4(X) ( .5 + .3 * sin( vec4(0,21,23,0) + (X) ) )\n    O = sqrt( col4(hit.w*.4) );\n    O *= difu + pow2n(difu,9);\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"lXcyRN","date":"1734789188","viewed":85,"name":"Platonic Polyhedra Sizes","username":"dray","description":"Row 1: Same inscribed sphere size just peeking out of each face\nRow 2: Same circumscribed sphere size\nRow 3: Inscribed sphere size for row 2","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["polyhedra","platonic"],"hasliked":0,"parentid":"XcKBWc","parentname":"Petite Platonic Polyhedra"}}