{"ver":"0.1","info":{"id":"WdfyW7","date":"1585059175","viewed":49,"name":"ps17 Exercise","username":"CoderReMarks","description":"ps17 Exercise","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["ps17exercise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 rotate2d(float angle)  \n{\n    return mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n}\n\nmat2 scale2d(vec2 value)\n{\n    return mat2(value.x, 0, 0, value.y);\n}\n\nfloat circle(vec2 uv, vec2 pos, float radius)\n{\n \treturn float(distance(uv, pos) < radius);\n}\n\nfloat rect(vec2 uv, vec2 pos, vec2 size, float borderThickness)\n{\n    // center the pivot point\n    pos -= 0.5*size;\n    \n\t// bottom-left\n    vec2 bl = step(pos, uv); \n    float pct = bl.x * bl.y;\n\n    // top-right \n    vec2 tr = 1.0 - step(pos+size, uv);\n    pct *= tr.x * tr.y;\n    \n    return pct;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float ratio = iResolution.x/iResolution.y;\n    \n    // Scale the space\n    uv *= 7.;\n    \n    // Offset the odd rows based on time\n    float offset = step(1., mod(uv.x+1., 2.)); //this moves\n    float offset2 = step(1., mod(uv.x, 2.)); //this moves\n    uv.x -= offset*iTime;\n   uv.x += offset2*iTime;\n\n    uv = fract(uv);\n    \n    // Correct the aspect ratio\n    uv.x *= ratio;\n\n    vec2 pos = vec2(0.5*ratio, 0.5);\n    uv -= pos;\n   \tuv *= rotate2d(sin(iTime));\n    uv += pos;\n    \n    vec3 color = vec3(rect(uv, pos, vec2(.2, .2), 0.01));\n    \n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}