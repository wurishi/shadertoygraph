{"ver":"0.1","info":{"id":"lscGRl","date":"1451605803","viewed":6132,"name":"Fireworks 2016","username":"BigWIngs","description":"A quick and dirty fireworks effect. ","likes":97,"published":1,"flags":0,"usePreview":0,"tags":["2d","fireworks"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"// \"Fireworks\" by Martijn Steinrucken aka BigWings - 2015\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Email:countfrolic@gmail.com Twitter:@The_ArtOfCode\n\n#define PI 3.141592653589793238\n#define TWOPI 6.283185307179586\n#define S(x,y,z) smoothstep(x,y,z)\n#define B(x,y,z,w) S(x-z, x+z, w)*S(y+z, y-z, w)\n#define saturate(x) clamp(x,0.,1.)\n\n#define NUM_EXPLOSIONS 8.\n#define NUM_PARTICLES 70.\n\n\n// Noise functions by Dave Hoskins \n#define MOD3 vec3(.1031,.11369,.13787)\nvec3 hash31(float p) {\n   vec3 p3 = fract(vec3(p) * MOD3);\n   p3 += dot(p3, p3.yzx + 19.19);\n   return fract(vec3((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y, (p3.y+p3.z)*p3.x));\n}\nfloat hash12(vec2 p){\n\tvec3 p3  = fract(vec3(p.xyx) * MOD3);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat circ(vec2 uv, vec2 pos, float size) {\n\tuv -= pos;\n    \n    size *= size;\n    return S(size*1.1, size, dot(uv, uv));\n}\n\nfloat light(vec2 uv, vec2 pos, float size) {\n\tuv -= pos;\n    \n    size *= size;\n    return size/dot(uv, uv);\n}\n\nvec3 explosion(vec2 uv, vec2 p, float seed, float t) {\n\t\n    vec3 col = vec3(0.);\n    \n    vec3 en = hash31(seed);\n    vec3 baseCol = en;\n    for(float i=0.; i<NUM_PARTICLES; i++) {\n    \tvec3 n = hash31(i)-.5;\n       \n\t\tvec2 startP = p-vec2(0., t*t*.1);        \n        vec2 endP = startP+normalize(n.xy)*n.z;\n        \n        \n        float pt = 1.-pow(t-1., 2.);\n        vec2 pos = mix(p, endP, pt);    \n        float size = mix(.01, .005, S(0., .1, pt));\n        size *= S(1., .1, pt);\n        \n        float sparkle = (sin((pt+n.z)*100.)*.5+.5);\n        sparkle = pow(sparkle, pow(en.x, 3.)*50.)*mix(0.01, .01, en.y*n.y);\n      \n    \t//size += sparkle*B(.6, 1., .1, t);\n        size += sparkle*B(en.x, en.y, en.z, t);\n        \n        col += baseCol*light(uv, pos, size);\n    }\n    \n    return col;\n}\n\nvec3 Rainbow(vec3 c) {\n\t\n    float t=iTime;\n    \n    float avg = (c.r+c.g+c.b)/3.;\n    c = avg + (c-avg)*sin(vec3(0., .333, .666)+t);\n    \n    c += sin(vec3(.4, .3, .3)*t + vec3(1.1244,3.43215,6.435))*vec3(.4, .1, .5);\n    \n    return c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tuv.x -= .5;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    float n = hash12(uv+10.);\n    float t = iTime*.5;\n    \n    vec3 c = vec3(0.);\n    \n    for(float i=0.; i<NUM_EXPLOSIONS; i++) {\n    \tfloat et = t+i*1234.45235;\n        float id = floor(et);\n        et -= id;\n        \n        vec2 p = hash31(id).xy;\n        p.x -= .5;\n        p.x *= 1.6;\n        c += explosion(uv, p, id, et);\n    }\n    c = Rainbow(c);\n    \n    fragColor = vec4(c, 1.);\n}","name":"Image","description":"","type":"image"}]}