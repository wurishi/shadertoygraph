{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":3,"type":"keyboard","id":"4dXGRr","filepath":"/presets/tex00.jpg","sampler":{"filter":"nearest","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"code":"// Created by inigo quilez - iq/2013\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// A list of usefull distance function to simple primitives, and an example on how to \n// do some interesting boolean operations, repetition and displacement.\n//\n// More info here: https://iquilezles.org/articles/distfunctions\n\n// Tweaked by T21 to enable single pass distance based Anti-aliasing.\nconst float KEY_A  = 65.5/256.0;\nconst float KEY_T  = 84.5/256.0;\n\nfloat sdPlane( vec3 p )\n{\n\treturn p.y;\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n    return length(p)-s;\n}\n\nfloat udRoundBox( vec3 p, vec3 b, float r )\n{\n  return length(max(abs(p)-b,0.0))-r;\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n\tvec3 pa = p - a;\n\tvec3 ba = b - a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\t\n\treturn length( pa - ba*h ) - r;\n}\n\nfloat length2( vec2 p )\n{\n\treturn sqrt( p.x*p.x + p.y*p.y );\n}\n\nfloat length6( vec2 p )\n{\n\tp = p*p*p; p = p*p;\n\treturn pow( p.x + p.y, 1.0/6.0 );\n}\n\nfloat length8( vec2 p )\n{\n\tp = p*p; p = p*p; p = p*p;\n\treturn pow( p.x + p.y, 1.0/8.0 );\n}\n\nfloat sdTorus82( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length2(p.xz)-t.x,p.y);\n  return length8(q)-t.y;\n}\n\nfloat sdTorus88( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length8(p.xz)-t.x,p.y);\n  return length8(q)-t.y;\n}\n\nfloat sdCylinder6( vec3 p, vec2 h )\n{\n  return max( length6(p.xz)-h.x, abs(p.y)-h.y );\n}\n\n//----------------------------------------------------------------------\nvec2 opU( vec2 d1, vec2 d2 ) { return (d1.x<d2.x) ? d1 : d2; }\n\n\n//----------------------------------------------------------------------\n\nvec2 map( in vec3 pos )\n{\n    vec2 res = opU( vec2( sdPlane(     pos), 1.0 ),\n\t                vec2( sdSphere(    pos-vec3( 0.0,0.25, 0.0), 0.25 ), 646.9 ) );\n    res = opU( res, vec2( udRoundBox(  pos-vec3( 1.0,0.3, 1.0), vec3(0.15), 0.1 ), 541.0 ) );\n\tres = opU( res, vec2( sdTorus(     pos-vec3( 0.0,0.25, 1.0), vec2(0.20,0.05) ), 425.0 ) );\n    res = opU( res, vec2( sdCapsule(   pos,vec3(-1.3,0.20,-0.1), vec3(-1.0,0.20,0.2), 0.1  ), 331.9 ) );\n\tres = opU( res, vec2( sdTorus82(   pos-vec3( 0.0,0.25, 2.0), vec2(0.20,0.05) ),250.0 ) );\n\tres = opU( res, vec2( sdTorus88(   pos-vec3(-1.0,0.25, 2.0), vec2(0.20,0.05) ),143.0 ) );\n\n    return res;\n}\n\nfloat softshadow( in vec3 ro, in vec3 rd, in float mint, in float maxt, in float k )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<30; i++ )\n    {\n\t\tif( t>maxt ) break;\n\n\t\tfloat h = map( ro + rd*t ).x;\n        res = min( res, k*h/t );\n        t += 0.02;\n    }\n    return clamp( res, 0.0, 1.0 );\n\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n\tvec3 eps = vec3( 0.001, 0.0, 0.0 );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat totao = 0.0;\n    float sca = 1.0;\n    for( int aoi=0; aoi<5; aoi++ )\n    {\n        float hr = 0.01 + 0.05*float(aoi);\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        totao += -(dd-hr)*sca;\n        sca *= 0.75;\n    }\n    return clamp( 1.0 - 4.0*totao, 0.0, 1.0 );\n}\n\nvec3 GetColor(in vec3 ro, in vec3 rd, in float t, float m)\n{\n       vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal( pos );\n\n\t\t//col = vec3(0.6) + 0.4*sin( vec3(0.05,0.08,0.10)*(m-1.0) );\n\t\tvec3 col = vec3(0.6) + 0.4*sin( vec3(0.05,0.08,0.10)*(m-1.0) );\n\t\t\n        float ao = calcAO( pos, nor );\n\n\t\tvec3 lig = normalize( vec3(-0.6, 0.7, -0.5) );\n\t\tfloat amb = clamp( 0.5+0.5*nor.y, 0.0, 1.0 );\n        float dif = clamp( dot( nor, lig ), 0.0, 1.0 );\n        float bac = clamp( dot( nor, normalize(vec3(-lig.x,0.0,-lig.z))), 0.0, 1.0 )*clamp( 1.0-pos.y,0.0,1.0);\n\n\t\tfloat sh = 1.0;\n\t\tif( dif>0.02 ) { sh = softshadow( pos, lig, 0.02, 10.0, 7.0 ); dif *= sh; }\n\n\t\tvec3 brdf = vec3(0.0);\n\t\tbrdf += 0.20*amb*vec3(0.10,0.11,0.13)*ao;\n        brdf += 0.20*bac*vec3(0.15,0.15,0.15)*ao;\n        brdf += 1.20*dif*vec3(1.00,0.90,0.70);\n\n\t\tfloat pp = clamp( dot( reflect(rd,nor), lig ), 0.0, 1.0 );\n\t\tfloat spe = sh*pow(pp,16.0);\n\t\tfloat fre = ao*pow( clamp(1.0+dot(nor,rd),0.0,1.0), 2.0 );\n\n\t\treturn col*brdf + vec3(1.0)*col*spe + 0.2*fre*(0.5+0.5*col);\t\n}\n\nvec4 Blend(in vec4 fg, in vec4 bg) {\n\tfloat a = 1.- fg.a;\n\treturn fg + bg * a;\n}\n\nvec3 castRay(in vec3 ro, in vec3 rd, in float maxd, in float aa)\n{\n\tvec4 col = vec4(0.0);\t// Forground (pre-multiplied)\n\tfloat c = 1.;\t\t\t// Keep track if we are moving closer or away from a surface\n\t\n\tfloat precis = 0.001;\n    float h = 0.0, mh = 1e20;\n    float t = 0.0, mt = 0.0;\n    float m = -1.0, mm = -1.0;\n\t\n    for(int i=0; i<100; i++ )\n    {\n        t += h;\n\t    vec2 res = map( ro+rd*t );\n        h = res.x;\n\t    m = res.y;\n\t\t\n\t\tif(abs(h)<precis || t>maxd ) break;\n\t\t\n\t\tif(h < mh) { // closer\n\t\t\tc = 1.0;\n\t\t\tmh = h;\n\t\t\tmt = t;\n\t\t\tmm = m;\n\t\t} else if(c > 0.0) { // away\n\t\t\tc = 0.0;\n\t\t\tfloat s = (mt+1.0)/iResolution.y;\n\t\t\tif(mh < s) {\n\t\t\t\tfloat a = 1. - (mh / s);\n\t\t\t\tvec3 rgb = GetColor(ro, rd, mt, mm);\n\t\t\t\tcol = Blend(col, vec4(rgb*a, a));\n\t\t\t}\n\t\t}\n    }\n\t\n\tif(texture(iChannel3, vec2(KEY_A,0.75)).x > 0.) {\n \t\tcol = vec4(0.0);\n\t}\n\t\n\tif(texture(iChannel3, vec2(KEY_T,0.75)).x > 0.) {\n\t\tif(m > 1.) col.a = 1.;\n\t\treturn vec3(pow(col.a, 2.2));\n\t}\n\t\n\tcol = Blend(col, vec4(GetColor(ro, rd, t, m), 1.));\n\t\n\tcol.rgb /= col.a;\t\n\tcol.rgb *= exp( -0.01*t*t );\n\t\n    return col.rgb;\n}\n\n\n\nvec3 render( in vec3 ro, in vec3 rd )\n{ \n    vec3 col = castRay(ro,rd,20.0, 1. - iMouse.z);\n\treturn vec3( clamp(col,0.0,1.0) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy/iResolution.xy;\n    vec2 p = -1.0+2.0*q;\n\tp.x *= iResolution.x/iResolution.y;\n    vec2 mo = iMouse.xy/iResolution.xy;\n\t\t \n\tfloat time = 15.0 + iTime;\n\n\t// camera\t\n\tvec3 ro = vec3( -0.5+3.2*cos(0.1*time + 6.0*mo.x), 1.0 + 2.0*mo.y, 0.5 + 3.2*sin(0.1*time + 6.0*mo.x) );\n\tvec3 ta = vec3( -0.5, -0.4, 0.5 );\n\t\n\t// camera tx\n\tvec3 cw = normalize( ta-ro );\n\tvec3 cp = vec3( 0.0, 1.0, 0.0 );\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n\tvec3 rd = normalize( p.x*cu + p.y*cv + 2.5*cw );\n\n\t\n    vec3 col = render( ro, rd );\n\n\tcol = sqrt( col );\n\n    fragColor=vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":true,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MsfXDS","date":"1406672550","viewed":1350,"name":"Edge AA","username":"Trisomie21","description":"WIP : Proof of concept of edge AA, via pixel coverage computation in raymarching loop\nA - Toggle Anti-Aliasing\nT - Toggle Color and Opacity channel","likes":38,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","antialiasing"],"hasliked":0,"parentid":"","parentname":""}}