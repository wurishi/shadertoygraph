{"ver":"0.1","info":{"id":"XX2GDw","date":"1708596547","viewed":81,"name":"TP1 SOPHIA LAKEHAL P2105173","username":"soso6912","description":"TEST","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// LAKEHAL SOPHIA\n\n\n\n\n// Rotation matrix around z axis\n// a : Angle\nmat3 Rz(float a)\n{\n  float sa=sin(a);float ca=cos(a);\n  return mat3(ca,sa,0.,-sa,ca,0.,0.,0.,1.);\n}\n// Rotation matrix around y axis\n// a : Angle\nmat3 Ry(float a)\n{\n  float s=sin(a);float c=cos(a);\n  return mat3(c,0.,-s,\n              0.,1.,0.,\n              s,0.,c);\n}\n// Rotation matrix around x axis\n// a : Angle\nmat3 Rx(float a)\n{\n  float s=sin(a);float c=cos(a);\n  return mat3(1.,0.,0.,\n              0.,c,-s,\n              0.,s,c);\n}\n\n// Rotation matrix around u vec\n// a : Angle\nmat3 rotate(vec3 a)\n{\n  return Rx(a.x)+Ry(a.y)+ Rz(a.z);\n}\n\n\n\n\n// Compute the ray\n//      m : Mouse position\n//      p : Pixel\n// ro, rd : Ray origin and direction\nvoid Ray(vec2 m,vec2 p,out vec3 ro,out vec3 rd)\n{\n  float a=3.*3.14*m.x;\n  float le=3.5;\n  \n  // Origin\n  ro=vec3(50.,0,1.);\n  ro*=Rz(a);\n  \n  // Target point\n  vec3 ta=vec3(10.,-1,5.);\n  \n  // Orthonormal frame\n  vec3 w=normalize(ta-ro);\n  vec3 u=normalize(cross(w,vec3(0.,0.,1.)));\n  vec3 v=normalize(cross(u,w));\n  rd=normalize(p.x*u+p.y*v+le*w);\n}\n\n// Operators\n\n// Union\n// a,b : field function of left and right sub-trees\nfloat Union(float a,float b)\n{\n  return min(a,b);\n}\n//Intersection\nfloat Inter(float a,float b)\n{\n  return max(a,b);\n}\n//A et B\nfloat sans(float a,float b)\n{\n  return max(a,-b);\n}\n\n//Translation \nvec3 Translation ( vec3 t, vec3 p ) \n{\n    return (p - t);\n}\n\n//UnionLisse\nfloat UnionLisse(float a , float b , float r )\n{\n float h = max((r-length(a-b)),0.)/r;\n float g = 1./6.*r*(h*h*h);\n return min(a,b)-g;\n}\n\n// Primitives\n\n\n// Sphere\n// p : point\n// c : center of skeleton\n// r : radius\n\nfloat Sphere(vec3 p,vec3 c,float r)\n{\n  return length(p-c)-r;\n}\n\n//Plan\nfloat PLAN(vec3 p, vec3 u, vec3 c)\n{\n    return dot(p-c,u);\n}\n\n\n\n//DEMI-SPHERE\nfloat DEMISPHERE(vec3 p,vec3 c,vec3 n,float r)\n{\n  float f1=Sphere(p,c,r);\n  float f2=PLAN(p,n,c);\n  return max(f1,f2);\n}\n//CYLINDRE\n\nfloat CYLINDREBASE (vec3 p, vec3 c, float r, vec3 u)\n{\n    u=normalize(u);\n    return(length((p-c)-dot(p-c,u)*u)-r);\n}\n\nfloat CYLINDRE (vec3 p, vec3 c, float r, vec3 u, float h)\n{\n    float v1=CYLINDREBASE(p,c,r,u);\n    float v2=PLAN(p,-u,c-(h*0.5));\n    float v3=PLAN(p,u,c+(h*0.5));\n    return max(max(v1,v2),v3);\n}\n\n\n//PILLULE\nfloat PILLULE(vec3 a, vec3 b, float r, vec3 p){\n    if(dot(p-a,(b-a)/length(b-a))<0.0){\n      return length(p-a)-r;\n    }\n    else if(dot(p-b,(b-a)/length(b-a))>0.0){\n      return length(p-b)-r;\n    }else {\n    float aq=dot(p-a,(b-a)/length(b-a));\n    float l=sqrt(dot(p-a,p-a)-aq*aq);\n    return l-r;\n    }\n}\n\n// BOITE\n// La boite est faite en deux parties, une qui sera la base de la boite et une qui permettrera de la changer de place\nfloat BOITEBASE (vec3 p,vec3 b)\n{\n    vec3 d=abs(p)-b;\n    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat BOITE(vec3 p, vec3 b, vec3 mouv)\n{\n    vec3 d=Translation(p, mouv);\n    return BOITEBASE(d,b);\n    \n}\n\n\n\n\n// Potential field of the object\n// p : point\n\n\nfloat object(vec3 p)\n{\n  \n  float v=100000.0; \n  v=Union(v,\n\n    DEMISPHERE(p,vec3(0.,0.,-2.),normalize(vec3(0.,0.,1.)),24.)\n  ); // BASE\n // Mon \"projet\" est de faire une petite maison champignon\n \n   v=UnionLisse(v, CYLINDRE(p,vec3(-3.,2.,1.),3.5,vec3(0.,0.,1.),15.),2.);//PIED DU CHAMPIGNON\n   v=sans(v, CYLINDRE(p,vec3(-3.,2.,1.),3.3,vec3(0.,0.,1.),15.));// JE CREUSE L INTERIEUR DE LA MAISON\n   v=sans(v, CYLINDRE(p,vec3(-2.5,5.,3.5),1.,normalize(vec3(0.,1.,0.)),8.)); //JE CREUSE POUR FENETRE\n   \n    v=UnionLisse(v,\n   DEMISPHERE(p,vec3(-3.,2.,6.),normalize(vec3(0,0.,-3.)),7.),5.);//CHAPEAU CHAMPIGNON\n   \n   v=sans(v, BOITE(p,vec3(1.5,0.3,2.3),vec3(-2.5,5.5,-1.)));// JE CREUSE L ENTREE\n   v=Union(v,\n\n    DEMISPHERE(p,vec3(0.,0.,-2.),normalize(vec3(0.,0.,1.)),24.)// JE RETABLIS LE SOL\n  );\n     v=Union(v, BOITE(p,vec3(.3,2.1,2.3),vec3(-2.,5.5,-1.))); //PORTE OUVERTE\n     v=Union(v,Sphere(p,vec3(-1.5,7.,0.1),0.2));// POIGNEE DE PORTRE\n     \n    \n     \n// JE MET UN GENRE DE CLOTURE AUTOUR DE LA MAISON\n  v=Union (v,PILLULE(vec3(1.,0.0,2.0),vec3(1.0,0.0,0.0),0.5,p-vec3(4,7,-1.7))); //PILLIERS1\n  v=Union (v,PILLULE(vec3(1.,0.0,2.0),vec3(1.0,0.0,0.0),0.5,p-vec3(4,-12,-1.7)));//PILLIERS2\n  v=Union (v,PILLULE(vec3(1.,0.0,2.0),vec3(1.0,0.0,0.0),0.5,p-vec3(-12,7,-1.7)));//PILLIERS3\n  v=Union (v,PILLULE(vec3(1.,0.0,2.0),vec3(1.0,0.0,0.0),0.5,p-vec3(-12,-12,-1.7)));//PILLIERS4\n  \n     v=Union(v, BOITE(p,vec3(0.1,9.5,1.),vec3(-11.,-2.,-1.))); //MURETS1\n     v=Union(v, BOITE(p,vec3(0.1,9.5,1.),vec3(5.,-2.,-1.))); //MURETS2\n     v=Union(v, BOITE(p,vec3(7.4,0.1,1.),vec3(-3.,-12.,-1.))); //MURETS3\n\nreturn v;\n}\n\n// Analysis of the scalar field\n\nconst int Steps=200;// Number of steps\nconst float Epsilon=.01;// Marching epsilon\n\n// Object normal\n// p : point\nvec3 ObjectNormal(vec3 p)\n{\n  const float eps=.001;\n  vec3 n;\n  float v=object(p);\n  n.x=object(vec3(p.x+eps,p.y,p.z))-v;\n  n.y=object(vec3(p.x,p.y+eps,p.z))-v;\n  n.z=object(vec3(p.x,p.y,p.z+eps))-v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\n// o : ray origin\n// u : ray direction\n// e : Maximum distance\n// h : hit\n// s : Number of steps\nfloat SphereTrace(vec3 o,vec3 u,float e,out bool h,out int s)\n{\n  h=false;\n  \n  // Start at the origin\n  float t=0.;\n  \n  for(int i=0;i<Steps;i++)\n  {\n    s=i;\n    vec3 p=o+t*u;\n    float v=object(p);\n    // Hit object\n    if(v<0.)\n    {\n      h=true;\n      break;\n    }\n    // Move along ray\n    t+=max(Epsilon,v);\n    // Escape marched too far away\n    if(t>e)\n    {\n      break;\n    }\n  }\n  return t;\n}\n\n// Lighting\n\n// Background color\n// d : Ray direction\nvec3 background(vec3 d)\n{\n  return mix(vec3(.45,.55,.99),vec3(.65,.69,.99),d.z*.5+.5);\n}\n\n// Shadowing\n// p : Point\n// n : Normal\n// l : Light direction\nfloat Shadow(vec3 p,vec3 n,vec3 l)\n{\n  bool h;\n  int s;\n  float t=SphereTrace(p+Epsilon*n,l,100.,h,s);\n  if(!h)\n  {\n    return 1.;\n  }\n  return 0.;\n}\n\n// Shading and lighting\n// p : Point\n// n : Normal at point\n// e : Eye direction\nvec3 Shade(vec3 p,vec3 n,vec3 e)\n{\n  // Point light\n  const vec3 lp=vec3(0.,37.,25.);\n  \n  // Light direction to point light\n  vec3 l=normalize(lp-p);\n  \n  // Ambient color\n  vec3 ambient=.25+.25*background(n);\n  \n  // Shadow computation\n  float shadow=Shadow(p,n,l);\n  \n  // Phong diffuse\n  vec3 diffuse=.35*clamp(dot(n,l),0.,1.)*vec3(1.,1.,1.);\n  \n  // Specular\n  vec3 r=reflect(e,n);\n  vec3 specular=.15*pow(clamp(dot(r,l),0.,1.),35.)*vec3(1.,1.,1.);\n  vec3 c=ambient+shadow*(diffuse+specular);\n  return c;\n}\n\n// Shading according to the number of steps in sphere tracing\n// n : Number of steps\nvec3 ShadeSteps(int n)\n{\n  float t=float(n)/(float(Steps-1));\n  return.5+mix(vec3(.05,.05,.5),vec3(.65,.39,.65),t);\n}\n\n// Picture in picture\n// pixel : Pixel\n// pip : Boolean, true if pixel was in sub-picture zone\nvec2 Pip(in vec2 pixel,out bool pip)\n{\n  // Pixel coordinates\n  vec2 p=(-iResolution.xy+2.*pixel)/iResolution.y;\n  if(pip==true)\n  {\n    const float fraction=1./4.;\n    // Recompute pixel coordinates in sub-picture\n    if((pixel.x<iResolution.x*fraction)&&(pixel.y<iResolution.y*fraction))\n    {\n      p=(-iResolution.xy*fraction+2.*pixel)/(iResolution.y*fraction);\n      pip=true;\n    }\n    else\n    {\n      pip=false;\n    }\n  }\n  return p;\n}\n\n// Image\nvoid mainImage(out vec4 color,in vec2 pxy)\n{\n  // Picture in picture on\n  bool pip=true;\n  \n  // Pixel\n  vec2 pixel=Pip(pxy,pip);\n  \n  // Mouse\n  vec2 m=iMouse.xy/iResolution.xy;\n  \n  // Camera\n  vec3 ro,rd;\n  Ray(m,pixel,ro,rd);\n  \n  // Trace ray\n  \n  // Hit and number of steps\n  bool hit;\n  int s;\n  \n  float t=SphereTrace(ro,rd,100.,hit,s);\n  \n  // Shade background\n  vec3 rgb=background(rd);\n  \n  if(hit)\n  {\n    // Position\n    vec3 p=ro+t*rd;\n    \n    // Compute normal\n    vec3 n=ObjectNormal(p);\n    \n    // Shade object with light\n    rgb=Shade(p,n,rd);\n  }\n  \n  // Uncomment this line to shade image with false colors representing the number of steps\n  if(pip==true)\n  {\n    rgb=ShadeSteps(s);\n  }\n  \n  color=vec4(rgb,1.);\n}\n\n\n","name":"Image","description":"","type":"image"}]}