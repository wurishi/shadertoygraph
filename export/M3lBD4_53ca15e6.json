{"ver":"0.1","info":{"id":"M3lBD4","date":"1728429980","viewed":15,"name":"Random Turing Machines","username":"GarlicGraphix","description":"Generates random turing machines for each y layer (minus halting state)\nSpacebar to reset","likes":1,"published":1,"flags":48,"usePreview":0,"tags":["turing","machine"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 col = texture(iChannel0, uv);\n    if (col.r > 0.) {\n        col.r = 0.;\n        col.gb = vec2(1.);\n    }\n    // Output to screen\n    fragColor = col;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nfloat states = 500.;\nconst float KEY_SP    = 32.5/256.0;\n\nfloat random (vec2 uv) {\n    return fract(sin(dot(uv.xy, vec2(12.9898,78.233)))*43758.5453123);\n}\n\nvec2 getWrite(bool read, float state, float y) {\n    \n    if (random(vec2(y+82.484, state+283.4)) > .5) {\n        read = !read;\n    }\n    \n    if (read && random(vec2(y+34.2, state-142.)) > .5) {\n        return vec2(1.);\n    }\n    return vec2(0.);\n}\n\nfloat getMove(bool left, bool read, float state, float y) {\n    if (random(vec2(y+283.3, state)) > .5) {\n        left = !left;\n    }\n    if (random(vec2(state+12.332, y+383.3)) > .5) {\n        if (read) {\n            left = !left;\n        }\n    }\n    if (left) {\n        return (ceil(random(vec2(y, state))*states)/(states*2.));\n    }\n    return 0.;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 R = vec2(iResolution.x/4., iResolution.y/4.);\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = fract(uv);\n    uv = floor(uv*R)/R;\n    \n    vec2 p = vec2(1., 0.)/R;\n    vec3 col = vec3(0.);\n    \n    vec3 samples[] = vec3[](\n        texture(iChannel0, fract(uv - p)).rgb,\n        texture(iChannel0, uv).rgb,\n        texture(iChannel0, fract(uv + p)).rgb\n    );\n    \n    col = samples[1];\n    \n    \n    if (iFrame - int(fragCoord.y) <= 10  || texture( iChannel1, vec2(KEY_SP, 0.5) ).x >= 0.5) {\n        col *= 0.;\n        if (uv.x == floor(random(uv.yy)*R.x)/R.x) {\n            col.r = 1./states;\n        }\n    } else {\n        if (samples[1].r > 0.) {\n            col.r = 0.;\n            if (samples[1].g > 0.) {\n                col.gb = getWrite(true, samples[1].r, uv.y);\n            } else {\n                col.gb = getWrite(false, samples[1].r, uv.y);\n            }\n            col.b *= 0.90+uv.y*0.10;\n            \n        }  \n        else if (samples[0].r > 0.) {\n            if (samples[0].g > 0.) {\n                col.r = getMove(true, true, samples[0].r, uv.y);\n            } else {\n                col.r = getMove(true, false, samples[0].r, uv.y);\n            }\n        }\n        else if (samples[2].r > 0.) {\n            if (samples[2].g > 0.) {\n                col.r = getMove(false, true, samples[2].r, uv.y);\n            } else {\n                col.r = getMove(false, false, samples[2].r, uv.y);\n            }\n        }\n    }\n    \n    if (samples[1].g > 0.25) {\n        col.gb -= 0.003;\n    }\n    \n    fragColor = vec4(col, 1.);\n}","name":"Buffer A","description":"","type":"buffer"}]}