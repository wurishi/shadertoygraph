{"ver":"0.1","info":{"id":"DdKBRm","date":"1698069288","viewed":273,"name":"vhs.glsl","username":"src3453","description":"vhs filter written in GLSL","likes":3,"published":3,"flags":34,"usePreview":0,"tags":["vhs","ntsc","artifact"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // 画像の解像度を取得\n    vec2 resolution = iResolution.xy;\n\n    // ピクセルのUV座標を取得\n    vec2 uv = fragCoord / resolution;\n\n    // テクスチャからピクセルカラーを取得\n    // 畳み込みフィルタのカーネルを定義\n    float kernel[9];\n    kernel[0] = -4.0 / 9.0;\n    kernel[1] = -3.0 / 9.0;\n    kernel[2] = -2.0 / 9.0;\n    kernel[3] = -1.0 / 9.0;\n    kernel[4] = 0.0 / 9.0;\n    kernel[5] = 1.0 / 9.0;\n    kernel[6] = 2.0 / 9.0;\n    kernel[7] = 3.0 / 9.0;\n    kernel[8] = 4.0 / 9.0;\n\n    vec3 convolvedColor = vec3(0.0);\n\n    // hsyncジッターを計算\n    float hsync = floor(noise(vec2(uv.g*50.0,0.0),iTime*5.5383)*3.0);\n    // 畳み込み演算を実行\n    for (int i = -4; i <= 4; i++) {\n        for (int j = -0; j <= 0; j++) {\n            vec2 offset = vec2(float(i), float(j));\n            convolvedColor += texture(iChannel0, uv + (offset + vec2(hsync,0.0)) / resolution).rgb * kernel[(i + 5)  + (j + 1)];\n        }\n    }\n    // テクスチャからピクセルカラーを取得\n    vec3 originalColor = convolvedColor;\n\n    fragColor = vec4(originalColor,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"float random(vec2 st, float seed){\n    return fract(sin(seed+dot(st.xy, vec2(12.9898,78.233)))* 43758.5453123);\n}\n\n\n//参考:https://thebookofshaders.com/11/\nfloat noise (in vec2 st, float seed) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    float a = random(i,seed);\n    float b = random(i + vec2(1.0, 0.0),seed);\n    float c = random(i + vec2(0.0, 1.0),seed);\n    float d = random(i + vec2(1.0, 1.0),seed);\n\n    vec2 u = f*f*(3.0-2.0*f);\n\n    return mix(a, b, u.x) + \n            (c - a)* u.y * (1.0 - u.x) + \n            (d - b) * u.x * u.y;\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // 画像の解像度を取得\n    vec2 resolution = iResolution.xy;\n\n    // ピクセルのUV座標を取得\n    vec2 uv = fragCoord / resolution;\n\n    // テクスチャからピクセルカラーを取得\n    vec3 originalColor = texture(iChannel0, uv).rgb;\n    // YCbCr変換\n    float Y = 0.299 * originalColor.r + 0.587 * originalColor.g + 0.114 * originalColor.b;\n    float Cb = 0.564 * (originalColor.b - Y);\n    float Cr = 0.713 * (originalColor.r - Y);\n    \n    vec3 diff = texture(iChannel0, uv+vec2(1.0/resolution.x,0)).rgb - texture(iChannel0, uv).rgb;\n    float diffY = 0.299 * diff.r + 0.587 * diff.g + 0.114 * diff.b;\n\n    // 色相信号にノイズを追加\n    float hueNoise1 = noise(vec2(uv.r*50.0,uv.g*50.0),iTime*5.5383) * 0.1-0.05; // ノイズの範囲を調整\n    float hueNoise2 = noise(vec2(uv.r*50.0,uv.g*50.0),iTime*2.2546) * 0.1-0.05; // ノイズの範囲を調整\n    float hueNoise3 = noise(vec2(uv.r*5.0,uv.g*30.0),iTime*6.4623) * 0.15-0.075; // ノイズの範囲を調整\n    float hueNoise4 = noise(vec2(uv.r*5.0,uv.g*30.0),iTime*8.4352) * 0.15-0.075; // ノイズの範囲を調整\n    // 色相情報にノイズを加える\n    Cr += hueNoise1;\n    Cb += hueNoise2;\n    Cr += hueNoise3;\n    Cb += hueNoise4;\n    \n    //エンファシス\n    Cb *= 1.5;\n    Cr *= 1.5;\n    \n    //クロスカラー\n    Cb = Cb + cos(fragCoord.x) * diffY;\n    Cr = Cr + sin(fragCoord.x) * diffY;\n    \n    // YCbCrからRGBに戻す\n    float R = Y + 1.403 * Cr;\n    float G = Y - 0.344 * Cb - 0.714 * Cr;\n    float B = Y + 1.773 * Cb;\n    \n    fragColor = vec4(R,G,B,1.0);\n\n   \n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //TODO lowpass実装する\n    fragColor = texture(iChannel0,fragCoord / iResolution.xy);\n}","name":"Buffer B","description":"","type":"buffer"}]}