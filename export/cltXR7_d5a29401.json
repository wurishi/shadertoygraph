{"ver":"0.1","info":{"id":"cltXR7","date":"1723550811","viewed":34,"name":"Space distortion feedback","username":"Lehdari","description":"Experiment on space distortion. Utilizes buffer feedback for smoother dynamics.","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["mandelbrot","distortion","feedback"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int maxIters = 10000;\n\nvec3 mandelbrot(in vec2 p)\n{\n    vec2 pp = vec2(0.0, 0.0);\n    int i;\n    for (i=0; i<maxIters && pp.x*pp.x + pp.y*pp.y < 2.0; ++i) {\n        float xx = pp.x*pp.x - pp.y*pp.y + p.x;\n        pp.y = 2.0*pp.x*pp.y + p.y;\n        pp.x = xx;\n    }\n    if (i >= maxIters)\n        i = 0;\n    return vec3(float(i), float(i), float(i));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n    uv = texture(iChannel0, uv).xy;\n\n    vec3 col = mandelbrot(uv)/float(maxIters);\n    col.x = pow(col.x, 0.1);\n    float asd = 20.0*pow(col.y, 0.05+0.05*sin(iTime));\n    col.y = 0.5+0.5*sin(asd);\n    //col.y = pow(col.y, 0.1);\n    col.z = pow(col.z, 0.2);\n\n    vec2 mousePos = iMouse.xy / iResolution.xy;\n    fragColor = (1.0-mousePos.x)*vec4(col, 1.0) + mousePos.x*vec4(uv, 0.0, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float pi = 3.14159265359;\n\nfloat smoothStaircase(float x)\n{\n    return x + sin(-2.0*pi*x)/(2.0*pi);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.0*(fragCoord-iResolution.xy*0.5))/(iResolution.yy);\n    \n    mat2 rot = mat2(\n        cos(0.373*iTime), -sin(0.373*iTime),\n        sin(0.373*iTime), cos(0.373*iTime)\n    );\n\n    uv = rot*uv;\n    \n    // change to polar coordinates\n    float theta = atan(uv.y, uv.x);\n    float dis = length(uv);\n    float kaleidoscope = smoothStaircase(4.0-3.0*cos(0.125*iTime));\n    uv = dis*vec2(cos(theta*kaleidoscope), sin(theta*kaleidoscope));\n    \n    vec2 translation = vec2(0.336009, 0.3909545);\n    float zoomFactor = pow(2.0, -8.5+9.5*cos(iTime*0.069567));\n    mat2 zoom = mat2(\n        zoomFactor, 0.0,\n        0.0, zoomFactor\n    );\n    \n    uv = zoomFactor*uv+translation;\n#if 1\n\n    vec2 resInv = 1.0 / iResolution.xy;\n    vec2 mousePos = iMouse.xy * resInv;\n    uv = uv*0.005 + 0.995*(\n        0.28*texture(iChannel0, fragCoord * resInv).xy +\n        0.18*texture(iChannel0, (fragCoord+vec2(1.0, 0.0)) * resInv).xy +\n        0.18*texture(iChannel0, (fragCoord+vec2(-1.0, 0.0)) * resInv).xy +\n        0.18*texture(iChannel0, (fragCoord+vec2(0.0, 1.0)) * resInv).xy +\n        0.18*texture(iChannel0, (fragCoord+vec2(0.0, -1.0)) * resInv).xy\n    );\n#endif\n    // Output to screen\n    fragColor = vec4(uv, 0.0, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}