{"ver":"0.1","info":{"id":"MlKcDm","date":"1536683554","viewed":85,"name":"ShaderToy Tutorial CS","username":"jkashimura","description":"HW for 9/11","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["education"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float Circle(vec2 uv, vec2 p, float r, float blur){ //return value \n    float d = length(uv-p); //distance - remaps point p to 0\n    float c = smoothstep(r,r-blur,d); //can replace with blur\n    \n    return c;\n}\n\nfloat Band(float t, float start, float end, float blur){\n    float step1 = smoothstep(start-blur, start+blur,t);\n    float step2 = smoothstep(end+blur, end-blur,t); //switch signs too\n\n    return step1*step2; //gets both ends to make band\n}\nfloat Rect(vec2 uv, float left, float right, float bottom, float top, float blur){ //take 2d input\n\tfloat band1 = Band(uv.x, left, right, blur);\n    float band2 = Band(uv.y, bottom, top, blur);\n\n    return band1*band2;//multiply bands to make rectangle\n}\n\nfloat Smiley(vec2 uv, vec2 p, float size){ //smiley face function\n    uv -= p; //translate coordinate system\n    uv /= size; //scaling coordinate system\n    \n    float mask = Circle(uv, vec2(0.), 0.4, 0.01); //different c\n    \n    mask -= Circle(uv, vec2(-0.13,0.2), 0.07, 0.01); //subtract so the circle is missing - left eye\n    mask -= Circle(uv, vec2(0.13,0.2), 0.07, 0.01); //subtract so the circle is missing - right eye\n\n    float mouth = Circle(uv, vec2(0.), 0.3, 0.02);\n    mouth -= Circle(uv, vec2(0.,0.1), 0.3, 0.02);//subtract a circle out for the mouth\n    \n    mask -= mouth; //they're some -1 so the eyes are droopy\n    \n    return mask;\n}\n\nfloat remap01(float a, float b, float t){\n    return (t-a)/(b-a);//return number depending on the distance a-b (a=0,b=1)\n}\n\nfloat remap(float a, float b, float c, float d, float t){\n    return remap01(a,b,t)*(d-c)+ c; //remap according to distance\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\tfloat t = iTime; //number of seconds since started\n    \n    uv -= 0.5; //-0.5<x<0.5\n    uv.x *= iResolution.x/iResolution.y;\n\t\n    vec3 col = vec3(0.);//color\n    \n    float mask = 0.;\n    \n    //Smiley(uv, vec2(0.), 1.); //we can move things around\n    \n    float x = uv.x; //split x and y\n    \n    float m = sin(t+x*8.)*0.1;//squeeze the sin graph and move it\n    float y = uv.y-m; //subtract magic value\n\n    float blur = remap(-.5,0.5,0.01,0.25,x);//function of x,gets blurrier\n    blur=pow(blur*4.,2.);//non-linear\n    mask = Rect(vec2(x,y),-.5, .5,-0.1, 0.1, blur); //horizontal\n\tcol = vec3(1.,1.,1.)*mask; //multiply by mask\n    \n    fragColor = vec4(col,1.0); // Output to screen\n}","name":"Image","description":"","type":"image"}]}