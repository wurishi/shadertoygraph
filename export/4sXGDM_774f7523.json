{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"const int iMax = 1024;     //adjust iterations\n\nvec3 MBrot(vec2 c, vec2 z, vec2 uv) {\n\tfloat i = 0.0;\n\tfor( int j=0; j<iMax; j++ )\n\t{\n\t    if( z.x*z.x + z.y*z.y > 2.0*2.0) \n\t\t\tbreak;\t\n\t\n\t\tz = vec2((z.x*z.x-z.y*z.y), (z.x*z.y+z.x*z.y))+c;\n\t\ti++;\n\t}\n\tif (i<1024.){\n\t\treturn vec3 (i/1024.,i/512.,i/256.); \n\t}\n\telse {\n\t\treturn vec3(0.0,0.0,0.0);\n\t}\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = -1.0 + 2.0 * (fragCoord.xy / iResolution.xy);\n    uv.x *= iResolution.x/iResolution.y;\n       \n\tfloat ang = iTime*(-0.25);\n\tmat2 rotation = mat2(cos(ang), sin(ang),-sin(ang), cos(ang));\n    //float f = (2.0/3.14)*asin(sin(2.0*3.14*iTime*0.05)); f*=abs(f*f*f); float zoom = f*1e3;\n    float f = exp(sin(iTime*0.1-1.4))-1.0/exp(1.0); f*=f; float zoom = f*1e3; \t  \n    uv/=zoom;\n    uv*=rotation;\n    uv.x-=1.2478;\n    uv.y+=0.05225;\n\tvec2 c = vec2(uv.x, uv.y);\n\tvec2 z = vec2(0.0,0.0);\n    \n\tvec3 col = MBrot(c, z, uv);\n\t\n\tfragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4sXGDM","date":"1371494126","viewed":237,"name":"Mandelbrot set","username":"Lallis","description":"Trying out the Mandelbrot set fractal with zoom + rotation\n","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal","mandelbrot"],"hasliked":0,"parentid":"","parentname":""}}