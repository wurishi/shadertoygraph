{"ver":"0.1","info":{"id":"MtXyD2","date":"1506439229","viewed":109,"name":"Time functions","username":"tgsstdio","description":"Bottom : default blending using sin\nplus separator from bender code\nMiddle: time with modulo blending\n2ND from top: switching color values within array\nTOP: subdividing sections by value within float array\n","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["time"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MID_POINT 0.5\n#define RANGE_OF_TRIG_FUNC 0.5\n#define TWO_PI 6.283185307179586476925286766559\n// in hertz (per sec)\n#define FREQUENCY 0.1\n\n#define BLENDING_LOOP_IN_SECS 10.0\n#define PRIMARY_COLOR_LOOP_IN_SECS 6.0\n\n#define SUBDIVISION_LOOP_IN_SECS 8.0\n#define NO_OF_DIVISIONS 8\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tvec3 col = vec3(uv,0.5+0.5*sin(iTime));   \n    \n    \n    // SEPARATOR FROM https://www.shadertoy.com/view/4slSWf\n    float sep = iResolution.x * smoothstep( 0.5, 0.8, cos(1.57+0.25*1.2831*iTime));\n\t\n    // separator\n    col *= smoothstep( 1.0, 2.0, abs(fragCoord.x-sep));\t\t\n\t\n    if (uv.y < 0.4)       \n        // Bottom : default blending using sin plus separator from bender demo \n        // \n\t\tfragColor = vec4( col, 1.0 );\n    else if (uv.y < 0.6)\n    {\n        // Middle: SINE FUNCTION \n        \t// SINE starts at mid, goes up to max, down to mid then bottom and up to mid\n        \n        fragColor = vec4(MID_POINT + RANGE_OF_TRIG_FUNC * sin( FREQUENCY * TWO_PI * iTime));\n    }\n    else if (uv.y < 0.8)\n    {           \n        // 2ND from top: switching color values within array\n        float timeStep = mod(iTime, PRIMARY_COLOR_LOOP_IN_SECS) / PRIMARY_COLOR_LOOP_IN_SECS;\n        \n        vec3 primaryColors[3] = vec3[](        \n        \tvec3(1., 0., 0),\n        \tvec3(0., 1., 0),\n        \tvec3(0., 0., 1)                \n        );       \n            \n       \tint colorIndex = int(floor(timeStep * 3.0));            \n            \n        fragColor = vec4(primaryColors[colorIndex], 1.);               \n    }\n    else\n    {\n        // TOP: subdividing sections by value within float array           \n        float gapTimeStep = mod(iTime, SUBDIVISION_LOOP_IN_SECS) / SUBDIVISION_LOOP_IN_SECS;\n        \n\n        float sections[NO_OF_DIVISIONS] = float[](\n            1.,\n        \t2.,\n        \t4.,\n        \t8.,\n            16.,\n            32.,\n            64.,\n            128.\n        );                 \n       \n        float count = sections[int(gapTimeStep * float(NO_OF_DIVISIONS))]; \n\n        if (int(uv.x * count) % 2 == 0)\n        {\n            fragColor = vec4(1., 0., 1., 1.);  \n        }\n        else\n        {\n            fragColor = vec4(1., 1., 0., 1.);\n        }                \n               \n    }    \n}","name":"Image","description":"","type":"image"}]}