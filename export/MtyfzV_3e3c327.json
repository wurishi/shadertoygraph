{"ver":"0.1","info":{"id":"MtyfzV","date":"1543170776","viewed":183,"name":"Radial Timer","username":"Darn","description":"Simple radial timer","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["radial","pi","atan","angle","trigonometry","timer","atan2"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 center = vec2(0.5,0.5);\nfloat circleRadius = 100.0;\nfloat pi = 3.1415926535897932384626433832795;\nfloat timePerCycle = 3.0;\nvec4 bgColor = vec4(0.0,0.0,0.0,0.0);\n\nvec4 getColor(int currentCycleIndex)\n{\n    if (currentCycleIndex % 2 == 0)\n    {\n        return vec4(0.4,0.4,0.4,0.0);\n    }\n    else\n    {\n        return vec4(0.7,0.7,0.7,0.0);\n    }\n}\n\nvoid normalizeAngle(out float angle)\n{\n    angle = mod(angle, 2.0 * pi);\n    if (angle < 0.0) angle += 2.0 * pi;\n}\n\nbool isAngleWithinBound(in float angle, in float angleBound1, in float angleBound2)\n{\n    normalizeAngle(angle);\n    normalizeAngle(angleBound1);\n    normalizeAngle(angleBound2);\n    return angle > angleBound1 && angle < angleBound2;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;//normalized pixel coordinates (from 0 to 1)\n    vec2 direction = uv - center;//get direction vector from center to current coord\n    float angle = atan(direction.y,direction.x);//get angle\n    \n    int cycleIndex = int(iTime/timePerCycle);\n    float distanceFromCenter = length((uv - center) * iResolution.xy);\n    \n    if (distanceFromCenter < circleRadius)\n    {\n        if (isAngleWithinBound(angle, 0.0, iTime / timePerCycle * 2.0 * pi))\n        {\n            //fragColor = vec4(0.0,0.0,0.0,0.0);\n            fragColor = getColor(cycleIndex);\n        }\n        else\n        {\n            //fragColor = vec4(1.0,1.0,1.0,0.0);\n            fragColor = getColor(cycleIndex+1);\n        }\n    }\n    else\n    {\n        fragColor = bgColor;\n    }\n}\n","name":"Image","description":"","type":"image"}]}