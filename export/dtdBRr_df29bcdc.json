{"ver":"0.1","info":{"id":"dtdBRr","date":"1700906525","viewed":39,"name":"Bloom Test Experiment","username":"roey_shap","description":"Testing: implementing bloom, using inputChannels and buffers, getting parts of the texture other than the current coordinate.\nProbably not the recommended way to implement bloom but I do what I want.","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["bloom"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float map(float min1, float max1, float value, float min2, float max2)\n{\n    float d2 = max2 - min2;\n    float d1 = max1 - min1;\n    float sizeRatio = d2 / d1;\n\n    return (value * sizeRatio) - (min1 * sizeRatio) + min2;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    \n    vec3 rawColor = texture(iChannel0, fragCoord / iResolution.xy).xyz;\n    \n    vec3 luminosityColor = texture(iChannel1, fragCoord / iResolution.xy).xyz;\n    vec3 lumFromNeighbors = vec3(0.0);\n    int r = 10;\n    for (int i = -r; i < r; i++) {\n        for (int j = -r; j < r; j++) {\n            vec3 neighborLum = texture(iChannel1, (fragCoord + vec2(i, j)) / iResolution.xy).xyz;\n            int f = (i*i) + (j*j);\n            lumFromNeighbors += neighborLum / float(1 + f);\n        }\n    }\n    \n    lumFromNeighbors /= float(r * r / 2);\n   \n    fragColor = vec4(rawColor + (lumFromNeighbors * map(-1.0, 1.0, sin(iTime * 4.0), 0.0, 1.0)),1.0);\n    //fragColor = vec4(luminosityColor, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec3 imageColor = texture(iChannel0, uv).xyz;\n    //vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n\n    //vec3 col = vec3(map(-1.0, 1.0, sin(4.0 * iTime), 0.0, 1.0));\n    //col = step(col, vec3(0.0, 0.5, 1.0));\n    \n    fragColor = vec4(imageColor, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec3 imageColor = texture(iChannel0, uv).xyz;\n    \n    float luminosity = dot(imageColor.rgb, vec3(0.2126, 0.7152, 0.0722));\n    bool brightEnough = luminosity > 0.5;\n    vec3 finalCol = imageColor * luminosity * float(brightEnough);\n    fragColor = vec4(finalCol, 1.0);\n}","name":"Buffer B","description":"","type":"buffer"}]}