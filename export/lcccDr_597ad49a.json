{"ver":"0.1","info":{"id":"lcccDr","date":"1730483318","viewed":26,"name":"Mandlebro96","username":"SUBAUX","description":"Its great","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Zoom factor that changes over time\n    float zoom = pow(1.02, iTime * 20.0);\n\n    // Use mouse position to control the zoom center when clicked\n    vec2 mousePos = (iMouse.xy / iResolution.xy - 0.5) * 2.5;\n    vec2 center = (iMouse.z > 0.0) ? mousePos : vec2(-0.5, 0.0); // Default to (-0.5, 0.0) if no mouse click\n\n    // Adjust coordinates with zoom and center\n    vec2 uv = (fragCoord.xy / iResolution.xy - 0.5) * 2.5 / zoom + center;\n    uv.x *= iResolution.x / iResolution.y;\n\n    // Complex number c represented as a 2D vector\n    vec2 c = uv;\n    vec2 z = vec2(0.0);\n\n    // Maximum number of iterations\n    int maxIterations = 100;\n    int i;\n    for (i = 0; i < maxIterations; i++) {\n        // Mandelbrot formula: z = z^2 + c\n        z = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + c;\n\n        // Check if the magnitude of z is greater than 2 (escape condition)\n        if (dot(z, z) > 4.0) break;\n    }\n\n    // Color the pixel based on the number of iterations\n    float color = float(i) / float(maxIterations);\n    fragColor = vec4(vec3(color), 1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}