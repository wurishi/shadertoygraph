{"ver":"0.1","info":{"id":"NdGyD3","date":"1655675768","viewed":524,"name":"Devil's Mineshaft","username":"Hyeve","description":"Yes, I know, but I'm not gonna name the shader that! Regardless, this is uh... not clean at all (in terms of RENDERING), but I think that's part of why it looks good.","likes":16,"published":1,"flags":32,"usePreview":0,"tags":["3d","raymarching","reflections"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//See the common tab for fps control.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texture(iChannel0, fragCoord / iResolution.xy);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define DTR 0.01745329\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n\nvec2 uv=vec2(0);\nvec3 cp,cn,cr,ss,oc,gl=vec3(0),vb,ro,rd,so,ld;\nvec4 fc=vec4(0),cc=vec4(0);\nfloat tt,cd,sd,md,io,oa,td=0.,li;\nint es=0,ec=0,fi=1;\n\nfloat smin(float a, float b, float k){float h=clamp(0.5+0.5*(b-a)/k,0.,1.);return mix(b,a,h)-k*h*(1.-h);}\n\nfloat grass(vec3 p)\n{\n\tp.xy *= rot(DTR*45.);\n\tp.zy *= rot(DTR*45.);\n\tfloat v = dot(sin(p.xyz+tt),cos(p.zxy+1.+tt)) - 0.5;\n\tv -= abs(length(p)) * 0.1;\n\tv = abs(v);\n\treturn v * 0.3;\n}\n\nfloat mp(vec3 p)\n{\n\t\tvec3 ppp = p;\n\t\n\t\tp.y += 3.;\n\t\tp.z += tt*5.;\n\t\t\n\t\tp.xy *= rot(p.z*0.1);\n\n\t\n\t\tvec3 pp = p;\n\n\t\n\t\tp.x = abs(p.x) - 5. + mix(floor((p.y)/20.)*8.,floor((-p.y)/20.)*8.,cos(tt*0.3+p.z*0.1)*0.5+0.5);\n\t\tp.zy = mod(p.zy, 20.) - 10.;\n\t\t//p.x += sin(floor(p.z/10.))*3.;\n\t\n\t\n\t\tsd = grass(p);\n\t\n\t\tfloat vary = grass(p+vec3(0.,0.,+3.));\n\t\n\t\tgl += exp(-vary*5.) * vec3(1.,cos(p.x*3.)*0.3+0.3,cos(p.z*3.5)*0.3+0.3) * 0.003;\n\t\n\t\tp = pp;\n\t\n\t\tgl += exp(-length(p.xy+vec2(0,10))*0.7) * vec3(1,0.5,0) * 0.03;\n\t\n\t\n\t\n\t\tp.x=abs(p.x) - 10.;\n\t\tfloat cys = length(p.xy)- 3.;\n\t\n\t\n\t\n\t\tsd = smin(sd, cys, 1.);\n\t\t\n\t\tsd = min(sd, abs(ppp.z-30.)-0.1);\t\n\t\n\t\n\t\tsd=abs(sd)-0.001;\n\t\n\t\tif(sd<0.01)\n\t\t{\t\n\t\t\tio=-1.;\n\t\t\toc=vec3(0);\n\t\t\toa=-vary-0.2;\n\t\t\tss=vec3(1,0,0);\n\t\t\tec=2;\t\n\n\t\t}\n\t\treturn sd;\n}\n\nvoid nm(){mat3 k=mat3(cp,cp,cp)-mat3(.001);cn=normalize(mp(cp)-vec3(mp(k[0]),mp(k[1]),mp(k[2])));cn=normalize(cn);}\nvoid shtr(){so=cp+cn*0.05;md=64.;for(li=cd=0.;cd<64.;li++,cd+=mp(cp=ro+cn*0.05-ld*cd)){if(sd<md&&sd<cd)md=sd;if(sd<0.001||li>64.)break;}}\nvoid tr(){for(li=cd=0.;cd<64.;){li++;cd+=mp(cp=ro+rd*cd);td+=sd;if(sd<0.0001||li>512.)break;}nm();}\n\n\nvoid px(vec3 rd)\n{\n  vec3 bg=cc.rgb=vec3(0.,0.,0.)-length(uv)*0.3+gl;\n\tif(cd<64.)\n\t{cc.a=oa;ld=normalize(cp-vec3(0, 1, -20));\n\tfloat df=max(dot(cn,-ld),0.),sp=max(1.-length(cross(rd+ld,cn)),0.)*(1.2-oa),\n\tfo = exp(-pow(0.1*td,1.)),ao=1.-clamp(mp(cp+cn*.1)/.1,0.,1.);\n\tvec3 fr=pow(1.-abs(dot(rd,-cn)),3.)*mix(cc.rgb,oc,0.);\n  cc.rgb=(oc*df+fr+sp+ss)-ao*0.;\n\t//shtr();cc.rgb-=(1.-clamp(md/0.05,0.,1.))*0.0;\n\tcc.rgb = mix(bg, cc.rgb, fo);}\n\telse cc.a=1.;cc.rgb+=gl;\n\tcc.rgb*=max(max(cc.r,max(cc.g,cc.b)),1.);\n}\n\nvoid render(vec2 frag, vec2 res, float time, out vec4 col)\n{\n  uv=vec2(frag.x/res.x,frag.y/res.y);\n  uv-=0.5;uv/=vec2(res.y/res.x,1);\n\ttt=mod(time+10.,100.);\n\tuv*=0.8;\n  ro=vec3(0,0,-30);\n\trd=normalize(vec3(uv-vec2(0,0.1),1.));\n\t\n\tfor(int i=0;i<4;i++)\n  {\n\t\ttr();ro=cp-cn*(io<0.?-0.01:0.01);\n\t\tcr=refract(rd,cn,i%2==0?1./io:io);\n    if((length(cr)==0.&&es<=0)||io<0.)\n\t\t{i++;cr=reflect(rd,cn);es=(io<0.?es:ec);}\n\t\tpx(rd);if(max(es,0)%3==0) rd=cr;\n\t\tes--;fc=fc+vec4(cc.rgb*cc.a,cc.a)*(1.-fc.a);\n\t\tif(fc.a>=1.)break;\n  }\n  col=fc/fc.a;\n\n  col = mix(col, texture(iChannel0,frag/res), 0.9);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if(mod(float(iFrame), 60./FPS) < 1. || iFrame < 5) render(fragCoord.xy,iResolution.xy,iTime,fragColor);\n    else fragColor = texture(iChannel0, fragCoord / iResolution.xy);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"//fps control for performance. Assumes the refresh rate of your monitor is 60hz\n//(120hz monitor set to 30 here will actually run at 60fps)\n#define FPS 30.","name":"Common","description":"","type":"common"}]}