{"ver":"0.1","info":{"id":"4dyXW3","date":"1466862696","viewed":276,"name":"raytraced room-portal thing","username":"wutzhuhn","description":"A ray is cast for every pixel and tested against all walls in the current room. If the wall the ray hits is a portal to another room, the ray is tested against the walls of the second room and so on...","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["3d","raycasting","portals"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"struct Plane {\n    vec3 normal;\n    float offset;\n};\n\nstruct Wall {\n\tPlane plane;\n    vec3 color;\n    int portal;\n};\n\nstruct Ray {\n    vec3 origin;\n    vec3 normal;\n};\n\nstruct Room {\n    Wall walls[6];\n};\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    Room rooms[2];\n    rooms[0].walls[0] = Wall(Plane(vec3( 1.0,  0.0,  0.0), -1.0), vec3(1.0, 0.5, 0.5), -1);\n    rooms[0].walls[1] = Wall(Plane(vec3(-1.0,  0.0,  0.0), -1.0), vec3(0.5, 1.0, 0.5), -1);\n    rooms[0].walls[2] = Wall(Plane(vec3( 0.0,  1.0,  0.0), -1.0), vec3(0.1, 0.1, 0.1), -1);\n    rooms[0].walls[3] = Wall(Plane(vec3( 0.0, -1.0,  0.0), -2.0), vec3(0.9, 0.9, 0.9), -1);\n    rooms[0].walls[4] = Wall(Plane(vec3( 0.0,  0.0,  1.0), -1.0), vec3(0.5, 0.5, 1.0), -1);\n    rooms[0].walls[5] = Wall(Plane(vec3( 0.0,  0.0, -1.0), -1.0), vec3(0.5, 0.5, 0.5),  1);\n    \n    rooms[1].walls[0] = Wall(Plane(vec3( 1.0,  0.0,  0.0), -2.0), vec3(0.0, 0.5, 0.5), -1);\n    rooms[1].walls[1] = Wall(Plane(vec3(-1.0,  0.0,  0.0), -2.0), vec3(0.5, 0.0, 0.5), -1);\n    rooms[1].walls[2] = Wall(Plane(vec3( 0.0,  1.0,  0.0), -1.0), vec3(0.1, 0.1, 0.1), -1);\n    rooms[1].walls[3] = Wall(Plane(vec3( 0.0, -1.0,  0.0), -2.0), vec3(0.9, 0.9, 0.9), -1);\n    rooms[1].walls[4] = Wall(Plane(vec3( 0.0,  0.0,  1.0),  1.0), vec3(0.5, 0.5, 1.0),  0);\n    rooms[1].walls[5] = Wall(Plane(vec3( 0.0,  0.0, -1.0), -4.0), vec3(0.5, 0.5, 0.5), -1);\n    \n    vec3 lightPos = vec3(0.0, 0.0, sin(iTime / 10.0) * 2.0 - 2.0);\n    \n    vec3 forward = normalize(vec3(sin(iTime), -0.3, cos(iTime)));\n    vec3 right = normalize(cross(forward, vec3(0, 1, 0)));\n    vec3 up = cross(right, forward);\n    \n    float asp = iResolution.y / iResolution.x;\n    \n    float sx = 0.01 * (fragCoord.x / iResolution.x - 0.5);\n    float sy = 0.01 * (fragCoord.y / iResolution.y - 0.5) * asp;\n    Ray ray;\n    ray.origin = vec3(0, -1, 0);\n    ray.normal = normalize(vec3(\n    \tright.x * sx + up.x * sy + forward.x * 0.0025,\n    \tright.y * sx + up.y * sy + forward.y * 0.0025,\n    \tright.z * sx + up.z * sy + forward.z * 0.0025\n    ));\n    \n    \n    vec3 color = vec3(1, 0, 1);\n    vec3 normal = vec3(0);\n    float minDist;\n    int roomIndex = 0;\n    for (int bla = 0; bla < 2; ++bla) {\n        if (roomIndex == bla) {\n            minDist = 1000000000.0;\n            int nextIndex = -1;\n            for (int i = 0; i < 6; ++i) {\n                Wall wall = rooms[bla].walls[i];\n                float d = dot(wall.plane.normal, ray.normal);\n                float dist = -(dot(wall.plane.normal, ray.origin) + wall.plane.offset) / d;\n\n                if (d > 0.0 && dist > 0.001 && dist < minDist) {\n                    minDist = dist;\n                    normal = wall.plane.normal;\n                    color = wall.color;\n                    nextIndex = wall.portal;\n                }\n            }            \n            if(-1 == nextIndex) break;\n            roomIndex = nextIndex;\n        }\n    }\n    \n    vec3 worldPos = ray.origin + ray.normal * minDist;\n    vec3 lightDist = worldPos - lightPos;\n    //color *= dot(normal, normalize(lightDist));\n    color /= dot(lightDist, lightDist);\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}