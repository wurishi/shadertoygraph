{"ver":"0.1","info":{"id":"4sVGWc","date":"1456797838","viewed":209,"name":"Water JCVD","username":"jackdavenport","description":"A displaced plane, made in the shape of JCVD. Looks pretty crappy, but the normals are pretty erratic.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["water","raymarcher","reflect","refract","jcvd"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define LIGHT_DIR normalize(vec3(45.,30.,45.))\n\nstruct Ray { vec3 ori; vec3 dir; };\nstruct Hit { vec3 p; bool hit; \t };\n    \nfloat dstJCVD(vec3 p, float y) {\n\n    vec4 jcvd = texture(iChannel0,mod(p.xz/6. + vec2(.575,.5),1.));\n    float dst = p.y - y;\n    \n    return dst - ((jcvd.x + jcvd.y + jcvd.z) / 3.) * .15;\n    \n}\n\nfloat dstScene(vec3 p) {\n \n    return dstJCVD(p, -1.);\n    \n}\n\nHit raymarch(Ray ray) {\n\n    vec3 p = ray.ori;\n    bool h = false;\n    \n    for(int i = 0; i < 64; i++) {\n        \n        float dst = dstScene(p);\n        p += ray.dir * dst * .5;\n        \n        if(dst < .001) {\n         \n            h = true;\n            break;\n            \n        }\n        \n    }\n    \n    return Hit(p,h);\n    \n}\n\nvec3 calcNormal(vec3 p) {\n \t   \n    vec2 eps = vec2(.001,0.);\n    vec3   n = vec3(dstScene(p + eps.xyy) - dstScene(p - eps.xyy),\n                    dstScene(p + eps.yxy) - dstScene(p - eps.yxy),\n                    dstScene(p + eps.yyx) - dstScene(p - eps.yyx));\n    return normalize(n);\n    \n}\n\nvec2 rot2D(vec2 p, float angle) {\n \n    angle = radians(angle);\n    float s = sin(angle);\n    float c = cos(angle);\n    \n    return p * mat2(c,s,-s,c);\n    \n}\n\n// Thanks iq! (Once again)\nfloat softshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<16; i++ )\n    {\n\t\tfloat h = dstScene( ro + rd*t );\n        res = min( res, 32.0*h/t );\n        t += clamp( h, 0.02, 0.10 );\n        if( h<0.001 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n\n}\n\nvec3 calcLighting(Hit scn, vec3 n) {\n \n    float d = max(dot(n,LIGHT_DIR), 0.);\n    d *= softshadow(scn.p + LIGHT_DIR * .01, LIGHT_DIR, 0.2, 20.);\n    \n    return vec3(1.) * d;\n    \n}\n\nvec3 shade(Ray ray) {\n \n    Hit scn  = raymarch(ray);\n    vec3 col = vec3(1.);\n    \n    if(scn.hit) {\n     \n        vec3 n = calcNormal(scn.p);\n        vec3 l = calcLighting(scn, n);\n        \n        vec3 rld = reflect(ray.dir, n);\n        vec3 rfd = refract(ray.dir, n, .33);\n        \n        float fresnel = mix(.2, .9, dot(ray.dir,n));;\n        col = mix(texture(iChannel1,rld),texture(iChannel1,rfd),fresnel).xyz;\n        \n    }\n    \n    return col;\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord - iResolution.xy * .5) / iResolution.y;\n    \n    vec3 ori = vec3(0.,3.,0.);\n    vec3 dir = vec3(uv, 1.);\n    dir.yz = rot2D(dir.yz, -90.);\n    \n    vec3 col = shade(Ray(ori,dir));\n\tfragColor = vec4(col,1.);\n}","name":"Image","description":"","type":"image"}]}