{"ver":"0.1","info":{"id":"fs3SDS","date":"1636200888","viewed":75,"name":"Tilable 2D fBm","username":"Jens","description":"Tilable version of fBm seen in https://thebookofshaders.com/13/","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["noise","fbm","brownianmotion","tilable"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926538\n\n\n// #define ShowGrid\n\n#define OCTAVES 8\n// #define ShowOctave 0\n\n#define Seed 0xfffff\n\n// #define random(st) randomXOR32(st)\n// #define random(st) randomTrig(st)\n#define random(st) hashwithoutsine12(st)\n\n// TODO(Jens): Should ppl stop copying this rng?\n//             See https://www.shadertoy.com/view/XlGcRh# for other random number generators.\nfloat randomTrig(in vec2 st)\n{\n    return fract(sin(dot(st.xy, vec2(12.9898,78.233)))*43758.5453123);\n}\n\nuint randomXOR_uint(uint state)\n{\n    uint res = state;\n    res ^= res << 13;\n    res ^= res >> 7;\n    res ^= res << 17;\n    \n    return res;\n}\n\nfloat randomXOR32(in vec2 st)\n{\n    uint seedX = 31u * uint(Seed) + floatBitsToUint(1.0 + 3.0 * st.x);\n    uint seedY = 17u * uint(Seed) + floatBitsToUint(31.0 + 17.0 * st.y);\n    \n    float rand = float(randomXOR_uint(randomXOR_uint(seedX) + seedY)) / float(0xffffffffu);\n    return rand;\n}\n\n// NOTE(Jens): Mostly copied from https://www.shadertoy.com/view/4djSRW\nfloat hashwithoutsine12(vec2 p)\n{\n    // NOTE(Jens): Very hand-wavy way of adding seed. Seems to explode if Seed > 0x0f'ff'ff\n    p = p * 0.152 + 50.0 + float(Seed);\n\n\tvec3 p3 = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n\n\n// Based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise(in vec2 st, in vec2 dim)\n{\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(mod(i, dim));\n    float b = random(mod(i + vec2(1.0, 0.0), dim));\n    float c = random(mod(i + vec2(0.0, 1.0), dim));\n    float d = random(mod(i + vec2(1.0, 1.0), dim));\n\n    // NOTE(Jens): Smoothstep\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\nfloat fbm(in vec2 st, in vec2 dim)\n{\n    // Initial values\n    float value = 0.0;\n    float amplitude = .5;\n    float frequency = 0.;\n    //\n    // Loop of octaves\n    for (int i = 0; i < OCTAVES; i++) \n    {\n#if defined(ShowOctave)\n        if (ShowOctave == i)\n#endif\n        {\n            value += amplitude * noise(st, dim);\n        }\n        st *= 2.0;\n        dim *= 2.0;\n        amplitude *= 0.5;\n    }\n    return value;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // NOTE(Jens): Higher number -> more zoomed out.\n    float zoomFactor = 3.0 + 20.0 * (0.5 + 0.5 * sin(0.075*iTime));\n    // zoomFactor = 5.0;\n    \n    vec2 repeatDim = vec2(10.0);\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/vec2(iResolution);\n    uv.x *= float(iResolution.x) / float(iResolution.y);\n\n    vec2 zoomedUV = 0.5 + (uv - 0.5) * zoomFactor; // NOTE(Jens): Zoom is pivoted to center of view.\n    \n    vec3 col = vec3(fbm(zoomedUV, repeatDim));\n\n#ifdef ShowGrid\n    col *= step(2.0 * zoomFactor / iResolution.x, mod(zoomedUV.x, repeatDim.x));\n    col *= step(2.0 * zoomFactor / iResolution.y, mod(zoomedUV.y, repeatDim.y));\n#endif\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}