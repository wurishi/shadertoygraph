{"ver":"0.1","info":{"id":"4tVSRw","date":"1483583088","viewed":536,"name":"Planet - Fixed","username":"ptrgags","description":"took this GIMP tutorial (http://mygimptutorial.com/the-ultimate-gimp-planet-tutorial) and tried to make a GLSL version\n\nFixed the stars and added a bit of barrel distortion","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["2d","space","planet","stars","picture","gimp"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define CENTER (iResolution.xy / 2.0)\n\n/*\n * Fitzgibbon's approximation of Barrel/Pincushion distortion. \n * Formula and explanation found at:\n * http://marcodiiga.github.io/radial-lens-undistortion-filtering\n * \n * r     - distance from the center of distortion\n * alpha - distortion parameter. negative for barrel distortion,\n * \t\t   positive for pincushion distortion.\n */\nvec2 lens_distortion(vec2 r, float alpha) {\n    return r * (1.0 - alpha * dot(r, r));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //Centered UV Coordinates, accounting for aspect ratio\n\tvec2 uv = (fragCoord - CENTER) / iResolution.y;\n    \n    //Planet parameters\n    float planet_radius = 0.3;\n    vec4 planet_color = vec4(0.3, 0.7, 0.8, 1.0);\n    \n    //Mask for the shape of the planet\n    float r = length(uv);\n    float planet_mask = smoothstep(planet_radius + 0.01, planet_radius, r);\n    \n    //Inverted mask for space\n    float space_mask = 1.0 - planet_mask;\n    \n    /**\n     * Layer 1: Stars. Apply a threshold filter to\n     * a noise texture to get stars.\n     */\n    vec4 noise = texture(iChannel0, uv);\n    vec4 stars = step(0.96, noise);\n    fragColor = space_mask * stars;\n    \n    /**\n\t * Layer 2: planet texture with barrel distortion\n     */\n    vec2 distortion = lens_distortion(uv, -20.0);\n    vec4 planet_tex = texture(iChannel1, uv + distortion);\n    vec4 planet = planet_mask * planet_color * planet_tex;\n    fragColor += planet;\n\n    /**\n     * Layer 3: Atmosphere\n     */\n    float inner = smoothstep(planet_radius - 0.03, planet_radius, r);\n    float outer = smoothstep(planet_radius + 0.005, planet_radius, r);\n    float atmosphere_mask = inner * outer;\n    vec4 atmosphere_color = vec4(0.0, 0.5, 0.5, 1.0);\n    vec4 atmosphere = atmosphere_color * atmosphere_mask;\n    fragColor += atmosphere;\n    \n    /**\n     * Layer 4: Shadow\n     */\n    \n    vec2 shadow_center = vec2(-0.2, -0.14);\n    float shadow_radius = 0.51;\n    float dist = distance(uv, shadow_center);\n    float shade = smoothstep(shadow_radius - 0.2, shadow_radius, dist);\n    vec4 shadow = shade * vec4(1.0);\n    float shadow_mask = smoothstep(planet_radius + 0.01, planet_radius, r);\n    //Cover up the atmosphere\n    float space_mask2 = step(planet_radius + 0.01, r);\n    vec4 clipped_shadow = shadow_mask * shadow + space_mask2;\n    fragColor *= clipped_shadow;\n    \n    \n}","name":"Image","description":"","type":"image"}]}