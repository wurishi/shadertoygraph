{"ver":"0.1","info":{"id":"dlGyRy","date":"1700341050","viewed":14,"name":"First shader, fractal ","username":"jul_gay","description":"based on a youtube tutorial","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal","trippy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 palette(float t) {\n    vec3 a = vec3(0.821, 0.328, 0.242);\n    vec3 b = vec3(0.659, 0.481, 0.896);\n    vec3 c = vec3(0.612, 0.340, 0.296);\n    vec3 d = vec3(2.820, 3.026, -0.273);\n\n    return a + b*cos(6.28328*(c*t+d));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord *2.0 - iResolution.xy) / iResolution.y; \n    \n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.0);\n\n    for (float i =0.0 ; i < (-length(uv0)*3. + 6.); i++){\n        \n        uv = fract(uv*2.14) -0.5;\n\n        float d0 = abs(length(uv));\n        float d = length(uv);\n\n\n        vec3 col = palette(length(uv0) + iTime);\n\n        d = sin(d*8. + iTime)/8.;\n\n        d = abs(d);\n\n        d = 0.02/d;\n\n        //col*=d;\n        \n        //d = d * pow(d,0.9);\n        \n        if ((i+1.) > (-length(uv0)*3. + 6.)){\n            float diff = (i+1.) - (-length(uv0)*3. + 6.);\n        \n            finalColor += (col * d)*(1.-diff);\n        }\n        else {\n            finalColor += (col * d);\n        }\n        \n        \n    }\n    \n   \n    \n    fragColor = vec4(finalColor,1.0);\n}","name":"Image","description":"","type":"image"}]}