{"ver":"0.1","info":{"id":"4tfcDj","date":"1506359281","viewed":582,"name":"Skulls","username":"gribbet","description":"A simple rendering originally created with Rayity (https://github.com/gribbet/rayity). Unfortunately the shader is not too readable as it's generated by code.\n\nModeling originally by duvengar. https://www.shadertoy.com/view/Mlfyz4","likes":19,"published":1,"flags":32,"usePreview":0,"tags":["raymarching","pathtracing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 r = texture(iChannel0, uv);\n    fragColor = vec4(pow(r.xyz / r.w, vec3(1.0 / 2.0)), 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float PI = 3.14159;\nconst float MAX_VALUE = 1e10;\n\nconst float epsilon = 0.001;\nconst int steps = 50;\nconst int bounces = 5;\nconst int iterations = 1;\n\nstruct Closest {\n\tint object;\n\tfloat distance;\n};\n\nstruct Material {\n\tfloat transmittance;\n\tfloat smoothness;\n\tfloat refraction;\n\tfloat scatter;\n\tvec3 color;\n\tvec3 emissivity;\n};\n\nClosest calculateClosest(vec3 position);\nvec3 calculateNormal(int object, vec3 position);\nMaterial calculateMaterial(int object, vec3 position, vec3 normal, vec3 direction);\n\nvec2 random(vec2 uv, int seed) {\n\tvec2 s = (vec2(1) + uv) * float(seed) + iTime;\n\treturn vec2(\n\t\tfract(sin(dot(s.xy, vec2(12.9898, 78.233))) * 43758.5453),\n\t\tfract(cos(dot(s.xy, vec2(4.898, 7.23))) * 23421.631));\n}\n\nvec3 ortho(vec3 v) {\n\treturn abs(v.x) > abs(v.z) ? vec3(-v.y, v.x, 0.0) : vec3(0.0, -v.z, v.y);\n}\n\nvec3 calculateSample(vec3 normal, float smoothness, vec2 noise) {\n\tvec3 o1 = normalize(ortho(normal));\n\tvec3 o2 = normalize(cross(normal, o1));\n\tnoise.x *= 2.0 * PI;\n\tnoise.y = sqrt(smoothness + (1.0 - smoothness) * noise.y);\n\tfloat q = sqrt(1.0 - noise.y * noise.y);\n\treturn q * (cos(noise.x) * o1  + sin(noise.x) * o2) + noise.y * normal;\n}\n\nvec3 sampleSphere(vec2 noise) {\n\tnoise.x *= 2.0 * PI;\n\tnoise.y = noise.y * 2.0 - 1.0;\n\tfloat q = sqrt(1.0 - noise.y * noise.y);\n\treturn vec3(q * cos(noise.x), q * sin(noise.x), noise.y);\n}\n\nvec3 spherical(vec2 angle) {\n\treturn vec3(sin(angle.y) * cos(angle.x), cos(angle.y), sin(angle.y) * sin(angle.x));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord / iResolution.xy * 2.0 - 1.0;\n    vec2 mouse = iMouse.xy / iResolution.xy * vec2(2, 0.1) + vec2(0.5, 0.65);\n\t\n\tvec3 a76dddf8b = vec3(0.000000000, 0.000000000, 0.000000000);\n\tvec3 a30f5ce28 = vec3(3.000000000, 3.000000000, 3.000000000);\n\tvec3 a4d74cc95 = vec3(-0.3000000000, -0.4000000000, -0.4000000000);\n\tvec3 a77e56843 = vec3(a76dddf8b + a30f5ce28.x * spherical((mouse + a4d74cc95.xy) * PI));\n\tvec3 a48aa8baa = vec3(0.000000000, 1.000000000, 0.000000000);\n\tvec3 a682ba433 = vec3(0.7853981634, 0.7853981634, 0.7853981634);\n\tvec3 ab4af433a = vec3(0.1000000000, 0.1000000000, 0.1000000000);\n\tvec3 a4ec342ea = vec3(1.000000000, 1.000000000, 1.000000000);\n\tvec3 eye = a77e56843;\n\tvec3 target = a76dddf8b;\n\tvec3 up = a48aa8baa;\n\tfloat fieldOfView = a682ba433.x;\n\tfloat aperture = ab4af433a.x;\n\tfloat focalFactor = a4ec342ea.x;\n\tfloat aspect = iResolution.x / iResolution.y;\n\n\tvec3 look = normalize(target - eye);\n\tup = normalize(up - dot(look, up) * look);\n\tvec3 right = cross(look, up);\n\t\n\tvec3 total = vec3(0);\n\n\tfor(int iteration = 1; iteration <= iterations; iteration++) {\n\t\tvec2 noise = random(uv, iteration);\n\n\t\tvec2 offset = noise.x * aperture * vec2(cos(noise.y * 2.0 * PI), sin(noise.y * 2.0 * PI));\n\t\tvec3 from = eye + offset.x * right + offset.y * up;\n\n\t\tvec2 angle = (uv * 0.5 + (noise - 0.5) / iResolution.xy) * fieldOfView * vec2(aspect, 1);\n\t\tvec3 screen = vec3(cos(angle.y) * sin(angle.x), sin(angle.y), cos(angle.y) * cos(angle.x));\n\t\tvec3 to = eye + focalFactor * length(target - eye) * (right * screen.x + up * screen.y + look * screen.z);\n\n\t\tvec3 direction = normalize(to - from);\n\n\t\tvec3 luminance = vec3(1);\n\n\t\tMaterial air;\n\t\t\n\tvec3 a4ec342ea = vec3(1.000000000, 1.000000000, 1.000000000);\n\tvec3 a76dddf8b = vec3(0.000000000, 0.000000000, 0.000000000);\n\t\tair.refraction = a4ec342ea.x;\n\t\tair.scatter = a76dddf8b.x;\n\t\tair.emissivity = a76dddf8b;\n\t\tair.color = a4ec342ea;\n\n\t\tMaterial current = air;\n\n\t\tfor (int bounce = 1; bounce <= bounces; bounce++) {\n\t\t\tClosest closest;\n\t\t\tvec3 position = from;\n\t\t\tfloat distance = 0.0;\n\n\t\t\tvec2 noise = random(uv, iteration * bounces + bounce);\n\n\t\t\tfloat scatter = -log(noise.y) * current.scatter;\t\t\t\n\n\t\t\tfor (int step = 1; step <= steps; step++) {\n\t\t\t\tclosest = calculateClosest(position);\n\n\t\t\t\tif (closest.distance < epsilon)\n\t\t\t\t\tbreak;\n\n\t\t\t\tdistance = distance + closest.distance * 0.6000000000;\n\t\t\t\tposition = from + direction * distance;\n\n\t\t\t\tif (scatter > 0.0 && distance >= scatter)\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (closest.object == 0) {\n\t\t\t\ttotal += air.color * luminance;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (scatter > 0.0 && distance >= scatter) {\n\t\t\t\tfrom = position - (distance - scatter) * direction;\n\t\t\t\tdirection = sampleSphere(noise);\n\t\t\t\ttotal += luminance * current.emissivity;\n\t\t\t\tluminance *= current.color;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tvec3 normal = calculateNormal(closest.object, position);\n\n\t\t\tMaterial material = calculateMaterial(closest.object, position, normal, direction);\n\n\t\t\ttotal += luminance * material.emissivity;\n\n\t\t\tif (material.color == vec3(0))\n\t\t\t\tbreak;\n\n\t\t\tbool backface = dot(direction, normal) > 0.0; \n\t\t\tif (backface)\n\t\t\t\tnormal = -normal; \n\n\t\t\tnormal = calculateSample(normal, material.smoothness, noise);\n\t\t\t\n\t\t\tif (noise.y < material.transmittance) {\n\t\t\t\tfloat eta;\n\t\t\t\tif (!backface)\n\t\t\t\t\teta = current.refraction / material.refraction;\n\t\t\t\telse\n\t\t\t\t\teta = material.refraction / air.refraction;\n\t\t\t\n\t\t\t\tvec3 refracted = refract(direction, normal, eta);\n\t\t\t\tif (refracted != vec3(0)) {\n\t\t\t\t\tfrom = position - 5.0 * epsilon * normal;\n\t\t\t\t\tdirection = refracted;\n\t\t\t\t\tif (!backface)\n\t\t\t\t\t\tcurrent = material;\n\t\t\t\t\telse\n\t\t\t\t\t\tcurrent = air;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tluminance *= material.color;\t\t\t\t\n\t\t\tfrom = position + 5.0 * epsilon * normal;\n\t\t\tdirection = reflect(direction, normal);\n\t\t}\n\t}\n\n\tvec4 original = texture(iChannel0, uv * 0.5 + 0.5);\n\t\n\tif (iMouse.z > 0.0) \n\t\toriginal *= 0.5;\n\n\tfragColor = original + vec4(total, iterations);\n\n}\n\t\nfloat distance39(vec3 p) {\n\t\n\tvec3 a2b5d5 = vec3(p);\n\tvec3 adc6917aa = vec3(1000.000000, 1000.000000, 1000.000000);\n\tvec3 a80eeb466 = vec3(a2b5d5 / adc6917aa.x);\n\tvec3 a5c46c881 = vec3(length(a80eeb466) - 0.5);\n\tvec3 ac8ff6191 = vec3(a5c46c881 * adc6917aa.x);\n\treturn ac8ff6191.x;\n}\n\nMaterial material39(vec3 p, vec3 n, vec3 d) {\n\tMaterial m;\n\t\n\tvec3 a76dddf8b = vec3(0.000000000, 0.000000000, 0.000000000);\n\tvec3 a4ec342ea = vec3(1.000000000, 1.000000000, 1.000000000);\n\tvec3 a5933fbbe = vec3(0.5000000000, 0.5000000000, 0.5000000000);\n\tvec3 ab4af433a = vec3(0.1000000000, 0.1000000000, 0.1000000000);\n\tvec3 a7ca6c16b = vec3(1.000000000, 1.000000000, 0.000000000);\n\tvec3 ae2ba2b87 = vec3(a5933fbbe / ab4af433a.x * pow(dot(normalize(p), normalize(a7ca6c16b)) * 0.5 + 0.5, 1.0 / ab4af433a.x - 1.0) + a4ec342ea);\n\tm.transmittance = a76dddf8b.x;\n\tm.smoothness = a76dddf8b.x;\n\tm.refraction = a4ec342ea.x;\n\tm.scatter = a76dddf8b.x;\n\tm.color = a76dddf8b;\n\tm.emissivity = ae2ba2b87;\n\treturn m;\n}\n\nvec3 normal39(vec3 p) {\n\treturn normalize(vec3(\n\t\tdistance39(p + vec3(epsilon, 0, 0)) -\n\t\tdistance39(p - vec3(epsilon, 0, 0)),\n\t\tdistance39(p + vec3(0, epsilon, 0)) -\n\t\tdistance39(p - vec3(0, epsilon, 0)),\n\t\tdistance39(p + vec3(0, 0, epsilon)) -\n\t\tdistance39(p - vec3(0, 0, epsilon))));\n}\n\t\nfloat distance40(vec3 p) {\n\t\n\tvec3 a2b5d5 = vec3(p);\n\tvec3 a48aa8baa = vec3(0.000000000, 1.000000000, 0.000000000);\n\tvec3 a7d19a5f8 = vec3(0.3000000000, 0.3000000000, 0.3000000000);\n\tvec3 ab4bf0638 = vec3(dot(a2b5d5, a48aa8baa) + a7d19a5f8.x);\n\treturn ab4bf0638.x;\n}\n\nMaterial material40(vec3 p, vec3 n, vec3 d) {\n\tMaterial m;\n\t\n\tvec3 a76dddf8b = vec3(0.000000000, 0.000000000, 0.000000000);\n\tvec3 a4ec342ea = vec3(1.000000000, 1.000000000, 1.000000000);\n\tvec3 a5933fbbe = vec3(0.5000000000, 0.5000000000, 0.5000000000);\n\tm.transmittance = a76dddf8b.x;\n\tm.smoothness = a76dddf8b.x;\n\tm.refraction = a4ec342ea.x;\n\tm.scatter = a76dddf8b.x;\n\tm.color = a5933fbbe;\n\tm.emissivity = a76dddf8b;\n\treturn m;\n}\n\nvec3 normal40(vec3 p) {\n\treturn normalize(vec3(\n\t\tdistance40(p + vec3(epsilon, 0, 0)) -\n\t\tdistance40(p - vec3(epsilon, 0, 0)),\n\t\tdistance40(p + vec3(0, epsilon, 0)) -\n\t\tdistance40(p - vec3(0, epsilon, 0)),\n\t\tdistance40(p + vec3(0, 0, epsilon)) -\n\t\tdistance40(p - vec3(0, 0, epsilon))));\n}\n\t\nfloat distance41(vec3 p) {\n\t\n\tvec3 a88055f1e = vec3(-0.7853981634, -0.7853981634, -0.7853981634);\n\tvec3 a2a5d931e = vec3(cos(a88055f1e.x), sin(a88055f1e.x), 0);\n\tvec3 a2b5d5 = vec3(p);\n\tvec3 a11639d88 = vec3(1.300000000, 0.000000000, 1.000000000);\n\tvec3 a75c71f62 = vec3(mod(a2b5d5 - a11639d88 * 0.5, a11639d88) - a11639d88 * 0.5);\n\tvec3 a91cf23fd = vec3(mat3(a2a5d931e.x, a2a5d931e.y, 0, -a2a5d931e.y, a2a5d931e.x, 0, 0, 0, 1) * a75c71f62);\n\tvec3 a9a07f38a = vec3(0.000000000, 0.000000000, 1.000000000);\n\tvec3 a19097f7f = vec3(a91cf23fd - 2.0 * min(0.0, dot(a91cf23fd, a9a07f38a)) * a9a07f38a);\n\tvec3 a26bc8509 = vec3(0.2300000000, -0.3400000000, 0.01800000000);\n\tvec3 abad592e8 = vec3(a19097f7f - a26bc8509);\n\tvec3 a9077946e = vec3(0.03710000000, 0.03710000000, 0.03710000000);\n\tvec3 adfb0712f = vec3(abad592e8 / a9077946e.x);\n\tvec3 ae9058e9d = vec3(length(adfb0712f) - 0.5);\n\tvec3 ad6f425f7 = vec3(ae9058e9d * a9077946e.x);\n\tvec3 a91613aed = vec3(0.2200000000, -0.3400000000, 0.04800000000);\n\tvec3 a2d3bbd95 = vec3(a19097f7f - a91613aed);\n\tvec3 a4b8ee42e = vec3(0.03530000000, 0.03530000000, 0.03530000000);\n\tvec3 a43e4917c = vec3(a2d3bbd95 / a4b8ee42e.x);\n\tvec3 a329dad95 = vec3(length(a43e4917c) - 0.5);\n\tvec3 acc6e74e1 = vec3(a329dad95 * a4b8ee42e.x);\n\tvec3 aa9c0c5b0 = vec3(min(ad6f425f7, acc6e74e1));\n\tvec3 a1fc00289 = vec3(0.2000000000, -0.3450000000, 0.07800000000);\n\tvec3 a17e7daae = vec3(a19097f7f - a1fc00289);\n\tvec3 a1f175e44 = vec3(a17e7daae / a4b8ee42e.x);\n\tvec3 a845b9b3e = vec3(length(a1f175e44) - 0.5);\n\tvec3 aa1d4f482 = vec3(a845b9b3e * a4b8ee42e.x);\n\tvec3 a61841515 = vec3(min(aa9c0c5b0, aa1d4f482));\n\tvec3 a9ba898c7 = vec3(0.1700000000, -0.3500000000, 0.09800000000);\n\tvec3 a8725667e = vec3(a19097f7f - a9ba898c7);\n\tvec3 ac16f184b = vec3(a8725667e / a4b8ee42e.x);\n\tvec3 a8eca6542 = vec3(length(ac16f184b) - 0.5);\n\tvec3 ac5ab8f8e = vec3(a8eca6542 * a4b8ee42e.x);\n\tvec3 a1cc444df = vec3(min(a61841515, ac5ab8f8e));\n\tvec3 aab51f955 = vec3(0.1400000000, -0.3500000000, 0.1100000000);\n\tvec3 a5121fd11 = vec3(a19097f7f - aab51f955);\n\tvec3 a84a7d334 = vec3(a5121fd11 / a4b8ee42e.x);\n\tvec3 a6e71bc75 = vec3(length(a84a7d334) - 0.5);\n\tvec3 aed389562 = vec3(a6e71bc75 * a4b8ee42e.x);\n\tvec3 abe3aa7 = vec3(min(a1cc444df, aed389562));\n\tvec3 a30688db0 = vec3(0.1100000000, -0.3500000000, 0.1100000000);\n\tvec3 aa650974a = vec3(a19097f7f - a30688db0);\n\tvec3 a7849a718 = vec3(aa650974a / a4b8ee42e.x);\n\tvec3 a15c2b3a2 = vec3(length(a7849a718) - 0.5);\n\tvec3 a370938c3 = vec3(a15c2b3a2 * a4b8ee42e.x);\n\tvec3 a1bdf00f7 = vec3(min(abe3aa7, a370938c3));\n\tvec3 af655e808 = vec3(0.08000000000, -0.3500000000, 0.1100000000);\n\tvec3 a5a2ccdec = vec3(a19097f7f - af655e808);\n\tvec3 a18295455 = vec3(a5a2ccdec / a4b8ee42e.x);\n\tvec3 ad09f27c = vec3(length(a18295455) - 0.5);\n\tvec3 a4058a379 = vec3(ad09f27c * a4b8ee42e.x);\n\tvec3 a705de2f7 = vec3(min(a1bdf00f7, a4058a379));\n\tvec3 ac6bc88e0 = vec3(0.2600000000, -0.2900000000, 0.01800000000);\n\tvec3 aa1c478a8 = vec3(a19097f7f - ac6bc88e0);\n\tvec3 a37d331ba = vec3(aa1c478a8 / a9077946e.x);\n\tvec3 a3ced702d = vec3(length(a37d331ba) - 0.5);\n\tvec3 a5004464e = vec3(a3ced702d * a9077946e.x);\n\tvec3 a82a60e46 = vec3(0.2500000000, -0.2880000000, 0.05000000000);\n\tvec3 a71c79503 = vec3(a19097f7f - a82a60e46);\n\tvec3 af48521ad = vec3(0.03500000000, 0.03500000000, 0.03500000000);\n\tvec3 a2505cdd8 = vec3(a71c79503 / af48521ad.x);\n\tvec3 a2e95f726 = vec3(length(a2505cdd8) - 0.5);\n\tvec3 a35da93ce = vec3(a2e95f726 * af48521ad.x);\n\tvec3 a5e9988bf = vec3(min(a5004464e, a35da93ce));\n\tvec3 a2b473a1 = vec3(0.2350000000, -0.2900000000, 0.08000000000);\n\tvec3 a6ccc1b79 = vec3(a19097f7f - a2b473a1);\n\tvec3 a84aff40d = vec3(a6ccc1b79 / af48521ad.x);\n\tvec3 a33ef4bb2 = vec3(length(a84aff40d) - 0.5);\n\tvec3 a83b2e565 = vec3(a33ef4bb2 * af48521ad.x);\n\tvec3 a1f95817e = vec3(min(a5e9988bf, a83b2e565));\n\tvec3 a1b073fbe = vec3(0.2150000000, -0.2850000000, 0.1000000000);\n\tvec3 a2977a02f = vec3(a19097f7f - a1b073fbe);\n\tvec3 a3fdfbfab = vec3(a2977a02f / af48521ad.x);\n\tvec3 a8c57982f = vec3(length(a3fdfbfab) - 0.5);\n\tvec3 a694e716c = vec3(a8c57982f * af48521ad.x);\n\tvec3 a3b58ebef = vec3(min(a1f95817e, a694e716c));\n\tvec3 ad5ab4ae7 = vec3(0.1600000000, -0.3500000000, 0.000000000);\n\tvec3 ae9d389fc = vec3(a19097f7f - ad5ab4ae7);\n\tvec3 a7fd47fb = vec3(0.2310000000, 0.2310000000, 0.2310000000);\n\tvec3 a2c095061 = vec3(ae9d389fc / a7fd47fb.x);\n\tvec3 a45404105 = vec3(length(a2c095061) - 0.5);\n\tvec3 a4c50ddee = vec3(a45404105 * a7fd47fb.x);\n\tvec3 af027de3b = vec3(max(a3b58ebef, -a4c50ddee));\n\tvec3 ab6acc450 = vec3(0.1800000000, -0.2800000000, 0.1150000000);\n\tvec3 abcbaf18d = vec3(a19097f7f - ab6acc450);\n\tvec3 aac2c39ac = vec3(abcbaf18d / af48521ad.x);\n\tvec3 adda09424 = vec3(length(aac2c39ac) - 0.5);\n\tvec3 ad22de1fa = vec3(adda09424 * af48521ad.x);\n\tvec3 a2f9a072 = vec3(min(af027de3b, ad22de1fa));\n\tvec3 a17c69ddc = vec3(0.1400000000, -0.2800000000, 0.1150000000);\n\tvec3 a940d0040 = vec3(a19097f7f - a17c69ddc);\n\tvec3 a98b214d = vec3(0.04200000000, 0.04200000000, 0.04200000000);\n\tvec3 aafe54a71 = vec3(a940d0040 / a98b214d.x);\n\tvec3 af7756db = vec3(length(aafe54a71) - 0.5);\n\tvec3 a4600428a = vec3(af7756db * a98b214d.x);\n\tvec3 a245e7486 = vec3(min(a2f9a072, a4600428a));\n\tvec3 a282db7b9 = vec3(0.1100000000, -0.2800000000, 0.1150000000);\n\tvec3 a61c6513b = vec3(a19097f7f - a282db7b9);\n\tvec3 a8ac243ab = vec3(a61c6513b / a98b214d.x);\n\tvec3 af57255f3 = vec3(length(a8ac243ab) - 0.5);\n\tvec3 a147fceaa = vec3(af57255f3 * a98b214d.x);\n\tvec3 a5720b = vec3(min(a245e7486, a147fceaa));\n\tvec3 a4b12c081 = vec3(0.08000000000, -0.2800000000, 0.1150000000);\n\tvec3 a858aaaa6 = vec3(a19097f7f - a4b12c081);\n\tvec3 a94068a8f = vec3(a858aaaa6 / a98b214d.x);\n\tvec3 a9660f893 = vec3(length(a94068a8f) - 0.5);\n\tvec3 ac1b28bf4 = vec3(a9660f893 * a98b214d.x);\n\tvec3 a19331d2a = vec3(min(a5720b, ac1b28bf4));\n\tvec3 ad27b0aab = vec3(0.1900000000, -0.4400000000, 0.05000000000);\n\tvec3 ad5ebe6b8 = vec3(a19097f7f - ad27b0aab);\n\tvec3 a1c41e07a = vec3(ad5ebe6b8 / af48521ad.x);\n\tvec3 ae0fbdf0b = vec3(length(a1c41e07a) - 0.5);\n\tvec3 a90b8edc1 = vec3(ae0fbdf0b * af48521ad.x);\n\tvec3 aafcd73a9 = vec3(0.04 - 0.03 * cos(a19097f7f.y * 20.2), -0.23, 0.27 + sin(a19097f7f.y) * 0.27);\n\tvec3 ab8e1b975 = vec3(a19097f7f - aafcd73a9);\n\tvec3 ad3df2d1 = vec3(0.06000000000, 0.2400000000, 0.02800000000);\n\tvec3 a23aabddd = vec3(abs(ab8e1b975) - ad3df2d1 * 0.5);\n\tvec3 ae87c19a6 = vec3(max(min(a23aabddd.x, min(a23aabddd.y, a23aabddd.z)), 0.0) + length(max(a23aabddd, 0.0)));\n\tvec3 a6903cbf2 = vec3(0.000000000, -0.4000000000, 0.000000000);\n\tvec3 a383b6290 = vec3(a19097f7f - a6903cbf2);\n\tvec3 affa71378 = vec3(0.2450000000, 0.2450000000, 0.2450000000);\n\tvec3 a2aa27090 = vec3(a383b6290 / affa71378.x);\n\tvec3 aa5a77b11 = vec3(length(a2aa27090) - 0.5);\n\tvec3 a7a6658b5 = vec3(aa5a77b11 * affa71378.x);\n\tvec3 a96a0ffc0 = vec3(a7a6658b5 * -1.0);\n\tvec3 a1c40e110 = vec3(0.1000000000, -0.03400000000, 0.000000000);\n\tvec3 aea6d7d4a = vec3(a19097f7f - a1c40e110);\n\tvec3 a7c9a2b5f = vec3(0.7210000000, 0.7210000000, 0.7210000000);\n\tvec3 a9a0056a3 = vec3(aea6d7d4a / a7c9a2b5f.x);\n\tvec3 a3088c6f6 = vec3(length(a9a0056a3) - 0.5);\n\tvec3 a4eb033b0 = vec3(a3088c6f6 * a7c9a2b5f.x);\n\tvec3 ad3f063dd = vec3(a4eb033b0 * -1.0);\n\tvec3 ab8d5cd46 = vec3(0.1000000000, -0.3200000000, 0.000000000);\n\tvec3 aa3657ec7 = vec3(a19097f7f - ab8d5cd46);\n\tvec3 af140a3f5 = vec3(0.2590000000, 0.2590000000, 0.2590000000);\n\tvec3 a4b2621d9 = vec3(aa3657ec7 / af140a3f5.x);\n\tvec3 aa06b3173 = vec3(length(a4b2621d9) - 0.5);\n\tvec3 afc46c148 = vec3(aa06b3173 * af140a3f5.x);\n\tvec3 aa6fa3e15 = vec3(afc46c148 * -1.0);\n\tvec3 a952b85d9 = vec3(0.3010000000, 0.3010000000, 0.3010000000);\n\tvec3 a165afb87 = vec3(aa3657ec7 / a952b85d9.x);\n\tvec3 a23cb5d67 = vec3(length(a165afb87) - 0.5);\n\tvec3 a62240465 = vec3(a23cb5d67 * a952b85d9.x);\n\tvec3 a81b5bf89 = vec3(0.02000000000, 0.02000000000, 0.02000000000);\n\tvec3 a5055ca6f = vec3(clamp(0.5 - 0.5 * (aa6fa3e15 - a62240465) / a81b5bf89, 0.0, 1.0));\n\tvec3 ac5dcc71b = vec3(mix(aa6fa3e15, a62240465, a5055ca6f) + a81b5bf89 * a5055ca6f * (1.0 - a5055ca6f));\n\tvec3 a153da4ba = vec3(clamp(0.5 - 0.5 * (ad3f063dd - ac5dcc71b) / a81b5bf89, 0.0, 1.0));\n\tvec3 a1b0a6a1c = vec3(mix(ad3f063dd, ac5dcc71b, a153da4ba) + a81b5bf89 * a153da4ba * (1.0 - a153da4ba));\n\tvec3 adc489ae2 = vec3(clamp(0.5 - 0.5 * (a96a0ffc0 - a1b0a6a1c) / a81b5bf89, 0.0, 1.0));\n\tvec3 a3b893305 = vec3(mix(a96a0ffc0, a1b0a6a1c, adc489ae2) + a81b5bf89 * adc489ae2 * (1.0 - adc489ae2));\n\tvec3 ac97a8ff9 = vec3(0.1300000000, 0.1300000000, 0.1300000000);\n\tvec3 a60ec339b = vec3(clamp(0.5 + 0.5 * (ae87c19a6 - a3b893305) / ac97a8ff9, 0.0, 1.0));\n\tvec3 ac5d460e3 = vec3(mix(ae87c19a6, a3b893305, a60ec339b) - ac97a8ff9 * a60ec339b * (1.0 - a60ec339b));\n\tvec3 aa05e208e = vec3(0.000000000, 0.1530000000, 0.2000000000);\n\tvec3 a80045377 = vec3(a19097f7f - aa05e208e);\n\tvec3 a9a4db2d2 = vec3(0.5950000000, 0.5950000000, 0.5950000000);\n\tvec3 a32394d38 = vec3(a80045377 / a9a4db2d2.x);\n\tvec3 a2a75634f = vec3(length(a32394d38) - 0.5);\n\tvec3 a224cc951 = vec3(a2a75634f * a9a4db2d2.x);\n\tvec3 afe18e60e = vec3(max(ac5d460e3, -a224cc951));\n\tvec3 a330aea83 = vec3(0.08000000000, 0.08000000000, 0.08000000000);\n\tvec3 aada6e807 = vec3(clamp(0.5 + 0.5 * (a90b8edc1 - afe18e60e) / a330aea83, 0.0, 1.0));\n\tvec3 a20a1a2cc = vec3(mix(a90b8edc1, afe18e60e, aada6e807) - a330aea83 * aada6e807 * (1.0 - aada6e807));\n\tvec3 a203c6cc6 = vec3(0.1300000000, -0.5430000000, 0.000000000);\n\tvec3 acbaebe3b = vec3(a19097f7f - a203c6cc6);\n\tvec3 af82cb5e = vec3(0.6300000000, 0.6300000000, 0.6300000000);\n\tvec3 a59d22472 = vec3(acbaebe3b / af82cb5e.x);\n\tvec3 a1940bc6 = vec3(length(a59d22472) - 0.5);\n\tvec3 ac6fccd9f = vec3(a1940bc6 * af82cb5e.x);\n\tvec3 a881670a4 = vec3(ac6fccd9f * -1.0);\n\tvec3 aa5c06028 = vec3(-0.2000000000, -0.1000000000, 0.000000000);\n\tvec3 aecff8a62 = vec3(a19097f7f - aa5c06028);\n\tvec3 ab7204b3a = vec3(aecff8a62 / af82cb5e.x);\n\tvec3 a7b4f87ec = vec3(length(ab7204b3a) - 0.5);\n\tvec3 ab04406ca = vec3(a7b4f87ec * af82cb5e.x);\n\tvec3 afd4640fa = vec3(ab04406ca * -1.0);\n\tvec3 a2265cf23 = vec3(0.1250000000, -0.3000000000, 0.000000000);\n\tvec3 a452e854e = vec3(a19097f7f - a2265cf23);\n\tvec3 a1f1149d1 = vec3(0.2800000000, 0.2800000000, 0.2800000000);\n\tvec3 ac3072dd9 = vec3(a452e854e / a1f1149d1.x);\n\tvec3 a22a1f243 = vec3(length(ac3072dd9) - 0.5);\n\tvec3 afa60c5f5 = vec3(a22a1f243 * a1f1149d1.x);\n\tvec3 a8046ec28 = vec3(afa60c5f5 * -1.0);\n\tvec3 a211b6200 = vec3(0.1300000000, -0.2600000000, 0.000000000);\n\tvec3 af265c71d = vec3(a19097f7f - a211b6200);\n\tvec3 ae1a4ba1c = vec3(0.3150000000, 0.3150000000, 0.3150000000);\n\tvec3 abe4ee87a = vec3(af265c71d / ae1a4ba1c.x);\n\tvec3 a637af002 = vec3(length(abe4ee87a) - 0.5);\n\tvec3 a7ed8790e = vec3(a637af002 * ae1a4ba1c.x);\n\tvec3 ab9bcc4a = vec3(0.01000000000, 0.01000000000, 0.01000000000);\n\tvec3 a3e8f916c = vec3(clamp(0.5 - 0.5 * (a8046ec28 - a7ed8790e) / ab9bcc4a, 0.0, 1.0));\n\tvec3 a2c22b77a = vec3(mix(a8046ec28, a7ed8790e, a3e8f916c) + ab9bcc4a * a3e8f916c * (1.0 - a3e8f916c));\n\tvec3 af8102f48 = vec3(0.03000000000, 0.03000000000, 0.03000000000);\n\tvec3 aeb873145 = vec3(clamp(0.5 - 0.5 * (afd4640fa - a2c22b77a) / af8102f48, 0.0, 1.0));\n\tvec3 aa29861ed = vec3(mix(afd4640fa, a2c22b77a, aeb873145) + af8102f48 * aeb873145 * (1.0 - aeb873145));\n\tvec3 acc3061b5 = vec3(clamp(0.5 - 0.5 * (a881670a4 - aa29861ed) / af8102f48, 0.0, 1.0));\n\tvec3 adcec4ac5 = vec3(mix(a881670a4, aa29861ed, acc3061b5) + af8102f48 * acc3061b5 * (1.0 - acc3061b5));\n\tvec3 a5db1ec89 = vec3(0.000000000, 0.02000000000, 0.000000000);\n\tvec3 a9f1a16ec = vec3(a19097f7f - a5db1ec89);\n\tvec3 a6abac10b = vec3(0.315 * cos(cos(a9f1a16ec.y * 11.0 + 0.22) * a9f1a16ec.z * 2.3));\n\tvec3 aad2719cf = vec3(length(a9f1a16ec) - a6abac10b);\n\tvec3 a6282fbfe = vec3(max(adcec4ac5, -aad2719cf));\n\tvec3 aea10ac61 = vec3(-0.1500000000, -0.9700000000, 0.000000000);\n\tvec3 a11f9a749 = vec3(a19097f7f - aea10ac61);\n\tvec3 af1ac2f08 = vec3(1.750000000, 1.750000000, 1.750000000);\n\tvec3 ad55d3ff1 = vec3(a11f9a749 / af1ac2f08.x);\n\tvec3 a273f6ebd = vec3(length(ad55d3ff1) - 0.5);\n\tvec3 a53f75cd5 = vec3(a273f6ebd * af1ac2f08.x);\n\tvec3 a3d1ba95c = vec3(a53f75cd5 * -1.0);\n\tvec3 aa1cb8557 = vec3(0.2280000000, -0.09000000000, 0.000000000);\n\tvec3 ab57bc9d7 = vec3(a19097f7f - aa1cb8557);\n\tvec3 a3c8d55a7 = vec3(0.11 * cos(sin(ab57bc9d7.y * 18.0 - 1.62) * ab57bc9d7.z * 29.0));\n\tvec3 afcd0a364 = vec3(length(ab57bc9d7) - a3c8d55a7);\n\tvec3 a8954ea4d = vec3(afcd0a364 * -1.0);\n\tvec3 ad88ad78e = vec3(0.000000000, 0.05000000000, 0.000000000);\n\tvec3 afb242362 = vec3(a19097f7f - ad88ad78e);\n\tvec3 a5e2bb448 = vec3(0.32 * cos(cos(afb242362.y * 11.0 + 0.5) * afb242362.z * 2.3));\n\tvec3 aa54c1ba8 = vec3(length(afb242362) - a5e2bb448);\n\tvec3 a4e077685 = vec3(aa54c1ba8 * -1.0);\n\tvec3 ae23a81a6 = vec3(0.3200000000, -0.04000000000, 0.1400000000);\n\tvec3 ab437d512 = vec3(a19097f7f - ae23a81a6);\n\tvec3 a61e055b = vec3(0.123 * cos(ab437d512.y * 10.0 - 0.4));\n\tvec3 a86b49125 = vec3(length(ab437d512) - a61e055b);\n\tvec3 a3872c79b = vec3(a86b49125 * -1.0);\n\tvec3 aadf23353 = vec3(0.2200000000, -0.05000000000, 0.000000000);\n\tvec3 a4861021e = vec3(a19097f7f - aadf23353);\n\tvec3 a8cbb5126 = vec3(0.123 * cos(sin(a4861021e.y * 22.0 - 1.1) * a4861021e.z * 24.0));\n\tvec3 a366eda93 = vec3(length(a4861021e) - a8cbb5126);\n\tvec3 ac74dd490 = vec3(clamp(0.5 - 0.5 * (a3872c79b - a366eda93) / a81b5bf89, 0.0, 1.0));\n\tvec3 a8f4bdbae = vec3(mix(a3872c79b, a366eda93, ac74dd490) + a81b5bf89 * ac74dd490 * (1.0 - ac74dd490));\n\tvec3 a6e20cd98 = vec3(clamp(0.5 - 0.5 * (a4e077685 - a8f4bdbae) / a81b5bf89, 0.0, 1.0));\n\tvec3 ac4fd354c = vec3(mix(a4e077685, a8f4bdbae, a6e20cd98) + a81b5bf89 * a6e20cd98 * (1.0 - a6e20cd98));\n\tvec3 a48bfac2a = vec3(0.098 * cos(ab437d512.y * 10.0 - 0.04));\n\tvec3 af3ad8bcc = vec3(length(ab437d512) - a48bfac2a);\n\tvec3 ae6a7c486 = vec3(af3ad8bcc * -1.0);\n\tvec3 a7a2b9b1d = vec3(0.000000000, 0.2400000000, 0.000000000);\n\tvec3 a4947ed01 = vec3(a19097f7f - a7a2b9b1d);\n\tvec3 a763f085e = vec3(0.5110000000, 0.5110000000, 0.5110000000);\n\tvec3 ad0fe43de = vec3(a4947ed01 / a763f085e.x);\n\tvec3 ad5c9ed4e = vec3(length(ad0fe43de) - 0.5);\n\tvec3 acaad5b2e = vec3(ad5c9ed4e * a763f085e.x);\n\tvec3 ae7d41161 = vec3(-0.1000000000, 0.2400000000, 0.000000000);\n\tvec3 afcf183ec = vec3(a19097f7f - ae7d41161);\n\tvec3 a5fb1590f = vec3(afcf183ec / a763f085e.x);\n\tvec3 a541a66e5 = vec3(length(a5fb1590f) - 0.5);\n\tvec3 a3bb6c7d4 = vec3(a541a66e5 * a763f085e.x);\n\tvec3 a8b7c8b6b = vec3(0.1000000000, 0.2300000000, 0.000000000);\n\tvec3 a7ae7a709 = vec3(a19097f7f - a8b7c8b6b);\n\tvec3 a4a9580cb = vec3(a7ae7a709 / a763f085e.x);\n\tvec3 af0bccaf = vec3(length(a4a9580cb) - 0.5);\n\tvec3 a86216886 = vec3(af0bccaf * a763f085e.x);\n\tvec3 a5f2ed50b = vec3(0.315 * cos(cos(afb242362.y * 11.0 + 0.55) * afb242362.z * 2.3));\n\tvec3 af701b635 = vec3(length(afb242362) - a5f2ed50b);\n\tvec3 ab3c29121 = vec3(clamp(0.5 + 0.5 * (a86216886 - af701b635) / a81b5bf89, 0.0, 1.0));\n\tvec3 af7b80f89 = vec3(mix(a86216886, af701b635, ab3c29121) - a81b5bf89 * ab3c29121 * (1.0 - ab3c29121));\n\tvec3 af7b30ed3 = vec3(clamp(0.5 + 0.5 * (a3bb6c7d4 - af7b80f89) / a81b5bf89, 0.0, 1.0));\n\tvec3 a22b50df2 = vec3(mix(a3bb6c7d4, af7b80f89, af7b30ed3) - a81b5bf89 * af7b30ed3 * (1.0 - af7b30ed3));\n\tvec3 a6bd2a67e = vec3(clamp(0.5 + 0.5 * (acaad5b2e - a22b50df2) / a81b5bf89, 0.0, 1.0));\n\tvec3 ab162961a = vec3(mix(acaad5b2e, a22b50df2, a6bd2a67e) - a81b5bf89 * a6bd2a67e * (1.0 - a6bd2a67e));\n\tvec3 a21eca1c4 = vec3(ab162961a * -1.0);\n\tvec3 a83f18bbe = vec3(0.2100000000, -0.1300000000, 0.1800000000);\n\tvec3 ac59098e8 = vec3(a19097f7f - a83f18bbe);\n\tvec3 a66688f6b = vec3(0.07700000000, 0.07700000000, 0.07700000000);\n\tvec3 ab5a9255b = vec3(ac59098e8 / a66688f6b.x);\n\tvec3 a8b99a3c0 = vec3(length(ab5a9255b) - 0.5);\n\tvec3 a8797d66 = vec3(a8b99a3c0 * a66688f6b.x);\n\tvec3 a560ec541 = vec3(0.1500000000, -0.01000000000, 0.3100000000);\n\tvec3 ae6b959ec = vec3(a19097f7f - a560ec541);\n\tvec3 ad26f27d7 = vec3(0.098 * cos(ae6b959ec.x * 0.59 + 0.089));\n\tvec3 a2d6dc087 = vec3(length(ae6b959ec) - ad26f27d7);\n\tvec3 aec70b674 = vec3(a2d6dc087 * -1.0);\n\tvec3 aac05a94b = vec3(0.2400000000, 0.07000000000, 0.1000000000);\n\tvec3 af8cb3560 = vec3(a19097f7f - aac05a94b);\n\tvec3 a459aad08 = vec3(0.126 * cos(af8cb3560.y * 7.0 + 0.49));\n\tvec3 a4e98d95e = vec3(length(af8cb3560) - a459aad08);\n\tvec3 afa51f7fd = vec3(0.5740000000, 0.5740000000, 0.5740000000);\n\tvec3 a4cdcc9d3 = vec3(afcf183ec / afa51f7fd.x);\n\tvec3 ae35876e2 = vec3(length(a4cdcc9d3) - 0.5);\n\tvec3 aaff55a4 = vec3(ae35876e2 * afa51f7fd.x);\n\tvec3 aa8cc017 = vec3(a7ae7a709 / afa51f7fd.x);\n\tvec3 a13da1e70 = vec3(length(aa8cc017) - 0.5);\n\tvec3 acc4b579d = vec3(a13da1e70 * afa51f7fd.x);\n\tvec3 acc706f4f = vec3(0.333 * cos(cos(afb242362.y * 11.0 + 0.55) * afb242362.z * 2.3));\n\tvec3 a5f633c17 = vec3(length(afb242362) - acc706f4f);\n\tvec3 aa9655a42 = vec3(0.09000000000, 0.09000000000, 0.09000000000);\n\tvec3 a248fd355 = vec3(clamp(0.5 + 0.5 * (acc4b579d - a5f633c17) / aa9655a42, 0.0, 1.0));\n\tvec3 a88a9e9d9 = vec3(mix(acc4b579d, a5f633c17, a248fd355) - aa9655a42 * a248fd355 * (1.0 - a248fd355));\n\tvec3 aeaafe6b1 = vec3(clamp(0.5 + 0.5 * (aaff55a4 - a88a9e9d9) / aa9655a42, 0.0, 1.0));\n\tvec3 a9af18691 = vec3(mix(aaff55a4, a88a9e9d9, aeaafe6b1) - aa9655a42 * aeaafe6b1 * (1.0 - aeaafe6b1));\n\tvec3 ac2d189da = vec3(clamp(0.5 + 0.5 * (a4e98d95e - a9af18691) / a81b5bf89, 0.0, 1.0));\n\tvec3 acfaf659 = vec3(mix(a4e98d95e, a9af18691, ac2d189da) - a81b5bf89 * ac2d189da * (1.0 - ac2d189da));\n\tvec3 ae8fe38e6 = vec3(clamp(0.5 - 0.5 * (aec70b674 - acfaf659) / a81b5bf89, 0.0, 1.0));\n\tvec3 ab29aaae3 = vec3(mix(aec70b674, acfaf659, ae8fe38e6) + a81b5bf89 * ae8fe38e6 * (1.0 - ae8fe38e6));\n\tvec3 ac65c958f = vec3(0.04000000000, 0.04000000000, 0.04000000000);\n\tvec3 a2c638aff = vec3(clamp(0.5 + 0.5 * (a8797d66 - ab29aaae3) / ac65c958f, 0.0, 1.0));\n\tvec3 af9af4391 = vec3(mix(a8797d66, ab29aaae3, a2c638aff) - ac65c958f * a2c638aff * (1.0 - a2c638aff));\n\tvec3 a5af3833d = vec3(clamp(0.5 - 0.5 * (a21eca1c4 - af9af4391) / a81b5bf89, 0.0, 1.0));\n\tvec3 a72f91ee3 = vec3(mix(a21eca1c4, af9af4391, a5af3833d) + a81b5bf89 * a5af3833d * (1.0 - a5af3833d));\n\tvec3 a77578bf0 = vec3(clamp(0.5 - 0.5 * (ae6a7c486 - a72f91ee3) / af8102f48, 0.0, 1.0));\n\tvec3 a41ea9fbd = vec3(mix(ae6a7c486, a72f91ee3, a77578bf0) + af8102f48 * a77578bf0 * (1.0 - a77578bf0));\n\tvec3 a810beaf = vec3(0.01500000000, 0.01500000000, 0.01500000000);\n\tvec3 ac09b4d90 = vec3(clamp(0.5 + 0.5 * (ac4fd354c - a41ea9fbd) / a810beaf, 0.0, 1.0));\n\tvec3 ad67d0182 = vec3(mix(ac4fd354c, a41ea9fbd, ac09b4d90) - a810beaf * ac09b4d90 * (1.0 - ac09b4d90));\n\tvec3 aed270dbe = vec3(0.005000000000, 0.005000000000, 0.005000000000);\n\tvec3 ab5b0589a = vec3(clamp(0.5 - 0.5 * (a8954ea4d - ad67d0182) / aed270dbe, 0.0, 1.0));\n\tvec3 a726b3f89 = vec3(mix(a8954ea4d, ad67d0182, ab5b0589a) + aed270dbe * ab5b0589a * (1.0 - ab5b0589a));\n\tvec3 a9e91fcd0 = vec3(clamp(0.5 - 0.5 * (a3d1ba95c - a726b3f89) / ab9bcc4a, 0.0, 1.0));\n\tvec3 a49e40896 = vec3(mix(a3d1ba95c, a726b3f89, a9e91fcd0) + ab9bcc4a * a9e91fcd0 * (1.0 - a9e91fcd0));\n\tvec3 a2f1ffa36 = vec3(clamp(0.5 + 0.5 * (a6282fbfe - a49e40896) / ac65c958f, 0.0, 1.0));\n\tvec3 ac8f22514 = vec3(mix(a6282fbfe, a49e40896, a2f1ffa36) - ac65c958f * a2f1ffa36 * (1.0 - a2f1ffa36));\n\tvec3 a4cd8c862 = vec3(clamp(0.5 + 0.5 * (a20a1a2cc - ac8f22514) / a81b5bf89, 0.0, 1.0));\n\tvec3 abff9e75 = vec3(mix(a20a1a2cc, ac8f22514, a4cd8c862) - a81b5bf89 * a4cd8c862 * (1.0 - a4cd8c862));\n\tvec3 a2b8a98a0 = vec3(clamp(0.5 + 0.5 * (a19331d2a - abff9e75) / af8102f48, 0.0, 1.0));\n\tvec3 a72f26dda = vec3(mix(a19331d2a, abff9e75, a2b8a98a0) - af8102f48 * a2b8a98a0 * (1.0 - a2b8a98a0));\n\tvec3 a9af7bec = vec3(0.02500000000, 0.02500000000, 0.02500000000);\n\tvec3 a7809eae = vec3(clamp(0.5 + 0.5 * (a705de2f7 - a72f26dda) / a9af7bec, 0.0, 1.0));\n\tvec3 a7693c2ea = vec3(mix(a705de2f7, a72f26dda, a7809eae) - a9af7bec * a7809eae * (1.0 - a7809eae));\n\treturn a7693c2ea.x;\n}\n\nMaterial material41(vec3 p, vec3 n, vec3 d) {\n\tMaterial m;\n\t\n\tvec3 a76dddf8b = vec3(0.000000000, 0.000000000, 0.000000000);\n\tvec3 ab3a8d97b = vec3(0.9900000000, 0.9900000000, 0.9900000000);\n\tvec3 a4ec342ea = vec3(1.000000000, 1.000000000, 1.000000000);\n\tvec3 ac9679ad1 = vec3(0.4000000000, 0.6000000000, 0.8000000000);\n\tm.transmittance = a76dddf8b.x;\n\tm.smoothness = ab3a8d97b.x;\n\tm.refraction = a4ec342ea.x;\n\tm.scatter = a76dddf8b.x;\n\tm.color = ac9679ad1;\n\tm.emissivity = a76dddf8b;\n\treturn m;\n}\n\nvec3 normal41(vec3 p) {\n\treturn normalize(vec3(\n\t\tdistance41(p + vec3(epsilon, 0, 0)) -\n\t\tdistance41(p - vec3(epsilon, 0, 0)),\n\t\tdistance41(p + vec3(0, epsilon, 0)) -\n\t\tdistance41(p - vec3(0, epsilon, 0)),\n\t\tdistance41(p + vec3(0, 0, epsilon)) -\n\t\tdistance41(p - vec3(0, 0, epsilon))));\n}\n\t\t\nClosest calculateClosest(vec3 position) {\n\tClosest closest;\n\tfloat distance;\n\n\tclosest.object = 0;\n\tclosest.distance = MAX_VALUE;\n\t\n\tdistance = abs(distance39(position));\n\tif (distance < closest.distance) {\n\t\tclosest.distance = distance;\n\t\tclosest.object = 39;\n\t}\n\t\n\tdistance = abs(distance40(position));\n\tif (distance < closest.distance) {\n\t\tclosest.distance = distance;\n\t\tclosest.object = 40;\n\t}\n\t\n\tdistance = abs(distance41(position));\n\tif (distance < closest.distance) {\n\t\tclosest.distance = distance;\n\t\tclosest.object = 41;\n\t}\n\t\n\treturn closest;\n}\n\nvec3 calculateNormal(int object, vec3 position) {\n\t\n\tif (object == 39)\n\t\treturn normal39(position);\n\t\n\tif (object == 40)\n\t\treturn normal40(position);\n\t\n\tif (object == 41)\n\t\treturn normal41(position);\n\t\n\treturn vec3(0, 0, 0);\n}\n\nMaterial calculateMaterial(int object, vec3 position, vec3 normal, vec3 direction) {\n\t\n\tif (object == 39)\n\t\treturn material39(position, normal, direction);\n\t\n\tif (object == 40)\n\t\treturn material40(position, normal, direction);\n\t\n\tif (object == 41)\n\t\treturn material41(position, normal, direction);\n\t\n\tMaterial material;\n\treturn material;\n}","name":"Buf A","description":"","type":"buffer"}]}