{"ver":"0.1","info":{"id":"flSBWD","date":"1652184290","viewed":246,"name":"Paper Clips","username":"sinvec","description":"A small pathtracer using two materials. Works pretty slowly.","likes":27,"published":1,"flags":32,"usePreview":0,"tags":["sdf","materials","pathtracing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, vec2 fragCoord) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    fragColor = vec4(texture(iChannel0, uv).rgb, 1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"mat2 rot(float a) {return mat2(cos(a), sin(a), -sin(a), cos(a));}\nfloat vma(vec3 v) {return max(v.x,max(v.y,v.z));}\n\nfloat sPaperClip(vec3 p) {\n    float d = 999.;\n    p.z -= 7.5;\n    d = length(vec2(length(p.xz) - 3.9, p.y)) - .5;\n    d = max(d, -vma(abs(p + vec3(0.,0.,4.4/2.)) - vec3(7.,1.,4.45/2.)));\n    p.xz += vec2(3.9,7.47);\n    d = min(d, max(length(p.xy) - .5, vma(abs(p) - vec3(.6,.6,7.5))));\n    p.xz += vec2(-7.8,3.48);\n    d = min(d, max(length(p.xy) - .5, vma(abs(p) - vec3(.6,.6,11.))));\n    p.xz += vec2(4.5,11.05);\n    d = min(d, max(length(vec2(length(p.xz) - 4.5, p.y)) - .5, \n             -vma(abs(p - vec3(0.,0.,5.1/2.)) - vec3(7.,1.,5./2.))));\n    p.xz += vec2(4.5,-15.5);\n    d = min(d, max(length(p.xy) - .5, vma(abs(p) - vec3(.6,.6,15.5))));\n    p.xz -= vec2(5.,15.5);\n    d = min(d, max(length(vec2(length(p.xz) - 5., p.y)) - .5, \n             -vma(abs(p + vec3(0.,0.,5.6/2.)) - vec3(7.,1.,5.5/2.))));\n    p.xz += vec2(-5.,12.);\n    d = min(d, max(length(p.xy) - .5, vma(abs(p) - vec3(.6,.6,12.))));\n    return d;\n}\n\nvec2 map(vec3 p) {\n    vec2 a, b;\n    vec3 q = p;\n    q.y -= 1.25;\n    q.xy *= rot(-.265);\n    a.x = sPaperClip(q);\n    q = p;\n    q.xy += vec2(3.,-2.5);\n    q.xz *= rot(3.14/2.);\n    q.zy *= rot(-.06);\n    q.xy *= rot(.32);\n    a.x = min(a.x, sPaperClip(q));\n    a.y = 1.; \n    b.x = p.y + .5;\n    b.y = 2.;\n    if(a.x > b.x) a = b;\n    return a; \n}\n\nfloat s;\nfloat r() { return fract(sin(s++) * 43758.545); }\n\nconst vec2 e = vec2(.0035, -.0035);\nvec3 norm(vec3 po) {\n        return normalize(e.yyx*map(po+e.yyx).x + e.yxy*map(po+e.yxy).x +\n                         e.xyy*map(po+e.xyy).x + e.xxx*map(po+e.xxx).x);\n}\n\nvec3 trace(vec2 C)\n{\n    vec2 h, uv = (C - iResolution.xy * .5) / iResolution.y;\n    vec3 p, ro = vec3(15.,20.,-18.),\n         rd = normalize(vec3(uv,1.));\n    rd.yz *= rot(-3.14/4.);\n    rd.xz *= rot(-3.15/4.);\n    float fuzz, t = 1.;\n    vec3 col = vec3(1.);\n    const int max_depth = 5;\n    int depth = 0;\n    for (int i = 0; i < 100; i++) {\n        p = ro + rd * t;\n        h = map(p);\n        if(h.x<.01) {\n            if (depth >= max_depth) break;\n            depth++;\n            if (h.y == 1.) {\n                fuzz = .0;\n                col *= vec3(.9);\n            } else {\n                fuzz = .7;\n                col *= vec3(1.);\n            }  \n            vec3 n = norm(p);\n            vec3 target = p + reflect(rd,n) + normalize(vec3(r(),r(),r())*2.-vec3(1.)) * fuzz;\n            rd = normalize(target - p);\n            ro = p + rd * .1;\n            t = 0.;\n        }   \n        if(t>100.) break;\n        t += h.x * .9;\n    }\n    return mix(vec3(.3),vec3(1.),.5 * (rd.y + 1.))*col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = vec3(0.);\n    const float d = .4;\n    s = mod(fragCoord.x * fragCoord.y + float(iFrame) * 91., 9121.);\n    const float samples = 2.;\n    for (float i = 0.; i < samples; i++)\n        col += trace(fragCoord + vec2(r(),r())); \n    col /= samples;\n    if (iFrame > 0)\n        col = mix(texture(iChannel0, fragCoord / iResolution.xy).rgb, col, (1.+iTime*.1) / float(iFrame)); \n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}