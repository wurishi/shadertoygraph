{"ver":"0.1","info":{"id":"dtfcRM","date":"1690510957","viewed":89,"name":"Quadratic B-spline surface","username":"FNKVSSL","description":"Visualizing a 9-point degree 2 surface as a normal map. Artisanal hand-crafted non-recursive branchless Cox-deBoor functions","likes":3,"published":1,"flags":0,"usePreview":1,"tags":["quadratic","surface","bspline"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 BSplineSurface(float u, float v, vec3 P[9]) {\n    //const float x[6] = float[](0.0, 0.0, 0.0, 1.0, 1.0, 1.0);\n    \n    float uSub = 1.0f - u;\n    float uSubU = uSub * u;\n    float u0 = uSub * uSub, u1 = uSubU + uSubU, u2 = u * u;\n    \n    float vSub = 1.0f - v;\n    float vSubV = vSub * v;\n    float v0 = vSub * vSub, v1 = vSubV + vSubV, v2 = v * v;\n\n\n    vec3 result = vec3( 0.0, 0.0, 0.0 );\n    result += P[0] * u0 * v0;\n    result += P[1] * u0 * v1;\n    result += P[2] * u0 * v2;\n\n    result += P[3] * u1 * v0;\n    result += P[4] * u1 * v1;\n    result += P[5] * u1 * v2;\n\n    result += P[6] * u2 * v0;\n    result += P[7] * u2 * v1;\n    result += P[8] * u2 * v2;\n\n    return result;\n}\n\nvec3 calcNormal(vec3 P[9], float u, float v, float e) {\n    vec3 du = BSplineSurface(v, u + e, P) - BSplineSurface(v, u - e, P);\n    vec3 dv = BSplineSurface(v + e, u, P) - BSplineSurface(v - e, u, P);\n    \n    const mat3 rotY = mat3(\n    cos(radians(-180.0)), 0, sin(radians(-180.0)),\n    0, 1, 0,\n    -sin(radians(-180.0)), 0, cos(radians(-180.0)));\n    \n    const mat3 rotZ = mat3(\n    cos(radians(90.0)), -sin(radians(90.0)), 0,\n    sin(radians(90.0)), cos(radians(90.0)), 0,\n    0, 0, 1);\n\n    du = rotY * rotZ * du;\n    dv = rotY * rotZ * dv;\n\n    return normalize(cross(dv, du));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float z = 10.0;\n\n    /*vec3 coeffs[9] = vec3[](\n        vec3(-1.0, -1.0, sin(iTime + 3.0 * z) * 5.0), vec3(0.0, -1.0, 0.0), vec3(1.0, -1.0, sin(iTime + 9.0 * 5.0) * z),\n        vec3(-1.0, 0.0, 0.0), vec3(0.0, 0.0, sin(iTime * 5.0) * z), vec3(1.0, 0.0, 0.0),\n        vec3(-1.0, 1.0, sin(iTime + 12.0 * z) * 5.0), vec3(0.0, 1.0, 0.0), vec3(1.0, 1.0, sin(iTime + 6.0 * 5.0) * z)\n    );*/\n    \n    vec3 coeffs[9] = vec3[](\n        vec3(-1.0, -1.0, 0.0), vec3(0.0, -1.0, 0.0), vec3(1.0, -1.0, 0.0),\n        vec3(-1.0, sin(iTime + 3.0 * z) * 5.0, 0.0), vec3(sin(iTime * 1.0) * z, 0.0, 5.0), vec3(1.0, sin(iTime + 6.0 * z) * 5.0, 0.0),\n        vec3(-1.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0), vec3(1.0, 1.0, 0.0)\n    );\n    \n    /*vec3 coeffs[9] = vec3[](\n        vec3(-1.0, -1.0, 0.0), vec3(0.0, -1.0, 0.0), vec3(1.0, -1.0, 0.0),\n        vec3(-1.0, 0.0, 0.0), vec3(cos(iTime + 12.0 * z) * 3.0, sin(iTime + 12.0 * z) * 3.0, 1.0), vec3(1.0, 0.0, 0.0),\n        vec3(-1.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0), vec3(1.0, 1.0, 0.0)\n    );*/\n    \n    /*vec3 coeffs[9] = vec3[](\n        vec3(-1.0, -1.0, 0.0), vec3(0.0, -1.0, 0.0), vec3(1.0, -1.0, 0.0),\n        vec3(-1.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0),\n        vec3(-1.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0), vec3(1.0, 1.0, 0.0)\n    );*/\n\n    vec3 normal = calcNormal(coeffs, uv.y, uv.x, 0.001);\n    vec4 color = vec4(normal * 0.5 + 0.5, 1.0);\n    \n    vec3 surfPt = BSplineSurface(uv.x + 0.001, uv.y, coeffs);\n    vec2 textureUV = surfPt.xy * 0.5 + 0.5;\n    \n    vec4 textureColor = texture(iChannel0, textureUV);\n    \n    fragColor = color;\n    //fragColor = mix(color, textureColor, 0.5);\n}","name":"Image","description":"","type":"image"}]}