{"ver":"0.1","info":{"id":"3tycWy","date":"1611636400","viewed":96,"name":"Genuary 2021 – 01 – Triple Loop","username":"endymion","description":"Genuary 2021-01, triple loop","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fbm"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#define PI 3.14159265359\n\nfloat map(float value, float min1, float max1, float min2, float max2) {\n  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}\n\nfloat random (in vec2 _st) {\n    return fract(sin(dot(_st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\n/** \n * Noise\n * @src https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83#perlin-noise\n */\n \n// Noise: Random\nfloat rand(vec2 c){\n    return fract(sin(dot(c.xy, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\n// Noise: Basic noise\nfloat noise(vec2 p, float freq){\n    float unit = iResolution.x / freq;\n    vec2 ij = floor(p / unit);\n    vec2 xy = .5 * (1. - cos(PI * mod(p, unit) / unit));\n    float a = rand((ij + vec2(0., 0.)));\n    float b = rand((ij + vec2(1., 0.)));\n    float c = rand((ij + vec2(0., 1.)));\n    float d = rand((ij + vec2(1., 1.)));\n    float x1 = mix(a,b,xy.x);\n    float x2 = mix(c,d,xy.x);\n    return mix(x1,x2,xy.y);\n}\n\n\n/**\n * Fractional Brownian Motion\n * @src https://thebookofshaders.com/13/\n */\nfloat fbm ( in vec2 _st, in int octaves) {\n    float v = 0.0;\n    float a = 0.5;\n    vec2 shift = vec2(100.0);\n    // Rotate to reduce axial bias\n    mat2 rot = mat2(cos(0.5), sin(0.5),\n                    -sin(0.5), cos(0.50));\n    for (int i = 0; i < octaves; ++i) {\n        v += a * noise(_st, 2000. + abs(1000. * sin(iTime * 0.0009)));\n        _st = rot * _st * 2.0 + shift;\n        a *= 0.5;\n    }\n    return v;\n}\n\n/**\n * HSB to RGB\n * @src https://thebookofshaders.com/06/\n */\nvec3 hsb2rgb( in vec3 c ){\n    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),\n                             6.0)-3.0)-1.0,\n                     0.0,\n                     1.0);\n    rgb = rgb*rgb*(3.0-2.0*rgb);\n    return c.z * mix( vec3(1.0), rgb, c.y);\n}\n\n/** \n * Genuary 01\n * @main\n */\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 st = fragCoord.xy/iResolution.xy*1.;\n    vec3 color = vec3(0.0);\n\n    vec2 r = vec2(0.);\n    r.x = fbm(st  + 0.10, 1);\n\n    float f = fbm(st+r, 10);\n    f = f* 0.5 + fbm(vec2(f *0.5), 2);\n    f = f* 0.5 + fbm(vec2(f *0.5), 2);\n    \n    float t = smoothstep(0., 1., abs(map(fract(iTime * .075), 0., 1., -1., 1.)));\n\n    color = hsb2rgb(mix(vec3(1,1,1),\n                mix(\n                    vec3(0.716,0.725, 0.75 + 0.25 * sin(iTime * 0.1)),\n                    vec3(0.991,0.625, 0.75 + 0.25 * sin(iTime * 0.1)),\n                    t * 0.5 + st.y * 0.5\n                ),\n                clamp((f*f)*4.0,0.0,1.0)));\n\n\n    fragColor = vec4((f*f*f+.3*f*f+.8*f)*color,1.);\n}\n\n","name":"Image","description":"","type":"image"}]}