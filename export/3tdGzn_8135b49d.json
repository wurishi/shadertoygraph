{"ver":"0.1","info":{"id":"3tdGzn","date":"1575469154","viewed":517,"name":"from Blue-ish Noise to Gabor","username":"FabriceNeyret2","description":"exploring around JohnShadow's [url]https://www.shadertoy.com/view/tlcGRr[/url]\nMouse = freq,a\nIndeed, very close to Gabor noise with infinite kernel.\nSimplifing JS shader + algo (no square, only sin.x, hash), and adding angle span control + freq variation","likes":11,"published":3,"flags":0,"usePreview":0,"tags":["noise","bluenoise","gabornoise","phasornoise","faked"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// exploring from JohnShadow's https://www.shadertoy.com/view/tlcGRr\n\nfloat n = 20.;\n\n#define pi 3.1415927\n#define rot(a) mat2( cos(a), -sin(a), sin(a), cos(a) )\n\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 R = iResolution.xy,\n         U = 200. * u / R.y,\n         M = length(iMouse.xy) > 10. ? iMouse.xy/ R : vec2(.3, .015*pi);\n    \n    float df = M.x, da = pi*M.y,\n          t = 10.*iTime,\n          s = 0., m, v, \n        noise = 1., _n=0.;\n    \n    for( m = 0.; m < n; m++)\n    {\n        _n = noise;\n        noise = 2.* fract(1e3*sin( 1e3 * m ) ) - 1.;\n        s += sin( (1.+ df *_n)* ( U * rot( da * noise) ).x  -t -m );\n    }\n    s /= 2.*sqrt(m);\n    O = .5 + .5* vec4( u.x < R.x/2. ? s : s/fwidth(s) ); // normalized phasor noise\n}","name":"Image","description":"","type":"image"}]}