{"ver":"0.1","info":{"id":"ltK3zm","date":"1473973858","viewed":622,"name":"progressive old photography effe","username":"public_int_i","description":"progressive old photo effect made by nudging colors towards target textures","likes":2,"published":3,"flags":32,"usePreview":0,"tags":["effect","old","photo","progressive"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Ethan Alexander Shulman 2016\n\n//display result\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfragColor = texture(iChannel0, fragCoord/iResolution.xy);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//Ethan Alexander Shulman 2016\n\n\nfloat rand(float s) {\n    \n    //Thanks to Shane for the improved random function\n    return fract(fract(s*157.)*43758.5453);\n}\nfloat rand(vec3 s) {\n    \n    //Thanks to Shane for the improved random function\n    return fract(cos(dot(s, vec3(7, 157, 113)))*43758.5453);\n\n    /* old\n    return fract( (fract(s.x*32.924)*8. + fract(s.x*296.234) +\n                 fract(s.y*32.924)*8. + fract(s.y*296.234) +\n                 fract(s.z*32.924)*8. + fract(s.z*296.234))*98.397 );*/\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \tvec2 uv = fragCoord/iResolution.xy;\n    \n    int frame = int(mod(float(iFrame),300.));\n    float fframe = iTime;\n    \n    //random shifting/scaling\n    vec2 rshift = vec2(rand(fframe-3.8234),rand(fframe+9.2348)),\n         rscale = vec2(0.25+rand(fframe)*1.75,0.25+rand(fframe+1.2348)*1.75);\n    if (frame == 0) {\n        //start with random noise\n        fragColor = texture(iChannel0, rshift+uv*rscale);\n    } else {\n        //shift towards target texture depending on difference & mask\n        vec4 orig = texture(iChannel3, uv),targ;\n        float rtex = rand(fframe+12.9923)*2.;\n        if (rtex < 1.) {\n            targ = texture(iChannel1, uv*rscale+rshift);\n        } else {\n            targ = texture(iChannel2, uv*rscale+rshift);\n        }\n        fragColor = mix(orig,targ,clamp(pow(1.0-length(orig.xyz-targ.xyz),5.)*0.1,0.0,1.0));\n    }\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"//Ethan Alexander Shulman 2016\n\n\nfloat rand(float s) {\n    \n    //Thanks to Shane for the improved random function\n    return fract(fract(s*157.)*43758.5453);\n}\nfloat rand(vec3 s) {\n    \n    //Thanks to Shane for the improved random function\n    return fract(cos(dot(s, vec3(7, 157, 113)))*43758.5453);\n\n    /* old\n    return fract( (fract(s.x*32.924)*8. + fract(s.x*296.234) +\n                 fract(s.y*32.924)*8. + fract(s.y*296.234) +\n                 fract(s.z*32.924)*8. + fract(s.z*296.234))*98.397 );*/\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \tvec2 uv = fragCoord/iResolution.xy;\n    \n    float fframe = iTime;\n    \n    //random shifting/scaling\n    vec2 rshift = vec2(rand(fframe-3.8234),rand(fframe+9.2348)),\n         rscale = vec2(0.25+rand(fframe)*1.75,0.25+rand(fframe+1.2348)*1.75);\n        \n    //shift towards target texture depending on difference & mask\n        vec4 orig = texture(iChannel3, uv),targ;\n        float rtex = rand(fframe+12.9923)*3.;\n        if (rtex < 1.) {\n            targ = texture(iChannel1, uv*rscale+rshift);\n        } else if (rtex < 2.) {\n            targ = texture(iChannel2, uv*rscale+rshift);\n        } else if (rtex < 3.) {\n            targ = texture(iChannel0, uv*rscale+rshift);            \n        }\n        fragColor = mix(orig,targ,clamp(pow(1.0-length(orig.xyz-targ.xyz),5.)*0.1,0.0,1.0));\n    \n}","name":"Buf B","description":"","type":"buffer"},{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsX3Rn","filepath":"/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","previewfilepath":"/media/ap/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"//Ethan Alexander Shulman 2016\n\n\nfloat rand(float s) {\n    \n    //Thanks to Shane for the improved random function\n    return fract(fract(s*157.)*43758.5453);\n}\nfloat rand(vec3 s) {\n    \n    //Thanks to Shane for the improved random function\n    return fract(cos(dot(s, vec3(7, 157, 113)))*43758.5453);\n\n    /* old\n    return fract( (fract(s.x*32.924)*8. + fract(s.x*296.234) +\n                 fract(s.y*32.924)*8. + fract(s.y*296.234) +\n                 fract(s.z*32.924)*8. + fract(s.z*296.234))*98.397 );*/\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \tvec2 uv = fragCoord/iResolution.xy;\n    \n    float fframe = iTime;\n    \n    //random shifting/scaling\n    vec2 rshift = vec2(rand(fframe-3.8234),rand(fframe+9.2348)),\n         rscale = vec2(0.25+rand(fframe)*1.75,0.25+rand(fframe+1.2348)*1.75);\n        \n    //shift towards target texture depending on difference & mask\n        vec4 orig = texture(iChannel3, uv),targ;\n        float rtex = rand(fframe+12.9923)*3.;\n        if (rtex < 1.) {\n            targ = texture(iChannel1, uv*rscale+rshift);\n        } else if (rtex < 2.) {\n            targ = texture(iChannel2, uv*rscale+rshift);\n        } else if (rtex < 3.) {\n            targ = texture(iChannel0, uv*rscale+rshift);            \n        }\n        fragColor = mix(orig,targ,clamp(pow(1.0-length(orig.xyz-targ.xyz),5.)*0.1,0.0,1.0));\n    \n}","name":"Buf C","description":"","type":"buffer"}]}