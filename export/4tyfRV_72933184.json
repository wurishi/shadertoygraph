{"ver":"0.1","info":{"id":"4tyfRV","date":"1543096632","viewed":107,"name":"Heart of Darkness","username":"Simplyfire","description":"the river is a metaphor for life","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["congo","conrad"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define outer vec3(.1 , 1.0, 1.)\n#define inner vec3(.15,0.5, 1.)\n#define PI 3.14159265359\n#define TWO_PI 6.28318530718\n\n\n\nfloat shape(vec2 st, int N){\n    st = st*2.-1.;\n    float a = atan(st.x,st.y)+PI;\n    float r = TWO_PI/float(N);\n    return cos(floor(.5+a/r)*r-a)*length(st);\n}\n\nfloat box(vec2 st, vec2 resolution){\n    return shape(st*resolution,4);\n}\n\nfloat rect(vec2 uv, vec2 c, vec2 s, vec2 off){\n  float p = max(smoothstep(c.x+s.x,c.x+s.x+off.x, uv.x),\n                smoothstep(c.y+s.y,c.y+s.y+off.y,uv.y));\n  float q = max(smoothstep(c.x-s.x,c.x-s.x-off.x, uv.x),\n                smoothstep(c.y-s.y,c.y-s.y-off.y,uv.y));\n  return 1.-max(p,q);\n}\n\n\nfloat map(float x, float a1, float a2, float b1, float b2){\n  return b1 + (b2-b1) * (x-a1) / (a2-a1);\n}\n\nvec3 rgb( in vec3 c){\n c.x /= 360.;\n c.y /= 100.;\n c.z /= 100.;\n vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0), 6.0)-3.0)-1.0, 0.0, 1.0 );\n rgb = rgb*rgb*(3.0-2.0*rgb);\n return c.z * mix(vec3(1.0), rgb, c.y);\n}\n\nfloat maxrect(vec2 uv, vec2 c){\n\treturn max(abs(c.x-uv.x), abs(c.y-uv.y));\n}\n\n// book of shaders mathemagic\n// https://thebookofshaders.com/11/\n// https://thebookofshaders.com/edit.php#11/iching-03.frag\n\nvec3 random3(vec3 c) {\n    float j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n    vec3 r;\n    r.z = fract(512.0*j);\n    j *= .125;\n    r.x = fract(512.0*j);\n    j *= .125;\n    r.y = fract(512.0*j);\n    return r-0.5;\n}\n\nconst float F3 =  0.3333333;\nconst float G3 =  0.1666667;\nfloat snoise(vec3 p) {\n\n    vec3 s = floor(p + dot(p, vec3(F3)));\n    vec3 x = p - s + dot(s, vec3(G3));\n\n    vec3 e = step(vec3(0.0), x - x.yzx);\n    vec3 i1 = e*(1.0 - e.zxy);\n    vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\n    vec3 x1 = x - i1 + G3;\n    vec3 x2 = x - i2 + 2.0*G3;\n    vec3 x3 = x - 1.0 + 3.0*G3;\n\n    vec4 w, d;\n\n    w.x = dot(x, x);\n    w.y = dot(x1, x1);\n    w.z = dot(x2, x2);\n    w.w = dot(x3, x3);\n\n    w = max(0.6 - w, 0.0);\n\n    d.x = dot(random3(s), x);\n    d.y = dot(random3(s + i1), x1);\n    d.z = dot(random3(s + i2), x2);\n    d.w = dot(random3(s + 1.0), x3);\n\n    w *= w;\n    w *= w;\n    d *= w;\n\n    return dot(d, vec4(52.0));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = gl_FragCoord.xy / iResolution.xy;\n    vec2 m = iMouse.xy / iResolution.xy;\n    if(m.x == 0. && m.y == 0.){\n        m.x = .5;\n        m.y = .5;\n    }\n    vec2 c = vec2(.5, .5);\n    float t = iTime;\n    float granularity = uv.y*140.5;\n    vec3 colorFgA = vec3(355., 74., 61.); // #9B2932\n    vec3 colorFgB = vec3(337., 76., 47.); // #791D41\n    vec3 colorFgC = vec3(313., 62., 31.); // #4E1E44\n    vec3 colorFgD = vec3(257., 52., 12.); // #231b38\n    float noiseInX = uv.x*granularity;\n    float noiseInY = uv.y*granularity-t;\n    float n = .05*snoise(vec3(noiseInX, noiseInY, t*.1));\n    float d = distance(uv, c);\n    float pct = clamp(n+d, 0., 1.);\n    float ball = smoothstep(0.0, .5, pct);\n    vec3 hsb;\n\n    vec3 mixA = mix(rgb(colorFgA), rgb(colorFgB),ball*4.);\n    vec3 mixB = mix(rgb(colorFgC), rgb(colorFgD),ball);\n\n    hsb = mix(mixA, mixB, ball);\n\n    fragColor = vec4(hsb,1.0);\n}\n\n\n\n","name":"Image","description":"","type":"image"}]}