{"ver":"0.1","info":{"id":"MXl3zl","date":"1707844874","viewed":109,"name":"perpetual pathfinders","username":"01000001","description":"Turn left to avoid lines. Occasionally turn right. That's it.\n\nThis fork allows them to branch in order to keep the simulation active. I plan on using it for a wallpaper. Also documented better for obvious reasons.\n\nOthers in the series:\ndsVyz1\nDsGyzW","likes":8,"published":3,"flags":32,"usePreview":0,"tags":["maze"],"hasliked":0,"parentid":"msGcRW","parentname":"pathfinders"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 O, vec2 U ){\n    O = texture(iChannel0, (U + vec2(.5))/iResolution.xy)*2.;\n    // Cheap Blur\n\n    O = vec4(\n        O.z,\n        O.z*O.z,\n        sqrt(O.z),\n        1.\n    );\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float sp = 1e-4; \n// Split probability : Effectively controls density of the simulation.\nconst float init = 1e-5;\n// Initial spawning probability\n\n\n// Try sp 1e-2, init 5e-6 at fullscreen!\n\n\n\nconst float pi = 3.14159;\n//hash by IQ https://www.shadertoy.com/view/XlXcW4\nconst uint k = 1103515245U;\nvec3 hash( uvec3 x )\n{\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    \n    return vec3(x)*(1.0/float(0xffffffffU));\n}\n\nmat2 rot(float t){\n    return mat2(\n        cos(t), sin(t),\n        -sin(t), cos(t)\n    );\n}\n\nvoid mainImage( out vec4 O, vec2 U ){\n    vec3 h = hash(uvec3(U, iDate.z + iDate.w));\n\n    if (iFrame < 20){\n        O = vec4(0);\n        if (h.x < init){                                              // Initialize a couple random pixels.\n            O.xy = round(vec2(1, 0)*rot( floor(h.y*8.)/8. * 2.*pi)); // Random direction\n            O.z = 1.;                                               // I am ALIVE!\n        }\n    } else {\n\n        vec2 r = iResolution.xy;\n        vec2 uv = U/r;\n\n        O = texture(iChannel0, U/r);\n\n        int dir = 0;    // How many pixels pointing into me? Pixel also points into itself so is always 1 for a blank pixel, 2 when there's actually more\n        int split = 0; // Same as above, except we track when the pixel is pointing away, for the branching.\n        vec2 d;       // Direction of particle motion\n        \n        for (int x = -1; x <= 1; x++){\n            for (int y = -1; y <= 1; y++){\n                vec4 n = texture(iChannel0, (U + vec2(x, y))/r); // Loop over a 3x3 square\n\n                if (n.xy == -vec2(x,y)){\n                    dir += 1;\n                    if (n.xy != vec2(0)) d = n.xy;\n                } // Set dir\n                \n                if (n.xy == vec2(x,y) && h.x < sp){\n                    split += 1;\n                    if (n.xy != vec2(0)) d = n.xy;\n                } // Set split\n            }\n        }\n\n\n        if (O.z > 0.){    // Processing trail if it exists\n            O.xy *= 0.;  // Remove the direction thingy so it doesn't interfere later\n            O.z *= .99; // Fade the trail\n        }\n\n        if (dir == 2){                                                // Previous particle pointing into this pixel?\n            vec4 n = texelFetch(iChannel0, ivec2(U + d), 0);         // Read the pixel ahead of the particle.\n            if (n.z > 1e-2) d = round(d*rot(pi/(h.x<1e-3?4.:-4.))); // Is that a trail? If so, change direction. Usually left, sometimes right.\n            O.xy = d;                                              // Assign direction\n            O.z = 1.;                                             // I am ALIVE!\n            \n             // Particles are not peristent. They're cloned every frame. Every single frame hundreds of particles \n            // are killed and their clones placed one pixel forward... very inhumane simulation.\n        } \n        \n        if (split == 2){                             // Allowed to have children?\n            d = round(d*rot(pi/(h.x<1e-3?-4.:4.))); // Send the child to do their own thing\n            O.xy = d;                              // Assign direction\n            O.z = 1.;                             // I am ALIVE\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}