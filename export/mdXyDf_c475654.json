{"ver":"0.1","info":{"id":"mdXyDf","date":"1687255944","viewed":80,"name":"Circular Progress Bar, Smoothed","username":"dunyakilavuz","description":"Can be used as an opacity map for circular progress bars, clock animations etc.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["clock","progress","smooth","circular","bar","opacitymap"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.1415926535897932384626433832795;\nconst float radius = 0.5f;\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 center = iResolution.xy / 2.0;     // Center of the progress bar\n    float radius = min(iResolution.x, iResolution.y) * radius;     // Radius of the progress bar\n    float progress = mod(iTime, 1.0);     // Progress value (0.0 to 1.0)\n    float distance = length(fragCoord - center);     // Distance from the fragment to the center\n    float angle = atan(center.x - fragCoord.x,center.y - fragCoord.y);     // Calculate the angle of the fragment\n    float startAngle = progress * 2.0 * PI - PI;     // Calculate the start and end angles of the progress bar\n    float endAngle = PI;\n    float color = 1.0f - smoothstep(radius * 0.99, radius, distance);\n    color = color - smoothstep(angle, startAngle, endAngle);\n    fragColor = vec4(color);\n}","name":"Image","description":"","type":"image"}]}