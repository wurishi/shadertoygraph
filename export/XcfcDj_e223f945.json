{"ver":"0.1","info":{"id":"XcfcDj","date":"1721589559","viewed":46,"name":"My ray marching learning","username":"Leningradets","description":"My first ray march shader","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_SAMPLES 100\n#define MAX_DIST 100.\n#define SURF_DIST .01\n\nstruct Surf\n{\n    vec3 p;//Hit position\n    vec3 n;//Hit normal\n    vec3 c;//Hit color\n};\n\nfloat GetDist(vec3 p)\n{\n    vec4 s = vec4(0, 1, 0, 1);\n    float sphereDist = length(p - s.xyz) - s.w;\n    float planeDist = p.y;\n    \n    float d = min(sphereDist, planeDist);\n    \n    return d;\n}\n\nvec3 GetNormal(vec3 p)\n{\n    float d = GetDist(p);\n    vec2 e = vec2(.01, 0);\n    \n    vec3 n = d - vec3(GetDist(p - e.xyy),GetDist(p - e.yxy),GetDist(p - e.yyx));\n    return normalize(n);\n}\n\nSurf RayMarch(vec3 ro, vec3 rd)\n{\n    Surf surf = Surf(vec3(1), vec3(0), vec3(1, 1, 1));\n    float dO = 0.;\n\n    for(int i = 0; i < MAX_SAMPLES; i++)\n    {\n        vec3 p = ro + rd * dO;\n        float ds = GetDist(p);\n        dO += ds;\n        \n        if(dO > MAX_DIST || ds < SURF_DIST) break;\n    }\n    \n    surf.p = ro + rd * dO;\n    surf.n = GetNormal(surf.p);\n    return surf;\n}\n\nvec3 GetLight(in Surf surf, vec3 lightPos, vec3 lightColor, float strength)\n{\n    vec3 ambientLight = vec3(0.1, 0.1, 0.2);\n    vec3 surfaceTolight = lightPos - surf.p;\n    vec3 lightDir = normalize(surfaceTolight);\n    \n    Surf caster = RayMarch(surf.p + surf.n * SURF_DIST * 2., lightDir);\n    float d =  length(surf.p - caster.p);\n    if(d < length(surfaceTolight)) strength *= 0.; //shadow\n    \n    return ambientLight + clamp(dot(surf.n, lightDir), 0., 1.)*surf.c*lightColor*strength/length(surfaceTolight);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = (fragCoord - 0.5*iResolution.xy) / iResolution.y;\n\n    vec3 ro = vec3(0, 1, -5);//Ray origin\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1));//Ray direction\n\n    // Background\n    vec3 col = vec3(0);\n    \n    Surf surf = RayMarch(ro, rd);//Surface data from ray march\n\n    //col = surf.n;\n    vec3 lightPos = vec3(sin(iTime)*10., 15., cos(iTime)*10.);\n    col = GetLight(surf, lightPos, vec3(0.9, 0.9, 0.5), 20.);\n    \n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}