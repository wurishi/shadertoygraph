{"ver":"0.1","info":{"id":"DtfXz8","date":"1674309244","viewed":106,"name":"Interference time integrated 2","username":"RJVB09","description":"Double slit experiment integrating waves over time moving over time","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["waves"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragCoord /= ZOOM;\n    fragCoord += iResolution.xy*(1.0-1.0/ZOOM)/2.0;\n    fragCoord -= iResolution.xy*(1.0-1.0/ZOOM)/2.0 * ZOOMOFFSET;\n    \n    int slit1width = SLIT1W;\n    int slit2width = SLIT2W;\n    int res = HUYGENSRES;\n    \n    float slit1pos = iResolution.y/2.0 - SLITSEP/2.0 - float(SLIT1W);\n    float slit2pos = iResolution.y/2.0 + SLITSEP/2.0;\n    \n    float lightDatacos = 0.0;\n    float lightDatasin = 0.0;\n    \n    float wavelen = WAVELEN/(4.0*asin(1.0));\n    \n    for (int i = 0; i < slit1width*res; i++)\n    {\n        if (int(fragCoord.y) == int(slit1pos)+i/res && fragCoord.x < 1.0)\n        {\n            lightDatacos = 1000000000.0;\n            lightDatasin = 1000000000.0;\n            break;\n        }\n        vec2 pos = vec2(0,float(slit1pos)+float(i)/float(res));\n        \n        lightDatacos += cos(length(pos - fragCoord)/wavelen-iTime)*pow(dot(normalize(fragCoord-pos),vec2(1.0,0.0)),DOT_POW);\n        lightDatasin += sin(length(pos - fragCoord)/wavelen-iTime)*pow(dot(normalize(fragCoord-pos),vec2(1.0,0.0)),DOT_POW);\n    }\n    \n    for (int i = 0; i < slit2width*res; i++)\n    {\n        if (int(fragCoord.y) == int(slit2pos)+i/res && fragCoord.x < 1.0)\n        {\n            lightDatacos = 1000000000.0;\n            lightDatasin = 1000000000.0;\n            break;\n        }\n        vec2 pos = vec2(0,float(slit2pos)+float(i)/float(res));\n        //float lum = 1.0/(length(pos - fragCoord)*length(pos - fragCoord));\n        \n        lightDatacos += cos(length(pos - fragCoord)/wavelen-iTime)*pow(dot(normalize(fragCoord-pos),vec2(1.0,0.0)),DOT_POW);\n        lightDatasin += sin(length(pos - fragCoord)/wavelen-iTime)*pow(dot(normalize(fragCoord-pos),vec2(1.0,0.0)),DOT_POW);\n        \n    }\n\n    // Time varying pixel color\n    vec3 col = max(vec3(lightDatasin)*EXPOSURE/float(res),texture(iChannel0,uv).rgb);\n    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragCoord /= ZOOM;\n    fragCoord += iResolution.xy*(1.0-1.0/ZOOM)/2.0;\n    fragCoord -= iResolution.xy*(1.0-1.0/ZOOM)/2.0 * ZOOMOFFSET;\n    \n    int slit1width = SLIT1W;\n    int slit2width = SLIT2W;\n    int res = HUYGENSRES;\n    \n    float slit1pos = iResolution.y/2.0 - SLITSEP/2.0 - float(SLIT1W);\n    float slit2pos = iResolution.y/2.0 + SLITSEP/2.0;\n    \n    float lightDatacos = 0.0;\n    float lightDatasin = 0.0;\n    \n    float wavelen = WAVELEN/(4.0*asin(1.0));\n    \n    for (int i = 0; i < slit1width*res; i++)\n    {\n        if (int(fragCoord.y) == int(slit1pos)+i/res && fragCoord.x < 1.0)\n        {\n            lightDatacos = 1000000000.0;\n            lightDatasin = 1000000000.0;\n            break;\n        }\n        vec2 pos = vec2(0,float(slit1pos)+float(i)/float(res));\n        \n        lightDatacos += cos(length(pos - fragCoord)/wavelen-iTime)*pow(dot(normalize(fragCoord-pos),vec2(1.0,0.0)),DOT_POW);\n        lightDatasin += sin(length(pos - fragCoord)/wavelen-iTime)*pow(dot(normalize(fragCoord-pos),vec2(1.0,0.0)),DOT_POW);\n    }\n    \n    for (int i = 0; i < slit2width*res; i++)\n    {\n        if (int(fragCoord.y) == int(slit2pos)+i/res && fragCoord.x < 1.0)\n        {\n            lightDatacos = 1000000000.0;\n            lightDatasin = 1000000000.0;\n            break;\n        }\n        vec2 pos = vec2(0,float(slit2pos)+float(i)/float(res));\n        //float lum = 1.0/(length(pos - fragCoord)*length(pos - fragCoord));\n        \n        lightDatacos += cos(length(pos - fragCoord)/wavelen-iTime)*pow(dot(normalize(fragCoord-pos),vec2(1.0,0.0)),DOT_POW);\n        lightDatasin += sin(length(pos - fragCoord)/wavelen-iTime)*pow(dot(normalize(fragCoord-pos),vec2(1.0,0.0)),DOT_POW);\n        \n    }\n\n    // Time varying pixel color\n    vec3 col = max(vec3(lightDatasin)*EXPOSURE/float(res),texture(iChannel0,uv).rgb);\n    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"const float WAVELEN = 0.62; //620nm\nconst int SLIT1W = 10; //10μm\nconst int SLIT2W = 10; //10μm\nconst float SLITSEP = 30.0; //30μm\nconst float EXPOSURE = 0.090;\nconst float DOT_POW = 1.0;\nconst float ZOOM = 1.0;\nconst vec2 ZOOMOFFSET = vec2(1.0,0.00);\n\nconst int HUYGENSRES = 100;","name":"Common","description":"","type":"common"}]}