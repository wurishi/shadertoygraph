{"ver":"0.1","info":{"id":"4cBXWz","date":"1706185605","viewed":43,"name":"Lesson1 RayMarching","username":"artele","description":"RayMarching learn","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.0\n#define SURF_DIST 0.01\n\n\n\nfloat GetMinDist(vec3 p)\n{\n    vec4 sphere1 = vec4(0, 1, 6, 1.0 * abs(cos(iTime)));\n    vec4 sphere2 = vec4(1.5, 1.0, 6, 1.0 * abs(sin(iTime)));\n    float sphereDist1 = length(p - sphere1.xyz) - sphere1.w;\n    float sphereDist2 = length(p - sphere2.xyz) - sphere2.w;\n    float planeDist = p.y + 0.5;\n    \n    float d = min(min(sphereDist1, planeDist), sphereDist2);\n    \n    return d;\n}\n\nvec3 GetNormal(vec3 p)\n{\n    float d = GetMinDist(p);\n    vec2 e = vec2(0.01, 0);\n    vec3 n = d - vec3(\n        GetMinDist(p - e.xyy),\n        GetMinDist(p - e.yxy),\n        GetMinDist(p - e.yyx)\n    );\n    \n    return normalize(n);\n}\n\nfloat RayMarching(vec3 ro, vec3 rd)\n{\n    float d = 0.0;\n    for (int i = 0; i < MAX_STEPS; i++)\n    {\n        vec3 p = ro + rd * d;\n        float dist = GetMinDist(p);\n        d += dist;\n        if (d > MAX_DIST || d < SURF_DIST)\n        {\n           break; \n        }\n    }\n    \n    return d;\n}\n\nfloat GetLight(vec3 p)\n{\n    vec3 lightPos = vec3(0, 3, 3);\n    lightPos.xz += vec2(sin(iTime), cos(iTime));\n    vec3 l = normalize(lightPos - p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l), 0.0, 1.0);\n    \n    float d = RayMarching(p + n * 0.5, l);\n    if (d < length(lightPos - p))\n    {\n        dif = 0.0;\n    }\n    \n    return dif;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - 0.5*iResolution.xy) / iResolution.y;\n\n    // Time varying pixel color\n    vec3 col = vec3(0);\n    \n    vec3 ro = vec3(0, 1, 0);\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1));\n    \n    float d = RayMarching(ro, rd);\n    \n    vec3 p = ro + rd * d;\n    float dif = GetLight(p);\n    // Output to screen\n    fragColor = vec4(vec3(dif), 1.0);\n}","name":"Image","description":"","type":"image"}]}