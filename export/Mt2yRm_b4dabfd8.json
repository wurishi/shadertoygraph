{"ver":"0.1","info":{"id":"Mt2yRm","date":"1508068997","viewed":363,"name":"4d procedural noise","username":"afl_ext","description":"Based on excellent IQ snippet, extended to 4d for fancy effects. Enjoy!","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["procedural","noise","4d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float hash( float n ){\n    return fract(sin(n)*758.5453);\n}\nfloat noise4d(vec4 x){\n\tvec4 p=floor(x);\n\tvec4 f=smoothstep(0.,1.,fract(x));\n\tfloat n=p.x+p.y*157.+p.z*113.+p.w*971.;\n\treturn mix(mix(mix(mix(hash(n),hash(n+1.),f.x),mix(hash(n+157.),hash(n+158.),f.x),f.y),\n\tmix(mix(hash(n+113.),hash(n+114.),f.x),mix(hash(n+270.),hash(n+271.),f.x),f.y),f.z),\n\tmix(mix(mix(hash(n+971.),hash(n+972.),f.x),mix(hash(n+1128.),hash(n+1129.),f.x),f.y),\n\tmix(mix(hash(n+1084.),hash(n+1085.),f.x),mix(hash(n+1241.),hash(n+1242.),f.x),f.y),f.z),f.w);\n}\n\nfloat aBitBetterNoise(vec4 x){\n    // this trick here works for all IQ noises, it makes cost 2x but makes it look a lot lot better\n    // it is not required of course\n    float a = noise4d(x);\n    float b = noise4d(x + .5);                      \n    return (a+b)*.5;\n}\n\nmat3 rotationMatrix(vec3 axis, float angle)\n{\n    axis = normalize(axis);\n    float s = sin(angle);\n    float c = cos(angle);\n    float oc = 1.0 - c;\n\n    return mat3(oc * axis.x * axis.x + c, oc * axis.x * axis.y - axis.z * s, oc * axis.z * axis.x + axis.y * s,\n        oc * axis.x * axis.y + axis.z * s, oc * axis.y * axis.y + c, oc * axis.y * axis.z - axis.x * s,\n        oc * axis.z * axis.x - axis.y * s, oc * axis.y * axis.z + axis.x * s, oc * axis.z * axis.z + c);\n}\n\nvec3 getRay(vec2 UV){\n\tUV = UV * 2.0 - 1.0;\n    vec2 mouse = iMouse.xy / iResolution.xy;\n\tmat3 rotmat = rotationMatrix(vec3(1.0, 0.0, 0.0), mouse.y * 2.0 - 1.0);\n\tmat3 rotmat2 = rotationMatrix(vec3(0.0, 1.0, 0.0), mouse.x * 2.0 - 1.0);\n\treturn rotmat * rotmat2 * normalize(vec3(UV.x, - UV.y, 1.0));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 ray = getRay(uv);\n    \n    float val = aBitBetterNoise(vec4(ray * 10.0, iTime));\n\tfragColor = vec4(vec3(val),1.0);\n}","name":"Image","description":"","type":"image"}]}