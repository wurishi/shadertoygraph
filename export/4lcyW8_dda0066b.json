{"ver":"0.1","info":{"id":"4lcyW8","date":"1532321331","viewed":360,"name":"Yet Another Mandelbrot","username":"mike_tobia","description":"palpating mandelbrot - intro to shadertoy","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 m = iMouse.xy / iResolution.xy;\n    float zoom = pow(10., -m.x*3.);\n    \n    vec2 uv = (fragCoord.xy-.5*iResolution.xy) /iResolution.y;\n\n    vec2 c = uv*zoom*3.;\n    c += vec2(-.69955, .37999);\n    \n    vec2 z = vec2(0.);\n    float iter = 0.;\n    \n    float steps = 100.;\n    float n = 2. + (cos(iTime) + 1.);\n    \n    for (float i = 0.; i < steps; i++) {\n        // z = z^2 + c\n\t\tz = vec2(z.x*z.x - z.y*z.y, n*z.x*z.y) + c;\n        \n        if (length(z)>2.) break;\n        \n        iter++;\n    }\n    \n    float f = iter/steps;\n    \n    vec3 col = vec3(f);\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}