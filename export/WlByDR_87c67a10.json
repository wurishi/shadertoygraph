{"ver":"0.1","info":{"id":"WlByDR","date":"1594060673","viewed":403,"name":"Soundsystem Led Show","username":"julianlumia","description":"speakerss","likes":12,"published":1,"flags":0,"usePreview":1,"tags":["light","disco","soundsystem"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\n#define COMPILMENTARYCOLORS 1\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\n//square wave function\nfloat funcs( in float x,float speed )\n{\n    \n    x *= speed;\n    \n    float h = fract(x)-0.5;\n    \n    float s = -sign(h);\n    \n    return s;\n}\n\n\n\nuniform vec2 u_resolution;\nuniform float u_time;\n//book of shaders\nvec3 rgb2hsb( in vec3 c ){\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz),\n                 vec4(c.gb, K.xy),\n                 step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r),\n                 vec4(c.r, p.yzx),\n                 step(p.x, c.r));\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)),\n                d / (q.x + e),\n                q.x);\n}\n\n//  Function from IÃ±igo Quiles\n//  https://www.shadertoy.com/view/MsS3Wc\nvec3 hsb2rgb( in vec3 c ){\n    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),\n                             6.0)-3.0)-1.0,\n                     0.0,\n                     1.0 );\n    rgb = rgb*rgb*(3.0-2.0*rgb);\n    return c.z * mix(vec3(1.0), rgb, c.y);\n}\n\n\n//mapping function from bigwings\nfloat map(float a, float b, float c, float d, float t) {\n\treturn ((t-a)/(b-a))*(d-c)+c;\n}\n\n\n//--------------voronoi noise\n\n\n\nvec2 N22(vec2 p) {\n\tvec3 a = fract(vec3(p.xyx) * vec3(123.34, 234.34, 345.65));\n    a += dot(a, a + 34.45);\n    return fract(vec2(a.x * a.y, a.y*a.z));\n}\n\nfloat voronoi(vec2 uv){\n\n\t\n    float m = 0.;\n\t//float cellIindex = 0.;\n    float minDist = 10.;\n    float t = iTime;\n  //  float cellamound = 50.;\n   \n      //  uv*=scale;\n       vec2 gv = fract(uv)-.5;        \n       //create id system for every vekk\n       vec2 id = floor(uv);\n       vec2 cid = vec2(0);\n\t\tfor(float y =-1.; y<=1.; y++){\n            for(float x =-1.; x<=1.; x++){\n                vec2 offs = vec2(x,y);\n                \n                vec2 n = N22(id+offs);\n\t\t\t\tvec2 p = offs+sin(n*t)*.5; \n                float d = length(gv-p);\n                         m+= smoothstep(.05,.1,d);\n\n                  if(d<minDist){\n        minDist= d;\n        cid = id+offs;\n                  }\n              }     \n           }\n\n        \n       return minDist;\n        \n\n\n}\n\n\nfloat ov(vec2 p) {\n    float v = 0.0;\n    float a = 0.4;\n    for (int i = 0;i<2;i++) {\n        v+= voronoi(p)*a;\n        p*=2.0;\n        a+=0.5;\n    }\n    return v;\n}\n\n//------------------\n\n\n\n\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n\nmat2 Rot(float a) {\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat smin( float a, float b, float k ) {\n    float h = clamp( 0.5+0.5*(b-a)/k, 0., 1. );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat sdCapsule(vec3 p, vec3 a, vec3 b, float r) {\n\tvec3 ab = b-a;\n    vec3 ap = p-a;\n    \n    float t = dot(ab, ap) / dot(ab, ab);\n    t = clamp(t, 0., 1.);\n    \n    vec3 c = a + t*ab;\n    \n    return length(p-c)-r;\n}\n\nfloat sdCylinder(vec3 p, vec3 a, vec3 b, float r) {\n\tvec3 ab = b-a;\n    vec3 ap = p-a;\n    \n    float t = dot(ab, ap) / dot(ab, ab);\n    t = clamp(t, 0., 1.);\n    \n    vec3 c = a + t*ab;\n    \n    float x = length(p-c)-r;\n    float y = (abs(t-.5)-.5)*length(ab);\n    float e = length(max(vec2(x, y), 0.));\n    float i = min(max(x, y), 0.);\n    \n    return e+i;\n}\n\nfloat sdTorus(vec3 p, vec2 r) {\n\tfloat x = length(p.xz)-r.x;\n    return length(vec2(x, p.y))-r.y;\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\n\nfloat g1;\nfloat g2;\nfloat g3;\nfloat g4;\nfloat g5;\n\n vec3 subp;\nfloat GetDist(vec3 p) {\n float the = sin(p.y*.1+iTime*.5)*.5+0.;\n //p.zx *= mat2(cos(the), -sin(the), sin(the), cos(the));\n      the = sin(p.x*.5+iTime*1.)*.15+0.;\n\n   //  p.yz *= mat2(cos(the), -sin(the), sin(the), cos(the));\n    \n      the = (sin((p.x*.05)+iTime*.2)*.2+0.);\n\n     //p.xy *= mat2(cos(the), -sin(the), sin(the), cos(the));\n\n\n vec3 p7 = p;\n float gap = 4.2;\n p.x = abs(p.x)-2.3;\n p.x = abs(p.x)-2.3;\n p.x = abs(p.x)-2.3;\n vec3 p6 = p;\n float d;\n gap = 3.;\n p.x = abs(p.x)-1.1;\n float plane2 = dot(p-vec3(1,1,1),normalize(vec3(0.,0.,0.2)))-0.;\n p -= vec3(-3.,-0,-0.); \n vec3 p4 = p;  \n the = 2.7;\n p4 -= vec3(3,1.73,-1.4);\n p4.zy *= mat2(cos(the), -sin(the), sin(the), cos(the));\n float box7 = sdBox(p4-vec3(0,1,0), vec3(1,0.02,.6));\n vec3 p5 = p;  \n the = 2.6;\n p5 -= vec3(3.,0.73,-.9);\n p5.zy *= mat2(cos(the), -sin(the), sin(the), cos(the));\n p5.x = abs(p5.x)-.5;\n float box8 = sdBox(p5-vec3(0,1,0), vec3(0.05,1.3,.5));\n vec3 p3 = p;  \n the = 2.5;\n p3 -= vec3(3,1.,-.5);\n p3.zy *= mat2(cos(the), -sin(the), sin(the), cos(the));\n float box6 = sdBox(p3-vec3(0,1,0), vec3(1,0.05,.4));\n\n    //\n    ///led hogscoops bar\n    float lsub = sdBox(p3-vec3(0,1.0,0.5), vec3(1.,0.05,.1));\n\t\n    float hsub = sdBox(p3-vec3(0,-.2,1.), vec3(1.,0.05,.1));\n\n\n    \n    vec3 p2 = p;  \n     the = 2.2;\n\tp2 -= vec3(3,2.6,-0.6);\n    p2.zy *= mat2(cos(the), -sin(the), sin(the), cos(the));\n    float box5 = sdBox(p2-vec3(0,1,0), vec3(1,0.05,1.2));\n float x = sdCapsule(p2,vec3(0,2.,0.),vec3(0,1.2,-.2),.8);\n    \n   \n    \n    vec3 conusp = p2;\n         conusp += vec3(0.,-0.3,0.);\n    \n     float y = sdCapsule(conusp,vec3(0,2.,0.),vec3(0,1.,-0.2),.8);\n     conusp += vec3(0.,abs(sin(iTime))-0.,0.);\n float z = sdCapsule(conusp,vec3(0,4.,0.),vec3(0,1.,-0.2),.7);\n\n    \n    \n    //buitenkant sub\n    float box2 = sdBox(p-vec3(3,1,0), vec3(1,2,2));\n\n    // led y as sub\n    \n     subp = p-vec3(3.,1,.8);\n   // spherepos = subp;\n    subp.x = (abs(subp.x)-0.85); \n    \n  //  subp+=vec3(0.02,0,.1);\n    //spherepos = subp;\n   // subp.x = (abs(subp.x)); \n    \n        float ysubbox2 = sdBox(subp-vec3(0.02,0,.1), vec3(.08,2.,.1));\n\n   // subp.x = (abs(subp.x)+0.3); \n        float ysub = sdBox(subp+vec3(0.05,0,.1), vec3(.08,2.,.01));\n\n    \n    \n    x = max(min(z,-(max(x,(y)))),(box5));\n\n\tbox2 = abs(box2)-0.05;\n    float op2 =  max(plane2, min(box8,box2));\n    \n\n    \n    \n    \n    \n    \n    d = min(op2,min(x,(min(box7,box6))));\n    \n    \n    \n    \n    \n    \n    \n    p = p6;\n    p += vec3(2,0,0);\n      float boxkick = sdBox(p-vec3(2,4.,0), vec3(1.8,0.8,1.1));\n          float frontkick = sdBox(p-vec3(2,4.,.9), vec3(1.8,0.8,.03));\n          float bafflekick = sdBox(p-vec3(2,4.,0.8), vec3(0.2,0.8,.5));\n          float bafflemiddle = sdBox(p-vec3(2,4.,0.45), vec3(0.2,0.02,1.5));\n\n       the = 2.5;\n    p.zy *= mat2(cos(the), -sin(the), sin(the), cos(the));\n     p += vec3(-2,4.9,1.9);\n      p.x =abs(p.x)-1.;\n        conusp = p;\n         conusp += vec3(0.,-1.,1.);\n    \n      y = sdCapsule(conusp,vec3(0,1.,-0.),vec3(0,0,0.5),.7);\n \n          x = y;\n      conusp += vec3(0.0,-1.,.6);\n      y = sdCapsule(conusp,vec3(0,.35,-0.),vec3(0,1,.0),.6);\n    \n    \tboxkick = abs(boxkick)-0.05;\n    \tboxkick = max(plane2,min(max(-bafflekick,max(frontkick,-max(x,-y))),min(bafflemiddle,boxkick)));\n        d = min(d,boxkick);\n    \n      p = p6;\n      float midbox = sdBox(p-vec3(0,6.,0), vec3(.9,1.,1.1));\n    \n          float between = sdBox(p-vec3(0,6.,-0.4), vec3(.3,1.,.02));\n\n    \n    vec3 bendp = p; \n    bendp.x = abs(bendp.x)-0.2;\n    bendp += vec3(-.3,-6.,-0.4);\n    the = sin(bendp.x*.7+0.4);\n    bendp.xz *= mat2(cos(the), -sin(the), sin(the), cos(the));\n          float bafle1 = sdBox(bendp, vec3(.01,1.,.7));\n\n        \tmidbox = abs(midbox)-0.03;\n     p += vec3(-0,-6.,.5);\n          p.y =abs(p.y)+2.8;\n\n       the = 2.5;\n    p.zy *= mat2(cos(the), -sin(the), sin(the), cos(the));\n     \n\n   p += vec3(-0,4.,1.9);\n        conusp = p;\n     \n         conusp += vec3(0.,-1.,1.);\n \n      y = sdCapsule(conusp,vec3(0,1.,0.),vec3(0,0,1.5),.35);\n x = y;\n  \n    \n\n            d = max(plane2,min(d,min(bafle1,min(midbox,max(between,-x)))));\n\n\n    p = p6;\n vec3 bendp2 = p;\n      bendp2.x = abs(bendp2.x)+.02;\n\n    \tbendp2 -= vec3(.3,7.5,.6);\n\n    the = sin(bendp2.x*1.3+0.4);\n    bendp2.xz *= mat2(cos(the), -sin(the), sin(the), cos(the));\n          float bafle2 = sdBox(bendp2, vec3(.01,.4,.7));\n    \n    p += vec3(0,-7.1,-1);\n      float topbox = sdBox(p-vec3(0.,0.4,0.), vec3(.8,.4,2.));\n topbox = abs(topbox)-0.06;   \n p = p7;\n float sphereg = (length(p+vec3(sin(iTime)*11.,sin(iTime*1.)*3.+3.,(cos(iTime))*12.))-1.);\n float ground = sdBox(p-vec3(0,6.,0), vec3(10,7.,15));\n float sphereg3 = (length(p+vec3(0.,sin(iTime)*0.+0.,0.))-12.);\n vec3 grondp = p;       \n gap = .8;\n grondp.y = mod(grondp.y + gap,2.0 * gap) - gap;\n float ground2 = sdBox(grondp-vec3(0,-.6,0), vec3(14.,.2,14));\n p.x = abs(p.x)-3.3;\n p.x = abs(p.x)-3.3;\n p.x = abs(p.x)-3.3;\n float sphereg2 = sdBox(p+vec3(0.5,-3.5,0.), vec3(.1,.5,0.1));\n float sphereg24 = sdBox(p+vec3(2.,-0.5,0.), vec3(.1,.5,0.1));\n float sphereg4 = sdBox(p+vec3(1.,(sin(iTime)*0.5+2.)+-8.5,-0.1), vec3(.1,.5,0.1));\n     float bkgrnd = sdBox(p+vec3(1.,-3.5,-5.), vec3(.1,.5,0.1));\n\n d = min(d,max(plane2,min(topbox,bafle2)));\n d = min(sphereg2,d);\n ground =max(sphereg3,-ground);\n    \n    \n///ledlampen\n  //  ysubbox2\n        d = min(ysubbox2,d); \n        d = min(lsub,d);\n      d = min(ysub,d);\n      d = min(hsub,d);\n    \n    \n    \n    \n   g1 +=4./(0.06+pow(abs(  y  ),2.));\n  \n\n    \n    \n    \n d = min(d,ground);\ng4 +=4./(0.006+pow(abs(lsub),sin(iTime)+1.));\n// g3 +=.05/(.2+abs(sphereg2*sphereg2));\n //g3 +=1./(.4+abs(ysub*ysub));\n\n   \n g3 +=4./(0.06+pow(abs(ysub),1.));\n   \n //  g2 +=1./(.0001+pow(abs(hsub),2.));\n    \n    \n //g4 +=1./(.005+pow(abs(ysub),(abs(sin(p.x*1.+iTime))*1.)));\n //g3 +=.05/((sin(p7.x*0.01+iTime*1.)*0.5+0.5)*0.5+sphereg24*sphereg24);\n    //g2 +=1./((sin(p7.x*0.1+iTime*2.)*0.5+0.5)*0.5+pow(abs(bkgrnd),4.));\ng3 +=.01/(.01+pow(abs(z),5.));\n\n return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS*1.;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nfloat GetLight(vec3 p) {\n    vec3 lightPos = vec3(0., 1.5, -1.);\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l)*.5+.5, 0., 1.);\n    float d = RayMarch(p+n*SURF_DIST*.01, l);\n    \n    return dif;\n}\n\nvec3 R(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\nconst float PI = 3.14159265359;\n\n#define HASHSCALE1 .1031\nfloat hash(float p)\n{\n\tvec3 p3  = fract(vec3(p) * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec3 randomSphereDir(vec2 rnd)\n{\n\tfloat s = rnd.x*PI*2.;\n\tfloat t = rnd.y*2.-1.;\n\treturn vec3(sin(s), cos(s), t) / sqrt(1.0 + t * t);\n}\nvec3 randomHemisphereDir(vec3 dir, float i)\n{\n\tvec3 v = randomSphereDir( vec2(hash(i+1.), hash(i+2.)) );\n\treturn v * sign(dot(v, dir));\n}\n\nfloat ambientOcclusion( in vec3 p, in vec3 n, in float maxDist, in float falloff )\n{\n\tconst int nbIte = 32;\n    const float nbIteInv = 1./float(nbIte);\n    const float rad = 1.-1.*nbIteInv; \n\tfloat ao = 0.0;\n    \n    for( int i=0; i<nbIte; i++ )\n    {\n        float l = hash(float(i))*maxDist;\n        vec3 rd = normalize(n+randomHemisphereDir(n, l )*rad)*l;\n        ao += (l - max(GetDist( p + rd ),0.)) / maxDist * falloff;\n    }\n\t\n    return clamp( 1.-ao*nbIteInv, 0., 1.);\n}\n\n\n\nfloat shadow(vec3 r0, vec3 rd, float maxDist)\n{\n    float d = 0.005;\n    float shadow = 1.0;\n    while(d < maxDist)\n    {\n        float t = GetDist(r0 + d * rd);\n        if(t < 0.004) return 0.0;\n        d += t;\n        shadow = min(shadow, 30.0 * (t / d));\n    }\n    return shadow;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n    \n    vec3 colout = vec3(0);\n    \n    vec3 ro = vec3(0, 2.5, 13.);\n\n    vec3 rd = R(uv, ro, vec3(1,4.0,-10.), 1.);\n\n    float d = RayMarch(ro, rd);\n    vec3 p;\n    if(d<MAX_DIST) {\n\n    \t p = ro + rd * d;\n   \n\n    \tfloat dif = GetLight(p);\n   colout += vec3(dif);\n                              vec3 n = GetNormal(p.xyz);\n\n         float a = ambientOcclusion(p,n, .5, 1.);\ncolout *= a+2.;\n        \n   //       col = mix( col, vec3(1.0,1.0,0.0),\n   //     (1.0-smoothstep(0.0,0.01,abs(length(uv-vec2(0.0,0.5))-0.35)))*\n    //    texelFetch( iChannel0, ivec2(KEY_UP,1),0 ).x);\n \n        \n        \n  //---------------------------      \n        \n           \n    \n ///scaling\n const float scaleFactor = 5.0;\n const float invScaleFactor = 1.0 / scaleFactor;\n\n vec2 uv4 = floor(uv * scaleFactor) * invScaleFactor;\n  \n vec2 m = iMouse.xy/iResolution.xy;\n vec4 col5;\n vec2 uv2 = uv;\n //color logic\n  vec3 color = vec3(0.0);\n  if(  m.x > 0.0 && m.x < 1. && m.y > .0)\n   {\n     m.y =abs(m.y-0.5)*2.+0.;\n    }\n  float h = fract(abs(sin(iTime*0.1)));\n  float s = abs(sin(iTime*0.1));\n  float b = abs(m.y)*1.;\n\n vec4 fout;\n float uvy = .5;   \n vec3 col;\n vec3 col2;\n vec3 col3;\n \n col = vec3(  hsb2rgb(vec3(h,s,1.)));  \n\n    \n// float saturation = s;\n //x is this is the the harmonic seperation value of the 2nd and 3rd color in relation to the the 1st one (most left)\n //x = 0. is just the comlimentary color and x=0.35 would form a triangular relation ship on the color spectrum)\n //(more obvious if the saturation is set to 1. instead of the sinewave ) \n // set COMPILMENTARYCOLORS to 0 to turn of the complimentary relationship\n \n //controllllls\n //zet chase aan en uit , 1 = uit   \n float  chase =0.;   \n float chasespeed = .5; \n \n //color divergance   \n float x=0.25;\n \n //external saturation\n float saturation = 1.;\n col *= saturation;\n    \n    \n //gating logic========================   \n if(col.x > col.y && col.x > col.z){\n  col2= vec3(col.x-x,col.y+x,col.z);  \n   if(COMPILMENTARYCOLORS == 1)\n    {\n     col2 = vec3(map(0.,1.,1.,0.,col2.x),map(0.,1.,1.,0.,col2.y),map(0.,1.,1.,0.,col2.z));\n    }\n }\n  \n if(col.x > col.y && col.x > col.z){  \n  col3= vec3(col.x-x,col.y,col.z+x);    \n   if(COMPILMENTARYCOLORS == 1)\n    {\n     col3 = vec3(map(0.,1.,1.,0.,col3.x),map(0.,1.,1.,0.,col3.y),map(0.,1.,1.,0.,col3.z));\n    }\n }\n    \n if(col.y > col.x && col.y > col.z){\n  col2= vec3(col.x+x,col.y-x,col.z);  \n  if(COMPILMENTARYCOLORS == 1)\n   {\n    col2 = vec3(map(0.,1.,1.,0.,col2.x),map(0.,1.,1.,0.,col2.y),map(0.,1.,1.,0.,col2.z));\n   }  \n}\n    \n if(col.y > col.x && col.y > col.z){\n  col3= vec3(col.x,col.y-x,col.z+x);    \n  if(COMPILMENTARYCOLORS == 1)\n   {\n    col3 = vec3(map(0.,1.,1.,0.,col3.x),map(0.,1.,1.,0.,col3.y),map(0.,1.,1.,0.,col3.z));\n   }\n }    \n    \n if(col.z > col.x && col.z > col.y){\n  col2= vec3(col.x,col.y+x,col.z-x);\n  if(COMPILMENTARYCOLORS == 1)\n   {\n    col2 = vec3(map(0.,1.,1.,0.,col2.x),map(0.,1.,1.,0.,col2.y),map(0.,1.,1.,0.,col2.z));\n   }\n }\n    \n if(col.z > col.x && col.z > col.y){\n  col3= vec3(col.x+x,col.y,col.z-x);   \n  if(COMPILMENTARYCOLORS == 1)\n   {\n    col3 = vec3(map(0.,1.,1.,0.,col3.x),map(0.,1.,1.,0.,col3.y),map(0.,1.,1.,0.,col3.z));        \n   }\n }  \n    \n\n //OUTPUT TO SCREEN===============\n\n  col = vec3(col.x,col.y,col.z); \n //movement pattern\n  col *= sin(abs(uv4.x-0.15)*2.+-iTime*2.)*1.;\n   //   col = abs(col);\n  //CHASE pattern\n  if(funcs(iTime+.0,chasespeed)==1.){\n  // col *= chase;\n   }\n      col *= sin(iTime+1.)*0.5+0.5;\n\n    // fout = vec4(col,1.);   \n \n \n\n  //movement pattern\n // col2 = vec3(x);\n  vec3 b1 = vec3(0.0);\n  vec3 a1 = vec3(col2);\n   col2 = vec3(mix(a1, b1, smoothstep(0.0, 1., ov(uv*3.))));        \n       \n  //CHASE pattern  \n  if(funcs(iTime+.33,chasespeed)==1.){\n  //col2 *= chase;\n  }\n    col2 *= sin(iTime+2.)*0.5+0.5;\n    \n    \n    \n    \n    \n// else if(  uv.x > 0.66 && uv.x < 1. && uv.y < uvy && uv.y > 0.0)\n// {\n   // uv.x-=.83;\n   // uv.y-=.25;\n   \t //make it less circulair\n   \t //  uv *= abs(uv-0.)*1.;\n    float\tangle = atan(0.5, 0.6);\n    uv *= 1.;\n    float \tl = length(uv*1.);\n    l= sin((angle*1. - iTime*1.) +l)  ;\n\tcol3*=abs(l);\n     \n     \n  //CHASE pattern  \n     if(funcs(iTime+.66,chasespeed)==1.){\n   //  col3 *= chase;\n     }\n\n          col3 *= sin(iTime+3.)*0.5+0.5;\n\n\n  //fout = vec4(col3,1.0);\n// }\n  \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n   //------------------------------------     \n        \n        colout *=g2*vec3(0.01)*vec3(0,0.,0.)*.10+.15;\n\t\t//col +=g4*vec3(0.002)*vec3(.5)*0.1;   \n        \n        colout+=g3*vec3(0.1)*vec3(mix(col3,col2,sin(iTime*0.5)*0.5+0.5))*.10+.15;   \n colout+=g1*vec3(0.01)*vec3(mix(col3,col2,0.))*.10+.15;;   \n colout+=g4*vec3(0.01)*vec3(col)*.10+.15;   \n\n   vec3 sky = vec3(0., 0., 0.);\ncolout *= mix(sky, colout, 4./(d*d/1./.2*.05+1.0));    \n\n   \n    }\n                     vec3 sky = vec3(1., 1., 1.);\n//col *= mix(sky, col, ./(d*d/.1/.1*1.+1.)); \n      \n // col*=5.;\n  colout=smoothstep(0.0,1.50,colout);\n  colout=pow(colout, vec3(0.4545));\n    \n     \n    \n    \n    fragColor = vec4(colout,1.0);\n    \n    \n    \n}","name":"Image","description":"","type":"image"}]}