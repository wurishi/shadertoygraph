{"ver":"0.1","info":{"id":"3tGBDy","date":"1614946594","viewed":77,"name":"demomenger","username":"mcheshkov","description":"menger sponge for demo 2020.03.05","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["menger"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define inf 1e8\n\nfloat sdBox(vec3 p, vec3 b) {\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat sdCross(vec3 p) {\n    float theta = 0.0*sin(iTime);\n    mat3 r = mat3(\n         cos(theta), sin(theta), 0.,\n        -sin(theta), cos(theta), 0.,\n        0.,         0.,         1.\n    );\n    \n    float rad = 0.3*sin(iTime) + 0.3;\n    rad = 0.0;\n    \n    vec3 irp = inverse(r) * p;\n    float da = sdBox(irp, vec3(inf,1.0,1.0));\n    float db = sdBox(irp, vec3(1.0,inf,1.0));\n    float dc = sdBox(irp, vec3(1.0,1.0,inf));\n    return min(da,min(db,dc)) - rad;\n}\n\nfloat opSmoothIntersection( float d1, float d2, float k ) {\n    float h = clamp( 0.5 - 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) + k*h*(1.0-h); }\n\nvec3 sponge( in vec3 p ) {\n   float d = sdBox(p,vec3(1.0));\n   \n   float s = 1.0;\n   for( int m=0; m<4; m++ ) {\n      vec3 a = mod( p*s, 2.0 )-1.0;\n      s *= 3.0;\n      vec3 r = 1.0 - 3.0*abs(a);\n\n      float c = sdCross(r)/s;\n      //d = max(d,c);\n      d = opSmoothIntersection(d, c, 0.03);\n   }\n\n   return vec3(d,0.0,0.0);\n}\n\nfloat scene(vec3 p) {\n    return sponge(p).x;\n}\n\nvec3 marchScene(vec3 ro, vec3 rd) {\n    for(float t = 0.0; t < 10.0;) {\n        float h = scene(ro + rd*t);\n        if( h<0.001 )\n            return vec3(t, 0., 0.);\n        t += h;\n    }\n    return vec3(-1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n    \n    vec3 ro = 1.1*vec3(2.5*sin(0.25*iTime),1.0+1.0*cos(iTime*.13),2.5*cos(0.25*iTime));\n    \n    vec3 ww = normalize(vec3(0.0) - ro);\n    vec3 uu = normalize(cross( vec3(0.0, 1.0, 0.0), ww ));\n    vec3 vv = normalize(cross(ww, uu));\n    vec3 rd = normalize( uv.x*uu + uv.y*vv + 2.5*ww );\n    \n    vec3 d = marchScene(ro, rd);\n    if (d.x > -1.) {\n        float colorP = pow(1.-d.x/4., 1./2.);\n        fragColor = vec4(0.9*colorP, 0.8*colorP, 0., 0.);\n    }\n}\n","name":"Image","description":"","type":"image"}]}