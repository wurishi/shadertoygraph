{"ver":"0.1","info":{"id":"lfVSWd","date":"1715942263","viewed":69,"name":"Rock Paper Scissors CA","username":"ademdj12","description":"This shader simulates a cellular automata that plays a simplified version of Rock-Paper-Scissors on a grid of cells.","likes":5,"published":1,"flags":32,"usePreview":0,"tags":["colorful","cell","celllularautomata"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n    logic in bufferA\n    for more information:\n        https://twotwelve.uk/blog/rock-paper-scissors/\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nvec4 getNeighbour(sampler2D channel,vec2 coord){\n    return texelFetch(channel, ivec2(coord), 0);\n}\n\nvec4 getNeighbour(sampler2D channel,vec2 coord, vec2 offset){\n    return texelFetch(channel, ivec2(coord + offset), 0);\n}\n\nfloat rand(vec2 co){ return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453); }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 currentVal = getNeighbour(iChannel0,fragCoord);\n\n    vec4 neighbourhoodSum = getNeighbour(iChannel0, fragCoord, vec2(-1.0, -1.0))\n                        + getNeighbour(iChannel0, fragCoord, vec2(-1.0,  0.0))\n                        + getNeighbour(iChannel0, fragCoord, vec2(-1.0,  1.0))\n                        + getNeighbour(iChannel0, fragCoord, vec2( 0.0, -1.0))\n                        + getNeighbour(iChannel0, fragCoord, vec2( 0.0,  1.0))\n                        + getNeighbour(iChannel0, fragCoord, vec2( 1.0, -1.0))\n                        + getNeighbour(iChannel0, fragCoord, vec2( 1.0,  0.0))\n                        + getNeighbour(iChannel0, fragCoord, vec2( 1.0,  1.0));\n                        \n    if (currentVal.r > 0.5 && neighbourhoodSum.g >= 3.0) {\n        fragColor = vec4(0.0, 1.0, 0.0, 1.0);\n    } else if (currentVal.g > 0.5 && neighbourhoodSum.b >= 3.0) {\n        fragColor = vec4(0.0, 0.0, 1.0, 1.0);\n    } else if (currentVal.b > 0.5 && neighbourhoodSum.r >= 3.0) {\n        fragColor = vec4(1.0, 0.0, 0.0, 1.0);\n    } else if (currentVal.r > 0.5) {\n        fragColor = vec4(1.0, 0.0, 0.0, 1.0);\n    } else if (currentVal.g > 0.5) {\n        fragColor = vec4(0.0, 1.0, 0.0, 1.0);\n    } else if (currentVal.b > 0.5) {\n        fragColor = vec4(0.0, 0.0, 1.0, 1.0);\n    }\n    // random init\n    if(iFrame == 0){\n        float b = rand((fragCoord + iDate.xy + iDate.wz)*iTime);\n        if(b < 0.2){\n            fragColor = vec4(1.0, 0.0, 0.0, 1.0);\n        }else if(b >= 0.2 && b < 0.7){\n            fragColor = vec4(0.0, 1.0, 0.0, 1.0);\n        }else if(b >= 0.7){\n            fragColor = vec4(0.0, 0.0, 1.0, 1.0);\n        }\n    }\n    \n    \n    \n}","name":"Buffer A","description":"","type":"buffer"}]}