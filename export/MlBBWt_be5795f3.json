{"ver":"0.1","info":{"id":"MlBBWt","date":"1517520774","viewed":385,"name":"Pentagram","username":"lsdlive","description":"Trying to practice 2d shaders.\n\nThus, I'm now in the small pentagram club.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["pentagram"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define PI 3.14159265\n#define TWO_PI 2.*PI\n#define pentagon(uv) polygon(uv, 5.)\n\nmat2 r2d(float a) {\n\tfloat c = cos(a), s = sin(a);\n\treturn mat2(c, s, -s, c);\n}\n\n// from: https://thndl.com/square-shaped-shaders.html\nfloat polygon(vec2 uv, float n) {\n\tfloat a = atan(uv.x, uv.y) + PI;\n\tfloat r = TWO_PI / n;\n\treturn cos(floor(.5 + a / r) * r - a) * length(uv);\n}\n\nfloat inner(float dist, float radius, float size) {\n\treturn abs(dist - radius) * size;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec2 uv = (fragCoord - .5*iResolution.xy) / iResolution.y;\n\n\tuv *= r2d(sin(iTime));\n\n\t// pentagram mostly inspired from nimitz:\n    // https://www.shadertoy.com/view/XtX3DH\n\t\n    float pen1 = pentagon(uv * vec2(1, -1));\n\tfloat pen2 = pentagon(uv);\n\tfloat d = inner((pen1 - pen2 * .619) * 4.2, .3, .8);\n\n\t// circle\n\td = min(d, inner(length(uv), .35, 2.));\n\n\t// pentagon\n\td = min(d, inner(pen2, .123, 2.5));\n\n\tfragColor = vec4(smoothstep(.1, .11, d));\n}","name":"Image","description":"","type":"image"}]}