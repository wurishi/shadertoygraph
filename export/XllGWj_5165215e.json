{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"#define time iTime\n#define EPSILON .001\nconst float PI=3.14159265;\nconst int MAX_ITER = 120;\nvec3 lightDir    =normalize(vec3(1., 1., -1.));\nvec4 col1 = vec4(0.155, 0., 1., 1.);\nvec4 col2 = vec4(0., 0.86, 1., 1.);\n\nstruct mat\n{\n  float typeMat;        \n     \n};\nmat materialMy = mat(0.0);\nvec3 colGlow = vec3(0.);\nfloat alfa = 0.3;\n//-----------------------------\nvec3 getNormal(in vec3 p);\nfloat renderFunction(in vec3 pos);\nfloat render(in vec3 posOnRay, in vec3 rayDir);\nvec4 getColorPixel(inout vec3 ro, vec3 rd, inout vec3 normal, float dist, float typeColor);\n//-----------------------------\n//---------------------------------------------\nvec3 rotationCoord(vec3 n)\n{\n vec3 result;\n //--------------------------------------------\n   float t = time * 0.1;\n   vec2 sc = vec2(sin(t), cos(t));\n   mat3 rotate;\n  \n    mat3 rotate_x = mat3(  1.0,  0.0,  0.0,\n                          0.0, sc.y,-sc.x,\n                          0.0, sc.x, sc.y);\n   mat3 rotate_y = mat3( sc.y,  0.0, -sc.x,\n                         0.0,   1.0,  0.0,\n                         sc.x,  0.0,  sc.y);\n   mat3 rotate_z = mat3( sc.y, sc.x,  0.0,\n                        -sc.x, sc.y,  0.0,\n                         0.0,  0.0,   1.0);\n   rotate = rotate_z * rotate_y * rotate_z;                \n  result = n * rotate;\n  return result;\n}\n//----------------------------------------------------\n//------------------------------------------\nvec2 rot(vec2 p,float r){\n  vec2 ret;\n  ret.x=p.x*cos(r)-p.y*sin(r);\n  ret.y=p.x*sin(r)+p.y*cos(r);\n  return ret;\n}\n//------------------------------------------\nvec2 rotsim(vec2 p,float s)\n{\n  vec2 ret=p;\n  ret=rot(p,-PI/(s*2.0));\n  ret=rot(p,floor(atan(ret.x,ret.y)/PI*s)*(PI/s));\n  return ret;\n}\n//------------------------------------------\n\n//Ð½Ð° Ð¾ÑÐ½Ð¾Ð²Ðµ https://www.shadertoy.com/view/ltXGRj\nfloat rays(in vec3 p, in vec2 size, in float r)\n{\n   float rad=length(p);\n   return (length(p.xz)- size.x + size.y * (rad - r)); \n}\nfloat astra(in vec3 p, in vec2 kol, in vec2 size, in float r)\n{\n   p.xy+=sin(p.yx*(6. + 2.*sin(time*0.1))-time*2.0)* 0.1;\n   p.xy = rotsim(p.xy, kol.x);\n   p.zy = rotsim(p.zy, kol.y);\n   return rays(p, size, r);\n}\n//--------------------------------------------------\nfloat smin( float a, float b, float k ) \n{\n   float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n   return mix( b, a, h ) - k*h*(1.0-h);\n}\n//------------------------------------------\nfloat distMat(inout float curDist, float dist, in float typeMat)\n{\n   float res = curDist;\n   if (dist < curDist) \n   {\n      materialMy.typeMat     = typeMat;\n      res                    = dist;\n     return res;\n   }\n   return curDist;\n}\n\n//--------------------------------------------------\nfloat myObject(in vec3 p)\n{\n   float d =  1.0;\n   materialMy.typeMat = 0.0;\n   vec3 pos = p;\n   float r = 0.;\n\n   pos = rotationCoord(pos);\n   r = 5. * sin(time  * 0.2)*0.5+0.5;// sin(time )\n   d =  distMat(d,   astra(pos, vec2(10., 10.), vec2(0.16, 0.04), r),  2.);   \n\n   return d; \n}\n//-------------------------------------------------\n// Ð²Ñ‹Ð²Ð¾Ð´ Ð¾Ð±ÑŠÐµÐºÑ‚Ð°\nfloat renderFunction(in vec3 pos)\n{\n    return  myObject(pos);    \n}\n//------------------------------------------------- \nvec3 getNormal(in vec3 p)\n{\n\nconst float precis = 0.001;\n    vec3  eps = vec3(precis,0.0,0.0);\n    vec3 nor;\n    nor.x = renderFunction(p+eps.xyy) - renderFunction(p-eps.xyy);\n    nor.y = renderFunction(p+eps.yxy) - renderFunction(p-eps.yxy);\n    nor.z = renderFunction(p+eps.yyx) - renderFunction(p-eps.yyx);\n    return normalize(nor);\n\n}\n//-------------------------------------------------\nvec3 getLighting(in vec3 ro, in vec3 rd ,in vec3 norm, in vec3 lightDir, in vec4 color)\n{\n    vec3 col = vec3(0.);\n\n    vec3 ref = reflect( rd, norm );\n    float rim = 0.04+0.96*pow( clamp( 1.0 + dot(norm,rd), 0.0, 1.0 ), 4.0 );\n    col += mix( vec3(0.05,0.02,0.0), 1.2*vec3(0.8,0.9,1.0), 0.5 + 0.5*norm.y );\n    col *= 1.0 + 1.5*vec3(0.7,0.5,0.3)*pow( clamp( 1.0 + dot(norm,rd), 0.0, 1.0 ), 2.0 );\n    col += 5. *clamp(0.3 + 2. * norm.y, 0.0,1.0);//*(rim);\n    col *= color.rgb;\n    col = pow( col, vec3(0.5) );\n  \n//   vec2 q =  fragCoord.xy / iResolution.xy ;    \n //  col *= -0.16 + 0.68 * pow( 16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.15 );  \n    return col ;    \n\n}\n\n//----------------------------------------------------------------------\nvec4 getColorPixel(inout vec3 ro, vec3 rd, inout vec3 normal, float dist, float typeColor)\n{\n\n  vec4 color = vec4(1.);\n  vec3 hitPos = ro + rd * dist;\n  normal = normalize(getNormal(hitPos));  \n//----------------------------------\n   if (materialMy.typeMat == 0.0) \n   {\n       vec3 col = mix( vec3(1., 0., 0.42 ), vec3(0., 0.3, 1), 0.5  + 0.5 * rd.y );\n       color.rgb =  col ;\n   } \n   else if (materialMy.typeMat == 1.0)    \n        color.rgb = texture( iChannel1, 0.15 * hitPos.xz ).xyz;\n   else if (materialMy.typeMat == 2.)  \n        color.rgb = colGlow;\n        \n   if(materialMy.typeMat !=0. )\n      color.rgb =  getLighting(hitPos, rd, normal, lightDir, color);\n   \n    ro = hitPos;\n    \n    color.rgb = mix(color.rgb, colGlow, 0.5);\n  return color;\n}\n\n//-------------------------------------------------\n//https://www.shadertoy.com/view/MtlGzX\nvec4 colorMix(in float dist, in vec3 col1, in vec3 col2)\n{\n    float opacity = smoothstep(0.3, .0, dist);\n//    float opacity = smoothstep(0.4, .0,sqrt( dist));\n    opacity *= opacity;\n    return vec4(mix(vec3(col1), vec3(col2), opacity), opacity);\n}\n\nfloat render(in vec3 posOnRay, in vec3 rayDir)\n{ \n  float t = 0.0;\n  float maxDist = 40.;\n  float d = 0.1;  \n  vec3 scenecol = vec3(0.);\n  float opacity = 0.;\n  vec3 color1 = vec3(0.), color2 = color1;\n  float k =sin(time  * 0.3)*0.5+0.5;      \n  for(int i=0; i<MAX_ITER; ++i)\n  {\n     if ( opacity > .95 ) break;\n\n    if (abs(d) <EPSILON || t > maxDist) \n         break;\n    t += d;\n    vec3 ro = posOnRay + t*rayDir;\n    d = renderFunction(ro);     \n    \n    //----------------------\n    if(materialMy.typeMat == 2.)\n    {\n        float  clarity = smoothstep(0.5, 0., sqrt( d ));\n        vec4 currCol = vec4(mix(vec3(col1), vec3(col2),  clarity *  clarity),  clarity);\n        color1 += (1. -  clarity) * currCol.rgb * currCol.a ;\n       \n        vec4 currCol1 = colorMix(d, vec3(1., 0.38, 0.48), vec3(1., 0.66, 0.));\n        color2 +=  (1. - opacity) * currCol1.rgb * currCol1.a;\n        opacity +=  (1. - opacity) * currCol.a;          \n        colGlow = mix(color1,color2,k);\n    }\n    \n  }\n   return t;\n}\n//------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 pos     =  fragCoord.xy / iResolution.xy * 2. - 1.;\n    pos.x *= iResolution.x / iResolution.y;  \n\n    float t = time* 0.1;\n    vec3 camP = vec3(0., 0, 10.);\n    vec3 camUp = vec3(0. , 1., 0.);\n    vec3 camDir = normalize(-camP);\n    vec3 u = normalize(cross(camUp,camDir));\n    vec3 v = cross(camDir,u);\n    vec3 rayDir = normalize(camDir * 2. + pos.x * u + pos.y * v);  \n\n   vec4 color    = vec4(1.0);\n    vec3 normal   = vec3(1.0);\n    vec3 posOnRay = camP; \n    float path = 0.;\n  //--------------------------- \n     path =  render(posOnRay, rayDir);  \n     color = getColorPixel(posOnRay, rayDir, normal, path, materialMy.typeMat); \n    // ----------------------------------------------------------------------\n    // POST PROCESSING\n    // Gamma correct\n     color.rgb = pow(color.rgb , vec3(0.45));\n    // Contrast adjust - cute trick learned from iq\n     color.rgb  = mix( color.rgb , vec3(dot(color.rgb ,vec3(0.333))), -0.6 );\n     color.a = 1.;\n     fragColor =  color;\n\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XllGWj","date":"1425220348","viewed":263,"name":"Astra","username":"Lio","description":"I continue to experiment with color, luminosity, shape ...\nsource : https://www.shadertoy.com/view/MtlGzX\n","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["raytracing","glow","smoothstep"],"hasliked":0,"parentid":"","parentname":""}}