{"ver":"0.1","info":{"id":"ltVGRz","date":"1473212657","viewed":1077,"name":"Galaxy V3","username":"A2K","description":"Shadertoy planet? We must go farther.","likes":20,"published":1,"flags":0,"usePreview":1,"tags":["procedural","galaxy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"precision highp float;\n\nfloat snoise(vec2 v)\n{\n    return texture(iChannel0, v).r;\n}\n\nconst mat2 m2 = mat2(0.8,-0.6,0.6,0.8);\n\nfloat fbm( in vec2 p ){\n    float f = 0.0;\n    f += 0.5000*snoise( p ); p = m2*p*2.02;\n    f += 0.2500*snoise( p ); p = m2*p*2.03;\n    f += 0.1250*snoise( p ); p = m2*p*2.01;\n    f += 0.0625*snoise( p );\n\n    return f/0.9375;\n}\n\nfloat dirt(vec2 p) {\n    \n    vec2 pos = p + iTime * .0000001;\n    \n    float d = 1.0 - max(pow(length(pos - 0.5) / 0.5, 4.0) * (abs(pos.y - 0.5) * 100.0), 0.0);\n    \n    float S = 1.0;\n\tfloat n = snoise(pos / S);\n    float n2 = snoise((pos + 0.1) / S * 2.0);\n    float n3 = snoise((pos + 0.2) / S * 3.0);\n    float n4 = snoise((pos + 0.2) / S * 4.0);\n    n = pow(n * n2 * n3 * n4, 2.0);\n\n    return max(n * d, 0.0);\n}\n\nvec3 bgGlow(vec2 pos)\n{\n    vec3 color = vec3(0.7, 0.65, 0.6);\n    \n    float intensity = 1.0 - pow(length(0.5 - pos.y) / 0.5, 8.0);\n    \n    intensity = clamp(intensity,0.0,1.0);\n    intensity /= 4.0;\n    return color * intensity * 0.1;\n}\n\nvec3 brightClouds(vec2 pos)\n{\n    vec3 c = vec3(0.4, 0.35, 0.36);\n    float intensity = pow(1.0 - length(0.5 - pos), 2.5);\n    \n    float ycenter = 1.0 - abs(0.5 - pos.y);\n    intensity *= pow(ycenter, 10.0);\n    \n    return c * fbm(pos / 20.0) * intensity * 5.0 * fbm(pos / 10.0) ;\n}\n\nvec3 makeStars(vec2 pos)\n{\n    pos += snoise(pos) / 100.0;\n    float S = 1.0;\n\tfloat n = snoise(pos / S * 100.0);\n    float n2 = snoise((pos + 0.1) / S * 290.0);\n    float n3 = snoise((pos + 0.2) / S * 30.0);\n    float n4 = snoise((pos + 0.2) / S * 10.0);\n    n = pow(n * n2 * n3 * n4, 2.0);\n    return vec3(n);\n}\n\nvec3 darkClouds(vec2 pos)\n{\n    vec3 c = vec3(0.2, 0.23, 0.3);\n    \n    float intensity = 1.0 - abs(0.5 - pos.y);\n\n    float ycenter = 1.0 - abs(0.5 - pos.y);\n    intensity *= pow(ycenter, 8.0);\n\treturn c * fbm(pos / 100.0) * 1.0 * intensity; \n}\n\nfloat dirtClouds(vec2 pos)\n{\n    float qwe = max(1./pow(abs(0.5 - max(pos.y, 1.0)), 1.5), 1.0); \n\tfloat intensity = 1.0 - abs(0.5 - pos.y);\n\treturn (fbm(pos * 0.1) * qwe + 1.0) / 2.0 * pow(intensity, 8.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy + iTime * .00001;\n    \n\tfragColor.rgb = bgGlow(uv) + makeStars(uv) +  (brightClouds(uv) + darkClouds(uv)) / 0.5 + dirt(uv);\n    //fragColor.rgb = makeStars(uv);\n    fragColor.rgb = mix(fragColor.rgb, vec3(0.125, 0.1, 0.1), dirtClouds(uv) * 0.75 * pow(length(uv * 2.0 - 1.0), 0.25));\n    \n    fragColor.a = 1.0;\n}\n","name":"Image","description":"","type":"image"}]}