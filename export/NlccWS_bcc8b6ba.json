{"ver":"0.1","info":{"id":"NlccWS","date":"1660400890","viewed":48,"name":"Chebyshev Polynomials and Roots","username":"Envy24","description":"https://en.wikipedia.org/wiki/Chebyshev_polynomials\nFinding roots for this polynomials is easy.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["basis","chebyshev","roots","polynomials","orthogonal"],"hasliked":0,"parentid":"st3yzs","parentname":"Gauss-Legendre Quadrature"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define R                           iResolution\n#define AR                        ( R.x / R.y )                      // Aspect ratio (AR > 1.0).\n#define TO_CENTERED_NDC(SC)       ( ((SC)+(SC)-R.xy) / R.y )         // in range x=[-AR; AR], y=[-1.0; 1.0]\n#define UNIT                      (  3.0 / R.y  )\n#define SMAA(x)                     ( smoothstep(UNIT, 0., x) )\n#define LMB_IS_HOLD               ( iMouse.z > 0.0 )\n#define PI                          3.1415926535897932\n#define TO_RAD                      0.017453292519943295        // Convert degrees to radians\n#define NZMX                      ( (iMouse.x+iMouse.x-R.x) / R.x )  // in range [-1.0; 1.0]\n\nfloat vertical_line(vec2 NDC, float x0) { return SMAA(abs(NDC.x-x0)); }\nfloat horizontal_line(vec2 NDC, float y0) { return SMAA(abs(NDC.y-y0)); }\nfloat y_axis(vec2 NDC) { return SMAA(abs(NDC.x)); }\nfloat x_axis(vec2 NDC) { return SMAA(abs(NDC.y)); }\nfloat draw_func(vec2 NDC, float f, float dfdx)\n{\n    float df   = NDC.y - f;\n    return SMAA(abs(df) / sqrt(1.0 + dfdx * dfdx));\n}\n\nfloat normalization_weight(float x) { return 1. / sqrt(1. - x*x); }\n\n/* Chebyshev polynomials of first kind by reccurent formula. */\nfloat T(int k, float x)\n{\n    float T_p = x, T_pp = 1.;\n    \n    if (k == 0) { return T_pp; }\n    else if (k == 1) { return T_p; }\n    \n    float T = 2.*x*T_p - T_pp;\n    for (int i = 3; i <= k; ++i)\n    {\n        T_pp = T_p;\n        T_p = T;\n        T = 2.*x*T_p - T_pp;\n    }\n    \n    return T;\n}\n\n/* Chebyshev polynomials of second kind by reccurent formula. */\nfloat U(int k, float x)\n{\n    float U_p = 2.*x, U_pp = 1.;\n    \n    if (k == 0) { return U_pp; }\n    else if (k == 1) { return U_p; }\n    \n    float U = 2.*x*U_p - U_pp;\n    for (int i = 3; i <= k; ++i)\n    {\n        U_pp = U_p;\n        U_p = U;\n        U = 2.*x*U_p - U_pp;\n    }\n    \n    return U;\n}\n\nfloat fderivT(int k, float x) { return float(k)*(U(k-1, x)); }\nfloat fderivU(int k, float x) { return (float(k+1)*T(k+1, x) - x*U(k, x)) / (x*x - 1.); }\n\nvoid extremaT(\n    inout float xs[16], \n    in float order)\n{\n    order = clamp(order, 0., 15.);\n\n    float inv = PI / order;\n    for (float i = 0.; i <= order; i += 1.)\n    {\n        xs[int(i)] = cos(i * inv);\n    }\n}\n\nvoid calculateRootsForT(\n    inout float xs[16],\n    in float order)\n{\n    order = clamp(order, 0., 15.);\n\n    float inv = PI / order;\n    for (float i = 0.; i < order; i += 1.)\n    {\n        xs[int(i)] = cos((i + 0.5) * inv);\n    }\n}\n\nvoid calculateRootsForU(\n    inout float xs[16],\n    in float order)\n{\n    order = clamp(order, 0., 15.);\n\n    float inv = PI / (order + 1.);\n    for (float i = 0.; i < order; i += 1.)\n    {\n        xs[int(i)] = cos((i + 1.) * inv);\n    }\n}\n\n/* 1st kind. */\n#define func(order, x)   ( T(order, x) )\n#define dfdx(order, x)   ( fderivT(order, x) )\n#define roots(xs, order) ( calculateRootsForT(xs, order) )\n/* 2nd kind. *\n#define func(order, x)   ( U(order, x) )\n#define dfdx(order, x)   ( fderivU(order, x) )\n#define roots(xs, order) ( calculateRootsForU(xs, order) )\n/**/\n\nvoid mainImage( out vec4 O, in vec2 SC )\n{\n#define GSCALE 1.5\n#define YSCALE 1.0\n#define OFFSET vec2(0., 0.0)\n\n    vec2 NDC = \n        LMB_IS_HOLD ?\n            GSCALE*(TO_CENTERED_NDC(SC-(iMouse.xy-R.xy*0.5))+OFFSET) :\n            GSCALE*(TO_CENTERED_NDC(SC)+OFFSET);\n            \n    vec3 color = vec3(1.);\n         color -= x_axis(NDC); color -= y_axis(NDC);\n         //color -= horizontal_line(NDC, -0.5);\n         //color.rg -= vertical_line(NDC, 1.); color.rg -= vertical_line(NDC, -1.);\n\n    float order = 0., max_order = 32.;\n    transition(iFrame, 20, order);\n    order = mod(order, max_order);\n    \n    if (order < max_order * 0.5)\n    {       \n        float dx = 0.01,\n              y = func(int(order), NDC.x),\n              dydx = dfdx(int(order), NDC.x);\n\n        vec3 c = vec3ui3hash(uint(order), uint(order+1.), uint(order+2.));\n             c = (c + 1.) * 0.5;\n\n        color = mix(color, c, draw_func(NDC, YSCALE*y, YSCALE*dydx));\n        \n        float xs[16];\n        \n        roots(xs, order);\n        \n        for (float i = 0.; i < order; ++i)\n        {\n                y = func(int(order), xs[int(i)]);\n            color = mix(color, vec3(1, 0, 1), SMAA(diskSDF_L2(NDC, vec2(xs[int(i)], y), UNIT*2.5)));\n        }\n    }\n    else \n    {\n        order -= max_order * 0.5;\n        for (float i = 0.; i < max(1., order); i += 1.)\n        {\n            float dx = 0.01,\n                  y = func(int(i), NDC.x),\n                  dydx = dfdx(int(i), NDC.x);\n\n             vec3 c = vec3ui3hash(uint(i), uint(i+1.), uint(i+2.));\n                  c = (c + 1.) * 0.5;\n\n             color = mix(color, c, draw_func(NDC, YSCALE*y, YSCALE*dydx));\n        }\n    }\n        \n    O = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/* Returns sine modulated value in range [min, max]. */\nfloat sinOSC(in float min, in float max, in float T)\n{\n    float v = (sin(T) + 1.0) * 0.5; // map T to [0.0, 1.0];\n    return min + v * (max - min);   // map T to [min, max];\n}\n\nfloat diskSDF_L2(vec2 NDC, vec2 C, float R)\n{\n    return length(C - NDC)-R;\n}\n\n/* Every num_of_frames returns true \nand number of detected transitions. */\nbool transition(\n    in int frame,\n    in int num_of_frames,\n    inout float quotent)\n{\n    // Convert to float.\n    float f = float(frame == 0 ? 1 : frame);\n    float inv = 1.0 / float(num_of_frames);\n    \n    // Calculate previous and current quotents.\n    float prev = floor(f * inv);\n    quotent = floor((f - 1.0) * inv);\n    \n    return quotent < prev;\n}\n\nfloat segmentSDF_L2(\n    in vec2 NDC,\n    in vec2 B,   \n    in vec2 E)\n{\n    vec2 BP = NDC - B, BE = E - B;\n    return length(BP - BE * clamp(dot(BP, BE) / dot(BE, BE), 0.0, 1.0));\n}\n\n/* \n    Returns random vec3([-1.0; 1.0], [-1.0; 1.0], [-1.0; 1.0]).\n*/\nvec3 vec3ui3hash(\n    const uint x,\n    const uint y,\n    const uint z)\n{\n    // Pick some enthropy source values.\n    // Try different values.\n    const uint entropy0 = 1200u;\n    const uint entropy1 = 4500u;\n    const uint entropy2 = 6700u;\n    const uint entropy3 = 8900u;\n\n    // Use linear offset method to mix coordinates.\n    uint value0 = z * entropy3 * entropy2 + y * entropy2 + x;\n    uint value1 = y * entropy3 * entropy2 + x * entropy2 + z;\n    uint value2 = x * entropy3 * entropy2 + z * entropy2 + y;\n\n    // Calculate hash.\n\tvalue0 += entropy1; value0 *= 445593459u; value0 ^= entropy0;\n    value1 += entropy1; value1 *= 445593459u; value1 ^= entropy0;\n    value2 += entropy1; value2 *= 445593459u; value2 ^= entropy0;\n\n    // 2.0f / 4294967295.0f = 4.6566128730773926e-10\n\n    return vec3(\n        float(value0 * value0 * value0) * 4.6566128730773926e-10f - 1.0f,\n        float(value1 * value1 * value1) * 4.6566128730773926e-10f - 1.0f,\n        float(value2 * value2 * value2) * 4.6566128730773926e-10f - 1.0f);\n}","name":"Common","description":"","type":"common"}]}