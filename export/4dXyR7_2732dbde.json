{"ver":"0.1","info":{"id":"4dXyR7","date":"1487453711","viewed":169,"name":"DFT test","username":"akohdr","description":"Playing around visualizing some signal generation / processing.","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["fft","audio","dft"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Created by Andrew Wild - akohdr/2017\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// Displays audio waveform and spectrum from signal generated in Buf A\n\n#define TX(x) texture(iChannel0, vec2(x,1))\n\nvoid mainImage( out vec4 k, in vec2 p )\n{\n\tvec2  a = vec2(0),\n         uv = p / iResolution.xy;\n    \n    const float n = 512.;\n    float fi = 6.28319 * uv.x/2.-.5;\n\n    for( float j=0.; j<n; j++) {\t\t\t\t// DFT loop\n\t\tfloat u = j / n,\t\t\t\t\t\t// unit variable\n\t\t\t  w = j * fi,\t\t\t\t\t\t// angular pos.\n        \t  x = length(u-.5)>.3 ? 0. :\t\t// zero pad rect. window\n     \t\t\t\tTX(u+u-.5).x-.5; \t\t\t// sample Buf A signal\n        \n        a += x * sin(vec2(w-1.57, w));\t\t\t// sample weighted cos/sin accumulator\n    }\n\t\n\tfloat y = length(a/4.);\n    \n\tk = uv.y>.5 ? \n\t    vec4(1.-smoothstep(.0,.1, \t\t\t\t// wave (top)\n                  abs(.25 - uv.y + TX(uv.x)))) :\t\t\n        y/4.>uv.y ? vec4( y, .8/y, 0, 1) : \t\t// spectrum (bottom)\n    \t\t\t\tvec4(0,0,1.-2.*uv.y,1);\t\t// background fade\n    \n    if(iMouse.z>0.) k = 2.*TX(uv.x);\t\t\t// render Buf A\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4df3Rn","filepath":"/media/a/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","previewfilepath":"/media/ap/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Created by Andrew Wild - akohdr/2017\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// Generates signal from number of oscillators and audio source\n\n#define T iTime\n#define OSC(f) ((1.+sin(6.28319 * (f) * t))/2.)\n\nvoid mainImage( out vec4 k, in vec2 p )\n{\n    vec2 uv = p / iResolution.xy;\n    \n    if(uv.y<.99) k = vec4(0); else\t// optimization\n    {\n\n        float t = uv.x + T/3.;\n\n        k = vec4( \n            .1  * OSC(30.+7. * sin(T)) +\t\t\t// sweep\n            .1  * OSC(55.) +\t\t\t\t\t\t// CW\n            .05 * OSC(75.) * (1.5+sin(T))\t\t\t// AM\n        );\n\n        k += .1*OSC(30.) * texture(iChannel0, uv);\t// mix upshifted audio\n\n        k += .33;\t\t\t\t\t\t\t\t\t// DC removal\n    }\n}\n","name":"Buf A","description":"","type":"buffer"}]}