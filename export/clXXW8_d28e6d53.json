{"ver":"0.1","info":{"id":"clXXW8","date":"1674636943","viewed":108,"name":"bounding box bvh","username":"lambwww","description":"BVH的实现，绘制了简单的图形，思路来源：https://www.shadertoy.com/view/XlVXDz","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["bvh"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//传入二分之一的长宽高（从中心点外扩的长方体\nbool TestBoxTrace(vec3 ro,vec3 rd,vec3 size,vec3 center)\n{\n    float tmin=0.;\n    float tmax=100000.;\n    vec3 dmin=center-size;\n    vec3 dmax=center+size;\n    // tx=(d−ROx)/RDx \n    vec3 temp1=(dmin-ro)/rd;\n    vec3 temp2=(dmax-ro)/rd;\n    \n    vec3 t1=min(temp1,temp2);\n    vec3 t2=max(temp1,temp2);\n    \n    tmin=max(max(t1.x,t1.y),max(t1.z,tmin));\n    tmax=min(min(t2.x,t2.y),min(t2.z,tmax));\n    if(tmin<tmax && tmax>=0.)\n        return true;\n    return false;\n}\n//三角形相交\nbool TestTriangleTrace(vec3 ro,vec3 rd,inout float t,out vec3 normal,vec3 a,vec3 b,vec3 c)\n{\n    vec3 e1=b-a;\n    vec3 e2=c-a;\n    vec3 s=ro-a;\n    vec3 s1=cross(rd,e2);\n    vec3 s2=cross(s,e1);\n    \n    float index=1./dot(s1,e1);\n    float temp=dot(s2,e2)*index;\n    float u=dot(s1,s)*index;\n    float v=dot(s2,rd)*index;\n    if(u>0.0 && v>0.0 && u+v<1.)\n    {\n        if(temp<t && temp>0.001)\n        {\n            t=temp;\n            normal=normalize(cross(b-a,c-a));\n            return true;\n        }\n    }\n    return false;\n}\nfloat flag;\nfloat SceneTrace(vec3 ro,vec3 rd,out vec3 normal)\n{\n    float t=100000.0;\n    //bvh\n    //根据一个个的三角形来分盒子进行检测\n    if(TestBoxTrace(ro,rd,vec3(3.,5.0,3.),vec3(0.,0.,13.)))\n    {\n        flag+=1.0;\n        if(TestBoxTrace(ro,rd,vec3(3.,2.5,3.),vec3(0.,2.5,13.)))\n        {\n            flag+=1.0;\n            TestTriangleTrace(ro,rd,t,normal,vec3(-3.0,0.0,10.0),vec3(0.0,5.0,13.0),vec3(3.0,0.0,10.));\n            TestTriangleTrace(ro,rd,t,normal,vec3(3.0,0.0,10.),vec3(0.0,5.0,13.0),vec3(3.0,0.0,16.));\n            TestTriangleTrace(ro,rd,t,normal,vec3(3.0,0.0,16.0),vec3(0.0,5.0,13.0),vec3(-3.0,0.0,16.));\n            TestTriangleTrace(ro,rd,t,normal,vec3(-3.0,0.0,16.0),vec3(0.0,5.0,13.0),vec3(-3.0,0.0,10.));\n        }\n        if(TestBoxTrace(ro,rd,vec3(1.,2.0,2.),vec3(0.,-2.0,13.)))\n        {\n            flag+=1.0;\n            TestTriangleTrace(ro,rd,t,normal,vec3(-1.0,0.0,12.0),vec3(1.0,0.0,12.0),vec3(0.0,-4.0,13.));\n            TestTriangleTrace(ro,rd,t,normal,vec3(1.0,0.0,12.0),vec3(1.0,0.0,14.0),vec3(0.0,-4.0,13.));\n            TestTriangleTrace(ro,rd,t,normal,vec3(1.0,0.0,14.0),vec3(-1.0,0.0,14.0),vec3(0.0,-4.0,13.));\n            TestTriangleTrace(ro,rd,t,normal,vec3(-1.0,0.0,14.0),vec3(-1.0,0.0,12.0),vec3(0.0,-4.0,13.));\n        }\n    }\n    return t;\n    \n}\nmat2 rot(float angle){\n    float c = cos(angle);\n    float s = sin(angle);\n    return mat2(c,-s,s,c);\n}  \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv=(2.*fragCoord-iResolution.xy)/iResolution.y;\n    vec3 ro=vec3(6.0*sin(iTime),0.0,.1);\n    \n    \n    vec3 rd=normalize(vec3(uv,1.));\n    vec3 normal;\n    float t=SceneTrace(ro,rd,normal);\n    \n    vec3 color=vec3(0.5,0.5,0.5);\n    //raymarching的思想\n    if(t<100000.0)\n    {\n        vec3 point=ro+rd*t;\n        vec3 lightDir = normalize(vec3(5.,.9,.3)-point);\n        color = max(.1 + .9*dot(normal,lightDir),0.)*vec3(1.,1.,1.);\n    }\n    color+=.05*flag;\n    fragColor=vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}