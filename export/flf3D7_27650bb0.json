{"ver":"0.1","info":{"id":"flf3D7","date":"1622195426","viewed":86,"name":"Camera rotation","username":"soya228","description":"Mashpraph task 2.1","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["mashgraph"],"hasliked":0,"parentid":"sdXSR8","parentname":"Guseynov S.S. 316"},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0,uv) ;/// float(iFrame + 1); //отключение накопления для вращения\n    //fragColor = texture(iChannel0,uv) / float(iFrame + 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3Rr","filepath":"/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","previewfilepath":"/media/ap/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float INF = 1e10;\nvec3 CAMERA_POS = vec3(1,1.2,-6); //начальная позиция камеры - вектор из x,y,z \nvec3 LIGHT1_POS = vec3(-2.2,1.2,4); // позиция ист света \nconst float LIGHT1_RADIUS = 0.5; //радиус источника света\nvec3 LIGHT1_COLOR = vec3(1,1,1); //цвет ист св \nvec3 LIGHT2_POS = vec3(3,1.5,-1);  // позиция ист св 2\nconst float LIGHT2_RADIUS = 0.55; //радиус источника света 2\nconst vec3 LIGHT2_COLOR = vec3(0.1,0.7,0.7); //цвет источника света 2\nconst int EMISSION = 0; \nconst int DIFFUSE = 1; \nconst int REFLECTION = 2;\nconst int REFRACTION = 3; \nconst float OBJ_RADIUS = 1.0; //это для увелечения фигуры\nconst float GLASS_N = 1.5; //коэф преломления стекла\nconst float AIR_N = 1.0; // коэф преломления воздуха\nconst float DIAMOND_N = 2.5; // алмаза \nconst float WATER_N = 1.0;\nconst float EPS = 0.0000001; //для трассировки треугольника для трассировки октаэдра\n\nvec3 randDir; \n\nstruct SphereObj {\n    vec3 pos;\n    float radius;\n    vec3 color;\n};\n\n\n//0.125 - радиус вкрапления\nSphereObj sphereIn[5] = SphereObj[5](\n    SphereObj(vec3(0, 0, 0), 0.125, vec3(1, 0.1, 0.75)), \n    SphereObj(vec3(0.29, 0.025, 0.35), 0.125, vec3(1, 0.5, 0.3)),\n    SphereObj(vec3(0, -0.7, 0.35), 0.125, vec3(0.1, 0.8, 0.2)),\n    SphereObj(vec3(0.2, 0.5, 0), 0.125, vec3(0.6, 1, 0.9)),\n    SphereObj(vec3(-0.35, -0.3, 0), 0.125, vec3(0.6, 0.1, 1))\n);\n\n//трассировка пола\nfloat tracePlane(vec3 pos, vec3 dir, out vec3 normal) {\nfloat t = (-1.2 - pos.y) / dir.y;\n    if ( t<=0.0) { \n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz,worldPos.xz) >= 100.0){\n        return INF;\n    }\n    normal = vec3(0,1,0);\n    return t;\n}\n\n\n//трассировка шара \nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal) { \n    float a = dot(dir, dir);\n    float b = dot(pos,dir);\n    float c = dot(pos,pos) - r*r;\n    float D = b * b - a*c; \n    if (D < 0.0) { \n        return INF;\n    }\n    float t = -b - sqrt(D);\n    if ( t > 0.0){\n        normal = normalize(pos + t * dir);\n        return t; \n    }\n    t = -b + sqrt(D);\n    if (t < 0.0) { \n        return INF;\n    }\n    normal = normalize(pos + t * dir);\n    return t;\n}\n\n//трассировка треугольника (обычного на плоскости буквально, из него составляем фигуру - пирамиду)\nfloat traceTriangle(vec3 pos, vec3 dir, out vec3 N,vec3 vertex0, vec3 vertex1, vec3 vertex2 )\n{\n    vec3 edge1 = vertex1 - vertex0;\n    vec3 edge2 = vertex2 - vertex0;\n    vec3 h = cross(dir, edge2);\n    float a = dot(edge1, h);\n    if (a > -EPS && a < EPS) return INF;\n    float f = 1.0/a;\n    vec3 s = pos - vertex0;\n    float u = f * dot(s, h);\n    if (u < 0.0 || u > 1.0) return INF;\n    vec3 q = cross(s, edge1);\n    float v = f * dot(dir, q);\n    if (v < 0.0 || u + v > 1.0) return INF;\n    float t = f * dot(edge2, q);\n    if (t < EPS) return INF;\n    vec3 v1 = vertex2 - vertex0;\n    vec3 v2 = vertex1 - vertex0;\n    N = normalize(cross(v1,v2));\n    return t;\n}\n\n//трассировка подставки - цилиндра\nfloat traceCylinder(vec3 pos, vec3 dir, float r, out vec3 normal) {\n    float t = (-1.0 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) < r*r) {\n        normal = vec3(0, 1, 0);\n        return t;\n    }\n    \n    // dot(pos + t * dir, pos + t * dir) == r * r;\n    // dot(pos, pos) + 2 * t * dot(pos, dir) + t * t * dot(dir, dir) == r * r\n    // t * t + 2.0 * t * dot(pos, dir) + dot(pos, pos) - r * r == 0\n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - r*r;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    t = (-b - sqrt(D)) / a;\n    if (t > 0.0) {\n        worldPos = t * dir + pos;\n        if (worldPos.y <= -1.0) {\n            normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n            return t;\n        }\n    }\n    t = (-b + sqrt(D)) / a;\n    if (t < 0.0) {\n        return INF;\n    }\n    if (worldPos.y <= -1.0) {\n        worldPos = t * dir + pos;\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    }\n    return INF;\n}\n\n//трассировка фигуры основной (побито на трессировки треугольников)\nfloat traceOct(vec3 pos, vec3 dir, float r, out vec3 normal) {\n    vec3 coords[6] = vec3[6](\n        vec3(-r, 0, 0),\n        vec3(0, -r, 0),\n        vec3(r, 0, 0),\n        vec3(0, r, 0),\n        vec3(0, 0, r),\n        vec3(0, 0, -r)\n    );\n    \n    vec3 trCoords[8] = vec3[8] (\n        vec3(0, 1, 4),\n        vec3(1, 2, 4),\n        vec3(2, 3, 4),\n        vec3(3, 0, 4),\n        vec3(0, 1, 5),\n        vec3(1, 2, 5),\n        vec3(2, 3, 5),\n        vec3(3, 0, 5)\n    );\n    \n    float t = INF;\n    \n    for (int i = 0; i < 8; i++) {\n        vec3 curNormal;\n        float curT = traceTriangle(pos, dir, curNormal, coords[int(trCoords[i].x)], coords[int(trCoords[i].y)], coords[int(trCoords[i].z)]);\n        if (curT < t) {\n            t = curT;\n            normal = curNormal;\n        }\n    }\n    \n    return t;\n}\n\n\n//трассировка фигуры. просто так было нужно. сначала вызывается она, потом та, что выше\nfloat traceObject(vec3 pos, vec3 dir, float h_from_0, out vec3 normal) {\n    return traceOct(pos, dir, h_from_0, normal);\n}\n\n\n//мягкие тени делает (на фигуру)\nbool isOccluded(vec3 pos, vec3 target) {\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n    vec3 CubeNorm;\n    \n    vec3 cylNorm;\n    float cylT = traceCylinder(pos, dir, 0.5, cylNorm);\n    return (cylT < dist);\n    vec3 L1Norm;\n    float light1T = traceSphere(pos - LIGHT1_POS, dir, LIGHT1_RADIUS, L1Norm);\n    return (light1T < dist);\n    vec3 L2Norm;\n    float light2T = traceSphere(pos - LIGHT2_POS, dir, LIGHT2_RADIUS, L2Norm);\n    return (light2T < dist);\n}\n\n//тоже делает мягкие тени работают в паре (добавляют тени от цвета)\nvec3 computeLight(vec3 pos, vec3 color, vec3 normal) {\n    vec3 toLight1 = LIGHT1_POS - pos;\n    float distSq1 = dot(toLight1, toLight1);\n    float att1 = isOccluded(pos, LIGHT1_POS + randDir * LIGHT1_RADIUS) ? 0.0 : 20.0f / distSq1;\n    vec3 toLight2 = LIGHT2_POS - pos;\n    float distSq2 = dot(toLight2, toLight2);\n    float att2 = isOccluded(pos, LIGHT2_POS + randDir * LIGHT2_RADIUS) ? 0.0 : 10.0f / distSq2;\n    return color * (\n        max(0.0, dot(normal, normalize(toLight1))) * att1 * LIGHT1_COLOR\n        + max(0.0, dot(normal, normalize(toLight2))) * att2 * LIGHT2_COLOR\n        + texture(iChannel1, normal).rgb * 0.1\n    );\n}\n\n//функция прозрачности\nvec3 refraction(vec3 v, vec3 normal,float n1, float n2)\n{\n    if(dot(v,normal) < 0.0){\n        normal = -normal;\n    }\n    float cosA=dot(v,normal);\n    float sinA=sqrt(1.0-cosA*cosA);\n    vec3 tang = normalize(v-cosA*normal);\n    float sinB = sinA/n2*n1;\n    float cosB = sqrt(1.0-sinB*sinB);\n    return sinB*tang + cosB*normal;\n}\n\n//функция квадрат числа\nfloat pow2(float x) {\n    return x * x;\n}\n\n//функция ранлома\nfloat rand(float frame)\n{\n    return fract(sin( dot(vec3(frame), vec3(12.9898,78.233,45.5432) )) * 43758.5453);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n\n    float DIAMOND_R = pow2(DIAMOND_N - GLASS_N) / pow2(DIAMOND_N + GLASS_N);\n    float val = 17.5;\n    val = iTime;\n    \n            //включение кручения камеры !!!\n    CAMERA_POS = vec3(6.0 * sin(val / 2.0), 1.2, 6.0 * cos(val / 2.0));\n    \n    vec4 LIGHT_COLOR = vec4(0,0,0,0) / float(iFrame + 1);\n    vec3 N;\n    vec3 randVals = vec3(0.0, 0.0, 0.0); // выключение антиалисаинга\n    //vec3 randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    vec3 randDir = normalize(randVals - 0.5);\n    vec2 uv = (fragCoord- iResolution.xy * 0.5 + (randVals.xy - 0.5)*2.0) / iResolution.x; \n    vec3 front = normalize(vec3(-CAMERA_POS));\n    vec3 up = vec3(0,1,0);\n    vec3 right = normalize(cross(front,up));\n    up = normalize(cross(right, front));\n    vec3 viewVec = normalize(front + right * uv.x + up * uv.y); \n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N * GLASS_N); // формула френеля для стекла (едля смены материала стекла и прозрачности)\n    float n1 = AIR_N;\n    float n2 = GLASS_N;\n    \n    vec3 curPos = CAMERA_POS; // текущая позиуия - позиция камеры для трассировки ВСЕГО\n    vec3 curDir = viewVec; // для трассировки ВСЕГО\n    vec3 colorMult = vec3(1, 1, 1); //изменение цвета вкраплений\n    \n    for (int i = 0; i < 10; ++i){\n        float t = INF;\n        int materialType;\n        vec3 color;\n        vec3 normal; \n        vec4 color2;\n        vec3 planeNorm;\n        float nEnter = GLASS_N;\n        // t = изменение нормали от текущей нормали, которая задается в трассировках \n        //трассировка стола реализация\n        float planetT = tracePlane(curPos, curDir, planeNorm);\n        if (planetT < t) {\n            t = planetT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel0,worldPos.xz * 0.2).rgb;\n            normal = planeNorm;\n        }\n        //трассировка 1 ист света\n        vec3 L1Norm;\n        float light1T = traceSphere(curPos - LIGHT1_POS, curDir, LIGHT1_RADIUS, L1Norm);\n        if (light1T < t) {\n            t = light1T;\n            materialType = EMISSION;\n            vec3 worldPos = t * curDir + curPos;\n            color = 2.0*LIGHT1_COLOR;\n            normal = L1Norm;\n        }\n        //трассировка 2 ист света\n        vec3 L2Norm;\n        float light2T = traceSphere(curPos - LIGHT2_POS, curDir, LIGHT2_RADIUS, L2Norm);\n        if (light2T < t) {\n            t = light2T;\n            n1 = AIR_N;\n            n2 = AIR_N;\n            color = LIGHT2_COLOR;\n            normal = L2Norm;\n            materialType = REFRACTION;   \n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0){\n                    n1 = AIR_N;\n                }else{\n                    n2 = AIR_N;\n                }\n        }\n       // трассировка фигуры\n       vec3 objNorm;\n        float objT = traceObject(curPos, curDir, OBJ_RADIUS, objNorm);\n        if (objT < t) {\n            t = objT;\n            normal = objNorm;\n            materialType = REFRACTION;\n            if (randVals.x < GLASS_R * 5.0) {\n                //materialType = REFLECTION; отключения накопления (тк нет накопления начинает бликать)\n            } else {\n                //materialType = REFRACTION; откоючения накопления (тк нет накопления начинает бликать)\n                colorMult *= vec3(0.8, 0.8, 0.9);\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = AIR_N;\n                } else {\n                    nEnter = GLASS_N;\n                }\n            } \n        }\n        //трассировка подставки\n         vec3 cylNorm;\n        float cylT = traceCylinder(curPos, curDir, 1.3, cylNorm);\n        if (cylT < t) {\n            t = cylT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel2, worldPos.xz * worldPos.y).rgb;\n            normal = cylNorm;\n        }\n        //трассировка вкраплений в цикле\n        vec3 sphNorm;\n        for (int i = 0; i < sphereIn.length(); i++) {\n            float sphInT = traceSphere(curPos - sphereIn[i].pos, curDir, sphereIn[i].radius, sphNorm);\n            if (sphInT < t) {\n                normal = sphNorm;\n                if (randVals.x < DIAMOND_R) {\n                    materialType = REFLECTION;\n                } else {\n                    colorMult *= sphereIn[i].color;\n                    materialType = REFRACTION;\n                    if (dot(curDir, normal) > 0.0) {\n                        nEnter = GLASS_N;\n                    } else {\n                        nEnter = DIAMOND_N;\n                    }\n                }\n            }\n        }\n        //обработка материалов\n        if (t != INF){\n            vec3 worldPos = t * curDir + curPos;\n            fragColor = texture(iChannel0, worldPos.xz);\n            if (materialType == EMISSION) { \n                fragColor.rgb = color* colorMult;\n                break;\n            }else if (materialType == DIFFUSE) {\n                fragColor.rgb = computeLight(worldPos, color, normal)* colorMult;\n                break;\n            }else if (materialType == REFLECTION){\n                curDir = reflect(curDir, normal);\n                curPos = worldPos + curDir * 1e-5;\n            }else if (materialType == REFRACTION) {\n                curPos += curDir * t;\n                curDir = refraction(curDir, normal, n1, n2);\n                curPos = worldPos + curDir * 1e-5;\n                float tmp = n1; \n                n1 = n2;\n                n2 = tmp; \n            }\n        }else{\n            fragColor.rgb = texture(iChannel1, curDir).rgb * 0.65 * colorMult;  //кубмап - окружение за доп балл(где texture)\n            \n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0,uv);// + texture(iChannel1,uv); //отключение накопления для вращения\n    //fragColor = texture(iChannel0,uv) + texture(iChannel1,uv); \n}","name":"Buffer B","description":"","type":"buffer"}]}