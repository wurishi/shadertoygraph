{"ver":"0.1","info":{"id":"tdsBDM","date":"1588414825","viewed":162,"name":"Look, mah! They're evolving!","username":"dcbrwn","description":"Very poorly put together, but at least it looks nice. Haven't figured out how to make fast blur without making a lot of samples. Blurring final image at the edges would be nice. Maybe some aberration would be cool too.","likes":6,"published":1,"flags":32,"usePreview":0,"tags":["life","conway","multipass"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdXGzr","filepath":"/media/a/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg","previewfilepath":"/media/ap/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    float aspect = iResolution.y / iResolution.x;\n    \n    vec2 distort = texture(iChannel2, uv).rg;\n\n    float t = length(vec2(uv.x, uv.y * aspect + 0.23) * 2.0 - 1.0);\n    float tint = cos(pow(t, 4.0));\n\n    vec2 lifeUV = vec2(distort / 3.0 + fragCoord / 4.0);\n    vec3 life = texture(iChannel0, lifeUV / iResolution.xy, (1.1 - tint) * 10.0).rgb;\n    \n    vec2 lifeUV2 = vec2(0.5 + distort + fragCoord / 3.0);\n    vec3 life2 = texture(iChannel0, lifeUV2 / iResolution.xy, (1.2 - tint) * 10.0).rgb;\n\n    vec3 colored =  life2 + (life.r + life.g * 3.5) * vec3(0.8, 0.85, 0.69);\n\n    vec3 tex = texture(iChannel1, uv + life.rg + distort / 40.0).rgb;\n\n    vec3 bg = vec3(0.8, 0.85, 0.69);\n\n    vec3 mixed = (0.9 + tex / 5.0) * bg - colored * 0.15;\n\n    fragColor = vec4(mixed * tint, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float get(sampler2D image, ivec2 xy, ivec2 offset) {\n    ivec2 size = ivec2(textureSize(image, 0));\n    xy = (size + xy + offset) % size;\n    \n    return texelFetch(image, xy, 0).x > 0.5 ? 1.0 : 0.0;\n}\n\nvec2 calcLife(sampler2D world, ivec2 xy) {\n    float current = get(world, xy, ivec2(0, 0));\n    float n = 0.0; // Alive neighbours count\n    float value = current;\n    n += get(world, xy, ivec2(-1, -1));\n    n += get(world, xy, ivec2( 0, -1));\n    n += get(world, xy, ivec2( 1, -1));\n    n += get(world, xy, ivec2(-1,  0));\n    n += get(world, xy, ivec2( 1,  0));\n    n += get(world, xy, ivec2(-1,  1));\n    n += get(world, xy, ivec2( 0,  1));\n    n += get(world, xy, ivec2( 1,  1));\n\n    if (current == 1.0 && (n > 3.0 || n < 2.0)) {\n        value = 0.0;\n    } else if (current == 0.0 && n == 3.0) {\n        value = 1.0;\n    }\n\n    return vec2(value, (n + current) / 9.0);\n}\n\nfloat rand(float n) {\n    return fract(sin(n) * 43758.5453123);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 xy = ivec2(fragCoord);\n    \n    vec2 value = iFrame % 1000 == 0\n        ? vec2(rand(fragCoord.x + fragCoord.y * iResolution.x))\n        : calcLife(iChannel0, xy);\n    fragColor = vec4(value.x, value.y, 0.0, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"XsXGR8","channel":0}],"code":"vec4 mod289(vec4 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x)\n{\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec2 fade(vec2 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n\n\n// Classic Perlin noise\nfloat cnoise(vec2 P)\n{\n  vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);\n  vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);\n  Pi = mod289(Pi); // To avoid truncation effects in permutation\n  vec4 ix = Pi.xzxz;\n  vec4 iy = Pi.yyww;\n  vec4 fx = Pf.xzxz;\n  vec4 fy = Pf.yyww;\n\n  vec4 i = permute(permute(ix) + iy);\n\n  vec4 gx = fract(i * (1.0 / 41.0)) * 2.0 - 1.0 ;\n  vec4 gy = abs(gx) - 0.5 ;\n  vec4 tx = floor(gx + 0.5);\n  gx = gx - tx;\n\n  vec2 g00 = vec2(gx.x,gy.x);\n  vec2 g10 = vec2(gx.y,gy.y);\n  vec2 g01 = vec2(gx.z,gy.z);\n  vec2 g11 = vec2(gx.w,gy.w);\n\n  vec4 norm = taylorInvSqrt(vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11)));\n  g00 *= norm.x;  \n  g01 *= norm.y;  \n  g10 *= norm.z;  \n  g11 *= norm.w;  \n\n  float n00 = dot(g00, vec2(fx.x, fy.x));\n  float n10 = dot(g10, vec2(fx.y, fy.y));\n  float n01 = dot(g01, vec2(fx.z, fy.z));\n  float n11 = dot(g11, vec2(fx.w, fy.w));\n\n  vec2 fade_xy = fade(Pf.xy);\n  vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);\n  float n_xy = mix(n_x.x, n_x.y, fade_xy.y);\n  return 2.3 * n_xy;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    fragColor = vec4(\n        cnoise(uv * 10.0 + iTime),\n        cnoise(uv * 10.0 + iTime),\n        0.0,\n        1.0\n    );\n}","name":"Buffer B","description":"","type":"buffer"}]}