{"ver":"0.1","info":{"id":"MXsGR7","date":"1709303996","viewed":76,"name":"John Conway's Game of Life.","username":"Skelly","description":"Play with the settings in Common.","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["buffermemory"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texture(iChannel0, fragCoord/iResolution.xy);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define seed 0.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    \n    if ((iFrame==0 && !start_clear))\n    {\n        fragColor = vec4( hash1(vec3(uv, seed)) > sparsity );\n    }\n    else if (iMouse.z > 0. && distance(fragCoord, iMouse.xy) < mouse_size)\n    {\n        switch (mouse_type)\n        {\n            case 0:\n                fragColor = vec4(0.);\n                break;\n            case 1:\n                fragColor = vec4(1.);\n                break;\n            case 2:\n                fragColor = vec4( hash1(vec3(uv, seed)) > 0.5 );\n                break;\n        }\n    }\n    else\n    {\n        vec2 units_per_pixel = 1./iResolution.xy;\n    \n        float cell_v = texture(iChannel0, uv).r;\n        \n        bool searching = true;\n        float neighbours = 0.;\n        vec2 offset;\n        int i = 0;\n        bool next_state;\n        \n        if (cell_v > .5) // living cell\n        {\n            // loop until neighbours > 3\n            while (searching)\n            {\n                float f_i = float(i);\n                offset = vec2(mod(f_i, 3.) - 1., floor(f_i/3.) - 1.) * units_per_pixel;\n                \n                neighbours += texture(iChannel0, uv + offset).r;\n            \n                \n                if (neighbours > die_v)\n                {\n                    searching = false;\n                    next_state = false;\n                }\n                else if (i == 8)\n                {\n                    searching = false;\n                    next_state = neighbours > live_v;\n                }\n                \n                i++;\n                if (i == 4) // Skip centre cell\n                    i = 5;\n            }\n        }\n        else // dead cell\n        {\n            // loop until neighbours > 3\n            while (searching)\n            {\n                float f_i = float(i);\n                offset = vec2(mod(f_i, 3.) - 1., floor(f_i/3.) - 1.) * units_per_pixel;\n                \n                neighbours += texture(iChannel0, uv + offset).r;\n                \n                if (neighbours > empty_v)\n                {\n                    searching = false;\n                    next_state = false;\n                }\n                else if (i == 8)\n                {\n                    searching = false;\n                    next_state = neighbours > birth_v;\n                }\n                \n                i++;\n                if (i == 4) // Skip centre cell\n                    i = 5;\n            }\n        }\n    \n        fragColor = vec4(next_state);\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define start_clear false\n#define seed 0.\n#define sparsity .85\n\n#define mouse_size 30.\n#define mouse_type 2 // 0 for clear, 1 for fill, 2 for random\n\n#define persistance .0\n\n#define live_v 1.5 // 1.5\n#define die_v 3.5 // 3.5\n#define birth_v 2.5 // 2.5\n#define empty_v 3.5 // 3.5\n\n// https://www.shadertoy.com/view/Xt23Ry\nfloat hash1(float co) { return fract(sin(co*(91.3458)) * 47453.5453); }\nfloat hash1(vec2 co){ return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453); }\nfloat hash1(vec3 co){ return hash1(co.xy+hash1(co.z)); }","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = mix(texture(iChannel0, fragCoord/iResolution.xy),\n        texture(iChannel1, fragCoord/iResolution.xy), persistance);\n}","name":"Buffer B","description":"","type":"buffer"}]}