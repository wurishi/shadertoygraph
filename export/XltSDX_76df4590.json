{"ver":"0.1","info":{"id":"XltSDX","date":"1481851973","viewed":167,"name":"Shader night - Audio input","username":"inantop","description":"Shader night","likes":5,"published":1,"flags":64,"usePreview":0,"tags":["tutorial"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"MdjGDW","filepath":"https://soundcloud.com/jerry-davis-6/beethovens-9th-symphony-1st","previewfilepath":"https://soundcloud.com/jerry-davis-6/beethovens-9th-symphony-1st","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    //In shadertoy, audio comes in as a two-row texture.\n    //The first row represents the waveform (? - I'm not an audio guy)\n    //The second row represents the frequency spectrum (? - Again... no idea what I'm talking about)\n    \n    //Using our x position in the buffer as a key, we can look up the first row by looking at texture coordinate (x, 0.25).\n    //Why 0.25? OpenGL coordinates put (0,0) at the top-left of a pixel, not its center. This means that in a repeating texture\n    //the point (0,0) is actually half-way between the top-left pixel and the bottom-right pixel, and would be interpolated.\n    vec2 firstRow = vec2(uv.x, 0.25);\n    vec2 secondRow = vec2(uv.x, 0.75);\n    \n    vec4 amplitude = texture(iChannel0, firstRow);\n    vec4 frequency = texture(iChannel0, secondRow);\n    \n    //Now, the return from the textures is a vec4, but these are greyscale textures so all 4 values are the same.\n    //Let's output the waveform as red and the spectrum as green\n    fragColor = vec4(amplitude.r, frequency.r, 0.0, 1.0);\n    \n    //<-- That doesn't look like much. This is because we're getting the same value for each y position in the buffer because we only\n    //    use x, so naturally it's just vertical bands.\n    //    The value we're getting out is some number 0..1, we can visualize it better by placing it on the y axis and drawing black\n    //    pixels any time the pixel's y position is greater than this value.\n    \n    //Try uncommenting this block:\n    /*\n    fragColor = vec4(0.0, 0.0, 0.0, 0.0); //Reset to black\n    if(uv.y < wave.r)\n    {\n        fragColor += vec4(1.0, 0.0, 0.0, 1.0); //Add red\n    }\n    if(uv.y < spectrum.r)\n    {\n        fragColor += vec4(0.0, 1.0, 0.0, 1.0); //Add green\n    }\n    */\n}","name":"Image","description":"","type":"image"}]}