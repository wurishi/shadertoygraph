{"ver":"0.1","info":{"id":"WdyXWy","date":"1574826287","viewed":116,"name":"Mandelbrod","username":"pavleeto","description":"Simple (and imperfect) implementation of the Mandelbrod set\nCredit goes to this youtube channel: https://www.youtube.com/watch?v=6IWXkV82oyY","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float mandelbrot(vec2 uv)\n{\n    vec2 c = uv;\n    vec2 z = uv;\n    float maxSteps = 150.0;\n    float steps = 0.0;\n    for (steps = 0.0; steps<=maxSteps; ++steps)\n    {\n        // z = z*z + c\n        z = vec2(z.x*z.x - z.y*z.y, 2.0*z.x*z.y) + c;\n        if (length(z) > 2.0) break;\n    }\n    return steps / maxSteps;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    // zoom and translate\n    float zoomStep = -cos(iTime/10.0) * 6.0 + 6.0;\n    uv /= exp(zoomStep);\n    uv += vec2(-0.72499, 0.29084);\n    \n    // Output to screen\n    vec3 col = vec3(mandelbrot(uv));\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}