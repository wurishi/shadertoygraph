{"ver":"0.1","info":{"id":"XXKSDc","date":"1720580832","viewed":71,"name":"fork City with light","username":"jorge2017a2","description":"https://www.shadertoy.com/view/wdjBRz\nCreated by lovelyH in 2020-05-13\n Ride thru the city at night\n\n","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["city","withlight"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//----------image\n//modificado por jorge2017a2-\n// Ride thru the city at night\n//https://www.shadertoy.com/view/wdjBRz\n//created by lovelyH in 2020-05-13\n\n\n#define MAX_STEPS 200\n#define MAX_DIST 150.\n#define MIN_DIST 0.001\n#define EPSILON 0.001\n#define Ka 0.5\n\n#define Kd 0.4\n\n\n#define INF 10000.0\n\nvec3 GetColorYMaterial(vec3 p,  vec3 n, vec3 ro,  vec3 rd, int id_color, float id_material);\nvec3 getMaterial( vec3 pp, float id_material);\nvec3 light_pos1;  vec3 light_color1 ;\nvec3 light_pos2;  vec3 light_color2 ;\n\nint matId= 0;\nvec3 lightDis= vec3(INF);\nvec3 lightDisFromRay= vec3(INF);\n\n\n#define opU2(d1, d2) ( d1.x < d2.x ? d1 : d2 )\n\nfloat sdSphere( vec3 p, float s )\n\t{ return length(p)-s;}\nfloat sdBox( vec3 p, vec3 b )\n\t{ vec3 d = abs(p) - b;   return length(max(d,0.0))+ min(max(d.x,max(d.y,d.z)),0.0); }\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n\t{ vec3 q = abs(p) - b; return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r; }\n\n\n// Rotate around a circular path\nmat2 rotate2d(float theta) \n{  float s = sin(theta), c = cos(theta);\n  return mat2(c, -s, s, c);\n}\n\n\nvec2 rot( vec2 p, float l ){\n\treturn vec2(\n\t\tp.x*cos(l) - p.y*sin(l),\n\t\tp.x*sin(l) + p.y*cos(l)\n\t);\n}\n\n\n\nfloat dfCube( vec3 p, vec3 size ){\n\tp= abs(p) - size;\n\t// return max( max( p.x, p.y), p.z );\n\treturn length( vec3(\n\t\tmax( 0.0, p.x),\n\t\tmax( 0.0, p.y),\n\t\tmax( 0.0, p.z)\n\t));\n}\n\n\nfloat map(vec3 p)\n{\n\tfloat rc= p.z;\n\tfloat r= rc;\n\tfloat h;\n\tmatId= 9;\n\tlightDis= vec3(INF);\n\tvec3 ph, ph2;\n\n\t/// lamps\n\tph= p;\n\tph.x= abs(ph.x) - 6.2;\n\tph.y = mod( ph.y, 20.0 ) - 2.0;\n\trc= length(ph.xy)-0.1;\n\tph.z -= 8.0;\n\trc= max( rc, ph.z );\n\trc= min( rc, length(ph)-0.2 );\n\tlightDis= min( lightDis, vec3(length(ph)-0.1));\n\tif( rc < r ){\n\t\tr= rc;\n\t\t//matId= 1;\n        matId= 20;\n\t}\n\n\t/// pavement\n\tph= p;\n\tph.x= abs(ph.x) - 6.0;\n\tph.z -= 0.2;\n\trc= length( vec2(\n\t\tmax( 0.0, -ph.x),\n\t\tmax( 0.0, ph.z)\n\t));\n\tif( rc < r ){\n\t\tr= rc;\n\t\tmatId= 9;\n\t}\n    \n\n\t/// building\n\nph= p;\n\tfloat seed= floor( p.y / 30.0 ) * sign(p.x);\n\tph.x= abs(ph.x) - 20.0;\n\tph.y= mod( ph.y, 30.0 ) - 15.0;\n\trc= dfCube( ph, vec3(12.0) );\n\tfloat buildingHeight= 6.0 + 3.0 * floor( 3.0*( 0.5 + 0.5 * sin(10.*seed) ) );\n\trc= max( rc, p.z - buildingHeight );\n\trc= min( rc,  max( 1.0, max( ph.x-12.0, ph.y-12.0 ) ) );\n\tif( rc < r ){\n\t\tr= rc;\n\t\tmatId= 8 + int( floor( mod( seed, 6.999 ) ) );\n\t}\n \n    \n\t/// door\n\tph2= ph;\n\tph2.x += 12.0;\n\tph2.y += 11.0*sin( 7.0*seed );\n\trc= dfCube( ph2, vec3(0.1, 0.7, 2.5) );\n\tif( mod(seed,5.0) < 3.0 ){\n\t\tfloat doory= ph2.y;\n\t\t/// window\n\t\tph2= ph;\n\t\tph2.x += 12.0;\n\t\tph2.y += mod( 11.0*sin( 7.0*seed ) + 11.0 + 11.0, 22.0 ) - 11.0;\n\t\tph2.z -= 2.0;\n\t\trc= min( rc, dfCube( ph2, vec3(0.1, 0.7, 0.8) ) );\n\t\tif( mod(17.0*seed,23.0) < 15.0 )\n\t\t{\n\t\t\tph2.z = mod( p.z, 3.0 )-1.5;\n\t\t\tph2.z = max( ph2.z, p.z + 1.5 - buildingHeight );\n\t\t\trc= min( rc, dfCube( ph2, vec3(0.1, 0.7, 0.8) ) );\n\t\t\tph2.y = doory;\n\t\t\trc= min( rc, dfCube( ph2, vec3(0.1, 0.7, 0.8) ) );\n\t\t}\n\t}\n\tif( rc < r ){\n\t\tr= rc;\n\t\tmatId= 3;\n\t}\n\n\t/// extra stone elements\n\trc= INF;\n\t/// corner\n\th= mod(27.0*seed,29.0);\n\tif( h < 10.0 ){\n\t\tph2= ph;\n\t\tph2.x= abs(ph2.x)-12.0;\n\t\tph2.y= abs(ph2.y)-12.0;\n\t\tph2.z = mod( ph2.z, 0.8 ) - 0.4;\n\t\trc= min( rc, dfCube( ph2+vec3(.2,.2,.0), vec3(.3,.3,.25) ) );\n\t}else if( h < 20.0 ){\n\t\t\n\t\tph2= ph;\n\t\tph2.x= abs(ph2.x)-12.0;\n\t\tph2.y= abs(ph2.y)-12.0;\n\t\t\n\t\t// ph2.z -= 4.0;\n\t\tph2.z = mod( ph2.z, 3.0 ) - 1.0;\n\n\t\tph2.x += 0.1;\n\t\tph2.y += 0.1;\n\t\trc= min( rc, dfCube( ph2, vec3(.15,.15,.12) ) - 0.03 );\n\t\t\n\t\tph2.x += 0.05;\n\t\tph2.y += 0.05;\n\t\tph2.z -= 0.5;\n\t\trc= min( rc, dfCube( ph2, vec3(.19,.19,.14) ) - 0.03 );\n\n\t\tph2.x += 0.7;\n\t\tph2.y += 0.15;\n\t\tph2.z += 0.1;\n\t\trc= min( rc, dfCube( ph2-vec3(.15,.15,.0), vec3(.19,.19,.12) ) - 0.03 );\n\n\t\tph2.x -= 0.7;\n\t\tph2.y += 0.5;\n\t\tph2.z += 0.1;\n\t\trc= min( rc, dfCube( ph2, vec3(.19,.19,.17) ) - 0.03 );\n\n\t}\n    \n\t/// roof\n\tif( mod(13.0*seed,17.0) < 12.0 ){\n\t\tph2= ph;\n\t\tph2.z -= buildingHeight;\n\t\tif( mod(13.0*seed,17.0) < 5.0 ){\n\t\t\tph2.z = mod( ph2.z+1.5, 3.0 )-1.5;\n\t\t}\n\t\trc= min( rc, dfCube( ph2, vec3( 12.1, 12.1, 0.1 ) ) );\n\t}\n\t/// cut above building height\n\trc= max( rc, p.z - buildingHeight );\n\tif( rc < r ){\n\t\tr= rc;\n\t\tmatId= 2;\n\t}\n\n\treturn r;\n}\n\n\nvec2 GetDist(vec3 p  ) \n{\tvec2 res= vec2(9999.0, -1.0);  \n     p.y=p.y+10.0;\n    vec3 p0=p;\n    float d1= map(p);\n    res=vec2(d1, matId);\n    \n    return res;\n}\n\nvec3 GetNormal(vec3 p)\n{   float d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n    vec3 n = d - vec3(GetDist(p-e.xyy).x,GetDist(p-e.yxy).x,GetDist(p-e.yyx).x);\n    return normalize(n);\n}\n\nvec2 RayMarch(vec3 ro, vec3 rd, int PMaxSteps)\n{   vec3 p;\n    vec2 hit, object=vec2(0.1,0.0);\n     lightDisFromRay= vec3(INF);\n    \n    for(int i=0; i <= PMaxSteps; i++) \n    { p = ro + rd*object.x;\n      hit = GetDist(p);\n      object.x += hit.x;\n      object.y = hit.y;\n      lightDisFromRay= min( lightDisFromRay, lightDis );\n      \n      if (abs(hit.x) < EPSILON || object.x > MAX_DIST) break;\n    }    \n    return object;\n}\n\n\n\nfloat getSoftShadow(vec3 p, vec3 lightPos) {\n    float res = 9999.0;\n    float dist = 0.01;\n    float lightSize = 0.03;\n    for (int i = 0; i < MAX_STEPS; i++) {\n      float hit = GetDist(p + lightPos * dist).x;\n      res = min(res, hit / (dist * lightSize));\n      dist += hit;\n      if (hit < 0.01 || dist > 20.0) break;\n    }\n    return clamp(res, 0.0, 1.0);\n}\n\nfloat occlusion(vec3 pos, vec3 nor)\n{   float sca = 2.0, occ = 0.0;\n    for(int i = 0; i < 10; i++) {    \n      float hr = 0.01 + float(i) * 0.5 / 4.0;\n      float dd = GetDist(nor * hr + pos).x;\n      occ += (hr - dd)*sca;\n      sca *= 0.6;\n    }\n    return clamp( 1.0 - occ, 0.0, 1.0 );    \n}\n\n\n\nvec3 lightingv3(vec3 normal,vec3 p, vec3 lp, vec3 rd, vec3 ro,vec3 lightColor, float t) \n{   vec3 lightPos=lp;\n    vec3 worldPos = p;\n     vec3 V = normalize(ro - p);\n    vec3 N = normal;\n    vec3 L = normalize (lightPos - worldPos);\n    vec3 R = reflect (-L, N);\n    float lightDist = max(length(L), .001);\n    float atten=1.0 / (1.0 + lightDist * 0.125 + lightDist * lightDist * .05);\n    L /= (lightDist*atten);\n    float shadow = getSoftShadow(worldPos, L);// shadows\n    float occ = occlusion(worldPos, N);// occ\n    vec3 ambient = Ka + Ka * dot(normal, vec3(0., 1., 0.))*lightColor;\n    ambient*=0.5;\n    vec3 fresnel =  lightColor *  pow(clamp(1.0 + dot(rd, N), 0.0, 1.0), 2.0);;\n    float diff= clamp(dot(N, L), 0.0, 1.0);\n    vec3 diffuse =  lightColor * diff;\n    float shininess=10.0;\n    float specular    = pow(max(dot(R, V), 0.0), shininess);\n    vec3 back = 0.5 * lightColor * clamp(dot(N, -L), 0.0, 1.0); // back\n    vec3 colOut = occ*lightColor*(ambient+diffuse*shadow+.25 +back) + vec3(.5)*specular*specular;\n    return colOut;\n}\n\n\nvec3 render_sky_color(vec3 rd)\n{   float t = (rd.x + 1.0) / 2.0;\n    vec3 col= vec3((1.0 - t) + t * 0.3, (1.0 - t) + t * 0.5, (1.0 - t) + t);\n    vec3  sky = mix(vec3(.0, .1, .4)*col, vec3(.3, .6, .8), 1.0 - rd.y);\n\treturn sky;\n    \n}\n\n\nvec3 GetMaterial(vec3 p,  vec3 nor, vec3 ro,  vec3 rd, int id_color)\n{  \tvec3 colobj; \n     if (id_color<40) { colobj=getColor(int( id_color));  return colobj; }\n  return vec3(0.0);\n}\n\nvec3 linear2srgb(vec3 c) \n{ return mix(12.92 * c,1.055 * pow(c, vec3(1.0/1.8)) - 0.055, step(vec3(0.0031308), c)); }\n\nvec3 exposureToneMapping(float exposure, vec3 hdrColor) \n{ return vec3(1.0) - exp(-hdrColor * exposure); }\n\nvec3 ACESFilm(vec3 x)\n{   float a,b,c,d,e;\n    a = 2.51; b = 0.03; c = 2.43;d = 0.59; e = 0.14;\n    return (x*(a*x+b))/(x*(c*x+d)+e);\n}\n\nvec3 Render(vec3 ro, vec3 rd)\n{  vec3 col = vec3(0);\n  vec3 p;\n     vec2 hit=RayMarch(ro,rd, MAX_STEPS);\n      if(hit.x<MAX_DIST)\n       {   p = (ro + rd * hit.x );\n        vec3 nor=GetNormal(p);\n        vec3 colobj;\n        colobj=GetMaterial( p, nor, ro, rd,  int(hit.y));\n        vec3 result;\n        \n        result= lightingv3(nor, p,light_pos1, rd,ro,colobj,hit.x)*light_color1;\n        //result+= lightingv3(nor, p,light_pos2,rd, ro,colobj,hit.x)*light_color2;\n        vec3  r= colobj *( \n\t\t\t\t(1.0 / (1.0 + 1.0 * lightDis) )\n\t\t\t\t+ 1.0\n\t\t\t\t* ( 0.5 + 0.5*dot(nor,vec3(0,0,1)) )\n\t\t\t\t* ( 0.5 + 0.5*dot(nor,-rd) )\n\t\t\t\t//* ( 0.5 + 0.5*ao )\n                * ( 0.5 + 0.5*0.2 )\n\t\t\t\t* ( 1.0 / (1.0 + 0.0001*hit.x*hit.x) )\n\t\t\t);\n        \n        \n        col= (result+r)/2.0;\n        col= (ACESFilm(col)+linear2srgb(col)+col+ exposureToneMapping(3.0, col))/4.0 ;\n    }\n    else if(hit.x>MAX_DIST)\n    col= render_sky_color(rd)*1.5;\n    \n    col += vec3(1.0) / (1.0+2.0*lightDisFromRay);\n    \n   return col;\n}\n\n\n\nconst float iCamRX= 3.14/2.0;\nconst float iCamRZ= 0.0;\n\n\nvec3 rotate_z(vec3 p, float phi)\n{\tfloat c = cos(phi);\tfloat s = sin(phi);\n\treturn vec3(c*p.x - s*p.y, s*p.x + c*p.y, p.z);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   vec2 uv = fragCoord.xy / iResolution.xy - 0.5;\n    uv.x = uv.x * iResolution.x / iResolution.y;\n    \n    float t0=iTime;\n    float t=mod(t0*5.0,500.0);\n    \n \tlight_pos1= vec3(-10.0, -20.0, 0.0+mod(iTime*0.25,120.0)); light_color1=vec3( 1.0,1.0,1.0 );\n \tlight_pos2=vec3(10.0, 20.0, -25.0); light_color2 =vec3( 0.0,0.5,1.0 ); \n    \n  \n   vec3 ro;\n    //vec3  rd = cameraToWorld(ro,vec3(0.,5.,0.)) * vec3(uv,1.);\n    vec3 dir= normalize( vec3( uv.x, uv.y, -1.0 ) );\n\tdir.yz= rot( dir.yz, iCamRX );\n\tdir.xy= rot( dir.xy, -iCamRZ );\n    \n    \n    ro=vec3(0.0,40.0*(mod(iTime*0.25,120.0)-5.0),2.0);\n    vec3 rd=dir;\n    //ro=rotate_z(ro-vec3(-1.,0.0,0.0),0.015*sin(iTime));\n    vec3 col= Render( ro,  rd);\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//-------common\n#define PI 3.14159265\n\n\n\nvec3  Arrcolores[] = vec3[] (\nvec3(0,0,0),  //0\nvec3(1.,1.,1.), //1\nvec3(1,0,0),  //2\nvec3(0,1,0),   //3\nvec3(0,0,1),   //4\nvec3(1,1,0),  //5\nvec3(0,1,1),  //6 \nvec3(1,0,1),   //7\nvec3(0.7529,0.7529,0.7529),  //8\nvec3(0.5,0.5,0.5),  //9\nvec3(0.5,0,0),   //10\nvec3(0.5,0.5,0.0),  //11\nvec3(0,0.5,0),   //12\nvec3(0.5,0,0.5),  //13\nvec3(0,0.5,0.5),  //14\nvec3(0,0,0.5),    //15\nvec3(1.0, 0.8, 0.737),  //16\nvec3(0.8, 0.8, 0.8),  //17\nvec3(0.5, 0.5, 0.8),  //18\nvec3(1, 0.5, 0),      //19\nvec3(1.0, 1.0, 1.0),  //20\nvec3(0.968,0.6588,  0.721),//21\nvec3(0, 1, 1), //22 \nvec3(0.333, 0.803, 0.988),//23\nvec3(0.425, 0.56, 0.9)*vec3( 0.3, 0.2, 1.0 ),//24 \nvec3(0.8,0.8,0.8)*vec3( 0.3, 0.2, 1.0 ),//25  \nvec3(1.0,0.01,0.01)*vec3( 0.3, 0.2, 1.0 ),//26\nvec3(0.1, 0.5, 1.0),//27   \nvec3(0.0, 0.6, 0.0),//28 \nvec3(0.1,0.1,0.7), //29\nvec3(0.99, 0.2, 0.1), //30\nvec3(.395, .95, 1.), //31\nvec3(0.425, 0.56, 0.9), //32\nvec3(0.7333, 0.1412, 0.1412), //33\nvec3(0.1843, 0.3333, 0.1843), //34\n vec3(0.6549, 0.6549, 0.9922), //35\n vec3(0.8549, 0.8549, 0.8549)  //36\n);\n\nvec3 getColor(int i)\n{   //if (i==-2 ) {return mObj.color; }       \n    if (i>-1 )  return Arrcolores[i];\n}\n","name":"Common","description":"","type":"common"}]}