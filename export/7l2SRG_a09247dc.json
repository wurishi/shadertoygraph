{"ver":"0.1","info":{"id":"7l2SRG","date":"1627964014","viewed":92,"name":"Quarter Circles","username":"badjano","description":"Making colored quarter circles using cells\n\nInspired by this https://www.instagram.com/p/CSFYaplDzkJ/","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["circles","uv"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 coord = fragCoord;\n    vec2 uv = ((coord-iResolution.xy*0.5)/iResolution.y);\n    \n    float t = iTime*0.2;\n    uv = rotate(uv,t);\n    uv *= (sin(t)+2.)*10.;\n\n    vec4 uid = hash42(floor(uv));\n    vec4 uid2 = hash42(floor(uv*.5));\n    \n    vec4 ruid = round(uid);\n    vec4 ruid2 = round(pow(uid2,vec4(1.5)));\n    \n    float m = ruid2.z;\n    uid = mix(uid, uid2, m);\n    ruid = mix(ruid, ruid2, m);\n    uv = fract(mix(uv,uv*.5,m));\n    \n    float circle = length(uv - ruid.wx);\n    float th = 0.999;  //  + sin(iTime*2.*(1.+uid.y) + uid.z*PI2)*0.1\n    circle = smoothstep(th,th+.01,circle);\n    \n    vec4 c1 = hash42(uid.xy); // circle color\n    vec4 c2 = hash42(uid.zw); // bg color\n    c2 = round(c2);\n    \n    c1.rb = 1.-ruid.br;\n\n    c2.rb = mix(uv.xy,uv.yx,ruid.a);\n    c2.rgb = hueShift(c2.rgb,uid.r*10.);\n    c2.g = 1.;\n    \n    fragColor = mix(c1, c2, circle);\n    \n    fragColor.xyz = hueShift(fragColor.xyz,iTime);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define PI2 6.28318530718\n\nvec3 hueShift( vec3 color, float hueAdjust ){\n\n    const vec3  kRGBToYPrime = vec3 (0.299, 0.587, 0.114);\n    const vec3  kRGBToI      = vec3 (0.596, -0.275, -0.321);\n    const vec3  kRGBToQ      = vec3 (0.212, -0.523, 0.311);\n\n    const vec3  kYIQToR     = vec3 (1.0, 0.956, 0.621);\n    const vec3  kYIQToG     = vec3 (1.0, -0.272, -0.647);\n    const vec3  kYIQToB     = vec3 (1.0, -1.107, 1.704);\n\n    float   YPrime  = dot (color, kRGBToYPrime);\n    float   I       = dot (color, kRGBToI);\n    float   Q       = dot (color, kRGBToQ);\n    float   hue     = atan (Q, I);\n    float   chroma  = sqrt (I * I + Q * Q);\n\n    hue += hueAdjust;\n\n    Q = chroma * sin (hue);\n    I = chroma * cos (hue);\n\n    vec3    yIQ   = vec3 (YPrime, I, Q);\n\n    return vec3( dot (yIQ, kYIQToR), dot (yIQ, kYIQToG), dot (yIQ, kYIQToB) );\n\n}\n\nvec4 hash42(vec2 p)\n{\n\tvec4 p4 = fract(vec4(p.xyxy) * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n\n}\n\nvec2 rotate(vec2 v, float a) {\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\tmat2 m = mat2(c, -s, s, c);\n\treturn m * v;\n}","name":"Common","description":"","type":"common"}]}