{"ver":"0.1","info":{"id":"cscBD8","date":"1697076676","viewed":35,"name":"Custom Flower","username":"leowangfcb","description":"I try to create the sky and the sun.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["circle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/**\n * @author rah, inspired by jonobr1 / http://jonobr1.com/\n */\n\n/* \n * Output circle colors at given center pos and radius\n */\nvec4 circle(vec2 uv, vec2 center, float radius, vec3 color)\n{\n    // Get distance of point from center, get difference from given radius\n\tfloat d = length(center - uv) - radius;\n\tfloat t = clamp(d, 0.0, 1.0);\n    \n    // If point is smaller than radius, set color alpha to 1, otherwise 0\n\treturn vec4(color, 1.0 - t);\n}\n\n/*\n * Your work here!\n */\n \nfloat triangle(float x, float fr, float amp) {\n    return abs(x / fr - floor(x / fr + 0.5)) * amp;\n}\n\nfloat sawtooth(){\n    return 0.0;\n}\n\nfloat computeRadius(vec2 uv)\n{\n    float radius = 0.25 * iResolution.y;\n    \n    // Centered uv\n    vec2 uvCenter = (2.0f * uv - iResolution.xy);\n    // Get pixel angle around the center\n    float a = atan(uvCenter.x,uvCenter.y);\n    \n    a = a - iTime / 4.0;\n    \n    \n    radius = radius + triangle(a , 3.1415/ 8.0, 1.0) *cos(iTime) * 3.0 * mix (60.0, 50.0, cos(iTime));\n    \n    float mySin = 3.0 *(sin(1.0 * iTime));\n    float myCos = cos ( 30.0 * a);\n    \n    \n    radius = 0.2 * radius * (mySin + myCos + 5.0);\n    \n    return radius;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n\tvec2 uv = fragCoord.xy;\n\tvec2 center = iResolution.xy * 0.5;\n\tfloat radius = computeRadius(uv);\n    \n    // Background layer\n\tvec4 layer1 = vec4(rgb(135.0, 205.0, 325.0), 1.0);\n\t\n\t// Circle\n\tvec3 red = rgb(253.0, 184.0, 19.0);\n\tvec4 layer2 = circle(uv, center, radius, red);\n    \n    vec3 new_c = rgb(252.0,150.0,1.0);\n    \n    float new_r = max(radius - 100.0,30.0) ;\n    \n    vec4 layer3 = circle(uv, center, new_r, new_c);\n\t\n\t// Blend the two\n\tfragColor = mix(layer1, layer2, layer2.a);\n    fragColor = mix(fragColor, layer3, layer3.a);\n\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/*\n * Toolbox functions! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n */ \nfloat bias(float t, float b) {\n    return (t / ((((1.0/b) - 2.0)*(1.0 - t))+1.0));\n}\n\n/*\n * Basic Utilities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n */\n\n\n/* \n * Rotate an input point about some center by angle\n */\nvec2 rotatePoint2d(vec2 uv, vec2 center, float angle)\n{\n    vec2 rotatedPoint = vec2(uv.x - center.x, uv.y - center.y);\n    float newX = cos(angle) * rotatedPoint.x - sin(angle) * rotatedPoint.y;\n    rotatedPoint.y = sin(angle) * rotatedPoint.x + cos(angle) * rotatedPoint.y;\n    rotatedPoint.x = newX;\n    return rotatedPoint;\n}\n\n/*\n * Make a vec3 color from rgb values [0, 255]\n */\nvec3 rgb(float r, float g, float b)\n{\n\treturn vec3(r / 255.0, g / 255.0, b / 255.0);\n}\n","name":"Common","description":"","type":"common"}]}