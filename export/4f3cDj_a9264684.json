{"ver":"0.1","info":{"id":"4f3cDj","date":"1731137324","viewed":124,"name":"Fixed Reality Incursion","username":"purz","description":"I made this with claude, maybe someone can make something better with it.","likes":4,"published":3,"flags":0,"usePreview":0,"tags":["claude","ai"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Infection parameters\nconst float VIRUS_SPEED = 0.1;\nconst float INFECTION_SPREAD = 4.0;\nconst float REALITY_FOLD_ITERATIONS = 4.0;\nconst float DNA_MUTATION_RATE = 8.0;\nconst vec3 VIRUS_COLOR = vec3(0.9, 0.2, 0.3);\n\n// Helper for viral DNA patterns\nvec2 viralDNA(vec2 uv, float time) {\n    vec2 dna = uv;\n    float t = time * VIRUS_SPEED;\n    \n    for(float i = 0.0; i < 5.0; i++) {\n        dna = abs(dna) / dot(dna,dna) - DNA_MUTATION_RATE;\n        dna *= mat2(cos(t), sin(t), -sin(t), cos(t));\n        dna += vec2(sin(t * 0.7), cos(t * 0.8)) * 0.2;\n    }\n    return dna;\n}\n\n// Viral growth pattern\nfloat viralGrowth(vec2 p, float time) {\n    float growth = 0.0;\n    p *= 1.0;\n    \n    for(float i = 0.0; i < 6.0; i++) {\n        p = abs(p) / dot(p,p) - 1.0;\n        p = p * mat2(cos(time), sin(time), -sin(time), cos(time));\n        growth += exp(-length(p) * 4.0);\n    }\n    return growth / 6.0;\n}\n\n// Reality fold with infection\nvec3 foldReality(vec2 uv, float time) {\n    vec2 p = uv;\n    vec3 infected = vec3(0.0);\n    float total = 0.0;\n    \n    for(float i = 0.0; i < REALITY_FOLD_ITERATIONS; i++) {\n        // Mutate space\n        p = viralDNA(p, time + i);\n        \n        // Sample infected reality\n        vec2 samplePoint = fract(p * 0.5 + 0.5);\n        vec3 texColor = texture(iChannel0, samplePoint).rgb;\n        \n        // Calculate infection strength\n        float infection = viralGrowth(p, time - i);\n        float weight = exp(-i * 0.3);\n        \n        // Infect texColor\n        vec3 infectedColor = mix(texColor, VIRUS_COLOR, infection);\n        infected += infectedColor * weight;\n        total += weight;\n    }\n    \n    return infected / total;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    vec2 texUV = fragCoord/iResolution.xy;\n    \n    // Get base reality\n    vec3 reality = texture(iChannel0, texUV).rgb;\n    \n    // Generate viral infection\n    vec2 dna = viralDNA(uv, iTime);\n    float growth = viralGrowth(uv, iTime);\n    \n    // Create infection spread\n    vec2 infected_uv = texUV + dna * growth * INFECTION_SPREAD;\n    vec3 infected_reality = foldReality(uv, iTime);\n    \n    // Viral pulse\n    float pulse = sin(length(uv) * 10.0 - iTime * 2.0) * 0.5 + 0.5;\n    pulse *= growth;\n    \n    // Create reality tears\n    float tear = length(dna) * 0.5;\n    vec3 tear_color = vec3(1.0, 0.2, 0.3) * pulse;\n    \n    // Combine effects\n    vec3 final = mix(reality, infected_reality, growth);\n    final += tear_color * tear;\n    \n    // Add viral glow\n    final += VIRUS_COLOR * pulse * 0.3;\n    \n    // Reality decomposition\n    final *= 1.0 + growth * sin(iTime * 5.0) * 0.2;\n    \n    fragColor = vec4(final, 1.0);\n}","name":"Image","description":"","type":"image"}]}