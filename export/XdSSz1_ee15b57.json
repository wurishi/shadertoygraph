{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"// String Theory by nimitz (twitter: @stormoid)\n// https://www.shadertoy.com/view/XdSSz1\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n// Contact the author for other licensing options\n\n#define BASE_ANGLE 3.5\n#define ANGLE_DELTA 0.02\n#define XOFF .7\n\n#define time iTime\nmat2 mm2(in float a){float c = cos(a), s = sin(a);return mat2(c,-s,s,c);}\n\n\nfloat f(vec2 p, float featureSize)\n{\n\tp.x = sin(p.x*1.+time*1.2)*sin(time+p.x*0.1)*3.;\t\n    p += sin(p.x*1.5)*.1;\n    return smoothstep(-0.0,featureSize,abs(p.y));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float aspect = iResolution.x/iResolution.y;\n    float featureSize = 60./((iResolution.x*aspect+iResolution.y));\n\n    vec2 p = fragCoord.xy / iResolution.xy*6.5-3.25;\n\tp.x *= aspect;\n\tp.y = abs(p.y);\n\t\n\tvec3 col = vec3(0);\n\tfor(float i=0.;i<26.;i++)\n\t{\n\t\tvec3 col2 = (sin(vec3(3.3,2.5,2.2)+i*0.15)*0.5+0.54)*(1.-f(p,featureSize));\n\t\tcol = max(col,col2);\n\t\t\n        p.x -= XOFF;\n        p.y -= sin(time*0.11+1.5)*1.5+1.5;\n\t\tp*= mm2(i*ANGLE_DELTA+BASE_ANGLE);\n\t\t\n        vec2 pa = vec2(abs(p.x-.9),abs(p.y));\n        vec2 pb = vec2(p.x,abs(p.y));\n        \n        p = mix(pa,pb,smoothstep(-.07,.07,sin(time*0.24)+.1));\n\t}\n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XdSSz1","date":"1408673677","viewed":3889,"name":"String theory","username":"nimitz","description":"This looks better than I expected.  Try playing with the parameters","likes":141,"published":1,"flags":0,"usePreview":0,"tags":["2d","iterations","fractaloid"],"hasliked":0,"parentid":"","parentname":""}}