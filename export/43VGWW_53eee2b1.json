{"ver":"0.1","info":{"id":"43VGWW","date":"1717660344","viewed":27,"name":"Część 3 - Ray Marching","username":"Kamien","description":"Część 3 - Ray Marching","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["pracitce"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float plane(vec3 r)\n{\n\treturn r.y;\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\nvec3 rotx(vec3 r, float fi) {\n    mat3 R = mat3(\t1,0,0, 0,cos(fi),-sin(fi), 0,sin(fi),cos(fi) );\n\treturn R*r;\n}\nvec3 roty(vec3 r, float fi) {\n\tmat3 R = mat3(\tcos(fi),  0, sin(fi),\n                    0,        1, 0,\n                    -sin(fi), 0, cos(fi) );\n\treturn R*r;\n}\nvec3 rotz(vec3 r, float fi) {\n\t\n    mat3 R = mat3(\tcos(fi), -sin(fi), 0,\n                    sin(fi), cos(fi),  0,\n                    0,       0,        1 );\n\treturn R*r;\n}\n\n\nfloat dist(vec3 r)\n{\n    float r1 = .25;\n    float r2 = 0.025;\n    float pi = 3.14;\n\tfloat d = 1e10;\n\tfloat fi = (-pi/2.*(cos(iTime))-pi/2.);\n    vec3 p0 = vec3(-.5,-2.5,2.1);\n    float x2 = -0.25-2.*r1*sin(iTime);\n    float y2 = 0.70-2.*r1*0.5*(sin(2.*iTime+3./2.*pi)+1.);\n    float x3 = x2;\n    float y3 = y2+0.2;\n    d = min(d, sdTorus(rotz(rotz(r+p0-vec3(r1,0.,0.),pi/2.),pi/2.*sin(iTime))+vec3(r1,0.,0.),  vec2(r1,r2)));\n    d = min(d, sdTorus(rotx(r+p0+vec3(x2,y2,0.),pi/2.),  vec2(r1,r2)));\n    d = min(d, sdTorus(rotz(r+p0+vec3(x3,y3,0.),pi/2.)+vec3(r1,0.,0.),  vec2(r1,r2)));\n    d = min(d,plane(vec3(r)+vec3(0.,-1,0.)));\n    d = min(d,plane(rotx(vec3(r)+vec3(0.,-3.0,0.),0.95*pi)+vec3(0,-0.1,0)));\n    d = min(d, plane( rotx(rotz(vec3(r) + vec3(0.1,-1,0.), 3./2.*pi)+vec3(0,0,0),0.027)-vec3(0,0,20)));\n    d = min(d, plane( rotx(vec3(r) + vec3(0.1,-1,0.)+vec3(0.,0.,2.4), pi/2.)-vec3(0.,0.,3.)));\n    return d;\n}\n\nfloat shadow(vec3 p, vec3 l, float d)\n{\n\tfloat o=0.0;\n\tfor (int i=12; i > 0; i--) \n\t{\n\t\to += dist( p+l*float(i)*d );\n\t}\n\n\treturn clamp(o, 0.0, 1.0);\n}\n\nvec3 normal(vec3 p)\n{\n\t#define dr 1e-4\n\tvec3 drx = vec3(dr,0,0);\n\tvec3 dry = vec3(0,dr,0);\n\tvec3 drz = vec3(0,0,dr);\n\treturn ( vec3( dist(p+drx), dist(p+dry), dist(p+drz) ) - dist(p)) / dr;\n}\n\n#define ITER 999999\t\n#define EPS 0.000001\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 r = fragCoord.xy / iResolution.xy;\n\tr.x*=(iResolution.x/iResolution.y);\n\t\n\tvec4 color=vec4(0,0,0,1);\n\tvec3 camera = vec3(1.0,2.0,.0);\n\tvec3 p = vec3(r.x, r.y+1.5, -1.0);\n\tvec3 dir = normalize(p-camera);\n    \n\t\n\tfor(int i=0; i<ITER; i++)\n\t{\n\t\tfloat d = dist( p );\n\t\tif(d < EPS)\n\t\t{\n\t\t    break;\n\t\t}\n\t\tp = p + dir * d;\n\t}\n\n\tvec3 n = normal(p);\n\t\n\tvec3 light_pos = vec3(2.2,2.2,1.5);\n\n\t\n    float light = 12.0 + 1.2*(dot(n,light_pos));\n\tvec3 lightdir = normalize(light_pos-p);\n\tlight /= 0.2*pow(length(light_pos-p),3.4);\n\tlight *= shadow(p, lightdir, 0.01);\n\tcolor = vec4(light*0.39,light*0.491,light*0.198,1.0)*2.0;\n\tfragColor = color;\n}\n","name":"Image","description":"","type":"image"}]}