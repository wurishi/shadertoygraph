{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"music","id":"4sXGzn","filepath":"/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3","sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"code":"const int steps = 50;\nconst float maxd = 250.0;\nconst float precis = 0.002;\n\n// constants\nconst float radius = 0.2;\nconst vec3 sX = vec3(0.5, 0.0, 0.0);\nconst vec3 sU = sX.xxx;\nconst vec3 sY = sX.yxy;\nconst vec3 sZ = sX.yyx;\nconst vec3 pX = 2.0*sX;\nconst vec3 pY = 2.0*sY;\n\nfloat smin( float a, float b)\n{\n\tfloat k = 1.0;\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\n\n// animation\nvec3 pos[7];\nfloat freqs[4];\n\n// help functions\nfloat box(in vec3 p, in vec3 b) {\n   return length(max(abs(p) - b, 0.0)) - radius;\n}\n\nfloat ball( vec3 p, float s ) {\n  return length(p)-s;\n}\n\n// generator function\nfloat M(in vec3 p) {\n   return min(box(p,sU),min(box(p+4.0*pX,sU),min(box(p+pY+sX,sU+sX),min(box(p+3.0*pX+pY+sX,sU+sX),min(box(p+2.0*pY,sU),min(box(p+2.0*pX+2.0*pY,sU),min(box(p+4.0*pX+2.0*pY,sU),min(box(p+3.0*pY,sU),min(box(p+4.0*pX+3.0*pY,sU),min(box(p+4.0*pY,sU),box(p+4.0*pX+4.0*pY,sU)))))))))));\n}\n\nfloat A(in vec3 p) {\n   return min(box(p+4.0*sX,sU+4.0*sX),min(box(p+pY,sU),min(box(p+4.0*pX+pY,sU),min(box(p+2.0*pY,sU),min(box(p+4.0*pX+2.0*pY,sU),min(box(p+3.0*pY+4.0*sX,sU+4.0*sX),min(box(p+4.0*pY,sU),box(p+4.0*pX+4.0*pY,sU))))))));\n}\n\nfloat C(in vec3 p) {\n   return min(box(p+4.0*sX,sU+4.0*sX),min(box(p+pY,sU),min(box(p+2.0*pY,sU),min(box(p+3.0*pY,sU),box(p+4.0*pY+4.0*sX,sU+4.0*sX)))));\n}\n\nfloat K(in vec3 p) {\n   return min(box(p,sU),min(box(p+4.0*pX,sU),min(box(p+pY,sU),min(box(p+3.0*pX+pY,sU),min(box(p+2.0*pY+2.0*sX,sU+2.0*sX),min(box(p+3.0*pY,sU),min(box(p+3.0*pX+3.0*pY,sU),min(box(p+4.0*pY,sU),box(p+4.0*pX+4.0*pY,sU)))))))));\n}\n\nfloat E(in vec3 p) {\n   return min(box(p+4.0*sX,sU+4.0*sX),min(box(p+pY,sU),min(box(p+2.0*pY+3.0*sX,sU+3.0*sX),min(box(p+3.0*pY,sU),box(p+4.0*pY+4.0*sX,sU+4.0*sX)))));\n}\n\nfloat tre(in vec3 p) {\n   return min(box(p+4.0*sX,sU+4.0*sX),min(box(p+4.0*pX+pY,sU),min(box(p+pX+2.0*pY+3.0*sX,sU+3.0*sX),min(box(p+4.0*pX+3.0*pY,sU),box(p+4.0*pY+4.0*sX,sU+4.0*sX)))));\n}\n\nvec2 field(vec3 p) {\t\n\tvec2 r = vec2(maxd, -1.0);\n\t\t\n\t\n\tfloat t = iTime*0.84;\n\t\n\tfloat b = smin(\n\t\tsmin(\n\t\tball(p + 10.*vec3(cos(t*2.1), sin(1.2*t), sin(1. + 1.6*t)), 2.),\n\t\tball(p + 13.*vec3(.8*sin(2.+t)-cos(t*.1), sin(0.6*t), 0.25*sin(1.1*t)), 1.5)\n\t\t),\n\t\tsmin(\n\t\tball(p + 8.*vec3(cos(t*1.3), sin(1.2*t), sin(1. - 1.1*t)), 2.),\n\t\tball(p + 12.*vec3(.6*sin(1.+t*.9), 1.4*sin(0.6*t)+cos(t*.6), 0.5*sin(1.4*t)), 2.5)\n\t\t)\n\t\t);\n\tif (iTime < 7.) {\n\t\tb=1000.0;\n\t}\n\t\n\tfloat d = \n\t\tsmin(\n\t\t\tsmin(\n\t\t\t\tsmin(\n\t\t\t\t\t\tM(p + pos[0]),\n\t\t\t\t\t\tA(p + pos[1])\n\t\t\t\t\t),\n\t\t\t\tsmin(\n\t\t\t\t\t\tC(p + pos[2]),\n\t\t\t\t\t\tK(p + pos[3])\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\tsmin(\n\t\t\t\tsmin(\n\t\t\t\t\t\tE(p + pos[4]),\n\t\t\t\t\t\ttre(p + pos[5])\n\t\t\t\t\t),\n\t\t\t\tsmin(\n\t\t\t\t\ttre(p + pos[6]),\n\t\t\t\t\tb\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t);\n\tr = vec2(d, 1.0);\t\n\t\n\treturn r;\n}\n\nfloat hash( float n )\n{\n    return fract(sin(n)*43758.5453);\n}\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\n    f = f*f*(3.0-2.0*f);\n\n    float n = p.x + p.y*57.0 + 113.0*p.z;\n\n    float res = mix(mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\n                        mix( hash(n+ 57.0), hash(n+ 58.0),f.x),f.y),\n                    mix(mix( hash(n+113.0), hash(n+114.0),f.x),\n                        mix( hash(n+170.0), hash(n+171.0),f.x),f.y),f.z);\n    return res;\n}\n\nvec3 normal(vec3 p) {\n\tconst vec3 e = vec3(precis, 0.0, 0.0);\n\tfloat x = field(p+e.xyz).x - field(p-e.xyz).x;\n\tfloat y = field(p+e.yxz).x - field(p-e.yzx).x;\n\tfloat z = field(p+e.yzx).x - field(p-e.yzx).x;\n\treturn normalize(vec3(x, y, z));\n}\n\nvec3 intersect(in vec3 ro, in vec3 rd) {\t\n    float h = precis*1.5;\n    float t = 0.0;\n\tfloat d = 0.0;\n    float m = 1.0;\n    for( int i=0; i<steps; i++ )\n    {\n        if(abs(h) < precis || t > maxd) continue;//break;\n        t += h;\n\t    vec2 res = field( ro+rd*t );\n        h = res.x;\n\t\td = res.y;\n\t\tm = res.y;\n    }\n\n    if( t>maxd ) m=-1.0;\n    return vec3( t, d, m );\n}\n\nvec3 gencolor(float c) {\n\treturn .5 * vec3(\n\t\t\t\tsin(c*.3 + 0.0) + 1.0,\n\t\t\t\tsin(c*.3 + 2.0) + 1.0,\n\t\t\t\tsin(c*.3 + 4.0) + 1.0\n\t\t\t);\n}\t\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = -1.0 + 2.0 * (fragCoord.xy / iResolution.xy);\n\tuv.x *= iResolution.x / iResolution.y;\t\n    //-----------------------------------------------------\n    // lighting\n    //-----------------------------------------------------\t\t\n\tfloat lt = iTime * 2.41;\n\tvec3 light0 = vec3(\n\t\tcos(lt)*10., \n\t\tsin(lt)*10., \n\t\t10.);\n\t\n    //-----------------------------------------------------\n    // animation\n    //-----------------------------------------------------\t\t\t\t\n\tfreqs[0] = texture( iChannel0, vec2( 0.00, 0.20 ) ).x;\n\tfreqs[1] = texture( iChannel0, vec2( 0.05, 0.25 ) ).x;\n\tfreqs[2] = texture( iChannel0, vec2( 0.15, 0.25 ) ).x;\n\tfreqs[3] = texture( iChannel0, vec2( 0.30, 0.25 ) ).x;\n\t\n\tvec3 z = -10.*(freqs[0]-.5)*sX.zzx;\n\tvec3 y = sin(iTime*1.57+2.)*sX + cos(iTime*1.17+2.)*sX.zxz;\n\t\n\tif (iTime < 15.) {\n\t\tz *= 0.;\n\t\ty *= 0.;\n\t}\n\t\n\tpos[0] = -28.*sX + y;\n\tpos[1] = -14.*sX - y;\n\tpos[2] = vec3(0.0) + y;\n\tpos[3] = 14.*sX - y;\n\tpos[4] = 28.*sX + y;\n\t\n\tpos[5] = -8.*sX + 15.*sX.zxz + z + y;\n\tpos[6] = 8.*sX + 15.*sX.zxz + z + y;\n\t\n\tfloat m = clamp((iTime - 7.0)*0.2, 0.0, 1.0);\t\n\tfor (int i=0;i<7;i++) {\n\t\tpos[i] *= m;\n\t}\n\n    //-----------------------------------------------------\n    // camera\n    //-----------------------------------------------------\t\t\n\tfloat t = iTime * .8 + 1.87;\n\tvec3 cp = vec3(15.*cos(t), sin(t*1.64)*3., 15. + 10. * abs(sin(t)));\n\tvec3 ct = vec3(0.0, -5.0, 0.0);\n\t\n\tvec3 cd = normalize(ct - cp);\n\tvec3 side = cross(vec3(0.0, 1.0, 0.0), cd);\n\tvec3 up = cross(cd, side);\n\t\n\tvec3 rp = cp + cd + 0.5*(uv.x*side + uv.y*up);\n\tvec3 rd = normalize(rp - cp);\n\n\t//-----------------------------------------------------\n    // marching\n    //-----------------------------------------------------\t\n\tvec3 d = intersect(rp, rd);\t\t\n\t\n    //-----------------------------------------------------\n    // color\n    //-----------------------------------------------------\t\t\n\tvec3 color = vec3(0.0);\n\tif (d.z >= 0.0) {\n\t\tvec3 p = rp + d.x*rd;\n\t\tvec3 ld = normalize(light0 - p);\n\t\t\n\t\tvec3 text = gencolor(iTime*3.14 + p.x);\n\t\t\n\t\tvec3 n = normal(p);\t\t\t\n\t\tvec3 r = reflect(rd, n);\n\t\t\n\t\tfloat D = clamp(dot(ld, n), 0.0, 1.0);\n\t\tfloat S = clamp(dot(ld, r), 0.0, 1.0);\n\t\tcolor += text*D + vec3(0.8)*pow(S, 4.);\n\t} else if (iTime > 15.0) {\n\t\tfloat a = clamp((iTime - 15.0) * 0.1, 0., 1.);\n\t\tcolor = a*gencolor(iTime*6. + noise(floor(rd*15.)+freqs[2])*12.);\n\t}\n\n\tfragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"Ms2Gz3","date":"1391874313","viewed":470,"name":"Macke 33","username":"bysse","description":"Congratualtions Macke! 33 years, woah!","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["birthday"],"hasliked":0,"parentid":"","parentname":""}}