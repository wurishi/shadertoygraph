{"ver":"0.1","info":{"id":"XcXSzf","date":"1705503185","viewed":71,"name":"Transition - drip","username":"MV10","description":"Extracted this cool drip effect as one of several interesting transitions/fades I'm revising for parameterization in my audio visualizer program. \nRestart to see it again (stops after time exceeds target duration).","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["transition","crossfade"],"hasliked":0,"parentid":"lsBGzh","parentname":"Witness"},"renderpass":[{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"\n#define oldBuffer iChannel0\n#define newBuffer iChannel1\nfloat fadeDuration = 5.0;\nfloat fadeLevel;\n\nfloat dripLine(vec2 pp, out bool useNewBuffer, float t)\n{\n\tpp.y += (\n\t\t 0.4 * sin(0.5 *  2.3 * pp.x + pp.y) +\n\t\t 0.2 * sin(0.5 *  5.5 * pp.x + pp.y) +\n\t\t 0.1 * sin(0.5 * 13.7 * pp.x) +\n\t\t0.06 * sin(0.5 * 23.0 * pp.x));\n\t\n\tpp += vec2(0.0, 0.4) * t;\n\t\n\tfloat threshold = 5.3;\n\tuseNewBuffer = pp.y > threshold;\n\tfloat d = abs(pp.y - threshold);\n\treturn d;\n}\n\nvec3 scene(in vec2 pp, in vec2 uv)\n{\n    // The untouched run-time is about 13.25 sec, so scale the current time\n    // according to the target duration, then add 1.7 sec to skip the initial\n    // delay in visibility.\n    float t = (13.25 / fadeDuration) * iTime + 1.7;\n\t\n\tbool useNewBuffer;\n\tfloat d = dripLine(pp, useNewBuffer, t);\n\t\n\tif(!useNewBuffer)\n\t{\n        vec3 txo = texture(oldBuffer, uv).rgb;\n\n        // ao shading along drip-line (stronger than in the original code)\n\t\tfloat ao = clamp(smoothstep(0.0, 0.2, d), 0.0, 1.0);\n\n        return mix(1.0, sqrt(ao), 0.75) * txo;\n    }\n\telse\n\t{\n        vec3 txn = texture(newBuffer, uv).rgb;\n        \n        // fake a height to add a highlight along leading right edge\n        float h = clamp(smoothstep(0.0, 0.25, d), 0.0, 1.0);\n\t\th = 4.0 * pow(h, 0.2);\n\n\t\t// direction of the highlight\n        vec3 N = normalize(vec3(-dFdx(h), 1.0, -dFdy(h)));\n        \n        // distance above the edge\n\t\tvec3 L = normalize(vec3(0.5, 0.7, -0.5));\n        \n        // 2.5 exaggerates the highlight (bad for video, good for music viz FX)\n        return txn + pow(dot(N, L), 15.0) * vec3(2.5);\n\t}\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // This is a uniform in my real program\n    fadeLevel = clamp(iTime / fadeDuration, 0.0, 1.0);\n    if(fadeLevel >= 1.0) discard;\n\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 pp = vec2(uv.x / (iResolution.y / iResolution.x), uv.y) * 4.0;\n\tfragColor = vec4(scene(pp, uv), 1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}