{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"float det(vec2 a, vec2 b) { return a.x*b.y-b.x*a.y; }\n\nvec2 closestPointInSegment( vec2 a, vec2 b )\n{\n  vec2 ba = b - a;\n  return a + ba*clamp( -dot(a,ba)/dot(ba,ba), 0.0, 1.0 );\n}\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat cro( in vec2 a, in vec2 b ) { return a.x*b.y - a.y*b.x; }\n\n// From: http://research.microsoft.com/en-us/um/people/hoppe/ravg.pdf\nfloat sdBezier( vec2 p, vec2 v0, vec2 v1, vec2 v2 )\n{\n\tvec2 i = v0 - v2;\n    vec2 j = v2 - v1;\n    vec2 k = v1 - v0;\n    vec2 w = j-k;\n\n\tv0-= p; v1-= p; v2-= p;\n    \n\tfloat x = cro(v0, v2);\n    float y = cro(v1, v0);\n    float z = cro(v2, v1);\n\n\tvec2 s = 2.0*(y*j+z*k)-x*i;\n\n    float r =  (y*z-x*x*0.25)/dot2(s);\n    float t = clamp( (0.5*x+y+r*dot(s,w))/(x+y+z),0.0,1.0);\n    \n\treturn length( v0+t*(k+k+t*w) );\n}\n\nfloat approx_distance(vec2 p, vec2 a, vec2 b, vec2 c) {\n\n  float test = (b.x - a.x) * (c.y - a.y) - (c.x - a.x) * (b.y - a.y);\n  if(abs(test) < 0.1) {\n      return sdSegment(p, a, c);\n  }\n\n  return length(sdBezier(p, a, b, c));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 xy = fragCoord.xy;\n\t\n\tvec2 b0 = vec2(0.25, .5) * iResolution.xy;\n\t// vec2 b1 = vec2(0.5, .75 + .1*sin(iTime)) * iResolution.xy;\n\tvec2 b1 = iMouse.xy;\n\tvec2 b2 = vec2(.75, .5) * iResolution.xy;\n\tvec2 mid = .5*(b0+b2) + vec2(0.0,0.01);\n\t\n\tfloat d = approx_distance(xy, b0, b1, b2);\n\tfloat thickness = 1.0;\n\t\n\tfloat a;\n\t\n\tif(d < thickness) {\n\t  a = 1.0;\n\t} else {\n\t  // Anti-alias the edge.\n\t  a = 1.0 - smoothstep(d, thickness, thickness+1.0);\n\t}\n\t\n\t//fragColor = vec4(a,1.0,1.0, 1.0);\n\t\n\tfragColor = vec4(mod(d/50.0, 1.0),a,a, 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XsX3zf","date":"1386298482","viewed":4506,"name":"Quadratic Bezier Stroke","username":"tayholliday","description":"Rendered using a fast approximation of the distance field for a quadratic Bezier curve. The distance field is suitable for rendering a thin stroke or anti-aliasing the edge of a region.\n\nFrom http://research.microsoft.com/en-us/um/people/hoppe/ravg.pdf","likes":38,"published":1,"flags":0,"usePreview":0,"tags":["2d","distancefield","bezier"],"hasliked":0,"parentid":"","parentname":""}}