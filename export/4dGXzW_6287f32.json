{"ver":"0.1","info":{"id":"4dGXzW","date":"1463027974","viewed":272,"name":"Morphing Sand Castles","username":"zackpudil","description":"Trying to broaden my horizon with domain deformation and  distance fields. This is all essentially one sphere (with atypical metric) and plane.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","distancefields"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float hash(vec2 p) {\n\tfloat n = dot(p, vec2(12.9898, 78.233));\n\t\n\treturn fract(sin(n)*43758.5453);\n}\n\nfloat hash(float n) {\n\treturn fract(sin(n)*43758.5453);\n}\n\nfloat noise(float x) {\n\tfloat p = floor(x);\n\tfloat f = fract(x);\n\t\n\tf = f*f*(3.0 - 2.0*f);\n\t\n\treturn mix(hash(p + 0.0), hash(p + 1.0), f);\n}\n\nfloat noise(vec2 x) {\n\tvec2 p = floor(x);\n\tvec2 f = fract(x);\n\t\n\tf = f*f*(3.0 - 2.0*f);\n\tfloat n = p.x + p.y*57.0;\n\t\n\treturn mix(\n\t\tmix(hash(n + 00.0), hash(n + 01.0), f.x),\n\t\tmix(hash(n + 57.0), hash(n + 58.0), f.x),\n\t\tf.y);\n}\n\nfloat noise(vec3 x) {\n\tvec3 p = floor(x);\n\tvec3 f = fract(x);\n\t\n\tf = f*f*(3.0 - 2.0*f);\n\tfloat n = p.x + p.y*57.0 + p.z*113.0;\n\t\n\treturn mix(\n\t\tmix(\n\t\t\tmix(hash(n + 000.0), hash(n + 001.0), f.x),\n\t\t\tmix(hash(n + 057.0), hash(n + 058.0), f.x),\n\t\t\tf.y),\n\t\tmix(\n\t\t\tmix(hash(n + 113.0), hash(n + 114.0), f.x),\n\t\t\tmix(hash(n + 170.0), hash(n + 171.0), f.x),\n\t\t\tf.y),\n\t\tf.z);\n}\n\nfloat len(vec3 p, float l) {\n\tp = pow(abs(p), vec3(l));\n\treturn pow(p.x + p.y + p.z, 1.0/l);\n}\n\nfloat map(vec3 p) {\n    vec3 q = p;\n    \n\tvec2 c = floor((p.xz + 2.5)/5.0);\n\tp.xz = mod(p.xz + 2.5, 5.0) - 2.5;\n\tp.y = exp(p.y - 10.0*hash(c));\n\tp.xz = -abs(p.xz) + 0.4*cos(3.5*noise(q.y + 4.0*length(c) + iTime)) + 0.3;\n\tfloat t = len(p, 10.0) - 0.5;\n    \n\tfloat g = q.y + 3.0 + 1.5*noise(0.5*q.xz);\n\t\n\treturn min(t, g);\n}\n\nfloat march(vec3 ro, vec3 rd) {\n\tfloat t = 0.0;\n\t\n\tfor(int i = 0; i < 250; i++) {\n\t\tfloat h = map(ro + rd*t);\n\t\tif(abs(h) < 0.0001 || t >= 100.0) break;\n\t\tt += h*0.20;\n\t}\n\t\n\treturn t;\n}\n\nvec3 normal(vec3 p) {\n\tvec2 h = vec2(0.001, 0.0);\n\tvec3 n = vec3(\n\t\tmap(p + h.xyy) - map(p - h.xyy),\n\t\tmap(p + h.yxy) - map(p - h.yxy),\n\t\tmap(p + h.yyx) - map(p - h.yyx)\n\t);\n\t\n\treturn normalize(n);\n}\n\nfloat ao(vec3 p, vec3 n) {\n\tfloat s = 0.01;\n\tfloat t = s;\n\t\n\tfloat o = 0.0;\n\tfloat w = 1.0;\n\tfor(int i = 0; i < 10; i++) {\n\t\tfloat h = map(p + n*t);\n\t\t\n\t\to += (t - h)*w;\n\t\tw *= 0.95;\n\t\t\n\t\tt += s;\n\t}\n\t\n\treturn 1.0 - clamp(o, 0.0, 1.0);\n}\n\nmat3 camera(vec3 eye, vec3 lat) {\n\tvec3 ww = normalize(lat - eye);\n\tvec3 vv = normalize(cross(vec3(0, 1, 0), ww));\n\tvec3 uu = normalize(cross(ww, vv));\n\t\n\treturn mat3(vv, uu, ww);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = -1.0 + 2.0*(fragCoord.xy/iResolution.xy);\n\tuv.x *= iResolution.x/iResolution.y;\n\t\n\tvec3 col = vec3(0);\n\t\n\tvec3 ro = 10.0*vec3(iTime*0.5, 5.0/5.0, -sin(iTime*0.2));\n\tvec3 rd = camera(ro, ro + vec3(2, -2.0, sin(iTime*0.7)))*normalize(vec3(uv, 1.97));\n\t\n\tfloat i = march(ro, rd);\n\tif(i < 100.0) {\n\t\tvec3 pos = ro + rd*i;\n\t\tvec3 nor = normal(pos);\n\t\t\n\t\tvec3 lig = normalize(vec3(0.7, -0.8, 0.6));\n\t\tvec3 bli = vec3(lig.x, -lig.y, lig.z);\n\t\t\n\t\tfloat amb = 0.5 + 0.5*nor.y;\n\t\tfloat dif = clamp(dot(lig, nor), 0.0, 1.0);\n\t\tfloat bac = clamp(0.2 + 0.8*dot(bli, nor), 0.0, 1.0);\n\t\tfloat fre = pow(clamp(1.0 + dot(rd, nor), 0.0, 1.0), 2.0);\n\t\t\n\t\tfloat occ = ao(pos, nor);\n\t\t\n\t\tcol  = 0.5*amb*vec3(1);\n\t\tcol += 0.7*dif*vec3(1);\n\t\tcol += 0.1*bac*vec3(1);\n\t\t\n\t\tvec3 mat = vec3(0.8, 0.7, 0.4);\n\t\t\n\t\tif(pos.y > -2.5) {\n\t\t\tmat = mix(mat, vec3(0.8, 0.4, 0.0), 1.0 - smoothstep(0.14, 0.2, fract(pos.z)));\n        }\n        \n        mat = mix(mat, vec3(1.0), 1.0 - smoothstep(0.07, 0.14, noise(20.0*pos)));\n\t\t\n\t\tcol *= mat;\n\t\t\n\t\tcol += 0.3*fre*vec3(1);\n\t\t\n\t\tcol *= occ;\n\t}\n\t\n\tcol = pow(col, vec3(.454545));\n\t\n\tfragColor = vec4(col, 1);\n}","name":"Image","description":"","type":"image"}]}