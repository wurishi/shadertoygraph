{"ver":"0.1","info":{"id":"dtScDm","date":"1691848740","viewed":56,"name":"Tetration","username":"Pedulatsch","description":"Mandelbrot ser","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat blurr = 1.;\nfloat cutoff = 8.;\nfloat maxIt = 32.;\nfloat samples = 2.;\n\nfloat e = 2.7182818284;\nfloat pi = 3.14159265359;\nfloat zoom = 1.;\n\nvec2 Tetrated(float a, float b)\n{\n     float s = sqrt(a*a+b*b);\n    \n     float t = atan(b/a);\n     //if(t<=0.)t+=pi;\n     //if(b<0.)t+=pi;\n     \n     \n     float real = (cos(a*t)*cos(log(s)*b)-sin(a*t)*sin(log(s)*b))*pow(s,a)*pow(e,-b*t);\n     float imag = (cos(a*t)*sin(log(s)*b)+cos(log(s)*b)*sin(a*t))*pow(s,a)*pow(e,-b*t);\n     \n     \n     \n     \n     return vec2(real,imag);\n}\n\n\n\n\nvec3 Sample(vec2 pos)\n{\n    vec3 col = vec3(0,0,0);\n    \n    float realC = pos.x;\n    float irraC = pos.y;\n    \n    float realZ = realC;\n    float irraZ = irraC;\n    \n    float realZtemp = realC;\n    float irraZtemp = irraC;\n    \n    for(float i=0.;i<maxIt;i++)\n    {\n        \n        \n        float angle = atan(irraZ/realZ);\n        if(angle<=0.)angle+=pi;\n        if(irraZ<0.)angle+=pi;\n        \n        float r = sqrt(realZ*realZ-irraZ*irraZ);\n        \n        angle*=2.;\n        r*=r;\n        \n        realZ = cos(angle)*r+realC;\n        irraZ = sin(angle)*r+irraC;\n                \n        \n        \n        realZtemp = realZ*realZ-irraZ*irraZ;\n        irraZtemp = 2.*realZ*irraZ;\n        \n        realZ = realZtemp+realC;\n        irraZ = irraZtemp+irraC;\n        \n        \n        vec2 res = Tetrated(realZ,irraZ);\n        realZ = res.x+realC;\n        irraZ = res.y+irraC;\n        \n\n        \n        col = vec3((realZ*realZ+irraZ*irraZ)/cutoff,0,(realZ*realZ+irraZ*irraZ)/cutoff);\n        \n        if(realZ*realZ+irraZ*irraZ>cutoff)\n        {\n        col = vec3(0,i/maxIt,i/maxIt);\n        break;\n        }\n    }\n    \n    return col;\n\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.y;\n    uv = uv*2.-vec2(2.,1.);\n    uv*=zoom;\n    //uv+=vec2(21,68);\n    \n    // Time varying pixel color\n    \n   \n    float dp = ((2.+blurr)/iResolution.y)/zoom;\n    dp/=samples;\n    vec3 col;\n    \n    for(float x=0.;x<samples;x++)\n    {\n        for(float y=0.;y<samples;y++)\n        {\n            vec2 pos = uv+vec2(dp*x,dp*y)-vec2(samples*dp*0.5,samples*dp*0.5);\n            col+=Sample(pos);\n        }\n    }\n    \n    col/=(samples*samples);\n   \n\n    // Output to screen\n    fragColor = vec4(col*4.,1.0);\n}\n\n\n","name":"Image","description":"","type":"image"}]}