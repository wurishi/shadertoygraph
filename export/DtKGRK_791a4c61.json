{"ver":"0.1","info":{"id":"DtKGRK","date":"1684289190","viewed":59,"name":"Inspired by a LiveCoder","username":"FryeUE","description":"Saw a youtuber livecoding. They go by PG1Twitter. Saw a translated the code to shadertoy for some experiments. Hope PG is well, thanks for the jumping off point. I simplified a few things to experiment with.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["colors","sine","youtube"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* Inspired(well, basically copied) from the Youtube of pg1twitter, saw it, \nliked it figured I'd copy it for a jumping off point to experiment with \nsome color stuff. It is nice, clean and relatively easy to understand\nfor a beginner, great job PG1Twitter! */\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //generic setup\n    vec2 uv = (fragCoord -.5 * iResolution.xy)/iResolution.y;\n    float f = iTime;\n    float x = uv.x;\n    float y = uv.y;\n\n    //basic colors\n    vec3 rCol = vec3(.9,.0,.3);\n    vec3 gCol = vec3(.0,.9,.3);\n    vec3 bCol = vec3(.0,.3,.9);\n    vec3 yCol = vec3(.9,.9,.3);\n    \n    //creative sync. numbers control speeds etc.\n    float a = sin(y * 5. - f * .2) * .5;\n    float b = cos(y * 5. - f * .2) * .5;\n    float c = sin(y * 5. - f * .2 + 3.14) * .5;\n    float d = cos(y * 5. - f * .2 + 3.14) * .5;\n\n    //swap x ^^^ and y (below) for horizontal.\n    //numerator controls brightness of sine\n    float g = .015 / abs(x + a);\n    float h = .015 / abs(x + b);\n    float i = .015 / abs(x + c);\n    float j = .015 / abs(x + d);\n\n    //combines colors and sine waves.\n    vec3 destColor = rCol * g + gCol * h + bCol * i + yCol *j;\n\n    //passes to output\n    fragColor = vec4(destColor,1.0);\n}","name":"Image","description":"","type":"image"}]}