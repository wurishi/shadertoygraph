{"ver":"0.1","info":{"id":"tlScWK","date":"1595382847","viewed":75,"name":"v3Grid.glsl","username":"jorge2017a1","description":"///source code of ShaderSketches","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["v3gridglsl"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"///source code of ShaderSketches\n\nfloat uvrand(vec2 uv)\n{\n    return fract(sin(dot(uv, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 offs = vec2(iResolution.x - fragCoord.y, 0.0) / 2.0;\n    vec2 p = (fragCoord.xy - offs) / iResolution.y;\n\n    vec2 ro = vec2(0.5, 0.5); // rect origin\n    vec2 rw = vec2(0.5, 0.5); // rect extent (half width)\n    float t = floor(iTime);\n\n    for (int i = 0; i < 6; i++)\n    {\n        if (uvrand(ro + t) <  0.05 * float( i)) break;\n        rw *= 0.5;\n        ro += rw * (step(ro, p) * 2.0 - 1.0);\n    }\n\n    float rnd = uvrand(ro);\n\n    vec2 sl = rnd < 0.5 ? vec2(1,0) : vec2(0,1); // sliding param\n    sl *= 2.0 * rw * (1.0 - smoothstep(0.0, 0.5, fract(iTime)));\n\n    vec2 cp = (abs(rw - p + ro) - sl) * iResolution.y - 3.0; // rect fill\n    float c = clamp(min(cp.x, cp.y), 0.0, 1.0);\n\n    c *= rnd * (1.0 - abs(floor(p.x))); // outside\n\n    fragColor = vec4(c, 0.0, 0.0, 1.0);\n}\n\n\n","name":"Image","description":"","type":"image"}]}