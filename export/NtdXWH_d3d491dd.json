{"ver":"0.1","info":{"id":"NtdXWH","date":"1639047791","viewed":187,"name":"Seizure Warning","username":"Wykes","description":"First test with shaping functions. Works best when projected on a big wall.","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["function","shaping"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float plot(vec2 st, float pct){\n  return  smoothstep( pct-0.7, pct, st.y) -\n          smoothstep( pct, pct+0.684, st.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = (uv*2.0 - 1.0) * 1.184 ;\n    vec2 m = iMouse.xy / iResolution.xy;\n    float time = iTime;\n    m -= 100.0*sin(time);\n\n    float y = 0.0;\n    y = (((sin( uv.y*m.x / 0.334 ) + uv.x / -2.224) + fract( uv.x*m.y / -0.282 )) + fract( uv.x / uv.y )) * m.x;\n\n    vec3 color = vec3(y);\n\n    float pct = plot(uv,y);\n\n    // Time varying pixel color\n    vec3 col = vec3(pct);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}